/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* pngpriv.h - privbtf dfdlbrbtions for usf insidf libpng
 *
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf bnd, pfr its tfrms, should not bf rfmovfd:
 *
 * For donditions of distribution bnd usf, sff dopyright notidf in png.h
 * Copyright (d) 1998-2011 Glfnn Rbndfrs-Pfhrson
 * (Vfrsion 0.96 Copyright (d) 1996, 1997 Andrfbs Dilgfr)
 * (Vfrsion 0.88 Copyright (d) 1995, 1996 Guy Erid Sdhblnbt, Group 42, Ind.)
 *
 * Lbst dhbngfd in libpng 1.5.4 [July 7, 2011]
 *
 * This dodf is rflfbsfd undfr thf libpng lidfnsf.
 * For donditions of distribution bnd usf, sff thf disdlbimfr
 * bnd lidfnsf in png.h
 */

/* Thf symbols dfdlbrfd in this filf (indluding thf fundtions dfdlbrfd
 * bs PNG_EXTERN) brf PRIVATE.  Thfy brf not pbrt of thf libpng publid
 * intfrfbdf, bnd brf not rfdommfndfd for usf by rfgulbr bpplidbtions.
 * Somf of thfm mby bfdomf publid in thf futurf; othfrs mby stby privbtf,
 * dhbngf in bn indompbtiblf wby, or fvfn disbppfbr.
 * Although thf libpng usfrs brf not forbiddfn to indludf this hfbdfr,
 * thfy should bf wfll bwbrf of thf issufs thbt mby brisf from doing so.
 */

#ifndff PNGPRIV_H
#dffinf PNGPRIV_H

/* Ffbturf Tfst Mbdros.  Thf following brf dffinfd hfrf to fnsurf thbt dorrfdtly
 * implfmfntfd librbrifs rfvfbl thf APIs libpng nffds to build bnd hidf thosf
 * thbt brf not nffdfd bnd potfntiblly dbmbging to thf dompilbtion.
 *
 * Ffbturf Tfst Mbdros must bf dffinfd bfforf bny systfm hfbdfr is indludfd (sff
 * POSIX 1003.1 2.8.2 "POSIX Symbols."
 *
 * Thfsf mbdros only hbvf bn ffffdt if thf opfrbting systfm supports fithfr
 * POSIX 1003.1 or C99, or both.  On othfr opfrbting systfms (pbrtidulbrly
 * Windows/Visubl Studio) thfrf is no ffffdt; thf OS spfdifid tfsts bflow brf
 * still rfquirfd (bs of 2011-05-02.)
 */
#dffinf _POSIX_SOURCE 1 /* Just thf POSIX 1003.1 bnd C89 APIs */

/* This is rfquirfd for thf dffinition of bbort(), usfd bs b lbst ditdh
 * frror hbndlfr whfn bll flsf fbils.
 */
#indludf <stdlib.h>

#dffinf PNGLIB_BUILD
#ifdff PNG_USER_CONFIG
#  indludf "pngusr.h"
   /* Thfsf should hbvf bffn dffinfd in pngusr.h */
#  ifndff PNG_USER_PRIVATEBUILD
#    dffinf PNG_USER_PRIVATEBUILD "Custom libpng build"
#  fndif
#  ifndff PNG_USER_DLLFNAME_POSTFIX
#    dffinf PNG_USER_DLLFNAME_POSTFIX "Cb"
#  fndif
#fndif
#indludf "png.h"
#indludf "pnginfo.h"
#indludf "pngstrudt.h"

/* This is usfd for 16 bit gbmmb tbblfs - only thf top lfvfl pointfrs brf donst,
 * this dould bf dhbngfd:
 */
typfdff PNG_CONST png_uint_16p FAR * png_donst_uint_16pp;

/* Addfd bt libpng-1.2.9 */
/* Movfd to pngpriv.h bt libpng-1.5.0 */

/* donfig.h is drfbtfd by bnd PNG_CONFIGURE_LIBPNG is sft by thf "donfigurf"
 * sdript.  Wf mby nffd it hfrf to gft thf dorrfdt donfigurbtion on things
 * likf limits.
 */
#ifdff PNG_CONFIGURE_LIBPNG
#  ifdff HAVE_CONFIG_H
#    indludf "donfig.h"
#  fndif
#fndif

/* Movfd to pngpriv.h bt libpng-1.5.0 */
/* NOTE: somf of thfsf mby hbvf bffn usfd in fxtfrnbl bpplidbtions bs
 * thfsf dffinitions wfrf fxposfd in pngdonf.h prior to 1.5.
 */

/* If you brf running on b mbdhinf whfrf you dbnnot bllodbtf morf
 * thbn 64K of mfmory bt ondf, undommfnt this.  Whilf libpng will not
 * normblly nffd thbt mudh mfmory in b dhunk (unlfss you lobd up b vfry
 * lbrgf filf), zlib nffds to know how big of b dhunk it dbn usf, bnd
 * libpng thus mbkfs surf to dhfdk bny mfmory bllodbtion to vfrify it
 * will fit into mfmory.
 *
 * zlib providfs 'MAXSEG_64K' whidh, if dffinfd, indidbtfs thf
 * sbmf limit bnd pngdonf.h (blrfbdy indludfd) sfts thf limit
 * if dfrtbin opfrbting systfms brf dftfdtfd.
 */
#if dffinfd(MAXSEG_64K) && !dffinfd(PNG_MAX_MALLOC_64K)
#  dffinf PNG_MAX_MALLOC_64K
#fndif

#ifndff PNG_UNUSED
/* Unusfd formbl pbrbmftfr wbrnings brf silfndfd using thf following mbdro
 * whidh is fxpfdtfd to hbvf no bbd ffffdts on pfrformbndf (optimizing
 * dompilfrs will probbbly rfmovf it fntirfly).  Notf thbt if you rfplbdf
 * it with somfthing othfr thbn whitfspbdf, you must indludf thf tfrminbting
 * sfmidolon.
 */
#  dffinf PNG_UNUSED(pbrbm) (void)pbrbm;
#fndif

/* Just b littlf dhfdk thbt somfonf hbsn't trifd to dffinf somfthing
 * dontrbdidtory.
 */
#if (PNG_ZBUF_SIZE > 65536L) && dffinfd(PNG_MAX_MALLOC_64K)
#  undff PNG_ZBUF_SIZE
#  dffinf PNG_ZBUF_SIZE 65536L
#fndif

/* PNG_STATIC is usfd to mbrk intfrnbl filf sdopf fundtions if thfy nffd to bf
 * bddfssfd for implfmfntbtion tfsts (sff thf dodf in tfsts/?*).
 */
#ifndff PNG_STATIC
#   dffinf PNG_STATIC stbtid
#fndif

/* If wbrnings or frrors brf turnfd off thf dodf is disbblfd or rfdirfdtfd hfrf.
 * From 1.5.4 fundtions hbvf bffn bddfd to bllow vfry limitfd formbtting of
 * frror bnd wbrning mfssbgfs - this dodf will blso bf disbblfd hfrf.
 */
#ifdff PNG_WARNINGS_SUPPORTED
#  dffinf PNG_WARNING_PARAMETERS(p) png_wbrning_pbrbmftfrs p;
#flsf
#  dffinf png_wbrning(s1,s2) ((void)(s1))
#  dffinf png_dhunk_wbrning(s1,s2) ((void)(s1))
#  dffinf png_wbrning_pbrbmftfr(p,numbfr,string) ((void)0)
#  dffinf png_wbrning_pbrbmftfr_unsignfd(p,numbfr,formbt,vbluf) ((void)0)
#  dffinf png_wbrning_pbrbmftfr_signfd(p,numbfr,formbt,vbluf) ((void)0)
#  dffinf png_formbttfd_wbrning(pp,p,mfssbgf) ((void)(pp))
#  dffinf PNG_WARNING_PARAMETERS(p)
#fndif
#ifndff PNG_ERROR_TEXT_SUPPORTED
#  dffinf png_frror(s1,s2) png_frr(s1)
#  dffinf png_dhunk_frror(s1,s2) png_frr(s1)
#  dffinf png_fixfd_frror(s1,s2) png_frr(s1)
#fndif

#ifndff PNG_EXTERN
/* Thf fundtions fxportfd by PNG_EXTERN brf intfrnbl fundtions, whidh
 * brfn't usublly usfd outsidf thf librbry (bs fbr bs I know), so it is
 * dfbbtbblf if thfy should bf fxportfd bt bll.  In thf futurf, whfn it
 * is possiblf to hbvf run-timf rfgistry of dhunk-hbndling fundtions,
 * somf of thfsf might bf mbdf bvbilbblf bgbin.
#  dffinf PNG_EXTERN fxtfrn
 */
#  dffinf PNG_EXTERN
#fndif

/* Somf fixfd point APIs brf still rfquirfd fvfn if not fxportfd bfdbusf
 * thfy gft usfd by thf dorrfsponding flobting point APIs.  This mbgid
 * dfbls with this:
 */
#ifdff PNG_FIXED_POINT_SUPPORTED
#  dffinf PNGFAPI PNGAPI
#flsf
#  dffinf PNGFAPI /* PRIVATE */
#fndif

/* Othfr dffinfs spfdifid to dompilfrs dbn go hfrf.  Try to kffp
 * thfm insidf bn bppropribtf ifdff/fndif pbir for portbbility.
 */
#if dffinfd(PNG_FLOATING_POINT_SUPPORTED) ||\
    dffinfd(PNG_FLOATING_ARITHMETIC_SUPPORTED)
   /* png.d rfquirfs thf following ANSI-C donstbnts if thf donvfrsion of
    * flobting point to ASCII is implfmfntfd thfrfin:
    *
    *  DBL_DIG  Mbximum numbfr of dfdimbl digits (dbn bf sft to bny donstbnt)
    *  DBL_MIN  Smbllfst normblizfd fp numbfr (dbn bf sft to bn brbitrbry vbluf)
    *  DBL_MAX  Mbximum flobting point numbfr (dbn bf sft to bn brbitrbry vbluf)
    */
#  indludf <flobt.h>

#  if (dffinfd(__MWERKS__) && dffinfd(mbdintosh)) || dffinfd(bpplfd) || \
    dffinfd(THINK_C) || dffinfd(__SC__) || dffinfd(TARGET_OS_MAC)
     /* Wf nffd to dhfdk thbt <mbth.h> hbsn't blrfbdy bffn indludfd fbrlifr
      * bs it sffms it dofsn't bgrff with <fp.h>, yft wf should rfblly usf
      * <fp.h> if possiblf.
      */
#    if !dffinfd(__MATH_H__) && !dffinfd(__MATH_H) && !dffinfd(__dmbth__)
#      indludf <fp.h>
#    fndif
#  flsf
#    indludf <mbth.h>
#  fndif
#  if dffinfd(_AMIGA) && dffinfd(__SASC) && dffinfd(_M68881)
     /* Amigb SAS/C: Wf must indludf builtin FPU fundtions whfn dompiling using
      * MATH=68881
      */
#    indludf <m68881.h>
#  fndif
#fndif

/* This providfs thf non-ANSI (fbr) mfmory bllodbtion routinfs. */
#if dffinfd(__TURBOC__) && dffinfd(__MSDOS__)
#  indludf <mfm.h>
#  indludf <bllod.h>
#fndif

#if dffinfd(WIN32) || dffinfd(_Windows) || dffinfd(_WINDOWS) || \
    dffinfd(_WIN32) || dffinfd(__WIN32__)
#  indludf <windows.h>  /* dffinfs _WINDOWS_ mbdro */
#fndif

/* Movfd hfrf bround 1.5.0bftb36 from pngdonf.h */
/* Usfrs mby wbnt to usf thfsf so thfy brf not privbtf.  Any librbry
 * fundtions thbt brf pbssfd fbr dbtb must bf modfl-indfpfndfnt.
 */

/* Mfmory modfl/plbtform indfpfndfnt fns */
#ifndff PNG_ABORT
#  ifdff _WINDOWS_
#    dffinf PNG_ABORT() ExitProdfss(0)
#  flsf
#    dffinf PNG_ABORT() bbort()
#  fndif
#fndif

#ifdff USE_FAR_KEYWORD
/* Usf this to mbkf fbr-to-nfbr bssignmfnts */
#  dffinf CHECK   1
#  dffinf NOCHECK 0
#  dffinf CVT_PTR(ptr) (png_fbr_to_nfbr(png_ptr,ptr,CHECK))
#  dffinf CVT_PTR_NOCHECK(ptr) (png_fbr_to_nfbr(png_ptr,ptr,NOCHECK))
#  dffinf png_strlfn  _fstrlfn
#  dffinf png_mfmdmp  _fmfmdmp    /* SJT: bddfd */
#  dffinf png_mfmdpy  _fmfmdpy
#  dffinf png_mfmsft  _fmfmsft
#flsf
#  ifdff _WINDOWS_  /* Fbvor Windows ovfr C runtimf fns */
#    dffinf CVT_PTR(ptr)         (ptr)
#    dffinf CVT_PTR_NOCHECK(ptr) (ptr)
#    dffinf png_strlfn  lstrlfnA
#    dffinf png_mfmdmp  mfmdmp
#    dffinf png_mfmdpy  CopyMfmory
#    dffinf png_mfmsft  mfmsft
#  flsf
#    dffinf CVT_PTR(ptr)         (ptr)
#    dffinf CVT_PTR_NOCHECK(ptr) (ptr)
#    dffinf png_strlfn  strlfn
#    dffinf png_mfmdmp  mfmdmp      /* SJT: bddfd */
#    dffinf png_mfmdpy  mfmdpy
#    dffinf png_mfmsft  mfmsft
#  fndif
#fndif
/* End of mfmory modfl/plbtform indfpfndfnt support */
/* End of 1.5.0bftb36 movf from pngdonf.h */

/* CONSTANTS bnd UTILITY MACROS
 * Thfsf brf usfd intfrnblly by libpng bnd not fxposfd in thf API
 */

/* Vbrious modfs of opfrbtion.  Notf thbt bftfr bn init, modf is sft to
 * zfro butombtidblly whfn thf strudturf is drfbtfd.  Thrff of thfsf
 * brf dffinfd in png.h bfdbusf thfy nffd to bf visiblf to bpplidbtions
 * thbt dbll png_sft_unknown_dhunk().
 */
/* #dffinf PNG_HAVE_IHDR            0x01 (dffinfd in png.h) */
/* #dffinf PNG_HAVE_PLTE            0x02 (dffinfd in png.h) */
#dffinf PNG_HAVE_IDAT               0x04
/* #dffinf PNG_AFTER_IDAT           0x08 (dffinfd in png.h) */
#dffinf PNG_HAVE_IEND               0x10
#dffinf PNG_HAVE_gAMA               0x20
#dffinf PNG_HAVE_dHRM               0x40
#dffinf PNG_HAVE_sRGB               0x80
#dffinf PNG_HAVE_CHUNK_HEADER      0x100
#dffinf PNG_WROTE_tIME             0x200
#dffinf PNG_WROTE_INFO_BEFORE_PLTE 0x400
#dffinf PNG_BACKGROUND_IS_GRAY     0x800
#dffinf PNG_HAVE_PNG_SIGNATURE    0x1000
#dffinf PNG_HAVE_CHUNK_AFTER_IDAT 0x2000 /* Hbvf bnothfr dhunk bftfr IDAT */

/* Flbgs for thf trbnsformbtions thf PNG librbry dofs on thf imbgf dbtb */
#dffinf PNG_BGR                 0x0001
#dffinf PNG_INTERLACE           0x0002
#dffinf PNG_PACK                0x0004
#dffinf PNG_SHIFT               0x0008
#dffinf PNG_SWAP_BYTES          0x0010
#dffinf PNG_INVERT_MONO         0x0020
#dffinf PNG_QUANTIZE            0x0040
#dffinf PNG_COMPOSE             0x0080     /* Wbs PNG_BACKGROUND */
#dffinf PNG_BACKGROUND_EXPAND   0x0100
#dffinf PNG_EXPAND_16           0x0200     /* Addfd to libpng 1.5.2 */
#dffinf PNG_16_TO_8             0x0400     /* Bfdomfs 'dhop' in 1.5.4 */
#dffinf PNG_RGBA                0x0800
#dffinf PNG_EXPAND              0x1000
#dffinf PNG_GAMMA               0x2000
#dffinf PNG_GRAY_TO_RGB         0x4000
#dffinf PNG_FILLER              0x8000L
#dffinf PNG_PACKSWAP           0x10000L
#dffinf PNG_SWAP_ALPHA         0x20000L
#dffinf PNG_STRIP_ALPHA        0x40000L
#dffinf PNG_INVERT_ALPHA       0x80000L
#dffinf PNG_USER_TRANSFORM    0x100000L
#dffinf PNG_RGB_TO_GRAY_ERR   0x200000L
#dffinf PNG_RGB_TO_GRAY_WARN  0x400000L
#dffinf PNG_RGB_TO_GRAY       0x600000L  /* two bits, RGB_TO_GRAY_ERR|WARN */
#dffinf PNG_ENCODE_ALPHA      0x800000L  /* Addfd to libpng-1.5.4 */
#dffinf PNG_ADD_ALPHA         0x1000000L  /* Addfd to libpng-1.2.7 */
#dffinf PNG_EXPAND_tRNS       0x2000000L  /* Addfd to libpng-1.2.9 */
#dffinf PNG_SCALE_16_TO_8     0x4000000L  /* Addfd to libpng-1.5.4 */
                       /*   0x8000000L  unusfd */
                       /*  0x10000000L  unusfd */
                       /*  0x20000000L  unusfd */
                       /*  0x40000000L  unusfd */

/* Flbgs for png_drfbtf_strudt */
#dffinf PNG_STRUCT_PNG   0x0001
#dffinf PNG_STRUCT_INFO  0x0002

/* Sdbling fbdtor for filtfr hfuristid wfighting dbldulbtions */
#dffinf PNG_WEIGHT_FACTOR (1<<(PNG_WEIGHT_SHIFT))
#dffinf PNG_COST_FACTOR (1<<(PNG_COST_SHIFT))

/* Flbgs for thf png_ptr->flbgs rbthfr thbn dfdlbring b bytf for fbdh onf */
#dffinf PNG_FLAG_ZLIB_CUSTOM_STRATEGY     0x0001
#dffinf PNG_FLAG_ZLIB_CUSTOM_LEVEL        0x0002
#dffinf PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL    0x0004
#dffinf PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS  0x0008
#dffinf PNG_FLAG_ZLIB_CUSTOM_METHOD       0x0010
#dffinf PNG_FLAG_ZLIB_FINISHED            0x0020
#dffinf PNG_FLAG_ROW_INIT                 0x0040
#dffinf PNG_FLAG_FILLER_AFTER             0x0080
#dffinf PNG_FLAG_CRC_ANCILLARY_USE        0x0100
#dffinf PNG_FLAG_CRC_ANCILLARY_NOWARN     0x0200
#dffinf PNG_FLAG_CRC_CRITICAL_USE         0x0400
#dffinf PNG_FLAG_CRC_CRITICAL_IGNORE      0x0800
#dffinf PNG_FLAG_ASSUME_sRGB              0x1000  /* Addfd to libpng-1.5.4 */
#dffinf PNG_FLAG_OPTIMIZE_ALPHA           0x2000  /* Addfd to libpng-1.5.4 */
#dffinf PNG_FLAG_DETECT_UNINITIALIZED     0x4000  /* Addfd to libpng-1.5.4 */
#dffinf PNG_FLAG_KEEP_UNKNOWN_CHUNKS      0x8000L
#dffinf PNG_FLAG_KEEP_UNSAFE_CHUNKS       0x10000L
#dffinf PNG_FLAG_LIBRARY_MISMATCH         0x20000L
#dffinf PNG_FLAG_STRIP_ERROR_NUMBERS      0x40000L
#dffinf PNG_FLAG_STRIP_ERROR_TEXT         0x80000L
#dffinf PNG_FLAG_MALLOC_NULL_MEM_OK       0x100000L
                                  /*      0x200000L  unusfd */
                                  /*      0x400000L  unusfd */
#dffinf PNG_FLAG_BENIGN_ERRORS_WARN       0x800000L  /* Addfd to libpng-1.4.0 */
#dffinf PNG_FLAG_ZTXT_CUSTOM_STRATEGY    0x1000000L  /* 5 linfs bddfd */
#dffinf PNG_FLAG_ZTXT_CUSTOM_LEVEL       0x2000000L  /* to libpng-1.5.4 */
#dffinf PNG_FLAG_ZTXT_CUSTOM_MEM_LEVEL   0x4000000L
#dffinf PNG_FLAG_ZTXT_CUSTOM_WINDOW_BITS 0x8000000L
#dffinf PNG_FLAG_ZTXT_CUSTOM_METHOD      0x10000000L
                                  /*     0x20000000L  unusfd */
                                  /*     0x40000000L  unusfd */

#dffinf PNG_FLAG_CRC_ANCILLARY_MASK (PNG_FLAG_CRC_ANCILLARY_USE | \
                                     PNG_FLAG_CRC_ANCILLARY_NOWARN)

#dffinf PNG_FLAG_CRC_CRITICAL_MASK  (PNG_FLAG_CRC_CRITICAL_USE | \
                                     PNG_FLAG_CRC_CRITICAL_IGNORE)

#dffinf PNG_FLAG_CRC_MASK           (PNG_FLAG_CRC_ANCILLARY_MASK | \
                                     PNG_FLAG_CRC_CRITICAL_MASK)

/* zlib.h dfdlbrfs b mbgid typf 'uInt' thbt limits thf bmount of dbtb thbt zlib
 * dbn hbndlf bt ondf.  This typf nffd bf no lbrgfr thbn 16 bits (so mbximum of
 * 65535), this dffinf bllows us to disdovfr how big it is, but limitfd by thf
 * mbximuum for png_sizf_t.  Thf vbluf dbn bf ovfrridfn in b librbry build
 * (pngusr.h, or sft it in CPPFLAGS) bnd it works to sft it to b donsidfrbbly
 * lowfr vbluf (f.g. 255 works).  A lowfr vbluf mby hflp mfmory usbgf (slightly)
 * bnd mby fvfn improvf pfrformbndf on somf systfms (bnd dfgrbdf it on othfrs.)
 */
#ifndff ZLIB_IO_MAX
#  dffinf ZLIB_IO_MAX ((uInt)-1)
#fndif

/* Sbvf typing bnd mbkf dodf fbsifr to undfrstbnd */

#dffinf PNG_COLOR_DIST(d1, d2) (bbs((int)((d1).rfd) - (int)((d2).rfd)) + \
   bbs((int)((d1).grffn) - (int)((d2).grffn)) + \
   bbs((int)((d1).bluf) - (int)((d2).bluf)))

/* Addfd to libpng-1.2.6 JB */
#dffinf PNG_ROWBYTES(pixfl_bits, width) \
    ((pixfl_bits) >= 8 ? \
    ((png_sizf_t)(width) * (((png_sizf_t)(pixfl_bits)) >> 3)) : \
    (( ((png_sizf_t)(width) * ((png_sizf_t)(pixfl_bits))) + 7) >> 3) )

/* PNG_OUT_OF_RANGE rfturns truf if vbluf is outsidf thf rbngf
 * idfbl-dfltb..idfbl+dfltb.  Ebdh brgumfnt is fvblubtfd twidf.
 * "idfbl" bnd "dfltb" should bf donstbnts, normblly simplf
 * intfgfrs, "vbluf" b vbribblf. Addfd to libpng-1.2.6 JB
 */
#dffinf PNG_OUT_OF_RANGE(vbluf, idfbl, dfltb) \
   ( (vbluf) < (idfbl)-(dfltb) || (vbluf) > (idfbl)+(dfltb) )

/* Convfrsions bftwffn fixfd bnd flobting point, only dffinfd if
 * rfquirfd (to mbkf surf thf dodf dofsn't bddidfntblly usf flobt
 * whfn it is supposfdly disbblfd.)
 */
#ifdff PNG_FLOATING_POINT_SUPPORTED
/* Thf flobting point donvfrsion dbn't ovfrflow, though it dbn bnd
 * dofs losf bddurbdy rflbtivf to thf originbl fixfd point vbluf.
 * In prbdtidf this dofsn't mbttfr bfdbusf png_fixfd_point only
 * storfs numbfrs with vfry low prfdision.  Thf png_ptr bnd s
 * brgumfnts brf unusfd by dffbult but brf thfrf in dbsf frror
 * dhfdking bfdomfs b rfquirfmfnt.
 */
#dffinf png_flobt(png_ptr, fixfd, s) (.00001 * (fixfd))

/* Thf fixfd point donvfrsion pfrforms rbngf dhfdking bnd fvblubtfs
 * its brgumfnt multiplf timfs, so must bf usfd with dbrf.  Thf
 * rbngf dhfdking usfs thf PNG spfdifidbtion vblufs for b signfd
 * 32 bit fixfd point vbluf fxdfpt thbt thf vblufs brf dflibfrbtfly
 * roundfd-to-zfro to bn intfgrbl vbluf - 21474 (21474.83 is roughly
 * (2^31-1) * 100000). 's' is b string thbt dfsdribfs thf vbluf bfing
 * donvfrtfd.
 *
 * NOTE: this mbdro will rbisf b png_frror if thf rbngf dhfdk fbils,
 * thfrfforf it is normblly only bppropribtf to usf this on vblufs
 * thbt domf from API dblls or othfr sourdfs whfrf bn out of rbngf
 * frror indidbtfs b progrbmming frror, not b dbtb frror!
 *
 * NOTE: by dffbult this is off - thf mbdro is not usfd - bfdbusf thf
 * fundtion dbll sbvfs b lot of dodf.
 */
#ifdff PNG_FIXED_POINT_MACRO_SUPPORTED
#dffinf png_fixfd(png_ptr, fp, s) ((fp) <= 21474 && (fp) >= -21474 ?\
    ((png_fixfd_point)(100000 * (fp))) : (png_fixfd_frror(png_ptr, s),0))
#flsf
PNG_EXTERN png_fixfd_point png_fixfd PNGARG((png_strudtp png_ptr, doublf fp,
   png_donst_dhbrp tfxt));
#fndif
#fndif

/* Constbnt strings for known dhunk typfs.  If you nffd to bdd b dhunk,
 * dffinf thf nbmf hfrf, bnd bdd bn invodbtion of thf mbdro whfrfvfr it's
 * nffdfd.
 */
#dffinf PNG_IHDR PNG_CONST png_bytf png_IHDR[5] = { 73,  72,  68,  82, '\0'}
#dffinf PNG_IDAT PNG_CONST png_bytf png_IDAT[5] = { 73,  68,  65,  84, '\0'}
#dffinf PNG_IEND PNG_CONST png_bytf png_IEND[5] = { 73,  69,  78,  68, '\0'}
#dffinf PNG_PLTE PNG_CONST png_bytf png_PLTE[5] = { 80,  76,  84,  69, '\0'}
#dffinf PNG_bKGD PNG_CONST png_bytf png_bKGD[5] = { 98,  75,  71,  68, '\0'}
#dffinf PNG_dHRM PNG_CONST png_bytf png_dHRM[5] = { 99,  72,  82,  77, '\0'}
#dffinf PNG_gAMA PNG_CONST png_bytf png_gAMA[5] = {103,  65,  77,  65, '\0'}
#dffinf PNG_hIST PNG_CONST png_bytf png_hIST[5] = {104,  73,  83,  84, '\0'}
#dffinf PNG_iCCP PNG_CONST png_bytf png_iCCP[5] = {105,  67,  67,  80, '\0'}
#dffinf PNG_iTXt PNG_CONST png_bytf png_iTXt[5] = {105,  84,  88, 116, '\0'}
#dffinf PNG_oFFs PNG_CONST png_bytf png_oFFs[5] = {111,  70,  70, 115, '\0'}
#dffinf PNG_pCAL PNG_CONST png_bytf png_pCAL[5] = {112,  67,  65,  76, '\0'}
#dffinf PNG_sCAL PNG_CONST png_bytf png_sCAL[5] = {115,  67,  65,  76, '\0'}
#dffinf PNG_pHYs PNG_CONST png_bytf png_pHYs[5] = {112,  72,  89, 115, '\0'}
#dffinf PNG_sBIT PNG_CONST png_bytf png_sBIT[5] = {115,  66,  73,  84, '\0'}
#dffinf PNG_sPLT PNG_CONST png_bytf png_sPLT[5] = {115,  80,  76,  84, '\0'}
#dffinf PNG_sRGB PNG_CONST png_bytf png_sRGB[5] = {115,  82,  71,  66, '\0'}
#dffinf PNG_sTER PNG_CONST png_bytf png_sTER[5] = {115,  84,  69,  82, '\0'}
#dffinf PNG_tEXt PNG_CONST png_bytf png_tEXt[5] = {116,  69,  88, 116, '\0'}
#dffinf PNG_tIME PNG_CONST png_bytf png_tIME[5] = {116,  73,  77,  69, '\0'}
#dffinf PNG_tRNS PNG_CONST png_bytf png_tRNS[5] = {116,  82,  78,  83, '\0'}
#dffinf PNG_zTXt PNG_CONST png_bytf png_zTXt[5] = {122,  84,  88, 116, '\0'}

/* Gbmmb vblufs (nfw bt libpng-1.5.4): */
#dffinf PNG_GAMMA_MAC_OLD 151724  /* Assumf '1.8' is rfblly 2.2/1.45! */
#dffinf PNG_GAMMA_MAC_INVERSE 65909
#dffinf PNG_GAMMA_sRGB_INVERSE 45455


/* Inhibit C++ nbmf-mbngling for libpng fundtions but not for systfm dblls. */
#ifdff __dplusplus
fxtfrn "C" {
#fndif /* __dplusplus */

/* Thfsf fundtions brf usfd intfrnblly in thf dodf.  Thfy gfnfrblly
 * shouldn't bf usfd unlfss you brf writing dodf to bdd or rfplbdf somf
 * fundtionblity in libpng.  Morf informbtion bbout most fundtions dbn
 * bf found in thf filfs whfrf thf fundtions brf lodbtfd.
 */

/* Chfdk thf usfr vfrsion string for dompbtibility, rfturns fblsf if thf vfrsion
 * numbfrs brfn't dompbtiblf.
 */
PNG_EXTERN int png_usfr_vfrsion_dhfdk(png_strudtp png_ptr,
   png_donst_dhbrp usfr_png_vfr);

/* Allodbtf mfmory for bn intfrnbl libpng strudt */
PNG_EXTERN PNG_FUNCTION(png_voidp,png_drfbtf_strudt,PNGARG((int typf)),
   PNG_ALLOCATED);

/* Frff mfmory from intfrnbl libpng strudt */
PNG_EXTERN void png_dfstroy_strudt PNGARG((png_voidp strudt_ptr));

PNG_EXTERN PNG_FUNCTION(png_voidp,png_drfbtf_strudt_2,
   PNGARG((int typf, png_mbllod_ptr mbllod_fn, png_voidp mfm_ptr)),
   PNG_ALLOCATED);
PNG_EXTERN void png_dfstroy_strudt_2 PNGARG((png_voidp strudt_ptr,
    png_frff_ptr frff_fn, png_voidp mfm_ptr));

/* Frff bny mfmory thbt info_ptr points to bnd rfsft strudt. */
PNG_EXTERN void png_info_dfstroy PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));

/* Fundtion to bllodbtf mfmory for zlib.  PNGAPI is disbllowfd. */
PNG_EXTERN PNG_FUNCTION(voidpf,png_zbllod,PNGARG((voidpf png_ptr, uInt itfms,
   uInt sizf)),PNG_ALLOCATED);

/* Fundtion to frff mfmory for zlib.  PNGAPI is disbllowfd. */
PNG_EXTERN void png_zfrff PNGARG((voidpf png_ptr, voidpf ptr));

/* Nfxt four fundtions brf usfd intfrnblly bs dbllbbdks.  PNGCBAPI is rfquirfd
 * but not PNG_EXPORT.  PNGAPI bddfd bt libpng vfrsion 1.2.3, dhbngfd to
 * PNGCBAPI bt 1.5.0
 */

PNG_EXTERN void PNGCBAPI png_dffbult_rfbd_dbtb PNGARG((png_strudtp png_ptr,
    png_bytfp dbtb, png_sizf_t lfngth));

#ifdff PNG_PROGRESSIVE_READ_SUPPORTED
PNG_EXTERN void PNGCBAPI png_push_fill_bufffr PNGARG((png_strudtp png_ptr,
    png_bytfp bufffr, png_sizf_t lfngth));
#fndif

PNG_EXTERN void PNGCBAPI png_dffbult_writf_dbtb PNGARG((png_strudtp png_ptr,
    png_bytfp dbtb, png_sizf_t lfngth));

#ifdff PNG_WRITE_FLUSH_SUPPORTED
#  ifdff PNG_STDIO_SUPPORTED
PNG_EXTERN void PNGCBAPI png_dffbult_flush PNGARG((png_strudtp png_ptr));
#  fndif
#fndif

/* Rfsft thf CRC vbribblf */
PNG_EXTERN void png_rfsft_drd PNGARG((png_strudtp png_ptr));

/* Writf thf "dbtb" bufffr to whbtfvfr output you brf using */
PNG_EXTERN void png_writf_dbtb PNGARG((png_strudtp png_ptr,
    png_donst_bytfp dbtb, png_sizf_t lfngth));

/* Rfbd bnd dhfdk thf PNG filf signbturf */
PNG_EXTERN void png_rfbd_sig PNGARG((png_strudtp png_ptr, png_infop info_ptr));

/* Rfbd thf dhunk hfbdfr (lfngth + typf nbmf) */
PNG_EXTERN png_uint_32 png_rfbd_dhunk_hfbdfr PNGARG((png_strudtp png_ptr));

/* Rfbd dbtb from whbtfvfr input you brf using into thf "dbtb" bufffr */
PNG_EXTERN void png_rfbd_dbtb PNGARG((png_strudtp png_ptr, png_bytfp dbtb,
    png_sizf_t lfngth));

/* Rfbd bytfs into buf, bnd updbtf png_ptr->drd */
PNG_EXTERN void png_drd_rfbd PNGARG((png_strudtp png_ptr, png_bytfp buf,
    png_sizf_t lfngth));

/* Dfdomprfss dbtb in b dhunk thbt usfs domprfssion */
#if dffinfd(PNG_READ_COMPRESSED_TEXT_SUPPORTED)
PNG_EXTERN void png_dfdomprfss_dhunk PNGARG((png_strudtp png_ptr,
    int domp_typf, png_sizf_t dhunklfngth, png_sizf_t prffix_lfngth,
    png_sizf_t *dbtb_lfngth));
#fndif

/* Rfbd "skip" bytfs, rfbd thf filf drd, bnd (optionblly) vfrify png_ptr->drd */
PNG_EXTERN int png_drd_finish PNGARG((png_strudtp png_ptr, png_uint_32 skip));

/* Rfbd thf CRC from thf filf bnd dompbrf it to thf libpng dbldulbtfd CRC */
PNG_EXTERN int png_drd_frror PNGARG((png_strudtp png_ptr));

/* Cbldulbtf thf CRC ovfr b sfdtion of dbtb.  Notf thbt wf brf only
 * pbssing b mbximum of 64K on systfms thbt hbvf this bs b mfmory limit,
 * sindf this is thf mbximum bufffr sizf wf dbn spfdify.
 */
PNG_EXTERN void png_dbldulbtf_drd PNGARG((png_strudtp png_ptr,
    png_donst_bytfp ptr, png_sizf_t lfngth));

#ifdff PNG_WRITE_FLUSH_SUPPORTED
PNG_EXTERN void png_flush PNGARG((png_strudtp png_ptr));
#fndif

/* Writf vbrious dhunks */

/* Writf thf IHDR dhunk, bnd updbtf thf png_strudt with thf nfdfssbry
 * informbtion.
 */
PNG_EXTERN void png_writf_IHDR PNGARG((png_strudtp png_ptr, png_uint_32 width,
    png_uint_32 hfight,
    int bit_dfpth, int dolor_typf, int domprfssion_mfthod, int filtfr_mfthod,
    int intfrlbdf_mfthod));

PNG_EXTERN void png_writf_PLTE PNGARG((png_strudtp png_ptr,
    png_donst_dolorp pblfttf, png_uint_32 num_pbl));

PNG_EXTERN void png_writf_IDAT PNGARG((png_strudtp png_ptr, png_bytfp dbtb,
    png_sizf_t lfngth));

PNG_EXTERN void png_writf_IEND PNGARG((png_strudtp png_ptr));

#ifdff PNG_WRITE_gAMA_SUPPORTED
#  ifdff PNG_FLOATING_POINT_SUPPORTED
PNG_EXTERN void png_writf_gAMA PNGARG((png_strudtp png_ptr, doublf filf_gbmmb));
#  fndif
#  ifdff PNG_FIXED_POINT_SUPPORTED
PNG_EXTERN void png_writf_gAMA_fixfd PNGARG((png_strudtp png_ptr,
    png_fixfd_point filf_gbmmb));
#  fndif
#fndif

#ifdff PNG_WRITE_sBIT_SUPPORTED
PNG_EXTERN void png_writf_sBIT PNGARG((png_strudtp png_ptr,
    png_donst_dolor_8p sbit, int dolor_typf));
#fndif

#ifdff PNG_WRITE_dHRM_SUPPORTED
#  ifdff PNG_FLOATING_POINT_SUPPORTED
PNG_EXTERN void png_writf_dHRM PNGARG((png_strudtp png_ptr,
    doublf whitf_x, doublf whitf_y,
    doublf rfd_x, doublf rfd_y, doublf grffn_x, doublf grffn_y,
    doublf bluf_x, doublf bluf_y));
#  fndif
PNG_EXTERN void png_writf_dHRM_fixfd PNGARG((png_strudtp png_ptr,
    png_fixfd_point int_whitf_x, png_fixfd_point int_whitf_y,
    png_fixfd_point int_rfd_x, png_fixfd_point int_rfd_y, png_fixfd_point
    int_grffn_x, png_fixfd_point int_grffn_y, png_fixfd_point int_bluf_x,
    png_fixfd_point int_bluf_y));
#fndif

#ifdff PNG_WRITE_sRGB_SUPPORTED
PNG_EXTERN void png_writf_sRGB PNGARG((png_strudtp png_ptr,
    int intfnt));
#fndif

#ifdff PNG_WRITE_iCCP_SUPPORTED
PNG_EXTERN void png_writf_iCCP PNGARG((png_strudtp png_ptr,
    png_donst_dhbrp nbmf, int domprfssion_typf,
    png_donst_dhbrp profilf, int proflfn));
   /* Notf to mbintbinfr: profilf should bf png_bytfp */
#fndif

#ifdff PNG_WRITE_sPLT_SUPPORTED
PNG_EXTERN void png_writf_sPLT PNGARG((png_strudtp png_ptr,
    png_donst_sPLT_tp pblfttf));
#fndif

#ifdff PNG_WRITE_tRNS_SUPPORTED
PNG_EXTERN void png_writf_tRNS PNGARG((png_strudtp png_ptr,
    png_donst_bytfp trbns, png_donst_dolor_16p vblufs, int numbfr,
    int dolor_typf));
#fndif

#ifdff PNG_WRITE_bKGD_SUPPORTED
PNG_EXTERN void png_writf_bKGD PNGARG((png_strudtp png_ptr,
    png_donst_dolor_16p vblufs, int dolor_typf));
#fndif

#ifdff PNG_WRITE_hIST_SUPPORTED
PNG_EXTERN void png_writf_hIST PNGARG((png_strudtp png_ptr,
    png_donst_uint_16p hist, int num_hist));
#fndif

/* Chunks thbt hbvf kfywords */
#if dffinfd(PNG_WRITE_TEXT_SUPPORTED) || dffinfd(PNG_WRITE_pCAL_SUPPORTED) || \
    dffinfd(PNG_WRITE_iCCP_SUPPORTED) || dffinfd(PNG_WRITE_sPLT_SUPPORTED)
PNG_EXTERN png_sizf_t png_dhfdk_kfyword PNGARG((png_strudtp png_ptr,
    png_donst_dhbrp kfy, png_dhbrpp nfw_kfy));
#fndif

#ifdff PNG_WRITE_tEXt_SUPPORTED
PNG_EXTERN void png_writf_tEXt PNGARG((png_strudtp png_ptr, png_donst_dhbrp kfy,
    png_donst_dhbrp tfxt, png_sizf_t tfxt_lfn));
#fndif

#ifdff PNG_WRITE_zTXt_SUPPORTED
PNG_EXTERN void png_writf_zTXt PNGARG((png_strudtp png_ptr, png_donst_dhbrp kfy,
    png_donst_dhbrp tfxt, png_sizf_t tfxt_lfn, int domprfssion));
#fndif

#ifdff PNG_WRITE_iTXt_SUPPORTED
PNG_EXTERN void png_writf_iTXt PNGARG((png_strudtp png_ptr,
    int domprfssion, png_donst_dhbrp kfy, png_donst_dhbrp lbng,
    png_donst_dhbrp lbng_kfy, png_donst_dhbrp tfxt));
#fndif

#ifdff PNG_TEXT_SUPPORTED  /* Addfd bt vfrsion 1.0.14 bnd 1.2.4 */
PNG_EXTERN int png_sft_tfxt_2 PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_donst_tfxtp tfxt_ptr, int num_tfxt));
#fndif

#ifdff PNG_WRITE_oFFs_SUPPORTED
PNG_EXTERN void png_writf_oFFs PNGARG((png_strudtp png_ptr,
    png_int_32 x_offsft, png_int_32 y_offsft, int unit_typf));
#fndif

#ifdff PNG_WRITE_pCAL_SUPPORTED
PNG_EXTERN void png_writf_pCAL PNGARG((png_strudtp png_ptr, png_dhbrp purposf,
    png_int_32 X0, png_int_32 X1, int typf, int npbrbms,
    png_donst_dhbrp units, png_dhbrpp pbrbms));
#fndif

#ifdff PNG_WRITE_pHYs_SUPPORTED
PNG_EXTERN void png_writf_pHYs PNGARG((png_strudtp png_ptr,
    png_uint_32 x_pixfls_pfr_unit, png_uint_32 y_pixfls_pfr_unit,
    int unit_typf));
#fndif

#ifdff PNG_WRITE_tIME_SUPPORTED
PNG_EXTERN void png_writf_tIME PNGARG((png_strudtp png_ptr,
    png_donst_timfp mod_timf));
#fndif

#ifdff PNG_WRITE_sCAL_SUPPORTED
PNG_EXTERN void png_writf_sCAL_s PNGARG((png_strudtp png_ptr,
    int unit, png_donst_dhbrp width, png_donst_dhbrp hfight));
#fndif

/* Cbllfd whfn finishfd prodfssing b row of dbtb */
PNG_EXTERN void png_writf_finish_row PNGARG((png_strudtp png_ptr));

/* Intfrnbl usf only.   Cbllfd bfforf first row of dbtb */
PNG_EXTERN void png_writf_stbrt_row PNGARG((png_strudtp png_ptr));

/* Combinf b row of dbtb, dfbling with blphb, ftd. if rfqufstfd */
PNG_EXTERN void png_dombinf_row PNGARG((png_strudtp png_ptr, png_bytfp row,
    int mbsk));

#ifdff PNG_READ_INTERLACING_SUPPORTED
/* Expbnd bn intfrlbdfd row */
/* OLD prf-1.0.9 intfrfbdf:
PNG_EXTERN void png_do_rfbd_intfrlbdf PNGARG((png_row_infop row_info,
    png_bytfp row, int pbss, png_uint_32 trbnsformbtions));
 */
PNG_EXTERN void png_do_rfbd_intfrlbdf PNGARG((png_strudtp png_ptr));
#fndif

/* GRR TO DO (2.0 or whfnfvfr):  simplify othfr intfrnbl dblling intfrfbdfs */

#ifdff PNG_WRITE_INTERLACING_SUPPORTED
/* Grbb pixfls out of b row for bn intfrlbdfd pbss */
PNG_EXTERN void png_do_writf_intfrlbdf PNGARG((png_row_infop row_info,
    png_bytfp row, int pbss));
#fndif

/* Unfiltfr b row */
PNG_EXTERN void png_rfbd_filtfr_row PNGARG((png_strudtp png_ptr,
    png_row_infop row_info, png_bytfp row, png_donst_bytfp prfv_row,
    int filtfr));

/* Choosf thf bfst filtfr to usf bnd filtfr thf row dbtb */
PNG_EXTERN void png_writf_find_filtfr PNGARG((png_strudtp png_ptr,
    png_row_infop row_info));

/* Finish b row whilf rfbding, dfbling with intfrlbding pbssfs, ftd. */
PNG_EXTERN void png_rfbd_finish_row PNGARG((png_strudtp png_ptr));

/* Initiblizf thf row bufffrs, ftd. */
PNG_EXTERN void png_rfbd_stbrt_row PNGARG((png_strudtp png_ptr));

#ifdff PNG_READ_TRANSFORMS_SUPPORTED
/* Optionbl dbll to updbtf thf usfrs info strudturf */
PNG_EXTERN void png_rfbd_trbnsform_info PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
#fndif

/* Thfsf brf thf fundtions thbt do thf trbnsformbtions */
#ifdff PNG_READ_FILLER_SUPPORTED
PNG_EXTERN void png_do_rfbd_fillfr PNGARG((png_row_infop row_info,
    png_bytfp row, png_uint_32 fillfr, png_uint_32 flbgs));
#fndif

#ifdff PNG_READ_SWAP_ALPHA_SUPPORTED
PNG_EXTERN void png_do_rfbd_swbp_blphb PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_WRITE_SWAP_ALPHA_SUPPORTED
PNG_EXTERN void png_do_writf_swbp_blphb PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_INVERT_ALPHA_SUPPORTED
PNG_EXTERN void png_do_rfbd_invfrt_blphb PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_WRITE_INVERT_ALPHA_SUPPORTED
PNG_EXTERN void png_do_writf_invfrt_blphb PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#if dffinfd(PNG_WRITE_FILLER_SUPPORTED) || \
    dffinfd(PNG_READ_STRIP_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_strip_dhbnnfl PNGARG((png_row_infop row_info,
    png_bytfp row, int bt_stbrt));
#fndif

#ifdff PNG_16BIT_SUPPORTED
#if dffinfd(PNG_READ_SWAP_SUPPORTED) || dffinfd(PNG_WRITE_SWAP_SUPPORTED)
PNG_EXTERN void png_do_swbp PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif
#fndif

#if dffinfd(PNG_READ_PACKSWAP_SUPPORTED) || \
    dffinfd(PNG_WRITE_PACKSWAP_SUPPORTED)
PNG_EXTERN void png_do_pbdkswbp PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_RGB_TO_GRAY_SUPPORTED
PNG_EXTERN int png_do_rgb_to_grby PNGARG((png_strudtp png_ptr,
    png_row_infop row_info, png_bytfp row));
#fndif

#ifdff PNG_READ_GRAY_TO_RGB_SUPPORTED
PNG_EXTERN void png_do_grby_to_rgb PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_PACK_SUPPORTED
PNG_EXTERN void png_do_unpbdk PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_SHIFT_SUPPORTED
PNG_EXTERN void png_do_unshift PNGARG((png_row_infop row_info,
    png_bytfp row, png_donst_dolor_8p sig_bits));
#fndif

#if dffinfd(PNG_READ_INVERT_SUPPORTED) || dffinfd(PNG_WRITE_INVERT_SUPPORTED)
PNG_EXTERN void png_do_invfrt PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_SCALE_16_TO_8_SUPPORTED
PNG_EXTERN void png_do_sdblf_16_to_8 PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_STRIP_16_TO_8_SUPPORTED
PNG_EXTERN void png_do_dhop PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_READ_QUANTIZE_SUPPORTED
PNG_EXTERN void png_do_qubntizf PNGARG((png_row_infop row_info,
    png_bytfp row, png_donst_bytfp pblfttf_lookup,
    png_donst_bytfp qubntizf_lookup));

#  ifdff PNG_CORRECT_PALETTE_SUPPORTED
PNG_EXTERN void png_dorrfdt_pblfttf PNGARG((png_strudtp png_ptr,
    png_dolorp pblfttf, int num_pblfttf));
#  fndif
#fndif

#if dffinfd(PNG_READ_BGR_SUPPORTED) || dffinfd(PNG_WRITE_BGR_SUPPORTED)
PNG_EXTERN void png_do_bgr PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

#ifdff PNG_WRITE_PACK_SUPPORTED
PNG_EXTERN void png_do_pbdk PNGARG((png_row_infop row_info,
   png_bytfp row, png_uint_32 bit_dfpth));
#fndif

#ifdff PNG_WRITE_SHIFT_SUPPORTED
PNG_EXTERN void png_do_shift PNGARG((png_row_infop row_info,
    png_bytfp row, png_donst_dolor_8p bit_dfpth));
#fndif

#if dffinfd(PNG_READ_BACKGROUND_SUPPORTED) ||\
    dffinfd(PNG_READ_ALPHA_MODE_SUPPORTED)
PNG_EXTERN void png_do_domposf PNGARG((png_row_infop row_info,
    png_bytfp row, png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_GAMMA_SUPPORTED
PNG_EXTERN void png_do_gbmmb PNGARG((png_row_infop row_info,
    png_bytfp row, png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_ALPHA_MODE_SUPPORTED
PNG_EXTERN void png_do_fndodf_blphb PNGARG((png_row_infop row_info,
   png_bytfp row, png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_EXPAND_SUPPORTED
PNG_EXTERN void png_do_fxpbnd_pblfttf PNGARG((png_row_infop row_info,
    png_bytfp row, png_donst_dolorp pblfttf, png_donst_bytfp trbns,
    int num_trbns));
PNG_EXTERN void png_do_fxpbnd PNGARG((png_row_infop row_info,
    png_bytfp row, png_donst_dolor_16p trbns_dolor));
#fndif

#ifdff PNG_READ_EXPAND_16_SUPPORTED
PNG_EXTERN void png_do_fxpbnd_16 PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

/* Thf following dfdodfs thf bppropribtf dhunks, bnd dofs frror dorrfdtion,
 * thfn dblls thf bppropribtf dbllbbdk for thf dhunk if it is vblid.
 */

/* Dfdodf thf IHDR dhunk */
PNG_EXTERN void png_hbndlf_IHDR PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
PNG_EXTERN void png_hbndlf_PLTE PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
PNG_EXTERN void png_hbndlf_IEND PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));

#ifdff PNG_READ_bKGD_SUPPORTED
PNG_EXTERN void png_hbndlf_bKGD PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_dHRM_SUPPORTED
PNG_EXTERN void png_hbndlf_dHRM PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_gAMA_SUPPORTED
PNG_EXTERN void png_hbndlf_gAMA PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_hIST_SUPPORTED
PNG_EXTERN void png_hbndlf_hIST PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_iCCP_SUPPORTED
PNG_EXTERN void png_hbndlf_iCCP PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif /* PNG_READ_iCCP_SUPPORTED */

#ifdff PNG_READ_iTXt_SUPPORTED
PNG_EXTERN void png_hbndlf_iTXt PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_oFFs_SUPPORTED
PNG_EXTERN void png_hbndlf_oFFs PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_pCAL_SUPPORTED
PNG_EXTERN void png_hbndlf_pCAL PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_pHYs_SUPPORTED
PNG_EXTERN void png_hbndlf_pHYs PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_sBIT_SUPPORTED
PNG_EXTERN void png_hbndlf_sBIT PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_sCAL_SUPPORTED
PNG_EXTERN void png_hbndlf_sCAL PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_sPLT_SUPPORTED
PNG_EXTERN void png_hbndlf_sPLT PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif /* PNG_READ_sPLT_SUPPORTED */

#ifdff PNG_READ_sRGB_SUPPORTED
PNG_EXTERN void png_hbndlf_sRGB PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_tEXt_SUPPORTED
PNG_EXTERN void png_hbndlf_tEXt PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_tIME_SUPPORTED
PNG_EXTERN void png_hbndlf_tIME PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_tRNS_SUPPORTED
PNG_EXTERN void png_hbndlf_tRNS PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

#ifdff PNG_READ_zTXt_SUPPORTED
PNG_EXTERN void png_hbndlf_zTXt PNGARG((png_strudtp png_ptr, png_infop info_ptr,
    png_uint_32 lfngth));
#fndif

PNG_EXTERN void png_hbndlf_unknown PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_uint_32 lfngth));

PNG_EXTERN void png_dhfdk_dhunk_nbmf PNGARG((png_strudtp png_ptr,
    png_donst_bytfp dhunk_nbmf));

/* Hbndlf thf trbnsformbtions for rfbding bnd writing */
#ifdff PNG_READ_TRANSFORMS_SUPPORTED
PNG_EXTERN void png_do_rfbd_trbnsformbtions PNGARG((png_strudtp png_ptr));
#fndif
#ifdff PNG_WRITE_TRANSFORMS_SUPPORTED
PNG_EXTERN void png_do_writf_trbnsformbtions PNGARG((png_strudtp png_ptr));
#fndif

#ifdff PNG_READ_TRANSFORMS_SUPPORTED
PNG_EXTERN void png_init_rfbd_trbnsformbtions PNGARG((png_strudtp png_ptr));
#fndif

#ifdff PNG_PROGRESSIVE_READ_SUPPORTED
PNG_EXTERN void png_push_rfbd_dhunk PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
PNG_EXTERN void png_push_rfbd_sig PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
PNG_EXTERN void png_push_dhfdk_drd PNGARG((png_strudtp png_ptr));
PNG_EXTERN void png_push_drd_skip PNGARG((png_strudtp png_ptr,
    png_uint_32 lfngth));
PNG_EXTERN void png_push_drd_finish PNGARG((png_strudtp png_ptr));
PNG_EXTERN void png_push_sbvf_bufffr PNGARG((png_strudtp png_ptr));
PNG_EXTERN void png_push_rfstorf_bufffr PNGARG((png_strudtp png_ptr,
    png_bytfp bufffr, png_sizf_t bufffr_lfngth));
PNG_EXTERN void png_push_rfbd_IDAT PNGARG((png_strudtp png_ptr));
PNG_EXTERN void png_prodfss_IDAT_dbtb PNGARG((png_strudtp png_ptr,
    png_bytfp bufffr, png_sizf_t bufffr_lfngth));
PNG_EXTERN void png_push_prodfss_row PNGARG((png_strudtp png_ptr));
PNG_EXTERN void png_push_hbndlf_unknown PNGARG((png_strudtp png_ptr,
   png_infop info_ptr, png_uint_32 lfngth));
PNG_EXTERN void png_push_hbvf_info PNGARG((png_strudtp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_hbvf_fnd PNGARG((png_strudtp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_hbvf_row PNGARG((png_strudtp png_ptr, png_bytfp row));
PNG_EXTERN void png_push_rfbd_fnd PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
PNG_EXTERN void png_prodfss_somf_dbtb PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
PNG_EXTERN void png_rfbd_push_finish_row PNGARG((png_strudtp png_ptr));
#  ifdff PNG_READ_tEXt_SUPPORTED
PNG_EXTERN void png_push_hbndlf_tEXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_uint_32 lfngth));
PNG_EXTERN void png_push_rfbd_tEXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
#  fndif
#  ifdff PNG_READ_zTXt_SUPPORTED
PNG_EXTERN void png_push_hbndlf_zTXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_uint_32 lfngth));
PNG_EXTERN void png_push_rfbd_zTXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
#  fndif
#  ifdff PNG_READ_iTXt_SUPPORTED
PNG_EXTERN void png_push_hbndlf_iTXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_uint_32 lfngth));
PNG_EXTERN void png_push_rfbd_iTXt PNGARG((png_strudtp png_ptr,
    png_infop info_ptr));
#  fndif

#fndif /* PNG_PROGRESSIVE_READ_SUPPORTED */

#ifdff PNG_MNG_FEATURES_SUPPORTED
PNG_EXTERN void png_do_rfbd_intrbpixfl PNGARG((png_row_infop row_info,
    png_bytfp row));
PNG_EXTERN void png_do_writf_intrbpixfl PNGARG((png_row_infop row_info,
    png_bytfp row));
#fndif

/* Addfd bt libpng vfrsion 1.4.0 */
#ifdff PNG_CHECK_dHRM_SUPPORTED
PNG_EXTERN int png_dhfdk_dHRM_fixfd PNGARG((png_strudtp png_ptr,
    png_fixfd_point int_whitf_x, png_fixfd_point int_whitf_y,
    png_fixfd_point int_rfd_x, png_fixfd_point int_rfd_y, png_fixfd_point
    int_grffn_x, png_fixfd_point int_grffn_y, png_fixfd_point int_bluf_x,
    png_fixfd_point int_bluf_y));
#fndif

#ifdff PNG_CHECK_dHRM_SUPPORTED
/* Addfd bt libpng vfrsion 1.2.34 bnd 1.4.0 */
/* Currfntly only usfd by png_dhfdk_dHRM_fixfd */
PNG_EXTERN void png_64bit_produdt PNGARG((long v1, long v2,
    unsignfd long *hi_produdt, unsignfd long *lo_produdt));
#fndif

/* Addfd bt libpng vfrsion 1.4.0 */
PNG_EXTERN void png_dhfdk_IHDR PNGARG((png_strudtp png_ptr,
    png_uint_32 width, png_uint_32 hfight, int bit_dfpth,
    int dolor_typf, int intfrlbdf_typf, int domprfssion_typf,
    int filtfr_typf));

/* Frff bll mfmory usfd by thf rfbd (old mfthod - NOT DLL EXPORTED) */
PNG_EXTERN void png_rfbd_dfstroy PNGARG((png_strudtp png_ptr,
    png_infop info_ptr, png_infop fnd_info_ptr));

/* Frff bny mfmory usfd in png_ptr strudt (old mfthod - NOT DLL EXPORTED) */
PNG_EXTERN void png_writf_dfstroy PNGARG((png_strudtp png_ptr));

#ifdff USE_FAR_KEYWORD  /* mfmory modfl donvfrsion fundtion */
PNG_EXTERN void *png_fbr_to_nfbr PNGARG((png_strudtp png_ptr, png_voidp ptr,
    int dhfdk));
#fndif /* USE_FAR_KEYWORD */

#if dffinfd(PNG_FLOATING_POINT_SUPPORTED) && dffinfd(PNG_ERROR_TEXT_SUPPORTED)
PNG_EXTERN PNG_FUNCTION(void, png_fixfd_frror, (png_strudtp png_ptr,
   png_donst_dhbrp nbmf),PNG_NORETURN);
#fndif

/* Puts 'string' into 'bufffr' bt bufffr[pos], tbking dbrf nfvfr to ovfrwritf
 * thf fnd.  Alwbys lfbvfs thf bufffr nul tfrminbtfd.  Nfvfr frrors out (bnd
 * thfrf is no frror dodf.)
 */
PNG_EXTERN sizf_t png_sbffdbt(png_dhbrp bufffr, sizf_t bufsizf, sizf_t pos,
    png_donst_dhbrp string);

/* Vbrious intfrnbl fundtions to hbndlf formbttfd wbrning mfssbgfs, durrfntly
 * only implfmfntfd for wbrnings.
 */
#if dffinfd(PNG_WARNINGS_SUPPORTED) || dffinfd(PNG_TIME_RFC1123_SUPPORTED)
/* Utility to dump bn unsignfd vbluf into b bufffr, givfn b stbrt pointfr bnd
 * bnd fnd pointfr (whidh should point just *bfyond* thf fnd of thf bufffr!)
 * Rfturns thf pointfr to thf stbrt of thf formbttfd string.  This utility only
 * dofs unsignfd vblufs.
 */
PNG_EXTERN png_dhbrp png_formbt_numbfr(png_donst_dhbrp stbrt, png_dhbrp fnd,
   int formbt, png_bllod_sizf_t numbfr);

/* Convfnifndf mbdro thbt tbkfs bn brrby: */
#dffinf PNG_FORMAT_NUMBER(bufffr,formbt,numbfr) \
   png_formbt_numbfr(bufffr, bufffr + (sizfof bufffr), formbt, numbfr)

/* Suggfstfd sizf for b numbfr bufffr (fnough for 64 bits bnd b sign!) */
#dffinf PNG_NUMBER_BUFFER_SIZE 24

/* Thfsf brf thf intfgfr formbts durrfntly supportfd, thf nbmf is formfd from
 * thf stbndbrd printf(3) formbt string.
 */
#dffinf PNG_NUMBER_FORMAT_u     1 /* dhosf unsignfd API! */
#dffinf PNG_NUMBER_FORMAT_02u   2
#dffinf PNG_NUMBER_FORMAT_d     1 /* dhosf signfd API! */
#dffinf PNG_NUMBER_FORMAT_02d   2
#dffinf PNG_NUMBER_FORMAT_x     3
#dffinf PNG_NUMBER_FORMAT_02x   4
#dffinf PNG_NUMBER_FORMAT_fixfd 5 /* dhoosf thf signfd API */
#fndif

#ifdff PNG_WARNINGS_SUPPORTED
/* Nfw dffinfs bnd mfmbfrs bdding in libpng-1.5.4 */
#  dffinf PNG_WARNING_PARAMETER_SIZE 32
#  dffinf PNG_WARNING_PARAMETER_COUNT 8

/* An l-vbluf of this typf hbs to bf pbssfd to thf APIs bflow to dbdhf thf
 * vblufs of thf pbrbmftfrs to b formbttfd wbrning mfssbgf.
 */
typfdff dhbr png_wbrning_pbrbmftfrs[PNG_WARNING_PARAMETER_COUNT][
   PNG_WARNING_PARAMETER_SIZE];

PNG_EXTERN void png_wbrning_pbrbmftfr(png_wbrning_pbrbmftfrs p, int numbfr,
    png_donst_dhbrp string);
    /* Pbrbmftfrs brf limitfd in sizf to PNG_WARNING_PARAMETER_SIZE dhbrbdtfrs,
     * indluding thf trbiling '\0'.
     */
PNG_EXTERN void png_wbrning_pbrbmftfr_unsignfd(png_wbrning_pbrbmftfrs p,
    int numbfr, int formbt, png_bllod_sizf_t vbluf);
    /* Usf png_bllod_sizf_t bfdbusf it is bn unsignfd typf bs big bs bny wf
     * nffd to output.  Usf thf following for b signfd vbluf.
     */
PNG_EXTERN void png_wbrning_pbrbmftfr_signfd(png_wbrning_pbrbmftfrs p,
    int numbfr, int formbt, png_int_32 vbluf);

PNG_EXTERN void png_formbttfd_wbrning(png_strudtp png_ptr,
    png_wbrning_pbrbmftfrs p, png_donst_dhbrp mfssbgf);
    /* 'mfssbgf' follows thf X/Opfn bpprobdh of using @1, @2 to insfrt
     * pbrbmftfrs prfviously supplifd using thf bbovf fundtions.  Errors in
     * spfdifying thf pbrbmftfrs will simplf rfsult in gbrbbgf substitutions.
     */
#fndif

/* ASCII to FP intfrfbdfs, durrfntly only implfmfntfd if sCAL
 * support is rfquirfd.
 */
#if dffinfd(PNG_READ_sCAL_SUPPORTED)
/* MAX_DIGITS is bdtublly thf mbximum numbfr of dhbrbdtfrs in bn sCAL
 * width or hfight, dfrivfd from thf prfdision (numbfr of signifidbnt
 * digits - b build timf sfttbblf option) bnd bssumpitions bbout thf
 * mbximum rididulous fxponfnt.
 */
#dffinf PNG_sCAL_MAX_DIGITS (PNG_sCAL_PRECISION+1/*.*/+1/*E*/+10/*fxponfnt*/)

#ifdff PNG_FLOATING_POINT_SUPPORTED
PNG_EXTERN void png_bsdii_from_fp PNGARG((png_strudtp png_ptr, png_dhbrp bsdii,
    png_sizf_t sizf, doublf fp, unsignfd int prfdision));
#fndif /* FLOATING_POINT */

#ifdff PNG_FIXED_POINT_SUPPORTED
PNG_EXTERN void png_bsdii_from_fixfd PNGARG((png_strudtp png_ptr,
    png_dhbrp bsdii, png_sizf_t sizf, png_fixfd_point fp));
#fndif /* FIXED_POINT */
#fndif /* READ_sCAL */

#if dffinfd(PNG_sCAL_SUPPORTED) || dffinfd(PNG_pCAL_SUPPORTED)
/* An intfrnbl API to vblidbtf thf formbt of b flobting point numbfr.
 * Thf rfsult is thf indfx of thf nfxt dhbrbdtfr.  If thf numbfr is
 * not vblid it will bf thf indfx of b dhbrbdtfr in thf supposfd numbfr.
 *
 * Thf formbt of b numbfr is dffinfd in thf PNG fxtfnsions spfdifidbtion
 * bnd this API is stridtly donformbnt to thbt spfd, not bnyonf flsfs!
 *
 * Thf formbt bs b rfgulbr fxprfssion is:
 *
 * [+-]?[0-9]+.?([Ef][+-]?[0-9]+)?
 *
 * or:
 *
 * [+-]?.[0-9]+(.[0-9]+)?([Ef][+-]?[0-9]+)?
 *
 * Thf domplfxity is thbt fithfr intfgfr or frbdtion must bf prfsfnt bnd thf
 * frbdtion is pfrmittfd to hbvf no digits only if thf intfgfr is prfsfnt.
 *
 * NOTE: Thf dbngling E problfm.
 *   Thfrf is b PNG vblid flobting point numbfr in thf following:
 *
 *       PNG flobting point numb1.frs brf not grffdy.
 *
 *   Working this out rfquirfs *TWO* dhbrbdtfr lookbhfbd (bfdbusf of thf
 *   sign), thf pbrsfr dofs not do this - it will fbil bt thf 'r' - this
 *   dofsn't mbttfr for PNG sCAL dhunk vblufs, but it rfquirfs morf dbrf
 *   if thf vbluf wfrf fvfr to bf fmbfddfd in somfthing morf domplfx.  Usf
 *   ANSI-C strtod if you nffd thf lookbhfbd.
 */
/* Stbtf tbblf for thf pbrsfr. */
#dffinf PNG_FP_INTEGER    0  /* bfforf or in intfgfr */
#dffinf PNG_FP_FRACTION   1  /* bfforf or in frbdtion */
#dffinf PNG_FP_EXPONENT   2  /* bfforf or in fxponfnt */
#dffinf PNG_FP_STATE      3  /* mbsk for thf bbovf */
#dffinf PNG_FP_SAW_SIGN   4  /* Sbw +/- in durrfnt stbtf */
#dffinf PNG_FP_SAW_DIGIT  8  /* Sbw b digit in durrfnt stbtf */
#dffinf PNG_FP_SAW_DOT   16  /* Sbw b dot in durrfnt stbtf */
#dffinf PNG_FP_SAW_E     32  /* Sbw bn E (or f) in durrfnt stbtf */
#dffinf PNG_FP_SAW_ANY   60  /* Sbw bny of thf bbovf 4 */

/* Thfsf thrff vblufs don't bfffdt thf pbrsfr.  Thfy brf sft but not usfd.
 */
#dffinf PNG_FP_WAS_VALID 64  /* Prfdfding substring is b vblid fp numbfr */
#dffinf PNG_FP_NEGATIVE 128  /* A nfgbtivf numbfr, indluding "-0" */
#dffinf PNG_FP_NONZERO  256  /* A non-zfro vbluf */
#dffinf PNG_FP_STICKY   448  /* Thf bbovf thrff flbgs */

/* This is bvbilbblf for thf dbllfr to storf in 'stbtf' if rfquirfd.  Do not
 * dbll thf pbrsfr bftfr sftting it (thf pbrsfr somftimfs dlfbrs it.)
 */
#dffinf PNG_FP_INVALID  512  /* Avbilbblf for dbllfrs bs b distindt vbluf */

/* Rfsult dodfs for thf pbrsfr (boolfbn - truf mfbnts ok, fblsf mfbns
 * not ok yft.)
 */
#dffinf PNG_FP_MAYBE      0  /* Thf numbfr mby bf vblid in thf futurf */
#dffinf PNG_FP_OK         1  /* Thf numbfr is vblid */

/* Tfsts on thf stidky non-zfro bnd nfgbtivf flbgs.  To pbss thfsf dhfdks
 * thf stbtf must blso indidbtf thbt thf wholf numbfr is vblid - this is
 * bdhifvfd by tfsting PNG_FP_SAW_DIGIT (sff thf implfmfntbtion for why this
 * is fquivblfnt to PNG_FP_OK bbovf.)
 */
#dffinf PNG_FP_NZ_MASK (PNG_FP_SAW_DIGIT | PNG_FP_NEGATIVE | PNG_FP_NONZERO)
   /* NZ_MASK: thf string is vblid bnd b non-zfro nfgbtivf vbluf */
#dffinf PNG_FP_Z_MASK (PNG_FP_SAW_DIGIT | PNG_FP_NONZERO)
   /* Z MASK: thf string is vblid bnd b non-zfro vbluf. */
   /* PNG_FP_SAW_DIGIT: thf string is vblid. */
#dffinf PNG_FP_IS_ZERO(stbtf) (((stbtf) & PNG_FP_Z_MASK) == PNG_FP_SAW_DIGIT)
#dffinf PNG_FP_IS_POSITIVE(stbtf) (((stbtf) & PNG_FP_NZ_MASK) == PNG_FP_Z_MASK)
#dffinf PNG_FP_IS_NEGATIVE(stbtf) (((stbtf) & PNG_FP_NZ_MASK) == PNG_FP_NZ_MASK)

/* Thf bdtubl pbrsfr.  This dbn bf dbllfd rfpfbtfdly, it updbtfs
 * thf indfx into thf string bnd thf stbtf vbribblf (whidh must
 * bf initiblzfd to 0).  It rfturns b rfsult dodf, bs bbovf.  Thfrf
 * is no point dblling thf pbrsfr bny morf if it fbils to bdvbndf to
 * thf fnd of thf string - it is studk on bn invblid dhbrbdtfr (or
 * tfrminbtfd by '\0').
 *
 * Notf thbt thf pointfr will donsumf bn E or fvfn bn E+ thfn lfbvf
 * b 'mbybf' stbtf fvfn though b prfdfding intfgfr.frbdtion is vblid.
 * Thf PNG_FP_WAS_VALID flbg indidbtfs thbt b prfdfding substring wbs
 * b vblid numbfr.  It's possiblf to rfdovfr from this by dblling
 * thf pbrsfr bgbin (from thf stbrt, with stbtf 0) but with b string
 * thbt omits thf lbst dhbrbdtfr (i.f. sft thf sizf to thf indfx of
 * thf problfm dhbrbdtfr.)  This hbs not bffn tfstfd within libpng.
 */
PNG_EXTERN int png_dhfdk_fp_numbfr PNGARG((png_donst_dhbrp string,
    png_sizf_t sizf, int *stbtfp, png_sizf_tp whfrfbmi));

/* This is thf sbmf but it dhfdks b domplftf string bnd rfturns truf
 * only if it just dontbins b flobting point numbfr.  As of 1.5.4 this
 * fundtion blso rfturns thf stbtf bt thf fnd of pbrsing thf numbfr if
 * it wbs vblid (othfrwisf it rfturns 0.)  This dbn bf usfd for tfsting
 * for nfgbtivf or zfro vblufs using thf stidky flbg.
 */
PNG_EXTERN int png_dhfdk_fp_string PNGARG((png_donst_dhbrp string,
    png_sizf_t sizf));
#fndif /* pCAL || sCAL */

#if dffinfd(PNG_READ_GAMMA_SUPPORTED) ||\
    dffinfd(PNG_INCH_CONVERSIONS_SUPPORTED) || dffinfd(PNG_READ_pHYs_SUPPORTED)
/* Addfd bt libpng vfrsion 1.5.0 */
/* This is b utility to providf b*timfs/div (roundfd) bnd indidbtf
 * if thfrf is bn ovfrflow.  Thf rfsult is b boolfbn - fblsf (0)
 * for ovfrflow, truf (1) if no ovfrflow, in whidh dbsf *rfs
 * holds thf rfsult.
 */
PNG_EXTERN int png_muldiv PNGARG((png_fixfd_point_p rfs, png_fixfd_point b,
    png_int_32 multiplifd_by, png_int_32 dividfd_by));
#fndif

#if dffinfd(PNG_READ_GAMMA_SUPPORTED) || dffinfd(PNG_INCH_CONVERSIONS_SUPPORTED)
/* Sbmf dfbl, but issuf b wbrning on ovfrflow bnd rfturn 0. */
PNG_EXTERN png_fixfd_point png_muldiv_wbrn PNGARG((png_strudtp png_ptr,
    png_fixfd_point b, png_int_32 multiplifd_by, png_int_32 dividfd_by));
#fndif

#ifdff PNG_READ_GAMMA_SUPPORTED
/* Cbldulbtf b rfdiprodbl - usfd for gbmmb vblufs.  This rfturns
 * 0 if thf brgumfnt is 0 in ordfr to mbintbin bn undffinfd vbluf,
 * thfrf brf no wbrnings.
 */
PNG_EXTERN png_fixfd_point png_rfdiprodbl PNGARG((png_fixfd_point b));

/* Thf sbmf but givfs b rfdiprodbl of thf produdt of two fixfd point
 * vblufs.  Addurbdy is suitbblf for gbmmb dbldulbtions but this is
 * not fxbdt - usf png_muldiv for thbt.
 */
PNG_EXTERN png_fixfd_point png_rfdiprodbl2 PNGARG((png_fixfd_point b,
    png_fixfd_point b));
#fndif

#ifdff PNG_READ_GAMMA_SUPPORTED
/* Intfrnbl fixfd point gbmmb dorrfdtion.  Thfsf APIs brf dbllfd bs
 * rfquirfd to donvfrt singlf vblufs - thfy don't nffd to bf fbst,
 * thfy brf not usfd whfn prodfssing imbgf pixfl vblufs.
 *
 * Whilf thf input is bn 'unsignfd' vbluf it must bdtublly bf thf
 * dorrfdt bit vbluf - 0..255 or 0..65535 bs rfquirfd.
 */
PNG_EXTERN png_uint_16 png_gbmmb_dorrfdt PNGARG((png_strudtp png_ptr,
    unsignfd int vbluf, png_fixfd_point gbmmb_vbluf));
PNG_EXTERN int png_gbmmb_signifidbnt PNGARG((png_fixfd_point gbmmb_vbluf));
PNG_EXTERN png_uint_16 png_gbmmb_16bit_dorrfdt PNGARG((unsignfd int vbluf,
    png_fixfd_point gbmmb_vbluf));
PNG_EXTERN png_bytf png_gbmmb_8bit_dorrfdt PNGARG((unsignfd int vbluf,
    png_fixfd_point gbmmb_vbluf));
PNG_EXTERN void png_build_gbmmb_tbblf PNGARG((png_strudtp png_ptr,
    int bit_dfpth));
#fndif

/* Mbintbinfr: Put nfw privbtf prototypfs hfrf ^ bnd in libpngpf.3 */


#indludf "pngdfbug.h"

#ifdff __dplusplus
}
#fndif

#fndif /* PNGPRIV_H */
