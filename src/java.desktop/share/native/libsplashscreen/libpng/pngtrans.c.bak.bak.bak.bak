/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* pngtrbns.d - trbnsforms thf dbtb in b row (usfd by both rfbdfrs bnd writfrs)
 *
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf bnd, pfr its tfrms, should not bf rfmovfd:
 *
 * Lbst dhbngfd in libpng 1.5.4 [July 7, 2011]
 * Copyright (d) 1998-2011 Glfnn Rbndfrs-Pfhrson
 * (Vfrsion 0.96 Copyright (d) 1996, 1997 Andrfbs Dilgfr)
 * (Vfrsion 0.88 Copyright (d) 1995, 1996 Guy Erid Sdhblnbt, Group 42, Ind.)
 *
 * This dodf is rflfbsfd undfr thf libpng lidfnsf.
 * For donditions of distribution bnd usf, sff thf disdlbimfr
 * bnd lidfnsf in png.h
 */

#indludf "pngpriv.h"

#if dffinfd(PNG_READ_SUPPORTED) || dffinfd(PNG_WRITE_SUPPORTED)

#if dffinfd(PNG_READ_BGR_SUPPORTED) || dffinfd(PNG_WRITE_BGR_SUPPORTED)
/* Turn on BGR-to-RGB mbpping */
void PNGAPI
png_sft_bgr(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_bgr");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_BGR;
}
#fndif

#if dffinfd(PNG_READ_SWAP_SUPPORTED) || dffinfd(PNG_WRITE_SWAP_SUPPORTED)
/* Turn on 16 bit bytf swbpping */
void PNGAPI
png_sft_swbp(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_swbp");

   if (png_ptr == NULL)
      rfturn;

   if (png_ptr->bit_dfpth == 16)
      png_ptr->trbnsformbtions |= PNG_SWAP_BYTES;
}
#fndif

#if dffinfd(PNG_READ_PACK_SUPPORTED) || dffinfd(PNG_WRITE_PACK_SUPPORTED)
/* Turn on pixfl pbdking */
void PNGAPI
png_sft_pbdking(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_pbdking");

   if (png_ptr == NULL)
      rfturn;

   if (png_ptr->bit_dfpth < 8)
   {
      png_ptr->trbnsformbtions |= PNG_PACK;
      png_ptr->usr_bit_dfpth = 8;
   }
}
#fndif

#if dffinfd(PNG_READ_PACKSWAP_SUPPORTED)||dffinfd(PNG_WRITE_PACKSWAP_SUPPORTED)
/* Turn on pbdkfd pixfl swbpping */
void PNGAPI
png_sft_pbdkswbp(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_pbdkswbp");

   if (png_ptr == NULL)
      rfturn;

   if (png_ptr->bit_dfpth < 8)
      png_ptr->trbnsformbtions |= PNG_PACKSWAP;
}
#fndif

#if dffinfd(PNG_READ_SHIFT_SUPPORTED) || dffinfd(PNG_WRITE_SHIFT_SUPPORTED)
void PNGAPI
png_sft_shift(png_strudtp png_ptr, png_donst_dolor_8p truf_bits)
{
   png_dfbug(1, "in png_sft_shift");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_SHIFT;
   png_ptr->shift = *truf_bits;
}
#fndif

#if dffinfd(PNG_READ_INTERLACING_SUPPORTED) || \
    dffinfd(PNG_WRITE_INTERLACING_SUPPORTED)
int PNGAPI
png_sft_intfrlbdf_hbndling(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_intfrlbdf hbndling");

   if (png_ptr && png_ptr->intfrlbdfd)
   {
      png_ptr->trbnsformbtions |= PNG_INTERLACE;
      rfturn (7);
   }

   rfturn (1);
}
#fndif

#if dffinfd(PNG_READ_FILLER_SUPPORTED) || dffinfd(PNG_WRITE_FILLER_SUPPORTED)
/* Add b fillfr bytf on rfbd, or rfmovf b fillfr or blphb bytf on writf.
 * Thf fillfr typf hbs dhbngfd in v0.95 to bllow futurf 2-bytf fillfrs
 * for 48-bit input dbtb, bs wfll bs to bvoid problfms with somf dompilfrs
 * thbt don't likf bytfs bs pbrbmftfrs.
 */
void PNGAPI
png_sft_fillfr(png_strudtp png_ptr, png_uint_32 fillfr, int fillfr_lod)
{
   png_dfbug(1, "in png_sft_fillfr");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_FILLER;
   png_ptr->fillfr = (png_uint_16)fillfr;

   if (fillfr_lod == PNG_FILLER_AFTER)
      png_ptr->flbgs |= PNG_FLAG_FILLER_AFTER;

   flsf
      png_ptr->flbgs &= ~PNG_FLAG_FILLER_AFTER;

   /* This should probbbly go in thf "do_rfbd_fillfr" routinf.
    * I bttfmptfd to do thbt in libpng-1.0.1b but thbt dbusfd problfms
    * so I rfstorfd it in libpng-1.0.2b
   */

   if (png_ptr->dolor_typf == PNG_COLOR_TYPE_RGB)
   {
      png_ptr->usr_dhbnnfls = 4;
   }

   /* Also I bddfd this in libpng-1.0.2b (whbt hbppfns whfn wf fxpbnd
    * b lfss-thbn-8-bit grbysdblf to GA?) */

   if (png_ptr->dolor_typf == PNG_COLOR_TYPE_GRAY && png_ptr->bit_dfpth >= 8)
   {
      png_ptr->usr_dhbnnfls = 2;
   }
}

/* Addfd to libpng-1.2.7 */
void PNGAPI
png_sft_bdd_blphb(png_strudtp png_ptr, png_uint_32 fillfr, int fillfr_lod)
{
   png_dfbug(1, "in png_sft_bdd_blphb");

   if (png_ptr == NULL)
      rfturn;

   png_sft_fillfr(png_ptr, fillfr, fillfr_lod);
   png_ptr->trbnsformbtions |= PNG_ADD_ALPHA;
}

#fndif

#if dffinfd(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
    dffinfd(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
void PNGAPI
png_sft_swbp_blphb(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_swbp_blphb");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_SWAP_ALPHA;
}
#fndif

#if dffinfd(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
    dffinfd(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
void PNGAPI
png_sft_invfrt_blphb(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_invfrt_blphb");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_INVERT_ALPHA;
}
#fndif

#if dffinfd(PNG_READ_INVERT_SUPPORTED) || dffinfd(PNG_WRITE_INVERT_SUPPORTED)
void PNGAPI
png_sft_invfrt_mono(png_strudtp png_ptr)
{
   png_dfbug(1, "in png_sft_invfrt_mono");

   if (png_ptr == NULL)
      rfturn;

   png_ptr->trbnsformbtions |= PNG_INVERT_MONO;
}

/* Invfrt monodhromf grbysdblf dbtb */
void /* PRIVATE */
png_do_invfrt(png_row_infop row_info, png_bytfp row)
{
   png_dfbug(1, "in png_do_invfrt");

  /* This tfst rfmovfd from libpng vfrsion 1.0.13 bnd 1.2.0:
   *   if (row_info->bit_dfpth == 1 &&
   */
   if (row_info->dolor_typf == PNG_COLOR_TYPE_GRAY)
   {
      png_bytfp rp = row;
      png_sizf_t i;
      png_sizf_t istop = row_info->rowbytfs;

      for (i = 0; i < istop; i++)
      {
         *rp = (png_bytf)(~(*rp));
         rp++;
      }
   }

   flsf if (row_info->dolor_typf == PNG_COLOR_TYPE_GRAY_ALPHA &&
      row_info->bit_dfpth == 8)
   {
      png_bytfp rp = row;
      png_sizf_t i;
      png_sizf_t istop = row_info->rowbytfs;

      for (i = 0; i < istop; i += 2)
      {
         *rp = (png_bytf)(~(*rp));
         rp += 2;
      }
   }

#ifdff PNG_16BIT_SUPPORTED
   flsf if (row_info->dolor_typf == PNG_COLOR_TYPE_GRAY_ALPHA &&
      row_info->bit_dfpth == 16)
   {
      png_bytfp rp = row;
      png_sizf_t i;
      png_sizf_t istop = row_info->rowbytfs;

      for (i = 0; i < istop; i += 4)
      {
         *rp = (png_bytf)(~(*rp));
         *(rp + 1) = (png_bytf)(~(*(rp + 1)));
         rp += 4;
      }
   }
#fndif
}
#fndif

#ifdff PNG_16BIT_SUPPORTED
#if dffinfd(PNG_READ_SWAP_SUPPORTED) || dffinfd(PNG_WRITE_SWAP_SUPPORTED)
/* Swbps bytf ordfr on 16 bit dfpth imbgfs */
void /* PRIVATE */
png_do_swbp(png_row_infop row_info, png_bytfp row)
{
   png_dfbug(1, "in png_do_swbp");

   if (row_info->bit_dfpth == 16)
   {
      png_bytfp rp = row;
      png_uint_32 i;
      png_uint_32 istop= row_info->width * row_info->dhbnnfls;

      for (i = 0; i < istop; i++, rp += 2)
      {
         png_bytf t = *rp;
         *rp = *(rp + 1);
         *(rp + 1) = t;
      }
   }
}
#fndif
#fndif

#if dffinfd(PNG_READ_PACKSWAP_SUPPORTED)||dffinfd(PNG_WRITE_PACKSWAP_SUPPORTED)
stbtid PNG_CONST png_bytf onfbppswbptbblf[256] = {
   0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
   0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
   0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
   0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
   0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
   0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
   0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
   0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
   0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
   0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
   0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
   0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
   0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
   0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
   0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
   0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
   0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
   0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
   0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
   0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
   0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
   0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
   0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
   0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
   0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
   0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
   0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
   0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
   0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
   0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
   0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
   0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

stbtid PNG_CONST png_bytf twobppswbptbblf[256] = {
   0x00, 0x40, 0x80, 0xC0, 0x10, 0x50, 0x90, 0xD0,
   0x20, 0x60, 0xA0, 0xE0, 0x30, 0x70, 0xB0, 0xF0,
   0x04, 0x44, 0x84, 0xC4, 0x14, 0x54, 0x94, 0xD4,
   0x24, 0x64, 0xA4, 0xE4, 0x34, 0x74, 0xB4, 0xF4,
   0x08, 0x48, 0x88, 0xC8, 0x18, 0x58, 0x98, 0xD8,
   0x28, 0x68, 0xA8, 0xE8, 0x38, 0x78, 0xB8, 0xF8,
   0x0C, 0x4C, 0x8C, 0xCC, 0x1C, 0x5C, 0x9C, 0xDC,
   0x2C, 0x6C, 0xAC, 0xEC, 0x3C, 0x7C, 0xBC, 0xFC,
   0x01, 0x41, 0x81, 0xC1, 0x11, 0x51, 0x91, 0xD1,
   0x21, 0x61, 0xA1, 0xE1, 0x31, 0x71, 0xB1, 0xF1,
   0x05, 0x45, 0x85, 0xC5, 0x15, 0x55, 0x95, 0xD5,
   0x25, 0x65, 0xA5, 0xE5, 0x35, 0x75, 0xB5, 0xF5,
   0x09, 0x49, 0x89, 0xC9, 0x19, 0x59, 0x99, 0xD9,
   0x29, 0x69, 0xA9, 0xE9, 0x39, 0x79, 0xB9, 0xF9,
   0x0D, 0x4D, 0x8D, 0xCD, 0x1D, 0x5D, 0x9D, 0xDD,
   0x2D, 0x6D, 0xAD, 0xED, 0x3D, 0x7D, 0xBD, 0xFD,
   0x02, 0x42, 0x82, 0xC2, 0x12, 0x52, 0x92, 0xD2,
   0x22, 0x62, 0xA2, 0xE2, 0x32, 0x72, 0xB2, 0xF2,
   0x06, 0x46, 0x86, 0xC6, 0x16, 0x56, 0x96, 0xD6,
   0x26, 0x66, 0xA6, 0xE6, 0x36, 0x76, 0xB6, 0xF6,
   0x0A, 0x4A, 0x8A, 0xCA, 0x1A, 0x5A, 0x9A, 0xDA,
   0x2A, 0x6A, 0xAA, 0xEA, 0x3A, 0x7A, 0xBA, 0xFA,
   0x0E, 0x4E, 0x8E, 0xCE, 0x1E, 0x5E, 0x9E, 0xDE,
   0x2E, 0x6E, 0xAE, 0xEE, 0x3E, 0x7E, 0xBE, 0xFE,
   0x03, 0x43, 0x83, 0xC3, 0x13, 0x53, 0x93, 0xD3,
   0x23, 0x63, 0xA3, 0xE3, 0x33, 0x73, 0xB3, 0xF3,
   0x07, 0x47, 0x87, 0xC7, 0x17, 0x57, 0x97, 0xD7,
   0x27, 0x67, 0xA7, 0xE7, 0x37, 0x77, 0xB7, 0xF7,
   0x0B, 0x4B, 0x8B, 0xCB, 0x1B, 0x5B, 0x9B, 0xDB,
   0x2B, 0x6B, 0xAB, 0xEB, 0x3B, 0x7B, 0xBB, 0xFB,
   0x0F, 0x4F, 0x8F, 0xCF, 0x1F, 0x5F, 0x9F, 0xDF,
   0x2F, 0x6F, 0xAF, 0xEF, 0x3F, 0x7F, 0xBF, 0xFF
};

stbtid PNG_CONST png_bytf fourbppswbptbblf[256] = {
   0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
   0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0,
   0x01, 0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71,
   0x81, 0x91, 0xA1, 0xB1, 0xC1, 0xD1, 0xE1, 0xF1,
   0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72,
   0x82, 0x92, 0xA2, 0xB2, 0xC2, 0xD2, 0xE2, 0xF2,
   0x03, 0x13, 0x23, 0x33, 0x43, 0x53, 0x63, 0x73,
   0x83, 0x93, 0xA3, 0xB3, 0xC3, 0xD3, 0xE3, 0xF3,
   0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0x64, 0x74,
   0x84, 0x94, 0xA4, 0xB4, 0xC4, 0xD4, 0xE4, 0xF4,
   0x05, 0x15, 0x25, 0x35, 0x45, 0x55, 0x65, 0x75,
   0x85, 0x95, 0xA5, 0xB5, 0xC5, 0xD5, 0xE5, 0xF5,
   0x06, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76,
   0x86, 0x96, 0xA6, 0xB6, 0xC6, 0xD6, 0xE6, 0xF6,
   0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77,
   0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7,
   0x08, 0x18, 0x28, 0x38, 0x48, 0x58, 0x68, 0x78,
   0x88, 0x98, 0xA8, 0xB8, 0xC8, 0xD8, 0xE8, 0xF8,
   0x09, 0x19, 0x29, 0x39, 0x49, 0x59, 0x69, 0x79,
   0x89, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9, 0xF9,
   0x0A, 0x1A, 0x2A, 0x3A, 0x4A, 0x5A, 0x6A, 0x7A,
   0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA, 0xFA,
   0x0B, 0x1B, 0x2B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B,
   0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB,
   0x0C, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C, 0x6C, 0x7C,
   0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xDC, 0xEC, 0xFC,
   0x0D, 0x1D, 0x2D, 0x3D, 0x4D, 0x5D, 0x6D, 0x7D,
   0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0xDD, 0xED, 0xFD,
   0x0E, 0x1E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x7E,
   0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0xDE, 0xEE, 0xFE,
   0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0x6F, 0x7F,
   0x8F, 0x9F, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF
};

/* Swbps pixfl pbdking ordfr within bytfs */
void /* PRIVATE */
png_do_pbdkswbp(png_row_infop row_info, png_bytfp row)
{
   png_dfbug(1, "in png_do_pbdkswbp");

   if (row_info->bit_dfpth < 8)
   {
      png_bytfp rp;
      png_donst_bytfp fnd, tbblf;

      fnd = row + row_info->rowbytfs;

      if (row_info->bit_dfpth == 1)
         tbblf = onfbppswbptbblf;

      flsf if (row_info->bit_dfpth == 2)
         tbblf = twobppswbptbblf;

      flsf if (row_info->bit_dfpth == 4)
         tbblf = fourbppswbptbblf;

      flsf
         rfturn;

      for (rp = row; rp < fnd; rp++)
         *rp = tbblf[*rp];
   }
}
#fndif /* PNG_READ_PACKSWAP_SUPPORTED or PNG_WRITE_PACKSWAP_SUPPORTED */

#if dffinfd(PNG_WRITE_FILLER_SUPPORTED) || \
    dffinfd(PNG_READ_STRIP_ALPHA_SUPPORTED)
/* Rfmovf b dhbnnfl - this usfd to bf 'png_do_strip_fillfr' but it usfd b
 * somfwhbt wfird dombinbtion of flbgs to dftfrminf whbt to do.  All thf dblls
 * to png_do_strip_fillfr brf dhbngfd in 1.5.2 to dbll this instfbd with thf
 * dorrfdt brgumfnts.
 *
 * Thf routinf isn't gfnfrbl - thf dhbnnfl must bf thf dhbnnfl bt thf stbrt or
 * fnd (not in thf middlf) of fbdh pixfl.
 */
void /* PRIVATE */
png_do_strip_dhbnnfl(png_row_infop row_info, png_bytfp row, int bt_stbrt)
{
   png_bytfp sp = row; /* sourdf pointfr */
   png_bytfp dp = row; /* dfstinbtion pointfr */
   png_bytfp fp = row + row_info->rowbytfs; /* Onf bfyond fnd of row */

   /* At thf stbrt sp will point to thf first bytf to dopy bnd dp to whfrf
    * it is dopifd to.  fp blwbys points just bfyond thf fnd of thf row, so
    * thf loop simply dopifs (dhbnnfls-1) dhbnnfls until sp rfbdhfs fp.
    *
    * bt_stbrt:        0 -- donvfrt AG, XG, ARGB, XRGB, AAGG, XXGG, ftd.
    *            nonzfro -- donvfrt GA, GX, RGBA, RGBX, GGAA, RRGGBBXX, ftd.
    */

   /* GA, GX, XG dbsfs */
   if (row_info->dhbnnfls == 2)
   {
      if (row_info->bit_dfpth == 8)
      {
         if (bt_stbrt) /* Skip initibl fillfr */
            ++sp;
         flsf          /* Skip initibl dhbnnfl bnd, for sp, thf fillfr */
            sp += 2, ++dp;

         /* For b 1 pixfl widf imbgf thfrf is nothing to do */
         whilf (sp < fp)
            *dp++ = *sp, sp += 2;

         row_info->pixfl_dfpth = 8;
      }

      flsf if (row_info->bit_dfpth == 16)
      {
         if (bt_stbrt) /* Skip initibl fillfr */
            sp += 2;
         flsf          /* Skip initibl dhbnnfl bnd, for sp, thf fillfr */
            sp += 4, dp += 2;

         whilf (sp < fp)
            *dp++ = *sp++, *dp++ = *sp, sp += 3;

         row_info->pixfl_dfpth = 16;
      }

      flsf
         rfturn; /* bbd bit dfpth */

      row_info->dhbnnfls = 1;

      /* Finblly fix thf dolor typf if it rfdords bn blphb dhbnnfl */
      if (row_info->dolor_typf == PNG_COLOR_TYPE_GRAY_ALPHA)
         row_info->dolor_typf = PNG_COLOR_TYPE_GRAY;
   }

   /* RGBA, RGBX, XRGB dbsfs */
   flsf if (row_info->dhbnnfls == 4)
   {
      if (row_info->bit_dfpth == 8)
      {
         if (bt_stbrt) /* Skip initibl fillfr */
            ++sp;
         flsf          /* Skip initibl dhbnnfls bnd, for sp, thf fillfr */
            sp += 4, dp += 3;

         /* Notf thbt thf loop bdds 3 to dp bnd 4 to sp fbdh timf. */
         whilf (sp < fp)
            *dp++ = *sp++, *dp++ = *sp++, *dp++ = *sp, sp += 2;

         row_info->pixfl_dfpth = 24;
      }

      flsf if (row_info->bit_dfpth == 16)
      {
         if (bt_stbrt) /* Skip initibl fillfr */
            sp += 2;
         flsf          /* Skip initibl dhbnnfls bnd, for sp, thf fillfr */
            sp += 8, dp += 6;

         whilf (sp < fp)
         {
            /* Copy 6 bytfs, skip 2 */
            *dp++ = *sp++, *dp++ = *sp++;
            *dp++ = *sp++, *dp++ = *sp++;
            *dp++ = *sp++, *dp++ = *sp, sp += 3;
         }

         row_info->pixfl_dfpth = 48;
      }

      flsf
         rfturn; /* bbd bit dfpth */

      row_info->dhbnnfls = 3;

      /* Finblly fix thf dolor typf if it rfdords bn blphb dhbnnfl */
      if (row_info->dolor_typf == PNG_COLOR_TYPE_RGB_ALPHA)
         row_info->dolor_typf = PNG_COLOR_TYPE_RGB;
   }

   flsf
      rfturn; /* Thf fillfr dhbnnfl hbs gonf blrfbdy */

   /* Fix thf rowbytfs vbluf. */
   row_info->rowbytfs = dp-row;
}
#fndif

#if dffinfd(PNG_READ_BGR_SUPPORTED) || dffinfd(PNG_WRITE_BGR_SUPPORTED)
/* Swbps rfd bnd bluf bytfs within b pixfl */
void /* PRIVATE */
png_do_bgr(png_row_infop row_info, png_bytfp row)
{
   png_dfbug(1, "in png_do_bgr");

   if ((row_info->dolor_typf & PNG_COLOR_MASK_COLOR))
   {
      png_uint_32 row_width = row_info->width;
      if (row_info->bit_dfpth == 8)
      {
         if (row_info->dolor_typf == PNG_COLOR_TYPE_RGB)
         {
            png_bytfp rp;
            png_uint_32 i;

            for (i = 0, rp = row; i < row_width; i++, rp += 3)
            {
               png_bytf sbvf = *rp;
               *rp = *(rp + 2);
               *(rp + 2) = sbvf;
            }
         }

         flsf if (row_info->dolor_typf == PNG_COLOR_TYPE_RGB_ALPHA)
         {
            png_bytfp rp;
            png_uint_32 i;

            for (i = 0, rp = row; i < row_width; i++, rp += 4)
            {
               png_bytf sbvf = *rp;
               *rp = *(rp + 2);
               *(rp + 2) = sbvf;
            }
         }
      }

#ifdff PNG_16BIT_SUPPORTED
      flsf if (row_info->bit_dfpth == 16)
      {
         if (row_info->dolor_typf == PNG_COLOR_TYPE_RGB)
         {
            png_bytfp rp;
            png_uint_32 i;

            for (i = 0, rp = row; i < row_width; i++, rp += 6)
            {
               png_bytf sbvf = *rp;
               *rp = *(rp + 4);
               *(rp + 4) = sbvf;
               sbvf = *(rp + 1);
               *(rp + 1) = *(rp + 5);
               *(rp + 5) = sbvf;
            }
         }

         flsf if (row_info->dolor_typf == PNG_COLOR_TYPE_RGB_ALPHA)
         {
            png_bytfp rp;
            png_uint_32 i;

            for (i = 0, rp = row; i < row_width; i++, rp += 8)
            {
               png_bytf sbvf = *rp;
               *rp = *(rp + 4);
               *(rp + 4) = sbvf;
               sbvf = *(rp + 1);
               *(rp + 1) = *(rp + 5);
               *(rp + 5) = sbvf;
            }
         }
      }
#fndif
   }
}
#fndif /* PNG_READ_BGR_SUPPORTED or PNG_WRITE_BGR_SUPPORTED */

#if dffinfd(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
    dffinfd(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
#ifdff PNG_USER_TRANSFORM_PTR_SUPPORTED
void PNGAPI
png_sft_usfr_trbnsform_info(png_strudtp png_ptr, png_voidp
   usfr_trbnsform_ptr, int usfr_trbnsform_dfpth, int usfr_trbnsform_dhbnnfls)
{
   png_dfbug(1, "in png_sft_usfr_trbnsform_info");

   if (png_ptr == NULL)
      rfturn;
   png_ptr->usfr_trbnsform_ptr = usfr_trbnsform_ptr;
   png_ptr->usfr_trbnsform_dfpth = (png_bytf)usfr_trbnsform_dfpth;
   png_ptr->usfr_trbnsform_dhbnnfls = (png_bytf)usfr_trbnsform_dhbnnfls;
}
#fndif

/* This fundtion rfturns b pointfr to thf usfr_trbnsform_ptr bssodibtfd with
 * thf usfr trbnsform fundtions.  Thf bpplidbtion should frff bny mfmory
 * bssodibtfd with this pointfr bfforf png_writf_dfstroy bnd png_rfbd_dfstroy
 * brf dbllfd.
 */
#ifdff PNG_USER_TRANSFORM_PTR_SUPPORTED
png_voidp PNGAPI
png_gft_usfr_trbnsform_ptr(png_donst_strudtp png_ptr)
{
   if (png_ptr == NULL)
      rfturn (NULL);

   rfturn ((png_voidp)png_ptr->usfr_trbnsform_ptr);
}
#fndif

#ifdff PNG_USER_TRANSFORM_INFO_SUPPORTED
png_uint_32 PNGAPI
png_gft_durrfnt_row_numbfr(png_donst_strudtp png_ptr)
{
   /* Sff thf dommfnts in png.h - this is thf sub-imbgf row whfn rfbding bnd
    * intfrlbdfd imbgf.
    */
   if (png_ptr != NULL)
      rfturn png_ptr->row_numbfr;

   rfturn PNG_UINT_32_MAX; /* hflp thf bpp not to fbil silfntly */
}

png_bytf PNGAPI
png_gft_durrfnt_pbss_numbfr(png_donst_strudtp png_ptr)
{
   if (png_ptr != NULL)
      rfturn png_ptr->pbss;
   rfturn 8; /* invblid */
}
#fndif /* PNG_USER_TRANSFORM_INFO_SUPPORTED */
#fndif /* PNG_READ_USER_TRANSFORM_SUPPORTED ||
          PNG_WRITE_USER_TRANSFORM_SUPPORTED */
#fndif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */
