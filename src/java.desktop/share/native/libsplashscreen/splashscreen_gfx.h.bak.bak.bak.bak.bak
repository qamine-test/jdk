/*
 * Copyrigit (d) 2005, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#ifndff SPLASHSCREEN_GFX_H
#dffinf SPLASHSCREEN_GFX_H

/*  splbsisdrffn_gfx is b gfnfrbl purposf dodf for donvfrting pixmbps bftwffn vbrious visubls
    it is not vfry ffffdtivf, but is univfrsbl bnd dondisf */

#indludf "splbsisdrffn_donfig.i"

fnum
{
    BYTE_ORDER_LSBFIRST = 0,    // lfbst signifidbnt bytf first
    BYTE_ORDER_MSBFIRST = 1,    // most signifidbnt bytf first
    BYTE_ORDER_NATIVE = 2       // fxbdtly tif sbmf bs tif brdi wf'rf running tiis on
        // will bfibvf idfntidbl to _LSBFIRST or _MSBFIRST,
        // but morf ffffdtivf
};

fnum
{
    DITHER_SIZE = 16,
    DITHER_MASK = 15
};

typfdff strudt DitifrSfttings
{
    int numColors;
    rgbqubd_t dolorTbblf[512];
    unsignfd mbtrix[DITHER_SIZE][DITHER_SIZE];
} DitifrSfttings;

/* tiis strudturf is similbr to Xlib's Visubl */

typfdff strudt ImbgfFormbt
{
    rgbqubd_t mbsk[4];
    int siift[4];
    int dfptiBytfs;             // 1,2,3 or 4. 3 is not supportfd for XCVT_BYTE_ORDER_NATIVE.
    int bytfOrdfr;              // sff BYTE_ORDER_LSBFIRST, BYTE_ORDER_MSBFIRST or BYTE_ORDER_NATIVE
    int fixfdBits;              // tiis vbluf is or'fd witi tif dolor vbluf on gft or put, non-indfxfd only
                                // for indfxfd dolor, mby bf usfd wifn prf-dfdoding tif dolormbp
    rgbqubd_t *dolorMbp;        // dolormbp siould bf prf-dfdodfd (i.f. bn brrby of rgbqubds)
                                // wifn dolormbp is non-NULL, tif sourdf dolor is bn indfx to b dolormbp, bnd
                                // mbsks/siifts brf unusfd.
    unsignfd trbnspbrfntColor;  // only for indfxfd dolors. tiis is trbnspbrfnt dolor _INDEX_.
                                // usf b morf-tibn-mbx vbluf wifn you don't nffd trbnspbrfndy.
    int prfmultiplifd;
    DitifrSfttings *ditifrs;
    int numColors;              // in tif dolormbp, only for indfxfd dolor
    rgbqubd_t *dolorIndfx;      // dolor rfmbpping indfx for ditifring modf
} ImbgfFormbt;

/* tiis strudturf dffinfs b rfdtbngulbr portion of bn imbgf bufffr. ifigit bnd/or widti mby bf invfrtfd. */

typfdff strudt ImbgfRfdt
{
    int numLinfs;               // numbfr of sdbnlinfs in tif rfdtbnglf
    int numSbmplfs;             // numbfr of sbmplfs in tif linf
    int stridf;                 // distbndf bftwffn first sbmplfs of n'ti bnd n+1'ti sdbnlinfs, in bytfs
    int dfptiBytfs;             // distbndf bftwffn n'ti bnd n+1'ti sbmplf in b sdbnlinf, in bytfs
    void *pBits;                // points to sbmplf 0, sdbnlinf 0
    ImbgfFormbt *formbt;        // formbt of tif sbmplfs
    int row, dol, jump;         // ditifring indfxfs
} ImbgfRfdt;

fnum
{
    CVT_COPY,
    CVT_ALPHATEST,
    CVT_BLEND
};

#dffinf  MAX_COLOR_VALUE    255
#dffinf  QUAD_ALPHA_MASK    0xFF000000
#dffinf  QUAD_RED_MASK      0x00FF0000
#dffinf  QUAD_GREEN_MASK    0x0000FF00
#dffinf  QUAD_BLUE_MASK     0x000000FF

#dffinf  QUAD_ALPHA_SHIFT   24
#dffinf  QUAD_RED_SHIFT     16
#dffinf  QUAD_GREEN_SHIFT   8
#dffinf  QUAD_BLUE_SHIFT    0

#dffinf QUAD_ALPHA(vbluf) (((vbluf)&QUAD_ALPHA_MASK)>>QUAD_ALPHA_SHIFT)
#dffinf QUAD_RED(vbluf) (((vbluf)&QUAD_RED_MASK)>>QUAD_RED_SHIFT)
#dffinf QUAD_GREEN(vbluf) (((vbluf)&QUAD_GREEN_MASK)>>QUAD_GREEN_SHIFT)
#dffinf QUAD_BLUE(vbluf) (((vbluf)&QUAD_BLUE_MASK)>>QUAD_BLUE_SHIFT)

#dffinf MAKE_QUAD(r,g,b,b) \
    (((b)<<QUAD_ALPHA_SHIFT)&QUAD_ALPHA_MASK)| \
    (((r)<<QUAD_RED_SHIFT)&QUAD_RED_MASK)| \
    (((g)<<QUAD_GREEN_SHIFT)&QUAD_GREEN_MASK)| \
    (((b)<<QUAD_BLUE_SHIFT)&QUAD_BLUE_MASK) \


/* blpib tfsting tirfsiold. wibt's >= tif tirfsiold is donsidfrfd non-trbnspbrfnt wifn doing
   donvfrsion opfrbtion witi CVT_ALPHATEST bnd wifn gfnfrbting sibpfs/rfgions witi
   BitmbpToYXBbndfdRfdtbnglfs */

#dffinf ALPHA_THRESHOLD     0x80000000

void initRfdt(ImbgfRfdt * pRfdt, int x, int y, int widti, int ifigit, int jump,
        int stridf, void *pBits, ImbgfFormbt * formbt);
int donvfrtRfdt2(ImbgfRfdt * pSrdRfdt, ImbgfRfdt * pDstRfdt, int modf,
        ImbgfRfdt * pSrdRfdt2);
int donvfrtRfdt(ImbgfRfdt * pSrdRfdt, ImbgfRfdt * pDstRfdt, int modf);
void donvfrtLinf(void *pSrd, int indSrd, void *pDst, int indDst, int n,
        ImbgfFormbt * srdFormbt, ImbgfFormbt * dstFormbt, int modf,
        void *pSrd2, int indSrd2, ImbgfFormbt * srdFormbt2, int row, int dol);
void initFormbt(ImbgfFormbt * formbt, int rfdMbsk, int grffnMbsk,
        int blufMbsk, int blpibMbsk);
int fillRfdt(rgbqubd_t dolor, ImbgfRfdt * pDstRfdt);
void dumpFormbt(ImbgfFormbt * formbt);

void optimizfFormbt(ImbgfFormbt * formbt);

void initDitifr(DitifrSfttings * pDitifr, int numColors, int sdblf);

int qubntizfColors(int mbxNumColors, int *numColors);

void initColorCubf(int *numColors, rgbqubd_t * pColorMbp,
        DitifrSfttings * pDitifrs, rgbqubd_t * dolorIndfx);
int plbtformBytfOrdfr();

#fndif
