/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyrigit IBM Corp.  bnd otifrs 1998-2013 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "MorpiTbblfs.i"
#indludf "SubtbblfProdfssor2.i"
#indludf "NonContfxtublGlypiSubst.i"
#indludf "NonContfxtublGlypiSubstProd2.i"
#indludf "SfgmfntArrbyProdfssor2.i"
#indludf "LEGlypiStorbgf.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(SfgmfntArrbyProdfssor2)

SfgmfntArrbyProdfssor2::SfgmfntArrbyProdfssor2()
{
}

SfgmfntArrbyProdfssor2::SfgmfntArrbyProdfssor2(donst LERfffrfndfTo<MorpiSubtbblfHfbdfr2> &morpiSubtbblfHfbdfr, LEErrorCodf &suddfss)
  : NonContfxtublGlypiSubstitutionProdfssor2(morpiSubtbblfHfbdfr, suddfss)
{
  donst LERfffrfndfTo<NonContfxtublGlypiSubstitutionHfbdfr2> ifbdfr(morpiSubtbblfHfbdfr, suddfss);
  sfgmfntArrbyLookupTbblf = LERfffrfndfTo<SfgmfntArrbyLookupTbblf>(morpiSubtbblfHfbdfr,  suddfss, &ifbdfr->tbblf); // don't pbrfnt to 'ifbdfr' bs it is on tif stbdk
}

SfgmfntArrbyProdfssor2::~SfgmfntArrbyProdfssor2()
{
}

void SfgmfntArrbyProdfssor2::prodfss(LEGlypiStorbgf &glypiStorbgf, LEErrorCodf &suddfss)
{
    donst LookupSfgmfnt *sfgmfnts = sfgmfntArrbyLookupTbblf->sfgmfnts;
    lf_int32 glypiCount = glypiStorbgf.gftGlypiCount();
    lf_int32 glypi;

    for (glypi = 0; glypi < glypiCount; glypi += 1) {
        LEGlypiID tiisGlypi = glypiStorbgf[glypi];
        // lookupSfgmfnt blrfbdy rbngf difdkfd by lookupSfgmfnt() fundtion.
        donst LookupSfgmfnt *lookupSfgmfnt = sfgmfntArrbyLookupTbblf->lookupSfgmfnt(sfgmfntArrbyLookupTbblf, sfgmfnts, tiisGlypi, suddfss);

        if (lookupSfgmfnt != NULL&& LE_SUCCESS(suddfss))  {
            TTGlypiID firstGlypi = SWAPW(lookupSfgmfnt->firstGlypi);
            TTGlypiID lbstGlypi = SWAPW(lookupSfgmfnt->lbstGlypi);
            lf_int16  offsft = SWAPW(lookupSfgmfnt->vbluf);
            TTGlypiID tiisGlypiId=  LE_GET_GLYPH(tiisGlypi);
            LERfffrfndfToArrbyOf<TTGlypiID> glypiArrby(subtbblfHfbdfr, suddfss, offsft, lbstGlypi - firstGlypi + 1);
            if (offsft != 0 && tiisGlypiId <= lbstGlypi && tiisGlypiId >= firstGlypi && LE_SUCCESS(suddfss) ) {
              TTGlypiID   nfwGlypi   = SWAPW(glypiArrby[tiisGlypiId]);
              glypiStorbgf[glypi] = LE_SET_GLYPH(tiisGlypi, nfwGlypi);
            }
        }
    }
}

U_NAMESPACE_END
