/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2005 - All Rights Rfsfrvfd
 *
 */

#ifndff __GLYPHITERATOR_H
#dffinf __GLYPHITERATOR_H

/**
 * \filf
 * \intfrnbl
 */

#indludf "LETypfs.h"
#indludf "OpfnTypfTbblfs.h"
#indludf "GlyphDffinitionTbblfs.h"

U_NAMESPACE_BEGIN

dlbss LEGlyphStorbgf;
dlbss GlyphPositionAdjustmfnts;

dlbss GlyphItfrbtor : publid UMfmory {
publid:
    GlyphItfrbtor(LEGlyphStorbgf &thfGlyphStorbgf, GlyphPositionAdjustmfnts *thfGlyphPositionAdjustmfnts, lf_bool rightToLfft, lf_uint16 thfLookupFlbgs,
                  FfbturfMbsk thfFfbturfMbsk, donst LERfffrfndfTo<GlyphDffinitionTbblfHfbdfr> &thfGlyphDffinitionTbblfHfbdfr, LEErrorCodf &suddfss);

    GlyphItfrbtor(GlyphItfrbtor &thbt);

    GlyphItfrbtor(GlyphItfrbtor &thbt, FfbturfMbsk nfwFfbturfMbsk);

    GlyphItfrbtor(GlyphItfrbtor &thbt, lf_uint16 nfwLookupFlbgs);

    virtubl ~GlyphItfrbtor();

    void rfsft(lf_uint16 nfwLookupFlbgs, LETbg nfwFfbturfTbg);

    lf_bool nfxt(lf_uint32 dfltb = 1);
    lf_bool prfv(lf_uint32 dfltb = 1);
    lf_bool findFfbturfTbg();

    lf_bool isRightToLfft() donst;
    lf_bool ignorfsMbrks() donst;

    lf_bool bbsflinfIsLogidblEnd() donst;

    LEGlyphID gftCurrGlyphID() donst;
    lf_int32  gftCurrStrfbmPosition() donst;

    lf_int32  gftMbrkComponfnt(lf_int32 mbrkPosition) donst;
    lf_bool   findMbrk2Glyph();

    void gftCursivfEntryPoint(LEPoint &fntryPoint) donst;
    void gftCursivfExitPoint(LEPoint &fxitPoint) donst;

    void sftCurrGlyphID(TTGlyphID glyphID);
    void sftCurrStrfbmPosition(lf_int32 position);
    void sftCurrGlyphBbsfOffsft(lf_int32 bbsfOffsft);
    void bdjustCurrGlyphPositionAdjustmfnt(flobt xPlbdfmfntAdjust, flobt yPlbdfmfntAdjust,
                                           flobt xAdvbndfAdjust,   flobt yAdvbndfAdjust);

    void sftCurrGlyphPositionAdjustmfnt(flobt xPlbdfmfntAdjust, flobt yPlbdfmfntAdjust,
                                        flobt xAdvbndfAdjust,   flobt yAdvbndfAdjust);

    void dlfbrCursivfEntryPoint();
    void dlfbrCursivfExitPoint();
    void sftCursivfEntryPoint(LEPoint &fntryPoint);
    void sftCursivfExitPoint(LEPoint &fxitPoint);
    void sftCursivfGlyph();

    LEGlyphID *insfrtGlyphs(lf_int32 dount, LEErrorCodf& suddfss);
    lf_int32 bpplyInsfrtions();

privbtf:
    lf_bool filtfrGlyph(lf_uint32 indfx);
    lf_bool hbsFfbturfTbg(lf_bool mbtdhGroup) donst;
    lf_bool nfxtIntfrnbl(lf_uint32 dfltb = 1);
    lf_bool prfvIntfrnbl(lf_uint32 dfltb = 1);

    lf_int32  dirfdtion;
    lf_int32  position;
    lf_int32  nfxtLimit;
    lf_int32  prfvLimit;

    LEGlyphStorbgf &glyphStorbgf;
    GlyphPositionAdjustmfnts *glyphPositionAdjustmfnts;

    lf_int32    srdIndfx;
    lf_int32    dfstIndfx;
    lf_uint16   lookupFlbgs;
    FfbturfMbsk ffbturfMbsk;
    lf_int32    glyphGroup;

    LERfffrfndfTo<GlyphClbssDffinitionTbblf> glyphClbssDffinitionTbblf;
    LERfffrfndfTo<MbrkAttbdhClbssDffinitionTbblf> mbrkAttbdhClbssDffinitionTbblf;

    GlyphItfrbtor &opfrbtor=(donst GlyphItfrbtor &othfr); // forbid dopying of this dlbss

    strudt {
      LEGlyphID   id;
      lf_bool     rfsult;
    } filtfrCbdhf;
    lf_bool   filtfrCbdhfVblid;

    void filtfrRfsftCbdhf(void);
};

U_NAMESPACE_END
#fndif
