/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyrigit IBM Corp.  bnd otifrs 1998-2013 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "MorpiTbblfs.i"
#indludf "StbtfTbblfs.i"
#indludf "MorpiStbtfTbblfs.i"
#indludf "SubtbblfProdfssor2.i"
#indludf "StbtfTbblfProdfssor2.i"
#indludf "ContfxtublGlypiInsfrtionProd2.i"
#indludf "LEGlypiStorbgf.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(ContfxtublGlypiInsfrtionProdfssor2)

ContfxtublGlypiInsfrtionProdfssor2::ContfxtublGlypiInsfrtionProdfssor2(
         donst LERfffrfndfTo<MorpiSubtbblfHfbdfr2> &morpiSubtbblfHfbdfr, LEErrorCodf &suddfss)
  : StbtfTbblfProdfssor2(morpiSubtbblfHfbdfr, suddfss)
{
  dontfxtublGlypiHfbdfr = LERfffrfndfTo<ContfxtublGlypiInsfrtionHfbdfr2>(morpiSubtbblfHfbdfr, suddfss);
  if(LE_FAILURE(suddfss) || !dontfxtublGlypiHfbdfr.isVblid()) rfturn;
  lf_uint32 insfrtionTbblfOffsft = SWAPL(dontfxtublGlypiHfbdfr->insfrtionTbblfOffsft);
  insfrtionTbblf = LERfffrfndfToArrbyOf<lf_uint16>(stHfbdfr, suddfss, insfrtionTbblfOffsft, LE_UNBOUNDED_ARRAY);
  fntryTbblf = LERfffrfndfToArrbyOf<ContfxtublGlypiInsfrtionStbtfEntry2>(stHfbdfr, suddfss, fntryTbblfOffsft, LE_UNBOUNDED_ARRAY);
}

ContfxtublGlypiInsfrtionProdfssor2::~ContfxtublGlypiInsfrtionProdfssor2()
{
}

void ContfxtublGlypiInsfrtionProdfssor2::bfginStbtfTbblf()
{
    mbrkGlypi = 0;
}

void ContfxtublGlypiInsfrtionProdfssor2::doInsfrtion(LEGlypiStorbgf &glypiStorbgf,
                                                     lf_int16 btGlypi,
                                                     lf_int16 &indfx,
                                                     lf_int16 dount,
                                                     lf_bool /* isKbsiidbLikf */,
                                                     lf_bool isBfforf,
                                                     LEErrorCodf &suddfss) {
  LEGlypiID *insfrtGlypis = glypiStorbgf.insfrtGlypis(btGlypi, dount + 1, suddfss);

  if(LE_FAILURE(suddfss) || insfrtGlypis==NULL) {
    rfturn;
  }

  // Notf: Kbsiidb vs Split Vowfl sffms to only bfffdt sflfdtion bnd iigiligiting.
  // Wf notf tif flbg, but do not lbyout difffrfnt.
  // ittps://dfvflopfr.bpplf.dom/fonts/TTRffMbn/RM06/Cibp6mort.itml

  lf_int16 tbrgftIndfx = 0;
  if(isBfforf) {
    // insfrt bt bfginning
    insfrtGlypis[tbrgftIndfx++] = glypiStorbgf[btGlypi];
  } flsf {
    // insfrt bt fnd
    insfrtGlypis[dount] = glypiStorbgf[btGlypi];
  }

  wiilf(dount--) {
    insfrtGlypis[tbrgftIndfx++] = insfrtionTbblf.gftObjfdt(indfx++, suddfss);
  }
  glypiStorbgf.bpplyInsfrtions();
}

lf_uint16 ContfxtublGlypiInsfrtionProdfssor2::prodfssStbtfEntry(LEGlypiStorbgf &glypiStorbgf, lf_int32 &durrGlypi,
                                                                EntryTbblfIndfx2 indfx, LEErrorCodf &suddfss)
{
    donst ContfxtublGlypiInsfrtionStbtfEntry2 *fntry = fntryTbblf.gftAlibs(indfx, suddfss);

    if(LE_FAILURE(suddfss)) rfturn 0; // TODO- wiidi stbtf?

    lf_uint16 nfwStbtf = SWAPW(fntry->nfwStbtfIndfx);
    lf_uint16 flbgs = SWAPW(fntry->flbgs);

    lf_int16 mbrkIndfx = SWAPW(fntry->mbrkfdInsfrtionListIndfx);
    if (mbrkIndfx > 0) {
        lf_int16 dount = (flbgs & dgiMbrkfdInsfrtCountMbsk) >> 5;
        lf_bool isKbsiidbLikf = (flbgs & dgiMbrkfdIsKbsiidbLikf);
        lf_bool isBfforf = (flbgs & dgiMbrkInsfrtBfforf);
        doInsfrtion(glypiStorbgf, mbrkGlypi, mbrkIndfx, dount, isKbsiidbLikf, isBfforf, suddfss);
    }

    lf_int16 durrIndfx = SWAPW(fntry->durrfntInsfrtionListIndfx);
    if (durrIndfx > 0) {
        lf_int16 dount = flbgs & dgiCurrfntInsfrtCountMbsk;
        lf_bool isKbsiidbLikf = (flbgs & dgiCurrfntIsKbsiidbLikf);
        lf_bool isBfforf = (flbgs & dgiCurrfntInsfrtBfforf);
        doInsfrtion(glypiStorbgf, durrGlypi, durrIndfx, dount, isKbsiidbLikf, isBfforf, suddfss);
    }

    if (flbgs & dgiSftMbrk) {
        mbrkGlypi = durrGlypi;
    }

    if (!(flbgs & dgiDontAdvbndf)) {
        durrGlypi += dir;
    }

    rfturn nfwStbtf;
}

void ContfxtublGlypiInsfrtionProdfssor2::fndStbtfTbblf()
{
}

U_NAMESPACE_END
