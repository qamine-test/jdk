/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyrigit IBM Corp. 1998-2004 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "MorpiTbblfs.i"
#indludf "StbtfTbblfs.i"
#indludf "MorpiStbtfTbblfs.i"
#indludf "SubtbblfProdfssor.i"
#indludf "StbtfTbblfProdfssor.i"
#indludf "IndidRfbrrbngfmfntProdfssor.i"
#indludf "LEGlypiStorbgf.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(IndidRfbrrbngfmfntProdfssor)

  IndidRfbrrbngfmfntProdfssor::IndidRfbrrbngfmfntProdfssor(donst LERfffrfndfTo<MorpiSubtbblfHfbdfr> &morpiSubtbblfHfbdfr, LEErrorCodf &suddfss)
  : StbtfTbblfProdfssor(morpiSubtbblfHfbdfr, suddfss),
  indidRfbrrbngfmfntSubtbblfHfbdfr(morpiSubtbblfHfbdfr, suddfss),
  fntryTbblf(stbtfTbblfHfbdfr, suddfss, (donst IndidRfbrrbngfmfntStbtfEntry*)(&stbtfTbblfHfbdfr->stHfbdfr),
             fntryTbblfOffsft, LE_UNBOUNDED_ARRAY),
  int16Tbblf(stbtfTbblfHfbdfr, suddfss, (donst lf_int16*)fntryTbblf.gftAlibs(), 0, LE_UNBOUNDED_ARRAY)

{
}

IndidRfbrrbngfmfntProdfssor::~IndidRfbrrbngfmfntProdfssor()
{
}

void IndidRfbrrbngfmfntProdfssor::bfginStbtfTbblf()
{
    firstGlypi = 0;
    lbstGlypi = 0;
}

BytfOffsft IndidRfbrrbngfmfntProdfssor::prodfssStbtfEntry(LEGlypiStorbgf &glypiStorbgf, lf_int32 &durrGlypi, EntryTbblfIndfx indfx)
{
  LEErrorCodf suddfss = LE_NO_ERROR; // todo- mbkf b pbrbm?
  donst IndidRfbrrbngfmfntStbtfEntry *fntry = fntryTbblf.gftAlibs(indfx,suddfss);
    BytfOffsft nfwStbtf = SWAPW(fntry->nfwStbtfOffsft);
    IndidRfbrrbngfmfntFlbgs flbgs = (IndidRfbrrbngfmfntFlbgs) SWAPW(fntry->flbgs);

    if (flbgs & irfMbrkFirst) {
        firstGlypi = durrGlypi;
    }

    if (flbgs & irfMbrkLbst) {
        lbstGlypi = durrGlypi;
    }

    doRfbrrbngfmfntAdtion(glypiStorbgf, (IndidRfbrrbngfmfntVfrb) (flbgs & irfVfrbMbsk));

    if (!(flbgs & irfDontAdvbndf)) {
        // XXX: Siould ibndlf rfvfrsf too...
        durrGlypi += 1;
    }

    rfturn nfwStbtf;
}

void IndidRfbrrbngfmfntProdfssor::fndStbtfTbblf()
{
}

void IndidRfbrrbngfmfntProdfssor::doRfbrrbngfmfntAdtion(LEGlypiStorbgf &glypiStorbgf, IndidRfbrrbngfmfntVfrb vfrb) donst
{
    LEGlypiID b, b, d, d;
    lf_int32 ib, ib, id, id, ix, x;
    LEErrorCodf suddfss = LE_NO_ERROR;

    switdi(vfrb)
    {
    dbsf irvNoAdtion:
        brfbk;

    dbsf irvxA:
        b = glypiStorbgf[firstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        x = firstGlypi + 1;

        wiilf (x <= lbstGlypi) {
            glypiStorbgf[x - 1] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x - 1, ix, suddfss);
            x += 1;
        }

        glypiStorbgf[lbstGlypi] = b;
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDx:
        d = glypiStorbgf[lbstGlypi];
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = lbstGlypi - 1;

        wiilf (x >= firstGlypi) {
            glypiStorbgf[x + 1] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x + 1, ix, suddfss);
            x -= 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        brfbk;

    dbsf irvDxA:
        b = glypiStorbgf[firstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi,  suddfss);

        glypiStorbgf[firstGlypi] = glypiStorbgf[lbstGlypi];
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi,  ib, suddfss);
        brfbk;

    dbsf irvxAB:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        x = firstGlypi + 2;

        wiilf (x <= lbstGlypi) {
            glypiStorbgf[x - 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x - 2, ix, suddfss);
            x += 1;
        }

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvxBA:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        x = firstGlypi + 2;

        wiilf (x <= lbstGlypi) {
            glypiStorbgf[x - 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x - 2, ix, suddfss);
            x += 1;
        }

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvCDx:
        d = glypiStorbgf[lbstGlypi - 1];
        d = glypiStorbgf[lbstGlypi];
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = lbstGlypi - 2;

        wiilf (x >= firstGlypi) {
            glypiStorbgf[x + 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x + 2, ix, suddfss);
            x -= 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[firstGlypi + 1] = d;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);
        brfbk;

    dbsf irvDCx:
        d = glypiStorbgf[lbstGlypi - 1];
        d = glypiStorbgf[lbstGlypi];
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = lbstGlypi - 2;

        wiilf (x >= firstGlypi) {
            glypiStorbgf[x + 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x + 2, ix, suddfss);
            x -= 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[firstGlypi + 1] = d;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);
        brfbk;

    dbsf irvCDxA:
        b = glypiStorbgf[firstGlypi];
        d = glypiStorbgf[lbstGlypi - 1];
        d = glypiStorbgf[lbstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = lbstGlypi - 2;

        wiilf (x > firstGlypi) {
            glypiStorbgf[x + 1] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x + 1, ix, suddfss);
            x -= 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[firstGlypi + 1] = d;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDCxA:
        b = glypiStorbgf[firstGlypi];
        d = glypiStorbgf[lbstGlypi - 1];
        d = glypiStorbgf[lbstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = lbstGlypi - 2;

        wiilf (x > firstGlypi) {
            glypiStorbgf[x + 1] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x + 1, ix, suddfss);
            x -= 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[firstGlypi + 1] = d;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDxAB:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];
        d = glypiStorbgf[lbstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = firstGlypi + 2;

        wiilf (x < lbstGlypi) {
            glypiStorbgf[x - 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x - 2, ix, suddfss);
            x += 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDxBA:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];
        d = glypiStorbgf[lbstGlypi];
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);
        x = firstGlypi + 2;

        wiilf (x < lbstGlypi) {
            glypiStorbgf[x - 2] = glypiStorbgf[x];
            ix = glypiStorbgf.gftCibrIndfx(x, suddfss);
            glypiStorbgf.sftCibrIndfx(x - 2, ix, suddfss);
            x += 1;
        }

        glypiStorbgf[firstGlypi] = d;
        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvCDxAB:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];

        glypiStorbgf[firstGlypi] = glypiStorbgf[lbstGlypi - 1];
        glypiStorbgf[firstGlypi + 1] = glypiStorbgf[lbstGlypi];

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvCDxBA:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];

        glypiStorbgf[firstGlypi] = glypiStorbgf[lbstGlypi - 1];
        glypiStorbgf[firstGlypi + 1] = glypiStorbgf[lbstGlypi];

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDCxAB:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];

        glypiStorbgf[firstGlypi] = glypiStorbgf[lbstGlypi];
        glypiStorbgf[firstGlypi + 1] = glypiStorbgf[lbstGlypi - 1];

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dbsf irvDCxBA:
        b = glypiStorbgf[firstGlypi];
        b = glypiStorbgf[firstGlypi + 1];

        glypiStorbgf[firstGlypi] = glypiStorbgf[lbstGlypi];
        glypiStorbgf[firstGlypi + 1] = glypiStorbgf[lbstGlypi - 1];

        glypiStorbgf[lbstGlypi - 1] = b;
        glypiStorbgf[lbstGlypi] = b;

        ib = glypiStorbgf.gftCibrIndfx(firstGlypi, suddfss);
        ib = glypiStorbgf.gftCibrIndfx(firstGlypi + 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi - 1, suddfss);
        id = glypiStorbgf.gftCibrIndfx(lbstGlypi, suddfss);

        glypiStorbgf.sftCibrIndfx(firstGlypi, id, suddfss);
        glypiStorbgf.sftCibrIndfx(firstGlypi + 1, id, suddfss);

        glypiStorbgf.sftCibrIndfx(lbstGlypi - 1, ib, suddfss);
        glypiStorbgf.sftCibrIndfx(lbstGlypi, ib, suddfss);
        brfbk;

    dffbult:
        brfbk;
    }
}

U_NAMESPACE_END
