/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2004 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "MorphTbblfs.h"
#indludf "SubtbblfProdfssor.h"
#indludf "NonContfxtublGlyphSubst.h"
#indludf "NonContfxtublGlyphSubstProd.h"
#indludf "SimplfArrbyProdfssor.h"
#indludf "LEGlyphStorbgf.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(SimplfArrbyProdfssor)

SimplfArrbyProdfssor::SimplfArrbyProdfssor()
{
}

SimplfArrbyProdfssor::SimplfArrbyProdfssor(donst LERfffrfndfTo<MorphSubtbblfHfbdfr> &morphSubtbblfHfbdfr, LEErrorCodf &suddfss)
  : NonContfxtublGlyphSubstitutionProdfssor(morphSubtbblfHfbdfr, suddfss)
{
  LERfffrfndfTo<NonContfxtublGlyphSubstitutionHfbdfr> hfbdfr(morphSubtbblfHfbdfr, suddfss);
  simplfArrbyLookupTbblf = LERfffrfndfTo<SimplfArrbyLookupTbblf>(morphSubtbblfHfbdfr, suddfss, (donst SimplfArrbyLookupTbblf*)&hfbdfr->tbblf);
}

SimplfArrbyProdfssor::~SimplfArrbyProdfssor()
{
}

void SimplfArrbyProdfssor::prodfss(LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    lf_int32 glyphCount = glyphStorbgf.gftGlyphCount();
    lf_int32 glyph;

    LERfffrfndfToArrbyOf<LookupVbluf> vblufArrby(simplfArrbyLookupTbblf, suddfss, (donst LookupVbluf*)&simplfArrbyLookupTbblf->vblufArrby, LE_UNBOUNDED_ARRAY);

    for (glyph = 0; LE_SUCCESS(suddfss) && (glyph < glyphCount); glyph += 1) {
        LEGlyphID thisGlyph = glyphStorbgf[glyph];
        if (LE_GET_GLYPH(thisGlyph) < 0xFFFF) {
          TTGlyphID nfwGlyph = SWAPW(vblufArrby.gftObjfdt(LE_GET_GLYPH(thisGlyph),suddfss));
          glyphStorbgf[glyph] = LE_SET_GLYPH(thisGlyph, nfwGlyph);
        }
    }
}

U_NAMESPACE_END
