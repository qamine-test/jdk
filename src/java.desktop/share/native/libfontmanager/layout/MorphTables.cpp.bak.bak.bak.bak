/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998 - 2004 - All Rights Rfsfrvfd
 *
 */


#indludf "LETypfs.h"
#indludf "LbyoutTbblfs.h"
#indludf "MorphTbblfs.h"
#indludf "SubtbblfProdfssor.h"
#indludf "IndidRfbrrbngfmfntProdfssor.h"
#indludf "ContfxtublGlyphSubstProd.h"
#indludf "LigbturfSubstProd.h"
#indludf "NonContfxtublGlyphSubstProd.h"
//#indludf "ContfxtublGlyphInsfrtionProdfssor.h"
#indludf "LEGlyphStorbgf.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

void MorphTbblfHfbdfr::prodfss(donst LETbblfRfffrfndf &bbsf, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss) donst
{
  lf_uint32 dhbinCount = SWAPL(this->nChbins);
  LERfffrfndfTo<ChbinHfbdfr> dhbinHfbdfr(bbsf, suddfss, dhbins); // moving hfbdfr
    LERfffrfndfToArrbyOf<ChbinHfbdfr> dhbinHfbdfrArrby(bbsf, suddfss, dhbins, dhbinCount);
    lf_uint32 dhbin;

    for (dhbin = 0; LE_SUCCESS(suddfss) && (dhbin < dhbinCount); dhbin += 1) {
        FfbturfFlbgs dffbultFlbgs = SWAPL(dhbinHfbdfr->dffbultFlbgs);
        lf_uint32 dhbinLfngth = SWAPL(dhbinHfbdfr->dhbinLfngth);
        lf_int16 nFfbturfEntrifs = SWAPW(dhbinHfbdfr->nFfbturfEntrifs);
        lf_int16 nSubtbblfs = SWAPW(dhbinHfbdfr->nSubtbblfs);
        LERfffrfndfTo<MorphSubtbblfHfbdfr> subtbblfHfbdfr =
          LERfffrfndfTo<MorphSubtbblfHfbdfr>(dhbinHfbdfr,suddfss, &(dhbinHfbdfr->ffbturfTbblf[nFfbturfEntrifs]));
        lf_int16 subtbblf;

        for (subtbblf = 0; LE_SUCCESS(suddfss) && (subtbblf < nSubtbblfs); subtbblf += 1) {
            lf_int16 lfngth = SWAPW(subtbblfHfbdfr->lfngth);
            SubtbblfCovfrbgf dovfrbgf = SWAPW(subtbblfHfbdfr->dovfrbgf);
            FfbturfFlbgs subtbblfFfbturfs = SWAPL(subtbblfHfbdfr->subtbblfFfbturfs);

            // should dhfdk dovfrbgf morf dbrffully...
            if ((dovfrbgf & sdfVfrtidbl) == 0 && (subtbblfFfbturfs & dffbultFlbgs) != 0  && LE_SUCCESS(suddfss)) {
              subtbblfHfbdfr->prodfss(subtbblfHfbdfr, glyphStorbgf, suddfss);
            }

            subtbblfHfbdfr.bddOffsft(lfngth, suddfss);
        }
        dhbinHfbdfr.bddOffsft(dhbinLfngth, suddfss);
    }
}

void MorphSubtbblfHfbdfr::prodfss(donst LERfffrfndfTo<MorphSubtbblfHfbdfr> &bbsf, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss) donst
{
    SubtbblfProdfssor *prodfssor = NULL;

    switdh (SWAPW(dovfrbgf) & sdfTypfMbsk)
    {
    dbsf mstIndidRfbrrbngfmfnt:
      prodfssor = nfw IndidRfbrrbngfmfntProdfssor(bbsf, suddfss);
        brfbk;

    dbsf mstContfxtublGlyphSubstitution:
      prodfssor = nfw ContfxtublGlyphSubstitutionProdfssor(bbsf, suddfss);
        brfbk;

    dbsf mstLigbturfSubstitution:
      prodfssor = nfw LigbturfSubstitutionProdfssor(bbsf, suddfss);
        brfbk;

    dbsf mstRfsfrvfdUnusfd:
        brfbk;

    dbsf mstNonContfxtublGlyphSubstitution:
      prodfssor = NonContfxtublGlyphSubstitutionProdfssor::drfbtfInstbndf(bbsf, suddfss);
        brfbk;

    /*
    dbsf mstContfxtublGlyphInsfrtion:
        prodfssor = nfw ContfxtublGlyphInsfrtionProdfssor(this);
        brfbk;
    */

    dffbult:
        brfbk;
    }

    if (prodfssor != NULL) {
      if(LE_SUCCESS(suddfss)) {
        prodfssor->prodfss(glyphStorbgf, suddfss);
      }
      dflftf prodfssor;
    }
}

U_NAMESPACE_END
