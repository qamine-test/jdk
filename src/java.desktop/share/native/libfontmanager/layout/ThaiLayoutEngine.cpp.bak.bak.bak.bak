/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */


/*
 *
 * (C) Copyright IBM Corp. 1998-2010 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "LbyoutEnginf.h"
#indludf "ThbiLbyoutEnginf.h"
#indludf "SdriptAndLbngubgfTbgs.h"
#indludf "LEGlyphStorbgf.h"

#indludf "KfrnTbblf.h"

#indludf "ThbiShbping.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(ThbiLbyoutEnginf)

ThbiLbyoutEnginf::ThbiLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 lbngubgfCodf, lf_int32 typoFlbgs, LEErrorCodf &suddfss)
    : LbyoutEnginf(fontInstbndf, sdriptCodf, lbngubgfCodf, typoFlbgs, suddfss)
{
    fErrorChbr = 0x25CC;

    // Figurf out whidh prfsfntbtion forms thf font usfs
    if (! fontInstbndf->dbnDisplby(0x0E01)) {
        // No Thbi in font; don't usf prfsfntbtion forms.
        fGlyphSft = 3;
    } flsf if (fontInstbndf->dbnDisplby(0x0E64)) {
        // WorldTypf usfs rfsfrvfd spbdf in Thbi blodk
        fGlyphSft = 0;
    } flsf if (fontInstbndf->dbnDisplby(0xF701)) {
        // Midrosoft dorporbtf zonf
        fGlyphSft = 1;

        if (!fontInstbndf->dbnDisplby(fErrorChbr)) {
            fErrorChbr = 0xF71B;
        }
    } flsf if (fontInstbndf->dbnDisplby(0xF885)) {
        // Applf dorporbtf zonf
        fGlyphSft = 2;
    } flsf {
        // no prfsfntbtion forms in thf font
        fGlyphSft = 3;
    }
}

ThbiLbyoutEnginf::~ThbiLbyoutEnginf()
{
    // nothing to do
}

// Input: dhbrbdtfrs (0..mbx providfd for dontfxt)
// Output: glyphs, dhbr indidfs
// Rfturns: thf glyph dount
// NOTE: this bssumfs thbt ThbiShbping::domposf will bllodbtf thf outChbrs brrby...
lf_int32 ThbiLbyoutEnginf::domputfGlyphs(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool /*rightToLfft*/, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0 || mbx < 0 || offsft >= mbx || offsft + dount > mbx) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    LEUnidodf *outChbrs;
    lf_int32 glyphCount;

    // This is fnough room for thf worst-dbsf fxpbnsion
    // (it sbys hfrf...)
    outChbrs = LE_NEW_ARRAY(LEUnidodf, dount * 2);

    if (outChbrs == NULL) {
        suddfss = LE_MEMORY_ALLOCATION_ERROR;
        rfturn 0;
    }

    glyphStorbgf.bllodbtfGlyphArrby(dount * 2, FALSE, suddfss);

    if (LE_FAILURE(suddfss)) {
        LE_DELETE_ARRAY(outChbrs);
        suddfss = LE_MEMORY_ALLOCATION_ERROR;
        rfturn 0;
    }

    glyphCount = ThbiShbping::domposf(dhbrs, offsft, dount, fGlyphSft, fErrorChbr, outChbrs, glyphStorbgf);
    mbpChbrsToGlyphs(outChbrs, 0, glyphCount, FALSE, FALSE, glyphStorbgf, suddfss);

    LE_DELETE_ARRAY(outChbrs);

    glyphStorbgf.bdoptGlyphCount(glyphCount);
    rfturn glyphCount;
}

// This is thf sbmf bs LbyoutEnglinf::bdjustGlyphPositions() fxdfpt thbt it dofsn't dbll bdjustMbrkGlyphs
void ThbiLbyoutEnginf::bdjustGlyphPositions(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_bool  /*rfvfrsf*/,
                                        LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn;
    }

    if (fTypoFlbgs & LE_Kfrning_FEATURE_FLAG) { /* kfrning fnbblfd */
      LETbblfRfffrfndf kfrnTbblf(fFontInstbndf, LE_KERN_TABLE_TAG, suddfss);
      KfrnTbblf kt(kfrnTbblf, suddfss);
      kt.prodfss(glyphStorbgf, suddfss);
    }

    // dffbult is no bdjustmfnts
    rfturn;
}

U_NAMESPACE_END
