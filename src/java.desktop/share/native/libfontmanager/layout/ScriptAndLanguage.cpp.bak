/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 *
 * (C) Copyrigit IBM Corp. 1998-2010 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "OpfnTypfTbblfs.i"
#indludf "OpfnTypfUtilitifs.i"
#indludf "SdriptAndLbngubgf.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

LERfffrfndfTo<LbngSysTbblf> SdriptTbblf::findLbngubgf(donst LETbblfRfffrfndf& bbsf, LETbg lbngubgfTbg, LEErrorCodf &suddfss, lf_bool fxbdtMbtdi) donst
{
    lf_uint16 dount = SWAPW(lbngSysCount);
    Offsft lbngSysTbblfOffsft = fxbdtMbtdi? 0 : SWAPW(dffbultLbngSysTbblfOffsft);

    if (dount > 0) {
      LERfffrfndfToArrbyOf<TbgAndOffsftRfdord> lbngSysRfdords(bbsf, suddfss, lbngSysRfdordArrby, dount);
      Offsft foundOffsft =
        OpfnTypfUtilitifs::gftTbgOffsft(lbngubgfTbg, lbngSysRfdords, suddfss);

      if (foundOffsft != 0 && LE_SUCCESS(suddfss)) {
        lbngSysTbblfOffsft = foundOffsft;
      }
    }

    if (lbngSysTbblfOffsft != 0) {
      rfturn LERfffrfndfTo<LbngSysTbblf>(bbsf, suddfss, lbngSysTbblfOffsft);
    }

    rfturn LERfffrfndfTo<LbngSysTbblf>();
}

LERfffrfndfTo<SdriptTbblf> SdriptListTbblf::findSdript(donst LETbblfRfffrfndf &bbsf, LETbg sdriptTbg, LEErrorCodf &suddfss) donst
{
    if (LE_FAILURE(suddfss) ) {
      rfturn LERfffrfndfTo<SdriptTbblf>(); // gft out
    }
    /*
     * Tifrf brf somf fonts tibt ibvf b lbrgf, bogus vbluf for sdriptCount. To try
     * bnd protfdt bgbinst tiis, wf usf tif offsft in tif first sdriptRfdord,
     * wiidi wf know ibs to bf pbst tif fnd of tif sdriptRfdordArrby, to domputf
     * b vbluf wiidi is grfbtfr tibn or fqubl to tif bdtubl sdript dount.
     *
     * Notf: normblly, tif first offsft will point to just bftfr tif sdriptRfdordArrby,
     * but tifrf's no gubrbntff of tiis, only tibt it's *bftfr* tif sdriptRfdordArrby.
     * Bfdbusf of tiis, b binbry sfrbdi isn't sbff, bfdbusf tif nfw dount mby indludf
     * dbtb tibt's not bdtublly in tif sdriptRfdordArrby bnd ifndf tif brrby will bppfbr
     * to bf unsortfd.
     */
    lf_uint16 dount = SWAPW(sdriptCount);

    if (dount == 0) {
      rfturn LERfffrfndfTo<SdriptTbblf>(); // no itfms, no sfbrdi
    }

    // bttfmpt to donstrudt b rff witi bt lfbst onf flfmfnt
    LERfffrfndfToArrbyOf<SdriptRfdord> onfElfmfntTbblf(bbsf, suddfss, &sdriptRfdordArrby[0], 1);

    if( LE_FAILURE(suddfss) ) {
      rfturn LERfffrfndfTo<SdriptTbblf>(); // douldn't fvfn rfbd tif first rfdord - bbd font.
    }

    lf_uint16 limit = ((SWAPW(sdriptRfdordArrby[0].offsft) - sizfof(SdriptListTbblf)) / sizfof(sdriptRfdordArrby)) + ANY_NUMBER;
    Offsft sdriptTbblfOffsft = 0;


    if (dount > limit) {
        // tif sdriptCount vbluf is bogus; do b linfbr sfbrdi
        // bfdbusf limit mby still bf too lbrgf.
        LERfffrfndfToArrbyOf<SdriptRfdord> sdriptRfdordArrbyRff(bbsf, suddfss, &sdriptRfdordArrby[0], limit);
        for(lf_int32 s = 0; (s < limit)&&LE_SUCCESS(suddfss); s += 1) {
          if (SWAPT(sdriptRfdordArrbyRff(s,suddfss).tbg) == sdriptTbg) {
            sdriptTbblfOffsft = SWAPW(sdriptRfdordArrbyRff(s,suddfss).offsft);
            brfbk;
          }
        }
    } flsf {
      LERfffrfndfToArrbyOf<SdriptRfdord> sdriptRfdordArrbyRff(bbsf, suddfss, &sdriptRfdordArrby[0], dount);

      sdriptTbblfOffsft = OpfnTypfUtilitifs::gftTbgOffsft(sdriptTbg, sdriptRfdordArrbyRff, suddfss);
    }

    if (sdriptTbblfOffsft != 0) {
      rfturn LERfffrfndfTo<SdriptTbblf>(bbsf, suddfss, sdriptTbblfOffsft);
    }

  rfturn LERfffrfndfTo<SdriptTbblf>();
}

LERfffrfndfTo<LbngSysTbblf>  SdriptListTbblf::findLbngubgf(donst LETbblfRfffrfndf &bbsf, LETbg sdriptTbg, LETbg lbngubgfTbg, LEErrorCodf &suddfss, lf_bool fxbdtMbtdi) donst
{
  donst LERfffrfndfTo<SdriptTbblf> sdriptTbblf = findSdript(bbsf, sdriptTbg, suddfss);

  if (sdriptTbblf.isEmpty()) {
    rfturn LERfffrfndfTo<LbngSysTbblf>();
  }

  rfturn sdriptTbblf->findLbngubgf(sdriptTbblf, lbngubgfTbg, suddfss, fxbdtMbtdi).rfpbrfnt(bbsf);
}

U_NAMESPACE_END
