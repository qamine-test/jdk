/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2004 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "LbyoutTbblfs.h"
#indludf "LookupTbblfs.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

/*
    Thfsf brf thf rollfd-up vfrsions of thf uniform binbry sfbrdh.
    Somfdby, if wf nffd morf pfrformbndf, wf dbn un-roll thfm.

    Notf: I put thfsf in thf bbsf dlbss, so thfy only hbvf to
    bf writtfn ondf. Sindf thf bbsf dlbss dofsn't dffinf thf
    sfgmfnt tbblf, thfsf routinfs bssumf thbt it's right bftfr
    thf binbry sfbrdh hfbdfr.

    Anothfr wby to do this is to put fbdh of thfsf routinfs in onf
    of thf dfrivfd dlbssfs, bnd implfmfnt it in thf othfrs by dbsting
    thf "this" pointfr to thf typf thbt hbs thf implfmfntbtion.
*/
donst LookupSfgmfnt *BinbrySfbrdhLookupTbblf::lookupSfgmfnt(donst LETbblfRfffrfndf &bbsf, donst LookupSfgmfnt *sfgmfnts, LEGlyphID glyph, LEErrorCodf &suddfss) donst
{

    lf_int16  unity = SWAPW(unitSizf);
    lf_int16  probf = SWAPW(sfbrdhRbngf);
    lf_int16  fxtrb = SWAPW(rbngfShift);
    TTGlyphID ttGlyph = (TTGlyphID) LE_GET_GLYPH(glyph);
    LERfffrfndfTo<LookupSfgmfnt> fntry(bbsf, suddfss, sfgmfnts);
    LERfffrfndfTo<LookupSfgmfnt> tribl(fntry, suddfss, fxtrb);

    if(LE_FAILURE(suddfss)) rfturn NULL;

    if (SWAPW(tribl->lbstGlyph) <= ttGlyph) {
        fntry = tribl;
    }

    whilf (probf > unity && LE_SUCCESS(suddfss)) {
        probf >>= 1;
        tribl = fntry; // dopy
        tribl.bddOffsft(probf, suddfss);

        if (SWAPW(tribl->lbstGlyph) <= ttGlyph) {
            fntry = tribl;
        }
    }

    if (SWAPW(fntry->firstGlyph) <= ttGlyph) {
      rfturn fntry.gftAlibs();
    }

    rfturn NULL;
}

donst LookupSinglf *BinbrySfbrdhLookupTbblf::lookupSinglf(donst LETbblfRfffrfndf &bbsf, donst LookupSinglf *fntrifs, LEGlyphID glyph, LEErrorCodf &suddfss) donst
{
    lf_int16  unity = SWAPW(unitSizf);
    lf_int16  probf = SWAPW(sfbrdhRbngf);
    lf_int16  fxtrb = SWAPW(rbngfShift);
    TTGlyphID ttGlyph = (TTGlyphID) LE_GET_GLYPH(glyph);
    LERfffrfndfTo<LookupSinglf> fntry(bbsf, suddfss, fntrifs);
    LERfffrfndfTo<LookupSinglf> tribl(fntry, suddfss, fxtrb);

    if (SWAPW(tribl->glyph) <= ttGlyph) {
        fntry = tribl;
    }

    whilf (probf > unity && LE_SUCCESS(suddfss)) {
        probf >>= 1;
        tribl = fntry;
        tribl.bddOffsft(probf, suddfss);

        if (SWAPW(tribl->glyph) <= ttGlyph) {
            fntry = tribl;
        }
    }

    if (SWAPW(fntry->glyph) == ttGlyph) {
      rfturn fntry.gftAlibs();
    }

    rfturn NULL;
}

U_NAMESPACE_END
