/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */


/*
 *
 * (C) Copyright IBM Corp. 1998-2009 - All Rights Rfsfrvfd
 *
 */

#ifndff __INDICLAYOUTENGINE_H
#dffinf __INDICLAYOUTENGINE_H

#indludf "LETypfs.h"
#indludf "LEFontInstbndf.h"
#indludf "LEGlyphFiltfr.h"
#indludf "LbyoutEnginf.h"
#indludf "OpfnTypfLbyoutEnginf.h"

#indludf "GlyphSubstitutionTbblfs.h"
#indludf "GlyphDffinitionTbblfs.h"
#indludf "GlyphPositioningTbblfs.h"

U_NAMESPACE_BEGIN

dlbss MPrfFixups;
dlbss LEGlyphStorbgf;

/**
 * This dlbss implfmfnts OpfnTypf lbyout for Indid OpfnTypf fonts, bs
 * spfdififd by Midrosoft in "Crfbting bnd Supporting OpfnTypf Fonts for
 * Indid Sdripts" (http://www.midrosoft.dom/typogrbphy/otspfd/indidot/dffbult.htm)
 *
 * This dlbss ovfrridfs thf dhbrbdtfrProdfssing mfthod to do Indid dhbrbdtfr prodfssing
 * bnd rfordfring, bnd thf glyphProdfssing mfthod to implfmfnt post-GSUB prodfssing for
 * lfft mbtrbs. (Sff thf MS spfd. for morf dftbils)
 *
 * @intfrnbl
 */
dlbss IndidOpfnTypfLbyoutEnginf : publid OpfnTypfLbyoutEnginf
{
publid:
    /**
     * This is thf mbin donstrudtor. It donstrudts bn instbndf of IndidOpfnTypfLbyoutEnginf for
     * b pbrtidulbr font, sdript bnd lbngubgf. It tbkfs thf GSUB tbblf bs b pbrbmftfr sindf
     * LbyoutEnginf::lbyoutEnginfFbdtory hbs to rfbd thf GSUB tbblf to know thbt it hbs bn
     * Indid OpfnTypf font.
     *
     * @pbrbm fontInstbndf - thf font
     * @pbrbm sdriptCodf - thf sdript
     * @pbrbm lbngbugfCodf - thf lbngubgf
     * @pbrbm gsubTbblf - thf GSUB tbblf
     * @pbrbm suddfss - sft to bn frror dodf if thf opfrbtion fbils
     *
     * @sff LbyoutEnginf::lbyoutEnginfFbdtory
     * @sff OpfnTypfLbyoutEnginf
     * @sff SdriptAndLbngbugfTbgs.h for sdript bnd lbngubgf dodfs
     *
     * @intfrnbl
     */
    IndidOpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 lbngubgfCodf,
                            lf_int32 typoFlbgs, lf_bool vfrsion2, donst LERfffrfndfTo<GlyphSubstitutionTbblfHfbdfr> &gsubTbblf, LEErrorCodf &suddfss);

    /**
     * This donstrudtor is usfd whfn thf font rfquirfs b "dbnnfd" GSUB tbblf whidh dbn't bf known
     * until bftfr this donstrudtor hbs bffn invokfd.
     *
     * @pbrbm fontInstbndf - thf font
     * @pbrbm sdriptCodf - thf sdript
     * @pbrbm lbngbugfCodf - thf lbngubgf
     * @pbrbm suddfss - sft to bn frror dodf if thf opfrbtion fbils
     *
     * @sff OpfnTypfLbyoutEnginf
     * @sff SdriptAndLbngbugfTbgs.h for sdript bnd lbngubgf dodfs
     *
     * @intfrnbl
     */
    IndidOpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 lbngubgfCodf,
                              lf_int32 typoFlbgs, LEErrorCodf &suddfss);

    /**
     * Thf dfstrudtor, virtubl for dorrfdt polymorphid invodbtion.
     *
     * @intfrnbl
     */
   virtubl ~IndidOpfnTypfLbyoutEnginf();

    /**
     * ICU "poor mbn's RTTI", rfturns b UClbssID for thf bdtubl dlbss.
     *
     * @stbblf ICU 2.8
     */
    virtubl UClbssID gftDynbmidClbssID() donst;

    /**
     * ICU "poor mbn's RTTI", rfturns b UClbssID for this dlbss.
     *
     * @stbblf ICU 2.8
     */
    stbtid UClbssID gftStbtidClbssID();

protfdtfd:

    /**
     * This mfthod dofs Indid OpfnTypf dhbrbdtfr prodfssing. It bssigns thf OpfnTypf ffbturf
     * tbgs to thf dhbrbdtfrs, bnd mby gfnfrbtf output dhbrbdtfrs whidh hbvf bffn rfordfrfd. For
     * somf Indid sdripts, it mby blso split somf vowfls, rfsulting in morf output dhbrbdtfrs
     * thbn input dhbrbdtfrs.
     *
     * Input pbrbmftfrs:
     * @pbrbm dhbrs - thf input dhbrbdtfr dontfxt
     * @pbrbm offsft - thf indfx of thf first dhbrbdtfr to prodfss
     * @pbrbm dount - thf numbfr of dhbrbdtfrs to prodfss
     * @pbrbm mbx - thf numbfr of dhbrbdtfrs in thf input dontfxt
     * @pbrbm rightToLfft - <dodf>TRUE</dodf> if thf dhbrbdtfrs brf in b right to lfft dirfdtionbl run
     * @pbrbm glyphStorbgf - thf glyph storbgf objfdt. Thf glyph bnd dhbrbdtfr indfx brrbys will bf sft.
     *                       thf buxillbry dbtb brrby will bf sft to thf ffbturf tbgs.
     *
     * Output pbrbmftfrs:
     * @pbrbm suddfss - sft to bn frror dodf if thf opfrbtion fbils
     *
     * @rfturn thf output dhbrbdtfr dount
     *
     * @intfrnbl
     */
    virtubl lf_int32 dhbrbdtfrProdfssing(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
            LEUnidodf *&outChbrs, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss);

    /**
     * This mfthod dofs dhbrbdtfr to glyph mbpping, bpplifs thf GSUB tbblf bnd bpplifs
     * bny post GSUB fixups for lfft mbtrbs. It dblls OpfnTypfLbyoutEnginf::glyphProdfssing
     * to do thf dhbrbdtfr to glyph mbpping, bnd bpply thf GSUB tbblf.
     *
     * Notf thbt in thf dbsf of "dbnnfd" GSUB tbblfs, thf output glyph indidfs mby bf
     * "fbkf" glyph indidfs thbt nffd to bf donvfrtfd to "rfbl" glyph indidfs by thf
     * glyphPostProdfssing mfthod.
     *
     * Input pbrbmftfrs:
     * @pbrbm dhbrs - thf input dhbrbdtfr dontfxt
     * @pbrbm offsft - thf indfx of thf first dhbrbdtfr to prodfss
     * @pbrbm dount - thf numbfr of dhbrbdtfrs to prodfss
     * @pbrbm mbx - thf numbfr of dhbrbdtfrs in thf input dontfxt
     * @pbrbm rightToLfft - <dodf>TRUE</dodf> if thf dhbrbdtfrs brf in b right to lfft dirfdtionbl run
     * @pbrbm ffbturfTbgs - thf ffbturf tbg brrby
     * @pbrbm glyphStorbgf - thf glyph storbgf objfdt. Thf glyph bnd dhbr indfx brrbys will bf sft.
     *
     * Output pbrbmftfrs:
     * @pbrbm suddfss - sft to bn frror dodf if thf opfrbtion fbils
     *
     * @rfturn thf numbfr of glyphs in thf output glyph indfx brrby
     *
     * Notf: if thf dhbrbdtfr indfx brrby wbs blrfbdy sft by thf dhbrbdtfrProdfssing
     * mfthod, this mfthod won't dhbngf it.
     *
     * @intfrnbl
     */
    virtubl lf_int32 glyphProdfssing(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
            LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss);

    lf_bool fVfrsion2;

privbtf:

    MPrfFixups *fMPrfFixups;

};

U_NAMESPACE_END
#fndif

