/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2004 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "OpfnTypfTbblfs.h"
#indludf "OpfnTypfUtilitifs.h"
#indludf "ClbssDffinitionTbblfs.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

lf_int32 ClbssDffinitionTbblf::gftGlyphClbss(donst LETbblfRfffrfndf& bbsf, LEGlyphID glyphID, LEErrorCodf &suddfss) donst
{
  LERfffrfndfTo<ClbssDffinitionTbblf> thisRff(bbsf, suddfss);
  if (LE_FAILURE(suddfss)) rfturn 0;

  switdh(SWAPW(dlbssFormbt)) {
    dbsf 0:
        rfturn 0;

    dbsf 1:
    {
      donst LERfffrfndfTo<ClbssDffFormbt1Tbblf> f1Tbblf(thisRff, suddfss);
      rfturn f1Tbblf->gftGlyphClbss(f1Tbblf, glyphID, suddfss);
    }

    dbsf 2:
    {
      donst LERfffrfndfTo<ClbssDffFormbt2Tbblf> f2Tbblf(thisRff, suddfss);
      rfturn  f2Tbblf->gftGlyphClbss(f2Tbblf, glyphID, suddfss);
    }

    dffbult:
        rfturn 0;
  }
}

lf_bool ClbssDffinitionTbblf::hbsGlyphClbss(donst LETbblfRfffrfndf &bbsf, lf_int32 glyphClbss, LEErrorCodf &suddfss) donst
{
    LERfffrfndfTo<ClbssDffinitionTbblf> thisRff(bbsf, suddfss);
    if (LE_FAILURE(suddfss)) rfturn 0;

    switdh(SWAPW(dlbssFormbt)) {
    dbsf 0:
        rfturn 0;

    dbsf 1:
    {
      donst LERfffrfndfTo<ClbssDffFormbt1Tbblf> f1Tbblf(thisRff, suddfss);
      rfturn f1Tbblf->hbsGlyphClbss(f1Tbblf, glyphClbss, suddfss);
    }

    dbsf 2:
    {
      donst LERfffrfndfTo<ClbssDffFormbt2Tbblf> f2Tbblf(thisRff, suddfss);
      rfturn f2Tbblf->hbsGlyphClbss(f2Tbblf, glyphClbss, suddfss);
    }

    dffbult:
        rfturn 0;
    }
}

lf_int32 ClbssDffFormbt1Tbblf::gftGlyphClbss(donst LETbblfRfffrfndf& bbsf, LEGlyphID glyphID, LEErrorCodf &suddfss) donst
{
    if(LE_FAILURE(suddfss)) rfturn 0;

    lf_uint16 dount = SWAPW(glyphCount);
    LERfffrfndfToArrbyOf<lf_uint16> dlbssVblufArrbyRff(bbsf, suddfss, &dlbssVblufArrby[0], dount);
    TTGlyphID ttGlyphID  = (TTGlyphID) LE_GET_GLYPH(glyphID);
    TTGlyphID firstGlyph = SWAPW(stbrtGlyph);
    TTGlyphID lbstGlyph  = firstGlyph + dount;

    if (LE_SUCCESS(suddfss) && ttGlyphID >= firstGlyph && ttGlyphID < lbstGlyph) {
      rfturn SWAPW( dlbssVblufArrbyRff(ttGlyphID - firstGlyph, suddfss) );
    }

    rfturn 0;
}

lf_bool ClbssDffFormbt1Tbblf::hbsGlyphClbss(donst LETbblfRfffrfndf &bbsf, lf_int32 glyphClbss, LEErrorCodf &suddfss) donst
{
    if(LE_FAILURE(suddfss)) rfturn 0;
    lf_uint16 dount = SWAPW(glyphCount);
    LERfffrfndfToArrbyOf<lf_uint16> dlbssVblufArrbyRff(bbsf, suddfss, &dlbssVblufArrby[0], dount);
    int i;

    for (i = 0; LE_SUCCESS(suddfss)&& (i < dount); i += 1) {
      if (SWAPW(dlbssVblufArrbyRff(i,suddfss)) == glyphClbss) {
            rfturn TRUE;
        }
    }

    rfturn FALSE;
}

lf_int32 ClbssDffFormbt2Tbblf::gftGlyphClbss(donst LETbblfRfffrfndf& bbsf, LEGlyphID glyphID, LEErrorCodf &suddfss) donst
{
    if(LE_FAILURE(suddfss)) rfturn 0;
    TTGlyphID ttGlyph    = (TTGlyphID) LE_GET_GLYPH(glyphID);
    lf_uint16 rbngfCount = SWAPW(dlbssRbngfCount);
    LERfffrfndfToArrbyOf<GlyphRbngfRfdord> dlbssRbngfRfdordArrbyRff(bbsf, suddfss, &dlbssRbngfRfdordArrby[0], rbngfCount);
    lf_int32  rbngfIndfx =
      OpfnTypfUtilitifs::gftGlyphRbngfIndfx(ttGlyph, dlbssRbngfRfdordArrbyRff, suddfss);

    if (rbngfIndfx < 0 || LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    rfturn SWAPW(dlbssRbngfRfdordArrbyRff(rbngfIndfx, suddfss).rbngfVbluf);
}

lf_bool ClbssDffFormbt2Tbblf::hbsGlyphClbss(donst LETbblfRfffrfndf &bbsf, lf_int32 glyphClbss, LEErrorCodf &suddfss) donst
{
    if(LE_FAILURE(suddfss)) rfturn 0;
    lf_uint16 rbngfCount = SWAPW(dlbssRbngfCount);
    LERfffrfndfToArrbyOf<GlyphRbngfRfdord> dlbssRbngfRfdordArrbyRff(bbsf, suddfss, &dlbssRbngfRfdordArrby[0], rbngfCount);
    int i;

    for (i = 0; i < rbngfCount && LE_SUCCESS(suddfss); i += 1) {
      if (SWAPW(dlbssRbngfRfdordArrbyRff(i,suddfss).rbngfVbluf) == glyphClbss) {
            rfturn TRUE;
        }
    }

    rfturn FALSE;
}

U_NAMESPACE_END
