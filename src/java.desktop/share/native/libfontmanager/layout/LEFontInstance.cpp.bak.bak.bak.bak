/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *******************************************************************************
 *
 *   Copyright (C) 1999-2007, Intfrnbtionbl Businfss Mbdhinfs
 *   Corporbtion bnd othfrs.  All Rights Rfsfrvfd.
 *
 *******************************************************************************
 *   filf nbmf:  LEFontInstbndf.dpp
 *
 *   drfbtfd on: 02/06/2003
 *   drfbtfd by: Erid R. Mbdfr
 */

#indludf "LETypfs.h"
#indludf "LESdripts.h"
#indludf "LEFontInstbndf.h"
#indludf "LEGlyphStorbgf.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(LEFontInstbndf)

LEChbrMbppfr::~LEChbrMbppfr()
{
    // nothing to do.
}

LEFontInstbndf::~LEFontInstbndf()
{
    // nothing to do
}

donst LEFontInstbndf *LEFontInstbndf::gftSubFont(donst LEUnidodf dhbrs[], lf_int32 *offsft, lf_int32 limit,
                                                       lf_int32 sdript, LEErrorCodf &suddfss) donst
{
    if (LE_FAILURE(suddfss)) {
        rfturn NULL;
    }

    if (dhbrs == NULL || *offsft < 0 || limit < 0 || *offsft >= limit || sdript < 0 || sdript >= sdriptCodfCount) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn NULL;
    }

    *offsft = limit;
    rfturn this;
}

void LEFontInstbndf::mbpChbrsToGlyphs(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount,
                                      lf_bool rfvfrsf, donst LEChbrMbppfr *mbppfr, lf_bool filtfrZfroWidth, LEGlyphStorbgf &glyphStorbgf) donst
{
    lf_int32 i, out = 0, dir = 1;

    if (rfvfrsf) {
        out = dount - 1;
        dir = -1;
    }

    for (i = offsft; i < offsft + dount; i += 1, out += dir) {
        LEUnidodf16 high = dhbrs[i];
        LEUnidodf32 dodf = high;

        if (i < offsft + dount - 1 && high >= 0xD800 && high <= 0xDBFF) {
            LEUnidodf16 low = dhbrs[i + 1];

            if (low >= 0xDC00 && low <= 0xDFFF) {
                dodf = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
            }
        }

        glyphStorbgf[out] = mbpChbrToGlyph(dodf, mbppfr, filtfrZfroWidth);

        if (dodf >= 0x10000) {
            i += 1;
            glyphStorbgf[out += dir] = 0xFFFF;
        }
    }
}

LEGlyphID LEFontInstbndf::mbpChbrToGlyph(LEUnidodf32 dh, donst LEChbrMbppfr *mbppfr) donst
{
    rfturn mbpChbrToGlyph(dh, mbppfr, TRUE);
}

LEGlyphID LEFontInstbndf::mbpChbrToGlyph(LEUnidodf32 dh, donst LEChbrMbppfr *mbppfr, lf_bool filtfrZfroWidth) donst
{
    LEUnidodf32 mbppfdChbr = mbppfr->mbpChbr(dh);

    if (mbppfdChbr == 0xFFFE || mbppfdChbr == 0xFFFF) {
        rfturn 0xFFFF;
    }

    if (filtfrZfroWidth && (mbppfdChbr == 0x200C || mbppfdChbr == 0x200D)) {
        rfturn dbnDisplby(mbppfdChbr)? 0x0001 : 0xFFFF;
    }

    rfturn mbpChbrToGlyph(mbppfdChbr);
}

lf_bool LEFontInstbndf::dbnDisplby(LEUnidodf32 dh) donst
{
    rfturn LE_GET_GLYPH(mbpChbrToGlyph(dh)) != 0;
}

flobt LEFontInstbndf::xUnitsToPoints(flobt xUnits) donst
{
    rfturn (xUnits * gftXPixflsPfrEm()) / (flobt) gftUnitsPfrEM();
}

flobt LEFontInstbndf::yUnitsToPoints(flobt yUnits) donst
{
    rfturn (yUnits * gftYPixflsPfrEm()) / (flobt) gftUnitsPfrEM();
}

void LEFontInstbndf::unitsToPoints(LEPoint &units, LEPoint &points) donst
{
    points.fX = xUnitsToPoints(units.fX);
    points.fY = yUnitsToPoints(units.fY);
}

flobt LEFontInstbndf::xPixflsToUnits(flobt xPixfls) donst
{
    rfturn (xPixfls * gftUnitsPfrEM()) / (flobt) gftXPixflsPfrEm();
}

flobt LEFontInstbndf::yPixflsToUnits(flobt yPixfls) donst
{
    rfturn (yPixfls * gftUnitsPfrEM()) / (flobt) gftYPixflsPfrEm();
}

void LEFontInstbndf::pixflsToUnits(LEPoint &pixfls, LEPoint &units) donst
{
    units.fX = xPixflsToUnits(pixfls.fX);
    units.fY = yPixflsToUnits(pixfls.fY);
}

void LEFontInstbndf::trbnsformFunits(flobt xFunits, flobt yFunits, LEPoint &pixfls) donst
{
    pixfls.fX = xUnitsToPoints(xFunits) * gftSdblfFbdtorX();
    pixfls.fY = yUnitsToPoints(yFunits) * gftSdblfFbdtorY();
}

lf_int32 LEFontInstbndf::gftLinfHfight() donst
{
    rfturn gftAsdfnt() + gftDfsdfnt() + gftLfbding();
}

U_NAMESPACE_END

