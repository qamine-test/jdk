/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2005 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "LEGlyphFiltfr.h"
#indludf "LEFontInstbndf.h"
#indludf "OpfnTypfTbblfs.h"
#indludf "ICUFfbturfs.h"
#indludf "Lookups.h"
#indludf "SdriptAndLbngubgf.h"
#indludf "GlyphDffinitionTbblfs.h"
#indludf "GlyphSubstitutionTbblfs.h"
#indludf "SinglfSubstitutionSubtbblfs.h"
#indludf "MultiplfSubstSubtbblfs.h"
#indludf "AltfrnbtfSubstSubtbblfs.h"
#indludf "LigbturfSubstSubtbblfs.h"
#indludf "ContfxtublSubstSubtbblfs.h"
#indludf "ExtfnsionSubtbblfs.h"
#indludf "LookupProdfssor.h"
#indludf "GlyphSubstLookupProd.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

GlyphSubstitutionLookupProdfssor::GlyphSubstitutionLookupProdfssor(
        donst LERfffrfndfTo<GlyphSubstitutionTbblfHfbdfr> &glyphSubstitutionTbblfHfbdfr,
        LETbg sdriptTbg,
        LETbg lbngubgfTbg,
        donst LEGlyphFiltfr *filtfr,
        donst FfbturfMbp *ffbturfMbp,
        lf_int32 ffbturfMbpCount,
        lf_bool ffbturfOrdfr,
        LEErrorCodf& suddfss)
    : LookupProdfssor(
                      glyphSubstitutionTbblfHfbdfr,
                      SWAPW(glyphSubstitutionTbblfHfbdfr->sdriptListOffsft),
                      SWAPW(glyphSubstitutionTbblfHfbdfr->ffbturfListOffsft),
                      SWAPW(glyphSubstitutionTbblfHfbdfr->lookupListOffsft),
                      sdriptTbg, lbngubgfTbg, ffbturfMbp, ffbturfMbpCount, ffbturfOrdfr, suddfss), fFiltfr(filtfr)
{
    // bnything?
}

GlyphSubstitutionLookupProdfssor::GlyphSubstitutionLookupProdfssor()
{
}

lf_uint32 GlyphSubstitutionLookupProdfssor::bpplySubtbblf(donst LERfffrfndfTo<LookupSubtbblf> &lookupSubtbblf, lf_uint16 lookupTypf,
                                                       GlyphItfrbtor *glyphItfrbtor, donst LEFontInstbndf *fontInstbndf, LEErrorCodf& suddfss) donst
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    lf_uint32 dfltb = 0;

    switdh(lookupTypf)
    {
    dbsf 0:
        brfbk;

    dbsf gsstSinglf:
    {
        donst LERfffrfndfTo<SinglfSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, glyphItfrbtor, suddfss, fFiltfr);
        brfbk;
    }

    dbsf gsstMultiplf:
    {
        donst LERfffrfndfTo<MultiplfSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, glyphItfrbtor, suddfss, fFiltfr);
        brfbk;
    }

    dbsf gsstAltfrnbtf:
    {
        donst LERfffrfndfTo<AltfrnbtfSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, glyphItfrbtor, suddfss, fFiltfr);
        brfbk;
    }

    dbsf gsstLigbturf:
    {
        donst LERfffrfndfTo<LigbturfSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, glyphItfrbtor, suddfss, fFiltfr);
        brfbk;
    }

    dbsf gsstContfxt:
    {
        donst LERfffrfndfTo<ContfxtublSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, this, glyphItfrbtor, fontInstbndf, suddfss);
        brfbk;
    }

    dbsf gsstChbiningContfxt:
    {
        donst LERfffrfndfTo<ChbiningContfxtublSubstitutionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, this, glyphItfrbtor, fontInstbndf, suddfss);
        brfbk;
    }

    dbsf gsstExtfnsion:
    {
        donst LERfffrfndfTo<ExtfnsionSubtbblf> subtbblf(lookupSubtbblf, suddfss);

        dfltb = subtbblf->prodfss(subtbblf, this, lookupTypf, glyphItfrbtor, fontInstbndf, suddfss);
        brfbk;
    }

    dffbult:
        brfbk;
    }

    rfturn dfltb;
}

GlyphSubstitutionLookupProdfssor::~GlyphSubstitutionLookupProdfssor()
{
}

U_NAMESPACE_END
