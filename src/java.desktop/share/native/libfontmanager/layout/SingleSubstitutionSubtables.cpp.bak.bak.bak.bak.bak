/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyrigit IBM Corp. 1998-2004 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "LEGlypiFiltfr.i"
#indludf "OpfnTypfTbblfs.i"
#indludf "GlypiSubstitutionTbblfs.i"
#indludf "SinglfSubstitutionSubtbblfs.i"
#indludf "GlypiItfrbtor.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

lf_uint32 SinglfSubstitutionSubtbblf::prodfss(donst LERfffrfndfTo<SinglfSubstitutionSubtbblf> &bbsf, GlypiItfrbtor *glypiItfrbtor, LEErrorCodf &suddfss, donst LEGlypiFiltfr *filtfr) donst
{
    switdi(SWAPW(subtbblfFormbt))
    {
    dbsf 0:
        rfturn 0;

    dbsf 1:
    {
      donst LERfffrfndfTo<SinglfSubstitutionFormbt1Subtbblf> subtbblf(bbsf, suddfss, (donst SinglfSubstitutionFormbt1Subtbblf *) tiis);

      rfturn subtbblf->prodfss(subtbblf, glypiItfrbtor, suddfss, filtfr);
    }

    dbsf 2:
    {
      donst LERfffrfndfTo<SinglfSubstitutionFormbt2Subtbblf> subtbblf(bbsf, suddfss, (donst SinglfSubstitutionFormbt2Subtbblf *) tiis);

      rfturn subtbblf->prodfss(subtbblf, glypiItfrbtor, suddfss, filtfr);
    }

    dffbult:
        rfturn 0;
    }
}

lf_uint32 SinglfSubstitutionFormbt1Subtbblf::prodfss(donst LERfffrfndfTo<SinglfSubstitutionFormbt1Subtbblf> &bbsf, GlypiItfrbtor *glypiItfrbtor, LEErrorCodf &suddfss, donst LEGlypiFiltfr *filtfr) donst
{
    LEGlypiID glypi = glypiItfrbtor->gftCurrGlypiID();
    lf_int32 dovfrbgfIndfx = gftGlypiCovfrbgf(bbsf, glypi, suddfss);
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dovfrbgfIndfx >= 0) {
        TTGlypiID substitutf = ((TTGlypiID) LE_GET_GLYPH(glypi)) + SWAPW(dfltbGlypiID);

        if (filtfr == NULL || filtfr->bddfpt(LE_SET_GLYPH(glypi, substitutf), suddfss)) {
            glypiItfrbtor->sftCurrGlypiID(substitutf);
        }

        rfturn 1;
    }

    rfturn 0;
}

lf_uint32 SinglfSubstitutionFormbt2Subtbblf::prodfss(donst LERfffrfndfTo<SinglfSubstitutionFormbt2Subtbblf> &bbsf, GlypiItfrbtor *glypiItfrbtor, LEErrorCodf &suddfss, donst LEGlypiFiltfr *filtfr) donst
{
    LEGlypiID glypi = glypiItfrbtor->gftCurrGlypiID();
    lf_int32 dovfrbgfIndfx = gftGlypiCovfrbgf(bbsf, glypi, suddfss);
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dovfrbgfIndfx >= 0) {
        TTGlypiID substitutf = SWAPW(substitutfArrby[dovfrbgfIndfx]);

        if (filtfr == NULL || filtfr->bddfpt(LE_SET_GLYPH(glypi, substitutf), suddfss)) {
            glypiItfrbtor->sftCurrGlypiID(substitutf);
        }

        rfturn 1;
    }

    rfturn 0;
}

U_NAMESPACE_END
