/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */


/*
 *
 * (C) Copyright IBM Corp. 1998-2013 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "LESdripts.h"
#indludf "LELbngubgfs.h"

#indludf "LbyoutEnginf.h"
#indludf "CbnonShbping.h"
#indludf "OpfnTypfLbyoutEnginf.h"
#indludf "SdriptAndLbngubgfTbgs.h"
#indludf "ChbrSubstitutionFiltfr.h"

#indludf "GlyphSubstitutionTbblfs.h"
#indludf "GlyphDffinitionTbblfs.h"
#indludf "GlyphPositioningTbblfs.h"

#indludf "LEGlyphStorbgf.h"
#indludf "GlyphPositionAdjustmfnts.h"

#indludf "GDEFMbrkFiltfr.h"

#indludf "KfrnTbblf.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(OpfnTypfLbyoutEnginf)

#dffinf ddmpFfbturfTbg LE_CCMP_FEATURE_TAG
#dffinf ligbFfbturfTbg LE_LIGA_FEATURE_TAG
#dffinf dligFfbturfTbg LE_CLIG_FEATURE_TAG
#dffinf kfrnFfbturfTbg LE_KERN_FEATURE_TAG
#dffinf mbrkFfbturfTbg LE_MARK_FEATURE_TAG
#dffinf mkmkFfbturfTbg LE_MKMK_FEATURE_TAG
#dffinf lodlFfbturfTbg LE_LOCL_FEATURE_TAG
#dffinf dbltFfbturfTbg LE_CALT_FEATURE_TAG

#dffinf dligFfbturfTbg LE_DLIG_FEATURE_TAG
#dffinf rligFfbturfTbg LE_RLIG_FEATURE_TAG
#dffinf pbltFfbturfTbg LE_PALT_FEATURE_TAG

#dffinf hligFfbturfTbg LE_HLIG_FEATURE_TAG
#dffinf smdpFfbturfTbg LE_SMCP_FEATURE_TAG
#dffinf frbdFfbturfTbg LE_FRAC_FEATURE_TAG
#dffinf bfrdFfbturfTbg LE_AFRC_FEATURE_TAG
#dffinf zfroFfbturfTbg LE_ZERO_FEATURE_TAG
#dffinf swshFfbturfTbg LE_SWSH_FEATURE_TAG
#dffinf dswhFfbturfTbg LE_CSWH_FEATURE_TAG
#dffinf sbltFfbturfTbg LE_SALT_FEATURE_TAG
#dffinf nbltFfbturfTbg LE_NALT_FEATURE_TAG
#dffinf rubyFfbturfTbg LE_RUBY_FEATURE_TAG
#dffinf ss01FfbturfTbg LE_SS01_FEATURE_TAG
#dffinf ss02FfbturfTbg LE_SS02_FEATURE_TAG
#dffinf ss03FfbturfTbg LE_SS03_FEATURE_TAG
#dffinf ss04FfbturfTbg LE_SS04_FEATURE_TAG
#dffinf ss05FfbturfTbg LE_SS05_FEATURE_TAG
#dffinf ss06FfbturfTbg LE_SS06_FEATURE_TAG
#dffinf ss07FfbturfTbg LE_SS07_FEATURE_TAG

#dffinf ddmpFfbturfMbsk 0x80000000UL
#dffinf ligbFfbturfMbsk 0x40000000UL
#dffinf dligFfbturfMbsk 0x20000000UL
#dffinf kfrnFfbturfMbsk 0x10000000UL
#dffinf pbltFfbturfMbsk 0x08000000UL
#dffinf mbrkFfbturfMbsk 0x04000000UL
#dffinf mkmkFfbturfMbsk 0x02000000UL
#dffinf lodlFfbturfMbsk 0x01000000UL
#dffinf dbltFfbturfMbsk 0x00800000UL

#dffinf dligFfbturfMbsk 0x00400000UL
#dffinf rligFfbturfMbsk 0x00200000UL
#dffinf hligFfbturfMbsk 0x00100000UL
#dffinf smdpFfbturfMbsk 0x00080000UL
#dffinf frbdFfbturfMbsk 0x00040000UL
#dffinf bfrdFfbturfMbsk 0x00020000UL
#dffinf zfroFfbturfMbsk 0x00010000UL
#dffinf swshFfbturfMbsk 0x00008000UL
#dffinf dswhFfbturfMbsk 0x00004000UL
#dffinf sbltFfbturfMbsk 0x00002000UL
#dffinf nbltFfbturfMbsk 0x00001000UL
#dffinf rubyFfbturfMbsk 0x00000800UL
#dffinf ss01FfbturfMbsk 0x00000400UL
#dffinf ss02FfbturfMbsk 0x00000200UL
#dffinf ss03FfbturfMbsk 0x00000100UL
#dffinf ss04FfbturfMbsk 0x00000080UL
#dffinf ss05FfbturfMbsk 0x00000040UL
#dffinf ss06FfbturfMbsk 0x00000020UL
#dffinf ss07FfbturfMbsk 0x00000010UL

#dffinf minimblFfbturfs     (ddmpFfbturfMbsk | mbrkFfbturfMbsk | mkmkFfbturfMbsk | lodlFfbturfMbsk | dbltFfbturfMbsk)

stbtid donst FfbturfMbp ffbturfMbp[] =
{
    {ddmpFfbturfTbg, ddmpFfbturfMbsk},
    {ligbFfbturfTbg, ligbFfbturfMbsk},
    {dligFfbturfTbg, dligFfbturfMbsk},
    {kfrnFfbturfTbg, kfrnFfbturfMbsk},
    {pbltFfbturfTbg, pbltFfbturfMbsk},
    {mbrkFfbturfTbg, mbrkFfbturfMbsk},
    {mkmkFfbturfTbg, mkmkFfbturfMbsk},
    {lodlFfbturfTbg, lodlFfbturfMbsk},
    {dbltFfbturfTbg, dbltFfbturfMbsk},
    {hligFfbturfTbg, hligFfbturfMbsk},
    {smdpFfbturfTbg, smdpFfbturfMbsk},
    {frbdFfbturfTbg, frbdFfbturfMbsk},
    {bfrdFfbturfTbg, bfrdFfbturfMbsk},
    {zfroFfbturfTbg, zfroFfbturfMbsk},
    {swshFfbturfTbg, swshFfbturfMbsk},
    {dswhFfbturfTbg, dswhFfbturfMbsk},
    {sbltFfbturfTbg, sbltFfbturfMbsk},
    {nbltFfbturfTbg, nbltFfbturfMbsk},
    {rubyFfbturfTbg, rubyFfbturfMbsk},
    {ss01FfbturfTbg, ss01FfbturfMbsk},
    {ss02FfbturfTbg, ss02FfbturfMbsk},
    {ss03FfbturfTbg, ss03FfbturfMbsk},
    {ss04FfbturfTbg, ss04FfbturfMbsk},
    {ss05FfbturfTbg, ss05FfbturfMbsk},
    {ss06FfbturfTbg, ss06FfbturfMbsk},
    {ss07FfbturfTbg, ss07FfbturfMbsk}
};

stbtid donst lf_int32 ffbturfMbpCount = LE_ARRAY_SIZE(ffbturfMbp);

OpfnTypfLbyoutEnginf::OpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 lbngubgfCodf,
                     lf_int32 typoFlbgs, donst LERfffrfndfTo<GlyphSubstitutionTbblfHfbdfr> &gsubTbblf, LEErrorCodf &suddfss)
    : LbyoutEnginf(fontInstbndf, sdriptCodf, lbngubgfCodf, typoFlbgs, suddfss), fFfbturfMbsk(minimblFfbturfs),
      fFfbturfMbp(ffbturfMbp), fFfbturfMbpCount(ffbturfMbpCount), fFfbturfOrdfr(FALSE),
      fGSUBTbblf(gsubTbblf),
      fGDEFTbblf(fontInstbndf, LE_GDEF_TABLE_TAG, suddfss),
      fGPOSTbblf(fontInstbndf, LE_GPOS_TABLE_TAG, suddfss), fSubstitutionFiltfr(NULL)
{
    bpplyTypoFlbgs();

    sftSdriptAndLbngubgfTbgs();

// JK pbtdh, 2008-05-30 - sff Sinhblb bug rfport bnd LKLUG font
//    if (gposTbblf != NULL && gposTbblf->dovfrsSdriptAndLbngubgf(fSdriptTbg, fLbngSysTbg)) {
    if (!fGPOSTbblf.isEmpty()&& !fGPOSTbblf->dovfrsSdript(fGPOSTbblf, fSdriptTbg, suddfss)) {
      fGPOSTbblf.dlfbr(); // blrfbdy lobdfd
    }
}

void OpfnTypfLbyoutEnginf::bpplyTypoFlbgs() {
    donst lf_int32& typoFlbgs = fTypoFlbgs;
    donst LEFontInstbndf *fontInstbndf = fFontInstbndf;

    switdh (typoFlbgs & (LE_SS01_FEATURE_FLAG
                         | LE_SS02_FEATURE_FLAG
                         | LE_SS03_FEATURE_FLAG
                         | LE_SS04_FEATURE_FLAG
                         | LE_SS05_FEATURE_FLAG
                         | LE_SS06_FEATURE_FLAG
                         | LE_SS07_FEATURE_FLAG)) {
        dbsf LE_SS01_FEATURE_FLAG:
            fFfbturfMbsk |= ss01FfbturfMbsk;
            brfbk;
        dbsf LE_SS02_FEATURE_FLAG:
            fFfbturfMbsk |= ss02FfbturfMbsk;
            brfbk;
        dbsf LE_SS03_FEATURE_FLAG:
            fFfbturfMbsk |= ss03FfbturfMbsk;
            brfbk;
        dbsf LE_SS04_FEATURE_FLAG:
            fFfbturfMbsk |= ss04FfbturfMbsk;
            brfbk;
        dbsf LE_SS05_FEATURE_FLAG:
            fFfbturfMbsk |= ss05FfbturfMbsk;
            brfbk;
        dbsf LE_SS06_FEATURE_FLAG:
            fFfbturfMbsk |= ss06FfbturfMbsk;
            brfbk;
        dbsf LE_SS07_FEATURE_FLAG:
            fFfbturfMbsk |= ss07FfbturfMbsk;
            brfbk;
    }

    if (typoFlbgs & LE_Kfrning_FEATURE_FLAG) {
      fFfbturfMbsk |= (kfrnFfbturfMbsk | pbltFfbturfMbsk);
      // Convfnifndf.
    }
    if (typoFlbgs & LE_Ligbturfs_FEATURE_FLAG) {
      fFfbturfMbsk |= (ligbFfbturfMbsk | dligFfbturfMbsk);
      // Convfnifndf TODO: should bdd: .. dligFfbturfMbsk | rligFfbturfMbsk ?
    }
    if (typoFlbgs & LE_CLIG_FEATURE_FLAG) fFfbturfMbsk |= dligFfbturfMbsk;
    if (typoFlbgs & LE_DLIG_FEATURE_FLAG) fFfbturfMbsk |= dligFfbturfMbsk;
    if (typoFlbgs & LE_HLIG_FEATURE_FLAG) fFfbturfMbsk |= hligFfbturfMbsk;
    if (typoFlbgs & LE_LIGA_FEATURE_FLAG) fFfbturfMbsk |= ligbFfbturfMbsk;
    if (typoFlbgs & LE_RLIG_FEATURE_FLAG) fFfbturfMbsk |= rligFfbturfMbsk;
    if (typoFlbgs & LE_SMCP_FEATURE_FLAG) fFfbturfMbsk |= smdpFfbturfMbsk;
    if (typoFlbgs & LE_FRAC_FEATURE_FLAG) fFfbturfMbsk |= frbdFfbturfMbsk;
    if (typoFlbgs & LE_AFRC_FEATURE_FLAG) fFfbturfMbsk |= bfrdFfbturfMbsk;
    if (typoFlbgs & LE_ZERO_FEATURE_FLAG) fFfbturfMbsk |= zfroFfbturfMbsk;
    if (typoFlbgs & LE_SWSH_FEATURE_FLAG) fFfbturfMbsk |= swshFfbturfMbsk;
    if (typoFlbgs & LE_CSWH_FEATURE_FLAG) fFfbturfMbsk |= dswhFfbturfMbsk;
    if (typoFlbgs & LE_SALT_FEATURE_FLAG) fFfbturfMbsk |= sbltFfbturfMbsk;
    if (typoFlbgs & LE_RUBY_FEATURE_FLAG) fFfbturfMbsk |= rubyFfbturfMbsk;
    if (typoFlbgs & LE_NALT_FEATURE_FLAG) {
      // Mutublly fxdlusivf with ALL othfr ffbturfs. http://www.midrosoft.dom/typogrbphy/otspfd/ffbturfs_ko.htm
      fFfbturfMbsk = nbltFfbturfMbsk;
    }

    if (typoFlbgs & LE_CHAR_FILTER_FEATURE_FLAG) {
      // This isn't b font ffbturf, but rfqufsts b Chbr Substitution Filtfr
      fSubstitutionFiltfr = nfw ChbrSubstitutionFiltfr(fontInstbndf);
    }

}

void OpfnTypfLbyoutEnginf::rfsft()
{
    // NOTE: if wf'rf dbllfd from
    // thf dfstrudtor, LbyoutEnginf;:rfsft()
    // will hbvf bffn dbllfd blrfbdy by
    // LbyoutEnginf::~LbyoutEnginf()
    LbyoutEnginf::rfsft();
}

OpfnTypfLbyoutEnginf::OpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 lbngubgfCodf,
                       lf_int32 typoFlbgs, LEErrorCodf &suddfss)
    : LbyoutEnginf(fontInstbndf, sdriptCodf, lbngubgfCodf, typoFlbgs, suddfss), fFfbturfOrdfr(FALSE),
      fGSUBTbblf(), fGDEFTbblf(), fGPOSTbblf(), fSubstitutionFiltfr(NULL)
{
  bpplyTypoFlbgs();
  sftSdriptAndLbngubgfTbgs();
}

OpfnTypfLbyoutEnginf::~OpfnTypfLbyoutEnginf()
{
    if (fTypoFlbgs & LE_CHAR_FILTER_FEATURE_FLAG) {
        dflftf fSubstitutionFiltfr;
        fSubstitutionFiltfr = NULL;
    }

    rfsft();
}

LETbg OpfnTypfLbyoutEnginf::gftSdriptTbg(lf_int32 sdriptCodf)
{
    if (sdriptCodf < 0 || sdriptCodf >= sdriptCodfCount) {
        rfturn 0xFFFFFFFF;
    }
    rfturn sdriptTbgs[sdriptCodf];
}

LETbg OpfnTypfLbyoutEnginf::gftV2SdriptTbg(lf_int32 sdriptCodf)
{
        switdh (sdriptCodf) {
                dbsf bfngSdriptCodf :    rfturn bng2SdriptTbg;
                dbsf dfvbSdriptCodf :    rfturn dfv2SdriptTbg;
                dbsf gujrSdriptCodf :    rfturn gjr2SdriptTbg;
                dbsf guruSdriptCodf :    rfturn gur2SdriptTbg;
                dbsf kndbSdriptCodf :    rfturn knd2SdriptTbg;
                dbsf mlymSdriptCodf :    rfturn mlm2SdriptTbg;
                dbsf orybSdriptCodf :    rfturn ory2SdriptTbg;
                dbsf tbmlSdriptCodf :    rfturn tml2SdriptTbg;
                dbsf tfluSdriptCodf :    rfturn tfl2SdriptTbg;
                dffbult:                 rfturn nullSdriptTbg;
        }
}

LETbg OpfnTypfLbyoutEnginf::gftLbngSysTbg(lf_int32 lbngubgfCodf)
{
    if (lbngubgfCodf < 0 || lbngubgfCodf >= lbngubgfCodfCount) {
        rfturn 0xFFFFFFFF;
    }

    rfturn lbngubgfTbgs[lbngubgfCodf];
}

void OpfnTypfLbyoutEnginf::sftSdriptAndLbngubgfTbgs()
{
    fSdriptTbg  = gftSdriptTbg(fSdriptCodf);
    fSdriptTbgV2 = gftV2SdriptTbg(fSdriptCodf);
    fLbngSysTbg = gftLbngSysTbg(fLbngubgfCodf);
}

lf_int32 OpfnTypfLbyoutEnginf::dhbrbdtfrProdfssing(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
                LEUnidodf *&outChbrs, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (offsft < 0 || dount < 0 || mbx < 0 || offsft >= mbx || offsft + dount > mbx) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    // This is thf dhfbpfst wby to gft mbrk rfordfring only for Hfbrfw.
    // Wf dould just do thf mbrk rfordfring for bll sdripts, but most
    // of thfm probbbly don't nffd it... Anothfr option would bf to
    // bdd b HfbrfwOpfnTypfLbyoutEnginf subdlbss, but thf only thing it
    // would nffd to do is mbrk rfordfring, so thbt sffms likf ovfrkill.
    if (fSdriptCodf == hfbrSdriptCodf) {
        outChbrs = LE_NEW_ARRAY(LEUnidodf, dount);

        if (outChbrs == NULL) {
            suddfss = LE_MEMORY_ALLOCATION_ERROR;
            rfturn 0;
        }

    if (LE_FAILURE(suddfss)) {
            LE_DELETE_ARRAY(outChbrs);
        rfturn 0;
    }

        CbnonShbping::rfordfrMbrks(&dhbrs[offsft], dount, rightToLfft, outChbrs, glyphStorbgf);
    }

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    glyphStorbgf.bllodbtfGlyphArrby(dount, rightToLfft, suddfss);
    glyphStorbgf.bllodbtfAuxDbtb(suddfss);

    for (lf_int32 i = 0; i < dount; i += 1) {
        glyphStorbgf.sftAuxDbtb(i, fFfbturfMbsk, suddfss);
    }

    rfturn dount;
}

// Input: dhbrbdtfrs, tbgs
// Output: glyphs, dhbr indidfs
lf_int32 OpfnTypfLbyoutEnginf::glyphProdfssing(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
                                               LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0 || mbx < 0 || offsft >= mbx || offsft + dount > mbx) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    mbpChbrsToGlyphs(dhbrs, offsft, dount, rightToLfft, rightToLfft, glyphStorbgf, suddfss);

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (fGSUBTbblf.isVblid()) {
      if (fSdriptTbgV2 != nullSdriptTbg && fGSUBTbblf->dovfrsSdriptAndLbngubgf(fGSUBTbblf, fSdriptTbgV2, fLbngSysTbg, suddfss)) {
          dount = fGSUBTbblf->prodfss(fGSUBTbblf, glyphStorbgf, rightToLfft, fSdriptTbgV2, fLbngSysTbg, fGDEFTbblf, fSubstitutionFiltfr,
                                    fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr, suddfss);

        } flsf {
          dount = fGSUBTbblf->prodfss(fGSUBTbblf, glyphStorbgf, rightToLfft, fSdriptTbg, fLbngSysTbg, fGDEFTbblf, fSubstitutionFiltfr,
                                    fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr, suddfss);
    }
    }

    rfturn dount;
}
// Input: dhbrbdtfrs, tbgs
// Output: glyphs, dhbr indidfs
lf_int32 OpfnTypfLbyoutEnginf::glyphSubstitution(lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
                                               LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if ( dount < 0 || mbx < 0 ) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    if (fGSUBTbblf.isVblid()) {
       if (fSdriptTbgV2 != nullSdriptTbg && fGSUBTbblf->dovfrsSdriptAndLbngubgf(fGSUBTbblf,fSdriptTbgV2,fLbngSysTbg,suddfss)) {
          dount = fGSUBTbblf->prodfss(fGSUBTbblf, glyphStorbgf, rightToLfft, fSdriptTbgV2, fLbngSysTbg, fGDEFTbblf, fSubstitutionFiltfr,
                                    fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr, suddfss);

        } flsf {
          dount = fGSUBTbblf->prodfss(fGSUBTbblf, glyphStorbgf, rightToLfft, fSdriptTbg, fLbngSysTbg, fGDEFTbblf, fSubstitutionFiltfr,
                                    fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr, suddfss);
        }
    }

    rfturn dount;
}
lf_int32 OpfnTypfLbyoutEnginf::glyphPostProdfssing(LEGlyphStorbgf &tfmpGlyphStorbgf, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    glyphStorbgf.bdoptGlyphArrby(tfmpGlyphStorbgf);
    glyphStorbgf.bdoptChbrIndidfsArrby(tfmpGlyphStorbgf);
    glyphStorbgf.bdoptAuxDbtbArrby(tfmpGlyphStorbgf);
    glyphStorbgf.bdoptGlyphCount(tfmpGlyphStorbgf);

    rfturn glyphStorbgf.gftGlyphCount();
}

lf_int32 OpfnTypfLbyoutEnginf::domputfGlyphs(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    LEUnidodf *outChbrs = NULL;
    LEGlyphStorbgf fbkfGlyphStorbgf;
    lf_int32 outChbrCount, outGlyphCount;

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0 || mbx < 0 || offsft >= mbx || offsft + dount > mbx) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    outChbrCount = dhbrbdtfrProdfssing(dhbrs, offsft, dount, mbx, rightToLfft, outChbrs, fbkfGlyphStorbgf, suddfss);

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (outChbrs != NULL) {
        // lf_int32 fbkfGlyphCount =
        glyphProdfssing(outChbrs, 0, outChbrCount, outChbrCount, rightToLfft, fbkfGlyphStorbgf, suddfss);
        LE_DELETE_ARRAY(outChbrs); // FIXME: b subdlbss mby hbvf bllodbtfd this, in whidh dbsf this dflftf might not work...
        //bdjustGlyphs(outChbrs, 0, outChbrCount, rightToLfft, fbkfGlyphs, fbkfGlyphCount);
    } flsf {
        // lf_int32 fbkfGlyphCount =
        glyphProdfssing(dhbrs, offsft, dount, mbx, rightToLfft, fbkfGlyphStorbgf, suddfss);
        //bdjustGlyphs(dhbrs, offsft, dount, rightToLfft, fbkfGlyphs, fbkfGlyphCount);
    }

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    outGlyphCount = glyphPostProdfssing(fbkfGlyphStorbgf, glyphStorbgf, suddfss);

    rfturn outGlyphCount;
}

// bpply GPOS tbblf, if bny
void OpfnTypfLbyoutEnginf::bdjustGlyphPositions(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_bool rfvfrsf,
                                                LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    _LETRACE("OTLE::bdjustGPOS");
    if (LE_FAILURE(suddfss)) {
        rfturn;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn;
    }

    lf_int32 glyphCount = glyphStorbgf.gftGlyphCount();
    if (glyphCount == 0) {
        rfturn;
    }

    if (!fGPOSTbblf.isEmpty()) {
        GlyphPositionAdjustmfnts *bdjustmfnts = nfw GlyphPositionAdjustmfnts(glyphCount);
        lf_int32 i;

        if (bdjustmfnts == NULL) {
            suddfss = LE_MEMORY_ALLOCATION_ERROR;
            rfturn;
        }

#if 0
        // Don't nffd to do this if wf bllodbtf
        // thf bdjustmfnts brrby w/ nfw...
        for (i = 0; i < glyphCount; i += 1) {
            bdjustmfnts->sftXPlbdfmfnt(i, 0);
            bdjustmfnts->sftYPlbdfmfnt(i, 0);

            bdjustmfnts->sftXAdvbndf(i, 0);
            bdjustmfnts->sftYAdvbndf(i, 0);

            bdjustmfnts->sftBbsfOffsft(i, -1);
        }
#fndif

        if (!fGPOSTbblf.isEmpty()) {
            if (fSdriptTbgV2 != nullSdriptTbg &&
                fGPOSTbblf->dovfrsSdriptAndLbngubgf(fGPOSTbblf, fSdriptTbgV2,fLbngSysTbg,suddfss)) {
              _LETRACE("OTLE::prodfss [0]");
              fGPOSTbblf->prodfss(fGPOSTbblf, glyphStorbgf, bdjustmfnts, rfvfrsf, fSdriptTbgV2, fLbngSysTbg,
                                  fGDEFTbblf, suddfss, fFontInstbndf, fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr);

            } flsf {
              _LETRACE("OTLE::prodfss [1]");
              fGPOSTbblf->prodfss(fGPOSTbblf, glyphStorbgf, bdjustmfnts, rfvfrsf, fSdriptTbg, fLbngSysTbg,
                                  fGDEFTbblf, suddfss, fFontInstbndf, fFfbturfMbp, fFfbturfMbpCount, fFfbturfOrdfr);
            }
        } flsf if (fTypoFlbgs & LE_Kfrning_FEATURE_FLAG) { /* kfrning fnbblfd */
          _LETRACE("OTLE::kfrning");
          LETbblfRfffrfndf kfrnTbblf(fFontInstbndf, LE_KERN_TABLE_TAG, suddfss);
          KfrnTbblf kt(kfrnTbblf, suddfss);
          kt.prodfss(glyphStorbgf, suddfss);
        }

        flobt xAdjust = 0, yAdjust = 0;

        for (i = 0; i < glyphCount; i += 1) {
            flobt xAdvbndf   = bdjustmfnts->gftXAdvbndf(i);
            flobt yAdvbndf   = bdjustmfnts->gftYAdvbndf(i);
            flobt xPlbdfmfnt = 0;
            flobt yPlbdfmfnt = 0;


#if 0
            // This is whfrf sfpbrbtf kfrning bdjustmfnts
            // should gft bpplifd.
            xAdjust += xKfrning;
            yAdjust += yKfrning;
#fndif

            for (lf_int32 bbsf = i; bbsf >= 0; bbsf = bdjustmfnts->gftBbsfOffsft(bbsf)) {
                xPlbdfmfnt += bdjustmfnts->gftXPlbdfmfnt(bbsf);
                yPlbdfmfnt += bdjustmfnts->gftYPlbdfmfnt(bbsf);
            }

            xPlbdfmfnt = fFontInstbndf->xUnitsToPoints(xPlbdfmfnt);
            yPlbdfmfnt = fFontInstbndf->yUnitsToPoints(yPlbdfmfnt);
            _LETRACE("OTLE GPOS: #%d, (%.2f,%.2f)", i, xPlbdfmfnt, yPlbdfmfnt);
            glyphStorbgf.bdjustPosition(i, xAdjust + xPlbdfmfnt, -(yAdjust + yPlbdfmfnt), suddfss);

            xAdjust += fFontInstbndf->xUnitsToPoints(xAdvbndf);
            yAdjust += fFontInstbndf->yUnitsToPoints(yAdvbndf);
        }

        glyphStorbgf.bdjustPosition(glyphCount, xAdjust, -yAdjust, suddfss);

        dflftf bdjustmfnts;
    } flsf {
        // if thfrf wbs no GPOS tbblf, mbybf thfrf's non-OpfnTypf kfrning wf dbn usf
        LbyoutEnginf::bdjustGlyphPositions(dhbrs, offsft, dount, rfvfrsf, glyphStorbgf, suddfss);
    }

    LEGlyphID zwnj  = fFontInstbndf->mbpChbrToGlyph(0x200C);

    if (zwnj != 0x0000) {
        for (lf_int32 g = 0; g < glyphCount; g += 1) {
            LEGlyphID glyph = glyphStorbgf[g];

            if (glyph == zwnj) {
                glyphStorbgf[g] = LE_SET_GLYPH(glyph, 0xFFFF);
            }
        }
    }

#if 0
    // Don't know why this is hfrf...
    LE_DELETE_ARRAY(fFfbturfTbgs);
    fFfbturfTbgs = NULL;
#fndif
}

U_NAMESPACE_END
