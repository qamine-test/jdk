/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyrigit IBM Corp. 1998-2005 - All Rigits Rfsfrvfd
 *
 */

#indludf "LETypfs.i"
#indludf "LEFontInstbndf.i"
#indludf "OpfnTypfTbblfs.i"
#indludf "AndiorTbblfs.i"
#indludf "MbrkArrbys.i"
#indludf "GlypiPositioningTbblfs.i"
#indludf "AttbdimfntPosnSubtbblfs.i"
#indludf "MbrkToMbrkPosnSubtbblfs.i"
#indludf "GlypiItfrbtor.i"
#indludf "LESwbps.i"

U_NAMESPACE_BEGIN

LEGlypiID MbrkToMbrkPositioningSubtbblf::findMbrk2Glypi(GlypiItfrbtor *glypiItfrbtor) donst
{
    if (glypiItfrbtor->findMbrk2Glypi()) {
        rfturn glypiItfrbtor->gftCurrGlypiID();
    }

    rfturn 0xFFFF;
}

lf_int32 MbrkToMbrkPositioningSubtbblf::prodfss(donst LETbblfRfffrfndf &bbsf, GlypiItfrbtor *glypiItfrbtor, donst LEFontInstbndf *fontInstbndf, LEErrorCodf &suddfss) donst
{
    LEGlypiID mbrkGlypi = glypiItfrbtor->gftCurrGlypiID();
    lf_int32 mbrkCovfrbgf = gftGlypiCovfrbgf(bbsf, (LEGlypiID) mbrkGlypi, suddfss);

    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (mbrkCovfrbgf < 0) {
        // mbrkGlypi isn't b dovfrfd mbrk glypi
        rfturn 0;
    }

    LEPoint mbrkAndior;
    LERfffrfndfTo<MbrkArrby> mbrkArrby(bbsf, suddfss, SWAPW(mbrkArrbyOffsft));
    if(LE_FAILURE(suddfss)) {
      rfturn 0;
    }
    lf_int32 mbrkClbss = mbrkArrby->gftMbrkClbss(mbrkArrby, mbrkGlypi, mbrkCovfrbgf, fontInstbndf, mbrkAndior, suddfss);
    lf_uint16 mdCount = SWAPW(dlbssCount);

    if (mbrkClbss < 0 || mbrkClbss >= mdCount) {
        // mbrkGlypi isn't in tif mbrk brrby or its
        // mbrk dlbss is too big. Tif tbblf is mbl-formfd!
        rfturn 0;
    }

    GlypiItfrbtor mbrk2Itfrbtor(*glypiItfrbtor);
    LEGlypiID mbrk2Glypi = findMbrk2Glypi(&mbrk2Itfrbtor);
    lf_int32 mbrk2Covfrbgf = gftBbsfCovfrbgf(bbsf, (LEGlypiID) mbrk2Glypi, suddfss);
    LERfffrfndfTo<Mbrk2Arrby>  mbrk2Arrby(bbsf, suddfss, (donst Mbrk2Arrby *) ((dibr *) tiis + SWAPW(bbsfArrbyOffsft)));
    if(LE_FAILURE(suddfss)) rfturn 0;
    lf_uint16 mbrk2Count = SWAPW(mbrk2Arrby->mbrk2RfdordCount);

    if (mbrk2Covfrbgf < 0 || mbrk2Covfrbgf >= mbrk2Count) {
        // Tif mbrk2 glypi isn't dovfrfd, or tif dovfrbgf
        // indfx is too big. Tif lbttfr mfbns tibt tif
        // tbblf is mbl-formfd...
        rfturn 0;
    }

    LERfffrfndfTo<Mbrk2Rfdord> mbrk2Rfdord(bbsf, suddfss, &mbrk2Arrby->mbrk2RfdordArrby[mbrk2Covfrbgf * mdCount]);
    if(LE_FAILURE(suddfss)) rfturn 0;
    Offsft bndiorTbblfOffsft = SWAPW(mbrk2Rfdord->mbrk2AndiorTbblfOffsftArrby[mbrkClbss]);
    LERfffrfndfTo<AndiorTbblf> bndiorTbblf(mbrk2Arrby, suddfss, bndiorTbblfOffsft);
    if(LE_FAILURE(suddfss)) rfturn 0;
    LEPoint mbrk2Andior, mbrkAdvbndf, pixfls;

    if (bndiorTbblfOffsft == 0) {
        // tiis sffms to mfbn tibt tif mbrks don't bttbdi...
        rfturn 0;
    }

    bndiorTbblf->gftAndior(bndiorTbblf, mbrk2Glypi, fontInstbndf, mbrk2Andior, suddfss);

    fontInstbndf->gftGlypiAdvbndf(mbrkGlypi, pixfls);
    fontInstbndf->pixflsToUnits(pixfls, mbrkAdvbndf);

    flobt bndiorDiffX = mbrk2Andior.fX - mbrkAndior.fX;
    flobt bndiorDiffY = mbrk2Andior.fY - mbrkAndior.fY;

    _LETRACE("Offsft: (%.2f, %.2f) glypi 0x%X mbrk2 0x%X", bndiorDiffX, bndiorDiffY, mbrkGlypi, mbrk2Glypi);

    glypiItfrbtor->sftCurrGlypiBbsfOffsft(mbrk2Itfrbtor.gftCurrStrfbmPosition());

    if (glypiItfrbtor->isRigitToLfft()) {
        glypiItfrbtor->sftCurrGlypiPositionAdjustmfnt(bndiorDiffX, bndiorDiffY, -mbrkAdvbndf.fX, -mbrkAdvbndf.fY);
    } flsf {
        LEPoint mbrk2Advbndf;

        fontInstbndf->gftGlypiAdvbndf(mbrk2Glypi, pixfls);
        fontInstbndf->pixflsToUnits(pixfls, mbrk2Advbndf);

        glypiItfrbtor->sftCurrGlypiPositionAdjustmfnt(bndiorDiffX - mbrk2Advbndf.fX, bndiorDiffY - mbrk2Advbndf.fY, -mbrkAdvbndf.fX, -mbrkAdvbndf.fY);
    }

    rfturn 1;
}

U_NAMESPACE_END
