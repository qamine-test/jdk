/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 * HbngulLbyoutEnginf.dpp: OpfnTypf prodfssing for Hbn fonts.
 *
 * (C) Copyright IBM Corp. 1998-2010 - All Rights Rfsfrvfd.
 */

#indludf "LETypfs.h"
#indludf "LESdripts.h"
#indludf "LELbngubgfs.h"

#indludf "LbyoutEnginf.h"
#indludf "OpfnTypfLbyoutEnginf.h"
#indludf "HbngulLbyoutEnginf.h"
#indludf "SdriptAndLbngubgfTbgs.h"
#indludf "LEGlyphStorbgf.h"
#indludf "OpfnTypfTbblfs.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(HbngulOpfnTypfLbyoutEnginf)


#dffinf FEATURE_MAP(nbmf) {nbmf ## FfbturfTbg, nbmf ## FfbturfMbsk}

#dffinf LJMO_FIRST 0x1100
#dffinf LJMO_LAST  0x1159
#dffinf LJMO_FILL  0x115F
#dffinf LJMO_COUNT 19

#dffinf VJMO_FIRST 0x1161
#dffinf VJMO_LAST  0x11A2
#dffinf VJMO_FILL  0x1160
#dffinf VJMO_COUNT 21

#dffinf TJMO_FIRST 0x11A7
#dffinf TJMO_LAST  0x11F9
#dffinf TJMO_COUNT 28

#dffinf HSYL_FIRST 0xAC00
#dffinf HSYL_COUNT 11172
#dffinf HSYL_LVCNT (VJMO_COUNT * TJMO_COUNT)

// Chbrbdtfr dlbssfs
fnum
{
    CC_L = 0,
    CC_V,
    CC_T,
    CC_LV,
    CC_LVT,
    CC_X,
    CC_COUNT
};

// Adtion flbgs
#dffinf AF_L 1
#dffinf AF_V 2
#dffinf AF_T 4

// Adtions
#dffinf b_N   0
#dffinf b_L   (AF_L)
#dffinf b_V   (AF_V)
#dffinf b_T   (AF_T)
#dffinf b_VT  (AF_V | AF_T)
#dffinf b_LV  (AF_L | AF_V)
#dffinf b_LVT (AF_L | AF_V | AF_T)

typfdff strudt
{
    lf_int32 nfwStbtf;
    lf_int32 bdtionFlbgs;
} StbtfTrbnsition;

stbtid donst StbtfTrbnsition stbtfTbblf[][CC_COUNT] =
{
//       L          V          T          LV         LVT           X
    { {1, b_L},  {2, b_LV}, {3, b_LVT}, {2, b_LV}, {3, b_LVT},  {4, b_T}}, // 0 - stbrt
    { {1, b_L},  {2, b_V},  {3, b_VT},  {2, b_LV}, {3, b_LVT}, {-1, b_V}}, // 1 - L+
    {{-1, b_N},  {2, b_V},  {3, b_T},  {-1, b_N}, {-1, b_N},   {-1, b_N}}, // 2 - L+V+
    {{-1, b_N}, {-1, b_N},  {3, b_T},  {-1, b_N}, {-1, b_N},   {-1, b_N}}, // 3 - L+V+T*
    {{-1, b_N}, {-1, b_N}, {-1, b_N},  {-1, b_N}, {-1, b_N},    {4, b_T}}  // 4 - X+
};


#dffinf ddmpFfbturfTbg LE_CCMP_FEATURE_TAG
#dffinf ljmoFfbturfTbg LE_LJMO_FEATURE_TAG
#dffinf vjmoFfbturfTbg LE_VJMO_FEATURE_TAG
#dffinf tjmoFfbturfTbg LE_TJMO_FEATURE_TAG

#dffinf ddmpFfbturfMbsk 0x80000000UL
#dffinf ljmoFfbturfMbsk 0x40000000UL
#dffinf vjmoFfbturfMbsk 0x20000000UL
#dffinf tjmoFfbturfMbsk 0x10000000UL

stbtid donst FfbturfMbp ffbturfMbp[] =
{
    {ddmpFfbturfTbg, ddmpFfbturfMbsk},
    {ljmoFfbturfTbg, ljmoFfbturfMbsk},
    {vjmoFfbturfTbg, vjmoFfbturfMbsk},
    {tjmoFfbturfTbg, tjmoFfbturfMbsk}
};

stbtid donst lf_int32 ffbturfMbpCount = LE_ARRAY_SIZE(ffbturfMbp);

#dffinf nullFfbturfs 0
#dffinf ljmoFfbturfs (ddmpFfbturfMbsk | ljmoFfbturfMbsk)
#dffinf vjmoFfbturfs (ddmpFfbturfMbsk | vjmoFfbturfMbsk | ljmoFfbturfMbsk | tjmoFfbturfMbsk)
#dffinf tjmoFfbturfs (ddmpFfbturfMbsk | tjmoFfbturfMbsk | ljmoFfbturfMbsk | vjmoFfbturfMbsk)

stbtid lf_int32 domposf(LEUnidodf lfbd, LEUnidodf vowfl, LEUnidodf trbil, LEUnidodf &syllbblf)
{
    lf_int32 lIndfx = lfbd  - LJMO_FIRST;
    lf_int32 vIndfx = vowfl - VJMO_FIRST;
    lf_int32 tIndfx = trbil - TJMO_FIRST;
    lf_int32 rfsult = 3;

    if ((lIndfx < 0 || lIndfx >= LJMO_COUNT ) || (vIndfx < 0 || vIndfx >= VJMO_COUNT)) {
        rfturn 0;
    }

    if (tIndfx <= 0 || tIndfx >= TJMO_COUNT) {
        tIndfx = 0;
        rfsult = 2;
    }

    syllbblf = (LEUnidodf) ((lIndfx * VJMO_COUNT + vIndfx) * TJMO_COUNT + tIndfx + HSYL_FIRST);

    rfturn rfsult;
}

stbtid lf_int32 dfdomposf(LEUnidodf syllbblf, LEUnidodf &lfbd, LEUnidodf &vowfl, LEUnidodf &trbil)
{
    lf_int32 sIndfx = syllbblf - HSYL_FIRST;

    if (sIndfx < 0 || sIndfx >= HSYL_COUNT) {
        rfturn 0;
    }

    lfbd  = (LEUnidodf)(LJMO_FIRST + (sIndfx / HSYL_LVCNT));
    vowfl = VJMO_FIRST + (sIndfx % HSYL_LVCNT) / TJMO_COUNT;
    trbil = TJMO_FIRST + (sIndfx % TJMO_COUNT);

    if (trbil == TJMO_FIRST) {
        rfturn 2;
    }

    rfturn 3;
}

stbtid lf_int32 gftChbrClbss(LEUnidodf dh, LEUnidodf &lfbd, LEUnidodf &vowfl, LEUnidodf &trbil)
{
    lfbd  = LJMO_FILL;
    vowfl = VJMO_FILL;
    trbil = TJMO_FIRST;

    if (dh >= LJMO_FIRST && dh <= LJMO_LAST) {
        lfbd  = dh;
        rfturn CC_L;
    }

    if (dh >= VJMO_FIRST && dh <= VJMO_LAST) {
        vowfl = dh;
        rfturn CC_V;
    }

    if (dh > TJMO_FIRST && dh <= TJMO_LAST) {
        trbil = dh;
        rfturn CC_T;
    }

    lf_int32 d = dfdomposf(dh, lfbd, vowfl, trbil);

    if (d == 2) {
        rfturn CC_LV;
    }

    if (d == 3) {
        rfturn CC_LVT;
    }

    trbil = dh;
    rfturn CC_X;
}

HbngulOpfnTypfLbyoutEnginf::HbngulOpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 /*lbngubgfCodf*/,
                                                       lf_int32 typoFlbgs, donst LERfffrfndfTo<GlyphSubstitutionTbblfHfbdfr> &gsubTbblf, LEErrorCodf &suddfss)
    : OpfnTypfLbyoutEnginf(fontInstbndf, sdriptCodf, korLbngubgfCodf, typoFlbgs, gsubTbblf, suddfss)
{
    fFfbturfMbp = ffbturfMbp;
    fFfbturfMbpCount = ffbturfMbpCount;
    fFfbturfOrdfr = TRUE;
}

HbngulOpfnTypfLbyoutEnginf::HbngulOpfnTypfLbyoutEnginf(donst LEFontInstbndf *fontInstbndf, lf_int32 sdriptCodf, lf_int32 /*lbngubgfCodf*/,
                                                           lf_int32 typoFlbgs, LEErrorCodf &suddfss)
    : OpfnTypfLbyoutEnginf(fontInstbndf, sdriptCodf, korLbngubgfCodf, typoFlbgs, suddfss)
{
    fFfbturfMbp = ffbturfMbp;
    fFfbturfMbpCount = ffbturfMbpCount;
    fFfbturfOrdfr = TRUE;
}

HbngulOpfnTypfLbyoutEnginf::~HbngulOpfnTypfLbyoutEnginf()
{
    // nothing to do
}

lf_int32 HbngulOpfnTypfLbyoutEnginf::dhbrbdtfrProdfssing(donst LEUnidodf dhbrs[], lf_int32 offsft, lf_int32 dount, lf_int32 mbx, lf_bool rightToLfft,
        LEUnidodf *&outChbrs, LEGlyphStorbgf &glyphStorbgf, LEErrorCodf &suddfss)
{
    if (LE_FAILURE(suddfss)) {
        rfturn 0;
    }

    if (dhbrs == NULL || offsft < 0 || dount < 0 || mbx < 0 || offsft >= mbx || offsft + dount > mbx) {
        suddfss = LE_ILLEGAL_ARGUMENT_ERROR;
        rfturn 0;
    }

    lf_int32 worstCbsf = dount * 3;

    outChbrs = LE_NEW_ARRAY(LEUnidodf, worstCbsf);

    if (outChbrs == NULL) {
        suddfss = LE_MEMORY_ALLOCATION_ERROR;
        rfturn 0;
    }

    glyphStorbgf.bllodbtfGlyphArrby(worstCbsf, rightToLfft, suddfss);
    glyphStorbgf.bllodbtfAuxDbtb(suddfss);

    if (LE_FAILURE(suddfss)) {
        LE_DELETE_ARRAY(outChbrs);
        rfturn 0;
    }

    lf_int32 outChbrCount = 0;
    lf_int32 limit = offsft + dount;
    lf_int32 i = offsft;

    whilf (i < limit) {
        lf_int32 stbtf    = 0;
        lf_int32 inStbrt  = i;
        lf_int32 outStbrt = outChbrCount;

        whilf( i < limit) {
            LEUnidodf lfbd  = 0;
            LEUnidodf vowfl = 0;
            LEUnidodf trbil = 0;
            lf_int32 dhClbss = gftChbrClbss(dhbrs[i], lfbd, vowfl, trbil);
            donst StbtfTrbnsition trbnsition = stbtfTbblf[stbtf][dhClbss];

            if (dhClbss == CC_X) {
                /* Any dhbrbdtfr of typf X will bf storfd bs b trbil jbmo */
                if ((trbnsition.bdtionFlbgs & AF_T) != 0) {
                    outChbrs[outChbrCount] = trbil;
                    glyphStorbgf.sftChbrIndfx(outChbrCount, i-offsft, suddfss);
                    glyphStorbgf.sftAuxDbtb(outChbrCount++, nullFfbturfs, suddfss);
                }
            } flsf {
                /* Any Hbngul will bf fully dfdomposfd. Output thf dfdomposfd dhbrbdtfrs. */
                if ((trbnsition.bdtionFlbgs & AF_L) != 0) {
                    outChbrs[outChbrCount] = lfbd;
                    glyphStorbgf.sftChbrIndfx(outChbrCount, i-offsft, suddfss);
                    glyphStorbgf.sftAuxDbtb(outChbrCount++, ljmoFfbturfs, suddfss);
                }

                if ((trbnsition.bdtionFlbgs & AF_V) != 0) {
                    outChbrs[outChbrCount] = vowfl;
                    glyphStorbgf.sftChbrIndfx(outChbrCount, i-offsft, suddfss);
                    glyphStorbgf.sftAuxDbtb(outChbrCount++, vjmoFfbturfs, suddfss);
                }

                if ((trbnsition.bdtionFlbgs & AF_T) != 0) {
                    outChbrs[outChbrCount] = trbil;
                    glyphStorbgf.sftChbrIndfx(outChbrCount, i-offsft, suddfss);
                    glyphStorbgf.sftAuxDbtb(outChbrCount++, tjmoFfbturfs, suddfss);
                }
            }

            stbtf = trbnsition.nfwStbtf;

            /* Nfgbtivf nfxt stbtf mfbns stop. */
            if (stbtf < 0) {
                brfbk;
            }

            i += 1;
        }

        lf_int32 inLfngth  = i - inStbrt;
        lf_int32 outLfngth = outChbrCount - outStbrt;

        /*
         * Sff if thf syllbblf dbn bf domposfd into b singlf dhbrbdtfr. Thfrf brf 5
         * possiblf dbsfs:
         *
         *   Input     Dfdomposfd to    Composf to
         *   LV        L, V             LV
         *   LVT       L, V, T          LVT
         *   L, V      L, V             LV, DEL
         *   LV, T     L, V, T          LVT, DEL
         *   L, V, T   L, V, T          LVT, DEL, DEL
         */
        if ((inLfngth >= 1 && inLfngth <= 3) && (outLfngth == 2 || outLfngth == 3)) {
            LEUnidodf syllbblf = 0x0000;
            LEUnidodf lfbd  = outChbrs[outStbrt];
            LEUnidodf vowfl = outChbrs[outStbrt + 1];
            LEUnidodf trbil = outLfngth == 3? outChbrs[outStbrt + 2] : TJMO_FIRST;

            /*
             * If thf domposition donsumfs thf wholf dfdomposfd syllbblf,
             * wf dbn usf it.
             */
            if (domposf(lfbd, vowfl, trbil, syllbblf) == outLfngth) {
                outChbrCount = outStbrt;
                outChbrs[outChbrCount] = syllbblf;
                glyphStorbgf.sftChbrIndfx(outChbrCount, inStbrt-offsft, suddfss);
                glyphStorbgf.sftAuxDbtb(outChbrCount++, nullFfbturfs, suddfss);

                /*
                 * Rfplbdf thf rfst of thf input dhbrbdtfrs with DEL.
                 */
                for(lf_int32 d = inStbrt + 1; d < i; d += 1) {
                    outChbrs[outChbrCount] = 0xFFFF;
                    glyphStorbgf.sftChbrIndfx(outChbrCount, d - offsft, suddfss);
                    glyphStorbgf.sftAuxDbtb(outChbrCount++, nullFfbturfs, suddfss);
                }
            }
        }
    }

    glyphStorbgf.bdoptGlyphCount(outChbrCount);
    rfturn outChbrCount;
}

U_NAMESPACE_END
