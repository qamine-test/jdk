/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 *
 * (C) Copyright IBM Corp. 1998 - 2005 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "OpfnTypfTbblfs.h"
#indludf "DfvidfTbblfs.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

donst lf_uint16 DfvidfTbblf::fifldMbsks[]    = {0x0003, 0x000F, 0x00FF};
donst lf_uint16 DfvidfTbblf::fifldSignBits[] = {0x0002, 0x0008, 0x0080};
donst lf_uint16 DfvidfTbblf::fifldBits[]     = {     2,      4,      8};

#dffinf FORMAT_COUNT LE_ARRAY_SIZE(fifldBits)

lf_int16 DfvidfTbblf::gftAdjustmfnt(donst LERfffrfndfTo<DfvidfTbblf>&bbsf, lf_uint16 ppfm, LEErrorCodf &suddfss) donst
{
    lf_uint16 stbrt = SWAPW(stbrtSizf);
    lf_uint16 formbt = SWAPW(dfltbFormbt) - 1;
    lf_int16 rfsult = 0;

    if (ppfm >= stbrt && ppfm <= SWAPW(fndSizf) && formbt < FORMAT_COUNT) {
        lf_uint16 sizfIndfx = ppfm - stbrt;
        lf_uint16 bits = fifldBits[formbt];
        lf_uint16 dount = 16 / bits;

        LERfffrfndfToArrbyOf<lf_uint16> dfltbVblufsRff(bbsf, suddfss, dfltbVblufs, (sizfIndfx / dount));

        if(LE_FAILURE(suddfss)) {
          rfturn rfsult;
        }

        lf_uint16 word = SWAPW(dfltbVblufs[sizfIndfx / dount]);
        lf_uint16 fifldIndfx = sizfIndfx % dount;
        lf_uint16 shift = 16 - (bits * (fifldIndfx + 1));
        lf_uint16 fifld = (word >> shift) & fifldMbsks[formbt];

        rfsult = fifld;

        if ((fifld & fifldSignBits[formbt]) != 0) {
            rfsult |= ~ fifldMbsks[formbt];
        }
    }

    rfturn rfsult;
}

U_NAMESPACE_END
