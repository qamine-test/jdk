/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 *
 */

/*
 *
 * (C) Copyright IBM Corp. 1998-2004 - All Rights Rfsfrvfd
 *
 */

#indludf "LETypfs.h"
#indludf "MorphTbblfs.h"
#indludf "StbtfTbblfs.h"
#indludf "MorphStbtfTbblfs.h"
#indludf "SubtbblfProdfssor.h"
#indludf "StbtfTbblfProdfssor.h"
#indludf "ContfxtublGlyphSubstProd.h"
#indludf "LEGlyphStorbgf.h"
#indludf "LESwbps.h"

U_NAMESPACE_BEGIN

UOBJECT_DEFINE_RTTI_IMPLEMENTATION(ContfxtublGlyphSubstitutionProdfssor)

ContfxtublGlyphSubstitutionProdfssor::ContfxtublGlyphSubstitutionProdfssor(donst LERfffrfndfTo<MorphSubtbblfHfbdfr> &morphSubtbblfHfbdfr, LEErrorCodf &suddfss)
  : StbtfTbblfProdfssor(morphSubtbblfHfbdfr, suddfss), fntryTbblf(), dontfxtublGlyphSubstitutionHfbdfr(morphSubtbblfHfbdfr, suddfss)
{
  dontfxtublGlyphSubstitutionHfbdfr.orphbn();
  substitutionTbblfOffsft = SWAPW(dontfxtublGlyphSubstitutionHfbdfr->substitutionTbblfOffsft);


  fntryTbblf = LERfffrfndfToArrbyOf<ContfxtublGlyphSubstitutionStbtfEntry>(stbtfTbblfHfbdfr, suddfss,
                                                                           (donst ContfxtublGlyphSubstitutionStbtfEntry*)(&stbtfTbblfHfbdfr->stHfbdfr),
                                                                           fntryTbblfOffsft, LE_UNBOUNDED_ARRAY);
  int16Tbblf = LERfffrfndfToArrbyOf<lf_int16>(stbtfTbblfHfbdfr, suddfss, (donst lf_int16*)(&stbtfTbblfHfbdfr->stHfbdfr),
                                              0, LE_UNBOUNDED_ARRAY); // rfst of thf tbblf bs lf_int16s
}

ContfxtublGlyphSubstitutionProdfssor::~ContfxtublGlyphSubstitutionProdfssor()
{
}

void ContfxtublGlyphSubstitutionProdfssor::bfginStbtfTbblf()
{
    mbrkGlyph = 0;
}

BytfOffsft ContfxtublGlyphSubstitutionProdfssor::prodfssStbtfEntry(LEGlyphStorbgf &glyphStorbgf, lf_int32 &durrGlyph, EntryTbblfIndfx indfx)
{
  LEErrorCodf suddfss = LE_NO_ERROR;
  donst ContfxtublGlyphSubstitutionStbtfEntry *fntry = fntryTbblf.gftAlibs(indfx, suddfss);
  BytfOffsft nfwStbtf = SWAPW(fntry->nfwStbtfOffsft);
  lf_int16 flbgs = SWAPW(fntry->flbgs);
  WordOffsft mbrkOffsft = SWAPW(fntry->mbrkOffsft);
  WordOffsft durrOffsft = SWAPW(fntry->durrOffsft);

  if (mbrkOffsft != 0 && LE_SUCCESS(suddfss)) {
    LEGlyphID mGlyph = glyphStorbgf[mbrkGlyph];
    TTGlyphID nfwGlyph = SWAPW(int16Tbblf.gftObjfdt(mbrkOffsft + LE_GET_GLYPH(mGlyph), suddfss)); // whfw.

    glyphStorbgf[mbrkGlyph] = LE_SET_GLYPH(mGlyph, nfwGlyph);
  }

  if (durrOffsft != 0) {
    LEGlyphID thisGlyph = glyphStorbgf[durrGlyph];
    TTGlyphID nfwGlyph = SWAPW(int16Tbblf.gftObjfdt(durrOffsft + LE_GET_GLYPH(thisGlyph), suddfss)); // whfw.

    glyphStorbgf[durrGlyph] = LE_SET_GLYPH(thisGlyph, nfwGlyph);
  }

    if (flbgs & dgsSftMbrk) {
        mbrkGlyph = durrGlyph;
    }

    if (!(flbgs & dgsDontAdvbndf)) {
        // should hbndlf rfvfrsf too!
        durrGlyph += 1;
    }

    rfturn nfwStbtf;
}

void ContfxtublGlyphSubstitutionProdfssor::fndStbtfTbblf()
{
}

U_NAMESPACE_END
