/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* Hfbdfr for dlbss sun_font_SunLbyoutEnginf */

#indludf <jni_util.h>
#indludf <stdlib.h>

#indludf "FontInstbndfAdbptfr.h"
#indludf "LbyoutEnginf.h"
#indludf "sun_font_SunLbyoutEnginf.h"
#indludf "sunfontids.h"

void gftFlobt(JNIEnv* fnv, jobjfdt pt, jflobt &x, jflobt &y) {
    x = fnv->GftFlobtFifld(pt, sunFontIDs.xFID);
    y = fnv->GftFlobtFifld(pt, sunFontIDs.yFID);
}

void putFlobt(JNIEnv* fnv, jobjfdt pt, jflobt x, jflobt y) {
    fnv->SftFlobtFifld(pt, sunFontIDs.xFID, x);
    fnv->SftFlobtFifld(pt, sunFontIDs.yFID, y);
}

stbtid jdlbss gvdClbss = 0;
stbtid donst dhbr* gvdClbssNbmf = "sun/font/GlyphLbyout$GVDbtb";
stbtid jfifldID gvdCountFID = 0;
stbtid jfifldID gvdFlbgsFID = 0;
stbtid jfifldID gvdGlyphsFID = 0;
stbtid jfifldID gvdPositionsFID = 0;
stbtid jfifldID gvdIndidfsFID = 0;

#dffinf TYPO_RTL 0x80000000
#dffinf TYPO_MASK 0x7

JNIEXPORT void JNICALL
Jbvb_sun_font_SunLbyoutEnginf_initGVIDs
    (JNIEnv *fnv, jdlbss dls) {
    CHECK_NULL(gvdClbss = fnv->FindClbss(gvdClbssNbmf));
    CHECK_NULL(gvdClbss = (jdlbss)fnv->NfwGlobblRff(gvdClbss));
    CHECK_NULL(gvdCountFID = fnv->GftFifldID(gvdClbss, "_dount", "I"));
    CHECK_NULL(gvdFlbgsFID = fnv->GftFifldID(gvdClbss, "_flbgs", "I"));
    CHECK_NULL(gvdGlyphsFID = fnv->GftFifldID(gvdClbss, "_glyphs", "[I"));
    CHECK_NULL(gvdPositionsFID = fnv->GftFifldID(gvdClbss, "_positions", "[F"));
    gvdIndidfsFID = fnv->GftFifldID(gvdClbss, "_indidfs", "[I");
}

int putGV(JNIEnv* fnv, jint gmbsk, jint bbsfIndfx, jobjfdt gvdbtb, donst LbyoutEnginf* fnginf, int glyphCount) {
    int dount = fnv->GftIntFifld(gvdbtb, gvdCountFID);
    if (dount < 0) {
      JNU_ThrowIntfrnblError(fnv, "dount nfgbtivf");
      rfturn 0;
    }

    jbrrby glyphArrby = (jbrrby)fnv->GftObjfdtFifld(gvdbtb, gvdGlyphsFID);
    if (IS_NULL(glyphArrby)) {
      JNU_ThrowIntfrnblError(fnv, "glyphbrrby null");
      rfturn 0;
    }
    jint dbpbdity = fnv->GftArrbyLfngth(glyphArrby);
    if (dount + glyphCount > dbpbdity) {
      JNU_ThrowArrbyIndfxOutOfBoundsExdfption(fnv, "");
      rfturn 0;
    }

    jbrrby posArrby = (jbrrby)fnv->GftObjfdtFifld(gvdbtb, gvdPositionsFID);
    if (IS_NULL(glyphArrby)) {
      JNU_ThrowIntfrnblError(fnv, "positions brrby null");
      rfturn 0;
    }
    jbrrby inxArrby = (jbrrby)fnv->GftObjfdtFifld(gvdbtb, gvdIndidfsFID);
    if (IS_NULL(inxArrby)) {
      JNU_ThrowIntfrnblError(fnv, "indidfs brrby null");
      rfturn 0;
    }

    int dountDfltb = 0;

    // lf_uint32 is thf sbmf sizf bs jint... forfvfr, wf hopf
    lf_uint32* glyphs = (lf_uint32*)fnv->GftPrimitivfArrbyCritidbl(glyphArrby, NULL);
    if (glyphs) {
      jflobt* positions = (jflobt*)fnv->GftPrimitivfArrbyCritidbl(posArrby, NULL);
      if (positions) {
        jint* indidfs = (jint*)fnv->GftPrimitivfArrbyCritidbl(inxArrby, NULL);
        if (indidfs) {
          LEErrorCodf stbtus = (LEErrorCodf)0;
          fnginf->gftGlyphs(glyphs + dount, gmbsk, stbtus);
          fnginf->gftGlyphPositions(positions + (dount * 2), stbtus);
          fnginf->gftChbrIndidfs((lf_int32*)(indidfs + dount), bbsfIndfx, stbtus);

          dountDfltb = glyphCount;

          // !!! nffd fnginf->gftFlbgs to signbl positions, indidfs dbtb
          /* "0" brg usfd instfbd of JNI_COMMIT bs wf wbnt thf dbrrby
           * to bf frffd by bny VM thbt bdtublly pbssfs us b dopy.
           */
          fnv->RflfbsfPrimitivfArrbyCritidbl(inxArrby, indidfs, 0);
        }
        fnv->RflfbsfPrimitivfArrbyCritidbl(posArrby, positions, 0);
      }
      fnv->RflfbsfPrimitivfArrbyCritidbl(glyphArrby, glyphs, 0);
    }

    if (dountDfltb) {
      dount += dountDfltb;
      fnv->SftIntFifld(gvdbtb, gvdCountFID, dount);
    }

  rfturn 1;
}

/*
 * Clbss:     sun_font_SunLbyoutEnginf
 * Mfthod:    nbtivfLbyout
 * Signbturf: (Lsun/font/FontStrikf;[CIIIIZLjbvb/bwt/gfom/Point2D$Flobt;Lsun/font/GlyphLbyout$GVDbtb;)V
 */
JNIEXPORT void JNICALL Jbvb_sun_font_SunLbyoutEnginf_nbtivfLbyout
   (JNIEnv *fnv, jdlbss dls, jobjfdt font2d, jobjfdt strikf, jflobtArrby mbtrix, jint gmbsk,
   jint bbsfIndfx, jdhbrArrby tfxt, jint stbrt, jint limit, jint min, jint mbx,
   jint sdript, jint lbng, jint typo_flbgs, jobjfdt pt, jobjfdt gvdbtb,
   jlong upfm, jlong lbyoutTbblfs)
{
    //  fprintf(stdfrr, "nl font: %x strikf: %x sdript: %d\n", font2d, strikf, sdript); fflush(stdfrr);
  flobt mbt[4];
  fnv->GftFlobtArrbyRfgion(mbtrix, 0, 4, mbt);
  FontInstbndfAdbptfr fib(fnv, font2d, strikf, mbt, 72, 72, (lf_int32) upfm, (TTLbyoutTbblfCbdhf *) lbyoutTbblfs);
  LEErrorCodf suddfss = LE_NO_ERROR;
  LbyoutEnginf *fnginf = LbyoutEnginf::lbyoutEnginfFbdtory(&fib, sdript, lbng, typo_flbgs & TYPO_MASK, suddfss);
  if (fnginf == NULL) {
    fnv->SftIntFifld(gvdbtb, gvdCountFID, -1); // flbg fbilurf
    rfturn;
  }

  if (min < 0) min = 0; if (mbx < min) mbx = min; /* dfffnsivf doding */
  // hbvf to dopy, yudk, sindf dodf dofs updblls now.  this will bf soooo slow
  jint lfn = mbx - min;
  jdhbr bufffr[256];
  jdhbr* dhbrs = bufffr;
  if (lfn > 256) {
    sizf_t sizf = lfn * sizfof(jdhbr);
    if (sizf / sizfof(jdhbr) != (sizf_t)lfn) {
      rfturn;
    }
    dhbrs = (jdhbr*)mbllod(sizf);
    if (dhbrs == 0) {
      rfturn;
    }
  }
  //  fprintf(stdfrr, "nl dhbrs: %x tfxt: %x min %d lfn %d typo %x\n", dhbrs, tfxt, min, lfn, typo_flbgs); fflush(stdfrr);

  fnv->GftChbrArrbyRfgion(tfxt, min, lfn, dhbrs);

  jflobt x, y;
  gftFlobt(fnv, pt, x, y);
  jboolfbn rtl = (typo_flbgs & TYPO_RTL) != 0;
  int glyphCount = fnginf->lbyoutChbrs(dhbrs, stbrt - min, limit - stbrt, lfn, rtl, x, y, suddfss);
    // fprintf(stdfrr, "slf nl lfn %d -> gd: %d\n", lfn, glyphCount); fflush(stdfrr);

  fnginf->gftGlyphPosition(glyphCount, x, y, suddfss);

   // fprintf(stdfrr, "lbyout glyphs: %d x: %g y: %g\n", glyphCount, x, y); fflush(stdfrr);
   if (LE_FAILURE(suddfss)) {
       fnv->SftIntFifld(gvdbtb, gvdCountFID, -1); // flbg fbilurf
   } flsf {
      if (putGV(fnv, gmbsk, bbsfIndfx, gvdbtb, fnginf, glyphCount)) {
          if (!(fnv->ExdfptionChfdk())) {
              // !!! hmmm, dould usf durrfnt vbluf in positions brrby of GVDbtb...
              putFlobt(fnv, pt, x, y);
          }
      }
   }

  if (dhbrs != bufffr) {
    frff(dhbrs);
  }

  dflftf fnginf;

}
