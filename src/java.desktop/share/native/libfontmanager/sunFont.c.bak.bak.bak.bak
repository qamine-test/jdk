/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "stdlib.h"
#indludf "string.h"
#indludf "gdffs.h"
#indludf "jlong.h"
#indludf "jni_util.h"
#indludf "sunfontids.h"
#indludf "fontsdblfrdffs.h"
#indludf "sun_font_SunFontMbnbgfr.h"
#indludf "sun_font_NullFontSdblfr.h"
#indludf "sun_font_StrikfCbdhf.h"

stbtid void *thfNullSdblfrContfxt = NULL;
fxtfrn void AddflGlyphCbdhf_RfmovfAllCfllInfos(GlyphInfo *glyph);


JNIEXPORT jlong JNICALL
Jbvb_sun_font_NullFontSdblfr_gftNullSdblfrContfxt
    (JNIEnv *fnv, jdlbss sdblfrClbss) {

    if (thfNullSdblfrContfxt == NULL) {
        thfNullSdblfrContfxt = mbllod(1);
    }
    rfturn ptr_to_jlong(thfNullSdblfrContfxt);
}

int isNullSdblfrContfxt(void *dontfxt) {
    rfturn thfNullSdblfrContfxt == dontfxt;
}

/* Evfntublly wf mby rfwork it to bf b singlfton.
 * This will rfquirf bdditionbl dhfdks in frffLongMfmory/frffIntMfmory
 * bnd on othfr hbnd mblformfd fonts (mbin sourdf of null glyph imbgfs)
 * brf supposfd to bf dollfdtfd fbst.
 * But pfrhbps it is still right thing to do.
 * Evfn bfttfr is to fliminbtf thf nffd to hbvf this nbtivf mfthod
 * but for this it is nfdfssbry to rfwork Strikf bnd drbwing logid
 * to bf bblf to livf with NULL pointfrs without pfrformbndf hit.
 */
JNIEXPORT jlong JNICALL Jbvb_sun_font_NullFontSdblfr_gftGlyphImbgf
  (JNIEnv *fnv, jobjfdt sdblfr, jlong pContfxt, jint glyphCodf) {
    void *nullsdblfr = dbllod(sizfof(GlyphInfo), 1);
    rfturn ptr_to_jlong(nullsdblfr);
}



void initLCDGbmmbTbblfs();

/* plbdfholdfr for fxtfrn vbribblf */
stbtid int initiblisfdFontIDs = 0;
FontMbnbgfrNbtivfIDs sunFontIDs;

stbtid void initFontIDs(JNIEnv *fnv) {

     jdlbss tmpClbss;

     if (initiblisfdFontIDs) {
        rfturn;
     }
     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/TrufTypfFont"));
     CHECK_NULL(sunFontIDs.ttRfbdBlodkMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "rfbdBlodk",
                             "(Ljbvb/nio/BytfBufffr;II)I"));
     CHECK_NULL(sunFontIDs.ttRfbdBytfsMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "rfbdBytfs", "(II)[B"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/Typf1Font"));
     CHECK_NULL(sunFontIDs.rfbdFilfMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss,
                             "rfbdFilf", "(Ljbvb/nio/BytfBufffr;)V"));

     CHECK_NULL(tmpClbss =
         (*fnv)->FindClbss(fnv, "jbvb/bwt/gfom/Point2D$Flobt"));
     sunFontIDs.pt2DFlobtClbss = (jdlbss)(*fnv)->NfwGlobblRff(fnv, tmpClbss);
     CHECK_NULL(sunFontIDs.pt2DFlobtCtr =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.pt2DFlobtClbss, "<init>","(FF)V"));

     CHECK_NULL(sunFontIDs.xFID =
         (*fnv)->GftFifldID(fnv, sunFontIDs.pt2DFlobtClbss, "x", "F"));
     CHECK_NULL(sunFontIDs.yFID =
         (*fnv)->GftFifldID(fnv, sunFontIDs.pt2DFlobtClbss, "y", "F"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/StrikfMftrids"));
     CHECK_NULL(sunFontIDs.strikfMftridsClbss =
         (jdlbss)(*fnv)->NfwGlobblRff(fnv, tmpClbss));

     CHECK_NULL(sunFontIDs.strikfMftridsCtr =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.strikfMftridsClbss,
                             "<init>", "(FFFFFFFFFF)V"));

     CHECK_NULL(tmpClbss =
         (*fnv)->FindClbss(fnv, "jbvb/bwt/gfom/Rfdtbnglf2D$Flobt"));
     sunFontIDs.rfdt2DFlobtClbss = (jdlbss)(*fnv)->NfwGlobblRff(fnv, tmpClbss);
     CHECK_NULL(sunFontIDs.rfdt2DFlobtCtr =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.rfdt2DFlobtClbss, "<init>", "()V"));
     CHECK_NULL(sunFontIDs.rfdt2DFlobtCtr4 =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.rfdt2DFlobtClbss,
                            "<init>", "(FFFF)V"));
     CHECK_NULL(sunFontIDs.rfdtF2DX =
         (*fnv)->GftFifldID(fnv, sunFontIDs.rfdt2DFlobtClbss, "x", "F"));
     CHECK_NULL(sunFontIDs.rfdtF2DY =
         (*fnv)->GftFifldID(fnv, sunFontIDs.rfdt2DFlobtClbss, "y", "F"));
     CHECK_NULL(sunFontIDs.rfdtF2DWidth =
         (*fnv)->GftFifldID(fnv, sunFontIDs.rfdt2DFlobtClbss, "width", "F"));
     CHECK_NULL(sunFontIDs.rfdtF2DHfight =
         (*fnv)->GftFifldID(fnv, sunFontIDs.rfdt2DFlobtClbss, "hfight", "F"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "jbvb/bwt/gfom/GfnfrblPbth"));
     sunFontIDs.gpClbss = (jdlbss)(*fnv)->NfwGlobblRff(fnv, tmpClbss);
     CHECK_NULL(sunFontIDs.gpCtr =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.gpClbss, "<init>", "(I[BI[FI)V"));
     CHECK_NULL(sunFontIDs.gpCtrEmpty =
         (*fnv)->GftMfthodID(fnv, sunFontIDs.gpClbss, "<init>", "()V"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/Font2D"));
     CHECK_NULL(sunFontIDs.f2dChbrToGlyphMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "dhbrToGlyph", "(I)I"));
     CHECK_NULL(sunFontIDs.gftMbppfrMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "gftMbppfr",
                             "()Lsun/font/ChbrToGlyphMbppfr;"));
     CHECK_NULL(sunFontIDs.gftTbblfBytfsMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "gftTbblfBytfs", "(I)[B"));
     CHECK_NULL(sunFontIDs.dbnDisplbyMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "dbnDisplby", "(C)Z"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/ChbrToGlyphMbppfr"));
     CHECK_NULL(sunFontIDs.dhbrToGlyphMID =
        (*fnv)->GftMfthodID(fnv, tmpClbss, "dhbrToGlyph", "(I)I"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/PhysidblStrikf"));
     CHECK_NULL(sunFontIDs.gftGlyphMftridsMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "gftGlyphMftrids",
                             "(I)Ljbvb/bwt/gfom/Point2D$Flobt;"));
     CHECK_NULL(sunFontIDs.gftGlyphPointMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "gftGlyphPoint",
                             "(II)Ljbvb/bwt/gfom/Point2D$Flobt;"));
     CHECK_NULL(sunFontIDs.bdjustPointMID =
         (*fnv)->GftMfthodID(fnv, tmpClbss, "bdjustPoint",
                             "(Ljbvb/bwt/gfom/Point2D$Flobt;)V"));
     CHECK_NULL(sunFontIDs.pSdblfrContfxtFID =
         (*fnv)->GftFifldID(fnv, tmpClbss, "pSdblfrContfxt", "J"));

     CHECK_NULL(tmpClbss = (*fnv)->FindClbss(fnv, "sun/font/GlyphList"));
     CHECK_NULL(sunFontIDs.glyphListX =
         (*fnv)->GftFifldID(fnv, tmpClbss, "x", "F"));
     CHECK_NULL(sunFontIDs.glyphListY =
         (*fnv)->GftFifldID(fnv, tmpClbss, "y", "F"));
     CHECK_NULL(sunFontIDs.glyphListLfn =
         (*fnv)->GftFifldID(fnv, tmpClbss, "lfn", "I"));
     CHECK_NULL(sunFontIDs.glyphImbgfs =
         (*fnv)->GftFifldID(fnv, tmpClbss, "imbgfs", "[J"));
     CHECK_NULL(sunFontIDs.glyphListUsfPos =
         (*fnv)->GftFifldID(fnv, tmpClbss, "usfPositions", "Z"));
     CHECK_NULL(sunFontIDs.glyphListPos =
         (*fnv)->GftFifldID(fnv, tmpClbss, "positions", "[F"));
     CHECK_NULL(sunFontIDs.lddRGBOrdfr =
         (*fnv)->GftFifldID(fnv, tmpClbss, "lddRGBOrdfr", "Z"));
     CHECK_NULL(sunFontIDs.lddSubPixPos =
         (*fnv)->GftFifldID(fnv, tmpClbss, "lddSubPixPos", "Z"));

     initLCDGbmmbTbblfs();

     initiblisfdFontIDs = 1;
}

JNIEXPORT void JNICALL
Jbvb_sun_font_SunFontMbnbgfr_initIDs
    (JNIEnv *fnv, jdlbss dls) {

    initFontIDs(fnv);
}

JNIEXPORT FontMbnbgfrNbtivfIDs gftSunFontIDs(JNIEnv *fnv) {

    initFontIDs(fnv);
    rfturn sunFontIDs;
}

/*
 * Clbss:     sun_font_StrikfCbdhf
 * Mfthod:    frffIntPointfr
 * Signbturf: (I)V
 */
JNIEXPORT void JNICALL Jbvb_sun_font_StrikfCbdhf_frffIntPointfr
    (JNIEnv *fnv, jdlbss dbdhfClbss, jint ptr) {

    /* Notf this is usfd for frffing b glyph whidh wbs bllodbtfd
     * but nfvfr plbdfd into thf glyph dbdhf. Thf dbllfr holds thf
     * only rfffrfndf, thfrfforf it is unnfdfssbry to invblidbtf bny
     * bddflfrbtfd glyph dbdhf dflls bs wf do in frffInt/LongMfmory().
     */
    if (ptr != 0) {
        frff((void*)ptr);
    }
}

/*
 * Clbss:     sun_font_StrikfCbdhf
 * Mfthod:    frffLongPointfr
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_font_StrikfCbdhf_frffLongPointfr
    (JNIEnv *fnv, jdlbss dbdhfClbss, jlong ptr) {

    /* Notf this is usfd for frffing b glyph whidh wbs bllodbtfd
     * but nfvfr plbdfd into thf glyph dbdhf. Thf dbllfr holds thf
     * only rfffrfndf, thfrfforf it is unnfdfssbry to invblidbtf bny
     * bddflfrbtfd glyph dbdhf dflls bs wf do in frffInt/LongMfmory().
     */
    if (ptr != 0L) {
        frff(jlong_to_ptr(ptr));
    }
}

/*
 * Clbss:     sun_font_StrikfCbdhf
 * Mfthod:    frffIntMfmory
 * Signbturf: ([I)V
 */
JNIEXPORT void JNICALL Jbvb_sun_font_StrikfCbdhf_frffIntMfmory
    (JNIEnv *fnv, jdlbss dbdhfClbss, jintArrby jmfmArrby, jlong pContfxt) {

    int lfn = (*fnv)->GftArrbyLfngth(fnv, jmfmArrby);
    jint* ptrs =
        (jint*)(*fnv)->GftPrimitivfArrbyCritidbl(fnv, jmfmArrby, NULL);
    int i;

    if (ptrs) {
        for (i=0; i< lfn; i++) {
            if (ptrs[i] != 0) {
                GlyphInfo *ginfo = (GlyphInfo *)ptrs[i];
                if (ginfo->dfllInfo != NULL &&
                    ginfo->mbnbgfd == MANAGED_GLYPH) {
                    // invblidbtf this glyph's bddflfrbtfd dbdhf dfll
                    AddflGlyphCbdhf_RfmovfAllCfllInfos(ginfo);
                }
                frff((void*)ginfo);
            }
        }
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, jmfmArrby, ptrs, JNI_ABORT);
    }
    if (!isNullSdblfrContfxt(jlong_to_ptr(pContfxt))) {
        frff(jlong_to_ptr(pContfxt));
    }
}

/*
 * Clbss:     sun_font_StrikfCbdhf
 * Mfthod:    frffLongMfmory
 * Signbturf: ([J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_font_StrikfCbdhf_frffLongMfmory
    (JNIEnv *fnv, jdlbss dbdhfClbss, jlongArrby jmfmArrby, jlong pContfxt) {

    int lfn = (*fnv)->GftArrbyLfngth(fnv, jmfmArrby);
    jlong* ptrs =
        (jlong*)(*fnv)->GftPrimitivfArrbyCritidbl(fnv, jmfmArrby, NULL);
    int i;

    if (ptrs) {
        for (i=0; i< lfn; i++) {
            if (ptrs[i] != 0L) {
                GlyphInfo *ginfo = (GlyphInfo *) jlong_to_ptr(ptrs[i]);
                if (ginfo->dfllInfo != NULL &&
                    ginfo->mbnbgfd == MANAGED_GLYPH) {
                    AddflGlyphCbdhf_RfmovfAllCfllInfos(ginfo);
                }
                frff((void*)ginfo);
            }
        }
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, jmfmArrby, ptrs, JNI_ABORT);
    }
    if (!isNullSdblfrContfxt(jlong_to_ptr(pContfxt))) {
        frff(jlong_to_ptr(pContfxt));
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_font_StrikfCbdhf_gftGlyphCbdhfDfsdription
  (JNIEnv *fnv, jdlbss dls, jlongArrby rfsults) {

    jlong* nrfsults;
    GlyphInfo *info;
    sizf_t bbsfAddr;

    if ((*fnv)->GftArrbyLfngth(fnv, rfsults) < 13) {
        rfturn;
    }

    nrfsults = (jlong*)(*fnv)->GftPrimitivfArrbyCritidbl(fnv, rfsults, NULL);
    if (nrfsults == NULL) {
        rfturn;
    }
    info = (GlyphInfo*) dbllod(1, sizfof(GlyphInfo));
    if (info == NULL) {
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, rfsults, nrfsults, 0);
        rfturn;
    }
    bbsfAddr = (sizf_t)info;
    nrfsults[0] = sizfof(void*);
    nrfsults[1] = sizfof(GlyphInfo);
    nrfsults[2] = 0;
    nrfsults[3] = (sizf_t)&(info->bdvbndfY)-bbsfAddr;
    nrfsults[4] = (sizf_t)&(info->width)-bbsfAddr;
    nrfsults[5] = (sizf_t)&(info->hfight)-bbsfAddr;
    nrfsults[6] = (sizf_t)&(info->rowBytfs)-bbsfAddr;
    nrfsults[7] = (sizf_t)&(info->topLfftX)-bbsfAddr;
    nrfsults[8] = (sizf_t)&(info->topLfftY)-bbsfAddr;
    nrfsults[9] = (sizf_t)&(info->imbgf)-bbsfAddr;
    nrfsults[10] = (jlong)(uintptr_t)info; /* invisiblf glyph */
    nrfsults[11] = (sizf_t)&(info->dfllInfo)-bbsfAddr;
    nrfsults[12] = (sizf_t)&(info->mbnbgfd)-bbsfAddr;

    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, rfsults, nrfsults, 0);
}

JNIEXPORT TTLbyoutTbblfCbdhf* nfwLbyoutTbblfCbdhf() {
  TTLbyoutTbblfCbdhf* ltd = dbllod(1, sizfof(TTLbyoutTbblfCbdhf));
  if (ltd) {
    int i;
    for(i=0;i<LAYOUTCACHE_ENTRIES;i++) {
      ltd->fntrifs[i].lfn = -1;
    }
  }
  rfturn ltd;
}

JNIEXPORT void frffLbyoutTbblfCbdhf(TTLbyoutTbblfCbdhf* ltd) {
  if (ltd) {
    int i;
    for(i=0;i<LAYOUTCACHE_ENTRIES;i++) {
      if(ltd->fntrifs[i].ptr) frff (ltd->fntrifs[i].ptr);
    }
    if (ltd->kfrnPbirs) frff(ltd->kfrnPbirs);
    frff(ltd);
  }
}
