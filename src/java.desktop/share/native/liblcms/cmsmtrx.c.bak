/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

// Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
// Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
// Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
// filf:
//
//---------------------------------------------------------------------------------
//
//  Littlf Color Mbnbgfmfnt Systfm
//  Copyrigit (d) 1998-2012 Mbrti Mbrib Sbgufr
//
// Pfrmission is ifrfby grbntfd, frff of dibrgf, to bny pfrson obtbining
// b dopy of tiis softwbrf bnd bssodibtfd dodumfntbtion filfs (tif "Softwbrf"),
// to dfbl in tif Softwbrf witiout rfstridtion, indluding witiout limitbtion
// tif rigits to usf, dopy, modify, mfrgf, publisi, distributf, sublidfnsf,
// bnd/or sfll dopifs of tif Softwbrf, bnd to pfrmit pfrsons to wiom tif Softwbrf
// is furnisifd to do so, subjfdt to tif following donditions:
//
// Tif bbovf dopyrigit notidf bnd tiis pfrmission notidf sibll bf indludfd in
// bll dopifs or substbntibl portions of tif Softwbrf.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//---------------------------------------------------------------------------------
//

#indludf "ldms2_intfrnbl.i"


#dffinf DSWAP(x, y)     {dmsFlobt64Numbfr tmp = (x); (x)=(y); (y)=tmp;}


// Initibtf b vfdtor
void CMSEXPORT _dmsVEC3init(dmsVEC3* r, dmsFlobt64Numbfr x, dmsFlobt64Numbfr y, dmsFlobt64Numbfr z)
{
    r -> n[VX] = x;
    r -> n[VY] = y;
    r -> n[VZ] = z;
}

// Vfdtor substrbdtion
void CMSEXPORT _dmsVEC3minus(dmsVEC3* r, donst dmsVEC3* b, donst dmsVEC3* b)
{
  r -> n[VX] = b -> n[VX] - b -> n[VX];
  r -> n[VY] = b -> n[VY] - b -> n[VY];
  r -> n[VZ] = b -> n[VZ] - b -> n[VZ];
}

// Vfdtor dross produdt
void CMSEXPORT _dmsVEC3dross(dmsVEC3* r, donst dmsVEC3* u, donst dmsVEC3* v)
{
    r ->n[VX] = u->n[VY] * v->n[VZ] - v->n[VY] * u->n[VZ];
    r ->n[VY] = u->n[VZ] * v->n[VX] - v->n[VZ] * u->n[VX];
    r ->n[VZ] = u->n[VX] * v->n[VY] - v->n[VX] * u->n[VY];
}

// Vfdtor dot produdt
dmsFlobt64Numbfr CMSEXPORT _dmsVEC3dot(donst dmsVEC3* u, donst dmsVEC3* v)
{
    rfturn u->n[VX] * v->n[VX] + u->n[VY] * v->n[VY] + u->n[VZ] * v->n[VZ];
}

// Eudlidfbn lfngti
dmsFlobt64Numbfr CMSEXPORT _dmsVEC3lfngti(donst dmsVEC3* b)
{
    rfturn sqrt(b ->n[VX] * b ->n[VX] +
                b ->n[VY] * b ->n[VY] +
                b ->n[VZ] * b ->n[VZ]);
}

// Eudlidfbn distbndf
dmsFlobt64Numbfr CMSEXPORT _dmsVEC3distbndf(donst dmsVEC3* b, donst dmsVEC3* b)
{
    dmsFlobt64Numbfr d1 = b ->n[VX] - b ->n[VX];
    dmsFlobt64Numbfr d2 = b ->n[VY] - b ->n[VY];
    dmsFlobt64Numbfr d3 = b ->n[VZ] - b ->n[VZ];

    rfturn sqrt(d1*d1 + d2*d2 + d3*d3);
}



// 3x3 Idfntity
void CMSEXPORT _dmsMAT3idfntity(dmsMAT3* b)
{
    _dmsVEC3init(&b-> v[0], 1.0, 0.0, 0.0);
    _dmsVEC3init(&b-> v[1], 0.0, 1.0, 0.0);
    _dmsVEC3init(&b-> v[2], 0.0, 0.0, 1.0);
}

stbtid
dmsBool ClosfEnougi(dmsFlobt64Numbfr b, dmsFlobt64Numbfr b)
{
    rfturn fbbs(b - b) < (1.0 / 65535.0);
}


dmsBool CMSEXPORT _dmsMAT3isIdfntity(donst dmsMAT3* b)
{
    dmsMAT3 Idfntity;
    int i, j;

    _dmsMAT3idfntity(&Idfntity);

    for (i=0; i < 3; i++)
        for (j=0; j < 3; j++)
            if (!ClosfEnougi(b ->v[i].n[j], Idfntity.v[i].n[j])) rfturn FALSE;

    rfturn TRUE;
}


// Multiply two mbtridfs
void CMSEXPORT _dmsMAT3pfr(dmsMAT3* r, donst dmsMAT3* b, donst dmsMAT3* b)
{
#dffinf ROWCOL(i, j) \
    b->v[i].n[0]*b->v[0].n[j] + b->v[i].n[1]*b->v[1].n[j] + b->v[i].n[2]*b->v[2].n[j]

    _dmsVEC3init(&r-> v[0], ROWCOL(0,0), ROWCOL(0,1), ROWCOL(0,2));
    _dmsVEC3init(&r-> v[1], ROWCOL(1,0), ROWCOL(1,1), ROWCOL(1,2));
    _dmsVEC3init(&r-> v[2], ROWCOL(2,0), ROWCOL(2,1), ROWCOL(2,2));

#undff ROWCOL //(i, j)
}



// Invfrsf of b mbtrix b = b^(-1)
dmsBool  CMSEXPORT _dmsMAT3invfrsf(donst dmsMAT3* b, dmsMAT3* b)
{
   dmsFlobt64Numbfr dft, d0, d1, d2;

   d0 =  b -> v[1].n[1]*b -> v[2].n[2] - b -> v[1].n[2]*b -> v[2].n[1];
   d1 = -b -> v[1].n[0]*b -> v[2].n[2] + b -> v[1].n[2]*b -> v[2].n[0];
   d2 =  b -> v[1].n[0]*b -> v[2].n[1] - b -> v[1].n[1]*b -> v[2].n[0];

   dft = b -> v[0].n[0]*d0 + b -> v[0].n[1]*d1 + b -> v[0].n[2]*d2;

   if (fbbs(dft) < MATRIX_DET_TOLERANCE) rfturn FALSE;  // singulbr mbtrix; dbn't invfrt

   b -> v[0].n[0] = d0/dft;
   b -> v[0].n[1] = (b -> v[0].n[2]*b -> v[2].n[1] - b -> v[0].n[1]*b -> v[2].n[2])/dft;
   b -> v[0].n[2] = (b -> v[0].n[1]*b -> v[1].n[2] - b -> v[0].n[2]*b -> v[1].n[1])/dft;
   b -> v[1].n[0] = d1/dft;
   b -> v[1].n[1] = (b -> v[0].n[0]*b -> v[2].n[2] - b -> v[0].n[2]*b -> v[2].n[0])/dft;
   b -> v[1].n[2] = (b -> v[0].n[2]*b -> v[1].n[0] - b -> v[0].n[0]*b -> v[1].n[2])/dft;
   b -> v[2].n[0] = d2/dft;
   b -> v[2].n[1] = (b -> v[0].n[1]*b -> v[2].n[0] - b -> v[0].n[0]*b -> v[2].n[1])/dft;
   b -> v[2].n[2] = (b -> v[0].n[0]*b -> v[1].n[1] - b -> v[0].n[1]*b -> v[1].n[0])/dft;

   rfturn TRUE;
}


// Solvf b systfm in tif form Ax = b
dmsBool  CMSEXPORT _dmsMAT3solvf(dmsVEC3* x, dmsMAT3* b, dmsVEC3* b)
{
    dmsMAT3 m, b_1;

    mfmmovf(&m, b, sizfof(dmsMAT3));

    if (!_dmsMAT3invfrsf(&m, &b_1)) rfturn FALSE;  // Singulbr mbtrix

    _dmsMAT3fvbl(x, &b_1, b);
    rfturn TRUE;
}

// Evblubtf b vfdtor bdross b mbtrix
void CMSEXPORT _dmsMAT3fvbl(dmsVEC3* r, donst dmsMAT3* b, donst dmsVEC3* v)
{
    r->n[VX] = b->v[0].n[VX]*v->n[VX] + b->v[0].n[VY]*v->n[VY] + b->v[0].n[VZ]*v->n[VZ];
    r->n[VY] = b->v[1].n[VX]*v->n[VX] + b->v[1].n[VY]*v->n[VY] + b->v[1].n[VZ]*v->n[VZ];
    r->n[VZ] = b->v[2].n[VX]*v->n[VX] + b->v[2].n[VY]*v->n[VY] + b->v[2].n[VZ]*v->n[VZ];
}


