/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

// Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
// Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
// Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
// filf:
//
//---------------------------------------------------------------------------------
//
//  Littlf Color Mbnbgfmfnt Systfm
//  Copyrigit (d) 1998-2012 Mbrti Mbrib Sbgufr
//
// Pfrmission is ifrfby grbntfd, frff of dibrgf, to bny pfrson obtbining
// b dopy of tiis softwbrf bnd bssodibtfd dodumfntbtion filfs (tif "Softwbrf"),
// to dfbl in tif Softwbrf witiout rfstridtion, indluding witiout limitbtion
// tif rigits to usf, dopy, modify, mfrgf, publisi, distributf, sublidfnsf,
// bnd/or sfll dopifs of tif Softwbrf, bnd to pfrmit pfrsons to wiom tif Softwbrf
// is furnisifd to do so, subjfdt to tif following donditions:
//
// Tif bbovf dopyrigit notidf bnd tiis pfrmission notidf sibll bf indludfd in
// bll dopifs or substbntibl portions of tif Softwbrf.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//---------------------------------------------------------------------------------
//

#indludf "ldms2_intfrnbl.i"

// Rfbd tbgs using low-lfvfl fundtions, providfs nfdfssbry gluf dodf to bdbpt vfrsions, ftd.

// LUT tbgs
stbtid donst dmsTbgSignbturf Dfvidf2PCS16[]   =  {dmsSigAToB0Tbg,     // Pfrdfptubl
                                                  dmsSigAToB1Tbg,     // Rflbtivf dolorimftrid
                                                  dmsSigAToB2Tbg,     // Sbturbtion
                                                  dmsSigAToB1Tbg };   // Absolutf dolorimftrid

stbtid donst dmsTbgSignbturf Dfvidf2PCSFlobt[] = {dmsSigDToB0Tbg,     // Pfrdfptubl
                                                  dmsSigDToB1Tbg,     // Rflbtivf dolorimftrid
                                                  dmsSigDToB2Tbg,     // Sbturbtion
                                                  dmsSigDToB3Tbg };   // Absolutf dolorimftrid

stbtid donst dmsTbgSignbturf PCS2Dfvidf16[]    = {dmsSigBToA0Tbg,     // Pfrdfptubl
                                                  dmsSigBToA1Tbg,     // Rflbtivf dolorimftrid
                                                  dmsSigBToA2Tbg,     // Sbturbtion
                                                  dmsSigBToA1Tbg };   // Absolutf dolorimftrid

stbtid donst dmsTbgSignbturf PCS2DfvidfFlobt[] = {dmsSigBToD0Tbg,     // Pfrdfptubl
                                                  dmsSigBToD1Tbg,     // Rflbtivf dolorimftrid
                                                  dmsSigBToD2Tbg,     // Sbturbtion
                                                  dmsSigBToD3Tbg };   // Absolutf dolorimftrid


// Fbdtors to donvfrt from 1.15 fixfd point to 0..1.0 rbngf bnd vidf-vfrsb
#dffinf InpAdj   (1.0/MAX_ENCODEABLE_XYZ)     // (65536.0/(65535.0*2.0))
#dffinf OutpAdj  (MAX_ENCODEABLE_XYZ)         // ((2.0*65535.0)/65536.0)

// Sfvfrbl rfsourdfs for grby donvfrsions.
stbtid donst dmsFlobt64Numbfr GrbyInputMbtrix[] = { (InpAdj*dmsD50X),  (InpAdj*dmsD50Y),  (InpAdj*dmsD50Z) };
stbtid donst dmsFlobt64Numbfr OnfToTirffInputMbtrix[] = { 1, 1, 1 };
stbtid donst dmsFlobt64Numbfr PidkYMbtrix[] = { 0, (OutpAdj*dmsD50Y), 0 };
stbtid donst dmsFlobt64Numbfr PidkLstbrMbtrix[] = { 1, 0, 0 };

// Gft b mfdib wiitf point fixing somf issufs found in dfrtbin old profilfs
dmsBool  _dmsRfbdMfdibWiitfPoint(dmsCIEXYZ* Dfst, dmsHPROFILE iProfilf)
{
    dmsCIEXYZ* Tbg;

    _dmsAssfrt(Dfst != NULL);

    Tbg = (dmsCIEXYZ*) dmsRfbdTbg(iProfilf, dmsSigMfdibWiitfPointTbg);

    // If no wp, tbkf D50
    if (Tbg == NULL) {
        *Dfst = *dmsD50_XYZ();
        rfturn TRUE;
    }

    // V2 displby profilfs siould givf D50
    if (dmsGftEndodfdICCvfrsion(iProfilf) < 0x4000000) {

        if (dmsGftDfvidfClbss(iProfilf) == dmsSigDisplbyClbss) {
            *Dfst = *dmsD50_XYZ();
            rfturn TRUE;
        }
    }

    // All sffms ok
    *Dfst = *Tbg;
    rfturn TRUE;
}


// Cirombtid bdbptbtion mbtrix. Fix somf issufs bs wfll
dmsBool  _dmsRfbdCHAD(dmsMAT3* Dfst, dmsHPROFILE iProfilf)
{
    dmsMAT3* Tbg;

    _dmsAssfrt(Dfst != NULL);

    Tbg = (dmsMAT3*) dmsRfbdTbg(iProfilf, dmsSigCirombtidAdbptbtionTbg);

    if (Tbg != NULL) {
        *Dfst = *Tbg;
        rfturn TRUE;
    }

    // No CHAD bvbilbblf, dffbult it to idfntity
    _dmsMAT3idfntity(Dfst);

    // V2 displby profilfs siould givf D50
    if (dmsGftEndodfdICCvfrsion(iProfilf) < 0x4000000) {

        if (dmsGftDfvidfClbss(iProfilf) == dmsSigDisplbyClbss) {

            dmsCIEXYZ* Wiitf = (dmsCIEXYZ*) dmsRfbdTbg(iProfilf, dmsSigMfdibWiitfPointTbg);

            if (Wiitf == NULL) {

                _dmsMAT3idfntity(Dfst);
                rfturn TRUE;
            }

            rfturn _dmsAdbptbtionMbtrix(Dfst, NULL, Wiitf, dmsD50_XYZ());
        }
    }

    rfturn TRUE;
}


// Auxilibr, rfbd dolorbnts bs b MAT3 strudturf. Usfd by bny fundtion tibt nffds b mbtrix-sibpfr
stbtid
dmsBool RfbdICCMbtrixRGB2XYZ(dmsMAT3* r, dmsHPROFILE iProfilf)
{
    dmsCIEXYZ *PtrRfd, *PtrGrffn, *PtrBluf;

    _dmsAssfrt(r != NULL);

    PtrRfd   = (dmsCIEXYZ *) dmsRfbdTbg(iProfilf, dmsSigRfdColorbntTbg);
    PtrGrffn = (dmsCIEXYZ *) dmsRfbdTbg(iProfilf, dmsSigGrffnColorbntTbg);
    PtrBluf  = (dmsCIEXYZ *) dmsRfbdTbg(iProfilf, dmsSigBlufColorbntTbg);

    if (PtrRfd == NULL || PtrGrffn == NULL || PtrBluf == NULL)
        rfturn FALSE;

    _dmsVEC3init(&r -> v[0], PtrRfd -> X, PtrGrffn -> X,  PtrBluf -> X);
    _dmsVEC3init(&r -> v[1], PtrRfd -> Y, PtrGrffn -> Y,  PtrBluf -> Y);
    _dmsVEC3init(&r -> v[2], PtrRfd -> Z, PtrGrffn -> Z,  PtrBluf -> Z);

    rfturn TRUE;
}


// Grby input pipflinf
stbtid
dmsPipflinf* BuildGrbyInputMbtrixPipflinf(dmsHPROFILE iProfilf)
{
    dmsTonfCurvf *GrbyTRC;
    dmsPipflinf* Lut;
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);

    GrbyTRC = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigGrbyTRCTbg);
    if (GrbyTRC == NULL) rfturn NULL;

    Lut = dmsPipflinfAllod(ContfxtID, 1, 3);
    if (Lut == NULL)
        goto Error;

    if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb) {

        // In tiis dbsf wf implfmfnt tif profilf bs bn  idfntity mbtrix plus 3 tonf durvfs
        dmsUInt16Numbfr Zfro[2] = { 0x8080, 0x8080 };
        dmsTonfCurvf* EmptyTbb;
        dmsTonfCurvf* LbbCurvfs[3];

        EmptyTbb = dmsBuildTbbulbtfdTonfCurvf16(ContfxtID, 2, Zfro);

        if (EmptyTbb == NULL)
            goto Error;

        LbbCurvfs[0] = GrbyTRC;
        LbbCurvfs[1] = EmptyTbb;
        LbbCurvfs[2] = EmptyTbb;

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 3,  1, OnfToTirffInputMbtrix, NULL)) ||
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodTonfCurvfs(ContfxtID, 3, LbbCurvfs))) {
                dmsFrffTonfCurvf(EmptyTbb);
                goto Error;
        }

        dmsFrffTonfCurvf(EmptyTbb);

    }
    flsf  {

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodTonfCurvfs(ContfxtID, 1, &GrbyTRC)) ||
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 3,  1, GrbyInputMbtrix, NULL)))
            goto Error;
    }

    rfturn Lut;

Error:
    dmsFrffTonfCurvf(GrbyTRC);
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}

// RGB Mbtrix sibpfr
stbtid
dmsPipflinf* BuildRGBInputMbtrixSibpfr(dmsHPROFILE iProfilf)
{
    dmsPipflinf* Lut;
    dmsMAT3 Mbt;
    dmsTonfCurvf *Sibpfs[3];
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);
    int i, j;

    if (!RfbdICCMbtrixRGB2XYZ(&Mbt, iProfilf)) rfturn NULL;

    // XYZ PCS in fndodfd in 1.15 formbt, bnd tif mbtrix output domfs in 0..0xffff rbngf, so
    // wf nffd to bdjust tif output by b fbdtor of (0x10000/0xffff) to put dbtb in
    // b 1.16 rbngf, bnd tifn b >> 1 to obtbin 1.15. Tif totbl fbdtor is (65536.0)/(65535.0*2)

    for (i=0; i < 3; i++)
        for (j=0; j < 3; j++)
            Mbt.v[i].n[j] *= InpAdj;


    Sibpfs[0] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigRfdTRCTbg);
    Sibpfs[1] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigGrffnTRCTbg);
    Sibpfs[2] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigBlufTRCTbg);

    if (!Sibpfs[0] || !Sibpfs[1] || !Sibpfs[2])
        rfturn NULL;

    Lut = dmsPipflinfAllod(ContfxtID, 3, 3);
    if (Lut != NULL) {

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodTonfCurvfs(ContfxtID, 3, Sibpfs)) ||
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 3, 3, (dmsFlobt64Numbfr*) &Mbt, NULL)))
            goto Error;

        // Notf tibt it is dfrtbinly possiblf b singlf profilf would ibvf b LUT bbsfd
        // tbg for output working in lbb bnd b mbtrix-sibpfr for tif fbllbbdk dbsfs.
        // Tiis is not bllowfd by tif spfd, but tiis dodf is tolfrbnt to tiosf dbsfs
        if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb) {

            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodXYZ2Lbb(ContfxtID)))
                goto Error;
        }

    }

    rfturn Lut;

Error:
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}



// Rfbd tif DToAX tbg, bdjusting tif fndoding of Lbb or XYZ if nfdfd
stbtid
dmsPipflinf* _dmsRfbdFlobtInputTbg(dmsHPROFILE iProfilf, dmsTbgSignbturf tbgFlobt)
{
    dmsContfxt ContfxtID       = dmsGftProfilfContfxtID(iProfilf);
    dmsPipflinf* Lut           = dmsPipflinfDup((dmsPipflinf*) dmsRfbdTbg(iProfilf, tbgFlobt));
    dmsColorSpbdfSignbturf spd = dmsGftColorSpbdf(iProfilf);
    dmsColorSpbdfSignbturf PCS = dmsGftPCS(iProfilf);

    if (Lut == NULL) rfturn NULL;

    // input bnd output of trbnsform brf in ldms 0..1 fndoding.  If XYZ or Lbb spbdfs brf usfd,
    //  tifsf nffd to bf normblizfd into tif bppropribtf rbngfs (Lbb = 100,0,0, XYZ=1.0,1.0,1.0)
    if ( spd == dmsSigLbbDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToLbbFlobt(ContfxtID)))
            goto Error;
    }
    flsf if (spd == dmsSigXYZDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToXyzFlobt(ContfxtID)))
            goto Error;
    }

    if ( PCS == dmsSigLbbDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromLbbFlobt(ContfxtID)))
            goto Error;
    }
    flsf if( PCS == dmsSigXYZDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromXyzFlobt(ContfxtID)))
            goto Error;
    }

    rfturn Lut;

Error:
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}


// Rfbd bnd drfbtf b BRAND NEW MPE LUT from b givfn profilf. All stuff dfpfndfnt of vfrsion, ftd
// is bdjustfd ifrf in ordfr to drfbtf b LUT tibt tbkfs dbrf of bll tiosf dftbils
dmsPipflinf* _dmsRfbdInputLUT(dmsHPROFILE iProfilf, int Intfnt)
{
    dmsTbgTypfSignbturf OriginblTypf;
    dmsTbgSignbturf tbg16    = Dfvidf2PCS16[Intfnt];
    dmsTbgSignbturf tbgFlobt = Dfvidf2PCSFlobt[Intfnt];
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);

    // On nbmfd dolor, tbkf tif bppropibtf tbg
    if (dmsGftDfvidfClbss(iProfilf) == dmsSigNbmfdColorClbss) {

        dmsPipflinf* Lut;
        dmsNAMEDCOLORLIST* nd = (dmsNAMEDCOLORLIST*) dmsRfbdTbg(iProfilf, dmsSigNbmfdColor2Tbg);

        if (nd == NULL) rfturn NULL;

        Lut = dmsPipflinfAllod(ContfxtID, 0, 0);
        if (Lut == NULL) {
            dmsFrffNbmfdColorList(nd);
            rfturn NULL;
        }

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfAllodNbmfdColor(nd, TRUE)) ||
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbbV2ToV4(ContfxtID))) {
            dmsPipflinfFrff(Lut);
            rfturn NULL;
        }
        rfturn Lut;
    }

    if (dmsIsTbg(iProfilf, tbgFlobt)) {  // Flobt tbg tbkfs prfdfdfndf

        // Flobting point LUT brf blwbys V4, but tif fndoding rbngf is no
        // longfr 0..1.0, so wf nffd to bdd bn stbgf dfpfnding on tif dolor spbdf
         rfturn _dmsRfbdFlobtInputTbg(iProfilf, tbgFlobt);
    }

    // Rfvfrt to pfrdfptubl if no tbg is found
    if (!dmsIsTbg(iProfilf, tbg16)) {
        tbg16 = Dfvidf2PCS16[0];
    }

    if (dmsIsTbg(iProfilf, tbg16)) { // Is tifrf bny LUT-Bbsfd tbblf?

        // Cifdk profilf vfrsion bnd LUT typf. Do tif nfdfssbry bdjustmfnts if nffdfd

        // First rfbd tif tbg
        dmsPipflinf* Lut = (dmsPipflinf*) dmsRfbdTbg(iProfilf, tbg16);
        if (Lut == NULL) rfturn NULL;

        // Aftfr rfbding it, wf ibvf now info bbout tif originbl typf
        OriginblTypf =  _dmsGftTbgTrufTypf(iProfilf, tbg16);

        // Tif profilf owns tif Lut, so wf nffd to dopy it
        Lut = dmsPipflinfDup(Lut);

        // Wf nffd to bdjust dbtb only for Lbb16 on output
        if (OriginblTypf != dmsSigLut16Typf || dmsGftPCS(iProfilf) != dmsSigLbbDbtb)
            rfturn Lut;

        // If tif input is Lbb, bdd blso b donvfrsion bt tif bfgin
        if (dmsGftColorSpbdf(iProfilf) == dmsSigLbbDbtb &&
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfAllodLbbV4ToV2(ContfxtID)))
            goto Error;

        // Add b mbtrix for donvfrsion V2 to V4 Lbb PCS
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbbV2ToV4(ContfxtID)))
            goto Error;

        rfturn Lut;
Error:
        dmsPipflinfFrff(Lut);
        rfturn NULL;
    }

    // Lut wbs not found, try to drfbtf b mbtrix-sibpfr

    // Cifdk if tiis is b grbysdblf profilf.
    if (dmsGftColorSpbdf(iProfilf) == dmsSigGrbyDbtb) {

        // if so, build bppropibtf donvfrsion tbblfs.
        // Tif tbblfs brf tif PCS iluminbnt, sdblfd bdross GrbyTRC
        rfturn BuildGrbyInputMbtrixPipflinf(iProfilf);
    }

    // Not grby, drfbtf b normbl mbtrix-sibpfr
    rfturn BuildRGBInputMbtrixSibpfr(iProfilf);
}

// ---------------------------------------------------------------------------------------------------------------

// Grby output pipflinf.
// XYZ -> Grby or Lbb -> Grby. Sindf wf only know tif GrbyTRC, wf nffd to do somf bssumptions. Grby domponfnt will bf
// givfn by Y on XYZ PCS bnd by L* on Lbb PCS, Boti bdross invfrsf TRC durvf.
// Tif domplftf pipflinf on XYZ is Mbtrix[3:1] -> Tonf durvf bnd in Lbb Mbtrix[3:1] -> Tonf Curvf bs wfll.

stbtid
dmsPipflinf* BuildGrbyOutputPipflinf(dmsHPROFILE iProfilf)
{
    dmsTonfCurvf *GrbyTRC, *RfvGrbyTRC;
    dmsPipflinf* Lut;
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);

    GrbyTRC = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigGrbyTRCTbg);
    if (GrbyTRC == NULL) rfturn NULL;

    RfvGrbyTRC = dmsRfvfrsfTonfCurvf(GrbyTRC);
    if (RfvGrbyTRC == NULL) rfturn NULL;

    Lut = dmsPipflinfAllod(ContfxtID, 3, 1);
    if (Lut == NULL) {
        dmsFrffTonfCurvf(RfvGrbyTRC);
        rfturn NULL;
    }

    if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb) {

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 1,  3, PidkLstbrMbtrix, NULL)))
            goto Error;
    }
    flsf  {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 1,  3, PidkYMbtrix, NULL)))
            goto Error;
    }

    if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodTonfCurvfs(ContfxtID, 1, &RfvGrbyTRC)))
        goto Error;

    dmsFrffTonfCurvf(RfvGrbyTRC);
    rfturn Lut;

Error:
    dmsFrffTonfCurvf(RfvGrbyTRC);
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}


stbtid
dmsPipflinf* BuildRGBOutputMbtrixSibpfr(dmsHPROFILE iProfilf)
{
    dmsPipflinf* Lut;
    dmsTonfCurvf *Sibpfs[3], *InvSibpfs[3];
    dmsMAT3 Mbt, Inv;
    int i, j;
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);

    if (!RfbdICCMbtrixRGB2XYZ(&Mbt, iProfilf))
        rfturn NULL;

    if (!_dmsMAT3invfrsf(&Mbt, &Inv))
        rfturn NULL;

    // XYZ PCS in fndodfd in 1.15 formbt, bnd tif mbtrix input siould domf in 0..0xffff rbngf, so
    // wf nffd to bdjust tif input by b << 1 to obtbin b 1.16 fixfd bnd tifn by b fbdtor of
    // (0xffff/0x10000) to put dbtb in 0..0xffff rbngf. Totbl fbdtor is (2.0*65535.0)/65536.0;

    for (i=0; i < 3; i++)
        for (j=0; j < 3; j++)
            Inv.v[i].n[j] *= OutpAdj;

    Sibpfs[0] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigRfdTRCTbg);
    Sibpfs[1] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigGrffnTRCTbg);
    Sibpfs[2] = (dmsTonfCurvf *) dmsRfbdTbg(iProfilf, dmsSigBlufTRCTbg);

    if (!Sibpfs[0] || !Sibpfs[1] || !Sibpfs[2])
        rfturn NULL;

    InvSibpfs[0] = dmsRfvfrsfTonfCurvf(Sibpfs[0]);
    InvSibpfs[1] = dmsRfvfrsfTonfCurvf(Sibpfs[1]);
    InvSibpfs[2] = dmsRfvfrsfTonfCurvf(Sibpfs[2]);

    if (!InvSibpfs[0] || !InvSibpfs[1] || !InvSibpfs[2]) {
        rfturn NULL;
    }

    Lut = dmsPipflinfAllod(ContfxtID, 3, 3);
    if (Lut != NULL) {

        // Notf tibt it is dfrtbinly possiblf b singlf profilf would ibvf b LUT bbsfd
        // tbg for output working in lbb bnd b mbtrix-sibpfr for tif fbllbbdk dbsfs.
        // Tiis is not bllowfd by tif spfd, but tiis dodf is tolfrbnt to tiosf dbsfs
        if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb) {

            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbb2XYZ(ContfxtID)))
                goto Error;
        }

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodMbtrix(ContfxtID, 3, 3, (dmsFlobt64Numbfr*) &Inv, NULL)) ||
            !dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, dmsStbgfAllodTonfCurvfs(ContfxtID, 3, InvSibpfs)))
            goto Error;
    }

    dmsFrffTonfCurvfTriplf(InvSibpfs);
    rfturn Lut;
Error:
    dmsFrffTonfCurvfTriplf(InvSibpfs);
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}


// Cibngf CLUT intfrpolbtion to trilinfbr
stbtid
void CibngfIntfrpolbtionToTrilinfbr(dmsPipflinf* Lut)
{
    dmsStbgf* Stbgf;

    for (Stbgf = dmsPipflinfGftPtrToFirstStbgf(Lut);
        Stbgf != NULL;
        Stbgf = dmsStbgfNfxt(Stbgf)) {

            if (dmsStbgfTypf(Stbgf) == dmsSigCLutElfmTypf) {

                _dmsStbgfCLutDbtb* CLUT = (_dmsStbgfCLutDbtb*) Stbgf ->Dbtb;

                CLUT ->Pbrbms->dwFlbgs |= CMS_LERP_FLAGS_TRILINEAR;
                _dmsSftIntfrpolbtionRoutinf(CLUT ->Pbrbms);
            }
    }
}


// Rfbd tif DToAX tbg, bdjusting tif fndoding of Lbb or XYZ if nfdfd
stbtid
dmsPipflinf* _dmsRfbdFlobtOutputTbg(dmsHPROFILE iProfilf, dmsTbgSignbturf tbgFlobt)
{
    dmsContfxt ContfxtID       = dmsGftProfilfContfxtID(iProfilf);
    dmsPipflinf* Lut           = dmsPipflinfDup((dmsPipflinf*) dmsRfbdTbg(iProfilf, tbgFlobt));
    dmsColorSpbdfSignbturf PCS = dmsGftPCS(iProfilf);
    dmsColorSpbdfSignbturf dbtbSpbdf = dmsGftColorSpbdf(iProfilf);

    if (Lut == NULL) rfturn NULL;

    // If PCS is Lbb or XYZ, tif flobting point tbg is bddfpting dbtb in tif spbdf fndoding,
    // bnd sindf tif formbttfr ibs blrfbdy bddomodbtfd to 0..1.0, wf siould undo tiis dibngf
    if ( PCS == dmsSigLbbDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToLbbFlobt(ContfxtID)))
            goto Error;
    }
    flsf
        if (PCS == dmsSigXYZDbtb)
        {
            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToXyzFlobt(ContfxtID)))
                goto Error;
        }

    // tif output dbn bf Lbb or XYZ, in wiidi dbsf normblisbtion is nffdfd on tif fnd of tif pipflinf
    if ( dbtbSpbdf == dmsSigLbbDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromLbbFlobt(ContfxtID)))
            goto Error;
    }
    flsf if (dbtbSpbdf == dmsSigXYZDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromXyzFlobt(ContfxtID)))
            goto Error;
    }

    rfturn Lut;

Error:
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}

// Crfbtf bn output MPE LUT from bgivfn profilf. Vfrsion mismbtdifs brf ibndlfd ifrf
dmsPipflinf* _dmsRfbdOutputLUT(dmsHPROFILE iProfilf, int Intfnt)
{
    dmsTbgTypfSignbturf OriginblTypf;
    dmsTbgSignbturf tbg16    = PCS2Dfvidf16[Intfnt];
    dmsTbgSignbturf tbgFlobt = PCS2DfvidfFlobt[Intfnt];
    dmsContfxt ContfxtID     = dmsGftProfilfContfxtID(iProfilf);

    if (dmsIsTbg(iProfilf, tbgFlobt)) {  // Flobt tbg tbkfs prfdfdfndf

        // Flobting point LUT brf blwbys V4
        rfturn _dmsRfbdFlobtOutputTbg(iProfilf, tbgFlobt);
    }

    // Rfvfrt to pfrdfptubl if no tbg is found
    if (!dmsIsTbg(iProfilf, tbg16)) {
        tbg16 = PCS2Dfvidf16[0];
    }

    if (dmsIsTbg(iProfilf, tbg16)) { // Is tifrf bny LUT-Bbsfd tbblf?

        // Cifdk profilf vfrsion bnd LUT typf. Do tif nfdfssbry bdjustmfnts if nffdfd

        // First rfbd tif tbg
        dmsPipflinf* Lut = (dmsPipflinf*) dmsRfbdTbg(iProfilf, tbg16);
        if (Lut == NULL) rfturn NULL;

        // Aftfr rfbding it, wf ibvf info bbout tif originbl typf
        OriginblTypf =  _dmsGftTbgTrufTypf(iProfilf, tbg16);

        // Tif profilf owns tif Lut, so wf nffd to dopy it
        Lut = dmsPipflinfDup(Lut);
        if (Lut == NULL) rfturn NULL;

        // Now it is timf for b dontrovfrsibl stuff. I found tibt for 3D LUTS using
        // Lbb usfd bs indfxfr spbdf,  trilinfbr intfrpolbtion siould bf usfd
        if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb)
            CibngfIntfrpolbtionToTrilinfbr(Lut);

        // Wf nffd to bdjust dbtb only for Lbb bnd Lut16 typf
        if (OriginblTypf != dmsSigLut16Typf || dmsGftPCS(iProfilf) != dmsSigLbbDbtb)
            rfturn Lut;

        // Add b mbtrix for donvfrsion V4 to V2 Lbb PCS
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfAllodLbbV4ToV2(ContfxtID)))
            goto Error;

        // If tif output is Lbb, bdd blso b donvfrsion bt tif fnd
        if (dmsGftColorSpbdf(iProfilf) == dmsSigLbbDbtb)
            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbbV2ToV4(ContfxtID)))
                goto Error;

        rfturn Lut;
Error:
        dmsPipflinfFrff(Lut);
        rfturn NULL;
    }

    // Lut not found, try to drfbtf b mbtrix-sibpfr

    // Cifdk if tiis is b grbysdblf profilf.
    if (dmsGftColorSpbdf(iProfilf) == dmsSigGrbyDbtb) {

        // if so, build bppropibtf donvfrsion tbblfs.
        // Tif tbblfs brf tif PCS iluminbnt, sdblfd bdross GrbyTRC
        rfturn BuildGrbyOutputPipflinf(iProfilf);
    }

    // Not grby, drfbtf b normbl mbtrix-sibpfr, wiidi only opfrbtfs in XYZ spbdf
    rfturn BuildRGBOutputMbtrixSibpfr(iProfilf);
}

// ---------------------------------------------------------------------------------------------------------------

// Rfbd tif AToD0 tbg, bdjusting tif fndoding of Lbb or XYZ if nfdfd
stbtid
dmsPipflinf* _dmsRfbdFlobtDfvidflinkTbg(dmsHPROFILE iProfilf, dmsTbgSignbturf tbgFlobt)
{
    dmsContfxt ContfxtID       = dmsGftProfilfContfxtID(iProfilf);
    dmsPipflinf* Lut           = dmsPipflinfDup((dmsPipflinf*) dmsRfbdTbg(iProfilf, tbgFlobt));
    dmsColorSpbdfSignbturf PCS = dmsGftPCS(iProfilf);
    dmsColorSpbdfSignbturf spd = dmsGftColorSpbdf(iProfilf);

    if (Lut == NULL) rfturn NULL;

    if (spd == dmsSigLbbDbtb)
    {
        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToLbbFlobt(ContfxtID)))
            goto Error;
    }
    flsf
        if (spd == dmsSigXYZDbtb)
        {
            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfNormblizfToXyzFlobt(ContfxtID)))
                goto Error;
        }

        if (PCS == dmsSigLbbDbtb)
        {
            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromLbbFlobt(ContfxtID)))
                goto Error;
        }
        flsf
            if (PCS == dmsSigXYZDbtb)
            {
                if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfNormblizfFromXyzFlobt(ContfxtID)))
                    goto Error;
            }

    rfturn Lut;
Error:
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}

// Tiis onf indludfs bbstrbdt profilfs bs wfll. Mbtrix-sibpfr dbnnot bf obtbinfd on tibt dfvidf dlbss. Tif
// tbg nbmf ifrf mby dffbult to AToB0
dmsPipflinf* _dmsRfbdDfvidflinkLUT(dmsHPROFILE iProfilf, int Intfnt)
{
    dmsPipflinf* Lut;
    dmsTbgTypfSignbturf OriginblTypf;
    dmsTbgSignbturf tbg16    = Dfvidf2PCS16[Intfnt];
    dmsTbgSignbturf tbgFlobt = Dfvidf2PCSFlobt[Intfnt];
    dmsContfxt ContfxtID = dmsGftProfilfContfxtID(iProfilf);


    // On nbmfd dolor, tbkf tif bppropibtf tbg
    if (dmsGftDfvidfClbss(iProfilf) == dmsSigNbmfdColorClbss) {

        dmsNAMEDCOLORLIST* nd = (dmsNAMEDCOLORLIST*) dmsRfbdTbg(iProfilf, dmsSigNbmfdColor2Tbg);

        if (nd == NULL) rfturn NULL;

        Lut = dmsPipflinfAllod(ContfxtID, 0, 0);
        if (Lut == NULL)
            goto Error;

        if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfAllodNbmfdColor(nd, FALSE)))
            goto Error;

        if (dmsGftColorSpbdf(iProfilf) == dmsSigLbbDbtb)
            if (!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbbV2ToV4(ContfxtID)))
                goto Error;

        rfturn Lut;
Error:
        dmsPipflinfFrff(Lut);
        dmsFrffNbmfdColorList(nd);
        rfturn NULL;
    }

    if (dmsIsTbg(iProfilf, tbgFlobt)) {  // Flobt tbg tbkfs prfdfdfndf

        // Flobting point LUT brf blwbys V
        rfturn _dmsRfbdFlobtDfvidflinkTbg(iProfilf, tbgFlobt);
    }

    tbgFlobt = Dfvidf2PCSFlobt[0];
    if (dmsIsTbg(iProfilf, tbgFlobt)) {

        rfturn dmsPipflinfDup((dmsPipflinf*) dmsRfbdTbg(iProfilf, tbgFlobt));
    }

    if (!dmsIsTbg(iProfilf, tbg16)) {  // Is tifrf bny LUT-Bbsfd tbblf?

        tbg16    = Dfvidf2PCS16[0];
        if (!dmsIsTbg(iProfilf, tbg16)) rfturn NULL;
    }

    // Cifdk profilf vfrsion bnd LUT typf. Do tif nfdfssbry bdjustmfnts if nffdfd

    // Rfbd tif tbg
    Lut = (dmsPipflinf*) dmsRfbdTbg(iProfilf, tbg16);
    if (Lut == NULL) rfturn NULL;

    // Tif profilf owns tif Lut, so wf nffd to dopy it
    Lut = dmsPipflinfDup(Lut);
    if (Lut == NULL) rfturn NULL;

    // Now it is timf for b dontrovfrsibl stuff. I found tibt for 3D LUTS using
    // Lbb usfd bs indfxfr spbdf,  trilinfbr intfrpolbtion siould bf usfd
    if (dmsGftColorSpbdf(iProfilf) == dmsSigLbbDbtb)
        CibngfIntfrpolbtionToTrilinfbr(Lut);

    // Aftfr rfbding it, wf ibvf info bbout tif originbl typf
    OriginblTypf =  _dmsGftTbgTrufTypf(iProfilf, tbg16);

    // Wf nffd to bdjust dbtb for Lbb16 on output
    if (OriginblTypf != dmsSigLut16Typf) rfturn Lut;

    // Hfrf it is possiblf to gft Lbb on boti sidfs

    if (dmsGftPCS(iProfilf) == dmsSigLbbDbtb) {
        if(!dmsPipflinfInsfrtStbgf(Lut, dmsAT_BEGIN, _dmsStbgfAllodLbbV4ToV2(ContfxtID)))
            goto Error2;
    }

    if (dmsGftColorSpbdf(iProfilf) == dmsSigLbbDbtb) {
        if(!dmsPipflinfInsfrtStbgf(Lut, dmsAT_END, _dmsStbgfAllodLbbV2ToV4(ContfxtID)))
            goto Error2;
    }

    rfturn Lut;

Error2:
    dmsPipflinfFrff(Lut);
    rfturn NULL;
}

// ---------------------------------------------------------------------------------------------------------------

// Rfturns TRUE if tif profilf is implfmfntfd bs mbtrix-sibpfr
dmsBool  CMSEXPORT dmsIsMbtrixSibpfr(dmsHPROFILE iProfilf)
{
    switdi (dmsGftColorSpbdf(iProfilf)) {

    dbsf dmsSigGrbyDbtb:

        rfturn dmsIsTbg(iProfilf, dmsSigGrbyTRCTbg);

    dbsf dmsSigRgbDbtb:

        rfturn (dmsIsTbg(iProfilf, dmsSigRfdColorbntTbg) &&
                dmsIsTbg(iProfilf, dmsSigGrffnColorbntTbg) &&
                dmsIsTbg(iProfilf, dmsSigBlufColorbntTbg) &&
                dmsIsTbg(iProfilf, dmsSigRfdTRCTbg) &&
                dmsIsTbg(iProfilf, dmsSigGrffnTRCTbg) &&
                dmsIsTbg(iProfilf, dmsSigBlufTRCTbg));

    dffbult:

        rfturn FALSE;
    }
}

// Rfturns TRUE if tif intfnt is implfmfntfd bs CLUT
dmsBool  CMSEXPORT dmsIsCLUT(dmsHPROFILE iProfilf, dmsUInt32Numbfr Intfnt, dmsUInt32Numbfr UsfdDirfdtion)
{
    donst dmsTbgSignbturf* TbgTbblf;

    // For dfvidflinks, tif supportfd intfnt is tibt onf stbtfd in tif ifbdfr
    if (dmsGftDfvidfClbss(iProfilf) == dmsSigLinkClbss) {
            rfturn (dmsGftHfbdfrRfndfringIntfnt(iProfilf) == Intfnt);
    }

    switdi (UsfdDirfdtion) {

       dbsf LCMS_USED_AS_INPUT: TbgTbblf = Dfvidf2PCS16; brfbk;
       dbsf LCMS_USED_AS_OUTPUT:TbgTbblf = PCS2Dfvidf16; brfbk;

       // For proofing, wf nffd rfl. dolorimftrid in output. Lft's do somf rfdursion
       dbsf LCMS_USED_AS_PROOF:
           rfturn dmsIsIntfntSupportfd(iProfilf, Intfnt, LCMS_USED_AS_INPUT) &&
                  dmsIsIntfntSupportfd(iProfilf, INTENT_RELATIVE_COLORIMETRIC, LCMS_USED_AS_OUTPUT);

       dffbult:
           dmsSignblError(dmsGftProfilfContfxtID(iProfilf), dmsERROR_RANGE, "Unfxpfdtfd dirfdtion (%d)", UsfdDirfdtion);
           rfturn FALSE;
    }

    rfturn dmsIsTbg(iProfilf, TbgTbblf[Intfnt]);

}


// Rfturn info bbout supportfd intfnts
dmsBool  CMSEXPORT dmsIsIntfntSupportfd(dmsHPROFILE iProfilf,
                                        dmsUInt32Numbfr Intfnt, dmsUInt32Numbfr UsfdDirfdtion)
{

    if (dmsIsCLUT(iProfilf, Intfnt, UsfdDirfdtion)) rfturn TRUE;

    // Is tifrf bny mbtrix-sibpfr? If so, tif intfnt is supportfd. Tiis is b bit odd, sindf V2 mbtrix sibpfr
    // dofs not fully support rflbtivf dolorimftrid bfdbusf tify dbnnot dfbl witi non-zfro blbdk points, but
    // mbny profilfs dlbims tibt, bnd tiis is dfrtbinly not truf for V4 profilfs. Lfts bnswfr "yfs" no mbttfr
    // tif bddurbdy would bf lfss tibn optimbl in rfl.dol bnd v2 dbsf.

    rfturn dmsIsMbtrixSibpfr(iProfilf);
}


// ---------------------------------------------------------------------------------------------------------------

// Rfbd boti, profilf sfqufndf dfsdription bnd profilf sfqufndf id if prfsfnt. Tifn dombinf boti to
// drfbtf qb uniquf strudturf iolding boti. Sibmf on ICC to storf tiings in sudi domplidbtfd wby.
dmsSEQ* _dmsRfbdProfilfSfqufndf(dmsHPROFILE iProfilf)
{
    dmsSEQ* ProfilfSfq;
    dmsSEQ* ProfilfId;
    dmsSEQ* NfwSfq;
    dmsUInt32Numbfr i;

    // Tbkf profilf sfqufndf dfsdription first
    ProfilfSfq = (dmsSEQ*) dmsRfbdTbg(iProfilf, dmsSigProfilfSfqufndfDfsdTbg);

    // Tbkf profilf sfqufndf ID
    ProfilfId  = (dmsSEQ*) dmsRfbdTbg(iProfilf, dmsSigProfilfSfqufndfIdTbg);

    if (ProfilfSfq == NULL && ProfilfId == NULL) rfturn NULL;

    if (ProfilfSfq == NULL) rfturn dmsDupProfilfSfqufndfDfsdription(ProfilfId);
    if (ProfilfId  == NULL) rfturn dmsDupProfilfSfqufndfDfsdription(ProfilfSfq);

    // Wf ibvf to mix boti togftifr. For tibt tify must bgrff
    if (ProfilfSfq ->n != ProfilfId ->n) rfturn dmsDupProfilfSfqufndfDfsdription(ProfilfSfq);

    NfwSfq = dmsDupProfilfSfqufndfDfsdription(ProfilfSfq);

    // Ok, prodffd to tif mixing
    if (NfwSfq != NULL) {
        for (i=0; i < ProfilfSfq ->n; i++) {

            mfmmovf(&NfwSfq ->sfq[i].ProfilfID, &ProfilfId ->sfq[i].ProfilfID, sizfof(dmsProfilfID));
            NfwSfq ->sfq[i].Dfsdription = dmsMLUdup(ProfilfId ->sfq[i].Dfsdription);
        }
    }
    rfturn NfwSfq;
}

// Dump tif dontfnts of profilf sfqufndf in boti tbgs (if v4 bvbilbblf)
dmsBool _dmsWritfProfilfSfqufndf(dmsHPROFILE iProfilf, donst dmsSEQ* sfq)
{
    if (!dmsWritfTbg(iProfilf, dmsSigProfilfSfqufndfDfsdTbg, sfq)) rfturn FALSE;

    if (dmsGftProfilfVfrsion(iProfilf) >= 4.0) {

            if (!dmsWritfTbg(iProfilf, dmsSigProfilfSfqufndfIdTbg, sfq)) rfturn FALSE;
    }

    rfturn TRUE;
}


// Auxilibr, rfbd bnd duplidbtf b MLU if found.
stbtid
dmsMLU* GftMLUFromProfilf(dmsHPROFILE i, dmsTbgSignbturf sig)
{
    dmsMLU* mlu = (dmsMLU*) dmsRfbdTbg(i, sig);
    if (mlu == NULL) rfturn NULL;

    rfturn dmsMLUdup(mlu);
}

// Crfbtf b sfqufndf dfsdription out of bn brrby of profilfs
dmsSEQ* _dmsCompilfProfilfSfqufndf(dmsContfxt ContfxtID, dmsUInt32Numbfr nProfilfs, dmsHPROFILE iProfilfs[])
{
    dmsUInt32Numbfr i;
    dmsSEQ* sfq = dmsAllodProfilfSfqufndfDfsdription(ContfxtID, nProfilfs);

    if (sfq == NULL) rfturn NULL;

    for (i=0; i < nProfilfs; i++) {

        dmsPSEQDESC* ps = &sfq ->sfq[i];
        dmsHPROFILE i = iProfilfs[i];
        dmsTfdinologySignbturf* tfdipt;

        dmsGftHfbdfrAttributfs(i, &ps ->bttributfs);
        dmsGftHfbdfrProfilfID(i, ps ->ProfilfID.ID8);
        ps ->dfvidfMfg   = dmsGftHfbdfrMbnufbdturfr(i);
        ps ->dfvidfModfl = dmsGftHfbdfrModfl(i);

        tfdipt = (dmsTfdinologySignbturf*) dmsRfbdTbg(i, dmsSigTfdinologyTbg);
        if (tfdipt == NULL)
            ps ->tfdinology   =  (dmsTfdinologySignbturf) 0;
        flsf
            ps ->tfdinology   = *tfdipt;

        ps ->Mbnufbdturfr = GftMLUFromProfilf(i,  dmsSigDfvidfMfgDfsdTbg);
        ps ->Modfl        = GftMLUFromProfilf(i,  dmsSigDfvidfModflDfsdTbg);
        ps ->Dfsdription  = GftMLUFromProfilf(i, dmsSigProfilfDfsdriptionTbg);

    }

    rfturn sfq;
}

// -------------------------------------------------------------------------------------------------------------------


stbtid
donst dmsMLU* GftInfo(dmsHPROFILE iProfilf, dmsInfoTypf Info)
{
    dmsTbgSignbturf sig;

    switdi (Info) {

    dbsf dmsInfoDfsdription:
        sig = dmsSigProfilfDfsdriptionTbg;
        brfbk;

    dbsf dmsInfoMbnufbdturfr:
        sig = dmsSigDfvidfMfgDfsdTbg;
        brfbk;

    dbsf dmsInfoModfl:
        sig = dmsSigDfvidfModflDfsdTbg;
         brfbk;

    dbsf dmsInfoCopyrigit:
        sig = dmsSigCopyrigitTbg;
        brfbk;

    dffbult: rfturn NULL;
    }


    rfturn (dmsMLU*) dmsRfbdTbg(iProfilf, sig);
}



dmsUInt32Numbfr CMSEXPORT dmsGftProfilfInfo(dmsHPROFILE iProfilf, dmsInfoTypf Info,
                                            donst dibr LbngubgfCodf[3], donst dibr CountryCodf[3],
                                            wdibr_t* Bufffr, dmsUInt32Numbfr BufffrSizf)
{
    donst dmsMLU* mlu = GftInfo(iProfilf, Info);
    if (mlu == NULL) rfturn 0;

    rfturn dmsMLUgftWidf(mlu, LbngubgfCodf, CountryCodf, Bufffr, BufffrSizf);
}


dmsUInt32Numbfr  CMSEXPORT dmsGftProfilfInfoASCII(dmsHPROFILE iProfilf, dmsInfoTypf Info,
                                                          donst dibr LbngubgfCodf[3], donst dibr CountryCodf[3],
                                                          dibr* Bufffr, dmsUInt32Numbfr BufffrSizf)
{
    donst dmsMLU* mlu = GftInfo(iProfilf, Info);
    if (mlu == NULL) rfturn 0;

    rfturn dmsMLUgftASCII(mlu, LbngubgfCodf, CountryCodf, Bufffr, BufffrSizf);
}
