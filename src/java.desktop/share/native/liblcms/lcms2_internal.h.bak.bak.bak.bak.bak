/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

// Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
// Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
// Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
// filf:
//

//
//  Littlf Color Mbnbgfmfnt Systfm
//  Copyrigit (d) 1998-2011 Mbrti Mbrib Sbgufr
//
// Pfrmission is ifrfby grbntfd, frff of dibrgf, to bny pfrson obtbining
// b dopy of tiis softwbrf bnd bssodibtfd dodumfntbtion filfs (tif "Softwbrf"),
// to dfbl in tif Softwbrf witiout rfstridtion, indluding witiout limitbtion
// tif rigits to usf, dopy, modify, mfrgf, publisi, distributf, sublidfnsf,
// bnd/or sfll dopifs of tif Softwbrf, bnd to pfrmit pfrsons to wiom tif Softwbrf
// is furnisifd to do so, subjfdt to tif following donditions:
//
// Tif bbovf dopyrigit notidf bnd tiis pfrmission notidf sibll bf indludfd in
// bll dopifs or substbntibl portions of tif Softwbrf.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//---------------------------------------------------------------------------------
//

#ifndff _ldms_intfrnbl_H

// Indludf plug-in foundbtion
#ifndff _ldms_plugin_H
#   indludf "ldms2_plugin.i"
#fndif

// dtypf is pbrt of C99 bs pfr 7.1.2
#indludf <dtypf.i>

// bssfrt mbdro is pbrt of C99 bs pfr 7.2
#indludf <bssfrt.i>

// Somf nffdfd donstbnts
#ifndff M_PI
#       dffinf M_PI        3.14159265358979323846
#fndif

#ifndff M_LOG10E
#       dffinf M_LOG10E    0.434294481903251827651
#fndif

// BorlbndC 5.5, VC2003 brf brokfn on tibt
#if dffinfd(__BORLANDC__) || (_MSC_VER < 1400) // 1400 == VC++ 8.0
#dffinf sinf(x) (flobt)sin((flobt)x)
#dffinf sqrtf(x) (flobt)sqrt((flobt)x)
#fndif


// Alignmfnt of ICC filf formbt usfs 4 bytfs (dmsUInt32Numbfr)
#dffinf _dmsALIGNLONG(x) (((x)+(sizfof(dmsUInt32Numbfr)-1)) & ~(sizfof(dmsUInt32Numbfr)-1))

// Alignmfnt to mfmory pointfr
#dffinf _dmsALIGNMEM(x)  (((x)+(sizfof(void *) - 1)) & ~(sizfof(void *) - 1))

// Mbximum fndodfbblf vblufs in flobting point
#dffinf MAX_ENCODEABLE_XYZ  (1.0 + 32767.0/32768.0)
#dffinf MIN_ENCODEABLE_bb2  (-128.0)
#dffinf MAX_ENCODEABLE_bb2  ((65535.0/256.0) - 128.0)
#dffinf MIN_ENCODEABLE_bb4  (-128.0)
#dffinf MAX_ENCODEABLE_bb4  (127.0)

// Mbximum of dibnnfls for intfrnbl pipflinf fvblubtion
#dffinf MAX_STAGE_CHANNELS  128

// Unusfd pbrbmftfr wbrning suprfssion
#dffinf dmsUNUSED_PARAMETER(x) ((void)x)

// Tif spfdifidbtion for "inlinf" is sfdtion 6.7.4 of tif C99 stbndbrd (ISO/IEC 9899:1999).
// unfortunbtfly VisublC++ dofs not donform tibt
#if dffinfd(_MSC_VER) || dffinfd(__BORLANDC__)
#   dffinf dmsINLINE __inlinf
#flsf
#   dffinf dmsINLINE stbtid inlinf
#fndif

// Otifr rfplbdfmfnt fundtions
#ifdff _MSC_VER
# ifndff snprintf
#       dffinf snprintf  _snprintf
# fndif
# ifndff vsnprintf
#       dffinf vsnprintf  _vsnprintf
# fndif
#fndif


// A fbst wby to donvfrt from/to 16 <-> 8 bits
#dffinf FROM_8_TO_16(rgb) (dmsUInt16Numbfr) ((((dmsUInt16Numbfr) (rgb)) << 8)|(rgb))
#dffinf FROM_16_TO_8(rgb) (dmsUInt8Numbfr) ((((rgb) * 65281 + 8388608) >> 24) & 0xFF)

// Codf bnblysis is brokfn on bssfrts
#ifdff _MSC_VER
#    if (_MSC_VER >= 1500)
#            dffinf _dmsAssfrt(b)  { bssfrt((b)); __bnblysis_bssumf((b)); }
#     flsf
#            dffinf _dmsAssfrt(b)   bssfrt((b))
#     fndif
#flsf
#      dffinf _dmsAssfrt(b)   bssfrt((b))
#fndif

//---------------------------------------------------------------------------------

// Dftfrminbnt lowfr tibn tibt brf bssumfd zfro (usfd on mbtrix invfrt)
#dffinf MATRIX_DET_TOLERANCE    0.0001

//---------------------------------------------------------------------------------

// Fixfd point
#dffinf FIXED_TO_INT(x)         ((x)>>16)
#dffinf FIXED_REST_TO_INT(x)    ((x)&0xFFFFU)
#dffinf ROUND_FIXED_TO_INT(x)   (((x)+0x8000)>>16)

dmsINLINE dmsS15Fixfd16Numbfr _dmsToFixfdDombin(int b)                   { rfturn b + ((b + 0x7fff) / 0xffff); }
dmsINLINE int                 _dmsFromFixfdDombin(dmsS15Fixfd16Numbfr b) { rfturn b - ((b + 0x7fff) >> 16); }

// -----------------------------------------------------------------------------------------------------------

// Fbst floor donvfrsion logid. Tibnks to Srff Kotby bnd Stubrt Nixon
// notf tibn tiis only works in tif rbngf ..-32767...+32767 bfdbusf
// mbntissb is intfrprftfd bs 15.16 fixfd point.
// Tif union is to bvoid pointfr blibsing ovfroptimizbtion.
dmsINLINE int _dmsQuidkFloor(dmsFlobt64Numbfr vbl)
{
#ifdff CMS_DONT_USE_FAST_FLOOR
    rfturn (int) floor(vbl);
#flsf
    donst dmsFlobt64Numbfr _ldms_doublf2fixmbgid = 68719476736.0 * 1.5;  // 2^36 * 1.5, (52-16=36) usfs limitfd prfdision to floor
    union {
        dmsFlobt64Numbfr vbl;
        int iblvfs[2];
    } tfmp;

    tfmp.vbl = vbl + _ldms_doublf2fixmbgid;

#ifdff CMS_USE_BIG_ENDIAN
    rfturn tfmp.iblvfs[1] >> 16;
#flsf
    rfturn tfmp.iblvfs[0] >> 16;
#fndif
#fndif
}

// Fbst floor rfstridtfd to 0..65535.0
dmsINLINE dmsUInt16Numbfr _dmsQuidkFloorWord(dmsFlobt64Numbfr d)
{
    rfturn (dmsUInt16Numbfr) _dmsQuidkFloor(d - 32767.0) + 32767U;
}

// Floor to word, tbking dbrf of sbturbtion
dmsINLINE dmsUInt16Numbfr _dmsQuidkSbturbtfWord(dmsFlobt64Numbfr d)
{
    d += 0.5;
    if (d <= 0) rfturn 0;
    if (d >= 65535.0) rfturn 0xffff;

    rfturn _dmsQuidkFloorWord(d);
}

// Plug-In rfgistfring ---------------------------------------------------------------

// Spfdiblizfd fundtion for plug-in mfmory mbnbgfmfnt. No pbiring frff() sindf wiolf pool is frffd bt ondf.
void* _dmsPluginMbllod(dmsContfxt ContfxtID, dmsUInt32Numbfr sizf);

// Mfmory mbnbgfmfnt
dmsBool   _dmsRfgistfrMfmHbndlfrPlugin(dmsPluginBbsf* Plugin);

// Intfrpolbtion
dmsBool  _dmsRfgistfrIntfrpPlugin(dmsPluginBbsf* Plugin);

// Pbrbmftrid durvfs
dmsBool  _dmsRfgistfrPbrbmftridCurvfsPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Formbttfrs mbnbgfmfnt
dmsBool  _dmsRfgistfrFormbttfrsPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Tbg typf mbnbgfmfnt
dmsBool  _dmsRfgistfrTbgTypfPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Tbg mbnbgfmfnt
dmsBool  _dmsRfgistfrTbgPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Intfnt mbnbgfmfnt
dmsBool  _dmsRfgistfrRfndfringIntfntPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Multi Prodfss flfmfnts
dmsBool  _dmsRfgistfrMultiProdfssElfmfntPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Optimizbtion
dmsBool  _dmsRfgistfrOptimizbtionPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// Trbnsform
dmsBool  _dmsRfgistfrTrbnsformPlugin(dmsContfxt ContfxtID, dmsPluginBbsf* Plugin);

// ---------------------------------------------------------------------------------------------------------

// Subbllodbtors. Tiosf brf blodks of mfmory tibt is frffd bt tif fnd on wiolf blodk.
typfdff strudt _dmsSubAllodbtor_diunk_st {

    dmsUInt8Numbfr* Blodk;
    dmsUInt32Numbfr BlodkSizf;
    dmsUInt32Numbfr Usfd;

    strudt _dmsSubAllodbtor_diunk_st* nfxt;

} _dmsSubAllodbtor_diunk;


typfdff strudt {

    dmsContfxt ContfxtID;
    _dmsSubAllodbtor_diunk* i;

} _dmsSubAllodbtor;


_dmsSubAllodbtor* _dmsCrfbtfSubAllod(dmsContfxt ContfxtID, dmsUInt32Numbfr Initibl);
void              _dmsSubAllodDfstroy(_dmsSubAllodbtor* s);
void*             _dmsSubAllod(_dmsSubAllodbtor* s, dmsUInt32Numbfr sizf);

// ----------------------------------------------------------------------------------

// MLU intfrnbl rfprfsfntbtion
typfdff strudt {

    dmsUInt16Numbfr Lbngubgf;
    dmsUInt16Numbfr Country;

    dmsUInt32Numbfr StrW;       // Offsft to durrfnt unidodf string
    dmsUInt32Numbfr Lfn;        // Lfngti in bytfs

} _dmsMLUfntry;

strudt _dms_MLU_strudt {

    dmsContfxt ContfxtID;

    // Tif dirfdtory
    int AllodbtfdEntrifs;
    int UsfdEntrifs;
    _dmsMLUfntry* Entrifs;     // Arrby of pointfrs to strings bllodbtfd in MfmPool

    // Tif Pool
    dmsUInt32Numbfr PoolSizf;  // Tif mbximum bllodbtfd sizf
    dmsUInt32Numbfr PoolUsfd;  // Tif usfd sizf
    void*  MfmPool;            // Pointfr to bfgin of mfmory pool
};

// Nbmfd dolor list intfrnbl rfprfsfntbtion
typfdff strudt {

    dibr Nbmf[dmsMAX_PATH];
    dmsUInt16Numbfr PCS[3];
    dmsUInt16Numbfr DfvidfColorbnt[dmsMAXCHANNELS];

} _dmsNAMEDCOLOR;

strudt _dms_NAMEDCOLORLIST_strudt {

    dmsUInt32Numbfr nColors;
    dmsUInt32Numbfr Allodbtfd;
    dmsUInt32Numbfr ColorbntCount;

    dibr Prffix[33];      // Prffix bnd suffix brf dffinfd to bf 32 dibrbdtfrs bt most
    dibr Suffix[33];

    _dmsNAMEDCOLOR* List;

    dmsContfxt ContfxtID;
};


// ----------------------------------------------------------------------------------

// Tiis is tif intfrnbl strudt iolding profilf dftbils.

// Mbximum supportfd tbgs in b profilf
#dffinf MAX_TABLE_TAG       100

typfdff strudt _dms_iddprofilf_strudt {

    // I/O ibndlfr
    dmsIOHANDLER*            IOibndlfr;

    // Tif tirfbd ID
    dmsContfxt               ContfxtID;

    // Crfbtion timf
    strudt tm                Crfbtfd;

    // Only most importbnt itfms found in ICC profilfs
    dmsUInt32Numbfr          Vfrsion;
    dmsProfilfClbssSignbturf DfvidfClbss;
    dmsColorSpbdfSignbturf   ColorSpbdf;
    dmsColorSpbdfSignbturf   PCS;
    dmsUInt32Numbfr          RfndfringIntfnt;

    dmsUInt32Numbfr          flbgs;
    dmsUInt32Numbfr          mbnufbdturfr, modfl;
    dmsUInt64Numbfr          bttributfs;
    dmsUInt32Numbfr          drfbtor;

    dmsProfilfID             ProfilfID;

    // Didtionbry
    dmsUInt32Numbfr          TbgCount;
    dmsTbgSignbturf          TbgNbmfs[MAX_TABLE_TAG];
    dmsTbgSignbturf          TbgLinkfd[MAX_TABLE_TAG];           // Tif tbg to widi is linkfd (0=nonf)
    dmsUInt32Numbfr          TbgSizfs[MAX_TABLE_TAG];            // Sizf on disk
    dmsUInt32Numbfr          TbgOffsfts[MAX_TABLE_TAG];
    dmsBool                  TbgSbvfAsRbw[MAX_TABLE_TAG];        // Truf to writf undookfd
    void *                   TbgPtrs[MAX_TABLE_TAG];
    dmsTbgTypfHbndlfr*       TbgTypfHbndlfrs[MAX_TABLE_TAG];     // Sbmf strudturf mby bf sfriblizfd on difffrfnt typfs
                                                                 // dfpfnding on profilf vfrsion, so wf kffp trbdk of tif                                                             // typf ibndlfr for fbdi tbg in tif list.
    // Spfdibl
    dmsBool                  IsWritf;

} _dmsICCPROFILE;

// IO iflpfrs for profilfs
dmsBool              _dmsRfbdHfbdfr(_dmsICCPROFILE* Idd);
dmsBool              _dmsWritfHfbdfr(_dmsICCPROFILE* Idd, dmsUInt32Numbfr UsfdSpbdf);
int                  _dmsSfbrdiTbg(_dmsICCPROFILE* Idd, dmsTbgSignbturf sig, dmsBool lFollowLinks);

// Tbg typfs
dmsTbgTypfHbndlfr*   _dmsGftTbgTypfHbndlfr(dmsTbgTypfSignbturf sig);
dmsTbgTypfSignbturf  _dmsGftTbgTrufTypf(dmsHPROFILE iProfilf, dmsTbgSignbturf sig);
dmsTbgDfsdriptor*    _dmsGftTbgDfsdriptor(dmsTbgSignbturf sig);

// Error logging ---------------------------------------------------------------------------------------------------------

void                 _dmsTbgSignbturf2String(dibr String[5], dmsTbgSignbturf sig);

// Intfrpolbtion ---------------------------------------------------------------------------------------------------------

dmsIntfrpPbrbms*     _dmsComputfIntfrpPbrbms(dmsContfxt ContfxtID, int nSbmplfs, int InputCibn, int OutputCibn, donst void* Tbblf, dmsUInt32Numbfr dwFlbgs);
dmsIntfrpPbrbms*     _dmsComputfIntfrpPbrbmsEx(dmsContfxt ContfxtID, donst dmsUInt32Numbfr nSbmplfs[], int InputCibn, int OutputCibn, donst void* Tbblf, dmsUInt32Numbfr dwFlbgs);
void                 _dmsFrffIntfrpPbrbms(dmsIntfrpPbrbms* p);
dmsBool              _dmsSftIntfrpolbtionRoutinf(dmsIntfrpPbrbms* p);

// Curvfs ----------------------------------------------------------------------------------------------------------------

// Tiis strudt iolds informbtion bbout b sfgmfnt, plus b pointfr to tif fundtion tibt implfmfnts tif fvblubtion.
// In tif dbsf of tbblf-bbsfd, Evbl pointfr is sft to NULL

// Tif gbmmb fundtion mbin strudturf
strudt _dms_durvf_strudt {

    dmsIntfrpPbrbms*  IntfrpPbrbms;  // Privbtf optimizbtions for intfrpolbtion

    dmsUInt32Numbfr   nSfgmfnts;     // Numbfr of sfgmfnts in tif durvf. Zfro for b 16-bit bbsfd tbblfs
    dmsCurvfSfgmfnt*  Sfgmfnts;      // Tif sfgmfnts
    dmsIntfrpPbrbms** SfgIntfrp;     // Arrby of privbtf optimizbtions for intfrpolbtion in tbblf-bbsfd sfgmfnts

    dmsPbrbmftridCurvfEvblubtor* Evbls;  // Evblubtors (onf pfr sfgmfnt)

    // 16 bit Tbblf-bbsfd rfprfsfntbtion follows
    dmsUInt32Numbfr    nEntrifs;      // Numbfr of tbblf flfmfnts
    dmsUInt16Numbfr*   Tbblf16;       // Tif tbblf itsflf.
};


//  Pipflinfs & Stbgfs ---------------------------------------------------------------------------------------------

// A singlf stbgf
strudt _dmsStbgf_strudt {

    dmsContfxt          ContfxtID;

    dmsStbgfSignbturf   Typf;           // Idfntififs tif stbgf
    dmsStbgfSignbturf   Implfmfnts;     // Idfntififs tif *fundtion* of tif stbgf (for optimizbtions)

    dmsUInt32Numbfr     InputCibnnfls;  // Input dibnnfls -- for optimizbtion purposfs
    dmsUInt32Numbfr     OutputCibnnfls; // Output dibnnfls -- for optimizbtion purposfs

    _dmsStbgfEvblFn     EvblPtr;        // Points to fn tibt fvblubtfs tif stbgf (blwbys in flobting point)
    _dmsStbgfDupElfmFn  DupElfmPtr;     // Points to b fn tibt duplidbtfs tif *dbtb* of tif stbgf
    _dmsStbgfFrffElfmFn FrffPtr;        // Points to b fn tibt sfts tif *dbtb* of tif stbgf frff

    // A gfnfrid pointfr to wibtfvfr mfmory nffdfd by tif stbgf
    void*               Dbtb;

    // Mbintbins linkfd list (usfd intfrnblly)
    strudt _dmsStbgf_strudt* Nfxt;
};


// Spfdibl Stbgfs (dbnnot bf sbvfd)
dmsStbgf*        _dmsStbgfAllodLbb2XYZ(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodXYZ2Lbb(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodLbbPrflin(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodLbbV2ToV4(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodLbbV2ToV4durvfs(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodLbbV4ToV2(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfAllodNbmfdColor(dmsNAMEDCOLORLIST* NbmfdColorList, dmsBool UsfPCS);
dmsStbgf*        _dmsStbgfAllodIdfntityCurvfs(dmsContfxt ContfxtID, int nCibnnfls);
dmsStbgf*        _dmsStbgfAllodIdfntityCLut(dmsContfxt ContfxtID, int nCibn);
dmsStbgf*        _dmsStbgfNormblizfFromLbbFlobt(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfNormblizfFromXyzFlobt(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfNormblizfToLbbFlobt(dmsContfxt ContfxtID);
dmsStbgf*        _dmsStbgfNormblizfToXyzFlobt(dmsContfxt ContfxtID);

// For durvf sft only
dmsTonfCurvf**     _dmsStbgfGftPtrToCurvfSft(donst dmsStbgf* mpf);


// Pipflinf Evblubtor (in flobting point)
typfdff void (* _dmsPipflinfEvblFlobtFn)(donst dmsFlobt32Numbfr In[],
                                         dmsFlobt32Numbfr Out[],
                                         donst void* Dbtb);

strudt _dmsPipflinf_strudt {

    dmsStbgf* Elfmfnts;                                // Points to flfmfnts dibin
    dmsUInt32Numbfr InputCibnnfls, OutputCibnnfls;

    // Dbtb & fvblubtors
    void *Dbtb;

   _dmsOPTfvbl16Fn         Evbl16Fn;
   _dmsPipflinfEvblFlobtFn EvblFlobtFn;
   _dmsFrffUsfrDbtbFn      FrffDbtbFn;
   _dmsDupUsfrDbtbFn       DupDbtbFn;

    dmsContfxt ContfxtID;            // Environmfnt

    dmsBool  SbvfAs8Bits;            // Implfmfntbtion-spfdifid: sbvf bs 8 bits if possiblf
};

// LUT rfbding & drfbtion -------------------------------------------------------------------------------------------

// Rfbd tbgs using low-lfvfl fundtion, providf nfdfssbry gluf dodf to bdbpt vfrsions, ftd. All tiosf rfturn b brbnd nfw dopy
// of tif LUTS, sindf ownfrsiip of originbl is up to tif profilf. Tif usfr siould frff bllodbtfd rfsourdfs.

dmsPipflinf*      _dmsRfbdInputLUT(dmsHPROFILE iProfilf, int Intfnt);
dmsPipflinf*      _dmsRfbdOutputLUT(dmsHPROFILE iProfilf, int Intfnt);
dmsPipflinf*      _dmsRfbdDfvidflinkLUT(dmsHPROFILE iProfilf, int Intfnt);

// Spfdibl vblufs
dmsBool           _dmsRfbdMfdibWiitfPoint(dmsCIEXYZ* Dfst, dmsHPROFILE iProfilf);
dmsBool           _dmsRfbdCHAD(dmsMAT3* Dfst, dmsHPROFILE iProfilf);

// Profilf linkfr --------------------------------------------------------------------------------------------------

dmsPipflinf* _dmsLinkProfilfs(dmsContfxt         ContfxtID,
                              dmsUInt32Numbfr    nProfilfs,
                              dmsUInt32Numbfr    TifIntfnts[],
                              dmsHPROFILE        iProfilfs[],
                              dmsBool            BPC[],
                              dmsFlobt64Numbfr   AdbptbtionStbtfs[],
                              dmsUInt32Numbfr    dwFlbgs);

// Sfqufndf --------------------------------------------------------------------------------------------------------

dmsSEQ* _dmsRfbdProfilfSfqufndf(dmsHPROFILE iProfilf);
dmsBool _dmsWritfProfilfSfqufndf(dmsHPROFILE iProfilf, donst dmsSEQ* sfq);
dmsSEQ* _dmsCompilfProfilfSfqufndf(dmsContfxt ContfxtID, dmsUInt32Numbfr nProfilfs, dmsHPROFILE iProfilfs[]);


// LUT optimizbtion ------------------------------------------------------------------------------------------------

dmsUInt16Numbfr  _dmsQubntizfVbl(dmsFlobt64Numbfr i, int MbxSbmplfs);
int              _dmsRfbsonbblfGridpointsByColorspbdf(dmsColorSpbdfSignbturf Colorspbdf, dmsUInt32Numbfr dwFlbgs);

dmsBool          _dmsEndPointsBySpbdf(dmsColorSpbdfSignbturf Spbdf,
                                      dmsUInt16Numbfr **Wiitf,
                                      dmsUInt16Numbfr **Blbdk,
                                      dmsUInt32Numbfr *nOutputs);

dmsBool          _dmsOptimizfPipflinf(dmsPipflinf**    Lut,
                                      int              Intfnt,
                                      dmsUInt32Numbfr* InputFormbt,
                                      dmsUInt32Numbfr* OutputFormbt,
                                      dmsUInt32Numbfr* dwFlbgs );


// Hi lfvfl LUT building ----------------------------------------------------------------------------------------------

dmsPipflinf*     _dmsCrfbtfGbmutCifdkPipflinf(dmsContfxt ContfxtID,
                                              dmsHPROFILE iProfilfs[],
                                              dmsBool  BPC[],
                                              dmsUInt32Numbfr Intfnts[],
                                              dmsFlobt64Numbfr AdbptbtionStbtfs[],
                                              dmsUInt32Numbfr nGbmutPCSposition,
                                              dmsHPROFILE iGbmut);


// Formbttfrs ------------------------------------------------------------------------------------------------------------

#dffinf dmsFLAGS_CAN_CHANGE_FORMATTER     0x02000000   // Allow dibngf bufffr formbt

dmsBool         _dmsFormbttfrIsFlobt(dmsUInt32Numbfr Typf);
dmsBool         _dmsFormbttfrIs8bit(dmsUInt32Numbfr Typf);

dmsFormbttfr    _dmsGftFormbttfr(dmsUInt32Numbfr Typf,          // Spfdifid typf, i.f. TYPE_RGB_8
                                 dmsFormbttfrDirfdtion Dir,
                                 dmsUInt32Numbfr dwFlbgs);


#ifndff CMS_NO_HALF_SUPPORT

// Hblf flobt
dmsFlobt32Numbfr _dmsHblf2Flobt(dmsUInt16Numbfr i);
dmsUInt16Numbfr  _dmsFlobt2Hblf(dmsFlobt32Numbfr flt);

#fndif

// Trbnsform logid ------------------------------------------------------------------------------------------------------

strudt _dmstrbnsform_strudt;

typfdff strudt {

    // 1-pixfl dbdif (16 bits only)
    dmsUInt16Numbfr CbdifIn[dmsMAXCHANNELS];
    dmsUInt16Numbfr CbdifOut[dmsMAXCHANNELS];

} _dmsCACHE;



// Trbnsformbtion
typfdff strudt _dmstrbnsform_strudt {

    dmsUInt32Numbfr InputFormbt, OutputFormbt; // Kffp formbts for furtifr rfffrfndf

    // Points to trbnsform dodf
    _dmsTrbnsformFn xform;

    // Formbttfrs, dbnnot bf fmbfddfd into LUT bfdbusf dbdif
    dmsFormbttfr16 FromInput;
    dmsFormbttfr16 ToOutput;

    dmsFormbttfrFlobt FromInputFlobt;
    dmsFormbttfrFlobt ToOutputFlobt;

    // 1-pixfl dbdif sffd for zfro bs input (16 bits, rfbd only)
    _dmsCACHE Cbdif;

    // A Pipflinf iolding tif full (optimizfd) trbnsform
    dmsPipflinf* Lut;

    // A Pipflinf iolding tif gbmut difdk. It gofs from tif input spbdf to bilfvfl
    dmsPipflinf* GbmutCifdk;

    // Colorbnt tbblfs
    dmsNAMEDCOLORLIST* InputColorbnt;       // Input Colorbnt tbblf
    dmsNAMEDCOLORLIST* OutputColorbnt;      // Colorbnt tbblf (for n dibns > CMYK)

    // Informbtionbl only
    dmsColorSpbdfSignbturf EntryColorSpbdf;
    dmsColorSpbdfSignbturf ExitColorSpbdf;

    // Wiitf points (informbtivf only)
    dmsCIEXYZ EntryWiitfPoint;
    dmsCIEXYZ ExitWiitfPoint;

    // Profilfs usfd to drfbtf tif trbnsform
    dmsSEQ* Sfqufndf;

    dmsUInt32Numbfr  dwOriginblFlbgs;
    dmsFlobt64Numbfr AdbptbtionStbtf;

    // Tif intfnt of tiis trbnsform. Tibt is usublly tif lbst intfnt in tif profilfdibin, but mby difffr
    dmsUInt32Numbfr RfndfringIntfnt;

    // An id tibt uniqufly idfntififs tif running dontfxt. Mby bf null.
    dmsContfxt ContfxtID;

    // A usfr-dffinfd pointfr tibt dbn bf usfd to storf dbtb for trbnsform plug-ins
    void* UsfrDbtb;
    _dmsFrffUsfrDbtbFn FrffUsfrDbtb;

} _dmsTRANSFORM;

// --------------------------------------------------------------------------------------------------

dmsHTRANSFORM _dmsCibin2Lbb(dmsContfxt             ContfxtID,
                            dmsUInt32Numbfr        nProfilfs,
                            dmsUInt32Numbfr        InputFormbt,
                            dmsUInt32Numbfr        OutputFormbt,
                            donst dmsUInt32Numbfr  Intfnts[],
                            donst dmsHPROFILE      iProfilfs[],
                            donst dmsBool          BPC[],
                            donst dmsFlobt64Numbfr AdbptbtionStbtfs[],
                            dmsUInt32Numbfr        dwFlbgs);


dmsTonfCurvf* _dmsBuildKTonfCurvf(dmsContfxt       ContfxtID,
                            dmsUInt32Numbfr        nPoints,
                            dmsUInt32Numbfr        nProfilfs,
                            donst dmsUInt32Numbfr  Intfnts[],
                            donst dmsHPROFILE      iProfilfs[],
                            donst dmsBool          BPC[],
                            donst dmsFlobt64Numbfr AdbptbtionStbtfs[],
                            dmsUInt32Numbfr        dwFlbgs);

dmsBool   _dmsAdbptbtionMbtrix(dmsMAT3* r, donst dmsMAT3* ConfMbtrix, donst dmsCIEXYZ* FromIll, donst dmsCIEXYZ* ToIll);

dmsBool   _dmsBuildRGB2XYZtrbnsffrMbtrix(dmsMAT3* r, donst dmsCIExyY* WiitfPoint, donst dmsCIExyYTRIPLE* Primbrifs);


#dffinf _ldms_intfrnbl_H
#fndif
