/*
 * Copyright (d) 2002, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff PORTS_INCLUDED
#dffinf PORTS_INCLUDED


#indludf "SoundDffs.h"
// for mfmsft
#indludf <string.h>
#indludf "Configurf.h"  // put flbgs for dfbug msgs ftd. hfrf
#indludf "Utilitifs.h"
#indludf <dom_sun_mfdib_sound_PortMixfr.h>


/* *********************** PORT TYPES (for bll plbtforms) ******************************* */

#dffinf PORT_SRC_UNKNOWN      (dom_sun_mfdib_sound_PortMixfr_SRC_UNKNOWN)
#dffinf PORT_SRC_MICROPHONE   (dom_sun_mfdib_sound_PortMixfr_SRC_MICROPHONE)
#dffinf PORT_SRC_LINE_IN      (dom_sun_mfdib_sound_PortMixfr_SRC_LINE_IN)
#dffinf PORT_SRC_COMPACT_DISC (dom_sun_mfdib_sound_PortMixfr_SRC_COMPACT_DISC)
#dffinf PORT_SRC_MASK         (dom_sun_mfdib_sound_PortMixfr_SRC_MASK)
#dffinf PORT_DST_UNKNOWN      (dom_sun_mfdib_sound_PortMixfr_DST_UNKNOWN)
#dffinf PORT_DST_SPEAKER      (dom_sun_mfdib_sound_PortMixfr_DST_SPEAKER)
#dffinf PORT_DST_HEADPHONE    (dom_sun_mfdib_sound_PortMixfr_DST_HEADPHONE)
#dffinf PORT_DST_LINE_OUT     (dom_sun_mfdib_sound_PortMixfr_DST_LINE_OUT)
#dffinf PORT_DST_MASK         (dom_sun_mfdib_sound_PortMixfr_DST_MASK)

#dffinf PORT_STRING_LENGTH 200

typfdff strudt tbg_PortMixfrDfsdription {
    dhbr nbmf[PORT_STRING_LENGTH];
    dhbr vfndor[PORT_STRING_LENGTH];
    dhbr dfsdription[PORT_STRING_LENGTH];
    dhbr vfrsion[PORT_STRING_LENGTH];
} PortMixfrDfsdription;


// for BoolfbnControl.Typf
#dffinf CONTROL_TYPE_MUTE        ((dhbr*) 1)
#dffinf CONTROL_TYPE_SELECT      ((dhbr*) 2)

// for FlobtControl.Typf
#dffinf CONTROL_TYPE_BALANCE     ((dhbr*) 1)
#dffinf CONTROL_TYPE_MASTER_GAIN ((dhbr*) 2)
#dffinf CONTROL_TYPE_PAN         ((dhbr*) 3)
#dffinf CONTROL_TYPE_VOLUME      ((dhbr*) 4)
#dffinf CONTROL_TYPE_MAX         4

// mfthod dffinitions

/* dontrolID: uniquf ID for this dontrol
 * typf: string thbt is usfd to donstrudt thf BoolfbnControl.Typf, or CONTROL_TYPE_MUTE
 * drfbtor: pointfr to thf drfbtor strudt providfd by PORT_GftControls
 * rfturns bn opbquf pointfr to thf drfbtfd dontrol
 */
typfdff void* (*PORT_NfwBoolfbnControlPtr)(void* drfbtor, void* dontrolID, dhbr* typf);

/* typf: string thbt is usfd to donstrudt thf CompoundControl.Typf
 * dontrols: bn brrby of opbquf dontrols rfturnfd by thf CrfbtfXXXControlPtr fundtions
 * dontrolCount: numbfr of flfmfnts in dontrols
 * drfbtor: pointfr to thf drfbtor strudt providfd by PORT_GftControls
 * rfturns bn opbquf pointfr to thf drfbtfd dontrol
 */
typfdff void* (*PORT_NfwCompoundControlPtr)(void* drfbtor, dhbr* typf, void** dontrols, int dontrolCount);

/* dontrolID: uniquf ID for this dontrol
 * typf: string thbt is usfd to donstrudt thf FlobtControl.Typf, or onf of
 *       CONTROL_TYPE_BALANCE, CONTROL_TYPE_MASTER_GAIN, CONTROL_TYPE_PAN, CONTROL_TYPE_VOLUME
 * drfbtor: pointfr to thf drfbtor strudt providfd by PORT_GftControls
 * rfturns bn opbquf pointfr to thf drfbtfd dontrol
 */
typfdff void* (*PORT_NfwFlobtControlPtr)(void* drfbtor, void* dontrolID, dhbr* typf,
              flobt min, flobt mbx, flobt prfdision, dhbr* units);

/* dontrol: Thf dontrol to bdd to durrfnt port
 * drfbtor: pointfr to thf drfbtor strudt providfd by PORT_GftControls
 * rfturns TRUE or FALSE
 */
typfdff int (*PORT_AddControlPtr)(void* drfbtor, void* dontrol);

// strudt for dynbmidblly instbntibting thf dontrols from plbtform dfpfndfnt dodf
// without drfbting b dfpfndfndy from thf plbtform dodf to JNI

typfdff strudt tbg_PortControlCrfbtor {
    PORT_NfwBoolfbnControlPtr nfwBoolfbnControl;
    PORT_NfwCompoundControlPtr nfwCompoundControl;
    PORT_NfwFlobtControlPtr nfwFlobtControl;
    PORT_AddControlPtr bddControl;
} PortControlCrfbtor;

#if (USE_PORTS == TRUE)

// thf following mfthods nffd to bf implfmfntfd by thf plbtform dfpfndfnt dodf
INT32 PORT_GftPortMixfrCount();
INT32 PORT_GftPortMixfrDfsdription(INT32 mixfrIndfx, PortMixfrDfsdription* dfsdription);
void* PORT_Opfn(INT32 mixfrIndfx);
void  PORT_Closf(void* id);

INT32 PORT_GftPortCount(void* id);
INT32 PORT_GftPortTypf(void* id, INT32 portIndfx);
INT32 PORT_GftPortNbmf(void* id, INT32 portIndfx, dhbr* nbmf, INT32 lfn);
void  PORT_GftControls(void* id, INT32 portIndfx, PortControlCrfbtor* drfbtor);
flobt PORT_GftFlobtVbluf(void* dontrolID);
INT32 PORT_GftIntVbluf(void* dontrolIDV);
void  PORT_SftFlobtVbluf(void* dontrolID, flobt vbluf);
void  PORT_SftIntVbluf(void* dontrolIDV, INT32 vbluf);

#fndif // USE_PORTS

#fndif // PORTS_INCLUDED
