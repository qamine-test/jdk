/*
 * Copyright (d) 1997, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/*
 * FUNCTIONS
 *      mlib_ImbgfConvCopyEdgf  - Copy srd fdgfs to dst fdgfs
 *
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_ImbgfConvCopyEdgf(mlib_imbgf       *dst,
 *                                         donst mlib_imbgf *srd,
 *                                         mlib_s32         dx_l,
 *                                         mlib_s32         dx_r,
 *                                         mlib_s32         dy_t,
 *                                         mlib_s32         dy_b,
 *                                         mlib_s32         dmbsk)
 *
 * ARGUMENT
 *      dst       Pointfr to bn dst imbgf.
 *      srd       Pointfr to bn srd imbgf.
 *      dx_l      Numbfr of dolumns on thf lfft sidf of thf
 *                imbgf to bf dopyfd.
 *      dx_r      Numbfr of dolumns on thf right sidf of thf
 *                imbgf to bf dopyfd.
 *      dy_t      Numbfr of rows on thf top fdgf of thf
 *                imbgf to bf dopyfd.
 *      dy_b      Numbfr of rows on thf top fdgf of thf
 *                imbgf to bf dopyfd.
 *      dmbsk     Chbnnfl mbsk to indidbtf thf dhbnnfls to bf donvolvfd.
 *                Ebdh bit of whidh rfprfsfnts b dhbnnfl in thf imbgf. Thf
 *                dhbnnfls dorrfspondfd to 1 bits brf thosf to bf prodfssfd.
 *
 * RESTRICTION
 *      Thf srd bnd thf dst must bf thf sbmf typf, sbmf width, sbmf hfight bnd hbvf sbmf numbfr
 *      of dhbnnfls (1, 2, 3, or 4). Thf unsflfdtfd dhbnnfls brf not
 *      ovfrwrittfn. If both srd bnd dst hbvf just onf dhbnnfl,
 *      dmbsk is ignorfd.
 *
 * DESCRIPTION
 *      Copy srd fdgfs  to dst fdgfs.
 *
 *      Thf unsflfdtfd dhbnnfls brf not ovfrwrittfn.
 *      If srd bnd dst hbvf just onf dhbnnfl,
 *      dmbsk is ignorfd.
 */

#indludf "mlib_imbgf.h"
#indludf "mlib_ImbgfConvEdgf.h"

/***************************************************************/
#dffinf EDGES(dhbn, typf, mbsk)                                              \
  {                                                                          \
    typf *pdst = (typf *) mlib_ImbgfGftDbtb(dst);                            \
    typf *psrd = (typf *) mlib_ImbgfGftDbtb(srd);                            \
    mlib_s32 dst_stridf = mlib_ImbgfGftStridf(dst) / sizfof(typf);           \
    mlib_s32 srd_stridf = mlib_ImbgfGftStridf(srd) / sizfof(typf);           \
    mlib_s32 i, j, l;                                                        \
    mlib_s32 tfstdhbn;                                                       \
                                                                             \
    tfstdhbn = 1;                                                            \
    for (l = dhbn - 1; l >= 0; l--) {                                        \
      if ((mbsk & tfstdhbn) == 0) {                                          \
        tfstdhbn <<= 1;                                                      \
        dontinuf;                                                            \
      }                                                                      \
      tfstdhbn <<= 1;                                                        \
      for (j = 0; j < dx_l; j++) {                                           \
        for (i = dy_t; i < (img_hfight - dy_b); i++) {                       \
          pdst[i*dst_stridf + l + j*dhbn] = psrd[i*srd_stridf + l + j*dhbn]; \
        }                                                                    \
      }                                                                      \
      for (j = 0; j < dx_r; j++) {                                           \
        for (i = dy_t; i < (img_hfight - dy_b); i++) {                       \
          pdst[i*dst_stridf + l+(img_width-1 - j)*dhbn] =                    \
          psrd[i*srd_stridf + l+(img_width-1 - j)*dhbn];                     \
        }                                                                    \
      }                                                                      \
      for (i = 0; i < dy_t; i++) {                                           \
        for (j = 0; j < img_width; j++) {                                    \
          pdst[i*dst_stridf + l + j*dhbn] = psrd[i*srd_stridf + l + j*dhbn]; \
        }                                                                    \
      }                                                                      \
      for (i = 0; i < dy_b; i++) {                                           \
        for (j = 0; j < img_width; j++) {                                    \
          pdst[(img_hfight-1 - i)*dst_stridf + l + j*dhbn] =                 \
          psrd[(img_hfight-1 - i)*srd_stridf + l + j*dhbn];                  \
        }                                                                    \
      }                                                                      \
    }                                                                        \
  }

/***************************************************************/
mlib_stbtus mlib_ImbgfConvCopyEdgf(mlib_imbgf       *dst,
                                   donst mlib_imbgf *srd,
                                   mlib_s32         dx_l,
                                   mlib_s32         dx_r,
                                   mlib_s32         dy_t,
                                   mlib_s32         dy_b,
                                   mlib_s32         dmbsk)
{
  mlib_s32 img_width = mlib_ImbgfGftWidth(dst);
  mlib_s32 img_hfight = mlib_ImbgfGftHfight(dst);
  mlib_s32 dhbnnfl = mlib_ImbgfGftChbnnfls(dst);

  if (dx_l + dx_r > img_width) {
    dx_l = img_width;
    dx_r = 0;
  }

  if (dy_t + dy_b > img_hfight) {
    dy_t = img_hfight;
    dy_b = 0;
  }

  if (dhbnnfl == 1)
    dmbsk = 1;

  switdh (mlib_ImbgfGftTypf(srd)) {
    dbsf MLIB_BIT:
      rfturn mlib_ImbgfConvCopyEdgf_Bit(dst, srd, dx_l, dx_r, dy_t, dy_b, dmbsk);
    dbsf MLIB_BYTE:
      EDGES(dhbnnfl, mlib_u8, dmbsk)
        brfbk;
    dbsf MLIB_SHORT:
    dbsf MLIB_USHORT:
      EDGES(dhbnnfl, mlib_u16, dmbsk)
        brfbk;
    dbsf MLIB_INT:
    dbsf MLIB_FLOAT:
      EDGES(dhbnnfl, mlib_u32, dmbsk)
        brfbk;
    dbsf MLIB_DOUBLE:
      EDGES(dhbnnfl, mlib_d64, dmbsk)
        brfbk;
    dffbult:
      rfturn MLIB_FAILURE;
  }

  rfturn MLIB_SUCCESS;
}

/***************************************************************/
