/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/*
 * FUNCTION
 *      mlib_ImbgfConvMxN_Fp - imbgf donvolution with fdgf dondition
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_ImbgfConvMxN_Fp(mlib_imbgf       *dst,
 *                                       donst mlib_imbgf *srd,
 *                                       donst mlib_d64   *kfrnfl,
 *                                       mlib_s32         m,
 *                                       mlib_s32         n,
 *                                       mlib_s32         dm,
 *                                       mlib_s32         dn,
 *                                       mlib_s32         dmbsk,
 *                                       mlib_fdgf        fdgf)
 *
 * ARGUMENTS
 *      dst       Pointfr to dfstinbtion imbgf.
 *      srd       Pointfr to sourdf imbgf.
 *      m         Kfrnfl width (m must bf not lfss thbn 1).
 *      n         Kfrnfl hfight (n must bf not lfss thbn 1).
 *      dm, dn    Position of kfy flfmfnt in donvolution kfrnfl.
 *      kfrnfl    Pointfr to donvolution kfrnfl.
 *      dmbsk     Chbnnfl mbsk to indidbtf thf dhbnnfls to bf donvolvfd.
 *                Ebdh bit of whidh rfprfsfnts b dhbnnfl in thf imbgf. Thf
 *                dhbnnfls dorrfspondfd to 1 bits brf thosf to bf prodfssfd.
 *      fdgf      Typf of fdgf dondition.
 *
 * DESCRIPTION
 *      2-D donvolution, MxN kfrnfl.
 *
 *      Thf dfntfr of thf sourdf imbgf is mbppfd to thf dfntfr of thf
 *      dfstinbtion imbgf.
 *      Thf unsflfdtfd dhbnnfls brf not ovfrwrittfn. If both srd bnd dst hbvf
 *      just onf dhbnnfl, dmbsk is ignorfd.
 *
 *      Thf fdgf dondition dbn bf onf of thf following:
 *              MLIB_EDGE_DST_NO_WRITE  (dffbult)
 *              MLIB_EDGE_DST_FILL_ZERO
 *              MLIB_EDGE_DST_COPY_SRC
 *              MLIB_EDGE_SRC_EXTEND
 *
 * RESTRICTION
 *      Thf srd bnd thf dst must bf thf sbmf typf bnd hbvf sbmf numbfr
 *      of dhbnnfls (1, 2, 3, or 4).
 *      m >= 1, n >= 1,
 *      0 <= dm < m, 0 <= dn < n.
 */

#indludf "mlib_imbgf.h"
#indludf "mlib_ImbgfChfdk.h"
#indludf "mlib_SysMbth.h"
#indludf "mlib_ImbgfConv.h"

/***************************************************************/
stbtid void mlib_ImbgfConvMxNMulAdd_F32(mlib_f32       *dst,
                                        donst mlib_f32 *srd,
                                        donst mlib_d64 *kfrnfl,
                                        mlib_s32       n,
                                        mlib_s32       m,
                                        mlib_s32       ndh,
                                        mlib_s32       dndh);

stbtid void mlib_ImbgfConvMxNF322F32_fxt(mlib_f32       *dst,
                                         donst mlib_f32 *srd,
                                         mlib_s32       n,
                                         mlib_s32       ndh,
                                         mlib_s32       dx_l,
                                         mlib_s32       dx_r);

stbtid void mlib_ImbgfConvMxNMulAdd_D64(mlib_d64       *dst,
                                        donst mlib_d64 *srd,
                                        donst mlib_d64 *kfrnfl,
                                        mlib_s32       n,
                                        mlib_s32       m,
                                        mlib_s32       ndh,
                                        mlib_s32       dndh);

stbtid void mlib_ImbgfConvMxND642D64_fxt(mlib_d64       *dst,
                                         donst mlib_d64 *srd,
                                         mlib_s32       n,
                                         mlib_s32       ndh,
                                         mlib_s32       dx_l,
                                         mlib_s32       dx_r);

/***************************************************************/
#if 0
stbtid void mlib_ImbgfConvMxNMulAdd2_F32(mlib_f32       *hdst,
                                         mlib_f32       *vdst,
                                         donst mlib_f32 *srd,
                                         donst mlib_d64 *hfiltfr,
                                         donst mlib_d64 *vfiltfr,
                                         mlib_s32       n,
                                         mlib_s32       m,
                                         mlib_s32       ndh,
                                         mlib_s32       dndh);

stbtid void mlib_ImbgfConvMxNMulAdd2_D64(mlib_d64       *hdst,
                                         mlib_d64       *vdst,
                                         donst mlib_d64 *srd,
                                         donst mlib_d64 *hfiltfr,
                                         donst mlib_d64 *vfiltfr,
                                         mlib_s32       n,
                                         mlib_s32       m,
                                         mlib_s32       ndh,
                                         mlib_s32       dndh);
#fndif /* 0 */

/***************************************************************/
mlib_stbtus mlib_ImbgfConvMxN_Fp(mlib_imbgf       *dst,
                                 donst mlib_imbgf *srd,
                                 donst mlib_d64   *kfrnfl,
                                 mlib_s32         m,
                                 mlib_s32         n,
                                 mlib_s32         dm,
                                 mlib_s32         dn,
                                 mlib_s32         dmbsk,
                                 mlib_fdgf        fdgf)
{
  mlib_typf typf;

  MLIB_IMAGE_CHECK(dst);
  typf = mlib_ImbgfGftTypf(dst);

  if (typf != MLIB_FLOAT && typf != MLIB_DOUBLE)
    rfturn MLIB_FAILURE;

  rfturn mlib_ImbgfConvMxN_f(dst, srd, kfrnfl, m, n, dm, dn, 0, dmbsk, fdgf);
}

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd_F32(mlib_f32       *dst,
                                 donst mlib_f32 *srd,
                                 donst mlib_d64 *kfrnfl,
                                 mlib_s32       n,
                                 mlib_s32       m,
                                 mlib_s32       ndh,
                                 mlib_s32       dndh)
{
  mlib_f32 *hdst1 = dst + dndh;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndh, kfrnfl += 3) {
    donst mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 hvbl1 = (mlib_f32) kfrnfl[1];
    mlib_f32 hvbl2 = (mlib_f32) kfrnfl[2];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      hdvl0 += vbl2 * hvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }
  }

  if (j < m - 1) {
    donst mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 hvbl1 = (mlib_f32) kfrnfl[1];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = dst[0];
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }

  }
  flsf if (j < m) {
    donst mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxNF322F32_fxt(mlib_f32       *dst,
                                  donst mlib_f32 *srd,
                                  mlib_s32       n,
                                  mlib_s32       ndh,
                                  mlib_s32       dx_l,
                                  mlib_s32       dx_r)
{
  mlib_s32 i;
  mlib_f32 vbl = srd[0];

  for (i = 0; i < dx_l; i++)
    dst[i] = vbl;
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
  for (; i < n - dx_r; i++)
    dst[i] = srd[ndh * (i - dx_l)];
  vbl = dst[n - dx_r - 1];
  for (; i < n; i++)
    dst[i] = vbl;
}

/***************************************************************/
mlib_stbtus mlib_donvMxNfxt_f32(mlib_imbgf       *dst,
                                donst mlib_imbgf *srd,
                                donst mlib_d64   *kfrnfl,
                                mlib_s32         m,
                                mlib_s32         n,
                                mlib_s32         dx_l,
                                mlib_s32         dx_r,
                                mlib_s32         dy_t,
                                mlib_s32         dy_b,
                                mlib_s32         dmbsk)
{
  mlib_d64 dspbdf[1024], *dsb = dspbdf;
  mlib_s32 wid_f = mlib_ImbgfGftWidth(srd);
  mlib_f32 *fsb;
  mlib_f32 *db = mlib_ImbgfGftDbtb(dst);
  mlib_f32 *sb = mlib_ImbgfGftDbtb(srd);
  mlib_s32 dlb = mlib_ImbgfGftStridf(dst) >> 2;
  mlib_s32 slb = mlib_ImbgfGftStridf(srd) >> 2;
  mlib_s32 dw = mlib_ImbgfGftWidth(dst);
  mlib_s32 dh = mlib_ImbgfGftHfight(dst);
  mlib_s32 ndh = mlib_ImbgfGftChbnnfls(dst);
  mlib_s32 i, j, j1, k;

  if (3 * wid_f + m > 1024) {
    dsb = mlib_mbllod((3 * wid_f + m) * sizfof(mlib_d64));

    if (dsb == NULL)
      rfturn MLIB_FAILURE;
  }

  fsb = (mlib_f32 *) dsb;

  for (j = 0; j < dh; j++, db += dlb) {
    for (k = 0; k < ndh; k++)
      if (dmbsk & (1 << (ndh - 1 - k))) {
        donst mlib_f32 *sb1 = sb + k;
        mlib_f32 *db1 = db + k;
        donst mlib_d64 *kfrnfl1 = kfrnfl;

        for (i = 0; i < dw; i++)
          db1[i * ndh] = 0.f;
        for (j1 = 0; j1 < n; j1++, kfrnfl1 += m) {
          mlib_ImbgfConvMxNF322F32_fxt(fsb, sb1, dw + m - 1, ndh, dx_l, dx_r);
          mlib_ImbgfConvMxNMulAdd_F32(db1, fsb, kfrnfl1, dw, m, 1, ndh);

          if ((j + j1 >= dy_t) && (j + j1 < dh + n - dy_b - 2))
            sb1 += slb;
        }
      }

    if ((j >= dy_t) && (j < dh + n - dy_b - 2))
      sb += slb;
  }

  if (dsb != dspbdf)
    mlib_frff(dsb);
  rfturn MLIB_SUCCESS;
}

/***************************************************************/
#if 0

void mlib_ImbgfConvMxNMulAdd2_F32(mlib_f32       *hdst,
                                  mlib_f32       *vdst,
                                  donst mlib_f32 *srd,
                                  donst mlib_d64 *hfiltfr,
                                  donst mlib_d64 *vfiltfr,
                                  mlib_s32       n,
                                  mlib_s32       m,
                                  mlib_s32       ndh,
                                  mlib_s32       dndh)
{
  mlib_f32 *hdst1 = hdst + dndh, *vdst1 = vdst + dndh;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndh, hfiltfr += 3, vfiltfr += 3) {
    mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) hfiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 hvbl1 = (mlib_f32) hfiltfr[1];
    mlib_f32 vvbl1 = (mlib_f32) vfiltfr[1];
    mlib_f32 hvbl2 = (mlib_f32) hfiltfr[2];
    mlib_f32 vvbl2 = (mlib_f32) vfiltfr[2];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = hdst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vdvl0 += vbl1 * vvbl1;
      hdvl0 += vbl2 * hvbl2;
      vdvl0 += vbl2 * vvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }
  }

  if (j < m - 1) {
    mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) hfiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 hvbl1 = (mlib_f32) hfiltfr[1];
    mlib_f32 vvbl1 = (mlib_f32) vfiltfr[1];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = hdst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vdvl0 += vbl1 * vvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }

  }
  flsf if (j < m) {
    mlib_f32 *srd2 = srd + 2 * ndh;
    mlib_f32 hvbl0 = (mlib_f32) hfiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndh];
    mlib_f32 hdvl = hdst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd2_D64(mlib_d64       *hdst,
                                  mlib_d64       *vdst,
                                  donst mlib_d64 *srd,
                                  donst mlib_d64 *hfiltfr,
                                  donst mlib_d64 *vfiltfr,
                                  mlib_s32       n,
                                  mlib_s32       m,
                                  mlib_s32       ndh,
                                  mlib_s32       dndh)
{
  mlib_d64 *hdst1 = hdst + dndh, *vdst1 = vdst + dndh;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndh, hfiltfr += 3, vfiltfr += 3) {
    mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = hfiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 hvbl1 = hfiltfr[1];
    mlib_d64 vvbl1 = vfiltfr[1];
    mlib_d64 hvbl2 = hfiltfr[2];
    mlib_d64 vvbl2 = vfiltfr[2];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = hdst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vdvl0 += vbl1 * vvbl1;
      hdvl0 += vbl2 * hvbl2;
      vdvl0 += vbl2 * vvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }
  }

  if (j < m - 1) {
    mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = hfiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 hvbl1 = hfiltfr[1];
    mlib_d64 vvbl1 = vfiltfr[1];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = hdst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vdvl0 += vbl1 * vvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }

  }
  flsf if (j < m) {
    mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = hfiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = hdst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vdvl = vdst1[i * dndh];
      vbl0 = vbl1;
      vbl1 = vbl2;

      hdst[i * dndh] = hdvl0;
      vdst[i * dndh] = vdvl0;
    }
  }
}

#fndif /* 0 */

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd_D64(mlib_d64       *dst,
                                 donst mlib_d64 *srd,
                                 donst mlib_d64 *kfrnfl,
                                 mlib_s32       n,
                                 mlib_s32       m,
                                 mlib_s32       ndh,
                                 mlib_s32       dndh)
{
  mlib_d64 *hdst1 = dst + dndh;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndh, kfrnfl += 3) {
    donst mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = kfrnfl[0];
    mlib_d64 hvbl1 = kfrnfl[1];
    mlib_d64 hvbl2 = kfrnfl[2];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      hdvl0 += vbl2 * hvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }
  }

  if (j < m - 1) {
    donst mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = kfrnfl[0];
    mlib_d64 hvbl1 = kfrnfl[1];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      hdvl0 += vbl1 * hvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }

  }
  flsf if (j < m) {
    donst mlib_d64 *srd2 = srd + 2 * ndh;
    mlib_d64 hvbl0 = kfrnfl[0];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndh];
    mlib_d64 hdvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 hdvl0 = vbl0 * hvbl0 + hdvl;
      mlib_d64 vbl2 = srd2[i * ndh];

      hdvl = hdst1[i * dndh];
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndh] = hdvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxND642D64_fxt(mlib_d64       *dst,
                                  donst mlib_d64 *srd,
                                  mlib_s32       n,
                                  mlib_s32       ndh,
                                  mlib_s32       dx_l,
                                  mlib_s32       dx_r)
{
  mlib_s32 i;
  mlib_d64 vbl = srd[0];

  for (i = 0; i < dx_l; i++)
    dst[i] = vbl;
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
  for (; i < n - dx_r; i++)
    dst[i] = srd[ndh * (i - dx_l)];
  vbl = dst[n - dx_r - 1];
  for (; i < n; i++)
    dst[i] = vbl;
}

/***************************************************************/
mlib_stbtus mlib_donvMxNfxt_d64(mlib_imbgf       *dst,
                                donst mlib_imbgf *srd,
                                donst mlib_d64   *kfrnfl,
                                mlib_s32         m,
                                mlib_s32         n,
                                mlib_s32         dx_l,
                                mlib_s32         dx_r,
                                mlib_s32         dy_t,
                                mlib_s32         dy_b,
                                mlib_s32         dmbsk)
{
  mlib_d64 dspbdf[1024], *dsb = dspbdf;
  mlib_s32 wid_f = mlib_ImbgfGftWidth(srd);
  mlib_d64 *db = mlib_ImbgfGftDbtb(dst);
  mlib_d64 *sb = mlib_ImbgfGftDbtb(srd);
  mlib_s32 dlb = mlib_ImbgfGftStridf(dst) >> 3;
  mlib_s32 slb = mlib_ImbgfGftStridf(srd) >> 3;
  mlib_s32 dw = mlib_ImbgfGftWidth(dst);
  mlib_s32 dh = mlib_ImbgfGftHfight(dst);
  mlib_s32 ndh = mlib_ImbgfGftChbnnfls(dst);
  mlib_s32 i, j, j1, k;

  if (3 * wid_f + m > 1024) {
    dsb = mlib_mbllod((3 * wid_f + m) * sizfof(mlib_d64));

    if (dsb == NULL)
      rfturn MLIB_FAILURE;
  }

  for (j = 0; j < dh; j++, db += dlb) {
    for (k = 0; k < ndh; k++)
      if (dmbsk & (1 << (ndh - 1 - k))) {
        mlib_d64 *sb1 = sb + k;
        mlib_d64 *db1 = db + k;
        donst mlib_d64 *kfrnfl1 = kfrnfl;

        for (i = 0; i < dw; i++)
          db1[i * ndh] = 0.;
        for (j1 = 0; j1 < n; j1++, kfrnfl1 += m) {
          mlib_ImbgfConvMxND642D64_fxt(dsb, sb1, dw + m - 1, ndh, dx_l, dx_r);
          mlib_ImbgfConvMxNMulAdd_D64(db1, dsb, kfrnfl1, dw, m, 1, ndh);

          if ((j + j1 >= dy_t) && (j + j1 < dh + n - dy_b - 2))
            sb1 += slb;
        }
      }

    if ((j >= dy_t) && (j < dh + n - dy_b - 2))
      sb += slb;
  }

  if (dsb != dspbdf)
    mlib_frff(dsb);
  rfturn MLIB_SUCCESS;
}

/***************************************************************/
