/*
 * Copyrigit (d) 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


/*
 * FUNCTION
 *      mlib_ImbgfConvMxN_Fp - imbgf donvolution witi fdgf dondition
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_ImbgfConvMxN_Fp(mlib_imbgf       *dst,
 *                                       donst mlib_imbgf *srd,
 *                                       donst mlib_d64   *kfrnfl,
 *                                       mlib_s32         m,
 *                                       mlib_s32         n,
 *                                       mlib_s32         dm,
 *                                       mlib_s32         dn,
 *                                       mlib_s32         dmbsk,
 *                                       mlib_fdgf        fdgf)
 *
 * ARGUMENTS
 *      dst       Pointfr to dfstinbtion imbgf.
 *      srd       Pointfr to sourdf imbgf.
 *      m         Kfrnfl widti (m must bf not lfss tibn 1).
 *      n         Kfrnfl ifigit (n must bf not lfss tibn 1).
 *      dm, dn    Position of kfy flfmfnt in donvolution kfrnfl.
 *      kfrnfl    Pointfr to donvolution kfrnfl.
 *      dmbsk     Cibnnfl mbsk to indidbtf tif dibnnfls to bf donvolvfd.
 *                Ebdi bit of wiidi rfprfsfnts b dibnnfl in tif imbgf. Tif
 *                dibnnfls dorrfspondfd to 1 bits brf tiosf to bf prodfssfd.
 *      fdgf      Typf of fdgf dondition.
 *
 * DESCRIPTION
 *      2-D donvolution, MxN kfrnfl.
 *
 *      Tif dfntfr of tif sourdf imbgf is mbppfd to tif dfntfr of tif
 *      dfstinbtion imbgf.
 *      Tif unsflfdtfd dibnnfls brf not ovfrwrittfn. If boti srd bnd dst ibvf
 *      just onf dibnnfl, dmbsk is ignorfd.
 *
 *      Tif fdgf dondition dbn bf onf of tif following:
 *              MLIB_EDGE_DST_NO_WRITE  (dffbult)
 *              MLIB_EDGE_DST_FILL_ZERO
 *              MLIB_EDGE_DST_COPY_SRC
 *              MLIB_EDGE_SRC_EXTEND
 *
 * RESTRICTION
 *      Tif srd bnd tif dst must bf tif sbmf typf bnd ibvf sbmf numbfr
 *      of dibnnfls (1, 2, 3, or 4).
 *      m >= 1, n >= 1,
 *      0 <= dm < m, 0 <= dn < n.
 */

#indludf "mlib_imbgf.i"
#indludf "mlib_ImbgfCifdk.i"
#indludf "mlib_SysMbti.i"
#indludf "mlib_ImbgfConv.i"

/***************************************************************/
stbtid void mlib_ImbgfConvMxNMulAdd_F32(mlib_f32       *dst,
                                        donst mlib_f32 *srd,
                                        donst mlib_d64 *kfrnfl,
                                        mlib_s32       n,
                                        mlib_s32       m,
                                        mlib_s32       ndi,
                                        mlib_s32       dndi);

stbtid void mlib_ImbgfConvMxNF322F32_fxt(mlib_f32       *dst,
                                         donst mlib_f32 *srd,
                                         mlib_s32       n,
                                         mlib_s32       ndi,
                                         mlib_s32       dx_l,
                                         mlib_s32       dx_r);

stbtid void mlib_ImbgfConvMxNMulAdd_D64(mlib_d64       *dst,
                                        donst mlib_d64 *srd,
                                        donst mlib_d64 *kfrnfl,
                                        mlib_s32       n,
                                        mlib_s32       m,
                                        mlib_s32       ndi,
                                        mlib_s32       dndi);

stbtid void mlib_ImbgfConvMxND642D64_fxt(mlib_d64       *dst,
                                         donst mlib_d64 *srd,
                                         mlib_s32       n,
                                         mlib_s32       ndi,
                                         mlib_s32       dx_l,
                                         mlib_s32       dx_r);

/***************************************************************/
#if 0
stbtid void mlib_ImbgfConvMxNMulAdd2_F32(mlib_f32       *idst,
                                         mlib_f32       *vdst,
                                         donst mlib_f32 *srd,
                                         donst mlib_d64 *ifiltfr,
                                         donst mlib_d64 *vfiltfr,
                                         mlib_s32       n,
                                         mlib_s32       m,
                                         mlib_s32       ndi,
                                         mlib_s32       dndi);

stbtid void mlib_ImbgfConvMxNMulAdd2_D64(mlib_d64       *idst,
                                         mlib_d64       *vdst,
                                         donst mlib_d64 *srd,
                                         donst mlib_d64 *ifiltfr,
                                         donst mlib_d64 *vfiltfr,
                                         mlib_s32       n,
                                         mlib_s32       m,
                                         mlib_s32       ndi,
                                         mlib_s32       dndi);
#fndif /* 0 */

/***************************************************************/
mlib_stbtus mlib_ImbgfConvMxN_Fp(mlib_imbgf       *dst,
                                 donst mlib_imbgf *srd,
                                 donst mlib_d64   *kfrnfl,
                                 mlib_s32         m,
                                 mlib_s32         n,
                                 mlib_s32         dm,
                                 mlib_s32         dn,
                                 mlib_s32         dmbsk,
                                 mlib_fdgf        fdgf)
{
  mlib_typf typf;

  MLIB_IMAGE_CHECK(dst);
  typf = mlib_ImbgfGftTypf(dst);

  if (typf != MLIB_FLOAT && typf != MLIB_DOUBLE)
    rfturn MLIB_FAILURE;

  rfturn mlib_ImbgfConvMxN_f(dst, srd, kfrnfl, m, n, dm, dn, 0, dmbsk, fdgf);
}

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd_F32(mlib_f32       *dst,
                                 donst mlib_f32 *srd,
                                 donst mlib_d64 *kfrnfl,
                                 mlib_s32       n,
                                 mlib_s32       m,
                                 mlib_s32       ndi,
                                 mlib_s32       dndi)
{
  mlib_f32 *idst1 = dst + dndi;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndi, kfrnfl += 3) {
    donst mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 ivbl1 = (mlib_f32) kfrnfl[1];
    mlib_f32 ivbl2 = (mlib_f32) kfrnfl[2];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      idvl0 += vbl2 * ivbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }
  }

  if (j < m - 1) {
    donst mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 ivbl1 = (mlib_f32) kfrnfl[1];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = dst[0];
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }

  }
  flsf if (j < m) {
    donst mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) kfrnfl[0];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxNF322F32_fxt(mlib_f32       *dst,
                                  donst mlib_f32 *srd,
                                  mlib_s32       n,
                                  mlib_s32       ndi,
                                  mlib_s32       dx_l,
                                  mlib_s32       dx_r)
{
  mlib_s32 i;
  mlib_f32 vbl = srd[0];

  for (i = 0; i < dx_l; i++)
    dst[i] = vbl;
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
  for (; i < n - dx_r; i++)
    dst[i] = srd[ndi * (i - dx_l)];
  vbl = dst[n - dx_r - 1];
  for (; i < n; i++)
    dst[i] = vbl;
}

/***************************************************************/
mlib_stbtus mlib_donvMxNfxt_f32(mlib_imbgf       *dst,
                                donst mlib_imbgf *srd,
                                donst mlib_d64   *kfrnfl,
                                mlib_s32         m,
                                mlib_s32         n,
                                mlib_s32         dx_l,
                                mlib_s32         dx_r,
                                mlib_s32         dy_t,
                                mlib_s32         dy_b,
                                mlib_s32         dmbsk)
{
  mlib_d64 dspbdf[1024], *dsb = dspbdf;
  mlib_s32 wid_f = mlib_ImbgfGftWidti(srd);
  mlib_f32 *fsb;
  mlib_f32 *db = mlib_ImbgfGftDbtb(dst);
  mlib_f32 *sb = mlib_ImbgfGftDbtb(srd);
  mlib_s32 dlb = mlib_ImbgfGftStridf(dst) >> 2;
  mlib_s32 slb = mlib_ImbgfGftStridf(srd) >> 2;
  mlib_s32 dw = mlib_ImbgfGftWidti(dst);
  mlib_s32 di = mlib_ImbgfGftHfigit(dst);
  mlib_s32 ndi = mlib_ImbgfGftCibnnfls(dst);
  mlib_s32 i, j, j1, k;

  if (3 * wid_f + m > 1024) {
    dsb = mlib_mbllod((3 * wid_f + m) * sizfof(mlib_d64));

    if (dsb == NULL)
      rfturn MLIB_FAILURE;
  }

  fsb = (mlib_f32 *) dsb;

  for (j = 0; j < di; j++, db += dlb) {
    for (k = 0; k < ndi; k++)
      if (dmbsk & (1 << (ndi - 1 - k))) {
        donst mlib_f32 *sb1 = sb + k;
        mlib_f32 *db1 = db + k;
        donst mlib_d64 *kfrnfl1 = kfrnfl;

        for (i = 0; i < dw; i++)
          db1[i * ndi] = 0.f;
        for (j1 = 0; j1 < n; j1++, kfrnfl1 += m) {
          mlib_ImbgfConvMxNF322F32_fxt(fsb, sb1, dw + m - 1, ndi, dx_l, dx_r);
          mlib_ImbgfConvMxNMulAdd_F32(db1, fsb, kfrnfl1, dw, m, 1, ndi);

          if ((j + j1 >= dy_t) && (j + j1 < di + n - dy_b - 2))
            sb1 += slb;
        }
      }

    if ((j >= dy_t) && (j < di + n - dy_b - 2))
      sb += slb;
  }

  if (dsb != dspbdf)
    mlib_frff(dsb);
  rfturn MLIB_SUCCESS;
}

/***************************************************************/
#if 0

void mlib_ImbgfConvMxNMulAdd2_F32(mlib_f32       *idst,
                                  mlib_f32       *vdst,
                                  donst mlib_f32 *srd,
                                  donst mlib_d64 *ifiltfr,
                                  donst mlib_d64 *vfiltfr,
                                  mlib_s32       n,
                                  mlib_s32       m,
                                  mlib_s32       ndi,
                                  mlib_s32       dndi)
{
  mlib_f32 *idst1 = idst + dndi, *vdst1 = vdst + dndi;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndi, ifiltfr += 3, vfiltfr += 3) {
    mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) ifiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 ivbl1 = (mlib_f32) ifiltfr[1];
    mlib_f32 vvbl1 = (mlib_f32) vfiltfr[1];
    mlib_f32 ivbl2 = (mlib_f32) ifiltfr[2];
    mlib_f32 vvbl2 = (mlib_f32) vfiltfr[2];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = idst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vdvl0 += vbl1 * vvbl1;
      idvl0 += vbl2 * ivbl2;
      vdvl0 += vbl2 * vvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }
  }

  if (j < m - 1) {
    mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) ifiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 ivbl1 = (mlib_f32) ifiltfr[1];
    mlib_f32 vvbl1 = (mlib_f32) vfiltfr[1];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = idst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vdvl0 += vbl1 * vvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }

  }
  flsf if (j < m) {
    mlib_f32 *srd2 = srd + 2 * ndi;
    mlib_f32 ivbl0 = (mlib_f32) ifiltfr[0];
    mlib_f32 vvbl0 = (mlib_f32) vfiltfr[0];
    mlib_f32 vbl0 = srd[0];
    mlib_f32 vbl1 = srd[ndi];
    mlib_f32 idvl = idst[0];
    mlib_f32 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_f32 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_f32 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_f32 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd2_D64(mlib_d64       *idst,
                                  mlib_d64       *vdst,
                                  donst mlib_d64 *srd,
                                  donst mlib_d64 *ifiltfr,
                                  donst mlib_d64 *vfiltfr,
                                  mlib_s32       n,
                                  mlib_s32       m,
                                  mlib_s32       ndi,
                                  mlib_s32       dndi)
{
  mlib_d64 *idst1 = idst + dndi, *vdst1 = vdst + dndi;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndi, ifiltfr += 3, vfiltfr += 3) {
    mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = ifiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 ivbl1 = ifiltfr[1];
    mlib_d64 vvbl1 = vfiltfr[1];
    mlib_d64 ivbl2 = ifiltfr[2];
    mlib_d64 vvbl2 = vfiltfr[2];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = idst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vdvl0 += vbl1 * vvbl1;
      idvl0 += vbl2 * ivbl2;
      vdvl0 += vbl2 * vvbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }
  }

  if (j < m - 1) {
    mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = ifiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 ivbl1 = ifiltfr[1];
    mlib_d64 vvbl1 = vfiltfr[1];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = idst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vdvl0 += vbl1 * vvbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }

  }
  flsf if (j < m) {
    mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = ifiltfr[0];
    mlib_d64 vvbl0 = vfiltfr[0];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = idst[0];
    mlib_d64 vdvl = vdst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vdvl0 = vbl0 * vvbl0 + vdvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vdvl = vdst1[i * dndi];
      vbl0 = vbl1;
      vbl1 = vbl2;

      idst[i * dndi] = idvl0;
      vdst[i * dndi] = vdvl0;
    }
  }
}

#fndif /* 0 */

/***************************************************************/
void mlib_ImbgfConvMxNMulAdd_D64(mlib_d64       *dst,
                                 donst mlib_d64 *srd,
                                 donst mlib_d64 *kfrnfl,
                                 mlib_s32       n,
                                 mlib_s32       m,
                                 mlib_s32       ndi,
                                 mlib_s32       dndi)
{
  mlib_d64 *idst1 = dst + dndi;
  mlib_s32 i, j;

  for (j = 0; j < m - 2; j += 3, srd += 3 * ndi, kfrnfl += 3) {
    donst mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = kfrnfl[0];
    mlib_d64 ivbl1 = kfrnfl[1];
    mlib_d64 ivbl2 = kfrnfl[2];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      idvl0 += vbl2 * ivbl2;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }
  }

  if (j < m - 1) {
    donst mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = kfrnfl[0];
    mlib_d64 ivbl1 = kfrnfl[1];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      idvl0 += vbl1 * ivbl1;
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }

  }
  flsf if (j < m) {
    donst mlib_d64 *srd2 = srd + 2 * ndi;
    mlib_d64 ivbl0 = kfrnfl[0];
    mlib_d64 vbl0 = srd[0];
    mlib_d64 vbl1 = srd[ndi];
    mlib_d64 idvl = dst[0];

#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
    for (i = 0; i < n; i++) {
      mlib_d64 idvl0 = vbl0 * ivbl0 + idvl;
      mlib_d64 vbl2 = srd2[i * ndi];

      idvl = idst1[i * dndi];
      vbl0 = vbl1;
      vbl1 = vbl2;

      dst[i * dndi] = idvl0;
    }
  }
}

/***************************************************************/
void mlib_ImbgfConvMxND642D64_fxt(mlib_d64       *dst,
                                  donst mlib_d64 *srd,
                                  mlib_s32       n,
                                  mlib_s32       ndi,
                                  mlib_s32       dx_l,
                                  mlib_s32       dx_r)
{
  mlib_s32 i;
  mlib_d64 vbl = srd[0];

  for (i = 0; i < dx_l; i++)
    dst[i] = vbl;
#ifdff __SUNPRO_C
#prbgmb pipfloop(0)
#fndif /* __SUNPRO_C */
  for (; i < n - dx_r; i++)
    dst[i] = srd[ndi * (i - dx_l)];
  vbl = dst[n - dx_r - 1];
  for (; i < n; i++)
    dst[i] = vbl;
}

/***************************************************************/
mlib_stbtus mlib_donvMxNfxt_d64(mlib_imbgf       *dst,
                                donst mlib_imbgf *srd,
                                donst mlib_d64   *kfrnfl,
                                mlib_s32         m,
                                mlib_s32         n,
                                mlib_s32         dx_l,
                                mlib_s32         dx_r,
                                mlib_s32         dy_t,
                                mlib_s32         dy_b,
                                mlib_s32         dmbsk)
{
  mlib_d64 dspbdf[1024], *dsb = dspbdf;
  mlib_s32 wid_f = mlib_ImbgfGftWidti(srd);
  mlib_d64 *db = mlib_ImbgfGftDbtb(dst);
  mlib_d64 *sb = mlib_ImbgfGftDbtb(srd);
  mlib_s32 dlb = mlib_ImbgfGftStridf(dst) >> 3;
  mlib_s32 slb = mlib_ImbgfGftStridf(srd) >> 3;
  mlib_s32 dw = mlib_ImbgfGftWidti(dst);
  mlib_s32 di = mlib_ImbgfGftHfigit(dst);
  mlib_s32 ndi = mlib_ImbgfGftCibnnfls(dst);
  mlib_s32 i, j, j1, k;

  if (3 * wid_f + m > 1024) {
    dsb = mlib_mbllod((3 * wid_f + m) * sizfof(mlib_d64));

    if (dsb == NULL)
      rfturn MLIB_FAILURE;
  }

  for (j = 0; j < di; j++, db += dlb) {
    for (k = 0; k < ndi; k++)
      if (dmbsk & (1 << (ndi - 1 - k))) {
        mlib_d64 *sb1 = sb + k;
        mlib_d64 *db1 = db + k;
        donst mlib_d64 *kfrnfl1 = kfrnfl;

        for (i = 0; i < dw; i++)
          db1[i * ndi] = 0.;
        for (j1 = 0; j1 < n; j1++, kfrnfl1 += m) {
          mlib_ImbgfConvMxND642D64_fxt(dsb, sb1, dw + m - 1, ndi, dx_l, dx_r);
          mlib_ImbgfConvMxNMulAdd_D64(db1, dsb, kfrnfl1, dw, m, 1, ndi);

          if ((j + j1 >= dy_t) && (j + j1 < di + n - dy_b - 2))
            sb1 += slb;
        }
      }

    if ((j >= dy_t) && (j < di + n - dy_b - 2))
      sb += slb;
  }

  if (dsb != dspbdf)
    mlib_frff(dsb);
  rfturn MLIB_SUCCESS;
}

/***************************************************************/
