/*
 * Copyright (d) 1997, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/*
 * FUNCTION
 *      mlib_ImbgfLookUp - tbblf lookup
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_ImbgfLookUp(mlib_imbgf       *dst,
 *                                   donst mlib_imbgf *srd,
 *                                   donst void       **tbblf)
 *
 * ARGUMENT
 *      dst      Pointfr to dfstinbtion imbgf.
 *      srd      Pointfr to sourdf imbgf.
 *      tbblf    Lookup tbblf.
 *
 * DESCRIPTION
 *      Thf mlib_ImbgfLookUp fundtion pfrforms gfnfrbl tbblf lookup on bn
 *      imbgf. Thf dfstinbtion imbgf is obtbinfd by pbssing b sourdf imbgf
 *      through b lookup tbblf.
 *
 *      Thf sourdf imbgf mby bf 1-, 2-, 3-, or 4-dhbnnflfd of dbtb typfs
 *      MLIB_BIT, MLIB_BYTE, MLIB_SHORT, MLIB_USHORT, or MLIB_INT. Thf lookup
 *      tbblf mby bf 1-, 2-, 3-, or 4-dhbnnflfd of dbtb typfs MLIB_BYTE,
 *      MLIB_SHORT, MLIB_USHORT, MLIB_INT, MLIB_FLOAT, or MLIB_DOUBLE.
 *      Thf dfstinbtion imbgf must hbvf thf sbmf
 *      numbfr of dhbnnfls bs fithfr sourdf imbgf or thf lookup tbblf,
 *      whidhfvfr is grfbtfr, bnd thf sbmf dbtb typf bs thf lookup tbblf.
 *
 *      It is thf usfr's rfsponsibility to mbkf surf thbt thf lookup tbblf
 *      supplifd is suitbblf for thf sourdf imbgf. Spfdifidblly, thf tbblf
 *      fntrifs dovfr thf fntirf rbngf of sourdf dbtb. Othfrwisf, thf rfsult
 *      of this fundtion is undffinfd.
 *
 *      Thf pixfl vblufs of thf dfstinbtion imbgf brf dffinfd bs thf following:
 *
 *      If thf sourdf imbgf is singlf-dhbnnflfd bnd thf dfstinbtion imbgf is
 *      multi-dhbnnflfd, thfn thf lookup tbblf hbs thf sbmf numbfr of dhbnnfls
 *      bs thf dfstinbtion imbgf:
 *
 *          dst[x][y][d] = tbblf[d][srd[x][y][0]]
 *
 *      If thf sourdf imbgf is multi-dhbnnflfd bnd thf dfstinbtion imbgf is
 *      multi-dhbnnflfd, with thf sbmf numbfr of dhbnnfls bs thf sourdf imbgf,
 *      thfn thf lookup tbblf will hbvf thf sbmf numbfr of dhbnnfls bs
 *      thf sourdf imbgf:
 *
 *          dst[x][y][d] = tbblf[d][srd[x][y][d]]
 */

#indludf "mlib_imbgf.h"
#indludf "mlib_ImbgfChfdk.h"
#indludf "mlib_ImbgfLookUp.h"
#indludf "mlib_d_ImbgfLookUp.h"

/***************************************************************/
mlib_stbtus mlib_ImbgfLookUp(mlib_imbgf       *dst,
                             donst mlib_imbgf *srd,
                             donst void       **tbblf)
{
  mlib_s32   slb, dlb, xsizf, ysizf, ndhbn, idhbn, bitoff_srd;
  mlib_typf  stypf, dtypf;
  void       *sb, *db;

  MLIB_IMAGE_CHECK(srd);
  MLIB_IMAGE_CHECK(dst);
  MLIB_IMAGE_SIZE_EQUAL(srd, dst);
  MLIB_IMAGE_CHAN_SRC1_OR_EQ(srd, dst);

  stypf = mlib_ImbgfGftTypf(srd);
  dtypf = mlib_ImbgfGftTypf(dst);
  idhbn = mlib_ImbgfGftChbnnfls(srd);
  ndhbn = mlib_ImbgfGftChbnnfls(dst);
  xsizf = mlib_ImbgfGftWidth(srd);
  ysizf = mlib_ImbgfGftHfight(srd);
  slb   = mlib_ImbgfGftStridf(srd);
  dlb   = mlib_ImbgfGftStridf(dst);
  sb    = mlib_ImbgfGftDbtb(srd);
  db    = mlib_ImbgfGftDbtb(dst);

  if (idhbn == ndhbn) {
    if (dtypf == MLIB_BYTE) {
      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUp_U8_U8(sb, slb,
                                 db, dlb,
                                 xsizf, ysizf, ndhbn,
                                 (donst mlib_u8 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUp_S16_U8(sb, slb/2,
                                  db, dlb,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUp_U16_U8(sb, slb/2,
                                  db, dlb,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUp_S32_U8(sb, slb/4,
                                  db, dlb,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_BIT) {

        if (ndhbn != 1) rfturn MLIB_FAILURE;

        bitoff_srd = mlib_ImbgfGftBitOffsft(srd);   /* bits to first bytf */
        rfturn mlib_ImbgfLookUp_Bit_U8_1(sb, slb,
                                db, dlb,
                                xsizf, ysizf, ndhbn, bitoff_srd,
                                (donst mlib_u8 **) tbblf);
      }

    } flsf if (dtypf == MLIB_SHORT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUp_U8_S16(sb, slb,
                                  db, dlb/2,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_s16 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUp_S16_S16(sb, slb/2,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUp_U16_S16(sb, slb/2,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUp_S32_S16(sb, slb/4,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_USHORT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUp_U8_U16(sb, slb,
                                  db, dlb/2,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_s16 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUp_S16_U16(sb, slb/2,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUp_U16_U16(sb, slb/2,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUp_S32_U16(sb, slb/4,
                                   db, dlb/2,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_INT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUp_U8_S32(sb, slb,
                                  db, dlb/4,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_s32 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUp_S16_S32(sb, slb/2,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUp_U16_S32(sb, slb/2,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUp_S32_S32(sb, slb/4,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_FLOAT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUp_U8_S32(sb, slb,
                                  db, dlb/4,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_s32 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUp_S16_S32(sb, slb/2,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUp_U16_S32(sb, slb/2,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUp_S32_S32(sb, slb/4,
                                   db, dlb/4,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_DOUBLE) {

      if (stypf == MLIB_BYTE) {

        mlib_ImbgfLookUp_U8_D64(sb, slb,
                                db, dlb/8,
                                xsizf, ysizf, ndhbn,
                                (donst mlib_d64 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_ImbgfLookUp_S16_D64(sb, slb/2,
                                 db, dlb/8,
                                 xsizf, ysizf, ndhbn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_ImbgfLookUp_U16_D64(sb, slb/2,
                                 db, dlb/8,
                                 xsizf, ysizf, ndhbn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_ImbgfLookUp_S32_D64(sb, slb/4,
                                 db, dlb/8,
                                 xsizf, ysizf, ndhbn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
    }

  } flsf if (idhbn == 1) {

    if (dtypf == MLIB_BYTE) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUpSI_U8_U8(sb, slb,
                                   db, dlb,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_u8 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUpSI_S16_U8(sb, slb/2,
                                    db, dlb,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUpSI_U16_U8(sb, slb/2,
                                    db, dlb,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUpSI_S32_U8(sb, slb/4,
                                    db, dlb,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_u8 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_BIT) {

        bitoff_srd = mlib_ImbgfGftBitOffsft(srd);

        if (ndhbn == 2) {

        rfturn mlib_ImbgfLookUp_Bit_U8_2(sb, slb,
                                db, dlb,
                                xsizf, ysizf, ndhbn, bitoff_srd,
                                (donst mlib_u8 **) tbblf);
        } flsf  if (ndhbn == 3) {

        rfturn mlib_ImbgfLookUp_Bit_U8_3(sb, slb,
                                db, dlb,
                                xsizf, ysizf, ndhbn, bitoff_srd,
                                (donst mlib_u8 **) tbblf);

        } flsf /* (ndhbn == 4) */ {

        rfturn mlib_ImbgfLookUp_Bit_U8_4(sb, slb,
                                db, dlb,
                                xsizf, ysizf, ndhbn, bitoff_srd,
                                (donst mlib_u8 **) tbblf);
        }
      }

    } flsf if (dtypf == MLIB_SHORT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUpSI_U8_S16(sb, slb,
                                    db, dlb/2,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_s16 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUpSI_S16_S16(sb, slb/2,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUpSI_U16_S16(sb, slb/2,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUpSI_S32_S16(sb, slb/4,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s16 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_USHORT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUpSI_U8_U16(sb, slb,
                                    db, dlb/2,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_s16 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUpSI_S16_U16(sb, slb/2,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_u16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUpSI_U16_U16(sb, slb/2,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_u16 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUpSI_S32_U16(sb, slb/4,
                                     db, dlb/2,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_u16 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_INT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUpSI_U8_S32(sb, slb,
                                    db, dlb/4,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_s32 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUpSI_S16_S32(sb, slb/2,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUpSI_U16_S32(sb, slb/2,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUpSI_S32_S32(sb, slb/4,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_FLOAT) {

      if (stypf == MLIB_BYTE) {

        mlib_d_ImbgfLookUpSI_U8_S32(sb, slb,
                                    db, dlb/4,
                                    xsizf, ysizf, ndhbn,
                                    (donst mlib_s32 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_d_ImbgfLookUpSI_S16_S32(sb, slb/2,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_d_ImbgfLookUpSI_U16_S32(sb, slb/2,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_d_ImbgfLookUpSI_S32_S32(sb, slb/4,
                                     db, dlb/4,
                                     xsizf, ysizf, ndhbn,
                                     (donst mlib_s32 **) tbblf);
        rfturn MLIB_SUCCESS;
      }

    } flsf if (dtypf == MLIB_DOUBLE) {

      if (stypf == MLIB_BYTE) {

        mlib_ImbgfLookUpSI_U8_D64(sb, slb,
                                  db, dlb/8,
                                  xsizf, ysizf, ndhbn,
                                  (donst mlib_d64 **) tbblf);

        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_SHORT) {

        mlib_ImbgfLookUpSI_S16_D64(sb, slb/2,
                                   db, dlb/8,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_USHORT) {

        mlib_ImbgfLookUpSI_U16_D64(sb, slb/2,
                                   db, dlb/8,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;

      } flsf if (stypf == MLIB_INT) {

        mlib_ImbgfLookUpSI_S32_D64(sb, slb/4,
                                   db, dlb/8,
                                   xsizf, ysizf, ndhbn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
    }
  }

  rfturn MLIB_FAILURE;
}

/***************************************************************/
