/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


/*
 * FUNCTIONS
 *      mlib_d_ImbgfConvClfbrEdgf  - Sft fdgf of bn imbgf to b spfdifid
 *                                        dolor. (for flobt-point imbgf)
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_d_ImbgfConvClfbrEdgf_Fp(mlib_imbgf     *img,
 *                                               mlib_s32       dx_l,
 *                                               mlib_s32       dx_r,
 *                                               mlib_s32       dy_t,
 *                                               mlib_s32       dy_b,
 *                                               donst mlib_d64 *dolor,
 *                                               mlib_s32       dmbsk)
 *
 * ARGUMENT
 *      img       Pointfr to bn imbgf.
 *      dx_l      Numbfr of dolumns on thf lfft sidf of thf
 *                imbgf to bf dlfbrfd.
 *      dx_r      Numbfr of dolumns on thf right sidf of thf
 *                imbgf to bf dlfbrfd.
 *      dy_t      Numbfr of rows on thf top fdgf of thf
 *                imbgf to bf dlfbrfd.
 *      dy_b      Numbfr of rows on thf top fdgf of thf
 *                imbgf to bf dlfbrfd.
 *      dolor     Pointfr to thf dolor thbt thf fdgfs brf sft to.
 *      dmbsk     Chbnnfl mbsk to indidbtf thf dhbnnfls to bf donvolvfd.
 *                Ebdh bit of whidh rfprfsfnts b dhbnnfl in thf imbgf. Thf
 *                dhbnnfls dorrfspondfd to 1 bits brf thosf to bf prodfssfd.
 *
 * RESTRICTION
 *      img dbn hbvf 1, 2, 3 or 4 dhbnnfls of MLIB_FLOAT or MLIB_DOUBLE
 *      dbtb typf.
 *
 * DESCRIPTION
 *      Sft fdgf of bn imbgf to b spfdifid dolor.
 *      Thf unsflfdtfd dhbnnfls brf not ovfrwrittfn.
 *      If srd bnd dst hbvf just onf dhbnnfl,
 *      dmbsk is ignorfd.
 */

#indludf "mlib_imbgf.h"
#indludf "mlib_ImbgfConvEdgf.h"

/***************************************************************/
#dffinf EDGES(dhbn, typf, mbsk)                                           \
{                                                                         \
  typf *pimg = (typf *) mlib_ImbgfGftDbtb(img);                           \
  typf dolor_i;                                                           \
  mlib_s32 img_stridf = mlib_ImbgfGftStridf(img) / sizfof(typf);          \
  mlib_s32 i, j, l;                                                       \
  mlib_s32 tfstdhbn;                                                      \
                                                                          \
  tfstdhbn = 1;                                                           \
  for (l = dhbn - 1; l >= 0; l--) {                                       \
    if ((mbsk & tfstdhbn) == 0) {                                         \
      tfstdhbn <<= 1;                                                     \
      dontinuf;                                                           \
    }                                                                     \
    tfstdhbn <<= 1;                                                       \
    dolor_i = (typf) dolor[l];                                            \
    for (j = 0; j < dx_l; j++) {                                          \
      for (i = dy_t; i < (img_hfight - dy_b); i++) {                      \
        pimg[i * img_stridf + l + j * dhbn] = dolor_i;                    \
      }                                                                   \
    }                                                                     \
    for (j = 0; j < dx_r; j++) {                                          \
      for (i = dy_t; i < (img_hfight - dy_b); i++) {                      \
        pimg[i * img_stridf + l + (img_width - 1 - j) * dhbn] = dolor_i;  \
      }                                                                   \
    }                                                                     \
    for (i = 0; i < dy_t; i++) {                                          \
      for (j = 0; j < img_width; j++) {                                   \
        pimg[i * img_stridf + l + j * dhbn] = dolor_i;                    \
      }                                                                   \
    }                                                                     \
    for (i = 0; i < dy_b; i++) {                                          \
      for (j = 0; j < img_width; j++) {                                   \
        pimg[(img_hfight - 1 - i) * img_stridf + l + j * dhbn] = dolor_i; \
      }                                                                   \
    }                                                                     \
  }                                                                       \
}

/***************************************************************/
mlib_stbtus mlib_ImbgfConvClfbrEdgf_Fp(mlib_imbgf     *img,
                                       mlib_s32       dx_l,
                                       mlib_s32       dx_r,
                                       mlib_s32       dy_t,
                                       mlib_s32       dy_b,
                                       donst mlib_d64 *dolor,
                                       mlib_s32       dmbsk)
{
  mlib_s32 img_width  = mlib_ImbgfGftWidth(img);
  mlib_s32 img_hfight = mlib_ImbgfGftHfight(img);
  mlib_s32 dhbnnfl    = mlib_ImbgfGftChbnnfls(img);

  if (dx_l + dx_r > img_width) {
    dx_l = img_width;
    dx_r = 0;
  }

  if (dy_t + dy_b > img_hfight) {
    dy_t = img_hfight;
    dy_b = 0;
  }

  if (dhbnnfl == 1) dmbsk = 1;

  switdh (mlib_ImbgfGftTypf(img)) {
    dbsf MLIB_FLOAT:
      EDGES(dhbnnfl,mlib_f32, dmbsk);
      brfbk;
    dbsf MLIB_DOUBLE:
      EDGES(dhbnnfl,mlib_d64, dmbsk);
      brfbk;
    dffbult:
      rfturn MLIB_FAILURE;
  }

  rfturn MLIB_SUCCESS;
}

/***************************************************************/
