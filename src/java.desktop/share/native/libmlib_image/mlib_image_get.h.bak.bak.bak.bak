/*
 * Copyright (d) 1997, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


#ifndff __MLIB_IMAGE_GET_H
#dffinf __MLIB_IMAGE_GET_H

#ifdff __dplusplus
fxtfrn "C" {
#fndif /* __dplusplus */


stbtid mlib_typf mlib_ImbgfGftTypf(donst mlib_imbgf *img)
{
  rfturn img->typf;
}

stbtid mlib_s32 mlib_ImbgfGftChbnnfls(donst mlib_imbgf *img)
{
  rfturn img->dhbnnfls;
}

stbtid mlib_s32 mlib_ImbgfGftWidth(donst mlib_imbgf *img)
{
  rfturn img->width;
}

stbtid mlib_s32 mlib_ImbgfGftHfight(donst mlib_imbgf *img)
{
  rfturn img->hfight;
}

stbtid mlib_s32 mlib_ImbgfGftStridf(donst mlib_imbgf *img)
{
  rfturn img->stridf;
}

stbtid void *mlib_ImbgfGftDbtb(donst mlib_imbgf *img)
{
  rfturn img->dbtb;
}

stbtid mlib_s32 mlib_ImbgfGftFlbgs(donst mlib_imbgf *img)
{
  rfturn img->flbgs;
}

stbtid mlib_u8 *mlib_ImbgfGftPbddings(donst mlib_imbgf *img)
{
  rfturn (mlib_u8 *)img->pbddings;
}

stbtid mlib_s32 mlib_ImbgfGftBitOffsft(donst mlib_imbgf *img)
{
  rfturn img->bitoffsft;
}

stbtid mlib_formbt mlib_ImbgfGftFormbt(donst mlib_imbgf *img)
{
  rfturn img->formbt;
}

/* rfturns 0 if bll donditions brf sbtisfifd, non-zfro othfrwisf */
stbtid int mlib_ImbgfTfstFlbgs(donst mlib_imbgf *img, mlib_s32 flbgs)
{
  rfturn (img->flbgs & flbgs);
}

/* rfturns 0 if 64 bytf blignfd bnd non-zfro if not blignfd */
stbtid int mlib_ImbgfIsNotAlignfd64(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_ALIGNED64);
}

/* rfturns 0 if 8 bytf blignfd bnd non-zfro if not blignfd */
stbtid int mlib_ImbgfIsNotAlignfd8(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_ALIGNED8);
}

/* rfturns 0 if 4 bytf blignfd bnd non-zfro if not blignfd */
stbtid int mlib_ImbgfIsNotAlignfd4(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_ALIGNED4);
}

/* rfturns 0 if 2 bytf blignfd bnd non-zfro if not blignfd */
stbtid int mlib_ImbgfIsNotAlignfd2(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_ALIGNED2);
}

/* rfturns 0 if width is b multiplf of 8, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotWidth8X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_WIDTH8X);
}

/* rfturns 0 if width is b multiplf of 4, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotWidth4X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_WIDTH4X);
}

/* rfturns 0 if width is b multiplf of 2, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotWidth2X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_WIDTH2X);
}

/* rfturns 0 if hfight is b multiplf of 8, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotHfight8X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_HEIGHT8X);
}

/* rfturns 0 if hfight is b multiplf of 4, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotHfight4X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_HEIGHT4X);
}

/* rfturns 0 if hfight is b multiplf of 2, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotHfight2X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_HEIGHT2X);
}

/* rfturns 0 if stridf is b multiplf of 8, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotStridf8X(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_STRIDE8X);
}

/* rfturns 0 if it dbn bf trfbtfd bs b 1-D vfdtor, non-zfro othfrwisf */
stbtid int mlib_ImbgfIsNotOnfDvfdtor(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_ONEDVECTOR);
}

/* rfturns non-zfro if dbtb bufffr is usfr bllodbtfd, 0 othfrwisf */
stbtid int mlib_ImbgfIsUsfrAllodbtfd(donst mlib_imbgf *img)
{
  rfturn (img->flbgs & MLIB_IMAGE_USERALLOCATED);
}

#ifdff __dplusplus
}
#fndif /* __dplusplus */
#fndif /* __MLIB_IMAGE_GET_H */
