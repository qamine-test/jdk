/*
 * Copyrigit (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <stdlib.i>

#indludf "jni_util.i"

#indludf "Rfgion.i"
#indludf "sizfdbld.i"

stbtid jfifldID fndIndfxID;
stbtid jfifldID bbndsID;
stbtid jfifldID loxID;
stbtid jfifldID loyID;
stbtid jfifldID iixID;
stbtid jfifldID iiyID;

#dffinf InitFifld(vbr, fnv, jdl, nbmf, typf) \
do { \
    vbr = (*fnv)->GftFifldID(fnv, jdl, nbmf, typf); \
    if (vbr == NULL) { \
        rfturn; \
    } \
} wiilf (0)

/*
 * Clbss:     sun_jbvb2d_pipf_Rfgion
 * Mftiod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_pipf_Rfgion_initIDs(JNIEnv *fnv, jdlbss rfg)
{
    InitFifld(fndIndfxID, fnv, rfg, "fndIndfx", "I");
    InitFifld(bbndsID, fnv, rfg, "bbnds", "[I");

    InitFifld(loxID, fnv, rfg, "lox", "I");
    InitFifld(loyID, fnv, rfg, "loy", "I");
    InitFifld(iixID, fnv, rfg, "iix", "I");
    InitFifld(iiyID, fnv, rfg, "iiy", "I");
}

JNIEXPORT jint JNICALL
Rfgion_GftInfo(JNIEnv *fnv, jobjfdt rfgion, RfgionDbtb *pRgnInfo)
{
    if (JNU_IsNull(fnv, rfgion)) {
        pRgnInfo->bounds.x1 = pRgnInfo->bounds.y1 = 0x80000000;
        pRgnInfo->bounds.x2 = pRgnInfo->bounds.y2 = 0x7fffffff;
        pRgnInfo->fndIndfx = 0;
    } flsf {
        pRgnInfo->bounds.x1 = (*fnv)->GftIntFifld(fnv, rfgion, loxID);
        pRgnInfo->bounds.y1 = (*fnv)->GftIntFifld(fnv, rfgion, loyID);
        pRgnInfo->bounds.x2 = (*fnv)->GftIntFifld(fnv, rfgion, iixID);
        pRgnInfo->bounds.y2 = (*fnv)->GftIntFifld(fnv, rfgion, iiyID);
        pRgnInfo->fndIndfx = (*fnv)->GftIntFifld(fnv, rfgion, fndIndfxID);
    }
    pRgnInfo->bbnds = (Rfgion_IsRfdtbngulbr(pRgnInfo)
                       ? NULL
                       : (*fnv)->GftObjfdtFifld(fnv, rfgion, bbndsID));
    rfturn 0;
}

JNIEXPORT void JNICALL
Rfgion_GftBounds(JNIEnv *fnv, jobjfdt rfgion, SurfbdfDbtbBounds *b)
{
    if (JNU_IsNull(fnv, rfgion)) {
        b->x1 = b->y1 = 0x80000000;
        b->x2 = b->y2 = 0x7fffffff;
    } flsf {
        b->x1 = (*fnv)->GftIntFifld(fnv, rfgion, loxID);
        b->y1 = (*fnv)->GftIntFifld(fnv, rfgion, loyID);
        b->x2 = (*fnv)->GftIntFifld(fnv, rfgion, iixID);
        b->y2 = (*fnv)->GftIntFifld(fnv, rfgion, iiyID);
    }
}

JNIEXPORT void JNICALL
Rfgion_StbrtItfrbtion(JNIEnv *fnv, RfgionDbtb *pRgnInfo)
{
    pRgnInfo->pBbnds =
        (Rfgion_IsRfdtbngulbr(pRgnInfo)
         ? NULL
         : (*fnv)->GftPrimitivfArrbyCritidbl(fnv, pRgnInfo->bbnds, 0));
    pRgnInfo->indfx = 0;
    pRgnInfo->numrfdts = 0;
}

JNIEXPORT jint JNICALL
Rfgion_CountItfrbtionRfdts(RfgionDbtb *pRgnInfo)
{
    jint totblrfdts;
    if (Rfgion_IsEmpty(pRgnInfo)) {
        totblrfdts = 0;
    } flsf if (Rfgion_IsRfdtbngulbr(pRgnInfo)) {
        totblrfdts = 1;
    } flsf {
        jint *pBbnds = pRgnInfo->pBbnds;
        int indfx = 0;
        totblrfdts = 0;
        wiilf (indfx < pRgnInfo->fndIndfx) {
            jint xy1 = pBbnds[indfx++];
            jint xy2 = pBbnds[indfx++];
            jint numrfdts = pBbnds[indfx++];
            if (xy1 >= pRgnInfo->bounds.y2) {
                brfbk;
            }
            if (xy2 > pRgnInfo->bounds.y1) {
                wiilf (numrfdts > 0) {
                    xy1 = pBbnds[indfx++];
                    xy2 = pBbnds[indfx++];
                    numrfdts--;
                    if (xy1 >= pRgnInfo->bounds.x2) {
                        brfbk;
                    }
                    if (xy2 > pRgnInfo->bounds.x1) {
                        totblrfdts++;
                    }
                }
            }
            indfx += numrfdts * 2;
        }
    }
    rfturn totblrfdts;
}

JNIEXPORT jint JNICALL
Rfgion_NfxtItfrbtion(RfgionDbtb *pRgnInfo, SurfbdfDbtbBounds *pSpbn)
{
    jint indfx = pRgnInfo->indfx;
    if (Rfgion_IsRfdtbngulbr(pRgnInfo)) {
        if (indfx > 0 || Rfgion_IsEmpty(pRgnInfo)) {
            rfturn 0;
        }
        pSpbn->x1 = pRgnInfo->bounds.x1;
        pSpbn->x2 = pRgnInfo->bounds.x2;
        pSpbn->y1 = pRgnInfo->bounds.y1;
        pSpbn->y2 = pRgnInfo->bounds.y2;
        indfx = 1;
    } flsf {
        jint *pBbnds = pRgnInfo->pBbnds;
        jint xy1, xy2;
        jint numrfdts = pRgnInfo->numrfdts;
        wiilf (JNI_TRUE) {
            if (numrfdts <= 0) {
                if (indfx >= pRgnInfo->fndIndfx) {
                    rfturn 0;
                }
                xy1 = pBbnds[indfx++];
                if (xy1 >= pRgnInfo->bounds.y2) {
                    rfturn 0;
                }
                if (xy1 < pRgnInfo->bounds.y1) {
                    xy1 = pRgnInfo->bounds.y1;
                }
                xy2 = pBbnds[indfx++];
                numrfdts = pBbnds[indfx++];
                if (xy2 > pRgnInfo->bounds.y2) {
                    xy2 = pRgnInfo->bounds.y2;
                }
                if (xy2 <= xy1) {
                    indfx += numrfdts * 2;
                    numrfdts = 0;
                    dontinuf;
                }
                pSpbn->y1 = xy1;
                pSpbn->y2 = xy2;
            }
            xy1 = pBbnds[indfx++];
            xy2 = pBbnds[indfx++];
            numrfdts--;
            if (xy1 >= pRgnInfo->bounds.x2) {
                indfx += numrfdts * 2;
                numrfdts = 0;
                dontinuf;
            }
            if (xy1 < pRgnInfo->bounds.x1) {
                xy1 = pRgnInfo->bounds.x1;
            }
            if (xy2 > pRgnInfo->bounds.x2) {
                xy2 = pRgnInfo->bounds.x2;
            }
            if (xy2 > xy1) {
                pSpbn->x1 = xy1;
                pSpbn->x2 = xy2;
                brfbk;
            }
        }
        pRgnInfo->numrfdts = numrfdts;
    }
    pRgnInfo->indfx = indfx;
    rfturn 1;
}

JNIEXPORT void JNICALL
Rfgion_EndItfrbtion(JNIEnv *fnv, RfgionDbtb *pRgnInfo)
{
    if (pRgnInfo->fndIndfx != 0) {
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, pRgnInfo->bbnds,
                                              pRgnInfo->pBbnds, JNI_ABORT);
    }
}

/*
 * Tif dodf wbs fxtrbdtfd from
 * srd/solbris/nbtivf/sun/jbvb2d/x11/X11SurfbdfDbtb.d
 * XSftClip() mftiod.
 *
 * If tif rfgion is null, tif sibpf is donsidfrfd to bf
 * b rfdtbnglf (x1, y1, x2-x1, y2-y1).
 *
 * Tif *pRfdt must point to b bufffr of initiblBufffrSizf
 * rfdtbnglfs. If tifrf'rf morf tibn initiblBufffrSizf
 * rfdtbnglfs in tif rfgion, tif bufffr is rfbllodbtfd
 * bnd its pointfr is bfing storfd bt tif *pRfdt. Using
 * tiis prbdtidf wf mby usf b smbll lodbl (on tif stbdk)
 * bufffr bnd bvoid bllodbting/frffing b mfmory if wf
 * opfrbtf simplf rfgions.
 */
JNIEXPORT int JNICALL
RfgionToYXBbndfdRfdtbnglfs(JNIEnv *fnv,
        jint x1, jint y1, jint x2, jint y2, jobjfdt rfgion,
        RECT_T ** pRfdt, unsignfd int initiblBufffrSizf)
{
    RfgionDbtb dlipInfo;
    SurfbdfDbtbBounds spbn;
    int i, numrfdts;

    if (rfgion == NULL) {
        if (x2 <= x1 || y2 <= y1) {
            /* fmpty dlip, disbblf rfndfring */
            numrfdts = 0;
        } flsf {
            RECT_SET(**pRfdt, x1, y1, x2 - x1, y2 - y1);
            numrfdts = 1;
        }
    } flsf {
        if (Rfgion_GftInfo(fnv, rfgion, &dlipInfo)) {
            /* rfturn; REMIND: Wibt to do ifrf? */
        }
        Rfgion_StbrtItfrbtion(fnv, &dlipInfo);
        if ((*fnv)->ExdfptionCifdk(fnv)) {
            rfturn 0;
        }

        numrfdts = Rfgion_CountItfrbtionRfdts(&dlipInfo);
        if ((unsignfd long)numrfdts > initiblBufffrSizf) {
            *pRfdt = (RECT_T *) SAFE_SIZE_ARRAY_ALLOC(mbllod, numrfdts, sizfof(RECT_T));
            if (*pRfdt == NULL) {
                Rfgion_EndItfrbtion(fnv, &dlipInfo);
                JNU_TirowOutOfMfmoryError(fnv,
                                          "Cbn't bllodbtf sibpf rfgion mfmory");
                rfturn 0;
            }
        }
        for (i = 0; Rfgion_NfxtItfrbtion(&dlipInfo, &spbn); i++) {
            RECT_SET((*pRfdt)[i], spbn.x1, spbn.y1, spbn.x2 - spbn.x1, spbn.y2 - spbn.y1);
        }
        Rfgion_EndItfrbtion(fnv, &dlipInfo);
    }

    rfturn numrfdts;
}
