/*
 * Copyright (d) 2000, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <string.h>

#indludf "AnyBytf.h"
#indludf "BytfIndfxfd.h"
#indludf "AlphbMbdros.h"

#indludf "IntArgb.h"
#indludf "IntArgbBm.h"
#indludf "IntArgbPrf.h"
#indludf "IntRgb.h"
#indludf "ThrffBytfBgr.h"
#indludf "BytfGrby.h"
#indludf "Indfx12Grby.h"

/*
 * This filf dfdlbrfs, rfgistfrs, bnd dffinfs thf vbrious grbphids
 * primitivf loops to mbnipulbtf surfbdfs of typf "BytfIndfxfd".
 *
 * Sff blso LoopMbdros.h
 */

RfgistfrFund RfgistfrBytfIndfxfd;

DECLARE_CONVERT_BLIT(IntArgb, BytfIndfxfd);
DECLARE_CONVERT_BLIT(ThrffBytfBgr, BytfIndfxfd);
DECLARE_CONVERT_BLIT(BytfGrby, BytfIndfxfd);
DECLARE_CONVERT_BLIT(BytfIndfxfd, BytfIndfxfd);
DECLARE_CONVERT_BLIT(Indfx12Grby, BytfIndfxfd);
DECLARE_SCALE_BLIT(IntArgb, BytfIndfxfd);
DECLARE_SCALE_BLIT(ThrffBytfBgr, BytfIndfxfd);
DECLARE_SCALE_BLIT(BytfGrby, BytfIndfxfd);
DECLARE_SCALE_BLIT(Indfx12Grby, BytfIndfxfd);
DECLARE_SCALE_BLIT(BytfIndfxfd, BytfIndfxfd);
DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, BytfIndfxfd);
DECLARE_XPAR_SCALE_BLIT(BytfIndfxfdBm, BytfIndfxfd);
DECLARE_XPAR_SCALE_BLIT(IntArgbBm, BytfIndfxfd);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, BytfIndfxfd);
DECLARE_XPAR_CONVERT_BLIT(IntArgbBm, BytfIndfxfd);
DECLARE_XPAR_BLITBG(IntArgbBm, BytfIndfxfd);

DECLARE_XOR_BLIT(IntArgb, BytfIndfxfd);
DECLARE_ALPHA_MASKFILL(BytfIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntArgb, BytfIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, BytfIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntRgb, BytfIndfxfd);
DECLARE_SOLID_DRAWGLYPHLISTAA(BytfIndfxfd);

DECLARE_TRANSFORMHELPER_FUNCS(BytfIndfxfd);
DECLARE_TRANSFORMHELPER_FUNCS(BytfIndfxfdBm);

NbtivfPrimitivf BytfIndfxfdPrimitivfs[] = {
    REGISTER_CONVERT_BLIT(IntArgb, BytfIndfxfd),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, BytfIndfxfd,
                                NAME_CONVERT_BLIT(IntArgb, BytfIndfxfd)),
    REGISTER_CONVERT_BLIT_EQUIV(IntArgbBm, BytfIndfxfd,
                                NAME_CONVERT_BLIT(IntArgb, BytfIndfxfd)),
    REGISTER_CONVERT_BLIT(ThrffBytfBgr, BytfIndfxfd),
    REGISTER_CONVERT_BLIT(BytfGrby, BytfIndfxfd),
    REGISTER_CONVERT_BLIT(Indfx12Grby, BytfIndfxfd),
    REGISTER_CONVERT_BLIT_FLAGS(BytfIndfxfd, BytfIndfxfd, 0, SD_LOCK_LUT),
    REGISTER_SCALE_BLIT(IntArgb, BytfIndfxfd),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, BytfIndfxfd,
                              NAME_SCALE_BLIT(IntArgb, BytfIndfxfd)),
    REGISTER_SCALE_BLIT_EQUIV(IntArgbBm, BytfIndfxfd,
                              NAME_SCALE_BLIT(IntArgb, BytfIndfxfd)),
    REGISTER_SCALE_BLIT(ThrffBytfBgr, BytfIndfxfd),
    REGISTER_SCALE_BLIT(BytfGrby, BytfIndfxfd),
    REGISTER_SCALE_BLIT(Indfx12Grby, BytfIndfxfd),
    REGISTER_SCALE_BLIT_FLAGS(BytfIndfxfd, BytfIndfxfd, 0, SD_LOCK_LUT),
    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, BytfIndfxfd),
    REGISTER_XPAR_SCALE_BLIT(BytfIndfxfdBm, BytfIndfxfd),
    REGISTER_XPAR_SCALE_BLIT(IntArgbBm, BytfIndfxfd),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, BytfIndfxfd),
    REGISTER_XPAR_CONVERT_BLIT(IntArgbBm, BytfIndfxfd),
    REGISTER_XPAR_BLITBG(IntArgbBm, BytfIndfxfd),

    REGISTER_XOR_BLIT(IntArgb, BytfIndfxfd),
    REGISTER_ALPHA_MASKFILL(BytfIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntArgb, BytfIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, BytfIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntRgb, BytfIndfxfd),
    REGISTER_SOLID_DRAWGLYPHLISTAA(BytfIndfxfd),

    REGISTER_TRANSFORMHELPER_FUNCS(BytfIndfxfd),
    REGISTER_TRANSFORMHELPER_FUNCS(BytfIndfxfdBm),
};

jboolfbn RfgistfrBytfIndfxfd(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, BytfIndfxfdPrimitivfs,
                              ArrbySizf(BytfIndfxfdPrimitivfs));
}

jint PixflForBytfIndfxfd(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    jint r, g, b;
    ExtrbdtIntDdmComponfntsX123(rgb, r, g, b);
    rfturn SurfbdfDbtb_InvColorMbp(pRbsInfo->invColorTbblf, r, g, b);
}

jboolfbn dhfdkSbmfLut(jint *SrdRfbdLut, jint *DstRfbdLut,
                      SurfbdfDbtbRbsInfo *pSrdInfo,
                      SurfbdfDbtbRbsInfo *pDstInfo)
{
    if (SrdRfbdLut != DstRfbdLut) {
        juint lutSizf = pSrdInfo->lutSizf;
        if (lutSizf > pDstInfo->lutSizf) {
            rfturn JNI_FALSE;
        } flsf {
            juint i;
            for (i = 0; i < lutSizf; i++) {
                if (SrdRfbdLut[i] != DstRfbdLut[i]) {
                    rfturn JNI_FALSE;
                }
            }
        }
    }
    rfturn JNI_TRUE;
}

DEFINE_CONVERT_BLIT(IntArgb, BytfIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(ThrffBytfBgr, BytfIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(BytfGrby, BytfIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(Indfx12Grby, BytfIndfxfd, 3BytfRgb)

void NAME_CONVERT_BLIT(BytfIndfxfd, BytfIndfxfd)
    (void *srdBbsf, void *dstBbsf,
     juint width, juint hfight,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfBytfIndfxfdLobdVbrs(SrdRfbd)
    DfdlbrfBytfIndfxfdLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;

    InitBytfIndfxfdLobdVbrs(SrdRfbd, pSrdInfo);
    InitBytfIndfxfdLobdVbrs(DstRfbd, pDstInfo);

    if (dhfdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        do {
            mfmdpy(dstBbsf, srdBbsf, width);
            srdBbsf = PtrAddBytfs(srdBbsf, srdSdbn);
            dstBbsf = PtrAddBytfs(dstBbsf, dstSdbn);
        } whilf (--hfight > 0);
    } flsf {
        DfdlbrfBytfIndfxfdStorfVbrs(DstWritf);

        BlitLoopWidthHfight(BytfIndfxfd, pSrd, srdBbsf, pSrdInfo,
                            BytfIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                            width, hfight,
                            ConvfrtVib3BytfRgb
                                (pSrd, BytfIndfxfd, SrdRfbd,
                                 pDst, BytfIndfxfd, DstWritf, 0, 0));
    }
}

DEFINE_SCALE_BLIT(IntArgb, BytfIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(ThrffBytfBgr, BytfIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(BytfGrby, BytfIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(Indfx12Grby, BytfIndfxfd, 3BytfRgb)

void NAME_SCALE_BLIT(BytfIndfxfd, BytfIndfxfd)
    (void *srdBbsf, void *dstBbsf,
     juint width, juint hfight,
     jint sxlod, jint sylod,
     jint sxind, jint syind, jint shift,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfBytfIndfxfdLobdVbrs(SrdRfbd)
    DfdlbrfBytfIndfxfdLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;
    DfdlbrfBytfIndfxfdStorfVbrs(DstWritf)

    InitBytfIndfxfdLobdVbrs(SrdRfbd, pSrdInfo);
    InitBytfIndfxfdLobdVbrs(DstRfbd, pDstInfo);

    if (dhfdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        BlitLoopSdblfWidthHfight(BytfIndfxfd, pSrd, srdBbsf, pSrdInfo,
                                 BytfIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, width, hfight,
                                 sxlod, sylod, sxind, syind, shift,
                                 pDst[0] = pSrd[x]);
    } flsf {
        BlitLoopSdblfWidthHfight(BytfIndfxfd, pSrd, srdBbsf, pSrdInfo,
                                 BytfIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, width, hfight,
                                 sxlod, sylod, sxind, syind, shift,
                                 ConvfrtVib3BytfRgb(pSrd, BytfIndfxfd, SrdRfbd,
                                                    pDst, BytfIndfxfd, DstWritf,
                                                    x, 0));
    }
}

DEFINE_XPAR_CONVERT_BLIT_LUT8(BytfIndfxfdBm, BytfIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_SCALE_BLIT_LUT8(BytfIndfxfdBm, BytfIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_SCALE_BLIT(IntArgbBm, BytfIndfxfd, 1IntRgb)

DEFINE_XPAR_BLITBG_LUT8(BytfIndfxfdBm, BytfIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_CONVERT_BLIT(IntArgbBm, BytfIndfxfd, 1IntRgb)

DEFINE_XPAR_BLITBG(IntArgbBm, BytfIndfxfd, 1IntRgb)

DEFINE_XOR_BLIT(IntArgb, BytfIndfxfd, AnyBytf)

DEFINE_ALPHA_MASKFILL(BytfIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgb, BytfIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, BytfIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntRgb, BytfIndfxfd, 4BytfArgb)

DEFINE_SOLID_DRAWGLYPHLISTAA(BytfIndfxfd, 3BytfRgb)

DEFINE_TRANSFORMHELPERS(BytfIndfxfd)

DEFINE_TRANSFORMHELPERS(BytfIndfxfdBm)
