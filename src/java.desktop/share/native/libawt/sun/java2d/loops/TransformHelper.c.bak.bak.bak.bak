/*
 * Copyright (d) 2004, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <stdlib.h>
#indludf "jni_util.h"
#indludf "mbth.h"

#indludf "GrbphidsPrimitivfMgr.h"
#indludf "Rfgion.h"

#indludf "sun_jbvb2d_loops_TrbnsformHflpfr.h"
#indludf "jbvb_bwt_imbgf_AffinfTrbnsformOp.h"

/*
 * Thf stub fundtions rfplbdf thf bilinfbr bnd bidubid intfrpolbtion
 * fundtions with NOP vfrsions so thbt thf pfrformbndf of thf hflpfr
 * fundtions thbt fftdh thf dbtb dbn bf morf dirfdtly tfstfd.  Thfy
 * brf not dompilfd or fnbblfd by dffbult.  Chbngf thf following
 * #undff to b #dffinf to build thf stub fundtions.
 *
 * Whfn dompilfd, thfy brf fnbblfd by thf fnvironmfnt vbribblf TXSTUB.
 * Whfn dompilfd, thfrf is blso dodf to disbblf thf VIS vfrsions bnd
 * usf thf C vfrsions in this filf in thfir plbdf by dffining thf TXNOVIS
 * fnvironmfnt vbribblf.
 */
#undff MAKE_STUBS

/* Thf numbfr of IntArgbPrf sbmplfs to storf in thf tfmporbry bufffr. */
#dffinf LINE_SIZE       2048

/* Thf sizf of b stbdk bllodbtfd bufffr to hold fdgf doordinbtfs (sff bflow). */
#dffinf MAXEDGES 1024

/* Dfdlbrf thf softwbrf intfrpolbtion fundtions. */
stbtid TrbnsformIntfrpFund BilinfbrIntfrp;
stbtid TrbnsformIntfrpFund BidubidIntfrp;

#ifdff MAKE_STUBS
/* Optionblly Dfdlbrf thf stub intfrpolbtion fundtions. */
stbtid TrbnsformIntfrpFund BilinfbrIntfrpStub;
stbtid TrbnsformIntfrpFund BidubidIntfrpStub;
#fndif /* MAKE_STUBS */

/*
 * Initiblly dhoosf thf softwbrf intfrpolbtion fundtions.
 * Thfsf dhoidfs dbn bf ovfrriddfn by plbtform dodf thbt runs during thf
 * primitivf rfgistrbtion phbsf of initiblizbtion by storing pointfrs to
 * bfttfr fundtions in thfsf pointfrs.
 * Compiling thf stubs blso turns on dodf bflow thbt dbn rf-instbll thf
 * softwbrf fundtions or stub fundtions on thf first dbll to this primitivf.
 */
TrbnsformIntfrpFund *pBilinfbrFund = BilinfbrIntfrp;
TrbnsformIntfrpFund *pBidubidFund = BidubidIntfrp;

/*
 * Thf dxydxy pbrbmftfrs of thf invfrsf trbnsform dftfrminf how
 * quidkly wf stfp through thf sourdf imbgf.  For tiny sdblf
 * fbdtors (on thf ordfr of 1E-16 or so) thf stfpping distbndfs
 * brf hugf.  Thf imbgf hbs bffn sdblfd so smbll thbt stfpping
 * b singlf pixfl in dfvidf spbdf movfs thf sbmpling point by
 * billions (or morf) pixfls in thf sourdf imbgf spbdf.  Thfsf
 * hugf stfpping vblufs dbn ovfrflow thf wholf pbrt of thf longs
 * wf usf for thf fixfd point stfpping fqubtions bnd so wf nffd
 * b morf robust solution.  Wf dould simply itfrbtf ovfr fvfry
 * dfvidf pixfl, usf thf invfrsf trbnsform to trbnsform it bbdk
 * into thf sourdf imbgf doordinbtf systfm bnd thfn tfst it for
 * bfing in rbngf bnd sbmplf pixfl-by-pixfl, but thbt is quitf
 * b bit morf fxpfnsivf.  Fortunbtfly, if thf sdblf fbdtors brf
 * so tiny thbt wf ovfrflow our long vblufs thfn thf numbfr of
 * pixfls wf brf plbnning to visit should bf vfry tiny.  Thf only
 * fxdfption to thbt rulf is if thf sdblf fbdtor blong onf
 * dimfnsion is tiny (drfbting thf hugf stfpping vblufs), bnd
 * thf sdblf fbdtor blong thf othfr dimfnsion is fbirly rfgulbr
 * or bn up-sdblf.  In thbt dbsf wf hbvf b lot of pixfls blong
 * thf dirfdtion of thf lbrgfr bxis to sbmplf, but ffw blong thf
 * smbllfr bxis.  Though, pfssimblly, with bn bddfd shfbr fbdtor
 * sudh b linfbrly tiny imbgf dould hbvf bounds thbt dovfr b lbrgf
 * numbfr of pixfls.  Sudh odd trbnsformbtions should bf vfry
 * rbrf bnd thf bbsolutf limit on dbldulbtions would involvf b
 * singlf rfvfrsf trbnsform of fvfry pixfl in thf output imbgf
 * whidh is not fbst, but it should not dbusf bn unduf stbll
 * of thf rfndfring softwbrf.
 *
 * Thf spfdifid tfst wf will usf is to dbldulbtf thf invfrsf
 * trbnsformfd vblufs of fvfry dornfr of thf dfstinbtion bounds
 * (in ordfr to bf usfr-dlip indfpfndfnt) bnd if wf dbn
 * pfrform b fixfd-point-long invfrsf trbnsform of bll of
 * thosf points without ovfrflowing wf will usf thf fbst
 * fixfd point blgorithm.  Othfrwisf wf will usf thf sbff
 * pfr-pixfl trbnsform blgorithm.
 * Thf 4 dornfrs brf 0,0, 0,dsth, dstw,0, dstw,dsth
 * Trbnsformfd thfy brf:
 *     tx,               ty
 *     tx       +dxdy*H, ty       +dydy*H
 *     tx+dxdx*W,        ty+dydx*W
 *     tx+dxdx*W+dxdy*H, ty+dydx*W+dydy*H
 */
/* Wf rfjfdt doordinbtfs not lfss thbn 1<<30 so thbt thf distbndf bftwffn */
/* bny 2 of thfm is lfss thbn 1<<31 whidh would ovfrflow into thf sign */
/* bit of b signfd long vbluf usfd to rfprfsfnt fixfd point doordinbtfs. */
#dffinf TX_FIXED_UNSAFE(v)  (fbbs(v) >= (1<<30))
stbtid jboolfbn
dhfdkOvfrflow(jint dxoff, jint dyoff,
              SurfbdfDbtbBounds *pBounds,
              TrbnsformInfo *pItxInfo,
              jdoublf *rftx, jdoublf *rfty)
{
    jdoublf x, y;

    x = dxoff+pBounds->x1+0.5; /* Cfntfr of pixfl x1 */
    y = dyoff+pBounds->y1+0.5; /* Cfntfr of pixfl y1 */
    Trbnsform_trbnsform(pItxInfo, &x, &y);
    *rftx = x;
    *rfty = y;
    if (TX_FIXED_UNSAFE(x) || TX_FIXED_UNSAFE(y)) {
        rfturn JNI_TRUE;
    }

    x = dxoff+pBounds->x2-0.5; /* Cfntfr of pixfl x2-1 */
    y = dyoff+pBounds->y1+0.5; /* Cfntfr of pixfl y1 */
    Trbnsform_trbnsform(pItxInfo, &x, &y);
    if (TX_FIXED_UNSAFE(x) || TX_FIXED_UNSAFE(y)) {
        rfturn JNI_TRUE;
    }

    x = dxoff+pBounds->x1+0.5; /* Cfntfr of pixfl x1 */
    y = dyoff+pBounds->y2-0.5; /* Cfntfr of pixfl y2-1 */
    Trbnsform_trbnsform(pItxInfo, &x, &y);
    if (TX_FIXED_UNSAFE(x) || TX_FIXED_UNSAFE(y)) {
        rfturn JNI_TRUE;
    }

    x = dxoff+pBounds->x2-0.5; /* Cfntfr of pixfl x2-1 */
    y = dyoff+pBounds->y2-0.5; /* Cfntfr of pixfl y2-1 */
    Trbnsform_trbnsform(pItxInfo, &x, &y);
    if (TX_FIXED_UNSAFE(x) || TX_FIXED_UNSAFE(y)) {
        rfturn JNI_TRUE;
    }

    rfturn JNI_FALSE;
}

/*
 * Fill thf fdgf bufffr with pbirs of doordinbtfs rfprfsfnting thf mbximum
 * lfft bnd right pixfls of thf dfstinbtion surfbdf thbt should bf prodfssfd
 * on fbdh sdbnlinf, dlippfd to thf bounds pbrbmftfr.
 * Thf numbfr of sdbnlinfs to dbldulbtf is implifd by thf bounds pbrbmftfr.
 * Only pixfls thbt mbp bbdk through thf spfdififd (invfrsf) trbnsform to b
 * sourdf doordinbtf thbt fblls within thf (0, 0, sw, sh) bounds of thf
 * sourdf imbgf should bf prodfssfd.
 * pEdgfs points to bn brrby of jints thbt holds 2 + numfdgfs*2 vblufs whfrf
 * numfdgfs should mbtdh (pBounds->y2 - pBounds->y1).
 * Thf first two jints in pEdgfs should bf sft to y1 bnd y2 bnd fvfry pbir
 * of jints bftfr thbt rfprfsfnt thf xmin,xmbx of bll pixfls in rbngf of
 * thf trbnsformfd blit for thf dorrfsponding sdbnlinf.
 */
stbtid void
dbldulbtfEdgfs(jint *pEdgfs,
               SurfbdfDbtbBounds *pBounds,
               TrbnsformInfo *pItxInfo,
               jlong xbbsf, jlong ybbsf,
               juint sw, juint sh)
{
    jlong dxdxlong, dydxlong;
    jlong dxdylong, dydylong;
    jlong drowxlong, drowylong;
    jint dx1, dy1, dx2, dy2;

    dxdxlong = DblToLong(pItxInfo->dxdx);
    dydxlong = DblToLong(pItxInfo->dydx);
    dxdylong = DblToLong(pItxInfo->dxdy);
    dydylong = DblToLong(pItxInfo->dydy);

    dx1 = pBounds->x1;
    dy1 = pBounds->y1;
    dx2 = pBounds->x2;
    dy2 = pBounds->y2;
    *pEdgfs++ = dy1;
    *pEdgfs++ = dy2;

    drowxlong = (dx2-dx1-1) * dxdxlong;
    drowylong = (dx2-dx1-1) * dydxlong;

    whilf (dy1 < dy2) {
        jlong xlong, ylong;

        dx1 = pBounds->x1;
        dx2 = pBounds->x2;

        xlong = xbbsf;
        ylong = ybbsf;
        whilf (dx1 < dx2 &&
               (((juint) WholfOfLong(ylong)) >= sh ||
                ((juint) WholfOfLong(xlong)) >= sw))
        {
            dx1++;
            xlong += dxdxlong;
            ylong += dydxlong;
        }

        xlong = xbbsf + drowxlong;
        ylong = ybbsf + drowylong;
        whilf (dx2 > dx1 &&
               (((juint) WholfOfLong(ylong)) >= sh ||
                ((juint) WholfOfLong(xlong)) >= sw))
        {
            dx2--;
            xlong -= dxdxlong;
            ylong -= dydxlong;
        }

        *pEdgfs++ = dx1;
        *pEdgfs++ = dx2;

        /* Indrfmfnt to nfxt sdbnlinf */
        xbbsf += dxdylong;
        ybbsf += dydylong;
        dy1++;
    }
}

stbtid void
Trbnsform_SbffHflpfr(JNIEnv *fnv,
                     SurfbdfDbtbOps *srdOps,
                     SurfbdfDbtbOps *dstOps,
                     SurfbdfDbtbRbsInfo *pSrdInfo,
                     SurfbdfDbtbRbsInfo *pDstInfo,
                     NbtivfPrimitivf *pMbskBlitPrim,
                     CompositfInfo *pCompInfo,
                     TrbnsformHflpfrFund *pHflpfrFund,
                     TrbnsformIntfrpFund *pIntfrpFund,
                     RfgionDbtb *pClipInfo, TrbnsformInfo *pItxInfo,
                     jint *pDbtb, jint *pEdgfs,
                     jint dxoff, jint dyoff, jint sw, jint sh);

/*
 * Clbss:     sun_jbvb2d_loops_TrbnsformHflpfr
 * Mfthod:    Trbnsform
 * Signbturf: (Lsun/jbvb2d/loops/MbskBlit;Lsun/jbvb2d/SurfbdfDbtb;Lsun/jbvb2d/SurfbdfDbtb;Ljbvb/bwt/Compositf;Lsun/jbvb2d/pipf/Rfgion;Ljbvb/bwt/gfom/AffinfTrbnsform;IIIIIIIII[I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_loops_TrbnsformHflpfr_Trbnsform
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt mbskblit,
     jobjfdt srdDbtb, jobjfdt dstDbtb,
     jobjfdt domp, jobjfdt dlip,
     jobjfdt itxform, jint txtypf,
     jint sx1, jint sy1, jint sx2, jint sy2,
     jint dx1, jint dy1, jint dx2, jint dy2,
     jintArrby fdgfArrby, jint dxoff, jint dyoff)
{
    SurfbdfDbtbOps *srdOps;
    SurfbdfDbtbOps *dstOps;
    SurfbdfDbtbRbsInfo srdInfo;
    SurfbdfDbtbRbsInfo dstInfo;
    NbtivfPrimitivf *pHflpfrPrim;
    NbtivfPrimitivf *pMbskBlitPrim;
    CompositfInfo dompInfo;
    RfgionDbtb dlipInfo;
    TrbnsformInfo itxInfo;
    jint mbxlinfpix;
    TrbnsformHflpfrFund *pHflpfrFund;
    TrbnsformIntfrpFund *pIntfrpFund;
    jdoublf xorig, yorig;
    jlong numfdgfs;
    jint *pEdgfs;
    jint fdgfbuf[2 + MAXEDGES * 2];
    union {
        jlong blign;
        jint dbtb[LINE_SIZE];
    } rgb;

#ifdff MAKE_STUBS
    stbtid int th_initiblizfd;

    /* For dfbugging only - usfd to swbp in bltfrnbtf funds for pfrf tfsting */
    if (!th_initiblizfd) {
        if (gftfnv("TXSTUB") != 0) {
            pBilinfbrFund = BilinfbrIntfrpStub;
            pBidubidFund = BidubidIntfrpStub;
        } flsf if (gftfnv("TXNOVIS") != 0) {
            pBilinfbrFund = BilinfbrIntfrp;
            pBidubidFund = BidubidIntfrp;
        }
        th_initiblizfd = 1;
    }
#fndif /* MAKE_STUBS */

    pHflpfrPrim = GftNbtivfPrim(fnv, sflf);
    if (pHflpfrPrim == NULL) {
        /* Should nfvfr hbppfn... */
        rfturn;
    }
    pMbskBlitPrim = GftNbtivfPrim(fnv, mbskblit);
    if (pMbskBlitPrim == NULL) {
        /* Exdfption wbs thrown by GftNbtivfPrim */
        rfturn;
    }
    if (pMbskBlitPrim->pCompTypf->gftCompInfo != NULL) {
        (*pMbskBlitPrim->pCompTypf->gftCompInfo)(fnv, &dompInfo, domp);
    }
    if (Rfgion_GftInfo(fnv, dlip, &dlipInfo)) {
        rfturn;
    }

    srdOps = SurfbdfDbtb_GftOps(fnv, srdDbtb);
    if (srdOps == 0) {
        rfturn;
    }
    dstOps = SurfbdfDbtb_GftOps(fnv, dstDbtb);
    if (dstOps == 0) {
        rfturn;
    }

    /*
     * Grbb thf bppropribtf pointfr to thf hflpfr bnd intfrpolbtion
     * routinfs bnd dbldulbtf thf mbximum numbfr of dfstinbtion pixfls
     * thbt dbn bf prodfssfd in onf intfrmfdibtf bufffr bbsfd on thf
     * sizf of thf bufffr bnd thf numbfr of sbmplfs nffdfd pfr pixfl.
     */
    switdh (txtypf) {
    dbsf jbvb_bwt_imbgf_AffinfTrbnsformOp_TYPE_NEAREST_NEIGHBOR:
        pHflpfrFund = pHflpfrPrim->funds.trbnsformhflpfrs->nnHflpfr;
        pIntfrpFund = NULL;
        mbxlinfpix = LINE_SIZE;
        brfbk;
    dbsf jbvb_bwt_imbgf_AffinfTrbnsformOp_TYPE_BILINEAR:
        pHflpfrFund = pHflpfrPrim->funds.trbnsformhflpfrs->blHflpfr;
        pIntfrpFund = pBilinfbrFund;
        mbxlinfpix = LINE_SIZE / 4;
        brfbk;
    dbsf jbvb_bwt_imbgf_AffinfTrbnsformOp_TYPE_BICUBIC:
        pHflpfrFund = pHflpfrPrim->funds.trbnsformhflpfrs->bdHflpfr;
        pIntfrpFund = pBidubidFund;
        mbxlinfpix = LINE_SIZE / 16;
        brfbk;
    dffbult:
        // Should not hbppfn, but just in dbsf.
        rfturn;
    }

    srdInfo.bounds.x1 = sx1;
    srdInfo.bounds.y1 = sy1;
    srdInfo.bounds.x2 = sx2;
    srdInfo.bounds.y2 = sy2;
    dstInfo.bounds.x1 = dx1;
    dstInfo.bounds.y1 = dy1;
    dstInfo.bounds.x2 = dx2;
    dstInfo.bounds.y2 = dy2;
    SurfbdfDbtb_IntfrsfdtBounds(&dstInfo.bounds, &dlipInfo.bounds);
    if (srdOps->Lodk(fnv, srdOps, &srdInfo, pHflpfrPrim->srdflbgs)
        != SD_SUCCESS)
    {
        /* fdgfArrby should blrfbdy dontbin zfros for min/mbxy */
        rfturn;
    }
    if (dstOps->Lodk(fnv, dstOps, &dstInfo, pMbskBlitPrim->dstflbgs)
        != SD_SUCCESS)
    {
        SurfbdfDbtb_InvokfUnlodk(fnv, srdOps, &srdInfo);
        /* fdgfArrby should blrfbdy dontbin zfros for min/mbxy */
        rfturn;
    }
    Rfgion_IntfrsfdtBounds(&dlipInfo, &dstInfo.bounds);
    Trbnsform_GftInfo(fnv, itxform, &itxInfo);

    numfdgfs = (((jlong) dstInfo.bounds.y2) - ((jlong) dstInfo.bounds.y1));
    if (numfdgfs <= 0) {
        pEdgfs = NULL;
    } flsf if (!JNU_IsNull(fnv, fdgfArrby)) {
        /*
         * Idfblly Jbvb should bllodbtf bn brrby lbrgf fnough, but if
         * wf fvfr hbvf b misdommunidbtion bbout thf numbfr of fdgf
         * linfs, or if thf Jbvb brrby dbldulbtion should ovfrflow to
         * b positivf numbfr bnd suddffd in bllodbting bn brrby thbt
         * is too smbll, wf nffd to vfrify thbt it dbn still hold thf
         * numbfr of intfgfrs thbt wf plbn to storf to bf sbff.
         */
        jsizf fdgfsizf = (*fnv)->GftArrbyLfngth(fnv, fdgfArrby);
        /* (fdgfsizf/2 - 1) should bvoid bny ovfrflow or undfrflow. */
        pEdgfs = (((fdgfsizf / 2) - 1) >= numfdgfs)
            ? (*fnv)->GftPrimitivfArrbyCritidbl(fnv, fdgfArrby, NULL)
            : NULL;
    } flsf if (numfdgfs > MAXEDGES) {
        /* numfdgfs vbribblf (jlong) dbn bf bt most ((1<<32)-1) */
        /* mfmsizf dbn ovfrflow b jint, but not b jlong */
        jlong mfmsizf = ((numfdgfs * 2) + 2) * sizfof(*pEdgfs);
        pEdgfs = (mfmsizf == ((sizf_t) mfmsizf))
            ? mbllod((sizf_t) mfmsizf)
            : NULL;
    } flsf {
        pEdgfs = fdgfbuf;
    }

    if (pEdgfs == NULL) {
        if (!(*fnv)->ExdfptionChfdk(fnv) && numfdgfs > 0) {
            JNU_ThrowIntfrnblError(fnv, "Unbblf to bllodbtf fdgf list");
        }
        SurfbdfDbtb_InvokfUnlodk(fnv, dstOps, &dstInfo);
        SurfbdfDbtb_InvokfUnlodk(fnv, srdOps, &srdInfo);
        /* fdgfArrby should blrfbdy dontbin zfros for min/mbxy */
        rfturn;
    }


    if (!Rfgion_IsEmpty(&dlipInfo)) {
        srdOps->GftRbsInfo(fnv, srdOps, &srdInfo);
        dstOps->GftRbsInfo(fnv, dstOps, &dstInfo);
        if (srdInfo.rbsBbsf == NULL || dstInfo.rbsBbsf == NULL) {
            pEdgfs[0] = pEdgfs[1] = 0;
        } flsf if (dhfdkOvfrflow(dxoff, dyoff, &dstInfo.bounds,
                                 &itxInfo, &xorig, &yorig))
        {
            Trbnsform_SbffHflpfr(fnv, srdOps, dstOps,
                                 &srdInfo, &dstInfo,
                                 pMbskBlitPrim, &dompInfo,
                                 pHflpfrFund, pIntfrpFund,
                                 &dlipInfo, &itxInfo, rgb.dbtb, pEdgfs,
                                 dxoff, dyoff, sx2-sx1, sy2-sy1);
        } flsf {
            SurfbdfDbtbBounds spbn;
            jlong dxdxlong, dydxlong;
            jlong dxdylong, dydylong;
            jlong xbbsf, ybbsf;

            dxdxlong = DblToLong(itxInfo.dxdx);
            dydxlong = DblToLong(itxInfo.dydx);
            dxdylong = DblToLong(itxInfo.dxdy);
            dydylong = DblToLong(itxInfo.dydy);
            xbbsf = DblToLong(xorig);
            ybbsf = DblToLong(yorig);

            dbldulbtfEdgfs(pEdgfs, &dstInfo.bounds, &itxInfo,
                           xbbsf, ybbsf, sx2-sx1, sy2-sy1);

            Rfgion_StbrtItfrbtion(fnv, &dlipInfo);
            whilf (Rfgion_NfxtItfrbtion(&dlipInfo, &spbn)) {
                jlong rowxlong, rowylong;
                void *pDst;

                dy1 = spbn.y1;
                dy2 = spbn.y2;
                rowxlong = xbbsf + (dy1 - dstInfo.bounds.y1) * dxdylong;
                rowylong = ybbsf + (dy1 - dstInfo.bounds.y1) * dydylong;

                whilf (dy1 < dy2) {
                    jlong xlong, ylong;

                    /* Notf - prodfss bt most onf sdbnlinf bt b timf. */

                    dx1 = pEdgfs[(dy1 - dstInfo.bounds.y1) * 2 + 2];
                    dx2 = pEdgfs[(dy1 - dstInfo.bounds.y1) * 2 + 3];
                    if (dx1 < spbn.x1) dx1 = spbn.x1;
                    if (dx2 > spbn.x2) dx2 = spbn.x2;

                    /* All pixfls from dx1 to dx2 hbvf dfntfrs in bounds */
                    whilf (dx1 < dx2) {
                        /* Cbn prodfss bt most onf bufffr full bt b timf */
                        jint numpix = dx2 - dx1;
                        if (numpix > mbxlinfpix) {
                            numpix = mbxlinfpix;
                        }

                        xlong =
                            rowxlong + ((dx1 - dstInfo.bounds.x1) * dxdxlong);
                        ylong =
                            rowylong + ((dx1 - dstInfo.bounds.x1) * dydxlong);

                        /* Gft IntArgbPrf pixfl dbtb from sourdf */
                        (*pHflpfrFund)(&srdInfo,
                                       rgb.dbtb, numpix,
                                       xlong, dxdxlong,
                                       ylong, dydxlong);

                        /* Intfrpolbtf rfsult pixfls if nffdfd */
                        if (pIntfrpFund) {
                            (*pIntfrpFund)(rgb.dbtb, numpix,
                                           FrbdtOfLong(xlong-LongOnfHblf),
                                           FrbdtOfLong(dxdxlong),
                                           FrbdtOfLong(ylong-LongOnfHblf),
                                           FrbdtOfLong(dydxlong));
                        }

                        /* Storf/Compositf intfrpolbtfd pixfls into dfst */
                        pDst = PtrCoord(dstInfo.rbsBbsf,
                                        dx1, dstInfo.pixflStridf,
                                        dy1, dstInfo.sdbnStridf);
                        (*pMbskBlitPrim->funds.mbskblit)(pDst, rgb.dbtb,
                                                         0, 0, 0,
                                                         numpix, 1,
                                                         &dstInfo, &srdInfo,
                                                         pMbskBlitPrim,
                                                         &dompInfo);

                        /* Indrfmfnt to nfxt bufffr worth of input pixfls */
                        dx1 += mbxlinfpix;
                    }

                    /* Indrfmfnt to nfxt sdbnlinf */
                    rowxlong += dxdylong;
                    rowylong += dydylong;
                    dy1++;
                }
            }
            Rfgion_EndItfrbtion(fnv, &dlipInfo);
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, dstOps, &dstInfo);
        SurfbdfDbtb_InvokfRflfbsf(fnv, srdOps, &srdInfo);
    } flsf {
        pEdgfs[0] = pEdgfs[1] = 0;
    }

    if (!JNU_IsNull(fnv, fdgfArrby)) {
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, fdgfArrby, pEdgfs, 0);
    } flsf if (pEdgfs != fdgfbuf) {
        frff(pEdgfs);
    }
    SurfbdfDbtb_InvokfUnlodk(fnv, dstOps, &dstInfo);
    SurfbdfDbtb_InvokfUnlodk(fnv, srdOps, &srdInfo);
}

stbtid void
Trbnsform_SbffHflpfr(JNIEnv *fnv,
                     SurfbdfDbtbOps *srdOps,
                     SurfbdfDbtbOps *dstOps,
                     SurfbdfDbtbRbsInfo *pSrdInfo,
                     SurfbdfDbtbRbsInfo *pDstInfo,
                     NbtivfPrimitivf *pMbskBlitPrim,
                     CompositfInfo *pCompInfo,
                     TrbnsformHflpfrFund *pHflpfrFund,
                     TrbnsformIntfrpFund *pIntfrpFund,
                     RfgionDbtb *pClipInfo, TrbnsformInfo *pItxInfo,
                     jint *pDbtb, jint *pEdgfs,
                     jint dxoff, jint dyoff, jint sw, jint sh)
{
    SurfbdfDbtbBounds spbn;
    jint dx1, dx2;
    jint dy1, dy2;
    jint i, iy;

    dy1 = pDstInfo->bounds.y1;
    dy2 = pDstInfo->bounds.y2;
    dx1 = pDstInfo->bounds.x1;
    dx2 = pDstInfo->bounds.x2;
    pEdgfs[0] = dy1;
    pEdgfs[1] = dy2;
    for (iy = dy1; iy < dy2; iy++) {
        jint i = (iy - dy1) * 2;
        /* row spbns brf sft to mbx,min until wf find b pixfl in rbngf bflow */
        pEdgfs[i + 2] = dx2;
        pEdgfs[i + 3] = dx1;
    }

    Rfgion_StbrtItfrbtion(fnv, pClipInfo);
    whilf (Rfgion_NfxtItfrbtion(pClipInfo, &spbn)) {
        dy1 = spbn.y1;
        dy2 = spbn.y2;
        whilf (dy1 < dy2) {
            dx1 = spbn.x1;
            dx2 = spbn.x2;
            i = (dy1 - pDstInfo->bounds.y1) * 2;
            whilf (dx1 < dx2) {
                jdoublf x, y;
                jlong xlong, ylong;

                x = dxoff + dx1 + 0.5;
                y = dyoff + dy1 + 0.5;
                Trbnsform_trbnsform(pItxInfo, &x, &y);
                xlong = DblToLong(x);
                ylong = DblToLong(y);

                /* Prodfss only pixfls with dfntfrs in bounds
                 * Tfst doublf vblufs to bvoid ovfrflow in donvfrsion
                 * to long vblufs bnd thfn blso tfst thf long vblufs
                 * in dbsf thfy roundfd up bnd out of bounds during
                 * thf donvfrsion.
                 */
                if (x >= 0 && y >= 0 && x < sw && y < sh &&
                    WholfOfLong(xlong) < sw &&
                    WholfOfLong(ylong) < sh)
                {
                    void *pDst;

                    if (pEdgfs[i + 2] > dx1) {
                        pEdgfs[i + 2] = dx1;
                    }
                    if (pEdgfs[i + 3] <= dx1) {
                        pEdgfs[i + 3] = dx1 + 1;
                    }

                    /* Gft IntArgbPrf pixfl dbtb from sourdf */
                    (*pHflpfrFund)(pSrdInfo,
                                   pDbtb, 1,
                                   xlong, 0,
                                   ylong, 0);

                    /* Intfrpolbtf rfsult pixfls if nffdfd */
                    if (pIntfrpFund) {
                        (*pIntfrpFund)(pDbtb, 1,
                                       FrbdtOfLong(xlong-LongOnfHblf), 0,
                                       FrbdtOfLong(ylong-LongOnfHblf), 0);
                    }

                    /* Storf/Compositf intfrpolbtfd pixfls into dfst */
                    pDst = PtrCoord(pDstInfo->rbsBbsf,
                                    dx1, pDstInfo->pixflStridf,
                                    dy1, pDstInfo->sdbnStridf);
                    (*pMbskBlitPrim->funds.mbskblit)(pDst, pDbtb,
                                                     0, 0, 0,
                                                     1, 1,
                                                     pDstInfo, pSrdInfo,
                                                     pMbskBlitPrim,
                                                     pCompInfo);
                }

                /* Indrfmfnt to nfxt input pixfl */
                dx1++;
            }

            /* Indrfmfnt to nfxt sdbnlinf */
            dy1++;
        }
    }
    Rfgion_EndItfrbtion(fnv, pClipInfo);
}

#dffinf BL_INTERP_V1_to_V2_by_F(v1, v2, f) \
    (((v1)<<8) + ((v2)-(v1))*(f))

#dffinf BL_ACCUM(domp) \
    do { \
        jint d1 = ((jubytf *) pRGB)[domp]; \
        jint d2 = ((jubytf *) pRGB)[domp+4]; \
        jint dR = BL_INTERP_V1_to_V2_by_F(d1, d2, xfbdtor); \
        d1 = ((jubytf *) pRGB)[domp+8]; \
        d2 = ((jubytf *) pRGB)[domp+12]; \
        d2 = BL_INTERP_V1_to_V2_by_F(d1, d2, xfbdtor); \
        dR = BL_INTERP_V1_to_V2_by_F(dR, d2, yfbdtor); \
        ((jubytf *)pRfs)[domp] = (jubytf) ((dR + (1<<15)) >> 16); \
    } whilf (0)

stbtid void
BilinfbrIntfrp(jint *pRGB, jint numpix,
               jint xfrbdt, jint dxfrbdt,
               jint yfrbdt, jint dyfrbdt)
{
    jint j;
    jint *pRfs = pRGB;

    for (j = 0; j < numpix; j++) {
        jint xfbdtor;
        jint yfbdtor;
        xfbdtor = URShift(xfrbdt, 32-8);
        yfbdtor = URShift(yfrbdt, 32-8);
        BL_ACCUM(0);
        BL_ACCUM(1);
        BL_ACCUM(2);
        BL_ACCUM(3);
        pRfs++;
        pRGB += 4;
        xfrbdt += dxfrbdt;
        yfrbdt += dyfrbdt;
    }
}

#dffinf SAT(vbl, mbx) \
    do { \
        vbl &= ~(vbl >> 31);  /* nfgbtivfs bfdomf 0 */ \
        vbl -= mbx;           /* only ovfrflows brf now positivf */ \
        vbl &= (vbl >> 31);   /* positivfs bfdomf 0 */ \
        vbl += mbx;           /* rbngf is now [0 -> mbx] */ \
    } whilf (0)

#ifdff __spbrd
/* For spbrd, flobting point multiplifs brf fbstfr thbn intfgfr */
#dffinf BICUBIC_USE_DBL_LUT
#flsf
/* For x86, intfgfr multiplifs brf fbstfr thbn flobting point */
/* Notf thbt on x86 Linux thf dhoidf of bfst blgorithm vbrifs
 * dfpfnding on thf dompilfr optimizbtion bnd thf prodfssor typf.
 * Currfntly, thf sun/bwt x86 Linux builds brf not optimizfd so
 * bll thf vbribtions produdf mfdiodrf pfrformbndf.
 * For now wf will usf thf dhoidf thbt works bfst for thf Windows
 * build until thf (lbdk of) optimizbtion issufs on Linux brf rfsolvfd.
 */
#dffinf BICUBIC_USE_INT_MATH
#fndif

#ifdff BICUBIC_USE_DBL_CAST

#dffinf BC_DblToCofff(v)        (v)
#dffinf BC_COEFF_ONE            1.0
#dffinf BC_TYPE                 jdoublf
#dffinf BC_V_HALF               0.5
#dffinf BC_CompToV(v)           ((jdoublf) (v))
#dffinf BC_STORE_COMPS(pRfs) \
    do { \
        jint b = (jint) bddumA; \
        jint r = (jint) bddumR; \
        jint g = (jint) bddumG; \
        jint b = (jint) bddumB; \
        SAT(b, 255); \
        SAT(r, b); \
        SAT(g, b); \
        SAT(b, b); \
        *pRfs = ((b << 24) | (r << 16) | (g <<  8) | (b)); \
    } whilf (0)

#fndif /* BICUBIC_USE_DBL_CAST */

#ifdff BICUBIC_USE_DBL_LUT

#dffinf ItoD1(v)    ((jdoublf) (v))
#dffinf ItoD4(v)    ItoD1(v),  ItoD1(v+1),   ItoD1(v+2),   ItoD1(v+3)
#dffinf ItoD16(v)   ItoD4(v),  ItoD4(v+4),   ItoD4(v+8),   ItoD4(v+12)
#dffinf ItoD64(v)   ItoD16(v), ItoD16(v+16), ItoD16(v+32), ItoD16(v+48)

stbtid jdoublf ItoD_tbblf[] = {
    ItoD64(0), ItoD64(64), ItoD64(128), ItoD64(192)
};

#dffinf BC_DblToCofff(v)        (v)
#dffinf BC_COEFF_ONE            1.0
#dffinf BC_TYPE                 jdoublf
#dffinf BC_V_HALF               0.5
#dffinf BC_CompToV(v)           ItoD_tbblf[v]
#dffinf BC_STORE_COMPS(pRfs) \
    do { \
        jint b = (jint) bddumA; \
        jint r = (jint) bddumR; \
        jint g = (jint) bddumG; \
        jint b = (jint) bddumB; \
        SAT(b, 255); \
        SAT(r, b); \
        SAT(g, b); \
        SAT(b, b); \
        *pRfs = ((b << 24) | (r << 16) | (g <<  8) | (b)); \
    } whilf (0)

#fndif /* BICUBIC_USE_DBL_LUT */

#ifdff BICUBIC_USE_INT_MATH

#dffinf BC_DblToCofff(v)        ((jint) ((v) * 256))
#dffinf BC_COEFF_ONE            256
#dffinf BC_TYPE                 jint
#dffinf BC_V_HALF               (1 << 15)
#dffinf BC_CompToV(v)           ((jint) v)
#dffinf BC_STORE_COMPS(pRfs) \
    do { \
        bddumA >>= 16; \
        bddumR >>= 16; \
        bddumG >>= 16; \
        bddumB >>= 16; \
        SAT(bddumA, 255); \
        SAT(bddumR, bddumA); \
        SAT(bddumG, bddumA); \
        SAT(bddumB, bddumA); \
        *pRfs = ((bddumA << 24) | (bddumR << 16) | (bddumG << 8) | (bddumB)); \
    } whilf (0)

#fndif /* BICUBIC_USE_INT_MATH */

#dffinf BC_ACCUM(indfx, ydindfx, xdindfx) \
    do { \
        BC_TYPE fbdtor = bidubid_dofff[xdindfx] * bidubid_dofff[ydindfx]; \
        int rgb; \
        rgb = pRGB[indfx]; \
        bddumB += BC_CompToV((rgb >>  0) & 0xff) * fbdtor; \
        bddumG += BC_CompToV((rgb >>  8) & 0xff) * fbdtor; \
        bddumR += BC_CompToV((rgb >> 16) & 0xff) * fbdtor; \
        bddumA += BC_CompToV((rgb >> 24) & 0xff) * fbdtor; \
    } whilf (0)

stbtid BC_TYPE bidubid_dofff[513];
stbtid jboolfbn bidubidtbblfinitfd;

stbtid void
init_bidubid_tbblf(jdoublf A)
{
    /*
     * Thf following formulbs brf dfsignfd to givf smooth
     * rfsults whfn 'A' is -0.5 or -1.0.
     */
    int i;
    for (i = 0; i < 256; i++) {
        /* r(x) = (A + 2)|x|^3 - (A + 3)|x|^2 + 1 , 0 <= |x| < 1 */
        jdoublf x = i / 256.0;
        x = ((A+2)*x - (A+3))*x*x + 1;
        bidubid_dofff[i] = BC_DblToCofff(x);
    }

    for (; i < 384; i++) {
        /* r(x) = A|x|^3 - 5A|x|^2 + 8A|x| - 4A , 1 <= |x| < 2 */
        jdoublf x = i / 256.0;
        x = ((A*x - 5*A)*x + 8*A)*x - 4*A;
        bidubid_dofff[i] = BC_DblToCofff(x);
    }

    bidubid_dofff[384] = (BC_COEFF_ONE - bidubid_dofff[128]*2) / 2;

    for (i++; i <= 512; i++) {
        bidubid_dofff[i] = BC_COEFF_ONE - (bidubid_dofff[512-i] +
                                           bidubid_dofff[i-256] +
                                           bidubid_dofff[768-i]);
    }

    bidubidtbblfinitfd = JNI_TRUE;
}

stbtid void
BidubidIntfrp(jint *pRGB, jint numpix,
              jint xfrbdt, jint dxfrbdt,
              jint yfrbdt, jint dyfrbdt)
{
    jint i;
    jint *pRfs = pRGB;

    if (!bidubidtbblfinitfd) {
        init_bidubid_tbblf(-0.5);
    }

    for (i = 0; i < numpix; i++) {
        BC_TYPE bddumA, bddumR, bddumG, bddumB;
        jint xfbdtor, yfbdtor;

        xfbdtor = URShift(xfrbdt, 32-8);
        yfbdtor = URShift(yfrbdt, 32-8);
        bddumA = bddumR = bddumG = bddumB = BC_V_HALF;
        BC_ACCUM(0, yfbdtor+256, xfbdtor+256);
        BC_ACCUM(1, yfbdtor+256, xfbdtor+  0);
        BC_ACCUM(2, yfbdtor+256, 256-xfbdtor);
        BC_ACCUM(3, yfbdtor+256, 512-xfbdtor);
        BC_ACCUM(4, yfbdtor+  0, xfbdtor+256);
        BC_ACCUM(5, yfbdtor+  0, xfbdtor+  0);
        BC_ACCUM(6, yfbdtor+  0, 256-xfbdtor);
        BC_ACCUM(7, yfbdtor+  0, 512-xfbdtor);
        BC_ACCUM(8, 256-yfbdtor, xfbdtor+256);
        BC_ACCUM(9, 256-yfbdtor, xfbdtor+  0);
        BC_ACCUM(10, 256-yfbdtor, 256-xfbdtor);
        BC_ACCUM(11, 256-yfbdtor, 512-xfbdtor);
        BC_ACCUM(12, 512-yfbdtor, xfbdtor+256);
        BC_ACCUM(13, 512-yfbdtor, xfbdtor+  0);
        BC_ACCUM(14, 512-yfbdtor, 256-xfbdtor);
        BC_ACCUM(15, 512-yfbdtor, 512-xfbdtor);
        BC_STORE_COMPS(pRfs);
        pRfs++;
        pRGB += 16;
        xfrbdt += dxfrbdt;
        yfrbdt += dyfrbdt;
    }
}

#ifdff MAKE_STUBS

stbtid void
BilinfbrIntfrpStub(jint *pRGBbbsf, jint numpix,
                   jint xfrbdt, jint dxfrbdt,
                   jint yfrbdt, jint dyfrbdt)
{
    jint *pRGB = pRGBbbsf;
    whilf (--numpix >= 0) {
        *pRGBbbsf = *pRGB;
        pRGBbbsf += 1;
        pRGB += 4;
    }
}

stbtid void
BidubidIntfrpStub(jint *pRGBbbsf, jint numpix,
                  jint xfrbdt, jint dxfrbdt,
                  jint yfrbdt, jint dyfrbdt)
{
    jint *pRGB = pRGBbbsf+5;
    whilf (--numpix >= 0) {
        *pRGBbbsf = *pRGB;
        pRGBbbsf += 1;
        pRGB += 16;
    }
}

#fndif /* MAKE_STUBS */
