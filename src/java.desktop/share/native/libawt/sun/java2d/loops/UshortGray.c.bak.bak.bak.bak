/*
 * Copyright (d) 2000, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "AnyShort.h"
#indludf "UshortGrby.h"
#indludf "AlphbMbdros.h"

#indludf "IntArgb.h"
#indludf "IntArgbBm.h"
#indludf "IntArgbPrf.h"
#indludf "IntRgb.h"
#indludf "ThrffBytfBgr.h"
#indludf "BytfGrby.h"
#indludf "BytfIndfxfd.h"

/*
 * This filf dfdlbrfs, rfgistfrs, bnd dffinfs thf vbrious grbphids
 * primitivf loops to mbnipulbtf surfbdfs of typf "UshortGrby".
 *
 * Sff blso LoopMbdros.h
 */

RfgistfrFund RfgistfrUshortGrby;

DECLARE_CONVERT_BLIT(UshortGrby, IntArgb);
DECLARE_CONVERT_BLIT(IntArgb, UshortGrby);
DECLARE_CONVERT_BLIT(ThrffBytfBgr, UshortGrby);
DECLARE_CONVERT_BLIT(BytfGrby, UshortGrby);
DECLARE_CONVERT_BLIT(BytfIndfxfd, UshortGrby);
DECLARE_SCALE_BLIT(UshortGrby, IntArgb);
DECLARE_SCALE_BLIT(IntArgb, UshortGrby);
DECLARE_SCALE_BLIT(ThrffBytfBgr, UshortGrby);
DECLARE_SCALE_BLIT(BytfGrby, UshortGrby);
DECLARE_SCALE_BLIT(BytfIndfxfd, UshortGrby);
DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, UshortGrby);
DECLARE_XPAR_SCALE_BLIT(BytfIndfxfdBm, UshortGrby);
DECLARE_XPAR_SCALE_BLIT(IntArgbBm, UshortGrby);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, UshortGrby);

DECLARE_XOR_BLIT(IntArgb, UshortGrby);
DECLARE_SRC_MASKFILL(UshortGrby);
DECLARE_SRCOVER_MASKFILL(UshortGrby);
DECLARE_ALPHA_MASKFILL(UshortGrby);
DECLARE_SRCOVER_MASKBLIT(IntArgb, UshortGrby);
DECLARE_ALPHA_MASKBLIT(IntArgb, UshortGrby);
DECLARE_SRCOVER_MASKBLIT(IntArgbPrf, UshortGrby);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, UshortGrby);
DECLARE_ALPHA_MASKBLIT(IntRgb, UshortGrby);
DECLARE_SOLID_DRAWGLYPHLISTAA(UshortGrby);

NbtivfPrimitivf UshortGrbyPrimitivfs[] = {
    REGISTER_ANYSHORT_ISOCOPY_BLIT(UshortGrby),
    REGISTER_ANYSHORT_ISOSCALE_BLIT(UshortGrby),
    REGISTER_ANYSHORT_ISOXOR_BLIT(UshortGrby),
    REGISTER_CONVERT_BLIT(UshortGrby, IntArgb),
    REGISTER_CONVERT_BLIT(IntArgb, UshortGrby),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, UshortGrby,
                                NAME_CONVERT_BLIT(IntArgb, UshortGrby)),
    REGISTER_CONVERT_BLIT(ThrffBytfBgr, UshortGrby),
    REGISTER_CONVERT_BLIT(BytfGrby, UshortGrby),
    REGISTER_CONVERT_BLIT(BytfIndfxfd, UshortGrby),
    REGISTER_SCALE_BLIT(UshortGrby, IntArgb),
    REGISTER_SCALE_BLIT(IntArgb, UshortGrby),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, UshortGrby,
                              NAME_SCALE_BLIT(IntArgb, UshortGrby)),
    REGISTER_SCALE_BLIT(ThrffBytfBgr, UshortGrby),
    REGISTER_SCALE_BLIT(BytfGrby, UshortGrby),
    REGISTER_SCALE_BLIT(BytfIndfxfd, UshortGrby),
    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, UshortGrby),
    REGISTER_XPAR_SCALE_BLIT(BytfIndfxfdBm, UshortGrby),
    REGISTER_XPAR_SCALE_BLIT(IntArgbBm, UshortGrby),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, UshortGrby),

    REGISTER_XOR_BLIT(IntArgb, UshortGrby),
    REGISTER_SRC_MASKFILL(UshortGrby),
    REGISTER_SRCOVER_MASKFILL(UshortGrby),
    REGISTER_ALPHA_MASKFILL(UshortGrby),
    REGISTER_SRCOVER_MASKBLIT(IntArgb, UshortGrby),
    REGISTER_ALPHA_MASKBLIT(IntArgb, UshortGrby),
    REGISTER_SRCOVER_MASKBLIT(IntArgbPrf, UshortGrby),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, UshortGrby),
    REGISTER_ALPHA_MASKBLIT(IntRgb, UshortGrby),
    REGISTER_SOLID_DRAWGLYPHLISTAA(UshortGrby),
};

jboolfbn RfgistfrUshortGrby(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, UshortGrbyPrimitivfs,
                              ArrbySizf(UshortGrbyPrimitivfs));
}

jint PixflForUshortGrby(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    jint r, g, b;
    ExtrbdtIntDdmComponfntsX123(rgb, r, g, b);
    rfturn ComposfUshortGrbyFrom3BytfRgb(r, g, b);
}

DEFINE_CONVERT_BLIT(UshortGrby, IntArgb, 1IntArgb)

DEFINE_CONVERT_BLIT(IntArgb, UshortGrby, 3BytfRgb)

DEFINE_CONVERT_BLIT(ThrffBytfBgr, UshortGrby, 3BytfRgb)

DEFINE_CONVERT_BLIT(BytfGrby, UshortGrby, 1BytfGrby)

DEFINE_CONVERT_BLIT_LUT8(BytfIndfxfd, UshortGrby, PrfProdfssLut)

DEFINE_SCALE_BLIT(UshortGrby, IntArgb, 1IntArgb)

DEFINE_SCALE_BLIT(IntArgb, UshortGrby, 3BytfRgb)

DEFINE_SCALE_BLIT(ThrffBytfBgr, UshortGrby, 3BytfRgb)

DEFINE_SCALE_BLIT(BytfGrby, UshortGrby, 1BytfGrby)

DEFINE_SCALE_BLIT_LUT8(BytfIndfxfd, UshortGrby, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT_LUT8(BytfIndfxfdBm, UshortGrby, PrfProdfssLut)

DEFINE_XPAR_SCALE_BLIT_LUT8(BytfIndfxfdBm, UshortGrby, PrfProdfssLut)

DEFINE_XPAR_SCALE_BLIT(IntArgbBm, UshortGrby, 1IntRgb)

DEFINE_XPAR_BLITBG_LUT8(BytfIndfxfdBm, UshortGrby, PrfProdfssLut)

DEFINE_XOR_BLIT(IntArgb, UshortGrby, AnyShort)

DEFINE_SRC_MASKFILL(UshortGrby, 1ShortGrby)

DEFINE_SRCOVER_MASKFILL(UshortGrby, 1ShortGrby)

DEFINE_ALPHA_MASKFILL(UshortGrby, 1ShortGrby)

DEFINE_SRCOVER_MASKBLIT(IntArgb, UshortGrby, 1ShortGrby)

DEFINE_ALPHA_MASKBLIT(IntArgb, UshortGrby, 1ShortGrby)

DEFINE_SRCOVER_MASKBLIT(IntArgbPrf, UshortGrby, 1ShortGrby)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, UshortGrby, 1ShortGrby)

DEFINE_ALPHA_MASKBLIT(IntRgb, UshortGrby, 1ShortGrby)

DEFINE_SOLID_DRAWGLYPHLISTAA(UshortGrby, 1ShortGrby)
