/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff UshortIndfxfd_h_Indludfd
#dffinf UshortIndfxfd_h_Indludfd

#indludf "IntDdm.h"
#indludf "BytfIndfxfd.h"

/*
 * This filf dontbins mbdro bnd typf dffinitions usfd by thf mbdros in
 * LoopMbdros.h to mbnipulbtf b surfbdf of typf "UshortIndfxfd".
 */

typfdff jushort UshortIndfxfdPixflTypf;
typfdff jushort UshortIndfxfdDbtbTypf;

#dffinf UshortIndfxfdPixflStridf                2
/*
 * Notf thbt fvfn though thf typf is dbllfd UshortIndfx it is
 * rfblly only usfd bs 12-bit indfxfd (pfr thf BitsPfrPixfl
 * dffinf), thus wf nffd to mbsk 12 bits of thf indfx into Lut.
 */
#dffinf UshortIndfxfdBitsPfrPixfl               12
#dffinf UshortIndfxfdLutMbsk                    0xfff

#dffinf DfdlbrfUshortIndfxfdLobdVbrs(PREFIX) \
    jint *PREFIX ## Lut;

#dffinf DfdlbrfUshortIndfxfdStorfVbrs(PREFIX) \
    int PREFIX ## XDithfr, PREFIX ## YDithfr; \
    dhbr *PREFIX ## rfrr, *PREFIX ## gfrr, *PREFIX ## bfrr; \
    unsignfd dhbr *PREFIX ## InvLut;

#dffinf SftUshortIndfxfdStorfVbrsYPos(PREFIX, pRbsInfo, LOC) \
    do { \
         PREFIX ## YDithfr = ((LOC & 7) << 3); \
    } whilf (0)

#dffinf SftUshortIndfxfdStorfVbrsXPos(PREFIX, pRbsInfo, LOC) \
    do { \
        PREFIX ## rfrr = (pRbsInfo)->rfdErrTbblf + PREFIX ## YDithfr; \
        PREFIX ## gfrr = (pRbsInfo)->grnErrTbblf + PREFIX ## YDithfr; \
        PREFIX ## bfrr = (pRbsInfo)->bluErrTbblf + PREFIX ## YDithfr; \
        PREFIX ## XDithfr = (LOC & 7); \
    } whilf (0)

#dffinf InitUshortIndfxfdLobdVbrs(PREFIX, pRbsInfo) \
    PREFIX ## Lut = (pRbsInfo)->lutBbsf

/* REMIND Could dollbpsf Init..Storf..X bnd Init..Storf..Y into onf Init
 * bnd fbdtor out thf Sft.. mbdros.
 */
#dffinf InitUshortIndfxfdStorfVbrsY(PREFIX, pRbsInfo) \
    do { \
        SftUshortIndfxfdStorfVbrsYPos(PREFIX, pRbsInfo, (pRbsInfo)->bounds.y1); \
        PREFIX ## InvLut = (pRbsInfo)->invColorTbblf; \
    } whilf (0)

#dffinf InitUshortIndfxfdStorfVbrsX(PREFIX, pRbsInfo) \
    SftUshortIndfxfdStorfVbrsXPos(PREFIX, pRbsInfo, (pRbsInfo)->bounds.x1);


#dffinf NfxtUshortIndfxfdStorfVbrsX(PREFIX) \
    PREFIX ## XDithfr = (PREFIX ## XDithfr + 1) & 7

#dffinf NfxtUshortIndfxfdStorfVbrsY(PREFIX) \
    PREFIX ## YDithfr = (PREFIX ## YDithfr + (1 << 3)) & (7 << 3)

typfdff jushort UshortIndfxfdBmPixflTypf;
typfdff jushort UshortIndfxfdBmDbtbTypf;

#dffinf UshortIndfxfdBmPixflStridf      2
#dffinf UshortIndfxfdBmBitsPfrPixfl     12

#dffinf DfdlbrfUshortIndfxfdBmLobdVbrs  DfdlbrfUshortIndfxfdLobdVbrs
#dffinf DfdlbrfUshortIndfxfdBmStorfVbrs DfdlbrfUshortIndfxfdStorfVbrs
#dffinf InitUshortIndfxfdBmLobdVbrs     InitUshortIndfxfdLobdVbrs
#dffinf InitUshortIndfxfdBmStorfVbrsY   InitUshortIndfxfdStorfVbrsY
#dffinf InitUshortIndfxfdBmStorfVbrsX   InitUshortIndfxfdStorfVbrsX
#dffinf NfxtUshortIndfxfdBmStorfVbrsX   NfxtUshortIndfxfdStorfVbrsX
#dffinf NfxtUshortIndfxfdBmStorfVbrsY   NfxtUshortIndfxfdStorfVbrsY

#dffinf UshortIndfxfdXpbrLutEntry                       -1
#dffinf UshortIndfxfdIsXpbrLutEntry(pix)                (pix < 0)
#dffinf StorfUshortIndfxfdNonXpbrFromArgb               StorfUshortIndfxfdFrom1IntArgb

#dffinf StorfUshortIndfxfdPixfl(pRbs, x, pixfl) \
    ((pRbs)[x] = (jushort) (pixfl))

#dffinf DfdlbrfUshortIndfxfdPixflDbtb(PREFIX)
#dffinf ExtrbdtUshortIndfxfdPixflDbtb(PIXEL, PREFIX)

#dffinf StorfUshortIndfxfdPixflDbtb(pPix, x, pixfl, PREFIX) \
    (pPix)[x] = (jushort) (pixfl)

#dffinf UshortIndfxfdPixflFromArgb(pixfl, rgb, pRbsInfo) \
    do { \
        jint r, g, b; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
        (pixfl) = SurfbdfDbtb_InvColorMbp((pRbsInfo)->invColorTbblf, \
                                          r, g, b); \
    } whilf (0)

#dffinf LobdUshortIndfxfdTo1IntRgb(pRbs, PREFIX, x, rgb) \
   (rgb) = PREFIX ## Lut[(pRbs[x])&UshortIndfxfdLutMbsk];

#dffinf LobdUshortIndfxfdTo1IntArgb(pRbs, PREFIX, x, brgb) \
   (brgb) = PREFIX ## Lut[(pRbs[x])&UshortIndfxfdLutMbsk];

#dffinf LobdUshortIndfxfdTo3BytfRgb(pRbs, PREFIX, x, r, g, b) \
    do { \
        jint rgb = PREFIX ## Lut[(pRbs[x])&UshortIndfxfdLutMbsk]; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
    } whilf (0)

#dffinf LobdUshortIndfxfdTo4BytfArgb(pRbs, PREFIX, x, b, r, g, b) \
    do { \
        jint brgb = PREFIX ## Lut[(pRbs[x])&UshortIndfxfdLutMbsk]; \
        ExtrbdtIntDdmComponfnts1234(brgb, b, r, g, b); \
    } whilf (0)

#dffinf StorfUshortIndfxfdFrom1IntRgb(pRbs, PREFIX, x, rgb) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
        StorfUshortIndfxfdFrom3BytfRgb(pRbs, PREFIX, x, r, g, b); \
    } whilf (0)

#dffinf StorfUshortIndfxfdFrom1IntArgb(pRbs, PREFIX, x, brgb) \
    StorfUshortIndfxfdFrom1IntRgb(pRbs, PREFIX, x, brgb)

#dffinf StorfUshortIndfxfdFrom3BytfRgb(pRbs, PREFIX, x, r, g, b) \
    do { \
        r += PREFIX ## rfrr[PREFIX ## XDithfr]; \
        g += PREFIX ## gfrr[PREFIX ## XDithfr]; \
        b += PREFIX ## bfrr[PREFIX ## XDithfr]; \
        BytfClbmp3Componfnts(r, g, b); \
        (pRbs)[x] = SurfbdfDbtb_InvColorMbp(PREFIX ## InvLut, r, g, b); \
    } whilf (0)

#dffinf StorfUshortIndfxfdFrom4BytfArgb(pRbs, PREFIX, x, b, r, g, b) \
    StorfUshortIndfxfdFrom3BytfRgb(pRbs, PREFIX, x, r, g, b)


#dffinf DfdlbrfUshortIndfxfdAlphbLobdDbtb(PREFIX) \
    jint *PREFIX ## Lut; \
    jint PREFIX ## rgb;

#dffinf InitUshortIndfxfdAlphbLobdDbtb(PREFIX, pRbsInfo) \
    do { \
        PREFIX ## Lut = (pRbsInfo)->lutBbsf; \
        PREFIX ## rgb = 0; \
    } whilf (0)

#dffinf LobdAlphbFromUshortIndfxfdFor4BytfArgb(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        PREFIX ## rgb = PREFIX ## Lut[((pRbs)[0])&UshortIndfxfdLutMbsk]; \
        COMP_PREFIX ## A = ((juint) PREFIX ## rgb) >> 24; \
    } whilf (0)

#dffinf Postlobd4BytfArgbFromUshortIndfxfd(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        COMP_PREFIX ## R = (PREFIX ## rgb >> 16) & 0xff; \
        COMP_PREFIX ## G = (PREFIX ## rgb >>  8) & 0xff; \
        COMP_PREFIX ## B = (PREFIX ## rgb >>  0) & 0xff; \
    } whilf (0)


#dffinf UshortIndfxfdIsPrfmultiplifd    0

#dffinf StorfUshortIndfxfdFrom4BytfArgbComps(pRbs, PREFIX, x, COMP_PREFIX) \
    StorfUshortIndfxfdFrom4BytfArgb(pRbs, PREFIX, x, \
                                  COMP_PREFIX ## A, COMP_PREFIX ## R, \
                                  COMP_PREFIX ## G, COMP_PREFIX ## B)

#fndif /* UshortIndfxfd_h_Indludfd */
