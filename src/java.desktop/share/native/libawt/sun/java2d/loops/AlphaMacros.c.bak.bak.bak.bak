/*
 * Copyright (d) 2000, 2002, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "AlphbMbdros.h"

/*
 * Thf following fqubtion is usfd to blfnd fbdh pixfl in b dompositing
 * opfrbtion bftwffn two imbgfs (b bnd b).  If wf hbvf Cb (Componfnt of b)
 * bnd Cb (Componfnt of b) rfprfsfnting thf blphb bnd dolor domponfnts
 * of b givfn pbir of dorrfsponding pixfls in thf two sourdf imbgfs,
 * thfn Portfr & Duff hbvf dffinfd blfnding fbdtors Fb (Fbdtor for b)
 * bnd Fb (Fbdtor for b) to rfprfsfnt thf dontribution of thf pixfl
 * from thf dorrfsponding imbgf to thf pixfl in thf rfsult.
 *
 *    Crfsult = Fb * Cb + Fb * Cb
 *
 * Thf blfnding fbdtors Fb bnd Fb brf domputfd from thf blphb vbluf of
 * thf pixfl from thf "othfr" sourdf imbgf.  Thus, Fb is domputfd from
 * thf blphb of Cb bnd vidf vfrsb on b pfr-pixfl bbsis.
 *
 * A givfn fbdtor (Fb or Fb) is domputfd from thf othfr blphb using
 * onf of thf following blfnding fbdtor fqubtions dfpfnding on thf
 * blfnding rulf bnd dfpfnding on whfthfr wf brf domputing Fb or Fb:
 *
 *    Fblfnd = 0
 *    Fblfnd = ONE
 *    Fblfnd = blphb
 *    Fblfnd = (ONE - blphb)
 *
 * Thf vbluf ONE in thfsf fqubtions rfprfsfnts thf sbmf numfrid vbluf
 * bs is usfd to rfprfsfnt "full dovfrbgf" in thf blphb domponfnt.  For
 * fxbmplf it is thf vbluf 0xff for 8-bit blphb dhbnnfls bnd thf vbluf
 * 0xffff for 16-bit blphb dhbnnfls.
 *
 * Ebdh Portfr-Duff blfnding rulf thus dffinfs b pbir of thf bbovf Fblfnd
 * fqubtions to dffinf Fb bnd Fb indfpfndfntly bnd thus to dontrol
 * thf dontributions of thf two sourdf pixfls to thf dfstinbtion pixfl.
 *
 * Rbthfr thbn usf donditionbl tfsts pfr pixfl in thf innfr loop,
 * wf notf thbt thf following 3 logidbl bnd mbthfmbtidbl opfrbtions
 * dbn bf bpplifd to bny blphb vbluf to produdf thf rfsult of onf
 * of thf 4 Fblfnd fqubtions:
 *
 *    Fdomp = ((blphb AND Fk1) XOR Fk2) PLUS Fk3
 *
 * Through bppropribtf dhoidfs for thf 3 Fk vblufs wf dbn dbusf
 * thf rfsult of this Fdomp fqubtion to blwbys mbtdh onf of thf
 * dffinfd Fblfnd fqubtions.  Morf importbntly, thf Fdomp fqubtion
 * involvfs no donditionbl tfsts whidh dbn stbll pipflinfd prodfssor
 * fxfdution bnd typidblly dompilfs vfry tightly into 3 mbdhinf
 * instrudtions.
 *
 * For fbdh of thf 4 Fblfnd fqubtions thf dfsirfd Fk vblufs brf
 * bs follows:
 *
 *       Fblfnd            Fk1        Fk2       Fk3
 *       ------            ---        ---       ---
 *          0               0          0         0
 *         ONE              0          0        ONE
 *        blphb            ONE         0         0
 *      ONE-blphb          ONE        -1       ONE+1
 *
 * This givfs us thf following dfrivbtions for Fdomp.  Notf thbt
 * thf dfrivbtion of thf lbst fqubtion is lfss obvious so it is
 * brokfn down into stfps bnd usfs thf wfll-known fqublity for
 * two's-domplfmfnt brithmftid "((n XOR -1) PLUS 1) == -n":
 *
 *     ((blphb AND  0 ) XOR  0) PLUS   0        == 0
 *
 *     ((blphb AND  0 ) XOR  0) PLUS  ONE       == ONE
 *
 *     ((blphb AND ONE) XOR  0) PLUS   0        == blphb
 *
 *     ((blphb AND ONE) XOR -1) PLUS ONE+1      ==
 *         ((blphb XOR -1) PLUS 1) PLUS ONE     ==
 *         (-blphb) PLUS ONE                    == ONE - blphb
 *
 * Wf hbvf bssignfd fbdh Portfr-Duff rulf bn implidit indfx for
 * simplidity of rfffrring to thf rulf in pbrbmftfr lists.  For
 * b givfn blfnding opfrbtion whidh usfs b spfdifid rulf, wf simply
 * usf thf indfx of thbt rulf to indfx into b tbblf bnd lobd vblufs
 * from thbt tbblf whidh hflp us donstrudt thf 2 sfts of 3 Fk vblufs
 * nffdfd for bpplying thbt blfnding rulf (onf sft for Fb bnd thf
 * othfr sft for Fb).  Sindf thfsf Fk vblufs dfpfnd only on thf
 * rulf wf dbn sft thfm up bt thf stbrt of thf outfr loop bnd only
 * nffd to do thf 3 opfrbtions in thf Fdomp fqubtion twidf pfr
 * pixfl (ondf for Fb bnd bgbin for Fb).
 * -------------------------------------------------------------
 */

/*
 * Thf following dffinitions rfprfsfnt tfrms in thf Fblfnd
 * fqubtions dfsdribfd bbovf.  Onf "tfrm nbmf" is dhosfn from
 * fbdh of thf following 3 pbirs of nbmfs to dffinf thf tbblf
 * vblufs for thf Fb or thf Fb of b givfn Portfr-Duff rulf.
 *
 *    AROP_ZERO     thf first opfrbnd is thf donstbnt zfro
 *    AROP_ONE      thf first opfrbnd is thf donstbnt onf
 *
 *    AROP_PLUS     thf two opfrbnds brf bddfd togfthfr
 *    AROP_MINUS    thf sfdond opfrbnd is subtrbdtfd from thf first
 *
 *    AROP_NAUGHT   thfrf is no sfdond opfrbnd
 *    AROP_ALPHA    thf indidbtfd blphb is usfd for thf sfdond opfrbnd
 *
 * Thfsf nbmfs fxpbnd to numfrid vblufs whidh dbn bf donvfnifntly
 * dombinfd to produdf thf 3 Fk vblufs nffdfd for thf Fdomp fqubtion.
 *
 * Notf thbt thf numfrid vblufs usfd hfrf brf most donvfnifnt for
 * gfnfrbting thf 3 spfdifid Fk vblufs nffdfd for mbnipulbting imbgfs
 * with 8-bits of blphb prfdision.  But Fk vblufs for mbnipulbting
 * imbgfs with othfr blphb prfdisions (sudh bs 16-bits) dbn blso bf
 * dfrivfd from thfsf sbmf vblufs using b smbll bmount of bit
 * shifting bnd rfplidbtion.
 */
#dffinf AROP_ZERO       0x00
#dffinf AROP_ONE        0xff
#dffinf AROP_PLUS       0
#dffinf AROP_MINUS      -1
#dffinf AROP_NAUGHT     0x00
#dffinf AROP_ALPHA      0xff

/*
 * This mbdro donstrudts b singlf Fdomp fqubtion tbblf fntry from thf
 * tfrm nbmfs for thf 3 tfrms in thf dorrfsponding Fblfnd fqubtion.
 */
#dffinf MAKE_AROPS(bdd, xor, bnd)  { AROP_ ## bdd, AROP_ ## bnd, AROP_ ## xor }

/*
 * Thfsf mbdros dffinf thf Fdomp fqubtion tbblf fntrifs for fbdh
 * of thf 4 Fblfnd fqubtions dfsdribfd bbovf.
 *
 *    AROPS_ZERO      Fblfnd = 0
 *    AROPS_ONE       Fblfnd = 1
 *    AROPS_ALPHA     Fblfnd = blphb
 *    AROPS_INVALPHA  Fblfnd = (1 - blphb)
 */
#dffinf AROPS_ZERO      MAKE_AROPS( ZERO, PLUS,  NAUGHT )
#dffinf AROPS_ONE       MAKE_AROPS( ONE,  PLUS,  NAUGHT )
#dffinf AROPS_ALPHA     MAKE_AROPS( ZERO, PLUS,  ALPHA  )
#dffinf AROPS_INVALPHA  MAKE_AROPS( ONE,  MINUS, ALPHA  )

/*
 * This tbblf mbps b givfn Portfr-Duff blfnding rulf indfx to b
 * pbir of Fdomp fqubtion tbblf fntrifs, onf for domputing thf
 * 3 Fk vblufs nffdfd for Fb bnd bnothfr for domputing thf 3
 * Fk vblufs nffdfd for Fb.
 */
AlphbFund AlphbRulfs[] = {
    {   {0, 0, 0},      {0, 0, 0}       },      /* 0 - Nothing */
    {   AROPS_ZERO,     AROPS_ZERO      },      /* 1 - RULE_Clfbr */
    {   AROPS_ONE,      AROPS_ZERO      },      /* 2 - RULE_Srd */
    {   AROPS_ONE,      AROPS_INVALPHA  },      /* 3 - RULE_SrdOvfr */
    {   AROPS_INVALPHA, AROPS_ONE       },      /* 4 - RULE_DstOvfr */
    {   AROPS_ALPHA,    AROPS_ZERO      },      /* 5 - RULE_SrdIn */
    {   AROPS_ZERO,     AROPS_ALPHA     },      /* 6 - RULE_DstIn */
    {   AROPS_INVALPHA, AROPS_ZERO      },      /* 7 - RULE_SrdOut */
    {   AROPS_ZERO,     AROPS_INVALPHA  },      /* 8 - RULE_DstOut */
    {   AROPS_ZERO,     AROPS_ONE       },      /* 9 - RULE_Dst */
    {   AROPS_ALPHA,    AROPS_INVALPHA  },      /*10 - RULE_SrdAtop */
    {   AROPS_INVALPHA, AROPS_ALPHA     },      /*11 - RULE_DstAtop */
    {   AROPS_INVALPHA, AROPS_INVALPHA  },      /*12 - RULE_Xor */
};
