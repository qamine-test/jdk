/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <string.h>

#indludf "AnyBytf.h"
#indludf "UshortIndfxfd.h"
#indludf "AlphbMbdros.h"

#indludf "IntArgb.h"
#indludf "IntArgbBm.h"
#indludf "IntArgbPrf.h"
#indludf "IntRgb.h"
#indludf "ThrffBytfBgr.h"
#indludf "BytfGrby.h"
#indludf "Indfx12Grby.h"

/*
 * This filf dfdlbrfs, rfgistfrs, bnd dffinfs thf vbrious grbphids
 * primitivf loops to mbnipulbtf surfbdfs of typf "UshortIndfxfd".
 *
 * Sff blso LoopMbdros.h
 */

RfgistfrFund RfgistfrUshortIndfxfd;

DECLARE_CONVERT_BLIT(IntArgb, UshortIndfxfd);
DECLARE_CONVERT_BLIT(ThrffBytfBgr, UshortIndfxfd);
DECLARE_CONVERT_BLIT(BytfGrby, UshortIndfxfd);
DECLARE_CONVERT_BLIT(UshortIndfxfd, UshortIndfxfd);
DECLARE_CONVERT_BLIT(Indfx12Grby, UshortIndfxfd);
DECLARE_CONVERT_BLIT(UshortIndfxfd, IntArgb);
DECLARE_SCALE_BLIT(IntArgb, UshortIndfxfd);
DECLARE_SCALE_BLIT(ThrffBytfBgr, UshortIndfxfd);
DECLARE_SCALE_BLIT(BytfGrby, UshortIndfxfd);
DECLARE_SCALE_BLIT(Indfx12Grby, UshortIndfxfd);
DECLARE_SCALE_BLIT(UshortIndfxfd, UshortIndfxfd);
DECLARE_SCALE_BLIT(UshortIndfxfd, IntArgb);
DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, UshortIndfxfd);
DECLARE_XPAR_SCALE_BLIT(BytfIndfxfdBm, UshortIndfxfd);
DECLARE_XPAR_SCALE_BLIT(IntArgbBm, UshortIndfxfd);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, UshortIndfxfd);
DECLARE_XPAR_CONVERT_BLIT(IntArgbBm, UshortIndfxfd);
DECLARE_XPAR_BLITBG(IntArgbBm, UshortIndfxfd);

DECLARE_XOR_BLIT(IntArgb, UshortIndfxfd);
DECLARE_ALPHA_MASKFILL(UshortIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntArgb, UshortIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, UshortIndfxfd);
DECLARE_ALPHA_MASKBLIT(IntRgb, UshortIndfxfd);
DECLARE_SOLID_DRAWGLYPHLISTAA(UshortIndfxfd);

NbtivfPrimitivf UshortIndfxfdPrimitivfs[] = {
    REGISTER_CONVERT_BLIT(IntArgb, UshortIndfxfd),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, UshortIndfxfd,
                                NAME_CONVERT_BLIT(IntArgb, UshortIndfxfd)),
    REGISTER_CONVERT_BLIT_EQUIV(IntArgbBm, UshortIndfxfd,
                                NAME_CONVERT_BLIT(IntArgb, UshortIndfxfd)),
    REGISTER_CONVERT_BLIT(ThrffBytfBgr, UshortIndfxfd),
    REGISTER_CONVERT_BLIT(BytfGrby, UshortIndfxfd),
    REGISTER_CONVERT_BLIT(Indfx12Grby, UshortIndfxfd),
    REGISTER_CONVERT_BLIT_FLAGS(UshortIndfxfd, UshortIndfxfd, 0, SD_LOCK_LUT),
    REGISTER_CONVERT_BLIT(UshortIndfxfd, IntArgb),
    REGISTER_CONVERT_BLIT_EQUIV(UshortIndfxfd, IntRgb,
                                NAME_CONVERT_BLIT(UshortIndfxfd, IntArgb)),
    REGISTER_SCALE_BLIT(IntArgb, UshortIndfxfd),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, UshortIndfxfd,
                              NAME_SCALE_BLIT(IntArgb, UshortIndfxfd)),
    REGISTER_SCALE_BLIT_EQUIV(IntArgbBm, UshortIndfxfd,
                              NAME_SCALE_BLIT(IntArgb, UshortIndfxfd)),
    REGISTER_SCALE_BLIT(ThrffBytfBgr, UshortIndfxfd),
    REGISTER_SCALE_BLIT(BytfGrby, UshortIndfxfd),
    REGISTER_SCALE_BLIT(Indfx12Grby, UshortIndfxfd),
    REGISTER_SCALE_BLIT_FLAGS(UshortIndfxfd, UshortIndfxfd, 0, SD_LOCK_LUT),
    REGISTER_SCALE_BLIT(UshortIndfxfd, IntArgb),
    REGISTER_SCALE_BLIT_EQUIV(UshortIndfxfd, IntRgb,
                              NAME_SCALE_BLIT(UshortIndfxfd, IntArgb)),
    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, UshortIndfxfd),
    REGISTER_XPAR_SCALE_BLIT(BytfIndfxfdBm, UshortIndfxfd),
    REGISTER_XPAR_SCALE_BLIT(IntArgbBm, UshortIndfxfd),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, UshortIndfxfd),
    REGISTER_XPAR_CONVERT_BLIT(IntArgbBm, UshortIndfxfd),
    REGISTER_XPAR_BLITBG(IntArgbBm, UshortIndfxfd),

    REGISTER_XOR_BLIT(IntArgb, UshortIndfxfd),
    REGISTER_ALPHA_MASKFILL(UshortIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntArgb, UshortIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, UshortIndfxfd),
    REGISTER_ALPHA_MASKBLIT(IntRgb, UshortIndfxfd),
    REGISTER_SOLID_DRAWGLYPHLISTAA(UshortIndfxfd),
};

fxtfrn jint PixflForBytfIndfxfd(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb);
fxtfrn jboolfbn dhfdkSbmfLut(jint *SrdRfbdLut, jint *DstRfbdLut,
                             SurfbdfDbtbRbsInfo *pSrdInfo,
                             SurfbdfDbtbRbsInfo *pDstInfo);

jboolfbn RfgistfrUshortIndfxfd(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, UshortIndfxfdPrimitivfs,
                              ArrbySizf(UshortIndfxfdPrimitivfs));
}

jint PixflForUshortIndfxfd(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    rfturn PixflForBytfIndfxfd(pRbsInfo, rgb);
}


DEFINE_CONVERT_BLIT(IntArgb, UshortIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(ThrffBytfBgr, UshortIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(BytfGrby, UshortIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT(Indfx12Grby, UshortIndfxfd, 3BytfRgb)

DEFINE_CONVERT_BLIT_LUT(UshortIndfxfd, IntArgb, ConvfrtOnThfFly)

DEFINE_SCALE_BLIT_LUT(UshortIndfxfd, IntArgb, ConvfrtOnThfFly)

void NAME_CONVERT_BLIT(UshortIndfxfd, UshortIndfxfd)
    (void *srdBbsf, void *dstBbsf,
     juint width, juint hfight,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfUshortIndfxfdLobdVbrs(SrdRfbd)
    DfdlbrfUshortIndfxfdLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;
    jint bytfsToCopy = width * pDstInfo->pixflStridf;

    InitUshortIndfxfdLobdVbrs(SrdRfbd, pSrdInfo);
    InitUshortIndfxfdLobdVbrs(DstRfbd, pDstInfo);

    if (dhfdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        do {
            mfmdpy(dstBbsf, srdBbsf, bytfsToCopy);
            srdBbsf = PtrAddBytfs(srdBbsf, srdSdbn);
            dstBbsf = PtrAddBytfs(dstBbsf, dstSdbn);
        } whilf (--hfight > 0);
    } flsf {
        DfdlbrfUshortIndfxfdStorfVbrs(DstWritf);

        BlitLoopWidthHfight(UshortIndfxfd, pSrd, srdBbsf, pSrdInfo,
                            UshortIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                            width, hfight,
                            ConvfrtVib3BytfRgb
                                (pSrd, UshortIndfxfd, SrdRfbd,
                                 pDst, UshortIndfxfd, DstWritf, 0, 0));
    }
}

DEFINE_SCALE_BLIT(IntArgb, UshortIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(ThrffBytfBgr, UshortIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(BytfGrby, UshortIndfxfd, 3BytfRgb)

DEFINE_SCALE_BLIT(Indfx12Grby, UshortIndfxfd, 3BytfRgb)

void NAME_SCALE_BLIT(UshortIndfxfd, UshortIndfxfd)
    (void *srdBbsf, void *dstBbsf,
     juint width, juint hfight,
     jint sxlod, jint sylod,
     jint sxind, jint syind, jint shift,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfUshortIndfxfdLobdVbrs(SrdRfbd)
    DfdlbrfUshortIndfxfdLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;
    DfdlbrfUshortIndfxfdStorfVbrs(DstWritf)

    InitUshortIndfxfdLobdVbrs(SrdRfbd, pSrdInfo);
    InitUshortIndfxfdLobdVbrs(DstRfbd, pDstInfo);

    if (dhfdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        BlitLoopSdblfWidthHfight(UshortIndfxfd, pSrd, srdBbsf, pSrdInfo,
                                 UshortIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, width, hfight,
                                 sxlod, sylod, sxind, syind, shift,
                                 pDst[0] = pSrd[x]);
    } flsf {
        BlitLoopSdblfWidthHfight(UshortIndfxfd, pSrd, srdBbsf, pSrdInfo,
                                 UshortIndfxfd, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, width, hfight,
                                 sxlod, sylod, sxind, syind, shift,
                                 ConvfrtVib3BytfRgb(pSrd, UshortIndfxfd, SrdRfbd,
                                                    pDst, UshortIndfxfd, DstWritf,
                                                    x, 0));
    }
}

DEFINE_XPAR_CONVERT_BLIT_LUT(BytfIndfxfdBm, UshortIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_SCALE_BLIT_LUT(BytfIndfxfdBm, UshortIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_SCALE_BLIT(IntArgbBm, UshortIndfxfd, 1IntRgb)

DEFINE_XPAR_BLITBG_LUT(BytfIndfxfdBm, UshortIndfxfd, ConvfrtOnThfFly)

DEFINE_XPAR_CONVERT_BLIT(IntArgbBm, UshortIndfxfd, 1IntRgb)

DEFINE_XPAR_BLITBG(IntArgbBm, UshortIndfxfd, 1IntRgb)

DEFINE_XOR_BLIT(IntArgb, UshortIndfxfd, AnyBytf)

DEFINE_ALPHA_MASKFILL(UshortIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgb, UshortIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, UshortIndfxfd, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntRgb, UshortIndfxfd, 4BytfArgb)

DEFINE_SOLID_DRAWGLYPHLISTAA(UshortIndfxfd, 3BytfRgb)
