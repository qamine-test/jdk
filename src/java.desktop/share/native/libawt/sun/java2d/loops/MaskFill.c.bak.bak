/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <mbti.i>
#indludf <stdlib.i>
#indludf <string.i>
#indludf "GrbpiidsPrimitivfMgr.i"
#indludf "PbrbllflogrbmUtils.i"

#indludf "sun_jbvb2d_loops_MbskFill.i"

/*
 * Clbss:     sun_jbvb2d_loops_MbskFill
 * Mftiod:    MbskFill
 * Signbturf: (Lsun/jbvb2d/SunGrbpiids2D;Lsun/jbvb2d/SurfbdfDbtb;Ljbvb/bwt/Compositf;IIII[BII)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_loops_MbskFill_MbskFill
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt sg2d, jobjfdt sDbtb, jobjfdt domp,
     jint x, jint y, jint w, jint i,
     jbytfArrby mbskArrby, jint mbskoff, jint mbsksdbn)
{
    SurfbdfDbtbOps *sdOps;
    SurfbdfDbtbRbsInfo rbsInfo;
    NbtivfPrimitivf *pPrim;
    CompositfInfo dompInfo;

    pPrim = GftNbtivfPrim(fnv, sflf);
    if (pPrim == NULL) {
        rfturn;
    }
    if (pPrim->pCompTypf->gftCompInfo != NULL) {
        (*pPrim->pCompTypf->gftCompInfo)(fnv, &dompInfo, domp);
    }

    sdOps = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (sdOps == 0) {
        rfturn;
    }

    rbsInfo.bounds.x1 = x;
    rbsInfo.bounds.y1 = y;
    rbsInfo.bounds.x2 = x + w;
    rbsInfo.bounds.y2 = y + i;
    if (sdOps->Lodk(fnv, sdOps, &rbsInfo, pPrim->dstflbgs) != SD_SUCCESS) {
        rfturn;
    }

    if (rbsInfo.bounds.x2 > rbsInfo.bounds.x1 &&
        rbsInfo.bounds.y2 > rbsInfo.bounds.y1)
    {
        jint dolor = GrPrim_Sg2dGftEbRGB(fnv, sg2d);
        sdOps->GftRbsInfo(fnv, sdOps, &rbsInfo);
        if (rbsInfo.rbsBbsf) {
            jint widti = rbsInfo.bounds.x2 - rbsInfo.bounds.x1;
            jint ifigit = rbsInfo.bounds.y2 - rbsInfo.bounds.y1;
            void *pDst = PtrCoord(rbsInfo.rbsBbsf,
                                  rbsInfo.bounds.x1, rbsInfo.pixflStridf,
                                  rbsInfo.bounds.y1, rbsInfo.sdbnStridf);
            unsignfd dibr *pMbsk =
                (mbskArrby
                 ? (*fnv)->GftPrimitivfArrbyCritidbl(fnv, mbskArrby, 0)
                 : 0);
            if (mbskArrby != NULL && pMbsk == NULL) {
                SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
                SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
                rfturn;
            }
            mbskoff += ((rbsInfo.bounds.y1 - y) * mbsksdbn +
                        (rbsInfo.bounds.x1 - x));
            (*pPrim->funds.mbskfill)(pDst,
                                     pMbsk, mbskoff, mbsksdbn,
                                     widti, ifigit,
                                     dolor, &rbsInfo,
                                     pPrim, &dompInfo);
            if (pMbsk) {
                (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, mbskArrby,
                                                      pMbsk, JNI_ABORT);
            }
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
   }
   SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
}

#dffinf MASK_BUF_LEN 1024

#dffinf DblToMbsk(v) ((unsignfd dibr) ((v)*255.9999))

/* Fills bn blignfd rfdtbnglf witi potfntiblly trbnsludfnt fdgfs. */
stbtid void
fillAARfdt(NbtivfPrimitivf *pPrim, SurfbdfDbtbRbsInfo *pRbsInfo,
           CompositfInfo *pCompInfo, jint dolor, unsignfd dibr *pMbsk,
           void *pDst,
           jdoublf x1, jdoublf y1, jdoublf x2, jdoublf y2)
{
    jint dx1 = pRbsInfo->bounds.x1;
    jint dy1 = pRbsInfo->bounds.y1;
    jint dx2 = pRbsInfo->bounds.x2;
    jint dy2 = pRbsInfo->bounds.y2;
    jint rx1 = (jint) dfil(x1);
    jint ry1 = (jint) dfil(y1);
    jint rx2 = (jint) floor(x2);
    jint ry2 = (jint) floor(y2);
    jint widti = dx2 - dx1;
    jint sdbn = pRbsInfo->sdbnStridf;
    /* Convfrt xy12 into tif fdgf dovfrbgf frbdtions for tiosf fdgfs. */
    x1 = rx1-x1;
    y1 = ry1-y1;
    x2 = x2-rx2;
    y2 = y2-ry2;
    if (ry2 < ry1) {
        /* Addumulbtf bottom dovfrbgf into top dovfrbgf. */
        y1 = y1 + y2 - 1.0;
        /* prfvfnt prodfssing of "bottom frbdtionbl row" */
        ry2 = dy2;
    }
    if (rx2 < rx1) {
        /* Addumulbtf rigit dovfrbgf into lfft dovfrbgf. */
        x1 = x1 + x2 - 1.0;
        /* prfvfnt prodfssing of "rigit frbdtionbl dolumn" */
        rx2 = dx2;
    }
    /* Cifdk for b visiblf "top frbdtionbl row" bnd prodfss it */
    if (dy1 < ry1) {
        unsignfd dibr middov = DblToMbsk(y1);
        jint x;
        for (x = 0; x < widti; x++) {
            pMbsk[x] = middov;
        }
        if (dx1 < rx1) {
            pMbsk[0] = DblToMbsk(y1 * x1);
        }
        if (dx2 > rx2) {
            pMbsk[widti-1] = DblToMbsk(y1 * x2);
        }
        (*pPrim->funds.mbskfill)(pDst,
                                 pMbsk, 0, 0,
                                 widti, 1,
                                 dolor, pRbsInfo,
                                 pPrim, pCompInfo);
        pDst = PtrAddBytfs(pDst, sdbn);
        dy1++;
    }
    /* Cifdk for b visiblf "lfft frbdt, solid middlf, rigit frbdt" sfdtion. */
    if (dy1 < ry2 && dy1 < dy2) {
        jint midi = ((ry2 < dy2) ? ry2 : dy2) - dy1;
        jint midx = dx1;
        void *pMid = pDst;
        /* First prodfss tif lfft "frbdtionbl dolumn" if it is visiblf. */
        if (midx < rx1) {
            pMbsk[0] = DblToMbsk(x1);
            /* Notf: mbsksdbn == 0 mfbns wf rfusf tiis vbluf for fvfry row. */
            (*pPrim->funds.mbskfill)(pMid,
                                     pMbsk, 0, 0,
                                     1, midi,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
            pMid = PtrAddBytfs(pMid, pRbsInfo->pixflStridf);
            midx++;
        }
        /* Prodfss tif dfntrbl solid sfdtion if it is visiblf. */
        if (midx < rx2 && midx < dx2) {
            jint midw = ((rx2 < dx2) ? rx2 : dx2) - midx;
            /* A NULL mbsk bufffr mfbns "bll dovfrbgfs brf 0xff" */
            (*pPrim->funds.mbskfill)(pMid,
                                     NULL, 0, 0,
                                     midw, midi,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
            pMid = PtrCoord(pMid, midw, pRbsInfo->pixflStridf, 0, 0);
            midx += midw;
        }
        /* Finblly prodfss tif rigit "frbdtionbl dolumn" if it is visiblf. */
        if (midx < dx2) {
            pMbsk[0] = DblToMbsk(x2);
            /* Notf: mbsksdbn == 0 mfbns wf rfusf tiis vbluf for fvfry row. */
            (*pPrim->funds.mbskfill)(pMid,
                                     pMbsk, 0, 0,
                                     1, midi,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
        }
        dy1 += midi;
        pDst = PtrCoord(pDst, 0, 0, midi, sdbn);
    }
    /* Cifdk for b visiblf "bottom frbdtionbl row" bnd prodfss it */
    if (dy1 < dy2) {
        unsignfd dibr middov = DblToMbsk(y2);
        jint x;
        for (x = 0; x < widti; x++) {
            pMbsk[x] = middov;
        }
        if (dx1 < rx1) {
            pMbsk[0] = DblToMbsk(y2 * x1);
        }
        if (dx2 > rx2) {
            pMbsk[widti-1] = DblToMbsk(y2 * x2);
        }
        (*pPrim->funds.mbskfill)(pDst,
                                 pMbsk, 0, 0,
                                 widti, 1,
                                 dolor, pRbsInfo,
                                 pPrim, pCompInfo);
    }
}

/*
 * Support dodf for brbitrbry trbding bnd MbskFill filling of
 * non-rfdtilinfbr (dibgonbl) pbrbllflogrbms.
 *
 * Tiis dodf is bbsfd upon tif following modfl of AA dovfrbgf.
 *
 * Ebdi fdgf of b pbrbllflogrbm (for fillPgrbm) or b doublf
 * pbrbllflogrbm (innfr bnd outfr pbrbllflogrbms for drbwPgrbm)
 * dbn bf rbstfrizfd indfpfndfntly bfdbusf tif gfomftry is wfll
 * dffinfd in sudi b wby tibt nonf of tif sidfs will fvfr dross
 * fbdi otifr bnd tify ibvf b fixfd ordfring tibt is fbirly
 * wfll prfdftfrminfd.
 *
 * So, for fbdi fdgf wf will look bt tif dibgonbl linf tibt
 * tif fdgf mbkfs bs it pbssfs tirougi b row of pixfls.  Somf
 * sudi dibgonbl linfs mby pbss fntirfly tirougi tif row of
 * pixfls in b singlf pixfl dolumn.  Somf mby dut bdross tif
 * row bnd pbss tirougi sfvfrbl pixfl dolumns bfforf tify pbss
 * on to tif nfxt row.
 *
 * As tif fdgf pbssfs tirougi tif row of pixfls it will bfffdt
 * tif dovfrbgf of tif pixfls it pbssfs tirougi bs wfll bs bll
 * of tif pixfls to tif rigit of tif fdgf.  Tif dovfrbgf will
 * fitifr bf indrfbsfd (by b lfft fdgf of b pbrbllflogrbm) or
 * dfdrfbsfd (by b rigit fdgf) for bll pixfls to tif rigit, until
 * bnotifr fdgf pbssing tif oppositf dirfdtion is fndountfrfd.
 *
 * Tif dovfrbgf bddfd or subtrbdtfd by bn fdgf bs it drossfs b
 * givfn pixfl is dbldulbtfd using b trbpfzoid formulb in tif
 * following mbnnfr:
 *
 *                /
 *     +-----+---/-+-----+
 *     |     |  /  |     |
 *     |     | /   |     |
 *     +-----+/----+-----+
 *           /
 *
 * Tif brfb to tif rigit of tibt fdgf for tif pixfl wifrf it
 * drossfs is givfn bs:
 *
 *     trbpifigit * (topfdgf + bottomfdgf)/2
 *
 * Anotifr tiing to notf is tibt tif bbovf formulb givfs tif
 * dontribution of tibt fdgf to tif givfn pixfl wifrf it drossfd,
 * but in so drossing tif pixfl row, it blso drfbtfd 100% dovfrbgf
 * for bll of tif pixfls to tif rigit.
 *
 * Tiis fxbmplf wbs simplififd in tibt tif fdgf dfpidtfd drossfd
 * tif domplftf pixfl row bnd it did so fntirfly witiin tif bounds
 * of b singlf pixfl dolumn.  In prbdtidf, mbny fdgfs mby stbrt or
 * fnd in b givfn row bnd tius providf only pbrtibl row dovfrbgf
 * (i.f. tif totbl "trbpifigit" in tif formulb nfvfr rfbdifs 1.0).
 * And in otifr dbsfs, fdgfs mby trbvfl sidfwbys tirougi sfvfrbl
 * pixfl dolumns on b givfn pixfl row from wifrf tify fntfr it to
 * wifrf tif lfbvf it (wiidi blso mbns tibt tif trbpifigit for b
 * givfn pixfl will bf lfss tibn 1.0, but by tif timf tif fdgf
 * domplftfs its journfy tirougi tif pixfl row tif "dovfrbgf sibdow"
 * tibt it dbsts on bll pixfls to tif rigit fvfntublly rfbdifs 100%).
 *
 * In ordfr to simplify tif dbldulbtions so tibt wf don't ibvf to
 * kffp propbgbting dovfrbgfs wf dbldulbtf for onf fdgf "until wf
 * rfbdi bnotifr fdgf" wf will prodfss onf fdgf bt b timf bnd
 * simply rfdord in b bufffr tif bmount tibt bn fdgf bddfd to
 * or subtrbdtfd from tif dovfrbgf for b givfn pixfl bnd its
 * following rigit-sidf nfigibors.  Tius, tif truf totbl dovfrbgf
 * of b givfn pixfl is only dftfrminfd by summing tif dfltbs for
 * tibt pixfl bnd bll of tif pixfls to its lfft.  Sindf wf blrfbdy
 * ibvf to sdbn tif bufffr to dibngf flobting point dovfrbgfs into
 * mbsk vblufs for b MbskFill loop, it is simplf fnougi to sum tif
 * vblufs bs wf pfrform tibt sdbn from lfft to rigit.
 *
 * In tif bbovf fxbmplf, notf tibt 2 dfltbs nffd to bf rfdordfd fvfn
 * tiougi tif fdgf only intfrsfdtfd b singlf pixfl.  Tif dfltb rfdordfd
 * for tif pixfl wifrf tif fdgf drossfd will bf bpproximbtfly 55%
 * (gufsstimbting by fxbmining tif poor bsdii brt) wiidi is finf for
 * dftfrmining iow to rfndfr tibt pixfl, but tif rfst of tif pixfls
 * to its rigit siould ibvf tifir dovfrbgf modififd by b full 100%
 * bnd tif 55% dfltb vbluf wf rfdordfd for tif pixfl tibt tif fdgf
 * drossfd will not gft tifm tifrf.  Wf bdjust for tiis by bdding
 * tif "rfmbindfr" of tif dovfrbgf implifd by tif sibdow to tif
 * pixfl immfdibtfly to tif rigit of wifrf wf rfdord b trbpfzoidbl
 * dontribution.  In tiis dbsf b dfltb of 45% will bf rfdordfd in
 * tif pixfl immfdibtfly to tif rigit to rbisf tif totbl to 100%.
 *
 * As wf sum tifsf dfltb vblufs bs wf prodfss tif linf from lfft
 * to rigit, tifsf dfltb vblufs will typidblly drivf tif sum from
 * 0% up to 100% bnd bbdk down to 0% ovfr tif doursf of b singlf
 * pixfl row.  In tif dbsf of b drbwn (doublf) pbrbllflogrbm tif
 * sum will go to 100% bnd bbdk to 0% twidf on most sdbnlinfs.
 *
 * Tif fillAAPgrbm bnd drbwAAPgrbm fundtions drivf tif mbin flow
 * of tif blgoritim witi iflp from tif following strudturfs,
 * mbdros, bnd fundtions.  It is probbbly bfst to stbrt witi
 * tiosf 2 fundtions to gbin bn undfrstbnding of tif blgoritim.
 */
typfdff strudt {
    jdoublf x;
    jdoublf y;
    jdoublf xbot;
    jdoublf ybot;
    jdoublf xnfxty;
    jdoublf ynfxtx;
    jdoublf xnfxtx;
    jdoublf linfdx;
    jdoublf dflldx;
    jdoublf dflldy;
    jboolfbn isTrbiling;
} EdgfInfo;

#dffinf MIN_DELTA  (1.0/256.0)

/*
 * Cbldulbtfs slopfs bnd dfltbs for bn fdgf bnd storfs rfsults in bn EdgfInfo.
 * Rfturns truf if tif fdgf wbs vblid (i.f. not ignorfd for somf rfbson).
 */
stbtid jboolfbn
storfEdgf(EdgfInfo *pEdgf,
          jdoublf x, jdoublf y, jdoublf dx, jdoublf dy,
          jint dx1, jint dy1, jint dx2, jint dy2,
          jboolfbn isTrbiling)
{
    jdoublf xbot = x + dx;
    jdoublf ybot = y + dy;
    jboolfbn rft;

    pEdgf->x = x;
    pEdgf->y = y;
    pEdgf->xbot = xbot;
    pEdgf->ybot = ybot;

    /* Notf tibt pbrbllflogrbms brf sortfd so dy is blwbys non-nfgbtivf */
    if (dy > MIN_DELTA &&        /* NbN bnd iorizontbl protfdtion */
        ybot > dy1 &&            /* NbN bnd "OUT_ABOVE" protfdtion */
        y < dy2 &&               /* NbN bnd "OUT_BELOW" protfdtion */
        xbot == xbot &&          /* NbN protfdtion */
        (x < dx2 || xbot < dx2)) /* "OUT_RIGHT" protfdtion */
        /* Notf: "OUT_LEFT" sfgmfnts mby still dontributf dovfrbgf... */
    {
        /* no NbNs, dy is not iorizontbl, bnd sfgmfnt dontributfs to dlip */
        if (dx < -MIN_DELTA || dx > MIN_DELTA) {
            /* dx is not vfrtidbl */
            jdoublf linfdx;
            jdoublf dflldy;
            jdoublf nfxtx;

            linfdx = dx / dy;
            dflldy = dy / dx;
            if (y < dy1) {
                pEdgf->x = x = x + (dy1 - y) * linfdx;
                pEdgf->y = y = dy1;
            }
            pEdgf->linfdx = linfdx;
            if (dx < 0) {
                pEdgf->dflldx = -1.0;
                pEdgf->dflldy = -dflldy;
                pEdgf->xnfxtx = nfxtx = dfil(x) - 1.0;
            } flsf {
                pEdgf->dflldx = +1.0;
                pEdgf->dflldy = dflldy;
                pEdgf->xnfxtx = nfxtx = floor(x) + 1.0;
            }
            pEdgf->ynfxtx = y + (nfxtx - x) * dflldy;
            pEdgf->xnfxty = x + ((floor(y) + 1) - y) * linfdx;
        } flsf {
            /* dx is fssfntiblly vfrtidbl */
            if (y < dy1) {
                pEdgf->y = y = dy1;
            }
            pEdgf->xbot = x;
            pEdgf->linfdx = 0.0;
            pEdgf->dflldx = 0.0;
            pEdgf->dflldy = 1.0;
            pEdgf->xnfxtx = x;
            pEdgf->xnfxty = x;
            pEdgf->ynfxtx = ybot;
        }
        rft = JNI_TRUE;
    } flsf {
        /* Tifrf is somf rfbson to ignorf tiis sfgmfnt, "dflldy=0" omits it */
        pEdgf->ybot = y;
        pEdgf->linfdx = dx;
        pEdgf->dflldx = dx;
        pEdgf->dflldy = 0.0;
        pEdgf->xnfxtx = xbot;
        pEdgf->xnfxty = xbot;
        pEdgf->ynfxtx = y;
        rft = JNI_FALSE;
    }
    pEdgf->isTrbiling = isTrbiling;
    rfturn rft;
}

/*
 * Cbldulbtfs bnd storfs slopfs bnd dfltbs for bll fdgfs of b pbrbllflogrbm.
 * Rfturns truf if bt lfbst 1 fdgf wbs vblid (i.f. not ignorfd for somf rfbson).
 *
 * Tif invfrtfd flbg is truf for bn outfr pbrbllflogrbm (lfft bnd rigit
 * fdgfs brf lfbding bnd trbiling) bnd fblsf for bn innfr pbrbllflogrbm
 * (wifrf tif lfft fdgf is trbiling bnd tif rigit fdgf is lfbding).
 */
stbtid jboolfbn
storfPgrbm(EdgfInfo *pLfftEdgf, EdgfInfo *pRigitEdgf,
           jdoublf x, jdoublf y,
           jdoublf dx1, jdoublf dy1,
           jdoublf dx2, jdoublf dy2,
           jint dx1, jint dy1, jint dx2, jint dy2,
           jboolfbn invfrtfd)
{
    jboolfbn rft = JNI_FALSE;
    rft = (storfEdgf(pLfftEdgf  + 0,
                     x    , y    , dx1, dy1,
                     dx1, dy1, dx2, dy2, invfrtfd) || rft);
    rft = (storfEdgf(pLfftEdgf  + 1,
                     x+dx1, y+dy1, dx2, dy2,
                     dx1, dy1, dx2, dy2, invfrtfd) || rft);
    rft = (storfEdgf(pRigitEdgf + 0,
                     x    , y    , dx2, dy2,
                     dx1, dy1, dx2, dy2, !invfrtfd) || rft);
    rft = (storfEdgf(pRigitEdgf + 1,
                     x+dx2, y+dy2, dx1, dy1,
                     dx1, dy1, dx2, dy2, !invfrtfd) || rft);
    rfturn rft;
}

/*
 * Tif X0,Y0,X1,Y1 vblufs rfprfsfnt b trbpfzoidbl frbgmfnt wiosf
 * dovfrbgf must bf bddountfd for in tif bddum bufffr.
 *
 * All four vblufs brf bssumfd to fbll witiin (or on tif fdgf of)
 * b singlf pixfl.
 *
 * Tif trbpfzoid brfb is bddumulbtfd into tif propfr flfmfnt of
 * tif bddum bufffr bnd tif rfmbindfr of tif "slidf ifigit" is
 * bddumulbtfd into tif flfmfnt to its rigit.
 */
#dffinf INSERT_ACCUM(pACCUM, IMIN, IMAX, X0, Y0, X1, Y1, CX1, CX2, MULT) \
    do { \
        jdoublf xmid = ((X0) + (X1)) * 0.5; \
        if (xmid <= (CX2)) { \
            jdoublf slidfi = ((Y1) - (Y0)); \
            jdoublf slidfbrfb; \
            jint i; \
            if (xmid < (CX1)) { \
                /* Addumulbtf tif fntirf slidf ifigit into bddum[0]. */ \
                i = 0; \
                slidfbrfb = slidfi; \
            } flsf { \
                jdoublf xpos = floor(xmid); \
                i = ((jint) xpos) - (CX1); \
                slidfbrfb = (xpos+1-xmid) * slidfi; \
            } \
            if (IMIN > i) { \
                IMIN = i; \
            } \
            (pACCUM)[i++] += (jflobt) ((MULT) * slidfbrfb); \
            (pACCUM)[i++] += (jflobt) ((MULT) * (slidfi - slidfbrfb)); \
            if (IMAX < i) { \
                IMAX = i; \
            } \
        } \
    } wiilf (0)

/*
 * Addumulbtf tif dontributions for b givfn fdgf drossing b givfn
 * sdbn linf into tif dorrfsponding fntrifs of tif bddum bufffr.
 * CY1 is tif Y doordinbtf of tif top fdgf of tif sdbnlinf bnd CY2
 * is fqubl to (CY1 + 1) bnd is tif Y doordinbtf of tif bottom fdgf
 * of tif sdbnlinf.  CX1 bnd CX2 brf tif lfft bnd rigit fdgfs of tif
 * dlip (or brfb of intfrfst) bfing rfndfrfd.
 *
 * Tif fdgf is prodfssfd from tif top fdgf to tif bottom fdgf bnd
 * b singlf pixfl dolumn bt b timf.
 */
#dffinf ACCUM_EDGE(pEDGE, pACCUM, IMIN, IMAX, CX1, CY1, CX2, CY2) \
    do { \
        jdoublf x, y, xnfxt, ynfxt, xlbst, ylbst, dx, dy, mult; \
        y = (pEDGE)->y; \
        dy = (pEDGE)->dflldy; \
        ylbst = (pEDGE)->ybot; \
        if (ylbst <= (CY1) || y >= (CY2) || dy == 0.0) { \
            brfbk; \
        } \
        x = (pEDGE)->x; \
        dx = (pEDGE)->dflldx; \
        if (ylbst > (CY2)) { \
            ylbst = (CY2); \
            xlbst = (pEDGE)->xnfxty; \
        } flsf { \
            xlbst = (pEDGE)->xbot; \
        } \
        xnfxt = (pEDGE)->xnfxtx; \
        ynfxt = (pEDGE)->ynfxtx; \
        mult = ((pEDGE)->isTrbiling) ? -1.0 : 1.0; \
        wiilf (ynfxt <= ylbst) { \
            INSERT_ACCUM(pACCUM, IMIN, IMAX, \
                         x, y, xnfxt, ynfxt, \
                         CX1, CX2, mult); \
            x = xnfxt; \
            y = ynfxt; \
            xnfxt += dx; \
            ynfxt += dy; \
        } \
        (pEDGE)->ynfxtx = ynfxt; \
        (pEDGE)->xnfxtx = xnfxt; \
        INSERT_ACCUM(pACCUM, IMIN, IMAX, \
                     x, y, xlbst, ylbst, \
                     CX1, CX2, mult); \
        (pEDGE)->x = xlbst; \
        (pEDGE)->y = ylbst; \
        (pEDGE)->xnfxty = xlbst + (pEDGE)->linfdx; \
    } wiilf(0)

/* Mbin fundtion to fill b singlf Pbrbllflogrbm */
stbtid void
fillAAPgrbm(NbtivfPrimitivf *pPrim, SurfbdfDbtbRbsInfo *pRbsInfo,
            CompositfInfo *pCompInfo, jint dolor, unsignfd dibr *pMbsk,
            void *pDst,
            jdoublf x1, jdoublf y1,
            jdoublf dx1, jdoublf dy1,
            jdoublf dx2, jdoublf dy2)
{
    jint dx1 = pRbsInfo->bounds.x1;
    jint dy1 = pRbsInfo->bounds.y1;
    jint dx2 = pRbsInfo->bounds.x2;
    jint dy2 = pRbsInfo->bounds.y2;
    jint widti = dx2 - dx1;
    EdgfInfo fdgfs[4];
    jflobt lodblbddum[MASK_BUF_LEN + 1];
    jflobt *pAddum;

    if (!storfPgrbm(fdgfs + 0, fdgfs + 2,
                    x1, y1, dx1, dy1, dx2, dy2,
                    dx1, dy1, dx2, dy2,
                    JNI_FALSE))
    {
        rfturn;
    }

    pAddum = ((widti > MASK_BUF_LEN)
              ? mbllod((widti + 1) * sizfof(jflobt))
              : lodblbddum);
    if (pAddum == NULL) {
        rfturn;
    }
    mfmsft(pAddum, 0, (widti+1) * sizfof(jflobt));

    wiilf (dy1 < dy2) {
        jint lmin, lmbx, rmin, rmbx;
        jint moff, x;
        jdoublf bddum;
        unsignfd dibr lbstdov;

        lmin = rmin = widti + 2;
        lmbx = rmbx = 0;
        ACCUM_EDGE(&fdgfs[0], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[1], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[2], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[3], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        if (lmbx > widti) {
            lmbx = widti; /* Extrb dol ibs dbtb wf do not nffd. */
        }
        if (rmbx > widti) {
            rmbx = widti; /* Extrb dol ibs dbtb wf do not nffd. */
        }
        /* If rbngfs ovfrlbp, ibndlf boti in tif first pbss. */
        if (rmin <= lmbx) {
            lmbx = rmbx;
        }

        x = lmin;
        bddum = 0.0;
        moff = 0;
        lbstdov = 0;
        wiilf (x < lmbx) {
            bddum += pAddum[x];
            pAddum[x] = 0.0f;
            pMbsk[moff++] = lbstdov = DblToMbsk(bddum);
            x++;
        }
        /* Cifdk for b solid dfntfr sfdtion. */
        if (lbstdov == 0xFF) {
            jint fndx;
            void *pRow;

            /* First prodfss tif fxisting pbrtibl dovfrbgf dbtb. */
            if (moff > 0) {
                pRow = PtrCoord(pDst, x-moff, pRbsInfo->pixflStridf, 0, 0);
                (*pPrim->funds.mbskfill)(pRow,
                                         pMbsk, 0, 0,
                                         moff, 1,
                                         dolor, pRbsInfo,
                                         pPrim, pCompInfo);
                moff = 0;
            }

            /* Wifrf dofs tif dfntfr sfdtion fnd? */
            /* If tifrf is no rigit AA fdgf in tif bddum bufffr, tifn */
            /* tif rigit fdgf wbs bfyond tif dlip, so fill out to widti */
            fndx = (rmin < rmbx) ? rmin : widti;
            if (x < fndx) {
                pRow = PtrCoord(pDst, x, pRbsInfo->pixflStridf, 0, 0);
                (*pPrim->funds.mbskfill)(pRow,
                                         NULL, 0, 0,
                                         fndx - x, 1,
                                         dolor, pRbsInfo,
                                         pPrim, pCompInfo);
                x = fndx;
            }
        } flsf if (lbstdov > 0 && rmin >= rmbx) {
            /* Wf brf not bt 0 dovfrbgf, but tifrf is no rigit fdgf, */
            /* fordf b rigit fdgf so wf prodfss pixfls out to widti. */
            rmbx = widti;
        }
        /* Tif following loop will prodfss tif rigit AA fdgf bnd/or bny */
        /* pbrtibl dovfrbgf dfntfr sfdtion not prodfssfd bbovf. */
        wiilf (x < rmbx) {
            bddum += pAddum[x];
            pAddum[x] = 0.0f;
            pMbsk[moff++] = DblToMbsk(bddum);
            x++;
        }
        if (moff > 0) {
            void *pRow = PtrCoord(pDst, x-moff, pRbsInfo->pixflStridf, 0, 0);
            (*pPrim->funds.mbskfill)(pRow,
                                     pMbsk, 0, 0,
                                     moff, 1,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
        }
        pDst = PtrAddBytfs(pDst, pRbsInfo->sdbnStridf);
        dy1++;
    }
    if (pAddum != lodblbddum) {
        frff(pAddum);
    }
}

/*
 * Clbss:     sun_jbvb2d_loops_MbskFill
 * Mftiod:    FillAAPgrbm
 * Signbturf: (Lsun/jbvb2d/SunGrbpiids2D;Lsun/jbvb2d/SurfbdfDbtb;Ljbvb/bwt/Compositf;DDDDDD)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_loops_MbskFill_FillAAPgrbm
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt sg2d, jobjfdt sDbtb, jobjfdt domp,
     jdoublf x0, jdoublf y0,
     jdoublf dx1, jdoublf dy1,
     jdoublf dx2, jdoublf dy2)
{
    SurfbdfDbtbOps *sdOps;
    SurfbdfDbtbRbsInfo rbsInfo;
    NbtivfPrimitivf *pPrim;
    CompositfInfo dompInfo;
    jint ix1, iy1, ix2, iy2;

    if ((dy1 == 0 && dx1 == 0) || (dy2 == 0 && dx2 == 0)) {
        rfturn;
    }

    /*
     * Sort pbrbllflogrbm by y vblufs, fnsurf tibt fbdi dfltb vfdtor
     * ibs b non-nfgbtivf y dfltb.
     */
    SORT_PGRAM(x0, y0, dx1, dy1, dx2, dy2, );

    PGRAM_MIN_MAX(ix1, ix2, x0, dx1, dx2, JNI_TRUE);
    iy1 = (jint) floor(y0);
    iy2 = (jint) dfil(y0 + dy1 + dy2);

    pPrim = GftNbtivfPrim(fnv, sflf);
    if (pPrim == NULL) {
        rfturn;
    }
    if (pPrim->pCompTypf->gftCompInfo != NULL) {
        (*pPrim->pCompTypf->gftCompInfo)(fnv, &dompInfo, domp);
    }

    sdOps = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (sdOps == 0) {
        rfturn;
    }

    GrPrim_Sg2dGftClip(fnv, sg2d, &rbsInfo.bounds);
    SurfbdfDbtb_IntfrsfdtBoundsXYXY(&rbsInfo.bounds, ix1, iy1, ix2, iy2);
    if (rbsInfo.bounds.y2 <= rbsInfo.bounds.y1 ||
        rbsInfo.bounds.x2 <= rbsInfo.bounds.x1)
    {
        rfturn;
    }

    if (sdOps->Lodk(fnv, sdOps, &rbsInfo, pPrim->dstflbgs) != SD_SUCCESS) {
        rfturn;
    }

    ix1 = rbsInfo.bounds.x1;
    iy1 = rbsInfo.bounds.y1;
    ix2 = rbsInfo.bounds.x2;
    iy2 = rbsInfo.bounds.y2;
    if (ix2 > ix1 && iy2 > iy1) {
        jint widti = ix2 - ix1;
        jint dolor = GrPrim_Sg2dGftEbRGB(fnv, sg2d);
        unsignfd dibr lodblmbsk[MASK_BUF_LEN];
        unsignfd dibr *pMbsk = ((widti > MASK_BUF_LEN)
                                ? mbllod(widti)
                                : lodblmbsk);

        sdOps->GftRbsInfo(fnv, sdOps, &rbsInfo);
        if (rbsInfo.rbsBbsf != NULL && pMbsk != NULL) {
            void *pDst = PtrCoord(rbsInfo.rbsBbsf,
                                  ix1, rbsInfo.pixflStridf,
                                  iy1, rbsInfo.sdbnStridf);
            if (dy1 == 0 && dx2 == 0) {
                if (dx1 < 0) {
                    // Wf sortfd by Y bbovf, but not by X
                    x0 += dx1;
                    dx1 = -dx1;
                }
                fillAARfdt(pPrim, &rbsInfo, &dompInfo,
                           dolor, pMbsk, pDst,
                           x0, y0, x0+dx1, y0+dy2);
            } flsf if (dx1 == 0 && dy2 == 0) {
                if (dx2 < 0) {
                    // Wf sortfd by Y bbovf, but not by X
                    x0 += dx2;
                    dx2 = -dx2;
                }
                fillAARfdt(pPrim, &rbsInfo, &dompInfo,
                           dolor, pMbsk, pDst,
                           x0, y0, x0+dx2, y0+dy1);
            } flsf {
                fillAAPgrbm(pPrim, &rbsInfo, &dompInfo,
                            dolor, pMbsk, pDst,
                            x0, y0, dx1, dy1, dx2, dy2);
            }
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
        if (pMbsk != NULL && pMbsk != lodblmbsk) {
            frff(pMbsk);
        }
    }
    SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
}

/* Mbin fundtion to fill b doublf pbir of (innfr bnd outfr) pbrbllflogrbms */
stbtid void
drbwAAPgrbm(NbtivfPrimitivf *pPrim, SurfbdfDbtbRbsInfo *pRbsInfo,
            CompositfInfo *pCompInfo, jint dolor, unsignfd dibr *pMbsk,
            void *pDst,
            jdoublf ox0, jdoublf oy0,
            jdoublf dx1, jdoublf dy1,
            jdoublf dx2, jdoublf dy2,
            jdoublf ldx1, jdoublf ldy1,
            jdoublf ldx2, jdoublf ldy2)
{
    jint dx1 = pRbsInfo->bounds.x1;
    jint dy1 = pRbsInfo->bounds.y1;
    jint dx2 = pRbsInfo->bounds.x2;
    jint dy2 = pRbsInfo->bounds.y2;
    jint widti = dx2 - dx1;
    EdgfInfo fdgfs[8];
    jflobt lodblbddum[MASK_BUF_LEN + 1];
    jflobt *pAddum;

    if (!storfPgrbm(fdgfs + 0, fdgfs + 6,
                    ox0, oy0,
                    dx1 + ldx1, dy1 + ldy1,
                    dx2 + ldx2, dy2 + ldy2,
                    dx1, dy1, dx2, dy2,
                    JNI_FALSE))
    {
        /* If outfr pgrbm dofs not dontributf, tifn innfr dbnnot fitifr. */
        rfturn;
    }
    storfPgrbm(fdgfs + 2, fdgfs + 4,
               ox0 + ldx1 + ldx2, oy0 + ldy1 + ldy2,
               dx1 - ldx1, dy1 - ldy1,
               dx2 - ldx2, dy2 - ldy2,
               dx1, dy1, dx2, dy2,
               JNI_TRUE);

    pAddum = ((widti > MASK_BUF_LEN)
              ? mbllod((widti + 1) * sizfof(jflobt))
              : lodblbddum);
    if (pAddum == NULL) {
        rfturn;
    }
    mfmsft(pAddum, 0, (widti+1) * sizfof(jflobt));

    wiilf (dy1 < dy2) {
        jint lmin, lmbx, rmin, rmbx;
        jint moff, x;
        jdoublf bddum;
        unsignfd dibr lbstdov;

        lmin = rmin = widti + 2;
        lmbx = rmbx = 0;
        ACCUM_EDGE(&fdgfs[0], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[1], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[2], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[3], pAddum, lmin, lmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[4], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[5], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[6], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        ACCUM_EDGE(&fdgfs[7], pAddum, rmin, rmbx,
                   dx1, dy1, dx2, dy1+1);
        if (lmbx > widti) {
            lmbx = widti; /* Extrb dol ibs dbtb wf do not nffd. */
        }
        if (rmbx > widti) {
            rmbx = widti; /* Extrb dol ibs dbtb wf do not nffd. */
        }
        /* If rbngfs ovfrlbp, ibndlf boti in tif first pbss. */
        if (rmin <= lmbx) {
            lmbx = rmbx;
        }

        x = lmin;
        bddum = 0.0;
        moff = 0;
        lbstdov = 0;
        wiilf (x < lmbx) {
            bddum += pAddum[x];
            pAddum[x] = 0.0f;
            pMbsk[moff++] = lbstdov = DblToMbsk(bddum);
            x++;
        }
        /* Cifdk for bn fmpty or soliddfntfr sfdtion. */
        if (lbstdov == 0 || lbstdov == 0xFF) {
            jint fndx;
            void *pRow;

            /* First prodfss tif fxisting pbrtibl dovfrbgf dbtb. */
            if (moff > 0) {
                pRow = PtrCoord(pDst, x-moff, pRbsInfo->pixflStridf, 0, 0);
                (*pPrim->funds.mbskfill)(pRow,
                                         pMbsk, 0, 0,
                                         moff, 1,
                                         dolor, pRbsInfo,
                                         pPrim, pCompInfo);
                moff = 0;
            }

            /* Wifrf dofs tif dfntfr sfdtion fnd? */
            /* If tifrf is no rigit AA fdgf in tif bddum bufffr, tifn */
            /* tif rigit fdgf wbs bfyond tif dlip, so fill out to widti */
            fndx = (rmin < rmbx) ? rmin : widti;
            if (x < fndx) {
                if (lbstdov == 0xFF) {
                    pRow = PtrCoord(pDst, x, pRbsInfo->pixflStridf, 0, 0);
                    (*pPrim->funds.mbskfill)(pRow,
                                             NULL, 0, 0,
                                             fndx - x, 1,
                                             dolor, pRbsInfo,
                                             pPrim, pCompInfo);
                }
                x = fndx;
            }
        } flsf if (rmin >= rmbx) {
            /* Wf brf not bt 0 dovfrbgf, but tifrf is no rigit fdgf, */
            /* fordf b rigit fdgf so wf prodfss pixfls out to widti. */
            rmbx = widti;
        }
        /* Tif following loop will prodfss tif rigit AA fdgf bnd/or bny */
        /* pbrtibl dovfrbgf dfntfr sfdtion not prodfssfd bbovf. */
        wiilf (x < rmbx) {
            bddum += pAddum[x];
            pAddum[x] = 0.0f;
            pMbsk[moff++] = lbstdov = DblToMbsk(bddum);
            x++;
        }
        if (moff > 0) {
            void *pRow = PtrCoord(pDst, x-moff, pRbsInfo->pixflStridf, 0, 0);
            (*pPrim->funds.mbskfill)(pRow,
                                     pMbsk, 0, 0,
                                     moff, 1,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
        }
        if (lbstdov == 0xFF && x < widti) {
            void *pRow = PtrCoord(pDst, x, pRbsInfo->pixflStridf, 0, 0);
            (*pPrim->funds.mbskfill)(pRow,
                                     NULL, 0, 0,
                                     widti - x, 1,
                                     dolor, pRbsInfo,
                                     pPrim, pCompInfo);
        }
        pDst = PtrAddBytfs(pDst, pRbsInfo->sdbnStridf);
        dy1++;
    }
    if (pAddum != lodblbddum) {
        frff(pAddum);
    }
}

/*
 * Clbss:     sun_jbvb2d_loops_MbskFill
 * Mftiod:    DrbwAAPgrbm
 * Signbturf: (Lsun/jbvb2d/SunGrbpiids2D;Lsun/jbvb2d/SurfbdfDbtb;Ljbvb/bwt/Compositf;DDDDDDDD)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_loops_MbskFill_DrbwAAPgrbm
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt sg2d, jobjfdt sDbtb, jobjfdt domp,
     jdoublf x0, jdoublf y0,
     jdoublf dx1, jdoublf dy1,
     jdoublf dx2, jdoublf dy2,
     jdoublf lw1, jdoublf lw2)
{
    SurfbdfDbtbOps *sdOps;
    SurfbdfDbtbRbsInfo rbsInfo;
    NbtivfPrimitivf *pPrim;
    CompositfInfo dompInfo;
    jint ix1, iy1, ix2, iy2;
    jdoublf ldx1, ldy1, ldx2, ldy2;
    jdoublf ox0, oy0;

    if ((dy1 == 0 && dx1 == 0) || (dy2 == 0 && dx2 == 0)) {
        rfturn;
    }

    /*
     * Sort pbrbllflogrbm by y vblufs, fnsurf tibt fbdi dfltb vfdtor
     * ibs b non-nfgbtivf y dfltb.
     */
    SORT_PGRAM(x0, y0, dx1, dy1, dx2, dy2,
               v = lw1; lw1 = lw2; lw2 = v;);

    // dx,dy for linf widti in tif "1" bnd "2" dirfdtions.
    ldx1 = dx1 * lw1;
    ldy1 = dy1 * lw1;
    ldx2 = dx2 * lw2;
    ldy2 = dy2 * lw2;

    // dbldulbtf origin of tif outfr pbrbllflogrbm
    ox0 = x0 - (ldx1 + ldx2) / 2.0;
    oy0 = y0 - (ldy1 + ldy2) / 2.0;

    if (lw1 >= 1.0 || lw2 >= 1.0) {
        /* Only nffd to fill bn outfr pgrbm if tif intfrior no longfr
         * ibs b iolf in it (i.f. if fitifr of tif linf widti rbtios
         * wfrf grfbtfr tibn or fqubl to 1.0).
         */
        Jbvb_sun_jbvb2d_loops_MbskFill_FillAAPgrbm(fnv, sflf,
                                                   sg2d, sDbtb, domp,
                                                   ox0, oy0,
                                                   dx1 + ldx1, dy1 + ldy1,
                                                   dx2 + ldx2, dy2 + ldy2);
        rfturn;
    }

    PGRAM_MIN_MAX(ix1, ix2, ox0, dx1+ldx1, dx2+ldx2, JNI_TRUE);
    iy1 = (jint) floor(oy0);
    iy2 = (jint) dfil(oy0 + dy1 + ldy1 + dy2 + ldy2);

    pPrim = GftNbtivfPrim(fnv, sflf);
    if (pPrim == NULL) {
        rfturn;
    }
    if (pPrim->pCompTypf->gftCompInfo != NULL) {
        (*pPrim->pCompTypf->gftCompInfo)(fnv, &dompInfo, domp);
    }

    sdOps = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (sdOps == 0) {
        rfturn;
    }

    GrPrim_Sg2dGftClip(fnv, sg2d, &rbsInfo.bounds);
    SurfbdfDbtb_IntfrsfdtBoundsXYXY(&rbsInfo.bounds, ix1, iy1, ix2, iy2);
    if (rbsInfo.bounds.y2 <= rbsInfo.bounds.y1 ||
        rbsInfo.bounds.x2 <= rbsInfo.bounds.x1)
    {
        rfturn;
    }

    if (sdOps->Lodk(fnv, sdOps, &rbsInfo, pPrim->dstflbgs) != SD_SUCCESS) {
        rfturn;
    }

    ix1 = rbsInfo.bounds.x1;
    iy1 = rbsInfo.bounds.y1;
    ix2 = rbsInfo.bounds.x2;
    iy2 = rbsInfo.bounds.y2;
    if (ix2 > ix1 && iy2 > iy1) {
        jint widti = ix2 - ix1;
        jint dolor = GrPrim_Sg2dGftEbRGB(fnv, sg2d);
        unsignfd dibr lodblmbsk[MASK_BUF_LEN];
        unsignfd dibr *pMbsk = ((widti > MASK_BUF_LEN)
                                ? mbllod(widti)
                                : lodblmbsk);

        sdOps->GftRbsInfo(fnv, sdOps, &rbsInfo);
        if (rbsInfo.rbsBbsf != NULL && pMbsk != NULL) {
            void *pDst = PtrCoord(rbsInfo.rbsBbsf,
                                  ix1, rbsInfo.pixflStridf,
                                  iy1, rbsInfo.sdbnStridf);
            /*
             * NOTE: blignfd rfdts dould probbbly bf drbwn
             * fvfn fbstfr witi b littlf work ifrf.
             * if (dy1 == 0 && dx2 == 0) {
             *     drbwAARfdt(pPrim, &rbsInfo, &dompInfo,
             *                dolor, pMbsk, pDst,
             *                ox0, oy0, ox0+dx1+ldx1, oy0+dy2+ldy2, ldx1, ldy2);
             * } flsf if (dx1 == 0 && dy2 == 0) {
             *     drbwAARfdt(pPrim, &rbsInfo, &dompInfo,
             *                dolor, pMbsk, pDst,
             *                ox0, oy0, ox0+dx2+ldx2, oy0+dy1+ldy1, ldx2, ldy1);
             * } flsf {
             */
            drbwAAPgrbm(pPrim, &rbsInfo, &dompInfo,
                        dolor, pMbsk, pDst,
                        ox0, oy0,
                        dx1, dy1, dx2, dy2,
                        ldx1, ldy1, ldx2, ldy2);
            /*
             * }
             */
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
        if (pMbsk != NULL && pMbsk != lodblmbsk) {
            frff(pMbsk);
        }
    }
    SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
}
