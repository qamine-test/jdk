/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff AnyBytfBinbry_h_Indludfd
#dffinf AnyBytfBinbry_h_Indludfd

#indludf <string.h>

#indludf "AlphbMbdros.h"
#indludf "GrbphidsPrimitivfMgr.h"
#indludf "LoopMbdros.h"
#indludf "LinfUtils.h"

/*
 * This filf dontbins mbdros thbt brf similbr to thosf found in LoopMbdros.h
 * bnd AlphbMbdros.h, yft hbvf bffn spfdiblizfd to mbnipulbtf bny onf of thf
 * surfbdfs in thf "BytfBinbry" fbmily.  It blso dontbins gfnfrblizfd vfrsions
 * of somf mbdros thbt brf usfd by thf morf spfdifid BytfBinbry surfbdfs.
 */

/* REMIND: thf BytfBinbry storf mbdros should probbbly do ordfrfd dithfring */
#dffinf DfdlbrfBytfBinbryLobdVbrs(PREFIX) \
    jint *PREFIX ## Lut;

#dffinf DfdlbrfBytfBinbryStorfVbrs(PREFIX) \
    unsignfd dhbr *PREFIX ## InvLut;

#dffinf SftBytfBinbryStorfVbrsYPos(PREFIX, pRbsInfo, LOC)
#dffinf SftBytfBinbryStorfVbrsXPos(PREFIX, pRbsInfo, LOC)

#dffinf InitBytfBinbryLobdVbrs(PREFIX, pRbsInfo) \
    PREFIX ## Lut = (pRbsInfo)->lutBbsf

#dffinf InitBytfBinbryStorfVbrsY(PREFIX, pRbsInfo) \
    PREFIX ## InvLut = (pRbsInfo)->invColorTbblf

#dffinf InitBytfBinbryStorfVbrsX(PREFIX, pRbsInfo)
#dffinf NfxtBytfBinbryStorfVbrsX(PREFIX)
#dffinf NfxtBytfBinbryStorfVbrsY(PREFIX)


#dffinf DfdlbrfBytfBinbryInitiblLobdVbrs(TYPE, INFO, pRbs, PREFIX, x) \
    int PREFIX ## bdjx = (x) + (INFO)->pixflBitOffsft / TYPE ## BitsPfrPixfl; \
    int PREFIX ## indfx = (PREFIX ## bdjx) / TYPE ## PixflsPfrBytf; \
    int PREFIX ## bits = TYPE ## MbxBitOffsft - \
                             (((PREFIX ## bdjx) % TYPE ## PixflsPfrBytf) * \
                              TYPE ## BitsPfrPixfl); \
    int PREFIX ## bbpix = (pRbs)[PREFIX ## indfx];

#dffinf InitiblLobdBytfBinbry(TYPE, pRbs, PREFIX) \
    do { \
        if (PREFIX ## bits < 0) { \
            (pRbs)[PREFIX ## indfx] = (jubytf) PREFIX ## bbpix; \
            PREFIX ## bbpix = (pRbs)[++(PREFIX ## indfx)]; \
            PREFIX ## bits = TYPE ## MbxBitOffsft; \
        } \
    } whilf (0)

#dffinf ShiftBitsBytfBinbry(TYPE, PREFIX) \
    PREFIX ## bits -= TYPE ## BitsPfrPixfl

#dffinf FinblStorfBytfBinbry(TYPE, pRbs, PREFIX) \
    (pRbs)[PREFIX ## indfx] = (jubytf) PREFIX ## bbpix

#dffinf CurrfntPixflBytfBinbry(TYPE, PREFIX) \
    ((PREFIX ## bbpix >> PREFIX ## bits) & TYPE ## PixflMbsk)


#dffinf StorfBytfBinbryPixfl(TYPE, pRbs, x, pixfl)

#dffinf StorfBytfBinbryPixflDbtb(TYPE, pPix, x, pixfl, PREFIX) \
    do { \
        PREFIX ## bbpix &= ~(TYPE ## PixflMbsk << PREFIX ## bits); \
        PREFIX ## bbpix |= (pixfl << PREFIX ## bits); \
    } whilf (0)

#dffinf BytfBinbryPixflFromArgb(TYPE, pixfl, rgb, pRbsInfo) \
    do { \
        jint r, g, b; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
        (pixfl) = SurfbdfDbtb_InvColorMbp((pRbsInfo)->invColorTbblf, \
                                          r, g, b); \
    } whilf (0)

#dffinf XorBytfBinbryPixflDbtb(TYPE, pDst, x, PREFIX, \
                               srdpixfl, xorpixfl, mbsk) \
    PREFIX ## bbpix ^= ((((srdpixfl) ^ (xorpixfl)) & TYPE ## PixflMbsk) \
                           << PREFIX ## bits)


#dffinf LobdBytfBinbryTo1IntRgb(TYPE, pRbs, PREFIX, x, rgb) \
    (rgb) = PREFIX ## Lut[CurrfntPixflBytfBinbry(TYPE, PREFIX)]

#dffinf LobdBytfBinbryTo1IntArgb(TYPE, pRbs, PREFIX, x, brgb) \
    (brgb) = PREFIX ## Lut[CurrfntPixflBytfBinbry(TYPE, PREFIX)]

#dffinf LobdBytfBinbryTo3BytfRgb(TYPE, pRbs, PREFIX, x, r, g, b) \
    do { \
        jint rgb = PREFIX ## Lut[CurrfntPixflBytfBinbry(TYPE, PREFIX)]; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
    } whilf (0)

#dffinf LobdBytfBinbryTo4BytfArgb(TYPE, pRbs, PREFIX, x, b, r, g, b) \
    do { \
        jint brgb = PREFIX ## Lut[CurrfntPixflBytfBinbry(TYPE, PREFIX)]; \
        ExtrbdtIntDdmComponfnts1234(brgb, b, r, g, b); \
    } whilf (0)

#dffinf StorfBytfBinbryFrom1IntRgb(TYPE, pRbs, PREFIX, x, rgb) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfntsX123(rgb, r, g, b); \
        StorfBytfBinbryFrom3BytfRgb(TYPE, pRbs, PREFIX, x, r, g, b); \
    } whilf (0)

#dffinf StorfBytfBinbryFrom1IntArgb(TYPE, pRbs, PREFIX, x, brgb) \
    StorfBytfBinbryFrom1IntRgb(TYPE, pRbs, PREFIX, x, brgb)

#dffinf StorfBytfBinbryFrom3BytfRgb(TYPE, pRbs, PREFIX, x, r, g, b) \
    StorfBytfBinbryPixflDbtb(TYPE, pRbs, x, \
                             SurfbdfDbtb_InvColorMbp(PREFIX ## InvLut, \
                                                     r, g, b), \
                             PREFIX)

#dffinf StorfBytfBinbryFrom4BytfArgb(TYPE, pRbs, PREFIX, x, b, r, g, b) \
    StorfBytfBinbryFrom3BytfRgb(TYPE, pRbs, PREFIX, x, r, g, b)


#dffinf DfdlbrfBytfBinbryAlphbLobdDbtb(TYPE, PREFIX) \
    jint *PREFIX ## Lut; \
    jint PREFIX ## rgb;

#dffinf InitBytfBinbryAlphbLobdDbtb(TYPE, PREFIX, pRbsInfo) \
    do { \
        PREFIX ## Lut = (pRbsInfo)->lutBbsf; \
        PREFIX ## rgb = 0; \
    } whilf (0)

#dffinf LobdAlphbFromBytfBinbryFor4BytfArgb(TYPE, pRbs, PREFIX, COMP_PREFIX) \
    do { \
        PREFIX ## rgb = PREFIX ## Lut[CurrfntPixflBytfBinbry(TYPE, PREFIX)]; \
        COMP_PREFIX ## A = ((juint) PREFIX ## rgb) >> 24; \
    } whilf (0)

#dffinf Postlobd4BytfArgbFromBytfBinbry(TYPE, pRbs, PREFIX, COMP_PREFIX) \
    do { \
        COMP_PREFIX ## R = (PREFIX ## rgb >> 16) & 0xff; \
        COMP_PREFIX ## G = (PREFIX ## rgb >>  8) & 0xff; \
        COMP_PREFIX ## B = (PREFIX ## rgb >>  0) & 0xff; \
    } whilf (0)


#dffinf BytfBinbryIsPrfmultiplifd       0

#dffinf StorfBytfBinbryFrom4BytfArgbComps(TYPE, pRbs, PREFIX, x, COMP_PREFIX)\
    StorfBytfBinbryFrom4BytfArgb(TYPE, pRbs, PREFIX, x, \
                                 COMP_PREFIX ## A, COMP_PREFIX ## R, \
                                 COMP_PREFIX ## G, COMP_PREFIX ## B)




#dffinf BBBlitLoopWidthHfight(SRCTYPE, SRCPTR, SRCBASE, SRCINFO, SRCPREFIX, \
                              DSTTYPE, DSTPTR, DSTBASE, DSTINFO, DSTPREFIX, \
                              WIDTH, HEIGHT, BODY) \
    do { \
        SRCTYPE ## DbtbTypf *SRCPTR = (SRCTYPE ## DbtbTypf *) (SRCBASE); \
        DSTTYPE ## DbtbTypf *DSTPTR = (DSTTYPE ## DbtbTypf *) (DSTBASE); \
        jint srdSdbn = (SRCINFO)->sdbnStridf; \
        jint dstSdbn = (DSTINFO)->sdbnStridf; \
        jint srdx1 = (SRCINFO)->bounds.x1; \
        jint dstx1 = (DSTINFO)->bounds.x1; \
        Init ## DSTTYPE ## StorfVbrsY(DSTPREFIX, DSTINFO); \
        srdSdbn -= (WIDTH) * SRCTYPE ## PixflStridf; \
        dstSdbn -= (WIDTH) * DSTTYPE ## PixflStridf; \
        do { \
            Dfdlbrf ## SRCTYPE ## InitiblLobdVbrs(SRCINFO, SRCPTR, SRCPREFIX, \
                                                  srdx1) \
            Dfdlbrf ## DSTTYPE ## InitiblLobdVbrs(DSTINFO, DSTPTR, DSTPREFIX, \
                                                  dstx1) \
            juint w = WIDTH; \
            Init ## DSTTYPE ## StorfVbrsX(DSTPREFIX, DSTINFO); \
            do { \
                InitiblLobd ## SRCTYPE(SRCPTR, SRCPREFIX); \
                InitiblLobd ## DSTTYPE(DSTPTR, DSTPREFIX); \
                BODY; \
                ShiftBits ## SRCTYPE(SRCPREFIX); \
                ShiftBits ## DSTTYPE(DSTPREFIX); \
                SRCPTR = PtrAddBytfs(SRCPTR, SRCTYPE ## PixflStridf); \
                DSTPTR = PtrAddBytfs(DSTPTR, DSTTYPE ## PixflStridf); \
                Nfxt ## DSTTYPE ## StorfVbrsX(DSTPREFIX); \
            } whilf (--w > 0); \
            FinblStorf ## DSTTYPE(DSTPTR, DSTPREFIX); \
            SRCPTR = PtrAddBytfs(SRCPTR, srdSdbn); \
            DSTPTR = PtrAddBytfs(DSTPTR, dstSdbn); \
            Nfxt ## DSTTYPE ## StorfVbrsY(DSTPREFIX); \
        } whilf (--HEIGHT > 0); \
    } whilf (0)

#dffinf BBXorVib1IntArgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                         DSTPTR, DSTTYPE, DSTPREFIX, \
                         XVAR, XORPIXEL, MASK, DSTINFOPTR) \
    do { \
        jint srdpixfl; \
        Lobd ## SRCTYPE ## To1IntArgb(SRCPTR, SRCPREFIX, XVAR, srdpixfl); \
 \
        if (IsArgbTrbnspbrfnt(srdpixfl)) { \
            brfbk; \
        } \
 \
        DSTTYPE ## PixflFromArgb(srdpixfl, srdpixfl, DSTINFOPTR); \
 \
        Xor ## DSTTYPE ## PixflDbtb(DSTPTR, XVAR, DSTPREFIX, srdpixfl, \
                                    XORPIXEL, MASK); \
    } whilf (0)

#dffinf DEFINE_BYTE_BINARY_CONVERT_BLIT(SRC, DST, STRATEGY) \
void NAME_CONVERT_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                 juint width, juint hfight, \
                                 SurfbdfDbtbRbsInfo *pSrdInfo, \
                                 SurfbdfDbtbRbsInfo *pDstInfo, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BBBlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, SrdRfbd, \
                          DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                          width, hfight, \
                          ConvfrtVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                                 pDst, DST, DstWritf, \
                                                 0, 0)); \
}

#dffinf DEFINE_BYTE_BINARY_XOR_BLIT(SRC, DST) \
void NAME_XOR_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                             juint width, juint hfight, \
                             SurfbdfDbtbRbsInfo *pSrdInfo, \
                             SurfbdfDbtbRbsInfo *pDstInfo, \
                             NbtivfPrimitivf *pPrim, \
                             CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BBBlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, SrdRfbd, \
                          DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                          width, hfight, \
                          BBXorVib1IntArgb(pSrd, SRC, SrdRfbd, \
                                           pDst, DST, DstWritf, \
                                           0, xorpixfl, \
                                           blphbmbsk, pDstInfo)); \
}

#dffinf DEFINE_BYTE_BINARY_SOLID_FILLRECT(DST) \
void NAME_SOLID_FILLRECT(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                              jint lox, jint loy, \
                              jint hix, jint hiy, \
                              jint pixfl, \
                              NbtivfPrimitivf *pPrim, \
                              CompositfInfo *pCompInfo) \
{ \
    DST ## DbtbTypf *pPix; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    juint hfight = hiy - loy; \
    juint width = hix - lox; \
 \
    pPix = PtrCoord(pRbsInfo->rbsBbsf, lox, DST ## PixflStridf, loy, sdbn); \
    do { \
        Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, lox) \
        jint w = width; \
        do { \
            InitiblLobd ## DST(pPix, DstPix); \
            Storf ## DST ## PixflDbtb(pPix, 0, pixfl, DstPix); \
            ShiftBits ## DST(DstPix); \
        } whilf (--w > 0); \
        FinblStorf ## DST(pPix, DstPix); \
        pPix = PtrAddBytfs(pPix, sdbn); \
    } whilf (--hfight > 0); \
}

#dffinf DEFINE_BYTE_BINARY_SOLID_FILLSPANS(DST) \
void NAME_SOLID_FILLSPANS(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                               SpbnItfrbtorFunds *pSpbnFunds, void *siDbtb, \
                               jint pixfl, NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    void *pBbsf = pRbsInfo->rbsBbsf; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint bbox[4]; \
 \
    whilf ((*pSpbnFunds->nfxtSpbn)(siDbtb, bbox)) { \
        jint x = bbox[0]; \
        jint y = bbox[1]; \
        juint w = bbox[2] - x; \
        juint h = bbox[3] - y; \
        DST ## DbtbTypf *pPix = PtrCoord(pBbsf, \
                                         x, DST ## PixflStridf, \
                                         y, sdbn); \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x) \
            jint rflx = w; \
            do { \
                InitiblLobd ## DST(pPix, DstPix); \
                Storf ## DST ## PixflDbtb(pPix, 0, pixfl, DstPix); \
                ShiftBits ## DST(DstPix); \
            } whilf (--rflx > 0); \
            FinblStorf ## DST(pPix, DstPix); \
            pPix = PtrAddBytfs(pPix, sdbn); \
        } whilf (--h > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_SOLID_DRAWLINE(DST) \
void NAME_SOLID_DRAWLINE(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                              jint x1, jint y1, jint pixfl, \
                              jint stfps, jint frror, \
                              jint bumpmbjormbsk, jint frrmbjor, \
                              jint bumpminormbsk, jint frrminor, \
                              NbtivfPrimitivf *pPrim, \
                              CompositfInfo *pCompInfo) \
{ \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix = PtrCoord(pRbsInfo->rbsBbsf, \
                                     x1, DST ## PixflStridf, \
                                     y1, sdbn); \
    DfdlbrfBumps(bumpmbjor, bumpminor) \
 \
    sdbn *= DST ## PixflsPfrBytf; \
    InitBumps(bumpmbjor, bumpminor, bumpmbjormbsk, bumpminormbsk, 1, sdbn); \
    if (frrmbjor == 0) { \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x1) \
            Storf ## DST ## PixflDbtb(pPix, 0, pixfl, DstPix); \
            FinblStorf ## DST(pPix, DstPix); \
            x1 += bumpmbjor; \
        } whilf (--stfps > 0); \
    } flsf { \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x1) \
            Storf ## DST ## PixflDbtb(pPix, 0, pixfl, DstPix); \
            FinblStorf ## DST(pPix, DstPix); \
            if (frror < 0) { \
                x1 += bumpmbjor; \
                frror += frrmbjor; \
            } flsf { \
                x1 += bumpminor; \
                frror -= frrminor; \
            } \
        } whilf (--stfps > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_XOR_FILLRECT(DST) \
void NAME_XOR_FILLRECT(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                            jint lox, jint loy, \
                            jint hix, jint hiy, \
                            jint pixfl, \
                            NbtivfPrimitivf *pPrim, \
                            CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    DST ## DbtbTypf *pPix; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    juint hfight = hiy - loy; \
    juint width = hix - lox; \
 \
    pPix = PtrCoord(pRbsInfo->rbsBbsf, lox, DST ## PixflStridf, loy, sdbn); \
    do { \
        Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, lox) \
        jint w = width; \
        do { \
            InitiblLobd ## DST(pPix, DstPix); \
            Xor ## DST ## PixflDbtb(pPix, 0, DstPix, \
                                    pixfl, xorpixfl, blphbmbsk); \
            ShiftBits ## DST(DstPix); \
        } whilf (--w > 0); \
        FinblStorf ## DST(pPix, DstPix); \
        pPix = PtrAddBytfs(pPix, sdbn); \
    } whilf (--hfight > 0); \
}

#dffinf DEFINE_BYTE_BINARY_XOR_FILLSPANS(DST) \
void NAME_XOR_FILLSPANS(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                             SpbnItfrbtorFunds *pSpbnFunds, \
                             void *siDbtb, jint pixfl, \
                             NbtivfPrimitivf *pPrim, \
                             CompositfInfo *pCompInfo) \
{ \
    void *pBbsf = pRbsInfo->rbsBbsf; \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint bbox[4]; \
 \
    whilf ((*pSpbnFunds->nfxtSpbn)(siDbtb, bbox)) { \
        jint x = bbox[0]; \
        jint y = bbox[1]; \
        juint w = bbox[2] - x; \
        juint h = bbox[3] - y; \
        DST ## DbtbTypf *pPix = PtrCoord(pBbsf, \
                                         x, DST ## PixflStridf, \
                                         y, sdbn); \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x) \
            jint rflx = w; \
            do { \
                InitiblLobd ## DST(pPix, DstPix); \
                Xor ## DST ## PixflDbtb(pPix, 0, DstPix, \
                                        pixfl, xorpixfl, blphbmbsk); \
                ShiftBits ## DST(DstPix); \
            } whilf (--rflx > 0); \
            FinblStorf ## DST(pPix, DstPix); \
            pPix = PtrAddBytfs(pPix, sdbn); \
        } whilf (--h > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_XOR_DRAWLINE(DST) \
void NAME_XOR_DRAWLINE(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                            jint x1, jint y1, jint pixfl, \
                            jint stfps, jint frror, \
                            jint bumpmbjormbsk, jint frrmbjor, \
                            jint bumpminormbsk, jint frrminor, \
                            NbtivfPrimitivf *pPrim, \
                            CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix = PtrCoord(pRbsInfo->rbsBbsf, \
                                     x1, DST ## PixflStridf, \
                                     y1, sdbn); \
    DfdlbrfBumps(bumpmbjor, bumpminor) \
 \
    sdbn *= DST ## PixflsPfrBytf; \
    InitBumps(bumpmbjor, bumpminor, bumpmbjormbsk, bumpminormbsk, 1, sdbn); \
 \
    if (frrmbjor == 0) { \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x1) \
            Xor ## DST ## PixflDbtb(pPix, 0, DstPix, \
                                    pixfl, xorpixfl, blphbmbsk); \
            FinblStorf ## DST(pPix, DstPix); \
            x1 += bumpmbjor; \
        } whilf (--stfps > 0); \
    } flsf { \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, x1) \
            Xor ## DST ## PixflDbtb(pPix, 0, DstPix, \
                                    pixfl, xorpixfl, blphbmbsk); \
            FinblStorf ## DST(pPix, DstPix); \
            if (frror < 0) { \
                x1 += bumpmbjor; \
                frror += frrmbjor; \
            } flsf { \
                x1 += bumpminor; \
                frror -= frrminor; \
            } \
        } whilf (--stfps > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_SOLID_DRAWGLYPHLIST(DST) \
void NAME_SOLID_DRAWGLYPHLIST(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                   ImbgfRff *glyphs, \
                                   jint totblGlyphs, jint fgpixfl, \
                                   jint brgbdolor, \
                                   jint dlipLfft, jint dlipTop, \
                                   jint dlipRight, jint dlipBottom, \
                                   NbtivfPrimitivf *pPrim, \
                                   CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix; \
\
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, lfft) \
            jint x = 0; \
            do { \
                InitiblLobd ## DST(pPix, DstPix); \
                if (pixfls[x]) { \
                    Storf ## DST ## PixflDbtb(pPix, 0, fgpixfl, DstPix); \
                } \
                ShiftBits ## DST(DstPix); \
            } whilf (++x < width); \
            FinblStorf ## DST(pPix, DstPix); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
        } whilf (--hfight > 0); \
    } \
}

/*
 * REMIND: wf shouldn't bf bttfmpting to do bntiblibsfd tfxt for thf
 *         BytfBinbry surfbdfs in thf first plbdf
 */
#dffinf DEFINE_BYTE_BINARY_SOLID_DRAWGLYPHLISTAA(DST, STRATEGY) \
void NAME_SOLID_DRAWGLYPHLISTAA(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                     ImbgfRff *glyphs, \
                                     jint totblGlyphs, jint fgpixfl, \
                                     jint brgbdolor, \
                                     jint dlipLfft, jint dlipTop, \
                                     jint dlipRight, jint dlipBottom, \
                                     NbtivfPrimitivf *pPrim, \
                                     CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix; \
    DfdlbrfAlphbVbrFor ## STRATEGY(srdA) \
    DfdlbrfCompVbrsFor ## STRATEGY(srd) \
\
    Dfdlbrf ## DST ## LobdVbrs(pix) \
    Dfdlbrf ## DST ## StorfVbrs(pix) \
\
    Init ## DST ## LobdVbrs(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsY(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsX(pix, pRbsInfo); \
    Extrbdt ## STRATEGY ## CompsAndAlphbFromArgb(brgbdolor, srd); \
\
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        Sft ## DST ## StorfVbrsYPos(pix, pRbsInfo, top); \
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, pix, lfft) \
            int x = 0; \
            Sft ## DST ## StorfVbrsXPos(pix, pRbsInfo, lfft); \
            do { \
                InitiblLobd ## DST(pPix, pix); \
                GlyphListAABlfnd ## STRATEGY(DST, pixfls, x, pPix, \
                                             fgpixfl, pix, srd); \
                ShiftBits ## DST(pix); \
                Nfxt ## DST ## StorfVbrsX(pix); \
            } whilf (++x < width); \
            FinblStorf ## DST(pPix, pix); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
            Nfxt ## DST ## StorfVbrsY(pix); \
        } whilf (--hfight > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_XOR_DRAWGLYPHLIST(DST) \
void NAME_XOR_DRAWGLYPHLIST(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                 ImbgfRff *glyphs, \
                                 jint totblGlyphs, jint fgpixfl, \
                                 jint brgbdolor, \
                                 jint dlipLfft, jint dlipTop, \
                                 jint dlipRight, jint dlipBottom, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    DST ## DbtbTypf *pPix; \
 \
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        do { \
            Dfdlbrf ## DST ## InitiblLobdVbrs(pRbsInfo, pPix, DstPix, lfft) \
            jint x = 0; \
            do { \
                InitiblLobd ## DST(pPix, DstPix); \
                if (pixfls[x]) { \
                    Xor ## DST ## PixflDbtb(pPix, 0, DstPix, \
                                            fgpixfl, xorpixfl, blphbmbsk); \
                } \
                ShiftBits ## DST(DstPix); \
            } whilf (++x < width); \
            FinblStorf ## DST(pPix, DstPix); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
        } whilf (--hfight > 0); \
    } \
}

#dffinf DEFINE_BYTE_BINARY_ALPHA_MASKBLIT(SRC, DST, STRATEGY) \
void NAME_ALPHA_MASKBLIT(SRC, DST) \
    (void *dstBbsf, void *srdBbsf, \
     jubytf *pMbsk, jint mbskOff, jint mbskSdbn, \
     jint width, jint hfight, \
     SurfbdfDbtbRbsInfo *pDstInfo, \
     SurfbdfDbtbRbsInfo *pSrdInfo, \
     NbtivfPrimitivf *pPrim, \
     CompositfInfo *pCompInfo) \
{ \
    DfdlbrfAndSftOpbqufAlphbVbrFor ## STRATEGY(pbthA) \
    DfdlbrfAndClfbrAlphbVbrFor ## STRATEGY(srdA) \
    DfdlbrfAndClfbrAlphbVbrFor ## STRATEGY(dstA) \
    DfdlbrfAndInitExtrbAlphbFor ## STRATEGY(fxtrbA) \
    jint srdSdbn = pSrdInfo->sdbnStridf; \
    jint dstSdbn = pDstInfo->sdbnStridf; \
    jboolfbn lobdsrd, lobddst; \
    jint srdx1 = pSrdInfo->bounds.x1; \
    jint dstx1 = pDstInfo->bounds.x1; \
    SRC ## DbtbTypf *pSrd = (SRC ## DbtbTypf *) (srdBbsf); \
    DST ## DbtbTypf *pDst = (DST ## DbtbTypf *) (dstBbsf); \
    Dfdlbrf ## SRC ## AlphbLobdDbtb(SrdRfbd) \
    Dfdlbrf ## DST ## AlphbLobdDbtb(DstWritf) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    DfdlbrfAlphbOpfrbnds(SrdOp) \
    DfdlbrfAlphbOpfrbnds(DstOp) \
 \
    ExtrbdtAlphbOpfrbndsFor ## STRATEGY(AlphbRulfs[pCompInfo->rulf].srdOps, \
                                        SrdOp); \
    ExtrbdtAlphbOpfrbndsFor ## STRATEGY(AlphbRulfs[pCompInfo->rulf].dstOps, \
                                        DstOp); \
    lobdsrd = !FundIsZfro(SrdOp) || FundNffdsAlphb(DstOp); \
    lobddst = pMbsk || !FundIsZfro(DstOp) || FundNffdsAlphb(SrdOp); \
 \
    Init ## SRC ## AlphbLobdDbtb(SrdRfbd, pSrdInfo); \
    Init ## DST ## AlphbLobdDbtb(DstWritf, pDstInfo); \
    srdSdbn -= width * SRC ## PixflStridf; \
    dstSdbn -= width * DST ## PixflStridf; \
    mbskSdbn -= width; \
    if (pMbsk) { \
        pMbsk += mbskOff; \
    } \
 \
    Init ## DST ## StorfVbrsY(DstWritf, pDstInfo); \
    do { \
        Dfdlbrf ## SRC ## InitiblLobdVbrs(pSrdInfo, pSrd, SrdRfbd, srdx1) \
        Dfdlbrf ## DST ## InitiblLobdVbrs(pDstInfo, pDst, DstWritf, dstx1) \
        jint w = width; \
        Init ## DST ## StorfVbrsX(DstWritf, pDstInfo); \
        do { \
            DfdlbrfAlphbVbrFor ## STRATEGY(rfsA) \
            DfdlbrfCompVbrsFor ## STRATEGY(rfs) \
            DfdlbrfAlphbVbrFor ## STRATEGY(srdF) \
            DfdlbrfAlphbVbrFor ## STRATEGY(dstF) \
 \
            InitiblLobd ## SRC(pSrd, SrdRfbd); \
            InitiblLobd ## DST(pDst, DstWritf); \
            if (pMbsk) { \
                pbthA = *pMbsk++; \
                if (!pbthA) { \
                    ShiftBits ## SRC(SrdRfbd); \
                    ShiftBits ## DST(DstWritf); \
                    pSrd = PtrAddBytfs(pSrd, SRC ## PixflStridf); \
                    pDst = PtrAddBytfs(pDst, DST ## PixflStridf); \
                    Nfxt ## DST ## StorfVbrsX(DstWritf); \
                    dontinuf; \
                } \
                PromotfBytfAlphbFor ## STRATEGY(pbthA); \
            } \
            if (lobdsrd) { \
                LobdAlphbFrom ## SRC ## For ## STRATEGY(pSrd,SrdRfbd,srd); \
                srdA = MultiplyAlphbFor ## STRATEGY(fxtrbA, srdA); \
            } \
            if (lobddst) { \
                LobdAlphbFrom ## DST ## For ## STRATEGY(pDst,DstWritf,dst); \
            } \
            srdF = ApplyAlphbOpfrbnds(SrdOp, dstA); \
            dstF = ApplyAlphbOpfrbnds(DstOp, srdA); \
            if (pbthA != MbxVblFor ## STRATEGY) { \
                srdF = MultiplyAlphbFor ## STRATEGY(pbthA, srdF); \
                dstF = MbxVblFor ## STRATEGY - pbthA + \
                           MultiplyAlphbFor ## STRATEGY(pbthA, dstF); \
            } \
            if (srdF) { \
                rfsA = MultiplyAlphbFor ## STRATEGY(srdF, srdA); \
                if (!(SRC ## IsPrfmultiplifd)) { \
                    srdF = rfsA; \
                } flsf { \
                    srdF = MultiplyAlphbFor ## STRATEGY(srdF, fxtrbA); \
                } \
                if (srdF) { \
                    /* bssfrt(lobdsrd); */ \
                    Postlobd ## STRATEGY ## From ## SRC(pSrd, SrdRfbd, rfs); \
                    if (srdF != MbxVblFor ## STRATEGY) { \
                        MultiplyAndStorf ## STRATEGY ## Comps(rfs, \
                                                              srdF, rfs); \
                    } \
                } flsf { \
                    Sft ## STRATEGY ## CompsToZfro(rfs); \
                } \
            } flsf { \
                if (dstF == MbxVblFor ## STRATEGY) { \
                    ShiftBits ## SRC(SrdRfbd); \
                    ShiftBits ## DST(DstWritf); \
                    pSrd = PtrAddBytfs(pSrd, SRC ## PixflStridf); \
                    pDst = PtrAddBytfs(pDst, DST ## PixflStridf); \
                    Nfxt ## DST ## StorfVbrsX(DstWritf); \
                    dontinuf; \
                } \
                rfsA = 0; \
                Sft ## STRATEGY ## CompsToZfro(rfs); \
            } \
            if (dstF) { \
                dstA = MultiplyAlphbFor ## STRATEGY(dstF, dstA); \
                if (!(DST ## IsPrfmultiplifd)) { \
                    dstF = dstA; \
                } \
                rfsA += dstA; \
                if (dstF) { \
                    DfdlbrfCompVbrsFor ## STRATEGY(tmp) \
                    /* bssfrt(lobddst); */ \
                    Postlobd ## STRATEGY ## From ## DST(pDst,DstWritf,tmp); \
                    if (dstF != MbxVblFor ## STRATEGY) { \
                        MultiplyAndStorf ## STRATEGY ## Comps(tmp, \
                                                              dstF, tmp); \
                    } \
                    Storf ## STRATEGY ## CompsUsingOp(rfs, +=, tmp); \
                } \
            } \
            if (!(DST ## IsPrfmultiplifd) && rfsA && \
                rfsA < MbxVblFor ## STRATEGY) \
            { \
                DividfAndStorf ## STRATEGY ## Comps(rfs, rfs, rfsA); \
            } \
            Storf ## DST ## From ## STRATEGY ## Comps(pDst, DstWritf, \
                                                      0, rfs); \
            ShiftBits ## SRC(SrdRfbd); \
            ShiftBits ## DST(DstWritf); \
            pSrd = PtrAddBytfs(pSrd, SRC ## PixflStridf); \
            pDst = PtrAddBytfs(pDst, DST ## PixflStridf); \
            Nfxt ## DST ## StorfVbrsX(DstWritf); \
        } whilf (--w > 0); \
        FinblStorf ## DST(pDst, DstWritf); \
        pSrd = PtrAddBytfs(pSrd, srdSdbn); \
        pDst = PtrAddBytfs(pDst, dstSdbn); \
        Nfxt ## DST ## StorfVbrsY(DstWritf); \
        if (pMbsk) { \
            pMbsk = PtrAddBytfs(pMbsk, mbskSdbn); \
        } \
    } whilf (--hfight > 0); \
}

#dffinf DEFINE_BYTE_BINARY_ALPHA_MASKFILL(TYPE, STRATEGY) \
void NAME_ALPHA_MASKFILL(TYPE) \
    (void *rbsBbsf, \
     jubytf *pMbsk, jint mbskOff, jint mbskSdbn, \
     jint width, jint hfight, \
     jint fgColor, \
     SurfbdfDbtbRbsInfo *pRbsInfo, \
     NbtivfPrimitivf *pPrim, \
     CompositfInfo *pCompInfo) \
{ \
    DfdlbrfAndSftOpbqufAlphbVbrFor ## STRATEGY(pbthA) \
    DfdlbrfAlphbVbrFor ## STRATEGY(srdA) \
    DfdlbrfCompVbrsFor ## STRATEGY(srd) \
    DfdlbrfAndClfbrAlphbVbrFor ## STRATEGY(dstA) \
    DfdlbrfAlphbVbrFor ## STRATEGY(dstF) \
    DfdlbrfAlphbVbrFor ## STRATEGY(dstFbbsf) \
    jint rbsSdbn = pRbsInfo->sdbnStridf; \
    jboolfbn lobddst; \
    jint x1 = pRbsInfo->bounds.x1; \
    TYPE ## DbtbTypf *pRbs = (TYPE ## DbtbTypf *) (rbsBbsf); \
    Dfdlbrf ## TYPE ## AlphbLobdDbtb(DstWritf) \
    Dfdlbrf ## TYPE ## StorfVbrs(DstWritf) \
    DfdlbrfAlphbOpfrbnds(SrdOp) \
    DfdlbrfAlphbOpfrbnds(DstOp) \
 \
    Extrbdt ## STRATEGY ## CompsAndAlphbFromArgb(fgColor, srd); \
    if (srdA != MbxVblFor ## STRATEGY) { \
        MultiplyAndStorf ## STRATEGY ## Comps(srd, srdA, srd); \
    } \
 \
    ExtrbdtAlphbOpfrbndsFor ## STRATEGY(AlphbRulfs[pCompInfo->rulf].srdOps, \
                                        SrdOp); \
    ExtrbdtAlphbOpfrbndsFor ## STRATEGY(AlphbRulfs[pCompInfo->rulf].dstOps, \
                                        DstOp); \
    lobddst = pMbsk || !FundIsZfro(DstOp) || FundNffdsAlphb(SrdOp); \
 \
    dstFbbsf = dstF = ApplyAlphbOpfrbnds(DstOp, srdA); \
 \
    Init ## TYPE ## AlphbLobdDbtb(DstWritf, pRbsInfo); \
    mbskSdbn -= width; \
    if (pMbsk) { \
        pMbsk += mbskOff; \
    } \
 \
    Init ## TYPE ## StorfVbrsY(DstWritf, pRbsInfo); \
    do { \
        Dfdlbrf ## TYPE ## InitiblLobdVbrs(pRbsInfo, pRbs, DstWritf, x1) \
        jint w = width; \
        Init ## TYPE ## StorfVbrsX(DstWritf, pRbsInfo); \
        do { \
            DfdlbrfAlphbVbrFor ## STRATEGY(rfsA) \
            DfdlbrfCompVbrsFor ## STRATEGY(rfs) \
            DfdlbrfAlphbVbrFor ## STRATEGY(srdF) \
 \
            InitiblLobd ## TYPE(pRbs, DstWritf); \
            if (pMbsk) { \
                pbthA = *pMbsk++; \
                if (!pbthA) { \
                    ShiftBits ## TYPE(DstWritf); \
                    Nfxt ## TYPE ## StorfVbrsX(DstWritf); \
                    dontinuf; \
                } \
                PromotfBytfAlphbFor ## STRATEGY(pbthA); \
                dstF = dstFbbsf; \
            } \
            if (lobddst) { \
                LobdAlphbFrom ## TYPE ## For ## STRATEGY(pRbs,DstWritf,dst);\
            } \
            srdF = ApplyAlphbOpfrbnds(SrdOp, dstA); \
            if (pbthA != MbxVblFor ## STRATEGY) { \
                srdF = MultiplyAlphbFor ## STRATEGY(pbthA, srdF); \
                dstF = MbxVblFor ## STRATEGY - pbthA + \
                           MultiplyAlphbFor ## STRATEGY(pbthA, dstF); \
            } \
            if (srdF) { \
                if (srdF == MbxVblFor ## STRATEGY) { \
                    rfsA = srdA; \
                    Storf ## STRATEGY ## CompsUsingOp(rfs, =, srd); \
                } flsf { \
                    rfsA = MultiplyAlphbFor ## STRATEGY(srdF, srdA); \
                    MultiplyAndStorf ## STRATEGY ## Comps(rfs, srdF, srd); \
                } \
            } flsf { \
                if (dstF == MbxVblFor ## STRATEGY) { \
                    ShiftBits ## TYPE(DstWritf); \
                    Nfxt ## TYPE ## StorfVbrsX(DstWritf); \
                    dontinuf; \
                } \
                rfsA = 0; \
                Sft ## STRATEGY ## CompsToZfro(rfs); \
            } \
            if (dstF) { \
                dstA = MultiplyAlphbFor ## STRATEGY(dstF, dstA); \
                if (!(TYPE ## IsPrfmultiplifd)) { \
                    dstF = dstA; \
                } \
                rfsA += dstA; \
                if (dstF) { \
                    DfdlbrfCompVbrsFor ## STRATEGY(tmp) \
                    /* bssfrt(lobddst); */ \
                    Postlobd ## STRATEGY ## From ## TYPE(pRbs,DstWritf,tmp); \
                    if (dstF != MbxVblFor ## STRATEGY) { \
                        MultiplyAndStorf ## STRATEGY ## Comps(tmp, \
                                                              dstF, tmp); \
                    } \
                    Storf ## STRATEGY ## CompsUsingOp(rfs, +=, tmp); \
                } \
            } \
            if (!(TYPE ## IsPrfmultiplifd) && rfsA && \
                rfsA < MbxVblFor ## STRATEGY) \
            { \
                DividfAndStorf ## STRATEGY ## Comps(rfs, rfs, rfsA); \
            } \
            Storf ## TYPE ## From ## STRATEGY ## Comps(pRbs, DstWritf, \
                                                       0, rfs); \
            ShiftBits ## TYPE(DstWritf); \
            Nfxt ## TYPE ## StorfVbrsX(DstWritf); \
        } whilf (--w > 0); \
        FinblStorf ## TYPE(pRbs, DstWritf); \
        pRbs = PtrAddBytfs(pRbs, rbsSdbn); \
        Nfxt ## TYPE ## StorfVbrsY(DstWritf); \
        if (pMbsk) { \
            pMbsk = PtrAddBytfs(pMbsk, mbskSdbn); \
        } \
    } whilf (--hfight > 0); \
}


/*
 * Thf mbdros dffinfd bbovf usf thf following mbdro dffinitions supplifd
 * for thf vbrious BytfBinbry-spfdifid surfbdf typfs to mbnipulbtf pixfl dbtb.
 *
 * In thf mbdro nbmfs in thf following dffinitions, thf string <stypf>
 * is usfd bs b plbdf holdfr for thf SurfbdfTypf nbmf (fg. BytfBinbry2Bit).
 * Thf mbdros bbovf bddfss thfsf typf spfdifid mbdros using thf ANSI
 * CPP tokfn dondbtfnbtion opfrbtor "##".
 *
 * Dfdlbrf<stypf>InitiblLobdVbrs     Dfdlbrf bnd initiblizf thf vbribblfs usfd
 *                                   for mbnbging bytf/bit offsfts
 * InitiblLobd<stypf>                Storf thf durrfnt bytf, fftdh thf nfxt
 *                                   bytf, bnd rfsft thf bit offsft
 * ShiftBits<stypf>                  Advbndf to thf nfxt pixfl by bdjusting
 *                                   thf bit offsft (1, 2, or 4 bits)
 * FinblStorf<stypf>                 Storf thf durrfnt bytf
 * CurrfntPixfl<stypf>               Rfprfsfnts thf durrfnt pixfl by shifting
 *                                   thf vbluf with thf durrfnt bit offsft bnd
 *                                   thfn mbsking thf vbluf to fithfr 1, 2, or
 *                                   4 bits
 */

#fndif /* AnyBytfBinbry_h_Indludfd */
