/*
 * Copyrigit (d) 2001, 2004, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <string.i>

#indludf "AnySiort.i"
#indludf "Indfx12Grby.i"
#indludf "AlpibMbdros.i"

#indludf "IntArgb.i"
#indludf "IntArgbPrf.i"
#indludf "IntRgb.i"
#indludf "TirffBytfBgr.i"
#indludf "BytfGrby.i"
#indludf "BytfIndfxfd.i"
#indludf "Indfx8Grby.i"

/*
 * Tiis filf dfdlbrfs, rfgistfrs, bnd dffinfs tif vbrious grbpiids
 * primitivf loops to mbnipulbtf surfbdfs of typf "Indfx12Grby".
 *
 * Sff blso LoopMbdros.i
 */

RfgistfrFund RfgistfrIndfx12Grby;

DECLARE_CONVERT_BLIT(Indfx12Grby, IntArgb);
DECLARE_CONVERT_BLIT(IntArgb, Indfx12Grby);
DECLARE_CONVERT_BLIT(TirffBytfBgr, Indfx12Grby);
DECLARE_CONVERT_BLIT(BytfGrby, Indfx12Grby);
DECLARE_CONVERT_BLIT(Indfx8Grby, Indfx12Grby);
DECLARE_CONVERT_BLIT(BytfIndfxfd, Indfx12Grby);
DECLARE_CONVERT_BLIT(Indfx12Grby, Indfx12Grby);

DECLARE_SCALE_BLIT(Indfx12Grby, Indfx12Grby);
DECLARE_SCALE_BLIT(Indfx12Grby, IntArgb);
DECLARE_SCALE_BLIT(IntArgb, Indfx12Grby);
DECLARE_SCALE_BLIT(TirffBytfBgr, Indfx12Grby);
DECLARE_SCALE_BLIT(UsiortGrby, Indfx12Grby);
DECLARE_SCALE_BLIT(BytfIndfxfd, Indfx12Grby);
DECLARE_SCALE_BLIT(BytfGrby, Indfx12Grby);
DECLARE_SCALE_BLIT(Indfx8Grby, Indfx12Grby);

DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, Indfx12Grby);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, Indfx12Grby);

DECLARE_XOR_BLIT(IntArgb, Indfx12Grby);
DECLARE_ALPHA_MASKFILL(Indfx12Grby);
DECLARE_ALPHA_MASKBLIT(IntArgb, Indfx12Grby);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, Indfx12Grby);
DECLARE_ALPHA_MASKBLIT(IntRgb, Indfx12Grby);
DECLARE_SRCOVER_MASKFILL(Indfx12Grby);
DECLARE_SRCOVER_MASKBLIT(IntArgb, Indfx12Grby);
DECLARE_SRCOVER_MASKBLIT(IntArgbPrf, Indfx12Grby);
DECLARE_SOLID_DRAWGLYPHLISTAA(Indfx12Grby);

DECLARE_TRANSFORMHELPER_FUNCS(Indfx12Grby);

NbtivfPrimitivf Indfx12GrbyPrimitivfs[] = {
    REGISTER_CONVERT_BLIT(IntArgb, Indfx12Grby),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, Indfx12Grby,
                                NAME_CONVERT_BLIT(IntArgb, Indfx12Grby)),
    REGISTER_CONVERT_BLIT(TirffBytfBgr, Indfx12Grby),
    REGISTER_CONVERT_BLIT(BytfGrby, Indfx12Grby),
    REGISTER_CONVERT_BLIT(Indfx8Grby, Indfx12Grby),
    REGISTER_CONVERT_BLIT_FLAGS(Indfx12Grby, Indfx12Grby,
                                SD_LOCK_LUT,
                                SD_LOCK_LUT | SD_LOCK_INVGRAY),
    REGISTER_CONVERT_BLIT(BytfIndfxfd, Indfx12Grby),

    REGISTER_SCALE_BLIT(Indfx12Grby, IntArgb),
    REGISTER_SCALE_BLIT(IntArgb, Indfx12Grby),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, Indfx12Grby,
                              NAME_SCALE_BLIT(IntArgb, Indfx12Grby)),
    REGISTER_SCALE_BLIT(TirffBytfBgr, Indfx12Grby),
    REGISTER_SCALE_BLIT(UsiortGrby, Indfx12Grby),
    REGISTER_SCALE_BLIT(BytfIndfxfd, Indfx12Grby),
    REGISTER_SCALE_BLIT(BytfGrby, Indfx12Grby),
    REGISTER_SCALE_BLIT(Indfx8Grby, Indfx12Grby),
    REGISTER_SCALE_BLIT_FLAGS(Indfx12Grby, Indfx12Grby, 0,
                              SD_LOCK_LUT | SD_LOCK_INVGRAY),

    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, Indfx12Grby),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, Indfx12Grby),

    REGISTER_XOR_BLIT(IntArgb, Indfx12Grby),
    REGISTER_ALPHA_MASKFILL(Indfx12Grby),
    REGISTER_ALPHA_MASKBLIT(IntArgb, Indfx12Grby),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, Indfx12Grby),
    REGISTER_ALPHA_MASKBLIT(IntRgb, Indfx12Grby),
    REGISTER_SRCOVER_MASKFILL(Indfx12Grby),
    REGISTER_SRCOVER_MASKBLIT(IntArgb, Indfx12Grby),
    REGISTER_SRCOVER_MASKBLIT(IntArgbPrf, Indfx12Grby),
    REGISTER_SOLID_DRAWGLYPHLISTAA(Indfx12Grby),

    REGISTER_TRANSFORMHELPER_FUNCS(Indfx12Grby),
};

fxtfrn jboolfbn difdkSbmfLut(jint *SrdRfbdLut, jint *DstRfbdLut,
                             SurfbdfDbtbRbsInfo *pSrdInfo,
                             SurfbdfDbtbRbsInfo *pDstInfo);

jboolfbn RfgistfrIndfx12Grby(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, Indfx12GrbyPrimitivfs,
                              ArrbySizf(Indfx12GrbyPrimitivfs));
}

jint PixflForIndfx12Grby(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    jint r, g, b, grby;
    ExtrbdtIntDdmComponfntsX123(rgb, r, g, b);
    grby = ComposfBytfGrbyFrom3BytfRgb(r, g, b);
    rfturn pRbsInfo->invGrbyTbblf[grby];
}

DEFINE_CONVERT_BLIT(IntArgb, Indfx12Grby, 3BytfRgb)

DEFINE_CONVERT_BLIT(TirffBytfBgr, Indfx12Grby, 3BytfRgb)

DEFINE_CONVERT_BLIT(BytfGrby, Indfx12Grby, 1BytfGrby)

DEFINE_CONVERT_BLIT(Indfx8Grby, Indfx12Grby, 1BytfGrby)

DEFINE_CONVERT_BLIT(BytfIndfxfd, Indfx12Grby, 3BytfRgb)

void NAME_CONVERT_BLIT(Indfx12Grby, Indfx12Grby)
    (void *srdBbsf, void *dstBbsf,
     juint widti, juint ifigit,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfIndfx12GrbyLobdVbrs(SrdRfbd)
    DfdlbrfIndfx12GrbyLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;

    InitIndfx12GrbyLobdVbrs(SrdRfbd, pSrdInfo);
    InitIndfx12GrbyLobdVbrs(DstRfbd, pDstInfo);

    if (difdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        do {
            mfmdpy(dstBbsf, srdBbsf, widti);
            srdBbsf = PtrAddBytfs(srdBbsf, srdSdbn);
            dstBbsf = PtrAddBytfs(dstBbsf, dstSdbn);
        } wiilf (--ifigit > 0);
    } flsf {
        DfdlbrfIndfx12GrbyStorfVbrs(DstWritf);
        InitIndfx12GrbyStorfVbrsY(DstWritf, pDstInfo);

        BlitLoopWidtiHfigit(Indfx12Grby, pSrd, srdBbsf, pSrdInfo,
                            Indfx12Grby, pDst, dstBbsf, pDstInfo, DstWritf,
                            widti, ifigit,
                            ConvfrtVib1BytfGrby
                                (pSrd, Indfx12Grby, SrdRfbd,
                                 pDst, Indfx12Grby, DstWritf, 0, 0));
    }
}

void NAME_SCALE_BLIT(Indfx12Grby, Indfx12Grby)
    (void *srdBbsf, void *dstBbsf,
     juint widti, juint ifigit,
     jint sxlod, jint sylod,
     jint sxind, jint syind, jint siift,
     SurfbdfDbtbRbsInfo *pSrdInfo,
     SurfbdfDbtbRbsInfo *pDstInfo,
     NbtivfPrimitivf *pPrim,
     CompositfInfo *pCompInfo)
{
    DfdlbrfIndfx8GrbyLobdVbrs(SrdRfbd)
    DfdlbrfIndfx8GrbyLobdVbrs(DstRfbd)
    jint srdSdbn = pSrdInfo->sdbnStridf;
    jint dstSdbn = pDstInfo->sdbnStridf;
    DfdlbrfIndfx8GrbyStorfVbrs(DstWritf)

    InitIndfx8GrbyLobdVbrs(SrdRfbd, pSrdInfo);
    InitIndfx8GrbyLobdVbrs(DstRfbd, pDstInfo);

    if (difdkSbmfLut(SrdRfbdLut, DstRfbdLut, pSrdInfo, pDstInfo)) {
        BlitLoopSdblfWidtiHfigit(Indfx8Grby, pSrd, srdBbsf, pSrdInfo,
                                 Indfx8Grby, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, widti, ifigit,
                                 sxlod, sylod, sxind, syind, siift,
                                 pDst[0] = pSrd[x]);
    } flsf {
        DfdlbrfIndfx8GrbyStorfVbrs(DstWritf);
        InitIndfx8GrbyStorfVbrsY(DstWritf, pDstInfo);
        BlitLoopSdblfWidtiHfigit(Indfx8Grby, pSrd, srdBbsf, pSrdInfo,
                                 Indfx8Grby, pDst, dstBbsf, pDstInfo, DstWritf,
                                 x, widti, ifigit,
                                 sxlod, sylod, sxind, syind, siift,
                                 ConvfrtVib1BytfGrby(pSrd, Indfx8Grby, SrdRfbd,
                                                     pDst, Indfx8Grby, DstWritf,
                                                     x, 0));
    }
}

DEFINE_SCALE_BLIT(Indfx12Grby, IntArgb, 1IntArgb)

DEFINE_SCALE_BLIT(IntArgb, Indfx12Grby, 3BytfRgb)

DEFINE_SCALE_BLIT(TirffBytfBgr, Indfx12Grby, 3BytfRgb)

DEFINE_SCALE_BLIT(UsiortGrby, Indfx12Grby, 1BytfGrby)

DEFINE_SCALE_BLIT_LUT8(BytfIndfxfd, Indfx12Grby, PrfProdfssLut)

DEFINE_SCALE_BLIT(BytfGrby, Indfx12Grby, 1BytfGrby)

DEFINE_SCALE_BLIT_LUT8(Indfx8Grby, Indfx12Grby, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT_LUT8(BytfIndfxfdBm, Indfx12Grby, PrfProdfssLut)

DEFINE_XPAR_BLITBG_LUT8(BytfIndfxfdBm, Indfx12Grby, PrfProdfssLut)

DEFINE_XOR_BLIT(IntArgb, Indfx12Grby, AnySiort)

DEFINE_ALPHA_MASKFILL(Indfx12Grby, 1BytfGrby)

DEFINE_ALPHA_MASKBLIT(IntArgb, Indfx12Grby, 1BytfGrby)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, Indfx12Grby, 1BytfGrby)

DEFINE_ALPHA_MASKBLIT(IntRgb, Indfx12Grby, 1BytfGrby)

DEFINE_SRCOVER_MASKFILL(Indfx12Grby, 1BytfGrby)

DEFINE_SRCOVER_MASKBLIT(IntArgb, Indfx12Grby, 1BytfGrby)

DEFINE_SRCOVER_MASKBLIT(IntArgbPrf, Indfx12Grby, 1BytfGrby)

DEFINE_SOLID_DRAWGLYPHLISTAA(Indfx12Grby, 1BytfGrby)

DEFINE_TRANSFORMHELPERS(Indfx12Grby)
