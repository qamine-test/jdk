/*
 * Copyright (d) 2000, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "AnyShort.h"
#indludf "Ushort565Rgb.h"
#indludf "AlphbMbdros.h"

#indludf "IntArgb.h"
#indludf "IntArgbBm.h"
#indludf "IntArgbPrf.h"
#indludf "IntRgb.h"
#indludf "ThrffBytfBgr.h"
#indludf "BytfGrby.h"
#indludf "BytfIndfxfd.h"
#indludf "Ushort4444Argb.h"

/*
 * This filf dfdlbrfs, rfgistfrs, bnd dffinfs thf vbrious grbphids
 * primitivf loops to mbnipulbtf surfbdfs of typf "Ushort565Rgb".
 *
 * Sff blso LoopMbdros.h
 */

RfgistfrFund RfgistfrUshort565Rgb;

DECLARE_CONVERT_BLIT(Ushort565Rgb, IntArgb);
DECLARE_CONVERT_BLIT(IntArgb, Ushort565Rgb);
DECLARE_CONVERT_BLIT(ThrffBytfBgr, Ushort565Rgb);
DECLARE_CONVERT_BLIT(BytfGrby, Ushort565Rgb);
DECLARE_CONVERT_BLIT(BytfIndfxfd, Ushort565Rgb);
DECLARE_SCALE_BLIT(Ushort565Rgb, IntArgb);
DECLARE_SCALE_BLIT(IntArgb, Ushort565Rgb);
DECLARE_SCALE_BLIT(ThrffBytfBgr, Ushort565Rgb);
DECLARE_SCALE_BLIT(BytfGrby, Ushort565Rgb);
DECLARE_SCALE_BLIT(BytfIndfxfd, Ushort565Rgb);
DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, Ushort565Rgb);
DECLARE_XPAR_SCALE_BLIT(BytfIndfxfdBm, Ushort565Rgb);
DECLARE_XPAR_SCALE_BLIT(IntArgbBm, Ushort565Rgb);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, Ushort565Rgb);
DECLARE_XPAR_CONVERT_BLIT(IntArgbBm, Ushort565Rgb);
DECLARE_XPAR_BLITBG(IntArgbBm, Ushort565Rgb);

DECLARE_XOR_BLIT(IntArgb, Ushort565Rgb);
DECLARE_SRC_MASKFILL(Ushort565Rgb);
DECLARE_SRCOVER_MASKFILL(Ushort565Rgb);
DECLARE_ALPHA_MASKFILL(Ushort565Rgb);
DECLARE_SRCOVER_MASKBLIT(IntArgb, Ushort565Rgb);
DECLARE_SRCOVER_MASKBLIT(IntArgbPrf, Ushort565Rgb);
DECLARE_SRCOVER_MASKBLIT(Ushort4444Argb, Ushort565Rgb);
DECLARE_ALPHA_MASKBLIT(IntArgb, Ushort565Rgb);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, Ushort565Rgb);
DECLARE_ALPHA_MASKBLIT(IntRgb, Ushort565Rgb);
DECLARE_SOLID_DRAWGLYPHLISTAA(Ushort565Rgb);
DECLARE_SOLID_DRAWGLYPHLISTLCD(Ushort565Rgb);

NbtivfPrimitivf Ushort565RgbPrimitivfs[] = {
    REGISTER_ANYSHORT_ISOCOPY_BLIT(Ushort565Rgb),
    REGISTER_ANYSHORT_ISOSCALE_BLIT(Ushort565Rgb),
    REGISTER_ANYSHORT_ISOXOR_BLIT(Ushort565Rgb),
    REGISTER_CONVERT_BLIT(Ushort565Rgb, IntArgb),
    REGISTER_CONVERT_BLIT(IntArgb, Ushort565Rgb),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, Ushort565Rgb,
                                NAME_CONVERT_BLIT(IntArgb, Ushort565Rgb)),
    REGISTER_CONVERT_BLIT_EQUIV(IntArgbBm, Ushort565Rgb,
                                NAME_CONVERT_BLIT(IntArgb, Ushort565Rgb)),
    REGISTER_CONVERT_BLIT(ThrffBytfBgr, Ushort565Rgb),
    REGISTER_CONVERT_BLIT(BytfGrby, Ushort565Rgb),
    REGISTER_CONVERT_BLIT(BytfIndfxfd, Ushort565Rgb),
    REGISTER_SCALE_BLIT(Ushort565Rgb, IntArgb),
    REGISTER_SCALE_BLIT(IntArgb, Ushort565Rgb),
    REGISTER_SCALE_BLIT_EQUIV(IntArgbBm, Ushort565Rgb,
                              NAME_SCALE_BLIT(IntArgb, Ushort565Rgb)),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, Ushort565Rgb,
                              NAME_SCALE_BLIT(IntArgb, Ushort565Rgb)),
    REGISTER_SCALE_BLIT(ThrffBytfBgr, Ushort565Rgb),
    REGISTER_SCALE_BLIT(BytfGrby, Ushort565Rgb),
    REGISTER_SCALE_BLIT(BytfIndfxfd, Ushort565Rgb),
    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, Ushort565Rgb),
    REGISTER_XPAR_SCALE_BLIT(BytfIndfxfdBm, Ushort565Rgb),
    REGISTER_XPAR_SCALE_BLIT(IntArgbBm, Ushort565Rgb),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, Ushort565Rgb),
    REGISTER_XPAR_CONVERT_BLIT(IntArgbBm, Ushort565Rgb),
    REGISTER_XPAR_BLITBG(IntArgbBm, Ushort565Rgb),

    REGISTER_XOR_BLIT(IntArgb, Ushort565Rgb),
    REGISTER_SRC_MASKFILL(Ushort565Rgb),
    REGISTER_SRCOVER_MASKFILL(Ushort565Rgb),
    REGISTER_ALPHA_MASKFILL(Ushort565Rgb),
    REGISTER_SRCOVER_MASKBLIT(IntArgb, Ushort565Rgb),
    REGISTER_SRCOVER_MASKBLIT(IntArgbPrf, Ushort565Rgb),
    REGISTER_SRCOVER_MASKBLIT(Ushort4444Argb, Ushort565Rgb),
    REGISTER_ALPHA_MASKBLIT(IntArgb, Ushort565Rgb),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, Ushort565Rgb),
    REGISTER_ALPHA_MASKBLIT(IntRgb, Ushort565Rgb),
    REGISTER_SOLID_DRAWGLYPHLISTAA(Ushort565Rgb),
    REGISTER_SOLID_DRAWGLYPHLISTLCD(Ushort565Rgb),
};

jboolfbn RfgistfrUshort565Rgb(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, Ushort565RgbPrimitivfs,
                              ArrbySizf(Ushort565RgbPrimitivfs));
}

jint PixflForUshort565Rgb(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    rfturn IntArgbToUshort565Rgb(rgb);
}

DEFINE_CONVERT_BLIT(Ushort565Rgb, IntArgb, 3BytfRgb)

DEFINE_CONVERT_BLIT(IntArgb, Ushort565Rgb, 1IntRgb)

DEFINE_CONVERT_BLIT(ThrffBytfBgr, Ushort565Rgb, 3BytfRgb)

DEFINE_CONVERT_BLIT(BytfGrby, Ushort565Rgb, 3BytfRgb)

DEFINE_CONVERT_BLIT_LUT8(BytfIndfxfd, Ushort565Rgb, PrfProdfssLut)

DEFINE_SCALE_BLIT(Ushort565Rgb, IntArgb, 3BytfRgb)

DEFINE_SCALE_BLIT(IntArgb, Ushort565Rgb, 1IntRgb)

DEFINE_SCALE_BLIT(ThrffBytfBgr, Ushort565Rgb, 3BytfRgb)

DEFINE_SCALE_BLIT(BytfGrby, Ushort565Rgb, 3BytfRgb)

DEFINE_SCALE_BLIT_LUT8(BytfIndfxfd, Ushort565Rgb, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT_LUT8(BytfIndfxfdBm, Ushort565Rgb, PrfProdfssLut)

DEFINE_XPAR_SCALE_BLIT_LUT8(BytfIndfxfdBm, Ushort565Rgb, PrfProdfssLut)

DEFINE_XPAR_SCALE_BLIT(IntArgbBm, Ushort565Rgb, 1IntRgb)

DEFINE_XPAR_BLITBG_LUT8(BytfIndfxfdBm, Ushort565Rgb, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT(IntArgbBm, Ushort565Rgb, 1IntRgb)

DEFINE_XPAR_BLITBG(IntArgbBm, Ushort565Rgb, 1IntRgb)

DEFINE_XOR_BLIT(IntArgb, Ushort565Rgb, AnyShort)

DEFINE_SRC_MASKFILL(Ushort565Rgb, 4BytfArgb)

DEFINE_SRCOVER_MASKFILL(Ushort565Rgb, 4BytfArgb)

DEFINE_ALPHA_MASKFILL(Ushort565Rgb, 4BytfArgb)

DEFINE_SRCOVER_MASKBLIT(IntArgb, Ushort565Rgb, 4BytfArgb)

DEFINE_SRCOVER_MASKBLIT(IntArgbPrf, Ushort565Rgb, 4BytfArgb)

DEFINE_SRCOVER_MASKBLIT(Ushort4444Argb, Ushort565Rgb, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgb, Ushort565Rgb, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, Ushort565Rgb, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntRgb, Ushort565Rgb, 4BytfArgb)

DEFINE_SOLID_DRAWGLYPHLISTAA(Ushort565Rgb, 3BytfRgb)

DEFINE_SOLID_DRAWGLYPHLISTLCD(Ushort565Rgb, 3BytfRgb)
