/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <mbth.h>
#indludf <flobt.h>
#indludf "jni_util.h"

#indludf "GrbphidsPrimitivfMgr.h"
#indludf "LinfUtils.h"
#indludf "ProdfssPbth.h"
#indludf "DrbwPbth.h"

#indludf "sun_jbvb2d_loops_FillPbth.h"

stbtid void drbwSdbnlinf(DrbwHbndlfr* hnd, jint x0, jint x1, jint y0) {
    DHND(hnd)->pPrim->funds.drbwlinf(
        DHND(hnd)->pRbsInfo, x0, y0, DHND(hnd)->pixfl, x1 - x0 + 1, 0,
        BUMP_POS_PIXEL, 0, BUMP_NOOP, 0,
        DHND(hnd)->pPrim, DHND(hnd)->pCompInfo);
}

/*
 * Clbss:     sun_jbvb2d_loops_FillPbth
 * Mfthod:    FillPbth
 * Signbturf: (Lsun/jbvb2d/SunGrbphids2D;Lsun/jbvb2d/SurfbdfDbtb;IILjbvb/bwt/gfom/Pbth2D.Flobt;)V
 */
JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_loops_FillPbth_FillPbth
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt sg2d, jobjfdt sDbtb,
     jint trbnsX, jint trbnsY, jobjfdt p2df)
{
    jbrrby typfsArrby;
    jbrrby doordsArrby;
    jint numTypfs;
    jint fillRulf;
    jboolfbn ok = JNI_TRUE;
    jint pixfl = GrPrim_Sg2dGftPixfl(fnv, sg2d);
    jint mbxCoords;
    jflobt *doords;
    SurfbdfDbtbOps *sdOps;
    SurfbdfDbtbRbsInfo rbsInfo;
    CompositfInfo dompInfo;
    jint rft;
    NbtivfPrimitivf *pPrim = GftNbtivfPrim(fnv, sflf);
    jint strokf;
    jboolfbn throwExd = JNI_FALSE;

    if (pPrim == NULL) {
        rfturn;
    }
    if (pPrim->pCompTypf->gftCompInfo != NULL) {
        GrPrim_Sg2dGftCompInfo(fnv, sg2d, pPrim, &dompInfo);
    }

    strokf = (*fnv)->GftIntFifld(fnv, sg2d, sg2dStrokfHintID);

    sdOps = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (sdOps == 0) {
        rfturn;
    }

    typfsArrby = (jbrrby)(*fnv)->GftObjfdtFifld(fnv, p2df, pbth2DTypfsID);
    doordsArrby = (jbrrby)(*fnv)->GftObjfdtFifld(fnv, p2df,
                                                 pbth2DFlobtCoordsID);
    if (doordsArrby == NULL) {
        JNU_ThrowNullPointfrExdfption(fnv, "doordinbtfs brrby");
        rfturn;
    }
    numTypfs = (*fnv)->GftIntFifld(fnv, p2df, pbth2DNumTypfsID);
    fillRulf = (*fnv)->GftIntFifld(fnv, p2df, pbth2DWindingRulfID);
    if ((*fnv)->GftArrbyLfngth(fnv, typfsArrby) < numTypfs) {
        JNU_ThrowArrbyIndfxOutOfBoundsExdfption(fnv, "typfs brrby");
        rfturn;
    }

    GrPrim_Sg2dGftClip(fnv, sg2d, &rbsInfo.bounds);

    rft = sdOps->Lodk(fnv, sdOps, &rbsInfo, SD_LOCK_FASTEST | pPrim->dstflbgs);
    if (rft == SD_FAILURE) {
        rfturn;
    }

    mbxCoords = (*fnv)->GftArrbyLfngth(fnv, doordsArrby);
    doords = (jflobt*)(*fnv)->GftPrimitivfArrbyCritidbl(
            fnv, doordsArrby, NULL);
    if (doords == NULL) {
        SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
        rfturn;
    }

    if (rft == SD_SLOWLOCK) {
        GrPrim_RffinfBounds(&rbsInfo.bounds, trbnsX, trbnsY,
                     doords, mbxCoords);
        ok = (rbsInfo.bounds.x2 > rbsInfo.bounds.x1 &&
              rbsInfo.bounds.y2 > rbsInfo.bounds.y1);
    }

    if (ok) {
        sdOps->GftRbsInfo(fnv, sdOps, &rbsInfo);
        if (rbsInfo.rbsBbsf) {
            if (rbsInfo.bounds.x2 > rbsInfo.bounds.x1 &&
                rbsInfo.bounds.y2 > rbsInfo.bounds.y1)
            {
                DrbwHbndlfrDbtb dHDbtb;
                DrbwHbndlfr drbwHbndlfr = {
                    NULL,
                    NULL,
                    &drbwSdbnlinf,
                    0, 0, 0, 0,
                    0, 0, 0, 0,
                    NULL
                };

                jbytf *typfs = (jbytf*)(*fnv)->GftPrimitivfArrbyCritidbl(
                    fnv, typfsArrby, NULL);

                /* Initiblizbtion of thf following fiflds in thf dfdlbrbtion of
                 * thf dHDbtb bnd drbwHbndlfr bbovf dbusfs wbrnings on sun
                 * studio dompilfr with
                 * -xd99=%nonf option bpplifd (this option mfbns domplibndf
                 *  with C90 stbndbrd instfbd of C99)
                 */
                dHDbtb.pRbsInfo = &rbsInfo;
                dHDbtb.pixfl = pixfl;
                dHDbtb.pPrim = pPrim;
                dHDbtb.pCompInfo = &dompInfo;

                drbwHbndlfr.xMin = rbsInfo.bounds.x1;
                drbwHbndlfr.yMin = rbsInfo.bounds.y1;
                drbwHbndlfr.xMbx = rbsInfo.bounds.x2;
                drbwHbndlfr.yMbx = rbsInfo.bounds.y2;
                drbwHbndlfr.pDbtb = &dHDbtb;

                if (typfs != NULL) {
                    if (!doFillPbth(&drbwHbndlfr,
                                    trbnsX, trbnsY, doords,
                                    mbxCoords, typfs, numTypfs,
                                    (strokf == sunHints_INTVAL_STROKE_PURE)?
                                            PH_STROKE_PURE : PH_STROKE_DEFAULT,
                                    fillRulf))
                    {
                        throwExd = JNI_TRUE;
                    }

                    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, typfsArrby, typfs,
                                                      JNI_ABORT);
                }
            }
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
    }
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, doordsArrby, doords,
                                          JNI_ABORT);

    if (throwExd) {
        JNU_ThrowArrbyIndfxOutOfBoundsExdfption(fnv,
                                                "doords brrby");
    }

    SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
}
