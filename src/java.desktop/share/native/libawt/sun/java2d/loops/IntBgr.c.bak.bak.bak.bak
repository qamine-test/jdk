/*
 * Copyright (d) 2000, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "AnyInt.h"
#indludf "IntBgr.h"
#indludf "AlphbMbdros.h"

#indludf "IntArgb.h"
#indludf "IntArgbPrf.h"
#indludf "IntArgbBm.h"
#indludf "IntRgb.h"
#indludf "ThrffBytfBgr.h"
#indludf "BytfIndfxfd.h"
#indludf "Indfx8Grby.h"
#indludf "Indfx12Grby.h"

/*
 * This filf dfdlbrfs, rfgistfrs, bnd dffinfs thf vbrious grbphids
 * primitivf loops to mbnipulbtf surfbdfs of typf "IntBgr".
 *
 * Sff blso LoopMbdros.h
 */

RfgistfrFund RfgistfrIntBgr;

DECLARE_CONVERT_BLIT(IntBgr, IntArgb);
DECLARE_CONVERT_BLIT(IntArgb, IntBgr);
DECLARE_CONVERT_BLIT(ThrffBytfBgr, IntBgr);
DECLARE_CONVERT_BLIT(BytfIndfxfd, IntBgr);
DECLARE_SCALE_BLIT(IntBgr, IntArgb);
DECLARE_SCALE_BLIT(IntArgb, IntBgr);
DECLARE_SCALE_BLIT(ThrffBytfBgr, IntBgr);
DECLARE_SCALE_BLIT(BytfIndfxfd, IntBgr);
DECLARE_SCALE_BLIT(Indfx12Grby, IntArgb);
DECLARE_XPAR_CONVERT_BLIT(BytfIndfxfdBm, IntBgr);
DECLARE_XPAR_CONVERT_BLIT(IntArgbBm, IntBgr);
DECLARE_XPAR_SCALE_BLIT(IntArgbBm, IntBgr);
DECLARE_XPAR_SCALE_BLIT(BytfIndfxfdBm, IntBgr);
DECLARE_XPAR_BLITBG(BytfIndfxfdBm, IntBgr);
DECLARE_XPAR_BLITBG(IntArgbBm, IntBgr);

/* BytfGrby bnd Indfx12Grby to IntRgb sbmf bs <>Grby to IntBgr... */
DECLARE_CONVERT_BLIT(BytfGrby, IntRgb);
DECLARE_SCALE_BLIT(BytfGrby, IntRgb);
DECLARE_CONVERT_BLIT(Indfx12Grby, IntArgb);

DECLARE_XOR_BLIT(IntArgb, IntBgr);
DECLARE_SRC_MASKFILL(IntBgr);
DECLARE_SRCOVER_MASKFILL(IntBgr);
DECLARE_ALPHA_MASKFILL(IntBgr);
DECLARE_SRCOVER_MASKBLIT(IntArgb, IntBgr);
DECLARE_ALPHA_MASKBLIT(IntArgb, IntBgr);
DECLARE_SRCOVER_MASKBLIT(IntArgbPrf, IntBgr);
DECLARE_ALPHA_MASKBLIT(IntArgbPrf, IntBgr);
DECLARE_ALPHA_MASKBLIT(IntRgb, IntBgr);
DECLARE_ALPHA_MASKBLIT(IntBgr, IntBgr);
DECLARE_SOLID_DRAWGLYPHLISTAA(IntBgr);
DECLARE_SOLID_DRAWGLYPHLISTLCD(IntBgr);

DECLARE_TRANSFORMHELPER_FUNCS(IntBgr);

NbtivfPrimitivf IntBgrPrimitivfs[] = {
    REGISTER_ANYINT_ISOCOPY_BLIT(IntBgr),
    REGISTER_ANYINT_ISOSCALE_BLIT(IntBgr),
    REGISTER_ANYINT_ISOXOR_BLIT(IntBgr),
    REGISTER_CONVERT_BLIT(IntBgr, IntArgb),
    REGISTER_CONVERT_BLIT(IntArgb, IntBgr),
    REGISTER_CONVERT_BLIT(ThrffBytfBgr, IntBgr),
    REGISTER_CONVERT_BLIT_EQUIV(IntRgb, IntBgr,
                                NAME_CONVERT_BLIT(IntArgb, IntBgr)),
    REGISTER_CONVERT_BLIT_EQUIV(IntArgbBm, IntBgr,
                                NAME_CONVERT_BLIT(IntArgb, IntBgr)),
    REGISTER_CONVERT_BLIT_EQUIV(IntBgr, IntRgb,
                                NAME_CONVERT_BLIT(IntArgb, IntBgr)),
    REGISTER_CONVERT_BLIT(BytfIndfxfd, IntBgr),

    REGISTER_SCALE_BLIT(IntBgr, IntArgb),
    REGISTER_SCALE_BLIT(IntArgb, IntBgr),
    REGISTER_SCALE_BLIT(ThrffBytfBgr, IntBgr),
    REGISTER_SCALE_BLIT_EQUIV(IntRgb, IntBgr,
                              NAME_SCALE_BLIT(IntArgb, IntBgr)),
    REGISTER_SCALE_BLIT_EQUIV(IntArgbBm, IntBgr,
                              NAME_SCALE_BLIT(IntArgb, IntBgr)),
    REGISTER_SCALE_BLIT_EQUIV(IntBgr, IntRgb,
                              NAME_SCALE_BLIT(IntArgb, IntBgr)),
    REGISTER_SCALE_BLIT_EQUIV(Indfx8Grby, IntBgr,
                              NAME_SCALE_BLIT(BytfIndfxfd, IntArgb)),
    REGISTER_SCALE_BLIT_EQUIV(Indfx12Grby, IntBgr,
                              NAME_SCALE_BLIT(Indfx12Grby, IntArgb)),
    REGISTER_SCALE_BLIT(BytfIndfxfd, IntBgr),
    REGISTER_XPAR_CONVERT_BLIT(BytfIndfxfdBm, IntBgr),
    REGISTER_XPAR_CONVERT_BLIT(IntArgbBm, IntBgr),
    REGISTER_XPAR_SCALE_BLIT(IntArgbBm, IntBgr),
    REGISTER_XPAR_SCALE_BLIT(BytfIndfxfdBm, IntBgr),
    REGISTER_XPAR_BLITBG(BytfIndfxfdBm, IntBgr),
    REGISTER_XPAR_BLITBG(IntArgbBm, IntBgr),

    REGISTER_CONVERT_BLIT_EQUIV(BytfGrby, IntBgr,
                                NAME_CONVERT_BLIT(BytfGrby, IntRgb)),
    REGISTER_SCALE_BLIT_EQUIV(BytfGrby, IntBgr,
                              NAME_SCALE_BLIT(BytfGrby, IntRgb)),
    REGISTER_CONVERT_BLIT_EQUIV(Indfx8Grby, IntBgr,
                                NAME_CONVERT_BLIT(BytfIndfxfd, IntArgb)),
    REGISTER_CONVERT_BLIT_EQUIV(Indfx12Grby, IntBgr,
                                NAME_CONVERT_BLIT(Indfx12Grby, IntArgb)),

    REGISTER_XOR_BLIT(IntArgb, IntBgr),
    REGISTER_SRC_MASKFILL(IntBgr),
    REGISTER_SRCOVER_MASKFILL(IntBgr),
    REGISTER_ALPHA_MASKFILL(IntBgr),
    REGISTER_SRCOVER_MASKBLIT(IntArgb, IntBgr),
    REGISTER_ALPHA_MASKBLIT(IntArgb, IntBgr),
    REGISTER_SRCOVER_MASKBLIT(IntArgbPrf, IntBgr),
    REGISTER_ALPHA_MASKBLIT(IntArgbPrf, IntBgr),
    REGISTER_ALPHA_MASKBLIT(IntRgb, IntBgr),
    REGISTER_ALPHA_MASKBLIT(IntBgr, IntBgr),
    REGISTER_SOLID_DRAWGLYPHLISTAA(IntBgr),
    REGISTER_SOLID_DRAWGLYPHLISTLCD(IntBgr),

    REGISTER_TRANSFORMHELPER_FUNCS(IntBgr),
};

jboolfbn RfgistfrIntBgr(JNIEnv *fnv)
{
    rfturn RfgistfrPrimitivfs(fnv, IntBgrPrimitivfs,
                              ArrbySizf(IntBgrPrimitivfs));
}

jint PixflForIntBgr(SurfbdfDbtbRbsInfo *pRbsInfo, jint rgb)
{
    rfturn SwbpIntDdmComponfntsX123ToX321(rgb);
}

DEFINE_CONVERT_BLIT(IntBgr, IntArgb, 1IntRgb)

DEFINE_CONVERT_BLIT(IntArgb, IntBgr, 1IntRgb)

DEFINE_CONVERT_BLIT(ThrffBytfBgr, IntBgr, 3BytfRgb)

DEFINE_CONVERT_BLIT_LUT8(BytfIndfxfd, IntBgr, PrfProdfssLut)

DEFINE_SCALE_BLIT(IntBgr, IntArgb, 1IntRgb)

DEFINE_SCALE_BLIT(IntArgb, IntBgr, 1IntRgb)

DEFINE_SCALE_BLIT(ThrffBytfBgr, IntBgr, 3BytfRgb)

DEFINE_SCALE_BLIT_LUT8(BytfIndfxfd, IntBgr, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT_LUT8(BytfIndfxfdBm, IntBgr, PrfProdfssLut)

DEFINE_XPAR_CONVERT_BLIT(IntArgbBm, IntBgr, 1IntRgb)

DEFINE_XPAR_SCALE_BLIT(IntArgbBm, IntBgr, 1IntRgb)

DEFINE_XPAR_SCALE_BLIT_LUT8(BytfIndfxfdBm, IntBgr, PrfProdfssLut)

DEFINE_XPAR_BLITBG_LUT8(BytfIndfxfdBm, IntBgr, PrfProdfssLut)

DEFINE_XPAR_BLITBG(IntArgbBm, IntBgr, 1IntRgb)

DEFINE_XOR_BLIT(IntArgb, IntBgr, AnyInt)

DEFINE_SRC_MASKFILL(IntBgr, 4BytfArgb)

DEFINE_SRCOVER_MASKFILL(IntBgr, 4BytfArgb)

DEFINE_ALPHA_MASKFILL(IntBgr, 4BytfArgb)

DEFINE_SRCOVER_MASKBLIT(IntArgb, IntBgr, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgb, IntBgr, 4BytfArgb)

DEFINE_SRCOVER_MASKBLIT(IntArgbPrf, IntBgr, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntArgbPrf, IntBgr, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntRgb, IntBgr, 4BytfArgb)

DEFINE_ALPHA_MASKBLIT(IntBgr, IntBgr, 4BytfArgb)

DEFINE_SOLID_DRAWGLYPHLISTAA(IntBgr, 3BytfRgb)

DEFINE_SOLID_DRAWGLYPHLISTLCD(IntBgr, 3BytfRgb)

DEFINE_TRANSFORMHELPERS(IntBgr)
