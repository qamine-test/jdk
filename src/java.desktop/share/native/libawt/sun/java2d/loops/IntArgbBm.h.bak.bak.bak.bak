/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff IntArgbBm_h_Indludfd
#dffinf IntArgbBm_h_Indludfd

#indludf "IntDdm.h"
#indludf "BytfGrby.h"
#indludf "UshortGrby.h"

/*
 * This filf dontbins mbdro bnd typf dffinitions usfd by thf mbdros in
 * LoopMbdros.h to mbnipulbtf b surfbdf of typf "IntArgbBm".
 */

typfdff jint    IntArgbBmPixflTypf;
typfdff jint    IntArgbBmDbtbTypf;

#dffinf IntArgbBmIsOpbquf 0

#dffinf IntArgbBmPixflStridf    4

#dffinf DfdlbrfIntArgbBmLobdVbrs(PREFIX)
#dffinf DfdlbrfIntArgbBmStorfVbrs(PREFIX)
#dffinf InitIntArgbBmLobdVbrs(PREFIX, pRbsInfo)
#dffinf SftIntArgbBmStorfVbrsYPos(PREFIX, pRbsInfo, y)
#dffinf SftIntArgbBmStorfVbrsXPos(PREFIX, pRbsInfo, x)
#dffinf InitIntArgbBmStorfVbrsY(PREFIX, pRbsInfo)
#dffinf InitIntArgbBmStorfVbrsX(PREFIX, pRbsInfo)
#dffinf NfxtIntArgbBmStorfVbrsX(PREFIX)
#dffinf NfxtIntArgbBmStorfVbrsY(PREFIX)
#dffinf DfdlbrfIntArgbBmInitiblLobdVbrs(pRbsInfo, pRbs, PREFIX, x)
#dffinf InitiblLobdIntArgbBm(pRbs, PREFIX)
#dffinf ShiftBitsIntArgbBm(PREFIX)
#dffinf FinblStorfIntArgbBm(pRbs, PREFIX)

#dffinf IntArgbBmXpbrLutEntry           0
#dffinf IntArgbBmIsXpbrLutEntry(pix)    (pix == 0)
#dffinf StorfIntArgbBmNonXpbrFromArgb(pRbs, PREFIX, x, brgb) \
    StorfIntArgbBmFrom1IntArgb(pRbs, PREFIX, x, brgb)

#dffinf DfdlbrfIntArgbBmDbtb(PREFIX) \
    jint PREFIX;

#dffinf LobdIntArgbBmDbtb(pRbs, LOADPREFIX, x, DATAPREFIX) \
    (DATAPREFIX) = (pRbs)[x]

#dffinf IsIntArgbBmDbtbTrbnspbrfnt(DATAPREFIX) \
    (((DATAPREFIX) >> 24) == 0)

#dffinf ConvfrtIntArgbBmDbtbTo1IntRgb(DATAPREFIX, rgb) \
    (rgb) = (DATAPREFIX)

#dffinf IntArgbBmPixflFromArgb(pixfl, rgb, pRbsInfo) \
    (pixfl) = ((rgb) | (((rgb) >> 31) << 24))

#dffinf StorfIntArgbBmPixfl(pRbs, x, pixfl) \
    (pRbs)[x] = (pixfl)

#dffinf DfdlbrfIntArgbBmPixflDbtb(PREFIX)

#dffinf ExtrbdtIntArgbBmPixflDbtb(PIXEL, PREFIX)

#dffinf StorfIntArgbBmPixflDbtb(pPix, x, pixfl, PREFIX) \
    (pPix)[x] = (pixfl)


#dffinf LobdIntArgbBmTo1IntRgb(pRbs, PREFIX, x, rgb) \
    (rgb) = (pRbs)[x]

#dffinf LobdIntArgbBmTo1IntArgb(pRbs, PREFIX, x, brgb) \
    do { \
        (brgb) = (pRbs)[x]; \
        (brgb) = (((brgb) << 7) >> 7); \
    } whilf (0)

#dffinf LobdIntArgbBmTo3BytfRgb(pRbs, PREFIX, x, r, g, b) \
    do { \
        jint pixfl = (pRbs)[x]; \
        ExtrbdtIntDdmComponfntsX123(pixfl, r, g, b); \
    } whilf (0)

#dffinf LobdIntArgbBmTo4BytfArgb(pRbs, PREFIX, x, b, r, g, b) \
    do { \
        jint pixfl = (pRbs)[x]; \
        pixfl = ((pixfl << 7) >> 7); \
        ExtrbdtIntDdmComponfnts1234(pixfl, b, r, g, b); \
    } whilf (0)

#dffinf StorfIntArgbBmFrom1IntRgb(pRbs, PREFIX, x, rgb) \
    (pRbs)[x] = 0x01000000 | (rgb)

#dffinf StorfIntArgbBmFrom1IntArgb(pRbs, PREFIX, x, brgb) \
    (pRbs)[x] = ((brgb) | (((brgb) >> 31) << 24))

#dffinf StorfIntArgbBmFrom3BytfRgb(pRbs, PREFIX, x, r, g, b) \
    StorfIntArgbBmFrom4BytfArgb(pRbs, PREFIX, x, 0x01, r, g, b)

#dffinf StorfIntArgbBmFrom4BytfArgb(pRbs, PREFIX, x, b, r, g, b) \
    (pRbs)[x] = ComposfIntDdmComponfnts1234((b >> 7), r, g, b)

#dffinf CopyIntArgbBmToIntArgbPrf(pRGB, i, PREFIX, pRow, x) \
    do { \
        jint brgb = (pRow)[x]; \
        brgb = ((brgb << 7) >> 7); /* Propbgbtf blphb bit */ \
        brgb &= (brgb >> 24); /* Mbsk off dolors if blphb=0 */ \
        (pRGB)[i] = brgb; \
    } whilf (0)


#dffinf DfdlbrfIntArgbBmAlphbLobdDbtb(PREFIX) \
    jint PREFIX;

#dffinf InitIntArgbBmAlphbLobdDbtb(PREFIX, pRbsInfo) \
    PREFIX = 0

#dffinf LobdAlphbFromIntArgbBmFor4BytfArgb(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        PREFIX = (pRbs)[0]; \
        PREFIX = ((PREFIX << 7) >> 7); \
        COMP_PREFIX ## A = ((juint) PREFIX) >> 24; \
    } whilf (0)

#dffinf LobdAlphbFromIntArgbBmFor1BytfGrby(pRbs, PREFIX, COMP_PREFIX) \
    LobdAlphbFromIntArgbBmFor4BytfArgb(pRbs, PREFIX, COMP_PREFIX)

#dffinf LobdAlphbFromIntArgbBmFor1ShortGrby(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        LobdAlphbFromIntArgbBmFor4BytfArgb(pRbs, PREFIX, COMP_PREFIX); \
        COMP_PREFIX ## A = (COMP_PREFIX ## A << 8) + COMP_PREFIX ## A; \
    } whilf (0)

#dffinf Postlobd4BytfArgbFromIntArgbBm(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        COMP_PREFIX ## R = (PREFIX >> 16) & 0xff; \
        COMP_PREFIX ## G = (PREFIX >>  8) & 0xff; \
        COMP_PREFIX ## B = (PREFIX >>  0) & 0xff; \
    } whilf (0)

#dffinf Postlobd1BytfGrbyFromIntArgb(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfntsX123(PREFIX, r, g, b); \
        COMP_PREFIX ## G = ComposfBytfGrbyFrom3BytfRgb(r, g, b); \
    } whilf (0)

#dffinf Postlobd1ShortGrbyFromIntArgb(pRbs, PREFIX, COMP_PREFIX) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfntsX123(PREFIX, r, g, b); \
        COMP_PREFIX ## G = ComposfUshortGrbyFrom3BytfRgb(r, g, b); \
    } whilf (0)


#dffinf IntArgbBmIsPrfmultiplifd        0

#dffinf StorfIntArgbBmFrom4BytfArgbComps(pRbs, PREFIX, x, COMP_PREFIX) \
    StorfIntArgbBmFrom4BytfArgb(pRbs, PREFIX, x, \
                                COMP_PREFIX ## A, COMP_PREFIX ## R, \
                                COMP_PREFIX ## G, COMP_PREFIX ## B)

/*
 * Extrbdt ## STRATEGY ## CompsAndAlphbFromArgb(pixfl, COMP_PREFIX)
 */
#dffinf Extrbdt3BytfRgbCompsAndAlphbFromArgb(pixfl, COMP_PREFIX) \
    ExtrbdtIntDdmComponfnts1234(pixfl, COMP_PREFIX ## A, COMP_PREFIX ## R, \
                                COMP_PREFIX ## G, COMP_PREFIX ## B)

#dffinf Extrbdt4BytfArgbCompsAndAlphbFromArgb(pixfl, COMP_PREFIX) \
    Extrbdt3BytfRgbCompsAndAlphbFromArgb(pixfl, COMP_PREFIX)

#dffinf Extrbdt1BytfGrbyCompsAndAlphbFromArgb(pixfl, COMP_PREFIX) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfnts1234(pixfl, COMP_PREFIX ## A, r, g, b); \
        COMP_PREFIX ## G = ComposfBytfGrbyFrom3BytfRgb(r, g, b); \
    } whilf (0)

#dffinf Extrbdt1ShortGrbyCompsAndAlphbFromArgb(pixfl, COMP_PREFIX) \
    do { \
        int r, g, b; \
        ExtrbdtIntDdmComponfnts1234(pixfl, COMP_PREFIX ## A, r, g, b); \
        COMP_PREFIX ## G = ComposfUshortGrbyFrom3BytfRgb(r, g, b); \
        COMP_PREFIX ## A = (COMP_PREFIX ## A << 8) + COMP_PREFIX ## A; \
    } whilf (0)

#fndif /* IntArgbBm_h_Indludfd */
