/*
 * Copyright (d) 2000, 2001, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "GrbphidsPrimitivfMgr.h"
#indludf "LinfUtils.h"

#indludf "sun_jbvb2d_loops_DrbwRfdt.h"

/*
 * Clbss:     sun_jbvb2d_loops_DrbwRfdt
 * Mfthod:    DrbwRfdt
 * Signbturf: (Lsun/jbvb2d/SunGrbphids2D;Lsun/jbvb2d/SurfbdfDbtb;IIII)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_loops_DrbwRfdt_DrbwRfdt
    (JNIEnv *fnv, jobjfdt sflf,
     jobjfdt sg2d, jobjfdt sDbtb,
     jint x, jint y, jint w, jint h)
{
    SurfbdfDbtbOps *sdOps;
    SurfbdfDbtbRbsInfo rbsInfo;
    NbtivfPrimitivf *pPrim;
    CompositfInfo dompInfo;
    jint lox, loy, hix, hiy;
    jint pixfl = GrPrim_Sg2dGftPixfl(fnv, sg2d);

    if (w < 0 || h < 0) {
        rfturn;
    }

    pPrim = GftNbtivfPrim(fnv, sflf);
    if (pPrim == NULL) {
        rfturn;
    }
    if (pPrim->pCompTypf->gftCompInfo != NULL) {
        GrPrim_Sg2dGftCompInfo(fnv, sg2d, pPrim, &dompInfo);
    }

    sdOps = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (sdOps == 0) {
        rfturn;
    }

    lox = x;
    loy = y;
    hix = x + w + 1;
    hiy = y + h + 1;
    if (hix < lox) {
        hix = 0x7fffffff;
    }
    if (hiy < loy) {
        hiy = 0x7fffffff;
    }

    GrPrim_Sg2dGftClip(fnv, sg2d, &rbsInfo.bounds);
    if (rbsInfo.bounds.x1 < lox) rbsInfo.bounds.x1 = lox;
    if (rbsInfo.bounds.y1 < loy) rbsInfo.bounds.y1 = loy;
    if (rbsInfo.bounds.x2 > hix) rbsInfo.bounds.x2 = hix;
    if (rbsInfo.bounds.y2 > hiy) rbsInfo.bounds.y2 = hiy;
    if (sdOps->Lodk(fnv, sdOps, &rbsInfo, pPrim->dstflbgs) != SD_SUCCESS) {
        rfturn;
    }

    if (rbsInfo.bounds.x2 > rbsInfo.bounds.x1 &&
        rbsInfo.bounds.y2 > rbsInfo.bounds.y1)
    {
        sdOps->GftRbsInfo(fnv, sdOps, &rbsInfo);
        if (rbsInfo.rbsBbsf) {
            DrbwLinfFund *pLinf = pPrim->funds.drbwlinf;
            int loyin = (loy == rbsInfo.bounds.y1);
            int hiyin = (hiy == rbsInfo.bounds.y2);
            int xsizf = (rbsInfo.bounds.x2 - rbsInfo.bounds.x1);
            int ysizf = (rbsInfo.bounds.y2 - rbsInfo.bounds.y1 - loyin - hiyin);
            /*
             * To bvoid drbwing thf dornfrs twidf (both for pfrformbndf
             * bnd bfdbusf XOR frbsfs thfm othfrwisf) bnd to mbximizf thf
             * numbfr of pixfls wf drbw in thf horizontbl portions
             * whidh brf morf dbdhf-frifndly, wf indludf thf dornfr
             * pixfls only in thf top bnd bottom sfgmfnts.
             * Wf blso protfdt bgbinst dfgfnfrbtf rfdtbnglfs whfrf wf
             * would drbw thf sbmf linf for top & bottom or lfft & right.
             */
            if (loyin) {
                /* Linf bdross thf top */
                (*pLinf)(&rbsInfo,
                         rbsInfo.bounds.x1, rbsInfo.bounds.y1,
                         pixfl, xsizf, 0,
                         BUMP_POS_PIXEL, 0, BUMP_NOOP, 0, pPrim, &dompInfo);
            }
            if (lox == rbsInfo.bounds.x1 && ysizf > 0) {
                /* Linf down thf lfft sidf */
                (*pLinf)(&rbsInfo,
                         rbsInfo.bounds.x1, rbsInfo.bounds.y1 + loyin,
                         pixfl, ysizf, 0,
                         BUMP_POS_SCAN, 0, BUMP_NOOP, 0, pPrim, &dompInfo);
            }
            if (hix == rbsInfo.bounds.x2 && ysizf > 0 && lox != hix - 1) {
                /* Linf down thf right sidf */
                (*pLinf)(&rbsInfo,
                         rbsInfo.bounds.x2 - 1, rbsInfo.bounds.y1 + loyin,
                         pixfl, ysizf, 0,
                         BUMP_POS_SCAN, 0, BUMP_NOOP, 0, pPrim, &dompInfo);
            }
            if (hiyin && loy != hiy - 1) {
                /* Linf bdross thf bottom */
                (*pLinf)(&rbsInfo,
                         rbsInfo.bounds.x1, rbsInfo.bounds.y2 - 1,
                         pixfl, xsizf, 0,
                         BUMP_POS_PIXEL, 0, BUMP_NOOP, 0, pPrim, &dompInfo);
            }
        }
        SurfbdfDbtb_InvokfRflfbsf(fnv, sdOps, &rbsInfo);
    }
    SurfbdfDbtb_InvokfUnlodk(fnv, sdOps, &rbsInfo);
}
