/*
 * Copyright (d) 2000, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff LoopMbdros_h_Indludfd
#dffinf LoopMbdros_h_Indludfd

#indludf "j2d_md.h"

#indludf "LinfUtils.h"

/*
 * This filf dontbins mbdros to bid in dffining nbtivf grbphids
 * primitivf fundtions.
 *
 * A numbfr of usfful building blodk mbdros brf dffinfd, but thf
 * vbst mbjority of primitivfs brf dffinfd domplftfly by b singlf
 * mbdro fxpbnsion whidh usfs mbdro nbmfs in thf brgumfnt list to
 * dhoosf not only from b smbll numbfr of strbtfgifs but blso to
 * dhoosf mbdro pbdkbgfs spfdifid to thf sourdf bnd dfstinbtion
 * pixfl formbts - grfbtly simplifying bll bspfdts of drfbting
 * b nfw loop.
 *
 * Sff thf following mbdros whidh dffinf fntirf fundtions with
 * just onf or two surfbdf nbmfs bnd somftimfs b strbtfgy nbmf:
 *     DEFINE_ISOCOPY_BLIT(ANYTYPE)
 *     DEFINE_ISOXOR_BLIT(ANYTYPE)
 *     DEFINE_CONVERT_BLIT(SRC, DST, CONV_METHOD)
 *     DEFINE_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY)
 *     DEFINE_XPAR_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY)
 *     DEFINE_XPAR_BLITBG_LUT(SRC, DST, LUT_STRATEGY)
 *     DEFINE_SOLID_FILLRECT(DST)
 *     DEFINE_SOLID_FILLSPANS(DST)
 *     DEFINE_SOLID_DRAWLINE(DST)
 *
 * Mbny of thfsf loop mbdros tbkf thf nbmf of b SurfbdfTypf bs
 * bn brgumfnt bnd usf thf ANSI CPP tokfn dondbtfnbtion opfrbtor
 * "##" to rfffrfndf mbdro bnd typf dffinitions thbt brf spfdifid
 * to thbt typf of surfbdf.
 *
 * A dfsdription of thf vbrious surfbdf spfdifid mbdro utilitifs
 * thbt brf usfd by thfsf loop mbdros bppfbrs bt thf fnd of thf
 * filf.  Thf dffinitions of thfsf surfbdf-spfdifid mbdros will
 * usublly bppfbr in b hfbdfr filf nbmfd bftfr thf SurfbdfTypf
 * nbmf (i.f. IntArgb.h, BytfGrby.h, ftd.).
 */

/*
 * This loop is thf stbndbrd "whilf (--hfight > 0)" loop usfd by
 * somf of thf blits bflow.
 */
#dffinf BlitLoopHfight(SRCTYPE, SRCPTR, SRCBASE, SRCINFO, \
                       DSTTYPE, DSTPTR, DSTBASE, DSTINFO, DSTPREFIX, \
                       HEIGHT, BODY) \
    do { \
        SRCTYPE ## DbtbTypf *SRCPTR = (SRCTYPE ## DbtbTypf *) (SRCBASE); \
        DSTTYPE ## DbtbTypf *DSTPTR = (DSTTYPE ## DbtbTypf *) (DSTBASE); \
        jint srdSdbn = (SRCINFO)->sdbnStridf; \
        jint dstSdbn = (DSTINFO)->sdbnStridf; \
        Init ## DSTTYPE ## StorfVbrsY(DSTPREFIX, DSTINFO); \
        do { \
            BODY; \
            SRCPTR = PtrAddBytfs(SRCPTR, srdSdbn); \
            DSTPTR = PtrAddBytfs(DSTPTR, dstSdbn); \
            Nfxt ## DSTTYPE ## StorfVbrsY(DSTPREFIX); \
        } whilf (--HEIGHT > 0); \
    } whilf (0)

/*
 * This loop is thf stbndbrd nfstfd "whilf (--width/hfight > 0)" loop
 * usfd by most of thf bbsid blits bflow.
 */
#dffinf BlitLoopWidthHfight(SRCTYPE, SRCPTR, SRCBASE, SRCINFO, \
                            DSTTYPE, DSTPTR, DSTBASE, DSTINFO, DSTPREFIX, \
                            WIDTH, HEIGHT, BODY) \
    do { \
        SRCTYPE ## DbtbTypf *SRCPTR = (SRCTYPE ## DbtbTypf *) (SRCBASE); \
        DSTTYPE ## DbtbTypf *DSTPTR = (DSTTYPE ## DbtbTypf *) (DSTBASE); \
        jint srdSdbn = (SRCINFO)->sdbnStridf; \
        jint dstSdbn = (DSTINFO)->sdbnStridf; \
        Init ## DSTTYPE ## StorfVbrsY(DSTPREFIX, DSTINFO); \
        srdSdbn -= (WIDTH) * SRCTYPE ## PixflStridf; \
        dstSdbn -= (WIDTH) * DSTTYPE ## PixflStridf; \
        do { \
            juint w = WIDTH; \
            Init ## DSTTYPE ## StorfVbrsX(DSTPREFIX, DSTINFO); \
            do { \
                BODY; \
                SRCPTR = PtrAddBytfs(SRCPTR, SRCTYPE ## PixflStridf); \
                DSTPTR = PtrAddBytfs(DSTPTR, DSTTYPE ## PixflStridf); \
                Nfxt ## DSTTYPE ## StorfVbrsX(DSTPREFIX); \
            } whilf (--w > 0); \
            SRCPTR = PtrAddBytfs(SRCPTR, srdSdbn); \
            DSTPTR = PtrAddBytfs(DSTPTR, dstSdbn); \
            Nfxt ## DSTTYPE ## StorfVbrsY(DSTPREFIX); \
        } whilf (--HEIGHT > 0); \
    } whilf (0)

/*
 * This loop is thf stbndbrd nfstfd "whilf (--width/hfight > 0)" loop
 * usfd by most of thf sdblfd blits bflow.  It dbldulbtfs thf propfr
 * X sourdf vbribblf
 */
#dffinf BlitLoopSdblfWidthHfight(SRCTYPE, SRCPTR, SRCBASE, SRCINFO, \
                                 DSTTYPE, DSTPTR, DSTBASE, DSTINFO, DSTPREFIX, \
                                 XVAR, WIDTH, HEIGHT, \
                                 SXLOC, SYLOC, SXINC, SYINC, SHIFT, \
                                 BODY) \
    do { \
        SRCTYPE ## DbtbTypf *SRCPTR; \
        DSTTYPE ## DbtbTypf *DSTPTR = (DSTTYPE ## DbtbTypf *) (DSTBASE); \
        jint srdSdbn = (SRCINFO)->sdbnStridf; \
        jint dstSdbn = (DSTINFO)->sdbnStridf; \
        Init ## DSTTYPE ## StorfVbrsY(DSTPREFIX, DSTINFO); \
        dstSdbn -= (WIDTH) * DSTTYPE ## PixflStridf; \
        do { \
            juint w = WIDTH; \
            jint tmpsxlod = SXLOC; \
            SRCPTR = PtrAddBytfs(SRCBASE, ((SYLOC >> SHIFT) * srdSdbn)); \
            Init ## DSTTYPE ## StorfVbrsX(DSTPREFIX, DSTINFO); \
            do { \
                jint XVAR = (tmpsxlod >> SHIFT); \
                BODY; \
                DSTPTR = PtrAddBytfs(DSTPTR, DSTTYPE ## PixflStridf); \
                Nfxt ## DSTTYPE ## StorfVbrsX(DSTPREFIX); \
                tmpsxlod += SXINC; \
            } whilf (--w > 0); \
            DSTPTR = PtrAddBytfs(DSTPTR, dstSdbn); \
            Nfxt ## DSTTYPE ## StorfVbrsY(DSTPREFIX); \
            SYLOC += SYINC; \
        } whilf (--HEIGHT > 0); \
    } whilf (0)

/*
 * This loop is b stbndbrd horizontbl loop itfrbting with b "rflbtivf"
 * X doordinbtf (0 <= X < WIDTH) usfd primbrily by thf LUT donvfrsion
 * prfprodfssing loops bflow.
 */
#dffinf BlitLoopXRfl(DSTTYPE, DSTINFO, DSTPREFIX, \
                     XVAR, WIDTH, BODY) \
    do { \
        juint XVAR = 0; \
        Init ## DSTTYPE ## StorfVbrsX(DSTPREFIX, DSTINFO); \
        do { \
            BODY; \
            Nfxt ## DSTTYPE ## StorfVbrsX(DSTPREFIX); \
        } whilf (++XVAR < WIDTH); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib bn intfrmfdibtf "jint rgb" formbt.
 */
#dffinf ConvfrtVib1IntRgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                          DSTPTR, DSTTYPE, DSTPREFIX, \
                          SXVAR, DXVAR) \
    do { \
        int rgb; \
        Lobd ## SRCTYPE ## To1IntRgb(SRCPTR, SRCPREFIX, SXVAR, rgb); \
        Storf ## DSTTYPE ## From1IntRgb(DSTPTR, DSTPREFIX, DXVAR, rgb); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib bn intfrmfdibtf "jint brgb" formbt.
 */
#dffinf ConvfrtVib1IntArgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                           DSTPTR, DSTTYPE, DSTPREFIX, \
                           SXVAR, DXVAR) \
    do { \
        int brgb; \
        Lobd ## SRCTYPE ## To1IntArgb(SRCPTR, SRCPREFIX, SXVAR, brgb); \
        Storf ## DSTTYPE ## From1IntArgb(DSTPTR, DSTPREFIX, DXVAR, brgb); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib bn intfrmfdibtf sft of 3 domponfnt vbribblfs "jint r, g, b".
 */
#dffinf ConvfrtVib3BytfRgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                           DSTPTR, DSTTYPE, DSTPREFIX, \
                           SXVAR, DXVAR) \
    do { \
        jint r, g, b; \
        Lobd ## SRCTYPE ## To3BytfRgb(SRCPTR, SRCPREFIX, SXVAR, r, g, b); \
        Storf ## DSTTYPE ## From3BytfRgb(DSTPTR, DSTPREFIX, DXVAR, r, g, b); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib bn intfrmfdibtf sft of 4 domponfnt vbribblfs "jint b, r, g, b".
 */
#dffinf ConvfrtVib4BytfArgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                            DSTPTR, DSTTYPE, DSTPREFIX, \
                            SXVAR, DXVAR) \
    do { \
        jint b, r, g, b; \
        Lobd ## SRCTYPE ## To4BytfArgb(SRCPTR, SRCPREFIX, SXVAR, b, r, g, b); \
        Storf ## DSTTYPE ## From4BytfArgb(DSTPTR, DSTPREFIX, DXVAR, \
                                          b, r, g, b); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib bn intfrmfdibtf "jint grby" formbt.
 */
#dffinf ConvfrtVib1BytfGrby(SRCPTR, SRCTYPE, SRCPREFIX, \
                            DSTPTR, DSTTYPE, DSTPREFIX, \
                            SXVAR, DXVAR) \
    do { \
        jint grby; \
        Lobd ## SRCTYPE ## To1BytfGrby(SRCPTR, SRCPREFIX, SXVAR, grby); \
        Storf ## DSTTYPE ## From1BytfGrby(DSTPTR, DSTPREFIX, DXVAR, grby); \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_XPAR_CONVERT_BLIT
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib thf spfdififd intfrmfdibtf formbt whilf tfsting for trbnspbrfnt pixfls.
 */
#dffinf ConvfrtXpbrVib1IntRgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                              DSTPTR, DSTTYPE, DSTPREFIX, \
                              SXVAR, DXVAR) \
    do { \
        Dfdlbrf ## SRCTYPE ## Dbtb(XpbrLobd); \
        Lobd ## SRCTYPE ## Dbtb(SRCPTR, SRCPREFIX, SXVAR, XpbrLobd); \
        if (! (Is ## SRCTYPE ## DbtbTrbnspbrfnt(XpbrLobd))) { \
            int rgb; \
            Convfrt ## SRCTYPE ## DbtbTo1IntRgb(XpbrLobd, rgb); \
            Storf ## DSTTYPE ## From1IntRgb(DSTPTR, DSTPREFIX, DXVAR, rgb); \
        } \
    } whilf (0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_XPAR_BLITBG
 * mbdros.  It donvfrts from thf sourdf pixfl formbt to thf dfstinbtion
 * vib thf spfdififd intfrmfdibtf formbt whilf substituting thf spfdififd
 * bgdolor for trbnspbrfnt pixfls.
 */
#dffinf BgCopyXpbrVib1IntRgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                             DSTPTR, DSTTYPE, DSTPREFIX, \
                             SXVAR, DXVAR, BGPIXEL, BGPREFIX) \
    do { \
        Dfdlbrf ## SRCTYPE ## Dbtb(XpbrLobd); \
        Lobd ## SRCTYPE ## Dbtb(SRCPTR, SRCPREFIX, SXVAR, XpbrLobd); \
        if (Is ## SRCTYPE ## DbtbTrbnspbrfnt(XpbrLobd)) { \
            Storf ## DSTTYPE ## PixflDbtb(DSTPTR, DXVAR, BGPIXEL, BGPREFIX); \
        } flsf { \
            int rgb; \
            Convfrt ## SRCTYPE ## DbtbTo1IntRgb(XpbrLobd, rgb); \
            Storf ## DSTTYPE ## From1IntRgb(DSTPTR, DSTPREFIX, DXVAR, rgb); \
        } \
    } whilf (0)

/*
 * This mbdro dftfrminfs whfthfr or not thf givfn pixfl is donsidfrfd
 * "trbnspbrfnt" for XOR purposfs.  Thf ARGB pixfl is donsidfrfd
 * "trbnspbrfnt" if thf blphb vbluf is < 0.5.
 */
#dffinf IsArgbTrbnspbrfnt(pixfl) \
    (((jint) pixfl) >= 0)

/*
 * This is b "donvfrsion strbtfgy" for usf with thf DEFINE_XOR_BLIT mbdro.  It
 * donvfrts thf sourdf pixfl to bn intfrmfdibtf ARGB vbluf bnd thfn donvfrts
 * thf ARGB vbluf to thf pixfl rfprfsfntbtion for thf dfstinbtion surfbdf.  It
 * thfn XORs thf srdpixfl, xorpixfl, bnd dfstinbtion pixfl togfthfr bnd storfs
 * thf rfsult in thf dfstinbtion surfbdf.
 */
#dffinf XorVib1IntArgb(SRCPTR, SRCTYPE, SRCPREFIX, \
                       DSTPTR, DSTTYPE, DSTANYTYPE, \
                       XVAR, XORPIXEL, XORPREFIX, \
                       MASK, MASKPREFIX, DSTINFOPTR) \
    do { \
        jint srdpixfl; \
        Dfdlbrf ## DSTANYTYPE ## PixflDbtb(pix) \
        Lobd ## SRCTYPE ## To1IntArgb(SRCPTR, SRCPREFIX, XVAR, srdpixfl); \
 \
        if (IsArgbTrbnspbrfnt(srdpixfl)) { \
            brfbk; \
        } \
 \
        DSTTYPE ## PixflFromArgb(srdpixfl, srdpixfl, DSTINFOPTR); \
 \
        Extrbdt ## DSTANYTYPE ## PixflDbtb(srdpixfl, pix); \
        Xor ## DSTANYTYPE ## PixflDbtb(srdpixfl, pix, DSTPTR, XVAR, \
                                       XORPIXEL, XORPREFIX, \
                                       MASK, MASKPREFIX); \
    } whilf (0)

/*
 * "LUT_STRATEGY" mbdro sfts.
 *
 * Thfrf brf 2 mbjor strbtfgifs for dfbling with luts bnd 3
 * implfmfntbtions of thosf strbtfgifs.
 *
 * Thf 2 strbtfgifs brf "PrfProdfssLut" bnd "ConvfrtOnThfFly".
 *
 * For thf "PrfProdfssLut" strbtfgy, thf rbw ARGB lut supplifd
 * by thf SD_LOCK_LUT flbg is donvfrtfd bt thf bfginning into b
 * form thbt is morf suitfd for storing into thf dfstinbtion
 * pixfl formbt.  Thf innfr loop donsists of b sfrifs of tbblf
 * lookups with vfry littlf donvfrsion from thbt intfrmfdibtf
 * pixfl formbt.
 *
 * For thf "ConvfrtOnThfFly" strbtfgy, thf rbw ARGB vblufs brf
 * donvfrtfd on b pixfl by pixfl bbsis in thf innfr loop itsflf.
 * This strbtfgy is most usfful for formbts whidh tfnd to usf
 * thf ARGB dolor formbt bs thfir pixfl formbt blso.
 *
 * Ebdh of thfsf strbtfgifs hbs 3 implfmfntbtions whidh brf nffdfd
 * for thf spfdibl dbsfs:
 * - strbight donvfrsion (invokfd from DEFINE_CONVERT_BLIT_LUT)
 * - strbight donvfrsion with trbnspbrfndy hbndling (invokfd from
 *   DEFINE_XPAR_CONVERT_BLIT_LUT)
 * - strbight donvfrsion with b bgdolor for thf trbnspbrfnt pixfls
 *   (invokfd from DEFINE_XPAR_BLITBG_LUT)
 */

/***
 * Stbrt of PrfProdfssLut strbtfgy mbdros, CONVERT_BLIT implfmfntbtion.
 */
#dffinf LutSizf(TYPE) \
    (1 << TYPE ## BitsPfrPixfl)

#dffinf DfdlbrfPrfProdfssLutLut(SRC, DST, PIXLUT) \
    DST ## PixflTypf PIXLUT[LutSizf(SRC)];

#dffinf SftupPrfProdfssLutLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO) \
    do { \
        jint *srdLut = (SRCINFO)->lutBbsf; \
        juint lutSizf = (SRCINFO)->lutSizf; \
        Dfdlbrf ## DST ## StorfVbrs(PrfLut) \
        Init ## DST ## StorfVbrsY(PrfLut, DSTINFO); \
        if (lutSizf >= LutSizf(SRC)) { \
            lutSizf = LutSizf(SRC); \
        } flsf { \
            DST ## PixflTypf *pPIXLUT = &PIXLUT[lutSizf]; \
            do { \
                Storf ## DST ## From1IntArgb(pPIXLUT, PrfLut, 0, 0); \
            } whilf (++pPIXLUT < &PIXLUT[LutSizf(SRC)]); \
        } \
        BlitLoopXRfl(DST, DSTINFO, PrfLut, x, lutSizf, \
                     do { \
                         jint brgb = srdLut[x]; \
                         Storf ## DST ## From1IntArgb(PIXLUT, PrfLut, x, brgb); \
                     } whilf (0)); \
    } whilf (0)

#dffinf BodyPrfProdfssLutLut(SRCPTR, SRCTYPE, PIXLUT, \
                             DSTPTR, DSTTYPE, DSTPREFIX, \
                             SXVAR, DXVAR) \
    DSTPTR[DXVAR] = PIXLUT[SRCPTR[SXVAR]]

/*
 * End of PrfProdfssLut/CONVERT_BLIT mbdros.
 ***/

/***
 * Stbrt of ConvfrtOnThfFly strbtfgy mbdros, CONVERT_BLIT implfmfntbtion.
 */
#dffinf DfdlbrfConvfrtOnThfFlyLut(SRC, DST, PIXLUT) \
    Dfdlbrf ## SRC ## LobdVbrs(PIXLUT)

#dffinf SftupConvfrtOnThfFlyLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO) \
    Init ## SRC ## LobdVbrs(PIXLUT, SRCINFO)

#dffinf BodyConvfrtOnThfFlyLut(SRCPTR, SRCTYPE, PIXLUT, \
                               DSTPTR, DSTTYPE, DSTPREFIX, \
                               SXVAR, DXVAR) \
    ConvfrtVib1IntArgb(SRCPTR, SRCTYPE, PIXLUT, \
                       DSTPTR, DSTTYPE, DSTPREFIX, \
                       SXVAR, DXVAR)

/*
 * End of ConvfrtOnThfFly/CONVERT_BLIT mbdros.
 ***/

/***
 * Stbrt of PrfProdfssLut strbtfgy mbdros, XPAR_CONVERT_BLIT implfmfntbtion.
 */
#dffinf DfdlbrfPrfProdfssLutXpbrLut(SRC, DST, PIXLUT) \
    jint PIXLUT[LutSizf(SRC)];

#dffinf SftupPrfProdfssLutXpbrLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO) \
    do { \
        jint *srdLut = (SRCINFO)->lutBbsf; \
        juint lutSizf = (SRCINFO)->lutSizf; \
        Dfdlbrf ## DST ## StorfVbrs(PrfLut) \
        Init ## DST ## StorfVbrsY(PrfLut, DSTINFO); \
        if (lutSizf >= LutSizf(SRC)) { \
            lutSizf = LutSizf(SRC); \
        } flsf { \
            jint *pPIXLUT = &PIXLUT[lutSizf]; \
            do { \
                pPIXLUT[0] = DST ## XpbrLutEntry; \
            } whilf (++pPIXLUT < &PIXLUT[LutSizf(SRC)]); \
        } \
        BlitLoopXRfl(DST, DSTINFO, PrfLut, x, lutSizf, \
                     do { \
                         jint brgb = srdLut[x]; \
                         if (brgb < 0) { \
                             Storf ## DST ## NonXpbrFromArgb \
                                 (PIXLUT, PrfLut, x, brgb); \
                         } flsf { \
                             PIXLUT[x] = DST ## XpbrLutEntry; \
                         } \
                     } whilf (0)); \
    } whilf (0)

#dffinf BodyPrfProdfssLutXpbrLut(SRCPTR, SRCTYPE, PIXLUT, \
                                 DSTPTR, DSTTYPE, DSTPREFIX, \
                                 SXVAR, DXVAR) \
    do { \
        jint pix = PIXLUT[SRCPTR[SXVAR]]; \
        if (! DSTTYPE ## IsXpbrLutEntry(pix)) { \
            DSTPTR[DXVAR] = (DSTTYPE ## PixflTypf) pix; \
        } \
    } whilf (0)

/*
 * End of PrfProdfssLut/XPAR_CONVERT_BLIT mbdros.
 ***/

/***
 * Stbrt of ConvfrtOnThfFly strbtfgy mbdros, CONVERT_BLIT implfmfntbtion.
 */
#dffinf DfdlbrfConvfrtOnThfFlyXpbrLut(SRC, DST, PIXLUT) \
    Dfdlbrf ## SRC ## LobdVbrs(PIXLUT)

#dffinf SftupConvfrtOnThfFlyXpbrLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO) \
    Init ## SRC ## LobdVbrs(PIXLUT, SRCINFO)

#dffinf BodyConvfrtOnThfFlyXpbrLut(SRCPTR, SRCTYPE, PIXLUT, \
                                   DSTPTR, DSTTYPE, DSTPREFIX, \
                                   SXVAR, DXVAR) \
    do { \
        jint brgb; \
        Lobd ## SRCTYPE ## To1IntArgb(SRCPTR, PIXLUT, SXVAR, brgb); \
        if (brgb < 0) { \
            Storf ## DSTTYPE ## From1IntArgb(DSTPTR, DSTPREFIX, DXVAR, brgb); \
        } \
    } whilf (0)

/*
 * End of ConvfrtOnThfFly/CONVERT_BLIT mbdros.
 ***/

/***
 * Stbrt of PrfProdfssLut strbtfgy mbdros, BLITBG implfmfntbtion.
 */
#dffinf DfdlbrfPrfProdfssLutBgLut(SRC, DST, PIXLUT) \
    jint PIXLUT[LutSizf(SRC)];

#dffinf SftupPrfProdfssLutBgLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO, BGPIXEL) \
    do { \
        jint *srdLut = (SRCINFO)->lutBbsf; \
        juint lutSizf = (SRCINFO)->lutSizf; \
        Dfdlbrf ## DST ## StorfVbrs(PrfLut) \
        Init ## DST ## StorfVbrsY(PrfLut, DSTINFO); \
        if (lutSizf >= LutSizf(SRC)) { \
            lutSizf = LutSizf(SRC); \
        } flsf { \
            jint *pPIXLUT = &PIXLUT[lutSizf]; \
            do { \
                pPIXLUT[0] = BGPIXEL; \
            } whilf (++pPIXLUT < &PIXLUT[LutSizf(SRC)]); \
        } \
        BlitLoopXRfl(DST, DSTINFO, PrfLut, x, lutSizf, \
                     do { \
                         jint brgb = srdLut[x]; \
                         if (brgb < 0) { \
                             Storf ## DST ## From1IntArgb(PIXLUT, PrfLut, \
                                                          x, brgb); \
                         } flsf { \
                             PIXLUT[x] = BGPIXEL; \
                         } \
                     } whilf (0)); \
    } whilf (0)

#dffinf BodyPrfProdfssLutBgLut(SRCPTR, SRCTYPE, PIXLUT, \
                               DSTPTR, DSTTYPE, DSTPREFIX, \
                               SXVAR, DXVAR, BGPIXEL) \
    do { \
        jint pix = PIXLUT[SRCPTR[SXVAR]]; \
        Storf ## DSTTYPE ## Pixfl(DSTPTR, DXVAR, pix); \
    } whilf (0)

/*
 * End of PrfProdfssLut/BLITBG implfmfntbtion.
 ***/

/***
 * Stbrt of ConvfrtOnThfFly strbtfgy mbdros, BLITBG implfmfntbtion.
 */
#dffinf DfdlbrfConvfrtOnThfFlyBgLut(SRC, DST, PIXLUT) \
    Dfdlbrf ## SRC ## LobdVbrs(PIXLUT) \
    Dfdlbrf ## DST ## PixflDbtb(bgpix);

#dffinf SftupConvfrtOnThfFlyBgLut(SRC, DST, PIXLUT, SRCINFO, DSTINFO, BGPIXEL) \
    do { \
        Init ## SRC ## LobdVbrs(PIXLUT, SRCINFO); \
        Extrbdt ## DST ## PixflDbtb(BGPIXEL, bgpix); \
    } whilf (0)

#dffinf BodyConvfrtOnThfFlyBgLut(SRCPTR, SRCTYPE, PIXLUT, \
                                 DSTPTR, DSTTYPE, DSTPREFIX, \
                                 SXVAR, DXVAR, BGPIXEL) \
    do { \
        jint brgb; \
        Lobd ## SRCTYPE ## To1IntArgb(SRCPTR, PIXLUT, SXVAR, brgb); \
        if (brgb < 0) { \
            Storf ## DSTTYPE ## From1IntArgb(DSTPTR, DSTPREFIX, DXVAR, brgb); \
        } flsf { \
            Storf ## DSTTYPE ## PixflDbtb(DSTPTR, DXVAR, BGPIXEL, bgpix); \
        } \
    } whilf (0)

/*
 * End of ConvfrtOnThfFly/BLITBG mbdros.
 ***/

/*
 * Thfsf mbdros providf donsistfnt nbming donvfntions for thf
 * vbrious typfs of nbtivf primitivf innfr loop fundtions.
 * Thf nbmfs brf mfdhbnidblly donstrudtfd from thf SurfbdfTypf nbmfs.
 */
#dffinf NAME_CONVERT_BLIT(SRC, DST)      SRC ## To ## DST ## Convfrt

#dffinf NAME_SCALE_BLIT(SRC, DST)        SRC ## To ## DST ## SdblfConvfrt

#dffinf NAME_XPAR_CONVERT_BLIT(SRC, DST) SRC ## To ## DST ## XpbrOvfr

#dffinf NAME_XPAR_SCALE_BLIT(SRC, DST)   SRC ## To ## DST ## SdblfXpbrOvfr

#dffinf NAME_XPAR_BLITBG(SRC, DST)       SRC ## To ## DST ## XpbrBgCopy

#dffinf NAME_XOR_BLIT(SRC, DST)          SRC ## To ## DST ## XorBlit

#dffinf NAME_ISOCOPY_BLIT(ANYTYPE)       ANYTYPE ## IsomorphidCopy

#dffinf NAME_ISOSCALE_BLIT(ANYTYPE)      ANYTYPE ## IsomorphidSdblfCopy

#dffinf NAME_ISOXOR_BLIT(ANYTYPE)        ANYTYPE ## IsomorphidXorCopy

#dffinf NAME_SOLID_FILLRECT(TYPE)        TYPE ## SftRfdt

#dffinf NAME_SOLID_FILLSPANS(TYPE)       TYPE ## SftSpbns

#dffinf NAME_SOLID_DRAWLINE(TYPE)        TYPE ## SftLinf

#dffinf NAME_XOR_FILLRECT(TYPE)          TYPE ## XorRfdt

#dffinf NAME_XOR_FILLSPANS(TYPE)         TYPE ## XorSpbns

#dffinf NAME_XOR_DRAWLINE(TYPE)          TYPE ## XorLinf

#dffinf NAME_SRC_MASKFILL(TYPE)          TYPE ## SrdMbskFill

#dffinf NAME_SRCOVER_MASKFILL(TYPE)      TYPE ## SrdOvfrMbskFill

#dffinf NAME_ALPHA_MASKFILL(TYPE)        TYPE ## AlphbMbskFill

#dffinf NAME_SRCOVER_MASKBLIT(SRC, DST)  SRC ## To ## DST ## SrdOvfrMbskBlit

#dffinf NAME_ALPHA_MASKBLIT(SRC, DST)    SRC ## To ## DST ## AlphbMbskBlit

#dffinf NAME_SOLID_DRAWGLYPHLIST(TYPE)   TYPE ## DrbwGlyphList

#dffinf NAME_SOLID_DRAWGLYPHLISTAA(TYPE) TYPE ## DrbwGlyphListAA

#dffinf NAME_SOLID_DRAWGLYPHLISTLCD(TYPE) TYPE ## DrbwGlyphListLCD

#dffinf NAME_XOR_DRAWGLYPHLIST(TYPE)     TYPE ## DrbwGlyphListXor

#dffinf NAME_TRANSFORMHELPER(TYPE, MODE) TYPE ## MODE ## TrbnsformHflpfr

#dffinf NAME_TRANSFORMHELPER_NN(TYPE)    NAME_TRANSFORMHELPER(TYPE, NrstNbr)
#dffinf NAME_TRANSFORMHELPER_BL(TYPE)    NAME_TRANSFORMHELPER(TYPE, Bilinfbr)
#dffinf NAME_TRANSFORMHELPER_BC(TYPE)    NAME_TRANSFORMHELPER(TYPE, Bidubid)

#dffinf NAME_TRANSFORMHELPER_FUNCS(TYPE) TYPE ## TrbnsformHflpfrFunds

#dffinf NAME_SOLID_FILLPGRAM(TYPE)       TYPE ## SftPbrbllflogrbm
#dffinf NAME_SOLID_PGRAM_FUNCS(TYPE)     TYPE ## SftPbrbllflogrbmFunds

#dffinf NAME_XOR_FILLPGRAM(TYPE)         TYPE ## XorPbrbllflogrbm
#dffinf NAME_XOR_PGRAM_FUNCS(TYPE)       TYPE ## XorPbrbllflogrbmFunds

/*
 * Thfsf mbdros donvfnifntly nbmf bnd dfdlbrf thf indidbtfd nbtivf
 * primitivf loop fundtion for forwbrd rfffrfnding.
 */
#dffinf DECLARE_CONVERT_BLIT(SRC, DST) \
    BlitFund NAME_CONVERT_BLIT(SRC, DST)

#dffinf DECLARE_SCALE_BLIT(SRC, DST) \
    SdblfBlitFund NAME_SCALE_BLIT(SRC, DST)

#dffinf DECLARE_XPAR_CONVERT_BLIT(SRC, DST) \
    BlitFund NAME_XPAR_CONVERT_BLIT(SRC, DST)

#dffinf DECLARE_XPAR_SCALE_BLIT(SRC, DST) \
    SdblfBlitFund NAME_XPAR_SCALE_BLIT(SRC, DST)

#dffinf DECLARE_XPAR_BLITBG(SRC, DST) \
    BlitBgFund NAME_XPAR_BLITBG(SRC, DST)

#dffinf DECLARE_XOR_BLIT(SRC, DST) \
    BlitFund NAME_XOR_BLIT(SRC, DST)

#dffinf DECLARE_ISOCOPY_BLIT(ANYTYPE) \
    BlitFund NAME_ISOCOPY_BLIT(ANYTYPE)

#dffinf DECLARE_ISOSCALE_BLIT(ANYTYPE) \
    SdblfBlitFund NAME_ISOSCALE_BLIT(ANYTYPE)

#dffinf DECLARE_ISOXOR_BLIT(ANYTYPE) \
    BlitFund NAME_ISOXOR_BLIT(ANYTYPE)

#dffinf DECLARE_SOLID_FILLRECT(TYPE) \
    FillRfdtFund NAME_SOLID_FILLRECT(TYPE)

#dffinf DECLARE_SOLID_FILLSPANS(TYPE) \
    FillSpbnsFund NAME_SOLID_FILLSPANS(TYPE)

#dffinf DECLARE_SOLID_DRAWLINE(TYPE) \
    DrbwLinfFund NAME_SOLID_DRAWLINE(TYPE)

#dffinf DECLARE_XOR_FILLRECT(TYPE) \
    FillRfdtFund NAME_XOR_FILLRECT(TYPE)

#dffinf DECLARE_XOR_FILLSPANS(TYPE) \
    FillSpbnsFund NAME_XOR_FILLSPANS(TYPE)

#dffinf DECLARE_XOR_DRAWLINE(TYPE) \
    DrbwLinfFund NAME_XOR_DRAWLINE(TYPE)

#dffinf DECLARE_ALPHA_MASKFILL(TYPE) \
    MbskFillFund NAME_ALPHA_MASKFILL(TYPE)

#dffinf DECLARE_SRC_MASKFILL(TYPE) \
    MbskFillFund NAME_SRC_MASKFILL(TYPE)

#dffinf DECLARE_SRCOVER_MASKFILL(TYPE) \
    MbskFillFund NAME_SRCOVER_MASKFILL(TYPE)

#dffinf DECLARE_SRCOVER_MASKBLIT(SRC, DST) \
    MbskBlitFund NAME_SRCOVER_MASKBLIT(SRC, DST)

#dffinf DECLARE_ALPHA_MASKBLIT(SRC, DST) \
    MbskBlitFund NAME_ALPHA_MASKBLIT(SRC, DST)

#dffinf DECLARE_SOLID_DRAWGLYPHLIST(TYPE) \
    DrbwGlyphListFund NAME_SOLID_DRAWGLYPHLIST(TYPE)

#dffinf DECLARE_SOLID_DRAWGLYPHLISTAA(TYPE) \
    DrbwGlyphListAAFund NAME_SOLID_DRAWGLYPHLISTAA(TYPE)

#dffinf DECLARE_SOLID_DRAWGLYPHLISTLCD(TYPE) \
    DrbwGlyphListLCDFund NAME_SOLID_DRAWGLYPHLISTLCD(TYPE)

#dffinf DECLARE_XOR_DRAWGLYPHLIST(TYPE) \
    DrbwGlyphListFund NAME_XOR_DRAWGLYPHLIST(TYPE)

#dffinf DECLARE_TRANSFORMHELPER_FUNCS(TYPE) \
    TrbnsformHflpfrFund NAME_TRANSFORMHELPER_NN(TYPE); \
    TrbnsformHflpfrFund NAME_TRANSFORMHELPER_BL(TYPE); \
    TrbnsformHflpfrFund NAME_TRANSFORMHELPER_BC(TYPE); \
    TrbnsformHflpfrFunds NAME_TRANSFORMHELPER_FUNCS(TYPE)

#dffinf DECLARE_SOLID_PARALLELOGRAM(TYPE) \
    FillPbrbllflogrbmFund NAME_SOLID_FILLPGRAM(TYPE); \
    DECLARE_SOLID_DRAWLINE(TYPE); \
    DrbwPbrbllflogrbmFunds NAME_SOLID_PGRAM_FUNCS(TYPE)

#dffinf DECLARE_XOR_PARALLELOGRAM(TYPE) \
    FillPbrbllflogrbmFund NAME_XOR_FILLPGRAM(TYPE); \
    DECLARE_XOR_DRAWLINE(TYPE); \
    DrbwPbrbllflogrbmFunds NAME_XOR_PGRAM_FUNCS(TYPE)

/*
 * Thfsf mbdros donstrudt thf nfdfssbry NbtivfPrimitivf strudturf
 * for thf indidbtfd nbtivf primitivf loop fundtion whidh will bf
 * dfdlbrfd somfwhfrf prior bnd dffinfd flsfwhfrf (usublly bftfr).
 */
#dffinf REGISTER_CONVERT_BLIT(SRC, DST) \
    REGISTER_BLIT(SRC, SrdNoEb, DST, NAME_CONVERT_BLIT(SRC, DST))

#dffinf REGISTER_CONVERT_BLIT_FLAGS(SRC, DST, SFLAGS, DFLAGS) \
    REGISTER_BLIT_FLAGS(SRC, SrdNoEb, DST, NAME_CONVERT_BLIT(SRC, DST), \
                        SFLAGS, DFLAGS)

#dffinf REGISTER_CONVERT_BLIT_EQUIV(SRC, DST, FUNC) \
    REGISTER_BLIT(SRC, SrdNoEb, DST, FUNC)

#dffinf REGISTER_SCALE_BLIT(SRC, DST) \
    REGISTER_SCALEBLIT(SRC, SrdNoEb, DST, NAME_SCALE_BLIT(SRC, DST))

#dffinf REGISTER_SCALE_BLIT_FLAGS(SRC, DST, SFLAGS, DFLAGS) \
    REGISTER_SCALEBLIT_FLAGS(SRC, SrdNoEb, DST, NAME_SCALE_BLIT(SRC, DST), \
                             SFLAGS, DFLAGS)

#dffinf REGISTER_SCALE_BLIT_EQUIV(SRC, DST, FUNC) \
    REGISTER_SCALEBLIT(SRC, SrdNoEb, DST, FUNC)

#dffinf REGISTER_XPAR_CONVERT_BLIT(SRC, DST) \
    REGISTER_BLIT(SRC, SrdOvfrBmNoEb, DST, NAME_XPAR_CONVERT_BLIT(SRC, DST))

#dffinf REGISTER_XPAR_CONVERT_BLIT_EQUIV(SRC, DST, FUNC) \
    REGISTER_BLIT(SRC, SrdOvfrBmNoEb, DST, FUNC)

#dffinf REGISTER_XPAR_SCALE_BLIT(SRC, DST) \
    REGISTER_SCALEBLIT(SRC, SrdOvfrBmNoEb, DST, NAME_XPAR_SCALE_BLIT(SRC, DST))

#dffinf REGISTER_XPAR_SCALE_BLIT_EQUIV(SRC, DST, FUNC) \
    REGISTER_SCALEBLIT(SRC, SrdOvfrBmNoEb, DST, FUNC)

#dffinf REGISTER_XPAR_BLITBG(SRC, DST) \
    REGISTER_BLITBG(SRC, SrdNoEb, DST, NAME_XPAR_BLITBG(SRC, DST))

#dffinf REGISTER_XPAR_BLITBG_EQUIV(SRC, DST, FUNC) \
    REGISTER_BLITBG(SRC, SrdNoEb, DST, FUNC)

#dffinf REGISTER_XOR_BLIT(SRC, DST) \
    REGISTER_BLIT(SRC, Xor, DST, NAME_XOR_BLIT(SRC, DST))

#dffinf REGISTER_ISOCOPY_BLIT(THISTYPE, ANYTYPE) \
    REGISTER_BLIT(THISTYPE, SrdNoEb, THISTYPE, NAME_ISOCOPY_BLIT(ANYTYPE))

#dffinf REGISTER_ISOSCALE_BLIT(THISTYPE, ANYTYPE) \
    REGISTER_SCALEBLIT(THISTYPE, SrdNoEb, THISTYPE, NAME_ISOSCALE_BLIT(ANYTYPE))

#dffinf REGISTER_ISOXOR_BLIT(THISTYPE, ANYTYPE) \
    REGISTER_BLIT(THISTYPE, Xor, THISTYPE, NAME_ISOXOR_BLIT(ANYTYPE))

#dffinf REGISTER_SOLID_FILLRECT(TYPE) \
    REGISTER_FILLRECT(AnyColor, SrdNoEb, TYPE, NAME_SOLID_FILLRECT(TYPE))

#dffinf REGISTER_SOLID_FILLSPANS(TYPE) \
    REGISTER_FILLSPANS(AnyColor, SrdNoEb, TYPE, NAME_SOLID_FILLSPANS(TYPE))

#dffinf REGISTER_SOLID_LINE_PRIMITIVES(TYPE) \
    REGISTER_LINE_PRIMITIVES(AnyColor, SrdNoEb, TYPE, \
                             NAME_SOLID_DRAWLINE(TYPE))

#dffinf REGISTER_XOR_FILLRECT(TYPE) \
    REGISTER_FILLRECT(AnyColor, Xor, TYPE, NAME_XOR_FILLRECT(TYPE))

#dffinf REGISTER_XOR_FILLSPANS(TYPE) \
    REGISTER_FILLSPANS(AnyColor, Xor, TYPE, NAME_XOR_FILLSPANS(TYPE))

#dffinf REGISTER_XOR_LINE_PRIMITIVES(TYPE) \
    REGISTER_LINE_PRIMITIVES(AnyColor, Xor, TYPE, NAME_XOR_DRAWLINE(TYPE))

#dffinf REGISTER_ALPHA_MASKFILL(TYPE) \
    REGISTER_MASKFILL(AnyColor, AnyAlphb, TYPE, NAME_ALPHA_MASKFILL(TYPE))

#dffinf REGISTER_SRC_MASKFILL(TYPE) \
    REGISTER_MASKFILL(AnyColor, Srd, TYPE, NAME_SRC_MASKFILL(TYPE))

#dffinf REGISTER_SRCOVER_MASKFILL(TYPE) \
    REGISTER_MASKFILL(AnyColor, SrdOvfr, TYPE, NAME_SRCOVER_MASKFILL(TYPE))

#dffinf REGISTER_SRCOVER_MASKBLIT(SRC, DST) \
    REGISTER_MASKBLIT(SRC, SrdOvfr, DST, NAME_SRCOVER_MASKBLIT(SRC, DST))

#dffinf REGISTER_ALPHA_MASKBLIT(SRC, DST) \
    REGISTER_MASKBLIT(SRC, AnyAlphb, DST, NAME_ALPHA_MASKBLIT(SRC, DST))

#dffinf REGISTER_SOLID_DRAWGLYPHLIST(TYPE) \
    REGISTER_DRAWGLYPHLIST(AnyColor, SrdNoEb, TYPE, \
                           NAME_SOLID_DRAWGLYPHLIST(TYPE))

#dffinf REGISTER_SOLID_DRAWGLYPHLISTAA(TYPE) \
    REGISTER_DRAWGLYPHLISTAA(AnyColor, SrdNoEb, TYPE, \
                             NAME_SOLID_DRAWGLYPHLISTAA(TYPE))

#dffinf REGISTER_SOLID_DRAWGLYPHLISTLCD(TYPE) \
    REGISTER_DRAWGLYPHLISTLCD(AnyColor, SrdNoEb, TYPE, \
                             NAME_SOLID_DRAWGLYPHLISTLCD(TYPE))

#dffinf REGISTER_XOR_DRAWGLYPHLIST(TYPE) \
    REGISTER_DRAWGLYPHLIST(AnyColor, Xor, TYPE, \
                           NAME_XOR_DRAWGLYPHLIST(TYPE)), \
    REGISTER_DRAWGLYPHLISTAA(AnyColor, Xor, TYPE, \
                             NAME_XOR_DRAWGLYPHLIST(TYPE))

#dffinf REGISTER_TRANSFORMHELPER_FUNCS(TYPE) \
    REGISTER_PRIMITIVE(TrbnsformHflpfr, TYPE, SrdNoEb, IntArgbPrf, \
                       (AnyFund *) &NAME_TRANSFORMHELPER_FUNCS(TYPE))

#dffinf REGISTER_SOLID_PARALLELOGRAM(TYPE) \
    REGISTER_PRIMITIVE(FillPbrbllflogrbm, AnyColor, SrdNoEb, TYPE, \
                       NAME_SOLID_FILLPGRAM(TYPE)), \
    REGISTER_PRIMITIVE(DrbwPbrbllflogrbm, AnyColor, SrdNoEb, TYPE, \
                       (AnyFund *) &NAME_SOLID_PGRAM_FUNCS(TYPE))

#dffinf REGISTER_XOR_PARALLELOGRAM(TYPE) \
    REGISTER_PRIMITIVE(FillPbrbllflogrbm, AnyColor, Xor, TYPE, \
                       NAME_XOR_FILLPGRAM(TYPE)), \
    REGISTER_PRIMITIVE(DrbwPbrbllflogrbm, AnyColor, Xor, TYPE, \
                       (AnyFund *) &NAME_XOR_PGRAM_FUNCS(TYPE))

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for dopying pixfls of b dommon typf from onf bufffr to bnothfr.
 */
#dffinf DEFINE_ISOCOPY_BLIT(ANYTYPE) \
void NAME_ISOCOPY_BLIT(ANYTYPE)(void *srdBbsf, void *dstBbsf, \
                                juint width, juint hfight, \
                                SurfbdfDbtbRbsInfo *pSrdInfo, \
                                SurfbdfDbtbRbsInfo *pDstInfo, \
                                NbtivfPrimitivf *pPrim, \
                                CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## ANYTYPE ## StorfVbrs(DstWritf) \
    BlitLoopHfight(ANYTYPE, pSrd, srdBbsf, pSrdInfo, \
                   ANYTYPE, pDst, dstBbsf, pDstInfo, DstWritf, \
                   hfight, \
                   mfmdpy(pDst, pSrd, width * ANYTYPE ## PixflStridf)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b SdblfBlit innfr loop
 * for sdbling pixfls of b dommon typf from onf bufffr to bnothfr.
 */
#dffinf DEFINE_ISOSCALE_BLIT(ANYTYPE) \
void NAME_ISOSCALE_BLIT(ANYTYPE)(void *srdBbsf, void *dstBbsf, \
                                 juint width, juint hfight, \
                                 jint sxlod, jint sylod, \
                                 jint sxind, jint syind, jint shift, \
                                 SurfbdfDbtbRbsInfo *pSrdInfo, \
                                 SurfbdfDbtbRbsInfo *pDstInfo, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## ANYTYPE ## StorfVbrs(DstWritf) \
    BlitLoopSdblfWidthHfight(ANYTYPE, pSrd, srdBbsf, pSrdInfo, \
                             ANYTYPE, pDst, dstBbsf, pDstInfo, DstWritf, \
                             x, width, hfight, \
                             sxlod, sylod, sxind, syind, shift, \
                             Copy ## ANYTYPE ## PixflDbtb(pSrd, x, pDst, 0)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for XORing pixfls of b dommon typf from onf bufffr into bnothfr.
 */
#dffinf DEFINE_ISOXOR_BLIT(ANYTYPE) \
void NAME_ISOXOR_BLIT(ANYTYPE)(void *srdBbsf, void *dstBbsf, \
                               juint width, juint hfight, \
                               SurfbdfDbtbRbsInfo *pSrdInfo, \
                               SurfbdfDbtbRbsInfo *pDstInfo, \
                               NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    Dfdlbrf ## ANYTYPE ## PixflDbtb(xor) \
    Dfdlbrf ## ANYTYPE ## StorfVbrs(DstWritf) \
 \
    Extrbdt ## ANYTYPE ## PixflDbtb(xorpixfl, xor); \
 \
    BlitLoopWidthHfight(ANYTYPE, pSrd, srdBbsf, pSrdInfo, \
                        ANYTYPE, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        XorCopy ## ANYTYPE ## PixflDbtb(pSrd, pDst, 0, \
                                                        xorpixfl, xor)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for donvfrting pixfls from b bufffr of onf typf into b bufffr of
 * bnothfr typf.  No blfnding is donf of thf pixfls.
 */
#dffinf DEFINE_CONVERT_BLIT(SRC, DST, STRATEGY) \
void NAME_CONVERT_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                 juint width, juint hfight, \
                                 SurfbdfDbtbRbsInfo *pSrdInfo, \
                                 SurfbdfDbtbRbsInfo *pDstInfo, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        ConvfrtVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                               pDst, DST, DstWritf, \
                                               0, 0)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for donvfrting pixfls from b bufffr of bytf pixfls with b lookup
 * tbblf into b bufffr of bnothfr typf.  No blfnding is donf of thf pixfls.
 */
#dffinf DEFINE_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY) \
void NAME_CONVERT_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                 juint width, juint hfight, \
                                 SurfbdfDbtbRbsInfo *pSrdInfo, \
                                 SurfbdfDbtbRbsInfo *pDstInfo, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## LUT_STRATEGY ## Lut(SRC, DST, pixLut) \
 \
    Sftup ## LUT_STRATEGY ## Lut(SRC, DST, pixLut,\
                                 pSrdInfo, pDstInfo); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        Body ## LUT_STRATEGY ## Lut(pSrd, SRC, \
                                                    pixLut, \
                                                    pDst, DST, \
                                                    DstWritf, 0, 0));\
}
#dffinf DEFINE_CONVERT_BLIT_LUT8(SRC, DST, LUT_STRATEGY) \
    DEFINE_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY)

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b SdblfBlit innfr
 * loop for sdbling bnd donvfrting pixfls from b bufffr of onf typf into
 * b bufffr of bnothfr typf.  No blfnding is donf of thf pixfls.
 */
#dffinf DEFINE_SCALE_BLIT(SRC, DST, STRATEGY) \
void NAME_SCALE_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                               juint width, juint hfight, \
                               jint sxlod, jint sylod, \
                               jint sxind, jint syind, jint shift, \
                               SurfbdfDbtbRbsInfo *pSrdInfo, \
                               SurfbdfDbtbRbsInfo *pDstInfo, \
                               NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BlitLoopSdblfWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                             DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                             x, width, hfight, \
                             sxlod, sylod, sxind, syind, shift, \
                             ConvfrtVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                                    pDst, DST, DstWritf, \
                                                    x, 0)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b SdblfBlit innfr
 * loop for sdbling bnd donvfrting pixfls from b bufffr of bytf pixfls
 * with b lookup tbblf into b bufffr of bnothfr typf.  No blfnding is
 * donf of thf pixfls.
 */
#dffinf DEFINE_SCALE_BLIT_LUT(SRC, DST, LUT_STRATEGY) \
void NAME_SCALE_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                               juint width, juint hfight, \
                               jint sxlod, jint sylod, \
                               jint sxind, jint syind, jint shift, \
                               SurfbdfDbtbRbsInfo *pSrdInfo, \
                               SurfbdfDbtbRbsInfo *pDstInfo, \
                               NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## LUT_STRATEGY ## Lut(SRC, DST, pixLut) \
 \
    Sftup ## LUT_STRATEGY ## Lut(SRC, DST, pixLut, pSrdInfo, pDstInfo); \
    BlitLoopSdblfWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                             DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                             x, width, hfight, \
                             sxlod, sylod, sxind, syind, shift, \
                             Body ## LUT_STRATEGY ## Lut(pSrd, SRC, pixLut, \
                                                         pDst, DST, \
                                                         DstWritf, x, 0));\
}
#dffinf DEFINE_SCALE_BLIT_LUT8(SRC, DST, LUT_STRATEGY) \
    DEFINE_SCALE_BLIT_LUT(SRC, DST, LUT_STRATEGY)

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for drbwing opbquf pixfls from b bufffr of onf typf onto b bufffr of
 * bnothfr typf, ignoring thf trbnspbrfnt pixfls in thf sourdf bufffr.
 * No blfnding is donf of thf pixfls - thf donvfrtfd pixfl vbluf is
 * fithfr dopifd or thf dfstinbtion is lfft untoudhfd.
 */
#dffinf DEFINE_XPAR_CONVERT_BLIT(SRC, DST, STRATEGY) \
void NAME_XPAR_CONVERT_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                      juint width, juint hfight, \
                                      SurfbdfDbtbRbsInfo *pSrdInfo, \
                                      SurfbdfDbtbRbsInfo *pDstInfo, \
                                      NbtivfPrimitivf *pPrim, \
                                      CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        ConvfrtXpbrVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                                   pDst, DST, DstWritf, \
                                                   0, 0)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for donvfrting pixfls from b bufffr of bytf pixfls with b lookup
 * tbblf dontbining trbnspbrfnt pixfls into b bufffr of bnothfr typf.
 * No blfnding is donf of thf pixfls - thf donvfrtfd pixfl vbluf is
 * fithfr dopifd or thf dfstinbtion is lfft untoudhfd.
 */
#dffinf DEFINE_XPAR_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY) \
void NAME_XPAR_CONVERT_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                      juint width, juint hfight, \
                                      SurfbdfDbtbRbsInfo *pSrdInfo, \
                                      SurfbdfDbtbRbsInfo *pDstInfo, \
                                      NbtivfPrimitivf *pPrim, \
                                      CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## LUT_STRATEGY ## XpbrLut(SRC, DST, pixLut) \
 \
    Sftup ## LUT_STRATEGY ## XpbrLut(SRC, DST, pixLut, pSrdInfo, pDstInfo); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        Body ## LUT_STRATEGY ## XpbrLut(pSrd, SRC, pixLut, \
                                                        pDst, DST, \
                                                        DstWritf, 0, 0)); \
}
#dffinf DEFINE_XPAR_CONVERT_BLIT_LUT8(SRC, DST, LUT_STRATEGY) \
    DEFINE_XPAR_CONVERT_BLIT_LUT(SRC, DST, LUT_STRATEGY)

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b SdblfBlit innfr
 * loop for sdbling bnd donvfrting pixfls from b bufffr of bytf pixfls
 * with b lookup tbblf dontbining trbnspbrfnt pixfls into b bufffr of
 * bnothfr typf.
 * No blfnding is donf of thf pixfls - thf donvfrtfd pixfl vbluf is
 * fithfr dopifd or thf dfstinbtion is lfft untoudhfd.
 */
#dffinf DEFINE_XPAR_SCALE_BLIT_LUT(SRC, DST, LUT_STRATEGY) \
void NAME_XPAR_SCALE_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                    juint width, juint hfight, \
                                    jint sxlod, jint sylod, \
                                    jint sxind, jint syind, jint shift, \
                                    SurfbdfDbtbRbsInfo *pSrdInfo, \
                                    SurfbdfDbtbRbsInfo *pDstInfo, \
                                    NbtivfPrimitivf *pPrim, \
                                    CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## LUT_STRATEGY ## XpbrLut(SRC, DST, pixLut) \
 \
    Sftup ## LUT_STRATEGY ## XpbrLut(SRC, DST, pixLut, pSrdInfo, pDstInfo); \
    BlitLoopSdblfWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                             DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                             x, width, hfight, \
                             sxlod, sylod, sxind, syind, shift, \
                             Body ## LUT_STRATEGY ## XpbrLut(pSrd, SRC, pixLut, \
                                                             pDst, DST, \
                                                             DstWritf, \
                                                             x, 0)); \
}
#dffinf DEFINE_XPAR_SCALE_BLIT_LUT8(SRC, DST, LUT_STRATEGY) \
    DEFINE_XPAR_SCALE_BLIT_LUT(SRC, DST, LUT_STRATEGY)

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b SdblfBlit innfr
 * loop for sdbling bnd donvfrting pixfls from b bufffr of onf typf
 * dontbining trbnspbrfnt pixfls into b bufffr of bnothfr typf.
 *
 * No blfnding is donf of thf pixfls - thf donvfrtfd pixfl vbluf is
 * fithfr dopifd or thf dfstinbtion is lfft untoudhfd.
 */
#dffinf DEFINE_XPAR_SCALE_BLIT(SRC, DST, STRATEGY) \
void NAME_XPAR_SCALE_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                               juint width, juint hfight, \
                               jint sxlod, jint sylod, \
                               jint sxind, jint syind, jint shift, \
                               SurfbdfDbtbRbsInfo *pSrdInfo, \
                               SurfbdfDbtbRbsInfo *pDstInfo, \
                               NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BlitLoopSdblfWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                             DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                             x, width, hfight, \
                             sxlod, sylod, sxind, syind, shift, \
                             ConvfrtXpbrVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                                        pDst, DST, DstWritf, \
                                                        x, 0)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b BlitBg innfr loop
 * for donvfrting pixfls from b bufffr of onf typf dontbining trbnspbrfnt
 * pixfls into b bufffr of bnothfr typf with b spfdififd bgdolor for thf
 * trbnspbrfnt pixfls.
 * No blfnding is donf of thf pixfls othfr thbn to substitutf thf
 * bgdolor for bny trbnspbrfnt pixfls.
 */
#dffinf DEFINE_XPAR_BLITBG(SRC, DST, STRATEGY) \
void NAME_XPAR_BLITBG(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                juint width, juint hfight, \
                                jint bgpixfl, \
                                SurfbdfDbtbRbsInfo *pSrdInfo, \
                                SurfbdfDbtbRbsInfo *pDstInfo, \
                                NbtivfPrimitivf *pPrim, \
                                CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## DST ## PixflDbtb(bgdbtb) \
 \
    Extrbdt ## DST ## PixflDbtb(bgpixfl, bgdbtb); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        BgCopyXpbrVib ## STRATEGY(pSrd, SRC, SrdRfbd, \
                                                  pDst, DST, DstWritf, \
                                                  0, 0, bgpixfl, bgdbtb)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b BlitBg innfr loop
 * for donvfrting pixfls from b bufffr of bytf pixfls with b lookup
 * tbblf dontbining trbnspbrfnt pixfls into b bufffr of bnothfr typf
 * with b spfdififd bgdolor for thf trbnspbrfnt pixfls.
 * No blfnding is donf of thf pixfls othfr thbn to substitutf thf
 * bgdolor for bny trbnspbrfnt pixfls.
 */
#dffinf DEFINE_XPAR_BLITBG_LUT(SRC, DST, LUT_STRATEGY) \
void NAME_XPAR_BLITBG(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                                juint width, juint hfight, \
                                jint bgpixfl, \
                                SurfbdfDbtbRbsInfo *pSrdInfo, \
                                SurfbdfDbtbRbsInfo *pDstInfo, \
                                NbtivfPrimitivf *pPrim, \
                                CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
    Dfdlbrf ## LUT_STRATEGY ## BgLut(SRC, DST, pixLut) \
 \
    Sftup ## LUT_STRATEGY ## BgLut(SRC, DST, pixLut, pSrdInfo, pDstInfo, \
                                   bgpixfl); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        Body ## LUT_STRATEGY ## BgLut(pSrd, SRC, pixLut, \
                                                      pDst, DST, \
                                                      DstWritf, 0, 0, \
                                                      bgpixfl)); \
}
#dffinf DEFINE_XPAR_BLITBG_LUT8(SRC, DST, LUT_STRATEGY) \
    DEFINE_XPAR_BLITBG_LUT(SRC, DST, LUT_STRATEGY)

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b Blit innfr loop
 * for donvfrting pixfls from b bufffr of onf typf into b bufffr of
 * bnothfr typf.  Ebdh sourdf pixfl is XORfd with thf durrfnt XOR dolor vbluf.
 * Thbt rfsult is thfn XORfd with thf dfstinbtion pixfl bnd thf finbl
 * rfsult is storfd in thf dfstinbtion surfbdf.
 */
#dffinf DEFINE_XOR_BLIT(SRC, DST, DSTANYTYPE) \
void NAME_XOR_BLIT(SRC, DST)(void *srdBbsf, void *dstBbsf, \
                             juint width, juint hfight, \
                             SurfbdfDbtbRbsInfo *pSrdInfo, \
                             SurfbdfDbtbRbsInfo *pDstInfo, \
                             NbtivfPrimitivf *pPrim, \
                             CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## DSTANYTYPE ## PixflDbtb(xor) \
    Dfdlbrf ## DSTANYTYPE ## PixflDbtb(mbsk) \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    Dfdlbrf ## DST ## StorfVbrs(DstWritf) \
 \
    Extrbdt ## DSTANYTYPE ## PixflDbtb(xorpixfl, xor); \
    Extrbdt ## DSTANYTYPE ## PixflDbtb(blphbmbsk, mbsk); \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    BlitLoopWidthHfight(SRC, pSrd, srdBbsf, pSrdInfo, \
                        DST, pDst, dstBbsf, pDstInfo, DstWritf, \
                        width, hfight, \
                        XorVib1IntArgb(pSrd, SRC, SrdRfbd, \
                                       pDst, DST, DSTANYTYPE, \
                                       0, xorpixfl, xor, \
                                       blphbmbsk, mbsk, pDstInfo)); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b FillRfdt innfr loop
 * for sftting b rfdtbngulbr rfgion of pixfls to b spfdifid pixfl vbluf.
 * No blfnding of thf fill dolor is donf with thf pixfls.
 */
#dffinf DEFINE_SOLID_FILLRECT(DST) \
void NAME_SOLID_FILLRECT(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                              jint lox, jint loy, \
                              jint hix, jint hiy, \
                              jint pixfl, \
                              NbtivfPrimitivf *pPrim, \
                              CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    DST ## DbtbTypf *pPix; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    juint hfight = hiy - loy; \
    juint width = hix - lox; \
 \
    pPix = PtrCoord(pRbsInfo->rbsBbsf, lox, DST ## PixflStridf, loy, sdbn); \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    do { \
        juint x = 0; \
        do { \
            Storf ## DST ## PixflDbtb(pPix, x, pixfl, pix); \
        } whilf (++x < width); \
        pPix = PtrAddBytfs(pPix, sdbn); \
    } whilf (--hfight > 0); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b FillSpbns innfr loop
 * for itfrbting through b list of spbns bnd sftting thosf rfgions of pixfls
 * to b spfdifid pixfl vbluf.  No blfnding of thf fill dolor is donf with
 * thf pixfls.
 */
#dffinf DEFINE_SOLID_FILLSPANS(DST) \
void NAME_SOLID_FILLSPANS(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                               SpbnItfrbtorFunds *pSpbnFunds, void *siDbtb, \
                               jint pixfl, NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    void *pBbsf = pRbsInfo->rbsBbsf; \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint bbox[4]; \
 \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    whilf ((*pSpbnFunds->nfxtSpbn)(siDbtb, bbox)) { \
        jint x = bbox[0]; \
        jint y = bbox[1]; \
        juint w = bbox[2] - x; \
        juint h = bbox[3] - y; \
        DST ## DbtbTypf *pPix = PtrCoord(pBbsf, \
                                         x, DST ## PixflStridf, \
                                         y, sdbn); \
        do { \
            juint rflx; \
            for (rflx = 0; rflx < w; rflx++) { \
                Storf ## DST ## PixflDbtb(pPix, rflx, pixfl, pix); \
            } \
            pPix = PtrAddBytfs(pPix, sdbn); \
        } whilf (--h > 0); \
    } \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b FillPbrbllflogrbm
 * innfr loop for trbding 2 dibgonbl fdgfs (lfft bnd right) bnd sftting
 * thosf rfgions of pixfls bftwffn thfm to b spfdifid pixfl vbluf.
 * No blfnding of thf fill dolor is donf with thf pixfls.
 */
#dffinf DEFINE_SOLID_FILLPGRAM(DST) \
void NAME_SOLID_FILLPGRAM(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                               jint lox, jint loy, jint hix, jint hiy, \
                               jlong lfftx, jlong dlfftx, \
                               jlong rightx, jlong drightx, \
                               jint pixfl, strudt _NbtivfPrimitivf *pPrim, \
                               CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix = PtrCoord(pRbsInfo->rbsBbsf, 0, 0, loy, sdbn); \
 \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    whilf (loy < hiy) { \
        jint lx = WholfOfLong(lfftx); \
        jint rx = WholfOfLong(rightx); \
        if (lx < lox) lx = lox; \
        if (rx > hix) rx = hix; \
        whilf (lx < rx) { \
            Storf ## DST ## PixflDbtb(pPix, lx, pixfl, pix); \
            lx++; \
        } \
        pPix = PtrAddBytfs(pPix, sdbn); \
        lfftx += dlfftx; \
        rightx += drightx; \
        loy++; \
    } \
}

#dffinf DEFINE_SOLID_DRAWPARALLELOGRAM_FUNCS(DST) \
    DrbwPbrbllflogrbmFunds NAME_SOLID_PGRAM_FUNCS(DST) = { \
        NAME_SOLID_FILLPGRAM(DST), \
        NAME_SOLID_DRAWLINE(DST), \
    };

#dffinf DEFINE_SOLID_PARALLELOGRAM(DST) \
    DEFINE_SOLID_FILLPGRAM(DST) \
    DEFINE_SOLID_DRAWPARALLELOGRAM_FUNCS(DST)

/*
 * This mbdro dfdlbrfs thf bumpmbjor bnd bumpminor vbribblfs usfd for thf
 * DrbwLinf fundtions.
 */
#dffinf DfdlbrfBumps(BUMPMAJOR, BUMPMINOR) \
    jint BUMPMAJOR, BUMPMINOR;

/*
 * This mbdro fxtrbdts "instrudtions" from thf bumpmbjor bnd bumpminor mbsks
 * thbt dftfrminf thf initibl bumpmbjor bnd bumpminor vblufs.  Thf bumpmbjor
 * bnd bumpminor mbsks brf lbid out in thf following formbt:
 *
 * bumpmbjormbsk:                      bumpminormbsk:
 * bit0: bumpmbjor = pixflStridf       bit0: bumpminor = pixflStridf
 * bit1: bumpmbjor = -pixflStridf      bit1: bumpminor = -pixflStridf
 * bit2: bumpmbjor = sdbnStridf        bit2: bumpminor = sdbnStridf
 * bit3: bumpmbjor = -sdbnStridf       bit3: bumpminor = -sdbnStridf
 */
#dffinf InitBumps(BUMPMAJOR, BUMPMINOR, \
                  BUMPMAJORMASK, BUMPMINORMASK, \
                  PIXELSTRIDE, SCANSTRIDE) \
    BUMPMAJOR = (BUMPMAJORMASK & BUMP_POS_PIXEL) ? PIXELSTRIDE : \
                    (BUMPMAJORMASK & BUMP_NEG_PIXEL) ? -PIXELSTRIDE : \
                        (BUMPMAJORMASK & BUMP_POS_SCAN) ? SCANSTRIDE : \
                                                          -SCANSTRIDE; \
    BUMPMINOR = (BUMPMINORMASK & BUMP_POS_PIXEL) ? PIXELSTRIDE : \
                    (BUMPMINORMASK & BUMP_NEG_PIXEL) ? -PIXELSTRIDE : \
                        (BUMPMINORMASK & BUMP_POS_SCAN) ? SCANSTRIDE : \
                            (BUMPMINORMASK & BUMP_NEG_SCAN) ? -SCANSTRIDE : \
                                                              0; \
    BUMPMINOR += BUMPMAJOR;

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b DrbwLinf innfr loop
 * for itfrbting blong b horizontbl or vfrtidbl linf bnd sftting thf pixfls
 * on thbt linf to b spfdifid pixfl vbluf.  No blfnding of thf fill dolor
 * is donf with thf pixfls.
 */
#dffinf DEFINE_SOLID_DRAWLINE(DST) \
void NAME_SOLID_DRAWLINE(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                              jint x1, jint y1, jint pixfl, \
                              jint stfps, jint frror, \
                              jint bumpmbjormbsk, jint frrmbjor, \
                              jint bumpminormbsk, jint frrminor, \
                              NbtivfPrimitivf *pPrim, \
                              CompositfInfo *pCompInfo) \
{ \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix = PtrCoord(pRbsInfo->rbsBbsf, \
                                     x1, DST ## PixflStridf, \
                                     y1, sdbn); \
    DfdlbrfBumps(bumpmbjor, bumpminor) \
 \
    InitBumps(bumpmbjor, bumpminor, bumpmbjormbsk, bumpminormbsk, \
              DST ## PixflStridf, sdbn); \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    if (frrmbjor == 0) { \
        do { \
            Storf ## DST ## PixflDbtb(pPix, 0, pixfl, pix); \
            pPix = PtrAddBytfs(pPix, bumpmbjor); \
        } whilf (--stfps > 0); \
    } flsf { \
        do { \
            Storf ## DST ## PixflDbtb(pPix, 0, pixfl, pix); \
            if (frror < 0) { \
                pPix = PtrAddBytfs(pPix, bumpmbjor); \
                frror += frrmbjor; \
            } flsf { \
                pPix = PtrAddBytfs(pPix, bumpminor); \
                frror -= frrminor; \
            } \
        } whilf (--stfps > 0); \
    } \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b FillRfdt innfr loop
 * for sftting b rfdtbngulbr rfgion of pixfls to b spfdifid pixfl vbluf.
 * Ebdh dfstinbtion pixfl is XORfd with thf durrfnt XOR modf dolor bs wfll bs
 * thf durrfnt fill dolor.
 */
#dffinf DEFINE_XOR_FILLRECT(DST) \
void NAME_XOR_FILLRECT(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                            jint lox, jint loy, \
                            jint hix, jint hiy, \
                            jint pixfl, \
                            NbtivfPrimitivf *pPrim, \
                            CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## DST ## PixflDbtb(xor) \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    Dfdlbrf ## DST ## PixflDbtb(mbsk) \
    DST ## DbtbTypf *pPix; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    juint hfight = hiy - loy; \
    juint width = hix - lox; \
 \
    pPix = PtrCoord(pRbsInfo->rbsBbsf, lox, DST ## PixflStridf, loy, sdbn); \
    Extrbdt ## DST ## PixflDbtb(xorpixfl, xor); \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    Extrbdt ## DST ## PixflDbtb(blphbmbsk, mbsk); \
 \
    do { \
        juint x = 0; \
        do { \
            Xor ## DST ## PixflDbtb(pixfl, pix, pPix, x, \
                                    xorpixfl, xor, blphbmbsk, mbsk); \
        } whilf (++x < width); \
        pPix = PtrAddBytfs(pPix, sdbn); \
    } whilf (--hfight > 0); \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b FillSpbns innfr loop
 * for itfrbting through b list of spbns bnd sftting thosf rfgions of pixfls
 * to b spfdifid pixfl vbluf.  Ebdh dfstinbtion pixfl is XORfd with thf
 * durrfnt XOR modf dolor bs wfll bs thf durrfnt fill dolor.
 */
#dffinf DEFINE_XOR_FILLSPANS(DST) \
void NAME_XOR_FILLSPANS(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                             SpbnItfrbtorFunds *pSpbnFunds, \
                             void *siDbtb, jint pixfl, \
                             NbtivfPrimitivf *pPrim, \
                             CompositfInfo *pCompInfo) \
{ \
    void *pBbsf = pRbsInfo->rbsBbsf; \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## DST ## PixflDbtb(xor) \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    Dfdlbrf ## DST ## PixflDbtb(mbsk) \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint bbox[4]; \
 \
    Extrbdt ## DST ## PixflDbtb(xorpixfl, xor); \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    Extrbdt ## DST ## PixflDbtb(blphbmbsk, mbsk); \
 \
    whilf ((*pSpbnFunds->nfxtSpbn)(siDbtb, bbox)) { \
        jint x = bbox[0]; \
        jint y = bbox[1]; \
        juint w = bbox[2] - x; \
        juint h = bbox[3] - y; \
        DST ## DbtbTypf *pPix = PtrCoord(pBbsf, \
                                         x, DST ## PixflStridf, \
                                         y, sdbn); \
        do { \
            juint rflx; \
            for (rflx = 0; rflx < w; rflx++) { \
                Xor ## DST ## PixflDbtb(pixfl, pix, pPix, rflx, \
                                        xorpixfl, xor, blphbmbsk, mbsk); \
            } \
            pPix = PtrAddBytfs(pPix, sdbn); \
        } whilf (--h > 0); \
    } \
}

/*
 * This mbdro dffinfs bn fntirf fundtion to implfmfnt b DrbwLinf innfr loop
 * for itfrbting blong b horizontbl or vfrtidbl linf bnd sftting thf pixfls
 * on thbt linf to b spfdifid pixfl vbluf.  Ebdh dfstinbtion pixfl is XORfd
 * with thf durrfnt XOR modf dolor bs wfll bs thf durrfnt drbw dolor.
 */
#dffinf DEFINE_XOR_DRAWLINE(DST) \
void NAME_XOR_DRAWLINE(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                            jint x1, jint y1, jint pixfl, \
                            jint stfps, jint frror, \
                            jint bumpmbjormbsk, jint frrmbjor, \
                            jint bumpminormbsk, jint frrminor, \
                            NbtivfPrimitivf *pPrim, \
                            CompositfInfo *pCompInfo) \
{ \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## DST ## PixflDbtb(xor) \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    Dfdlbrf ## DST ## PixflDbtb(mbsk) \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix = PtrCoord(pRbsInfo->rbsBbsf, \
                                     x1, DST ## PixflStridf, \
                                     y1, sdbn); \
    DfdlbrfBumps(bumpmbjor, bumpminor) \
 \
    InitBumps(bumpmbjor, bumpminor, bumpmbjormbsk, bumpminormbsk, \
              DST ## PixflStridf, sdbn); \
    Extrbdt ## DST ## PixflDbtb(xorpixfl, xor); \
    Extrbdt ## DST ## PixflDbtb(pixfl, pix); \
    Extrbdt ## DST ## PixflDbtb(blphbmbsk, mbsk); \
 \
    if (frrmbjor == 0) { \
        do { \
            Xor ## DST ## PixflDbtb(pixfl, pix, pPix, 0, \
                                    xorpixfl, xor, blphbmbsk, mbsk); \
            pPix = PtrAddBytfs(pPix, bumpmbjor); \
        } whilf (--stfps > 0); \
    } flsf { \
        do { \
            Xor ## DST ## PixflDbtb(pixfl, pix, pPix, 0, \
                                    xorpixfl, xor, blphbmbsk, mbsk); \
            if (frror < 0) { \
                pPix = PtrAddBytfs(pPix, bumpmbjor); \
                frror += frrmbjor; \
            } flsf { \
                pPix = PtrAddBytfs(pPix, bumpminor); \
                frror -= frrminor; \
            } \
        } whilf (--stfps > 0); \
    } \
}

/*
 * This mbdro is usfd to dfdlbrf thf vbribblfs nffdfd by thf glyph dlipping
 * mbdro.
 */
#dffinf DfdlbrfDrbwGlyphListClipVbrs(PIXELS, ROWBYTES, WIDTH, HEIGHT, \
                                     LEFT, TOP, RIGHT, BOTTOM) \
    donst jubytf * PIXELS; \
    int ROWBYTES; \
    int LEFT, TOP; \
    int WIDTH, HEIGHT; \
    int RIGHT, BOTTOM;

/*
 * This mbdro rfprfsfnts thf glyph dlipping dodf usfd in thf vbrious
 * DRAWGLYPHLIST mbdros.  This mbdro is typidblly usfd within b loop.  Notf
 * thbt thf body of this mbdro is NOT wrbppfd in b do..whilf blodk duf to
 * thf usf of dontinuf stbtfmfnts within thf blodk (thosf dontinuf stbtfmfnts
 * brf intfndfd skip thf outfr loop, not thf do..whilf loop).  To dombbt this
 * problfm, pbss in thf dodf (typidblly b dontinuf stbtfmfnt) thbt should bf
 * fxfdutfd whfn b null glyph is fndountfrfd.
 */
#dffinf ClipDrbwGlyphList(DST, PIXELS, BYTESPERPIXEL, ROWBYTES, WIDTH, HEIGHT,\
                          LEFT, TOP, RIGHT, BOTTOM, \
                          CLIPLEFT, CLIPTOP, CLIPRIGHT, CLIPBOTTOM, \
                          GLYPHS, GLYPHCOUNTER, NULLGLYPHCODE) \
    PIXELS = (donst jubytf *)GLYPHS[GLYPHCOUNTER].pixfls; \
    if (!PIXELS) { \
        NULLGLYPHCODE; \
    } \
    ROWBYTES = GLYPHS[GLYPHCOUNTER].rowBytfs; \
    LEFT     = GLYPHS[GLYPHCOUNTER].x; \
    TOP      = GLYPHS[GLYPHCOUNTER].y; \
    WIDTH    = GLYPHS[GLYPHCOUNTER].width; \
    HEIGHT   = GLYPHS[GLYPHCOUNTER].hfight; \
\
    /* if bny dlipping rfquirfd, modify pbrbmftfrs now */ \
    RIGHT  = LEFT + WIDTH; \
    BOTTOM = TOP + HEIGHT; \
    if (LEFT < CLIPLEFT) { \
    /* Multiply nffdfd for LCD tfxt bs PIXELS is rfblly BYTES */ \
        PIXELS += (CLIPLEFT - LEFT) * BYTESPERPIXEL ; \
        LEFT = CLIPLEFT; \
    } \
    if (TOP < CLIPTOP) { \
        PIXELS += (CLIPTOP - TOP) * ROWBYTES; \
        TOP = CLIPTOP; \
    } \
    if (RIGHT > CLIPRIGHT) { \
        RIGHT = CLIPRIGHT; \
    } \
    if (BOTTOM > CLIPBOTTOM) { \
        BOTTOM = CLIPBOTTOM; \
    } \
    if (RIGHT <= LEFT || BOTTOM <= TOP) { \
        NULLGLYPHCODE; \
    } \
    WIDTH = RIGHT - LEFT; \
    HEIGHT = BOTTOM - TOP;

#dffinf DEFINE_SOLID_DRAWGLYPHLIST(DST) \
void NAME_SOLID_DRAWGLYPHLIST(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                   ImbgfRff *glyphs, \
                                   jint totblGlyphs, jint fgpixfl, \
                                   jint brgbdolor, \
                                   jint dlipLfft, jint dlipTop, \
                                   jint dlipRight, jint dlipBottom, \
                                   NbtivfPrimitivf *pPrim, \
                                   CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    DST ## DbtbTypf *pPix; \
\
    Extrbdt ## DST ## PixflDbtb(fgpixfl, pix); \
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        do { \
            int x = 0; \
            do { \
                if (pixfls[x]) { \
                    Storf ## DST ## PixflDbtb(pPix, x, fgpixfl, pix); \
                } \
            } whilf (++x < width); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
        } whilf (--hfight > 0); \
    } \
}

#dffinf GlyphListAABlfnd3BytfRgb(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                 FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfCompVbrsFor3BytfRgb(dst) \
        jint mixVblSrd = GLYPH_PIXELS[PIXEL_INDEX]; \
        if (mixVblSrd) { \
            if (mixVblSrd < 255) { \
                jint mixVblDst = 255 - mixVblSrd; \
                Lobd ## DST ## To3BytfRgb(DST_PTR, pix, PIXEL_INDEX, \
                                          dstR, dstG, dstB); \
                MultMultAddAndStorf3BytfRgbComps(dst, mixVblDst, dst, \
                                                 mixVblSrd, SRC_PREFIX); \
                Storf ## DST ## From3BytfRgb(DST_PTR, pix, PIXEL_INDEX, \
                                             dstR, dstG, dstB); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0);

#dffinf GlyphListAABlfnd4BytfArgb(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                  FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfAlphbVbrFor4BytfArgb(dstA) \
        DfdlbrfCompVbrsFor4BytfArgb(dst) \
        jint mixVblSrd = GLYPH_PIXELS[PIXEL_INDEX]; \
        if (mixVblSrd) { \
            if (mixVblSrd < 255) { \
                jint mixVblDst = 255 - mixVblSrd; \
                Lobd ## DST ## To4BytfArgb(DST_PTR, pix, PIXEL_INDEX, \
                                           dstA, dstR, dstG, dstB); \
                dstA = MUL8(dstA, mixVblDst) + \
                       MUL8(SRC_PREFIX ## A, mixVblSrd); \
                MultMultAddAndStorf4BytfArgbComps(dst, mixVblDst, dst, \
                                                  mixVblSrd, SRC_PREFIX); \
                if (!(DST ## IsOpbquf) && \
                    !(DST ## IsPrfmultiplifd) && dstA && dstA < 255) { \
                    DividfAndStorf4BytfArgbComps(dst, dst, dstA); \
                } \
                Storf ## DST ## From4BytfArgbComps(DST_PTR, pix, \
                                                   PIXEL_INDEX, dst); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0);

#dffinf GlyphListAABlfnd1BytfGrby(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                  FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfCompVbrsFor1BytfGrby(dst) \
        jint mixVblSrd = GLYPH_PIXELS[PIXEL_INDEX]; \
        if (mixVblSrd) { \
            if (mixVblSrd < 255) { \
                jint mixVblDst = 255 - mixVblSrd; \
                Lobd ## DST ## To1BytfGrby(DST_PTR, pix, PIXEL_INDEX, \
                                           dstG); \
                MultMultAddAndStorf1BytfGrbyComps(dst, mixVblDst, dst, \
                                                  mixVblSrd, SRC_PREFIX); \
                Storf ## DST ## From1BytfGrby(DST_PTR, pix, PIXEL_INDEX, \
                                              dstG); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0);

#dffinf GlyphListAABlfnd1ShortGrby(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                   FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfCompVbrsFor1ShortGrby(dst) \
        juint mixVblSrd = GLYPH_PIXELS[PIXEL_INDEX]; \
        if (mixVblSrd) { \
            if (mixVblSrd < 255) { \
                juint mixVblDst; \
                PromotfBytfAlphbFor1ShortGrby(mixVblSrd); \
                mixVblDst = 0xffff - mixVblSrd; \
                Lobd ## DST ## To1ShortGrby(DST_PTR, pix, PIXEL_INDEX, \
                                            dstG); \
                MultMultAddAndStorf1ShortGrbyComps(dst, mixVblDst, dst, \
                                                   mixVblSrd, SRC_PREFIX); \
                Storf ## DST ## From1ShortGrby(DST_PTR, pix, PIXEL_INDEX, \
                                               dstG); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0);

#dffinf DEFINE_SOLID_DRAWGLYPHLISTAA(DST, STRATEGY) \
void NAME_SOLID_DRAWGLYPHLISTAA(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                     ImbgfRff *glyphs, \
                                     jint totblGlyphs, jint fgpixfl, \
                                     jint brgbdolor, \
                                     jint dlipLfft, jint dlipTop, \
                                     jint dlipRight, jint dlipBottom, \
                                     NbtivfPrimitivf *pPrim, \
                                     CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix; \
    Dfdlbrf ## DST ## PixflDbtb(solidpix) \
    DfdlbrfAlphbVbrFor ## STRATEGY(srdA) \
    DfdlbrfCompVbrsFor ## STRATEGY(srd) \
\
    Dfdlbrf ## DST ## LobdVbrs(pix) \
    Dfdlbrf ## DST ## StorfVbrs(pix) \
\
    Init ## DST ## LobdVbrs(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsY(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsX(pix, pRbsInfo); \
    Extrbdt ## STRATEGY ## CompsAndAlphbFromArgb(brgbdolor, srd); \
    Extrbdt ## DST ## PixflDbtb(fgpixfl, solidpix); \
\
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        Sft ## DST ## StorfVbrsYPos(pix, pRbsInfo, top); \
        do { \
            int x = 0; \
            Sft ## DST ## StorfVbrsXPos(pix, pRbsInfo, lfft); \
            do { \
                GlyphListAABlfnd ## STRATEGY(DST, pixfls, x, pPix, \
                                             fgpixfl, solidpix, srd); \
                Nfxt ## DST ## StorfVbrsX(pix); \
            } whilf (++x < width); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
            Nfxt ## DST ## StorfVbrsY(pix); \
        } whilf (--hfight > 0); \
    } \
}


#dffinf GlyphListLCDBlfnd3BytfRgb(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                  FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfCompVbrsFor3BytfRgb(dst) \
        jint mixVblSrdG = GLYPH_PIXELS[PIXEL_INDEX*3+1]; \
        jint mixVblSrdR, mixVblSrdB; \
        if (rgbOrdfr) { \
            mixVblSrdR = GLYPH_PIXELS[PIXEL_INDEX*3]; \
            mixVblSrdB = GLYPH_PIXELS[PIXEL_INDEX*3+2]; \
        } flsf { \
            mixVblSrdR = GLYPH_PIXELS[PIXEL_INDEX*3+2]; \
            mixVblSrdB = GLYPH_PIXELS[PIXEL_INDEX*3]; \
        } \
        if ((mixVblSrdR | mixVblSrdG | mixVblSrdB) != 0) { \
            if ((mixVblSrdR & mixVblSrdG & mixVblSrdB) < 255) { \
                jint mixVblDstR = 255 - mixVblSrdR; \
                jint mixVblDstG = 255 - mixVblSrdG; \
                jint mixVblDstB = 255 - mixVblSrdB; \
                Lobd ## DST ## To3BytfRgb(DST_PTR, pix, PIXEL_INDEX, \
                                          dstR, dstG, dstB); \
                dstR = invGbmmbLut[dstR]; \
                dstG = invGbmmbLut[dstG]; \
                dstB = invGbmmbLut[dstB]; \
                MultMultAddAndStorfLCD3BytfRgbComps(dst, mixVblDst, dst, \
                                                    mixVblSrd, SRC_PREFIX); \
                dstR = gbmmbLut[dstR]; \
                dstG = gbmmbLut[dstG]; \
                dstB = gbmmbLut[dstB]; \
                Storf ## DST ## From3BytfRgb(DST_PTR, pix, PIXEL_INDEX, \
                                             dstR, dstG, dstB); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0)


/* Thfrf is no blphb dhbnnfl in thf glyph dbtb with whidh to intfrpolbtf
 * bftwffn thf srd bnd dst blphbs, but b rfbsonbblf bpproximbtion is to
 * sum thf dovfrbgf blphbs of thf dolour dhbnnfls bnd dividf by 3.
 * Wf dbn bpproximbtf division by 3 using mult bnd shift. Sff
 * sun/font/sdblfrMfthods.d for b dftbilfd fxplbnbtion of why "21931"
 */
#dffinf GlyphListLCDBlfnd4BytfArgb(DST, GLYPH_PIXELS, PIXEL_INDEX, DST_PTR, \
                                  FG_PIXEL, PREFIX, SRC_PREFIX) \
   do { \
        DfdlbrfAlphbVbrFor4BytfArgb(dstA) \
        DfdlbrfCompVbrsFor4BytfArgb(dst) \
        jint mixVblSrdG = GLYPH_PIXELS[PIXEL_INDEX*3+1]; \
        jint mixVblSrdR, mixVblSrdB; \
        if (rgbOrdfr) { \
            mixVblSrdR = GLYPH_PIXELS[PIXEL_INDEX*3]; \
            mixVblSrdB = GLYPH_PIXELS[PIXEL_INDEX*3+2]; \
        } flsf { \
            mixVblSrdR = GLYPH_PIXELS[PIXEL_INDEX*3+2]; \
            mixVblSrdB = GLYPH_PIXELS[PIXEL_INDEX*3]; \
        } \
        if ((mixVblSrdR | mixVblSrdG | mixVblSrdB) != 0) { \
            if ((mixVblSrdR & mixVblSrdG & mixVblSrdB) < 255) { \
                jint mixVblDstR = 255 - mixVblSrdR; \
                jint mixVblDstG = 255 - mixVblSrdG; \
                jint mixVblDstB = 255 - mixVblSrdB; \
                jint mixVblSrdA = ((mixVblSrdR + mixVblSrdG + mixVblSrdB) \
                                    * 21931) >> 16;\
                jint mixVblDstA = 255 - mixVblSrdA; \
                Lobd ## DST ## To4BytfArgb(DST_PTR, pix, PIXEL_INDEX, \
                                           dstA, dstR, dstG, dstB); \
                dstR = invGbmmbLut[dstR]; \
                dstG = invGbmmbLut[dstG]; \
                dstB = invGbmmbLut[dstB]; \
                dstA = MUL8(dstA, mixVblDstA) + \
                       MUL8(SRC_PREFIX ## A, mixVblSrdA); \
                MultMultAddAndStorfLCD4BytfArgbComps(dst, mixVblDst, dst, \
                                                  mixVblSrd, SRC_PREFIX); \
                dstR = gbmmbLut[dstR]; \
                dstG = gbmmbLut[dstG]; \
                dstB = gbmmbLut[dstB]; \
                if (!(DST ## IsOpbquf) && \
                    !(DST ## IsPrfmultiplifd) && dstA && dstA < 255) { \
                    DividfAndStorf4BytfArgbComps(dst, dst, dstA); \
                } \
                Storf ## DST ## From4BytfArgbComps(DST_PTR, pix, \
                                                   PIXEL_INDEX, dst); \
            } flsf { \
                Storf ## DST ## PixflDbtb(DST_PTR, PIXEL_INDEX, \
                                          FG_PIXEL, PREFIX); \
            } \
        } \
    } whilf (0);

#dffinf DEFINE_SOLID_DRAWGLYPHLISTLCD(DST, STRATEGY) \
void NAME_SOLID_DRAWGLYPHLISTLCD(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                     ImbgfRff *glyphs, \
                                     jint totblGlyphs, jint fgpixfl, \
                                     jint brgbdolor, \
                                     jint dlipLfft, jint dlipTop, \
                                     jint dlipRight, jint dlipBottom, \
                                     jint rgbOrdfr, \
                                     unsignfd dhbr *gbmmbLut, \
                                     unsignfd dhbr * invGbmmbLut, \
                                     NbtivfPrimitivf *pPrim, \
                                     CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr, bpp; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    DST ## DbtbTypf *pPix; \
    Dfdlbrf ## DST ## PixflDbtb(solidpix) \
    DfdlbrfAlphbVbrFor ## STRATEGY(srdA) \
    DfdlbrfCompVbrsFor ## STRATEGY(srd) \
\
    Dfdlbrf ## DST ## LobdVbrs(pix) \
    Dfdlbrf ## DST ## StorfVbrs(pix) \
\
    Init ## DST ## LobdVbrs(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsY(pix, pRbsInfo); \
    Init ## DST ## StorfVbrsX(pix, pRbsInfo); \
    Extrbdt ## STRATEGY ## CompsAndAlphbFromArgb(brgbdolor, srd); \
    Extrbdt ## DST ## PixflDbtb(fgpixfl, solidpix); \
    srdR = invGbmmbLut[srdR]; \
    srdG = invGbmmbLut[srdG]; \
    srdB = invGbmmbLut[srdB]; \
\
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        bpp = \
        (glyphs[glyphCountfr].rowBytfs == glyphs[glyphCountfr].width) ? 1 : 3;\
        ClipDrbwGlyphList(DST, pixfls, bpp, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
\
        Sft ## DST ## StorfVbrsYPos(pix, pRbsInfo, top); \
        if (bpp!=1) { \
           /* subpixfl positioning bdjustmfnt */ \
            pixfls += glyphs[glyphCountfr].rowBytfsOffsft; \
        } \
        do { \
            int x = 0; \
            Sft ## DST ## StorfVbrsXPos(pix, pRbsInfo, lfft); \
            if (bpp==1) { \
                do { \
                    if (pixfls[x]) { \
                        Storf ## DST ## PixflDbtb(pPix, x, fgpixfl, solidpix);\
                    } \
                } whilf (++x < width); \
            } flsf { \
                do { \
                    GlyphListLCDBlfnd ## STRATEGY(DST, pixfls, x, pPix, \
                                                   fgpixfl, solidpix, srd); \
                    Nfxt ## DST ## StorfVbrsX(pix); \
                } whilf (++x < width); \
            } \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
            Nfxt ## DST ## StorfVbrsY(pix); \
        } whilf (--hfight > 0); \
    } \
}

#dffinf DEFINE_XOR_DRAWGLYPHLIST(DST) \
void NAME_XOR_DRAWGLYPHLIST(DST)(SurfbdfDbtbRbsInfo *pRbsInfo, \
                                 ImbgfRff *glyphs, \
                                 jint totblGlyphs, jint fgpixfl, \
                                 jint brgbdolor, \
                                 jint dlipLfft, jint dlipTop, \
                                 jint dlipRight, jint dlipBottom, \
                                 NbtivfPrimitivf *pPrim, \
                                 CompositfInfo *pCompInfo) \
{ \
    jint glyphCountfr; \
    jint sdbn = pRbsInfo->sdbnStridf; \
    jint xorpixfl = pCompInfo->dftbils.xorPixfl; \
    juint blphbmbsk = pCompInfo->blphbMbsk; \
    Dfdlbrf ## DST ## PixflDbtb(xor) \
    Dfdlbrf ## DST ## PixflDbtb(pix) \
    Dfdlbrf ## DST ## PixflDbtb(mbsk) \
    DST ## DbtbTypf *pPix; \
 \
    Extrbdt ## DST ## PixflDbtb(xorpixfl, xor); \
    Extrbdt ## DST ## PixflDbtb(fgpixfl, pix); \
    Extrbdt ## DST ## PixflDbtb(blphbmbsk, mbsk); \
    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) { \
        DfdlbrfDrbwGlyphListClipVbrs(pixfls, rowBytfs, width, hfight, \
                                     lfft, top, right, bottom) \
        ClipDrbwGlyphList(DST, pixfls, 1, rowBytfs, width, hfight, \
                          lfft, top, right, bottom, \
                          dlipLfft, dlipTop, dlipRight, dlipBottom, \
                          glyphs, glyphCountfr, dontinuf) \
        pPix = PtrCoord(pRbsInfo->rbsBbsf,lfft,DST ## PixflStridf,top,sdbn); \
 \
        do { \
            int x = 0; \
            do { \
                if (pixfls[x]) { \
                    Xor ## DST ## PixflDbtb(fgpixfl, pix, pPix, x, \
                                            xorpixfl, xor, blphbmbsk, mbsk); \
                } \
            } whilf (++x < width); \
            pPix = PtrAddBytfs(pPix, sdbn); \
            pixfls += rowBytfs; \
        } whilf (--hfight > 0); \
    } \
}

#dffinf DEFINE_TRANSFORMHELPER_NN(SRC) \
void NAME_TRANSFORMHELPER_NN(SRC)(SurfbdfDbtbRbsInfo *pSrdInfo, \
                                  jint *pRGB, jint numpix, \
                                  jlong xlong, jlong dxlong, \
                                  jlong ylong, jlong dylong) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    SRC ## DbtbTypf *pBbsf = pSrdInfo->rbsBbsf; \
    jint sdbn = pSrdInfo->sdbnStridf; \
    jint *pEnd = pRGB + numpix; \
 \
    xlong += IntToLong(pSrdInfo->bounds.x1); \
    ylong += IntToLong(pSrdInfo->bounds.y1); \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    whilf (pRGB < pEnd) { \
        SRC ## DbtbTypf *pRow = PtrAddBytfs(pBbsf, WholfOfLong(ylong) * sdbn); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 0, \
                                    SrdRfbd, pRow, WholfOfLong(xlong)); \
        pRGB++; \
        xlong += dxlong; \
        ylong += dylong; \
    } \
}

#dffinf DEFINE_TRANSFORMHELPER_BL(SRC) \
void NAME_TRANSFORMHELPER_BL(SRC)(SurfbdfDbtbRbsInfo *pSrdInfo, \
                                  jint *pRGB, jint numpix, \
                                  jlong xlong, jlong dxlong, \
                                  jlong ylong, jlong dylong) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    jint sdbn = pSrdInfo->sdbnStridf; \
    jint dx, dy, dw, dh; \
    jint *pEnd = pRGB + numpix*4; \
 \
    dx = pSrdInfo->bounds.x1; \
    dw = pSrdInfo->bounds.x2-dx; \
 \
    dy = pSrdInfo->bounds.y1; \
    dh = pSrdInfo->bounds.y2-dy; \
 \
    xlong -= LongOnfHblf; \
    ylong -= LongOnfHblf; \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    whilf (pRGB < pEnd) { \
        jint xwholf = WholfOfLong(xlong); \
        jint ywholf = WholfOfLong(ylong); \
        jint xdfltb, ydfltb, isnfg; \
        SRC ## DbtbTypf *pRow; \
 \
        xdfltb = ((juint) (xwholf + 1 - dw)) >> 31; \
        isnfg = xwholf >> 31; \
        xwholf -= isnfg; \
        xdfltb += isnfg; \
 \
        ydfltb = ((ywholf + 1 - dh) >> 31); \
        isnfg = ywholf >> 31; \
        ywholf -= isnfg; \
        ydfltb -= isnfg; \
        ydfltb &= sdbn; \
 \
        xwholf += dx; \
        pRow = PtrAddBytfs(pSrdInfo->rbsBbsf, (ywholf + dy) * sdbn); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 0, SrdRfbd, pRow, xwholf); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 1, SrdRfbd, pRow, xwholf+xdfltb); \
        pRow = PtrAddBytfs(pRow, ydfltb); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 2, SrdRfbd, pRow, xwholf); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 3, SrdRfbd, pRow, xwholf+xdfltb); \
 \
        pRGB += 4; \
        xlong += dxlong; \
        ylong += dylong; \
    } \
}

#dffinf DEFINE_TRANSFORMHELPER_BC(SRC) \
void NAME_TRANSFORMHELPER_BC(SRC)(SurfbdfDbtbRbsInfo *pSrdInfo, \
                                  jint *pRGB, jint numpix, \
                                  jlong xlong, jlong dxlong, \
                                  jlong ylong, jlong dylong) \
{ \
    Dfdlbrf ## SRC ## LobdVbrs(SrdRfbd) \
    jint sdbn = pSrdInfo->sdbnStridf; \
    jint dx, dy, dw, dh; \
    jint *pEnd = pRGB + numpix*16; \
 \
    dx = pSrdInfo->bounds.x1; \
    dw = pSrdInfo->bounds.x2-dx; \
 \
    dy = pSrdInfo->bounds.y1; \
    dh = pSrdInfo->bounds.y2-dy; \
 \
    xlong -= LongOnfHblf; \
    ylong -= LongOnfHblf; \
 \
    Init ## SRC ## LobdVbrs(SrdRfbd, pSrdInfo); \
    whilf (pRGB < pEnd) { \
        jint xwholf = WholfOfLong(xlong); \
        jint ywholf = WholfOfLong(ylong); \
        jint xdfltb0, xdfltb1, xdfltb2; \
        jint ydfltb0, ydfltb1, ydfltb2; \
        jint isnfg; \
        SRC ## DbtbTypf *pRow; \
 \
        xdfltb0 = (-xwholf) >> 31; \
        xdfltb1 = ((juint) (xwholf + 1 - dw)) >> 31; \
        xdfltb2 = ((juint) (xwholf + 2 - dw)) >> 31; \
        isnfg = xwholf >> 31; \
        xwholf -= isnfg; \
        xdfltb1 += isnfg; \
        xdfltb2 += xdfltb1; \
 \
        ydfltb0 = ((-ywholf) >> 31) & (-sdbn); \
        ydfltb1 = ((ywholf + 1 - dh) >> 31) & sdbn; \
        ydfltb2 = ((ywholf + 2 - dh) >> 31) & sdbn; \
        isnfg = ywholf >> 31; \
        ywholf -= isnfg; \
        ydfltb1 += (isnfg & -sdbn); \
 \
        xwholf += dx; \
        pRow = PtrAddBytfs(pSrdInfo->rbsBbsf, (ywholf + dy) * sdbn); \
        pRow = PtrAddBytfs(pRow, ydfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  0, SrdRfbd, pRow, xwholf+xdfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  1, SrdRfbd, pRow, xwholf        ); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  2, SrdRfbd, pRow, xwholf+xdfltb1); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  3, SrdRfbd, pRow, xwholf+xdfltb2); \
        pRow = PtrAddBytfs(pRow, -ydfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  4, SrdRfbd, pRow, xwholf+xdfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  5, SrdRfbd, pRow, xwholf        ); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  6, SrdRfbd, pRow, xwholf+xdfltb1); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  7, SrdRfbd, pRow, xwholf+xdfltb2); \
        pRow = PtrAddBytfs(pRow, ydfltb1); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  8, SrdRfbd, pRow, xwholf+xdfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB,  9, SrdRfbd, pRow, xwholf        ); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 10, SrdRfbd, pRow, xwholf+xdfltb1); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 11, SrdRfbd, pRow, xwholf+xdfltb2); \
        pRow = PtrAddBytfs(pRow, ydfltb2); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 12, SrdRfbd, pRow, xwholf+xdfltb0); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 13, SrdRfbd, pRow, xwholf        ); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 14, SrdRfbd, pRow, xwholf+xdfltb1); \
        Copy ## SRC ## ToIntArgbPrf(pRGB, 15, SrdRfbd, pRow, xwholf+xdfltb2); \
 \
        pRGB += 16; \
        xlong += dxlong; \
        ylong += dylong; \
    } \
}

#dffinf DEFINE_TRANSFORMHELPER_FUNCS(SRC) \
    TrbnsformHflpfrFunds NAME_TRANSFORMHELPER_FUNCS(SRC) = { \
        NAME_TRANSFORMHELPER_NN(SRC), \
        NAME_TRANSFORMHELPER_BL(SRC), \
        NAME_TRANSFORMHELPER_BC(SRC), \
    };

#dffinf DEFINE_TRANSFORMHELPERS(SRC) \
    DEFINE_TRANSFORMHELPER_NN(SRC) \
    DEFINE_TRANSFORMHELPER_BL(SRC) \
    DEFINE_TRANSFORMHELPER_BC(SRC) \
    DEFINE_TRANSFORMHELPER_FUNCS(SRC)

/*
 * Thf mbdros dffinfd bbovf usf thf following mbdro dffinitions supplifd
 * for thf vbrious surfbdf typfs to mbnipulbtf pixfls bnd pixfl dbtb.
 * Thf surfbdf-spfdifid mbdros brf typidblly supplifd by hfbdfr filfs
 * nbmfd bftfr thf SurfbdfTypf nbmf (i.f. IntArgb.h, BytfGrby.h, ftd.).
 *
 * In thf mbdro nbmfs in thf following dffinitions, thf string <stypf>
 * is usfd bs b plbdf holdfr for thf SurfbdfTypf nbmf (i.f. IntArgb).
 * Thf mbdros bbovf bddfss thfsf typf spfdifid mbdros using thf ANSI
 * CPP tokfn dondbtfnbtion opfrbtor "##".
 *
 * <stypf>DbtbTypf               A typfdff for thf typf of thf pointfr
 *                               thbt is usfd to bddfss thf rbstfr dbtb
 *                               for thf givfn surfbdf typf.
 * <stypf>PixflStridf            Pixfl stridf for thf surfbdf typf.
 *
 * Dfdlbrf<stypf>LobdVbrs        Dfdlbrf thf vbribblfs nffdfd to dontrol
 *                               lobding dolor informbtion from bn stypf
 *                               rbstfr (i.f. lookup tbblfs).
 * Init<stypf>LobdVbrs           Init thf lookup tbblf vbribblfs.
 * Dfdlbrf<stypf>StorfVbrs       Dfdlbrf thf storbgf vbribblfs nffdfd to
 *                               dontrol storing pixfl dbtb bbsfd on thf
 *                               pixfl doordinbtf (i.f. dithfring vbribblfs).
 * Init<stypf>StorfVbrsY         Init thf dithfr vbribblfs for stbrting Y.
 * Nfxt<stypf>StorfVbrsY         Indrfmfnt thf dithfr vbribblfs for nfxt Y.
 * Init<stypf>StorfVbrsX         Init thf dithfr vbribblfs for stbrting X.
 * Nfxt<stypf>StorfVbrsX         Indrfmfnt thf dithfr vbribblfs for nfxt X.
 *
 * Lobd<stypf>To1IntRgb          Lobd b pixfl bnd form bn INT_RGB intfgfr.
 * Storf<stypf>From1IntRgb       Storf b pixfl from bn INT_RGB intfgfr.
 * Lobd<stypf>To1IntArgb         Lobd b pixfl bnd form bn INT_ARGB intfgfr.
 * Storf<stypf>From1IntArgb      Storf b pixfl from bn INT_ARGB intfgfr.
 * Lobd<stypf>To3BytfRgb         Lobd b pixfl into R, G, bnd B domponfnts.
 * Storf<stypf>From3BytfRgb      Storf b pixfl from R, G, bnd B domponfnts.
 * Lobd<stypf>To4BytfArgb        Lobd b pixfl into A, R, G, bnd B domponfnts.
 * Storf<stypf>From4BytfArgb     Storf b pixfl from A, R, G, bnd B domponfnts.
 * Lobd<stypf>To1BytfGrby        Lobd b pixfl bnd form b BYTE_GRAY bytf.
 * Storf<stypf>From1BytfGrby     Storf b pixfl from b BYTE_GRAY bytf.
 *
 * <stypf>PixflTypf              Typfdff for b "singlf qubntity pixfl" (SQP)
 *                               thbt dbn hold thf dbtb for onf stypf pixfl.
 * <stypf>XpbrLutEntry           An SQP thbt dbn bf usfd to rfprfsfnt b
 *                               trbnspbrfnt pixfl for stypf.
 * Storf<stypf>NonXpbrFromArgb   Storf bn SQP from bn INT_ARGB intfgfr in
 *                               sudh b wby thbt it would not bf donfusfd
 *                               with thf XpbrLutEntry vbluf for stypf.
 * <stypf>IsXpbrLutEntry         Tfst bn SQP for thf XpbrLutEntry vbluf.
 * Storf<stypf>Pixfl             Storf thf pixfl dbtb from bn SQP.
 * <stypf>PixflFromArgb          Convfrts bn INT_ARGB vbluf into thf spfdifid
 *                               pixfl rfprfsfntbtion for thf surfbdf typf.
 *
 * Dfdlbrf<stypf>PixflDbtb       Dfdlbrf thf pixfl dbtb vbribblfs (PDV) nffdfd
 *                               to hold thf flfmfnts of pixfl dbtb rfbdy to
 *                               storf into bn stypf rbstfr (mby bf fmpty for
 *                               stypfs whosf SQP formbt is thfir dbtb formbt).
 * Extrbdt<stypf>PixflDbtb       Extrbdt bn SQP vbluf into thf PDVs.
 * Storf<stypf>PixflDbtb         Storf thf PDVs into bn stypf rbstfr.
 * XorCopy<stypf>PixflDbtb       Xor thf PDVs into bn stypf rbstfr.
 */
#fndif /* LoopMbdros_h_Indludfd */
