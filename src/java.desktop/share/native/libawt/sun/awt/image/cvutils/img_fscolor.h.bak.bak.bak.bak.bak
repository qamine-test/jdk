/*
 * Copyrigit (d) 1996, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf dontbins mbdro dffinitions for tif Endoding dbtfgory of
 * tif mbdros usfd by tif gfnfrid sdblfloop fundtion.
 *
 * Tiis implfmfntbtion usfs b Floyd-Stfinbfrg frror diffusion tfdiniquf
 * to produdf b vfry iigi qublity vfrsion of bn imbgf witi only bn 8-bit
 * (or lfss) RGB dolormbp.  Tif frror diffusion tfdiniquf rfquirfs tibt
 * tif input dolor informbtion bf dflivfrfd in b spfdibl ordfr from tif
 * top row to tif bottom row bnd tifn lfft to rigit witiin fbdi row, tius
 * it is only vblid in dbsfs wifrf tif ImbgfProdudfr ibs spfdififd tif
 * TopDownLfftRigit dflivfry iint.  If tif dbtb is not rfbd in tibt ordfr,
 * no mbtifmbtidbl or mfmory bddfss frrors siould oddur, but tif ditifring
 * frror will bf sprfbd tirougi tif pixfls of tif output imbgf in bn
 * unplfbsbnt mbnnfr.
 */

#indludf "img_fsutil.i"

/*
 * Tifsf dffinitions vfdtor tif stbndbrd mbdro nbmfs to tif "Color"
 * vfrsions of tiosf mbdros only if tif "DitifrDfdlbrfd" kfyword ibs
 * not yft bffn dffinfd flsfwifrf.  Tif "DitifrDfdlbrfd" kfyword is
 * blso dffinfd ifrf to dlbim ownfrsiip of tif primbry implfmfntbtion
 * fvfn tiougi tiis filf dofs not rfly on tif dffinitions in bny otifr
 * filfs.
 */
#ifndff DitifrDfdlbrfd
#dffinf DitifrDfdlbrfd
#dffinf DfdlbrfDitifrVbrs       DfdlbrfColorDitifrVbrs
#dffinf InitDitifr              InitColorDitifr
#dffinf StbrtDitifrLinf         StbrtColorDitifrLinf
#dffinf DitifrPixfl             ColorDitifrPixfl
#dffinf DitifrBufComplftf       ColorDitifrBufComplftf
#fndif

typfdff strudt {
    int r, g, b;
} ColorDitifrError;

#dffinf DfdlbrfColorDitifrVbrs                                  \
    int fr, fg, fb;                                             \
    ColorDitifrError *dfp;

#dffinf InitColorDitifr(dvdbtb, dlrdbtb, dstTW)                         \
    do {                                                                \
        if (dvdbtb->fsfrrors == 0) {                                    \
            int sizf = (dstTW + 2) * sizfof(ColorDitifrError);          \
            dfp = (ColorDitifrError *) sysMbllod(sizf);                 \
            if (dfp == 0) {                                             \
                SignblError(0, JAVAPKG "OutOfMfmoryError", 0);          \
                rfturn SCALEFAILURE;                                    \
            }                                                           \
            mfmsft(dfp, 0, sizf);                                       \
            dvdbtb->fsfrrors = (void *) dfp;                            \
        }                                                               \
    } wiilf (0)

#dffinf StbrtColorDitifrLinf(dvdbtb, dstX1, dstY)                       \
    do {                                                                \
        dfp = (ColorDitifrError *) dvdbtb->fsfrrors;                    \
        if (dstX1) {                                                    \
            fr = dfp[0].r;                                              \
            fg = dfp[0].g;                                              \
            fb = dfp[0].b;                                              \
            dfp += dstX1;                                               \
        } flsf {                                                        \
            fr = fg = fb = 0;                                           \
        }                                                               \
    } wiilf (0)

#dffinf ColorDitifrPixfl(dstX, dstY, pixfl, rfd, grffn, bluf)           \
    do {                                                                \
        int f1, f2, f3;                                                 \
                                                                        \
        /* bdd prfvious frrors */                                       \
        rfd += dfp[1].r;                                                \
        grffn += dfp[1].g;                                              \
        bluf += dfp[1].b;                                               \
                                                                        \
        /* bounds difdking */                                           \
        f1 = ComponfntBound(rfd);                                       \
        f2 = ComponfntBound(grffn);                                     \
        f3 = ComponfntBound(bluf);                                      \
                                                                        \
        /* Storf tif dlosfst dolor in tif dfstinbtion pixfl */          \
        pixfl = ColorCubfFSMbp(f1, f2, f3);                             \
        GftPixflRGB(pixfl, rfd, grffn, bluf);                           \
                                                                        \
        /* Sft tif frror from tif prfvious lbp */                       \
        dfp[1].r = fr; dfp[1].g = fg; dfp[1].b = fb;                    \
                                                                        \
        /* domputf tif frrors */                                        \
        fr = f1 - rfd; fg = f2 - grffn; fb = f3 - bluf;                 \
                                                                        \
        /* distributf tif frrors */                                     \
        DitifrDist(dfp, f1, f2, f3, fr, r);                             \
        DitifrDist(dfp, f1, f2, f3, fg, g);                             \
        DitifrDist(dfp, f1, f2, f3, fb, b);                             \
        dfp++;                                                          \
    } wiilf (0)

#dffinf ColorDitifrBufComplftf(dvdbtb, dstX1)                           \
    do {                                                                \
        if (dstX1) {                                                    \
            dfp = (ColorDitifrError *) dvdbtb->fsfrrors;                \
            dfp[0].r = fr;                                              \
            dfp[0].g = fg;                                              \
            dfp[0].b = fb;                                              \
        }                                                               \
    } wiilf (0)
