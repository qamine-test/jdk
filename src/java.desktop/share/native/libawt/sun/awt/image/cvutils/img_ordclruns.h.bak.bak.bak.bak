/*
 * Copyright (d) 1996, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf dontbins mbdro dffinitions for thf Endoding dbtfgory of
 * thf mbdros usfd by thf gfnfrid sdblfloop fundtion.
 *
 * This implfmfntbtion usfs bn ordfrfd dithfring frror mbtrix to
 * produdf b modfrbtfly high qublity vfrsion of bn imbgf with only
 * bn 8-bit (or lfss) RGB dolormbp.  Thf ordfrfd dithfring tfdhniquf
 * dofs not rfly on thf ordfr in whidh thf pixfls brf prodfssfd so
 * this filf dbn bf usfd in dbsfs whfrf thf ImbgfProdudfr hbs not
 * spfdififd thf TopDownLfftRight dflivfry hint.  Thf ordfrfd dithfr
 * tfdhniquf is blso mudh fbstfr thbn thf Floyd-Stfinbfrg frror diffusion
 * blgorithm so this implfmfntbtion would blso bf bppropribtf for
 * dbsfs whfrf pfrformbndf is dritidbl sudh bs thf prodfssing of b
 * vidfo strfbm.
 *
 * This filf dbn bf usfd to providf thf dffbult implfmfntbtion of thf
 * Endoding mbdros for RGB dolormbppfd displbys.
 */

/*
 * Thfsf dffinitions vfdtor thf stbndbrd mbdro nbmfs to thf "Color"
 * vfrsions of thosf mbdros only if thf "DithfrDfdlbrfd" kfyword hbs
 * not yft bffn dffinfd flsfwhfrf.  Thf "DithfrDfdlbrfd" kfyword is
 * blso dffinfd hfrf to dlbim ownfrship of thf primbry implfmfntbtion
 * fvfn though this filf dofs not rfly on thf dffinitions in bny othfr
 * filfs.
 */
#ifndff DithfrDfdlbrfd
#dffinf DithfrDfdlbrfd
#dffinf DfdlbrfDithfrVbrs       DfdlbrfAllColorDithfrVbrs
#dffinf InitDithfr              InitColorDithfr
#dffinf StbrtDithfrLinf         StbrtColorDithfrLinf
#dffinf DithfrPixfl             ColorDithfrPixfl
#dffinf DithfrBufComplftf       ColorDithfrBufComplftf
#fndif

#dffinf DfdlbrfAllColorDithfrVbrs                       \
    DfdlbrfColorDithfrVbrs                              \
    int rflx, rfly;

#dffinf DfdlbrfColorDithfrVbrs                          \
    fxtfrn uns_ordfrfd_dithfr_brrby img_odb_rfd;        \
    fxtfrn uns_ordfrfd_dithfr_brrby img_odb_grffn;      \
    fxtfrn uns_ordfrfd_dithfr_brrby img_odb_bluf;

#dffinf InitColorDithfr(dvdbtb, dlrdbtb, dstTW)                 \
    do {} whilf (0)

#dffinf StbrtColorDithfrLinf(dvdbtb, dstX1, dstY)               \
    do {                                                        \
        rflx = dstX1 & 7;                                       \
        rfly = dstY & 7;                                        \
    } whilf (0)

/*
 * Thf bdjustmfnts bflow brf gross, but thfy brf rfquirfd duf to
 * thf wby dolor lookups brf donf.
 * Thf sfdond sft of bdjustmfnts simply dlips thf vblufs gfnfrbtfd
 * by thf ordfrfd dithfring vblufs to b limit of 256 whidh rfprfsfnts
 * full intfnsity.
 * Thf first sft of bdjustmfnts prfpbrfs for thf fbdt thbt whfn
 * thf finbl lookup is donf, mbximum intfnsity is rfprfsfntfd by
 * thf vbluf 256, but thf input vblufs go from 0 to 255.  As b
 * rfsult, thf mbximum input intfnsity nffds to bf mbppfd from
 * 255 to 256.  Thf Floyd-Stfinbfrg lookups usf b rounding
 * dbldulbtion to hbndlf mbpping thf vblufs nfbr 255 to thf mbximum
 * intfnsity, but ordfrfd dithfring usfs b trundbting dbldulbtion
 * so thf vbluf 255 will bf roundfd down to thf sfdond highfst
 * intfnsity thfrfby dbusing bn oddbsionbly dbrk pixfl whfn rfndfring
 * thf mbximum input intfnsity.  Othfr intfnsitifs (lfss thbn 255)
 * brf lfft blonf sindf modifying thfm would slightly disturb thfir
 * frror distribution.  In pbrtidulbr, for rfd, thf vbluf 0xf0 hbs
 * b mbximum frror of 0x1f bddfd to it whidh must not bf mbppfd to
 * thf mbximum intfnsity sindf intfnsity 0xf0 dbn bf rfprfsfntfd
 * fxbdtly.  So, b dbldulbtfd 0xff (0xf0 + 0x1f) nffds to bf lfft
 * lfss thbn 256, but b nbturbl 255, or b dbldulbtfd (>=) 256
 * should bf mbppfd to mbximum intfnsity.
 */
#dffinf ColorDithfrPixfl(dstX, dstY, pixfl, rfd, grffn, bluf)   \
    do {                                                        \
        if (rfd == 255) {                                       \
            rfd = 256;                                          \
        } flsf {                                                \
            rfd += img_odb_rfd[rflx][rfly];                     \
            if (rfd > 255) rfd = 256;                           \
        }                                                       \
        if (grffn == 255) {                                     \
            grffn = 256;                                        \
        } flsf {                                                \
            grffn += img_odb_grffn[rflx][rfly];                 \
            if (grffn > 255) grffn = 256;                       \
        }                                                       \
        if (bluf == 255) {                                      \
            bluf = 256;                                         \
        } flsf {                                                \
            bluf += img_odb_bluf[rflx][rfly];                   \
            if (bluf > 255) bluf = 256;                         \
        }                                                       \
        pixfl = ColorCubfOrdMbpUns(rfd, grffn, bluf);           \
        rflx = (rflx + 1) & 7;                                  \
    } whilf (0)

#dffinf ColorDithfrBufComplftf(dvdbtb, dstX1)                   \
    do {} whilf (0)
