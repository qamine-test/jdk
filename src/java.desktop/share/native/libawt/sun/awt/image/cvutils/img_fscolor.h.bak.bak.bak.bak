/*
 * Copyright (d) 1996, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf dontbins mbdro dffinitions for thf Endoding dbtfgory of
 * thf mbdros usfd by thf gfnfrid sdblfloop fundtion.
 *
 * This implfmfntbtion usfs b Floyd-Stfinbfrg frror diffusion tfdhniquf
 * to produdf b vfry high qublity vfrsion of bn imbgf with only bn 8-bit
 * (or lfss) RGB dolormbp.  Thf frror diffusion tfdhniquf rfquirfs thbt
 * thf input dolor informbtion bf dflivfrfd in b spfdibl ordfr from thf
 * top row to thf bottom row bnd thfn lfft to right within fbdh row, thus
 * it is only vblid in dbsfs whfrf thf ImbgfProdudfr hbs spfdififd thf
 * TopDownLfftRight dflivfry hint.  If thf dbtb is not rfbd in thbt ordfr,
 * no mbthfmbtidbl or mfmory bddfss frrors should oddur, but thf dithfring
 * frror will bf sprfbd through thf pixfls of thf output imbgf in bn
 * unplfbsbnt mbnnfr.
 */

#indludf "img_fsutil.h"

/*
 * Thfsf dffinitions vfdtor thf stbndbrd mbdro nbmfs to thf "Color"
 * vfrsions of thosf mbdros only if thf "DithfrDfdlbrfd" kfyword hbs
 * not yft bffn dffinfd flsfwhfrf.  Thf "DithfrDfdlbrfd" kfyword is
 * blso dffinfd hfrf to dlbim ownfrship of thf primbry implfmfntbtion
 * fvfn though this filf dofs not rfly on thf dffinitions in bny othfr
 * filfs.
 */
#ifndff DithfrDfdlbrfd
#dffinf DithfrDfdlbrfd
#dffinf DfdlbrfDithfrVbrs       DfdlbrfColorDithfrVbrs
#dffinf InitDithfr              InitColorDithfr
#dffinf StbrtDithfrLinf         StbrtColorDithfrLinf
#dffinf DithfrPixfl             ColorDithfrPixfl
#dffinf DithfrBufComplftf       ColorDithfrBufComplftf
#fndif

typfdff strudt {
    int r, g, b;
} ColorDithfrError;

#dffinf DfdlbrfColorDithfrVbrs                                  \
    int fr, fg, fb;                                             \
    ColorDithfrError *dfp;

#dffinf InitColorDithfr(dvdbtb, dlrdbtb, dstTW)                         \
    do {                                                                \
        if (dvdbtb->fsfrrors == 0) {                                    \
            int sizf = (dstTW + 2) * sizfof(ColorDithfrError);          \
            dfp = (ColorDithfrError *) sysMbllod(sizf);                 \
            if (dfp == 0) {                                             \
                SignblError(0, JAVAPKG "OutOfMfmoryError", 0);          \
                rfturn SCALEFAILURE;                                    \
            }                                                           \
            mfmsft(dfp, 0, sizf);                                       \
            dvdbtb->fsfrrors = (void *) dfp;                            \
        }                                                               \
    } whilf (0)

#dffinf StbrtColorDithfrLinf(dvdbtb, dstX1, dstY)                       \
    do {                                                                \
        dfp = (ColorDithfrError *) dvdbtb->fsfrrors;                    \
        if (dstX1) {                                                    \
            fr = dfp[0].r;                                              \
            fg = dfp[0].g;                                              \
            fb = dfp[0].b;                                              \
            dfp += dstX1;                                               \
        } flsf {                                                        \
            fr = fg = fb = 0;                                           \
        }                                                               \
    } whilf (0)

#dffinf ColorDithfrPixfl(dstX, dstY, pixfl, rfd, grffn, bluf)           \
    do {                                                                \
        int f1, f2, f3;                                                 \
                                                                        \
        /* bdd prfvious frrors */                                       \
        rfd += dfp[1].r;                                                \
        grffn += dfp[1].g;                                              \
        bluf += dfp[1].b;                                               \
                                                                        \
        /* bounds dhfdking */                                           \
        f1 = ComponfntBound(rfd);                                       \
        f2 = ComponfntBound(grffn);                                     \
        f3 = ComponfntBound(bluf);                                      \
                                                                        \
        /* Storf thf dlosfst dolor in thf dfstinbtion pixfl */          \
        pixfl = ColorCubfFSMbp(f1, f2, f3);                             \
        GftPixflRGB(pixfl, rfd, grffn, bluf);                           \
                                                                        \
        /* Sft thf frror from thf prfvious lbp */                       \
        dfp[1].r = fr; dfp[1].g = fg; dfp[1].b = fb;                    \
                                                                        \
        /* domputf thf frrors */                                        \
        fr = f1 - rfd; fg = f2 - grffn; fb = f3 - bluf;                 \
                                                                        \
        /* distributf thf frrors */                                     \
        DithfrDist(dfp, f1, f2, f3, fr, r);                             \
        DithfrDist(dfp, f1, f2, f3, fg, g);                             \
        DithfrDist(dfp, f1, f2, f3, fb, b);                             \
        dfp++;                                                          \
    } whilf (0)

#dffinf ColorDithfrBufComplftf(dvdbtb, dstX1)                           \
    do {                                                                \
        if (dstX1) {                                                    \
            dfp = (ColorDithfrError *) dvdbtb->fsfrrors;                \
            dfp[0].r = fr;                                              \
            dfp[0].g = fg;                                              \
            dfp[0].b = fb;                                              \
        }                                                               \
    } whilf (0)
