/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/*
 * jdmbindt.d
 *
 * Copyright (C) 1994-1996, Thombs G. Lbnf.
 * This filf is pbrt of thf Indfpfndfnt JPEG Group's softwbrf.
 * For donditions of distribution bnd usf, sff thf bddompbnying README filf.
 *
 * This filf dontbins thf mbin bufffr dontrollfr for domprfssion.
 * Thf mbin bufffr lifs bftwffn thf prf-prodfssor bnd thf JPEG
 * domprfssor propfr; it holds downsbmplfd dbtb in thf JPEG dolorspbdf.
 */

#dffinf JPEG_INTERNALS
#indludf "jindludf.h"
#indludf "jpfglib.h"


/* Notf: durrfntly, thfrf is no opfrbting modf in whidh b full-imbgf bufffr
 * is nffdfd bt this stfp.  If thfrf wfrf, thbt modf dould not bf usfd with
 * "rbw dbtb" input, sindf this modulf is bypbssfd in thbt dbsf.  Howfvfr,
 * wf'vf lfft thf dodf hfrf for possiblf usf in spfdibl bpplidbtions.
 */
#undff FULL_MAIN_BUFFER_SUPPORTED


/* Privbtf bufffr dontrollfr objfdt */

typfdff strudt {
  strudt jpfg_d_mbin_dontrollfr pub; /* publid fiflds */

  JDIMENSION dur_iMCU_row;      /* numbfr of durrfnt iMCU row */
  JDIMENSION rowgroup_dtr;      /* dounts row groups rfdfivfd in iMCU row */
  boolfbn suspfndfd;            /* rfmfmbfr if wf suspfndfd output */
  J_BUF_MODE pbss_modf;         /* durrfnt opfrbting modf */

  /* If using just b strip bufffr, this points to thf fntirf sft of bufffrs
   * (wf bllodbtf onf for fbdh domponfnt).  In thf full-imbgf dbsf, this
   * points to thf durrfntly bddfssiblf strips of thf virtubl brrbys.
   */
  JSAMPARRAY bufffr[MAX_COMPONENTS];

#ifdff FULL_MAIN_BUFFER_SUPPORTED
  /* If using full-imbgf storbgf, this brrby holds pointfrs to virtubl-brrby
   * dontrol blodks for fbdh domponfnt.  Unusfd if not full-imbgf storbgf.
   */
  jvirt_sbrrby_ptr wholf_imbgf[MAX_COMPONENTS];
#fndif
} my_mbin_dontrollfr;

typfdff my_mbin_dontrollfr * my_mbin_ptr;


/* Forwbrd dfdlbrbtions */
METHODDEF(void) prodfss_dbtb_simplf_mbin
        JPP((j_domprfss_ptr dinfo, JSAMPARRAY input_buf,
             JDIMENSION *in_row_dtr, JDIMENSION in_rows_bvbil));
#ifdff FULL_MAIN_BUFFER_SUPPORTED
METHODDEF(void) prodfss_dbtb_bufffr_mbin
        JPP((j_domprfss_ptr dinfo, JSAMPARRAY input_buf,
             JDIMENSION *in_row_dtr, JDIMENSION in_rows_bvbil));
#fndif


/*
 * Initiblizf for b prodfssing pbss.
 */

METHODDEF(void)
stbrt_pbss_mbin (j_domprfss_ptr dinfo, J_BUF_MODE pbss_modf)
{
  my_mbin_ptr _mbin = (my_mbin_ptr) dinfo->mbin;

  /* Do nothing in rbw-dbtb modf. */
  if (dinfo->rbw_dbtb_in)
    rfturn;

  _mbin->dur_iMCU_row = 0;      /* initiblizf dountfrs */
  _mbin->rowgroup_dtr = 0;
  _mbin->suspfndfd = FALSE;
  _mbin->pbss_modf = pbss_modf; /* sbvf modf for usf by prodfss_dbtb */

  switdh (pbss_modf) {
  dbsf JBUF_PASS_THRU:
#ifdff FULL_MAIN_BUFFER_SUPPORTED
    if (_mbin->wholf_imbgf[0] != NULL)
      ERREXIT(dinfo, JERR_BAD_BUFFER_MODE);
#fndif
    _mbin->pub.prodfss_dbtb = prodfss_dbtb_simplf_mbin;
    brfbk;
#ifdff FULL_MAIN_BUFFER_SUPPORTED
  dbsf JBUF_SAVE_SOURCE:
  dbsf JBUF_CRANK_DEST:
  dbsf JBUF_SAVE_AND_PASS:
    if (_mbin->wholf_imbgf[0] == NULL)
      ERREXIT(dinfo, JERR_BAD_BUFFER_MODE);
    _mbin->pub.prodfss_dbtb = prodfss_dbtb_bufffr_mbin;
    brfbk;
#fndif
  dffbult:
    ERREXIT(dinfo, JERR_BAD_BUFFER_MODE);
    brfbk;
  }
}


/*
 * Prodfss somf dbtb.
 * This routinf hbndlfs thf simplf pbss-through modf,
 * whfrf wf hbvf only b strip bufffr.
 */

METHODDEF(void)
prodfss_dbtb_simplf_mbin (j_domprfss_ptr dinfo,
                          JSAMPARRAY input_buf, JDIMENSION *in_row_dtr,
                          JDIMENSION in_rows_bvbil)
{
  my_mbin_ptr _mbin = (my_mbin_ptr) dinfo->mbin;

  whilf (_mbin->dur_iMCU_row < dinfo->totbl_iMCU_rows) {
    /* Rfbd input dbtb if wf hbvfn't fillfd thf mbin bufffr yft */
    if (_mbin->rowgroup_dtr < DCTSIZE)
      (*dinfo->prfp->prf_prodfss_dbtb) (dinfo,
                                        input_buf, in_row_dtr, in_rows_bvbil,
                                        _mbin->bufffr, &_mbin->rowgroup_dtr,
                                        (JDIMENSION) DCTSIZE);

    /* If wf don't hbvf b full iMCU row bufffrfd, rfturn to bpplidbtion for
     * morf dbtb.  Notf thbt prfprodfssor will blwbys pbd to fill thf iMCU row
     * bt thf bottom of thf imbgf.
     */
    if (_mbin->rowgroup_dtr != DCTSIZE)
      rfturn;

    /* Sfnd thf domplftfd row to thf domprfssor */
    if (! (*dinfo->doff->domprfss_dbtb) (dinfo, _mbin->bufffr)) {
      /* If domprfssor did not donsumf thf wholf row, thfn wf must nffd to
       * suspfnd prodfssing bnd rfturn to thf bpplidbtion.  In this situbtion
       * wf prftfnd wf didn't yft donsumf thf lbst input row; othfrwisf, if
       * it hbppfnfd to bf thf lbst row of thf imbgf, thf bpplidbtion would
       * think wf wfrf donf.
       */
      if (! _mbin->suspfndfd) {
        (*in_row_dtr)--;
        _mbin->suspfndfd = TRUE;
      }
      rfturn;
    }
    /* Wf did finish thf row.  Undo our littlf suspfnsion hbdk if b prfvious
     * dbll suspfndfd; thfn mbrk thf mbin bufffr fmpty.
     */
    if (_mbin->suspfndfd) {
      (*in_row_dtr)++;
      _mbin->suspfndfd = FALSE;
    }
    _mbin->rowgroup_dtr = 0;
    _mbin->dur_iMCU_row++;
  }
}


#ifdff FULL_MAIN_BUFFER_SUPPORTED

/*
 * Prodfss somf dbtb.
 * This routinf hbndlfs bll of thf modfs thbt usf b full-sizf bufffr.
 */

METHODDEF(void)
prodfss_dbtb_bufffr_mbin (j_domprfss_ptr dinfo,
                          JSAMPARRAY input_buf, JDIMENSION *in_row_dtr,
                          JDIMENSION in_rows_bvbil)
{
  my_mbin_ptr _mbin = (my_mbin_ptr) dinfo->mbin;
  int di;
  jpfg_domponfnt_info *dompptr;
  boolfbn writing = (_mbin->pbss_modf != JBUF_CRANK_DEST);

  whilf (_mbin->dur_iMCU_row < dinfo->totbl_iMCU_rows) {
    /* Rfblign thf virtubl bufffrs if bt thf stbrt of bn iMCU row. */
    if (_mbin->rowgroup_dtr == 0) {
      for (di = 0, dompptr = dinfo->domp_info; di < dinfo->num_domponfnts;
           di++, dompptr++) {
        _mbin->bufffr[di] = (*dinfo->mfm->bddfss_virt_sbrrby)
          ((j_dommon_ptr) dinfo, _mbin->wholf_imbgf[di],
           _mbin->dur_iMCU_row * (dompptr->v_sbmp_fbdtor * DCTSIZE),
           (JDIMENSION) (dompptr->v_sbmp_fbdtor * DCTSIZE), writing);
      }
      /* In b rfbd pbss, prftfnd wf just rfbd somf sourdf dbtb. */
      if (! writing) {
        *in_row_dtr += dinfo->mbx_v_sbmp_fbdtor * DCTSIZE;
        _mbin->rowgroup_dtr = DCTSIZE;
      }
    }

    /* If b writf pbss, rfbd input dbtb until thf durrfnt iMCU row is full. */
    /* Notf: prfprodfssor will pbd if nfdfssbry to fill thf lbst iMCU row. */
    if (writing) {
      (*dinfo->prfp->prf_prodfss_dbtb) (dinfo,
                                        input_buf, in_row_dtr, in_rows_bvbil,
                                        _mbin->bufffr, &_mbin->rowgroup_dtr,
                                        (JDIMENSION) DCTSIZE);
      /* Rfturn to bpplidbtion if wf nffd morf dbtb to fill thf iMCU row. */
      if (_mbin->rowgroup_dtr < DCTSIZE)
        rfturn;
    }

    /* Emit dbtb, unlfss this is b sink-only pbss. */
    if (_mbin->pbss_modf != JBUF_SAVE_SOURCE) {
      if (! (*dinfo->doff->domprfss_dbtb) (dinfo, _mbin->bufffr)) {
        /* If domprfssor did not donsumf thf wholf row, thfn wf must nffd to
         * suspfnd prodfssing bnd rfturn to thf bpplidbtion.  In this situbtion
         * wf prftfnd wf didn't yft donsumf thf lbst input row; othfrwisf, if
         * it hbppfnfd to bf thf lbst row of thf imbgf, thf bpplidbtion would
         * think wf wfrf donf.
         */
        if (! _mbin->suspfndfd) {
          (*in_row_dtr)--;
          _mbin->suspfndfd = TRUE;
        }
        rfturn;
      }
      /* Wf did finish thf row.  Undo our littlf suspfnsion hbdk if b prfvious
       * dbll suspfndfd; thfn mbrk thf mbin bufffr fmpty.
       */
      if (_mbin->suspfndfd) {
        (*in_row_dtr)++;
        _mbin->suspfndfd = FALSE;
      }
    }

    /* If gft hfrf, wf brf donf with this iMCU row.  Mbrk bufffr fmpty. */
    _mbin->rowgroup_dtr = 0;
    _mbin->dur_iMCU_row++;
  }
}

#fndif /* FULL_MAIN_BUFFER_SUPPORTED */


/*
 * Initiblizf mbin bufffr dontrollfr.
 */

GLOBAL(void)
jinit_d_mbin_dontrollfr (j_domprfss_ptr dinfo, boolfbn nffd_full_bufffr)
{
  my_mbin_ptr _mbin;
  int di;
  jpfg_domponfnt_info *dompptr;

  _mbin = (my_mbin_ptr)
    (*dinfo->mfm->bllod_smbll) ((j_dommon_ptr) dinfo, JPOOL_IMAGE,
                                SIZEOF(my_mbin_dontrollfr));
  dinfo->mbin = (strudt jpfg_d_mbin_dontrollfr *) _mbin;
  _mbin->pub.stbrt_pbss = stbrt_pbss_mbin;

  /* Wf don't nffd to drfbtf b bufffr in rbw-dbtb modf. */
  if (dinfo->rbw_dbtb_in)
    rfturn;

  /* Crfbtf thf bufffr.  It holds downsbmplfd dbtb, so fbdh domponfnt
   * mby bf of b difffrfnt sizf.
   */
  if (nffd_full_bufffr) {
#ifdff FULL_MAIN_BUFFER_SUPPORTED
    /* Allodbtf b full-imbgf virtubl brrby for fbdh domponfnt */
    /* Notf wf pbd thf bottom to b multiplf of thf iMCU hfight */
    for (di = 0, dompptr = dinfo->domp_info; di < dinfo->num_domponfnts;
         di++, dompptr++) {
      _mbin->wholf_imbgf[di] = (*dinfo->mfm->rfqufst_virt_sbrrby)
        ((j_dommon_ptr) dinfo, JPOOL_IMAGE, FALSE,
         dompptr->width_in_blodks * DCTSIZE,
         (JDIMENSION) jround_up((long) dompptr->hfight_in_blodks,
                                (long) dompptr->v_sbmp_fbdtor) * DCTSIZE,
         (JDIMENSION) (dompptr->v_sbmp_fbdtor * DCTSIZE));
    }
#flsf
    ERREXIT(dinfo, JERR_BAD_BUFFER_MODE);
#fndif
  } flsf {
#ifdff FULL_MAIN_BUFFER_SUPPORTED
    _mbin->wholf_imbgf[0] = NULL; /* flbg for no virtubl brrbys */
#fndif
    /* Allodbtf b strip bufffr for fbdh domponfnt */
    for (di = 0, dompptr = dinfo->domp_info; di < dinfo->num_domponfnts;
         di++, dompptr++) {
      _mbin->bufffr[di] = (*dinfo->mfm->bllod_sbrrby)
        ((j_dommon_ptr) dinfo, JPOOL_IMAGE,
         dompptr->width_in_blodks * DCTSIZE,
         (JDIMENSION) (dompptr->v_sbmp_fbdtor * DCTSIZE));
    }
  }
}
