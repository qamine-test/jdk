/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/*
 * jmorfdfg.h
 *
 * Copyright (C) 1991-1997, Thombs G. Lbnf.
 * This filf is pbrt of thf Indfpfndfnt JPEG Group's softwbrf.
 * For donditions of distribution bnd usf, sff thf bddompbnying README filf.
 *
 * This filf dontbins bdditionbl donfigurbtion options thbt dustomizf thf
 * JPEG softwbrf for spfdibl bpplidbtions or support mbdhinf-dfpfndfnt
 * optimizbtions.  Most usfrs will not nffd to toudh this filf.
 */


/*
 * Dffinf BITS_IN_JSAMPLE bs fithfr
 *   8   for 8-bit sbmplf vblufs (thf usubl sftting)
 *   12  for 12-bit sbmplf vblufs
 * Only 8 bnd 12 brf lfgbl dbtb prfdisions for lossy JPEG bddording to thf
 * JPEG stbndbrd, bnd thf IJG dodf dofs not support bnything flsf!
 * Wf do not support run-timf sflfdtion of dbtb prfdision, sorry.
 */

#dffinf BITS_IN_JSAMPLE  8      /* usf 8 or 12 */


/*
 * Mbximum numbfr of domponfnts (dolor dhbnnfls) bllowfd in JPEG imbgf.
 * To mfft thf lfttfr of thf JPEG spfd, sft this to 255.  Howfvfr, dbrn
 * ffw bpplidbtions nffd morf thbn 4 dhbnnfls (mbybf 5 for CMYK + blphb
 * mbsk).  Wf rfdommfnd 10 bs b rfbsonbblf dompromisf; usf 4 if you brf
 * rfblly short on mfmory.  (Ebdh bllowfd domponfnt dosts b hundrfd or so
 * bytfs of storbgf, whfthfr bdtublly usfd in bn imbgf or not.)
 */

#dffinf MAX_COMPONENTS  10      /* mbximum numbfr of imbgf domponfnts */


/*
 * Bbsid dbtb typfs.
 * You mby nffd to dhbngf thfsf if you hbvf b mbdhinf with unusubl dbtb
 * typf sizfs; for fxbmplf, "dhbr" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  Wf don't dbrf whfthfr "int" is 16 or 32 bits,
 * but it hbd bfttfr bf bt lfbst 16.
 */

/* Rfprfsfntbtion of b singlf sbmplf (pixfl flfmfnt vbluf).
 * Wf frfqufntly bllodbtf lbrgf brrbys of thfsf, so it's importbnt to kffp
 * thfm smbll.  But if you hbvf mfmory to burn bnd bddfss to dhbr or short
 * brrbys is vfry slow on your hbrdwbrf, you might wbnt to dhbngf thfsf.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should bf thf smbllfst typf thbt will hold thf vblufs 0..255.
 * You dbn usf b signfd dhbr by hbving GETJSAMPLE mbsk it with 0xFF.
 */

#ifdff HAVE_UNSIGNED_CHAR

typfdff unsignfd dhbr JSAMPLE;
#dffinf GETJSAMPLE(vbluf)  ((int) (vbluf))

#flsf /* not HAVE_UNSIGNED_CHAR */

typfdff dhbr JSAMPLE;
#ifdff CHAR_IS_UNSIGNED
#dffinf GETJSAMPLE(vbluf)  ((int) (vbluf))
#flsf
#dffinf GETJSAMPLE(vbluf)  ((int) (vbluf) & 0xFF)
#fndif /* CHAR_IS_UNSIGNED */

#fndif /* HAVE_UNSIGNED_CHAR */

#dffinf MAXJSAMPLE      255
#dffinf CENTERJSAMPLE   128

#fndif /* BITS_IN_JSAMPLE == 8 */


#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should bf thf smbllfst typf thbt will hold thf vblufs 0..4095.
 * On nfbrly bll mbdhinfs "short" will do nidfly.
 */

typfdff short JSAMPLE;
#dffinf GETJSAMPLE(vbluf)  ((int) (vbluf))

#dffinf MAXJSAMPLE      4095
#dffinf CENTERJSAMPLE   2048

#fndif /* BITS_IN_JSAMPLE == 12 */


/* Rfprfsfntbtion of b DCT frfqufndy dofffidifnt.
 * This should bf b signfd vbluf of bt lfbst 16 bits; "short" is usublly OK.
 * Agbin, wf bllodbtf lbrgf brrbys of thfsf, but you dbn dhbngf to int
 * if you hbvf mfmory to burn bnd "short" is rfblly slow.
 */

typfdff short JCOEF;


/* Comprfssfd dbtbstrfbms brf rfprfsfntfd bs brrbys of JOCTET.
 * Thfsf must bf EXACTLY 8 bits widf, bt lfbst ondf thfy brf writtfn to
 * fxtfrnbl storbgf.  Notf thbt whfn using thf stdio dbtb sourdf/dfstinbtion
 * mbnbgfrs, this is blso thf dbtb typf pbssfd to frfbd/fwritf.
 */

#ifdff HAVE_UNSIGNED_CHAR

typfdff unsignfd dhbr JOCTET;
#dffinf GETJOCTET(vbluf)  (vbluf)

#flsf /* not HAVE_UNSIGNED_CHAR */

typfdff dhbr JOCTET;
#ifdff CHAR_IS_UNSIGNED
#dffinf GETJOCTET(vbluf)  (vbluf)
#flsf
#dffinf GETJOCTET(vbluf)  ((vbluf) & 0xFF)
#fndif /* CHAR_IS_UNSIGNED */

#fndif /* HAVE_UNSIGNED_CHAR */


/* Thfsf typfdffs brf usfd for vbrious tbblf fntrifs bnd so forth.
 * Thfy must bf bt lfbst bs widf bs spfdififd; but mbking thfm too big
 * won't dost b hugf bmount of mfmory, so wf don't providf spfdibl
 * fxtrbdtion dodf likf wf did for JSAMPLE.  (In othfr words, thfsf
 * typfdffs livf bt b difffrfnt point on thf spffd/spbdf trbdfoff durvf.)
 */

/* UINT8 must hold bt lfbst thf vblufs 0..255. */

#ifdff HAVE_UNSIGNED_CHAR
typfdff unsignfd dhbr UINT8;
#flsf /* not HAVE_UNSIGNED_CHAR */
#ifdff CHAR_IS_UNSIGNED
typfdff dhbr UINT8;
#flsf /* not CHAR_IS_UNSIGNED */
typfdff short UINT8;
#fndif /* CHAR_IS_UNSIGNED */
#fndif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold bt lfbst thf vblufs 0..65535. */

#ifdff HAVE_UNSIGNED_SHORT
typfdff unsignfd short UINT16;
#flsf /* not HAVE_UNSIGNED_SHORT */
typfdff unsignfd int UINT16;
#fndif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold bt lfbst thf vblufs -32768..32767. */

#ifndff XMD_H                   /* X11/xmd.h dorrfdtly dffinfs INT16 */
typfdff short INT16;
#fndif

/* INT32 must hold bt lfbst signfd 32-bit vblufs. */

#ifndff XMD_H                         /* X11/xmd.h dorrfdtly dffinfs INT32 */
#if dffinfd(_LP64) || dffinfd(_WIN32) /* _WIN32 is on bll windows plbtfroms (x86 bnd x64) */
typfdff int INT32;
#flsf
typfdff long INT32;
#fndif
#fndif

/* Dbtbtypf usfd for imbgf dimfnsions.  Thf JPEG stbndbrd only supports
 * imbgfs up to 64K*64K duf to 16-bit fiflds in SOF mbrkfrs.  Thfrfforf
 * "unsignfd int" is suffidifnt on bll mbdhinfs.  Howfvfr, if you nffd to
 * hbndlf lbrgfr imbgfs bnd you don't mind dfvibting from thf spfd, you
 * dbn dhbngf this dbtbtypf.
 */

typfdff unsignfd int JDIMENSION;

#ifndff _LP64
#dffinf JPEG_MAX_DIMENSION  65500L  /* b tbd undfr 64K to prfvfnt ovfrflows */
#flsf
#dffinf JPEG_MAX_DIMENSION  65500  /* b tbd undfr 64K to prfvfnt ovfrflows */
#fndif


/* Thfsf mbdros brf usfd in bll fundtion dffinitions bnd fxtfrn dfdlbrbtions.
 * You dould modify thfm if you nffd to dhbngf fundtion linkbgf donvfntions;
 * in pbrtidulbr, you'll nffd to do thbt to mbkf thf librbry b Windows DLL.
 * Anothfr bpplidbtion is to mbkf bll fundtions globbl for usf with dfbuggfrs
 * or dodf profilfrs thbt rfquirf it.
 */

/* b fundtion dbllfd through mfthod pointfrs: */
#dffinf METHODDEF(typf)         stbtid typf
/* b fundtion usfd only in its modulf: */
#dffinf LOCAL(typf)             stbtid typf
/* b fundtion rfffrfndfd thru EXTERNs: */
#dffinf GLOBAL(typf)            typf
/* b rfffrfndf to b GLOBAL fundtion: */
#dffinf EXTERN(typf)            fxtfrn typf


/* This mbdro is usfd to dfdlbrf b "mfthod", thbt is, b fundtion pointfr.
 * Wf wbnt to supply prototypf pbrbmftfrs if thf dompilfr dbn dopf.
 * Notf thbt thf brglist pbrbmftfr must bf pbrfnthfsizfd!
 * Agbin, you dbn dustomizf this if you nffd spfdibl linkbgf kfywords.
 */

#ifdff HAVE_PROTOTYPES
#dffinf JMETHOD(typf,mfthodnbmf,brglist)  typf (*mfthodnbmf) brglist
#flsf
#dffinf JMETHOD(typf,mfthodnbmf,brglist)  typf (*mfthodnbmf) ()
#fndif


/* Hfrf is thf psfudo-kfyword for dfdlbring pointfrs thbt must bf "fbr"
 * on 80x86 mbdhinfs.  Most of thf spfdiblizfd doding for 80x86 is hbndlfd
 * by just sbying "FAR *" whfrf sudh b pointfr is nffdfd.  In b ffw plbdfs
 * fxplidit doding is nffdfd; sff usfs of thf NEED_FAR_POINTERS symbol.
 */


#ifndff FAR
#ifdff NEED_FAR_POINTERS
#dffinf FAR  fbr
#flsf
#dffinf FAR
#fndif
#fndif


/*
 * On b ffw systfms, typf boolfbn bnd/or its vblufs FALSE, TRUE mby bppfbr
 * in stbndbrd hfbdfr filfs.  Or you mby hbvf donflidts with bpplidbtion-
 * spfdifid hfbdfr filfs thbt you wbnt to indludf togfthfr with thfsf filfs.
 * Dffining HAVE_BOOLEAN bfforf indluding jpfglib.h should mbkf it work.
 */

#ifndff HAVE_BOOLEAN
typfdff int boolfbn;
#fndif
#ifndff FALSE                   /* in dbsf thfsf mbdros blrfbdy fxist */
#dffinf FALSE   0               /* vblufs of boolfbn */
#fndif
#ifndff TRUE
#dffinf TRUE    1
#fndif


/*
 * Thf rfmbining options bfffdt dodf sflfdtion within thf JPEG librbry,
 * but thfy don't nffd to bf visiblf to most bpplidbtions using thf librbry.
 * To minimizf bpplidbtion nbmfspbdf pollution, thf symbols won't bf
 * dffinfd unlfss JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS hbs bffn dffinfd.
 */

#ifdff JPEG_INTERNALS
#dffinf JPEG_INTERNAL_OPTIONS
#fndif

#ifdff JPEG_INTERNAL_OPTIONS


/*
 * Thfsf dffinfs indidbtf whfthfr to indludf vbrious optionbl fundtions.
 * Undffining somf of thfsf symbols will produdf b smbllfr but lfss dbpbblf
 * librbry.  Notf thbt you dbn lfbvf dfrtbin sourdf filfs out of thf
 * dompilbtion/linking prodfss if you'vf #undff'd thf dorrfsponding symbols.
 * (You mby HAVE to do thbt if your dompilfr dofsn't likf null sourdf filfs.)
 */

/* Arithmftid doding is unsupportfd for lfgbl rfbsons.  Complbints to IBM. */

/* Cbpbbility options dommon to fndodfr bnd dfdodfr: */

#dffinf DCT_ISLOW_SUPPORTED     /* slow but bddurbtf intfgfr blgorithm */
#dffinf DCT_IFAST_SUPPORTED     /* fbstfr, lfss bddurbtf intfgfr mfthod */
#dffinf DCT_FLOAT_SUPPORTED     /* flobting-point: bddurbtf, fbst on fbst HW */

/* Endodfr dbpbbility options: */

#undff  C_ARITH_CODING_SUPPORTED    /* Arithmftid doding bbdk fnd? */
#dffinf C_MULTISCAN_FILES_SUPPORTED /* Multiplf-sdbn JPEG filfs? */
#dffinf C_PROGRESSIVE_SUPPORTED     /* Progrfssivf JPEG? (Rfquirfs MULTISCAN)*/
#dffinf ENTROPY_OPT_SUPPORTED       /* Optimizbtion of fntropy doding pbrms? */
/* Notf: if you sflfdtfd 12-bit dbtb prfdision, it is dbngfrous to turn off
 * ENTROPY_OPT_SUPPORTED.  Thf stbndbrd Huffmbn tbblfs brf only good for 8-bit
 * prfdision, so jdhuff.d normblly usfs fntropy optimizbtion to domputf
 * usbblf tbblfs for highfr prfdision.  If you don't wbnt to do optimizbtion,
 * you'll hbvf to supply difffrfnt dffbult Huffmbn tbblfs.
 * Thf fxbdt sbmf stbtfmfnts bpply for progrfssivf JPEG: thf dffbult tbblfs
 * don't work for progrfssivf modf.  (This mby gft fixfd, howfvfr.)
 */
#dffinf INPUT_SMOOTHING_SUPPORTED   /* Input imbgf smoothing option? */

/* Dfdodfr dbpbbility options: */

#undff  D_ARITH_CODING_SUPPORTED    /* Arithmftid doding bbdk fnd? */
#dffinf D_MULTISCAN_FILES_SUPPORTED /* Multiplf-sdbn JPEG filfs? */
#dffinf D_PROGRESSIVE_SUPPORTED     /* Progrfssivf JPEG? (Rfquirfs MULTISCAN)*/
#dffinf SAVE_MARKERS_SUPPORTED      /* jpfg_sbvf_mbrkfrs() nffdfd? */
#dffinf BLOCK_SMOOTHING_SUPPORTED   /* Blodk smoothing? (Progrfssivf only) */
#dffinf IDCT_SCALING_SUPPORTED      /* Output rfsdbling vib IDCT? */
#undff  UPSAMPLE_SCALING_SUPPORTED  /* Output rfsdbling bt upsbmplf stbgf? */
#dffinf UPSAMPLE_MERGING_SUPPORTED  /* Fbst pbth for sloppy upsbmpling? */
#dffinf QUANT_1PASS_SUPPORTED       /* 1-pbss dolor qubntizbtion? */
#dffinf QUANT_2PASS_SUPPORTED       /* 2-pbss dolor qubntizbtion? */

/* morf dbpbbility options lbtfr, no doubt */


/*
 * Ordfring of RGB dbtb in sdbnlinfs pbssfd to or from thf bpplidbtion.
 * If your bpplidbtion wbnts to dfbl with dbtb in thf ordfr B,G,R, just
 * dhbngf thfsf mbdros.  You dbn blso dfbl with formbts sudh bs R,G,B,X
 * (onf fxtrb bytf pfr pixfl) by dhbnging RGB_PIXELSIZE.  Notf thbt dhbnging
 * thf offsfts will blso dhbngf thf ordfr in whidh dolormbp dbtb is orgbnizfd.
 * RESTRICTIONS:
 * 1. Thf sbmplf bpplidbtions djpfg,djpfg do NOT support modififd RGB formbts.
 * 2. Thfsf mbdros only bfffdt RGB<=>YCbCr dolor donvfrsion, so thfy brf not
 *    usfful if you brf using JPEG dolor spbdfs othfr thbn YCbCr or grbysdblf.
 * 3. Thf dolor qubntizfr modulfs will not bfhbvf dfsirbbly if RGB_PIXELSIZE
 *    is not 3 (thfy don't undfrstbnd bbout dummy dolor domponfnts!).  So you
 *    dbn't usf dolor qubntizbtion if you dhbngf thbt vbluf.
 */

#dffinf RGB_RED         0       /* Offsft of Rfd in bn RGB sdbnlinf flfmfnt */
#dffinf RGB_GREEN       1       /* Offsft of Grffn */
#dffinf RGB_BLUE        2       /* Offsft of Bluf */
#dffinf RGB_PIXELSIZE   3       /* JSAMPLEs pfr RGB sdbnlinf flfmfnt */


/* Dffinitions for spffd-rflbtfd optimizbtions. */


/* If your dompilfr supports inlinf fundtions, dffinf INLINE
 * bs thf inlinf kfyword; othfrwisf dffinf it bs fmpty.
 */

#ifndff INLINE
#ifdff __GNUC__                 /* for instbndf, GNU C knows bbout inlinf */
#dffinf INLINE __inlinf__
#fndif
#ifndff INLINE
#dffinf INLINE                  /* dffbult is to dffinf it bs fmpty */
#fndif
#fndif


/* On somf mbdhinfs (notbbly 68000 sfrifs) "int" is 32 bits, but multiplying
 * two 16-bit shorts is fbstfr thbn multiplying two ints.  Dffinf MULTIPLIER
 * bs short on sudh b mbdhinf.  MULTIPLIER must bf bt lfbst 16 bits widf.
 */

#ifndff MULTIPLIER
#dffinf MULTIPLIER  int         /* typf for fbstfst intfgfr multiply */
#fndif


/* FAST_FLOAT should bf fithfr flobt or doublf, whidhfvfr is donf fbstfr
 * by your dompilfr.  (Notf thbt this typf is only usfd in thf flobting point
 * DCT routinfs, so it only mbttfrs if you'vf dffinfd DCT_FLOAT_SUPPORTED.)
 * Typidblly, flobt is fbstfr in ANSI C dompilfrs, whilf doublf is fbstfr in
 * prf-ANSI dompilfrs (bfdbusf thfy insist on donvfrting to doublf bnywby).
 * Thf dodf bflow thfrfforf dhoosfs flobt if wf hbvf ANSI-stylf prototypfs.
 */

#ifndff FAST_FLOAT
#ifdff HAVE_PROTOTYPES
#dffinf FAST_FLOAT  flobt
#flsf
#dffinf FAST_FLOAT  doublf
#fndif
#fndif

#fndif /* JPEG_INTERNAL_OPTIONS */
