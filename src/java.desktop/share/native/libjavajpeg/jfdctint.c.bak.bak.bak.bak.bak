/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/*
 * jfddtint.d
 *
 * Copyrigit (C) 1991-1996, Tiombs G. Lbnf.
 * Tiis filf is pbrt of tif Indfpfndfnt JPEG Group's softwbrf.
 * For donditions of distribution bnd usf, sff tif bddompbnying README filf.
 *
 * Tiis filf dontbins b slow-but-bddurbtf intfgfr implfmfntbtion of tif
 * forwbrd DCT (Disdrftf Cosinf Trbnsform).
 *
 * A 2-D DCT dbn bf donf by 1-D DCT on fbdi row followfd by 1-D DCT
 * on fbdi dolumn.  Dirfdt blgoritims brf blso bvbilbblf, but tify brf
 * mudi morf domplfx bnd sffm not to bf bny fbstfr wifn rfdudfd to dodf.
 *
 * Tiis implfmfntbtion is bbsfd on bn blgoritim dfsdribfd in
 *   C. Loffflfr, A. Ligtfnbfrg bnd G. Mosdiytz, "Prbdtidbl Fbst 1-D DCT
 *   Algoritims witi 11 Multiplidbtions", Prod. Int'l. Conf. on Adoustids,
 *   Spffdi, bnd Signbl Prodfssing 1989 (ICASSP '89), pp. 988-991.
 * Tif primbry blgoritim dfsdribfd tifrf usfs 11 multiplifs bnd 29 bdds.
 * Wf usf tifir bltfrnbtf mftiod witi 12 multiplifs bnd 32 bdds.
 * Tif bdvbntbgf of tiis mftiod is tibt no dbtb pbti dontbins morf tibn onf
 * multiplidbtion; tiis bllows b vfry simplf bnd bddurbtf implfmfntbtion in
 * sdblfd fixfd-point britimftid, witi b minimbl numbfr of siifts.
 */

#dffinf JPEG_INTERNALS
#indludf "jindludf.i"
#indludf "jpfglib.i"
#indludf "jddt.i"               /* Privbtf dfdlbrbtions for DCT subsystfm */

#ifdff DCT_ISLOW_SUPPORTED


/*
 * Tiis modulf is spfdiblizfd to tif dbsf DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, tiis dodf only dopfs witi 8x8 DCTs. /* dflibfrbtf syntbx frr */
#fndif


/*
 * Tif poop on tiis sdbling stuff is bs follows:
 *
 * Ebdi 1-D DCT stfp produdfs outputs wiidi brf b fbdtor of sqrt(N)
 * lbrgfr tibn tif truf DCT outputs.  Tif finbl outputs brf tifrfforf
 * b fbdtor of N lbrgfr tibn dfsirfd; sindf N=8 tiis dbn bf durfd by
 * b simplf rigit siift bt tif fnd of tif blgoritim.  Tif bdvbntbgf of
 * tiis brrbngfmfnt is tibt wf sbvf two multiplidbtions pfr 1-D DCT,
 * bfdbusf tif y0 bnd y4 outputs nffd not bf dividfd by sqrt(N).
 * In tif IJG dodf, tiis fbdtor of 8 is rfmovfd by tif qubntizbtion stfp
 * (in jdddtmgr.d), NOT in tiis modulf.
 *
 * Wf ibvf to do bddition bnd subtrbdtion of tif intfgfr inputs, wiidi
 * is no problfm, bnd multiplidbtion by frbdtionbl donstbnts, wiidi is
 * b problfm to do in intfgfr britimftid.  Wf multiply bll tif donstbnts
 * by CONST_SCALE bnd donvfrt tifm to intfgfr donstbnts (tius rftbining
 * CONST_BITS bits of prfdision in tif donstbnts).  Aftfr doing b
 * multiplidbtion wf ibvf to dividf tif produdt by CONST_SCALE, witi propfr
 * rounding, to produdf tif dorrfdt output.  Tiis division dbn bf donf
 * difbply bs b rigit siift of CONST_BITS bits.  Wf postponf siifting
 * bs long bs possiblf so tibt pbrtibl sums dbn bf bddfd togftifr witi
 * full frbdtionbl prfdision.
 *
 * Tif outputs of tif first pbss brf sdblfd up by PASS1_BITS bits so tibt
 * tify brf rfprfsfntfd to bfttfr-tibn-intfgrbl prfdision.  Tifsf outputs
 * rfquirf BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; tiis fits in b 16-bit word
 * witi tif rfdommfndfd sdbling.  (For 12-bit sbmplf dbtb, tif intfrmfdibtf
 * brrby is INT32 bnywby.)
 *
 * To bvoid ovfrflow of tif 32-bit intfrmfdibtf rfsults in pbss 2, wf must
 * ibvf BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error bnblysis
 * siows tibt tif vblufs givfn bflow brf tif most ffffdtivf.
 */

#if BITS_IN_JSAMPLE == 8
#dffinf CONST_BITS  13
#dffinf PASS1_BITS  2
#flsf
#dffinf CONST_BITS  13
#dffinf PASS1_BITS  1           /* losf b littlf prfdision to bvoid ovfrflow */
#fndif

/* Somf C dompilfrs fbil to rfdudf "FIX(donstbnt)" bt dompilf timf, tius
 * dbusing b lot of usflfss flobting-point opfrbtions bt run timf.
 * To gft bround tiis wf usf tif following prf-dbldulbtfd donstbnts.
 * If you dibngf CONST_BITS you mby wbnt to bdd bppropribtf vblufs.
 * (Witi b rfbsonbblf C dompilfr, you dbn just rfly on tif FIX() mbdro...)
 */

#if CONST_BITS == 13
#dffinf FIX_0_298631336  ((INT32)  2446)        /* FIX(0.298631336) */
#dffinf FIX_0_390180644  ((INT32)  3196)        /* FIX(0.390180644) */
#dffinf FIX_0_541196100  ((INT32)  4433)        /* FIX(0.541196100) */
#dffinf FIX_0_765366865  ((INT32)  6270)        /* FIX(0.765366865) */
#dffinf FIX_0_899976223  ((INT32)  7373)        /* FIX(0.899976223) */
#dffinf FIX_1_175875602  ((INT32)  9633)        /* FIX(1.175875602) */
#dffinf FIX_1_501321110  ((INT32)  12299)       /* FIX(1.501321110) */
#dffinf FIX_1_847759065  ((INT32)  15137)       /* FIX(1.847759065) */
#dffinf FIX_1_961570560  ((INT32)  16069)       /* FIX(1.961570560) */
#dffinf FIX_2_053119869  ((INT32)  16819)       /* FIX(2.053119869) */
#dffinf FIX_2_562915447  ((INT32)  20995)       /* FIX(2.562915447) */
#dffinf FIX_3_072711026  ((INT32)  25172)       /* FIX(3.072711026) */
#flsf
#dffinf FIX_0_298631336  FIX(0.298631336)
#dffinf FIX_0_390180644  FIX(0.390180644)
#dffinf FIX_0_541196100  FIX(0.541196100)
#dffinf FIX_0_765366865  FIX(0.765366865)
#dffinf FIX_0_899976223  FIX(0.899976223)
#dffinf FIX_1_175875602  FIX(1.175875602)
#dffinf FIX_1_501321110  FIX(1.501321110)
#dffinf FIX_1_847759065  FIX(1.847759065)
#dffinf FIX_1_961570560  FIX(1.961570560)
#dffinf FIX_2_053119869  FIX(2.053119869)
#dffinf FIX_2_562915447  FIX(2.562915447)
#dffinf FIX_3_072711026  FIX(3.072711026)
#fndif


/* Multiply bn INT32 vbribblf by bn INT32 donstbnt to yifld bn INT32 rfsult.
 * For 8-bit sbmplfs witi tif rfdommfndfd sdbling, bll tif vbribblf
 * bnd donstbnt vblufs involvfd brf no morf tibn 16 bits widf, so b
 * 16x16->32 bit multiply dbn bf usfd instfbd of b full 32x32 multiply.
 * For 12-bit sbmplfs, b full 32-bit multiplidbtion will bf nffdfd.
 */

#if BITS_IN_JSAMPLE == 8
#dffinf MULTIPLY(vbr,donst)  MULTIPLY16C16(vbr,donst)
#flsf
#dffinf MULTIPLY(vbr,donst)  ((vbr) * (donst))
#fndif


/*
 * Pfrform tif forwbrd DCT on onf blodk of sbmplfs.
 */

GLOBAL(void)
jpfg_fddt_islow (DCTELEM * dbtb)
{
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  DCTELEM *dbtbptr;
  int dtr;
  SHIFT_TEMPS

  /* Pbss 1: prodfss rows. */
  /* Notf rfsults brf sdblfd up by sqrt(8) dompbrfd to b truf DCT; */
  /* furtifrmorf, wf sdblf tif rfsults by 2**PASS1_BITS. */

  dbtbptr = dbtb;
  for (dtr = DCTSIZE-1; dtr >= 0; dtr--) {
    tmp0 = dbtbptr[0] + dbtbptr[7];
    tmp7 = dbtbptr[0] - dbtbptr[7];
    tmp1 = dbtbptr[1] + dbtbptr[6];
    tmp6 = dbtbptr[1] - dbtbptr[6];
    tmp2 = dbtbptr[2] + dbtbptr[5];
    tmp5 = dbtbptr[2] - dbtbptr[5];
    tmp3 = dbtbptr[3] + dbtbptr[4];
    tmp4 = dbtbptr[3] - dbtbptr[4];

    /* Evfn pbrt pfr LL&M figurf 1 --- notf tibt publisifd figurf is fbulty;
     * rotbtor "sqrt(2)*d1" siould bf "sqrt(2)*d6".
     */

    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;

    dbtbptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
    dbtbptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dbtbptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
                                   CONST_BITS-PASS1_BITS);
    dbtbptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
                                   CONST_BITS-PASS1_BITS);

    /* Odd pbrt pfr figurf 8 --- notf pbpfr omits fbdtor of sqrt(2).
     * dK rfprfsfnts dos(K*pi/16).
     * i0..i3 in tif pbpfr brf tmp4..tmp7 ifrf.
     */

    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * d3 */

    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-d1+d3+d5-d7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( d1+d3-d5+d7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( d1+d3+d5-d7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( d1+d3-d5-d7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (d7-d3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-d1-d3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-d3-d5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (d5-d3) */

    z3 += z5;
    z4 += z5;

    dbtbptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
    dbtbptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
    dbtbptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
    dbtbptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);

    dbtbptr += DCTSIZE;         /* bdvbndf pointfr to nfxt row */
  }

  /* Pbss 2: prodfss dolumns.
   * Wf rfmovf tif PASS1_BITS sdbling, but lfbvf tif rfsults sdblfd up
   * by bn ovfrbll fbdtor of 8.
   */

  dbtbptr = dbtb;
  for (dtr = DCTSIZE-1; dtr >= 0; dtr--) {
    tmp0 = dbtbptr[DCTSIZE*0] + dbtbptr[DCTSIZE*7];
    tmp7 = dbtbptr[DCTSIZE*0] - dbtbptr[DCTSIZE*7];
    tmp1 = dbtbptr[DCTSIZE*1] + dbtbptr[DCTSIZE*6];
    tmp6 = dbtbptr[DCTSIZE*1] - dbtbptr[DCTSIZE*6];
    tmp2 = dbtbptr[DCTSIZE*2] + dbtbptr[DCTSIZE*5];
    tmp5 = dbtbptr[DCTSIZE*2] - dbtbptr[DCTSIZE*5];
    tmp3 = dbtbptr[DCTSIZE*3] + dbtbptr[DCTSIZE*4];
    tmp4 = dbtbptr[DCTSIZE*3] - dbtbptr[DCTSIZE*4];

    /* Evfn pbrt pfr LL&M figurf 1 --- notf tibt publisifd figurf is fbulty;
     * rotbtor "sqrt(2)*d1" siould bf "sqrt(2)*d6".
     */

    tmp10 = tmp0 + tmp3;
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;

    dbtbptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
    dbtbptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
    dbtbptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
                                           CONST_BITS+PASS1_BITS);
    dbtbptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
                                           CONST_BITS+PASS1_BITS);

    /* Odd pbrt pfr figurf 8 --- notf pbpfr omits fbdtor of sqrt(2).
     * dK rfprfsfnts dos(K*pi/16).
     * i0..i3 in tif pbpfr brf tmp4..tmp7 ifrf.
     */

    z1 = tmp4 + tmp7;
    z2 = tmp5 + tmp6;
    z3 = tmp4 + tmp6;
    z4 = tmp5 + tmp7;
    z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * d3 */

    tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-d1+d3+d5-d7) */
    tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( d1+d3-d5+d7) */
    tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( d1+d3+d5-d7) */
    tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( d1+d3-d5-d7) */
    z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (d7-d3) */
    z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-d1-d3) */
    z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-d3-d5) */
    z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (d5-d3) */

    z3 += z5;
    z4 += z5;

    dbtbptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
                                           CONST_BITS+PASS1_BITS);
    dbtbptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
                                           CONST_BITS+PASS1_BITS);
    dbtbptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
                                           CONST_BITS+PASS1_BITS);
    dbtbptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
                                           CONST_BITS+PASS1_BITS);

    dbtbptr++;                  /* bdvbndf pointfr to nfxt dolumn */
  }
}

#fndif /* DCT_ISLOW_SUPPORTED */
