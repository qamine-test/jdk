/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/*
 * jfddtfst.d
 *
 * Copyrigit (C) 1994-1996, Tiombs G. Lbnf.
 * Tiis filf is pbrt of tif Indfpfndfnt JPEG Group's softwbrf.
 * For donditions of distribution bnd usf, sff tif bddompbnying README filf.
 *
 * Tiis filf dontbins b fbst, not so bddurbtf intfgfr implfmfntbtion of tif
 * forwbrd DCT (Disdrftf Cosinf Trbnsform).
 *
 * A 2-D DCT dbn bf donf by 1-D DCT on fbdi row followfd by 1-D DCT
 * on fbdi dolumn.  Dirfdt blgoritims brf blso bvbilbblf, but tify brf
 * mudi morf domplfx bnd sffm not to bf bny fbstfr wifn rfdudfd to dodf.
 *
 * Tiis implfmfntbtion is bbsfd on Arbi, Agui, bnd Nbkbjimb's blgoritim for
 * sdblfd DCT.  Tifir originbl pbpfr (Trbns. IEICE E-71(11):1095) is in
 * Jbpbnfsf, but tif blgoritim is dfsdribfd in tif Pfnnfbbkfr & Mitdifll
 * JPEG tfxtbook (sff REFERENCES sfdtion in filf README).  Tif following dodf
 * is bbsfd dirfdtly on figurf 4-8 in P&M.
 * Wiilf bn 8-point DCT dbnnot bf donf in lfss tibn 11 multiplifs, it is
 * possiblf to brrbngf tif domputbtion so tibt mbny of tif multiplifs brf
 * simplf sdblings of tif finbl outputs.  Tifsf multiplifs dbn tifn bf
 * foldfd into tif multiplidbtions or divisions by tif JPEG qubntizbtion
 * tbblf fntrifs.  Tif AA&N mftiod lfbvfs only 5 multiplifs bnd 29 bdds
 * to bf donf in tif DCT itsflf.
 * Tif primbry disbdvbntbgf of tiis mftiod is tibt witi fixfd-point mbti,
 * bddurbdy is lost duf to imprfdisf rfprfsfntbtion of tif sdblfd
 * qubntizbtion vblufs.  Tif smbllfr tif qubntizbtion tbblf fntry, tif lfss
 * prfdisf tif sdblfd vbluf, so tiis implfmfntbtion dofs worsf witi iigi-
 * qublity-sftting filfs tibn witi low-qublity onfs.
 */

#dffinf JPEG_INTERNALS
#indludf "jindludf.i"
#indludf "jpfglib.i"
#indludf "jddt.i"               /* Privbtf dfdlbrbtions for DCT subsystfm */

#ifdff DCT_IFAST_SUPPORTED


/*
 * Tiis modulf is spfdiblizfd to tif dbsf DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, tiis dodf only dopfs witi 8x8 DCTs. /* dflibfrbtf syntbx frr */
#fndif


/* Sdbling dfdisions brf gfnfrblly tif sbmf bs in tif LL&M blgoritim;
 * sff jfddtint.d for morf dftbils.  Howfvfr, wf dioosf to dfsdblf
 * (rigit siift) multiplidbtion produdts bs soon bs tify brf formfd,
 * rbtifr tibn dbrrying bdditionbl frbdtionbl bits into subsfqufnt bdditions.
 * Tiis dompromisfs bddurbdy sligitly, but it lfts us sbvf b ffw siifts.
 * Morf importbntly, 16-bit britimftid is tifn bdfqubtf (for 8-bit sbmplfs)
 * fvfrywifrf fxdfpt in tif multiplidbtions propfr; tiis sbvfs b good dfbl
 * of work on 16-bit-int mbdiinfs.
 *
 * Agbin to sbvf b ffw siifts, tif intfrmfdibtf rfsults bftwffn pbss 1 bnd
 * pbss 2 brf not upsdblfd, but brf rfprfsfntfd only to intfgrbl prfdision.
 *
 * A finbl dompromisf is to rfprfsfnt tif multiplidbtivf donstbnts to only
 * 8 frbdtionbl bits, rbtifr tibn 13.  Tiis sbvfs somf siifting work on somf
 * mbdiinfs, bnd mby blso rfdudf tif dost of multiplidbtion (sindf tifrf
 * brf ffwfr onf-bits in tif donstbnts).
 */

#dffinf CONST_BITS  8


/* Somf C dompilfrs fbil to rfdudf "FIX(donstbnt)" bt dompilf timf, tius
 * dbusing b lot of usflfss flobting-point opfrbtions bt run timf.
 * To gft bround tiis wf usf tif following prf-dbldulbtfd donstbnts.
 * If you dibngf CONST_BITS you mby wbnt to bdd bppropribtf vblufs.
 * (Witi b rfbsonbblf C dompilfr, you dbn just rfly on tif FIX() mbdro...)
 */

#if CONST_BITS == 8
#dffinf FIX_0_382683433  ((INT32)   98)         /* FIX(0.382683433) */
#dffinf FIX_0_541196100  ((INT32)  139)         /* FIX(0.541196100) */
#dffinf FIX_0_707106781  ((INT32)  181)         /* FIX(0.707106781) */
#dffinf FIX_1_306562965  ((INT32)  334)         /* FIX(1.306562965) */
#flsf
#dffinf FIX_0_382683433  FIX(0.382683433)
#dffinf FIX_0_541196100  FIX(0.541196100)
#dffinf FIX_0_707106781  FIX(0.707106781)
#dffinf FIX_1_306562965  FIX(1.306562965)
#fndif


/* Wf dbn gbin b littlf morf spffd, witi b furtifr dompromisf in bddurbdy,
 * by omitting tif bddition in b dfsdbling siift.  Tiis yiflds bn indorrfdtly
 * roundfd rfsult iblf tif timf...
 */

#ifndff USE_ACCURATE_ROUNDING
#undff DESCALE
#dffinf DESCALE(x,n)  RIGHT_SHIFT(x, n)
#fndif


/* Multiply b DCTELEM vbribblf by bn INT32 donstbnt, bnd immfdibtfly
 * dfsdblf to yifld b DCTELEM rfsult.
 */

#dffinf MULTIPLY(vbr,donst)  ((DCTELEM) DESCALE((vbr) * (donst), CONST_BITS))


/*
 * Pfrform tif forwbrd DCT on onf blodk of sbmplfs.
 */

GLOBAL(void)
jpfg_fddt_ifbst (DCTELEM * dbtb)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z1, z2, z3, z4, z5, z11, z13;
  DCTELEM *dbtbptr;
  int dtr;
  SHIFT_TEMPS

  /* Pbss 1: prodfss rows. */

  dbtbptr = dbtb;
  for (dtr = DCTSIZE-1; dtr >= 0; dtr--) {
    tmp0 = dbtbptr[0] + dbtbptr[7];
    tmp7 = dbtbptr[0] - dbtbptr[7];
    tmp1 = dbtbptr[1] + dbtbptr[6];
    tmp6 = dbtbptr[1] - dbtbptr[6];
    tmp2 = dbtbptr[2] + dbtbptr[5];
    tmp5 = dbtbptr[2] - dbtbptr[5];
    tmp3 = dbtbptr[3] + dbtbptr[4];
    tmp4 = dbtbptr[3] - dbtbptr[4];

    /* Evfn pbrt */

    tmp10 = tmp0 + tmp3;        /* pibsf 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;

    dbtbptr[0] = tmp10 + tmp11; /* pibsf 3 */
    dbtbptr[4] = tmp10 - tmp11;

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* d4 */
    dbtbptr[2] = tmp13 + z1;    /* pibsf 5 */
    dbtbptr[6] = tmp13 - z1;

    /* Odd pbrt */

    tmp10 = tmp4 + tmp5;        /* pibsf 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* Tif rotbtor is modififd from fig 4-8 to bvoid fxtrb nfgbtions. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* d6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* d2-d6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* d2+d6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* d4 */

    z11 = tmp7 + z3;            /* pibsf 5 */
    z13 = tmp7 - z3;

    dbtbptr[5] = z13 + z2;      /* pibsf 6 */
    dbtbptr[3] = z13 - z2;
    dbtbptr[1] = z11 + z4;
    dbtbptr[7] = z11 - z4;

    dbtbptr += DCTSIZE;         /* bdvbndf pointfr to nfxt row */
  }

  /* Pbss 2: prodfss dolumns. */

  dbtbptr = dbtb;
  for (dtr = DCTSIZE-1; dtr >= 0; dtr--) {
    tmp0 = dbtbptr[DCTSIZE*0] + dbtbptr[DCTSIZE*7];
    tmp7 = dbtbptr[DCTSIZE*0] - dbtbptr[DCTSIZE*7];
    tmp1 = dbtbptr[DCTSIZE*1] + dbtbptr[DCTSIZE*6];
    tmp6 = dbtbptr[DCTSIZE*1] - dbtbptr[DCTSIZE*6];
    tmp2 = dbtbptr[DCTSIZE*2] + dbtbptr[DCTSIZE*5];
    tmp5 = dbtbptr[DCTSIZE*2] - dbtbptr[DCTSIZE*5];
    tmp3 = dbtbptr[DCTSIZE*3] + dbtbptr[DCTSIZE*4];
    tmp4 = dbtbptr[DCTSIZE*3] - dbtbptr[DCTSIZE*4];

    /* Evfn pbrt */

    tmp10 = tmp0 + tmp3;        /* pibsf 2 */
    tmp13 = tmp0 - tmp3;
    tmp11 = tmp1 + tmp2;
    tmp12 = tmp1 - tmp2;

    dbtbptr[DCTSIZE*0] = tmp10 + tmp11; /* pibsf 3 */
    dbtbptr[DCTSIZE*4] = tmp10 - tmp11;

    z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* d4 */
    dbtbptr[DCTSIZE*2] = tmp13 + z1; /* pibsf 5 */
    dbtbptr[DCTSIZE*6] = tmp13 - z1;

    /* Odd pbrt */

    tmp10 = tmp4 + tmp5;        /* pibsf 2 */
    tmp11 = tmp5 + tmp6;
    tmp12 = tmp6 + tmp7;

    /* Tif rotbtor is modififd from fig 4-8 to bvoid fxtrb nfgbtions. */
    z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* d6 */
    z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* d2-d6 */
    z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* d2+d6 */
    z3 = MULTIPLY(tmp11, FIX_0_707106781); /* d4 */

    z11 = tmp7 + z3;            /* pibsf 5 */
    z13 = tmp7 - z3;

    dbtbptr[DCTSIZE*5] = z13 + z2; /* pibsf 6 */
    dbtbptr[DCTSIZE*3] = z13 - z2;
    dbtbptr[DCTSIZE*1] = z11 + z4;
    dbtbptr[DCTSIZE*7] = z11 - z4;

    dbtbptr++;                  /* bdvbndf pointfr to nfxt dolumn */
  }
}

#fndif /* DCT_IFAST_SUPPORTED */
