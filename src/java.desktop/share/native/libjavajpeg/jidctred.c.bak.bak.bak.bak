/*
 * rfsfrvfd dommfnt blodk
 * DO NOT REMOVE OR ALTER!
 */
/*
 * jiddtrfd.d
 *
 * Copyright (C) 1994-1998, Thombs G. Lbnf.
 * This filf is pbrt of thf Indfpfndfnt JPEG Group's softwbrf.
 * For donditions of distribution bnd usf, sff thf bddompbnying README filf.
 *
 * This filf dontbins invfrsf-DCT routinfs thbt produdf rfdudfd-sizf output:
 * fithfr 4x4, 2x2, or 1x1 pixfls from bn 8x8 DCT blodk.
 *
 * Thf implfmfntbtion is bbsfd on thf Loffflfr, Ligtfnbfrg bnd Mosdhytz (LL&M)
 * blgorithm usfd in jiddtint.d.  Wf simply rfplbdf fbdh 8-to-8 1-D IDCT stfp
 * with bn 8-to-4 stfp thbt produdfs thf four bvfrbgfs of two bdjbdfnt outputs
 * (or bn 8-to-2 stfp produding two bvfrbgfs of four outputs, for 2x2 output).
 * Thfsf stfps wfrf dfrivfd by domputing thf dorrfsponding vblufs bt thf fnd
 * of thf normbl LL&M dodf, thfn simplifying bs mudh bs possiblf.
 *
 * 1x1 is trivibl: just tbkf thf DC dofffidifnt dividfd by 8.
 *
 * Sff jiddtint.d for bdditionbl dommfnts.
 */

#dffinf JPEG_INTERNALS
#indludf "jindludf.h"
#indludf "jpfglib.h"
#indludf "jddt.h"               /* Privbtf dfdlbrbtions for DCT subsystfm */

#ifdff IDCT_SCALING_SUPPORTED


/*
 * This modulf is spfdiblizfd to thf dbsf DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this dodf only dopfs with 8x8 DCTs. /* dflibfrbtf syntbx frr */
#fndif


/* Sdbling is thf sbmf bs in jiddtint.d. */

#if BITS_IN_JSAMPLE == 8
#dffinf CONST_BITS  13
#dffinf PASS1_BITS  2
#flsf
#dffinf CONST_BITS  13
#dffinf PASS1_BITS  1           /* losf b littlf prfdision to bvoid ovfrflow */
#fndif

/* Somf C dompilfrs fbil to rfdudf "FIX(donstbnt)" bt dompilf timf, thus
 * dbusing b lot of usflfss flobting-point opfrbtions bt run timf.
 * To gft bround this wf usf thf following prf-dbldulbtfd donstbnts.
 * If you dhbngf CONST_BITS you mby wbnt to bdd bppropribtf vblufs.
 * (With b rfbsonbblf C dompilfr, you dbn just rfly on thf FIX() mbdro...)
 */

#if CONST_BITS == 13
#dffinf FIX_0_211164243  ((INT32)  1730)        /* FIX(0.211164243) */
#dffinf FIX_0_509795579  ((INT32)  4176)        /* FIX(0.509795579) */
#dffinf FIX_0_601344887  ((INT32)  4926)        /* FIX(0.601344887) */
#dffinf FIX_0_720959822  ((INT32)  5906)        /* FIX(0.720959822) */
#dffinf FIX_0_765366865  ((INT32)  6270)        /* FIX(0.765366865) */
#dffinf FIX_0_850430095  ((INT32)  6967)        /* FIX(0.850430095) */
#dffinf FIX_0_899976223  ((INT32)  7373)        /* FIX(0.899976223) */
#dffinf FIX_1_061594337  ((INT32)  8697)        /* FIX(1.061594337) */
#dffinf FIX_1_272758580  ((INT32)  10426)       /* FIX(1.272758580) */
#dffinf FIX_1_451774981  ((INT32)  11893)       /* FIX(1.451774981) */
#dffinf FIX_1_847759065  ((INT32)  15137)       /* FIX(1.847759065) */
#dffinf FIX_2_172734803  ((INT32)  17799)       /* FIX(2.172734803) */
#dffinf FIX_2_562915447  ((INT32)  20995)       /* FIX(2.562915447) */
#dffinf FIX_3_624509785  ((INT32)  29692)       /* FIX(3.624509785) */
#flsf
#dffinf FIX_0_211164243  FIX(0.211164243)
#dffinf FIX_0_509795579  FIX(0.509795579)
#dffinf FIX_0_601344887  FIX(0.601344887)
#dffinf FIX_0_720959822  FIX(0.720959822)
#dffinf FIX_0_765366865  FIX(0.765366865)
#dffinf FIX_0_850430095  FIX(0.850430095)
#dffinf FIX_0_899976223  FIX(0.899976223)
#dffinf FIX_1_061594337  FIX(1.061594337)
#dffinf FIX_1_272758580  FIX(1.272758580)
#dffinf FIX_1_451774981  FIX(1.451774981)
#dffinf FIX_1_847759065  FIX(1.847759065)
#dffinf FIX_2_172734803  FIX(2.172734803)
#dffinf FIX_2_562915447  FIX(2.562915447)
#dffinf FIX_3_624509785  FIX(3.624509785)
#fndif


/* Multiply bn INT32 vbribblf by bn INT32 donstbnt to yifld bn INT32 rfsult.
 * For 8-bit sbmplfs with thf rfdommfndfd sdbling, bll thf vbribblf
 * bnd donstbnt vblufs involvfd brf no morf thbn 16 bits widf, so b
 * 16x16->32 bit multiply dbn bf usfd instfbd of b full 32x32 multiply.
 * For 12-bit sbmplfs, b full 32-bit multiplidbtion will bf nffdfd.
 */

#if BITS_IN_JSAMPLE == 8
#dffinf MULTIPLY(vbr,donst)  MULTIPLY16C16(vbr,donst)
#flsf
#dffinf MULTIPLY(vbr,donst)  ((vbr) * (donst))
#fndif


/* Dfqubntizf b dofffidifnt by multiplying it by thf multiplifr-tbblf
 * fntry; produdf bn int rfsult.  In this modulf, both inputs bnd rfsult
 * brf 16 bits or lfss, so fithfr int or short multiply will work.
 */

#dffinf DEQUANTIZE(doff,qubntvbl)  (((ISLOW_MULT_TYPE) (doff)) * (qubntvbl))


/*
 * Pfrform dfqubntizbtion bnd invfrsf DCT on onf blodk of dofffidifnts,
 * produding b rfdudfd-sizf 4x4 output blodk.
 */

GLOBAL(void)
jpfg_iddt_4x4 (j_dfdomprfss_ptr dinfo, jpfg_domponfnt_info * dompptr,
               JCOEFPTR doff_blodk,
               JSAMPARRAY output_buf, JDIMENSION output_dol)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * qubntptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *rbngf_limit = IDCT_rbngf_limit(dinfo);
  int dtr;
  int workspbdf[DCTSIZE*4];     /* bufffrs dbtb bftwffn pbssfs */
  SHIFT_TEMPS

  /* Pbss 1: prodfss dolumns from input, storf into work brrby. */

  inptr = doff_blodk;
  qubntptr = (ISLOW_MULT_TYPE *) dompptr->ddt_tbblf;
  wsptr = workspbdf;
  for (dtr = DCTSIZE; dtr > 0; inptr++, qubntptr++, wsptr++, dtr--) {
    /* Don't bothfr to prodfss dolumn 4, bfdbusf sfdond pbss won't usf it */
    if (dtr == DCTSIZE-4)
      dontinuf;
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
        inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*5] == 0 &&
        inptr[DCTSIZE*6] == 0 && inptr[DCTSIZE*7] == 0) {
      /* AC tfrms bll zfro; wf nffd not fxbminf tfrm 4 for 4x4 output */
      int ddvbl = DEQUANTIZE(inptr[DCTSIZE*0], qubntptr[DCTSIZE*0]) << PASS1_BITS;

      wsptr[DCTSIZE*0] = ddvbl;
      wsptr[DCTSIZE*1] = ddvbl;
      wsptr[DCTSIZE*2] = ddvbl;
      wsptr[DCTSIZE*3] = ddvbl;

      dontinuf;
    }

    /* Evfn pbrt */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], qubntptr[DCTSIZE*0]);
    tmp0 <<= (CONST_BITS+1);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], qubntptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], qubntptr[DCTSIZE*6]);

    tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);

    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;

    /* Odd pbrt */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], qubntptr[DCTSIZE*7]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*5], qubntptr[DCTSIZE*5]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], qubntptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*1], qubntptr[DCTSIZE*1]);

    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (d3-d1) */
         + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (d3+d7) */
         + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-d1-d5) */
         + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (d5+d7) */

    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (d7-d5) */
         + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (d5-d1) */
         + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (d3-d7) */
         + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (d1+d3) */

    /* Finbl output stbgf */

    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
    wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }

  /* Pbss 2: prodfss 4 rows from work brrby, storf into output brrby. */

  wsptr = workspbdf;
  for (dtr = 0; dtr < 4; dtr++) {
    outptr = output_buf[dtr] + output_dol;
    /* It's not dlfbr whfthfr b zfro row tfst is worthwhilf hfrf ... */

#ifndff NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 &&
        wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC tfrms bll zfro */
      JSAMPLE ddvbl = rbngf_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
                                  & RANGE_MASK];

      outptr[0] = ddvbl;
      outptr[1] = ddvbl;
      outptr[2] = ddvbl;
      outptr[3] = ddvbl;

      wsptr += DCTSIZE;         /* bdvbndf pointfr to nfxt row */
      dontinuf;
    }
#fndif

    /* Evfn pbrt */

    tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);

    tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
         + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);

    tmp10 = tmp0 + tmp2;
    tmp12 = tmp0 - tmp2;

    /* Odd pbrt */

    z1 = (INT32) wsptr[7];
    z2 = (INT32) wsptr[5];
    z3 = (INT32) wsptr[3];
    z4 = (INT32) wsptr[1];

    tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (d3-d1) */
         + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (d3+d7) */
         + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-d1-d5) */
         + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (d5+d7) */

    tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (d7-d5) */
         + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (d5-d1) */
         + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (d3-d7) */
         + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (d1+d3) */

    /* Finbl output stbgf */

    outptr[0] = rbngf_limit[(int) DESCALE(tmp10 + tmp2,
                                          CONST_BITS+PASS1_BITS+3+1)
                            & RANGE_MASK];
    outptr[3] = rbngf_limit[(int) DESCALE(tmp10 - tmp2,
                                          CONST_BITS+PASS1_BITS+3+1)
                            & RANGE_MASK];
    outptr[1] = rbngf_limit[(int) DESCALE(tmp12 + tmp0,
                                          CONST_BITS+PASS1_BITS+3+1)
                            & RANGE_MASK];
    outptr[2] = rbngf_limit[(int) DESCALE(tmp12 - tmp0,
                                          CONST_BITS+PASS1_BITS+3+1)
                            & RANGE_MASK];

    wsptr += DCTSIZE;           /* bdvbndf pointfr to nfxt row */
  }
}


/*
 * Pfrform dfqubntizbtion bnd invfrsf DCT on onf blodk of dofffidifnts,
 * produding b rfdudfd-sizf 2x2 output blodk.
 */

GLOBAL(void)
jpfg_iddt_2x2 (j_dfdomprfss_ptr dinfo, jpfg_domponfnt_info * dompptr,
               JCOEFPTR doff_blodk,
               JSAMPARRAY output_buf, JDIMENSION output_dol)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * qubntptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *rbngf_limit = IDCT_rbngf_limit(dinfo);
  int dtr;
  int workspbdf[DCTSIZE*2];     /* bufffrs dbtb bftwffn pbssfs */
  SHIFT_TEMPS

  /* Pbss 1: prodfss dolumns from input, storf into work brrby. */

  inptr = doff_blodk;
  qubntptr = (ISLOW_MULT_TYPE *) dompptr->ddt_tbblf;
  wsptr = workspbdf;
  for (dtr = DCTSIZE; dtr > 0; inptr++, qubntptr++, wsptr++, dtr--) {
    /* Don't bothfr to prodfss dolumns 2,4,6 */
    if (dtr == DCTSIZE-2 || dtr == DCTSIZE-4 || dtr == DCTSIZE-6)
      dontinuf;
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*3] == 0 &&
        inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*7] == 0) {
      /* AC tfrms bll zfro; wf nffd not fxbminf tfrms 2,4,6 for 2x2 output */
      int ddvbl = DEQUANTIZE(inptr[DCTSIZE*0], qubntptr[DCTSIZE*0]) << PASS1_BITS;

      wsptr[DCTSIZE*0] = ddvbl;
      wsptr[DCTSIZE*1] = ddvbl;

      dontinuf;
    }

    /* Evfn pbrt */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], qubntptr[DCTSIZE*0]);
    tmp10 = z1 << (CONST_BITS+2);

    /* Odd pbrt */

    z1 = DEQUANTIZE(inptr[DCTSIZE*7], qubntptr[DCTSIZE*7]);
    tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (d7-d5+d3-d1) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*5], qubntptr[DCTSIZE*5]);
    tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-d1+d3+d5+d7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*3], qubntptr[DCTSIZE*3]);
    tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-d1+d3-d5-d7) */
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], qubntptr[DCTSIZE*1]);
    tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (d1+d3+d5+d7) */

    /* Finbl output stbgf */

    wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
    wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }

  /* Pbss 2: prodfss 2 rows from work brrby, storf into output brrby. */

  wsptr = workspbdf;
  for (dtr = 0; dtr < 2; dtr++) {
    outptr = output_buf[dtr] + output_dol;
    /* It's not dlfbr whfthfr b zfro row tfst is worthwhilf hfrf ... */

#ifndff NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[3] == 0 && wsptr[5] == 0 && wsptr[7] == 0) {
      /* AC tfrms bll zfro */
      JSAMPLE ddvbl = rbngf_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
                                  & RANGE_MASK];

      outptr[0] = ddvbl;
      outptr[1] = ddvbl;

      wsptr += DCTSIZE;         /* bdvbndf pointfr to nfxt row */
      dontinuf;
    }
#fndif

    /* Evfn pbrt */

    tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);

    /* Odd pbrt */

    tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (d7-d5+d3-d1) */
         + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-d1+d3+d5+d7) */
         + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-d1+d3-d5-d7) */
         + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (d1+d3+d5+d7) */

    /* Finbl output stbgf */

    outptr[0] = rbngf_limit[(int) DESCALE(tmp10 + tmp0,
                                          CONST_BITS+PASS1_BITS+3+2)
                            & RANGE_MASK];
    outptr[1] = rbngf_limit[(int) DESCALE(tmp10 - tmp0,
                                          CONST_BITS+PASS1_BITS+3+2)
                            & RANGE_MASK];

    wsptr += DCTSIZE;           /* bdvbndf pointfr to nfxt row */
  }
}


/*
 * Pfrform dfqubntizbtion bnd invfrsf DCT on onf blodk of dofffidifnts,
 * produding b rfdudfd-sizf 1x1 output blodk.
 */

GLOBAL(void)
jpfg_iddt_1x1 (j_dfdomprfss_ptr dinfo, jpfg_domponfnt_info * dompptr,
               JCOEFPTR doff_blodk,
               JSAMPARRAY output_buf, JDIMENSION output_dol)
{
  int ddvbl;
  ISLOW_MULT_TYPE * qubntptr;
  JSAMPLE *rbngf_limit = IDCT_rbngf_limit(dinfo);
  SHIFT_TEMPS

  /* Wf hbrdly nffd bn invfrsf DCT routinf for this: just tbkf thf
   * bvfrbgf pixfl vbluf, whidh is onf-fighth of thf DC dofffidifnt.
   */
  qubntptr = (ISLOW_MULT_TYPE *) dompptr->ddt_tbblf;
  ddvbl = DEQUANTIZE(doff_blodk[0], qubntptr[0]);
  ddvbl = (int) DESCALE((INT32) ddvbl, 3);

  output_buf[0][output_dol] = rbngf_limit[ddvbl & RANGE_MASK];
}

#fndif /* IDCT_SCALING_SUPPORTED */
