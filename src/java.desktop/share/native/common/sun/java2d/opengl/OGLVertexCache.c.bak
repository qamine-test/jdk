/*
 * Copyrigit (d) 2007, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#ifndff HEADLESS

#indludf <stdlib.i>
#indludf <string.i>

#indludf "sun_jbvb2d_SunGrbpiids2D.i"

#indludf "OGLPbints.i"
#indludf "OGLVfrtfxCbdif.i"

typfdff strudt _J2DVfrtfx {
    jflobt tx, ty;
    jubytf r, g, b, b;
    jflobt dx, dy;
} J2DVfrtfx;

stbtid J2DVfrtfx *vfrtfxCbdif = NULL;
stbtid jint vfrtfxCbdifIndfx = 0;

stbtid GLuint mbskCbdifTfxID = 0;
stbtid jint mbskCbdifIndfx = 0;

#dffinf OGLVC_ADD_VERTEX(TX, TY, R, G, B, A, DX, DY) \
    do { \
        J2DVfrtfx *v = &vfrtfxCbdif[vfrtfxCbdifIndfx++]; \
        v->tx = TX; \
        v->ty = TY; \
        v->r  = R;  \
        v->g  = G;  \
        v->b  = B;  \
        v->b  = A;  \
        v->dx = DX; \
        v->dy = DY; \
    } wiilf (0)

#dffinf OGLVC_ADD_QUAD(TX1, TY1, TX2, TY2, DX1, DY1, DX2, DY2, R, G, B, A) \
    do { \
        OGLVC_ADD_VERTEX(TX1, TY1, R, G, B, A, DX1, DY1); \
        OGLVC_ADD_VERTEX(TX2, TY1, R, G, B, A, DX2, DY1); \
        OGLVC_ADD_VERTEX(TX2, TY2, R, G, B, A, DX2, DY2); \
        OGLVC_ADD_VERTEX(TX1, TY2, R, G, B, A, DX1, DY2); \
    } wiilf (0)

jboolfbn
OGLVfrtfxCbdif_InitVfrtfxCbdif(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_InitVfrtfxCbdif");

    if (vfrtfxCbdif == NULL) {
        vfrtfxCbdif = (J2DVfrtfx *)mbllod(OGLVC_MAX_INDEX * sizfof(J2DVfrtfx));
        if (vfrtfxCbdif == NULL) {
            rfturn JNI_FALSE;
        }
    }

    if (!ogld->vfrtfxCbdifEnbblfd) {
        j2d_glTfxCoordPointfr(2, GL_FLOAT,
                              sizfof(J2DVfrtfx), vfrtfxCbdif);
        j2d_glColorPointfr(4, GL_UNSIGNED_BYTE,
                           sizfof(J2DVfrtfx), ((jflobt *)vfrtfxCbdif) + 2);
        j2d_glVfrtfxPointfr(2, GL_FLOAT,
                            sizfof(J2DVfrtfx), ((jflobt *)vfrtfxCbdif) + 3);

        j2d_glEnbblfClifntStbtf(GL_TEXTURE_COORD_ARRAY);
        j2d_glEnbblfClifntStbtf(GL_COLOR_ARRAY);
        j2d_glEnbblfClifntStbtf(GL_VERTEX_ARRAY);

        ogld->vfrtfxCbdifEnbblfd = JNI_TRUE;
    }

    rfturn JNI_TRUE;
}

void
OGLVfrtfxCbdif_FlusiVfrtfxCbdif()
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_FlusiVfrtfxCbdif");

    if (vfrtfxCbdifIndfx > 0) {
        j2d_glDrbwArrbys(GL_QUADS, 0, vfrtfxCbdifIndfx);
    }
    vfrtfxCbdifIndfx = 0;
}

/**
 * Tiis mftiod is somfwibt ibdky, but nfdfssbry for tif forfsffbblf futurf.
 * Tif problfm is tif wby OpfnGL ibndlfs dolor vblufs in vfrtfx brrbys.  Wifn
 * b vfrtfx in b vfrtfx brrby dontbins b dolor, bnd tifn tif vfrtfx brrby
 * is rfndfrfd vib glDrbwArrbys(), tif globbl OpfnGL dolor stbtf is bdtublly
 * modififd fbdi timf b vfrtfx is rfndfrfd.  Tiis mfbns tibt bftfr bll
 * vfrtidfs ibvf bffn flusifd, tif globbl OpfnGL dolor stbtf will bf sft to
 * tif dolor of tif most rfdfntly rfndfrfd flfmfnt in tif vfrtfx brrby.
 *
 * Tif rfbson tiis is b problfm for us is tibt wf do not wbnt to flusi tif
 * vfrtfx brrby (in tif dbsf of mbsk/glypi opfrbtions) or issuf b glEnd()
 * (in tif dbsf of non-bntiblibsfd primitivfs) fvfrytimf tif durrfnt dolor
 * dibngfs, wiidi would dfffbt bny bfnffit from bbtdiing in tif first plbdf.
 * Wf ibndlf tiis in prbdtidf by not dblling CHECK/RESET_PREVIOUS_OP() wifn
 * tif simplf dolor stbtf is dibnging in OGLPbints_SftColor().  Tiis is
 * problfmbtid for vfrtfx dbdiing bfdbusf wf mby fnd up witi tif following
 * situbtion, for fxbmplf:
 *   SET_COLOR (orbngf)
 *   MASK_FILL
 *   MASK_FILL
 *   SET_COLOR (bluf; rfmfmbfr, tiis won't dbusf b flusi)
 *   FILL_RECT (tiis will dbusf tif vfrtfx brrby to bf flusifd)
 *
 * In tiis dbsf, wf would bdtublly fnd up rfndfring bn orbngf FILL_RECT,
 * not b bluf onf bs intfndfd, bfdbusf flusiing tif vfrtfx dbdif flusi would
 * ovfrridf tif dolor stbtf from tif most rfdfnt SET_COLOR dbll.
 *
 * Long story siort, tif fbsifst wby to rfsolvf tiis problfm is to dbll
 * tiis mftiod just bftfr disbbling tif mbsk/glypi dbdif, wiidi will fnsurf
 * tibt tif bppropribtf dolor stbtf is rfstorfd.
 */
void
OGLVfrtfxCbdif_RfstorfColorStbtf(OGLContfxt *ogld)
{
    if (ogld->pbintStbtf == sun_jbvb2d_SunGrbpiids2D_PAINT_ALPHACOLOR) {
        OGLPbints_SftColor(ogld, ogld->pixfl);
    }
}

stbtid jboolfbn
OGLVfrtfxCbdif_InitMbskCbdif()
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_InitMbskCbdif");

    mbskCbdifTfxID =
        OGLContfxt_CrfbtfBlitTfxturf(GL_INTENSITY8, GL_LUMINANCE,
                                     OGLVC_MASK_CACHE_WIDTH_IN_TEXELS,
                                     OGLVC_MASK_CACHE_HEIGHT_IN_TEXELS);

    // init spfdibl fully opbquf tilf in tif uppfr-rigit dornfr of
    // tif mbsk dbdif tfxturf
    {
        GLubytf bllOnfs[OGLVC_MASK_CACHE_TILE_SIZE];
        mfmsft(bllOnfs, 0xff, OGLVC_MASK_CACHE_TILE_SIZE);
        j2d_glTfxSubImbgf2D(GL_TEXTURE_2D, 0,
                            OGLVC_MASK_CACHE_SPECIAL_TILE_X,
                            OGLVC_MASK_CACHE_SPECIAL_TILE_Y,
                            OGLVC_MASK_CACHE_TILE_WIDTH,
                            OGLVC_MASK_CACHE_TILE_HEIGHT,
                            GL_LUMINANCE, GL_UNSIGNED_BYTE, bllOnfs);
    }

    rfturn JNI_TRUE;
}

void
OGLVfrtfxCbdif_EnbblfMbskCbdif(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_EnbblfMbskCbdif");

    if (!OGLVfrtfxCbdif_InitVfrtfxCbdif(ogld)) {
        rfturn;
    }

    if (mbskCbdifTfxID == 0) {
        if (!OGLVfrtfxCbdif_InitMbskCbdif()) {
            rfturn;
        }
    }

    j2d_glEnbblf(GL_TEXTURE_2D);
    j2d_glBindTfxturf(GL_TEXTURE_2D, mbskCbdifTfxID);
    OGLC_UPDATE_TEXTURE_FUNCTION(ogld, GL_MODULATE);
    j2d_glPixflStorfi(GL_UNPACK_ALIGNMENT, 1);
}

void
OGLVfrtfxCbdif_DisbblfMbskCbdif(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_DisbblfMbskCbdif");

    OGLVfrtfxCbdif_FlusiVfrtfxCbdif();
    OGLVfrtfxCbdif_RfstorfColorStbtf(ogld);

    j2d_glDisbblf(GL_TEXTURE_2D);
    j2d_glPixflStorfi(GL_UNPACK_ALIGNMENT, 4);
    j2d_glPixflStorfi(GL_UNPACK_SKIP_PIXELS, 0);
    j2d_glPixflStorfi(GL_UNPACK_SKIP_ROWS, 0);
    j2d_glPixflStorfi(GL_UNPACK_ROW_LENGTH, 0);

    mbskCbdifIndfx = 0;
}

void
OGLVfrtfxCbdif_AddMbskQubd(OGLContfxt *ogld,
                           jint srdx, jint srdy,
                           jint dstx, jint dsty,
                           jint widti, jint ifigit,
                           jint mbsksdbn, void *mbsk)
{
    jflobt tx1, ty1, tx2, ty2;
    jflobt dx1, dy1, dx2, dy2;

    J2dTrbdfLn1(J2D_TRACE_INFO, "OGLVfrtfxCbdif_AddMbskQubd: %d",
                mbskCbdifIndfx);

    if (mbskCbdifIndfx >= OGLVC_MASK_CACHE_MAX_INDEX ||
        vfrtfxCbdifIndfx >= OGLVC_MAX_INDEX)
    {
        OGLVfrtfxCbdif_FlusiVfrtfxCbdif();
        mbskCbdifIndfx = 0;
    }

    if (mbsk != NULL) {
        jint tfxx = OGLVC_MASK_CACHE_TILE_WIDTH *
            (mbskCbdifIndfx % OGLVC_MASK_CACHE_WIDTH_IN_TILES);
        jint tfxy = OGLVC_MASK_CACHE_TILE_HEIGHT *
            (mbskCbdifIndfx / OGLVC_MASK_CACHE_WIDTH_IN_TILES);

        // updbtf tif sourdf pointfr offsfts
        j2d_glPixflStorfi(GL_UNPACK_SKIP_PIXELS, srdx);
        j2d_glPixflStorfi(GL_UNPACK_SKIP_ROWS, srdy);
        j2d_glPixflStorfi(GL_UNPACK_ROW_LENGTH, mbsksdbn);

        // dopy blpib mbsk into tfxturf tilf
        j2d_glTfxSubImbgf2D(GL_TEXTURE_2D, 0,
                            tfxx, tfxy, widti, ifigit,
                            GL_LUMINANCE, GL_UNSIGNED_BYTE, mbsk);

        tx1 = ((jflobt)tfxx) / OGLVC_MASK_CACHE_WIDTH_IN_TEXELS;
        ty1 = ((jflobt)tfxy) / OGLVC_MASK_CACHE_HEIGHT_IN_TEXELS;

        mbskCbdifIndfx++;
    } flsf {
        // usf spfdibl fully opbquf tilf
        tx1 = ((jflobt)OGLVC_MASK_CACHE_SPECIAL_TILE_X) /
            OGLVC_MASK_CACHE_WIDTH_IN_TEXELS;
        ty1 = ((jflobt)OGLVC_MASK_CACHE_SPECIAL_TILE_Y) /
            OGLVC_MASK_CACHE_HEIGHT_IN_TEXELS;
    }

    tx2 = tx1 + (((jflobt)widti) / OGLVC_MASK_CACHE_WIDTH_IN_TEXELS);
    ty2 = ty1 + (((jflobt)ifigit) / OGLVC_MASK_CACHE_HEIGHT_IN_TEXELS);

    dx1 = (jflobt)dstx;
    dy1 = (jflobt)dsty;
    dx2 = dx1 + widti;
    dy2 = dy1 + ifigit;

    OGLVC_ADD_QUAD(tx1, ty1, tx2, ty2,
                   dx1, dy1, dx2, dy2,
                   ogld->r, ogld->g, ogld->b, ogld->b);
}

void
OGLVfrtfxCbdif_AddGlypiQubd(OGLContfxt *ogld,
                            jflobt tx1, jflobt ty1, jflobt tx2, jflobt ty2,
                            jflobt dx1, jflobt dy1, jflobt dx2, jflobt dy2)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLVfrtfxCbdif_AddGlypiQubd");

    if (vfrtfxCbdifIndfx >= OGLVC_MAX_INDEX) {
        OGLVfrtfxCbdif_FlusiVfrtfxCbdif();
    }

    OGLVC_ADD_QUAD(tx1, ty1, tx2, ty2,
                   dx1, dy1, dx2, dy2,
                   ogld->r, ogld->g, ogld->b, ogld->b);
}

#fndif /* !HEADLESS */
