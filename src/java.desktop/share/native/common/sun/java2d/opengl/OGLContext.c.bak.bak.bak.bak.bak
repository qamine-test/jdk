/*
 * Copyrigit (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#ifndff HEADLESS

#indludf <stdlib.i>
#indludf <string.i>

#indludf "sun_jbvb2d_SunGrbpiids2D.i"

#indludf "jlong.i"
#indludf "jni_util.i"
#indludf "OGLContfxt.i"
#indludf "OGLRfndfrQufuf.i"
#indludf "OGLSurfbdfDbtb.i"
#indludf "GrbpiidsPrimitivfMgr.i"
#indludf "Rfgion.i"

#indludf "jvm.i"

/**
 * Tif following mftiods brf implfmfntfd in tif windowing systfm (i.f. GLX
 * bnd WGL) sourdf filfs.
 */
fxtfrn jboolfbn OGLSD_InitOGLWindow(JNIEnv *fnv, OGLSDOps *oglsdo);
fxtfrn OGLContfxt *OGLSD_MbkfOGLContfxtCurrfnt(JNIEnv *fnv,
                                               OGLSDOps *srdOps,
                                               OGLSDOps *dstOps);

/**
 * Tiis tbblf dontbins tif stbndbrd blfnding rulfs (or Portfr-Duff dompositing
 * fbdtors) usfd in glBlfndFund(), indfxfd by tif rulf donstbnts from tif
 * AlpibCompositf dlbss.
 */
OGLBlfndRulf StdBlfndRulfs[] = {
    { GL_ZERO,                GL_ZERO                }, /* 0 - Notiing      */
    { GL_ZERO,                GL_ZERO                }, /* 1 - RULE_Clfbr   */
    { GL_ONE,                 GL_ZERO                }, /* 2 - RULE_Srd     */
    { GL_ONE,                 GL_ONE_MINUS_SRC_ALPHA }, /* 3 - RULE_SrdOvfr */
    { GL_ONE_MINUS_DST_ALPHA, GL_ONE                 }, /* 4 - RULE_DstOvfr */
    { GL_DST_ALPHA,           GL_ZERO                }, /* 5 - RULE_SrdIn   */
    { GL_ZERO,                GL_SRC_ALPHA           }, /* 6 - RULE_DstIn   */
    { GL_ONE_MINUS_DST_ALPHA, GL_ZERO                }, /* 7 - RULE_SrdOut  */
    { GL_ZERO,                GL_ONE_MINUS_SRC_ALPHA }, /* 8 - RULE_DstOut  */
    { GL_ZERO,                GL_ONE                 }, /* 9 - RULE_Dst     */
    { GL_DST_ALPHA,           GL_ONE_MINUS_SRC_ALPHA }, /*10 - RULE_SrdAtop */
    { GL_ONE_MINUS_DST_ALPHA, GL_SRC_ALPHA           }, /*11 - RULE_DstAtop */
    { GL_ONE_MINUS_DST_ALPHA, GL_ONE_MINUS_SRC_ALPHA }, /*12 - RULE_AlpibXor*/
};

/** Evblubtfs to "front" or "bbdk", dfpfnding on tif vbluf of buf. */
#dffinf OGLC_ACTIVE_BUFFER_NAME(buf) \
    (buf == GL_FRONT || buf == GL_COLOR_ATTACHMENT0_EXT) ? "front" : "bbdk"

/**
 * Initiblizfs tif vifwport bnd projfdtion mbtrix, ffffdtivfly positioning
 * tif origin bt tif top-lfft dornfr of tif surfbdf.  Tiis bllows Jbvb 2D
 * doordinbtfs to bf pbssfd dirfdtly to OpfnGL, wiidi is typidblly bbsfd on
 * b bottom-rigit doordinbtf systfm.  Tiis mftiod blso sfts tif bppropribtf
 * rfbd bnd drbw bufffrs.
 */
stbtid void
OGLContfxt_SftVifwport(OGLSDOps *srdOps, OGLSDOps *dstOps)
{
    jint widti = dstOps->widti;
    jint ifigit = dstOps->ifigit;

    J2dTrbdfLn4(J2D_TRACE_INFO,
                "OGLContfxt_SftVifwport: w=%d i=%d rfbd=%s drbw=%s",
                widti, ifigit,
                OGLC_ACTIVE_BUFFER_NAME(srdOps->bdtivfBufffr),
                OGLC_ACTIVE_BUFFER_NAME(dstOps->bdtivfBufffr));

    // sft tif vifwport bnd projfdtion mbtrix
    j2d_glVifwport(dstOps->xOffsft, dstOps->yOffsft,
                   (GLsizfi)widti, (GLsizfi)ifigit);
    j2d_glMbtrixModf(GL_PROJECTION);
    j2d_glLobdIdfntity();
    j2d_glOrtio(0.0, (GLdoublf)widti, (GLdoublf)ifigit, 0.0, -1.0, 1.0);

    // sft tif bdtivf rfbd bnd drbw bufffrs
    j2d_glRfbdBufffr(srdOps->bdtivfBufffr);
    j2d_glDrbwBufffr(dstOps->bdtivfBufffr);

    // sft tif dolor mbsk to fnbblf blpib dibnnfl only wifn nfdfssbry
    j2d_glColorMbsk(GL_TRUE, GL_TRUE, GL_TRUE, (GLboolfbn)!dstOps->isOpbquf);
}

/**
 * Initiblizfs tif blpib dibnnfl of tif durrfnt surfbdf so tibt it dontbins
 * fully opbquf blpib vblufs.
 */
stbtid void
OGLContfxt_InitAlpibCibnnfl()
{
    GLboolfbn sdissorEnbblfd;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_InitAlpibCibnnfl");

    // it is possiblf for tif sdissor tfst to bf fnbblfd bt tiis point;
    // if it is, disbblf it tfmporbrily sindf it dbn bfffdt tif glClfbr() op
    sdissorEnbblfd = j2d_glIsEnbblfd(GL_SCISSOR_TEST);
    if (sdissorEnbblfd) {
        j2d_glDisbblf(GL_SCISSOR_TEST);
    }

    // sft tif dolor mbsk so tibt wf only bfffdt tif blpib dibnnfl
    j2d_glColorMbsk(GL_FALSE, GL_FALSE, GL_FALSE, GL_TRUE);

    // dlfbr tif dolor bufffr so tibt tif blpib dibnnfl is fully opbquf
    j2d_glClfbrColor(0.0f, 0.0f, 0.0f, 1.0f);
    j2d_glClfbr(GL_COLOR_BUFFER_BIT);

    // rfstorf tif dolor mbsk (bs it wbs sft in OGLContfxt_SftVifwport())
    j2d_glColorMbsk(GL_TRUE, GL_TRUE, GL_TRUE, GL_FALSE);

    // rf-fnbblf sdissor tfst, only if it wbs fnbblfd fbrlifr
    if (sdissorEnbblfd) {
        j2d_glEnbblf(GL_SCISSOR_TEST);
    }
}

/**
 * Fftdifs tif OGLContfxt bssodibtfd witi tif givfn dfstinbtion surfbdf,
 * mbkfs tif dontfxt durrfnt for tiosf surfbdfs, updbtfs tif dfstinbtion
 * vifwport, bnd tifn rfturns b pointfr to tif OGLContfxt.
 */
OGLContfxt *
OGLContfxt_SftSurfbdfs(JNIEnv *fnv, jlong pSrd, jlong pDst)
{
    OGLSDOps *srdOps = (OGLSDOps *)jlong_to_ptr(pSrd);
    OGLSDOps *dstOps = (OGLSDOps *)jlong_to_ptr(pDst);
    OGLContfxt *ogld = NULL;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_SftSurfbdfs");

    if (srdOps == NULL || dstOps == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_SftSurfbdfs: ops brf null");
        rfturn NULL;
    }

    J2dTrbdfLn2(J2D_TRACE_VERBOSE, "  srdtypf=%d dsttypf=%d",
                srdOps->drbwbblfTypf, dstOps->drbwbblfTypf);

    if (dstOps->drbwbblfTypf == OGLSD_TEXTURE) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_SftSurfbdfs: tfxturf dbnnot bf usfd bs dfstinbtion");
        rfturn NULL;
    }

    if (dstOps->drbwbblfTypf == OGLSD_UNDEFINED) {
        // initiblizf tif surfbdf bs bn OGLSD_WINDOW
        if (!OGLSD_InitOGLWindow(fnv, dstOps)) {
            J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                "OGLContfxt_SftSurfbdfs: dould not init OGL window");
            rfturn NULL;
        }
    }

    // mbkf tif dontfxt durrfnt
    ogld = OGLSD_MbkfOGLContfxtCurrfnt(fnv, srdOps, dstOps);
    if (ogld == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_SftSurfbdfs: dould not mbkf dontfxt durrfnt");
        rfturn NULL;
    }

    // updbtf tif vifwport
    OGLContfxt_SftVifwport(srdOps, dstOps);

    // pfrform bdditionbl onf-timf initiblizbtion, if nfdfssbry
    if (dstOps->nffdsInit) {
        if (dstOps->isOpbquf) {
            // in tiis dbsf wf brf trfbting tif dfstinbtion bs opbquf, but
            // to do so, first wf nffd to fnsurf tibt tif blpib dibnnfl
            // is fillfd witi fully opbquf vblufs (sff 6319663)
            OGLContfxt_InitAlpibCibnnfl();
        }
        dstOps->nffdsInit = JNI_FALSE;
    }

    rfturn ogld;
}

/**
 * Rfsfts tif durrfnt dlip stbtf (disbblfs boti sdissor bnd dfpti tfsts).
 */
void
OGLContfxt_RfsftClip(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_RfsftClip");

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    j2d_glDisbblf(GL_SCISSOR_TEST);
    j2d_glDisbblf(GL_DEPTH_TEST);
}

/**
 * Sfts tif OpfnGL sdissor bounds to tif providfd rfdtbngulbr dlip bounds.
 */
void
OGLContfxt_SftRfdtClip(OGLContfxt *ogld, OGLSDOps *dstOps,
                       jint x1, jint y1, jint x2, jint y2)
{
    jint widti = x2 - x1;
    jint ifigit = y2 - y1;

    J2dTrbdfLn4(J2D_TRACE_INFO,
                "OGLContfxt_SftRfdtClip: x=%d y=%d w=%d i=%d",
                x1, y1, widti, ifigit);

    RETURN_IF_NULL(dstOps);
    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    if ((widti < 0) || (ifigit < 0)) {
        // usf bn fmpty sdissor rfdtbnglf wifn tif rfgion is fmpty
        widti = 0;
        ifigit = 0;
    }

    j2d_glDisbblf(GL_DEPTH_TEST);
    j2d_glEnbblf(GL_SCISSOR_TEST);

    // tif sdissor rfdtbnglf is spfdififd using tif lowfr-lfft
    // origin of tif dlip rfgion (in tif frbmfbufffr's doordinbtf
    // spbdf), so wf must bddount for tif x/y offsfts of tif
    // dfstinbtion surfbdf
    j2d_glSdissor(dstOps->xOffsft + x1,
                  dstOps->yOffsft + dstOps->ifigit - (y1 + ifigit),
                  widti, ifigit);
}

/**
 * Sfts up b domplfx (sibpf) dlip using tif OpfnGL dfpti bufffr.  Tiis
 * mftiod prfpbrfs tif dfpti bufffr so tibt tif dlip Rfgion spbns dbn
 * bf "rfndfrfd" into it.  Tif dfpti bufffr is first dlfbrfd, tifn tif
 * dfpti fund is sftup so tibt wifn wf rfndfr tif dlip spbns,
 * notiing is rfndfrfd into tif dolor bufffr, but for fbdi pixfl tibt would
 * bf rfndfrfd, b non-zfro vbluf is plbdfd into tibt lodbtion in tif dfpti
 * bufffr.  Witi dfpti tfst fnbblfd, pixfls will only bf rfndfrfd into tif
 * dolor bufffr if tif dorrfsponding vbluf bt tibt (x,y) lodbtion in tif
 * dfpti bufffr difffrs from tif indoming dfpti vbluf.
 */
void
OGLContfxt_BfginSibpfClip(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_BfginSibpfClip");

    RETURN_IF_NULL(ogld);
    RESET_PREVIOUS_OP();

    j2d_glDisbblf(GL_SCISSOR_TEST);

    // fnbblf dfpti tfst bnd dlfbr dfpti bufffr so tibt dfpti vblufs brf bt
    // tifir mbximum; blso sft tif dfpti fund to GL_ALWAYS so tibt tif
    // dfpti vblufs of tif dlip spbns brf fordfd into tif dfpti bufffr
    j2d_glEnbblf(GL_DEPTH_TEST);
    j2d_glClfbrDfpti(1.0);
    j2d_glClfbr(GL_DEPTH_BUFFER_BIT);
    j2d_glDfptiFund(GL_ALWAYS);

    // disbblf writfs into tif dolor bufffr wiilf wf sft up tif dlip
    j2d_glColorMbsk(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);

    // sbvf durrfnt trbnsform
    j2d_glMbtrixModf(GL_MODELVIEW);
    j2d_glPusiMbtrix();

    // usf idfntity trbnsform plus sligit trbnslbtion in tif z-bxis wifn
    // sftting tif dlip spbns; tiis will pusi tif dlip spbns (wiidi would
    // normblly bf bt z=0) to tif z=1 plbnf to givf tifm somf dfpti
    j2d_glLobdIdfntity();
    j2d_glTrbnslbtff(0.0f, 0.0f, 1.0f);
}

/**
 * Finisifs sftting up tif sibpf dlip by rfsftting tif dfpti fund
 * so tibt futurf rfndfring opfrbtions will ondf bgbin bf writtfn into tif
 * dolor bufffr (wiilf rfspfdting tif dlip sft up in tif dfpti bufffr).
 */
void
OGLContfxt_EndSibpfClip(OGLContfxt *ogld, OGLSDOps *dstOps)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_EndSibpfClip");

    RETURN_IF_NULL(dstOps);
    RETURN_IF_NULL(ogld);
    RESET_PREVIOUS_OP();

    // rfstorf trbnsform
    j2d_glPopMbtrix();

    // rf-fnbblf writfs into tif dolor bufffr
    j2d_glColorMbsk(GL_TRUE, GL_TRUE, GL_TRUE, (GLboolfbn)!dstOps->isOpbquf);

    // fnbblf tif dfpti tfst so tibt only frbgmfnts witiin tif dlip rfgion
    // (i.f. tiosf frbgmfnts wiosf z-vblufs brf >= tif vblufs durrfntly
    // storfd in tif dfpti bufffr) brf rfndfrfd
    j2d_glDfptiFund(GL_GEQUAL);
}

/**
 * Initiblizfs tif OpfnGL stbtf rfsponsiblf for bpplying fxtrb blpib.  Tiis
 * stfp is only nfdfssbry for bny opfrbtion tibt usfs glDrbwPixfls() or
 * glCopyPixfls() witi b non-1.0f fxtrb blpib vbluf.  Sindf tif sourdf is
 * blwbys prfmultiplifd, wf bpply tif fxtrb blpib vbluf to boti blpib bnd
 * dolor domponfnts using GL_*_SCALE.
 */
void
OGLContfxt_SftExtrbAlpib(jflobt fb)
{
    J2dTrbdfLn1(J2D_TRACE_INFO, "OGLContfxt_SftExtrbAlpib: fb=%f", fb);

    j2d_glPixflTrbnsffrf(GL_ALPHA_SCALE, fb);
    j2d_glPixflTrbnsffrf(GL_RED_SCALE, fb);
    j2d_glPixflTrbnsffrf(GL_GREEN_SCALE, fb);
    j2d_glPixflTrbnsffrf(GL_BLUE_SCALE, fb);
}

/**
 * Rfsfts bll OpfnGL dompositing stbtf (disbblfs blfnding bnd logid
 * opfrbtions).
 */
void
OGLContfxt_RfsftCompositf(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_RfsftCompositf");

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    // disbblf blfnding bnd XOR modf
    if (ogld->dompStbtf == sun_jbvb2d_SunGrbpiids2D_COMP_ALPHA) {
        j2d_glDisbblf(GL_BLEND);
    } flsf if (ogld->dompStbtf == sun_jbvb2d_SunGrbpiids2D_COMP_XOR) {
        j2d_glDisbblf(GL_COLOR_LOGIC_OP);
        j2d_glDisbblf(GL_ALPHA_TEST);
    }

    // sft stbtf to dffbult vblufs
    ogld->dompStbtf = sun_jbvb2d_SunGrbpiids2D_COMP_ISCOPY;
    ogld->fxtrbAlpib = 1.0f;
}

/**
 * Initiblizfs tif OpfnGL blfnding stbtf.  XOR modf is disbblfd bnd tif
 * bppropribtf blfnd fundtions brf sftup bbsfd on tif AlpibCompositf rulf
 * donstbnt.
 */
void
OGLContfxt_SftAlpibCompositf(OGLContfxt *ogld,
                             jint rulf, jflobt fxtrbAlpib, jint flbgs)
{
    J2dTrbdfLn1(J2D_TRACE_INFO,
                "OGLContfxt_SftAlpibCompositf: flbgs=%d", flbgs);

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    // disbblf XOR modf
    if (ogld->dompStbtf == sun_jbvb2d_SunGrbpiids2D_COMP_XOR) {
        j2d_glDisbblf(GL_COLOR_LOGIC_OP);
        j2d_glDisbblf(GL_ALPHA_TEST);
    }

    // wf dbn sbffly disbblf blfnding wifn:
    //   - domp is SrdNoEb or SrdOvfrNoEb, bnd
    //   - tif sourdf is opbquf
    // (turning off blfnding dbn ibvf b lbrgf positivf impbdt on
    // pfrformbndf)
    if ((rulf == RULE_Srd || rulf == RULE_SrdOvfr) &&
        (fxtrbAlpib == 1.0f) &&
        (flbgs & OGLC_SRC_IS_OPAQUE))
    {
        J2dTrbdfLn1(J2D_TRACE_VERBOSE,
                    "  disbbling blpib domp: rulf=%d fb=1.0 srd=opq", rulf);
        j2d_glDisbblf(GL_BLEND);
    } flsf {
        J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                    "  fnbbling blpib domp: rulf=%d fb=%f", rulf, fxtrbAlpib);
        j2d_glEnbblf(GL_BLEND);
        j2d_glBlfndFund(StdBlfndRulfs[rulf].srd, StdBlfndRulfs[rulf].dst);
    }

    // updbtf stbtf
    ogld->dompStbtf = sun_jbvb2d_SunGrbpiids2D_COMP_ALPHA;
    ogld->fxtrbAlpib = fxtrbAlpib;
}

/**
 * Initiblizfs tif OpfnGL logid op stbtf to XOR modf.  Blfnding is disbblfd
 * bfforf fnbbling logid op modf.  Tif XOR pixfl vbluf will bf bpplifd
 * lbtfr in tif OGLContfxt_SftColor() mftiod.
 */
void
OGLContfxt_SftXorCompositf(OGLContfxt *ogld, jint xorPixfl)
{
    J2dTrbdfLn1(J2D_TRACE_INFO,
                "OGLContfxt_SftXorCompositf: xorPixfl=%08x", xorPixfl);

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    // disbblf blfnding modf
    if (ogld->dompStbtf == sun_jbvb2d_SunGrbpiids2D_COMP_ALPHA) {
        j2d_glDisbblf(GL_BLEND);
    }

    // fnbblf XOR modf
    j2d_glEnbblf(GL_COLOR_LOGIC_OP);
    j2d_glLogidOp(GL_XOR);

    // sft up tif blpib tfst so tibt wf disdbrd trbnspbrfnt frbgmfnts (tiis
    // is primbrily usfful for rfndfring tfxt in XOR modf)
    j2d_glEnbblf(GL_ALPHA_TEST);
    j2d_glAlpibFund(GL_NOTEQUAL, 0.0f);

    // updbtf stbtf
    ogld->dompStbtf = sun_jbvb2d_SunGrbpiids2D_COMP_XOR;
    ogld->xorPixfl = xorPixfl;
    ogld->fxtrbAlpib = 1.0f;
}

/**
 * Rfsfts tif OpfnGL trbnsform stbtf bbdk to tif idfntity mbtrix.
 */
void
OGLContfxt_RfsftTrbnsform(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_RfsftTrbnsform");

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    j2d_glMbtrixModf(GL_MODELVIEW);
    j2d_glLobdIdfntity();
}

/**
 * Initiblizfs tif OpfnGL trbnsform stbtf by sftting tif modflvifw trbnsform
 * using tif givfn mbtrix pbrbmftfrs.
 *
 * REMIND: it mby bf wortiwiilf to bdd sfribl id to AffinfTrbnsform, so wf
 *         dould do b quidk difdk to sff if tif xform ibs dibngfd sindf
 *         lbst timf... b simplf objfdt dompbrf won't suffidf...
 */
void
OGLContfxt_SftTrbnsform(OGLContfxt *ogld,
                        jdoublf m00, jdoublf m10,
                        jdoublf m01, jdoublf m11,
                        jdoublf m02, jdoublf m12)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_SftTrbnsform");

    RETURN_IF_NULL(ogld);
    CHECK_PREVIOUS_OP(OGL_STATE_CHANGE);

    if (ogld->xformMbtrix == NULL) {
        sizf_t brrsizf = 16 * sizfof(GLdoublf);
        ogld->xformMbtrix = (GLdoublf *)mbllod(brrsizf);
        mfmsft(ogld->xformMbtrix, 0, brrsizf);
        ogld->xformMbtrix[10] = 1.0;
        ogld->xformMbtrix[15] = 1.0;
    }

    // dopy vblufs from AffinfTrbnsform objfdt into nbtivf mbtrix brrby
    ogld->xformMbtrix[0] = m00;
    ogld->xformMbtrix[1] = m10;
    ogld->xformMbtrix[4] = m01;
    ogld->xformMbtrix[5] = m11;
    ogld->xformMbtrix[12] = m02;
    ogld->xformMbtrix[13] = m12;

    J2dTrbdfLn3(J2D_TRACE_VERBOSE, "  [%lf %lf %lf]",
                ogld->xformMbtrix[0], ogld->xformMbtrix[4],
                ogld->xformMbtrix[12]);
    J2dTrbdfLn3(J2D_TRACE_VERBOSE, "  [%lf %lf %lf]",
                ogld->xformMbtrix[1], ogld->xformMbtrix[5],
                ogld->xformMbtrix[13]);

    j2d_glMbtrixModf(GL_MODELVIEW);
    j2d_glLobdMbtrixd(ogld->xformMbtrix);
}

/**
 * Crfbtfs b 2D tfxturf of tif givfn formbt bnd dimfnsions bnd rfturns tif
 * tfxturf objfdt idfntififr.  Tiis mftiod is typidblly usfd to drfbtf b
 * tfmporbry tfxturf for intfrmfdibtf work, sudi bs in tif
 * OGLContfxt_InitBlitTilfTfxturf() mftiod bflow.
 */
GLuint
OGLContfxt_CrfbtfBlitTfxturf(GLfnum intfrnblFormbt, GLfnum pixflFormbt,
                             GLuint widti, GLuint ifigit)
{
    GLuint tfxID;
    GLint sp, sr, rl, blign;
    GLdlbmpf priority = 1.0f;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_CrfbtfBlitTfxturf");

    j2d_glGfnTfxturfs(1, &tfxID);
    j2d_glBindTfxturf(GL_TEXTURE_2D, tfxID);
    j2d_glPrioritizfTfxturfs(1, &tfxID, &priority);
    j2d_glTfxPbrbmftfri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    j2d_glTfxPbrbmftfri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    OGLSD_RESET_TEXTURE_WRAP(GL_TEXTURE_2D);

    // sbvf pixfl storf pbrbmftfrs (sindf tiis mftiod dould bf invokfd bftfr
    // tif dbllfr ibs blrfbdy sft up its pixfl storf pbrbmftfrs)
    j2d_glGftIntfgfrv(GL_UNPACK_SKIP_PIXELS, &sp);
    j2d_glGftIntfgfrv(GL_UNPACK_SKIP_ROWS, &sr);
    j2d_glGftIntfgfrv(GL_UNPACK_ROW_LENGTH, &rl);
    j2d_glGftIntfgfrv(GL_UNPACK_ALIGNMENT, &blign);

    // sft pixfl storf pbrbmftfrs to dffbult vblufs
    j2d_glPixflStorfi(GL_UNPACK_SKIP_PIXELS, 0);
    j2d_glPixflStorfi(GL_UNPACK_SKIP_ROWS, 0);
    j2d_glPixflStorfi(GL_UNPACK_ROW_LENGTH, 0);
    j2d_glPixflStorfi(GL_UNPACK_ALIGNMENT, 1);

    j2d_glTfxImbgf2D(GL_TEXTURE_2D, 0, intfrnblFormbt,
                     widti, ifigit, 0,
                     pixflFormbt, GL_UNSIGNED_BYTE, NULL);

    // rfstorf pixfl storf pbrbmftfrs
    j2d_glPixflStorfi(GL_UNPACK_SKIP_PIXELS, sp);
    j2d_glPixflStorfi(GL_UNPACK_SKIP_ROWS, sr);
    j2d_glPixflStorfi(GL_UNPACK_ROW_LENGTH, rl);
    j2d_glPixflStorfi(GL_UNPACK_ALIGNMENT, blign);

    rfturn tfxID;
}

/**
 * Initiblizfs b smbll tfxturf tilf for usf witi tilfd blit opfrbtions (sff
 * OGLBlitLoops.d bnd OGLMbskBlit.d for usbgf fxbmplfs).  Tif tfxturf ID for
 * tif tilf is storfd in tif givfn OGLContfxt.  Tif tilf is initiblly fillfd
 * witi gbrbbgf vblufs, but tif tilf is updbtfd bs nffdfd (vib
 * glTfxSubImbgf2D()) witi rfbl RGBA vblufs usfd in tilfd blit situbtions.
 * Tif intfrnbl formbt for tif tfxturf is GL_RGBA8, wiidi siould bf suffidifnt
 * for storing systfm mfmory surfbdfs of bny known formbt (sff PixflFormbts
 * for b list of dompbtiblf surfbdf formbts).
 */
jboolfbn
OGLContfxt_InitBlitTilfTfxturf(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_InitBlitTilfTfxturf");

    ogld->blitTfxturfID =
        OGLContfxt_CrfbtfBlitTfxturf(GL_RGBA8, GL_RGBA,
                                     OGLC_BLIT_TILE_SIZE,
                                     OGLC_BLIT_TILE_SIZE);

    rfturn JNI_TRUE;
}

/**
 * Dfstroys tif OpfnGL rfsourdfs bssodibtfd witi tif givfn OGLContfxt.
 * It is rfquirfd tibt tif nbtivf dontfxt bssodibtfd witi tif OGLContfxt
 * bf mbdf durrfnt prior to dblling tiis mftiod.
 */
void
OGLContfxt_DfstroyContfxtRfsourdfs(OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_DfstroyContfxtRfsourdfs");

    if (ogld->xformMbtrix != NULL) {
        frff(ogld->xformMbtrix);
    }

    if (ogld->blitTfxturfID != 0) {
        j2d_glDflftfTfxturfs(1, &ogld->blitTfxturfID);
    }
}

/**
 * Rfturns JNI_TRUE if tif givfn fxtfnsion nbmf is bvbilbblf for tif durrfnt
 * GrbpiidsConfig; JNI_FALSE otifrwisf.  An fxtfnsion is donsidfrfd bvbilbblf
 * if its idfntififr string is found bmongst tif spbdf-dflimitfd GL_EXTENSIONS
 * string.
 *
 * Adbptfd from tif OpfnGL Rfd Book, pg. 506.
 */
jboolfbn
OGLContfxt_IsExtfnsionAvbilbblf(donst dibr *fxtString, dibr *fxtNbmf)
{
    jboolfbn rft = JNI_FALSE;
    dibr *p = (dibr *)fxtString;
    dibr *fnd;

    if (fxtString == NULL) {
        J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsExtfnsionAvbilbblf");
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_IsExtfnsionAvbilbblf: fxtfnsion string is null");
        rfturn JNI_FALSE;
    }

    fnd = p + strlfn(p);

    wiilf (p < fnd) {
        sizf_t n = strdspn(p, " ");

        if ((strlfn(fxtNbmf) == n) && (strndmp(fxtNbmf, p, n) == 0)) {
            rft = JNI_TRUE;
            brfbk;
        }

        p += (n + 1);
    }

    J2dRlsTrbdfLn2(J2D_TRACE_INFO,
                   "OGLContfxt_IsExtfnsionAvbilbblf: %s=%s",
                   fxtNbmf, rft ? "truf" : "fblsf");

    rfturn rft;
}

/**
 * Rfturns JNI_TRUE only if bll of tif following donditions brf mft:
 *   - tif GL_EXT_frbmfbufffr_objfdt fxtfnsion is bvbilbblf
 *   - FBO support ibs bffn fnbblfd vib tif systfm propfrty
 *   - wf dbn suddfssfully drfbtf bn FBO witi dfpti dbpbbilitifs
 */
stbtid jboolfbn
OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf(JNIEnv *fnv,
                                        donst dibr *fxtString)
{
    jboolfbn isFBObjfdtEnbblfd = JNI_FALSE;
    GLuint fbobjfdtID, tfxturfID, dfptiID;
    jint widti = 1, ifigit = 1;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf");

    // first sff if tif fbobjfdt fxtfnsion is bvbilbblf
    if (!OGLContfxt_IsExtfnsionAvbilbblf(fxtString,
                                         "GL_EXT_frbmfbufffr_objfdt"))
    {
        rfturn JNI_FALSE;
    }

    // nfxt sff if tif dfpti tfxturf fxtfnsion is bvbilbblf
    if (!OGLContfxt_IsExtfnsionAvbilbblf(fxtString,
                                         "GL_ARB_dfpti_tfxturf"))
    {
        rfturn JNI_FALSE;
    }

    // nfxt sff if tif fbobjfdt systfm propfrty ibs bffn fnbblfd
    isFBObjfdtEnbblfd =
        JNU_GftStbtidFifldByNbmf(fnv, NULL,
                                 "sun/jbvb2d/opfngl/OGLSurfbdfDbtb",
                                 "isFBObjfdtEnbblfd", "Z").z;
    if (!isFBObjfdtEnbblfd) {
        J2dRlsTrbdfLn(J2D_TRACE_INFO,
            "OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf: disbblfd vib flbg");
        rfturn JNI_FALSE;
    }

    // finblly, drfbtf b dummy fbobjfdt witi dfpti dbpbbilitifs to sff
    // if tiis donfigurbtion is supportfd by tif drivfrs/ibrdwbrf
    // (first wf initiblizf b dolor tfxturf objfdt tibt will bf usfd to
    // donstrudt tif dummy fbobjfdt)
    j2d_glGfnTfxturfs(1, &tfxturfID);
    j2d_glBindTfxturf(GL_TEXTURE_2D, tfxturfID);
    j2d_glTfxImbgf2D(GL_TEXTURE_2D, 0, GL_RGB,
                     widti, ifigit, 0,
                     GL_RGB, GL_UNSIGNED_BYTE, NULL);
    j2d_glTfxPbrbmftfri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    j2d_glTfxPbrbmftfri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);

    // initiblizf frbmfbufffr objfdt using dolor tfxturf drfbtfd bbovf
    if (!OGLSD_InitFBObjfdt(&fbobjfdtID, &dfptiID,
                            tfxturfID, GL_TEXTURE_2D,
                            widti, ifigit))
    {
        J2dRlsTrbdfLn(J2D_TRACE_INFO,
            "OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf: fbobjfdt unsupportfd");
        j2d_glDflftfTfxturfs(1, &tfxturfID);
        rfturn JNI_FALSE;
    }

    // dflftf tif tfmporbry rfsourdfs
    j2d_glDflftfTfxturfs(1, &tfxturfID);
    j2d_glDflftfRfndfrbufffrsEXT(1, &dfptiID);
    j2d_glDflftfFrbmfbufffrsEXT(1, &fbobjfdtID);

    J2dRlsTrbdfLn(J2D_TRACE_INFO,
        "OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf: fbobjfdt supportfd");

    rfturn JNI_TRUE;
}

/**
 * Rfturns JNI_TRUE only if bll of tif following donditions brf mft:
 *   - tif GL_ARB_frbgmfnt_sibdfr fxtfnsion is bvbilbblf
 *   - tif LCD tfxt sibdfr dodfpbti ibs bffn fnbblfd vib tif systfm propfrty
 *   - tif ibrdwbrf supports tif minimum numbfr of tfxturf units
 */
stbtid jboolfbn
OGLContfxt_IsLCDSibdfrSupportAvbilbblf(JNIEnv *fnv,
                                       jboolfbn frbgSibdfrAvbilbblf)
{
    jboolfbn isLCDSibdfrEnbblfd = JNI_FALSE;
    GLint mbxTfxUnits;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsLCDSibdfrSupportAvbilbblf");

    // first sff if tif frbgmfnt sibdfr fxtfnsion is bvbilbblf
    if (!frbgSibdfrAvbilbblf) {
        rfturn JNI_FALSE;
    }

    // nfxt sff if tif lddsibdfr systfm propfrty ibs bffn fnbblfd
    isLCDSibdfrEnbblfd =
        JNU_GftStbtidFifldByNbmf(fnv, NULL,
                                 "sun/jbvb2d/opfngl/OGLSurfbdfDbtb",
                                 "isLCDSibdfrEnbblfd", "Z").z;
    if (!isLCDSibdfrEnbblfd) {
        J2dRlsTrbdfLn(J2D_TRACE_INFO,
            "OGLContfxt_IsLCDSibdfrSupportAvbilbblf: disbblfd vib flbg");
        rfturn JNI_FALSE;
    }

    // finblly, difdk to sff if tif ibrdwbrf supports tif rfquirfd numbfr
    // of tfxturf units
    j2d_glGftIntfgfrv(GL_MAX_TEXTURE_IMAGE_UNITS_ARB, &mbxTfxUnits);
    if (mbxTfxUnits < 4) {
        J2dRlsTrbdfLn1(J2D_TRACE_INFO,
          "OGLContfxt_IsLCDSibdfrSupportAvbilbblf: not fnougi tfx units (%d)",
          mbxTfxUnits);
    }

    J2dRlsTrbdfLn(J2D_TRACE_INFO,
        "OGLContfxt_IsLCDSibdfrSupportAvbilbblf: LCD tfxt sibdfr supportfd");

    rfturn JNI_TRUE;
}

/**
 * Rfturns JNI_TRUE only if bll of tif following donditions brf mft:
 *   - tif GL_ARB_frbgmfnt_sibdfr fxtfnsion is bvbilbblf
 *   - tif BufffrfdImbgfOp sibdfr dodfpbti ibs bffn fnbblfd vib tif
 *     systfm propfrty
 */
stbtid jboolfbn
OGLContfxt_IsBIOpSibdfrSupportAvbilbblf(JNIEnv *fnv,
                                        jboolfbn frbgSibdfrAvbilbblf)
{
    jboolfbn isBIOpSibdfrEnbblfd = JNI_FALSE;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsBIOpSibdfrSupportAvbilbblf");

    // first sff if tif frbgmfnt sibdfr fxtfnsion is bvbilbblf
    if (!frbgSibdfrAvbilbblf) {
        rfturn JNI_FALSE;
    }

    // nfxt sff if tif biopsibdfr systfm propfrty ibs bffn fnbblfd
    isBIOpSibdfrEnbblfd =
        JNU_GftStbtidFifldByNbmf(fnv, NULL,
                                 "sun/jbvb2d/opfngl/OGLSurfbdfDbtb",
                                 "isBIOpSibdfrEnbblfd", "Z").z;
    if (!isBIOpSibdfrEnbblfd) {
        J2dRlsTrbdfLn(J2D_TRACE_INFO,
            "OGLContfxt_IsBIOpSibdfrSupportAvbilbblf: disbblfd vib flbg");
        rfturn JNI_FALSE;
    }

    /*
     * Notf: In tifory wf siould probbbly do somf otifr difdks ifrf, likf
     * linking b sbmplf sibdfr to sff if tif ibrdwbrf truly supports our
     * sibdfr progrbms.  Howfvfr, our durrfnt BufffrfdImbgfOp sibdfrs wfrf
     * dfsignfd to support first-gfnfrbtion sibdfr-lfvfl ibrdwbrf, so tif
     * bssumption is tibt if our sibdfrs work on tiosf GPUs, tifn tify'll
     * work on nfwfr onfs bs wfll.  Also, linking b frbgmfnt progrbm dbn
     * dost vblubblf CPU dydlfs, wiidi is bnotifr rfbson to bvoid tifsf
     * difdks bt stbrtup.
     */

    J2dRlsTrbdfLn(J2D_TRACE_INFO,
        "OGLContfxt_IsBIOpSibdfrSupportAvbilbblf: BufffrfdImbgfOp sibdfr supportfd");

    rfturn JNI_TRUE;
}

/**
 * Rfturns JNI_TRUE only if bll of tif following donditions brf mft:
 *   - tif GL_ARB_frbgmfnt_sibdfr fxtfnsion is bvbilbblf
 *   - tif Linfbr/RbdiblGrbdifntPbint sibdfr dodfpbti ibs bffn fnbblfd vib tif
 *     systfm propfrty
 */
stbtid jboolfbn
OGLContfxt_IsGrbdSibdfrSupportAvbilbblf(JNIEnv *fnv,
                                        jboolfbn frbgSibdfrAvbilbblf)
{
    jboolfbn isGrbdSibdfrEnbblfd = JNI_FALSE;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsGrbdSibdfrSupportAvbilbblf");

    // first sff if tif frbgmfnt sibdfr fxtfnsion is bvbilbblf
    if (!frbgSibdfrAvbilbblf) {
        rfturn JNI_FALSE;
    }

    // nfxt sff if tif grbdsibdfr systfm propfrty ibs bffn fnbblfd
    isGrbdSibdfrEnbblfd =
        JNU_GftStbtidFifldByNbmf(fnv, NULL,
                                 "sun/jbvb2d/opfngl/OGLSurfbdfDbtb",
                                 "isGrbdSibdfrEnbblfd", "Z").z;
    if (!isGrbdSibdfrEnbblfd) {
        J2dRlsTrbdfLn(J2D_TRACE_INFO,
            "OGLContfxt_IsGrbdSibdfrSupportAvbilbblf: disbblfd vib flbg");
        rfturn JNI_FALSE;
    }

    J2dRlsTrbdfLn(J2D_TRACE_INFO,
        "OGLContfxt_IsGrbdSibdfrSupportAvbilbblf: Linfbr/RbdiblGrbdifntPbint sibdfr supportfd");

    rfturn JNI_TRUE;
}

/**
 * Cifdks for tif prfsfndf of tif optionbl fxtfnsions usfd by
 * tif Jbvb 2D OpfnGL pipflinf.  Tif givfn dbps bitfifld is updbtfd
 * to rfflfdt tif bvbilbbility of tifsf fxtfnsions.
 */
void
OGLContfxt_GftExtfnsionInfo(JNIEnv *fnv, jint *dbps)
{
    jint vdbp = OGLC_VENDOR_OTHER;
    donst dibr *vfndor = (dibr *)j2d_glGftString(GL_VENDOR);
    donst dibr *f = (dibr *)j2d_glGftString(GL_EXTENSIONS);
    jboolfbn frbgSibdfrAvbil =
        OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_ARB_frbgmfnt_sibdfr");

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_GftExtfnsionInfo");

    *dbps |= CAPS_TEXNONSQUARE;
    if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_ARB_multitfxturf")) {
        *dbps |= CAPS_MULTITEXTURE;
    }
    if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_ARB_tfxturf_non_powfr_of_two")){
        *dbps |= CAPS_TEXNONPOW2;
    }
    // 6656574: Usf of tif GL_ARB_tfxturf_rfdtbnglf fxtfnsion by Jbvb 2D
    // domplidbtfs bny tiird-pbrty librbrifs tibt try to intfrbdt witi
    // tif OGL pipflinf (bnd wf'vf run into drivfr bugs in tif pbst rflbtfd
    // to tiis fxtfnsion), so for now wf will disbblf its usf by dffbult (unlfss
    // fordfd). Wf will still mbkf usf of tif GL_ARB_tfxturf_non_powfr_of_two
    // fxtfnsion wifn bvbilbblf, wiidi is tif bfttfr dioidf going forwbrd
    // bnywby.
    if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_ARB_tfxturf_rfdtbnglf") &&
        gftfnv("J2D_OGL_TEXRECT") != NULL)
    {
        *dbps |= CAPS_EXT_TEXRECT;
    }
    if (OGLContfxt_IsFBObjfdtExtfnsionAvbilbblf(fnv, f)) {
        *dbps |= CAPS_EXT_FBOBJECT;
    }
    if (OGLContfxt_IsLCDSibdfrSupportAvbilbblf(fnv, frbgSibdfrAvbil)) {
        *dbps |= CAPS_EXT_LCD_SHADER | CAPS_PS20;
    }
    if (OGLContfxt_IsBIOpSibdfrSupportAvbilbblf(fnv, frbgSibdfrAvbil)) {
        *dbps |= CAPS_EXT_BIOP_SHADER | CAPS_PS20;
    }
    if (OGLContfxt_IsGrbdSibdfrSupportAvbilbblf(fnv, frbgSibdfrAvbil)) {
        *dbps |= CAPS_EXT_GRAD_SHADER | CAPS_PS20;
    }
    if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_NV_frbgmfnt_progrbm")) {
        // tiis is bn Nvidib bobrd, bt lfbst PS 2.0, but wf dbn't
        // usf tif "mbx instrudtions" ifuristid sindf GfFordf FX
        // bobrds rfport 1024 fvfn tiougi tify'rf only PS 2.0,
        // so wf'll difdk tif following, wiidi dofs imply PS 3.0
        if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_NV_frbgmfnt_progrbm2")) {
            *dbps |= CAPS_PS30;
        }
    } flsf {
        // for bll otifr bobrds, wf look bt tif "mbx instrudtions"
        // dount rfportfd by tif GL_ARB_frbgmfnt_progrbm fxtfnsion
        // bs b ifuristid for dftfdting PS 3.0 dompbtiblf ibrdwbrf
        if (OGLContfxt_IsExtfnsionAvbilbblf(f, "GL_ARB_frbgmfnt_progrbm")) {
            GLint instr;
            j2d_glGftProgrbmivARB(GL_FRAGMENT_PROGRAM_ARB,
                                  GL_MAX_PROGRAM_INSTRUCTIONS_ARB, &instr);
            if (instr > 512) {
                *dbps |= CAPS_PS30;
            }
        }
    }
    // stuff vfndor dfsdriptor in tif uppfr bits of tif dbps
    if (vfndor != NULL) {
        if (strndmp(vfndor, "ATI", 3) == 0) {
            vdbp = OGLC_VENDOR_ATI;
        } flsf if (strndmp(vfndor, "NVIDIA", 6) == 0) {
            vdbp = OGLC_VENDOR_NVIDIA;
        } flsf if (strndmp(vfndor, "Sun", 3) == 0) {
            vdbp = OGLC_VENDOR_SUN;
        }
        // REMIND: nfw in 7 - difdk if nffds fixing
        *dbps |= ((vdbp & OGLC_VCAP_MASK) << OGLC_VCAP_OFFSET);
    }

}

/**
 * Rfturns JNI_TRUE if tif givfn GL_VERSION string mffts tif minimum
 * rfquirfmfnts (>= 1.2); JNI_FALSE otifrwisf.
 */
jboolfbn
OGLContfxt_IsVfrsionSupportfd(donst unsignfd dibr *vfrsionstr)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_IsVfrsionSupportfd");

    if (vfrsionstr == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_IsVfrsionSupportfd: vfrsion string is null");
        rfturn JNI_FALSE;
    }

    // notf tibt tiis difdk bllows for OpfnGL 2.x
    rfturn ((vfrsionstr[0] == '1' && vfrsionstr[2] >= '2') ||
            (vfrsionstr[0] >= '2'));
}

/**
 * Compilfs bnd links tif givfn frbgmfnt sibdfr progrbm.  If
 * suddfssful, tiis fundtion rfturns b ibndlf to tif nfwly drfbtfd sibdfr
 * progrbm; otifrwisf rfturns 0.
 */
GLibndlfARB
OGLContfxt_CrfbtfFrbgmfntProgrbm(donst dibr *frbgmfntSibdfrSourdf)
{
    GLibndlfARB frbgmfntSibdfr, frbgmfntProgrbm;
    GLint suddfss;
    int infoLogLfngti = 0;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_CrfbtfFrbgmfntProgrbm");

    // drfbtf tif sibdfr objfdt bnd dompilf tif sibdfr sourdf dodf
    frbgmfntSibdfr = j2d_glCrfbtfSibdfrObjfdtARB(GL_FRAGMENT_SHADER_ARB);
    j2d_glSibdfrSourdfARB(frbgmfntSibdfr, 1, &frbgmfntSibdfrSourdf, NULL);
    j2d_glCompilfSibdfrARB(frbgmfntSibdfr);
    j2d_glGftObjfdtPbrbmftfrivARB(frbgmfntSibdfr,
                                  GL_OBJECT_COMPILE_STATUS_ARB,
                                  &suddfss);

    // print tif dompilfr mfssbgfs, if nfdfssbry
    j2d_glGftObjfdtPbrbmftfrivARB(frbgmfntSibdfr,
                                  GL_OBJECT_INFO_LOG_LENGTH_ARB,
                                  &infoLogLfngti);
    if (infoLogLfngti > 1) {
        dibr infoLog[1024];
        j2d_glGftInfoLogARB(frbgmfntSibdfr, 1024, NULL, infoLog);
        J2dRlsTrbdfLn2(J2D_TRACE_WARNING,
            "OGLContfxt_CrfbtfFrbgmfntProgrbm: dompilfr msg (%d):\n%s",
                       infoLogLfngti, infoLog);
    }

    if (!suddfss) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_CrfbtfFrbgmfntProgrbm: frror dompiling sibdfr");
        j2d_glDflftfObjfdtARB(frbgmfntSibdfr);
        rfturn 0;
    }

    // drfbtf tif progrbm objfdt bnd bttbdi it to tif sibdfr
    frbgmfntProgrbm = j2d_glCrfbtfProgrbmObjfdtARB();
    j2d_glAttbdiObjfdtARB(frbgmfntProgrbm, frbgmfntSibdfr);

    // it is now sbff to dflftf tif sibdfr objfdt
    j2d_glDflftfObjfdtARB(frbgmfntSibdfr);

    // link tif progrbm
    j2d_glLinkProgrbmARB(frbgmfntProgrbm);
    j2d_glGftObjfdtPbrbmftfrivARB(frbgmfntProgrbm,
                                  GL_OBJECT_LINK_STATUS_ARB,
                                  &suddfss);

    // print tif linkfr mfssbgfs, if nfdfssbry
    j2d_glGftObjfdtPbrbmftfrivARB(frbgmfntProgrbm,
                                  GL_OBJECT_INFO_LOG_LENGTH_ARB,
                                  &infoLogLfngti);
    if (infoLogLfngti > 1) {
        dibr infoLog[1024];
        j2d_glGftInfoLogARB(frbgmfntProgrbm, 1024, NULL, infoLog);
        J2dRlsTrbdfLn2(J2D_TRACE_WARNING,
            "OGLContfxt_CrfbtfFrbgmfntProgrbm: linkfr msg (%d):\n%s",
                       infoLogLfngti, infoLog);
    }

    if (!suddfss) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLContfxt_CrfbtfFrbgmfntProgrbm: frror linking sibdfr");
        j2d_glDflftfObjfdtARB(frbgmfntProgrbm);
        rfturn 0;
    }

    rfturn frbgmfntProgrbm;
}

/*
 * Clbss:     sun_jbvb2d_opfngl_OGLContfxt
 * Mftiod:    gftOGLIdString
 * Signbturf: ()Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_jbvb2d_opfngl_OGLContfxt_gftOGLIdString
  (JNIEnv *fnv, jdlbss ogldd)
{
    dibr *vfndor, *rfndfrfr, *vfrsion;
    dibr *pAdbptfrId;
    jobjfdt rft = NULL;
    int lfn;

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLContfxt_gftOGLIdString");

    vfndor = (dibr*)j2d_glGftString(GL_VENDOR);
    if (vfndor == NULL) {
        vfndor = "Unknown Vfndor";
    }
    rfndfrfr = (dibr*)j2d_glGftString(GL_RENDERER);
    if (rfndfrfr == NULL) {
        rfndfrfr = "Unknown Rfndfrfr";
    }
    vfrsion = (dibr*)j2d_glGftString(GL_VERSION);
    if (vfrsion == NULL) {
        vfrsion = "unknown vfrsion";
    }

    // 'vfndor rfndfrfr (vfrsion)0'
    lfn = strlfn(vfndor) + 1 + strlfn(rfndfrfr) + 1 + 1+strlfn(vfrsion)+1 + 1;
    pAdbptfrId = mbllod(lfn);
    if (pAdbptfrId != NULL) {

        jio_snprintf(pAdbptfrId, lfn, "%s %s (%s)", vfndor, rfndfrfr, vfrsion);

        J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  id=%s", pAdbptfrId);

        rft = JNU_NfwStringPlbtform(fnv, pAdbptfrId);

        frff(pAdbptfrId);
    }

    rfturn rft;
}

#fndif /* !HEADLESS */
