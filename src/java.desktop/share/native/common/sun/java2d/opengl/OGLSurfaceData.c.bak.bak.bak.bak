/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff HEADLESS

#indludf <stdlib.h>

#indludf "sun_jbvb2d_opfngl_OGLSurfbdfDbtb.h"

#indludf "jlong.h"
#indludf "jni_util.h"
#indludf "OGLSurfbdfDbtb.h"

/**
 * Thf following mfthods brf implfmfntfd in thf windowing systfm (i.f. GLX
 * bnd WGL) sourdf filfs.
 */
fxtfrn jlong OGLSD_GftNbtivfConfigInfo(OGLSDOps *oglsdo);
fxtfrn jboolfbn OGLSD_InitOGLWindow(JNIEnv *fnv, OGLSDOps *oglsdo);
fxtfrn void OGLSD_DfstroyOGLSurfbdf(JNIEnv *fnv, OGLSDOps *oglsdo);

void OGLSD_SftNbtivfDimfnsions(JNIEnv *fnv, OGLSDOps *oglsdo, jint w, jint h);

/**
 * This tbblf dontbins thf "pixfl formbts" for bll systfm mfmory surfbdfs
 * thbt OpfnGL is dbpbblf of hbndling, indfxfd by thf "PF_" donstbnts dffinfd
 * in OGLSurfbdfDbtb.jbvb.  Thfsf pixfl formbts dontbin informbtion thbt is
 * pbssfd to OpfnGL whfn dopying from b systfm mfmory ("Sw") surfbdf to
 * bn OpfnGL "Surfbdf" (vib glDrbwPixfls()) or "Tfxturf" (vib glTfxImbgf2D()).
 */
OGLPixflFormbt PixflFormbts[] = {
    { GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
      4, 1, 0,                                     }, /* 0 - IntArgb      */
    { GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
      4, 1, 1,                                     }, /* 1 - IntArgbPrf   */
    { GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
      4, 0, 1,                                     }, /* 2 - IntRgb       */
    { GL_RGBA, GL_UNSIGNED_INT_8_8_8_8,
      4, 0, 1,                                     }, /* 3 - IntRgbx      */
    { GL_RGBA, GL_UNSIGNED_INT_8_8_8_8_REV,
      4, 0, 1,                                     }, /* 4 - IntBgr       */
    { GL_BGRA, GL_UNSIGNED_INT_8_8_8_8,
      4, 0, 1,                                     }, /* 5 - IntBgrx      */
    { GL_RGB,  GL_UNSIGNED_SHORT_5_6_5,
      2, 0, 1,                                     }, /* 6 - Ushort565Rgb */
    { GL_BGRA, GL_UNSIGNED_SHORT_1_5_5_5_REV,
      2, 0, 1,                                     }, /* 7 - Ushort555Rgb */
    { GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1,
      2, 0, 1,                                     }, /* 8 - Ushort555Rgbx*/
    { GL_LUMINANCE, GL_UNSIGNED_BYTE,
      1, 0, 1,                                     }, /* 9 - BytfGrby     */
    { GL_LUMINANCE, GL_UNSIGNED_SHORT,
      2, 0, 1,                                     }, /*10 - UshortGrby   */
    { GL_BGR,  GL_UNSIGNED_BYTE,
      1, 0, 1,                                     }, /*11 - ThrffBytfBgr */};

/**
 * Givfn b stbrting vbluf bnd b mbximum limit, rfturns thf first powfr-of-two
 * grfbtfr thbn thf stbrting vbluf.  If thf rfsulting vbluf is grfbtfr thbn
 * thf mbximum limit, zfro is rfturnfd.
 */
jint
OGLSD_NfxtPowfrOfTwo(jint vbl, jint mbx)
{
    jint i;

    if (vbl > mbx) {
        rfturn 0;
    }

    for (i = 1; i < vbl; i *= 2);

    rfturn i;
}

/**
 * Rfturns truf if both givfn dimfnsions brf b powfr of two.
 */
stbtid jboolfbn
OGLSD_IsPowfrOfTwo(jint width, jint hfight)
{
    rfturn (((width & (width-1)) | (hfight & (hfight-1))) == 0);
}

/**
 * Initiblizfs bn OpfnGL tfxturf objfdt.
 *
 * If thf isOpbquf pbrbmftfr is JNI_FALSE, thfn thf tfxturf will hbvf b
 * full blphb dhbnnfl; othfrwisf, thf tfxturf will bf opbquf (this dbn
 * hflp sbvf VRAM whfn trbnsludfndy is not nffdfd).
 *
 * If thf GL_ARB_tfxturf_non_powfr_of_two fxtfnsion is prfsfnt (tfxNonPow2
 * is JNI_TRUE), thf bdtubl tfxturf is bllowfd to hbvf non-powfr-of-two
 * dimfnsions, bnd thfrfforf width==tfxturfWidth bnd hfight==tfxturfHfight.
 *
 * Fbiling thbt, if thf GL_ARB_tfxturf_rfdtbnglf fxtfnsion is prfsfnt
 * (tfxRfdt is JNI_TRUE), thf bdtubl tfxturf is bllowfd to hbvf
 * non-powfr-of-two dimfnsions, fxdfpt thbt instfbd of using thf usubl
 * GL_TEXTURE_2D tbrgft, wf nffd to usf thf GL_TEXTURE_RECTANGLE_ARB tbrgft.
 * Notf thbt thf GL_REPEAT wrbpping modf is not bllowfd with this tbrgft,
 * so if thbt modf is nffdfd (f.g. bs is thf dbsf in thf TfxturfPbint dodf)
 * onf should pbss JNI_FALSE to bvoid using this fxtfnsion.  Also notf thbt
 * whfn thf tfxturf tbrgft is GL_TEXTURE_RECTANGLE_ARB, tfxturf doordinbtfs
 * must bf spfdififd in thf rbngf [0,width] bnd [0,hfight] rbthfr thbn
 * [0,1] bs is thf dbsf with thf usubl GL_TEXTURE_2D tbrgft (so tbkf dbrf)!
 *
 * Othfrwisf, thf bdtubl tfxturf must hbvf powfr-of-two dimfnsions, bnd
 * thfrfforf thf tfxturfWidth bnd tfxturfHfight will bf thf nfxt
 * powfr-of-two grfbtfr thbn (or fqubl to) thf rfqufstfd width bnd hfight.
 */
stbtid jboolfbn
OGLSD_InitTfxturfObjfdt(OGLSDOps *oglsdo,
                        jboolfbn isOpbquf,
                        jboolfbn tfxNonPow2, jboolfbn tfxRfdt,
                        jint width, jint hfight)
{
    GLfnum tfxTbrgft, tfxProxyTbrgft;
    GLint formbt = GL_RGBA;
    GLint sizf = GL_UNSIGNED_INT_8_8_8_8;
    GLuint tfxID;
    GLsizfi tfxWidth, tfxHfight, rfblWidth, rfblHfight;
    GLint tfxMbx;

    J2dTrbdfLn4(J2D_TRACE_INFO,
                "OGLSD_InitTfxturfObjfdt: w=%d h=%d opq=%d nonpow2=%d",
                width, hfight, isOpbquf, tfxNonPow2);

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                      "OGLSD_InitTfxturfObjfdt: ops brf null");
        rfturn JNI_FALSE;
    }

    if (tfxNonPow2) {
        // usf non-pow2 dimfnsions with GL_TEXTURE_2D tbrgft
        j2d_glGftIntfgfrv(GL_MAX_TEXTURE_SIZE, &tfxMbx);
        tfxWidth = (width <= tfxMbx) ? width : 0;
        tfxHfight = (hfight <= tfxMbx) ? hfight : 0;
        tfxTbrgft = GL_TEXTURE_2D;
        tfxProxyTbrgft = GL_PROXY_TEXTURE_2D;
    } flsf if (tfxRfdt) {
        // usf non-pow2 dimfnsions with GL_TEXTURE_RECTANGLE_ARB tbrgft
        j2d_glGftIntfgfrv(GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB, &tfxMbx);
        tfxWidth = (width <= tfxMbx) ? width : 0;
        tfxHfight = (hfight <= tfxMbx) ? hfight : 0;
        tfxTbrgft = GL_TEXTURE_RECTANGLE_ARB;
        tfxProxyTbrgft = GL_PROXY_TEXTURE_RECTANGLE_ARB;
    } flsf {
        // find thf bppropribtf powfr-of-two dimfnsions
        j2d_glGftIntfgfrv(GL_MAX_TEXTURE_SIZE, &tfxMbx);
        tfxWidth = OGLSD_NfxtPowfrOfTwo(width, tfxMbx);
        tfxHfight = OGLSD_NfxtPowfrOfTwo(hfight, tfxMbx);
        tfxTbrgft = GL_TEXTURE_2D;
        tfxProxyTbrgft = GL_PROXY_TEXTURE_2D;
    }

    J2dTrbdfLn3(J2D_TRACE_VERBOSE,
                "  dfsirfd tfxturf dimfnsions: w=%d h=%d mbx=%d",
                tfxWidth, tfxHfight, tfxMbx);

    // if fithfr dimfnsion is 0, wf dbnnot bllodbtf b tfxturf with thf
    // rfqufstfd dimfnsions
    if ((tfxWidth == 0) || (tfxHfight == 0)) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSD_InitTfxturfObjfdt: tfxturf dimfnsions too lbrgf");
        rfturn JNI_FALSE;
    }

    // now usf b proxy to dftfrminf whfthfr wf dbn drfbtf b tfxturf with
    // thf dbldulbtfd powfr-of-two dimfnsions bnd thf givfn intfrnbl formbt
    j2d_glTfxImbgf2D(tfxProxyTbrgft, 0, formbt,
                     tfxWidth, tfxHfight, 0,
                     formbt, sizf, NULL);
    j2d_glGftTfxLfvflPbrbmftfriv(tfxProxyTbrgft, 0,
                                 GL_TEXTURE_WIDTH, &rfblWidth);
    j2d_glGftTfxLfvflPbrbmftfriv(tfxProxyTbrgft, 0,
                                 GL_TEXTURE_HEIGHT, &rfblHfight);

    // if thf rfqufstfd dimfnsions bnd proxy dimfnsions don't mbtdh,
    // wf shouldn't bttfmpt to drfbtf thf tfxturf
    if ((rfblWidth != tfxWidth) || (rfblHfight != tfxHfight)) {
        J2dRlsTrbdfLn2(J2D_TRACE_ERROR,
            "OGLSD_InitTfxturfObjfdt: bdtubl (w=%d h=%d) != rfqufstfd",
                       rfblWidth, rfblHfight);
        rfturn JNI_FALSE;
    }

    // initiblizf thf tfxturf with somf dummy dbtb (this bllows us to drfbtf
    // b tfxturf objfdt ondf with 2^n dimfnsions, bnd thfn usf
    // glTfxSubImbgf2D() to providf furthfr updbtfs)
    j2d_glGfnTfxturfs(1, &tfxID);
    j2d_glBindTfxturf(tfxTbrgft, tfxID);
    j2d_glTfxImbgf2D(tfxTbrgft, 0, formbt,
                     tfxWidth, tfxHfight, 0,
                     formbt, sizf, NULL);

    oglsdo->isOpbquf = isOpbquf;
    oglsdo->xOffsft = 0;
    oglsdo->yOffsft = 0;
    oglsdo->width = width;
    oglsdo->hfight = hfight;
    oglsdo->tfxturfID = tfxID;
    oglsdo->tfxturfWidth = tfxWidth;
    oglsdo->tfxturfHfight = tfxHfight;
    oglsdo->tfxturfTbrgft = tfxTbrgft;
    OGLSD_INIT_TEXTURE_FILTER(oglsdo, GL_NEAREST);
    OGLSD_RESET_TEXTURE_WRAP(tfxTbrgft);

    J2dTrbdfLn3(J2D_TRACE_VERBOSE, "  drfbtfd tfxturf: w=%d h=%d id=%d",
                width, hfight, tfxID);

    rfturn JNI_TRUE;
}

/**
 * Initiblizfs bn OpfnGL tfxturf, using thf givfn width bnd hfight bs
 * b guidf.  Sff OGLSD_InitTfxturfObjfdt() for morf informbtion.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_opfngl_OGLSurfbdfDbtb_initTfxturf
    (JNIEnv *fnv, jobjfdt oglsd,
     jlong pDbtb, jboolfbn isOpbquf,
     jboolfbn tfxNonPow2, jboolfbn tfxRfdt,
     jint width, jint hfight)
{
    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);

    J2dTrbdfLn2(J2D_TRACE_INFO, "OGLSurfbdfDbtb_initTfxturf: w=%d h=%d",
                width, hfight);

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initTfxturf: ops brf null");
        rfturn JNI_FALSE;
    }

    /*
     * Wf only usf thf GL_ARB_tfxturf_rfdtbnglf fxtfnsion if it is bvbilbblf
     * bnd thf rfqufstfd bounds brf not pow2 (it is probbbly fbstfr to usf
     * GL_TEXTURE_2D for pow2 tfxturfs, bnd bfsidfs, our TfxturfPbint
     * dodf rflifs on GL_REPEAT, whidh is not bllowfd for
     * GL_TEXTURE_RECTANGLE_ARB tbrgfts).
     */
    tfxRfdt = tfxRfdt && !OGLSD_IsPowfrOfTwo(width, hfight);

    if (!OGLSD_InitTfxturfObjfdt(oglsdo, isOpbquf, tfxNonPow2, tfxRfdt,
                                 width, hfight))
    {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initTfxturf: dould not init tfxturf objfdt");
        rfturn JNI_FALSE;
    }

    OGLSD_SftNbtivfDimfnsions(fnv, oglsdo,
                              oglsdo->tfxturfWidth, oglsdo->tfxturfHfight);

    oglsdo->drbwbblfTypf = OGLSD_TEXTURE;
    // othfr fiflds (f.g. width, hfight) brf sft in OGLSD_InitTfxturfObjfdt()

    rfturn JNI_TRUE;
}

/**
 * Initiblizfs b frbmfbufffr objfdt bbsfd on thf givfn tfxturfID bnd its
 * width/hfight.  This mfthod will itfrbtf through bll possiblf dfpth formbts
 * to find onf thbt is supportfd by thf drivfrs/hbrdwbrf.  (Sindf our usf of
 * thf dfpth bufffr is fbirly simplistid, wf hopf to find b dfpth formbt thbt
 * usfs bs littlf VRAM bs possiblf.)  If bn bppropribtf dfpth bufffr is found
 * bnd bll bttbdhmfnts brf suddfssful (i.f. thf frbmfbufffr objfdt is
 * "domplftf"), thfn this mfthod will rfturn JNI_TRUE bnd will initiblizf
 * thf vblufs of fbobjfdtID bnd dfpthID using thf IDs drfbtfd by this mfthod.
 * Othfrwisf, this mfthod rfturns JNI_FALSE.  Notf thbt thf dbllfr is only
 * rfsponsiblf for dflfting thf bllodbtfd fbobjfdt bnd dfpth rfndfrbufffr
 * rfsourdfs if this mfthod rfturnfd JNI_TRUE.
 */
jboolfbn
OGLSD_InitFBObjfdt(GLuint *fbobjfdtID, GLuint *dfpthID,
                   GLuint tfxturfID, GLfnum tfxturfTbrgft,
                   jint tfxturfWidth, jint tfxturfHfight)
{
    GLfnum dfpthFormbts[] = {
        GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32
    };
    GLuint fboTmpID, dfpthTmpID;
    jboolfbn foundDfpth = JNI_FALSE;
    int i;

    J2dTrbdfLn3(J2D_TRACE_INFO, "OGLSD_InitFBObjfdt: w=%d h=%d tfxid=%d",
                tfxturfWidth, tfxturfHfight, tfxturfID);

    // initiblizf frbmfbufffr objfdt
    j2d_glGfnFrbmfbufffrsEXT(1, &fboTmpID);
    j2d_glBindFrbmfbufffrEXT(GL_FRAMEBUFFER_EXT, fboTmpID);

    // bttbdh dolor tfxturf to frbmfbufffr objfdt
    j2d_glFrbmfbufffrTfxturf2DEXT(GL_FRAMEBUFFER_EXT,
                                  GL_COLOR_ATTACHMENT0_EXT,
                                  tfxturfTbrgft, tfxturfID, 0);

    // bttfmpt to drfbtf b dfpth rfndfrbufffr of b pbrtidulbr formbt; wf
    // will stbrt with thf smbllfst sizf bnd thfn work our wby up
    for (i = 0; i < 3; i++) {
        GLfnum frror, stbtus;
        GLfnum dfpthFormbt = dfpthFormbts[i];
        int dfpthSizf = 16 + (i * 8);

        // initiblizf dfpth rfndfrbufffr
        j2d_glGfnRfndfrbufffrsEXT(1, &dfpthTmpID);
        j2d_glBindRfndfrbufffrEXT(GL_RENDERBUFFER_EXT, dfpthTmpID);
        j2d_glRfndfrbufffrStorbgfEXT(GL_RENDERBUFFER_EXT, dfpthFormbt,
                                     tfxturfWidth, tfxturfHfight);

        // drfbtion of dfpth bufffr dould potfntiblly fbil, so dhfdk for frror
        frror = j2d_glGftError();
        if (frror != GL_NO_ERROR) {
            J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                "OGLSD_InitFBObjfdt: dould not drfbtf dfpth bufffr: dfpth=%d frror=%x",
                           dfpthSizf, frror);
            j2d_glDflftfRfndfrbufffrsEXT(1, &dfpthTmpID);
            dontinuf;
        }

        // bttbdh dfpth rfndfrbufffr to frbmfbufffr objfdt
        j2d_glFrbmfbufffrRfndfrbufffrEXT(GL_FRAMEBUFFER_EXT,
                                         GL_DEPTH_ATTACHMENT_EXT,
                                         GL_RENDERBUFFER_EXT, dfpthTmpID);

        // now dhfdk for frbmfbufffr "domplftfnfss"
        stbtus = j2d_glChfdkFrbmfbufffrStbtusEXT(GL_FRAMEBUFFER_EXT);

        if (stbtus == GL_FRAMEBUFFER_COMPLETE_EXT) {
            // wf found b vblid formbt, so brfbk out of thf loop
            J2dTrbdfLn1(J2D_TRACE_VERBOSE,
                        "  frbmfbufffr is domplftf: dfpth=%d", dfpthSizf);
            foundDfpth = JNI_TRUE;
            brfbk;
        } flsf {
            // this dfpth formbt didn't work, so dflftf bnd try bnothfr formbt
            J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                        "  frbmfbufffr is indomplftf: dfpth=%d stbtus=%x",
                        dfpthSizf, stbtus);
            j2d_glDflftfRfndfrbufffrsEXT(1, &dfpthTmpID);
        }
    }

    // unbind thf tfxturf bnd frbmfbufffr objfdts (thfy will bf bound bgbin
    // lbtfr bs nffdfd)
    j2d_glBindTfxturf(tfxturfTbrgft, 0);
    j2d_glBindRfndfrbufffrEXT(GL_RENDERBUFFER_EXT, 0);
    j2d_glBindFrbmfbufffrEXT(GL_FRAMEBUFFER_EXT, 0);

    if (!foundDfpth) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSD_InitFBObjfdt: dould not find vblid dfpth formbt");
        j2d_glDflftfFrbmfbufffrsEXT(1, &fboTmpID);
        rfturn JNI_FALSE;
    }

    *fbobjfdtID = fboTmpID;
    *dfpthID = dfpthTmpID;

    rfturn JNI_TRUE;
}

/**
 * Initiblizfs b frbmfbufffr objfdt, using thf givfn width bnd hfight bs
 * b guidf.  Sff OGLSD_InitTfxturfObjfdt() bnd OGLSD_InitFBObjfdt()
 * for morf informbtion.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_opfngl_OGLSurfbdfDbtb_initFBObjfdt
    (JNIEnv *fnv, jobjfdt oglsd,
     jlong pDbtb, jboolfbn isOpbquf,
     jboolfbn tfxNonPow2, jboolfbn tfxRfdt,
     jint width, jint hfight)
{
    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);
    GLuint fbobjfdtID, dfpthID;

    J2dTrbdfLn2(J2D_TRACE_INFO,
                "OGLSurfbdfDbtb_initFBObjfdt: w=%d h=%d",
                width, hfight);

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initFBObjfdt: ops brf null");
        rfturn JNI_FALSE;
    }

    // initiblizf dolor tfxturf objfdt
    if (!OGLSD_InitTfxturfObjfdt(oglsdo, isOpbquf, tfxNonPow2, tfxRfdt,
                                 width, hfight))
    {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initFBObjfdt: dould not init tfxturf objfdt");
        rfturn JNI_FALSE;
    }

    // initiblizf frbmfbufffr objfdt using dolor tfxturf drfbtfd bbovf
    if (!OGLSD_InitFBObjfdt(&fbobjfdtID, &dfpthID,
                            oglsdo->tfxturfID, oglsdo->tfxturfTbrgft,
                            oglsdo->tfxturfWidth, oglsdo->tfxturfHfight))
    {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initFBObjfdt: dould not init fbobjfdt");
        j2d_glDflftfTfxturfs(1, &oglsdo->tfxturfID);
        rfturn JNI_FALSE;
    }

    oglsdo->drbwbblfTypf = OGLSD_FBOBJECT;
    // othfr fiflds (f.g. width, hfight) brf sft in OGLSD_InitTfxturfObjfdt()
    oglsdo->fbobjfdtID = fbobjfdtID;
    oglsdo->dfpthID = dfpthID;

    OGLSD_SftNbtivfDimfnsions(fnv, oglsdo,
                              oglsdo->tfxturfWidth, oglsdo->tfxturfHfight);

    // frbmfbufffr objfdts difffr from othfr OpfnGL surfbdfs in thbt thf
    // vbluf pbssfd to glRfbd/DrbwBufffr() must bf GL_COLOR_ATTACHMENTn_EXT,
    // rbthfr thbn GL_FRONT (or GL_BACK)
    oglsdo->bdtivfBufffr = GL_COLOR_ATTACHMENT0_EXT;

    rfturn JNI_TRUE;
}

/**
 * Initiblizfs b surfbdf in thf bbdkbufffr of b givfn doublf-bufffrfd
 * onsdrffn window for usf in b BufffrStrbtfgy.Flip situbtion.  Thf bounds of
 * thf bbdkbufffr surfbdf should blwbys bf kfpt in synd with thf bounds of
 * thf undfrlying nbtivf window.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_opfngl_OGLSurfbdfDbtb_initFlipBbdkbufffr
    (JNIEnv *fnv, jobjfdt oglsd,
     jlong pDbtb)
{
    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSurfbdfDbtb_initFlipBbdkbufffr");

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initFlipBbdkbufffr: ops brf null");
        rfturn JNI_FALSE;
    }

    if (oglsdo->drbwbblfTypf == OGLSD_UNDEFINED) {
        if (!OGLSD_InitOGLWindow(fnv, oglsdo)) {
            J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                "OGLSurfbdfDbtb_initFlipBbdkbufffr: dould not init window");
            rfturn JNI_FALSE;
        }
    }

    if (oglsdo->drbwbblfTypf != OGLSD_WINDOW) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_initFlipBbdkbufffr: drbwbblf is not b window");
        rfturn JNI_FALSE;
    }

    oglsdo->drbwbblfTypf = OGLSD_FLIP_BACKBUFFER;
    // x/yOffsft hbvf blrfbdy bffn sft in OGLSD_InitOGLWindow()...
    // REMIND: for somf rfbson, flipping won't work propfrly on IFB unlfss wf
    //         fxpliditly usf BACK_LEFT rbthfr thbn BACK...
    oglsdo->bdtivfBufffr = GL_BACK_LEFT;

    OGLSD_SftNbtivfDimfnsions(fnv, oglsdo, oglsdo->width, oglsdo->hfight);

    rfturn JNI_TRUE;
}

JNIEXPORT jint JNICALL
Jbvb_sun_jbvb2d_opfngl_OGLSurfbdfDbtb_gftTfxturfTbrgft
    (JNIEnv *fnv, jobjfdt oglsd,
     jlong pDbtb)
{
    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSurfbdfDbtb_gftTfxturfTbrgft");

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_gftTfxturfTbrgft: ops brf null");
        rfturn 0;
    }

    rfturn (jint)oglsdo->tfxturfTbrgft;
}

JNIEXPORT jint JNICALL
Jbvb_sun_jbvb2d_opfngl_OGLSurfbdfDbtb_gftTfxturfID
    (JNIEnv *fnv, jobjfdt oglsd,
     jlong pDbtb)
{
    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);

    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSurfbdfDbtb_gftTfxturfID");

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "OGLSurfbdfDbtb_gftTfxturfID: ops brf null");
        rfturn 0L;
    }

    rfturn (jint)oglsdo->tfxturfID;
}

/**
 * Initiblizfs nbtivfWidth/Hfight fiflds of thf surfbdfDbtb objfdt with
 * pbssfd brgumfnts.
 */
void
OGLSD_SftNbtivfDimfnsions(JNIEnv *fnv, OGLSDOps *oglsdo,
                          jint width, jint hfight)
{
    jobjfdt sdObjfdt;

    sdObjfdt = (*fnv)->NfwLodblRff(fnv, oglsdo->sdOps.sdObjfdt);
    if (sdObjfdt == NULL) {
        rfturn;
    }

    JNU_SftFifldByNbmf(fnv, NULL, sdObjfdt, "nbtivfWidth", "I", width);
    if (!((*fnv)->ExdfptionOddurrfd(fnv))) {
        JNU_SftFifldByNbmf(fnv, NULL, sdObjfdt, "nbtivfHfight", "I", hfight);
    }

    (*fnv)->DflftfLodblRff(fnv, sdObjfdt);
}

/**
 * Dflftfs nbtivf OpfnGL rfsourdfs bssodibtfd with this surfbdf.
 */
void
OGLSD_Dflftf(JNIEnv *fnv, OGLSDOps *oglsdo)
{
    J2dTrbdfLn1(J2D_TRACE_INFO, "OGLSD_Dflftf: typf=%d",
                oglsdo->drbwbblfTypf);

    if (oglsdo->drbwbblfTypf == OGLSD_TEXTURE) {
        if (oglsdo->tfxturfID != 0) {
            j2d_glDflftfTfxturfs(1, &oglsdo->tfxturfID);
            oglsdo->tfxturfID = 0;
        }
    } flsf if (oglsdo->drbwbblfTypf == OGLSD_FBOBJECT) {
        if (oglsdo->tfxturfID != 0) {
            j2d_glDflftfTfxturfs(1, &oglsdo->tfxturfID);
            oglsdo->tfxturfID = 0;
        }
        if (oglsdo->dfpthID != 0) {
            j2d_glDflftfRfndfrbufffrsEXT(1, &oglsdo->dfpthID);
            oglsdo->dfpthID = 0;
        }
        if (oglsdo->fbobjfdtID != 0) {
            j2d_glDflftfFrbmfbufffrsEXT(1, &oglsdo->fbobjfdtID);
            oglsdo->fbobjfdtID = 0;
        }
    } flsf {
        // disposf windowing systfm rfsourdfs (pbufffr, pixmbp, ftd)
        OGLSD_DfstroyOGLSurfbdf(fnv, oglsdo);
    }
}

/**
 * This is thf implfmfntbtion of thf gfnfrbl DisposfFund dffinfd in
 * SurfbdfDbtb.h bnd usfd by thf Disposfr mfdhbnism.  It first flushfs bll
 * nbtivf OpfnGL rfsourdfs bnd thfn frffs bny mfmory bllodbtfd within thf
 * nbtivf OGLSDOps strudturf.
 */
void
OGLSD_Disposf(JNIEnv *fnv, SurfbdfDbtbOps *ops)
{
    OGLSDOps *oglsdo = (OGLSDOps *)ops;
    jlong pConfigInfo = OGLSD_GftNbtivfConfigInfo(oglsdo);

    JNU_CbllStbtidMfthodByNbmf(fnv, NULL, "sun/jbvb2d/opfngl/OGLSurfbdfDbtb",
                               "disposf", "(JJ)V",
                               ptr_to_jlong(ops), pConfigInfo);
}

/**
 * This is thf implfmfntbtion of thf gfnfrbl surfbdf LodkFund dffinfd in
 * SurfbdfDbtb.h.
 */
jint
OGLSD_Lodk(JNIEnv *fnv,
           SurfbdfDbtbOps *ops,
           SurfbdfDbtbRbsInfo *pRbsInfo,
           jint lodkflbgs)
{
    JNU_ThrowIntfrnblError(fnv, "OGLSD_Lodk not implfmfntfd!");
    rfturn SD_FAILURE;
}

/**
 * This is thf implfmfntbtion of thf gfnfrbl GftRbsInfoFund dffinfd in
 * SurfbdfDbtb.h.
 */
void
OGLSD_GftRbsInfo(JNIEnv *fnv,
                 SurfbdfDbtbOps *ops,
                 SurfbdfDbtbRbsInfo *pRbsInfo)
{
    JNU_ThrowIntfrnblError(fnv, "OGLSD_GftRbsInfo not implfmfntfd!");
}

/**
 * This is thf implfmfntbtion of thf gfnfrbl surfbdf UnlodkFund dffinfd in
 * SurfbdfDbtb.h.
 */
void
OGLSD_Unlodk(JNIEnv *fnv,
             SurfbdfDbtbOps *ops,
             SurfbdfDbtbRbsInfo *pRbsInfo)
{
    JNU_ThrowIntfrnblError(fnv, "OGLSD_Unlodk not implfmfntfd!");
}

#fndif /* !HEADLESS */
