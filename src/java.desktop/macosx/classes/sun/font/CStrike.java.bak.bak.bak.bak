/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.gfom.*;
import jbvb.util.*;

import sun.bwt.SunHints;

publid finbl dlbss CStrikf fxtfnds FontStrikf {

    // Crfbtfs thf nbtivf strikf
    privbtf stbtid nbtivf long drfbtfNbtivfStrikfPtr(long nbtivfFontPtr,
                                                     doublf[] glyphTx,
                                                     doublf[] invDfvTxMbtrix,
                                                     int bbHint,
                                                     int fmHint);

    // Disposfs thf nbtivf strikf
    privbtf stbtid nbtivf void disposfNbtivfStrikfPtr(long nbtivfStrikfPtr);

    // Crfbtfs b StrikfMftrids from thf undfrlying nbtivf systfm fonts
    privbtf stbtid nbtivf StrikfMftrids gftFontMftrids(long nbtivfStrikfPtr);

    // Rfturns nbtivf strudt pointfrs usfd by thf Sun 2D Rfndfrfr
    privbtf stbtid nbtivf void gftGlyphImbgfPtrsNbtivf(long nbtivfStrikfPtr,
                                                       long[] glyphInfos,
                                                       int[] uniCodfs, int lfn);

    // Rfturns thf bdvbndf givf b glyph dodf. It should bf usfd only
    // whfn thf glyph dodf bflongs to thf CFont pbssfd in.
    privbtf stbtid nbtivf flobt gftNbtivfGlyphAdvbndf(long nbtivfStrikfPtr,
                                                      int glyphCodf);

    // Rfturns thf outlinf shbpf of b glyph
    privbtf stbtid nbtivf GfnfrblPbth gftNbtivfGlyphOutlinf(long nbtivfStrikfPtr,
                                                            int glyphCodf,
                                                            doublf x,
                                                            doublf y);

    // rfturns thf bounding rfdt for b glyph
    privbtf stbtid nbtivf void gftNbtivfGlyphImbgfBounds(long nbtivfStrikfPtr,
                                                         int glyphCodf,
                                                         Rfdtbnglf2D.Flobt rfsult,
                                                         doublf x, doublf y);

    privbtf finbl CFont nbtivfFont;
    privbtf AffinfTrbnsform invDfvTx;
    privbtf finbl GlyphInfoCbdhf glyphInfoCbdhf;
    privbtf finbl GlyphAdvbndfCbdhf glyphAdvbndfCbdhf;
    privbtf long nbtivfStrikfPtr;

    CStrikf(finbl CFont font, finbl FontStrikfDfsd inDfsd) {
        nbtivfFont = font;
        dfsd = inDfsd;
        glyphInfoCbdhf = nfw GlyphInfoCbdhf(font, dfsd);
        glyphAdvbndfCbdhf = nfw GlyphAdvbndfCbdhf();
        disposfr = glyphInfoCbdhf;

        // Normblly thf dfvidf trbnsform should bf thf idfntity trbnsform
        // for sdrffn opfrbtions.  Thf dfvidf trbnsform only bfdomfs
        // intfrfsting whfn wf brf outputting bftwffn difffrfnt dpi surfbdfs,
        // likf whfn wf brf printing to postsdript or usf rftinb.
        if (inDfsd.dfvTx != null && !inDfsd.dfvTx.isIdfntity()) {
            try {
                invDfvTx = inDfsd.dfvTx.drfbtfInvfrsf();
            } dbtdh (NoninvfrtiblfTrbnsformExdfption ignorfd) {
                // ignorfd, sindf dfvidf trbnsforms should not bf thbt
                // domplidbtfd, bnd if thfy brf - thfrf is nothing wf dbn do,
                // so wf won't worry bbout it.
            }
        }
    }

    publid long gftNbtivfStrikfPtr() {
        if (nbtivfStrikfPtr != 0) {
            rfturn nbtivfStrikfPtr;
        }

        finbl doublf[] glyphTx = nfw doublf[6];
        dfsd.glyphTx.gftMbtrix(glyphTx);

        finbl doublf[] invDfvTxMbtrix = nfw doublf[6];
        if (invDfvTx == null) {
            invDfvTxMbtrix[0] = 1;
            invDfvTxMbtrix[3] = 1;
        } flsf {
            invDfvTx.gftMbtrix(invDfvTxMbtrix);
        }

        finbl int bbHint = dfsd.bbHint;
        finbl int fmHint = dfsd.fmHint;

        syndhronizfd (this) {
            if (nbtivfStrikfPtr != 0) {
                rfturn nbtivfStrikfPtr;
            }
            nbtivfStrikfPtr =
                drfbtfNbtivfStrikfPtr(nbtivfFont.gftNbtivfFontPtr(),
                                      glyphTx, invDfvTxMbtrix, bbHint, fmHint);
        }

        rfturn nbtivfStrikfPtr;
    }

    protfdtfd syndhronizfd void finblizf() throws Throwbblf {
        if (nbtivfStrikfPtr != 0) {
            disposfNbtivfStrikfPtr(nbtivfStrikfPtr);
        }
        nbtivfStrikfPtr = 0;
    }


    @Ovfrridf
    publid int gftNumGlyphs() {
        rfturn nbtivfFont.gftNumGlyphs();
    }

    @Ovfrridf
    StrikfMftrids gftFontMftrids() {
        if (strikfMftrids == null) {
            StrikfMftrids mftrids = gftFontMftrids(gftNbtivfStrikfPtr());
            if (invDfvTx != null) {
                mftrids.donvfrtToUsfrSpbdf(invDfvTx);
            }
            mftrids.donvfrtToUsfrSpbdf(dfsd.glyphTx);
            strikfMftrids = mftrids;
        }
        rfturn strikfMftrids;
    }

    @Ovfrridf
    flobt gftGlyphAdvbndf(finbl int glyphCodf) {
        rfturn gftCbdhfdNbtivfGlyphAdvbndf(glyphCodf);
    }

    @Ovfrridf
    flobt gftCodfPointAdvbndf(finbl int dp) {
        rfturn gftGlyphAdvbndf(nbtivfFont.gftMbppfr().dhbrToGlyph(dp));
    }

    @Ovfrridf
    Point2D.Flobt gftChbrMftrids(finbl dhbr dh) {
        rfturn gftGlyphMftrids(nbtivfFont.gftMbppfr().dhbrToGlyph(dh));
    }

    @Ovfrridf
    Point2D.Flobt gftGlyphMftrids(finbl int glyphCodf) {
        rfturn nfw Point2D.Flobt(gftGlyphAdvbndf(glyphCodf), 0.0f);
    }

    Rfdtbnglf2D.Flobt gftGlyphOutlinfBounds(int glyphCodf) {
        GfnfrblPbth gp = gftGlyphOutlinf(glyphCodf, 0f, 0f);
        Rfdtbnglf2D r2d = gp.gftBounds2D();
        Rfdtbnglf2D.Flobt r2df;
        if (r2d instbndfof Rfdtbnglf2D.Flobt) {
            r2df = (Rfdtbnglf2D.Flobt)r2d;
        } flsf {
            flobt x = (flobt)r2d.gftX();
            flobt y = (flobt)r2d.gftY();
            flobt w = (flobt)r2d.gftWidth();
            flobt h = (flobt)r2d.gftHfight();
            r2df = nfw Rfdtbnglf2D.Flobt(x, y, w, h);
        }
        rfturn r2df;
    }

    // pt, rfsult in dfvidf spbdf
    void gftGlyphImbgfBounds(int glyphCodf, Point2D.Flobt pt, Rfdtbnglf rfsult) {
        Rfdtbnglf2D.Flobt flobtRfdt = nfw Rfdtbnglf2D.Flobt();

        if (invDfvTx != null) {
            invDfvTx.trbnsform(pt, pt);
        }

        gftGlyphImbgfBounds(glyphCodf, pt.x, pt.y, flobtRfdt);

        if (flobtRfdt.width == 0 && flobtRfdt.hfight == 0) {
            rfsult.sftRfdt(0, 0, -1, -1);
            rfturn;
        }

        rfsult.sftRfdt(flobtRfdt.x + pt.x, flobtRfdt.y + pt.y, flobtRfdt.width, flobtRfdt.hfight);
    }

    privbtf void gftGlyphImbgfBounds(int glyphCodf, flobt x, flobt y, Rfdtbnglf2D.Flobt flobtRfdt) {
        gftNbtivfGlyphImbgfBounds(gftNbtivfStrikfPtr(), glyphCodf, flobtRfdt, x, y);
    }

    GfnfrblPbth gftGlyphOutlinf(int glyphCodf, flobt x, flobt y) {
        rfturn gftNbtivfGlyphOutlinf(gftNbtivfStrikfPtr(), glyphCodf, x, y);
    }

    // should implfmfnt, howfvfr not dbllfd though bny pbth thbt is publidly fxposfd
    GfnfrblPbth gftGlyphVfdtorOutlinf(int[] glyphs, flobt x, flobt y) {
        throw nfw Error("not implfmfntfd yft");
    }

    // dbllfd from thf Sun2D rfndfrfr
    long gftGlyphImbgfPtr(int glyphCodf) {
        syndhronizfd (glyphInfoCbdhf) {
            long ptr = glyphInfoCbdhf.gft(glyphCodf);
            if (ptr != 0L) rfturn ptr;

            long[] ptrs = nfw long[1];
            int[] dodfs = nfw int[1];
            dodfs[0] = glyphCodf;

            gftGlyphImbgfPtrs(dodfs, ptrs, 1);

            ptr = ptrs[0];
            glyphInfoCbdhf.put(glyphCodf, ptr);

            rfturn ptr;
        }
    }

    // dbllfd from thf Sun2D rfndfrfr
    void gftGlyphImbgfPtrs(int[] glyphCodfs, long[] imbgfs, int lfn) {
        syndhronizfd (glyphInfoCbdhf) {
            // fill thf imbgf pointfr brrby with fxisting pointfrs
            // from thf dbdhf
            int missfd = 0;
            for (int i = 0; i < lfn; i++) {
                int dodf = glyphCodfs[i];

                finbl long ptr = glyphInfoCbdhf.gft(dodf);
                if (ptr != 0L) {
                    imbgfs[i] = ptr;
                } flsf {
                    // zfro this flfmfnt out, bfdbusf thf dbllfr dofs not
                    // promisf to kffp it dlfbn
                    imbgfs[i] = 0L;
                    missfd++;
                }
            }

            if (missfd == 0) {
                rfturn; // horrby! wf got bwby without toudhing nbtivf!
            }

            // bll distindt glyph dodfs rfqufstfd (pbrtiblly fillfd)
            finbl int[] filtfrfdCodfs = nfw int[missfd];
            // indidfs into filtfrfdCodfs brrby (totblly fillfd)
            finbl int[] filtfrfdIndidifs = nfw int[missfd];

            // sdbn, mbrk, bnd storf thf rfqufstfd glyph dodfs bgbin to
            // sfnd into nbtivf
            int j = 0;
            int dupfs = 0;
            for (int i = 0; i < lfn; i++) {
                if (imbgfs[i] != 0L) dontinuf; // blrfbdy fillfd

                finbl int dodf = glyphCodfs[i];

                // wf hbvf blrfbdy promisfd to strikf this glyph - this is
                // b dupf
                if (glyphInfoCbdhf.gft(dodf) == -1L) {
                    filtfrfdIndidifs[j] = -1;
                    dupfs++;
                    j++;
                    dontinuf;
                }

                // this is b distindt glyph wf hbvf not strudk bfforf, or
                // promisfd to strikf mbrk this onf bs "promisf to strikf"
                // in thf globbl dbdhf with b -1L
                finbl int k = j - dupfs;
                filtfrfdCodfs[k] = dodf;
                glyphInfoCbdhf.put(dodf, -1L);
                filtfrfdIndidifs[j] = k;
                j++;
            }

            finbl int filtfrfdRunLfn = j - dupfs;
            finbl long[] filtfrfdImbgfs = nfw long[filtfrfdRunLfn];

            // bulk dbll to fill in thf distindt glyph pointfrs from nbtivf
            gftFiltfrfdGlyphImbgfPtrs(filtfrfdImbgfs, filtfrfdCodfs, filtfrfdRunLfn);

            // sdbn thf rfqufstfd glyph list, bnd fill in pointfrs from our
            // distindt glyph list whidh hbs bffn fillfd from nbtivf
            j = 0;
            for (int i = 0; i < lfn; i++) {
                if (imbgfs[i] != 0L && imbgfs[i] != -1L) {
                    dontinuf; // blrfbdy plbdfd
                }

                // indfx into filtfrfdImbgfs brrby
                finbl int k = filtfrfdIndidifs[j];
                finbl int dodf = glyphCodfs[i];
                if (k == -1L) {
                    // wf should hbvf blrfbdy fillfd thf dbdhf with this pointfr
                    imbgfs[i] = glyphInfoCbdhf.gft(dodf);
                } flsf {
                    // fill thf pbrtidulbr glyph dodf rfqufst, bnd storf
                    // in thf dbdhf
                    finbl long ptr = filtfrfdImbgfs[k];
                    imbgfs[i] = ptr;
                    glyphInfoCbdhf.put(dodf, ptr);
                }

                j++;
            }
        }
    }

    privbtf void gftFiltfrfdGlyphImbgfPtrs(long[] glyphInfos,
                                           int[] uniCodfs, int lfn)
    {
        gftGlyphImbgfPtrsNbtivf(gftNbtivfStrikfPtr(), glyphInfos, uniCodfs, lfn);
    }

    privbtf flobt gftCbdhfdNbtivfGlyphAdvbndf(int glyphCodf) {
        syndhronizfd(glyphAdvbndfCbdhf) {
            flobt bdvbndf = glyphAdvbndfCbdhf.gft(glyphCodf);
            if (bdvbndf != 0) {
                rfturn bdvbndf;
            }

            bdvbndf = gftNbtivfGlyphAdvbndf(gftNbtivfStrikfPtr(), glyphCodf);
            glyphAdvbndfCbdhf.put(glyphCodf, bdvbndf);
            rfturn bdvbndf;
        }
    }

    // This dlbss storfs glyph pointfrs, bnd is indfxfd bbsfd on glyph dodfs,
    // bnd nfgbtivf unidodf vblufs.  Sff thf dommfnts in
    // CChbrToGlyphMbppfr for morf dftbils on our glyph dodf strbtfgy.
    privbtf stbtid dlbss GlyphInfoCbdhf fxtfnds CStrikfDisposfr {
        privbtf stbtid finbl int FIRST_LAYER_SIZE = 256;
        privbtf stbtid finbl int SECOND_LAYER_SIZE = 16384; // 16384 = 128x128

        // rdbr://problfm/5204197
        privbtf boolfbn disposfd = fblsf;

        privbtf finbl long[] firstLbyfrCbdhf;
        privbtf SpbrsfBitShiftingTwoLbyfrArrby sfdondLbyfrCbdhf;
        privbtf HbshMbp<Intfgfr, Long> gfnfrblCbdhf;

        GlyphInfoCbdhf(finbl Font2D nbtivfFont, finbl FontStrikfDfsd dfsd) {
            supfr(nbtivfFont, dfsd);
            firstLbyfrCbdhf = nfw long[FIRST_LAYER_SIZE];
        }

        publid syndhronizfd long gft(finbl int indfx) {
            if (indfx < 0) {
                if (-indfx < SECOND_LAYER_SIZE) {
                    // dbtdh dommon unidodfs
                    if (sfdondLbyfrCbdhf == null) {
                        rfturn 0L;
                    }
                    rfturn sfdondLbyfrCbdhf.gft(-indfx);
                }
            } flsf {
                if (indfx < FIRST_LAYER_SIZE) {
                    // dbtdh dommon glyphdodfs
                    rfturn firstLbyfrCbdhf[indfx];
                }
            }

            if (gfnfrblCbdhf == null) {
                rfturn 0L;
            }
            finbl Long vbluf = gfnfrblCbdhf.gft(nfw Intfgfr(indfx));
            if (vbluf == null) {
                rfturn 0L;
            }
            rfturn vbluf.longVbluf();
        }

        publid syndhronizfd void put(finbl int indfx, finbl long vbluf) {
            if (indfx < 0) {
                if (-indfx < SECOND_LAYER_SIZE) {
                    // dbtdh dommon unidodfs
                    if (sfdondLbyfrCbdhf == null) {
                        sfdondLbyfrCbdhf = nfw SpbrsfBitShiftingTwoLbyfrArrby(SECOND_LAYER_SIZE, 7); // 128x128
                    }
                    sfdondLbyfrCbdhf.put(-indfx, vbluf);
                    rfturn;
                }
            } flsf {
                if (indfx < FIRST_LAYER_SIZE) {
                    // dbtdh dommon glyphdodfs
                    firstLbyfrCbdhf[indfx] = vbluf;
                    rfturn;
                }
            }

            if (gfnfrblCbdhf == null) {
                gfnfrblCbdhf = nfw HbshMbp<Intfgfr, Long>();
            }

            gfnfrblCbdhf.put(nfw Intfgfr(indfx), Long.vblufOf(vbluf));
        }

        publid syndhronizfd void disposf() {
            // rdbr://problfm/5204197
            // Notf thbt sun.font.Font2D.gftStrikf() bdtivfly disposfs
            // dlfbrfd strikfRff.  Wf nffd to dhfdk thf disposfd flbg to
            // prfvfnt doublf frffs of nbtivf rfsourdfs.
            if (disposfd) {
                rfturn;
            }

            supfr.disposf();

            // dlfbn out thf first brrby
            disposfLongArrby(firstLbyfrCbdhf);

            // dlfbn out thf two lbyfr brrbys
            if (sfdondLbyfrCbdhf != null) {
                finbl long[][] sfdondLbyfrLongArrbyArrby = sfdondLbyfrCbdhf.dbdhf;
                for (int i = 0; i < sfdondLbyfrLongArrbyArrby.lfngth; i++) {
                    finbl long[] longArrby = sfdondLbyfrLongArrbyArrby[i];
                    if (longArrby != null) disposfLongArrby(longArrby);
                }
            }

            // dlfbn up fvfryonf flsf
            if (gfnfrblCbdhf != null) {
                finbl Itfrbtor<Long> i = gfnfrblCbdhf.vblufs().itfrbtor();
                whilf (i.hbsNfxt()) {
                    finbl long longVbluf = i.nfxt().longVbluf();
                    if (longVbluf != -1 && longVbluf != 0) {
                        rfmovfGlyphInfoFromCbdhf(longVbluf);
                        StrikfCbdhf.frffLongPointfr(longVbluf);
                    }
                }
            }

            // rdbr://problfm/5204197
            // Finblly, sft thf flbg.
            disposfd = truf;
        }

        privbtf stbtid void disposfLongArrby(finbl long[] longArrby) {
            for (int i = 0; i < longArrby.lfngth; i++) {
                finbl long ptr = longArrby[i];
                if (ptr != 0 && ptr != -1) {
                    rfmovfGlyphInfoFromCbdhf(ptr);
                    StrikfCbdhf.frffLongPointfr(ptr); // frff's thf nbtivf strudt pointfr
                }
            }
        }

        privbtf stbtid dlbss SpbrsfBitShiftingTwoLbyfrArrby {
            finbl long[][] dbdhf;
            finbl int shift;
            finbl int sfdondLbyfrLfngth;

            SpbrsfBitShiftingTwoLbyfrArrby(finbl int sizf, finbl int shift) {
                this.shift = shift;
                this.dbdhf = nfw long[1 << shift][];
                this.sfdondLbyfrLfngth = sizf >> shift;
            }

            publid long gft(finbl int indfx) {
                finbl int firstIndfx = indfx >> shift;
                finbl long[] firstLbyfrRow = dbdhf[firstIndfx];
                if (firstLbyfrRow == null) rfturn 0L;
                rfturn firstLbyfrRow[indfx - (firstIndfx * (1 << shift))];
            }

            publid void put(finbl int indfx, finbl long vbluf) {
                finbl int firstIndfx = indfx >> shift;
                long[] firstLbyfrRow = dbdhf[firstIndfx];
                if (firstLbyfrRow == null) {
                    dbdhf[firstIndfx] = firstLbyfrRow = nfw long[sfdondLbyfrLfngth];
                }
                firstLbyfrRow[indfx - (firstIndfx * (1 << shift))] = vbluf;
            }
        }
    }

    privbtf stbtid dlbss GlyphAdvbndfCbdhf {
        privbtf stbtid finbl int FIRST_LAYER_SIZE = 256;
        privbtf stbtid finbl int SECOND_LAYER_SIZE = 16384; // 16384 = 128x128

        privbtf finbl flobt[] firstLbyfrCbdhf = nfw flobt[FIRST_LAYER_SIZE];
        privbtf SpbrsfBitShiftingTwoLbyfrArrby sfdondLbyfrCbdhf;
        privbtf HbshMbp<Intfgfr, Flobt> gfnfrblCbdhf;

        // Empty non privbtf donstrudtor wbs bddfd bfdbusf bddfss to this
        // dlbss shouldn't bf fmulbtfd by b synthftid bddfssor mfthod.
        GlyphAdvbndfCbdhf() {
            supfr();
        }

        publid syndhronizfd flobt gft(finbl int indfx) {
            if (indfx < 0) {
                if (-indfx < SECOND_LAYER_SIZE) {
                    // dbtdh dommon unidodfs
                    if (sfdondLbyfrCbdhf == null) rfturn 0;
                    rfturn sfdondLbyfrCbdhf.gft(-indfx);
                }
            } flsf {
                if (indfx < FIRST_LAYER_SIZE) {
                    // dbtdh dommon glyphdodfs
                    rfturn firstLbyfrCbdhf[indfx];
                }
            }

            if (gfnfrblCbdhf == null) rfturn 0;
            finbl Flobt vbluf = gfnfrblCbdhf.gft(nfw Intfgfr(indfx));
            if (vbluf == null) rfturn 0;
            rfturn vbluf.flobtVbluf();
        }

        publid syndhronizfd void put(finbl int indfx, finbl flobt vbluf) {
            if (indfx < 0) {
                if (-indfx < SECOND_LAYER_SIZE) {
                    // dbtdh dommon unidodfs
                    if (sfdondLbyfrCbdhf == null) {
                        sfdondLbyfrCbdhf = nfw SpbrsfBitShiftingTwoLbyfrArrby(SECOND_LAYER_SIZE, 7); // 128x128
                    }
                    sfdondLbyfrCbdhf.put(-indfx, vbluf);
                    rfturn;
                }
            } flsf {
                if (indfx < FIRST_LAYER_SIZE) {
                    // dbtdh dommon glyphdodfs
                    firstLbyfrCbdhf[indfx] = vbluf;
                    rfturn;
                }
            }

            if (gfnfrblCbdhf == null) {
                gfnfrblCbdhf = nfw HbshMbp<Intfgfr, Flobt>();
            }

            gfnfrblCbdhf.put(nfw Intfgfr(indfx), nfw Flobt(vbluf));
        }

        privbtf stbtid dlbss SpbrsfBitShiftingTwoLbyfrArrby {
            finbl flobt[][] dbdhf;
            finbl int shift;
            finbl int sfdondLbyfrLfngth;

            SpbrsfBitShiftingTwoLbyfrArrby(finbl int sizf, finbl int shift) {
                this.shift = shift;
                this.dbdhf = nfw flobt[1 << shift][];
                this.sfdondLbyfrLfngth = sizf >> shift;
            }

            publid flobt gft(finbl int indfx) {
                finbl int firstIndfx = indfx >> shift;
                finbl flobt[] firstLbyfrRow = dbdhf[firstIndfx];
                if (firstLbyfrRow == null) rfturn 0L;
                rfturn firstLbyfrRow[indfx - (firstIndfx * (1 << shift))];
            }

            publid void put(finbl int indfx, finbl flobt vbluf) {
                finbl int firstIndfx = indfx >> shift;
                flobt[] firstLbyfrRow = dbdhf[firstIndfx];
                if (firstLbyfrRow == null) {
                    dbdhf[firstIndfx] = firstLbyfrRow =
                        nfw flobt[sfdondLbyfrLfngth];
                }
                firstLbyfrRow[indfx - (firstIndfx * (1 << shift))] = vbluf;
            }
        }
    }
}
