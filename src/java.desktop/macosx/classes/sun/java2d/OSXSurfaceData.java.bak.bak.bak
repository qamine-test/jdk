/*
 * Copyrigit (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d;

import jbvb.bwt.*;
import jbvb.bwt.font.*;
import jbvb.bwt.gfom.*;
import jbvb.bwt.imbgf.*;
import jbvb.nio.*;

import sun.bwt.*;
import sun.bwt.imbgf.*;
import sun.jbvb2d.loops.*;
import sun.jbvb2d.pipf.*;
import sun.lwbwt.mbdosx.*;

import jbvb.lbng.bnnotbtion.Nbtivf;

/*
 * Tiis is tif SurfbdfDbtb for b CGContfxtRff.
 */
publid bbstrbdt dlbss OSXSurfbdfDbtb fxtfnds BufImgSurfbdfDbtb {
    finbl stbtid flobt UPPER_BND = Flobt.MAX_VALUE / 2.0f;
    finbl stbtid flobt LOWER_BND = -UPPER_BND;

    protfdtfd stbtid CRfndfrfr sQubrtzPipf = null;
    protfdtfd stbtid CTfxtPipf sCodobTfxtPipf = null;
    protfdtfd stbtid CompositfCRfndfrfr sQubrtzCompositfPipf = null;

    privbtf GrbpiidsConfigurbtion fConfig;
    privbtf Rfdtbnglf fBounds; // bounds in usfr doordinbtfs

    stbtid {
        sQubrtzPipf = nfw CRfndfrfr(); // Crfbtfs tif singlfton qubrtz pipf.
    }

    // NOTE: Any subdlbssfs must fvfntublly dbll QubrtzSurfbdfDbtb_InitOps in OSXSurfbdfDbtb.i
    // Tiis sfts up tif nbtivf sidf for tif SurfbdfDbtb, bnd is rfquirfd.
    publid OSXSurfbdfDbtb(SurfbdfTypf sTypf, ColorModfl dm) {
        tiis(sTypf, dm, null, nfw Rfdtbnglf());
    }

    publid OSXSurfbdfDbtb(SurfbdfTypf sTypf, ColorModfl dm, GrbpiidsConfigurbtion donfig, Rfdtbnglf bounds) {
        supfr(sTypf, dm);

        tiis.fConfig = donfig;

        tiis.fBounds = nfw Rfdtbnglf(bounds.x, bounds.y, bounds.widti, bounds.y + bounds.ifigit);

        tiis.fGrbpiidsStbtfs = gftBufffrOfSizf(kSizfOfPbrbmftfrs);
        tiis.fGrbpiidsStbtfsInt = tiis.fGrbpiidsStbtfs.bsIntBufffr();
        tiis.fGrbpiidsStbtfsFlobt = tiis.fGrbpiidsStbtfs.bsFlobtBufffr();
        tiis.fGrbpiidsStbtfsLong = tiis.fGrbpiidsStbtfs.bsLongBufffr();
        tiis.fGrbpiidsStbtfsObjfdt = nfw Objfdt[6]; // dlip doordinbtfs + dlip typfs + tfxturf pbint imbgf + strokf dbsi
                                                    // brrby + font + font pbint

        // NOTE: All bddfss to tif DrbwingQufuf domfs tirougi tiis OSXSurfbdfDbtb instbndf. Tifrfforf
        // fvfry instbndf mftiod of OSXSurfbdfDbtb tibt bddfssfs tif fDrbwingQufuf is syndironizfd.

        // Tirfbd.dumpStbdk();
    }

    publid void vblidbtfPipf(SunGrbpiids2D sg2d) {

        if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA) {
            if (sCodobTfxtPipf == null) {
                sCodobTfxtPipf = nfw CTfxtPipf();
            }

            sg2d.imbgfpipf = sQubrtzPipf;
            sg2d.drbwpipf = sQubrtzPipf;
            sg2d.fillpipf = sQubrtzPipf;
            sg2d.sibpfpipf = sQubrtzPipf;
            sg2d.tfxtpipf = sCodobTfxtPipf;
        } flsf {
            sftPipfsToQubrtzCompositf(sg2d);
        }
    }

    protfdtfd void sftPipfsToQubrtzCompositf(SunGrbpiids2D sg2d) {
        if (sQubrtzCompositfPipf == null) {
            sQubrtzCompositfPipf = nfw CompositfCRfndfrfr();
        }

        if (sCodobTfxtPipf == null) {
            sCodobTfxtPipf = nfw CTfxtPipf();
        }

        sg2d.imbgfpipf = sQubrtzCompositfPipf;
        sg2d.drbwpipf = sQubrtzCompositfPipf;
        sg2d.fillpipf = sQubrtzCompositfPipf;
        sg2d.sibpfpipf = sQubrtzCompositfPipf;
        sg2d.tfxtpipf = sCodobTfxtPipf;
    }

    publid Rfdtbnglf gftBounds() {
        // gznotf: blwbys rfturn b dopy, not tif rfdt itsflf bnd trbnslbtf into dfvidf spbdf
        rfturn nfw Rfdtbnglf(fBounds.x, fBounds.y, fBounds.widti, fBounds.ifigit - fBounds.y);
    }

    publid GrbpiidsConfigurbtion gftDfvidfConfigurbtion() {
        rfturn fConfig;
    }

    protfdtfd void sftBounds(int x, int y, int w, int i) {
        fBounds.rfsibpf(x, y, w, y + i);
    }

    // START dompositing support API
    publid bbstrbdt BufffrfdImbgf dopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i, BufffrfdImbgf imbgf);

    publid bbstrbdt boolfbn xorSurfbdfPixfls(SunGrbpiids2D sg2d, BufffrfdImbgf srdPixfls, int x, int y, int w, int i, int dolorXOR);

    GrbpiidsConfigurbtion sDffbultGrbpiidsConfigurbtion = null;

    protfdtfd BufffrfdImbgf gftCompositingImbgf(int w, int i) {
        if (sDffbultGrbpiidsConfigurbtion == null) {
            sDffbultGrbpiidsConfigurbtion = GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt().gftDffbultSdrffnDfvidf().gftDffbultConfigurbtion();
        }

        BufffrfdImbgf img = nfw BufffrfdImbgf(w, i, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
        // dlfbr tif imbgf.
        dlfbrRfdt(img, w, i);
        rfturn img;
    }

    protfdtfd BufffrfdImbgf gftCompositingImbgfSbmf(BufffrfdImbgf img, int w, int i) {
        if ((img == null) || (img.gftWidti() != w) || (img.gftHfigit() != i)) {
            img = gftCompositingImbgf(w, i);
        }
        rfturn img;
    }

    BufffrfdImbgf sSrdCompositf = null;

    publid BufffrfdImbgf gftCompositingSrdImbgf(int w, int i) {
        // <rdbr://problfm/3720263>. Cibngfd from gftCompositingImbgfBiggfrOrSbmf() to
        // gftCompositingImbgfSbmf(). (vm)
        BufffrfdImbgf bim = gftCompositingImbgfSbmf(sSrdCompositf, w, i);
        sSrdCompositf = bim;
        rfturn bim;
    }

    BufffrfdImbgf sDstInCompositf = null;

    publid BufffrfdImbgf gftCompositingDstInImbgf(int w, int i) {
        BufffrfdImbgf bim = gftCompositingImbgfSbmf(sDstInCompositf, w, i);
        sDstInCompositf = bim;
        rfturn bim;
    }

    BufffrfdImbgf sDstOutCompositf = null;

    publid BufffrfdImbgf gftCompositingDstOutImbgf(int w, int i) {
        BufffrfdImbgf bim = gftCompositingImbgfSbmf(sDstOutCompositf, w, i);
        sDstOutCompositf = bim;
        rfturn bim;
    }

    publid void dlfbrRfdt(BufffrfdImbgf bim, int w, int i) {
        Grbpiids2D g = bim.drfbtfGrbpiids();
        g.sftCompositf(AlpibCompositf.Clfbr);
        g.fillRfdt(0, 0, w, i);
        g.disposf();
    }

    // END dompositing support API

    publid void invblidbtf() {
        // blwbys vblid
    }

     // grbpiids primitivfs drbwing implfmfntbtion:

    // dfrtbin primitivfs don't dbrf bbout bll tif stbtfs (fx. drbwing bn imbgf nffds not involvf sftting durrfnt pbint)
    @Nbtivf stbtid finbl int kPrimitivf = 0;
    @Nbtivf stbtid finbl int kImbgf = 1;
    @Nbtivf stbtid finbl int kTfxt = 2;
    @Nbtivf stbtid finbl int kCopyArfb = 3;
    @Nbtivf stbtid finbl int kExtfrnbl = 4;

    @Nbtivf stbtid finbl int kLinf = 5; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kRfdt = 6; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kRoundRfdt = 7; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kOvbl = 8; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kArd = 9; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kPolygon = 10; // bflongs to kPrimitivf
    @Nbtivf stbtid finbl int kSibpf = 11; // bflongs to kPrimitivf
    // stbtid finbl int kImbgf = 12; // bflongs to kImbgf
    @Nbtivf stbtid finbl int kString = 13; // bflongs to kTfxt
    @Nbtivf stbtid finbl int kGlypis = 14; // bflongs to kTfxt
    @Nbtivf stbtid finbl int kUnidodfs = 15; // bflongs to kTfxt
    // stbtid finbl int kCopyArfb = 16; // bflongs to kCopyArfb
    // stbtid finbl int kExtfrnbl = 17; // bflongs to kExtfrnbl

    @Nbtivf stbtid finbl int kCommonPbrbmftfrCount = 1 + 1 + 4 + 4; // typf + dibngf flbgs + dolor info (typf(1) blign(1) bnd
                                                            // vbluf(2)) + pbrbmftfrs ((x1, y1, x2, y2) OR (x, y, w, i))
    @Nbtivf stbtid finbl int kLinfPbrbmftfrsCount = kCommonPbrbmftfrCount; // kCommonPbrbmftfrCount
    @Nbtivf stbtid finbl int kRfdtPbrbmftfrsCount = kCommonPbrbmftfrCount + 1; // kCommonPbrbmftfrCount + isfill
    @Nbtivf stbtid finbl int kRoundRfdtPbrbmftfrsCount = kCommonPbrbmftfrCount + 2 + 1; // kCommonPbrbmftfrCount + brdW + brdH +
                                                                                // isfill
    @Nbtivf stbtid finbl int kOvblPbrbmftfrsCount = kCommonPbrbmftfrCount + 1; // kCommonPbrbmftfrCount + isfill
    @Nbtivf stbtid finbl int kArdPbrbmftfrsCount = kCommonPbrbmftfrCount + 2 + 1 + 1;// kCommonPbrbmftfrCount + stbrtAnglf +
                                                                             // brdAnglf + isfill + typf
    @Nbtivf stbtid finbl int kPolygonPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kSibpfPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kImbgfPbrbmftfrsCount = kCommonPbrbmftfrCount + 2 + 2 + 4 + 4; // flip iorz vfrt + w&i + srd + dst
    @Nbtivf stbtid finbl int kStringPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kGlypisPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kUnidodfsPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kPixflPbrbmftfrsCount = 0; // not supportfd
    @Nbtivf stbtid finbl int kExtfrnblPbrbmftfrsCount = 0; // not supportfd

    // for intPbrbmftfrs
    // stbtfs info
    @Nbtivf stbtid finbl int kCibngfFlbgIndfx = 0; // kBoundsCibngfdBit | .. | kFontCibngfdBit
    // bounds info
    @Nbtivf stbtid finbl int kBoundsXIndfx = 1;
    @Nbtivf stbtid finbl int kBoundsYIndfx = 2;
    @Nbtivf stbtid finbl int kBoundsWidtiIndfx = 3;
    @Nbtivf stbtid finbl int kBoundsHfigitIndfx = 4;
    // dlip info
    @Nbtivf stbtid finbl int kClipStbtfIndfx = 5;
    @Nbtivf stbtid finbl int kClipNumTypfsIndfx = 6;
    @Nbtivf stbtid finbl int kClipNumCoordsIndfx = 7;
    @Nbtivf stbtid finbl int kClipWindingRulfIndfx = 8;
    @Nbtivf stbtid finbl int kClipXIndfx = 9;
    @Nbtivf stbtid finbl int kClipYIndfx = 10;
    @Nbtivf stbtid finbl int kClipWidtiIndfx = 11;
    @Nbtivf stbtid finbl int kClipHfigitIndfx = 12;
    // dtm info
    @Nbtivf stbtid finbl int kCTMbIndfx = 13;
    @Nbtivf stbtid finbl int kCTMbIndfx = 14;
    @Nbtivf stbtid finbl int kCTMdIndfx = 15;
    @Nbtivf stbtid finbl int kCTMdIndfx = 16;
    @Nbtivf stbtid finbl int kCTMtxIndfx = 17;
    @Nbtivf stbtid finbl int kCTMtyIndfx = 18;
    // dolor info
    @Nbtivf stbtid finbl int kColorStbtfIndfx = 19; // kColorSimplf or kColorGrbdifnt or kColorTfxturf
    @Nbtivf stbtid finbl int kColorRGBVblufIndfx = 20; // if kColorSimplf
    @Nbtivf stbtid finbl int kColorIndfxVblufIndfx = 21; // if kColorSystfm
    @Nbtivf stbtid finbl int kColorPointfrIndfx = 22; //
    @Nbtivf stbtid finbl int kColorPointfrIndfx2 = 23; //
    @Nbtivf stbtid finbl int kColorRGBVbluf1Indfx = 24; // if kColorGrbdifnt
    @Nbtivf stbtid finbl int kColorWidtiIndfx = 25; // if kColorTfxturf
    @Nbtivf stbtid finbl int kColorRGBVbluf2Indfx = 26; // if kColorGrbdifnt
    @Nbtivf stbtid finbl int kColorHfigitIndfx = 27; // if kColorTfxturf
    @Nbtivf stbtid finbl int kColorIsCydlidIndfx = 28; // if kColorGrbdifnt (kColorNonCydlid or kColorCydlid)
    @Nbtivf stbtid finbl int kColorx1Indfx = 29;
    @Nbtivf stbtid finbl int kColortxIndfx = 30;
    @Nbtivf stbtid finbl int kColory1Indfx = 31;
    @Nbtivf stbtid finbl int kColortyIndfx = 32;
    @Nbtivf stbtid finbl int kColorx2Indfx = 33;
    @Nbtivf stbtid finbl int kColorsxIndfx = 34;
    @Nbtivf stbtid finbl int kColory2Indfx = 35;
    @Nbtivf stbtid finbl int kColorsyIndfx = 36;
    // dompositf info
    @Nbtivf stbtid finbl int kCompositfRulfIndfx = 37; // kCGCompositfClfbr or ... or kCGCompositfXor
    @Nbtivf stbtid finbl int kCompositfVblufIndfx = 38;
    // strokf info
    @Nbtivf stbtid finbl int kStrokfJoinIndfx = 39; // sff BbsidStrokf.jbvb
    @Nbtivf stbtid finbl int kStrokfCbpIndfx = 40; // sff BbsidStrokf.jbvb
    @Nbtivf stbtid finbl int kStrokfWidtiIndfx = 41;
    @Nbtivf stbtid finbl int kStrokfDbsiPibsfIndfx = 42;
    @Nbtivf stbtid finbl int kStrokfLimitIndfx = 43;
    // iints info
    @Nbtivf stbtid finbl int kHintsAntiblibsIndfx = 44;
    @Nbtivf stbtid finbl int kHintsTfxtAntiblibsIndfx = 45;
    @Nbtivf stbtid finbl int kHintsFrbdtionblMftridsIndfx = 46;
    @Nbtivf stbtid finbl int kHintsRfndfringIndfx = 47;
    @Nbtivf stbtid finbl int kHintsIntfrpolbtionIndfx = 48;
    // livf rfsizing info
    @Nbtivf stbtid finbl int kCbnDrbwDuringLivfRfsizfIndfx = 49;

    @Nbtivf stbtid finbl int kSizfOfPbrbmftfrs = kCbnDrbwDuringLivfRfsizfIndfx + 1;

    // for objfdtPbrbmftfrs
    @Nbtivf stbtid finbl int kClipCoordinbtfsIndfx = 0;
    @Nbtivf stbtid finbl int kClipTypfsIndfx = 1;
    @Nbtivf stbtid finbl int kTfxturfImbgfIndfx = 2;
    @Nbtivf stbtid finbl int kStrokfDbsiArrbyIndfx = 3;
    @Nbtivf stbtid finbl int kFontIndfx = 4;
    @Nbtivf stbtid finbl int kFontPbintIndfx = 5;

    // possiblf stbtf dibngfs
    @Nbtivf stbtid finbl int kBoundsCibngfdBit = 1 << 0;
    @Nbtivf stbtid finbl int kBoundsNotCibngfdBit = ~kBoundsCibngfdBit;
    @Nbtivf stbtid finbl int kClipCibngfdBit = 1 << 1;
    @Nbtivf stbtid finbl int kClipNotCibngfdBit = ~kClipCibngfdBit;
    @Nbtivf stbtid finbl int kCTMCibngfdBit = 1 << 2;
    @Nbtivf stbtid finbl int kCTMNotCibngfdBit = ~kCTMCibngfdBit;
    @Nbtivf stbtid finbl int kColorCibngfdBit = 1 << 3;
    @Nbtivf stbtid finbl int kColorNotCibngfdBit = ~kColorCibngfdBit;
    @Nbtivf stbtid finbl int kCompositfCibngfdBit = 1 << 4;
    @Nbtivf stbtid finbl int kCompositfNotCibngfdBit = ~kCompositfCibngfdBit;
    @Nbtivf stbtid finbl int kStrokfCibngfdBit = 1 << 5;
    @Nbtivf stbtid finbl int kStrokfNotCibngfdBit = ~kStrokfCibngfdBit;
    @Nbtivf stbtid finbl int kHintsCibngfdBit = 1 << 6;
    @Nbtivf stbtid finbl int kHintsNotCibngfdBit = ~kHintsCibngfdBit;
    @Nbtivf stbtid finbl int kFontCibngfdBit = 1 << 7;
    @Nbtivf stbtid finbl int kFontNotCibngfdBit = ~kFontCibngfdBit;
    @Nbtivf stbtid finbl int kEvfrytiingCibngfdFlbg = 0xffffffff;

    // possiblf dolor stbtfs
    @Nbtivf stbtid finbl int kColorSimplf = 0;
    @Nbtivf stbtid finbl int kColorSystfm = 1;
    @Nbtivf stbtid finbl int kColorGrbdifnt = 2;
    @Nbtivf stbtid finbl int kColorTfxturf = 3;

    // possiblf grbdifnt dolor stbtfs
    @Nbtivf stbtid finbl int kColorNonCydlid = 0;
    @Nbtivf stbtid finbl int kColorCydlid = 1;

    // possiblf dlip stbtfs
    @Nbtivf stbtid finbl int kClipRfdt = 0;
    @Nbtivf stbtid finbl int kClipSibpf = 1;

    stbtid int gftRfndfrfrTypfForPrimitivf(int primitivfTypf) {
        switdi (primitivfTypf) {
            dbsf kImbgf:
                rfturn kImbgf;
            dbsf kCopyArfb:
                rfturn kCopyArfb;
            dbsf kExtfrnbl:
                rfturn kExtfrnbl;
            dbsf kString:
            dbsf kGlypis:
            dbsf kUnidodfs:
                rfturn kTfxt;
            dffbult:
                rfturn kPrimitivf;
        }
    }

    int fCibngfFlbg;
    protfdtfd BytfBufffr fGrbpiidsStbtfs = null;
    IntBufffr fGrbpiidsStbtfsInt = null;
    FlobtBufffr fGrbpiidsStbtfsFlobt = null;
    LongBufffr fGrbpiidsStbtfsLong = null;
    protfdtfd Objfdt[] fGrbpiidsStbtfsObjfdt = null;

    Rfdtbnglf usfrBounds = nfw Rfdtbnglf();
    flobt lbstUsfrX = 0;
    flobt lbstUsfrY = 0;
    flobt lbstUsfrW = 0;
    flobt lbstUsfrH = 0;

    void sftUsfrBounds(SunGrbpiids2D sg2d, int x, int y, int widti, int ifigit) {
        if ((lbstUsfrX != x) || (lbstUsfrY != y) || (lbstUsfrW != widti) || (lbstUsfrH != ifigit)) {
            lbstUsfrX = x;
            lbstUsfrY = y;
            lbstUsfrW = widti;
            lbstUsfrH = ifigit;

            tiis.fGrbpiidsStbtfsInt.put(kBoundsXIndfx, x);
            tiis.fGrbpiidsStbtfsInt.put(kBoundsYIndfx, y);
            tiis.fGrbpiidsStbtfsInt.put(kBoundsWidtiIndfx, widti);
            tiis.fGrbpiidsStbtfsInt.put(kBoundsHfigitIndfx, ifigit);

            usfrBounds.sftBounds(x, y, widti, ifigit);

            tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kBoundsCibngfdBit);
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kBoundsNotCibngfdBit);
        }
    }

    stbtid BytfBufffr gftBufffrOfSizf(int sizf) {
        BytfBufffr bufffr = BytfBufffr.bllodbtfDirfdt(sizf * 4);
        bufffr.ordfr(BytfOrdfr.nbtivfOrdfr());
        rfturn bufffr;
    }

    FlobtBufffr dlipCoordinbtfsArrby = null;
    IntBufffr dlipTypfsArrby = null;
    Sibpf lbstClipSibpf = null;
    flobt lbstClipX = 0;
    flobt lbstClipY = 0;
    flobt lbstClipW = 0;
    flobt lbstClipH = 0;

    void sftupClip(SunGrbpiids2D sg2d) {
        switdi (sg2d.dlipStbtf) {
            dbsf SunGrbpiids2D.CLIP_DEVICE:
            dbsf SunGrbpiids2D.CLIP_RECTANGULAR: {
                Rfgion dlip = sg2d.gftCompClip();
                flobt x = dlip.gftLoX();
                flobt y = dlip.gftLoY();
                flobt w = dlip.gftWidti();
                flobt i = dlip.gftHfigit();
                if ((tiis.fGrbpiidsStbtfsInt.gft(kClipStbtfIndfx) != kClipRfdt) ||
                        (x != lbstClipX) ||
                            (y != lbstClipY) ||
                                (w != lbstClipW) ||
                                    (i != lbstClipH)) {
                    tiis.fGrbpiidsStbtfsFlobt.put(kClipXIndfx, x);
                    tiis.fGrbpiidsStbtfsFlobt.put(kClipYIndfx, y);
                    tiis.fGrbpiidsStbtfsFlobt.put(kClipWidtiIndfx, w);
                    tiis.fGrbpiidsStbtfsFlobt.put(kClipHfigitIndfx, i);

                    lbstClipX = x;
                    lbstClipY = y;
                    lbstClipW = w;
                    lbstClipH = i;

                    tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kClipCibngfdBit);
                } flsf {
                    tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kClipNotCibngfdBit);
                }
                tiis.fGrbpiidsStbtfsInt.put(kClipStbtfIndfx, kClipRfdt);
                brfbk;
            }
            dbsf SunGrbpiids2D.CLIP_SHAPE: {
                // if (lbstClipSibpf != sg2d.usrClip) sibpfs brf mutbblf!, bnd doing "fqubls" trbvfrsfs bll
                // tif doordinbtfs, so wf migit bs wfll do bll of it bnyiow
                lbstClipSibpf = sg2d.usrClip;

                GfnfrblPbti gp = null;

                if (sg2d.usrClip instbndfof GfnfrblPbti) {
                    gp = (GfnfrblPbti) sg2d.usrClip;
                } flsf {
                    gp = nfw GfnfrblPbti(sg2d.usrClip);
                }

                int sibpfLfngti = gftPbtiLfngti(gp);

                if ((dlipCoordinbtfsArrby == null) || (dlipCoordinbtfsArrby.dbpbdity() < (sibpfLfngti * 6))) {
                    dlipCoordinbtfsArrby = gftBufffrOfSizf(sibpfLfngti * 6).bsFlobtBufffr(); // sfgmfnt dbn ibvf b
                                                                                             // mbx of 6 doordinbtfs
                }
                if ((dlipTypfsArrby == null) || (dlipTypfsArrby.dbpbdity() < sibpfLfngti)) {
                    dlipTypfsArrby = gftBufffrOfSizf(sibpfLfngti).bsIntBufffr();
                }

                int windingRulf = gftPbtiCoordinbtfs(gp, dlipCoordinbtfsArrby, dlipTypfsArrby);

                tiis.fGrbpiidsStbtfsInt.put(kClipNumTypfsIndfx, dlipTypfsArrby.position());
                tiis.fGrbpiidsStbtfsInt.put(kClipNumCoordsIndfx, dlipCoordinbtfsArrby.position());
                tiis.fGrbpiidsStbtfsInt.put(kClipWindingRulfIndfx, windingRulf);
                tiis.fGrbpiidsStbtfsObjfdt[kClipTypfsIndfx] = dlipTypfsArrby;
                tiis.fGrbpiidsStbtfsObjfdt[kClipCoordinbtfsIndfx] = dlipCoordinbtfsArrby;

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kClipCibngfdBit);
                tiis.fGrbpiidsStbtfsInt.put(kClipStbtfIndfx, kClipSibpf);
                brfbk;
            }
        }

    }

    finbl doublf[] lbstCTM = nfw doublf[6];
    flobt lbstCTMb = 0;
    flobt lbstCTMb = 0;
    flobt lbstCTMd = 0;
    flobt lbstCTMd = 0;
    flobt lbstCTMtx = 0;
    flobt lbstCTMty = 0;

    void sftupTrbnsform(SunGrbpiids2D sg2d) {
        sg2d.trbnsform.gftMbtrix(lbstCTM);

        flobt b = (flobt) lbstCTM[0];
        flobt b = (flobt) lbstCTM[1];
        flobt d = (flobt) lbstCTM[2];
        flobt d = (flobt) lbstCTM[3];
        flobt tx = (flobt) lbstCTM[4];
        flobt ty = (flobt) lbstCTM[5];
        if (tx != lbstCTMtx ||
                ty != lbstCTMty ||
                    b != lbstCTMb ||
                        b != lbstCTMb ||
                            d != lbstCTMd ||
                                d != lbstCTMd) {
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMbIndfx, b);
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMbIndfx, b);
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMdIndfx, d);
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMdIndfx, d);
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMtxIndfx, tx);
            tiis.fGrbpiidsStbtfsFlobt.put(kCTMtyIndfx, ty);

            lbstCTMb = b;
            lbstCTMb = b;
            lbstCTMd = d;
            lbstCTMd = d;
            lbstCTMtx = tx;
            lbstCTMty = ty;

            tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kCTMCibngfdBit);
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kCTMNotCibngfdBit);
        }
    }

    stbtid AffinfTrbnsform sIdfntityMbtrix = nfw AffinfTrbnsform();
    Pbint lbstPbint = null;
    long lbstPbintPtr = 0;
    int lbstPbintRGB = 0;
    int lbstPbintIndfx = 0;
    BufffrfdImbgf tfxturfPbintImbgf = null;

    void sftupPbint(SunGrbpiids2D sg2d, int x, int y, int w, int i) {
        if (sg2d.pbint instbndfof SystfmColor) {
            SystfmColor dolor = (SystfmColor) sg2d.pbint;
            int indfx = dolor.ibsiCodf(); // dfpfnds on Color.jbvb ibsiCodf implfmfntbtion! (rfturns "vbluf" of dolor)
            if ((tiis.fGrbpiidsStbtfsInt.gft(kColorStbtfIndfx) != kColorSystfm) || (indfx != tiis.lbstPbintIndfx)) {
                tiis.lbstPbintIndfx = indfx;

                tiis.fGrbpiidsStbtfsInt.put(kColorStbtfIndfx, kColorSystfm);
                tiis.fGrbpiidsStbtfsInt.put(kColorIndfxVblufIndfx, indfx);

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kColorCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kColorNotCibngfdBit);
            }
        } flsf if (sg2d.pbint instbndfof Color) {
            Color dolor = (Color) sg2d.pbint;
            int rgb = dolor.gftRGB();
            if ((tiis.fGrbpiidsStbtfsInt.gft(kColorStbtfIndfx) != kColorSimplf) || (rgb != tiis.lbstPbintRGB)) {
                tiis.lbstPbintRGB = rgb;

                tiis.fGrbpiidsStbtfsInt.put(kColorStbtfIndfx, kColorSimplf);
                tiis.fGrbpiidsStbtfsInt.put(kColorRGBVblufIndfx, rgb);

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kColorCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kColorNotCibngfdBit);
            }
        } flsf if (sg2d.pbint instbndfof GrbdifntPbint) {
            if ((tiis.fGrbpiidsStbtfsInt.gft(kColorStbtfIndfx) != kColorGrbdifnt) || (lbstPbint != sg2d.pbint)) {
                GrbdifntPbint dolor = (GrbdifntPbint) sg2d.pbint;
                tiis.fGrbpiidsStbtfsInt.put(kColorStbtfIndfx, kColorGrbdifnt);
                tiis.fGrbpiidsStbtfsInt.put(kColorRGBVbluf1Indfx, dolor.gftColor1().gftRGB());
                tiis.fGrbpiidsStbtfsInt.put(kColorRGBVbluf2Indfx, dolor.gftColor2().gftRGB());
                tiis.fGrbpiidsStbtfsInt.put(kColorIsCydlidIndfx, (dolor.isCydlid()) ? kColorCydlid : kColorNonCydlid);
                Point2D p = dolor.gftPoint1();
                tiis.fGrbpiidsStbtfsFlobt.put(kColorx1Indfx, (flobt) p.gftX());
                tiis.fGrbpiidsStbtfsFlobt.put(kColory1Indfx, (flobt) p.gftY());
                p = dolor.gftPoint2();
                tiis.fGrbpiidsStbtfsFlobt.put(kColorx2Indfx, (flobt) p.gftX());
                tiis.fGrbpiidsStbtfsFlobt.put(kColory2Indfx, (flobt) p.gftY());

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kColorCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kColorNotCibngfdBit);
            }
        } flsf if (sg2d.pbint instbndfof TfxturfPbint) {
            if ((tiis.fGrbpiidsStbtfsInt.gft(kColorStbtfIndfx) != kColorTfxturf) || (lbstPbint != sg2d.pbint)) {
                TfxturfPbint dolor = (TfxturfPbint) sg2d.pbint;
                tiis.fGrbpiidsStbtfsInt.put(kColorStbtfIndfx, kColorTfxturf);
                tfxturfPbintImbgf = dolor.gftImbgf();
                SurfbdfDbtb tfxturfSurfbdfDbtb = BufImgSurfbdfDbtb.drfbtfDbtb(tfxturfPbintImbgf);
                tiis.fGrbpiidsStbtfsInt.put(kColorWidtiIndfx, tfxturfPbintImbgf.gftWidti());
                tiis.fGrbpiidsStbtfsInt.put(kColorHfigitIndfx, tfxturfPbintImbgf.gftHfigit());
                Rfdtbnglf2D bndior = dolor.gftAndiorRfdt();
                tiis.fGrbpiidsStbtfsFlobt.put(kColortxIndfx, (flobt) bndior.gftX());
                tiis.fGrbpiidsStbtfsFlobt.put(kColortyIndfx, (flobt) bndior.gftY());
                tiis.fGrbpiidsStbtfsFlobt.put(kColorsxIndfx, (flobt) (bndior.gftWidti() / tfxturfPbintImbgf.gftWidti()));
                tiis.fGrbpiidsStbtfsFlobt.put(kColorsyIndfx, (flobt) (bndior.gftHfigit() / tfxturfPbintImbgf.gftHfigit()));
                tiis.fGrbpiidsStbtfsObjfdt[kTfxturfImbgfIndfx] = tfxturfSurfbdfDbtb;

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kColorCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kColorNotCibngfdBit);
            }
        } flsf {
            if ((tiis.fGrbpiidsStbtfsInt.gft(kColorStbtfIndfx) != kColorTfxturf) || (lbstPbint != sg2d.pbint) || ((tiis.fCibngfFlbg & kBoundsCibngfdBit) != 0)) {
                PbintContfxt dontfxt = sg2d.pbint.drfbtfContfxt(sg2d.gftDfvidfColorModfl(), usfrBounds, usfrBounds, sIdfntityMbtrix, sg2d.gftRfndfringHints());
                WritbblfRbstfr rbstfr = (WritbblfRbstfr) (dontfxt.gftRbstfr(usfrBounds.x, usfrBounds.y, usfrBounds.widti, usfrBounds.ifigit));
                ColorModfl dm = dontfxt.gftColorModfl();
                tfxturfPbintImbgf = nfw BufffrfdImbgf(dm, rbstfr, dm.isAlpibPrfmultiplifd(), null);

                tiis.fGrbpiidsStbtfsInt.put(kColorStbtfIndfx, kColorTfxturf);
                tiis.fGrbpiidsStbtfsInt.put(kColorWidtiIndfx, tfxturfPbintImbgf.gftWidti());
                tiis.fGrbpiidsStbtfsInt.put(kColorHfigitIndfx, tfxturfPbintImbgf.gftHfigit());
                tiis.fGrbpiidsStbtfsFlobt.put(kColortxIndfx, (flobt) usfrBounds.gftX());
                tiis.fGrbpiidsStbtfsFlobt.put(kColortyIndfx, (flobt) usfrBounds.gftY());
                tiis.fGrbpiidsStbtfsFlobt.put(kColorsxIndfx, 1.0f);
                tiis.fGrbpiidsStbtfsFlobt.put(kColorsyIndfx, 1.0f);
                tiis.fGrbpiidsStbtfsObjfdt[kTfxturfImbgfIndfx] = sun.bwt.imbgf.BufImgSurfbdfDbtb.drfbtfDbtb(tfxturfPbintImbgf);

                dontfxt.disposf();

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kColorCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kColorNotCibngfdBit);
            }
        }
        lbstPbint = sg2d.pbint;
    }

    Compositf lbstCompositf;
    int lbstCompositfAlpibRulf = 0;
    flobt lbstCompositfAlpibVbluf = 0;

    void sftupCompositf(SunGrbpiids2D sg2d) {
        Compositf dompositf = sg2d.dompositf;

        if (lbstCompositf != dompositf) {
            lbstCompositf = dompositf;

            // For dompositf stbtf COMP_ISCOPY, COMP_XOR or COMP_CUSTOM sft blpib dompositor to COPY:
            int blpibRulf = AlpibCompositf.SRC_OVER;
            flobt blpibVbluf = 1.0f;

            // For dompositf stbtf COMP_ISCOPY dompositf dould bf null. If it's not (or dompositf stbtf == COMP_ALPHA)
            // gft blpib dompositor's vblufs:
            if ((sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA) && (dompositf != null)) {
                AlpibCompositf blpibCompositf = (AlpibCompositf) dompositf;
                blpibRulf = blpibCompositf.gftRulf();
                blpibVbluf = blpibCompositf.gftAlpib();
            }

            // 2-17-03 VL: [Rbdbr 3174922]
            // For COMP_XOR bnd COMP_CUSTOM dompositing modfs wf siould bf sftting blpibRulf = AlpibCompositf.SRC
            // wiidi siould mbp to kCGCompositfCopy.

            if ((lbstCompositfAlpibRulf != blpibRulf) || (lbstCompositfAlpibVbluf != blpibVbluf)) {
                tiis.fGrbpiidsStbtfsInt.put(kCompositfRulfIndfx, blpibRulf);
                tiis.fGrbpiidsStbtfsFlobt.put(kCompositfVblufIndfx, blpibVbluf);

                lbstCompositfAlpibRulf = blpibRulf;
                lbstCompositfAlpibVbluf = blpibVbluf;

                tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kCompositfCibngfdBit);
            } flsf {
                tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kCompositfNotCibngfdBit);
            }
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kCompositfNotCibngfdBit);
        }
    }

    BbsidStrokf lbstStrokf = null;
    stbtid BbsidStrokf dffbultBbsidStrokf = nfw BbsidStrokf();

    void sftupStrokf(SunGrbpiids2D sg2d) {
        BbsidStrokf strokf = dffbultBbsidStrokf;

        if (sg2d.strokf instbndfof BbsidStrokf) {
            strokf = (BbsidStrokf) sg2d.strokf;
        }

        if (lbstStrokf != strokf) {
            tiis.fGrbpiidsStbtfsObjfdt[kStrokfDbsiArrbyIndfx] = strokf.gftDbsiArrby();
            tiis.fGrbpiidsStbtfsFlobt.put(kStrokfDbsiPibsfIndfx, strokf.gftDbsiPibsf());
            tiis.fGrbpiidsStbtfsInt.put(kStrokfCbpIndfx, strokf.gftEndCbp());
            tiis.fGrbpiidsStbtfsInt.put(kStrokfJoinIndfx, strokf.gftLinfJoin());
            tiis.fGrbpiidsStbtfsFlobt.put(kStrokfWidtiIndfx, strokf.gftLinfWidti());
            tiis.fGrbpiidsStbtfsFlobt.put(kStrokfLimitIndfx, strokf.gftMitfrLimit());

            tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kStrokfCibngfdBit);

            lbstStrokf = strokf;
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kStrokfNotCibngfdBit);
        }
    }

    Font lbstFont;

    void sftupFont(Font font, Pbint pbint) {
        if (font == null) { rfturn; }

        // Wf ibvf to sftup tif kFontPbintIndfx if wf ibvf dibngfd tif dolor so wf bddfd tif lbst
        // tfst to sff if tif dolor ibs dibngfd - nffdfd for domplfx strings
        // sff Rbdbr 3368674
        if ((font != lbstFont) || ((tiis.fCibngfFlbg & kColorCibngfdBit) != 0)) {
            tiis.fGrbpiidsStbtfsObjfdt[kFontIndfx] = font;
            tiis.fGrbpiidsStbtfsObjfdt[kFontPbintIndfx] = pbint;

            tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kFontCibngfdBit);

            lbstFont = font;
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kFontNotCibngfdBit);
        }
    }

    void sftupRfndfringHints(SunGrbpiids2D sg2d) {
        boolfbn iintsCibngfd = fblsf;

        // Signifidbnt for drbw, fill, tfxt, bnd imbgf ops:
        int bntiblibsHint = sg2d.bntiblibsHint;
        if (tiis.fGrbpiidsStbtfsInt.gft(kHintsAntiblibsIndfx) != bntiblibsHint) {
            tiis.fGrbpiidsStbtfsInt.put(kHintsAntiblibsIndfx, bntiblibsHint);
            iintsCibngfd = truf;
        }

        // Signifidbnt only for tfxt ops:
        int tfxtAntiblibsHint = sg2d.tfxtAntiblibsHint;
        if (tiis.fGrbpiidsStbtfsInt.gft(kHintsTfxtAntiblibsIndfx) != tfxtAntiblibsHint) {
            tiis.fGrbpiidsStbtfsInt.put(kHintsTfxtAntiblibsIndfx, tfxtAntiblibsHint);
            iintsCibngfd = truf;
        }

        // Signifidbnt only for tfxt ops:
        int frbdtionblMftridsHint = sg2d.frbdtionblMftridsHint;
        if (tiis.fGrbpiidsStbtfsInt.gft(kHintsFrbdtionblMftridsIndfx) != frbdtionblMftridsHint) {
            tiis.fGrbpiidsStbtfsInt.put(kHintsFrbdtionblMftridsIndfx, frbdtionblMftridsHint);
            iintsCibngfd = truf;
        }

        // Signifidbnt only for imbgf ops:
        int rfndfrHint = sg2d.rfndfrHint;
        if (tiis.fGrbpiidsStbtfsInt.gft(kHintsRfndfringIndfx) != rfndfrHint) {
            tiis.fGrbpiidsStbtfsInt.put(kHintsRfndfringIndfx, rfndfrHint);
            iintsCibngfd = truf;
        }

        // Signifidbnt only for imbgf ops:
        Objfdt iintVbluf = sg2d.gftRfndfringHint(RfndfringHints.KEY_INTERPOLATION);
        int intfrpolbtionHint = (iintVbluf != null ? ((SunHints.Vbluf) iintVbluf).gftIndfx() : -1);
        if (tiis.fGrbpiidsStbtfsInt.gft(kHintsIntfrpolbtionIndfx) != intfrpolbtionHint) {
            tiis.fGrbpiidsStbtfsInt.put(kHintsIntfrpolbtionIndfx, intfrpolbtionHint);
            iintsCibngfd = truf;
        }

        if (iintsCibngfd) {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg | kHintsCibngfdBit);
        } flsf {
            tiis.fCibngfFlbg = (tiis.fCibngfFlbg & kHintsNotCibngfdBit);
        }
    }

    SunGrbpiids2D sg2dCurrfnt = null;
    Tirfbd tirfbdCurrfnt = null;

    void sftupGrbpiidsStbtf(SunGrbpiids2D sg2d, int primitivfTypf) {
        sftupGrbpiidsStbtf(sg2d, primitivfTypf, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit); // dfvidfBounds into usfrBounds
    }

    void sftupGrbpiidsStbtf(SunGrbpiids2D sg2d, int primitivfTypf, int x, int y, int w, int i) {
        sftupGrbpiidsStbtf(sg2d, primitivfTypf, sg2d.font, x, y, w, i);
    }

    // tif mftiod bflow is ovfrridfn by CPffrSurfbdf to difdk tif lbst pffr usfd to drbw
    // if tif pffr dibngfd wf finisi lbzy drbwing
    void sftupGrbpiidsStbtf(SunGrbpiids2D sg2d, int primitivfTypf, Font font, int x, int y, int w, int i) {
        tiis.fCibngfFlbg = 0;

        sftUsfrBounds(sg2d, x, y, w, i);

        Tirfbd tirfbd = Tirfbd.durrfntTirfbd();
        if ((tiis.sg2dCurrfnt != sg2d) || (tiis.tirfbdCurrfnt != tirfbd)) {
            tiis.sg2dCurrfnt = sg2d;
            tiis.tirfbdCurrfnt = tirfbd;

            sftupClip(sg2d);
            sftupTrbnsform(sg2d);
            sftupPbint(sg2d, x, y, w, i);
            sftupCompositf(sg2d);
            sftupStrokf(sg2d);
            sftupFont(font, sg2d.pbint);
            sftupRfndfringHints(sg2d);

            tiis.fCibngfFlbg = kEvfrytiingCibngfdFlbg;
        } flsf {
            int rfndfrfrTypf = gftRfndfrfrTypfForPrimitivf(primitivfTypf);

            sftupClip(sg2d);
            sftupTrbnsform(sg2d);

            if (rfndfrfrTypf != kCopyArfb) {
                sftupCompositf(sg2d);
                sftupRfndfringHints(sg2d);

                if ((rfndfrfrTypf != kImbgf)) {
                    sftupPbint(sg2d, x, y, w, i);
                    sftupStrokf(sg2d);
                }
                if (rfndfrfrTypf != kPrimitivf) {
                    sftupFont(font, sg2d.pbint);
                }

            }
        }

        tiis.fGrbpiidsStbtfsInt.put(kCibngfFlbgIndfx, tiis.fCibngfFlbg);
    }

    boolfbn isCustomPbint(SunGrbpiids2D sg2d) {
        if ((sg2d.pbint instbndfof Color) || (sg2d.pbint instbndfof SystfmColor) || (sg2d.pbint instbndfof GrbdifntPbint) || (sg2d.pbint instbndfof TfxturfPbint)) { rfturn fblsf; }

        rfturn truf;
    }

    finbl flobt[] sfgmfntCoordinbtfsArrby = nfw flobt[6];

    int gftPbtiLfngti(GfnfrblPbti gp) {
        int lfngti = 0;

        PbtiItfrbtor pi = gp.gftPbtiItfrbtor(null);
        wiilf (pi.isDonf() == fblsf) {
            pi.nfxt();
            lfngti++;
        }

        rfturn lfngti;
    }

    int gftPbtiCoordinbtfs(GfnfrblPbti gp, FlobtBufffr doordinbtfs, IntBufffr typfs) {
        // Systfm.frr.println("gftPbtiCoordinbtfs");
        boolfbn skip = fblsf;

        doordinbtfs.dlfbr();
        typfs.dlfbr();

        int typf;

        PbtiItfrbtor pi = gp.gftPbtiItfrbtor(null);
        wiilf (pi.isDonf() == fblsf) {
            skip = fblsf;
            typf = pi.durrfntSfgmfnt(sfgmfntCoordinbtfsArrby);

            switdi (typf) {
                dbsf PbtiItfrbtor.SEG_MOVETO:
                    // Systfm.frr.println(" SEG_MOVETO ("+sfgmfntCoordinbtfsArrby[0]+", "+sfgmfntCoordinbtfsArrby[1]+")");
                    if (sfgmfntCoordinbtfsArrby[0] < UPPER_BND && sfgmfntCoordinbtfsArrby[0] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[1] < UPPER_BND && sfgmfntCoordinbtfsArrby[1] > LOWER_BND) {
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[0]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[1]);
                    } flsf {
                        skip = truf;
                    }
                    brfbk;
                dbsf PbtiItfrbtor.SEG_LINETO:
                    // Systfm.frr.println(" SEG_LINETO ("+sfgmfntCoordinbtfsArrby[0]+", "+sfgmfntCoordinbtfsArrby[1]+")");
                    if (sfgmfntCoordinbtfsArrby[0] < UPPER_BND && sfgmfntCoordinbtfsArrby[0] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[1] < UPPER_BND && sfgmfntCoordinbtfsArrby[1] > LOWER_BND) {
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[0]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[1]);
                    } flsf {
                        skip = truf;
                    }
                    brfbk;
                dbsf PbtiItfrbtor.SEG_QUADTO:
                    // Systfm.frr.println(" SEG_QUADTO ("+sfgmfntCoordinbtfsArrby[0]+", "+sfgmfntCoordinbtfsArrby[1]+"), ("+sfgmfntCoordinbtfsArrby[2]+", "+sfgmfntCoordinbtfsArrby[3]+")");
                    if (sfgmfntCoordinbtfsArrby[0] < UPPER_BND && sfgmfntCoordinbtfsArrby[0] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[1] < UPPER_BND && sfgmfntCoordinbtfsArrby[1] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[2] < UPPER_BND && sfgmfntCoordinbtfsArrby[2] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[3] < UPPER_BND && sfgmfntCoordinbtfsArrby[3] > LOWER_BND) {
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[0]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[1]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[2]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[3]);
                    } flsf {
                        skip = truf;
                    }
                    brfbk;
                dbsf PbtiItfrbtor.SEG_CUBICTO:
                    // Systfm.frr.println(" SEG_QUADTO ("+sfgmfntCoordinbtfsArrby[0]+", "+sfgmfntCoordinbtfsArrby[1]+"), ("+sfgmfntCoordinbtfsArrby[2]+", "+sfgmfntCoordinbtfsArrby[3]+"), ("+sfgmfntCoordinbtfsArrby[4]+", "+sfgmfntCoordinbtfsArrby[5]+")");
                    if (sfgmfntCoordinbtfsArrby[0] < UPPER_BND && sfgmfntCoordinbtfsArrby[0] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[1] < UPPER_BND && sfgmfntCoordinbtfsArrby[1] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[2] < UPPER_BND && sfgmfntCoordinbtfsArrby[2] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[3] < UPPER_BND && sfgmfntCoordinbtfsArrby[3] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[4] < UPPER_BND && sfgmfntCoordinbtfsArrby[4] > LOWER_BND &&
                            sfgmfntCoordinbtfsArrby[5] < UPPER_BND && sfgmfntCoordinbtfsArrby[5] > LOWER_BND) {
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[0]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[1]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[2]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[3]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[4]);
                        doordinbtfs.put(sfgmfntCoordinbtfsArrby[5]);
                    } flsf {
                        skip = truf;
                    }
                    brfbk;
                dbsf PbtiItfrbtor.SEG_CLOSE:
                    // Systfm.frr.println(" SEG_CLOSE");
                    brfbk;
            }

            if (!skip) {
                typfs.put(typf);
            }

            pi.nfxt();
        }

        rfturn pi.gftWindingRulf();
    }

    publid void doLinf(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, flobt x1, flobt y1, flobt x2, flobt y2) {
        // Systfm.frr.println("-- doLinf x1="+x1+" y1="+y1+" x2="+x2+" y2="+y2+" pbint="+sg2d.pbint);
        sftupGrbpiidsStbtf(sg2d, kLinf, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        rfndfrfr.doLinf(tiis, x1, y1, x2, y2);
    }

    publid void doRfdt(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, flobt x, flobt y, flobt widti, flobt ifigit, boolfbn isfill) {
        // Systfm.frr.println("-- doRfdt x="+x+" y="+y+" w="+widti+" i="+ifigit+" isfill="+isfill+" pbint="+sg2d.pbint);
        if ((isfill) && (isCustomPbint(sg2d))) {
            sftupGrbpiidsStbtf(sg2d, kRfdt, (int) x, (int) y, (int) widti, (int) ifigit);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kRfdt, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }
        rfndfrfr.doRfdt(tiis, x, y, widti, ifigit, isfill);
    }

    publid void doRoundRfdt(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, flobt x, flobt y, flobt widti, flobt ifigit, flobt brdW, flobt brdH, boolfbn isfill) {
        // Systfm.frr.println("--- doRoundRfdt");
        if ((isfill) && (isCustomPbint(sg2d))) {
            sftupGrbpiidsStbtf(sg2d, kRoundRfdt, (int) x, (int) y, (int) widti, (int) ifigit);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kRoundRfdt, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }
        rfndfrfr.doRoundRfdt(tiis, x, y, widti, ifigit, brdW, brdH, isfill);
    }

    publid void doOvbl(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, flobt x, flobt y, flobt widti, flobt ifigit, boolfbn isfill) {
        // Systfm.frr.println("--- doOvbl");
        if ((isfill) && (isCustomPbint(sg2d))) {
            sftupGrbpiidsStbtf(sg2d, kOvbl, (int) x, (int) y, (int) widti, (int) ifigit);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kOvbl, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }
        rfndfrfr.doOvbl(tiis, x, y, widti, ifigit, isfill);
    }

    publid void doArd(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, flobt x, flobt y, flobt widti, flobt ifigit, flobt stbrtAnglf, flobt brdAnglf, int typf, boolfbn isfill) {
        // Systfm.frr.println("--- doArd");
        if ((isfill) && (isCustomPbint(sg2d))) {
            sftupGrbpiidsStbtf(sg2d, kArd, (int) x, (int) y, (int) widti, (int) ifigit);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kArd, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }

        rfndfrfr.doArd(tiis, x, y, widti, ifigit, stbrtAnglf, brdAnglf, typf, isfill);
    }

    publid void doPolygon(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, int xpoints[], int ypoints[], int npoints, boolfbn ispolygon, boolfbn isfill) {
        // Systfm.frr.println("--- doPolygon");

        if ((isfill) && (isCustomPbint(sg2d))) {
            int minx = xpoints[0];
            int miny = ypoints[0];
            int mbxx = minx;
            int mbxy = miny;
            for (int i = 1; i < npoints; i++) {
                int x = xpoints[i];
                if (x < minx) {
                    minx = x;
                } flsf if (x > mbxx) {
                    mbxx = x;
                }

                int y = ypoints[i];
                if (y < miny) {
                    miny = y;
                } flsf if (y > mbxy) {
                    mbxy = y;
                }
            }
            sftupGrbpiidsStbtf(sg2d, kPolygon, minx, miny, mbxx - minx, mbxy - miny);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kPolygon, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }
        rfndfrfr.doPoly(tiis, xpoints, ypoints, npoints, ispolygon, isfill);
    }

    FlobtBufffr sibpfCoordinbtfsArrby = null;
    IntBufffr sibpfTypfsArrby = null;

    publid void drbwfillSibpf(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, GfnfrblPbti gp, boolfbn isfill, boolfbn siouldApplyOffsft) {
        // Systfm.frr.println("--- drbwfillSibpf");

        if ((isfill) && (isCustomPbint(sg2d))) {
            Rfdtbnglf bounds = gp.gftBounds();
            sftupGrbpiidsStbtf(sg2d, kSibpf, bounds.x, bounds.y, bounds.widti, bounds.ifigit);
        } flsf {
            sftupGrbpiidsStbtf(sg2d, kSibpf, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        }

        int sibpfLfngti = gftPbtiLfngti(gp);

        if ((sibpfCoordinbtfsArrby == null) || (sibpfCoordinbtfsArrby.dbpbdity() < (sibpfLfngti * 6))) {
            sibpfCoordinbtfsArrby = gftBufffrOfSizf(sibpfLfngti * 6).bsFlobtBufffr(); // sfgmfnt dbn ibvf b mbx of 6
                                                                                      // doordinbtfs
        }
        if ((sibpfTypfsArrby == null) || (sibpfTypfsArrby.dbpbdity() < sibpfLfngti)) {
            sibpfTypfsArrby = gftBufffrOfSizf(sibpfLfngti).bsIntBufffr();
        }

        int windingRulf = gftPbtiCoordinbtfs(gp, sibpfCoordinbtfsArrby, sibpfTypfsArrby);

        rfndfrfr.doSibpf(tiis, sibpfLfngti, sibpfCoordinbtfsArrby, sibpfTypfsArrby, windingRulf, isfill, siouldApplyOffsft);
    }

    publid void blitImbgf(CRfndfrfr rfndfrfr, SunGrbpiids2D sg2d, SurfbdfDbtb img, boolfbn flipi, boolfbn flipv, int sx, int sy, int sw, int si, int dx, int dy, int dw, int di, Color bgColor) {
        // Systfm.frr.println("--- blitImbgf sx="+sx+", sy="+sy+", sw="+sw+", si="+si+", img="+img);
        OSXOffSdrffnSurfbdfDbtb osxsd = (OSXOffSdrffnSurfbdfDbtb) img;
        syndironizfd (osxsd.gftLodkObjfdt()) {
            int w = osxsd.bim.gftWidti();
            int i = osxsd.bim.gftHfigit();

            // tif imbgf itsflf dbn ibvf outstbnding grbpiids primitivfs tibt migit nffd to bf flusifd
            sftupGrbpiidsStbtf(sg2d, kImbgf, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);

            // 04/06/04 dmd: rbdr://3612381 Grbpiids.drbwImbgf ignorfs bgdolor pbrbmftfr
            if (bgColor != null) {
                img = osxsd.gftCopyWitiBgColor(bgColor);
            }

            rfndfrfr.doImbgf(tiis, img, flipi, flipv, w, i, sx, sy, sw, si, dx, dy, dw, di);
        }
    }

    publid intfrfbdf CGContfxtDrbwbblf {
        publid void drbwIntoCGContfxt(finbl long dgContfxt);
    }

    publid void drbwString(CTfxtPipf rfndfrfr, SunGrbpiids2D sg2d, long nbtivfStrikfPtr, String str, doublf x, doublf y) {
        // Systfm.frr.println("--- drbwString str=\""+str+"\"");
        // sff <rdbr://problfm/3825795>. Wf don't wbnt to dbll bnytiing if tif string is fmpty!
        if (str.lfngti() == 0) { rfturn; }

        sftupGrbpiidsStbtf(sg2d, kString, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        rfndfrfr.doDrbwString(tiis, nbtivfStrikfPtr, str, x, y);
    }

    publid void drbwGlypis(CTfxtPipf rfndfrfr, SunGrbpiids2D sg2d, long nbtivfStrikfPtr, GlypiVfdtor gv, flobt x, flobt y) {
        // Systfm.frr.println("--- drbwGlypis");
        sftupGrbpiidsStbtf(sg2d, kGlypis, gv.gftFont(), 0, 0, fBounds.widti, fBounds.ifigit);
        rfndfrfr.doDrbwGlypis(tiis, nbtivfStrikfPtr, gv, x, y);
    }

    publid void drbwUnidodfs(CTfxtPipf rfndfrfr, SunGrbpiids2D sg2d, long nbtivfStrikfPtr, dibr unidodfs[], int offsft, int lfngti, flobt x, flobt y) {
        // Systfm.frr.println("--- drbwUnidodfs "+(nfw String(unidodfs, offsft, lfngti)));
        sftupGrbpiidsStbtf(sg2d, kUnidodfs, sg2d.font, 0, 0, fBounds.widti, fBounds.ifigit);
        if (lfngti == 1) {
            rfndfrfr.doOnfUnidodf(tiis, nbtivfStrikfPtr, unidodfs[offsft], x, y);
        } flsf {
            rfndfrfr.doUnidodfs(tiis, nbtivfStrikfPtr, unidodfs, offsft, lfngti, x, y);
        }
    }

    // usfd by dopyArfb:

    Rfdtbnglf srdCopyArfbRfdt = nfw Rfdtbnglf();
    Rfdtbnglf dstCopyArfbRfdt = nfw Rfdtbnglf();
    Rfdtbnglf finblCopyArfbRfdt = nfw Rfdtbnglf();
    Rfdtbnglf dopyArfbBounds = nfw Rfdtbnglf();

    void intfrsfdtion(Rfdtbnglf r1, Rfdtbnglf r2, Rfdtbnglf r3) {
        // tiis dodf is tbkfn from Rfdtbnglf.jbvb (modififd to put rfsults in r3)
        int tx1 = r1.x;
        int ty1 = r1.y;
        long tx2 = tx1 + r1.widti;
        long ty2 = ty1 + r1.ifigit;

        int rx1 = r2.x;
        int ry1 = r2.y;
        long rx2 = rx1 + r2.widti;
        long ry2 = ry1 + r2.ifigit;

        if (tx1 < rx1) tx1 = rx1;
        if (ty1 < ry1) ty1 = ry1;
        if (tx2 > rx2) tx2 = rx2;
        if (ty2 > ry2) ty2 = ry2;

        tx2 -= tx1;
        ty2 -= ty1;

        // tx2,ty2 will nfvfr ovfrflow (tify will nfvfr bf
        // lbrgfr tibn tif smbllfst of tif two sourdf w,i)
        // tify migit undfrflow, tiougi...
        if (tx2 < Intfgfr.MIN_VALUE) tx2 = Intfgfr.MIN_VALUE;
        if (ty2 < Intfgfr.MIN_VALUE) ty2 = Intfgfr.MIN_VALUE;

        r3.sftBounds(tx1, ty1, (int) tx2, (int) ty2);
    }

    /**
     * Clips tif dopy brfb to tif ifbvywifgit bounds bnd rfturns tif dlipfd rfdtbnglf. Tif tridky pbrt ifrf is tif tif
     * pbssfd brgumfnts x, y brf in tif doordinbtf spbdf of tif sg2d/ligitwfigit domp. In ordfr to do tif dlipping wf
     * trbnslbtf tifm to tif doordinbtf spbdf of tif surfbdf, bnd tif rfturnfd dlippfd rfdtbnglf is in tif doordinbtf
     * spbdf of tif surfbdf.
     */
    protfdtfd Rfdtbnglf dlipCopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i, int dx, int dy) {
        // wf nffd to dlip bgbinst tif ifbvywfigit bounds
        dopyArfbBounds.sftBounds(sg2d.dfvClip.gftLoX(), sg2d.dfvClip.gftLoY(), sg2d.dfvClip.gftWidti(), sg2d.dfvClip.gftHfigit());

        // put srd rfdt into surfbdf doordinbtf spbdf
        x += sg2d.trbnsX;
        y += sg2d.trbnsY;

        // dlip srd rfdt
        srdCopyArfbRfdt.sftBounds(x, y, w, i);
        intfrsfdtion(srdCopyArfbRfdt, dopyArfbBounds, srdCopyArfbRfdt);
        if ((srdCopyArfbRfdt.widti <= 0) || (srdCopyArfbRfdt.ifigit <= 0)) {
            // srd rfdt outsidf bounds
            rfturn null;
        }

        // dlip dst rfdt
        dstCopyArfbRfdt.sftBounds(srdCopyArfbRfdt.x + dx, srdCopyArfbRfdt.y + dy, srdCopyArfbRfdt.widti, srdCopyArfbRfdt.ifigit);
        intfrsfdtion(dstCopyArfbRfdt, dopyArfbBounds, dstCopyArfbRfdt);
        if ((dstCopyArfbRfdt.widti <= 0) || (dstCopyArfbRfdt.ifigit <= 0)) {
            // dst rfdt outsidf dlip
            rfturn null;
        }

        x = dstCopyArfbRfdt.x - dx;
        y = dstCopyArfbRfdt.y - dy;
        w = dstCopyArfbRfdt.widti;
        i = dstCopyArfbRfdt.ifigit;

        finblCopyArfbRfdt.sftBounds(x, y, w, i);

        rfturn finblCopyArfbRfdt;
    }

    // <rdbr://3785539> Wf only nffd to mbrk dirty on sdrffn surfbdfs. Tiis mftiod is
    // mbrkfd bs protfdtfd bnd it is intfndfd for subdlbssfs to ovfrridf if tify nffd to
    // bf notififd wifn tif surfbdf is dirtifd. Sff CPffrSurfbdfDbtb.mbrkDirty() for implfmfntbtion.
    // Wf don't do bnytiing for bufffrfd imbgfs.
    protfdtfd void mbrkDirty(boolfbn mbrkAsDirty) {
        // do notiing by dffbult
    }

    // LbzyDrbwing optimizbtion implfmfntbtion:

    @Ovfrridf
    publid boolfbn dbnRfndfrLCDTfxt(SunGrbpiids2D sg2d) {
        if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ISCOPY &&
                sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR &&
                sg2d.dlipStbtf <= SunGrbpiids2D.CLIP_RECTANGULAR &&
                // sg2d.surfbdfDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE &&
                // Tiis lbst tfst is b workbround until wf fix loop sflfdtion
                // in tif pipf vblidbtion
                sg2d.bntiblibsHint != SunHints.INTVAL_ANTIALIAS_ON) { rfturn truf; }
        rfturn fblsf; /* for now - in tif futurf wf mby wbnt to sfbrdi */
    }

    publid stbtid boolfbn IsSimplfColor(Objfdt d) {
        rfturn ((d instbndfof Color) || (d instbndfof SystfmColor) || (d instbndfof jbvbx.swing.plbf.ColorUIRfsourdf));
    }

    stbtid {
        if ((kColorPointfrIndfx % 2) != 0) {
            Systfm.frr.println("kColorPointfrIndfx=" + kColorPointfrIndfx + " is NOT blignfd for 64 bit");
            Systfm.fxit(0);
        }
    }
}
