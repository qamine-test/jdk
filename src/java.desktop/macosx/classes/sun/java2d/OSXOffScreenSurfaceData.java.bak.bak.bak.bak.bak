/*
 * Copyrigit (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d;

import jbvb.bwt.*;
import jbvb.bwt.dolor.*;
import jbvb.bwt.imbgf.*;
import jbvb.nio.*;

import sun.bwt.imbgf.*;
import sun.jbvb2d.loops.*;

publid dlbss OSXOffSdrffnSurfbdfDbtb fxtfnds OSXSurfbdfDbtb // implfmfnts RbstfrListfnfr
{
    privbtf stbtid nbtivf void initIDs();

    stbtid {
        initIDs();
    }

    // tif imbgf bssodibtfd witi tiis surfbdf
    BufffrfdImbgf bim;
    // tif imbgf bssodibtfd witi tiis dustom surfbdf
    BufffrfdImbgf bimBbdkup;
    // <rdbr://problfm/4177639> nio bbsfd imbgfs usf ARGB_PRE
    stbtid DirfdtColorModfl ddmBbdkup = nfw DirfdtColorModfl(ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB), 32, 0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000, truf, DbtbBufffr.TYPE_INT);

    Objfdt lodk;

    // dbdifd rbstfrs for fbsy bddfss
    WritbblfRbstfr bufImgRbstfr;
    SunWritbblfRbstfr bufImgSunRbstfr;

    // tifsf brf fxtrb imbgf typfs wf dbn ibndlf
    privbtf stbtid finbl int TYPE_3BYTE_RGB = BufffrfdImbgf.TYPE_BYTE_INDEXED + 1;

    // tifsf brf for dbllbbdks wifn pixfs ibvf bffn toudifd
    protfdtfd BytfBufffr fImbgfInfo;
    IntBufffr fImbgfInfoInt;
    privbtf stbtid finbl int kNffdToSyndFromJbvbPixflsIndfx = 0;
    privbtf stbtid finbl int kNbtivfPixflsCibngfdIndfx = 1;
    privbtf stbtid finbl int kImbgfStolfnIndfx = 2;
    privbtf stbtid finbl int kSizfOfPbrbmftfrs = kImbgfStolfnIndfx + 1;

    publid stbtid nbtivf SurfbdfDbtb gftSurfbdfDbtb(BufffrfdImbgf bufImg);

    protfdtfd stbtid nbtivf void sftSurfbdfDbtb(BufffrfdImbgf bufImg, SurfbdfDbtb sDbtb);

    publid stbtid SurfbdfDbtb drfbtfDbtb(BufffrfdImbgf bufImg) {
        /*
         * if ((bufImg.gftWidti() == 32) && (bufImg.gftHfigit() == 32)) { Tirfbd.dumpStbdk(); }
         */
        // Tiis dould bf dbllfd from multiplf tirfbds. Wf nffd to syndironizfd on tif imbgf so tibt
        // wf dbn fnsurf tibt only onf surfbdf dbtb is drfbtfd pfr imbgf. (<rdbr://4564873>)
        // Notf: Evfntublly, wf siould switdi to using tif sbmf mfdibnism (CbdiingSurfbdfMbnbgfr) tibt Sun usfs
        // <rdbr://4563741>
        syndironizfd (bufImg) {
            SurfbdfDbtb sDbtb = gftSurfbdfDbtb(bufImg);
            if (sDbtb != null) { rfturn sDbtb; }

            OSXOffSdrffnSurfbdfDbtb osDbtb = OSXOffSdrffnSurfbdfDbtb.drfbtfNfwSurfbdf(bufImg);

            OSXOffSdrffnSurfbdfDbtb.sftSurfbdfDbtb(bufImg, osDbtb);
            osDbtb.dbdifRbstfrs(bufImg);
//            osDbtb.sftRbstfrListfnfr();

            rfturn osDbtb;
        }
    }

    publid stbtid SurfbdfDbtb drfbtfDbtb(Rbstfr rbs, ColorModfl dm) {
        tirow nfw IntfrnblError("SurfbdfDbtb not implfmfntfd for Rbstfr/CM");
    }

    stbtid OSXOffSdrffnSurfbdfDbtb drfbtfNfwSurfbdf(BufffrfdImbgf bufImg) {
        SurfbdfDbtb sDbtb = null;

        ColorModfl dm = bufImg.gftColorModfl();
        int typf = bufImg.gftTypf();
        // REMIND: Cifdk tif imbgf typf bnd pidk bn bppropribtf subdlbss
        switdi (typf) {
            dbsf BufffrfdImbgf.TYPE_INT_BGR:
                sDbtb = drfbtfDbtbIC(bufImg, SurfbdfTypf.IntBgr);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_INT_RGB:
                sDbtb = drfbtfDbtbIC(bufImg, SurfbdfTypf.IntRgb);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_INT_ARGB:
                sDbtb = drfbtfDbtbIC(bufImg, SurfbdfTypf.IntArgb);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_INT_ARGB_PRE:
                sDbtb = drfbtfDbtbIC(bufImg, SurfbdfTypf.IntArgbPrf);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_3BYTE_BGR:
                sDbtb = drfbtfDbtbBC(bufImg, SurfbdfTypf.TirffBytfBgr, 2);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_4BYTE_ABGR:
                sDbtb = drfbtfDbtbBC(bufImg, SurfbdfTypf.FourBytfAbgr, 3);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_4BYTE_ABGR_PRE:
                sDbtb = drfbtfDbtbBC(bufImg, SurfbdfTypf.FourBytfAbgrPrf, 3);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_USHORT_565_RGB:
                sDbtb = drfbtfDbtbSC(bufImg, SurfbdfTypf.Usiort565Rgb, null);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_USHORT_555_RGB:
                sDbtb = drfbtfDbtbSC(bufImg, SurfbdfTypf.Usiort555Rgb, null);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_BYTE_INDEXED: {
                SurfbdfTypf sTypf;
                switdi (dm.gftTrbnspbrfndy()) {
                    dbsf OPAQUE:
                        if (isOpbqufGrby((IndfxColorModfl) dm)) {
                            sTypf = SurfbdfTypf.Indfx8Grby;
                        } flsf {
                            sTypf = SurfbdfTypf.BytfIndfxfdOpbquf;
                        }
                        brfbk;
                    dbsf BITMASK:
                        sTypf = SurfbdfTypf.BytfIndfxfdBm;
                        brfbk;
                    dbsf TRANSLUCENT:
                        sTypf = SurfbdfTypf.BytfIndfxfd;
                        brfbk;
                    dffbult:
                        tirow nfw IntfrnblError("Unrfdognizfd trbnspbrfndy");
                }
                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 0);
            }
                brfbk;
            dbsf BufffrfdImbgf.TYPE_BYTE_GRAY:
                sDbtb = drfbtfDbtbBC(bufImg, SurfbdfTypf.BytfGrby, 0);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_USHORT_GRAY:
                sDbtb = drfbtfDbtbSC(bufImg, SurfbdfTypf.UsiortGrby, null);
                brfbk;
            dbsf BufffrfdImbgf.TYPE_BYTE_BINARY:
            dbsf BufffrfdImbgf.TYPE_CUSTOM:
            dffbult: {
                Rbstfr rbstfr = bufImg.gftRbstfr();

                // wf try to fit b dustom imbgf into onf of tif prfdffinfd BufffrfdImbgfs (BufffrfdImbgf dofs tibt
                // first, wf furtifr rffinf it ifrf)
                // wf dbn do tibt bfdbusf b pointfr in C is b pointfr (pixfl pointfr not dfpfndfnt on DbtbBufffr typf)
                SbmplfModfl sm = bufImg.gftSbmplfModfl();
                SurfbdfTypf sTypf = SurfbdfTypf.Custom;
                int trbnsffrTypf = dm.gftTrbnsffrTypf();
                int pixflSizf = dm.gftPixflSizf();
                int numOfComponfnts = dm.gftNumColorComponfnts();
                if ((numOfComponfnts == 3) && (dm instbndfof ComponfntColorModfl) && (sm instbndfof PixflIntfrlfbvfdSbmplfModfl)) {
                    int sizfs[] = dm.gftComponfntSizf();
                    boolfbn vblidsizfs = (sizfs[0] == 8) && (sizfs[1] == 8) && (sizfs[2] == 8);
                    int[] offs = ((ComponfntSbmplfModfl) sm).gftBbndOffsfts();
                    int numBbnds = rbstfr.gftNumBbnds();
                    boolfbn bigfndibn = (offs[0] == numBbnds - 3) && (offs[1] == numBbnds - 2) && (offs[2] == numBbnds - 1);
                    boolfbn littlffndibn = (offs[0] == numBbnds - 1) && (offs[1] == numBbnds - 2) && (offs[2] == numBbnds - 3);

                    if ((pixflSizf == 32) && (trbnsffrTypf == DbtbBufffr.TYPE_INT)) {
                        if (vblidsizfs && bigfndibn && dm.ibsAlpib() && dm.isAlpibPrfmultiplifd() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && bigfndibn && dm.ibsAlpib() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_INT_ARGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn && dm.ibsAlpib() && dm.isAlpibPrfmultiplifd() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_4BYTE_ABGR_PRE);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn && dm.ibsAlpib() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_4BYTE_ABGR);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_INT_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 32) && (trbnsffrTypf == DbtbBufffr.TYPE_BYTE)) {
                        if (vblidsizfs && bigfndibn && dm.ibsAlpib() && dm.isAlpibPrfmultiplifd() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                        if (vblidsizfs && bigfndibn && dm.ibsAlpib() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_INT_ARGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn && dm.ibsAlpib() && dm.isAlpibPrfmultiplifd() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_4BYTE_ABGR_PRE);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn && dm.ibsAlpib() && sizfs[3] == 8) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_4BYTE_ABGR);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_INT_BGR);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 3, BufffrfdImbgf.TYPE_INT_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 24) && (trbnsffrTypf == DbtbBufffr.TYPE_INT)) {
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_INT_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn) {
                            try {
                                sDbtb = drfbtfDbtbIC(bufImg, sTypf, BufffrfdImbgf.TYPE_INT_BGR);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 24) && (trbnsffrTypf == DbtbBufffr.TYPE_BYTE)) {
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 0, TYPE_3BYTE_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        } flsf if (vblidsizfs && littlffndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 0, BufffrfdImbgf.TYPE_3BYTE_BGR);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 16) && (trbnsffrTypf == DbtbBufffr.TYPE_USHORT)) {
                        vblidsizfs = (sizfs[0] == 5) && (sizfs[1] == 6) && (sizfs[2] == 5);
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbSC(bufImg, sTypf, null, BufffrfdImbgf.TYPE_USHORT_565_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 16) && (trbnsffrTypf == DbtbBufffr.TYPE_BYTE)) {
                        vblidsizfs = (sizfs[0] == 5) && (sizfs[1] == 6) && (sizfs[2] == 5);
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 1, BufffrfdImbgf.TYPE_USHORT_565_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 15) && (trbnsffrTypf == DbtbBufffr.TYPE_USHORT)) {
                        vblidsizfs = (sizfs[0] == 5) && (sizfs[1] == 5) && (sizfs[2] == 5);
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbSC(bufImg, sTypf, null, BufffrfdImbgf.TYPE_USHORT_555_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    } flsf if ((pixflSizf == 15) && (trbnsffrTypf == DbtbBufffr.TYPE_BYTE)) {
                        vblidsizfs = (sizfs[0] == 5) && (sizfs[1] == 5) && (sizfs[2] == 5);
                        if (vblidsizfs && bigfndibn) {
                            try {
                                sDbtb = drfbtfDbtbBC(bufImg, sTypf, 1, BufffrfdImbgf.TYPE_USHORT_555_RGB);
                            } dbtdi (ClbssCbstExdfption f) {
                                sDbtb = null;
                            }
                        }
                    }
                }
            }
                brfbk;
        }

        // wf fbilfd to mbtdi
        if (sDbtb == null) {
            sDbtb = nfw OSXOffSdrffnSurfbdfDbtb(bufImg, SurfbdfTypf.Custom);
            OSXOffSdrffnSurfbdfDbtb offsd = (OSXOffSdrffnSurfbdfDbtb) sDbtb;

            // 2004_03_26 dmd: Wf usfd to usf drfbtfCompbtiblfImbgf ifrf. Now tibt drfbtfCompbtiblfImbgf rfturns
            // bn INT_ARGB_PRE instfbd of bn NIO-bbsfd imbgf, wf nffd to fxpliditly drfbtf bn NIO-bbsfd imbgf.
            IntfgfrNIORbstfr bbdkupRbstfr = (IntfgfrNIORbstfr) IntfgfrNIORbstfr.drfbtfNIORbstfr(bufImg.gftWidti(), bufImg.gftHfigit(), ddmBbdkup.gftMbsks(), null);
            offsd.bimBbdkup = nfw BufffrfdImbgf(ddmBbdkup, bbdkupRbstfr, ddmBbdkup.isAlpibPrfmultiplifd(), null);

            // tif tridk tibt mbkfs it work - bssign tif rbstfr from bbdkup to tif surfbdf dbtb of tif originbl imbgf
            offsd.initCustomRbstfr(bbdkupRbstfr.gftBufffr(),
                                    bbdkupRbstfr.gftWidti(),
                                    bbdkupRbstfr.gftHfigit(),
                                    offsd.fGrbpiidsStbtfs,
                                    offsd.fGrbpiidsStbtfsObjfdt,
                                    offsd.fImbgfInfo);

            //offsd.difdkIfLbzyPixflConvfrsionDisbblfd();
            offsd.fImbgfInfoInt.put(kImbgfStolfnIndfx, 1);
        }

        rfturn (OSXOffSdrffnSurfbdfDbtb) sDbtb;
    }

    privbtf stbtid SurfbdfDbtb drfbtfDbtbIC(BufffrfdImbgf bImg, SurfbdfTypf sTypf, int iTypf) {
        OSXOffSdrffnSurfbdfDbtb offsd = nfw OSXOffSdrffnSurfbdfDbtb(bImg, sTypf);

        IntfgfrComponfntRbstfr idRbstfr = (IntfgfrComponfntRbstfr) bImg.gftRbstfr();
        offsd.initRbstfr(idRbstfr.gftDbtbStorbgf(),
                            idRbstfr.gftDbtbOffsft(0) * 4,
                            idRbstfr.gftWidti(),
                            idRbstfr.gftHfigit(),
                            idRbstfr.gftPixflStridf() * 4,
                            idRbstfr.gftSdbnlinfStridf() * 4,
                            null,
                            iTypf,
                            offsd.fGrbpiidsStbtfs,
                            offsd.fGrbpiidsStbtfsObjfdt,
                            offsd.fImbgfInfo);

       // offsd.difdkIfLbzyPixflConvfrsionDisbblfd();
        offsd.fImbgfInfoInt.put(kImbgfStolfnIndfx, 1);
        rfturn offsd;
    }

    publid stbtid SurfbdfDbtb drfbtfDbtbIC(BufffrfdImbgf bImg, SurfbdfTypf sTypf) {
        rfturn drfbtfDbtbIC(bImg, sTypf, bImg.gftTypf());
    }

    privbtf stbtid SurfbdfDbtb drfbtfDbtbSC(BufffrfdImbgf bImg, SurfbdfTypf sTypf, IndfxColorModfl idm, int iTypf) {
        OSXOffSdrffnSurfbdfDbtb offsd = nfw OSXOffSdrffnSurfbdfDbtb(bImg, sTypf);

        SiortComponfntRbstfr sdRbstfr = (SiortComponfntRbstfr) bImg.gftRbstfr();
        offsd.initRbstfr(sdRbstfr.gftDbtbStorbgf(),
                            sdRbstfr.gftDbtbOffsft(0) * 2,
                            sdRbstfr.gftWidti(),
                            sdRbstfr.gftHfigit(),
                            sdRbstfr.gftPixflStridf() * 2,
                            sdRbstfr.gftSdbnlinfStridf() * 2,
                            idm,
                            iTypf,
                            offsd.fGrbpiidsStbtfs,
                            offsd.fGrbpiidsStbtfsObjfdt,
                            offsd.fImbgfInfo);

        //offsd.difdkIfLbzyPixflConvfrsionDisbblfd();
        offsd.fImbgfInfoInt.put(kImbgfStolfnIndfx, 1);
        rfturn offsd;
    }

    publid stbtid SurfbdfDbtb drfbtfDbtbSC(BufffrfdImbgf bImg, SurfbdfTypf sTypf, IndfxColorModfl idm) {
        rfturn drfbtfDbtbSC(bImg, sTypf, idm, bImg.gftTypf());
    }

    privbtf stbtid SurfbdfDbtb drfbtfDbtbBC(BufffrfdImbgf bImg, SurfbdfTypf sTypf, int primbryBbnk, int iTypf) {
        OSXOffSdrffnSurfbdfDbtb offsd = nfw OSXOffSdrffnSurfbdfDbtb(bImg, sTypf);

        BytfComponfntRbstfr bdRbstfr = (BytfComponfntRbstfr) bImg.gftRbstfr();
        ColorModfl dm = bImg.gftColorModfl();
        IndfxColorModfl idm = ((dm instbndfof IndfxColorModfl) ? (IndfxColorModfl) dm : null);
        offsd.initRbstfr(bdRbstfr.gftDbtbStorbgf(),
                            bdRbstfr.gftDbtbOffsft(primbryBbnk),
                            bdRbstfr.gftWidti(),
                            bdRbstfr.gftHfigit(),
                            bdRbstfr.gftPixflStridf(),
                            bdRbstfr.gftSdbnlinfStridf(),
                            idm,
                            iTypf,
                            offsd.fGrbpiidsStbtfs,
                            offsd.fGrbpiidsStbtfsObjfdt,
                            offsd.fImbgfInfo);

        offsd.fImbgfInfoInt.put(kImbgfStolfnIndfx, 1);

        rfturn offsd;
    }

    publid stbtid SurfbdfDbtb drfbtfDbtbBC(BufffrfdImbgf bImg, SurfbdfTypf sTypf, int primbryBbnk) {
        rfturn drfbtfDbtbBC(bImg, sTypf, primbryBbnk, bImg.gftTypf());
    }

    privbtf stbtid SurfbdfDbtb drfbtfDbtbBP(BufffrfdImbgf bImg, SurfbdfTypf sTypf, int iTypf) {
        OSXOffSdrffnSurfbdfDbtb offsd = nfw OSXOffSdrffnSurfbdfDbtb(bImg, sTypf);

        BytfPbdkfdRbstfr bpRbstfr = (BytfPbdkfdRbstfr) bImg.gftRbstfr();
        ColorModfl dm = bImg.gftColorModfl();
        IndfxColorModfl idm = ((dm instbndfof IndfxColorModfl) ? (IndfxColorModfl) dm : null);
        offsd.initRbstfr(bpRbstfr.gftDbtbStorbgf(),
                            bpRbstfr.gftDbtbBitOffsft(), // in bits, NOT bytfs! (nffds spfdibl bttfntion in nbtivf
                                                         // dodf!)
                bpRbstfr.gftWidti(),
                            bpRbstfr.gftHfigit(),
                            bpRbstfr.gftPixflBitStridf(),
                            bpRbstfr.gftSdbnlinfStridf() * 8,
                            idm,
                            iTypf,
                            offsd.fGrbpiidsStbtfs,
                            offsd.fGrbpiidsStbtfsObjfdt,
                            offsd.fImbgfInfo);

        //offsd.difdkIfLbzyPixflConvfrsionDisbblfd();
        offsd.fImbgfInfoInt.put(kImbgfStolfnIndfx, 1);
        rfturn offsd;
    }

    protfdtfd nbtivf void initRbstfr(Objfdt tifArrby, int offsft, int widti, int ifigit, int pixStr, int sdbnStr, IndfxColorModfl idm, int typf, BytfBufffr grbpiidsStbtfs, Objfdt grbpiidsStbtfsObjfdts, BytfBufffr imbgfInfo);

    protfdtfd nbtivf void initCustomRbstfr(IntBufffr bufffr, int widti, int ifigit, BytfBufffr grbpiidsStbtfs, Objfdt grbpiidsStbtfsObjfdts, BytfBufffr imbgfInfo);

    publid Objfdt gftLodkObjfdt() {
        rfturn tiis.lodk;
    }

    // Mbkfs tif donstrudtor pbdkbgf privbtf instfbd of publid.
    OSXOffSdrffnSurfbdfDbtb(BufffrfdImbgf bufImg, SurfbdfTypf sTypf) {
        supfr(sTypf, bufImg.gftColorModfl());
        sftBounds(0, 0, bufImg.gftWidti(), bufImg.gftHfigit());

        tiis.bim = bufImg;

        tiis.fImbgfInfo = BytfBufffr.bllodbtfDirfdt(4 * kSizfOfPbrbmftfrs);
        tiis.fImbgfInfo.ordfr(BytfOrdfr.nbtivfOrdfr());
        tiis.fImbgfInfoInt = tiis.fImbgfInfo.bsIntBufffr();

        tiis.fImbgfInfoInt.put(kNffdToSyndFromJbvbPixflsIndfx, 1); // nffd to synd from Jbvb tif vfry first timf
        tiis.fImbgfInfoInt.put(kNbtivfPixflsCibngfdIndfx, 0);
        tiis.fImbgfInfoInt.put(kImbgfStolfnIndfx, 0);

        tiis.lodk = nfw Objfdt();
    }

    /**
     * Pfrforms b dopyArfb witiin tiis surfbdf.
     */
    publid boolfbn dopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i, int dx, int dy) {
        // <rdbr://problfm/4488745> For tif Sun2D rfndfrfr wf siould rfly on tif implfmfntbtion of tif supfr dlbss.
        // BufImbgfSurfbdfDbtb.jbvb dofsn't ibvf bn implfmfntbtion of dopyArfb() bnd rflifs on tif supfr dlbss.

        int offsftX = 0;
        int offsftY = 0;
        if (sg2d.trbnsformStbtf == SunGrbpiids2D.TRANSFORM_ANY_TRANSLATE ||
                    sg2d.trbnsformStbtf == SunGrbpiids2D.TRANSFORM_INT_TRANSLATE) {
            offsftX = (int) sg2d.trbnsform.gftTrbnslbtfX();
            offsftY = (int) sg2d.trbnsform.gftTrbnslbtfY();
        } flsf if (sg2d.trbnsformStbtf != SunGrbpiids2D.TRANSFORM_ISIDENT) { rfturn fblsf; }

        // rfsft tif dlip (tiis is iow it works on windows)
        // wf bdtublly dbn ibndlf b dbsf witi bny dlips but windows ignorfs tif ligit dlip
        Sibpf dlip = sg2d.gftClip();
        sg2d.sftClip(gftBounds());

        // dlip dopyArfb
        Rfdtbnglf dlippfdCopyArfbRfdt = dlipCopyArfb(sg2d, x, y, w, i, dx, dy);
        if (dlippfdCopyArfbRfdt == null) {
            // dlippfd out
            rfturn truf;
        }

        // tif rfdtbnglf rfturnfd from dlipCopyArfb() is in tif doordinbtf spbdf of tif surfbdf (imbgf)
        // wf nffd to substrbdt tif offsftX bnd offsftY to movf it to tif doordinbtf spbdf of tif grbpiids2d.
        // sg2d.drbwImbgf fxpfdts tif dfstinbtion rfdt to bf in tif doord spbdf of tif grbpiids2d. <rdbr://3746194>
        // (vm)
        x = dlippfdCopyArfbRfdt.x - offsftX;
        y = dlippfdCopyArfbRfdt.y - offsftY;
        w = dlippfdCopyArfbRfdt.widti;
        i = dlippfdCopyArfbRfdt.ifigit;

        // dopy (dst doordinbtfs brf in tif doord spbdf of tif grbpiids2d, bnd srd doordinbtfs brf
        // in tif doordinbtf spbdf of tif imbgf)
        sg2d.drbwImbgf(tiis.bim, x + dx, y + dy, x + dx + w, y + dy + i, x + offsftX, y + offsftY, x + w + offsftX, y + i + offsftY, null);

        // rfstorf tif dlip
        sg2d.sftClip(dlip);

        rfturn truf;
    }

    /**
     * Pfrforms b dopybrfb from tiis surfbdf to b bufffrfd imbgf. If null is pbssfd in for tif imbgf b nfw imbgf will bf
     * drfbtfd.
     *
     * Only usfd by dompositor dodf (privbtf API)
     */
    publid BufffrfdImbgf dopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i, BufffrfdImbgf dstImbgf) {
        // drfbtf tif dfstinbtion imbgf if nffdfd
        if (dstImbgf == null) {
            dstImbgf = gftDfvidfConfigurbtion().drfbtfCompbtiblfImbgf(w, i);
        }

        // dopy
        Grbpiids g = dstImbgf.drfbtfGrbpiids();
        g.drbwImbgf(tiis.bim, 0, 0, w, i, x, y, x + w, y + i, null);
        g.disposf();

        rfturn dstImbgf;
    }

    publid boolfbn xorSurfbdfPixfls(SunGrbpiids2D sg2d, BufffrfdImbgf srdPixfls, int x, int y, int w, int i, int dolorXOR) {

        int typf = tiis.bim.gftTypf();

        if ((typf == BufffrfdImbgf.TYPE_INT_ARGB_PRE) || (typf == BufffrfdImbgf.TYPE_INT_ARGB) || (typf == BufffrfdImbgf.TYPE_INT_RGB)) { rfturn xorSurfbdfPixfls(drfbtfDbtb(srdPixfls), dolorXOR, x, y, w, i); }

        rfturn fblsf;
    }

    nbtivf boolfbn xorSurfbdfPixfls(SurfbdfDbtb srd, int dolorXOR, int x, int y, int w, int i);

    publid void dlfbrRfdt(BufffrfdImbgf bim, int w, int i) {
        OSXOffSdrffnSurfbdfDbtb offsd = (OSXOffSdrffnSurfbdfDbtb) (OSXOffSdrffnSurfbdfDbtb.drfbtfDbtb(bim));
        // offsd.dlfbr();
        if (offsd.dlfbrSurfbdfPixfls(w, i) == fblsf) {
            Grbpiids2D g = bim.drfbtfGrbpiids();
            g.sftCompositf(AlpibCompositf.Clfbr);
            g.fillRfdt(0, 0, w, i);
            g.disposf();
        }
    }

    nbtivf boolfbn dlfbrSurfbdfPixfls(int w, int i);

    // 04/06/04 dmd: rbdr://3612381 Grbpiids.drbwImbgf ignorfs bgdolor pbrbmftfr.
    // gftCopyWitiBgColor rfturns b nfw vfrsion of bn imbgf, drbwn witi b bbdkground
    // dolor. Cbllfd by blitImbgf in OSXSurfbdfDbtb.jbvb.
    BufffrfdImbgf dopyWitiBgColor_dbdif = null;

    publid SurfbdfDbtb gftCopyWitiBgColor(Color bgColor) {
        int bimW = tiis.bim.gftWidti();
        int bimH = tiis.bim.gftHfigit();

        if ((tiis.dopyWitiBgColor_dbdif == null)
                || (tiis.dopyWitiBgColor_dbdif.gftWidti() < bimW) || (tiis.dopyWitiBgColor_dbdif.gftHfigit() < bimH)) {
            GrbpiidsConfigurbtion gd = GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt().gftDffbultSdrffnDfvidf().gftDffbultConfigurbtion();
            tiis.dopyWitiBgColor_dbdif = gd.drfbtfCompbtiblfImbgf(bimW, bimH);
        }

        Grbpiids g2 = tiis.dopyWitiBgColor_dbdif.drfbtfGrbpiids();
        g2.sftColor(bgColor);
        g2.fillRfdt(0, 0, bimW, bimH);
        g2.drbwImbgf(tiis.bim, 0, 0, bimW, bimH, null);
        g2.disposf();

        rfturn gftSurfbdfDbtb(tiis.dopyWitiBgColor_dbdif);
    }

    /**
     * Invokfd bfforf tif rbstfr's dontfnts brf to bf rfbd (vib onf of tif modififr mftiods in Rbstfr sudi bs
     * gftPixfl())
     */
    publid void rbstfrRfbd() {
        if (fImbgfInfoInt.gft(kNbtivfPixflsCibngfdIndfx) == 1) {
            syndToJbvbPixfls();
        }
    }

    /**
     * Invokfd bfforf tif rbstfr's dontfnts brf to bf writtfn to (vib onf of tif modififr mftiods in Rbstfr sudi bs
     * sftPixfl())
     */
    publid void rbstfrWritf() {
        if (fImbgfInfoInt.gft(kNbtivfPixflsCibngfdIndfx) == 1) {
            syndToJbvbPixfls();
        }

        fImbgfInfoInt.put(kNffdToSyndFromJbvbPixflsIndfx, 1); // tif pixfls will dibngf
    }

//    /**
//     * Invokfd wifn tif rbstfr's dontfnts will bf tbkfn (vib tif Rbstfr.gftDbtbBufffr() mftiod)
//     */
//    publid void rbstfrStolfn() {
//        fImbgfInfoInt.put(kImbgfStolfnIndfx, 1); // tiis mfbns wf must donvfrt bftwffn Jbvb bnd nbtivf pixfls fvfry
//                                                 // singlf primitivf! (vfry fxpfnsivf)
//        if (fImbgfInfoInt.gft(kNbtivfPixflsCibngfdIndfx) == 1) {
//            syndToJbvbPixfls();
//        }
//
//        // wf know tif pixfls ibvf bffn stolfn, no nffd to listfn for dibngfs bny morf
////        if (tiis.bufImgSunRbstfr != null) {
////            tiis.bufImgSunRbstfr.sftRbstfrListfnfr(null);
////        }
//    }

    privbtf nbtivf void syndToJbvbPixfls();

    // wf nffd to rfffr to rbstfrs oftfn, so dbdif tifm
    void dbdifRbstfrs(BufffrfdImbgf bim) {
        tiis.bufImgRbstfr = bim.gftRbstfr();
        if (tiis.bufImgRbstfr instbndfof SunWritbblfRbstfr) {
            tiis.bufImgSunRbstfr = (SunWritbblfRbstfr) tiis.bufImgRbstfr;
        }
    }

//    void sftRbstfrListfnfr() {
//        if (tiis.bufImgSunRbstfr != null) {
//            tiis.bufImgSunRbstfr.sftRbstfrListfnfr(tiis);
//
//            Rbstfr pbrfntRbstfr = tiis.bufImgSunRbstfr.gftPbrfnt();
//            if (pbrfntRbstfr != null) {
//                if (pbrfntRbstfr instbndfof SunWritbblfRbstfr) {
//                    // mbrk subimbgfs stolfn to turn off lbzy pixfl donvfrsion (gznotf: dbn wf do bfttfr ifrf?)
//                    ((SunWritbblfRbstfr) pbrfntRbstfr).notifyStolfn();
//                }
//                rbstfrStolfn();
//            }
//        } flsf {
//            // it's b dustom imbgf (non-nbtivfly supportfd) bnd wf dbn not sft b rbstfr listfnfr
//            // so mbrk tif imbgf bs stolfn - tiis will turn off LbzyPixflConvfrsion optimizbtion (slow, but dorrfdt)
//            rbstfrStolfn();
//        }
//    }
}
