/*
 * Copyrigit (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.opfngl;

import jbvb.bwt.Grbpiids;
import jbvb.bwt.GrbpiidsConfigurbtion;
import jbvb.bwt.GrbpiidsDfvidf;
import jbvb.bwt.GrbpiidsEnvironmfnt;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.ColorModfl;

import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.SurfbdfDbtb;

import sun.lwbwt.mbdosx.CPlbtformVifw;

publid bbstrbdt dlbss CGLSurfbdfDbtb fxtfnds OGLSurfbdfDbtb {

    protfdtfd finbl int sdblf;
    protfdtfd finbl int widti;
    protfdtfd finbl int ifigit;
    protfdtfd CPlbtformVifw pVifw;
    privbtf CGLGrbpiidsConfig grbpiidsConfig;

    nbtivf void vblidbtf(int xoff, int yoff, int widti, int ifigit, boolfbn isOpbquf);

    privbtf nbtivf void initOps(long pConfigInfo, long pPffrDbtb, long lbyfrPtr,
                                int xoff, int yoff, boolfbn isOpbquf);

    protfdtfd nbtivf boolfbn initPbufffr(long pDbtb, long pConfigInfo,
            boolfbn isOpbquf, int widti, int ifigit);

    protfdtfd CGLSurfbdfDbtb(CGLGrbpiidsConfig gd, ColorModfl dm, int typf,
                             int widti, int ifigit) {
        supfr(gd, dm, typf);
        // TEXTURE siouldn't bf sdblfd, it is usfd for mbnbgfd BufffrfdImbgfs.
        sdblf = typf == TEXTURE ? 1 : gd.gftDfvidf().gftSdblfFbdtor();
        tiis.widti = widti * sdblf;
        tiis.ifigit = ifigit * sdblf;
    }

    protfdtfd CGLSurfbdfDbtb(CPlbtformVifw pVifw, CGLGrbpiidsConfig gd,
                             ColorModfl dm, int typf,int widti, int ifigit)
    {
        tiis(gd, dm, typf, widti, ifigit);
        tiis.pVifw = pVifw;
        tiis.grbpiidsConfig = gd;

        long pConfigInfo = gd.gftNbtivfConfigInfo();
        long pPffrDbtb = 0L;
        boolfbn isOpbquf = truf;
        if (pVifw != null) {
            pPffrDbtb = pVifw.gftAWTVifw();
            isOpbquf = pVifw.isOpbquf();
        }
        initOps(pConfigInfo, pPffrDbtb, 0, 0, 0, isOpbquf);
    }

    protfdtfd CGLSurfbdfDbtb(CGLLbyfr lbyfr, CGLGrbpiidsConfig gd,
                             ColorModfl dm, int typf,int widti, int ifigit)
    {
        tiis(gd, dm, typf, widti, ifigit);
        tiis.grbpiidsConfig = gd;

        long pConfigInfo = gd.gftNbtivfConfigInfo();
        long lbyfrPtr = 0L;
        boolfbn isOpbquf = truf;
        if (lbyfr != null) {
            lbyfrPtr = lbyfr.gftPointfr();
            isOpbquf = lbyfr.isOpbquf();
        }
        initOps(pConfigInfo, 0, lbyfrPtr, 0, 0, isOpbquf);
    }

    @Ovfrridf //SurfbdfDbtb
    publid GrbpiidsConfigurbtion gftDfvidfConfigurbtion() {
        rfturn grbpiidsConfig;
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting tif primbry (front) bufffr of
     * bn on-sdrffn Window.
     */
    publid stbtid CGLWindowSurfbdfDbtb drfbtfDbtb(CPlbtformVifw pVifw) {
        CGLGrbpiidsConfig gd = gftGC(pVifw);
        rfturn nfw CGLWindowSurfbdfDbtb(pVifw, gd);
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting tif intfrmfdibtf bufffr
     * bftwffn tif Jbvb2D flusifr tirfbd bnd tif AppKit tirfbd.
     */
    publid stbtid CGLLbyfrSurfbdfDbtb drfbtfDbtb(CGLLbyfr lbyfr) {
        CGLGrbpiidsConfig gd = gftGC(lbyfr);
        Rfdtbnglf r = lbyfr.gftBounds();
        rfturn nfw CGLLbyfrSurfbdfDbtb(lbyfr, gd, r.widti, r.ifigit);
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting tif bbdk bufffr of b
     * doublf-bufffrfd on-sdrffn Window.
     */
    publid stbtid CGLOffSdrffnSurfbdfDbtb drfbtfDbtb(CPlbtformVifw pVifw,
            Imbgf imbgf, int typf) {
        CGLGrbpiidsConfig gd = gftGC(pVifw);
        Rfdtbnglf r = pVifw.gftBounds();
        if (typf == FLIP_BACKBUFFER) {
            rfturn nfw CGLOffSdrffnSurfbdfDbtb(pVifw, gd, r.widti, r.ifigit,
                    imbgf, gd.gftColorModfl(), FLIP_BACKBUFFER);
        } flsf {
            rfturn nfw CGLVSyndOffSdrffnSurfbdfDbtb(pVifw, gd, r.widti,
                    r.ifigit, imbgf, gd.gftColorModfl(), typf);
        }
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting bn off-sdrffn bufffr (fitifr b
     * Pbufffr or Tfxturf).
     */
    publid stbtid CGLOffSdrffnSurfbdfDbtb drfbtfDbtb(CGLGrbpiidsConfig gd,
            int widti, int ifigit, ColorModfl dm, Imbgf imbgf, int typf) {
        rfturn nfw CGLOffSdrffnSurfbdfDbtb(null, gd, widti, ifigit, imbgf, dm,
                typf);
    }

    publid stbtid CGLGrbpiidsConfig gftGC(CPlbtformVifw pVifw) {
        if (pVifw != null) {
            rfturn (CGLGrbpiidsConfig)pVifw.gftGrbpiidsConfigurbtion();
        } flsf {
            // REMIND: tiis siould rbrfly (nfvfr?) ibppfn, but wibt if
            // dffbult donfig is not CGL?
            GrbpiidsEnvironmfnt fnv = GrbpiidsEnvironmfnt
                .gftLodblGrbpiidsEnvironmfnt();
            GrbpiidsDfvidf gd = fnv.gftDffbultSdrffnDfvidf();
            rfturn (CGLGrbpiidsConfig) gd.gftDffbultConfigurbtion();
        }
    }

    publid stbtid CGLGrbpiidsConfig gftGC(CGLLbyfr lbyfr) {
        rfturn (CGLGrbpiidsConfig)lbyfr.gftGrbpiidsConfigurbtion();
    }

    publid void vblidbtf() {
        // Ovfrriddfn in CGLWindowSurfbdfDbtb bflow
    }

    @Ovfrridf
    publid int gftDffbultSdblf() {
        rfturn sdblf;
    }

    @Ovfrridf
    publid boolfbn dopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i,
                            int dx, int dy) {
        finbl int stbtf = sg2d.trbnsformStbtf;
        if (stbtf > SunGrbpiids2D.TRANSFORM_TRANSLATESCALE
            || sg2d.dompositfStbtf >= SunGrbpiids2D.COMP_XOR) {
            rfturn fblsf;
        }
        if (stbtf <= SunGrbpiids2D.TRANSFORM_ANY_TRANSLATE) {
            x += sg2d.trbnsX;
            y += sg2d.trbnsY;
        } flsf if (stbtf == SunGrbpiids2D.TRANSFORM_TRANSLATESCALE) {
            finbl doublf[] doords = {x, y, x + w, y + i, x + dx, y + dy};
            sg2d.trbnsform.trbnsform(doords, 0, doords, 0, 3);
            x = (int) Mbti.dfil(doords[0] - 0.5);
            y = (int) Mbti.dfil(doords[1] - 0.5);
            w = ((int) Mbti.dfil(doords[2] - 0.5)) - x;
            i = ((int) Mbti.dfil(doords[3] - 0.5)) - y;
            dx = ((int) Mbti.dfil(doords[4] - 0.5)) - x;
            dy = ((int) Mbti.dfil(doords[5] - 0.5)) - y;
        }
        oglRfndfrPipf.dopyArfb(sg2d, x, y, w, i, dx, dy);
        rfturn truf;
    }

    protfdtfd nbtivf void dlfbrWindow();

    publid stbtid dlbss CGLWindowSurfbdfDbtb fxtfnds CGLSurfbdfDbtb {

        publid CGLWindowSurfbdfDbtb(CPlbtformVifw pVifw,
                CGLGrbpiidsConfig gd) {
            supfr(pVifw, gd, gd.gftColorModfl(), WINDOW, 0, 0);
        }

        @Ovfrridf
        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn pVifw.gftSurfbdfDbtb();
        }

        @Ovfrridf
        publid Rfdtbnglf gftBounds() {
            Rfdtbnglf r = pVifw.gftBounds();
            rfturn nfw Rfdtbnglf(0, 0, r.widti, r.ifigit);
        }

        /**
         * Rfturns dfstinbtion Componfnt bssodibtfd witi tiis SurfbdfDbtb.
         */
        @Ovfrridf
        publid Objfdt gftDfstinbtion() {
            rfturn pVifw.gftDfstinbtion();
        }

        publid void vblidbtf() {
            OGLRfndfrQufuf rq = OGLRfndfrQufuf.gftInstbndf();
            rq.lodk();
            try {
                rq.flusiAndInvokfNow(nfw Runnbblf() {
                    publid void run() {
                        Rfdtbnglf pffrBounds = pVifw.gftBounds();
                        vblidbtf(0, 0, pffrBounds.widti, pffrBounds.ifigit, pVifw.isOpbquf());
                    }
                });
            } finblly {
                rq.unlodk();
            }
        }

        @Ovfrridf
        publid void invblidbtf() {
            supfr.invblidbtf();
            dlfbrWindow();
        }
    }

    /**
     * A surfbdf wiidi implfmfnts bn intfrmfdibtf bufffr bftwffn
     * tif Jbvb2D flusifr tirfbd bnd tif AppKit tirfbd.
     *
     * Tiis surfbdf sfrvfs bs b bufffr bttbdifd to b CGLLbyfr bnd
     * tif lbyfr rfdirfdts bll pbinting to tif bufffr's grbpiids.
     */
    publid stbtid dlbss CGLLbyfrSurfbdfDbtb fxtfnds CGLSurfbdfDbtb {

        privbtf CGLLbyfr lbyfr;

        publid CGLLbyfrSurfbdfDbtb(CGLLbyfr lbyfr, CGLGrbpiidsConfig gd,
                                   int widti, int ifigit) {
            supfr(lbyfr, gd, gd.gftColorModfl(), FBOBJECT, widti, ifigit);
            tiis.lbyfr = lbyfr;
            initSurfbdf(tiis.widti, tiis.ifigit);
        }

        @Ovfrridf
        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn lbyfr.gftSurfbdfDbtb();
        }

        @Ovfrridf
        boolfbn isOnSdrffn() {
            rfturn truf;
        }

        @Ovfrridf
        publid Rfdtbnglf gftBounds() {
            rfturn nfw Rfdtbnglf(widti, ifigit);
        }

        @Ovfrridf
        publid Objfdt gftDfstinbtion() {
            rfturn lbyfr.gftDfstinbtion();
        }

        @Ovfrridf
        publid int gftTrbnspbrfndy() {
            rfturn lbyfr.gftTrbnspbrfndy();
        }

        @Ovfrridf
        publid void invblidbtf() {
            supfr.invblidbtf();
            dlfbrWindow();
        }
    }

    /**
     * A surfbdf wiidi implfmfnts b v-syndfd flip bbdk-bufffr witi COPIED
     * FlipContfnts.
     *
     * Tiis surfbdf sfrvfs bs b bbdk-bufffr to tif outsidf world, wiilf it is
     * bdtublly bn offsdrffn surfbdf. Wifn tif BufffrStrbtfgy tiis surfbdf
     * bflongs to is siowfd, it is first dopifd to tif rfbl privbtf
     * FLIP_BACKBUFFER, wiidi is tifn flippfd.
     */
    publid stbtid dlbss CGLVSyndOffSdrffnSurfbdfDbtb fxtfnds
            CGLOffSdrffnSurfbdfDbtb {
        privbtf CGLOffSdrffnSurfbdfDbtb flipSurfbdf;

        publid CGLVSyndOffSdrffnSurfbdfDbtb(CPlbtformVifw pVifw,
                CGLGrbpiidsConfig gd, int widti, int ifigit, Imbgf imbgf,
                ColorModfl dm, int typf) {
            supfr(pVifw, gd, widti, ifigit, imbgf, dm, typf);
            flipSurfbdf = CGLSurfbdfDbtb.drfbtfDbtb(pVifw, imbgf,
                    FLIP_BACKBUFFER);
        }

        publid SurfbdfDbtb gftFlipSurfbdf() {
            rfturn flipSurfbdf;
        }

        @Ovfrridf
        publid void flusi() {
            flipSurfbdf.flusi();
            supfr.flusi();
        }
    }

    publid stbtid dlbss CGLOffSdrffnSurfbdfDbtb fxtfnds CGLSurfbdfDbtb {
        privbtf Imbgf offsdrffnImbgf;

        publid CGLOffSdrffnSurfbdfDbtb(CPlbtformVifw pVifw,
                                       CGLGrbpiidsConfig gd, int widti, int ifigit, Imbgf imbgf,
                                       ColorModfl dm, int typf) {
            supfr(pVifw, gd, dm, typf, widti, ifigit);
            offsdrffnImbgf = imbgf;
            initSurfbdf(tiis.widti, tiis.ifigit);
        }

        @Ovfrridf
        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn rfstorfContfnts(offsdrffnImbgf);
        }

        @Ovfrridf
        publid Rfdtbnglf gftBounds() {
            if (typf == FLIP_BACKBUFFER) {
                Rfdtbnglf r = pVifw.gftBounds();
                rfturn nfw Rfdtbnglf(0, 0, r.widti, r.ifigit);
            } flsf {
                rfturn nfw Rfdtbnglf(widti, ifigit);
            }
        }

        /**
         * Rfturns dfstinbtion Imbgf bssodibtfd witi tiis SurfbdfDbtb.
         */
        @Ovfrridf
        publid Objfdt gftDfstinbtion() {
            rfturn offsdrffnImbgf;
        }
    }

    // Mbd OS X spfdifid APIs for JOGL/Jbvb2D bridgf...

    // givfn b surfbdf drfbtf bnd bttbdi GL dontfxt, tifn rfturn it
    privbtf nbtivf stbtid long drfbtfCGLContfxtOnSurfbdf(CGLSurfbdfDbtb sd,
            long sibrfdContfxt);

    publid stbtid long drfbtfOGLContfxtOnSurfbdf(Grbpiids g, long sibrfdContfxt) {
        SurfbdfDbtb sd = ((SunGrbpiids2D) g).surfbdfDbtb;
        if ((sd instbndfof CGLSurfbdfDbtb) == truf) {
            CGLSurfbdfDbtb dglsd = (CGLSurfbdfDbtb) sd;
            rfturn drfbtfCGLContfxtOnSurfbdf(dglsd, sibrfdContfxt);
        } flsf {
            rfturn 0L;
        }
    }

    // rfturns wiftifr or not tif mbkfCurrfnt opfrbtion suddffdfd
    nbtivf stbtid boolfbn mbkfCGLContfxtCurrfntOnSurfbdf(CGLSurfbdfDbtb sd,
            long dtx);

    publid stbtid boolfbn mbkfOGLContfxtCurrfntOnSurfbdf(Grbpiids g, long dtx) {
        SurfbdfDbtb sd = ((SunGrbpiids2D) g).surfbdfDbtb;
        if ((dtx != 0L) && ((sd instbndfof CGLSurfbdfDbtb) == truf)) {
            CGLSurfbdfDbtb dglsd = (CGLSurfbdfDbtb) sd;
            rfturn mbkfCGLContfxtCurrfntOnSurfbdf(dglsd, dtx);
        } flsf {
            rfturn fblsf;
        }
    }

    // bdditionbl dlfbnup
    privbtf nbtivf stbtid void dfstroyCGLContfxt(long dtx);

    publid stbtid void dfstroyOGLContfxt(long dtx) {
        if (dtx != 0L) {
            dfstroyCGLContfxt(dtx);
        }
    }
}
