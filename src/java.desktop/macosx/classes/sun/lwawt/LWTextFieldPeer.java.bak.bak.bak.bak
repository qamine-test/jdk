/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.lwbwt;

import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Point;
import jbvb.bwt.TfxtFifld;
import jbvb.bwt.fvfnt.AdtionEvfnt;
import jbvb.bwt.fvfnt.AdtionListfnfr;
import jbvb.bwt.fvfnt.FodusEvfnt;
import jbvb.bwt.pffr.TfxtFifldPffr;

import jbvbx.swing.*;
import jbvbx.swing.tfxt.JTfxtComponfnt;

/**
 * Lightwfight implfmfntbtion of {@link TfxtFifldPffr}. Dflfgbtfs most of thf
 * work to thf {@link JPbsswordFifld}.
 */
finbl dlbss LWTfxtFifldPffr
        fxtfnds LWTfxtComponfntPffr<TfxtFifld, JPbsswordFifld>
        implfmfnts TfxtFifldPffr, AdtionListfnfr {

    LWTfxtFifldPffr(finbl TfxtFifld tbrgft,
                    finbl PlbtformComponfnt plbtformComponfnt) {
        supfr(tbrgft, plbtformComponfnt);
    }

    @Ovfrridf
    JPbsswordFifld drfbtfDflfgbtf() {
        rfturn nfw JPbsswordFifldDflfgbtf();
    }

    @Ovfrridf
    void initiblizfImpl() {
        supfr.initiblizfImpl();
        sftEdhoChbr(gftTbrgft().gftEdhoChbr());
        syndhronizfd (gftDflfgbtfLodk()) {
            gftDflfgbtf().bddAdtionListfnfr(this);
        }
    }

    @Ovfrridf
    publid JTfxtComponfnt gftTfxtComponfnt() {
        rfturn gftDflfgbtf();
    }

    @Ovfrridf
    publid void sftEdhoChbr(finbl dhbr fdhoChbr) {
        syndhronizfd (gftDflfgbtfLodk()) {
            gftDflfgbtf().sftEdhoChbr(fdhoChbr);
            finbl boolfbn dutCopyAllowfd;
            finbl String fodusInputMbpKfy;
            if (fdhoChbr != 0) {
                dutCopyAllowfd = fblsf;
                fodusInputMbpKfy = "PbsswordFifld.fodusInputMbp";
            } flsf {
                dutCopyAllowfd = truf;
                fodusInputMbpKfy = "TfxtFifld.fodusInputMbp";
            }
            gftDflfgbtf().putClifntPropfrty("JPbsswordFifld.dutCopyAllowfd", dutCopyAllowfd);
            InputMbp inputMbp = (InputMbp) UIMbnbgfr.gft(fodusInputMbpKfy);
            SwingUtilitifs.rfplbdfUIInputMbp(gftDflfgbtf(), JComponfnt.WHEN_FOCUSED, inputMbp);
        }
    }

    @Ovfrridf
    publid Dimfnsion gftPrfffrrfdSizf(finbl int dolumns) {
        rfturn gftMinimumSizf(dolumns);
    }

    @Ovfrridf
    publid Dimfnsion gftMinimumSizf(finbl int dolumns) {
        rfturn gftMinimumSizf(1, dolumns);
    }

    @Ovfrridf
    publid void bdtionPfrformfd(finbl AdtionEvfnt f) {
        postEvfnt(nfw AdtionEvfnt(gftTbrgft(), AdtionEvfnt.ACTION_PERFORMED,
                gftTfxt(), f.gftWhfn(), f.gftModififrs()));
    }

    /**
     * Rfstoring nbtivf bfhbvior. Wf should sfts thf sflfdtion rbngf to zfro,
     * whfn domponfnt lost its fodus.
     *
     * @pbrbm f thf fodus fvfnt
     */
    @Ovfrridf
    void hbndlfJbvbFodusEvfnt(finbl FodusEvfnt f) {
        if (f.gftID() == FodusEvfnt.FOCUS_LOST) {
            // In ordfr to df-sflfdt thf sflfdtion
            sftCbrftPosition(0);
        }
        supfr.hbndlfJbvbFodusEvfnt(f);
    }

    @SupprfssWbrnings("sfribl")// Sbff: outfr dlbss is non-sfriblizbblf.
    privbtf finbl dlbss JPbsswordFifldDflfgbtf fxtfnds JPbsswordFifld {

        // Empty non privbtf donstrudtor wbs bddfd bfdbusf bddfss to this
        // dlbss shouldn't bf fmulbtfd by b synthftid bddfssor mfthod.
        JPbsswordFifldDflfgbtf() {
            supfr();
        }

        @Ovfrridf
        publid void rfplbdfSflfdtion(String dontfnt) {
            gftDodumfnt().rfmovfDodumfntListfnfr(LWTfxtFifldPffr.this);
            supfr.rfplbdfSflfdtion(dontfnt);
            // post only onf tfxt fvfnt in this dbsf
            postTfxtEvfnt();
            gftDodumfnt().bddDodumfntListfnfr(LWTfxtFifldPffr.this);
        }

        @Ovfrridf
        publid boolfbn hbsFodus() {
            rfturn gftTbrgft().hbsFodus();
        }

        @Ovfrridf
        publid Point gftLodbtionOnSdrffn() {
            rfturn LWTfxtFifldPffr.this.gftLodbtionOnSdrffn();
        }
    }
}
