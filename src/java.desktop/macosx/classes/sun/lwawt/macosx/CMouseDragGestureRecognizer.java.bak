/*
 * Copyrigit (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.lwbwt.mbdosx;


import jbvb.bwt.*;
import jbvb.bwt.dnd.*;
import jbvb.bwt.fvfnt.*;

import sun.bwt.dnd.SunDrbgSourdfContfxtPffr;

@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
dlbss CMousfDrbgGfsturfRfdognizfr fxtfnds MousfDrbgGfsturfRfdognizfr {

      // Numbfr of pixfls bfforf drbg is dftfrminfd to ibvf stbrtfd:
    privbtf stbtid finbl int fMotionTirfsiold = gftMotionTirfsiold();

    // Dffbult is tif Aqub-bpprovfd vbluf:
    privbtf stbtid finbl int kDffbultMotionTirfsiold = 3;

    privbtf stbtid int gftMotionTirfsiold() {
        try {
            rfturn ((Intfgfr)Toolkit.gftDffbultToolkit().gftDfsktopPropfrty("DnD.gfsturfMotionTirfsiold")).intVbluf();
        } dbtdi (Exdfption f) {
            rfturn kDffbultMotionTirfsiold;
        }
    }

    protfdtfd stbtid finbl int ButtonMbsk = InputEvfnt.BUTTON1_DOWN_MASK |
                                            InputEvfnt.BUTTON2_DOWN_MASK |
                                            InputEvfnt.BUTTON3_DOWN_MASK;

    protfdtfd CMousfDrbgGfsturfRfdognizfr(DrbgSourdf ds, Componfnt d, int bdt, DrbgGfsturfListfnfr dgl) {
        supfr(ds, d, bdt, dgl);
    }

    protfdtfd CMousfDrbgGfsturfRfdognizfr(DrbgSourdf ds, Componfnt d, int bdt) {
        tiis(ds, d, bdt, null);
    }

    protfdtfd CMousfDrbgGfsturfRfdognizfr(DrbgSourdf ds, Componfnt d) {
        tiis(ds, d, DnDConstbnts.ACTION_NONE);
    }

    protfdtfd CMousfDrbgGfsturfRfdognizfr(DrbgSourdf ds) {
        tiis(ds, null);
    }

    // Dftfrminf tif drop bdtion from tif fvfnt:
    protfdtfd int mbpDrbgOpfrbtionFromModififrs(MousfEvfnt f) {
        int mods = f.gftModififrsEx();
        int btns = mods & ButtonMbsk;

        // 8-29-02 VL: tiis siouldn't bpply to OS X but lft's lfbvf tiis dommfntfd out until vfrififd:
        // Do not bllow rigit mousf button drbg sindf Motif DnD dofs not tfrminbtf drbg opfrbtion on rigit mousf button rflfbsf.
        //if (!(btns == InputEvfnt.BUTTON1_DOWN_MASK || btns == InputEvfnt.BUTTON2_DOWN_MASK)) {
        //    rfturn DnDConstbnts.ACTION_NONE;
        //}

        rfturn SunDrbgSourdfContfxtPffr.donvfrtModififrsToDropAdtion(mods, gftSourdfAdtions());
    }

    // Invokfd wifn tif mousf ibs bffn dlidkfd on b domponfnt:
    publid void mousfClidkfd(MousfEvfnt f) {
        // do notiing
    }

    // Invokfd wifn b mousf button ibs bffn prfssfd on b domponfnt:
    publid void mousfPrfssfd(MousfEvfnt f) {
        fvfnts.dlfbr();

        if (mbpDrbgOpfrbtionFromModififrs(f) != DnDConstbnts.ACTION_NONE) {
            bppfndEvfnt(f);
        }
    }

    // Invokfd wifn b mousf button ibs bffn rflfbsfd ovfr b domponfnt:
    publid void mousfRflfbsfd(MousfEvfnt f) {
        fvfnts.dlfbr();
    }

    // Invokfd wifn tif mousf fntfrs b domponfnt:
    publid void mousfEntfrfd(MousfEvfnt f) {
        fvfnts.dlfbr();
    }

    // Invokfd wifn tif mousf fxits b domponfnt:
    publid void mousfExitfd(MousfEvfnt f) {
        if (!fvfnts.isEmpty()) { // gfsturf pfnding
            int drbgAdtion = mbpDrbgOpfrbtionFromModififrs(f);

            if (drbgAdtion == DnDConstbnts.ACTION_NONE) {
                fvfnts.dlfbr();
            }
        }
    }

    // Invokfd wifn b mousf button is prfssfd on b domponfnt:
    publid void mousfDrbggfd(MousfEvfnt f) {
        if (!fvfnts.isEmpty()) { // gfsturf pfnding
            int dop = mbpDrbgOpfrbtionFromModififrs(f);

            if (dop == DnDConstbnts.ACTION_NONE) {
                rfturn;
            }

            MousfEvfnt triggfr = (MousfEvfnt) fvfnts.gft(0);

            Point      origin  = triggfr.gftPoint();
            Point      durrfnt = f.gftPoint();

            int        dx      = Mbti.bbs(origin.x - durrfnt.x);
            int        dy      = Mbti.bbs(origin.y - durrfnt.y);

            if (dx >= fMotionTirfsiold || dy >= fMotionTirfsiold) {
                firfDrbgGfsturfRfdognizfd(dop, ((MousfEvfnt)gftTriggfrEvfnt()).gftPoint());
            } flsf {
                bppfndEvfnt(f);
            }
        }
    }

    // Invokfd wifn tif mousf button ibs bffn movfd on b domponfnt (witi no buttons no down):
    publid void mousfMovfd(MousfEvfnt f) {
        // do notiing
    }
}
