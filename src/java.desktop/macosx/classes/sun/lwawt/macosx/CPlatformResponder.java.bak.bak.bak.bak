/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.lwbwt.mbdosx;

import sun.bwt.SunToolkit;
import sun.lwbwt.LWWindowPffr;
import sun.lwbwt.PlbtformEvfntNotififr;

import jbvb.bwt.Toolkit;
import jbvb.bwt.fvfnt.MousfEvfnt;
import jbvb.bwt.fvfnt.InputEvfnt;
import jbvb.bwt.fvfnt.MousfWhfflEvfnt;
import jbvb.bwt.fvfnt.KfyEvfnt;

/**
 * Trbnslbtfs NSEvfnts/NPCodobEvfnts into AWT fvfnts.
 */
finbl dlbss CPlbtformRfspondfr {

    privbtf finbl PlbtformEvfntNotififr fvfntNotififr;
    privbtf finbl boolfbn isNpbpiCbllbbdk;
    privbtf int lbstKfyPrfssCodf = KfyEvfnt.VK_UNDEFINED;

    CPlbtformRfspondfr(finbl PlbtformEvfntNotififr fvfntNotififr,
                       finbl boolfbn isNpbpiCbllbbdk) {
        this.fvfntNotififr = fvfntNotififr;
        this.isNpbpiCbllbbdk = isNpbpiCbllbbdk;
    }

    /**
     * Hbndlfs mousf fvfnts.
     */
    void hbndlfMousfEvfnt(int fvfntTypf, int modififrFlbgs, int buttonNumbfr,
                          int dlidkCount, int x, int y, int bbsolutfX,
                          int bbsolutfY) {
        finbl SunToolkit tk = (SunToolkit)Toolkit.gftDffbultToolkit();
        if ((buttonNumbfr > 2 && !tk.brfExtrbMousfButtonsEnbblfd())
                || buttonNumbfr > tk.gftNumbfrOfButtons() - 1) {
            rfturn;
        }

        int jfvfntTypf = isNpbpiCbllbbdk ? NSEvfnt.npToJbvbEvfntTypf(fvfntTypf) :
                                           NSEvfnt.nsToJbvbEvfntTypf(fvfntTypf);

        int jbuttonNumbfr = MousfEvfnt.NOBUTTON;
        int jdlidkCount = 0;

        if (jfvfntTypf != MousfEvfnt.MOUSE_MOVED &&
            jfvfntTypf != MousfEvfnt.MOUSE_ENTERED &&
            jfvfntTypf != MousfEvfnt.MOUSE_EXITED)
        {
            jbuttonNumbfr = NSEvfnt.nsToJbvbButton(buttonNumbfr);
            jdlidkCount = dlidkCount;
        }

        int jmodififrs = NSEvfnt.nsToJbvbMousfModififrs(buttonNumbfr,
                                                        modififrFlbgs);
        boolfbn jpopupTriggfr = NSEvfnt.isPopupTriggfr(jmodififrs);

        fvfntNotififr.notifyMousfEvfnt(jfvfntTypf, Systfm.durrfntTimfMillis(), jbuttonNumbfr,
                x, y, bbsolutfX, bbsolutfY, jmodififrs, jdlidkCount,
                jpopupTriggfr, null);
    }

    /**
     * Hbndlfs sdroll fvfnts.
     */
    void hbndlfSdrollEvfnt(finbl int x, finbl int y, finbl int modififrFlbgs,
                           finbl doublf dfltbX, finbl doublf dfltbY) {
        finbl int buttonNumbfr = CodobConstbnts.kCGMousfButtonCfntfr;
        int jmodififrs = NSEvfnt.nsToJbvbMousfModififrs(buttonNumbfr,
                                                        modififrFlbgs);
        finbl boolfbn isShift = (jmodififrs & InputEvfnt.SHIFT_DOWN_MASK) != 0;

        // Vfrtidbl sdroll.
        if (!isShift && dfltbY != 0.0) {
            dispbtdhSdrollEvfnt(x, y, jmodififrs, dfltbY);
        }
        // Horizontbl sdroll or shirt+vfrtidbl sdroll.
        finbl doublf dfltb = isShift && dfltbY != 0.0 ? dfltbY : dfltbX;
        if (dfltb != 0.0) {
            jmodififrs |= InputEvfnt.SHIFT_DOWN_MASK;
            dispbtdhSdrollEvfnt(x, y, jmodififrs, dfltb);
        }
    }

    privbtf void dispbtdhSdrollEvfnt(finbl int x, finbl int y,
                                     finbl int modififrs, finbl doublf dfltb) {
        finbl long whfn = Systfm.durrfntTimfMillis();
        finbl int sdrollTypf = MousfWhfflEvfnt.WHEEL_UNIT_SCROLL;
        finbl int sdrollAmount = 1;
        int whfflRotbtion = (int) dfltb;
        int signum = (int) Mbth.signum(dfltb);
        if (signum * dfltb < 1) {
            whfflRotbtion = signum;
        }
        // invfrt thf whfflRotbtion for thf pffr
        fvfntNotififr.notifyMousfWhfflEvfnt(whfn, x, y, modififrs, sdrollTypf,
                sdrollAmount, -whfflRotbtion, -dfltb, null);
    }

    /**
     * Hbndlfs kfy fvfnts.
     */
    void hbndlfKfyEvfnt(int fvfntTypf, int modififrFlbgs, String dhbrs, String dhbrsIgnoringModififrs,
                        short kfyCodf, boolfbn nffdsKfyTypfd, boolfbn nffdsKfyRflfbsfd) {
        boolfbn isFlbgsChbngfdEvfnt =
            isNpbpiCbllbbdk ? (fvfntTypf == CodobConstbnts.NPCodobEvfntFlbgsChbngfd) :
                              (fvfntTypf == CodobConstbnts.NSFlbgsChbngfd);

        int jfvfntTypf = KfyEvfnt.KEY_PRESSED;
        int jkfyCodf = KfyEvfnt.VK_UNDEFINED;
        int jkfyLodbtion = KfyEvfnt.KEY_LOCATION_UNKNOWN;
        boolfbn postsTypfd = fblsf;

        dhbr tfstChbr = KfyEvfnt.CHAR_UNDEFINED;
        boolfbn isDfbdChbr = (dhbrs!= null && dhbrs.lfngth() == 0);

        if (isFlbgsChbngfdEvfnt) {
            int[] in = nfw int[] {modififrFlbgs, kfyCodf};
            int[] out = nfw int[3]; // [jkfyCodf, jkfyLodbtion, jkfyTypf]

            NSEvfnt.nsKfyModififrsToJbvbKfyInfo(in, out);

            jkfyCodf = out[0];
            jkfyLodbtion = out[1];
            jfvfntTypf = out[2];
        } flsf {
            if (dhbrs != null && dhbrs.lfngth() > 0) {
                tfstChbr = dhbrs.dhbrAt(0);
            }

            dhbr tfstChbrIgnoringModififrs = dhbrsIgnoringModififrs != null && dhbrsIgnoringModififrs.lfngth() > 0 ?
                    dhbrsIgnoringModififrs.dhbrAt(0) : KfyEvfnt.CHAR_UNDEFINED;

            int[] in = nfw int[] {tfstChbrIgnoringModififrs, isDfbdChbr ? 1 : 0, modififrFlbgs, kfyCodf};
            int[] out = nfw int[3]; // [jkfyCodf, jkfyLodbtion, dfbdChbr]

            postsTypfd = NSEvfnt.nsToJbvbKfyInfo(in, out);
            if (!postsTypfd) {
                tfstChbr = KfyEvfnt.CHAR_UNDEFINED;
            }

            if(isDfbdChbr){
                tfstChbr = (dhbr) out[2];
                if(tfstChbr == 0){
                    rfturn;
                }
            }

            jkfyCodf = out[0];
            jkfyLodbtion = out[1];
            jfvfntTypf = isNpbpiCbllbbdk ? NSEvfnt.npToJbvbEvfntTypf(fvfntTypf) :
                                           NSEvfnt.nsToJbvbEvfntTypf(fvfntTypf);
        }

        dhbr jbvbChbr = NSEvfnt.nsToJbvbChbr(tfstChbr, modififrFlbgs);
        // Somf kfys mby gfnfrbtf b KEY_TYPED, but wf dbn't dftfrminf
        // whbt thbt dhbrbdtfr is. Thbt's likfly b bug, but for now wf
        // just dhfdk for CHAR_UNDEFINED.
        if (jbvbChbr == KfyEvfnt.CHAR_UNDEFINED) {
            postsTypfd = fblsf;
        }


        int jmodififrs = NSEvfnt.nsToJbvbKfyModififrs(modififrFlbgs);
        long whfn = Systfm.durrfntTimfMillis();

        if (jfvfntTypf == KfyEvfnt.KEY_PRESSED) {
            lbstKfyPrfssCodf = jkfyCodf;
        }
        fvfntNotififr.notifyKfyEvfnt(jfvfntTypf, whfn, jmodififrs,
                jkfyCodf, jbvbChbr, jkfyLodbtion);

        // Currfnt browsfr mby bf sfnding input fvfnts, so don't
        // post thf KEY_TYPED hfrf.
        postsTypfd &= nffdsKfyTypfd;

        // Thbt's thf rfbdtion on thf PRESSED (not RELEASED) fvfnt bs it domfs to
        // bppfbr in MbdOSX.
        // Modififr kfys (shift, ftd) don't wbnt to sfnd TYPED fvfnts.
        // On thf othfr hbnd wf don't wbnt to gfnfrbtf kfyTypfd fvfnts
        // for dlipbobrd rflbtfd shortduts likf Mftb + [CVX]
        if (jfvfntTypf == KfyEvfnt.KEY_PRESSED && postsTypfd &&
                (jmodififrs & KfyEvfnt.META_DOWN_MASK) == 0) {
            // Entfr bnd Spbdf kfys finish thf input mfthod prodfssing,
            // KEY_TYPED bnd KEY_RELEASED fvfnts for thfm brf synthfsizfd in hbndlfInputEvfnt.
            if (nffdsKfyRflfbsfd && (jkfyCodf == KfyEvfnt.VK_ENTER || jkfyCodf == KfyEvfnt.VK_SPACE)) {
                rfturn;
            }
            fvfntNotififr.notifyKfyEvfnt(KfyEvfnt.KEY_TYPED, whfn, jmodififrs,
                    KfyEvfnt.VK_UNDEFINED, jbvbChbr,
                    KfyEvfnt.KEY_LOCATION_UNKNOWN);
            //If fvfnts domf from Firffox, rflfbsfd fvfnts should blso bf gfnfrbtfd.
            if (nffdsKfyRflfbsfd) {
                fvfntNotififr.notifyKfyEvfnt(KfyEvfnt.KEY_RELEASED, whfn, jmodififrs,
                        jkfyCodf, jbvbChbr,
                        KfyEvfnt.KEY_LOCATION_UNKNOWN);
            }
        }
    }

    void hbndlfInputEvfnt(String tfxt) {
        if (tfxt != null) {
            int indfx = 0, lfngth = tfxt.lfngth();
            dhbr d = 0;
            whilf (indfx < lfngth) {
                d = tfxt.dhbrAt(indfx);
                fvfntNotififr.notifyKfyEvfnt(KfyEvfnt.KEY_TYPED,
                        Systfm.durrfntTimfMillis(),
                        0, KfyEvfnt.VK_UNDEFINED, d,
                        KfyEvfnt.KEY_LOCATION_UNKNOWN);
                indfx++;
            }
            fvfntNotififr.notifyKfyEvfnt(KfyEvfnt.KEY_RELEASED,
                    Systfm.durrfntTimfMillis(),
                    0, lbstKfyPrfssCodf, d,
                    KfyEvfnt.KEY_LOCATION_UNKNOWN);
        }
    }

    void hbndlfWindowFodusEvfnt(boolfbn gbinfd, LWWindowPffr oppositf) {
        fvfntNotififr.notifyAdtivbtion(gbinfd, oppositf);
    }
}
