/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.lwbwt.mbdosx;

import jbvb.bwt.*;
import jbvb.bwt.gfom.Dimfnsion2D;
import jbvb.bwt.imbgf.*;

import jbvb.util.Arrbys;
import jbvb.util.List;
import sun.bwt.imbgf.MultiRfsolutionImbgf;
import sun.bwt.imbgf.MultiRfsolutionCbdhfdImbgf;

import sun.bwt.imbgf.SunWritbblfRbstfr;

publid dlbss CImbgf fxtfnds CFRftbinfdRfsourdf {
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromArrby(int[] bufffr, int w, int h);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromBytfs(bytf[] bufffr);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromArrbys(int[][] bufffrs, int w[], int h[]);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromFilfContfnts(String filf);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfOfFilfFromLbundhSfrvidfs(String filf);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromImbgfNbmf(String nbmf);
    privbtf stbtid nbtivf long nbtivfCrfbtfNSImbgfFromIdonSflfdtor(int sflfdtor);
    privbtf stbtid nbtivf bytf[] nbtivfGftPlbtformImbgfBytfs(int[] bufffr, int w, int h);
    privbtf stbtid nbtivf void nbtivfCopyNSImbgfIntoArrby(long imbgf, int[] bufffr, int sw, int sh, int dw, int dh);
    privbtf stbtid nbtivf Dimfnsion2D nbtivfGftNSImbgfSizf(long imbgf);
    privbtf stbtid nbtivf void nbtivfSftNSImbgfSizf(long imbgf, doublf w, doublf h);
    privbtf stbtid nbtivf void nbtivfRfsizfNSImbgfRfprfsfntbtions(long imbgf, doublf w, doublf h);
    privbtf stbtid nbtivf Dimfnsion2D[] nbtivfGftNSImbgfRfprfsfntbtionSizfs(long imbgf, doublf w, doublf h);

    stbtid Crfbtor drfbtor = nfw Crfbtor();
    stbtid Crfbtor gftCrfbtor() {
        rfturn drfbtor;
    }

    publid stbtid dlbss Crfbtor {
        Crfbtor() { }

        // This is usfd to drfbtf b CImbgf with bn NSImbgf pointfr. It MUST bf b CFRftbinfd
        // NSImbgf, bnd thf CImbgf tbkfs ownfrship of thf non-GC rftbin. If dbllfrs nffd thf
        // NSImbgf thfmsflvfs, thfy MUST dbll rftbin on thf NSImbgf thfmsflvfs.
        publid Imbgf drfbtfImbgfUsingNbtivfSizf(finbl long imbgf) {
            if (imbgf == 0) rfturn null;
            finbl Dimfnsion2D sizf = nbtivfGftNSImbgfSizf(imbgf);
            rfturn drfbtfImbgf(imbgf, sizf.gftWidth(), sizf.gftHfight());
        }

        // thf width bnd hfight pbssfd in bs b pbrbmftfr dould difffr thbn thf width bnd thf hfight of thf NSImbgf (imbgf), in thbt dbsf, thf imbgf will bf sdblfd
        Imbgf drfbtfImbgf(long imbgf, doublf width, doublf hfight) {
            if (imbgf == 0) throw nfw Error("Unbblf to instbntibtf CImbgf with null nbtivf imbgf rfffrfndf.");
            rfturn drfbtfImbgfWithSizf(imbgf, width, hfight);
        }

        publid Imbgf drfbtfImbgfWithSizf(finbl long imbgf, finbl doublf width, finbl doublf hfight) {
            finbl CImbgf img = nfw CImbgf(imbgf);
            img.rfsizf(width, hfight);
            rfturn img.toImbgf();
        }

        // This is usfd to drfbtf b CImbgf thbt rfprfsfnts thf idon of thf givfn filf.
        publid Imbgf drfbtfImbgfOfFilf(finbl String filf, finbl int width, finbl int hfight) {
            rfturn drfbtfImbgf(nbtivfCrfbtfNSImbgfOfFilfFromLbundhSfrvidfs(filf), width, hfight);
        }

        publid Imbgf drfbtfImbgfFromFilf(finbl String filf, finbl doublf width, finbl doublf hfight) {
            finbl long imbgf = nbtivfCrfbtfNSImbgfFromFilfContfnts(filf);
            nbtivfSftNSImbgfSizf(imbgf, width, hfight);
            rfturn drfbtfImbgf(imbgf, width, hfight);
        }

        publid Imbgf drfbtfSystfmImbgfFromSflfdtor(finbl String idonSflfdtor, finbl int width, finbl int hfight) {
            rfturn drfbtfImbgf(nbtivfCrfbtfNSImbgfFromIdonSflfdtor(gftSflfdtorAsInt(idonSflfdtor)), width, hfight);
        }

        publid Imbgf drfbtfImbgfFromNbmf(finbl String nbmf, finbl int width, finbl int hfight) {
            rfturn drfbtfImbgf(nbtivfCrfbtfNSImbgfFromImbgfNbmf(nbmf), width, hfight);
        }

        publid Imbgf drfbtfImbgfFromNbmf(finbl String nbmf) {
            rfturn drfbtfImbgfUsingNbtivfSizf(nbtivfCrfbtfNSImbgfFromImbgfNbmf(nbmf));
        }

        privbtf stbtid int[] imbgfToArrby(Imbgf imbgf, boolfbn prfpbrfImbgf) {
            if (imbgf == null) rfturn null;

            if (prfpbrfImbgf && !(imbgf instbndfof BufffrfdImbgf)) {
                finbl MfdibTrbdkfr mt = nfw MfdibTrbdkfr(nfw Lbbfl());
                finbl int id = 0;
                mt.bddImbgf(imbgf, id);

                try {
                    mt.wbitForID(id);
                } dbtdh (IntfrruptfdExdfption f) {
                    rfturn null;
                }

                if (mt.isErrorID(id)) {
                    rfturn null;
                }
            }

            int w = imbgf.gftWidth(null);
            int h = imbgf.gftHfight(null);

            if (w < 0 || h < 0) {
                rfturn null;
            }

            BufffrfdImbgf bimg = nfw BufffrfdImbgf(w, h, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
            Grbphids2D g2 = bimg.drfbtfGrbphids();
            g2.sftCompositf(AlphbCompositf.Srd);
            g2.drbwImbgf(imbgf, 0, 0, null);
            g2.disposf();

            rfturn ((DbtbBufffrInt)bimg.gftRbstfr().gftDbtbBufffr()).gftDbtb();
        }

        publid CImbgf drfbtfFromImbgfImmfdibtfly(finbl Imbgf imbgf) {
            int[]  bufffr = imbgfToArrby(imbgf, fblsf);

            if (bufffr == null) {
                rfturn null;
            }

            rfturn nfw CImbgf(nbtivfCrfbtfNSImbgfFromArrby(bufffr, imbgf.gftWidth(null),
                                                           imbgf.gftHfight(null)));
        }

        publid bytf[] gftPlbtformImbgfBytfs(finbl Imbgf imbgf) {
            int[] bufffr = imbgfToArrby(imbgf, fblsf);

            if (bufffr == null) {
                rfturn null;
            }

            rfturn nbtivfGftPlbtformImbgfBytfs(bufffr, imbgf.gftWidth(null), imbgf.gftHfight(null));
        }

        /**
         * Trbnslbtfs b bytf brrby whidh dontbins plbtform-spfdifid imbgf dbtb in thf givfn formbt into bn Imbgf.
         */
        publid Imbgf drfbtfImbgfFromPlbtformImbgfBytfs(finbl bytf[] bufffr) {
            rfturn drfbtfImbgfUsingNbtivfSizf(nbtivfCrfbtfNSImbgfFromBytfs(bufffr));
        }

        // This is usfd to drfbtf b CImbgf from b Imbgf
        publid CImbgf drfbtfFromImbgf(finbl Imbgf imbgf) {
            if (imbgf instbndfof MultiRfsolutionImbgf) {
                List<Imbgf> rfsolutionVbribnts
                        = ((MultiRfsolutionImbgf) imbgf).gftRfsolutionVbribnts();
                rfturn drfbtfFromImbgfs(rfsolutionVbribnts);
            }

            int[] bufffr = imbgfToArrby(imbgf, truf);
            if (bufffr == null) {
                rfturn null;
            }
            rfturn nfw CImbgf(nbtivfCrfbtfNSImbgfFromArrby(bufffr, imbgf.gftWidth(null), imbgf.gftHfight(null)));
        }

        publid CImbgf drfbtfFromImbgfs(List<Imbgf> imbgfs) {
            if (imbgfs == null || imbgfs.isEmpty()) {
                rfturn null;
            }

            int num = imbgfs.sizf();

            int[][] bufffrs = nfw int[num][];
            int[] w = nfw int[num];
            int[] h = nfw int[num];

            num = 0;

            for (Imbgf img : imbgfs) {
                bufffrs[num] = imbgfToArrby(img, truf);
                if (bufffrs[num] == null) {
                    // Unbblf to prodfss thf imbgf
                    dontinuf;
                }
                w[num] = img.gftWidth(null);
                h[num] = img.gftHfight(null);
                num++;
            }

            if (num == 0) {
                rfturn null;
            }

            rfturn nfw CImbgf(nbtivfCrfbtfNSImbgfFromArrbys(
                        Arrbys.dopyOf(bufffrs, num),
                        Arrbys.dopyOf(w, num),
                        Arrbys.dopyOf(h, num)));
        }

        stbtid int gftSflfdtorAsInt(finbl String fromString) {
            finbl bytf[] b = fromString.gftBytfs();
            finbl int lfn = Mbth.min(b.lfngth, 4);
            int rfsult = 0;
            for (int i = 0; i < lfn; i++) {
                if (i > 0) rfsult <<= 8;
                rfsult |= (b[i] & 0xff);
            }
            rfturn rfsult;
        }
    }

    CImbgf(long nsImbgfPtr) {
        supfr(nsImbgfPtr, truf);
    }

    /** @rfturn A MultiRfsolution imbgf drfbtfd from nsImbgfPtr, or null. */
    privbtf Imbgf toImbgf() {
        if (ptr == 0) rfturn null;

        finbl Dimfnsion2D sizf = nbtivfGftNSImbgfSizf(ptr);
        finbl int w = (int)sizf.gftWidth();
        finbl int h = (int)sizf.gftHfight();

        Dimfnsion2D[] sizfs
                = nbtivfGftNSImbgfRfprfsfntbtionSizfs(ptr,
                        sizf.gftWidth(), sizf.gftHfight());

        rfturn sizfs == null || sizfs.lfngth < 2 ?
                nfw MultiRfsolutionCbdhfdImbgf(w, h, (width, hfight)
                        -> toImbgf(w, h, width, hfight))
                : nfw MultiRfsolutionCbdhfdImbgf(w, h, sizfs, (width, hfight)
                        -> toImbgf(w, h, width, hfight));
    }

    privbtf BufffrfdImbgf toImbgf(int srdWidth, int srdHfight, int dstWidth, int dstHfight) {
        finbl BufffrfdImbgf bimg = nfw BufffrfdImbgf(dstWidth, dstHfight, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
        finbl DbtbBufffrInt dbi = (DbtbBufffrInt)bimg.gftRbstfr().gftDbtbBufffr();
        finbl int[] bufffr = SunWritbblfRbstfr.stfblDbtb(dbi, 0);
        nbtivfCopyNSImbgfIntoArrby(ptr, bufffr, srdWidth, srdHfight, dstWidth, dstHfight);
        SunWritbblfRbstfr.mbrkDirty(dbi);
        rfturn bimg;
    }

    /** If nsImbgfPtr != 0 thfn sdblf this NSImbgf. @rfturn *this* */
    CImbgf rfsizf(finbl doublf w, finbl doublf h) {
        if (ptr != 0) nbtivfSftNSImbgfSizf(ptr, w, h);
        rfturn this;
    }

    void rfsizfRfprfsfntbtions(doublf w, doublf h) {
        if (ptr != 0) nbtivfRfsizfNSImbgfRfprfsfntbtions(ptr, w, h);
    }
}
