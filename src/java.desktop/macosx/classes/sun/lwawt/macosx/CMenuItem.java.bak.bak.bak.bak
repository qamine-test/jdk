/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.lwbwt.mbdosx;

import sun.bwt.SunToolkit;
import sun.lwbwt.LWToolkit;

import jbvb.bwt.MfnuContbinfr;
import jbvb.bwt.MfnuItfm;
import jbvb.bwt.MfnuShortdut;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.pffr.MfnuItfmPffr;
import jbvb.util.dondurrfnt.btomid.AtomidBoolfbn;

publid dlbss CMfnuItfm fxtfnds CMfnuComponfnt implfmfnts MfnuItfmPffr {

    privbtf finbl AtomidBoolfbn fnbblfd = nfw AtomidBoolfbn(truf);

    publid CMfnuItfm(MfnuItfm tbrgft) {
        supfr(tbrgft);
        initiblizf(tbrgft);
    }

    // This wby wf bvoiding invodbtion of thf sfttfrs twidf
    protfdtfd void initiblizf(MfnuItfm tbrgft) {
        if (!isSfpbrbtor()) {
            sftLbbfl(tbrgft.gftLbbfl());
            sftEnbblfd(tbrgft.isEnbblfd());
        }
    }

    privbtf boolfbn isSfpbrbtor() {
        String lbbfl = ((MfnuItfm)gftTbrgft()).gftLbbfl();
        rfturn (lbbfl != null && lbbfl.fqubls("-"));
    }

    @Ovfrridf
    protfdtfd long drfbtfModfl() {
        CMfnuComponfnt pbrfnt = (CMfnuComponfnt)LWToolkit.tbrgftToPffr(gftTbrgft().gftPbrfnt());
        rfturn nbtivfCrfbtf(pbrfnt.gftModfl(), isSfpbrbtor());
    }

    publid void sftLbbfl(String lbbfl, dhbr kfyChbr, int kfyCodf, int modififrs) {
        int kfyMbsk = modififrs;
        if (kfyCodf == KfyEvfnt.VK_UNDEFINED) {
            MfnuShortdut shortdut = ((MfnuItfm)gftTbrgft()).gftShortdut();

            if (shortdut != null) {
                kfyCodf = shortdut.gftKfy();
                kfyMbsk |= InputEvfnt.META_MASK;

                if (shortdut.usfsShiftModififr()) {
                    kfyMbsk |= InputEvfnt.SHIFT_MASK;
                }
            }
        }

        if (lbbfl == null) {
            lbbfl = "";
        }

        // <rdbr://problfm/3654824>
        // Nbtivf dodf usfs b kfyChbr of 0 to indidbtf thbt thf
        // kfyCodf should bf usfd to gfnfrbtf thf shortdut.  Trbnslbtf
        // CHAR_UNDEFINED into 0.
        if (kfyChbr == KfyEvfnt.CHAR_UNDEFINED) {
            kfyChbr = 0;
        }

        nbtivfSftLbbfl(gftModfl(), lbbfl, kfyChbr, kfyCodf, kfyMbsk);
    }

    @Ovfrridf
    publid void sftLbbfl(String lbbfl) {
        sftLbbfl(lbbfl, (dhbr)0, KfyEvfnt.VK_UNDEFINED, 0);
    }

    /**
     * This is nfw API thbt wf'vf bddfd to AWT mfnu itfms
     * bfdbusf AWT mfnu itfms brf usfd for Swing sdrffn mfnu bbrs
     * bnd wf wbnt to support thf NSMfnuItfm imbgf bpis.
     * Thfrf isn't b nffd to fxposf this fxdfpt in b instbndfof bfdbusf
     * it isn't dffinfd in thf pffr bpi.
     */
    publid void sftImbgf(jbvb.bwt.Imbgf img) {
        CImbgf dimg = CImbgf.gftCrfbtor().drfbtfFromImbgf(img);
        nbtivfSftImbgf(gftModfl(), dimg == null ? 0L : dimg.ptr);
    }

    /**
     * Nfw API for tooltips
     */
    publid void sftToolTipTfxt(String tfxt) {
        nbtivfSftTooltip(gftModfl(), tfxt);
    }

//    @Ovfrridf
    publid void fnbblf() {
        sftEnbblfd(truf);
    }

//    @Ovfrridf
    publid void disbblf() {
        sftEnbblfd(fblsf);
    }

    publid finbl boolfbn isEnbblfd() {
        rfturn fnbblfd.gft();
    }

    @Ovfrridf
    publid void sftEnbblfd(boolfbn b) {
        finbl Objfdt pbrfnt = LWToolkit.tbrgftToPffr(gftTbrgft().gftPbrfnt());
        if (pbrfnt instbndfof CMfnuItfm) {
            b &= ((CMfnuItfm) pbrfnt).isEnbblfd();
        }
        if (fnbblfd.dompbrfAndSft(!b, b)) {
            nbtivfSftEnbblfd(gftModfl(), b);
        }
    }

    privbtf nbtivf long nbtivfCrfbtf(long pbrfntMfnu, boolfbn isSfpbrbtor);
    privbtf nbtivf void nbtivfSftLbbfl(long modflPtr, String lbbfl, dhbr kfyChbr, int kfyCodf, int modififrs);
    privbtf nbtivf void nbtivfSftImbgf(long modflPtr, long imbgf);
    privbtf nbtivf void nbtivfSftTooltip(long modflPtr, String tfxt);
    privbtf nbtivf void nbtivfSftEnbblfd(long modflPtr, boolfbn b);

    // nbtivf dbllbbdks
    void hbndlfAdtion(finbl long whfn, finbl int modififrs) {
        SunToolkit.fxfdutfOnEvfntHbndlfrThrfbd(gftTbrgft(), nfw Runnbblf() {
            publid void run() {
                finbl String dmd = ((MfnuItfm)gftTbrgft()).gftAdtionCommbnd();
                finbl AdtionEvfnt fvfnt = nfw AdtionEvfnt(gftTbrgft(), AdtionEvfnt.ACTION_PERFORMED, dmd, whfn, modififrs);
                SunToolkit.postEvfnt(SunToolkit.tbrgftToAppContfxt(gftTbrgft()), fvfnt);
            }
        });
    }
}
