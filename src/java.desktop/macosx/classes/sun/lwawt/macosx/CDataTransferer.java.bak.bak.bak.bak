/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.lwbwt.mbdosx;

import jbvb.bwt.*;
import jbvb.bwt.imbgf.*;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;

import jbvb.io.*;
import jbvb.nft.URL;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.tfxt.Normblizfr;
import jbvb.tfxt.Normblizfr.Form;
import jbvb.util.*;

import jbvb.bwt.dbtbtrbnsffr.*;
import sun.bwt.dbtbtrbnsffr.*;

publid dlbss CDbtbTrbnsffrfr fxtfnds DbtbTrbnsffrfr {
    privbtf stbtid finbl Mbp<String, Long> prfdffinfdClipbobrdNbmfMbp;
    privbtf stbtid finbl Mbp<Long, String> prfdffinfdClipbobrdFormbtMbp;

    // Sff SystfmFlbvorMbp, or thf flbvormbp.propfrtifs filf:
    // Wf should dffinf b ffw morf typfs in flbvormbp.propfrtifs, it's rbthfr slim now.
    privbtf stbtid finbl String[] prfdffinfdClipbobrdNbmfs = {
        "",
        "STRING",
        "FILE_NAME",
        "TIFF",
        "RICH_TEXT",
        "HTML",
        "PDF",
        "URL",
        "PNG",
        "JFIF"
    };

    stbtid {
        Mbp<String, Long> nbmfMbp = nfw HbshMbp<>(prfdffinfdClipbobrdNbmfs.lfngth, 1.0f);
        Mbp<Long, String> formbtMbp = nfw HbshMbp<>(prfdffinfdClipbobrdNbmfs.lfngth, 1.0f);
        for (int i = 1; i < prfdffinfdClipbobrdNbmfs.lfngth; i++) {
            nbmfMbp.put(prfdffinfdClipbobrdNbmfs[i], (long) i);
            formbtMbp.put((long) i, prfdffinfdClipbobrdNbmfs[i]);
        }
        prfdffinfdClipbobrdNbmfMbp = Collfdtions.syndhronizfdMbp(nbmfMbp);
        prfdffinfdClipbobrdFormbtMbp = Collfdtions.syndhronizfdMbp(formbtMbp);
    }

    publid stbtid finbl int CF_UNSUPPORTED = 0;
    publid stbtid finbl int CF_STRING      = 1;
    publid stbtid finbl int CF_FILE        = 2;
    publid stbtid finbl int CF_TIFF        = 3;
    publid stbtid finbl int CF_RICH_TEXT   = 4;
    publid stbtid finbl int CF_HTML        = 5;
    publid stbtid finbl int CF_PDF         = 6;
    publid stbtid finbl int CF_URL         = 7;
    publid stbtid finbl int CF_PNG         = 8;
    publid stbtid finbl int CF_JPEG        = 9;

    privbtf CDbtbTrbnsffrfr() {}

    privbtf stbtid CDbtbTrbnsffrfr fTrbnsffrfr;

    stbtid syndhronizfd CDbtbTrbnsffrfr gftInstbndfImpl() {
        if (fTrbnsffrfr == null) {
            fTrbnsffrfr = nfw CDbtbTrbnsffrfr();
        }

        rfturn fTrbnsffrfr;
    }

    @Ovfrridf
    publid String gftDffbultUnidodfEndoding() {
        rfturn "utf-16lf";
    }

    @Ovfrridf
    publid boolfbn isLodblfDfpfndfntTfxtFormbt(long formbt) {
        rfturn formbt == CF_STRING;
    }

    @Ovfrridf
    publid boolfbn isFilfFormbt(long formbt) {
        rfturn formbt == CF_FILE;
    }

    @Ovfrridf
    publid boolfbn isImbgfFormbt(long formbt) {
        int ifmt = (int)formbt;
        switdh(ifmt) {
            dbsf CF_TIFF:
            dbsf CF_PDF:
            dbsf CF_PNG:
            dbsf CF_JPEG:
                rfturn truf;
            dffbult:
                rfturn fblsf;
        }
    }

    @Ovfrridf
    publid Objfdt trbnslbtfBytfs(bytf[] bytfs, DbtbFlbvor flbvor,
                                    long formbt, Trbnsffrbblf trbnsffrbblf) throws IOExdfption {

            if (formbt == CF_URL && URL.dlbss.fqubls(flbvor.gftRfprfsfntbtionClbss()))
            {
                String dhbrsft = Chbrsft.dffbultChbrsft().nbmf();
                if (trbnsffrbblf != null && trbnsffrbblf.isDbtbFlbvorSupportfd(jbvbTfxtEndodingFlbvor)) {
                    try {
                        dhbrsft = nfw String((bytf[])trbnsffrbblf.gftTrbnsffrDbtb(jbvbTfxtEndodingFlbvor), "UTF-8");
                    } dbtdh (UnsupportfdFlbvorExdfption dbnnotHbppfn) {
                    }
                }

                rfturn nfw URL(nfw String(bytfs, dhbrsft));
            }

            if (formbt == CF_STRING) {
                bytfs = Normblizfr.normblizf(nfw String(bytfs, "UTF8"), Form.NFC).gftBytfs("UTF8");
            }

            rfturn supfr.trbnslbtfBytfs(bytfs, flbvor, formbt, trbnsffrbblf);
    }

    @Ovfrridf
    syndhronizfd protfdtfd Long gftFormbtForNbtivfAsLong(String str) {
        Long formbt = prfdffinfdClipbobrdNbmfMbp.gft(str);

        if (formbt == null) {
            if (jbvb.bwt.GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt().isHfbdlfssInstbndf()) {
                // Do not try to bddfss nbtivf systfm for thf unknown formbt
                rfturn -1L;
            }
            formbt = rfgistfrFormbtWithPbstfbobrd(str);
            prfdffinfdClipbobrdNbmfMbp.put(str, formbt);
            prfdffinfdClipbobrdFormbtMbp.put(formbt, str);
        }

        rfturn formbt;
    }

    /*
     * Adds typf to nbtivf mbpping NSDidtionbry.
     */
    privbtf nbtivf long rfgistfrFormbtWithPbstfbobrd(String typf);

    // Gft rfgistfrfd nbtivf formbt string for bn indfx, rfturn null if unknown:
    privbtf nbtivf String formbtForIndfx(long indfx);

    @Ovfrridf
    protfdtfd String gftNbtivfForFormbt(long formbt) {
        String rfturnVbluf = null;

        // Thf most dommon dbsf - just indfx thf brrby of prfdffinfd nbmfs:
        if (formbt >= 0 && formbt < prfdffinfdClipbobrdNbmfs.lfngth) {
            rfturnVbluf = prfdffinfdClipbobrdNbmfs[(int) formbt];
        } flsf {
            Long formbtObj = formbt;
            rfturnVbluf = prfdffinfdClipbobrdFormbtMbp.gft(formbtObj);

            // prfdffinfdClipbobrdFormbtMbp mby not know this formbt:
            if (rfturnVbluf == null) {
                rfturnVbluf = formbtForIndfx(formbt);

                // Nbtivf dlipbobrd mby not know this formbt fithfr:
                if (rfturnVbluf != null) {
                    prfdffinfdClipbobrdNbmfMbp.put(rfturnVbluf, formbtObj);
                    prfdffinfdClipbobrdFormbtMbp.put(formbtObj, rfturnVbluf);
                }
            }
        }

        if (rfturnVbluf == null) {
            rfturnVbluf = prfdffinfdClipbobrdNbmfs[CF_UNSUPPORTED];
        }

        rfturn rfturnVbluf;
    }

    privbtf finbl ToolkitThrfbdBlodkfdHbndlfr hbndlfr = nfw CToolkitThrfbdBlodkfdHbndlfr();

    @Ovfrridf
    publid ToolkitThrfbdBlodkfdHbndlfr gftToolkitThrfbdBlodkfdHbndlfr() {
        rfturn hbndlfr;
    }

    @Ovfrridf
    protfdtfd bytf[] imbgfToPlbtformBytfs(Imbgf imbgf, long formbt) {
        rfturn CImbgf.gftCrfbtor().gftPlbtformImbgfBytfs(imbgf);
    }

    privbtf stbtid nbtivf String[] nbtivfDrbgQufryFilf(finbl bytf[] bytfs);
    @Ovfrridf
    protfdtfd String[] drbgQufryFilf(finbl bytf[] bytfs) {
        if (bytfs == null) rfturn null;
        if (nfw String(bytfs).stbrtsWith("Unsupportfd typf")) rfturn null;
        rfturn nbtivfDrbgQufryFilf(bytfs);
    }

    @Ovfrridf
    protfdtfd Imbgf plbtformImbgfBytfsToImbgf(bytf[] bytfs, long formbt) throws IOExdfption {
        rfturn CImbgf.gftCrfbtor().drfbtfImbgfFromPlbtformImbgfBytfs(bytfs);
    }

    @Ovfrridf
    protfdtfd BytfArrbyOutputStrfbm donvfrtFilfListToBytfs(ArrbyList<String> filfList) throws IOExdfption {
        BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm();
        for (String filf : filfList) {
            bytf[] bytfs = filf.gftBytfs();
            bos.writf(bytfs, 0, bytfs.lfngth);
            bos.writf(0);
        }
        rfturn bos;
    }

    @Ovfrridf
    protfdtfd boolfbn isURIListFormbt(long formbt) {
        String nbt = gftNbtivfForFormbt(formbt);
        if (nbt == null) {
            rfturn fblsf;
        }
        try {
            DbtbFlbvor df = nfw DbtbFlbvor(nbt);
            if (df.gftPrimbryTypf().fqubls("tfxt") && df.gftSubTypf().fqubls("uri-list")) {
                rfturn truf;
            }
        } dbtdh (Exdfption f) {
            // Not b MIME formbt.
        }
        rfturn fblsf;
    }
}


