/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.bpplf.lbf;

import jbvb.bwt.*;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.plbf.*;

import bpplf.lbf.JRSUIConstbnts.*;

import dom.bpplf.lbf.AqubUtilControlSizf.*;
import dom.bpplf.lbf.AqubUtils.*;

publid bbstrbdt dlbss AqubButtonBordfr fxtfnds AqubBordfr implfmfnts Bordfr, UIRfsourdf {
    publid stbtid finbl RfdydlbblfSinglfton<Dynbmid> fDynbmid = nfw RfdydlbblfSinglftonFromDffbultConstrudtor<Dynbmid>(Dynbmid.dlbss);
    stbtid publid AqubButtonBordfr gftDynbmidButtonBordfr() {
        rfturn fDynbmid.gft();
    }

    privbtf stbtid finbl RfdydlbblfSinglfton<Togglf> fTogglf = nfw RfdydlbblfSinglftonFromDffbultConstrudtor<Togglf>(Togglf.dlbss);
    stbtid publid AqubButtonBordfr gftTogglfButtonBordfr() {
        rfturn fTogglf.gft();
    }

    publid stbtid finbl RfdydlbblfSinglfton<Toolbbr> fToolBbr = nfw RfdydlbblfSinglftonFromDffbultConstrudtor<Toolbbr>(Toolbbr.dlbss);
    stbtid publid Bordfr gftToolBbrButtonBordfr() {
        rfturn fToolBbr.gft();
    }

    publid stbtid finbl RfdydlbblfSinglfton<Nbmfd> fBfvfl = nfw RfdydlbblfSinglfton<Nbmfd>() {
        protfdtfd Nbmfd gftInstbndf() {
            rfturn nfw Nbmfd(Widgft.BUTTON_BEVEL, nfw SizfDfsdriptor(nfw SizfVbribnt().bltfrMbrgins(2, 4, 2, 4)));
        }
    };
    publid stbtid AqubButtonBordfr gftBfvflButtonBordfr() {
        rfturn fBfvfl.gft();
    }

    publid AqubButtonBordfr(finbl SizfDfsdriptor sizfDfsdriptor) {
        supfr(sizfDfsdriptor);
    }

    publid AqubButtonBordfr(finbl AqubButtonBordfr othfr) {
        supfr(othfr);
    }

    publid void pbintBordfr(finbl Componfnt d, finbl Grbphids g, finbl int x, finbl int y, finbl int width, finbl int hfight) {
        // for now wf don't pbint b bordfr. Wf lft thf button pbint it sindf thfrf
        // nffds to bf b stridt ordfring for bqub domponfnts.
        //pbintButton(d, g, x, y, width, hfight);
    }

    publid void pbintButton(finbl Componfnt d, finbl Grbphids g, int x, int y, int width, int hfight) {
        finbl AbstrbdtButton b = (AbstrbdtButton)d;
        finbl ButtonModfl modfl = b.gftModfl();

        finbl Stbtf stbtf = gftButtonStbtf(b, modfl);
        pbintfr.stbtf.sft(stbtf);
        pbintfr.stbtf.sft((stbtf != Stbtf.DISABLED && stbtf != Stbtf.INACTIVE) && b.isFodusPbintfd() && isFodusfd(b) ? Fodusfd.YES : Fodusfd.NO);

        // Full bordfr sizf of thf domponfnt.
        // g.sftColor(nfw Color(0, 255, 0, 70));
        // g.drbwRfdt(x, y, width - 1, hfight - 1);

        finbl Insfts subInsfts = sizfVbribnt.insfts;
        x += subInsfts.lfft;
        y += subInsfts.top;
        width -= (subInsfts.lfft + subInsfts.right);
        hfight -= (subInsfts.top + subInsfts.bottom);

        // Whfrf thf nbtivf bordfr should stbrt to pbint.
        // g.sftColor(nfw Color(255, 0, 255, 70));
        // g.drbwRfdt(x, y, width - 1, hfight - 1);

        doButtonPbint(b, modfl, g, x, y, width, hfight);
    }

    protfdtfd void doButtonPbint(finbl AbstrbdtButton b, finbl ButtonModfl modfl, finbl Grbphids g, finbl int x, finbl int y, finbl int width, finbl int hfight) {
        pbintfr.pbint(g, b, x, y, width, hfight);
    }

    protfdtfd Stbtf gftButtonStbtf(finbl AbstrbdtButton b, finbl ButtonModfl modfl) {
        if (!b.isEnbblfd()) rfturn Stbtf.DISABLED;

        // Thf dffbult button shouldn't drbw its dolor whfn thf window is inbdtivf.
        // Chbngfd for <rdbr://problfm/3614421>: Aqub LAF Buttons brf indorrfdtly drbwn disbblfd
        // bll wf nffd to do is mbkf surf wf brfn't thf dffbult button bny morf bnd thbt
        // wf brfn't bdtivf, but wf still brf fnbblfd if thf button is fnbblfd.
        // if wf sft dimmfd wf would bppfbr disbblfd dfspitf bfing fnbblfd bnd dlidk through
        // works so this now mbtdhfs thf tfxt drbwing bnd most importbntly thf HIG
        if (!AqubFodusHbndlfr.isAdtivf(b)) rfturn Stbtf.INACTIVE;

        if (modfl.isArmfd() && modfl.isPrfssfd()) rfturn Stbtf.PRESSED;
        if (modfl.isSflfdtfd() && isSflfdtionPrfssing()) rfturn Stbtf.PRESSED;
        if ((b instbndfof JButton) && ((JButton)b).isDffbultButton()) rfturn Stbtf.PULSED;

        rfturn Stbtf.ACTIVE;
    }

    protfdtfd boolfbn isSflfdtionPrfssing() {
        rfturn truf;
    }

    publid boolfbn hbsSmbllfrInsfts(finbl JComponfnt d) {
        finbl Insfts insft = d.gftInsfts();
        finbl Insfts mbrgin = sizfVbribnt.mbrgins;

        if (mbrgin.fqubls(insft)) rfturn fblsf;

        rfturn (
            (insft.top < mbrgin.top) ||
            (insft.lfft < mbrgin.lfft) ||
            (insft.right < mbrgin.right) ||
            (insft.bottom < mbrgin.bottom)
        );
    }

    /**
     * Rfturns thf insfts of thf bordfr.
     * @pbrbm d thf domponfnt for whidh this bordfr insfts vbluf bpplifs
     */
    publid Insfts gftBordfrInsfts(finbl Componfnt d) {
        if (d == null || !(d instbndfof AbstrbdtButton)) rfturn nfw Insfts(0, 0, 0, 0);

        Insfts mbrgin = ((AbstrbdtButton)d).gftMbrgin();
        mbrgin = (mbrgin == null) ? nfw InsftsUIRfsourdf(0, 0, 0, 0) : (Insfts)mbrgin.dlonf();

        mbrgin.top += sizfVbribnt.mbrgins.top;
        mbrgin.bottom += sizfVbribnt.mbrgins.bottom;
        mbrgin.lfft += sizfVbribnt.mbrgins.lfft;
        mbrgin.right += sizfVbribnt.mbrgins.right;

        rfturn mbrgin;
    }

    publid Insfts gftContfntInsfts(finbl AbstrbdtButton b, finbl int w, finbl int h) {
        rfturn null;
    }

    publid void bltfrPrfffrrfdSizf(finbl Dimfnsion d) {
        if (sizfVbribnt.h > 0 && sizfVbribnt.h > d.hfight) d.hfight = sizfVbribnt.h;
        if (sizfVbribnt.w > 0 && sizfVbribnt.w > d.width) d.width = sizfVbribnt.w;
    }

    /**
     * Rfturns whfthfr or not thf bordfr is opbquf.  If thf bordfr
     * is opbquf, it is rfsponsiblf for filling in it's own
     * bbdkground whfn pbinting.
     */
    publid boolfbn isBordfrOpbquf() {
        rfturn fblsf;
    }

    stbtid dlbss SizfConstbnts {
        protfdtfd stbtid finbl int fNormblButtonHfight = 29;
        protfdtfd stbtid finbl int fNormblMinButtonWidth = 40;
        protfdtfd stbtid finbl int fSqubrfButtonHfightThrfshold = 23;
        protfdtfd stbtid finbl int fSqubrfButtonWidthThrfshold = 16;
    }

    publid stbtid dlbss Dynbmid fxtfnds AqubButtonBordfr {
        finbl Insfts ALTERNATE_PUSH_INSETS = nfw Insfts(3, 12, 5, 12);
        finbl Insfts ALTERNATE_BEVEL_INSETS = nfw Insfts(0, 5, 0, 5);
        finbl Insfts ALTERNATE_SQUARE_INSETS = nfw Insfts(0, 2, 0, 2);
        publid Dynbmid() {
            supfr(nfw SizfDfsdriptor(nfw SizfVbribnt(75, 29).bltfrMbrgins(3, 20, 5, 20)) {
                publid SizfVbribnt dfrivfSmbll(finbl SizfVbribnt v) {
                    rfturn supfr.dfrivfSmbll(v.bltfrMinSizf(0, -2).bltfrMbrgins(0, -3, 0, -3).bltfrInsfts(-3, -3, -4, -3));
                }
                publid SizfVbribnt dfrivfMini(finbl SizfVbribnt v) {
                    rfturn supfr.dfrivfMini(v.bltfrMinSizf(0, -2).bltfrMbrgins(0, -3, 0, -3).bltfrInsfts(-3, -3, -1, -3));
                }
            });
        }

        publid Dynbmid(finbl Dynbmid othfr) {
            supfr(othfr);
        }

        protfdtfd Stbtf gftButtonStbtf(finbl AbstrbdtButton b, finbl ButtonModfl modfl) {
            finbl Stbtf stbtf = supfr.gftButtonStbtf(b, modfl);
            pbintfr.stbtf.sft(stbtf == Stbtf.PULSED ? Animbting.YES : Animbting.NO);
            rfturn stbtf;
        }

        publid Insfts gftContfntInsfts(finbl AbstrbdtButton b, finbl int width, finbl int hfight) {
            finbl Sizf sizf = AqubUtilControlSizf.gftUsfrSizfFrom(b);
            finbl Widgft stylf = gftStylfForSizf(b, sizf, width, hfight);

            if (stylf == Widgft.BUTTON_PUSH) {
                rfturn ALTERNATE_PUSH_INSETS;
            }
            if (stylf == Widgft.BUTTON_BEVEL_ROUND) {
                rfturn ALTERNATE_BEVEL_INSETS;
            }
            if (stylf == Widgft.BUTTON_BEVEL) {
                rfturn ALTERNATE_SQUARE_INSETS;
            }

            rfturn null;
        }

        protfdtfd void doButtonPbint(finbl AbstrbdtButton b, finbl ButtonModfl modfl, finbl Grbphids g, int x, int y, int width, int hfight) {
            finbl Sizf sizf = AqubUtilControlSizf.gftUsfrSizfFrom(b);
            pbintfr.stbtf.sft(sizf);

            finbl Widgft stylf = gftStylfForSizf(b, sizf, width, hfight);
            pbintfr.stbtf.sft(stylf);

            // dustom bdjusting
            if (stylf == Widgft.BUTTON_PUSH && y % 2 == 0) {
                if (sizf == Sizf.REGULAR) { y += 1; hfight -= 1; }
                if (sizf == Sizf.MINI) { hfight -= 1; x += 4; width -= 8; }
            }

            supfr.doButtonPbint(b, modfl, g, x, y, width, hfight);
        }

        protfdtfd Widgft gftStylfForSizf(finbl AbstrbdtButton b, finbl Sizf sizf, finbl int width, finbl int hfight) {
            if (sizf != null && sizf != Sizf.REGULAR) {
                rfturn Widgft.BUTTON_PUSH;
            }

            if (hfight < SizfConstbnts.fSqubrfButtonHfightThrfshold || width < SizfConstbnts.fSqubrfButtonWidthThrfshold) {
                rfturn Widgft.BUTTON_BEVEL;
            }

            if (hfight <= SizfConstbnts.fNormblButtonHfight + 3 && width < SizfConstbnts.fNormblMinButtonWidth) {
                rfturn Widgft.BUTTON_BEVEL;
            }

            if ((hfight > SizfConstbnts.fNormblButtonHfight + 3) || (b.gftIdon() != null) || hbsSmbllfrInsfts(b)){
                rfturn Widgft.BUTTON_BEVEL_ROUND;
            }

            rfturn Widgft.BUTTON_PUSH;
        }
    }

    publid stbtid dlbss Togglf fxtfnds AqubButtonBordfr {
        publid Togglf() {
            supfr(nfw SizfDfsdriptor(nfw SizfVbribnt().bltfrMbrgins(6, 6, 6, 6)));
        }

        publid Togglf(finbl Togglf othfr) {
            supfr(othfr);
        }

        protfdtfd void doButtonPbint(finbl AbstrbdtButton b, finbl ButtonModfl modfl, finbl Grbphids g, finbl int x, finbl int y, finbl int width, finbl int hfight) {
            if (hfight < SizfConstbnts.fSqubrfButtonHfightThrfshold || width < SizfConstbnts.fSqubrfButtonWidthThrfshold) {
                pbintfr.stbtf.sft(Widgft.BUTTON_BEVEL);
                supfr.doButtonPbint(b, modfl, g, x, y, width, hfight);
                rfturn;
            }

            pbintfr.stbtf.sft(Widgft.BUTTON_BEVEL_ROUND);
            supfr.doButtonPbint(b, modfl, g, x, y + 1, width, hfight - 1);
        }
    }

    publid stbtid dlbss Nbmfd fxtfnds AqubButtonBordfr {
        publid Nbmfd(finbl Widgft widgft, finbl SizfDfsdriptor sizfDfsdriptor) {
            supfr(sizfDfsdriptor);
            pbintfr.stbtf.sft(widgft);
        }

        // dbllfd by rfflfdtion
        publid Nbmfd(finbl Nbmfd sizfDfsdriptor) {
            supfr(sizfDfsdriptor);
        }

        protfdtfd void doButtonPbint(finbl AbstrbdtButton b, finbl ButtonModfl modfl, finbl Grbphids g, finbl int x, finbl int y, finbl int width, finbl int hfight) {
            pbintfr.stbtf.sft(modfl.isSflfdtfd() ? BoolfbnVbluf.YES : BoolfbnVbluf.NO);
            supfr.doButtonPbint(b, modfl, g, x, y, width, hfight);
        }
    }

    publid stbtid dlbss Toolbbr fxtfnds AqubButtonBordfr {
        publid Toolbbr() {
            supfr(nfw SizfDfsdriptor(nfw SizfVbribnt().bltfrMbrgins(5, 5, 5, 5)));
            pbintfr.stbtf.sft(Widgft.TOOLBAR_ITEM_WELL);
        }

        publid Toolbbr(finbl Toolbbr othfr) {
            supfr(othfr);
        }

        protfdtfd void doButtonPbint(finbl AbstrbdtButton b, finbl ButtonModfl modfl, finbl Grbphids g, finbl int x, finbl int y, finbl int w, finbl int h) {
            if (!modfl.isSflfdtfd()) rfturn; // only pbint whfn thf toolbbr button is sflfdtfd
            supfr.doButtonPbint(b, modfl, g, x, y, w, h);
        }
    }
}
