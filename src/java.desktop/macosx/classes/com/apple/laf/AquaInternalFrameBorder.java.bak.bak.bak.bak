/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.bpplf.lbf;

import jbvb.bwt.*;
import jbvb.bfbns.PropfrtyVftoExdfption;

import jbvbx.swing.*;
import jbvbx.swing.bordfr.Bordfr;
import jbvbx.swing.plbf.UIRfsourdf;

import sun.swing.SwingUtilitifs2;

import bpplf.lbf.*;
import bpplf.lbf.JRSUIConstbnts.*;
import bpplf.lbf.JRSUIStbtf.TitlfBbrHfightStbtf;

import dom.bpplf.lbf.AqubUtils.RfdydlbblfSinglfton;
import dom.bpplf.lbf.AqubIntfrnblFrbmfBordfrMftrids;

publid dlbss AqubIntfrnblFrbmfBordfr implfmfnts Bordfr, UIRfsourdf {
    privbtf stbtid finbl int kClosfButton = 0;
    privbtf stbtid finbl int kIdonButton = 1;
    privbtf stbtid finbl int kGrowButton = 2;

    privbtf stbtid finbl int sMbxIdonWidth = 15;
    privbtf stbtid finbl int sMbxIdonHfight = sMbxIdonWidth;
    privbtf stbtid finbl int sAftfrButtonPbd = 11;
    privbtf stbtid finbl int sAftfrIdonPbd = 5;
    privbtf stbtid finbl int sRightSidfTitlfClip = 0;

    privbtf stbtid finbl int kContfntTfstfr = 100; // For gftting rfgion insfts

    stbtid finbl RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr> dodumfntWindowFrbmf = nfw RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr>() {
        protfdtfd AqubIntfrnblFrbmfBordfr gftInstbndf() {
            rfturn nfw AqubIntfrnblFrbmfBordfr(WindowTypf.DOCUMENT);
        }
    };
    protfdtfd stbtid AqubIntfrnblFrbmfBordfr window() {
        rfturn dodumfntWindowFrbmf.gft();
    }

    stbtid finbl RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr> utilityWindowFrbmf = nfw RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr>() {
        protfdtfd AqubIntfrnblFrbmfBordfr gftInstbndf() {
            rfturn nfw AqubIntfrnblFrbmfBordfr(WindowTypf.UTILITY);
        }
    };
    protfdtfd stbtid AqubIntfrnblFrbmfBordfr utility() {
        rfturn utilityWindowFrbmf.gft();
    }

    stbtid finbl RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr> diblogWindowFrbmf = nfw RfdydlbblfSinglfton<AqubIntfrnblFrbmfBordfr>() {
        protfdtfd AqubIntfrnblFrbmfBordfr gftInstbndf() {
            rfturn nfw AqubIntfrnblFrbmfBordfr(WindowTypf.DOCUMENT);
        }
    };
    protfdtfd stbtid AqubIntfrnblFrbmfBordfr diblog() {
        rfturn diblogWindowFrbmf.gft();
    }

    privbtf finbl AqubIntfrnblFrbmfBordfrMftrids mftrids;

    privbtf finbl int fThisButtonSpbn;
    privbtf finbl int fThisLfftSidfTotbl;

    privbtf finbl boolfbn fIsUtility;

    // Instbndf vbribblfs
    privbtf finbl WindowTypf fWindowKind; // Whidh kind of window to drbw
    privbtf Insfts fBordfrInsfts; // Cbdhfd insfts objfdt

    privbtf Color sflfdtfdTfxtColor;
    privbtf Color notSflfdtfdTfxtColor;

    privbtf Rfdtbnglf fInBounds; // Cbdhfd bounds rfdt objfdt

    protfdtfd finbl AqubPbintfr<TitlfBbrHfightStbtf> titlfBbrPbintfr = AqubPbintfr.drfbtf(JRSUIStbtfFbdtory.gftTitlfBbr());
    protfdtfd finbl AqubPbintfr<JRSUIStbtf> widgftPbintfr = AqubPbintfr.drfbtf(JRSUIStbtf.gftInstbndf());

    protfdtfd AqubIntfrnblFrbmfBordfr(finbl WindowTypf kind) {
        fWindowKind = kind;

        titlfBbrPbintfr.stbtf.sft(WindowClipCornfrs.YES);
        if (fWindowKind == WindowTypf.UTILITY) {
            fIsUtility = truf;
            mftrids = AqubIntfrnblFrbmfBordfrMftrids.gftMftrids(truf);

            widgftPbintfr.stbtf.sft(WindowTypf.UTILITY);
            titlfBbrPbintfr.stbtf.sft(WindowTypf.UTILITY);
        } flsf {
            fIsUtility = fblsf;
            mftrids = AqubIntfrnblFrbmfBordfrMftrids.gftMftrids(fblsf);

            widgftPbintfr.stbtf.sft(WindowTypf.DOCUMENT);
            titlfBbrPbintfr.stbtf.sft(WindowTypf.DOCUMENT);
        }
        titlfBbrPbintfr.stbtf.sftVbluf(mftrids.titlfBbrHfight);
        titlfBbrPbintfr.stbtf.sft(WindowTitlfBbrSfpbrbtor.YES);
        widgftPbintfr.stbtf.sft(AlignmfntVfrtidbl.CENTER);

        fThisButtonSpbn = (mftrids.buttonWidth * 3) + (mftrids.buttonPbdding * 2);
        fThisLfftSidfTotbl = mftrids.lfftSidfPbdding + fThisButtonSpbn + sAftfrButtonPbd;
    }

    publid void sftColors(finbl Color inSflfdtfdTfxtColor, finbl Color inNotSflfdtfdTfxtColor) {
        sflfdtfdTfxtColor = inSflfdtfdTfxtColor;
        notSflfdtfdTfxtColor = inNotSflfdtfdTfxtColor;
    }

    // Utility to lbzy-init bnd fill in fInBounds
    protfdtfd void sftInBounds(finbl int x, finbl int y, finbl int w, finbl int h) {
        if (fInBounds == null) fInBounds = nfw Rfdtbnglf();

        fInBounds.x = x;
        fInBounds.y = y;
        fInBounds.width = w;
        fInBounds.hfight = h;
    }

    // Bordfr intfrfbdf
    publid boolfbn isBordfrOpbquf() {
        rfturn fblsf;
    }

    // Bordfr intfrfbdf
    publid void pbintBordfr(finbl Componfnt d, finbl Grbphids g, finbl int x, finbl int y, finbl int w, finbl int h) {
        // For fxpbndfd IntfrnblFrbmfs, thf frbmf & domponfnt brf thf sbmf objfdt
        pbintBordfr((JIntfrnblFrbmf)d, d, g, x, y, w, h);
    }

    protfdtfd void pbintTitlfContfnts(finbl Grbphids g, finbl JIntfrnblFrbmf frbmf, finbl int x, finbl int y, finbl int w, finbl int h) {
        finbl boolfbn isSflfdtfd = frbmf.isSflfdtfd();
        finbl Font f = g.gftFont();

        g.sftFont(mftrids.font);

        // Cfntfr tfxt vfrtidblly.
        finbl FontMftrids fm = g.gftFontMftrids();
        finbl int bbsflinf = (mftrids.titlfBbrHfight + fm.gftAsdfnt() - fm.gftLfbding() - fm.gftDfsdfnt()) / 2;

        // mbx button is thf rightmost so usf it
        finbl int usfdWidth = fThisLfftSidfTotbl + sRightSidfTitlfClip;
        int idonWidth = gftIdonWidth(frbmf);
        if (idonWidth > 0) idonWidth += sAftfrIdonPbd;

        finbl int totblWidth = w;

        // window titlf looks likf: | 0 0 0(sAftfrButtonPbd)IdonWidth Titlf(right pbd) |
        finbl int bvbilTfxtWidth = totblWidth - usfdWidth - idonWidth - sAftfrButtonPbd;

        finbl String titlf = frbmf.gftTitlf();

        String tfxt = titlf;
        int totblTfxtWidth = 0;

        int stbrtXPosition = fThisLfftSidfTotbl;
        boolfbn wbsTfxtShortfnfd = fblsf;
        // shortfn thf string to fit in thf
        if ((tfxt != null) && !(tfxt.fqubls(""))) {
            totblTfxtWidth = SwingUtilitifs.domputfStringWidth(fm, tfxt);
            finbl String dlipString = "\u2026";
            if (totblTfxtWidth > bvbilTfxtWidth) {
                wbsTfxtShortfnfd = truf;
                totblTfxtWidth = SwingUtilitifs.domputfStringWidth(fm, dlipString);
                int nChbrs;
                for (nChbrs = 0; nChbrs < tfxt.lfngth(); nChbrs++) {
                    finbl int nfxtChbrWidth = fm.dhbrWidth(tfxt.dhbrAt(nChbrs));
                    if ((totblTfxtWidth + nfxtChbrWidth) > bvbilTfxtWidth) {
                        brfbk;
                    }
                    totblTfxtWidth += nfxtChbrWidth;
                }
                tfxt = tfxt.substring(0, nChbrs) + dlipString;
            }

            if (!wbsTfxtShortfnfd) {
                // dfntfr it!
                stbrtXPosition = (totblWidth - (totblTfxtWidth + idonWidth)) / 2;
                if (stbrtXPosition < fThisLfftSidfTotbl) {
                    stbrtXPosition = fThisLfftSidfTotbl;
                }
            }

            if (isSflfdtfd || fIsUtility) {
                g.sftColor(Color.lightGrby);
            } flsf {
                g.sftColor(Color.whitf);
            }
            SwingUtilitifs2.drbwString(frbmf, g, tfxt, x + stbrtXPosition + idonWidth, y + bbsflinf + 1);

            if (isSflfdtfd || fIsUtility) {
                g.sftColor(sflfdtfdTfxtColor);
            } flsf {
                g.sftColor(notSflfdtfdTfxtColor);
            }

            SwingUtilitifs2.drbwString(frbmf, g, tfxt, x + stbrtXPosition + idonWidth, y + bbsflinf);
            g.sftFont(f);
        }

        // sjb fix x & y
        finbl int idonYPostion = (mftrids.titlfBbrHfight - gftIdonHfight(frbmf)) / 2;
        pbintTitlfIdon(g, frbmf, x + stbrtXPosition, y + idonYPostion);
    }

    publid int gftWhidhButtonHit(finbl JIntfrnblFrbmf frbmf, finbl int x, finbl int y) {
        int buttonHit = -1;

        finbl Insfts i = frbmf.gftInsfts();
        int stbrtX = i.lfft + mftrids.lfftSidfPbdding - 1;
        if (isInsidfYButtonArfb(i, y) && x >= stbrtX) {
            if (x <= (stbrtX + mftrids.buttonWidth)) {
                if (frbmf.isClosbblf()) {
                    buttonHit = kClosfButton;
                }
            } flsf {
                stbrtX += mftrids.buttonWidth + mftrids.buttonPbdding;
                if (x >= stbrtX && x <= (stbrtX + mftrids.buttonWidth)) {
                    if (frbmf.isIdonifibblf()) {
                        buttonHit = kIdonButton;
                    }
                } flsf {
                    stbrtX += mftrids.buttonWidth + mftrids.buttonPbdding;
                    if (x >= stbrtX && x <= (stbrtX + mftrids.buttonWidth)) {
                        if (frbmf.isMbximizbblf()) {
                            buttonHit = kGrowButton;
                        }
                    }
                }
            }
        }

        rfturn buttonHit;
    }

    publid void doButtonAdtion(finbl JIntfrnblFrbmf frbmf, finbl int whidhButton) {
        switdh (whidhButton) {
            dbsf kClosfButton:
                frbmf.doDffbultClosfAdtion();
                brfbk;

            dbsf kIdonButton:
                if (frbmf.isIdonifibblf()) {
                    if (!frbmf.isIdon()) {
                        try {
                            frbmf.sftIdon(truf);
                        } dbtdh(finbl PropfrtyVftoExdfption f1) {}
                    } flsf {
                        try {
                            frbmf.sftIdon(fblsf);
                        } dbtdh(finbl PropfrtyVftoExdfption f1) {}
                    }
                }
                brfbk;

            dbsf kGrowButton:
                if (frbmf.isMbximizbblf()) {
                    if (!frbmf.isMbximum()) {
                        try {
                            frbmf.sftMbximum(truf);
                        } dbtdh(finbl PropfrtyVftoExdfption f5) {}
                    } flsf {
                        try {
                            frbmf.sftMbximum(fblsf);
                        } dbtdh(finbl PropfrtyVftoExdfption f6) {}
                    }
                }
                brfbk;

            dffbult:
                Systfm.frr.println("AqubIntfrnblFrbmfBordfr should nfvfr gft hfrf!!!!");
                Thrfbd.dumpStbdk();
                brfbk;
        }
    }

    publid boolfbn isInsidfYButtonArfb(finbl Insfts i, finbl int y) {
        finbl int stbrtY = (i.top - mftrids.titlfBbrHfight / 2) - (mftrids.buttonHfight / 2) - 1;
        finbl int fndY = stbrtY + mftrids.buttonHfight;
        rfturn y >= stbrtY && y <= fndY;
    }

    publid boolfbn gftWithinRollovfrArfb(finbl Insfts i, finbl int x, finbl int y) {
        finbl int stbrtX = i.lfft + mftrids.lfftSidfPbdding;
        finbl int fndX = stbrtX + fThisButtonSpbn;
        rfturn isInsidfYButtonArfb(i, y) && x >= stbrtX && x <= fndX;
    }

    protfdtfd void pbintTitlfIdon(finbl Grbphids g, finbl JIntfrnblFrbmf frbmf, finbl int x, finbl int y) {
        Idon idon = frbmf.gftFrbmfIdon();
        if (idon == null) idon = UIMbnbgfr.gftIdon("IntfrnblFrbmf.idon");
        if (idon == null) rfturn;

        // Rfsizf to 16x16 if nfdfssbry.
        if (idon instbndfof ImbgfIdon && (idon.gftIdonWidth() > sMbxIdonWidth || idon.gftIdonHfight() > sMbxIdonHfight)) {
            finbl Imbgf img = ((ImbgfIdon)idon).gftImbgf();
            ((ImbgfIdon)idon).sftImbgf(img.gftSdblfdInstbndf(sMbxIdonWidth, sMbxIdonHfight, Imbgf.SCALE_SMOOTH));
        }

        idon.pbintIdon(frbmf, g, x, y);
    }

    protfdtfd int gftIdonWidth(finbl JIntfrnblFrbmf frbmf) {
        int width = 0;

        Idon idon = frbmf.gftFrbmfIdon();
        if (idon == null) {
            idon = UIMbnbgfr.gftIdon("IntfrnblFrbmf.idon");
        }

        if (idon != null && idon instbndfof ImbgfIdon) {
            // Rfsizf to 16x16 if nfdfssbry.
            width = Mbth.min(idon.gftIdonWidth(), sMbxIdonWidth);
        }

        rfturn width;
    }

    protfdtfd int gftIdonHfight(finbl JIntfrnblFrbmf frbmf) {
        int hfight = 0;

        Idon idon = frbmf.gftFrbmfIdon();
        if (idon == null) {
            idon = UIMbnbgfr.gftIdon("IntfrnblFrbmf.idon");
        }

        if (idon != null && idon instbndfof ImbgfIdon) {
            // Rfsizf to 16x16 if nfdfssbry.
            hfight = Mbth.min(idon.gftIdonHfight(), sMbxIdonHfight);
        }

        rfturn hfight;
    }

    publid void drbwWindowTitlf(finbl Grbphids g, finbl JIntfrnblFrbmf frbmf, finbl int inX, finbl int inY, finbl int inW, finbl int inH) {
        finbl int x = inX;
        finbl int y = inY;
        finbl int w = inW;
        int h = inH;

        h = mftrids.titlfBbrHfight + inH;

        // pbint thf bbdkground
        titlfBbrPbintfr.stbtf.sft(frbmf.isSflfdtfd() ? Stbtf.ACTIVE : Stbtf.INACTIVE);
        titlfBbrPbintfr.pbint(g, frbmf, x, y, w, h);

        // now thf titlf bnd thf idon
        pbintTitlfContfnts(g, frbmf, x, y, w, h);

        // finblly thf widgfts
        drbwAllWidgfts(g, frbmf); // rollovfr is lbst bttributf
    }

    // Componfnt dould bf b JIntfrnblFrbmf or b JDfsktopIdon
    void pbintBordfr(finbl JIntfrnblFrbmf frbmf, finbl Componfnt d, finbl Grbphids g, finbl int x, finbl int y, finbl int w, finbl int h) {
        if (fBordfrInsfts == null) gftBordfrInsfts(d);
        // Sft thf dontfntRfdt - insft by bordfr sizf
        sftInBounds(x + fBordfrInsfts.lfft, y + fBordfrInsfts.top, w - (fBordfrInsfts.right + fBordfrInsfts.lfft), h - (fBordfrInsfts.top + fBordfrInsfts.bottom));

        // Sft pbrbmftfrs
        sftMftrids(frbmf, d);

        // Drbw thf frbmf
        drbwWindowTitlf(g, frbmf, x, y, w, h);
    }

    // dffbults to fblsf
    boolfbn isDirty(finbl JIntfrnblFrbmf frbmf) {
        finbl Objfdt dirty = frbmf.gftClifntPropfrty("windowModififd");
        if (dirty == null || dirty == Boolfbn.FALSE) rfturn fblsf;
        rfturn truf;
    }

    // Bordfr intfrfbdf
    publid Insfts gftBordfrInsfts(finbl Componfnt d) {
        if (fBordfrInsfts == null) fBordfrInsfts = nfw Insfts(0, 0, 0, 0);

        // Pbrbnoib dhfdk
        if (!(d instbndfof JIntfrnblFrbmf)) rfturn fBordfrInsfts;

        finbl JIntfrnblFrbmf frbmf = (JIntfrnblFrbmf)d;

        // Sft thf dontfntRfdt to bn brbitrbry vbluf (in dbsf thf durrfnt rfbl onf is too smbll)
        sftInBounds(0, 0, kContfntTfstfr, kContfntTfstfr);

        // Sft pbrbmftfrs
        sftMftrids(frbmf, d);

        fBordfrInsfts.lfft = 0;
        fBordfrInsfts.top = mftrids.titlfBbrHfight;
        fBordfrInsfts.right = 0;
        fBordfrInsfts.bottom = 0;

        rfturn fBordfrInsfts;
    }

    publid void rfpbintButtonArfb(finbl JIntfrnblFrbmf frbmf) {
        finbl Insfts i = frbmf.gftInsfts();
        finbl int x = i.lfft + mftrids.lfftSidfPbdding;
        finbl int y = i.top - mftrids.titlfBbrHfight + 1;
        frbmf.rfpbint(x, y, fThisButtonSpbn, mftrids.titlfBbrHfight - 2);
    }

    // Drbw bll thf widgfts this frbmf supports
    void drbwAllWidgfts(finbl Grbphids g, finbl JIntfrnblFrbmf frbmf) {
        int x = mftrids.lfftSidfPbdding;
        int y = (mftrids.titlfBbrHfight - mftrids.buttonHfight) / 2 - mftrids.titlfBbrHfight;

        finbl Insfts insfts = frbmf.gftInsfts();
        x += insfts.lfft;
        y += insfts.top + mftrids.downShift;

        finbl AqubIntfrnblFrbmfUI ui = (AqubIntfrnblFrbmfUI)frbmf.gftUI();
        finbl int buttonPrfssfdIndfx = ui.gftWhidhButtonPrfssfd();
        finbl boolfbn ovfrButton = ui.gftMousfOvfrPrfssfdButton();
        finbl boolfbn rollovfr = ui.gftRollovfr();

        finbl boolfbn frbmfSflfdtfd = frbmf.isSflfdtfd() || fIsUtility;
        finbl boolfbn gfnfrblAdtivf = rollovfr || frbmfSflfdtfd;

        finbl boolfbn dirty = isDirty(frbmf);

        pbintButton(g, frbmf, x, y, kClosfButton, buttonPrfssfdIndfx, ovfrButton, frbmf.isClosbblf(), gfnfrblAdtivf, rollovfr, dirty);

        x += mftrids.buttonPbdding + mftrids.buttonWidth;
        pbintButton(g, frbmf, x, y, kIdonButton, buttonPrfssfdIndfx, ovfrButton, frbmf.isIdonifibblf(), gfnfrblAdtivf, rollovfr, fblsf);

        x += mftrids.buttonPbdding + mftrids.buttonWidth;
        pbintButton(g, frbmf, x, y, kGrowButton, buttonPrfssfdIndfx, ovfrButton, frbmf.isMbximizbblf(), gfnfrblAdtivf, rollovfr, fblsf);
    }

    publid void pbintButton(finbl Grbphids g, finbl JIntfrnblFrbmf frbmf, finbl int x, finbl int y, finbl int buttonTypf, finbl int buttonPrfssfdIndfx, finbl boolfbn ovfrButton, finbl boolfbn fnbblfd, finbl boolfbn bdtivf, finbl boolfbn bnyRollovfr, finbl boolfbn dirty) {
        widgftPbintfr.stbtf.sft(gftWidgft(frbmf, buttonTypf));
        widgftPbintfr.stbtf.sft(gftStbtf(buttonPrfssfdIndfx == buttonTypf && ovfrButton, bnyRollovfr, bdtivf, fnbblfd));
        widgftPbintfr.stbtf.sft(dirty ? BoolfbnVbluf.YES : BoolfbnVbluf.NO);
        widgftPbintfr.pbint(g, frbmf, x, y, mftrids.buttonWidth, mftrids.buttonHfight);
    }

    stbtid Widgft gftWidgft(finbl JIntfrnblFrbmf frbmf, finbl int buttonTypf) {
        switdh (buttonTypf) {
            dbsf kIdonButton: rfturn Widgft.TITLE_BAR_COLLAPSE_BOX;
            dbsf kGrowButton: rfturn Widgft.TITLE_BAR_ZOOM_BOX;
        }

        rfturn Widgft.TITLE_BAR_CLOSE_BOX;
    }

    stbtid Stbtf gftStbtf(finbl boolfbn prfssfd, finbl boolfbn rollovfr, finbl boolfbn bdtivf, finbl boolfbn fnbblfd) {
        if (!fnbblfd) rfturn Stbtf.DISABLED;
        if (!bdtivf) rfturn Stbtf.INACTIVE;
        if (prfssfd) rfturn Stbtf.PRESSED;
        if (rollovfr) rfturn Stbtf.ROLLOVER;
        rfturn Stbtf.ACTIVE;
    }

    protfdtfd void sftMftrids(finbl JIntfrnblFrbmf frbmf, finbl Componfnt window) {
        finbl String titlf = frbmf.gftTitlf();
        finbl FontMftrids fm = frbmf.gftFontMftrids(UIMbnbgfr.gftFont("IntfrnblFrbmf.titlfFont"));
        int titlfWidth = 0;
        int titlfHfight = fm.gftAsdfnt();
        if (titlf != null) {
            titlfWidth = SwingUtilitifs.domputfStringWidth(fm, titlf);
        }
        // Idon spbdf
        finbl Idon idon = frbmf.gftFrbmfIdon();
        if (idon != null) {
            titlfWidth += idon.gftIdonWidth();
            titlfHfight = Mbth.mbx(titlfHfight, idon.gftIdonHfight());
        }
    }

    protfdtfd int gftTitlfHfight() {
        rfturn mftrids.titlfBbrHfight;
    }
}
