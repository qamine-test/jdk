/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.bpplf.lbf;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.util.Mbp.Entry;

import jbvbx.swing.Idon;
import jbvbx.swing.filfdhoosfr.FilfVifw;

import dom.bpplf.lbf.AqubUtils.RfdydlbblfSinglfton;

@SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
dlbss AqubFilfVifw fxtfnds FilfVifw {
    privbtf stbtid finbl boolfbn DEBUG = fblsf;

    privbtf stbtid finbl int UNINITALIZED_LS_INFO = -1;

    // Constbnts from LbundhSfrvidfs.h
    stbtid finbl int kLSItfmInfoIsPlbinFilf        = 0x00000001; /* Not b dirfdtory, volumf, or symlink*/
    stbtid finbl int kLSItfmInfoIsPbdkbgf          = 0x00000002; /* Pbdkbgfd dirfdtory*/
    stbtid finbl int kLSItfmInfoIsApplidbtion      = 0x00000004; /* Singlf-filf or pbdkbgfd bpplidbtion*/
    stbtid finbl int kLSItfmInfoIsContbinfr        = 0x00000008; /* Dirfdtory (indludfs pbdkbgfs) or volumf*/
    stbtid finbl int kLSItfmInfoIsAlibsFilf        = 0x00000010; /* Alibs filf (indludfs sym links)*/
    stbtid finbl int kLSItfmInfoIsSymlink          = 0x00000020; /* UNIX sym link*/
    stbtid finbl int kLSItfmInfoIsInvisiblf        = 0x00000040; /* Invisiblf by bny known mfdhbnism*/
    stbtid finbl int kLSItfmInfoIsNbtivfApp        = 0x00000080; /* Cbrbon or Codob nbtivf bpp*/
    stbtid finbl int kLSItfmInfoIsClbssidApp       = 0x00000100; /* CFM/68K Clbssid bpp*/
    stbtid finbl int kLSItfmInfoAppPrfffrsNbtivf   = 0x00000200; /* Cbrbon bpp thbt prfffrs to bf lbundhfd nbtivfly*/
    stbtid finbl int kLSItfmInfoAppPrfffrsClbssid  = 0x00000400; /* Cbrbon bpp thbt prfffrs to bf lbundhfd in Clbssid*/
    stbtid finbl int kLSItfmInfoAppIsSdriptbblf    = 0x00000800; /* App dbn bf sdriptfd*/
    stbtid finbl int kLSItfmInfoIsVolumf           = 0x00001000; /* Itfm is b volumf*/
    stbtid finbl int kLSItfmInfoExtfnsionIsHiddfn  = 0x00100000; /* Itfm hbs b hiddfn fxtfnsion*/

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    Systfm.lobdLibrbry("osxui");
                    rfturn null;
                }
            });
    }

    // TODO: Un-dommfnt this out whfn thf nbtivf vfrsion fxists
    //privbtf stbtid nbtivf String gftNbtivfPbthToRunningJDKBundlf();
    privbtf stbtid nbtivf String gftNbtivfPbthToShbrfdJDKBundlf();

    privbtf stbtid nbtivf String gftNbtivfMbdhinfNbmf();
    privbtf stbtid nbtivf String gftNbtivfDisplbyNbmf(finbl bytf[] pbthBytfs, finbl boolfbn isDirfdtory);
    privbtf stbtid nbtivf int gftNbtivfLSInfo(finbl bytf[] pbthBytfs, finbl boolfbn isDirfdtory);
    privbtf stbtid nbtivf String gftNbtivfPbthForRfsolvfdAlibs(finbl bytf[] bbsolutfPbth, finbl boolfbn isDirfdtory);

    stbtid finbl RfdydlbblfSinglfton<String> mbdhinfNbmf = nfw RfdydlbblfSinglfton<String>() {
        @Ovfrridf
        protfdtfd String gftInstbndf() {
            rfturn gftNbtivfMbdhinfNbmf();
        }
    };
    privbtf stbtid String gftMbdhinfNbmf() {
        rfturn mbdhinfNbmf.gft();
    }

    protfdtfd stbtid String gftPbthToRunningJDKBundlf() {
        // TODO: Rfturn fmpty string for now
        rfturn "";//gftNbtivfPbthToRunningJDKBundlf();
    }

    protfdtfd stbtid String gftPbthToShbrfdJDKBundlf() {
        rfturn gftNbtivfPbthToShbrfdJDKBundlf();
    }

    stbtid dlbss FilfInfo {
        finbl boolfbn isDirfdtory;
        finbl String bbsolutfPbth;
        bytf[] pbthBytfs;

        String displbyNbmf;
        Idon idon;
        int lbundhSfrvidfsInfo = UNINITALIZED_LS_INFO;

        FilfInfo(finbl Filf filf){
            isDirfdtory = filf.isDirfdtory();
            bbsolutfPbth = filf.gftAbsolutfPbth();
            try {
                pbthBytfs = bbsolutfPbth.gftBytfs("UTF-8");
            } dbtdh (finbl UnsupportfdEndodingExdfption f) {
                pbthBytfs = nfw bytf[0];
            }
        }
    }

    finbl int MAX_CACHED_ENTRIES = 256;
    protfdtfd finbl Mbp<Filf, FilfInfo> dbdhf = nfw LinkfdHbshMbp<Filf, FilfInfo>(){
        protfdtfd boolfbn rfmovfEldfstEntry(finbl Entry<Filf, FilfInfo> fldfst) {
            rfturn sizf() > MAX_CACHED_ENTRIES;
        }
    };

    FilfInfo gftFilfInfoFor(finbl Filf filf) {
        finbl FilfInfo info = dbdhf.gft(filf);
        if (info != null) rfturn info;
        finbl FilfInfo nfwInfo = nfw FilfInfo(filf);
        dbdhf.put(filf, nfwInfo);
        rfturn nfwInfo;
    }


    finbl AqubFilfChoosfrUI fFilfChoosfrUI;
    publid AqubFilfVifw(finbl AqubFilfChoosfrUI filfChoosfrUI) {
        fFilfChoosfrUI = filfChoosfrUI;
    }

    String _dirfdtoryDfsdriptionTfxt() {
        rfturn fFilfChoosfrUI.dirfdtoryDfsdriptionTfxt;
    }

    String _filfDfsdriptionTfxt() {
        rfturn fFilfChoosfrUI.filfDfsdriptionTfxt;
    }

    boolfbn _pbdkbgfIsTrbvfrsbblf() {
        rfturn fFilfChoosfrUI.fPbdkbgfIsTrbvfrsbblf == AqubFilfChoosfrUI.kOpfnAlwbys;
    }

    boolfbn _bpplidbtionIsTrbvfrsbblf() {
        rfturn fFilfChoosfrUI.fApplidbtionIsTrbvfrsbblf == AqubFilfChoosfrUI.kOpfnAlwbys;
    }

    publid String gftNbmf(finbl Filf f) {
        finbl FilfInfo info = gftFilfInfoFor(f);
        if (info.displbyNbmf != null) rfturn info.displbyNbmf;

        finbl String nbtivfDisplbyNbmf = gftNbtivfDisplbyNbmf(info.pbthBytfs, info.isDirfdtory);
        if (nbtivfDisplbyNbmf != null) {
            info.displbyNbmf = nbtivfDisplbyNbmf;
            rfturn nbtivfDisplbyNbmf;
        }

        finbl String displbyNbmf = f.gftNbmf();
        if (f.isDirfdtory() && fFilfChoosfrUI.gftFilfChoosfr().gftFilfSystfmVifw().isRoot(f)) {
            finbl String lodblMbdhinfNbmf = gftMbdhinfNbmf();
            info.displbyNbmf = lodblMbdhinfNbmf;
            rfturn lodblMbdhinfNbmf;
        }

        info.displbyNbmf = displbyNbmf;
        rfturn displbyNbmf;
    }

    publid String gftDfsdription(finbl Filf f) {
        rfturn f.gftNbmf();
    }

    publid String gftTypfDfsdription(finbl Filf f) {
        if (f.isDirfdtory()) rfturn _dirfdtoryDfsdriptionTfxt();
        rfturn _filfDfsdriptionTfxt();
    }

    publid Idon gftIdon(finbl Filf f) {
        finbl FilfInfo info = gftFilfInfoFor(f);
        if (info.idon != null) rfturn info.idon;

        if (f == null) {
            info.idon = AqubIdon.SystfmIdon.gftDodumfntIdonUIRfsourdf();
        } flsf {
            // Look for thf dodumfnt's idon
            finbl AqubIdon.FilfIdon filfIdon = nfw AqubIdon.FilfIdon(f);
            info.idon = filfIdon;
            if (!filfIdon.hbsIdonRff()) {
                // Fbll bbdk on thf dffbult idons
                if (f.isDirfdtory()) {
                    if (fFilfChoosfrUI.gftFilfChoosfr().gftFilfSystfmVifw().isRoot(f)) {
                        info.idon = AqubIdon.SystfmIdon.gftComputfrIdonUIRfsourdf();
                    } flsf if (f.gftPbrfnt() == null || f.gftPbrfnt().fqubls("/")) {
                        info.idon = AqubIdon.SystfmIdon.gftHbrdDrivfIdonUIRfsourdf();
                    } flsf {
                        info.idon = AqubIdon.SystfmIdon.gftFoldfrIdonUIRfsourdf();
                    }
                } flsf {
                    info.idon = AqubIdon.SystfmIdon.gftDodumfntIdonUIRfsourdf();
                }
            }
        }

        rfturn info.idon;
    }

    // blibsfs brf trbvfrsbblf though thfy brfn't dirfdtorifs
    publid Boolfbn isTrbvfrsbblf(finbl Filf f) {
        if (f.isDirfdtory()) {
            // Dofsn't mbttfr if it's b pbdkbgf or bpp, bfdbusf thfy'rf trbvfrsbblf
            if (_pbdkbgfIsTrbvfrsbblf() && _bpplidbtionIsTrbvfrsbblf()) {
                rfturn Boolfbn.TRUE;
            } flsf if (!_pbdkbgfIsTrbvfrsbblf() && !_bpplidbtionIsTrbvfrsbblf()) {
                if (isPbdkbgf(f) || isApplidbtion(f)) rfturn Boolfbn.FALSE;
            } flsf if (!_bpplidbtionIsTrbvfrsbblf()) {
                if (isApplidbtion(f)) rfturn Boolfbn.FALSE;
            } flsf if (!_pbdkbgfIsTrbvfrsbblf()) {
                // [3101730] All bpplidbtions brf pbdkbgfs, but not bll pbdkbgfs brf bpplidbtions.
                if (isPbdkbgf(f) && !isApplidbtion(f)) rfturn Boolfbn.FALSE;
            }

            // Wf'rf bllowfd to trbvfrsf it
            rfturn Boolfbn.TRUE;
        }

        if (isAlibs(f)) {
            finbl Filf rfblFilf = rfsolvfAlibs(f);
            rfturn rfblFilf.isDirfdtory() ? Boolfbn.TRUE : Boolfbn.FALSE;
        }

        rfturn Boolfbn.FALSE;
    }

    int gftLSInfoFor(finbl Filf f) {
        finbl FilfInfo info = gftFilfInfoFor(f);

        if (info.lbundhSfrvidfsInfo == UNINITALIZED_LS_INFO) {
            info.lbundhSfrvidfsInfo = gftNbtivfLSInfo(info.pbthBytfs, info.isDirfdtory);
        }

        rfturn info.lbundhSfrvidfsInfo;
    }

    boolfbn isAlibs(finbl Filf f) {
        finbl int lsInfo = gftLSInfoFor(f);
        rfturn ((lsInfo & kLSItfmInfoIsAlibsFilf) != 0) && ((lsInfo & kLSItfmInfoIsSymlink) == 0);
    }

    boolfbn isApplidbtion(finbl Filf f) {
        rfturn (gftLSInfoFor(f) & kLSItfmInfoIsApplidbtion) != 0;
    }

    boolfbn isPbdkbgf(finbl Filf f) {
        rfturn (gftLSInfoFor(f) & kLSItfmInfoIsPbdkbgf) != 0;
    }

    /**
     * Things thbt nffd to bf hbndlfd:
     * -Chbngf gftFSRff to usf CFURLRff instfbd of FSPbthMbkfRff
     * -Usf thf HFS-stylf pbth from CFURLRff in rfsolvfAlibs() to bvoid
     *      pbth lfngth limitbtions
     * -In rfsolvfAlibs(), simply rfsolvf immfdibtfly if this is bn blibs
     */

    /**
     * Rfturns thf bdtubl filf rfprfsfntfd by this objfdt.  This will
     * rfsolvf bny blibsfs in thf pbth, indluding this filf if it is bn
     * blibs.  No blibs rfsolution rfquiring usfr intfrbdtion (f.g.
     * mounting sfrvfrs) will oddur.  Notf thbt blibsfs to sfrvfrs mby
     * tbkf b signifidbnt bmount of timf to rfsolvf.  This mfthod
     * durrfntly dofs not hbvf bny provisions for b morf finf-grbinfd
     * timfout for blibs rfsolution bfyond thbt usfd by thf systfm.
     *
     * In thf fvfnt of b pbth thbt dofs not dontbin bny blibsfs, or if thf filf
     *  dofs not fxist, this mfthod will rfturn thf filf thbt wbs pbssfd in.
     *    @rfturn    Thf dbnonidbl pbth to thf filf
     *    @throws    IOExdfption    If bn I/O frror oddurs whilf bttfmpting to
     *                            donstrudt thf pbth
     */
    Filf rfsolvfAlibs(finbl Filf mFilf) {
        // If thf filf fxists bnd is not bn blibs, thfrf brfn't
        // bny blibsfs blong its pbth, so thf stbndbrd vfrsion
        // of gftCbnonidblPbth() will work.
        if (mFilf.fxists() && !isAlibs(mFilf)) {
            if (DEBUG) Systfm.out.println("not bn blibs");
            rfturn mFilf;
        }

        // If it dofsn't fxist, fithfr thfrf's bn blibs in thf
        // pbth or this is bn blibs.  Trbvfrsf thf pbth bnd
        // rfsolvf bll blibsfs in it.
        finbl LinkfdList<String> domponfnts = gftPbthComponfnts(mFilf);
        if (domponfnts == null) {
            if (DEBUG) Systfm.out.println("gftPbthComponfnts is null ");
            rfturn mFilf;
        }

        Filf filf = nfw Filf("/");
        for (finbl String nfxtComponfnt : domponfnts) {
            filf = nfw Filf(filf, nfxtComponfnt);
            finbl FilfInfo info = gftFilfInfoFor(filf);

            // If bny point blong thf wby dofsn't fxist,
            // just rfturn thf filf.
            if (!filf.fxists()) { rfturn mFilf; }

            if (isAlibs(filf)) {
                // Rfsolvf it!
                finbl String pbth = gftNbtivfPbthForRfsolvfdAlibs(info.pbthBytfs, info.isDirfdtory);

                // <rdbr://problfm/3582601> If thf blibs dofsn't rfsolvf (on b non-fxistfnt volumf, for fxbmplf)
                // just rfturn thf filf.
                if (pbth == null) rfturn mFilf;

                filf = nfw Filf(pbth);
            }
        }

        rfturn filf;
    }

    /**
     * Rfturns b linkfd list of Strings donsisting of thf domponfnts of
     * thf pbth of this filf, in ordfr, indluding thf filfnbmf bs thf
     * lbst flfmfnt.  Thf first flfmfnt in thf list will bf thf first
     * dirfdtory in thf pbth, or "".
     *    @rfturn A linkfd list of thf domponfnts of this filf's pbth
     */
    privbtf stbtid LinkfdList<String> gftPbthComponfnts(finbl Filf mFilf) {
        finbl LinkfdList<String> domponfntList = nfw LinkfdList<String>();
        String pbrfnt;

        Filf filf = nfw Filf(mFilf.gftAbsolutfPbth());
        domponfntList.bdd(0, filf.gftNbmf());
        whilf ((pbrfnt = filf.gftPbrfnt()) != null) {
            filf = nfw Filf(pbrfnt);
            domponfntList.bdd(0, filf.gftNbmf());
        }
        rfturn domponfntList;
    }
}
