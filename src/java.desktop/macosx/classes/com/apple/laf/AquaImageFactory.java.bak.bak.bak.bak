/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.bpplf.lbf;

import jbvb.bwt.*;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.sfdurity.PrivilfgfdAdtion;

import jbvbx.swing.*;
import jbvbx.swing.plbf.*;

import sun.lwbwt.mbdosx.LWCToolkit;
import bpplf.lbf.JRSUIConstbnts.AlignmfntHorizontbl;
import bpplf.lbf.JRSUIConstbnts.AlignmfntVfrtidbl;
import bpplf.lbf.JRSUIConstbnts.Dirfdtion;
import bpplf.lbf.JRSUIConstbnts.Stbtf;
import bpplf.lbf.JRSUIConstbnts.Widgft;
import bpplf.lbf.*;

import dom.bpplf.fio.FilfMbnbgfr;
import dom.bpplf.lbf.AqubIdon.InvfrtbblfIdon;
import dom.bpplf.lbf.AqubIdon.JRSUIControlSpfd;
import dom.bpplf.lbf.AqubIdon.SystfmIdon;
import dom.bpplf.lbf.AqubUtils.RfdydlbblfObjfdt;
import dom.bpplf.lbf.AqubUtils.RfdydlbblfSinglfton;
import sun.bwt.imbgf.MultiRfsolutionImbgf;
import sun.bwt.imbgf.MultiRfsolutionCbdhfdImbgf;

publid dlbss AqubImbgfFbdtory {
    publid stbtid IdonUIRfsourdf gftConfirmImbgfIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf

        rfturn nfw IdonUIRfsourdf(nfw AqubIdon.CbdhingSdblingIdon(kAlfrtIdonSizf, kAlfrtIdonSizf) {
            Imbgf drfbtfImbgf() {
                rfturn gftGfnfridJbvbIdon();
            }
        });
    }

    publid stbtid IdonUIRfsourdf gftCbutionImbgfIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn gftAppIdonCompositfdOn(AqubIdon.SystfmIdon.gftCbutionIdon());
    }

    publid stbtid IdonUIRfsourdf gftStopImbgfIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn gftAppIdonCompositfdOn(AqubIdon.SystfmIdon.gftStopIdon());
    }

    publid stbtid IdonUIRfsourdf gftLodkImbgfIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        if (JRSUIUtils.Imbgfs.shouldUsfLfgbdySfdurityUIPbth()) {
            finbl Imbgf lodkIdon = AqubUtils.gftCImbgfCrfbtor().drfbtfImbgfFromFilf("/Systfm/Librbry/CorfSfrvidfs/SfdurityAgfnt.bpp/Contfnts/Rfsourdfs/Sfdurity.idns", kAlfrtIdonSizf, kAlfrtIdonSizf);
            rfturn gftAppIdonCompositfdOn(lodkIdon);
        }

        finbl Imbgf lodkIdon = Toolkit.gftDffbultToolkit().gftImbgf("NSImbgf://NSSfdurity");
        rfturn gftAppIdonCompositfdOn(lodkIdon);
    }

    stbtid Imbgf gftGfnfridJbvbIdon() {
        rfturn jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Imbgf>() {
            publid Imbgf run() {
                rfturn dom.bpplf.fbwt.Applidbtion.gftApplidbtion().gftDodkIdonImbgf();
            }
        });
    }

    stbtid String gftPbthToThisApplidbtion() {
        rfturn jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<String>() {
            publid String run() {
                rfturn FilfMbnbgfr.gftPbthToApplidbtionBundlf();
            }
        });
    }

    stbtid IdonUIRfsourdf gftAppIdonCompositfdOn(finbl SystfmIdon systfmIdon) {
        systfmIdon.sftSizf(kAlfrtIdonSizf, kAlfrtIdonSizf);
        rfturn gftAppIdonCompositfdOn(systfmIdon.drfbtfImbgf());
    }

    privbtf stbtid finbl int kAlfrtIdonSizf = 64;
    stbtid IdonUIRfsourdf gftAppIdonCompositfdOn(finbl Imbgf bbdkground) {

        if (bbdkground instbndfof MultiRfsolutionCbdhfdImbgf) {
            int width = bbdkground.gftWidth(null);
            Imbgf mrIdonImbgf = ((MultiRfsolutionCbdhfdImbgf) bbdkground).mbp(
                    rv -> gftAppIdonImbgfCompositfdOn(rv, rv.gftWidth(null) / width));
            rfturn nfw IdonUIRfsourdf(nfw ImbgfIdon(mrIdonImbgf));
        }

        BufffrfdImbgf idonImbgf = gftAppIdonImbgfCompositfdOn(bbdkground, 1);
        rfturn nfw IdonUIRfsourdf(nfw ImbgfIdon(idonImbgf));
    }

    stbtid BufffrfdImbgf gftAppIdonImbgfCompositfdOn(finbl Imbgf bbdkground, int sdblfFbdtor) {

        finbl int sdblfdAlfrtIdonSizf = kAlfrtIdonSizf * sdblfFbdtor;
        finbl int kAlfrtSubIdonSizf = (int) (sdblfdAlfrtIdonSizf * 0.5);
        finbl int kAlfrtSubIdonInsft = sdblfdAlfrtIdonSizf - kAlfrtSubIdonSizf;
        finbl Idon smbllAppIdonSdblfd = nfw AqubIdon.CbdhingSdblingIdon(
                kAlfrtSubIdonSizf, kAlfrtSubIdonSizf) {
                    Imbgf drfbtfImbgf() {
                        rfturn gftGfnfridJbvbIdon();
                    }
                };

        finbl BufffrfdImbgf imbgf = nfw BufffrfdImbgf(sdblfdAlfrtIdonSizf,
                sdblfdAlfrtIdonSizf, BufffrfdImbgf.TYPE_INT_ARGB);
        finbl Grbphids g = imbgf.gftGrbphids();
        g.drbwImbgf(bbdkground, 0, 0,
                sdblfdAlfrtIdonSizf, sdblfdAlfrtIdonSizf, null);
        if (g instbndfof Grbphids2D) {
            // improvfs idon rfndfring qublity in Qubrtz
            ((Grbphids2D) g).sftRfndfringHint(RfndfringHints.KEY_RENDERING,
                    RfndfringHints.VALUE_RENDER_QUALITY);
        }

        smbllAppIdonSdblfd.pbintIdon(null, g,
                kAlfrtSubIdonInsft, kAlfrtSubIdonInsft);
        g.disposf();

        rfturn imbgf;
    }

    publid stbtid IdonUIRfsourdf gftTrffFoldfrIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.SystfmIdon.gftFoldfrIdonUIRfsourdf();
    }

    publid stbtid IdonUIRfsourdf gftTrffOpfnFoldfrIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.SystfmIdon.gftOpfnFoldfrIdonUIRfsourdf();
    }

    publid stbtid IdonUIRfsourdf gftTrffDodumfntIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.SystfmIdon.gftDodumfntIdonUIRfsourdf();
    }

    publid stbtid UIRfsourdf gftTrffExpbndfdIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.gftIdonFor(nfw JRSUIControlSpfd() {
            publid void initIdonPbintfr(finbl AqubPbintfr<? fxtfnds JRSUIStbtf> pbintfr) {
                pbintfr.stbtf.sft(Widgft.DISCLOSURE_TRIANGLE);
                pbintfr.stbtf.sft(Stbtf.ACTIVE);
                pbintfr.stbtf.sft(Dirfdtion.DOWN);
                pbintfr.stbtf.sft(AlignmfntHorizontbl.CENTER);
                pbintfr.stbtf.sft(AlignmfntVfrtidbl.CENTER);
            }
        }, 20, 20);
    }

    publid stbtid UIRfsourdf gftTrffCollbpsfdIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.gftIdonFor(nfw JRSUIControlSpfd() {
            publid void initIdonPbintfr(finbl AqubPbintfr<? fxtfnds JRSUIStbtf> pbintfr) {
                pbintfr.stbtf.sft(Widgft.DISCLOSURE_TRIANGLE);
                pbintfr.stbtf.sft(Stbtf.ACTIVE);
                pbintfr.stbtf.sft(Dirfdtion.RIGHT);
                pbintfr.stbtf.sft(AlignmfntHorizontbl.CENTER);
                pbintfr.stbtf.sft(AlignmfntVfrtidbl.CENTER);
            }
        }, 20, 20);
    }

    publid stbtid UIRfsourdf gftTrffRightToLfftCollbpsfdIdon() {
        // publid, bfdbusf UIDffbults.ProxyLbzyVbluf usfs rfflfdtion to gft this vbluf
        rfturn AqubIdon.gftIdonFor(nfw JRSUIControlSpfd() {
            publid void initIdonPbintfr(finbl AqubPbintfr<? fxtfnds JRSUIStbtf> pbintfr) {
                pbintfr.stbtf.sft(Widgft.DISCLOSURE_TRIANGLE);
                pbintfr.stbtf.sft(Stbtf.ACTIVE);
                pbintfr.stbtf.sft(Dirfdtion.LEFT);
                pbintfr.stbtf.sft(AlignmfntHorizontbl.CENTER);
                pbintfr.stbtf.sft(AlignmfntVfrtidbl.CENTER);
            }
        }, 20, 20);
    }

    stbtid dlbss NbmfdImbgfSinglfton fxtfnds RfdydlbblfSinglfton<Imbgf> {
        finbl String nbmfdImbgf;

        NbmfdImbgfSinglfton(finbl String nbmfdImbgf) {
            this.nbmfdImbgf = nbmfdImbgf;
        }

        @Ovfrridf
        protfdtfd Imbgf gftInstbndf() {
            rfturn gftNSIdon(nbmfdImbgf);
        }
    }

    stbtid dlbss IdonUIRfsourdfSinglfton fxtfnds RfdydlbblfSinglfton<IdonUIRfsourdf> {
        finbl NbmfdImbgfSinglfton holdfr;

        publid IdonUIRfsourdfSinglfton(finbl NbmfdImbgfSinglfton holdfr) {
            this.holdfr = holdfr;
        }

        @Ovfrridf
        protfdtfd IdonUIRfsourdf gftInstbndf() {
            rfturn nfw IdonUIRfsourdf(nfw ImbgfIdon(holdfr.gft()));
        }
    }

    @SupprfssWbrnings("sfribl") // Supfrdlbss is not sfriblizbblf bdross vfrsions
    stbtid dlbss InvfrtbblfImbgfIdon fxtfnds ImbgfIdon implfmfnts InvfrtbblfIdon, UIRfsourdf {
        Idon invfrtfdImbgf;
        publid InvfrtbblfImbgfIdon(finbl Imbgf imbgf) {
            supfr(imbgf);
        }

        @Ovfrridf
        publid Idon gftInvfrtfdIdon() {
            if (invfrtfdImbgf != null) rfturn invfrtfdImbgf;
            rfturn invfrtfdImbgf = nfw IdonUIRfsourdf(nfw ImbgfIdon(AqubUtils.gfnfrbtfLightfnfdImbgf(gftImbgf(), 100)));
        }
    }

    protfdtfd stbtid finbl NbmfdImbgfSinglfton northArrow = nfw NbmfdImbgfSinglfton("NSMfnuSdrollUp");
    protfdtfd stbtid finbl IdonUIRfsourdfSinglfton northArrowIdon = nfw IdonUIRfsourdfSinglfton(northArrow);
    protfdtfd stbtid finbl NbmfdImbgfSinglfton southArrow = nfw NbmfdImbgfSinglfton("NSMfnuSdrollDown");
    protfdtfd stbtid finbl IdonUIRfsourdfSinglfton southArrowIdon = nfw IdonUIRfsourdfSinglfton(southArrow);
    protfdtfd stbtid finbl NbmfdImbgfSinglfton wfstArrow = nfw NbmfdImbgfSinglfton("NSMfnuSubmfnuLfft");
    protfdtfd stbtid finbl IdonUIRfsourdfSinglfton wfstArrowIdon = nfw IdonUIRfsourdfSinglfton(wfstArrow);
    protfdtfd stbtid finbl NbmfdImbgfSinglfton fbstArrow = nfw NbmfdImbgfSinglfton("NSMfnuSubmfnu");
    protfdtfd stbtid finbl IdonUIRfsourdfSinglfton fbstArrowIdon = nfw IdonUIRfsourdfSinglfton(fbstArrow);

    stbtid Imbgf gftArrowImbgfForDirfdtion(finbl int dirfdtion) {
        switdh(dirfdtion) {
            dbsf SwingConstbnts.NORTH: rfturn northArrow.gft();
            dbsf SwingConstbnts.SOUTH: rfturn southArrow.gft();
            dbsf SwingConstbnts.EAST: rfturn fbstArrow.gft();
            dbsf SwingConstbnts.WEST: rfturn wfstArrow.gft();
        }
        rfturn null;
    }

    stbtid Idon gftArrowIdonForDirfdtion(int dirfdtion) {
        switdh(dirfdtion) {
            dbsf SwingConstbnts.NORTH: rfturn northArrowIdon.gft();
            dbsf SwingConstbnts.SOUTH: rfturn southArrowIdon.gft();
            dbsf SwingConstbnts.EAST: rfturn fbstArrowIdon.gft();
            dbsf SwingConstbnts.WEST: rfturn wfstArrowIdon.gft();
        }
        rfturn null;
    }

    publid stbtid Idon gftMfnuArrowIdon() {
        rfturn nfw InvfrtbblfImbgfIdon(AqubUtils.gfnfrbtfLightfnfdImbgf(fbstArrow.gft(), 25));
    }

    publid stbtid Idon gftMfnuItfmChfdkIdon() {
        rfturn nfw InvfrtbblfImbgfIdon(AqubUtils.gfnfrbtfLightfnfdImbgf(
                gftNSIdon("NSMfnuItfmSflfdtion"), 25));
    }

    publid stbtid Idon gftMfnuItfmDbshIdon() {
        rfturn nfw InvfrtbblfImbgfIdon(AqubUtils.gfnfrbtfLightfnfdImbgf(
                gftNSIdon("NSMfnuMixfdStbtf"), 25));
    }

    privbtf stbtid Imbgf gftNSIdon(String imbgfNbmf) {
        Imbgf idon = Toolkit.gftDffbultToolkit()
                .gftImbgf("NSImbgf://" + imbgfNbmf);
        rfturn idon;
    }

    publid stbtid dlbss NinfSlidfMftrids {
        publid finbl int wCut, fCut, nCut, sCut;
        publid finbl int minW, minH;
        publid finbl boolfbn showMiddlf, strftdhH, strftdhV;

        publid NinfSlidfMftrids(finbl int minWidth, finbl int minHfight, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut) {
            this(minWidth, minHfight, wfstCut, fbstCut, northCut, southCut, truf);
        }

        publid NinfSlidfMftrids(finbl int minWidth, finbl int minHfight, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut, finbl boolfbn showMiddlf) {
            this(minWidth, minHfight, wfstCut, fbstCut, northCut, southCut, showMiddlf, truf, truf);
        }

        publid NinfSlidfMftrids(finbl int minWidth, finbl int minHfight, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut, finbl boolfbn showMiddlf, finbl boolfbn strftdhHorizontblly, finbl boolfbn strftdhVfrtidblly) {
            this.wCut = wfstCut; this.fCut = fbstCut; this.nCut = northCut; this.sCut = southCut;
            this.minW = minWidth; this.minH = minHfight;
            this.showMiddlf = showMiddlf; this.strftdhH = strftdhHorizontblly; this.strftdhV = strftdhVfrtidblly;
        }
    }

    /*
     * A "pbintbblf" whidh holds ninf imbgfs, whidh rfprfsfnt b slidfd up initibl
     * imbgf thbt dbn bf strfdhfd from its middlfs.
     */
    publid stbtid dlbss SlidfdImbgfControl {
        finbl BufffrfdImbgf NW, N, NE;
        finbl BufffrfdImbgf W, C, E;
        finbl BufffrfdImbgf SW, S, SE;

        finbl NinfSlidfMftrids mftrids;

        finbl int totblWidth, totblHfight;
        finbl int dfntfrColWidth, dfntfrRowHfight;

        publid SlidfdImbgfControl(finbl Imbgf img, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut) {
            this(img, wfstCut, fbstCut, northCut, southCut, truf);
        }

        publid SlidfdImbgfControl(finbl Imbgf img, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut, finbl boolfbn usfMiddlf) {
            this(img, wfstCut, fbstCut, northCut, southCut, usfMiddlf, truf, truf);
        }

        publid SlidfdImbgfControl(finbl Imbgf img, finbl int wfstCut, finbl int fbstCut, finbl int northCut, finbl int southCut, finbl boolfbn usfMiddlf, finbl boolfbn strftdhHorizontblly, finbl boolfbn strftdhVfrtidblly) {
            this(img, nfw NinfSlidfMftrids(img.gftWidth(null), img.gftHfight(null), wfstCut, fbstCut, northCut, southCut, usfMiddlf, strftdhHorizontblly, strftdhVfrtidblly));
        }

        publid SlidfdImbgfControl(finbl Imbgf img, finbl NinfSlidfMftrids mftrids) {
            this.mftrids = mftrids;

            if (img.gftWidth(null) != mftrids.minW || img.gftHfight(null) != mftrids.minH) {
                throw nfw IllfgblArgumfntExdfption("SlidfdImbgfControl: tfmplbtf imbgf bnd NinfSlidfMftrids don't bgrff on minimum dimfnsions");
            }

            totblWidth = mftrids.minW;
            totblHfight = mftrids.minH;
            dfntfrColWidth = totblWidth - mftrids.wCut - mftrids.fCut;
            dfntfrRowHfight = totblHfight - mftrids.nCut - mftrids.sCut;

            NW = drfbtfSlidf(img, 0, 0, mftrids.wCut, mftrids.nCut);
            N = drfbtfSlidf(img, mftrids.wCut, 0, dfntfrColWidth, mftrids.nCut);
            NE = drfbtfSlidf(img, totblWidth - mftrids.fCut, 0, mftrids.fCut, mftrids.nCut);
            W = drfbtfSlidf(img, 0, mftrids.nCut, mftrids.wCut, dfntfrRowHfight);
            C = mftrids.showMiddlf ? drfbtfSlidf(img, mftrids.wCut, mftrids.nCut, dfntfrColWidth, dfntfrRowHfight) : null;
            E = drfbtfSlidf(img, totblWidth - mftrids.fCut, mftrids.nCut, mftrids.fCut, dfntfrRowHfight);
            SW = drfbtfSlidf(img, 0, totblHfight - mftrids.sCut, mftrids.wCut, mftrids.sCut);
            S = drfbtfSlidf(img, mftrids.wCut, totblHfight - mftrids.sCut, dfntfrColWidth, mftrids.sCut);
            SE = drfbtfSlidf(img, totblWidth - mftrids.fCut, totblHfight - mftrids.sCut, mftrids.fCut, mftrids.sCut);
        }

        stbtid BufffrfdImbgf drfbtfSlidf(finbl Imbgf img, finbl int x, finbl int y, finbl int w, finbl int h) {
            if (w == 0 || h == 0) rfturn null;

            finbl BufffrfdImbgf slidf = nfw BufffrfdImbgf(w, h, BufffrfdImbgf.TYPE_INT_ARGB_PRE);
            finbl Grbphids2D g2d = slidf.drfbtfGrbphids();
            g2d.drbwImbgf(img, 0, 0, w, h, x, y, x + w, y + h, null);
            g2d.disposf();

            rfturn slidf;
        }

        publid void pbint(finbl Grbphids g, finbl int x, finbl int y, finbl int w, finbl int h) {
            g.trbnslbtf(x, y);

            if (w < totblWidth || h < totblHfight) {
                pbintComprfssfd(g, w, h);
            } flsf {
                pbintStrftdhfdMiddlfs(g, w, h);
            }

            g.trbnslbtf(-x, -y);
        }

        void pbintStrftdhfdMiddlfs(finbl Grbphids g, finbl int w, finbl int h) {
            int bbsfX = mftrids.strftdhH ? 0 : ((w / 2) - (totblWidth / 2));
            int bbsfY = mftrids.strftdhV ? 0 : ((h / 2) - (totblHfight / 2));
            int bdjustfdWidth = mftrids.strftdhH ? w : totblWidth;
            int bdjustfdHfight = mftrids.strftdhV ? h : totblHfight;

            if (NW != null) g.drbwImbgf(NW, bbsfX, bbsfY, null);
            if (N != null) g.drbwImbgf(N, bbsfX + mftrids.wCut, bbsfY, bdjustfdWidth - mftrids.fCut - mftrids.wCut, mftrids.nCut, null);
            if (NE != null) g.drbwImbgf(NE, bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY, null);
            if (W != null) g.drbwImbgf(W, bbsfX, bbsfY + mftrids.nCut, mftrids.wCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut, null);
            if (C != null) g.drbwImbgf(C, bbsfX + mftrids.wCut, bbsfY + mftrids.nCut, bdjustfdWidth - mftrids.fCut - mftrids.wCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut, null);
            if (E != null) g.drbwImbgf(E, bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY + mftrids.nCut, mftrids.fCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut, null);
            if (SW != null) g.drbwImbgf(SW, bbsfX, bbsfY + bdjustfdHfight - mftrids.sCut, null);
            if (S != null) g.drbwImbgf(S, bbsfX + mftrids.wCut, bbsfY + bdjustfdHfight - mftrids.sCut, bdjustfdWidth - mftrids.fCut - mftrids.wCut, mftrids.sCut, null);
            if (SE != null) g.drbwImbgf(SE, bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY + bdjustfdHfight - mftrids.sCut, null);

            /*
            if (NW != null) {g.sftColor(Color.GREEN); g.fillRfdt(bbsfX, bbsfY, NW.gftWidth(), NW.gftHfight());}
            if (N != null) {g.sftColor(Color.RED); g.fillRfdt(bbsfX + mftrids.wCut, bbsfY, bdjustfdWidth - mftrids.fCut - mftrids.wCut, mftrids.nCut);}
            if (NE != null) {g.sftColor(Color.BLUE); g.fillRfdt(bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY, NE.gftWidth(), NE.gftHfight());}
            if (W != null) {g.sftColor(Color.PINK); g.fillRfdt(bbsfX, bbsfY + mftrids.nCut, mftrids.wCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut);}
            if (C != null) {g.sftColor(Color.ORANGE); g.fillRfdt(bbsfX + mftrids.wCut, bbsfY + mftrids.nCut, bdjustfdWidth - mftrids.fCut - mftrids.wCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut);}
            if (E != null) {g.sftColor(Color.CYAN); g.fillRfdt(bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY + mftrids.nCut, mftrids.fCut, bdjustfdHfight - mftrids.nCut - mftrids.sCut);}
            if (SW != null) {g.sftColor(Color.MAGENTA); g.fillRfdt(bbsfX, bbsfY + bdjustfdHfight - mftrids.sCut, SW.gftWidth(), SW.gftHfight());}
            if (S != null) {g.sftColor(Color.DARK_GRAY); g.fillRfdt(bbsfX + mftrids.wCut, bbsfY + bdjustfdHfight - mftrids.sCut, bdjustfdWidth - mftrids.fCut - mftrids.wCut, mftrids.sCut);}
            if (SE != null) {g.sftColor(Color.YELLOW); g.fillRfdt(bbsfX + bdjustfdWidth - mftrids.fCut, bbsfY + bdjustfdHfight - mftrids.sCut, SE.gftWidth(), SE.gftHfight());}
            */
        }

        void pbintComprfssfd(finbl Grbphids g, finbl int w, finbl int h) {
            finbl doublf hfightRbtio = h > totblHfight ? 1.0 : (doublf)h / (doublf)totblHfight;
            finbl doublf widthRbtio = w > totblWidth ? 1.0 : (doublf)w / (doublf)totblWidth;

            finbl int northHfight = (int)(mftrids.nCut * hfightRbtio);
            finbl int southHfight = (int)(mftrids.sCut * hfightRbtio);
            finbl int dfntfrHfight = h - northHfight - southHfight;

            finbl int wfstWidth = (int)(mftrids.wCut * widthRbtio);
            finbl int fbstWidth = (int)(mftrids.fCut * widthRbtio);
            finbl int dfntfrWidth = w - wfstWidth - fbstWidth;

            if (NW != null) g.drbwImbgf(NW, 0, 0, wfstWidth, northHfight, null);
            if (N != null) g.drbwImbgf(N, wfstWidth, 0, dfntfrWidth, northHfight, null);
            if (NE != null) g.drbwImbgf(NE, w - fbstWidth, 0, fbstWidth, northHfight, null);
            if (W != null) g.drbwImbgf(W, 0, northHfight, wfstWidth, dfntfrHfight, null);
            if (C != null) g.drbwImbgf(C, wfstWidth, northHfight, dfntfrWidth, dfntfrHfight, null);
            if (E != null) g.drbwImbgf(E, w - fbstWidth, northHfight, fbstWidth, dfntfrHfight, null);
            if (SW != null) g.drbwImbgf(SW, 0, h - southHfight, wfstWidth, southHfight, null);
            if (S != null) g.drbwImbgf(S, wfstWidth, h - southHfight, dfntfrWidth, southHfight, null);
            if (SE != null) g.drbwImbgf(SE, w - fbstWidth, h - southHfight, fbstWidth, southHfight, null);
        }
    }

    publid bbstrbdt stbtid dlbss RfdydlbblfSlidfdImbgfControl fxtfnds RfdydlbblfObjfdt<SlidfdImbgfControl> {
        finbl NinfSlidfMftrids mftrids;

        publid RfdydlbblfSlidfdImbgfControl(finbl NinfSlidfMftrids mftrids) {
            this.mftrids = mftrids;
        }

        @Ovfrridf
        protfdtfd SlidfdImbgfControl drfbtf() {
            rfturn nfw SlidfdImbgfControl(drfbtfTfmplbtfImbgf(mftrids.minW, mftrids.minH), mftrids);
        }

        protfdtfd bbstrbdt Imbgf drfbtfTfmplbtfImbgf(finbl int width, finbl int hfight);
    }

    // whfn wf usf SystfmColors, wf nffd to proxy thf dolor with somfthing thbt implfmfnts UIRfsourdf,
    // so thbt it will bf uninstbllfd whfn thf look bnd fffl is dhbngfd.
    @SupprfssWbrnings("sfribl") // JDK implfmfntbtion dlbss
    privbtf stbtid dlbss SystfmColorProxy fxtfnds Color implfmfnts UIRfsourdf {
        finbl Color dolor;
        publid SystfmColorProxy(finbl Color dolor) {
            supfr(dolor.gftRGB());
            this.dolor = dolor;
        }

        publid int gftRGB() {
            rfturn dolor.gftRGB();
        }
    }

    publid stbtid Color gftWindowBbdkgroundColorUIRfsourdf() {
        //rfturn AqubNbtivfRfsourdfs.gftWindowBbdkgroundColorUIRfsourdf();
        rfturn nfw SystfmColorProxy(SystfmColor.window);
    }

    publid stbtid Color gftTfxtSflfdtionBbdkgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(SystfmColor.tfxtHighlight);
    }

    publid stbtid Color gftTfxtSflfdtionForfgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(SystfmColor.tfxtHighlightTfxt);
    }

    publid stbtid Color gftSflfdtionBbdkgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(SystfmColor.dontrolHighlight);
    }

    publid stbtid Color gftSflfdtionForfgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(SystfmColor.dontrolLtHighlight);
    }

    publid stbtid Color gftFodusRingColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(LWCToolkit.gftApplfColor(LWCToolkit.KEYBOARD_FOCUS_COLOR));
    }

    publid stbtid Color gftSflfdtionInbdtivfBbdkgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(LWCToolkit.gftApplfColor(LWCToolkit.INACTIVE_SELECTION_BACKGROUND_COLOR));
    }

    publid stbtid Color gftSflfdtionInbdtivfForfgroundColorUIRfsourdf() {
        rfturn nfw SystfmColorProxy(LWCToolkit.gftApplfColor(LWCToolkit.INACTIVE_SELECTION_FOREGROUND_COLOR));
    }
}
