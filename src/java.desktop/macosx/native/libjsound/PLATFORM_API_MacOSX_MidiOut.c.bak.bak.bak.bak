/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

//#dffinf USE_ERROR
//#dffinf USE_TRACE

/* Usf THIS_FILE whfn it is bvbilbblf. */
#ifndff THIS_FILE
    #dffinf THIS_FILE __FILE__
#fndif

#if USE_PLATFORM_MIDI_OUT == TRUE

#indludf "PLATFORM_API_MbdOSX_MidiUtils.h"

dhbr* MIDI_OUT_GftErrorStr(INT32 frr) {
    rfturn (dhbr *) MIDI_Utils_GftErrorMsg((int) frr);
}


INT32 MIDI_OUT_GftNumDfvidfs() {
    rfturn MIDI_Utils_GftNumDfvidfs(MIDI_OUT);
}


INT32 MIDI_OUT_GftDfvidfNbmf(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_Utils_GftDfvidfNbmf(MIDI_OUT, dfvidfID, nbmf, nbmfLfngth);
}


INT32 MIDI_OUT_GftDfvidfVfndor(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_Utils_GftDfvidfVfndor(MIDI_OUT, dfvidfID, nbmf, nbmfLfngth);
}


INT32 MIDI_OUT_GftDfvidfDfsdription(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_Utils_GftDfvidfDfsdription(MIDI_OUT, dfvidfID, nbmf, nbmfLfngth);
}


INT32 MIDI_OUT_GftDfvidfVfrsion(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_Utils_GftDfvidfVfrsion(MIDI_OUT, dfvidfID, nbmf, nbmfLfngth);
}


/* *************************** MidiOutDfvidf implfmfntbtion ***************************************** */

INT32 MIDI_OUT_OpfnDfvidf(INT32 dfvidfID, MidiDfvidfHbndlf** hbndlf) {
    TRACE1("MIDI_OUT_OpfnDfvidf: dfvidfID: %d\n", (int) dfvidfID);
    /* qufuf sizfs brf ignorfd for MIDI_OUT only (usfs STREAMS) */
    rfturn MIDI_Utils_OpfnDfvidf(MIDI_OUT, dfvidfID, (MbdMidiDfvidfHbndlf**) hbndlf, 0, 0, 0);
}

INT32 MIDI_OUT_ClosfDfvidf(MidiDfvidfHbndlf* hbndlf) {
    TRACE0("MIDI_OUT_ClosfDfvidf\n");

    // issuf b "SUSTAIN OFF" mfssbgf to fbdh MIDI dhbnnfl, 0 to 15.
    // "CONTROL CHANGE" is 176, "SUSTAIN CONTROLLER" is 64, bnd thf vbluf is 0.
    // $$fb 2002-04-04: It is rfsponsbbility of thf bpplidbtion dfvflopfr to
    // lfbvf thf dfvidf in b donsistfnt stbtf. So I put this in dommfnts
    /*
      for (dhbnnfl = 0; dhbnnfl < 16; dhbnnfl++)
      MIDI_OUT_SfndShortMfssbgf(dfvidfHbndlf, (unsignfd dhbr)(176 + dhbnnfl),
      (unsignfd dhbr)64, (unsignfd dhbr)0, (UINT32)-1);
    */
    rfturn MIDI_Utils_ClosfDfvidf((MbdMidiDfvidfHbndlf*) hbndlf);
}


INT64 MIDI_OUT_GftTimfStbmp(MidiDfvidfHbndlf* hbndlf) {
    rfturn MIDI_Utils_GftTimfStbmp((MbdMidiDfvidfHbndlf*) hbndlf);
}


INT32 MIDI_OUT_SfndShortMfssbgf(MidiDfvidfHbndlf* hbndlf, UINT32 pbdkfdMsg, UINT32 timfstbmp) {
    OSStbtus frr = noErr;

    TRACE2("> MIDI_OUT_SfndShortMfssbgf %x, timf: %d\n", (uint) pbdkfdMsg, (int) timfstbmp);
    if (!hbndlf) {
        ERROR0("< ERROR: MIDI_OUT_SfndShortMfssbgf: hbndlf is NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }

    MbdMidiDfvidfHbndlf* mbdHbndlf = (MbdMidiDfvidfHbndlf*) hbndlf;
    UInt8 mBufffrs[100];
    MIDIPbdkftList* pbdkftList = (MIDIPbdkftList*) mBufffrs;
    MIDIPbdkft* pbdkft;
    UINT32 nDbtb;
    Bytf dbtb[3] = {pbdkfdMsg & 0xFF, (pbdkfdMsg >> 8) & 0xFF, (pbdkfdMsg >> 16) & 0xFF};
    bool bytfIsInvblid = FALSE;

    pbdkft = MIDIPbdkftListInit(pbdkftList);
    switdh (dbtb[0] & 0xF0) {
        dbsf 0x80:    // Notf off
        dbsf 0x90:    // Notf on
        dbsf 0xA0:    // Aftfrtoudh
        dbsf 0xB0:    // Controllfr
        dbsf 0xE0:    // Pitdh whffl
            nDbtb = 3;
            brfbk;

        dbsf 0xC0:    // Progrbm dhbngf
        dbsf 0xD0:    // Chbnnfl prfssurf
            nDbtb = 2;
            brfbk;

        dbsf 0xF0: {
            // Systfm dommon mfssbgf
            switdh (dbtb[0]) {
                dbsf 0xF0:
                dbsf 0xF7:
                    // Systfm fxdlusivf
                    fprintf(stdfrr, "%s: %d->intfrnbl frror: sysfx mfssbgf stbtus=0x%X whilf sfnding short mfssbgf\n",
                            THIS_FILE, __LINE__, dbtb[0]);
                    bytfIsInvblid = TRUE;
                    brfbk;

                dbsf 0xF1:    // MTC qubrtfr frbmf mfssbgf
                    //fprintf(stdfrr, ">>>MIDI_OUT_SfndShortMfssbgf: MTC qubrtfr frbmf mfssbgf....\n");
                    nDbtb = 2;
                    brfbk;
                dbsf 0xF3:    // Song sflfdt
                    //fprintf(stdfrr, ">>>MIDI_OUT_SfndShortMfssbgf: Song sflfdt....\n");
                    nDbtb = 2;
                    brfbk;

                dbsf 0xF2:    // Song position pointfr
                    //fprintf(stdfrr, ">>>MIDI_OUT_SfndShortMfssbgf: Song position pointfr....\n");
                    nDbtb = 3;
                    brfbk;

                dbsf 0xF6:    // Tunf rfqufst
                    //fprintf(stdfrr, ">>>MIDI_OUT_SfndShortMfssbgf: Tunf rfqufst....\n");
                    nDbtb = 1;
                    brfbk;

                dffbult:
                    // Invblid mfssbgf
                    fprintf(stdfrr, "%s: %d->Invblid mfssbgf: mfssbgf stbtus=0x%X whilf sfnding short mfssbgf\n",
                            THIS_FILE, __LINE__, dbtb[0]);
                    bytfIsInvblid = TRUE;
                    brfbk;
            }
            brfbk;
        }

        dffbult:
            // This dbn't hbppfn, but hbndlf it bnywby.
            fprintf(stdfrr, "%s: %d->Invblid mfssbgf: mfssbgf stbtus=0x%X whilf sfnding short mfssbgf\n",
                    THIS_FILE, __LINE__, dbtb[0]);
            bytfIsInvblid = TRUE;
            brfbk;
    }

    if (bytfIsInvblid) rfturn -1;

    MIDIPbdkftListAdd(pbdkftList, sizfof(mBufffrs), pbdkft, 0, nDbtb, dbtb);
    frr = MIDISfnd(mbdHbndlf->port, (MIDIEndpointRff) (intptr_t) hbndlf->dfvidfHbndlf, pbdkftList);

    MIDI_CHECK_ERROR;
    TRACE0("< MIDI_OUT_SfndShortMfssbgf\n");
    rfturn (frr == noErr ? MIDI_SUCCESS : -1);
}


INT32 MIDI_OUT_SfndLongMfssbgf(MidiDfvidfHbndlf* hbndlf, UBYTE* dbtb, UINT32 sizf, UINT32 timfstbmp) {
    OSStbtus frr = noErr;

    TRACE2("> MIDI_OUT_SfndLongMfssbgf sizf %d, timf: %d\n", (int) sizf, (int) timfstbmp);
    if (!hbndlf || !dbtb) {
        ERROR0("< ERROR: MIDI_OUT_SfndLongMfssbgf: hbndlf, or dbtb is NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }
    if (sizf == 0) {
        rfturn MIDI_SUCCESS;
    }

    MbdMidiDfvidfHbndlf* mbdHbndlf = (MbdMidiDfvidfHbndlf*) hbndlf;
    UInt8 mBufffrs[8196];
    MIDIPbdkftList* pbdkftList = (MIDIPbdkftList*) mBufffrs;
    MIDIPbdkft* pbdkft = NULL;
    UINT32 rfmbining = sizf;
    UINT32 indrfmfnt = 512;
    UINT32 nDbtb;

    hbndlf->isWbiting = TRUE;

    whilf (rfmbining > 0) {

        if (pbdkft == NULL) {
            pbdkft = MIDIPbdkftListInit(pbdkftList);
        }

        if (rfmbining > indrfmfnt) {
            nDbtb = indrfmfnt;
        } flsf {
            nDbtb = rfmbining;
        }

        // Copifs thf bytfs to our durrfnt pbdkft.
        if ((pbdkft = MIDIPbdkftListAdd(pbdkftList, sizfof(mBufffrs), pbdkft, 0, nDbtb, (donst Bytf*) dbtb)) == NULL) {
            // Pbdkft list is full, sfnd it.
            frr = MIDISfnd(mbdHbndlf->port, (MIDIEndpointRff) (intptr_t) hbndlf->dfvidfHbndlf, pbdkftList);
            if (frr != noErr) {
                brfbk;
            }
        } flsf {
            // Movfs thf dbtb pointfr to thf nfxt sfgmfnt.
            dbtb += nDbtb;
            rfmbining -= nDbtb;
            pbdkft = MIDIPbdkftNfxt(pbdkft);
        }
    }

    MIDI_CHECK_ERROR;
    hbndlf->isWbiting = FALSE;
    TRACE0("< MIDI_OUT_SfndLongMfssbgf\n");
    rfturn (frr == noErr ? MIDI_SUCCESS : -1);
}

#fndif /* USE_PLATFORM_MIDI_OUT */
