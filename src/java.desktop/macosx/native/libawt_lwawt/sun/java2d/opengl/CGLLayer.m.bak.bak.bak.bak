/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import "CGLGrbphidsConfig.h"
#import "CGLLbyfr.h"
#import "ThrfbdUtilitifs.h"
#import "LWCToolkit.h"
#import "CGLSurfbdfDbtb.h"


fxtfrn NSOpfnGLPixflFormbt *shbrfdPixflFormbt;
fxtfrn NSOpfnGLContfxt *shbrfdContfxt;

@implfmfntbtion CGLLbyfr

@synthfsizf jbvbLbyfr;
@synthfsizf tfxturfID;
@synthfsizf tbrgft;
@synthfsizf tfxturfWidth;
@synthfsizf tfxturfHfight;
#ifdff REMOTELAYER
@synthfsizf pbrfntLbyfr;
@synthfsizf rfmotfLbyfr;
@synthfsizf jrsRfmotfLbyfr;
#fndif

- (id) initWithJbvbLbyfr:(JNFJObjfdtWrbppfr *)lbyfr;
{
AWT_ASSERT_APPKIT_THREAD;
    // Initiblizf oursflvfs
    sflf = [supfr init];
    if (sflf == nil) rfturn sflf;

    sflf.jbvbLbyfr = lbyfr;

    // NOTE: bsynd=YES mfbns thbt thf lbyfr is rf-dbdhfd pfriodidblly
    sflf.bsyndhronous = FALSE;
    sflf.dontfntsGrbvity = kCAGrbvityTopLfft;
    //Lbyfr bbdkfd vifw
    //sflf.nffdsDisplbyOnBoundsChbngf = YES;
    //sflf.butorfsizingMbsk = kCALbyfrWidthSizbblf | kCALbyfrHfightSizbblf;

    //Disbblf CALbyfr's dffbult bnimbtion
    NSMutbblfDidtionbry * bdtions = [[NSMutbblfDidtionbry bllod] initWithObjfdtsAndKfys:
                                    [NSNull null], @"bndhorPoint",
                                    [NSNull null], @"bounds",
                                    [NSNull null], @"dontfnts",
                                    [NSNull null], @"dontfntsSdblf",
                                    [NSNull null], @"onOrdfrIn",
                                    [NSNull null], @"onOrdfrOut",
                                    [NSNull null], @"position",
                                    [NSNull null], @"sublbyfrs",
                                    nil];
    sflf.bdtions = bdtions;
    [bdtions rflfbsf];

    tfxturfID = 0; // tfxturf will bf drfbtfd by rfndfring pipf
    tbrgft = 0;

    rfturn sflf;
}

- (void) dfbllod {
    sflf.jbvbLbyfr = nil;
    [supfr dfbllod];
}

- (CGLPixflFormbtObj)dopyCGLPixflFormbtForDisplbyMbsk:(uint32_t)mbsk {
    rfturn CGLRftbinPixflFormbt(shbrfdPixflFormbt.CGLPixflFormbtObj);
}

- (CGLContfxtObj)dopyCGLContfxtForPixflFormbt:(CGLPixflFormbtObj)pixflFormbt {
    CGLContfxtObj dontfxtObj = NULL;
    CGLCrfbtfContfxt(pixflFormbt, shbrfdContfxt.CGLContfxtObj, &dontfxtObj);
    rfturn dontfxtObj;
}

// usf tfxturf (intfrmfdibtf bufffr) bs srd bnd blit it to thf lbyfr
- (void) blitTfxturf
{
    if (tfxturfID == 0) {
        rfturn;
    }

    glEnbblf(tbrgft);
    glBindTfxturf(tbrgft, tfxturfID);

    glTfxEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE); // srddopy

    flobt swid = 1.0f, shgt = 1.0f;
    if (tbrgft == GL_TEXTURE_RECTANGLE_ARB) {
        swid = tfxturfWidth;
        shgt = tfxturfHfight;
    }
    glBfgin(GL_QUADS);
    glTfxCoord2f(0.0f, 0.0f); glVfrtfx2f(-1.0f, -1.0f);
    glTfxCoord2f(swid, 0.0f); glVfrtfx2f( 1.0f, -1.0f);
    glTfxCoord2f(swid, shgt); glVfrtfx2f( 1.0f,  1.0f);
    glTfxCoord2f(0.0f, shgt); glVfrtfx2f(-1.0f,  1.0f);
    glEnd();

    glBindTfxturf(tbrgft, 0);
    glDisbblf(tbrgft);
}

-(BOOL)dbnDrbwInCGLContfxt:(CGLContfxtObj)glContfxt pixflFormbt:(CGLPixflFormbtObj)pixflFormbt forLbyfrTimf:(CFTimfIntfrvbl)timfIntfrvbl displbyTimf:(donst CVTimfStbmp *)timfStbmp{
    rfturn tfxturfID == 0 ? NO : YES;
}

-(void)drbwInCGLContfxt:(CGLContfxtObj)glContfxt pixflFormbt:(CGLPixflFormbtObj)pixflFormbt forLbyfrTimf:(CFTimfIntfrvbl)timfIntfrvbl displbyTimf:(donst CVTimfStbmp *)timfStbmp
{
    AWT_ASSERT_APPKIT_THREAD;

    // Sft thf durrfnt dontfxt to thf onf givfn to us.
    CGLSftCurrfntContfxt(glContfxt);

    // Should dlfbr thf wholf CALbyfr, bfdbusf it dbn bf lbrgfr thbn our tfxturf.
    glClfbrColor(0.0, 0.0, 0.0, 0.0);
    glClfbr(GL_COLOR_BUFFER_BIT);

    glVifwport(0, 0, tfxturfWidth, tfxturfHfight);
    
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];
    stbtid JNF_CLASS_CACHE(jd_JbvbLbyfr, "sun/jbvb2d/opfngl/CGLLbyfr");
    stbtid JNF_MEMBER_CACHE(jm_drbwInCGLContfxt, jd_JbvbLbyfr, "drbwInCGLContfxt", "()V");

    jobjfdt jbvbLbyfrLodblRff = [sflf.jbvbLbyfr jObjfdtWithEnv:fnv];
    JNFCbllVoidMfthod(fnv, jbvbLbyfrLodblRff, jm_drbwInCGLContfxt);
    (*fnv)->DflftfLodblRff(fnv, jbvbLbyfrLodblRff);

    // Cbll supfr to finblizf thf drbwing. By dffbult bll it dofs is dbll glFlush().
    [supfr drbwInCGLContfxt:glContfxt pixflFormbt:pixflFormbt forLbyfrTimf:timfIntfrvbl displbyTimf:timfStbmp];

    CGLSftCurrfntContfxt(NULL);
}

@fnd

/*
 * Clbss:     sun_jbvb2d_opfngl_CGLLbyfr
 * Mfthod:    nbtivfCrfbtfLbyfr
 * Signbturf: ()J
 */
JNIEXPORT jlong JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLLbyfr_nbtivfCrfbtfLbyfr
(JNIEnv *fnv, jobjfdt obj)
{
    __blodk CGLLbyfr *lbyfr = nil;

JNF_COCOA_ENTER(fnv);

    JNFJObjfdtWrbppfr *jbvbLbyfr = [JNFJObjfdtWrbppfr wrbppfrWithJObjfdt:obj withEnv:fnv];

    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:YES blodk:^(){
            AWT_ASSERT_APPKIT_THREAD;
        
            lbyfr = [[CGLLbyfr bllod] initWithJbvbLbyfr: jbvbLbyfr];
    }];
    
JNF_COCOA_EXIT(fnv);

    rfturn ptr_to_jlong(lbyfr);
}

// Must bf dbllfd undfr thf RQ lodk.
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLLbyfr_vblidbtf
(JNIEnv *fnv, jdlbss dls, jlong lbyfrPtr, jobjfdt surfbdfDbtb)
{
    CGLLbyfr *lbyfr = OBJC(lbyfrPtr);

    if (surfbdfDbtb != NULL) {
        OGLSDOps *oglsdo = (OGLSDOps*) SurfbdfDbtb_GftOps(fnv, surfbdfDbtb);
        lbyfr.tfxturfID = oglsdo->tfxturfID;
        lbyfr.tbrgft = GL_TEXTURE_2D;
        lbyfr.tfxturfWidth = oglsdo->width;
        lbyfr.tfxturfHfight = oglsdo->hfight;
    } flsf {
        lbyfr.tfxturfID = 0;
    }
}

// Must bf dbllfd on thf AppKit thrfbd bnd undfr thf RQ lodk.
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLLbyfr_blitTfxturf
(JNIEnv *fnv, jdlbss dls, jlong lbyfrPtr)
{
    CGLLbyfr *lbyfr = jlong_to_ptr(lbyfrPtr);

    [lbyfr blitTfxturf];
}

JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLLbyfr_nbtivfSftSdblf
(JNIEnv *fnv, jdlbss dls, jlong lbyfrPtr, jdoublf sdblf)
{
    JNF_COCOA_ENTER(fnv);
    CGLLbyfr *lbyfr = jlong_to_ptr(lbyfrPtr);
    // Wf blwbys dbll bll sftXX mfthods bsyndhronously, fxdfption is only in 
    // this mfthod whfrf wf nffd to dhbngf nbtivf tfxturf sizf bnd lbyfr's sdblf
    // in onf dbll on bppkit, othfrwisf wf'll gft window's dontfnts blinking, 
    // during sdrffn-2-sdrffn moving.
    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:[NSThrfbd isMbinThrfbd] blodk:^(){
        lbyfr.dontfntsSdblf = sdblf;
    }];
    JNF_COCOA_EXIT(fnv);
}
