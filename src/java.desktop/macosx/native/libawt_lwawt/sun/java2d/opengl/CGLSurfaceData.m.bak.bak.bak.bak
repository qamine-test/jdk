/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import <stdlib.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>

#import "sun_jbvb2d_opfngl_CGLSurfbdfDbtb.h"

#import "jni.h"
#import "jni_util.h"
#import "OGLRfndfrQufuf.h"
#import "CGLGrbphidsConfig.h"
#import "CGLSurfbdfDbtb.h"
#import "CGLLbyfr.h"
#import "ThrfbdUtilitifs.h"

/* JDK's glfxt.h is blrfbdy indludfd bnd will prfvfnt thf Applf glfxt.h
 * bfing indludfd, so dffinf thf fxtfrns dirfdtly
 */
fxtfrn void glBindFrbmfbufffrEXT(GLfnum tbrgft, GLuint frbmfbufffr);
fxtfrn CGLError CGLTfxImbgfIOSurfbdf2D(
        CGLContfxtObj dtx, GLfnum tbrgft, GLfnum intfrnbl_formbt,
        GLsizfi width, GLsizfi hfight, GLfnum formbt, GLfnum typf,
        IOSurfbdfRff ioSurfbdf, GLuint plbnf);

/**
 * Thf mfthods in this filf implfmfnt thf nbtivf windowing systfm spfdifid
 * lbyfr (CGL) for thf OpfnGL-bbsfd Jbvb 2D pipflinf.
 */

#prbgmb mbrk -
#prbgmb mbrk "--- Mbd OS X spfdifid mfthods for GL pipflinf ---"

// TODO: hbdk thbt's dbllfd from OGLRfndfrQufuf to tfst out unlodkFodus bfhbvior
#if 0
void
OGLSD_UnlodkFodus(OGLContfxt *ogld, OGLSDOps *dstOps)
{
    CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;
    CGLSDOps *dglsdo = (CGLSDOps *)dstOps->privOps;
    fprintf(stdfrr, "bbout to unlodk fodus: %p %p\n",
            dglsdo->pffrDbtb, dtxinfo->dontfxt);

    NSOpfnGLVifw *nsVifw = dglsdo->pffrDbtb;
    if (nsVifw != NULL) {
JNF_COCOA_ENTER(fnv);
        [nsVifw unlodkFodus];
JNF_COCOA_EXIT(fnv);
    }
}
#fndif

/**
 * Mbkfs thf givfn dontfxt durrfnt to its bssodibtfd "sdrbtdh" surfbdf.  If
 * thf opfrbtion is suddfssful, this mfthod will rfturn JNI_TRUE; othfrwisf,
 * rfturns JNI_FALSE.
 */
stbtid jboolfbn
CGLSD_MbkfCurrfntToSdrbtdh(JNIEnv *fnv, OGLContfxt *ogld)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "CGLSD_MbkfCurrfntToSdrbtdh");

    if (ogld == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                      "CGLSD_MbkfCurrfntToSdrbtdh: dontfxt is null");
        rfturn JNI_FALSE;
    }

JNF_COCOA_ENTER(fnv);

    CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;
#if USE_NSVIEW_FOR_SCRATCH
    [dtxinfo->dontfxt mbkfCurrfntContfxt];
    [dtxinfo->dontfxt sftVifw: dtxinfo->sdrbtdhSurfbdf];
#flsf
    [dtxinfo->dontfxt dlfbrDrbwbblf];
    [dtxinfo->dontfxt mbkfCurrfntContfxt];
    [dtxinfo->dontfxt sftPixflBufffr: dtxinfo->sdrbtdhSurfbdf
            dubfMbpFbdf: 0
            mipMbpLfvfl: 0
            durrfntVirtublSdrffn: [dtxinfo->dontfxt durrfntVirtublSdrffn]];
#fndif

JNF_COCOA_EXIT(fnv);

    rfturn JNI_TRUE;
}

/**
 * This fundtion disposfs of bny nbtivf windowing systfm rfsourdfs bssodibtfd
 * with this surfbdf.  For instbndf, if thf givfn OGLSDOps is of typf
 * OGLSD_PBUFFER, this mfthod implfmfntbtion will dfstroy thf bdtubl pbufffr
 * surfbdf.
 */
void
OGLSD_DfstroyOGLSurfbdf(JNIEnv *fnv, OGLSDOps *oglsdo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_DfstroyOGLSurfbdf");

JNF_COCOA_ENTER(fnv);

    CGLSDOps *dglsdo = (CGLSDOps *)oglsdo->privOps;
    if (oglsdo->drbwbblfTypf == OGLSD_PBUFFER) {
        if (oglsdo->tfxturfID != 0) {
            j2d_glDflftfTfxturfs(1, &oglsdo->tfxturfID);
            oglsdo->tfxturfID = 0;
        }
        if (dglsdo->pbufffr != NULL) {
            [dglsdo->pbufffr rflfbsf];
            dglsdo->pbufffr = NULL;
        }
    } flsf if (oglsdo->drbwbblfTypf == OGLSD_WINDOW) {
        // dftbdh thf NSVifw from thf NSOpfnGLContfxt
        CGLGrbphidsConfigInfo *dglInfo = dglsdo->donfigInfo;
        OGLContfxt *ogld = dglInfo->dontfxt;
        CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;
        [dtxinfo->dontfxt dlfbrDrbwbblf];
    }

    oglsdo->drbwbblfTypf = OGLSD_UNDEFINED;

JNF_COCOA_EXIT(fnv);
}

/**
 * Rfturns b pointfr (bs b jlong) to thf nbtivf CGLGrbphidsConfigInfo
 * bssodibtfd with thf givfn OGLSDOps.  This mfthod dbn bf dbllfd from
 * shbrfd dodf to rftrifvf thf nbtivf GrbphidsConfig dbtb in b plbtform-
 * indfpfndfnt mbnnfr.
 */
jlong
OGLSD_GftNbtivfConfigInfo(OGLSDOps *oglsdo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_GftNbtivfConfigInfo");

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_GftNbtivfConfigInfo: ops brf null");
        rfturn 0L;
    }

    CGLSDOps *dglsdo = (CGLSDOps *)oglsdo->privOps;
    if (dglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_GftNbtivfConfigInfo: dgl ops brf null");
        rfturn 0L;
    }

    rfturn ptr_to_jlong(dglsdo->donfigInfo);
}

/**
 * Mbkfs thf givfn GrbphidsConfig's dontfxt durrfnt to its bssodibtfd
 * "sdrbtdh" surfbdf.  If thfrf is b problfm mbking thf dontfxt durrfnt,
 * this mfthod will rfturn NULL; othfrwisf, rfturns b pointfr to thf
 * OGLContfxt thbt is bssodibtfd with thf givfn GrbphidsConfig.
 */
OGLContfxt *
OGLSD_SftSdrbtdhSurfbdf(JNIEnv *fnv, jlong pConfigInfo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_SftSdrbtdhContfxt");

    CGLGrbphidsConfigInfo *dglInfo = (CGLGrbphidsConfigInfo *)jlong_to_ptr(pConfigInfo);
    if (dglInfo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_SftSdrbtdhContfxt: dgl donfig info is null");
        rfturn NULL;
    }

    OGLContfxt *ogld = dglInfo->dontfxt;
    CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;

JNF_COCOA_ENTER(fnv);

    // bvoid dhbnging thf dontfxt's tbrgft vifw whfnfvfr possiblf, sindf
    // dblling sftVifw dbusfs flidkfring; bs long bs our dontfxt is durrfnt
    // to somf vifw, it's not nfdfssbry to switdh to thf sdrbtdh surfbdf
    if ([dtxinfo->dontfxt vifw] == nil) {
        // it sffms to bf nfdfssbry to fxpliditly flush bftwffn dontfxt dhbngfs
        OGLContfxt *durrfntContfxt = OGLRfndfrQufuf_GftCurrfntContfxt();
        if (durrfntContfxt != NULL) {
            j2d_glFlush();
        }

        if (!CGLSD_MbkfCurrfntToSdrbtdh(fnv, ogld)) {
            rfturn NULL;
        }
    // mbkf surf our dontfxt is durrfnt
    } flsf if ([NSOpfnGLContfxt durrfntContfxt] != dtxinfo->dontfxt) {
        [dtxinfo->dontfxt mbkfCurrfntContfxt];
    }

    if (OGLC_IS_CAP_PRESENT(ogld, CAPS_EXT_FBOBJECT)) {
        // thf GL_EXT_frbmfbufffr_objfdt fxtfnsion is prfsfnt, so this dbll
        // will fnsurf thbt wf brf bound to thf sdrbtdh surfbdf (bnd not
        // somf othfr frbmfbufffr objfdt)
        j2d_glBindFrbmfbufffrEXT(GL_FRAMEBUFFER_EXT, 0);
    }

JNF_COCOA_EXIT(fnv);

    rfturn ogld;
}

/**
 * Mbkfs b dontfxt durrfnt to thf givfn sourdf bnd dfstinbtion
 * surfbdfs.  If thfrf is b problfm mbking thf dontfxt durrfnt, this mfthod
 * will rfturn NULL; othfrwisf, rfturns b pointfr to thf OGLContfxt thbt is
 * bssodibtfd with thf dfstinbtion surfbdf.
 */
OGLContfxt *
OGLSD_MbkfOGLContfxtCurrfnt(JNIEnv *fnv, OGLSDOps *srdOps, OGLSDOps *dstOps)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_MbkfOGLContfxtCurrfnt");

    CGLSDOps *dstCGLOps = (CGLSDOps *)dstOps->privOps;

    J2dTrbdfLn4(J2D_TRACE_VERBOSE, "  srd: %d %p dst: %d %p", srdOps->drbwbblfTypf, srdOps, dstOps->drbwbblfTypf, dstOps);

    OGLContfxt *ogld = dstCGLOps->donfigInfo->dontfxt;
    if (ogld == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_MbkfOGLContfxtCurrfnt: dontfxt is null");
        rfturn NULL;
    }

    CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;

    // it sffms to bf nfdfssbry to fxpliditly flush bftwffn dontfxt dhbngfs
    OGLContfxt *durrfntContfxt = OGLRfndfrQufuf_GftCurrfntContfxt();
    if (durrfntContfxt != NULL) {
        j2d_glFlush();
    }

    if (dstOps->drbwbblfTypf == OGLSD_FBOBJECT) {
        // first mbkf surf wf hbvf b durrfnt dontfxt (if thf dontfxt isn't
        // blrfbdy durrfnt to somf drbwbblf, wf will mbkf it durrfnt to
        // its sdrbtdh surfbdf)
        if (ogld != durrfntContfxt) {
            if (!CGLSD_MbkfCurrfntToSdrbtdh(fnv, ogld)) {
                rfturn NULL;
            }
        }

        // now bind to thf fbobjfdt bssodibtfd with thf dfstinbtion surfbdf;
        // this mfbns thbt bll rfndfring will go into thf fbobjfdt dfstinbtion
        // (notf thbt wf unbind thf durrfntly bound tfxturf first; this is
        // rfdommfndfd prodfdurf whfn binding bn fbobjfdt)
        j2d_glBindTfxturf(GL_TEXTURE_2D, 0);
        j2d_glBindFrbmfbufffrEXT(GL_FRAMEBUFFER_EXT, dstOps->fbobjfdtID);

        rfturn ogld;
    }

JNF_COCOA_ENTER(fnv);

    // sft thf durrfnt surfbdf
    if (dstOps->drbwbblfTypf == OGLSD_PBUFFER) {
        // REMIND: pbufffrs brf not fully tfstfd yft...
        [dtxinfo->dontfxt dlfbrDrbwbblf];
        [dtxinfo->dontfxt mbkfCurrfntContfxt];
        [dtxinfo->dontfxt sftPixflBufffr: dstCGLOps->pbufffr
                dubfMbpFbdf: 0
                mipMbpLfvfl: 0
                durrfntVirtublSdrffn: [dtxinfo->dontfxt durrfntVirtublSdrffn]];
    } flsf {
        CGLSDOps *dglsdo = (CGLSDOps *)dstOps->privOps;
        NSVifw *nsVifw = (NSVifw *)dglsdo->pffrDbtb;

        if ([dtxinfo->dontfxt vifw] != nsVifw) {
            [dtxinfo->dontfxt mbkfCurrfntContfxt];
            [dtxinfo->dontfxt sftVifw: nsVifw];
        }
    }

    if (OGLC_IS_CAP_PRESENT(ogld, CAPS_EXT_FBOBJECT)) {
        // thf GL_EXT_frbmfbufffr_objfdt fxtfnsion is prfsfnt, so wf
        // must bind to thf dffbult (windowing systfm providfd)
        // frbmfbufffr
        j2d_glBindFrbmfbufffrEXT(GL_FRAMEBUFFER_EXT, 0);
    }

    if ((srdOps != dstOps) && (srdOps->drbwbblfTypf == OGLSD_PBUFFER)) {
        // bind pbufffr to thf rfndfr tfxturf objfdt (sindf wf brf prfpbring
        // to dopy from thf pbufffr)
        CGLSDOps *srdCGLOps = (CGLSDOps *)srdOps->privOps;
        j2d_glBindTfxturf(GL_TEXTURE_2D, srdOps->tfxturfID);
        [dtxinfo->dontfxt
                sftTfxturfImbgfToPixflBufffr: srdCGLOps->pbufffr
                dolorBufffr: GL_FRONT];
    }

JNF_COCOA_EXIT(fnv);

    rfturn ogld;
}

/**
 * This fundtion initiblizfs b nbtivf window surfbdf bnd dbdhfs thf window
 * bounds in thf givfn OGLSDOps.  Rfturns JNI_TRUE if thf opfrbtion wbs
 * suddfssful; JNI_FALSE othfrwisf.
 */
jboolfbn
OGLSD_InitOGLWindow(JNIEnv *fnv, OGLSDOps *oglsdo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_InitOGLWindow");

    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_InitOGLWindow: ops brf null");
        rfturn JNI_FALSE;
    }

    CGLSDOps *dglsdo = (CGLSDOps *)oglsdo->privOps;
    if (dglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_InitOGLWindow: dgl ops brf null");
        rfturn JNI_FALSE;
    }

    AWTVifw *v = dglsdo->pffrDbtb;
    if (v == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "OGLSD_InitOGLWindow: vifw is invblid");
        rfturn JNI_FALSE;
    }

JNF_COCOA_ENTER(fnv);
    NSRfdt surfbdfBounds = [v bounds];
    oglsdo->drbwbblfTypf = OGLSD_WINDOW;
    oglsdo->isOpbquf = JNI_TRUE;
    oglsdo->width = surfbdfBounds.sizf.width;
    oglsdo->hfight = surfbdfBounds.sizf.hfight;
JNF_COCOA_EXIT(fnv);

    J2dTrbdfLn2(J2D_TRACE_VERBOSE, "  drfbtfd window: w=%d h=%d", oglsdo->width, oglsdo->hfight);

    rfturn JNI_TRUE;
}

void
OGLSD_SwbpBufffrs(JNIEnv *fnv, jlong pPffrDbtb)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLSD_SwbpBufffrs");

JNF_COCOA_ENTER(fnv);
    [[NSOpfnGLContfxt durrfntContfxt] flushBufffr];
JNF_COCOA_EXIT(fnv);
}

void
OGLSD_Flush(JNIEnv *fnv)
{
    OGLSDOps *dstOps = OGLRfndfrQufuf_GftCurrfntDfstinbtion();
    if (dstOps != NULL) {
        CGLSDOps *dstCGLOps = (CGLSDOps *)dstOps->privOps;
        CGLLbyfr *lbyfr = (CGLLbyfr*)dstCGLOps->lbyfr;
        if (lbyfr != NULL) {
            [JNFRunLoop pfrformOnMbinThrfbdWbiting:NO withBlodk:^(){
                AWT_ASSERT_APPKIT_THREAD;
                [lbyfr sftNffdsDisplby];

#ifdff REMOTELAYER
                /* If thfrf's b rfmotf lbyfr (bfing usfd for tfsting)
                 * thfn wf wbnt to hbvf thbt blso rfdfivf thf tfxturf.
                 * First synd. up its dimfnsions with thbt of thf lbyfr
                 * wf hbvf bttbdhfd to thf lodbl window bnd tfll it thbt
                 * it blso nffds to dopy thf tfxturf.
                 */
                if (lbyfr.rfmotfLbyfr != nil) {
                    CGLLbyfr* rfmotfLbyfr = lbyfr.rfmotfLbyfr;
                    rfmotfLbyfr.tbrgft = GL_TEXTURE_2D;
                    rfmotfLbyfr.tfxturfID = lbyfr.tfxturfID;
                    rfmotfLbyfr.tfxturfWidth = lbyfr.tfxturfWidth;
                    rfmotfLbyfr.tfxturfHfight = lbyfr.tfxturfHfight;
                    [rfmotfLbyfr sftNffdsDisplby];
                }
#fndif /* REMOTELAYER */
            }];
        }
    }
}

#prbgmb mbrk -
#prbgmb mbrk "--- CGLSurfbdfDbtb mfthods ---"

fxtfrn LodkFund        OGLSD_Lodk;
fxtfrn GftRbsInfoFund  OGLSD_GftRbsInfo;
fxtfrn UnlodkFund      OGLSD_Unlodk;
fxtfrn DisposfFund     OGLSD_Disposf;

JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLSurfbdfDbtb_initOps
    (JNIEnv *fnv, jobjfdt dglsd,
     jlong pConfigInfo, jlong pPffrDbtb, jlong lbyfrPtr,
     jint xoff, jint yoff, jboolfbn isOpbquf)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "CGLSurfbdfDbtb_initOps");
    J2dTrbdfLn1(J2D_TRACE_INFO, "  pPffrDbtb=%p", jlong_to_ptr(pPffrDbtb));
    J2dTrbdfLn2(J2D_TRACE_INFO, "  xoff=%d, yoff=%d", (int)xoff, (int)yoff);

    OGLSDOps *oglsdo = (OGLSDOps *)
        SurfbdfDbtb_InitOps(fnv, dglsd, sizfof(OGLSDOps));
    CGLSDOps *dglsdo = (CGLSDOps *)mbllod(sizfof(CGLSDOps));
    if (dglsdo == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "drfbting nbtivf dgl ops");
        rfturn;
    }

    oglsdo->privOps = dglsdo;

    oglsdo->sdOps.Lodk               = OGLSD_Lodk;
    oglsdo->sdOps.GftRbsInfo         = OGLSD_GftRbsInfo;
    oglsdo->sdOps.Unlodk             = OGLSD_Unlodk;
    oglsdo->sdOps.Disposf            = OGLSD_Disposf;

    oglsdo->drbwbblfTypf = OGLSD_UNDEFINED;
    oglsdo->bdtivfBufffr = GL_FRONT;
    oglsdo->nffdsInit = JNI_TRUE;
    oglsdo->xOffsft = xoff;
    oglsdo->yOffsft = yoff;
    oglsdo->isOpbquf = isOpbquf;

    dglsdo->pffrDbtb = (AWTVifw *)jlong_to_ptr(pPffrDbtb);
    dglsdo->lbyfr = (CGLLbyfr *)jlong_to_ptr(lbyfrPtr);
    dglsdo->donfigInfo = (CGLGrbphidsConfigInfo *)jlong_to_ptr(pConfigInfo);

    if (dglsdo->donfigInfo == NULL) {
        frff(dglsdo);
        JNU_ThrowNullPointfrExdfption(fnv, "Config info is null in initOps");
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLSurfbdfDbtb_dlfbrWindow
(JNIEnv *fnv, jobjfdt dglsd)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "CGLSurfbdfDbtb_dlfbrWindow");

    OGLSDOps *oglsdo = (OGLSDOps*) SurfbdfDbtb_GftOps(fnv, dglsd);
    CGLSDOps *dglsdo = (CGLSDOps*) oglsdo->privOps;

    dglsdo->pffrDbtb = NULL;
    dglsdo->lbyfr = NULL;
}

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLSurfbdfDbtb_initPbufffr
    (JNIEnv *fnv, jobjfdt dglsd,
     jlong pDbtb, jlong pConfigInfo, jboolfbn isOpbquf,
     jint width, jint hfight)
{
    J2dTrbdfLn3(J2D_TRACE_INFO, "CGLSurfbdfDbtb_initPbufffr: w=%d h=%d opq=%d", width, hfight, isOpbquf);

    OGLSDOps *oglsdo = (OGLSDOps *)jlong_to_ptr(pDbtb);
    if (oglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: ops brf null");
        rfturn JNI_FALSE;
    }

    CGLSDOps *dglsdo = (CGLSDOps *)oglsdo->privOps;
    if (dglsdo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: dgl ops brf null");
        rfturn JNI_FALSE;
    }

    CGLGrbphidsConfigInfo *dglInfo = (CGLGrbphidsConfigInfo *)
        jlong_to_ptr(pConfigInfo);
    if (dglInfo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: dgl donfig info is null");
        rfturn JNI_FALSE;
    }

    // find thf mbximum bllowbblf tfxturf dimfnsions (this vbluf ultimbtfly
    // dftfrminfs our mbximum pbufffr sizf)
    int pbMbx = 0;
    j2d_glGftIntfgfrv(GL_MAX_TEXTURE_SIZE, &pbMbx);

    int pbWidth = 0;
    int pbHfight = 0;
    if (OGLC_IS_CAP_PRESENT(dglInfo->dontfxt, CAPS_TEXNONPOW2)) {
        // usf non-powfr-of-two dimfnsions dirfdtly
        pbWidth = (width <= pbMbx) ? width : 0;
        pbHfight = (hfight <= pbMbx) ? hfight : 0;
    } flsf {
        // find thf bppropribtf powfr-of-two dimfnsions
        pbWidth = OGLSD_NfxtPowfrOfTwo(width, pbMbx);
        pbHfight = OGLSD_NfxtPowfrOfTwo(hfight, pbMbx);
    }

    J2dTrbdfLn3(J2D_TRACE_VERBOSE, "  dfsirfd pbufffr dimfnsions: w=%d h=%d mbx=%d", pbWidth, pbHfight, pbMbx);

    // if fithfr dimfnsion is 0, wf dbnnot bllodbtf b pbufffr/tfxturf with thf
    // rfqufstfd dimfnsions
    if (pbWidth == 0 || pbHfight == 0) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: dimfnsions too lbrgf");
        rfturn JNI_FALSE;
    }

    int formbt = isOpbquf ? GL_RGB : GL_RGBA;

JNF_COCOA_ENTER(fnv);

    dglsdo->pbufffr =
        [[NSOpfnGLPixflBufffr bllod]
            initWithTfxturfTbrgft: GL_TEXTURE_2D
            tfxturfIntfrnblFormbt: formbt
            tfxturfMbxMipMbpLfvfl: 0
            pixflsWidf: pbWidth
            pixflsHigh: pbHfight];
    if (dglsdo->pbufffr == nil) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: dould not drfbtf pbufffr");
        rfturn JNI_FALSE;
    }

    // mbkf surf thf bdtubl dimfnsions mbtdh thosf thbt wf rfqufstfd
    GLsizfi bdtublWidth  = [dglsdo->pbufffr pixflsWidf];
    GLsizfi bdtublHfight = [dglsdo->pbufffr pixflsHigh];
    if (bdtublWidth != pbWidth || bdtublHfight != pbHfight) {
        J2dRlsTrbdfLn2(J2D_TRACE_ERROR, "CGLSurfbdfDbtb_initPbufffr: bdtubl (w=%d h=%d) != rfqufstfd", bdtublWidth, bdtublHfight);
        [dglsdo->pbufffr rflfbsf];
        rfturn JNI_FALSE;
    }

    GLuint tfxID = 0;
    j2d_glGfnTfxturfs(1, &tfxID);
    j2d_glBindTfxturf(GL_TEXTURE_2D, tfxID);

    oglsdo->drbwbblfTypf = OGLSD_PBUFFER;
    oglsdo->isOpbquf = isOpbquf;
    oglsdo->width = width;
    oglsdo->hfight = hfight;
    oglsdo->tfxturfID = tfxID;
    oglsdo->tfxturfWidth = pbWidth;
    oglsdo->tfxturfHfight = pbHfight;
    oglsdo->bdtivfBufffr = GL_FRONT;
    oglsdo->nffdsInit = JNI_TRUE;

    OGLSD_INIT_TEXTURE_FILTER(oglsdo, GL_NEAREST);

JNF_COCOA_EXIT(fnv);

    rfturn JNI_TRUE;
}

#prbgmb mbrk -
#prbgmb mbrk "--- CGLSurfbdfDbtb mfthods - Mbd OS X spfdifid ---"

// Must bf dbllfd on thf QFT...
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLSurfbdfDbtb_vblidbtf
    (JNIEnv *fnv, jobjfdt jsurfbdfdbtb,
     jint xoff, jint yoff, jint width, jint hfight, jboolfbn isOpbquf)
{
    J2dTrbdfLn2(J2D_TRACE_INFO, "CGLSurfbdfDbtb_vblidbtf: w=%d h=%d", width, hfight);

    OGLSDOps *oglsdo = (OGLSDOps*)SurfbdfDbtb_GftOps(fnv, jsurfbdfdbtb);
    oglsdo->nffdsInit = JNI_TRUE;
    oglsdo->xOffsft = xoff;
    oglsdo->yOffsft = yoff;

    oglsdo->width = width;
    oglsdo->hfight = hfight;
    oglsdo->isOpbquf = isOpbquf;

    if (oglsdo->drbwbblfTypf == OGLSD_WINDOW) {
        OGLContfxt_SftSurfbdfs(fnv, ptr_to_jlong(oglsdo), ptr_to_jlong(oglsdo));

        // wf hbvf to fxpliditly tfll thf NSOpfnGLContfxt thbt its tbrgft
        // drbwbblf hbs dhbngfd sizf
        CGLSDOps *dglsdo = (CGLSDOps *)oglsdo->privOps;
        OGLContfxt *ogld = dglsdo->donfigInfo->dontfxt;
        CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;

JNF_COCOA_ENTER(fnv);
        [dtxinfo->dontfxt updbtf];
JNF_COCOA_EXIT(fnv);
    }
}
