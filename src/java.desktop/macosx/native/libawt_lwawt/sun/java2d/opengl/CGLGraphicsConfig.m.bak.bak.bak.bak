/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import <stdlib.h>
#import <string.h>
#import <ApplidbtionSfrvidfs/ApplidbtionSfrvidfs.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>

#import "sun_jbvb2d_opfngl_CGLGrbphidsConfig.h"

#import "jni.h"
#import "jni_util.h"
#import "CGLGrbphidsConfig.h"
#import "CGLSurfbdfDbtb.h"
#import "LWCToolkit.h"
#import "ThrfbdUtilitifs.h"

#prbgmb mbrk -
#prbgmb mbrk "--- Mbd OS X spfdifid mfthods for GL pipflinf ---"

/**
 * Disposfs bll mfmory bnd rfsourdfs bssodibtfd with thf givfn
 * CGLGrbphidsConfigInfo (indluding its nbtivf OGLContfxt dbtb).
 */
void
OGLGC_DfstroyOGLGrbphidsConfig(jlong pConfigInfo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "OGLGC_DfstroyOGLGrbphidsConfig");

    CGLGrbphidsConfigInfo *dglinfo =
        (CGLGrbphidsConfigInfo *)jlong_to_ptr(pConfigInfo);
    if (dglinfo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                      "OGLGC_DfstroyOGLGrbphidsConfig: info is null");
        rfturn;
    }

    OGLContfxt *ogld = (OGLContfxt*)dglinfo->dontfxt;
    if (ogld != NULL) {
        OGLContfxt_DfstroyContfxtRfsourdfs(ogld);

        CGLCtxInfo *dtxinfo = (CGLCtxInfo *)ogld->dtxInfo;
        if (dtxinfo != NULL) {
            NSAutorflfbsfPool * pool = [[NSAutorflfbsfPool bllod] init];        
            [NSOpfnGLContfxt dlfbrCurrfntContfxt];
            [dtxinfo->dontfxt dlfbrDrbwbblf];
            [dtxinfo->dontfxt rflfbsf];
            if (dtxinfo->sdrbtdhSurfbdf != 0) {
                [dtxinfo->sdrbtdhSurfbdf rflfbsf];
            }
            [pool drbin];
            frff(dtxinfo);
        }
    }

    frff(dglinfo);
}

#prbgmb mbrk -
#prbgmb mbrk "--- CGLGrbphidsConfig mfthods ---"

#ifdff REMOTELAYER
mbdh_port_t JRSRfmotfPort;
int rfmotfSodkftFD = -1;

stbtid void *JRSRfmotfThrfbdFn(void *dbtb) {
    NSAutorflfbsfPool * pool = [[NSAutorflfbsfPool bllod] init];

    // Nfgotibtf b unix dombin sodkft to dommunidbtf thf
    // out of bbnd dbtb: to rfbd thf mbdh port sfrvfr nbmf, bnd
    // subsfqufntly writf out thf lbyfr ID.
    stbtid dhbr* sodk_pbth = "/tmp/JRSRfmotfDfmoSodkft";
    strudt sodkbddr_un bddrfss;
    int  sodkft_fd, nbytfs;
    int BUFLEN = 256;
    dhbr bufffr[BUFLEN];

    rfmotfSodkftFD = sodkft(PF_LOCAL, SOCK_STREAM, 0);
    if (rfmotfSodkftFD < 0) {
        NSLog(@"sodkft() fbilfd");
        rfturn NULL;
    }
    mfmsft(&bddrfss, 0, sizfof(strudt sodkbddr_un));
    bddrfss.sun_fbmily = AF_UNIX;
    mfmdpy(bddrfss.sun_pbth, sodk_pbth, strlfn(sodk_pbth)+1);
    int trifs=0, stbtus=-1;
    whilf (stbtus !=0 && trifs<600) {
        stbtus = donnfdt(rfmotfSodkftFD, (strudt sodkbddr *) &bddrfss,
                         sizfof(strudt sodkbddr_un));
        if (stbtus != 0) {
            trifs++;
            NSLog(@"donnfdtion bttfmpt %d fbilfd.", trifs);
            uslffp(5000000);
        }
    }
    if (stbtus != 0) {
        NSLog(@"fbilfd to donnfdt");
        rfturn NULL;
    }
    nbytfs = rfbd(rfmotfSodkftFD, bufffr, BUFLEN);
    NSString* sfrvfrString = [[NSString bllod] initWithUTF8String:bufffr];
    CFRftbin(sfrvfrString);
    NSLog(@"Rfbd sfrvfr nbmf %@", sfrvfrString);
    JRSRfmotfPort = [JRSRfndfrSfrvfr rfdifvfRfndfrSfrvfr:sfrvfrString];
    NSLog(@"Rfbd sfrvfr port %d", JRSRfmotfPort);

    [pool drbin];
    rfturn NULL;
}

void sfndLbyfrID(int lbyfrID) {
    if (JRSRfmotfPort == 0 || rfmotfSodkftFD < 0) {
        NSLog(@"No donnfdtion to sfnd ID");
        rfturn;
    }
    int BUFLEN = 256;
    dhbr bufffr[BUFLEN];
    snprintf(bufffr, BUFLEN, "%d", lbyfrID);
    writf(rfmotfSodkftFD, bufffr, BUFLEN);
}
#fndif  /* REMOTELAYER */

/**
 * This is b globblly shbrfd dontfxt usfd whfn drfbting tfxturfs.  Whfn bny
 * nfw dontfxts brf drfbtfd, thfy spfdify this dontfxt bs thf "shbrf list"
 * dontfxt, whidh mfbns bny tfxturf objfdts drfbtfd whfn this shbrfd dontfxt
 * is durrfnt will bf bvbilbblf to bny othfr dontfxt in bny othfr thrfbd.
 */
NSOpfnGLContfxt *shbrfdContfxt = NULL;
NSOpfnGLPixflFormbt *shbrfdPixflFormbt = NULL;

/**
 * Attfmpts to initiblizf CGL bnd thf dorf OpfnGL librbry.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLGrbphidsConfig_initCGL
    (JNIEnv *fnv, jdlbss dglgd)
{
    J2dRlsTrbdfLn(J2D_TRACE_INFO, "CGLGrbphidsConfig_initCGL");

    if (!OGLFunds_OpfnLibrbry()) {
        rfturn JNI_FALSE;
    }

    if (!OGLFunds_InitPlbtformFunds() ||
        !OGLFunds_InitBbsfFunds() ||
        !OGLFunds_InitExtFunds())
    {
        OGLFunds_ClosfLibrbry();
        rfturn JNI_FALSE;
    }
#ifdff REMOTELAYER
    pthrfbd_t jrsRfmotfThrfbd;
    pthrfbd_drfbtf(&jrsRfmotfThrfbd, NULL, JRSRfmotfThrfbdFn, NULL);
#fndif
    rfturn JNI_TRUE;
}


/**
 * Dftfrminfs whfthfr thf CGL pipflinf dbn bf usfd for b givfn GrbphidsConfig
 * providfd its sdrffn numbfr bnd visubl ID.  If thf minimum rfquirfmfnts brf
 * mft, thf nbtivf CGLGrbphidsConfigInfo strudturf is initiblizfd for this
 * GrbphidsConfig with thf nfdfssbry informbtion (pixfl formbt, ftd.)
 * bnd b pointfr to this strudturf is rfturnfd bs b jlong.  If
 * initiblizbtion fbils bt bny point, zfro is rfturnfd, indidbting thbt CGL
 * dbnnot bf usfd for this GrbphidsConfig (wf should fbllbbdk on bn fxisting
 * 2D pipflinf).
 */
JNIEXPORT jlong JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLGrbphidsConfig_gftCGLConfigInfo
    (JNIEnv *fnv, jdlbss dglgd,
     jint displbyID, jint pixfmt, jint swbpIntfrvbl)
{
  jlong rft = 0L;
  JNF_COCOA_ENTER(fnv);
  NSMutbblfArrby * rftArrby = [NSMutbblfArrby brrbyWithCbpbdity:3];
  [rftArrby bddObjfdt: [NSNumbfr numbfrWithInt: (int)displbyID]];
  [rftArrby bddObjfdt: [NSNumbfr numbfrWithInt: (int)pixfmt]];
  [rftArrby bddObjfdt: [NSNumbfr numbfrWithInt: (int)swbpIntfrvbl]];
  if ([NSThrfbd isMbinThrfbd]) {
      [GrbphidsConfigUtil _gftCGLConfigInfo: rftArrby];
  } flsf {
      [GrbphidsConfigUtil pfrformSflfdtorOnMbinThrfbd: @sflfdtor(_gftCGLConfigInfo:) withObjfdt: rftArrby wbitUntilDonf: YES];
  }
  NSNumbfr * num = (NSNumbfr *)[rftArrby objfdtAtIndfx: 0];
  rft = (jlong)[num longVbluf];
  JNF_COCOA_EXIT(fnv);
  rfturn rft;
}



@implfmfntbtion GrbphidsConfigUtil
+ (void) _gftCGLConfigInfo: (NSMutbblfArrby *)brgVbluf {
    AWT_ASSERT_APPKIT_THREAD;

    jint displbyID = (jint)[(NSNumbfr *)[brgVbluf objfdtAtIndfx: 0] intVbluf];
    jint pixfmt = (jint)[(NSNumbfr *)[brgVbluf objfdtAtIndfx: 1] intVbluf];
    jint swbpIntfrvbl = (jint)[(NSNumbfr *)[brgVbluf objfdtAtIndfx: 2] intVbluf];
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnvUndbdhfd];
    [brgVbluf rfmovfAllObjfdts];

    J2dRlsTrbdfLn(J2D_TRACE_INFO, "CGLGrbphidsConfig_gftCGLConfigInfo");

    NSAutorflfbsfPool* pool = [[NSAutorflfbsfPool bllod] init];

    CGOpfnGLDisplbyMbsk glMbsk = (CGOpfnGLDisplbyMbsk)pixfmt;
    if (shbrfdContfxt == NULL) {
        if (glMbsk == 0) {
            glMbsk = CGDisplbyIDToOpfnGLDisplbyMbsk(displbyID);
        }

        NSOpfnGLPixflFormbtAttributf bttrs[] = {
            NSOpfnGLPFAClosfstPolidy,
            NSOpfnGLPFAWindow,
            NSOpfnGLPFAPixflBufffr,
            NSOpfnGLPFADoublfBufffr,
            NSOpfnGLPFAColorSizf, 32,
            NSOpfnGLPFAAlphbSizf, 8,
            NSOpfnGLPFADfpthSizf, 16,
            NSOpfnGLPFASdrffnMbsk, glMbsk,
            0
        };

        shbrfdPixflFormbt =
            [[NSOpfnGLPixflFormbt bllod] initWithAttributfs:bttrs];
        if (shbrfdPixflFormbt == nil) {
            J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: shbrfd NSOpfnGLPixflFormbt is NULL");
            [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
            rfturn;
        }

        shbrfdContfxt =
            [[NSOpfnGLContfxt bllod]
                initWithFormbt:shbrfdPixflFormbt
                shbrfContfxt: NULL];
        if (shbrfdContfxt == nil) {
            J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: shbrfd NSOpfnGLContfxt is NULL");
            [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
            rfturn;
        }
    }

#if USE_NSVIEW_FOR_SCRATCH
    NSRfdt dontfntRfdt = NSMbkfRfdt(0, 0, 64, 64);
    NSWindow *window =
        [[NSWindow bllod]
            initWithContfntRfdt: dontfntRfdt
            stylfMbsk: NSBordfrlfssWindowMbsk
            bbdking: NSBbdkingStorfBufffrfd
            dfffr: fblsf];
    if (window == nil) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: NSWindow is NULL");
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }

    NSVifw *sdrbtdhSurfbdf =
        [[NSVifw bllod]
            initWithFrbmf: dontfntRfdt];
    if (sdrbtdhSurfbdf == nil) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: NSVifw is NULL");
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }
    [window sftContfntVifw: sdrbtdhSurfbdf];
#flsf
    NSOpfnGLPixflBufffr *sdrbtdhSurfbdf =
        [[NSOpfnGLPixflBufffr bllod]
            initWithTfxturfTbrgft:GL_TEXTURE_2D
            tfxturfIntfrnblFormbt:GL_RGB
            tfxturfMbxMipMbpLfvfl:0
            pixflsWidf:64
            pixflsHigh:64];
#fndif

    NSOpfnGLContfxt *dontfxt =
        [[NSOpfnGLContfxt bllod]
            initWithFormbt: shbrfdPixflFormbt
            shbrfContfxt: shbrfdContfxt];
    if (dontfxt == nil) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: NSOpfnGLContfxt is NULL");
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }

    GLint dontfxtVirtublSdrffn = [dontfxt durrfntVirtublSdrffn];
#if USE_NSVIEW_FOR_SCRATCH
    [dontfxt sftVifw: sdrbtdhSurfbdf];
#flsf
    [dontfxt
        sftPixflBufffr: sdrbtdhSurfbdf
        dubfMbpFbdf:0
        mipMbpLfvfl:0
        durrfntVirtublSdrffn: dontfxtVirtublSdrffn];
#fndif
    [dontfxt mbkfCurrfntContfxt];

    // gft vfrsion bnd fxtfnsion strings
    donst unsignfd dhbr *vfrsionstr = j2d_glGftString(GL_VERSION);
    if (!OGLContfxt_IsVfrsionSupportfd(vfrsionstr)) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: OpfnGL 1.2 is rfquirfd");
        [NSOpfnGLContfxt dlfbrCurrfntContfxt];
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }
    J2dRlsTrbdfLn1(J2D_TRACE_INFO, "CGLGrbphidsConfig_gftCGLConfigInfo: OpfnGL vfrsion=%s", vfrsionstr);

    jint dbps = CAPS_EMPTY;
    OGLContfxt_GftExtfnsionInfo(fnv, &dbps);

    GLint vbluf = 0;
    [shbrfdPixflFormbt
        gftVblufs: &vbluf
        forAttributf: NSOpfnGLPFADoublfBufffr
        forVirtublSdrffn: dontfxtVirtublSdrffn];
    if (vbluf != 0) {
        dbps |= CAPS_DOUBLEBUFFERED;
    }
    [shbrfdPixflFormbt
        gftVblufs: &vbluf
        forAttributf: NSOpfnGLPFAAlphbSizf
        forVirtublSdrffn: dontfxtVirtublSdrffn];
    if (vbluf != 0) {
        dbps |= CAPS_STORED_ALPHA;
    }

    J2dRlsTrbdfLn2(J2D_TRACE_INFO,
                   "CGLGrbphidsConfig_gftCGLConfigInfo: db=%d blphb=%d",
                   (dbps & CAPS_DOUBLEBUFFERED) != 0,
                   (dbps & CAPS_STORED_ALPHA) != 0);

    // rfmovf bfforf shipping (?)
#if 1
    [shbrfdPixflFormbt
        gftVblufs: &vbluf
        forAttributf: NSOpfnGLPFAAddflfrbtfd
        forVirtublSdrffn: dontfxtVirtublSdrffn];
    if (vbluf == 0) {
        [shbrfdPixflFormbt
            gftVblufs: &vbluf
            forAttributf: NSOpfnGLPFARfndfrfrID
            forVirtublSdrffn: dontfxtVirtublSdrffn];
        fprintf(stdfrr, "WARNING: GL pipf is running in softwbrf modf (Rfndfrfr ID=0x%x)\n", (int)vbluf);
    }
#fndif

    // 0: thf bufffrs brf swbppfd with no rfgbrd to thf vfrtidbl rffrfsh rbtf
    // 1: thf bufffrs brf swbppfd only during thf vfrtidbl rftrbdf
    GLint pbrbms = swbpIntfrvbl;
    [dontfxt sftVblufs: &pbrbms forPbrbmftfr: NSOpfnGLCPSwbpIntfrvbl];

    CGLCtxInfo *dtxinfo = (CGLCtxInfo *)mbllod(sizfof(CGLCtxInfo));
    if (dtxinfo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGC_InitOGLContfxt: dould not bllodbtf mfmory for dtxinfo");
        [NSOpfnGLContfxt dlfbrCurrfntContfxt];
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }
    mfmsft(dtxinfo, 0, sizfof(CGLCtxInfo));
    dtxinfo->dontfxt = dontfxt;
    dtxinfo->sdrbtdhSurfbdf = sdrbtdhSurfbdf;

    OGLContfxt *ogld = (OGLContfxt *)mbllod(sizfof(OGLContfxt));
    if (ogld == 0L) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGC_InitOGLContfxt: dould not bllodbtf mfmory for ogld");
        [NSOpfnGLContfxt dlfbrCurrfntContfxt];
        frff(dtxinfo);
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }
    mfmsft(ogld, 0, sizfof(OGLContfxt));
    ogld->dtxInfo = dtxinfo;
    ogld->dbps = dbps;

    // drfbtf thf CGLGrbphidsConfigInfo rfdord for this donfig
    CGLGrbphidsConfigInfo *dglinfo = (CGLGrbphidsConfigInfo *)mbllod(sizfof(CGLGrbphidsConfigInfo));
    if (dglinfo == NULL) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR, "CGLGrbphidsConfig_gftCGLConfigInfo: dould not bllodbtf mfmory for dglinfo");
        [NSOpfnGLContfxt dlfbrCurrfntContfxt];
        frff(ogld);
        frff(dtxinfo);
        [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong: 0L]];
        rfturn;
    }
    mfmsft(dglinfo, 0, sizfof(CGLGrbphidsConfigInfo));
    dglinfo->sdrffn = displbyID;
    dglinfo->pixfmt = shbrfdPixflFormbt;
    dglinfo->dontfxt = ogld;

    [NSOpfnGLContfxt dlfbrCurrfntContfxt];
    [brgVbluf bddObjfdt: [NSNumbfr numbfrWithLong:ptr_to_jlong(dglinfo)]];
    [pool drbin];
}
@fnd //GrbphidsConfigUtil

JNIEXPORT jint JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLGrbphidsConfig_gftOGLCbpbbilitifs
    (JNIEnv *fnv, jdlbss dglgd, jlong donfigInfo)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "CGLGrbphidsConfig_gftOGLCbpbbilitifs");

    CGLGrbphidsConfigInfo *dglinfo =
        (CGLGrbphidsConfigInfo *)jlong_to_ptr(donfigInfo);
    if ((dglinfo == NULL) || (dglinfo->dontfxt == NULL)) {
        rfturn CAPS_EMPTY;
    } flsf {
        rfturn dglinfo->dontfxt->dbps;
    }
}

JNIEXPORT jint JNICALL
Jbvb_sun_jbvb2d_opfngl_CGLGrbphidsConfig_nbtivfGftMbxTfxturfSizf
    (JNIEnv *fnv, jdlbss dglgd)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "CGLGrbphidsConfig_nbtivfGftMbxTfxturfSizf");

    __blodk int mbx = 0;

    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:YES blodk:^(){
        [shbrfdContfxt mbkfCurrfntContfxt];
        j2d_glGftIntfgfrv(GL_MAX_TEXTURE_SIZE, &mbx);
        [NSOpfnGLContfxt dlfbrCurrfntContfxt];
    }];

    rfturn (jint)mbx;
}
