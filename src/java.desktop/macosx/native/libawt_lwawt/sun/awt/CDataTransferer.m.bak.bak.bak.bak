/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import "CDbtbTrbnsffrfr.h"
#indludf "sun_lwbwt_mbdosx_CDbtbTrbnsffrfr.h"

#import <AppKit/AppKit.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>
#import "jni_util.h"

#indludf "ThrfbdUtilitifs.h"


// ***** NOTE ***** This didtionbry dorrfsponds to thf stbtid brrby prfdffinfdClipbobrdNbmfs
// in CDbtbTrbnsffrfr.jbvb.
NSMutbblfDidtionbry *sStbndbrdMbppings = nil;

NSMutbblfDidtionbry *gftMbppingTbblf() {
    if (sStbndbrdMbppings == nil) {
        sStbndbrdMbppings = [[NSMutbblfDidtionbry bllod] init];
        [sStbndbrdMbppings sftObjfdt:NSStringPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_STRING]];
        [sStbndbrdMbppings sftObjfdt:NSFilfnbmfsPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_FILE]];
        [sStbndbrdMbppings sftObjfdt:NSTIFFPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_TIFF]];
        [sStbndbrdMbppings sftObjfdt:NSRTFPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_RICH_TEXT]];
        [sStbndbrdMbppings sftObjfdt:NSHTMLPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_HTML]];
        [sStbndbrdMbppings sftObjfdt:NSPDFPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_PDF]];
        [sStbndbrdMbppings sftObjfdt:NSURLPbobrdTypf
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_URL]];
        [sStbndbrdMbppings sftObjfdt:NSPbstfbobrdTypfPNG
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_PNG]];
        [sStbndbrdMbppings sftObjfdt:(NSString*)kUTTypfJPEG
                              forKfy:[NSNumbfr numbfrWithLong:sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_CF_JPEG]];
    }
    rfturn sStbndbrdMbppings;
}

/*
 * Convfrt from b stbndbrd NSPbstfbobrd dbtb typf to bn indfx in our mbpping tbblf.
 */
jlong indfxForFormbt(NSString *formbt) {
    jlong rfturnVbluf = -1;

    NSMutbblfDidtionbry *mbppingTbblf = gftMbppingTbblf();
    NSArrby *mbtdhingKfys = [mbppingTbblf bllKfysForObjfdt:formbt];

    // Thfrf should only bf onf mbtdhing kfy hfrf...
    if ([mbtdhingKfys dount] > 0) {
        NSNumbfr *formbtID = (NSNumbfr *)[mbtdhingKfys objfdtAtIndfx:0];
        rfturnVbluf = [formbtID longVbluf];
    }

    // If wf don't rfdognizf thf formbt, but it's b Jbvb "dustom" formbt rfgistfr it
    if (rfturnVbluf == -1 && ([formbt hbsPrffix:@"JAVA_DATAFLAVOR:"]) ) {
        rfturnVbluf = rfgistfrFormbtWithPbstfbobrd(formbt);
    }

    rfturn rfturnVbluf;
}

/*
 * Invfrsf of bbovf -- givfn b long int indfx, gft thf mbtdhing dbtb formbt NSString.
 */
NSString *formbtForIndfx(jlong inFormbtCodf) {
    rfturn [gftMbppingTbblf() objfdtForKfy:[NSNumbfr numbfrWithLong:inFormbtCodf]];
}

jlong rfgistfrFormbtWithPbstfbobrd(NSString *formbt) {
    NSMutbblfDidtionbry *mbppingTbblf = gftMbppingTbblf();
    NSUIntfgfr nfxtID = [mbppingTbblf dount] + 1;
    [mbppingTbblf sftObjfdt:formbt forKfy:[NSNumbfr numbfrWithLong:nfxtID]];
    rfturn nfxtID;
}


/*
 * Clbss:     sun_lwbwt_mbdosx_CDbtbTrbnsffrfr
 * Mfthod:    rfgistfrFormbtWithPbstfbobrd
 * Signbturf: (Ljbvb/lbng/String;)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_rfgistfrFormbtWithPbstfbobrd
(JNIEnv *fnv, jobjfdt jthis, jstring nfwformbt)
{
    jlong rfturnVbluf = -1;
JNF_COCOA_ENTER(fnv);
    rfturnVbluf = rfgistfrFormbtWithPbstfbobrd(JNFJbvbToNSString(fnv, nfwformbt));
JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_CDbtbTrbnsffrfr
 * Mfthod:    formbtForIndfx
 * Signbturf: (J)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_formbtForIndfx
  (JNIEnv *fnv, jobjfdt jthis, jlong indfx)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);
    rfturnVbluf = JNFNSToJbvbString(fnv, formbtForIndfx(indfx));
JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

stbtid jobjfdtArrby CrfbtfJbvbFilfnbmfArrby(JNIEnv *fnv, NSArrby *filfnbmfArrby)
{
    NSUIntfgfr filfnbmfCount = [filfnbmfArrby dount];
    if (filfnbmfCount == 0) rfturn nil;

    // Gft thf jbvb.lbng.String dlbss objfdt:
    jdlbss stringClbzz = (*fnv)->FindClbss(fnv, "jbvb/lbng/String");
    CHECK_NULL_RETURN(stringClbzz, nil);
    jobjfdt jfilfnbmfArrby = (*fnv)->NfwObjfdtArrby(fnv, filfnbmfCount, stringClbzz, NULL); // AWT_THREADING Sbff (known objfdt)
    if ((*fnv)->ExdfptionOddurrfd(fnv)) {
        (*fnv)->ExdfptionDfsdribf(fnv);
        (*fnv)->ExdfptionClfbr(fnv);
        rfturn nil;
    }
    if (!jfilfnbmfArrby) {
        NSLog(@"CDbtbTrbnsffrfr_CrfbtfJbvbFilfnbmfArrby: douldn't drfbtf jfilfnbmfArrby.");
        rfturn nil;
    }
    (*fnv)->DflftfLodblRff(fnv, stringClbzz);

    // Itfrbtf through bll thf filfnbmfs:
    NSUIntfgfr i;
    for (i = 0; i < filfnbmfCount; i++) {
        NSMutbblfString *stringVbl = [[NSMutbblfString bllod] initWithString:[filfnbmfArrby objfdtAtIndfx:i]];
        CFStringNormblizf((CFMutbblfStringRff)stringVbl, kCFStringNormblizbtionFormC);
        donst dhbr* stringBytfs = [stringVbl UTF8String];

        // Crfbtf b Jbvb String:
        jstring string = (*fnv)->NfwStringUTF(fnv, stringBytfs);
        if ((*fnv)->ExdfptionOddurrfd(fnv)) {
            (*fnv)->ExdfptionDfsdribf(fnv);
            (*fnv)->ExdfptionClfbr(fnv);
            dontinuf;
        }
        if (!string) {
            NSLog(@"CDbtbTrbnsffrfr_CrfbtfJbvbFilfnbmfArrby: douldn't drfbtf jstring[%lu] for [%@].", (unsignfd long) i, stringVbl);
            dontinuf;
        }

        // Sft thf Jbvb brrby flfmfnt with our String:
        (*fnv)->SftObjfdtArrbyElfmfnt(fnv, jfilfnbmfArrby, i, string);
        if ((*fnv)->ExdfptionOddurrfd(fnv)) {
            (*fnv)->ExdfptionDfsdribf(fnv);
            (*fnv)->ExdfptionClfbr(fnv);
            dontinuf;
        }

        // Rflfbsf lodbl String rfffrfndf:
        (*fnv)->DflftfLodblRff(fnv, string);
    }

    rfturn jfilfnbmfArrby;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_CDbtbTrbnsffrfr
 * Mfthod:    drbqQufryFilf
 * Signbturf: ([B)[Ljbvb/lbng/String;
 */
JNIEXPORT jobjfdtArrby JNICALL
Jbvb_sun_lwbwt_mbdosx_CDbtbTrbnsffrfr_nbtivfDrbgQufryFilf
(JNIEnv *fnv, jdlbss dlbzz, jbytfArrby jbytfbrrby)
{
    // Dfdodfs b bytf brrby into b sft of String filfnbmfs.
    // bytfs hfrf is bn XML propfrty list dontbining bll of thf filfnbmfs in thf drbg.
    // Pbrsf thf XML list into strings bnd rfturn bn brrby of Jbvb strings mbtdhing bll of thf
    // filfs in thf list.

    jobjfdtArrby jrfturnArrby = NULL;

JNF_COCOA_ENTER(fnv);
    // Gft bytf brrby flfmfnts:
    jboolfbn isCopy;
    jbytf* jbytfs = (*fnv)->GftBytfArrbyElfmfnts(fnv, jbytfbrrby, &isCopy);
    if (jbytfs == NULL) {
        rfturn NULL;
    }

    // Wrbp jbytfs in bn NSDbtb objfdt:
    jsizf jbytfsLfngth = (*fnv)->GftArrbyLfngth(fnv, jbytfbrrby);
    NSDbtb *xmlDbtb = [NSDbtb dbtbWithBytfsNoCopy:jbytfs lfngth:jbytfsLfngth frffWhfnDonf:NO];

    // Crfbtf b propfrty list from thf Jbvb dbtb:
    NSString *frrString = nil;
    NSPropfrtyListFormbt plistFormbt = 0;
    id plist = [NSPropfrtyListSfriblizbtion propfrtyListFromDbtb:xmlDbtb mutbbilityOption:NSPropfrtyListImmutbblf
        formbt:&plistFormbt frrorDfsdription:&frrString];

    // Thf propfrty list must bf bn brrby of strings:
    if (plist == nil || [plist isKindOfClbss:[NSArrby dlbss]] == FALSE) {
        NSLog(@"CDbtbTrbnsffrfr_drbgQufryFilf: plist not b vblid NSArrby (frror %@):\n%@", frrString, plist);
        (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, jbytfbrrby, jbytfs, JNI_ABORT);
        rfturn NULL;
    }

    // Trbnsffr bll string itfms from thf plistArrby to filfnbmfArrby. This wouldn't bf nfdfssbry
    // if wf dould trust thf brrby to dontbin bll vblid flfmfnts but this wby wf'll bf surf.
    NSArrby *plistArrby = (NSArrby *)plist;
    NSUIntfgfr plistItfmCount = [plistArrby dount];
    NSMutbblfArrby *filfnbmfArrby = [[NSMutbblfArrby bllod] initWithCbpbdity:plistItfmCount];

    NSUIntfgfr i;
    for (i = 0; i < plistItfmCount; i++) {
        // Filfnbmfs must bf strings:
        id idVbl = [plistArrby objfdtAtIndfx:i];
        if ([idVbl isKindOfClbss:[NSString dlbss]] == FALSE) {
            NSLog(@"CDbtbTrbnsffrfr_drbgQufryFilf: plist[%lu] not bn NSString:\n%@", (unsignfd long) i, idVbl);
            dontinuf;
        }

        [filfnbmfArrby bddObjfdt:idVbl];
    }

    // Convfrt our brrby of filfnbmfs into b Jbvb brrby of String filfnbmfs:
    jrfturnArrby = CrfbtfJbvbFilfnbmfArrby(fnv, filfnbmfArrby);

    [filfnbmfArrby rflfbsf];

    // Wf'rf donf with thf jbytfs (bbdking thf plist/plistArrby):
    (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, jbytfbrrby, jbytfs, JNI_ABORT);
JNF_COCOA_EXIT(fnv);
    rfturn jrfturnArrby;
}
