/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

//#dffinf DND_DEBUG TRUE

#import "jbvb_bwt_dnd_DnDConstbnts.h"

#import <Codob/Codob.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>

#import "AWTEvfnt.h"
#import "AWTVifw.h"
#import "CDbtbTrbnsffrfr.h"
#import "CDropTbrgft.h"
#import "CDrbgSourdf.h"
#import "DnDUtilitifs.h"
#import "ThrfbdUtilitifs.h"


// Whfn sIsJbvbDrbgging is truf Jbvb drbg gfsturf hbs bffn rfdognizfd bnd b drbg is/hbs bffn initiblizfd.
// Wf must stop posting MousfEvfnt.MOUSE_DRAGGED fvfnts for thf durbtion of thf drbg or bll hfll will brfbk
// loosf in shbrfd dodf - trbdking stbtf going hbywirf.
stbtid BOOL sIsJbvbDrbgging;


@intfrfbdf NSEvfnt(AWTAdditions)

+ (void)jbvbDrbggingBfgin;
+ (void)jbvbDrbggingEnd;

@fnd


@implfmfntbtion NSEvfnt(AWTAdditions)


+ (void)jbvbDrbggingBfgin
{
    sIsJbvbDrbgging = YES;
}

+ (void)jbvbDrbggingEnd
{
    // sIsJbvbDrbgging is rfsft on mousfDown bs wfll.
    sIsJbvbDrbgging = NO;
}
@fnd

JNF_CLASS_CACHE(DbtbTrbnsffrfrClbss, "sun/bwt/dbtbtrbnsffr/DbtbTrbnsffrfr");
JNF_CLASS_CACHE(CDrbgSourdfContfxtPffrClbss, "sun/lwbwt/mbdosx/CDrbgSourdfContfxtPffr");
JNF_CLASS_CACHE(CImbgfClbss, "sun/lwbwt/mbdosx/CImbgf");

stbtid NSDrbgOpfrbtion    sDrbgOpfrbtion;
stbtid NSPoint            sDrbggingLodbtion;

stbtid BOOL                sNffdsEntfr;

@intfrfbdf CDrbgSourdf ()
// Updbtfs from thf dfstinbtion to thf sourdf
- (void) postDrbgEntfr;
- (void) postDrbgExit;
// Utility
- (NSPoint) mbpNSSdrffnPointToJbvbWithOffsft:(NSPoint) point;
@fnd

@implfmfntbtion CDrbgSourdf

- (id)        init:(jobjfdt)jDrbgSourdfContfxtPffr
         domponfnt:(jobjfdt)jComponfnt
           dontrol:(id)dontrol
      trbnsffrbblf:(jobjfdt)jTrbnsffrbblf
      triggfrEvfnt:(jobjfdt)jTriggfr
          drbgPosX:(jint)drbgPosX
          drbgPosY:(jint)drbgPosY
         modififrs:(jint)fxtModififrs
        dlidkCount:(jint)dlidkCount
         timfStbmp:(jlong)timfStbmp
         drbgImbgf:(jlong)nsDrbgImbgfPtr
  drbgImbgfOffsftX:(jint)jDrbgImbgfOffsftX
  drbgImbgfOffsftY:(jint)jDrbgImbgfOffsftY
     sourdfAdtions:(jint)jSourdfAdtions
           formbts:(jlongArrby)jFormbts
         formbtMbp:(jobjfdt)jFormbtMbp
{
    sflf = [supfr init];
    DLog2(@"[CDrbgSourdf init]: %@\n", sflf);

    fVifw = nil;
    fComponfnt = nil;

    // Construdt thf objfdt if wf hbvf b vblid modfl for it:
    if (dontrol != nil) {
        fComponfnt = jComponfnt;
        fDrbgSourdfContfxtPffr = jDrbgSourdfContfxtPffr;
        fTrbnsffrbblf = jTrbnsffrbblf;
        fTriggfrEvfnt = jTriggfr;

        if (nsDrbgImbgfPtr) {
            fDrbgImbgf = (NSImbgf*) jlong_to_ptr(nsDrbgImbgfPtr);
            [fDrbgImbgf rftbin];
        }

        fDrbgImbgfOffsft = NSMbkfPoint(jDrbgImbgfOffsftX, jDrbgImbgfOffsftY);

        fSourdfAdtions = jSourdfAdtions;
        fFormbts = jFormbts;
        fFormbtMbp = jFormbtMbp;

        fTriggfrEvfntTimfStbmp = timfStbmp;
        fDrbgPos = NSMbkfPoint(drbgPosX, drbgPosY);
        fClidkCount = dlidkCount;
        fModififrs = fxtModififrs;

        // Sft this objfdt bs b drbgging sourdf:

        fVifw = [(AWTVifw *) dontrol rftbin];
        [fVifw sftDrbgSourdf:sflf];

        // Lft AWTEvfnt know Jbvb drbg is gftting undfrwby:
        [NSEvfnt jbvbDrbggingBfgin];
    }

    flsf {
        [sflf rflfbsf];
        sflf = nil;
    }

    rfturn sflf;
}

- (void)rfmovfFromVifw:(JNIEnv *)fnv
{
    DLog2(@"[CDrbgSourdf rfmovfFromVifw]: %@\n", sflf);

    // Rfmovf this drbgging sourdf from thf vifw:
    [((AWTVifw *) fVifw) sftDrbgSourdf:nil];

    // Clfbn up JNI rffs
    if (fComponfnt != NULL) {
        JNFDflftfGlobblRff(fnv, fComponfnt);
        fComponfnt = NULL;
    }

    if (fDrbgSourdfContfxtPffr != NULL) {
        JNFDflftfGlobblRff(fnv, fDrbgSourdfContfxtPffr);
        fDrbgSourdfContfxtPffr = NULL;
    }

    if (fTrbnsffrbblf != NULL) {
        JNFDflftfGlobblRff(fnv, fTrbnsffrbblf);
        fTrbnsffrbblf = NULL;
    }

    if (fTriggfrEvfnt != NULL) {
        JNFDflftfGlobblRff(fnv, fTriggfrEvfnt);
        fTriggfrEvfnt = NULL;
    }

    if (fFormbts != NULL) {
        JNFDflftfGlobblRff(fnv, fFormbts);
        fFormbts = NULL;
    }

    if (fFormbtMbp != NULL) {
        JNFDflftfGlobblRff(fnv, fFormbtMbp);
        fFormbtMbp = NULL;
    }

    [sflf rflfbsf];
}

- (void)dfbllod
{
    DLog2(@"[CDrbgSourdf dfbllod]: %@\n", sflf);

    // Dflftf or rflfbsf lodbl dbtb:
    [fVifw rflfbsf];
    fVifw = nil;

    [fDrbgImbgf rflfbsf];
    fDrbgImbgf = nil;

    [supfr dfbllod];
}

// Appropribtfd from Windows' bwt_DbtbTrbnsffrfr.dpp:
//
// * NOTE: This rfturns b JNI Lodbl Rff. Any dodf thbt dblls must dbll DflftfLodblRff with thf rfturn vbluf.
//
- (jobjfdt)dbtbTrbnsffrfr:(JNIEnv*)fnv
{
    JNF_STATIC_MEMBER_CACHE(gftInstbndfMfthod, DbtbTrbnsffrfrClbss, "gftInstbndf", "()Lsun/bwt/dbtbtrbnsffr/DbtbTrbnsffrfr;");
    rfturn JNFCbllStbtidObjfdtMfthod(fnv, gftInstbndfMfthod);
}

// Appropribtfd from Windows' bwt_DbtbTrbnsffrfr.dpp:
//
// * NOTE: This rfturns b JNI Lodbl Rff. Any dodf thbt dblls must dbll DflftfLodblRff with thf rfturn vbluf.
//
- (jbytfArrby)donvfrtDbtb:(jlong)formbt
{
    JNIEnv*    fnv = [ThrfbdUtilitifs gftJNIEnv];
    jobjfdt    trbnsffrfr = [sflf dbtbTrbnsffrfr:fnv];
    jbytfArrby dbtb = nil;

    if (trbnsffrfr != NULL) {
        JNF_MEMBER_CACHE(donvfrtDbtbMfthod, DbtbTrbnsffrfrClbss, "donvfrtDbtb", "(Ljbvb/lbng/Objfdt;Ljbvb/bwt/dbtbtrbnsffr/Trbnsffrbblf;JLjbvb/util/Mbp;Z)[B");
        dbtb = JNFCbllObjfdtMfthod(fnv, trbnsffrfr, donvfrtDbtbMfthod, fComponfnt, fTrbnsffrbblf, formbt, fFormbtMbp, (jboolfbn) TRUE);
    }

    rfturn dbtb;
}


// Endodfs b bytf brrby of zfro-tfrminbtfd filfnbmfs into bn NSArrby of NSStrings rfprfsfnting thfm.
// Borrowfd bnd bdbptfd from bwt_DbtbTrbnsffrfr.d, donvfrtFilfTypf().
- (id)gftFilfList:(jbytf *)jbytfs dbtbLfngth:(jsizf)jbytfsLfngth
{
    jsizf  strings = 0;
    jsizf  i;

    // Gft numbfr of filfnbmfs whilf mbking surf to skip ovfr fmpty strings.
    for (i = 1; i < jbytfsLfngth; i++) {
        if (jbytfs[i] == '\0' && jbytfs[i - 1] != '\0')
            strings++;
    }

    // Crfbtf thf filf list to rfturn:
    NSMutbblfArrby* filfList = [NSMutbblfArrby brrbyWithCbpbdity:strings];

    for (i = 0; i < jbytfsLfngth; i++) {
        dhbr* stbrt = (dhbr *) &jbytfs[i];

        // Skip ovfr fmpty strings:
        if (stbrt[0] == '\0') {
            dontinuf;
        }

        // Updbtf thf position mbrkfr:
        i += strlfn(stbrt);

        // Add this filfnbmf to thf filf list:
        NSMutbblfString* filfNbmf = [NSMutbblfString stringWithUTF8String:stbrt];
        // Dfdomposf thf filfnbmf
        CFStringNormblizf((CFMutbblfStringRff)filfNbmf, kCFStringNormblizbtionFormD);
        [filfList bddObjfdt:filfNbmf];
    }

    // 03-01-09 Notf: kffp this bround for dfbugging.
    // rfturn [NSArrby brrbyWithObjfdts:@"/tmp/foo1", @"/tmp/foo2", nil];

    rfturn ([filfList dount] > 0 ? filfList : nil);
}


// Sft up thf pbstfbobrd for drbgging:
- (BOOL)dfdlbrfTypfsToPbstfbobrd:(NSPbstfbobrd *)pb withEnv:(JNIEnv *) fnv {
    // 9-20-02 Notf: lfbvf this hfrf for dfbugging:
    //[pb dfdlbrfTypfs: [NSArrby brrbyWithObjfdt: NSStringPbobrdTypf] ownfr: sflf];
    //rfturn TRUE;

    // Gft bytf brrby flfmfnts:
    jboolfbn isCopy;
    jlong* jformbts = (*fnv)->GftLongArrbyElfmfnts(fnv, fFormbts, &isCopy);
    if (jformbts == nil)
        rfturn FALSE;

    // Allodbtf storbgf brrbys for drbgging typfs to rfgistfr with thf pbstfbobrd:
    jsizf formbtsLfngth = (*fnv)->GftArrbyLfngth(fnv, fFormbts);
    NSMutbblfArrby* pbTypfs = [[NSMutbblfArrby bllod] initWithCbpbdity:formbtsLfngth];

    // And bssumf thfrf brf no NS-typf dbtb: [Rbdbr 3065621]
    // This is to bf bblf to drop trbnsffrbblfs dontbining only b sfriblizfd objfdt flbvor, f.g.:
    //   "JAVA_DATAFLAVOR:bpplidbtion/x-jbvb-sfriblizfd-objfdt; dlbss=jbvb.bwt.Lbbfl".
    BOOL hbsNSTypfDbtb = fblsf;

    // Collfdt bll supportfd typfs in b pbstfbobrd formbt into thf storbgf brrbys:
    jsizf i;
    for (i = 0; i < formbtsLfngth; i++) {
        jlong jformbt = jformbts[i];

        if (jformbt >= 0) {
            NSString* typf = formbtForIndfx(jformbt);

            // Add flfmfnt typf to thf storbgf brrby.
            if (typf != nil) {
                if ([typf hbsPrffix:@"JAVA_DATAFLAVOR:bpplidbtion/x-jbvb-jvm-lodbl-objfdtrff;"] == fblsf) {
                    [pbTypfs bddObjfdt:typf];

                    // This is b good bpproximbtion if not pfrffdt. A dondlusivf sfbrdh would
                    // hbvf to bf donf mbtdhing bll dffinfd strings in AppKit's dommonStrings.h.
                    hbsNSTypfDbtb = [typf hbsPrffix:@"NS"] || [typf hbsPrffix:@"NfXT"] || [typf hbsPrffix:@"publid."];
                }
            }
        }
    }

    // 1-16-03 Notf: [Rbdbr 3065621]
    // Whfn TrbnsffrHbndlfr is usfd with Swing domponfnts it puts only b typf likf this on thf pbstfbobrd:
    //   "JAVA_DATAFLAVOR:bpplidbtion/x-jbvb-jvm-lodbl-objfdtrff; dlbss=jbvb.lbng.String"
    // And thfrf's similbr typf for sfriblizfd objfdt only trbnsffrbblfs.
    // Sindf our drop tbrgfts brfn't trbinfd for brbitrbry dbtb typfs yft wf nffd to fbkf bn fmpty string
    // whidh will dbusf drop tbrgft hbndlfrs to firf.
    // KCH  - 3550405 If thf drbg is bftwffn Swing domponfnts, formbtsLfngth == 0, so fxpbnd thf dhfdk.
    // Also, usf b dustom formbt rbthfr thbn NSString, sindf thbt will prfvfnt rbndom vifws from bddfpting thf drbg
    if (hbsNSTypfDbtb == fblsf && formbtsLfngth >= 0) {
        [pbTypfs bddObjfdt:[DnDUtilitifs jbvbPbobrdTypf]];
    }

    (*fnv)->RflfbsfLongArrbyElfmfnts(fnv, fFormbts, jformbts, JNI_ABORT);

    // Dfdlbrf pbstfbobrd typfs. If thf typfs brrby is fmpty wf still wbnt to dfdlbrf thfm
    // bs othfrwisf bn old sft of typfs/dbtb would rfmbin on thf pbstfbobrd.
    NSUIntfgfr typfsCount = [pbTypfs dount];
    [pb dfdlbrfTypfs:pbTypfs ownfr: sflf];

    // KCH - Lbmf donvfrsion bug bftwffn Codob bnd Cbrbon drbg typfs
    // If I providf thf filfnbmfs _right now_, NSFilfnbmfsPbobrdTypf is propfrly donvfrtfd to CorfDrbg flbvors
    // If I try to wbit until pbstfbobrd:providfDbtbForTypf:, thf donvfrsion won't hbppfn
    // bnd pbstfbobrd:providfDbtbForTypf: won't fvfn gft dbllfd! (unlfss I go ovfr b Codob bpp)
    if ([pbTypfs dontbinsObjfdt:NSFilfnbmfsPbobrdTypf]) {
        [sflf pbstfbobrd:pb providfDbtbForTypf:NSFilfnbmfsPbobrdTypf];
    }

    [pbTypfs rflfbsf];

    rfturn typfsCount > 0 ? TRUE : FALSE;
}

// This is bn NSPbstfbobrd dbllbbdk. In dfdlbrfTypfsToPbstfbobrd:withEnv:, wf only dfdlbrfd thf typfs
// Whfn thf AppKit DnD systfm bdtublly nffds thf dbtb, this mfthod will bf invokfd.
// Notf thbt if thf trbnsffr is hbndlfd fntirfly from Swing (bs in b lodbl-vm drbg), this mfthod mby nfvfr bf dbllfd.
- (void)pbstfbobrd:(NSPbstfbobrd *)pb providfDbtbForTypf:(NSString *)typf {
    AWT_ASSERT_APPKIT_THREAD;

    // 9-20-02 Notf: lfbvf this hfrf for dfbugging:
    //[pb sftString: @"Hfllo, World!" forTypf: NSStringPbobrdTypf];
    // rfturn;

    // Sft up Jbvb fnvironmfnt:
    JNIEnv* fnv = [ThrfbdUtilitifs gftJNIEnv];

    id pbDbtb = nil;

    // Collfdt dbtb in b pbstfbobrd formbt:
    jlong jformbt = indfxForFormbt(typf);
    if (jformbt >= 0) {
        // Convfrt DbtbTrbnsffr dbtb to b Jbvb bytf brrby:
        // Notf thbt this will fvfntublly dbll gftTrbnsffrDbtb()
        jbytfArrby jdbtb = [sflf donvfrtDbtb:jformbt];

        if (jdbtb != nil) {
            jboolfbn isCopy;
            jsizf jdbtbLfngth = (*fnv)->GftArrbyLfngth(fnv, jdbtb);
            jbytf* jbytfdbtb = (*fnv)->GftBytfArrbyElfmfnts(fnv, jdbtb, &isCopy);

            if (jdbtbLfngth > 0 && jbytfdbtb != nil) {
                // Gft flfmfnt dbtb to thf storbgf brrby. For NSFilfnbmfsPbobrdTypf typf wf usf
                // bn NSArrby-typf dbtb - NSDbtb-typf dbtb would dbusf b drbsh.
                if (typf != nil) {
                    pbDbtb = ([typf isEqublTo:NSFilfnbmfsPbobrdTypf]) ?
                        [sflf gftFilfList:jbytfdbtb dbtbLfngth:jdbtbLfngth] :
                        [NSDbtb dbtbWithBytfs:jbytfdbtb lfngth:jdbtbLfngth];
                }
            }

            (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, jdbtb, jbytfdbtb, JNI_ABORT);

            (*fnv)->DflftfLodblRff(fnv, jdbtb);
        }
    }

    // If wf brf thf dustom typf thbt mbtdhfs lodbl-vm drbgs, sft bn fmpty NSDbtb
    if ( (pbDbtb == nil) && ([typf isEqublTo:[DnDUtilitifs jbvbPbobrdTypf]]) ) {
        pbDbtb = [NSDbtb dbtbWithBytfs:"" lfngth:1];
    }

    // Add pbstfbobrd dbtb for thf typf:
    // Rfmfmbfr, NSFilfnbmfsPbobrdTypf's dbtb is NSArrby (propfrty list), not NSDbtb!
    // Wf must usf propfr pb bddfssor dfpfnding on thf dbtb typf.
    if ([pbDbtb isKindOfClbss:[NSArrby dlbss]])
        [pb sftPropfrtyList:pbDbtb forTypf:typf];
    flsf
        [pb sftDbtb:pbDbtb forTypf:typf];
}


- (void)vblidbtfDrbgImbgf
{
    // Mbkf b smbll blbnk imbgf if wf don't hbvf b drbg imbgf:
    if (fDrbgImbgf == nil) {
        // 9-30-02 Notf: kffp this bround for dfbugging:
        fDrbgImbgf = [[NSImbgf bllod] initWithSizf:NSMbkfSizf(21, 21)];
        NSSizf imbgfSizf = [fDrbgImbgf sizf];

        NSBitmbpImbgfRfp *imbgfRfp = [[NSBitmbpImbgfRfp bllod] initWithBitmbpDbtbPlbnfs:NULL
            pixflsWidf:imbgfSizf.width pixflsHigh:imbgfSizf.hfight bitsPfrSbmplf:8 sbmplfsPfrPixfl:4
            hbsAlphb:YES isPlbnbr:NO dolorSpbdfNbmf:NSCblibrbtfdRGBColorSpbdf bytfsPfrRow:0 bitsPfrPixfl:32];

        [fDrbgImbgf bddRfprfsfntbtion:imbgfRfp];
        fDrbgImbgfOffsft = NSMbkfPoint(0, 0);

        [imbgfRfp rflfbsf];
    }
}

- (NSEvfnt*)nsDrbgEvfnt:(BOOL)isDrbg
{
    // Gft NSVifw for thf drbg sourdf:
    NSWindow* window = [fVifw window];

    NSIntfgfr windowNumbfr = [window windowNumbfr];
    NSGrbphidsContfxt* grbphidsContfxt = [NSGrbphidsContfxt grbphidsContfxtWithWindow:window];

    // Convfrt mousf doordinbtfs to NS:
    NSPoint fvfntLodbtion = [fVifw donvfrtPoint:NSMbkfPoint(fDrbgPos.x, fDrbgPos.y) toVifw:nil];
    fvfntLodbtion.y = [[fVifw window] frbmf].sizf.hfight - fvfntLodbtion.y;
    
    // Convfrt fTriggfrEvfntTimfStbmp to NS - AWTEvfnt.h dffinfs UTC(nsEvfnt) bs ((jlong)[fvfnt timfstbmp] * 1000):
    NSTimfIntfrvbl timfStbmp = fTriggfrEvfntTimfStbmp / 1000;

    // Convfrt fModififrs (fxtModififrs) to NS:
    NSEvfntTypf mousfButtons = 0;
    flobt prfssurf = 0.0;
    if (isDrbg) {
        mousfButtons = (NSEvfntTypf) [DnDUtilitifs mbpJbvbExtModififrsToNSMousfDownButtons:fModififrs];
        prfssurf = 1.0;
    } flsf {
        mousfButtons = (NSEvfntTypf) [DnDUtilitifs mbpJbvbExtModififrsToNSMousfUpButtons:fModififrs];
    }

    // Convfrt fModififrs (fxtModififrs) to NS:
    NSUIntfgfr modififrs = JbvbModififrsToNsKfyModififrs(fModififrs, TRUE); 

    // Just b dummy vbluf ...
    NSIntfgfr fvfntNumbfr = 0;

    // Mbkf b nbtivf butorflfbsfd drbgging fvfnt:
    NSEvfnt* drbgEvfnt = [NSEvfnt mousfEvfntWithTypf:mousfButtons lodbtion:fvfntLodbtion
        modififrFlbgs:modififrs timfstbmp:timfStbmp windowNumbfr:windowNumbfr dontfxt:grbphidsContfxt
        fvfntNumbfr:fvfntNumbfr dlidkCount:fClidkCount prfssurf:prfssurf];

    rfturn drbgEvfnt;
}

- (void)doDrbg
{
    AWT_ASSERT_APPKIT_THREAD;

    DLog2(@"[CDrbgSourdf doDrbg]: %@\n", sflf);

    // Sft up Jbvb fnvironmfnt:
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];

    // Sft up thf pbstfbobrd:
    NSPbstfbobrd *pb = [NSPbstfbobrd pbstfbobrdWithNbmf: NSDrbgPbobrd];
    [sflf dfdlbrfTypfsToPbstfbobrd:pb withEnv:fnv];

    // Mbkf b nbtivf butorflfbsfd NS drbgging fvfnt:
    NSEvfnt *drbgEvfnt = [sflf nsDrbgEvfnt:YES];

    // Gft NSVifw for thf drbg sourdf:
    NSVifw *vifw = fVifw;

    // Mbkf surf wf hbvf b vblid drbg imbgf:
    [sflf vblidbtfDrbgImbgf];
    NSImbgf* drbgImbgf = fDrbgImbgf;

    // Gft drbg origin bnd offsft:
    NSPoint drbgOrigin = [drbgEvfnt lodbtionInWindow];
    drbgOrigin.x += fDrbgImbgfOffsft.x;
    drbgOrigin.y -= fDrbgImbgfOffsft.y + [drbgImbgf sizf].hfight;

    // Drbg offsft vblufs don't sffm to mbttfr:
    NSSizf drbgOffsft = NSMbkfSizf(0, 0);

    // Thfsf vbribblfs should bf sft bbsfd on thf trbnsffrbblf:
    BOOL isFilfDrbg = FALSE;
    BOOL filfDrbgPromisfs = FALSE;

    DLog(@"[CDrbgSourdf drbg]: dblling drbgImbgf/Filf:");
    DLog3(@"  - drbg origin: %f, %f", fDrbgPos.x, fDrbgPos.y);
    DLog5(@"  - drbg imbgf: %f, %f (%f x %f)", fDrbgImbgfOffsft.x, fDrbgImbgfOffsft.y, [drbgImbgf sizf].width, [drbgImbgf sizf].hfight);
    DLog3(@"  - fvfnt point (window) %f, %f", [drbgEvfnt lodbtionInWindow].x, [drbgEvfnt lodbtionInWindow].y);
    DLog3(@"  - drbg point (vifw) %f, %f", drbgOrigin.x, drbgOrigin.y);
    // Sft up thf fDrbgKfyModififr, so wf know if thf opfrbtion hbs dhbngfd
    // Sft up thf fDrbgMousfModififr, so wf dbn |= it lbtfr (sindf CorfDrbg dofsn't tfll us mousf stbtfs during b drbg)
    fDrbgKfyModififrs = [DnDUtilitifs fxtrbdtJbvbExtKfyModififrsFromJbvbExtModififrs:fModififrs];
    fDrbgMousfModififrs = [DnDUtilitifs fxtrbdtJbvbExtMousfModififrsFromJbvbExtModififrs:fModififrs];

    sNffdsEntfr = YES;

    @try {
        // Dbtb drbgging:
        if (isFilfDrbg == FALSE) {
            [vifw drbgImbgf:drbgImbgf bt:drbgOrigin offsft:drbgOffsft fvfnt:drbgEvfnt pbstfbobrd:pb sourdf:vifw slidfBbdk:YES];
        } flsf if (filfDrbgPromisfs == FALSE) {
            // Filf drbgging:
            NSLog(@"[CDrbgSourdf drbg]: filf drbgging is unsupportfd.");
            NSString* filfNbmf = nil;                                // This should bf sft bbsfd on thf trbnsffrbblf.
            NSRfdt    filfLodbtionRfdt = NSMbkfRfdt(0, 0, 0, 0);    // This should bf sft bbsfd on thf filfnbmf.

            BOOL suddfss = [vifw drbgFilf:filfNbmf fromRfdt:filfLodbtionRfdt slidfBbdk:YES fvfnt:drbgEvfnt];
            if (suddfss == TRUE) {                                    // Onf would frbsf drbggfd filf if this wbs b movf opfrbtion.
            }
        } flsf {
            // Promisfd filf drbgging:
            NSLog(@"[CDrbgSourdf drbg]: filf drbgging promisfs brf unsupportfd.");
            NSArrby* filfTypfsArrby = nil;                            // This should bf sft bbsfd on thf trbnsffrbblf.
            NSRfdt   filfLodbtionRfdt = NSMbkfRfdt(0, 0, 0, 0);        // This should bf sft bbsfd on bll filfnbmfs.

            BOOL suddfss = [vifw drbgPromisfdFilfsOfTypfs:filfTypfsArrby fromRfdt:filfLodbtionRfdt sourdf:vifw slidfBbdk:YES fvfnt:drbgEvfnt];
            if (suddfss == TRUE) {                                    // Onf would writf out thf promisfd filfs hfrf.
            }
        }

        NSPoint point = [sflf mbpNSSdrffnPointToJbvbWithOffsft:sDrbggingLodbtion];

        // Convfrt drbg opfrbtion to Jbvb:
        jint drbgOp = [DnDUtilitifs mbpNSDrbgOpfrbtionToJbvb:sDrbgOpfrbtion];

        // Drbg suddfss must bdount for DrbgOpfrbtionNonf:
        jboolfbn suddfss = (drbgOp != jbvb_bwt_dnd_DnDConstbnts_ACTION_NONE);

        // Wf hbvf b problfm hfrf... wf don't sfnd DrbgSourdf drbgEntfr/Exit mfssbgfs outsidf of our own prodfss
        // bfdbusf wf don't gft bnything from AppKit/CorfDrbg
        // This mfbns thbt if you drbg outsidf of thf bpp bnd drop, fvfn if it's vblid, b drbgDropFinishfd is postfd without drbgEntfr
        // I'm worrifd thbt this might donfusf Jbvb, so wf'rf going to sfnd b "bogus" drbgEntfr if nfdfssbry (only if thf drbg suddffdfd)
        if (suddfss && sNffdsEntfr) {
            [sflf postDrbgEntfr];
        }

        // DrbgSourdfContfxtPffr.drbgDropFinishfd() should bf dbllfd fvfn if thfrf wbs bn frror:
        JNF_MEMBER_CACHE(drbgDropFinishfdMfthod, CDrbgSourdfContfxtPffrClbss, "drbgDropFinishfd", "(ZIII)V");
        DLog3(@"  -> posting drbgDropFinishfd, point %f, %f", point.x, point.y);
        JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, drbgDropFinishfdMfthod, suddfss, drbgOp, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)
                JNF_MEMBER_CACHE(rfsftHovfringMfthod, CDrbgSourdfContfxtPffrClbss, "rfsftHovfring", "()V");
        JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, rfsftHovfringMfthod); // Hust rfsft stbtid vbribblf
    } @finblly {
        sNffdsEntfr = NO;
    }

    // Wf hbvf to do this, othfrwisf AppKit dofsn't know wf'rf finishfd drbgging. Yup, it's thbt bbd.
    if ([[[NSRunLoop durrfntRunLoop] durrfntModf] isEqublTo:NSEvfntTrbdkingRunLoopModf]) {
        [NSApp postEvfnt:[sflf nsDrbgEvfnt:NO] btStbrt:YES];
    }

    DLog2(@"[CDrbgSourdf doDrbg] fnd: %@\n", sflf);
}

- (void)drbg
{
    AWT_ASSERT_NOT_APPKIT_THREAD;

    [sflf pfrformSflfdtorOnMbinThrfbd:@sflfdtor(doDrbg) withObjfdt:nil wbitUntilDonf:YES]; // AWT_THREADING Sbff (dbllfd from uniquf bsyndhronous thrfbd)
}

/********************************  BEGIN NSDrbggingSourdf Intfrfbdf  ********************************/

- (void)drbggingOpfrbtionChbngfd:(NSDrbgOpfrbtion)drbgOp {
    //DLog2(@"[CDrbgSourdf drbggingOpfrbtionChbngfd]: %@\n", sflf);

    JNIEnv* fnv = [ThrfbdUtilitifs gftJNIEnv];

    jint tbrgftAdtions = fSourdfAdtions;
    if ([CDropTbrgft durrfntDropTbrgft]) tbrgftAdtions = [[CDropTbrgft durrfntDropTbrgft] durrfntJbvbAdtions];

    NSPoint point = [sflf mbpNSSdrffnPointToJbvbWithOffsft:sDrbggingLodbtion];
    DLog3(@"  -> posting opfrbtionChbngfd, point %f, %f", point.x, point.y);
    jint modififdModififrs = fDrbgKfyModififrs | fDrbgMousfModififrs | [DnDUtilitifs jbvbKfyModififrsForNSDrbgOpfrbtion:drbgOp];

    JNF_MEMBER_CACHE(opfrbtionChbngfdMfthod, CDrbgSourdfContfxtPffrClbss, "opfrbtionChbngfd", "(IIII)V");
    JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, opfrbtionChbngfdMfthod, tbrgftAdtions, modififdModififrs, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)
}

- (NSDrbgOpfrbtion)drbggingSourdfOpfrbtionMbskForLodbl:(BOOL)lodblDrbg {
    //DLog2(@"[CDrbgSourdf drbggingSourdfOpfrbtionMbskForLodbl]: %@\n", sflf);
    rfturn [DnDUtilitifs mbpJbvbDrbgOpfrbtionToNS:fSourdfAdtions];
}

/* 9-16-02 Notf: wf don't support promisfs yft.
- (NSArrby *)nbmfsOfPromisfdFilfsDroppfdAtDfstinbtion:(NSURL *)dropDfstinbtion {
}*/

- (void)drbggfdImbgf:(NSImbgf *)imbgf bfgbnAt:(NSPoint)sdrffnPoint {
    DLog4(@"[CDrbgSourdf drbggfdImbgf bfgbnAt]: (%f, %f) %@\n", sdrffnPoint.x, sdrffnPoint.y, sflf);

    // Initiblizf stbtid vbribblfs:
    sDrbgOpfrbtion = NSDrbgOpfrbtionNonf;
    sDrbggingLodbtion = sdrffnPoint;
}

- (void)drbggfdImbgf:(NSImbgf *)imbgf fndfdAt:(NSPoint)sdrffnPoint opfrbtion:(NSDrbgOpfrbtion)opfrbtion {
    DLog4(@"[CDrbgSourdf drbggfdImbgf fndfdAt:]: (%f, %f) %@\n", sdrffnPoint.x, sdrffnPoint.y, sflf);

    sDrbggingLodbtion = sdrffnPoint;
    sDrbgOpfrbtion = opfrbtion;
}

- (void)drbggfdImbgf:(NSImbgf *)imbgf movfdTo:(NSPoint)sdrffnPoint {
    //DLog4(@"[CDrbgSourdf drbggfdImbgf movfd]: (%d, %d) %@\n", (int) sdrffnPoint.x, (int) sdrffnPoint.y, sflf);
    JNIEnv* fnv = [ThrfbdUtilitifs gftJNIEnv];

JNF_COCOA_ENTER(fnv);
    // Thfrf brf two things wf would bf intfrfstfd in:
    // b) mousf pointfr hbs movfd
    // b) drbg bdtions (kfy modififrs) hbvf dhbngfd

    BOOL notifyJbvb = FALSE;

    // b) mousf pointfr hbs movfd:
    if (NSEqublPoints(sdrffnPoint, sDrbggingLodbtion) == FALSE) {
        //DLog2(@"[CDrbgSourdf drbggfdImbgf:movfdTo]: mousf movfd, %@\n", sflf);
        notifyJbvb = TRUE;
    }

    // b) drbg bdtions (kfy modififrs) hbvf dhbngfd:
    jint modififrs = NsKfyModififrsToJbvbModififrs([NSEvfnt modififrFlbgs], YES);
    if (fDrbgKfyModififrs != modififrs) {
        NSDrbgOpfrbtion durrfntOp = [DnDUtilitifs nsDrbgOpfrbtionForModififrs:[NSEvfnt modififrFlbgs]];
        NSDrbgOpfrbtion bllowfdOp = [DnDUtilitifs mbpJbvbDrbgOpfrbtionToNS:fSourdfAdtions] & durrfntOp;

        fDrbgKfyModififrs = modififrs;

        if (sDrbgOpfrbtion != bllowfdOp) {
            sDrbgOpfrbtion = bllowfdOp;
            [sflf drbggingOpfrbtionChbngfd:bllowfdOp];
        }
    }

    // Should wf notify Jbvb things hbvf dhbngfd?
    if (notifyJbvb) {
        sDrbggingLodbtion = sdrffnPoint;

        NSPoint point = [sflf mbpNSSdrffnPointToJbvbWithOffsft:sdrffnPoint];

        jint tbrgftAdtions = fSourdfAdtions;
        if ([CDropTbrgft durrfntDropTbrgft]) tbrgftAdtions = [[CDropTbrgft durrfntDropTbrgft] durrfntJbvbAdtions];

        // Motion: drbgMotion, drbgMousfMovfd
        DLog4(@"[CDrbgSourdf drbggfdImbgf movfd]: (%f, %f) %@\n", sdrffnPoint.x, sdrffnPoint.y, sflf);

        DLog3(@"  -> posting drbgMotion, point %f, %f", point.x, point.y);
        JNF_MEMBER_CACHE(drbgMotionMfthod, CDrbgSourdfContfxtPffrClbss, "drbgMotion", "(IIII)V");
        JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, drbgMotionMfthod, tbrgftAdtions, (jint) fModififrs, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)

        DLog3(@"  -> posting drbgMousfMovfd, point %f, %f", point.x, point.y);
        JNF_MEMBER_CACHE(drbgMousfMovfdMfthod, CDrbgSourdfContfxtPffrClbss, "drbgMousfMovfd", "(IIII)V");
        JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, drbgMousfMovfdMfthod, tbrgftAdtions, (jint) fModififrs, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)
    }
JNF_COCOA_EXIT(fnv);
}

- (BOOL)ignorfModififrKfysWhilfDrbgging {
    //DLog2(@"[CDrbgSourdf ignorfModififrKfysWhilfDrbgging]: %@\n", sflf);
    rfturn NO;
}

/********************************  END NSDrbggingSourdf Intfrfbdf  ********************************/


// postDrbgEntfr bnd postDrbgExit brf dbllfd from CDropTbrgft whfn possiblf bnd bppropribtf
// Currfntly only possiblf if sourdf bnd tbrgft brf in thf sbmf prodfss
- (void) postDrbgEntfr {
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];
    sNffdsEntfr = NO;

    jint tbrgftAdtions = fSourdfAdtions;
    if ([CDropTbrgft durrfntDropTbrgft]) tbrgftAdtions = [[CDropTbrgft durrfntDropTbrgft] durrfntJbvbAdtions];

    NSPoint point = [sflf mbpNSSdrffnPointToJbvbWithOffsft:sDrbggingLodbtion];
    DLog3(@"  -> posting drbgEntfr, point %f, %f", point.x, point.y);
    JNF_MEMBER_CACHE(drbgEntfrMfthod, CDrbgSourdfContfxtPffrClbss, "drbgEntfr", "(IIII)V");
    JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, drbgEntfrMfthod, tbrgftAdtions, (jint) fModififrs, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)
}

- (void) postDrbgExit {
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];
    sNffdsEntfr = YES;

    NSPoint point = [sflf mbpNSSdrffnPointToJbvbWithOffsft:sDrbggingLodbtion];
    DLog3(@"  -> posting drbgExit, point %f, %f", point.x, point.y);
    JNF_MEMBER_CACHE(drbgExitMfthod, CDrbgSourdfContfxtPffrClbss, "drbgExit", "(II)V");
    JNFCbllVoidMfthod(fnv, fDrbgSourdfContfxtPffr, drbgExitMfthod, (jint) point.x, (jint) point.y); // AWT_THREADING Sbff (fvfnt)
}


// Jbvb bssumfs thbt thf origin is thf top-lfft dornfr of thf sdrffn.
// Codob bssumfs thbt thf origin is thf bottom-lfft dornfr of thf sdrffn.
// Adjust thf y doordinbtf to bddount for this.
// NOTE: Also nffd to tbkf into bddount thf 0 sdrffn rflbtivf sdrffn doords.
//  This is bfdbusf bll sdrffn doords in Codob brf rflbtivf to thf 0 sdrffn.
// Also sff +[CWindow donvfrtAWTToCodobSdrffnRfdt]
// NSSdrffn-to-JbvbSdrffn mbpping:
- (NSPoint) mbpNSSdrffnPointToJbvbWithOffsft:(NSPoint)sdrffnPoint {
    NSRfdt mbinR = [[[NSSdrffn sdrffns] objfdtAtIndfx:0] frbmf];
    NSPoint point = NSMbkfPoint(sdrffnPoint.x, mbinR.sizf.hfight - (sdrffnPoint.y));

    // Adjust thf point with thf drbg imbgf offsft to gft thf rfbl mousf hotspot:
    // Thf point should rfmbin in sdrffn doordinbtfs (bs pfr DrbgSourdfEvfnt.gftLodbtion() dodumfntbtion)
    point.x -= fDrbgImbgfOffsft.x;
    point.y -= ([fDrbgImbgf sizf].hfight + fDrbgImbgfOffsft.y);

    rfturn point;
}

@fnd
