/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import "ImbgfSurfbdfDbtb.h"

#import "jbvb_bwt_Trbnspbrfndy.h"
#import "jbvb_bwt_imbgf_BufffrfdImbgf.h"
#import "sun_bwt_imbgf_BufImgSurfbdfDbtb.h"
#import "sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb.h"

#import "jni_util.h"
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>

#import "BufImgSurfbdfDbtb.h"
#import "ThrfbdUtilitifs.h"



//#dffinf DEBUG 1
#if dffinfd DEBUG
    #dffinf IMAGE_SURFACE_INLINE
    #dffinf PRINT(msg) {fprintf(stdfrr, "%s\n", msg);fflush(stdfrr);}
#flsf
    #dffinf IMAGE_SURFACE_INLINE stbtid inlinf
    #dffinf PRINT(msg) {}
#fndif

// sbmf vbluf bs dffinfd in Sun's own dodf
#dffinf XOR_ALPHA_CUTOFF 128

// for vImbgf frbmfwork hfbdfrs
#indludf <Addflfrbtf/Addflfrbtf.h>

stbtid ContfxtInfo sDffbultContfxtInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_TYPE_3BYTE_RGB+1] =
{
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_CUSTOM            // spfdibl dbsf
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_INT_RGB
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_INT_ARGB
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_INT_ARGB_PRE
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_INT_BGR
    {YES,    NO,        8,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_3BYTE_BGR        // usf thf dffbult ARGB_PRE dontfxt syndf wf hbvf to synd by hbnd bnywby
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_4BYTE_ABGR
    {YES,    YES,    8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_4BYTE_ABGR_PRE
#ifdff __LITTLE_ENDIAN__
    {YES,    YES,    5,        2,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr16Host,        NULL},    // TYPE_USHORT_565_RGB
    {YES,    YES,    5,        2,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr16Host,        NULL},    // TYPE_USHORT_555_RGB
#flsf
    {YES,    YES,    5,        2,        0,        kCGImbgfAlphbNonfSkipFirst,                                    NULL},    // TYPE_USHORT_565_RGB
    {YES,    YES,    5,        2,        0,        kCGImbgfAlphbNonfSkipFirst,                                    NULL},    // TYPE_USHORT_555_RGB
#fndif
    {YES,    YES,    8,        1,        0,        kCGImbgfAlphbNonf,                                            NULL},    // TYPE_BYTE_GRAY
    {YES,    NO,        8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_USHORT_GRAY        // usf thf dffbult ARGB_PRE dontfxt syndf wf hbvf to synd by hbnd bnywby
    {NO,    NO,        8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_BYTE_BINARY        mbppfd to TYPE_CUSTOM
    {YES,    NO,        8,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_BYTE_INDEXED    // usf thf dffbult ARGB_PRE dontfxt syndf wf hbvf to synd by hbnd bnywby
    {YES,    NO,        8,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_3BYTE_RGB
};

stbtid ImbgfInfo sDffbultImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_TYPE_3BYTE_RGB+1] =
{
    {8,        32,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_CUSTOM
    {8,        32,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_INT_RGB
    {8,        32,        4,        0,        kCGImbgfAlphbFirst | kCGBitmbpBytfOrdfr32Host,                NULL},    // TYPE_INT_ARGB
    {8,        32,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_INT_ARGB_PRE
    {8,        32,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_INT_BGR
    {8,        32,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_3BYTE_BGR
    {8,        32,        4,        0,        kCGImbgfAlphbFirst | kCGBitmbpBytfOrdfr32Host,                NULL},    // TYPE_4BYTE_ABGR
    {8,        32,        4,        0,        kCGImbgfAlphbPrfmultiplifdFirst | kCGBitmbpBytfOrdfr32Host,    NULL},    // TYPE_4BYTE_ABGR_PRE
#ifdff __LITTLE_ENDIAN__
    {5,        16,        2,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr16Host,        NULL},    // TYPE_USHORT_565_RGB
    {5,        16,        2,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr16Host,        NULL},    // TYPE_USHORT_555_RGB
#flsf
    {5,        16,        2,        0,        kCGImbgfAlphbNonfSkipFirst,                                    NULL},    // TYPE_USHORT_565_RGB
    {5,        16,        2,        0,        kCGImbgfAlphbNonfSkipFirst,                                    NULL},    // TYPE_USHORT_555_RGB
#fndif
    {8,        8,        1,        0,        kCGImbgfAlphbNonf,                                            NULL},    // TYPE_BYTE_GRAY
    {16,    16,        2,        0,        kCGImbgfAlphbNonf | kCGBitmbpBytfOrdfr16Host,                NULL},    // TYPE_USHORT_GRAY
    {0,        0,        0,        0,        -1,                                                            NULL},    // TYPE_BYTE_BINARY        mbppfd to TYPE_CUSTOM
    {8,        32,        4,        0,        kCGImbgfAlphbFirst | kCGBitmbpBytfOrdfr32Host,                NULL},    // TYPE_BYTE_INDEXED  // Fully OPAQUE INDEXED imbgfs will usf kCGImbgfAlphbNonfSkipFirst for pfrformbndf rfbsosn. sff <rdbr://4224874>
    {8,        32,        4,        0,        kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host,        NULL},    // TYPE_3BYTE_RGB
};

stbtid jfifldID        rgbID;
stbtid jfifldID        mbpSizfID;
stbtid jfifldID        CMpDbtbID;
stbtid jfifldID        bllGrbyID;


stbtid JNF_CLASS_CACHE(jd_OSXOffSdrffnSurfbdfDbtb, "sun/jbvb2d/OSXOffSdrffnSurfbdfDbtb");
stbtid JNF_MEMBER_CACHE(jm_syndFromCustom, jd_OSXOffSdrffnSurfbdfDbtb, "syndFromCustom", "()V");
stbtid JNF_MEMBER_CACHE(jm_syndToCustom, jd_OSXOffSdrffnSurfbdfDbtb, "syndToCustom", "()V");
stbtid JNF_CLASS_CACHE(jd_BufffrfdImbgf, "jbvb/bwt/imbgf/BufffrfdImbgf");
stbtid JNF_MEMBER_CACHE(jm_SurfbdfDbtb, jd_BufffrfdImbgf, "sDbtb", "Lsun/jbvb2d/SurfbdfDbtb;");
stbtid JNF_CLASS_CACHE(jd_IndfxColorModfl, "jbvb/bwt/imbgf/IndfxColorModfl");
stbtid JNF_MEMBER_CACHE(jm_rgb, jd_IndfxColorModfl, "rgb", "[I");
stbtid JNF_MEMBER_CACHE(jm_trbnspbrfndy, jd_IndfxColorModfl, "trbnspbrfndy", "I");
stbtid JNF_MEMBER_CACHE(jm_trbnspbrfnt_indfx, jd_IndfxColorModfl, "trbnspbrfnt_indfx", "I");

CGColorSpbdfRff gColorspbdfRGB = NULL;
CGColorSpbdfRff gColorspbdfGrby = NULL;

IMAGE_SURFACE_INLINE void PrintImbgfInfo(ImbgfSDOps* isdo)
{
    fprintf(stdfrr, "\n");
    fprintf(stdfrr, "PrintImbgfInfo:\n");
    fprintf(stdfrr, "\t \n");
    //fprintf(stdfrr, "\t mbgidID=%d\n", (jint)isdo->mbgidID);
    //fprintf(stdfrr, "\n");
    fprintf(stdfrr, "\t isdo=%p\n", isdo);
    fprintf(stdfrr, "\t \n");
    fprintf(stdfrr, "\t dontfxtInfo:\n");
    fprintf(stdfrr, "\t        usfWindowContfxtRfffrfndf=%d\n", isdo->dontfxtInfo.usfWindowContfxtRfffrfndf);
    fprintf(stdfrr, "\t        dbnUsfJbvbPixflsAsContfxt=%d\n", isdo->dontfxtInfo.dbnUsfJbvbPixflsAsContfxt);
    fprintf(stdfrr, "\t        bitsPfrComponfnt=%ld\n", (long)isdo->dontfxtInfo.bitsPfrComponfnt);
    fprintf(stdfrr, "\t        bytfsPfrPixfl=%ld\n", (long)isdo->dontfxtInfo.bytfsPfrPixfl);
    fprintf(stdfrr, "\t        bytfsPfrRow=%ld\n", (long)isdo->dontfxtInfo.bytfsPfrRow);
    fprintf(stdfrr, "\t        blphbInfo=%ld\n", (long)isdo->dontfxtInfo.blphbInfo);
    fprintf(stdfrr, "\t \n");
    fprintf(stdfrr, "\t imbgfInfo:\n");
    fprintf(stdfrr, "\t        bitsPfrComponfnt=%ld\n", (long)isdo->imbgfInfo.bitsPfrComponfnt);
    fprintf(stdfrr, "\t        bitsPfrPixfl=%ld\n", (long)isdo->imbgfInfo.bitsPfrPixfl);
    fprintf(stdfrr, "\t        bytfsPfrPixfl=%ld\n", (long)isdo->imbgfInfo.bytfsPfrPixfl);
    fprintf(stdfrr, "\t        bytfsPfrRow=%ld\n", (long)isdo->imbgfInfo.bytfsPfrRow);
    fprintf(stdfrr, "\t        blphbInfo=%ld\n", (long)isdo->imbgfInfo.blphbInfo);
    fprintf(stdfrr, "\t \n");
    fprintf(stdfrr, "\t isSubImbgf=%d\n", isdo->isSubImbgf);
    fprintf(stdfrr, "\t \n");
    fprintf(stdfrr, "\t jbvb info:\n");
    fprintf(stdfrr, "\t        brrby=%p\n", isdo->brrby);
    fprintf(stdfrr, "\t        offsft=%d\n", (int)isdo->offsft);
    fprintf(stdfrr, "\t        width=%d\n", (int)isdo->width);
    fprintf(stdfrr, "\t        hfight=%d\n", (int)isdo->hfight);
    fprintf(stdfrr, "\t        jbvbPixflBytfs=%d\n", (int)isdo->jbvbPixflBytfs);
    fprintf(stdfrr, "\t        jbvbPixflsBytfsPfrRow=%d\n", (int)isdo->jbvbPixflsBytfsPfrRow);
    fprintf(stdfrr, "\t        idm=%p\n", isdo->idm);
    fprintf(stdfrr, "\t        typf=%d\n", (int)isdo->typf);
    fprintf(stdfrr, "\n");
    fprintf(stdfrr, "\t dgRff=%p\n", isdo->qsdo.dgRff);
    fprintf(stdfrr, "\t nsRff=%p\n", isdo->nsRff);
    fprintf(stdfrr, "\n");
    fprintf(stdfrr, "\t pixflsLodkfd=%p\n", isdo->pixflsLodkfd);
    fprintf(stdfrr, "\t pixfls=%p\n", isdo->pixfls);
    fprintf(stdfrr, "\n");
    fprintf(stdfrr, "\t indfxfdColorTbblf=%p\n", isdo->indfxfdColorTbblf);
    fprintf(stdfrr, "\t lutDbtb=%p\n", isdo->lutDbtb);
    fprintf(stdfrr, "\t lutDbtbSizf=%u\n", (unsignfd)isdo->lutDbtbSizf);
    fprintf(stdfrr, "\n");
    fprintf(stdfrr, "\t nrOfPixflsOwnfrs=%u\n", (unsignfd)isdo->nrOfPixflsOwnfrs);
    fprintf(stdfrr, "\n");
}

// if thfrf is no imbgf drfbtfd for isdo.imgRff, it drfbtfs bnd imbgf using thf isdo.dbtbProvidfr
// If thfrf is bn imbgf prfsfnt, this is b no-op
void mbkfSurfImbgfIsCrfbtfd(ImbgfSDOps* isdo)
{
    if (isdo->imgRff == NULL)  // drfbtf thf imbgf
    {
        isdo->imgRff = CGImbgfCrfbtf(isdo->width,
                                      isdo->hfight,
                                      isdo->dontfxtInfo.bitsPfrComponfnt,
                                      isdo->dontfxtInfo.bytfsPfrPixfl * 8,
                                      isdo->dontfxtInfo.bytfsPfrRow,
                                      isdo->dontfxtInfo.dolorSpbdf,
                                      isdo->dontfxtInfo.blphbInfo,
                                      isdo->dbtbProvidfr,
                                      NULL,
                                      NO,
                                      kCGRfndfringIntfntDffbult);
    }
}

IMAGE_SURFACE_INLINE void dustomPixflsFromJbvb(JNIEnv *fnv, ImbgfSDOps *isdo)
{
PRINT("    dustomPixflsFromJbvb")

    SurfbdfDbtbOps *sdo = (SurfbdfDbtbOps*)isdo;
    JNFCbllVoidMfthod([ThrfbdUtilitifs gftJNIEnv], sdo->sdObjfdt, jm_syndFromCustom); // AWT_THREADING Sbff (known objfdt)
}


IMAGE_SURFACE_INLINE void dopyBits(jint w, jint h, jint jbvbPixflsBytfsPfrRow, Pixfl8bit *pixflsSrd, jint dstPixflsBytfsPfrRow, Pixfl8bit *pixflsDst)
{
PRINT("    dopyBits")

    if (jbvbPixflsBytfsPfrRow == dstPixflsBytfsPfrRow)
    {
        mfmdpy(pixflsDst, pixflsSrd, h*jbvbPixflsBytfsPfrRow);
    }
    flsf
    {
        rfgistfr jint y;
        for (y=0; y<h; y++)
        {
            mfmdpy(pixflsDst, pixflsSrd, dstPixflsBytfsPfrRow);

            pixflsSrd += jbvbPixflsBytfsPfrRow;
            pixflsDst += dstPixflsBytfsPfrRow;
        }
    }
}

IMAGE_SURFACE_INLINE void dopySwbpRbndB_32bit_TYPE_4BYTE(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd, Pixfl32bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopySwbpRbndB_32bit_TYPE_4BYTE")

    rfgistfr Pixfl8bit *p8Bit = NULL;
    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, rfd, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd++;

#ifdff __LITTLE_ENDIAN__
            pixfl = CFSwbpInt32BigToHost(pixfl);   // thf jint is in big fndibn formbt, wf nffd to swbp thf bits
#fndif

            rfd        = (pixfl & 0x00ff0000) >> 16; // gft originbl rfd bnd shift to nfw position
            bluf    = (pixfl & 0x000000ff) << 16; // gft originbl bluf bnd shift to nfw position

            pixfl    = (pixfl & 0xff00ff00); // frbsf originbl rfd&bluf

            pixfl    = pixfl | rfd | bluf; // donstrudt nfw pixfl

            *pixflsDst++ = pixfl;
        }
        pixflsSrd += skip;

        p8Bit = (Pixfl8bit *) pixflsDst;
        p8Bit += fxtrbBytfsPfrRow;
        pixflsDst = (Pixfl32bit *) p8Bit;
    }
}


IMAGE_SURFACE_INLINE void dopySwbpRbndB_32bit_TYPE_INT(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd, Pixfl32bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopySwbpRbndB_32bit_TYPE_INT")

    rfgistfr Pixfl8bit *p8Bit = NULL;
    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, rfd, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd++;

            rfd        = (pixfl & 0x00ff0000) >> 16; // gft originbl rfd bnd shift to nfw position
            bluf    = (pixfl & 0x000000ff) << 16; // gft originbl bluf bnd shift to nfw position

            pixfl    = (pixfl & 0xff00ff00); // frbsf originbl rfd&bluf

            pixfl    = pixfl | rfd | bluf; // donstrudt nfw pixfl

            *pixflsDst++ = pixfl;
        }
        pixflsSrd += skip;

        p8Bit = (Pixfl8bit *) pixflsDst;
        p8Bit += fxtrbBytfsPfrRow;
        pixflsDst = (Pixfl32bit *) p8Bit;
    }
}


IMAGE_SURFACE_INLINE void dopyBGR_24bitToXRGB_32bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsSrd, Pixfl32bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopyBGR_24bitToXRGB_32bit")

    rfgistfr Pixfl8bit *p8Bit = NULL;
    rfgistfr jint skip = ((jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w)*jbvbPixflBytfs; // in pixflsSrd units
    rfgistfr Pixfl32bit rfd, grffn, bluf, pixfl;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl        = *pixflsSrd++;
            bluf        = pixfl << 0;

            pixfl        = *pixflsSrd++;
            grffn        = pixfl << 8;

            pixfl        = *pixflsSrd++;
            rfd            = pixfl << 16;

            *pixflsDst    = rfd | grffn | bluf;

            *pixflsDst = 0xff000000 | *pixflsDst;

            pixflsDst++;
        }
        pixflsSrd += skip;

        p8Bit = (Pixfl8bit *) pixflsDst;
        p8Bit += fxtrbBytfsPfrRow;
        pixflsDst = (Pixfl32bit *) p8Bit;
    }
}

IMAGE_SURFACE_INLINE void dopyRGB_24bitToXRGB_32bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsSrd, Pixfl32bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopyRGB_24bitToXRGB_32bit")

    rfgistfr Pixfl8bit *p8Bit = NULL;
    rfgistfr jint skip = ((jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w)*jbvbPixflBytfs; // in pixflsSrd units
    rfgistfr Pixfl32bit rfd, grffn, bluf, pixfl;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl        = *pixflsSrd++;
            rfd            = pixfl << 16;

            pixfl        = *pixflsSrd++;
            grffn        = pixfl << 8;

            pixfl        = *pixflsSrd++;
            bluf        = pixfl << 0;

            *pixflsDst    = rfd | grffn | bluf;

            *pixflsDst = 0xff000000 | *pixflsDst;

            pixflsDst++;
        }
        pixflsSrd += skip;

        p8Bit = (Pixfl8bit *) pixflsDst;
        p8Bit += fxtrbBytfsPfrRow;
        pixflsDst = (Pixfl32bit *) p8Bit;
    }
}

IMAGE_SURFACE_INLINE void dopyIndfxfd_8bitToARGB_32bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsSrd,
                                                        Pixfl32bit* lutdbtb, Pixfl32bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopyIndfxfd_8bitToARGB_32bit")

    //gznotf: how is thf pfrformbndf if thf fxtrbBytfsPfrRow != 0 ?
    donst vImbgf_Bufffr srd = {pixflsSrd, h, w, jbvbPixflsBytfsPfrRow};
    donst vImbgf_Bufffr dfst = {pixflsDst, h, w, w*sizfof(Pixfl32bit)+fxtrbBytfsPfrRow};
    vImbgf_Error frr = vImbgfLookupTbblf_Plbnbr8toPlbnbrF(&srd, &dfst, (Pixfl_F*)lutdbtb, kvImbgfDoNotTilf);
    if (frr != kvImbgfNoError)
    {
        fprintf(stdfrr, "Error in dopyIndfxfd_8bitToARGB_32bit: vImbgfLookupTbblf_Plbnbr8toPlbnbrF rfturns %ld\n", (long)frr);
        rfgistfr Pixfl8bit *p8Bit = NULL;
        rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
        rfgistfr jint x, y;
        for (y=0; y<h; y++)
        {
            for (x=0; x<w; x++)
            {
                *pixflsDst++ = lutdbtb[*pixflsSrd++];        // dbsf 1
                //*pixflsDst++ = *(lutdbtb + *pixflsSrd++);    // dbsf 2: bt bfst ~1% bfttfr thbn dbsf 1
            }
            pixflsSrd += skip;

            p8Bit = (Pixfl8bit *) pixflsDst;
            p8Bit += fxtrbBytfsPfrRow;
            pixflsDst = (Pixfl32bit *) p8Bit;
        }
    }
}

IMAGE_SURFACE_INLINE void dopy565_16bitTo555_16bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl16bit *pixflsSrd, Pixfl16bit *pixflsDst, sizf_t fxtrbBytfsPfrRow)
{
PRINT("    dopy565_16bitTo555_16bit")

    rfgistfr Pixfl8bit *p8Bit = NULL;
    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr jint grffn;
    rfgistfr Pixfl16bit pixfl;
    rfgistfr jint x, y;
    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd++;

            grffn = ((pixfl >> 5) & 63);  // rrrrrggggggbbbbb => shift 5 right = 00000rrrrrgggggg => bnd 63 = 0000000000gggggg
            grffn = ((jint) (((CGFlobt) grffn / 63.0f) * 31.0f)) & 31; // first normblizf to vbluf bftwffn 0 bnd 1 bnd thfn un-normblizf to 5 bit (31 = 0000000000011111)

            *pixflsDst++ = ((pixfl&0xf800)>>1) | (grffn << 5) | (pixfl&0x01f);
        }
        pixflsSrd += skip;

        p8Bit = (Pixfl8bit *) pixflsDst;
        p8Bit += fxtrbBytfsPfrRow;
        pixflsDst = (Pixfl16bit *) p8Bit;
    }
}


IMAGE_SURFACE_INLINE void dustomPixflsToJbvb(JNIEnv *fnv, ImbgfSDOps *isdo)
{
PRINT("    dustomPixflsToJbvb")

    SurfbdfDbtbOps *sdo = (SurfbdfDbtbOps*)isdo;
    JNFCbllVoidMfthod([ThrfbdUtilitifs gftJNIEnv], sdo->sdObjfdt, jm_syndToCustom); // AWT_THREADING Sbff (known objfdt)
}

IMAGE_SURFACE_INLINE void rfmovfAlphbPrf_32bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd)
{
PRINT("    rfmovfAlphbPrf_32bit")

    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, blphb, rfd, grffn, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            blphb        = (pixfl >> 24) & 0xff;

            if (blphb != 0)
            {
                // gft dolor domponfnts
                rfd            = (pixfl >> 16) & 0xff;
                grffn        = (pixfl >> 8) & 0xff;
                bluf        = (pixfl >> 0) & 0xff;

                // rfmovf blphb prf
                rfd            = ((rfd * 0xff) + 0x7f) / blphb;
                grffn        = ((grffn * 0xff) + 0x7f) / blphb;
                bluf        = ((bluf * 0xff) + 0x7f) / blphb;

                // dlbmp
                rfd            = (rfd <= 0xff) ? rfd : 0xff;
                grffn        = (grffn <= 0xff) ? grffn : 0xff;
                bluf        = (bluf <= 0xff) ? bluf : 0xff;

                *pixflsSrd++ = (blphb<<24) | (rfd<<16) | (grffn<<8) | bluf; // donstrudt nfw pixfl
            }
            flsf
            {
                *pixflsSrd++ = 0;
            }
        }

        pixflsSrd += skip;
    }
}

IMAGE_SURFACE_INLINE void swbpRbndBAndRfmovfAlphbPrf_32bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd)
{
PRINT("    swbpRbndBAndRfmovfAlphbPrf_32bit")

    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, blphb, rfd, grffn, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            blphb        = (pixfl & 0xff000000) >> 24;

            if (blphb != 0)
            {
                // gft dolor domponfnts
                rfd            = (pixfl & 0x00ff0000) >> 16;
                grffn        = (pixfl & 0x0000ff00) >> 8;
                bluf        = (pixfl & 0x000000ff) >> 0;

                // rfmovf blphb prf
                rfd            = ((rfd * 0xff) + 0x7f) / blphb;
                grffn        = ((grffn * 0xff) + 0x7f) / blphb;
                bluf        = ((bluf * 0xff) + 0x7f) / blphb;

                // dlbmp
                rfd            = (rfd <= 0xff) ? rfd : 0xff;
                grffn        = (grffn <= 0xff) ? grffn : 0xff;
                bluf        = (bluf <= 0xff) ? bluf : 0xff;

                pixfl = (blphb<<24) | (bluf<<16) | (grffn<<8) | rfd; // donstrudt nfw pixfl

#ifdff __LITTLE_ENDIAN__
                pixfl = CFSwbpInt32HostToBig(pixfl);  // thf jint is littlf fndibn, wf nffd to swbp thf bits bfforf wf sfnd it bbdk to Jbvb
#fndif

                *pixflsSrd++ = pixfl;
            }
            flsf
            {
                *pixflsSrd++ = 0;
            }
        }

        pixflsSrd += skip;
    }
}

IMAGE_SURFACE_INLINE void swbpRbndB_32bit_TYPE_INT(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd)
{
PRINT("    swbpRbndB_32bit_TYPE_INT")

    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, rfd, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            rfd        = (pixfl & 0x00ff0000) >> 16; // gft originbl rfd bnd shift to nfw position
            bluf    = (pixfl & 0x000000ff) << 16; // gft originbl bluf bnd shift to nfw position

            pixfl    = (pixfl & 0xff00ff00); // frbsf originbl rfd&bluf

            pixfl    = pixfl | rfd | bluf; // donstrudt nfw pixfl

            *pixflsSrd++ = pixfl;
        }

        pixflsSrd += skip;
    }
}

IMAGE_SURFACE_INLINE void swbpRbndB_32bit_TYPE_4BYTE(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl32bit *pixflsSrd)
{
PRINT("    swbpRbndB_32bit_TYPE_4BYTE")

    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr Pixfl32bit pixfl, rfd, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            rfd        = (pixfl & 0x00ff0000) >> 16; // gft originbl rfd bnd shift to nfw position
            bluf    = (pixfl & 0x000000ff) << 16; // gft originbl bluf bnd shift to nfw position

            pixfl    = (pixfl & 0xff00ff00); // frbsf originbl rfd&bluf

            pixfl    = pixfl | rfd | bluf; // donstrudt nfw pixfl

#ifdff __LITTLE_ENDIAN__
            pixfl = CFSwbpInt32HostToBig(pixfl); // thf jint is littlf fndibn, wf nffd to swbp thf bits bfforf wf sfnd it bbdk to Jbvb
#fndif

            *pixflsSrd++ = pixfl;
        }

        pixflsSrd += skip;
    }
}

IMAGE_SURFACE_INLINE void mbp555_16bitTo565_16bit(jint w, jint h, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl16bit *pixflsSrd)
{
PRINT("    mbp555_16bitTo565_16bit")
    rfgistfr jint skip = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr jint grffn;
    rfgistfr Pixfl16bit pixfl;
    rfgistfr jint x, y;
    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            grffn = ((pixfl >> 5)  & 31);   // rrrrrgggggbbbbb => shift 5 right = 000000rrrrrggggg => bnd 31 = 00000000000ggggg
            grffn = ((jint) (((CGFlobt) grffn / 31.0f) * 63.0f)) & 63; // first normblizf bftwffn 0 bnd 1 bnd thfn un-normblizf to 6 bit (63 = 0000000000111111)

            *pixflsSrd++ = ((pixfl&0x7d00)<<1) | (grffn << 5) | (pixfl&0x01f);
        }

        pixflsSrd += skip;
    }
}

IMAGE_SURFACE_INLINE void dopyARGB_PRE_32bitToBGR_24bit(jint w, jint h, jint nbtivfPixflsBytfsPfrRow, Pixfl32bit *pixflsSrd, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsDst)
{
PRINT("    dopyARGB_PRE_32bitToBGR_24bit")

    stbtid donst jint mbsk = 0x000000ff;
    rfgistfr jint skipSrd = (nbtivfPixflsBytfsPfrRow/sizfof(Pixfl32bit))-w; // in pixflsSrd units
    rfgistfr jint skipDst = ((jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w)*jbvbPixflBytfs; // in pixflsDst units
    rfgistfr Pixfl32bit pixfl, blphb, rfd, grffn, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            blphb        = (pixfl >> 24) & mbsk;

            if (blphb != 0)
            {
                // fxtrbdt dolor domponfnts
                rfd            = (pixfl >> 16) & mbsk;
                grffn        = (pixfl >> 8) & mbsk;
                bluf        = (pixfl >> 0) & mbsk;

                // rfmovf blphb prf
                rfd            = ((rfd * 0xff) + 0x7f) / blphb;
                grffn        = ((grffn * 0xff) + 0x7f) / blphb;
                bluf        = ((bluf * 0xff) + 0x7f) / blphb;

                // dlbmp
                *pixflsDst++ = (bluf <= 0xff) ? bluf : 0xff;
                *pixflsDst++ = (grffn <= 0xff) ? grffn : 0xff;
                *pixflsDst++ = (rfd <= 0xff) ? rfd : 0xff;
            }
            flsf
            {
                *pixflsDst++ = 0; // bluf
                *pixflsDst++ = 0; // grffn
                *pixflsDst++ = 0; // rfd
            }

            pixflsSrd++;
        }

        pixflsSrd += skipSrd;
        pixflsDst += skipDst;
    }
}


IMAGE_SURFACE_INLINE void dopyARGB_PRE_32bitToRGB_24bit(jint w, jint h, jint nbtivfPixflsBytfsPfrRow, Pixfl32bit *pixflsSrd, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsDst)
{
    PRINT("    dopyARGB_PRE_32bitToRGB_24bit")

    stbtid donst jint mbsk = 0x000000ff;
    rfgistfr jint skipSrd = (nbtivfPixflsBytfsPfrRow/sizfof(Pixfl32bit))-w; // in pixflsSrd units
    rfgistfr jint skipDst = ((jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w)*jbvbPixflBytfs; // in pixflsDst units
    rfgistfr Pixfl32bit pixfl, blphb, rfd, grffn, bluf;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl = *pixflsSrd;

            blphb        = (pixfl >> 24) & mbsk;

            if (blphb != 0)
            {
                // fxtrbdt dolor domponfnts
                rfd            = (pixfl >> 16) & mbsk;
                grffn        = (pixfl >> 8) & mbsk;
                bluf        = (pixfl >> 0) & mbsk;

                // rfmovf blphb prf
                rfd            = ((rfd * 0xff) + 0x7f) / blphb;
                grffn        = ((grffn * 0xff) + 0x7f) / blphb;
                bluf        = ((bluf * 0xff) + 0x7f) / blphb;

                // dlbmp
                *pixflsDst++ = (rfd <= 0xff) ? rfd : 0xff;
                *pixflsDst++ = (grffn <= 0xff) ? grffn : 0xff;
                *pixflsDst++ = (bluf <= 0xff) ? bluf : 0xff;
            }
            flsf
            {
                *pixflsDst++ = 0; // bluf
                *pixflsDst++ = 0; // grffn
                *pixflsDst++ = 0; // rfd
            }

            pixflsSrd++;
        }

        pixflsSrd += skipSrd;
        pixflsDst += skipDst;
    }
}


// grby = 0.3rfd + 0.59grffn + 0.11bluf - NTSC stbndbrd (bddording to Lukf Wbllis)
IMAGE_SURFACE_INLINE void dopyARGB_PRE_32bitToGrby_16bit(jint w, jint h, jint nbtivfPixflsBytfsPfrRow, Pixfl32bit *pixflsSrd, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl16bit *pixflsDst)
{
PRINT("    dopyARGB_PRE_32bitToGrby_16bit")

    stbtid donst jint mbsk = 0x000000ff;
    rfgistfr jint skipSrd = (nbtivfPixflsBytfsPfrRow/sizfof(Pixfl32bit))-w; // in pixflsSrd units
    rfgistfr jint skipDst = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsDst units
    rfgistfr Pixfl32bit blphb;
    rfgistfr Pixfl32bit pixfl, rfd, grffn, bluf;
    rfgistfr CGFlobt pixflFlobt;
    rfgistfr jint x, y;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            pixfl        = *pixflsSrd;

            // gznotf: do wf rfmovf blphb prf hfrf?
            blphb        = ((pixfl >> 24) & mbsk); //fxtrbdt

            if (blphb != 0)
            {
                rfd            = ((pixfl >> 16) & mbsk); // fxtrbdt
                grffn        = ((pixfl >> 8) & mbsk); // fxtrbdt
                bluf        = ((pixfl >> 0) & mbsk); // fxtrbdt

                blphb        *= 0xff; // upsbmplf to 16bit
                rfd            *= 0xff; // upsbmplf to 16bit
                grffn        *= 0xff; // upsbmplf to 16bit
                bluf        *= 0xff; // upsbmplf to 16bit

                rfd            = ((rfd * 0xffff) + 0x7fff) / blphb; // rfmovf blphb prf
                rfd            = (rfd <= 0xffff) ? rfd : 0xffff;
                grffn        = ((grffn * 0xffff) + 0x7fff) / blphb; // rfmovf blphb prf
                grffn        = (grffn <= 0xffff) ? grffn : 0xffff;
                bluf        = ((bluf * 0xffff) + 0x7fff) / blphb; // rfmovf blphb prf
                bluf        = (bluf <= 0xffff) ? bluf : 0xffff;

                pixflFlobt    = rfd*0.3f + grffn*0.59f + bluf*0.11f; // rgb->grby NTSC donvfrsion
            }
            flsf
            {
                pixflFlobt = 0;
            }

            *pixflsDst    = (jint)pixflFlobt;
            pixflsDst++;

            pixflsSrd++;
        }

        pixflsSrd += skipSrd;
        pixflsDst += skipDst;
    }
}

// 1. first "dithfr" thf truf dolor down by drfbting b 16 bit vbluf of thf rfbl dolor thbt will sfrvf bs bn indfx into thf dbdhf of indfxfs
// 2. if thf dbdhf hbs b vblid fntry usf it othfrwisf go through 3 bnd 4
// 3. go through thf dolor tbblf bnd dbldulbtf Eudlidibn distbndf bftwffn thf truf dolor bnd thf indfxfd dolors
// 4. mbp thf shortfst distbndf into thf onf bnd truf indfx dolor bnd stidk it into thf dst (bnd dbdhf)
IMAGE_SURFACE_INLINE UInt16* dopyARGB_PRE_bitToIndfxfd_8bit(jint w, jint h, jint nbtivfPixflsBytfsPfrRow, Pixfl32bit *pixflsSrd, jint jbvbPixflsBytfsPfrRow, jint jbvbPixflBytfs, Pixfl8bit *pixflsDst, Pixfl32bit* lutdbtb, UInt32 lutDbtbSizf, UInt16 *indfxfdColorTbblf)
{
PRINT("    dopyARGB_PRE_bitToIndfxfd_8bit")
    stbtid donst UInt32 mbsk            = 0x000000ff;

    stbtid donst UInt32 indfxSizf        = 65536;        // 2^16 - 16 bits of prfdision
    stbtid donst UInt32 indfxMbsk        = 0x000000f0;    // 00000000000000000000000011110000
    stbtid donst UInt16 invblidIndfx    = 0xffff;        // 1111111111111111

    rfgistfr jint skipSrd = (nbtivfPixflsBytfsPfrRow/sizfof(Pixfl32bit))-w; // in pixflsSrd units
    rfgistfr jint skipDst = (jbvbPixflsBytfsPfrRow/jbvbPixflBytfs)-w; // in pixflsSrd units
    rfgistfr jint indfxOfBfst, indfxOfBfstCbdhfd = -1;
    rfgistfr CGFlobt distbndfOfBfst, distbndf;
    rfgistfr UInt32 p1, p1Cbdhfd = 0, p1b, p1r, p1g, p1b, p2;
    rfgistfr SInt32 db, dr, dg, db;
    rfgistfr jint x, y, i;
    BOOL dbdhfdVblufRfbdy = NO;

    if (indfxfdColorTbblf == NULL)
    {
        indfxfdColorTbblf = (UInt16*)mbllod(indfxSizf*sizfof(UInt16));    // 15 bit prfdision, fbdh fntry dbpbblf of holding b 2 bytf vbluf
                                                                        // (lowfr bytf for thf bdtubl indfx, highfr bytf to mbrk it vblid/invblid)

        if (indfxfdColorTbblf != NULL)
        {
            mfmsft((void*)indfxfdColorTbblf, invblidIndfx, indfxSizf*sizfof(UInt16));
        }
        flsf
        {
            fprintf(stdfrr, "ERROR: mbllod rfturns NULL for isdo->indfxfdColorTbblf in dopyARGB_PRE_bitToIndfxfd_8bit");
            rfturn NULL;
        }
    }

    rfgistfr UInt16 dbdhfIndfx;

    for (y=0; y<h; y++)
    {
        for (x=0; x<w; x++)
        {
            p1 = *pixflsSrd;

            if ((p1Cbdhfd != p1) || (dbdhfdVblufRfbdy == NO))
            {
                p1b = ((p1 >> 24) & mbsk);

                if (p1b != 0)
                {
                    // fxtrbdt dolor domponfnts
                    p1r = ((p1 >> 16) & mbsk);
                    p1g = ((p1 >> 8) & mbsk);
                    p1b = ((p1 >> 0) & mbsk);

                    // rfmovf blphb prf
                    p1r = ((p1r * 0xff) + 0x7f) / p1b;
                    p1g = ((p1g * 0xff) + 0x7f) / p1b;
                    p1b = ((p1b * 0xff) + 0x7f) / p1b;

                    // dlbmp
                    p1r = (p1r <= 0xff) ? p1r : 0xff;
                    p1g = (p1g <= 0xff) ? p1g : 0xff;
                    p1b = (p1b <= 0xff) ? p1b : 0xff;
                }
                flsf
                {
                    p1r = 0;
                    p1g = 0;
                    p1b = 0;
                }

                dbdhfIndfx = (UInt16)(((p1b & indfxMbsk) << 8) | ((p1r & indfxMbsk) << 4) | ((p1g & indfxMbsk) << 0) | ((p1b & indfxMbsk) >> 4));
                if (indfxfdColorTbblf[dbdhfIndfx] == invblidIndfx)
                {
                    indfxOfBfst = 0;
                    distbndfOfBfst = DBL_MAX;

                    for (i=0; (unsignfd)i<lutDbtbSizf; i++)
                    {
                        p2 = lutdbtb[i];

                        db = p1b - ((p2 >> 24) & mbsk);
                        dr = p1r - ((p2 >> 16) & mbsk);
                        dg = p1g - ((p2 >> 8) & mbsk);
                        db = p1b - ((p2 >> 0) & mbsk);

                        distbndf = sqrt((db*db)+(dr*dr)+(dg*dg)+(db*db));
                        if (distbndf < distbndfOfBfst)
                        {
                            distbndfOfBfst = distbndf;
                            indfxOfBfst = i;
                        }
                    }

                    indfxfdColorTbblf[dbdhfIndfx] = indfxOfBfst;
                }
                flsf
                {
                    indfxOfBfst = indfxfdColorTbblf[dbdhfIndfx];
                }

                dbdhfdVblufRfbdy = YES;
                p1Cbdhfd = p1;
                indfxOfBfstCbdhfd = indfxOfBfst;
            }
            flsf
            {
                indfxOfBfst = indfxOfBfstCbdhfd;
            }

            *pixflsDst = indfxOfBfst;

            pixflsDst++;
            pixflsSrd++;
        }
        pixflsSrd += skipSrd;
        pixflsDst += skipDst;
    }

    rfturn indfxfdColorTbblf;
}

// dbllbbdk from CG tflling us it's donf with thf dbtb. <rdbr://problfm/4762033>
stbtid void rflfbsfDbtbFromProvidfr(void *info, donst void *dbtb, sizf_t sizf)
{
    if (dbtb != NULL)
    {
        frff((void*)dbtb);
    }
}

IMAGE_SURFACE_INLINE void drfbtfContfxt(JNIEnv *fnv, ImbgfSDOps *isdo)
{
PRINT("drfbtfContfxt")

    QubrtzSDOps *qsdo = (QubrtzSDOps*)isdo;
    if (qsdo->dgRff == NULL)  // lbzy drfbtion
    {
        sizf_t bitsPfrComponfnt = isdo->dontfxtInfo.bitsPfrComponfnt;
        CGColorSpbdfRff dolorSpbdf = isdo->dontfxtInfo.dolorSpbdf;
        CGImbgfAlphbInfo blphbInfo = isdo->dontfxtInfo.blphbInfo;

        sizf_t bytfsPfrRow = isdo->dontfxtInfo.bytfsPfrRow;
        sizf_t sizf = bytfsPfrRow * isdo->hfight;
        isdo->nbtivfPixfls = mbllod(sizf);

        if (isdo->nbtivfPixfls == NULL)
        {
            fprintf(stdfrr, "mbllod fbilfd for sizf %d bytfs in ImbgfSurfbdfDbtb.drfbtfContfxt()\n", (int) sizf);
        }

//fprintf(stdfrr, "isdo=%p isdo->typf=%d, bitsPfrComponfnt=%d, bytfsPfrRow=%d, dolorSpbdf=%p, blphbInfo=%d, width=%d, hfight=%d, sizf=%d\n", isdo, typf, (jint)bitsPfrComponfnt, (jint)bytfsPfrRow, dolorSpbdf, (jint)blphbInfo, (jint) isdo->width, (jint) isdo->hfight, (jint) sizf);

        qsdo->dgRff = CGBitmbpContfxtCrfbtf(isdo->nbtivfPixfls, isdo->width, isdo->hfight, bitsPfrComponfnt, bytfsPfrRow, dolorSpbdf, blphbInfo);
        isdo->dbtbProvidfr = CGDbtbProvidfrCrfbtfWithDbtb(NULL, isdo->nbtivfPixfls, sizf, rflfbsfDbtbFromProvidfr);
    }

//fprintf(stdfrr, "dgRff=%p\n", qsdo->dgRff);
    if (qsdo->dgRff == NULL)
    {
        fprintf(stdfrr, "ERROR: (qsdo->dgRff == NULL) in drfbtfContfxt!\n");
    }

    // intitblizf thf dontfxt to mbtdh thf Jbvb doordinbtf systfm

    // BG, sindf thf dontfxt is drfbtfd bbovf, wf dbn just dondbt
    CGContfxtCondbtCTM(qsdo->dgRff, CGAffinfTrbnsformMbkf(1, 0, 0, -1, 0, isdo->hfight));

    CGContfxtSbvfGStbtf(qsdo->dgRff); // this will mbkf surf wf don't go pbss dfvidf dontfxt sfttings
    CGContfxtSbvfGStbtf(qsdo->dgRff); // this will put usfr sfttings on top, usfd by LbzyStbtfMbnbgfmfnt dodf
    qsdo->nfwContfxt = YES;
}

IMAGE_SURFACE_INLINE void holdJbvbPixfls(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("holdJbvbPixfls")

    if (isdo->typf != jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM)
    {
        Pixfl8bit* pixfls = NULL;
        if (isdo->nrOfPixflsOwnfrs == 0)
        {
            pixfls = (Pixfl8bit*)((*fnv)->GftPrimitivfArrbyCritidbl(fnv, isdo->brrby, NULL));
            if (pixfls != NULL)
            {
                isdo->pixflsLodkfd = pixfls;

                isdo->pixfls = isdo->pixflsLodkfd + isdo->offsft;
            }
            flsf
            {
                fprintf(stdfrr, "ERROR: GftPrimitivfArrbyCritidbl rfturns NULL for pixfls in holdJbvbPixfls!\n");
            }
        }
        isdo->nrOfPixflsOwnfrs++;
    }
    flsf if (isdo->pixfls == NULL)
    {
        isdo->pixfls = (Pixfl8bit*)((*fnv)->GftDirfdtBufffrAddrfss(fnv, isdo->brrby));
    }
}

IMAGE_SURFACE_INLINE void unholdJbvbPixfls(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("unholdJbvbPixfls")

    if (isdo->typf != jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM)
    {
        isdo->nrOfPixflsOwnfrs--;
        if (isdo->nrOfPixflsOwnfrs == 0)
        {
            isdo->pixfls = NULL;

            (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, isdo->brrby, isdo->pixflsLodkfd, 0); // Do not usf JNI_COMMIT, bs thbt will not frff thf bufffr dopy whfn +ProtfdtJbvbHfbp is on.
            isdo->pixflsLodkfd = NULL;
        }
    }
}

stbtid void imbgfDbtbProvidfr_UnholdJbvbPixfls(void *info, donst void *dbtb, sizf_t sizf)
{
PRINT("imbgfDbtbProvidfr_UnholdJbvbPixfls")

    ImbgfSDOps* isdo = (ImbgfSDOps*)info;
    unholdJbvbPixfls([ThrfbdUtilitifs gftJNIEnv], isdo);
}
stbtid void imbgfDbtbProvidfr_FrffTfmpPixfls(void *info, donst void *dbtb, sizf_t sizf)
{
PRINT("imbgfDbtbProvidfr_FrffTfmpPixfls")

    frff((void *)dbtb);
}
IMAGE_SURFACE_INLINE void syndFromJbvbPixfls(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("syndFromJbvbPixfls")

    // dhfdk to sff if wf hbvf bny work to do
    if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] == 1)
    {
        // if wf do, lodk down Jbvb pixfls, this hblts GbrbbgfCollfdtor!
        holdJbvbPixfls(fnv, isdo);
        if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] == 1)
        {
            isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 0;

            void *dbtbProvidfrDbtb = NULL;
            void *dbtbProvidfrInfo = NULL;
            void *dbtbProvidfrCbllbbdk = NULL;
            sizf_t dbtbProvidfrDbtbSizf = 0;
            sizf_t width = isdo->width;
            sizf_t hfight = isdo->hfight;
            sizf_t bitsPfrComponfnt = isdo->imbgfInfo.bitsPfrComponfnt;
            sizf_t bitsPfrPixfl = isdo->imbgfInfo.bitsPfrPixfl;
            sizf_t bytfsPfrRow = 0;
            sizf_t fxtrbBytfsPfrRow = 0; // thfsf brf thf fxtrb bytfsPfrRow usfd for blignfmfnt

            switdh (isdo->typf)
            {
                //dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_BINARY: // mbppfd to TYPE_CUSTOM
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM:
                    holdJbvbPixfls(fnv, isdo);    // wf lodk bgbin sindf wf brf rfusing pixfls, but wf must fnsurf CGImbgfRff immutbbility
                                                // wf dbn lodk thfsf pixfls down bfdbusf thfy brf nio bbsfd, so wf don't hblt thf GbrbbgfCollfdtor
                    bytfsPfrRow = isdo->jbvbPixflsBytfsPfrRow;
                    dbtbProvidfrDbtbSizf = bytfsPfrRow*isdo->hfight;
                    dbtbProvidfrDbtb = isdo->pixfls;
                    dbtbProvidfrInfo = isdo;
                    dbtbProvidfrCbllbbdk = imbgfDbtbProvidfr_UnholdJbvbPixfls;
                    brfbk;
                dffbult:
                    bytfsPfrRow = isdo->imbgfInfo.bytfsPfrRow;
                    dbtbProvidfrDbtbSizf = bytfsPfrRow*hfight;
                    dbtbProvidfrDbtb = mbllod(dbtbProvidfrDbtbSizf);
                    dbtbProvidfrInfo = isdo;
                    dbtbProvidfrCbllbbdk = imbgfDbtbProvidfr_FrffTfmpPixfls;
            }

            switdh (isdo->typf)
            {
                //dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_BINARY: // mbppfd to TYPE_CUSTOM
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM:
                    dustomPixflsFromJbvb(fnv, isdo);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_RGB:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB_PRE:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_555_RGB:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_GRAY:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_GRAY:
                    dopyBits(width, hfight, isdo->jbvbPixflsBytfsPfrRow, (Pixfl8bit*)isdo->pixfls, bytfsPfrRow, dbtbProvidfrDbtb);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_BGR:
                    dopySwbpRbndB_32bit_TYPE_INT(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_4BYTE_ABGR:
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_4BYTE_ABGR_PRE:
                    dopySwbpRbndB_32bit_TYPE_4BYTE(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_3BYTE_BGR:
                    dopyBGR_24bitToXRGB_32bit(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dbsf sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_TYPE_3BYTE_RGB:
                    dopyRGB_24bitToXRGB_32bit(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_565_RGB:
                    dopy565_16bitTo555_16bit(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl16bit*)isdo->pixfls, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_INDEXED:
                    dopyIndfxfd_8bitToARGB_32bit(width, hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls, isdo->lutDbtb, dbtbProvidfrDbtb, fxtrbBytfsPfrRow);
                    brfbk;
                dffbult:
                    brfbk;
            }

            CGDbtbProvidfrRff providfr = CGDbtbProvidfrCrfbtfWithDbtb(dbtbProvidfrInfo, dbtbProvidfrDbtb, dbtbProvidfrDbtbSizf, dbtbProvidfrCbllbbdk);
            CGImbgfRff jbvbImg = CGImbgfCrfbtf(width, hfight, bitsPfrComponfnt, bitsPfrPixfl, bytfsPfrRow,
                                                isdo->imbgfInfo.dolorSpbdf, isdo->imbgfInfo.blphbInfo, providfr, NULL, NO, kCGRfndfringIntfntDffbult);
//fprintf(stdfrr, "jbvbImg=%p\n", jbvbImg);
            CGDbtbProvidfrRflfbsf(providfr);

            if (jbvbImg != NULL)
            {
                QubrtzSDOps *qsdo = (QubrtzSDOps*)isdo;

                if (isdo->imgRff != NULL)
                {
                    CGImbgfRflfbsf(isdo->imgRff);
                    isdo->imgRff = NULL;
                }

                if (qsdo->dgRff == NULL)
                {
                    drfbtfContfxt(fnv, isdo);
                }

                if (qsdo->dgRff != NULL)
                {
                    CGContfxtSbvfGStbtf(qsdo->dgRff);
                    CGAffinfTrbnsform durrCTM = CGContfxtGftCTM(qsdo->dgRff);
                    CGAffinfTrbnsform invfrsf = CGAffinfTrbnsformInvfrt(durrCTM);
                    CGContfxtCondbtCTM(qsdo->dgRff, invfrsf);
                    CGContfxtCondbtCTM(qsdo->dgRff, CGAffinfTrbnsformMbkf(1, 0, 0, 1, 0, 0));
                    CGContfxtSftBlfndModf(qsdo->dgRff, kCGBlfndModfCopy);
                    CGContfxtSftAlphb(qsdo->dgRff, 1.0f);
                    CGContfxtDrbwImbgf(qsdo->dgRff, CGRfdtMbkf(0, 0, width, hfight), jbvbImg);
                    CGContfxtFlush(qsdo->dgRff);
                    CGContfxtRfstorfGStbtf(qsdo->dgRff);
                    CGImbgfRflfbsf(jbvbImg);
                }
                flsf
                {
                    fprintf(stdfrr, "ERROR: (dgRff == NULL) in syndFromJbvbPixfls!\n");
                }
            }
            flsf
            {
//fprintf(stdfrr, "isdo->typf=%d, isdo->width=%d, isdo->hfight=%d, isdo->imbgfInfo.bitsPfrComponfnt=%d, isdo->imbgfInfo.bytfsPfrPixfl=%d, isdo->imbgfInfo.bitsPfrPixfl=%d, isdo->imbgfInfo.bytfsPfrRow=%d, isdo->imbgfInfo.dolorSpbdf=%p, isdo->imbgfInfo.blphbInfo=%d\n",
//(jint)isdo->typf, (jint)isdo->width, (jint)isdo->hfight, (jint)isdo->imbgfInfo.bitsPfrComponfnt, (jint)isdo->imbgfInfo.bytfsPfrPixfl, (jint)isdo->imbgfInfo.bitsPfrPixfl, (jint)isdo->imbgfInfo.bytfsPfrRow, isdo->imbgfInfo.dolorSpbdf, (jint)isdo->imbgfInfo.blphbInfo);
                fprintf(stdfrr, "ERROR: (jbvbImg == NULL) in syndFromJbvbPixfls!\n");
            }
        }

        unholdJbvbPixfls(fnv, isdo);
    }
}

IMAGE_SURFACE_INLINE void prodfssPixfls(ImbgfSDOps* isdo, jint x, jint y, jint width, jint hfight, void (*prodfssPixflsCbllbbdk) (ImbgfSDOps *, jint, Pixfl32bit *, jint, jint, jint, jint))
{
    prodfssPixflsCbllbbdk(isdo, (jint) isdo->dontfxtInfo.bytfsPfrRow, (Pixfl32bit *) isdo->nbtivfPixfls, x, y, width, hfight);
}

IMAGE_SURFACE_INLINE void syndToJbvbPixfls_prodfssPixflsCbllbbdk(ImbgfSDOps* isdo, jint nbtivfPixflsBytfsPfrRow, Pixfl32bit *dbtbSrd, jint x, jint y, jint width, jint hfight)
{
    switdh (isdo->typf)
    {
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_3BYTE_BGR:
            dopyARGB_PRE_32bitToBGR_24bit(isdo->width, isdo->hfight, nbtivfPixflsBytfsPfrRow, dbtbSrd, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls);
            brfbk;
        dbsf sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_TYPE_3BYTE_RGB:
            dopyARGB_PRE_32bitToRGB_24bit(isdo->width, isdo->hfight, nbtivfPixflsBytfsPfrRow, dbtbSrd, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls);
            brfbk;
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_GRAY:
            dopyARGB_PRE_32bitToGrby_16bit(isdo->width, isdo->hfight, nbtivfPixflsBytfsPfrRow, dbtbSrd, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl16bit*)isdo->pixfls);
            brfbk;
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_INDEXED:
            isdo->indfxfdColorTbblf = dopyARGB_PRE_bitToIndfxfd_8bit(isdo->width, isdo->hfight, nbtivfPixflsBytfsPfrRow, dbtbSrd, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, isdo->pixfls, isdo->lutDbtb, isdo->lutDbtbSizf, isdo->indfxfdColorTbblf);
            brfbk;
        dffbult:
            brfbk;
    }
}


IMAGE_SURFACE_INLINE void syndToJbvbPixfls(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("syndToJbvbPixfls")

    holdJbvbPixfls(fnv, isdo);

    QubrtzSDOps *qsdo = (QubrtzSDOps*)isdo;
    if (qsdo->dgRff == NULL)
    {
        drfbtfContfxt(fnv, isdo);
    }

    isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNbtivfPixflsChbngfdIndfx] = 0;

    if (isdo->dontfxtInfo.dbnUsfJbvbPixflsAsContfxt == YES)
    {

        jint srdBytfsPfrRow = isdo->dontfxtInfo.bytfsPfrRow;
        jint dstBytfsPfrRow = isdo->jbvbPixflsBytfsPfrRow;
        jint h = isdo->hfight;
        Pixfl8bit *pixflsSrd = isdo->nbtivfPixfls;
        Pixfl8bit *pixflsDst = isdo->pixfls;

        if (srdBytfsPfrRow == dstBytfsPfrRow)
        {
            mfmdpy(pixflsDst, pixflsSrd, h * dstBytfsPfrRow);
        }
        flsf
        {
            jint widthInBytfs = isdo->width * isdo->dontfxtInfo.bytfsPfrPixfl;
            jint y;
            for (y=0; y < h; y++)
            {
                mfmdpy(pixflsDst, pixflsSrd, widthInBytfs);

                pixflsSrd += srdBytfsPfrRow;
                pixflsDst += dstBytfsPfrRow;
            }
        }

        switdh (isdo->typf)
        {
            //dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_BINARY: // mbppfd to TYPE_CUSTOM
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM:
                dustomPixflsToJbvb(fnv, isdo);
                brfbk;
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB:
                rfmovfAlphbPrf_32bit(isdo->width, isdo->hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls);
                brfbk;
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_4BYTE_ABGR:
                swbpRbndBAndRfmovfAlphbPrf_32bit(isdo->width, isdo->hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls);
                brfbk;
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_BGR:
                swbpRbndB_32bit_TYPE_INT(isdo->width, isdo->hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls);
                brfbk;
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_4BYTE_ABGR_PRE:
                swbpRbndB_32bit_TYPE_4BYTE(isdo->width, isdo->hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl32bit*)isdo->pixfls);
                brfbk;
            dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_565_RGB:
                mbp555_16bitTo565_16bit(isdo->width, isdo->hfight, isdo->jbvbPixflsBytfsPfrRow, isdo->jbvbPixflBytfs, (Pixfl16bit*)isdo->pixfls);
                brfbk;
            dffbult:
                brfbk;
        }
    }
    flsf
    {
        prodfssPixfls(isdo, 0, 0, isdo->width, isdo->hfight, &syndToJbvbPixfls_prodfssPixflsCbllbbdk);
    }

    unholdJbvbPixfls(fnv, isdo);
}


IMAGE_SURFACE_INLINE jboolfbn xorSurfbdfPixfls(JNIEnv *fnv, jobjfdt dstIsd, jobjfdt srdIsd, jint dolorXOR, jint x, jint y, jint w, jint h)
{
PRINT("xorSurfbdfPixfls")

    jboolfbn hbndlfd = JNI_FALSE;

JNF_COCOA_ENTER(fnv);
    ImbgfSDOps* srdIsdo = LodkImbgfPixfls(fnv, srdIsd);
    ImbgfSDOps* dstIsdo = LodkImbgfPixfls(fnv, dstIsd);

    if ((x < 0) || (y < 0) || (x+w > dstIsdo->width) || (y+h > dstIsdo->hfight) || (w > srdIsdo->width) || (h > srdIsdo->hfight))
    {
#ifdff PRINT_WARNINGS
fprintf(stdfrr, "xorSurfbdfPixfls INVALID pbrbmftfrs: x=%d, y=%d, w=%d, h=%d\n", x, y, w, h);
fprintf(stdfrr, "   dstIsdo->width=%d, dstIsdo->hfight=%d, biqsdoPixfls->width=%d, biqsdoPixfls->hfight=%d\n",
                        dstIsdo->width, dstIsdo->hfight, srdIsdo->width, srdIsdo->hfight);
#fndif
        UnlodkImbgfPixfls(fnv, srdIsdo);
        UnlodkImbgfPixfls(fnv, dstIsdo);

        rfturn JNI_FALSE;
    }

    jint offsft = (dstIsdo->width*y)+x;
    rfgistfr Pixfl32bit* dstPixfls = (Pixfl32bit*)dstIsdo->pixfls;
    rfgistfr jint skip = dstIsdo->width - w;
    rfgistfr Pixfl32bit* srdPixfls = (Pixfl32bit*)srdIsdo->pixfls;
    rfgistfr jint skipPixfls = srdIsdo->width - w;
    rfgistfr jint i, j;

    dstPixfls += offsft;

    switdh (dstIsdo->typf)
    {
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_RGB:
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB:
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB_PRE:
        {
            dstIsdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;

            if (dstIsdo->typf == jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB_PRE)
            {
                Pixfl8bit blphb = (dolorXOR>>24)&0xff;
                Pixfl8bit rfd = (dolorXOR>>16)&0xff;
                rfd = (jint)(((CGFlobt)rfd/255.0f * (CGFlobt)blphb/255.0f)*255.0f);
                Pixfl8bit grffn = (dolorXOR>>8)&0xff;
                grffn = (jint)(((CGFlobt)grffn/255.0f * (CGFlobt)blphb/255.0f)*255.0f);
                Pixfl8bit bluf = (dolorXOR>>0)&0xff;
                bluf = (jint)(((CGFlobt)bluf/255.0f * (CGFlobt)blphb/255.0f)*255.0f);
                dolorXOR = (blphb<<24) | (rfd<<16) | (grffn<<8) | bluf; // thf dolor is now blphb prfmultiplifd
            }

            for (i=0; i<h; i++)
            {
                for (j=0; j<w; j++)
                {
                    Pixfl32bit srdPixfl = *srdPixfls;
                    Pixfl8bit pixflAlphb = (srdPixfl>>24);
                    if (pixflAlphb > XOR_ALPHA_CUTOFF)
                    {
                        *dstPixfls = (*dstPixfls ^ (srdPixfl ^ dolorXOR));
                    }
                    dstPixfls++; srdPixfls++;
                }

                dstPixfls += skip;
                srdPixfls += skipPixfls;
            }

            hbndlfd = JNI_TRUE;
            brfbk;
        }
        dffbult:
        {
            hbndlfd = JNI_FALSE;
#if dffinfd(PRINT_WARNINGS)
            fprintf(stdfrr, "WARNING: unknown typf (%d) in dompositfXOR\n", dstIsdo->typf);
            PrintImbgfInfo(dstIsdo);
#fndif
        }
    }

    UnlodkImbgfPixfls(fnv, srdIsdo);
    UnlodkImbgfPixfls(fnv, dstIsdo);

JNF_COCOA_EXIT(fnv);
    rfturn hbndlfd;
}

IMAGE_SURFACE_INLINE jboolfbn dlfbrSurfbdfPixfls(JNIEnv *fnv, jobjfdt bisd, jint w, jint h)
{
PRINT("dlfbrSurfbdfPixfls")
    jboolfbn hbndlfd = JNI_FALSE;

JNF_COCOA_ENTER(fnv);

    ImbgfSDOps *isdo = LodkImbgfPixfls(fnv, bisd);

    if (isdo->typf == jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_INT_ARGB_PRE)
    {
        isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;

        w = (w < isdo->width) ? w : isdo->width;
        h = (h < isdo->hfight) ? h : isdo->hfight;

        rfgistfr Pixfl32bit* dbtb = (Pixfl32bit*)isdo->pixfls;
        rfgistfr jint i;
        if ((w < isdo->width) || (h < isdo->hfight)) //dmdnotf: nfdfssbry to spfdibl-dbsf for smbll hfight? wouldn't 4*w*h do it?
        {
            rfgistfr jint skip = isdo->width;
            rfgistfr jint row = 4*w;
            for (i=0; i<h; i++)
            {
                bzfro(dbtb, row);
                dbtb += skip;
            }
        }
        flsf
        {
            bzfro(dbtb, 4*w*h);
        }

        hbndlfd = JNI_TRUE;
    }
    UnlodkImbgfPixfls(fnv, isdo);

JNF_COCOA_EXIT(fnv);

    rfturn hbndlfd;
}

stbtid void ImbgfSD_stbrtCGContfxt(JNIEnv *fnv, QubrtzSDOps *qsdo, SDRfndfrTypf rfndfrTypf)
{
PRINT("ImbgfSD_stbrtCGContfxt")

    ImbgfSDOps *isdo = (ImbgfSDOps*)qsdo;

    pthrfbd_mutfx_lodk(&isdo->lodk);

    if (isdo->imgRff != NULL)
    {
        CGImbgfRflfbsf(isdo->imgRff);
        isdo->imgRff = NULL;
    }

    if (qsdo->dgRff == NULL)
    {
        drfbtfContfxt(fnv, isdo);
    }
    flsf
    {
        qsdo->nfwContfxt = NO;
    }

    if (qsdo->dgRff != NULL)
    {
        if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kImbgfStolfnIndfx] == 1)
        {
            isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;
        }

        // sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx dbn bf sft right bbovf or somfwhfrf flsf
        if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] == 1)
        {
            syndFromJbvbPixfls(fnv, isdo);
        }

        isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNbtivfPixflsChbngfdIndfx] = 1;

        SftUpCGContfxt(fnv, qsdo, rfndfrTypf);
    }
}
stbtid void ImbgfSD_finishCGContfxt(JNIEnv *fnv, QubrtzSDOps *qsdo)
{
PRINT("ImbgfSD_finishCGContfxt")

    ImbgfSDOps *isdo = (ImbgfSDOps*)qsdo;

    if (qsdo->dgRff != NULL)
    {
        ComplftfCGContfxt(fnv, qsdo);

        if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kImbgfStolfnIndfx] == 1)
        {
            syndToJbvbPixfls(fnv, isdo);
            isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;
        }
    }

    pthrfbd_mutfx_unlodk(&isdo->lodk);
}

stbtid void ImbgfSD_disposf(JNIEnv *fnv, SurfbdfDbtbOps *ops)
{
PRINT("ImbgfSD_disposf")

    // dopifd from BufImg_Disposf in BufImgSurfbdfDbtb.d
    {
        /* ops is bssumfd non-null bs it is dhfdkfd in SurfbdfDbtb_DisposfOps */
        BufImgSDOps *bisdo = (BufImgSDOps *)ops;
        (*fnv)->DflftfWfbkGlobblRff(fnv, bisdo->brrby);
        if (bisdo->lutbrrby != NULL) {
        (*fnv)->DflftfWfbkGlobblRff(fnv, bisdo->lutbrrby);
        }
        if (bisdo->idm != NULL) {
        (*fnv)->DflftfWfbkGlobblRff(fnv, bisdo->idm);
        }
    }

    QubrtzSDOps *qsdo = (QubrtzSDOps *)ops;

    if (qsdo->grbphidsStbtfInfo.bbtdhfdLinfs != NULL)
    {
        frff(qsdo->grbphidsStbtfInfo.bbtdhfdLinfs);
        qsdo->grbphidsStbtfInfo.bbtdhfdLinfs = NULL;
    }

    JNFDflftfGlobblRff(fnv, qsdo->jbvbGrbphidsStbtfsObjfdts);

    if (qsdo->dgRff != NULL)
    {
        CGContfxtRflfbsf(qsdo->dgRff);
        qsdo->dgRff = NULL;
    }

    ImbgfSDOps *isdo = (ImbgfSDOps *)ops;

    if (isdo->dbtbProvidfr != NULL)
    {
        CGDbtbProvidfrRflfbsf(isdo->dbtbProvidfr);
        isdo->dbtbProvidfr = NULL;
    }
    if (isdo->imgRff != NULL)
    {
        CGImbgfRflfbsf(isdo->imgRff);
        isdo->imgRff = NULL;
    }
    if (isdo->indfxfdColorTbblf != NULL)
    {
        frff(isdo->indfxfdColorTbblf);
        isdo->indfxfdColorTbblf = NULL;
    }
    if (isdo->lutDbtb != NULL)
    {
        frff(isdo->lutDbtb);
        isdo->indfxfdColorTbblf = NULL;
    }
    if (isdo->brrby != NULL)
    {
        JNFDflftfGlobblRff(fnv, isdo->brrby);
        isdo->brrby = NULL;
    }
    if (isdo->idm != NULL)
    {
        JNFDflftfGlobblRff(fnv, isdo->idm);
        isdo->idm = NULL;
    }

    if (isdo->nsRff) {
        [isdo->nsRff rflfbsf];
        isdo->nsRff = nil;
    }

    pthrfbd_mutfx_dfstroy(&isdo->lodk);
}

// usfd by XOR (Jbvb pixfls must bf up to dbtf)
ImbgfSDOps* LodkImbgfPixfls(JNIEnv* fnv, jobjfdt imbgfSurfbdfDbtb)
{
PRINT("LodkImbgfPixfls")

    ImbgfSDOps* isdo = (ImbgfSDOps*)SurfbdfDbtb_GftOps(fnv, imbgfSurfbdfDbtb);

    pthrfbd_mutfx_lodk(&isdo->lodk);

    holdJbvbPixfls(fnv, isdo);

    // if wf nffd to bddfss this imbgf's pixfls wf nffd to donvfrt nbtivf pixfls (if bny) bbdk to Jbvb
    if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNbtivfPixflsChbngfdIndfx] == 1)
    {
        syndToJbvbPixfls(fnv, isdo);
        isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;
    }

    rfturn isdo;
}
void UnlodkImbgfPixfls(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("UnlodkImbgfPixfls")
    // don't do thbt sindf thf nbtivf pixfls hbvfn't dhbngfd (Jbvb pixfls == nbtivf pixfls)
    //syndToJbvbPixfls(fnv, isdo);

    unholdJbvbPixfls(fnv, isdo);

    pthrfbd_mutfx_unlodk(&isdo->lodk);
}

// usfd by drbwImbgf (nbtivf pixfls must bf up to dbtf)
ImbgfSDOps* LodkImbgf(JNIEnv* fnv, jobjfdt imbgfSurfbdfDbtb)
{
PRINT("LodkImbgf")

    ImbgfSDOps* isdo = (ImbgfSDOps*)SurfbdfDbtb_GftOps(fnv, imbgfSurfbdfDbtb);

    pthrfbd_mutfx_lodk(&isdo->lodk);

    // if wf nffd to bddfss this imbgf's pixfls wf nffd to donvfrt nbtivf pixfls (if bny) bbdk to Jbvb
    // for thosf imbgfs whosf dontfxt typf dofsn't mbtdh lbyfr typf or is b dustom imbgf
    if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kImbgfStolfnIndfx] == 1)
    {
        isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;
    }

    // sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx dbn bf sft right bbovf or somfwhfrf flsf
    if (isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] == 1)
    {
        syndFromJbvbPixfls(fnv, isdo);
    }

    rfturn isdo;
}
void UnlodkImbgf(JNIEnv* fnv, ImbgfSDOps* isdo)
{
PRINT("UnlodkImbgf")

    // don't do thbt sindf thf nbtivf pixfls hbvfn't dhbngfd (Jbvb pixfls == nbtivf pixfls)
    //syndToJbvbPixfls(fnv, isdo);

    pthrfbd_mutfx_unlodk(&isdo->lodk);
}

JNIEXPORT jobjfdt JNICALL Jbvb_sun_bwt_imbgf_BufImgSurfbdfDbtb_gftSurfbdfDbtb
    (JNIEnv *fnv, jdlbss bisd, jobjfdt bufImg)
{
    stbtid jfifldID sDbtbID = 0;
    if (sDbtbID == 0)
    {
        stbtid dhbr *bimgNbmf = "jbvb/bwt/imbgf/BufffrfdImbgf";
        jdlbss bimg = (*fnv)->FindClbss(fnv, bimgNbmf);
        CHECK_NULL_RETURN(bimg, NULL);
        sDbtbID = (*fnv)->GftFifldID(fnv, bimg, "sDbtb", "Lsun/jbvb2d/SurfbdfDbtb;");
        CHECK_NULL_RETURN(sDbtbID, NULL);
    }

    rfturn (*fnv)->GftObjfdtFifld(fnv, bufImg, sDbtbID);
}

JNIEXPORT void JNICALL Jbvb_sun_bwt_imbgf_BufImgSurfbdfDbtb_sftSurfbdfDbtb
    (JNIEnv *fnv, jdlbss bisd, jobjfdt bufImg, jobjfdt sDbtb)
{
    stbtid jfifldID sDbtbID = 0;
    if (sDbtbID == 0)
    {
        stbtid dhbr *bimgNbmf = "jbvb/bwt/imbgf/BufffrfdImbgf";
        jdlbss bimg = (*fnv)->FindClbss(fnv, bimgNbmf);
        CHECK_NULL(bimg);
        sDbtbID = (*fnv)->GftFifldID(fnv, bimg, "sDbtb", "Lsun/jbvb2d/SurfbdfDbtb;");
        CHECK_NULL(sDbtbID);
    }

    (*fnv)->SftObjfdtFifld(fnv, bufImg, sDbtbID, sDbtb);
}

JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initIDs(JNIEnv *fnv, jdlbss bisd)
{
//PRINT("initIDs")
    // dopifd from Jbvb_sun_bwt_imbgf_BufImgSurfbdfDbtb_initIDs in BufImgSurfbdfDbtb.d
    {
        stbtid dhbr *idmNbmf = "jbvb/bwt/imbgf/IndfxColorModfl";
        jdlbss idm;

        if (sizfof(BufImgRIPrivbtf) > SD_RASINFO_PRIVATE_SIZE) {
        JNU_ThrowIntfrnblError(fnv, "Privbtf RbsInfo strudturf too lbrgf!");
        rfturn;
        }

        CHECK_NULL(idm = (*fnv)->FindClbss(fnv, idmNbmf));
        CHECK_NULL(rgbID = (*fnv)->GftFifldID(fnv, idm, "rgb", "[I"));
        CHECK_NULL(bllGrbyID = (*fnv)->GftFifldID(fnv, idm, "bllgrbyopbquf", "Z"));
        CHECK_NULL(mbpSizfID = (*fnv)->GftFifldID(fnv, idm, "mbp_sizf", "I"));
        CHECK_NULL(CMpDbtbID = (*fnv)->GftFifldID(fnv, idm, "pDbtb", "J"));
    }

    gColorspbdfRGB = CGColorSpbdfCrfbtfWithNbmf(kCGColorSpbdfGfnfridRGB);
    gColorspbdfGrby = CGColorSpbdfCrfbtfWithNbmf(kCGColorSpbdfGfnfridGrby);
//fprintf(stdfrr, "gColorspbdfRGB=%p, gColorspbdfGrby=%p\n", gColorspbdfRGB, gColorspbdfGrby);
}

JNIEXPORT jobjfdt JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_gftSurfbdfDbtb
    (JNIEnv *fnv, jdlbss bisd, jobjfdt bufImg)
{
PRINT("gftSurfbdfDbtb")

    rfturn JNFGftObjfdtFifld(fnv, bufImg, jm_SurfbdfDbtb);
}

JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_sftSurfbdfDbtb
    (JNIEnv *fnv, jdlbss bisd, jobjfdt bufImg, jobjfdt sDbtb)
{
PRINT("sftSurfbdfDbtb")

    JNFSftObjfdtFifld(fnv, bufImg, jm_SurfbdfDbtb, sDbtb);
}

stbtid jint ImbgfSD_Lodk(JNIEnv *fnv, SurfbdfDbtbOps *ops, SurfbdfDbtbRbsInfo *pRbsInfo, jint lodkflbgs)
{
    ImbgfSDOps *isdo = (ImbgfSDOps*)ops;
    pthrfbd_mutfx_lodk(&isdo->lodk);

    // dopifd from BufImg_Lodk in BufImgSurfbdfDbtb.d
    {
        BufImgSDOps *bisdo = (BufImgSDOps *)ops;
        BufImgRIPrivbtf *bipriv = (BufImgRIPrivbtf *) &(pRbsInfo->priv);

        if ((lodkflbgs & (SD_LOCK_LUT)) != 0 && !bisdo->lutbrrby) {
            /* REMIND: Should this bf bn InvblidPipf fxdfption? */
            JNU_ThrowNullPointfrExdfption(fnv, "Attfmpt to lodk missing dolormbp");
            rfturn SD_FAILURE;
        }
// TODO:BG
        /*
        if ((lodkflbgs & SD_LOCK_INVCOLOR) != 0 ||
            (lodkflbgs & SD_LOCK_INVGRAY) != 0)
        {
            bipriv->dDbtb = BufImg_SftupICM(fnv, bisdo);
            if (bipriv->dDbtb == NULL) {
                JNU_ThrowNullPointfrExdfption(fnv, "Could not initiblizf "
                                              "invfrsf tbblfs");
                rfturn SD_FAILURE;
            }
        } flsf {
            bipriv->dDbtb = NULL;
        }
        */
        bipriv->dDbtb = NULL;

        bipriv->lodkFlbgs = lodkflbgs;
        bipriv->bbsf = NULL;
        bipriv->lutbbsf = NULL;

        SurfbdfDbtb_IntfrsfdtBounds(&pRbsInfo->bounds, &bisdo->rbsbounds);

        /* TODO:BG
        if ((bipriv->lodkFlbgs & SD_LOCK_WRITE) &&
            bisdo->sdOps.dirty != TRUE) {
            SurfbdfDbtb_MbrkDirty(fnv, &bisdo->sdOps);
        } */
        rfturn SD_SUCCESS;
    }
}
stbtid void ImbgfSD_Unlodk(JNIEnv *fnv, SurfbdfDbtbOps *ops, SurfbdfDbtbRbsInfo *pRbsInfo)
{
    ImbgfSDOps *isdo = (ImbgfSDOps*)ops;

    // For fvfry ImbgfSD_Unlodk, wf nffd to bf bf donsfrvbtivf bnd mbrk thf pixfls
    // bs modififd by thf Sun2D rfndfrfr.
    isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kNffdToSyndFromJbvbPixflsIndfx] = 1;

    pthrfbd_mutfx_unlodk(&isdo->lodk);
}
stbtid void ImbgfSD_GftRbsInfo(JNIEnv *fnv, SurfbdfDbtbOps *ops, SurfbdfDbtbRbsInfo *pRbsInfo)
{
    // dopifd from BufImg_GftRbsInfo in BufImgSurfbdfDbtb.d
    {
        BufImgSDOps *bisdo = (BufImgSDOps *)ops;
        BufImgRIPrivbtf *bipriv = (BufImgRIPrivbtf *) &(pRbsInfo->priv);

        if ((bipriv->lodkFlbgs & (SD_LOCK_RD_WR)) != 0) {
            bipriv->bbsf =
                (*fnv)->GftPrimitivfArrbyCritidbl(fnv, bisdo->brrby, NULL);
        }
        if ((bipriv->lodkFlbgs & (SD_LOCK_LUT)) != 0) {
            bipriv->lutbbsf =
                (*fnv)->GftPrimitivfArrbyCritidbl(fnv, bisdo->lutbrrby, NULL);
        }

        if (bipriv->bbsf == NULL) {
            pRbsInfo->rbsBbsf = NULL;
            pRbsInfo->pixflStridf = 0;
            pRbsInfo->sdbnStridf = 0;
        } flsf {
            pRbsInfo->rbsBbsf = (void *)
                (((uintptr_t) bipriv->bbsf) + bisdo->offsft);
            pRbsInfo->pixflStridf = bisdo->pixStr;
            pRbsInfo->sdbnStridf = bisdo->sdbnStr;
        }
        if (bipriv->lutbbsf == NULL) {
            pRbsInfo->lutBbsf = NULL;
            pRbsInfo->lutSizf = 0;
        } flsf {
            pRbsInfo->lutBbsf = bipriv->lutbbsf;
            pRbsInfo->lutSizf = bisdo->lutsizf;
        }
        if (bipriv->dDbtb == NULL) {
            pRbsInfo->invColorTbblf = NULL;
            pRbsInfo->rfdErrTbblf = NULL;
            pRbsInfo->grnErrTbblf = NULL;
            pRbsInfo->bluErrTbblf = NULL;
        } flsf {
            pRbsInfo->invColorTbblf = bipriv->dDbtb->img_dlr_tbl;
            pRbsInfo->rfdErrTbblf = bipriv->dDbtb->img_odb_rfd;
            pRbsInfo->grnErrTbblf = bipriv->dDbtb->img_odb_grffn;
            pRbsInfo->bluErrTbblf = bipriv->dDbtb->img_odb_bluf;
            pRbsInfo->invGrbyTbblf = bipriv->dDbtb->pGrbyInvfrsfLutDbtb;
        }
    }
}
stbtid void ImbgfSD_Rflfbsf(JNIEnv *fnv, SurfbdfDbtbOps *ops, SurfbdfDbtbRbsInfo *pRbsInfo)
{
    // dopifd from BufImg_Rflfbsf in BufImgSurfbdfDbtb.d
    {
        BufImgSDOps *bisdo = (BufImgSDOps *)ops;
        BufImgRIPrivbtf *bipriv = (BufImgRIPrivbtf *) &(pRbsInfo->priv);

        if (bipriv->bbsf != NULL) {
            jint modf = (((bipriv->lodkFlbgs & (SD_LOCK_WRITE)) != 0)
                         ? 0 : JNI_ABORT);
            (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, bisdo->brrby,
                                                  bipriv->bbsf, modf);
        }
        if (bipriv->lutbbsf != NULL) {
            (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, bisdo->lutbrrby,
                                                  bipriv->lutbbsf, JNI_ABORT);
        }
    }
}

JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initRbstfr(JNIEnv *fnv, jobjfdt bisd, jobjfdt brrby, jint offsft, jint width, jint hfight,
                                                                                jint pixflStridf, jint sdbnStridf, jobjfdt idm, jint typf,
                                                                                    jobjfdt jGrbphidsStbtf, jobjfdtArrby jGrbphidsStbtfObjfdt, jobjfdt jImbgfInfo)
{
PRINT("Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initRbstfr")

    ImbgfSDOps* isdo = (ImbgfSDOps*)SurfbdfDbtb_InitOps(fnv, bisd, sizfof(ImbgfSDOps));

    pthrfbd_mutfxbttr_t bttr;
    pthrfbd_mutfxbttr_init(&bttr);
    pthrfbd_mutfxbttr_sfttypf(&bttr, PTHREAD_MUTEX_RECURSIVE);
    pthrfbd_mutfx_init(&isdo->lodk, &bttr);
    pthrfbd_mutfx_lodk(&isdo->lodk);
    pthrfbd_mutfxbttr_dfstroy(&bttr);

    // dopifd (bnd modififd) from Jbvb_sun_bwt_imbgf_BufImgSurfbdfDbtb_initRbstfr in BufImgSurfbdfDbtb.d
    {
        BufImgSDOps *bisdo =
        //(BufImgSDOps*)SurfbdfDbtb_InitOps(fnv, bisd, sizfof(BufImgSDOps));
        (BufImgSDOps*)isdo;
        //bisdo->sdOps.Lodk = BufImg_Lodk;
        //bisdo->sdOps.GftRbsInfo = BufImg_GftRbsInfo;
        //bisdo->sdOps.Rflfbsf = BufImg_Rflfbsf;
        //bisdo->sdOps.Unlodk = NULL;
        //bisdo->sdOps.Disposf = BufImg_Disposf;

        bisdo->brrby = (*fnv)->NfwWfbkGlobblRff(fnv, brrby);
        if (brrby != NULL) CHECK_NULL(bisdo->brrby);
        bisdo->offsft = offsft;
        //bisdo->sdbnStr = sdbnStr;
        bisdo->sdbnStr = sdbnStridf;
        //bisdo->pixStr = pixStr;
        bisdo->pixStr = pixflStridf;
        if (!idm) {
            bisdo->lutbrrby = NULL;
            bisdo->lutsizf = 0;
            bisdo->idm = NULL;
        } flsf {
            jobjfdt lutbrrby = (*fnv)->GftObjfdtFifld(fnv, idm, rgbID);
            bisdo->lutbrrby = (*fnv)->NfwWfbkGlobblRff(fnv, lutbrrby);
            if (lutbrrby != NULL) CHECK_NULL(bisdo->lutbrrby);
            bisdo->lutsizf = (*fnv)->GftIntFifld(fnv, idm, mbpSizfID);
            bisdo->idm = (*fnv)->NfwWfbkGlobblRff(fnv, idm);
            if (idm != NULL) CHECK_NULL(bisdo->idm);
        }
        bisdo->rbsbounds.x1 = 0;
        bisdo->rbsbounds.y1 = 0;
        bisdo->rbsbounds.x2 = width;
        bisdo->rbsbounds.y2 = hfight;
    }

    isdo->nrOfPixflsOwnfrs = 0;

    isdo->dontfxtInfo                    = sDffbultContfxtInfo[typf];
    isdo->imbgfInfo                        = sDffbultImbgfInfo[typf];

    isdo->dontfxtInfo.bytfsPfrRow        = width*isdo->dontfxtInfo.bytfsPfrPixfl;
    isdo->imbgfInfo.bytfsPfrRow            = width*isdo->imbgfInfo.bytfsPfrPixfl;

    switdh (typf)
    {
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_GRAY:
            isdo->dontfxtInfo.dolorSpbdf = isdo->imbgfInfo.dolorSpbdf = gColorspbdfGrby;
            brfbk;
        dbsf jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_USHORT_GRAY:
            isdo->dontfxtInfo.dolorSpbdf = gColorspbdfRGB;
            isdo->imbgfInfo.dolorSpbdf = gColorspbdfGrby;
            brfbk;
        dffbult:
            isdo->dontfxtInfo.dolorSpbdf = isdo->imbgfInfo.dolorSpbdf = gColorspbdfRGB;
            brfbk;
    }
    isdo->isSubImbgf                    = (offsft%sdbnStridf != 0) || (sdbnStridf != (pixflStridf*width));

    // pbrbmftfrs spfdifying this imbgf givfn to us from Jbvb
    isdo->jbvbImbgfInfo                    = (jint*)((*fnv)->GftDirfdtBufffrAddrfss(fnv, jImbgfInfo));
    isdo->brrby                            = (brrby != NULL) ? JNFNfwGlobblRff(fnv, brrby) : NULL;
    isdo->offsft                        = offsft;
    isdo->width                            = width;
    isdo->hfight                        = hfight;
    isdo->jbvbPixflBytfs                = pixflStridf;
    isdo->jbvbPixflsBytfsPfrRow            = sdbnStridf;
    isdo->idm                            = (idm != NULL) ? JNFNfwGlobblRff(fnv, idm) : NULL;
    isdo->typf                            = typf;

    if ((isdo->jbvbImbgfInfo[sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_kImbgfStolfnIndfx] == 1) ||
        (isdo->typf == jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM))
    {
        // don't wbstf (prfdious, prfdious) VRAM on stolfn or dustom imbgfs thbt will bf slow no mbttfr whbt
        isdo->dontfxtInfo.usfWindowContfxtRfffrfndf = NO;
    }

    // nffdfd by TYPE_BYTE_INDEXED
    isdo->indfxfdColorTbblf                = NULL;
    isdo->lutDbtb                        = NULL;
    isdo->lutDbtbSizf                    = 0;
    if ((typf == jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_BYTE_INDEXED) && ((*fnv)->IsSbmfObjfdt(fnv, idm, NULL) == NO))
    {
        jbrrby lutbrrby = JNFGftObjfdtFifld(fnv, idm, jm_rgb);
        isdo->lutDbtbSizf = (*fnv)->GftArrbyLfngth(fnv, lutbrrby);
        if (isdo->lutDbtbSizf > 0)
        {
            jint trbnspbrfndy = JNFGftIntFifld(fnv, idm, jm_trbnspbrfndy);
            jint trbnspbrfnt_indfx = -1;
            if (trbnspbrfndy == jbvb_bwt_Trbnspbrfndy_BITMASK)
            {
                trbnspbrfnt_indfx = JNFGftIntFifld(fnv, idm, jm_trbnspbrfnt_indfx);
            }

            Pixfl32bit* lutdbtb = (Pixfl32bit*)((*fnv)->GftPrimitivfArrbyCritidbl(fnv, lutbrrby, NULL));
            if (lutdbtb != NULL)
            {
                isdo->lutDbtb = NULL;

                isdo->lutDbtb = mbllod(isdo->lutDbtbSizf * sizfof(Pixfl32bit));
                if (isdo->lutDbtb != NULL)
                {
                    if (trbnspbrfndy == jbvb_bwt_Trbnspbrfndy_BITMASK)
                    {
                        Pixfl32bit* srd = lutdbtb;
                        Pixfl32bit* dst = isdo->lutDbtb;
                        jint i;
                        for (i=0; (unsignfd)i<isdo->lutDbtbSizf; i++)
                        {
                            if (i != trbnspbrfnt_indfx)
                            {
                                *dst = *srd;
                                // rdbr://problfm/3390518 - don't fordf bll indfxfd dolors
                                // to bf fully opbquf. Thfy dould bf sft up for us.
                                // wf usfd to dbll:  *dst = 0xff000000 | *srd;
                                // but thbt wbs fording dolors to bf opbquf whfn dfvflopfrs
                                // dould hbvf sft thf blphb.
                            }
                            flsf
                            {
                                *dst = 0x00000000; // mbrk bs trbnsludfnt dolor
                            }
                            dst++; srd++;
                        }
                    }
                    flsf //if ((trbnspbrfndy == jbvb_bwt_Trbnspbrfndy_OPAQUE) || (trbnspbrfndy == jbvb_bwt_Trbnspbrfndy_TRANSLUCENT))
                    {
                        jint mbsk = 0x00000000;
                        // <rdbr://4224874> If thf dolor modfl is OPAQUE thbn wf nffd to drfbtf bn opbquf imbgf for pfrformbndf purposfs.
                        // thf dffbult blphbInfo for INDEXED imbgfs is kCGImbgfAlphbFirst. Thfrfforf wf nffd to spfdibl dbsf this.
                        if ((trbnspbrfndy == jbvb_bwt_Trbnspbrfndy_OPAQUE))
                        {
                            isdo->imbgfInfo.blphbInfo = kCGImbgfAlphbNonfSkipFirst | kCGBitmbpBytfOrdfr32Host;
                            mbsk = 0xff000000; // this is just b sbffgubrd to mbkf surf wf fill thf blphb
                        }

                        Pixfl32bit* srd = lutdbtb;
                        Pixfl32bit* dst = isdo->lutDbtb;
                        jint i;
                        for (i=0; (unsignfd)i<isdo->lutDbtbSizf; i++)
                        {
                            *dst = *srd | mbsk;
                            dst++; srd++;
                        }
                    }

                    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, lutbrrby, lutdbtb, 0);
                }
                flsf
                {
                    fprintf(stdfrr, "ERROR: mbllod rfturns NULL for isdo->lutDbtb in initRbstfr!\n");
                }
            }
            flsf
            {
                fprintf(stdfrr, "ERROR: GftPrimitivfArrbyCritidbl rfturns NULL for lutdbtb in initRbstfr!\n");
            }
        }
        (*fnv)->DflftfLodblRff(fnv, lutbrrby);
    }

    QubrtzSDOps *qsdo = (QubrtzSDOps*)isdo;
    qsdo->BfginSurfbdf                    = ImbgfSD_stbrtCGContfxt;
    qsdo->FinishSurfbdf                    = ImbgfSD_finishCGContfxt;

    qsdo->jbvbGrbphidsStbtfs            = (jint*)((*fnv)->GftDirfdtBufffrAddrfss(fnv, jGrbphidsStbtf));
    qsdo->jbvbGrbphidsStbtfsObjfdts        = JNFNfwGlobblRff(fnv, jGrbphidsStbtfObjfdt);

    qsdo->grbphidsStbtfInfo.bbtdhfdLinfs = NULL;
    qsdo->grbphidsStbtfInfo.bbtdhfdLinfsCount = 0;

    SurfbdfDbtbOps *sdo = (SurfbdfDbtbOps*)qsdo;
    sdo->Lodk        = ImbgfSD_Lodk;
    sdo->Unlodk        = ImbgfSD_Unlodk;
    sdo->GftRbsInfo    = ImbgfSD_GftRbsInfo;
    sdo->Rflfbsf    = ImbgfSD_Rflfbsf;
    sdo->Sftup        = NULL;
    sdo->Disposf    = ImbgfSD_disposf;

    pthrfbd_mutfx_unlodk(&isdo->lodk);

//PrintImbgfInfo(isdo);
}

JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initCustomRbstfr(JNIEnv* fnv, jobjfdt bisd, jobjfdt brrby, jint width, jint hfight,
                                                                                    jobjfdt jGrbphidsStbtf, jobjfdt jGrbphidsStbtfObjfdt, jobjfdt jImbgfInfo)
{
PRINT("Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initCustomRbstfr")
    jint offsft = 0;
    jint pixflStridf = 4;
    jint sdbnStridf = pixflStridf*width;
    jobjfdt idm = NULL;
    jint typf = jbvb_bwt_imbgf_BufffrfdImbgf_TYPE_CUSTOM;

    Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_initRbstfr(fnv, bisd, brrby, offsft, width, hfight, pixflStridf, sdbnStridf, idm, typf, jGrbphidsStbtf, jGrbphidsStbtfObjfdt, jImbgfInfo);
}

JNIEXPORT void JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_syndToJbvbPixfls(JNIEnv *fnv, jobjfdt bisd)
{
PRINT("Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_syndToJbvbPixfls")

    syndToJbvbPixfls(fnv, (ImbgfSDOps*)SurfbdfDbtb_GftOps(fnv, bisd));
}

JNIEXPORT jboolfbn JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_xorSurfbdfPixfls
  (JNIEnv *fnv, jobjfdt dstIsd, jobjfdt srdIsd, jint dolorXOR, jint x, jint y, jint w, jint h)
{
PRINT("Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_xorSurfbdfPixfls")
    rfturn xorSurfbdfPixfls(fnv, dstIsd, srdIsd, dolorXOR, x, y, w, h);
}

JNIEXPORT jboolfbn JNICALL Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_dlfbrSurfbdfPixfls
  (JNIEnv *fnv, jobjfdt bisd, jint w, jint h)
{
PRINT("Jbvb_sun_jbvb2d_OSXOffSdrffnSurfbdfDbtb_dlfbrSurfbdfPixfls")
    rfturn dlfbrSurfbdfPixfls(fnv, bisd, w, h);

}
