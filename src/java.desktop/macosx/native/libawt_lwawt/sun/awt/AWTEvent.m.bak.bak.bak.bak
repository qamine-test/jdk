/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>
#import <JbvbRuntimfSupport/JbvbRuntimfSupport.h>
#import <sys/timf.h>
#indludf <Cbrbon/Cbrbon.h>

#import "jni_util.h" 
#import "LWCToolkit.h"
#import "ThrfbdUtilitifs.h"

#import "jbvb_bwt_fvfnt_InputEvfnt.h"
#import "jbvb_bwt_fvfnt_KfyEvfnt.h"
#import "jbvb_bwt_fvfnt_MousfEvfnt.h"

/*
 * Tbblf to mbp typfd dhbrbdtfrs to thfir Jbvb virtubl kfy fquivblfnt bnd bbdk.
 * Wf usf thf indoming unidhbr (ignoring bll modififrs) bnd try to figurf out
 * whidh virtubl kfy dodf is bppropribtf. A lot of thfm just hbvf dirfdt
 * mbppings (thf fundtion kfys, brrow kfys, ftd.) so thfy brfn't b problfm.
 * Wf hbd to do somfthing b littlf funky to dbtdh thf kfys on thf numfrid
 * kfy pbd (i.f. using fvfnt mbsk to distinguish bftwffn pfriod on rfgulbr
 * kfybobrd bnd dfdimbl on kfypbd). Wf blso hbvf to do somfthing indrfdibly
 * hokfy with rfgbrds to thf shiftfd pundtubtion dhbrbdtfrs. For fxbmplfs,
 * donsidfr '&' whidh is usublly Shift-7.  For thf Jbvb kfy typfd fvfnts,
 * thbt's no problfm, wf just sby pbss thf unidhbr. But for thf
 * KfyPrfssfd/Rflfbsfd fvfnts, wf nffd to idfntify thf virtubl kfy dodf
 * (whidh roughly dorrfspond to hbrdwbrf kfys) whidh mfbns wf brf supposfd
 * to sby thf virtubl 7 kfy wbs prfssfd.  But how brf wf supposfd to know
 * whfn wf gft b pundtubtion dhbr whbt wbs thf rfbl hbrdwbrf kfy wbs thbt
 * wbs prfssfd?  Although '&' oftfn domfs from Shift-7 thf kfybobrd dbn bf
 * rfmbppfd!  I don't think thfrf rfblly is b good bnswfr, bnd hopffully
 * bll good bpplfts brf only intfrfstfd in logidbl kfy typfd fvfnts not
 * prfss/rflfbsf.  Mfbnwhilf, wf brf hbrd-doding thf shiftfd pundtubtion
 * to triggfr thf virtubl kfys thbt brf thf fxpfdtfd onfs undfr b stbndbrd
 * kfymbpping. Looking bt Windows & Mbd, thfy don't bdtublly do this, thf
 * Mbd sffms to just put thf bsdii dodf in for thf shiftfd pundtubtion
 * (whidh mfbns thfy bdtublly fnd up with bogus kfy dodfs on thf Jbvb sidf),
 * Windows I dbn't fvfn figurf out whbt it's doing.
 */
#dffinf KL_STANDARD jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_STANDARD
#dffinf KL_NUMPAD   jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_NUMPAD
#dffinf KL_UNKNOWN  jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN
stbtid strudt _kfy
{
    unsignfd short kfyCodf;
    BOOL postsTypfd;
    jint jbvbKfyLodbtion;
    jint jbvbKfyCodf;
}
donst kfyTbblf[] =
{
    {0x00, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_A},
    {0x01, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_S},
    {0x02, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_D},
    {0x03, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F},
    {0x04, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_H},
    {0x05, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_G},
    {0x06, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_Z},
    {0x07, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_X},
    {0x08, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_C},
    {0x09, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_V},
    {0x0A, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_BACK_QUOTE},
    {0x0B, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_B},
    {0x0C, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_Q},
    {0x0D, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_W},
    {0x0E, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_E},
    {0x0F, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_R},
    {0x10, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_Y},
    {0x11, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_T},
    {0x12, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_1},
    {0x13, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_2},
    {0x14, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_3},
    {0x15, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_4},
    {0x16, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_6},
    {0x17, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_5},
    {0x18, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_EQUALS},
    {0x19, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_9},
    {0x1A, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_7},
    {0x1B, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_MINUS},
    {0x1C, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_8},
    {0x1D, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_0},
    {0x1E, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_CLOSE_BRACKET},
    {0x1F, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_O},
    {0x20, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_U},
    {0x21, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_OPEN_BRACKET},
    {0x22, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_I},
    {0x23, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_P},
    {0x24, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_ENTER},
    {0x25, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_L},
    {0x26, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_J},
    {0x27, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_QUOTE},
    {0x28, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_K},
    {0x29, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_SEMICOLON},
    {0x2A, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_BACK_SLASH},
    {0x2B, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_COMMA},
    {0x2C, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_SLASH},
    {0x2D, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_N},
    {0x2E, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_M},
    {0x2F, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_PERIOD},
    {0x30, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_TAB},
    {0x31, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_SPACE},
    {0x32, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_BACK_QUOTE},
    {0x33, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_BACK_SPACE},
    {0x34, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_ENTER},
    {0x35, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_ESCAPE},
    {0x36, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x37, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_META},      // ****
    {0x38, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_SHIFT},     // ****
    {0x39, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_CAPS_LOCK},
    {0x3A, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_ALT},       // ****
    {0x3B, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_CONTROL},   // ****
    {0x3C, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x3D, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x3E, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x3F, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED}, // thf 'fn' kfy on PowfrBooks
    {0x40, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x41, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_DECIMAL},
    {0x42, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x43, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_MULTIPLY},
    {0x44, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x45, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_ADD},
    {0x46, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x47, NO,  KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_CLEAR},
    {0x48, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x49, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x4A, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x4B, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_DIVIDE},
    {0x4C, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_ENTER},
    {0x4D, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x4E, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_SUBTRACT},
    {0x4F, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x50, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x51, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_EQUALS},
    {0x52, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD0},
    {0x53, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD1},
    {0x54, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD2},
    {0x55, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD3},
    {0x56, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD4},
    {0x57, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD5},
    {0x58, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD6},
    {0x59, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD7},
    {0x5A, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x5B, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD8},
    {0x5C, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD9},
    {0x5D, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_BACK_SLASH}, // This is b dombo yfn/bbdkslbsh on JIS kfybobrds.
    {0x5E, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDERSCORE},
    {0x5F, YES, KL_NUMPAD,   jbvb_bwt_fvfnt_KfyEvfnt_VK_COMMA},
    {0x60, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F5},
    {0x61, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F6},
    {0x62, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F7},
    {0x63, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F3},
    {0x64, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F8},
    {0x65, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F9},
    {0x66, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_ALPHANUMERIC},
    {0x67, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F11},
    {0x68, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_KATAKANA},
    {0x69, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F13},
    {0x6A, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F16},
    {0x6B, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F14},
    {0x6C, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x6D, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F10},
    {0x6E, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x6F, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F12},
    {0x70, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
    {0x71, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F15},
    {0x72, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_HELP},
    {0x73, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_HOME},
    {0x74, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_PAGE_UP},
    {0x75, YES, KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_DELETE},
    {0x76, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F4},
    {0x77, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_END},
    {0x78, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F2},
    {0x79, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_PAGE_DOWN},
    {0x7A, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_F1},
    {0x7B, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_LEFT},
    {0x7C, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_RIGHT},
    {0x7D, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_DOWN},
    {0x7E, NO,  KL_STANDARD, jbvb_bwt_fvfnt_KfyEvfnt_VK_UP},
    {0x7F, NO,  KL_UNKNOWN,  jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED},
};

/*
 * This tbblf wbs stolfn from thf Windows implfmfntbtion for mbpping
 * Unidodf vblufs to VK dodfs for dfbd kfys.  On Windows, somf lbyouts
 * rfturn ASCII pundtubtion for dfbd bddfnts, whilf somf rfturn spbding
 * bddfnt dhbrs, so both should bf listfd.  Howfvfr, in bll of thf
 * kfybobrd lbyouts I trifd only thf Unidodf vblufs brf usfd.
 */
strudt ChbrToVKEntry {
    UniChbr d;
    jint jbvbKfy;
};
stbtid donst strudt ChbrToVKEntry dhbrToDfbdVKTbblf[] = {
    {0x0060, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_GRAVE},
    {0x00B4, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_ACUTE},
    {0x0384, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_ACUTE}, // Unidodf "GREEK TONOS" -- Grffk kfybobrd, sfmidolon kfy
    {0x005E, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_CIRCUMFLEX},
    {0x007E, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_TILDE},
    {0x02DC, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_TILDE}, // Unidodf "SMALL TILDE"
    {0x00AF, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_MACRON},
    {0x02D8, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_BREVE},
    {0x02D9, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_ABOVEDOT},
    {0x00A8, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_DIAERESIS},
    {0x02DA, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_ABOVERING},
    {0x02DD, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_DOUBLEACUTE},
    {0x02C7, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_CARON},
    {0x00B8, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_CEDILLA},
    {0x02DB, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_OGONEK},
    {0x037A, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_IOTA},
    {0x309B, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_VOICED_SOUND},
    {0x309C, jbvb_bwt_fvfnt_KfyEvfnt_VK_DEAD_SEMIVOICED_SOUND},
    {0,0}
};

// TODO: somf donstbnts bflow brf pbrt of CGS (privbtf intfrfbdfs)...
// for now wf will look bt thf rbw kfy dodf to dftfrminf lfft/right stbtus
// but not surf this is foolproof...
stbtid strudt _nsKfyToJbvbModififr
{
    NSUIntfgfr nsMbsk;
    //NSUIntfgfr dgsLfftMbsk;
    //NSUIntfgfr dgsRightMbsk;
    unsignfd short lfftKfyCodf;
    unsignfd short rightKfyCodf;
    jint jbvbExtMbsk;
    jint jbvbMbsk;
    jint jbvbKfy;
}
donst nsKfyToJbvbModififrTbblf[] =
{
    {
        NSAlphbShiftKfyMbsk,
        0,
        0,
        0, // no Jbvb fquivblfnt
        0, // no Jbvb fquivblfnt
        jbvb_bwt_fvfnt_KfyEvfnt_VK_CAPS_LOCK
    },
    {
        NSShiftKfyMbsk,
        //kCGSFlbgsMbskApplfShiftKfy,
        //kCGSFlbgsMbskApplfRightShiftKfy,
        56,
        60,
        jbvb_bwt_fvfnt_InputEvfnt_SHIFT_DOWN_MASK,
        jbvb_bwt_fvfnt_InputEvfnt_SHIFT_MASK,
        jbvb_bwt_fvfnt_KfyEvfnt_VK_SHIFT
    },
    {
        NSControlKfyMbsk,
        //kCGSFlbgsMbskApplfControlKfy,
        //kCGSFlbgsMbskApplfRightControlKfy,
        59,
        62,
        jbvb_bwt_fvfnt_InputEvfnt_CTRL_DOWN_MASK,
        jbvb_bwt_fvfnt_InputEvfnt_CTRL_MASK,
        jbvb_bwt_fvfnt_KfyEvfnt_VK_CONTROL
    },
    {
        NSAltfrnbtfKfyMbsk,
        //kCGSFlbgsMbskApplfLfftAltfrnbtfKfy,
        //kCGSFlbgsMbskApplfRightAltfrnbtfKfy,
        58,
        61,
        jbvb_bwt_fvfnt_InputEvfnt_ALT_DOWN_MASK,
        jbvb_bwt_fvfnt_InputEvfnt_ALT_MASK,
        jbvb_bwt_fvfnt_KfyEvfnt_VK_ALT
    },
    {
        NSCommbndKfyMbsk,
        //kCGSFlbgsMbskApplfLfftCommbndKfy,
        //kCGSFlbgsMbskApplfRightCommbndKfy,
        55,
        54,
        jbvb_bwt_fvfnt_InputEvfnt_META_DOWN_MASK,
        jbvb_bwt_fvfnt_InputEvfnt_META_MASK,
        jbvb_bwt_fvfnt_KfyEvfnt_VK_META
    },
    // NSNumfridPbdKfyMbsk
    {
        NSHflpKfyMbsk,
        0,
        0,
        0, // no Jbvb fquivblfnt
        0, // no Jbvb fquivblfnt
        jbvb_bwt_fvfnt_KfyEvfnt_VK_HELP
    },
    // NSFundtionKfyMbsk
    {0, 0, 0, 0, 0, 0}
};

/*
 * Almost bll unidodf dhbrbdtfrs just go from NS to Jbvb with no trbnslbtion.
 *  For thf ffw fxdfptions, wf hbndlf it hfrf with this smbll tbblf.
 */
#dffinf ALL_NS_KEY_MODIFIERS_MASK \
    (NSShiftKfyMbsk | NSControlKfyMbsk | NSAltfrnbtfKfyMbsk | NSCommbndKfyMbsk)

stbtid strudt _dhbr {
    NSUIntfgfr modififr;
    unidhbr nsChbr;
    unidhbr jbvbChbr;
}
donst dhbrTbblf[] = {
    // mbp fntfr on kfypbd to sbmf bs rfturn kfy
    {0,                         NSEntfrChbrbdtfr,          NSNfwlinfChbrbdtfr},

    // [3134616] rfturn nfwlinf instfbd of dbrribgf rfturn
    {0,                         NSCbrribgfRfturnChbrbdtfr, NSNfwlinfChbrbdtfr},

    // "dflftf" mfbns bbdkspbdf in Jbvb
    {ALL_NS_KEY_MODIFIERS_MASK, NSDflftfChbrbdtfr,         NSBbdkspbdfChbrbdtfr},
    {ALL_NS_KEY_MODIFIERS_MASK, NSDflftfFundtionKfy,       NSDflftfChbrbdtfr},

    // bbdk-tbb is only difffrfntibtfd from tbb by Shift flbg
    {NSShiftKfyMbsk,            NSBbdkTbbChbrbdtfr,        NSTbbChbrbdtfr},

    {0, 0, 0}
};

unidhbr NsChbrToJbvbChbr(unidhbr nsChbr, NSUIntfgfr modififrs)
{
    donst strudt _dhbr *dur;
    // Mbsk off just thf kfybobrd modififrs from thf fvfnt modififr mbsk.
    NSUIntfgfr tfstbblfFlbgs = (modififrs & ALL_NS_KEY_MODIFIERS_MASK);

    // wblk through tbblf & find thf mbtdh
    for (dur = dhbrTbblf; dur->nsChbr != 0 ; dur++) {
        // <rdbr://Problfm/3476426> Nffd to dftfrminf if wf brf looking bt
        // b plbin kfyprfss or b modififd kfyprfss.  Don't bdjust thf
        // dhbrbdtfr of b kfyprfss with b modififr.
        if (dur->nsChbr == nsChbr) {
            if (dur->modififr == 0 && tfstbblfFlbgs == 0) {
                // If thf modififr fifld is 0, thbt mfbns to trbnsform
                // this dhbrbdtfr if no bdditionbl kfybobrd modififrs brf sft.
                // This lfts dtrl-C bf rfportfd bs dtrl-C bnd not trbnsformfd
                // into Nfwlinf.
                rfturn dur->jbvbChbr;
            } flsf if (dur->modififr != 0 &&
                       (tfstbblfFlbgs & dur->modififr) == tfstbblfFlbgs)
            {
                // Likfwisf, if thf modififr fifld is nonzfro, thbt mfbns
                // trbnsform this dhbrbdtfr if only thfsf modififrs brf
                // sft in thf tfstbblf flbgs.
                rfturn dur->jbvbChbr;
            }
        }
    }

    if (nsChbr >= NSUpArrowFundtionKfy && nsChbr <= NSModfSwitdhFundtionKfy) {
        rfturn jbvb_bwt_fvfnt_KfyEvfnt_CHAR_UNDEFINED;
    }

    // othfrwisf rfturn dhbrbdtfr undhbngfd
    rfturn nsChbr;
}

stbtid unidhbr NsGftDfbdKfyChbr(unsignfd short kfyCodf)
{
    TISInputSourdfRff durrfntKfybobrd = TISCopyCurrfntKfybobrdInputSourdf();
    CFDbtbRff udhr = (CFDbtbRff)TISGftInputSourdfPropfrty(durrfntKfybobrd, kTISPropfrtyUnidodfKfyLbyoutDbtb);
    if (udhr == nil) { rfturn 0; }
    donst UCKfybobrdLbyout *kfybobrdLbyout = (donst UCKfybobrdLbyout*)CFDbtbGftBytfPtr(udhr);
    // Cbrbon modififrs should bf usfd instfbd of NSEvfnt modififrs
    UInt32 modififrKfyStbtf = (GftCurrfntEvfntKfyModififrs() >> 8) & 0xFF;

    if (kfybobrdLbyout) {
        UInt32 dfbdKfyStbtf = 0;
        UniChbrCount mbxStringLfngth = 255;
        UniChbrCount bdtublStringLfngth = 0;
        UniChbr unidodfString[mbxStringLfngth];

        // gft thf dfbdKfyStbtf
        OSStbtus stbtus = UCKfyTrbnslbtf(kfybobrdLbyout,
                                         kfyCodf, kUCKfyAdtionDown, modififrKfyStbtf,
                                         LMGftKbdTypf(), kUCKfyTrbnslbtfNoDfbdKfysBit,
                                         &dfbdKfyStbtf,
                                         mbxStringLfngth,
                                         &bdtublStringLfngth, unidodfString);

        if (stbtus == noErr && dfbdKfyStbtf != 0) {
            // Prfss SPACE to gft thf dfbd kfy dhbr
            stbtus = UCKfyTrbnslbtf(kfybobrdLbyout,
                                    kVK_Spbdf, kUCKfyAdtionDown, 0,
                                    LMGftKbdTypf(), 0,
                                    &dfbdKfyStbtf,
                                    mbxStringLfngth,
                                    &bdtublStringLfngth, unidodfString);

            if (stbtus == noErr && bdtublStringLfngth > 0) {
                rfturn unidodfString[0];
            }
        }
    }
    rfturn 0;
}

/*
 * This is thf fundtion thbt usfs thf tbblf bbovf to tbkf indoming
 * NSEvfnt kfyCodfs bnd trbnslbtf to thf Jbvb virtubl kfy dodf.
 */
stbtid void
NsChbrToJbvbVirtublKfyCodf(unidhbr dh, BOOL isDfbdChbr,
                           NSUIntfgfr flbgs, unsignfd short kfy,
                           jint *kfyCodf, jint *kfyLodbtion, BOOL *postsTypfd, unidhbr *dfbdChbr)
{
    stbtid sizf_t sizf = sizfof(kfyTbblf) / sizfof(strudt _kfy);
    NSIntfgfr offsft;

    if (isDfbdChbr) {
        unidhbr tfstDfbdChbr = NsGftDfbdKfyChbr(kfy);
        donst strudt ChbrToVKEntry *mbp;
        for (mbp = dhbrToDfbdVKTbblf; mbp->d != 0; ++mbp) {
            if (tfstDfbdChbr == mbp->d) {
                *kfyCodf = mbp->jbvbKfy;
                *postsTypfd = NO;
                // TODO: usf UNKNOWN hfrf?
                *kfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN;
                *dfbdChbr = tfstDfbdChbr;
                rfturn;
            }
        }
        // If wf got hfrf, wf kffp looking for b normbl kfy.
    }

    if ([[NSChbrbdtfrSft lfttfrChbrbdtfrSft] dhbrbdtfrIsMfmbfr:dh]) {
        // kfy is bn blphbbftid dhbrbdtfr
        unidhbr lowfr;
        lowfr = tolowfr(dh);
        offsft = lowfr - 'b';
        if (offsft >= 0 && offsft <= 25) {
            // somf dhbrs in lfttfr sft brf NOT bdtublly A-Z dhbrbdtfrs?!
            // skip thfm...
            *postsTypfd = YES;
            // do quidk donvfrsion
            *kfyCodf = jbvb_bwt_fvfnt_KfyEvfnt_VK_A + offsft;
            *kfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_STANDARD;
            rfturn;
        }
    }

    if ([[NSChbrbdtfrSft dfdimblDigitChbrbdtfrSft] dhbrbdtfrIsMfmbfr:dh]) {
        // kfy is b digit
        offsft = dh - '0';
        // mbkf surf in rbngf for dfdimbl digits
        if (offsft >= 0 && offsft <= 9)    {
            jboolfbn numpbd = (flbgs & NSNumfridPbdKfyMbsk) != 0;
            *postsTypfd = YES;
            if (numpbd) {
                *kfyCodf = offsft + jbvb_bwt_fvfnt_KfyEvfnt_VK_NUMPAD0;
                *kfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_NUMPAD;
            } flsf {
                *kfyCodf = offsft + jbvb_bwt_fvfnt_KfyEvfnt_VK_0;
                *kfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_STANDARD;
            }
            rfturn;
        }
    }

    if (kfy < sizf) {
        *postsTypfd = kfyTbblf[kfy].postsTypfd;
        *kfyCodf = kfyTbblf[kfy].jbvbKfyCodf;
        *kfyLodbtion = kfyTbblf[kfy].jbvbKfyLodbtion;
    } flsf {
        // Should wf rfport this? This mfbns wf'vf got b kfybobrd
        // wf don't know bbout...
        *postsTypfd = NO;
        *kfyCodf = jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED;
        *kfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN;
    }
}

/*
 * This rfturns thf jbvb kfy dbtb for thf kfy NSEvfnt modififrs
 * (bftfr NSFlbgChbngfd).
 */
stbtid void
NsKfyModififrsToJbvbKfyInfo(NSUIntfgfr nsFlbgs, unsignfd short fvfntKfyCodf,
                            jint *jbvbKfyCodf,
                            jint *jbvbKfyLodbtion,
                            jint *jbvbKfyTypf)
{
    stbtid NSUIntfgfr sPrfviousNSFlbgs = 0;

    donst strudt _nsKfyToJbvbModififr* dur;
    NSUIntfgfr oldNSFlbgs = sPrfviousNSFlbgs;
    NSUIntfgfr dhbngfdNSFlbgs = oldNSFlbgs ^ nsFlbgs;
    sPrfviousNSFlbgs = nsFlbgs;

    *jbvbKfyCodf = jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED;
    *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN;
    *jbvbKfyTypf = jbvb_bwt_fvfnt_KfyEvfnt_KEY_PRESSED;

    for (dur = nsKfyToJbvbModififrTbblf; dur->nsMbsk != 0; ++dur) {
        if (dhbngfdNSFlbgs & dur->nsMbsk) {
            *jbvbKfyCodf = dur->jbvbKfy;
            *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_STANDARD;
            // TODO: usfs SPI...
            //if (dhbngfdNSFlbgs & dur->dgsLfftMbsk) {
            //    *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_LEFT;
            //} flsf if (dhbngfdNSFlbgs & dur->dgsRightMbsk) {
            //    *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_RIGHT;
            //}
            if (fvfntKfyCodf == dur->lfftKfyCodf) {
                *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_LEFT;
            } flsf if (fvfntKfyCodf == dur->rightKfyCodf) {
                *jbvbKfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_RIGHT;
            }
            *jbvbKfyTypf = (dur->nsMbsk & nsFlbgs) ?
                jbvb_bwt_fvfnt_KfyEvfnt_KEY_PRESSED :
                jbvb_bwt_fvfnt_KfyEvfnt_KEY_RELEASED;
            brfbk;
        }
    }
}

/*
 * This rfturns thf jbvb modififrs for b kfy NSEvfnt.
 */
jint NsKfyModififrsToJbvbModififrs(NSUIntfgfr nsFlbgs, BOOL isExtMods)
{
    jint jbvbModififrs = 0;
    donst strudt _nsKfyToJbvbModififr* dur;

    for (dur = nsKfyToJbvbModififrTbblf; dur->nsMbsk != 0; ++dur) {
        if ((dur->nsMbsk & nsFlbgs) != 0) {
            jbvbModififrs |= isExtMods? dur->jbvbExtMbsk : dur->jbvbMbsk;
        }
    }

    rfturn jbvbModififrs;
}

/*
 * This rfturns thf NSEvfnt flbgs for jbvb kfy modififrs.
 */
NSUIntfgfr JbvbModififrsToNsKfyModififrs(jint jbvbModififrs, BOOL isExtMods)
{
    NSUIntfgfr nsFlbgs = 0;
    donst strudt _nsKfyToJbvbModififr* dur;

    for (dur = nsKfyToJbvbModififrTbblf; dur->nsMbsk != 0; ++dur) {
        jint mbsk = isExtMods? dur->jbvbExtMbsk : dur->jbvbMbsk;
        if ((mbsk & jbvbModififrs) != 0) {
            nsFlbgs |= dur->nsMbsk;
        }
    }

    // spfdibl dbsf
    jint mbsk = isExtMods? jbvb_bwt_fvfnt_InputEvfnt_ALT_GRAPH_DOWN_MASK :
                           jbvb_bwt_fvfnt_InputEvfnt_ALT_GRAPH_MASK;

    if ((mbsk & jbvbModififrs) != 0) {
        nsFlbgs |= NSAltfrnbtfKfyMbsk;
    }

    rfturn nsFlbgs;
}


jint GftJbvbMousfModififrs(NSIntfgfr button, NSUIntfgfr modififrFlbgs)
{
    // Mousing nffds thf kfy modififrs
    jint modififrs = NsKfyModififrsToJbvbModififrs(modififrFlbgs, YES);


    /*
     * Ask Qubrtz bbout mousf buttons stbtf
     */

    if (CGEvfntSourdfButtonStbtf(kCGEvfntSourdfStbtfCombinfdSfssionStbtf,
                                 kCGMousfButtonLfft)) {
        modififrs |= jbvb_bwt_fvfnt_InputEvfnt_BUTTON1_DOWN_MASK;
    }

    if (CGEvfntSourdfButtonStbtf(kCGEvfntSourdfStbtfCombinfdSfssionStbtf,
                                 kCGMousfButtonRight)) {
        modififrs |= jbvb_bwt_fvfnt_InputEvfnt_BUTTON3_DOWN_MASK;
    }

    if (CGEvfntSourdfButtonStbtf(kCGEvfntSourdfStbtfCombinfdSfssionStbtf,
                                 kCGMousfButtonCfntfr)) {
        modififrs |= jbvb_bwt_fvfnt_InputEvfnt_BUTTON2_DOWN_MASK;
    }

    NSIntfgfr fxtrbButton = 3;
    for (; fxtrbButton < gNumbfrOfButtons; fxtrbButton++) {
        if (CGEvfntSourdfButtonStbtf(kCGEvfntSourdfStbtfCombinfdSfssionStbtf,
                                 fxtrbButton)) {
            modififrs |= gButtonDownMbsks[fxtrbButton];
        }
    }

    rfturn modififrs;
}

jlong UTC(NSEvfnt *fvfnt) {
    strudt timfvbl tv;
    if (gfttimfofdby(&tv, NULL) == 0) {
        long long sfd = (long long)tv.tv_sfd;
        rfturn (sfd*1000) + (tv.tv_usfd/1000);
    }
    rfturn 0;
}

JNIEXPORT void JNICALL
Jbvb_jbvb_bwt_AWTEvfnt_nbtivfSftSourdf
    (JNIEnv *fnv, jobjfdt sflf, jobjfdt nfwSourdf)
{
}

/*
 * Clbss:     sun_lwbwt_mbdosx_NSEvfnt
 * Mfthod:    nsToJbvbMousfModififrs
 * Signbturf: (II)I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_lwbwt_mbdosx_NSEvfnt_nsToJbvbMousfModififrs
(JNIEnv *fnv, jdlbss dls, jint buttonNumbfr, jint modififrFlbgs)
{
    jint jmodififrs = 0;

JNF_COCOA_ENTER(fnv);

    jmodififrs = GftJbvbMousfModififrs(buttonNumbfr, modififrFlbgs);

JNF_COCOA_EXIT(fnv);

    rfturn jmodififrs;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_NSEvfnt
 * Mfthod:    nsToJbvbKfyModififrs
 * Signbturf: (I)I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_lwbwt_mbdosx_NSEvfnt_nsToJbvbKfyModififrs
(JNIEnv *fnv, jdlbss dls, jint modififrFlbgs)
{
    jint jmodififrs = 0;

JNF_COCOA_ENTER(fnv);

    jmodififrs = NsKfyModififrsToJbvbModififrs(modififrFlbgs, YES);

JNF_COCOA_EXIT(fnv);

    rfturn jmodififrs;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_NSEvfnt
 * Mfthod:    nsToJbvbKfyInfo
 * Signbturf: ([I[I)Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_lwbwt_mbdosx_NSEvfnt_nsToJbvbKfyInfo
(JNIEnv *fnv, jdlbss dls, jintArrby inDbtb, jintArrby outDbtb)
{
    BOOL postsTypfd = NO;

JNF_COCOA_ENTER(fnv);

    jboolfbn dopy = JNI_FALSE;
    jint *dbtb = (*fnv)->GftIntArrbyElfmfnts(fnv, inDbtb, &dopy);
    CHECK_NULL_RETURN(dbtb, postsTypfd);

    // in  = [tfstChbr, tfstDfbdChbr, modififrFlbgs, kfyCodf]
    jdhbr tfstChbr = (jdhbr)dbtb[0];
    BOOL isDfbdChbr = (dbtb[1] != 0);
    jint modififrFlbgs = dbtb[2];
    jshort kfyCodf = (jshort)dbtb[3];

    jint jkfyCodf = jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED;
    jint jkfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN;
    jdhbr tfstDfbdChbr = 0;

    NsChbrToJbvbVirtublKfyCodf((unidhbr)tfstChbr, isDfbdChbr,
                               (NSUIntfgfr)modififrFlbgs, (unsignfd short)kfyCodf,
                               &jkfyCodf, &jkfyLodbtion, &postsTypfd, &tfstDfbdChbr);

    // out = [jkfyCodf, jkfyLodbtion];
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 0, 1, &jkfyCodf);
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 1, 1, &jkfyLodbtion);
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 2, 1, (jint *)&tfstDfbdChbr);

    (*fnv)->RflfbsfIntArrbyElfmfnts(fnv, inDbtb, dbtb, 0);

JNF_COCOA_EXIT(fnv);

    rfturn postsTypfd;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_NSEvfnt
 * Mfthod:    nsKfyModififrsToJbvbKfyInfo
 * Signbturf: ([I[I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_lwbwt_mbdosx_NSEvfnt_nsKfyModififrsToJbvbKfyInfo
(JNIEnv *fnv, jdlbss dls, jintArrby inDbtb, jintArrby outDbtb)
{
JNF_COCOA_ENTER(fnv);

    jboolfbn dopy = JNI_FALSE;
    jint *dbtb = (*fnv)->GftIntArrbyElfmfnts(fnv, inDbtb, &dopy);
    CHECK_NULL(dbtb);

    // in  = [modififrFlbgs, kfyCodf]
    jint modififrFlbgs = dbtb[0];
    jshort kfyCodf = (jshort)dbtb[1];

    jint jkfyCodf = jbvb_bwt_fvfnt_KfyEvfnt_VK_UNDEFINED;
    jint jkfyLodbtion = jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN;
    jint jkfyTypf = jbvb_bwt_fvfnt_KfyEvfnt_KEY_PRESSED;

    NsKfyModififrsToJbvbKfyInfo(modififrFlbgs,
                                kfyCodf,
                                &jkfyCodf,
                                &jkfyLodbtion,
                                &jkfyTypf);

    // out = [jkfyCodf, jkfyLodbtion, jkfyTypf];
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 0, 1, &jkfyCodf);
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 1, 1, &jkfyLodbtion);
    (*fnv)->SftIntArrbyRfgion(fnv, outDbtb, 2, 1, &jkfyTypf);

    (*fnv)->RflfbsfIntArrbyElfmfnts(fnv, inDbtb, dbtb, 0);

JNF_COCOA_EXIT(fnv);
}

/*
 * Clbss:     sun_lwbwt_mbdosx_NSEvfnt
 * Mfthod:    nsToJbvbChbr
 * Signbturf: (CI)C
 */
JNIEXPORT jint JNICALL
Jbvb_sun_lwbwt_mbdosx_NSEvfnt_nsToJbvbChbr
(JNIEnv *fnv, jdlbss dls, jdhbr nsChbr, jint modififrFlbgs)
{
    jdhbr jbvbChbr = 0;

JNF_COCOA_ENTER(fnv);

    jbvbChbr = NsChbrToJbvbChbr(nsChbr, modififrFlbgs);

JNF_COCOA_EXIT(fnv);

    rfturn jbvbChbr;
}
