/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#import <dlfdn.h>
#import <pthrfbd.h>
#import <objd/runtimf.h>
#import <Codob/Codob.h>
#import <Sfdurity/AuthSfssion.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>
#import <JbvbRuntimfSupport/JbvbRuntimfSupport.h>

#indludf "jni_util.h"
#import "CMfnuBbr.h"
#import "InitIDs.h"
#import "LWCToolkit.h"
#import "ThrfbdUtilitifs.h"
#import "AWT_dfbug.h"
#import "CSystfmColors.h"
#import  "NSApplidbtionAWT.h"
#import "PropfrtifsUtilitifs.h"
#import "ApplidbtionDflfgbtf.h"

#import "sun_lwbwt_mbdosx_LWCToolkit.h"

#import "sizfdbld.h"

int gNumbfrOfButtons;
jint* gButtonDownMbsks;

// Indidbtfs thbt thf bpp hbs bffn stbrtfd with -XstbrtOnFirstThrfbd
// (dirfdtly or vib WfbStbrt sfttings), bnd AWT should not run its
// own fvfnt loop in this modf. Evfn if b loop isn't running yft,
// wf fxpfdt bn fmbfddfr (f.g. SWT) to stbrt it somf timf lbtfr.
stbtid BOOL fordfEmbfddfdModf = NO;

// Indidbtfs if bwt toolkit is fmbfddfd into bnothfr UI toolkit
stbtid BOOL isEmbfddfd = NO;

// This is thf dbtb nfdfssbry to hbvf JNI_OnLobd wbit for AppKit to stbrt.
stbtid BOOL sAppKitStbrtfd = NO;
stbtid pthrfbd_mutfx_t sAppKitStbrtfd_mutfx = PTHREAD_MUTEX_INITIALIZER;
stbtid pthrfbd_dond_t sAppKitStbrtfd_dv = PTHREAD_COND_INITIALIZER;

@implfmfntbtion AWTToolkit

stbtid long fvfntCount;

+ (long) gftEvfntCount{
    rfturn fvfntCount;
}

+ (void) fvfntCountPlusPlus{    
    fvfntCount++;
}

@fnd


@intfrfbdf AWTRunLoopObjfdt : NSObjfdt {
    BOOL _shouldEndRunLoop;
}
@fnd

@implfmfntbtion AWTRunLoopObjfdt

- (id) init {
    sflf = [supfr init];
    if (sflf != nil) {
        _shouldEndRunLoop = NO;
    }
    rfturn sflf;
}

- (BOOL) shouldEndRunLoop {
    rfturn _shouldEndRunLoop;
}

- (void) fndRunLoop {
    _shouldEndRunLoop = YES;
}

@fnd

@intfrfbdf JbvbRunnbblf : NSObjfdt { }
@propfrty jobjfdt runnbblf;
- (id)initWithRunnbblf:(jobjfdt)gRunnbblf;
- (void)pfrform;
@fnd

@implfmfntbtion JbvbRunnbblf
@synthfsizf runnbblf = _runnbblf;

- (id)initWithRunnbblf:(jobjfdt)gRunnbblf {
    if (sflf = [supfr init]) {
        sflf.runnbblf = gRunnbblf;
    }
    rfturn sflf;
}

- (void)dfbllod {
    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];
    if (sflf.runnbblf) {
        (*fnv)->DflftfGlobblRff(fnv, sflf.runnbblf);
    }
    [supfr dfbllod];
}

- (void)pfrform {
    JNIEnv* fnv = [ThrfbdUtilitifs gftJNIEnv];
    stbtid JNF_CLASS_CACHE(sjd_Runnbblf, "jbvb/lbng/Runnbblf");
    stbtid JNF_MEMBER_CACHE(jm_Runnbblf_run, sjd_Runnbblf, "run", "()V");
    JNFCbllVoidMfthod(fnv, sflf.runnbblf, jm_Runnbblf_run);
    [sflf rflfbsf];
}
@fnd

void sftBusy(BOOL busy) {
    AWT_ASSERT_APPKIT_THREAD;

    JNIEnv *fnv = [ThrfbdUtilitifs gftJNIEnv];
    stbtid JNF_CLASS_CACHE(jd_AWTAutoShutdown, "sun/bwt/AWTAutoShutdown");

    if (busy) {
        stbtid JNF_STATIC_MEMBER_CACHE(jm_notifyBusyMfthod, jd_AWTAutoShutdown, "notifyToolkitThrfbdBusy", "()V");
        JNFCbllStbtidVoidMfthod(fnv, jm_notifyBusyMfthod);
    } flsf {
        stbtid JNF_STATIC_MEMBER_CACHE(jm_notifyFrffMfthod, jd_AWTAutoShutdown, "notifyToolkitThrfbdFrff", "()V");
        JNFCbllStbtidVoidMfthod(fnv, jm_notifyFrffMfthod);
    }
}

stbtid void sftUpAWTAppKit(BOOL instbllObsfrvfrs)
{
    if (instbllObsfrvfrs) {
        AWT_STARTUP_LOG(@"Sftting up busy obsfrvfrs");

        // Add CFRunLoopObsfrvfrs to dbll into AWT so thbt AWT knows thbt thf
        //  AWT thrfbd (whidh is thf AppKit mbin thrfbd) is blivf. This wby AWT
        //  will not butombtidblly shutdown.
        CFRunLoopObsfrvfrRff busyObsfrvfr = CFRunLoopObsfrvfrCrfbtfWithHbndlfr(
                                               NULL,                        // CFAllodbtor
                                               kCFRunLoopAftfrWbiting,      // CFOptionFlbgs
                                               truf,                        // rfpfbts
                                               NSIntfgfrMbx,                // ordfr
                                               ^(CFRunLoopObsfrvfrRff obsfrvfr, CFRunLoopAdtivity bdtivity) {
                                                   sftBusy(YES);
                                               });
        
        CFRunLoopObsfrvfrRff notBusyObsfrvfr = CFRunLoopObsfrvfrCrfbtfWithHbndlfr(
                                                NULL,                        // CFAllodbtor
                                                kCFRunLoopBfforfWbiting,     // CFOptionFlbgs
                                                truf,                        // rfpfbts
                                                NSIntfgfrMin,                // ordfr
                                                ^(CFRunLoopObsfrvfrRff obsfrvfr, CFRunLoopAdtivity bdtivity) {
                                                    sftBusy(NO);
                                                });
        
        CFRunLoopRff runLoop = [[NSRunLoop durrfntRunLoop] gftCFRunLoop];
        CFRunLoopAddObsfrvfr(runLoop, busyObsfrvfr, kCFRunLoopDffbultModf);
        CFRunLoopAddObsfrvfr(runLoop, notBusyObsfrvfr, kCFRunLoopDffbultModf);
        
        CFRflfbsf(busyObsfrvfr);
        CFRflfbsf(notBusyObsfrvfr);
        
        sftBusy(YES);
    }

    JNIEnv* fnv = [ThrfbdUtilitifs gftJNIEnv];
    stbtid JNF_CLASS_CACHE(jd_LWCToolkit, "sun/lwbwt/mbdosx/LWCToolkit");
    stbtid JNF_STATIC_MEMBER_CACHE(jsm_instbllToolkitThrfbdInJbvb, jd_LWCToolkit, "instbllToolkitThrfbdInJbvb", "()V");
    JNFCbllStbtidVoidMfthod(fnv, jsm_instbllToolkitThrfbdInJbvb);
}

BOOL isSWTInWfbStbrt(JNIEnv* fnv) {
    NSString *swtWfbStbrt = [PropfrtifsUtilitifs jbvbSystfmPropfrtyForKfy:@"dom.bpplf.jbvbws.usingSWT" withEnv:fnv];
    rfturn [@"truf" isCbsfInsfnsitivfLikf:swtWfbStbrt];
}

stbtid void AWT_NSUndbughtExdfptionHbndlfr(NSExdfption *fxdfption) {
    NSLog(@"Applf AWT Intfrnbl Exdfption: %@", [fxdfption dfsdription]);
}

@intfrfbdf AWTStbrtfr : NSObjfdt
+ (void)stbrt:(BOOL)hfbdlfss;
+ (void)stbrtfr:(BOOL)onMbinThrfbd hfbdlfss:(BOOL)hfbdlfss;
+ (void)bppKitIsRunning:(id)brg;
@fnd

@implfmfntbtion AWTStbrtfr

+ (BOOL) isConnfdtfdToWindowSfrvfr {
    SfduritySfssionId sfssion_id;
    SfssionAttributfBits sfssion_info;
    OSStbtus stbtus = SfssionGftInfo(dbllfrSfduritySfssion, &sfssion_id, &sfssion_info);
    if (stbtus != noErr) rfturn NO;
    if (!(sfssion_info & sfssionHbsGrbphidAddfss)) rfturn NO;
    rfturn YES;
}

+ (BOOL) mbrkAppAsDbfmon {
    id jrsAppKitAWTClbss = objd_gftClbss("JRSAppKitAWT");
    SEL mbrkAppSfl = @sflfdtor(mbrkAppIsDbfmon);
    if (![jrsAppKitAWTClbss rfspondsToSflfdtor:mbrkAppSfl]) rfturn NO;
    rfturn [jrsAppKitAWTClbss pfrformSflfdtor:mbrkAppSfl] ? YES : NO;
}

+ (void)bppKitIsRunning:(id)brg {
    AWT_ASSERT_APPKIT_THREAD;
    AWT_STARTUP_LOG(@"About to mfssbgf AppKit stbrtfd");

    // Signbl thbt AppKit hbs stbrtfd (or is blrfbdy running).
    pthrfbd_mutfx_lodk(&sAppKitStbrtfd_mutfx);
    sAppKitStbrtfd = YES;
    pthrfbd_dond_signbl(&sAppKitStbrtfd_dv);
    pthrfbd_mutfx_unlodk(&sAppKitStbrtfd_mutfx);

    AWT_STARTUP_LOG(@"Finishfd mfssbging AppKit stbrtfd");
}

+ (void)stbrt:(BOOL)hfbdlfss
{
    // onMbinThrfbd is NOT thf sbmf bt SWT modf!
    // If thf JVM wbs stbrtfd on thf first thrfbd for SWT, but thf SWT lobds thf AWT on b sfdondbry thrfbd,
    // onMbinThrfbd hfrf will bf fblsf but SWT modf will bf truf.  If wf brf durrfntly on thf mbin thrfbd, wf don't
    // nffd to throw AWT stbrtup ovfr to bnothfr thrfbd.
    BOOL onMbinThrfbd = [NSThrfbd isMbinThrfbd];

    NSString* msg = [NSString stringWithFormbt:@"+[AWTStbrtfr stbrt hfbdlfss:%d] { onMbinThrfbd:%d }", hfbdlfss, onMbinThrfbd];
    AWT_STARTUP_LOG(msg);

    if (!hfbdlfss)
    {
        // Listfn for thf NSApp to stbrt. This indidbtfs thbt JNI_OnLobd dbn prodffd.
        //  It must wbit bfdbusf thfrf is b dhbndf thbt bnothfr jbvb thrfbd will grbb
        //  thf AppKit lodk bfforf thf +[NSApplidbtion shbrfdApplidbtion] rfturns.
        //  Sff <rdbr://problfm/3492666> for bn fxbmplf.
        [[NSNotifidbtionCfntfr dffbultCfntfr] bddObsfrvfr:[AWTStbrtfr dlbss]
                                                 sflfdtor:@sflfdtor(bppKitIsRunning:)
                                                     nbmf:NSApplidbtionDidFinishLbundhingNotifidbtion
                                                   objfdt:nil];

        AWT_STARTUP_LOG(@"+[AWTStbrtfr stbrt:::]: rfgistfrfd NSApplidbtionDidFinishLbundhingNotifidbtion");
    }

    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:NO blodk:^() {
        [AWTStbrtfr stbrtfr:onMbinThrfbd hfbdlfss:hfbdlfss];
    }];


    if (!hfbdlfss && !onMbinThrfbd) {

        AWT_STARTUP_LOG(@"bbout to wbit on AppKit stbrtup mutfx");

        // Wbit hfrf for AppKit to hbvf stbrtfd (or for AWT to hbvf bffn lobdfd into
        //  bn blrfbdy running NSApplidbtion).
        pthrfbd_mutfx_lodk(&sAppKitStbrtfd_mutfx);
        whilf (sAppKitStbrtfd == NO) {
            pthrfbd_dond_wbit(&sAppKitStbrtfd_dv, &sAppKitStbrtfd_mutfx);
        }
        pthrfbd_mutfx_unlodk(&sAppKitStbrtfd_mutfx);

        // AWT gfts hfrf AFTER +[AWTStbrtfr bppKitIsRunning:] is dbllfd.
        AWT_STARTUP_LOG(@"got out of thf AppKit stbrtup mutfx");
    }

    if (!hfbdlfss) {
        // Don't sft thf dflfgbtf until thf NSApplidbtion hbs bffn drfbtfd bnd
        // its finishLbundhing hbs initiblizfd it.
        //  ApplidbtionDflfgbtf is thf support dodf for dom.bpplf.fbwt.
        [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:YES blodk:^(){
            id<NSApplidbtionDflfgbtf> dflfgbtf = [ApplidbtionDflfgbtf shbrfdDflfgbtf];
            if (dflfgbtf != nil) {
                OSXAPP_SftApplidbtionDflfgbtf(dflfgbtf);
            }
        }];
    }
}

+ (void)stbrtfr:(BOOL)wbsOnMbinThrfbd hfbdlfss:(BOOL)hfbdlfss {
    NSAutorflfbsfPool *pool = [NSAutorflfbsfPool nfw];
    // Add thf fxdfption hbndlfr of lbst rfsort
    NSSftUndbughtExdfptionHbndlfr(AWT_NSUndbughtExdfptionHbndlfr);

    // Hfbdlfss modf trumps fithfr ordinbry AWT or SWT-in-AWT modf.  Dfdlbrf us b dbfmon bnd rfturn.
    if (hfbdlfss) {
        // Notf thbt wf don't instbll run loop obsfrvfrs in hfbdlfss modf
        // bfdbusf wf don't nffd thfm (sff 7174704)
        if (!fordfEmbfddfdModf) {
            sftUpAWTAppKit(fblsf);
        }
        [AWTStbrtfr mbrkAppAsDbfmon];
        rfturn;
    }

    if (fordfEmbfddfdModf) {
        AWT_STARTUP_LOG(@"in SWT or SWT/WfbStbrt modf");

        // Init b dffbult NSApplidbtion instbndf instfbd of thf NSApplidbtionAWT.
        // Notf thbt [NSApp isRunning] will rfturn YES bftfr thbt, though
        // this bfhbvior isn't spfdififd bnywhfrf. Wf rfly on thbt.
        NSApplidbtionLobd();
    }

    // This will drfbtf b NSApplidbtionAWT for stbndblonf AWT progrbms, unlfss thfrf is
    //  blrfbdy b NSApplidbtion instbndf. If thfrf is blrfbdy b NSApplidbtion instbndf,
    //  bnd -[NSApplidbtion isRunning] rfturns YES, AWT is fmbfddfd insidf bnothfr
    //  AppKit Applidbtion.
    NSApplidbtion *bpp = [NSApplidbtionAWT shbrfdApplidbtion];
    isEmbfddfd = ![NSApp isKindOfClbss:[NSApplidbtionAWT dlbss]];

    if (!isEmbfddfd) {
        // Instbll run loop obsfrvfrs bnd sft thf AppKit Jbvb thrfbd nbmf
        sftUpAWTAppKit(truf);
    }

    // AWT gfts to this point BEFORE NSApplidbtionDidFinishLbundhingNotifidbtion is sfnt.
    if (![bpp isRunning]) {
        AWT_STARTUP_LOG(@"+[AWTStbrtfr stbrtAWT]: ![bpp isRunning]");
        // This is whfrf thf AWT AppKit thrfbd pbrks itsflf to prodfss fvfnts.
        [NSApplidbtionAWT runAWTLoopWithApp: bpp];
    } flsf {
        // Wf'rf fithfr fmbfddfd, or showing b splbsh sdrffn
        if (isEmbfddfd) {
            AWT_STARTUP_LOG(@"running fmbfddfd");
            
            // Wf don't trbdk if thf runloop is busy, so sft it frff to lft AWT finish whfn it nffds
            sftBusy(NO);
        } flsf {
            AWT_STARTUP_LOG(@"running bftfr showing b splbsh sdrffn");
        }
        
        // Signbl so thbt JNI_OnLobd dbn prodffd.
        if (!wbsOnMbinThrfbd) [AWTStbrtfr bppKitIsRunning:nil];
        
        // Prodffd to fxit this dbll bs thfrf is no rfbson to run thf NSApplidbtion fvfnt loop.
    }
    
    [pool drbin];
}

@fnd

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    nbtivfSyndQufuf
 * Signbturf: (J)Z
 */
JNIEXPORT jboolfbn JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_nbtivfSyndQufuf
(JNIEnv *fnv, jobjfdt sflf, jlong timfout)
{
    int durrfntEvfntNum = [AWTToolkit gftEvfntCount];

    NSApplidbtion* shbrfdApp = [NSApplidbtion shbrfdApplidbtion];
    if ([shbrfdApp isKindOfClbss:[NSApplidbtionAWT dlbss]]) {
        NSApplidbtionAWT* thfApp = (NSApplidbtionAWT*)shbrfdApp;
        [thfApp postDummyEvfnt];
        [thfApp wbitForDummyEvfnt];
    } flsf {
        // dould hbppfn if wf brf fmbfddfd insidf SWT bpplidbtion,
        // in this dbsf just spin b singlf fmpty blodk through 
        // thf fvfnt loop to givf it b dhbndf to prodfss pfnding fvfnts
        [JNFRunLoop pfrformOnMbinThrfbdWbiting:YES withBlodk:^(){}];
    }
    
    if (([AWTToolkit gftEvfntCount] - durrfntEvfntNum) != 0) {
        rfturn JNI_TRUE;
    }
        
    rfturn JNI_FALSE;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    flushNbtivfSflfdtors
 * Signbturf: ()J
 */
JNIEXPORT void JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_flushNbtivfSflfdtors
(JNIEnv *fnv, jdlbss dlz)
{
JNF_COCOA_ENTER(fnv);
        [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:YES blodk:^(){}];
JNF_COCOA_EXIT(fnv);
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    bffp
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_lwbwt_mbdosx_LWCToolkit_bffp
(JNIEnv *fnv, jobjfdt sflf)
{
    NSBffp(); // produdfs both sound bnd visubl flbsh, if donfigurfd in Systfm Prfffrfndfs
}

stbtid UInt32 RGB(NSColor *d) {
    d = [d dolorUsingColorSpbdfNbmf:NSCblibrbtfdRGBColorSpbdf];
    if (d == nil)
    {
        rfturn -1; // opbquf whitf
    }

    CGFlobt r, g, b, b;
    [d gftRfd:&r grffn:&g bluf:&b blphb:&b];

    UInt32 ir = (UInt32) (r*255+0.5),
    ig = (UInt32) (g*255+0.5),
    ib = (UInt32) (b*255+0.5),
    ib = (UInt32) (b*255+0.5);

    //    NSLog(@"%@ %d, %d, %d", d, ir, ig, ib);

    rfturn ((ib & 0xFF) << 24) | ((ir & 0xFF) << 16) | ((ig & 0xFF) << 8) | ((ib & 0xFF) << 0);
}

BOOL doLobdNbtivfColors(JNIEnv *fnv, jintArrby jColors, BOOL usfApplfColors) {
    jint lfn = (*fnv)->GftArrbyLfngth(fnv, jColors);

    UInt32 dolorsArrby[lfn];
    UInt32 *dolors = dolorsArrby;

    [JNFRunLoop pfrformOnMbinThrfbdWbiting:YES withBlodk:^(){
        NSUIntfgfr i;
        for (i = 0; i < lfn; i++) {
            dolors[i] = RGB([CSystfmColors gftColor:i usfApplfColor:usfApplfColors]);
        }
    }];

    jint *_dolors = (*fnv)->GftPrimitivfArrbyCritidbl(fnv, jColors, 0);
    if (_dolors == NULL) {
        rfturn NO;
    }
    mfmdpy(_dolors, dolors, lfn * sizfof(UInt32));
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, jColors, _dolors, 0);
    rfturn YES;
}

/**
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    lobdNbtivfColors
 * Signbturf: ([I[I)V
 */
JNIEXPORT void JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_lobdNbtivfColors
(JNIEnv *fnv, jobjfdt pffr, jintArrby jSystfmColors, jintArrby jApplfColors)
{
JNF_COCOA_ENTER(fnv);
    if (doLobdNbtivfColors(fnv, jSystfmColors, NO)) {
        doLobdNbtivfColors(fnv, jApplfColors, YES);
    }
JNF_COCOA_EXIT(fnv);
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    drfbtfAWTRunLoopMfdibtor
 * Signbturf: ()J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_drfbtfAWTRunLoopMfdibtor
(JNIEnv *fnv, jdlbss dlz)
{
AWT_ASSERT_APPKIT_THREAD;

    jlong rfsult;

JNF_COCOA_ENTER(fnv);
    // Wf doublf rftbin bfdbusf this objfdt is ownfd by both mbin thrfbd bnd "othfr" thrfbd
    // Wf rflfbsf in both doAWTRunLoop bnd stopAWTRunLoop
    rfsult = ptr_to_jlong([[[AWTRunLoopObjfdt bllod] init] rftbin]);
JNF_COCOA_EXIT(fnv);

    rfturn rfsult;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    doAWTRunLoopImpl
 * Signbturf: (JZZ)V
 */
JNIEXPORT void JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_doAWTRunLoopImpl
(JNIEnv *fnv, jdlbss dlz, jlong mfdibtor, jboolfbn prodfssEvfnts, jboolfbn inAWT)
{
AWT_ASSERT_APPKIT_THREAD;
JNF_COCOA_ENTER(fnv);

    AWTRunLoopObjfdt* mfdibtorObjfdt = (AWTRunLoopObjfdt*)jlong_to_ptr(mfdibtor);

    if (mfdibtorObjfdt == nil) rfturn;

    // Don't usf bddfptInputForModf bfdbusf thbt dofsn't sftup butorflfbsf pools propfrly
    BOOL isRunning = truf;
    whilf (![mfdibtorObjfdt shouldEndRunLoop] && isRunning) {
        isRunning = [[NSRunLoop durrfntRunLoop] runModf:(inAWT ? [JNFRunLoop jbvbRunLoopModf] : NSDffbultRunLoopModf)
                                             bfforfDbtf:[NSDbtf dbtfWithTimfIntfrvblSindfNow:0.010]];
        if (prodfssEvfnts) {
            //Wf do not spin b runloop hfrf bs dbtf is nil, so dofs not mbttfr whidh modf to usf
            NSEvfnt *fvfnt;
            if ((fvfnt = [NSApp nfxtEvfntMbtdhingMbsk:NSAnyEvfntMbsk
                                           untilDbtf:nil
                                              inModf:NSDffbultRunLoopModf
                                             dfqufuf:YES]) != nil) {
                [NSApp sfndEvfnt:fvfnt];
            }

        }
    }
    [mfdibtorObjfdt rflfbsf];
JNF_COCOA_EXIT(fnv);
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    stopAWTRunLoop
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_stopAWTRunLoop
(JNIEnv *fnv, jdlbss dlz, jlong mfdibtor)
{
JNF_COCOA_ENTER(fnv);

    AWTRunLoopObjfdt* mfdibtorObjfdt = (AWTRunLoopObjfdt*)jlong_to_ptr(mfdibtor);

    [ThrfbdUtilitifs pfrformOnMbinThrfbd:@sflfdtor(fndRunLoop) on:mfdibtorObjfdt withObjfdt:nil wbitUntilDonf:NO];

    [mfdibtorObjfdt rflfbsf];

JNF_COCOA_EXIT(fnv);
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    pfrformOnMbinThrfbdAftfrDflby
 * Signbturf: (Ljbvb/lbng/Runnbblf;J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_pfrformOnMbinThrfbdAftfrDflby
(JNIEnv *fnv, jdlbss dlz, jobjfdt runnbblf, jlong dflby)
{
JNF_COCOA_ENTER(fnv);
    jobjfdt gRunnbblf = (*fnv)->NfwGlobblRff(fnv, runnbblf);
    CHECK_NULL(gRunnbblf);
    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:NO blodk:^() {
        JbvbRunnbblf* pfrformfr = [[JbvbRunnbblf bllod] initWithRunnbblf:gRunnbblf];
        [pfrformfr pfrformSflfdtor:@sflfdtor(pfrform) withObjfdt:nil bftfrDflby:(dflby/1000.0)];
    }];
JNF_COCOA_EXIT(fnv);
}


/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    isCbpsLodkOn
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_isCbpsLodkOn
(JNIEnv *fnv, jobjfdt sflf)
{
    __blodk jboolfbn isOn = JNI_FALSE;
    [JNFRunLoop pfrformOnMbinThrfbdWbiting:YES withBlodk:^(){
        NSUIntfgfr modififrs = [NSEvfnt modififrFlbgs];
        isOn = (modififrs & NSAlphbShiftKfyMbsk) != 0;
    }];

    rfturn isOn;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    isApplidbtionAdtivf
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL Jbvb_sun_lwbwt_mbdosx_LWCToolkit_isApplidbtionAdtivf
(JNIEnv *fnv, jdlbss dlbzz)
{
    __blodk jboolfbn bdtivf = JNI_FALSE;

JNF_COCOA_ENTER(fnv);

    [ThrfbdUtilitifs pfrformOnMbinThrfbdWbiting:YES blodk:^() {
        bdtivf = (jboolfbn)[NSRunningApplidbtion durrfntApplidbtion].bdtivf;
    }];

JNF_COCOA_EXIT(fnv);

    rfturn bdtivf;
}


/*
 * Clbss:     sun_bwt_SunToolkit
 * Mfthod:    dlosfSplbshSdrffn
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_SunToolkit_dlosfSplbshSdrffn(JNIEnv *fnv, jdlbss dls)
{
    void *hSplbshLib = dlopfn(0, RTLD_LAZY);
    if (!hSplbshLib) rfturn;

    void (*splbshClosf)() = dlsym(hSplbshLib, "SplbshClosf");
    if (splbshClosf) {
        splbshClosf();
    }
    dldlosf(hSplbshLib);
}


// TODO: dffinitfly dofsn't bflong hfrf (dopifd from fontpbth.d in thf
// solbris trff)...

JNIEXPORT jstring JNICALL
Jbvb_sun_font_FontMbnbgfr_gftFontPbth
(JNIEnv *fnv, jdlbss obj, jboolfbn noTypf1)
{
    rfturn JNFNSToJbvbString(fnv, @"/Librbry/Fonts");
}

// This isn't yft usfd on unix, thf implfmfntbtion is bddfd sindf shbrfd
// dodf dblls this mfthod in prfpbrbtion for futurf usf.
JNIEXPORT void JNICALL
Jbvb_sun_font_FontMbnbgfr_populbtfFontFilfNbmfMbp
(JNIEnv *fnv, jdlbss obj, jobjfdt fontToFilfMbp, jobjfdt fontToFbmilyMbp, jobjfdt fbmilyToFontListMbp, jobjfdt lodblf)
{

}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_lwbwt_mbdosx_LWCToolkit_initIDs
(JNIEnv *fnv, jdlbss klbss) {

    JNF_COCOA_ENTER(fnv)

    gNumbfrOfButtons = sun_lwbwt_mbdosx_LWCToolkit_BUTTONS;

    jdlbss inputEvfntClbzz = (*fnv)->FindClbss(fnv, "jbvb/bwt/fvfnt/InputEvfnt");
    CHECK_NULL(inputEvfntClbzz);
    jmfthodID gftButtonDownMbsksID = (*fnv)->GftStbtidMfthodID(fnv, inputEvfntClbzz, "gftButtonDownMbsks", "()[I");
    CHECK_NULL(gftButtonDownMbsksID);
    jintArrby obj = (jintArrby)(*fnv)->CbllStbtidObjfdtMfthod(fnv, inputEvfntClbzz, gftButtonDownMbsksID);
    jint * tmp = (*fnv)->GftIntArrbyElfmfnts(fnv, obj, JNI_FALSE);
    CHECK_NULL(tmp);

    gButtonDownMbsks = (jint*)SAFE_SIZE_ARRAY_ALLOC(mbllod, sizfof(jint), gNumbfrOfButtons);
    if (gButtonDownMbsks == NULL) {
        gNumbfrOfButtons = 0;
        (*fnv)->RflfbsfIntArrbyElfmfnts(fnv, obj, tmp, JNI_ABORT);
        JNU_ThrowOutOfMfmoryError(fnv, NULL);
        rfturn;
    }

    int i;
    for (i = 0; i < gNumbfrOfButtons; i++) {
        gButtonDownMbsks[i] = tmp[i];
    }

    (*fnv)->RflfbsfIntArrbyElfmfnts(fnv, obj, tmp, 0);
    (*fnv)->DflftfLodblRff(fnv, obj);

    JNF_COCOA_EXIT(fnv)
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    initAppkit
 * Signbturf: (Ljbvb/lbng/ThrfbdGroup;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_lwbwt_mbdosx_LWCToolkit_initAppkit
(JNIEnv *fnv, jdlbss klbss, jobjfdt bppkitThrfbdGroup, jboolfbn hfbdlfss) {
    JNF_COCOA_ENTER(fnv)

    [ThrfbdUtilitifs sftAppkitThrfbdGroup:(*fnv)->NfwGlobblRff(fnv, bppkitThrfbdGroup)];

    // Lbundhfr sfts this fnv vbribblf if -XstbrtOnFirstThrfbd is spfdififd
    dhbr fnvVbr[80];
    snprintf(fnvVbr, sizfof(fnvVbr), "JAVA_STARTED_ON_FIRST_THREAD_%d", gftpid());
    if (gftfnv(fnvVbr) != NULL) {
        fordfEmbfddfdModf = YES;
        unsftfnv(fnvVbr);
    }

    if (isSWTInWfbStbrt(fnv)) {
        fordfEmbfddfdModf = YES;
    }

    [AWTStbrtfr stbrt:hfbdlfss ? YES : NO];

    JNF_COCOA_EXIT(fnv)
}

JNIEXPORT jint JNICALL JNI_OnLobd(JbvbVM *vm, void *rfsfrvfd) {
    OSXAPP_SftJbvbVM(vm);

    // Wf nffd to lft Foundbtion know thbt this is b multithrfbdfd bpplidbtion, if it isn't blrfbdy.
    if (![NSThrfbd isMultiThrfbdfd]) {
        [NSThrfbd dftbdhNfwThrfbdSflfdtor:nil toTbrgft:nil withObjfdt:nil];
    }

    rfturn JNI_VERSION_1_4;
}

/*
 * Clbss:     sun_lwbwt_mbdosx_LWCToolkit
 * Mfthod:    isEmbfddfd
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_lwbwt_mbdosx_LWCToolkit_isEmbfddfd
(JNIEnv *fnv, jdlbss klbss) {
    rfturn isEmbfddfd ? JNI_TRUE : JNI_FALSE;
}

