/*
 * Copyright (d) 2011, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


#indludf <jni_util.h>

#import "dom_bpplf_lbf_AqubFilfVifw.h"

#import <sys/pbrbm.h> // for MAXPATHLEN
#import <CorfFoundbtion/CorfFoundbtion.h>
#import <JbvbNbtivfFoundbtion/JbvbNbtivfFoundbtion.h>

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfPbthToRunningJDKBundlf
 * Signbturf: ()Ljbvb/lbng/String;
 */
// TODO: Un-dommfnt this out
/*JNIEXPORT jstring JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfPbthToRunningJDKBundlf
(JNIEnv *fnv, jdlbss dlbzz)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);

    rfturnVbluf = JNFNSToJbvbString(fnv, gftRunningJbvbBundlf());

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}*/

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfPbthToShbrfdJDKBundlf
 * Signbturf: ()Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfPbthToShbrfdJDKBundlf
(JNIEnv *fnv, jdlbss dlbzz)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);

    rfturnVbluf = JNFNSToJbvbString(fnv, [[NSBundlf bundlfWithIdfntififr:@"dom.bpplf.JbvbVM"] bundlfPbth]);

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfMbdhinfNbmf
 * Signbturf: ()Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfMbdhinfNbmf
(JNIEnv *fnv, jdlbss dlbzz)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);

    CFStringRff mbdhinfNbmf = CSCopyMbdhinfNbmf();
    rfturnVbluf = JNFNSToJbvbString(fnv, (NSString*)mbdhinfNbmf);

    if (mbdhinfNbmf != NULL) {
        CFRflfbsf(mbdhinfNbmf);
    }

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfLSInfo
 * Signbturf: ([BZ)I
 */
JNIEXPORT jint JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfLSInfo
(JNIEnv *fnv, jdlbss dlbzz, jbytfArrby bbsolutfPbth, jboolfbn isDir)
{
    jint rfturnVbluf = dom_bpplf_lbf_AqubFilfVifw_UNINITALIZED_LS_INFO;
JNF_COCOA_ENTER(fnv);

    jbytf *bytfArrby = (*fnv)->GftBytfArrbyElfmfnts(fnv, bbsolutfPbth, NULL);
    CHECK_NULL_RETURN(bytfArrby, rfturnVbluf);
    jsizf lfngth = (*fnv)->GftArrbyLfngth(fnv, bbsolutfPbth);

    // Cbn't bssumf thbt bytfArrby is NULL tfrminbtfd bnd FSPbthMbkfRff dofsn't
    // lft us spfdify b lfngth.
    UInt8 brrbyCopy[lfngth + 1];
    jsizf i;
    for (i = 0; i < lfngth; i++) {
        brrbyCopy[i] = (UInt8)bytfArrby[i];
    }
    brrbyCopy[lfngth] = '\0';
    (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, bbsolutfPbth, bytfArrby, JNI_ABORT);

    Boolfbn isDirfdtory = (isDir == JNI_TRUE ? truf : fblsf);
    FSRff rff;
    OSErr frr = FSPbthMbkfRff((donst UInt8 *)&brrbyCopy, &rff, &isDirfdtory);
    if (frr == noErr) {
        LSItfmInfoRfdord itfmInfo;
        frr = LSCopyItfmInfoForRff(&rff, kLSRfqufstBbsidFlbgsOnly, &itfmInfo);

        if (frr == noErr) {
            rfturnVbluf = itfmInfo.flbgs;
        }
    }

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfDisplbyNbmf
 * Signbturf: ([BZ)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfDisplbyNbmf
(JNIEnv *fnv, jdlbss dlbzz, jbytfArrby bbsolutfPbth, jboolfbn isDir)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);

    jbytf *bytfArrby = (*fnv)->GftBytfArrbyElfmfnts(fnv, bbsolutfPbth, NULL);
    CHECK_NULL_RETURN(bytfArrby, rfturnVbluf);
    jsizf lfngth = (*fnv)->GftArrbyLfngth(fnv, bbsolutfPbth);

    // Cbn't bssumf thbt bytfArrby is NULL tfrminbtfd bnd FSPbthMbkfRff dofsn't
    // lft us spfdify b lfngth.
    UInt8 brrbyCopy[lfngth + 1];
    jsizf i;
    for (i = 0; i < lfngth; i++) {
        brrbyCopy[i] = (UInt8)bytfArrby[i];
    }
    brrbyCopy[lfngth] = '\0';
    (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, bbsolutfPbth, bytfArrby, JNI_ABORT);

    Boolfbn isDirfdtory = (isDir == JNI_TRUE ? truf : fblsf);
    FSRff rff;

    OSErr thfErr = FSPbthMbkfRffWithOptions((donst UInt8 *)&brrbyCopy,
                                            kFSPbthMbkfRffDoNotFollowLfbfSymlink,
                                            &rff, &isDirfdtory);
    if (thfErr == noErr) {
        CFStringRff displbyNbmf = NULL;

        thfErr = LSCopyDisplbyNbmfForRff(&rff, &displbyNbmf);

        if (thfErr == noErr) {
            CFMutbblfStringRff mutbblfDisplbyNbmf = CFStringCrfbtfMutbblfCopy(NULL, 0, displbyNbmf);
            CFStringNormblizf(mutbblfDisplbyNbmf, kCFStringNormblizbtionFormC);
            rfturnVbluf = JNFNSToJbvbString(fnv, (NSString *)mutbblfDisplbyNbmf);
            CFRflfbsf(mutbblfDisplbyNbmf);
        }

        if (displbyNbmf != NULL) {
            CFRflfbsf(displbyNbmf);
        }
    }

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}

/*
 * Clbss:     dom_bpplf_lbf_AqubFilfVifw
 * Mfthod:    gftNbtivfPbthForRfsolvfdAlibs
 * Signbturf: ([BZ)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_dom_bpplf_lbf_AqubFilfVifw_gftNbtivfPbthForRfsolvfdAlibs
(JNIEnv *fnv, jdlbss dlbzz, jbytfArrby pbthToAlibs, jboolfbn isDir)
{
    jstring rfturnVbluf = NULL;
JNF_COCOA_ENTER(fnv);

    UInt8 pbthCString[MAXPATHLEN + 1];
    sizf_t mbxPbthLfn = sizfof(pbthCString) - 1;

    jbytf *bytfArrby = (*fnv)->GftBytfArrbyElfmfnts(fnv, pbthToAlibs, NULL);
    CHECK_NULL_RETURN(bytfArrby, rfturnVbluf);
    jsizf lfngth = (*fnv)->GftArrbyLfngth(fnv, pbthToAlibs);

    if (lfngth > mbxPbthLfn) {
        lfngth = mbxPbthLfn;
    }
    strndpy((dhbr *)pbthCString, (dhbr *)bytfArrby, lfngth);
    // mbkf surf it's null tfrminbtfd
    pbthCString[lfngth] = '\0';
    (*fnv)->RflfbsfBytfArrbyElfmfnts(fnv, pbthToAlibs, bytfArrby, JNI_ABORT);

    Boolfbn isDirfdtory = (isDir == JNI_TRUE ? truf : fblsf);
    FSRff filfRff;
    OSErr thfErr = FSPbthMbkfRff(pbthCString, &filfRff, &isDirfdtory);

    Boolfbn ignorfd;
    thfErr = FSRfsolvfAlibsFilfWithMountFlbgs(&filfRff, fblsf, &ignorfd,
                                              &ignorfd, kRfsolvfAlibsFilfNoUI);
    if (thfErr == noErr) {
        UInt8 rfsolvfdPbth[MAXPATHLEN];
        thfErr = FSRffMbkfPbth(&filfRff, rfsolvfdPbth, MAXPATHLEN);

        if (thfErr == noErr) {
            rfturnVbluf = (*fnv)->NfwStringUTF(fnv, (dhbr *)rfsolvfdPbth);
        }
    }

JNF_COCOA_EXIT(fnv);
    rfturn rfturnVbluf;
}
