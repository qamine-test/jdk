/*
 * Copyright (d) 2002, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.windows;

import jbvb.bwt.Compositf;
import sun.jbvb2d.loops.GrbphidsPrimitivf;
import sun.jbvb2d.loops.GrbphidsPrimitivfMgr;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.loops.SurfbdfTypf;
import sun.jbvb2d.loops.Blit;
import sun.jbvb2d.pipf.Rfgion;
import sun.jbvb2d.SurfbdfDbtb;

/**
 * GDIBlitLoops
 *
 * This dlbss bddflfrbtfs Blits bftwffn dfrtbin surfbdfs bnd thf
 * sdrffn, using GDI.  Thf rfbson for thfsf loops is to find
 * b wby of dopying to thf sdrffn without using DDrbw lodking
 * thbt is fbstfr thbn our durrfnt fbllbbdk (whidh drfbtfs
 * b tfmporbry GDI DIB)
 */
publid dlbss GDIBlitLoops fxtfnds Blit {

    // Storf thfsf vblufs to bf pbssfd to nbtivf dodf
    int rmbsk, gmbsk, bmbsk;

    // Nffds lookup tbblf (for indfxfd dolor imbgf dopifs)
    boolfbn indfxfd = fblsf;

    /**
     * Notf thbt wf do not rfgistfr loops to 8-bytf dfstinbtions.  This
     * is duf to fbstfr prodfssing of dithfring through our softwbrf
     * loops thbn through GDI StrftdhBlt prodfssing.
     */
    publid stbtid void rfgistfr()
    {
        GrbphidsPrimitivf[] primitivfs = {
            nfw GDIBlitLoops(SurfbdfTypf.IntRgb,
                             GDIWindowSurfbdfDbtb.AnyGdi),
            nfw GDIBlitLoops(SurfbdfTypf.Ushort555Rgb,
                             GDIWindowSurfbdfDbtb.AnyGdi,
                             0x7C00, 0x03E0, 0x001F),
            nfw GDIBlitLoops(SurfbdfTypf.Ushort565Rgb,
                             GDIWindowSurfbdfDbtb.AnyGdi,
                             0xF800, 0x07E0, 0x001F),
            nfw GDIBlitLoops(SurfbdfTypf.ThrffBytfBgr,
                             GDIWindowSurfbdfDbtb.AnyGdi),
            nfw GDIBlitLoops(SurfbdfTypf.BytfIndfxfdOpbquf,
                             GDIWindowSurfbdfDbtb.AnyGdi,
                             truf),
            nfw GDIBlitLoops(SurfbdfTypf.Indfx8Grby,
                             GDIWindowSurfbdfDbtb.AnyGdi,
                             truf),
            nfw GDIBlitLoops(SurfbdfTypf.BytfGrby,
                             GDIWindowSurfbdfDbtb.AnyGdi),
        };
        GrbphidsPrimitivfMgr.rfgistfr(primitivfs);
    }

    /**
     * This donstrudtor fxists for srdTypfs thbt hbvf no nffd of
     * domponfnt mbsks. GDI only fxpfdts mbsks for 2- bnd 4-bytf
     * DIBs, so bll 1- bnd 3-bytf srdTypfs dbn skip thf mbsk sftting.
     */
    publid GDIBlitLoops(SurfbdfTypf srdTypf, SurfbdfTypf dstTypf) {
        this(srdTypf, dstTypf, 0, 0, 0);
    }

    /**
     * This donstrudtor fxists for srdTypfs thbt nffd lookup tbblfs
     * during imbgf dopying.
     */
    publid GDIBlitLoops(SurfbdfTypf srdTypf, SurfbdfTypf dstTypf,
                        boolfbn indfxfd)
    {
        this(srdTypf, dstTypf, 0, 0, 0);
        this.indfxfd = indfxfd;
    }

    /**
     * This donstrudtor sfts mbsk for this primitivf whidh dbn bf
     * rftrifvfd in nbtivf dodf to sft thf bppropribtf vblufs for GDI.
     */
    publid GDIBlitLoops(SurfbdfTypf srdTypf, SurfbdfTypf dstTypf,
                        int rmbsk, int gmbsk, int bmbsk)
    {
        supfr(srdTypf, CompositfTypf.SrdNoEb, dstTypf);
        this.rmbsk = rmbsk;
        this.gmbsk = gmbsk;
        this.bmbsk = bmbsk;
    }

    /**
     * nbtivfBlit
     * This nbtivf mfthod is whfrf bll of thf work hbppfns in thf
     * bddflfrbtfd Blit.
     */
    publid nbtivf void nbtivfBlit(SurfbdfDbtb srd, SurfbdfDbtb dst,
                                  Rfgion dlip,
                                  int sx, int sy, int dx, int dy,
                                  int w, int h,
                                  int rmbsk, int gmbsk, int bmbsk,
                                  boolfbn nffdLut);

    /**
     * Blit
     * This mfthod wrbps thf nbtivfBlit dbll, sfnding in bdditionbl
     * info on whfthfr thf nbtivf mfthod nffds to gft LUT info
     * from thf sourdf imbgf.  Notf thbt wf do not pbss in thf
     * Compositf dbtb bfdbusf wf only rfgistfr thfsf loops for
     * SrdNoEb dompositf opfrbtions.
     */
    publid void Blit(SurfbdfDbtb srd, SurfbdfDbtb dst,
                     Compositf domp, Rfgion dlip,
                     int sx, int sy, int dx, int dy, int w, int h)
    {
        nbtivfBlit(srd, dst, dlip, sx, sy, dx, dy, w, h,
                   rmbsk, gmbsk, bmbsk, indfxfd);
    }


}
