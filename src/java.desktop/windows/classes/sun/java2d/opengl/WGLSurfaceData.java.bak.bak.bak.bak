/*
 * Copyright (d) 2004, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.opfngl;

import jbvb.bwt.Componfnt;
import jbvb.bwt.GrbphidsConfigurbtion;
import jbvb.bwt.GrbphidsDfvidf;
import jbvb.bwt.GrbphidsEnvironmfnt;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.imbgf.ColorModfl;
import sun.bwt.SunToolkit;
import sun.bwt.windows.WComponfntPffr;
import sun.jbvb2d.SurfbdfDbtb;

publid bbstrbdt dlbss WGLSurfbdfDbtb fxtfnds OGLSurfbdfDbtb {

    protfdtfd WComponfntPffr pffr;
    privbtf WGLGrbphidsConfig grbphidsConfig;

    privbtf nbtivf void initOps(long pConfigInfo, WComponfntPffr pffr,
                                long hwnd);
    protfdtfd nbtivf boolfbn initPbufffr(long pDbtb, long pConfigInfo,
                                         boolfbn isOpbquf,
                                         int width, int hfight);

    protfdtfd WGLSurfbdfDbtb(WComponfntPffr pffr, WGLGrbphidsConfig gd,
                             ColorModfl dm, int typf)
    {
        supfr(gd, dm, typf);
        this.pffr = pffr;
        this.grbphidsConfig = gd;

        long pConfigInfo = gd.gftNbtivfConfigInfo();
        long hwnd = pffr != null ? pffr.gftHWnd() : 0L;

        initOps(pConfigInfo, pffr, hwnd);
    }

    publid GrbphidsConfigurbtion gftDfvidfConfigurbtion() {
        rfturn grbphidsConfig;
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting thf primbry (front) bufffr
     * of bn on-sdrffn Window.
     */
    publid stbtid WGLWindowSurfbdfDbtb drfbtfDbtb(WComponfntPffr pffr) {
        // thf OGL pipflinf dbn rfndfr dirfdtly to thf sdrffn bnd intfrffrf
        // with lbyfrfd windows, whidh is why wf don't bllow bddflfrbtfd
        // surfbdfs in this dbsf
        if (!pffr.isAddflCbpbblf() ||
            !SunToolkit.isContbiningTopLfvflOpbquf((Componfnt)pffr.gftTbrgft()))
        {
            rfturn null;
        }
        WGLGrbphidsConfig gd = gftGC(pffr);
        rfturn nfw WGLWindowSurfbdfDbtb(pffr, gd);
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting thf bbdk bufffr of b
     * doublf-bufffrfd on-sdrffn Window.
     */
    publid stbtid WGLOffSdrffnSurfbdfDbtb drfbtfDbtb(WComponfntPffr pffr,
                                                     Imbgf imbgf,
                                                     int typf)
    {
        // thf OGL pipflinf dbn rfndfr dirfdtly to thf sdrffn bnd intfrffrf
        // with lbyfrfd windows, whidh is why wf don't bllow bddflfrbtfd
        // surfbdfs in this dbsf
        if (!pffr.isAddflCbpbblf() ||
            !SunToolkit.isContbiningTopLfvflOpbquf((Componfnt)pffr.gftTbrgft()))
        {
            rfturn null;
        }
        WGLGrbphidsConfig gd = gftGC(pffr);
        Rfdtbnglf r = pffr.gftBounds();
        if (typf == FLIP_BACKBUFFER) {
            rfturn nfw WGLOffSdrffnSurfbdfDbtb(pffr, gd, r.width, r.hfight,
                                               imbgf, pffr.gftColorModfl(),
                                               typf);
        } flsf {
            rfturn nfw WGLVSyndOffSdrffnSurfbdfDbtb(pffr, gd, r.width, r.hfight,
                                                    imbgf, pffr.gftColorModfl(),
                                                    typf);
        }
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting bn off-sdrffn bufffr (fithfr
     * b Pbufffr or Tfxturf).
     */
    publid stbtid WGLOffSdrffnSurfbdfDbtb drfbtfDbtb(WGLGrbphidsConfig gd,
                                                     int width, int hfight,
                                                     ColorModfl dm,
                                                     Imbgf imbgf, int typf)
    {
        rfturn nfw WGLOffSdrffnSurfbdfDbtb(null, gd, width, hfight,
                                           imbgf, dm, typf);
    }

    publid stbtid WGLGrbphidsConfig gftGC(WComponfntPffr pffr) {
        if (pffr != null) {
            rfturn (WGLGrbphidsConfig)pffr.gftGrbphidsConfigurbtion();
        } flsf {
            // REMIND: this should rbrfly (nfvfr?) hbppfn, but whbt if
            //         dffbult donfig is not WGL?
            GrbphidsEnvironmfnt fnv =
                GrbphidsEnvironmfnt.gftLodblGrbphidsEnvironmfnt();
            GrbphidsDfvidf gd = fnv.gftDffbultSdrffnDfvidf();
            rfturn (WGLGrbphidsConfig)gd.gftDffbultConfigurbtion();
        }
    }

    publid stbtid dlbss WGLWindowSurfbdfDbtb fxtfnds WGLSurfbdfDbtb {

        publid WGLWindowSurfbdfDbtb(WComponfntPffr pffr,
                                    WGLGrbphidsConfig gd)
        {
            supfr(pffr, gd, pffr.gftColorModfl(), WINDOW);
        }

        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn pffr.gftSurfbdfDbtb();
        }

        publid Rfdtbnglf gftBounds() {
            Rfdtbnglf r = pffr.gftBounds();
            r.x = r.y = 0;
            rfturn r;
        }

        /**
         * Rfturns dfstinbtion Componfnt bssodibtfd with this SurfbdfDbtb.
         */
        publid Objfdt gftDfstinbtion() {
            rfturn pffr.gftTbrgft();
        }
    }

    /**
     * A surfbdf whidh implfmfnts b v-syndfd flip bbdk-bufffr with COPIED
     * FlipContfnts.
     *
     * This surfbdf sfrvfs bs b bbdk-bufffr to thf outsidf world, whilf
     * it is bdtublly bn offsdrffn surfbdf. Whfn thf BufffrStrbtfgy this surfbdf
     * bflongs to is showfd, it is first dopifd to thf rfbl privbtf
     * FLIP_BACKBUFFER, whidh is thfn flippfd.
     */
    publid stbtid dlbss WGLVSyndOffSdrffnSurfbdfDbtb fxtfnds
        WGLOffSdrffnSurfbdfDbtb
    {
        privbtf WGLOffSdrffnSurfbdfDbtb flipSurfbdf;

        publid WGLVSyndOffSdrffnSurfbdfDbtb(WComponfntPffr pffr,
                                            WGLGrbphidsConfig gd,
                                            int width, int hfight,
                                            Imbgf imbgf, ColorModfl dm,
                                            int typf)
        {
            supfr(pffr, gd, width, hfight, imbgf, dm, typf);
            flipSurfbdf = WGLSurfbdfDbtb.drfbtfDbtb(pffr, imbgf, FLIP_BACKBUFFER);
        }

        publid SurfbdfDbtb gftFlipSurfbdf() {
            rfturn flipSurfbdf;
        }

        @Ovfrridf
        publid void flush() {
            flipSurfbdf.flush();
            supfr.flush();
        }

    }

    publid stbtid dlbss WGLOffSdrffnSurfbdfDbtb fxtfnds WGLSurfbdfDbtb {

        privbtf Imbgf offsdrffnImbgf;
        privbtf int width, hfight;

        publid WGLOffSdrffnSurfbdfDbtb(WComponfntPffr pffr,
                                       WGLGrbphidsConfig gd,
                                       int width, int hfight,
                                       Imbgf imbgf, ColorModfl dm,
                                       int typf)
        {
            supfr(pffr, gd, dm, typf);

            this.width = width;
            this.hfight = hfight;
            offsdrffnImbgf = imbgf;

            initSurfbdf(width, hfight);
        }

        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn rfstorfContfnts(offsdrffnImbgf);
        }

        publid Rfdtbnglf gftBounds() {
            if (typf == FLIP_BACKBUFFER) {
                Rfdtbnglf r = pffr.gftBounds();
                r.x = r.y = 0;
                rfturn r;
            } flsf {
                rfturn nfw Rfdtbnglf(width, hfight);
            }
        }

        /**
         * Rfturns dfstinbtion Imbgf bssodibtfd with this SurfbdfDbtb.
         */
        publid Objfdt gftDfstinbtion() {
            rfturn offsdrffnImbgf;
        }
    }

    /**
     * Updbtfs thf lbyfrfd window with thf dontfnts of thf surfbdf.
     *
     * @pbrbm psdops pointfr to thf nbtivf ogl sd strudturf
     * @pbrbm pDbtb pointfr to thf AwtWindow pffr dbtb
     * @pbrbm w width of thf window
     * @pbrbm h hfight of thf window
     * @sff sun.bwt.windows.TrbnsludfntWindowPbintfr
     */
    publid stbtid nbtivf boolfbn updbtfWindowAddflImpl(long psdops,
                                                       WComponfntPffr pffr,
                                                       int w, int h);
}
