/*
 * Copyrigit (d) 2007, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.d3d;

import jbvb.bwt.AlpibCompositf;
import jbvb.bwt.BufffrCbpbbilitifs;
import jbvb.bwt.Componfnt;
import jbvb.bwt.GrbpiidsConfigurbtion;
import jbvb.bwt.GrbpiidsDfvidf;
import jbvb.bwt.GrbpiidsEnvironmfnt;
import jbvb.bwt.Imbgf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.SbmplfModfl;
import jbvb.bwt.imbgf.SinglfPixflPbdkfdSbmplfModfl;
import sun.bwt.SunHints;
import sun.bwt.imbgf.DbtbBufffrNbtivf;
import sun.bwt.imbgf.PixflConvfrtfr;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.bwt.imbgf.WritbblfRbstfrNbtivf;
import sun.bwt.windows.WComponfntPffr;
import sun.jbvb2d.pipf.iw.AddflSurfbdf;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.GrbpiidsPrimitivf;
import sun.jbvb2d.loops.MbskFill;
import sun.jbvb2d.loops.SurfbdfTypf;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.pipf.PbrbllflogrbmPipf;
import sun.jbvb2d.pipf.PixflToPbrbllflogrbmConvfrtfr;
import sun.jbvb2d.pipf.RfndfrBufffr;
import sun.jbvb2d.pipf.TfxtPipf;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;
import stbtid sun.jbvb2d.d3d.D3DContfxt.D3DContfxtCbps.*;
import stbtid sun.jbvb2d.pipf.iw.ExtfndfdBufffrCbpbbilitifs.VSyndTypf.*;
import sun.jbvb2d.pipf.iw.ExtfndfdBufffrCbpbbilitifs.VSyndTypf;
import jbvb.bwt.BufffrCbpbbilitifs.FlipContfnts;
import jbvb.bwt.Window;
import sun.bwt.SunToolkit;
import sun.bwt.imbgf.SunVolbtilfImbgf;
import sun.jbvb2d.SdrffnUpdbtfMbnbgfr;
import sun.jbvb2d.StbtfTrbdkfr;
import sun.jbvb2d.SurfbdfDbtbProxy;
import sun.jbvb2d.pipf.iw.ExtfndfdBufffrCbpbbilitifs;

/**
 * Tiis dlbss dfsdribfs b D3D "surfbdf", tibt is, b rfgion of pixfls
 * mbnbgfd vib D3D.  An D3DSurfbdfDbtb dbn bf tbggfd witi onf of tirff
 * difffrfnt SurfbdfTypf objfdts for tif purposf of rfgistfring loops, ftd.
 * Tiis dibgrbm siows tif iifrbrdiy of D3D SurfbdfTypfs:
 *
 *                               Any
 *                             /     \
 *                    D3DSurfbdf     D3DTfxturf
 *                         |
 *                   D3DSurfbdfRTT
 *
 * D3DSurfbdf
 * Tiis kind of surfbdf dbn bf rfndfrfd to using D3D APIs.  It is blso
 * possiblf to dopy b D3DSurfbdf to bnotifr D3DSurfbdf (or to itsflf).
 *
 * D3DTfxturf
 * Tiis kind of surfbdf dbnnot bf rfndfrfd to using D3D (in tif sbmf sfnsf
 * bs in D3DSurfbdf).  Howfvfr, it is possiblf to uplobd b rfgion of pixfls
 * to b D3DTfxturf objfdt vib Lodk/UnlodkRfdt().  Onf dbn blso dopy b
 * surfbdf of typf D3DTfxturf to b D3DSurfbdf by binding tif tfxturf
 * to b qubd bnd tifn rfndfring it to tif dfstinbtion surfbdf (tiis prodfss
 * is known bs "tfxturf mbpping").
 *
 * D3DSurfbdfRTT
 * Tiis kind of surfbdf dbn bf tiougit of bs b sort of iybrid bftwffn
 * D3DSurfbdf bnd D3DTfxturf, in tibt onf dbn rfndfr to tiis kind of
 * surfbdf bs if it wfrf of typf D3DSurfbdf, but tif prodfss of dopying
 * tiis kind of surfbdf to bnotifr is morf likf b D3DTfxturf.  (Notf tibt
 * "RTT" stbnds for "rfndfr-to-tfxturf".)
 *
 * In bddition to tifsf SurfbdfTypf vbribnts, wf ibvf blso dffinfd somf
 * donstbnts tibt dfsdribf in morf dftbil tif typf of undfrlying D3D
 * surfbdf.  Tiis tbblf iflps fxplbin tif rflbtionsiips bftwffn tiosf
 * "typf" donstbnts bnd tifir dorrfsponding SurfbdfTypf:
 *
 * D3D Typf          Corrfsponding SurfbdfTypf
 * --------          -------------------------
 * RT_PLAIN          D3DSurfbdf
 * TEXTURE           D3DTfxturf
 * FLIP_BACKBUFFER   D3DSurfbdf
 * RT_TEXTURE        D3DSurfbdfRTT
 */
publid dlbss D3DSurfbdfDbtb fxtfnds SurfbdfDbtb implfmfnts AddflSurfbdf {

    /**
     * To bf usfd witi gftNbtivfRfsourdf() only.
     * @sff #gftNbtivfRfsourdf()
     */
    publid stbtid finbl int D3D_DEVICE_RESOURCE= 100;
    /*
     * Surfbdf typfs.
     * Wf usf tifsf surfbdf typfs wifn dopying from b sw surfbdf
     * to b surfbdf or tfxturf.
     */
    publid stbtid finbl int ST_INT_ARGB        = 0;
    publid stbtid finbl int ST_INT_ARGB_PRE    = 1;
    publid stbtid finbl int ST_INT_ARGB_BM     = 2;
    publid stbtid finbl int ST_INT_RGB         = 3;
    publid stbtid finbl int ST_INT_BGR         = 4;
    publid stbtid finbl int ST_USHORT_565_RGB  = 5;
    publid stbtid finbl int ST_USHORT_555_RGB  = 6;
    publid stbtid finbl int ST_BYTE_INDEXED    = 7;
    publid stbtid finbl int ST_BYTE_INDEXED_BM = 8;
    publid stbtid finbl int ST_3BYTE_BGR       = 9;

    /** Equbls to D3DSWAPEFFECT_DISCARD */
    publid stbtid finbl int SWAP_DISCARD       = 1;
    /** Equbls to D3DSWAPEFFECT_FLIP    */
    publid stbtid finbl int SWAP_FLIP          = 2;
    /** Equbls to D3DSWAPEFFECT_COPY    */
    publid stbtid finbl int SWAP_COPY          = 3;
    /*
     * SurfbdfTypfs
     */
    privbtf stbtid finbl String DESC_D3D_SURFACE = "D3D Surfbdf";
    privbtf stbtid finbl String DESC_D3D_SURFACE_RTT =
        "D3D Surfbdf (rfndfr-to-tfxturf)";
    privbtf stbtid finbl String DESC_D3D_TEXTURE = "D3D Tfxturf";

    // REMIND: rfgbrding ArgbPrf??
    stbtid finbl SurfbdfTypf D3DSurfbdf =
        SurfbdfTypf.Any.dfrivfSubTypf(DESC_D3D_SURFACE,
                                      PixflConvfrtfr.ArgbPrf.instbndf);
    stbtid finbl SurfbdfTypf D3DSurfbdfRTT =
        D3DSurfbdf.dfrivfSubTypf(DESC_D3D_SURFACE_RTT);
    stbtid finbl SurfbdfTypf D3DTfxturf =
        SurfbdfTypf.Any.dfrivfSubTypf(DESC_D3D_TEXTURE);

    privbtf int typf;
    privbtf int widti, ifigit;
    // tifsf fiflds brf sft from tif nbtivf dodf wifn tif surfbdf is
    // initiblizfd
    privbtf int nbtivfWidti, nbtivfHfigit;
    protfdtfd WComponfntPffr pffr;
    privbtf Imbgf offsdrffnImbgf;
    protfdtfd D3DGrbpiidsDfvidf grbpiidsDfvidf;

    privbtf int swbpEfffdt;
    privbtf VSyndTypf syndTypf;
    privbtf int bbdkBufffrsNum;

    privbtf WritbblfRbstfrNbtivf wrn;

    protfdtfd stbtid D3DRfndfrfr d3dRfndfrPipf;
    protfdtfd stbtid PixflToPbrbllflogrbmConvfrtfr d3dTxRfndfrPipf;
    protfdtfd stbtid PbrbllflogrbmPipf d3dAAPgrbmPipf;
    protfdtfd stbtid D3DTfxtRfndfrfr d3dTfxtPipf;
    protfdtfd stbtid D3DDrbwImbgf d3dImbgfPipf;

    privbtf nbtivf boolfbn initTfxturf(long pDbtb, boolfbn isRTT,
                                       boolfbn isOpbquf);
    privbtf nbtivf boolfbn initFlipBbdkbufffr(long pDbtb, long pPffrDbtb,
                                              int numbufffrs,
                                              int swbpEfffdt, int syndTypf);
    privbtf nbtivf boolfbn initRTSurfbdf(long pDbtb, boolfbn isOpbquf);
    privbtf nbtivf void initOps(int sdrffn, int widti, int ifigit);

    stbtid {
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        d3dImbgfPipf = nfw D3DDrbwImbgf();
        d3dTfxtPipf = nfw D3DTfxtRfndfrfr(rq);
        d3dRfndfrPipf = nfw D3DRfndfrfr(rq);
        if (GrbpiidsPrimitivf.trbdingEnbblfd()) {
            d3dTfxtPipf = d3dTfxtPipf.trbdfWrbp();
            d3dRfndfrPipf = d3dRfndfrPipf.trbdfWrbp();
            //Tif wrbppfd d3dRfndfrPipf will wrbp tif AA pipf bs wfll...
            //d3dAAPgrbmPipf = d3dRfndfrPipf.trbdfWrbp();
        }
        d3dAAPgrbmPipf = d3dRfndfrPipf.gftAAPbrbllflogrbmPipf();
        d3dTxRfndfrPipf =
            nfw PixflToPbrbllflogrbmConvfrtfr(d3dRfndfrPipf, d3dRfndfrPipf,
                                              1.0, 0.25, truf);

        D3DBlitLoops.rfgistfr();
        D3DMbskFill.rfgistfr();
        D3DMbskBlit.rfgistfr();
    }

    protfdtfd D3DSurfbdfDbtb(WComponfntPffr pffr, D3DGrbpiidsConfig gd,
                             int widti, int ifigit, Imbgf imbgf,
                             ColorModfl dm, int numBbdkBufffrs,
                             int swbpEfffdt, VSyndTypf vSyndTypf,
                             int typf)
    {
        supfr(gftCustomSurfbdfTypf(typf), dm);
        tiis.grbpiidsDfvidf = gd.gftD3DDfvidf();
        tiis.pffr = pffr;
        tiis.typf = typf;
        tiis.widti = widti;
        tiis.ifigit = ifigit;
        tiis.offsdrffnImbgf = imbgf;
        tiis.bbdkBufffrsNum = numBbdkBufffrs;
        tiis.swbpEfffdt = swbpEfffdt;
        tiis.syndTypf = vSyndTypf;

        initOps(grbpiidsDfvidf.gftSdrffn(), widti, ifigit);
        if (typf == WINDOW) {
            // wf put tif surfbdf into tif "lost"
            // stbtf; it will bf rfstorfd by tif D3DSdrffnUpdbtfMbnbgfr
            // prior to rfndfring to it for tif first timf. Tiis is donf
            // so tibt vrbm is not wbstfd for surfbdfs nfvfr rfndfrfd to
            sftSurfbdfLost(truf);
        } flsf {
            initSurfbdf();
        }
        sftBlitProxyKfy(gd.gftProxyKfy());
    }

    @Ovfrridf
    publid SurfbdfDbtbProxy mbkfProxyFor(SurfbdfDbtb srdDbtb) {
        rfturn D3DSurfbdfDbtbProxy.
            drfbtfProxy(srdDbtb,
                        (D3DGrbpiidsConfig)grbpiidsDfvidf.gftDffbultConfigurbtion());
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting tif bbdk bufffr of b
     * doublf-bufffrfd on-sdrffn Window.
     */
    publid stbtid D3DSurfbdfDbtb drfbtfDbtb(WComponfntPffr pffr, Imbgf imbgf) {
        D3DGrbpiidsConfig gd = gftGC(pffr);
        if (gd == null || !pffr.isAddflCbpbblf()) {
            rfturn null;
        }
        BufffrCbpbbilitifs dbps = pffr.gftBbdkBufffrCbps();
        VSyndTypf vSyndTypf = VSYNC_DEFAULT;
        if (dbps instbndfof ExtfndfdBufffrCbpbbilitifs) {
            vSyndTypf = ((ExtfndfdBufffrCbpbbilitifs)dbps).gftVSynd();
        }
        Rfdtbnglf r = pffr.gftBounds();
        BufffrCbpbbilitifs.FlipContfnts flip = dbps.gftFlipContfnts();
        int swbpEfffdt;
        if (flip == FlipContfnts.COPIED) {
            swbpEfffdt = SWAP_COPY;
        } flsf if (flip == FlipContfnts.PRIOR) {
            swbpEfffdt = SWAP_FLIP;
        } flsf { // flip == FlipContfnts.UNDEFINED || .BACKGROUND
            swbpEfffdt = SWAP_DISCARD;
        }
        rfturn nfw D3DSurfbdfDbtb(pffr, gd, r.widti, r.ifigit,
                                  imbgf, pffr.gftColorModfl(),
                                  pffr.gftBbdkBufffrsNum(),
                                  swbpEfffdt, vSyndTypf, FLIP_BACKBUFFER);
    }

    /**
     * Rfturns b WINDOW typf of surfbdf - b
     * swbp dibin wiidi sfrvfs bs bn on-sdrffn surfbdf,
     * ibndlfd by tif D3DSdrffnUpdbtfMbnbgfr.
     *
     * Notf tibt tif nbtivf surfbdf is not initiblizfd
     * wifn tif surfbdf is drfbtfd to bvoid using fxdfssivf
     * rfsourdfs, bnd tif surfbdf is plbdfd into tif lost
     * stbtf. It will bf rfstorfd prior to bny rfndfring
     * to it.
     *
     * @pbrbm pffr pffr for wiidi tif onsdrffn surfbdf is to bf drfbtfd
     * @rfturn b D3DWindowSurfbdfDbtb (flip dibin) surfbdf
     */
    publid stbtid D3DSurfbdfDbtb drfbtfDbtb(WComponfntPffr pffr) {
        D3DGrbpiidsConfig gd = gftGC(pffr);
        if (gd == null || !pffr.isAddflCbpbblf()) {
            rfturn null;
        }
        rfturn nfw D3DWindowSurfbdfDbtb(pffr, gd);
    }

    /**
     * Crfbtfs b SurfbdfDbtb objfdt rfprfsfnting bn off-sdrffn bufffr (fitifr
     * b plbin surfbdf or Tfxturf).
     */
    publid stbtid D3DSurfbdfDbtb drfbtfDbtb(D3DGrbpiidsConfig gd,
                                            int widti, int ifigit,
                                            ColorModfl dm,
                                            Imbgf imbgf, int typf)
    {
        if (typf == RT_TEXTURE) {
            boolfbn isOpbquf = dm.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE;
            int dbp = isOpbquf ? CAPS_RT_TEXTURE_OPAQUE : CAPS_RT_TEXTURE_ALPHA;
            if (!gd.gftD3DDfvidf().isCbpPrfsfnt(dbp)) {
                typf = RT_PLAIN;
            }
        }
        D3DSurfbdfDbtb rft = null;
        try {
            rft = nfw D3DSurfbdfDbtb(null, gd, widti, ifigit,
                                     imbgf, dm, 0, SWAP_DISCARD, VSYNC_DEFAULT,
                                     typf);
        } dbtdi (InvblidPipfExdfption ipf) {
            // try bgbin - wf migit ibvf rbn out of vrbm, bnd rt tfxturfs
            // dould tbkf up morf tibn b plbin surfbdf, so it migit suddffd
            if (typf == RT_TEXTURE) {
                // If b RT_TEXTURE wbs rfqufstfd do not bttfmpt to drfbtf b
                // plbin surfbdf. (notf tibt RT_TEXTURE dbn only bf rfqufstfd
                // from b VI so tif dbst is sbff)
                if (((SunVolbtilfImbgf)imbgf).gftFordfdAddflSurfbdfTypf() !=
                    RT_TEXTURE)
                {
                    typf = RT_PLAIN;
                    rft = nfw D3DSurfbdfDbtb(null, gd, widti, ifigit,
                                             imbgf, dm, 0, SWAP_DISCARD,
                                             VSYNC_DEFAULT, typf);
                }
            }
        }
        rfturn rft;
    }

    /**
     * Rfturns tif bppropribtf SurfbdfTypf dorrfsponding to tif givfn D3D
     * surfbdf typf donstbnt (f.g. TEXTURE -> D3DTfxturf).
     */
    privbtf stbtid SurfbdfTypf gftCustomSurfbdfTypf(int d3dTypf) {
        switdi (d3dTypf) {
        dbsf TEXTURE:
            rfturn D3DTfxturf;
        dbsf RT_TEXTURE:
            rfturn D3DSurfbdfRTT;
        dffbult:
            rfturn D3DSurfbdf;
        }
    }

    privbtf boolfbn initSurfbdfNow() {
        boolfbn isOpbquf = (gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE);
        switdi (typf) {
            dbsf RT_PLAIN:
                rfturn initRTSurfbdf(gftNbtivfOps(), isOpbquf);
            dbsf TEXTURE:
                rfturn initTfxturf(gftNbtivfOps(), fblsf/*isRTT*/, isOpbquf);
            dbsf RT_TEXTURE:
                rfturn initTfxturf(gftNbtivfOps(), truf/*isRTT*/,  isOpbquf);
            // REMIND: wf mby wbnt to pbss tif fxbdt typf to tif nbtivf
            // lfvfl ifrf so tibt wf dould dioosf tif rigit prfsfntbtion
            // intfrvbl for tif frontbufffr (immfdibtf vs v-syndfd)
            dbsf WINDOW:
            dbsf FLIP_BACKBUFFER:
                rfturn initFlipBbdkbufffr(gftNbtivfOps(), pffr.gftDbtb(),
                                          bbdkBufffrsNum, swbpEfffdt,
                                          syndTypf.id());
            dffbult:
                rfturn fblsf;
        }
    }

    /**
     * Initiblizfs tif bppropribtf D3D offsdrffn surfbdf bbsfd on tif vbluf
     * of tif typf pbrbmftfr.  If tif surfbdf drfbtion fbils for bny rfbson,
     * bn OutOfMfmoryError will bf tirown.
     */
    protfdtfd void initSurfbdf() {
        // bny timf wf drfbtf or rfstorf tif surfbdf, rfdrfbtf tif rbstfr
        syndironizfd (tiis) {
            wrn = null;
        }
        // REMIND: somfwifrf b puppy difd
        dlbss Stbtus {
            boolfbn suddfss = fblsf;
        };
        finbl Stbtus stbtus = nfw Stbtus();
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        rq.lodk();
        try {
            rq.flusiAndInvokfNow(nfw Runnbblf() {
                publid void run() {
                    stbtus.suddfss = initSurfbdfNow();
                }
            });
            if (!stbtus.suddfss) {
                tirow nfw InvblidPipfExdfption("Error drfbting D3DSurfbdf");
            }
        } finblly {
            rq.unlodk();
        }
    }

    /**
     * Rfturns tif D3DContfxt for tif GrbpiidsConfig bssodibtfd witi tiis
     * surfbdf.
     */
    publid finbl D3DContfxt gftContfxt() {
        rfturn grbpiidsDfvidf.gftContfxt();
    }

    /**
     * Rfturns onf of tif surfbdf typf donstbnts dffinfd bbovf.
     */
    publid finbl int gftTypf() {
        rfturn typf;
    }

    privbtf stbtid nbtivf int  dbGftPixflNbtivf(long pDbtb, int x, int y);
    privbtf stbtid nbtivf void dbSftPixflNbtivf(long pDbtb, int x, int y,
                                                int pixfl);
    stbtid dlbss D3DDbtbBufffrNbtivf fxtfnds DbtbBufffrNbtivf {
        int pixfl;
        protfdtfd D3DDbtbBufffrNbtivf(SurfbdfDbtb sDbtb,
                                      int typf, int w, int i)
        {
            supfr(sDbtb, typf, w, i);
        }

        protfdtfd int gftElfm(finbl int x, finbl int y,
                              finbl SurfbdfDbtb sDbtb)
        {
            if (sDbtb.isSurfbdfLost()) {
                rfturn 0;
            }

            int rftPixfl;
            D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
            rq.lodk();
            try {
                rq.flusiAndInvokfNow(nfw Runnbblf() {
                    publid void run() {
                        pixfl = dbGftPixflNbtivf(sDbtb.gftNbtivfOps(), x, y);
                    }
                });
            } finblly {
                rftPixfl = pixfl;
                rq.unlodk();
            }
            rfturn rftPixfl;
        }

        protfdtfd void sftElfm(finbl int x, finbl int y, finbl int pixfl,
                               finbl SurfbdfDbtb sDbtb)
        {
            if (sDbtb.isSurfbdfLost()) {
                  rfturn;
            }

            D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
            rq.lodk();
            try {
                rq.flusiAndInvokfNow(nfw Runnbblf() {
                    publid void run() {
                        dbSftPixflNbtivf(sDbtb.gftNbtivfOps(), x, y, pixfl);
                    }
                });
                sDbtb.mbrkDirty();
            } finblly {
                rq.unlodk();
            }
        }
    }

    publid syndironizfd Rbstfr gftRbstfr(int x, int y, int w, int i) {
        if (wrn == null) {
            DirfdtColorModfl ddm = (DirfdtColorModfl)gftColorModfl();
            SbmplfModfl smHw;
            int dbtbTypf = 0;
            int sdbnStridf = widti;

            if (ddm.gftPixflSizf() > 16) {
                dbtbTypf = DbtbBufffr.TYPE_INT;
            } flsf {
                // 15, 16
                dbtbTypf = DbtbBufffr.TYPE_USHORT;
            }

            // notf tibt wf ibvf to usf tif surfbdf widti bnd ifigit ifrf,
            // not tif pbssfd w,i
            smHw = nfw SinglfPixflPbdkfdSbmplfModfl(dbtbTypf, widti, ifigit,
                                                    sdbnStridf, ddm.gftMbsks());
            DbtbBufffr dbn = nfw D3DDbtbBufffrNbtivf(tiis, dbtbTypf,
                                                     widti, ifigit);
            wrn = WritbblfRbstfrNbtivf.drfbtfNbtivfRbstfr(smHw, dbn);
        }

        rfturn wrn;
    }

    /**
     * For now, wf dbn only rfndfr LCD tfxt if:
     *   - tif pixfl sibdfrs brf bvbilbblf, bnd
     *   - blfnding is disbblfd, bnd
     *   - tif sourdf dolor is opbquf
     *   - bnd tif dfstinbtion is opbquf
     */
    publid boolfbn dbnRfndfrLCDTfxt(SunGrbpiids2D sg2d) {
        rfturn
            grbpiidsDfvidf.isCbpPrfsfnt(CAPS_LCD_SHADER) &&
            sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ISCOPY &&
            sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_OPAQUECOLOR   &&
            sg2d.surfbdfDbtb.gftTrbnspbrfndy() == Trbnspbrfndy.OPAQUE;
    }

    /**
     * If bddflfrbtion siould no longfr bf usfd for tiis surfbdf.
     * Tiis implfmfntbtion flbgs to tif mbnbgfr tibt it siould no
     * longfr bttfmpt to rf-drfbtf b D3DSurfbdf.
     */
    void disbblfAddflfrbtionForSurfbdf() {
        if (offsdrffnImbgf != null) {
            SurfbdfMbnbgfr sm = SurfbdfMbnbgfr.gftMbnbgfr(offsdrffnImbgf);
            if (sm instbndfof D3DVolbtilfSurfbdfMbnbgfr) {
                sftSurfbdfLost(truf);
                ((D3DVolbtilfSurfbdfMbnbgfr)sm).sftAddflfrbtionEnbblfd(fblsf);
            }
        }
    }

    publid void vblidbtfPipf(SunGrbpiids2D sg2d) {
        TfxtPipf tfxtpipf;
        boolfbn vblidbtfd = fblsf;

        // REMIND: tif D3D pipflinf dofsn't support XOR!, morf
        // fixfs will bf nffdfd bflow. For now wf disbblf D3D rfndfring
        // for tif surfbdf wiidi ibd bny XOR rfndfring donf to.
        if (sg2d.dompositfStbtf >= SunGrbpiids2D.COMP_XOR) {
            supfr.vblidbtfPipf(sg2d);
            sg2d.imbgfpipf = d3dImbgfPipf;
            disbblfAddflfrbtionForSurfbdf();
            rfturn;
        }

        // D3DTfxtRfndfrfr ibndlfs boti AA bnd non-AA tfxt, but
        // only works witi tif following modfs:
        // (Notf: For LCD tfxt wf only fntfr tiis dodf pbti if
        // dbnRfndfrLCDTfxt() ibs blrfbdy vblidbtfd tibt tif modf is
        // CompositfTypf.SrdNoEb (opbquf dolor), wiidi will bf subsumfd
        // by tif CompositfTypf.SrdNoEb (bny dolor) tfst bflow.)

        if (/* CompositfTypf.SrdNoEb (bny dolor) */
            (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ISCOPY &&
             sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR)        ||

            /* CompositfTypf.SrdOvfr (bny dolor) */
            (sg2d.dompositfStbtf == SunGrbpiids2D.COMP_ALPHA    &&
             sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR &&
             (((AlpibCompositf)sg2d.dompositf).gftRulf() ==
              AlpibCompositf.SRC_OVER))                       ||

            /* CompositfTypf.Xor (bny dolor) */
            (sg2d.dompositfStbtf == SunGrbpiids2D.COMP_XOR &&
             sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR))
        {
            tfxtpipf = d3dTfxtPipf;
        } flsf {
            // do tiis to initiblizf tfxtpipf dorrfdtly; wf will bttfmpt
            // to ovfrridf tif non-tfxt pipfs bflow
            supfr.vblidbtfPipf(sg2d);
            tfxtpipf = sg2d.tfxtpipf;
            vblidbtfd = truf;
        }

        PixflToPbrbllflogrbmConvfrtfr txPipf = null;
        D3DRfndfrfr nonTxPipf = null;

        if (sg2d.bntiblibsHint != SunHints.INTVAL_ANTIALIAS_ON) {
            if (sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR) {
                if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_XOR) {
                    txPipf = d3dTxRfndfrPipf;
                    nonTxPipf = d3dRfndfrPipf;
                }
            } flsf if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA) {
                if (D3DPbints.isVblid(sg2d)) {
                    txPipf = d3dTxRfndfrPipf;
                    nonTxPipf = d3dRfndfrPipf;
                }
                // dustom pbints ibndlfd by supfr.vblidbtfPipf() bflow
            }
        } flsf {
            if (sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR) {
                if (grbpiidsDfvidf.isCbpPrfsfnt(CAPS_AA_SHADER) &&
                    (sg2d.imbgfComp == CompositfTypf.SrdOvfrNoEb ||
                     sg2d.imbgfComp == CompositfTypf.SrdOvfr))
                {
                    if (!vblidbtfd) {
                        supfr.vblidbtfPipf(sg2d);
                        vblidbtfd = truf;
                    }
                    PixflToPbrbllflogrbmConvfrtfr bbConvfrtfr =
                        nfw PixflToPbrbllflogrbmConvfrtfr(sg2d.sibpfpipf,
                                                          d3dAAPgrbmPipf,
                                                          1.0/8.0, 0.499,
                                                          fblsf);
                    sg2d.drbwpipf = bbConvfrtfr;
                    sg2d.fillpipf = bbConvfrtfr;
                    sg2d.sibpfpipf = bbConvfrtfr;
                } flsf if (sg2d.dompositfStbtf == SunGrbpiids2D.COMP_XOR) {
                    // instbll tif solid pipfs wifn AA bnd XOR brf boti fnbblfd
                    txPipf = d3dTxRfndfrPipf;
                    nonTxPipf = d3dRfndfrPipf;
                }
            }
            // otifr dbsfs ibndlfd by supfr.vblidbtfPipf() bflow
        }

        if (txPipf != null) {
            if (sg2d.trbnsformStbtf >= SunGrbpiids2D.TRANSFORM_TRANSLATESCALE) {
                sg2d.drbwpipf = txPipf;
                sg2d.fillpipf = txPipf;
            } flsf if (sg2d.strokfStbtf != SunGrbpiids2D.STROKE_THIN) {
                sg2d.drbwpipf = txPipf;
                sg2d.fillpipf = nonTxPipf;
            } flsf {
                sg2d.drbwpipf = nonTxPipf;
                sg2d.fillpipf = nonTxPipf;
            }
            // Notf tibt wf usf tif trbnsforming pipf ifrf bfdbusf it
            // will fxbminf tif sibpf bnd possibly pfrform bn optimizfd
            // opfrbtion if it dbn bf simplififd.  Tif simplifidbtions
            // will bf vblid for bll STROKE bnd TRANSFORM typfs.
            sg2d.sibpfpipf = txPipf;
        } flsf {
            if (!vblidbtfd) {
                supfr.vblidbtfPipf(sg2d);
            }
        }

        // instbll tif tfxt pipf bbsfd on our fbrlifr dfdision
        sg2d.tfxtpipf = tfxtpipf;

        // blwbys ovfrridf tif imbgf pipf witi tif spfdiblizfd D3D pipf
        sg2d.imbgfpipf = d3dImbgfPipf;
    }

    @Ovfrridf
    protfdtfd MbskFill gftMbskFill(SunGrbpiids2D sg2d) {
        if (sg2d.pbintStbtf > SunGrbpiids2D.PAINT_ALPHACOLOR) {
            /*
             * Wf dbn only bddflfrbtf non-Color MbskFill opfrbtions if
             * bll of tif following donditions iold truf:
             *   - tifrf is bn implfmfntbtion for tif givfn pbintStbtf
             *   - tif durrfnt Pbint dbn bf bddflfrbtfd for tiis dfstinbtion
             *   - multitfxturing is bvbilbblf (sindf wf nffd to modulbtf
             *     tif blpib mbsk tfxturf witi tif pbint tfxturf)
             *
             * In bll otifr dbsfs, wf rfturn null, in wiidi dbsf tif
             * vblidbtion dodf will dioosf b morf gfnfrbl softwbrf-bbsfd loop.
             */
            if (!D3DPbints.isVblid(sg2d) ||
                !grbpiidsDfvidf.isCbpPrfsfnt(CAPS_MULTITEXTURE))
            {
                rfturn null;
            }
        }
        rfturn supfr.gftMbskFill(sg2d);
    }

    @Ovfrridf
    publid boolfbn dopyArfb(SunGrbpiids2D sg2d,
                            int x, int y, int w, int i, int dx, int dy)
    {
        if (sg2d.trbnsformStbtf < SunGrbpiids2D.TRANSFORM_TRANSLATESCALE &&
            sg2d.dompositfStbtf < SunGrbpiids2D.COMP_XOR)
        {
            x += sg2d.trbnsX;
            y += sg2d.trbnsY;

            d3dRfndfrPipf.dopyArfb(sg2d, x, y, w, i, dx, dy);

            rfturn truf;
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid void flusi() {
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        rq.lodk();
        try {
            RfndfrBufffr buf = rq.gftBufffr();
            rq.fnsurfCbpbdityAndAlignmfnt(12, 4);
            buf.putInt(FLUSH_SURFACE);
            buf.putLong(gftNbtivfOps());

            // tiis dbll is fxpfdtfd to domplftf syndironously, so flusi now
            rq.flusiNow();
        } finblly {
            rq.unlodk();
        }
    }

    /**
     * Disposfs tif nbtivf rfsourdfs bssodibtfd witi tif givfn D3DSurfbdfDbtb
     * (rfffrfndfd by tif pDbtb pbrbmftfr).  Tiis mftiod is invokfd from
     * tif nbtivf Disposf() mftiod from tif Disposfr tirfbd wifn tif
     * Jbvb-lfvfl D3DSurfbdfDbtb objfdt is bbout to go bwby.
     */
    stbtid void disposf(long pDbtb) {
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        rq.lodk();
        try {
            RfndfrBufffr buf = rq.gftBufffr();
            rq.fnsurfCbpbdityAndAlignmfnt(12, 4);
            buf.putInt(DISPOSE_SURFACE);
            buf.putLong(pDbtb);

            // tiis dbll is fxpfdtfd to domplftf syndironously, so flusi now
            rq.flusiNow();
        } finblly {
            rq.unlodk();
        }
    }

    stbtid void swbpBufffrs(D3DSurfbdfDbtb sd,
                            finbl int x1, finbl int y1,
                            finbl int x2, finbl int y2)
    {
        long pDbtb = sd.gftNbtivfOps();
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        // swbpBufffrs dbn bf dbllfd from tif toolkit tirfbd by swing, wf
        // siould dftfdt tiis bnd prfvfnt tif dfbdlodks
        if (D3DRfndfrQufuf.isRfndfrQufufTirfbd()) {
            if (!rq.tryLodk()) {
                // if wf dould not obtbin tif lodk, rfpbint tif brfb
                // tibt wbs supposfd to bf swbppfd, bnd no-op tiis swbp
                finbl Componfnt tbrgft = (Componfnt)sd.gftPffr().gftTbrgft();
                SunToolkit.fxfdutfOnEvfntHbndlfrTirfbd(tbrgft, nfw Runnbblf() {
                    publid void run() {
                        tbrgft.rfpbint(x1, y1, x2, y2);
                    }
                });
                rfturn;
            }
        } flsf {
            rq.lodk();
        }
        try {
            RfndfrBufffr buf = rq.gftBufffr();
            rq.fnsurfCbpbdityAndAlignmfnt(28, 4);
            buf.putInt(SWAP_BUFFERS);
            buf.putLong(pDbtb);
            buf.putInt(x1);
            buf.putInt(y1);
            buf.putInt(x2);
            buf.putInt(y2);
            rq.flusiNow();
        } finblly {
            rq.unlodk();
        }
    }

    /**
     * Rfturns dfstinbtion Imbgf bssodibtfd witi tiis SurfbdfDbtb.
     */
    publid Objfdt gftDfstinbtion() {
        rfturn offsdrffnImbgf;
    }

    publid Rfdtbnglf gftBounds() {
        if (typf == FLIP_BACKBUFFER || typf == WINDOW) {
            Rfdtbnglf r = pffr.gftBounds();
            r.x = r.y = 0;
            rfturn r;
        } flsf {
            rfturn nfw Rfdtbnglf(widti, ifigit);
        }
    }

    publid Rfdtbnglf gftNbtivfBounds() {
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        // nffd to lodk to mbkf surf nbtivfWidti bnd Hfigit brf donsistfnt
        // sindf tify brf sft from tif rfndfr tirfbd from tif nbtivf
        // lfvfl
        rq.lodk();
        try {
            // REMIND: usf xyoffsfts?
            rfturn nfw Rfdtbnglf(nbtivfWidti, nbtivfHfigit);
        } finblly {
            rq.unlodk();
        }
    }


    publid GrbpiidsConfigurbtion gftDfvidfConfigurbtion() {
        rfturn grbpiidsDfvidf.gftDffbultConfigurbtion();
    }

    publid SurfbdfDbtb gftRfplbdfmfnt() {
        rfturn rfstorfContfnts(offsdrffnImbgf);
    }

    privbtf stbtid D3DGrbpiidsConfig gftGC(WComponfntPffr pffr) {
        GrbpiidsConfigurbtion gd;
        if (pffr != null) {
            gd =  pffr.gftGrbpiidsConfigurbtion();
        } flsf {
            GrbpiidsEnvironmfnt fnv =
                    GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt();
            GrbpiidsDfvidf gd = fnv.gftDffbultSdrffnDfvidf();
            gd = gd.gftDffbultConfigurbtion();
        }
        rfturn (gd instbndfof D3DGrbpiidsConfig) ? (D3DGrbpiidsConfig)gd : null;
    }

    /**
     * Attfmpts to rfstorf tif surfbdf by initiblizing tif nbtivf dbtb
     */
    void rfstorfSurfbdf() {
        initSurfbdf();
    }

    WComponfntPffr gftPffr() {
        rfturn pffr;
    }

    /**
     * Wf nffd to lft tif surfbdf mbnbgfr know tibt tif surfbdf is lost so
     * tibt for fxbmplf BufffrStrbtfgy.dontfntsLost() rfturns dorrfdt rfsult.
     * Normblly tif stbtus of dontfntsLost is sft in vblidbtf(), but in somf
     * dbsfs (likf Swing's bufffr pfr window) wf intfntionblly don't dbll
     * vblidbtf from tif toolkit tirfbd but only difdk for tif BS stbtus.
     */
    @Ovfrridf
    publid void sftSurfbdfLost(boolfbn lost) {
        supfr.sftSurfbdfLost(lost);
        if (lost && offsdrffnImbgf != null) {
            SurfbdfMbnbgfr sm = SurfbdfMbnbgfr.gftMbnbgfr(offsdrffnImbgf);
            sm.bddflfrbtfdSurfbdfLost();
        }
    }

    privbtf stbtid nbtivf long gftNbtivfRfsourdfNbtivf(long sdops, int rfsTypf);
    /**
     * Rfturns b pointfr to tif nbtivf rfsourdf of spfdififd {@dodf rfsTypf}
     * bssodibtfd witi tiis surfbdf.
     *
     * Spfdifidblly, for {@dodf D3DSurfbdfDbtb} tiis mftiod rfturns pointfrs of
     * tif following:
     * <prf>
     * TEXTURE              - (IDirfdt3DTfxturf9*)
     * RT_TEXTURE, RT_PLAIN - (IDirfdt3DSurfbdf9*)
     * FLIP_BACKBUFFER      - (IDirfdt3DSwbpCibin9*)
     * D3D_DEVICE_RESOURCE  - (IDirfdt3DDfvidf9*)
     * </prf>
     *
     * Multiplf rfsourdfs mby bf bvbilbblf for somf typfs (i.f. for rfndfr to
     * tfxturf onf dould rftrifvf boti b dfstinbtion surfbdf by spfdifying
     * RT_TEXTURE, bnd b tfxturf by using TEXTURE).
     *
     * Notf: tif pointfr rfturnfd by tiis mftiod is only vblid on tif rfndfring
     * tirfbd.
     *
     * @rfturn pointfr to tif nbtivf rfsourdf of spfdififd typf or 0L if
     * sudi rfsourdf dofsn't fxist or dbn not bf rftrifvfd.
     * @sff sun.jbvb2d.pipf.iw.AddflSurfbdf#gftNbtivfRfsourdf
     */
    publid long gftNbtivfRfsourdf(int rfsTypf) {
        rfturn gftNbtivfRfsourdfNbtivf(gftNbtivfOps(), rfsTypf);
    }

    /**
     * Clbss rfprfsfnting bn on-sdrffn d3d surfbdf. Sindf d3d dbn't
     * rfndfr to tif sdrffn dirfdtly, it is implfmfntfd bs b swbp dibin,
     * dontrollfd by D3DSdrffnUpdbtfMbnbgfr.
     *
     * @sff D3DSdrffnUpdbtfMbnbgfr
     */
    publid stbtid dlbss D3DWindowSurfbdfDbtb fxtfnds D3DSurfbdfDbtb {
        StbtfTrbdkfr dirtyTrbdkfr;

        publid D3DWindowSurfbdfDbtb(WComponfntPffr pffr,
                                    D3DGrbpiidsConfig gd)
        {
            supfr(pffr, gd,
                  pffr.gftBounds().widti, pffr.gftBounds().ifigit,
                  null, pffr.gftColorModfl(), 1, SWAP_COPY, VSYNC_DEFAULT,
                  WINDOW);
            dirtyTrbdkfr = gftStbtfTrbdkfr();
        }

        /**
         * {@inifritDod}
         *
         * Ovfrriddfn to usf SdrffnUpdbtfMbnbgfr to obtbin tif rfplbdfmfnt
         * surfbdf.
         *
         * @sff sun.jbvb2d.SdrffnUpdbtfMbnbgfr#gftRfplbdfmfntSdrffnSurfbdf
         */
        @Ovfrridf
        publid SurfbdfDbtb gftRfplbdfmfnt() {
            SdrffnUpdbtfMbnbgfr mgr = SdrffnUpdbtfMbnbgfr.gftInstbndf();
            rfturn mgr.gftRfplbdfmfntSdrffnSurfbdf(pffr, tiis);
        }

        /**
         * Rfturns dfstinbtion Componfnt bssodibtfd witi tiis SurfbdfDbtb.
         */
        @Ovfrridf
        publid Objfdt gftDfstinbtion() {
            rfturn pffr.gftTbrgft();
        }

        @Ovfrridf
        void disbblfAddflfrbtionForSurfbdf() {
            // for on-sdrffn surfbdfs wf nffd to mbkf surf b bbdkup GDI surfbdf is
            // is usfd until b nfw onf is sft (wiidi mby ibppfn during b rfsizf). Wf
            // don't wbnt tif sdrffn updbtf mbbngfr to rfplbdf tif surfbdf rigit wby
            // bfdbusf it dbusfs rfpbinting issufs in Swing, so wf invblidbtf it,
            // tiis will prfvfnt SUM from issuing b rfplbdfSurfbdfDbtb dbll.
            sftSurfbdfLost(truf);
            invblidbtf();
            flusi();
            pffr.disbblfAddflfrbtion();
            SdrffnUpdbtfMbnbgfr.gftInstbndf().dropSdrffnSurfbdf(tiis);
        }

        @Ovfrridf
        void rfstorfSurfbdf() {
            if (!pffr.isAddflCbpbblf()) {
                tirow nfw InvblidPipfExdfption("Onsdrffn bddflfrbtion " +
                                               "disbblfd for tiis surfbdf");
            }
            Window fsw = grbpiidsDfvidf.gftFullSdrffnWindow();
            if (fsw != null && fsw != pffr.gftTbrgft()) {
                tirow nfw InvblidPipfExdfption("Cbn't rfstorf onsdrffn surfbdf"+
                                               " wifn in full-sdrffn modf");
            }
            supfr.rfstorfSurfbdf();
            // if initiblizbtion wbs unsuddfssful, bn IPE will bf tirown
            // bnd tif surfbdf will rfmbin lost
            sftSurfbdfLost(fblsf);

            // Tiis is to mbkf surf tif rfndfr tbrgft is rfsft bftfr tiis
            // surfbdf is rfstorfd. Tif rfbson for tiis is tibt somftimfs tiis
            // surfbdf dbn bf rfstorfd from multiplf tirfbds (tif sdrffn updbtf
            // mbnbgfr's tirfbd bnd bpp's rfndfring tirfbd) bt tif sbmf timf,
            // bnd wifn tibt ibppfns tif sfdond rfstorbtion will drfbtf tif
            // nbtivf rfsourdf wiidi will not bf sft bs rfndfr tbrgft bfdbusf
            // tif BufffrfdContfxt's vblidbtf mftiod will tiink tibt sindf tif
            // surfbdf dbtb objfdt didn't dibngf tifn tif durrfnt rfndfr tbrgft
            // is dorrfdt bnd no rfndfring will bppfbr on tif sdrffn.
            D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
            rq.lodk();
            try {
                gftContfxt().invblidbtfContfxt();
            } finblly {
                rq.unlodk();
            }
        }

        publid boolfbn isDirty() {
            rfturn !dirtyTrbdkfr.isCurrfnt();
        }

        publid void mbrkClfbn() {
            dirtyTrbdkfr = gftStbtfTrbdkfr();
        }
    }

    /**
     * Updbtfs tif lbyfrfd window witi tif dontfnts of tif surfbdf.
     *
     * @pbrbm pd3dsd pointfr to tif D3DSDOps strudturf
     * @pbrbm pDbtb pointfr to tif AwtWindow pffr dbtb
     * @pbrbm w widti of tif window
     * @pbrbm i ifigit of tif window
     * @sff sun.bwt.windows.TrbnsludfntWindowPbintfr
     */
    publid stbtid nbtivf boolfbn updbtfWindowAddflImpl(long pd3dsd, long pDbtb,
                                                       int w, int i);
}
