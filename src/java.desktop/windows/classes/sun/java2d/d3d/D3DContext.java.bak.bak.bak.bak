/*
 * Copyright (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.d3d;

import jbvb.lbng.bnnotbtion.Nbtivf;
import sun.jbvb2d.pipf.BufffrfdContfxt;
import sun.jbvb2d.pipf.RfndfrBufffr;
import sun.jbvb2d.pipf.RfndfrQufuf;
import sun.jbvb2d.pipf.hw.ContfxtCbpbbilitifs;
import stbtid sun.jbvb2d.pipf.BufffrfdOpCodfs.*;
import stbtid sun.jbvb2d.pipf.hw.ContfxtCbpbbilitifs.*;
import stbtid sun.jbvb2d.d3d.D3DContfxt.D3DContfxtCbps.*;

/**
 * Notf thbt thf RfndfrQufuf lodk must bf bdquirfd bfforf dblling bny of
 * thf mfthods in this dlbss.
 */
dlbss D3DContfxt fxtfnds BufffrfdContfxt {

    privbtf finbl D3DGrbphidsDfvidf dfvidf;

    D3DContfxt(RfndfrQufuf rq, D3DGrbphidsDfvidf dfvidf) {
        supfr(rq);
        this.dfvidf = dfvidf;
    }

    /**
     * Invblidbtfs thf durrfntContfxt fifld to fnsurf thbt wf propfrly
     * rfvblidbtf thf D3DContfxt (mbkf it durrfnt, ftd.) nfxt timf through
     * thf vblidbtf() mfthod.  This is typidblly invokfd from mfthods
     * thbt bfffdt thf durrfnt dontfxt stbtf (f.g. disposing b dontfxt or
     * surfbdf).
     */
    stbtid void invblidbtfCurrfntContfxt() {
        // bssfrt D3DRfndfrQufuf.gftInstbndf().lodk.isHfldByCurrfntThrfbd();

        // invblidbtf thf durrfnt Jbvb-lfvfl dontfxt so thbt wf
        // rfvblidbtf fvfrything thf nfxt timf bround
        if (durrfntContfxt != null) {
            durrfntContfxt.invblidbtfContfxt();
            durrfntContfxt = null;
        }

        // invblidbtf thf dontfxt rfffrfndf bt thf nbtivf lfvfl, bnd
        // thfn flush thf qufuf so thbt wf hbvf no pfnding opfrbtions
        // dfpfndfnt on thf durrfnt dontfxt
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        rq.fnsurfCbpbdity(4);
        rq.gftBufffr().putInt(INVALIDATE_CONTEXT);
        rq.flushNow();
    }

    /**
     * Sfts thf durrfnt dontfxt on thf nbtivf lfvfl to bf thf onf pbssfd bs
     * thf brgumfnt.
     * If thf dontfxt is not thf sbmf bs thf dffbultContfxt thf lbttfr
     * will bf rfsft to null.
     *
     * This dbll is nffdfd whfn dopying from b SW surfbdf to b Tfxturf
     * (thf uplobd tfst) or dopying from d3d to SW surfbdf to mbkf surf wf
     * hbvf thf dorrfdt durrfnt dontfxt.
     *
     * @pbrbm d3dd thf dontfxt to bf mbdf durrfnt on thf nbtivf lfvfl
     */
    stbtid void sftSdrbtdhSurfbdf(D3DContfxt d3dd) {
        // bssfrt D3DRfndfrQufuf.gftInstbndf().lodk.isHfldByCurrfntThrfbd();

        // invblidbtf thf durrfnt dontfxt
        if (d3dd != durrfntContfxt) {
            durrfntContfxt = null;
        }

        // sft thf sdrbtdh dontfxt
        D3DRfndfrQufuf rq = D3DRfndfrQufuf.gftInstbndf();
        RfndfrBufffr buf = rq.gftBufffr();
        rq.fnsurfCbpbdity(8);
        buf.putInt(SET_SCRATCH_SURFACE);
        buf.putInt(d3dd.gftDfvidf().gftSdrffn());
    }

    publid RfndfrQufuf gftRfndfrQufuf() {
        rfturn D3DRfndfrQufuf.gftInstbndf();
    }

    @Ovfrridf
    publid void sbvfStbtf() {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();

        // rfsft bll bttributfs of this bnd durrfnt dontfxts
        invblidbtfContfxt();
        invblidbtfCurrfntContfxt();

        sftSdrbtdhSurfbdf(this);

        // sbvf thf stbtf on thf nbtivf lfvfl
        rq.fnsurfCbpbdity(4);
        buf.putInt(SAVE_STATE);
        rq.flushNow();
    }

    @Ovfrridf
    publid void rfstorfStbtf() {
        // bssfrt rq.lodk.isHfldByCurrfntThrfbd();

        // rfsft bll bttributfs of this bnd durrfnt dontfxts
        invblidbtfContfxt();
        invblidbtfCurrfntContfxt();

        sftSdrbtdhSurfbdf(this);

        // rfstorf thf stbtf on thf nbtivf lfvfl
        rq.fnsurfCbpbdity(4);
        buf.putInt(RESTORE_STATE);
        rq.flushNow();
    }

    D3DGrbphidsDfvidf gftDfvidf() {
        rfturn dfvidf;
    }

    stbtid dlbss D3DContfxtCbps fxtfnds ContfxtCbpbbilitifs {
        /**
         * Indidbtfs thf prfsfndf of pixfl shbdfrs (v2.0 or grfbtfr).
         * This dbp will only bf sft if thf hbrdwbrf supports thf minimum numbfr
         * of tfxturf units.
         */
    @Nbtivf stbtid finbl int CAPS_LCD_SHADER       = (FIRST_PRIVATE_CAP << 0);
        /**
         * Indidbtfs thf prfsfndf of pixfl shbdfrs (v2.0 or grfbtfr).
         * This dbp will only bf sft if thf hbrdwbrf mffts our
         * minimum rfquirfmfnts.
         */
    @Nbtivf stbtid finbl int CAPS_BIOP_SHADER      = (FIRST_PRIVATE_CAP << 1);
        /**
         * Indidbtfs thbt thf dfvidf wbs suddfssfully initiblizfd bnd dbn
         * bf sbffly usfd.
         */
    @Nbtivf stbtid finbl int CAPS_DEVICE_OK        = (FIRST_PRIVATE_CAP << 2);
        /**
         * Indidbtfs thbt thf dfvidf hbs bll of thf nfdfssbry dbpbbilitifs
         * to support thf Antiblibsing Pixfl Shbdfr progrbm.
         */
    @Nbtivf stbtid finbl int CAPS_AA_SHADER        = (FIRST_PRIVATE_CAP << 3);

        D3DContfxtCbps(int dbps, String bdbptfrId) {
            supfr(dbps, bdbptfrId);
        }

        @Ovfrridf
        publid String toString() {
            StringBufffr buf = nfw StringBufffr(supfr.toString());
            if ((dbps & CAPS_LCD_SHADER) != 0) {
                buf.bppfnd("CAPS_LCD_SHADER|");
            }
            if ((dbps & CAPS_BIOP_SHADER) != 0) {
                buf.bppfnd("CAPS_BIOP_SHADER|");
            }
            if ((dbps & CAPS_AA_SHADER) != 0) {
                buf.bppfnd("CAPS_AA_SHADER|");
            }
            if ((dbps & CAPS_DEVICE_OK) != 0) {
                buf.bppfnd("CAPS_DEVICE_OK|");
            }
            rfturn buf.toString();
        }
    }
}
