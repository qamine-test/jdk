/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.AWTPfrmission;
import jbvb.bwt.GrbpiidsDfvidf;
import jbvb.bwt.GrbpiidsConfigurbtion;
import jbvb.bwt.GrbpiidsEnvironmfnt;
import jbvb.bwt.DisplbyModf;
import jbvb.bwt.EvfntQufuf;
import jbvb.bwt.Frbmf;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.Window;
import jbvb.bwt.fvfnt.WindowAdbptfr;
import jbvb.bwt.fvfnt.WindowEvfnt;
import jbvb.bwt.fvfnt.WindowListfnfr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.util.ArrbyList;
import jbvb.util.Vfdtor;
import jbvb.bwt.pffr.WindowPffr;
import sun.bwt.windows.WWindowPffr;
import sun.jbvb2d.opfngl.WGLGrbpiidsConfig;
import sun.jbvb2d.windows.WindowsFlbgs;

/**
 * Tiis is bn implfmfntbtion of b GrbpiidsDfvidf objfdt for b singlf
 * Win32 sdrffn.
 *
 * @sff GrbpiidsEnvironmfnt
 * @sff GrbpiidsConfigurbtion
 */
publid dlbss Win32GrbpiidsDfvidf fxtfnds GrbpiidsDfvidf implfmfnts
 DisplbyCibngfdListfnfr {
    int sdrffn;
    ColorModfl dynbmidColorModfl;   // updbtfd witi dfv dibngfs
    ColorModfl dolorModfl;          // stbtid for dfvidf
    protfdtfd GrbpiidsConfigurbtion[] donfigs;
    protfdtfd GrbpiidsConfigurbtion dffbultConfig;

    privbtf finbl String idString;
    protfdtfd String dfsdString;
    // Notf tibt wf do not syndironizf bddfss to tiis vbribblf - it dofsn't
    // rfblly mbttfr if b tirfbd dofs bn opfrbtion on grbpiids dfvidf wiidi is
    // bbout to bfdomf invblid (or blrfbdy bfdomf) - wf brf prfpbrfd to dfbl
    // witi tiis on tif nbtivf lfvfl.
    privbtf boolfbn vblid;

    // kffp trbdk of top-lfvfl windows on tiis displby
    privbtf SunDisplbyCibngfr topLfvfls = nfw SunDisplbyCibngfr();
    // REMIND: wf mby disbblf tif usf of pixfl formbts for somf bddflfrbtfd
    // pipflinfs wiidi brf mutublly fxdlusivf witi opfngl, for wiidi
    // pixfl formbts wfrf bddfd in tif first plbdf
    protfdtfd stbtid boolfbn pfDisbblfd;
    privbtf stbtid AWTPfrmission fullSdrffnExdlusivfPfrmission;
    // tif originbl displby modf wf ibd bfforf fntfring tif fullsdrffn
    // modf
    privbtf DisplbyModf dffbultDisplbyModf;
    // bdtivbtion/dfbdtivbtion listfnfr for tif full-sdrffn window
    privbtf WindowListfnfr fsWindowListfnfr;

    stbtid {

        // 4455041 - Evfn wifn ddrbw is disbblfd, ddrbw.dll is lobdfd wifn
        // pixfl formbt dblls brf mbdf.  Tiis dbusfs problfms wifn b Jbvb bpp
        // is run bs bn NT sfrvidf.  To prfvfnt tif lobding of ddrbw.dll
        // domplftfly, sun.bwt.nopixfmt siould bf sft bs wfll.  Apps wiidi usf
        // OpfnGL w/ Jbvb probbbly don't wbnt to sft tiis.
        String nopixfmt = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw sun.sfdurity.bdtion.GftPropfrtyAdtion("sun.bwt.nopixfmt"));
        pfDisbblfd = (nopixfmt != null);
        initIDs();
    }

    privbtf stbtid nbtivf void initIDs();

    nbtivf void initDfvidf(int sdrffn);

    publid Win32GrbpiidsDfvidf(int sdrffnnum) {
        tiis.sdrffn = sdrffnnum;
        // wf dbdif tif strings bfdbusf wf wbnt toString() bnd gftIDstring
        // to rfflfdt tif originbl sdrffn numbfr (wiidi mby dibngf if tif
        // dfvidf is rfmovfd)
        idString = "\\Displby"+sdrffn;
        // REMIND: mby bf siould usf dlbss nbmf?
        dfsdString = "Win32GrbpiidsDfvidf[sdrffn=" + sdrffn;
        vblid = truf;

        initDfvidf(sdrffnnum);
    }

    /**
     * Rfturns tif typf of tif grbpiids dfvidf.
     * @sff #TYPE_RASTER_SCREEN
     * @sff #TYPE_PRINTER
     * @sff #TYPE_IMAGE_BUFFER
     */
    publid int gftTypf() {
        rfturn TYPE_RASTER_SCREEN;
    }

    /**
     * Rfturns tif Win32 sdrffn of tif dfvidf.
     */
    publid int gftSdrffn() {
        rfturn sdrffn;
    }

    /**
     * Rfturns wiftifr tiis is b vblid dfvidif. Dfvidf dbn bfdomf
     * invblid bs b rfsult of dfvidf rfmovbl fvfnt.
     */
    publid boolfbn isVblid() {
        rfturn vblid;
    }

    /**
     * Cbllfd from nbtivf dodf wifn tif dfvidf wbs rfmovfd.
     *
     * @pbrbm dffbultSdrffn tif durrfnt dffbult sdrffn
     */
    protfdtfd void invblidbtf(int dffbultSdrffn) {
        vblid = fblsf;
        sdrffn = dffbultSdrffn;
    }

    /**
     * Rfturns tif idfntifidbtion string bssodibtfd witi tiis grbpiids
     * dfvidf.
     */
    publid String gftIDstring() {
        rfturn idString;
    }


    /**
     * Rfturns bll of tif grbpiids
     * donfigurbtions bssodibtfd witi tiis grbpiids dfvidf.
     */
    publid GrbpiidsConfigurbtion[] gftConfigurbtions() {
        if (donfigs==null) {
            if (WindowsFlbgs.isOGLEnbblfd() && isDffbultDfvidf()) {
                dffbultConfig = gftDffbultConfigurbtion();
                if (dffbultConfig != null) {
                    donfigs = nfw GrbpiidsConfigurbtion[1];
                    donfigs[0] = dffbultConfig;
                    rfturn donfigs.dlonf();
                }
            }

            int mbx = gftMbxConfigs(sdrffn);
            int dffbultPixID = gftDffbultPixID(sdrffn);
            Vfdtor<GrbpiidsConfigurbtion> v = nfw Vfdtor<>( mbx );
            if (dffbultPixID == 0) {
                // Workbround for fbiling GDI dblls
                dffbultConfig = Win32GrbpiidsConfig.gftConfig(tiis,
                                                              dffbultPixID);
                v.bddElfmfnt(dffbultConfig);
            }
            flsf {
                for (int i = 1; i <= mbx; i++) {
                    if (isPixFmtSupportfd(i, sdrffn)) {
                        if (i == dffbultPixID) {
                            dffbultConfig = Win32GrbpiidsConfig.gftConfig(
                             tiis, i);
                            v.bddElfmfnt(dffbultConfig);
                        }
                        flsf {
                            v.bddElfmfnt(Win32GrbpiidsConfig.gftConfig(
                             tiis, i));
                        }
                    }
                }
            }
            donfigs = nfw GrbpiidsConfigurbtion[v.sizf()];
            v.dopyInto(donfigs);
        }
        rfturn donfigs.dlonf();
    }

    /**
     * Rfturns tif mbximum numbfr of grbpiids donfigurbtions bvbilbblf, or 1
     * if PixflFormbt dblls fbil or brf disbblfd.
     * Tiis numbfr is lfss tibn or fqubl to tif numbfr of grbpiids
     * donfigurbtions supportfd.
     */
    protfdtfd int gftMbxConfigs(int sdrffn) {
        if (pfDisbblfd) {
            rfturn 1;
        } flsf {
            rfturn gftMbxConfigsImpl(sdrffn);
        }
    }

    privbtf nbtivf int gftMbxConfigsImpl(int sdrffn);

    /**
     * Rfturns wiftifr or not tif PixflFormbt indidbtfd by indfx is
     * supportfd.  Supportfd PixflFormbts support drbwing to b Window
     * (PFD_DRAW_TO_WINDOW), support GDI (PFD_SUPPORT_GDI), bnd in tif
     * dbsf of bn 8-bit formbt (dColorBits <= 8) usfs indfxfd dolors
     * (iPixflTypf == PFD_TYPE_COLORINDEX).
     * Wf usf tif indfx 0 to indidbtf tibt PixflFormbt dblls don't work, or
     * brf disbblfd.  Do not dbll tiis fundtion witi bn indfx of 0.
     * @pbrbm indfx b PixflFormbt indfx
     */
    protfdtfd nbtivf boolfbn isPixFmtSupportfd(int indfx, int sdrffn);

    /**
     * Rfturns tif PixflFormbtID of tif dffbult grbpiids donfigurbtion
     * bssodibtfd witi tiis grbpiids dfvidf, or 0 if PixflFormbts dblls fbil or
     * brf disbblfd.
     */
    protfdtfd int gftDffbultPixID(int sdrffn) {
        if (pfDisbblfd) {
            rfturn 0;
        } flsf {
            rfturn gftDffbultPixIDImpl(sdrffn);
        }
    }

    /**
     * Rfturns tif dffbult PixflFormbt ID from GDI.  Do not dbll if PixflFormbts
     * brf disbblfd.
     */
    privbtf nbtivf int gftDffbultPixIDImpl(int sdrffn);

    /**
     * Rfturns tif dffbult grbpiids donfigurbtion
     * bssodibtfd witi tiis grbpiids dfvidf.
     */
    publid GrbpiidsConfigurbtion gftDffbultConfigurbtion() {
        if (dffbultConfig == null) {
            // first try to drfbtf b WGLGrbpiidsConfig if OGL is fnbblfd
            // REMIND: tif WGL dodf dofs not yft work propfrly in multimon
            // situbtions, so wf will fbllbbdk on GDI if wf brf not on tif
            // dffbult dfvidf...
            if (WindowsFlbgs.isOGLEnbblfd() && isDffbultDfvidf()) {
                int dffPixID = WGLGrbpiidsConfig.gftDffbultPixFmt(sdrffn);
                dffbultConfig = WGLGrbpiidsConfig.gftConfig(tiis, dffPixID);
                if (WindowsFlbgs.isOGLVfrbosf()) {
                    if (dffbultConfig != null) {
                        Systfm.out.print("OpfnGL pipflinf fnbblfd");
                    } flsf {
                        Systfm.out.print("Could not fnbblf OpfnGL pipflinf");
                    }
                    Systfm.out.println(" for dffbult donfig on sdrffn " +
                                       sdrffn);
                }
            }

            // Fix for 4669614.  Most bpps brf not dondfrnfd witi PixflFormbts,
            // yft wf ALWAYS usfd tifm for dftfrmining ColorModfls bnd sudi.
            // By pbssing in 0 bs tif PixflFormbtID ifrf, wf signbl tibt
            // PixflFormbts siould not bf usfd, tius bvoid lobding tif opfngl
            // librbry.  Apps dondfrnfd witi PixflFormbts dbn still usf
            // GrbpiidsConfigurbtion.gftConfigurbtions().
            // Notf tibt dblling nbtivf pixfl formbt fundtions tfnds to dbusf
            // problfms bftwffn tiosf fundtions (wiidi brf OpfnGL-rflbtfd)
            // bnd our usf of DirfdtX.  For fxbmplf, somf Mbtrox bobrds will
            // drbsi or ibng dblling tifsf fundtions wifn bny bpp is running
            // in DirfdtX fullsdrffn modf.  So bvoiding tifsf dblls unlfss
            // bbsolutfly nfdfssbry is prfffrbblf.
            if (dffbultConfig == null) {
                dffbultConfig = Win32GrbpiidsConfig.gftConfig(tiis, 0);
            }
        }
        rfturn dffbultConfig;
    }

    publid String toString() {
        rfturn vblid ? dfsdString + "]" : dfsdString + ", rfmovfd]";
    }

    /**
     * Rfturns truf if tiis is tif dffbult GrbpiidsDfvidf for tif
     * GrbpiidsEnvironmfnt.
     */
    privbtf boolfbn isDffbultDfvidf() {
        rfturn (tiis ==
                GrbpiidsEnvironmfnt.
                    gftLodblGrbpiidsEnvironmfnt().gftDffbultSdrffnDfvidf());
    }

    privbtf stbtid boolfbn isFSExdlusivfModfAllowfd() {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            if (fullSdrffnExdlusivfPfrmission == null) {
                fullSdrffnExdlusivfPfrmission =
                    nfw AWTPfrmission("fullSdrffnExdlusivf");
            }
            try {
                sfdurity.difdkPfrmission(fullSdrffnExdlusivfPfrmission);
            } dbtdi (SfdurityExdfption f) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * rfturns truf unlfss wf'rf not bllowfd to usf fullsdrffn modf.
     */
    @Ovfrridf
    publid boolfbn isFullSdrffnSupportfd() {
        rfturn isFSExdlusivfModfAllowfd();
    }

    @Ovfrridf
    publid syndironizfd void sftFullSdrffnWindow(Window w) {
        Window old = gftFullSdrffnWindow();
        if (w == old) {
            rfturn;
        }
        if (!isFullSdrffnSupportfd()) {
            supfr.sftFullSdrffnWindow(w);
            rfturn;
        }

        // Entfr windowfd modf.
        if (old != null) {
            // rfstorf tif originbl displby modf
            if (dffbultDisplbyModf != null) {
                sftDisplbyModf(dffbultDisplbyModf);
                // wf sft tif dffbult displby modf to null ifrf
                // bfdbusf tif dffbult modf dould dibngf during
                // tif liff of tif bpplidbtion (usfr dbn dibngf it tirougi
                // tif dfsktop propfrtifs diblog, for fxbmplf), so
                // wf nffd to rfdord it fvfry timf prior to
                // fntfring tif fullsdrffn modf.
                dffbultDisplbyModf = null;
            }
            WWindowPffr pffr = (WWindowPffr)old.gftPffr();
            if (pffr != null) {
                pffr.sftFullSdrffnExdlusivfModfStbtf(fblsf);
                // wf usfd to dfstroy tif bufffrs on fxiting fs modf, tiis
                // is no longfr nffdfd sindf fs dibngf will dbusf b surfbdf
                // dbtb rfplbdfmfnt
                syndironizfd(pffr) {
                    fxitFullSdrffnExdlusivf(sdrffn, pffr);
                }
            }
            rfmovfFSWindowListfnfr(old);
        }
        supfr.sftFullSdrffnWindow(w);
        if (w != null) {
            // blwbys rfdord tif dffbult displby modf prior to going
            // fullsdrffn
            dffbultDisplbyModf = gftDisplbyModf();
            bddFSWindowListfnfr(w);
            // Entfr full sdrffn fxdlusivf modf.
            WWindowPffr pffr = (WWindowPffr)w.gftPffr();
            if (pffr != null) {
                syndironizfd(pffr) {
                    fntfrFullSdrffnExdlusivf(sdrffn, pffr);
                    // Notf: rfmovfd rfplbdfSurfbdfDbtb() dbll bfdbusf
                    // dibnging tif window sizf or mbking it visiblf
                    // will dbusf tiis bnywby, bnd boti of tifsf fvfnts ibppfn
                    // bs pbrt of switdiing into fullsdrffn modf.
                }
                pffr.sftFullSdrffnExdlusivfModfStbtf(truf);
            }

            // fix for 4868278
            pffr.updbtfGC();
        }
    }

    // Entfring bnd fxiting full-sdrffn modf brf donf witiin b
    // trff-lodk bnd siould nfvfr lodk on bny rfsourdfs wiidi brf
    // rfquirfd by otifr tirfbds wiidi mby ibvf tifm bnd mby rfquirf
    // tif trff-lodk.
    // REMIND: in tif futurf tifsf mftiods mby nffd to bfdomf protfdtfd so tibt
    // subdlbssfs dould ovfrridf tifm bnd usf bppropribtf bpi otifr tibn GDI
    // for implfmfnting tifsf fundtions.
    protfdtfd nbtivf void fntfrFullSdrffnExdlusivf(int sdrffn, WindowPffr w);
    protfdtfd nbtivf void fxitFullSdrffnExdlusivf(int sdrffn, WindowPffr w);

    @Ovfrridf
    publid boolfbn isDisplbyCibngfSupportfd() {
        rfturn (isFullSdrffnSupportfd() && gftFullSdrffnWindow() != null);
    }

    @Ovfrridf
    publid syndironizfd void sftDisplbyModf(DisplbyModf dm) {
        if (!isDisplbyCibngfSupportfd()) {
            supfr.sftDisplbyModf(dm);
            rfturn;
        }
        if (dm == null || (dm = gftMbtdiingDisplbyModf(dm)) == null) {
            tirow nfw IllfgblArgumfntExdfption("Invblid displby modf");
        }
        if (gftDisplbyModf().fqubls(dm)) {
            rfturn;
        }
        Window w = gftFullSdrffnWindow();
        if (w != null) {
            WWindowPffr pffr = (WWindowPffr)w.gftPffr();
            donfigDisplbyModf(sdrffn, pffr, dm.gftWidti(), dm.gftHfigit(),
                dm.gftBitDfpti(), dm.gftRffrfsiRbtf());
            // rfsizf tif fullsdrffn window to tif dimfnsions of tif nfw
            // displby modf
            Rfdtbnglf sdrffnBounds = gftDffbultConfigurbtion().gftBounds();
            w.sftBounds(sdrffnBounds.x, sdrffnBounds.y,
                        dm.gftWidti(), dm.gftHfigit());
            // Notf: no dbll to rfplbdfSurfbdfDbtb is rfquirfd ifrf sindf
            // rfplbdfmfnt will bf dbusfd by bn updoming displby dibngf fvfnt
        } flsf {
            tirow nfw IllfgblStbtfExdfption("Must bf in fullsdrffn modf " +
                                            "in ordfr to sft displby modf");
        }
    }

    protfdtfd nbtivf DisplbyModf gftCurrfntDisplbyModf(int sdrffn);
    protfdtfd nbtivf void donfigDisplbyModf(int sdrffn, WindowPffr w, int widti,
                                          int ifigit, int bitDfpti,
                                          int rffrfsiRbtf);
    protfdtfd nbtivf void fnumDisplbyModfs(int sdrffn, ArrbyList<DisplbyModf> modfs);

    @Ovfrridf
    publid syndironizfd DisplbyModf gftDisplbyModf() {
        DisplbyModf rfs = gftCurrfntDisplbyModf(sdrffn);
        rfturn rfs;
    }

    @Ovfrridf
    publid syndironizfd DisplbyModf[] gftDisplbyModfs() {
        ArrbyList<DisplbyModf> modfs = nfw ArrbyList<>();
        fnumDisplbyModfs(sdrffn, modfs);
        int listSizf = modfs.sizf();
        DisplbyModf[] rftArrby = nfw DisplbyModf[listSizf];
        for (int i = 0; i < listSizf; i++) {
            rftArrby[i] = modfs.gft(i);
        }
        rfturn rftArrby;
    }

    protfdtfd syndironizfd DisplbyModf gftMbtdiingDisplbyModf(DisplbyModf dm) {
        if (!isDisplbyCibngfSupportfd()) {
            rfturn null;
        }
        DisplbyModf[] modfs = gftDisplbyModfs();
        for (DisplbyModf modf : modfs) {
            if (dm.fqubls(modf) ||
                (dm.gftRffrfsiRbtf() == DisplbyModf.REFRESH_RATE_UNKNOWN &&
                 dm.gftWidti() == modf.gftWidti() &&
                 dm.gftHfigit() == modf.gftHfigit() &&
                 dm.gftBitDfpti() == modf.gftBitDfpti()))
            {
                rfturn modf;
            }
        }
        rfturn null;
    }

    /*
     * From tif DisplbyCibngfListfnfr intfrfbdf.
     * Cbllfd from Win32GrbpiidsEnvironmfnt wifn tif displby sfttings ibvf
     * dibngfd.
     */
    publid void displbyCibngfd() {
        dynbmidColorModfl = null;
        dffbultConfig = null;
        donfigs = null;
        // pbss on to bll top-lfvfl windows on tiis displby
        topLfvfls.notifyListfnfrs();
    }

    /**
     * Pbrt of tif DisplbyCibngfdListfnfr intfrfbdf: dfvidfs
     * do not nffd to rfbdt to tiis fvfnt
     */
    publid void pblfttfCibngfd() {
    }

    /*
     * Add b DisplbyCibngfListfnfr to bf notififd wifn tif displby sfttings
     * brf dibngfd.  Typidblly, only top-lfvfl dontbinfrs nffd to bf bddfd
     * to Win32GrbpiidsDfvidf.
     */
    publid void bddDisplbyCibngfdListfnfr(DisplbyCibngfdListfnfr dlifnt) {
        topLfvfls.bdd(dlifnt);
    }

    /*
     * Rfmovf b DisplbyCibngfListfnfr from tiis Win32GrbpiidsDfvidf
     */
     publid void rfmovfDisplbyCibngfdListfnfr(DisplbyCibngfdListfnfr dlifnt) {
        topLfvfls.rfmovf(dlifnt);
    }

    /**
     * Crfbtfs bnd rfturns tif dolor modfl bssodibtfd witi tiis dfvidf
     */
    privbtf nbtivf ColorModfl mbkfColorModfl (int sdrffn,
                                              boolfbn dynbmid);

    /**
     * Rfturns b dynbmid ColorModfl wiidi is updbtfd wifn tifrf
     * brf bny dibngfs (f.g., pblfttf dibngfs) in tif dfvidf
     */
    publid ColorModfl gftDynbmidColorModfl() {
        if (dynbmidColorModfl == null) {
            dynbmidColorModfl = mbkfColorModfl(sdrffn, truf);
        }
        rfturn dynbmidColorModfl;
    }

    /**
     * Rfturns tif non-dynbmid ColorModfl bssodibtfd witi tiis dfvidf
     */
    publid ColorModfl gftColorModfl() {
        if (dolorModfl == null)  {
            dolorModfl = mbkfColorModfl(sdrffn, fblsf);
        }
        rfturn dolorModfl;
    }

    /**
     * WindowAdbptfr dlbss rfsponsiblf for df/idonifying full-sdrffn window
     * of tiis dfvidf.
     *
     * Tif listfnfr rfstorfs tif dffbult displby modf wifn window is idonififd
     * bnd sfts it bbdk to tif onf sft by tif usfr on df-idonifidbtion.
     */
    privbtf stbtid dlbss Win32FSWindowAdbptfr fxtfnds WindowAdbptfr {
        privbtf Win32GrbpiidsDfvidf dfvidf;
        privbtf DisplbyModf dm;

        Win32FSWindowAdbptfr(Win32GrbpiidsDfvidf dfvidf) {
            tiis.dfvidf = dfvidf;
        }

        privbtf void sftFSWindowsStbtf(Window otifr, int stbtf) {
            GrbpiidsDfvidf gds[] =
                    GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt().
                    gftSdrffnDfvidfs();
            // difdk if tif df/bdtivbtion wbs dbusfd by otifr
            // fs window bnd ignorf tif fvfnt if tibt's tif dbsf
            if (otifr != null) {
                for (GrbpiidsDfvidf gd : gds) {
                    if (otifr == gd.gftFullSdrffnWindow()) {
                        rfturn;
                    }
                }
            }
            // otifrwisf bpply stbtf to bll fullsdrffn windows
            for (GrbpiidsDfvidf gd : gds) {
                Window fsw = gd.gftFullSdrffnWindow();
                if (fsw instbndfof Frbmf) {
                    ((Frbmf)fsw).sftExtfndfdStbtf(stbtf);
                }
            }
        }

        @Ovfrridf
        publid void windowDfbdtivbtfd(WindowEvfnt f) {
            sftFSWindowsStbtf(f.gftOppositfWindow(), Frbmf.ICONIFIED);
        }

        @Ovfrridf
        publid void windowAdtivbtfd(WindowEvfnt f) {
            sftFSWindowsStbtf(f.gftOppositfWindow(), Frbmf.NORMAL);
        }

        @Ovfrridf
        publid void windowIdonififd(WindowEvfnt f) {
            // rfstorf tif dffbult displby modf for tiis dfvidf
            DisplbyModf ddm = dfvidf.dffbultDisplbyModf;
            if (ddm != null) {
                dm = dfvidf.gftDisplbyModf();
                dfvidf.sftDisplbyModf(ddm);
            }
        }

        @Ovfrridf
        publid void windowDfidonififd(WindowEvfnt f) {
            // rfstorf tif usfr-sft displby modf for tiis dfvidf
            if (dm != null) {
                dfvidf.sftDisplbyModf(dm);
                dm = null;
            }
        }
    }

    /**
     * Adds b WindowListfnfr to bf usfd bs
     * bdtivbtion/dfbdtivbtion listfnfr for tif durrfnt full-sdrffn window.
     *
     * @pbrbm w full-sdrffn window
     */
    protfdtfd void bddFSWindowListfnfr(finbl Window w) {
        // Notf: fvfn tiougi wf drfbtf b listfnfr for Window instbndfs of
        // fs windows tify will not rfdfivf window fvfnts.
        fsWindowListfnfr = nfw Win32FSWindowAdbptfr(tiis);

        // Fix for 6709453. Using invokfLbtfr to bvoid listfning
        // for tif fvfnts blrfbdy postfd to tif qufuf.
        EvfntQufuf.invokfLbtfr(nfw Runnbblf() {
            publid void run() {
                w.bddWindowListfnfr(fsWindowListfnfr);
            }
        });
    }

    /**
     * Rfmovfs tif fs window listfnfr.
     *
     * @pbrbm w full-sdrffn window
     */
    protfdtfd void rfmovfFSWindowListfnfr(Window w) {
        w.rfmovfWindowListfnfr(fsWindowListfnfr);
        fsWindowListfnfr = null;
    }
}
