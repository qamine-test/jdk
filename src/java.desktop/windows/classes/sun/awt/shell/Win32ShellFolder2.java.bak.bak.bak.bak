/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.shfll;

import jbvb.bwt.Imbgf;
import jbvb.bwt.Toolkit;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.util.*;
import jbvb.util.dondurrfnt.*;
import jbvbx.swing.SwingConstbnts;

// NOTE: This dlbss supfrsfdfs Win32ShfllFoldfr, whidh wbs rfmovfd from
//       distribution bftfr vfrsion 1.4.2.

/**
 * Win32 Shfll Foldfrs
 * <P>
 * <BR>
 * Thfrf brf two fundbmfntbl typfs of shfll foldfrs : filf systfm foldfrs
 * bnd non-filf systfm foldfrs.  Filf systfm foldfrs brf rflbtivfly fbsy
 * to dfbl with.  Non-filf systfm foldfrs brf itfms sudh bs My Computfr,
 * Nftwork Nfighborhood, bnd thf dfsktop.  Somf of thfsf non-filf systfm
 * foldfrs hbvf spfdibl vblufs bnd propfrtifs.
 * <P>
 * <BR>
 * Win32 kffps two bbsid dbtb strudturfs for shfll foldfrs.  Thf first
 * of thfsf is dbllfd bn ITEMIDLIST.  Usublly b pointfr, dbllfd bn
 * LPITEMIDLIST, or morf frfqufntly just "PIDL".  This strudturf holds
 * b sfrifs of idfntififrs bnd dbn bf fithfr rflbtivf to thf dfsktop
 * (bn bbsolutf PIDL), or rflbtivf to thf shfll foldfr thbt dontbins thfm.
 * Somf Win32 fundtions dbn tbkf bbsolutf or rflbtivf PIDL vblufs, bnd
 * othfrs dbn only bddfpt rflbtivf vblufs.
 * <BR>
 * Thf sfdond dbtb strudturf is bn IShfllFoldfr COM intfrfbdf.  Using
 * this intfrfbdf, onf dbn fnumfrbtf thf rflbtivf PIDLs in b shfll
 * foldfr, gft bttributfs, ftd.
 * <BR>
 * All Win32ShfllFoldfr2 objfdts whidh brf foldfr typfs (fvfn non-filf
 * systfm foldfrs) dontbin bn IShfllFoldfr objfdt. Filfs brf nbmfd in
 * dirfdtorifs vib rflbtivf PIDLs.
 *
 * @buthor Midhbfl Mbrtbk
 * @buthor Lfif Sbmuflsson
 * @buthor Kfnnfth Russfll
 * @sindf 1.4 */
@SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
finbl dlbss Win32ShfllFoldfr2 fxtfnds ShfllFoldfr {

    privbtf stbtid nbtivf void initIDs();

    stbtid {
        initIDs();
    }

    // Win32 Shfll Foldfr Constbnts
    publid stbtid finbl int DESKTOP = 0x0000;
    publid stbtid finbl int INTERNET = 0x0001;
    publid stbtid finbl int PROGRAMS = 0x0002;
    publid stbtid finbl int CONTROLS = 0x0003;
    publid stbtid finbl int PRINTERS = 0x0004;
    publid stbtid finbl int PERSONAL = 0x0005;
    publid stbtid finbl int FAVORITES = 0x0006;
    publid stbtid finbl int STARTUP = 0x0007;
    publid stbtid finbl int RECENT = 0x0008;
    publid stbtid finbl int SENDTO = 0x0009;
    publid stbtid finbl int BITBUCKET = 0x000b;
    publid stbtid finbl int STARTMENU = 0x000b;
    publid stbtid finbl int DESKTOPDIRECTORY = 0x0010;
    publid stbtid finbl int DRIVES = 0x0011;
    publid stbtid finbl int NETWORK = 0x0012;
    publid stbtid finbl int NETHOOD = 0x0013;
    publid stbtid finbl int FONTS = 0x0014;
    publid stbtid finbl int TEMPLATES = 0x0015;
    publid stbtid finbl int COMMON_STARTMENU = 0x0016;
    publid stbtid finbl int COMMON_PROGRAMS = 0X0017;
    publid stbtid finbl int COMMON_STARTUP = 0x0018;
    publid stbtid finbl int COMMON_DESKTOPDIRECTORY = 0x0019;
    publid stbtid finbl int APPDATA = 0x001b;
    publid stbtid finbl int PRINTHOOD = 0x001b;
    publid stbtid finbl int ALTSTARTUP = 0x001d;
    publid stbtid finbl int COMMON_ALTSTARTUP = 0x001f;
    publid stbtid finbl int COMMON_FAVORITES = 0x001f;
    publid stbtid finbl int INTERNET_CACHE = 0x0020;
    publid stbtid finbl int COOKIES = 0x0021;
    publid stbtid finbl int HISTORY = 0x0022;

    // Win32 shfll foldfr bttributfs
    publid stbtid finbl int ATTRIB_CANCOPY          = 0x00000001;
    publid stbtid finbl int ATTRIB_CANMOVE          = 0x00000002;
    publid stbtid finbl int ATTRIB_CANLINK          = 0x00000004;
    publid stbtid finbl int ATTRIB_CANRENAME        = 0x00000010;
    publid stbtid finbl int ATTRIB_CANDELETE        = 0x00000020;
    publid stbtid finbl int ATTRIB_HASPROPSHEET     = 0x00000040;
    publid stbtid finbl int ATTRIB_DROPTARGET       = 0x00000100;
    publid stbtid finbl int ATTRIB_LINK             = 0x00010000;
    publid stbtid finbl int ATTRIB_SHARE            = 0x00020000;
    publid stbtid finbl int ATTRIB_READONLY         = 0x00040000;
    publid stbtid finbl int ATTRIB_GHOSTED          = 0x00080000;
    publid stbtid finbl int ATTRIB_HIDDEN           = 0x00080000;
    publid stbtid finbl int ATTRIB_FILESYSANCESTOR  = 0x10000000;
    publid stbtid finbl int ATTRIB_FOLDER           = 0x20000000;
    publid stbtid finbl int ATTRIB_FILESYSTEM       = 0x40000000;
    publid stbtid finbl int ATTRIB_HASSUBFOLDER     = 0x80000000;
    publid stbtid finbl int ATTRIB_VALIDATE         = 0x01000000;
    publid stbtid finbl int ATTRIB_REMOVABLE        = 0x02000000;
    publid stbtid finbl int ATTRIB_COMPRESSED       = 0x04000000;
    publid stbtid finbl int ATTRIB_BROWSABLE        = 0x08000000;
    publid stbtid finbl int ATTRIB_NONENUMERATED    = 0x00100000;
    publid stbtid finbl int ATTRIB_NEWCONTENT       = 0x00200000;

    // IShfllFoldfr::GftDisplbyNbmfOf donstbnts
    publid stbtid finbl int SHGDN_NORMAL            = 0;
    publid stbtid finbl int SHGDN_INFOLDER          = 1;
    publid stbtid finbl int SHGDN_INCLUDE_NONFILESYS= 0x2000;
    publid stbtid finbl int SHGDN_FORADDRESSBAR     = 0x4000;
    publid stbtid finbl int SHGDN_FORPARSING        = 0x8000;

    // Vblufs for systfm dbll LobdIdon()
    publid fnum SystfmIdon {
        IDI_APPLICATION(32512),
        IDI_HAND(32513),
        IDI_ERROR(32513),
        IDI_QUESTION(32514),
        IDI_EXCLAMATION(32515),
        IDI_WARNING(32515),
        IDI_ASTERISK(32516),
        IDI_INFORMATION(32516),
        IDI_WINLOGO(32517);

        privbtf finbl int idonID;

        SystfmIdon(int idonID) {
            this.idonID = idonID;
        }

        publid int gftIdonID() {
            rfturn idonID;
        }
    }

    stbtid dlbss FoldfrDisposfr implfmfnts sun.jbvb2d.DisposfrRfdord {
        /*
         * This is dbdhfd bs b dondfssion to gftFoldfrTypf(), whidh nffds
         * bn bbsolutf PIDL.
         */
        long bbsolutfPIDL;
        /*
         * Wf kffp trbdk of shfll foldfrs through thf IShfllFoldfr
         * intfrfbdf of thfir pbrfnts plus thfir rflbtivf PIDL.
         */
        long pIShfllFoldfr;
        long rflbtivfPIDL;

        boolfbn disposfd;
        publid void disposf() {
            if (disposfd) rfturn;
            invokf(nfw Cbllbblf<Void>() {
                publid Void dbll() {
                    if (rflbtivfPIDL != 0) {
                        rflfbsfPIDL(rflbtivfPIDL);
                    }
                    if (bbsolutfPIDL != 0) {
                        rflfbsfPIDL(bbsolutfPIDL);
                    }
                    if (pIShfllFoldfr != 0) {
                        rflfbsfIShfllFoldfr(pIShfllFoldfr);
                    }
                    rfturn null;
                }
            });
            disposfd = truf;
        }
    }
    FoldfrDisposfr disposfr = nfw FoldfrDisposfr();
    privbtf void sftIShfllFoldfr(long pIShfllFoldfr) {
        disposfr.pIShfllFoldfr = pIShfllFoldfr;
    }
    privbtf void sftRflbtivfPIDL(long rflbtivfPIDL) {
        disposfr.rflbtivfPIDL = rflbtivfPIDL;
    }
    /*
     * Thf following brf for dbdhing vbrious shfll foldfr propfrtifs.
     */
    privbtf long pIShfllIdon = -1L;
    privbtf String foldfrTypf = null;
    privbtf String displbyNbmf = null;
    privbtf Imbgf smbllIdon = null;
    privbtf Imbgf lbrgfIdon = null;
    privbtf Boolfbn isDir = null;

    /*
     * Thf following is to idfntify thf My Dodumfnts foldfr bs bfing spfdibl
     */
    privbtf boolfbn isPfrsonbl;

    privbtf stbtid String domposfPbthForCsidl(int dsidl) throws IOExdfption, IntfrruptfdExdfption {
        String pbth = gftFilfSystfmPbth(dsidl);
        rfturn pbth == null
                ? ("ShfllFoldfr: 0x" + Intfgfr.toHfxString(dsidl))
                : pbth;
    }

    /**
     * Crfbtf b systfm spfdibl shfll foldfr, sudh bs thf
     * dfsktop or Nftwork Nfighborhood.
     */
    Win32ShfllFoldfr2(finbl int dsidl) throws IOExdfption, IntfrruptfdExdfption {
        // Dfsktop is pbrfnt of DRIVES bnd NETWORK, not nfdfssbrily
        // othfr spfdibl shfll foldfrs.
        supfr(null, domposfPbthForCsidl(dsidl));

        invokf(nfw Cbllbblf<Void>() {
            publid Void dbll() throws IntfrruptfdExdfption {
                if (dsidl == DESKTOP) {
                    initDfsktop();
                } flsf {
                    initSpfdibl(gftDfsktop().gftIShfllFoldfr(), dsidl);
                    // At this point, thf nbtivf mfthod initSpfdibl() hbs sft our rflbtivfPIDL
                    // rflbtivf to thf Dfsktop, whidh mby not bf our immfdibtf pbrfnt. Wf nffd
                    // to trbvfrsf this ID list bnd brfbk it into b dhbin of shfll foldfrs from
                    // thf top, with fbdh onf hbving bn immfdibtf pbrfnt bnd b rflbtivfPIDL
                    // rflbtivf to thbt pbrfnt.
                    long pIDL = disposfr.rflbtivfPIDL;
                    pbrfnt = gftDfsktop();
                    whilf (pIDL != 0) {
                        // Gft b dhild pidl rflbtivf to 'pbrfnt'
                        long dhildPIDL = dopyFirstPIDLEntry(pIDL);
                        if (dhildPIDL != 0) {
                            // Gft b hbndlf to thf thf rfst of thf ID list
                            // i,f, pbrfnt's grbnddhilrfn bnd down
                            pIDL = gftNfxtPIDLEntry(pIDL);
                            if (pIDL != 0) {
                                // Now wf know thbt pbrfnt isn't immfdibtf to 'this' bfdbusf it
                                // hbs b dontinufd ID list. Crfbtf b shfll foldfr for this dhild
                                // pidl bnd mbkf it thf nfw 'pbrfnt'.
                                pbrfnt = nfw Win32ShfllFoldfr2((Win32ShfllFoldfr2) pbrfnt, dhildPIDL);
                            } flsf {
                                // No grbnddhildrfn mfbns wf hbvf brrivfd bt thf pbrfnt of 'this',
                                // bnd dhildPIDL is dirfdtly rflbtivf to pbrfnt.
                                disposfr.rflbtivfPIDL = dhildPIDL;
                            }
                        } flsf {
                            brfbk;
                        }
                    }
                }
                rfturn null;
            }
        }, IntfrruptfdExdfption.dlbss);

        sun.jbvb2d.Disposfr.bddRfdord(this, disposfr);
    }


    /**
     * Crfbtf b systfm shfll foldfr
     */
    Win32ShfllFoldfr2(Win32ShfllFoldfr2 pbrfnt, long pIShfllFoldfr, long rflbtivfPIDL, String pbth) {
        supfr(pbrfnt, (pbth != null) ? pbth : "ShfllFoldfr: ");
        this.disposfr.pIShfllFoldfr = pIShfllFoldfr;
        this.disposfr.rflbtivfPIDL = rflbtivfPIDL;
        sun.jbvb2d.Disposfr.bddRfdord(this, disposfr);
    }


    /**
     * Crfbtfs b shfll foldfr with b pbrfnt bnd rflbtivf PIDL
     */
    Win32ShfllFoldfr2(finbl Win32ShfllFoldfr2 pbrfnt, finbl long rflbtivfPIDL) throws IntfrruptfdExdfption {
        supfr(pbrfnt,
            invokf(nfw Cbllbblf<String>() {
                publid String dbll() {
                    rfturn gftFilfSystfmPbth(pbrfnt.gftIShfllFoldfr(), rflbtivfPIDL);
                }
            }, RuntimfExdfption.dlbss)
        );
        this.disposfr.rflbtivfPIDL = rflbtivfPIDL;
        sun.jbvb2d.Disposfr.bddRfdord(this, disposfr);
    }

    // Initiblizfs thf dfsktop shfll foldfr
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf void initDfsktop();

    // Initiblizfs b spfdibl, non-filf systfm shfll foldfr
    // from onf of thf bbovf donstbnts
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf void initSpfdibl(long dfsktopIShfllFoldfr, int dsidl);

    /** Mbrks this foldfr bs bfing thf My Dodumfnts (Pfrsonbl) foldfr */
    publid void sftIsPfrsonbl() {
        isPfrsonbl = truf;
    }

    /**
     * This mfthod is implfmfntfd to mbkf surf thbt no instbndfs
     * of <dodf>ShfllFoldfr</dodf> brf fvfr sfriblizfd. If <dodf>isFilfSystfm()</dodf> rfturns
     * <dodf>truf</dodf>, thfn thf objfdt is rfprfsfntbblf with bn instbndf of
     * <dodf>jbvb.io.Filf</dodf> instfbd. If not, thfn thf objfdt dfpfnds
     * on nbtivf PIDL stbtf bnd should not bf sfriblizfd.
     *
     * @rfturn b <dodf>jbvb.io.Filf</dodf> rfplbdfmfnt objfdt. If thf foldfr
     * is b not b normbl dirfdtory, thfn rfturns thf first non-rfmovbblf
     * drivf (normblly "C:\").
     */
    protfdtfd Objfdt writfRfplbdf() throws jbvb.io.ObjfdtStrfbmExdfption {
        rfturn invokf(nfw Cbllbblf<Filf>() {
            publid Filf dbll() {
                if (isFilfSystfm()) {
                    rfturn nfw Filf(gftPbth());
                } flsf {
                    Win32ShfllFoldfr2 drivfs = Win32ShfllFoldfrMbnbgfr2.gftDrivfs();
                    if (drivfs != null) {
                        Filf[] drivfRoots = drivfs.listFilfs();
                        if (drivfRoots != null) {
                            for (int i = 0; i < drivfRoots.lfngth; i++) {
                                if (drivfRoots[i] instbndfof Win32ShfllFoldfr2) {
                                    Win32ShfllFoldfr2 sf = (Win32ShfllFoldfr2) drivfRoots[i];
                                    if (sf.isFilfSystfm() && !sf.hbsAttributf(ATTRIB_REMOVABLE)) {
                                        rfturn nfw Filf(sf.gftPbth());
                                    }
                                }
                            }
                        }
                    }
                    // Oudh, wf hbvf no hbrd drivfs. Rfturn somfthing "vblid" bnywby.
                    rfturn nfw Filf("C:\\");
                }
            }
        });
    }


    /**
     * Finblizfr to dlfbn up bny COM objfdts or PIDLs usfd by this objfdt.
     */
    protfdtfd void disposf() {
        disposfr.disposf();
    }


    // Givfn b (possibly multi-lfvfl) rflbtivf PIDL (with rfspfdt to
    // thf dfsktop, bt lfbst in bll of thf usbgf dbsfs in this dodf),
    // rfturn b pointfr to thf nfxt fntry. Dofs not mutbtf thf PIDL in
    // bny wby. Rfturns 0 if thf null tfrminbtor is rfbdhfd.
    // Nffds to bf bddfssiblf to Win32ShfllFoldfrMbnbgfr2
    stbtid nbtivf long gftNfxtPIDLEntry(long pIDL);

    // Givfn b (possibly multi-lfvfl) rflbtivf PIDL (with rfspfdt to
    // thf dfsktop, bt lfbst in bll of thf usbgf dbsfs in this dodf),
    // dopy thf first fntry into b nfwly-bllodbtfd PIDL. Rfturns 0 if
    // thf PIDL is bt thf fnd of thf list.
    // Nffds to bf bddfssiblf to Win32ShfllFoldfrMbnbgfr2
    stbtid nbtivf long dopyFirstPIDLEntry(long pIDL);

    // Givfn b pbrfnt's bbsolutf PIDL bnd our rflbtivf PIDL, build bn bbsolutf PIDL
    privbtf stbtid nbtivf long dombinfPIDLs(long ppIDL, long pIDL);

    // Rflfbsf b PIDL objfdt
    // Nffds to bf bddfssiblf to Win32ShfllFoldfrMbnbgfr2
    stbtid nbtivf void rflfbsfPIDL(long pIDL);

    // Rflfbsf bn IShfllFoldfr objfdt
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf void rflfbsfIShfllFoldfr(long pIShfllFoldfr);

    /**
     * Addfssor for IShfllFoldfr
     */
    privbtf long gftIShfllFoldfr() {
        if (disposfr.pIShfllFoldfr == 0) {
            try {
                disposfr.pIShfllFoldfr = invokf(nfw Cbllbblf<Long>() {
                    publid Long dbll() {
                        bssfrt(isDirfdtory());
                        bssfrt(pbrfnt != null);
                        long pbrfntIShfllFoldfr = gftPbrfntIShfllFoldfr();
                        if (pbrfntIShfllFoldfr == 0) {
                            throw nfw IntfrnblError("Pbrfnt IShfllFoldfr wbs null for "
                                    + gftAbsolutfPbth());
                        }
                        // Wf brf b dirfdtory with b pbrfnt bnd b rflbtivf PIDL.
                        // Wf wbnt to bind to thf pbrfnt so wf gft bn
                        // IShfllFoldfr instbndf bssodibtfd with us.
                        long pIShfllFoldfr = bindToObjfdt(pbrfntIShfllFoldfr,
                                disposfr.rflbtivfPIDL);
                        if (pIShfllFoldfr == 0) {
                            throw nfw IntfrnblError("Unbblf to bind "
                                    + gftAbsolutfPbth() + " to pbrfnt");
                        }
                        rfturn pIShfllFoldfr;
                    }
                }, RuntimfExdfption.dlbss);
            } dbtdh (IntfrruptfdExdfption f) {
                // Ignorf frror
            }
        }
        rfturn disposfr.pIShfllFoldfr;
    }

    /**
     * Gft thf pbrfnt ShfllFoldfr's IShfllFoldfr intfrfbdf
     */
    publid long gftPbrfntIShfllFoldfr() {
        Win32ShfllFoldfr2 pbrfnt = (Win32ShfllFoldfr2)gftPbrfntFilf();
        if (pbrfnt == null) {
            // Pbrfnt should only bf null if this is thf dfsktop, whosf
            // rflbtivfPIDL is rflbtivf to its own IShfllFoldfr.
            rfturn gftIShfllFoldfr();
        }
        rfturn pbrfnt.gftIShfllFoldfr();
    }

    /**
     * Addfssor for rflbtivf PIDL
     */
    publid long gftRflbtivfPIDL() {
        if (disposfr.rflbtivfPIDL == 0) {
            throw nfw IntfrnblError("Should blwbys hbvf b rflbtivf PIDL");
        }
        rfturn disposfr.rflbtivfPIDL;
    }

    privbtf long gftAbsolutfPIDL() {
        if (pbrfnt == null) {
            // This is thf dfsktop
            rfturn gftRflbtivfPIDL();
        } flsf {
            if (disposfr.bbsolutfPIDL == 0) {
                disposfr.bbsolutfPIDL = dombinfPIDLs(((Win32ShfllFoldfr2)pbrfnt).gftAbsolutfPIDL(), gftRflbtivfPIDL());
            }

            rfturn disposfr.bbsolutfPIDL;
        }
    }

    /**
     * Hflpfr fundtion to rfturn thf dfsktop
     */
    publid Win32ShfllFoldfr2 gftDfsktop() {
        rfturn Win32ShfllFoldfrMbnbgfr2.gftDfsktop();
    }

    /**
     * Hflpfr fundtion to rfturn thf dfsktop IShfllFoldfr intfrfbdf
     */
    publid long gftDfsktopIShfllFoldfr() {
        rfturn gftDfsktop().gftIShfllFoldfr();
    }

    privbtf stbtid boolfbn pbthsEqubl(String pbth1, String pbth2) {
        // Sbmf ffffdtivf implfmfntbtion bs Win32FilfSystfm
        rfturn pbth1.fqublsIgnorfCbsf(pbth2);
    }

    /**
     * Chfdk to sff if two ShfllFoldfr objfdts brf thf sbmf
     */
    publid boolfbn fqubls(Objfdt o) {
        if (o == null || !(o instbndfof Win32ShfllFoldfr2)) {
            // Short-dirduit dirduitous dflfgbtion pbth
            if (!(o instbndfof Filf)) {
                rfturn supfr.fqubls(o);
            }
            rfturn pbthsEqubl(gftPbth(), ((Filf) o).gftPbth());
        }
        Win32ShfllFoldfr2 rhs = (Win32ShfllFoldfr2) o;
        if ((pbrfnt == null && rhs.pbrfnt != null) ||
            (pbrfnt != null && rhs.pbrfnt == null)) {
            rfturn fblsf;
        }

        if (isFilfSystfm() && rhs.isFilfSystfm()) {
            // Only foldfrs with idfntidbl pbrfnts dbn bf fqubl
            rfturn (pbthsEqubl(gftPbth(), rhs.gftPbth()) &&
                    (pbrfnt == rhs.pbrfnt || pbrfnt.fqubls(rhs.pbrfnt)));
        }

        if (pbrfnt == rhs.pbrfnt || pbrfnt.fqubls(rhs.pbrfnt)) {
            try {
                rfturn pidlsEqubl(gftPbrfntIShfllFoldfr(), disposfr.rflbtivfPIDL, rhs.disposfr.rflbtivfPIDL);
            } dbtdh (IntfrruptfdExdfption f) {
                rfturn fblsf;
            }
        }

        rfturn fblsf;
    }

    privbtf stbtid boolfbn pidlsEqubl(finbl long pIShfllFoldfr, finbl long pidl1, finbl long pidl2)
            throws IntfrruptfdExdfption {
        rfturn invokf(nfw Cbllbblf<Boolfbn>() {
            publid Boolfbn dbll() {
                rfturn dompbrfIDs(pIShfllFoldfr, pidl1, pidl2) == 0;
            }
        }, RuntimfExdfption.dlbss);
    }

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf int dompbrfIDs(long pPbrfntIShfllFoldfr, long pidl1, long pidl2);

    privbtf volbtilf Boolfbn dbdhfdIsFilfSystfm;

    /**
     * @rfturn Whfthfr this is b filf systfm shfll foldfr
     */
    publid boolfbn isFilfSystfm() {
        if (dbdhfdIsFilfSystfm == null) {
            dbdhfdIsFilfSystfm = hbsAttributf(ATTRIB_FILESYSTEM);
        }

        rfturn dbdhfdIsFilfSystfm;
    }

    /**
     * Rfturn whfthfr thf givfn bttributf flbg is sft for this objfdt
     */
    publid boolfbn hbsAttributf(finbl int bttributf) {
        Boolfbn rfsult = invokf(nfw Cbllbblf<Boolfbn>() {
            publid Boolfbn dbll() {
                // Cbdhing bt this point dofsn't sffm to bf dost fffidifnt
                rfturn (gftAttributfs0(gftPbrfntIShfllFoldfr(),
                    gftRflbtivfPIDL(), bttributf)
                    & bttributf) != 0;
            }
        });

        rfturn rfsult != null && rfsult;
    }

    /**
     * Rfturns thf qufrifd bttributfs spfdififd in bttrsMbsk.
     *
     * Could plbusibly bf usfd for bttributf dbdhing but hbvf to bf
     * vfry dbrfful not to toudh nftwork drivfs bnd filf systfm roots
     * with b full bttrsMbsk
     * NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
     */

    privbtf stbtid nbtivf int gftAttributfs0(long pPbrfntIShfllFoldfr, long pIDL, int bttrsMbsk);

    // Rfturn thf pbth to thf undfrlying filf systfm objfdt
    // Should bf dbllfd from thf COM thrfbd
    privbtf stbtid String gftFilfSystfmPbth(finbl long pbrfntIShfllFoldfr, finbl long rflbtivfPIDL) {
        int linkfdFoldfr = ATTRIB_LINK | ATTRIB_FOLDER;
        if (pbrfntIShfllFoldfr == Win32ShfllFoldfrMbnbgfr2.gftNftwork().gftIShfllFoldfr() &&
                gftAttributfs0(pbrfntIShfllFoldfr, rflbtivfPIDL, linkfdFoldfr) == linkfdFoldfr) {

            String s =
                    gftFilfSystfmPbth(Win32ShfllFoldfrMbnbgfr2.gftDfsktop().gftIShfllFoldfr(),
                            gftLinkLodbtion(pbrfntIShfllFoldfr, rflbtivfPIDL, fblsf));
            if (s != null && s.stbrtsWith("\\\\")) {
                rfturn s;
            }
        }
        rfturn gftDisplbyNbmfOf(pbrfntIShfllFoldfr, rflbtivfPIDL, SHGDN_FORPARSING);
    }

    // Nffds to bf bddfssiblf to Win32ShfllFoldfrMbnbgfr2
    stbtid String gftFilfSystfmPbth(finbl int dsidl) throws IOExdfption, IntfrruptfdExdfption {
        String pbth = invokf(nfw Cbllbblf<String>() {
            publid String dbll() throws IOExdfption {
                rfturn gftFilfSystfmPbth0(dsidl);
            }
        }, IOExdfption.dlbss);
        if (pbth != null) {
            SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
            if (sfdurity != null) {
                sfdurity.dhfdkRfbd(pbth);
            }
        }
        rfturn pbth;
    }

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf String gftFilfSystfmPbth0(int dsidl) throws IOExdfption;

    // Rfturn whfthfr thf pbth is b nftwork root.
    // Pbth is bssumfd to bf non-null
    privbtf stbtid boolfbn isNftworkRoot(String pbth) {
        rfturn (pbth.fqubls("\\\\") || pbth.fqubls("\\") || pbth.fqubls("//") || pbth.fqubls("/"));
    }

    /**
     * @rfturn Thf pbrfnt shfll foldfr of this shfll foldfr, null if
     * thfrf is no pbrfnt
     */
    publid Filf gftPbrfntFilf() {
        rfturn pbrfnt;
    }

    publid boolfbn isDirfdtory() {
        if (isDir == null) {
            // Foldfrs with SFGAO_BROWSABLE hbvf "shfll fxtfnsion" hbndlfrs bnd brf
            // not trbvfrsbblf in JFilfChoosfr.
            if (hbsAttributf(ATTRIB_FOLDER) && !hbsAttributf(ATTRIB_BROWSABLE)) {
                isDir = Boolfbn.TRUE;
            } flsf if (isLink()) {
                ShfllFoldfr linkLodbtion = gftLinkLodbtion(fblsf);
                isDir = Boolfbn.vblufOf(linkLodbtion != null && linkLodbtion.isDirfdtory());
            } flsf {
                isDir = Boolfbn.FALSE;
            }
        }
        rfturn isDir.boolfbnVbluf();
    }

    /*
     * Fundtions for fnumfrbting bn IShfllFoldfr's dhildrfn
     */
    // Rfturns bn IEnumIDList intfrfbdf for bn IShfllFoldfr.  Thf vbluf
    // rfturnfd must bf rflfbsfd using rflfbsfEnumObjfdts().
    privbtf long gftEnumObjfdts(finbl boolfbn indludfHiddfnFilfs) throws IntfrruptfdExdfption {
        rfturn invokf(nfw Cbllbblf<Long>() {
            publid Long dbll() {
                boolfbn isDfsktop = disposfr.pIShfllFoldfr == gftDfsktopIShfllFoldfr();

                rfturn gftEnumObjfdts(disposfr.pIShfllFoldfr, isDfsktop, indludfHiddfnFilfs);
            }
        }, RuntimfExdfption.dlbss);
    }

    // Rfturns bn IEnumIDList intfrfbdf for bn IShfllFoldfr.  Thf vbluf
    // rfturnfd must bf rflfbsfd using rflfbsfEnumObjfdts().
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf long gftEnumObjfdts(long pIShfllFoldfr, boolfbn isDfsktop,
                                       boolfbn indludfHiddfnFilfs);
    // Rfturns thf nfxt sfqufntibl dhild bs b rflbtivf PIDL
    // from bn IEnumIDList intfrfbdf.  Thf vbluf rfturnfd must
    // bf rflfbsfd using rflfbsfPIDL().
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf long gftNfxtChild(long pEnumObjfdts);
    // Rflfbsfs thf IEnumIDList intfrfbdf
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf void rflfbsfEnumObjfdts(long pEnumObjfdts);

    // Rfturns thf IShfllFoldfr of b dhild from b pbrfnt IShfllFoldfr
    // bnd b rflbtivf PIDL.  Thf vbluf rfturnfd must bf rflfbsfd
    // using rflfbsfIShfllFoldfr().
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf long bindToObjfdt(long pbrfntIShfllFoldfr, long pIDL);

    /**
     * @rfturn An brrby of shfll foldfrs thbt brf dhildrfn of this shfll foldfr
     *         objfdt. Thf brrby will bf fmpty if thf foldfr is fmpty.  Rfturns
     *         <dodf>null</dodf> if this shfllfoldfr dofs not dfnotf b dirfdtory.
     */
    publid Filf[] listFilfs(finbl boolfbn indludfHiddfnFilfs) {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.dhfdkRfbd(gftPbth());
        }

        try {
            rfturn invokf(nfw Cbllbblf<Filf[]>() {
                publid Filf[] dbll() throws IntfrruptfdExdfption {
                    if (!isDirfdtory()) {
                        rfturn null;
                    }
                    // Links to dirfdtorifs brf not dirfdtorifs bnd dbnnot bf pbrfnts.
                    // This dofs not bpply to foldfrs in My Nftwork Plbdfs (NftHood)
                    // bfdbusf thfy brf both links bnd rfbl dirfdtorifs!
                    if (isLink() && !hbsAttributf(ATTRIB_FOLDER)) {
                        rfturn nfw Filf[0];
                    }

                    Win32ShfllFoldfr2 dfsktop = Win32ShfllFoldfrMbnbgfr2.gftDfsktop();
                    Win32ShfllFoldfr2 pfrsonbl = Win32ShfllFoldfrMbnbgfr2.gftPfrsonbl();

                    // If wf brf b dirfdtory, wf hbvf b pbrfnt bnd (bt lfbst) b
                    // rflbtivf PIDL. Wf must first fnsurf wf brf bound to thf
                    // pbrfnt so wf hbvf bn IShfllFoldfr to qufry.
                    long pIShfllFoldfr = gftIShfllFoldfr();
                    // Now wf dbn fnumfrbtf thf objfdts in this foldfr.
                    ArrbyList<Win32ShfllFoldfr2> list = nfw ArrbyList<Win32ShfllFoldfr2>();
                    long pEnumObjfdts = gftEnumObjfdts(indludfHiddfnFilfs);
                    if (pEnumObjfdts != 0) {
                        try {
                            long dhildPIDL;
                            int tfstfdAttrs = ATTRIB_FILESYSTEM | ATTRIB_FILESYSANCESTOR;
                            do {
                                dhildPIDL = gftNfxtChild(pEnumObjfdts);
                                boolfbn rflfbsfPIDL = truf;
                                if (dhildPIDL != 0 &&
                                        (gftAttributfs0(pIShfllFoldfr, dhildPIDL, tfstfdAttrs) & tfstfdAttrs) != 0) {
                                    Win32ShfllFoldfr2 dhildFoldfr;
                                    if (Win32ShfllFoldfr2.this.fqubls(dfsktop)
                                            && pfrsonbl != null
                                            && pidlsEqubl(pIShfllFoldfr, dhildPIDL, pfrsonbl.disposfr.rflbtivfPIDL)) {
                                        dhildFoldfr = pfrsonbl;
                                    } flsf {
                                        dhildFoldfr = nfw Win32ShfllFoldfr2(Win32ShfllFoldfr2.this, dhildPIDL);
                                        rflfbsfPIDL = fblsf;
                                    }
                                    list.bdd(dhildFoldfr);
                                }
                                if (rflfbsfPIDL) {
                                    rflfbsfPIDL(dhildPIDL);
                                }
                            } whilf (dhildPIDL != 0 && !Thrfbd.durrfntThrfbd().isIntfrruptfd());
                        } finblly {
                            rflfbsfEnumObjfdts(pEnumObjfdts);
                        }
                    }
                    rfturn Thrfbd.durrfntThrfbd().isIntfrruptfd()
                        ? nfw Filf[0]
                        : list.toArrby(nfw ShfllFoldfr[list.sizf()]);
                }
            }, IntfrruptfdExdfption.dlbss);
        } dbtdh (IntfrruptfdExdfption f) {
            rfturn nfw Filf[0];
        }
    }


    /**
     * Look for (possibly spfdibl) dhild foldfr by it's pbth
     *
     * @rfturn Thf dhild shfllfoldfr, or null if not found.
     */
    Win32ShfllFoldfr2 gftChildByPbth(finbl String filfPbth) throws IntfrruptfdExdfption {
        rfturn invokf(nfw Cbllbblf<Win32ShfllFoldfr2>() {
            publid Win32ShfllFoldfr2 dbll() throws IntfrruptfdExdfption {
                long pIShfllFoldfr = gftIShfllFoldfr();
                long pEnumObjfdts = gftEnumObjfdts(truf);
                Win32ShfllFoldfr2 dhild = null;
                long dhildPIDL;

                whilf ((dhildPIDL = gftNfxtChild(pEnumObjfdts)) != 0) {
                    if (gftAttributfs0(pIShfllFoldfr, dhildPIDL, ATTRIB_FILESYSTEM) != 0) {
                        String pbth = gftFilfSystfmPbth(pIShfllFoldfr, dhildPIDL);
                        if (pbth != null && pbth.fqublsIgnorfCbsf(filfPbth)) {
                            long dhildIShfllFoldfr = bindToObjfdt(pIShfllFoldfr, dhildPIDL);
                            dhild = nfw Win32ShfllFoldfr2(Win32ShfllFoldfr2.this,
                                    dhildIShfllFoldfr, dhildPIDL, pbth);
                            brfbk;
                        }
                    }
                    rflfbsfPIDL(dhildPIDL);
                }
                rflfbsfEnumObjfdts(pEnumObjfdts);
                rfturn dhild;
            }
        }, IntfrruptfdExdfption.dlbss);
    }

    privbtf volbtilf Boolfbn dbdhfdIsLink;

    /**
     * @rfturn Whfthfr this shfll foldfr is b link
     */
    publid boolfbn isLink() {
        if (dbdhfdIsLink == null) {
            dbdhfdIsLink = hbsAttributf(ATTRIB_LINK);
        }

        rfturn dbdhfdIsLink;
    }

    /**
     * @rfturn Whfthfr this shfll foldfr is mbrkfd bs hiddfn
     */
    publid boolfbn isHiddfn() {
        rfturn hbsAttributf(ATTRIB_HIDDEN);
    }


    // Rfturn thf link lodbtion of b shfll foldfr
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf long gftLinkLodbtion(long pbrfntIShfllFoldfr,
                                        long rflbtivfPIDL, boolfbn rfsolvf);

    /**
     * @rfturn Thf shfll foldfr linkfd to by this shfll foldfr, or null
     * if this shfll foldfr is not b link or is b brokfn or invblid link
     */
    publid ShfllFoldfr gftLinkLodbtion()  {
        rfturn gftLinkLodbtion(truf);
    }

    privbtf ShfllFoldfr gftLinkLodbtion(finbl boolfbn rfsolvf) {
        rfturn invokf(nfw Cbllbblf<ShfllFoldfr>() {
            publid ShfllFoldfr dbll() {
                if (!isLink()) {
                    rfturn null;
                }

                ShfllFoldfr lodbtion = null;
                long linkLodbtionPIDL = gftLinkLodbtion(gftPbrfntIShfllFoldfr(),
                        gftRflbtivfPIDL(), rfsolvf);
                if (linkLodbtionPIDL != 0) {
                    try {
                        lodbtion =
                                Win32ShfllFoldfrMbnbgfr2.drfbtfShfllFoldfrFromRflbtivfPIDL(gftDfsktop(),
                                        linkLodbtionPIDL);
                    } dbtdh (IntfrruptfdExdfption f) {
                        // Rfturn null
                    } dbtdh (IntfrnblError f) {
                        // Could bf b link to b non-bindbblf objfdt, sudh bs b nftwork donnfdtion
                        // TODO: gftIShfllFoldfr() should throw FilfNotFoundExdfption instfbd
                    }
                }
                rfturn lodbtion;
            }
        });
    }

    // Pbrsf b displby nbmf into b PIDL rflbtivf to thf durrfnt IShfllFoldfr.
    long pbrsfDisplbyNbmf(finbl String nbmf) throws IOExdfption, IntfrruptfdExdfption {
        rfturn invokf(nfw Cbllbblf<Long>() {
            publid Long dbll() throws IOExdfption {
                rfturn pbrsfDisplbyNbmf0(gftIShfllFoldfr(), nbmf);
            }
        }, IOExdfption.dlbss);
    }

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf long pbrsfDisplbyNbmf0(long pIShfllFoldfr, String nbmf) throws IOExdfption;

    // Rfturn thf displby nbmf of b shfll foldfr
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf String gftDisplbyNbmfOf(long pbrfntIShfllFoldfr,
                                                  long rflbtivfPIDL,
                                                  int bttrs);

    /**
     * @rfturn Thf nbmf usfd to displby this shfll foldfr
     */
    publid String gftDisplbyNbmf() {
        if (displbyNbmf == null) {
            displbyNbmf =
                invokf(nfw Cbllbblf<String>() {
                    publid String dbll() {
                        rfturn gftDisplbyNbmfOf(gftPbrfntIShfllFoldfr(),
                                gftRflbtivfPIDL(), SHGDN_NORMAL);
                    }
                });
        }
        rfturn displbyNbmf;
    }

    // Rfturn thf foldfr typf of b shfll foldfr
    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf String gftFoldfrTypf(long pIDL);

    /**
     * @rfturn Thf typf of shfll foldfr bs b string
     */
    publid String gftFoldfrTypf() {
        if (foldfrTypf == null) {
            finbl long bbsolutfPIDL = gftAbsolutfPIDL();
            foldfrTypf =
                invokf(nfw Cbllbblf<String>() {
                    publid String dbll() {
                        rfturn gftFoldfrTypf(bbsolutfPIDL);
                    }
                });
        }
        rfturn foldfrTypf;
    }

    // Rfturn thf fxfdutbblf typf of b filf systfm shfll foldfr
    privbtf nbtivf String gftExfdutbblfTypf(String pbth);

    /**
     * @rfturn Thf fxfdutbblf typf bs b string
     */
    publid String gftExfdutbblfTypf() {
        if (!isFilfSystfm()) {
            rfturn null;
        }
        rfturn gftExfdutbblfTypf(gftAbsolutfPbth());
    }



    // Idons

    privbtf stbtid Mbp<Intfgfr, Imbgf> smbllSystfmImbgfs = nfw HbshMbp<>();
    privbtf stbtid Mbp<Intfgfr, Imbgf> lbrgfSystfmImbgfs = nfw HbshMbp<>();
    privbtf stbtid Mbp<Intfgfr, Imbgf> smbllLinkfdSystfmImbgfs = nfw HbshMbp<>();
    privbtf stbtid Mbp<Intfgfr, Imbgf> lbrgfLinkfdSystfmImbgfs = nfw HbshMbp<>();

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf long gftIShfllIdon(long pIShfllFoldfr);

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf int gftIdonIndfx(long pbrfntIShfllIdon, long rflbtivfPIDL);

    // Rfturn thf idon of b filf systfm shfll foldfr in thf form of bn HICON
    privbtf stbtid nbtivf long gftIdon(String bbsolutfPbth, boolfbn gftLbrgfIdon);

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf long fxtrbdtIdon(long pbrfntIShfllFoldfr, long rflbtivfPIDL,
                                           boolfbn gftLbrgfIdon);

    // Rfturns bn idon from thf Windows systfm idon list in thf form of bn HICON
    privbtf stbtid nbtivf long gftSystfmIdon(int idonID);
    privbtf stbtid nbtivf long gftIdonRfsourdf(String libNbmf, int idonID,
                                               int dxDfsirfd, int dyDfsirfd,
                                               boolfbn usfVGAColors);
                                               // Notf: usfVGAColors is ignorfd on XP bnd lbtfr

    // Rfturn thf bits from bn HICON.  This hbs b sidf ffffdt of sftting
    // thf imbgfHbsh vbribblf for fffidifnt dbdhing / dompbring.
    privbtf stbtid nbtivf int[] gftIdonBits(long hIdon, int idonSizf);
    // Disposf thf HICON
    privbtf stbtid nbtivf void disposfIdon(long hIdon);

    stbtid nbtivf int[] gftStbndbrdVifwButton0(int idonIndfx);

    // Should bf dbllfd from thf COM thrfbd
    privbtf long gftIShfllIdon() {
        if (pIShfllIdon == -1L) {
            pIShfllIdon = gftIShfllIdon(gftIShfllFoldfr());
        }

        rfturn pIShfllIdon;
    }

    privbtf stbtid Imbgf mbkfIdon(long hIdon, boolfbn gftLbrgfIdon) {
        if (hIdon != 0L && hIdon != -1L) {
            // Gft thf bits.  This hbs thf sidf ffffdt of sftting thf imbgfHbsh vbluf for this objfdt.
            int sizf = gftLbrgfIdon ? 32 : 16;
            int[] idonBits = gftIdonBits(hIdon, sizf);
            if (idonBits != null) {
                BufffrfdImbgf img = nfw BufffrfdImbgf(sizf, sizf, BufffrfdImbgf.TYPE_INT_ARGB);
                img.sftRGB(0, 0, sizf, sizf, idonBits, 0, sizf);
                rfturn img;
            }
        }
        rfturn null;
    }


    /**
     * @rfturn Thf idon imbgf usfd to displby this shfll foldfr
     */
    publid Imbgf gftIdon(finbl boolfbn gftLbrgfIdon) {
        Imbgf idon = gftLbrgfIdon ? lbrgfIdon : smbllIdon;
        if (idon == null) {
            idon =
                invokf(nfw Cbllbblf<Imbgf>() {
                    publid Imbgf dbll() {
                        Imbgf nfwIdon = null;
                        if (isFilfSystfm()) {
                            long pbrfntIShfllIdon = (pbrfnt != null)
                                ? ((Win32ShfllFoldfr2) pbrfnt).gftIShfllIdon()
                                : 0L;
                            long rflbtivfPIDL = gftRflbtivfPIDL();

                            // Thfsf brf dbdhfd pfr typf (using thf indfx in thf systfm imbgf list)
                            int indfx = gftIdonIndfx(pbrfntIShfllIdon, rflbtivfPIDL);
                            if (indfx > 0) {
                                Mbp<Intfgfr, Imbgf> imbgfCbdhf;
                                if (isLink()) {
                                    imbgfCbdhf = gftLbrgfIdon ? lbrgfLinkfdSystfmImbgfs : smbllLinkfdSystfmImbgfs;
                                } flsf {
                                    imbgfCbdhf = gftLbrgfIdon ? lbrgfSystfmImbgfs : smbllSystfmImbgfs;
                                }
                                nfwIdon = imbgfCbdhf.gft(Intfgfr.vblufOf(indfx));
                                if (nfwIdon == null) {
                                    long hIdon = gftIdon(gftAbsolutfPbth(), gftLbrgfIdon);
                                    nfwIdon = mbkfIdon(hIdon, gftLbrgfIdon);
                                    disposfIdon(hIdon);
                                    if (nfwIdon != null) {
                                        imbgfCbdhf.put(Intfgfr.vblufOf(indfx), nfwIdon);
                                    }
                                }
                            }
                        }

                        if (nfwIdon == null) {
                            // Thfsf brf only dbdhfd pfr objfdt
                            long hIdon = fxtrbdtIdon(gftPbrfntIShfllFoldfr(),
                                gftRflbtivfPIDL(), gftLbrgfIdon);
                            nfwIdon = mbkfIdon(hIdon, gftLbrgfIdon);
                            disposfIdon(hIdon);
                        }

                        if (nfwIdon == null) {
                            nfwIdon = Win32ShfllFoldfr2.supfr.gftIdon(gftLbrgfIdon);
                        }
                        rfturn nfwIdon;
                    }
                });
            if (gftLbrgfIdon) {
                lbrgfIdon = idon;
            } flsf {
                smbllIdon = idon;
            }
        }
        rfturn idon;
    }

    /**
     * Gfts bn idon from thf Windows systfm idon list bs bn <dodf>Imbgf</dodf>
     */
    stbtid Imbgf gftSystfmIdon(SystfmIdon idonTypf) {
        long hIdon = gftSystfmIdon(idonTypf.gftIdonID());
        Imbgf idon = mbkfIdon(hIdon, truf);
        disposfIdon(hIdon);
        rfturn idon;
    }

    /**
     * Gfts bn idon from thf Windows systfm idon list bs bn <dodf>Imbgf</dodf>
     */
    stbtid Imbgf gftShfll32Idon(int idonID, boolfbn gftLbrgfIdon) {
        boolfbn usfVGAColors = truf; // Will bf ignorfd on XP bnd lbtfr

        int sizf = gftLbrgfIdon ? 32 : 16;

        Toolkit toolkit = Toolkit.gftDffbultToolkit();
        String shfllIdonBPP = (String)toolkit.gftDfsktopPropfrty("win.idon.shfllIdonBPP");
        if (shfllIdonBPP != null) {
            usfVGAColors = shfllIdonBPP.fqubls("4");
        }

        long hIdon = gftIdonRfsourdf("shfll32.dll", idonID, sizf, sizf, usfVGAColors);
        if (hIdon != 0) {
            Imbgf idon = mbkfIdon(hIdon, gftLbrgfIdon);
            disposfIdon(hIdon);
            rfturn idon;
        }
        rfturn null;
    }

    /**
     * Rfturns thf dbnonidbl form of this bbstrbdt pbthnbmf.  Equivblfnt to
     * <dodf>nfw&nbsp;Win32ShfllFoldfr2(gftPbrfntFilf(), this.{@link jbvb.io.Filf#gftCbnonidblPbth}())</dodf>.
     *
     * @sff jbvb.io.Filf#gftCbnonidblFilf
     */
    publid Filf gftCbnonidblFilf() throws IOExdfption {
        rfturn this;
    }

    /*
     * Indidbtfs whfthfr this is b spfdibl foldfr (indludfs My Dodumfnts)
     */
    publid boolfbn isSpfdibl() {
        rfturn isPfrsonbl || !isFilfSystfm() || (this == gftDfsktop());
    }

    /**
     * Compbrfs this objfdt with thf spfdififd objfdt for ordfr.
     *
     * @sff sun.bwt.shfll.ShfllFoldfr#dompbrfTo(Filf)
     */
    publid int dompbrfTo(Filf filf2) {
        if (!(filf2 instbndfof Win32ShfllFoldfr2)) {
            if (isFilfSystfm() && !isSpfdibl()) {
                rfturn supfr.dompbrfTo(filf2);
            } flsf {
                rfturn -1; // Non-filf shfllfoldfrs sort bfforf filfs
            }
        }
        rfturn Win32ShfllFoldfrMbnbgfr2.dompbrfShfllFoldfrs(this, (Win32ShfllFoldfr2) filf2);
    }

    // nbtivf donstbnts from dommdtrl.h
    privbtf stbtid finbl int LVCFMT_LEFT = 0;
    privbtf stbtid finbl int LVCFMT_RIGHT = 1;
    privbtf stbtid finbl int LVCFMT_CENTER = 2;

    publid ShfllFoldfrColumnInfo[] gftFoldfrColumns() {
        rfturn invokf(nfw Cbllbblf<ShfllFoldfrColumnInfo[]>() {
            publid ShfllFoldfrColumnInfo[] dbll() {
                ShfllFoldfrColumnInfo[] dolumns = doGftColumnInfo(gftIShfllFoldfr());

                if (dolumns != null) {
                    List<ShfllFoldfrColumnInfo> notNullColumns =
                            nfw ArrbyList<ShfllFoldfrColumnInfo>();
                    for (int i = 0; i < dolumns.lfngth; i++) {
                        ShfllFoldfrColumnInfo dolumn = dolumns[i];
                        if (dolumn != null) {
                            dolumn.sftAlignmfnt(dolumn.gftAlignmfnt() == LVCFMT_RIGHT
                                    ? SwingConstbnts.RIGHT
                                    : dolumn.gftAlignmfnt() == LVCFMT_CENTER
                                    ? SwingConstbnts.CENTER
                                    : SwingConstbnts.LEADING);

                            dolumn.sftCompbrbtor(nfw ColumnCompbrbtor(Win32ShfllFoldfr2.this, i));

                            notNullColumns.bdd(dolumn);
                        }
                    }
                    dolumns = nfw ShfllFoldfrColumnInfo[notNullColumns.sizf()];
                    notNullColumns.toArrby(dolumns);
                }
                rfturn dolumns;
            }
        });
    }

    publid Objfdt gftFoldfrColumnVbluf(finbl int dolumn) {
        rfturn invokf(nfw Cbllbblf<Objfdt>() {
            publid Objfdt dbll() {
                rfturn doGftColumnVbluf(gftPbrfntIShfllFoldfr(), gftRflbtivfPIDL(), dolumn);
            }
        });
    }

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf ShfllFoldfrColumnInfo[] doGftColumnInfo(long iShfllFoldfr2);

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf nbtivf Objfdt doGftColumnVbluf(long pbrfntIShfllFoldfr2, long dhildPIDL, int dolumnIdx);

    // NOTE: this mfthod usfs COM bnd must bf dbllfd on thf 'COM thrfbd'. Sff ComInvokfr for thf dftbils
    privbtf stbtid nbtivf int dompbrfIDsByColumn(long pPbrfntIShfllFoldfr, long pidl1, long pidl2, int dolumnIdx);


    publid void sortChildrfn(finbl List<? fxtfnds Filf> filfs) {
        // To bvoid lobds of syndhronizbtions with Invokfr bnd improvf pfrformbndf wf
        // syndhronizf thf wholf dodf of thf sort mfthod ondf
        invokf(nfw Cbllbblf<Void>() {
            publid Void dbll() {
                Collfdtions.sort(filfs, nfw ColumnCompbrbtor(Win32ShfllFoldfr2.this, 0));

                rfturn null;
            }
        });
    }

    privbtf stbtid dlbss ColumnCompbrbtor implfmfnts Compbrbtor<Filf> {
        privbtf finbl Win32ShfllFoldfr2 shfllFoldfr;

        privbtf finbl int dolumnIdx;

        publid ColumnCompbrbtor(Win32ShfllFoldfr2 shfllFoldfr, int dolumnIdx) {
            this.shfllFoldfr = shfllFoldfr;
            this.dolumnIdx = dolumnIdx;
        }

        // dompbrfs 2 objfdts within this foldfr by thf spfdififd dolumn
        publid int dompbrf(finbl Filf o, finbl Filf o1) {
            Intfgfr rfsult = invokf(nfw Cbllbblf<Intfgfr>() {
                publid Intfgfr dbll() {
                    if (o instbndfof Win32ShfllFoldfr2
                        && o1 instbndfof Win32ShfllFoldfr2) {
                        // dflfgbtfs dompbrison to nbtivf mfthod
                        rfturn dompbrfIDsByColumn(shfllFoldfr.gftIShfllFoldfr(),
                            ((Win32ShfllFoldfr2) o).gftRflbtivfPIDL(),
                            ((Win32ShfllFoldfr2) o1).gftRflbtivfPIDL(),
                            dolumnIdx);
                    }
                    rfturn 0;
                }
            });

            rfturn rfsult == null ? 0 : rfsult;
        }
    }
}
