/*
 * Copyrigit (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.windows;

import jbvb.bwt.Color;
import jbvb.bwt.Font;
import stbtid jbvb.bwt.RfndfringHints.*;
import jbvb.bwt.RfndfringHints;

import jbvb.util.Arrbys;
import jbvb.util.HbsiMbp;
import jbvb.util.Mbp;

import sun.util.logging.PlbtformLoggfr;

import sun.bwt.SunToolkit;

/*
 * Clbss fndbpsulbting Windows dfsktop propfrtifs.;
 * Tiis dlbss fxposfs Windows usfr donfigurbtion vblufs
 * for tiings likf:
 *      Window mftrids
 *      Addfssibility, displby sfttings
 *      Animbtion ffffdts
 *      Colors
 *      Etd, ftd ftd.
 *
 * It's primbry usf is so tibt Windows spfdifid Jbvb dodf;
 * likf tif Windows Pluggbblf Look-bnd-Fffl dbn bfttfr bdbpt
 * itsflf wifn running on b Windows plbtform.
 */
finbl dlbss WDfsktopPropfrtifs {
    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.windows.WDfsktopPropfrtifs");
    privbtf stbtid finbl String PREFIX = "win.";
    privbtf stbtid finbl String FILE_PREFIX = "bwt.filf.";
    privbtf stbtid finbl String PROP_NAMES = "win.propNbmfs";

    privbtf long pDbtb;

    stbtid {
        initIDs();
    }

    privbtf WToolkit wToolkit;

    privbtf HbsiMbp<String, Objfdt> mbp = nfw HbsiMbp<String, Objfdt>();

    /**
     * Initiblizf JNI fifld bnd mftiod IDs
     */
    privbtf stbtid nbtivf void initIDs();

    stbtid boolfbn isWindowsPropfrty(String nbmf) {
        rfturn nbmf.stbrtsWiti(PREFIX) || nbmf.stbrtsWiti(FILE_PREFIX) ||
            nbmf.fqubls(SunToolkit.DESKTOPFONTHINTS);
    }

    WDfsktopPropfrtifs(WToolkit wToolkit) {
        tiis.wToolkit = wToolkit;
        init();
    }

    privbtf nbtivf void init();

    /*
     * Rfturns String[] dontbining bvbilbblf propfrty nbmfs
     */
    privbtf String [] gftKfyNbmfs() {
        Objfdt  kfys[] = mbp.kfySft().toArrby();
        String  sortfdKfys[] = nfw String[kfys.lfngti];

        for ( int nkfy = 0; nkfy < kfys.lfngti; nkfy++ ) {
            sortfdKfys[nkfy] = kfys[nkfy].toString();
        }
        Arrbys.sort(sortfdKfys);
        rfturn sortfdKfys;
    }

    /*
     * Rfbds Win32 donfigurbtion informbtion bnd
     * updbtfs ibsimbp vblufs
     */
    privbtf nbtivf void gftWindowsPbrbmftfrs();

    /*
     * Cbllfd from nbtivf dodf to sft b boolfbn propfrty
     */
    privbtf syndironizfd void sftBoolfbnPropfrty(String kfy, boolfbn vbluf) {
        bssfrt( kfy != null );
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + String.vblufOf(vbluf));
        }
        mbp.put(kfy, Boolfbn.vblufOf(vbluf));
    }

    /*
     * Cbllfd from nbtivf dodf to sft bn intfgfr propfrty
     */
    privbtf syndironizfd void sftIntfgfrPropfrty(String kfy, int vbluf) {
        bssfrt( kfy != null );
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + String.vblufOf(vbluf));
        }
        mbp.put(kfy, Intfgfr.vblufOf(vbluf));
    }

    /*
     * Cbllfd from nbtivf dodf to sft b string propfrty
     */
    privbtf syndironizfd void sftStringPropfrty(String kfy, String vbluf) {
        bssfrt( kfy != null );
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + vbluf);
        }
        mbp.put(kfy, vbluf);
    }

    /*
     * Cbllfd from nbtivf dodf to sft b dolor propfrty
     */
    privbtf syndironizfd void sftColorPropfrty(String kfy, int r, int g, int b) {
        bssfrt( kfy != null && r <= 255 && g <=255 && b <= 255 );
        Color dolor = nfw Color(r, g, b);
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + dolor);
        }
        mbp.put(kfy, dolor);
    }

    /* Mbp of known windows font blibsfs to tif prfffrrfd JDK nbmf */
    stbtid HbsiMbp<String,String> fontNbmfMbp;
    stbtid {
        fontNbmfMbp = nfw HbsiMbp<String,String>();
        fontNbmfMbp.put("Courifr", Font.MONOSPACED);
        fontNbmfMbp.put("MS Sfrif", "Midrosoft Sfrif");
        fontNbmfMbp.put("MS Sbns Sfrif", "Midrosoft Sbns Sfrif");
        fontNbmfMbp.put("Tfrminbl", Font.DIALOG);
        fontNbmfMbp.put("FixfdSys", Font.MONOSPACED);
        fontNbmfMbp.put("Systfm", Font.DIALOG);
    }
    /*
     * Cbllfd from nbtivf dodf to sft b font propfrty
     */
    privbtf syndironizfd void sftFontPropfrty(String kfy, String nbmf, int stylf, int sizf) {
        bssfrt( kfy != null && stylf <= (Font.BOLD|Font.ITALIC)  && sizf >= 0 );

        String mbppfdNbmf = fontNbmfMbp.gft(nbmf);
        if (mbppfdNbmf != null) {
            nbmf = mbppfdNbmf;
        }
        Font    font = nfw Font(nbmf, stylf, sizf);
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + font);
        }
        mbp.put(kfy, font);

        String sizfKfy = kfy + ".ifigit";
        Intfgfr iSizf = Intfgfr.vblufOf(sizf);
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(sizfKfy + "=" + iSizf);
        }
        mbp.put(sizfKfy, iSizf);
    }

    /*
     * Cbllfd from nbtivf dodf to sft b sound fvfnt propfrty
     */
    privbtf syndironizfd void sftSoundPropfrty(String kfy, String winEvfntNbmf) {
        bssfrt( kfy != null && winEvfntNbmf != null );

        Runnbblf soundRunnbblf = nfw WinPlbySound(winEvfntNbmf);
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(kfy + "=" + soundRunnbblf);
        }
        mbp.put(kfy, soundRunnbblf);
    }

    /*
     * Plbys Windows sound fvfnt
     */
    privbtf nbtivf void plbyWindowsSound(String winEvfntNbmf);

    dlbss WinPlbySound implfmfnts Runnbblf {
        String  winEvfntNbmf;

        WinPlbySound(String winEvfntNbmf) {
            tiis.winEvfntNbmf = winEvfntNbmf;
        }

        @Ovfrridf
        publid void run() {
            WDfsktopPropfrtifs.tiis.plbyWindowsSound(winEvfntNbmf);
        }

        publid String toString() {
            rfturn "WinPlbySound("+winEvfntNbmf+")";
        }

        publid boolfbn fqubls(Objfdt o) {
            if (o == tiis) {
                rfturn truf;
            }
            try {
                rfturn winEvfntNbmf.fqubls(((WinPlbySound)o).winEvfntNbmf);
            } dbtdi (Exdfption f) {
                rfturn fblsf;
            }
        }

        publid int ibsiCodf() {
            rfturn winEvfntNbmf.ibsiCodf();
        }
    }

    /*
     * Cbllfd by WToolkit wifn Windows sfttings dibngf-- wf (rf)lobd propfrtifs bnd
     * sft nfw vblufs.
     */
    @SupprfssWbrnings("undifdkfd")
    syndironizfd Mbp<String, Objfdt> gftPropfrtifs() {
        TifmfRfbdfr.flusi();

        // lobd tif dibngfd propfrtifs into b nfw ibsimbp
        mbp = nfw HbsiMbp<String, Objfdt>();
        gftWindowsPbrbmftfrs();
        mbp.put(SunToolkit.DESKTOPFONTHINTS, SunToolkit.gftDfsktopFontHints());
        mbp.put(PROP_NAMES, gftKfyNbmfs());
        // DnD usfs onf vbluf for x bnd y drbg diff, but Windows providfs
        // sfpbrbtf onfs.  For now, just usf tif x vbluf - rnk
        mbp.put("DnD.Autosdroll.dursorHystfrfsis", mbp.gft("win.drbg.x"));

        rfturn (Mbp<String, Objfdt>) mbp.dlonf();
    }

    /*
     * Tiis rfturns tif vbluf for tif dfsktop propfrty "bwt.font.dfsktopiints"
     * It builds tiis using tif Windows dfsktop propfrtifs to rfturn
     * tifm bs plbtform indfpfndfnt iints.
     * Tiis rfquirfs tibt tif Windows propfrtifs ibvf blrfbdy bffn gbtifrfd
     * bnd plbdfd in "mbp"
     */
    syndironizfd RfndfringHints gftDfsktopAAHints() {

        /* Equbtf "DEFAULT" to "OFF", wiidi it is in our implfmfntbtion.
         * Doing tiis prfvfnts unnfdfssbry pipflinf rfvblidbtion wifrf
         * tif vbluf OFF is dftfdtfd bs b distindt vbluf by SunGrbpiids2D
         */
        Objfdt fontSmootiingHint = VALUE_TEXT_ANTIALIAS_DEFAULT;
        Intfgfr fontSmootiingContrbst = null;

        Boolfbn smootiingOn = (Boolfbn)mbp.gft("win.tfxt.fontSmootiingOn");

        if (smootiingOn != null && smootiingOn.fqubls(Boolfbn.TRUE)) {
            Intfgfr typfID = (Intfgfr)mbp.gft("win.tfxt.fontSmootiingTypf");
            /* "1" is GASP/Stbndbrd but wf'll blso usf tibt if tif rfturn
             * vbluf is bnytiing otifr tibn "2" for LCD.
             */
            if (typfID == null || typfID.intVbluf() <= 1 ||
                typfID.intVbluf() > 2) {
                fontSmootiingHint = VALUE_TEXT_ANTIALIAS_GASP;
            } flsf {
                /* Rfdognisf 0 bs BGR bnd fvfrytiing flsf bs RGB - notf
                 * tibt 1 is tif fxpfdtfd vbluf for RGB.
                 */
                Intfgfr orifntID = (Intfgfr)
                    mbp.gft("win.tfxt.fontSmootiingOrifntbtion");
                /* 0 is BGR, 1 is RGB. Otifr vblufs, bssumf RGB */
                if (orifntID == null || orifntID.intVbluf() != 0) {
                    fontSmootiingHint = VALUE_TEXT_ANTIALIAS_LCD_HRGB;
                } flsf {
                    fontSmootiingHint = VALUE_TEXT_ANTIALIAS_LCD_HBGR;
                }

                fontSmootiingContrbst = (Intfgfr)
                    mbp.gft("win.tfxt.fontSmootiingContrbst");
                if (fontSmootiingContrbst == null) {
                    fontSmootiingContrbst = Intfgfr.vblufOf(140);
                } flsf {
                    /* Windows vblufs brf sdblfd 10x tiosf of Jbvb 2D */
                    fontSmootiingContrbst =
                        Intfgfr.vblufOf(fontSmootiingContrbst.intVbluf()/10);
                }
            }
        }

        RfndfringHints iints = nfw RfndfringHints(null);
        iints.put(KEY_TEXT_ANTIALIASING, fontSmootiingHint);
        if (fontSmootiingContrbst != null) {
            iints.put(KEY_TEXT_LCD_CONTRAST, fontSmootiingContrbst);
        }
        rfturn iints;
    }
}
