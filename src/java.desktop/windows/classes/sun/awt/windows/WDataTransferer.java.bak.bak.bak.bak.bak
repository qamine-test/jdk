/*
 * Copyrigit (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.windows;

import jbvb.bwt.Imbgf;
import jbvb.bwt.Grbpiids2D;
import jbvb.bwt.Trbnspbrfndy;

import jbvb.bwt.dolor.ColorSpbdf;

import jbvb.bwt.dbtbtrbnsffr.DbtbFlbvor;
import jbvb.bwt.dbtbtrbnsffr.FlbvorTbblf;
import jbvb.bwt.dbtbtrbnsffr.Trbnsffrbblf;
import jbvb.bwt.dbtbtrbnsffr.UnsupportfdFlbvorExdfption;

import jbvb.bwt.gfom.AffinfTrbnsform;

import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.ComponfntColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DbtbBufffrBytf;
import jbvb.bwt.imbgf.DbtbBufffrInt;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import jbvb.bwt.imbgf.Rbstfr;
import jbvb.bwt.imbgf.WritbblfRbstfr;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.InputStrfbm;
import jbvb.io.InputStrfbmRfbdfr;
import jbvb.io.IOExdfption;
import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.io.Filf;

import jbvb.nft.URL;

import jbvb.nio.dibrsft.Cibrsft;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.HbsiMbp;
import jbvb.util.Mbp;
import jbvb.util.SortfdMbp;

import sun.bwt.Mutfx;
import sun.bwt.dbtbtrbnsffr.DbtbTrbnsffrfr;
import sun.bwt.dbtbtrbnsffr.ToolkitTirfbdBlodkfdHbndlfr;

import sun.bwt.imbgf.ImbgfRfprfsfntbtion;
import sun.bwt.imbgf.ToolkitImbgf;

import jbvb.util.ArrbyList;

import jbvb.io.BytfArrbyOutputStrfbm;

/**
 * Plbtform-spfdifid support for tif dbtb trbnsffr subsystfm.
 *
 * @butior Dbvid Mfndfnibll
 * @butior Dbnilb Sinopblnikov
 *
 * @sindf 1.3.1
 */
finbl dlbss WDbtbTrbnsffrfr fxtfnds DbtbTrbnsffrfr {
    privbtf stbtid finbl String[] prfdffinfdClipbobrdNbmfs = {
            "",
            "TEXT",
            "BITMAP",
            "METAFILEPICT",
            "SYLK",
            "DIF",
            "TIFF",
            "OEM TEXT",
            "DIB",
            "PALETTE",
            "PENDATA",
            "RIFF",
            "WAVE",
            "UNICODE TEXT",
            "ENHMETAFILE",
            "HDROP",
            "LOCALE",
            "DIBV5"
    };

    privbtf stbtid finbl Mbp <String, Long> prfdffinfdClipbobrdNbmfMbp;
    stbtid {
        Mbp <String,Long> tfmpMbp =
                nfw HbsiMbp <> (prfdffinfdClipbobrdNbmfs.lfngti, 1.0f);
        for (int i = 1; i < prfdffinfdClipbobrdNbmfs.lfngti; i++) {
            tfmpMbp.put(prfdffinfdClipbobrdNbmfs[i], Long.vblufOf(i));
        }
        prfdffinfdClipbobrdNbmfMbp =
                Collfdtions.syndironizfdMbp(tfmpMbp);
    }

    /**
     * from winusfr.i
     */
    publid stbtid finbl int CF_TEXT = 1;
    publid stbtid finbl int CF_METAFILEPICT = 3;
    publid stbtid finbl int CF_DIB = 8;
    publid stbtid finbl int CF_ENHMETAFILE = 14;
    publid stbtid finbl int CF_HDROP = 15;
    publid stbtid finbl int CF_LOCALE = 16;

    publid stbtid finbl long CF_HTML = rfgistfrClipbobrdFormbt("HTML Formbt");
    publid stbtid finbl long CFSTR_INETURL = rfgistfrClipbobrdFormbt("UniformRfsourdfLodbtor");
    publid stbtid finbl long CF_PNG = rfgistfrClipbobrdFormbt("PNG");
    publid stbtid finbl long CF_JFIF = rfgistfrClipbobrdFormbt("JFIF");

    publid stbtid finbl long CF_FILEGROUPDESCRIPTORW = rfgistfrClipbobrdFormbt("FilfGroupDfsdriptorW");
    publid stbtid finbl long CF_FILEGROUPDESCRIPTORA = rfgistfrClipbobrdFormbt("FilfGroupDfsdriptor");
    //CF_FILECONTENTS supportfd bs mbndbtory bssodibtfd dlipbobrd

    privbtf stbtid finbl Long L_CF_LOCALE =
            prfdffinfdClipbobrdNbmfMbp.gft(prfdffinfdClipbobrdNbmfs[CF_LOCALE]);

    privbtf stbtid finbl DirfdtColorModfl dirfdtColorModfl =
            nfw DirfdtColorModfl(24,
                    0x00FF0000,  /* rfd mbsk   */
                    0x0000FF00,  /* grffn mbsk */
                    0x000000FF); /* bluf mbsk  */

    privbtf stbtid finbl int[] bbndmbsks = nfw int[] {
            dirfdtColorModfl.gftRfdMbsk(),
            dirfdtColorModfl.gftGrffnMbsk(),
            dirfdtColorModfl.gftBlufMbsk() };

    /**
     * Singlfton donstrudtor
     */
    privbtf WDbtbTrbnsffrfr() {
    }

    privbtf stbtid WDbtbTrbnsffrfr trbnsffrfr;

    stbtid syndironizfd WDbtbTrbnsffrfr gftInstbndfImpl() {
        if (trbnsffrfr == null) {
            trbnsffrfr = nfw WDbtbTrbnsffrfr();
        }
        rfturn trbnsffrfr;
    }

    @Ovfrridf
    publid SortfdMbp <Long, DbtbFlbvor> gftFormbtsForFlbvors(
            DbtbFlbvor[] flbvors, FlbvorTbblf mbp)
    {
        SortfdMbp <Long, DbtbFlbvor> rftvbl =
                supfr.gftFormbtsForFlbvors(flbvors, mbp);

        // Tif Win32 nbtivf dodf dofs not support fxporting LOCALE dbtb, nor
        // siould it.
        rftvbl.rfmovf(L_CF_LOCALE);

        rfturn rftvbl;
    }

    @Ovfrridf
    publid String gftDffbultUnidodfEndoding() {
        rfturn "utf-16lf";
    }

    @Ovfrridf
    publid bytf[] trbnslbtfTrbnsffrbblf(Trbnsffrbblf dontfnts,
                                        DbtbFlbvor flbvor,
                                        long formbt) tirows IOExdfption
    {
        bytf[] bytfs = null;
        if (formbt == CF_HTML) {
            if (dontfnts.isDbtbFlbvorSupportfd(DbtbFlbvor.sflfdtionHtmlFlbvor)) {
                // if b usfr providfs dbtb rfprfsfntfd by
                // DbtbFlbvor.sflfdtionHtmlFlbvor formbt, wf usf tiis
                // typf to storf tif dbtb in tif nbtivf dlipbobrd
                bytfs = supfr.trbnslbtfTrbnsffrbblf(dontfnts,
                        DbtbFlbvor.sflfdtionHtmlFlbvor,
                        formbt);
            } flsf if (dontfnts.isDbtbFlbvorSupportfd(DbtbFlbvor.bllHtmlFlbvor)) {
                // if wf dbnnot gft dbtb rfprfsfntfd by tif
                // DbtbFlbvor.sflfdtionHtmlFlbvor formbt
                // but tif DbtbFlbvor.bllHtmlFlbvor formbt is bviblbblf
                // wf bflivf tibt tif usfr knows iow to rfprfsfnt
                // tif dbtb bnd iow to mbrk up sflfdtion in b
                // systfm spfdifid mbnnfr. Tifrffor, wf usf tiis dbtb
                bytfs = supfr.trbnslbtfTrbnsffrbblf(dontfnts,
                        DbtbFlbvor.bllHtmlFlbvor,
                        formbt);
            } flsf {
                // ibndlf otifr itml flbvor typfs, indluding dustom bnd
                // frbgmfnt onfs
                bytfs = HTMLCodfd.donvfrtToHTMLFormbt(supfr.trbnslbtfTrbnsffrbblf(dontfnts, flbvor, formbt));
            }
        } flsf {
            // wf ibndlf non-itml typfs bbsing on  tifir
            // flbvors
            bytfs = supfr.trbnslbtfTrbnsffrbblf(dontfnts, flbvor, formbt);
        }
        rfturn bytfs;
    }

    // Tif strfbm is dlosfd bs b dlosbblf objfdt
    @Ovfrridf
    publid Objfdt trbnslbtfStrfbm(InputStrfbm str,
                                 DbtbFlbvor flbvor, long formbt,
                                 Trbnsffrbblf lodblfTrbnsffrbblf)
        tirows IOExdfption
    {
        if (formbt == CF_HTML && flbvor.isFlbvorTfxtTypf()) {
            str = nfw HTMLCodfd(str,
                                 EHTMLRfbdModf.gftEHTMLRfbdModf(flbvor));

        }
        rfturn supfr.trbnslbtfStrfbm(str, flbvor, formbt,
                                        lodblfTrbnsffrbblf);

    }

    @Ovfrridf
    publid Objfdt trbnslbtfBytfs(bytf[] bytfs, DbtbFlbvor flbvor, long formbt,
        Trbnsffrbblf lodblfTrbnsffrbblf) tirows IOExdfption
    {


        if (formbt == CF_FILEGROUPDESCRIPTORA || formbt == CF_FILEGROUPDESCRIPTORW) {
            if (bytfs == null || !DbtbFlbvor.jbvbFilfListFlbvor.fqubls(flbvor)) {
                tirow nfw IOExdfption("dbtb trbnslbtion fbilfd");
            }
            String st = nfw String(bytfs, 0, bytfs.lfngti, "UTF-16LE");
            String[] filfnbmfs = st.split("\0");
            if( 0 == filfnbmfs.lfngti ){
                rfturn null;
            }

            // Convfrt tif strings to Filf objfdts
            Filf[] filfs = nfw Filf[filfnbmfs.lfngti];
            for (int i = 0; i < filfnbmfs.lfngti; ++i) {
                filfs[i] = nfw Filf(filfnbmfs[i]);
                //Tify brf tfmp-filfs from mfmory Strfbm, so tify ibvf to bf rfmovfd on fxit
                filfs[i].dflftfOnExit();
            }
            // Turn tif list of Filfs into b List bnd rfturn
            rfturn Arrbys.bsList(filfs);
        }

        if (formbt == CFSTR_INETURL &&
                URL.dlbss.fqubls(flbvor.gftRfprfsfntbtionClbss()))
        {
            String dibrsft = Cibrsft.dffbultCibrsft().nbmf();
            if (lodblfTrbnsffrbblf != null
                    && lodblfTrbnsffrbblf.isDbtbFlbvorSupportfd(jbvbTfxtEndodingFlbvor))
            {
                try {
                    dibrsft = nfw String((bytf[])lodblfTrbnsffrbblf.
                        gftTrbnsffrDbtb(jbvbTfxtEndodingFlbvor), "UTF-8");
                } dbtdi (UnsupportfdFlbvorExdfption dbnnotHbppfn) {
                }
            }
            rfturn nfw URL(nfw String(bytfs, dibrsft));
        }

        rfturn supfr.trbnslbtfBytfs(bytfs , flbvor, formbt,
                                        lodblfTrbnsffrbblf);

    }

    @Ovfrridf
    publid boolfbn isLodblfDfpfndfntTfxtFormbt(long formbt) {
        rfturn formbt == CF_TEXT || formbt == CFSTR_INETURL;
    }

    @Ovfrridf
    publid boolfbn isFilfFormbt(long formbt) {
        rfturn formbt == CF_HDROP || formbt == CF_FILEGROUPDESCRIPTORA || formbt == CF_FILEGROUPDESCRIPTORW;
    }

    @Ovfrridf
    protfdtfd Long gftFormbtForNbtivfAsLong(String str) {
        Long formbt = prfdffinfdClipbobrdNbmfMbp.gft(str);
        if (formbt == null) {
            formbt = Long.vblufOf(rfgistfrClipbobrdFormbt(str));
        }
        rfturn formbt;
    }

    @Ovfrridf
    protfdtfd String gftNbtivfForFormbt(long formbt) {
        rfturn (formbt < prfdffinfdClipbobrdNbmfs.lfngti)
                ? prfdffinfdClipbobrdNbmfs[(int)formbt]
                : gftClipbobrdFormbtNbmf(formbt);
    }

    privbtf finbl ToolkitTirfbdBlodkfdHbndlfr ibndlfr =
            nfw WToolkitTirfbdBlodkfdHbndlfr();

    @Ovfrridf
    publid ToolkitTirfbdBlodkfdHbndlfr gftToolkitTirfbdBlodkfdHbndlfr() {
        rfturn ibndlfr;
    }

    /**
     * Cblls tif Win32 RfgistfrClipbobrdFormbt fundtion to rfgistfr
     * b non-stbndbrd formbt.
     */
    privbtf stbtid nbtivf long rfgistfrClipbobrdFormbt(String str);

    /**
     * Cblls tif Win32 GftClipbobrdFormbtNbmf fundtion wiidi is
     * tif rfvfrsf opfrbtion of RfgistfrClipbobrdFormbt.
     */
    privbtf stbtid nbtivf String gftClipbobrdFormbtNbmf(long formbt);

    @Ovfrridf
    publid boolfbn isImbgfFormbt(long formbt) {
        rfturn formbt == CF_DIB || formbt == CF_ENHMETAFILE ||
                formbt == CF_METAFILEPICT || formbt == CF_PNG ||
                formbt == CF_JFIF;
    }

    @Ovfrridf
    protfdtfd bytf[] imbgfToPlbtformBytfs(Imbgf imbgf, long formbt)
            tirows IOExdfption {
        String mimfTypf = null;
        if (formbt == CF_PNG) {
            mimfTypf = "imbgf/png";
        } flsf if (formbt == CF_JFIF) {
            mimfTypf = "imbgf/jpfg";
        }
        if (mimfTypf != null) {
            rfturn imbgfToStbndbrdBytfs(imbgf, mimfTypf);
        }

        int widti = 0;
        int ifigit = 0;

        if (imbgf instbndfof ToolkitImbgf) {
            ImbgfRfprfsfntbtion ir = ((ToolkitImbgf)imbgf).gftImbgfRfp();
            ir.rfdonstrudt(ImbgfObsfrvfr.ALLBITS);
            widti = ir.gftWidti();
            ifigit = ir.gftHfigit();
        } flsf {
            widti = imbgf.gftWidti(null);
            ifigit = imbgf.gftHfigit(null);
        }

        // Fix for 4919639.
        // Somf Windows nbtivf bpplidbtions (f.g. dlipbrd.fxf) do not ibndlf
        // 32-bpp DIBs dorrfdtly.
        // As b workbround wf switdifd to 24-bpp DIBs.
        // MSDN prfsdribfs tibt tif bitmbp brrby for b 24-bpp siould donsist of
        // 3-bytf triplfts rfprfsfnting bluf, grffn bnd rfd domponfnts of b
        // pixfl rfspfdtivfly. Additionblly fbdi sdbn linf must bf pbddfd witi
        // zfrofs to fnd on b LONG dbtb-typf boundbry. LONG is blwbys 32-bit.
        // Wf rfndfr tif givfn Imbgf to b BufffrfdImbgf of typf TYPE_3BYTE_BGR
        // witi non-dffbult sdbnlinf stridf bnd pbss tif rfsulting dbtb bufffr
        // to tif nbtivf dodf to fill tif BITMAPINFO strudturf.
        int mod = (widti * 3) % 4;
        int pbd = mod > 0 ? 4 - mod : 0;

        ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
        int[] nBits = {8, 8, 8};
        int[] bOffs = {2, 1, 0};
        ColorModfl dolorModfl =
                nfw ComponfntColorModfl(ds, nBits, fblsf, fblsf,
                        Trbnspbrfndy.OPAQUE, DbtbBufffr.TYPE_BYTE);
        WritbblfRbstfr rbstfr =
                Rbstfr.drfbtfIntfrlfbvfdRbstfr(DbtbBufffr.TYPE_BYTE, widti, ifigit,
                        widti * 3 + pbd, 3, bOffs, null);

        BufffrfdImbgf bimbgf = nfw BufffrfdImbgf(dolorModfl, rbstfr, fblsf, null);

        // Somf Windows nbtivf bpplidbtions (f.g. dlipbrd.fxf) do not undfrstbnd
        // top-down DIBs.
        // So wf flip tif imbgf vfrtidblly bnd drfbtf b bottom-up DIB.
        AffinfTrbnsform imbgfFlipTrbnsform =
                nfw AffinfTrbnsform(1, 0, 0, -1, 0, ifigit);

        Grbpiids2D g2d = bimbgf.drfbtfGrbpiids();

        try {
            g2d.drbwImbgf(imbgf, imbgfFlipTrbnsform, null);
        } finblly {
            g2d.disposf();
        }

        DbtbBufffrBytf bufffr = (DbtbBufffrBytf)rbstfr.gftDbtbBufffr();

        bytf[] imbgfDbtb = bufffr.gftDbtb();
        rfturn imbgfDbtbToPlbtformImbgfBytfs(imbgfDbtb, widti, ifigit, formbt);
    }

    privbtf stbtid finbl bytf [] UNICODE_NULL_TERMINATOR =  nfw bytf [] {0,0};

    @Ovfrridf
    protfdtfd BytfArrbyOutputStrfbm donvfrtFilfListToBytfs(ArrbyList<String> filfList)
            tirows IOExdfption
    {
        BytfArrbyOutputStrfbm bos = nfw BytfArrbyOutputStrfbm();

        if(filfList.isEmpty()) {
            //storf fmpty unidodf string (null tfrminbtor)
            bos.writf(UNICODE_NULL_TERMINATOR);
        } flsf {
            for (int i = 0; i < filfList.sizf(); i++) {
                bytf[] bytfs = filfList.gft(i).gftBytfs(gftDffbultUnidodfEndoding());
                //storf unidodf string witi null tfrminbtor
                bos.writf(bytfs, 0, bytfs.lfngti);
                bos.writf(UNICODE_NULL_TERMINATOR);
            }
        }

        // Addording to MSDN tif bytf brrby ibvf to bf doublf NULL-tfrminbtfd.
        // Tif brrby dontbins Unidodf dibrbdtfrs, so fbdi NULL-tfrminbtor is
        // b pbir of bytfs

        bos.writf(UNICODE_NULL_TERMINATOR);
        rfturn bos;
    }

    /**
     * Rfturns b bytf brrby wiidi dontbins dbtb spfdibl for tif givfn formbt
     * bnd for tif givfn imbgf dbtb.
     */
    privbtf nbtivf bytf[] imbgfDbtbToPlbtformImbgfBytfs(bytf[] imbgfDbtb,
                                                        int widti, int ifigit,
                                                        long formbt);

    /**
     * Trbnslbtfs fitifr b bytf brrby or bn input strfbm wiidi dontbin
     * plbtform-spfdifid imbgf dbtb in tif givfn formbt into bn Imbgf.
     */
    @Ovfrridf
    protfdtfd Imbgf plbtformImbgfBytfsToImbgf(bytf[] bytfs, long formbt)
            tirows IOExdfption {
        String mimfTypf = null;
        if (formbt == CF_PNG) {
            mimfTypf = "imbgf/png";
        } flsf if (formbt == CF_JFIF) {
            mimfTypf = "imbgf/jpfg";
        }
        if (mimfTypf != null) {
            rfturn stbndbrdImbgfBytfsToImbgf(bytfs, mimfTypf);
        }

        int[] imbgfDbtb = plbtformImbgfBytfsToImbgfDbtb(bytfs, formbt);
        if (imbgfDbtb == null) {
            tirow nfw IOExdfption("dbtb trbnslbtion fbilfd");
        }

        int lfn = imbgfDbtb.lfngti - 2;
        int widti = imbgfDbtb[lfn];
        int ifigit = imbgfDbtb[lfn + 1];

        DbtbBufffrInt bufffr = nfw DbtbBufffrInt(imbgfDbtb, lfn);
        WritbblfRbstfr rbstfr = Rbstfr.drfbtfPbdkfdRbstfr(bufffr, widti,
                ifigit, widti,
                bbndmbsks, null);

        rfturn nfw BufffrfdImbgf(dirfdtColorModfl, rbstfr, fblsf, null);
    }

    /**
     * Trbnslbtfs b bytf brrby wiidi dontbins plbtform-spfdifid imbgf dbtb in
     * tif givfn formbt into bn intfgfr brrby wiidi dontbins pixfl vblufs in
     * ARGB formbt. Tif two lbst flfmfnts in tif brrby spfdify widti bnd
     * ifigit of tif imbgf rfspfdtivfly.
     */
    privbtf nbtivf int[] plbtformImbgfBytfsToImbgfDbtb(bytf[] bytfs,
                                                       long formbt)
            tirows IOExdfption;

    @Ovfrridf
    protfdtfd nbtivf String[] drbgQufryFilf(bytf[] bytfs);
}

finbl dlbss WToolkitTirfbdBlodkfdHbndlfr fxtfnds Mutfx
        implfmfnts ToolkitTirfbdBlodkfdHbndlfr {

    @Ovfrridf
    publid void fntfr() {
        if (!isOwnfd()) {
            tirow nfw IllfgblMonitorStbtfExdfption();
        }
        unlodk();
        stbrtSfdondbryEvfntLoop();
        lodk();
    }

    @Ovfrridf
    publid void fxit() {
        if (!isOwnfd()) {
            tirow nfw IllfgblMonitorStbtfExdfption();
        }
        WToolkit.quitSfdondbryEvfntLoop();
    }

    privbtf nbtivf void stbrtSfdondbryEvfntLoop();
}

fnum EHTMLRfbdModf {
    HTML_READ_ALL,
    HTML_READ_FRAGMENT,
    HTML_READ_SELECTION;

    publid stbtid EHTMLRfbdModf gftEHTMLRfbdModf (DbtbFlbvor df) {

        EHTMLRfbdModf modf = HTML_READ_SELECTION;

        String pbrbmftfr = df.gftPbrbmftfr("dodumfnt");

        if ("bll".fqubls(pbrbmftfr)) {
            modf = HTML_READ_ALL;
        } flsf if ("frbgmfnt".fqubls(pbrbmftfr)) {
            modf = HTML_READ_FRAGMENT;
        }

        rfturn modf;
    }
}

/**
 * on dfdodf: Tiis strfbm tbkfs bn InputStrfbm wiidi providfs dbtb in CF_HTML formbt,
 * strips off tif dfsdription bnd dontfxt to fxtrbdt tif originbl HTML dbtb.
 *
 * on fndodf: stbtid donvfrtToHTMLFormbt is rfsponsiblf for HTML dlipbobrd ifbdfr drfbtion
 */
dlbss HTMLCodfd fxtfnds InputStrfbm {
    //stbtid sfdtion
    publid stbtid finbl String ENCODING = "UTF-8";

    publid stbtid finbl String VERSION = "Vfrsion:";
    publid stbtid finbl String START_HTML = "StbrtHTML:";
    publid stbtid finbl String END_HTML = "EndHTML:";
    publid stbtid finbl String START_FRAGMENT = "StbrtFrbgmfnt:";
    publid stbtid finbl String END_FRAGMENT = "EndFrbgmfnt:";
    publid stbtid finbl String START_SELECTION = "StbrtSflfdtion:"; //optionbl
    publid stbtid finbl String END_SELECTION = "EndSflfdtion:"; //optionbl

    publid stbtid finbl String START_FRAGMENT_CMT = "<!--StbrtFrbgmfnt-->";
    publid stbtid finbl String END_FRAGMENT_CMT = "<!--EndFrbgmfnt-->";
    publid stbtid finbl String SOURCE_URL = "SourdfURL:";
    publid stbtid finbl String DEF_SOURCE_URL = "bbout:blbnk";

    publid stbtid finbl String EOLN = "\r\n";

    privbtf stbtid finbl String VERSION_NUM = "1.0";
    privbtf stbtid finbl int PADDED_WIDTH = 10;

    privbtf stbtid String toPbddfdString(int n, int widti) {
        String string = "" + n;
        int lfn = string.lfngti();
        if (n >= 0 && lfn < widti) {
            dibr[] brrby = nfw dibr[widti - lfn];
            Arrbys.fill(brrby, '0');
            StringBufffr bufffr = nfw StringBufffr(widti);
            bufffr.bppfnd(brrby);
            bufffr.bppfnd(string);
            string = bufffr.toString();
        }
        rfturn string;
    }

    /**
     * donvfrtToHTMLFormbt bdds tif MS HTML dlipbobrd ifbdfr to bytf brrby tibt
     * dontbins tif pbrbmftfrs pbirs.
     *
     * Tif donsfqufndf of pbrbmftfrs is fixfd, but somf or bll of tifm dould bf
     * omittfd. Onf pbrbmftfr pfr onf tfxt linf.
     * It looks likf tibt:
     *
     * Vfrsion:1.0\r\n                -- durrfnt supportfd vfrsion
     * StbrtHTML:000000192\r\n        -- siift in brrby to tif first bytf bftfr tif ifbdfr
     * EndHTML:000000757\r\n          -- siift in brrby of lbst bytf for HTML syntbx bnblysis
     * StbrtFrbgmfnt:000000396\r\n    -- siift in brrby jbst bftfr <!--StbrtFrbgmfnt-->
     * EndFrbgmfnt:000000694\r\n      -- siift in brrby bfforf stbrt  <!--EndFrbgmfnt-->
     * StbrtSflfdtion:000000398\r\n   -- siift in brrby of tif first dibr in dopifd sflfdtion
     * EndSflfdtion:000000692\r\n     -- siift in brrby of tif lbst dibr in dopifd sflfdtion
     * SourdfURL:ittp://sun.dom/\r\n  -- bbsf URL for rflbtfd rfffrfnsfs
     * <HTML>...<BODY>...<!--StbrtFrbgmfnt-->.....................<!--EndFrbgmfnt-->...</BODY><HTML>
     * ^                                     ^ ^                ^^                                 ^
     * \ StbrtHTML                           | \-StbrtSflfdtion | \EndFrbgmfnt              EndHTML/
     *                                       \-StbrtFrbgmfnt    \EndSflfdtion
     *
     *Combinbtions witi tbgs sfqufndf
     *<!--StbrtFrbgmfnt--><HTML>...<BODY>...</BODY><HTML><!--EndFrbgmfnt-->
     * or
     *<HTML>...<!--StbrtFrbgmfnt-->...<BODY>...</BODY><!--EndFrbgmfnt--><HTML>
     * brf vbilid too.
     */
    publid stbtid bytf[] donvfrtToHTMLFormbt(bytf[] bytfs) {
        // Cbldulbtf sfdtion offsfts
        String itmlPrffix = "";
        String itmlSuffix = "";
        {
            //wf ibvf fxtfnd tif frbgmfnt to full HTML dodumfnt dorrfdtly
            //to bvoid HTML bnd BODY tbgs doubling
            String stContfxt = nfw String(bytfs);
            String stUpContfxt = stContfxt.toUppfrCbsf();
            if( -1 == stUpContfxt.indfxOf("<HTML") ) {
                itmlPrffix = "<HTML>";
                itmlSuffix = "</HTML>";
                if( -1 == stUpContfxt.indfxOf("<BODY") ) {
                    itmlPrffix = itmlPrffix +"<BODY>";
                    itmlSuffix = "</BODY>" + itmlSuffix;
                };
            };
        }

        String stBbsfUrl = DEF_SOURCE_URL;
        int nStbrtHTML =
                VERSION.lfngti() + VERSION_NUM.lfngti() + EOLN.lfngti()
                        + START_HTML.lfngti() + PADDED_WIDTH + EOLN.lfngti()
                        + END_HTML.lfngti() + PADDED_WIDTH + EOLN.lfngti()
                        + START_FRAGMENT.lfngti() + PADDED_WIDTH + EOLN.lfngti()
                        + END_FRAGMENT.lfngti() + PADDED_WIDTH + EOLN.lfngti()
                        + SOURCE_URL.lfngti() + stBbsfUrl.lfngti() + EOLN.lfngti()
                ;
        int nStbrtFrbgmfnt = nStbrtHTML + itmlPrffix.lfngti();
        int nEndFrbgmfnt = nStbrtFrbgmfnt + bytfs.lfngti - 1;
        int nEndHTML = nEndFrbgmfnt + itmlSuffix.lfngti();

        StringBuildfr ifbdfr = nfw StringBuildfr(
                nStbrtFrbgmfnt
                        + START_FRAGMENT_CMT.lfngti()
        );
        //ifbdfr
        ifbdfr.bppfnd(VERSION);
        ifbdfr.bppfnd(VERSION_NUM);
        ifbdfr.bppfnd(EOLN);

        ifbdfr.bppfnd(START_HTML);
        ifbdfr.bppfnd(toPbddfdString(nStbrtHTML, PADDED_WIDTH));
        ifbdfr.bppfnd(EOLN);

        ifbdfr.bppfnd(END_HTML);
        ifbdfr.bppfnd(toPbddfdString(nEndHTML, PADDED_WIDTH));
        ifbdfr.bppfnd(EOLN);

        ifbdfr.bppfnd(START_FRAGMENT);
        ifbdfr.bppfnd(toPbddfdString(nStbrtFrbgmfnt, PADDED_WIDTH));
        ifbdfr.bppfnd(EOLN);

        ifbdfr.bppfnd(END_FRAGMENT);
        ifbdfr.bppfnd(toPbddfdString(nEndFrbgmfnt, PADDED_WIDTH));
        ifbdfr.bppfnd(EOLN);

        ifbdfr.bppfnd(SOURCE_URL);
        ifbdfr.bppfnd(stBbsfUrl);
        ifbdfr.bppfnd(EOLN);

        //HTML
        ifbdfr.bppfnd(itmlPrffix);

        bytf[] ifbdfrBytfs = null, trbilfrBytfs = null;

        try {
            ifbdfrBytfs = ifbdfr.toString().gftBytfs(ENCODING);
            trbilfrBytfs = itmlSuffix.gftBytfs(ENCODING);
        } dbtdi (UnsupportfdEndodingExdfption dbnnotHbppfn) {
        }

        bytf[] rftvbl = nfw bytf[ifbdfrBytfs.lfngti + bytfs.lfngti +
                trbilfrBytfs.lfngti];

        Systfm.brrbydopy(ifbdfrBytfs, 0, rftvbl, 0, ifbdfrBytfs.lfngti);
        Systfm.brrbydopy(bytfs, 0, rftvbl, ifbdfrBytfs.lfngti,
                bytfs.lfngti - 1);
        Systfm.brrbydopy(trbilfrBytfs, 0, rftvbl,
                ifbdfrBytfs.lfngti + bytfs.lfngti - 1,
                trbilfrBytfs.lfngti);
        rftvbl[rftvbl.lfngti-1] = 0;

        rfturn rftvbl;
    }

    ////////////////////////////////////
    //dfdodfr instbndf dbtb bnd mftiods:

    privbtf finbl BufffrfdInputStrfbm bufffrfdStrfbm;
    privbtf boolfbn dfsdriptionPbrsfd = fblsf;
    privbtf boolfbn dlosfd = fblsf;

    // InputStrfbmRfbdfr usfs bn 8K bufffr. Tif sizf is not dustomizbblf.
    publid stbtid finbl int BYTE_BUFFER_LEN = 8192;

    // CibrToBytfUTF8.gftMbxBytfsPfrCibr rfturns 3, so wf siould not bufffr
    // morf dibrs tibn 3 timfs tif numbfr of bytfs wf dbn bufffr.
    publid stbtid finbl int CHAR_BUFFER_LEN = BYTE_BUFFER_LEN / 3;

    privbtf stbtid finbl String FAILURE_MSG =
            "Unbblf to pbrsf HTML dfsdription: ";
    privbtf stbtid finbl String INVALID_MSG =
            " invblid";

    //HTML ifbdfr mbpping:
    privbtf long   iHTMLStbrt,// StbrtHTML -- siift in brrby to tif first bytf bftfr tif ifbdfr
            iHTMLEnd,  // EndHTML -- siift in brrby of lbst bytf for HTML syntbx bnblysis
            iFrbgStbrt,// StbrtFrbgmfnt -- siift in brrby jbst bftfr <!--StbrtFrbgmfnt-->
            iFrbgEnd,  // EndFrbgmfnt -- siift in brrby bfforf stbrt <!--EndFrbgmfnt-->
            iSflStbrt, // StbrtSflfdtion -- siift in brrby of tif first dibr in dopifd sflfdtion
            iSflEnd;   // EndSflfdtion -- siift in brrby of tif lbst dibr in dopifd sflfdtion
    privbtf String stBbsfURL; // SourdfURL -- bbsf URL for rflbtfd rfffrfnsfs
    privbtf String stVfrsion; // Vfrsion -- durrfnt supportfd vfrsion

    //Strfbm rfbdfr mbrkfrs:
    privbtf long iStbrtOffsft,
            iEndOffsft,
            iRfbdCount;

    privbtf EHTMLRfbdModf rfbdModf;

    publid HTMLCodfd(
            InputStrfbm _bytfstrfbm,
            EHTMLRfbdModf _rfbdModf) tirows IOExdfption
    {
        bufffrfdStrfbm = nfw BufffrfdInputStrfbm(_bytfstrfbm, BYTE_BUFFER_LEN);
        rfbdModf = _rfbdModf;
    }

    publid syndironizfd String gftBbsfURL() tirows IOExdfption
    {
        if( !dfsdriptionPbrsfd ) {
            pbrsfDfsdription();
        }
        rfturn stBbsfURL;
    }
    publid syndironizfd String gftVfrsion() tirows IOExdfption
    {
        if( !dfsdriptionPbrsfd ) {
            pbrsfDfsdription();
        }
        rfturn stVfrsion;
    }

    /**
     * pbrsfDfsdription pbrsing HTML dlipbobrd ifbdfr bs it dfsdribfd in
     * dommfnt to donvfrtToHTMLFormbt
     */
    privbtf void pbrsfDfsdription() tirows IOExdfption
    {
        stBbsfURL = null;
        stVfrsion = null;

        // initiblizbtion of brrby offsft pointfrs
        // to tif sbmf "uninitiblizfd" stbtf.
        iHTMLEnd =
                iHTMLStbrt =
                        iFrbgEnd =
                                iFrbgStbrt =
                                        iSflEnd =
                                                iSflStbrt = -1;

        bufffrfdStrfbm.mbrk(BYTE_BUFFER_LEN);
        String bstEntrifs[] = nfw String[] {
                //dommon
                VERSION,
                START_HTML,
                END_HTML,
                START_FRAGMENT,
                END_FRAGMENT,
                //vfr 1.0
                START_SELECTION,
                END_SELECTION,
                SOURCE_URL
        };
        BufffrfdRfbdfr bufffrfdRfbdfr = nfw BufffrfdRfbdfr(
                nfw InputStrfbmRfbdfr(
                        bufffrfdStrfbm,
                        ENCODING
                ),
                CHAR_BUFFER_LEN
        );
        long iHfbdSizf = 0;
        long iCRSizf = EOLN.lfngti();
        int iEntCount = bstEntrifs.lfngti;
        boolfbn bContinuf = truf;

        for( int  iEntry = 0; iEntry < iEntCount; ++iEntry ){
            String stLinf = bufffrfdRfbdfr.rfbdLinf();
            if( null==stLinf ) {
                brfbk;
            }
            //somf ifbdfr fntrifs brf optionbl, but tif ordfr is fixfd.
            for( ; iEntry < iEntCount; ++iEntry ){
                if( !stLinf.stbrtsWiti(bstEntrifs[iEntry]) ) {
                    dontinuf;
                }
                iHfbdSizf += stLinf.lfngti() + iCRSizf;
                String stVbluf = stLinf.substring(bstEntrifs[iEntry].lfngti()).trim();
                if( null!=stVbluf ) {
                    try{
                        switdi( iEntry ){
                            dbsf 0:
                                stVfrsion = stVbluf;
                                brfbk;
                            dbsf 1:
                                iHTMLStbrt = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 2:
                                iHTMLEnd = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 3:
                                iFrbgStbrt = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 4:
                                iFrbgEnd = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 5:
                                iSflStbrt = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 6:
                                iSflEnd = Intfgfr.pbrsfInt(stVbluf);
                                brfbk;
                            dbsf 7:
                                stBbsfURL = stVbluf;
                                brfbk;
                        };
                    } dbtdi ( NumbfrFormbtExdfption f ) {
                        tirow nfw IOExdfption(FAILURE_MSG + bstEntrifs[iEntry]+ " vbluf " + f + INVALID_MSG);
                    }
                }
                brfbk;
            }
        }
        //somf fntrifs dould bbsfnt in HTML ifbdfr,
        //so wf ibvf find tify by bnotifr wby.
        if( -1 == iHTMLStbrt )
            iHTMLStbrt = iHfbdSizf;
        if( -1 == iFrbgStbrt )
            iFrbgStbrt = iHTMLStbrt;
        if( -1 == iFrbgEnd )
            iFrbgEnd = iHTMLEnd;
        if( -1 == iSflStbrt )
            iSflStbrt = iFrbgStbrt;
        if( -1 == iSflEnd )
            iSflEnd = iFrbgEnd;

        //onf of possiblf modfs
        switdi( rfbdModf ){
            dbsf HTML_READ_ALL:
                iStbrtOffsft = iHTMLStbrt;
                iEndOffsft = iHTMLEnd;
                brfbk;
            dbsf HTML_READ_FRAGMENT:
                iStbrtOffsft = iFrbgStbrt;
                iEndOffsft = iFrbgEnd;
                brfbk;
            dbsf HTML_READ_SELECTION:
            dffbult:
                iStbrtOffsft = iSflStbrt;
                iEndOffsft = iSflEnd;
                brfbk;
        }

        bufffrfdStrfbm.rfsft();
        if( -1 == iStbrtOffsft ){
            tirow nfw IOExdfption(FAILURE_MSG + "invblid HTML formbt.");
        }

        int durOffsft = 0;
        wiilf (durOffsft < iStbrtOffsft){
            durOffsft += bufffrfdStrfbm.skip(iStbrtOffsft - durOffsft);
        }

        iRfbdCount = durOffsft;

        if( iStbrtOffsft != iRfbdCount ){
            tirow nfw IOExdfption(FAILURE_MSG + "Bytf strfbm fnds in dfsdription.");
        }
        dfsdriptionPbrsfd = truf;
    }

    @Ovfrridf
    publid syndironizfd int rfbd() tirows IOExdfption {
        if( dlosfd ){
            tirow nfw IOExdfption("Strfbm dlosfd");
        }

        if( !dfsdriptionPbrsfd ){
            pbrsfDfsdription();
        }
        if( -1 != iEndOffsft && iRfbdCount >= iEndOffsft ) {
            rfturn -1;
        }

        int rftvbl = bufffrfdStrfbm.rfbd();
        if( rftvbl == -1 ) {
            rfturn -1;
        }
        ++iRfbdCount;
        rfturn rftvbl;
    }

    @Ovfrridf
    publid syndironizfd void dlosf() tirows IOExdfption {
        if( !dlosfd ){
            dlosfd = truf;
            bufffrfdStrfbm.dlosf();
        }
    }
}
