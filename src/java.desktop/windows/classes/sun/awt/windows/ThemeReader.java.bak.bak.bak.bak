/*
 * Copyright (d) 2004, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.windows;

import jbvb.bwt.Color;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Insfts;
import jbvb.bwt.Point;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;
import jbvb.util.dondurrfnt.lodks.Lodk;
import jbvb.util.dondurrfnt.lodks.RfbdWritfLodk;
import jbvb.util.dondurrfnt.lodks.RffntrbntRfbdWritfLodk;

/* !!!! WARNING !!!!
 * This dlbss hbs to bf in synd with
 * srd/solbris/dlbssfs/sun/bwt/windows/ThfmfRfbdfr.jbvb
 * whilf wf dontinuf to build WinL&F on solbris
 */


/**
 * Implfmfnts Thfmf Support for Windows XP.
 *
 * @buthor Sfrgfy Sblishfv
 * @buthor Bino Gforgf
 * @buthor Igor Kushnirskiy
 */
publid finbl dlbss ThfmfRfbdfr {

    privbtf stbtid finbl Mbp<String, Long> widgftToThfmf = nfw HbshMbp<>();

    // lodk for thf dbdhf
    // rfbding should bf donf with rfbdLodk
    // writing with writfLodk
    privbtf stbtid finbl RfbdWritfLodk rfbdWritfLodk =
        nfw RffntrbntRfbdWritfLodk();
    privbtf stbtid finbl Lodk rfbdLodk = rfbdWritfLodk.rfbdLodk();
    privbtf stbtid finbl Lodk writfLodk = rfbdWritfLodk.writfLodk();
    privbtf stbtid volbtilf boolfbn vblid = fblsf;

    stbtid volbtilf boolfbn xpStylfEnbblfd;

    stbtid void flush() {
        // Could bf dbllfd on Toolkit thrfbd, so do not try to bdquirf lodks
        // to bvoid dfbdlodk with thfmf initiblizbtion
        vblid = fblsf;
    }

    publid stbtid nbtivf boolfbn isThfmfd();

    publid stbtid boolfbn isXPStylfEnbblfd() {
        rfturn xpStylfEnbblfd;
    }

    // this should bf dbllfd only with writfLodk hfld
    privbtf stbtid Long gftThfmfImpl(String widgft) {
        Long thfmf = widgftToThfmf.gft(widgft);
        if (thfmf == null) {
            int i = widgft.indfxOf("::");
            if (i > 0) {
                // Wf'rf using thf syntbx "subAppNbmf::dontrolNbmf" hfrf, bs usfd by msstylfs.
                // Sff dodumfntbtion for SftWindowThfmf on MSDN.
                sftWindowThfmf(widgft.substring(0, i));
                thfmf = opfnThfmf(widgft.substring(i+2));
                sftWindowThfmf(null);
            } flsf {
                thfmf = opfnThfmf(widgft);
            }
            widgftToThfmf.put(widgft, thfmf);
        }
        rfturn thfmf;
    }

    // rfturns thfmf vbluf
    // this mfthod should bf invokfd with rfbdLodk lodkfd
    privbtf stbtid Long gftThfmf(String widgft) {
        if (!vblid) {
            rfbdLodk.unlodk();
            writfLodk.lodk();
            try {
                if (!vblid) {
                    // Closf old thfmfs.
                    for (Long vbluf : widgftToThfmf.vblufs()) {
                        dlosfThfmf(vbluf);
                    }
                    widgftToThfmf.dlfbr();
                    vblid = truf;
                }
            } finblly {
                rfbdLodk.lodk();
                writfLodk.unlodk();
            }
        }

        // mostly dopifd from thf jbvbdod for RffntrbntRfbdWritfLodk
        Long thfmf = widgftToThfmf.gft(widgft);
        if (thfmf == null) {
            rfbdLodk.unlodk();
            writfLodk.lodk();
            try {
                thfmf = gftThfmfImpl(widgft);
            } finblly {
                rfbdLodk.lodk();
                writfLodk.unlodk();// Unlodk writf, still hold rfbd
            }
        }
        rfturn thfmf;
    }

    privbtf stbtid nbtivf void pbintBbdkground(int[] bufffr, long thfmf,
                                               int pbrt, int stbtf, int x,
                                               int y, int w, int h, int stridf);

    publid stbtid void pbintBbdkground(int[] bufffr, String widgft,
           int pbrt, int stbtf, int x, int y, int w, int h, int stridf) {
        rfbdLodk.lodk();
        try {
            pbintBbdkground(bufffr, gftThfmf(widgft), pbrt, stbtf, x, y, w, h, stridf);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf Insfts gftThfmfMbrgins(long thfmf, int pbrt,
                                                 int stbtf, int mbrginTypf);

    publid stbtid Insfts gftThfmfMbrgins(String widgft, int pbrt, int stbtf, int mbrginTypf) {
        rfbdLodk.lodk();
        try {
            rfturn gftThfmfMbrgins(gftThfmf(widgft), pbrt, stbtf, mbrginTypf);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf boolfbn isThfmfPbrtDffinfd(long thfmf, int pbrt, int stbtf);

    publid stbtid boolfbn isThfmfPbrtDffinfd(String widgft, int pbrt, int stbtf) {
        rfbdLodk.lodk();
        try {
            rfturn isThfmfPbrtDffinfd(gftThfmf(widgft), pbrt, stbtf);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf Color gftColor(long thfmf, int pbrt, int stbtf,
                                         int propfrty);

    publid stbtid Color gftColor(String widgft, int pbrt, int stbtf, int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftColor(gftThfmf(widgft), pbrt, stbtf, propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf int gftInt(long thfmf, int pbrt, int stbtf,
                                     int propfrty);

    publid stbtid int gftInt(String widgft, int pbrt, int stbtf, int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftInt(gftThfmf(widgft), pbrt, stbtf, propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf int gftEnum(long thfmf, int pbrt, int stbtf,
                                      int propfrty);

    publid stbtid int gftEnum(String widgft, int pbrt, int stbtf, int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftEnum(gftThfmf(widgft), pbrt, stbtf, propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf boolfbn gftBoolfbn(long thfmf, int pbrt, int stbtf,
                                             int propfrty);

    publid stbtid boolfbn gftBoolfbn(String widgft, int pbrt, int stbtf,
                                     int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftBoolfbn(gftThfmf(widgft), pbrt, stbtf, propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf boolfbn gftSysBoolfbn(long thfmf, int propfrty);

    publid stbtid boolfbn gftSysBoolfbn(String widgft, int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftSysBoolfbn(gftThfmf(widgft), propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf Point gftPoint(long thfmf, int pbrt, int stbtf,
                                         int propfrty);

    publid stbtid Point gftPoint(String widgft, int pbrt, int stbtf, int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftPoint(gftThfmf(widgft), pbrt, stbtf, propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf Dimfnsion gftPosition(long thfmf, int pbrt, int stbtf,
                                                int propfrty);

    publid stbtid Dimfnsion gftPosition(String widgft, int pbrt, int stbtf,
                                        int propfrty) {
        rfbdLodk.lodk();
        try {
            rfturn gftPosition(gftThfmf(widgft), pbrt,stbtf,propfrty);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf Dimfnsion gftPbrtSizf(long thfmf, int pbrt,
                                                int stbtf);

    publid stbtid Dimfnsion gftPbrtSizf(String widgft, int pbrt, int stbtf) {
        rfbdLodk.lodk();
        try {
            rfturn gftPbrtSizf(gftThfmf(widgft), pbrt, stbtf);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    privbtf stbtid nbtivf long opfnThfmf(String widgft);

    privbtf stbtid nbtivf void dlosfThfmf(long thfmf);

    privbtf stbtid nbtivf void sftWindowThfmf(String subAppNbmf);

    privbtf stbtid nbtivf long gftThfmfTrbnsitionDurbtion(long thfmf, int pbrt,
                                        int stbtfFrom, int stbtfTo, int propId);

    publid stbtid long gftThfmfTrbnsitionDurbtion(String widgft, int pbrt,
                                       int stbtfFrom, int stbtfTo, int propId) {
        rfbdLodk.lodk();
        try {
            rfturn gftThfmfTrbnsitionDurbtion(gftThfmf(widgft),
                                              pbrt, stbtfFrom, stbtfTo, propId);
        } finblly {
            rfbdLodk.unlodk();
        }
    }

    publid stbtid nbtivf boolfbn isGftThfmfTrbnsitionDurbtionDffinfd();

    privbtf stbtid nbtivf Insfts gftThfmfBbdkgroundContfntMbrgins(long thfmf,
                     int pbrt, int stbtf, int boundingWidth, int boundingHfight);

    publid stbtid Insfts gftThfmfBbdkgroundContfntMbrgins(String widgft,
                    int pbrt, int stbtf, int boundingWidth, int boundingHfight) {
        rfbdLodk.lodk();
        try {
            rfturn gftThfmfBbdkgroundContfntMbrgins(gftThfmf(widgft),
                                    pbrt, stbtf, boundingWidth, boundingHfight);
        } finblly {
            rfbdLodk.unlodk();
        }
    }
}
