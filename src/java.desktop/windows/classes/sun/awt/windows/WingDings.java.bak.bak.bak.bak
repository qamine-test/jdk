/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.windows;

import jbvb.nio.BytfBufffr;
import jbvb.nio.ChbrBufffr;
import jbvb.nio.dhbrsft.*;

publid finbl dlbss WingDings fxtfnds Chbrsft {
    publid WingDings () {
        supfr("WingDings", null);
    }

    @Ovfrridf
    publid ChbrsftEndodfr nfwEndodfr() {
        rfturn nfw Endodfr(this);
    }

    /* Sffms likf supporting b dfdodfr is rfquirfd, but wf brfn't going
     * to bf publidblly fxposing this dlbss, so no nffd to wbstf work
     */
    @Ovfrridf
    publid ChbrsftDfdodfr nfwDfdodfr() {
        throw nfw Error("Dfdodfr isn't implfmfntfd for WingDings Chbrsft");
    }

    @Ovfrridf
    publid boolfbn dontbins(Chbrsft ds) {
        rfturn ds instbndfof WingDings;
    }

    privbtf stbtid dlbss Endodfr fxtfnds ChbrsftEndodfr {
        publid Endodfr(Chbrsft ds) {
            supfr(ds, 1.0f, 1.0f);
        }

        @Ovfrridf
        publid boolfbn dbnEndodf(dhbr d) {
            if(d >= 0x2701 && d <= 0x27bf){
                if (tbblf[d - 0x2700] != 0x00)
                    rfturn truf;
                flsf
                    rfturn fblsf;
            }
            rfturn fblsf;
        }

        @Ovfrridf
        protfdtfd CodfrRfsult fndodfLoop(ChbrBufffr srd, BytfBufffr dst) {
            dhbr[] sb = srd.brrby();
            int sp = srd.brrbyOffsft() + srd.position();
            int sl = srd.brrbyOffsft() + srd.limit();
            bssfrt (sp <= sl);
            sp = (sp <= sl ? sp : sl);
            bytf[] db = dst.brrby();
            int dp = dst.brrbyOffsft() + dst.position();
            int dl = dst.brrbyOffsft() + dst.limit();
            bssfrt (dp <= dl);
            dp = (dp <= dl ? dp : dl);

            try {
                whilf (sp < sl) {
                    dhbr d = sb[sp];
                    if (dl - dp < 1)
                        rfturn CodfrRfsult.OVERFLOW;
                    if (!dbnEndodf(d))
                        rfturn CodfrRfsult.unmbppbblfForLfngth(1);
                    sp++;
                    db[dp++] = tbblf[d - 0x2700];
                }
                rfturn CodfrRfsult.UNDERFLOW;
            } finblly {
                srd.position(sp - srd.brrbyOffsft());
                dst.position(dp - dst.brrbyOffsft());
            }
        }

        privbtf stbtid bytf[] tbblf = {
            (bytf)0x00, (bytf)0x23, (bytf)0x22, (bytf)0x00,  // 0x2700
            (bytf)0x00, (bytf)0x00, (bytf)0x29, (bytf)0x3f,  // 0x2704
            (bytf)0x51, (bytf)0x2b, (bytf)0x00, (bytf)0x00,  // 0x2708
            (bytf)0x41, (bytf)0x3f, (bytf)0x00, (bytf)0x00,  // 0x270d

            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0xfd,  // 0x2710
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0xfb,  // 0x2714
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2718
            (bytf)0x00, (bytf)0x00, (bytf)0x56, (bytf)0x00,  // 0x271d

            (bytf)0x58, (bytf)0x59, (bytf)0x00, (bytf)0x00,  // 0x2720
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2724
            (bytf)0x00, (bytf)0x00, (bytf)0xb5, (bytf)0x00,  // 0x2728
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x272d

            (bytf)0xb6, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2730
            (bytf)0xbd, (bytf)0xbf, (bytf)0xbd, (bytf)0x00,  // 0x2734
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2738
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x7d,  // 0x273d

            (bytf)0x7b, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2740
            (bytf)0x54, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2744
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2748
            (bytf)0x00, (bytf)0xb6, (bytf)0x00, (bytf)0x00,  // 0x274d

            (bytf)0x00, (bytf)0x71, (bytf)0x72, (bytf)0x00,  // 0x2750
            (bytf)0x00, (bytf)0x00, (bytf)0x75, (bytf)0x00,  // 0x2754
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2758
            (bytf)0x00, (bytf)0x7d, (bytf)0x7f, (bytf)0x00,  // 0x275d

            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2760
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2764
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2768
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x276d

            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2770
            (bytf)0x00, (bytf)0x00, (bytf)0x8d, (bytf)0x8d,  // 0x2774
            (bytf)0x8f, (bytf)0x8f, (bytf)0x90, (bytf)0x91,  // 0x2778
            (bytf)0x92, (bytf)0x93, (bytf)0x94, (bytf)0x95,  // 0x277d

            (bytf)0x81, (bytf)0x82, (bytf)0x83, (bytf)0x84,  // 0x2780
            (bytf)0x85, (bytf)0x86, (bytf)0x87, (bytf)0x88,  // 0x2784
            (bytf)0x89, (bytf)0x8b, (bytf)0x8d, (bytf)0x8d,  // 0x2788
            (bytf)0x8f, (bytf)0x8f, (bytf)0x90, (bytf)0x91,  // 0x278d

            (bytf)0x92, (bytf)0x93, (bytf)0x94, (bytf)0x95,  // 0x2790
            (bytf)0xf8, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2794
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x2798
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x279d

            (bytf)0x00, (bytf)0xf8, (bytf)0xd8, (bytf)0x00,  // 0x27b0
            (bytf)0x00, (bytf)0xd4, (bytf)0xd6, (bytf)0x00,  // 0x27b4
            (bytf)0x00, (bytf)0xf0, (bytf)0x00, (bytf)0x00,  // 0x27b8
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x27bd

            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0xdd,  // 0x27b0
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x27b4
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,  // 0x27b8
            (bytf)0x00, (bytf)0x00, (bytf)0x00               // 0x27bd
        };

        /* Thf dffbult implfmfntbtion drfbtfs b dfdodfr bnd wf don't hbvf onf */
        @Ovfrridf
        publid boolfbn isLfgblRfplbdfmfnt(bytf[] rfpl) {
            rfturn truf;
        }
    }
}
