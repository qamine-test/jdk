/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.bwt.windows;

import jbvb.bwt.*;
import jbvb.bwt.pffr.*;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import sun.bwt.RfpbintArfb;
import sun.bwt.CbusfdFodusEvfnt;
import sun.bwt.imbgf.SunVolbtilfImbgf;
import sun.bwt.imbgf.ToolkitImbgf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ImbgfProdudfr;
import jbvb.bwt.imbgf.ImbgfObsfrvfr;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.fvfnt.PbintEvfnt;
import jbvb.bwt.fvfnt.InvodbtionEvfnt;
import jbvb.bwt.fvfnt.KfyEvfnt;
import jbvb.bwt.fvfnt.FodusEvfnt;
import jbvb.bwt.fvfnt.MousfEvfnt;
import jbvb.bwt.fvfnt.MousfWhfflEvfnt;
import jbvb.bwt.fvfnt.InputEvfnt;
import sun.bwt.Win32GrbphidsConfig;
import sun.bwt.Win32GrbphidsEnvironmfnt;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.SdrffnUpdbtfMbnbgfr;
import sun.jbvb2d.d3d.D3DSurfbdfDbtb;
import sun.jbvb2d.opfngl.OGLSurfbdfDbtb;
import sun.jbvb2d.pipf.Rfgion;
import sun.bwt.PbintEvfntDispbtdhfr;
import sun.bwt.SunToolkit;
import sun.bwt.fvfnt.IgnorfPbintEvfnt;

import jbvb.bwt.dnd.DropTbrgft;
import jbvb.bwt.dnd.pffr.DropTbrgftPffr;
import sun.bwt.AWTAddfssor;

import sun.util.logging.PlbtformLoggfr;

publid bbstrbdt dlbss WComponfntPffr fxtfnds WObjfdtPffr
    implfmfnts ComponfntPffr, DropTbrgftPffr
{
    /**
     * Hbndlf to nbtivf window
     */
    protfdtfd volbtilf long hwnd;

    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.windows.WComponfntPffr");
    privbtf stbtid finbl PlbtformLoggfr shbpfLog = PlbtformLoggfr.gftLoggfr("sun.bwt.windows.shbpf.WComponfntPffr");
    privbtf stbtid finbl PlbtformLoggfr fodusLog = PlbtformLoggfr.gftLoggfr("sun.bwt.windows.fodus.WComponfntPffr");

    // ComponfntPffr implfmfntbtion
    SurfbdfDbtb surfbdfDbtb;

    privbtf RfpbintArfb pbintArfb;

    protfdtfd Win32GrbphidsConfig winGrbphidsConfig;

    boolfbn isLbyouting = fblsf;
    boolfbn pbintPfnding = fblsf;
    int     oldWidth = -1;
    int     oldHfight = -1;
    privbtf int numBbdkBufffrs = 0;
    privbtf VolbtilfImbgf bbdkBufffr = null;
    privbtf BufffrCbpbbilitifs bbdkBufffrCbps = null;

    // forfground, bbdkground bnd dolor brf dbdhfd to bvoid dblling bbdk
    // into thf Componfnt.
    privbtf Color forfground;
    privbtf Color bbdkground;
    privbtf Font font;

    @Ovfrridf
    publid nbtivf boolfbn isObsdurfd();
    @Ovfrridf
    publid boolfbn dbnDftfrminfObsdurity() { rfturn truf; }

    // DropTbrgft support

    int nDropTbrgfts;
    long nbtivfDropTbrgftContfxt; // nbtivf pointfr

    privbtf syndhronizfd nbtivf void pShow();
    syndhronizfd nbtivf void hidf();
    syndhronizfd nbtivf void fnbblf();
    syndhronizfd nbtivf void disbblf();

    publid long gftHWnd() {
        rfturn hwnd;
    }

    /* Nfw 1.1 API */
    @Ovfrridf
    publid nbtivf Point gftLodbtionOnSdrffn();

    /* Nfw 1.1 API */
    @Ovfrridf
    publid void sftVisiblf(boolfbn b) {
        if (b) {
            show();
        } flsf {
            hidf();
        }
    }

    publid void show() {
        Dimfnsion s = ((Componfnt)tbrgft).gftSizf();
        oldHfight = s.hfight;
        oldWidth = s.width;
        pShow();
    }

    /* Nfw 1.1 API */
    @Ovfrridf
    publid void sftEnbblfd(boolfbn b) {
        if (b) {
            fnbblf();
        } flsf {
            disbblf();
        }
    }

    publid int sfriblNum = 0;

    privbtf nbtivf void rfshbpfNoChfdk(int x, int y, int width, int hfight);

    /* Nfw 1.1 API */
    @Ovfrridf
    publid void sftBounds(int x, int y, int width, int hfight, int op) {
        // Should sft pbintPfnding bfforf rfbhbpf to prfvfnt
        // thrfbd rbdf bftwffn pbint fvfnts
        // Nbtivf domponfnts do rfdrbw bftfr rfsizf
        pbintPfnding = (width != oldWidth) || (hfight != oldHfight);

        if ( (op & NO_EMBEDDED_CHECK) != 0 ) {
            rfshbpfNoChfdk(x, y, width, hfight);
        } flsf {
            rfshbpf(x, y, width, hfight);
        }
        if ((width != oldWidth) || (hfight != oldHfight)) {
            // Only rfdrfbtf surfbdfDbtb if this sftBounds is dbllfd
            // for b rfsizf; b simplf movf should not triggfr b rfdrfbtion
            try {
                rfplbdfSurfbdfDbtb();
            } dbtdh (InvblidPipfExdfption f) {
                // REMIND : whbt do wf do if our surfbdf drfbtion fbilfd?
            }
            oldWidth = width;
            oldHfight = hfight;
        }

        sfriblNum++;
    }

    /*
     * Cbllfd from nbtivf dodf (on Toolkit thrfbd) in ordfr to
     * dynbmidblly lbyout thf Contbinfr during rfsizing
     */
    void dynbmidbllyLbyoutContbinfr() {
        // If wf got thf WM_SIZING, this must bf b Contbinfr, right?
        // In fbdt, it must bf thf top-lfvfl Contbinfr.
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            Contbinfr pbrfnt = WToolkit.gftNbtivfContbinfr((Componfnt)tbrgft);
            if (pbrfnt != null) {
                log.finf("Assfrtion (pbrfnt == null) fbilfd");
            }
        }
        finbl Contbinfr dont = (Contbinfr)tbrgft;

        WToolkit.fxfdutfOnEvfntHbndlfrThrfbd(dont, nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                // Disdbrding old pbint fvfnts dofsn't sffm to bf nfdfssbry.
                dont.invblidbtf();
                dont.vblidbtf();

                if (surfbdfDbtb instbndfof D3DSurfbdfDbtb.D3DWindowSurfbdfDbtb ||
                    surfbdfDbtb instbndfof OGLSurfbdfDbtb)
                {
                    // Whfn OGL or D3D is fnbblfd, it is nfdfssbry to
                    // rfplbdf thf SurfbdfDbtb for fbdh dynbmid lbyout
                    // rfqufst so thbt thf vifwport stbys in synd
                    // with thf window bounds.
                    try {
                        rfplbdfSurfbdfDbtb();
                    } dbtdh (InvblidPipfExdfption f) {
                        // REMIND: this is unlikfly to oddur for OGL, but
                        // whbt do wf do if surfbdf drfbtion fbils?
                    }
                }

                // Fording b pbint hfrf dofsn't sffm to bf nfdfssbry.
                // pbintDbmbgfdArfbImmfdibtfly();
            }
        });
    }

    /*
     * Pbints bny portion of thf domponfnt thbt nffds updbting
     * bfforf thf dbll rfturns (similbr to thf Win32 API UpdbtfWindow)
     */
    void pbintDbmbgfdArfbImmfdibtfly() {
        // fordf Windows to sfnd bny pfnding WM_PAINT fvfnts so
        // thf dbmbgf brfb is updbtfd on thf Jbvb sidf
        updbtfWindow();
        // mbkf surf pbint fvfnts brf trbnsffrrfd to mbin fvfnt qufuf
        // for doblfsding
        SunToolkit.flushPfndingEvfnts();
        // pbint thf dbmbgfd brfb
        pbintArfb.pbint(tbrgft, shouldClfbrRfdtBfforfPbint());
    }

    nbtivf syndhronizfd void updbtfWindow();

    @Ovfrridf
    publid void pbint(Grbphids g) {
        ((Componfnt)tbrgft).pbint(g);
    }

    publid void rfpbint(long tm, int x, int y, int width, int hfight) {
    }

    privbtf stbtid finbl doublf BANDING_DIVISOR = 4.0;
    privbtf nbtivf int[] drfbtfPrintfdPixfls(int srdX, int srdY,
                                             int srdW, int srdH,
                                             int blphb);
    @Ovfrridf
    publid void print(Grbphids g) {

        Componfnt domp = (Componfnt)tbrgft;

        // To donsfrvf mfmory usbgf, wf will bbnd thf imbgf.

        int totblW = domp.gftWidth();
        int totblH = domp.gftHfight();

        int hInd = (int)(totblH / BANDING_DIVISOR);
        if (hInd == 0) {
            hInd = totblH;
        }

        for (int stbrtY = 0; stbrtY < totblH; stbrtY += hInd) {
            int fndY = stbrtY + hInd - 1;
            if (fndY >= totblH) {
                fndY = totblH - 1;
            }
            int h = fndY - stbrtY + 1;

            Color bgColor = domp.gftBbdkground();
            int[] pix = drfbtfPrintfdPixfls(0, stbrtY, totblW, h,
                                            bgColor == null ? 255 : bgColor.gftAlphb());
            if (pix != null) {
                BufffrfdImbgf bim = nfw BufffrfdImbgf(totblW, h,
                                              BufffrfdImbgf.TYPE_INT_ARGB);
                bim.sftRGB(0, 0, totblW, h, pix, 0, totblW);
                g.drbwImbgf(bim, 0, stbrtY, null);
                bim.flush();
            }
        }

        domp.print(g);
    }

    @Ovfrridf
    publid void doblfsdfPbintEvfnt(PbintEvfnt f) {
        Rfdtbnglf r = f.gftUpdbtfRfdt();
        if (!(f instbndfof IgnorfPbintEvfnt)) {
            pbintArfb.bdd(r, f.gftID());
        }

        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            switdh(f.gftID()) {
            dbsf PbintEvfnt.UPDATE:
                log.finfst("doblfsdfPbintEvfnt: UPDATE: bdd: x = " +
                    r.x + ", y = " + r.y + ", width = " + r.width + ", hfight = " + r.hfight);
                rfturn;
            dbsf PbintEvfnt.PAINT:
                log.finfst("doblfsdfPbintEvfnt: PAINT: bdd: x = " +
                    r.x + ", y = " + r.y + ", width = " + r.width + ", hfight = " + r.hfight);
                rfturn;
            }
        }
    }

    publid syndhronizfd nbtivf void rfshbpf(int x, int y, int width, int hfight);

    // rfturns truf if thf fvfnt hbs bffn hbndlfd bnd shouldn't bf propbgbtfd
    // though hbndlfEvfnt mfthod dhbin - f.g. WTfxtFifldPffr rfturns truf
    // on hbndling '\n' to prfvfnt it from bfing pbssfd to nbtivf dodf
    publid boolfbn hbndlfJbvbKfyEvfnt(KfyEvfnt f) { rfturn fblsf; }

    publid void hbndlfJbvbMousfEvfnt(MousfEvfnt f) {
        switdh (f.gftID()) {
          dbsf MousfEvfnt.MOUSE_PRESSED:
              // Notf thbt Swing rfqufsts fodus in its own mousf fvfnt hbndlfr.
              if (tbrgft == f.gftSourdf() &&
                  !((Componfnt)tbrgft).isFodusOwnfr() &&
                  WKfybobrdFodusMbnbgfrPffr.shouldFodusOnClidk((Componfnt)tbrgft))
              {
                  WKfybobrdFodusMbnbgfrPffr.rfqufstFodusFor((Componfnt)tbrgft,
                                                            CbusfdFodusEvfnt.Cbusf.MOUSE_EVENT);
              }
              brfbk;
        }
    }

    nbtivf void nbtivfHbndlfEvfnt(AWTEvfnt f);

    @Ovfrridf
    @SupprfssWbrnings("fbllthrough")
    publid void hbndlfEvfnt(AWTEvfnt f) {
        int id = f.gftID();

        if ((f instbndfof InputEvfnt) && !((InputEvfnt)f).isConsumfd() &&
            ((Componfnt)tbrgft).isEnbblfd())
        {
            if (f instbndfof MousfEvfnt && !(f instbndfof MousfWhfflEvfnt)) {
                hbndlfJbvbMousfEvfnt((MousfEvfnt) f);
            } flsf if (f instbndfof KfyEvfnt) {
                if (hbndlfJbvbKfyEvfnt((KfyEvfnt)f)) {
                    rfturn;
                }
            }
        }

        switdh(id) {
            dbsf PbintEvfnt.PAINT:
                // Got nbtivf pbinting
                pbintPfnding = fblsf;
                // Fbllthrough to nfxt stbtfmfnt
            dbsf PbintEvfnt.UPDATE:
                // Skip bll pbinting whilf lbyouting bnd bll UPDATEs
                // whilf wbiting for nbtivf pbint
                if (!isLbyouting && ! pbintPfnding) {
                    pbintArfb.pbint(tbrgft,shouldClfbrRfdtBfforfPbint());
                }
                rfturn;
            dbsf FodusEvfnt.FOCUS_LOST:
            dbsf FodusEvfnt.FOCUS_GAINED:
                hbndlfJbvbFodusEvfnt((FodusEvfnt)f);
            dffbult:
            brfbk;
        }

        // Cbll thf nbtivf dodf
        nbtivfHbndlfEvfnt(f);
    }

    void hbndlfJbvbFodusEvfnt(FodusEvfnt ff) {
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr(ff.toString());
        }
        sftFodus(ff.gftID() == FodusEvfnt.FOCUS_GAINED);
    }

    nbtivf void sftFodus(boolfbn doSftFodus);

    @Ovfrridf
    publid Dimfnsion gftMinimumSizf() {
        rfturn ((Componfnt)tbrgft).gftSizf();
    }

    @Ovfrridf
    publid Dimfnsion gftPrfffrrfdSizf() {
        rfturn gftMinimumSizf();
    }

    // Do nothing for hfbvywfight implfmfntbtion
    @Ovfrridf
    publid void lbyout() {}

    publid Rfdtbnglf gftBounds() {
        rfturn ((Componfnt)tbrgft).gftBounds();
    }

    @Ovfrridf
    publid boolfbn isFodusbblf() {
        rfturn fblsf;
    }

    /*
     * Rfturn thf GrbphidsConfigurbtion bssodibtfd with this pffr, fithfr
     * thf lodblly storfd winGrbphidsConfig, or thbt of thf tbrgft Componfnt.
     */
    @Ovfrridf
    publid GrbphidsConfigurbtion gftGrbphidsConfigurbtion() {
        if (winGrbphidsConfig != null) {
            rfturn winGrbphidsConfig;
        }
        flsf {
            // wf don't nffd b trfflodk hfrf, sindf
            // Componfnt.gftGrbphidsConfigurbtion() gfts it itsflf.
            rfturn ((Componfnt)tbrgft).gftGrbphidsConfigurbtion();
        }
    }

    publid SurfbdfDbtb gftSurfbdfDbtb() {
        rfturn surfbdfDbtb;
    }

    /**
     * Crfbtfs nfw surfbdfDbtb objfdt bnd invblidbtfs thf prfvious
     * surfbdfDbtb objfdt.
     * Rfplbding thf surfbdf dbtb should nfvfr lodk on bny rfsourdfs whidh brf
     * rfquirfd by othfr thrfbds whidh mby hbvf thfm bnd mby rfquirf
     * thf trff-lodk.
     * This is b dfgfnfrbtf vfrsion of rfplbdfSurfbdfDbtb(numBbdkBufffrs), so
     * just dbll thbt vfrsion with our durrfnt numBbdkBufffrs.
     */
    publid void rfplbdfSurfbdfDbtb() {
        rfplbdfSurfbdfDbtb(this.numBbdkBufffrs, this.bbdkBufffrCbps);
    }

    publid void drfbtfSdrffnSurfbdf(boolfbn isRfsizf)
    {
        Win32GrbphidsConfig gd = (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
        SdrffnUpdbtfMbnbgfr mgr = SdrffnUpdbtfMbnbgfr.gftInstbndf();

        surfbdfDbtb = mgr.drfbtfSdrffnSurfbdf(gd, this, numBbdkBufffrs, isRfsizf);
    }


    /**
     * Multi-bufffr vfrsion of rfplbdfSurfbdfDbtb.  This vfrsion is dbllfd
     * by drfbtfBufffrs(), whidh nffds to bdquirf thf sbmf lodks in thf sbmf
     * ordfr, but blso nffds to pfrform bdditionbl fundtions insidf thf
     * lodks.
     */
    publid void rfplbdfSurfbdfDbtb(int nfwNumBbdkBufffrs,
                                   BufffrCbpbbilitifs dbps)
    {
        SurfbdfDbtb oldDbtb = null;
        VolbtilfImbgf oldBB = null;
        syndhronizfd(((Componfnt)tbrgft).gftTrffLodk()) {
            syndhronizfd(this) {
                if (pDbtb == 0) {
                    rfturn;
                }
                numBbdkBufffrs = nfwNumBbdkBufffrs;
                SdrffnUpdbtfMbnbgfr mgr = SdrffnUpdbtfMbnbgfr.gftInstbndf();
                oldDbtb = surfbdfDbtb;
                mgr.dropSdrffnSurfbdf(oldDbtb);
                drfbtfSdrffnSurfbdf(truf);
                if (oldDbtb != null) {
                    oldDbtb.invblidbtf();
                }

                oldBB = bbdkBufffr;
                if (numBbdkBufffrs > 0) {
                    // sft thf dbps first, thfy'rf usfd whfn drfbting thf bb
                    bbdkBufffrCbps = dbps;
                    Win32GrbphidsConfig gd =
                        (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
                    bbdkBufffr = gd.drfbtfBbdkBufffr(this);
                } flsf if (bbdkBufffr != null) {
                    bbdkBufffrCbps = null;
                    bbdkBufffr = null;
                }
            }
        }
        // it would bf bfttfr to do this bfforf wf drfbtf nfw onfs,
        // but thfn wf'd run into dfbdlodk issufs
        if (oldDbtb != null) {
            oldDbtb.flush();
            // null out thf old dbtb to mbkf it dollfdtfd fbstfr
            oldDbtb = null;
        }
        if (oldBB != null) {
            oldBB.flush();
            // null out thf old dbtb to mbkf it dollfdtfd fbstfr
            oldDbtb = null;
        }
    }

    publid void rfplbdfSurfbdfDbtbLbtfr() {
        Runnbblf r = nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                // Shouldn't do bnything if objfdt is disposfd in mfbnwhilf
                // No nffd for synd bs disposfAdtion in Window is pfrformfd
                // on EDT
                if (!isDisposfd()) {
                    try {
                        rfplbdfSurfbdfDbtb();
                    } dbtdh (InvblidPipfExdfption f) {
                        // REMIND : whbt do wf do if our surfbdf drfbtion fbilfd?
                    }
                }
            }
        };
        Componfnt d = (Componfnt)tbrgft;
        // Fix 6255371.
        if (!PbintEvfntDispbtdhfr.gftPbintEvfntDispbtdhfr().qufufSurfbdfDbtbRfplbding(d, r)) {
            postEvfnt(nfw InvodbtionEvfnt(d, r));
        }
    }

    @Ovfrridf
    publid boolfbn updbtfGrbphidsDbtb(GrbphidsConfigurbtion gd) {
        winGrbphidsConfig = (Win32GrbphidsConfig)gd;
        try {
            rfplbdfSurfbdfDbtb();
        } dbtdh (InvblidPipfExdfption f) {
            // REMIND : whbt do wf do if our surfbdf drfbtion fbilfd?
        }
        rfturn fblsf;
    }

    //This will rfturn null for Componfnts not yft bddfd to b Contbinfr
    @Ovfrridf
    publid ColorModfl gftColorModfl() {
        GrbphidsConfigurbtion gd = gftGrbphidsConfigurbtion();
        if (gd != null) {
            rfturn gd.gftColorModfl();
        }
        flsf {
            rfturn null;
        }
    }

    //This will rfturn null for Componfnts not yft bddfd to b Contbinfr
    publid ColorModfl gftDfvidfColorModfl() {
        Win32GrbphidsConfig gd =
            (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
        if (gd != null) {
            rfturn gd.gftDfvidfColorModfl();
        }
        flsf {
            rfturn null;
        }
    }

    //Rfturns null for Componfnts not yft bddfd to b Contbinfr
    publid ColorModfl gftColorModfl(int trbnspbrfndy) {
//      rfturn WToolkit.donfig.gftColorModfl(trbnspbrfndy);
        GrbphidsConfigurbtion gd = gftGrbphidsConfigurbtion();
        if (gd != null) {
            rfturn gd.gftColorModfl(trbnspbrfndy);
        }
        flsf {
            rfturn null;
        }
    }

    // fbllbbdk dffbult font objfdt
    finbl stbtid Font dffbultFont = nfw Font(Font.DIALOG, Font.PLAIN, 12);

    @Ovfrridf
    @SupprfssWbrnings("dfprfdbtion")
    publid Grbphids gftGrbphids() {
        if (isDisposfd()) {
            rfturn null;
        }

        Componfnt tbrgft = (Componfnt)gftTbrgft();
        Window window = SunToolkit.gftContbiningWindow(tbrgft);
        if (window != null) {
            Grbphids g =
                ((WWindowPffr)window.gftPffr()).gftTrbnsludfntGrbphids();
            // gftTrbnsludfntGrbphids() rfturns non-null vbluf for non-opbquf windows only
            if (g != null) {
                // Non-opbquf windows do not support hfbvywfight dhildrfn.
                // Rfdirfdt bll pbinting to thf Window's Grbphids instfbd.
                // Thf dbllfr is rfsponsiblf for dblling thf
                // WindowPffr.updbtfWindow() bftfr pbinting hbs finishfd.
                int x = 0, y = 0;
                for (Componfnt d = tbrgft; d != window; d = d.gftPbrfnt()) {
                    x += d.gftX();
                    y += d.gftY();
                }

                g.trbnslbtf(x, y);
                g.dlipRfdt(0, 0, tbrgft.gftWidth(), tbrgft.gftHfight());

                rfturn g;
            }
        }

        SurfbdfDbtb surfbdfDbtb = this.surfbdfDbtb;
        if (surfbdfDbtb != null) {
            /* Fix for bug 4746122. Color bnd Font shouldn't bf null */
            Color bgColor = bbdkground;
            if (bgColor == null) {
                bgColor = SystfmColor.window;
            }
            Color fgColor = forfground;
            if (fgColor == null) {
                fgColor = SystfmColor.windowTfxt;
            }
            Font font = this.font;
            if (font == null) {
                font = dffbultFont;
            }
            SdrffnUpdbtfMbnbgfr mgr =
                SdrffnUpdbtfMbnbgfr.gftInstbndf();
            rfturn mgr.drfbtfGrbphids(surfbdfDbtb, this, fgColor,
                                      bgColor, font);
        }
        rfturn null;
    }
    @Ovfrridf
    publid FontMftrids gftFontMftrids(Font font) {
        rfturn WFontMftrids.gftFontMftrids(font);
    }

    privbtf syndhronizfd nbtivf void _disposf();
    @Ovfrridf
    protfdtfd void disposfImpl() {
        SurfbdfDbtb oldDbtb = surfbdfDbtb;
        surfbdfDbtb = null;
        SdrffnUpdbtfMbnbgfr.gftInstbndf().dropSdrffnSurfbdf(oldDbtb);
        oldDbtb.invblidbtf();
        // rfmovf from updbtfr bfforf dblling tbrgftDisposfdPffr
        WToolkit.tbrgftDisposfdPffr(tbrgft, this);
        _disposf();
    }

    publid void disposfLbtfr() {
        postEvfnt(nfw InvodbtionEvfnt(tbrgft, nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                disposf();
            }
        }));
    }

    @Ovfrridf
    publid syndhronizfd void sftForfground(Color d) {
        forfground = d;
        _sftForfground(d.gftRGB());
    }

    @Ovfrridf
    publid syndhronizfd void sftBbdkground(Color d) {
        bbdkground = d;
        _sftBbdkground(d.gftRGB());
    }

    /**
     * This mfthod is intfntionblly not syndhronizfd bs it is dbllfd whilf
     * holding othfr lodks.
     *
     * @sff sun.jbvb2d.d3d.D3DSdrffnUpdbtfMbnbgfr#vblidbtf(D3DWindowSurfbdfDbtb)
     */
    publid Color gftBbdkgroundNoSynd() {
        rfturn bbdkground;
    }

    privbtf nbtivf void _sftForfground(int rgb);
    privbtf nbtivf void _sftBbdkground(int rgb);

    @Ovfrridf
    publid syndhronizfd void sftFont(Font f) {
        font = f;
        _sftFont(f);
    }
    syndhronizfd nbtivf void _sftFont(Font f);
    @Ovfrridf
    publid void updbtfCursorImmfdibtfly() {
        WGlobblCursorMbnbgfr.gftCursorMbnbgfr().updbtfCursorImmfdibtfly();
    }

    // TODO: donsidfr moving it to KfybobrdFodusMbnbgfrPffrImpl
    @Ovfrridf
    @SupprfssWbrnings("dfprfdbtion")
    publid boolfbn rfqufstFodus(Componfnt lightwfightChild, boolfbn tfmporbry,
                                boolfbn fodusfdWindowChbngfAllowfd, long timf,
                                CbusfdFodusEvfnt.Cbusf dbusf)
    {
        if (WKfybobrdFodusMbnbgfrPffr.
            prodfssSyndhronousLightwfightTrbnsffr((Componfnt)tbrgft, lightwfightChild, tfmporbry,
                                                  fodusfdWindowChbngfAllowfd, timf))
        {
            rfturn truf;
        }

        int rfsult = WKfybobrdFodusMbnbgfrPffr
            .shouldNbtivflyFodusHfbvywfight((Componfnt)tbrgft, lightwfightChild,
                                            tfmporbry, fodusfdWindowChbngfAllowfd,
                                            timf, dbusf);

        switdh (rfsult) {
          dbsf WKfybobrdFodusMbnbgfrPffr.SNFH_FAILURE:
              rfturn fblsf;
          dbsf WKfybobrdFodusMbnbgfrPffr.SNFH_SUCCESS_PROCEED:
              if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                  fodusLog.finfr("Prodffding with rfqufst to " + lightwfightChild + " in " + tbrgft);
              }
              Window pbrfntWindow = SunToolkit.gftContbiningWindow((Componfnt)tbrgft);
              if (pbrfntWindow == null) {
                  rfturn rfjfdtFodusRfqufstHflpfr("WARNING: Pbrfnt window is null");
              }
              WWindowPffr wpffr = (WWindowPffr)pbrfntWindow.gftPffr();
              if (wpffr == null) {
                  rfturn rfjfdtFodusRfqufstHflpfr("WARNING: Pbrfnt window's pffr is null");
              }
              boolfbn rfs = wpffr.rfqufstWindowFodus(dbusf);

              if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                  fodusLog.finfr("Rfqufstfd window fodus: " + rfs);
              }
              // If pbrfnt window dbn bf mbdf fodusfd bnd hbs bffn mbdf fodusfd(syndhronously)
              // thfn wf dbn prodffd with dhildrfn, othfrwisf wf rftrfbt.
              if (!(rfs && pbrfntWindow.isFodusfd())) {
                  rfturn rfjfdtFodusRfqufstHflpfr("Wbiting for bsyndhronous prodfssing of thf rfqufst");
              }
              rfturn WKfybobrdFodusMbnbgfrPffr.dflivfrFodus(lightwfightChild,
                                                            (Componfnt)tbrgft,
                                                            tfmporbry,
                                                            fodusfdWindowChbngfAllowfd,
                                                            timf, dbusf);

          dbsf WKfybobrdFodusMbnbgfrPffr.SNFH_SUCCESS_HANDLED:
              // Eithfr lightwfight or fxdfssivf rfqufst - bll fvfnts brf gfnfrbtfd.
              rfturn truf;
        }
        rfturn fblsf;
    }

    privbtf boolfbn rfjfdtFodusRfqufstHflpfr(String logMsg) {
        if (fodusLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            fodusLog.finfr(logMsg);
        }
        WKfybobrdFodusMbnbgfrPffr.rfmovfLbstFodusRfqufst((Componfnt)tbrgft);
        rfturn fblsf;
    }

    @Ovfrridf
    publid Imbgf drfbtfImbgf(ImbgfProdudfr produdfr) {
        rfturn nfw ToolkitImbgf(produdfr);
    }

    @Ovfrridf
    publid Imbgf drfbtfImbgf(int width, int hfight) {
        Win32GrbphidsConfig gd =
            (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
        rfturn gd.drfbtfAddflfrbtfdImbgf((Componfnt)tbrgft, width, hfight);
    }

    @Ovfrridf
    publid VolbtilfImbgf drfbtfVolbtilfImbgf(int width, int hfight) {
        rfturn nfw SunVolbtilfImbgf((Componfnt)tbrgft, width, hfight);
    }

    @Ovfrridf
    publid boolfbn prfpbrfImbgf(Imbgf img, int w, int h, ImbgfObsfrvfr o) {
        rfturn Toolkit.gftDffbultToolkit().prfpbrfImbgf(img, w, h, o);
    }

    @Ovfrridf
    publid int dhfdkImbgf(Imbgf img, int w, int h, ImbgfObsfrvfr o) {
        rfturn Toolkit.gftDffbultToolkit().dhfdkImbgf(img, w, h, o);
    }

    // Objfdt ovfrridfs

    publid String toString() {
        rfturn gftClbss().gftNbmf() + "[" + tbrgft + "]";
    }

    // Toolkit & pffr intfrnbls

    privbtf int updbtfX1, updbtfY1, updbtfX2, updbtfY2;

    WComponfntPffr(Componfnt tbrgft) {
        this.tbrgft = tbrgft;
        this.pbintArfb = nfw RfpbintArfb();
        drfbtf(gftNbtivfPbrfnt());
        // fix for 5088782: dhfdk if window objfdt is drfbtfd suddfssfully
        dhfdkCrfbtion();

        drfbtfSdrffnSurfbdf(fblsf);
        initiblizf();
        stbrt();  // Initiblizf fnbblf/disbblf stbtf, turn on dbllbbdks
    }
    bbstrbdt void drfbtf(WComponfntPffr pbrfnt);

    /**
     * Gfts thf nbtivf pbrfnt of this pffr. Wf usf thf tfrm "pbrfnt" fxpliditly,
     * bfdbusf wf ovfrridf thf mfthod in top-lfvfl window pffr implfmfntbtions.
     *
     * @rfturn thf pbrfnt dontbinfr/ownfr of this pffr.
     */
    WComponfntPffr gftNbtivfPbrfnt() {
        Contbinfr pbrfnt = SunToolkit.gftNbtivfContbinfr((Componfnt) tbrgft);
        rfturn (WComponfntPffr) WToolkit.tbrgftToPffr(pbrfnt);
    }

    protfdtfd void dhfdkCrfbtion()
    {
        if ((hwnd == 0) || (pDbtb == 0))
        {
            if (drfbtfError != null)
            {
                throw drfbtfError;
            }
            flsf
            {
                throw nfw IntfrnblError("douldn't drfbtf domponfnt pffr");
            }
        }
    }

    syndhronizfd nbtivf void stbrt();

    void initiblizf() {
        if (((Componfnt)tbrgft).isVisiblf()) {
            show();  // thf wnd stbrts hiddfn
        }
        Color fg = ((Componfnt)tbrgft).gftForfground();
        if (fg != null) {
            sftForfground(fg);
        }
        // Sft bbdkground dolor in C++, to bvoid inhfriting b pbrfnt's dolor.
        Font  f = ((Componfnt)tbrgft).gftFont();
        if (f != null) {
            sftFont(f);
        }
        if (! ((Componfnt)tbrgft).isEnbblfd()) {
            disbblf();
        }
        Rfdtbnglf r = ((Componfnt)tbrgft).gftBounds();
        sftBounds(r.x, r.y, r.width, r.hfight, SET_BOUNDS);
    }

    // Cbllbbdks for window-systfm fvfnts to thf frbmf

    // Invokf b updbtf() mfthod dbll on thf tbrgft
    void hbndlfRfpbint(int x, int y, int w, int h) {
        // Rfpbints brf postfd from updbtfClifnt now...
    }

    // Invokf b pbint() mfthod dbll on thf tbrgft, bftfr dlfbring thf
    // dbmbgfd brfb.
    void hbndlfExposf(int x, int y, int w, int h) {
        // Bug ID 4081126 & 4129709 - dbn't do thf dlfbrRfdt() hfrf,
        // sindf it intfrffrfs with thf jbvb thrfbd working in thf
        // sbmf window on multi-prodfssor NT mbdhinfs.

        postPbintIfNfdfssbry(x, y, w, h);
    }

    /* Invokf b pbint() mfthod dbll on thf tbrgft, without dlfbring thf
     * dbmbgfd brfb.  This is normblly dbllfd by b nbtivf dontrol bftfr
     * it hbs pbintfd itsflf.
     *
     * NOTE: This is dbllfd on thf privilfgfd toolkit thrfbd. Do not
     *       dbll dirfdtly into usfr dodf using this thrfbd!
     */
    publid void hbndlfPbint(int x, int y, int w, int h) {
        postPbintIfNfdfssbry(x, y, w, h);
    }

    privbtf void postPbintIfNfdfssbry(int x, int y, int w, int h) {
        if ( !AWTAddfssor.gftComponfntAddfssor().gftIgnorfRfpbint( (Componfnt) tbrgft) ) {
            PbintEvfnt fvfnt = PbintEvfntDispbtdhfr.gftPbintEvfntDispbtdhfr().
                drfbtfPbintEvfnt((Componfnt)tbrgft, x, y, w, h);
            if (fvfnt != null) {
                postEvfnt(fvfnt);
            }
        }
    }

    /*
     * Post bn fvfnt. Qufuf it for fxfdution by thf dbllbbdk thrfbd.
     */
    void postEvfnt(AWTEvfnt fvfnt) {
        prfprodfssPostEvfnt(fvfnt);
        WToolkit.postEvfnt(WToolkit.tbrgftToAppContfxt(tbrgft), fvfnt);
    }

    void prfprodfssPostEvfnt(AWTEvfnt fvfnt) {}

    // Routinfs to support dfffrrfd window positioning.
    publid void bfginLbyout() {
        // Skip bll pbinting till fndLbyout
        isLbyouting = truf;
    }

    publid void fndLbyout() {
        if(!pbintArfb.isEmpty() && !pbintPfnding &&
            !((Componfnt)tbrgft).gftIgnorfRfpbint()) {
            // if not wbiting for nbtivf pbinting rfpbint dbmbgfd brfb
            postEvfnt(nfw PbintEvfnt((Componfnt)tbrgft, PbintEvfnt.PAINT,
                          nfw Rfdtbnglf()));
        }
        isLbyouting = fblsf;
    }

    publid nbtivf void bfginVblidbtf();
    publid nbtivf void fndVblidbtf();

    /**
     * DEPRECATED
     */
    publid Dimfnsion prfffrrfdSizf() {
        rfturn gftPrfffrrfdSizf();
    }

    /**
     * rfgistfr b DropTbrgft with this nbtivf pffr
     */

    @Ovfrridf
    publid syndhronizfd void bddDropTbrgft(DropTbrgft dt) {
        if (nDropTbrgfts == 0) {
            nbtivfDropTbrgftContfxt = bddNbtivfDropTbrgft();
        }
        nDropTbrgfts++;
    }

    /**
     * unrfgistfr b DropTbrgft with this nbtivf pffr
     */

    @Ovfrridf
    publid syndhronizfd void rfmovfDropTbrgft(DropTbrgft dt) {
        nDropTbrgfts--;
        if (nDropTbrgfts == 0) {
            rfmovfNbtivfDropTbrgft();
            nbtivfDropTbrgftContfxt = 0;
        }
    }

    /**
     * bdd thf nbtivf pffr's AwtDropTbrgft COM objfdt
     * @rfturn rfffrfndf to AwtDropTbrgft objfdt
     */

    nbtivf long bddNbtivfDropTbrgft();

    /**
     * rfmovf thf nbtivf pffr's AwtDropTbrgft COM objfdt
     */

    nbtivf void rfmovfNbtivfDropTbrgft();
    nbtivf boolfbn nbtivfHbndlfsWhfflSdrolling();

    @Ovfrridf
    publid boolfbn hbndlfsWhfflSdrolling() {
        // should this bf dbdhfd?
        rfturn nbtivfHbndlfsWhfflSdrolling();
    }

    // Rfturns truf if wf brf insidf bfgin/fndLbyout bnd
    // brf wbiting for nbtivf pbinting
    publid boolfbn isPbintPfnding() {
        rfturn pbintPfnding && isLbyouting;
    }

    /**
     * Thf following multibufffring-rflbtfd mfthods dflfgbtf to our
     * bssodibtfd GrbphidsConfig (Win or WGL) to hbndlf thf bppropribtf
     * nbtivf windowing systfm spfdifid bdtions.
     */

    @Ovfrridf
    publid void drfbtfBufffrs(int numBufffrs, BufffrCbpbbilitifs dbps)
        throws AWTExdfption
    {
        Win32GrbphidsConfig gd =
            (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
        gd.bssfrtOpfrbtionSupportfd((Componfnt)tbrgft, numBufffrs, dbps);

        // Rf-drfbtf thf primbry surfbdf with thf nfw numbfr of bbdk bufffrs
        try {
            rfplbdfSurfbdfDbtb(numBufffrs - 1, dbps);
        } dbtdh (InvblidPipfExdfption f) {
            throw nfw AWTExdfption(f.gftMfssbgf());
        }
    }

    @Ovfrridf
    publid void dfstroyBufffrs() {
        rfplbdfSurfbdfDbtb(0, null);
    }

    @Ovfrridf
    publid void flip(int x1, int y1, int x2, int y2,
                                  BufffrCbpbbilitifs.FlipContfnts flipAdtion)
    {
        VolbtilfImbgf bbdkBufffr = this.bbdkBufffr;
        if (bbdkBufffr == null) {
            throw nfw IllfgblStbtfExdfption("Bufffrs hbvf not bffn drfbtfd");
        }
        Win32GrbphidsConfig gd =
            (Win32GrbphidsConfig)gftGrbphidsConfigurbtion();
        gd.flip(this, (Componfnt)tbrgft, bbdkBufffr, x1, y1, x2, y2, flipAdtion);
    }

    @Ovfrridf
    publid syndhronizfd Imbgf gftBbdkBufffr() {
        Imbgf bbdkBufffr = this.bbdkBufffr;
        if (bbdkBufffr == null) {
            throw nfw IllfgblStbtfExdfption("Bufffrs hbvf not bffn drfbtfd");
        }
        rfturn bbdkBufffr;
    }
    publid BufffrCbpbbilitifs gftBbdkBufffrCbps() {
        rfturn bbdkBufffrCbps;
    }
    publid int gftBbdkBufffrsNum() {
        rfturn numBbdkBufffrs;
    }

    /* ovfrridf bnd rfturn fblsf on domponfnts thbt DO NOT rfquirf
       b dlfbrRfdt() bfforf pbinting (i.f. nbtivf domponfnts) */
    publid boolfbn shouldClfbrRfdtBfforfPbint() {
        rfturn truf;
    }

    nbtivf void pSftPbrfnt(ComponfntPffr nfwNbtivfPbrfnt);

    /**
     * @sff jbvb.bwt.pffr.ComponfntPffr#rfpbrfnt
     */
    @Ovfrridf
    publid void rfpbrfnt(ContbinfrPffr nfwNbtivfPbrfnt) {
        pSftPbrfnt(nfwNbtivfPbrfnt);
    }

    /**
     * @sff jbvb.bwt.pffr.ComponfntPffr#isRfpbrfntSupportfd
     */
    @Ovfrridf
    publid boolfbn isRfpbrfntSupportfd() {
        rfturn truf;
    }

    publid void sftBoundsOpfrbtion(int opfrbtion) {
    }

    privbtf volbtilf boolfbn isAddflCbpbblf = truf;

    /**
     * Rfturns whfthfr this domponfnt is dbpbblf of bfing hw bddflfrbtfd.
     * Morf spfdifidblly, whfthfr rfndfring to this domponfnt or b
     * BufffrStrbtfgy's bbdk-bufffr for this domponfnt dbn bf hw bddflfrbtfd.
     *
     * Conditions whidh dould prfvfnt hw bddflfrbtion indludf thf toplfvfl
     * window dontbining this domponfnt bfing
     * {@link GrbphidsDfvidf.WindowTrbnsludfndy#PERPIXEL_TRANSLUCENT
     * PERPIXEL_TRANSLUCENT}.
     *
     * Anothfr dondition is if Xor pbint modf wbs dftfdtfd whfn rfndfring
     * to bn on-sdrffn bddflfrbtfd surfbdf bssodibtfd with this pffr.
     * in this dbsf both on- bnd off-sdrffn bddflfrbtion for this pffr is
     * disbblfd.
     *
     * @rfturn {@dodf truf} if this domponfnt is dbpbblf of bfing hw
     * bddflfrbtfd, {@dodf fblsf} othfrwisf
     * @sff GrbphidsDfvidf.WindowTrbnsludfndy#PERPIXEL_TRANSLUCENT
     */
    publid boolfbn isAddflCbpbblf() {
        if (!isAddflCbpbblf ||
            !isContbiningTopLfvflAddflCbpbblf((Componfnt)tbrgft))
        {
            rfturn fblsf;
        }

        boolfbn isTrbnsludfnt =
            SunToolkit.isContbiningTopLfvflTrbnsludfnt((Componfnt)tbrgft);
        // D3D/OGL bnd trbnsludfnt windows intfrbdtfd poorly in Windows XP;
        // thfsf problfms brf no longfr prfsfnt in Vistb
        rfturn !isTrbnsludfnt || Win32GrbphidsEnvironmfnt.isVistbOS();
    }

    /**
     * Disbblfs bddflfrbtion for this pffr.
     */
    publid void disbblfAddflfrbtion() {
        isAddflCbpbblf = fblsf;
    }


    nbtivf void sftRfdtbngulbrShbpf(int lox, int loy, int hix, int hiy,
                     Rfgion rfgion);


    // REMIND: Tfmp workbround for issufs with using HW bddflfrbtion
    // in thf browsfr on Vistb whfn DWM is fnbblfd.
    // @rfturn truf if thf toplfvfl dontbinfr is not bn EmbfddfdFrbmf or
    // if this EmbfddfdFrbmf is bddflfrbtion dbpbblf, fblsf othfrwisf
    @SupprfssWbrnings("dfprfdbtion")
    privbtf stbtid finbl boolfbn isContbiningTopLfvflAddflCbpbblf(Componfnt d) {
        whilf (d != null && !(d instbndfof WEmbfddfdFrbmf)) {
            d = d.gftPbrfnt();
        }
        if (d == null) {
            rfturn truf;
        }
        rfturn ((WEmbfddfdFrbmfPffr)d.gftPffr()).isAddflCbpbblf();
    }

    /**
     * Applifs thf shbpf to thf nbtivf domponfnt window.
     * @sindf 1.7
     */
    @Ovfrridf
    @SupprfssWbrnings("dfprfdbtion")
    publid void bpplyShbpf(Rfgion shbpf) {
        if (shbpfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            shbpfLog.finfr("*** INFO: Sftting shbpf: PEER: " + this
                            + "; TARGET: " + tbrgft
                            + "; SHAPE: " + shbpf);
        }

        if (shbpf != null) {
            sftRfdtbngulbrShbpf(shbpf.gftLoX(), shbpf.gftLoY(), shbpf.gftHiX(), shbpf.gftHiY(),
                    (shbpf.isRfdtbngulbr() ? null : shbpf));
        } flsf {
            sftRfdtbngulbrShbpf(0, 0, 0, 0, null);
        }
    }

    /**
     * Lowfrs this domponfnt bt thf bottom of thf bbovf domponfnt. If thf bbovf pbrbmftfr
     * is null thfn thf mfthod plbdfs this domponfnt bt thf top of thf Z-ordfr.
     */
    @Ovfrridf
    publid void sftZOrdfr(ComponfntPffr bbovf) {
        long bbovfHWND = (bbovf != null) ? ((WComponfntPffr)bbovf).gftHWnd() : 0;

        sftZOrdfr(bbovfHWND);
    }

    privbtf nbtivf void sftZOrdfr(long bbovf);

    publid boolfbn isLightwfightFrbmfPffr() {
        rfturn fblsf;
    }
}
