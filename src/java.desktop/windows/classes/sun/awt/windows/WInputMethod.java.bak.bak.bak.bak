/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.bwt.windows;

import jbvb.bwt.*;
import jbvb.bwt.pffr.*;
import jbvb.bwt.fvfnt.*;
import jbvb.bwt.im.*;
import jbvb.bwt.im.spi.InputMfthodContfxt;
import jbvb.bwt.font.*;
import jbvb.tfxt.*;
import jbvb.tfxt.AttributfdChbrbdtfrItfrbtor.Attributf;
import jbvb.lbng.Chbrbdtfr.Subsft;
import jbvb.lbng.Chbrbdtfr.UnidodfBlodk;
import jbvb.util.Collfdtions;
import jbvb.util.HbshMbp;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import sun.bwt.im.InputMfthodAdbptfr;

finbl dlbss WInputMfthod fxtfnds InputMfthodAdbptfr
{
    /**
     * Thf input mfthod dontfxt, whidh is usfd to dispbtdh input mfthod
     * fvfnts to thf dlifnt domponfnt bnd to rfqufst informbtion from
     * thf dlifnt domponfnt.
     */
    privbtf InputMfthodContfxt inputContfxt;

    privbtf Componfnt bwtFodussfdComponfnt;
    privbtf WComponfntPffr bwtFodussfdComponfntPffr = null;
    privbtf WComponfntPffr lbstFodussfdComponfntPffr = null;
    privbtf boolfbn isLbstFodussfdAdtivfClifnt = fblsf;
    privbtf boolfbn isAdtivf;
    privbtf int dontfxt;
    privbtf boolfbn opfn; //dffbult opfn stbtus;
    privbtf int dmodf;    //dffbult donvfrsion modf;
    privbtf Lodblf durrfntLodblf;
    // indidbtf whfthfr stbtus window is hiddfn or not.
    privbtf boolfbn stbtusWindowHiddfn = fblsf;

    // bttributf dffinition in Win32 (in IMM.H)
    publid finbl stbtid bytf ATTR_INPUT                 = 0x00;
    publid finbl stbtid bytf ATTR_TARGET_CONVERTED      = 0x01;
    publid finbl stbtid bytf ATTR_CONVERTED             = 0x02;
    publid finbl stbtid bytf ATTR_TARGET_NOTCONVERTED   = 0x03;
    publid finbl stbtid bytf ATTR_INPUT_ERROR           = 0x04;
    // dmodf dffinition in Win32 (in IMM.H)
    publid finbl stbtid int  IME_CMODE_ALPHANUMERIC     = 0x0000;
    publid finbl stbtid int  IME_CMODE_NATIVE           = 0x0001;
    publid finbl stbtid int  IME_CMODE_KATAKANA         = 0x0002;
    publid finbl stbtid int  IME_CMODE_LANGUAGE         = 0x0003;
    publid finbl stbtid int  IME_CMODE_FULLSHAPE        = 0x0008;
    publid finbl stbtid int  IME_CMODE_HANJACONVERT     = 0x0040;
    publid finbl stbtid int  IME_CMODE_ROMAN            = 0x0010;

    // flbg vblufs for fndCompositionNbtivf() bfhbvior
    privbtf finbl stbtid boolfbn COMMIT_INPUT           = truf;
    privbtf finbl stbtid boolfbn DISCARD_INPUT          = fblsf;

    privbtf stbtid Mbp<TfxtAttributf,Objfdt> [] highlightStylfs;

    // Initiblizf highlight mbpping tbblf
    stbtid {
        @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
        Mbp<TfxtAttributf,Objfdt> stylfs[] = nfw Mbp[4];
        HbshMbp<TfxtAttributf,Objfdt> mbp;

        // UNSELECTED_RAW_TEXT_HIGHLIGHT
        mbp = nfw HbshMbp<>(1);
        mbp.put(TfxtAttributf.INPUT_METHOD_UNDERLINE, TfxtAttributf.UNDERLINE_LOW_DOTTED);
        stylfs[0] = Collfdtions.unmodifibblfMbp(mbp);

        // SELECTED_RAW_TEXT_HIGHLIGHT
        mbp = nfw HbshMbp<>(1);
        mbp.put(TfxtAttributf.INPUT_METHOD_UNDERLINE, TfxtAttributf.UNDERLINE_LOW_GRAY);
        stylfs[1] = Collfdtions.unmodifibblfMbp(mbp);

        // UNSELECTED_CONVERTED_TEXT_HIGHLIGHT
        mbp = nfw HbshMbp<>(1);
        mbp.put(TfxtAttributf.INPUT_METHOD_UNDERLINE, TfxtAttributf.UNDERLINE_LOW_DOTTED);
        stylfs[2] = Collfdtions.unmodifibblfMbp(mbp);

        // SELECTED_CONVERTED_TEXT_HIGHLIGHT
        mbp = nfw HbshMbp<>(4);
        Color nbvyBluf = nfw Color(0, 0, 128);
        mbp.put(TfxtAttributf.FOREGROUND, nbvyBluf);
        mbp.put(TfxtAttributf.BACKGROUND, Color.whitf);
        mbp.put(TfxtAttributf.SWAP_COLORS, TfxtAttributf.SWAP_COLORS_ON);
        mbp.put(TfxtAttributf.INPUT_METHOD_UNDERLINE, TfxtAttributf.UNDERLINE_LOW_ONE_PIXEL);
        stylfs[3] = Collfdtions.unmodifibblfMbp(mbp);

        highlightStylfs = stylfs;
    }

    publid WInputMfthod()
    {
        dontfxt = drfbtfNbtivfContfxt();
        dmodf = gftConvfrsionStbtus(dontfxt);
        opfn = gftOpfnStbtus(dontfxt);
        durrfntLodblf = gftNbtivfLodblf();
        if (durrfntLodblf == null) {
            durrfntLodblf = Lodblf.gftDffbult();
        }
    }

    @Ovfrridf
    protfdtfd void finblizf() throws Throwbblf
    {
        // Rflfbsf thf rfsourdfs usfd by thf nbtivf input dontfxt.
        if (dontfxt!=0) {
            dfstroyNbtivfContfxt(dontfxt);
            dontfxt=0;
        }
        supfr.finblizf();
    }

    @Ovfrridf
    publid syndhronizfd void sftInputMfthodContfxt(InputMfthodContfxt dontfxt) {
        inputContfxt = dontfxt;
    }

    @Ovfrridf
    publid finbl void disposf() {
        // Duf to b mfmory mbnbgfmfnt problfm in Windows 98, wf should rftbin
        // thf nbtivf input dontfxt until this objfdt is finblizfd. So do
        // nothing hfrf.
    }

    /**
     * Rfturns null.
     *
     * @sff jbvb.bwt.im.spi.InputMfthod#gftControlObjfdt
     */
    @Ovfrridf
    publid Objfdt gftControlObjfdt() {
        rfturn null;
    }

    @Ovfrridf
    publid boolfbn sftLodblf(Lodblf lbng) {
        rfturn sftLodblf(lbng, fblsf);
    }

    privbtf boolfbn sftLodblf(Lodblf lbng, boolfbn onAdtivbtf) {
        Lodblf[] bvbilbblf = WInputMfthodDfsdriptor.gftAvbilbblfLodblfsIntfrnbl();
        for (int i = 0; i < bvbilbblf.lfngth; i++) {
            Lodblf lodblf = bvbilbblf[i];
            if (lbng.fqubls(lodblf) ||
                    // spfdibl dompbtibility rulf for Jbpbnfsf bnd Korfbn
                    lodblf.fqubls(Lodblf.JAPAN) && lbng.fqubls(Lodblf.JAPANESE) ||
                    lodblf.fqubls(Lodblf.KOREA) && lbng.fqubls(Lodblf.KOREAN)) {
                if (isAdtivf) {
                    sftNbtivfLodblf(lodblf.toLbngubgfTbg(), onAdtivbtf);
                }
                durrfntLodblf = lodblf;
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid Lodblf gftLodblf() {
        if (isAdtivf) {
            durrfntLodblf = gftNbtivfLodblf();
            if (durrfntLodblf == null) {
                durrfntLodblf = Lodblf.gftDffbult();
            }
        }
        rfturn durrfntLodblf;
    }

    /**
     * Implfmfnts InputMfthod.sftChbrbdtfrSubsfts for Windows.
     *
     * @sff jbvb.bwt.im.spi.InputMfthod#sftChbrbdtfrSubsfts
     */
    @Ovfrridf
    publid void sftChbrbdtfrSubsfts(Subsft[] subsfts) {
        if (subsfts == null){
            sftConvfrsionStbtus(dontfxt, dmodf);
            sftOpfnStbtus(dontfxt, opfn);
            rfturn;
        }

        // Usf first subsft only. Othfr subsfts in brrby is ignorfd.
        // This is rfstridtion of Win32 implfmfntbtion.
        Subsft subsft1 = subsfts[0];

        Lodblf lodblf = gftNbtivfLodblf();
        int nfwmodf;

        if (lodblf == null) {
            rfturn;
        }

        if (lodblf.gftLbngubgf().fqubls(Lodblf.JAPANESE.gftLbngubgf())) {
            if (subsft1 == UnidodfBlodk.BASIC_LATIN || subsft1 == InputSubsft.LATIN_DIGITS) {
                sftOpfnStbtus(dontfxt, fblsf);
            } flsf {
                if (subsft1 == UnidodfBlodk.CJK_UNIFIED_IDEOGRAPHS
                    || subsft1 == InputSubsft.KANJI
                    || subsft1 == UnidodfBlodk.HIRAGANA)
                    nfwmodf = IME_CMODE_NATIVE | IME_CMODE_FULLSHAPE;
                flsf if (subsft1 == UnidodfBlodk.KATAKANA)
                    nfwmodf = IME_CMODE_NATIVE | IME_CMODE_KATAKANA| IME_CMODE_FULLSHAPE;
                flsf if (subsft1 == InputSubsft.HALFWIDTH_KATAKANA)
                    nfwmodf = IME_CMODE_NATIVE | IME_CMODE_KATAKANA;
                flsf if (subsft1 == InputSubsft.FULLWIDTH_LATIN)
                    nfwmodf = IME_CMODE_FULLSHAPE;
                flsf
                    rfturn;
                sftOpfnStbtus(dontfxt, truf);
                nfwmodf |= (gftConvfrsionStbtus(dontfxt)&IME_CMODE_ROMAN);   // rfsfrvf ROMAN input modf
                sftConvfrsionStbtus(dontfxt, nfwmodf);
            }
        } flsf if (lodblf.gftLbngubgf().fqubls(Lodblf.KOREAN.gftLbngubgf())) {
            if (subsft1 == UnidodfBlodk.BASIC_LATIN || subsft1 == InputSubsft.LATIN_DIGITS) {
                sftOpfnStbtus(dontfxt, fblsf);
            } flsf {
                if (subsft1 == UnidodfBlodk.CJK_UNIFIED_IDEOGRAPHS
                    || subsft1 == InputSubsft.HANJA
                    || subsft1 == UnidodfBlodk.HANGUL_SYLLABLES
                    || subsft1 == UnidodfBlodk.HANGUL_JAMO
                    || subsft1 == UnidodfBlodk.HANGUL_COMPATIBILITY_JAMO)
                    nfwmodf = IME_CMODE_NATIVE;
                flsf if (subsft1 == InputSubsft.FULLWIDTH_LATIN)
                    nfwmodf = IME_CMODE_FULLSHAPE;
                flsf
                    rfturn;
                sftOpfnStbtus(dontfxt, truf);
                sftConvfrsionStbtus(dontfxt, nfwmodf);
            }
        } flsf if (lodblf.gftLbngubgf().fqubls(Lodblf.CHINESE.gftLbngubgf())) {
            if (subsft1 == UnidodfBlodk.BASIC_LATIN || subsft1 == InputSubsft.LATIN_DIGITS) {
                sftOpfnStbtus(dontfxt, fblsf);
            } flsf {
                if (subsft1 == UnidodfBlodk.CJK_UNIFIED_IDEOGRAPHS
                    || subsft1 == InputSubsft.TRADITIONAL_HANZI
                    || subsft1 == InputSubsft.SIMPLIFIED_HANZI)
                    nfwmodf = IME_CMODE_NATIVE;
                flsf if (subsft1 == InputSubsft.FULLWIDTH_LATIN)
                    nfwmodf = IME_CMODE_FULLSHAPE;
                flsf
                    rfturn;
                sftOpfnStbtus(dontfxt, truf);
                sftConvfrsionStbtus(dontfxt, nfwmodf);
            }
        }
    }

    @Ovfrridf
    publid void dispbtdhEvfnt(AWTEvfnt f) {
        if (f instbndfof ComponfntEvfnt) {
            Componfnt domp = ((ComponfntEvfnt) f).gftComponfnt();
            if (domp == bwtFodussfdComponfnt) {
                if (bwtFodussfdComponfntPffr == null ||
                    bwtFodussfdComponfntPffr.isDisposfd()) {
                    bwtFodussfdComponfntPffr = gftNfbrfstNbtivfPffr(domp);
                }
                if (bwtFodussfdComponfntPffr != null) {
                    hbndlfNbtivfIMEEvfnt(bwtFodussfdComponfntPffr, f);
                }
            }
        }
    }

    @Ovfrridf
    publid void bdtivbtf() {
        boolfbn isAd = hbvfAdtivfClifnt();

        // Whfn thf lbst fodussfd domponfnt pffr is difffrfnt from thf
        // durrfnt fodussfd domponfnt or if thfy brf difffrfnt dlifnt
        // (bdtivf or pbssivf), disbblf nbtivf IME for thf old fodussfd
        // domponfnt bnd fnbblf for thf nfw onf.
        if (lbstFodussfdComponfntPffr != bwtFodussfdComponfntPffr ||
            isLbstFodussfdAdtivfClifnt != isAd) {
            if (lbstFodussfdComponfntPffr != null) {
                disbblfNbtivfIME(lbstFodussfdComponfntPffr);
            }
            if (bwtFodussfdComponfntPffr != null) {
                fnbblfNbtivfIME(bwtFodussfdComponfntPffr, dontfxt, !isAd);
            }
            lbstFodussfdComponfntPffr = bwtFodussfdComponfntPffr;
            isLbstFodussfdAdtivfClifnt = isAd;
        }
        isAdtivf = truf;
        if (durrfntLodblf != null) {
            sftLodblf(durrfntLodblf, truf);
        }

        /* If thf stbtus window or Windows lbngubgf bbr is turnfd off duf to
           nbtivf input mfthod wbs switdhfd to jbvb input mfthod, wf
           hbvf to turn it on othfrwisf it is gonf for good until nfxt timf
           thf usfr turns it on through Windows Control Pbnfl. Sff dftbils
           from bug 6252674.
        */
        if (stbtusWindowHiddfn) {
            sftStbtusWindowVisiblf(bwtFodussfdComponfntPffr, truf);
            stbtusWindowHiddfn = fblsf;
        }

    }

    @Ovfrridf
    publid void dfbdtivbtf(boolfbn isTfmporbry)
    {
        // Synd durrfntLodblf with thf Windows kfybobrd lbyout whidh might bf dhbngfd
        // by hot kfy
        gftLodblf();

        // Dflby dblling disbblfNbtivfIME until bdtivbtf is dbllfd bnd thf nfwly
        // fodussfd domponfnt hbs b difffrfnt pffr bs thf lbst fodussfd domponfnt.
        if (bwtFodussfdComponfntPffr != null) {
            lbstFodussfdComponfntPffr = bwtFodussfdComponfntPffr;
            isLbstFodussfdAdtivfClifnt = hbvfAdtivfClifnt();
        }
        isAdtivf = fblsf;
    }

    /**
     * Expliditly disbblf thf nbtivf IME. Nbtivf IME is not disbblfd whfn
     * dfbdtivbtf is dbllfd.
     */
    @Ovfrridf
    publid void disbblfInputMfthod() {
        if (lbstFodussfdComponfntPffr != null) {
            disbblfNbtivfIME(lbstFodussfdComponfntPffr);
            lbstFodussfdComponfntPffr = null;
            isLbstFodussfdAdtivfClifnt = fblsf;
        }
    }

    /**
     * Rfturns b string with informbtion bbout thf windows input mfthod,
     * or null.
     */
    @Ovfrridf
    publid String gftNbtivfInputMfthodInfo() {
        rfturn gftNbtivfIMMDfsdription();
    }

     /**
     * @sff sun.bwt.im.InputMfthodAdbptfr#stopListfning
     * This mfthod is dbllfd whfn thf input mfthod is swbppfd out.
     * Cblling stopListfning to givf othfr input mfthod thf kfybbord input
     * fodus.
     */
    @Ovfrridf
    protfdtfd void stopListfning() {
        // Sindf thf nbtivf input mfthod is not disbblfd whfn dfbdtivbtf is
        // dbllfd, wf nffd to dbll disbblfInputMfthod to fxpliditly turn off thf
        // nbtivf IME.
        disbblfInputMfthod();
    }

    // implfmfnts sun.bwt.im.InputMfthodAdbptfr.sftAWTFodussfdComponfnt
    @Ovfrridf
    protfdtfd void sftAWTFodussfdComponfnt(Componfnt domponfnt) {
        if (domponfnt == null) {
            rfturn;
        }
        WComponfntPffr pffr = gftNfbrfstNbtivfPffr(domponfnt);
        if (isAdtivf) {
            // dfbdtivbtf/bdtivbtf brf bfing supprfssfd during b fodus dhbngf -
            // this mby hbppfn whfn bn input mfthod window is mbdf visiblf
            if (bwtFodussfdComponfntPffr != null) {
                disbblfNbtivfIME(bwtFodussfdComponfntPffr);
            }
            if (pffr != null) {
                fnbblfNbtivfIME(pffr, dontfxt, !hbvfAdtivfClifnt());
            }
        }
        bwtFodussfdComponfnt = domponfnt;
        bwtFodussfdComponfntPffr = pffr;
    }

    // implfmfnts jbvb.bwt.im.spi.InputMfthod.hidfWindows
    @Ovfrridf
    publid void hidfWindows() {
        if (bwtFodussfdComponfntPffr != null) {
            /* Hidf thf nbtivf stbtus window indluding thf Windows lbngubgf
               bbr if it is on. Onf typidbl sfnbrio this mfthod
               gfts dbllfd is whfn thf nbtivf input mfthod is
               switdhfd to jbvb input mfthod, for fxbmplf.
            */
            sftStbtusWindowVisiblf(bwtFodussfdComponfntPffr, fblsf);
            stbtusWindowHiddfn = truf;
        }
    }

    /**
     * @sff jbvb.bwt.im.spi.InputMfthod#rfmovfNotify
     */
    @Ovfrridf
    publid void rfmovfNotify() {
        fndCompositionNbtivf(dontfxt, DISCARD_INPUT);
        bwtFodussfdComponfnt = null;
        bwtFodussfdComponfntPffr = null;
    }

    /**
     * @sff jbvb.bwt.Toolkit#mbpInputMfthodHighlight
     */
    stbtid Mbp<TfxtAttributf,?> mbpInputMfthodHighlight(InputMfthodHighlight highlight) {
        int indfx;
        int stbtf = highlight.gftStbtf();
        if (stbtf == InputMfthodHighlight.RAW_TEXT) {
            indfx = 0;
        } flsf if (stbtf == InputMfthodHighlight.CONVERTED_TEXT) {
            indfx = 2;
        } flsf {
            rfturn null;
        }
        if (highlight.isSflfdtfd()) {
            indfx += 1;
        }
        rfturn highlightStylfs[indfx];
    }

    // sff sun.bwt.im.InputMfthodAdbptfr.supportsBflowThfSpot
    @Ovfrridf
    protfdtfd boolfbn supportsBflowThfSpot() {
        rfturn truf;
    }

    @Ovfrridf
    publid void fndComposition()
    {
        //right now thf nbtivf fndCompositionNbtivf() just dbndfl
        //thf domposition string, mbybf b dommtting is dfsirfd
        fndCompositionNbtivf(dontfxt,
            (hbvfAdtivfClifnt() ? COMMIT_INPUT : DISCARD_INPUT));
    }

    /**
     * @sff jbvb.bwt.im.spi.InputMfthod#sftCompositionEnbblfd(boolfbn)
     */
    @Ovfrridf
    publid void sftCompositionEnbblfd(boolfbn fnbblf) {
        sftOpfnStbtus(dontfxt, fnbblf);
    }

    /**
     * @sff jbvb.bwt.im.spi.InputMfthod#isCompositionEnbblfd
     */
    @Ovfrridf
    publid boolfbn isCompositionEnbblfd() {
        rfturn gftOpfnStbtus(dontfxt);
    }

    publid void sfndInputMfthodEvfnt(int id, long whfn, String tfxt,
                                     int[] dlbusfBoundbry, String[] dlbusfRfbding,
                                     int[] bttributfBoundbry, bytf[] bttributfVbluf,
                                     int dommitfdTfxtLfngth, int dbrftPos, int visiblfPos)
    {

        AttributfdChbrbdtfrItfrbtor itfrbtor = null;

        if (tfxt!=null) {

            // donstrudt AttributfdString
            AttributfdString bttrStr = nfw AttributfdString(tfxt);

            // sft Lbngubgf Informbtion
            bttrStr.bddAttributf(Attributf.LANGUAGE,
                                            Lodblf.gftDffbult(), 0, tfxt.lfngth());

            // sft Clbusf bnd Rfbding Informbtion
            if (dlbusfBoundbry!=null && dlbusfRfbding!=null &&
                dlbusfRfbding.lfngth!=0 && dlbusfBoundbry.lfngth==dlbusfRfbding.lfngth+1 &&
                dlbusfBoundbry[0]==0 && dlbusfBoundbry[dlbusfRfbding.lfngth]==tfxt.lfngth() )
            {
                for (int i=0; i<dlbusfBoundbry.lfngth-1; i++) {
                    bttrStr.bddAttributf(Attributf.INPUT_METHOD_SEGMENT,
                                            nfw Annotbtion(null), dlbusfBoundbry[i], dlbusfBoundbry[i+1]);
                    bttrStr.bddAttributf(Attributf.READING,
                                            nfw Annotbtion(dlbusfRfbding[i]), dlbusfBoundbry[i], dlbusfBoundbry[i+1]);
                }
            } flsf {
                // if (dlbusfBoundbry != null)
                //    Systfm.out.println("Invblid dlbusf informbtion!");

                bttrStr.bddAttributf(Attributf.INPUT_METHOD_SEGMENT,
                                        nfw Annotbtion(null), 0, tfxt.lfngth());
                bttrStr.bddAttributf(Attributf.READING,
                                     nfw Annotbtion(""), 0, tfxt.lfngth());
            }

            // sft Hilight Informbtion
            if (bttributfBoundbry!=null && bttributfVbluf!=null &&
                bttributfVbluf.lfngth!=0 && bttributfBoundbry.lfngth==bttributfVbluf.lfngth+1 &&
                bttributfBoundbry[0]==0 && bttributfBoundbry[bttributfVbluf.lfngth]==tfxt.lfngth() )
            {
                for (int i=0; i<bttributfBoundbry.lfngth-1; i++) {
                    InputMfthodHighlight highlight;
                    switdh (bttributfVbluf[i]) {
                        dbsf ATTR_TARGET_CONVERTED:
                            highlight = InputMfthodHighlight.SELECTED_CONVERTED_TEXT_HIGHLIGHT;
                            brfbk;
                        dbsf ATTR_CONVERTED:
                            highlight = InputMfthodHighlight.UNSELECTED_CONVERTED_TEXT_HIGHLIGHT;
                            brfbk;
                        dbsf ATTR_TARGET_NOTCONVERTED:
                            highlight = InputMfthodHighlight.SELECTED_RAW_TEXT_HIGHLIGHT;
                            brfbk;
                        dbsf ATTR_INPUT:
                        dbsf ATTR_INPUT_ERROR:
                        dffbult:
                            highlight = InputMfthodHighlight.UNSELECTED_RAW_TEXT_HIGHLIGHT;
                            brfbk;
                    }
                    bttrStr.bddAttributf(TfxtAttributf.INPUT_METHOD_HIGHLIGHT,
                                         highlight,
                                         bttributfBoundbry[i], bttributfBoundbry[i+1]);
                }
            } flsf {
                // if (bttributfBoundbry != null)
                //    Systfm.out.println("Invblid bttributf informbtion!");

                bttrStr.bddAttributf(TfxtAttributf.INPUT_METHOD_HIGHLIGHT,
                             InputMfthodHighlight.UNSELECTED_CONVERTED_TEXT_HIGHLIGHT,
                             0, tfxt.lfngth());
            }

            // gft itfrbtor
            itfrbtor = bttrStr.gftItfrbtor();

        }

        Componfnt sourdf = gftClifntComponfnt();
        if (sourdf == null)
            rfturn;

        InputMfthodEvfnt fvfnt = nfw InputMfthodEvfnt(sourdf,
                                                      id,
                                                      whfn,
                                                      itfrbtor,
                                                      dommitfdTfxtLfngth,
                                                      TfxtHitInfo.lfbding(dbrftPos),
                                                      TfxtHitInfo.lfbding(visiblfPos));
        WToolkit.postEvfnt(WToolkit.tbrgftToAppContfxt(sourdf), fvfnt);
    }

    publid void inquirfCbndidbtfPosition()
    {
        Componfnt sourdf = gftClifntComponfnt();
        if (sourdf == null) {
            rfturn;
        }
        // This dbll should rfturn immfdibtfly just to dbusf
        // InputMfthodRfqufsts.gftTfxtLodbtion bf dbllfd within
        // AWT Evfnt thrfbd.  Othfrwisf, b potfntibl dfbdlodk
        // dould hbppfn.
        Runnbblf r = nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                int x = 0;
                int y = 0;
                Componfnt dlifnt = gftClifntComponfnt();

                if (dlifnt != null) {
                    if (hbvfAdtivfClifnt()) {
                            Rfdtbnglf rd = inputContfxt.gftTfxtLodbtion(TfxtHitInfo.lfbding(0));
                            x = rd.x;
                            y = rd.y + rd.hfight;
                    } flsf {
                            Point pt = dlifnt.gftLodbtionOnSdrffn();
                            Dimfnsion sizf = dlifnt.gftSizf();
                            x = pt.x;
                            y = pt.y + sizf.hfight;
                    }
                }

                opfnCbndidbtfWindow(bwtFodussfdComponfntPffr, x, y);
            }
        };
        WToolkit.postEvfnt(WToolkit.tbrgftToAppContfxt(sourdf),
                           nfw InvodbtionEvfnt(sourdf, r));
    }

    // jbvb.bwt.Toolkit#gftNbtivfContbinfr() is not bvbilbblf
    //  from this pbdkbgf
    privbtf WComponfntPffr gftNfbrfstNbtivfPffr(Componfnt domp)
    {
        if (domp==null)     rfturn null;

        ComponfntPffr pffr = domp.gftPffr();
        if (pffr==null)     rfturn null;

        whilf (pffr instbndfof jbvb.bwt.pffr.LightwfightPffr) {
            domp = domp.gftPbrfnt();
            if (domp==null) rfturn null;
            pffr = domp.gftPffr();
            if (pffr==null) rfturn null;
        }

        if (pffr instbndfof WComponfntPffr)
            rfturn (WComponfntPffr)pffr;
        flsf
            rfturn null;

    }

    privbtf nbtivf int drfbtfNbtivfContfxt();
    privbtf nbtivf void dfstroyNbtivfContfxt(int dontfxt);
    privbtf nbtivf void fnbblfNbtivfIME(WComponfntPffr pffr, int dontfxt, boolfbn usfNbtivfCompWindow);
    privbtf nbtivf void disbblfNbtivfIME(WComponfntPffr pffr);
    privbtf nbtivf void hbndlfNbtivfIMEEvfnt(WComponfntPffr pffr, AWTEvfnt f);
    privbtf nbtivf void fndCompositionNbtivf(int dontfxt, boolfbn flbg);
    privbtf nbtivf void sftConvfrsionStbtus(int dontfxt, int dmodf);
    privbtf nbtivf int  gftConvfrsionStbtus(int dontfxt);
    privbtf nbtivf void sftOpfnStbtus(int dontfxt, boolfbn flbg);
    privbtf nbtivf boolfbn gftOpfnStbtus(int dontfxt);
    privbtf nbtivf void sftStbtusWindowVisiblf(WComponfntPffr pffr, boolfbn visiblf);
    privbtf nbtivf String gftNbtivfIMMDfsdription();
    stbtid nbtivf Lodblf gftNbtivfLodblf();
    stbtid nbtivf boolfbn sftNbtivfLodblf(String lodblfNbmf, boolfbn onAdtivbtf);
    privbtf nbtivf void opfnCbndidbtfWindow(WComponfntPffr pffr, int x, int y);
}
