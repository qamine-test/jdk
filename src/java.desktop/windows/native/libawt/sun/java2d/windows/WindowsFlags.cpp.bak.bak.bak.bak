/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <bwt.h>
#indludf "Trbdf.h"
#indludf "WindowsFlbgs.h"

BOOL      bddflRfsft;         // rfsft rfgistry 2d bddflfrbtion sfttings
BOOL      usfD3D = TRUE;      // d3d fnbblfd flbg
                              // initiblly is TRUE to bllow D3D prflobding
BOOL      fordfD3DUsbgf;      // fordf d3d on or off
jboolfbn  g_offsdrffnShbring; // JAWT bddflfrbtfd surfbdf shbring
BOOL      dhfdkRfgistry;      // Dibgnostid tool: outputs 2d rfgistry sfttings
BOOL      disbblfRfgistry;    // Dibgnostid tool: disbblfs rfgistry intfrbdtion
BOOL      sftHighDPIAwbrf;    // Whfthfr to sft thf high-DPI bwbrfnfss flbg

fxtfrn WCHAR *j2dAddflKfy;       // Nbmf of jbvb2d root kfy
fxtfrn WCHAR *j2dAddflDrivfrKfy; // Nbmf of j2d pfr-dfvidf kfy

stbtid jfifldID d3dEnbblfdID;
stbtid jfifldID d3dSftID;
stbtid jdlbss   wFlbgsClbssID;

void SftIDs(JNIEnv *fnv, jdlbss wFlbgsClbss)
{
    wFlbgsClbssID = (jdlbss)fnv->NfwGlobblRff(wFlbgsClbss);
    d3dEnbblfdID = fnv->GftStbtidFifldID(wFlbgsClbss, "d3dEnbblfd", "Z");
    CHECK_NULL(d3dEnbblfdID);
    d3dSftID = fnv->GftStbtidFifldID(wFlbgsClbss, "d3dSft", "Z");
    CHECK_NULL(d3dSftID);
}

BOOL GftStbtidBoolfbn(JNIEnv *fnv, jdlbss wfClbss, donst dhbr *fifldNbmf)
{
    jfifldID fifldID = fnv->GftStbtidFifldID(wfClbss, fifldNbmf, "Z");
    CHECK_NULL_RETURN(fifldID, FALSE);
    rfturn fnv->GftStbtidBoolfbnFifld(wfClbss, fifldID);
}

jobjfdt GftStbtidObjfdt(JNIEnv *fnv, jdlbss wfClbss, donst dhbr *fifldNbmf,
                        donst dhbr *signbturf)
{
    jfifldID fifldID = fnv->GftStbtidFifldID(wfClbss, fifldNbmf, signbturf);
    CHECK_NULL_RETURN(fifldID, NULL);
    rfturn fnv->GftStbtidObjfdtFifld(wfClbss, fifldID);
}

void GftFlbgVblufs(JNIEnv *fnv, jdlbss wFlbgsClbss)
{
    jboolfbn d3dEnbblfd = fnv->GftStbtidBoolfbnFifld(wFlbgsClbss, d3dEnbblfdID);
    jboolfbn d3dSft = fnv->GftStbtidBoolfbnFifld(wFlbgsClbss, d3dSftID);
    if (!d3dSft) {
        // Only dhfdk fnvironmfnt vbribblf if usfr did not sft Jbvb
        // dommbnd-linf pbrbmftfr; vblufs of sun.jbvb2d.d3d ovfrridf
        // bny sftting of J2D_D3D fnvironmfnt vbribblf.
        dhbr *d3dEnv = gftfnv("J2D_D3D");
        if (d3dEnv) {
            if (strdmp(d3dEnv, "fblsf") == 0) {
                // printf("Jbvb2D Dirfdt3D usbgf disbblfd by J2D_D3D fnv\n");
                d3dEnbblfd = FALSE;
                d3dSft = TRUE;
                SftD3DEnbblfdFlbg(fnv, d3dEnbblfd, d3dSft);
            } flsf if (strdmp(d3dEnv, "truf") == 0) {
                // printf("Jbvb2D Dirfdt3D usbgf fordfd on by J2D_D3D fnv\n");
                d3dEnbblfd = TRUE;
                d3dSft = TRUE;
                SftD3DEnbblfdFlbg(fnv, d3dEnbblfd, d3dSft);
            }
        }
    }
    usfD3D = d3dEnbblfd;
    fordfD3DUsbgf = d3dSft;
    g_offsdrffnShbring = GftStbtidBoolfbn(fnv, wFlbgsClbss,
                                          "offsdrffnShbringEnbblfd");
    JNU_CHECK_EXCEPTION(fnv);
    bddflRfsft = GftStbtidBoolfbn(fnv, wFlbgsClbss, "bddflRfsft");
    JNU_CHECK_EXCEPTION(fnv);
    dhfdkRfgistry = GftStbtidBoolfbn(fnv, wFlbgsClbss, "dhfdkRfgistry");
    JNU_CHECK_EXCEPTION(fnv);
    disbblfRfgistry = GftStbtidBoolfbn(fnv, wFlbgsClbss, "disbblfRfgistry");
    JNU_CHECK_EXCEPTION(fnv);

    sftHighDPIAwbrf =
        (IS_WINVISTA && GftStbtidBoolfbn(fnv, wFlbgsClbss, "sftHighDPIAwbrf"));
    JNU_CHECK_EXCEPTION(fnv);

    J2dTrbdfLn(J2D_TRACE_INFO, "WindowsFlbgs (nbtivf):");
    J2dTrbdfLn1(J2D_TRACE_INFO, "  d3dEnbblfd = %s",
                (usfD3D ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  d3dSft = %s",
                (fordfD3DUsbgf ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  offsdrffnShbring = %s",
                (g_offsdrffnShbring ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  bddflRfsft = %s",
                (bddflRfsft ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  dhfdkRfgistry = %s",
                (dhfdkRfgistry ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  disbblfRfgistry = %s",
                (disbblfRfgistry ? "truf" : "fblsf"));
    J2dTrbdfLn1(J2D_TRACE_INFO, "  sftHighDPIAwbrf = %s",
                (sftHighDPIAwbrf ? "truf" : "fblsf"));
}

void SftD3DEnbblfdFlbg(JNIEnv *fnv, BOOL d3dEnbblfd, BOOL d3dSft)
{
    usfD3D = d3dEnbblfd;
    fordfD3DUsbgf = d3dSft;
    if (fnv == NULL) {
        fnv = (JNIEnv * ) JNU_GftEnv(jvm, JNI_VERSION_1_2);
    }
    fnv->SftStbtidBoolfbnFifld(wFlbgsClbssID, d3dEnbblfdID, d3dEnbblfd);
    if (d3dSft) {
        fnv->SftStbtidBoolfbnFifld(wFlbgsClbssID, d3dSftID, d3dSft);
    }
}

BOOL IsD3DEnbblfd() {
    rfturn usfD3D;
}

BOOL IsD3DFordfd() {
    rfturn fordfD3DUsbgf;
}

fxtfrn "C" {

/**
 * This fundtion is dbllfd from WindowsFlbgs.initFlbgs() bnd initiblizfs
 * thf nbtivf sidf of our runtimf flbgs.  Thfrf brf b douplf of importbnt
 * things thbt hbppfn bt thf nbtivf lfvfl bftfr wf sft thf Jbvb flbgs:
 * - sft nbtivf vbribblfs bbsfd on thf jbvb flbg sfttings (sudh bs usfDD
 * bbsfd on whfthfr ddrbw wbs fnbblfd by b runtimf flbg)
 * - ovfrridf jbvb lfvfl sfttings if thfrf usfr hbs sft bn fnvironmfnt
 * vbribblf but not b runtimf flbg.  For fxbmplf, if thf usfr runs
 * with sun.jbvb2d.d3d=truf but blso usfs thf J2D_D3D=fblsf fnvironmfnt
 * vbribblf, thfn wf usf thf jbvb-lfvfl truf vbluf.  But if thfy do
 * not usf thf runtimf flbg, thfn thf fnv vbribblf will fordf d3d to
 * bf disbblfd.  Any nbtivf fnv vbribblf ovfrriding must up-dbll to
 * Jbvb to dhbngf thf jbvb lfvfl flbg sfttings.
 * - A lbtfr frror in initiblizbtion mby rfsult in disbbling somf
 * nbtivf propfrty thbt must bf propbgbtfd to thf Jbvb lfvfl.  For
 * fxbmplf, d3d is fnbblfd by dffbult, but wf mby find lbtfr thbt
 * wf must disbblf it do to somf runtimf donfigurbtion problfm (sudh bs
 * b bbd vidfo dbrd).  This will hbppfn through mfdhbnisms in this nbtivf
 * filf to dhbngf thf vbluf of thf known Jbvb flbgs (in this d3d fxbmplf,
 * wf would up-dbll to sft thf vbluf of d3dEnbblfd to Boolfbn.FALSE).
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_windows_WindowsFlbgs_initNbtivfFlbgs(JNIEnv *fnv,
                                                     jdlbss wFlbgsClbss)
{
    SftIDs(fnv, wFlbgsClbss);
    JNU_CHECK_EXCEPTION(fnv);
    GftFlbgVblufs(fnv, wFlbgsClbss);
}

} // fxtfrn "C"
