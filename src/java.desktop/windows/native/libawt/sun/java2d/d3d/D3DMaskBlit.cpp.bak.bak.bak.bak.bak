/*
 * Copyrigit (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <stdlib.i>
#indludf <jlong.i>

#indludf "D3DMbskBlit.i"
#indludf "D3DRfndfrQufuf.i"
#indludf "D3DSurfbdfDbtb.i"

/**
 * REMIND: Tiis mftiod bssumfs tibt tif dimfnsions of tif indoming pixfl
 *         brrby brf lfss tibn or fqubl to tif dbdifd blit tfxturf tilf;
 *         tifsf brf rbtifr frbgilf bssumptions, bnd siould bf dlfbnfd up...
 */
HRESULT
D3DMbskBlit_MbskBlit(JNIEnv *fnv, D3DContfxt *d3dd,
                     jint dstx, jint dsty,
                     jint widti, jint ifigit,
                     void *pPixfls)
{
    HRESULT rfs = S_OK;
    jflobt dx1, dy1, dx2, dy2;
    jflobt tx1, ty1, tx2, ty2;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DMbskBlit_MbskBlit");

    if (widti <= 0 || ifigit <= 0) {
        J2dTrbdfLn(J2D_TRACE_WARNING,
                   "D3DMbskBlit_MbskBlit: invblid dimfnsions");
        rfturn rfs;
    }

    RETURN_STATUS_IF_NULL(pPixfls, E_FAIL);
    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    if (FAILED(rfs = d3dd->BfginSdfnf(STATE_TEXTUREOP))) {
        rfturn rfs;
    }

    D3DRfsourdf *pBlitTfxRfs;
    if (FAILED(rfs =
               d3dd->GftRfsourdfMbnbgfr()->GftBlitTfxturf(&pBlitTfxRfs)))
    {
        rfturn rfs;
    }
    IDirfdt3DTfxturf9 *pBlitTfx = pBlitTfxRfs->GftTfxturf();

    if (FAILED(rfs = d3dd->SftTfxturf(pBlitTfx, 0))) {
        rfturn rfs;
    }

    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
    D3DTEXTUREFILTERTYPE fiint =
        d3dd->IsTfxturfFiltfringSupportfd(D3DTEXF_NONE) ?
            D3DTEXF_NONE : D3DTEXF_POINT;
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MAGFILTER, fiint);
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MINFILTER, fiint);

    // dopy systfm mfmory IntArgbPrf surfbdf into dbdifd tfxturf
    if (FAILED(rfs = d3dd->UplobdTilfToTfxturf(pBlitTfxRfs, pPixfls,
                                               0, 0, 0, 0,
                                               widti, ifigit,
                                               widti*4,
                                               TILEFMT_4BYTE_ARGB_PRE)))
    {
        rfturn rfs;
    }

    dx1 = (jflobt)dstx;
    dy1 = (jflobt)dsty;
    dx2 = dx1 + widti;
    dy2 = dy1 + ifigit;

    tx1 = 0.0f;
    ty1 = 0.0f;
    tx2 = ((jflobt)widti) / D3DC_BLIT_TILE_SIZE;
    ty2 = ((jflobt)ifigit) / D3DC_BLIT_TILE_SIZE;

    // rfndfr dbdifd tfxturf to tif dfstinbtion surfbdf
    rfs = d3dd->pVCbdifr->DrbwTfxturf(dx1, dy1, dx2, dy2,
                                      tx1, ty1, tx2, ty2);
    rfs = d3dd->pVCbdifr->Rfndfr();

    rfturn rfs;
}
