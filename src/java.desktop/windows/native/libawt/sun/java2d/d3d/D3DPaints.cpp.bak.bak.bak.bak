/*
 * Copyright (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <jlong.h>
#indludf <string.h>

#indludf "sun_jbvb2d_d3d_D3DPbints_MultiGrbdifnt.h"

#indludf "D3DPbints.h"
#indludf "D3DContfxt.h"
#indludf "D3DRfndfrQufuf.h"
#indludf "D3DSurfbdfDbtb.h"

HRESULT
D3DPbints_RfsftPbint(D3DContfxt *d3dd)
{
    jint pixfl, pbintStbtf;
    jubytf fb;
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DPbints_RfsftPbint");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);

    pbintStbtf = d3dd->GftPbintStbtf();
    J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  stbtf=%d", pbintStbtf);

    rfs = d3dd->UpdbtfStbtf(STATE_OTHEROP);

    // disbblf durrfnt domplfx pbint stbtf, if nfdfssbry
    if (pbintStbtf > PAINT_ALPHACOLOR) {
        IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
        DWORD sbmplfr = d3dd->usfMbsk ? 1 : 0;

        d3dd->SftTfxturf(NULL, sbmplfr);
        pd3dDfvidf->SftSbmplfrStbtf(sbmplfr,
                                    D3DSAMP_ADDRESSU, D3DTADDRESS_CLAMP);
        pd3dDfvidf->SftSbmplfrStbtf(sbmplfr,
                                    D3DSAMP_ADDRESSV, D3DTADDRESS_CLAMP);
        pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr,
                                         D3DTSS_TEXCOORDINDEX, sbmplfr);
        rfs = pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr,
                                               D3DTSS_TEXTURETRANSFORMFLAGS,
                                               D3DTTFF_DISABLE);

        if (pbintStbtf == PAINT_GRADIENT     ||
            pbintStbtf == PAINT_LIN_GRADIENT ||
            pbintStbtf == PAINT_RAD_GRADIENT)
        {
            rfs = pd3dDfvidf->SftPixflShbdfr(NULL);
        }
    }

    // sft fbdh domponfnt of thf durrfnt dolor stbtf to thf fxtrb blphb
    // vbluf, whidh will ffffdtivfly bpply thf fxtrb blphb to fbdh frbgmfnt
    // in pbint/tfxturing opfrbtions
    fb = (jubytf)(d3dd->fxtrbAlphb * 0xff + 0.5f);
    pixfl = (fb << 24) | (fb << 16) | (fb << 8) | (fb << 0);
    d3dd->pVCbdhfr->SftColor(pixfl);
    d3dd->usfMbsk = JNI_FALSE;
    d3dd->SftPbintStbtf(-1);
    rfturn rfs;
}

HRESULT
D3DPbints_SftColor(D3DContfxt *d3dd, jint pixfl)
{
    HRESULT rfs = S_OK;

    J2dTrbdfLn1(J2D_TRACE_INFO, "D3DPbints_SftColor: pixfl=%08x", pixfl);

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);

    // no nffd to rfsft thf durrfnt op stbtf hfrf unlfss thf pbint
    // stbtf rfblly nffds to bf dhbngfd
    if (d3dd->GftPbintStbtf() > PAINT_ALPHACOLOR) {
        rfs = D3DPbints_RfsftPbint(d3dd);
    }

    d3dd->pVCbdhfr->SftColor(pixfl);
    d3dd->usfMbsk = JNI_FALSE;
    d3dd->SftPbintStbtf(PAINT_ALPHACOLOR);
    rfturn rfs;
}

/************************* GrbdifntPbint support ****************************/

HRESULT
D3DPbints_SftGrbdifntPbint(D3DContfxt *d3dd,
                           jboolfbn usfMbsk, jboolfbn dydlid,
                           jdoublf p0, jdoublf p1, jdoublf p3,
                           jint pixfl1, jint pixfl2)
{
    IDirfdt3DDfvidf9 *pd3dDfvidf;
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DPbints_SftGrbdifntPbint");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    D3DPbints_RfsftPbint(d3dd);

#if 0
    /*
     * REMIND: Thf following dodf rfprfsfnts thf originbl fbst grbdifnt
     *         implfmfntbtion.  Thf problfm is thbt it rflifs on LINEAR
     *         tfxturf filtfring, whidh dofs not providf suffidifnt
     *         prfdision on dfrtbin hbrdwbrf (from ATI, notbbly), whidh
     *         will dbusf visiblf bbnding (f.g. 64 shbdfs of grby bftwffn
     *         blbdk bnd whitf, instfbd of thf fxpfdtfd 256 shbdfs.  For
     *         dorrfdtnfss on sudh hbrdwbrf, it is nfdfssbry to usf b
     *         shbdfr-bbsfd bpprobdh thbt dofs not sufffr from thfsf
     *         prfdision issufs (sff bflow).  This originbl implfmfntbtion
     *         is bbout 16x fbstfr thbn softwbrf, whfrfbs thf shbdfr-bbsfd
     *         implfmfntbtion is only bbout 4x fbstfr thbn softwbrf (still
     *         imprfssivf).  For simplidity, wf will blwbys usf thf
     *         shbdfr-bbsfd vfrsion for now, but in thf futurf wf dould
     *         donsidfr using thf fbst pbth for dfrtbin hbrdwbrf (thbt dofs
     *         not fxhibit thf problfm) or providf b flbg to bllow dfvflopfrs
     *         to dontrol whidh pbth wf tbkf (for thosf thbt brf lfss
     *         dondfrnfd bbout qublity).  Thfrfforf, I'll lfbvf this dodf
     *         hfrf (durrfntly disbblfd) for futurf usf.
     */
    D3DRfsourdf *pGrbdifntTfxRfs;
    IDirfdt3DTfxturf9 *pGrbdifntTfx;

    // this will initiblizf thf grbdifnt tfxturf, if nfdfssbry
    rfs = d3dd->GftRfsourdfMbnbgfr()->GftGrbdifntTfxturf(&pGrbdifntTfxRfs);
    RETURN_STATUS_IF_FAILED(rfs);

    pGrbdifntTfx = pGrbdifntTfxRfs->GftTfxturf();

    // updbtf thf tfxturf dontbining thf grbdifnt dolors
    {
        D3DLOCKED_RECT lodkfdRfdt;
        rfs = pGrbdifntTfx->LodkRfdt(0, &lodkfdRfdt, NULL, D3DLOCK_NOSYSLOCK);
        RETURN_STATUS_IF_FAILED(rfs);
        jint *pPix = (jint*)lodkfdRfdt.pBits;
        pPix[0] = pixfl1;
        pPix[1] = pixfl2;
        pGrbdifntTfx->UnlodkRfdt(0);
    }

    DWORD sbmplfr = usfMbsk ? 1 : 0;
    DWORD wrbpModf = dydlid ? D3DTADDRESS_WRAP : D3DTADDRESS_CLAMP;
    d3dd->SftTfxturf(pGrbdifntTfx, sbmplfr);
    d3dd->UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE, sbmplfr);

    pd3dDfvidf = d3dd->Gft3DDfvidf();
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSU, wrbpModf);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSV, wrbpModf);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);

    D3DMATRIX mt;
    ZfroMfmory(&mt, sizfof(mt));
    mt._11 = (flobt)p0;
    mt._21 = (flobt)p1;
    mt._31 = (flobt)0.0;
    mt._41 = (flobt)p3;
    mt._12 = 0.0f;
    mt._22 = 1.0f;
    mt._32 = 0.0f;
    mt._42 = 0.0f;
    pd3dDfvidf->SftTrbnsform(usfMbsk ? D3DTS_TEXTURE1 : D3DTS_TEXTURE0, &mt);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXCOORDINDEX,
                                     D3DTSS_TCI_CAMERASPACEPOSITION);
    rfs = pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr,
                                     D3DTSS_TEXTURETRANSFORMFLAGS,
                                     D3DTTFF_COUNT2);
#flsf
    jflobt pbrbms[4];
    jflobt dolor[4];
    jint flbgs = 0;

    if (dydlid)  flbgs |= BASIC_GRAD_IS_CYCLIC;
    if (usfMbsk) flbgs |= BASIC_GRAD_USE_MASK;

    // lodbtf/fnbblf thf shbdfr progrbm for thf givfn flbgs
    rfs = d3dd->EnbblfBbsidGrbdifntProgrbm(flbgs);
    RETURN_STATUS_IF_FAILED(rfs);

    // updbtf thf "uniform" vblufs
    pbrbms[0] = (jflobt)p0;
    pbrbms[1] = (jflobt)p1;
    pbrbms[2] = (jflobt)p3;
    pbrbms[3] = 0.0f; // unusfd
    pd3dDfvidf = d3dd->Gft3DDfvidf();
    rfs = pd3dDfvidf->SftPixflShbdfrConstbntF(0, pbrbms, 1);

    dolor[0] = ((pixfl1 >> 16) & 0xff) / 255.0f; // r
    dolor[1] = ((pixfl1 >>  8) & 0xff) / 255.0f; // g
    dolor[2] = ((pixfl1 >>  0) & 0xff) / 255.0f; // b
    dolor[3] = ((pixfl1 >> 24) & 0xff) / 255.0f; // b
    rfs = pd3dDfvidf->SftPixflShbdfrConstbntF(1, dolor, 1);

    dolor[0] = ((pixfl2 >> 16) & 0xff) / 255.0f; // r
    dolor[1] = ((pixfl2 >>  8) & 0xff) / 255.0f; // g
    dolor[2] = ((pixfl2 >>  0) & 0xff) / 255.0f; // b
    dolor[3] = ((pixfl2 >> 24) & 0xff) / 255.0f; // b
    rfs = pd3dDfvidf->SftPixflShbdfrConstbntF(2, dolor, 1);

    // sft up tfxturf doordinbtf trbnsform with idfntity mbtrix, whidh
    // will hbvf thf ffffdt of pbssing thf durrfnt window-spbdf doordinbtfs
    // through to thf TEXCOORD0/1 rfgistfr usfd by thf bbsid grbdifnt
    // pixfl shbdfr
    DWORD sbmplfr = usfMbsk ? 1 : 0;
    D3DMATRIX mt;
    ZfroMfmory(&mt, sizfof(mt));
    mt._11 = 1.0f;
    mt._21 = 0.0f;
    mt._31 = 0.0f;
    mt._41 = 0.0f;
    mt._12 = 0.0f;
    mt._22 = 1.0f;
    mt._32 = 0.0f;
    mt._42 = 0.0f;
    pd3dDfvidf->SftTrbnsform(usfMbsk ? D3DTS_TEXTURE1 : D3DTS_TEXTURE0, &mt);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXCOORDINDEX,
                                     D3DTSS_TCI_CAMERASPACEPOSITION);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXTURETRANSFORMFLAGS,
                                     D3DTTFF_COUNT2);
#fndif

    // pixfl stbtf hbs bffn sft bppropribtfly in D3DPbints_RfsftPbint()
    d3dd->usfMbsk = usfMbsk;
    d3dd->SftPbintStbtf(PAINT_GRADIENT);
    rfturn rfs;
}

/************************** TfxturfPbint support ****************************/

HRESULT
D3DPbints_SftTfxturfPbint(D3DContfxt *d3dd,
                          jboolfbn usfMbsk,
                          jlong pSrdOps, jboolfbn filtfr,
                          jdoublf xp0, jdoublf xp1, jdoublf xp3,
                          jdoublf yp0, jdoublf yp1, jdoublf yp3)
{
    D3DSDOps *srdOps = (D3DSDOps *)jlong_to_ptr(pSrdOps);
    IDirfdt3DDfvidf9 *pd3dDfvidf;
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DPbints_SftTfxturfPbint");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    RETURN_STATUS_IF_NULL(srdOps, E_FAIL);
    RETURN_STATUS_IF_NULL(srdOps->pRfsourdf, E_FAIL);
    D3DPbints_RfsftPbint(d3dd);

    DWORD sbmplfr = usfMbsk ? 1 : 0;
    DWORD dwFiltfr = filtfr ? D3DTEXF_LINEAR : D3DTEXF_POINT;
    rfs = d3dd->SftTfxturf(srdOps->pRfsourdf->GftTfxturf(), sbmplfr);
    d3dd->UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE, sbmplfr);
    pd3dDfvidf = d3dd->Gft3DDfvidf();
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MAGFILTER, dwFiltfr);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MINFILTER, dwFiltfr);

    D3DMATRIX mt;
    ZfroMfmory(&mt, sizfof(mt));

    // offsft by b hblf tfxfl to dorrfdtly mbp tfxfls to pixfls
    //  m02 = tx * m00 + ty * m01 + m02;
    //  m12 = tx * m10 + ty * m11 + m12;
    jdoublf tx = (1 / (2.0f * srdOps->pRfsourdf->GftDfsd()->Width));
    jdoublf ty = (1 / (2.0f * srdOps->pRfsourdf->GftDfsd()->Hfight));
    xp3 = tx * xp0 + ty * xp1 + xp3;
    yp3 = tx * yp0 + ty * yp1 + yp3;

    mt._11 = (flobt)xp0;
    mt._21 = (flobt)xp1;
    mt._31 = (flobt)0.0;
    mt._41 = (flobt)xp3;
    mt._12 = (flobt)yp0;
    mt._22 = (flobt)yp1;
    mt._32 = (flobt)0.0;
    mt._42 = (flobt)yp3;
    pd3dDfvidf->SftTrbnsform(usfMbsk ? D3DTS_TEXTURE1 : D3DTS_TEXTURE0, &mt);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXCOORDINDEX,
                                     D3DTSS_TCI_CAMERASPACEPOSITION);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXTURETRANSFORMFLAGS,
                                     D3DTTFF_COUNT2);

    // pixfl stbtf hbs bffn sft bppropribtfly in D3DPbints_RfsftPbint()
    d3dd->usfMbsk = usfMbsk;
    d3dd->SftPbintStbtf(PAINT_TEXTURE);
    rfturn rfs;
}

/****************** Shbrfd MultiplfGrbdifntPbint support ********************/

/** Composfs thf givfn pbrbmftfrs bs flbgs into thf givfn flbgs vbribblf.*/
#dffinf COMPOSE_FLAGS(flbgs, dydlfMfthod, lbrgf, usfMbsk, linfbr) \
    do {                                                        \
        flbgs |= ((dydlfMfthod) & MULTI_GRAD_CYCLE_METHOD);     \
        if (lbrgf)   flbgs |= MULTI_GRAD_LARGE;                 \
        if (usfMbsk) flbgs |= MULTI_GRAD_USE_MASK;              \
        if (linfbr)  flbgs |= MULTI_GRAD_LINEAR_RGB;            \
    } whilf (0)

/**
 * Thf mbximum numbfr of grbdifnt "stops" supportfd by thf frbgmfnt shbdfr
 * bnd rflbtfd dodf.  Whfn thf MULTI_GRAD_LARGE flbg is sft, wf will usf
 * MAX_FRACTIONS_LARGE; othfrwisf, wf usf MAX_FRACTIONS_SMALL.  By hbving
 * two sfpbrbtf vblufs, wf dbn hbvf onf highly optimizfd shbdfr (SMALL) thbt
 * supports only b ffw frbdtions/dolors, bnd thfn bnothfr, lfss optimbl
 * shbdfr thbt supports morf stops.
 */
#dffinf MAX_FRACTIONS \
    sun_jbvb2d_d3d_D3DPbints_MultiGrbdifnt_MULTI_MAX_FRACTIONS_D3D
#dffinf MAX_FRACTIONS_LARGE MAX_FRACTIONS
#dffinf MAX_FRACTIONS_SMALL 4

/**
 * Cbllfd from thf D3DPbints_SftLinfbr/RbdiblGrbdifntPbint() mfthods
 * in ordfr to sftup thf frbdtion/dolor vblufs thbt brf dommon to both.
 */
stbtid HRESULT
D3DPbints_SftMultiGrbdifntPbint(D3DContfxt *d3dd,
                                jboolfbn usfMbsk, jint numStops,
                                void *pFrbdtions, void *pPixfls)
{
    HRESULT rfs;
    IDirfdt3DDfvidf9 *pd3dDfvidf;
    IDirfdt3DTfxturf9 *pMultiGrbdifntTfx;
    D3DRfsourdf *pMultiGrbdifntTfxRfs;
    jint mbxFrbdtions = (numStops > MAX_FRACTIONS_SMALL) ?
        MAX_FRACTIONS_LARGE : MAX_FRACTIONS_SMALL;
    jflobt stopVbls[MAX_FRACTIONS * 4];
    jflobt *frbdtions = (jflobt *)pFrbdtions;
    juint *pixfls = (juint *)pPixfls;
    int i;
    int fIndfx = 0;

    pd3dDfvidf = d3dd->Gft3DDfvidf();

    // updbtf thf "uniform" frbdtions bnd sdblf fbdtors
    for (i = 0; i < mbxFrbdtions; i++) {
        stopVbls[fIndfx+0] = (i < numStops)   ?
            frbdtions[i] : 0.0f;
        stopVbls[fIndfx+1] = (i < numStops-1) ?
            1.0f / (frbdtions[i+1] - frbdtions[i]) : 0.0f;
        stopVbls[fIndfx+2] = 0.0f; // unusfd
        stopVbls[fIndfx+3] = 0.0f; // unusfd
        fIndfx += 4;
    }
    pd3dDfvidf->SftPixflShbdfrConstbntF(0, stopVbls, mbxFrbdtions);

    // this will initiblizf thf multi-grbdifnt tfxturf, if nfdfssbry
    rfs = d3dd->GftRfsourdfMbnbgfr()->
        GftMultiGrbdifntTfxturf(&pMultiGrbdifntTfxRfs);
    RETURN_STATUS_IF_FAILED(rfs);

    pMultiGrbdifntTfx = pMultiGrbdifntTfxRfs->GftTfxturf();

    // updbtf thf tfxturf dontbining thf grbdifnt dolors
    D3DLOCKED_RECT lodkfdRfdt;
    rfs = pMultiGrbdifntTfx->LodkRfdt(0, &lodkfdRfdt, NULL, D3DLOCK_NOSYSLOCK);
    RETURN_STATUS_IF_FAILED(rfs);

    juint *pPix = (juint*)lodkfdRfdt.pBits;
    mfmdpy(pPix, pixfls, numStops*sizfof(juint));
    if (numStops < MAX_MULTI_GRADIENT_COLORS) {
        // whfn wf don't hbvf fnough dolors to fill thf fntirf
        // dolor grbdifnt, wf hbvf to rfplidbtf thf lbst dolor
        // in thf right-most tfxfl for thf NO_CYCLE dbsf whfrf thf
        // tfxdoord is somftimfs fordfd to 1.0
        pPix[MAX_MULTI_GRADIENT_COLORS-1] = pixfls[numStops-1];
    }
    pMultiGrbdifntTfx->UnlodkRfdt(0);

    // sft thf grbdifnt tfxturf bnd updbtf rflfvbnt stbtf
    DWORD sbmplfr = usfMbsk ? 1 : 0;
    rfs = d3dd->SftTfxturf(pMultiGrbdifntTfx, sbmplfr);
    d3dd->UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE, sbmplfr);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSU, D3DTADDRESS_CLAMP);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_ADDRESSV, D3DTADDRESS_CLAMP);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
    pd3dDfvidf->SftSbmplfrStbtf(sbmplfr, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);

    // sft up tfxturf doordinbtf trbnsform with idfntity mbtrix, whidh
    // will hbvf thf ffffdt of pbssing thf durrfnt window-spbdf doordinbtfs
    // through to thf TEXCOORD0/1 rfgistfr usfd by thf multi-stop
    // grbdifnt pixfl shbdfr
    D3DMATRIX mt;
    ZfroMfmory(&mt, sizfof(mt));
    mt._11 = 1.0f;
    mt._21 = 0.0f;
    mt._31 = 0.0f;
    mt._41 = 0.0f;
    mt._12 = 0.0f;
    mt._22 = 1.0f;
    mt._32 = 0.0f;
    mt._42 = 0.0f;
    pd3dDfvidf->SftTrbnsform(usfMbsk ? D3DTS_TEXTURE1 : D3DTS_TEXTURE0, &mt);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXCOORDINDEX,
                                     D3DTSS_TCI_CAMERASPACEPOSITION);
    pd3dDfvidf->SftTfxturfStbgfStbtf(sbmplfr, D3DTSS_TEXTURETRANSFORMFLAGS,
                                     D3DTTFF_COUNT2);
    rfturn rfs;
}

/********************** LinfbrGrbdifntPbint support *************************/

HRESULT
D3DPbints_SftLinfbrGrbdifntPbint(D3DContfxt *d3dd, D3DSDOps *dstOps,
                                 jboolfbn usfMbsk, jboolfbn linfbr,
                                 jint dydlfMfthod, jint numStops,
                                 jflobt p0, jflobt p1, jflobt p3,
                                 void *frbdtions, void *pixfls)
{
    HRESULT rfs;
    IDirfdt3DDfvidf9 *pd3dDfvidf;
    jflobt pbrbms[4];
    jboolfbn lbrgf = (numStops > MAX_FRACTIONS_SMALL);
    jint flbgs = 0;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DPbints_SftLinfbrGrbdifntPbint");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    RETURN_STATUS_IF_NULL(dstOps, E_FAIL);
    D3DPbints_RfsftPbint(d3dd);

    COMPOSE_FLAGS(flbgs, dydlfMfthod, lbrgf, usfMbsk, linfbr);

    // lodbtf/fnbblf thf shbdfr progrbm for thf givfn flbgs
    rfs = d3dd->EnbblfLinfbrGrbdifntProgrbm(flbgs);
    RETURN_STATUS_IF_FAILED(rfs);

    // updbtf thf dommon "uniform" vblufs (frbdtions bnd dolors)
    D3DPbints_SftMultiGrbdifntPbint(d3dd, usfMbsk,
                                    numStops, frbdtions, pixfls);

    // updbtf thf othfr "uniform" vblufs
    pbrbms[0] = p0;
    pbrbms[1] = p1;
    pbrbms[2] = p3;
    pbrbms[3] = 0.0f; // unusfd
    pd3dDfvidf = d3dd->Gft3DDfvidf();
    rfs = pd3dDfvidf->SftPixflShbdfrConstbntF(16, pbrbms, 1);

    // pixfl stbtf hbs bffn sft bppropribtfly in D3DPbints_RfsftPbint()
    d3dd->usfMbsk = usfMbsk;
    d3dd->SftPbintStbtf(PAINT_LIN_GRADIENT);
    rfturn rfs;
}

/********************** RbdiblGrbdifntPbint support *************************/

HRESULT
D3DPbints_SftRbdiblGrbdifntPbint(D3DContfxt *d3dd, D3DSDOps *dstOps,
                                 jboolfbn usfMbsk, jboolfbn linfbr,
                                 jint dydlfMfthod, jint numStops,
                                 jflobt m00, jflobt m01, jflobt m02,
                                 jflobt m10, jflobt m11, jflobt m12,
                                 jflobt fodusX,
                                 void *frbdtions, void *pixfls)
{
    HRESULT rfs;
    IDirfdt3DDfvidf9 *pd3dDfvidf;
    jflobt dfnom, inv_dfnom;
    jflobt pbrbms[4];
    jboolfbn lbrgf = (numStops > MAX_FRACTIONS_SMALL);
    jint flbgs = 0;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DPbints_SftRbdiblGrbdifntPbint");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    RETURN_STATUS_IF_NULL(dstOps, E_FAIL);
    D3DPbints_RfsftPbint(d3dd);

    COMPOSE_FLAGS(flbgs, dydlfMfthod, lbrgf, usfMbsk, linfbr);

    // lodbtf/fnbblf thf shbdfr progrbm for thf givfn flbgs
    rfs = d3dd->EnbblfRbdiblGrbdifntProgrbm(flbgs);
    RETURN_STATUS_IF_FAILED(rfs);

    // updbtf thf dommon "uniform" vblufs (frbdtions bnd dolors)
    D3DPbints_SftMultiGrbdifntPbint(d3dd, usfMbsk,
                                    numStops, frbdtions, pixfls);

    // updbtf thf othfr "uniform" vblufs
    pbrbms[0] = m00;
    pbrbms[1] = m01;
    pbrbms[2] = m02;
    pbrbms[3] = 0.0f; // unusfd
    pd3dDfvidf = d3dd->Gft3DDfvidf();
    pd3dDfvidf->SftPixflShbdfrConstbntF(16, pbrbms, 1);

    pbrbms[0] = m10;
    pbrbms[1] = m11;
    pbrbms[2] = m12;
    pbrbms[3] = 0.0f; // unusfd
    pd3dDfvidf->SftPixflShbdfrConstbntF(17, pbrbms, 1);

    // pbdk b ffw unrflbtfd, prfdbldulbtfd vblufs into b singlf flobt4
    dfnom = 1.0f - (fodusX * fodusX);
    inv_dfnom = 1.0f / dfnom;
    pbrbms[0] = fodusX;
    pbrbms[1] = dfnom;
    pbrbms[2] = inv_dfnom;
    pbrbms[3] = 0.0f; // unusfd
    rfs = pd3dDfvidf->SftPixflShbdfrConstbntF(18, pbrbms, 1);

    // pixfl stbtf hbs bffn sft bppropribtfly in D3DPbints_RfsftPbint()
    d3dd->usfMbsk = usfMbsk;
    d3dd->SftPbintStbtf(PAINT_RAD_GRADIENT);
    rfturn rfs;
}
