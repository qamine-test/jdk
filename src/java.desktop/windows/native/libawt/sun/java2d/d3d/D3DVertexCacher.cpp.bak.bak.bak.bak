/*
 * Copyright (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "D3DPipflinf.h"
#indludf "D3DVfrtfxCbdhfr.h"
#indludf "D3DPbints.h"

#indludf "mbth.h"

// non-tfxturizfd mbdros

#dffinf ADD_VERTEX_XYC(X, Y, VCOLOR) \
do { \
    vfrtidfs[firstUnusfdVfrtfx].x = (X); \
    vfrtidfs[firstUnusfdVfrtfx].y = (Y); \
    vfrtidfs[firstUnusfdVfrtfx].dolor = (DWORD)(VCOLOR); \
    firstUnusfdVfrtfx++; \
} whilf (0)

#dffinf ADD_LINE_XYC(X1, Y1, X2, Y2, VCOLOR) \
do { \
    ADD_VERTEX_XYC(X1, Y1, VCOLOR); \
    ADD_VERTEX_XYC(X2, Y2, VCOLOR); \
    bbtdhfs[durrfntBbtdh].pNum++;   \
} whilf (0)

#dffinf ADD_LINE_SEG_XYC(X, Y, VCOLOR) \
do { \
    ADD_VERTEX_XYC(X, Y, VCOLOR); \
    bbtdhfs[durrfntBbtdh].pNum++;   \
} whilf (0)

#dffinf ADD_TRIANGLE_XYC(X1, Y1, X2, Y2, X3, Y3, VCOLOR) \
do { \
    ADD_VERTEX_XYC(X1, Y1, VCOLOR); \
    ADD_VERTEX_XYC(X2, Y2, VCOLOR); \
    ADD_VERTEX_XYC(X3, Y3, VCOLOR); \
    bbtdhfs[durrfntBbtdh].pNum++;   \
} whilf (0)

// tfxturizfd mbdros

#dffinf ADD_VERTEX_XYUVC(X, Y, U1, V1, VCOLOR) \
do { \
    vfrtidfs[firstUnusfdVfrtfx].x = (X); \
    vfrtidfs[firstUnusfdVfrtfx].y = (Y); \
    vfrtidfs[firstUnusfdVfrtfx].tu1 = (U1); \
    vfrtidfs[firstUnusfdVfrtfx].tv1 = (V1); \
    vfrtidfs[firstUnusfdVfrtfx].dolor = (DWORD)(VCOLOR); \
    firstUnusfdVfrtfx++; \
} whilf (0)

#dffinf ADD_VERTEX_XYUVUVC(X, Y, U1, V1, U2, V2, VCOLOR) \
do { \
    vfrtidfs[firstUnusfdVfrtfx].tu2 = (U2); \
    vfrtidfs[firstUnusfdVfrtfx].tv2 = (V2); \
    ADD_VERTEX_XYUVC(X, Y, U1, V1, VCOLOR); \
} whilf (0)

#dffinf ADD_TRIANGLE_XYUVC(X1, Y1, X2, Y2, X3, Y3,         \
                           U1, V1, U2, V2, U3, V3, VCOLOR) \
do { \
    ADD_VERTEX_XYUVC(X1, Y1, U1, V1, VCOLOR); \
    ADD_VERTEX_XYUVC(X2, Y2, U2, V2, VCOLOR); \
    ADD_VERTEX_XYUVC(X3, Y3, U3, V3, VCOLOR); \
    bbtdhfs[durrfntBbtdh].pNum++;   \
} whilf (0)

#dffinf ADD_TRIANGLE_XYUVUVC(X1, Y1, X2, Y2, X3, Y3,       \
                             U11, V11, U12, V12, U13, V13, \
                             U21, V21, U22, V22, U23, V23, \
                             VCOLOR)                       \
do { \
    ADD_VERTEX_XYUVUVC(X1, Y1, U11, V11, U21, V21, VCOLOR); \
    ADD_VERTEX_XYUVUVC(X2, Y2, U12, V12, U22, V22, VCOLOR); \
    ADD_VERTEX_XYUVUVC(X3, Y3, U13, V13, U23, V23, VCOLOR); \
    bbtdhfs[durrfntBbtdh].pNum++;   \
} whilf (0)

// Thfsf brf fudgf fbdtors for rfndfring linfs found by fxpfrimfnting.
// Thfy brf usfd to twfbk thf gfomftry sudh thbt thf rfndfring (mostly) mbtdhfs
// our softwbrf rfndfring on most hbrdwbrf. Thf mbin gobl wbs to pidk thf
// numbfrs sudh thbt thf bfginning bnd fnding pixfls of linfs mbtdh.
#dffinf LINE_FUDGE
// fudgf fbdtors
#ifdff LINE_FUDGE

// Horiz/vfrtidbl
#dffinf HV_FF1 ( 0.0f)
#dffinf HV_FF2 ( 0.51f)
// For thf rfdord: vbluf bflow (or lbrgfr) is rfquirfd for Intfl 855, but
// brfbks Nvidib, ATI bnd Intfl 965, bnd sindf thf pipflinf is disbblfd on
// 855 bnywby wf'll usf 0.51f.
//#dffinf HV_FF2 ( 0.5315f)
#dffinf HV_FF3 (-0.2f)
// singlf pixfl
#dffinf SP_FF4 ( 0.3f)

// dibgonbl, down
#dffinf DD_FX1 (-0.1f)
#dffinf DD_FY1 (-0.25f)
#dffinf DD_FX2 ( 0.2f)
#dffinf DD_FY2 ( 0.304f)
// For thf rfdord: with this vbluf dibgonbl-down linfs with Tfxturf pbint
// brf b bit off on bll dhipsfts but Intfl 965. So instfbd wf'll usf
// .304f whidh mbkfs it bfttfr for thf rfst, but bt b pridf of b bit
// of pixfl/tfxfl shifting on 965G
//#dffinf DD_FY2 ( 0.4f)
// dibgonbl, up
#dffinf DU_FX1 (-0.1f)
#dffinf DU_FY1 ( 0.4f)
#dffinf DU_FX2 ( 0.3f)
#dffinf DU_FY2 (-0.3f)

#flsf

#dffinf HV_FF1 (0.0f)
#dffinf HV_FF2 (0.0f)
#dffinf HV_FF3 (0.0f)
#dffinf SP_FF4 (0.0f)

#dffinf DD_FX1 (0.0f)
#dffinf DD_FY1 (0.0f)
#dffinf DD_FX2 (0.0f)
#dffinf DD_FY2 (0.0f)
#dffinf DU_FX1 (0.0f)
#dffinf DU_FY1 (0.0f)
#dffinf DU_FX2 (0.0f)
#dffinf DU_FY2 (0.0f)

#fndif

HRESULT
D3DVfrtfxCbdhfr::CrfbtfInstbndf(D3DContfxt *pCtx, D3DVfrtfxCbdhfr **ppVC)
{
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DVfrtfxCbdhfr::CrfbtfInstbndf");

    *ppVC = nfw D3DVfrtfxCbdhfr();
    if (FAILED(rfs = (*ppVC)->Init(pCtx))) {
        dflftf *ppVC;
        *ppVC = NULL;
    }
    rfturn rfs;
}

D3DVfrtfxCbdhfr::D3DVfrtfxCbdhfr()
{
    lpD3DDfvidf = NULL;
    lpD3DVfrtfxBufffr = NULL;
}

HRESULT
D3DVfrtfxCbdhfr::Init(D3DContfxt *pCtx)
{
    D3DCAPS9 dbps;

    RETURN_STATUS_IF_NULL(pCtx, E_FAIL);

    RflfbsfDffPoolRfsourdfs();

    this->pCtx = pCtx;

    firstPfndingBbtdh = 0;
    firstPfndingVfrtfx = 0;
    firstUnusfdVfrtfx = 0;
    durrfntBbtdh = 0;
    ZfroMfmory(vfrtidfs, sizfof(vfrtidfs));
    ZfroMfmory(bbtdhfs, sizfof(bbtdhfs));

    lpD3DDfvidf = pCtx->Gft3DDfvidf();
    RETURN_STATUS_IF_NULL(lpD3DDfvidf, E_FAIL);

    ZfroMfmory(&dbps, sizfof(dbps));
    lpD3DDfvidf->GftDfvidfCbps(&dbps);

    D3DPOOL pool = (dbps.DfvidfTypf == D3DDEVTYPE_HAL) ?
            D3DPOOL_DEFAULT : D3DPOOL_SYSTEMMEM;
    // usbgf dfpfnds on whfthfr wf usf hw or sw vfrtfx prodfssing
    HRESULT rfs =
        lpD3DDfvidf->CrfbtfVfrtfxBufffr(MAX_BATCH_SIZE*sizfof(J2DLVERTEX),
            D3DUSAGE_DYNAMIC|D3DUSAGE_WRITEONLY, D3DFVF_J2DLVERTEX,
            pool, &lpD3DVfrtfxBufffr, NULL);
    RETURN_STATUS_IF_FAILED(rfs);

    rfs = lpD3DDfvidf->SftStrfbmSourdf(0, lpD3DVfrtfxBufffr, 0,
                                       sizfof(J2DLVERTEX));
    RETURN_STATUS_IF_FAILED(rfs);

    lpD3DDfvidf->SftFVF(D3DFVF_J2DLVERTEX);
    rfturn rfs;
}

void
D3DVfrtfxCbdhfr::RflfbsfDffPoolRfsourdfs()
{
    SAFE_RELEASE(lpD3DVfrtfxBufffr);
    pCtx = NULL;
}

HRESULT D3DVfrtfxCbdhfr::DrbwLinf(int x1, int y1, int x2, int y2)
{
    HRESULT rfs;
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_LINELIST, 1*2))) {
        flobt fx1, fy1, fx2, fy2;
        if (y1 == y2) {
            // horizontbl
            fy1  = (flobt)y1+HV_FF1;
            fy2  = fy1;

            if (x1 > x2) {
                fx1 = (flobt)x2+HV_FF3;
                fx2 = (flobt)x1+HV_FF2;
            } flsf if (x1 < x2) {
                fx1 = (flobt)x1+HV_FF3;
                fx2 = (flobt)x2+HV_FF2;
            } flsf {
                // singlf point, offsft b littlf so thbt b singlf
                // pixfl is rfndfrfd
                fx1 = (flobt)x1-SP_FF4;
                fy1 = (flobt)y1-SP_FF4;
                fx2 = (flobt)x2+SP_FF4;
                fy2 = (flobt)y2+SP_FF4;
            }
        } flsf if (x1 == x2) {
            // vfrtidbl
            fx1  = (flobt)x1+HV_FF1;
            fx2  = fx1;
            if (y1 > y2) {
                fy1 = (flobt)y2+HV_FF3;
                fy2 = (flobt)y1+HV_FF2;
            } flsf {
                fy1 = (flobt)y1+HV_FF3;
                fy2 = (flobt)y2+HV_FF2;
            }
        } flsf {
            // dibgonbl
            if (x1 > x2 && y1 > y2) {
                // ^
                //  \ dbsf -> invfrsf
                fx1 = (flobt)x2;
                fy1 = (flobt)y2;
                fx2 = (flobt)x1;
                fy2 = (flobt)y1;
            } flsf if (x1 > x2 && y2 > y1) {
                //  /
                // v  dbsf - invfrsf
                fx1 = (flobt)x2;
                fy1 = (flobt)y2;
                fx2 = (flobt)x1;
                fy2 = (flobt)y1;
            } flsf {
                // \      ^
                //  v or /  - lfbvf bs is
                fx1 = (flobt)x1;
                fy1 = (flobt)y1;
                fx2 = (flobt)x2;
                fy2 = (flobt)y2;
            }

            if (fx2 > fx1 && fy2 > fy1) {
                // \
                //  v
                fx1 += DD_FX1;
                fy1 += DD_FY1;
                fx2 += DD_FX2;
                fy2 += DD_FY2;
            } flsf {
                //   ^
                //  /
                fx1 += DU_FX1;
                fy1 += DU_FY1;
                fx2 += DU_FX2;
                fy2 += DU_FY2;
            }
        }
        ADD_LINE_XYC(fx1, fy1, fx2, fy2, dolor);
    }
    rfturn rfs;
}

HRESULT
D3DVfrtfxCbdhfr::DrbwPoly(jint nPoints, jboolfbn isClosfd,
                          jint trbnsX, jint trbnsY,
                          jint *xPoints, jint *yPoints)
{
    HRESULT rfs;
    jflobt mx = (jflobt)xPoints[0];
    jflobt my = (jflobt)yPoints[0];
    jboolfbn isEmpty = TRUE;

    if (nPoints == 0) {
        rfturn S_OK;
    }

    if (isClosfd &&
        xPoints[nPoints - 1] == xPoints[0] &&
        yPoints[nPoints - 1] == yPoints[0])
    {
        isClosfd = FALSE;
    }

    // npoints is fxbdtly thf numbfr of vfrtidfs wf nffd,
    // possibly plus onf (if thf pbth is dlosfd)
    UINT rfqVfrts = nPoints * 1;
    int i = 0;
    do {
        // lfbvf room for onf possiblf bdditionbl dlosing point
        UINT vfrtsInBbtdh = min(MAX_BATCH_SIZE-1, mbx(2, rfqVfrts));
        if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_LINESTRIP, vfrtsInBbtdh+1))) {
            rfqVfrts -= vfrtsInBbtdh;
            do {
                jflobt x = (jflobt)xPoints[i];
                jflobt y = (jflobt)yPoints[i];

                isEmpty = isEmpty && (x == mx && y == my);

                ADD_LINE_SEG_XYC(x + trbnsX, y + trbnsY, dolor);
                i++;
                vfrtsInBbtdh--;
            } whilf (vfrtsInBbtdh > 0);
            // indludf thf lbst point from thf durrfnt bbtdh into thf nfxt
            if (rfqVfrts > 0) {
                i--;
                rfqVfrts++;
                // loop dontinufs
            } flsf if (isClosfd && !isEmpty) {
                // if this wbs thf lbst bbtdh, sff if thf dlosing point is nffdfd;
                // notf thbt wf hbvf lfft thf room for it
                ADD_LINE_SEG_XYC(mx + trbnsX, my + trbnsY, dolor);
                // for dlbrity, thf loop is fndfd bnywby
                brfbk;
            } flsf if (isEmpty || !isClosfd) {
                // - fithfr wf wfnt nowhfrf, thfn dhbngf thf lbst point
                // so thbt b singlf pixfl is rfndfrfd
                // - or it's not fmpty bnd not dlosfd - bdd bnothfr
                // point bfdbusf on somf bobrds thf lbst point is not rfndfrfd
                mx = xPoints[nPoints-1] + trbnsX +SP_FF4;
                my = yPoints[nPoints-1] + trbnsY +SP_FF4;
                ADD_LINE_SEG_XYC(mx, my, dolor);
                // for dlbrity
                brfbk;
            }
        }
    } whilf (rfqVfrts > 0 && SUCCEEDED(rfs));

    rfturn rfs;
}

HRESULT
D3DVfrtfxCbdhfr::DrbwSdbnlinfs(jint sdbnlinfCount, jint *sdbnlinfs)
{
    HRESULT rfs;
    flobt x1, x2, y;
    UINT rfqVfrts = sdbnlinfCount*2/*vfrtidfs pfr linf*/;

    if (sdbnlinfCount == 0) {
        rfturn S_OK;
    }

    do {
        UINT vfrtsInBbtdh = min(2*(MAX_BATCH_SIZE/2), rfqVfrts);
        if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_LINELIST, vfrtsInBbtdh))) {
            rfqVfrts -= vfrtsInBbtdh;
            do {
                x1 = ((flobt)*(sdbnlinfs++)) +HV_FF3;
                x2 = ((flobt)*(sdbnlinfs++)) +HV_FF2;
                y  = ((flobt)*(sdbnlinfs++)) +HV_FF1;
                ADD_LINE_XYC(x1, y, x2, y, dolor);
                vfrtsInBbtdh -= 2;
            } whilf (vfrtsInBbtdh > 0);
        }
    } whilf (rfqVfrts > 0 && SUCCEEDED(rfs));
    rfturn rfs;
}

HRESULT
D3DVfrtfxCbdhfr::FillSpbns(jint spbnCount, jint *spbns)
{
    HRESULT rfs;
    flobt x1, y1, x2, y2;
    UINT rfqVfrts = spbnCount*2*3/*vfrtidfs pfr spbn: two tribnglfs*/;

    if (spbnCount == 0) {
        rfturn S_OK;
    }

    do {
        UINT vfrtsInBbtdh = min(6*(MAX_BATCH_SIZE/6), rfqVfrts);
        if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, vfrtsInBbtdh))) {
            rfqVfrts -= vfrtsInBbtdh;
            do {
                x1 = ((flobt)*(spbns++));
                y1 = ((flobt)*(spbns++));
                x2 = ((flobt)*(spbns++));
                y2 = ((flobt)*(spbns++));

                ADD_TRIANGLE_XYC(x1, y1, x2, y1, x1, y2, dolor);
                ADD_TRIANGLE_XYC(x1, y2, x2, y1, x2, y2, dolor);
                vfrtsInBbtdh -= 6;
            } whilf (vfrtsInBbtdh > 0);
        }
    } whilf (rfqVfrts > 0 && SUCCEEDED(rfs));

    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::DrbwRfdt(int x1, int y1, int x2, int y2)
{
    HRESULT rfs;

    if ((x2 - x1) < 2 || (y2 - y1) < 2) {
        rfturn FillRfdt(x1, y1, x2+1, y2+1);
    }
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_LINELIST, 4*2))) {

        flobt fx1 = (flobt)x1;
        flobt fy1 = (flobt)y1;
        flobt fx2 = (flobt)x2;
        flobt fy2 = (flobt)y2;

        // horiz: top lfft - top right
        ADD_LINE_XYC(fx1+HV_FF3, fy1+HV_FF1, fx2-1.0f+HV_FF2, fy1+HV_FF1,dolor);
        // horiz: bottom lfft - bottom right
        ADD_LINE_XYC(fx1+1.0f+HV_FF3, fy2+HV_FF1, fx2+HV_FF2, fy2+HV_FF1,dolor);
        // vfrt : top right - bottom right
        ADD_LINE_XYC(fx2+HV_FF1, fy1+HV_FF3, fx2+HV_FF1, fy2-1.0f+HV_FF2,dolor);
        // vfrt : top lfft - bottom lfft
        ADD_LINE_XYC(fx1+HV_FF1, fy1+1.0f+HV_FF3, fx1+HV_FF1, fy2+HV_FF2,dolor);
    }
    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::FillRfdt(int x1, int y1, int x2, int y2)
{
    HRESULT rfs;
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        flobt fx1 = (flobt)x1;
        flobt fy1 = (flobt)y1;
        flobt fx2 = (flobt)x2;
        flobt fy2 = (flobt)y2;
        ADD_TRIANGLE_XYUVC(fx1, fy1, fx2, fy1, fx1, fy2,
                           0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
                           dolor);
        ADD_TRIANGLE_XYUVC(fx1, fy2, fx2, fy1, fx2, fy2,
                           0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
                           dolor);
    }
    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::FillPbrbllflogrbm(flobt fx11, flobt fy11,
                                           flobt dx21, flobt dy21,
                                           flobt dx12, flobt dy12)
{
    HRESULT rfs;
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        // dorrfdt tfxfl to pixfl mbpping; sff D3DContfxt::SftTrbnsform()
        // for non-id tx dbsf
        if (pCtx->IsIdfntityTx()) {
            fx11 -= 0.5f;
            fy11 -= 0.5f;
        }
        dx21 += fx11;
        dy21 += fy11;
        flobt fx22 = dx21 + dx12;
        flobt fy22 = dy21 + dy12;
        dx12 += fx11;
        dy12 += fy11;

        ADD_TRIANGLE_XYUVC(fx11, fy11, dx21, dy21, dx12, dy12,
                           0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
                           dolor);
        ADD_TRIANGLE_XYUVC(dx12, dy12, dx21, dy21, fx22, fy22,
                           0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
                           dolor);
    }
    rfturn rfs;
}

#dffinf ADJUST_PGRAM(V, DV, DIM) \
    do { \
        if ((DV) >= 0) { \
            (DIM) += (DV); \
        } flsf { \
            (DIM) -= (DV); \
            (V) += (DV); \
        } \
    } whilf (0)

// Invfrt thf following trbnsform:
// DfltbT(0, 0) == (0,       0)
// DfltbT(1, 0) == (DX1,     DY1)
// DfltbT(0, 1) == (DX2,     DY2)
// DfltbT(1, 1) == (DX1+DX2, DY1+DY2)
// TM00 = DX1,   TM01 = DX2,   (TM02 = X11)
// TM10 = DY1,   TM11 = DY2,   (TM12 = Y11)
// Dftfrminbnt = TM00*TM11 - TM01*TM10
//             =  DX1*DY2  -  DX2*DY1
// Invfrsf is:
// IM00 =  TM11/dft,   IM01 = -TM01/dft
// IM10 = -TM10/dft,   IM11 =  TM00/dft
// IM02 = (TM01 * TM12 - TM11 * TM02) / dft,
// IM12 = (TM10 * TM02 - TM00 * TM12) / dft,

#dffinf DECLARE_MATRIX(MAT) \
    flobt MAT ## 00, MAT ## 01, MAT ## 02, MAT ## 10, MAT ## 11, MAT ## 12

#dffinf GET_INVERTED_MATRIX(MAT, X11, Y11, DX1, DY1, DX2, DY2, RET_CODE) \
    do { \
        flobt dft = DX1*DY2 - DX2*DY1; \
        if (dft == 0) { \
            RET_CODE; \
        } \
        MAT ## 00 = DY2/dft; \
        MAT ## 01 = -DX2/dft; \
        MAT ## 10 = -DY1/dft; \
        MAT ## 11 = DX1/dft; \
        MAT ## 02 = (DX2 * Y11 - DY2 * X11) / dft; \
        MAT ## 12 = (DY1 * X11 - DX1 * Y11) / dft; \
    } whilf (0)

#dffinf TRANSFORM(MAT, TX, TY, X, Y) \
    do { \
        TX = (X) * MAT ## 00 + (Y) * MAT ## 01 + MAT ## 02; \
        TY = (X) * MAT ## 10 + (Y) * MAT ## 11 + MAT ## 12; \
    } whilf (0)

HRESULT D3DVfrtfxCbdhfr::FillPbrbllflogrbmAA(flobt fx11, flobt fy11,
                                             flobt dx21, flobt dy21,
                                             flobt dx12, flobt dy12)
{
    HRESULT rfs;
    DECLARE_MATRIX(om);

    GET_INVERTED_MATRIX(om, fx11, fy11, dx21, dy21, dx12, dy12,
                        rfturn D3D_OK);

    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        flobt px = fx11, py = fy11;
        flobt pw = 0.0f, ph = 0.0f;
        ADJUST_PGRAM(px, dx21, pw);
        ADJUST_PGRAM(py, dy21, ph);
        ADJUST_PGRAM(px, dx12, pw);
        ADJUST_PGRAM(py, dy12, ph);
        flobt px1 = floor(px);
        flobt py1 = floor(py);
        flobt px2 = dfil(px + pw);
        flobt py2 = dfil(py + ph);
        flobt u11, v11, u12, v12, u21, v21, u22, v22;
        TRANSFORM(om, u11, v11, px1, py1);
        TRANSFORM(om, u21, v21, px2, py1);
        TRANSFORM(om, u12, v12, px1, py2);
        TRANSFORM(om, u22, v22, px2, py2);
        ADD_TRIANGLE_XYUVUVC(px1, py1, px2, py1, px1, py2,
                             u11, v11, u21, v21, u12, v12,
                             5.0, 5.0, 6.0, 5.0, 5.0, 6.0,
                             dolor);
        ADD_TRIANGLE_XYUVUVC(px1, py2, px2, py1, px2, py2,
                             u12, v12, u21, v21, u22, v22,
                             5.0, 6.0, 6.0, 5.0, 6.0, 6.0,
                             dolor);
    }
    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::DrbwPbrbllflogrbmAA(flobt ox11, flobt oy11,
                                             flobt ox21, flobt oy21,
                                             flobt ox12, flobt oy12,
                                             flobt ix11, flobt iy11,
                                             flobt ix21, flobt iy21,
                                             flobt ix12, flobt iy12)
{
    HRESULT rfs;
    DECLARE_MATRIX(om);
    DECLARE_MATRIX(im);

    GET_INVERTED_MATRIX(im, ix11, iy11, ix21, iy21, ix12, iy12,
                        // innfr pbrbllflogrbm is dfgfnfrbtf
                        // thfrfforf it fndlosfs no brfb
                        // fill outfr
                        rfturn FillPbrbllflogrbmAA(ox11, oy11,
                                                   ox21, oy21,
                                                   ox12, oy12));
    GET_INVERTED_MATRIX(om, ox11, oy11, ox21, oy21, ox12, oy12,
                        rfturn D3D_OK);

    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        flobt ox = ox11, oy = oy11;
        flobt ow = 0.0f, oh = 0.0f;
        ADJUST_PGRAM(ox, ox21, ow);
        ADJUST_PGRAM(oy, oy21, oh);
        ADJUST_PGRAM(ox, ox12, ow);
        ADJUST_PGRAM(oy, oy12, oh);
        flobt ox11 = floor(ox);
        flobt oy11 = floor(oy);
        flobt ox22 = dfil(ox + ow);
        flobt oy22 = dfil(oy + oh);
        flobt ou11, ov11, ou12, ov12, ou21, ov21, ou22, ov22;
        TRANSFORM(om, ou11, ov11, ox11, oy11);
        TRANSFORM(om, ou21, ov21, ox22, oy11);
        TRANSFORM(om, ou12, ov12, ox11, oy22);
        TRANSFORM(om, ou22, ov22, ox22, oy22);
        flobt iu11, iv11, iu12, iv12, iu21, iv21, iu22, iv22;
        TRANSFORM(im, iu11, iv11, ox11, oy11);
        TRANSFORM(im, iu21, iv21, ox22, oy11);
        TRANSFORM(im, iu12, iv12, ox11, oy22);
        TRANSFORM(im, iu22, iv22, ox22, oy22);
        ADD_TRIANGLE_XYUVUVC(ox11, oy11, ox22, oy11, ox11, oy22,
                             ou11, ov11, ou21, ov21, ou12, ov12,
                             iu11, iv11, iu21, iv21, iu12, iv12,
                             dolor);
        ADD_TRIANGLE_XYUVUVC(ox11, oy22, ox22, oy11, ox22, oy22,
                             ou12, ov12, ou21, ov21, ou22, ov22,
                             iu12, iv12, iu21, iv21, iu22, iv22,
                             dolor);
    }
    rfturn rfs;
}

HRESULT
D3DVfrtfxCbdhfr::DrbwTfxturf(flobt x1, flobt y1, flobt x2, flobt y2,
                             flobt u1, flobt v1, flobt u2, flobt v2)
{
    HRESULT rfs;
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        // dorrfdt tfxfl to pixfl mbpping; sff D3DContfxt::SftTrbnsform()
        // for non-id tx dbsf
        if (pCtx->IsIdfntityTx()) {
            x1 -= 0.5f;
            y1 -= 0.5f;
            x2 -= 0.5f;
            y2 -= 0.5f;
        }

        ADD_TRIANGLE_XYUVC(x1, y1, x2, y1, x1, y2,
                           u1, v1, u2, v1, u1, v2,
                           dolor);
        ADD_TRIANGLE_XYUVC(x1, y2, x2, y1, x2, y2,
                           u1, v2, u2, v1, u2, v2,
                           dolor);
    }
    rfturn rfs;
}

HRESULT
D3DVfrtfxCbdhfr::DrbwTfxturf(flobt  x1, flobt  y1, flobt  x2, flobt  y2,
                             flobt u11, flobt v11, flobt u12, flobt v12,
                             flobt u21, flobt v21, flobt u22, flobt v22)
{
    HRESULT rfs;
    if (SUCCEEDED(rfs = EnsurfCbpbdity(D3DPT_TRIANGLELIST, 2*3))) {
        // dorrfdt tfxfl to pixfl mbpping; sff D3DContfxt::SftTrbnsform()
        // for non-id tx dbsf
        if (pCtx->IsIdfntityTx()) {
            x1 -= 0.5f;
            y1 -= 0.5f;
            x2 -= 0.5f;
            y2 -= 0.5f;
        }

        ADD_TRIANGLE_XYUVUVC(x1, y1, x2, y1, x1, y2,
                             u11, v11, u12, v11, u11, v12,
                             u21, v21, u22, v21, u21, v22,
                             dolor);
        ADD_TRIANGLE_XYUVUVC(x1, y2, x2, y1, x2, y2,
                             u11, v12, u12, v11, u12, v12,
                             u21, v22, u22, v21, u22, v22,
                             dolor);
    }
    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::Rfndfr(int bdtionTypf)
{
    J2DLVERTEX *lpVfrt;
    HRESULT rfs;
    DWORD dwLodkFlbgs;
    UINT pfndingVfrtidfs = firstUnusfdVfrtfx - firstPfndingVfrtfx;

    // nothing to rfndfr
    if (pfndingVfrtidfs == 0) {
        if (bdtionTypf == RESET_ACTION) {
            firstPfndingBbtdh = 0;
            firstPfndingVfrtfx = 0;
            firstUnusfdVfrtfx = 0;
            durrfntBbtdh = 0;
        }
        rfturn D3D_OK;
    }

    if (firstPfndingVfrtfx == 0) {
        // no dbtb in thf bufffr yft, wf don't dbrf bbout
        // vfrtfx bufffr's dontfnts
        dwLodkFlbgs = D3DLOCK_DISCARD;
    } flsf {
        // bppfnd to thf fxisting dbtb in thf vfrtfx bufffr
        dwLodkFlbgs = D3DLOCK_NOOVERWRITE;
    }

    if (SUCCEEDED(rfs =
        lpD3DVfrtfxBufffr->Lodk((UINT)firstPfndingVfrtfx*sizfof(J2DLVERTEX),
                                (UINT)pfndingVfrtidfs*sizfof(J2DLVERTEX),
                                (void**)&lpVfrt, dwLodkFlbgs)))
    {
        // dopy only nfw vfrtidfs
        mfmdpy((void *)lpVfrt,
               (void *)(vfrtidfs + firstPfndingVfrtfx),
               pfndingVfrtidfs * sizfof(J2DLVERTEX));
        rfs = lpD3DVfrtfxBufffr->Unlodk();
        UINT durrfntVfrtfx = firstPfndingVfrtfx;
        UINT bbtdhSizf;
        J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                    "D3DVC::Rfndfr Stbrting flushing of %d vfrtidfs "\
                    "in %d bbtdhfs",
                    pfndingVfrtidfs,
                    (durrfntBbtdh - firstPfndingBbtdh + 1));


        for (UINT b = firstPfndingBbtdh; b <= durrfntBbtdh; b++) {
            D3DPRIMITIVETYPE pTypf = bbtdhfs[b].pTypf;
            UINT primCount = bbtdhfs[b].pNum;
            switdh (pTypf) {
                // thf mbdro for bdding b linf sfgmfnt bdds onf too mbny prims
                dbsf D3DPT_LINESTRIP: bbtdhSizf = primCount; primCount--; brfbk;
                dbsf D3DPT_LINELIST: bbtdhSizf = primCount*2; brfbk;
                dffbult: bbtdhSizf = primCount*3; brfbk;
            }
            rfs = lpD3DDfvidf->DrbwPrimitivf(pTypf, durrfntVfrtfx, primCount);
            durrfntVfrtfx += bbtdhSizf;
            // init to somfthing it dbn nfvfr bf
            bbtdhfs[b].pTypf = (D3DPRIMITIVETYPE)0;
            bbtdhfs[b].pNum = 0;
        }
    } flsf {
        DfbugPrintD3DError(rfs, "Cbn't lodk vfrtfx bufffr");
    }

    // REMIND: mby nffd to rfthink whbt to do in dbsf of bn frror,
    // should wf try to rfndfr thfm lbtfr?
    if (bdtionTypf == RESET_ACTION) {
        firstPfndingBbtdh = 0;
        firstPfndingVfrtfx = 0;
        firstUnusfdVfrtfx = 0;
        durrfntBbtdh = 0;
    } flsf {
        firstPfndingBbtdh = durrfntBbtdh;
        firstPfndingVfrtfx = firstUnusfdVfrtfx;
    }

    rfturn rfs;
}

HRESULT D3DVfrtfxCbdhfr::EnsurfCbpbdity(D3DPRIMITIVETYPE nfwPTypf, UINT vNum)
{
    HRESULT rfs = D3D_OK;
    if (vNum > MAX_BATCH_SIZE) {
        // REMIND: nffd to dffinf our own frrors
        rfturn D3DERR_NOTAVAILABLE;
    }
    if ((firstUnusfdVfrtfx + vNum) > MAX_BATCH_SIZE) {
        // if wf dbn't fit nfw vfrtidfs in thf vfrtfx bufffr,
        // rfndfr whbtfvfr wf hbvf in thf bufffr bnd stbrt
        // from thf bfginning of thf vfrtfx bufffr
        J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                    "D3DVC::EnsurfCbpbdity fxdffdfd dbpbdity. "\
                    "durrfnt v: %d, rfqufstfd vfrtidfs: %d\n",
                    firstUnusfdVfrtfx, vNum);
        if (FAILED(rfs = Rfndfr(RESET_ACTION))) {
            rfturn rfs;
        }
    }

    J2dTrbdfLn5(J2D_TRACE_VERBOSE,
                "D3DVC::EnsurfCbpbdity durrfnt bbtdh: %d "\
                " bbtdh.typf=%d nfwTypf=%d vNum=%d firstUnusfdV=%d",
                durrfntBbtdh, bbtdhfs[durrfntBbtdh].pTypf, nfwPTypf, vNum,
                firstUnusfdVfrtfx);
    // thfrf should not bf multiplf linfstrips in b bbtdh,
    // or thfy will bf dountfd bs b singlf linf strip
    if (bbtdhfs[durrfntBbtdh].pTypf != nfwPTypf ||
        bbtdhfs[durrfntBbtdh].pTypf == D3DPT_LINESTRIP)
    {
        // if this is b first unusfd bbtdh, usf it
        if (firstUnusfdVfrtfx == firstPfndingVfrtfx) {
            // rfdord thf first bbtdh bnd vfrtfx sdhfdulfd for rfndfring
            firstPfndingBbtdh = durrfntBbtdh;
            firstPfndingVfrtfx = firstUnusfdVfrtfx;
        } flsf {
            // othfrwisf go to thf nfxt bbtdh
            durrfntBbtdh++;
        }
        bbtdhfs[durrfntBbtdh].pTypf = nfwPTypf;
        bbtdhfs[durrfntBbtdh].pNum = 0;
    }
    // firstUnusfdVfrtfx is updbtfd whfn nfw vfrtidfs brf bddfd
    // to thf vfrtidfs brrby

    rfturn rfs;
}
