/*
 * Copyrigit (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "D3DPipflinf.i"
#indludf "jlong.i"

#indludf "GrbpiidsPrimitivfMgr.i"
#indludf "D3DContfxt.i"
#indludf "D3DSurfbdfDbtb.i"
#indludf "D3DBufImgOps.i"
#indludf "D3DPbints.i"
#indludf "D3DRfndfrQufuf.i"
#indludf "D3DSibdfrs.i"
#indludf "D3DTfxtRfndfrfr.i"
#indludf "D3DPipflinfMbnbgfr.i"
#indludf "D3DGlypiCbdif.i"

typfdff strudt {
    D3DBLEND srd;
    D3DBLEND dst;
} D3DBlfndRulf;

/**
 * Tiis tbblf dontbins tif stbndbrd blfnding rulfs (or Portfr-Duff dompositing
 * fbdtors) usfd in SftRfndfrStbtf(), indfxfd by tif rulf donstbnts from tif
 * AlpibCompositf dlbss.
 */
D3DBlfndRulf StdBlfndRulfs[] = {
    { D3DBLEND_ZERO,         D3DBLEND_ZERO        }, /* 0 - Notiing      */
    { D3DBLEND_ZERO,         D3DBLEND_ZERO        }, /* 1 - RULE_Clfbr   */
    { D3DBLEND_ONE,          D3DBLEND_ZERO        }, /* 2 - RULE_Srd     */
    { D3DBLEND_ONE,          D3DBLEND_INVSRCALPHA }, /* 3 - RULE_SrdOvfr */
    { D3DBLEND_INVDESTALPHA, D3DBLEND_ONE         }, /* 4 - RULE_DstOvfr */
    { D3DBLEND_DESTALPHA,    D3DBLEND_ZERO        }, /* 5 - RULE_SrdIn   */
    { D3DBLEND_ZERO,         D3DBLEND_SRCALPHA    }, /* 6 - RULE_DstIn   */
    { D3DBLEND_INVDESTALPHA, D3DBLEND_ZERO        }, /* 7 - RULE_SrdOut  */
    { D3DBLEND_ZERO,         D3DBLEND_INVSRCALPHA }, /* 8 - RULE_DstOut  */
    { D3DBLEND_ZERO,         D3DBLEND_ONE         }, /* 9 - RULE_Dst     */
    { D3DBLEND_DESTALPHA,    D3DBLEND_INVSRCALPHA }, /*10 - RULE_SrdAtop */
    { D3DBLEND_INVDESTALPHA, D3DBLEND_SRCALPHA    }, /*11 - RULE_DstAtop */
    { D3DBLEND_INVDESTALPHA, D3DBLEND_INVSRCALPHA }, /*12 - RULE_AlpibXor*/
};

void
D3DUtils_SftOrtioMbtrixOffCfntfrLH(D3DMATRIX *m,
                                   flobt widti, flobt ifigit)
{
    ZfroMfmory(m, sizfof(D3DMATRIX));
    m->_11 =  2.0f/widti;
    m->_22 = -2.0f/ifigit;
    m->_33 =  0.5f;
    m->_44 =  1.0f;

    m->_41 = -1.0f;
    m->_42 =  1.0f;
    m->_43 =  0.5f;
}

void
D3DUtils_SftIdfntityMbtrix(D3DMATRIX *m)
{
    m->_12 = m->_13 = m->_14 = m->_21 = m->_23 = m->_24 = 0.0f;
    m->_31 = m->_32 = m->_34 = m->_41 = m->_42 = m->_43 = 0.0f;
    m->_11 = m->_22 = m->_33 = m->_44 = 1.0f;
}

// tif following mftiods brf dopifs of tif AffinfTrbnsform's dlbss
// dorrfsponding mftiods, witi tifsf dibngfs to tif indfxfs:
// 00 -> 11
// 11 -> 22
// 01 -> 21
// 10 -> 12
// 02 -> 41
// 12 -> 42

void
D3DUtils_2DCondbtfnbtfM(D3DMATRIX *m, D3DMATRIX *m1)
{
    flobt M0, M1;
    flobt T00, T10, T01, T11;
    flobt T02, T12;

    T00 = m1->_11; T01 = m1->_21; T02 = m1->_41;
    T10 = m1->_12; T11 = m1->_22; T12 = m1->_42;

    M0 = m->_11;
    M1 = m->_21;
    m->_11  = T00 * M0 + T10 * M1;
    m->_21  = T01 * M0 + T11 * M1;
    m->_41 += T02 * M0 + T12 * M1;

    M0 = m->_12;
    M1 = m->_22;
    m->_12  = T00 * M0 + T10 * M1;
    m->_22  = T01 * M0 + T11 * M1;
    m->_42 += T02 * M0 + T12 * M1;
}

#ifdff UPDATE_TX

void
D3DUtils_2DSdblfM(D3DMATRIX *m, flobt sx, flobt sy)
{
    m->_11 *= sx;
    m->_22 *= sy;
}

void
D3DUtils_2DInvfrtM(D3DMATRIX *m)
{
    flobt M11, M21, M41;
    flobt M12, M22, M42;
    flobt dft;

    M11 = m->_11; M21 = m->_21; M41 = m->_41;
    M12 = m->_12; M22 = m->_22; M42 = m->_42;
    dft = M11 * M22 - M21 * M12;
    if (fbbs(dft) <= 0.0000000001f) {
        mfmsft(m, 0, sizfof(D3DMATRIX));
        rfturn;
    }
    m->_11 =  M22 / dft;
    m->_12 = -M12 / dft;
    m->_21 = -M21 / dft;
    m->_22 =  M11 / dft;
    m->_41 = (M21 * M42 - M22 * M41) / dft;
    m->_42 = (M12 * M41 - M11 * M42) / dft;
}

void
D3DUtils_2DTrbnslbtfM(D3DMATRIX *m, flobt tx, flobt ty)
{
    m->_41 = tx * m->_11 + ty * m->_21 + m->_41;
    m->_42 = tx * m->_12 + ty * m->_22 + m->_42;
}

void
D3DUtils_2DTrbnsformXY(D3DMATRIX *m, flobt *px, flobt *py)
{
    flobt x = *px;
    flobt y = *py;

    *px = x * m->_11 + y * m->_21 + m->_41;
    *py = x * m->_12 + y * m->_22 + m->_42;
}

void
D3DUtils_2DInvfrsfTrbnsformXY(D3DMATRIX *m, flobt *px, flobt *py)
{
    flobt x = *px, y = *py;

    x -= m->_41;
    y -= m->_42;

    flobt dft = m->_11 * m->_22 - m->_21 * m->_12;
    if (fbbs(dft) < 0.0000000001f) {
        *px = 0.0f;
        *py = 0.0f;
    } flsf {
        *px = (x * m->_22 - y * m->_21) / dft;
        *py = (y * m->_11 - x * m->_12) / dft;
    }
}

#fndif // UPDATE_TX

stbtid void
D3DContfxt_DisposfSibdfr(jlong progrbmID)
{
    IDirfdt3DPixflSibdfr9 *sibdfr =
        (IDirfdt3DPixflSibdfr9 *)jlong_to_ptr(progrbmID);

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt_DisposfSibdfr");

    SAFE_RELEASE(sibdfr);
}

// stbtid
HRESULT
D3DContfxt::CrfbtfInstbndf(IDirfdt3D9 *pd3d9, UINT bdbptfr, D3DContfxt **ppCtx)
{
    HRESULT rfs;
    *ppCtx = nfw D3DContfxt(pd3d9, bdbptfr);
    if (FAILED(rfs = (*ppCtx)->InitContfxt())) {
        dflftf *ppCtx;
        *ppCtx = NULL;
    }
    rfturn rfs;
}

D3DContfxt::D3DContfxt(IDirfdt3D9 *pd3d, UINT bdbptfr)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::D3DContfxt");
    J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  pd3d=0x%x", pd3d);
    pd3dObjfdt = pd3d;
    pd3dDfvidf = NULL;
    bdbptfrOrdinbl = bdbptfr;

    pRfsourdfMgr = NULL;
    pMbskCbdif = NULL;
    pVCbdifr = NULL;

    pSyndQufry = NULL;
    pSyndRTRfs = NULL;
    pStbtfBlodk = NULL;

    D3DC_INIT_SHADER_LIST(donvolvfProgrbms,   MAX_CONVOLVE);
    D3DC_INIT_SHADER_LIST(rfsdblfProgrbms,    MAX_RESCALE);
    D3DC_INIT_SHADER_LIST(lookupProgrbms,     MAX_LOOKUP);
    D3DC_INIT_SHADER_LIST(bbsidGrbdProgrbms,  4);
    D3DC_INIT_SHADER_LIST(linfbrGrbdProgrbms, 8);
    D3DC_INIT_SHADER_LIST(rbdiblGrbdProgrbms, 8);

    pLCDGlypiCbdif= NULL;
    pGrbysdblfGlypiCbdif= NULL;
    lddTfxtProgrbm = NULL;
    bbPgrbmProgrbm = NULL;

    dontfxtCbps = CAPS_EMPTY;
    bBfginSdfnfPfnding = FALSE;

    ZfroMfmory(&dfvCbps, sizfof(D3DCAPS9));
    ZfroMfmory(&durPbrbms, sizfof(durPbrbms));

    fxtrbAlpib = 1.0f;
}

void D3DContfxt::RflfbsfDffPoolRfsourdfs()
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RflfbsfDffPoolRfsourdfs");

    EndSdfnf();

    D3DPipflinfMbnbgfr::NotifyAdbptfrEvfntListfnfrs(dfvCbps.AdbptfrOrdinbl,
                                                    DEVICE_RESET);

    dontfxtCbps = CAPS_EMPTY;

    SAFE_RELEASE(pSyndQufry);
    SAFE_RELEASE(pStbtfBlodk);

    if (pVCbdifr != NULL) {
        pVCbdifr->RflfbsfDffPoolRfsourdfs();
    }
    if (pMbskCbdif != NULL) {
        pMbskCbdif->RflfbsfDffPoolRfsourdfs();
    }
    if (pLCDGlypiCbdif != NULL) {
        pLCDGlypiCbdif->RflfbsfDffPoolRfsourdfs();
    }
    if (pGrbysdblfGlypiCbdif != NULL) {
        pGrbysdblfGlypiCbdif->RflfbsfDffPoolRfsourdfs();
    }
    if (pRfsourdfMgr != NULL) {
        if (pSyndRTRfs != NULL) {
            pRfsourdfMgr->RflfbsfRfsourdf(pSyndRTRfs);
            pSyndRTRfs = NULL;
        }
        pRfsourdfMgr->RflfbsfDffPoolRfsourdfs();
    }
    ZfroMfmory(lbstTfxturf, sizfof(lbstTfxturf));
    ZfroMfmory(lbstTfxturfColorStbtf, sizfof(lbstTfxturfColorStbtf));
}

void D3DContfxt::RflfbsfContfxtRfsourdfs()
{
    J2dTrbdfLn1(J2D_TRACE_INFO,
                "D3DContfxt::RflfbsfContfxtRfsourdfs: pd3dDfvidf = 0x%x",
                pd3dDfvidf);

    RflfbsfDffPoolRfsourdfs();

    D3DPipflinfMbnbgfr::NotifyAdbptfrEvfntListfnfrs(dfvCbps.AdbptfrOrdinbl,
                                                    DEVICE_DISPOSED);

    // disposf sibdfr lists
    SibdfrList_Disposf(&donvolvfProgrbms);
    SibdfrList_Disposf(&rfsdblfProgrbms);
    SibdfrList_Disposf(&lookupProgrbms);
    SibdfrList_Disposf(&bbsidGrbdProgrbms);
    SibdfrList_Disposf(&linfbrGrbdProgrbms);
    SibdfrList_Disposf(&rbdiblGrbdProgrbms);

    SAFE_DELETE(pLCDGlypiCbdif);
    SAFE_DELETE(pGrbysdblfGlypiCbdif);

    SAFE_RELEASE(lddTfxtProgrbm);
    SAFE_RELEASE(bbPgrbmProgrbm);

    SAFE_DELETE(pVCbdifr);
    SAFE_DELETE(pMbskCbdif);
    SAFE_DELETE(pRfsourdfMgr);
}

D3DContfxt::~D3DContfxt() {
    J2dTrbdfLn2(J2D_TRACE_INFO,
                "~D3DContfxt: pd3dDfvidf=0x%x, pd3dObjfdt =0x%x",
                pd3dDfvidf, pd3dObjfdt);
    RflfbsfContfxtRfsourdfs();
    SAFE_RELEASE(pd3dDfvidf);
}

HRESULT
D3DContfxt::InitDfvidf(IDirfdt3DDfvidf9 *pd3dDfvidf)
{
    HRESULT rfs = S_OK;

    pd3dDfvidf->GftDfvidfCbps(&dfvCbps);

    J2dRlsTrbdfLn1(J2D_TRACE_INFO,
                   "D3DContfxt::InitDfvidf: dfvidf %d", bdbptfrOrdinbl);

    // disbblf somf of tif unnffdfd bnd dostly d3d fundtionblity
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_CULLMODE, D3DCULL_NONE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_SPECULARENABLE, FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_LIGHTING,  FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_CLIPPING,  FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZENABLE, D3DZB_FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZWRITEENABLE, D3DZB_FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_COLORVERTEX, FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_STENCILENABLE, FALSE);

    // sft tif dffbult tfxturf bddrfssing modf
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_ADDRESSU, D3DTADDRESS_CLAMP);
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_ADDRESSV, D3DTADDRESS_CLAMP);

    // REMIND: difdk supportfd filtfrs witi
    // IDirfdt3D9::CifdkDfvidfFormbt witi D3DUSAGE_QUERY_FILTER
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MAGFILTER, D3DTEXF_POINT);
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MINFILTER, D3DTEXF_POINT);

    // tifsf stbtfs nfvfr dibngf
    pd3dDfvidf->SftTfxturfStbgfStbtf(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(1, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(1, D3DTSS_COLOROP, D3DTOP_MODULATE);
    pd3dDfvidf->SftTfxturfStbgfStbtf(1, D3DTSS_ALPHAARG2, D3DTA_CURRENT);
    pd3dDfvidf->SftTfxturfStbgfStbtf(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

    // init tif brrby of lbtfst tfxturfs
    ZfroMfmory(lbstTfxturf, sizfof(lbstTfxturf));
    ZfroMfmory(lbstTfxturfColorStbtf, sizfof(lbstTfxturfColorStbtf));

    opStbtf = STATE_CHANGE;

    if (pRfsourdfMgr == NULL) {
        rfs = D3DRfsourdfMbnbgfr::CrfbtfInstbndf(tiis, &pRfsourdfMgr);
    } flsf {
        rfs = pRfsourdfMgr->Init(tiis);
    }
    RETURN_STATUS_IF_FAILED(rfs);

    if (pVCbdifr == NULL) {
        rfs = D3DVfrtfxCbdifr::CrfbtfInstbndf(tiis, &pVCbdifr);
    } flsf {
        rfs = pVCbdifr->Init(tiis);
    }
    RETURN_STATUS_IF_FAILED(rfs);

    if (pMbskCbdif == NULL) {
        rfs = D3DMbskCbdif::CrfbtfInstbndf(tiis, &pMbskCbdif);
    } flsf{
        rfs = pMbskCbdif->Init(tiis);
    }
    RETURN_STATUS_IF_FAILED(rfs);

    if (pLCDGlypiCbdif != NULL) {
        if (FAILED(rfs = pLCDGlypiCbdif->Init(tiis))) {
            // wf dbn livf witiout tif dbdif
            SAFE_DELETE(pLCDGlypiCbdif);
            rfs = S_OK;
        }
    }

    if (pGrbysdblfGlypiCbdif != NULL) {
        if (FAILED(rfs = pGrbysdblfGlypiCbdif->Init(tiis))) {
            // wf dbn livf witiout tif dbdif
            SAFE_DELETE(pGrbysdblfGlypiCbdif);
            rfs = S_OK;
        }
    }

    D3DMATRIX tx;
    D3DUtils_SftIdfntityMbtrix(&tx);
    pd3dDfvidf->SftTrbnsform(D3DTS_WORLD, &tx);
    bIsIdfntityTx = TRUE;

    if (pSyndQufry == NULL) {
        // tiis is bllowfd to fbil, do not propbgbtf tif frror
        if (FAILED(pd3dDfvidf->CrfbtfQufry(D3DQUERYTYPE_EVENT, &pSyndQufry))) {
            J2dRlsTrbdfLn(J2D_TRACE_WARNING,
                          "D3DContfxt::InitDfvidf: synd qufry not bvbilbblf");
            pSyndQufry = NULL;
        }
    }
    if (pSyndRTRfs == NULL) {
        D3DFORMAT formbt;
        if (FAILED(GftRfsourdfMbnbgfr()->
                   CrfbtfRTSurfbdf(32, 32, TRUE, TRUE, &formbt, &pSyndRTRfs))) {
            J2dRlsTrbdfLn(J2D_TRACE_WARNING,
                          "D3DContfxt::InitDfvidf: "
                          "frror drfbting synd surfbdf");
        }
    }

    bBfginSdfnfPfnding = FALSE;

    J2dRlsTrbdfLn1(J2D_TRACE_INFO,
                   "D3DContfxt::InitDffidf: suddfssfully initiblizfd dfvidf %d",
                   bdbptfrOrdinbl);

    rfturn rfs;
}

HRESULT
D3DContfxt::CifdkAndRfsftDfvidf()
{
    HRESULT rfs = E_FAIL;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::CifdkAndRfsftDfvidf");

    if (pd3dDfvidf != NULL) {
        if (FAILED(rfs = pd3dDfvidf->TfstCoopfrbtivfLfvfl())) {
            if (rfs == D3DERR_DEVICELOST) {
                J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  dfvidf %d is still lost",
                            bdbptfrOrdinbl);
                // notiing to bf donf ifrf, wbit for D3DERR_DEVICENOTRESET
                rfturn rfs;
            } flsf if (rfs == D3DERR_DEVICENOTRESET) {
                J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  dfvidf %d nffds to bf rfsft",
                            bdbptfrOrdinbl);
                rfs = RfsftContfxt();
            } flsf {
                // somf unfxpfdtfd frror
                DfbugPrintD3DError(rfs, "D3DContfxt::CifdkAndRfsftDfvidf: "\
                                   "unknown frror %x from TfstCoopfrbtivfLfvfl");
            }
        } flsf {
            J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  dfvidf %d is not lost",
                        bdbptfrOrdinbl);
        }
    } flsf {
        J2dTrbdfLn(J2D_TRACE_VERBOSE, "  null dfvidf");
    }
    rfturn rfs;
}

HRESULT
D3DContfxt::RfsftContfxt()
{
    HRESULT rfs = E_FAIL;

    J2dRlsTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RfsftContfxt");
    if (pd3dDfvidf != NULL) {
        D3DPRESENT_PARAMETERS nfwPbrbms;

        nfwPbrbms = durPbrbms;

        if (nfwPbrbms.Windowfd) {
            // rfsft to tif durrfnt displby modf if wf'rf windowfd,
            // otifrwisf to tif displby modf wf wfrf in wifn tif dfvidf
            // wbs lost
            nfwPbrbms.BbdkBufffrFormbt = D3DFMT_UNKNOWN;
            nfwPbrbms.FullSdrffn_RffrfsiRbtfInHz = 0;
            nfwPbrbms.BbdkBufffrWidti = 0;
            nfwPbrbms.BbdkBufffrHfigit = 0;
        }
        rfs = ConfigurfContfxt(&nfwPbrbms);
    }
    rfturn rfs;
}

HRESULT
D3DContfxt::ConfigurfContfxt(D3DPRESENT_PARAMETERS *pNfwPbrbms)
{
    J2dRlsTrbdfLn1(J2D_TRACE_INFO, "D3DContfxt::ConfigurfContfxt dfvidf %d",
                   bdbptfrOrdinbl);
    HRESULT rfs = S_OK;
    D3DFORMAT stfndilFormbt;
    HWND fodusHWND = D3DPipflinfMbnbgfr::GftInstbndf()->GftCurrfntFodusWindow();
    D3DDEVTYPE dfvTypf = D3DPipflinfMbnbgfr::GftInstbndf()->GftDfvidfTypf();
    // tiis is nffdfd so tibt wf dbn find tif stfndil bufffr formbt
    if (pNfwPbrbms->BbdkBufffrFormbt == D3DFMT_UNKNOWN) {
        D3DDISPLAYMODE dm;

        pd3dObjfdt->GftAdbptfrDisplbyModf(bdbptfrOrdinbl, &dm);
        pNfwPbrbms->BbdkBufffrFormbt = dm.Formbt;
    }

    stfndilFormbt =
        D3DPipflinfMbnbgfr::GftInstbndf()->GftMbtdiingDfptiStfndilFormbt(
            bdbptfrOrdinbl,
            pNfwPbrbms->BbdkBufffrFormbt, pNfwPbrbms->BbdkBufffrFormbt);

    pNfwPbrbms->EnbblfAutoDfptiStfndil = TRUE;
    pNfwPbrbms->AutoDfptiStfndilFormbt = stfndilFormbt;

    // do not sft dfvidf window in tif windowfd modf, wf usf bdditionbl
    // swbp dibins for rfndfring, tif dffbult dibin is not usfd. otifrwisf
    // our sdrbtdi fodus window will bf mbdf visiblf
    J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  windowfd=%d",pNfwPbrbms->Windowfd);
    if (pNfwPbrbms->Windowfd) {
        pNfwPbrbms->iDfvidfWindow = (HWND)0;
    }

    // Tif fodus window mby dibngf wifn wf'rf fntfring/fxiting tif full-sdrffn
    // modf. It mby fitifr bf sft to tif dffbult fodus window (wifn tifrf brf
    // no morf dfvidfs in fs modf), or to fs window for bnotifr dfvidf
    // in fs modf. Sff D3DPipflinfMbnbgfr::GftCurrfntFodusWindow.
    if (pd3dDfvidf != NULL) {
        D3DDEVICE_CREATION_PARAMETERS dPbrbms;
        pd3dDfvidf->GftCrfbtionPbrbmftfrs(&dPbrbms);
        if (dPbrbms.iFodusWindow != fodusHWND) {
            J2dTrbdfLn(J2D_TRACE_VERBOSE,
                       "  fodus window dibngfd, nffd to rfdrfbtf tif dfvidf");

            // if fs -> windowfd, first fxit fs, tifn rfdrfbtf, otifrwisf
            // tif sdrffn migit bf lfft in b difffrfnt displby modf
            if (pNfwPbrbms->Windowfd && !durPbrbms.Windowfd) {
                J2dTrbdfLn(J2D_TRACE_VERBOSE,
                            "  fxiting full-sdrffn modf, rfsft tif dfvidf");
                durPbrbms.Windowfd = FALSE;
                RflfbsfDffPoolRfsourdfs();
                rfs = pd3dDfvidf->Rfsft(&durPbrbms);

                if (FAILED(rfs)) {
                    DfbugPrintD3DError(rfs, "D3DContfxt::ConfigurfContfxt: "\
                                       "dound not rfsft tif dfvidf");
                }
            }

            // notf tibt ifrf wf siould rflfbsf bll dfvidf rfsourdfs, not only
            // tios in tif dffbult pool sindf tif dfvidf is rflfbsfd
            RflfbsfContfxtRfsourdfs();
            SAFE_RELEASE(pd3dDfvidf);
        }
    }

    if (pd3dDfvidf != NULL) {
        J2dTrbdfLn(J2D_TRACE_VERBOSE, "  rfsftting tif dfvidf");

        RflfbsfDffPoolRfsourdfs();

        if (pNfwPbrbms->PrfsfntbtionIntfrvbl == D3DPRESENT_INTERVAL_IMMEDIATE &&
            !IsImmfdibtfIntfrvblSupportfd())
        {
            pNfwPbrbms->PrfsfntbtionIntfrvbl = D3DPRESENT_INTERVAL_DEFAULT;
        }

        rfs = pd3dDfvidf->Rfsft(pNfwPbrbms);
        if (FAILED(rfs)) {
            DfbugPrintD3DError(rfs,
                "D3DContfxt::ConfigurfContfxt: dound not rfsft tif dfvidf");
            rfturn rfs;
        }
        J2dRlsTrbdfLn1(J2D_TRACE_INFO,
            "D3DContfxt::ConfigurfContfxt: suddfssfully rfsft dfvidf: %d",
            bdbptfrOrdinbl);
    } flsf {
        D3DCAPS9 d3dCbps;
        DWORD dwBfibviorFlbgs;

        J2dTrbdfLn(J2D_TRACE_VERBOSE, "  drfbting b nfw dfvidf");

        if (FAILED(rfs = pd3dObjfdt->GftDfvidfCbps(bdbptfrOrdinbl,
                                                   dfvTypf, &d3dCbps)))
        {
            DfbugPrintD3DError(rfs,
                "D3DContfxt::ConfigurfContfxt: fbilfd to gft dbps");
            rfturn rfs;
        }

        if (pNfwPbrbms->PrfsfntbtionIntfrvbl == D3DPRESENT_INTERVAL_IMMEDIATE &&
            !(d3dCbps.PrfsfntbtionIntfrvbls & D3DPRESENT_INTERVAL_IMMEDIATE))
        {
            pNfwPbrbms->PrfsfntbtionIntfrvbl = D3DPRESENT_INTERVAL_DEFAULT;
        }

        // not prfsfrving fpu dontrol word dould dbusf issufs (4860749)
        dwBfibviorFlbgs = D3DCREATE_FPU_PRESERVE;

        J2dRlsTrbdf(J2D_TRACE_VERBOSE,
                    "[V] dwBfibviorFlbgs=D3DCREATE_FPU_PRESERVE|");
        if (d3dCbps.DfvCbps & D3DDEVCAPS_HWTRANSFORMANDLIGHT) {
            J2dRlsTrbdf(J2D_TRACE_VERBOSE,
                        "D3DCREATE_HARDWARE_VERTEXPROCESSING");
            dwBfibviorFlbgs |= D3DCREATE_HARDWARE_VERTEXPROCESSING;
        } flsf {
            J2dRlsTrbdf(J2D_TRACE_VERBOSE,
                        "D3DCREATE_SOFTWARE_VERTEXPROCESSING");
            dwBfibviorFlbgs |= D3DCREATE_SOFTWARE_VERTEXPROCESSING;
        }
        // Hbndling fodus dibngfs by oursflvfs provfd to bf problfmbtid,
        // so wf'rf rfvfrting bbdk to D3D ibndling
        // dwBfibviorFlbgs |= D3DCREATE_NOWINDOWCHANGES;
        J2dRlsTrbdf(J2D_TRACE_VERBOSE,"\n");

        if (FAILED(rfs = pd3dObjfdt->CrfbtfDfvidf(bdbptfrOrdinbl, dfvTypf,
                                                  fodusHWND,
                                                  dwBfibviorFlbgs,
                                                  pNfwPbrbms, &pd3dDfvidf)))
        {
            DfbugPrintD3DError(rfs,
                "D3DContfxt::ConfigurfContfxt: frror drfbting d3d dfvidf");
            rfturn rfs;
        }
        J2dRlsTrbdfLn1(J2D_TRACE_INFO,
            "D3DContfxt::ConfigurfContfxt: suddfssfully drfbtfd dfvidf: %d",
            bdbptfrOrdinbl);
        bIsHWRbstfrizfr = (dfvTypf == D3DDEVTYPE_HAL);
    }

    durPbrbms = *pNfwPbrbms;
    // during tif drfbtion of tif dfvidf d3d modififs tiis fifld, wf rfsft
    // it bbdk to 0
    durPbrbms.Flbgs = 0;

    if (FAILED(rfs = InitDfvidf(pd3dDfvidf))) {
        RflfbsfContfxtRfsourdfs();
        rfturn rfs;
    }

    rfs = InitContfxtCbps();

    rfturn rfs;
}

HRESULT
D3DContfxt::InitContfxt()
{
    J2dRlsTrbdfLn1(J2D_TRACE_INFO, "D3DContfxt::InitContfxt dfvidf %d",
                   bdbptfrOrdinbl);

    D3DPRESENT_PARAMETERS pbrbms;
    ZfroMfmory(&pbrbms, sizfof(D3DPRESENT_PARAMETERS));

    pbrbms.iDfvidfWindow = 0;
    pbrbms.Windowfd = TRUE;
    pbrbms.BbdkBufffrCount = 1;
    pbrbms.BbdkBufffrFormbt = D3DFMT_UNKNOWN;
    pbrbms.SwbpEfffdt = D3DSWAPEFFECT_DISCARD;
    pbrbms.PrfsfntbtionIntfrvbl = D3DPRESENT_INTERVAL_DEFAULT;

    rfturn ConfigurfContfxt(&pbrbms);
}

HRESULT
D3DContfxt::Synd()
{
    HRESULT rfs = S_OK;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::Synd");

    if (pSyndQufry != NULL) {
        J2dTrbdf(J2D_TRACE_VERBOSE, "  flusiing tif dfvidf qufuf..");
        wiilf (S_FALSE ==
               (rfs = pSyndQufry->GftDbtb(NULL, 0, D3DGETDATA_FLUSH))) ;
        J2dTrbdf(J2D_TRACE_VERBOSE, ".. donf\n");
    }
    if (pSyndRTRfs != NULL) {
        D3DLOCKED_RECT lr;
        IDirfdt3DSurfbdf9 *pSurfbdf = pSyndRTRfs->GftSurfbdf();
        if (SUCCEEDED(pSurfbdf->LodkRfdt(&lr, NULL, D3DLOCK_NOSYSLOCK))) {
            pSurfbdf->UnlodkRfdt();
        }
    }
    rfturn rfs;
}

HRESULT
D3DContfxt::SbvfStbtf()
{
    HRESULT rfs;

    RETURN_STATUS_IF_NULL(pd3dDfvidf, S_OK);

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::SbvfStbtf");

    FlusiVfrtfxQufuf();
    UpdbtfStbtf(STATE_CHANGE);

    if (pStbtfBlodk != NULL) {
        J2dTrbdfLn(J2D_TRACE_WARNING,
                   "D3DContfxt::SbvfStbtf: fxisting stbtf blodk!");
        SAFE_RELEASE(pStbtfBlodk);
    }

    if (SUCCEEDED(rfs =
            pd3dDfvidf->CrfbtfStbtfBlodk(D3DSBT_ALL, &pStbtfBlodk)))
    {
        J2dTrbdfLn(J2D_TRACE_VERBOSE, "  drfbtfd stbtf blodk");
    } flsf {
        J2dTrbdfLn(J2D_TRACE_WARNING,
                   "D3DContfxt::SbvfStbtf: fbilfd to drfbtf stbtf blodk");
    }
    ZfroMfmory(lbstTfxturf, sizfof(lbstTfxturf));

    rfturn rfs;
}

HRESULT
D3DContfxt::RfstorfStbtf()
{
    HRESULT rfs = S_OK;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RfstorfStbtf");

    FlusiVfrtfxQufuf();
    UpdbtfStbtf(STATE_CHANGE);

    if (pStbtfBlodk != NULL) {
        if (SUCCEEDED(rfs = pStbtfBlodk->Apply())) {
            J2dTrbdfLn(J2D_TRACE_VERBOSE, "  rfstorfd dfvidf stbtf");
        } flsf {
            J2dTrbdfLn(J2D_TRACE_WARNING,
                       "D3DContfxt::RfstorfStbtf: fbilfd to rfstorf stbtf");
        }
        SAFE_RELEASE(pStbtfBlodk);
    } flsf {
        J2dTrbdfLn(J2D_TRACE_WARNING,
                   "D3DContfxt::RfstorfStbtf: fmpty stbtf blodk!");
    }
    ZfroMfmory(lbstTfxturf, sizfof(lbstTfxturf));

    rfturn rfs;
}

#dffinf POINT_FILTER_CAP (D3DPTFILTERCAPS_MAGFPOINT|D3DPTFILTERCAPS_MINFPOINT)
#dffinf LINEAR_FILTER_CAP (D3DPTFILTERCAPS_MAGFLINEAR|D3DPTFILTERCAPS_MINFLINEAR)

BOOL
D3DContfxt::IsStrftdiRfdtFiltfringSupportfd(D3DTEXTUREFILTERTYPE fTypf)
{
    if (fTypf == D3DTEXF_POINT) {
        rfturn ((dfvCbps.StrftdiRfdtFiltfrCbps & POINT_FILTER_CAP) != 0);
    }
    if (fTypf == D3DTEXF_LINEAR) {
        rfturn ((dfvCbps.StrftdiRfdtFiltfrCbps & LINEAR_FILTER_CAP) != 0);
    }
    rfturn FALSE;
}

BOOL
D3DContfxt::IsTfxturfFiltfringSupportfd(D3DTEXTUREFILTERTYPE fTypf)
{
    if (fTypf == D3DTEXF_POINT) {
        rfturn ((dfvCbps.TfxturfFiltfrCbps & POINT_FILTER_CAP) != 0);
    }
    if (fTypf == D3DTEXF_LINEAR) {
        rfturn ((dfvCbps.TfxturfFiltfrCbps & LINEAR_FILTER_CAP) != 0);
    }
    rfturn FALSE;
}

BOOL
D3DContfxt::IsTfxturfFormbtSupportfd(D3DFORMAT formbt, DWORD usbgf)
{
    HRESULT ir = pd3dObjfdt->CifdkDfvidfFormbt(bdbptfrOrdinbl,
                                               dfvCbps.DfvidfTypf,
                                               durPbrbms.BbdkBufffrFormbt,
                                               usbgf,
                                               D3DRTYPE_TEXTURE,
                                               formbt);
    rfturn SUCCEEDED( ir );
}

BOOL
D3DContfxt::IsDfptiStfndilBufffrOk(D3DSURFACE_DESC *pTbrgftDfsd)
{
    IDirfdt3DSurfbdf9 *pStfndil;
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::IsDfptiStfndilBufffrOk");

    if (SUCCEEDED(pd3dDfvidf->GftDfptiStfndilSurfbdf(&pStfndil))) {
        D3DSURFACE_DESC dfsdStfndil;
        pStfndil->GftDfsd(&dfsdStfndil);
        pStfndil->Rflfbsf();

        D3DDISPLAYMODE dm;
        rfturn
            (SUCCEEDED(pd3dDfvidf->GftDisplbyModf(0, &dm)) &&
             pTbrgftDfsd->Widti <= dfsdStfndil.Widti &&
             pTbrgftDfsd->Hfigit <= dfsdStfndil.Hfigit &&
             SUCCEEDED(pd3dObjfdt->CifdkDfptiStfndilMbtdi(
                   bdbptfrOrdinbl,
                   dfvCbps.DfvidfTypf,
                   dm.Formbt, pTbrgftDfsd->Formbt,
                   dfsdStfndil.Formbt)));
    }
    J2dTrbdfLn(J2D_TRACE_VERBOSE,
        "  durrfnt stfndil bufffr is not dompbtiblf witi nfw Rfndfr Tbrgft");

    rfturn fblsf;
}



HRESULT
D3DContfxt::InitDfptiStfndilBufffr(D3DSURFACE_DESC *pTbrgftDfsd)
{
    HRESULT rfs;
    IDirfdt3DSurfbdf9 *pBB;
    D3DDISPLAYMODE dm;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::InitDfptiStfndilBufffr");

    if (FAILED(rfs = pd3dDfvidf->GftDisplbyModf(0, &dm))) {
        rfturn rfs;
    }

    D3DFORMAT nfwFormbt =
        D3DPipflinfMbnbgfr::GftInstbndf()->GftMbtdiingDfptiStfndilFormbt(
            bdbptfrOrdinbl, dm.Formbt, pTbrgftDfsd->Formbt);

    rfs = pd3dDfvidf->CrfbtfDfptiStfndilSurfbdf(
        pTbrgftDfsd->Widti, pTbrgftDfsd->Hfigit,
        nfwFormbt, D3DMULTISAMPLE_NONE, 0, fblsf, &pBB, 0);
    if (SUCCEEDED(rfs)) {
        rfs = pd3dDfvidf->SftDfptiStfndilSurfbdf(pBB);
        pBB->Rflfbsf();
    }

    rfturn rfs;
}


HRESULT
D3DContfxt::SftRfndfrTbrgft(IDirfdt3DSurfbdf9 *pSurfbdf)
{
    stbtid D3DMATRIX tx;
    HRESULT rfs;
    D3DSURFACE_DESC dfsdNfw;
    IDirfdt3DSurfbdf9 *pCurrfntTbrgft;

    J2dTrbdfLn1(J2D_TRACE_INFO,
                "D3DContfxt::SftRfndfrTbrgft: pSurfbdf=0x%x",
                pSurfbdf);

    RETURN_STATUS_IF_NULL(pd3dDfvidf, E_FAIL);
    RETURN_STATUS_IF_NULL(pSurfbdf, E_FAIL);

    pSurfbdf->GftDfsd(&dfsdNfw);

    if (SUCCEEDED(rfs = pd3dDfvidf->GftRfndfrTbrgft(0, &pCurrfntTbrgft))) {
        if (pCurrfntTbrgft != pSurfbdf) {
            FlusiVfrtfxQufuf();
            if (FAILED(rfs = pd3dDfvidf->SftRfndfrTbrgft(0, pSurfbdf))) {
                DfbugPrintD3DError(rfs, "D3DContfxt::SftRfndfrTbrgft: "\
                                        "frror sftting rfndfr tbrgft");
                SAFE_RELEASE(pCurrfntTbrgft);
                rfturn rfs;
            }

            if (!IsDfptiStfndilBufffrOk(&dfsdNfw)) {
                if (FAILED(rfs = InitDfptiStfndilBufffr(&dfsdNfw))) {
                    SAFE_RELEASE(pCurrfntTbrgft);
                    rfturn rfs;
                }
            }
        }
        SAFE_RELEASE(pCurrfntTbrgft);
    }
    // wf sft tif trbnsform fvfn if tif rfndfr tbrgft didn't dibngf;
    // tiis is bfdbusf in somf dbsfs (fs modf) wf usf tif dffbult SwbpCibin of
    // tif dfvidf, bnd its rfndfr tbrgft will bf tif sbmf bs tif dfvidf's, bnd
    // wf ibvf to sft tif mbtrix dorrfdtly. Tiis siouldn't bf b pfrformbndf
    // issuf bs rfndfr tbrgft dibngfs brf rflbtivfly rbrf
    D3DUtils_SftOrtioMbtrixOffCfntfrLH(&tx,
                       (flobt)dfsdNfw.Widti,
                       (flobt)dfsdNfw.Hfigit);
    pd3dDfvidf->SftTrbnsform(D3DTS_PROJECTION, &tx);

    J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  durrfnt rfndfr tbrgft=0x%x", pSurfbdf);
    rfturn rfs;
}

HRESULT
D3DContfxt::RfsftTrbnsform()
{
    HRESULT rfs = S_OK;
    D3DMATRIX tx;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RfsftTrbnsform");
    if (pd3dDfvidf == NULL) {
        rfturn E_FAIL;
    }

    // no nffd for stbtf dibngf, just flusi tif qufuf
    FlusiVfrtfxQufuf();

    D3DUtils_SftIdfntityMbtrix(&tx);
    if (FAILED(rfs = pd3dDfvidf->SftTrbnsform(D3DTS_WORLD, &tx))) {
        DfbugPrintD3DError(rfs, "D3DContfxt::SftTrbnsform fbilfd");
    }
    bIsIdfntityTx = TRUE;
    rfturn rfs;
}

HRESULT
D3DContfxt::SftTrbnsform(jdoublf m00, jdoublf m10,
                         jdoublf m01, jdoublf m11,
                         jdoublf m02, jdoublf m12)
{
    HRESULT rfs = S_OK;
    D3DMATRIX tx, tx1;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::SftTrbnsform");
    if (pd3dDfvidf == NULL) {
        rfturn E_FAIL;
    }

    // no nffd for stbtf dibngf, just flusi tif qufuf
    FlusiVfrtfxQufuf();

    // In ordfr to dorrfdtly mbp tfxfls to pixfls wf nffd to
    // bdjust gfomftry by -0.5f in tif trbnsformfd spbdf.
    // In ordfr to do tibt wf first drfbtf b trbnslbtfd mbtrix
    // bnd tifn dondbtfnbtf it witi tif world trbnsform.
    //
    // Notf tibt wf only usf non-id trbnsform witi DrbwTfxturf,
    // tif rfst is rfndfrfd prf-trbnsformfd.
    //
    // Tif idfntity trbnsform for tfxturfs is ibndlfd in
    // D3DVfrtfxCbdifr::DrbwTfxturf() bfdbusf siifting by -0.5 for id
    // trbnsform brfbks linfs rfndfring.

    ZfroMfmory(&tx1, sizfof(D3DMATRIX));

    tx1._11 = (flobt)m00;
    tx1._12 = (flobt)m10;
    tx1._21 = (flobt)m01;
    tx1._22 = (flobt)m11;
    tx1._41 = (flobt)m02;
    tx1._42 = (flobt)m12;

    tx1._33 = 1.0f;
    tx1._44 = 1.0f;

    D3DUtils_SftIdfntityMbtrix(&tx);
    tx._41 = -0.5f;
    tx._42 = -0.5f;
    D3DUtils_2DCondbtfnbtfM(&tx, &tx1);

    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
                "  %5f %5f %5f %5f", tx._11, tx._12, tx._13, tx._14);
    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
                "  %5f %5f %5f %5f", tx._21, tx._22, tx._23, tx._24);
    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
                "  %5f %5f %5f %5f", tx._31, tx._32, tx._33, tx._34);
    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
                "  %5f %5f %5f %5f", tx._41, tx._42, tx._43, tx._44);
    if (FAILED(rfs = pd3dDfvidf->SftTrbnsform(D3DTS_WORLD, &tx))) {
        DfbugPrintD3DError(rfs, "D3DContfxt::SftTrbnsform fbilfd");
    }
    bIsIdfntityTx = FALSE;

    rfturn rfs;
}

HRESULT
D3DContfxt::SftRfdtClip(int x1, int y1, int x2, int y2)
{
    HRESULT rfs = S_OK;
    D3DSURFACE_DESC dfsd;
    IDirfdt3DSurfbdf9 *pCurrfntTbrgft;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::SftRfdtClip");
    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
                "  x1=%-4d y1=%-4d x2=%-4d y2=%-4d",
                x1, y1, x2, y2);

    RETURN_STATUS_IF_NULL(pd3dDfvidf, E_FAIL);

    // no nffd for stbtf dibngf, just flusi tif qufuf
    FlusiVfrtfxQufuf();

    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZENABLE, D3DZB_FALSE);

    rfs = pd3dDfvidf->GftRfndfrTbrgft(0, &pCurrfntTbrgft);
    RETURN_STATUS_IF_FAILED(rfs);

    pCurrfntTbrgft->GftDfsd(&dfsd);
    SAFE_RELEASE(pCurrfntTbrgft);

    if (x1 <= 0 && y1 <= 0 &&
        (UINT)x2 >= dfsd.Widti && (UINT)y2 >= dfsd.Hfigit)
    {
        J2dTrbdfLn(J2D_TRACE_VERBOSE,
                   "  disbbling dlip (== rfndfr tbrgft dimfnsions)");
        rfturn pd3dDfvidf->SftRfndfrStbtf(D3DRS_SCISSORTESTENABLE, FALSE);
    }

    // dlip to tif dimfnsions of tif tbrgft surfbdf, otifrwisf
    // SftSdissorRfdt will fbil
    if (x1 < 0)                 x1 = 0;
    if (y1 < 0)                 y1 = 0;
    if ((UINT)x2 > dfsd.Widti)  x2 = dfsd.Widti;
    if ((UINT)y2 > dfsd.Hfigit) y2 = dfsd.Hfigit;
    if (x1 > x2)                x2 = x1 = 0;
    if (y1 > y2)                y2 = y1 = 0;
    RECT nfwRfdt = { x1, y1, x2, y2 };
    if (SUCCEEDED(rfs = pd3dDfvidf->SftSdissorRfdt(&nfwRfdt))) {
        rfs = pd3dDfvidf->SftRfndfrStbtf(D3DRS_SCISSORTESTENABLE, TRUE);
    } flsf {
        DfbugPrintD3DError(rfs, "Error sftting sdissor rfdt");
        J2dRlsTrbdfLn4(J2D_TRACE_ERROR,
                       "  x1=%-4d y1=%-4d x2=%-4d y2=%-4d",
                       x1, y1, x2, y2);
    }

    rfturn rfs;
}

HRESULT
D3DContfxt::RfsftClip()
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RfsftClip");
    // no nffd for stbtf dibngf, just flusi tif qufuf
    FlusiVfrtfxQufuf();
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_SCISSORTESTENABLE, FALSE);
    rfturn pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZENABLE, D3DZB_FALSE);
}

ClipTypf
D3DContfxt::GftClipTypf()
{
    // REMIND: tiis mftiod dould bf optimizfd: wf dould kffp tif
    // dlip stbtf bround wifn rf/sftting tif dlip instfbd of bsking
    // fvfry timf.
    DWORD zEnbblfd = 0;
    DWORD stEnbblfd = 0;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::GftClipTypf");
    pd3dDfvidf->GftRfndfrStbtf(D3DRS_SCISSORTESTENABLE, &stEnbblfd);
    if (stEnbblfd) {
        rfturn CLIP_RECT;
    }
    pd3dDfvidf->GftRfndfrStbtf(D3DRS_ZENABLE, &zEnbblfd);
    if (zEnbblfd) {
        rfturn CLIP_SHAPE;
    }
    rfturn CLIP_NONE;
}


/**
 * Tiis mftiod bssumfs tibt ::SftRfndfrTbrgft ibs blrfbdy
 * bffn dbllfd. SftRfndfrTbrgft drfbtfs bnd bttbdifs b
 * dfpti bufffr to tif tbrgft surfbdf prior to sftting it
 * bs tbrgft surfbdf to tif dfvidf.
 */
DWORD dwAlpibSt, dwSrdBlfndSt, dwDfstBlfndSt;
D3DMATRIX tx, idTx;

HRESULT
D3DContfxt::BfginSibpfClip()
{
    HRESULT rfs = S_OK;
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::BfginSibpfClip");

    UpdbtfStbtf(STATE_CHANGE);

    pd3dDfvidf->SftRfndfrStbtf(D3DRS_SCISSORTESTENABLE, FALSE);

    // sbvf blpib blfnding stbtf
    pd3dDfvidf->GftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, &dwAlpibSt);
    pd3dDfvidf->GftRfndfrStbtf(D3DRS_SRCBLEND, &dwSrdBlfndSt);
    pd3dDfvidf->GftRfndfrStbtf(D3DRS_DESTBLEND, &dwDfstBlfndSt);

    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, TRUE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_SRCBLEND, D3DBLEND_ZERO);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_DESTBLEND, D3DBLEND_ONE);

    pd3dDfvidf->GftTrbnsform(D3DTS_WORLD, &tx);
    D3DUtils_SftIdfntityMbtrix(&idTx);
    // trbnslbtf tif dlip spbns by 1.0f in z dirfdtion so tibt tif
    // dlip spbns brf rfndfrfd to tif z bufffr
    idTx._43 = 1.0f;
    pd3dDfvidf->SftTrbnsform(D3DTS_WORLD, &idTx);

    // Tif dfpti bufffr is first dlfbrfd witi zfrofs, wiidi is tif fbrtifst
    // plbnf from tif vifwfr (our projfdtion mbtrix is bn invfrsfd ortiogonbl
    // trbnsform).
    // To sft tif dlip wf'll rfndfr tif dlip spbns witi Z doordinbtfs of 1.0f
    // (tif dlosfst to tif vifwfr). Sindf bll rfndfring primitivfs
    // ibvf tifir vfrtidfs' Z doordinbtf sft to 0.0, tify will ffffdtivfly bf
    // dlippfd bfdbusf tif Z dfpti tfst for tifm will fbil (vfrtfx witi 1.0
    // dfpti is dlosfr tibn tif onf witi 0.0f)
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZENABLE, D3DZB_TRUE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZWRITEENABLE, TRUE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZFUNC, D3DCMP_ALWAYS);
    pd3dDfvidf->Clfbr(0, NULL, D3DCLEAR_ZBUFFER, 0L, 0.0f, 0x0L);

    //rfs = BfginSdfnf(STATE_SHAPE_CLIPOP);

    rfturn rfs;
}

HRESULT
D3DContfxt::EndSibpfClip()
{
    HRESULT rfs;

    // no nffd for stbtf dibngf, just flusi tif qufuf
    rfs = FlusiVfrtfxQufuf();

    // rfstorf blpib blfnding stbtf
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, dwAlpibSt);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_SRCBLEND, dwSrdBlfndSt);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_DESTBLEND, dwDfstBlfndSt);

    // rfsorf tif trbnsform
    pd3dDfvidf->SftTrbnsform(D3DTS_WORLD, &tx);

    // Enbblf tif dfpti bufffr.
    // Wf disbblf furtifr updbtfs to tif dfpti bufffr: it siould only
    // bf updbtfd in SftClip mftiod.
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZWRITEENABLE, FALSE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ZFUNC, D3DCMP_LESS);

    rfturn rfs;
}

HRESULT
D3DContfxt::UplobdTilfToTfxturf(D3DRfsourdf *pTfxturfRfs, void *pixfls,
                                jint dstx, jint dsty,
                                jint srdx, jint srdy,
                                jint srdWidti, jint srdHfigit,
                                jint srdStridf,
                                TilfFormbt srdFormbt,
                                jint *pPixflsToudifdL,
                                jint* pPixflsToudifdR)
{
#ifndff PtrAddBytfs
#dffinf PtrAddBytfs(p, b)               ((void *) (((intptr_t) (p)) + (b)))
#dffinf PtrCoord(p, x, xind, y, yind)   PtrAddBytfs(p, (y)*(yind) + (x)*(xind))
#fndif // PtrAddBytfs

    HRESULT rfs = S_OK;
    IDirfdt3DTfxturf9 *pTfxturf = pTfxturfRfs->GftTfxturf();
    D3DSURFACE_DESC *pDfsd = pTfxturfRfs->GftDfsd();
    RECT r = { dstx, dsty, dstx+srdWidti, dsty+srdHfigit };
    RECT *pR = &r;
    D3DLOCKED_RECT lodkfdRfdt;
    DWORD dwLodkFlbgs = D3DLOCK_NOSYSLOCK;
    // tifsf brf only dountfd for LCD glypi uplobds
    jint pixflsToudifdL = 0, pixflsToudifdR = 0;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::UplobdTilfToTfxturf");
    J2dTrbdfLn4(J2D_TRACE_VERBOSE,
        " rfdt={%-4d, %-4d, %-4d, %-4d}",
        r.lfft, r.top, r.rigit, r.bottom);

    if (pDfsd->Usbgf == D3DUSAGE_DYNAMIC) {
        // it is sbff to lodk witi disdbrd bfdbusf wf don't dbrf bbout tif
        // dontfnts of dynbmid tfxturfs bnd dstx,dsty for tiis dbsf is
        // blwbys 0,0 bfdbusf wf brf uplobding into b tilf tfxturf
        dwLodkFlbgs |= D3DLOCK_DISCARD;
        pR = NULL;
    }

    if (FAILED(rfs = pTfxturf->LodkRfdt(0, &lodkfdRfdt, pR, dwLodkFlbgs))) {
        DfbugPrintD3DError(rfs,
            "D3DContfxt::UplobdImbgfToTfxturf: dould "\
            "not lodk tfxturf");
        rfturn rfs;
    }

    if (srdFormbt == TILEFMT_1BYTE_ALPHA) {
        // fitifr b MbskFill tilf, or b grbysdblf glypi
        if (pDfsd->Formbt == D3DFMT_A8) {
            void *pSrdPixfls = PtrCoord(pixfls, srdx, 1, srdy, srdStridf);
            void *pDstPixfls = lodkfdRfdt.pBits;
            do {
                mfmdpy(pDstPixfls, pSrdPixfls, srdWidti);
                pSrdPixfls = PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            } wiilf (--srdHfigit > 0);
        }
        flsf if (pDfsd->Formbt == D3DFMT_A8R8G8B8) {
            jubytf *pSrdPixfls = (jubytf*)
                PtrCoord(pixfls, srdx, 1, srdy, srdStridf);
            jint *pDstPixfls = (jint*)lodkfdRfdt.pBits;
            for (int yy = 0; yy < srdHfigit; yy++) {
                for (int xx = 0; xx < srdWidti; xx++) {
                    // only nffd to sft tif blpib dibnnfl (tif D3D tfxturf
                    // stbtf will bf sftup in tiis dbsf to rfplidbtf tif
                    // blpib dibnnfl bs nffdfd)
                    pDstPixfls[xx] = pSrdPixfls[xx] << 24;
                }
                pSrdPixfls = (jubytf*)PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = (jint*)PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            }
        }
    } flsf if (srdFormbt == TILEFMT_3BYTE_RGB) {
        // LCD glypi witi RGB ordfr
        if (pDfsd->Formbt == D3DFMT_R8G8B8) {
            jubytf *pSrdPixfls = (jubytf*)
                PtrCoord(pixfls, srdx, 3, srdy, srdStridf);
            jubytf *pDstPixfls = (jubytf*)lodkfdRfdt.pBits;
            for (int yy = 0; yy < srdHfigit; yy++) {
                for (int xx = 0; xx < srdWidti*3; xx+=3) {
                    // blpib dibnnfl is ignorfd in tiis dbsf
                    // (notf tibt tiis is bbdkwbrds from wibt onf migit
                    // fxpfdt; it bppfbrs tibt D3DFMT_R8G8B8 is bdtublly
                    // lbid out in BGR ordfr in mfmory)
                    pDstPixfls[xx+0] = pSrdPixfls[xx+2];
                    pDstPixfls[xx+1] = pSrdPixfls[xx+1];
                    pDstPixfls[xx+2] = pSrdPixfls[xx+0];
                }
                pixflsToudifdL +=
                    (pDstPixfls[0+0]|pDstPixfls[0+1]|pDstPixfls[0+2]) ? 1 : 0;
                jint i = 3*(srdWidti-1);
                pixflsToudifdR +=
                    (pDstPixfls[i+0]|pDstPixfls[i+1]|pDstPixfls[i+2]) ? 1 : 0;

                pSrdPixfls = (jubytf*)PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = (jubytf*)PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            }
        }
        flsf if (pDfsd->Formbt == D3DFMT_A8R8G8B8) {
            jubytf *pSrdPixfls = (jubytf*)
                PtrCoord(pixfls, srdx, 3, srdy, srdStridf);
            jint *pDstPixfls = (jint*)lodkfdRfdt.pBits;
            for (int yy = 0; yy < srdHfigit; yy++) {
                for (int dx = 0, sx = 0; dx < srdWidti; dx++, sx+=3) {
                    // blpib dibnnfl is ignorfd in tiis dbsf
                    jubytf r = pSrdPixfls[sx+0];
                    jubytf g = pSrdPixfls[sx+1];
                    jubytf b = pSrdPixfls[sx+2];
                    pDstPixfls[dx] = (r << 16) | (g << 8) | (b);
                }
                pixflsToudifdL += (pDstPixfls[0]          ? 1 : 0);
                pixflsToudifdR += (pDstPixfls[srdWidti-1] ? 1 : 0);

                pSrdPixfls = (jubytf*)PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = (jint*)PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            }
        }
    } flsf if (srdFormbt == TILEFMT_3BYTE_BGR) {
        // LCD glypi witi BGR ordfr
        if (pDfsd->Formbt == D3DFMT_R8G8B8) {
            void *pSrdPixfls = PtrCoord(pixfls, srdx, 3, srdy, srdStridf);
            void *pDstPixfls = lodkfdRfdt.pBits;
            jubytf *pbDst;
            do {
                // blpib dibnnfl is ignorfd in tiis dbsf
                // (notf tibt tiis is bbdkwbrds from wibt onf migit
                // fxpfdt; it bppfbrs tibt D3DFMT_R8G8B8 is bdtublly
                // lbid out in BGR ordfr in mfmory)
                mfmdpy(pDstPixfls, pSrdPixfls, srdWidti * 3);

                pbDst = (jubytf*)pDstPixfls;
                pixflsToudifdL +=(pbDst[0+0]|pbDst[0+1]|pbDst[0+2]) ? 1 : 0;
                jint i = 3*(srdWidti-1);
                pixflsToudifdR +=(pbDst[i+0]|pbDst[i+1]|pbDst[i+2]) ? 1 : 0;

                pSrdPixfls = PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            } wiilf (--srdHfigit > 0);
        }
        flsf if (pDfsd->Formbt == D3DFMT_A8R8G8B8) {
            jubytf *pSrdPixfls = (jubytf*)
                PtrCoord(pixfls, srdx, 3, srdy, srdStridf);
            jint *pDstPixfls = (jint*)lodkfdRfdt.pBits;
            for (int yy = 0; yy < srdHfigit; yy++) {
                for (int dx = 0, sx = 0; dx < srdWidti; dx++, sx+=3) {
                    // blpib dibnnfl is ignorfd in tiis dbsf
                    jubytf b = pSrdPixfls[sx+0];
                    jubytf g = pSrdPixfls[sx+1];
                    jubytf r = pSrdPixfls[sx+2];
                    pDstPixfls[dx] = (r << 16) | (g << 8) | (b);
                }
                pixflsToudifdL += (pDstPixfls[0]          ? 1 : 0);
                pixflsToudifdR += (pDstPixfls[srdWidti-1] ? 1 : 0);

                pSrdPixfls = (jubytf*)PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = (jint*)PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            }
        }
    } flsf if (srdFormbt == TILEFMT_4BYTE_ARGB_PRE) {
        // MbskBlit tilf
        if (pDfsd->Formbt == D3DFMT_A8R8G8B8) {
            void *pSrdPixfls = PtrCoord(pixfls, srdx, 4, srdy, srdStridf);
            void *pDstPixfls = lodkfdRfdt.pBits;
            do {
                mfmdpy(pDstPixfls, pSrdPixfls, srdWidti * 4);
                pSrdPixfls = PtrAddBytfs(pSrdPixfls, srdStridf);
                pDstPixfls = PtrAddBytfs(pDstPixfls, lodkfdRfdt.Pitdi);
            } wiilf (--srdHfigit > 0);
        }
    } flsf {
        // siould not ibppfn, no-op just in dbsf...
    }

    if (pPixflsToudifdL) {
        *pPixflsToudifdL  = pixflsToudifdL;
    }
    if (pPixflsToudifdR) {
        *pPixflsToudifdR = pixflsToudifdR;
    }

    rfturn pTfxturf->UnlodkRfdt(0);
}

HRESULT
D3DContfxt::InitLCDGlypiCbdif()
{
    if (pLCDGlypiCbdif == NULL) {
        rfturn D3DGlypiCbdif::CrfbtfInstbndf(tiis, CACHE_LCD, &pLCDGlypiCbdif);
    }
    rfturn S_OK;
}

HRESULT
D3DContfxt::InitGrbysdblfGlypiCbdif()
{
    if (pGrbysdblfGlypiCbdif == NULL) {
        rfturn D3DGlypiCbdif::CrfbtfInstbndf(tiis, CACHE_GRAY,
                                             &pGrbysdblfGlypiCbdif);
    }
    rfturn S_OK;
}

HRESULT
D3DContfxt::RfsftCompositf()
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::RfsftCompositf");

    RETURN_STATUS_IF_NULL(pd3dDfvidf, E_FAIL);

    HRESULT rfs = UpdbtfStbtf(STATE_CHANGE);
    pd3dDfvidf->SftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, FALSE);
    fxtrbAlpib = 1.0f;
    rfturn rfs;
}

HRESULT
D3DContfxt::SftAlpibCompositf(jint rulf, jflobt fb, jint flbgs)
{
    HRESULT rfs;
    J2dTrbdfLn3(J2D_TRACE_INFO,
                "D3DContfxt::SftAlpibCompositf: rulf=%-1d fb=%f flbgs=%d",
                rulf, fb, flbgs);

    RETURN_STATUS_IF_NULL(pd3dDfvidf, E_FAIL);

    rfs = UpdbtfStbtf(STATE_CHANGE);

    // wf dbn sbffly disbblf blfnding wifn:
    //   - domp is SrdNoEb or SrdOvfrNoEb, bnd
    //   - tif sourdf is opbquf
    // (turning off blfnding dbn ibvf b lbrgf positivf impbdt on pfrformbndf)
    if ((rulf == RULE_Srd || rulf == RULE_SrdOvfr) &&
        (fb == 1.0f) &&
        (flbgs & D3DC_SRC_IS_OPAQUE))
    {
        J2dTrbdfLn1(J2D_TRACE_VERBOSE,
                    "  disbbling blpib domp rulf=%-1d fb=1.0 srd=opq)", rulf);
        pd3dDfvidf->SftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, FALSE);
    } flsf {
        J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                    "  fnbbling blpib domp (rulf=%-1d fb=%f)", rulf, fb);
        pd3dDfvidf->SftRfndfrStbtf(D3DRS_ALPHABLENDENABLE, TRUE);

        pd3dDfvidf->SftRfndfrStbtf(D3DRS_SRCBLEND,
                                   StdBlfndRulfs[rulf].srd);
        pd3dDfvidf->SftRfndfrStbtf(D3DRS_DESTBLEND,
                                   StdBlfndRulfs[rulf].dst);
    }

    fxtrbAlpib = fb;
    rfturn rfs;
}

#ifdff UPDATE_TX

// Notf: tiis mftiod of bdjusting pixfl to tfxfl mbpping provfd to bf
// diffidult to pfrffdt. Tif durrfnt vbribtion works grfbt for id,
// sdblf (indluding bll kinds of flips) trbnsforms, but not still not
// for gfnfrid trbnsforms.
//
// Sindf wf durrfntly only do DrbwTfxturf witi non-id trbnsform wf instfbd
// bdjust tif gfomftry (sff D3DVfrtfxCbdifr::DrbwTfxturf(), SftTrbnsform())
//
// In ordfr to fnbblf tiis dodf pbti UpdbtfTfxturfTrbnsforms nffds to
// bf dbllfd in SftTfxturf(), SftTrbnsform() bnd RfsftTrbnform().
HRESULT
D3DContfxt::UpdbtfTfxturfTrbnsforms(DWORD dwSbmplfrToUpdbtf)
{
    HRESULT rfs = S_OK;
    DWORD dwSbmplfr, dwMbxSbmplfr;

    if (dwSbmplfrToUpdbtf == -1) {
        // updbtf bll usfd sbmplfrs, dwMbxSbmplfr will bf sft to mbx
        dwSbmplfr = 0;
        dwSbmplfr = MAX_USED_TEXTURE_SAMPLER;
        J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::UpdbtfTfxturfTrbnsforms: "\
                                   "updbting bll sbmplfrs");
    } flsf {
        // updbtf only givfn sbmplfr, dwMbxSbmplfr will bf sft to it bs wfll
        dwSbmplfr = dwSbmplfrToUpdbtf;
        dwMbxSbmplfr = dwSbmplfrToUpdbtf;
        J2dTrbdfLn1(J2D_TRACE_INFO, "D3DContfxt::UpdbtfTfxturfTrbnsforms: "\
                                    "updbting sbmplfr %d", dwSbmplfr);
    }

    do {
        D3DTRANSFORMSTATETYPE stbtf =
            (D3DTRANSFORMSTATETYPE)(D3DTS_TEXTURE0 + dwSbmplfr);
        IDirfdt3DTfxturf9 *pTfxturf = lbstTfxturf[dwSbmplfr];

        if (pTfxturf != NULL) {
            D3DMATRIX mt, tx;
            D3DSURFACE_DESC tfxDfsd;

            pd3dDfvidf->GftTrbnsform(D3DTS_WORLD, &tx);
            J2dTrbdfLn4(10,
                        "  %5f %5f %5f %5f", tx._11, tx._12, tx._13, tx._14);
            J2dTrbdfLn4(10,
                        "  %5f %5f %5f %5f", tx._21, tx._22, tx._23, tx._24);
            J2dTrbdfLn4(10,
                        "  %5f %5f %5f %5f", tx._31, tx._32, tx._33, tx._34);
            J2dTrbdfLn4(10,
                        "  %5f %5f %5f %5f", tx._41, tx._42, tx._43, tx._44);

            // tiis formulb works for sdblfs bnd flips
            if (tx._11 == 0.0f) {
                tx._11 = tx._12;
            }
            if (tx._22 == 0.0f) {
                tx._22 = tx._21;
            }

            pTfxturf->GftLfvflDfsd(0, &tfxDfsd);

            // siift by .5 tfxfl, but tbkf into bddount
            // tif sdblf fbdtor of tif dfvidf trbnsform

            // REMIND: tiis bpprobdi is not fntirfly dorrfdt,
            // bs it only tbkfs into bddount tif sdblf of tif dfvidf
            // trbnsform.
            mt._31 = (1.0f / (2.0f * tfxDfsd.Widti  * tx._11));
            mt._32 = (1.0f / (2.0f * tfxDfsd.Hfigit * tx._22));
            J2dTrbdfLn2(J2D_TRACE_VERBOSE, "  offsfts: tx=%f ty=%f",
                        mt._31, mt._32);

            pd3dDfvidf->SftTfxturfStbgfStbtf(dwSbmplfr,
                                             D3DTSS_TEXTURETRANSFORMFLAGS,
                                             D3DTTFF_COUNT2);
            rfs = pd3dDfvidf->SftTrbnsform(stbtf, &mt);
        } flsf {
            rfs = pd3dDfvidf->SftTfxturfStbgfStbtf(dwSbmplfr,
                                                   D3DTSS_TEXTURETRANSFORMFLAGS,
                                                   D3DTTFF_DISABLE);
        }
        dwSbmplfr++;
    } wiilf (dwSbmplfr <= dwMbxSbmplfr);

    rfturn rfs;
}
#fndif // UPDATE_TX

/**
 * Wf go into tif pbins of mbintbining tif list of sft tfxturfs
 * instfbd of just dblling GftTfxturf() bnd dompbring tif old onf
 * witi tif nfw onf bfdbusf it's bdtublly notidfbbly slowfr to dbll
 * GftTfxturf() (notf tibt wf'd ibvf to tifn dbll Rflfbsf() on tif
 * tfxturf sindf GftTfxturf() indrfbsfs tfxturf's rff. dount).
 */
HRESULT
D3DContfxt::SftTfxturf(IDirfdt3DTfxturf9 *pTfxturf, DWORD dwSbmplfr)
{
    HRESULT rfs = S_OK;
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::SftTfxturf");

    if (dwSbmplfr < 0 || dwSbmplfr > MAX_USED_TEXTURE_SAMPLER) {
        J2dTrbdfLn1(J2D_TRACE_ERROR,
                    "D3DContfxt::SftTfxturf: indorrfdt sbmplfr: %d", dwSbmplfr);
        rfturn E_FAIL;
    }
    if (lbstTfxturf[dwSbmplfr] != pTfxturf) {
        if (FAILED(rfs = FlusiVfrtfxQufuf())) {
            rfturn rfs;
        }
        J2dTrbdfLn2(J2D_TRACE_VERBOSE,
                    "  nfw tfxturf=0x%x on sbmplfr %d", pTfxturf, dwSbmplfr);
        rfs = pd3dDfvidf->SftTfxturf(dwSbmplfr, pTfxturf);
        if (SUCCEEDED(rfs)) {
            lbstTfxturf[dwSbmplfr] = pTfxturf;
            // REMIND: sff dommfnt bt UpdbtfTfxturfTrbnsforms
#ifdff UPDATE_TX
            rfs = UpdbtfTfxturfTrbnsforms(dwSbmplfr);
#fndif
        }  flsf {
            lbstTfxturf[dwSbmplfr] = NULL;
        }
    }
    rfturn rfs;
}

HRESULT
D3DContfxt::UpdbtfTfxturfColorStbtf(DWORD dwStbtf, DWORD dwSbmplfr)
{
    HRESULT rfs = S_OK;

    if (dwStbtf != lbstTfxturfColorStbtf[dwSbmplfr]) {
        rfs = pd3dDfvidf->SftTfxturfStbgfStbtf(dwSbmplfr,
                                               D3DTSS_ALPHAARG1, dwStbtf);
        rfs = pd3dDfvidf->SftTfxturfStbgfStbtf(dwSbmplfr,
                                               D3DTSS_COLORARG1, dwStbtf);
        lbstTfxturfColorStbtf[dwSbmplfr] = dwStbtf;
    }

    rfturn rfs;
}

HRESULT /*NOLOCK*/
D3DContfxt::UpdbtfStbtf(jbytf nfwStbtf)
{
    HRESULT rfs = S_OK;

    if (opStbtf == nfwStbtf) {
        // Tif op is tif sbmf bs lbst timf, so wf dbn rfturn immfdibtfly.
        rfturn rfs;
    } flsf if (opStbtf != STATE_CHANGE) {
        rfs = FlusiVfrtfxQufuf();
    }

    switdi (opStbtf) {
    dbsf STATE_MASKOP:
        pMbskCbdif->Disbblf();
        brfbk;
    dbsf STATE_GLYPHOP:
        D3DTR_DisbblfGlypiVfrtfxCbdif(tiis);
        brfbk;
    dbsf STATE_TEXTUREOP:
        // optimizbtion: dfrtbin stbtf dibngfs (tiosf mbrkfd STATE_CHANGE)
        // brf bllowfd wiilf tfxturing is fnbblfd.
        // In tiis dbsf, wf dbn bllow prfviousOp to rfmbin bs it is bnd
        // tifn rfturn fbrly.
        if (nfwStbtf == STATE_CHANGE) {
            rfturn rfs;
        }
        // REMIND: not nfdfssbry if wf brf switdiing to MASKOP or GLYPHOP
        // (or b domplfx pbint, for tibt mbttfr), but would tibt bf b
        // wortiwiilf optimizbtion?
        SftTfxturf(NULL);
        brfbk;
    dbsf STATE_AAPGRAMOP:
        rfs = DisbblfAAPbrbllflogrbmProgrbm();
        brfbk;
    dffbult:
        brfbk;
    }

    switdi (nfwStbtf) {
    dbsf STATE_MASKOP:
        pMbskCbdif->Enbblf();
        UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE | D3DTA_ALPHAREPLICATE);
        brfbk;
    dbsf STATE_GLYPHOP:
        D3DTR_EnbblfGlypiVfrtfxCbdif(tiis);
        UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE | D3DTA_ALPHAREPLICATE);
        brfbk;
    dbsf STATE_TEXTUREOP:
        UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE);
        brfbk;
    dbsf STATE_AAPGRAMOP:
        rfs = EnbblfAAPbrbllflogrbmProgrbm();
        brfbk;
    dffbult:
        brfbk;
    }

    opStbtf = nfwStbtf;

    rfturn rfs;
}

HRESULT D3DContfxt::FlusiVfrtfxQufuf()
{
    if (pVCbdifr != NULL) {
        rfturn pVCbdifr->Rfndfr();
    }
    rfturn E_FAIL;
}

HRESULT D3DContfxt::BfginSdfnf(jbytf nfwStbtf)
{
    if (!pd3dDfvidf) {
        rfturn E_FAIL;
    } flsf {
        UpdbtfStbtf(nfwStbtf);
        if (!bBfginSdfnfPfnding) {
            bBfginSdfnfPfnding = TRUE;
            HRESULT rfs = pd3dDfvidf->BfginSdfnf();
            J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::BfginSdfnf");
            if (FAILED(rfs)) {
                // tiis will dbusf dontfxt rfinitiblizbtion
                opStbtf = STATE_CHANGE;
            }
            rfturn rfs;
        }
        rfturn S_OK;
    }
}

HRESULT D3DContfxt::EndSdfnf() {
    if (bBfginSdfnfPfnding) {
        FlusiVfrtfxQufuf();
        bBfginSdfnfPfnding = FALSE;
        J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::EndSdfnf");
        rfturn pd3dDfvidf->EndSdfnf();
    }
    rfturn S_OK;
}

/**
 * Compilfs bnd links tif givfn frbgmfnt sibdfr progrbm.  If
 * suddfssful, tiis fundtion rfturns b ibndlf to tif nfwly drfbtfd sibdfr
 * progrbm; otifrwisf rfturns 0.
 */
IDirfdt3DPixflSibdfr9 *D3DContfxt::CrfbtfFrbgmfntProgrbm(DWORD **sibdfrs,
                                                       SibdfrList *progrbms,
                                                       jint flbgs)
{
    DWORD *sourdfCodf;
    IDirfdt3DPixflSibdfr9 *pProgrbm;

    J2dTrbdfLn1(J2D_TRACE_INFO,
                "D3DContfxt::CrfbtfFrbgmfntProgrbm: flbgs=%d",
                flbgs);

    sourdfCodf = sibdfrs[flbgs];
    if (FAILED(pd3dDfvidf->CrfbtfPixflSibdfr(sourdfCodf, &pProgrbm))) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "D3DContfxt::CrfbtfFrbgmfntProgrbm: frror drfbting progrbm");
        rfturn NULL;
    }

    // bdd it to tif dbdif
    SibdfrList_AddProgrbm(progrbms, ptr_to_jlong(pProgrbm),
                          0 /*unusfd*/, 0 /*unusfd*/, flbgs);

    rfturn pProgrbm;
}

/**
 * Lodbtfs bnd fnbblfs b frbgmfnt progrbm givfn b list of sibdfr progrbms
 * (SibdfrInfos), using tiis dontfxt's stbtf bnd flbgs bs sfbrdi
 * pbrbmftfrs.  Tif "flbgs" pbrbmftfr is b bitwisf-or'd vbluf tibt iflps
 * difffrfntibtf onf progrbm for bnotifr; tif intfrprftbtion of tiis vbluf
 * vbrifs dfpfnding on tif typf of sibdfr (BufImgOp, Pbint, ftd) but ifrf
 * it is only usfd to find bnotifr SibdfrInfo witi tibt sbmf "flbgs" vbluf.
 */
HRESULT D3DContfxt::EnbblfFrbgmfntProgrbm(DWORD **sibdfrs,
                                          SibdfrList *progrbmList,
                                          jint flbgs)
{
    HRESULT rfs;
    jlong progrbmID;
    IDirfdt3DPixflSibdfr9 *pProgrbm;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::EnbblfFrbgmfntProgrbm");

    progrbmID =
        SibdfrList_FindProgrbm(progrbmList,
                               0 /*unusfd*/, 0 /*unusfd*/, flbgs);

    pProgrbm = (IDirfdt3DPixflSibdfr9 *)jlong_to_ptr(progrbmID);
    if (pProgrbm == NULL) {
        pProgrbm = CrfbtfFrbgmfntProgrbm(sibdfrs, progrbmList, flbgs);
        if (pProgrbm == NULL) {
            rfturn E_FAIL;
        }
    }

    if (FAILED(rfs = pd3dDfvidf->SftPixflSibdfr(pProgrbm))) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "D3DContfxt::EnbblfFrbgmfntProgrbm: frror sftting pixfl sibdfr");
        rfturn rfs;
    }

    rfturn S_OK;
}

HRESULT D3DContfxt::EnbblfBbsidGrbdifntProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)grbdSibdfrs,
                                 &bbsidGrbdProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfLinfbrGrbdifntProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)linfbrSibdfrs,
                                 &linfbrGrbdProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfRbdiblGrbdifntProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)rbdiblSibdfrs,
                                 &rbdiblGrbdProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfConvolvfProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)donvolvfSibdfrs,
                                 &donvolvfProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfRfsdblfProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)rfsdblfSibdfrs,
                                 &rfsdblfProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfLookupProgrbm(jint flbgs)
{
    rfturn EnbblfFrbgmfntProgrbm((DWORD **)lookupSibdfrs,
                                 &lookupProgrbms, flbgs);
}

HRESULT D3DContfxt::EnbblfLCDTfxtProgrbm()
{
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::EnbblfLCDTfxtProgrbm");

    if (lddTfxtProgrbm == NULL) {
        if (FAILED(rfs = pd3dDfvidf->CrfbtfPixflSibdfr(lddtfxt0,
                                                       &lddTfxtProgrbm)))
        {
            rfturn rfs;
        }
    }

    if (FAILED(rfs = pd3dDfvidf->SftPixflSibdfr(lddTfxtProgrbm))) {
        J2dRlsTrbdfLn(J2D_TRACE_ERROR,
            "D3DContfxt::EnbblfLCDTfxtProgrbm: frror sftting pixfl sibdfr");
        rfturn rfs;
    }

    rfturn S_OK;
}

HRESULT D3DContfxt::EnbblfAAPbrbllflogrbmProgrbm()
{
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::EnbblfAAPbrbllflogrbmProgrbm");

    if (bbPgrbmProgrbm == NULL) {
        if (FAILED(rfs = pd3dDfvidf->CrfbtfPixflSibdfr(bbpgrbm0,
                                                       &bbPgrbmProgrbm))) {
            DfbugPrintD3DError(rfs, "D3DContfxt::EnbblfAAPbrbllflogrbmProgrbm: "
                               "frror drfbting pixfl sibdfr");
            rfturn rfs;
        }
    }

    if (FAILED(rfs = pd3dDfvidf->SftPixflSibdfr(bbPgrbmProgrbm))) {
        DfbugPrintD3DError(rfs, "D3DContfxt::EnbblfAAPbrbllflogrbmProgrbm: "
                           "frror sftting pixfl sibdfr");
        rfturn rfs;
    }

    rfturn S_OK;
}

HRESULT D3DContfxt::DisbblfAAPbrbllflogrbmProgrbm()
{
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::DisbblfAAPbrbllflogrbmProgrbm");

    if (bbPgrbmProgrbm != NULL) {
        if (FAILED(rfs = pd3dDfvidf->SftPixflSibdfr(NULL))) {
            DfbugPrintD3DError(rfs,
                               "D3DContfxt::DisbblfAAPbrbllflogrbmProgrbm: "
                               "frror dlfbring pixfl sibdfr");
            rfturn rfs;
        }
    }

    rfturn S_OK;
}

BOOL D3DContfxt::IsAlpibRTSurfbdfSupportfd()
{
    HRESULT rfs = pd3dObjfdt->CifdkDfvidfFormbt(bdbptfrOrdinbl,
            dfvCbps.DfvidfTypf,
            durPbrbms.BbdkBufffrFormbt,
            D3DUSAGE_RENDERTARGET,
            D3DRTYPE_SURFACE,
            D3DFMT_A8R8G8B8);
    rfturn SUCCEEDED(rfs);
}

BOOL D3DContfxt::IsAlpibRTTSupportfd()
{
    HRESULT rfs = pd3dObjfdt->CifdkDfvidfFormbt(bdbptfrOrdinbl,
            dfvCbps.DfvidfTypf,
            durPbrbms.BbdkBufffrFormbt,
            D3DUSAGE_RENDERTARGET,
            D3DRTYPE_TEXTURE,
            D3DFMT_A8R8G8B8);
    rfturn SUCCEEDED(rfs);
}

BOOL D3DContfxt::IsOpbqufRTTSupportfd()
{
    HRESULT rfs = pd3dObjfdt->CifdkDfvidfFormbt(bdbptfrOrdinbl,
            dfvCbps.DfvidfTypf,
            durPbrbms.BbdkBufffrFormbt,
            D3DUSAGE_RENDERTARGET,
            D3DRTYPE_TEXTURE,
            durPbrbms.BbdkBufffrFormbt);
    rfturn SUCCEEDED(rfs);
}

HRESULT D3DContfxt::InitContfxtCbps() {
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DContfxt::InitContfxtCbps");
    J2dTrbdfLn1(J2D_TRACE_VERBOSE, "  dbps for bdbptfr %d :", bdbptfrOrdinbl);

    if (pd3dDfvidf == NULL || pd3dObjfdt == NULL) {
        dontfxtCbps = CAPS_EMPTY;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_EMPTY");
        rfturn E_FAIL;
    }

    dontfxtCbps = CAPS_DEVICE_OK;
    J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_DEVICE_OK");

    if (IsAlpibRTSurfbdfSupportfd()) {
        dontfxtCbps |= CAPS_RT_PLAIN_ALPHA;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_RT_PLAIN_ALPHA");
    }
    if (IsAlpibRTTSupportfd()) {
        dontfxtCbps |= CAPS_RT_TEXTURE_ALPHA;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_RT_TEXTURE_ALPHA");
    }
    if (IsOpbqufRTTSupportfd()) {
        dontfxtCbps |= CAPS_RT_TEXTURE_OPAQUE;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_RT_TEXTURE_OPAQUE");
    }
    if (IsPixflSibdfr20Supportfd()) {
        dontfxtCbps |= CAPS_LCD_SHADER | CAPS_BIOP_SHADER | CAPS_PS20;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE,
                      "  | CAPS_LCD_SHADER | CAPS_BIOP_SHADER | CAPS_PS20");
        // Prf-PS3.0 vidfo bobrds brf vfry slow witi tif AA sibdfr, so
        // wf will rfquirf PS30 iw fvfn tiougi tif sibdfr is dompilfd for 2.0b
//        if (IsGrbdifntInstrudtionExtfnsionSupportfd()) {
//            dontfxtCbps |= CAPS_AA_SHADER;
//            J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_AA_SHADER");
//        }
    }
    if (IsPixflSibdfr30Supportfd()) {
        if ((dontfxtCbps & CAPS_AA_SHADER) == 0) {
            // Tiis flbg wbs not blrfbdy mfntionfd bbovf...
            J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_AA_SHADER");
        }
        dontfxtCbps |= CAPS_PS30 | CAPS_AA_SHADER;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_PS30");
    }
    if (IsMultiTfxturingSupportfd()) {
        dontfxtCbps |= CAPS_MULTITEXTURE;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_MULTITEXTURE");
    }
    if (!IsPow2TfxturfsOnly()) {
        dontfxtCbps |= CAPS_TEXNONPOW2;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_TEXNONPOW2");
    }
    if (!IsSqubrfTfxturfsOnly()) {
        dontfxtCbps |= CAPS_TEXNONSQUARE;
        J2dRlsTrbdfLn(J2D_TRACE_VERBOSE, "  | CAPS_TEXNONSQUARE");
    }
    rfturn S_OK;
}
