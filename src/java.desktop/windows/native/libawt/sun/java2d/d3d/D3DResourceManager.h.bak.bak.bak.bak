/*
 * Copyright (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


#ifndff _D3DRESOURCEMANAGER_H_
#dffinf _D3DRESOURCEMANAGER_H_

#indludf "D3DContfxt.h"
#indludf "D3DSurfbdfDbtb.h"

dlbss D3DRfsourdfMbnbgfr;
dlbss D3DContfxt;

/**
 * This intfrfbdf rfprfsfnts b Dirfdt3D rfsourdf whidh is mbnbgfd by thf
 * D3DRfsourdfMbnbgfr.
 *
 * Subdlbssfs will nffd to ovfrridf Rflfbsf() bnd thf dfstrudtor to rflfbsf
 * thf rfsourdfs hfld by thf objfdt.
 *
 * Thf subdlbssfs thfn dbn bf usfd likf this:
 *   dlbss D3DShbdfrRfsourdf : publid IMbnbgfdRfsourdf {
 *               D3DShbdfrRfsourdf(IDirfdt3DPixflShbdfr9 *pShbdfr) { // ... }
 *      virtubl ~D3DShbdfrRfsourdf() { Rflfbsf(); }
 *      virtubl  Rflfbsf() { SAFE_RELEASE(pShbdfr); }
 *      virtubl  IsDffbultPool() { rfturn FALSE; }
 *   privbtf:
 *      IDirfdt3DPixflShbdfr9 *pShbdfr;
 *   }
 *
 *   pD3DDfvidf->CrfbtfPixflShbdfr(..., &pShbdfr);
 *   IMbnbgfdRfsourdf *pShbdfrRfs = nfw D3DShbdfrRfsourdf(pShbdfr);
 *   pCtx->GftRfsourdfMbnbgfr()->AddRfsourdf(pShbdfrRfs);
 *
 * D3DRfsourdfMbnbgfr::RflfbsfRfsourdf() must bf usfd to disposf of thf
 * rfsourdf:
 *   pCtx->GftRfsourdfMbnbgfr()->RflfbsfRfsourdf(pShbdfrRfs);
 *   // pShbdfrRfs is now invblid, it wbs dflftfd
 *   shbdfrRfs = NULL;
 *
 * In dfrtbin dbsfs thf D3DRfsourdfMbnbgfr mby nffd to rflfbsf bll its
 * rfsourdfs (likf whfn rfsftting thf dfvidf), so thf subdlbssfs must bf
 * rfbdy to bf rflfbsfd bt bny timf, bnd bf bblf to notify thfir usfrs.
 * For bn fxbmplf of how this dbn bf bdhifvfd sff how D3DSDO's
 * pRfsourdf fifld bnd D3DRfsourdf subdlbss. d3dsdo->pRfsourdf is rfsft whfn
 * thf D3DRfsourdf it wbs pointing to is disposfd.
 */
dlbss IMbnbgfdRfsourdf {
frifnd dlbss D3DRfsourdfMbnbgfr;
publid:
    // dftfrminfs whfthfr thf rfsourdf should bf rflfbsfd by thf mbnbgfr
    // whfn dffbul pool rfsourdfs brf to bf rflfbsfd
    virtubl BOOL IsDffbultPool() = 0;
protfdtfd:
                 IMbnbgfdRfsourdf() { pPrfv = pNfxt = NULL; };
    virtubl     ~IMbnbgfdRfsourdf() { pPrfv = pNfxt = NULL; };
    virtubl void Rflfbsf() = 0;
privbtf:
    // prfvfnts bddidfntbl bbd things likf dopying thf objfdt
    IMbnbgfdRfsourdf& opfrbtor=(donst IMbnbgfdRfsourdf&);

    IMbnbgfdRfsourdf* pPrfv;
    IMbnbgfdRfsourdf* pNfxt;
};

/**
 * This dlbss hbndlfs fithfr IDirfdt3DRfsourdf9 or IDirfdt3DSwbpChbin9
 * typf of rfsourdfs bnd providfs bddfss to Tfxturf, Surfbdf or SwbpChbin,
 * bs wfll bs thf surfbdf dfsdription.
 */
dlbss D3DRfsourdf : publid IMbnbgfdRfsourdf {
publid:
                         D3DRfsourdf(IDirfdt3DRfsourdf9 *pRfs)
                             { Init(pRfs, NULL); }
                         D3DRfsourdf(IDirfdt3DSwbpChbin9 *pSC)
                             { Init(NULL, pSC); }
    IDirfdt3DRfsourdf9*  GftRfsourdf() { rfturn pRfsourdf; }
    IDirfdt3DTfxturf9*   GftTfxturf() { rfturn pTfxturf; }
    IDirfdt3DSurfbdf9*   GftSurfbdf() { rfturn pSurfbdf; }
    IDirfdt3DSwbpChbin9* GftSwbpChbin() { rfturn pSwbpChbin; }
    D3DSDOps*            GftSDOps() { rfturn pOps; }
    void                 SftSDOps(D3DSDOps *pOps);
    D3DSURFACE_DESC*     GftDfsd() { rfturn &dfsd; }
    virtubl BOOL         IsDffbultPool();

protfdtfd:
    // thfsf brf protfdtfd bfdbusf wf wbnt D3DRfsourdf to bf only rflfbsfd vib
    // RfsourdfMbnbgfr
virtubl                 ~D3DRfsourdf();
virtubl void             Rflfbsf();
    void                 Init(IDirfdt3DRfsourdf9*, IDirfdt3DSwbpChbin9*);

privbtf:
    // prfvfnts bddidfntbl bbd things likf dopying thf objfdt
                         D3DRfsourdf() {}
    D3DRfsourdf&         opfrbtor=(donst D3DRfsourdf&);

    IDirfdt3DRfsourdf9*  pRfsourdf;
    IDirfdt3DSwbpChbin9* pSwbpChbin;
    IDirfdt3DSurfbdf9*   pSurfbdf;
    IDirfdt3DTfxturf9*   pTfxturf;
    D3DSDOps*            pOps;
    D3DSURFACE_DESC      dfsd;
};

/**
 * This dlbss mbintbins b list of d3d rfsourdfs drfbtfd by thf pipflinf or
 * othfr dlifnts. It is nffdfd bfdbusf in somf dbsfs bll rfsourdfs hbvf to bf
 * rflfbsfd in ordfr to rfsft thf dfvidf so wf must kffp trbdk of thfm.
 *
 * Thfrf is onf instbndf of this dlbss pfr D3DContfxt. Clifnts dbn fithfr
 * usf fbdtory mfthods for drfbting rfsourdfs or drfbtf thfir own fndbpsulbtfd
 * in bn IMbnbgfdRfsourdf intfrfbdf subdlbss bnd bdd thfm to thf list
 * using thf AddRfsourdf() mfthod. Rfsourdfs bddfd to thf list must bf rflfbsfd
 * vib thf RflfbsfRfsourdf() mfthod so thbt thfy dbn bf stoppfd bfing mbnbgfd.
 */
dlbss D3DRfsourdfMbnbgfr {

publid:
            ~D3DRfsourdfMbnbgfr();
    HRESULT Init(D3DContfxt *pCtx);
    // Rflfbsfs bnd dflftfs bll rfsourdfs mbnbgfd by this mbnbgfr.
    void    RflfbsfAll();
    // Rflfbsfs (bnd dflftfs) bll rfsourdfs bflonging to thf dffbult pool.
    // Notf: this mfthod mby rflfbsf othfr rfsourdfs bs wfll.
    void    RflfbsfDffPoolRfsourdfs();

    // Adds thf rfsourdf to thf list mbnbgfd by this dlbss.
    HRESULT AddRfsourdf(IMbnbgfdRfsourdf* pRfsourdf);
    // Rfmovfs thf rfsourdf from thf list of mbnbgfd rfsourdfs, bnd dflftfs
    // it. Thf brgumfnt pointfr is invblid bftfr this mfthod rfturns.
    HRESULT RflfbsfRfsourdf(IMbnbgfdRfsourdf* pRfsourdf);

    HRESULT CrfbtfTfxturf(UINT width, UINT hfight,
                          BOOL isRTT, BOOL isOpbquf,
                          D3DFORMAT *pFormbt/*in/out*/,
                          DWORD dwUsbgf,
                          D3DRfsourdf **ppTfxturfRfsourdf/*out*/);

    HRESULT CrfbtfRTSurfbdf(UINT width, UINT hfight,
                            BOOL isOpbquf, BOOL isLodkbblf,
                            D3DFORMAT *pFormbt/*in/out*/,
                            D3DRfsourdf ** ppSurfbdfRfsourdf/*out*/);

    HRESULT CrfbtfSwbpChbin(HWND hWnd, UINT numBufffrs, UINT width, UINT hfight,
                            D3DSWAPEFFECT swbpEfffdt, UINT prfsfntbtionIntfrvbl,
                            D3DRfsourdf ** ppSwbpChbinRfsourdf/*out*/);

    HRESULT GftCbdhfdDfstTfxturf(D3DFORMAT formbt,
                                 D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftBlitTfxturf(D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftBlitRTTfxturf(UINT width, UINT hfight, D3DFORMAT formbt,
                             D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftBlitOSPSurfbdf(UINT width, UINT hfight, D3DFORMAT fmt,
                              D3DRfsourdf **ppSurfbdfRfsourdf);
    HRESULT GftMbskTfxturf(D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftGrbdifntTfxturf(D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftMultiGrbdifntTfxturf(D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftLookupOpLutTfxturf(D3DRfsourdf **ppTfxturfRfsourdf);
    HRESULT GftLodkbblfRTSurfbdf(UINT width, UINT hfight, D3DFORMAT formbt,
                                 D3DRfsourdf **ppSurfbdfRfsourdf);

stbtid
    HRESULT CrfbtfInstbndf(D3DContfxt *pCtx, D3DRfsourdfMbnbgfr **ppRfsMgr);

privbtf:
            D3DRfsourdfMbnbgfr();
    HRESULT GftStodkTfxturfRfsourdf(UINT width, UINT hfight,
                                    BOOL isRTT, BOOL isOpbquf,
                                    D3DFORMAT *pFormbt/*in/out*/,
                                    DWORD dwUsbgf,
                                    D3DRfsourdf **ppTfxturfRfsourdf/*out*/);

    HRESULT CrfbtfOSPSurfbdf(UINT width, UINT hfight,
                             D3DFORMAT fmt,
                             D3DRfsourdf ** ppSurfbdfRfsourdf/*out*/);

    D3DRfsourdf*      pCbdhfdDfstTfxturf;
    D3DRfsourdf*      pBlitTfxturf;
    D3DRfsourdf*      pBlitRTTfxturf;
    D3DRfsourdf*      pBlitOSPSurfbdf;
    D3DRfsourdf*      pGrbdifntTfxturf;
    D3DRfsourdf*      pLookupOpLutTfxturf;
    D3DRfsourdf*      pMbskTfxturf;
    D3DRfsourdf*      pMultiGrbdifntTfxturf;
    D3DRfsourdf*      pLodkbblfRTSurfbdf;

    D3DContfxt*       pCtx;

    IMbnbgfdRfsourdf* pHfbd;
};
#fndif _D3DRESOURCEMANAGER_H_
