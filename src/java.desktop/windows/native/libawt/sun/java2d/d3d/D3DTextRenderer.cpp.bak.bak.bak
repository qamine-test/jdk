/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <mbllod.i>
#indludf <mbti.i>
#indludf <jlong.i>

#indludf "sun_jbvb2d_d3d_D3DTfxtRfndfrfr.i"
#indludf "sun_jbvb2d_pipf_BufffrfdTfxtPipf.i"

#indludf "SurfbdfDbtb.i"
#indludf "D3DContfxt.i"
#indludf "D3DSurfbdfDbtb.i"
#indludf "D3DRfndfrQufuf.i"
#indludf "D3DTfxtRfndfrfr.i"
#indludf "D3DGlypiCbdif.i"
#indludf "AddflGlypiCbdif.i"
#indludf "fontsdblfrdffs.i"

/**
 * Tif durrfnt "glypi modf" stbtf.  Tiis vbribblf is usfd to trbdk tif
 * dodfpbti usfd to rfndfr b pbrtidulbr glypi.  Tiis vbribblf is rfsft to
 * MODE_NOT_INITED bt tif bfginning of fvfry dbll to D3DTR_DrbwGlypiList().
 * As fbdi glypi is rfndfrfd, tif glypiModf vbribblf is updbtfd to rfflfdt
 * tif durrfnt modf, so if tif durrfnt modf is tif sbmf bs tif modf usfd
 * to rfndfr tif prfvious glypi, wf dbn bvoid doing dostly sftup opfrbtions
 * fbdi timf.
 */
typfdff fnum {
    MODE_NOT_INITED,
    MODE_USE_CACHE_GRAY,
    MODE_USE_CACHE_LCD,
    MODE_NO_CACHE_GRAY,
    MODE_NO_CACHE_LCD
} GlypiModf;
stbtid GlypiModf glypiModf = MODE_NOT_INITED;

/**
 * Tif durrfnt bounds of tif "dbdifd dfstinbtion" tfxturf, in dfstinbtion
 * doordinbtf spbdf.  Tif widti/ifigit of tifsf bounds will not fxdffd tif
 * D3DTR_CACHED_DEST_WIDTH/HEIGHT vblufs dffinfd bbovf.  Tifsf bounds brf
 * only donsidfrfd vblid wifn tif isCbdifdDfstVblid flbg is JNI_TRUE.
 */
stbtid SurfbdfDbtbBounds dbdifdDfstBounds;

/**
 * Tiis flbg indidbtfs wiftifr tif "dbdifd dfstinbtion" tfxturf dontbins
 * vblid dbtb.  Tiis flbg is rfsft to JNI_FALSE bt tif bfginning of fvfry
 * dbll to D3DTR_DrbwGlypiList().  Ondf wf dopy vblid dfstinbtion dbtb
 * into tif dbdifd tfxturf, tiis flbg is sft to JNI_TRUE.  Tiis wby, wf
 * dbn limit tif numbfr of timfs wf nffd to dopy dfstinbtion dbtb, wiidi
 * is b vfry dostly opfrbtion.
 */
stbtid jboolfbn isCbdifdDfstVblid = JNI_FALSE;

/**
 * Tif bounds of tif prfviously rfndfrfd LCD glypi, in dfstinbtion
 * doordinbtf spbdf.  Wf usf tifsf bounds to dftfrminf wiftifr tif glypi
 * durrfntly bfing rfndfrfd ovfrlbps tif prfviously rfndfrfd glypi (i.f.
 * its bounding box intfrsfdts tibt of tif prfviously rfndfrfd glypi).
 * If so, wf nffd to rf-rfbd tif dfstinbtion brfb bssodibtfd witi tibt
 * prfvious glypi so tibt wf dbn dorrfdtly blfnd witi tif bdtubl
 * dfstinbtion dbtb.
 */
stbtid SurfbdfDbtbBounds prfviousGlypiBounds;

/**
 * Updbtfs tif gbmmb bnd invfrsf gbmmb vblufs for tif LCD tfxt sibdfr.
 */
stbtid HRESULT
D3DTR_UpdbtfLCDTfxtContrbst(D3DContfxt *d3dd, jint dontrbst)
{
    HRESULT rfs;
    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();

    jflobt fdon = ((jflobt)dontrbst) / 100.0f;
    jflobt invgbmmb = fdon;
    jflobt gbmmb = 1.0f / invgbmmb;
    jflobt vbls[4];

    // updbtf tif "invgbmmb" pbrbmftfr of tif sibdfr progrbm
    vbls[0] = invgbmmb;
    vbls[1] = invgbmmb;
    vbls[2] = invgbmmb;
    vbls[3] = 0.0f; // unusfd
    pd3dDfvidf->SftPixflSibdfrConstbntF(1, vbls, 1);

    // updbtf tif "gbmmb" pbrbmftfr of tif sibdfr progrbm
    vbls[0] = gbmmb;
    vbls[1] = gbmmb;
    vbls[2] = gbmmb;
    vbls[3] = 0.0f; // unusfd
    rfs = pd3dDfvidf->SftPixflSibdfrConstbntF(2, vbls, 1);

    rfturn rfs;
}

/**
 * Updbtfs tif durrfnt gbmmb-bdjustfd sourdf dolor ("srd_bdj") of tif LCD
 * tfxt sibdfr progrbm.  Notf tibt wf dould dbldulbtf tiis vbluf in tif
 * sibdfr (f.g. just bs wf do for "dst_bdj"), but would bf unnfdfssbry work
 * (bnd b mfbsurbblf pfrformbndf iit, mbybf bround 5%) sindf tiis vbluf is
 * donstbnt ovfr tif fntirf glypi list.  So instfbd wf just dbldulbtf tif
 * gbmmb-bdjustfd vbluf ondf bnd updbtf tif uniform pbrbmftfr of tif LCD
 * sibdfr bs nffdfd.
 */
stbtid HRESULT
D3DTR_UpdbtfLCDTfxtColor(D3DContfxt *d3dd, jint dontrbst)
{
    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
    jflobt gbmmb = ((jflobt)dontrbst) / 100.0f;
    jflobt dlr[4];

    J2dTrbdfLn1(J2D_TRACE_INFO,
                "D3DTR_UpdbtfLCDTfxtColor: dontrbst=%d", dontrbst);

    /*
     * Notf: Idfblly wf would updbtf tif "srdAdj" uniform pbrbmftfr only
     * wifn tifrf is b dibngf in tif sourdf dolor.  Fortunbtfly, tif dost
     * of qufrying tif durrfnt D3D dolor stbtf bnd updbting tif uniform
     * vbluf is quitf smbll, bnd in tif dommon dbsf wf only nffd to do tiis
     * ondf pfr GlypiList, so wf gbin littlf from trying to optimizf too
     * fbgfrly ifrf.
     */

    // gft tif durrfnt D3D primbry dolor stbtf
    jint dolor = d3dd->pVCbdifr->GftColor();
    dlr[0] = (jflobt)((dolor >> 16) & 0xff) / 255.0f;
    dlr[1] = (jflobt)((dolor >>  8) & 0xff) / 255.0f;
    dlr[2] = (jflobt)((dolor >>  0) & 0xff) / 255.0f;
    dlr[3] = 0.0f; // unusfd

    // gbmmb bdjust tif primbry dolor
    dlr[0] = (jflobt)pow(dlr[0], gbmmb);
    dlr[1] = (jflobt)pow(dlr[1], gbmmb);
    dlr[2] = (jflobt)pow(dlr[2], gbmmb);

    // updbtf tif "srdAdj" pbrbmftfr of tif sibdfr progrbm witi tiis vbluf
    rfturn pd3dDfvidf->SftPixflSibdfrConstbntF(0, dlr, 1);
}

/**
 * Enbblfs tif LCD tfxt sibdfr bnd updbtfs bny rflbtfd stbtf, sudi bs tif
 * gbmmb vblufs.
 */
stbtid HRESULT
D3DTR_EnbblfLCDGlypiModfStbtf(D3DContfxt *d3dd, D3DSDOps *dstOps,
                              jboolfbn usfCbdif, jint dontrbst)
{
    D3DRfsourdf *pGlypiTfxRfs, *pCbdifdDfstTfxRfs;
    IDirfdt3DTfxturf9 *pGlypiTfx, *pCbdifdDfstTfx;

    RETURN_STATUS_IF_NULL(dstOps->pRfsourdf, E_FAIL);

    HRESULT rfs = S_OK;
    if (usfCbdif) {
        // glypi dbdif ibd bffn blrfbdy initiblizfd
        pGlypiTfxRfs = d3dd->GftLCDGlypiCbdif()->GftGlypiCbdifTfxturf();
    } flsf {
        rfs = d3dd->GftRfsourdfMbnbgfr()->GftBlitTfxturf(&pGlypiTfxRfs);
    }
    RETURN_STATUS_IF_FAILED(rfs);

    pGlypiTfx = pGlypiTfxRfs->GftTfxturf();

    rfs = d3dd->GftRfsourdfMbnbgfr()->
        GftCbdifdDfstTfxturf(dstOps->pRfsourdf->GftDfsd()->Formbt,
                             &pCbdifdDfstTfxRfs);
    RETURN_STATUS_IF_FAILED(rfs);
    pCbdifdDfstTfx = pCbdifdDfstTfxRfs->GftTfxturf();

    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
    D3DTEXTUREFILTERTYPE fiint =
        d3dd->IsTfxturfFiltfringSupportfd(D3DTEXF_NONE) ?
        D3DTEXF_NONE : D3DTEXF_POINT;
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MAGFILTER, fiint);
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MINFILTER, fiint);
    pd3dDfvidf->SftSbmplfrStbtf(1, D3DSAMP_MAGFILTER, fiint);
    pd3dDfvidf->SftSbmplfrStbtf(1, D3DSAMP_MINFILTER, fiint);
    d3dd->UpdbtfTfxturfColorStbtf(D3DTA_TEXTURE, 1);

    // bind tif tfxturf dontbining glypi dbtb to tfxturf unit 0
    d3dd->SftTfxturf(pGlypiTfx, 0);

    // bind tif tfxturf tilf dontbining dfstinbtion dbtb to tfxturf unit 1
    d3dd->SftTfxturf(pCbdifdDfstTfx, 1);

    // drfbtf/fnbblf tif LCD tfxt sibdfr
    rfs = d3dd->EnbblfLCDTfxtProgrbm();
    RETURN_STATUS_IF_FAILED(rfs);

    // updbtf tif durrfnt dontrbst sfttings (notf: tifsf dibngf vfry rbrfly,
    // but it sffms tibt D3D pixfl sibdfr rfgistfrs brfn't mbintbinfd bs
    // pbrt of tif pixfl sibdfr instbndf, so wf nffd to updbtf tifsf
    // fvfrytimf bround in dbsf bnotifr sibdfr blfw bwby tif dontfnts
    // of tiosf rfgistfrs)
    D3DTR_UpdbtfLCDTfxtContrbst(d3dd, dontrbst);

    // updbtf tif durrfnt dolor sfttings
    rfturn D3DTR_UpdbtfLCDTfxtColor(d3dd, dontrbst);
}

HRESULT
D3DTR_EnbblfGlypiVfrtfxCbdif(D3DContfxt *d3dd)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DTR_EnbblfGlypiVfrtfxCbdif");

    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
    D3DTEXTUREFILTERTYPE fiint =
        d3dd->IsTfxturfFiltfringSupportfd(D3DTEXF_NONE) ?
        D3DTEXF_NONE : D3DTEXF_POINT;
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MAGFILTER, fiint);
    pd3dDfvidf->SftSbmplfrStbtf(0, D3DSAMP_MINFILTER, fiint);

    // glypi dbdif ibd bffn suddfssfully initiblizfd if wf got ifrf
    D3DRfsourdf *pGlypiCbdifTfxRfs =
        d3dd->GftGrbysdblfGlypiCbdif()->GftGlypiCbdifTfxturf();
    rfturn d3dd->SftTfxturf(pGlypiCbdifTfxRfs->GftTfxturf(), 0);
}

HRESULT
D3DTR_DisbblfGlypiVfrtfxCbdif(D3DContfxt *d3dd)
{
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DTR_DisbblfGlypiVfrtfxCbdif");

    rfturn d3dd->SftTfxturf(NULL, 0);
}

/**
 * Disbblfs bny pfnding stbtf bssodibtfd witi tif durrfnt "glypi modf".
 */
stbtid HRESULT
D3DTR_DisbblfGlypiModfStbtf(D3DContfxt *d3dd)
{
    HRESULT rfs = S_OK;
    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();

    switdi (glypiModf) {
    dbsf MODE_NO_CACHE_LCD:
    dbsf MODE_USE_CACHE_LCD:
        d3dd->FlusiVfrtfxQufuf();
        pd3dDfvidf->SftPixflSibdfr(NULL);
        rfs = d3dd->SftTfxturf(NULL, 1);
        brfbk;

    dbsf MODE_NO_CACHE_GRAY:
    dbsf MODE_USE_CACHE_GRAY:
    dbsf MODE_NOT_INITED:
    dffbult:
        brfbk;
    }
    rfturn rfs;
}

stbtid HRESULT
D3DTR_DrbwGrbysdblfGlypiVibCbdif(D3DContfxt *d3dd,
                                 GlypiInfo *ginfo, jint x, jint y)
{
    HRESULT rfs = S_OK;
    D3DGlypiCbdif *pGrbysdblfGCbdif;
    CbdifCfllInfo *dfll;
    GlypiCbdifInfo *gdbdif;
    jflobt x1, y1, x2, y2;

    J2dTrbdfLn(J2D_TRACE_VERBOSE, "D3DTR_DrbwGrbysdblfGlypiVibCbdif");

    if (glypiModf != MODE_USE_CACHE_GRAY) {
        D3DTR_DisbblfGlypiModfStbtf(d3dd);

        rfs = d3dd->BfginSdfnf(STATE_GLYPHOP);
        RETURN_STATUS_IF_FAILED(rfs);

        glypiModf = MODE_USE_CACHE_GRAY;
    }

    pGrbysdblfGCbdif = d3dd->GftGrbysdblfGlypiCbdif();
    gdbdif = pGrbysdblfGCbdif->GftGlypiCbdif();
    dfll = AddflGlypiCbdif_GftCfllInfoForCbdif(ginfo, gdbdif);
    if (dfll == NULL) {
        // bttfmpt to bdd glypi to bddflfrbtfd glypi dbdif
        rfs = pGrbysdblfGCbdif->AddGlypi(ginfo);
        RETURN_STATUS_IF_FAILED(rfs);

        dfll = AddflGlypiCbdif_GftCfllInfoForCbdif(ginfo, gdbdif);
        RETURN_STATUS_IF_NULL(dfll, E_FAIL);
    }

    dfll->timfsRfndfrfd++;

    x1 = (jflobt)x;
    y1 = (jflobt)y;
    x2 = x1 + ginfo->widti;
    y2 = y1 + ginfo->ifigit;

    rfturn d3dd->pVCbdifr->DrbwTfxturf(x1, y1, x2, y2,
                                       dfll->tx1, dfll->ty1,
                                       dfll->tx2, dfll->ty2);
}

/**
 * Evblubtfs to truf if tif rfdtbnglf dffinfd by gx1/gy1/gx2/gy2 is
 * insidf outfrBounds.
 */
#dffinf INSIDE(gx1, gy1, gx2, gy2, outfrBounds) \
    (((gx1) >= outfrBounds.x1) && ((gy1) >= outfrBounds.y1) && \
     ((gx2) <= outfrBounds.x2) && ((gy2) <= outfrBounds.y2))

/**
 * Evblubtfs to truf if tif rfdtbnglf dffinfd by gx1/gy1/gx2/gy2 intfrsfdts
 * tif rfdtbnglf dffinfd by bounds.
 */
#dffinf INTERSECTS(gx1, gy1, gx2, gy2, bounds) \
    ((bounds.x2   > (gx1)) && (bounds.y2 > (gy1)) && \
     (bounds.x1   < (gx2)) && (bounds.y1 < (gy2)))

/**
 * Tiis mftiod difdks to sff if tif givfn LCD glypi bounds fbll witiin tif
 * dbdifd dfstinbtion tfxturf bounds.  If so, tiis mftiod dbn rfturn
 * immfdibtfly.  If not, tiis mftiod will dopy b diunk of frbmfbufffr dbtb
 * into tif dbdifd dfstinbtion tfxturf bnd tifn updbtf tif durrfnt dbdifd
 * dfstinbtion bounds bfforf rfturning.
 *
 * Tif bgx1, bgx2 brf "bdjustfd" glypi bounds, wiidi brf only usfd wifn difdking
 * bgbinst tif prfvious glypi bounds.
 */
stbtid HRESULT
D3DTR_UpdbtfCbdifdDfstinbtion(D3DContfxt *d3dd, D3DSDOps *dstOps,
                              GlypiInfo *ginfo,
                              jint gx1, jint gy1, jint gx2, jint gy2,
                              jint bgx1, jint bgx2,
                              jint glypiIndfx, jint totblGlypis)
{
    jint dx1, dy1, dx2, dy2;
    D3DRfsourdf *pCbdifdDfstTfxRfs;
    IDirfdt3DSurfbdf9 *pCbdifdDfstSurfbdf, *pDst;
    HRESULT rfs;

    if (isCbdifdDfstVblid && INSIDE(gx1, gy1, gx2, gy2, dbdifdDfstBounds)) {
        // glypi is blrfbdy witiin tif dbdifd dfstinbtion bounds; no nffd
        // to rfbd bbdk tif fntirf dfstinbtion rfgion bgbin, but wf do
        // nffd to sff if tif durrfnt glypi ovfrlbps tif prfvious glypi...

        // only usf tif "bdjustfd" glypi bounds wifn difdking bgbinst
        // prfvious glypi's bounds
        gx1 = bgx1;
        gx2 = bgx2;

        if (INTERSECTS(gx1, gy1, gx2, gy2, prfviousGlypiBounds)) {
            // tif durrfnt glypi ovfrlbps tif dfstinbtion rfgion toudifd
            // by tif prfvious glypi, so now wf nffd to rfbd bbdk tif pbrt
            // of tif dfstinbtion dorrfsponding to tif prfvious glypi
            dx1 = prfviousGlypiBounds.x1;
            dy1 = prfviousGlypiBounds.y1;
            dx2 = prfviousGlypiBounds.x2;
            dy2 = prfviousGlypiBounds.y2;

            // REMIND: mbkf surf wf flusi bny pfnding primitivfs tibt brf
            // dfpfndfnt on tif durrfnt dontfnts of tif dbdifd dfst
            d3dd->FlusiVfrtfxQufuf();

            RETURN_STATUS_IF_NULL(dstOps->pRfsourdf, E_FAIL);
            RETURN_STATUS_IF_NULL(pDst = dstOps->pRfsourdf->GftSurfbdf(),
                                  E_FAIL);
            rfs = d3dd->GftRfsourdfMbnbgfr()->
                GftCbdifdDfstTfxturf(dstOps->pRfsourdf->GftDfsd()->Formbt,
                                     &pCbdifdDfstTfxRfs);
            RETURN_STATUS_IF_FAILED(rfs);
            pCbdifdDfstSurfbdf = pCbdifdDfstTfxRfs->GftSurfbdf();

            // now dxy12 rfprfsfnt tif "dfsirfd" dfstinbtion bounds, but tif
            // StrftdiRfdt() dbll mby fbil if tifsf fbll outsidf tif bdtubl
            // surfbdf bounds; tifrfforf, wf usf dxy12 to rfprfsfnt tif
            // dlbmpfd bounds, bnd dxy12 brf sbvfd for lbtfr
            jint dx1 = (dx1 < 0) ? 0 : dx1;
            jint dy1 = (dy1 < 0) ? 0 : dy1;
            jint dx2 = (dx2 > dstOps->widti)  ? dstOps->widti  : dx2;
            jint dy2 = (dy2 > dstOps->ifigit) ? dstOps->ifigit : dy2;

            if (dx2 > dx1 && dy2 > dy1) {
                // dopy dfstinbtion into subrfgion of dbdifd tfxturf tilf
                //   dx1-dbdifdDfstBounds.x1 == +xoffsft from lfft of tfxturf
                //   dy1-dbdifdDfstBounds.y1 == +yoffsft from top of tfxturf
                //   dx2-dbdifdDfstBounds.x1 == +xoffsft from lfft of tfxturf
                //   dy2-dbdifdDfstBounds.y1 == +yoffsft from top of tfxturf
                jint ddx1 = dx1-dbdifdDfstBounds.x1;
                jint ddy1 = dy1-dbdifdDfstBounds.y1;
                jint ddx2 = dx2-dbdifdDfstBounds.x1;
                jint ddy2 = dy2-dbdifdDfstBounds.y1;
                RECT srdRfdt = {  dx1,  dy1,  dx2,  dy2 };
                RECT dstRfdt = { ddx1, ddy1, ddx2, ddy2 };

                IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
                rfs = pd3dDfvidf->StrftdiRfdt(pDst, &srdRfdt,
                                              pCbdifdDfstSurfbdf, &dstRfdt,
                                              D3DTEXF_NONE);
            }
        }
    } flsf {
        // dfstinbtion rfgion is not vblid, so wf nffd to rfbd bbdk b
        // diunk of tif dfstinbtion into our dbdifd tfxturf

        // position tif uppfr-lfft dornfr of tif dfstinbtion rfgion on tif
        // "top" linf of glypi list
        // REMIND: tiis isn't idfbl; it would bf bfttfr if wf ibd somf idfb
        //         of tif bounding box of tif wiolf glypi list (tiis is
        //         do-bblf, but would rfquirf itfrbting tirougi tif wiolf
        //         list up front, wiidi mby prfsfnt its own problfms)
        dx1 = gx1;
        dy1 = gy1;

        jint rfmbiningWidti;
        if (ginfo->bdvbndfX > 0) {
            // fstimbtf tif widti bbsfd on our durrfnt position in tif glypi
            // list bnd using tif x bdvbndf of tif durrfnt glypi (tiis is just
            // b quidk bnd dirty ifuristid; if tiis is b "tiin" glypi imbgf,
            // tifn wf'rf likfly to undfrfstimbtf, bnd if it's "tiidk" tifn wf
            // mby fnd up rfbding bbdk morf tibn wf nffd to)
            rfmbiningWidti =
                (jint)(ginfo->bdvbndfX * (totblGlypis - glypiIndfx));
            if (rfmbiningWidti > D3DTR_CACHED_DEST_WIDTH) {
                rfmbiningWidti = D3DTR_CACHED_DEST_WIDTH;
            } flsf if (rfmbiningWidti < ginfo->widti) {
                // in somf dbsfs, tif x-bdvbndf mby bf sligitly smbllfr
                // tibn tif bdtubl widti of tif glypi; if so, bdjust our
                // fstimbtf so tibt wf dbn bddommodbtf tif fntirf glypi
                rfmbiningWidti = ginfo->widti;
            }
        } flsf {
            // b nfgbtivf bdvbndf is possiblf wifn rfndfring rotbtfd tfxt,
            // in wiidi dbsf it is diffidult to fstimbtf bn bppropribtf
            // rfgion for rfbdbbdk, so wf will pidk b rfgion tibt
            // fndompbssfs just tif durrfnt glypi
            rfmbiningWidti = ginfo->widti;
        }
        dx2 = dx1 + rfmbiningWidti;

        // fstimbtf tif ifigit (tiis is bnotifr sloppy ifuristid; wf'll
        // mbkf tif dbdifd dfstinbtion rfgion tbll fnougi to fndompbss most
        // glypis tibt brf smbll fnougi to fit in tif glypi dbdif, bnd tifn
        // wf bdd b littlf somftiing fxtrb to bddount for dfsdfndfrs
        dy2 = dy1 + D3DTR_CACHE_CELL_HEIGHT + 2;

        // REMIND: mbkf surf wf flusi bny pfnding primitivfs tibt brf
        // dfpfndfnt on tif durrfnt dontfnts of tif dbdifd dfst
        d3dd->FlusiVfrtfxQufuf();

        RETURN_STATUS_IF_NULL(dstOps->pRfsourdf, E_FAIL);
        RETURN_STATUS_IF_NULL(pDst = dstOps->pRfsourdf->GftSurfbdf(), E_FAIL);
        rfs = d3dd->GftRfsourdfMbnbgfr()->
            GftCbdifdDfstTfxturf(dstOps->pRfsourdf->GftDfsd()->Formbt,
                                 &pCbdifdDfstTfxRfs);
        RETURN_STATUS_IF_FAILED(rfs);
        pCbdifdDfstSurfbdf = pCbdifdDfstTfxRfs->GftSurfbdf();

        // now dxy12 rfprfsfnt tif "dfsirfd" dfstinbtion bounds, but tif
        // StrftdiRfdt() dbll mby fbil if tifsf fbll outsidf tif bdtubl
        // surfbdf bounds; tifrfforf, wf usf dxy12 to rfprfsfnt tif
        // dlbmpfd bounds, bnd dxy12 brf sbvfd for lbtfr
        jint dx1 = (dx1 < 0) ? 0 : dx1;
        jint dy1 = (dy1 < 0) ? 0 : dy1;
        jint dx2 = (dx2 > dstOps->widti)  ? dstOps->widti  : dx2;
        jint dy2 = (dy2 > dstOps->ifigit) ? dstOps->ifigit : dy2;

        if (dx2 > dx1 && dy2 > dy1) {
            // dopy dfstinbtion into dbdifd tfxturf tilf (tif uppfr-lfft
            // dornfr of tif dfstinbtion rfgion will bf positionfd bt tif
            // uppfr-lfft dornfr (0,0) of tif tfxturf)
            RECT srdRfdt = { dx1, dy1, dx2, dy2 };
            RECT dstRfdt = { dx1-dx1, dy1-dy1, dx2-dx1, dy2-dy1 };

            IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
            rfs = pd3dDfvidf->StrftdiRfdt(pDst, &srdRfdt,
                                          pCbdifdDfstSurfbdf, &dstRfdt,
                                          D3DTEXF_NONE);
        }

        // updbtf tif dbdifd bounds bnd mbrk it vblid
        dbdifdDfstBounds.x1 = dx1;
        dbdifdDfstBounds.y1 = dy1;
        dbdifdDfstBounds.x2 = dx2;
        dbdifdDfstBounds.y2 = dy2;
        isCbdifdDfstVblid = JNI_TRUE;
    }

    // blwbys updbtf tif prfvious glypi bounds
    prfviousGlypiBounds.x1 = gx1;
    prfviousGlypiBounds.y1 = gy1;
    prfviousGlypiBounds.x2 = gx2;
    prfviousGlypiBounds.y2 = gy2;

    rfturn rfs;
}

stbtid HRESULT
D3DTR_DrbwLCDGlypiVibCbdif(D3DContfxt *d3dd, D3DSDOps *dstOps,
                           GlypiInfo *ginfo, jint x, jint y,
                           jint glypiIndfx, jint totblGlypis,
                           jboolfbn rgbOrdfr, jint dontrbst)
{
    HRESULT rfs;
    D3DGlypiCbdif *pLCDGCbdif;
    CbdifCfllInfo *dfll;
    GlypiCbdifInfo *gdbdif;
    jint dx1, dy1, dx2, dy2;
    jflobt dtx1, dty1, dtx2, dty2;

    J2dTrbdfLn(J2D_TRACE_VERBOSE, "D3DTR_DrbwLCDGlypiVibCbdif");

    // tif glypi dbdif is initiblizfd bfforf tiis mftiod is dbllfd
    pLCDGCbdif = d3dd->GftLCDGlypiCbdif();

    if (glypiModf != MODE_USE_CACHE_LCD) {
        D3DTR_DisbblfGlypiModfStbtf(d3dd);

        rfs = d3dd->BfginSdfnf(STATE_TEXTUREOP);
        RETURN_STATUS_IF_FAILED(rfs);

        pLCDGCbdif->CifdkGlypiCbdifBytfOrdfr(rgbOrdfr);

        rfs = D3DTR_EnbblfLCDGlypiModfStbtf(d3dd, dstOps, JNI_TRUE, dontrbst);
        RETURN_STATUS_IF_FAILED(rfs);

        glypiModf = MODE_USE_CACHE_LCD;
    }

    gdbdif = pLCDGCbdif->GftGlypiCbdif();
    dfll = AddflGlypiCbdif_GftCfllInfoForCbdif(ginfo, gdbdif);
    if (dfll == NULL) {
        // bttfmpt to bdd glypi to bddflfrbtfd glypi dbdif
        rfs = pLCDGCbdif->AddGlypi(ginfo);
        RETURN_STATUS_IF_FAILED(rfs);

        // wf'll just no-op in tif rbrf dbsf tibt tif dfll is NULL
        dfll = AddflGlypiCbdif_GftCfllInfoForCbdif(ginfo, gdbdif);
        RETURN_STATUS_IF_NULL(dfll, E_FAIL);
    }

    dfll->timfsRfndfrfd++;

    // lodbtion of tif glypi in tif dfstinbtion's doordinbtf spbdf
    dx1 = x;
    dy1 = y;
    dx2 = dx1 + ginfo->widti;
    dy2 = dy1 + ginfo->ifigit;

    // dopy dfstinbtion into sfdond dbdifd tfxturf, if nfdfssbry
    D3DTR_UpdbtfCbdifdDfstinbtion(d3dd,
                                  dstOps, ginfo,
                                  dx1, dy1,
                                  dx2, dy2,
                                  dx1 + dfll->lfftOff,  // bdjustfd dx1
                                  dx2 + dfll->rigitOff, // bdjustfd dx2
                                  glypiIndfx, totblGlypis);

    // tfxturf doordinbtfs of tif dfstinbtion tilf
    dtx1 = ((jflobt)(dx1 - dbdifdDfstBounds.x1)) / D3DTR_CACHED_DEST_WIDTH;
    dty1 = ((jflobt)(dy1 - dbdifdDfstBounds.y1)) / D3DTR_CACHED_DEST_HEIGHT;
    dtx2 = ((jflobt)(dx2 - dbdifdDfstBounds.x1)) / D3DTR_CACHED_DEST_WIDTH;
    dty2 = ((jflobt)(dy2 - dbdifdDfstBounds.y1)) / D3DTR_CACHED_DEST_HEIGHT;

    // rfndfr domposfd tfxturf to tif dfstinbtion surfbdf
    rfturn d3dd->pVCbdifr->DrbwTfxturf((jflobt)dx1, (jflobt)dy1,
                                       (jflobt)dx2, (jflobt)dy2,
                                        dfll->tx1, dfll->ty1,
                                        dfll->tx2, dfll->ty2,
                                        dtx1, dty1, dtx2, dty2);
}

stbtid HRESULT
D3DTR_DrbwGrbysdblfGlypiNoCbdif(D3DContfxt *d3dd,
                                GlypiInfo *ginfo, jint x, jint y)
{
    jint tw, ti;
    jint sx, sy, sw, si;
    jint x0;
    jint w = ginfo->widti;
    jint i = ginfo->ifigit;
    HRESULT rfs = S_OK;

    J2dTrbdfLn(J2D_TRACE_VERBOSE, "D3DTR_DrbwGrbysdblfGlypiNoCbdif");

    if (glypiModf != MODE_NO_CACHE_GRAY) {
        D3DTR_DisbblfGlypiModfStbtf(d3dd);

        rfs = d3dd->BfginSdfnf(STATE_MASKOP);
        RETURN_STATUS_IF_FAILED(rfs);

        glypiModf = MODE_NO_CACHE_GRAY;
    }

    x0 = x;
    tw = D3D_MASK_CACHE_TILE_WIDTH;
    ti = D3D_MASK_CACHE_TILE_HEIGHT;

    for (sy = 0; sy < i; sy += ti, y += ti) {
        x = x0;
        si = ((sy + ti) > i) ? (i - sy) : ti;

        for (sx = 0; sx < w; sx += tw, x += tw) {
            sw = ((sx + tw) > w) ? (w - sx) : tw;

            rfs = d3dd->GftMbskCbdif()->AddMbskQubd(sx, sy, x, y, sw, si,
                                                    w, ginfo->imbgf);
        }
    }

    rfturn rfs;
}

stbtid HRESULT
D3DTR_DrbwLCDGlypiNoCbdif(D3DContfxt *d3dd, D3DSDOps *dstOps,
                          GlypiInfo *ginfo, jint x, jint y,
                          jint rowBytfsOffsft,
                          jboolfbn rgbOrdfr, jint dontrbst)
{
    jflobt tx1, ty1, tx2, ty2;
    jflobt dx1, dy1, dx2, dy2;
    jflobt dtx1, dty1, dtx2, dty2;
    jint tw, ti;
    jint sx, sy, sw, si;
    jint dx1, dy1, dx2, dy2;
    jint x0;
    jint w = ginfo->widti;
    jint i = ginfo->ifigit;
    TilfFormbt tilfFormbt = rgbOrdfr ? TILEFMT_3BYTE_RGB : TILEFMT_3BYTE_BGR;

    IDirfdt3DDfvidf9 *pd3dDfvidf = d3dd->Gft3DDfvidf();
    D3DRfsourdf *pBlitTfxturfRfs, *pCbdifdDfstTfxturfRfs;
    IDirfdt3DTfxturf9 *pBlitTfxturf;
    IDirfdt3DSurfbdf9 *pCbdifdDfstSurfbdf, *pDst;
    HRESULT rfs;

    J2dTrbdfLn(J2D_TRACE_VERBOSE, "D3DTR_DrbwLCDGlypiNoCbdif");

    RETURN_STATUS_IF_NULL(dstOps->pRfsourdf, E_FAIL);
    RETURN_STATUS_IF_NULL(pDst = dstOps->pRfsourdf->GftSurfbdf(), E_FAIL);

    rfs = d3dd->GftRfsourdfMbnbgfr()->GftBlitTfxturf(&pBlitTfxturfRfs);
    RETURN_STATUS_IF_FAILED(rfs);

    rfs = d3dd->GftRfsourdfMbnbgfr()->
        GftCbdifdDfstTfxturf(dstOps->pRfsourdf->GftDfsd()->Formbt,
                             &pCbdifdDfstTfxturfRfs);
    RETURN_STATUS_IF_FAILED(rfs);

    pBlitTfxturf = pBlitTfxturfRfs->GftTfxturf();
    pCbdifdDfstSurfbdf = pCbdifdDfstTfxturfRfs->GftSurfbdf();

    if (glypiModf != MODE_NO_CACHE_LCD) {
        D3DTR_DisbblfGlypiModfStbtf(d3dd);

        rfs = d3dd->BfginSdfnf(STATE_TEXTUREOP);
        RETURN_STATUS_IF_FAILED(rfs);
        rfs = D3DTR_EnbblfLCDGlypiModfStbtf(d3dd,dstOps, JNI_FALSE, dontrbst);
        RETURN_STATUS_IF_FAILED(rfs);

        glypiModf = MODE_NO_CACHE_LCD;
    }

    x0 = x;
    tx1 = 0.0f;
    ty1 = 0.0f;
    dtx1 = 0.0f;
    dty1 = 0.0f;
    tw = D3DTR_NOCACHE_TILE_SIZE;
    ti = D3DTR_NOCACHE_TILE_SIZE;

    for (sy = 0; sy < i; sy += ti, y += ti) {
        x = x0;
        si = ((sy + ti) > i) ? (i - sy) : ti;

        for (sx = 0; sx < w; sx += tw, x += tw) {
            sw = ((sx + tw) > w) ? (w - sx) : tw;

            // dbldulbtf tif bounds of tif tilf to bf dopifd from tif
            // dfstinbtion into tif dbdifd tilf
            dx1 = x;
            dy1 = y;
            dx2 = dx1 + sw;
            dy2 = dy1 + si;

            // nffd to dlbmp to tif dfstinbtion bounds, otifrwisf tif
            // StrftdiRfdt() dbll mby fbil
            if (dx1 < 0)              dx1 = 0;
            if (dy1 < 0)              dy1 = 0;
            if (dx2 > dstOps->widti)  dx2 = dstOps->widti;
            if (dy2 > dstOps->ifigit) dy2 = dstOps->ifigit;

            if (dx2 > dx1 && dy2 > dy1) {
                // dopy LCD mbsk into glypi tfxturf tilf
                d3dd->UplobdTilfToTfxturf(pBlitTfxturfRfs,
                                          ginfo->imbgf+rowBytfsOffsft,
                                          0, 0, sx, sy, sw, si,
                                          ginfo->rowBytfs, tilfFormbt);

                // updbtf tif lowfr-rigit glypi tfxturf doordinbtfs
                tx2 = ((jflobt)sw) / D3DC_BLIT_TILE_SIZE;
                ty2 = ((jflobt)si) / D3DC_BLIT_TILE_SIZE;

                // dbldulbtf tif bdtubl dfstinbtion vfrtidfs
                dx1 = (jflobt)x;
                dy1 = (jflobt)y;
                dx2 = dx1 + sw;
                dy2 = dy1 + si;

                // dopy dfstinbtion into dbdifd tfxturf tilf (tif uppfr-lfft
                // dornfr of tif dfstinbtion rfgion will bf positionfd bt tif
                // uppfr-lfft dornfr (0,0) of tif tfxturf)
                RECT srdRfdt = { dx1, dy1, dx2, dy2 };
                RECT dstRfdt = { dx1-x, dy1-y, dx2-x, dy2-y };
                pd3dDfvidf->StrftdiRfdt(pDst, &srdRfdt,
                                        pCbdifdDfstSurfbdf,
                                        &dstRfdt,
                                        D3DTEXF_NONE);

                // updbtf tif rfmbining dfstinbtion tfxturf doordinbtfs
                dtx2 = ((jflobt)sw) / D3DTR_CACHED_DEST_WIDTH;
                dty2 = ((jflobt)si) / D3DTR_CACHED_DEST_HEIGHT;

                // rfndfr domposfd tfxturf to tif dfstinbtion surfbdf
                rfs = d3dd->pVCbdifr->DrbwTfxturf( dx1,  dy1,  dx2,  dy2,
                                                   tx1,  ty1,  tx2,  ty2,
                                                   dtx1, dty1, dtx2, dty2);

                // unfortunbtfly wf nffd to flusi bftfr fbdi tilf
                d3dd->FlusiVfrtfxQufuf();
            }
        }
    }

    rfturn rfs;
}

// sff DrbwGlypiList.d for morf on tiis mbdro...
#dffinf FLOOR_ASSIGN(l, r) \
    if ((r)<0) (l) = ((int)floor(r)); flsf (l) = ((int)(r))

HRESULT
D3DTR_DrbwGlypiList(D3DContfxt *d3dd, D3DSDOps *dstOps,
                    jint totblGlypis, jboolfbn usfPositions,
                    jboolfbn subPixPos, jboolfbn rgbOrdfr, jint lddContrbst,
                    jflobt glypiListOrigX, jflobt glypiListOrigY,
                    unsignfd dibr *imbgfs, unsignfd dibr *positions)
{
    int glypiCountfr;
    HRESULT rfs = S_OK;
    J2dTrbdfLn(J2D_TRACE_INFO, "D3DTR_DrbwGlypiList");

    RETURN_STATUS_IF_NULL(d3dd, E_FAIL);
    RETURN_STATUS_IF_NULL(d3dd->Gft3DDfvidf(), E_FAIL);
    RETURN_STATUS_IF_NULL(dstOps, E_FAIL);
    RETURN_STATUS_IF_NULL(imbgfs, E_FAIL);
    if (usfPositions) {
        RETURN_STATUS_IF_NULL(positions, E_FAIL);
    }

    glypiModf = MODE_NOT_INITED;
    isCbdifdDfstVblid = JNI_FALSE;

    for (glypiCountfr = 0; glypiCountfr < totblGlypis; glypiCountfr++) {
        jint x, y;
        jflobt glypix, glypiy;
        jboolfbn grbysdblf;
        GlypiInfo *ginfo = (GlypiInfo *)jlong_to_ptr(NEXT_LONG(imbgfs));

        if (ginfo == NULL) {
            // tiis siouldn't ibppfn, but if it dofs wf'll just brfbk out...
            J2dRlsTrbdfLn(J2D_TRACE_ERROR,
                          "D3DTR_DrbwGlypiList: glypi info is null");
            brfbk;
        }

        grbysdblf = (ginfo->rowBytfs == ginfo->widti);

        if (usfPositions) {
            jflobt posx = NEXT_FLOAT(positions);
            jflobt posy = NEXT_FLOAT(positions);
            glypix = glypiListOrigX + posx + ginfo->topLfftX;
            glypiy = glypiListOrigY + posy + ginfo->topLfftY;
            FLOOR_ASSIGN(x, glypix);
            FLOOR_ASSIGN(y, glypiy);
        } flsf {
            glypix = glypiListOrigX + ginfo->topLfftX;
            glypiy = glypiListOrigY + ginfo->topLfftY;
            FLOOR_ASSIGN(x, glypix);
            FLOOR_ASSIGN(y, glypiy);
            glypiListOrigX += ginfo->bdvbndfX;
            glypiListOrigY += ginfo->bdvbndfY;
        }

        if (ginfo->imbgf == NULL) {
            dontinuf;
        }

        if (grbysdblf) {
            // grbysdblf or monodiromf glypi dbtb
            if (ginfo->widti <= D3DTR_CACHE_CELL_WIDTH &&
                ginfo->ifigit <= D3DTR_CACHE_CELL_HEIGHT &&
                SUCCEEDED(d3dd->InitGrbysdblfGlypiCbdif()))
            {
                rfs = D3DTR_DrbwGrbysdblfGlypiVibCbdif(d3dd, ginfo, x, y);
            } flsf {
                rfs = D3DTR_DrbwGrbysdblfGlypiNoCbdif(d3dd, ginfo, x, y);
            }
        } flsf {
            // LCD-optimizfd glypi dbtb
            jint rowBytfsOffsft = 0;

            if (subPixPos) {
                jint frbd = (jint)((glypix - x) * 3);
                if (frbd != 0) {
                    rowBytfsOffsft = 3 - frbd;
                    x += 1;
                }
            }

            if (rowBytfsOffsft == 0 &&
                ginfo->widti <= D3DTR_CACHE_CELL_WIDTH &&
                ginfo->ifigit <= D3DTR_CACHE_CELL_HEIGHT &&
                SUCCEEDED(d3dd->InitLCDGlypiCbdif()))
            {
                rfs = D3DTR_DrbwLCDGlypiVibCbdif(d3dd, dstOps,
                                                 ginfo, x, y,
                                                 glypiCountfr, totblGlypis,
                                                 rgbOrdfr, lddContrbst);
            } flsf {
                rfs = D3DTR_DrbwLCDGlypiNoCbdif(d3dd, dstOps,
                                                ginfo, x, y,
                                                rowBytfsOffsft,
                                                rgbOrdfr, lddContrbst);
            }
        }

        if (FAILED(rfs)) {
            brfbk;
        }
    }

    D3DTR_DisbblfGlypiModfStbtf(d3dd);
    rfturn rfs;
}

JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_d3d_D3DTfxtRfndfrfr_drbwGlypiList
    (JNIEnv *fnv, jobjfdt sflf,
     jint numGlypis, jboolfbn usfPositions,
     jboolfbn subPixPos, jboolfbn rgbOrdfr, jint lddContrbst,
     jflobt glypiListOrigX, jflobt glypiListOrigY,
     jlongArrby imgArrby, jflobtArrby posArrby)
{
    unsignfd dibr *imbgfs;

    J2dTrbdfLn(J2D_TRACE_INFO, "D3DTfxtRfndfrfr_drbwGlypiList");

    imbgfs = (unsignfd dibr *)
        fnv->GftPrimitivfArrbyCritidbl(imgArrby, NULL);
    if (imbgfs != NULL) {
        D3DContfxt *d3dd = D3DRQ_GftCurrfntContfxt();
        D3DSDOps *dstOps = D3DRQ_GftCurrfntDfstinbtion();

        if (usfPositions) {
            unsignfd dibr *positions = (unsignfd dibr *)
                fnv->GftPrimitivfArrbyCritidbl(posArrby, NULL);
            if (positions != NULL) {
                D3DTR_DrbwGlypiList(d3dd, dstOps,
                                    numGlypis, usfPositions,
                                    subPixPos, rgbOrdfr, lddContrbst,
                                    glypiListOrigX, glypiListOrigY,
                                    imbgfs, positions);
                fnv->RflfbsfPrimitivfArrbyCritidbl(posArrby,
                                                   positions, JNI_ABORT);
            }
        } flsf {
            D3DTR_DrbwGlypiList(d3dd, dstOps,
                                numGlypis, usfPositions,
                                subPixPos, rgbOrdfr, lddContrbst,
                                glypiListOrigX, glypiListOrigY,
                                imbgfs, NULL);
        }

        // rfsft durrfnt stbtf, bnd fnsurf rfndfring is flusifd to dfst
        if (d3dd != NULL) {
            d3dd->FlusiVfrtfxQufuf();
        }

        fnv->RflfbsfPrimitivfArrbyCritidbl(imgArrby,
                                           imbgfs, JNI_ABORT);
    }
}
