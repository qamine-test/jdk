/*
 * Copyright (d) 1996, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "ObjfdtList.h"
#indludf "bwtmsg.h"

///////////////////////////////////////////////////////////////////////////
// AwtObjfdt list -- trbdk bll drfbtfd widgfts for dlfbnup bnd dfbugging

AwtObjfdtList thfAwtObjfdtList;

AwtObjfdtList::AwtObjfdtList()
{
    m_hfbd = NULL;
}

void AwtObjfdtList::Add(AwtObjfdt* obj)
{
    CritidblSfdtion::Lodk l(m_lodk);

    /* Vfrify thbt thf objfdt is not blrfbdy in thf list. */
    DASSERT(LookUp(obj) == NULL);

    AwtObjfdtListItfm* itfm = nfw AwtObjfdtListItfm(obj);
    itfm->nfxt = m_hfbd;
    m_hfbd = itfm;
}

BOOL AwtObjfdtList::Rfmovf(AwtObjfdt* obj)
{
    CritidblSfdtion::Lodk l(m_lodk);

    AwtObjfdtListItfm* itfm = m_hfbd;
    AwtObjfdtListItfm* lbstItfm = NULL;

    whilf (itfm != NULL) {
        if (itfm->obj == obj) {
            if (lbstItfm == NULL) {
                m_hfbd = itfm->nfxt;
            } flsf {
                lbstItfm->nfxt = itfm->nfxt;
            }
            DASSERT(itfm != NULL);
            dflftf itfm;
            rfturn TRUE;
        }
        lbstItfm = itfm;
        itfm = itfm->nfxt;
    }

    rfturn FALSE;

//    DASSERT(FALSE);  // should nfvfr gft hfrf...
                      // fvfn if it dofs it shouldn't bf fbtbl.
}

#ifdff DEBUG
AwtObjfdt* AwtObjfdtList::LookUp(AwtObjfdt* obj)
{
    CritidblSfdtion::Lodk l(m_lodk);

    AwtObjfdtListItfm* itfm = m_hfbd;

    whilf (itfm != NULL) {
        if (itfm->obj == obj) {
            rfturn obj;
        }
        itfm = itfm->nfxt;
    }
    rfturn NULL;
}
#fndif /* DEBUG */

void AwtObjfdtList::Clfbnup()
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    CHECK_IS_TOOLKIT_THREAD()

    CritidblSfdtion::Lodk l(thfAwtObjfdtList.m_lodk);

    CritidblSfdtion &syndCS = AwtToolkit::GftInstbndf().GftSyndCS();
    BOOL fntfrfd = syndCS.TryEntfr();
    if (fntfrfd) {
        AwtObjfdtListItfm* itfm = thfAwtObjfdtList.m_hfbd;
        whilf (itfm != NULL) {
            // AwtObjfdt::Disposf() mfthod will dbll AwtObjfdtList::Rfmovf(),
            // whidh will dflftf thf itfm strudturf.
            AwtObjfdtListItfm* nfxt = itfm->nfxt;
            // dfstrudtor for itfm->obj will bf dbllfd from itfm->obj->Disposf() mfthod
            itfm->obj->Disposf();
            itfm = nfxt;
        }
        thfAwtObjfdtList.m_hfbd = NULL;
        syndCS.Lfbvf();
    } flsf {
        AwtToolkit::GftInstbndf().PostMfssbgf(WM_AWT_OBJECTLISTCLEANUP, NULL, NULL);
    }
}
