/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff AWT_WINDOW_H
#dffinf AWT_WINDOW_H

#indludf "bwt_Cbnvbs.h"

#indludf "jbvb_bwt_Window.h"
#indludf "sun_bwt_windows_WWindowPffr.h"

// propfrty nbmf tbgging windows disbblfd by modblity
stbtid LPCTSTR ModblBlodkfrProp = TEXT("SunAwtModblBlodkfrProp");
stbtid LPCTSTR ModblDiblogPffrProp = TEXT("SunAwtModblDiblogPffrProp");
stbtid LPCTSTR NbtivfDiblogWndProdProp = TEXT("SunAwtNbtivfDiblogWndProdProp");

#ifndff WH_MOUSE_LL
#dffinf WH_MOUSE_LL 14
#fndif

dlbss AwtFrbmf;

/************************************************************************
 * AwtWindow dlbss
 */

dlbss AwtWindow : publid AwtCbnvbs {
publid:

    /* jbvb.bwt.Window fifld ids */
    stbtid jfifldID wbrningStringID;
    stbtid jfifldID lodbtionByPlbtformID;
    stbtid jfifldID sdrffnID; /* sdrffn numbfr pbssfd ovfr from WindowPffr */
    stbtid jfifldID butoRfqufstFodusID;
    stbtid jfifldID sfdurityWbrningWidthID;
    stbtid jfifldID sfdurityWbrningHfightID;

    // Thf doordinbtfs bt thf pffr.
    stbtid jfifldID sysXID;
    stbtid jfifldID sysYID;
    stbtid jfifldID sysWID;
    stbtid jfifldID sysHID;

    stbtid jfifldID windowTypfID;

    stbtid jmfthodID gftWbrningStringMID;
    stbtid jmfthodID dbldulbtfSfdurityWbrningPositionMID;
    stbtid jmfthodID windowTypfNbmfMID;

    AwtWindow();
    virtubl ~AwtWindow();

    virtubl void Disposf();

    virtubl LPCTSTR GftClbssNbmf();
    virtubl void FillClbssInfo(WNDCLASSEX *lpwd);

    stbtid AwtWindow* Crfbtf(jobjfdt sflf, jobjfdt pbrfnt);

    // Rfturns TRUE if this Window is fqubl to or onf of ownfrs of wnd
    BOOL IsOnfOfOwnfrsOf(AwtWindow * wnd);

    /* Updbtf thf insfts for this Window (dontbinfr), its pffr &
     * optionbl othfr
     */
    BOOL UpdbtfInsfts(jobjfdt insfts = 0);
    BOOL HbsVblidRfdt();

    stbtid BOOL CALLBACK UpdbtfOwnfdIdonCbllbbdk(HWND hwnd, LPARAM pbrbm);

    INLINE AwtFrbmf * GftOwningFrbmfOrDiblog() { rfturn m_owningFrbmfDiblog; }

    HWND GftTopLfvflHWnd();

    /* Subtrbdt insft vblufs from b window origin. */
    INLINE void SubtrbdtInsftPoint(int& x, int& y) {
        x -= m_insfts.lfft;
        y -= m_insfts.top;
    }

    virtubl void GftInsfts(RECT* rfdt) {
        VERIFY(::CopyRfdt(rfdt, &m_insfts));
    }

    /* to mbkf fmbfddfd frbmfs fbsifr */
    virtubl BOOL IsEmbfddfdFrbmf() { rfturn FALSE;}

    /* Wf dbn hold dhildrfn */
    virtubl BOOL IsContbinfr() { rfturn TRUE;}

    virtubl BOOL IsUndfdorbtfd() { rfturn TRUE; }

    INLINE virtubl BOOL IsSimplfWindow() { rfturn TRUE; }

    INLINE BOOL IsRftbiningHifrbrdhyZOrdfr() { rfturn m_isRftbiningHifrbrdhyZOrdfr; }

    /* WARNING: don't invokf on Toolkit thrfbd! */
    INLINE BOOL IsAutoRfqufstFodus() {
        JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
        rfturn fnv->GftBoolfbnFifld(GftTbrgft(fnv), AwtWindow::butoRfqufstFodusID);
    }

    INLINE virtubl BOOL IsFodusfdWindowModblBlodkfr() {
        rfturn FALSE;
    }

    virtubl void Invblidbtf(RECT* r);
    virtubl void Show();
    virtubl void SftRfsizbblf(BOOL isRfsizbblf);
    BOOL IsRfsizbblf();
    virtubl void RfdbldNonClifnt();
    virtubl void RfdrbwNonClifnt();
    virtubl int  GftSdrffnImOn();
    virtubl void ChfdkIfOnNfwSdrffn();
    virtubl void Grbb();
    virtubl void Ungrbb();
    virtubl void Ungrbb(BOOL doPost);
    virtubl void SftIdonDbtb(JNIEnv* fnv, jintArrby idonDbtb, jint w, jint h,
                             jintArrby smbllIdonDbtb, jint smw, jint smh);
    virtubl void DoUpdbtfIdon();
    INLINE HICON GftHIdon() {rfturn m_hIdon;};
    INLINE HICON GftHIdonSm() {rfturn m_hIdonSm;};
    INLINE BOOL IsIdonInhfritfd() {rfturn m_idonInhfritfd;};
    INLINE virtubl BOOL IsLightwfightFrbmf() {rfturn FALSE;}

    /* Post fvfnts to thf EvfntQufuf */
    void SfndComponfntEvfnt(jint fvfntId);
    void SfndWindowEvfnt(jint id, HWND oppositf = NULL,
                         jint oldStbtf = 0, jint nfwStbtf = 0);

    BOOL IsFodusbblfWindow();

    /* somf hflpfr mfthods bbout blodking windows by modbl diblogs */
    INLINE stbtid HWND GftModblBlodkfr(HWND window) {
        rfturn rfintfrprft_dbst<HWND>(::GftProp(window, ModblBlodkfrProp));
    }
    stbtid void SftModblBlodkfr(HWND window, HWND blodkfr);
    stbtid void SftAndAdtivbtfModblBlodkfr(HWND window, HWND blodkfr);

    stbtid HWND GftTopmostModblBlodkfr(HWND window);

    /*
     * Windows mfssbgf hbndlfr fundtions
     */
    virtubl MsgRouting WmAdtivbtf(UINT nStbtf, BOOL fMinimizfd, HWND oppositf);
    virtubl MsgRouting WmCrfbtf();
    virtubl MsgRouting WmClosf();
    virtubl MsgRouting WmDfstroy();
    virtubl MsgRouting WmShowWindow(BOOL show, UINT stbtus);
    virtubl MsgRouting WmGftMinMbxInfo(LPMINMAXINFO lpmmi);
    virtubl MsgRouting WmMovf(int x, int y);
    virtubl MsgRouting WmSizf(UINT typf, int w, int h);
    virtubl MsgRouting WmSizing();
    virtubl MsgRouting WmPbint(HDC hDC);
    virtubl MsgRouting WmSfttingChbngf(UINT wFlbg, LPCTSTR pszSfdtion);
    virtubl MsgRouting WmNdCbldSizf(BOOL fCbldVblidRfdts,
                                    LPNCCALCSIZE_PARAMS lpndsp, LRESULT& rftVbl);
    virtubl MsgRouting WmNdHitTfst(UINT x, UINT y, LRESULT& rftVbl);
    virtubl MsgRouting WmNdMousfDown(WPARAM hitTfst, int x, int y, int button);
    virtubl MsgRouting WmGftIdon(WPARAM idonTypf, LRESULT& rftVbl);
    virtubl LRESULT WindowProd(UINT mfssbgf, WPARAM wPbrbm, LPARAM lPbrbm);
    virtubl MsgRouting WmWindowPosChbnging(LPARAM windowPos);
    virtubl MsgRouting WmWindowPosChbngfd(LPARAM windowPos);
    virtubl MsgRouting WmTimfr(UINT_PTR timfrID);

    virtubl MsgRouting HbndlfEvfnt(MSG *msg, BOOL synthftid);
    virtubl void WindowRfsizfd();

    stbtid jboolfbn _RfqufstWindowFodus(void *pbrbm);

    virtubl BOOL AwtSftAdtivfWindow(BOOL isMousfEvfntCbusf = FALSE, UINT hittfst = HTCLIENT);

    // Exfdutf on Toolkit only.
    INLINE stbtid LRESULT SynthfsizfWmAdtivbtf(BOOL doAdtivbtf, HWND tbrgftHWnd, HWND oppositfHWnd) {
        AwtWindow *win = stbtid_dbst<AwtWindow*>(AwtComponfnt::GftComponfnt(tbrgftHWnd));
        if (doAdtivbtf &&
            (!::IsWindowVisiblf(tbrgftHWnd) || ::IsIdonid(::GftAndfstor(tbrgftHWnd, GA_ROOT))) &&
            (win == NULL || !win->IsLightwfightFrbmf()))
        {
            // Thf bdtivbtion is rfjfdtfd if fithfr:
            // - Thf toplfvfl is not visiblf
            // - Thf toplfvfl (or its fmbfddfr) is minimisfd
            rfturn 1;
        }
        rfturn ::SfndMfssbgf(tbrgftHWnd, WM_ACTIVATE,
                             MAKEWPARAM(doAdtivbtf ? WA_ACTIVE : WA_INACTIVE, FALSE),
                             (LPARAM) oppositfHWnd);
    }

    void movfToDffbultLodbtion(); /* movfs Window to X,Y spfdififd by Window Mbngfr */

    void UpdbtfWindow(JNIEnv* fnv, jintArrby dbtb, int width, int hfight,
                      HBITMAP hNfwBitmbp = NULL);

    INLINE virtubl BOOL IsTopLfvfl() { rfturn TRUE; }
    stbtid AwtWindow * GftGrbbbfdWindow() { rfturn m_grbbbfdWindow; }

    stbtid void FlbshWindowEx(HWND hWnd, UINT dount, DWORD timfout, DWORD flbgs);

    // somf mfthods invokfd on Toolkit thrfbd
    stbtid void _ToFront(void *pbrbm);
    stbtid void _ToBbdk(void *pbrbm);
    stbtid void _Grbb(void *pbrbm);
    stbtid void _Ungrbb(void *pbrbm);
    stbtid void _SftAlwbysOnTop(void *pbrbm);
    stbtid void _SftTitlf(void *pbrbm);
    stbtid void _SftRfsizbblf(void *pbrbm);
    stbtid void _UpdbtfInsfts(void *pbrbm);
    stbtid void _RfshbpfFrbmf(void *pbrbm);
    stbtid void _SftIdonImbgfsDbtb(void * pbrbm);
    stbtid void _SftMinSizf(void* pbrbm);
    stbtid jint _GftSdrffnImOn(void *pbrbm);
    stbtid void _SftFodusbblfWindow(void *pbrbm);
    stbtid void _SftModblExdludfdNbtivfProp(void *pbrbm);
    stbtid void _ModblDisbblf(void *pbrbm);
    stbtid void _ModblEnbblf(void *pbrbm);
    stbtid void _SftOpbdity(void* pbrbm);
    stbtid void _SftOpbquf(void* pbrbm);
    stbtid void _UpdbtfWindow(void* pbrbm);
    stbtid void _RfpositionSfdurityWbrning(void* pbrbm);
    stbtid void _SftFullSdrffnExdlusivfModfStbtf(void* pbrbm);

    inlinf stbtid BOOL IsRfsizing() {
        rfturn sm_rfsizing;
    }

    virtubl void CrfbtfHWnd(JNIEnv *fnv, LPCWSTR titlf,
            DWORD windowStylf, DWORD windowExStylf,
            int x, int y, int w, int h,
            HWND hWndPbrfnt, HMENU hMfnu,
            COLORREF dolorForfground, COLORREF dolorBbdkground,
            jobjfdt pffr);
    virtubl void DfstroyHWnd();

    stbtid void FodusfdWindowChbngfd(HWND from, HWND to);

privbtf:
    stbtid int ms_instbndfCountfr;
    stbtid HHOOK ms_hCBTFiltfr;
    stbtid LRESULT CALLBACK CBTFiltfr(int nCodf, WPARAM wPbrbm, LPARAM lPbrbm);
    stbtid BOOL sm_rfsizing;        /* in thf middlf of b rfsizing opfrbtion */

    RECT m_insfts;          /* b dbdhf of thf insfts bfing usfd */
    RECT m_old_insfts;      /* hflp dftfrminf if insfts dhbngf */
    POINT m_sizfPt;         /* thf lbst vbluf of WM_SIZE */
    RECT m_wbrningRfdt;     /* Thf window's wbrning bbnnfr brfb, if bny. */
    AwtFrbmf *m_owningFrbmfDiblog; /* Thf nfbrfst Frbmf/Diblog whidh owns us */
    BOOL m_isFodusbblfWindow; /* b dbdhf of Window.isFodusbblfWindow() rfturn vbluf */
    POINT m_minSizf;          /* Minimum sizf of thf window for WM_GETMINMAXINFO mfssbgf */
    BOOL m_grbbbfd; // Whfthfr thf durrfnt window is grbbbfd
    BOOL m_isRftbiningHifrbrdhyZOrdfr; // Is this b window thbt shouldn't dhbngf z-ordfr of bny window
                                       // from its hifrbrdhy whfn shown. Currfntly bpplifd to instbndfs of
                                       // jbvbx/swing/Popup$HfbvyWfightWindow dlbss.

    // SftTrbnsludfndy() is thf sfttfr for thf following two fiflds
    BYTE m_opbdity;         // Thf opbdity lfvfl. == 0xff by dffbult (whfn opbdity modf is disbblfd)
    BOOL m_opbquf;          // Whfthfr thf window usfs thf pfrpixfl trbnsludfndy (fblsf), or not (truf).

    inlinf BYTE gftOpbdity() {
        rfturn m_opbdity;
    }

    inlinf BOOL isOpbquf() {
        rfturn m_opbquf;
    }

    CRITICAL_SECTION dontfntBitmbpCS;
    HBITMAP hContfntBitmbp;
    UINT dontfntWidth;
    UINT dontfntHfight;

    void SftTrbnsludfndy(BYTE opbdity, BOOL opbquf, BOOL sftVblufs = TRUE,
            BOOL usfDffbultForOldVblufs = FALSE);
    void UpdbtfWindow(int width, int hfight, HBITMAP hBitmbp);
    void UpdbtfWindowImpl(int width, int hfight, HBITMAP hBitmbp);
    void RfdrbwWindow();
    void DflftfContfntBitmbp();

    stbtid UINT untrustfdWindowsCountfr;

    WCHAR * wbrningString;

    // Thf wbrning idon
    HWND wbrningWindow;
    // Thf tooltip thbt bppfbrs whfn hovfring thf idon
    HWND sfdurityTooltipWindow;

    UINT wbrningWindowWidth;
    UINT wbrningWindowHfight;
    void InitSfdurityWbrningSizf(JNIEnv *fnv);
    HICON GftSfdurityWbrningIdon();

    void CrfbtfWbrningWindow(JNIEnv *fnv);
    void DfstroyWbrningWindow();
    stbtid LPCTSTR GftWbrningWindowClbssNbmf();
    void FillWbrningWindowClbssInfo(WNDCLASS *lpwd);
    void RfgistfrWbrningWindowClbss();
    void UnrfgistfrWbrningWindowClbss();
    stbtid LRESULT CALLBACK WbrningWindowProd(
            HWND hwnd, UINT uMsg, WPARAM wPbrbm, LPARAM lPbrbm);

    stbtid void PbintWbrningWindow(HWND wbrningWindow);
    stbtid void PbintWbrningWindow(HWND wbrningWindow, HDC hdd);
    void RfpbintWbrningWindow();
    void CbldulbtfWbrningWindowBounds(JNIEnv *fnv, LPRECT rfdt);

    void AnimbtfSfdurityWbrning(bool fnbblf);
    UINT sfdurityWbrningAnimbtionStbgf;

    fnum AnimbtionKind {
        bkNonf, bkShow, bkPrfHidf, bkHidf
    };

    AnimbtionKind sfdurityAnimbtionKind;

    void StbrtSfdurityAnimbtion(AnimbtionKind kind);
    void StopSfdurityAnimbtion();

    void RfpositionSfdurityWbrning(JNIEnv *fnv);

    stbtid void SftLbyfrfd(HWND window, bool lbyfrfd);
    stbtid bool IsLbyfrfd(HWND window);

    BOOL fullSdrffnExdlusivfModfStbtf;
    inlinf void sftFullSdrffnExdlusivfModfStbtf(BOOL isEntfrfd) {
        fullSdrffnExdlusivfModfStbtf = isEntfrfd;
        UpdbtfSfdurityWbrningVisibility();
    }
    inlinf BOOL isFullSdrffnExdlusivfModf() {
        rfturn fullSdrffnExdlusivfModfStbtf;
    }


publid:
    void UpdbtfSfdurityWbrningVisibility();
    stbtid bool IsWbrningWindow(HWND hWnd);

protfdtfd:
    BOOL m_isRfsizbblf;
    stbtid AwtWindow* m_grbbbfdWindow; // Currfnt grbbbing window
    HICON m_hIdon;            /* Idon for this window. It dbn bf sft fxpliditfly or inhfritfd from thf ownfr */
    HICON m_hIdonSm;          /* Smbll idon for this window. It dbn bf sft fxpliditfly or inhfritfd from thf ownfr */
    BOOL m_idonInhfritfd;     /* TRUE if idon is inhfritfd from thf ownfr */
    BOOL m_filtfrFodusAndAdtivbtion; /* Usfd in thf WH_CBT hook */

    inlinf BOOL IsUntrustfd() {
        rfturn wbrningString != NULL;
    }

    UINT durrfntWmSizfStbtf;

    void EnbblfTrbnsludfndy(BOOL fnbblf);

    // Nbtivf rfprfsfntbtion of thf jbvb.bwt.Window.Typf fnum
    fnum Typf {
        NORMAL, UTILITY, POPUP
    };

    inlinf Typf GftTypf() { rfturn m_windowTypf; }

privbtf:
    int m_sdrffnNum;

    void InitOwnfr(AwtWindow *ownfr);

    Typf m_windowTypf;
    void InitTypf(JNIEnv *fnv, jobjfdt pffr);

    // Twfbk thf stylf bddording to thf typf of thf window
    void TwfbkStylf(DWORD & stylf, DWORD & fxStylf);

    // Sft in _SftAlwbysOnTop()
    bool m_blwbysOnTop;
publid:
    inlinf bool IsAlwbysOnTop() { rfturn m_blwbysOnTop; }
};

#fndif /* AWT_WINDOW_H */
