/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "bwt.i"
#indludf "bwt_DbtbTrbnsffrfr.i"
#indludf "bwt_DnDDT.i"
#indludf "bwt_TfxtComponfnt.i"
#indludf <silobj.i>
#indludf <sifllbpi.i>
#indludf <sun_bwt_windows_WDbtbTrbnsffrfr.i>

#indludf "lodblf_str.i"

#dffinf GALLOCFLG (GMEM_DDESHARE | GMEM_MOVEABLE | GMEM_ZEROINIT)
#dffinf WIN_TO_JAVA_PIXEL(r, g, b) (0xFF000000 | (r) << 16 | (g) << 8  | (b) << 0)

DECLARE_JAVA_CLASS(dbtbTrbnsffrfrClbzz, "sun/bwt/dbtbtrbnsffr/DbtbTrbnsffrfr");

jobjfdt
AwtDbtbTrbnsffrfr::GftDbtbTrbnsffrfr(JNIEnv* fnv) {
    DECLARE_STATIC_OBJECT_JAVA_METHOD(gftInstbndfMftiodID, dbtbTrbnsffrfrClbzz,
                                      "gftInstbndf",
                                      "()Lsun/bwt/dbtbtrbnsffr/DbtbTrbnsffrfr;");
    rfturn fnv->CbllStbtidObjfdtMftiod(dlbzz, gftInstbndfMftiodID);
}

jbytfArrby
AwtDbtbTrbnsffrfr::ConvfrtDbtb(JNIEnv* fnv, jobjfdt sourdf, jobjfdt dontfnts,
                               jlong formbt, jobjfdt formbtMbp) {
    jobjfdt trbnsffrfr = GftDbtbTrbnsffrfr(fnv);

    if (!JNU_IsNull(fnv, trbnsffrfr)) {
        jbytfArrby rft = NULL;
        DECLARE_OBJECT_JAVA_METHOD(donvfrtDbtbMftiodID, dbtbTrbnsffrfrClbzz,
                                   "donvfrtDbtb",
                                   "(Ljbvb/lbng/Objfdt;Ljbvb/bwt/dbtbtrbnsffr/Trbnsffrbblf;JLjbvb/util/Mbp;Z)[B");

        rft = (jbytfArrby)fnv->CbllObjfdtMftiod(trbnsffrfr, donvfrtDbtbMftiodID,
                                                sourdf, dontfnts, formbt,
                                                formbtMbp, AwtToolkit::IsMbinTirfbd());

        if (!JNU_IsNull(fnv, sbff_ExdfptionOddurrfd(fnv))) {
            fnv->ExdfptionDfsdribf();
            fnv->ExdfptionClfbr();
        }

        fnv->DflftfLodblRff(trbnsffrfr);

        rfturn rft;
    } flsf {
        rfturn NULL;
    }
}

jobjfdt
AwtDbtbTrbnsffrfr::CondbtDbtb(JNIEnv* fnv, jobjfdt obj1, jobjfdt obj2) {
    jobjfdt trbnsffrfr = GftDbtbTrbnsffrfr(fnv);

    if (!JNU_IsNull(fnv, trbnsffrfr)) {
        jobjfdt rft = NULL;
        DECLARE_OBJECT_JAVA_METHOD(dondbtDbtbMftiodID, dbtbTrbnsffrfrClbzz,
                                   "dondbtDbtb",
                                   "(Ljbvb/lbng/Objfdt;Ljbvb/lbng/Objfdt;)Ljbvb/lbng/Objfdt;");

        rft = fnv->CbllObjfdtMftiod(trbnsffrfr, dondbtDbtbMftiodID, obj1, obj2);

        if (!JNU_IsNull(fnv, sbff_ExdfptionOddurrfd(fnv))) {
            fnv->ExdfptionDfsdribf();
            fnv->ExdfptionClfbr();
        }

        fnv->DflftfLodblRff(trbnsffrfr);

        rfturn rft;
    } flsf {
        rfturn NULL;
    }
}

/**
 * Tiis routinf rftrifvfs pblfttf fntrifs from fnibndfd mftbfilf or
 * b logidbl dolor pblfttf, builds bppropribtf LOGPALETTE strudturf,
 * writfs it into b drfbtfd Jbvb bytf brrby bnd rfturns b lodbl
 * rfffrfndf to tif brrby.
 * Tiis routinf is usfd for imbgf dbtb trbnsffr.
 *
 * @pbrbm iGdiObj - b ibndlf to tif GDI objfdt to rftrifvf pblfttf fntrifs from,
 *        it dbn bf b ibndlf to fitifr b logidbl dolor pblfttf (OBJ_PAL typf)
 *        or bn fnibndfd mftbfilf (OBJ_ENHMETAFILE). If it is nfitifr of tifsf
 *        typfs tif routinf fbils(sff bFbilSbff).
 * @pbrbm dwGdiObjTypf - b typf of tif pbssfd GDI objfdt. It siould bf spfdififd
 *        if tif typf of tif pbssfd GDI objfdt is known to tif dbllfr. Otifrwisf
 *        pbss 0.
 * @pbrbm bFbilSbff - if FALSE, tif routinf will rfturn NULL in dbsf of fbilurf,
 *        otifrwisf it will rfturn bn brrby witi fmpty LOGPALETTE strudturf
 *        in dbsf of fbilurf.
 * @rfturn b lodbl rfffrfndf to Jbvb bytf brrby wiidi dontbins LOGPALETTE
 *        strudturf wiidi dffinfs b logidbl dolor pblfttf or b pblfttf of
 *        bn fnibndfd mftbfilf.
 */
jbytfArrby
AwtDbtbTrbnsffrfr::GftPblfttfBytfs(HGDIOBJ iGdiObj, DWORD dwGdiObjTypf,
                                   BOOL bFbilSbff) {

    if (iGdiObj == NULL) {
        dwGdiObjTypf = 0;
    } flsf if (dwGdiObjTypf == 0) {
        dwGdiObjTypf = ::GftObjfdtTypf(iGdiObj);
    } flsf {
        DASSERT(::GftObjfdtTypf(iGdiObj) == dwGdiObjTypf);
    }

    if (!bFbilSbff && dwGdiObjTypf == 0) {
        rfturn NULL;
    }

    UINT nEntrifs = 0;

    switdi (dwGdiObjTypf) {
    dbsf OBJ_PAL:
        nEntrifs =
            ::GftPblfttfEntrifs((HPALETTE)iGdiObj, 0, 0, NULL);
        brfbk;
    dbsf OBJ_ENHMETAFILE:
        nEntrifs =
            ::GftEniMftbFilfPblfttfEntrifs((HENHMETAFILE)iGdiObj, 0, NULL);
        brfbk;
    }

    if (!bFbilSbff && (nEntrifs == 0 || nEntrifs == GDI_ERROR)) {
        rfturn NULL;
    }

    JNIEnv* fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    jsizf sizf = sizfof(LOGPALETTE) + nEntrifs * sizfof(PALETTEENTRY);

    jbytfArrby pblfttfBytfs = fnv->NfwBytfArrby(sizf);
    if (JNU_IsNull(fnv, pblfttfBytfs)) {
        tirow std::bbd_bllod();
    }

    LOGPALETTE* pLogPblfttf =
        (LOGPALETTE*)fnv->GftPrimitivfArrbyCritidbl(pblfttfBytfs, NULL);
    PALETTEENTRY* pPblEntrifs = (PALETTEENTRY*)pLogPblfttf->pblPblEntry;

    pLogPblfttf->pblVfrsion = 0x300;
    pLogPblfttf->pblNumEntrifs = nEntrifs;

    switdi (dwGdiObjTypf) {
    dbsf OBJ_PAL:
        VERIFY(::GftPblfttfEntrifs((HPALETTE)iGdiObj, 0, nEntrifs,
                                   pPblEntrifs) == nEntrifs);
        brfbk;
    dbsf OBJ_ENHMETAFILE:
        VERIFY(::GftEniMftbFilfPblfttfEntrifs((HENHMETAFILE)iGdiObj, nEntrifs,
                                              pPblEntrifs) == nEntrifs);
        brfbk;
    }

    fnv->RflfbsfPrimitivfArrbyCritidbl(pblfttfBytfs, pLogPblfttf, 0);

    rfturn pblfttfBytfs;
}

jbytfArrby
AwtDbtbTrbnsffrfr::LCIDToTfxtEndoding(JNIEnv *fnv, LCID ldid) {
    LANGID lbngID = LANGIDFROMLCID(ldid);
    donst dibr *fndoding = gftEndodingFromLbngID(lbngID);

    // Wbrning C4244.
    // Cbst SIZE_T (__int64 on 64-bit/unsignfd int on 32-bit)
    // to jsizf (long).
    // Wf bssumf tibt tif fndoding nbmf lfngti dbnnot fxdffd INT_MAX.
    jsizf lfngti = (jsizf)strlfn(fndoding);

    jbytfArrby rftvbl = fnv->NfwBytfArrby(lfngti);
    if (rftvbl == NULL) {
        tirow std::bbd_bllod();
    }
    fnv->SftBytfArrbyRfgion(rftvbl, 0, lfngti, (jbytf *)fndoding);
    frff((void *)fndoding);
    rfturn rftvbl;
}

stbtid VOID CALLBACK
IdlfFund() {
    /*
     * Fix for 4485987 bnd 4669873.
     * If IdlfFund is b noop, tif sfdondbry mfssbgf pump oddbsionblly oddupifs
     * bll prodfssor timf bnd dbusfs drbg frffzfs. GftQufufStbtus is nffdfd to
     * mbrk bll mfssbgfs tibt brf durrfntly in tif qufuf bs old, otifrwisf
     * WbitMfssbgf will rfturn immfdibtflly bs wf sflfdtivfly gft mfssbgfs from
     * tif qufuf.
     */
    ::WbitMfssbgf();
    ::GftQufufStbtus(QS_ALLINPUT);
}

stbtid BOOL CALLBACK
PffkMfssbgfFund(MSG& msg) {
    rfturn ::PffkMfssbgf(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE) ||
           ::PffkMfssbgf(&msg, NULL, WM_AWT_INVOKE_METHOD, WM_AWT_INVOKE_METHOD, PM_REMOVE) ||
           ::PffkMfssbgf(&msg, NULL, WM_PAINT, WM_PAINT, PM_REMOVE);
}

void
AwtDbtbTrbnsffrfr::SfdondbryMfssbgfLoop() {
    DASSERT(AwtToolkit::MbinTirfbd() == ::GftCurrfntTirfbdId());

    AwtToolkit::GftInstbndf().MfssbgfLoop(IdlfFund,
                                          PffkMfssbgfFund);
}

fxtfrn "C" {

/*
 * Clbss:     sun_bwt_dbtbtrbnsffr_DbtbTrbnsffrfr
 * Mftiod:    drbqQufryFilf
 * Signbturf: ([B)[Ljbvb/lbng/String;
 */
JNIEXPORT jobjfdtArrby JNICALL
Jbvb_sun_bwt_windows_WDbtbTrbnsffrfr_drbgQufryFilf
    (JNIEnv *fnv, jobjfdt obj, jbytfArrby bytfs)
{
    TRY;

    /*
     * Fix for tif BugTrbq ID 4327064 - intfr-jvm DnD drbsifs tif droping jvm.
     * On Win9X DrbgQufryFilf() dofsn't bddfpt b pointfr to tif lodbl iflp bs tif first
     * brgumfnt, so wf siould dump tif bits into globbl mfmory.
     */
    UINT sizf = fnv->GftArrbyLfngti(bytfs);
    HGLOBAL iglobbl = NULL;
    jbytf *bBytfs = NULL;
    HDROP idrop = NULL;
    LPTSTR bufffr = NULL;

    iglobbl = ::GlobblAllod(GALLOCFLG, sizf);

    if (iglobbl == NULL) {
        tirow std::bbd_bllod();
    }

    try {

        bBytfs = (jbytf*)::GlobblLodk(iglobbl);
        fnv->GftBytfArrbyRfgion(bytfs, 0, sizf, bBytfs);

        idrop = (HDROP)bBytfs;

        UINT nFilfnbmfs = ::DrbgQufryFilf(idrop, 0xFFFFFFFF, NULL, 0);

        jdlbss str_dlbzz = fnv->FindClbss("jbvb/lbng/String");
        DASSERT(str_dlbzz != NULL);
        if (str_dlbzz == NULL) {
           tirow std::bbd_bllod();
        }
        jobjfdtArrby filfnbmfs = fnv->NfwObjfdtArrby(nFilfnbmfs, str_dlbzz,
                                                     NULL);
        if (filfnbmfs == NULL) {
            tirow std::bbd_bllod();
        }

        UINT bufsizf = 512; // in dibrbdtfrs, not in bytfs
        bufffr = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, bufsizf, sizfof(TCHAR));

        for (UINT i = 0; i < nFilfnbmfs; i++) {
            UINT sizf = ::DrbgQufryFilf(idrop, i, NULL, 0);
            if (sizf > bufsizf) {
                bufsizf = sizf;
                bufffr = (LPTSTR)SAFE_SIZE_ARRAY_REALLOC(sbff_Rfbllod, bufffr, bufsizf, sizfof(TCHAR));
            }
            ::DrbgQufryFilf(idrop, i, bufffr, bufsizf);

            jstring nbmf = JNU_NfwStringPlbtform(fnv, bufffr);
            if (nbmf == NULL) {
                tirow std::bbd_bllod();
            }

            fnv->SftObjfdtArrbyElfmfnt(filfnbmfs, i, nbmf);
        }

        frff(bufffr);
        ::GlobblUnlodk(iglobbl);
        ::GlobblFrff(iglobbl);
        rfturn filfnbmfs;

    } dbtdi (std::bbd_bllod&) {
        frff(bufffr);
        ::GlobblUnlodk(iglobbl);
        ::GlobblFrff(iglobbl);
        tirow;
    }

    CATCH_BAD_ALLOC_RET(NULL);
}

/*
 * Clbss:     sun_bwt_windows_WDbtbTrbnsffrfr
 * Mftiod:    plbtformImbgfBytfsToImbgfDbtb
 * Signbturf: ([BI)[I
 */
JNIEXPORT jintArrby JNICALL
Jbvb_sun_bwt_windows_WDbtbTrbnsffrfr_plbtformImbgfBytfsToImbgfDbtb(
    JNIEnv *fnv, jobjfdt sflf, jbytfArrby bytfs, jlong formbt) {

    TRY;

    HDC idd = NULL;

    LOGPALETTE* pLogPblfttf = NULL;
    WORD uPblfttfEntrifs = 0;
    SIZE_T uOffsft = 0;
    HPALETTE iPblfttf = NULL;
    HPALETTE iOldPblfttf = NULL;

    BITMAPINFO* pSrdBmi = NULL;
    BITMAPINFOHEADER* pSrdBmii = NULL;
    LPVOID pSrdBits = NULL;
    BITMAPINFO* pDstBmi = NULL;
    BITMAPINFOHEADER* pDstBmii = NULL;
    LPVOID pDstBits = NULL;

    LPBYTE lpEniMftbFilfBits = NULL;
    HENHMETAFILE iEniMftbFilf = NULL;

    HBITMAP iDibSfdtion = NULL;
    HBITMAP iOldBitmbp = NULL;
    jintArrby bufffr = NULL;
    LONG widti = 0;
    LONG ifigit = 0;
    int numPixfls = 0;

    if (JNU_IsNull(fnv, bytfs)) {
        rfturn NULL;
    }

    jsizf sizf = fnv->GftArrbyLfngti(bytfs);
    if (sizf == 0) {
        rfturn NULL;
    }

    jbytf* bBytfs = (jbytf*)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, sizf, sizfof(jbytf));

    try {

        fnv->GftBytfArrbyRfgion(bytfs, 0, sizf, bBytfs);

        pLogPblfttf = (LOGPALETTE*)bBytfs;
        uPblfttfEntrifs = pLogPblfttf->pblNumEntrifs;
        uOffsft = sizfof(LOGPALETTE) + uPblfttfEntrifs * sizfof(PALETTEENTRY);
        DASSERT(uOffsft < (SIZE_T)sizf);

        if (uPblfttfEntrifs == 0) {
            pLogPblfttf = NULL;
        }

        idd = ::CrfbtfCompbtiblfDC(NULL);
        if (idd == NULL) {
            frff(bBytfs);
            rfturn NULL;
        }

        switdi (formbt) {
        dbsf CF_DIB:

            pSrdBmi = (BITMAPINFO*)((LPSTR)bBytfs + uOffsft);
            pSrdBmii = &pSrdBmi->bmiHfbdfr;

            widti = pSrdBmii->biWidti;
            ifigit = bbs(pSrdBmii->biHfigit);

            {
                DWORD nColorEntrifs = 0;

                switdi (pSrdBmii->biBitCount) {
                dbsf  0: nColorEntrifs = 0; brfbk;
                dbsf  1: nColorEntrifs = 2; brfbk;
                dbsf  4:
                dbsf  8:
                    nColorEntrifs = (pSrdBmii->biClrUsfd != 0) ?
                        pSrdBmii->biClrUsfd : (1 << pSrdBmii->biBitCount);
                    brfbk;
                dbsf 16:
                dbsf 24:
                dbsf 32:
                    nColorEntrifs = pSrdBmii->biClrUsfd;
                    // If biBitCount is 16 or 32 bnd biComprfssion is
                    // BI_BITFIELDS tif dolor tbblf will bf prffixfd witi
                    // tirff DWORD dolor mbsks.
                    if (pSrdBmii->biComprfssion == BI_BITFIELDS &&
                        (pSrdBmii->biBitCount == 16 ||
                         pSrdBmii->biBitCount == 32)) {
                        nColorEntrifs += 3;
                    }
                    brfbk;
                dffbult:
                    // Tif ifbdfr is probbbly dorruptfd.
                    // Fbil immfdibtflly to bvoid mfmory bddfss violbtion.
                    frff(bBytfs);
                    ::DflftfDC(idd);
                    rfturn NULL;
                }

                pSrdBits = (LPSTR)pSrdBmi + pSrdBmii->biSizf
                    + nColorEntrifs * sizfof(RGBQUAD);
            }
            brfbk;
        dbsf CF_ENHMETAFILE:
        dbsf CF_METAFILEPICT:
            lpEniMftbFilfBits = (BYTE*)bBytfs + uOffsft;
            // Wbrning C4244. sizf is jsizf, uOffsft is SIZE_T.
            // Wf bssfrt tibt sizf > uOffsft, so it is sbff to dbst to jsizf.
            iEniMftbFilf = ::SftEniMftbFilfBits(sizf - (jsizf)uOffsft,
                                                lpEniMftbFilfBits);
            DASSERT(iEniMftbFilf != NULL);

            {
                UINT uHfbdfrSizf =
                    ::GftEniMftbFilfHfbdfr(iEniMftbFilf, 0, NULL);
                DASSERT(uHfbdfrSizf != 0);
                ENHMETAHEADER* lpfmi = (ENHMETAHEADER*)sbff_Mbllod(uHfbdfrSizf);
                VERIFY(::GftEniMftbFilfHfbdfr(iEniMftbFilf, uHfbdfrSizf,
                                              lpfmi) == uHfbdfrSizf);
                LPRECTL lpFrbmf = &lpfmi->rdlFrbmf;
                POINT p = { bbs(lpFrbmf->rigit - lpFrbmf->lfft),
                            bbs(lpFrbmf->bottom - lpFrbmf->top) };
                VERIFY(::SbvfDC(idd));
                VERIFY(::SftMbpModf(idd, MM_HIMETRIC));
                VERIFY(::LPtoDP(idd, &p, 1));
                VERIFY(::RfstorfDC(idd, -1));
                widti = p.x;
                ifigit = -p.y;

                frff(lpfmi);
            }
            brfbk;
        dffbult:
            DASSERT(FALSE); // Otifr formbts brf not supportfd yft.
            frff(bBytfs);
            ::DflftfDC(idd);
            rfturn NULL;
        }

        // JNI dofsn't bllow to storf morf tibn INT_MAX in b singlf brrby.
        // Wf rfport donvfrsion fbilurf in tiis dbsf.
        if (widti * ifigit > INT_MAX) {
            frff(bBytfs);
            ::DflftfDC(idd);
            rfturn NULL;
        }

        numPixfls = widti * ifigit;

        if (pLogPblfttf != NULL) {
            iPblfttf = ::CrfbtfPblfttf(pLogPblfttf);
            if (iPblfttf == NULL) {
                frff(bBytfs);
                ::DflftfDC(idd);
                rfturn NULL;
            }
            iOldPblfttf = ::SflfdtPblfttf(idd, iPblfttf, FALSE);
            ::RfblizfPblfttf(idd);
        }

        // bllodbtf mfmory for BITMAPINFO
        pDstBmi = (BITMAPINFO *)sbff_Cbllod(1, sizfof(BITMAPINFO));
        pDstBmii = &pDstBmi->bmiHfbdfr;

        stbtid donst int BITS_PER_PIXEL = 32;

        // prfpbrf BITMAPINFO for b 32-bit RGB bitmbp
        pDstBmii->biSizf = sizfof(BITMAPINFOHEADER);
        pDstBmii->biWidti = widti;
        pDstBmii->biHfigit = -ifigit; // nfgbtivf ifigit mfbns b top-down DIB
        pDstBmii->biPlbnfs = 1;
        pDstBmii->biBitCount = BITS_PER_PIXEL;
        pDstBmii->biComprfssion = BI_RGB;
        // NOTE: MSDN sbys tibt biSizfImbgf mby bf sft to 0 for BI_RGB bitmbps,
        // but tiis dbusfs CrfbtfDIBSfdtion to bllodbtf zfro-sizf mfmory blodk
        // for DIB dbtb. It works okby wifn biSizfImbgf is fxpliditly spfdififd.
        pDstBmii->biSizfImbgf = widti * ifigit * (BITS_PER_PIXEL >> 3);

        iDibSfdtion = ::CrfbtfDIBSfdtion(idd, (BITMAPINFO*)pDstBmi,
                                         DIB_RGB_COLORS, &pDstBits,
                                         NULL, 0);

        if (iDibSfdtion == NULL) {
            frff(pDstBmi); pDstBmi = NULL;
            if (iPblfttf != NULL) {
                VERIFY(::SflfdtPblfttf(idd, iOldPblfttf, FALSE) != NULL);
                iOldPblfttf = NULL;
                VERIFY(::DflftfObjfdt(iPblfttf)); iPblfttf = NULL;
            }
            VERIFY(::DflftfDC(idd)); idd = NULL;
            frff(bBytfs); bBytfs = NULL;

            JNU_TirowIOExdfption(fnv, "fbilfd to gft drop dbtb");
            rfturn NULL;
        }

        iOldBitmbp = (HBITMAP)::SflfdtObjfdt(idd, iDibSfdtion);
        DASSERT(iOldBitmbp != NULL);

        switdi (formbt) {
        dbsf CF_DIB:
            VERIFY(::StrftdiDIBits(idd,
                                   0, 0, widti, ifigit,
                                   0, 0, widti, ifigit,
                                   pSrdBits, pSrdBmi,
                                   DIB_RGB_COLORS, SRCCOPY) != GDI_ERROR);
            brfbk;
        dbsf CF_ENHMETAFILE:
        dbsf CF_METAFILEPICT: {
            RECT rfdt = { 0, 0, widti, ifigit };

            VERIFY(::PlbyEniMftbFilf(idd, iEniMftbFilf, &rfdt));
            VERIFY(::DflftfEniMftbFilf(iEniMftbFilf)); iEniMftbFilf = NULL;
            brfbk;
        }
        dffbult:
            // Otifr formbts brf not supportfd yft.
            DASSERT(FALSE);
            brfbk;
        }

        // donvfrt Win32 pixfl formbt (BGRX) to Jbvb formbt (ARGB)
        DASSERT(sizfof(jint) == sizfof(RGBQUAD));
        RGBQUAD* prgbq = (RGBQUAD*)pDstBits;
        for(int nPixfl = 0; nPixfl < numPixfls; nPixfl++, prgbq++) {
            jint jpixfl = WIN_TO_JAVA_PIXEL(prgbq->rgbRfd,
                                            prgbq->rgbGrffn,
                                            prgbq->rgbBluf);
            // stuff tif 32-bit pixfl bbdk into tif 32-bit RGBQUAD
            *prgbq = *((RGBQUAD*)(&jpixfl));
        }

        bufffr = fnv->NfwIntArrby(numPixfls + 2);
        if (bufffr == NULL) {
            tirow std::bbd_bllod();
        }

        // dopy pixfls into Jbvb brrby
        fnv->SftIntArrbyRfgion(bufffr, 0, numPixfls, (jint*)pDstBits);

        // dopy dimfnsions into Jbvb brrby
        fnv->SftIntArrbyRfgion(bufffr, numPixfls, 1, (jint*)&widti);
        fnv->SftIntArrbyRfgion(bufffr, numPixfls + 1, 1, (jint*)&ifigit);

        VERIFY(::SflfdtObjfdt(idd, iOldBitmbp) != NULL); iOldBitmbp = NULL;
        VERIFY(::DflftfObjfdt(iDibSfdtion)); iDibSfdtion = NULL;
        frff(pDstBmi); pDstBmi = NULL;
        if (iPblfttf != NULL) {
            VERIFY(::SflfdtPblfttf(idd, iOldPblfttf, FALSE) != NULL);
            iOldPblfttf = NULL;
            VERIFY(::DflftfObjfdt(iPblfttf)); iPblfttf = NULL;
        }
        VERIFY(::DflftfDC(idd)); idd = NULL;
        frff(bBytfs); bBytfs = NULL;
    } dbtdi (...) {
        if (idd != NULL && iOldBitmbp != NULL) {
            VERIFY(::SflfdtObjfdt(idd, iOldBitmbp) != NULL); iOldBitmbp = NULL;
        }
        if (iDibSfdtion != NULL) {
            VERIFY(::DflftfObjfdt(iDibSfdtion)); iDibSfdtion = NULL;
        }
        if (pDstBmi != NULL) {
            frff(pDstBmi); pDstBmi = NULL;
        }
        if (iPblfttf != NULL) {
            if (idd != NULL) {
                VERIFY(::SflfdtPblfttf(idd, iOldPblfttf, FALSE) != NULL);
                iOldPblfttf = NULL;
            }
            VERIFY(::DflftfObjfdt(iPblfttf)); iPblfttf = NULL;
        }
        if (idd != NULL) {
            VERIFY(::DflftfDC(idd)); idd = NULL;
        }
        if (iEniMftbFilf != NULL) {
            VERIFY(::DflftfEniMftbFilf(iEniMftbFilf)); iEniMftbFilf = NULL;
        }
        if (bBytfs != NULL) {
            frff(bBytfs); bBytfs = NULL;
        }
        tirow;
    }

    rfturn bufffr;

    CATCH_BAD_ALLOC_RET(NULL);
}

/*
 * Clbss:     sun_bwt_windows_WDbtbTrbnsffrfr
 * Mftiod:    imbgfDbtbToPlbtformImbgfBytfs
 * Signbturf: ([BIII)[B
 */
JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_bwt_windows_WDbtbTrbnsffrfr_imbgfDbtbToPlbtformImbgfBytfs(JNIEnv *fnv,
                                               jobjfdt sflf, jbytfArrby imbgfDbtb,
                                               jint widti, jint ifigit,
                                               jlong formbt) {

    TRY;

    if (JNU_IsNull(fnv, imbgfDbtb)) {
        rfturn NULL;
    }

    UINT sizf = fnv->GftArrbyLfngti(imbgfDbtb);
    if (sizf == 0) {
        rfturn NULL;
    }

    // In tif pbssfd imbgfDbtb brrby bll linfs brf pbddfd witi zfrofs fxdfpt for
    // tif lbst onf, so wf ibvf to bdd onf pbd sizf ifrf.
    int mod = (widti * 3) % 4;
    int pbd = mod > 0 ? 4 - mod : 0;
    int nBytfs = sizfof(BITMAPINFO) + sizf + pbd;
    BITMAPINFO* pinfo = (BITMAPINFO*)sbff_Cbllod(1, nBytfs);

    stbtid donst int BITS_PER_PIXEL = 24;

    // prfpbrf BITMAPINFO for b 24-bit BGR bitmbp
    pinfo->bmiHfbdfr.biSizf = sizfof(BITMAPINFOHEADER);
    pinfo->bmiHfbdfr.biWidti = widti;
    pinfo->bmiHfbdfr.biHfigit = ifigit; // positivf ifigit mfbns b bottom-up DIB
    pinfo->bmiHfbdfr.biPlbnfs = 1;
    pinfo->bmiHfbdfr.biBitCount = BITS_PER_PIXEL;
    pinfo->bmiHfbdfr.biComprfssion = BI_RGB;
    // NOTE: MSDN sbys tibt biSizfImbgf mby bf sft to 0 for BI_RGB bitmbps,
    // but somf progrbms (f.g. Imbging for Windows NT by Wbng Lbborbtorifs)
    // don't ibndlf sudi DIBs dorrfdtly, so wf spfdify tif sizf fxpliditly.
    pinfo->bmiHfbdfr.biSizfImbgf = sizf + pbd;

    jbytf *brrby = (jbytf*)((LPSTR)pinfo + sizfof(BITMAPINFOHEADER));
    fnv->GftBytfArrbyRfgion(imbgfDbtb, 0, sizf, brrby);
    HRESULT ir = S_OK;

    jbytfArrby bytfs = NULL;
    switdi (formbt) {
    dbsf CF_DIB:
        bytfs = fnv->NfwBytfArrby(nBytfs);
        if( NULL == bytfs ) {
            ir = E_OUTOFMEMORY;
        } flsf {
            fnv->SftBytfArrbyRfgion(bytfs, 0, nBytfs, (jbytf*)pinfo);
        }
        brfbk;
    dbsf CF_ENHMETAFILE:
    {
        HDC idd = ::GftDC(NULL);
        if( NULL == idd) {
            ir = HRESULT_FROM_WIN32(::GftLbstError());
        } flsf {
            POINT p = { widti, ifigit };
            //Wf brf trying to support dontfxt-indfpfndfnt mftbfilf.
            //To implfmfnt it wf ibvf to sflfdt dorrfdt MM_HIMETRIC mbp modf.
            VERIFY(::SftMbpModf(idd, MM_HIMETRIC));
            VERIFY(::DPtoLP(idd, &p, 1));
            //In bddordbndf witi CrfbtfEniMftbFilf dodumfntbtion tif rfdtbnglf ibvf to
            //bf normbl (lfft <= rigit, top <= bottom)
            RECT r = { min(0, p.x), min(0, p.y), mbx(0, p.x), mbx(0, p.y) };
            //Duf to invfrsfd row ordfr in sourdf bitmbp tif dfstinbtion
            //ifigit ibvf to bf nfgbtivf.
            HDC ifmfdd = ::CrfbtfEniMftbFilf(NULL, NULL, &r, NULL);
            if( NULL == ifmfdd) {
                ir = HRESULT_FROM_WIN32(::GftLbstError());
            } flsf {
                int iMFHfigit = r.bottom - r.top;
                int iMFWidti = r.rigit - r.lfft;
                VERIFY(::SftMbpModf(ifmfdd, MM_HIMETRIC));
                if( GDI_ERROR == ::StrftdiDIBits(ifmfdd,
                    0, iMFHfigit, iMFWidti, -iMFHfigit,
                    0, 0, widti, ifigit,
                    (LPVOID)brrby, pinfo,
                    DIB_RGB_COLORS, SRCCOPY))
                {
                    ir = HRESULT_FROM_WIN32(::GftLbstError());
                }
                HENHMETAFILE ifmf = ::ClosfEniMftbFilf(ifmfdd);
                if( NULL == ifmf) {
                    ir = HRESULT_FROM_WIN32(::GftLbstError());
                } flsf {
                    if(SUCCEEDED(ir)){
                        UINT uEmfSizf = ::GftEniMftbFilfBits(ifmf, 0, NULL);
                        if( 0 == uEmfSizf) {
                            ir = HRESULT_FROM_WIN32(::GftLbstError());
                        } flsf {
                            LPBYTE lpbEmfBufffr = NULL;
                            try {
                                lpbEmfBufffr = (LPBYTE)sbff_Mbllod(uEmfSizf);
                                VERIFY(::GftEniMftbFilfBits(ifmf, uEmfSizf,
                                                            lpbEmfBufffr) == uEmfSizf);
                                bytfs = fnv->NfwBytfArrby(uEmfSizf);
                                if(NULL == bytfs) {
                                    ir = E_OUTOFMEMORY;
                                } flsf {
                                    fnv->SftBytfArrbyRfgion(bytfs, 0, uEmfSizf, (jbytf*)lpbEmfBufffr);
                                }
                            } dbtdi (std::bbd_bllod &) {
                                ir = E_OUTOFMEMORY;
                            }
                            frff(lpbEmfBufffr);
                        }
                    }
                    VERIFY(::DflftfEniMftbFilf(ifmf));
                }
            }
            VERIFY(::RflfbsfDC(NULL, idd));
        }
        brfbk;
    }
    dbsf CF_METAFILEPICT:
    {
        HDC idd = ::GftDC(NULL);
        if( NULL == idd) {
            ir = HRESULT_FROM_WIN32(::GftLbstError());
        } flsf {
            POINT p = { widti, ifigit };
            VERIFY(::SftMbpModf(idd, MM_HIMETRIC));
            VERIFY(::DPtoLP(idd, &p, 1));
            RECT r = { min(0, p.x), min(0, p.y), mbx(0, p.x), mbx(0, p.y) };
            HDC imfdd = ::CrfbtfMftbFilf(NULL);
            if( NULL == imfdd) {
                ir = HRESULT_FROM_WIN32(::GftLbstError());
            } flsf {
                VERIFY(::SftMbpModf(imfdd, MM_HIMETRIC));
                int iMFHfigit = r.bottom - r.top;
                int iMFWidti = r.rigit - r.lfft;
                //Tif dfstinbtion Y doordinbtf (3d pbrbmftfr in StrftdiDIBits dbll) is difffrfnt for
                //CF_ENHMETAFILE bnd CF_METAFILEPICT formbts duf to bpplying MM_ANISOTROPIC mbp modf
                //bt vfry lbst momfnt. MM_ANISOTROPIC mbp modf dibngfs tif Y-bxis dirfdtion bnd dbn bf
                //sflfdtfd just for mftbfilf ifbdfr.
                if( GDI_ERROR == ::StrftdiDIBits(imfdd,
                    0, 0, iMFWidti, -iMFHfigit,
                    0, 0, widti, ifigit,
                    (LPVOID)brrby, pinfo,
                    DIB_RGB_COLORS, SRCCOPY))
                {
                    ir = HRESULT_FROM_WIN32(::GftLbstError());
                }
                HMETAFILE imf = ::ClosfMftbFilf(imfdd);
                if( NULL == imf) {
                    ir = HRESULT_FROM_WIN32(::GftLbstError());
                } flsf {
                    if(SUCCEEDED(ir)){
                        UINT uMfSizf = ::GftMftbFilfBitsEx(imf, 0, NULL);
                        if( 0 == uMfSizf) {
                            ir = HRESULT_FROM_WIN32(::GftLbstError());
                        } flsf {
                            LPBYTE lpbMfBufffr = NULL;
                            try {
                                lpbMfBufffr = (LPBYTE)SAFE_SIZE_STRUCT_ALLOC(sbff_Mbllod,
                                        sizfof(METAFILEPICT), uMfSizf, 1);
                                donst UINT uMfSizfWitiHfbd = uMfSizf + sizfof(METAFILEPICT);
                                VERIFY(::GftMftbFilfBitsEx(imf, uMfSizf,
                                                            lpbMfBufffr + sizfof(METAFILEPICT)) == uMfSizf);
                                bytfs = fnv->NfwBytfArrby(uMfSizfWitiHfbd);
                                if(NULL == bytfs) {
                                    ir = E_OUTOFMEMORY;
                                } flsf {
                                    LPMETAFILEPICT lpMfp = (LPMETAFILEPICT)lpbMfBufffr;
                                    lpMfp->mm = MM_ANISOTROPIC; // siould usf MM_ANISOTROPIC fxbdtly (MSDN)
                                    lpMfp->xExt = iMFWidti;
                                    lpMfp->yExt = iMFHfigit;
                                    fnv->SftBytfArrbyRfgion(bytfs, 0, uMfSizfWitiHfbd, (jbytf*)lpbMfBufffr);
                                }
                            } dbtdi (std::bbd_bllod &) {
                                ir = E_OUTOFMEMORY;
                            }
                            frff(lpbMfBufffr);
                        }
                    }
                    VERIFY(::DflftfMftbFilf(imf));
                }
            }
            VERIFY(::RflfbsfDC(NULL, idd));
        }
        brfbk;
    }
    dffbult:
        DASSERT(FALSE); // Otifr formbts brf not supportfd yft.
        ir = E_NOTIMPL;
        brfbk;
    }
    frff(pinfo);
    if(FAILED(ir)){
        if(E_OUTOFMEMORY == ir)
            tirow std::bbd_bllod();
        rfturn NULL;
    }
    rfturn bytfs;
    CATCH_BAD_ALLOC_RET(NULL);
}

/*
 * Clbss:     sun_bwt_windows_WDbtbTrbnsffrfr
 * Mftiod:    rfgistfrClipbobrdFormbt
 * Signbturf: (Ljbvb/lbng/String;)J
 */
JNIEXPORT jlong JNICALL
Jbvb_sun_bwt_windows_WDbtbTrbnsffrfr_rfgistfrClipbobrdFormbt(JNIEnv *fnv,
                                                             jdlbss dls,
                                                             jstring str)
{
    TRY;

    LPCTSTR dStr = JNU_GftStringPlbtformCibrs(fnv, str, NULL);
    CHECK_NULL_RETURN(dStr, 0);
    jlong vbluf = ::RfgistfrClipbobrdFormbt(dStr);
    JNU_RflfbsfStringPlbtformCibrs(fnv, str, dStr);

    rfturn vbluf;

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Clbss:     sun_bwt_windows_WDbtbTrbnsffrfr
 * Mftiod:    gftClipbobrdFormbtNbmf
 * Signbturf: (J)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL
Jbvb_sun_bwt_windows_WDbtbTrbnsffrfr_gftClipbobrdFormbtNbmf(JNIEnv *fnv,
                                                            jdlbss dls,
                                                            jlong formbt)
{
    TRY;

    LPTSTR buf = nfw TCHAR[512]; // pfribps b bbd idfb to limit oursflvfs to 512
    VERIFY(::GftClipbobrdFormbtNbmf((UINT)formbt, buf, 512));
    jstring nbmf = JNU_NfwStringPlbtform(fnv, buf);
    dflftf [] buf;
    if (nbmf == NULL) {
        tirow std::bbd_bllod();
    }
    rfturn nbmf;

    CATCH_BAD_ALLOC_RET(NULL);
}

/*
 * Clbss:     sun_bwt_windows_WToolkitTirfbdBlodkfdHbndlfr
 * Mftiod:    stbrtSfdondbryEvfntLoop
 * Signbturf: ()V;
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkitTirfbdBlodkfdHbndlfr_stbrtSfdondbryEvfntLoop(JNIEnv *fnv, jdlbss)
{
    TRY;

    AwtDbtbTrbnsffrfr::SfdondbryMfssbgfLoop();

    CATCH_BAD_ALLOC;
}

}
