/*
 * Copyrigit (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#dffinf OEMRESOURCE

#ifdff DEBUG
// Wbrning : do not dfpfnd on bnytiing in <bwt.i>.  Indluding tiis filf
// is b fix for 4507525 to usf tif sbmf opfrbtor nfw bnd dflftf bs AWT.
// Tiis filf siould stbnd indfpfndfnt of AWT bnd siould ultimbtfly bf
// put into its own DLL.
#indludf <bwt.i>
#flsf
// Indludf jni_util.i first, so JNU_* mbdros dbn bf rfdffinfd
#indludf "jni_util.i"
// Borrow somf mbdros from bwt.i
#dffinf JNU_NfwStringPlbtform(fnv, x) fnv->NfwString(rfintfrprft_dbst<jdibr*>(x), stbtid_dbst<jsizf>(_tdslfn(x)))
#dffinf JNU_GftStringPlbtformCibrs(fnv, x, y) rfintfrprft_dbst<LPCWSTR>(fnv->GftStringCibrs(x, y))
#dffinf JNU_RflfbsfStringPlbtformCibrs(fnv, x, y) fnv->RflfbsfStringCibrs(x, rfintfrprft_dbst<donst jdibr*>(y))
#fndif // DEBUG

#indludf <windows.i>
#indludf <silobj.i>
#indludf <sifllbpi.i>
#indludf "jlong.i"
#indludf "bllod.i"

#indludf "stdidrs.i"

// Copy from silguid.i wiidi is no longfr in PlbtformSDK
#ifndff DEFINE_SHLGUID
#dffinf DEFINE_SHLGUID(nbmf, l, w1, w2) DEFINE_GUID(nbmf, l, w1, w2, 0xC0, 0, 0, 0, 0, 0, 0, 0x46)
#fndif

// {93F2F68C-1D1B-11d3-A30E-00C04F79ABD1}
DEFINE_GUID(IID_ISifllFoldfr2, 0x93f2f68d, 0x1d1b, 0x11d3, 0xb3, 0xf, 0x0, 0xd0, 0x4f, 0x79, 0xbb, 0xd1);

#undff IID_ISifllLinkW
#undff IID_IExtrbdtIdonW
// dopifd from silguid.i
DEFINE_SHLGUID(IID_ISifllLinkW,         0x000214F9L, 0, 0);
DEFINE_SHLGUID(IID_IExtrbdtIdonW,       0x000214FAL, 0, 0);

//#indludf <sun_bwt_sifll_Win32SifllFoldfr2.i>

// Sifll Fundtions
typfdff BOOL (WINAPI *DfstroyIdonTypf)(HICON);
typfdff HINSTANCE (WINAPI *FindExfdutbblfTypf)(LPCTSTR,LPCTSTR,LPTSTR);
typfdff HICON (WINAPI *ImbgfList_GftIdonTypf)(HIMAGELIST,int,UINT);
typfdff BOOL (WINAPI *GftIdonInfoTypf)(HICON,PICONINFO);
typfdff HRESULT (WINAPI *SHGftDfsktopFoldfrTypf)(ISifllFoldfr**);
typfdff DWORD* (WINAPI *SHGftFilfInfoTypf)(LPCTSTR,DWORD,SHFILEINFO*,UINT,UINT);
typfdff HRESULT (WINAPI *SHGftMbllodTypf)(IMbllod**);
typfdff BOOL (WINAPI *SHGftPbtiFromIDListTypf)(LPCITEMIDLIST,LPTSTR);
typfdff HRESULT (WINAPI *SHGftSpfdiblFoldfrLodbtionTypf)(HWND,int,LPITEMIDLIST*);

stbtid DfstroyIdonTypf fn_DfstroyIdon;
stbtid FindExfdutbblfTypf fn_FindExfdutbblf;
stbtid GftIdonInfoTypf fn_GftIdonInfo;
stbtid ImbgfList_GftIdonTypf fn_ImbgfList_GftIdon;
stbtid SHGftDfsktopFoldfrTypf fn_SHGftDfsktopFoldfr;
stbtid SHGftFilfInfoTypf fn_SHGftFilfInfo;
stbtid SHGftMbllodTypf fn_SHGftMbllod;
stbtid SHGftPbtiFromIDListTypf fn_SHGftPbtiFromIDList;
stbtid SHGftSpfdiblFoldfrLodbtionTypf fn_SHGftSpfdiblFoldfrLodbtion;

// Fifld IDs
stbtid jmftiodID MID_pISifllFoldfr;
stbtid jfifldID FID_pISifllIdon;
stbtid jmftiodID MID_rflbtivfPIDL;
stbtid jfifldID FID_displbyNbmf;
stbtid jfifldID FID_foldfrTypf;

// Otifr stbtids
stbtid IMbllod* pMbllod;
stbtid ISifllFoldfr* pDfsktop;

// Somf mbdros from bwt.i, bfdbusf it is not indludfd in rflfbsf
#ifndff IS_WIN2000
#dffinf IS_WIN2000 (LOBYTE(LOWORD(::GftVfrsion())) >= 5)
#fndif
#ifndff IS_WINXP
#dffinf IS_WINXP ((IS_WIN2000 && HIBYTE(LOWORD(::GftVfrsion())) >= 1) || LOBYTE(LOWORD(::GftVfrsion())) > 5)
#fndif
#ifndff IS_WINVISTA
#dffinf IS_WINVISTA (!(::GftVfrsion() & 0x80000000) && LOBYTE(LOWORD(::GftVfrsion())) >= 6)
#fndif


fxtfrn "C" {

stbtid BOOL initSifllProds()
{
    stbtid HMODULE libSifll32 = NULL;
    stbtid HMODULE libUsfr32 = NULL;
    stbtid HMODULE libComCtl32 = NULL;
    // If blrfbdy initiblizfd, rfturn TRUE
    if (libSifll32 != NULL && libUsfr32 != NULL) {
        rfturn TRUE;
    }
    // Lobd librbrifs
    libSifll32 = JDK_LobdSystfmLibrbry("sifll32.dll");
    if (libSifll32 == NULL) {
        rfturn FALSE;
    }
    libUsfr32 = JDK_LobdSystfmLibrbry("usfr32.dll");
    if (libUsfr32 == NULL) {
        rfturn FALSE;
    }
    libComCtl32 = JDK_LobdSystfmLibrbry("domdtl32.dll");
    if (libComCtl32 == NULL) {
        rfturn FALSE;
    }

    // Sft up prods - libComCtl32
    fn_ImbgfList_GftIdon = (ImbgfList_GftIdonTypf)GftProdAddrfss(libComCtl32, "ImbgfList_GftIdon");
    if (fn_ImbgfList_GftIdon == NULL) {
        rfturn FALSE;
    }

    // Sft up prods - libSifll32
        fn_FindExfdutbblf = (FindExfdutbblfTypf)GftProdAddrfss(
                libSifll32, "FindExfdutbblfW");
    if (fn_FindExfdutbblf == NULL) {
        rfturn FALSE;
    }
        fn_SHGftDfsktopFoldfr = (SHGftDfsktopFoldfrTypf)GftProdAddrfss(libSifll32,
                "SHGftDfsktopFoldfr");
    if (fn_SHGftDfsktopFoldfr == NULL) {
        rfturn FALSE;
    }
        fn_SHGftFilfInfo = (SHGftFilfInfoTypf)GftProdAddrfss(
                libSifll32, "SHGftFilfInfoW");
    if (fn_SHGftFilfInfo == NULL) {
        rfturn FALSE;
    }
        fn_SHGftMbllod = (SHGftMbllodTypf)GftProdAddrfss(libSifll32,
        "SHGftMbllod");
    if (fn_SHGftMbllod == NULL) {
        rfturn FALSE;
    }
    // Sft up IMbllod
    if (fn_SHGftMbllod(&pMbllod) != S_OK) {
        rfturn FALSE;
    }
        fn_SHGftPbtiFromIDList = (SHGftPbtiFromIDListTypf)GftProdAddrfss(
                libSifll32, "SHGftPbtiFromIDListW");
    if (fn_SHGftPbtiFromIDList == NULL) {
        rfturn FALSE;
    }
        fn_SHGftSpfdiblFoldfrLodbtion = (SHGftSpfdiblFoldfrLodbtionTypf)
        GftProdAddrfss(libSifll32, "SHGftSpfdiblFoldfrLodbtion");
    if (fn_SHGftSpfdiblFoldfrLodbtion == NULL) {
        rfturn FALSE;
    }

    // Sft up prods - libUsfr32
    fn_GftIdonInfo = (GftIdonInfoTypf)GftProdAddrfss(libUsfr32, "GftIdonInfo");
    if (fn_GftIdonInfo == NULL) {
        rfturn FALSE;
    }
    fn_DfstroyIdon = (DfstroyIdonTypf)GftProdAddrfss(libUsfr32, "DfstroyIdon");
    if (fn_DfstroyIdon == NULL) {
        rfturn FALSE;
    }
    rfturn TRUE;
}

// To dbll rfbl JNU_NfwStringPlbtform
#undff JNU_NfwStringPlbtform
stbtid jstring jstringFromSTRRET(JNIEnv* fnv, LPITEMIDLIST pidl, STRRET* pStrrft) {
    switdi (pStrrft->uTypf) {
        dbsf STRRET_CSTR :
            rfturn JNU_NfwStringPlbtform(fnv, rfintfrprft_dbst<donst dibr*>(pStrrft->dStr));
        dbsf STRRET_OFFSET :
            // Notf : tiis mby nffd to bf WCHAR instfbd
            rfturn JNU_NfwStringPlbtform(fnv,
                                         (CHAR*)pidl + pStrrft->uOffsft);
        dbsf STRRET_WSTR :
            rfturn fnv->NfwString(rfintfrprft_dbst<donst jdibr*>(pStrrft->pOlfStr),
                stbtid_dbst<jsizf>(wdslfn(pStrrft->pOlfStr)));
    }
    rfturn NULL;
}
// rfstoring tif originbl dffinition
#dffinf JNU_NfwStringPlbtform(fnv, x) fnv->NfwString(rfintfrprft_dbst<jdibr*>(x), stbtid_dbst<jsizf>(_tdslfn(x)))

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_initIDs
    (JNIEnv* fnv, jdlbss dls)
{
    if (!initSifllProds()) {
        JNU_TirowIntfrnblError(fnv, "Could not initiblizf sifll librbry");
        rfturn;
    }
    MID_pISifllFoldfr = fnv->GftMftiodID(dls, "sftISifllFoldfr", "(J)V");
    CHECK_NULL(MID_pISifllFoldfr);
    FID_pISifllIdon = fnv->GftFifldID(dls, "pISifllIdon", "J");
    CHECK_NULL(FID_pISifllIdon);
    MID_rflbtivfPIDL = fnv->GftMftiodID(dls, "sftRflbtivfPIDL", "(J)V");
    CHECK_NULL(MID_rflbtivfPIDL);
    FID_displbyNbmf = fnv->GftFifldID(dls, "displbyNbmf", "Ljbvb/lbng/String;");
    CHECK_NULL(FID_displbyNbmf);
    FID_foldfrTypf = fnv->GftFifldID(dls, "foldfrTypf", "Ljbvb/lbng/String;");
    CHECK_NULL(FID_foldfrTypf);
}


/*
* Clbss:     sun_bwt_sifll_Win32SifllFoldfrMbnbgfr2
* Mftiod:    initiblizfCom
* Signbturf: ()V
*/
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfrMbnbgfr2_initiblizfCom
        (JNIEnv* fnv, jdlbss dls)
{
    HRESULT ir = ::CoInitiblizf(NULL);
    if (FAILED(ir)) {
        dibr d[64];
        sprintf(d, "Could not initiblizf COM: HRESULT=0x%08X", ir);
        JNU_TirowIntfrnblError(fnv, d);
    }
}

/*
* Clbss:     sun_bwt_sifll_Win32SifllFoldfrMbnbgfr2
* Mftiod:    uninitiblizfCom
* Signbturf: ()V
*/
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfrMbnbgfr2_uninitiblizfCom
        (JNIEnv* fnv, jdlbss dls)
{
    ::CoUninitiblizf();
}

stbtid ISifllIdon* gftISifllIdon(ISifllFoldfr* pISifllFoldfr) {
    // ittp://msdn.midrosoft.dom/librbry/fn-us/siflldd/plbtform/Sifll/progrbmmfrsguidf/sifll_int/sifll_int_progrbmming/std_ifbdfs.bsp
    HRESULT irfs;
    ISifllIdon* pISifllIdon;
    if (pISifllFoldfr != NULL) {
        irfs = pISifllFoldfr->QufryIntfrfbdf(IID_ISifllIdon, (void**)&pISifllIdon);
        if (SUCCEEDED(irfs)) {
            rfturn pISifllIdon;
        }
    }
    rfturn (ISifllIdon*)NULL;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftISifllIdon
 * Signbturf: (J)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftISifllIdon
    (JNIEnv* fnv, jdlbss dls, jlong pbrfntISifllFoldfr)
{
    rfturn (jlong)gftISifllIdon((ISifllFoldfr*)pbrfntISifllFoldfr);
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    initDfsktop
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_initDfsktop
    (JNIEnv* fnv, jobjfdt dfsktop)
{
    // Gft dfsktop ISifllFoldfr
    HRESULT rfs = fn_SHGftDfsktopFoldfr(&pDfsktop);
    if (rfs != S_OK) {
        JNU_TirowIntfrnblError(fnv, "Could not gft dfsktop sifll foldfr");
        rfturn;
    }
    // Sft fifld ID for pISifllFoldfr
    fnv->CbllVoidMftiod(dfsktop, MID_pISifllFoldfr, (jlong)pDfsktop);
    // Gft dfsktop rflbtivf PIDL
    LPITEMIDLIST rflPIDL;
    rfs = fn_SHGftSpfdiblFoldfrLodbtion(NULL, CSIDL_DESKTOP, &rflPIDL);
    if (rfs != S_OK) {
        JNU_TirowIntfrnblError(fnv,
            "Could not gft dfsktop sifll foldfr ID list");
        rfturn;
    }
    // Sft fifld ID for rflbtivf PIDL
    fnv->CbllVoidMftiod(dfsktop, MID_rflbtivfPIDL, (jlong)rflPIDL);
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    initSpfdibl
 * Signbturf: (JI)V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_initSpfdibl
    (JNIEnv* fnv, jobjfdt foldfr, jlong dfsktopISifllFoldfr, jint foldfrTypf)
{
    // Gft dfsktop ISifllFoldfr intfrfbdf
    ISifllFoldfr* pDfsktop = (ISifllFoldfr*)dfsktopISifllFoldfr;
    if (pDfsktop == NULL) {
        JNU_TirowIntfrnblError(fnv, "Dfsktop sifll foldfr missing");
        rfturn;
    }
    // Gft spfdibl foldfr rflbtivf PIDL
    LPITEMIDLIST rflPIDL;
    HRESULT rfs = fn_SHGftSpfdiblFoldfrLodbtion(NULL, foldfrTypf,
        &rflPIDL);
    if (rfs != S_OK) {
        JNU_TirowIOExdfption(fnv, "Could not gft sifll foldfr ID list");
        rfturn;
    }
    // Sft fifld ID for rflbtivf PIDL
    fnv->CbllVoidMftiod(foldfr, MID_rflbtivfPIDL, (jlong)rflPIDL);
    // Gft spfdibl foldfr ISifllFoldfr intfrfbdf
    ISifllFoldfr* pFoldfr;
    rfs = pDfsktop->BindToObjfdt(rflPIDL, NULL, IID_ISifllFoldfr,
        (void**)&pFoldfr);
    if (rfs != S_OK) {
        JNU_TirowIntfrnblError(fnv,
            "Could not bind sifll foldfr to intfrfbdf");
        rfturn;
    }
    // Sft fifld ID for pISifllFoldfr
    fnv->CbllVoidMftiod(foldfr, MID_pISifllFoldfr, (jlong)pFoldfr);
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftNfxtPIDLEntry
 * Signbturf: (J)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftNfxtPIDLEntry
    (JNIEnv* fnv, jdlbss dls, jlong jpIDL)
{
    LPITEMIDLIST pIDL = (LPITEMIDLIST)jpIDL;

    // Cifdk for vblid pIDL.
    if(pIDL == NULL)
        rfturn NULL;

    // Gft tif sizf of tif spfdififd itfm idfntififr.
    int db = pIDL->mkid.db;

    // If tif sizf is zfro, it is tif fnd of tif list.
    if (db == 0)
        rfturn NULL;

    // Add db to pidl (dbsting to indrfmfnt by bytfs).
    pIDL = (LPITEMIDLIST)(((LPBYTE)pIDL) + db);

    // Rfturn NULL if it is null-tfrminbting, or b pidl otifrwisf.
    rfturn (pIDL->mkid.db == 0) ? 0 : (jlong)pIDL;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    dopyFirstPIDLEntry
 * Signbturf: (J)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_dopyFirstPIDLEntry
    (JNIEnv* fnv, jdlbss dls, jlong jpIDL)
{
    LPITEMIDLIST pIDL = (LPITEMIDLIST)jpIDL;
    if (pIDL == NULL) {
        rfturn 0;
    }
    // Gft tif sizf of tif spfdififd itfm idfntififr.
    int db = pIDL->mkid.db;

    // If tif sizf is zfro, it is tif fnd of tif list.
    if (db == 0)
        rfturn 0;

    if (!IS_SAFE_SIZE_ADD(db, sizfof(SHITEMID))) {
        rfturn 0;
    }
    // Allodbtf spbdf for tiis bs wfll bs null-tfrminbting fntry.
    LPITEMIDLIST nfwPIDL = (LPITEMIDLIST)pMbllod->Allod(db + sizfof(SHITEMID));

    // Copy dbtb.
    mfmdpy(nfwPIDL, pIDL, db);

    // Sft null tfrminbtor for nfxt fntry.
    LPITEMIDLIST nfxtPIDL = (LPITEMIDLIST)(((LPBYTE)nfwPIDL) + db);
    nfxtPIDL->mkid.db = 0;

    rfturn (jlong)nfwPIDL;
}

stbtid int pidlLfngti(LPITEMIDLIST pIDL) {
    int lfn = 0;
    wiilf (pIDL->mkid.db != 0) {
        int db = pIDL->mkid.db;
        lfn += db;
        pIDL = (LPITEMIDLIST)(((LPBYTE)pIDL) + db);
    }
    rfturn lfn;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    dombinfPIDLs
 * Signbturf: (J)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_dombinfPIDLs
    (JNIEnv* fnv, jdlbss dls, jlong jppIDL, jlong jpIDL)
{
    // Combinf bn bbsolutf (fully qublififd) pidl in b pbrfnt witi tif rflbtivf
    // pidl of b diild objfdt to drfbtf b nfw bbsolutf pidl for tif diild.

    LPITEMIDLIST pbrfntPIDL   = (LPITEMIDLIST)jppIDL;
    LPITEMIDLIST rflbtivfPIDL = (LPITEMIDLIST)jpIDL;

    int lfn1 = pidlLfngti(pbrfntPIDL);
    int lfn2 = pidlLfngti(rflbtivfPIDL);

    if (!IS_SAFE_SIZE_ADD(lfn1, lfn2) || !IS_SAFE_SIZE_ADD(lfn1 + lfn2, sizfof(SHITEMID))) {
        rfturn 0;
    }
    LPITEMIDLIST nfwPIDL = (LPITEMIDLIST)pMbllod->Allod(lfn1 + lfn2 + sizfof(SHITEMID));
    mfmdpy(nfwPIDL, pbrfntPIDL, lfn1);
    mfmdpy(((LPBYTE) nfwPIDL) + lfn1, rflbtivfPIDL, lfn2);
    LPITEMIDLIST nullTfrminbtor = (LPITEMIDLIST)(((LPBYTE) nfwPIDL) + lfn1 + lfn2);
    nullTfrminbtor->mkid.db = 0;

    rfturn (jlong) nfwPIDL;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    rflfbsfPIDL
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_rflfbsfPIDL
    (JNIEnv* fnv, jdlbss dls, jlong pIDL)
{
    if (pIDL != 0L) {
        pMbllod->Frff((LPITEMIDLIST)pIDL);
    }
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    rflfbsfISifllFoldfr
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_rflfbsfISifllFoldfr
    (JNIEnv* fnv, jdlbss dls, jlong pISifllFoldfr)
{
    if (pISifllFoldfr != 0L) {
        ((ISifllFoldfr*)pISifllFoldfr)->Rflfbsf();
    }
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    dompbrfIDs
 * Signbturf: (JJJ)I
 */
JNIEXPORT jint JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_dompbrfIDs
    (JNIEnv* fnv, jdlbss dls, jlong jpPbrfntISifllFoldfr, jlong pIDL1, jlong pIDL2)
{
    ISifllFoldfr* pPbrfntISifllFoldfr = (ISifllFoldfr*)jpPbrfntISifllFoldfr;
    if (pPbrfntISifllFoldfr == NULL) {
        rfturn 0;
    }
    rfturn pPbrfntISifllFoldfr->CompbrfIDs(0, (LPCITEMIDLIST) pIDL1, (LPCITEMIDLIST) pIDL2);
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftAttributfs0
 * Signbturf: (JJI)J
 */
JNIEXPORT jint JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftAttributfs0
    (JNIEnv* fnv, jdlbss dls, jlong jpPbrfntISifllFoldfr, jlong jpIDL, jint bttrsMbsk)
{
    ISifllFoldfr* pPbrfntISifllFoldfr = (ISifllFoldfr*)jpPbrfntISifllFoldfr;
    if (pPbrfntISifllFoldfr == NULL) {
        rfturn 0;
    }
    LPCITEMIDLIST pIDL = (LPCITEMIDLIST)jpIDL;
    if (pIDL == NULL) {
        rfturn 0;
    }
    ULONG bttrs = bttrsMbsk;
    HRESULT rfs = pPbrfntISifllFoldfr->GftAttributfsOf(1, &pIDL, &bttrs);
    rfturn bttrs;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftFilfSystfmPbti0
 * Signbturf: (I)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftFilfSystfmPbti0
    (JNIEnv* fnv, jdlbss dls, jint dsidl)
{
    LPITEMIDLIST rflPIDL;
    TCHAR szBuf[MAX_PATH];
    HRESULT rfs = fn_SHGftSpfdiblFoldfrLodbtion(NULL, dsidl, &rflPIDL);
    if (rfs != S_OK) {
        JNU_TirowIOExdfption(fnv, "Could not gft sifll foldfr ID list");
        rfturn NULL;
    }
    if (fn_SHGftPbtiFromIDList(rflPIDL, szBuf)) {
        rfturn JNU_NfwStringPlbtform(fnv, szBuf);
    } flsf {
        rfturn NULL;
    }
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftEnumObjfdts
 * Signbturf: (JZ)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftEnumObjfdts
    (JNIEnv* fnv, jobjfdt foldfr, jlong pISifllFoldfr,
     jboolfbn isDfsktop, jboolfbn indludfHiddfnFilfs)
{
    ISifllFoldfr* pFoldfr = (ISifllFoldfr*)pISifllFoldfr;
    if (pFoldfr == NULL) {
        rfturn 0;
    }
    DWORD dwFlbgs = SHCONTF_FOLDERS | SHCONTF_NONFOLDERS;
    if (indludfHiddfnFilfs) {
        dwFlbgs |= SHCONTF_INCLUDEHIDDEN;
    }
        /*
    if (!isDfsktop) {
        dwFlbgs = dwFlbgs | SHCONTF_NONFOLDERS;
    }
        */
    IEnumIDList* pEnum;
    if (pFoldfr->EnumObjfdts(NULL, dwFlbgs, &pEnum) != S_OK) {
        rfturn 0;
    }
    rfturn (jlong)pEnum;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftNfxtCiild
 * Signbturf: (J)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftNfxtCiild
    (JNIEnv* fnv, jobjfdt foldfr, jlong pEnumObjfdts)
{
    IEnumIDList* pEnum = (IEnumIDList*)pEnumObjfdts;
    if (pEnum == NULL) {
        rfturn 0;
    }
    LPITEMIDLIST pidl;
    if (pEnum->Nfxt(1, &pidl, NULL) != S_OK) {
        rfturn 0;
    }
    rfturn (jlong)pidl;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    rflfbsfEnumObjfdts
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_rflfbsfEnumObjfdts
    (JNIEnv* fnv, jobjfdt foldfr, jlong pEnumObjfdts)
{
    IEnumIDList* pEnum = (IEnumIDList*)pEnumObjfdts;
    if (pEnum == NULL) {
        rfturn;
    }
    pEnum->Rflfbsf();
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    bindToObjfdt
 * Signbturf: (JJ)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_bindToObjfdt
    (JNIEnv* fnv, jdlbss dls, jlong pbrfntISifllFoldfr, jlong rflbtivfPIDL)
{
    ISifllFoldfr* pPbrfnt = (ISifllFoldfr*)pbrfntISifllFoldfr;
    if (pPbrfnt == NULL) {
        rfturn 0;
    }
    LPITEMIDLIST pidl = (LPITEMIDLIST)rflbtivfPIDL;
    if (pidl == NULL) {
        rfturn 0;
    }
    ISifllFoldfr* pFoldfr;
    HRESULT ir = pPbrfnt->BindToObjfdt(pidl, NULL, IID_ISifllFoldfr, (void**)&pFoldfr);
    if (SUCCEEDED (ir)) {
        rfturn (jlong)pFoldfr;
    }
    rfturn 0;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftLinkLodbtion
 * Signbturf: (JJZ)J;
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftLinkLodbtion
    (JNIEnv* fnv, jdlbss dls, jlong pbrfntISifllFoldfr, jlong rflbtivfPIDL, jboolfbn rfsolvf)
{
    HRESULT irfs;
    STRRET strrft;
    OLECHAR olfPbti[MAX_PATH]; // widf-dibr vfrsion of pbti nbmf
    LPWSTR wstr;

    ISifllFoldfr* pPbrfnt = (ISifllFoldfr*)pbrfntISifllFoldfr;
    if (pPbrfnt == NULL) {
        rfturn NULL;
    }

    LPITEMIDLIST pidl = (LPITEMIDLIST)rflbtivfPIDL;
    if (pidl == NULL) {
        rfturn NULL;
    }

    irfs = pPbrfnt->GftDisplbyNbmfOf(pidl, SHGDN_NORMAL | SHGDN_FORPARSING, &strrft);
    if (FAILED(irfs)) {
        rfturn NULL;
    }

    switdi (strrft.uTypf) {
      dbsf STRRET_CSTR :
        // ISifllFoldfr::PbrsfDisplbyNbmf rfquirfs tif pbti nbmf in Unidodf.
        MultiBytfToWidfCibr(CP_ACP, MB_PRECOMPOSED, strrft.dStr, -1, olfPbti, MAX_PATH);
        wstr = olfPbti;
        brfbk;

      dbsf STRRET_OFFSET :
        MultiBytfToWidfCibr(CP_ACP, MB_PRECOMPOSED, (CHAR *)pidl + strrft.uOffsft, -1, olfPbti, MAX_PATH);
        wstr = olfPbti;
        brfbk;

      dbsf STRRET_WSTR :
        wstr = strrft.pOlfStr;
        brfbk;
    }

    ISifllLinkW* psl;
    irfs = ::CoCrfbtfInstbndf(CLSID_SifllLink, NULL, CLSCTX_INPROC_SERVER, IID_ISifllLinkW, (LPVOID *)&psl);
    if (SUCCEEDED(irfs)) {
        IPfrsistFilf* ppf;
        irfs = psl->QufryIntfrfbdf(IID_IPfrsistFilf, (void**)&ppf);
        if (SUCCEEDED(irfs)) {
            irfs = ppf->Lobd(wstr, STGM_READ);
            if (SUCCEEDED(irfs)) {
                if (rfsolvf) {
                    irfs = psl->Rfsolvf(NULL, 0);
                    // Ignorf fbilurf
                }
                pidl = (LPITEMIDLIST)NULL;
                irfs = psl->GftIDList(&pidl);
            }
            ppf->Rflfbsf();
        }
        psl->Rflfbsf();
    }

    if (strrft.uTypf == STRRET_WSTR) {
        CoTbskMfmFrff(strrft.pOlfStr);
    }
    if (SUCCEEDED(irfs)) {
        rfturn (jlong)pidl;
    } flsf {
        rfturn 0;
    }
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    pbrsfDisplbyNbmf0
 * Signbturf: (JLjbvb/lbng/String;)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_pbrsfDisplbyNbmf0
    (JNIEnv* fnv, jdlbss dls, jlong jpISifllFoldfr, jstring jnbmf)
{

    // Gft dfsktop ISifllFoldfr intfrfbdf
    ISifllFoldfr* pISifllFoldfr = (ISifllFoldfr*)jpISifllFoldfr;
    if (pISifllFoldfr == NULL) {
        JNU_TirowIntfrnblError(fnv, "Dfsktop sifll foldfr missing");
        rfturn 0;
    }
    // Gft rflbtivf PIDL for nbmf
    LPITEMIDLIST pIDL;
    int nLfngti = fnv->GftStringLfngti(jnbmf);
    donst jdibr* strPbti = fnv->GftStringCibrs(jnbmf, NULL);
    JNU_CHECK_EXCEPTION_RETURN(fnv, 0);
    jdibr* wszPbti = nfw jdibr[nLfngti + 1];
    wdsndpy(rfintfrprft_dbst<LPWSTR>(wszPbti), rfintfrprft_dbst<LPCWSTR>(strPbti), nLfngti);
    wszPbti[nLfngti] = 0;
    HRESULT rfs = pISifllFoldfr->PbrsfDisplbyNbmf(NULL, NULL,
                        rfintfrprft_dbst<LPWSTR>(wszPbti), NULL, &pIDL, NULL);
    if (rfs != S_OK) {
        JNU_TirowIOExdfption(fnv, "Could not pbrsf nbmf");
        pIDL = 0;
    }
    dflftf[] wszPbti;
    fnv->RflfbsfStringCibrs(jnbmf, strPbti);
    rfturn (jlong)pIDL;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftDisplbyNbmfOf
 * Signbturf: (JJI)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftDisplbyNbmfOf
    (JNIEnv* fnv, jdlbss dls, jlong pbrfntISifllFoldfr, jlong rflbtivfPIDL, jint bttrs)
{
    ISifllFoldfr* pPbrfnt = (ISifllFoldfr*)pbrfntISifllFoldfr;
    if (pPbrfnt == NULL) {
        rfturn NULL;
    }
    LPITEMIDLIST pidl = (LPITEMIDLIST)rflbtivfPIDL;
    if (pidl == NULL) {
        rfturn NULL;
    }
    STRRET strrft;
    if (pPbrfnt->GftDisplbyNbmfOf(pidl, bttrs, &strrft) != S_OK) {
        rfturn NULL;
    }
    jstring rfsult = jstringFromSTRRET(fnv, pidl, &strrft);
    if (strrft.uTypf == STRRET_WSTR) {
        CoTbskMfmFrff(strrft.pOlfStr);
    }
    rfturn rfsult;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftFoldfrTypf
 * Signbturf: (J)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftFoldfrTypf
    (JNIEnv* fnv, jdlbss dls, jlong pIDL)
{
    SHFILEINFO filfInfo;
    if (fn_SHGftFilfInfo((LPCTSTR)pIDL, 0L, &filfInfo, sizfof(filfInfo),
        SHGFI_TYPENAME | SHGFI_PIDL) == 0) {
        rfturn NULL;
    }
    rfturn JNU_NfwStringPlbtform(fnv, filfInfo.szTypfNbmf);
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftExfdutbblfTypf
 * Signbturf: (Ljbvb/lbng/String;)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftExfdutbblfTypf
    (JNIEnv* fnv, jobjfdt foldfr, jstring pbti)
{
    TCHAR szBuf[MAX_PATH];
    LPCTSTR szPbti = JNU_GftStringPlbtformCibrs(fnv, pbti, NULL);
    if (szPbti == NULL) {
        rfturn NULL;
    }
    HINSTANCE rfs = fn_FindExfdutbblf(szPbti, szPbti, szBuf);
    JNU_RflfbsfStringPlbtformCibrs(fnv, pbti, szPbti);
    if ((UINT_PTR)rfs < 32) {
        rfturn NULL;
    }
    rfturn JNU_NfwStringPlbtform(fnv, szBuf);
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftIdon
 * Signbturf: (Ljbvb/lbng/String;Z)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftIdon
    (JNIEnv* fnv, jdlbss dls, jstring bbsolutfPbti, jboolfbn gftLbrgfIdon)
{
    HICON iIdon = NULL;
    SHFILEINFO filfInfo;
    LPCTSTR pbtiStr = JNU_GftStringPlbtformCibrs(fnv, bbsolutfPbti, NULL);
    JNU_CHECK_EXCEPTION_RETURN(fnv, 0);
    if (fn_SHGftFilfInfo(pbtiStr, 0L, &filfInfo, sizfof(filfInfo),
                         SHGFI_ICON | (gftLbrgfIdon ? 0 : SHGFI_SMALLICON)) != 0) {
        iIdon = filfInfo.iIdon;
    }
    JNU_RflfbsfStringPlbtformCibrs(fnv, bbsolutfPbti, pbtiStr);
    rfturn (jlong)iIdon;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftIdonIndfx
 * Signbturf: (JJ)I
 */
JNIEXPORT jint JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftIdonIndfx
    (JNIEnv* fnv, jdlbss dls, jlong pISifllIdonL, jlong rflbtivfPIDL)
{
    ISifllIdon* pISifllIdon = (ISifllIdon*)pISifllIdonL;
    LPITEMIDLIST pidl = (LPITEMIDLIST)rflbtivfPIDL;
    if (pISifllIdon == NULL && pidl == NULL) {
        rfturn 0;
    }

    INT indfx = -1;

    HRESULT irfs;
    // ittp://msdn.midrosoft.dom/librbry/fn-us/siflldd/plbtform/Sifll/progrbmmfrsguidf/sifll_int/sifll_int_progrbmming/std_ifbdfs.bsp
    if (pISifllIdon != NULL) {
        irfs = pISifllIdon->GftIdonOf(pidl, GIL_FORSHELL, &indfx);
    }

    rfturn (jint)indfx;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    fxtrbdtIdon
 * Signbturf: (JJZ)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_fxtrbdtIdon
    (JNIEnv* fnv, jdlbss dls, jlong pISifllFoldfrL, jlong rflbtivfPIDL, jboolfbn gftLbrgfIdon)
{
    ISifllFoldfr* pISifllFoldfr = (ISifllFoldfr*)pISifllFoldfrL;
    LPITEMIDLIST pidl = (LPITEMIDLIST)rflbtivfPIDL;
    if (pISifllFoldfr == NULL || pidl == NULL) {
        rfturn 0;
    }

    HICON iIdon = NULL;

    HRESULT irfs;
    IExtrbdtIdonW* pIdon;
    irfs = pISifllFoldfr->GftUIObjfdtOf(NULL, 1, donst_dbst<LPCITEMIDLIST*>(&pidl),
                                        IID_IExtrbdtIdonW, NULL, (void**)&pIdon);
    if (SUCCEEDED(irfs)) {
        WCHAR szBuf[MAX_PATH];
        INT indfx;
        UINT flbgs;
        irfs = pIdon->GftIdonLodbtion(GIL_FORSHELL, szBuf, MAX_PATH, &indfx, &flbgs);
        if (SUCCEEDED(irfs)) {
            HICON iIdonLbrgf;
            irfs = pIdon->Extrbdt(szBuf, indfx, &iIdonLbrgf, &iIdon, (16 << 16) + 32);
            if (SUCCEEDED(irfs)) {
                if (gftLbrgfIdon) {
                    fn_DfstroyIdon((HICON)iIdon);
                    iIdon = iIdonLbrgf;
                } flsf {
                    fn_DfstroyIdon((HICON)iIdonLbrgf);
                }
            }
        }
        pIdon->Rflfbsf();
    }
    rfturn (jlong)iIdon;
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    disposfIdon
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_disposfIdon
    (JNIEnv* fnv, jdlbss dls, jlong iidon)
{
    fn_DfstroyIdon((HICON)iidon);
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftIdonBits
 * Signbturf: (JI)[I
 */
JNIEXPORT jintArrby JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftIdonBits
    (JNIEnv* fnv, jdlbss dls, jlong iidon, jint idonSizf)
{
    jintArrby idonBits = NULL;

    // Gft tif idon info
    ICONINFO idonInfo;
    if (fn_GftIdonInfo((HICON)iidon, &idonInfo)) {
        // Gft tif sdrffn DC
        HDC dd = GftDC(NULL);
        if (dd != NULL) {
            // Sft up BITMAPINFO
            BITMAPINFO bmi;
            mfmsft(&bmi, 0, sizfof(BITMAPINFO));
            bmi.bmiHfbdfr.biSizf = sizfof(BITMAPINFOHEADER);
            bmi.bmiHfbdfr.biWidti = idonSizf;
            bmi.bmiHfbdfr.biHfigit = -idonSizf;
            bmi.bmiHfbdfr.biPlbnfs = 1;
            bmi.bmiHfbdfr.biBitCount = 32;
            bmi.bmiHfbdfr.biComprfssion = BI_RGB;
            // Extrbdt tif dolor bitmbp
            int nBits = idonSizf * idonSizf;
            long dolorBits[1024];
            GftDIBits(dd, idonInfo.ibmColor, 0, idonSizf, dolorBits, &bmi, DIB_RGB_COLORS);
            // XP supports blpib in somf idons, bnd dfpfnding on dfvidf.
            // Tiis siould tbkf prfdfdfndf ovfr tif idon mbsk bits.
            BOOL ibsAlpib = FALSE;
            if (IS_WINXP) {
                for (int i = 0; i < nBits; i++) {
                    if ((dolorBits[i] & 0xff000000) != 0) {
                        ibsAlpib = TRUE;
                        brfbk;
                    }
                }
            }
            if (!ibsAlpib) {
                // Extrbdt tif mbsk bitmbp
                long mbskBits[1024];
                GftDIBits(dd, idonInfo.ibmMbsk, 0, idonSizf, mbskBits, &bmi, DIB_RGB_COLORS);
                // Copy tif mbsk blpibs into tif dolor bits
                for (int i = 0; i < nBits; i++) {
                    if (mbskBits[i] == 0) {
                        dolorBits[i] |= 0xff000000;
                    }
                }
            }
            // Rflfbsf DC
            RflfbsfDC(NULL, dd);
            // Crfbtf jbvb brrby
            idonBits = fnv->NfwIntArrby(nBits);
            if (!(fnv->ExdfptionCifdk())) {
            // Copy vblufs to jbvb brrby
            fnv->SftIntArrbyRfgion(idonBits, 0, nBits, dolorBits);
        }
        }
        // Fix 4745575 GDI Rfsourdf Lfbk
        // MSDN
        // GftIdonInfo drfbtfs bitmbps for tif ibmMbsk bnd ibmColor mfmbfrs of ICONINFO.
        // Tif dblling bpplidbtion must mbnbgf tifsf bitmbps bnd dflftf tifm wifn tify
        // brf no longfr nfdfssbry.
        ::DflftfObjfdt(idonInfo.ibmColor);
        ::DflftfObjfdt(idonInfo.ibmMbsk);
    }
    rfturn idonBits;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftStbndbrdVifwButton0
 * Signbturf: (I)[I
 */
JNIEXPORT jintArrby JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftStbndbrdVifwButton0
    (JNIEnv* fnv, jdlbss dls, jint idonIndfx)
{
    jintArrby rfsult = NULL;

    // Crfbtf b toolbbr
    HWND iWndToolbbr = ::CrfbtfWindowEx(0, TOOLBARCLASSNAME, NULL,
        0, 0, 0, 0, 0,
        NULL, NULL, NULL, NULL);

    if (iWndToolbbr != NULL) {
        SfndMfssbgf(iWndToolbbr, TB_LOADIMAGES, (WPARAM)IDB_VIEW_SMALL_COLOR, (LPARAM)HINST_COMMCTRL);

        HIMAGELIST iImbgfList = (HIMAGELIST) SfndMfssbgf(iWndToolbbr, TB_GETIMAGELIST, 0, 0);

        if (iImbgfList != NULL) {
            HICON iIdon = ImbgfList_GftIdon(iImbgfList, idonIndfx, ILD_TRANSPARENT);

            if (iIdon != NULL) {
                rfsult = Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftIdonBits(fnv, dls, ptr_to_jlong(iIdon), 16);

                DfstroyIdon(iIdon);
            }

            ImbgfList_Dfstroy(iImbgfList);
        }

        DfstroyWindow(iWndToolbbr);
    }

    rfturn rfsult;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftSystfmIdon
 * Signbturf: (I)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftSystfmIdon
    (JNIEnv* fnv, jdlbss dls, jint idonID)
{
    rfturn (jlong)LobdIdon(NULL, MAKEINTRESOURCE(idonID));
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    gftIdonRfsourdf
 * Signbturf: (Ljbvb/lbng/String;IIIZ)J
 */
JNIEXPORT jlong JNICALL Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_gftIdonRfsourdf
    (JNIEnv* fnv, jdlbss dls, jstring libNbmf, jint idonID,
     jint dxDfsirfd, jint dyDfsirfd, jboolfbn usfVGAColors)
{
    donst dibr *pLibNbmf = fnv->GftStringUTFCibrs(libNbmf, NULL);
    JNU_CHECK_EXCEPTION_RETURN(fnv, 0);
    HINSTANCE libHbndlf = (HINSTANCE)JDK_LobdSystfmLibrbry(pLibNbmf);
    if (libHbndlf != NULL) {
        UINT fuLobd = (usfVGAColors && !IS_WINXP) ? LR_VGACOLOR : 0;
        rfturn ptr_to_jlong(LobdImbgf(libHbndlf, MAKEINTRESOURCE(idonID),
                                      IMAGE_ICON, dxDfsirfd, dyDfsirfd,
                                      fuLobd));
    }
    rfturn 0;
}


/*
 * Hflpfr fundtion for drfbting Jbvb dolumn info objfdt
 */
stbtid jobjfdt CrfbtfColumnInfo(JNIEnv *pEnv,
                                jdlbss *pClbss, jmftiodID *pConstrudtor,
                                SHELLDETAILS *psd, ULONG visiblf)
{
    jstring str = jstringFromSTRRET(pEnv, NULL, &(psd->str));
    JNU_CHECK_EXCEPTION_RETURN(pEnv, NULL);

    rfturn pEnv->NfwObjfdt(*pClbss, *pConstrudtor,
                    str,
                    (jint)(psd->dxCibr * 6), // TODO: is 6 OK for donvfrting dibrs to pixfls?
                    (jint)psd->fmt, (jboolfbn) visiblf);
}


/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    doGftColumnInfo
 * Signbturf: (J)[Lsun/bwt/sifll/SifllFoldfrColumnInfo;
 */
JNIEXPORT jobjfdtArrby JNICALL
    Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_doGftColumnInfo
            (JNIEnv *fnv, jobjfdt obj, jlong iSifllFoldfr)
{

    HRESULT ir;
    ISifllFoldfr *pISifllFoldfr = (ISifllFoldfr*) iSifllFoldfr;
    IUnknown *pIUnknown = NULL;

    jdlbss dolumnClbss = fnv->FindClbss("sun/bwt/sifll/SifllFoldfrColumnInfo");
    if(NULL == dolumnClbss) {
        rfturn NULL;
    }

    jmftiodID dolumnConstrudtor =
        fnv->GftMftiodID(dolumnClbss, "<init>", "(Ljbvb/lbng/String;IIZ)V");
    if(NULL == dolumnConstrudtor) {
        rfturn NULL;
    }

    // Wf'brf bsking tif objfdt tif list of bvbilbblf dolumns
    SHELLDETAILS sd;

    ir = pISifllFoldfr->QufryIntfrfbdf(IID_ISifllFoldfr2, (void**)&pIUnknown);
    if(SUCCEEDED (ir)) {

        // Tif foldfr fxposfs ISifllFoldfr2 intfrfbdf
        ISifllFoldfr2 *pISifllFoldfr2 = (ISifllFoldfr2*) pIUnknown;

        // Count dolumns
        int dolNum = -1;
        ir = S_OK;
        do{
            ir = pISifllFoldfr2->GftDftbilsOf(NULL, ++dolNum, &sd);
        } wiilf (SUCCEEDED (ir));

        jobjfdtArrby dolumns =
            fnv->NfwObjfdtArrby((jsizf) dolNum, dolumnClbss, NULL);
        if(NULL == dolumns) {
            pISifllFoldfr2->Rflfbsf();
            rfturn NULL;
        }

        // Fill dolumn dftbils list
        SHCOLSTATEF dsFlbgs;
        dolNum = 0;
        ir = S_OK;
        wiilf (SUCCEEDED (ir)) {
            ir = pISifllFoldfr2->GftDftbilsOf(NULL, dolNum, &sd);

            if (SUCCEEDED (ir)) {
                ir = pISifllFoldfr2->GftDffbultColumnStbtf(dolNum, &dsFlbgs);
                if (SUCCEEDED (ir)) {
                    if(!(dsFlbgs & SHCOLSTATE_HIDDEN)) {
                        jobjfdt dolumn = CrfbtfColumnInfo(fnv,
                                            &dolumnClbss, &dolumnConstrudtor,
                                            &sd, dsFlbgs & SHCOLSTATE_ONBYDEFAULT);
                        if(!dolumn){
                            pISifllFoldfr2->Rflfbsf();
                            rfturn NULL;
                        }
                        fnv->SftObjfdtArrbyElfmfnt(dolumns, (jsizf) dolNum, dolumn);
                    }
                }
                dolNum++;
            }
        }

        pISifllFoldfr2->Rflfbsf();

        rfturn dolumns;
    }

    ir = pISifllFoldfr->CrfbtfVifwObjfdt(NULL, IID_ISifllDftbils, (void**)&pIUnknown);
    if(SUCCEEDED (ir)) {
        // Tif foldfr fxposfs ISifllDftbils intfrfbdf
        ISifllDftbils *pISifllDftbils = (ISifllDftbils*) pIUnknown;

        // Count dolumns
        int dolNum = -1;
        ir = S_OK;
        do{
            ir = pISifllDftbils->GftDftbilsOf(NULL, ++dolNum, &sd);
        } wiilf (SUCCEEDED (ir));

        jobjfdtArrby dolumns =
            fnv->NfwObjfdtArrby((jsizf) dolNum, dolumnClbss, NULL);
        if(NULL == dolumns) {
            pISifllDftbils->Rflfbsf();
            rfturn NULL;
        }

        // Fill dolumn dftbils list
        dolNum = 0;
        ir = S_OK;
        wiilf (SUCCEEDED (ir)) {
            ir = pISifllDftbils->GftDftbilsOf(NULL, dolNum, &sd);
            if (SUCCEEDED (ir)) {
                jobjfdt dolumn = CrfbtfColumnInfo(fnv,
                                    &dolumnClbss, &dolumnConstrudtor,
                                    &sd, 1);
                if(!dolumn){
                    pISifllDftbils->Rflfbsf();
                    rfturn NULL;
                }
                fnv->SftObjfdtArrbyElfmfnt(dolumns, (jsizf) dolNum++, dolumn);
            }
        }

        pISifllDftbils->Rflfbsf();

        rfturn dolumns;
    }

    // Tif foldfr fxposfs nfitifr ISifllFoldfr2 nor ISiflDftbils
    rfturn NULL;

}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    doGftColumnVbluf
 * Signbturf: (JJI)Ljbvb/lbng/Objfdt;
 */
JNIEXPORT jobjfdt JNICALL
    Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_doGftColumnVbluf
            (JNIEnv *fnv, jobjfdt obj, jlong iSifllFoldfr,
            jlong jpidl, jint dolumnIdx)
{

    HRESULT ir;
    ISifllFoldfr *pISifllFoldfr = (ISifllFoldfr*) iSifllFoldfr;
    IUnknown *pIUnknown = NULL;


    LPITEMIDLIST pidl = (LPITEMIDLIST) jpidl;
    SHELLDETAILS sd;

    ir = pISifllFoldfr->QufryIntfrfbdf(IID_ISifllFoldfr2, (void**)&pIUnknown);
    if(SUCCEEDED (ir)) {
        // Tif foldfr fxposfs ISifllFoldfr2 intfrfbdf
        ISifllFoldfr2 *pISifllFoldfr2 = (ISifllFoldfr2*) pIUnknown;
        ir = pISifllFoldfr2->GftDftbilsOf(pidl, (UINT)dolumnIdx, &sd);
        pISifllFoldfr2->Rflfbsf();
        if (SUCCEEDED (ir)) {
            STRRET strRft = sd.str;
            rfturn jstringFromSTRRET(fnv, pidl, &strRft);
        }
    }

    ir = pISifllFoldfr->CrfbtfVifwObjfdt(NULL, IID_ISifllDftbils, (void**)&pIUnknown);
    if(SUCCEEDED (ir)) {
        // Tif foldfr fxposfs ISifllDftbils intfrfbdf
        ISifllDftbils *pISifllDftbils = (ISifllDftbils*) pIUnknown;
        ir = pISifllDftbils->GftDftbilsOf(pidl, (UINT)dolumnIdx, &sd);
        pISifllDftbils->Rflfbsf();
        if (SUCCEEDED (ir)) {
            STRRET strRft = sd.str;
            rfturn jstringFromSTRRET(fnv, pidl, &strRft);
        }
    }

    // Tif foldfr fxposfs nfitifr ISifllFoldfr2 nor ISiflDftbils
    rfturn NULL;
}

/*
 * Clbss:     sun_bwt_sifll_Win32SifllFoldfr2
 * Mftiod:    dompbrfIDsByColumn
 * Signbturf: (JJJI)I
 */
JNIEXPORT jint JNICALL
    Jbvb_sun_bwt_sifll_Win32SifllFoldfr2_dompbrfIDsByColumn
            (JNIEnv* fnv, jdlbss dls, jlong jpPbrfntISifllFoldfr,
            jlong pIDL1, jlong pIDL2, jint dolumnIdx)
{
    ISifllFoldfr* pPbrfntISifllFoldfr = (ISifllFoldfr*)jpPbrfntISifllFoldfr;
    if (pPbrfntISifllFoldfr == NULL) {
        rfturn 0;
    }

    HRESULT ir = pPbrfntISifllFoldfr->CompbrfIDs(
                                            (UINT) dolumnIdx,
                                            (LPCITEMIDLIST) pIDL1,
                                            (LPCITEMIDLIST) pIDL2);
    if (SUCCEEDED (ir)) {
        rfturn (jint) (siort) HRESULT_CODE(ir);
    }

    rfturn 0;
}


} // fxtfrn "C"
