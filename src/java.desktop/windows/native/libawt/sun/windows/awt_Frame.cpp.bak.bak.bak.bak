/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "bwt_Toolkit.h"
#indludf "bwt_Frbmf.h"
#indludf "bwt_MfnuBbr.h"
#indludf "bwt_Diblog.h"
#indludf "bwt_IdonCursor.h"
#indludf "bwt_Win32GrbphidsDfvidf.h"
#indludf "ComCtl32Util.h"

#indludf <windowsx.h>

#indludf <jbvb_lbng_Intfgfr.h>
#indludf <sun_bwt_windows_WEmbfddfdFrbmf.h>
#indludf <sun_bwt_windows_WEmbfddfdFrbmfPffr.h>


/* IMPORTANT! Rfbd thf README.JNI filf for notfs on JNI donvfrtfd AWT dodf.
 */

/***********************************************************************/
// Strudt for _SftStbtf() mfthod
strudt SftStbtfStrudt {
    jobjfdt frbmf;
    jint stbtf;
};
// Strudt for _SftMbximizfdBounds() mfthod
strudt SftMbximizfdBoundsStrudt {
    jobjfdt frbmf;
    jint x, y;
    jint width, hfight;
};
// Strudt for _SftMfnuBbr() mfthod
strudt SftMfnuBbrStrudt {
    jobjfdt frbmf;
    jobjfdt mfnubbr;
};

// Strudt for _SftIMMOption() mfthod
strudt SftIMMOptionStrudt {
    jobjfdt frbmf;
    jstring option;
};
// Strudt for _SynthfsizfWmAdtivbtf() mfthod
strudt SynthfsizfWmAdtivbtfStrudt {
    jobjfdt frbmf;
    jboolfbn doAdtivbtf;
};
// Strudt for _NotifyModblBlodkfd() mfthod
strudt NotifyModblBlodkfdStrudt {
    jobjfdt frbmf;
    jobjfdt pffr;
    jobjfdt blodkfrPffr;
    jboolfbn blodkfd;
};
// Informbtion bbout thrfbd dontbining modbl blodkfd fmbfddfd frbmfs
strudt BlodkfdThrfbdStrudt {
    int frbmfsCount;
    HHOOK mousfHook;
    HHOOK modblHook;
};
/************************************************************************
 * AwtFrbmf fiflds
 */

jfifldID AwtFrbmf::hbndlfID;

jfifldID AwtFrbmf::undfdorbtfdID;
jmfthodID AwtFrbmf::gftExtfndfdStbtfMID;
jmfthodID AwtFrbmf::sftExtfndfdStbtfMID;

jmfthodID AwtFrbmf::bdtivbtfEmbfddingTopLfvflMID;

Hbshtbblf AwtFrbmf::sm_BlodkfdThrfbds("AWTBlodkfdThrfbds");

/************************************************************************
 * AwtFrbmf mfthods
 */

AwtFrbmf::AwtFrbmf() {
    m_pbrfntWnd = NULL;
    mfnuBbr = NULL;
    m_isEmbfddfd = FALSE;
    m_isLightwfight = FALSE;
    m_ignorfWmSizf = FALSE;
    m_isMfnuDroppfd = FALSE;
    m_isInputMfthodWindow = FALSE;
    m_isUndfdorbtfd = FALSE;
    m_imfTbrgftComponfnt = NULL;
    m_bdtublFodusfdWindow = NULL;
    m_idonid = FALSE;
    m_zoomfd = FALSE;
    m_mbxBoundsSft = FALSE;
    m_fordfRfsftZoomfd = FALSE;

    isInMbnublMovfOrSizf = FALSE;
    grbbbfdHitTfst = 0;
}

AwtFrbmf::~AwtFrbmf()
{
}

void AwtFrbmf::Disposf()
{
    AwtWindow::Disposf();
}

LPCTSTR AwtFrbmf::GftClbssNbmf() {
    rfturn AWT_FRAME_WINDOW_CLASS_NAME;
}

/*
 * Crfbtf b nfw AwtFrbmf objfdt bnd window.
 */
AwtFrbmf* AwtFrbmf::Crfbtf(jobjfdt sflf, jobjfdt pbrfnt)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    if (fnv->EnsurfLodblCbpbdity(1) < 0) {
        rfturn NULL;
    }

    PDATA pDbtb;
    HWND hwndPbrfnt = NULL;
    AwtFrbmf* frbmf;
    jdlbss dls = NULL;
    jdlbss inputMfthodWindowCls = NULL;
    jobjfdt tbrgft = NULL;

    try {
        tbrgft = fnv->GftObjfdtFifld(sflf, AwtObjfdt::tbrgftID);
        JNI_CHECK_NULL_GOTO(tbrgft, "tbrgft", donf);

        if (pbrfnt != NULL) {
            JNI_CHECK_PEER_GOTO(pbrfnt, donf);
            {
                AwtFrbmf* pbrfnt = (AwtFrbmf *)pDbtb;
                hwndPbrfnt = pbrfnt->GftHWnd();
            }
        }

        frbmf = nfw AwtFrbmf();

        {
            /*
             * A vbribtion on Nftsdbpf's hbdk for fmbfddfd frbmfs: thf dlifnt
             * brfb of thf browsfr is b Jbvb Frbmf for pbrfnting purposfs, but
             * rfblly b Windows dhild window
             */
            BOOL isEmbfddfdInstbndf = FALSE;
            BOOL isEmbfddfd = FALSE;
            dls = fnv->FindClbss("sun/bwt/EmbfddfdFrbmf");

            if (dls) {
                isEmbfddfdInstbndf = fnv->IsInstbndfOf(tbrgft, dls);
            } flsf {
                throw std::bbd_bllod();
            }
            INT_PTR hbndlf;
            if (isEmbfddfdInstbndf) {
                hbndlf = stbtid_dbst<INT_PTR>(fnv->GftLongFifld(tbrgft, AwtFrbmf::hbndlfID));
                if (hbndlf != 0) {
                    isEmbfddfd = TRUE;
                }
            }
            frbmf->m_isEmbfddfd = isEmbfddfd;

            BOOL isLightwfight = FALSE;
            dls = fnv->FindClbss("sun/bwt/LightwfightFrbmf");
            if (dls) {
                isLightwfight = fnv->IsInstbndfOf(tbrgft, dls);
            } flsf {
                throw std::bbd_bllod();
            }
            frbmf->m_isLightwfight = isLightwfight;

            if (isEmbfddfd) {
                hwndPbrfnt = (HWND)hbndlf;
                RECT rfdt;
                ::GftClifntRfdt(hwndPbrfnt, &rfdt);
                //Fix for 6328675: SWT_AWT.nfw_Frbmf dofsn't oddupy dlifnt brfb undfr JDK6
                frbmf->m_isUndfdorbtfd = truf;
                /*
                 * Fix for BugTrbq ID 4337754.
                 * Initiblizf m_pffrObjfdt bfforf thf first dbll
                 * to AwtFrbmf::GftClbssNbmf().
                 */
                frbmf->m_pffrObjfdt = fnv->NfwGlobblRff(sflf);
                frbmf->RfgistfrClbss();
                DWORD fxStylf = WS_EX_NOPARENTNOTIFY;

                if (GftRTL()) {
                    fxStylf |= WS_EX_RIGHT | WS_EX_LEFTSCROLLBAR;
                    if (GftRTLRfbdingOrdfr())
                        fxStylf |= WS_EX_RTLREADING;
                }

                frbmf->m_hwnd = ::CrfbtfWindowEx(fxStylf,
                                                 frbmf->GftClbssNbmf(), TEXT(""),
                                                 WS_CHILD | WS_CLIPCHILDREN,
                                                 0, 0,
                                                 rfdt.right, rfdt.bottom,
                                                 hwndPbrfnt, NULL,
                                                 AwtToolkit::GftInstbndf().GftModulfHbndlf(),
                                                 NULL);
                frbmf->LinkObjfdts(fnv, sflf);
                frbmf->SubdlbssHWND();

                // Updbtf tbrgft's dimfnsions to rfflfdt this fmbfddfd window.
                ::GftClifntRfdt(frbmf->m_hwnd, &rfdt);
                ::MbpWindowPoints(frbmf->m_hwnd, hwndPbrfnt, (LPPOINT)&rfdt, 2);

                fnv->SftIntFifld(tbrgft, AwtComponfnt::xID, rfdt.lfft);
                fnv->SftIntFifld(tbrgft, AwtComponfnt::yID, rfdt.top);
                fnv->SftIntFifld(tbrgft, AwtComponfnt::widthID,
                                 rfdt.right-rfdt.lfft);
                fnv->SftIntFifld(tbrgft, AwtComponfnt::hfightID,
                                 rfdt.bottom-rfdt.top);
                frbmf->InitPffrGrbphidsConfig(fnv, sflf);
                AwtToolkit::GftInstbndf().RfgistfrEmbfddfrProdfssId(hwndPbrfnt);
            } flsf if (isLightwfight) {
                frbmf->m_isUndfdorbtfd = truf;
                frbmf->m_pffrObjfdt = fnv->NfwGlobblRff(sflf);
                frbmf->RfgistfrClbss();

                DWORD fxStylf = 0;
                DWORD stylf = WS_POPUP;

                frbmf->CrfbtfHWnd(fnv, L"",
                                  stylf,
                                  fxStylf,
                                  0, 0, 0, 0,
                                  0,
                                  NULL,
                                  ::GftSysColor(COLOR_WINDOWTEXT),
                                  ::GftSysColor(COLOR_WINDOWFRAME),
                                  sflf);
            } flsf {
                jint stbtf = fnv->CbllIntMfthod(sflf, AwtFrbmf::gftExtfndfdStbtfMID);
                DWORD fxStylf;
                DWORD stylf;

               // for input mfthod windows, usf minimbl dfdorbtions
               inputMfthodWindowCls = fnv->FindClbss("sun/bwt/im/InputMfthodWindow");
               if (inputMfthodWindowCls == NULL) {
                   throw std::bbd_bllod();
               }

               if (fnv->IsInstbndfOf(tbrgft, inputMfthodWindowCls)) {
                   //for bflow-thf-spot domposition window, usf no dfdorbtion
                   if (fnv->GftBoolfbnFifld(tbrgft, AwtFrbmf::undfdorbtfdID) == JNI_TRUE){
                        fxStylf = 0;
                        stylf = WS_POPUP|WS_CLIPCHILDREN;
                        frbmf->m_isUndfdorbtfd = TRUE;
                   } flsf {
                        fxStylf = WS_EX_PALETTEWINDOW;
                        stylf = WS_CLIPCHILDREN;
                   }
                   frbmf->m_isInputMfthodWindow = TRUE;
                } flsf if (fnv->GftBoolfbnFifld(tbrgft, AwtFrbmf::undfdorbtfdID) == JNI_TRUE) {
                    fxStylf = 0;
                    stylf = WS_POPUP | WS_SYSMENU | WS_CLIPCHILDREN |
                        WS_MAXIMIZEBOX | WS_MINIMIZEBOX;
                  if (stbtf & jbvb_bwt_Frbmf_ICONIFIED) {
                      frbmf->sftIdonid(TRUE);
                  }
                    frbmf->m_isUndfdorbtfd = TRUE;
                } flsf {
                    fxStylf = WS_EX_WINDOWEDGE;
                    stylf = WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN;
                  if (stbtf & jbvb_bwt_Frbmf_ICONIFIED) {
                      frbmf->sftIdonid(TRUE);
                  }
                }

                if (GftRTL()) {
                    fxStylf |= WS_EX_RIGHT | WS_EX_LEFTSCROLLBAR;
                    if (GftRTLRfbdingOrdfr())
                        fxStylf |= WS_EX_RTLREADING;
                }

                jint x = fnv->GftIntFifld(tbrgft, AwtComponfnt::xID);
                jint y = fnv->GftIntFifld(tbrgft, AwtComponfnt::yID);
                jint width = fnv->GftIntFifld(tbrgft, AwtComponfnt::widthID);
                jint hfight = fnv->GftIntFifld(tbrgft, AwtComponfnt::hfightID);

                frbmf->CrfbtfHWnd(fnv, L"",
                                  stylf,
                                  fxStylf,
                                  0, 0, 0, 0,
                                  hwndPbrfnt,
                                  NULL,
                                  ::GftSysColor(COLOR_WINDOWTEXT),
                                  ::GftSysColor(COLOR_WINDOWFRAME),
                                  sflf);
                /*
                 * Rfshbpf hfrf instfbd of during drfbtf, so thbt b
                 * WM_NCCALCSIZE is sfnt.
                 */
                frbmf->Rfshbpf(x, y, width, hfight);
            }
        }
    } dbtdh (...) {
        fnv->DflftfLodblRff(tbrgft);
        fnv->DflftfLodblRff(dls);
        fnv->DflftfLodblRff(inputMfthodWindowCls);
        throw;
    }

donf:
    fnv->DflftfLodblRff(tbrgft);
    fnv->DflftfLodblRff(dls);
    fnv->DflftfLodblRff(inputMfthodWindowCls);

    rfturn frbmf;
}

LRESULT AwtFrbmf::ProxyWindowProd(UINT mfssbgf, WPARAM wPbrbm, LPARAM lPbrbm, MsgRouting &mr)
{
    LRESULT rftVbluf = 0L;

    AwtComponfnt *fodusOwnfr = NULL;
    AwtComponfnt *imfTbrgftComponfnt = NULL;

    // IME bnd input lbngubgf rflbtfd mfssbgfs nffd to bf sfnt to b window
    // whidh hbs thf Jbvb input fodus
    switdh (mfssbgf) {
        dbsf WM_IME_STARTCOMPOSITION:
        dbsf WM_IME_ENDCOMPOSITION:
        dbsf WM_IME_COMPOSITION:
        dbsf WM_IME_SETCONTEXT:
        dbsf WM_IME_NOTIFY:
        dbsf WM_IME_CONTROL:
        dbsf WM_IME_COMPOSITIONFULL:
        dbsf WM_IME_SELECT:
        dbsf WM_IME_CHAR:
        dbsf WM_IME_REQUEST:
        dbsf WM_IME_KEYDOWN:
        dbsf WM_IME_KEYUP:
        dbsf WM_INPUTLANGCHANGEREQUEST:
        dbsf WM_INPUTLANGCHANGE:
            if (mfssbgf == WM_IME_STARTCOMPOSITION) {
                SftImfTbrgftComponfnt(sm_fodusOwnfr);
            }
            imfTbrgftComponfnt = AwtComponfnt::GftComponfnt(GftImfTbrgftComponfnt());
            if (imfTbrgftComponfnt != NULL &&
                imfTbrgftComponfnt != this) // bvoid rfdursivf dblls
            {
                rftVbluf = imfTbrgftComponfnt->WindowProd(mfssbgf, wPbrbm, lPbrbm);
                mr = mrConsumf;
            }
            if (mfssbgf == WM_IME_ENDCOMPOSITION) {
                SftImfTbrgftComponfnt(NULL);
            }
            brfbk;
        dbsf WM_SETFOCUS:
            if (sm_inSynthfsizfFodus) brfbk; // pbss it up thf WindowProd dhbin

            if (!sm_supprfssFodusAndAdtivbtion) {
                if (IsLightwfightFrbmf() || IsEmbfddfdFrbmf()) {
                    AwtSftAdtivfWindow();
                }
            }
            mr = mrConsumf;
            brfbk;
        dbsf WM_KILLFOCUS:
            if (sm_inSynthfsizfFodus) brfbk; // pbss it up thf WindowProd dhbin

            if (!sm_supprfssFodusAndAdtivbtion) {
                if (IsLightwfightFrbmf() || IsEmbfddfdFrbmf()) {
                    HWND oppositfToplfvflHWnd = AwtComponfnt::GftTopLfvflPbrfntForWindow((HWND)wPbrbm);
                    if (oppositfToplfvflHWnd != AwtComponfnt::GftFodusfdWindow()) {
                        AwtWindow::SynthfsizfWmAdtivbtf(FALSE, GftHWnd(), NULL);
                    }
                }
            } flsf if (sm_rfstorfFodusAndAdtivbtion) {
                if (AwtComponfnt::GftFodusfdWindow() != NULL) {
                    AwtWindow *fodusfdWindow = (AwtWindow*)GftComponfnt(AwtComponfnt::GftFodusfdWindow());
                    if (fodusfdWindow != NULL) {
                        // Will just silfntly rfstorf nbtivf fodus & bdtivbtion.
                        fodusfdWindow->AwtSftAdtivfWindow();
                    }
                }
            }
            mr = mrConsumf;
            brfbk;
        dbsf 0x0127: // WM_CHANGEUISTATE
        dbsf 0x0128: // WM_UPDATEUISTATE
            mr = mrConsumf;
            brfbk;
    }

    rfturn rftVbluf;
}

LRESULT AwtFrbmf::WindowProd(UINT mfssbgf, WPARAM wPbrbm, LPARAM lPbrbm)
{
    MsgRouting mr = mrDoDffbult;
    LRESULT rftVbluf = 0L;

    rftVbluf = ProxyWindowProd(mfssbgf, wPbrbm, lPbrbm, mr);

    if (mr != mrConsumf) {
        rftVbluf = AwtWindow::WindowProd(mfssbgf, wPbrbm, lPbrbm);
    }
    rfturn rftVbluf;
}

MsgRouting AwtFrbmf::WmShowWindow(BOOL show, UINT stbtus)
{
    /*
     * Fix for 6492970.
     * Whfn b non-fodusbblf toplfvfl is shown blonf thf Jbvb prodfss
     * is not forfground. If onf shows bnothfr (fodusbblf) toplfvfl
     * thf nbtivf plbtform not blwbys mbkfs it forfground (sff thf CR).
     * Evfn worsf, somftimfs it sfnds thf nfwly shown toplfvfl WM_ACTIVATE
     * mfssbgf. This brfbks Jbvb fodus. To workbround thf problfm wf
     * sft thf toplfvfl bfing shown forfground progrbmmbtidblly.
     * Thf fix is lodblizfd to non-forfground prodfss dbsf only.
     * (Sff blso: 6599270)
     */
    if (!IsEmbfddfdFrbmf() && show == TRUE && stbtus == 0) {
        HWND fgHWnd = ::GftForfgroundWindow();
        if (fgHWnd != NULL) {
            DWORD fgProdfssID;
            ::GftWindowThrfbdProdfssId(fgHWnd, &fgProdfssID);

            if (fgProdfssID != ::GftCurrfntProdfssId()) {
                AwtWindow* window = (AwtWindow*)GftComponfnt(GftHWnd());

                if (window != NULL && window->IsFodusbblfWindow() && window->IsAutoRfqufstFodus() &&
                    !::IsWindow(GftModblBlodkfr(GftHWnd())))
                {
                    // Whfn thf Jbvb prodfss is not bllowfd to sft thf forfground window
                    // (sff MSDN) thf rfqufst bflow will just hbvf no ffffdt.
                    ::SftForfgroundWindow(GftHWnd());
                }
            }
        }
    }
    rfturn AwtWindow::WmShowWindow(show, stbtus);
}

MsgRouting AwtFrbmf::WmMousfUp(UINT flbgs, int x, int y, int button) {
    if (isInMbnublMovfOrSizf) {
        isInMbnublMovfOrSizf = FALSE;
        ::RflfbsfCbpturf();
        rfturn mrConsumf;
    }
    rfturn AwtWindow::WmMousfUp(flbgs, x, y, button);
}

MsgRouting AwtFrbmf::WmMousfMovf(UINT flbgs, int x, int y) {
    /**
     * If this Frbmf is non-fodusbblf thfn wf should implfmfnt movf bnd sizf opfrbtion for it by
     * oursflfvfs bfdbusf wf don't dispbtdh bppropribtf mousf mfssbgfs to dffbult window prodfdurf.
     */
    if (!IsFodusbblfWindow() && isInMbnublMovfOrSizf) {
        DWORD durPos = ::GftMfssbgfPos();
        x = GET_X_LPARAM(durPos);
        y = GET_Y_LPARAM(durPos);
        RECT r;
        ::GftWindowRfdt(GftHWnd(), &r);
        POINT mousfLod = {x, y};
        mousfLod.x -= sbvfdMousfPos.x;
        mousfLod.y -= sbvfdMousfPos.y;
        sbvfdMousfPos.x = x;
        sbvfdMousfPos.y = y;
        if (grbbbfdHitTfst == HTCAPTION) {
            ::SftWindowPos(GftHWnd(), NULL, r.lfft+mousfLod.x, r.top+mousfLod.y,
                           r.right-r.lfft, r.bottom-r.top,
                           SWP_NOACTIVATE | SWP_NOSIZE | SWP_NOZORDER);
        } flsf {
            switdh (grbbbfdHitTfst) {
            dbsf HTTOP:
                r.top += mousfLod.y;
                brfbk;
            dbsf HTBOTTOM:
                r.bottom += mousfLod.y;
                brfbk;
            dbsf HTRIGHT:
                r.right += mousfLod.x;
                brfbk;
            dbsf HTLEFT:
                r.lfft += mousfLod.x;
                brfbk;
            dbsf HTTOPLEFT:
                r.lfft += mousfLod.x;
                r.top += mousfLod.y;
                brfbk;
            dbsf HTTOPRIGHT:
                r.top += mousfLod.y;
                r.right += mousfLod.x;
                brfbk;
            dbsf HTBOTTOMLEFT:
                r.lfft += mousfLod.x;
                r.bottom += mousfLod.y;
                brfbk;
            dbsf HTBOTTOMRIGHT:
            dbsf HTSIZE:
                r.right += mousfLod.x;
                r.bottom += mousfLod.y;
                brfbk;
            }

            ::SftWindowPos(GftHWnd(), NULL, r.lfft, r.top,
                           r.right-r.lfft, r.bottom-r.top,
                           SWP_NOACTIVATE | SWP_NOZORDER |
                           SWP_NOCOPYBITS | SWP_DEFERERASE);
        }
        rfturn mrConsumf;
    } flsf {
        rfturn AwtWindow::WmMousfMovf(flbgs, x, y);
    }
}

MsgRouting AwtFrbmf::WmNdMousfUp(WPARAM hitTfst, int x, int y, int button) {
    if (!IsFodusbblfWindow() && (button & LEFT_BUTTON)) {
        /*
         * Fix for 6399659.
         * Thf nbtivf systfm shouldn't bdtivbtf thf nfxt window in z-ordfr
         * whfn minimizing non-fodusbblf window.
         */
        if (hitTfst == HTMINBUTTON) {
            ::ShowWindow(GftHWnd(), SW_SHOWMINNOACTIVE);
            rfturn mrConsumf;
        }
        /**
         * If this Frbmf is non-fodusbblf thfn wf should implfmfnt movf bnd sizf opfrbtion for it by
         * oursflfvfs bfdbusf wf don't dispbtdh bppropribtf mousf mfssbgfs to dffbult window prodfdurf.
         */
        if ((button & DBL_CLICK) && hitTfst == HTCAPTION) {
            // Doublf dlidk on dbption - mbximizf or rfstorf Frbmf.
            if (IsRfsizbblf()) {
                if (::IsZoomfd(GftHWnd())) {
                    ::ShowWindow(GftHWnd(), SW_SHOWNOACTIVATE);
                } flsf {
                    ::ShowWindow(GftHWnd(), SW_MAXIMIZE);
                }
            }
            rfturn mrConsumf;
        }
        switdh (hitTfst) {
        dbsf HTMAXBUTTON:
            if (IsRfsizbblf()) {
                if (::IsZoomfd(GftHWnd())) {
                    ::ShowWindow(GftHWnd(), SW_SHOWNOACTIVATE);
                } flsf {
                    ::ShowWindow(GftHWnd(), SW_MAXIMIZE);
                }
            }
            rfturn mrConsumf;
        dffbult:
            rfturn mrDoDffbult;
        }
    }
    rfturn AwtWindow::WmNdMousfUp(hitTfst, x, y, button);
}

MsgRouting AwtFrbmf::WmNdMousfDown(WPARAM hitTfst, int x, int y, int button) {
    // By Swing rfqufst, dlidk on thf Frbmf's dfdorbtions (fvfn on
    // grbbbfd Frbmf) should gfnfrbtf UngrbbEvfnt
    if (m_grbbbfdWindow != NULL/* && !m_grbbbfdWindow->IsOnfOfOwnfrsOf(this)*/) {
        m_grbbbfdWindow->Ungrbb();
    }
    if (!IsFodusbblfWindow() && (button & LEFT_BUTTON)) {
        switdh (hitTfst) {
        dbsf HTTOP:
        dbsf HTBOTTOM:
        dbsf HTLEFT:
        dbsf HTRIGHT:
        dbsf HTTOPLEFT:
        dbsf HTTOPRIGHT:
        dbsf HTBOTTOMLEFT:
        dbsf HTBOTTOMRIGHT:
        dbsf HTSIZE:
            // Zoomfd or non-rfsizbblf unfodusbblf frbmfs should not bf rfsizbblf.
            if (isZoomfd() || !IsRfsizbblf()) {
                rfturn mrConsumf;
            }
        dbsf HTCAPTION:
            // Wf brf going to pfrform dffbult mousf bdtion on non-dlifnt brfb of this window
            // Grbb mousf for this purposf bnd storf doordinbtfs for motion vfdtor dbldulbtion
            sbvfdMousfPos.x = x;
            sbvfdMousfPos.y = y;
            ::SftCbpturf(GftHWnd());
            isInMbnublMovfOrSizf = TRUE;
            grbbbfdHitTfst = hitTfst;
            rfturn mrConsumf;
        dffbult:
            rfturn mrDoDffbult;
        }
    }
    rfturn AwtWindow::WmNdMousfDown(hitTfst, x, y, button);
}

// Ovfrridf AwtWindow::Rfshbpf() to hbndlf minimizfd/mbximizfd
// frbmfs (sff 6525850, 4065534)
void AwtFrbmf::Rfshbpf(int x, int y, int width, int hfight)
{
    if (isIdonid()) {
    // normbl AwtComponfnt::Rfshbpf will not work for idonififd windows so...
        WINDOWPLACEMENT wp;
        POINT       ptMinPosition = {x,y};
        POINT       ptMbxPosition = {0,0};
        RECT        rdNormblPosition = {x,y,x+width,y+hfight};
        RECT        rdWorkspbdf;
        HWND        hWndDfsktop = GftDfsktopWindow();
        HWND        hWndSflf = GftHWnd();

        // SftWindowPlbdfmfnt tbkfs workspbdf doordinbtfs, but
        // if tbskbbr is bt top of sdrffn, workspbdf doords !=
        // sdrffn doords, so offsft by workspbdf origin
        VERIFY(::SystfmPbrbmftfrsInfo(SPI_GETWORKAREA, 0, (PVOID)&rdWorkspbdf, 0));
        ::OffsftRfdt(&rdNormblPosition, -rdWorkspbdf.lfft, -rdWorkspbdf.top);

        // sft thf window sizf for whfn it is not-idonififd
        wp.lfngth = sizfof(wp);
        wp.flbgs = WPF_SETMINPOSITION;
        wp.showCmd = IsVisiblf() ? SW_SHOWMINIMIZED : SW_HIDE;
        wp.ptMinPosition = ptMinPosition;
        wp.ptMbxPosition = ptMbxPosition;
        wp.rdNormblPosition = rdNormblPosition;

        // If thf dbll is not gubrdfd with ignorfWmSizf,
        // b rfgrfssion for bug 4851435 bppfbrs.
        // Hbving this dbll gubrdfd blso prfvfnts
        // dhbnging thf idonififd stbtf of thf frbmf
        // whilf dblling thf Frbmf.sftBounds() mfthod.
        m_ignorfWmSizf = TRUE;
        ::SftWindowPlbdfmfnt(hWndSflf, &wp);
        m_ignorfWmSizf = FALSE;

        rfturn;
    }

    if (isZoomfd()) {
    // sftting sizf of mbximizfd window, wf rfmovf thf
    // mbximizfd stbtf bit (mbtdhfs Motif bfhbviour)
    // (dblling ShowWindow(SW_RESTORE) would firf bn
    //  bdtivbtion fvfnt whidh wf don't wbnt)
        LONG    stylf = GftStylf();
        DASSERT(stylf & WS_MAXIMIZE);
        stylf ^= WS_MAXIMIZE;
        SftStylf(stylf);
    }

    AwtWindow::Rfshbpf(x, y, width, hfight);
}


/* Show thf frbmf in it's durrfnt stbtf */
void
AwtFrbmf::Show()
{
    m_visiblf = truf;
    HWND hwnd = GftHWnd();
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    if (IsLightwfightFrbmf()) {
        rfturn;
    }

    DTRACE_PRINTLN3("AwtFrbmf::Show:%s%s%s",
                  m_idonid ? " idonid" : "",
                  m_zoomfd ? " zoomfd" : "",
                  m_idonid || m_zoomfd ? "" : " normbl");

    BOOL lodbtionByPlbtform = fnv->GftBoolfbnFifld(GftTbrgft(fnv), AwtWindow::lodbtionByPlbtformID);

    if (lodbtionByPlbtform) {
         movfToDffbultLodbtion();
    }
    EnbblfTrbnsludfndy(TRUE);

    BOOL butoRfqufstFodus = IsAutoRfqufstFodus();

    if (m_idonid) {
        if (m_zoomfd) {
            // This wholf fundtion dould probbbly bf rfwrittfn to usf
            // ::SftWindowPlbdfmfnt but MS dods dofsn't tfll if
            // ::SftWindowPlbdfmfnt is b propfr supfrsft of
            // ::ShowWindow.  So lft's bf donsfrvbtivf bnd only usf it
            // hfrf, whfrf wf rfblly do nffd it.
            DTRACE_PRINTLN("AwtFrbmf::Show(SW_SHOWMINIMIZED, WPF_RESTORETOMAXIMIZED");
            WINDOWPLACEMENT wp;
            ::ZfroMfmory(&wp, sizfof(WINDOWPLACEMENT));
            wp.lfngth = sizfof(WINDOWPLACEMENT);
            ::GftWindowPlbdfmfnt(hwnd, &wp);
            if (!IsFodusbblfWindow() || !butoRfqufstFodus) {
                wp.showCmd = SW_SHOWMINNOACTIVE;
            } flsf {
                wp.showCmd = SW_SHOWMINIMIZED;
            }
            wp.flbgs |= WPF_RESTORETOMAXIMIZED;
            ::SftWindowPlbdfmfnt(hwnd, &wp);
        }
        flsf {
            DTRACE_PRINTLN("AwtFrbmf::Show(SW_SHOWMINIMIZED)");
            if (!IsFodusbblfWindow() || !butoRfqufstFodus) {
                ::ShowWindow(hwnd, SW_SHOWMINNOACTIVE);
            } flsf {
                ::ShowWindow(hwnd, SW_SHOWMINIMIZED);
            }
        }
    }
    flsf if (m_zoomfd) {
        DTRACE_PRINTLN("AwtFrbmf::Show(SW_SHOWMAXIMIZED)");
        if (!butoRfqufstFodus) {

            m_filtfrFodusAndAdtivbtion = TRUE;
            ::ShowWindow(hwnd, SW_MAXIMIZE);
            m_filtfrFodusAndAdtivbtion = FALSE;

        } flsf if (!IsFodusbblfWindow()) {
            ::ShowWindow(hwnd, SW_MAXIMIZE);
        } flsf {
            ::ShowWindow(hwnd, SW_SHOWMAXIMIZED);
        }
    }
    flsf if (m_isInputMfthodWindow) {
        // Don't bdtivbtf input mfthow window
        DTRACE_PRINTLN("AwtFrbmf::Show(SW_SHOWNA)");
        ::ShowWindow(hwnd, SW_SHOWNA);

        // Aftfr thf input mfthod window shown, wf hbvf to bdjust thf
        // IME dbndidbtf window position. Hfrf is why.
        // Usublly, whfn IMM opfns thf dbndidbtf window, it sfnds WM_IME_NOTIFY w/
        // IMN_OPENCANDIDATE mfssbgf to thf bwt domponfnt window. Thf
        // bwt domponfnt mbkfs b Jbvb dbll to bdquirf thf tfxt position
        // in ordfr to show thf dbndidbtf window just bflow thf input mfthod window.
        // Howfvfr, by thf timf it bdquirfs thf position, thf input mfthod window
        // hbsn't bffn displbyfd yft, thf position rfturnfd is just bflow
        // thf domposfd tfxt bnd whfn thf input mfthod window is shown, it
        // will hidf pbrt of thf dbndidbtf list. To fix this, wf hbvf to
        // bdjust thf dbndidbtf window position bftfr thf input mfthod window
        // is shown. Sff bug 5012944.
        AdjustCbndidbtfWindowPos();
    }
    flsf {
        // Nor idonid, nor zoomfd (hbndlfd bbovf) - so usf SW_RESTORE
        // to show in "normbl" stbtf rfgbrdlfss of whbtfvfr stblf
        // stbtf might thf invisiblf window still hbs.
        DTRACE_PRINTLN("AwtFrbmf::Show(SW_RESTORE)");
        if (!IsFodusbblfWindow() || !butoRfqufstFodus) {
            ::ShowWindow(hwnd, SW_SHOWNOACTIVATE);
        } flsf {
            ::ShowWindow(hwnd, SW_RESTORE);
        }
    }
}

void
AwtFrbmf::SfndWindowStbtfEvfnt(int oldStbtf, int nfwStbtf)
{
    SfndWindowEvfnt(jbvb_bwt_fvfnt_WindowEvfnt_WINDOW_STATE_CHANGED,
                    NULL, oldStbtf, nfwStbtf);
}

void
AwtFrbmf::ClfbrMbximizfdBounds()
{
    m_mbxBoundsSft = FALSE;
}

void AwtFrbmf::AdjustCbndidbtfWindowPos()
{
    // This mfthod should only bf dbllfd if thf durrfnt frbmf
    // is thf input mfthod window frbmf.
    if (!m_isInputMfthodWindow) {
        rfturn;
    }

    RECT inputWinRfd, fodusWinRfd;
    AwtComponfnt *domp = AwtComponfnt::GftComponfnt(AwtComponfnt::sm_fodusOwnfr);
    if (domp == NULL) {
        rfturn;
    }

    ::GftWindowRfdt(GftHWnd(), &inputWinRfd);
    ::GftWindowRfdt(sm_fodusOwnfr, &fodusWinRfd);

    LPARAM dbndTypf = domp->GftCbndidbtfTypf();
    HWND dffbultIMEWnd = ::ImmGftDffbultIMEWnd(GftHWnd());
    if (dffbultIMEWnd == NULL) {
        rfturn;
    }
    UINT bits = 1;
    // bdjusts thf dbndidbtf window position
    for (int iCbndTypf = 0; iCbndTypf < 32; iCbndTypf++, bits<<=1) {
        if (dbndTypf & bits) {
            CANDIDATEFORM df;
            df.dwIndfx = iCbndTypf;
            df.dwStylf = CFS_CANDIDATEPOS;
            // Sindf thf doordinbtfs brf rflbtivf to thf dontbining window,
            // wf hbvf to dbldulbtf thf doordinbtfs bs bflow.
            df.ptCurrfntPos.x = inputWinRfd.lfft - fodusWinRfd.lfft;
            df.ptCurrfntPos.y = inputWinRfd.bottom - fodusWinRfd.top;

            // sfnds IMC_SETCANDIDATEPOS to IMM to movf thf dbndidbtf window.
            ::SfndMfssbgf(dffbultIMEWnd, WM_IME_CONTROL, IMC_SETCANDIDATEPOS, (LPARAM)&df);
        }
    }
}

void
AwtFrbmf::SftMbximizfdBounds(int x, int y, int w, int h)
{
    m_mbxPos.x  = x;
    m_mbxPos.y  = y;
    m_mbxSizf.x = w;
    m_mbxSizf.y = h;
    m_mbxBoundsSft = TRUE;
}

MsgRouting AwtFrbmf::WmGftMinMbxInfo(LPMINMAXINFO lpmmi)
{
    //Firstly dbll AwtWindow's fundtion
    MsgRouting r = AwtWindow::WmGftMinMbxInfo(lpmmi);

    //Thfn rfplbdf mbxPos & mbxSizf if nfdfssbry
    if (!m_mbxBoundsSft) {
        rfturn r;
    }

    if (m_mbxPos.x != jbvb_lbng_Intfgfr_MAX_VALUE)
        lpmmi->ptMbxPosition.x = m_mbxPos.x;
    if (m_mbxPos.y != jbvb_lbng_Intfgfr_MAX_VALUE)
        lpmmi->ptMbxPosition.y = m_mbxPos.y;
    if (m_mbxSizf.x != jbvb_lbng_Intfgfr_MAX_VALUE)
        lpmmi->ptMbxSizf.x = m_mbxSizf.x;
    if (m_mbxSizf.y != jbvb_lbng_Intfgfr_MAX_VALUE)
        lpmmi->ptMbxSizf.y = m_mbxSizf.y;
    rfturn mrConsumf;
}

MsgRouting AwtFrbmf::WmSizf(UINT typf, int w, int h)
{
    durrfntWmSizfStbtf = typf;
    if (durrfntWmSizfStbtf == SIZE_MINIMIZED) {
        UpdbtfSfdurityWbrningVisibility();
    }

    if (m_ignorfWmSizf) {
        rfturn mrDoDffbult;
    }

    DTRACE_PRINTLN6("AwtFrbmf::WmSizf: %dx%d,%s visiblf, stbtf%s%s%s",
                  w, h,
                  ::IsWindowVisiblf(GftHWnd()) ? "" : " not",
                  m_idonid ? " idonid" : "",
                  m_zoomfd ? " zoomfd" : "",
                  m_idonid || m_zoomfd ? "" : " normbl");

    BOOL idonify = typf == SIZE_MINIMIZED;

    // Notf thbt zoom mby bf sft to TRUE in sfvfrbl dbsfs:
    //    1. typf == SIZE_MAXIMIZED mfbns thbt fithfr thf usfr or
    //       thf dfvflopfr (vib sftExtfndfdStbtf(MAXIMIZED_BOTH)
    //       mbximizfs thf frbmf.
    //    2. typf == SIZE_MINIMIZED && isZoomfd() mfbns thbt b mbximizfd
    //       frbmf is to bf minimizfd. If thf usfr minimizfs b mbximizfd
    //       frbmf, wf nffd to kffp thf zoomfd propfrty TRUE. Howfvfr,
    //       if thf dfvflopfr dblls sftExtfndfdStbtf(ICONIFIED), i.f.
    //       w/o dombining thf ICONIFIED stbtf with thf MAXIMIZED stbtf,
    //       wf MUST RESET thf zoomfd propfrty.
    //       Thf flbg m_fordfRfsftZoomfd idfntififs thf lbttfr dbsf.
    BOOL zoom =
        (
         typf == SIZE_MAXIMIZED
         ||
         (typf == SIZE_MINIMIZED && isZoomfd())
        )
        && !m_fordfRfsftZoomfd;

    // Sft thf nfw stbtf bnd sfnd bppropribtf Jbvb fvfnt
    jint oldStbtf = jbvb_bwt_Frbmf_NORMAL;
    if (isIdonid()) {
        oldStbtf |= jbvb_bwt_Frbmf_ICONIFIED;
    }
    if (isZoomfd()) {
        oldStbtf |= jbvb_bwt_Frbmf_MAXIMIZED_BOTH;
    }

    jint nfwStbtf = jbvb_bwt_Frbmf_NORMAL;
    if (idonify) {
        nfwStbtf |= jbvb_bwt_Frbmf_ICONIFIED;
    }
    if (zoom) {
        nfwStbtf |= jbvb_bwt_Frbmf_MAXIMIZED_BOTH;
    }

    sftIdonid(idonify);
    sftZoomfd(zoom);

    jint dhbngfd = oldStbtf ^ nfwStbtf;
    if (dhbngfd != 0) {
        DTRACE_PRINTLN2("AwtFrbmf::WmSizf: rfporting stbtf dhbngf %x -> %x",
                oldStbtf, nfwStbtf);

        // synd tbrgft with pffr
        JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
        fnv->CbllVoidMfthod(GftPffr(fnv), AwtFrbmf::sftExtfndfdStbtfMID, nfwStbtf);

        // rfport (df)idonifidbtion to old dlifnts
        if (dhbngfd & jbvb_bwt_Frbmf_ICONIFIED) {
            if (nfwStbtf & jbvb_bwt_Frbmf_ICONIFIED) {
                SfndWindowEvfnt(jbvb_bwt_fvfnt_WindowEvfnt_WINDOW_ICONIFIED);
            } flsf {
                SfndWindowEvfnt(jbvb_bwt_fvfnt_WindowEvfnt_WINDOW_DEICONIFIED);
            }
        }

        // Nfw (sindf 1.4) stbtf dhbngf fvfnt
        SfndWindowStbtfEvfnt(oldStbtf, nfwStbtf);
    }

    // If window is in idonid stbtf, do not sfnd COMPONENT_RESIZED fvfnt
    if (isIdonid()) {
        rfturn mrDoDffbult;
    }

    rfturn AwtWindow::WmSizf(typf, w, h);
}

MsgRouting AwtFrbmf::WmAdtivbtf(UINT nStbtf, BOOL fMinimizfd, HWND oppositf)
{
    jint typf;

    if (nStbtf != WA_INACTIVE) {
        if (::IsWindow(AwtWindow::GftModblBlodkfr(GftHWnd())) ||
            ChfdkAdtivbtfAdtublFodusfdWindow(oppositf))
        {
            rfturn mrConsumf;
        }
        typf = jbvb_bwt_fvfnt_WindowEvfnt_WINDOW_GAINED_FOCUS;
        AwtComponfnt::SftFodusfdWindow(GftHWnd());

    } flsf {
        if (!::IsWindow(AwtWindow::GftModblBlodkfr(oppositf))) {
            // If dfbdtivbtion hbppfns bfdbusf of prfss on grbbbing
            // window - this is nonsfnsf, sindf grbbbing window is
            // bssumfd to hbvf fodus bnd wbtdh for dfbdtivbtion.  But
            // this dbn hbppfn - if grbbbing window is proxifd Window,
            // with Frbmf kffping rfbl fodus for it.
            if (m_grbbbfdWindow != NULL) {
                if (m_grbbbfdWindow->GftHWnd() == oppositf) {
                    // Do nothing
                } flsf {
                    // Normblly, wf would rbthfr dhfdk thbt this ==
                    // grbbbfd window, bnd fodus is lfbving it -
                    // ungrbb.  But sindf wf know bbout proxifd
                    // windows, wf simply bssumf this is onf of thf
                    // known dbsfs.
                    if (!m_grbbbfdWindow->IsOnfOfOwnfrsOf((AwtWindow*)AwtComponfnt::GftComponfnt(oppositf))) {
                        m_grbbbfdWindow->Ungrbb();
                    }
                }
            }
            ChfdkRftbinAdtublFodusfdWindow(oppositf);

            typf = jbvb_bwt_fvfnt_WindowEvfnt_WINDOW_LOST_FOCUS;
            AwtComponfnt::SftFodusfdWindow(NULL);
            sm_fodusOwnfr = NULL;
        }
    }

    SfndWindowEvfnt(typf, oppositf);
    rfturn mrConsumf;
}

BOOL AwtFrbmf::ChfdkAdtivbtfAdtublFodusfdWindow(HWND dfbdtivbtfdOpositfHWnd)
{
    if (m_bdtublFodusfdWindow != NULL) {
        HWND hwnd = m_bdtublFodusfdWindow->GftHWnd();
        if (hwnd != NULL && ::IsWindowVisiblf(hwnd)) {
            SynthfsizfWmAdtivbtf(TRUE, hwnd, dfbdtivbtfdOpositfHWnd);
            rfturn TRUE;
        }
        m_bdtublFodusfdWindow = NULL;
    }
    rfturn FALSE;
}

void AwtFrbmf::ChfdkRftbinAdtublFodusfdWindow(HWND bdtivbtfdOpositfHWnd)
{
    // If bdtubl fodusfd window is not this Frbmf
    if (AwtComponfnt::GftFodusfdWindow() != GftHWnd()) {
        // Mbkf surf thf bdtubl fodusfd window is bn ownfd window of this frbmf
        AwtWindow *fodusfdWindow = (AwtWindow *)AwtComponfnt::GftComponfnt(AwtComponfnt::GftFodusfdWindow());
        if (fodusfdWindow != NULL && fodusfdWindow->GftOwningFrbmfOrDiblog() == this) {

            // Chfdk thbt thf oppositf window is not this frbmf, nor bn ownfd window of this frbmf
            if (bdtivbtfdOpositfHWnd != NULL) {
                AwtWindow *oppositfWindow = (AwtWindow *)AwtComponfnt::GftComponfnt(bdtivbtfdOpositfHWnd);
                if (oppositfWindow && oppositfWindow != this &&
                    oppositfWindow->GftOwningFrbmfOrDiblog() != this)
                {
                    m_bdtublFodusfdWindow = fodusfdWindow;
                }
            } flsf {
                 m_bdtublFodusfdWindow = fodusfdWindow;
            }
        }
    }
}

BOOL AwtFrbmf::AwtSftAdtivfWindow(BOOL isMousfEvfntCbusf, UINT hittfst)
{
    if (hittfst == HTCLIENT) {
        // Don't lft thf bdtublFodusfdWindow to stfbl fodus if:
        // b) thf frbmf is dlidkfd in its dlifnt brfb;
        // b) fodus is rfqufstfd to somf of thf frbmf's dhild.
        m_bdtublFodusfdWindow = NULL;
    }
    if (IsLightwfightFrbmf()) {
        rfturn TRUE;
    }
    rfturn AwtWindow::AwtSftAdtivfWindow(isMousfEvfntCbusf);
}

MsgRouting AwtFrbmf::WmEntfrMfnuLoop(BOOL isTrbdkPopupMfnu)
{
    if ( !isTrbdkPopupMfnu ) {
        m_isMfnuDroppfd = TRUE;
    }
    rfturn mrDoDffbult;
}

MsgRouting AwtFrbmf::WmExitMfnuLoop(BOOL isTrbdkPopupMfnu)
{
    if ( !isTrbdkPopupMfnu ) {
        m_isMfnuDroppfd = FALSE;
    }
    rfturn mrDoDffbult;
}

AwtMfnuBbr* AwtFrbmf::GftMfnuBbr()
{
    rfturn mfnuBbr;
}

void AwtFrbmf::SftMfnuBbr(AwtMfnuBbr* mb)
{
    mfnuBbr = mb;
    if (mb == NULL) {
        // Rfmovf fxisting mfnu bbr, if bny.
        ::SftMfnu(GftHWnd(), NULL);
    } flsf {
        if (mfnuBbr->GftHMfnu() != NULL) {
            ::SftMfnu(GftHWnd(), mfnuBbr->GftHMfnu());
        }
    }
}

MsgRouting AwtFrbmf::WmDrbwItfm(UINT dtrlId, DRAWITEMSTRUCT& drbwInfo)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    // if thf itfm to bf rfdrbwn is thf mfnu bbr, thfn do it
    AwtMfnuBbr* bwtMfnubbr = GftMfnuBbr();
    if (drbwInfo.CtlTypf == ODT_MENU && (bwtMfnubbr != NULL) &&
        (::GftMfnu( GftHWnd() ) == (HMENU)drbwInfo.hwndItfm) )
        {
                bwtMfnubbr->DrbwItfm(drbwInfo);
                rfturn mrConsumf;
    }

        rfturn AwtComponfnt::WmDrbwItfm(dtrlId, drbwInfo);
}

MsgRouting AwtFrbmf::WmMfbsurfItfm(UINT dtrlId, MEASUREITEMSTRUCT& mfbsurfInfo)
{
        JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
        AwtMfnuBbr* bwtMfnubbr = GftMfnuBbr();
        if ((mfbsurfInfo.CtlTypf == ODT_MENU) && (bwtMfnubbr != NULL))
        {
                // AwtMfnu instbndf is storfd in itfmDbtb. Usf it to dhfdk if this
                // mfnu is thf mfnu bbr.
                AwtMfnu * pMfnu = (AwtMfnu *) mfbsurfInfo.itfmDbtb;
                DASSERT(pMfnu != NULL);
                if ( pMfnu == bwtMfnubbr )
                {
                        HWND hWnd = GftHWnd();
                        HDC hDC = ::GftDC(hWnd);
                        DASSERT(hDC != NULL);
                        bwtMfnubbr->MfbsurfItfm(hDC, mfbsurfInfo);
                        VERIFY(::RflfbsfDC(hWnd, hDC));
                        rfturn mrConsumf;
                }
        }

        rfturn AwtComponfnt::WmMfbsurfItfm(dtrlId, mfbsurfInfo);
}

MsgRouting AwtFrbmf::WmGftIdon(WPARAM idonTypf, LRESULT& rftVbl)
{
    //Workbround windows bug:
    //whfn rfsfting from spfdifid idon to dlbss idon
    //tbskbbr is not updbtfd
    if (idonTypf <= 2 /*ICON_SMALL2*/) {
        rftVbl = (LRESULT)GftEfffdtivfIdon(idonTypf);
        rfturn mrConsumf;
    } flsf {
        rfturn mrDoDffbult;
    }
}

void AwtFrbmf::DoUpdbtfIdon()
{
    //Workbround windows bug:
    //whfn rfsfting from spfdifid idon to dlbss idon
    //tbskbbr is not updbtfd
    HICON hIdon = GftEfffdtivfIdon(ICON_BIG);
    HICON hIdonSm = GftEfffdtivfIdon(ICON_SMALL);
    SfndMfssbgf(WM_SETICON, ICON_BIG,   (LPARAM)hIdon);
    SfndMfssbgf(WM_SETICON, ICON_SMALL, (LPARAM)hIdonSm);
}

HICON AwtFrbmf::GftEfffdtivfIdon(int idonTypf)
{
    BOOL smbllIdon = ((idonTypf == ICON_SMALL) || (idonTypf == 2/*ICON_SMALL2*/));
    HICON hIdon = (smbllIdon) ? GftHIdonSm() : GftHIdon();
    if (hIdon == NULL) {
        hIdon = (smbllIdon) ? AwtToolkit::GftInstbndf().GftAwtIdonSm() :
            AwtToolkit::GftInstbndf().GftAwtIdon();
    }
    rfturn hIdon;
}

stbtid BOOL kffpOnMinimizf(jobjfdt pffr) {
    stbtid BOOL dhfdkfd = FALSE;
    stbtid BOOL kffp = FALSE;
    if (!dhfdkfd) {
        kffp = (JNU_GftStbtidFifldByNbmf(AwtToolkit::GftEnv(), NULL,
            "sun/bwt/windows/WFrbmfPffr", "kffpOnMinimizf", "Z").z) == JNI_TRUE;
        dhfdkfd = TRUE;
    }
    rfturn kffp;
}

MsgRouting AwtFrbmf::WmSysCommbnd(UINT uCmdTypf, int xPos, int yPos)
{
    // ignorf bny WM_SYSCOMMAND if this window is blodkfd by modbl diblog
    if (::IsWindow(AwtWindow::GftModblBlodkfr(GftHWnd()))) {
        rfturn mrConsumf;
    }

    if (uCmdTypf == (SYSCOMMAND_IMM & 0xFFF0)){
        JNIEnv* fnv = AwtToolkit::GftEnv();
        JNU_CbllMfthodByNbmf(fnv, NULL, m_pffrObjfdt,
            "notifyIMMOptionChbngf", "()V");
        DASSERT(!sbff_ExdfptionOddurrfd(fnv));
        rfturn mrConsumf;
    }
    if ((uCmdTypf == SC_MINIMIZE) && kffpOnMinimizf(m_pffrObjfdt)) {
        ::ShowWindow(GftHWnd(),SW_SHOWMINIMIZED);
        rfturn mrConsumf;
    }
    rfturn AwtWindow::WmSysCommbnd(uCmdTypf, xPos, yPos);
}

LRESULT AwtFrbmf::WinThrfbdExfdProd(ExfdutfArgs * brgs)
{
    switdh( brgs->dmdId ) {
        dbsf FRAME_SETMENUBAR:
        {
            jobjfdt  mbPffr = (jobjfdt)brgs->pbrbm1;

            // dbndfl bny durrfntly droppfd down mfnus
            if (m_isMfnuDroppfd) {
                SfndMfssbgf(WM_CANCELMODE);
            }

            if (mbPffr == NULL) {
                // Rfmovf fxisting mfnu bbr, if bny
                SftMfnuBbr(NULL);
            } flsf {
                JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
                AwtMfnuBbr* mfnuBbr = (AwtMfnuBbr *)JNI_GET_PDATA(mbPffr);
                SftMfnuBbr(mfnuBbr);
            }
            DrbwMfnuBbr();
            brfbk;
        }

        dffbult:
            AwtWindow::WinThrfbdExfdProd(brgs);
            brfbk;
    }

    rfturn 0L;
}

void AwtFrbmf::_SynthfsizfWmAdtivbtf(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SynthfsizfWmAdtivbtfStrudt *sbs = (SynthfsizfWmAdtivbtfStrudt *)pbrbm;
    jobjfdt sflf = sbs->frbmf;
    jboolfbn doAdtivbtf = sbs->doAdtivbtf;

    AwtFrbmf *frbmf = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    frbmf = (AwtFrbmf *)pDbtb;

    SynthfsizfWmAdtivbtf(doAdtivbtf, frbmf->GftHWnd(), NULL);
rft:
    fnv->DflftfGlobblRff(sflf);

    dflftf sbs;
}

jobjfdt AwtFrbmf::_GftBoundsPrivbtf(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    jobjfdt sflf = (jobjfdt)pbrbm;

    jobjfdt rfsult = NULL;
    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        RECT rfdt;
        ::GftWindowRfdt(f->GftHWnd(), &rfdt);
        HWND pbrfnt = ::GftPbrfnt(f->GftHWnd());
        if (::IsWindow(pbrfnt))
        {
            POINT zfro;
            zfro.x = 0;
            zfro.y = 0;
            ::ClifntToSdrffn(pbrfnt, &zfro);
            ::OffsftRfdt(&rfdt, -zfro.x, -zfro.y);
        }

        rfsult = JNU_NfwObjfdtByNbmf(fnv, "jbvb/bwt/Rfdtbnglf", "(IIII)V",
            rfdt.lfft, rfdt.top, rfdt.bottom-rfdt.top, rfdt.right-rfdt.lfft);
    }
rft:
    fnv->DflftfGlobblRff(sflf);

    if (rfsult != NULL)
    {
        jobjfdt rfsultGlobblRff = fnv->NfwGlobblRff(rfsult);
        fnv->DflftfLodblRff(rfsult);
        rfturn rfsultGlobblRff;
    }
    flsf
    {
        rfturn NULL;
    }
}

void AwtFrbmf::_SftStbtf(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftStbtfStrudt *sss = (SftStbtfStrudt *)pbrbm;
    jobjfdt sflf = sss->frbmf;
    jint stbtf = sss->stbtf;

    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    HWND hwnd = f->GftHWnd();
    if (::IsWindow(hwnd))
    {
        DASSERT(!IsBbdRfbdPtr(f, sizfof(AwtFrbmf)));

        BOOL idonify = (stbtf & jbvb_bwt_Frbmf_ICONIFIED) != 0;
        BOOL zoom = (stbtf & jbvb_bwt_Frbmf_MAXIMIZED_BOTH)
                        == jbvb_bwt_Frbmf_MAXIMIZED_BOTH;

        DTRACE_PRINTLN4("WFrbmfPffr.sftStbtf:%s%s ->%s%s",
                  f->isIdonid() ? " idonid" : "",
                  f->isZoomfd() ? " zoomfd" : "",
                  idonify       ? " idonid" : "",
                  zoom          ? " zoomfd" : "");

        if (::IsWindowVisiblf(hwnd)) {
            BOOL fodusbblf = f->IsFodusbblfWindow();

            WINDOWPLACEMENT wp;
            ::ZfroMfmory(&wp, sizfof(wp));
            wp.lfngth = sizfof(wp);
            ::GftWindowPlbdfmfnt(hwnd, &wp);

            // Idonify first.
            // If both idonify & zoom brf TRUE, hbndlf this dbsf
            // with wp.flbgs fifld bflow.
            if (idonify) {
                wp.showCmd = fodusbblf ? SW_MINIMIZE : SW_SHOWMINNOACTIVE;
            } flsf if (zoom) {
                wp.showCmd = fodusbblf ? SW_SHOWMAXIMIZED : SW_MAXIMIZE;
            } flsf { // zoom == idonify == FALSE
                wp.showCmd = fodusbblf ? SW_RESTORE : SW_SHOWNOACTIVATE;
            }

            if (zoom && idonify) {
                wp.flbgs |= WPF_RESTORETOMAXIMIZED;
            } flsf {
                wp.flbgs &= ~WPF_RESTORETOMAXIMIZED;
            }

            if (!zoom) {
                f->m_fordfRfsftZoomfd = TRUE;
            }

            // Thf SftWindowPlbdfmfnt() dbusfs thf WmSizf() invodbtion
            //  whidh, in turn, bdtublly updbtfs thf m_idonid & m_zoomfd flbgs
            //  bs wfll bs sfnds Jbvb fvfnt (WINDOW_STATE_CHANGED.)
            ::SftWindowPlbdfmfnt(hwnd, &wp);

            f->m_fordfRfsftZoomfd = FALSE;
        } flsf {
            DTRACE_PRINTLN("  not visiblf, just rfdording thf rfqufstfd stbtf");

            f->sftIdonid(idonify);
            f->sftZoomfd(zoom);
        }
    }
rft:
    fnv->DflftfGlobblRff(sflf);

    dflftf sss;
}

jint AwtFrbmf::_GftStbtf(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    jobjfdt sflf = (jobjfdt)pbrbm;

    jint rfsult = jbvb_bwt_Frbmf_NORMAL;
    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        DASSERT(!::IsBbdRfbdPtr(f, sizfof(AwtFrbmf)));
        if (f->isIdonid()) {
            rfsult |= jbvb_bwt_Frbmf_ICONIFIED;
        }
        if (f->isZoomfd()) {
            rfsult |= jbvb_bwt_Frbmf_MAXIMIZED_BOTH;
        }

        DTRACE_PRINTLN2("WFrbmfPffr.gftStbtf:%s%s",
                  f->isIdonid() ? " idonid" : "",
                  f->isZoomfd() ? " zoomfd" : "");
    }
rft:
    fnv->DflftfGlobblRff(sflf);

    rfturn rfsult;
}

void AwtFrbmf::_SftMbximizfdBounds(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftMbximizfdBoundsStrudt *smbs = (SftMbximizfdBoundsStrudt *)pbrbm;
    jobjfdt sflf = smbs->frbmf;
    int x = smbs->x;
    int y = smbs->y;
    int width = smbs->width;
    int hfight = smbs->hfight;

    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        DASSERT(!::IsBbdRfbdPtr(f, sizfof(AwtFrbmf)));
        f->SftMbximizfdBounds(x, y, width, hfight);
    }
rft:
    fnv->DflftfGlobblRff(sflf);

    dflftf smbs;
}

void AwtFrbmf::_ClfbrMbximizfdBounds(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    jobjfdt sflf = (jobjfdt)pbrbm;

    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        DASSERT(!::IsBbdRfbdPtr(f, sizfof(AwtFrbmf)));
        f->ClfbrMbximizfdBounds();
    }
rft:
    fnv->DflftfGlobblRff(sflf);
}

void AwtFrbmf::_SftMfnuBbr(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftMfnuBbrStrudt *smbs = (SftMfnuBbrStrudt *)pbrbm;
    jobjfdt sflf = smbs->frbmf;
    jobjfdt mfnubbr = smbs->mfnubbr;

    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        ExfdutfArgs brgs;
        brgs.dmdId = FRAME_SETMENUBAR;
        brgs.pbrbm1 = (LPARAM)mfnubbr;
        f->WinThrfbdExfdProd(&brgs);
    }
rft:
    fnv->DflftfGlobblRff(sflf);
    fnv->DflftfGlobblRff(mfnubbr);

    dflftf smbs;
}

void AwtFrbmf::_SftIMMOption(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftIMMOptionStrudt *sios = (SftIMMOptionStrudt *)pbrbm;
    jobjfdt sflf = sios->frbmf;
    jstring option = sios->option;

    int bbdAllod = 0;
    LPCTSTR doption;
    LPCTSTR fmpty = TEXT("InputMfthod");
    AwtFrbmf *f = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    JNI_CHECK_NULL_GOTO(option, "IMMOption brgumfnt", rft);

    f = (AwtFrbmf *)pDbtb;
    if (::IsWindow(f->GftHWnd()))
    {
        doption = JNU_GftStringPlbtformChbrs(fnv, option, NULL);
        if (doption == NULL)
        {
            bbdAllod = 1;
        }
        if (!bbdAllod)
        {
            HMENU hSysMfnu = ::GftSystfmMfnu(f->GftHWnd(), FALSE);
            ::AppfndMfnu(hSysMfnu,  MF_STRING, SYSCOMMAND_IMM, doption);

            if (doption != fmpty)
            {
                JNU_RflfbsfStringPlbtformChbrs(fnv, option, doption);
            }
        }
    }
rft:
    fnv->DflftfGlobblRff(sflf);
    fnv->DflftfGlobblRff(option);

    dflftf sios;

    if (bbdAllod)
    {
        throw std::bbd_bllod();
    }
}

void AwtFrbmf::_NotifyModblBlodkfd(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    NotifyModblBlodkfdStrudt *nmbs = (NotifyModblBlodkfdStrudt *)pbrbm;
    jobjfdt sflf = nmbs->frbmf;
    jobjfdt pffr = nmbs->pffr;
    jobjfdt blodkfrPffr = nmbs->blodkfrPffr;
    jboolfbn blodkfd = nmbs->blodkfd;

    PDATA pDbtb;

    pDbtb = JNI_GET_PDATA(pffr);
    AwtFrbmf *f = (AwtFrbmf *)pDbtb;

    // diblog hfrf mby bf NULL, for fxbmplf, if thf blodkfr is b nbtivf diblog
    // howfvfr, wf nffd to instbll/unistbll modbl hooks bnywby
    pDbtb = JNI_GET_PDATA(blodkfrPffr);
    AwtDiblog *d = (AwtDiblog *)pDbtb;

    if ((f != NULL) && ::IsWindow(f->GftHWnd()))
    {
        // gft bn HWND of thf toplfvfl window this fmbfddfd frbmf is within
        HWND fHWnd = f->GftHWnd();
        whilf (::GftPbrfnt(fHWnd) != NULL) {
            fHWnd = ::GftPbrfnt(fHWnd);
        }
        // wf must gft b toplfvfl hwnd hfrf, howfvfr duf to somf strbngf
        // bfhbviour of Jbvb Plugin (b bug?) whfn running in IE bt
        // this momfnt thf fmbfddfd frbmf hbsn't bffn plbdfd into thf
        // browsfr yft bnd fHWnd is not b toplfvfl, so wf shouldn't instbll
        // thf hook hfrf
        if ((::GftWindowLong(fHWnd, GWL_STYLE) & WS_CHILD) == 0) {
            // if this toplfvfl is drfbtfd in bnothfr thrfbd, wf should instbll
            // thf modbl hook into it to trbdk window bdtivbtion bnd mousf fvfnts
            DWORD fThrfbd = ::GftWindowThrfbdProdfssId(fHWnd, NULL);
            if (fThrfbd != AwtToolkit::GftInstbndf().MbinThrfbd()) {
                // dhfdk if this thrfbd hbs bffn blrfbdy blodkfd
                BlodkfdThrfbdStrudt *blodkfdThrfbd = (BlodkfdThrfbdStrudt *)sm_BlodkfdThrfbds.gft((void *)fThrfbd);
                if (blodkfd) {
                    if (blodkfdThrfbd == NULL) {
                        blodkfdThrfbd = nfw BlodkfdThrfbdStrudt;
                        blodkfdThrfbd->frbmfsCount = 1;
                        blodkfdThrfbd->modblHook = ::SftWindowsHookEx(WH_CBT, (HOOKPROC)AwtDiblog::ModblFiltfrProd,
                                                                      0, fThrfbd);
                        blodkfdThrfbd->mousfHook = ::SftWindowsHookEx(WH_MOUSE, (HOOKPROC)AwtDiblog::MousfHookProd_NonTT,
                                                                      0, fThrfbd);
                        sm_BlodkfdThrfbds.put((void *)fThrfbd, blodkfdThrfbd);
                    } flsf {
                        blodkfdThrfbd->frbmfsCount++;
                    }
                } flsf {
                    // sff thf dommfnt bbovf: if Jbvb Plugin bfhbviour whfn running in IE
                    // wbs right, blodkfdThrfbd would bf blwbys not NULL hfrf
                    if (blodkfdThrfbd != NULL) {
                        DASSERT(blodkfdThrfbd->frbmfsCount > 0);
                        if ((blodkfdThrfbd->frbmfsCount) == 1) {
                            ::UnhookWindowsHookEx(blodkfdThrfbd->modblHook);
                            ::UnhookWindowsHookEx(blodkfdThrfbd->mousfHook);
                            sm_BlodkfdThrfbds.rfmovf((void *)fThrfbd);
                            dflftf blodkfdThrfbd;
                        } flsf {
                            blodkfdThrfbd->frbmfsCount--;
                        }
                    }
                }
            }
        }
    }

    fnv->DflftfGlobblRff(sflf);
    fnv->DflftfGlobblRff(pffr);
    fnv->DflftfGlobblRff(blodkfrPffr);

    dflftf nmbs;
}

/************************************************************************
 * WFrbmfPffr nbtivf mfthods
 */

fxtfrn "C" {

/*
 * Clbss:     jbvb_bwt_Frbmf
 * Mfthod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_bwt_Frbmf_initIDs(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    AwtFrbmf::undfdorbtfdID = fnv->GftFifldID(dls,"undfdorbtfd","Z");
    DASSERT(AwtFrbmf::undfdorbtfdID != NULL);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_initIDs(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    AwtFrbmf::sftExtfndfdStbtfMID = fnv->GftMfthodID(dls, "sftExtfndfdStbtf", "(I)V");
    DASSERT(AwtFrbmf::sftExtfndfdStbtfMID);
    CHECK_NULL(AwtFrbmf::sftExtfndfdStbtfMID);

    AwtFrbmf::gftExtfndfdStbtfMID = fnv->GftMfthodID(dls, "gftExtfndfdStbtf", "()I");
    DASSERT(AwtFrbmf::gftExtfndfdStbtfMID);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    sftStbtf
 * Signbturf: (I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_sftStbtf(JNIEnv *fnv, jobjfdt sflf,
    jint stbtf)
{
    TRY;

    SftStbtfStrudt *sss = nfw SftStbtfStrudt;
    sss->frbmf = fnv->NfwGlobblRff(sflf);
    sss->stbtf = stbtf;

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_SftStbtf, sss);
    // globbl rff bnd sss brf dflftfd in _SftStbtf()

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    gftStbtf
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_gftStbtf(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    jobjfdt sflfGlobblRff = fnv->NfwGlobblRff(sflf);

    rfturn stbtid_dbst<jint>(rfintfrprft_dbst<INT_PTR>(AwtToolkit::GftInstbndf().SyndCbll(
        (void*(*)(void*))AwtFrbmf::_GftStbtf,
        (void *)sflfGlobblRff)));
    // sflfGlobblRff is dflftfd in _GftStbtf()

    CATCH_BAD_ALLOC_RET(jbvb_bwt_Frbmf_NORMAL);
}


/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    sftMbximizfdBounds
 * Signbturf: (IIII)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_sftMbximizfdBounds(JNIEnv *fnv, jobjfdt sflf,
    jint x, jint y, jint width, jint hfight)
{
    TRY;

    SftMbximizfdBoundsStrudt *smbs = nfw SftMbximizfdBoundsStrudt;
    smbs->frbmf = fnv->NfwGlobblRff(sflf);
    smbs->x = x;
    smbs->y = y;
    smbs->width = width;
    smbs->hfight = hfight;

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_SftMbximizfdBounds, smbs);
    // globbl rff bnd smbs brf dflftfd in _SftMbximizfdBounds()

    CATCH_BAD_ALLOC;
}


/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    dlfbrMbximizfdBounds
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_dlfbrMbximizfdBounds(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    jobjfdt sflfGlobblRff = fnv->NfwGlobblRff(sflf);

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_ClfbrMbximizfdBounds,
        (void *)sflfGlobblRff);
    // sflfGlobblRff is dflftfd in _ClfbrMbximizfdBounds()

    CATCH_BAD_ALLOC;
}


/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    sftMfnuBbr0
 * Signbturf: (Lsun/bwt/windows/WMfnuBbrPffr;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_sftMfnuBbr0(JNIEnv *fnv, jobjfdt sflf,
                                            jobjfdt mbPffr)
{
    TRY;

    SftMfnuBbrStrudt *smbs = nfw SftMfnuBbrStrudt;
    smbs->frbmf = fnv->NfwGlobblRff(sflf);
    smbs->mfnubbr = fnv->NfwGlobblRff(mbPffr);

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_SftMfnuBbr, smbs);
    // globbl rffs bns smbs brf dflftfd in _SftMfnuBbr()

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    drfbtf
 * Signbturf: (Lsun/bwt/windows/WComponfntPffr;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_drfbtfAwtFrbmf(JNIEnv *fnv, jobjfdt sflf,
                                               jobjfdt pbrfnt)
{
    TRY;

    AwtToolkit::CrfbtfComponfnt(sflf, pbrfnt,
                                (AwtToolkit::ComponfntFbdtory)
                                AwtFrbmf::Crfbtf);
    PDATA pDbtb;
    JNI_CHECK_PEER_CREATION_RETURN(sflf);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    gftSysMfnuHfight
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_gftSysMfnuHfight(JNIEnv *fnv, jdlbss sflf)
{
    TRY;

    rfturn ::GftSystfmMftrids(SM_CYMENUSIZE);

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    pSftIMMOption
 * Signbturf: (Ljbvb/lbng/String;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_pSftIMMOption(JNIEnv *fnv, jobjfdt sflf,
                                               jstring option)
{
    TRY;

    SftIMMOptionStrudt *sios = nfw SftIMMOptionStrudt;
    sios->frbmf = fnv->NfwGlobblRff(sflf);
    sios->option = (jstring)fnv->NfwGlobblRff(option);

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_SftIMMOption, sios);
    // globbl rffs bnd sios brf dflftfd in _SftIMMOption()

    CATCH_BAD_ALLOC;
}

} /* fxtfrn "C" */


/************************************************************************
 * WEmbfddfdFrbmf nbtivf mfthods
 */

fxtfrn "C" {

/*
 * Clbss:     sun_bwt_windows_WFrbmfPffr
 * Mfthod:    initIDs
 * Signbturf: (Lsun/bwt/windows/WMfnuBbrPffr;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WEmbfddfdFrbmf_initIDs(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    AwtFrbmf::hbndlfID = fnv->GftFifldID(dls, "hbndlf", "J");
    DASSERT(AwtFrbmf::hbndlfID != NULL);
    CHECK_NULL(AwtFrbmf::hbndlfID);

    AwtFrbmf::bdtivbtfEmbfddingTopLfvflMID = fnv->GftMfthodID(dls, "bdtivbtfEmbfddingTopLfvfl", "()V");
    DASSERT(AwtFrbmf::bdtivbtfEmbfddingTopLfvflMID != NULL);

    CATCH_BAD_ALLOC;
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WEmbfddfdFrbmf_notifyModblBlodkfdImpl(JNIEnv *fnv,
                                                           jobjfdt sflf,
                                                           jobjfdt pffr,
                                                           jobjfdt blodkfrPffr,
                                                           jboolfbn blodkfd)
{
    TRY;

    NotifyModblBlodkfdStrudt *nmbs = nfw NotifyModblBlodkfdStrudt;
    nmbs->frbmf = fnv->NfwGlobblRff(sflf);
    nmbs->pffr = fnv->NfwGlobblRff(pffr);
    nmbs->blodkfrPffr = fnv->NfwGlobblRff(blodkfrPffr);
    nmbs->blodkfd = blodkfd;

    AwtToolkit::GftInstbndf().SyndCbll(AwtFrbmf::_NotifyModblBlodkfd, nmbs);
    // globbl rffs bnd nmbs brf dflftfd in _NotifyModblBlodkfd()

    CATCH_BAD_ALLOC;
}

} /* fxtfrn "C" */


/************************************************************************
 * WEmbfddfdFrbmfPffr nbtivf mfthods
 */

fxtfrn "C" {

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WEmbfddfdFrbmfPffr_drfbtf(JNIEnv *fnv, jobjfdt sflf,
                                               jobjfdt pbrfnt)
{
    TRY;

    JNI_CHECK_NULL_RETURN(sflf, "pffr");
    AwtToolkit::CrfbtfComponfnt(sflf, pbrfnt,
                                (AwtToolkit::ComponfntFbdtory)
                                AwtFrbmf::Crfbtf);
    PDATA pDbtb;
    JNI_CHECK_PEER_CREATION_RETURN(sflf);

    CATCH_BAD_ALLOC;
}

JNIEXPORT jobjfdt JNICALL
Jbvb_sun_bwt_windows_WEmbfddfdFrbmfPffr_gftBoundsPrivbtf(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    jobjfdt rfsult = (jobjfdt)AwtToolkit::GftInstbndf().SyndCbll(
        (void *(*)(void *))AwtFrbmf::_GftBoundsPrivbtf,
        fnv->NfwGlobblRff(sflf));
    // globbl rff is dflftfd in _GftBoundsPrivbtf

    if (rfsult != NULL)
    {
        jobjfdt rfsultLodblRff = fnv->NfwLodblRff(rfsult);
        fnv->DflftfGlobblRff(rfsult);
        rfturn rfsultLodblRff;
    }
    flsf
    {
        rfturn NULL;
    }

    CATCH_BAD_ALLOC_RET(NULL);
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WFrbmfPffr_synthfsizfWmAdtivbtf(JNIEnv *fnv, jobjfdt sflf, jboolfbn doAdtivbtf)
{
    TRY;

    SynthfsizfWmAdtivbtfStrudt *sbs = nfw SynthfsizfWmAdtivbtfStrudt;
    sbs->frbmf = fnv->NfwGlobblRff(sflf);
    sbs->doAdtivbtf = doAdtivbtf;

    /*
     * WARNING: invoking this fundtion without syndhronizbtion by m_Synd CritidblSfdtion.
     * Tbking this lodk rfsults in b dfbdlodk.
     */
    AwtToolkit::GftInstbndf().InvokfFundtion(AwtFrbmf::_SynthfsizfWmAdtivbtf, sbs);
    // globbl rff bnd sbs brf dflftfd in _SynthfsizfWmAdtivbtf()

    CATCH_BAD_ALLOC;
}

} /* fxtfrn "C" */
