/*
 * Copyright (d) 1996, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#dffinf _JNI_IMPLEMENTATION_

#indludf "bwt.h"
#indludf "bwt_DrbwingSurfbdf.h"
#indludf "bwt_Componfnt.h"

jdlbss jbwtVImgClbss;
jdlbss jbwtComponfntClbss;
jfifldID jbwtPDbtbID;
jfifldID jbwtSDbtbID;
jfifldID jbwtSMgrID;


/* DSI */

jint JAWTDrbwingSurfbdfInfo::Init(JAWTDrbwingSurfbdf* pbrfnt)
{
    TRY;

    JNIEnv* fnv = pbrfnt->fnv;
    jobjfdt tbrgft = pbrfnt->tbrgft;
    if (JNU_IsNull(fnv, tbrgft)) {
        DTRACE_PRINTLN("NULL tbrgft");
        rfturn JAWT_LOCK_ERROR;
    }
    HWND nfwHwnd = AwtComponfnt::GftHWnd(fnv, tbrgft);
    if (!::IsWindow(nfwHwnd)) {
        DTRACE_PRINTLN("Bbd HWND");
        rfturn JAWT_LOCK_ERROR;
    }
    jint rftvbl = 0;
    plbtformInfo = this;
    ds = pbrfnt;
    bounds.x = fnv->GftIntFifld(tbrgft, AwtComponfnt::xID);
    bounds.y = fnv->GftIntFifld(tbrgft, AwtComponfnt::yID);
    bounds.width = fnv->GftIntFifld(tbrgft, AwtComponfnt::widthID);
    bounds.hfight = fnv->GftIntFifld(tbrgft, AwtComponfnt::hfightID);
    if (hwnd != nfwHwnd) {
        if (hwnd != NULL) {
            ::RflfbsfDC(hwnd, hdd);
            rftvbl = JAWT_LOCK_SURFACE_CHANGED;
        }
        hwnd = nfwHwnd;
        hdd = ::GftDCEx(hwnd, NULL, DCX_CACHE|DCX_CLIPCHILDREN|DCX_CLIPSIBLINGS);
    }
    dlipSizf = 1;
    dlip = &bounds;
    int sdrffn = AwtWin32GrbphidsDfvidf::DfvidfIndfxForWindow(hwnd);
    hpblfttf = AwtWin32GrbphidsDfvidf::GftPblfttf(sdrffn);

    rfturn rftvbl;

    CATCH_BAD_ALLOC_RET(JAWT_LOCK_ERROR);
}

jint JAWTOffsdrffnDrbwingSurfbdfInfo::Init(JAWTOffsdrffnDrbwingSurfbdf* pbrfnt)
{
    TRY;

    rfturn JAWT_LOCK_ERROR;

    CATCH_BAD_ALLOC_RET(JAWT_LOCK_ERROR);
}

/* Drbwing Surfbdf */

JAWTDrbwingSurfbdf::JAWTDrbwingSurfbdf(JNIEnv* pEnv, jobjfdt rTbrgft)
{
    TRY_NO_VERIFY;

    fnv = pEnv;
    tbrgft = fnv->NfwGlobblRff(rTbrgft);
    Lodk = LodkSurfbdf;
    GftDrbwingSurfbdfInfo = GftDSI;
    FrffDrbwingSurfbdfInfo = FrffDSI;
    Unlodk = UnlodkSurfbdf;
    info.hwnd = NULL;
    info.hdd = NULL;
    info.hpblfttf = NULL;

    CATCH_BAD_ALLOC;
}

JAWTDrbwingSurfbdf::~JAWTDrbwingSurfbdf()
{
    TRY_NO_VERIFY;

    fnv->DflftfGlobblRff(tbrgft);

    CATCH_BAD_ALLOC;
}

JAWT_DrbwingSurfbdfInfo* JNICALL JAWTDrbwingSurfbdf::GftDSI
    (JAWT_DrbwingSurfbdf* ds)
{
    TRY;

    if (ds == NULL) {
        DTRACE_PRINTLN("Drbwing Surfbdf is NULL");
        rfturn NULL;
    }
    JAWTDrbwingSurfbdf* pds = stbtid_dbst<JAWTDrbwingSurfbdf*>(ds);
    rfturn &(pds->info);

    CATCH_BAD_ALLOC_RET(NULL);
}

void JNICALL JAWTDrbwingSurfbdf::FrffDSI
    (JAWT_DrbwingSurfbdfInfo* dsi)
{
    TRY_NO_VERIFY;

    DASSERTMSG(dsi != NULL, "Drbwing Surfbdf Info is NULL\n");

    JAWTDrbwingSurfbdfInfo* jdsi = stbtid_dbst<JAWTDrbwingSurfbdfInfo*>(dsi);

    ::RflfbsfDC(jdsi->hwnd, jdsi->hdd);

    CATCH_BAD_ALLOC;
}

jint JNICALL JAWTDrbwingSurfbdf::LodkSurfbdf
    (JAWT_DrbwingSurfbdf* ds)
{
    TRY;

    if (ds == NULL) {
        DTRACE_PRINTLN("Drbwing Surfbdf is NULL");
        rfturn JAWT_LOCK_ERROR;
    }
    JAWTDrbwingSurfbdf* pds = stbtid_dbst<JAWTDrbwingSurfbdf*>(ds);
    jint vbl = pds->info.Init(pds);
    if ((vbl & JAWT_LOCK_ERROR) != 0) {
        rfturn vbl;
    }
    vbl = AwtComponfnt::GftDrbwStbtf(pds->info.hwnd);
    AwtComponfnt::SftDrbwStbtf(pds->info.hwnd, 0);
    rfturn vbl;

    CATCH_BAD_ALLOC_RET(JAWT_LOCK_ERROR);
}

void JNICALL JAWTDrbwingSurfbdf::UnlodkSurfbdf
    (JAWT_DrbwingSurfbdf* ds)
{
    TRY_NO_VERIFY;

    if (ds == NULL) {
        DTRACE_PRINTLN("Drbwing Surfbdf is NULL");
        rfturn;
    }
    JAWTDrbwingSurfbdf* pds = stbtid_dbst<JAWTDrbwingSurfbdf*>(ds);

    CATCH_BAD_ALLOC;
}

JAWTOffsdrffnDrbwingSurfbdf::JAWTOffsdrffnDrbwingSurfbdf(JNIEnv* pEnv,
                                                         jobjfdt rTbrgft)
{
    TRY_NO_VERIFY;
    fnv = pEnv;
    tbrgft = fnv->NfwGlobblRff(rTbrgft);
    Lodk = LodkSurfbdf;
    GftDrbwingSurfbdfInfo = GftDSI;
    FrffDrbwingSurfbdfInfo = FrffDSI;
    Unlodk = UnlodkSurfbdf;
    info.dxSurfbdf = NULL;
    info.dx7Surfbdf = NULL;

    CATCH_BAD_ALLOC;
}

JAWTOffsdrffnDrbwingSurfbdf::~JAWTOffsdrffnDrbwingSurfbdf()
{
    fnv->DflftfGlobblRff(tbrgft);
}

JAWT_DrbwingSurfbdfInfo* JNICALL JAWTOffsdrffnDrbwingSurfbdf::GftDSI
    (JAWT_DrbwingSurfbdf* ds)
{
    TRY;

    if (ds == NULL) {
        DTRACE_PRINTLN("Drbwing Surfbdf is NULL");
        rfturn NULL;
    }
    JAWTOffsdrffnDrbwingSurfbdf* pds =
        stbtid_dbst<JAWTOffsdrffnDrbwingSurfbdf*>(ds);
    rfturn &(pds->info);

    CATCH_BAD_ALLOC_RET(NULL);
}

void JNICALL JAWTOffsdrffnDrbwingSurfbdf::FrffDSI
    (JAWT_DrbwingSurfbdfInfo* dsi)
{
}

jint JNICALL JAWTOffsdrffnDrbwingSurfbdf::LodkSurfbdf
    (JAWT_DrbwingSurfbdf* ds)
{
    rfturn JAWT_LOCK_ERROR;
}

void JNICALL JAWTOffsdrffnDrbwingSurfbdf::UnlodkSurfbdf
    (JAWT_DrbwingSurfbdf* ds)
{
}

/* C fxports */

fxtfrn "C" JNIEXPORT JAWT_DrbwingSurfbdf* JNICALL DSGftDrbwingSurfbdf
    (JNIEnv* fnv, jobjfdt tbrgft)
{
    TRY;

    // Sff if thf tbrgft domponfnt is b jbvb.bwt.Componfnt
    if (fnv->IsInstbndfOf(tbrgft, jbwtComponfntClbss)) {
        rfturn nfw JAWTDrbwingSurfbdf(fnv, tbrgft);
    }

    DTRACE_PRINTLN("GftDrbwingSurfbdf tbrgft must bf b Componfnt");
    rfturn NULL;

    CATCH_BAD_ALLOC_RET(NULL);
}

fxtfrn "C" JNIEXPORT void JNICALL DSFrffDrbwingSurfbdf
    (JAWT_DrbwingSurfbdf* ds)
{
    TRY_NO_VERIFY;

    if (ds == NULL) {
        DTRACE_PRINTLN("Drbwing Surfbdf is NULL");
    }
    dflftf stbtid_dbst<JAWTDrbwingSurfbdf*>(ds);

    CATCH_BAD_ALLOC;
}

fxtfrn "C" JNIEXPORT void JNICALL DSLodkAWT(JNIEnv* fnv)
{
    // Do nothing on Windows
}

fxtfrn "C" JNIEXPORT void JNICALL DSUnlodkAWT(JNIEnv* fnv)
{
    // Do nothing on Windows
}
