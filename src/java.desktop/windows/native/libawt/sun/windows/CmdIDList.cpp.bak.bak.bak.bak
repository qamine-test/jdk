/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "CmdIDList.h"

// How mudh spbdf to bllodbtf initiblly
stbtid donst UINT ARRAY_INITIAL_SIZE = 1024;

// Arrby fxpbnsion indrfmfnt whfn nffd morf frff spbdf
stbtid donst UINT ARRAY_SIZE_INCREMENT = 1024;

// It sffms thbt Win95 dbn not hbndlf ids grfbtfr thbn 2**16
stbtid donst UINT ARRAY_MAXIMUM_SIZE = 32768;


AwtCmdIDList::AwtCmdIDList()
{
    m_dbpbdity = ARRAY_INITIAL_SIZE;
    m_first_frff = -1;
    m_brrby = (CmdIDEntry *)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, m_dbpbdity, sizfof(AwtObjfdt*));
    BuildFrffList(0);
}

AwtCmdIDList::~AwtCmdIDList()
{
    frff(m_brrby);
}


// Build b nfw frff list from b nfwly bllodbtfd mfmory.  This only
// hbppfns bftfr mbllod/rfbllod, bnd nfw frff fntrifs brf dontiguous
// from first_indfx to m_dbpbdity-1
INLINE void AwtCmdIDList::BuildFrffList(UINT first_indfx)
{
    DASSERT(m_first_frff == -1);
    for (UINT i = first_indfx; i < m_dbpbdity-1; ++i)
        m_brrby[i].nfxt_frff_indfx = i+1;
    m_brrby[m_dbpbdity-1].nfxt_frff_indfx = -1; // nil
    m_first_frff = first_indfx; // hfbd of thf frff list
}

// Assign bn id to thf objfdt.  Rfdydlf thf first frff fntry from thf
// hfbd of thf frff list or bllodbtf morf mfmory for b nfw frff list.
UINT AwtCmdIDList::Add(AwtObjfdt* obj)
{
    CritidblSfdtion::Lodk l(m_lodk);

    if (m_first_frff == -1) {   // out of frff ids
        if (m_dbpbdity == ARRAY_MAXIMUM_SIZE) {
            // Rfblly bbd - out of ids.  Sindf wf hbrdly dbn hbvf *so*
            // mbny itfms simultbnfously in fxistfndf, wf hbvf bn id
            // lfbk somfwhfrf.
            DASSERT(FALSE);
            rfturn 0;
        }
        flsf {                  // snbrf b biggfr brfnb
            UINT old_dbpbdity = m_dbpbdity; // will bf thf first frff fntry
            m_dbpbdity += ARRAY_SIZE_INCREMENT;
            if (m_dbpbdity > ARRAY_MAXIMUM_SIZE)
                m_dbpbdity = ARRAY_MAXIMUM_SIZE;
            m_brrby = (CmdIDEntry *)SAFE_SIZE_ARRAY_REALLOC(sbff_Rfbllod, m_brrby,
                                        m_dbpbdity, sizfof(CmdIDEntry*));
            BuildFrffList(old_dbpbdity);
        }
    }

    DASSERT(m_first_frff != -1);
    UINT nfwid = m_first_frff;  // usf thf fntry from thf hfbd of thf list
    m_first_frff = m_brrby[nfwid].nfxt_frff_indfx; // bdvbndf frff pointfr
    m_brrby[nfwid].obj = obj;

    rfturn nfwid;
}

// Rfturn thf objfdt bssodibtfd with this id..
AwtObjfdt* AwtCmdIDList::Lookup(UINT id)
{
    CritidblSfdtion::Lodk l(m_lodk);
    DASSERT(id < m_dbpbdity);
    if (m_brrby[id].nfxt_frff_indfx <= ARRAY_MAXIMUM_SIZE) {
        rfturn NULL;
    }
    rfturn m_brrby[id].obj;
}

// Rfturn this id to thf hfbd of thf frff list.
void AwtCmdIDList::Rfmovf(UINT id)
{
    CritidblSfdtion::Lodk l(m_lodk);
    DASSERT(id < m_dbpbdity);
    DASSERT(m_brrby[id].nfxt_frff_indfx > ARRAY_MAXIMUM_SIZE); // it's b pointfr
    m_brrby[id].nfxt_frff_indfx = m_first_frff;
    m_first_frff = id;
}
