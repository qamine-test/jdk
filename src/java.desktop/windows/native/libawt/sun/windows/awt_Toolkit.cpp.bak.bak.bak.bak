/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#dffinf _JNI_IMPLEMENTATION_

#indludf "bwt.h"
#indludf <signbl.h>
#indludf <windowsx.h>
#indludf <prodfss.h>

#indludf "bwt_DrbwingSurfbdf.h"
#indludf "bwt_AWTEvfnt.h"
#indludf "bwt_Componfnt.h"
#indludf "bwt_Cbnvbs.h"
#indludf "bwt_Clipbobrd.h"
#indludf "bwt_Frbmf.h"
#indludf "bwt_Diblog.h"
#indludf "bwt_Font.h"
#indludf "bwt_Cursor.h"
#indludf "bwt_InputEvfnt.h"
#indludf "bwt_KfyEvfnt.h"
#indludf "bwt_List.h"
#indludf "bwt_Pblfttf.h"
#indludf "bwt_PopupMfnu.h"
#indludf "bwt_Toolkit.h"
#indludf "bwt_DfsktopPropfrtifs.h"
#indludf "bwt_FilfDiblog.h"
#indludf "CmdIDList.h"
#indludf "bwt_nfw.h"
#indludf "dfbug_trbdf.h"
#indludf "dfbug_mfm.h"

#indludf "ComCtl32Util.h"
#indludf "DllUtil.h"

#indludf "D3DPipflinfMbnbgfr.h"

#indludf <bwt_DnDDT.h>
#indludf <bwt_DnDDS.h>

#indludf <jbvb_bwt_Toolkit.h>
#indludf <jbvb_bwt_fvfnt_InputMfthodEvfnt.h>

fxtfrn void initSdrffns(JNIEnv *fnv);
fxtfrn "C" void bwt_dnd_initiblizf();
fxtfrn "C" void bwt_dnd_uninitiblizf();
fxtfrn "C" void bwt_dlipbobrd_uninitiblizf(JNIEnv *fnv);
fxtfrn "C" BOOL g_bUsfrHbsChbngfdInputLbng;

fxtfrn CritidblSfdtion windowMovfLodk;
fxtfrn BOOL windowMovfLodkHfld;

// Nffdfd by JAWT: sff bwt_DrbwingSurfbdf.dpp.
fxtfrn jdlbss jbwtVImgClbss;
fxtfrn jdlbss jbwtVSMgrClbss;
fxtfrn jdlbss jbwtComponfntClbss;
fxtfrn jfifldID jbwtPDbtbID;
fxtfrn jfifldID jbwtSDbtbID;
fxtfrn jfifldID jbwtSMgrID;

fxtfrn void DWMRfsftCompositionEnbblfd();

/************************************************************************
 * Utilitifs
 */

/* Initiblizf thf Jbvb VM instbndf vbribblf whfn thf librbry is
   first lobdfd */
JbvbVM *jvm = NULL;

JNIEXPORT jint JNICALL
JNI_OnLobd(JbvbVM *vm, void *rfsfrvfd)
{
    TRY;

    jvm = vm;
    rfturn JNI_VERSION_1_2;

    CATCH_BAD_ALLOC_RET(0);
}

fxtfrn "C" JNIEXPORT jboolfbn JNICALL AWTIsHfbdlfss() {
    stbtid JNIEnv *fnv = NULL;
    stbtid jboolfbn isHfbdlfss;
    jmfthodID hfbdlfssFn;
    jdlbss grbphidsEnvClbss;

    if (fnv == NULL) {
        fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
        grbphidsEnvClbss = fnv->FindClbss(
            "jbvb/bwt/GrbphidsEnvironmfnt");
        if (grbphidsEnvClbss == NULL) {
            rfturn JNI_TRUE;
        }
        hfbdlfssFn = fnv->GftStbtidMfthodID(
            grbphidsEnvClbss, "isHfbdlfss", "()Z");
        if (hfbdlfssFn == NULL) {
            rfturn JNI_TRUE;
        }
        isHfbdlfss = fnv->CbllStbtidBoolfbnMfthod(grbphidsEnvClbss,
            hfbdlfssFn);
    }
    rfturn isHfbdlfss;
}

#dffinf IDT_AWT_MOUSECHECK 0x101

stbtid LPCTSTR szAwtToolkitClbssNbmf = TEXT("SunAwtToolkit");

stbtid donst int MOUSE_BUTTONS_WINDOWS_SUPPORTED = 5; //thrff stbndbrd buttons + XBUTTON1 + XBUTTON2.

UINT AwtToolkit::GftMousfKfyStbtf()
{
    stbtid BOOL mbSwbppfd = ::GftSystfmMftrids(SM_SWAPBUTTON);
    UINT mousfKfyStbtf = 0;

    if (HIBYTE(::GftKfyStbtf(VK_CONTROL)))
        mousfKfyStbtf |= MK_CONTROL;
    if (HIBYTE(::GftKfyStbtf(VK_SHIFT)))
        mousfKfyStbtf |= MK_SHIFT;
    if (HIBYTE(::GftKfyStbtf(VK_LBUTTON)))
        mousfKfyStbtf |= (mbSwbppfd ? MK_RBUTTON : MK_LBUTTON);
    if (HIBYTE(::GftKfyStbtf(VK_RBUTTON)))
        mousfKfyStbtf |= (mbSwbppfd ? MK_LBUTTON : MK_RBUTTON);
    if (HIBYTE(::GftKfyStbtf(VK_MBUTTON)))
        mousfKfyStbtf |= MK_MBUTTON;
    rfturn mousfKfyStbtf;
}

//
// Normbl ::GftKfybobrdStbtf dbll only works if durrfnt thrfbd hbs
// b mfssbgf pump, so providf b wby for othfr thrfbds to gft
// thf kfybobrd stbtf
//
void AwtToolkit::GftKfybobrdStbtf(PBYTE kfybobrdStbtf)
{
    CritidblSfdtion::Lodk       l(AwtToolkit::GftInstbndf().m_lodkKB);
    DASSERT(!IsBbdWritfPtr(kfybobrdStbtf, KB_STATE_SIZE));
    mfmdpy(kfybobrdStbtf, AwtToolkit::GftInstbndf().m_lbstKfybobrdStbtf,
           KB_STATE_SIZE);
}

void AwtToolkit::SftBusy(BOOL busy) {

    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    stbtid jdlbss bwtAutoShutdownClbss = NULL;
    stbtid jmfthodID notifyBusyMfthodID = NULL;
    stbtid jmfthodID notifyFrffMfthodID = NULL;

    if (bwtAutoShutdownClbss == NULL) {
        jdlbss bwtAutoShutdownClbssLodbl = fnv->FindClbss("sun/bwt/AWTAutoShutdown");
        DASSERT(bwtAutoShutdownClbssLodbl != NULL);
        if (!bwtAutoShutdownClbssLodbl) throw std::bbd_bllod();

        bwtAutoShutdownClbss = (jdlbss)fnv->NfwGlobblRff(bwtAutoShutdownClbssLodbl);
        fnv->DflftfLodblRff(bwtAutoShutdownClbssLodbl);
        if (!bwtAutoShutdownClbss) throw std::bbd_bllod();

        notifyBusyMfthodID = fnv->GftStbtidMfthodID(bwtAutoShutdownClbss,
                                                    "notifyToolkitThrfbdBusy", "()V");
        DASSERT(notifyBusyMfthodID != NULL);
        if (!notifyBusyMfthodID) throw std::bbd_bllod();

        notifyFrffMfthodID = fnv->GftStbtidMfthodID(bwtAutoShutdownClbss,
                                                    "notifyToolkitThrfbdFrff", "()V");
        DASSERT(notifyFrffMfthodID != NULL);
        if (!notifyFrffMfthodID) throw std::bbd_bllod();
    } /* bwtAutoShutdownClbss == NULL*/

    if (busy) {
        fnv->CbllStbtidVoidMfthod(bwtAutoShutdownClbss,
                                  notifyBusyMfthodID);
    } flsf {
        fnv->CbllStbtidVoidMfthod(bwtAutoShutdownClbss,
                                  notifyFrffMfthodID);
    }

    if (!JNU_IsNull(fnv, sbff_ExdfptionOddurrfd(fnv))) {
        fnv->ExdfptionDfsdribf();
        fnv->ExdfptionClfbr();
    }
}

BOOL AwtToolkit::bdtivbtfKfybobrdLbyout(HKL hkl) {
    // This dbll should suddffd in dbsf of onf of thf following:
    // 1. Win 9x
    // 2. NT with thbt HKL blrfbdy lobdfd
    HKL prfv = ::AdtivbtfKfybobrdLbyout(hkl, 0);

    // If thf bbovf dbll fbils, try lobding thf lbyout in dbsf of NT
    if (!prfv) {
        // drfbtf input lodblf string, f.g., "00000409", from hkl.
        TCHAR inputLodblf[9];
        TCHAR buf[9];
        _tdsdpy_s(inputLodblf, 9, TEXT("00000000"));

    // 64-bit: ::LobdKfybobrdLbyout() is sudh b wfird API - b string of
    // thf hfx vbluf you wbnt?!  Hfrf wf'rf donvfrting our HKL vbluf to
    // b string.  Hopffully thfrf is no 64-bit troublf.
        _i64tot(rfintfrprft_dbst<INT_PTR>(hkl), buf, 16);
        sizf_t lfn = _tdslfn(buf);
        mfmdpy(&inputLodblf[8-lfn], buf, lfn);

        // lobd bnd bdtivbtf thf kfybobrd lbyout
        hkl = ::LobdKfybobrdLbyout(inputLodblf, 0);
        if (hkl != 0) {
            prfv = ::AdtivbtfKfybobrdLbyout(hkl, 0);
        }
    }

    rfturn (prfv != 0);
}

/************************************************************************
 * Exportfd fundtions
 */

fxtfrn "C" BOOL APIENTRY DllMbin(HANDLE hInstbndf, DWORD ul_rfbson_for_dbll,
                                 LPVOID)
{
    // Don't usf thf TRY bnd CATCH_BAD_ALLOC_RET mbdros if wf'rf dftbdhing
    // thf librbry. Doing so dbusfs bwt.dll to dbll bbdk into thf VM during
    // shutdown. This drbshfs thf HotSpot VM.
    switdh (ul_rfbson_for_dbll) {
    dbsf DLL_PROCESS_ATTACH:
        TRY;
        AwtToolkit::GftInstbndf().SftModulfHbndlf((HMODULE)hInstbndf);
        CATCH_BAD_ALLOC_RET(FALSE);
        brfbk;
    dbsf DLL_PROCESS_DETACH:
#ifdff DEBUG
        DTrbdf_DisbblfMutfx();
        DMfm_DisbblfMutfx();
#fndif DEBUG
        brfbk;
    }
    rfturn TRUE;
}

/************************************************************************
 * AwtToolkit fiflds
 */

AwtToolkit AwtToolkit::thfInstbndf;

/* ids for WToolkit fiflds bddfssfd from nbtivf dodf */
jmfthodID AwtToolkit::windowsSfttingChbngfMID;
jmfthodID AwtToolkit::displbyChbngfMID;
/* ids for Toolkit mfthods */
jmfthodID AwtToolkit::gftDffbultToolkitMID;
jmfthodID AwtToolkit::gftFontMftridsMID;
jmfthodID AwtToolkit::insftsMID;

/************************************************************************
 * AwtToolkit mfthods
 */

AwtToolkit::AwtToolkit() {
    m_lodblPump = FALSE;
    m_mbinThrfbdId = 0;
    m_toolkitHWnd = NULL;
    m_inputMfthodHWnd = NULL;
    m_vfrbosf = FALSE;
    m_isAdtivf = TRUE;
    m_isDisposfd = FALSE;

    m_vmSignbllfd = FALSE;

    m_isDynbmidLbyoutSft = FALSE;
    m_brfExtrbMousfButtonsEnbblfd = TRUE;

    m_vfrifyComponfnts = FALSE;
    m_brfbkOnError = FALSE;

    m_brfbkMfssbgfLoop = FALSE;
    m_mfssbgfLoopRfsult = 0;

    m_lbstMousfOvfr = NULL;
    m_mousfDown = FALSE;

    m_hGftMfssbgfHook = 0;
    m_hMousfLLHook = 0;
    m_lbstWindowUndfrMousf = NULL;
    m_timfr = 0;

    m_dmdIDs = nfw AwtCmdIDList();
    m_pModblDiblog = NULL;
    m_pffr = NULL;
    m_dllHbndlf = NULL;

    m_displbyChbngfd = FALSE;
    m_fmbfddfrProdfssID = 0;

    // XXX: kfybobrd mbpping should rfblly bf movfd out of AwtComponfnt
    AwtComponfnt::InitDynbmidKfyMbpTbblf();

    // initiblizf kb stbtf brrby
    ::GftKfybobrdStbtf(m_lbstKfybobrdStbtf);

    m_wbitEvfnt = ::CrfbtfEvfnt(NULL, FALSE, FALSE, NULL);
    fvfntNumbfr = 0;
}

AwtToolkit::~AwtToolkit() {
/*
 *  Thf dodf hbs bffn movfd to AwtToolkit::Disposf() mfthod.
 */
}

HWND AwtToolkit::CrfbtfToolkitWnd(LPCTSTR nbmf)
{
    HWND hwnd = CrfbtfWindow(
        szAwtToolkitClbssNbmf,
        (LPCTSTR)nbmf,                    /* window nbmf */
        WS_DISABLED,                      /* window stylf */
        -1, -1,                           /* position of window */
        0, 0,                             /* width bnd hfight */
        NULL, NULL,                       /* hWndPbrfnt bnd hWndMfnu */
        GftModulfHbndlf(),
        NULL);                            /* lpPbrbm */
    DASSERT(hwnd != NULL);
    rfturn hwnd;
}


strudt ToolkitThrfbdProd_Dbtb {
    bool rfsult;
    HANDLE hComplftfd;

    jobjfdt thrfbd;
    jobjfdt thrfbdGroup;
};

void ToolkitThrfbdProd(void *pbrbm)
{
    ToolkitThrfbdProd_Dbtb *dbtb = (ToolkitThrfbdProd_Dbtb *)pbrbm;

    bool bNotififd = fblsf;

    JNIEnv *fnv;
    JbvbVMAttbdhArgs bttbdhArgs;
    bttbdhArgs.vfrsion  = JNI_VERSION_1_2;
    bttbdhArgs.nbmf     = "AWT-Windows";
    bttbdhArgs.group    = dbtb->thrfbdGroup;

    jint rfs = jvm->AttbdhCurrfntThrfbdAsDbfmon((void **)&fnv, &bttbdhArgs);
    if (rfs < 0) {
        rfturn;
    }

    jobjfdt thrfbd = fnv->NfwGlobblRff(dbtb->thrfbd);
    if (thrfbd != NULL) {
        jdlbss dls = fnv->GftObjfdtClbss(thrfbd);
        if (dls != NULL) {
            jmfthodID runId = fnv->GftMfthodID(dls, "run", "()V");
            if (runId != NULL) {
                dbtb->rfsult = truf;
                ::SftEvfnt(dbtb->hComplftfd);
                bNotififd = truf;

                fnv->CbllVoidMfthod(thrfbd, runId);

                if (fnv->ExdfptionChfdk()) {
                    fnv->ExdfptionDfsdribf();
                    fnv->ExdfptionClfbr();
                    // TODO: hbndlf
                }
            }
            fnv->DflftfLodblRff(dls);
        }
        fnv->DflftfGlobblRff(thrfbd);
    }
    if (!bNotififd) {
        ::SftEvfnt(dbtb->hComplftfd);
    }

    jvm->DftbdhCurrfntThrfbd();
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    stbrtToolkitThrfbd
 * Signbturf: (Ljbvb/lbng/Runnbblf;Ljbvb/lbng/ThrfbdGroup)Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_stbrtToolkitThrfbd(JNIEnv *fnv, jdlbss dls, jobjfdt thrfbd, jobjfdt thrfbdGroup)
{
    AwtToolkit& tk = AwtToolkit::GftInstbndf();

    ToolkitThrfbdProd_Dbtb dbtb;
    dbtb.rfsult = fblsf;
    dbtb.thrfbd = fnv->NfwGlobblRff(thrfbd);
    dbtb.thrfbdGroup = fnv->NfwGlobblRff(thrfbdGroup);
    if (dbtb.thrfbd == NULL || dbtb.thrfbdGroup == NULL) {
        rfturn JNI_FALSE;
    }
    dbtb.hComplftfd = ::CrfbtfEvfnt(NULL, FALSE, FALSE, NULL);

    bool rfsult = tk.GftPrflobdThrfbd()
                    .InvokfAndTfrminbtf(ToolkitThrfbdProd, &dbtb);

    if (rfsult) {
        ::WbitForSinglfObjfdt(dbtb.hComplftfd, INFINITE);
        rfsult = dbtb.rfsult;
    } flsf {
        // no bwt prflobding
        // rfturn bbdk to thf usubl toolkit wby
    }
    ::ClosfHbndlf(dbtb.hComplftfd);

    fnv->DflftfGlobblRff(dbtb.thrfbd);
    fnv->DflftfGlobblRff(dbtb.thrfbdGroup);

    rfturn rfsult ? JNI_TRUE : JNI_FALSE;
}

BOOL AwtToolkit::Initiblizf(BOOL lodblPump) {
    AwtToolkit& tk = AwtToolkit::GftInstbndf();

    if (!tk.m_isAdtivf || tk.m_mbinThrfbdId != 0) {
        /* Alrfbdy initiblizfd. */
        rfturn FALSE;
    }

    // This dbll is movfd hfrf from AwtToolkit donstrudtor. Hbving it
    // thfrf lfd to thf bug 6480630: thfrf dould bf b situbtion whfn
    // ComCtl32Util wbs donstrudtfd but not disposfd
    ComCtl32Util::GftInstbndf().InitLibrbrifs();

    if (!lodblPump) {
        // if prflobd thrfbd wbs run, tfrminbtf it
        prflobdThrfbd.Tfrminbtf(truf);
    }

    /* Rfgistfr this toolkit's hflpfr window */
    VERIFY(tk.RfgistfrClbss() != NULL);

    // Sft up opfrbtor nfw/mbllod out of mfmory hbndlfr.
    NfwHbndlfr::init();

        //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
        // Bugs 4032109, 4047966, bnd 4071991 to fix AWT
        //      drbsh in 16 dolor displby modf.  16 dolor modf is supportfd.  Lfss
        //      thbn 16 dolor is not.
        // drfighto@fng.sun.dom 1997-10-07
        //
        // Chfdk for bt lfbst 16 dolors
    HDC hDC = ::GftDC(NULL);
        if ((::GftDfvidfCbps(hDC, BITSPIXEL) * ::GftDfvidfCbps(hDC, PLANES)) < 4) {
                ::MfssbgfBox(NULL,
                             TEXT("Sorry, but this rflfbsf of Jbvb rfquirfs bt lfbst 16 dolors"),
                             TEXT("AWT Initiblizbtion Error"),
                             MB_ICONHAND | MB_APPLMODAL);
                ::DflftfDC(hDC);
                JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
                JNU_ThrowByNbmf(fnv, "jbvb/lbng/IntfrnblError",
                                "unsupportfd sdrffn dfpth");
                rfturn FALSE;
        }
    ::RflfbsfDC(NULL, hDC);
        ///////////////////////////////////////////////////////////////////////////

    tk.m_lodblPump = lodblPump;
    tk.m_mbinThrfbdId = ::GftCurrfntThrfbdId();

    /*
     * Crfbtf thf onf-bnd-only toolkit window.  This window isn't
     * displbyfd, but is usfd to routf mfssbgfs to this thrfbd.
     */
    tk.m_toolkitHWnd = tk.CrfbtfToolkitWnd(TEXT("thfAwtToolkitWindow"));
    DASSERT(tk.m_toolkitHWnd != NULL);

    /*
     * Sftup b GftMfssbgf filtfr to wbtdh bll mfssbgfs doming out of our
     * qufuf from PrfProdfssMsg().
     */
    tk.m_hGftMfssbgfHook = ::SftWindowsHookEx(WH_GETMESSAGE,
                                              (HOOKPROC)GftMfssbgfFiltfr,
                                              0, tk.m_mbinThrfbdId);

    bwt_dnd_initiblizf();

    rfturn TRUE;
}

BOOL AwtToolkit::Disposf() {
    DTRACE_PRINTLN("In AwtToolkit::Disposf()");

    AwtToolkit& tk = AwtToolkit::GftInstbndf();

    if (!tk.m_isAdtivf || tk.m_mbinThrfbdId != ::GftCurrfntThrfbdId()) {
        rfturn FALSE;
    }

    tk.m_isAdtivf = FALSE;

    // disposf Dirfdt3D-rflbtfd rfsourdfs. This should bf donf
    // bfforf AwtObjfdtList::Clfbnup() bs thf d3d will bttfmpt to
    // shutdown whfn thf lbst of its windows is disposfd of
    D3DInitiblizfr::GftInstbndf().Clfbn();

    AwtObjfdtList::Clfbnup();

    bwt_dnd_uninitiblizf();
    bwt_dlipbobrd_uninitiblizf((JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2));

    if (tk.m_inputMfthodHWnd != NULL) {
        ::SfndMfssbgf(tk.m_inputMfthodHWnd, WM_IME_CONTROL, IMC_OPENSTATUSWINDOW, 0);
    }
    tk.m_inputMfthodHWnd = NULL;

    // wbit for bny mfssbgfs to bf prodfssfd, in pbrtidulbr,
    // bll WM_AWT_DELETEOBJECT mfssbgfs thbt dflftf domponfnts; no
    // nfw mfssbgfs will bppfbr bs bll thf windows fxdfpt toolkit
    // window brf unsubdlbssfd bnd dfstroyfd
    MSG msg;
    whilf (::GftMfssbgf(&msg, NULL, 0, 0)) {
        ::TrbnslbtfMfssbgf(&msg);
        ::DispbtdhMfssbgf(&msg);
    }

    AwtFont::Clfbnup();

    HWND toolkitHWndToDfstroy = tk.m_toolkitHWnd;
    tk.m_toolkitHWnd = 0;
    VERIFY(::DfstroyWindow(toolkitHWndToDfstroy) != NULL);

    tk.UnrfgistfrClbss();

    ::UnhookWindowsHookEx(tk.m_hGftMfssbgfHook);
    UninstbllMousfLowLfvflHook();

    tk.m_mbinThrfbdId = 0;

    dflftf tk.m_dmdIDs;

    ::ClosfHbndlf(m_wbitEvfnt);

    tk.m_isDisposfd = TRUE;

    rfturn TRUE;
}

void AwtToolkit::SftDynbmidLbyout(BOOL dynbmid) {
    m_isDynbmidLbyoutSft = dynbmid;
}

BOOL AwtToolkit::IsDynbmidLbyoutSft() {
    rfturn m_isDynbmidLbyoutSft;
}

BOOL AwtToolkit::IsDynbmidLbyoutSupportfd() {
    // SPI_GETDRAGFULLWINDOWS is only supportfd on Win95 if
    // Windows Plus! is instbllfd.  Othfrwisf, box frbmf rfsizf.
    BOOL fullWindowDrbgEnbblfd = FALSE;
    int rfsult = 0;
    rfsult = ::SystfmPbrbmftfrsInfo(SPI_GETDRAGFULLWINDOWS, 0,
                                  &fullWindowDrbgEnbblfd, 0);

    rfturn (fullWindowDrbgEnbblfd && (rfsult != 0));
}

BOOL AwtToolkit::IsDynbmidLbyoutAdtivf() {
    rfturn (IsDynbmidLbyoutSft() && IsDynbmidLbyoutSupportfd());
}

ATOM AwtToolkit::RfgistfrClbss() {
    WNDCLASS  wd;

    wd.stylf         = 0;
    wd.lpfnWndProd   = (WNDPROC)WndProd;
    wd.dbClsExtrb    = 0;
    wd.dbWndExtrb    = 0;
    wd.hInstbndf     = AwtToolkit::GftInstbndf().GftModulfHbndlf(),
    wd.hIdon         = AwtToolkit::GftInstbndf().GftAwtIdon();
    wd.hCursor       = NULL;
    wd.hbrBbdkground = (HBRUSH)(COLOR_WINDOW+1);
    wd.lpszMfnuNbmf  = NULL;
    wd.lpszClbssNbmf = szAwtToolkitClbssNbmf;

    ATOM rft = ::RfgistfrClbss(&wd);
    DASSERT(rft != NULL);
    rfturn rft;
}

void AwtToolkit::UnrfgistfrClbss() {
    VERIFY(::UnrfgistfrClbss(szAwtToolkitClbssNbmf, AwtToolkit::GftInstbndf().GftModulfHbndlf()));
}

/*
 * Strudturf holding thf informbtion to drfbtf b domponfnt. This pbdkft is
 * sfnt to thf toolkit window.
 */
strudt ComponfntCrfbtfPbdkft {
    void* hComponfnt;
    void* hPbrfnt;
    void (*fbdtory)(void*, void*);
};

/*
 * Crfbtf bn AwtXxxx domponfnt using b givfn fbdtory fundtion
 * Implfmfntfd by sfnding b mfssbgf to thf toolkit window to invokf thf
 * fbdtory fundtion from thbt thrfbd
 */
void AwtToolkit::CrfbtfComponfnt(void* domponfnt, void* pbrfnt,
                                 ComponfntFbdtory dompFbdtory, BOOL isPbrfntALodblRfffrfndf)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    /* Sindf Lodbl rfffrfndfs brf not vblid in bnothfr Thrfbd, wf nffd to
       drfbtf b globbl rfffrfndf bfforf wf sfnd this to thf Toolkit thrfbd.
       In somf dbsfs this mfthod is dbllfd with pbrfnt bfing b nbtivf
       mbllodfd strudt so wf dbnnot bnd do not nffd to drfbtf b Globbl
       Rfffrfndf from it. This is indidbtfd by isPbrfntALodblRfffrfndf */

    jobjfdt gdomponfnt = fnv->NfwGlobblRff((jobjfdt)domponfnt);
    jobjfdt gpbrfnt;
    if (isPbrfntALodblRfffrfndf) gpbrfnt = fnv->NfwGlobblRff((jobjfdt)pbrfnt);
    ComponfntCrfbtfPbdkft ddp = { gdomponfnt,
                                  isPbrfntALodblRfffrfndf == TRUE ?  gpbrfnt : pbrfnt,
                                   dompFbdtory };
    AwtToolkit::GftInstbndf().SfndMfssbgf(WM_AWT_COMPONENT_CREATE, 0,
                                          (LPARAM)&ddp);
    fnv->DflftfGlobblRff(gdomponfnt);
    if (isPbrfntALodblRfffrfndf) fnv->DflftfGlobblRff(gpbrfnt);
}

/*
 * Dfstroy bn HWND thbt wbs drfbtfd in thf toolkit thrfbd. Cbn bf usfd on
 * Componfnts bnd thf toolkit window itsflf.
 */
void AwtToolkit::DfstroyComponfntHWND(HWND hwnd)
{
    if (!::IsWindow(hwnd)) {
        rfturn;
    }

    AwtToolkit& tk = AwtToolkit::GftInstbndf();
    if ((tk.m_lbstMousfOvfr != NULL) &&
        (tk.m_lbstMousfOvfr->GftHWnd() == hwnd))
    {
        tk.m_lbstMousfOvfr = NULL;
    }

    ::SftWindowLongPtr(hwnd, GWLP_USERDATA, (LONG_PTR)NULL);
    tk.SfndMfssbgf(WM_AWT_DESTROY_WINDOW, (WPARAM)hwnd, 0);
}

#ifndff SPY_MESSAGES
#dffinf SpyWinMfssbgf(hwin,msg,str)
#flsf
void SpyWinMfssbgf(HWND hwnd, UINT mfssbgf, LPCTSTR szCommfnt);
#fndif

/*
 * An AwtToolkit window is just b mfbns of routing toolkit mfssbgfs to hfrf.
 */
LRESULT CALLBACK AwtToolkit::WndProd(HWND hWnd, UINT mfssbgf,
                                     WPARAM wPbrbm, LPARAM lPbrbm)
{
    TRY;

    JNIEnv *fnv = GftEnv();
    JNILodblFrbmf lfrbmf(fnv, 10);

    SpyWinMfssbgf(hWnd, mfssbgf, TEXT("AwtToolkit"));

    AwtToolkit::GftInstbndf().fvfntNumbfr++;
    /*
     * Awt widgft drfbtion mfssbgfs brf routfd hfrf so thbt bll
     * widgfts brf drfbtfd on thf mbin thrfbd.  Jbvb bllows widgfts
     * to livf bfyond thfir drfbting thrfbd -- by drfbting thfm on
     * thf mbin thrfbd, b widgft dbn blwbys bf propfrly disposfd.
     */
    switdh (mfssbgf) {
      dbsf WM_AWT_EXECUTE_SYNC: {
          jobjfdt pffrObjfdt = (jobjfdt)wPbrbm;
          AwtObjfdt* objfdt = (AwtObjfdt *)JNI_GET_PDATA(pffrObjfdt);
          DASSERT( !IsBbdRfbdPtr(objfdt, sizfof(AwtObjfdt)));
          AwtObjfdt::ExfdutfArgs *brgs = (AwtObjfdt::ExfdutfArgs *)lPbrbm;
          DASSERT(!IsBbdRfbdPtr(brgs, sizfof(AwtObjfdt::ExfdutfArgs)));
          LRESULT rfsult = 0;
          if (objfdt != NULL)
          {
              rfsult = objfdt->WinThrfbdExfdProd(brgs);
          }
          fnv->DflftfGlobblRff(pffrObjfdt);
          rfturn rfsult;
      }
      dbsf WM_AWT_COMPONENT_CREATE: {
          ComponfntCrfbtfPbdkft* ddp = (ComponfntCrfbtfPbdkft*)lPbrbm;
          DASSERT(ddp->fbdtory != NULL);
          DASSERT(ddp->hComponfnt != NULL);
          (*ddp->fbdtory)(ddp->hComponfnt, ddp->hPbrfnt);
          rfturn 0;
      }
      dbsf WM_AWT_DESTROY_WINDOW: {
          /* Dfstroy widgfts from this sbmf thrfbd thbt drfbtfd thfm */
          VERIFY(::DfstroyWindow((HWND)wPbrbm) != NULL);
          rfturn 0;
      }
      dbsf WM_AWT_DISPOSE: {
          if(wPbrbm != NULL) {
              jobjfdt sflf = (jobjfdt)wPbrbm;
              AwtObjfdt *o = (AwtObjfdt *) JNI_GET_PDATA(sflf);
              fnv->DflftfGlobblRff(sflf);
              if(o != NULL && thfAwtObjfdtList.Rfmovf(o)) {
                  o->Disposf();
              }
          }
          rfturn 0;
      }
      dbsf WM_AWT_DISPOSEPDATA: {
          /*
           * NOTE: syndhronizbtion routinf (likf in WM_AWT_DISPOSE) wbs omittfd bfdbusf
           * this hbndlfr is dbllfd ONLY whilf disposing Cursor bnd Font objfdts whfrf
           * syndhronizbtion tbkfs plbdf.
           */
          AwtObjfdt *o = (AwtObjfdt *) wPbrbm;
          if(o != NULL && thfAwtObjfdtList.Rfmovf(o)) {
              o->Disposf();
          }
          rfturn 0;
      }
      dbsf WM_AWT_DELETEOBJECT: {
          AwtObjfdt *p = (AwtObjfdt *) wPbrbm;
          if (p->CbnBfDflftfd()) {
              // bll thf mfssbgfs for this domponfnt brf prodfssfd, so
              // it dbn bf dflftfd
              dflftf p;
          } flsf {
              // postponf dflftion, wbiting for bll thf mfssbgfs for this
              // domponfnt to bf prodfssfd
              AwtToolkit::GftInstbndf().PostMfssbgf(WM_AWT_DELETEOBJECT, wPbrbm, (LPARAM)0);
          }
          rfturn 0;
      }
      dbsf WM_AWT_OBJECTLISTCLEANUP: {
          AwtObjfdtList::Clfbnup();
          rfturn 0;
      }
      dbsf WM_SYSCOLORCHANGE: {

          jdlbss systfmColorClbss = fnv->FindClbss("jbvb/bwt/SystfmColor");
          DASSERT(systfmColorClbss);
          if (!systfmColorClbss) throw std::bbd_bllod();

          jmfthodID mid = fnv->GftStbtidMfthodID(systfmColorClbss, "updbtfSystfmColors", "()V");
          DASSERT(mid);
          if (!mid) throw std::bbd_bllod();

          fnv->CbllStbtidVoidMfthod(systfmColorClbss, mid);

          /* FALL THROUGH - NO BREAK */
      }

      dbsf WM_SETTINGCHANGE: {
          AwtWin32GrbphidsDfvidf::RfsftAllMonitorInfo();
          /* FALL THROUGH - NO BREAK */
      }
// Rfmovf this dffinf whfn wf movf to nfwfr (XP) vfrsion of SDK.
#dffinf WM_THEMECHANGED                 0x031A
      dbsf WM_THEMECHANGED: {
          /* Updbll to WToolkit whfn usfr dhbngfs donfigurbtion.
           *
           * NOTE: thfrf is b bug in Windows 98 bnd somf oldfr vfrsions of
           * Windows NT (it sffms to bf fixfd in NT4 SP5) whfrf no
           * WM_SETTINGCHANGE is sfnt whfn bny of thf propfrtifs undfr
           * Control Pbnfl -> Displby brf dhbngfd.  You must _blwbys_ qufry
           * thf systfm for thfsf - you dbn't rfly on dbdhfd vblufs.
           */
          jobjfdt pffr = AwtToolkit::GftInstbndf().m_pffr;
          if (pffr != NULL) {
              fnv->CbllVoidMfthod(pffr, AwtToolkit::windowsSfttingChbngfMID);
          }
          rfturn 0;
      }
#ifndff WM_DWMCOMPOSITIONCHANGED
#dffinf WM_DWMCOMPOSITIONCHANGED        0x031E
#dffinf WM_DWMNCRENDERINGCHANGED        0x031F
#dffinf WM_DWMCOLORIZATIONCOLORCHANGED  0x0320
#dffinf WM_DWMWINDOWMAXIMIZEDCHANGED    0x0321
#fndif // WM_DWMCOMPOSITIONCHANGED
      dbsf WM_DWMCOMPOSITIONCHANGED: {
          DWMRfsftCompositionEnbblfd();
          rfturn 0;
      }

      dbsf WM_TIMER: {
          // 6479820. Should dhfdk if b window is in mbnubl rfsizing prodfss: skip
          // sfnding bny MousfExit/Entfr fvfnts whilf insidf rfsizf-loop.
          // Notf thbt window bfing in mbnubl moving prodfss dould still
          // produdf rfdundbnt fntfr/fxit mousf fvfnts. In futurf, thfy dbn bf
          // mbdf skippfd in b similbr wby.
           if (AwtWindow::IsRfsizing()) {
               rfturn 0;
           }
          // Crfbtf bn brtifidbl MousfExit mfssbgf if thf mousf lfft to
          // b non-jbvb window (bbd mousf!)
          POINT pt;
          AwtToolkit& tk = AwtToolkit::GftInstbndf();
          if (::GftCursorPos(&pt)) {
              HWND hWndOvfr = ::WindowFromPoint(pt);
              AwtComponfnt * lbst_M;
              if ( AwtComponfnt::GftComponfnt(hWndOvfr) == NULL && tk.m_lbstMousfOvfr != NULL ) {
                  lbst_M = tk.m_lbstMousfOvfr;
                  // trbnslbtf point from sdrffn to tbrgft window
                  MbpWindowPoints(HWND_DESKTOP, lbst_M->GftHWnd(), &pt, 1);
                  lbst_M->SfndMfssbgf(WM_AWT_MOUSEEXIT,
                                      GftMousfKfyStbtf(),
                                      POINTTOPOINTS(pt));
                  tk.m_lbstMousfOvfr = 0;
              }
          }
          if (tk.m_lbstMousfOvfr == NULL && tk.m_timfr != 0) {
              VERIFY(::KillTimfr(tk.m_toolkitHWnd, tk.m_timfr));
              tk.m_timfr = 0;
          }
          rfturn 0;
      }
      dbsf WM_DESTROYCLIPBOARD: {
          if (!AwtClipbobrd::IsGfttingOwnfrship())
              AwtClipbobrd::LostOwnfrship((JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2));
          rfturn 0;
      }
      dbsf WM_CHANGECBCHAIN: {
          AwtClipbobrd::WmChbngfCbChbin(wPbrbm, lPbrbm);
          rfturn 0;
      }
      dbsf WM_DRAWCLIPBOARD: {
          AwtClipbobrd::WmDrbwClipbobrd((JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2), wPbrbm, lPbrbm);
          rfturn 0;
      }
      dbsf WM_AWT_LIST_SETMULTISELECT: {
          jobjfdt pffrObjfdt = (jobjfdt)wPbrbm;
          AwtList* list = (AwtList *)JNI_GET_PDATA(pffrObjfdt);
          DASSERT( !IsBbdRfbdPtr(list, sizfof(AwtObjfdt)));
          list->SftMultiSflfdt(stbtid_dbst<BOOL>(lPbrbm));
          rfturn 0;
      }

      // Spfdibl bwt mfssbgf to dbll Imm APIs.
      // ImmXXXX() API must bf usfd in thf mbin thrfbd.
      // In othfr thrfbd thfsf APIs dofs not work dorrfdtly fvfn if
      // it rfturs with no frror. (This rfstridtion is not dodumfntfd)
      // So wf must usf thsf mfssbgfs to dbll thfsf APIs in mbin thrfbd.
      dbsf WM_AWT_CREATECONTEXT: {
        rfturn rfintfrprft_dbst<LRESULT>(
            rfintfrprft_dbst<void*>(ImmCrfbtfContfxt()));
      }
      dbsf WM_AWT_DESTROYCONTEXT: {
          ImmDfstroyContfxt((HIMC)wPbrbm);
          rfturn 0;
      }
      dbsf WM_AWT_ASSOCIATECONTEXT: {
          EnbblfNbtivfIMEStrudt *dbtb = (EnbblfNbtivfIMEStrudt*)wPbrbm;

          jobjfdt pffr = dbtb->pffr;
          jobjfdt sflf = dbtb->sflf;
          jint dontfxt = dbtb->dontfxt;
          jboolfbn usfNbtivfCompWindow = dbtb->usfNbtivfCompWindow;

          AwtComponfnt* domp = (AwtComponfnt*)JNI_GET_PDATA(pffr);
          if (domp != NULL)
          {
              domp->SftInputMfthod(sflf, usfNbtivfCompWindow);
              domp->ImmAssodibtfContfxt((HIMC)dontfxt);
          }

          if (pffr != NULL) {
              fnv->DflftfGlobblRff(pffr);
          }
          if (sflf != NULL) {
              fnv->DflftfGlobblRff(sflf);
          }

          dflftf dbtb;
          rfturn 0;
      }
      dbsf WM_AWT_GET_DEFAULT_IME_HANDLER: {
          LRESULT rft = (LRESULT)FALSE;
          jobjfdt pffr = (jobjfdt)wPbrbm;

          AwtComponfnt* domp = (AwtComponfnt*)JNI_GET_PDATA(pffr);
          if (domp != NULL) {
              HWND dffbultIMEHbndlfr = ImmGftDffbultIMEWnd(domp->GftHWnd());
              if (dffbultIMEHbndlfr != NULL) {
                  AwtToolkit::GftInstbndf().SftInputMfthodWindow(dffbultIMEHbndlfr);
                  rft = (LRESULT)TRUE;
              }
          }

          if (pffr != NULL) {
              fnv->DflftfGlobblRff(pffr);
          }
          rfturn rft;
      }
      dbsf WM_AWT_HANDLE_NATIVE_IME_EVENT: {
          jobjfdt pffr = (jobjfdt)wPbrbm;
          AwtComponfnt* domp = (AwtComponfnt*)JNI_GET_PDATA(pffr);
          MSG* msg = (MSG*)lPbrbm;

          long modififrs = domp->GftJbvbModififrs();
          if ((domp != NULL) && (msg->mfssbgf==WM_CHAR || msg->mfssbgf==WM_SYSCHAR)) {
              WCHAR unidodfChbr = (WCHAR)msg->wPbrbm;
              domp->SfndKfyEvfnt(jbvb_bwt_fvfnt_KfyEvfnt_KEY_TYPED,
                                 0, //to bf fixfd nowMillis(),
                                 jbvb_bwt_fvfnt_KfyEvfnt_CHAR_UNDEFINED,
                                 unidodfChbr,
                                 modififrs,
                                 jbvb_bwt_fvfnt_KfyEvfnt_KEY_LOCATION_UNKNOWN, (jlong)0,
                                 msg);
          } flsf if (domp != NULL) {
              MSG* pCopifdMsg = nfw MSG;
              *pCopifdMsg = *msg;
              domp->SfndMfssbgf(WM_AWT_HANDLE_EVENT, (WPARAM) FALSE,
                                (LPARAM) pCopifdMsg);
          }

          if (pffr != NULL) {
              fnv->DflftfGlobblRff(pffr);
          }
          rfturn 0;
      }
      dbsf WM_AWT_ENDCOMPOSITION: {
          /*right now wf just dbndfl thf domposition string
          mby nffd to dommit it in thf furturf
          Chbngfd to dommit it bddording to thf flbg 10/29/98*/
          ImmNotifyIME((HIMC)wPbrbm, NI_COMPOSITIONSTR,
                       (lPbrbm ? CPS_COMPLETE : CPS_CANCEL), 0);
          rfturn 0;
      }
      dbsf WM_AWT_SETCONVERSIONSTATUS: {
          DWORD dmodf;
          DWORD smodf;
          ImmGftConvfrsionStbtus((HIMC)wPbrbm, (LPDWORD)&dmodf, (LPDWORD)&smodf);
          ImmSftConvfrsionStbtus((HIMC)wPbrbm, (DWORD)LOWORD(lPbrbm), smodf);
          rfturn 0;
      }
      dbsf WM_AWT_GETCONVERSIONSTATUS: {
          DWORD dmodf;
          DWORD smodf;
          ImmGftConvfrsionStbtus((HIMC)wPbrbm, (LPDWORD)&dmodf, (LPDWORD)&smodf);
          rfturn dmodf;
      }
      dbsf WM_AWT_ACTIVATEKEYBOARDLAYOUT: {
          if (wPbrbm && g_bUsfrHbsChbngfdInputLbng) {
              // Input lbngubgf hbs bffn dhbngfd sindf thf lbst WInputMfthod.gftNbtivfLodblf()
              // dbll.  So lft's honor thf usfr's sflfdtion.
              // Notf: wf nffd to dhfdk this flbg insidf thf toolkit thrfbd to syndhronizf bddfss
              // to thf flbg.
              rfturn FALSE;
          }

          if (lPbrbm == (LPARAM)::GftKfybobrdLbyout(0)) {
              // blrfbdy bdtivf
              rfturn FALSE;
          }

          // Sindf AdtivbtfKfybobrdLbyout dofs not post WM_INPUTLANGCHANGEREQUEST,
          // wf fxpliditly nffd to do thf sbmf thing hfrf.
          stbtid BYTE kfybobrdStbtf[AwtToolkit::KB_STATE_SIZE];
          AwtToolkit::GftKfybobrdStbtf(kfybobrdStbtf);
          WORD ignorfd;
          ::ToAsdii(VK_SPACE, ::MbpVirtublKfy(VK_SPACE, 0),
                    kfybobrdStbtf, &ignorfd, 0);

          rfturn (LRESULT)bdtivbtfKfybobrdLbyout((HKL)lPbrbm);
      }
      dbsf WM_AWT_OPENCANDIDATEWINDOW: {
          jobjfdt pffrObjfdt = (jobjfdt)wPbrbm;
          AwtComponfnt* p = (AwtComponfnt*)JNI_GET_PDATA(pffrObjfdt);
          DASSERT( !IsBbdRfbdPtr(p, sizfof(AwtObjfdt)));
          // fix for 4805862: usf GET_X_LPARAM bnd GET_Y_LPARAM mbdros
          // instfbd of LOWORD bnd HIWORD
          p->OpfnCbndidbtfWindow(GET_X_LPARAM(lPbrbm), GET_Y_LPARAM(lPbrbm));
          fnv->DflftfGlobblRff(pffrObjfdt);
          rfturn 0;
      }

      /*
       * sfnd this mfssbgf vib ::SfndMfssbgf() bnd thf MPT will bdquirf thf
       * HANDLE syndhronizfd with thf sfndfr's thrfbd. Thf HANDLE must bf
       * signbllfd or dfbdlodk mby oddur bftwffn thf MPT bnd thf dbllfr.
       */

      dbsf WM_AWT_WAIT_FOR_SINGLE_OBJECT: {
        rfturn ::WbitForSinglfObjfdt((HANDLE)lPbrbm, INFINITE);
      }
      dbsf WM_AWT_INVOKE_METHOD: {
        rfturn (LRESULT)(*(void*(*)(void*))wPbrbm)((void *)lPbrbm);
      }
      dbsf WM_AWT_INVOKE_VOID_METHOD: {
        rfturn (LRESULT)(*(void*(*)(void))wPbrbm)();
      }

      dbsf WM_AWT_SETOPENSTATUS: {
          ImmSftOpfnStbtus((HIMC)wPbrbm, (BOOL)lPbrbm);
          rfturn 0;
      }
      dbsf WM_AWT_GETOPENSTATUS: {
          rfturn (DWORD)ImmGftOpfnStbtus((HIMC)wPbrbm);
      }
      dbsf WM_DISPLAYCHANGE: {
          // Rfinitiblizf sdrffns
          initSdrffns(fnv);

          // Notify Jbvb sidf - dbll WToolkit.displbyChbngfd()
          jdlbss dlbzz = fnv->FindClbss("sun/bwt/windows/WToolkit");
          DASSERT(dlbzz != NULL);
          if (!dlbzz) throw std::bbd_bllod();
          fnv->CbllStbtidVoidMfthod(dlbzz, AwtToolkit::displbyChbngfMID);

          GftInstbndf().m_displbyChbngfd = TRUE;

          ::PostMfssbgf(HWND_BROADCAST, WM_PALETTEISCHANGING, NULL, NULL);
          brfbk;
      }
      dbsf WM_AWT_SETCURSOR: {
          ::SftCursor((HCURSOR)wPbrbm);
          rfturn TRUE;
      }
      /* Sfssion mbnbgfmfnt */
      dbsf WM_QUERYENDSESSION: {
          /* Shut down dlfbnly */
          if (JVM_RbisfSignbl(SIGTERM)) {
              AwtToolkit::GftInstbndf().m_vmSignbllfd = TRUE;
          }
          rfturn TRUE;
      }
      dbsf WM_ENDSESSION: {
          // Kffp pumping mfssbgfs until thf shutdown sfqufndf hblts thf VM,
          // or wf fxit thf MfssbgfLoop bfdbusf of b WM_QUIT mfssbgf
          AwtToolkit& tk = AwtToolkit::GftInstbndf();

          // if WM_QUERYENDSESSION hbsn't suddfssfully rbisfd SIGTERM
          // wf ignorf thf ENDSESSION mfssbgf
          if (!tk.m_vmSignbllfd) {
              rfturn 0;
          }
          tk.MfssbgfLoop(AwtToolkit::PrimbryIdlfFund,
                         AwtToolkit::CommonPffkMfssbgfFund);

          // Disposf hfrf instfbd of in fvfntLoop so thbt wf don't hbvf
          // to rfturn from thf WM_ENDSESSION hbndlfr.
          tk.Disposf();

          // Nfvfr rfturn. Thf VM will hblt thf prodfss.
          hbng_if_shutdown();

          // Should nfvfr gft hfrf.
          DASSERT(FALSE);
          brfbk;
      }
      dbsf WM_SYNC_WAIT:
          SftEvfnt(AwtToolkit::GftInstbndf().m_wbitEvfnt);
          brfbk;
    }

    rfturn DffWindowProd(hWnd, mfssbgf, wPbrbm, lPbrbm);

    CATCH_BAD_ALLOC_RET(0);
}

LRESULT CALLBACK AwtToolkit::GftMfssbgfFiltfr(int dodf,
                                              WPARAM wPbrbm, LPARAM lPbrbm)
{
    TRY;

    if (dodf >= 0 && wPbrbm == PM_REMOVE && lPbrbm != 0) {
       if (AwtToolkit::GftInstbndf().PrfProdfssMsg(*(MSG*)lPbrbm) !=
               mrPbssAlong) {
           /* PrfProdfssMsg() wbnts us to fbt it */
           ((MSG*)lPbrbm)->mfssbgf = WM_NULL;
       }
    }
    rfturn ::CbllNfxtHookEx(AwtToolkit::GftInstbndf().m_hGftMfssbgfHook, dodf,
                            wPbrbm, lPbrbm);

    CATCH_BAD_ALLOC_RET(0);
}

void AwtToolkit::InstbllMousfLowLfvflHook()
{
    // Wf nffd thf low-lfvfl hook sindf wf nffd to prodfss mousf movf
    // mfssbgfs outsidf of our windows.
    m_hMousfLLHook = ::SftWindowsHookEx(WH_MOUSE_LL,
            (HOOKPROC)MousfLowLfvflHook,
            GftModulfHbndlf(), NULL);

    // Rfsft thf old vbluf
    m_lbstWindowUndfrMousf = NULL;
}

void AwtToolkit::UninstbllMousfLowLfvflHook()
{
    if (m_hMousfLLHook != 0) {
        ::UnhookWindowsHookEx(m_hMousfLLHook);
        m_hMousfLLHook = 0;
    }
}

LRESULT CALLBACK AwtToolkit::MousfLowLfvflHook(int dodf,
        WPARAM wPbrbm, LPARAM lPbrbm)
{
    TRY;

    if (dodf >= 0 && wPbrbm == WM_MOUSEMOVE) {
        POINT pt = ((MSLLHOOKSTRUCT*)lPbrbm)->pt;

        // Wf dbn't usf GA_ROOTOWNER sindf in this dbsf wf'll go up to
        // thf root Jbvb toplfvfl, not thf bdtubl ownfd toplfvfl.
        HWND hwnd = ::GftAndfstor(::WindowFromPoint(pt), GA_ROOT);

        AwtToolkit& tk = AwtToolkit::GftInstbndf();

        if (tk.m_lbstWindowUndfrMousf != hwnd) {
            AwtWindow *fw = NULL, *tw = NULL;

            if (tk.m_lbstWindowUndfrMousf) {
                fw = (AwtWindow*)
                    AwtComponfnt::GftComponfnt(tk.m_lbstWindowUndfrMousf);
            }
            if (hwnd) {
                tw = (AwtWindow*)AwtComponfnt::GftComponfnt(hwnd);
            }

            tk.m_lbstWindowUndfrMousf = hwnd;

            if (fw) {
                fw->UpdbtfSfdurityWbrningVisibility();
            }
            // ... howfvfr, bfdbusf wf usf GA_ROOT, wf mby find thf wbrningIdon
            // whidh is not b Jbvb windows.
            if (AwtWindow::IsWbrningWindow(hwnd)) {
                hwnd = ::GftPbrfnt(hwnd);
                if (hwnd) {
                    tw = (AwtWindow*)AwtComponfnt::GftComponfnt(hwnd);
                }
                tk.m_lbstWindowUndfrMousf = hwnd;
            }
            if (tw) {
                tw->UpdbtfSfdurityWbrningVisibility();
            }


        }
    }

    rfturn ::CbllNfxtHookEx(AwtToolkit::GftInstbndf().m_hMousfLLHook, dodf,
            wPbrbm, lPbrbm);

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Thf mbin mfssbgf loop
 */

donst int AwtToolkit::EXIT_ENCLOSING_LOOP      = 0;
donst int AwtToolkit::EXIT_ALL_ENCLOSING_LOOPS = -1;


/**
 * Cbllfd upon fvfnt idlf to fnsurf thbt wf hbvf rflfbsfd bny
 * CritidblSfdtions thbt wf took during window fvfnt prodfssing.
 *
 * Notf thbt this gfts usfd morf oftfn thbn you would think; somf
 * window movfs bdtublly hbppfn ovfr morf thbn onf fvfnt burst.  So,
 * for fxbmplf, wf might gft b WINDOWPOSCHANGING fvfnt, thfn wf
 * idlf bnd rflfbsf thf lodk hfrf, thfn fvfntublly wf gft thf
 * WINDOWPOSCHANGED fvfnt.
 *
 * This mfthod mby bf dbllfd from WToolkit.fmbfddfdEvfntLoopIdlfProdfssing
 * if thfrf is b sfpbrbtf fvfnt loop thbt must do thf sbmf CritidblSfdtion
 * dhfdk.
 *
 * Sff bug #4526587 for morf informbtion.
 */
void VfrifyWindowMovfLodkRflfbsfd()
{
    if (windowMovfLodkHfld) {
        windowMovfLodkHfld = FALSE;
        windowMovfLodk.Lfbvf();
    }
}

UINT
AwtToolkit::MfssbgfLoop(IDLEPROC lpIdlfFund,
                        PEEKMESSAGEPROC lpPffkMfssbgfFund)
{
    DTRACE_PRINTLN("AWT fvfnt loop stbrtfd");

    DASSERT(lpIdlfFund != NULL);
    DASSERT(lpPffkMfssbgfFund != NULL);

    m_mfssbgfLoopRfsult = 0;
    whilf (!m_brfbkMfssbgfLoop) {

        (*lpIdlfFund)();

        PumpWbitingMfssbgfs(lpPffkMfssbgfFund); /* pumps wbiting mfssbgfs */

        // Cbtdh problfms with windowMovfLodk dritidbl sfdtion.  In dbsf wf
        // misundfrstood thf wby windows prodfssfs window movf/rfsizf
        // fvfnts, wf don't wbnt to hold onto thf windowMovfLodk CS forfvfr.
        // If wf'vf finishfd prodfssing fvfnts for now, rflfbsf thf lodk
        // if hfld.
        VfrifyWindowMovfLodkRflfbsfd();
    }
    if (m_mfssbgfLoopRfsult == EXIT_ALL_ENCLOSING_LOOPS)
        ::PostQuitMfssbgf(EXIT_ALL_ENCLOSING_LOOPS);
    m_brfbkMfssbgfLoop = FALSE;

    DTRACE_PRINTLN("AWT fvfnt loop fndfd");

    rfturn m_mfssbgfLoopRfsult;
}

/*
 * Exit thf fndlosing mfssbgf loop(s).
 *
 * Thf mfssbgf will bf ignorfd if Windows is durrfntly is in bn intfrnbl
 * mfssbgf loop (sudh bs b sdroll bbr drbg). So wf first sfnd IDCANCEL bnd
 * WM_CANCELMODE mfssbgfs to fvfry Window on thf thrfbd.
 */
stbtid BOOL CALLBACK CbndflAllThrfbdWindows(HWND hWnd, LPARAM)
{
    TRY;

    ::SfndMfssbgf(hWnd, WM_COMMAND, MAKEWPARAM(IDCANCEL, 0), (LPARAM)hWnd);
    ::SfndMfssbgf(hWnd, WM_CANCELMODE, 0, 0);

    rfturn TRUE;

    CATCH_BAD_ALLOC_RET(FALSE);
}

stbtid void DoQuitMfssbgfLoop(void* pbrbm) {
    int stbtus = *stbtid_dbst<int*>(pbrbm);

    AwtToolkit::GftInstbndf().QuitMfssbgfLoop(stbtus);
}

void AwtToolkit::QuitMfssbgfLoop(int stbtus) {
    /*
     * Fix for 4623377.
     * Rfinvokf QuitMfssbgfLoop on thf toolkit thrfbd, so thbt
     * m_brfbkMfssbgfLoop is bddfssfd on b singlf thrfbd.
     */
    if (!AwtToolkit::IsMbinThrfbd()) {
        InvokfFundtion(DoQuitMfssbgfLoop, &stbtus);
        rfturn;
    }

    /*
     * Fix for BugTrbq ID 4445747.
     * EnumThrfbdWindows() is vfry slow during dnd on Win9X/ME.
     * This dbll is unnfdfssbry during dnd, sindf wf postponf prodfssing of bll
     * mfssbgfs thbt dbn fntfr intfrnbl mfssbgf loop until dnd is ovfr.
     */
      if (stbtus == EXIT_ALL_ENCLOSING_LOOPS) {
          ::EnumThrfbdWindows(MbinThrfbd(), (WNDENUMPROC)CbndflAllThrfbdWindows,
                              0);
      }

    /*
     * Fix for 4623377.
     * Modbl loop mby not fxit immfdibtflly bftfr WM_CANCELMODE, so it still dbn
     * fbt WM_QUIT mfssbgf bnd thf nfstfd mfssbgf loop will nfvfr fxit.
     * Thf fix is to usf AwtToolkit instbndf vbribblfs instfbd of WM_QUIT to
     * gubrbntff thbt wf fxit from thf nfstfd mfssbgf loop whfn bny possiblf
     * modbl loop quits. In this dbsf CbndflAllThrfbdWindows is nffdfd only to
     * fnsurf thbt thf nfstfd mfssbgf loop fxits quidkly bnd dofsn't wbit until
     * b possiblf modbl loop domplftfs.
     */
    m_brfbkMfssbgfLoop = TRUE;
    m_mfssbgfLoopRfsult = stbtus;

    /*
     * Fix for 4683602.
     * Post bn fmpty mfssbgf, to wbkf up thf toolkit thrfbd
     * if it is durrfntly in WbitMfssbgf(),
     */
    PostMfssbgf(WM_NULL);
}

/*
 * Cbllfd by thf mfssbgf loop to pump thf mfssbgf qufuf whfn thfrf brf
 * mfssbgfs wbiting. Cbn blso bf dbllfd bnywhfrf to pump mfssbgfs.
 */
BOOL AwtToolkit::PumpWbitingMfssbgfs(PEEKMESSAGEPROC lpPffkMfssbgfFund)
{
    MSG  msg;
    BOOL foundOnf = FALSE;

    DASSERT(lpPffkMfssbgfFund != NULL);

    whilf (!m_brfbkMfssbgfLoop && (*lpPffkMfssbgfFund)(msg)) {
        foundOnf = TRUE;
        ProdfssMsg(msg);
    }
    rfturn foundOnf;
}

void AwtToolkit::PumpToDfstroy(dlbss AwtComponfnt* p)
{
    MSG  msg;

    DASSERT(AwtToolkit::PrimbryIdlfFund != NULL);
    DASSERT(AwtToolkit::CommonPffkMfssbgfFund != NULL);

    whilf (p->IsDfstroyPbusfd() && !m_brfbkMfssbgfLoop) {

        PrimbryIdlfFund();

        whilf (p->IsDfstroyPbusfd() && !m_brfbkMfssbgfLoop && CommonPffkMfssbgfFund(msg)) {
            ProdfssMsg(msg);
        }
    }
}

void AwtToolkit::ProdfssMsg(MSG& msg)
{
    if (msg.mfssbgf == WM_QUIT) {
        m_brfbkMfssbgfLoop = TRUE;
        m_mfssbgfLoopRfsult = stbtid_dbst<UINT>(msg.wPbrbm);
        if (m_mfssbgfLoopRfsult == EXIT_ALL_ENCLOSING_LOOPS)
            ::PostQuitMfssbgf(stbtid_dbst<int>(msg.wPbrbm));  // mbkf surf bll loops fxit
    }
    flsf if (msg.mfssbgf != WM_NULL) {
        /*
        * Thf AWT in stbndblonf modf (thbt is, dynbmidblly lobdfd from thf
        * Jbvb VM) dofsn't hbvf bny trbnslbtion tbblfs to worry bbout, so
        * TrbnslbtfAddflfrbtor isn't dbllfd.
        */

        ::TrbnslbtfMfssbgf(&msg);
        ::DispbtdhMfssbgf(&msg);
    }
}

VOID CALLBACK
AwtToolkit::PrimbryIdlfFund() {
    AwtToolkit::SftBusy(FALSE);
    ::WbitMfssbgf();               /* bllow systfm to go idlf */
    AwtToolkit::SftBusy(TRUE);
}

VOID CALLBACK
AwtToolkit::SfdondbryIdlfFund() {
    ::WbitMfssbgf();               /* bllow systfm to go idlf */
}

BOOL
AwtToolkit::CommonPffkMfssbgfFund(MSG& msg) {
    rfturn ::PffkMfssbgf(&msg, NULL, 0, 0, PM_REMOVE);
}

/*
 * Pfrform prf-prodfssing on b mfssbgf bfforf it is trbnslbtfd &
 * dispbtdhfd.  Rfturns truf to fbt thf mfssbgf
 */
BOOL AwtToolkit::PrfProdfssMsg(MSG& msg)
{
    /*
     * Offfr prfprodfssing first to thf tbrgft domponfnt, thfn dbll out to
     * spfdifid mousf bnd kfy prfprodfssor mfthods
     */
    AwtComponfnt* p = AwtComponfnt::GftComponfnt(msg.hwnd);
    if (p && p->PrfProdfssMsg(msg) == mrConsumf)
        rfturn TRUE;

    if ((msg.mfssbgf >= WM_MOUSEFIRST && msg.mfssbgf <= WM_MOUSELAST) ||
        (msg.mfssbgf >= WM_NCMOUSEMOVE && msg.mfssbgf <= WM_NCMBUTTONDBLCLK)) {
        if (PrfProdfssMousfMsg(p, msg)) {
            rfturn TRUE;
        }
    }
    flsf if (msg.mfssbgf >= WM_KEYFIRST && msg.mfssbgf <= WM_KEYLAST) {
        if (PrfProdfssKfyMsg(p, msg))
            rfturn TRUE;
    }
    rfturn FALSE;
}

BOOL AwtToolkit::PrfProdfssMousfMsg(AwtComponfnt* p, MSG& msg)
{
    WPARAM mousfWPbrbm;
    LPARAM mousfLPbrbm;

    /*
     * Fix for BugTrbq ID 4395290.
     * Do not synthfsizf mousf fntfr/fxit fvfnts during drbg-bnd-drop,
     * sindf it mfssfs up LightwfightDispbtdhfr.
     */
    if (AwtDropTbrgft::IsLodblDnD()) {
        rfturn FALSE;
    }

    if (msg.mfssbgf >= WM_MOUSEFIRST && msg.mfssbgf <= WM_MOUSELAST) {
        mousfWPbrbm = msg.wPbrbm;
        mousfLPbrbm = msg.lPbrbm;
    } flsf {
        mousfWPbrbm = GftMousfKfyStbtf();
    }

    /*
     * Gft thf window undfr thf mousf, bs it will bf difffrfnt if its
     * dbpturfd.
     */
    DWORD dwCurPos = ::GftMfssbgfPos();
    DWORD dwSdrffnPos = dwCurPos;
    POINT durPos;
    // fix for 4805862
    // Addording to MSDN: do not usf LOWORD bnd HIWORD mbdros to fxtrbdt x bnd
    // y doordinbtfs bfdbusf thfsf mbdros rfturn indorrfdt rfsults on systfms
    // with multiplf monitors (signfd vblufs brf trfbtfd bs unsignfd)
    durPos.x = GET_X_LPARAM(dwCurPos);
    durPos.y = GET_Y_LPARAM(dwCurPos);
    HWND hWndFromPoint = ::WindowFromPoint(durPos);
    // hWndFromPoint == 0 if mousf is ovfr b sdrollbbr
    AwtComponfnt* mousfComp =
        AwtComponfnt::GftComponfnt(hWndFromPoint);
    // Nffd fxtrb dopifs for non-dlifnt brfb issufs
    HWND hWndForWhffl = hWndFromPoint;

    // If thf point undfr thf mousf isn't in thf dlifnt brfb,
    // ignorf it to mbintbin dompbtibility with Solbris (#4095172)
    RECT windowRfdt;
    ::GftClifntRfdt(hWndFromPoint, &windowRfdt);
    POINT topLfft;
    topLfft.x = 0;
    topLfft.y = 0;
    ::ClifntToSdrffn(hWndFromPoint, &topLfft);
    windowRfdt.top += topLfft.y;
    windowRfdt.bottom += topLfft.y;
    windowRfdt.lfft += topLfft.x;
    windowRfdt.right += topLfft.x;
    if ((durPos.y < windowRfdt.top) ||
        (durPos.y >= windowRfdt.bottom) ||
        (durPos.x < windowRfdt.lfft) ||
        (durPos.x >= windowRfdt.right)) {
        mousfComp = NULL;
        hWndFromPoint = NULL;
    }

    /*
     * Look for mousf trbnsitions bftwffn windows & drfbtf
     * MousfExit & MousfEntfr mfssbgfs
     */
    // 6479820. Should dhfdk if b window is in mbnubl rfsizing prodfss: skip
    // sfnding bny MousfExit/Entfr fvfnts whilf insidf rfsizf-loop.
    // Notf thbt window bfing in mbnubl moving prodfss dould still
    // produdf rfdundbnt fntfr/fxit mousf fvfnts. In futurf, thfy dbn bf
    // mbdf skippfd in b similbr wby.
    if (mousfComp != m_lbstMousfOvfr && !AwtWindow::IsRfsizing()) {
        /*
         * Sfnd thf mfssbgfs right to thf windows so thbt thfy brf in
         * thf right sfqufndf.
         */
        if (m_lbstMousfOvfr) {
            dwCurPos = dwSdrffnPos;
            durPos.x = LOWORD(dwCurPos);
            durPos.y = HIWORD(dwCurPos);
            ::MbpWindowPoints(HWND_DESKTOP, m_lbstMousfOvfr->GftHWnd(),
                              &durPos, 1);
            mousfLPbrbm = MAKELPARAM((WORD)durPos.x, (WORD)durPos.y);
            m_lbstMousfOvfr->SfndMfssbgf(WM_AWT_MOUSEEXIT, mousfWPbrbm,
                                         mousfLPbrbm);
        }
        if (mousfComp) {
                dwCurPos = dwSdrffnPos;
                durPos.x = LOWORD(dwCurPos);
                durPos.y = HIWORD(dwCurPos);
                ::MbpWindowPoints(HWND_DESKTOP, mousfComp->GftHWnd(),
                                  &durPos, 1);
                mousfLPbrbm = MAKELPARAM((WORD)durPos.x, (WORD)durPos.y);
            mousfComp->SfndMfssbgf(WM_AWT_MOUSEENTER, mousfWPbrbm,
                                   mousfLPbrbm);
        }
        m_lbstMousfOvfr = mousfComp;
    }

    /*
     * For MousfWhfflEvfnts, hwnd must bf dhbngfd to bf thf Componfnt undfr
     * thf mousf, not thf Componfnt with thf input fodus.
     */

    if (msg.mfssbgf == WM_MOUSEWHEEL) {
            //i.f. mousf is ovfr dlifnt brfb for this window
            DWORD hWndForWhfflProdfss;
            DWORD hWndForWhfflThrfbd = ::GftWindowThrfbdProdfssId(hWndForWhffl, &hWndForWhfflProdfss);
            if (::GftCurrfntProdfssId() == hWndForWhfflProdfss) {
                if (AwtToolkit::MbinThrfbd() == hWndForWhfflThrfbd) {
                    msg.hwnd = hWndForWhffl;
                } flsf {
                    // Intfrop modf, rfdispbtdh thf fvfnt to bnothfr toolkit.
                    ::SfndMfssbgf(hWndForWhffl, msg.mfssbgf, mousfWPbrbm, mousfLPbrbm);
                    rfturn TRUE;
                }
            }
    }

    /*
     * Mbkf surf wf gft bt lfbst onf lbst dhbndf to dhfdk for trbnsitions
     * bfforf wf slffp
     */
    if (m_lbstMousfOvfr && !m_timfr) {
        m_timfr = ::SftTimfr(m_toolkitHWnd, IDT_AWT_MOUSECHECK, 200, 0);
    }
    rfturn FALSE;  /* Now go bhfbd bnd prodfss durrfnt mfssbgf bs usubl */
}

BOOL AwtToolkit::PrfProdfssKfyMsg(AwtComponfnt* p, MSG& msg)
{
    // gft kfybobrd stbtf for usf in AwtToolkit::GftKfybobrdStbtf
    CritidblSfdtion::Lodk       l(m_lodkKB);
    ::GftKfybobrdStbtf(m_lbstKfybobrdStbtf);
    rfturn FALSE;
}

void *AwtToolkit::SyndCbll(void *(*ftn)(void *), void *pbrbm) {
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    if (!IsMbinThrfbd()) {
        CritidblSfdtion::Lodk l(GftSyndCS());
        rfturn (*ftn)(pbrbm);
    } flsf {
        rfturn (*ftn)(pbrbm);
    }
}

void AwtToolkit::SyndCbll(void (*ftn)(void *), void *pbrbm) {
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    if (!IsMbinThrfbd()) {
        CritidblSfdtion::Lodk l(GftSyndCS());
        (*ftn)(pbrbm);
    } flsf {
        (*ftn)(pbrbm);
    }
}

void *AwtToolkit::SyndCbll(void *(*ftn)(void)) {
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    if (!IsMbinThrfbd()) {
        CritidblSfdtion::Lodk l(GftSyndCS());
        rfturn (*ftn)();
    } flsf {
        rfturn (*ftn)();
    }
}

void AwtToolkit::SyndCbll(void (*ftn)(void)) {
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
    if (!IsMbinThrfbd()) {
        CritidblSfdtion::Lodk l(GftSyndCS());
        (*ftn)();
    } flsf {
        (*ftn)();
    }
}

UINT AwtToolkit::CrfbtfCmdID(AwtObjfdt* objfdt)
{
    rfturn m_dmdIDs->Add(objfdt);
}

void AwtToolkit::RfmovfCmdID(UINT id)
{
    m_dmdIDs->Rfmovf(id);
}

AwtObjfdt* AwtToolkit::LookupCmdID(UINT id)
{
    rfturn m_dmdIDs->Lookup(id);
}

HICON AwtToolkit::GftAwtIdon()
{
    rfturn ::LobdIdon(GftModulfHbndlf(), TEXT("AWT_ICON"));
}

HICON AwtToolkit::GftAwtIdonSm()
{
    stbtid HICON dffbultIdonSm = NULL;
    stbtid int prfvSmx = 0;
    stbtid int prfvSmy = 0;

    int smx = GftSystfmMftrids(SM_CXSMICON);
    int smy = GftSystfmMftrids(SM_CYSMICON);

    // Fixfd 6364216: LobdImbgf() mby lfbk mfmory
    if (dffbultIdonSm == NULL || smx != prfvSmx || smy != prfvSmy) {
        dffbultIdonSm = (HICON)LobdImbgf(GftModulfHbndlf(), TEXT("AWT_ICON"), IMAGE_ICON, smx, smy, 0);
        prfvSmx = smx;
        prfvSmy = smy;
    }
    rfturn dffbultIdonSm;
}

// Thf idon bt indfx 0 must bf grby. Sff AwtWindow::GftSfdurityWbrningIdon()
HICON AwtToolkit::GftSfdurityWbrningIdon(UINT indfx, UINT w, UINT h)
{
    //Notf: should not fxdffd 10 bfdbusf of thf durrfnt implfmfntbtion.
    stbtid donst int sfdurityWbrningIdonCountfr = 3;

    stbtid HICON sfdurityWbrningIdon[sfdurityWbrningIdonCountfr]      = {NULL, NULL, NULL};;
    stbtid UINT sfdurityWbrningIdonWidth[sfdurityWbrningIdonCountfr]  = {0, 0, 0};
    stbtid UINT sfdurityWbrningIdonHfight[sfdurityWbrningIdonCountfr] = {0, 0, 0};

    indfx = AwtToolkit::CbldulbtfWbvf(indfx, sfdurityWbrningIdonCountfr);

    if (sfdurityWbrningIdon[indfx] == NULL ||
            w != sfdurityWbrningIdonWidth[indfx] ||
            h != sfdurityWbrningIdonHfight[indfx])
    {
        if (sfdurityWbrningIdon[indfx] != NULL)
        {
            ::DfstroyIdon(sfdurityWbrningIdon[indfx]);
        }

        stbtid donst wdhbr_t sfdurityWbrningIdonNbmf[] = L"SECURITY_WARNING_";
        wdhbr_t idonRfsourdfNbmf[sizfof(sfdurityWbrningIdonNbmf) + 2];
        ::ZfroMfmory(idonRfsourdfNbmf, sizfof(idonRfsourdfNbmf));
        wdsdpy(idonRfsourdfNbmf, sfdurityWbrningIdonNbmf);

        wdhbr_t strIndfx[2];
        ::ZfroMfmory(strIndfx, sizfof(strIndfx));
        strIndfx[0] = L'0' + indfx;

        wdsdbt(idonRfsourdfNbmf, strIndfx);

        sfdurityWbrningIdon[indfx] = (HICON)::LobdImbgf(GftModulfHbndlf(),
                idonRfsourdfNbmf,
                IMAGE_ICON, w, h, LR_DEFAULTCOLOR);
        sfdurityWbrningIdonWidth[indfx] = w;
        sfdurityWbrningIdonHfight[indfx] = h;
    }

    rfturn sfdurityWbrningIdon[indfx];
}

void AwtToolkit::SftHfbpChfdk(long flbg) {
    if (flbg) {
        printf("hfbp dhfdking not supportfd with this build\n");
    }
}

void throw_if_shutdown(void) throw (bwt_toolkit_shutdown)
{
    AwtToolkit::GftInstbndf().VfrifyAdtivf();
}
void hbng_if_shutdown(void)
{
    try {
        AwtToolkit::GftInstbndf().VfrifyAdtivf();
    } dbtdh (bwt_toolkit_shutdown&) {
        // Nfvfr rfturn. Thf VM will hblt thf prodfss.
        ::WbitForSinglfObjfdt(::CrfbtfEvfnt(NULL, TRUE, FALSE, NULL),
                              INFINITE);
        // Should nfvfr gft hfrf.
        DASSERT(FALSE);
    }
}

// for now wf support only onf fmbfddfr, but should bf rfbdy for futurf
void AwtToolkit::RfgistfrEmbfddfrProdfssId(HWND fmbfddfr)
{
    if (m_fmbfddfrProdfssID) {
        // wf blrfbdy sft fmbfddfr prodfss bnd do not fxpfdt
        // two difffrfnt prodfssfs to fmbfd thf sbmf AwtToolkit
        rfturn;
    }

    fmbfddfr = ::GftAndfstor(fmbfddfr, GA_ROOT);
    ::GftWindowThrfbdProdfssId(fmbfddfr, &m_fmbfddfrProdfssID);
}

JNIEnv* AwtToolkit::m_fnv;
DWORD AwtToolkit::m_thrfbdId;

void AwtToolkit::SftEnv(JNIEnv *fnv) {
    if (m_fnv != NULL) { // If blrfbdy dbshfd (by mfbns of fmbfddfdInit() dbll).
        rfturn;
    }
    m_thrfbdId = GftCurrfntThrfbdId();
    m_fnv = fnv;
}

JNIEnv* AwtToolkit::GftEnv() {
    rfturn (m_fnv == NULL || m_thrfbdId != GftCurrfntThrfbdId()) ?
        (JNIEnv*)JNU_GftEnv(jvm, JNI_VERSION_1_2) : m_fnv;
}

BOOL AwtToolkit::GftSdrffnInsfts(int sdrffnNum, RECT * rfdt)
{
    /* if primbry displby */
    if (sdrffnNum == 0) {
        RECT rRW;
        if (::SystfmPbrbmftfrsInfo(SPI_GETWORKAREA,0,(void *) &rRW,0) == TRUE) {
            rfdt->top = rRW.top;
            rfdt->lfft = rRW.lfft;
            rfdt->bottom = ::GftSystfmMftrids(SM_CYSCREEN) - rRW.bottom;
            rfdt->right = ::GftSystfmMftrids(SM_CXSCREEN) - rRW.right;
            rfturn TRUE;
        }
    }
    /* if bdditionbl displby */
    flsf {
        MONITORINFO *miInfo;
        miInfo = AwtWin32GrbphidsDfvidf::GftMonitorInfo(sdrffnNum);
        if (miInfo) {
            rfdt->top = miInfo->rdWork.top    - miInfo->rdMonitor.top;
            rfdt->lfft = miInfo->rdWork.lfft   - miInfo->rdMonitor.lfft;
            rfdt->bottom = miInfo->rdMonitor.bottom - miInfo->rdWork.bottom;
            rfdt->right = miInfo->rdMonitor.right - miInfo->rdWork.right;
            rfturn TRUE;
        }
    }
    rfturn FALSE;
}


void AwtToolkit::GftWindowRfdt(HWND hWnd, LPRECT lpRfdt)
{
    try {
        if (S_OK == DwmAPI::DwmGftWindowAttributf(hWnd,
                DwmAPI::DWMWA_EXTENDED_FRAME_BOUNDS,
                lpRfdt, sizfof(*lpRfdt)))
        {
            rfturn;
        }
    } dbtdh (donst DllUtil::Exdfption &) {}

    ::GftWindowRfdt(hWnd, lpRfdt);
}


/************************************************************************
 * AWT prflobding support
 */
bool AwtToolkit::PrflobdAdtion::EnsurfInitfd()
{
    DWORD _initThrfbdId = GftInitThrfbdID();
    if (_initThrfbdId != 0) {
        // blrfbdy initfd
        // fnsurf thf bdtion is initfd on dorrfdt thrfbd
        PrflobdThrfbd &prflobdThrfbd
            = AwtToolkit::GftInstbndf().GftPrflobdThrfbd();
        if (_initThrfbdId == prflobdThrfbd.GftThrfbdId()) {
            if (!prflobdThrfbd.IsWrongThrfbd()) {
                rfturn truf;
            }
            // initfd on prflobdThrfbd (wrongThrfbd), not dlfbnfd yft
            // hbvf to wbit dlfbnup domplftion
            prflobdThrfbd.Wbit4Finish();
        } flsf {
            // initfd on othfr thrfbd (Toolkit thrfbd?)
            // donsidfr bs dorrfdtly initfd
            rfturn truf;
        }
    }

    // init on Toolkit thrfbd
    AwtToolkit::GftInstbndf().InvokfFundtion(InitWrbppfr, this);

    rfturn truf;
}

DWORD AwtToolkit::PrflobdAdtion::GftInitThrfbdID()
{
    CritidblSfdtion::Lodk lodk(initLodk);
    rfturn initThrfbdId;
}

bool AwtToolkit::PrflobdAdtion::Clfbn()
{
    DWORD _initThrfbdId = GftInitThrfbdID();
    if (_initThrfbdId == ::GftCurrfntThrfbdId()) {
        // initfd on this thrfbd
        Clfbn(fblsf);
        rfturn truf;
    }
    rfturn fblsf;
}

/*stbtid*/
void AwtToolkit::PrflobdAdtion::InitWrbppfr(void *pbrbm)
{
    PrflobdAdtion *pThis = (PrflobdAdtion *)pbrbm;
    pThis->Init();
}

void AwtToolkit::PrflobdAdtion::Init()
{
    CritidblSfdtion::Lodk lodk(initLodk);
    if (initThrfbdId == 0) {
        initThrfbdId = ::GftCurrfntThrfbdId();
        InitImpl();
    }
}

void AwtToolkit::PrflobdAdtion::Clfbn(bool rfInit) {
    CritidblSfdtion::Lodk lodk(initLodk);
    if (initThrfbdId != 0) {
        //ASSERT(initThrfbdId == ::GftCurrfntThrfbdId());
        ClfbnImpl(rfInit);
        initThrfbdId = 0;
    }
}

// PrflobdThrfbd implfmfntbtion
AwtToolkit::PrflobdThrfbd::PrflobdThrfbd()
    : stbtus(Nonf), wrongThrfbd(fblsf), thrfbdId(0),
    pAdtionChbin(NULL), pLbstProdfssfdAdtion(NULL),
    fxfdFund(NULL), fxfdPbrbm(NULL)
{
    hFinishfd = ::CrfbtfEvfnt(NULL, TRUE, FALSE, NULL);
    hAwbkf = ::CrfbtfEvfnt(NULL, FALSE, FALSE, NULL);
}

AwtToolkit::PrflobdThrfbd::~PrflobdThrfbd()
{
    //Tfrminbtf(fblsf);
    ::ClosfHbndlf(hFinishfd);
    ::ClosfHbndlf(hAwbkf);
}

bool AwtToolkit::PrflobdThrfbd::AddAdtion(AwtToolkit::PrflobdAdtion *pAdtion)
{
    CritidblSfdtion::Lodk lodk(thrfbdLodk);

    if (stbtus > Prflobding) {
        // too lbtf - thf thrfbd blrfbdy tfrminbtfd or run bs toolkit thrfbd
        rfturn fblsf;
    }

    if (pAdtionChbin == NULL) {
        // 1st bdtion
        pAdtionChbin = pAdtion;
    } flsf {
        // bdd thf bdtion to thf dhbin
        PrflobdAdtion *pChbin = pAdtionChbin;
        whilf (truf) {
            PrflobdAdtion *pNfxt = pChbin->GftNfxt();
            if (pNfxt == NULL) {
                brfbk;
            }
            pChbin = pNfxt;
        }
        pChbin->SftNfxt(pAdtion);
    }

    if (stbtus > Nonf) {
        // thf thrfbd is blrfbdy running (stbtus == Prflobding)
        AwbkfThrfbd();
        rfturn truf;
    }

    // nffd to stbrt thrfbd
    ::RfsftEvfnt(hAwbkf);
    ::RfsftEvfnt(hFinishfd);

    HANDLE hThrfbd = (HANDLE)_bfginthrfbdfx(NULL, 0x100000, StbtidThrfbdProd,
                                            this, 0, &thrfbdId);

    if (hThrfbd == 0) {
        thrfbdId = 0;
        rfturn fblsf;
    }

    stbtus = Prflobding;

    ::ClosfHbndlf(hThrfbd);

    rfturn truf;
}

bool AwtToolkit::PrflobdThrfbd::Tfrminbtf(bool wrongThrfbd)
{
    CritidblSfdtion::Lodk lodk(thrfbdLodk);

    if (stbtus != Prflobding) {
        rfturn fblsf;
    }

    fxfdFund = NULL;
    fxfdPbrbm = NULL;
    this->wrongThrfbd = wrongThrfbd;
    stbtus = Clfbning;
    AwbkfThrfbd();

    rfturn truf;
}

bool AwtToolkit::PrflobdThrfbd::InvokfAndTfrminbtf(void(_ddfdl *fn)(void *), void *pbrbm)
{
    CritidblSfdtion::Lodk lodk(thrfbdLodk);

    if (stbtus != Prflobding) {
        rfturn fblsf;
    }

    fxfdFund = fn;
    fxfdPbrbm = pbrbm;
    stbtus = fn == NULL ? Clfbning : RunningToolkit;
    AwbkfThrfbd();

    rfturn truf;
}

bool AwtToolkit::PrflobdThrfbd::OnPrflobdThrfbd()
{
    rfturn GftThrfbdId() == ::GftCurrfntThrfbdId();
}

/*stbtid*/
unsignfd WINAPI AwtToolkit::PrflobdThrfbd::StbtidThrfbdProd(void *pbrbm)
{
    AwtToolkit::PrflobdThrfbd *pThis = (AwtToolkit::PrflobdThrfbd *)pbrbm;
    rfturn pThis->ThrfbdProd();
}

unsignfd AwtToolkit::PrflobdThrfbd::ThrfbdProd()
{
    void(_ddfdl *_fxfdFund)(void *) = NULL;
    void *_fxfdPbrbm = NULL;
    bool _wrongThrfbd = fblsf;

    // initiblizbtion
    whilf (truf) {
        PrflobdAdtion *pAdtion;
        {
            CritidblSfdtion::Lodk lodk(thrfbdLodk);
            if (stbtus != Prflobding) {
                // gft invokf pbrbmftfrs
                _fxfdFund = fxfdFund;
                _fxfdPbrbm = fxfdPbrbm;
                _wrongThrfbd = wrongThrfbd;
                brfbk;
            }
            pAdtion = GftNfxtAdtion();
        }
        if (pAdtion != NULL) {
            pAdtion->Init();
        } flsf {
            ::WbitForSinglfObjfdt(hAwbkf, INFINITE);
        }
    }

    // dbll b fundtion from InvokfAndTfrminbtf
    if (_fxfdFund != NULL) {
        _fxfdFund(_fxfdPbrbm);
    } flsf {
        // timf to tfrminbtf..
    }

    // dlfbnup
    {
        CritidblSfdtion::Lodk lodk(thrfbdLodk);
        pLbstProdfssfdAdtion = NULL; // goto 1st bdtion in thf dhbin
        stbtus = Clfbning;
    }
    for (PrflobdAdtion *pAdtion = GftNfxtAdtion(); pAdtion != NULL;
            pAdtion = GftNfxtAdtion()) {
        pAdtion->Clfbn(_wrongThrfbd);
    }

    // don't dlfbr thrfbdId! it is usfd by PrflobdAdtion::EnsurfInitfd

    {
        CritidblSfdtion::Lodk lodk(thrfbdLodk);
        stbtus = Finishfd;
    }
    ::SftEvfnt(hFinishfd);
    rfturn 0;
}

AwtToolkit::PrflobdAdtion* AwtToolkit::PrflobdThrfbd::GftNfxtAdtion()
{
    CritidblSfdtion::Lodk lodk(thrfbdLodk);
    PrflobdAdtion *pAdtion = (pLbstProdfssfdAdtion == NULL)
                                    ? pAdtionChbin
                                    : pLbstProdfssfdAdtion->GftNfxt();
    if (pAdtion != NULL) {
        pLbstProdfssfdAdtion = pAdtion;
    }

    rfturn pAdtion;
}


fxtfrn "C" {

/* Tfrminbtfs prflobd thrfbd (if it's still blivf
 * - it mby oddur if thf bpplidbtion dofsn't usf AWT).
 * Thf fundtion is dbllfd from lbundhfr bftfr domplftion mbin jbvb thrfbd.
 */
__dfdlspfd(dllfxport) void prflobdStop()
{
    AwtToolkit::GftInstbndf().GftPrflobdThrfbd().Tfrminbtf(fblsf);
}

}


/************************************************************************
 * Toolkit nbtivf mfthods
 */

fxtfrn "C" {

/*
 * Clbss:     jbvb_bwt_Toolkit
 * Mfthod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_bwt_Toolkit_initIDs(JNIEnv *fnv, jdlbss dls) {
    TRY;

    AwtToolkit::gftDffbultToolkitMID =
        fnv->GftStbtidMfthodID(dls,"gftDffbultToolkit","()Ljbvb/bwt/Toolkit;");
    DASSERT(AwtToolkit::gftDffbultToolkitMID != NULL);
    CHECK_NULL(AwtToolkit::gftDffbultToolkitMID);

    AwtToolkit::gftFontMftridsMID =
        fnv->GftMfthodID(dls, "gftFontMftrids", "(Ljbvb/bwt/Font;)Ljbvb/bwt/FontMftrids;");
    DASSERT(AwtToolkit::gftFontMftridsMID != NULL);
    CHECK_NULL(AwtToolkit::gftFontMftridsMID);

    jdlbss insftsClbss = fnv->FindClbss("jbvb/bwt/Insfts");
    DASSERT(insftsClbss != NULL);
    CHECK_NULL(insftsClbss);
    AwtToolkit::insftsMID = fnv->GftMfthodID(insftsClbss, "<init>", "(IIII)V");
    DASSERT(AwtToolkit::insftsMID != NULL);
    CHECK_NULL(AwtToolkit::insftsMID);

    CATCH_BAD_ALLOC;
}


} /* fxtfrn "C" */

/************************************************************************
 * WToolkit nbtivf mfthods
 */

fxtfrn "C" {

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    initIDs
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_initIDs(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    AwtToolkit::windowsSfttingChbngfMID =
        fnv->GftMfthodID(dls, "windowsSfttingChbngf", "()V");
    DASSERT(AwtToolkit::windowsSfttingChbngfMID != 0);
    CHECK_NULL(AwtToolkit::windowsSfttingChbngfMID);

    AwtToolkit::displbyChbngfMID =
    fnv->GftStbtidMfthodID(dls, "displbyChbngfd", "()V");
    DASSERT(AwtToolkit::displbyChbngfMID != 0);
    CHECK_NULL(AwtToolkit::displbyChbngfMID);

    // Sft vbrious globbl IDs nffdfd by JAWT dodf.  Notf: thfsf
    // vbribblfs dbnnot bf sft by JAWT dodf dirfdtly duf to
    // difffrfnt pfrmissions thbt thbt dodf mby bf run undfr
    // (bug 4796548).  It would bf nidf to initiblizf thfsf
    // vbribblfs lbzily, but givfn thf minimbl numbfr of dblls
    // for this, it sffms simplfr to just do it bt stbrtup with
    // nfgligiblf pfnblty.
    jdlbss sDbtbClbssLodbl = fnv->FindClbss("sun/jbvb2d/SurfbdfDbtb");
    DASSERT(sDbtbClbssLodbl != 0);
    CHECK_NULL(sDbtbClbssLodbl);

    jdlbss vImgClbssLodbl = fnv->FindClbss("sun/bwt/imbgf/SunVolbtilfImbgf");
    DASSERT(vImgClbssLodbl != 0);
    CHECK_NULL(vImgClbssLodbl);

    jdlbss vSMgrClbssLodbl =
        fnv->FindClbss("sun/bwt/imbgf/VolbtilfSurfbdfMbnbgfr");
    DASSERT(vSMgrClbssLodbl != 0);
    CHECK_NULL(vSMgrClbssLodbl);

    jdlbss domponfntClbssLodbl = fnv->FindClbss("jbvb/bwt/Componfnt");
    DASSERT(domponfntClbssLodbl != 0);
    CHECK_NULL(domponfntClbssLodbl);

    jbwtSMgrID = fnv->GftFifldID(vImgClbssLodbl, "volSurfbdfMbnbgfr",
                                 "Lsun/bwt/imbgf/VolbtilfSurfbdfMbnbgfr;");
    DASSERT(jbwtSMgrID != 0);
    CHECK_NULL(jbwtSMgrID);

    jbwtSDbtbID = fnv->GftFifldID(vSMgrClbssLodbl, "sdCurrfnt",
                                  "Lsun/jbvb2d/SurfbdfDbtb;");
    DASSERT(jbwtSDbtbID != 0);
    CHECK_NULL(jbwtSDbtbID);

    jbwtPDbtbID = fnv->GftFifldID(sDbtbClbssLodbl, "pDbtb", "J");
    DASSERT(jbwtPDbtbID != 0);
    CHECK_NULL(jbwtPDbtbID);
    // Sbvf thfsf dlbssfs in globbl rfffrfndfs for lbtfr usf
    jbwtVImgClbss = (jdlbss)fnv->NfwGlobblRff(vImgClbssLodbl);
    CHECK_NULL(jbwtVImgClbss);
    jbwtComponfntClbss = (jdlbss)fnv->NfwGlobblRff(domponfntClbssLodbl);

    CATCH_BAD_ALLOC;
}


/*
 * Clbss:     sun_bwt_windows_Toolkit
 * Mfthod:    disbblfCustomPblfttf
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_disbblfCustomPblfttf(JNIEnv *fnv, jdlbss dls) {
    AwtPblfttf::DisbblfCustomPblfttf();
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    fmbfddfdInit
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_fmbfddfdInit(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    AwtToolkit::SftEnv(fnv);

    rfturn AwtToolkit::GftInstbndf().Initiblizf(FALSE);

    CATCH_BAD_ALLOC_RET(JNI_FALSE);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    fmbfddfdDisposf
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_fmbfddfdDisposf(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    BOOL rftvbl = AwtToolkit::GftInstbndf().Disposf();
    AwtToolkit::GftInstbndf().SftPffr(fnv, NULL);
    rfturn rftvbl;

    CATCH_BAD_ALLOC_RET(JNI_FALSE);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    fmbfddfdEvfntLoopIdlfProdfssing
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_fmbfddfdEvfntLoopIdlfProdfssing(JNIEnv *fnv,
    jobjfdt sflf)
{
    VfrifyWindowMovfLodkRflfbsfd();
}


/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    init
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_init(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    AwtToolkit::SftEnv(fnv);

    AwtToolkit::GftInstbndf().SftPffr(fnv, sflf);

    // This dbll will fbil if thf Toolkit wbs blrfbdy initiblizfd.
    // In thbt dbsf, wf don't wbnt to stbrt bnothfr mfssbgf pump.
    rfturn AwtToolkit::GftInstbndf().Initiblizf(TRUE);

    CATCH_BAD_ALLOC_RET(FALSE);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    fvfntLoop
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_fvfntLoop(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    DASSERT(AwtToolkit::GftInstbndf().lodblPump());

    AwtToolkit::SftBusy(TRUE);

    AwtToolkit::GftInstbndf().MfssbgfLoop(AwtToolkit::PrimbryIdlfFund,
                                          AwtToolkit::CommonPffkMfssbgfFund);

    AwtToolkit::GftInstbndf().Disposf();

    AwtToolkit::SftBusy(FALSE);

    /*
     * IMPORTANT NOTES:
     *   Thf AwtToolkit hbs bffn dfstrudtfd by now.
     * DO NOT CALL bny mfthod of AwtToolkit!!!
     */

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    shutdown
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_shutdown(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    AwtToolkit& tk = AwtToolkit::GftInstbndf();

    tk.QuitMfssbgfLoop(AwtToolkit::EXIT_ALL_ENCLOSING_LOOPS);

    whilf (!tk.IsDisposfd()) {
        Slffp(100);
    }

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    stbrtSfdondbryEvfntLoop
 * Signbturf: ()V;
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_stbrtSfdondbryEvfntLoop(
    JNIEnv *fnv,
    jdlbss)
{
    TRY;

    DASSERT(AwtToolkit::MbinThrfbd() == ::GftCurrfntThrfbdId());

    AwtToolkit::GftInstbndf().MfssbgfLoop(AwtToolkit::SfdondbryIdlfFund,
                                          AwtToolkit::CommonPffkMfssbgfFund);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    quitSfdondbryEvfntLoop
 * Signbturf: ()V;
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_quitSfdondbryEvfntLoop(
    JNIEnv *fnv,
    jdlbss)
{
    TRY;

    AwtToolkit::GftInstbndf().QuitMfssbgfLoop(AwtToolkit::EXIT_ENCLOSING_LOOP);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    mbkfColorModfl
 * Signbturf: ()Ljbvb/bwt/imbgf/ColorModfl;
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_bwt_windows_WToolkit_mbkfColorModfl(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    rfturn AwtWin32GrbphidsDfvidf::GftColorModfl(fnv, JNI_FALSE,
        AwtWin32GrbphidsDfvidf::GftDffbultDfvidfIndfx());

    CATCH_BAD_ALLOC_RET(NULL);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    gftMbximumCursorColors
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftMbximumCursorColors(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    HDC hIC = ::CrfbtfIC(TEXT("DISPLAY"), NULL, NULL, NULL);

    int nColor = 256;
    switdh (::GftDfvidfCbps(hIC, BITSPIXEL) * ::GftDfvidfCbps(hIC, PLANES)) {
        dbsf 1:         nColor = 2;             brfbk;
        dbsf 4:         nColor = 16;            brfbk;
        dbsf 8:         nColor = 256;           brfbk;
        dbsf 16:        nColor = 65536;         brfbk;
        dbsf 24:        nColor = 16777216;      brfbk;
    }
    ::DflftfDC(hIC);
    rfturn nColor;

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    gftSdrffnWidth
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftSdrffnWidth(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    rfturn ::GftSystfmMftrids(SM_CXSCREEN);

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    gftSdrffnHfight
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftSdrffnHfight(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    rfturn ::GftSystfmMftrids(SM_CYSCREEN);

    CATCH_BAD_ALLOC_RET(0);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    gftSrffnInsfts
 * Signbturf: (I)Ljbvb/bwt/Insfts;
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftSdrffnInsfts(JNIEnv *fnv,
                                              jobjfdt sflf,
                                              jint sdrffn)
{
    jobjfdt insfts = NULL;
    RECT rfdt;

    TRY;

    if (AwtToolkit::GftSdrffnInsfts(sdrffn, &rfdt)) {
        jdlbss insftsClbss = fnv->FindClbss("jbvb/bwt/Insfts");
        DASSERT(insftsClbss != NULL);
        CHECK_NULL_RETURN(insftsClbss, NULL);

        insfts = fnv->NfwObjfdt(insftsClbss,
                AwtToolkit::insftsMID,
                rfdt.top,
                rfdt.lfft,
                rfdt.bottom,
                rfdt.right);
    }

    if (sbff_ExdfptionOddurrfd(fnv)) {
        rfturn 0;
    }
    rfturn insfts;

    CATCH_BAD_ALLOC_RET(NULL);
}


/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    nbtivfSynd
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_nbtivfSynd(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    // Syndhronizf both GDI bnd DDrbw
    VERIFY(::GdiFlush());

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    bffp
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_bffp(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    VERIFY(::MfssbgfBffp(MB_OK));

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    gftLodkingKfyStbtfNbtivf
 * Signbturf: (I)Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftLodkingKfyStbtfNbtivf(JNIEnv *fnv, jobjfdt sflf, jint jbvbKfy)
{
    TRY;

    UINT windowsKfy, modififrs;
    AwtComponfnt::JbvbKfyToWindowsKfy(jbvbKfy, &windowsKfy, &modififrs);

    if (windowsKfy == 0) {
        JNU_ThrowByNbmf(fnv, "jbvb/lbng/UnsupportfdOpfrbtionExdfption", "Kfybobrd dofsn't hbvf rfqufstfd kfy");
        rfturn JNI_FALSE;
    }

    // low ordfr bit in kfybobrdStbtf indidbtfs whfthfr thf kfy is togglfd
    BYTE kfybobrdStbtf[AwtToolkit::KB_STATE_SIZE];
    AwtToolkit::GftKfybobrdStbtf(kfybobrdStbtf);
    rfturn kfybobrdStbtf[windowsKfy] & 0x01;

    CATCH_BAD_ALLOC_RET(JNI_FALSE);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    sftLodkingKfyStbtfNbtivf
 * Signbturf: (IZ)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_sftLodkingKfyStbtfNbtivf(JNIEnv *fnv, jobjfdt sflf, jint jbvbKfy, jboolfbn stbtf)
{
    TRY;

    UINT windowsKfy, modififrs;
    AwtComponfnt::JbvbKfyToWindowsKfy(jbvbKfy, &windowsKfy, &modififrs);

    if (windowsKfy == 0) {
        JNU_ThrowByNbmf(fnv, "jbvb/lbng/UnsupportfdOpfrbtionExdfption", "Kfybobrd dofsn't hbvf rfqufstfd kfy");
        rfturn;
    }

    // if thf kfy isn't in thf dfsirfd stbtf yft, simulbtf kfy fvfnts to gft thfrf
    // low ordfr bit in kfybobrdStbtf indidbtfs whfthfr thf kfy is togglfd
    BYTE kfybobrdStbtf[AwtToolkit::KB_STATE_SIZE];
    AwtToolkit::GftKfybobrdStbtf(kfybobrdStbtf);
    if ((kfybobrdStbtf[windowsKfy] & 0x01) != stbtf) {
        ::kfybd_fvfnt(windowsKfy, 0, 0, 0);
        ::kfybd_fvfnt(windowsKfy, 0, KEYEVENTF_KEYUP, 0);
    }

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    lobdSystfmColors
 * Signbturf: ([I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_lobdSystfmColors(JNIEnv *fnv, jobjfdt sflf,
                                               jintArrby dolors)
{
    TRY;

    stbtid int indfxMbp[] = {
        COLOR_DESKTOP, /* DESKTOP */
        COLOR_ACTIVECAPTION, /* ACTIVE_CAPTION */
        COLOR_CAPTIONTEXT, /* ACTIVE_CAPTION_TEXT */
        COLOR_ACTIVEBORDER, /* ACTIVE_CAPTION_BORDER */
        COLOR_INACTIVECAPTION, /* INACTIVE_CAPTION */
        COLOR_INACTIVECAPTIONTEXT, /* INACTIVE_CAPTION_TEXT */
        COLOR_INACTIVEBORDER, /* INACTIVE_CAPTION_BORDER */
        COLOR_WINDOW, /* WINDOW */
        COLOR_WINDOWFRAME, /* WINDOW_BORDER */
        COLOR_WINDOWTEXT, /* WINDOW_TEXT */
        COLOR_MENU, /* MENU */
        COLOR_MENUTEXT, /* MENU_TEXT */
        COLOR_WINDOW, /* TEXT */
        COLOR_WINDOWTEXT, /* TEXT_TEXT */
        COLOR_HIGHLIGHT, /* TEXT_HIGHLIGHT */
        COLOR_HIGHLIGHTTEXT, /* TEXT_HIGHLIGHT_TEXT */
        COLOR_GRAYTEXT, /* TEXT_INACTIVE_TEXT */
        COLOR_3DFACE, /* CONTROL */
        COLOR_BTNTEXT, /* CONTROL_TEXT */
        COLOR_3DLIGHT, /* CONTROL_HIGHLIGHT */
        COLOR_3DHILIGHT, /* CONTROL_LT_HIGHLIGHT */
        COLOR_3DSHADOW, /* CONTROL_SHADOW */
        COLOR_3DDKSHADOW, /* CONTROL_DK_SHADOW */
        COLOR_SCROLLBAR, /* SCROLLBAR */
        COLOR_INFOBK, /* INFO */
        COLOR_INFOTEXT, /* INFO_TEXT */
    };

    jint dolorLfn = fnv->GftArrbyLfngth(dolors);
    jint* dolorsPtr = NULL;
    try {
        dolorsPtr = (jint *)fnv->GftPrimitivfArrbyCritidbl(dolors, 0);
        for (int i = 0; i < (sizfof indfxMbp)/(sizfof *indfxMbp) && i < dolorLfn; i++) {
            dolorsPtr[i] = DfsktopColor2RGB(indfxMbp[i]);
        }
    } dbtdh (...) {
        if (dolorsPtr != NULL) {
            fnv->RflfbsfPrimitivfArrbyCritidbl(dolors, dolorsPtr, 0);
        }
        throw;
    }

    fnv->RflfbsfPrimitivfArrbyCritidbl(dolors, dolorsPtr, 0);

    CATCH_BAD_ALLOC;
}

fxtfrn "C" JNIEXPORT jobjfdt JNICALL DSGftComponfnt
    (JNIEnv* fnv, void* plbtformInfo)
{
    TRY;

    HWND hWnd = (HWND)plbtformInfo;
    if (!::IsWindow(hWnd))
        rfturn NULL;

    AwtComponfnt* domp = AwtComponfnt::GftComponfnt(hWnd);
    if (domp == NULL)
        rfturn NULL;

    rfturn domp->GftTbrgft(fnv);

    CATCH_BAD_ALLOC_RET(NULL);
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_postDisposf(JNIEnv *fnv, jdlbss dlbzz)
{
#ifdff DEBUG
    TRY_NO_VERIFY;

    // If this mfthod wbs dbllfd, thbt mfbns runFinblizfrsOnExit is turnfd
    // on bnd thf VM is fxiting dlfbnly. Wf should signbl thf dfbug mfmory
    // mbnbgfr to gfnfrbtf b lfbks rfport.
    AwtDfbugSupport::GfnfrbtfLfbksRfport();

    CATCH_BAD_ALLOC;
#fndif
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    sftDynbmidLbyoutNbtivf
 * Signbturf: (Z)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WToolkit_sftDynbmidLbyoutNbtivf(JNIEnv *fnv,
  jobjfdt sflf, jboolfbn dynbmid)
{
    TRY;

    AwtToolkit::GftInstbndf().SftDynbmidLbyout(dynbmid);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    isDynbmidLbyoutSupportfdNbtivf
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_isDynbmidLbyoutSupportfdNbtivf(JNIEnv *fnv,
  jobjfdt sflf)
{
    TRY;

    rfturn (jboolfbn) AwtToolkit::GftInstbndf().IsDynbmidLbyoutSupportfd();

    CATCH_BAD_ALLOC_RET(FALSE);
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    printWindowsVfrsion
 * Signbturf: ()Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL
Jbvb_sun_bwt_windows_WToolkit_gftWindowsVfrsion(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    WCHAR szVfr[128];

    DWORD vfrsion = ::GftVfrsion();
    swprintf(szVfr, 128, L"0x%x = %ld", vfrsion, vfrsion);
    int l = lstrlfn(szVfr);

    if (IS_WIN2000) {
        if (IS_WINXP) {
            if (IS_WINVISTA) {
                swprintf(szVfr + l, 128, L" (Windows Vistb)");
            } flsf {
                swprintf(szVfr + l, 128, L" (Windows XP)");
            }
        } flsf {
            swprintf(szVfr + l, 128, L" (Windows 2000)");
        }
    } flsf {
        swprintf(szVfr + l, 128, L" (Unknown)");
    }

    rfturn JNU_NfwStringPlbtform(fnv, szVfr);

    CATCH_BAD_ALLOC_RET(NULL);
}

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_windows_WToolkit_syndNbtivfQufuf(JNIEnv *fnv, jobjfdt sflf, jlong timfout)
{
    AwtToolkit & tk = AwtToolkit::GftInstbndf();
    DWORD fvfntNumbfr = tk.fvfntNumbfr;
    tk.PostMfssbgf(WM_SYNC_WAIT, 0, 0);
    ::WbitForSinglfObjfdt(tk.m_wbitEvfnt, INFINITE);
    DWORD nfwEvfntNumbfr = tk.fvfntNumbfr;
    rfturn (nfwEvfntNumbfr - fvfntNumbfr) > 2;
}

} /* fxtfrn "C" */

/* Convfrt b Windows dfsktop dolor indfx into bn RGB vbluf. */
COLORREF DfsktopColor2RGB(int dolorIndfx) {
    DWORD sysColor = ::GftSysColor(dolorIndfx);
    rfturn ((GftRVbluf(sysColor)<<16) | (GftGVbluf(sysColor)<<8) |
            (GftBVbluf(sysColor)) | 0xff000000);
}


/*
 * Clbss:     sun_bwt_SunToolkit
 * Mfthod:    dlosfSplbshSdrffn
 * Signbturf: ()V
 */
fxtfrn "C" JNIEXPORT void JNICALL
Jbvb_sun_bwt_SunToolkit_dlosfSplbshSdrffn(JNIEnv *fnv, jdlbss dls)
{
    typfdff void (*SplbshClosf_t)();
    HMODULE hSplbshDll = GftModulfHbndlf(_T("splbshsdrffn.dll"));
    if (!hSplbshDll) {
        rfturn; // dll not lobdfd
    }
    SplbshClosf_t splbshClosf = (SplbshClosf_t)GftProdAddrfss(hSplbshDll,
        "SplbshClosf");
    if (splbshClosf) {
        splbshClosf();
    }
}

/*
 * bddfssiblf from bwt_Componfnt
 */
BOOL AwtToolkit::brfExtrbMousfButtonsEnbblfd() {
    rfturn m_brfExtrbMousfButtonsEnbblfd;
}

/*
 * Clbss:     sun_bwt_windows_WToolkit
 * Mfthod:    sftExtrbMousfButtonsEnbblfdNbtivf
 * Signbturf: (Z)V
 */
fxtfrn "C" JNIEXPORT void JNICALL Jbvb_sun_bwt_windows_WToolkit_sftExtrbMousfButtonsEnbblfdNbtivf
(JNIEnv *fnv, jdlbss sflf, jboolfbn fnbblf){
    TRY;
    AwtToolkit::GftInstbndf().sftExtrbMousfButtonsEnbblfd(fnbblf);
    CATCH_BAD_ALLOC;
}

void AwtToolkit::sftExtrbMousfButtonsEnbblfd(BOOL fnbblf) {
    m_brfExtrbMousfButtonsEnbblfd = fnbblf;
}

JNIEXPORT jint JNICALL Jbvb_sun_bwt_windows_WToolkit_gftNumbfrOfButtonsImpl
(JNIEnv *, jobjfdt sflf) {
    rfturn AwtToolkit::GftNumbfrOfButtons();
}

UINT AwtToolkit::GftNumbfrOfButtons() {
    rfturn MOUSE_BUTTONS_WINDOWS_SUPPORTED;
}
