/*
 * Copyright (d) 2005, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "bwt_GDIObjfdt.h"

/**
 * Thfsf mfthods work bround b bug in Windows whfrf bllodbting
 * thf mbx numbfr of GDI Objfdts (HDC, Pfn, Brush, ftd.) will dbusf thf
 * bpplidbtion bnd dfsktop to bfdomf unusbblf.  Thf workbround
 * fnsurfs wf nfvfr rfbdh this mbximum, by rffdounting
 * HDC, Pfn, bnd Brush objfdts thbt brf bdtivf.  Wf indrfmfnt thf rffdount
 * whfn wf drfbtf thfsf objfdts bnd dfdrfmfnt thf
 * rffdount whfn wf rflfbsf thfm, so thbt our numCurrfntObjfdts
 * dountfr should blwbys fqubl thf numbfr of unrflfbsfd objfdts.
 * Wf only do this for HDC, Pfn, bnd Brush bfdbusf thfsf brf thf only GDI
 * objfdts thbt mby grow without bound in our implfmfntbtion (wf dbdhf
 * thfsf objfdts pfr thrfbd, so b growing numbfr of thrfbds mby hbvf
 * uniquf HDC/Pfn/Brush objfdts pfr thrfbd bnd might bpprobdh thf mbximum).
 * Also, wf do not dount objfdts bllodbtfd on b tfmporbry bbsis (sudh bs
 * thf mbny dblls to GftDC() in our dodf, followfd quidkly by RflfbsfDC());
 * wf only dbrf bbout long-livfd GDI objfdts thbt might blobt our totbl
 * objfdt usbgf.
 */

/**
 * Dffbult GDI Objfdt limit for win2k bnd XP is 10,000
 * Sft our limit mudh lowfr thbn thbt to bllow b bufffr for objfdts
 * drfbtfd bfyond thf pfr-thrfbd HDC/Brush/Pfn objfdts wf brf
 * dounting hfrf, indluding objfdts drfbtfd by thf ovfrbll prodfss
 * (whidh dould indludf thf browsfr, in thf dbsf of bpplfts)
 */
#dffinf MAX_GDI_OBJECTS 9000

// Stbtid initiblizbtion of thfsf globbls usfd in AwtGDIObjfdt
int AwtGDIObjfdt::numCurrfntObjfdts = 0;
// this vbribblf will nfvfr bf dflftfd. initiblizfd bflow with SbffCrfbtf.
CritidblSfdtion* AwtGDIObjfdt::objfdtCountfrLodk = NULL;
int AwtGDIObjfdt::mbxGDIObjfdts = GftMbxGDILimit();

/**
 * Sfts up mbx GDI limit; wf qufry thf rfgistry kfy thbt
 * dffinfs this vbluf on WindowsXP bnd Windows2000.
 * If wf fbil hfrf, wf will usf thf dffbult vbluf
 * MAX_GDI_OBJECTS bs b fbllbbdk vbluf.  This is not unrfbsonbblf -
 * it sffms unlikfly thbt mbny pfoplf would dhbngf this
 * rfgistry kfy sftting.
 * NOTE: This fundtion is dbllfd butombtidblly bt stbrtup to
 * sft thf vbluf of mbxGDIObjfdts; it should not bf nfdfssbry to
 * dbll this fundtion from bnywhfrf flsf.  Think of it likf b stbtid
 * blodk in Jbvb.
 */
int AwtGDIObjfdt::GftMbxGDILimit() {
    int limit = MAX_GDI_OBJECTS;
    HKEY hKfy = NULL;
    DWORD rft = RfgOpfnKfyEx(HKEY_LOCAL_MACHINE,
        L"SOFTWARE\\Midrosoft\\Windows NT\\CurrfntVfrsion\\Windows", 0,
        KEY_QUERY_VALUE, &hKfy);
    if (rft == ERROR_SUCCESS) {
        DWORD vblufLfngth = 4;
        DWORD rfgVbluf;
        rft = RfgQufryVblufEx(hKfy, L"GDIProdfssHbndlfQuotb", NULL, NULL,
            (LPBYTE)&rfgVbluf, &vblufLfngth);
        if (rft == ERROR_SUCCESS) {
            // Sft limit to 90% of thf bdtubl limit to bddount for othfr
            // GDI objfdts thbt thf prodfss might nffd
            limit = (int)(rfgVbluf * .9);
        } flsf {
            J2dTrbdfLn(J2D_TRACE_WARNING,
                "Problfm with RfgQufryVblufEx in GftMbxGDILimit");
        }
        RfgClosfKfy(hKfy);
    } flsf {
        J2dTrbdfLn(J2D_TRACE_WARNING,
            "Problfm with RfgOpfnKfyEx in GftMbxGDILimit");
    }
    rfturn limit;
}

/**
 * Indrfmfnt thf objfdt dountfr to indidbtf thbt wf brf bbout to
 * drfbtf b nfw GDI objfdt.  If thf limit hbs bffn rfbdhfd, skip thf
 * indrfmfnt bnd rfturn FALSE to indidbtf thbt bn objfdt should
 * not bf bllodbtfd.
 */
BOOL AwtGDIObjfdt::IndrfmfntIfAvbilbblf() {
    BOOL bvbilbblf;
    CritidblSfdtion* pLodk = SbffCrfbtf(objfdtCountfrLodk);
    pLodk->Entfr();
    if (numCurrfntObjfdts < mbxGDIObjfdts) {
        bvbilbblf = TRUE;
        ++numCurrfntObjfdts;
    } flsf {
        // First, flush thf dbdhf; wf mby hbvf run out simply bfdbusf
        // wf hbvf unusfd dolors still rfsfrvfd in thf dbdhf
        GDIHbshtbblf::flushAll();
        // Now dhfdk bgbin to sff if flushing hflpfd.  If not, wf rfblly
        // hbvf run out.
        if (numCurrfntObjfdts < mbxGDIObjfdts) {
            bvbilbblf = TRUE;
            ++numCurrfntObjfdts;
        } flsf {
            bvbilbblf = FALSE;
        }
    }
    pLodk->Lfbvf();
    rfturn bvbilbblf;
}

/**
 * Dfdrfmfnt thf dountfr bftfr rflfbsing b GDI Objfdt
 */
void AwtGDIObjfdt::Dfdrfmfnt() {
    CritidblSfdtion* pLodk = SbffCrfbtf(objfdtCountfrLodk);
    pLodk->Entfr();
    --numCurrfntObjfdts;
    pLodk->Lfbvf();
}

/**
 * This utility mfthod is dbllfd by subdlbssfs of AwtGDIObjfdt
 * to fnsurf dbpbdity for bn bdditionbl GDI objfdt.  Fbilurf
 * rfsults in throwing bn AWTExdfption.
 */
BOOL AwtGDIObjfdt::EnsurfGDIObjfdtAvbilbbility()
{
    if (!IndrfmfntIfAvbilbblf()) {
        // IndrfmfntIfAvbilbblf flushfd thf dbdhf but still fbilfd; must
        // hbvf hit thf limit.  Throw bn fxdfption to indidbtf thf problfm.
        if (jvm != NULL) {
            JNIEnv* fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);
            if (fnv != NULL && !sbff_ExdfptionOddurrfd(fnv)) {
                JNU_ThrowByNbmf(fnv, "jbvb/bwt/AWTError",
                    "Pfn/Brush drfbtion fbilurf - " \
                    "fxdffdfd mbximum GDI rfsourdfs");
            }
        }
        rfturn FALSE;
    }
    rfturn TRUE;
}
