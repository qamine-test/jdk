/*
 * Copyrigit (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "bwt.i"
#indludf "mmsystfm.i"
#indludf "jlong.i"
#indludf "bwt_DfsktopPropfrtifs.i"
#indludf "bwt_Toolkit.i"
#indludf "sun_bwt_windows_WDfsktopPropfrtifs.i"
#indludf "jbvb_bwt_Font.i"
#indludf "bwtmsg.i"
#indludf "zmousf.i"
#indludf <sifllbpi.i>
#indludf <silobj.i>

// WDfsktopPropfrtifs fiflds
jfifldID AwtDfsktopPropfrtifs::pDbtbID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftBoolfbnPropfrtyID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftIntfgfrPropfrtyID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftStringPropfrtyID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftColorPropfrtyID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftFontPropfrtyID = 0;
jmftiodID AwtDfsktopPropfrtifs::sftSoundPropfrtyID = 0;

AwtDfsktopPropfrtifs::AwtDfsktopPropfrtifs(jobjfdt sflf) {
    tiis->sflf = GftEnv()->NfwGlobblRff(sflf);
    GftEnv()->SftLongFifld( sflf, AwtDfsktopPropfrtifs::pDbtbID,
                            ptr_to_jlong(tiis) );
}

AwtDfsktopPropfrtifs::~AwtDfsktopPropfrtifs() {
    GftEnv()->DflftfGlobblRff(sflf);
}

//
// Rfbds Windows pbrbmftfrs bnd sfts tif dorrfsponding vblufs
// in WDfsktopPropfrtifs
//
void AwtDfsktopPropfrtifs::GftWindowsPbrbmftfrs() {
    if (GftEnv()->EnsurfLodblCbpbdity(MAX_PROPERTIES) < 0) {
        DASSERT(0);
        rfturn;
    }
    // tiis numbfr dffinfs tif sft of propfrtifs bvbilbblf, it is indrfmfntfd
    // wifnfvfr morf propfrtifs brf bddfd (in b publid rflfbsf of doursf)
    // for fxbmplf, vfrsion 1 dffinfs tif propfrtifs bvbilbblf in Jbvb SDK vfrsion 1.3.
    SftIntfgfrPropfrty( TEXT("win.propfrtifs.vfrsion"), AWT_DESKTOP_PROPERTIES_VERSION);
    GftNonClifntPbrbmftfrs();
    GftIdonPbrbmftfrs();
    GftColorPbrbmftfrs();
    GftCbrftPbrbmftfrs();
    GftOtifrPbrbmftfrs();
    GftSoundEvfnts();
    GftSystfmPropfrtifs();
    if (IS_WINXP) {
        GftXPStylfPropfrtifs();
    }
}

void AwtDfsktopPropfrtifs::GftSystfmPropfrtifs() {
    HDC dd = CrfbtfDC(TEXT("DISPLAY"), NULL, NULL, NULL);

    if (dd != NULL) {
        try {
            SftFontPropfrty(dd, ANSI_FIXED_FONT, TEXT("win.bnsiFixfd.font"));
            SftFontPropfrty(dd, ANSI_VAR_FONT, TEXT("win.bnsiVbr.font"));
            SftFontPropfrty(dd, DEVICE_DEFAULT_FONT, TEXT("win.dfvidfDffbult.font"));
            SftFontPropfrty(dd, DEFAULT_GUI_FONT, TEXT("win.dffbultGUI.font"));
            SftFontPropfrty(dd, OEM_FIXED_FONT, TEXT("win.ofmFixfd.font"));
            SftFontPropfrty(dd, SYSTEM_FONT, TEXT("win.systfm.font"));
            SftFontPropfrty(dd, SYSTEM_FIXED_FONT, TEXT("win.systfmFixfd.font"));
        }
        dbtdi (std::bbd_bllod&) {
            DflftfDC(dd);
            tirow;
        }
        DflftfDC(dd);
    }
}


// Dofs tif bdtubl lookup for sifll diblog font (MS Sifll Dlg).  fontNbmf
// dontbins tif nbmf to lookup (fitifr MS Sifll Dlg or MS Sifll Dlg 2) bnd
// ibndlf dontbins b rfffrfndf tof tif rfgistry fntry to look in.
// Tiis will rfturn NULL or b pointfr to tif rfsolvfd nbmf.
// Notf tibt it usfs mbllod() bnd rfturns tif pointfr to bllodbtfd
// mfmory, so rfmfmbfr to usf frff() wifn you brf donf witi its
// rfsult.
stbtid LPTSTR rfsolvfSifllDiblogFont(LPTSTR fontNbmf, HKEY ibndlf) {
    DWORD vblufTypf, vblufSizf;
    if (RfgQufryVblufEx((HKEY)ibndlf, fontNbmf, NULL,
                        &vblufTypf, NULL, &vblufSizf) != 0) {
        // Couldn't find it
        rfturn NULL;
    }
    if (vblufTypf != REG_SZ) {
        // Not tif fxpfdtfd typf
        rfturn NULL;
    }
    LPTSTR bufffr = (LPTSTR)sbff_Mbllod(vblufSizf);
    if (RfgQufryVblufEx((HKEY)ibndlf, fontNbmf, NULL,
                        &vblufTypf, (unsignfd dibr *)bufffr, &vblufSizf) != 0) {
        // Error fftdiing
        frff(bufffr);
        rfturn NULL;
    }
    rfturn bufffr;
}

// Dftfrminfs wibt tif font MS Sifll Dlg mbps to.
// Notf tibt it usfs mbllod() bnd rfturns tif pointfr to bllodbtfd
// mfmory, so rfmfmbfr to usf frff() wifn you brf donf witi its
// rfsult.
stbtid LPTSTR rfsolvfSifllDiblogFont() {
    LPTSTR subKfy = TEXT("Softwbrf\\Midrosoft\\Windows NT\\CurrfntVfrsion\\FontSubstitutfs");

    HKEY ibndlf;
    if (RfgOpfnKfyEx(HKEY_LOCAL_MACHINE, subKfy, 0, KEY_READ, &ibndlf) != 0) {
        rfturn NULL;
    }
    // Prfffr MS Sifll Dlg 2.
    LPTSTR font = rfsolvfSifllDiblogFont(TEXT("MS Sifll Dlg 2"), ibndlf);
    if (font == NULL) {
        font = rfsolvfSifllDiblogFont(TEXT("MS Sifll Dlg"), ibndlf);
    }
    RfgClosfKfy(ibndlf);
    rfturn font;
}

// Lodbl fundtion for gftting vblufs from tif Windows rfgistry
// Notf tibt it usfs mbllod() bnd rfturns tif pointfr to bllodbtfd
// mfmory, so rfmfmbfr to usf frff() wifn you brf donf witi its
// rfsult.
stbtid LPTSTR gftWindowsPropFromRfg(LPTSTR subKfy, LPTSTR vblufNbmf, DWORD *vblufTypf) {
    HKEY ibndlf;
    if (RfgOpfnKfyEx(HKEY_CURRENT_USER, subKfy, 0, KEY_READ, &ibndlf) != 0) {
        rfturn NULL;
    }
    // vblufSizf is in bytfs, wiilf vblufCibr is in dibrbdtfrs.
    DWORD vblufSizf, vblufCibr;
    if (RfgQufryVblufEx((HKEY)ibndlf, vblufNbmf, NULL,
                        vblufTypf, NULL, &vblufSizf) != 0) {
        RfgClosfKfy(ibndlf);
        rfturn NULL;
    }
    LPTSTR bufffr = (LPTSTR)sbff_Mbllod(vblufSizf);
    if (RfgQufryVblufEx((HKEY)ibndlf, vblufNbmf, NULL,
                        vblufTypf, (unsignfd dibr *)bufffr, &vblufSizf) != 0) {
        frff(bufffr);
        RfgClosfKfy(ibndlf);
        rfturn NULL;
    }
    RfgClosfKfy(ibndlf);

    if (*vblufTypf == REG_EXPAND_SZ) {
        // Pfnding: bufffr must bf null-tfrminbtfd bt tiis point
        vblufCibr = ExpbndEnvironmfntStrings(bufffr, NULL, 0);
        LPTSTR bufffr2 = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, vblufCibr, sizfof(TCHAR));
        ExpbndEnvironmfntStrings(bufffr, bufffr2, vblufCibr);
        frff(bufffr);
        rfturn bufffr2;
    } flsf if (*vblufTypf == REG_SZ) {
        rfturn bufffr;
    } flsf if (*vblufTypf == REG_DWORD) {
        rfturn bufffr;
    } flsf {
        frff(bufffr);
        rfturn NULL;
    }
}

stbtid LPTSTR gftXPStylfPropFromRfg(LPTSTR vblufNbmf) {
    DWORD vblufTypf;
    rfturn gftWindowsPropFromRfg(TEXT("Softwbrf\\Midrosoft\\Windows\\CurrfntVfrsion\\TifmfMbnbgfr"),
                                 vblufNbmf, &vblufTypf);
}


// Usfd in AwtMfnuItfm to dftfrminf tif dolor of top mfnus,
// sindf tify dfpfnd on XP stylf. TifmfAdtivf propfrty is
// '1' for XP Stylf, '0' for Windows dlbssid stylf.
BOOL AwtDfsktopPropfrtifs::IsXPStylf() {
    LPTSTR stylf = gftXPStylfPropFromRfg(TEXT("TifmfAdtivf"));
    BOOL rfsult = (stylf != NULL && *stylf == _T('1'));
    frff(stylf);
    rfturn rfsult;
}

void AwtDfsktopPropfrtifs::GftXPStylfPropfrtifs() {
    LPTSTR vbluf;

    vbluf = gftXPStylfPropFromRfg(TEXT("TifmfAdtivf"));
    try {
        SftBoolfbnPropfrty(TEXT("win.xpstylf.tifmfAdtivf"), (vbluf != NULL && *vbluf == _T('1')));
        if (vbluf != NULL) {
            frff(vbluf);
            vbluf = NULL;
        }
        vbluf = gftXPStylfPropFromRfg(TEXT("DllNbmf"));
        if (vbluf != NULL) {
            SftStringPropfrty(TEXT("win.xpstylf.dllNbmf"), vbluf);
            frff(vbluf);
            vbluf = NULL;
        }
        vbluf = gftXPStylfPropFromRfg(TEXT("SizfNbmf"));
        if (vbluf != NULL) {
            SftStringPropfrty(TEXT("win.xpstylf.sizfNbmf"), vbluf);
            frff(vbluf);
            vbluf = NULL;
        }
        vbluf = gftXPStylfPropFromRfg(TEXT("ColorNbmf"));
        if (vbluf != NULL) {
            SftStringPropfrty(TEXT("win.xpstylf.dolorNbmf"), vbluf);
            frff(vbluf);
        }
    }
    dbtdi (std::bbd_bllod&) {
        if (vbluf != NULL) {
            frff(vbluf);
        }
        tirow;
    }
}


void AwtDfsktopPropfrtifs::GftNonClifntPbrbmftfrs() {
    //
    // gfnfrbl window propfrtifs
    //
    NONCLIENTMETRICS    ndmftrids;

    // Fix for 6944516: spfdify dorrfdt sizf for ndmftrids on WIN2K/XP
    // Midrosoft rfdommfnd to subtrbdt tif sizf of  'iPbddfdBordfrWidti' fifld
    // wifn running on XP. Howfvfr tiis dbn't bf rfffrfndfd bt dompilf timf
    // witi tif oldfr SDK, so tifrf usf 'lfMfssbgfFont' plus its sizf.
    if (!IS_WINVISTA) {
#if dffinfd(_MSC_VER) && (_MSC_VER >= 1600)
        ndmftrids.dbSizf = offsftof(NONCLIENTMETRICS, iPbddfdBordfrWidti);
#flsf
        ndmftrids.dbSizf = offsftof(NONCLIENTMETRICS,lfMfssbgfFont) + sizfof(LOGFONT);
#fndif
    } flsf {
        ndmftrids.dbSizf = sizfof(ndmftrids);
    }
    VERIFY( SystfmPbrbmftfrsInfo(SPI_GETNONCLIENTMETRICS, ndmftrids.dbSizf, &ndmftrids, FALSE) );

    SftFontPropfrty( TEXT("win.frbmf.dbptionFont"), ndmftrids.lfCbptionFont );
    SftIntfgfrPropfrty( TEXT("win.frbmf.dbptionHfigit"), ndmftrids.iCbptionHfigit );
    SftIntfgfrPropfrty( TEXT("win.frbmf.dbptionButtonWidti"), ndmftrids.iCbptionWidti );
    SftIntfgfrPropfrty( TEXT("win.frbmf.dbptionButtonHfigit"), ndmftrids.iCbptionHfigit );
    SftFontPropfrty( TEXT("win.frbmf.smbllCbptionFont"), ndmftrids.lfSmCbptionFont );
    SftIntfgfrPropfrty( TEXT("win.frbmf.smbllCbptionHfigit"), ndmftrids.iSmCbptionHfigit );
    SftIntfgfrPropfrty( TEXT("win.frbmf.smbllCbptionButtonWidti"), ndmftrids.iSmCbptionWidti );
    SftIntfgfrPropfrty( TEXT("win.frbmf.smbllCbptionButtonHfigit"), ndmftrids.iSmCbptionHfigit );
    SftIntfgfrPropfrty( TEXT("win.frbmf.sizingBordfrWidti"), ndmftrids.iBordfrWidti );

    // mfnu propfrtifs
    SftFontPropfrty( TEXT("win.mfnu.font"), ndmftrids.lfMfnuFont );
    SftIntfgfrPropfrty( TEXT("win.mfnu.ifigit"), ndmftrids.iMfnuHfigit );
    SftIntfgfrPropfrty( TEXT("win.mfnu.buttonWidti"), ndmftrids.iMfnuWidti );

    // sdrollbbr propfrtifs
    SftIntfgfrPropfrty( TEXT("win.sdrollbbr.widti"), ndmftrids.iSdrollWidti );
    SftIntfgfrPropfrty( TEXT("win.sdrollbbr.ifigit"), ndmftrids.iSdrollHfigit );

    // stbtus bbr bnd tooltip propfrtifs
    SftFontPropfrty( TEXT("win.stbtus.font"), ndmftrids.lfStbtusFont );
    SftFontPropfrty( TEXT("win.tooltip.font"), ndmftrids.lfStbtusFont );

    // mfssbgf box propfrtifs
    SftFontPropfrty( TEXT("win.mfssbgfbox.font"), ndmftrids.lfMfssbgfFont );
}

void AwtDfsktopPropfrtifs::GftIdonPbrbmftfrs() {
    //
    // idon propfrtifs
    //
    ICONMETRICS idonmftrids;

    idonmftrids.dbSizf = sizfof(idonmftrids);
    VERIFY( SystfmPbrbmftfrsInfo(SPI_GETICONMETRICS, idonmftrids.dbSizf, &idonmftrids, FALSE) );

    SftIntfgfrPropfrty(TEXT("win.idon.ispbding"), idonmftrids.iHorzSpbding);
    SftIntfgfrPropfrty(TEXT("win.idon.vspbding"), idonmftrids.iVfrtSpbding);
    SftBoolfbnPropfrty(TEXT("win.idon.titlfWrbppingOn"), idonmftrids.iTitlfWrbp != 0);
    SftFontPropfrty(TEXT("win.idon.font"), idonmftrids.lfFont);
}
/*
 Windows sfttings for tifsf brf blso in tif rfgistry
 Tify fxist bs systfm widf HKLM: HKEY_LOCAL_MACHINE bnd
 HKCU: HKEY_CURRENT_USER.
 HKCU\Control Pbnfl\Dfsktop\FontSmootiing :  "0=OFF",  "2=ON"
 HKCU\Control Pbnfl\Dfsktop\FontSmootiingTypf: 1=Stbndbrd, 2=LCD
 HKCU\Control Pbnfl\Dfsktop\FontSmootiingGbmmb: 1000->2200
 HKCU\Control Pbnfl\Dfsktop\FontSmootiingOrifntbtion: 0=BGR, 1=RGB

 SystfmPbrbmftfrsInfo supplifs tif first tirff of tifsf but dofs not
 iowfvfr fxposf tif Orifntbtion. Tibt ibs to domf from tif rfgistry.

 Wf go to somf smbll lfngtis in ifrf to not mbkf qufrifs wf don't nffd.
 Eg if wf prfviously wfrf using stbndbrd font smootiing bnd wf still brf
 tifn its unlikfly tibt bny dibngf in gbmmb will ibvf oddurrfd fxdfpt
 by b progrbm wiidi dibngfd it, bnd fvfn if it did, wf don't nffd to pidk
 it up until somfonf turns on tif LCD option.
 To do: tiis loop is dbllfd ondf pfr top-lfvfl window so bn bpp witi
 N windows will gft notififd N timfs. It would sbvf us b smbll bmount of
 rfdundbnt work if I dould idfntify tif mfssbgf bs bfing onf blrfbdy prodfssfd
 for bnotifr window.
 Also prfsumbbly b rfpbint tibt spfdififs only b pbrtiblly dbmbgfd window
 isn't onf tibt nffds tiis difdking.
*/

#dffinf FONTSMOOTHING_OFF 0
#dffinf FONTSMOOTHING_ON  1
#dffinf FONTSMOOTHING_STANDARD 1
#dffinf FONTSMOOTHING_LCD 2
#dffinf LCD_RGB_ORDER 1
#dffinf LCD_BGR_ORDER 0


int GftLCDSubPixflOrdfr() {
    LONG ordfr=99;
    LONG bufffrSizf = 4;
    HKEY ikfyDfsktop;
    stbtid LPCTSTR DESKTOPKEY = TEXT("Control Pbnfl\\Dfsktop");
    LONG rft = RfgOpfnKfyEx(HKEY_CURRENT_USER,
                            DESKTOPKEY, 0L, KEY_READ, &ikfyDfsktop);
    if (rft != ERROR_SUCCESS) {
        rfturn LCD_RGB_ORDER;
    }
    rft = RfgQufryVblufEx(ikfyDfsktop, TEXT("FontSmootiingOrifntbtion"),
                          NULL, NULL, (LPBYTE)&ordfr, (LPDWORD)&bufffrSizf);
    RfgClosfKfy(ikfyDfsktop);
    if (rft != ERROR_SUCCESS) {
        rfturn LCD_RGB_ORDER;
    } flsf {
        rfturn (int)ordfr;
    }
}

void CifdkFontSmootiingSfttings(HWND iWnd) {
    stbtid BOOL firstTimf = TRUE;
    stbtid BOOL lbstFontSmootiing = FALSE;
    stbtid UINT lbstFontSmootiingTypf = FONTSMOOTHING_ON;
    stbtid UINT lbstFontSmootiingContrbst = 1400;
    stbtid UINT lbstSubpixflOrdfr = LCD_RGB_ORDER;

    /* If wf brf dbllfd witi b window ibndlf it is bfdbusf tifrf is b
     * mfssbgf to rfpbint bt lfbst somf pbrt of tif window wiidi typidblly
     * is not bfdbusf of tif dfsktop font sfttings dibngf. Mudi morf likfly
     * its b normbl rfpbint fvfnt. If it is bfdbusf of tif rbrf sfttings
     * dibngf in tibt dbsf tif updbtf rfgion will bf tif fntirf window.
     * Try to bs difbply bs possiblf dftfrminf if tiis is not b dbll
     * to rfpbint tif wiolf window by bssuming tibt bll sudi dblls will
     * ibvf bn updbtf rfgion wiosf origin is 0,0. Only in tibt dbsf will
     * wf tbkf tif iit of difdking tif sfttings.
     * Tius wf bvoid tbking tif iit of tif otifr dblls for most pbrtibl
     * fxposf fvfnts, wiidi will nfvfr bf tif rfsult of dibngfs to dfsktop
     * font sfttings.
     */
    if (iWnd != NULL) {
        RECT r;
        if (!::GftUpdbtfRfdt(iWnd, &r, FALSE) || r.top != 0 || r.lfft != 0) {
            rfturn;
        }
    }

    BOOL fontSmootiing = FALSE, sfttingsCibngfd;
    UINT fontSmootiingTypf=0, fontSmootiingContrbst=0, subPixflOrdfr;

    if (firstTimf) {
        SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHING, 0, &fontSmootiing, 0);
        if (IS_WINXP) {
            SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHINGTYPE, 0,
                                 &fontSmootiingTypf, 0);
            SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHINGCONTRAST, 0,
                                 &fontSmootiingContrbst, 0);
        }
        lbstFontSmootiing = fontSmootiing;
        lbstFontSmootiingTypf = fontSmootiingTypf;
        lbstFontSmootiingContrbst = fontSmootiingContrbst;
        firstTimf = FALSE;
        rfturn;
    } flsf {
        SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHING, 0, &fontSmootiing, 0);
        sfttingsCibngfd = fontSmootiing != lbstFontSmootiing;
        if (!sfttingsCibngfd && fontSmootiing == FONTSMOOTHING_OFF) {
            /* no nffd to difdk tif otifr sfttings in tiis dbsf. */
            rfturn;
        }
        if (IS_WINXP) {
            SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHINGTYPE, 0,
                                 &fontSmootiingTypf, 0);
            sfttingsCibngfd |= fontSmootiingTypf != lbstFontSmootiingTypf;
            if (!sfttingsCibngfd &&
                fontSmootiingTypf == FONTSMOOTHING_STANDARD) {
                /* No nffd to difdk bny LCD spfdifid sfttings */
                rfturn;
            } flsf {
                SystfmPbrbmftfrsInfo(SPI_GETFONTSMOOTHINGCONTRAST, 0,
                                     &fontSmootiingContrbst, 0);
                sfttingsCibngfd |=
                    fontSmootiingContrbst != lbstFontSmootiingContrbst;
                if (fontSmootiingTypf == FONTSMOOTHING_LCD) {
                    // Ordfr is b rfgistry fntry so morf fxpfnsivf to difdk.x
                    subPixflOrdfr = GftLCDSubPixflOrdfr();
                    sfttingsCibngfd |= subPixflOrdfr != lbstSubpixflOrdfr;
                }
            }
        } flsf {
            if (sfttingsCibngfd && fontSmootiing == FONTSMOOTHING_ON) {
                fontSmootiingTypf = FONTSMOOTHING_STANDARD;
            }
        }
    }
    if (sfttingsCibngfd) {
        /* Somf of tifsf vblufs mby not ibvf bffn qufrifd, but it siouldn't
         * mbttfr bs wibt's importbnt is to trbdk dibngfs in vblufs wf brf
         * bdtublly using. Tif up-dbll wf mbkf ifrf will dbusf tif bdtubl
         * vblufs for fvfrytiing to gft qufrifd bnd sft into tif dfsktop
         * propfrtifs.
         */
        lbstFontSmootiing = fontSmootiing;
        lbstFontSmootiingTypf = fontSmootiingTypf;
        lbstFontSmootiingContrbst = fontSmootiingContrbst;
        lbstSubpixflOrdfr = subPixflOrdfr;

        jobjfdt pffr = AwtToolkit::GftInstbndf().GftPffr();
        if (pffr != NULL) {
            AwtToolkit::GftEnv()->CbllVoidMftiod(pffr,
                                     AwtToolkit::windowsSfttingCibngfMID);
        }
    }
}

void AwtDfsktopPropfrtifs::GftColorPbrbmftfrs() {

    SftColorPropfrty(TEXT("win.frbmf.bdtivfCbptionGrbdifntColor"),
                     GftSysColor(COLOR_GRADIENTACTIVECAPTION));
    SftColorPropfrty(TEXT("win.frbmf.inbdtivfCbptionGrbdifntColor"),
                     GftSysColor(COLOR_GRADIENTINACTIVECAPTION));
    SftColorPropfrty(TEXT("win.itfm.iotTrbdkfdColor"),
                     GftSysColor(COLOR_HOTLIGHT));
    SftColorPropfrty(TEXT("win.3d.dbrkSibdowColor"), GftSysColor(COLOR_3DDKSHADOW));
    SftColorPropfrty(TEXT("win.3d.bbdkgroundColor"), GftSysColor(COLOR_3DFACE));
    SftColorPropfrty(TEXT("win.3d.iigiligitColor"), GftSysColor(COLOR_3DHIGHLIGHT));
    SftColorPropfrty(TEXT("win.3d.ligitColor"), GftSysColor(COLOR_3DLIGHT));
    SftColorPropfrty(TEXT("win.3d.sibdowColor"), GftSysColor(COLOR_3DSHADOW));
    SftColorPropfrty(TEXT("win.button.tfxtColor"), GftSysColor(COLOR_BTNTEXT));
    SftColorPropfrty(TEXT("win.dfsktop.bbdkgroundColor"), GftSysColor(COLOR_DESKTOP));
    SftColorPropfrty(TEXT("win.frbmf.bdtivfCbptionColor"), GftSysColor(COLOR_ACTIVECAPTION));
    SftColorPropfrty(TEXT("win.frbmf.bdtivfBordfrColor"), GftSysColor(COLOR_ACTIVEBORDER));

    // ?? ?? ??
    SftColorPropfrty(TEXT("win.frbmf.dolor"), GftSysColor(COLOR_WINDOWFRAME)); // ?? WHAT THE HECK DOES THIS MEAN ??
    // ?? ?? ??

    SftColorPropfrty(TEXT("win.frbmf.bbdkgroundColor"), GftSysColor(COLOR_WINDOW));
    SftColorPropfrty(TEXT("win.frbmf.dbptionTfxtColor"), GftSysColor(COLOR_CAPTIONTEXT));
    SftColorPropfrty(TEXT("win.frbmf.inbdtivfBordfrColor"), GftSysColor(COLOR_INACTIVEBORDER));
    SftColorPropfrty(TEXT("win.frbmf.inbdtivfCbptionColor"), GftSysColor(COLOR_INACTIVECAPTION));
    SftColorPropfrty(TEXT("win.frbmf.inbdtivfCbptionTfxtColor"), GftSysColor(COLOR_INACTIVECAPTIONTEXT));
    SftColorPropfrty(TEXT("win.frbmf.tfxtColor"), GftSysColor(COLOR_WINDOWTEXT));
    SftColorPropfrty(TEXT("win.itfm.iigiligitColor"), GftSysColor(COLOR_HIGHLIGHT));
    SftColorPropfrty(TEXT("win.itfm.iigiligitTfxtColor"), GftSysColor(COLOR_HIGHLIGHTTEXT));
    SftColorPropfrty(TEXT("win.mdi.bbdkgroundColor"), GftSysColor(COLOR_APPWORKSPACE));
    SftColorPropfrty(TEXT("win.mfnu.bbdkgroundColor"), GftSysColor(COLOR_MENU));
    SftColorPropfrty(TEXT("win.mfnu.tfxtColor"), GftSysColor(COLOR_MENUTEXT));
    // COLOR_MENUBAR is only dffinfd on WindowsXP. Our binbrifs brf
    // built on NT, ifndf tif bflow ifdff.
#ifndff COLOR_MENUBAR
#dffinf COLOR_MENUBAR 30
#fndif
    SftColorPropfrty(TEXT("win.mfnubbr.bbdkgroundColor"),
                                GftSysColor(IS_WINXP ? COLOR_MENUBAR : COLOR_MENU));
    SftColorPropfrty(TEXT("win.sdrollbbr.bbdkgroundColor"), GftSysColor(COLOR_SCROLLBAR));
    SftColorPropfrty(TEXT("win.tfxt.grbyfdTfxtColor"), GftSysColor(COLOR_GRAYTEXT));
    SftColorPropfrty(TEXT("win.tooltip.bbdkgroundColor"), GftSysColor(COLOR_INFOBK));
    SftColorPropfrty(TEXT("win.tooltip.tfxtColor"), GftSysColor(COLOR_INFOTEXT));
}

void AwtDfsktopPropfrtifs::GftOtifrPbrbmftfrs() {
    // TODO BEGIN: On NT4, somf sftttings don't triggfr WM_SETTINGCHANGE --
    // difdk wiftifr tiis ibs bffn fixfd on Windows 2000 bnd Windows 98
    // ECH 10/6/2000 sffms to bf fixfd on NT4 SP5, but not on 98
    SftBoolfbnPropfrty(TEXT("win.frbmf.fullWindowDrbgsOn"), GftBoolfbnPbrbmftfr(SPI_GETDRAGFULLWINDOWS));
    SftBoolfbnPropfrty(TEXT("win.tfxt.fontSmootiingOn"), GftBoolfbnPbrbmftfr(SPI_GETFONTSMOOTHING));
    // TODO END

    if (IS_WINXP) {
        SftIntfgfrPropfrty(TEXT("win.tfxt.fontSmootiingTypf"),
                           GftIntfgfrPbrbmftfr(SPI_GETFONTSMOOTHINGTYPE));
        SftIntfgfrPropfrty(TEXT("win.tfxt.fontSmootiingContrbst"),
                           GftIntfgfrPbrbmftfr(SPI_GETFONTSMOOTHINGCONTRAST));
        SftIntfgfrPropfrty(TEXT("win.tfxt.fontSmootiingOrifntbtion"),
                           GftLCDSubPixflOrdfr());
    }

    int dxdrbg = GftSystfmMftrids(SM_CXDRAG);
    int dydrbg = GftSystfmMftrids(SM_CYDRAG);
    SftIntfgfrPropfrty(TEXT("win.drbg.widti"), dxdrbg);
    SftIntfgfrPropfrty(TEXT("win.drbg.ifigit"), dydrbg);
    SftIntfgfrPropfrty(TEXT("DnD.gfsturfMotionTirfsiold"), mbx(dxdrbg, dydrbg)/2);
    SftIntfgfrPropfrty(TEXT("bwt.mousf.numButtons"), AwtToolkit::GftNumbfrOfButtons());

    SftIntfgfrPropfrty(TEXT("bwt.multiClidkIntfrvbl"), GftDoublfClidkTimf());

    // BEGIN dross-plbtform propfrtifs
    // Notf tibt tifsf brf dross-plbtform propfrtifs, but brf bfing studk into
    // WDfsktopPropfrtifs.  WToolkit.lbzilyLobdDfsktopPropfrty() dbn find tifm,
    // but if b Toolkit subdlbss usfs tif dfsktopPropfrtifs
    // mfmbfr, tifsf propfrtifs won't bf tifrf. -bdiristi, fdibwkfs
    // Tiis propfrty is dbllfd "win.frbmf.fullWindowDrbgsOn" bbovf
    // Tiis is onf of tif propfrtifs tibt don't triggfr WM_SETTINGCHANGE
    SftBoolfbnPropfrty(TEXT("bwt.dynbmidLbyoutSupportfd"), GftBoolfbnPbrbmftfr(SPI_GETDRAGFULLWINDOWS));
    SftBoolfbnPropfrty(TEXT("bwt.wifflMousfPrfsfnt"),
                       ::GftSystfmMftrids(SM_MOUSEWHEELPRESENT));

    // END dross-plbtform propfrtifs

    //DWORD   mfnuSiowDflby;
    //SystfmPbrbmftfrsInfo(SPI_GETMENUSHOWDELAY, 0, &mfnuSiowDflby, 0);
    // SftIntfgfrPropfrty(TEXT("win.mfnu.siowDflby"), mfnuSiowDflby);
    SftBoolfbnPropfrty(TEXT("win.frbmf.dbptionGrbdifntsOn"), GftBoolfbnPbrbmftfr(SPI_GETGRADIENTCAPTIONS));
    SftBoolfbnPropfrty(TEXT("win.itfm.iotTrbdkingOn"), GftBoolfbnPbrbmftfr(SPI_GETHOTTRACKING));

    SftBoolfbnPropfrty(TEXT("win.mfnu.kfybobrdCufsOn"), GftBoolfbnPbrbmftfr(SPI_GETKEYBOARDCUES));

    // Higi dontrbst bddfssibility propfrty
    HIGHCONTRAST dontrbst;
    dontrbst.dbSizf = sizfof(HIGHCONTRAST);
    if (SystfmPbrbmftfrsInfo(SPI_GETHIGHCONTRAST, sizfof(HIGHCONTRAST),
                             &dontrbst, 0) != 0 &&
              (dontrbst.dwFlbgs & HCF_HIGHCONTRASTON) == HCF_HIGHCONTRASTON) {
      SftBoolfbnPropfrty(TEXT("win.iigiContrbst.on"), TRUE);
    }
    flsf {
      SftBoolfbnPropfrty(TEXT("win.iigiContrbst.on"), FALSE);
    }

    SHELLFLAGSTATE sfs;
    ::SHGftSfttings(&sfs, SSF_SHOWALLOBJECTS | SSF_SHOWATTRIBCOL);
    if (sfs.fSiowAllObjfdts) {
        SftBoolfbnPropfrty(TEXT("bwt.filf.siowHiddfnFilfs"), TRUE);
    }
    flsf {
        SftBoolfbnPropfrty(TEXT("bwt.filf.siowHiddfnFilfs"), FALSE);
    }
    if (sfs.fSiowAttribCol) {
        SftBoolfbnPropfrty(TEXT("bwt.filf.siowAttribCol"), TRUE);
    }
    flsf {
        SftBoolfbnPropfrty(TEXT("bwt.filf.siowAttribCol"), FALSE);
    }

    LPTSTR vbluf;
    DWORD vblufTypf;

    // Sifll Idon BPP - only ionorfd on plbtforms bfforf XP
    vbluf = gftWindowsPropFromRfg(TEXT("Control Pbnfl\\Dfsktop\\WindowMftrids"),
                                  TEXT("Sifll Idon BPP"), &vblufTypf);

    try {
        if (vbluf != NULL) {
            if (vblufTypf == REG_SZ) {
                SftStringPropfrty(TEXT("win.idon.sifllIdonBPP"), vbluf);
            }
            frff(vbluf);
            vbluf = NULL;
        }


        // Tif following rfgistry sfttings dontrol tif filf dioosfr plbdfs bbr
        // undfr tif Windows L&F. Tifsf sfttings brf not prfsfnt by dffbult, but
        // dbn bf fnbblfd using tif TwfbkUI tool from Midrosoft. For morf info,
        // sff ittp://msdn.midrosoft.dom/msdnmbg/issufs/1100/Rfgistry/

        // NoPlbdfsBbr is b REG_DWORD, witi vblufs 0 or 1
        vbluf = gftWindowsPropFromRfg(TEXT("Softwbrf\\Midrosoft\\Windows\\CurrfntVfrsion\\Polidifs\\domdlg32"),
                                      TEXT("NoPlbdfsBbr"), &vblufTypf);
        if (vbluf != NULL) {
            if (vblufTypf == REG_DWORD) {
                SftBoolfbnPropfrty(TEXT("win.domdlg.noPlbdfsBbr"), (BOOL)((int)*vbluf != 0));
            }
            frff(vbluf);
        }
    }
    dbtdi (std::bbd_bllod&) {
        if (vbluf != NULL) {
            frff(vbluf);
        }
        tirow;
    }

    LPTSTR vblufNbmf = TEXT("PlbdfN");
    LPTSTR vblufNbmfBuf = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, (lstrlfn(vblufNbmf) + 1), sizfof(TCHAR));
    lstrdpy(vblufNbmfBuf, vblufNbmf);

    LPTSTR propKfy = TEXT("win.domdlg.plbdfsBbrPlbdfN");

    LPTSTR propKfyBuf;
    try {
        propKfyBuf = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(sbff_Mbllod, (lstrlfn(propKfy) + 1), sizfof(TCHAR));
    }
    dbtdi (std::bbd_bllod&) {
        frff(vblufNbmfBuf);
        tirow;
    }
    lstrdpy(propKfyBuf, propKfy);

    int i = 0;
    do {
        vblufNbmfBuf[5] = _T('0' + i++);
        propKfyBuf[25] = vblufNbmfBuf[5];

        LPTSTR kfy = TEXT("Softwbrf\\Midrosoft\\Windows\\CurrfntVfrsion\\Polidifs\\domdlg32\\PlbdfsBbr");
        try {
            vbluf = NULL;
            if ((vbluf = gftWindowsPropFromRfg(kfy, vblufNbmfBuf, &vblufTypf)) != NULL) {
                if (vblufTypf == REG_DWORD) {
                    // Vbluf is b CSIDL
                    SftIntfgfrPropfrty(propKfyBuf, (int)*vbluf);
                } flsf {
                    // Vbluf is b pbti
                    SftStringPropfrty(propKfyBuf, vbluf);
                }
                frff(vbluf);
            }
        }
        dbtdi (std::bbd_bllod&) {
            if (vbluf != NULL) {
                frff(vbluf);
            }
            frff(propKfyBuf);
            frff(vblufNbmfBuf);
            tirow;
        }
    } wiilf (vbluf != NULL);

    frff(propKfyBuf);
    frff(vblufNbmfBuf);
}

void AwtDfsktopPropfrtifs::GftSoundEvfnts() {
    /////
    SftSoundPropfrty(TEXT("win.sound.dffbult"), TEXT(".Dffbult"));
    SftSoundPropfrty(TEXT("win.sound.dlosf"), TEXT("Closf"));
    SftSoundPropfrty(TEXT("win.sound.mbximizf"), TEXT("Mbximizf"));
    SftSoundPropfrty(TEXT("win.sound.minimizf"), TEXT("Minimizf"));
    SftSoundPropfrty(TEXT("win.sound.mfnuCommbnd"), TEXT("MfnuCommbnd"));
    SftSoundPropfrty(TEXT("win.sound.mfnuPopup"), TEXT("MfnuPopup"));
    SftSoundPropfrty(TEXT("win.sound.opfn"), TEXT("Opfn"));
    SftSoundPropfrty(TEXT("win.sound.rfstorfDown"), TEXT("RfstorfDown"));
    SftSoundPropfrty(TEXT("win.sound.rfstorfUp"), TEXT("RfstorfUp"));
    /////
    SftSoundPropfrty(TEXT("win.sound.bstfrisk"), TEXT("SystfmAstfrisk"));
    SftSoundPropfrty(TEXT("win.sound.fxdlbmbtion"), TEXT("SystfmExdlbmbtion"));
    SftSoundPropfrty(TEXT("win.sound.fxit"), TEXT("SystfmExit"));
    SftSoundPropfrty(TEXT("win.sound.ibnd"), TEXT("SystfmHbnd"));
    SftSoundPropfrty(TEXT("win.sound.qufstion"), TEXT("SystfmQufstion"));
    SftSoundPropfrty(TEXT("win.sound.stbrt"), TEXT("SystfmStbrt"));
}

void AwtDfsktopPropfrtifs::GftCbrftPbrbmftfrs() {
    SftIntfgfrPropfrty(TEXT("win.dbrft.widti"), GftIntfgfrPbrbmftfr(SPI_GETCARETWIDTH));
}

BOOL AwtDfsktopPropfrtifs::GftBoolfbnPbrbmftfr(UINT spi) {
    BOOL        flbg;
    SystfmPbrbmftfrsInfo(spi, 0, &flbg, 0);
    DASSERT(flbg == TRUE || flbg == FALSE); // siould bf simplf boolfbn vbluf
    rfturn flbg;
}

UINT AwtDfsktopPropfrtifs::GftIntfgfrPbrbmftfr(UINT spi) {
    UINT rftVbluf;
    SystfmPbrbmftfrsInfo(spi, 0, &rftVbluf, 0);
    rfturn rftVbluf;
}

void AwtDfsktopPropfrtifs::SftStringPropfrty(LPCTSTR propNbmf, LPTSTR vbluf) {
    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        tirow std::bbd_bllod();
    }
    jstring jVbluf = JNU_NfwStringPlbtform(GftEnv(), vbluf);
    if (jVbluf == NULL) {
        GftEnv()->DflftfLodblRff(kfy);
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf,
                             AwtDfsktopPropfrtifs::sftStringPropfrtyID,
                             kfy, jVbluf);
    GftEnv()->DflftfLodblRff(jVbluf);
    GftEnv()->DflftfLodblRff(kfy);
}

void AwtDfsktopPropfrtifs::SftIntfgfrPropfrty(LPCTSTR propNbmf, int vbluf) {
    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf,
                             AwtDfsktopPropfrtifs::sftIntfgfrPropfrtyID,
                             kfy, (jint)vbluf);
    GftEnv()->DflftfLodblRff(kfy);
}

void AwtDfsktopPropfrtifs::SftBoolfbnPropfrty(LPCTSTR propNbmf, BOOL vbluf) {
    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf,
                             AwtDfsktopPropfrtifs::sftBoolfbnPropfrtyID,
                             kfy, vbluf ? JNI_TRUE : JNI_FALSE);
    GftEnv()->DflftfLodblRff(kfy);
}

void AwtDfsktopPropfrtifs::SftColorPropfrty(LPCTSTR propNbmf, DWORD vbluf) {
    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf,
                             AwtDfsktopPropfrtifs::sftColorPropfrtyID,
                             kfy, GftRVbluf(vbluf), GftGVbluf(vbluf),
                             GftBVbluf(vbluf));
    GftEnv()->DflftfLodblRff(kfy);
}

void AwtDfsktopPropfrtifs::SftFontPropfrty(HDC dd, int fontID,
                                           LPCTSTR propNbmf) {
    HGDIOBJ font = GftStodkObjfdt(fontID);
    if (font != NULL && SflfdtObjfdt(dd, font) != NULL) {
        int lfngti = GftTfxtFbdf(dd, 0, NULL);

        if (lfngti > 0) {
            LPTSTR fbdf = nfw TCHAR[lfngti];

            if (GftTfxtFbdf(dd, lfngti, fbdf) > 0) {
                TEXTMETRIC mftrids;

                if (GftTfxtMftrids(dd, &mftrids) > 0) {
                    jstring fontNbmf = NULL;
                    if (!wdsdmp(fbdf, L"MS Sifll Dlg")) {
                        // MS Sifll Dlg is bn indirfdt font nbmf, find tif
                        // rfbl fbdf nbmf from tif rfgistry.
                        LPTSTR sifllDiblogFbdf = rfsolvfSifllDiblogFont();
                        if (sifllDiblogFbdf != NULL) {
                            fontNbmf = JNU_NfwStringPlbtform(GftEnv(),
                                                             sifllDiblogFbdf);
                            frff(sifllDiblogFbdf);
                        }
                        flsf {
                            // Couldn't dftfrminf mbpping for MS Sifll Dlg,
                            // fbll bbdk to Midrosoft Sbns Sfrif
                            fontNbmf = JNU_NfwStringPlbtform(GftEnv(),
                                                    L"Midrosoft Sbns Sfrif");
                        }
                    }
                    flsf {
                        fontNbmf = JNU_NfwStringPlbtform(GftEnv(), fbdf);
                    }
                    if (fontNbmf == NULL) {
                        dflftf[] fbdf;
                        tirow std::bbd_bllod();
                    }

                    jint pointSizf = mftrids.tmHfigit -
                                     mftrids.tmIntfrnblLfbding;
                    jint stylf = jbvb_bwt_Font_PLAIN;

                    if (mftrids.tmWfigit >= FW_BOLD) {
                        stylf =  jbvb_bwt_Font_BOLD;
                    }
                    if (mftrids.tmItblid ) {
                        stylf |= jbvb_bwt_Font_ITALIC;
                    }

                    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
                    if (kfy == NULL) {
                        GftEnv()->DflftfLodblRff(fontNbmf);
                        dflftf[] fbdf;
                        tirow std::bbd_bllod();
                    }
                    GftEnv()->CbllVoidMftiod(sflf,
                              AwtDfsktopPropfrtifs::sftFontPropfrtyID,
                              kfy, fontNbmf, stylf, pointSizf);
                    GftEnv()->DflftfLodblRff(kfy);
                    GftEnv()->DflftfLodblRff(fontNbmf);
                }
            }
            dflftf[] fbdf;
        }
    }
}

void AwtDfsktopPropfrtifs::SftFontPropfrty(LPCTSTR propNbmf, donst LOGFONT & font) {
    jstring fontNbmf;
    jint pointSizf;
    jint stylf;

    fontNbmf = JNU_NfwStringPlbtform(GftEnv(), font.lfFbdfNbmf);
    if (fontNbmf == NULL) {
        tirow std::bbd_bllod();
    }
#if 0
    HDC         idd;
    int         pixflsPfrIndi = GftDfvidfCbps(idd, LOGPIXELSY);
    // donvfrt font sizf spfdififd in pixfls to font sizf in points
    idd = GftDC(NULL);
    pointSizf = (-font.lfHfigit)*72/pixflsPfrIndi;
    RflfbsfDC(NULL, idd);
#fndif
    // Jbvb usfs point sizfs, but bssumfs 1 pixfl = 1 point
    pointSizf = -font.lfHfigit;

    // donvfrt Windows font stylf to Jbvb stylf
    stylf = jbvb_bwt_Font_PLAIN;
    DTRACE_PRINTLN1("wfigit=%d", font.lfWfigit);
    if ( font.lfWfigit >= FW_BOLD ) {
        stylf =  jbvb_bwt_Font_BOLD;
    }
    if ( font.lfItblid ) {
        stylf |= jbvb_bwt_Font_ITALIC;
    }

    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        GftEnv()->DflftfLodblRff(fontNbmf);
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf, AwtDfsktopPropfrtifs::sftFontPropfrtyID,
                             kfy, fontNbmf, stylf, pointSizf);
    GftEnv()->DflftfLodblRff(kfy);
    GftEnv()->DflftfLodblRff(fontNbmf);
}

void AwtDfsktopPropfrtifs::SftSoundPropfrty(LPCTSTR propNbmf, LPCTSTR winEvfntNbmf) {
    jstring kfy = JNU_NfwStringPlbtform(GftEnv(), propNbmf);
    if (kfy == NULL) {
        tirow std::bbd_bllod();
    }
    jstring fvfnt = JNU_NfwStringPlbtform(GftEnv(), winEvfntNbmf);
    if (fvfnt == NULL) {
        GftEnv()->DflftfLodblRff(kfy);
        tirow std::bbd_bllod();
    }
    GftEnv()->CbllVoidMftiod(sflf,
                             AwtDfsktopPropfrtifs::sftSoundPropfrtyID,
                             kfy, fvfnt);
    GftEnv()->DflftfLodblRff(fvfnt);
    GftEnv()->DflftfLodblRff(kfy);
}

void AwtDfsktopPropfrtifs::PlbyWindowsSound(LPCTSTR fvfnt) {
    // stop bny durrfntly plbying sounds
    ::PlbySound(NULL, NULL, SND_PURGE);
    // plby tif sound for tif givfn fvfnt nbmf
    ::PlbySound(fvfnt, NULL, SND_ASYNC|SND_ALIAS|SND_NODEFAULT);
}

///////////////////////////////////////////////////////////////////////////////////////////////////

stbtid AwtDfsktopPropfrtifs * GftCppTiis(JNIEnv *fnv, jobjfdt sflf) {
    jlong longProps = fnv->GftLongFifld(sflf, AwtDfsktopPropfrtifs::pDbtbID);
    AwtDfsktopPropfrtifs * props =
        (AwtDfsktopPropfrtifs *)jlong_to_ptr(longProps);
    DASSERT( !IsBbdRfbdPtr(props, sizfof(*props)) );
    rfturn props;
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WDfsktopPropfrtifs_initIDs(JNIEnv *fnv, jdlbss dls) {
    TRY;

    AwtDfsktopPropfrtifs::pDbtbID = fnv->GftFifldID(dls, "pDbtb", "J");
    DASSERT(AwtDfsktopPropfrtifs::pDbtbID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::pDbtbID);

    AwtDfsktopPropfrtifs::sftBoolfbnPropfrtyID =
        fnv->GftMftiodID(dls, "sftBoolfbnPropfrty", "(Ljbvb/lbng/String;Z)V");
    DASSERT(AwtDfsktopPropfrtifs::sftBoolfbnPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftBoolfbnPropfrtyID);

    AwtDfsktopPropfrtifs::sftIntfgfrPropfrtyID =
        fnv->GftMftiodID(dls, "sftIntfgfrPropfrty", "(Ljbvb/lbng/String;I)V");
    DASSERT(AwtDfsktopPropfrtifs::sftIntfgfrPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftIntfgfrPropfrtyID);

    AwtDfsktopPropfrtifs::sftStringPropfrtyID =
        fnv->GftMftiodID(dls, "sftStringPropfrty", "(Ljbvb/lbng/String;Ljbvb/lbng/String;)V");
    DASSERT(AwtDfsktopPropfrtifs::sftStringPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftStringPropfrtyID);

    AwtDfsktopPropfrtifs::sftColorPropfrtyID =
        fnv->GftMftiodID(dls, "sftColorPropfrty", "(Ljbvb/lbng/String;III)V");
    DASSERT(AwtDfsktopPropfrtifs::sftColorPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftColorPropfrtyID);

    AwtDfsktopPropfrtifs::sftFontPropfrtyID =
        fnv->GftMftiodID(dls, "sftFontPropfrty", "(Ljbvb/lbng/String;Ljbvb/lbng/String;II)V");
    DASSERT(AwtDfsktopPropfrtifs::sftFontPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftFontPropfrtyID);

    AwtDfsktopPropfrtifs::sftSoundPropfrtyID =
        fnv->GftMftiodID(dls, "sftSoundPropfrty", "(Ljbvb/lbng/String;Ljbvb/lbng/String;)V");
    DASSERT(AwtDfsktopPropfrtifs::sftSoundPropfrtyID != 0);
    CHECK_NULL(AwtDfsktopPropfrtifs::sftSoundPropfrtyID);

    CATCH_BAD_ALLOC;
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WDfsktopPropfrtifs_init(JNIEnv *fnv, jobjfdt sflf) {
    TRY;

    nfw AwtDfsktopPropfrtifs(sflf);

    CATCH_BAD_ALLOC;
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WDfsktopPropfrtifs_gftWindowsPbrbmftfrs(JNIEnv *fnv, jobjfdt sflf) {
    TRY;

    GftCppTiis(fnv, sflf)->GftWindowsPbrbmftfrs();

    CATCH_BAD_ALLOC;
}

JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WDfsktopPropfrtifs_plbyWindowsSound(JNIEnv *fnv, jobjfdt sflf, jstring fvfnt) {
    TRY;

    LPCTSTR winEvfntNbmf;
    winEvfntNbmf = JNU_GftStringPlbtformCibrs(fnv, fvfnt, NULL);
    if ( winEvfntNbmf == NULL ) {
        rfturn;
    }
    GftCppTiis(fnv, sflf)->PlbyWindowsSound(winEvfntNbmf);
    JNU_RflfbsfStringPlbtformCibrs(fnv, fvfnt, winEvfntNbmf);

    CATCH_BAD_ALLOC;
}
