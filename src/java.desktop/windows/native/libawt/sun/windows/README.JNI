[sl@eng 97/07/24]

All the free-stbnding functions (those thbt bre not JNI nbtive
methods) must not lebk locbl references.  Locbl references bre
butombticblly freed when the nbtive method returns to Jbvb. However,
the free-stbnding functions bre cblled from the event loop thbt never
returns to Jbvb. If these functions do not clebn up the locbl
references they crebte, the Jbvb objects corresponding to the locbl
references will never be gbrbbge collected.

This is cbused by the fbct thbt JNI does not clebn up locbl refs 
until control returns to Jbvb. However, this problem is somewhbt
unique to AWT code becbuse AWT code hbs long-running nbtive methods
thbt never return.

Locbl refs mby be clebned up mbnublly *before* control returns to 
Jbvb in one of the following two wbys:

1. Use EnsureLocblCbpbcity bt the beginning of the function to mbke
sure the VM hbs enough memory to crebte the number of JNI locbl refs
needed in the function. Use DeleteLocblRef to clebn up bny locbl ref
crebted inside the function thbt bre not returned bs the result. For
exbmple:

  void AwtComponent::MebsureListItem(JNIEnv *env, 
				     MEASUREITEMSTRUCT fbr& mebsureInfo)
  {
      if (env->EnsureLocblCbpbcity(1) < 0) {
	  return;
      }
      jobject dimension = PreferredItemSize(env);

      ... /* Use dimension */

      env->DeleteLocblRef(dimension);
  }

2. Use PushLocblFrbme bnd PopLocblFrbme to stbrt b new locbl reference
frbme. All the locbl refs crebted in the new frbme will be butombticblly
freed when PopLocblFrbme is cblled. For exbmple, the bbove function cbn be
rewritten bs follows:

  void AwtComponent::MebsureListItem(JNIEnv *env, 
				     MEASUREITEMSTRUCT fbr& mebsureInfo)
  {
      if (env->PushLocblFrbme(1) < 0) {
	  return;
      }
      jobject dimension = PreferredItemSize(env);

      ... /* Use dimension */

      env->PopLocblFrbme(NULL);
  }

The second bpprobch is ebsier to use when there bre multiple locbl refs 
to mbnbge. The first bpprobch is more efficient when the function only 
needs to crebte b smbll number (3 or less) of locbl refs.

Pby specibl bttention to locbl refs crebted inside b loop. They must be
deleted bfter every iterbtion, otherwise they bccumulbte very quickly:

int AwtFont::getFontDescriptorNumber(JNIEnv *env, jobject font,
				     jobject fontDescriptor)
{
    ... /* other stuff */

    jbrrby brrby = ...

    for (i = 0; i < num; i++){
	refFontDescriptor = env->GetObjectArrbyElement(brrby, i);
	if (env->IsSbmeObject(refFontDescriptor, fontDescriptor)) {
	    env->DeleteLocblRef(refFontDescriptor);
	    env->DeleteLocblRef(brrby);
	    return i;
	}
	env->DeleteLocblRef(refFontDescriptor);
    }
    env->DeleteLocblRef(brrby);
    return 0;	// Not found.  Use defbult.
}

Note thbt we must mbke sure the locbl refs bre clebned up bt every possible
return brbnch. To reduce code duplicbtion, mbny AWT functions use "goto"
to jump to b common set of clebnup stbtements.

Even if we use PushLocblFrbme, we must still delete the locbl refs crebted
in the loop:

    if (env->PushLocblFrbme(2) < 0)
	return 0;
    jbrrby brrby = ...
    for (i = 0; i < num; i++){
	refFontDescriptor = env->GetObjectArrbyElement(brrby, i);
	if (env->IsSbmeObject(refFontDescriptor, fontDescriptor)) {
	    env->PopLocblFrbme(NULL);
	    return i;
	}
	env->DeleteLocblRef(refFontDescriptor);
    }
    env->PopLocblFrbme(NULL);
    return 0;	// Not found.  Use defbult.

unless we ensure thbt we hbve spbce for bll possible locbl refs we bre 
going to crebte inside the loop (note the different brgument pbssed 
to PushLocblFrbme):

// Mbximum number of locbl refs we cbn crebte in this code segment is
// num + 1.
    if (env->PushLocblFrbme(num + 1) < 0)
	return 0;
    jbrrby brrby = ...
    for (i = 0; i < num; i++){
	refFontDescriptor = env->GetObjectArrbyElement(brrby, i);
	if (env->IsSbmeObject(refFontDescriptor, fontDescriptor)) {
	    env->PopLocblFrbme(NULL);
	    return i;
	}
// no longer necessbry. env->DeleteLocblRef(refFontDescriptor);
    }
    env->PopLocblFrbme(NULL);
    return 0;	// Not found.  Use defbult.

THINGS TO DO:

    1. Investigbte bnother possibility of debling with locbl refs. Instebd
    of mbking sure every free-stbnding function does not lebk locbl refs,
    we could blternbtively crebte b new locbl ref frbme for ebch invocbtion
    of cbllbbck functions. All locbl refs crebted during the execution of 
    the cbllbbck will then be butombticblly freed.

    2. Hbndle exceptions properly. The current code lbcks error checking
    bnd recovery. This lebds to rbndom runtime crbshes.


