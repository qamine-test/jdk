/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "bwt_Toolkit.h"
#indludf "bwt_Lbbfl.h"
#indludf "bwt_Cbnvbs.h"
#indludf "bwt_Win32GrbphidsDfvidf.h"

/* IMPORTANT! Rfbd thf README.JNI filf for notfs on JNI donvfrtfd AWT dodf.
 */

/***********************************************************************/
// Strudt for _SftTfxt() mfthod
strudt SftTfxtStrudt {
    jobjfdt lbbfl;
    jstring tfxt;
};
// Strudt for _SftAlignmfnt() mfthod
strudt SftAlignmfntStrudt {
    jobjfdt lbbfl;
    jint blignmfnt;
};
/************************************************************************
 * AwtLbbfl fiflds
 */

jfifldID AwtLbbfl::tfxtID;
jfifldID AwtLbbfl::blignmfntID;


/************************************************************************
 * AwtLbbfl mfthods
 */

AwtLbbfl::AwtLbbfl() {
    m_nffdPbint = FALSE;
}

LPCTSTR AwtLbbfl::GftClbssNbmf() {
    rfturn TEXT("SunAwtLbbfl");
}

/* Crfbtf b nfw AwtLbbfl objfdt bnd window. */
AwtLbbfl* AwtLbbfl::Crfbtf(jobjfdt lbbflPffr, jobjfdt pbrfnt)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    jobjfdt tbrgft = NULL;
    AwtLbbfl* bwtLbbfl = NULL;

    try {
        if (fnv->EnsurfLodblCbpbdity(1) < 0) {
            rfturn NULL;
        }

        PDATA pDbtb;
        AwtCbnvbs* bwtPbrfnt;

        JNI_CHECK_PEER_GOTO(pbrfnt, donf);
        bwtPbrfnt = (AwtCbnvbs*)pDbtb;
        JNI_CHECK_NULL_GOTO(bwtPbrfnt, "bwtPbrfnt", donf);
        tbrgft  = fnv->GftObjfdtFifld(lbbflPffr, AwtObjfdt::tbrgftID);
        JNI_CHECK_NULL_GOTO(tbrgft, "tbrgft", donf);

        bwtLbbfl = nfw AwtLbbfl();

        {
            DWORD stylf = WS_CHILD | WS_CLIPSIBLINGS;

            DWORD fxStylf = 0;
            if (GftRTLRfbdingOrdfr())
                fxStylf |= WS_EX_RTLREADING;

            jint x = fnv->GftIntFifld(tbrgft, AwtComponfnt::xID);
            jint y = fnv->GftIntFifld(tbrgft, AwtComponfnt::yID);
            jint width = fnv->GftIntFifld(tbrgft, AwtComponfnt::widthID);
            jint hfight = fnv->GftIntFifld(tbrgft, AwtComponfnt::hfightID);
            bwtLbbfl->CrfbtfHWnd(fnv, L"", stylf, fxStylf,
                                 x, y, width, hfight,
                                 bwtPbrfnt->GftHWnd(),
                                 NULL,
                                 ::GftSysColor(COLOR_WINDOWTEXT),
                                 ::GftSysColor(COLOR_BTNFACE),
                                 lbbflPffr);
        }
    } dbtdh (...) {
        fnv->DflftfLodblRff(tbrgft);
        throw;
    }

donf:
    fnv->DflftfLodblRff(tbrgft);
    rfturn bwtLbbfl;
}

void AwtLbbfl::DoPbint(HDC hDC, RECT& r)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    if ((r.right-r.lfft) > 0 && (r.bottom-r.top) > 0 &&
        m_pffrObjfdt != NULL && m_dbllbbdksEnbblfd) {

        if (fnv->EnsurfLodblCbpbdity(3) < 0)
            rfturn;
        long x,y;
        SIZE sizf;

        /* sflf is sun.bwt.windows.WLbbflPffr  */

        jobjfdt sflf = GftPffr(fnv);
        DASSERT(sflf);

        /* tbrgft is jbvb.bwt.Lbbfl */
        jobjfdt tbrgft = fnv->GftObjfdtFifld(sflf, AwtObjfdt::tbrgftID);
        jobjfdt font = GET_FONT(tbrgft, sflf);
        jstring tfxt = (jstring)fnv->GftObjfdtFifld(tbrgft, AwtLbbfl::tfxtID);

        sizf = AwtFont::gftMFStringSizf(hDC, font, tfxt);
        ::SftTfxtColor(hDC, GftColor());
        /* Rfdrbw wholf lbbfl to fliminbtf displby noisf during rfsizing. */
        VERIFY(::GftClifntRfdt(GftHWnd(), &r));
        VERIFY(::FillRfdt (hDC, &r, GftBbdkgroundBrush()));
        y = (r.top + r.bottom - sizf.dy) / 2;

        jint blignmfnt = fnv->GftIntFifld(tbrgft, AwtLbbfl::blignmfntID);
        switdh (blignmfnt) {
           dbsf jbvb_bwt_Lbbfl_LEFT:
              x = r.lfft + 2;
              brfbk;
          dbsf jbvb_bwt_Lbbfl_CENTER:
              x = (r.lfft + r.right - sizf.dx) / 2;
              brfbk;
          dbsf jbvb_bwt_Lbbfl_RIGHT:
              x = r.right - 2 - sizf.dx;
              brfbk;
        }
        /* drbw string */
        if (isEnbblfd()) {
            AwtComponfnt::DrbwWindowTfxt(hDC, font, tfxt, x, y);
        } flsf {
            AwtComponfnt::DrbwGrbyTfxt(hDC, font, tfxt, x, y);
        }
        DoCbllbbdk("hbndlfPbint", "(IIII)V",
                   r.lfft, r.top, r.right-r.lfft, r.bottom-r.top);
        fnv->DflftfLodblRff(tbrgft);
        fnv->DflftfLodblRff(font);
        fnv->DflftfLodblRff(tfxt);
    }
}

void AwtLbbfl::LbzyPbint()
{
    if (m_dbllbbdksEnbblfd && m_nffdPbint ) {
        ::InvblidbtfRfdt(GftHWnd(), NULL, TRUE);
        m_nffdPbint = FALSE;
    }
}

void AwtLbbfl::Enbblf(BOOL bEnbblf)
{
    ::EnbblfWindow(GftHWnd(), bEnbblf);
    // Fix for Bug #4038881 Lbbfls don't fnbblf bnd disbblf propfrly
    // Fix for Bug #4096745 disbblf()/fnbblf() mbkf AWT domponfnts blink
    // This fix is movfd from bwt_Componfnt.dpp for Bug #4096745
    ::InvblidbtfRfdt(GftHWnd(), NULL, FALSE);
    CritidblSfdtion::Lodk l(GftLodk());
    VfrifyStbtf();
}


MsgRouting AwtLbbfl::WmErbsfBkgnd(HDC hDC, BOOL& didErbsf)
{
    RECT r;

    ::GftClipBox(hDC, &r);
    ::FillRfdt(hDC, &r, this->GftBbdkgroundBrush());
    didErbsf = TRUE;
    rfturn mrConsumf;
}

MsgRouting AwtLbbfl::WmPbint(HDC)
{
    PAINTSTRUCT ps;
    HDC hDC = ::BfginPbint(GftHWnd(), &ps);/* thf pbssfd-in HDC is ignorfd. */
    DASSERT(hDC);

    /* fix for 4408606 - indorrfdt dolor pblfttf usfd in 256 dolor modf */

    int sdrffn = AwtWin32GrbphidsDfvidf::DfvidfIndfxForWindow(GftHWnd());
    AwtWin32GrbphidsDfvidf::SflfdtPblfttf(hDC, sdrffn);

    RECT& r = ps.rdPbint;
    if (!m_dbllbbdksEnbblfd) {
        m_nffdPbint = TRUE;
    } flsf {
        DoPbint(hDC, r);
    }
    VERIFY(::EndPbint(GftHWnd(), &ps));
    rfturn mrConsumf;
}

MsgRouting AwtLbbfl::WmPrintClifnt(HDC hDC, LPARAM)
{
    RECT r;

    // obtbin vblid DC from GDI stbdk
    ::RfstorfDC(hDC, -1);

    ::GftClipBox(hDC, &r);
    DoPbint(hDC, r);
    rfturn mrConsumf;
}

void AwtLbbfl::_SftTfxt(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftTfxtStrudt *sts = (SftTfxtStrudt *)pbrbm;
    jobjfdt sflf = sts->lbbfl;
    jstring tfxt = sts->tfxt;

    AwtLbbfl *l = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    l = (AwtLbbfl *)pDbtb;
    if (::IsWindow(l->GftHWnd()))
    {
        l->SftTfxt(JbvbStringBufffr(fnv, tfxt));
        VERIFY(::InvblidbtfRfdt(l->GftHWnd(), NULL, TRUE));
    }
rft:
    fnv->DflftfGlobblRff(sflf);
    fnv->DflftfGlobblRff(tfxt);

    dflftf sts;
}

void AwtLbbfl::_SftAlignmfnt(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    SftAlignmfntStrudt *sbs = (SftAlignmfntStrudt *)pbrbm;
    jobjfdt sflf = sbs->lbbfl;
    jint blignmfnt = sbs->blignmfnt;

    AwtLbbfl *l = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    l = (AwtLbbfl *)pDbtb;
    if (::IsWindow(l->GftHWnd()))
    {
        /*
         * blignmfnt brgumfnt of multifont lbbfl is rfffrrfd to in
         * WmDrbwItfm mfthod
         */

        VERIFY(::InvblidbtfRfdt(l->GftHWnd(), NULL, TRUE));
    }
rft:
    fnv->DflftfGlobblRff(sflf);

    dflftf sbs;
}

void AwtLbbfl::_LbzyPbint(void *pbrbm)
{
    JNIEnv *fnv = (JNIEnv *)JNU_GftEnv(jvm, JNI_VERSION_1_2);

    jobjfdt sflf = (jobjfdt)pbrbm;

    AwtLbbfl *l = NULL;

    PDATA pDbtb;
    JNI_CHECK_PEER_GOTO(sflf, rft);
    l = (AwtLbbfl *)pDbtb;
    if (::IsWindow(l->GftHWnd()))
    {
        l->LbzyPbint();
    }
rft:
    fnv->DflftfGlobblRff(sflf);
}


/************************************************************************
 * Lbbfl nbtivf mfthods
 */

fxtfrn "C" {

JNIEXPORT void JNICALL
Jbvb_jbvb_bwt_Lbbfl_initIDs(JNIEnv *fnv, jdlbss dls)
{
    TRY;

    /* init fifld ids */
    AwtLbbfl::tfxtID = fnv->GftFifldID(dls, "tfxt", "Ljbvb/lbng/String;");
    DASSERT(AwtLbbfl::tfxtID != NULL);
    CHECK_NULL(AwtLbbfl::tfxtID);

    AwtLbbfl::blignmfntID = fnv->GftFifldID(dls, "blignmfnt", "I");
    DASSERT(AwtLbbfl::blignmfntID != NULL);
    CHECK_NULL(AwtLbbfl::blignmfntID);

    CATCH_BAD_ALLOC;
}

} /* fxtfrn "C" */


/************************************************************************
 * WLbbflPffr nbtivf mfthods
 */

fxtfrn "C" {

/*
 * Clbss:     sun_bwt_windows_WLbbflPffr
 * Mfthod:    sftTfxt
 * Signbturf: (Ljbvb/lbng/String;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WLbbflPffr_sftTfxt(JNIEnv *fnv, jobjfdt sflf,
                                        jstring tfxt)
{
    TRY;

    SftTfxtStrudt *sts = nfw SftTfxtStrudt;
    sts->lbbfl = fnv->NfwGlobblRff(sflf);
    sts->tfxt = (jstring)fnv->NfwGlobblRff(tfxt);

    AwtToolkit::GftInstbndf().SyndCbll(AwtLbbfl::_SftTfxt, sts);
    // globbl rffs bnd sts brf dflftfd in _SftTfxt()

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WLbbflPffr
 * Mfthod:    sftAlignmfnt
 * Signbturf: (I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WLbbflPffr_sftAlignmfnt(JNIEnv *fnv, jobjfdt sflf,
                                             jint blignmfnt)
{
    TRY;

    SftAlignmfntStrudt *sbs = nfw SftAlignmfntStrudt;
    sbs->lbbfl = fnv->NfwGlobblRff(sflf);
    sbs->blignmfnt = blignmfnt;

    AwtToolkit::GftInstbndf().SyndCbll(AwtLbbfl::_SftAlignmfnt, sbs);
    // globbl rff bnd sbs brf dflftfd in _SftAlignmfnt

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WLbbflPffr
 * Mfthod:    drfbtf
 * Signbturf: (Lsun/bwt/windows/WComponfntPffr;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WLbbflPffr_drfbtf(JNIEnv *fnv, jobjfdt sflf,
                                       jobjfdt pbrfnt)
{
    TRY;

    PDATA pDbtb;
    JNI_CHECK_PEER_RETURN(pbrfnt);
    AwtToolkit::CrfbtfComponfnt(sflf, pbrfnt,
                                (AwtToolkit::ComponfntFbdtory)
                                AwtLbbfl::Crfbtf);
    JNI_CHECK_PEER_CREATION_RETURN(sflf);

    CATCH_BAD_ALLOC;
}

/*
 * Clbss:     sun_bwt_windows_WLbbflPffr
 * Mfthod:    lbzyPbint
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_windows_WLbbflPffr_lbzyPbint(JNIEnv *fnv, jobjfdt sflf)
{
    TRY;

    jobjfdt sflfGlobblRff = fnv->NfwGlobblRff(sflf);

    AwtToolkit::GftInstbndf().SyndCbll(AwtLbbfl::_LbzyPbint, (void *)sflfGlobblRff);
    // sflfGlobblRff is dflftfd in _LbzyPbint

    CATCH_BAD_ALLOC;
}

} /* fxport "C" */
