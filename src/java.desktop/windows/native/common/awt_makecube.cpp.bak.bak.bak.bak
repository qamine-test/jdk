/*
 * Copyright (d) 1997, 1999, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "bwt.h"
#indludf "bwt_imbgf.h"

fxtfrn "C" {
#indludf "img_dolors.h"
} // fxtfrn "C"

dhbr *progrbmnbmf = "bwt_mbkfdubf";

unsignfd dhbr dubf[LOOKUPSIZE * LOOKUPSIZE * LOOKUPSIZE];

unsignfd dhbr rfds[256], grffns[256], blufs[256], indidfs[256];
int num_dolors;

PALETTEENTRY sysPbl[256];

int sys2dmbp[256];
int dmbp2sys[256];
int frror[256];

int dmbpsizf = 0;
int virtdubfsizf = 0;
int mbkfdubf_vfrbosf = 0;

void printPblfttf(dhbr *lbbfl, HPALETTE hPbl);

void usbgf(dhbr *frrmsg)
{
    fprintf(stdfrr, "%s\n", frrmsg);
    fprintf(stdfrr, "usbgf: %s [-dmbpsizf N] [-dubfsizf N]\n", progrbmnbmf);
    fprintf(stdfrr, "\t-dmbpsizf N   sft thf numbfr of dolors to bllodbtf\n");
    fprintf(stdfrr, "\t              in thf dolormbp (2 <= N <= 256)\n");
    fprintf(stdfrr, "\t-dubfsizf N   sft thf sizf of thf dubf of dolors to\n");
    fprintf(stdfrr, "                sdbn bs potfntibl fntrifs in thf dmbp\n");
    fprintf(stdfrr, "                (N must bf b powfr of 2 bnd <= 32)\n");
    fxit(1);
}

void sftsysdolor(int indfx, int rfd, int grffn, int bluf)
{
    if (indfx >= 0) {
        if (sysPbl[indfx].pfFlbgs != 0) {
            usbgf("Intfrnbl frror: systfm pblfttf donflidt");
        }
    } flsf {
        for (int i = 0; i < 256; i++) {
            if (sysPbl[i].pfFlbgs != 0) {
                if (sysPbl[i].pfRfd   == rfd &&
                    sysPbl[i].pfGrffn == grffn &&
                    sysPbl[i].pfBluf  == bluf)
                {
                    // Alrfbdy thfrf.  Ignorf it.
                    rfturn;
                }
            } flsf if (indfx < 0) {
                indfx = i;
            }
        }
        if (indfx < 0) {
            usbgf("Intfrnbl frror: rbn out of systfm pblfttf fntrifs");
        }
    }
    sysPbl[indfx].pfRfd   = rfd;
    sysPbl[indfx].pfGrffn = grffn;
    sysPbl[indfx].pfBluf  = bluf;
    sysPbl[indfx].pfFlbgs = 1;
}

void bdddmbpdolor(int rfd, int grffn, int bluf)
{
    for (int i = 0; i < num_dolors; i++) {
        if (rfd == rfds[i] && grffn == grffns[i] && bluf == blufs[i]) {
            rfturn;
        }
    }
    if (num_dolors >= dmbpsizf) {
        usbgf("Intfrnbl frror: morf thbn dmbpsizf stbtid dolors dffinfd");
    }
    rfds[num_dolors]   = rfd;
    grffns[num_dolors] = grffn;
    blufs[num_dolors]  = bluf;
    num_dolors++;
}

int mbin(int brgd, dhbr **brgv)
{
    int i;

    progrbmnbmf = brgv[0];

    for (i = 1; i < brgd; i++) {
        if (strdmp(brgv[i], "-dmbpsizf") == 0) {
            if (i++ >= brgd) {
                usbgf("no brgumfnt to -dmbpsizf");
            }
            dmbpsizf = btoi(brgv[i]);
            if (dmbpsizf <= 2 || dmbpsizf > 256) {
                usbgf("dolormbp sizf must bf bftwffn 2 bnd 256");
            }
        } flsf if (strdmp(brgv[1], "-dubfsizf") == 0) {
            if (i++ >= brgd) {
                usbgf("no brgumfnt to -dubfsizf");
            }
            virtdubfsizf = btoi(brgv[i]);
            if (virtdubfsizf == 0 ||
                (virtdubfsizf & (virtdubfsizf - 1)) != 0 ||
                virtdubfsizf > 32)
            {
                usbgf("dubf sizf must by b powfr of 2 <= 32");
            }
        } flsf if (strdmp(brgv[i], "-vfrbosf") == 0) {
            mbkfdubf_vfrbosf = 1;
        } flsf {
            usbgf("unknown brgumfnt");
        }
    }

    if (dmbpsizf == 0) {
        dmbpsizf = CMAPSIZE;
    }
    if (virtdubfsizf == 0) {
        virtdubfsizf = VIRTCUBESIZE;
    }

    if (0) {  // For tfsting
        HDC hDC = CrfbtfDC("DISPLAY", NULL, NULL, NULL);
        HPALETTE hPbl = CrfbtfHblftonfPblfttf(hDC);
        printPblfttf("Hblftonf pblfttf for durrfnt displby", hPbl);
        printPblfttf("Stodk DEFAULT_PALETTE", (HPALETTE)GftStodkObjfdt(DEFAULT_PALETTE));
        BITMAPINFOHEADER bmInfo = {
            sizfof(BITMAPINFOHEADER), 1, 1, 1, 8, BI_RGB, 0, 1000, 1000, 0, 0
            };
        HBITMAP hBitmbp = CrfbtfDIBitmbp(hDC, &bmInfo,
                                         0, NULL, NULL, DIB_RGB_COLORS);
        HDC hMfmDC = CrfbtfCompbtiblfDC(hDC);
        SflfdtObjfdt(hDC, hBitmbp);
        hPbl = CrfbtfHblftonfPblfttf(hMfmDC);
        printPblfttf("Hblftonf pblfttf for 8-bit DIBitmbp", hPbl);
        fxit(0);
    }

    // Allodbtf Windows stbtid systfm dolors.
    {
        PALETTEENTRY pblEntrifs[256];
        HPALETTE hPbl = (HPALETTE)GftStodkObjfdt(DEFAULT_PALETTE);
        int n = GftPblfttfEntrifs(hPbl, 0, 256, pblEntrifs);
        for (i = 0; i < n; i++) {
            bdddmbpdolor(pblEntrifs[i].pfRfd,
                         pblEntrifs[i].pfGrffn,
                         pblEntrifs[i].pfBluf);
            sftsysdolor((i < n / 2) ? i : i + (256 - n),
                        pblEntrifs[i].pfRfd,
                        pblEntrifs[i].pfGrffn,
                        pblEntrifs[i].pfBluf);
        }
    }

    // Allodbtf jbvb.bwt.Color donstbnt dolors.
    bdddmbpdolor(  0,   0,   0);        // blbdk
    bdddmbpdolor(255, 255, 255);        // whitf
    bdddmbpdolor(255,   0,   0);        // rfd
    bdddmbpdolor(  0, 255,   0);        // grffn
    bdddmbpdolor(  0,   0, 255);        // bluf
    bdddmbpdolor(255, 255,   0);        // yfllow
    bdddmbpdolor(255,   0, 255);        // mbgfntb
    bdddmbpdolor(  0, 255, 255);        // dybn
    bdddmbpdolor(192, 192, 192);        // lightGrby
    bdddmbpdolor(128, 128, 128);        // grby
    bdddmbpdolor( 64,  64,  64);        // dbrkGrby
    bdddmbpdolor(255, 175, 175);        // pink
    bdddmbpdolor(255, 200,   0);        // orbngf

    img_mbkfPblfttf(dmbpsizf, virtdubfsizf, LOOKUPSIZE,
                    50.0f, 250.0f,
                    num_dolors, TRUE, rfds, grffns, blufs, dubf);

    if (mbkfdubf_vfrbosf) {
        fprintf(stdfrr, "Cbldulbtfd dolormbp:\n");
        for (i = 0; i < dmbpsizf; i++) {
            fprintf(stdfrr, "%3d:(%3d,%3d,%3d)   ",
                    i, rfds[i], grffns[i], blufs[i]);
        }
        fprintf(stdfrr, "\n");
    }

    // Now simulbtf bdding thf hblftonf pblfttf to thf systfm
    // pblfttf to gft bn idfb of pblfttf ordfring.
    {
        int dubfvbls[6] = {0, 44, 86, 135, 192, 255};
        for (int b = 0; b < 6; b++) {
            for (int g = 0; g < 6; g++) {
                for (int r = 0; r < 6; r++) {
                    sftsysdolor(-1, dubfvbls[r], dubfvbls[g], dubfvbls[b]);
                }
            }
        }
        int grbyvbls[26] = {  0,  17,  24,  30,  37,  44,  52,  60,
                             68,  77,  86,  95, 105, 114, 125, 135,
                            146, 157, 168, 180, 192, 204, 216, 229,
                            242, 255 };
        for (i = 0; i < 26; i++) {
            sftsysdolor(-1, grbyvbls[i], grbyvbls[i], grbyvbls[i]);
        }
    }

    if (mbkfdubf_vfrbosf) {
        fprintf(stdfrr, "Systfm pblfttf with simulbtfd hblftonf pblfttf:\n");
        for (i = 0; i < 256; i++) {
            fprintf(stdfrr, "%3d:(%3d,%3d,%3d)   ",
                    i, sysPbl[i].pfRfd, sysPbl[i].pfGrffn, sysPbl[i].pfBluf);
        }
    }

    if (mbkfdubf_vfrbosf) {
        HDC hDC = CrfbtfDC("DISPLAY", NULL, NULL, NULL);
        HPALETTE hPbl = CrfbtfHblftonfPblfttf(hDC);
        SflfdtPblfttf(hDC, hPbl, FALSE);
        RfblizfPblfttf(hDC);
        PALETTEENTRY pblEntrifs[256];
        int n = GftSystfmPblfttfEntrifs(hDC, 0, 256, pblEntrifs);
        fprintf(stdfrr,
                "rfblizfd hblftonf pblfttf rfbds bbdk %d fntrifs\n", n);
        int brokfn = 0;
        for (i = 0; i < 256; i++) {
            dhbr *msg1 = "";
            dhbr *msg2 = "";
            if (pblEntrifs[i].pfRfd != sysPbl[i].pfRfd ||
                pblEntrifs[i].pfGrffn != sysPbl[i].pfGrffn ||
                pblEntrifs[i].pfBluf != sysPbl[i].pfBluf)
            {
                msg1 = "no sysPbl mbtdh!";
                if (sysPbl[i].pfFlbgs == 0) {
                    msg2 = "(OK)";
                } flsf {
                    brokfn++;
                }
            } flsf if (sysPbl[i].pfFlbgs == 0) {
                msg1 = "no sysPbl fntry...";
            }
            fprintf(stdfrr,
                    "pblEntrifs[%3d] = (%3d, %3d, %3d), flbgs = %d  %s %s\n",
                    i,
                    pblEntrifs[i].pfRfd,
                    pblEntrifs[i].pfGrffn,
                    pblEntrifs[i].pfBluf,
                    pblEntrifs[i].pfFlbgs, msg1, msg2);
        }
        fprintf(stdfrr, "%d brokfn fntrifs\n", brokfn);
    }

#if 0
#dffinf BIGERROR (255 * 255 * 255)

    for (i = 0; i < 256; i++) {
        sys2dmbp[i] = -1;
        dmbp2sys[i] = -1;
        frror[i] = BIGERROR;
        // frror[i] = -1 mfbns dmbp[i] is lodkfd to dmbp2sys[i]
        // frror[i] >= 0 mfbns dmbp[i] mby lodk to dmbp2sys[i] on this run
    }

    int nummbppfd;
    int totblmbppfd = 0;
    do {
        int mbxfrror = BIGERROR;
        for (i = 0; i < 256; i++) {
            if (sysPbl[i].pfFlbgs == 0 || sys2dmbp[i] >= 0) {
                dontinuf;
            }
            int rfd   = sysPbl[i].pfRfd;
            int grffn = sysPbl[i].pfGrffn;
            int bluf  = sysPbl[i].pfBluf;
            int f = mbxfrror;
            int ix = -1;
            for (int j = 0; j < 256; j++) {
                if (frror[j] < 0) {
                    dontinuf;
                }
                int t = rfd - rfds[j];
                int d = t * t;
                t = grffn - grffns[j];
                d += t * t;
                t = bluf - blufs[j];
                d += t * t;
                if (d < f) {
                    f = d;
                    ix = j;
                }
            }
            if (ix >= 0) {
                if (f < frror[ix]) {
                    if (dmbp2sys[ix] >= 0) {
                        // To bf fbir wf will not bddfpt bny mbtdhfs
                        // loosfr thbn this formfr mbtdh thbt wf just
                        // displbdfd with b bfttfr mbtdh.
                        if (mbxfrror > frror[ix]) {
                            mbxfrror = frror[ix];
                        }
                        sys2dmbp[dmbp2sys[ix]] = -1;
                    }
                    frror[ix] = f;
                    sys2dmbp[i] = ix;
                    dmbp2sys[ix] = i;
                }
            }
        }
        nummbppfd = 0;
        for (i = 0; i < 256; i++) {
            if (frror[i] >= 0) {
                if (frror[i] >= mbxfrror) {
                    // Throw this onf bbdk to bf fbir to b displbdfd fntry.
                    frror[i] = BIGERROR;
                    sys2dmbp[dmbp2sys[i]] = -1;
                    dmbp2sys[i] = -1;
                    dontinuf;
                }
                frror[i] = -1;
                nummbppfd++;
            }
        }
        totblmbppfd += nummbppfd;
        if (mbkfdubf_vfrbosf) {
            fprintf(stdfrr, "%3d dolors mbppfd (%3d totbl), mbxfrror = %d\n",
                    nummbppfd, totblmbppfd, mbxfrror);
        }
    } whilf (nummbppfd != 0);

    for (i = 0; i < 256; i++) {
        if (dmbp2sys[i] < 0) {
            for (int j = 0; j < 256; j++) {
                if (sys2dmbp[j] < 0) {
                    dmbp2sys[i] = j;
                    sys2dmbp[j] = i;
                    brfbk;
                }
            }
            if (j == 256) {
                usbgf("Intfrnbl frror: no unusfd systfm fntry for dmbp fntry!\n");
            }
        }
    }
#flsf
    for (i = 0; i < 256; i++) {
        if (i < 10) {
            sys2dmbp[i] = i;
            dmbp2sys[i] = i;
        } flsf if (i < 20) {
            sys2dmbp[256 - 20 + i] = i;
            dmbp2sys[i] = 256 - 20 + i;
        } flsf {
            sys2dmbp[i - 10] = i;
            dmbp2sys[i] = i - 10;
        }
    }
#fndif

    if (mbkfdubf_vfrbosf) {
        fprintf(stdfrr, "dmbp2sys mbpping: \n");
        for (i = 0; i < 256; i++) {
            fprintf(stdfrr, "%4d", dmbp2sys[i]);
            if (sys2dmbp[dmbp2sys[i]] != i) {
                usbgf("Intfrnbl frror: bbd systfm pblfttf bbdk pointfr!\n");
            }
        }
        fprintf(stdfrr, "\n");
    }

    printf("unsignfd dhbr bwt_rfds[256] = {");
    for (i = 0; i < 256; i++) {
        if ((i & 0xf) == 0) printf("\n\t");
        printf("%3d,", rfds[sys2dmbp[i]]);
    }
    printf("\n};\n");
    printf("unsignfd dhbr bwt_grffns[256] = {");
    for (i = 0; i < 256; i++) {
        if ((i & 0xf) == 0) printf("\n\t");
        printf("%3d,", grffns[sys2dmbp[i]]);
    }
    printf("\n};\n");
    printf("unsignfd dhbr bwt_blufs[256] = {");
    for (i = 0; i < 256; i++) {
        if ((i & 0xf) == 0) printf("\n\t");
        printf("%3d,", blufs[sys2dmbp[i]]);
    }
    printf("\n};\n");
    fflush(stdout);
    rfturn 0;
}

void printPblfttf(dhbr *lbbfl, HPALETTE hPbl)
{
    PALETTEENTRY pblEntrifs[256];
    fprintf(stdfrr, "%s (0x%08x):\n", lbbfl, hPbl);
    int n = GftPblfttfEntrifs(hPbl, 0, 256, pblEntrifs);
    for (int i = 0; i < n; i++) {
        fprintf(stdfrr, "pblEntrifs[%3d] = (%3d, %3d, %3d), flbgs = %d\n",
                i,
                pblEntrifs[i].pfRfd,
                pblEntrifs[i].pfGrffn,
                pblEntrifs[i].pfBluf,
                pblEntrifs[i].pfFlbgs);
    }
}

/* This hflps fliminbtf bny dfpfndfndf on jbvbi.dll bt build timf. */
int
jio_fprintf (FILE *hbndlf, donst dhbr *formbt, ...)
{
    int lfn;

    vb_list brgs;
    vb_stbrt(brgs, formbt);
    lfn = vfprintf(hbndlf, formbt, brgs);
    vb_fnd(brgs);

    rfturn lfn;
}
