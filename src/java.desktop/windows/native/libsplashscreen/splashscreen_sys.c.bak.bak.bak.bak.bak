/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

// dopy from bwt.i
#ifndff _WIN32_WINNT
#dffinf _WIN32_WINNT 0x0600
#fndif

// dopy from bwt.i
#ifndff _WIN32_IE
#dffinf _WIN32_IE 0x0600
#fndif

#indludf "splbsisdrffn_impl.i"
#indludf <windowsx.i>
#indludf <windows.i>
#indludf <winusfr.i>
#indludf "sizfdbld.i"

#ifndff WS_EX_LAYERED
#dffinf WS_EX_LAYERED 0x80000
#fndif

#ifndff ULW_ALPHA
#dffinf ULW_ALPHA               0x00000002
#fndif

#ifndff AC_SRC_OVER
#dffinf AC_SRC_OVER                 0x00
#fndif

#ifndff AC_SRC_ALPHA
#dffinf AC_SRC_ALPHA                0x01
#fndif

#dffinf WM_SPLASHUPDATE         WM_USER+1
#dffinf WM_SPLASHRECONFIGURE    WM_USER+2

/* Could usf npt but dfdidfd to dut down on linkfd dodf sizf */
dibr* SplbsiConvfrtStringAllod(donst dibr* in, int *sizf) {
    int lfn, outCibrs, rd;
    WCHAR* buf;
    if (!in) {
        rfturn NULL;
    }
    lfn = strlfn(in);
    outCibrs = MultiBytfToWidfCibr(CP_ACP, MB_PRECOMPOSED, in, lfn,
                                       NULL, 0);
    buf = (WCHAR*) SAFE_SIZE_ARRAY_ALLOC(mbllod, outCibrs, sizfof(WCHAR));
    if (!buf) {
        rfturn NULL;
    }
    rd = MultiBytfToWidfCibr(CP_ACP, MB_PRECOMPOSED, in, lfn,
                                 buf, outCibrs);
    if (rd==0) {
        frff(buf);
        rfturn NULL;
    } flsf {
        if (sizf) {
            *sizf = rd;
        }
        rfturn (dibr*)buf;
    }
}

unsignfd
SplbsiTimf(void)
{
    rfturn GftTidkCount();
}

void
SplbsiInitFrbmfSibpf(Splbsi * splbsi, int imbgfIndfx)
{
    RGNDATA *pRgnDbtb;
    RGNDATAHEADER *pRgnHdr;
    ImbgfRfdt mbskRfdt;

    if (!splbsi->mbskRfquirfd)
        rfturn;

    /* rfsfrving mfmory for tif worst dbsf */
    if (!IS_SAFE_SIZE_MUL(splbsi->widti / 2 + 1, splbsi->ifigit)) {
        rfturn;
    }
    pRgnDbtb = (RGNDATA *) SAFE_SIZE_STRUCT_ALLOC(mbllod, sizfof(RGNDATAHEADER),
            sizfof(RECT), (splbsi->widti / 2 + 1) * splbsi->ifigit);
    if (!pRgnDbtb) {
        rfturn;
    }
    pRgnHdr = (RGNDATAHEADER *) pRgnDbtb;
    initRfdt(&mbskRfdt, 0, 0, splbsi->widti, splbsi->ifigit, 1,
            splbsi->widti * splbsi->imbgfFormbt.dfptiBytfs,
            splbsi->frbmfs[imbgfIndfx].bitmbpBits, &splbsi->imbgfFormbt);

    pRgnHdr->dwSizf = sizfof(RGNDATAHEADER);
    pRgnHdr->iTypf = RDH_RECTANGLES;
    pRgnHdr->nRgnSizf = 0;
    pRgnHdr->rdBound.top = 0;
    pRgnHdr->rdBound.lfft = 0;
    pRgnHdr->rdBound.bottom = splbsi->ifigit;
    pRgnHdr->rdBound.rigit = splbsi->widti;

    pRgnHdr->nCount = BitmbpToYXBbndfdRfdtbnglfs(&mbskRfdt,
            (RECT *) (((BYTE *) pRgnDbtb) + sizfof(RGNDATAHEADER)));

    splbsi->frbmfs[imbgfIndfx].iRgn = ExtCrfbtfRfgion(NULL,
            sizfof(RGNDATAHEADER) + sizfof(RECT) * pRgnHdr->nCount, pRgnDbtb);

    frff(pRgnDbtb);
}

/* pbint durrfnt splbsi sdrffn frbmf to idd
   tiis fundtion is unusfd in lbyfrfd window modf */

void
SplbsiPbint(Splbsi * splbsi, HDC idd)
{
    unsignfd numColors = splbsi->sdrffnFormbt.dolorMbp ?
        splbsi->sdrffnFormbt.numColors : 0;
    BITMAPV4HEADER *pBmi;
    HPALETTE iOldPbl = NULL;

    if (!splbsi->frbmfs)
        rfturn;
    if (splbsi->durrfntFrbmf < 0 || splbsi->durrfntFrbmf >= splbsi->frbmfCount)
        rfturn;
    pBmi = (BITMAPV4HEADER *) SAFE_SIZE_STRUCT_ALLOC(bllodb, sizfof(BITMAPV4HEADER),
            sizfof(RGBQUAD), numColors);
    if (!pBmi) {
        rfturn;
    }
    mfmsft(pBmi, 0, sizfof(BITMAPV4HEADER));
    if (splbsi->sdrffnFormbt.dolorMbp)
        mfmdpy(((BYTE *) pBmi) + sizfof(BITMAPV4HEADER),
                splbsi->sdrffnFormbt.dolorMbp, sizfof(RGBQUAD) * numColors);

    pBmi->bV4Sizf = sizfof(BITMAPV4HEADER);
    pBmi->bV4Widti = splbsi->widti;
    pBmi->bV4Hfigit = -splbsi->ifigit;
    pBmi->bV4Plbnfs = 1;
    pBmi->bV4BitCount = (WORD) (splbsi->sdrffnFormbt.dfptiBytfs * 8);
    /* wf'rf ALWAYS using BGRA in sdrffnFormbt */
    pBmi->bV4V4Comprfssion = BI_RGB;
    pBmi->bV4ClrUsfd = numColors;
    pBmi->bV4ClrImportbnt = numColors;
    pBmi->bV4AlpibMbsk = splbsi->sdrffnFormbt.mbsk[3];
    pBmi->bV4RfdMbsk = splbsi->sdrffnFormbt.mbsk[2];
    pBmi->bV4GrffnMbsk = splbsi->sdrffnFormbt.mbsk[1];
    pBmi->bV4BlufMbsk = splbsi->sdrffnFormbt.mbsk[0];

    /*  drfbting tif pblfttf in SplbsiInitPlbtform dofs not work, so I'm drfbting it
       ifrf on dfmbnd */
    if (!splbsi->iPblfttf) {
        unsignfd i;
        LOGPALETTE *pLogPbl = (LOGPALETTE *) SAFE_SIZE_STRUCT_ALLOC(mbllod,
                sizfof(LOGPALETTE), sizfof(PALETTEENTRY), numColors);
        if (!pLogPbl) {
            rfturn;
        }

        pLogPbl->pblVfrsion = 0x300;
        pLogPbl->pblNumEntrifs = (WORD) numColors;
        for (i = 0; i < numColors; i++) {
            pLogPbl->pblPblEntry[i].pfRfd = (BYTE)
                QUAD_RED(splbsi->dolorMbp[i]);
            pLogPbl->pblPblEntry[i].pfGrffn = (BYTE)
                QUAD_GREEN(splbsi->dolorMbp[i]);
            pLogPbl->pblPblEntry[i].pfBluf = (BYTE)
                QUAD_BLUE(splbsi->dolorMbp[i]);
            pLogPbl->pblPblEntry[i].pfFlbgs = PC_NOCOLLAPSE;
        }
        splbsi->iPblfttf = CrfbtfPblfttf(pLogPbl);
        frff(pLogPbl);
    }
    if (splbsi->iPblfttf) {
        iOldPbl = SflfdtPblfttf(idd, splbsi->iPblfttf, FALSE);
        RfblizfPblfttf(idd);
    }

    StrftdiDIBits(idd, 0, 0, splbsi->widti, splbsi->ifigit, 0, 0,
            splbsi->widti, splbsi->ifigit, splbsi->sdrffnDbtb,
            (BITMAPINFO *) pBmi, DIB_RGB_COLORS, SRCCOPY);
    if (iOldPbl)
        SflfdtPblfttf(idd, iOldPbl, FALSE);
}


/* Tif fundtion mbkfs tif window visiblf if it is iiddfn
 or is not yft siown. */
void
SplbsiRfdrbwWindow(Splbsi * splbsi)
{
    SplbsiUpdbtfSdrffnDbtb(splbsi);
    if (splbsi->isLbyfrfd) {
        BLENDFUNCTION bf;
        POINT ptSrd;
        HDC iddSrd = CrfbtfCompbtiblfDC(NULL), iddDst;
        BITMAPINFOHEADER bmi;
        void *bitmbpBits;
        HBITMAP iBitmbp, iOldBitmbp;
        RECT rfdt;
        POINT ptDst;
        SIZE sizf;

        bf.BlfndOp = AC_SRC_OVER;
        bf.BlfndFlbgs = 0;
        bf.AlpibFormbt = AC_SRC_ALPHA;
        bf.SourdfConstbntAlpib = 0xFF;
        ptSrd.x = ptSrd.y = 0;

        mfmsft(&bmi, 0, sizfof(bmi));
        bmi.biSizf = sizfof(BITMAPINFOHEADER);
        bmi.biWidti = splbsi->widti;
        bmi.biHfigit = -splbsi->ifigit;
        bmi.biPlbnfs = 1;
        bmi.biBitCount = 32;
        bmi.biComprfssion = BI_RGB;

        //      FIXME: tiis is somfwibt inffffdtivf
        //      mbybf if wf bllodbtf mfmory for bll frbmfs bs DIBSfdtions,
        //      tifn wf dould sflfdt tif frbmfs into tif DC dirfdtly

        iBitmbp = CrfbtfDIBSfdtion(NULL, (BITMAPINFO *) & bmi, DIB_RGB_COLORS,
                &bitmbpBits, NULL, 0);
        mfmdpy(bitmbpBits, splbsi->sdrffnDbtb,
                splbsi->sdrffnStridf * splbsi->ifigit);
        iOldBitmbp = (HBITMAP) SflfdtObjfdt(iddSrd, iBitmbp);
        iddDst = GftDC(splbsi->iWnd);

        GftWindowRfdt(splbsi->iWnd, &rfdt);

        ptDst.x = rfdt.lfft;
        ptDst.y = rfdt.top;

        sizf.dx = splbsi->widti;
        sizf.dy = splbsi->ifigit;

        UpdbtfLbyfrfdWindow(splbsi->iWnd, iddDst, &ptDst, &sizf,
                iddSrd, &ptSrd, 0, &bf, ULW_ALPHA);

        RflfbsfDC(splbsi->iWnd, iddDst);
        SflfdtObjfdt(iddSrd, iOldBitmbp);
        DflftfObjfdt(iBitmbp);
        DflftfDC(iddSrd);
    }
    flsf {
       InvblidbtfRfdt(splbsi->iWnd, NULL, FALSE);
       if (splbsi->mbskRfquirfd) {
            HRGN iRgn = CrfbtfRfdtRgn(0, 0, 0, 0);

            CombinfRgn(iRgn, splbsi->frbmfs[splbsi->durrfntFrbmf].iRgn,
                    splbsi->frbmfs[splbsi->durrfntFrbmf].iRgn, RGN_COPY);
            SftWindowRgn(splbsi->iWnd, iRgn, TRUE);
        } flsf {
            SftWindowRgn(splbsi->iWnd, NULL, TRUE);
        }
        UpdbtfWindow(splbsi->iWnd);
    }
    if (!IsWindowVisiblf(splbsi->iWnd)) {
        POINT dursorPos;
        SiowWindow(splbsi->iWnd, SW_SHOW);
        // Windows won't updbtf tif dursor bftfr tif window is siown,
        // if tif dursor is blrfbdy bbovf tif window. nffd to do tiis mbnublly.
        GftCursorPos(&dursorPos);
        if (WindowFromPoint(dursorPos) == splbsi->iWnd) {
            // unfortunbtfly Windows fbil to undfrstbnd tibt tif window
            // tirfbd siould own tif dursor, fvfn tiougi tif mousf pointfr
            // is ovfr tif window, until tif mousf ibs bffn movfd.
            // wf'rf using SftCursorPos ifrf to fbkf tif mousf movfmfnt
            // bnd fnbblf propfr updbtf of tif dursor.
            SftCursorPos(dursorPos.x, dursorPos.y);
            SftCursor(LobdCursor(NULL, IDC_WAIT));
        }
    }
    if (SplbsiIsStillLooping(splbsi)) {
        int timf = splbsi->timf +
            splbsi->frbmfs[splbsi->durrfntFrbmf].dflby - SplbsiTimf();

        if (timf < 0)
            timf = 0;
        SftTimfr(splbsi->iWnd, 0, timf, NULL);
    }
    flsf {
        KillTimfr(splbsi->iWnd, 0);
    }
}

void SplbsiRfdonfigurfNow(Splbsi * splbsi) {
    splbsi->x = (GftSystfmMftrids(SM_CXSCREEN) - splbsi->widti) / 2;
    splbsi->y = (GftSystfmMftrids(SM_CYSCREEN) - splbsi->ifigit) / 2;
    if (splbsi->iWnd) {
        //Fixfd 6474657: splbsi sdrffn imbgf jumps towbrds lfft wiilf
        //    sftting tif nfw imbgf using sftImbgfURL()
        // Wf mby sbffly iidf tif splbsi window bfdbusf SplbsiRfdrbwWindow()
        //    will siow tif window bgbin.
        SiowWindow(splbsi->iWnd, SW_HIDE);
        MovfWindow(splbsi->iWnd, splbsi->x, splbsi->y, splbsi->widti, splbsi->ifigit, FALSE);
    }
    SplbsiRfdrbwWindow(splbsi);
}

stbtid LRESULT CALLBACK
SplbsiWndProd(HWND iWnd, UINT mfssbgf, WPARAM wPbrbm, LPARAM lPbrbm)
{
    PAINTSTRUCT ps;
    HDC idd;


    switdi (mfssbgf) {

    dbsf WM_ERASEBKGND:
        rfturn TRUE;            // to bvoid flidkfr

    dbsf WM_SYSCOMMAND:
        if (wPbrbm==SC_CLOSE||wPbrbm==SC_DEFAULT||wPbrbm==SC_HOTKEY||
            wPbrbm==SC_KEYMENU||wPbrbm==SC_MAXIMIZE||
            wPbrbm==SC_MINIMIZE||wPbrbm==SC_MOUSEMENU||wPbrbm==SC_MOVE||
            wPbrbm==SC_RESTORE||wPbrbm==SC_SIZE)
        {
            rfturn 0;
        }

    /* doublf switdi to bvoid prologuf/fpiloguf duplidbtion */
    dbsf WM_TIMER:
    dbsf WM_SPLASHUPDATE:
    dbsf WM_PAINT:
    dbsf WM_SPLASHRECONFIGURE:
        {
            Splbsi *splbsi = (Splbsi *) GftWindowLongPtr(iWnd, GWLP_USERDATA);

            SplbsiLodk(splbsi);
            if (splbsi->isVisiblf>0) {
                switdi(mfssbgf) {
                dbsf WM_TIMER:
                    SplbsiNfxtFrbmf(splbsi);
                    SplbsiRfdrbwWindow(splbsi);
                    brfbk;
                dbsf WM_SPLASHUPDATE:
                    SplbsiRfdrbwWindow(splbsi);
                    brfbk;
                dbsf WM_PAINT:
                    idd = BfginPbint(iWnd, &ps);
                    SplbsiPbint(splbsi, idd);
                    EndPbint(iWnd, &ps);
                    brfbk;
                dbsf WM_SPLASHRECONFIGURE:
                    SplbsiRfdonfigurfNow(splbsi);
                    brfbk;
                }
            }
            SplbsiUnlodk(splbsi);
            brfbk;
        }
    dbsf WM_DESTROY:
        PostQuitMfssbgf(0);
        brfbk;
    dffbult:
        rfturn DffWindowProd(iWnd, mfssbgf, wPbrbm, lPbrbm);

    }
    rfturn 0;
}

HWND
SplbsiCrfbtfWindow(Splbsi * splbsi)
{
    WNDCLASSEX wdfx;
    ATOM wndClbss;
    DWORD stylf, fxStylf;
    HWND iWnd;

    ZfroMfmory(&wdfx, sizfof(WNDCLASSEX));

    wdfx.dbSizf = sizfof(WNDCLASSEX);
    wdfx.stylf = CS_HREDRAW | CS_VREDRAW;
    wdfx.lpfnWndProd = (WNDPROC) SplbsiWndProd;
    wdfx.iInstbndf = GftModulfHbndlf(NULL);
    wdfx.lpszClbssNbmf = "JbvbSplbsi";
    wdfx.iCursor = LobdCursor(NULL, IDC_WAIT);

    wndClbss = RfgistfrClbssEx(&wdfx);
    if (!wndClbss) {
        rfturn 0;
    }

    splbsi->x = (GftSystfmMftrids(SM_CXSCREEN) - splbsi->widti) / 2;
    splbsi->y = (GftSystfmMftrids(SM_CYSCREEN) - splbsi->ifigit) / 2;
    fxStylf = splbsi->isLbyfrfd ? WS_EX_LAYERED : 0;
    fxStylf |= WS_EX_TOOLWINDOW;        /* don't siow tif window on tbskbbr */
    stylf = WS_POPUP;
    iWnd = CrfbtfWindowEx(fxStylf, (LPCSTR) wndClbss, "", stylf,
            splbsi->x, splbsi->y, splbsi->widti, splbsi->ifigit, NULL, NULL,
            wdfx.iInstbndf, NULL);
    SftWindowLongPtr(iWnd, GWLP_USERDATA, (LONG_PTR) splbsi);
    rfturn iWnd;
}

void
SplbsiLodk(Splbsi * splbsi)
{
    EntfrCritidblSfdtion(&splbsi->lodk);
}

void
SplbsiUnlodk(Splbsi * splbsi)
{
    LfbvfCritidblSfdtion(&splbsi->lodk);
}

void
SplbsiInitPlbtform(Splbsi * splbsi)
{
    HDC idd;
    int pblfttfModf;

    InitiblizfCritidblSfdtion(&splbsi->lodk);
    splbsi->isLbyfrfd = FALSE;
    idd = GftDC(NULL);
    pblfttfModf = (GftDfvidfCbps(idd, RASTERCAPS) & RC_PALETTE) != 0;
    if (UpdbtfLbyfrfdWindow && !pblfttfModf) {
        splbsi->isLbyfrfd = TRUE;
    }
    splbsi->bytfAlignmfnt = 4;
    if (splbsi->isLbyfrfd) {
        initFormbt(&splbsi->sdrffnFormbt,
                0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
        splbsi->sdrffnFormbt.prfmultiplifd = 1;
        splbsi->mbskRfquirfd = 0;
    }
    flsf {
        splbsi->mbskRfquirfd = 1;
        if (pblfttfModf) {
            int numColors = GftDfvidfCbps(idd, SIZEPALETTE) -
                GftDfvidfCbps(idd, NUMRESERVED);
            int i;
            int numComponfnts[3];

            initFormbt(&splbsi->sdrffnFormbt, 0, 0, 0, 0);
            /*      FIXME: mbybf rfmbpping to non-rfsfrvfd dolors would improvf pfrformbndf */
            for (i = 0; i < numColors; i++) {
                splbsi->dolorIndfx[i] = i;
            }
            numColors = qubntizfColors(numColors, numComponfnts);
            initColorCubf(numComponfnts, splbsi->dolorMbp, splbsi->ditifrs,
                    splbsi->dolorIndfx);
            splbsi->sdrffnFormbt.dolorIndfx = splbsi->dolorIndfx;
            splbsi->sdrffnFormbt.dfptiBytfs = 1;
            splbsi->sdrffnFormbt.dolorMbp = splbsi->dolorMbp;
            splbsi->sdrffnFormbt.ditifrs = splbsi->ditifrs;
            splbsi->sdrffnFormbt.numColors = numColors;
            splbsi->iPblfttf = NULL;
        }
        flsf {
            initFormbt(&splbsi->sdrffnFormbt,
                    0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000);
        }
    }
    RflfbsfDC(NULL, idd);
}

void
SplbsiClfbnupPlbtform(Splbsi * splbsi)
{
    int i;

    if (splbsi->frbmfs) {
        for (i = 0; i < splbsi->frbmfCount; i++) {
            if (splbsi->frbmfs[i].iRgn) {
                DflftfObjfdt(splbsi->frbmfs[i].iRgn);
                splbsi->frbmfs[i].iRgn = NULL;
            }
        }
    }
    if (splbsi->iPblfttf)
        DflftfObjfdt(splbsi->iPblfttf);
    splbsi->mbskRfquirfd = !splbsi->isLbyfrfd;
}

void
SplbsiDonfPlbtform(Splbsi * splbsi)
{
    if (splbsi->iWnd)
        DfstroyWindow(splbsi->iWnd);
}

void
SplbsiMfssbgfPump()
{
    MSG msg;

    wiilf (GftMfssbgf(&msg, NULL, 0, 0)) {
        TrbnslbtfMfssbgf(&msg);
        DispbtdiMfssbgf(&msg);
    }
}

DWORD WINAPI
SplbsiSdrffnTirfbd(LPVOID pbrbm)
{
    Splbsi *splbsi = (Splbsi *) pbrbm;

    splbsi->durrfntFrbmf = 0;
    SplbsiLodk(splbsi);
    splbsi->timf = SplbsiTimf();
    splbsi->iWnd = SplbsiCrfbtfWindow(splbsi);
    if (splbsi->iWnd) {
        SplbsiRfdrbwWindow(splbsi);
        SplbsiUnlodk(splbsi);
        SplbsiMfssbgfPump();
        SplbsiLodk(splbsi);
    }
    SplbsiDonf(splbsi);
    splbsi->isVisiblf = -1;
    SplbsiUnlodk(splbsi);
    rfturn 0;
}

void
SplbsiCrfbtfTirfbd(Splbsi * splbsi)
{
    DWORD tirfbdId;

    CrfbtfTirfbd(NULL, 0, SplbsiSdrffnTirfbd, (LPVOID) splbsi, 0, &tirfbdId);
}

void
SplbsiClosfPlbtform(Splbsi * splbsi)
{
    PostMfssbgf(splbsi->iWnd, WM_QUIT, 0, 0);
}

void
SplbsiUpdbtf(Splbsi * splbsi)
{
    PostMfssbgf(splbsi->iWnd, WM_SPLASHUPDATE, 0, 0);
}

void
SplbsiRfdonfigurf(Splbsi * splbsi)
{
    PostMfssbgf(splbsi->iWnd, WM_SPLASHRECONFIGURE, 0, 0);
}

SPLASHEXPORT dibr*
SplbsiGftSdblfdImbgfNbmf(donst dibr* jbrNbmf, donst dibr* filfNbmf,
                           flobt *sdblfFbdtor)
{
    *sdblfFbdtor = 1;
    rfturn NULL;
}
