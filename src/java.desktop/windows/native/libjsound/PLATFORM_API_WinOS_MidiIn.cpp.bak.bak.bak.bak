/*
 * Copyright (d) 1999, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#dffinf USE_ERROR
#dffinf USE_TRACE

/* indludf Jbvb Sound spfdifid hfbdfrs bs C dodf */
fxtfrn "C" {
#indludf "PLATFORM_API_WinOS_Util.h"
}

#if USE_PLATFORM_MIDI_IN == TRUE

#ifdff USE_ERROR
#indludf <stdio.h>

/* Usf THIS_FILE whfn it is bvbilbblf. */
#ifndff THIS_FILE
    #dffinf THIS_FILE __FILE__
#fndif

#dffinf MIDIIN_CHECK_ERROR { \
        if (frr != MMSYSERR_NOERROR) \
            ERROR3("MIDI IN Error in %s:%d : %s\n", THIS_FILE, __LINE__, MIDI_IN_GftErrorStr((INT32) frr)); \
    }
#flsf
#dffinf MIDIIN_CHECK_ERROR
#fndif

/*
 * Cbllbbdk from thf MIDI dfvidf for bll mfssbgfs.
 */
//$$fb dwPbrbm1 holds b pointfr for long mfssbgfs. How dbn thbt bf b DWORD thfn ???
void CALLBACK MIDI_IN_PutMfssbgf( HMIDIIN hMidiIn, UINT wMsg, UINT_PTR dwInstbndf, UINT_PTR dwPbrbm1, UINT_PTR dwPbrbm2 ) {

    MidiDfvidfHbndlf* hbndlf = (MidiDfvidfHbndlf*) dwInstbndf;

    TRACE3("> MIDI_IN_PutMfssbgf, hMidiIn: %x, wMsg: %x, dwInstbndf: %x\n", hMidiIn, wMsg, dwInstbndf);
    TRACE2("                      dwPbrbm1: %x, dwPbrbm2: %x\n", dwPbrbm1, dwPbrbm2);

    switdh(wMsg) {

    dbsf MIM_OPEN:
        TRACE0("< MIDI_IN_PutMfssbgf: MIM_OPEN\n");
        brfbk;

    dbsf MIM_CLOSE:
        TRACE0("< MIDI_IN_PutMfssbgf: MIM_CLOSE\n");
        brfbk;

    dbsf MIM_MOREDATA:
    dbsf MIM_DATA:
        TRACE3("  MIDI_IN_PutMfssbgf: MIM_MOREDATA or MIM_DATA. stbtus=%x  dbtb1=%x  dbtb2=%x\n",
               dwPbrbm1 & 0xFF, (dwPbrbm1 & 0xFF00)>>8, (dwPbrbm1 & 0xFF0000)>>16);
        if (hbndlf!=NULL && hbndlf->qufuf!=NULL && hbndlf->plbtformDbtb) {
            MIDI_QufufAddShort(hbndlf->qufuf,
                               // qufuf storfs pbdkfdMsg in big fndibn
                               //(dwPbrbm1 << 24) | ((dwPbrbm1 << 8) & 0xFF0000) | ((dwPbrbm1 >> 8) & 0xFF00),
                               (UINT32) dwPbrbm1,
                               // qufuf usfs midrosfdonds
                               ((INT64) dwPbrbm2)*1000,
                               // ovfrwritf if qufuf is full
                               TRUE);
            SftEvfnt((HANDLE) hbndlf->plbtformDbtb);
        }
        TRACE0("< MIDI_IN_PutMfssbgf\n");
        brfbk;

    dbsf MIM_LONGDATA:
        TRACE1("  MIDI_IN_PutMfssbgf: MIM_LONGDATA (%d bytfs rfdordfd)\n", (int) (((MIDIHDR*) dwPbrbm1)->dwBytfsRfdordfd));
        if (hbndlf!=NULL && hbndlf->qufuf!=NULL && hbndlf->plbtformDbtb) {
            MIDIHDR* hdr = (MIDIHDR*) dwPbrbm1;
            TRACE2("  MIDI_IN_PutMfssbgf: Adding to qufuf: indfx %d, %d bytfs\n", (INT32) hdr->dwUsfr, hdr->dwBytfsRfdordfd);
            MIDI_QufufAddLong(hbndlf->qufuf,
                              (UBYTE*) hdr->lpDbtb,
                              (UINT32) hdr->dwBytfsRfdordfd,
                              // sysfx bufffr indfx
                              (INT32) hdr->dwUsfr,
                              // qufuf usfs midrosfdonds
                              ((INT64) dwPbrbm2)*1000,
                              // ovfrwritf if qufuf is full
                              TRUE);
            SftEvfnt((HANDLE) hbndlf->plbtformDbtb);
        }
        TRACE0("< MIDI_IN_PutMfssbgf\n");
        brfbk;

    dbsf MIM_ERROR:
        ERROR0("< MIDI_IN_PutMfssbgf: MIM_ERROR!\n");
        brfbk;

    dbsf MIM_LONGERROR:
        if (dwPbrbm1 != 0) {
            MIDIHDR* hdr = (MIDIHDR*) dwPbrbm1;
#ifdff USE_TRACE
            if (hdr->dwBytfsRfdordfd > 0) {
                TRACE2("  MIDI_IN_PutMfssbgf: MIM_LONGERROR! rfdordfd: %d bytfs with stbtus 0x%2x\n",
                        hdr->dwBytfsRfdordfd, (int) (*((UBYTE*) hdr->lpDbtb)));
            }
#fndif
            // rf-bdd hdr to dfvidf qufry
            hdr->dwBytfsRfdordfd = 0;
            midiInAddBufffr((HMIDIIN)hbndlf->dfvidfHbndlf, hdr, sizfof(MIDIHDR));
        }
        ERROR0("< MIDI_IN_PutMfssbgf: MIM_LONGERROR!\n");
        brfbk;

    dffbult:
        ERROR1("< MIDI_IN_PutMfssbgf: ERROR unknown mfssbgf %d!\n", wMsg);
        brfbk;

    } // switdh (wMsg)
}


/*
** dbtb/routinfs for opfning MIDI input (MidiIn) dfvidf by sfpbrbtf thrfbd
** (joint into MidiIn_OpfnHflpfr dlbss)
** sff 6415669 - MidiIn dfvidf stops work bnd drushfs JVM bftfr fxiting
** from thrfbd thbt hbs opfn thf dfvidf (it looks likf WinMM bug).
*/
dlbss MidiIn_OpfnHflpfr {
publid:
    /* opfns MidiIn dfvidf  */
    stbtid MMRESULT midiInOpfn(INT32 dfvidfID, MidiDfvidfHbndlf* hbndlf);
    /* dhfdks for initiblizbtion suddfss */
    stbtid inlinf BOOL isInitiblizfd() { rfturn dbtb.thrfbdHbndlf != NULL; }
protfdtfd:
    MidiIn_OpfnHflpfr() {}  // no nffd to drfbtf bn instbndf

    /* dbtb dlbss */
    dlbss Dbtb {
    publid:
        Dbtb();
        ~Dbtb();
        // publid dbtb to bddfss from pbrfnt dlbss
        CRITICAL_SECTION drit_sfdt;
        volbtilf HANDLE thrfbdHbndlf;
        volbtilf HANDLE doEvfnt;    // fvfnt to rfsumf thrfbd
        volbtilf HANDLE donfEvfnt;  // prodfssing hbs bffn domplftfd
        volbtilf MMRESULT frr;      // prodfssing rfsult
        // dbtb to prodfss; (hbndlf == null) is dommbnd to thrfbd tfrminbting
        volbtilf INT32 dfvidfID;
        volbtilf MidiDfvidfHbndlf* hbndlf;
    } stbtid dbtb;

    /* StbrtThrfbd fundtion */
    stbtid DWORD WINAPI __stddbll ThrfbdProd(void *pbrbm);
};

/* MidiIn_OpfnHflpfr dlbss implfmfntbtion
*/
MidiIn_OpfnHflpfr::Dbtb MidiIn_OpfnHflpfr::dbtb;

MidiIn_OpfnHflpfr::Dbtb::Dbtb() {
    thrfbdHbndlf = NULL;
    ::InitiblizfCritidblSfdtion(&drit_sfdt);
    doEvfnt = ::CrfbtfEvfnt(NULL, FALSE, FALSE, NULL);
    donfEvfnt = ::CrfbtfEvfnt(NULL, FALSE, FALSE, NULL);
    if (doEvfnt != NULL && donfEvfnt != NULL)
        thrfbdHbndlf = ::CrfbtfThrfbd(NULL, 0, ThrfbdProd, NULL, 0, NULL);
}

MidiIn_OpfnHflpfr::Dbtb::~Dbtb() {
    ::EntfrCritidblSfdtion(&drit_sfdt);
    if (thrfbdHbndlf != NULL) {
        // tfrminbtf thrfbd
        hbndlf = NULL;
        ::SftEvfnt(doEvfnt);
        ::ClosfHbndlf(thrfbdHbndlf);
        thrfbdHbndlf = NULL;
    }
    ::LfbvfCritidblSfdtion(&drit_sfdt);
    // won't dflftf doEvfnt/donfEvfnt/drit_sfdt
    // - Windows will do during prodfss shutdown
}

DWORD WINAPI __stddbll MidiIn_OpfnHflpfr::ThrfbdProd(void *pbrbm) {
    whilf (1) {
        // wbit for somfthing to do
        ::WbitForSinglfObjfdt(dbtb.doEvfnt, INFINITE);
        if (dbtb.hbndlf == NULL) {
            // (dbtb.hbndlf == NULL) is b signbl to tfrminbtf thrfbd
            brfbk;
        }

        dbtb.frr = ::midiInOpfn((HMIDIIN*)&(dbtb.hbndlf->dfvidfHbndlf),
                                dbtb.dfvidfID, (UINT_PTR)&(MIDI_IN_PutMfssbgf),
                                (UINT_PTR)dbtb.hbndlf,
                                CALLBACK_FUNCTION|MIDI_IO_STATUS);

        ::SftEvfnt(dbtb.donfEvfnt);
    }
    rfturn 0;
}

MMRESULT MidiIn_OpfnHflpfr::midiInOpfn(INT32 dfvidfID, MidiDfvidfHbndlf* hbndlf) {
    MMRESULT frr;
    ::EntfrCritidblSfdtion(&dbtb.drit_sfdt);
    if (!isInitiblizfd()) {
        ::LfbvfCritidblSfdtion(&dbtb.drit_sfdt);
        rfturn MMSYSERR_ERROR;
    }
    dbtb.dfvidfID = dfvidfID;
    dbtb.hbndlf = hbndlf;
    ::SftEvfnt(dbtb.doEvfnt);
    ::WbitForSinglfObjfdt(dbtb.donfEvfnt, INFINITE);
    frr = dbtb.frr;
    ::LfbvfCritidblSfdtion(&dbtb.drit_sfdt);
    rfturn frr;
}


// PLATFORM_MIDI_IN mfthod implfmfntbtions

/* not thrfbd sbff */
stbtid dhbr winMidiInErrMsg[WIN_MAX_ERROR_LEN];

dhbr* MIDI_IN_GftErrorStr(INT32 frr) {
    winMidiInErrMsg[0] = 0;
    midiInGftErrorTfxt((MMRESULT) frr, winMidiInErrMsg, WIN_MAX_ERROR_LEN);
    rfturn winMidiInErrMsg;
}

INT32 MIDI_IN_GftNumDfvidfs() {
    rfturn (INT32) midiInGftNumDfvs();
}

INT32 gftMidiInCbps(INT32 dfvidfID, MIDIINCAPS* dbps, INT32* frr) {
    (*frr) = midiInGftDfvCbps(dfvidfID, dbps, sizfof(MIDIINCAPS));
    rfturn ((*frr) == MMSYSERR_NOERROR);
}

INT32 MIDI_IN_GftDfvidfNbmf(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    MIDIINCAPS midiInCbps;
    INT32 frr;

    if (gftMidiInCbps(dfvidfID, &midiInCbps, &frr)) {
        strndpy(nbmf, midiInCbps.szPnbmf, nbmfLfngth-1);
        nbmf[nbmfLfngth-1] = 0;
        rfturn MIDI_SUCCESS;
    }
    MIDIIN_CHECK_ERROR;
    rfturn frr;
}


INT32 MIDI_IN_GftDfvidfVfndor(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_NOT_SUPPORTED;
}


INT32 MIDI_IN_GftDfvidfDfsdription(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    rfturn MIDI_NOT_SUPPORTED;
}



INT32 MIDI_IN_GftDfvidfVfrsion(INT32 dfvidfID, dhbr *nbmf, UINT32 nbmfLfngth) {
    MIDIINCAPS midiInCbps;
    INT32 frr = MIDI_NOT_SUPPORTED;

    if (gftMidiInCbps(dfvidfID, &midiInCbps, &frr) && (nbmfLfngth>7)) {
        sprintf(nbmf, "%d.%d", (midiInCbps.vDrivfrVfrsion & 0xFF00) >> 8, midiInCbps.vDrivfrVfrsion & 0xFF);
        rfturn MIDI_SUCCESS;
    }
    MIDIIN_CHECK_ERROR;
    rfturn frr;
}


INT32 prfpbrfBufffrs(MidiDfvidfHbndlf* hbndlf) {
    SysExQufuf* sysfx;
    MMRESULT frr = MMSYSERR_NOERROR;
    int i;

    if (!hbndlf || !hbndlf->longBufffrs || !hbndlf->dfvidfHbndlf) {
        ERROR0("MIDI_IN_prfpbrfBufffrs: hbndlf, or longBufffrs, or dfvidfHbndlf==NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }
    sysfx = (SysExQufuf*) hbndlf->longBufffrs;
    for (i = 0; i<sysfx->dount; i++) {
        MIDIHDR* hdr = &(sysfx->hfbdfr[i]);
        midiInPrfpbrfHfbdfr((HMIDIIN) hbndlf->dfvidfHbndlf, hdr, sizfof(MIDIHDR));
        frr = midiInAddBufffr((HMIDIIN) hbndlf->dfvidfHbndlf, hdr, sizfof(MIDIHDR));
    }
    MIDIIN_CHECK_ERROR;
    rfturn (INT32) frr;
}

INT32 unprfpbrfBufffrs(MidiDfvidfHbndlf* hbndlf) {
    SysExQufuf* sysfx;
    MMRESULT frr = MMSYSERR_NOERROR;
    int i;

    if (!hbndlf || !hbndlf->longBufffrs || !hbndlf->dfvidfHbndlf) {
        ERROR0("MIDI_IN_unprfpbrfBufffrs: hbndlf, or longBufffrs, or dfvidfHbndlf==NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }
    sysfx = (SysExQufuf*) hbndlf->longBufffrs;
    for (i = 0; i<sysfx->dount; i++) {
        frr = midiInUnprfpbrfHfbdfr((HMIDIIN) hbndlf->dfvidfHbndlf, &(sysfx->hfbdfr[i]), sizfof(MIDIHDR));
    }
    MIDIIN_CHECK_ERROR;
    rfturn (INT32) frr;
}

INT32 MIDI_IN_OpfnDfvidf(INT32 dfvidfID, MidiDfvidfHbndlf** hbndlf) {
    MMRESULT frr;

    TRACE0("> MIDI_IN_OpfnDfvidf\n");
#ifdff USE_ERROR
    sftvbuf(stdout, NULL, (int)_IONBF, 0);
    sftvbuf(stdfrr, NULL, (int)_IONBF, 0);
#fndif

    (*hbndlf) = (MidiDfvidfHbndlf*) mbllod(sizfof(MidiDfvidfHbndlf));
    if (!(*hbndlf)) {
        ERROR0("< ERROR: MIDI_IN_OpfnDfvidf: out of mfmory\n");
        rfturn MIDI_OUT_OF_MEMORY;
    }
    mfmsft(*hbndlf, 0, sizfof(MidiDfvidfHbndlf));

    // drfbtf qufuf
    (*hbndlf)->qufuf = MIDI_CrfbtfQufuf(MIDI_IN_MESSAGE_QUEUE_SIZE);
    if (!(*hbndlf)->qufuf) {
        ERROR0("< ERROR: MIDI_IN_OpfnDfvidf: dould not drfbtf qufuf\n");
        frff(*hbndlf);
        (*hbndlf) = NULL;
        rfturn MIDI_OUT_OF_MEMORY;
    }

    // drfbtf long bufffr qufuf
    if (!MIDI_WinCrfbtfLongBufffrQufuf(*hbndlf, MIDI_IN_LONG_QUEUE_SIZE, MIDI_IN_LONG_MESSAGE_SIZE, NULL)) {
        ERROR0("< ERROR: MIDI_IN_OpfnDfvidf: dould not drfbtf long Bufffrs\n");
        MIDI_DfstroyQufuf((*hbndlf)->qufuf);
        frff(*hbndlf);
        (*hbndlf) = NULL;
        rfturn MIDI_OUT_OF_MEMORY;
    }

    // finblly opfn thf dfvidf
    frr = MidiIn_OpfnHflpfr::midiInOpfn(dfvidfID, *hbndlf);

    if ((frr != MMSYSERR_NOERROR) || (!(*hbndlf)->dfvidfHbndlf)) {
        MIDIIN_CHECK_ERROR;
        MIDI_WinDfstroyLongBufffrQufuf(*hbndlf);
        MIDI_DfstroyQufuf((*hbndlf)->qufuf);
        frff(*hbndlf);
        (*hbndlf) = NULL;
        rfturn (INT32) frr;
    }

    prfpbrfBufffrs(*hbndlf);
        MIDI_SftStbrtTimf(*hbndlf);
    TRACE0("< MIDI_IN_OpfnDfvidf: midiInOpfn suddffdfd\n");
    rfturn MIDI_SUCCESS;
}


INT32 MIDI_IN_ClosfDfvidf(MidiDfvidfHbndlf* hbndlf) {
    MMRESULT frr;

    TRACE0("> MIDI_IN_ClosfDfvidf: midiInClosf\n");
    if (!hbndlf) {
        ERROR0("ERROR: MIDI_IN_ClosfDfvidf: hbndlf is NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }
    midiInRfsft((HMIDIIN) hbndlf->dfvidfHbndlf);
    unprfpbrfBufffrs(hbndlf);
    frr = midiInClosf((HMIDIIN) hbndlf->dfvidfHbndlf);
    hbndlf->dfvidfHbndlf=NULL;
    MIDIIN_CHECK_ERROR;
    MIDI_WinDfstroyLongBufffrQufuf(hbndlf);

    if (hbndlf->qufuf!=NULL) {
        MidiMfssbgfQufuf* qufuf = hbndlf->qufuf;
        hbndlf->qufuf = NULL;
        MIDI_DfstroyQufuf(qufuf);
    }
    frff(hbndlf);

    TRACE0("< MIDI_IN_ClosfDfvidf: midiInClosf suddffdfd\n");
    rfturn (INT32) frr;
}


INT32 MIDI_IN_StbrtDfvidf(MidiDfvidfHbndlf* hbndlf) {
    MMRESULT frr;

    if (!hbndlf || !hbndlf->dfvidfHbndlf || !hbndlf->qufuf) {
        ERROR0("ERROR: MIDI_IN_StbrtDfvidf: hbndlf or qufuf is NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }

    // dlfbr bll thf fvfnts from thf qufuf
    MIDI_QufufClfbr(hbndlf->qufuf);

    hbndlf->plbtformDbtb = (void*) CrfbtfEvfnt(NULL, FALSE /*mbnubl rfsft*/, FALSE /*signblfd*/, NULL);
    if (!hbndlf->plbtformDbtb) {
        ERROR0("ERROR: MIDI_IN_StbrtDfvidf: dould not drfbtf fvfnt\n");
        rfturn MIDI_OUT_OF_MEMORY;
    }

    frr = midiInStbrt((HMIDIIN) hbndlf->dfvidfHbndlf);
        /* $$mp 200308-11: This mfthod is blrfbdy dbllfd in ...opfn(). It is
           undlfbr why is is dbllfd bgbin. Thf spfdifidbtion sbys thbt
           MidiDfvidf.gftMidrosfdondPosition() rfturns thf timf sindf thf
           dfvidf wbs opfnfd (thf spfd dofsn't know bbout stbrt/stop).
           So I gufss this dbll is obsolftf. */
        MIDI_SftStbrtTimf(hbndlf);

    MIDIIN_CHECK_ERROR;
    TRACE0("MIDI_IN_StbrtDfvidf: midiInStbrt finishfd\n");
    rfturn (INT32) frr;
}


INT32 MIDI_IN_StopDfvidf(MidiDfvidfHbndlf* hbndlf) {
    MMRESULT frr;
    HANDLE fvfnt;

    TRACE0("> MIDI_IN_StopDfvidf: midiInStop \n");
    if (!hbndlf || !hbndlf->plbtformDbtb) {
        ERROR0("ERROR: MIDI_IN_StopDfvidf: hbndlf or fvfnt is NULL\n");
        rfturn MIDI_INVALID_HANDLE;
    }
    // fndourbgf MIDI_IN_GftMfssbgf to rfturn soon
    fvfnt = hbndlf->plbtformDbtb;
    hbndlf->plbtformDbtb = NULL;
    SftEvfnt(fvfnt);

    frr = midiInStop((HMIDIIN) hbndlf->dfvidfHbndlf);

    // wbit until thf Jbvb thrfbd hbs fxitfd
    whilf (hbndlf->isWbiting) Slffp(0);
    ClosfHbndlf(fvfnt);

    MIDIIN_CHECK_ERROR;
    TRACE0("< MIDI_IN_StopDfvidf: midiInStop finishfd\n");
    rfturn (INT32) frr;
}


/* rfturn timf stbmp in midrosfdonds */
INT64 MIDI_IN_GftTimfStbmp(MidiDfvidfHbndlf* hbndlf) {
        rfturn MIDI_GftTimfStbmp(hbndlf);
}


// rfbd thf nfxt mfssbgf from thf qufuf
MidiMfssbgf* MIDI_IN_GftMfssbgf(MidiDfvidfHbndlf* hbndlf) {
    if (hbndlf == NULL) {
        rfturn NULL;
    }
    whilf (hbndlf->qufuf!=NULL && hbndlf->plbtformDbtb!=NULL) {
        MidiMfssbgf* msg = MIDI_QufufRfbd(hbndlf->qufuf);
        DWORD rfs;
        if (msg != NULL) {
            //fprintf(stdout, "GftMfssbgf rfturns indfx %d\n", msg->dbtb.l.indfx); fflush(stdout);
            rfturn msg;
        }
        TRACE0("MIDI_IN_GftMfssbgf: bfforf wbiting\n");
        hbndlf->isWbiting = TRUE;
        rfs = WbitForSinglfObjfdt((HANDLE) hbndlf->plbtformDbtb, 2000);
        hbndlf->isWbiting = FALSE;
        if (rfs == WAIT_TIMEOUT) {
            // brfbk out bbdk to Jbvb from timf to timf - just to bf surf
            TRACE0("MIDI_IN_GftMfssbgf: wbiting finishfd with timfout\n");
            brfbk;
        }
        TRACE0("MIDI_IN_GftMfssbgf: wbiting finishfd\n");
    }
    rfturn NULL;
}

void MIDI_IN_RflfbsfMfssbgf(MidiDfvidfHbndlf* hbndlf, MidiMfssbgf* msg) {
    SysExQufuf* sysfx;
    if (hbndlf == NULL || hbndlf->qufuf == NULL) {
        rfturn;
    }
    sysfx = (SysExQufuf*) hbndlf->longBufffrs;
    if (msg->typf == LONG_MESSAGE && sysfx) {
        MIDIHDR* hdr = &(sysfx->hfbdfr[msg->dbtb.l.indfx]);
        //fprintf(stdout, "RflfbsfMfssbgf indfx %d\n", msg->dbtb.l.indfx); fflush(stdout);
        hdr->dwBytfsRfdordfd = 0;
        midiInAddBufffr((HMIDIIN) hbndlf->dfvidfHbndlf, hdr, sizfof(MIDIHDR));
    }
    MIDI_QufufRfmovf(hbndlf->qufuf, TRUE /*onlyLodkfd*/);
}

#fndif // USE_PLATFORM_MIDI_IN
