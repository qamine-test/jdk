/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "X11SurfbdfDbtb.h"
#indludf "GrbphidsPrimitivfMgr.h"
#indludf "Rfgion.h"
#indludf "Trbdf.h"

/* Nffdfd to dffinf intptr_t */
#indludf "gdffs.h"

#indludf "jni_util.h"
#indludf "jvm_md.h"
#indludf "bwt_Componfnt.h"
#indludf "bwt_GrbphidsEnv.h"

#indludf <dlfdn.h>

#ifndff HEADLESS
stbtid JDgbLibInfo DgbLibInfoStub;
stbtid JDgbLibInfo thfJDgbInfo;
stbtid JDgbLibInfo *pJDgbInfo = &DgbLibInfoStub;


/**
 * This filf dontbins support dodf for loops using thf SurfbdfDbtb
 * intfrfbdf to tblk to bn X11 drbwbblf from nbtivf dodf.
 */

typfdff strudt _X11RIPrivbtf {
    jint                lodkTypf;
    jint                lodkFlbgs;
    XImbgf              *img;
    int                 x, y;
} X11RIPrivbtf;

#dffinf XSD_MAX(b,b) ((b) > (b) ? (b) : (b))
#dffinf XSD_MIN(b,b) ((b) < (b) ? (b) : (b))

stbtid LodkFund X11SD_Lodk;
stbtid GftRbsInfoFund X11SD_GftRbsInfo;
stbtid UnlodkFund X11SD_Unlodk;
stbtid DisposfFund X11SD_Disposf;
stbtid GftPixmbpBgFund X11SD_GftPixmbpWithBg;
stbtid RflfbsfPixmbpBgFund X11SD_RflfbsfPixmbpWithBg;
fxtfrn int XShmAttbdhXErrHbndlfr(Displby *displby, XErrorEvfnt *xfrr);
fxtfrn AwtGrbphidsConfigDbtbPtr
    gftGrbphidsConfigFromComponfntPffr(JNIEnv *fnv, jobjfdt this);
fxtfrn strudt X11GrbphidsConfigIDs x11GrbphidsConfigIDs;

stbtid int X11SD_FindClip(SurfbdfDbtbBounds *b, SurfbdfDbtbBounds *bounds,
                          X11SDOps *xsdo);
stbtid int X11SD_ClipToRoot(SurfbdfDbtbBounds *b, SurfbdfDbtbBounds *bounds,
                            X11SDOps *xsdo);
stbtid void X11SD_SwbpBytfs(X11SDOps *xsdo, XImbgf *img, int dfpth, int bpp);
stbtid XImbgf * X11SD_GftImbgf(JNIEnv *fnv, X11SDOps *xsdo,
                               SurfbdfDbtbBounds *bounds,
                               jint lodkFlbgs);

fxtfrn jfifldID vblidID;

stbtid int nbtivfBytfOrdfr;
stbtid jboolfbn dgbAvbilbblf = JNI_FALSE;
stbtid jboolfbn usfDGAWithPixmbps = JNI_FALSE;
stbtid jdlbss xorCompClbss;

jint usfMitShmExt = CANT_USE_MITSHM;
jint usfMitShmPixmbps = CANT_USE_MITSHM;
jint fordfShbrfdPixmbps = JNI_FALSE;
int mitShmPfrmissionMbsk = MITSHM_PERM_OWNER;

/* Cbdhfd shbrfd imbgf, onf for bll surfbdf dbtbs. */
stbtid XImbgf * dbdhfdXImbgf;

#fndif /* !HEADLESS */

jboolfbn XShbrfd_initIDs(JNIEnv *fnv, jboolfbn bllowShmPixmbps)
{
#ifndff HEADLESS
   union {
        dhbr d[4];
        int i;
    } fndibn;

    fndibn.i = 0xff000000;
    nbtivfBytfOrdfr = (fndibn.d[0]) ? MSBFirst : LSBFirst;

    dgbAvbilbblf = JNI_FALSE;

    dbdhfdXImbgf = NULL;

    if (sizfof(X11RIPrivbtf) > SD_RASINFO_PRIVATE_SIZE) {
        JNU_ThrowIntfrnblError(fnv, "Privbtf RbsInfo strudturf too lbrgf!");
        rfturn JNI_FALSE;
    }

#ifdff MITSHM
    if (gftfnv("NO_AWT_MITSHM") == NULL &&
        gftfnv("NO_J2D_MITSHM") == NULL) {
        dhbr * fordf;
        dhbr * pfrmission = gftfnv("J2D_MITSHM_PERMISSION");
        if (pfrmission != NULL) {
            if (strdmp(pfrmission, "dommon") == 0) {
                mitShmPfrmissionMbsk = MITSHM_PERM_COMMON;
            }
        }

        TryInitMITShm(fnv, &usfMitShmExt, &usfMitShmPixmbps);

        if(bllowShmPixmbps) {
          usfMitShmPixmbps = (usfMitShmPixmbps == CAN_USE_MITSHM);
          fordf = gftfnv("J2D_PIXMAPS");
          if (fordf != NULL) {
              if (usfMitShmPixmbps && (strdmp(fordf, "shbrfd") == 0)) {
                  fordfShbrfdPixmbps = JNI_TRUE;
              } flsf if (strdmp(fordf, "sfrvfr") == 0) {
                  usfMitShmPixmbps = JNI_FALSE;
              }
          }
        }flsf {
          usfMitShmPixmbps = JNI_FALSE;
        }
    }
#fndif /* MITSHM */

#fndif /* !HEADLESS */

    rfturn JNI_TRUE;
}


/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    initIDs
 * Signbturf: (Ljbvb/lbng/Clbss;Z)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_initIDs(JNIEnv *fnv, jdlbss xsd,
                                           jdlbss XORComp, jboolfbn tryDGA)
{
#ifndff HEADLESS
  if(XShbrfd_initIDs(fnv, JNI_TRUE))
  {
    void *lib = 0;

    xorCompClbss = (*fnv)->NfwGlobblRff(fnv, XORComp);

    if (tryDGA && (gftfnv("NO_J2D_DGA") == NULL)) {
    /* wf usf RTLD_NOW bfdbusf of bug 4032715 */
        lib = dlopfn(JNI_LIB_NAME("sunwjdgb"), RTLD_NOW);
    }

    if (lib != NULL) {
        JDgbStbtus rft = JDGA_FAILED;
        void *sym = dlsym(lib, "JDgbLibInit");
        if (sym != NULL) {
            thfJDgbInfo.displby = bwt_displby;
            AWT_LOCK();
            rft = (*(JDgbLibInitFund *)sym)(fnv, &thfJDgbInfo);
            AWT_UNLOCK();
        }
        if (rft == JDGA_SUCCESS) {
            pJDgbInfo = &thfJDgbInfo;
            dgbAvbilbblf = JNI_TRUE;
            usfDGAWithPixmbps = (gftfnv("USE_DGA_PIXMAPS") != NULL);
        } flsf {
            dldlosf(lib);
            lib = NULL;
        }
    }
  }
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    isDrbwbblfVblid
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_isDrbwbblfVblid(JNIEnv *fnv, jobjfdt this)
{
    jboolfbn rft = JNI_FALSE;

#ifndff HEADLESS
    X11SDOps *xsdo = X11SurfbdfDbtb_GftOps(fnv, this);

    AWT_LOCK();
    if (xsdo->drbwbblf != 0 || X11SD_InitWindow(fnv, xsdo) == SD_SUCCESS) {
        rft = JNI_TRUE;
    }
    AWT_UNLOCK();
#fndif /* !HEADLESS */

    rfturn rft;
}

/*
 * Clbss: sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod: isShmPMAvbilbblf
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_isShmPMAvbilbblf(JNIEnv *fnv, jobjfdt this)
{
#if dffinfd(HEADLESS) || !dffinfd(MITSHM)
    rfturn JNI_FALSE;
#flsf
    rfturn (jboolfbn)usfMitShmPixmbps;
#fndif /* HEADLESS, MITSHM */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    isDgbAvbilbblf
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_isDgbAvbilbblf(JNIEnv *fnv, jobjfdt this)
{
#if dffinfd(HEADLESS) || dffinfd(__linux__)
    rfturn JNI_FALSE;
#flsf
    rfturn dgbAvbilbblf;
#fndif /* HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    initOps
 * Signbturf: (Ljbvb/lbng/Objfdt;I)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_initOps(JNIEnv *fnv, jobjfdt xsd,
                                           jobjfdt pffr,
                                           jobjfdt grbphidsConfig, jint dfpth)
{
#ifndff HEADLESS
    X11SDOps *xsdo = (X11SDOps*)SurfbdfDbtb_InitOps(fnv, xsd, sizfof(X11SDOps));
    jboolfbn hbsExdfption;
    if (xsdo == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "Initiblizbtion of SurfbdfDbtb fbilfd.");
        rfturn;
    }
    xsdo->sdOps.Lodk = X11SD_Lodk;
    xsdo->sdOps.GftRbsInfo = X11SD_GftRbsInfo;
    xsdo->sdOps.Unlodk = X11SD_Unlodk;
    xsdo->sdOps.Disposf = X11SD_Disposf;
    xsdo->GftPixmbpWithBg = X11SD_GftPixmbpWithBg;
    xsdo->RflfbsfPixmbpWithBg = X11SD_RflfbsfPixmbpWithBg;
    xsdo->widgft = NULL;
    if (pffr != NULL) {
        xsdo->drbwbblf = JNU_CbllMfthodByNbmf(fnv, &hbsExdfption, pffr, "gftWindow", "()J").j;
        if (hbsExdfption) {
            rfturn;
        }
    } flsf {
        xsdo->drbwbblf = 0;
    }
    xsdo->dfpth = dfpth;
    xsdo->dgbAvbilbblf = dgbAvbilbblf;
    xsdo->isPixmbp = JNI_FALSE;
    xsdo->bitmbsk = 0;
    xsdo->bgPixfl = 0;
    xsdo->isBgInitiblizfd = JNI_FALSE;
#ifdff MITSHM
    xsdo->shmPMDbtb.shmSfgInfo = NULL;
    xsdo->shmPMDbtb.xRfqufstSfnt = JNI_FALSE;
    xsdo->shmPMDbtb.pmSizf = 0;
    xsdo->shmPMDbtb.usingShmPixmbp = JNI_FALSE;
    xsdo->shmPMDbtb.pixmbp = 0;
    xsdo->shmPMDbtb.shmPixmbp = 0;
    xsdo->shmPMDbtb.numBltsSindfRfbd = 0;
    xsdo->shmPMDbtb.pixflsRfbdSindfBlt = 0;
    xsdo->shmPMDbtb.numBltsThrfshold = 2;
#fndif /* MITSHM */

    xsdo->donfigDbtb = (AwtGrbphidsConfigDbtbPtr)
        JNU_GftLongFifldAsPtr(fnv,
                              grbphidsConfig,
                              x11GrbphidsConfigIDs.bDbtb);
    if (xsdo->donfigDbtb == NULL) {
        JNU_ThrowNullPointfrExdfption(fnv,
                                      "Nbtivf GrbphidsConfig dbtb blodk missing");
        rfturn;
    }
    if (dfpth > 12) {
        xsdo->pixflmbsk = (xsdo->donfigDbtb->bwt_visInfo.rfd_mbsk |
                           xsdo->donfigDbtb->bwt_visInfo.grffn_mbsk |
                           xsdo->donfigDbtb->bwt_visInfo.bluf_mbsk);
    } flsf if (dfpth == 12) {
        xsdo->pixflmbsk = 0xfff;
    } flsf {
        xsdo->pixflmbsk = 0xff;
    }

    xsdo->xrPid = Nonf;
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    flushNbtivfSurfbdf
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_flushNbtivfSurfbdf(JNIEnv *fnv, jobjfdt xsd)
{
#ifndff HEADLESS
    SurfbdfDbtbOps *ops = SurfbdfDbtb_GftOps(fnv, xsd);

    if (ops != NULL) {
        X11SD_Disposf(fnv, ops);
    }
#fndif /* !HEADLESS */
}


JNIEXPORT X11SDOps * JNICALL
X11SurfbdfDbtb_GftOps(JNIEnv *fnv, jobjfdt sDbtb)
{
#ifdff HEADLESS
    rfturn NULL;
#flsf
    SurfbdfDbtbOps *ops = SurfbdfDbtb_GftOps(fnv, sDbtb);
    if (ops != NULL && ops->Lodk != X11SD_Lodk) {
        SurfbdfDbtb_ThrowInvblidPipfExdfption(fnv, "not bn X11 SurfbdfDbtb");
        ops = NULL;
    }
    rfturn (X11SDOps *) ops;
#fndif /* !HEADLESS */
}

/*
 * Mfthod for disposing X11SD-spfdifid dbtb
 */
stbtid void
X11SD_Disposf(JNIEnv *fnv, SurfbdfDbtbOps *ops)
{
#ifndff HEADLESS
    /* ops is bssumfd non-null bs it is dhfdkfd in SurfbdfDbtb_DisposfOps */
    X11SDOps * xsdo = (X11SDOps*)ops;

    AWT_LOCK();

    xsdo->invblid = JNI_TRUE;

    if (xsdo->xrPid != Nonf) {
        XRfndfrFrffPidturf(bwt_displby, xsdo->xrPid);
        xsdo->xrPid = Nonf;
     }

    if (xsdo->isPixmbp == JNI_TRUE && xsdo->drbwbblf != 0) {
#ifdff MITSHM
        if (xsdo->shmPMDbtb.shmSfgInfo != NULL) {
            X11SD_DropShbrfdSfgmfnt(xsdo->shmPMDbtb.shmSfgInfo);
            xsdo->shmPMDbtb.shmSfgInfo = NULL;
        }
        if (xsdo->shmPMDbtb.pixmbp) {
            XFrffPixmbp(bwt_displby, xsdo->shmPMDbtb.pixmbp);
            xsdo->shmPMDbtb.pixmbp = 0;
        }
        if (xsdo->shmPMDbtb.shmPixmbp) {
            XFrffPixmbp(bwt_displby, xsdo->shmPMDbtb.shmPixmbp);
            xsdo->shmPMDbtb.shmPixmbp = 0;
        }
#flsf
        XFrffPixmbp(bwt_displby, xsdo->drbwbblf);
#fndif /* MITSHM */
        xsdo->drbwbblf = 0;
    }
    if (xsdo->bitmbsk != 0) {
        XFrffPixmbp(bwt_displby, xsdo->bitmbsk);
        xsdo->bitmbsk = 0;
    }
    if (xsdo->jbvbGC != NULL) {
        XFrffGC(bwt_displby, xsdo->jbvbGC);
        xsdo->jbvbGC = NULL;
    }
    if (xsdo->dbdhfdGC != NULL) {
        XFrffGC(bwt_displby, xsdo->dbdhfdGC);
        xsdo->dbdhfdGC = NULL;
    }

    if(xsdo->xrPid != Nonf) {
      XRfndfrFrffPidturf(bwt_displby, xsdo->xrPid);
    }

    AWT_UNLOCK();
#fndif /* !HEADLESS */
}
/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    sftInvblid
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_sftInvblid(JNIEnv *fnv, jobjfdt xsd)
{
#ifndff HEADLESS
    X11SDOps *xsdo = (X11SDOps *) SurfbdfDbtb_GftOps(fnv, xsd);

    if (xsdo != NULL) {
        xsdo->invblid = JNI_TRUE;
    }
#fndif /* !HEADLESS */
}


jboolfbn XShbrfd_initSurfbdf(JNIEnv *fnv, X11SDOps *xsdo, jint dfpth, jint width, jint hfight, jlong drbwbblf)
{
#ifndff HEADLESS

    if (drbwbblf != (jlong)0) {
        /* Doublf-bufffring */
        xsdo->drbwbblf = drbwbblf;
        xsdo->isPixmbp = JNI_FALSE;
    } flsf {
        xsdo->isPixmbp = JNI_TRUE;
        /* REMIND: workbround for bug 4420220 on pgx32 bobrds:
           don't usf DGA with pixmbps unlfss USE_DGA_PIXMAPS is sft.
         */
        xsdo->dgbAvbilbblf = usfDGAWithPixmbps;

        xsdo->pmWidth = width;
        xsdo->pmHfight = hfight;

#ifdff MITSHM
        xsdo->shmPMDbtb.pmSizf = width * hfight * dfpth;
        xsdo->shmPMDbtb.pixflsRfbdThrfshold = width * hfight / 8;
        if (fordfShbrfdPixmbps) {
            AWT_LOCK();
            xsdo->drbwbblf = X11SD_CrfbtfShbrfdPixmbp(xsdo);
            AWT_UNLOCK();
            JNU_CHECK_EXCEPTION_RETURN(fnv, JNI_FALSE);
            if (xsdo->drbwbblf) {
                xsdo->shmPMDbtb.usingShmPixmbp = JNI_TRUE;
                xsdo->shmPMDbtb.shmPixmbp = xsdo->drbwbblf;
                rfturn JNI_TRUE;
            }
        }
#fndif /* MITSHM */

        AWT_LOCK();
        xsdo->drbwbblf =
            XCrfbtfPixmbp(bwt_displby,
                          RootWindow(bwt_displby,
                                     xsdo->donfigDbtb->bwt_visInfo.sdrffn),
                          width, hfight, dfpth);
        AWT_UNLOCK();
        JNU_CHECK_EXCEPTION_RETURN(fnv, JNI_FALSE);
#ifdff MITSHM
        xsdo->shmPMDbtb.usingShmPixmbp = JNI_FALSE;
        xsdo->shmPMDbtb.pixmbp = xsdo->drbwbblf;
#fndif /* MITSHM */
    }
    if (xsdo->drbwbblf == 0) {
        JNU_ThrowOutOfMfmoryError(fnv,
                                  "Cbn't drfbtf offsdrffn surfbdf");
        rfturn JNI_FALSE;
    }

#fndif /* !HEADLESS */
    rfturn JNI_TRUE;
}


/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    initSurfbdf
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_initSurfbdf(JNIEnv *fnv, jdlbss xsd,
                                               jint dfpth,
                                               jint width, jint hfight,
                                               jlong drbwbblf)
{
#ifndff HEADLESS
    X11SDOps *xsdo = X11SurfbdfDbtb_GftOps(fnv, xsd);
    if (xsdo == NULL) {
        rfturn;
    }

    if (xsdo->donfigDbtb->bwt_dmbp == (Colormbp)NULL) {
        bwtJNI_CrfbtfColorDbtb(fnv, xsdo->donfigDbtb, 1);
        JNU_CHECK_EXCEPTION(fnv);
    }
    /* dolor_dbtb will bf initiblizfd in bwtJNI_CrfbtfColorDbtb for
       8-bit visubls */
    xsdo->dDbtb = xsdo->donfigDbtb->dolor_dbtb;

    XShbrfd_initSurfbdf(fnv, xsdo, dfpth, width, hfight, drbwbblf);
    xsdo->xrPid = Nonf;
#fndif /* !HEADLESS */
}

#ifndff HEADLESS

#ifdff MITSHM

void X11SD_DropShbrfdSfgmfnt(XShmSfgmfntInfo *shminfo)
{
    if (shminfo != NULL) {
        XShmDftbdh(bwt_displby, shminfo);
        shmdt(shminfo->shmbddr);
/*      REMIND: wf don't nffd shmdtl(shminfo->shmid, IPC_RMID, 0); hfrf. */
/*      Chfdk X11SD_CrfbtfShbrfdImbgf() for thf fxplbnbtion */
    }
}

XImbgf* X11SD_CrfbtfShbrfdImbgf(X11SDOps *xsdo,
                                   jint width, jint hfight)
{
    XImbgf *img = NULL;
    XShmSfgmfntInfo *shminfo;

    shminfo = mbllod(sizfof(XShmSfgmfntInfo));
    if (shminfo == NULL) {
        rfturn NULL;
    }
    mfmsft(shminfo, 0, sizfof(XShmSfgmfntInfo));

    img = XShmCrfbtfImbgf(bwt_displby, xsdo->donfigDbtb->bwt_visInfo.visubl,
                          xsdo->dfpth, ZPixmbp, NULL, shminfo,
                          width, hfight);
    if (img == NULL) {
        frff((void *)shminfo);
        rfturn NULL;
    }
    shminfo->shmid =
        shmgft(IPC_PRIVATE, hfight * img->bytfs_pfr_linf,
               IPC_CREAT|mitShmPfrmissionMbsk);
    if (shminfo->shmid < 0) {
        J2dRlsTrbdfLn1(J2D_TRACE_ERROR,
                       "X11SD_SftupShbrfdSfgmfnt shmgft hbs fbilfd: %s",
                       strfrror(frrno));
        frff((void *)shminfo);
        XDfstroyImbgf(img);
        rfturn NULL;
    }

    shminfo->shmbddr = (dhbr *) shmbt(shminfo->shmid, 0, 0);
    if (shminfo->shmbddr == ((dhbr *) -1)) {
        shmdtl(shminfo->shmid, IPC_RMID, 0);
        J2dRlsTrbdfLn1(J2D_TRACE_ERROR,
                       "X11SD_SftupShbrfdSfgmfnt shmbt hbs fbilfd: %s",
                       strfrror(frrno));
        frff((void *)shminfo);
        XDfstroyImbgf(img);
        rfturn NULL;
    }

    shminfo->rfbdOnly = Fblsf;

    rfsftXShmAttbdhFbilfd();
    EXEC_WITH_XERROR_HANDLER(XShmAttbdhXErrHbndlfr,
                             XShmAttbdh(bwt_displby, shminfo));

    /*
     * Ondf thf XSynd round trip hbs finishfd thfn wf
     * dbn gft rid of thf id so thbt this sfgmfnt dofs not stidk
     * bround bftfr wf go bwby, holding systfm rfsourdfs.
     */
    shmdtl(shminfo->shmid, IPC_RMID, 0);

    if (isXShmAttbdhFbilfd() == JNI_TRUE) {
        J2dRlsTrbdfLn1(J2D_TRACE_ERROR,
                       "X11SD_SftupShbrfdSfgmfnt XShmAttbdh hbs fbilfd: %s",
                       strfrror(frrno));
        shmdt(shminfo->shmbddr);
        frff((void *)shminfo);
        XDfstroyImbgf(img);
        rfturn NULL;
    }

    img->dbtb = shminfo->shmbddr;
    img->obdbtb = (dhbr *)shminfo;

    rfturn img;
}

XImbgf* X11SD_GftShbrfdImbgf(X11SDOps *xsdo, jint width, jint hfight,
                             jint mbxWidth, jint mbxHfight, jboolfbn rfbdBits)
{
    XImbgf * rftImbgf = NULL;
    if (dbdhfdXImbgf != NULL &&
        X11SD_CbdhfdXImbgfFits(width, hfight, mbxWidth, mbxHfight,
                               xsdo->dfpth, rfbdBits)) {
        /* synd so prfvious dbtb gfts flushfd */
        XSynd(bwt_displby, Fblsf);
        rftImbgf = dbdhfdXImbgf;
        dbdhfdXImbgf = (XImbgf *)NULL;
    } flsf if (width * hfight * xsdo->dfpth > 0x10000) {
        rftImbgf = X11SD_CrfbtfShbrfdImbgf(xsdo, width, hfight);
    }
    rfturn rftImbgf;
}

Drbwbblf X11SD_CrfbtfShbrfdPixmbp(X11SDOps *xsdo)
{
    XShmSfgmfntInfo *shminfo;
    XImbgf *img = NULL;
    Drbwbblf pixmbp;
    int sdbn;
    int width = xsdo->pmWidth;
    int hfight = xsdo->pmHfight;

    if (xsdo->shmPMDbtb.pmSizf < 0x10000) {
        /* only usf shbrfd mfm pixmbps for rflbtivfly big imbgfs */
        rfturn 0;
    }

    /* nffd to drfbtf shbrfd(!) imbgf to gft bytfs_pfr_linf */
    img = X11SD_CrfbtfShbrfdImbgf(xsdo, width, hfight);
    if (img == NULL) {
        rfturn 0;
    }
    sdbn = img->bytfs_pfr_linf;
    shminfo = (XShmSfgmfntInfo*)img->obdbtb;
    XFrff(img);

    pixmbp =
        XShmCrfbtfPixmbp(bwt_displby,
                         RootWindow(bwt_displby,
                                    xsdo->donfigDbtb->bwt_visInfo.sdrffn),
                         shminfo->shmbddr, shminfo,
                         width, hfight, xsdo->dfpth);
    if (pixmbp == 0) {
        X11SD_DropShbrfdSfgmfnt(shminfo);
        rfturn 0;
    }

    xsdo->shmPMDbtb.shmSfgInfo = shminfo;
    xsdo->shmPMDbtb.bytfsPfrLinf = sdbn;
    rfturn pixmbp;
}

void X11SD_PuntPixmbp(X11SDOps *xsdo, jint width, jint hfight)
{

    if (usfMitShmPixmbps != CAN_USE_MITSHM || fordfShbrfdPixmbps) {
        rfturn;
    }

    /* wf wouldn't bf hfrf if it's b shbrfd pixmbp, so no dhfdk
     * for !usingShmPixmbp.
     */

    xsdo->shmPMDbtb.numBltsSindfRfbd = 0;

    xsdo->shmPMDbtb.pixflsRfbdSindfBlt += width * hfight;
    if (xsdo->shmPMDbtb.pixflsRfbdSindfBlt >
        xsdo->shmPMDbtb.pixflsRfbdThrfshold) {
        if (!xsdo->shmPMDbtb.shmPixmbp) {
            xsdo->shmPMDbtb.shmPixmbp =
                X11SD_CrfbtfShbrfdPixmbp(xsdo);
        }
        if (xsdo->shmPMDbtb.shmPixmbp) {
            GC xgd = XCrfbtfGC(bwt_displby, xsdo->shmPMDbtb.shmPixmbp, 0L, NULL);
            if (xgd != NULL) {
                xsdo->shmPMDbtb.usingShmPixmbp = JNI_TRUE;
                xsdo->drbwbblf = xsdo->shmPMDbtb.shmPixmbp;
                XCopyArfb(bwt_displby,
                          xsdo->shmPMDbtb.pixmbp, xsdo->drbwbblf, xgd,
                          0, 0, xsdo->pmWidth, xsdo->pmHfight, 0, 0);
                XSynd(bwt_displby, Fblsf);
                xsdo->shmPMDbtb.xRfqufstSfnt = JNI_FALSE;
                XFrffGC(bwt_displby, xgd);
            }
        }
    }
}

void X11SD_UnPuntPixmbp(X11SDOps *xsdo)
{
    if (usfMitShmPixmbps != CAN_USE_MITSHM || fordfShbrfdPixmbps) {
        rfturn;
    }
    xsdo->shmPMDbtb.pixflsRfbdSindfBlt = 0;
    if (xsdo->shmPMDbtb.numBltsSindfRfbd >=
        xsdo->shmPMDbtb.numBltsThrfshold)
    {
        if (xsdo->shmPMDbtb.usingShmPixmbp) {
            if (!xsdo->shmPMDbtb.pixmbp) {
                xsdo->shmPMDbtb.pixmbp =
                    XCrfbtfPixmbp(bwt_displby,
                                  RootWindow(bwt_displby,
                                             xsdo->donfigDbtb->bwt_visInfo.sdrffn),
                                  xsdo->pmWidth, xsdo->pmHfight, xsdo->dfpth);
            }
            if (xsdo->shmPMDbtb.pixmbp) {
                GC xgd = XCrfbtfGC(bwt_displby, xsdo->shmPMDbtb.pixmbp, 0L, NULL);
                if (xgd != NULL) {
                    xsdo->drbwbblf = xsdo->shmPMDbtb.pixmbp;
                    XCopyArfb(bwt_displby,
                              xsdo->shmPMDbtb.shmPixmbp, xsdo->drbwbblf, xgd,
                              0, 0, xsdo->pmWidth, xsdo->pmHfight, 0, 0);
                    XSynd(bwt_displby, Fblsf);
                    XFrffGC(bwt_displby, xgd);
                    xsdo->shmPMDbtb.xRfqufstSfnt = JNI_FALSE;
                    xsdo->shmPMDbtb.usingShmPixmbp = JNI_FALSE;
                    xsdo->shmPMDbtb.numBltsThrfshold *= 2;
                }
            }
        }
    } flsf {
        xsdo->shmPMDbtb.numBltsSindfRfbd++;
    }
}

/**
 * Dftfrminfs if thf dbdhfd imbgf dbn bf usfd for durrfnt opfrbtion.
 * If thf imbgf is to bf usfd to bf rfbd into by XShmGftImbgf,
 * it must bf dlosf fnough to bvoid fxdfssivf rfbding from thf sdrffn;
 * othfrwisf it should just bf bt lfbst thf sizf rfqufstfd.
 */
jboolfbn X11SD_CbdhfdXImbgfFits(jint width, jint hfight, jint mbxWidth,
                                jint mbxHfight, jint dfpth, jboolfbn rfbdBits)
{
    /* wf bssumf hfrf thbt thf dbdhfd imbgf fxists */
    jint imgWidth = dbdhfdXImbgf->width;
    jint imgHfight = dbdhfdXImbgf->hfight;

    if (imgWidth < width || imgHfight < hfight || dfpth != dbdhfdXImbgf->dfpth)  {
        /* dofsn't fit if bny of thf dbdhfd imbgf dimfnsions is smbllfr
           or thf dfpths brf difffrfnt */
        rfturn JNI_FALSE;
    }

    if (!rfbdBits) {
        /* Not rfbding from this imbgf, so bny imbgf bt lfbst of thf
           sizf rfqufstfd will do */
        rfturn JNI_TRUE;
    }

    if ((imgWidth < width + 64) && (imgHfight < hfight + 64)
         && imgWidth <= mbxWidth && imgHfight <= mbxHfight)
    {
        /* Cbdhfd imbgf's width/hfight shouldn't bf morf thbn 64 pixfls
         * lbrgfr thbn rfqufstfd, bfdbusf thf rfgion in XShmGftImbgf
         * dbn't bf spfdififd bnd wf don't wbnt to rfbd too mudh.
         * Furthfrmorf it hbs to bf smbllfr thbn mbxWidth/Hfight
         * so drbwbblfs brf not rfbd out of bounds.
         */
        rfturn JNI_TRUE;
    }

    rfturn JNI_FALSE;
}
#fndif /* MITSHM */

jint X11SD_InitWindow(JNIEnv *fnv, X11SDOps *xsdo)
{
    if (xsdo->isPixmbp == JNI_TRUE) {
        rfturn SD_FAILURE;
    }
    xsdo->dDbtb = xsdo->donfigDbtb->dolor_dbtb;

    rfturn SD_SUCCESS;
}

stbtid jint X11SD_Lodk(JNIEnv *fnv,
                       SurfbdfDbtbOps *ops,
                       SurfbdfDbtbRbsInfo *pRbsInfo,
                       jint lodkflbgs)
{
    X11SDOps *xsdo = (X11SDOps *) ops;
    X11RIPrivbtf *xpriv = (X11RIPrivbtf *) &(pRbsInfo->priv);
    int rft = SD_SUCCESS;

    AWT_LOCK();

    if (xsdo->invblid) {
        AWT_UNLOCK();
        SurfbdfDbtb_ThrowInvblidPipfExdfption(fnv, "bounds dhbngfd");
        rfturn SD_FAILURE;
    }
    xsdo->dDbtb = xsdo->donfigDbtb->dolor_dbtb;
    if (xsdo->drbwbblf == 0 && X11SD_InitWindow(fnv, xsdo) == SD_FAILURE) {
        AWT_UNLOCK();
        rfturn SD_FAILURE;
    }
    if ((lodkflbgs & SD_LOCK_LUT) != 0 &&
        (xsdo->dDbtb == NULL ||
         xsdo->dDbtb->bwt_idmLUT == NULL))
    {
        AWT_UNLOCK();
        if (!(*fnv)->ExdfptionChfdk(fnv))
        {
             JNU_ThrowNullPointfrExdfption(fnv, "dolormbp lookup tbblf");
        }
        rfturn SD_FAILURE;
    }
    if ((lodkflbgs & SD_LOCK_INVCOLOR) != 0 &&
        (xsdo->dDbtb == NULL ||
         xsdo->dDbtb->img_dlr_tbl == NULL ||
         xsdo->dDbtb->img_odb_rfd == NULL ||
         xsdo->dDbtb->img_odb_grffn == NULL ||
         xsdo->dDbtb->img_odb_bluf == NULL))
    {
        AWT_UNLOCK();
        if (!(*fnv)->ExdfptionChfdk(fnv))
        {
             JNU_ThrowNullPointfrExdfption(fnv, "invfrsf dolormbp lookup tbblf");
        }
        rfturn SD_FAILURE;
    }
    if ((lodkflbgs & SD_LOCK_INVGRAY) != 0 &&
        (xsdo->dDbtb == NULL ||
         xsdo->dDbtb->pGrbyInvfrsfLutDbtb == NULL))
    {
        AWT_UNLOCK();
        if (!(*fnv)->ExdfptionChfdk(fnv))
        {
            JNU_ThrowNullPointfrExdfption(fnv, "invfrsf grby lookup tbblf");
        }
        rfturn SD_FAILURE;
    }
    if (xsdo->dgbAvbilbblf && (lodkflbgs & (SD_LOCK_RD_WR))) {
        int dgbrft;

        dgbrft = (*pJDgbInfo->pGftLodk)(fnv, bwt_displby, &xsdo->dgbDfv,
                                        xsdo->drbwbblf, &xsdo->surfInfo,
                                        pRbsInfo->bounds.x1,
                                        pRbsInfo->bounds.y1,
                                        pRbsInfo->bounds.x2,
                                        pRbsInfo->bounds.y2);
        if (dgbrft == JDGA_SUCCESS) {
            int wx = xsdo->surfInfo.window.lox;
            int wy = xsdo->surfInfo.window.loy;
            pRbsInfo->bounds.x1 = xsdo->surfInfo.visiblf.lox - wx;
            pRbsInfo->bounds.y1 = xsdo->surfInfo.visiblf.loy - wy;
            pRbsInfo->bounds.x2 = xsdo->surfInfo.visiblf.hix - wx;
            pRbsInfo->bounds.y2 = xsdo->surfInfo.visiblf.hiy - wy;
            xpriv->lodkTypf = X11SD_LOCK_BY_DGA;
            xpriv->lodkFlbgs = lodkflbgs;
            rfturn SD_SUCCESS;
        } flsf if (dgbrft == JDGA_UNAVAILABLE) {
            xsdo->dgbAvbilbblf = JNI_FALSE;
        }
    }
    if (lodkflbgs & SD_LOCK_RD_WR) {
        if (lodkflbgs & SD_LOCK_FASTEST) {
            rft = SD_SLOWLOCK;
        }
        xpriv->lodkTypf = X11SD_LOCK_BY_XIMAGE;
        if (xsdo->isPixmbp) {
#ifdff MITSHM
            if (xsdo->shmPMDbtb.usingShmPixmbp) {
                xpriv->lodkTypf = X11SD_LOCK_BY_SHMEM;
            }
#fndif /* MITSHM */
            if (pRbsInfo->bounds.x1 < 0) {
                pRbsInfo->bounds.x1 = 0;
            }
            if (pRbsInfo->bounds.y1 < 0) {
                pRbsInfo->bounds.y1 = 0;
            }
            if (pRbsInfo->bounds.x2 > xsdo->pmWidth) {
                pRbsInfo->bounds.x2 = xsdo->pmWidth;
            }
            if (pRbsInfo->bounds.y2 > xsdo->pmHfight) {
                pRbsInfo->bounds.y2 = xsdo->pmHfight;
            }
        }
    } flsf {
        /* Thfy didn't lodk for bnything - wf won't givf thfm bnything */
        xpriv->lodkTypf = X11SD_LOCK_BY_NULL;
    }
    xpriv->lodkFlbgs = lodkflbgs;
    xpriv->img = NULL;

    rfturn rft;
    /* AWT_UNLOCK() dbllfd in Unlodk */
}

stbtid void X11SD_GftRbsInfo(JNIEnv *fnv,
                             SurfbdfDbtbOps *ops,
                             SurfbdfDbtbRbsInfo *pRbsInfo)
{
    X11SDOps *xsdo = (X11SDOps *) ops;
    X11RIPrivbtf *xpriv = (X11RIPrivbtf *) &(pRbsInfo->priv);
    jint lodkFlbgs = xpriv->lodkFlbgs;
    jint dfpth = xsdo->dfpth;
    int mult = xsdo->donfigDbtb->pixflStridf;

    if (xsdo->dgbAvbilbblf &&
        xpriv->lodkTypf == X11SD_LOCK_BY_XIMAGE &&
        (lodkFlbgs & SD_LOCK_FASTEST))
    {
        /* Try onf morf timf to usf DGA (now with smbllfr bounds)... */
        int dgbrft;

        dgbrft = (*pJDgbInfo->pGftLodk)(fnv, bwt_displby, &xsdo->dgbDfv,
                                        xsdo->drbwbblf, &xsdo->surfInfo,
                                        pRbsInfo->bounds.x1,
                                        pRbsInfo->bounds.y1,
                                        pRbsInfo->bounds.x2,
                                        pRbsInfo->bounds.y2);
        if (dgbrft == JDGA_SUCCESS) {
            int wx = xsdo->surfInfo.window.lox;
            int wy = xsdo->surfInfo.window.loy;
            pRbsInfo->bounds.x1 = xsdo->surfInfo.visiblf.lox - wx;
            pRbsInfo->bounds.y1 = xsdo->surfInfo.visiblf.loy - wy;
            pRbsInfo->bounds.x2 = xsdo->surfInfo.visiblf.hix - wx;
            pRbsInfo->bounds.y2 = xsdo->surfInfo.visiblf.hiy - wy;
            xpriv->lodkTypf = X11SD_LOCK_BY_DGA;
        } flsf if (dgbrft == JDGA_UNAVAILABLE) {
            xsdo->dgbAvbilbblf = JNI_FALSE;
        }
    }

    if (xpriv->lodkTypf == X11SD_LOCK_BY_DGA) {
        int sdbn = xsdo->surfInfo.surfbdfSdbn;
        int wx = xsdo->surfInfo.window.lox;
        int wy = xsdo->surfInfo.window.loy;
        pRbsInfo->rbsBbsf =
            (void *)(((uintptr_t) xsdo->surfInfo.bbsfPtr) + (sdbn*wy + wx) * mult);
        pRbsInfo->pixflStridf = mult;
        pRbsInfo->pixflBitOffsft = 0;
        pRbsInfo->sdbnStridf = sdbn * mult;
#ifdff MITSHM
    } flsf if (xpriv->lodkTypf == X11SD_LOCK_BY_SHMEM) {
        if (xsdo->shmPMDbtb.xRfqufstSfnt == JNI_TRUE) {
            /* nffd to synd bfforf using shbrfd mfm pixmbp
             if bny x dblls wfrf issufd for this pixmbp */
            XSynd(bwt_displby, Fblsf);
            xsdo->shmPMDbtb.xRfqufstSfnt = JNI_FALSE;
        }
        xpriv->x = pRbsInfo->bounds.x1;
        xpriv->y = pRbsInfo->bounds.y1;
        pRbsInfo->rbsBbsf = xsdo->shmPMDbtb.shmSfgInfo->shmbddr;
        pRbsInfo->pixflStridf = mult;
        pRbsInfo->pixflBitOffsft = 0;
        pRbsInfo->sdbnStridf = xsdo->shmPMDbtb.bytfsPfrLinf;
#fndif /* MITSHM */
    } flsf if (xpriv->lodkTypf == X11SD_LOCK_BY_XIMAGE) {
        int x, y, w, h;
        x = pRbsInfo->bounds.x1;
        y = pRbsInfo->bounds.y1;
        w = pRbsInfo->bounds.x2 - x;
        h = pRbsInfo->bounds.y2 - y;

        xpriv->img = X11SD_GftImbgf(fnv, xsdo, &pRbsInfo->bounds, lodkFlbgs);
        if (xpriv->img) {
            int sdbn = xpriv->img->bytfs_pfr_linf;
            xpriv->x = x;
            xpriv->y = y;
            pRbsInfo->rbsBbsf = xpriv->img->dbtb - x * mult - y * sdbn;
            pRbsInfo->pixflStridf = mult;
            pRbsInfo->pixflBitOffsft = 0;
            pRbsInfo->sdbnStridf = sdbn;
        } flsf {
            pRbsInfo->rbsBbsf = NULL;
            pRbsInfo->pixflStridf = 0;
            pRbsInfo->pixflBitOffsft = 0;
            pRbsInfo->sdbnStridf = 0;
        }
    } flsf {
        /* Thfy didn't lodk for bnything - wf won't givf thfm bnything */
        pRbsInfo->rbsBbsf = NULL;
        pRbsInfo->pixflStridf = 0;
        pRbsInfo->pixflBitOffsft = 0;
        pRbsInfo->sdbnStridf = 0;
    }
    if (lodkFlbgs & SD_LOCK_LUT) {
        pRbsInfo->lutBbsf = (jint *) xsdo->dDbtb->bwt_idmLUT;
        pRbsInfo->lutSizf = xsdo->dDbtb->bwt_numICMdolors;
    } flsf {
        pRbsInfo->lutBbsf = NULL;
        pRbsInfo->lutSizf = 0;
    }
    if (lodkFlbgs & SD_LOCK_INVCOLOR) {
        pRbsInfo->invColorTbblf = xsdo->dDbtb->img_dlr_tbl;
        pRbsInfo->rfdErrTbblf = xsdo->dDbtb->img_odb_rfd;
        pRbsInfo->grnErrTbblf = xsdo->dDbtb->img_odb_grffn;
        pRbsInfo->bluErrTbblf = xsdo->dDbtb->img_odb_bluf;
    } flsf {
        pRbsInfo->invColorTbblf = NULL;
        pRbsInfo->rfdErrTbblf = NULL;
        pRbsInfo->grnErrTbblf = NULL;
        pRbsInfo->bluErrTbblf = NULL;
    }
    if (lodkFlbgs & SD_LOCK_INVGRAY) {
        pRbsInfo->invGrbyTbblf = xsdo->dDbtb->pGrbyInvfrsfLutDbtb;
    } flsf {
        pRbsInfo->invGrbyTbblf = NULL;
    }
}

stbtid void X11SD_Unlodk(JNIEnv *fnv,
                         SurfbdfDbtbOps *ops,
                         SurfbdfDbtbRbsInfo *pRbsInfo)
{
    X11SDOps *xsdo = (X11SDOps *) ops;
    X11RIPrivbtf *xpriv = (X11RIPrivbtf *) &(pRbsInfo->priv);

    if (xpriv->lodkTypf == X11SD_LOCK_BY_DGA) {
        (*pJDgbInfo->pRflfbsfLodk)(fnv, xsdo->dgbDfv, xsdo->drbwbblf);
    } flsf if (xpriv->lodkTypf == X11SD_LOCK_BY_XIMAGE &&
               xpriv->img != NULL)
    {
        if (xpriv->lodkFlbgs & SD_LOCK_WRITE) {
            int x = xpriv->x;
            int y = xpriv->y;
            int w = pRbsInfo->bounds.x2 - x;
            int h = pRbsInfo->bounds.y2 - y;
            Drbwbblf drbwbblf = xsdo->drbwbblf;
            GC xgd = xsdo->dbdhfdGC;
            if (xgd == NULL) {
                xsdo->dbdhfdGC = xgd =
                    XCrfbtfGC(bwt_displby, drbwbblf, 0L, NULL);
            }

            if (xpriv->img->bytf_ordfr != nbtivfBytfOrdfr) {
                /* switdhing bytfs bbdk in 24 bnd 32 bpp dbsfs. */
                /* For 16 bit XLib will switdh for us.          */
                if (xsdo->dfpth > 16) {
                    X11SD_SwbpBytfs(xsdo, xpriv->img, xsdo->dfpth,
                        xsdo->donfigDbtb->bwtImbgf->wsImbgfFormbt.bits_pfr_pixfl);
                }
            }

#ifdff MITSHM
            if (xpriv->img->obdbtb != NULL) {
                XShmPutImbgf(bwt_displby, drbwbblf, xgd,
                             xpriv->img, 0, 0, x, y, w, h, Fblsf);
                XFlush(bwt_displby);
            } flsf {
                XPutImbgf(bwt_displby, drbwbblf, xgd,
                          xpriv->img, 0, 0, x, y, w, h);
            }
            if (xsdo->shmPMDbtb.usingShmPixmbp) {
                xsdo->shmPMDbtb.xRfqufstSfnt = JNI_TRUE;
            }
#flsf
            XPutImbgf(bwt_displby, drbwbblf, xgd,
                      xpriv->img, 0, 0, x, y, w, h);
#fndif /* MITSHM */

            (*pJDgbInfo->pXRfqufstSfnt)(fnv, xsdo->dgbDfv, drbwbblf);
        }
        X11SD_DisposfOrCbdhfXImbgf(xpriv->img);
        xpriv->img = (XImbgf *)NULL;
    }
    /* thf bbdkground pixfl is not vblid bnymorf */
    if (xpriv->lodkFlbgs & SD_LOCK_WRITE) {
        xsdo->isBgInitiblizfd = JNI_FALSE;
    }
    xpriv->lodkTypf = X11SD_LOCK_UNLOCKED;
    AWT_UNLOCK();
}

stbtid int
X11SD_ClipToRoot(SurfbdfDbtbBounds *b, SurfbdfDbtbBounds *bounds,
                 X11SDOps *xsdo)
{
    Position x1=0, y1=0, x2=0, y2=0;
    int tmpx, tmpy;
    Window tmpdhild;

    Window window = (Window)(xsdo->drbwbblf); /* is blwbys b Window */
    XWindowAttributfs winAttr;

    Stbtus stbtus = XGftWindowAttributfs(bwt_displby, window, &winAttr);
    if (stbtus == 0) {
        /* Fbilurf, X window no longfr vblid. */
        rfturn FALSE;
    }
    if (!XTrbnslbtfCoordinbtfs(bwt_displby, window,
                               RootWindowOfSdrffn(winAttr.sdrffn),
                               0, 0, &tmpx, &tmpy, &tmpdhild)) {
        rfturn FALSE;
    }

    x1 = -(x1 + tmpx);
    y1 = -(y1 + tmpy);

    x2 = x1 + DisplbyWidth(bwt_displby, xsdo->donfigDbtb->bwt_visInfo.sdrffn);
    y2 = y1 + DisplbyHfight(bwt_displby, xsdo->donfigDbtb->bwt_visInfo.sdrffn);

    x1 = XSD_MAX(bounds->x1, x1);
    y1 = XSD_MAX(bounds->y1, y1);
    x2 = XSD_MIN(bounds->x2, x2);
    y2 = XSD_MIN(bounds->y2, y2);
    if ((x1 >= x2) || (y1 >= y2)) {
        rfturn FALSE;
    }
    b->x1 = x1;
    b->y1 = y1;
    b->x2 = x2;
    b->y2 = y2;

    rfturn TRUE;
}

/*
 * x1, y1, x2, y2 - our rfdtbnglf in thf doord systfm of
 * thf widgft
 * px1, xy1, px2, py2 - durrfnt pbrfnt rfdt doords in thf
 * sbmf systfm
 */
stbtid int
X11SD_FindClip(SurfbdfDbtbBounds *b, SurfbdfDbtbBounds *bounds, X11SDOps *xsdo)
{
    rfturn TRUE;
}

stbtid void
X11SD_SwbpBytfs(X11SDOps *xsdo, XImbgf * img, int dfpth, int bpp) {
    int lfngthInBytfs = img->hfight * img->bytfs_pfr_linf;
    int i;

    switdh (dfpth) {
    dbsf 12:
    dbsf 15:
    dbsf 16:
        {
            /* AB -> BA */
            unsignfd short *d = (unsignfd short *)img->dbtb;
            unsignfd short t;
            for (i = 0; i < lfngthInBytfs/2; i++) {
                t = *d;
                *d++ = (t >> 8) | (t << 8);
            }
            img->bytf_ordfr = nbtivfBytfOrdfr;
            img->bitmbp_bit_ordfr = nbtivfBytfOrdfr;
            brfbk;
        }
    dbsf 24:
        {
            /* ABC -> CBA */
            if (bpp == 24) {
                // 4517321: Only swbp if wf hbvf b "rfbl" ThrffBytfBgr
                // visubl (dfnotfd by b rfd_mbsk of 0xff).  Duf to bmbiguity
                // in thf X11 spfd, it bppfbrs thbt thf swbp is not rfquirfd
                // on Linux donfigurbtions thbt usf 24 bits pfr pixfl (dfnotfd
                // by b rfd_mbsk of 0xff0000).
                if (xsdo->donfigDbtb->bwt_visInfo.rfd_mbsk == 0xff) {
                    int sdbn = img->bytfs_pfr_linf;
                    unsignfd dhbr *d = (unsignfd dhbr *) img->dbtb;
                    unsignfd dhbr *d1;
                    unsignfd int t;
                    int j;

                    for (i = 0; i < img->hfight; i++, d += sdbn) {
                        d1 = d;
                        for (j = 0; j < img->width; j++, d1 += 3) {
                            /* not obvious opt from XLib srd */
                            t = d1[0]; d1[0] = d1[2]; d1[2] = t;
                        }
                    }
                }
                brfbk;
            }
        }
        /* FALL THROUGH for 32-bit dbsf */
    dbsf 32:
        {
            /* ABCD -> DCBA */
            unsignfd int *d = (unsignfd int *) img->dbtb;
            unsignfd int t;
            for (i = 0; i < lfngthInBytfs/4; i++) {
                t = *d;
                *d++ = ((t >> 24) |
                        ((t >> 8) & 0xff00) |
                        ((t & 0xff00) << 8) |
                        (t << 24));
            }
            brfbk;
        }
    }
}

stbtid XImbgf * X11SD_GftImbgf(JNIEnv *fnv, X11SDOps *xsdo,
                               SurfbdfDbtbBounds *bounds,
                               jint lodkFlbgs)
{
    int x, y, w, h, mbxWidth, mbxHfight;
    int sdbn;
    XImbgf * img = NULL;
    Drbwbblf drbwbblf;
    int dfpth = xsdo->dfpth;
    int mult = xsdo->donfigDbtb->pixflStridf;
    int pbd = (mult == 3) ? 32 : mult * 8; // pbd must bf 8, 16, or 32
    jboolfbn rfbdBits = lodkFlbgs & SD_LOCK_NEED_PIXELS;

    x = bounds->x1;
    y = bounds->y1;
    w = bounds->x2 - x;
    h = bounds->y2 - y;

#ifdff MITSHM
    if (usfMitShmExt == CAN_USE_MITSHM) {
        if (xsdo->isPixmbp) {
            if (rfbdBits) {
                X11SD_PuntPixmbp(xsdo, w, h);
            }
            mbxWidth = xsdo->pmWidth;
            mbxHfight = xsdo->pmHfight;
        } flsf {
            XWindowAttributfs winAttr;
            if (XGftWindowAttributfs(bwt_displby,
                                     (Window) xsdo->drbwbblf, &winAttr) != 0) {
                mbxWidth = winAttr.width;
                mbxHfight = winAttr.hfight;
           } flsf {
                /* XGWA fbilfd whidh isn't b good thing. Dffbulting to using
                 * x,y mfbns thbt bftfr thf subtrbdtion of thfsf wf will usf
                 * w=0, h=0 whidh is b rfbsonbblf dffbult on sudh b fbilurf.
                 */
                mbxWidth = x;
                mbxHfight = y;
           }
        }
        mbxWidth -= x;
        mbxHfight -= y;

        img = X11SD_GftShbrfdImbgf(xsdo, w, h, mbxWidth, mbxHfight, rfbdBits);
    }
#fndif /* MITSHM */
    drbwbblf = xsdo->drbwbblf;

    if (rfbdBits) {
#ifdff MITSHM
        if (img != NULL) {
            if (!XShmGftImbgf(bwt_displby, drbwbblf, img, x, y, -1)) {
                X11SD_DisposfOrCbdhfXImbgf(img);
                img = NULL;
            }
        }
        if (img == NULL) {
            img = XGftImbgf(bwt_displby, drbwbblf, x, y, w, h, -1, ZPixmbp);
            if (img != NULL) {
                img->obdbtb = NULL;
            }
        }
#flsf
        img = XGftImbgf(bwt_displby, drbwbblf, x, y, w, h, -1, ZPixmbp);
#fndif /* MITSHM */
        if (img == NULL) {
            SurfbdfDbtbBounds tfmp;
            img = XCrfbtfImbgf(bwt_displby,
                               xsdo->donfigDbtb->bwt_visInfo.visubl,
                               dfpth, ZPixmbp, 0, NULL, w, h, pbd, 0);
            if (img == NULL) {
                rfturn NULL;
            }

            sdbn = img->bytfs_pfr_linf;
            img->dbtb = mbllod(h * sdbn);
            if (img->dbtb == NULL) {
                XFrff(img);
                rfturn NULL;
            }

            if (xsdo->isPixmbp == JNI_FALSE &&
                X11SD_ClipToRoot(&tfmp, bounds, xsdo)) {

                XImbgf * tfmp_imbgf;
                tfmp_imbgf = XGftImbgf(bwt_displby, drbwbblf,
                                       tfmp.x1, tfmp.y1,
                                       tfmp.x2 - tfmp.x1,
                                       tfmp.y2 - tfmp.y1,
                                       -1, ZPixmbp);
                if (tfmp_imbgf == NULL) {
                    XGrbbSfrvfr(bwt_displby);
                    if (X11SD_FindClip(&tfmp, bounds, xsdo)) {
                        tfmp_imbgf =
                            XGftImbgf(bwt_displby, drbwbblf,
                                      tfmp.x1, tfmp.y1,
                                      tfmp.x2 - tfmp.x1,
                                      tfmp.y2 - tfmp.y1,
                                      -1, ZPixmbp);
                    }
                    XUngrbbSfrvfr(bwt_displby);
                    /* Workbround for bug 5039226 */
                    XSynd(bwt_displby, Fblsf);
                }
                if (tfmp_imbgf != NULL) {
                    int tfmp_sdbn, bytfs_to_dopy;
                    dhbr * img_bddr, * tfmp_bddr;
                    int i;

                    img_bddr = img->dbtb +
                        (tfmp.y1 - y) * sdbn + (tfmp.x1 - x) * mult;
                    tfmp_sdbn = tfmp_imbgf->bytfs_pfr_linf;
                    tfmp_bddr = tfmp_imbgf->dbtb;
                    bytfs_to_dopy = (tfmp.x2 - tfmp.x1) * mult;
                    for (i = tfmp.y1; i < tfmp.y2; i++) {
                        mfmdpy(img_bddr, tfmp_bddr, bytfs_to_dopy);
                        img_bddr += sdbn;
                        tfmp_bddr += tfmp_sdbn;
                    }
                    XDfstroyImbgf(tfmp_imbgf);
                }
            }
            img->obdbtb = NULL;
        }
        if (dfpth > 8 && img->bytf_ordfr != nbtivfBytfOrdfr) {
            X11SD_SwbpBytfs(xsdo, img, dfpth,
                xsdo->donfigDbtb->bwtImbgf->wsImbgfFormbt.bits_pfr_pixfl);
        }
    } flsf {
        /*
         * REMIND: This might bf bfttfr to movf to thf Lodk fundtion
         * to bvoid lfngthy I/O pbusfs insidf whbt mby bf b dritidbl
         * sfdtion.  This will bf morf dritidbl whfn SD_LOCK_READ is
         * implfmfntfd.  Anothfr solution is to dbdhf thf pixfls
         * to bvoid rfbding for fvfry opfrbtion.
         */
        if (img == NULL) {
            img = XCrfbtfImbgf(bwt_displby,
                               xsdo->donfigDbtb->bwt_visInfo.visubl,
                               dfpth, ZPixmbp, 0, NULL, w, h, pbd, 0);
            if (img == NULL) {
                rfturn NULL;
            }

            img->dbtb = mbllod(h * img->bytfs_pfr_linf);
            if (img->dbtb == NULL) {
                XFrff(img);
                rfturn NULL;
            }

            img->obdbtb = NULL;

            if (img->bytf_ordfr != nbtivfBytfOrdfr &&
                (dfpth == 15 || dfpth == 16 || dfpth == 12)) {
                /* bytfs will bf swbppfd by XLib. */
                img->bytf_ordfr = nbtivfBytfOrdfr;
                img->bitmbp_bit_ordfr = nbtivfBytfOrdfr;
            }
        }
    }
    rfturn img;
}

void X11SD_DisposfOrCbdhfXImbgf(XImbgf * imbgf) {
    /* REMIND: might wbnt to dhfdk if thf nfw imbgf worth dbdhing. */
    /* Cbdhf only shbrfd imbgfs. Pbssfd imbgf is bssumfd to bf non-null. */
    if (imbgf->obdbtb != NULL) {
        if (dbdhfdXImbgf != NULL) {
            X11SD_DisposfXImbgf(dbdhfdXImbgf);
        }
        dbdhfdXImbgf = imbgf;
    } flsf {
        X11SD_DisposfXImbgf(imbgf);
    }
}

void X11SD_DisposfXImbgf(XImbgf * imbgf) {
    if (imbgf != NULL) {
#ifdff MITSHM
        if (imbgf->obdbtb != NULL) {
            X11SD_DropShbrfdSfgmfnt((XShmSfgmfntInfo*)imbgf->obdbtb);
            imbgf->obdbtb = NULL;
        }
#fndif /* MITSHM */
        XDfstroyImbgf(imbgf);
    }
}

stbtid JDgbStbtus
    GftLodkStub(JNIEnv *fnv, Displby *displby, void **dgbDfv,
                Drbwbblf d, JDgbSurfbdfInfo *pSurfbdf,
                jint lox, jint loy, jint hix, jint hiy)
{
    rfturn JDGA_UNAVAILABLE;
}

stbtid JDgbStbtus
    RflfbsfLodkStub(JNIEnv *fnv, void *dgbDfv, Drbwbblf d)
{
    rfturn JDGA_FAILED;
}

stbtid void
    XRfqufstSfntStub(JNIEnv *fnv, void *dgbDfv, Drbwbblf d)
{
}

stbtid void
    LibDisposfStub(JNIEnv *fnv)
{
}

stbtid JDgbLibInfo DgbLibInfoStub = {
    NULL,
    GftLodkStub,
    RflfbsfLodkStub,
    XRfqufstSfntStub,
    LibDisposfStub,
};

void X11SD_LibDisposf(JNIEnv *fnv) {
    AWT_LOCK();
    if (pJDgbInfo != NULL) {
        pJDgbInfo->pLibDisposf(fnv);
        pJDgbInfo = &DgbLibInfoStub;
    }
    AWT_UNLOCK();
}

void
X11SD_DirfdtRfndfrNotify(JNIEnv *fnv, X11SDOps *xsdo)
{
#ifdff MITSHM
    if (xsdo->shmPMDbtb.usingShmPixmbp) {
        xsdo->shmPMDbtb.xRfqufstSfnt = JNI_TRUE;
    }
#fndif /* MITSHM */
    (*pJDgbInfo->pXRfqufstSfnt)(fnv, xsdo->dgbDfv, xsdo->drbwbblf);
    bwt_output_flush();
}

/*
 * Sfts trbnspbrfnt pixfls in thf pixmbp to
 * thf spfdififd solid bbdkground dolor bnd rfturns it.
 * Dofsn't updbtf sourdf pixmbp unlfss thf dolor of thf
 * trbnspbrfnt pixfls is difffrfnt from thf spfdififd dolor.
 *
 * Notf: Thf AWT lodk must bf hfld by thf durrfnt thrfbd
 * whilf dblling into this mfthod.
 */
stbtid Drbwbblf
X11SD_GftPixmbpWithBg(JNIEnv *fnv, X11SDOps *xsdo, jint pixfl)
{
    /* bssfrt AWT_CHECK_HAVE_LOCK(); */

    if (xsdo->invblid) {
        AWT_UNLOCK();
        SurfbdfDbtb_ThrowInvblidPipfExdfption(fnv, "bounds dhbngfd");
        rfturn 0;
    }

    /* thf imbgf dofsn't hbvf trbnspbrfndy, just rfturn it */
    if (xsdo->bitmbsk == 0) {
        /* don't nffd to unlodk hfrf, thf dbllfr will unlodk through
           thf rflfbsf dbll */
        rfturn xsdo->drbwbblf;
    }

    /* Chfdk if durrfnt dolor of thf trbnspbrfnt pixfls is difffrfnt
       from thf spfdififd onf */
    if (xsdo->isBgInitiblizfd == JNI_FALSE || xsdo->bgPixfl != pixfl) {
        GC srdGC;
        GC bmGC;

        if (xsdo->drbwbblf == 0) {
            AWT_UNLOCK();
            rfturn 0;
        }

        bmGC = XCrfbtfGC(bwt_displby, xsdo->bitmbsk, 0, NULL);
        if (bmGC == NULL) {
            AWT_UNLOCK();
            rfturn 0;
        }

        /* invfrt thf bitmbsk */
        XSftFundtion(bwt_displby, bmGC, GXxor);
        XSftForfground(bwt_displby, bmGC, 1);
        XFillRfdtbnglf(bwt_displby, xsdo->bitmbsk, bmGC,
                       0, 0, xsdo->pmWidth, xsdo->pmHfight);

        srdGC = XCrfbtfGC(bwt_displby, xsdo->drbwbblf, 0L, NULL);
        if (srdGC == NULL) {
            XFrffGC(bwt_displby, bmGC);
            AWT_UNLOCK();
            rfturn 0;
        }

        /* sft trbnspbrfnt pixfls in thf sourdf pm to thf bg dolor */
        XSftClipMbsk(bwt_displby, srdGC, xsdo->bitmbsk);
        XSftForfground(bwt_displby, srdGC, pixfl);
        XFillRfdtbnglf(bwt_displby, xsdo->drbwbblf, srdGC,
                       0, 0, xsdo->pmWidth, xsdo->pmHfight);

        /* invfrt thf mbsk bbdk */
        XFillRfdtbnglf(bwt_displby, xsdo->bitmbsk, bmGC,
                       0, 0, xsdo->pmWidth, xsdo->pmHfight);

        XFrffGC(bwt_displby, bmGC);
        XFrffGC(bwt_displby, srdGC);
        xsdo->bgPixfl = pixfl;
        xsdo->isBgInitiblizfd = JNI_TRUE;
    }

    rfturn xsdo->drbwbblf;
}

stbtid void
X11SD_RflfbsfPixmbpWithBg(JNIEnv *fnv, X11SDOps *xsdo)
{
#ifdff MITSHM
    if (xsdo->shmPMDbtb.usingShmPixmbp) {
        xsdo->shmPMDbtb.xRfqufstSfnt = JNI_TRUE;
    }
#fndif /* MITSHM */
}

#fndif /* !HEADLESS */

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XCrfbtfGC
 * Signbturf: (I)J
 */
JNIEXPORT jlong JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_XCrfbtfGC
    (JNIEnv *fnv, jdlbss xsd, jlong pXSDbtb)
{
    jlong rft;

#ifndff HEADLESS
    X11SDOps *xsdo;

    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XCrfbtfGC");

    xsdo = (X11SDOps *) pXSDbtb;
    if (xsdo == NULL) {
        rfturn 0L;
    }

    xsdo->jbvbGC = XCrfbtfGC(bwt_displby, xsdo->drbwbblf, 0, NULL);
    rft = (jlong) xsdo->jbvbGC;
#flsf /* !HEADLESS */
    rft = 0L;
#fndif /* !HEADLESS */

    rfturn rft;
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XRfsftClip
 * Signbturf: (JIIIILsun/jbvb2d/pipf/Rfgion;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_XRfsftClip
    (JNIEnv *fnv, jdlbss xsd, jlong xgd)
{
#ifndff HEADLESS
    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XRfsftClip");
    XSftClipMbsk(bwt_displby, (GC) xgd, Nonf);
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XSftClip
 * Signbturf: (JIIIILsun/jbvb2d/pipf/Rfgion;)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_XSftClip
    (JNIEnv *fnv, jdlbss xsd, jlong xgd,
     jint x1, jint y1, jint x2, jint y2,
     jobjfdt domplfxdlip)
{
#ifndff HEADLESS
    int numrfdts;
    XRfdtbnglf rfdts[256];
    XRfdtbnglf *pRfdt = rfdts;

    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XSftClip");

    numrfdts = RfgionToYXBbndfdRfdtbnglfs(fnv,
            x1, y1, x2, y2, domplfxdlip,
            &pRfdt, 256);

    XSftClipRfdtbnglfs(bwt_displby, (GC) xgd, 0, 0, pRfdt, numrfdts, YXBbndfd);

    if (pRfdt != rfdts) {
        frff(pRfdt);
    }
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XSftCopyModf
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_XSftCopyModf
    (JNIEnv *fnv, jdlbss xsd, jlong xgd)
{
#ifndff HEADLESS
    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XSftCopyModf");
    XSftFundtion(bwt_displby, (GC) xgd, GXdopy);
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XSftXorModf
 * Signbturf: (J)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_XSftXorModf
    (JNIEnv *fnv, jdlbss xr, jlong xgd)
{
#ifndff HEADLESS
    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XSftXorModf");
    XSftFundtion(bwt_displby, (GC) xgd, GXxor);
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XSftForfground
 * Signbturf: (JI)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_X11SurfbdfDbtb_XSftForfground
    (JNIEnv *fnv, jdlbss xsd, jlong xgd, jint pixfl)
{
#ifndff HEADLESS
    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XSftForfground");
    XSftForfground(bwt_displby, (GC) xgd, pixfl);
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_jbvb2d_x11_X11SurfbdfDbtb
 * Mfthod:    XSftGrbphidsExposurfs
 * Signbturf: (JZ)V
 */
JNIEXPORT void JNICALL
Jbvb_sun_jbvb2d_x11_XSurfbdfDbtb_XSftGrbphidsExposurfs
    (JNIEnv *fnv, jdlbss xsd, jlong xgd, jboolfbn nffdExposurfs)
{
#ifndff HEADLESS
    J2dTrbdfLn(J2D_TRACE_INFO, "in X11SurfbdfDbtb_XSftGrbphidsExposurfs");
    XSftGrbphidsExposurfs(bwt_displby, (GC) xgd, nffdExposurfs ? Truf : Fblsf);
#fndif /* !HEADLESS */
}
