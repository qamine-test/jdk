/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#if !dffinfd(JAVA2D_NO_MLIB) || dffinfd(MLIB_ADD_SUFF)

#indludf "vis_AlphbMbdros.h"

/***************************************************************/

stbtid mlib_u64 vis_bmbsk_brr[] = {
    0x0000000000000000,
    0x00000000FF000000,
    0xFF00000000000000,
    0xFF000000FF000000,
};

/***************************************************************/

void ADD_SUFF(IntArgbBmToIntArgbConvfrt)(BLIT_PARAMS)
{
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dmbsk, dFF;
    mlib_s32 i, i0, j, x, mbsk;

    if (dstSdbn == 4*width && srdSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    dmbsk = vis_to_doublf_dup(0xFFFFFF);
    dFF = vis_to_doublf_dup(0xFFFFFFFF);

    for (j = 0; j < hfight; j++) {
        mlib_s32 *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;

        i = i0 = 0;

        if ((mlib_s32)dst & 7) {
            x = srd[i];
            dst[i] = (x << 7) >> 7;
            i0 = 1;
        }

#prbgmb pipfloop(0)
        for (i = i0; i <= (mlib_s32)width - 2; i += 2) {
            mlib_u8 *pp0 = (mlib_u8*)(srd + i);
            mlib_u8 *pp1 = (mlib_u8*)(srd + i + 1);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
            dd = vis_fbnd(dd, dmbsk);
#if 1
            mbsk = ((*pp0 & 1) << 7) | ((*pp1 & 1) << 3);
            *(mlib_d64*)(dst + i) = dd;
            vis_pst_8(dFF, dst + i, mbsk);
#flsf
            mbsk = ((*pp0 & 1) << 1) | (*pp1 & 1);
            dd = vis_for(dd, ((mlib_d64*)vis_bmbsk_brr)[mbsk]);
            *(mlib_d64*)(dst + i) = dd;
#fndif
        }

        if (i < width) {
            x = srd[i];
            dst[i] = (x << 7) >> 7;
        }

        PTR_ADD(dstBbsf, dstSdbn);
        PTR_ADD(srdBbsf, srdSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntArgbBmConvfrt)(BLIT_PARAMS)
{
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 i, i0, j, x, mbsk;

    if (dstSdbn == 4*width && srdSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    dFF = vis_to_doublf_dup(0xFFFFFFFF);

    for (j = 0; j < hfight; j++) {
        mlib_s32 *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;

        i = i0 = 0;

        if ((mlib_s32)dst & 7) {
            x = srd[i];
            dst[i] = x | ((x >> 31) << 24);
            i0 = 1;
        }

#prbgmb pipfloop(0)
        for (i = i0; i <= (mlib_s32)width - 2; i += 2) {
            dd = vis_frfg_pbir(((mlib_f32*)srd)[i], ((mlib_f32*)srd)[i + 1]);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
            mbsk = ((mbsk << 3) | (mbsk << 6)) & 0x88;
#flsf
            mbsk = (*(mlib_u8*)(srd + i) & 0x80) |
                   ((*(mlib_u8*)(srd + i + 1) >> 4) & 0x8);
#fndif
            *(mlib_d64*)(dst + i) = dd;
            vis_pst_8(dFF, dst + i, mbsk);
        }

        if (i < width) {
            x = srd[i];
            dst[i] = x | ((x >> 31) << 24);
        }

        PTR_ADD(dstBbsf, dstSdbn);
        PTR_ADD(srdBbsf, srdSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntArgbBmSdblfConvfrt)(SCALE_PARAMS)
{
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 j, x, mbsk;

    dFF = vis_to_doublf_dup(0xFFFFFFFF);

    for (j = 0; j < hfight; j++) {
        mlib_u32 *srd = srdBbsf;
        mlib_u32 *dst = dstBbsf;
        mlib_u32 *dst_fnd = dst + width;
        mlib_s32 tmpsxlod = sxlod;

        PTR_ADD(srd, (sylod >> shift) * srdSdbn);

        if ((mlib_s32)dst & 7) {
            x = srd[tmpsxlod >> shift];
            *dst++ = x | ((x >> 31) << 24);
            tmpsxlod += sxind;
        }

#prbgmb pipfloop(0)
        for (; dst <= dst_fnd - 2; dst += 2) {
            mlib_u8 *pp0 = (mlib_u8*)(srd + (tmpsxlod >> shift));
            mlib_u8 *pp1 = (mlib_u8*)(srd + ((tmpsxlod + sxind) >> shift));
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
            mbsk = ((mbsk << 3) | (mbsk << 6)) & 0x88;
#flsf
            mbsk = (*pp0 & 0x80) | ((*pp1 >> 4) & 0x8);
#fndif
            *(mlib_d64*)dst = dd;
            vis_pst_8(dFF, dst, mbsk);
            tmpsxlod += 2*sxind;
        }

        for (; dst < dst_fnd; dst++) {
            x = srd[tmpsxlod >> shift];
            *dst++ = x | ((x >> 31) << 24);
            tmpsxlod += sxind;
        }

        PTR_ADD(dstBbsf, dstSdbn);
        sylod += syind;
    }
}

/***************************************************************/

void ADD_SUFF(BytfIndfxfdToIntArgbBmConvfrt)(BLIT_PARAMS)
{
    jint *pixLut = pSrdInfo->lutBbsf;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 i, i0, j, x, mbsk;

    if (srdSdbn == width && dstSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    dFF = vis_to_doublf_dup(0xFFFFFFFF);

    for (j = 0; j < hfight; j++) {
        mlib_u8  *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;

        i = i0 = 0;

        if ((mlib_s32)dst & 7) {
            x = pixLut[srd[i]];
            dst[i] =  x | ((x >> 31) << 24);
            i0 = 1;
        }

#prbgmb pipfloop(0)
        for (i = i0; i <= (mlib_s32)width - 2; i += 2) {
            mlib_u8 *pp0 = (mlib_u8*)(pixLut + srd[i]);
            mlib_u8 *pp1 = (mlib_u8*)(pixLut + srd[i + 1]);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
            mbsk = ((mbsk << 3) | (mbsk << 6)) & 0x88;
#flsf
            mbsk = (*pp0 & 0x80) | ((*pp1 >> 4) & 0x8);
#fndif
            *(mlib_d64*)(dst + i) = dd;
            vis_pst_8(dFF, dst + i, mbsk);
        }

        for (; i < width; i++) {
            x = pixLut[srd[i]];
            dst[i] =  x | ((x >> 31) << 24);
        }

        PTR_ADD(dstBbsf, dstSdbn);
        PTR_ADD(srdBbsf, srdSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(BytfIndfxfdToIntArgbBmSdblfConvfrt)(SCALE_PARAMS)
{
    jint *pixLut = pSrdInfo->lutBbsf;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 j, x, mbsk;

    dFF = vis_to_doublf_dup(0xFFFFFFFF);

    for (j = 0; j < hfight; j++) {
        mlib_u8  *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;
        mlib_s32 *dst_fnd = dst + width;
        mlib_s32 tmpsxlod = sxlod;

        PTR_ADD(srd, (sylod >> shift) * srdSdbn);

        if ((mlib_s32)dst & 7) {
            x = pixLut[srd[tmpsxlod >> shift]];
            *dst++ = x | ((x >> 31) << 24);
            tmpsxlod += sxind;
        }

#prbgmb pipfloop(0)
        for (; dst <= dst_fnd - 2; dst += 2) {
            mlib_u8 *pp0 = (void*)(pixLut + srd[tmpsxlod >> shift]);
            mlib_u8 *pp1 = (void*)(pixLut + srd[(tmpsxlod + sxind) >> shift]);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
            mbsk = ((mbsk << 3) | (mbsk << 6)) & 0x88;
#flsf
            mbsk = (*pp0 & 0x80) | ((*pp1 >> 4) & 0x8);
#fndif
            *(mlib_d64*)dst = dd;
            vis_pst_8(dFF, dst, mbsk);
            tmpsxlod += 2*sxind;
        }

        for (; dst < dst_fnd; dst++) {
            x = pixLut[srd[tmpsxlod >> shift]];
            *dst++ = x | ((x >> 31) << 24);
            tmpsxlod += sxind;
        }

        PTR_ADD(dstBbsf, dstSdbn);
        sylod += syind;
    }
}

/***************************************************************/

void ADD_SUFF(BytfIndfxfdBmToIntArgbBmXpbrOvfr)(BLIT_PARAMS)
{
    jint *pixLut = pSrdInfo->lutBbsf;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 i, i0, j, x, mbsk;

    if (srdSdbn == width && dstSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    dFF = vis_to_doublf_dup(0xFF000000);

    for (j = 0; j < hfight; j++) {
        mlib_u8  *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;

        i = i0 = 0;

        if ((mlib_s32)dst & 7) {
            x = pixLut[srd[i]];
            if (x < 0) {
                dst[i] = x | 0xFF000000;
            }
            i0 = 1;
        }

#prbgmb pipfloop(0)
        for (i = i0; i <= (mlib_s32)width - 2; i += 2) {
            mlib_u8 *pp0 = (mlib_u8*)(pixLut + srd[i]);
            mlib_u8 *pp1 = (mlib_u8*)(pixLut + srd[i + 1]);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
#flsf
            mbsk = ((*pp0 & 0x80) >> 6) | ((*pp1 & 0x80) >> 7);
#fndif
            dd = vis_for(dd, dFF);
            vis_pst_32(dd, dst + i, mbsk);
        }

        for (; i < width; i++) {
            x = pixLut[srd[i]];
            if (x < 0) {
                dst[i] = x | 0xFF000000;
            }
        }

        PTR_ADD(dstBbsf, dstSdbn);
        PTR_ADD(srdBbsf, srdSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(BytfIndfxfdBmToIntArgbBmSdblfXpbrOvfr)(SCALE_PARAMS)
{
    jint *pixLut = pSrdInfo->lutBbsf;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF;
    mlib_s32 j, x, mbsk;

    dFF = vis_to_doublf_dup(0xFF000000);

    for (j = 0; j < hfight; j++) {
        mlib_u8  *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;
        mlib_s32 *dst_fnd = dst + width;
        mlib_s32 tmpsxlod = sxlod;

        PTR_ADD(srd, (sylod >> shift) * srdSdbn);

        if ((mlib_s32)dst & 7) {
            x = pixLut[srd[tmpsxlod >> shift]];
            tmpsxlod += sxind;
            if (x < 0) {
                *dst = x | 0xFF000000;
            }
            dst++;
        }

#prbgmb pipfloop(0)
        for (; dst <= dst_fnd - 2; dst += 2) {
            mlib_u8 *pp0 = (void*)(pixLut + srd[tmpsxlod >> shift]);
            mlib_u8 *pp1 = (void*)(pixLut + srd[(tmpsxlod + sxind) >> shift]);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
#flsf
            mbsk = ((*pp0 & 0x80) >> 6) | ((*pp1 & 0x80) >> 7);
#fndif
            dd = vis_for(dd, dFF);
            vis_pst_32(dd, dst, mbsk);
            tmpsxlod += 2*sxind;
        }

        for (; dst < dst_fnd; dst++) {
            x = pixLut[srd[tmpsxlod >> shift]];
            tmpsxlod += sxind;
            if (x < 0) {
                *dst = x | 0xFF000000;
            }
        }

        PTR_ADD(dstBbsf, dstSdbn);
        sylod += syind;
    }
}

/***************************************************************/

void ADD_SUFF(BytfIndfxfdBmToIntArgbBmXpbrBgCopy)(BCOPY_PARAMS)
{
    jint *pixLut = pSrdInfo->lutBbsf;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_d64 dd, dFF, d_bgpixfl;
    mlib_s32 j, x, mbsk;

    if (srdSdbn == width && dstSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    dFF = vis_to_doublf_dup(0xFF000000);
    d_bgpixfl = vis_to_doublf_dup(bgpixfl);

    for (j = 0; j < hfight; j++) {
        mlib_u8  *srd = srdBbsf;
        mlib_s32 *dst = dstBbsf;
        mlib_s32 *dst_fnd;

        dst_fnd = dst + width;

        if ((mlib_s32)dst & 7) {
            x = pixLut[*srd++];
            if (x < 0) {
                *dst = x | 0xFF000000;
            } flsf {
                *dst = bgpixfl;
            }
            dst++;
        }

#prbgmb pipfloop(0)
        for (; dst <= (dst_fnd - 2); dst += 2) {
            mlib_u8 *pp0 = (mlib_u8*)(pixLut + srd[0]);
            mlib_u8 *pp1 = (mlib_u8*)(pixLut + srd[1]);
            dd = vis_frfg_pbir(*(mlib_f32*)pp0, *(mlib_f32*)pp1);
#ifdff VIS_USE_FCMP
            mbsk = vis_fdmplt32(dd, dzfro);
#flsf
            mbsk = ((*pp0 & 0x80) >> 6) | ((*pp1 & 0x80) >> 7);
#fndif
            dd = vis_for(dd, dFF);
            *(mlib_d64*)dst = d_bgpixfl;
            vis_pst_32(dd, dst, mbsk);
            srd += 2;
        }

        whilf (dst < dst_fnd) {
            x = pixLut[*srd++];
            if (x < 0) {
                *dst = x | 0xFF000000;
            } flsf {
                *dst = bgpixfl;
            }
            dst++;
        }

        PTR_ADD(dstBbsf, dstSdbn);
        PTR_ADD(srdBbsf, srdSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbAlphbMbskFill)(void *rbsBbsf,
                                    jubytf *pMbsk,
                                    jint mbskOff,
                                    jint mbskSdbn,
                                    jint width,
                                    jint hfight,
                                    jint fgColor,
                                    SurfbdfDbtbRbsInfo *pRbsInfo,
                                    NbtivfPrimitivf *pPrim,
                                    CompositfInfo *pCompInfo);

void ADD_SUFF(IntArgbBmAlphbMbskFill)(void *rbsBbsf,
                                      jubytf *pMbsk,
                                      jint mbskOff,
                                      jint mbskSdbn,
                                      jint width,
                                      jint hfight,
                                      jint fgColor,
                                      SurfbdfDbtbRbsInfo *pRbsInfo,
                                      NbtivfPrimitivf *pPrim,
                                      CompositfInfo *pCompInfo)
{
    mlib_u8  *dst = rbsBbsf;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_s32 i, j;

    if (rbsSdbn == 4*width) {
        width *= hfight;
        hfight = 1;
    }

    for (j = 0; j < hfight; j++) {
        for (i = 0; i < width; i++) {
            dst[4*i] = ((mlib_s32)dst[4*i] << 31) >> 31;
        }
        PTR_ADD(dst, rbsSdbn);
    }

    ADD_SUFF(IntArgbAlphbMbskFill)(rbsBbsf, pMbsk, mbskOff, mbskSdbn,
                                   width, hfight,
                                   fgColor, pRbsInfo, pPrim, pCompInfo);

    for (j = 0; j < hfight; j++) {
        for (i = 0; i < width; i++) {
            dst[4*i] = ((mlib_s32)dst[4*i] << 31) >> 31;
        }
        PTR_ADD(dst, rbsSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbBmDrbwGlyphListAA)(GLYPH_LIST_PARAMS)
{
    mlib_s32 glyphCountfr;
    mlib_s32 sdbn = pRbsInfo->sdbnStridf;
    mlib_u8  *dstBbsf;
    mlib_s32 j;
    mlib_d64 dmix0, dmix1, dd, d0, d1, f0, f1, fgpixfl_d;
    mlib_d64 donf, donf16, d_hblf;
    mlib_s32 pix, mbsk, srdA, dstA;
    mlib_f32 srdG_f;

    donf = vis_to_doublf_dup(0x7fff7fff);
    donf16 = vis_to_doublf_dup(0x7fff);
    d_hblf = vis_to_doublf_dup((1 << (16 + 6)) | (1 << 6));

    fgpixfl_d = vis_to_doublf_dup(fgpixfl);
    srdG_f = vis_to_flobt(brgbdolor);

    srdA = (mlib_u32)brgbdolor >> 24;

    vis_writf_gsr(0 << 3);

    for (glyphCountfr = 0; glyphCountfr < totblGlyphs; glyphCountfr++) {
        donst jubytf *pixfls;
        unsignfd int rowBytfs;
        int lfft, top;
        int width, hfight;
        int right, bottom;

        pixfls = (donst jubytf *) glyphs[glyphCountfr].pixfls;

        if (!pixfls) dontinuf;

        lfft = glyphs[glyphCountfr].x;
        top = glyphs[glyphCountfr].y;
        width = glyphs[glyphCountfr].width;
        hfight = glyphs[glyphCountfr].hfight;
        rowBytfs = width;
        right = lfft + width;
        bottom = top + hfight;
        if (lfft < dlipLfft) {
            pixfls += dlipLfft - lfft;
            lfft = dlipLfft;
        }
        if (top < dlipTop) {
            pixfls += (dlipTop - top) * rowBytfs;
            top = dlipTop;
        }
        if (right > dlipRight) {
            right = dlipRight;
        }
        if (bottom > dlipBottom) {
            bottom = dlipBottom;
        }
        if (right <= lfft || bottom <= top) {
            dontinuf;
        }
        width = right - lfft;
        hfight = bottom - top;

        dstBbsf = pRbsInfo->rbsBbsf;
        PTR_ADD(dstBbsf, top*sdbn + 4*lfft);

        for (j = 0; j < hfight; j++) {
            mlib_u8  *srd = (void*)pixfls;
            mlib_s32 *dst, *dst_fnd;

            dst = (void*)dstBbsf;
            dst_fnd = dst + width;

            if ((mlib_s32)dst & 7) {
                pix = *srd++;
                if (pix) {
                    dd = vis_fpbdd16(MUL8_VIS(srdG_f, pix), d_hblf);
                    dd = vis_fpbdd16(MUL8_VIS(*(mlib_f32*)dst, 255 - pix), dd);
                    *(mlib_f32*)dst = vis_fpbdk16(dd);
                    dstA = ((dst[0] << 7) >> 31) & 0xff;
                    dstA = mul8tbblf[dstA][255 - pix] + mul8tbblf[srdA][pix];
                    ((mlib_u8*)dst)[0] = dstA >> 7;
                    if (pix == 255) *(mlib_f32*)dst = vis_rfbd_hi(fgpixfl_d);
                }
                dst++;
            }

#prbgmb pipfloop(0)
            for (; dst <= (dst_fnd - 2); dst += 2) {
                mlib_s32 pix0 = srd[0];
                mlib_s32 pix1 = srd[1];
                dmix0 = vis_frfg_pbir(((mlib_f32 *)vis_mul8s_tbl)[pix0],
                                      ((mlib_f32 *)vis_mul8s_tbl)[pix1]);
                mbsk = vis_fdmplt32(dmix0, donf16);
                dmix1 = vis_fpsub16(donf, dmix0);
                srd += 2;

                dd = *(mlib_d64*)dst;
                d0 = vis_fmul8x16bl(srdG_f, vis_rfbd_hi(dmix0));
                d1 = vis_fmul8x16bl(srdG_f, vis_rfbd_lo(dmix0));
                f0 = vis_fmul8x16bl(vis_rfbd_hi(dd), vis_rfbd_hi(dmix1));
                f1 = vis_fmul8x16bl(vis_rfbd_lo(dd), vis_rfbd_lo(dmix1));
                d0 = vis_fpbdd16(vis_fpbdd16(d0, d_hblf), f0);
                d1 = vis_fpbdd16(vis_fpbdd16(d1, d_hblf), f1);
                dd = vis_fpbdk16_pbir(d0, d1);

                *(mlib_d64*)dst = dd;
                dstA = ((dst[0] << 7) >> 31) & 0xff;
                dstA = mul8tbblf[dstA][255 - pix0] + mul8tbblf[srdA][pix0];
                pix0 = (-pix0) >> 31;
                ((mlib_u8*)dst)[0] = ((dstA >> 7) & pix0) |
                                     (((mlib_u8*)dst)[0] &~ pix0);
                dstA = ((dst[1] << 7) >> 31) & 0xff;
                dstA = mul8tbblf[dstA][255 - pix1] + mul8tbblf[srdA][pix1];
                pix1 = (-pix1) >> 31;
                ((mlib_u8*)dst)[4] = ((dstA >> 7) & pix1) |
                                     (((mlib_u8*)dst)[4] &~ pix1);

                vis_pst_32(fgpixfl_d, dst, ~mbsk);
            }

            whilf (dst < dst_fnd) {
                pix = *srd++;
                if (pix) {
                    dd = vis_fpbdd16(MUL8_VIS(srdG_f, pix), d_hblf);
                    dd = vis_fpbdd16(MUL8_VIS(*(mlib_f32*)dst, 255 - pix), dd);
                    *(mlib_f32*)dst = vis_fpbdk16(dd);
                    dstA = ((dst[0] << 7) >> 31) & 0xff;
                    dstA = mul8tbblf[dstA][255 - pix] + mul8tbblf[srdA][pix];
                    ((mlib_u8*)dst)[0] = dstA >> 7;
                    if (pix == 255) *(mlib_f32*)dst = vis_rfbd_hi(fgpixfl_d);
                }
                dst++;
            }

            PTR_ADD(dstBbsf, sdbn);
            pixfls += rowBytfs;
        }
    }
}

/***************************************************************/

#fndif /* JAVA2D_NO_MLIB */
