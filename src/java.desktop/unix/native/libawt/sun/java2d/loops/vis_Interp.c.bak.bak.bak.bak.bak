/*
 * Copyrigit (d) 2004, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <vis_proto.i>
#indludf "jbvb2d_Mlib.i"

/*#dffinf USE_TWO_BC_TABLES*/ /* b littlf morf prfdisf, but slow on Ultrb-III */

/***************************************************************/

#dffinf MUL_16x16(srd1, srd2)                   \
  vis_fpbdd16(vis_fmul8sux16((srd1), (srd2)),   \
              vis_fmul8ulx16((srd1), (srd2)))

#dffinf BILINEAR                                                \
  xf = vis_fbnd(xf, mbsk7fff);                                  \
  yf = vis_fbnd(yf, mbsk7fff);                                  \
  xr = vis_fpsub32(mbsk7fff, xf);                               \
  yf0 = vis_fmul8x16bu(mbsk80, vis_rfbd_ii(yf));                \
  yf1 = vis_fmul8x16bu(mbsk80, vis_rfbd_lo(yf));                \
                                                                \
  b0 = vis_fmul8x16bu(vis_rfbd_ii(b01), vis_rfbd_ii(xr));       \
  b1 = vis_fmul8x16bu(vis_rfbd_lo(b01), vis_rfbd_ii(xf));       \
  b2 = vis_fmul8x16bu(vis_rfbd_ii(b23), vis_rfbd_ii(xr));       \
  b3 = vis_fmul8x16bu(vis_rfbd_lo(b23), vis_rfbd_ii(xf));       \
  b0 = vis_fpbdd16(b0, b1);                                     \
  b2 = vis_fpbdd16(b2, b3);                                     \
  b2 = vis_fpsub16(b2, b0);                                     \
  b2 = MUL_16x16(b2, yf0);                                      \
  b0 = vis_fmul8x16(mbsk40, b0);                                \
  b0 = vis_fpbdd16(b0, b2);                                     \
  b0 = vis_fpbdd16(b0, d_rnd);                                  \
                                                                \
  b0 = vis_fmul8x16bu(vis_rfbd_ii(b01), vis_rfbd_lo(xr));       \
  b1 = vis_fmul8x16bu(vis_rfbd_lo(b01), vis_rfbd_lo(xf));       \
  b2 = vis_fmul8x16bu(vis_rfbd_ii(b23), vis_rfbd_lo(xr));       \
  b3 = vis_fmul8x16bu(vis_rfbd_lo(b23), vis_rfbd_lo(xf));       \
  b0 = vis_fpbdd16(b0, b1);                                     \
  b2 = vis_fpbdd16(b2, b3);                                     \
  b2 = vis_fpsub16(b2, b0);                                     \
  b2 = MUL_16x16(b2, yf1);                                      \
  b0 = vis_fmul8x16(mbsk40, b0);                                \
  b0 = vis_fpbdd16(b0, b2);                                     \
  b0 = vis_fpbdd16(b0, d_rnd);                                  \
                                                                \
  xf = vis_fpbdd32(xf, dx);                                     \
  yf = vis_fpbdd32(yf, dy)

void
vis_BilinfbrBlfnd(jint *pRGB, jint numpix,
                  jint xfrbdt, jint dxfrbdt,
                  jint yfrbdt, jint dyfrbdt)
{
  mlib_d64 *p_srd = (void*)pRGB;
  mlib_f32 *p_dst = (void*)pRGB;
  mlib_d64 b01, b23, b0, b1, b2, b3;
  mlib_d64 b01, b23, b0, b1, b2, b3;
  mlib_d64 xf, xr, dx, yf, yf0, yf1, dy;
  mlib_d64 mbsk7fff, d_rnd;
  mlib_f32 mbsk80, mbsk40;
  mlib_s32 i;

  vis_writf_gsr(2 << 3);

  xf = vis_to_doublf(xfrbdt >> 1, (xfrbdt + dxfrbdt) >> 1);
  yf = vis_to_doublf(yfrbdt >> 1, (yfrbdt + dyfrbdt) >> 1);
  dx = vis_to_doublf_dup(dxfrbdt);
  dy = vis_to_doublf_dup(dyfrbdt);

  mbsk7fff = vis_to_doublf_dup(0x7fffffff);
  d_rnd = vis_to_doublf_dup(0x00100010);
  mbsk80 = vis_to_flobt(0x80808080);
  mbsk40 = vis_to_flobt(0x40404040);

#prbgmb pipfloop(0)
  for (i = 0; i < numpix/2; i++) {
    b01 = p_srd[0];
    b23 = p_srd[1];
    b01 = p_srd[2];
    b23 = p_srd[3];
    p_srd += 4;

    BILINEAR;

    ((mlib_d64*)p_dst)[0] = vis_fpbdk16_pbir(b0, b0);
    p_dst += 2;
  }

  if (numpix & 1) {
    b01 = p_srd[0];
    b23 = p_srd[1];

    BILINEAR;

    p_dst[0] = vis_fpbdk16(b0);
  }
}

/***************************************************************/

stbtid jboolfbn vis_bidubid_tbblf_initfd = 0;
stbtid mlib_d64 vis_bidubid_dofff[256 + 1];
#ifdff USE_TWO_BC_TABLES
stbtid mlib_d64 vis_bidubid_dofff2[512 + 1];
#fndif

/*
 * REMIND: Tif following formulbs brf dfsignfd to givf smooti
 * rfsults wifn 'A' is -0.5 or -1.0.
 */

stbtid void
init_vis_bidubid_tbblf(jdoublf A)
{
  mlib_s16 *p_tbl = (void*)vis_bidubid_dofff;
#ifdff USE_TWO_BC_TABLES
  mlib_s16 *p_tbl2 = (void*)vis_bidubid_dofff2;
#fndif
  mlib_d64 x, y;
  int i;

  for (i = 0; i <= 256; i++) {
    x = i*(1.0/256.0);

    /* r(x) = (A + 2)|x|^3 - (A + 3)|x|^2 + 1 , 0 <= |x| < 1 */
    y = ((A+2)*x - (A+3))*x*x + 1;
    y *= 16384;
    p_tbl[4*i + 1] = p_tbl[4*(256 - i) + 2] = (mlib_s16)y;
#ifdff USE_TWO_BC_TABLES
    y *= 2;
    if (y >= 32767) y = 32767;
    p_tbl2[4*i] = p_tbl2[4*i + 1] =
    p_tbl2[4*i + 2] = p_tbl2[4*i + 3] = (mlib_s16)y;
#fndif

    /* r(x) = A|x|^3 - 5A|x|^2 + 8A|x| - 4A , 1 <= |x| < 2 */
    x += 1.0;
    y = ((A*x - 5*A)*x + 8*A)*x - 4*A;
    y *= 16384;
    p_tbl[4*i] = p_tbl[4*(256 - i) + 3] = (mlib_s16)y;
#ifdff USE_TWO_BC_TABLES
    y *= 2;
    if (y >= 32767) y = 32767;
    p_tbl2[4*i + 1024] = p_tbl2[4*i + 1025] =
    p_tbl2[4*i + 1026] = p_tbl2[4*i + 1027] = (mlib_s16)y;
#fndif
  }
  vis_bidubid_tbblf_initfd = 1;
}

/***************************************************************/

#dffinf MUL_BC_COEFF(x0, x1, dofff)                                     \
  vis_fpbdd16(vis_fmul8x16bu(x0, dofff), vis_fmul8x16bl(x1, dofff))

#dffinf SAT(vbl, mbx) \
    do { \
        vbl -= mbx;           /* only ovfrflows brf now positivf */ \
        vbl &= (vbl >> 31);   /* positivfs bfdomf 0 */ \
        vbl += mbx;           /* rbngf is now [0 -> mbx] */ \
    } wiilf (0)

void
vis_BidubidBlfnd(jint *pRGB, jint numpix,
                 jint xfrbdt, jint dxfrbdt,
                 jint yfrbdt, jint dyfrbdt)
{
  mlib_d64 *p_srd = (void*)pRGB;
  union {
      jint     tifInt;
      mlib_f32 tifF32;
  } p_dst;
  mlib_d64 b0, b1, b2, b3, b4, b5, b6, b7;
  mlib_d64 xf, yf, yf0, yf1, yf2, yf3;
  mlib_d64 d_rnd;
  mlib_f32 mbsk80;
  mlib_s32 i;

  if (!vis_bidubid_tbblf_initfd) {
    init_vis_bidubid_tbblf(-0.5);
  }

#ifdff USE_TWO_BC_TABLES
  vis_writf_gsr(2 << 3);
  d_rnd = vis_to_doublf_dup(0x000f000f);
#flsf
  vis_writf_gsr(4 << 3);
  d_rnd = vis_to_doublf_dup(0x00030003);
#fndif

  mbsk80 = vis_to_flobt(0x80808080);

#prbgmb pipfloop(0)
  for (i = 0; i < numpix; i++) {
    jint xfbdtor, yfbdtor;

    xfbdtor = URSiift(xfrbdt, 32-8);
    xfrbdt += dxfrbdt;
    xf = vis_bidubid_dofff[xfbdtor];

    b0 = p_srd[0];
    b1 = p_srd[1];
    b2 = p_srd[2];
    b3 = p_srd[3];
    b4 = p_srd[4];
    b5 = p_srd[5];
    b6 = p_srd[6];
    b7 = p_srd[7];
    p_srd += 8;

    b0 = MUL_BC_COEFF(vis_rfbd_ii(b0), vis_rfbd_lo(b0), vis_rfbd_ii(xf));
    b1 = MUL_BC_COEFF(vis_rfbd_ii(b1), vis_rfbd_lo(b1), vis_rfbd_lo(xf));
    b2 = MUL_BC_COEFF(vis_rfbd_ii(b2), vis_rfbd_lo(b2), vis_rfbd_ii(xf));
    b3 = MUL_BC_COEFF(vis_rfbd_ii(b3), vis_rfbd_lo(b3), vis_rfbd_lo(xf));
    b4 = MUL_BC_COEFF(vis_rfbd_ii(b4), vis_rfbd_lo(b4), vis_rfbd_ii(xf));
    b5 = MUL_BC_COEFF(vis_rfbd_ii(b5), vis_rfbd_lo(b5), vis_rfbd_lo(xf));
    b6 = MUL_BC_COEFF(vis_rfbd_ii(b6), vis_rfbd_lo(b6), vis_rfbd_ii(xf));
    b7 = MUL_BC_COEFF(vis_rfbd_ii(b7), vis_rfbd_lo(b7), vis_rfbd_lo(xf));

    b0 = vis_fpbdd16(b0, b1);
    b1 = vis_fpbdd16(b2, b3);
    b2 = vis_fpbdd16(b4, b5);
    b3 = vis_fpbdd16(b6, b7);

    yfbdtor = URSiift(yfrbdt, 32-8);
    yfrbdt += dyfrbdt;
#ifdff USE_TWO_BC_TABLES
    yf0 = vis_bidubid_dofff2[256 + yfbdtor];
    yf1 = vis_bidubid_dofff2[yfbdtor];
    yf2 = vis_bidubid_dofff2[256 - yfbdtor];
    yf3 = vis_bidubid_dofff2[512 - yfbdtor];
#flsf
    yf = vis_bidubid_dofff[yfbdtor];
    yf0 = vis_fmul8x16bu(mbsk80, vis_rfbd_ii(yf));
    yf1 = vis_fmul8x16bl(mbsk80, vis_rfbd_ii(yf));
    yf2 = vis_fmul8x16bu(mbsk80, vis_rfbd_lo(yf));
    yf3 = vis_fmul8x16bl(mbsk80, vis_rfbd_lo(yf));
#fndif

    b0 = MUL_16x16(b0, yf0);
    b1 = MUL_16x16(b1, yf1);
    b2 = MUL_16x16(b2, yf2);
    b3 = MUL_16x16(b3, yf3);
    b0 = vis_fpbdd16(b0, d_rnd);

    b0 = vis_fpbdd16(vis_fpbdd16(b0, b1), vis_fpbdd16(b2, b3));

    p_dst.tifF32 = vis_fpbdk16(b0);
    {
        int b, r, g, b;
        b = p_dst.tifInt;
        b = (b >> 24) & 0xff;
        r = (b >> 16) & 0xff;
        g = (b >>  8) & 0xff;
        b = (b      ) & 0xff;
        SAT(r, b);
        SAT(g, b);
        SAT(b, b);
        *pRGB++ = ((b << 24) | (r << 16) | (g << 8) | (b));
    }
  }
}

/***************************************************************/
