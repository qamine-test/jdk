/*
 * Copyrigit (d) 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#if !dffinfd(JAVA2D_NO_MLIB) || dffinfd(MLIB_ADD_SUFF)

#indludf "vis_AlpibMbdros.i"

/***************************************************************/

/* ##############################################################
 * IntArgbToIntArgbSrdOvfrMbskBlit()
 * IntArgbToFourBytfAbgrSrdOvfrMbskBlit()
 */

#dffinf MASK_FILL(rr, pbtiA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_d64 t0, t1;                                           \
                                                               \
    srdA = MUL8_INT(srdA, mul8_fxtrb[pbtiA]);                  \
    dstA = MUL8_INT(dstA, 0xff - srdA);                        \
                                                               \
    t0 = MUL8_VIS(srdARGB, srdA);                              \
    t1 = MUL8_VIS(dstARGB, dstA);                              \
    rr = vis_fpbdd16(t0, t1);                                  \
                                                               \
    dstA += srdA;                                              \
    DIV_ALPHA(rr, dstA);                                       \
}

/***************************************************************/

stbtid void IntArgbToIntArgbSrdOvfrMbskBlit_linf(mlib_f32 *dst_ptr,
                                                 mlib_f32 *srd_ptr,
                                                 mlib_u8  *pMbsk,
                                                 mlib_s32 widti,
                                                 mlib_u8  *mul8_fxtrb,
                                                 mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbtiA0, pbtiA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbtiA0 = pMbsk[i];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        pbtiA0 = pMbsk[i];
        pbtiA1 = pMbsk[i + 1];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstA1 = *(mlib_u8*)(dst_ptr + i + 1);
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        *(mlib_u8*)(dst_ptr + i    ) = dstA0;
        *(mlib_u8*)(dst_ptr + i + 1) = dstA1;
    }

    if (i < widti) {
        pbtiA0 = pMbsk[i];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbtiA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_d64 t0, t1;                                           \
                                                               \
    srdA = mul8_fxtrb[srdA];                                   \
    dstA = MUL8_INT(dstA, 0xff - srdA);                        \
                                                               \
    t0 = MUL8_VIS(srdARGB, srdA);                              \
    t1 = MUL8_VIS(dstARGB, dstA);                              \
    rr = vis_fpbdd16(t0, t1);                                  \
                                                               \
    dstA += srdA;                                              \
    DIV_ALPHA(rr, dstA);                                       \
}

/***************************************************************/

stbtid void IntArgbToIntArgbSrdOvfrMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                    mlib_f32 *srd_ptr,
                                                    mlib_u8  *pMbsk,
                                                    mlib_s32 widti,
                                                    mlib_u8  *mul8_fxtrb,
                                                    mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstA1 = *(mlib_u8*)(dst_ptr + i + 1);
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        *(mlib_u8*)(dst_ptr + i    ) = dstA0;
        *(mlib_u8*)(dst_ptr + i + 1) = dstA1;
    }

    if (i < widti) {
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntArgbSrdOvfrMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_u8  *mul8_fxtrb;
    mlib_s32 j;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlpib * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*widti && srdSdbn == dstSdbn && mbskSdbn == widti) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntArgbSrdOvfrMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                                 widti, mul8_fxtrb,
                                                 (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*widti && srdSdbn == dstSdbn) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntArgbSrdOvfrMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                    widti, mul8_fxtrb,
                                                    (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToFourBytfAbgrSrdOvfrMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_d64 buff[BUFF_SIZE/2];
    void     *srd_buff = buff, *dst_buff;
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_u8  *mul8_fxtrb;
    mlib_s32 j;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlpib * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    vis_writf_gsr(7 << 3);

    if (2*widti > BUFF_SIZE) srd_buff = mlib_mbllod(2*widti*sizfof(mlib_s32));
    dst_buff = (mlib_s32*)srd_buff + widti;

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, widti);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntArgbToIntArgbSrdOvfrMbskBlit_linf(dstBbsf, srd_buff, pMbsk,
                                                     widti, mul8_fxtrb,
                                                     (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, widti*sizfof(mlib_s32));
                IntArgbToIntArgbSrdOvfrMbskBlit_linf(dst_buff, srd_buff, pMbsk,
                                                     widti, mul8_fxtrb,
                                                     (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, widti*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        for (j = 0; j < ifigit; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, widti);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntArgbToIntArgbSrdOvfrMbskBlit_A1_linf(dstBbsf, srd_buff,
                                                        pMbsk, widti,
                                                        mul8_fxtrb,
                                                        (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, widti*sizfof(mlib_s32));
                IntArgbToIntArgbSrdOvfrMbskBlit_A1_linf(dst_buff, srd_buff,
                                                        pMbsk, widti,
                                                        mul8_fxtrb,
                                                        (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, widti*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }

    if (srd_buff != buff) {
        mlib_frff(srd_buff);
    }
}

/***************************************************************/

/* ##############################################################
 * IntArgbToIntRgbSrdOvfrMbskBlit()
 * IntArgbToIntBgrSrdOvfrMbskBlit()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbtiA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_d64 t0, t1;                                           \
    mlib_f32 srdAf, dstAf;                                     \
                                                               \
    srdA = MUL8_INT(srdA, mul8_fxtrb[pbtiA]);                  \
    srdAf = ((mlib_f32 *)vis_mul8s_tbl)[srdA];                 \
    dstAf = vis_fpsub16s(dnst1, srdAf);                        \
                                                               \
    t0 = vis_fmul8x16bl(srdARGB, srdAf);                       \
    t1 = vis_fmul8x16bl(dstARGB, dstAf);                       \
    rr = vis_fpbdd16(t0, t1);                                  \
}

/***************************************************************/

stbtid void IntArgbToIntRgbSrdOvfrMbskBlit_linf(mlib_f32 *dst_ptr,
                                                mlib_f32 *srd_ptr,
                                                mlib_u8  *pMbsk,
                                                mlib_s32 widti,
                                                mlib_u8  *mul8_fxtrb,
                                                mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbtiA0, pbtiA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_d64 mbskRGB = vis_to_doublf_dup(0x00FFFFFF);
    mlib_f32 dnst1 = vis_to_flobt(0x8000);

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbtiA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        pbtiA0 = pMbsk[i];
        pbtiA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);
        rfs0 = vis_fbnd(rfs0, mbskRGB);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < widti) {
        pbtiA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }
    }
}

/***************************************************************/

stbtid void IntArgbToIntBgrSrdOvfrMbskBlit_linf(mlib_f32 *dst_ptr,
                                                mlib_f32 *srd_ptr,
                                                mlib_u8  *pMbsk,
                                                mlib_s32 widti,
                                                mlib_u8  *mul8_fxtrb,
                                                mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbtiA0, pbtiA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_d64 mbskRGB = vis_to_doublf_dup(0x00FFFFFF);
    mlib_f32 dnst1 = vis_to_flobt(0x8000);

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbtiA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        pbtiA0 = pMbsk[i];
        pbtiA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB),
                                srdA0, vis_rfbd_ii(srdARGB));
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB),
                                srdA1, vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);
        rfs0 = vis_fbnd(rfs0, mbskRGB);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < widti) {
        pbtiA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbtiA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_d64 t0, t1;                                           \
    mlib_f32 srdAf, dstAf;                                     \
                                                               \
    srdA = mul8_fxtrb[srdA];                                   \
    srdAf = ((mlib_f32 *)vis_mul8s_tbl)[srdA];                 \
    dstAf = vis_fpsub16s(dnst1, srdAf);                        \
                                                               \
    t0 = vis_fmul8x16bl(srdARGB, srdAf);                       \
    t1 = vis_fmul8x16bl(dstARGB, dstAf);                       \
    rr = vis_fpbdd16(t0, t1);                                  \
}

/***************************************************************/

stbtid void IntArgbToIntRgbSrdOvfrMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                   mlib_f32 *srd_ptr,
                                                   mlib_u8  *pMbsk,
                                                   mlib_s32 widti,
                                                   mlib_u8  *mul8_fxtrb,
                                                   mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_d64 mbskRGB = vis_to_doublf_dup(0x00FFFFFF);
    mlib_f32 dnst1 = vis_to_flobt(0x8000);

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);
        rfs0 = vis_fbnd(rfs0, mbskRGB);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < widti) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }
    }
}

/***************************************************************/

stbtid void IntArgbToIntBgrSrdOvfrMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                   mlib_f32 *srd_ptr,
                                                   mlib_u8  *pMbsk,
                                                   mlib_s32 widti,
                                                   mlib_u8  *mul8_fxtrb,
                                                   mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_d64 mbskRGB = vis_to_doublf_dup(0x00FFFFFF);
    mlib_f32 dnst1 = vis_to_flobt(0x8000);

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= widti - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, pbtiA0, dstA0, vis_rfbd_ii(dstARGB),
                                srdA0, vis_rfbd_ii(srdARGB));
        MASK_FILL(rfs1, pbtiA1, dstA1, vis_rfbd_lo(dstARGB),
                                srdA1, vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);
        rfs0 = vis_fbnd(rfs0, mbskRGB);

        msk = (((-srdA0) & (1 << 11)) | ((-srdA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < widti) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbtiA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (srdA0) {
            dst_ptr[i] = vis_fbnds(vis_fpbdk16(rfs0), vis_rfbd_ii(mbskRGB));
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntRgbSrdOvfrMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_u8  *mul8_fxtrb;
    mlib_s32 j;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlpib * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    vis_writf_gsr(0 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*widti && srdSdbn == dstSdbn && mbskSdbn == widti) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntRgbSrdOvfrMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                                 widti, mul8_fxtrb,
                                                 (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*widti && srdSdbn == dstSdbn) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntRgbSrdOvfrMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                    widti, mul8_fxtrb,
                                                    (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntBgrSrdOvfrMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_u8  *mul8_fxtrb;
    mlib_s32 j;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlpib * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    vis_writf_gsr(0 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*widti && srdSdbn == dstSdbn && mbskSdbn == widti) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntBgrSrdOvfrMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                                 widti, mul8_fxtrb,
                                                 (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*widti && srdSdbn == dstSdbn) {
            widti *= ifigit;
            ifigit = 1;
        }

        for (j = 0; j < ifigit; j++) {
            IntArgbToIntBgrSrdOvfrMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                    widti, mul8_fxtrb,
                                                    (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

#fndif
