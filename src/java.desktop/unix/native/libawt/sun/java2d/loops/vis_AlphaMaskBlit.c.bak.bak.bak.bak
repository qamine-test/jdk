/*
 * Copyright (d) 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#if !dffinfd(JAVA2D_NO_MLIB) || dffinfd(MLIB_ADD_SUFF)

#indludf "vis_AlphbMbdros.h"

/***************************************************************/

/* ##############################################################
 * IntArgbToIntArgbAlphbMbskBlit()
 * IntArgbToFourBytfAbgrAlphbMbskBlit()
 */

#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_s32 srdF, dstF;                                       \
                                                               \
    srdA = mul8_fxtrb[srdA];                                   \
                                                               \
    srdF = ((dstA & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;          \
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdF = MUL8_INT(pbthA, srdF);                              \
    dstF = MUL8_INT(pbthA, dstF) + (0xff - pbthA);             \
                                                               \
    srdA = MUL8_INT(srdF, srdA);                               \
    dstA = MUL8_INT(dstF, dstA);                               \
                                                               \
    BLEND_VIS(rr, dstARGB, srdARGB, dstA, srdA);               \
}

/***************************************************************/

stbtid void IntArgbToIntArgbAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                               mlib_f32 *srd_ptr,
                                               mlib_u8  *pMbsk,
                                               mlib_s32 width,
                                               mlib_s32 *log_vbl,
                                               mlib_u8  *mul8_fxtrb,
                                               mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_s32 SrdOpAnd = log_vbl[0];
    mlib_s32 SrdOpXor = log_vbl[1];
    mlib_s32 SrdOpAdd = log_vbl[2];
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            srdA0 = *(mlib_u8*)(srd_ptr + i);
            dstARGB0 = dst_ptr[i];
            srdARGB0 = srd_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstA1 = *(mlib_u8*)(dst_ptr + i + 1);
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-pbthA0) & (1 << 11)) | ((-pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        *(mlib_u8*)(dst_ptr + i    ) = dstA0;
        *(mlib_u8*)(dst_ptr + i + 1) = dstA1;
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            srdA0 = *(mlib_u8*)(srd_ptr + i);
            dstARGB0 = dst_ptr[i];
            srdARGB0 = srd_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_s32 srdF, dstF;                                       \
                                                               \
    srdA = mul8_fxtrb[srdA];                                   \
                                                               \
    srdF = ((dstA & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;          \
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdA = MUL8_INT(srdF, srdA);                               \
    dstA = MUL8_INT(dstF, dstA);                               \
                                                               \
    BLEND_VIS(rr, dstARGB, srdARGB, dstA, srdA);               \
}

/***************************************************************/

stbtid void IntArgbToIntArgbAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                  mlib_f32 *srd_ptr,
                                                  mlib_u8  *pMbsk,
                                                  mlib_s32 width,
                                                  mlib_s32 *log_vbl,
                                                  mlib_u8  *mul8_fxtrb,
                                                  mlib_u8  *mul8_tbl)
{
    mlib_s32 i;
    mlib_s32 dstA0, srdA0;
    mlib_d64 rfs0;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_s32 SrdOpAnd = log_vbl[0];
    mlib_s32 SrdOpXor = log_vbl[1];
    mlib_s32 SrdOpAdd = log_vbl[2];
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];

#prbgmb pipfloop(0)
    for (i = 0; i < width; i++) {
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        dst_ptr[i] = vis_fpbdk16(rfs0);
        *(mlib_u8*)(dst_ptr + i) = dstA0;
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntArgbAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[0] = SrdOpAnd;
    log_vbl[1] = SrdOpXor;
    log_vbl[2] = SrdOpAdd;
    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntArgbToIntArgbAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                               width, log_vbl, mul8_fxtrb,
                                               (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntArgbToIntArgbAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                  width, log_vbl, mul8_fxtrb,
                                                  (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToFourBytfAbgrAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_d64 buff[BUFF_SIZE/2];
    void     *srd_buff = buff, *dst_buff;
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[0] = SrdOpAnd;
    log_vbl[1] = SrdOpXor;
    log_vbl[2] = SrdOpAdd;
    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    vis_writf_gsr(7 << 3);

    if (2*width > BUFF_SIZE) srd_buff = mlib_mbllod(2*width*sizfof(mlib_s32));
    dst_buff = (mlib_s32*)srd_buff + width;

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        for (j = 0; j < hfight; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, width);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntArgbToIntArgbAlphbMbskBlit_linf(dstBbsf, srd_buff, pMbsk,
                                                   width, log_vbl, mul8_fxtrb,
                                                   (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, width*sizfof(mlib_s32));
                IntArgbToIntArgbAlphbMbskBlit_linf(dst_buff, srd_buff, pMbsk,
                                                   width, log_vbl, mul8_fxtrb,
                                                   (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, width*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        for (j = 0; j < hfight; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, width);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntArgbToIntArgbAlphbMbskBlit_A1_linf(dstBbsf, srd_buff,
                                                      pMbsk, width, log_vbl,
                                                      mul8_fxtrb,
                                                      (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, width*sizfof(mlib_s32));
                IntArgbToIntArgbAlphbMbskBlit_A1_linf(dst_buff, srd_buff,
                                                      pMbsk, width, log_vbl,
                                                      mul8_fxtrb,
                                                      (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, width*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }

    if (srd_buff != buff) {
        mlib_frff(srd_buff);
    }
}

/***************************************************************/

/* ##############################################################
 * IntArgbToIntRgbAlphbMbskBlit()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    mlib_s32 srdF, dstF;                                       \
                                                               \
    srdA = mul8_fxtrb[srdA];                                   \
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdF = mul8_srdF[pbthA];                                   \
    dstA = MUL8_INT(dstF, pbthA) + (0xff - pbthA);             \
                                                               \
    pbthA = dstA - 0xff - srdF;                                \
    /* (pbthA == 0) if (dstA == 0xFF && srdF == 0) */          \
                                                               \
    srdA = MUL8_INT(srdA, srdF);                               \
                                                               \
    BLEND_VIS_RGB(rr, dstARGB, srdARGB, dstA, srdA);           \
}

/***************************************************************/

stbtid void IntArgbToIntRgbAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                              mlib_f32 *srd_ptr,
                                              mlib_u8  *pMbsk,
                                              mlib_s32 width,
                                              mlib_s32 *log_vbl,
                                              mlib_u8  *mul8_fxtrb,
                                              mlib_u8  *mul8_srdF,
                                              mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    srdA = mul8_fxtrb[srdA];                                   \
    dstA = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdA = mul8_srdF[srdA];                                    \
                                                               \
    pbthA = dstA - srdF_255;                                   \
    /* (pbthA == 0) if (dstA == 0xFF && srdF == 0) */          \
                                                               \
    BLEND_VIS_RGB(rr, dstARGB, srdARGB, dstA, srdA);           \
}

/***************************************************************/

stbtid void IntArgbToIntRgbAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                 mlib_f32 *srd_ptr,
                                                 mlib_u8  *pMbsk,
                                                 mlib_s32 width,
                                                 mlib_s32 *log_vbl,
                                                 mlib_u8  *mul8_fxtrb,
                                                 mlib_u8  *mul8_srdF,
                                                 mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF_255 = mul8_srdF[0xff] + 0xff;

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntRgbAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA, srdF;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb, *mul8_srdF;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    srdF = ((0xff & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;

    mul8_srdF = mul8tbblf[srdF];

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntArgbToIntRgbAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                              width, log_vbl, mul8_fxtrb,
                                              mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntArgbToIntRgbAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                 width, log_vbl, mul8_fxtrb,
                                                 mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

/* ##############################################################
 * IntRgbToIntArgbAlphbMbskBlit()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdAX, srdARGB)    \
{                                                              \
    mlib_s32 pbthAx256 = pbthA << 8;                           \
    srdF = ((dstA & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;          \
                                                               \
    srdF = mul8_tbl[pbthAx256 + srdF];                         \
    dstFX = mul8_tbl[pbthAx256 + dstF] + (0xff - pbthA);       \
                                                               \
    srdAX = mul8_tbl[srdF + srdAx256];                         \
    dstA = mul8_tbl[dstFX + (dstA << 8)];                      \
                                                               \
    BLEND_VIS(rr, dstARGB, srdARGB, dstA, srdAX);              \
}

/***************************************************************/

stbtid void IntRgbToIntArgbAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                               mlib_f32 *srd_ptr,
                                               mlib_u8  *pMbsk,
                                               mlib_s32 width,
                                               mlib_s32 *log_vbl,
                                               mlib_u8  *mul8_fxtrb,
                                               mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_s32 SrdOpAnd = log_vbl[0];
    mlib_s32 SrdOpXor = log_vbl[1];
    mlib_s32 SrdOpAdd = log_vbl[2];
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF, dstF, dstFX, srdAx256;

    i = i0 = 0;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    srdAx256 = srdA << 8;
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            dstARGB0 = dst_ptr[i];
            srdARGB0 = srd_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstA1 = *(mlib_u8*)(dst_ptr + i + 1);
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-pbthA0) & (1 << 11)) | ((-pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        *(mlib_u8*)(dst_ptr + i    ) = dstA0;
        *(mlib_u8*)(dst_ptr + i + 1) = dstA1;
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            dstARGB0 = dst_ptr[i];
            srdARGB0 = srd_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
{                                                              \
    srdF = ((dstA & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;          \
                                                               \
    srdA = mul8_tbl[srdF + srdAx256];                          \
    dstA = mul8_tbl[dstF + (dstA << 8)];                       \
                                                               \
    BLEND_VIS(rr, dstARGB, srdARGB, dstA, srdA);               \
}

/***************************************************************/

stbtid void IntRgbToIntArgbAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                  mlib_f32 *srd_ptr,
                                                  mlib_u8  *pMbsk,
                                                  mlib_s32 width,
                                                  mlib_s32 *log_vbl,
                                                  mlib_u8  *mul8_fxtrb,
                                                  mlib_u8  *mul8_tbl)
{
    mlib_s32 i;
    mlib_s32 dstA0, srdA, srdA0;
    mlib_d64 rfs0;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_s32 SrdOpAnd = log_vbl[0];
    mlib_s32 SrdOpXor = log_vbl[1];
    mlib_s32 SrdOpAdd = log_vbl[2];
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF, dstF, srdAx256;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    srdAx256 = srdA << 8;
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;

#prbgmb pipfloop(0)
    for (i = 0; i < width; i++) {
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        dst_ptr[i] = vis_fpbdk16(rfs0);
        *(mlib_u8*)(dst_ptr + i) = dstA0;
    }
}

/***************************************************************/

void ADD_SUFF(IntRgbToIntArgbAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[0] = SrdOpAnd;
    log_vbl[1] = SrdOpXor;
    log_vbl[2] = SrdOpAdd;
    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntArgbAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                               width, log_vbl, mul8_fxtrb,
                                               (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntArgbAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                  width, log_vbl, mul8_fxtrb,
                                                  (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}


/***************************************************************/

void ADD_SUFF(IntRgbToFourBytfAbgrAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_d64 buff[BUFF_SIZE/2];
    void     *srd_buff = buff, *dst_buff;
    mlib_s32 fxtrbA;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[0] = SrdOpAnd;
    log_vbl[1] = SrdOpXor;
    log_vbl[2] = SrdOpAdd;
    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    vis_writf_gsr(7 << 3);

    if (2*width > BUFF_SIZE) srd_buff = mlib_mbllod(2*width*sizfof(mlib_s32));
    dst_buff = (mlib_s32*)srd_buff + width;

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        for (j = 0; j < hfight; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, width);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntRgbToIntArgbAlphbMbskBlit_linf(dstBbsf, srd_buff, pMbsk,
                                                  width, log_vbl, mul8_fxtrb,
                                                  (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, width*sizfof(mlib_s32));
                IntRgbToIntArgbAlphbMbskBlit_linf(dst_buff, srd_buff, pMbsk,
                                                  width, log_vbl, mul8_fxtrb,
                                                  (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, width*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        for (j = 0; j < hfight; j++) {
            IntArgbToIntAbgrConvfrt_linf(srdBbsf, srd_buff, width);
            if (!((mlib_s32)dstBbsf & 3)) {
                IntRgbToIntArgbAlphbMbskBlit_A1_linf(dstBbsf, srd_buff, pMbsk,
                                                     width, log_vbl,
                                                     mul8_fxtrb,
                                                     (void*)mul8tbblf);
            } flsf {
                mlib_ImbgfCopy_nb(dstBbsf, dst_buff, width*sizfof(mlib_s32));
                IntRgbToIntArgbAlphbMbskBlit_A1_linf(dst_buff, srd_buff, pMbsk,
                                                     width, log_vbl,
                                                     mul8_fxtrb,
                                                     (void*)mul8tbblf);
                mlib_ImbgfCopy_nb(dst_buff, dstBbsf, width*sizfof(mlib_s32));
            }

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }

    if (srd_buff != buff) {
        mlib_frff(srd_buff);
    }
}

/***************************************************************/

/* ##############################################################
 * IntArgbToIntBgrAlphbMbskBlit()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
    srdA = mul8_fxtrb[srdA];                                   \
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdF = mul8_srdF[pbthA];                                   \
    dstA = mul8_tbl[(pbthA << 8) + dstF] + (0xff - pbthA);     \
                                                               \
    pbthA = dstA - 0xff - srdF;                                \
    /* (pbthA == 0) if (dstA == 0xFF && srdF == 0) */          \
                                                               \
    srdA = MUL8_INT(srdA, srdF);                               \
                                                               \
    BLEND_VIS_RGB(rr, dstARGB, srdARGB, dstA, srdA)

/***************************************************************/

stbtid void IntArgbToIntBgrAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                              mlib_f32 *srd_ptr,
                                              mlib_u8  *pMbsk,
                                              mlib_s32 width,
                                              mlib_s32 *log_vbl,
                                              mlib_u8  *mul8_fxtrb,
                                              mlib_u8  *mul8_srdF,
                                              mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF, dstF;

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB),
                                srdA0, vis_rfbd_hi(srdARGB));
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB),
                                srdA1, vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdA, srdARGB)     \
    srdA = mul8_fxtrb[srdA];                                   \
    dstA = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;          \
                                                               \
    srdA = mul8_srdF[srdA];                                    \
                                                               \
    pbthA = dstA - srdF_255;                                   \
    /* (pbthA == 0) if (dstA == 0xFF && srdF == 0) */          \
                                                               \
    BLEND_VIS(rr, dstARGB, srdARGB, dstA, srdA)

/***************************************************************/

stbtid void IntArgbToIntBgrAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                 mlib_f32 *srd_ptr,
                                                 mlib_u8  *pMbsk,
                                                 mlib_s32 width,
                                                 mlib_s32 *log_vbl,
                                                 mlib_u8  *mul8_fxtrb,
                                                 mlib_u8  *mul8_srdF,
                                                 mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF_255 = mul8_srdF[0xff] + 0xff;

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        srdA1 = *(mlib_u8*)(srd_ptr + i + 1);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB),
                                srdA0, vis_rfbd_hi(srdARGB));
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB),
                                srdA1, vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        srdA0 = *(mlib_u8*)(srd_ptr + i);
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbToIntBgrAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA, srdF;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb, *mul8_srdF;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    srdF = ((0xff & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;

    mul8_srdF = mul8tbblf[srdF];

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        pMbsk += mbskOff;

        for (j = 0; j < hfight; j++) {
            IntArgbToIntBgrAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                              width, log_vbl, mul8_fxtrb,
                                              mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntArgbToIntBgrAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                 width, log_vbl, mul8_fxtrb,
                                                 mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

/* ##############################################################
 * IntRgbToIntRgbAlphbMbskBlit()
 * IntRgbToIntBgrAlphbMbskBlit()
 * IntBgrToIntBgrAlphbMbskBlit()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB, srdAX, srdARGB)    \
    srdF = mul8_srdF[pbthA];                                   \
    dstA = mul8_tbl[(pbthA << 8) + dstF] + (0xff - pbthA);     \
    pbthA = dstA - 0xff - srdF;                                \
    srdAX = mul8_tbl[srdA + (srdF << 8)];                      \
                                                               \
    BLEND_VIS_RGB(rr, dstARGB, srdARGB, dstA, srdAX)

/***************************************************************/

stbtid void IntRgbToIntRgbAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                              mlib_f32 *srd_ptr,
                                              mlib_u8  *pMbsk,
                                              mlib_s32 width,
                                              mlib_s32 *log_vbl,
                                              mlib_u8  *mul8_fxtrb,
                                              mlib_u8  *mul8_srdF,
                                              mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF, dstF;

    i = i0 = 0;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB), srdA0, srdARGB0);
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB), srdA1, srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

stbtid void IntRgbToIntBgrAlphbMbskBlit_linf(mlib_f32 *dst_ptr,
                                              mlib_f32 *srd_ptr,
                                              mlib_u8  *pMbsk,
                                              mlib_s32 width,
                                              mlib_s32 *log_vbl,
                                              mlib_u8  *mul8_fxtrb,
                                              mlib_u8  *mul8_srdF,
                                              mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, srdA, srdA0, srdA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF, dstF;

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    dstF = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB),
                                srdA0, vis_rfbd_hi(srdARGB));
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB),
                                srdA1, vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA0) & (1 << 11)) | ((pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0, srdA0, srdARGB0);
        if (pbthA0) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

#undff  MASK_FILL
#dffinf MASK_FILL(rr, dstARGB, srdARGB)                \
    t0 = vis_fmul8x16bl(srdARGB, srdA_mul);            \
    t1 = vis_fmul8x16bl(dstARGB, dstA_mul);            \
    rr = vis_fpbdd16(t0, t1);                          \
    rr = vis_fpbdd16(vis_fmul8sux16(rr, dstA_div),     \
                     vis_fmul8ulx16(rr, dstA_div))

/***************************************************************/

stbtid void IntRgbToIntRgbAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                 mlib_f32 *srd_ptr,
                                                 mlib_u8  *pMbsk,
                                                 mlib_s32 width,
                                                 mlib_s32 *log_vbl,
                                                 mlib_u8  *mul8_fxtrb,
                                                 mlib_u8  *mul8_srdF,
                                                 mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA, dstA, srdA, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0, srdARGB0, srdARGB1, srdA_mul, dstA_mul;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF_255 = mul8_srdF[0xff] + 0xff;
    mlib_d64 t0, t1, dstA_div;

    i = i0 = 0;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    dstA = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;
    srdA = mul8_srdF[srdA];
    pbthA = dstA - srdF_255;
    srdA_mul = ((mlib_f32*)vis_mul8s_tbl)[srdA];
    dstA_mul = ((mlib_f32*)vis_mul8s_tbl)[dstA];
    dstA += srdA;
    dstA_div = ((mlib_d64*)vis_div8_tbl)[dstA];

    if ((mlib_s32)dst_ptr & 7) {
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, dstARGB0, srdARGB0);
        if (pbthA) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdARGB0 = srd_ptr[i];
        srdARGB1 = srd_ptr[i + 1];

        MASK_FILL(rfs0, vis_rfbd_hi(dstARGB), srdARGB0);
        MASK_FILL(rfs1, vis_rfbd_lo(dstARGB), srdARGB1);

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA) & (1 << 11)) | ((pbthA) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        MASK_FILL(rfs0, dstARGB0, srdARGB0);
        if (pbthA) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

stbtid void IntRgbToIntBgrAlphbMbskBlit_A1_linf(mlib_f32 *dst_ptr,
                                                 mlib_f32 *srd_ptr,
                                                 mlib_u8  *pMbsk,
                                                 mlib_s32 width,
                                                 mlib_s32 *log_vbl,
                                                 mlib_u8  *mul8_fxtrb,
                                                 mlib_u8  *mul8_srdF,
                                                 mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA, dstA, srdA, msk;
    mlib_d64 rfs0, rfs1, dstARGB, srdARGB;
    mlib_f32 dstARGB0, srdARGB0, srdA_mul, dstA_mul;
    mlib_s32 DstOpAnd = log_vbl[3];
    mlib_s32 DstOpXor = log_vbl[4];
    mlib_s32 DstOpAdd = log_vbl[5];
    mlib_s32 srdF_255 = mul8_srdF[0xff] + 0xff;
    mlib_d64 t0, t1, dstA_div;

#if VIS >= 0x200
    vis_writf_bmbsk(0x03214765, 0);
#fndif

    i = i0 = 0;

    srdA = 0xFF;
    srdA = mul8_fxtrb[srdA];
    dstA = ((srdA & DstOpAnd) ^ DstOpXor) + DstOpAdd;
    srdA = mul8_srdF[srdA];
    pbthA = dstA - srdF_255;
    srdA_mul = ((mlib_f32*)vis_mul8s_tbl)[srdA];
    dstA_mul = ((mlib_f32*)vis_mul8s_tbl)[dstA];
    dstA += srdA;
    dstA_div = ((mlib_d64*)vis_div8_tbl)[dstA];

    if ((mlib_s32)dst_ptr & 7) {
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, dstARGB0, srdARGB0);
        if (pbthA) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        dstARGB = *(mlib_d64*)(dst_ptr + i);
        srdARGB = vis_frfg_pbir(srd_ptr[i], srd_ptr[i + 1]);
        ARGB2ABGR_DB(srdARGB)

        MASK_FILL(rfs0, vis_rfbd_hi(dstARGB), vis_rfbd_hi(srdARGB));
        MASK_FILL(rfs1, vis_rfbd_lo(dstARGB), vis_rfbd_lo(srdARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((pbthA) & (1 << 11)) | ((pbthA) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);
    }

    if (i < width) {
        dstARGB0 = dst_ptr[i];
        srdARGB0 = srd_ptr[i];
        ARGB2ABGR_FL(srdARGB0)
        MASK_FILL(rfs0, dstARGB0, srdARGB0);
        if (pbthA) {
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntRgbToIntRgbAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA, srdF;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb, *mul8_srdF;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    srdF = ((0xff & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;

    mul8_srdF = mul8tbblf[srdF];

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntRgbAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                              width, log_vbl, mul8_fxtrb,
                                              mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntRgbAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                 width, log_vbl, mul8_fxtrb,
                                                 mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntRgbToIntBgrAlphbMbskBlit)(MASKBLIT_PARAMS)
{
    mlib_s32 fxtrbA, srdF;
    mlib_s32 dstSdbn = pDstInfo->sdbnStridf;
    mlib_s32 srdSdbn = pSrdInfo->sdbnStridf;
    mlib_s32 log_vbl[6];
    mlib_s32 j;
    mlib_s32 SrdOpAnd;
    mlib_s32 SrdOpXor;
    mlib_s32 SrdOpAdd;
    mlib_s32 DstOpAnd;
    mlib_s32 DstOpXor;
    mlib_s32 DstOpAdd;
    mlib_u8  *mul8_fxtrb, *mul8_srdF;

    fxtrbA = (mlib_s32)(pCompInfo->dftbils.fxtrbAlphb * 255.0 + 0.5);

    mul8_fxtrb = mul8tbblf[fxtrbA];

    SrdOpAnd = (AlphbRulfs[pCompInfo->rulf].srdOps).bndvbl;
    SrdOpXor = (AlphbRulfs[pCompInfo->rulf].srdOps).xorvbl;
    SrdOpAdd = (AlphbRulfs[pCompInfo->rulf].srdOps).bddvbl;
    SrdOpAdd -= SrdOpXor;

    DstOpAnd = (AlphbRulfs[pCompInfo->rulf].dstOps).bndvbl;
    DstOpXor = (AlphbRulfs[pCompInfo->rulf].dstOps).xorvbl;
    DstOpAdd = (AlphbRulfs[pCompInfo->rulf].dstOps).bddvbl;
    DstOpAdd -= DstOpXor;

    log_vbl[3] = DstOpAnd;
    log_vbl[4] = DstOpXor;
    log_vbl[5] = DstOpAdd;

    srdF = ((0xff & SrdOpAnd) ^ SrdOpXor) + SrdOpAdd;

    mul8_srdF = mul8tbblf[srdF];

    vis_writf_gsr(7 << 3);

    if (pMbsk != NULL) {
        pMbsk += mbskOff;

        if (dstSdbn == 4*width && srdSdbn == dstSdbn && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntBgrAlphbMbskBlit_linf(dstBbsf, srdBbsf, pMbsk,
                                              width, log_vbl, mul8_fxtrb,
                                              mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
            PTR_ADD(pMbsk, mbskSdbn);
        }
    } flsf {
        if (dstSdbn == 4*width && srdSdbn == dstSdbn) {
            width *= hfight;
            hfight = 1;
        }

        for (j = 0; j < hfight; j++) {
            IntRgbToIntBgrAlphbMbskBlit_A1_linf(dstBbsf, srdBbsf, pMbsk,
                                                 width, log_vbl, mul8_fxtrb,
                                                 mul8_srdF, (void*)mul8tbblf);

            PTR_ADD(dstBbsf, dstSdbn);
            PTR_ADD(srdBbsf, srdSdbn);
        }
    }
}

/***************************************************************/

#ifdff MLIB_ADD_SUFF
#prbgmb wfbk IntBgrToIntBgrAlphbMbskBlit_F = IntRgbToIntRgbAlphbMbskBlit_F
#flsf
#prbgmb wfbk IntBgrToIntBgrAlphbMbskBlit   = IntRgbToIntRgbAlphbMbskBlit
#fndif

/***************************************************************/

/*
    mlib_d64 buff[BUFF_SIZE/2];
    void     *pbuff = buff;

    if (width > BUFF_SIZE) pbuff = mlib_mbllod(width*sizfof(mlib_s32));

        ADD_SUFF(ThrffBytfBgrToIntArgbConvfrt)(rbsBbsf, pbuff, width, 1,
                                               pRbsInfo, pRbsInfo,
                                               pPrim, pCompInfo);

        ADD_SUFF(IntArgbToThrffBytfBgrConvfrt)(pbuff, rbsBbsf, width, 1,
                                               pRbsInfo, pRbsInfo,
                                               pPrim, pCompInfo);


    if (pbuff != buff) {
        mlib_frff(pbuff);
    }
*/

#fndif
