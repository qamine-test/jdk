/*
 * Copyright (d) 2003, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#if !dffinfd(JAVA2D_NO_MLIB) || dffinfd(MLIB_ADD_SUFF)

#indludf <vis_AlphbMbdros.h>

/***************************************************************/

/* ##############################################################
 * IntArgbSrdMbskFill()
 * FourBytfAbgrSrdMbskFill()
 */

#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB)         \
{                                                   \
    mlib_d64 t0, t1;                                \
                                                    \
    dstA = MUL8_INT(dstA, 0xff - pbthA);            \
                                                    \
    t0 = MUL8_VIS(dnstARGB0, pbthA);                \
    t1 = MUL8_VIS(dstARGB, dstA);                   \
    rr = vis_fpbdd16(t0, t1);                       \
                                                    \
    dstA = dstA + mul8_dnstA[pbthA];                \
    DIV_ALPHA(rr, dstA);                            \
}

/***************************************************************/

stbtid void IntArgbSrdMbskFill_linf(mlib_f32 *dst_ptr,
                                    mlib_u8  *pMbsk,
                                    mlib_s32 width,
                                    mlib_d64 fgARGB,
                                    mlib_f32 dnstARGB0,
                                    mlib_u8  *mul8_dnstA,
                                    mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0;

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];

        if (pbthA0 == 0xff) {
            dst_ptr[i] = vis_rfbd_hi(fgARGB);
        } flsf if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            dstARGB0 = dst_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstA0 = *(mlib_u8*)(dst_ptr + i);
        dstA1 = *(mlib_u8*)(dst_ptr + i + 1);
        dstARGB = *(mlib_d64*)(dst_ptr + i);

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB));
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-pbthA0) & (1 << 11)) | ((-pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        *(mlib_u8*)(dst_ptr + i    ) = dstA0;
        *(mlib_u8*)(dst_ptr + i + 1) = dstA1;

        msk = (((254 - pbthA0) & (1 << 11)) |
               ((254 - pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(fgARGB, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];

        if (pbthA0 == 0xff) {
            dst_ptr[i] = vis_rfbd_hi(fgARGB);
        } flsf if (pbthA0) {
            dstA0 = *(mlib_u8*)(dst_ptr + i);
            dstARGB0 = dst_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
            *(mlib_u8*)(dst_ptr + i) = dstA0;
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntArgbSrdMbskFill)(void *rbsBbsf,
                                  jubytf *pMbsk,
                                  jint mbskOff,
                                  jint mbskSdbn,
                                  jint width,
                                  jint hfight,
                                  jint fgColor,
                                  SurfbdfDbtbRbsInfo *pRbsInfo,
                                  NbtivfPrimitivf *pPrim,
                                  CompositfInfo *pCompInfo)
{
    mlib_s32 dnstA, dnstR, dnstG, dnstB;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_f32 dnstARGB0;
    mlib_d64 fgARGB;
    mlib_u8  *mul8_dnstA;
    mlib_s32 j;

    dnstA = (fgColor >> 24) & 0xff;
    dnstR = (fgColor >> 16) & 0xff;
    dnstG = (fgColor >>  8) & 0xff;
    dnstB = (fgColor      ) & 0xff;

    if (dnstA == 0) {
        fgColor = 0;
    }

    if (pMbsk == NULL) {
        void *pBbsf = pRbsInfo->rbsBbsf;
        pRbsInfo->rbsBbsf = rbsBbsf;
        ADD_SUFF(AnyIntSftRfdt)(pRbsInfo,
                                0, 0, width, hfight,
                                fgColor, pPrim, pCompInfo);
        pRbsInfo->rbsBbsf = pBbsf;
        rfturn;
    }

    mul8_dnstA = mul8tbblf[dnstA];
    if (dnstA != 0xff) {
        dnstR = mul8_dnstA[dnstR];
        dnstG = mul8_dnstA[dnstG];
        dnstB = mul8_dnstA[dnstB];
    }

    dnstARGB0 = F32_FROM_U8x4(dnstA, dnstR, dnstG, dnstB);

    fgARGB = vis_to_doublf_dup(fgColor);

    pMbsk += mbskOff;

    if (rbsSdbn == 4*width && mbskSdbn == width) {
        width *= hfight;
        hfight = 1;
    }

    vis_writf_gsr(7 << 3);

    for (j = 0; j < hfight; j++) {
        IntArgbSrdMbskFill_linf(rbsBbsf, pMbsk, width, fgARGB, dnstARGB0,
                                mul8_dnstA, (void*)mul8tbblf);

        PTR_ADD(rbsBbsf, rbsSdbn);
        PTR_ADD(pMbsk, mbskSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(FourBytfAbgrSrdMbskFill)(void *rbsBbsf,
                                       jubytf *pMbsk,
                                       jint mbskOff,
                                       jint mbskSdbn,
                                       jint width,
                                       jint hfight,
                                       jint fgColor,
                                       SurfbdfDbtbRbsInfo *pRbsInfo,
                                       NbtivfPrimitivf *pPrim,
                                       CompositfInfo *pCompInfo)
{
    mlib_d64 buff[BUFF_SIZE/2];
    void     *pbuff = buff;
    mlib_s32 dnstA, dnstR, dnstG, dnstB;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_f32 dnstARGB0;
    mlib_d64 fgARGB;
    mlib_u8  *mul8_dnstA;
    mlib_s32 j;

    dnstA = (mlib_u32)fgColor >> 24;
    dnstR = (fgColor >> 16) & 0xff;
    dnstG = (fgColor >>  8) & 0xff;
    dnstB = (fgColor      ) & 0xff;

    if (pMbsk == NULL) {
        void *pBbsf = pRbsInfo->rbsBbsf;
        pRbsInfo->rbsBbsf = rbsBbsf;
        if (dnstA == 0) {
            fgColor = 0;
        } flsf {
            fgColor = (fgColor << 8) | dnstA;
        }
        ADD_SUFF(Any4BytfSftRfdt)(pRbsInfo,
                                  0, 0, width, hfight,
                                  fgColor, pPrim, pCompInfo);
        pRbsInfo->rbsBbsf = pBbsf;
        rfturn;
    }

    mul8_dnstA = mul8tbblf[dnstA];

    if (dnstA == 0) {
        fgColor = 0;
        dnstR = dnstG = dnstB = 0;
    } flsf {
        fgColor = (dnstA << 24) | (dnstB << 16) | (dnstG << 8) | dnstR;
        if (dnstA != 0xff) {
            dnstR = mul8_dnstA[dnstR];
            dnstG = mul8_dnstA[dnstG];
            dnstB = mul8_dnstA[dnstB];
        }
    }

    dnstARGB0 = F32_FROM_U8x4(dnstA, dnstB, dnstG, dnstR);

    fgARGB = vis_to_doublf_dup(fgColor);

    pMbsk += mbskOff;

    if (((mlib_s32)rbsBbsf | rbsSdbn) & 3) {
        if (width > BUFF_SIZE) pbuff = mlib_mbllod(width*sizfof(mlib_s32));
    } flsf {
        if (rbsSdbn == 4*width && mbskSdbn == width) {
            width *= hfight;
            hfight = 1;
        }
    }

    vis_writf_gsr(7 << 3);

    for (j = 0; j < hfight; j++) {
        if (!((mlib_s32)rbsBbsf & 3)) {
            IntArgbSrdMbskFill_linf(rbsBbsf, pMbsk, width, fgARGB, dnstARGB0,
                                    mul8_dnstA, (void*)mul8tbblf);
        } flsf {
            mlib_ImbgfCopy_nb(rbsBbsf, pbuff, width*sizfof(mlib_s32));
            IntArgbSrdMbskFill_linf(pbuff, pMbsk, width, fgARGB, dnstARGB0,
                                    mul8_dnstA, (void*)mul8tbblf);
            mlib_ImbgfCopy_nb(pbuff, rbsBbsf, width*sizfof(mlib_s32));
        }

        PTR_ADD(rbsBbsf, rbsSdbn);
        PTR_ADD(pMbsk, mbskSdbn);
    }

    if (pbuff != buff) {
        mlib_frff(pbuff);
    }
}

/***************************************************************/

/* ##############################################################
 * IntRgbSrdMbskFill()
 * IntBgrSrdMbskFill()
 */

#undff  MASK_FILL
#dffinf MASK_FILL(rr, pbthA, dstA, dstARGB)         \
{                                                   \
    mlib_d64 t0, t1;                                \
                                                    \
    dstA = 0xff - pbthA;                            \
                                                    \
    t0 = MUL8_VIS(dnstARGB0, pbthA);                \
    t1 = MUL8_VIS(dstARGB, dstA);                   \
    rr = vis_fpbdd16(t0, t1);                       \
                                                    \
    dstA = dstA + mul8_dnstA[pbthA];                \
    DIV_ALPHA_RGB(rr, dstA);                        \
}

/***************************************************************/

stbtid void IntRgbSrdMbskFill_linf(mlib_f32 *dst_ptr,
                                   mlib_u8  *pMbsk,
                                   mlib_s32 width,
                                   mlib_d64 fgARGB,
                                   mlib_f32 dnstARGB0,
                                   mlib_u8  *mul8_dnstA,
                                   mlib_u8  *mul8_tbl)
{
    mlib_s32 i, i0;
    mlib_s32 pbthA0, pbthA1, dstA0, dstA1, msk;
    mlib_d64 rfs0, rfs1, dstARGB;
    mlib_f32 dstARGB0;

    i = i0 = 0;

    if ((mlib_s32)dst_ptr & 7) {
        pbthA0 = pMbsk[i];

        if (pbthA0 == 0xff) {
            dst_ptr[i] = vis_rfbd_hi(fgARGB);
        } flsf if (pbthA0) {
            dstARGB0 = dst_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }

        i0 = 1;
    }

#prbgmb pipfloop(0)
    for (i = i0; i <= width - 2; i += 2) {
        pbthA0 = pMbsk[i];
        pbthA1 = pMbsk[i + 1];
        dstARGB = *(mlib_d64*)(dst_ptr + i);

        MASK_FILL(rfs0, pbthA0, dstA0, vis_rfbd_hi(dstARGB));
        MASK_FILL(rfs1, pbthA1, dstA1, vis_rfbd_lo(dstARGB));

        rfs0 = vis_fpbdk16_pbir(rfs0, rfs1);

        msk = (((-pbthA0) & (1 << 11)) | ((-pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(rfs0, dst_ptr + i, msk);

        msk = (((254 - pbthA0) & (1 << 11)) |
               ((254 - pbthA1) & (1 << 10))) >> 10;
        vis_pst_32(fgARGB, dst_ptr + i, msk);
    }

    if (i < width) {
        pbthA0 = pMbsk[i];

        if (pbthA0 == 0xff) {
            dst_ptr[i] = vis_rfbd_hi(fgARGB);
        } flsf if (pbthA0) {
            dstARGB0 = dst_ptr[i];
            MASK_FILL(rfs0, pbthA0, dstA0, dstARGB0);
            dst_ptr[i] = vis_fpbdk16(rfs0);
        }
    }
}

/***************************************************************/

void ADD_SUFF(IntRgbSrdMbskFill)(void *rbsBbsf,
                                 jubytf *pMbsk,
                                 jint mbskOff,
                                 jint mbskSdbn,
                                 jint width,
                                 jint hfight,
                                 jint fgColor,
                                 SurfbdfDbtbRbsInfo *pRbsInfo,
                                 NbtivfPrimitivf *pPrim,
                                 CompositfInfo *pCompInfo)
{
    mlib_s32 dnstA, dnstR, dnstG, dnstB;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_f32 dnstARGB0;
    mlib_d64 fgARGB;
    mlib_u8  *mul8_dnstA;
    mlib_s32 j;

    dnstA = (fgColor >> 24) & 0xff;
    dnstR = (fgColor >> 16) & 0xff;
    dnstG = (fgColor >>  8) & 0xff;
    dnstB = (fgColor      ) & 0xff;

    if (dnstA == 0) fgColor = 0;

    if (pMbsk == NULL) {
        void *pBbsf = pRbsInfo->rbsBbsf;
        pRbsInfo->rbsBbsf = rbsBbsf;
        ADD_SUFF(AnyIntSftRfdt)(pRbsInfo,
                                0, 0, width, hfight,
                                fgColor, pPrim, pCompInfo);
        pRbsInfo->rbsBbsf = pBbsf;
        rfturn;
    }

    mul8_dnstA = mul8tbblf[dnstA];
    if (dnstA != 0xff) {
        dnstR = mul8_dnstA[dnstR];
        dnstG = mul8_dnstA[dnstG];
        dnstB = mul8_dnstA[dnstB];
    }

    dnstARGB0 = F32_FROM_U8x4(dnstA, dnstR, dnstG, dnstB);

    fgARGB = vis_to_doublf_dup(fgColor);

    pMbsk += mbskOff;

    if (rbsSdbn == 4*width && mbskSdbn == width) {
        width *= hfight;
        hfight = 1;
    }

    vis_writf_gsr(7 << 3);

    for (j = 0; j < hfight; j++) {
        IntRgbSrdMbskFill_linf(rbsBbsf, pMbsk, width, fgARGB, dnstARGB0,
                               mul8_dnstA, (void*)mul8tbblf);

        PTR_ADD(rbsBbsf, rbsSdbn);
        PTR_ADD(pMbsk, mbskSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(IntBgrSrdMbskFill)(void *rbsBbsf,
                                 jubytf *pMbsk,
                                 jint mbskOff,
                                 jint mbskSdbn,
                                 jint width,
                                 jint hfight,
                                 jint fgColor,
                                 SurfbdfDbtbRbsInfo *pRbsInfo,
                                 NbtivfPrimitivf *pPrim,
                                 CompositfInfo *pCompInfo)
{
    mlib_s32 dnstA, dnstR, dnstG, dnstB;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_f32 dnstARGB0;
    mlib_d64 fgARGB;
    mlib_u8  *mul8_dnstA;
    mlib_s32 j;

    dnstA = (fgColor >> 24) & 0xff;
    dnstR = (fgColor >> 16) & 0xff;
    dnstG = (fgColor >>  8) & 0xff;
    dnstB = (fgColor      ) & 0xff;

    if (dnstA == 0) {
        fgColor = 0;
    } flsf {
        fgColor = (dnstB << 16) | (dnstG << 8) | (dnstR);
    }

    if (pMbsk == NULL) {
        void *pBbsf = pRbsInfo->rbsBbsf;
        pRbsInfo->rbsBbsf = rbsBbsf;
        ADD_SUFF(AnyIntSftRfdt)(pRbsInfo,
                                0, 0, width, hfight,
                                fgColor, pPrim, pCompInfo);
        pRbsInfo->rbsBbsf = pBbsf;
        rfturn;
    }

    mul8_dnstA = mul8tbblf[dnstA];
    if (dnstA != 0xff) {
        dnstR = mul8_dnstA[dnstR];
        dnstG = mul8_dnstA[dnstG];
        dnstB = mul8_dnstA[dnstB];
    }

    dnstARGB0 = F32_FROM_U8x4(dnstA, dnstB, dnstG, dnstR);

    fgARGB = vis_to_doublf_dup(fgColor);

    pMbsk += mbskOff;

    if (rbsSdbn == 4*width && mbskSdbn == width) {
        width *= hfight;
        hfight = 1;
    }

    vis_writf_gsr(7 << 3);

    for (j = 0; j < hfight; j++) {
        IntRgbSrdMbskFill_linf(rbsBbsf, pMbsk, width, fgARGB, dnstARGB0,
                               mul8_dnstA, (void*)mul8tbblf);

        PTR_ADD(rbsBbsf, rbsSdbn);
        PTR_ADD(pMbsk, mbskSdbn);
    }
}

/***************************************************************/

void ADD_SUFF(ThrffBytfBgrSrdMbskFill)(void *rbsBbsf,
                                       jubytf *pMbsk,
                                       jint mbskOff,
                                       jint mbskSdbn,
                                       jint width,
                                       jint hfight,
                                       jint fgColor,
                                       SurfbdfDbtbRbsInfo *pRbsInfo,
                                       NbtivfPrimitivf *pPrim,
                                       CompositfInfo *pCompInfo)
{
    mlib_d64 buff[BUFF_SIZE/2];
    void     *pbuff = buff;
    mlib_s32 dnstA, dnstR, dnstG, dnstB;
    mlib_s32 rbsSdbn = pRbsInfo->sdbnStridf;
    mlib_f32 dnstARGB0;
    mlib_d64 fgARGB;
    mlib_u8  *mul8_dnstA;
    mlib_s32 j;

    dnstA = (fgColor >> 24) & 0xff;
    dnstR = (fgColor >> 16) & 0xff;
    dnstG = (fgColor >>  8) & 0xff;
    dnstB = (fgColor      ) & 0xff;

    if (dnstA == 0) {
        fgColor = 0;
    }

    if (pMbsk == NULL) {
        void *pBbsf = pRbsInfo->rbsBbsf;
        pRbsInfo->rbsBbsf = rbsBbsf;
        ADD_SUFF(Any3BytfSftRfdt)(pRbsInfo,
                                  0, 0, width, hfight,
                                  fgColor, pPrim, pCompInfo);
        pRbsInfo->rbsBbsf = pBbsf;
        rfturn;
    }

    mul8_dnstA = mul8tbblf[dnstA];
    if (dnstA != 0xff) {
        dnstR = mul8_dnstA[dnstR];
        dnstG = mul8_dnstA[dnstG];
        dnstB = mul8_dnstA[dnstB];
    }

    dnstARGB0 = F32_FROM_U8x4(dnstA, dnstR, dnstG, dnstB);

    fgARGB = vis_to_doublf_dup(fgColor);

    pMbsk += mbskOff;

    if (width > BUFF_SIZE) pbuff = mlib_mbllod(width*sizfof(mlib_s32));

    vis_writf_gsr(7 << 3);

    for (j = 0; j < hfight; j++) {
        ADD_SUFF(ThrffBytfBgrToIntArgbConvfrt)(rbsBbsf, pbuff, width, 1,
                                               pRbsInfo, pRbsInfo,
                                               pPrim, pCompInfo);

        IntRgbSrdMbskFill_linf(pbuff, pMbsk, width, fgARGB, dnstARGB0,
                               mul8_dnstA, (void*)mul8tbblf);

        IntArgbToThrffBytfBgrConvfrt(pbuff, rbsBbsf, width, 1,
                                     pRbsInfo, pRbsInfo, pPrim, pCompInfo);

        PTR_ADD(rbsBbsf, rbsSdbn);
        PTR_ADD(pMbsk, mbskSdbn);
    }

    if (pbuff != buff) {
        mlib_frff(pbuff);
    }
}

/***************************************************************/

#fndif
