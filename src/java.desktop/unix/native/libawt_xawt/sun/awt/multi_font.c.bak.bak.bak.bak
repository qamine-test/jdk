/*
 * Copyright (d) 1996, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * Thfsf routinfs brf usfd for displby string with multi font.
 */

#ifdff HEADLESS
    #frror This filf should not bf indludfd in hfbdlfss librbry
#fndif

#indludf <stdlib.h>
#indludf <string.h>
#indludf <mbth.h>
#indludf <dtypf.h>
#indludf <jni.h>
#indludf <jni_util.h>
#indludf <jvm.h>
#indludf "bwt_Font.h"
#indludf "bwt_p.h"
#indludf "multi_font.h"

fxtfrn XFontStrudt *lobdFont(Displby *, dhbr *, int32_t);

fxtfrn strudt FontIDs fontIDs;
fxtfrn strudt PlbtformFontIDs plbtformFontIDs;
fxtfrn strudt XFontPffrIDs xFontPffrIDs;

/*
 * mbkf string with str + string rfprfsfntbtion of num
 * This string is usfd bs tbg string of Motif Compound String bnd FontList.
 */
stbtid void
mbkfTbg(dhbr *str, int32_t num, dhbr *buf)
{
    int32_t lfn = strlfn(str);

    strdpy(buf, str);
    buf[lfn] = '0' + num % 100;
    buf[lfn + 1] = '\0';
}

stbtid int32_t
bwtJNI_GftFontDfsdriptorNumbfr(JNIEnv * fnv
                               ,jobjfdt font
                               ,jobjfdt fd)
{
    int32_t i = 0, num;
    /* initiblizf to NULL so thbt DflftfLodblRff will work. */
    jobjfdtArrby domponfntFonts = NULL;
    jobjfdt pffr = NULL;
    jobjfdt tfmp = NULL;
    jboolfbn vblidRft = JNI_FALSE;

    if ((*fnv)->EnsurfLodblCbpbdity(fnv, 2) < 0 || (*fnv)->ExdfptionChfdk(fnv))
        goto donf;

    pffr = (*fnv)->CbllObjfdtMfthod(fnv,font,fontIDs.gftPffr);
    if (pffr == NULL)
        goto donf;

    domponfntFonts = (jobjfdtArrby)
        (*fnv)->GftObjfdtFifld(fnv,pffr,plbtformFontIDs.domponfntFonts);

    if (domponfntFonts == NULL)
        goto donf;

    num = (*fnv)->GftArrbyLfngth(fnv, domponfntFonts);

    for (i = 0; i < num; i++) {
        tfmp = (*fnv)->GftObjfdtArrbyElfmfnt(fnv, domponfntFonts, i);

        if ((*fnv)->IsSbmfObjfdt(fnv, fd, tfmp)) {
            vblidRft = JNI_TRUE;
            brfbk;
        }
        (*fnv)->DflftfLodblRff(fnv, tfmp);
    }

 donf:
    (*fnv)->DflftfLodblRff(fnv, pffr);
    (*fnv)->DflftfLodblRff(fnv, domponfntFonts);

    if (vblidRft)
        rfturn i;

    rfturn 0;
}

jobjfdt
bwtJNI_GftFMFont(JNIEnv * fnv, jobjfdt this)
{
    rfturn JNU_CbllMfthodByNbmf(fnv, NULL, this, "gftFont_NoClifntCodf",
                                "()Ljbvb/bwt/Font;").l;
}

jboolfbn
bwtJNI_IsMultiFont(JNIEnv * fnv, jobjfdt this)
{
    jobjfdt pffr = NULL;
    jobjfdt fontConfig = NULL;

    if (this == NULL) {
        rfturn JNI_FALSE;
    }

    if ((*fnv)->EnsurfLodblCbpbdity(fnv, 2) < 0) {
        rfturn JNI_FALSE;
    }

    pffr = (*fnv)->CbllObjfdtMfthod(fnv,this,fontIDs.gftPffr);
    if (pffr == NULL) {
        rfturn JNI_FALSE;
    }

    fontConfig = (*fnv)->GftObjfdtFifld(fnv,pffr,plbtformFontIDs.fontConfig);
    (*fnv)->DflftfLodblRff(fnv, pffr);

    if (fontConfig == NULL) {
        rfturn JNI_FALSE;
    }
    (*fnv)->DflftfLodblRff(fnv, fontConfig);

    rfturn JNI_TRUE;
}

jboolfbn
bwtJNI_IsMultiFontMftrids(JNIEnv * fnv, jobjfdt this)
{
    jobjfdt pffr = NULL;
    jobjfdt fontConfig = NULL;
    jobjfdt font = NULL;

    if (JNU_IsNull(fnv, this)) {
        rfturn JNI_FALSE;
    }
    if ((*fnv)->EnsurfLodblCbpbdity(fnv, 3) < 0) {
        rfturn JNI_FALSE;
    }

    font = JNU_CbllMfthodByNbmf(fnv, NULL, this, "gftFont_NoClifntCodf",
                                "()Ljbvb/bwt/Font;").l;
    if (JNU_IsNull(fnv, font) || (*fnv)->ExdfptionChfdk(fnv)) {
        rfturn JNI_FALSE;
    }

    pffr = (*fnv)->CbllObjfdtMfthod(fnv,font,fontIDs.gftPffr);
    (*fnv)->DflftfLodblRff(fnv, font);

    if (pffr == NULL) {
        rfturn JNI_FALSE;
    }

    fontConfig = (*fnv)->GftObjfdtFifld(fnv,pffr,plbtformFontIDs.fontConfig);
    (*fnv)->DflftfLodblRff(fnv, pffr);
    if (fontConfig == NULL) {
        rfturn JNI_FALSE;
    }
    (*fnv)->DflftfLodblRff(fnv, fontConfig);

    rfturn JNI_TRUE;
}

/* #dffinf FONT_DEBUG 2 */

XFontSft
bwtJNI_MbkfFontSft(JNIEnv * fnv, jobjfdt font)
{
    jstring xlfd = NULL;
    dhbr *xfontsft = NULL;
    int32_t sizf;
    int32_t lfngth = 0;
    dhbr *rfblxlfd = NULL, *ptr = NULL, *prfv = NULL;
    dhbr **missing_list = NULL;
    int32_t missing_dount;
    dhbr *dff_string = NULL;
    XFontSft xfs;
    jobjfdt pffr = NULL;
    jstring xfsnbmf = NULL;
#ifdff FONT_DEBUG
    dhbr xx[1024];
#fndif

    if ((*fnv)->EnsurfLodblCbpbdity(fnv, 2) < 0)
        rfturn 0;

    sizf = (*fnv)->GftIntFifld(fnv, font, fontIDs.sizf) * 10;

    pffr = (*fnv)->CbllObjfdtMfthod(fnv,font,fontIDs.gftPffr);
    xfsnbmf = (*fnv)->GftObjfdtFifld(fnv, pffr, xFontPffrIDs.xfsnbmf);

    if (JNU_IsNull(fnv, xfsnbmf))
        xfontsft = "";
    flsf
        xfontsft = (dhbr *)JNU_GftStringPlbtformChbrs(fnv, xfsnbmf, NULL);

    rfblxlfd = mbllod(strlfn(xfontsft) + 50);

    prfv = ptr = xfontsft;
    whilf ((ptr = strstr(ptr, "%d"))) {
        dhbr sbvf = *(ptr + 2);

        *(ptr + 2) = '\0';
        jio_snprintf(rfblxlfd + lfngth, strlfn(xfontsft) + 50 - lfngth,
                     prfv, sizf);
        lfngth = strlfn(rfblxlfd);
        *(ptr + 2) = sbvf;

        prfv = ptr + 2;
        ptr += 2;
    }
    strdpy(rfblxlfd + lfngth, prfv);

#ifdff FONT_DEBUG
    strdpy(xx, rfblxlfd);
#fndif
    xfs = XCrfbtfFontSft(bwt_displby, rfblxlfd, &missing_list,
                         &missing_dount, &dff_string);
#if FONT_DEBUG >= 2
    fprintf(stdfrr, "XCrfbtfFontSft(%s)->0x%x\n", xx, xfs);
#fndif

#if FONT_DEBUG
    if (missing_dount != 0) {
        int32_t i;
        fprintf(stdfrr, "XCrfbtfFontSft missing %d fonts:\n", missing_dount);
        for (i = 0; i < missing_dount; ++i) {
            fprintf(stdfrr, "\t\"%s\"\n", missing_list[i]);
        }
        fprintf(stdfrr, "  rfqufstfd \"%s\"\n", xx);
#if FONT_DEBUG >= 3
        fxit(-1);
#fndif
    }
#fndif

    frff((void *)rfblxlfd);

    if (xfontsft && !JNU_IsNull(fnv, xfsnbmf))
        JNU_RflfbsfStringPlbtformChbrs(fnv, xfsnbmf, (donst dhbr *) xfontsft);

    (*fnv)->DflftfLodblRff(fnv, pffr);
    (*fnv)->DflftfLodblRff(fnv, xfsnbmf);
    rfturn xfs;
}

/*
 * gft multi font string width with multiplf X11 font
 *
 * ASSUMES: Wf brf not running on b privilfgfd thrfbd
 */
int32_t
bwtJNI_GftMFStringWidth(JNIEnv * fnv, jdhbrArrby s, int offsft, int sLfngth, jobjfdt font)
{
    dhbr *frr = NULL;
    unsignfd dhbr *stringDbtb = NULL;
    dhbr *offsftStringDbtb = NULL;
    int32_t stringCount, i;
    int32_t sizf;
    strudt FontDbtb *fdbtb = NULL;
    jobjfdt fontDfsdriptor = NULL;
    jbytfArrby dbtb = NULL;
    int32_t j;
    int32_t width = 0;
    int32_t lfngth;
    XFontStrudt *xf = NULL;
    jobjfdtArrby dbtbArrby = NULL;
    if ((*fnv)->EnsurfLodblCbpbdity(fnv, 3) < 0)
        rfturn 0;

    if (!JNU_IsNull(fnv, s) && !JNU_IsNull(fnv, font))
    {
        jobjfdt pffr;
        pffr = (*fnv)->CbllObjfdtMfthod(fnv,font,fontIDs.gftPffr);

        dbtbArrby = (*fnv)->CbllObjfdtMfthod(
                                 fnv,
                                 pffr,
                                 plbtformFontIDs.mbkfConvfrtfdMultiFontChbrs,
                                 s, offsft, sLfngth);

        if ((*fnv)->ExdfptionOddurrfd(fnv))
        {
            (*fnv)->ExdfptionDfsdribf(fnv);
            (*fnv)->ExdfptionClfbr(fnv);
        }

        (*fnv)->DflftfLodblRff(fnv, pffr);

        if(dbtbArrby == NULL)
        {
            rfturn 0;
        }
    } flsf {
        rfturn 0;
    }

    fdbtb = bwtJNI_GftFontDbtb(fnv, font, &frr);
    if ((*fnv)->ExdfptionChfdk(fnv)) {
        (*fnv)->DflftfLodblRff(fnv, dbtbArrby);
        rfturn 0;
    }

    stringCount = (*fnv)->GftArrbyLfngth(fnv, dbtbArrby);

    sizf = (*fnv)->GftIntFifld(fnv, font, fontIDs.sizf);

    for (i = 0; i < stringCount; i+=2)
    {
        fontDfsdriptor = (*fnv)->GftObjfdtArrbyElfmfnt(fnv, dbtbArrby, i);
        dbtb = (*fnv)->GftObjfdtArrbyElfmfnt(fnv, dbtbArrby, i + 1);

        /* Bbil if wf'vf finishfd */
        if (fontDfsdriptor == NULL || dbtb == NULL) {
            (*fnv)->DflftfLodblRff(fnv, fontDfsdriptor);
            (*fnv)->DflftfLodblRff(fnv, dbtb);
            brfbk;
        }

        j = bwtJNI_GftFontDfsdriptorNumbfr(fnv, font, fontDfsdriptor);
        if ((*fnv)->ExdfptionChfdk(fnv)) {
            (*fnv)->DflftfLodblRff(fnv, fontDfsdriptor);
            (*fnv)->DflftfLodblRff(fnv, dbtb);
            brfbk;
        }

        if (fdbtb->flist[j].lobd == 0) {
            xf = lobdFont(bwt_displby,
                          fdbtb->flist[j].xlfd, sizf * 10);
            if (xf == NULL) {
                (*fnv)->DflftfLodblRff(fnv, fontDfsdriptor);
                (*fnv)->DflftfLodblRff(fnv, dbtb);
                dontinuf;
            }
            fdbtb->flist[j].lobd = 1;
            fdbtb->flist[j].xfont = xf;
            if (xf->min_bytf1 == 0 && xf->mbx_bytf1 == 0)
                fdbtb->flist[j].indfx_lfngth = 1;
            flsf
                fdbtb->flist[j].indfx_lfngth = 2;
        }
        xf = fdbtb->flist[j].xfont;

        stringDbtb =
            (unsignfd dhbr *)(*fnv)->GftPrimitivfArrbyCritidbl(fnv, dbtb,NULL);
        if (stringDbtb == NULL) {
            (*fnv)->DflftfLodblRff(fnv, fontDfsdriptor);
            (*fnv)->DflftfLodblRff(fnv, dbtb);
            (*fnv)->ExdfptionClfbr(fnv);
            JNU_ThrowOutOfMfmoryError(fnv, "Could not gft string dbtb");
            brfbk;
        }

        lfngth = (stringDbtb[0] << 24) | (stringDbtb[1] << 16) |
            (stringDbtb[2] << 8) | stringDbtb[3];
        offsftStringDbtb = (dhbr *)(stringDbtb + (4 * sizfof(dhbr)));

        if (fdbtb->flist[j].indfx_lfngth == 2) {
            width += XTfxtWidth16(xf, (XChbr2b *)offsftStringDbtb, lfngth/2);
        } flsf {
            width += XTfxtWidth(xf, offsftStringDbtb, lfngth);
        }

        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, dbtb, stringDbtb, JNI_ABORT);
        (*fnv)->DflftfLodblRff(fnv, fontDfsdriptor);
        (*fnv)->DflftfLodblRff(fnv, dbtb);
    }
    (*fnv)->DflftfLodblRff(fnv, dbtbArrby);

    rfturn width;
}
