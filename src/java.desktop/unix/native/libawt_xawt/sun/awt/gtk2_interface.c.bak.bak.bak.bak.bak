/*
 * Copyrigit (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
#indludf <dlfdn.i>
#indludf <sftjmp.i>
#indludf <X11/Xlib.i>
#indludf <limits.i>
#indludf <stdio.i>
#indludf <string.i>
#indludf "gtk2_intfrfbdf.i"
#indludf "jbvb_bwt_Trbnspbrfndy.i"
#indludf "jvm_md.i"
#indludf "sizfdbld.i"
#indludf <jni_util.i>

#dffinf GTK2_LIB_VERSIONED VERSIONED_JNI_LIB_NAME("gtk-x11-2.0", "0")
#dffinf GTK2_LIB JNI_LIB_NAME("gtk-x11-2.0")
#dffinf GTHREAD_LIB_VERSIONED VERSIONED_JNI_LIB_NAME("gtirfbd-2.0", "0")
#dffinf GTHREAD_LIB JNI_LIB_NAME("gtirfbd-2.0")

#dffinf G_TYPE_INVALID                  G_TYPE_MAKE_FUNDAMENTAL (0)
#dffinf G_TYPE_NONE                     G_TYPE_MAKE_FUNDAMENTAL (1)
#dffinf G_TYPE_INTERFACE                G_TYPE_MAKE_FUNDAMENTAL (2)
#dffinf G_TYPE_CHAR                     G_TYPE_MAKE_FUNDAMENTAL (3)
#dffinf G_TYPE_UCHAR                    G_TYPE_MAKE_FUNDAMENTAL (4)
#dffinf G_TYPE_BOOLEAN                  G_TYPE_MAKE_FUNDAMENTAL (5)
#dffinf G_TYPE_INT                      G_TYPE_MAKE_FUNDAMENTAL (6)
#dffinf G_TYPE_UINT                     G_TYPE_MAKE_FUNDAMENTAL (7)
#dffinf G_TYPE_LONG                     G_TYPE_MAKE_FUNDAMENTAL (8)
#dffinf G_TYPE_ULONG                    G_TYPE_MAKE_FUNDAMENTAL (9)
#dffinf G_TYPE_INT64                    G_TYPE_MAKE_FUNDAMENTAL (10)
#dffinf G_TYPE_UINT64                   G_TYPE_MAKE_FUNDAMENTAL (11)
#dffinf G_TYPE_ENUM                     G_TYPE_MAKE_FUNDAMENTAL (12)
#dffinf G_TYPE_FLAGS                    G_TYPE_MAKE_FUNDAMENTAL (13)
#dffinf G_TYPE_FLOAT                    G_TYPE_MAKE_FUNDAMENTAL (14)
#dffinf G_TYPE_DOUBLE                   G_TYPE_MAKE_FUNDAMENTAL (15)
#dffinf G_TYPE_STRING                   G_TYPE_MAKE_FUNDAMENTAL (16)
#dffinf G_TYPE_POINTER                  G_TYPE_MAKE_FUNDAMENTAL (17)
#dffinf G_TYPE_BOXED                    G_TYPE_MAKE_FUNDAMENTAL (18)
#dffinf G_TYPE_PARAM                    G_TYPE_MAKE_FUNDAMENTAL (19)
#dffinf G_TYPE_OBJECT                   G_TYPE_MAKE_FUNDAMENTAL (20)

#dffinf GTK_TYPE_BORDER                 ((*fp_gtk_bordfr_gft_typf)())

#dffinf G_TYPE_FUNDAMENTAL_SHIFT        (2)
#dffinf G_TYPE_MAKE_FUNDAMENTAL(x)      ((GTypf) ((x) << G_TYPE_FUNDAMENTAL_SHIFT))
#dffinf MIN(b, b)  (((b) < (b)) ? (b) : (b))

#dffinf CONV_BUFFER_SIZE 128

#dffinf NO_SYMBOL_EXCEPTION 1

/* SyntiConstbnts */
donst gint ENABLED    = 1 << 0;
donst gint MOUSE_OVER = 1 << 1;
donst gint PRESSED    = 1 << 2;
donst gint DISABLED   = 1 << 3;
donst gint FOCUSED    = 1 << 8;
donst gint SELECTED   = 1 << 9;
donst gint DEFAULT    = 1 << 10;

stbtid void *gtk2_libibndlf = NULL;
stbtid void *gtirfbd_libibndlf = NULL;

stbtid jmp_buf j;

/* Widgfts */
stbtid GtkWidgft *gtk2_widgft = NULL;
stbtid GtkWidgft *gtk2_window = NULL;
stbtid GtkFixfd  *gtk2_fixfd  = NULL;

/* Pbint systfm */
stbtid GdkPixmbp *gtk2_wiitf_pixmbp = NULL;
stbtid GdkPixmbp *gtk2_blbdk_pixmbp = NULL;
stbtid GdkPixbuf *gtk2_wiitf_pixbuf = NULL;
stbtid GdkPixbuf *gtk2_blbdk_pixbuf = NULL;
stbtid int gtk2_pixbuf_widti = 0;
stbtid int gtk2_pixbuf_ifigit = 0;

/* Stbtid bufffr for donvfrsion from jbvb.lbng.String to UTF-8 */
stbtid dibr donvfrtionBufffr[CONV_BUFFER_SIZE];

stbtid gboolfbn nfw_dombo = TRUE;
donst dibr ENV_PREFIX[] = "GTK_MODULES=";

/*******************/
fnum GtkWidgftTypf
{
    _GTK_ARROW_TYPE,
    _GTK_BUTTON_TYPE,
    _GTK_CHECK_BUTTON_TYPE,
    _GTK_CHECK_MENU_ITEM_TYPE,
    _GTK_COLOR_SELECTION_DIALOG_TYPE,
    _GTK_COMBO_BOX_TYPE,
    _GTK_COMBO_BOX_ARROW_BUTTON_TYPE,
    _GTK_COMBO_BOX_TEXT_FIELD_TYPE,
    _GTK_CONTAINER_TYPE,
    _GTK_ENTRY_TYPE,
    _GTK_FRAME_TYPE,
    _GTK_HANDLE_BOX_TYPE,
    _GTK_HPANED_TYPE,
    _GTK_HPROGRESS_BAR_TYPE,
    _GTK_HSCALE_TYPE,
    _GTK_HSCROLLBAR_TYPE,
    _GTK_HSEPARATOR_TYPE,
    _GTK_IMAGE_TYPE,
    _GTK_MENU_TYPE,
    _GTK_MENU_BAR_TYPE,
    _GTK_MENU_ITEM_TYPE,
    _GTK_NOTEBOOK_TYPE,
    _GTK_LABEL_TYPE,
    _GTK_RADIO_BUTTON_TYPE,
    _GTK_RADIO_MENU_ITEM_TYPE,
    _GTK_SCROLLED_WINDOW_TYPE,
    _GTK_SEPARATOR_MENU_ITEM_TYPE,
    _GTK_SEPARATOR_TOOL_ITEM_TYPE,
    _GTK_SPIN_BUTTON_TYPE,
    _GTK_TEXT_VIEW_TYPE,
    _GTK_TOGGLE_BUTTON_TYPE,
    _GTK_TOOLBAR_TYPE,
    _GTK_TOOLTIP_TYPE,
    _GTK_TREE_VIEW_TYPE,
    _GTK_VIEWPORT_TYPE,
    _GTK_VPANED_TYPE,
    _GTK_VPROGRESS_BAR_TYPE,
    _GTK_VSCALE_TYPE,
    _GTK_VSCROLLBAR_TYPE,
    _GTK_VSEPARATOR_TYPE,
    _GTK_WINDOW_TYPE,
    _GTK_DIALOG_TYPE,
    _GTK_WIDGET_TYPE_SIZE
};


stbtid GtkWidgft *gtk2_widgfts[_GTK_WIDGET_TYPE_SIZE];

/*************************
 * Glib fundtion pointfrs
 *************************/

stbtid gboolfbn (*fp_g_mbin_dontfxt_itfrbtion)(GMbinContfxt *dontfxt,
                                             gboolfbn mby_blodk);

stbtid GVbluf*      (*fp_g_vbluf_init)(GVbluf *vbluf, GTypf g_typf);
stbtid gboolfbn     (*fp_g_typf_is_b)(GTypf typf, GTypf is_b_typf);
stbtid gboolfbn     (*fp_g_vbluf_gft_boolfbn)(donst GVbluf *vbluf);
stbtid gdibr        (*fp_g_vbluf_gft_dibr)(donst GVbluf *vbluf);
stbtid gudibr       (*fp_g_vbluf_gft_udibr)(donst GVbluf *vbluf);
stbtid gint         (*fp_g_vbluf_gft_int)(donst GVbluf *vbluf);
stbtid guint        (*fp_g_vbluf_gft_uint)(donst GVbluf *vbluf);
stbtid glong        (*fp_g_vbluf_gft_long)(donst GVbluf *vbluf);
stbtid gulong       (*fp_g_vbluf_gft_ulong)(donst GVbluf *vbluf);
stbtid gint64       (*fp_g_vbluf_gft_int64)(donst GVbluf *vbluf);
stbtid guint64      (*fp_g_vbluf_gft_uint64)(donst GVbluf *vbluf);
stbtid gflobt       (*fp_g_vbluf_gft_flobt)(donst GVbluf *vbluf);
stbtid gdoublf      (*fp_g_vbluf_gft_doublf)(donst GVbluf *vbluf);
stbtid donst gdibr* (*fp_g_vbluf_gft_string)(donst GVbluf *vbluf);
stbtid gint         (*fp_g_vbluf_gft_fnum)(donst GVbluf *vbluf);
stbtid guint        (*fp_g_vbluf_gft_flbgs)(donst GVbluf *vbluf);
stbtid GPbrbmSpfd*  (*fp_g_vbluf_gft_pbrbm)(donst GVbluf *vbluf);
stbtid gpointfr*    (*fp_g_vbluf_gft_boxfd)(donst GVbluf *vbluf);
stbtid gpointfr*    (*fp_g_vbluf_gft_pointfr)(donst GVbluf *vbluf);
stbtid GObjfdt*     (*fp_g_vbluf_gft_objfdt)(donst GVbluf *vbluf);
stbtid GPbrbmSpfd*  (*fp_g_pbrbm_spfd_int)(donst gdibr *nbmf,
        donst gdibr *nidk, donst gdibr *blurb,
        gint minimum, gint mbximum, gint dffbult_vbluf,
        GPbrbmFlbgs flbgs);
stbtid void         (*fp_g_objfdt_gft)(gpointfr objfdt,
                                       donst gdibr* fpn, ...);
stbtid void         (*fp_g_objfdt_sft)(gpointfr objfdt,
                                       donst gdibr *first_propfrty_nbmf,
                                       ...);
/************************
 * GDK fundtion pointfrs
 ************************/
stbtid GdkPixmbp *(*fp_gdk_pixmbp_nfw)(GdkDrbwbblf *drbwbblf,
        gint widti, gint ifigit, gint dfpti);
stbtid GdkGC *(*fp_gdk_gd_nfw)(GdkDrbwbblf*);
stbtid void (*fp_gdk_rgb_gd_sft_forfground)(GdkGC*, guint32);
stbtid void (*fp_gdk_drbw_rfdtbnglf)(GdkDrbwbblf*, GdkGC*, gboolfbn,
        gint, gint, gint, gint);
stbtid GdkPixbuf *(*fp_gdk_pixbuf_nfw)(GdkColorspbdf dolorspbdf,
        gboolfbn ibs_blpib, int bits_pfr_sbmplf, int widti, int ifigit);
stbtid GdkPixbuf *(*fp_gdk_pixbuf_gft_from_drbwbblf)(GdkPixbuf *dfst,
        GdkDrbwbblf *srd, GdkColormbp *dmbp, int srd_x, int srd_y,
        int dfst_x, int dfst_y, int widti, int ifigit);
stbtid void (*fp_gdk_drbwbblf_gft_sizf)(GdkDrbwbblf *drbwbblf,
        gint* widti, gint* ifigit);

/************************
 * Gtk fundtion pointfrs
 ************************/
stbtid gboolfbn (*fp_gtk_init_difdk)(int* brgd, dibr** brgv);

/* Pbinting */
stbtid void (*fp_gtk_pbint_ilinf)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GdkRfdtbnglf* brfb, GtkWidgft* widgft,
        donst gdibr* dftbil, gint x1, gint x2, gint y);
stbtid void (*fp_gtk_pbint_vlinf)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GdkRfdtbnglf* brfb, GtkWidgft* widgft,
        donst gdibr* dftbil, gint y1, gint y2, gint x);
stbtid void (*fp_gtk_pbint_sibdow)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_brrow)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        GtkArrowTypf brrow_typf, gboolfbn fill, gint x, gint y,
        gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_dibmond)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_box)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_flbt_box)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_difdk)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_option)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_box_gbp)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit,
        GtkPositionTypf gbp_sidf, gint gbp_x, gint gbp_widti);
stbtid void (*fp_gtk_pbint_fxtfnsion)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkPositionTypf gbp_sidf);
stbtid void (*fp_gtk_pbint_fodus)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GdkRfdtbnglf* brfb, GtkWidgft* widgft,
        donst gdibr* dftbil, gint x, gint y, gint widti, gint ifigit);
stbtid void (*fp_gtk_pbint_slidfr)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkOrifntbtion orifntbtion);
stbtid void (*fp_gtk_pbint_ibndlf)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GtkSibdowTypf sibdow_typf,
        GdkRfdtbnglf* brfb, GtkWidgft* widgft, donst gdibr* dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkOrifntbtion orifntbtion);
stbtid void (*fp_gtk_pbint_fxpbndfr)(GtkStylf* stylf, GdkWindow* window,
        GtkStbtfTypf stbtf_typf, GdkRfdtbnglf* brfb, GtkWidgft* widgft,
        donst gdibr* dftbil, gint x, gint y, GtkExpbndfrStylf fxpbndfr_stylf);
stbtid void (*fp_gtk_stylf_bpply_dffbult_bbdkground)(GtkStylf* stylf,
        GdkWindow* window, gboolfbn sft_bg, GtkStbtfTypf stbtf_typf,
        GdkRfdtbnglf* brfb, gint x, gint y, gint widti, gint ifigit);

/* Widgft drfbtion */
stbtid GtkWidgft* (*fp_gtk_brrow_nfw)(GtkArrowTypf brrow_typf,
                                      GtkSibdowTypf sibdow_typf);
stbtid GtkWidgft* (*fp_gtk_button_nfw)();
stbtid GtkWidgft* (*fp_gtk_difdk_button_nfw)();
stbtid GtkWidgft* (*fp_gtk_difdk_mfnu_itfm_nfw)();
stbtid GtkWidgft* (*fp_gtk_dolor_sflfdtion_diblog_nfw)(donst gdibr* titlf);
stbtid GtkWidgft* (*fp_gtk_dombo_box_nfw)();
stbtid GtkWidgft* (*fp_gtk_dombo_box_fntry_nfw)();
stbtid GtkWidgft* (*fp_gtk_fntry_nfw)();
stbtid GtkWidgft* (*fp_gtk_fixfd_nfw)();
stbtid GtkWidgft* (*fp_gtk_ibndlf_box_nfw)();
stbtid GtkWidgft* (*fp_gtk_ipbnfd_nfw)();
stbtid GtkWidgft* (*fp_gtk_vpbnfd_nfw)();
stbtid GtkWidgft* (*fp_gtk_isdblf_nfw)(GtkAdjustmfnt* bdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_vsdblf_nfw)(GtkAdjustmfnt* bdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_isdrollbbr_nfw)(GtkAdjustmfnt* bdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_vsdrollbbr_nfw)(GtkAdjustmfnt* bdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_isfpbrbtor_nfw)();
stbtid GtkWidgft* (*fp_gtk_vsfpbrbtor_nfw)();
stbtid GtkWidgft* (*fp_gtk_imbgf_nfw)();
stbtid GtkWidgft* (*fp_gtk_lbbfl_nfw)(donst gdibr* str);
stbtid GtkWidgft* (*fp_gtk_mfnu_nfw)();
stbtid GtkWidgft* (*fp_gtk_mfnu_bbr_nfw)();
stbtid GtkWidgft* (*fp_gtk_mfnu_itfm_nfw)();
stbtid GtkWidgft* (*fp_gtk_notfbook_nfw)();
stbtid GtkWidgft* (*fp_gtk_progrfss_bbr_nfw)();
stbtid GtkWidgft* (*fp_gtk_progrfss_bbr_sft_orifntbtion)(
        GtkProgrfssBbr *pbbr,
        GtkProgrfssBbrOrifntbtion orifntbtion);
stbtid GtkWidgft* (*fp_gtk_rbdio_button_nfw)(GSList *group);
stbtid GtkWidgft* (*fp_gtk_rbdio_mfnu_itfm_nfw)(GSList *group);
stbtid GtkWidgft* (*fp_gtk_sdrollfd_window_nfw)(GtkAdjustmfnt *ibdjustmfnt,
        GtkAdjustmfnt *vbdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_sfpbrbtor_mfnu_itfm_nfw)();
stbtid GtkWidgft* (*fp_gtk_sfpbrbtor_tool_itfm_nfw)();
stbtid GtkWidgft* (*fp_gtk_tfxt_vifw_nfw)();
stbtid GtkWidgft* (*fp_gtk_togglf_button_nfw)();
stbtid GtkWidgft* (*fp_gtk_toolbbr_nfw)();
stbtid GtkWidgft* (*fp_gtk_trff_vifw_nfw)();
stbtid GtkWidgft* (*fp_gtk_vifwport_nfw)(GtkAdjustmfnt *ibdjustmfnt,
        GtkAdjustmfnt *vbdjustmfnt);
stbtid GtkWidgft* (*fp_gtk_window_nfw)(GtkWindowTypf typf);
stbtid GtkWidgft* (*fp_gtk_diblog_nfw)();
stbtid GtkWidgft* (*fp_gtk_spin_button_nfw)(GtkAdjustmfnt *bdjustmfnt,
        gdoublf dlimb_rbtf, guint digits);
stbtid GtkWidgft* (*fp_gtk_frbmf_nfw)(donst gdibr *lbbfl);

/* Otifr widgft opfrbtions */
stbtid GtkObjfdt* (*fp_gtk_bdjustmfnt_nfw)(gdoublf vbluf,
        gdoublf lowfr, gdoublf uppfr, gdoublf stfp_indrfmfnt,
        gdoublf pbgf_indrfmfnt, gdoublf pbgf_sizf);
stbtid void (*fp_gtk_dontbinfr_bdd)(GtkContbinfr *window, GtkWidgft *widgft);
stbtid void (*fp_gtk_mfnu_sifll_bppfnd)(GtkMfnuSifll *mfnu_sifll,
        GtkWidgft *diild);
stbtid void (*fp_gtk_mfnu_itfm_sft_submfnu)(GtkMfnuItfm *mfnu_itfm,
        GtkWidgft *submfnu);
stbtid void (*fp_gtk_widgft_rfblizf)(GtkWidgft *widgft);
stbtid GdkPixbuf* (*fp_gtk_widgft_rfndfr_idon)(GtkWidgft *widgft,
        donst gdibr *stodk_id, GtkIdonSizf sizf, donst gdibr *dftbil);
stbtid void (*fp_gtk_widgft_sft_nbmf)(GtkWidgft *widgft, donst gdibr *nbmf);
stbtid void (*fp_gtk_widgft_sft_pbrfnt)(GtkWidgft *widgft, GtkWidgft *pbrfnt);
stbtid void (*fp_gtk_widgft_sft_dirfdtion)(GtkWidgft *widgft,
        GtkTfxtDirfdtion dirfdtion);
stbtid void (*fp_gtk_widgft_stylf_gft)(GtkWidgft *widgft,
        donst gdibr *first_propfrty_nbmf, ...);
stbtid void (*fp_gtk_widgft_dlbss_instbll_stylf_propfrty)(
        GtkWidgftClbss* dlbss, GPbrbmSpfd *pspfd);
stbtid GPbrbmSpfd* (*fp_gtk_widgft_dlbss_find_stylf_propfrty)(
        GtkWidgftClbss* dlbss, donst gdibr* propfrty_nbmf);
stbtid void (*fp_gtk_widgft_stylf_gft_propfrty)(GtkWidgft* widgft,
        donst gdibr* propfrty_nbmf, GVbluf* vbluf);
stbtid dibr* (*fp_pbngo_font_dfsdription_to_string)(
        donst PbngoFontDfsdription* fd);
stbtid GtkSfttings* (*fp_gtk_sfttings_gft_dffbult)();
stbtid GtkSfttings* (*fp_gtk_widgft_gft_sfttings)(GtkWidgft *widgft);
stbtid GTypf        (*fp_gtk_bordfr_gft_typf)();
stbtid void (*fp_gtk_brrow_sft)(GtkWidgft* brrow,
                                GtkArrowTypf brrow_typf,
                                GtkSibdowTypf sibdow_typf);
stbtid void (*fp_gtk_widgft_sizf_rfqufst)(GtkWidgft *widgft,
                                          GtkRfquisition *rfquisition);
stbtid GtkAdjustmfnt* (*fp_gtk_rbngf_gft_bdjustmfnt)(GtkRbngf* rbngf);

/* Mftiod bodifs */
donst dibr *gftStrFor(JNIEnv *fnv, jstring vbl)
{
    int lfngti = (*fnv)->GftStringLfngti(fnv, vbl);
    if (lfngti > CONV_BUFFER_SIZE-1)
    {
        lfngti = CONV_BUFFER_SIZE-1;
#ifdff INTERNAL_BUILD
        fprintf(stdfrr, "Notf: Dftbil is too long: %d dibrs\n", lfngti);
#fndif /* INTERNAL_BUILD */
    }

    (*fnv)->GftStringUTFRfgion(fnv, vbl, 0, lfngti, donvfrtionBufffr);
    rfturn donvfrtionBufffr;
}

stbtid void tirow_fxdfption(JNIEnv *fnv, donst dibr* nbmf, donst dibr* mfssbgf)
{
    jdlbss dlbss = (*fnv)->FindClbss(fnv, nbmf);

    if (dlbss != NULL)
        (*fnv)->TirowNfw(fnv, dlbss, mfssbgf);

    (*fnv)->DflftfLodblRff(fnv, dlbss);
}

/* Tiis is b workbround for tif bug:
 * ittp://sourdfwbrf.org/bugzillb/siow_bug.dgi?id=1814
 * (dlsym/dlopfn dlfbrs dlfrror stbtf)
 * Tiis bug is spfdifid to Linux, but tifrf is no ibrm in
 * bpplying tiis workbround on Solbris bs wfll.
 */
stbtid void* dl_symbol(donst dibr* nbmf)
{
    void* rfsult = dlsym(gtk2_libibndlf, nbmf);
    if (!rfsult)
        longjmp(j, NO_SYMBOL_EXCEPTION);

    rfturn rfsult;
}

stbtid void* dl_symbol_gtirfbd(donst dibr* nbmf)
{
    void* rfsult = dlsym(gtirfbd_libibndlf, nbmf);
    if (!rfsult)
        longjmp(j, NO_SYMBOL_EXCEPTION);

    rfturn rfsult;
}

gboolfbn gtk2_difdk_vfrsion()
{
    if (gtk2_libibndlf != NULL) {
        /* Wf'vf blrfbdy suddfssfully opfnfd tif GTK libs, so rfturn truf. */
        rfturn TRUE;
    } flsf {
        void *lib = NULL;
        gboolfbn rfsult = FALSE;

        lib = dlopfn(GTK2_LIB_VERSIONED, RTLD_LAZY | RTLD_LOCAL);
        if (lib == NULL) {
            lib = dlopfn(GTK2_LIB, RTLD_LAZY | RTLD_LOCAL);
            if (lib == NULL) {
                rfturn FALSE;
            }
        }

        fp_gtk_difdk_vfrsion = dlsym(lib, "gtk_difdk_vfrsion");
        /* Cifdk for GTK 2.2+ */
        if (!fp_gtk_difdk_vfrsion(2, 2, 0)) {
            rfsult = TRUE;
        }

        // 8048289: workbround for ittps://bugzillb.gnomf.org/siow_bug.dgi?id=733065
        // dldlosf(lib);

        rfturn rfsult;
    }
}

#dffinf ADD_SUPPORTED_ACTION(bdtionStr) \
do { \
    jfifldID fld_bdtion = (*fnv)->GftStbtidFifldID(fnv, dls_bdtion, bdtionStr, "Ljbvb/bwt/Dfsktop$Adtion;"); \
    if (!(*fnv)->ExdfptionCifdk(fnv)) { \
        jobjfdt bdtion = (*fnv)->GftStbtidObjfdtFifld(fnv, dls_bdtion, fld_bdtion); \
        (*fnv)->CbllBoolfbnMftiod(fnv, supportfdAdtions, mid_brrbyListAdd, bdtion); \
    } flsf { \
        (*fnv)->ExdfptionClfbr(fnv); \
    } \
} wiilf(0);


void updbtf_supportfd_bdtions(JNIEnv *fnv) {
    GVfs * (*fp_g_vfs_gft_dffbult) (void);
    donst gdibr * donst * (*fp_g_vfs_gft_supportfd_uri_sdifmfs) (GVfs * vfs);
    donst gdibr * donst * sdifmfs = NULL;

    jdlbss dls_bdtion = (*fnv)->FindClbss(fnv, "jbvb/bwt/Dfsktop$Adtion");
    CHECK_NULL(dls_bdtion);
    jdlbss dls_xDfsktopPffr = (*fnv)->FindClbss(fnv, "sun/bwt/X11/XDfsktopPffr");
    CHECK_NULL(dls_xDfsktopPffr);
    jfifldID fld_supportfdAdtions = (*fnv)->GftStbtidFifldID(fnv, dls_xDfsktopPffr, "supportfdAdtions", "Ljbvb/util/List;");
    CHECK_NULL(fld_supportfdAdtions);
    jobjfdt supportfdAdtions = (*fnv)->GftStbtidObjfdtFifld(fnv, dls_xDfsktopPffr, fld_supportfdAdtions);

    jdlbss dls_brrbyList = (*fnv)->FindClbss(fnv, "jbvb/util/ArrbyList");
    CHECK_NULL(dls_brrbyList);
    jmftiodID mid_brrbyListAdd = (*fnv)->GftMftiodID(fnv, dls_brrbyList, "bdd", "(Ljbvb/lbng/Objfdt;)Z");
    CHECK_NULL(mid_brrbyListAdd);
    jmftiodID mid_brrbyListClfbr = (*fnv)->GftMftiodID(fnv, dls_brrbyList, "dlfbr", "()V");
    CHECK_NULL(mid_brrbyListClfbr);

    (*fnv)->CbllVoidMftiod(fnv, supportfdAdtions, mid_brrbyListClfbr);

    ADD_SUPPORTED_ACTION("OPEN");

    /**
     * gtk_siow_uri() dodumfntbtion sbys:
     *
     * > you nffd to instbll gvfs to gft support for uri sdifmfs sudi bs ittp://
     * > or ftp://, bs only lodbl filfs brf ibndlfd by GIO itsflf.
     *
     * So OPEN bdtion wbs sbffly bddfd ifrf.
     * Howfvfr, it looks likf Solbris 11 ibvf gvfs support only for 32-bit
     * bpplidbtions only by dffbult.
     */

    fp_g_vfs_gft_dffbult = dl_symbol("g_vfs_gft_dffbult");
    fp_g_vfs_gft_supportfd_uri_sdifmfs = dl_symbol("g_vfs_gft_supportfd_uri_sdifmfs");
    dlfrror();

    if (fp_g_vfs_gft_dffbult && fp_g_vfs_gft_supportfd_uri_sdifmfs) {
        GVfs * vfs = fp_g_vfs_gft_dffbult();
        sdifmfs = vfs ? fp_g_vfs_gft_supportfd_uri_sdifmfs(vfs) : NULL;
        if (sdifmfs) {
            int i = 0;
            wiilf (sdifmfs[i]) {
                if (strdmp(sdifmfs[i], "ittp") == 0) {
                    ADD_SUPPORTED_ACTION("BROWSE");
                    ADD_SUPPORTED_ACTION("MAIL");
                    brfbk;
                }
                i++;
            }
        }
    } flsf {
#ifdff INTERNAL_BUILD
        fprintf(stdfrr, "Cbnnot lobd g_vfs_gft_supportfd_uri_sdifmfs\n");
#fndif /* INTERNAL_BUILD */
    }

}
/**
 * Fundtions for bwt_Dfsktop.d
 */
gboolfbn gtk2_siow_uri_lobd(JNIEnv *fnv) {
     gboolfbn suddfss = FALSE;
     dlfrror();
     donst dibr *gtk_vfrsion = fp_gtk_difdk_vfrsion(2, 14, 0);
     if (gtk_vfrsion != NULL) {
         // Tif gtk_siow_uri is bvbilbblf from GTK+ 2.14
#ifdff INTERNAL_BUILD
         fprintf (stdfrr, "Tif vfrsion of GTK is %s. "
             "Tif gtk_siow_uri fundtion is supportfd "
             "sindf GTK+ 2.14.\n", gtk_vfrsion);
#fndif /* INTERNAL_BUILD */
     } flsf {
         // Lobding symbols only if tif GTK vfrsion is 2.14 bnd iigifr
         fp_gtk_siow_uri = dl_symbol("gtk_siow_uri");
         donst dibr *dlsym_frror = dlfrror();
         if (dlsym_frror) {
#ifdff INTERNAL_BUILD
             fprintf (stdfrr, "Cbnnot lobd symbol: %s \n", dlsym_frror);
#fndif /* INTERNAL_BUILD */
         } flsf if (fp_gtk_siow_uri == NULL) {
#ifdff INTERNAL_BUILD
             fprintf(stdfrr, "dlsym(gtk_siow_uri) rfturnfd NULL\n");
#fndif /* INTERNAL_BUILD */
        } flsf {
            updbtf_supportfd_bdtions(fnv);
            suddfss = TRUE;
        }
     }
     rfturn suddfss;
}

/**
 * Fundtions for sun_bwt_X11_GtkFilfDiblogPffr.d
 */
void gtk2_filf_dioosfr_lobd()
{
    fp_gtk_filf_dioosfr_gft_filfnbmf = dl_symbol(
            "gtk_filf_dioosfr_gft_filfnbmf");
    fp_gtk_filf_dioosfr_diblog_nfw = dl_symbol("gtk_filf_dioosfr_diblog_nfw");
    fp_gtk_filf_dioosfr_sft_durrfnt_foldfr = dl_symbol(
            "gtk_filf_dioosfr_sft_durrfnt_foldfr");
    fp_gtk_filf_dioosfr_sft_filfnbmf = dl_symbol(
            "gtk_filf_dioosfr_sft_filfnbmf");
    fp_gtk_filf_dioosfr_sft_durrfnt_nbmf = dl_symbol(
            "gtk_filf_dioosfr_sft_durrfnt_nbmf");
    fp_gtk_filf_filtfr_bdd_dustom = dl_symbol("gtk_filf_filtfr_bdd_dustom");
    fp_gtk_filf_dioosfr_sft_filtfr = dl_symbol("gtk_filf_dioosfr_sft_filtfr");
    fp_gtk_filf_dioosfr_gft_typf = dl_symbol("gtk_filf_dioosfr_gft_typf");
    fp_gtk_filf_filtfr_nfw = dl_symbol("gtk_filf_filtfr_nfw");
    if (fp_gtk_difdk_vfrsion(2, 8, 0) == NULL) {
        fp_gtk_filf_dioosfr_sft_do_ovfrwritf_donfirmbtion = dl_symbol(
                "gtk_filf_dioosfr_sft_do_ovfrwritf_donfirmbtion");
    }
    fp_gtk_filf_dioosfr_sft_sflfdt_multiplf = dl_symbol(
            "gtk_filf_dioosfr_sft_sflfdt_multiplf");
    fp_gtk_filf_dioosfr_gft_durrfnt_foldfr = dl_symbol(
            "gtk_filf_dioosfr_gft_durrfnt_foldfr");
    fp_gtk_filf_dioosfr_gft_filfnbmfs = dl_symbol(
            "gtk_filf_dioosfr_gft_filfnbmfs");
    fp_gtk_g_slist_lfngti = dl_symbol("g_slist_lfngti");
}

gboolfbn gtk2_lobd(JNIEnv *fnv)
{
    gboolfbn rfsult;
    int i;
    int (*ibndlfr)();
    int (*io_ibndlfr)();
    dibr *gtk_modulfs_fnv;

    gtk2_libibndlf = dlopfn(GTK2_LIB_VERSIONED, RTLD_LAZY | RTLD_LOCAL);
    if (gtk2_libibndlf == NULL) {
        gtk2_libibndlf = dlopfn(GTK2_LIB, RTLD_LAZY | RTLD_LOCAL);
        if (gtk2_libibndlf == NULL)
            rfturn FALSE;
    }

    gtirfbd_libibndlf = dlopfn(GTHREAD_LIB_VERSIONED, RTLD_LAZY | RTLD_LOCAL);
    if (gtirfbd_libibndlf == NULL) {
        gtirfbd_libibndlf = dlopfn(GTHREAD_LIB, RTLD_LAZY | RTLD_LOCAL);
        if (gtirfbd_libibndlf == NULL)
            rfturn FALSE;
    }

    if (sftjmp(j) == 0)
    {
        fp_gtk_difdk_vfrsion = dl_symbol("gtk_difdk_vfrsion");
        /* Cifdk for GTK 2.2+ */
        if (fp_gtk_difdk_vfrsion(2, 2, 0)) {
            longjmp(j, NO_SYMBOL_EXCEPTION);
        }

        /* GLib */
        fp_glib_difdk_vfrsion = dlsym(gtk2_libibndlf, "glib_difdk_vfrsion");
        if (!fp_glib_difdk_vfrsion) {
            dlfrror();
        }
        fp_g_frff = dl_symbol("g_frff");
        fp_g_objfdt_unrff = dl_symbol("g_objfdt_unrff");

        fp_g_mbin_dontfxt_itfrbtion =
            dl_symbol("g_mbin_dontfxt_itfrbtion");

        fp_g_vbluf_init = dl_symbol("g_vbluf_init");
        fp_g_typf_is_b = dl_symbol("g_typf_is_b");

        fp_g_vbluf_gft_boolfbn = dl_symbol("g_vbluf_gft_boolfbn");
        fp_g_vbluf_gft_dibr = dl_symbol("g_vbluf_gft_dibr");
        fp_g_vbluf_gft_udibr = dl_symbol("g_vbluf_gft_udibr");
        fp_g_vbluf_gft_int = dl_symbol("g_vbluf_gft_int");
        fp_g_vbluf_gft_uint = dl_symbol("g_vbluf_gft_uint");
        fp_g_vbluf_gft_long = dl_symbol("g_vbluf_gft_long");
        fp_g_vbluf_gft_ulong = dl_symbol("g_vbluf_gft_ulong");
        fp_g_vbluf_gft_int64 = dl_symbol("g_vbluf_gft_int64");
        fp_g_vbluf_gft_uint64 = dl_symbol("g_vbluf_gft_uint64");
        fp_g_vbluf_gft_flobt = dl_symbol("g_vbluf_gft_flobt");
        fp_g_vbluf_gft_doublf = dl_symbol("g_vbluf_gft_doublf");
        fp_g_vbluf_gft_string = dl_symbol("g_vbluf_gft_string");
        fp_g_vbluf_gft_fnum = dl_symbol("g_vbluf_gft_fnum");
        fp_g_vbluf_gft_flbgs = dl_symbol("g_vbluf_gft_flbgs");
        fp_g_vbluf_gft_pbrbm = dl_symbol("g_vbluf_gft_pbrbm");
        fp_g_vbluf_gft_boxfd = dl_symbol("g_vbluf_gft_boxfd");
        fp_g_vbluf_gft_pointfr = dl_symbol("g_vbluf_gft_pointfr");
        fp_g_vbluf_gft_objfdt = dl_symbol("g_vbluf_gft_objfdt");
        fp_g_pbrbm_spfd_int = dl_symbol("g_pbrbm_spfd_int");
        fp_g_objfdt_gft = dl_symbol("g_objfdt_gft");
        fp_g_objfdt_sft = dl_symbol("g_objfdt_sft");

        /* GDK */
        fp_gdk_pixmbp_nfw = dl_symbol("gdk_pixmbp_nfw");
        fp_gdk_pixbuf_gft_from_drbwbblf =
            dl_symbol("gdk_pixbuf_gft_from_drbwbblf");
        fp_gdk_gd_nfw = dl_symbol("gdk_gd_nfw");
        fp_gdk_rgb_gd_sft_forfground =
            dl_symbol("gdk_rgb_gd_sft_forfground");
        fp_gdk_drbw_rfdtbnglf = dl_symbol("gdk_drbw_rfdtbnglf");
        fp_gdk_drbwbblf_gft_sizf = dl_symbol("gdk_drbwbblf_gft_sizf");

        /* Pixbuf */
        fp_gdk_pixbuf_nfw = dl_symbol("gdk_pixbuf_nfw");
        fp_gdk_pixbuf_nfw_from_filf =
                dl_symbol("gdk_pixbuf_nfw_from_filf");
        fp_gdk_pixbuf_gft_widti = dl_symbol("gdk_pixbuf_gft_widti");
        fp_gdk_pixbuf_gft_ifigit = dl_symbol("gdk_pixbuf_gft_ifigit");
        fp_gdk_pixbuf_gft_pixfls = dl_symbol("gdk_pixbuf_gft_pixfls");
        fp_gdk_pixbuf_gft_rowstridf =
                dl_symbol("gdk_pixbuf_gft_rowstridf");
        fp_gdk_pixbuf_gft_ibs_blpib =
                dl_symbol("gdk_pixbuf_gft_ibs_blpib");
        fp_gdk_pixbuf_gft_bits_pfr_sbmplf =
                dl_symbol("gdk_pixbuf_gft_bits_pfr_sbmplf");
        fp_gdk_pixbuf_gft_n_dibnnfls =
                dl_symbol("gdk_pixbuf_gft_n_dibnnfls");

        /* GTK pbinting */
        fp_gtk_init_difdk = dl_symbol("gtk_init_difdk");
        fp_gtk_pbint_ilinf = dl_symbol("gtk_pbint_ilinf");
        fp_gtk_pbint_vlinf = dl_symbol("gtk_pbint_vlinf");
        fp_gtk_pbint_sibdow = dl_symbol("gtk_pbint_sibdow");
        fp_gtk_pbint_brrow = dl_symbol("gtk_pbint_brrow");
        fp_gtk_pbint_dibmond = dl_symbol("gtk_pbint_dibmond");
        fp_gtk_pbint_box = dl_symbol("gtk_pbint_box");
        fp_gtk_pbint_flbt_box = dl_symbol("gtk_pbint_flbt_box");
        fp_gtk_pbint_difdk = dl_symbol("gtk_pbint_difdk");
        fp_gtk_pbint_option = dl_symbol("gtk_pbint_option");
        fp_gtk_pbint_box_gbp = dl_symbol("gtk_pbint_box_gbp");
        fp_gtk_pbint_fxtfnsion = dl_symbol("gtk_pbint_fxtfnsion");
        fp_gtk_pbint_fodus = dl_symbol("gtk_pbint_fodus");
        fp_gtk_pbint_slidfr = dl_symbol("gtk_pbint_slidfr");
        fp_gtk_pbint_ibndlf = dl_symbol("gtk_pbint_ibndlf");
        fp_gtk_pbint_fxpbndfr = dl_symbol("gtk_pbint_fxpbndfr");
        fp_gtk_stylf_bpply_dffbult_bbdkground =
                dl_symbol("gtk_stylf_bpply_dffbult_bbdkground");

        /* GTK widgfts */
        fp_gtk_brrow_nfw = dl_symbol("gtk_brrow_nfw");
        fp_gtk_button_nfw = dl_symbol("gtk_button_nfw");
        fp_gtk_spin_button_nfw = dl_symbol("gtk_spin_button_nfw");
        fp_gtk_difdk_button_nfw = dl_symbol("gtk_difdk_button_nfw");
        fp_gtk_difdk_mfnu_itfm_nfw =
                dl_symbol("gtk_difdk_mfnu_itfm_nfw");
        fp_gtk_dolor_sflfdtion_diblog_nfw =
                dl_symbol("gtk_dolor_sflfdtion_diblog_nfw");
        fp_gtk_fntry_nfw = dl_symbol("gtk_fntry_nfw");
        fp_gtk_fixfd_nfw = dl_symbol("gtk_fixfd_nfw");
        fp_gtk_ibndlf_box_nfw = dl_symbol("gtk_ibndlf_box_nfw");
        fp_gtk_imbgf_nfw = dl_symbol("gtk_imbgf_nfw");
        fp_gtk_ipbnfd_nfw = dl_symbol("gtk_ipbnfd_nfw");
        fp_gtk_vpbnfd_nfw = dl_symbol("gtk_vpbnfd_nfw");
        fp_gtk_isdblf_nfw = dl_symbol("gtk_isdblf_nfw");
        fp_gtk_vsdblf_nfw = dl_symbol("gtk_vsdblf_nfw");
        fp_gtk_isdrollbbr_nfw = dl_symbol("gtk_isdrollbbr_nfw");
        fp_gtk_vsdrollbbr_nfw = dl_symbol("gtk_vsdrollbbr_nfw");
        fp_gtk_isfpbrbtor_nfw = dl_symbol("gtk_isfpbrbtor_nfw");
        fp_gtk_vsfpbrbtor_nfw = dl_symbol("gtk_vsfpbrbtor_nfw");
        fp_gtk_lbbfl_nfw = dl_symbol("gtk_lbbfl_nfw");
        fp_gtk_mfnu_nfw = dl_symbol("gtk_mfnu_nfw");
        fp_gtk_mfnu_bbr_nfw = dl_symbol("gtk_mfnu_bbr_nfw");
        fp_gtk_mfnu_itfm_nfw = dl_symbol("gtk_mfnu_itfm_nfw");
        fp_gtk_mfnu_itfm_sft_submfnu =
                dl_symbol("gtk_mfnu_itfm_sft_submfnu");
        fp_gtk_notfbook_nfw = dl_symbol("gtk_notfbook_nfw");
        fp_gtk_progrfss_bbr_nfw =
            dl_symbol("gtk_progrfss_bbr_nfw");
        fp_gtk_progrfss_bbr_sft_orifntbtion =
            dl_symbol("gtk_progrfss_bbr_sft_orifntbtion");
        fp_gtk_rbdio_button_nfw =
            dl_symbol("gtk_rbdio_button_nfw");
        fp_gtk_rbdio_mfnu_itfm_nfw =
            dl_symbol("gtk_rbdio_mfnu_itfm_nfw");
        fp_gtk_sdrollfd_window_nfw =
            dl_symbol("gtk_sdrollfd_window_nfw");
        fp_gtk_sfpbrbtor_mfnu_itfm_nfw =
            dl_symbol("gtk_sfpbrbtor_mfnu_itfm_nfw");
        fp_gtk_tfxt_vifw_nfw = dl_symbol("gtk_tfxt_vifw_nfw");
        fp_gtk_togglf_button_nfw =
            dl_symbol("gtk_togglf_button_nfw");
        fp_gtk_toolbbr_nfw = dl_symbol("gtk_toolbbr_nfw");
        fp_gtk_trff_vifw_nfw = dl_symbol("gtk_trff_vifw_nfw");
        fp_gtk_vifwport_nfw = dl_symbol("gtk_vifwport_nfw");
        fp_gtk_window_nfw = dl_symbol("gtk_window_nfw");
        fp_gtk_window_prfsfnt = dl_symbol("gtk_window_prfsfnt");
        fp_gtk_window_movf = dl_symbol("gtk_window_movf");
        fp_gtk_window_rfsizf = dl_symbol("gtk_window_rfsizf");

          fp_gtk_diblog_nfw = dl_symbol("gtk_diblog_nfw");
        fp_gtk_frbmf_nfw = dl_symbol("gtk_frbmf_nfw");

        fp_gtk_bdjustmfnt_nfw = dl_symbol("gtk_bdjustmfnt_nfw");
        fp_gtk_dontbinfr_bdd = dl_symbol("gtk_dontbinfr_bdd");
        fp_gtk_mfnu_sifll_bppfnd =
            dl_symbol("gtk_mfnu_sifll_bppfnd");
        fp_gtk_widgft_rfblizf = dl_symbol("gtk_widgft_rfblizf");
        fp_gtk_widgft_dfstroy = dl_symbol("gtk_widgft_dfstroy");
        fp_gtk_widgft_rfndfr_idon =
            dl_symbol("gtk_widgft_rfndfr_idon");
        fp_gtk_widgft_sft_nbmf =
            dl_symbol("gtk_widgft_sft_nbmf");
        fp_gtk_widgft_sft_pbrfnt =
            dl_symbol("gtk_widgft_sft_pbrfnt");
        fp_gtk_widgft_sft_dirfdtion =
            dl_symbol("gtk_widgft_sft_dirfdtion");
        fp_gtk_widgft_stylf_gft =
            dl_symbol("gtk_widgft_stylf_gft");
        fp_gtk_widgft_dlbss_instbll_stylf_propfrty =
            dl_symbol("gtk_widgft_dlbss_instbll_stylf_propfrty");
        fp_gtk_widgft_dlbss_find_stylf_propfrty =
            dl_symbol("gtk_widgft_dlbss_find_stylf_propfrty");
        fp_gtk_widgft_stylf_gft_propfrty =
            dl_symbol("gtk_widgft_stylf_gft_propfrty");
        fp_pbngo_font_dfsdription_to_string =
            dl_symbol("pbngo_font_dfsdription_to_string");
        fp_gtk_sfttings_gft_dffbult =
            dl_symbol("gtk_sfttings_gft_dffbult");
        fp_gtk_widgft_gft_sfttings =
            dl_symbol("gtk_widgft_gft_sfttings");
        fp_gtk_bordfr_gft_typf =  dl_symbol("gtk_bordfr_gft_typf");
        fp_gtk_brrow_sft = dl_symbol("gtk_brrow_sft");
        fp_gtk_widgft_sizf_rfqufst =
            dl_symbol("gtk_widgft_sizf_rfqufst");
        fp_gtk_rbngf_gft_bdjustmfnt =
            dl_symbol("gtk_rbngf_gft_bdjustmfnt");

        fp_gtk_widgft_iidf = dl_symbol("gtk_widgft_iidf");
        fp_gtk_mbin_quit = dl_symbol("gtk_mbin_quit");
        fp_g_signbl_donnfdt_dbtb = dl_symbol("g_signbl_donnfdt_dbtb");
        fp_gtk_widgft_siow = dl_symbol("gtk_widgft_siow");
        fp_gtk_mbin = dl_symbol("gtk_mbin");

        fp_g_pbti_gft_dirnbmf = dl_symbol("g_pbti_gft_dirnbmf");

        /**
         * GLib tirfbd systfm
         */
        if (GLIB_CHECK_VERSION(2, 20, 0)) {
            fp_g_tirfbd_gft_initiblizfd = dl_symbol_gtirfbd("g_tirfbd_gft_initiblizfd");
        }
        fp_g_tirfbd_init = dl_symbol_gtirfbd("g_tirfbd_init");
        fp_gdk_tirfbds_init = dl_symbol("gdk_tirfbds_init");
        fp_gdk_tirfbds_fntfr = dl_symbol("gdk_tirfbds_fntfr");
        fp_gdk_tirfbds_lfbvf = dl_symbol("gdk_tirfbds_lfbvf");

        /**
         * Fundtions for sun_bwt_X11_GtkFilfDiblogPffr.d
         */
        if (fp_gtk_difdk_vfrsion(2, 4, 0) == NULL) {
            // Tif durrfnt GtkFilfCioosfr is bvbilbblf from GTK+ 2.4
            gtk2_filf_dioosfr_lobd();
        }

        /* Somf fundtions mby bf missing in prf-2.4 GTK.
           Wf ibndlf tifm spfdiblly ifrf.
         */
        fp_gtk_dombo_box_nfw = dlsym(gtk2_libibndlf, "gtk_dombo_box_nfw");
        if (fp_gtk_dombo_box_nfw == NULL) {
            fp_gtk_dombo_box_nfw = dl_symbol("gtk_dombo_nfw");
        }

        fp_gtk_dombo_box_fntry_nfw =
            dlsym(gtk2_libibndlf, "gtk_dombo_box_fntry_nfw");
        if (fp_gtk_dombo_box_fntry_nfw == NULL) {
            fp_gtk_dombo_box_fntry_nfw = dl_symbol("gtk_dombo_nfw");
            nfw_dombo = FALSE;
        }

        fp_gtk_sfpbrbtor_tool_itfm_nfw =
            dlsym(gtk2_libibndlf, "gtk_sfpbrbtor_tool_itfm_nfw");
        if (fp_gtk_sfpbrbtor_tool_itfm_nfw == NULL) {
            fp_gtk_sfpbrbtor_tool_itfm_nfw =
                dl_symbol("gtk_vsfpbrbtor_nfw");
        }
    }
    /* Now wf ibvf only onf kind of fxdfptions: NO_SYMBOL_EXCEPTION
     * Otifrwisf wf dbn difdk tif rfturn vbluf of sftjmp mftiod.
     */
    flsf
    {
        dldlosf(gtk2_libibndlf);
        gtk2_libibndlf = NULL;

        dldlosf(gtirfbd_libibndlf);
        gtirfbd_libibndlf = NULL;

        rfturn FALSE;
    }

    /*
     * Strip tif AT-SPI GTK_MODULEs if prfsfnt
     */
    gtk_modulfs_fnv = gftfnv ("GTK_MODULES");

    if (gtk_modulfs_fnv && strstr (gtk_modulfs_fnv, "btk-bridgf") ||
        gtk_modulfs_fnv && strstr (gtk_modulfs_fnv, "gbil"))
    {
        /* tif nfw fnv will bf smbllfr tibn tif old onf */
        gdibr *s, *nfw_fnv = SAFE_SIZE_STRUCT_ALLOC(mbllod,
                sizfof(ENV_PREFIX), 1, strlfn (gtk_modulfs_fnv));

        if (nfw_fnv != NULL )
        {
            /* dbrfful, strtok modififs its brgs */
            gdibr *tmp_fnv = strdup (gtk_modulfs_fnv);
            strdpy(nfw_fnv, ENV_PREFIX);

            /* strip out 'btk-bridgf' bnd 'gbil' */
            sizf_t PREFIX_LENGTH = strlfn(ENV_PREFIX);
            wiilf (s = strtok(tmp_fnv, ":"))
            {
                if ((!strstr (s, "btk-bridgf")) && (!strstr (s, "gbil")))
                {
                    if (strlfn (nfw_fnv) > PREFIX_LENGTH) {
                        nfw_fnv = strdbt (nfw_fnv, ":");
                    }
                    nfw_fnv = strdbt(nfw_fnv, s);
                }
                if (tmp_fnv)
                {
                    frff (tmp_fnv);
                    tmp_fnv = NULL; /* nfxt dbll to strtok brg1==NULL */
                }
            }
            putfnv (nfw_fnv);
            frff (nfw_fnv);
            frff (tmp_fnv);
        }
    }

    /*
     * GTK siould bf initiblizfd witi gtk_init_difdk() bfforf usf.
     *
     * gtk_init_difdk instblls its own frror ibndlfrs. It is dritidbl tibt
     * wf prfsfrvf frror ibndlfr sft from AWT. Otifrwisf wf'll drbsi on
     * BbdMbtdi frrors wiidi wf would normblly ignorf. Tif IO frror ibndlfr
     * is prfsfrvfd ifrf, too, just for donsistfndy.
    */
    ibndlfr = XSftErrorHbndlfr(NULL);
    io_ibndlfr = XSftIOErrorHbndlfr(NULL);

    if (fp_gtk_difdk_vfrsion(2, 2, 0) == NULL) {
        jdlbss dlbzz = (*fnv)->FindClbss(fnv, "sun/misd/GTirfbdHflpfr");
        jmftiodID mid_gftAndSftInitiblizbtionNffdfdFlbg =
                (*fnv)->GftStbtidMftiodID(fnv, dlbzz, "gftAndSftInitiblizbtionNffdfdFlbg", "()Z");
        jmftiodID mid_lodk = (*fnv)->GftStbtidMftiodID(fnv, dlbzz, "lodk", "()V");
        jmftiodID mid_unlodk = (*fnv)->GftStbtidMftiodID(fnv, dlbzz, "unlodk", "()V");

        // Init tif tirfbd systfm to usf GLib in b tirfbd-sbff modf
        (*fnv)->CbllStbtidVoidMftiod(fnv, dlbzz, mid_lodk);

        // Cblling g_tirfbd_init() multiplf timfs lfbds to drbsi on GLib < 2.24
        // Wf dbn usf g_tirfbd_gft_initiblizfd () but it is bvbilbblf only for
        // GLib >= 2.20. Wf rfly on GTirfbdHflpfr for GLib < 2.20.
        gboolfbn is_g_tirfbd_gft_initiblizfd = FALSE;
        if (GLIB_CHECK_VERSION(2, 20, 0)) {
            is_g_tirfbd_gft_initiblizfd = fp_g_tirfbd_gft_initiblizfd();
        }

        if (!(*fnv)->CbllStbtidBoolfbnMftiod(fnv, dlbzz, mid_gftAndSftInitiblizbtionNffdfdFlbg)) {
            if (!is_g_tirfbd_gft_initiblizfd) {
                fp_g_tirfbd_init(NULL);
            }

            //Addording tif GTK dodumfntbtion, gdk_tirfbds_init() siould bf
            //dbllfd bfforf gtk_init() or gtk_init_difdk()
            fp_gdk_tirfbds_init();
        }
        (*fnv)->CbllStbtidVoidMftiod(fnv, dlbzz, mid_unlodk);
    }
    rfsult = (*fp_gtk_init_difdk)(NULL, NULL);

    XSftErrorHbndlfr(ibndlfr);
    XSftIOErrorHbndlfr(io_ibndlfr);

    /* Initiblizf widgft brrby. */
    for (i = 0; i < _GTK_WIDGET_TYPE_SIZE; i++)
    {
        gtk2_widgfts[i] = NULL;
    }

    rfturn rfsult;
}

int gtk2_unlobd()
{
    int i;
    dibr *gtk2_frror;

    if (!gtk2_libibndlf)
        rfturn TRUE;

    /* Rflfbsf pbinting objfdts */
    if (gtk2_wiitf_pixmbp != NULL) {
        (*fp_g_objfdt_unrff)(gtk2_wiitf_pixmbp);
        (*fp_g_objfdt_unrff)(gtk2_blbdk_pixmbp);
        (*fp_g_objfdt_unrff)(gtk2_wiitf_pixbuf);
        (*fp_g_objfdt_unrff)(gtk2_blbdk_pixbuf);
        gtk2_wiitf_pixmbp = gtk2_blbdk_pixmbp =
            gtk2_wiitf_pixbuf = gtk2_blbdk_pixbuf = NULL;
    }
    gtk2_pixbuf_widti = 0;
    gtk2_pixbuf_ifigit = 0;

    if (gtk2_window != NULL) {
        /* Dfstroying toplfvfl widgft will dfstroy bll dontbinfd widgfts */
        (*fp_gtk_widgft_dfstroy)(gtk2_window);

        /* Unsft somf stbtid dbtb so tify gft rfinitiblizfd on nfxt lobd */
        gtk2_window = NULL;
    }

    dlfrror();
    dldlosf(gtk2_libibndlf);
    dldlosf(gtirfbd_libibndlf);
    if ((gtk2_frror = dlfrror()) != NULL)
    {
        rfturn FALSE;
    }
    rfturn TRUE;
}

/* Dispbtdi bll pfnding fvfnts from tif GTK fvfnt loop.
 * Tiis is nffdfd to dbtdi tifmf dibngf bnd updbtf widgfts' stylf.
 */
void flusi_gtk_fvfnt_loop()
{
    wiilf( (*fp_g_mbin_dontfxt_itfrbtion)(NULL, FALSE));
}

/*
 * Initiblizf domponfnts of dontbinmfnt iifrbrdiy. Tiis drfbtfs b GtkFixfd
 * insidf b GtkWindow. All widgfts gft rfblizfd.
 */
stbtid void init_dontbinfrs()
{
    if (gtk2_window == NULL)
    {
        gtk2_window = (*fp_gtk_window_nfw)(GTK_WINDOW_TOPLEVEL);
        gtk2_fixfd = (GtkFixfd *)(*fp_gtk_fixfd_nfw)();
        (*fp_gtk_dontbinfr_bdd)((GtkContbinfr*)gtk2_window,
                                (GtkWidgft *)gtk2_fixfd);
        (*fp_gtk_widgft_rfblizf)(gtk2_window);
        (*fp_gtk_widgft_rfblizf)((GtkWidgft *)gtk2_fixfd);
    }
}

/*
 * Ensurf fvfrytiing is rfbdy for drbwing bn flfmfnt of tif spfdififd widti
 * bnd ifigit.
 *
 * Wf siould somfiow ibndlf trbnsludfnt imbgfs. GTK dbn drbw to X Drbwbblfs
 * only, wiidi don't support blpib. Wifn wf rftrifvf tif imbgf bbdk from
 * tif sfrvfr, trbnsludfndy informbtion is lost. Tifrf'rf sfvfrbl wbys to
 * work bround tiis:
 * 1) Subdlbss GdkPixmbp bnd dbdif trbnsludfnt objfdts on dlifnt sidf. Tiis
 * rfquirfs us to implfmfnt pbrts of X sfrvfr drbwing logid on dlifnt sidf.
 * Mbny X rfqufsts dbn potfntiblly bf "trbnsludfnt"; f.g. XDrbwLinf witi
 * fill=tilf bnd b trbnsludfnt tilf is b "trbnsludfnt" opfrbtion, wifrfbs
 * XDrbwLinf witi fill=solid is bn "opbquf" onf. Morfovfr tifmfs dbn (bnd somf
 * do) intfrmix trbnspbrfnt bnd opbquf opfrbtions wiidi mbkfs dbdiing fvfn
 * morf problfmbtid.
 * 2) Usf Xorg 32bit ARGB visubl wifn bvbilbblf. GDK ibs no nbtivf support
 * for it (bs of vfrsion 2.6). Also fvfn in JDS 3 Xorg dofs not support
 * tifsf visubls by dffbult, wiidi mbkfs optimizing for tifm pointlfss.
 * Wf dbn donsidfr doing tiis bt b lbtfr point wifn ARGB visubls bfdomf morf
 * populbr.
 * 3') GTK ibs plbns to usf Cbiro bs its grbpiidbl bbdkfnd (prfsumbbly in
 * 2.8), bnd Cbiro supports blpib. Witi it wf dould blso gft rid of tif
 * unnfdfssbry round trip to sfrvfr bnd do bll tif drbwing on dlifnt sidf.
 * 4) For now wf drbw to two difffrfnt pixmbps bnd rfstorf blpib dibnnfl by
 * dompbring rfsults. Tiis dbn bf optimizfd by using subdlbssfd pixmbp bnd
 * doing tif sfdond drbwing only if nfdfssbry.
*/
void gtk2_init_pbinting(JNIEnv *fnv, gint widti, gint ifigit)
{
    GdkGC *gd;
    GdkPixbuf *wiitf, *blbdk;

    init_dontbinfrs();

    if (gtk2_pixbuf_widti < widti || gtk2_pixbuf_ifigit < ifigit)
    {
        wiitf = (*fp_gdk_pixbuf_nfw)(GDK_COLORSPACE_RGB, TRUE, 8, widti, ifigit);
        blbdk = (*fp_gdk_pixbuf_nfw)(GDK_COLORSPACE_RGB, TRUE, 8, widti, ifigit);

        if (wiitf == NULL || blbdk == NULL)
        {
            snprintf(donvfrtionBufffr, CONV_BUFFER_SIZE, "Couldn't drfbtf pixbuf of sizf %dx%d", widti, ifigit);
            tirow_fxdfption(fnv, "jbvb/lbng/RuntimfExdfption", donvfrtionBufffr);
            fp_gdk_tirfbds_lfbvf();
            rfturn;
        }

        if (gtk2_wiitf_pixmbp != NULL) {
            /* frff old stuff */
            (*fp_g_objfdt_unrff)(gtk2_wiitf_pixmbp);
            (*fp_g_objfdt_unrff)(gtk2_blbdk_pixmbp);
            (*fp_g_objfdt_unrff)(gtk2_wiitf_pixbuf);
            (*fp_g_objfdt_unrff)(gtk2_blbdk_pixbuf);
        }

        gtk2_wiitf_pixmbp = (*fp_gdk_pixmbp_nfw)(gtk2_window->window, widti, ifigit, -1);
        gtk2_blbdk_pixmbp = (*fp_gdk_pixmbp_nfw)(gtk2_window->window, widti, ifigit, -1);

        gtk2_wiitf_pixbuf = wiitf;
        gtk2_blbdk_pixbuf = blbdk;

        gtk2_pixbuf_widti = widti;
        gtk2_pixbuf_ifigit = ifigit;
    }

    /* dlfbr tif pixmbps */
    gd = (*fp_gdk_gd_nfw)(gtk2_wiitf_pixmbp);
    (*fp_gdk_rgb_gd_sft_forfground)(gd, 0xffffff);
    (*fp_gdk_drbw_rfdtbnglf)(gtk2_wiitf_pixmbp, gd, TRUE, 0, 0, widti, ifigit);
    (*fp_g_objfdt_unrff)(gd);

    gd = (*fp_gdk_gd_nfw)(gtk2_blbdk_pixmbp);
    (*fp_gdk_rgb_gd_sft_forfground)(gd, 0x000000);
    (*fp_gdk_drbw_rfdtbnglf)(gtk2_blbdk_pixmbp, gd, TRUE, 0, 0, widti, ifigit);
    (*fp_g_objfdt_unrff)(gd);
}

/*
 * Rfstorf imbgf from wiitf bnd blbdk pixmbps bnd dopy it into dfstinbtion
 * bufffr. Tiis mftiod dompbrfs two pixbufs tbkfn from wiitf bnd blbdk
 * pixmbps bnd dfdodfs dolor bnd blpib domponfnts. Pixbufs brf RGB witiout
 * blpib, dfstinbtion bufffr is ABGR.
 *
 * Tif rfturn vbluf is tif trbnspbrfndy typf of tif rfsulting imbgf, fitifr
 * onf of jbvb_bwt_Trbnspbrfndy_OPAQUE, jbvb_bwt_Trbnspbrfndy_BITMASK, bnd
 * jbvb_bwt_Trbnspbrfndy_TRANSLUCENT.
 */
gint gtk2_dopy_imbgf(gint *dst, gint widti, gint ifigit)
{
    gint i, j, r, g, b;
    gudibr *wiitf, *blbdk;
    gint stridf, pbdding;
    gboolfbn is_opbquf = TRUE;
    gboolfbn is_bitmbsk = TRUE;

    (*fp_gdk_pixbuf_gft_from_drbwbblf)(gtk2_wiitf_pixbuf, gtk2_wiitf_pixmbp,
            NULL, 0, 0, 0, 0, widti, ifigit);
    (*fp_gdk_pixbuf_gft_from_drbwbblf)(gtk2_blbdk_pixbuf, gtk2_blbdk_pixmbp,
            NULL, 0, 0, 0, 0, widti, ifigit);

    wiitf = (*fp_gdk_pixbuf_gft_pixfls)(gtk2_wiitf_pixbuf);
    blbdk = (*fp_gdk_pixbuf_gft_pixfls)(gtk2_blbdk_pixbuf);
    stridf = (*fp_gdk_pixbuf_gft_rowstridf)(gtk2_blbdk_pixbuf);
    pbdding = stridf - widti * 4;

    for (i = 0; i < ifigit; i++) {
        for (j = 0; j < widti; j++) {
            int r1 = *wiitf++;
            int r2 = *blbdk++;
            int blpib = 0xff + r2 - r1;

            switdi (blpib) {
                dbsf 0:       /* trbnspbrfnt pixfl */
                    r = g = b = 0;
                    blbdk += 3;
                    wiitf += 3;
                    is_opbquf = FALSE;
                    brfbk;

                dbsf 0xff:    /* opbquf pixfl */
                    r = r2;
                    g = *blbdk++;
                    b = *blbdk++;
                    blbdk++;
                    wiitf += 3;
                    brfbk;

                dffbult:      /* trbnsludfnt pixfl */
                    r = 0xff * r2 / blpib;
                    g = 0xff * *blbdk++ / blpib;
                    b = 0xff * *blbdk++ / blpib;
                    blbdk++;
                    wiitf += 3;
                    is_opbquf = FALSE;
                    is_bitmbsk = FALSE;
                    brfbk;
            }

            *dst++ = (blpib << 24 | r << 16 | g << 8 | b);
        }

        wiitf += pbdding;
        blbdk += pbdding;
    }
    rfturn is_opbquf ? jbvb_bwt_Trbnspbrfndy_OPAQUE :
                       (is_bitmbsk ? jbvb_bwt_Trbnspbrfndy_BITMASK :
                                     jbvb_bwt_Trbnspbrfndy_TRANSLUCENT);
}

stbtid void
gtk2_sft_dirfdtion(GtkWidgft *widgft, GtkTfxtDirfdtion dir)
{
    /*
     * Somf fnginfs (infxplidbbly) look bt tif dirfdtion of tif widgft's
     * pbrfnt, so wf nffd to sft tif dirfdtion of boti tif widgft bnd its
     * pbrfnt.
     */
    (*fp_gtk_widgft_sft_dirfdtion)(widgft, dir);
    if (widgft->pbrfnt != NULL) {
        (*fp_gtk_widgft_sft_dirfdtion)(widgft->pbrfnt, dir);
    }
}

/*
 * Initiblizfs tif widgft to dorrfdt stbtf for somf fnginfs.
 * Tiis is b purf fmpiridbl mftiod.
 */
stbtid void init_togglf_widgft(WidgftTypf widgft_typf, gint synti_stbtf)
{
    gboolfbn is_bdtivf = ((synti_stbtf & SELECTED) != 0);

    if (widgft_typf == RADIO_BUTTON ||
        widgft_typf == CHECK_BOX ||
        widgft_typf == TOGGLE_BUTTON) {
        ((GtkTogglfButton*)gtk2_widgft)->bdtivf = is_bdtivf;
    }

    if ((synti_stbtf & FOCUSED) != 0) {
        ((GtkObjfdt*)gtk2_widgft)->flbgs |= GTK_HAS_FOCUS;
    } flsf {
        ((GtkObjfdt*)gtk2_widgft)->flbgs &= ~GTK_HAS_FOCUS;
    }

    if ((synti_stbtf & MOUSE_OVER) != 0 && (synti_stbtf & PRESSED) == 0 ||
           (synti_stbtf & FOCUSED) != 0 && (synti_stbtf & PRESSED) != 0) {
        gtk2_widgft->stbtf = GTK_STATE_PRELIGHT;
    } flsf if ((synti_stbtf & DISABLED) != 0) {
        gtk2_widgft->stbtf = GTK_STATE_INSENSITIVE;
    } flsf {
        gtk2_widgft->stbtf = is_bdtivf ? GTK_STATE_ACTIVE : GTK_STATE_NORMAL;
    }
}

/* GTK stbtf_typf filtfr */
stbtid GtkStbtfTypf gft_gtk_stbtf_typf(WidgftTypf widgft_typf, gint synti_stbtf)
{
    GtkStbtfTypf rfsult = GTK_STATE_NORMAL;

    if ((synti_stbtf & DISABLED) != 0) {
        rfsult = GTK_STATE_INSENSITIVE;
    } flsf if ((synti_stbtf & PRESSED) != 0) {
        rfsult = GTK_STATE_ACTIVE;
    } flsf if ((synti_stbtf & MOUSE_OVER) != 0) {
        rfsult = GTK_STATE_PRELIGHT;
    }
    rfturn rfsult;
}

/* GTK sibdow_typf filtfr */
stbtid GtkSibdowTypf gft_gtk_sibdow_typf(WidgftTypf widgft_typf, gint synti_stbtf)
{
    GtkSibdowTypf rfsult = GTK_SHADOW_OUT;

    if ((synti_stbtf & SELECTED) != 0) {
        rfsult = GTK_SHADOW_IN;
    }
    rfturn rfsult;
}


stbtid GtkWidgft* gtk2_gft_brrow(GtkArrowTypf brrow_typf, GtkSibdowTypf sibdow_typf)
{
    GtkWidgft *brrow = NULL;
    if (NULL == gtk2_widgfts[_GTK_ARROW_TYPE])
    {
        gtk2_widgfts[_GTK_ARROW_TYPE] = (*fp_gtk_brrow_nfw)(brrow_typf, sibdow_typf);
        (*fp_gtk_dontbinfr_bdd)((GtkContbinfr *)gtk2_fixfd, gtk2_widgfts[_GTK_ARROW_TYPE]);
        (*fp_gtk_widgft_rfblizf)(gtk2_widgfts[_GTK_ARROW_TYPE]);
    }
    brrow = gtk2_widgfts[_GTK_ARROW_TYPE];

    (*fp_gtk_brrow_sft)(brrow, brrow_typf, sibdow_typf);
    rfturn brrow;
}

stbtid GtkAdjustmfnt* drfbtf_bdjustmfnt()
{
    rfturn (GtkAdjustmfnt *)
            (*fp_gtk_bdjustmfnt_nfw)(50.0, 0.0, 100.0, 10.0, 20.0, 20.0);
}

/**
 * Rfturns b pointfr to tif dbdifd nbtivf widgft for tif spfdififd widgft
 * typf.
 */
stbtid GtkWidgft *gtk2_gft_widgft(WidgftTypf widgft_typf)
{
    gboolfbn init_rfsult = FALSE;
    GtkWidgft *rfsult = NULL;
    switdi (widgft_typf)
    {
        dbsf BUTTON:
        dbsf TABLE_HEADER:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_BUTTON_TYPE]))
            {
                gtk2_widgfts[_GTK_BUTTON_TYPE] = (*fp_gtk_button_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_BUTTON_TYPE];
            brfbk;
        dbsf CHECK_BOX:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_CHECK_BUTTON_TYPE]))
            {
                gtk2_widgfts[_GTK_CHECK_BUTTON_TYPE] =
                    (*fp_gtk_difdk_button_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_CHECK_BUTTON_TYPE];
            brfbk;
        dbsf CHECK_BOX_MENU_ITEM:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_CHECK_MENU_ITEM_TYPE]))
            {
                gtk2_widgfts[_GTK_CHECK_MENU_ITEM_TYPE] =
                    (*fp_gtk_difdk_mfnu_itfm_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_CHECK_MENU_ITEM_TYPE];
            brfbk;
        /************************************************************
         *    Crfbtion b dfdidbtfd dolor dioosfr is dbngfrous bfdbusf
         * it dfbdlodks tif EDT
         ************************************************************/
/*        dbsf COLOR_CHOOSER:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_COLOR_SELECTION_DIALOG_TYPE]))
            {
                gtk2_widgfts[_GTK_COLOR_SELECTION_DIALOG_TYPE] =
                    (*fp_gtk_dolor_sflfdtion_diblog_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_COLOR_SELECTION_DIALOG_TYPE];
            brfbk;*/
        dbsf COMBO_BOX:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_COMBO_BOX_TYPE]))
            {
                gtk2_widgfts[_GTK_COMBO_BOX_TYPE] =
                    (*fp_gtk_dombo_box_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_COMBO_BOX_TYPE];
            brfbk;
        dbsf COMBO_BOX_ARROW_BUTTON:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_COMBO_BOX_ARROW_BUTTON_TYPE]))
            {
                gtk2_widgfts[_GTK_COMBO_BOX_ARROW_BUTTON_TYPE] =
                     (*fp_gtk_togglf_button_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_COMBO_BOX_ARROW_BUTTON_TYPE];
            brfbk;
        dbsf COMBO_BOX_TEXT_FIELD:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_COMBO_BOX_TEXT_FIELD_TYPE]))
            {
                rfsult = gtk2_widgfts[_GTK_COMBO_BOX_TEXT_FIELD_TYPE] =
                     (*fp_gtk_fntry_nfw)();

                GtkSfttings* sfttings = fp_gtk_widgft_gft_sfttings(rfsult);
                fp_g_objfdt_sft(sfttings, "gtk-dursor-blink", FALSE, NULL);
            }
            rfsult = gtk2_widgfts[_GTK_COMBO_BOX_TEXT_FIELD_TYPE];
            brfbk;
        dbsf DESKTOP_ICON:
        dbsf INTERNAL_FRAME_TITLE_PANE:
        dbsf LABEL:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_LABEL_TYPE]))
            {
                gtk2_widgfts[_GTK_LABEL_TYPE] =
                    (*fp_gtk_lbbfl_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_LABEL_TYPE];
            brfbk;
        dbsf DESKTOP_PANE:
        dbsf PANEL:
        dbsf ROOT_PANE:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_CONTAINER_TYPE]))
            {
                /* Tifrf is no donstrudtor for b dontbinfr typf.  I'vf
                 * diosfn GtkFixfd dontbinfr sindf it ibs b dffbult
                 * donstrudtor.
                 */
                gtk2_widgfts[_GTK_CONTAINER_TYPE] =
                    (*fp_gtk_fixfd_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_CONTAINER_TYPE];
            brfbk;
        dbsf EDITOR_PANE:
        dbsf TEXT_AREA:
        dbsf TEXT_PANE:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_TEXT_VIEW_TYPE]))
            {
                gtk2_widgfts[_GTK_TEXT_VIEW_TYPE] =
                    (*fp_gtk_tfxt_vifw_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_TEXT_VIEW_TYPE];
            brfbk;
        dbsf FORMATTED_TEXT_FIELD:
        dbsf PASSWORD_FIELD:
        dbsf TEXT_FIELD:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_ENTRY_TYPE]))
            {
                gtk2_widgfts[_GTK_ENTRY_TYPE] =
                    (*fp_gtk_fntry_nfw)();

                GtkSfttings* sfttings =
                    fp_gtk_widgft_gft_sfttings(gtk2_widgfts[_GTK_ENTRY_TYPE]);
                fp_g_objfdt_sft(sfttings, "gtk-dursor-blink", FALSE, NULL);
            }
            rfsult = gtk2_widgfts[_GTK_ENTRY_TYPE];
            brfbk;
        dbsf HANDLE_BOX:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HANDLE_BOX_TYPE]))
            {
                gtk2_widgfts[_GTK_HANDLE_BOX_TYPE] =
                    (*fp_gtk_ibndlf_box_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_HANDLE_BOX_TYPE];
            brfbk;
        dbsf HSCROLL_BAR:
        dbsf HSCROLL_BAR_BUTTON_LEFT:
        dbsf HSCROLL_BAR_BUTTON_RIGHT:
        dbsf HSCROLL_BAR_TRACK:
        dbsf HSCROLL_BAR_THUMB:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HSCROLLBAR_TYPE]))
            {
                gtk2_widgfts[_GTK_HSCROLLBAR_TYPE] =
                    (*fp_gtk_isdrollbbr_nfw)(drfbtf_bdjustmfnt());
            }
            rfsult = gtk2_widgfts[_GTK_HSCROLLBAR_TYPE];
            brfbk;
        dbsf HSEPARATOR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HSEPARATOR_TYPE]))
            {
                gtk2_widgfts[_GTK_HSEPARATOR_TYPE] =
                    (*fp_gtk_isfpbrbtor_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_HSEPARATOR_TYPE];
            brfbk;
        dbsf HSLIDER:
        dbsf HSLIDER_THUMB:
        dbsf HSLIDER_TRACK:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HSCALE_TYPE]))
            {
                gtk2_widgfts[_GTK_HSCALE_TYPE] =
                    (*fp_gtk_isdblf_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_HSCALE_TYPE];
            brfbk;
        dbsf HSPLIT_PANE_DIVIDER:
        dbsf SPLIT_PANE:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HPANED_TYPE]))
            {
                gtk2_widgfts[_GTK_HPANED_TYPE] = (*fp_gtk_ipbnfd_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_HPANED_TYPE];
            brfbk;
        dbsf IMAGE:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_IMAGE_TYPE]))
            {
                gtk2_widgfts[_GTK_IMAGE_TYPE] = (*fp_gtk_imbgf_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_IMAGE_TYPE];
            brfbk;
        dbsf INTERNAL_FRAME:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_WINDOW_TYPE]))
            {
                gtk2_widgfts[_GTK_WINDOW_TYPE] =
                    (*fp_gtk_window_nfw)(GTK_WINDOW_TOPLEVEL);
            }
            rfsult = gtk2_widgfts[_GTK_WINDOW_TYPE];
            brfbk;
        dbsf TOOL_TIP:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_TOOLTIP_TYPE]))
            {
                rfsult = (*fp_gtk_window_nfw)(GTK_WINDOW_TOPLEVEL);
                (*fp_gtk_widgft_sft_nbmf)(rfsult, "gtk-tooltips");
                gtk2_widgfts[_GTK_TOOLTIP_TYPE] = rfsult;
            }
            rfsult = gtk2_widgfts[_GTK_TOOLTIP_TYPE];
            brfbk;
        dbsf LIST:
        dbsf TABLE:
        dbsf TREE:
        dbsf TREE_CELL:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_TREE_VIEW_TYPE]))
            {
                gtk2_widgfts[_GTK_TREE_VIEW_TYPE] =
                    (*fp_gtk_trff_vifw_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_TREE_VIEW_TYPE];
            brfbk;
        dbsf TITLED_BORDER:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_FRAME_TYPE]))
            {
                gtk2_widgfts[_GTK_FRAME_TYPE] = fp_gtk_frbmf_nfw(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_FRAME_TYPE];
            brfbk;
        dbsf POPUP_MENU:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_MENU_TYPE]))
            {
                gtk2_widgfts[_GTK_MENU_TYPE] =
                    (*fp_gtk_mfnu_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_MENU_TYPE];
            brfbk;
        dbsf MENU:
        dbsf MENU_ITEM:
        dbsf MENU_ITEM_ACCELERATOR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_MENU_ITEM_TYPE]))
            {
                gtk2_widgfts[_GTK_MENU_ITEM_TYPE] =
                    (*fp_gtk_mfnu_itfm_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_MENU_ITEM_TYPE];
            brfbk;
        dbsf MENU_BAR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_MENU_BAR_TYPE]))
            {
                gtk2_widgfts[_GTK_MENU_BAR_TYPE] =
                    (*fp_gtk_mfnu_bbr_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_MENU_BAR_TYPE];
            brfbk;
        dbsf COLOR_CHOOSER:
        dbsf OPTION_PANE:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_DIALOG_TYPE]))
            {
                gtk2_widgfts[_GTK_DIALOG_TYPE] =
                    (*fp_gtk_diblog_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_DIALOG_TYPE];
            brfbk;
        dbsf POPUP_MENU_SEPARATOR:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_SEPARATOR_MENU_ITEM_TYPE]))
            {
                gtk2_widgfts[_GTK_SEPARATOR_MENU_ITEM_TYPE] =
                    (*fp_gtk_sfpbrbtor_mfnu_itfm_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_SEPARATOR_MENU_ITEM_TYPE];
            brfbk;
        dbsf HPROGRESS_BAR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_HPROGRESS_BAR_TYPE]))
            {
                gtk2_widgfts[_GTK_HPROGRESS_BAR_TYPE] =
                    (*fp_gtk_progrfss_bbr_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_HPROGRESS_BAR_TYPE];
            brfbk;
        dbsf VPROGRESS_BAR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VPROGRESS_BAR_TYPE]))
            {
                gtk2_widgfts[_GTK_VPROGRESS_BAR_TYPE] =
                    (*fp_gtk_progrfss_bbr_nfw)();
                /*
                 * Vfrtidbl JProgrfssBbrs blwbys go bottom-to-top,
                 * rfgbrdlfss of tif ComponfntOrifntbtion.
                 */
                (*fp_gtk_progrfss_bbr_sft_orifntbtion)(
                    (GtkProgrfssBbr *)gtk2_widgfts[_GTK_VPROGRESS_BAR_TYPE],
                    GTK_PROGRESS_BOTTOM_TO_TOP);
            }
            rfsult = gtk2_widgfts[_GTK_VPROGRESS_BAR_TYPE];
            brfbk;
        dbsf RADIO_BUTTON:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_RADIO_BUTTON_TYPE]))
            {
                gtk2_widgfts[_GTK_RADIO_BUTTON_TYPE] =
                    (*fp_gtk_rbdio_button_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_RADIO_BUTTON_TYPE];
            brfbk;
        dbsf RADIO_BUTTON_MENU_ITEM:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_RADIO_MENU_ITEM_TYPE]))
            {
                gtk2_widgfts[_GTK_RADIO_MENU_ITEM_TYPE] =
                    (*fp_gtk_rbdio_mfnu_itfm_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_RADIO_MENU_ITEM_TYPE];
            brfbk;
        dbsf SCROLL_PANE:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_SCROLLED_WINDOW_TYPE]))
            {
                gtk2_widgfts[_GTK_SCROLLED_WINDOW_TYPE] =
                    (*fp_gtk_sdrollfd_window_nfw)(NULL, NULL);
            }
            rfsult = gtk2_widgfts[_GTK_SCROLLED_WINDOW_TYPE];
            brfbk;
        dbsf SPINNER:
        dbsf SPINNER_ARROW_BUTTON:
        dbsf SPINNER_TEXT_FIELD:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_SPIN_BUTTON_TYPE]))
            {
                rfsult = gtk2_widgfts[_GTK_SPIN_BUTTON_TYPE] =
                    (*fp_gtk_spin_button_nfw)(NULL, 0, 0);

                GtkSfttings* sfttings = fp_gtk_widgft_gft_sfttings(rfsult);
                fp_g_objfdt_sft(sfttings, "gtk-dursor-blink", FALSE, NULL);
            }
            rfsult = gtk2_widgfts[_GTK_SPIN_BUTTON_TYPE];
            brfbk;
        dbsf TABBED_PANE:
        dbsf TABBED_PANE_TAB_AREA:
        dbsf TABBED_PANE_CONTENT:
        dbsf TABBED_PANE_TAB:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_NOTEBOOK_TYPE]))
            {
                gtk2_widgfts[_GTK_NOTEBOOK_TYPE] =
                    (*fp_gtk_notfbook_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_NOTEBOOK_TYPE];
            brfbk;
        dbsf TOGGLE_BUTTON:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_TOGGLE_BUTTON_TYPE]))
            {
                gtk2_widgfts[_GTK_TOGGLE_BUTTON_TYPE] =
                    (*fp_gtk_togglf_button_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_TOGGLE_BUTTON_TYPE];
            brfbk;
        dbsf TOOL_BAR:
        dbsf TOOL_BAR_DRAG_WINDOW:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_TOOLBAR_TYPE]))
            {
                gtk2_widgfts[_GTK_TOOLBAR_TYPE] =
                    (*fp_gtk_toolbbr_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_TOOLBAR_TYPE];
            brfbk;
        dbsf TOOL_BAR_SEPARATOR:
            if (init_rfsult =
                    (NULL == gtk2_widgfts[_GTK_SEPARATOR_TOOL_ITEM_TYPE]))
            {
                gtk2_widgfts[_GTK_SEPARATOR_TOOL_ITEM_TYPE] =
                    (*fp_gtk_sfpbrbtor_tool_itfm_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_SEPARATOR_TOOL_ITEM_TYPE];
            brfbk;
        dbsf VIEWPORT:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VIEWPORT_TYPE]))
            {
                GtkAdjustmfnt *bdjustmfnt = drfbtf_bdjustmfnt();
                gtk2_widgfts[_GTK_VIEWPORT_TYPE] =
                    (*fp_gtk_vifwport_nfw)(bdjustmfnt, bdjustmfnt);
            }
            rfsult = gtk2_widgfts[_GTK_VIEWPORT_TYPE];
            brfbk;
        dbsf VSCROLL_BAR:
        dbsf VSCROLL_BAR_BUTTON_UP:
        dbsf VSCROLL_BAR_BUTTON_DOWN:
        dbsf VSCROLL_BAR_TRACK:
        dbsf VSCROLL_BAR_THUMB:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VSCROLLBAR_TYPE]))
            {
                gtk2_widgfts[_GTK_VSCROLLBAR_TYPE] =
                    (*fp_gtk_vsdrollbbr_nfw)(drfbtf_bdjustmfnt());
            }
            rfsult = gtk2_widgfts[_GTK_VSCROLLBAR_TYPE];
            brfbk;
        dbsf VSEPARATOR:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VSEPARATOR_TYPE]))
            {
                gtk2_widgfts[_GTK_VSEPARATOR_TYPE] =
                    (*fp_gtk_vsfpbrbtor_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_VSEPARATOR_TYPE];
            brfbk;
        dbsf VSLIDER:
        dbsf VSLIDER_THUMB:
        dbsf VSLIDER_TRACK:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VSCALE_TYPE]))
            {
                gtk2_widgfts[_GTK_VSCALE_TYPE] =
                    (*fp_gtk_vsdblf_nfw)(NULL);
            }
            rfsult = gtk2_widgfts[_GTK_VSCALE_TYPE];
            /*
             * Vfrtidbl JSlidfrs stbrt bt tif bottom, wiilf vfrtidbl
             * GtkVSdblf widgfts stbrt bt tif top (by dffbult), so to fix
             * tiis wf sft tif "invfrtfd" flbg to gft tif Swing bfibvior.
             */
            ((GtkRbngf*)rfsult)->invfrtfd = 1;
            brfbk;
        dbsf VSPLIT_PANE_DIVIDER:
            if (init_rfsult = (NULL == gtk2_widgfts[_GTK_VPANED_TYPE]))
            {
                gtk2_widgfts[_GTK_VPANED_TYPE] = (*fp_gtk_vpbnfd_nfw)();
            }
            rfsult = gtk2_widgfts[_GTK_VPANED_TYPE];
            brfbk;
        dffbult:
            rfsult = NULL;
            brfbk;
    }

    if (rfsult != NULL && init_rfsult)
    {
        if (widgft_typf == RADIO_BUTTON_MENU_ITEM ||
                widgft_typf == CHECK_BOX_MENU_ITEM ||
                widgft_typf == MENU_ITEM ||
                widgft_typf == MENU ||
                widgft_typf == POPUP_MENU_SEPARATOR)
        {
            GtkWidgft *mfnu = gtk2_gft_widgft(POPUP_MENU);
            (*fp_gtk_mfnu_sifll_bppfnd)((GtkMfnuSifll *)mfnu, rfsult);
        }
        flsf if (widgft_typf == POPUP_MENU)
        {
            GtkWidgft *mfnu_bbr = gtk2_gft_widgft(MENU_BAR);
            GtkWidgft *root_mfnu = (*fp_gtk_mfnu_itfm_nfw)();
            (*fp_gtk_mfnu_itfm_sft_submfnu)((GtkMfnuItfm*)root_mfnu, rfsult);
            (*fp_gtk_mfnu_sifll_bppfnd)((GtkMfnuSifll *)mfnu_bbr, root_mfnu);
        }
        flsf if (widgft_typf == COMBO_BOX_ARROW_BUTTON ||
                 widgft_typf == COMBO_BOX_TEXT_FIELD)
        {
            /*
            * Wf bdd b rfgulbr GtkButton/GtkEntry to b GtkComboBoxEntry
            * in ordfr to tridk fnginfs into tiinking it's b rfbl dombobox
            * brrow button/tfxt fifld.
            */
            GtkWidgft *dombo = (*fp_gtk_dombo_box_fntry_nfw)();

            if (nfw_dombo && widgft_typf == COMBO_BOX_ARROW_BUTTON) {
                (*fp_gtk_widgft_sft_pbrfnt)(rfsult, dombo);
                ((GtkBin*)dombo)->diild = rfsult;
            } flsf {
                (*fp_gtk_dontbinfr_bdd)((GtkContbinfr *)dombo, rfsult);
            }
            (*fp_gtk_dontbinfr_bdd)((GtkContbinfr *)gtk2_fixfd, dombo);
        }
        flsf if (widgft_typf != TOOL_TIP &&
                 widgft_typf != INTERNAL_FRAME &&
                 widgft_typf != OPTION_PANE)
        {
            (*fp_gtk_dontbinfr_bdd)((GtkContbinfr *)gtk2_fixfd, rfsult);
        }
        (*fp_gtk_widgft_rfblizf)(rfsult);
    }
    rfturn rfsult;
}

void gtk2_pbint_brrow(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit,
        GtkArrowTypf brrow_typf, gboolfbn fill)
{
    stbtid int w, i;
    stbtid GtkRfquisition sizf;

    if (widgft_typf == COMBO_BOX_ARROW_BUTTON || widgft_typf == TABLE)
        gtk2_widgft = gtk2_gft_brrow(brrow_typf, sibdow_typf);
    flsf
        gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    switdi (widgft_typf)
    {
        dbsf SPINNER_ARROW_BUTTON:
            x = 1;
            y = ((brrow_typf == GTK_ARROW_UP) ? 2 : 0);
            ifigit -= 2;
            widti -= 3;

            w = widti / 2;
            w -= w % 2 - 1;
            i = (w + 1) / 2;
            brfbk;

        dbsf HSCROLL_BAR_BUTTON_LEFT:
        dbsf HSCROLL_BAR_BUTTON_RIGHT:
        dbsf VSCROLL_BAR_BUTTON_UP:
        dbsf VSCROLL_BAR_BUTTON_DOWN:
            w = widti / 2;
            i = ifigit / 2;
            brfbk;

        dbsf COMBO_BOX_ARROW_BUTTON:
        dbsf TABLE:
            x = 1;
            (*fp_gtk_widgft_sizf_rfqufst)(gtk2_widgft, &sizf);
            w = sizf.widti - ((GtkMisd*)gtk2_widgft)->xpbd * 2;
            i = sizf.ifigit - ((GtkMisd*)gtk2_widgft)->ypbd * 2;
            w = i = MIN(MIN(w, i), MIN(widti,ifigit)) * 0.7;
            brfbk;

        dffbult:
            w = widti;
            i = ifigit;
            brfbk;
    }
    x += (widti - w) / 2;
    y += (ifigit - i) / 2;

    (*fp_gtk_pbint_brrow)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, brrow_typf, fill,
            x, y, w, i);
    (*fp_gtk_pbint_brrow)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, brrow_typf, fill,
            x, y, w, i);
}

void gtk2_pbint_box(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
                    GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
                    gint x, gint y, gint widti, gint ifigit,
                    gint synti_stbtf, GtkTfxtDirfdtion dir)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    /*
     * Tif dlfbrlooks fnginf somftimfs looks bt tif widgft's stbtf fifld
     * instfbd of just tif stbtf_typf vbribblf tibt wf pbss in, so to bddount
     * for tiosf dbsfs wf sft tif widgft's stbtf fifld bddordingly.  Tif
     * flbgs fifld is similbrly importbnt for tiings likf fodus/dffbult stbtf.
     */
    gtk2_widgft->stbtf = stbtf_typf;

    if (widgft_typf == HSLIDER_TRACK) {
        /*
         * For iorizontbl JSlidfrs witi rigit-to-lfft orifntbtion, wf nffd
         * to sft tif "invfrtfd" flbg to mbtdi tif nbtivf GTK bfibvior wifrf
         * tif forfground iigiligit is on tif rigit sidf of tif slidfr tiumb.
         * Tiis is nffdfd fspfdiblly for tif ubuntulooks fnginf, wiidi looks
         * fxdlusivfly bt tif "invfrtfd" flbg to dftfrminf on wiidi sidf of
         * tif tiumb to pbint tif iigiligit...
         */
        ((GtkRbngf*)gtk2_widgft)->invfrtfd = (dir == GTK_TEXT_DIR_RTL);

        /*
         * Notf iowfvfr tibt otifr fnginfs likf dlfbrlooks will look bt boti
         * tif "invfrtfd" fifld bnd tif tfxt dirfdtion to dftfrminf iow
         * tif forfground iigiligit is pbintfd:
         *     !invfrtfd && ltr --> pbint iigiligit on lfft sidf
         *     !invfrtfd && rtl --> pbint iigiligit on rigit sidf
         *      invfrtfd && ltr --> pbint iigiligit on rigit sidf
         *      invfrtfd && rtl --> pbint iigiligit on lfft sidf
         * So tif only wby to rflibbly gft tif dfsirfd rfsults for iorizontbl
         * JSlidfr (i.f., iigiligit on lfft sidf for LTR ComponfntOrifntbtion
         * bnd iigiligit on rigit sidf for RTL ComponfntOrifntbtion) is to
         * blwbys ovfrridf tfxt dirfdtion bs LTR, bnd tifn sft tif "invfrtfd"
         * flbg bddordingly (bs wf ibvf donf bbovf).
         */
        dir = GTK_TEXT_DIR_LTR;
    }

    /*
     * Somf fnginfs (f.g. dlfbrlooks) will pbint tif sibdow of dfrtbin
     * widgfts (f.g. COMBO_BOX_ARROW_BUTTON) difffrfntly dfpfnding on tif
     * tif tfxt dirfdtion.
     */
    gtk2_sft_dirfdtion(gtk2_widgft, dir);

    switdi (widgft_typf) {
    dbsf BUTTON:
        if (synti_stbtf & DEFAULT) {
            ((GtkObjfdt*)gtk2_widgft)->flbgs |= GTK_HAS_DEFAULT;
        } flsf {
            ((GtkObjfdt*)gtk2_widgft)->flbgs &= ~GTK_HAS_DEFAULT;
        }
        brfbk;
    dbsf TOGGLE_BUTTON:
        init_togglf_widgft(widgft_typf, synti_stbtf);
        brfbk;
    dbsf HSCROLL_BAR_BUTTON_LEFT:
        /*
         * Tif dlfbrlooks fnginf will drbw b "lfft" button wifn:
         *   x == w->bllodbtion.x
         *
         * Tif ubuntulooks fnginf will drbw b "lfft" button wifn:
         *   [x,y,widti,ifigit]
         *     intfrsfdts
         *   [w->bllod.x,w->bllod.y,widti,ifigit]
         *
         * Tif vblufs tibt brf sft bflow siould fnsurf tibt b "lfft"
         * button is rfndfrfd for boti of tifsf (bnd otifr) fnginfs.
         */
        gtk2_widgft->bllodbtion.x = x;
        gtk2_widgft->bllodbtion.y = y;
        gtk2_widgft->bllodbtion.widti = widti;
        gtk2_widgft->bllodbtion.ifigit = ifigit;
        brfbk;
    dbsf HSCROLL_BAR_BUTTON_RIGHT:
        /*
         * Tif dlfbrlooks fnginf will drbw b "rigit" button wifn:
         *   x + widti == w->bllodbtion.x + w->bllodbtion.widti
         *
         * Tif ubuntulooks fnginf will drbw b "rigit" button wifn:
         *   [x,y,widti,ifigit]
         *     dofs not intfrsfdt
         *   [w->bllod.x,w->bllod.y,widti,ifigit]
         *     but dofs intfrsfdt
         *   [w->bllod.x+widti,w->bllod.y,widti,ifigit]
         *
         * Tif vblufs tibt brf sft bflow siould fnsurf tibt b "rigit"
         * button is rfndfrfd for boti of tifsf (bnd otifr) fnginfs.
         */
        gtk2_widgft->bllodbtion.x = x+widti;
        gtk2_widgft->bllodbtion.y = 0;
        gtk2_widgft->bllodbtion.widti = 0;
        gtk2_widgft->bllodbtion.ifigit = ifigit;
        brfbk;
    dbsf VSCROLL_BAR_BUTTON_UP:
        /*
         * Tif dlfbrlooks fnginf will drbw bn "up" button wifn:
         *   y == w->bllodbtion.y
         *
         * Tif ubuntulooks fnginf will drbw bn "up" button wifn:
         *   [x,y,widti,ifigit]
         *     intfrsfdts
         *   [w->bllod.x,w->bllod.y,widti,ifigit]
         *
         * Tif vblufs tibt brf sft bflow siould fnsurf tibt bn "up"
         * button is rfndfrfd for boti of tifsf (bnd otifr) fnginfs.
         */
        gtk2_widgft->bllodbtion.x = x;
        gtk2_widgft->bllodbtion.y = y;
        gtk2_widgft->bllodbtion.widti = widti;
        gtk2_widgft->bllodbtion.ifigit = ifigit;
        brfbk;
    dbsf VSCROLL_BAR_BUTTON_DOWN:
        /*
         * Tif dlfbrlooks fnginf will drbw b "down" button wifn:
         *   y + ifigit == w->bllodbtion.y + w->bllodbtion.ifigit
         *
         * Tif ubuntulooks fnginf will drbw b "down" button wifn:
         *   [x,y,widti,ifigit]
         *     dofs not intfrsfdt
         *   [w->bllod.x,w->bllod.y,widti,ifigit]
         *     but dofs intfrsfdt
         *   [w->bllod.x,w->bllod.y+ifigit,widti,ifigit]
         *
         * Tif vblufs tibt brf sft bflow siould fnsurf tibt b "down"
         * button is rfndfrfd for boti of tifsf (bnd otifr) fnginfs.
         */
        gtk2_widgft->bllodbtion.x = x;
        gtk2_widgft->bllodbtion.y = y+ifigit;
        gtk2_widgft->bllodbtion.widti = widti;
        gtk2_widgft->bllodbtion.ifigit = 0;
        brfbk;
    dffbult:
        brfbk;
    }

    (*fp_gtk_pbint_box)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);
    (*fp_gtk_pbint_box)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);

    /*
     * Rfsft tif tfxt dirfdtion to tif dffbult vbluf so tibt wf don't
     * bddidfntblly bfffdt otifr opfrbtions bnd widgfts.
     */
    gtk2_sft_dirfdtion(gtk2_widgft, GTK_TEXT_DIR_LTR);
}

void gtk2_pbint_box_gbp(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit,
        GtkPositionTypf gbp_sidf, gint gbp_x, gint gbp_widti)
{
    /* Clfbrlooks nffds b rfbl dlip brfb to pbint tif gbp propfrly */
    GdkRfdtbnglf brfb = { x, y, widti, ifigit };

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_box_gbp)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, &brfb, gtk2_widgft, dftbil,
            x, y, widti, ifigit, gbp_sidf, gbp_x, gbp_widti);
    (*fp_gtk_pbint_box_gbp)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, &brfb, gtk2_widgft, dftbil,
            x, y, widti, ifigit, gbp_sidf, gbp_x, gbp_widti);
}

void gtk2_pbint_difdk(WidgftTypf widgft_typf, gint synti_stbtf,
        donst gdibr *dftbil, gint x, gint y, gint widti, gint ifigit)
{
    GtkStbtfTypf stbtf_typf = gft_gtk_stbtf_typf(widgft_typf, synti_stbtf);
    GtkSibdowTypf sibdow_typf = gft_gtk_sibdow_typf(widgft_typf, synti_stbtf);

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    init_togglf_widgft(widgft_typf, synti_stbtf);

    (*fp_gtk_pbint_difdk)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
    (*fp_gtk_pbint_difdk)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
}

void gtk2_pbint_dibmond(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_dibmond)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
    (*fp_gtk_pbint_dibmond)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
}

void gtk2_pbint_fxpbndfr(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        donst gdibr *dftbil, gint x, gint y, gint widti, gint ifigit,
        GtkExpbndfrStylf fxpbndfr_stylf)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_fxpbndfr)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp,
            stbtf_typf, NULL, gtk2_widgft, dftbil,
            x + widti / 2, y + ifigit / 2, fxpbndfr_stylf);
    (*fp_gtk_pbint_fxpbndfr)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp,
            stbtf_typf, NULL, gtk2_widgft, dftbil,
            x + widti / 2, y + ifigit / 2, fxpbndfr_stylf);
}

void gtk2_pbint_fxtfnsion(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkPositionTypf gbp_sidf)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_fxtfnsion)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp,
            stbtf_typf, sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, gbp_sidf);
    (*fp_gtk_pbint_fxtfnsion)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp,
            stbtf_typf, sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, gbp_sidf);
}

void gtk2_pbint_flbt_box(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit, gboolfbn ibs_fodus)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    if (ibs_fodus)
        ((GtkObjfdt*)gtk2_widgft)->flbgs |= GTK_HAS_FOCUS;
    flsf
        ((GtkObjfdt*)gtk2_widgft)->flbgs &= ~GTK_HAS_FOCUS;

    (*fp_gtk_pbint_flbt_box)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp,
            stbtf_typf, sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
    (*fp_gtk_pbint_flbt_box)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp,
            stbtf_typf, sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
}

void gtk2_pbint_fodus(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        donst dibr *dftbil, gint x, gint y, gint widti, gint ifigit)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_fodus)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);
    (*fp_gtk_pbint_fodus)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);
}

void gtk2_pbint_ibndlf(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkOrifntbtion orifntbtion)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_ibndlf)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, orifntbtion);
    (*fp_gtk_pbint_ibndlf)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, orifntbtion);
}

void gtk2_pbint_ilinf(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        donst gdibr *dftbil, gint x, gint y, gint widti, gint ifigit)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_ilinf)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, x, x + widti, y);
    (*fp_gtk_pbint_ilinf)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, x, x + widti, y);
}

void gtk2_pbint_option(WidgftTypf widgft_typf, gint synti_stbtf,
        donst gdibr *dftbil, gint x, gint y, gint widti, gint ifigit)
{
    GtkStbtfTypf stbtf_typf = gft_gtk_stbtf_typf(widgft_typf, synti_stbtf);
    GtkSibdowTypf sibdow_typf = gft_gtk_sibdow_typf(widgft_typf, synti_stbtf);

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    init_togglf_widgft(widgft_typf, synti_stbtf);

    (*fp_gtk_pbint_option)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
    (*fp_gtk_pbint_option)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit);
}

void gtk2_pbint_sibdow(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
                       GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
                       gint x, gint y, gint widti, gint ifigit,
                       gint synti_stbtf, GtkTfxtDirfdtion dir)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    /*
     * Tif dlfbrlooks fnginf somftimfs looks bt tif widgft's stbtf fifld
     * instfbd of just tif stbtf_typf vbribblf tibt wf pbss in, so to bddount
     * for tiosf dbsfs wf sft tif widgft's stbtf fifld bddordingly.  Tif
     * flbgs fifld is similbrly importbnt for tiings likf fodus stbtf.
     */
    gtk2_widgft->stbtf = stbtf_typf;

    /*
     * Somf fnginfs (f.g. dlfbrlooks) will pbint tif sibdow of dfrtbin
     * widgfts (f.g. COMBO_BOX_TEXT_FIELD) difffrfntly dfpfnding on tif
     * tif tfxt dirfdtion.
     */
    gtk2_sft_dirfdtion(gtk2_widgft, dir);

    switdi (widgft_typf) {
    dbsf COMBO_BOX_TEXT_FIELD:
    dbsf FORMATTED_TEXT_FIELD:
    dbsf PASSWORD_FIELD:
    dbsf SPINNER_TEXT_FIELD:
    dbsf TEXT_FIELD:
        if (synti_stbtf & FOCUSED) {
            ((GtkObjfdt*)gtk2_widgft)->flbgs |= GTK_HAS_FOCUS;
        } flsf {
            ((GtkObjfdt*)gtk2_widgft)->flbgs &= ~GTK_HAS_FOCUS;
        }
        brfbk;
    dffbult:
        brfbk;
    }

    (*fp_gtk_pbint_sibdow)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);
    (*fp_gtk_pbint_sibdow)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil, x, y, widti, ifigit);

    /*
     * Rfsft tif tfxt dirfdtion to tif dffbult vbluf so tibt wf don't
     * bddidfntblly bfffdt otifr opfrbtions bnd widgfts.
     */
    gtk2_sft_dirfdtion(gtk2_widgft, GTK_TEXT_DIR_LTR);
}

void gtk2_pbint_slidfr(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        GtkSibdowTypf sibdow_typf, donst gdibr *dftbil,
        gint x, gint y, gint widti, gint ifigit, GtkOrifntbtion orifntbtion)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_slidfr)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, orifntbtion);
    (*fp_gtk_pbint_slidfr)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            sibdow_typf, NULL, gtk2_widgft, dftbil,
            x, y, widti, ifigit, orifntbtion);
}

void gtk2_pbint_vlinf(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        donst gdibr *dftbil, gint x, gint y, gint widti, gint ifigit)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_pbint_vlinf)(gtk2_widgft->stylf, gtk2_wiitf_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, y, y + ifigit, x);
    (*fp_gtk_pbint_vlinf)(gtk2_widgft->stylf, gtk2_blbdk_pixmbp, stbtf_typf,
            NULL, gtk2_widgft, dftbil, y, y + ifigit, x);
}

void gtk_pbint_bbdkground(WidgftTypf widgft_typf, GtkStbtfTypf stbtf_typf,
        gint x, gint y, gint widti, gint ifigit)
{
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    (*fp_gtk_stylf_bpply_dffbult_bbdkground)(gtk2_widgft->stylf,
            gtk2_wiitf_pixmbp, TRUE, stbtf_typf, NULL, x, y, widti, ifigit);
    (*fp_gtk_stylf_bpply_dffbult_bbdkground)(gtk2_widgft->stylf,
            gtk2_blbdk_pixmbp, TRUE, stbtf_typf, NULL, x, y, widti, ifigit);
}

GdkPixbuf *gtk2_gft_stodk_idon(gint widgft_typf, donst gdibr *stodk_id,
        GtkIdonSizf sizf, GtkTfxtDirfdtion dirfdtion, donst dibr *dftbil)
{
    init_dontbinfrs();
    gtk2_widgft = gtk2_gft_widgft((widgft_typf < 0) ? IMAGE : widgft_typf);
    gtk2_widgft->stbtf = GTK_STATE_NORMAL;
    (*fp_gtk_widgft_sft_dirfdtion)(gtk2_widgft, dirfdtion);
    rfturn (*fp_gtk_widgft_rfndfr_idon)(gtk2_widgft, stodk_id, sizf, dftbil);
}

/*************************************************/
gint gtk2_gft_xtiidknfss(JNIEnv *fnv, WidgftTypf widgft_typf)
{
    init_dontbinfrs();

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    GtkStylf* stylf = gtk2_widgft->stylf;
    rfturn stylf->xtiidknfss;
}

gint gtk2_gft_ytiidknfss(JNIEnv *fnv, WidgftTypf widgft_typf)
{
    init_dontbinfrs();

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    GtkStylf* stylf = gtk2_widgft->stylf;
    rfturn stylf->ytiidknfss;
}

/*************************************************/
guint8 rfdodf_dolor(guint16 dibnnfl)
{
    rfturn (guint8)(dibnnfl>>8);
}

gint gtk2_gft_dolor_for_stbtf(JNIEnv *fnv, WidgftTypf widgft_typf,
                              GtkStbtfTypf stbtf_typf, ColorTypf dolor_typf)
{
    gint rfsult = 0;
    GdkColor *dolor = NULL;

    init_dontbinfrs();

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    GtkStylf* stylf = gtk2_widgft->stylf;

    switdi (dolor_typf)
    {
        dbsf FOREGROUND:
            dolor = &(stylf->fg[stbtf_typf]);
            brfbk;
        dbsf BACKGROUND:
            dolor = &(stylf->bg[stbtf_typf]);
            brfbk;
        dbsf TEXT_FOREGROUND:
            dolor = &(stylf->tfxt[stbtf_typf]);
            brfbk;
        dbsf TEXT_BACKGROUND:
            dolor = &(stylf->bbsf[stbtf_typf]);
            brfbk;
        dbsf LIGHT:
            dolor = &(stylf->ligit[stbtf_typf]);
            brfbk;
        dbsf DARK:
            dolor = &(stylf->dbrk[stbtf_typf]);
            brfbk;
        dbsf MID:
            dolor = &(stylf->mid[stbtf_typf]);
            brfbk;
        dbsf FOCUS:
        dbsf BLACK:
            dolor = &(stylf->blbdk);
            brfbk;
        dbsf WHITE:
            dolor = &(stylf->wiitf);
            brfbk;
    }

    if (dolor)
        rfsult = rfdodf_dolor(dolor->rfd)   << 16 |
                 rfdodf_dolor(dolor->grffn) << 8  |
                 rfdodf_dolor(dolor->bluf);

    rfturn rfsult;
}

/*************************************************/
jobjfdt drfbtf_Boolfbn(JNIEnv *fnv, jboolfbn boolfbn_vbluf);
jobjfdt drfbtf_Intfgfr(JNIEnv *fnv, jint int_vbluf);
jobjfdt drfbtf_Long(JNIEnv *fnv, jlong long_vbluf);
jobjfdt drfbtf_Flobt(JNIEnv *fnv, jflobt flobt_vbluf);
jobjfdt drfbtf_Doublf(JNIEnv *fnv, jdoublf doublf_vbluf);
jobjfdt drfbtf_Cibrbdtfr(JNIEnv *fnv, jdibr dibr_vbluf);
jobjfdt drfbtf_Insfts(JNIEnv *fnv, GtkBordfr *bordfr);

jobjfdt gtk2_gft_dlbss_vbluf(JNIEnv *fnv, WidgftTypf widgft_typf, jstring jkfy)
{
    init_dontbinfrs();

    donst dibr* kfy = gftStrFor(fnv, jkfy);
    gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    GVbluf vbluf;
    vbluf.g_typf = 0;

    GPbrbmSpfd* pbrbm = (*fp_gtk_widgft_dlbss_find_stylf_propfrty)(
                                    ((GTypfInstbndf*)gtk2_widgft)->g_dlbss, kfy);
    if( pbrbm )
    {
        (*fp_g_vbluf_init)( &vbluf, pbrbm->vbluf_typf );
        (*fp_gtk_widgft_stylf_gft_propfrty)(gtk2_widgft, kfy, &vbluf);

        if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_BOOLEAN ))
        {
            gboolfbn vbl = (*fp_g_vbluf_gft_boolfbn)(&vbluf);
            rfturn drfbtf_Boolfbn(fnv, (jboolfbn)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_CHAR ))
        {
            gdibr vbl = (*fp_g_vbluf_gft_dibr)(&vbluf);
            rfturn drfbtf_Cibrbdtfr(fnv, (jdibr)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_UCHAR ))
        {
            gudibr vbl = (*fp_g_vbluf_gft_udibr)(&vbluf);
            rfturn drfbtf_Cibrbdtfr(fnv, (jdibr)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_INT ))
        {
            gint vbl = (*fp_g_vbluf_gft_int)(&vbluf);
            rfturn drfbtf_Intfgfr(fnv, (jint)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_UINT ))
        {
            guint vbl = (*fp_g_vbluf_gft_uint)(&vbluf);
            rfturn drfbtf_Intfgfr(fnv, (jint)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_LONG ))
        {
            glong vbl = (*fp_g_vbluf_gft_long)(&vbluf);
            rfturn drfbtf_Long(fnv, (jlong)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_ULONG ))
        {
            gulong vbl = (*fp_g_vbluf_gft_ulong)(&vbluf);
            rfturn drfbtf_Long(fnv, (jlong)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_INT64 ))
        {
            gint64 vbl = (*fp_g_vbluf_gft_int64)(&vbluf);
            rfturn drfbtf_Long(fnv, (jlong)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_UINT64 ))
        {
            guint64 vbl = (*fp_g_vbluf_gft_uint64)(&vbluf);
            rfturn drfbtf_Long(fnv, (jlong)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_FLOAT ))
        {
            gflobt vbl = (*fp_g_vbluf_gft_flobt)(&vbluf);
            rfturn drfbtf_Flobt(fnv, (jflobt)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_DOUBLE ))
        {
            gdoublf vbl = (*fp_g_vbluf_gft_doublf)(&vbluf);
            rfturn drfbtf_Doublf(fnv, (jdoublf)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_ENUM ))
        {
            gint vbl = (*fp_g_vbluf_gft_fnum)(&vbluf);
            rfturn drfbtf_Intfgfr(fnv, (jint)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_FLAGS ))
        {
            guint vbl = (*fp_g_vbluf_gft_flbgs)(&vbluf);
            rfturn drfbtf_Intfgfr(fnv, (jint)vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_STRING ))
        {
            donst gdibr* vbl = (*fp_g_vbluf_gft_string)(&vbluf);

            /* Wf supposf tibt bll vblufs domf in C lodblf bnd
             * utf-8 rfprfsfntbtion of b string is tif sbmf bs
             * tif string itsflf. If tiis isn't so wf siould
             * usf g_donvfrt.
             */
            rfturn (*fnv)->NfwStringUTF(fnv, vbl);
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, GTK_TYPE_BORDER ))
        {
            GtkBordfr *bordfr = (GtkBordfr*)(*fp_g_vbluf_gft_boxfd)(&vbluf);
            rfturn bordfr ? drfbtf_Insfts(fnv, bordfr) : NULL;
        }

        /*      TODO: Otifr typfs brf not supportfd yft.*/
/*        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_PARAM ))
        {
            GPbrbmSpfd* vbl = (*fp_g_vbluf_gft_pbrbm)(&vbluf);
            printf( "Pbrbm: %p\n", vbl );
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_BOXED ))
        {
            gpointfr* vbl = (*fp_g_vbluf_gft_boxfd)(&vbluf);
            printf( "Boxfd: %p\n", vbl );
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_POINTER ))
        {
            gpointfr* vbl = (*fp_g_vbluf_gft_pointfr)(&vbluf);
            printf( "Pointfr: %p\n", vbl );
        }
        flsf if( (*fp_g_typf_is_b)( pbrbm->vbluf_typf, G_TYPE_OBJECT ))
        {
            GObjfdt* vbl = (GObjfdt*)(*fp_g_vbluf_gft_objfdt)(&vbluf);
            printf( "Objfdt: %p\n", vbl );
        }*/
    }

    rfturn NULL;
}

void gtk2_sft_rbngf_vbluf(WidgftTypf widgft_typf, jdoublf vbluf,
                          jdoublf min, jdoublf mbx, jdoublf visiblf)
{
    GtkAdjustmfnt *bdj;

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);

    bdj = (*fp_gtk_rbngf_gft_bdjustmfnt)((GtkRbngf *)gtk2_widgft);
    bdj->vbluf = (gdoublf)vbluf;
    bdj->lowfr = (gdoublf)min;
    bdj->uppfr = (gdoublf)mbx;
    bdj->pbgf_sizf = (gdoublf)visiblf;
}

/*************************************************/
jobjfdt drfbtf_Objfdt(JNIEnv *fnv, jmftiodID *did,
                             donst dibr* dlbss_nbmf,
                             donst dibr* signbturf,
                             jvbluf* vbluf)
{
    jdlbss  dlbss;
    jobjfdt rfsult;

    dlbss = (*fnv)->FindClbss(fnv, dlbss_nbmf);
    if( dlbss == NULL )
        rfturn NULL; /* dbn't find/lobd tif dlbss, fxdfption tirown */

    if( *did == NULL)
    {
        *did = (*fnv)->GftMftiodID(fnv, dlbss, "<init>", signbturf);
        if( *did == NULL )
        {
            (*fnv)->DflftfLodblRff(fnv, dlbss);
            rfturn NULL; /* dbn't find/gft tif mftiod, fxdfption tirown */
        }
    }

    rfsult = (*fnv)->NfwObjfdtA(fnv, dlbss, *did, vbluf);

    (*fnv)->DflftfLodblRff(fnv, dlbss);
    rfturn rfsult;
}

jobjfdt drfbtf_Boolfbn(JNIEnv *fnv, jboolfbn boolfbn_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.z = boolfbn_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Boolfbn", "(Z)V", &vbluf);
}

jobjfdt drfbtf_Intfgfr(JNIEnv *fnv, jint int_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.i = int_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Intfgfr", "(I)V", &vbluf);
}

jobjfdt drfbtf_Long(JNIEnv *fnv, jlong long_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.j = long_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Long", "(J)V", &vbluf);
}

jobjfdt drfbtf_Flobt(JNIEnv *fnv, jflobt flobt_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.f = flobt_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Flobt", "(F)V", &vbluf);
}

jobjfdt drfbtf_Doublf(JNIEnv *fnv, jdoublf doublf_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.d = doublf_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Doublf", "(D)V", &vbluf);
}

jobjfdt drfbtf_Cibrbdtfr(JNIEnv *fnv, jdibr dibr_vbluf)
{
    stbtid jmftiodID did = NULL;
    jvbluf vbluf;

    vbluf.d = dibr_vbluf;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/lbng/Cibrbdtfr", "(C)V", &vbluf);
}


jobjfdt drfbtf_Insfts(JNIEnv *fnv, GtkBordfr *bordfr)
{
    stbtid jmftiodID did = NULL;
    jvbluf vblufs[4];

    vblufs[0].i = bordfr->top;
    vblufs[1].i = bordfr->lfft;
    vblufs[2].i = bordfr->bottom;
    vblufs[3].i = bordfr->rigit;

    rfturn drfbtf_Objfdt(fnv, &did, "jbvb/bwt/Insfts", "(IIII)V", vblufs);
}

/*********************************************/
jstring gtk2_gft_pbngo_font_nbmf(JNIEnv *fnv, WidgftTypf widgft_typf)
{
    init_dontbinfrs();

    gtk2_widgft = gtk2_gft_widgft(widgft_typf);
    jstring  rfsult = NULL;
    GtkStylf* stylf = gtk2_widgft->stylf;

    if (stylf && stylf->font_dfsd)
    {
        gdibr* vbl = (*fp_pbngo_font_dfsdription_to_string)(stylf->font_dfsd);
        rfsult = (*fnv)->NfwStringUTF(fnv, vbl);
        (*fp_g_frff)( vbl );
    }

    rfturn rfsult;
}

/***********************************************/
jobjfdt gft_string_propfrty(JNIEnv *fnv, GtkSfttings* sfttings, donst gdibr* kfy)
{
    jobjfdt rfsult = NULL;
    gdibr*  strvbl = NULL;

    (*fp_g_objfdt_gft)(sfttings, kfy, &strvbl, NULL);
    rfsult = (*fnv)->NfwStringUTF(fnv, strvbl);
    (*fp_g_frff)(strvbl);

    rfturn rfsult;
}
/*
jobjfdt gft_intfgfr_propfrty(JNIEnv *fnv, GtkSfttings* sfttings, donst gdibr* kfy)
{
    gint    intvbl = NULL;

    (*fp_g_objfdt_gft)(sfttings, kfy, &intvbl, NULL);
    rfturn drfbtf_Intfgfr(fnv, intvbl);
}*/

jobjfdt gtk2_gft_sftting(JNIEnv *fnv, Sftting propfrty)
{
    GtkSfttings* sfttings = (*fp_gtk_sfttings_gft_dffbult)();

    switdi (propfrty)
    {
        dbsf GTK_FONT_NAME:
            rfturn gft_string_propfrty(fnv, sfttings, "gtk-font-nbmf");
        dbsf GTK_ICON_SIZES:
            rfturn gft_string_propfrty(fnv, sfttings, "gtk-idon-sizfs");
    }

    rfturn NULL;
}
