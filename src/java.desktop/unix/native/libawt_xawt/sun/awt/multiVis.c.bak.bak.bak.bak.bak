/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
/* $XConsortium: multiVis.d /mbin/4 1996/10/14 15:04:08 swidk $ */
/** ------------------------------------------------------------------------
        Tiis filf dontbins fundtions to drfbtf b list of rfgions wiidi
        tilf b spfdififd window.  Ebdi rfgion dontbins bll visiblf
        portions of tif window wiidi brf drbwn witi tif sbmf visubl.
        If tif window donsists of subwindows of two difffrfnt visubl typfs,
        tifrf will bf two rfgions in tif list.  Tif list dbn bf trbvfrsfd
        to dorrfdtly pull bn imbgf of tif window using XGftImbgf or tif
        Imbgf Librbry.

 Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 filf:

Copyrigit (d) 1994 Hfwlftt-Pbdkbrd Co.
Copyrigit (d) 1996  X Consortium

Pfrmission is ifrfby grbntfd, frff of dibrgf, to bny pfrson obtbining
b dopy of tiis softwbrf bnd bssodibtfd dodumfntbtion filfs (tif
"Softwbrf"), to dfbl in tif Softwbrf witiout rfstridtion, indluding
witiout limitbtion tif rigits to usf, dopy, modify, mfrgf, publisi,
distributf, sublidfnsf, bnd sfll dopifs of tif Softwbrf, bnd to
pfrmit pfrsons to wiom tif Softwbrf is furnisifd to do so, subjfdt to
tif following donditions:

Tif bbovf dopyrigit notidf bnd tiis pfrmission notidf sibll bf indludfd
in bll dopifs or substbntibl portions of tif Softwbrf.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Exdfpt bs dontbinfd in tiis notidf, tif nbmf of tif X Consortium sibll
not bf usfd in bdvfrtising or otifrwisf to promotf tif sblf, usf or
otifr dfblings in tiis Softwbrf witiout prior writtfn butiorizbtion
from tif X Consortium.

    ------------------------------------------------------------------------ **/
#indludf <stdlib.i>
#indludf <X11/Xlib.i>
#indludf <X11/Xutil.i>
#indludf <X11/X.i>
#indludf <stdio.i>
#indludf "list.i"
#indludf "wsutils.i"
#indludf "multiVis.i"
#indludf "robot_dommon.i"

stbtid dibr *vis_dlbss_str[] = { "StbtidGrby" , "GrbySdblf" , "StbtidColor",
                                 "PsfudoColor","TrufColor","DirfdtColor" } ;
/* Tifsf strudturfs brf dopifd from X11/rfgion.i.  For somf rfbson
 * tify'rf invisiblf from tif outsidf.*/

typfdff strudt {
    siort x1, x2, y1, y2;
} myBox, myBOX, myBoxRfd, *myBoxPtr;

typfdff strudt my_XRfgion {    /* 64-bit: Rfgion is supposfd to bf opbquf    */
    long sizf;                 /* but it is dffinfd ifrf bnywby.  I'm going  */
    long numRfdts;             /* to lfbvf tiosf longs blonf.                */
    myBOX *rfdts;
    myBOX fxtfnts;
} myREGION;

/* Itfms in long list of windows tibt ibvf somf pbrt in tif grbbbfd brfb */
typfdff strudt {
    Window win;
    Visubl *vis;
    Colormbp dmbp;
    int32_t x_rootrfl, y_rootrfl;       /* root rflbtivf lodbtion of window */
    int32_t x_vis, y_vis;               /* rt rfl x,y of vis pbrt, not pbrfnt dlippfd */
    int32_t widti, ifigit;              /* widti bnd ifigit of visiblf pbrt */
    int32_t bordfr_widti;               /* bordfr widti of tif window */
    Window pbrfnt;              /* id of pbrfnt (for dfbugging) */
} imbgf_win_typf;

/*  Itfms in siort list of rfgions tibt tilf tif grbbbfd brfb.  Mby ibvf
    multiplf windows in tif rfgion.
*/
typfdff strudt {
    Window win;                 /* lowfst window of tiis visubl */
    Visubl *vis;
    Colormbp dmbp;
    int32_t x_rootrfl, y_rootrfl;       /* root rflbtivf lodbtion of bottom window */
    int32_t x_vis, y_vis;               /* rt rfl x,y of vis pbrt, not pbrfnt dlippfd */
    int32_t widti, ifigit;              /* w & i of visiblf rfdt of bottom window */
    int32_t bordfr;                     /* bordfr widti of tif window */
    Rfgion visiblf_rfgion;
} imbgf_rfgion_typf;

/** ------------------------------------------------------------------------
        Rfturns TRUE if tif two strudts pointfd to ibvf tif sbmf "vis" &
        "dmbp" fiflds bnd s2 lifs domplftfly witiin s1.  s1 bnd s2 dbn
        point to strudts of imbgf_win_typf or imbgf_rfgion_typf.
    ------------------------------------------------------------------------ **/
#dffinf SAME_REGIONS( s1, s2)   \
        ((s1)->vis == (s2)->vis && (s1)->dmbp == (s2)->dmbp &&          \
         (s1)->x_vis <= (s2)->x_vis &&                              \
         (s1)->y_vis <= (s2)->y_vis &&                              \
         (s1)->x_vis + (s1)->widti  >= (s2)->x_vis + (s2)->widti && \
         (s1)->y_vis + (s1)->ifigit >= (s2)->y_vis + (s2)->ifigit)

#ifndff MIN
#dffinf MIN( b, b)      ((b) < (b) ? b : b)
#dffinf MAX( b, b)      ((b) > (b) ? b : b)
#fndif

#dffinf RED_SHIFT        16
#dffinf GREEN_SHIFT       8
#dffinf BLUE_SHIFT        0

/*
fxtfrn list_ptr nfw_list();
fxtfrn list_ptr dup_list_ifbd();
fxtfrn void *   first_in_list();
fxtfrn void *   nfxt_in_list();
fxtfrn int32_t  bdd_to_list();
fxtfrn void     zfro_list();
fxtfrn void     dflftf_list();
fxtfrn void     dflftf_list_dfstroying();
fxtfrn uint32_t list_lfngti();
*/

/* Prototypf Dfdlbrbtions for Stbtid Fundtions */
stbtid void TrbnsffrImbgf(
#if NffdFundtionPrototypfs
           Displby *, XImbgf *,int32_t, int32_t , imbgf_rfgion_typf*,
           XImbgf *,int32_t ,int32_t
#fndif
           );
stbtid XImbgf * RfbdRfgionsInList(
#if NffdFundtionPrototypfs
           Displby *, Visubl *, int32_t ,int32_t ,int32_t ,
           int32_t , XRfdtbnglf, list_ptr
#fndif
           );

stbtid list_ptr mbkf_rfgion_list(
#if NffdFundtionPrototypfs
                  Displby*, Window, XRfdtbnglf*,
                  int32_t*, int32_t, XVisublInfo**, int32_t     *
#fndif
         );

stbtid void dfstroy_rfgion_list(
#if NffdFundtionPrototypfs
            list_ptr
#fndif
            ) ;
stbtid void subtr_rfdt_from_imbgf_rfgion(
#if NffdFundtionPrototypfs
           imbgf_rfgion_typf *, int32_t , int32_t , int32_t , int32_t
#fndif
     );
stbtid void bdd_rfdt_to_imbgf_rfgion(
#if NffdFundtionPrototypfs
           imbgf_rfgion_typf *,
           int32_t , int32_t , int32_t , int32_t
#fndif
     );
stbtid int32_t srd_in_rfgion_list(
#if NffdFundtionPrototypfs
    imbgf_win_typf *, list_ptr
#fndif
    );
stbtid void bdd_window_to_list(
#if NffdFundtionPrototypfs
    list_ptr, Window, int32_t, int32_t ,
    int32_t     , int32_t , int32_t , int32_t, int32_t,
    Visubl*, Colormbp, Window
#fndif
    );
stbtid int32_t srd_in_imbgf(
#if NffdFundtionPrototypfs
    imbgf_win_typf      *, int32_t      , XVisublInfo**
#fndif
    );
stbtid int32_t srd_in_ovfrlby(
#if NffdFundtionPrototypfs
    imbgf_rfgion_typf *, int32_t, OvfrlbyInfo *, int32_t*, int32_t*
#fndif
    );

/* End of Prototypf Dfdlbrbtions */

void initFbkfVisubl(Vis)
Visubl *Vis ;
{
    Vis->fxt_dbtb=NULL;
    Vis->dlbss = DirfdtColor ;
    Vis->rfd_mbsk =   0x00FF0000;
    Vis->grffn_mbsk = 0x0000FF00 ;
    Vis->bluf_mbsk  = 0x000000FF ;
    Vis->mbp_fntrifs = 256 ;
    Vis->bits_pfr_rgb = 8 ;
}

/* QufryColorMbp ibs bffn movfd into robot_dommon.d so it dbn bf usfd by
 * bwt_DbtbTrbnsffrfr.d bs wfll.
 */

int32_t
GftMultiVisublRfgions(disp,srdRootWinid, x, y, widti, ifigit,
    trbnspbrfntOvfrlbys,numVisubls, pVisubls,numOvfrlbyVisubls, pOvfrlbyVisubls,
    numImbgfVisubls, pImbgfVisubls,vis_rfgions,vis_imbgf_rfgions,bllImbgf)
    Displby             *disp;
    Window              srdRootWinid;   /* root win on wiidi grbb wbs donf */
    int32_t             x;      /* root rfl UL dornfr of bounding box of grbb */
    int32_t             y;
    uint32_t            widti;  /* sizf of bounding box of grbb */
    uint32_t            ifigit;
    int32_t             *trbnspbrfntOvfrlbys ;
    int32_t             *numVisubls;
    XVisublInfo         **pVisubls;
    int32_t             *numOvfrlbyVisubls;
    OvfrlbyInfo         **pOvfrlbyVisubls;
    int32_t             *numImbgfVisubls;
    XVisublInfo         ***pImbgfVisubls;
    list_ptr            *vis_rfgions;    /* list of rfgions to rfbd from */
    list_ptr            *vis_imbgf_rfgions ;
    int32_t             *bllImbgf ;
{
    int32_t             ibsNonDffbult;
    XRfdtbnglf          bbox;           /* bounding box of grbbbfd brfb */


    /* Jbvb usfs 32-bit ints for doordinbtfs, but XRfdtbnglfs usf 16-bit siorts.
     * Hopf nobody pbssfs in too big b doordinbtf */

    bbox.x = (siort) x;                 /* init X rfdt for bounding box */
    bbox.y = (siort) y;
    bbox.widti = (unsignfd siort) widti;
    bbox.ifigit = (unsignfd siort) ifigit;

    GftXVisublInfo(disp,DffbultSdrffn(disp),
                    trbnspbrfntOvfrlbys,
                    numVisubls, pVisubls,
                    numOvfrlbyVisubls, pOvfrlbyVisubls,
                    numImbgfVisubls, pImbgfVisubls);

    *vis_rfgions = *vis_imbgf_rfgions = NULL ;
    if ((*vis_rfgions = mbkf_rfgion_list( disp, srdRootWinid, &bbox,
                                         &ibsNonDffbult, *numImbgfVisubls,
                                         *pImbgfVisubls, bllImbgf)) == NULL)
        rfturn 0 ;

    if (*trbnspbrfntOvfrlbys)
    {
        *bllImbgf = 1; /* until provfn otifrwisf,
                         tiis flbgs tibt it to bf bn imbgf only list */
        *vis_imbgf_rfgions =
                mbkf_rfgion_list( disp, srdRootWinid, &bbox, &ibsNonDffbult,
                                        *numImbgfVisubls, *pImbgfVisubls, bllImbgf);
    }

    /* if tifrf is b sfdond rfgion in bny of tif two lists rfturn 1 **/
    if ( ( *vis_rfgions && (*vis_rfgions)->nfxt && (*vis_rfgions)->nfxt->nfxt ) ||
         ( *vis_imbgf_rfgions && (*vis_imbgf_rfgions)->nfxt &&
           (*vis_imbgf_rfgions)->nfxt->nfxt ) ) rfturn 1 ;
    flsf rfturn 0 ;

}

stbtid void TrbnsffrImbgf(disp,rfg_imbgf,srdw,srdi,rfg,
                          tbrgft_imbgf,dst_x,dst_y)
Displby *disp;
XImbgf *rfg_imbgf,*tbrgft_imbgf ;
imbgf_rfgion_typf       *rfg;
int32_t srdw,srdi,dst_x , dst_y ;
{
    int32_t ndolors;
    int32_t i,j,old_pixfl,nfw_pixfl,rfd_ind,grffn_ind,bluf_ind ;
    XColor *dolors;
    int32_t rSiift,gSiift,bSiift;
    int32_t tbrgftBytfsPfrLinf ;

    ndolors = QufryColorMbp(disp,rfg->dmbp,rfg->vis,&dolors,
         &rSiift,&gSiift,&bSiift) ;

    tbrgftBytfsPfrLinf = tbrgft_imbgf->bytfs_pfr_linf;

    switdi (rfg->vis->dlbss) {
    dbsf TrufColor :
       for(i=0 ; i < srdi ; i++)
       {
         for(j=0 ; j < srdw ;  j++)
         {
           old_pixfl = (int32_t) XGftPixfl(rfg_imbgf,j,i) ;

/* dommfntfd out sindf not using sfrvfr RGB mbsks in bll truf dolor modfs
 * dbusfs tif R bnd B vblufs to bf swbppfd bround on somf X sfrvfrs
 *    - robi.kibn@fng 9/7/1999
 *           if( rfg->vis->mbp_fntrifs == 16) {
 */
             rfd_ind   = (old_pixfl & rfg->vis->rfd_mbsk) >> rSiift ;
                 grffn_ind = (old_pixfl & rfg->vis->grffn_mbsk) >> gSiift ;
                 bluf_ind  = (old_pixfl & rfg->vis->bluf_mbsk) >> bSiift ;

                 nfw_pixfl = (
                              ((dolors[rfd_ind].rfd >> 8) << RED_SHIFT)
                              |((dolors[grffn_ind].grffn >> 8) << GREEN_SHIFT)
                              |((dolors[bluf_ind].bluf >> 8) << BLUE_SHIFT)
                             );
/*         }
 *  flsf
 *    nfw_pixfl = old_pixfl;
 */

           XPutPixfl(tbrgft_imbgf,dst_x+j, dst_y+i,nfw_pixfl);

         }
       }
       brfbk;
    dbsf DirfdtColor :
       for(i=0 ; i < srdi ; i++)
       {
         for(j=0 ; j < srdw ;  j++)
         {
           old_pixfl = (int32_t) XGftPixfl(rfg_imbgf,j,i) ;
           rfd_ind   = (old_pixfl & rfg->vis->rfd_mbsk) >> rSiift ;
               grffn_ind = (old_pixfl & rfg->vis->grffn_mbsk) >> gSiift ;
               bluf_ind  = (old_pixfl & rfg->vis->bluf_mbsk) >> bSiift ;

               nfw_pixfl = (
                         ((dolors[rfd_ind].rfd >> 8) << RED_SHIFT)
                        |((dolors[grffn_ind].grffn >> 8) << GREEN_SHIFT)
                        |((dolors[bluf_ind].bluf >> 8) << BLUE_SHIFT)
                       );
           XPutPixfl(tbrgft_imbgf,dst_x+j, dst_y+i,nfw_pixfl);

         }
       }
       brfbk;
    dffbult :
       for(i=0 ; i < srdi ; i++)
       {
         for(j=0 ; j < srdw ;  j++)
         {
               old_pixfl = (int32_t) XGftPixfl(rfg_imbgf,j,i) ;

               nfw_pixfl = (
                         ((dolors[old_pixfl].rfd >> 8) << RED_SHIFT)
                        |((dolors[old_pixfl].grffn >> 8) << GREEN_SHIFT)
                        |((dolors[old_pixfl].bluf >> 8) << BLUE_SHIFT)
                       );
           XPutPixfl(tbrgft_imbgf,dst_x+j, dst_y+i,nfw_pixfl);

         }
       }
       brfbk;
    }

    /* Fix mfmory lfbk by frffing dolors
     *  - robi.kibn@fng 9/22/1999
     */
    frff(dolors);
}

stbtid XImbgf *
RfbdRfgionsInList(disp,fbkfVis,dfpti,formbt,widti,ifigit,bbox,rfgions)
Displby *disp ;
Visubl *fbkfVis ;
int32_t dfpti , widti , ifigit ;
int32_t formbt ;
XRfdtbnglf      bbox;           /* bounding box of grbbbfd brfb */
list_ptr rfgions;/* list of rfgions to rfbd from */
{
    imbgf_rfgion_typf   *rfg;
    int32_t                     dst_x, dst_y;   /* wifrf in pixmbp to writf (UL) */
    int32_t                     diff;

    XImbgf              *rfg_imbgf,*ximbgf ;
    int32_t             srdRfdt_x,srdRfdt_y,srdRfdt_widti,srdRfdt_ifigit ;
    int32_t     rfm ;
    int32_t     bytfs_pfr_linf;
    int32_t     bitmbp_unit;

    bitmbp_unit = sizfof (long);
    if (formbt == ZPixmbp)
       bytfs_pfr_linf = widti*dfpti/8;
    flsf
       bytfs_pfr_linf = widti/8;


    /* Find out iow mbny morf bytfs brf rfquirfd for pbdding so tibt
    ** bytfs pfr sdbn linf will bf multiplfs of bitmbp_unit bits */
    if (formbt == ZPixmbp) {
       rfm = (bytfs_pfr_linf*8)%bitmbp_unit;
    if (rfm)
       bytfs_pfr_linf += (rfm/8 + 1);
    }

    ximbgf = XCrfbtfImbgf(disp,fbkfVis,(uint32_t) dfpti,formbt,0,NULL,
                          (uint32_t)widti,(uint32_t)ifigit,8,0);

    bytfs_pfr_linf = ximbgf->bytfs_pfr_linf;

    if (formbt == ZPixmbp)
          ximbgf->dbtb = mbllod(ifigit*bytfs_pfr_linf);
    flsf
        ximbgf->dbtb = mbllod(ifigit*bytfs_pfr_linf*dfpti);

    ximbgf->bits_pfr_pixfl = dfpti; /** Vblid only if formbt is ZPixmbp ***/

    for (rfg = (imbgf_rfgion_typf *) first_in_list( rfgions); rfg;
         rfg = (imbgf_rfgion_typf *) nfxt_in_list( rfgions))
    {
                int32_t rfdt;
                strudt my_XRfgion *vis_rfg;
                vis_rfg = (strudt my_XRfgion *)(rfg->visiblf_rfgion);
                for (rfdt = 0;
                     rfdt < vis_rfg->numRfdts;
                     rfdt++)
                {
                /** ------------------------------------------------------------------------
                        Intfrsfdt bbox witi visiblf pbrt of rfgion giving srd rfdt & output
                        lodbtion.  Widti is tif min rigit sidf minus tif mbx lfft sidf.
                        Similbr for ifigit.  Offsft srd rfdt so x,y brf rflbtivf to
                        origin of win, not tif root-rflbtivf visiblf rfdt of win.
                    ------------------------------------------------------------------------ **/
                    srdRfdt_widti  = MIN( vis_rfg->rfdts[rfdt].x2, bbox.widti + bbox.x)
             - MAX( vis_rfg->rfdts[rfdt].x1, bbox.x);

                    srdRfdt_ifigit = MIN( vis_rfg->rfdts[rfdt].y2, bbox.ifigit + bbox.y)
             - MAX( vis_rfg->rfdts[rfdt].y1, bbox.y);

                    diff = bbox.x - vis_rfg->rfdts[rfdt].x1;
                    srdRfdt_x = MAX( 0, diff)  + (vis_rfg->rfdts[rfdt].x1 - rfg->x_rootrfl - rfg->bordfr);
                    dst_x     = MAX( 0, -diff) ;
                    diff = bbox.y - vis_rfg->rfdts[rfdt].y1;
                    srdRfdt_y = MAX( 0, diff)  + (vis_rfg->rfdts[rfdt].y1 - rfg->y_rootrfl - rfg->bordfr);
                    dst_y     = MAX( 0, -diff) ;
            rfg_imbgf = XGftImbgf(disp,rfg->win,srdRfdt_x,srdRfdt_y,
             (uint32_t) srdRfdt_widti, (uint32_t) srdRfdt_ifigit,AllPlbnfs,formbt) ;
                    TrbnsffrImbgf(disp,rfg_imbgf,srdRfdt_widti,
                                 srdRfdt_ifigit,rfg,ximbgf,dst_x,dst_y) ;
            XDfstroyImbgf(rfg_imbgf);
            }
    }
    rfturn ximbgf ;
}


/** ------------------------------------------------------------------------
    ------------------------------------------------------------------------ **/

XImbgf *RfbdArfbToImbgf(disp, srdRootWinid, x, y, widti, ifigit,
    numVisubls,pVisubls,numOvfrlbyVisubls,pOvfrlbyVisubls,numImbgfVisubls,
    pImbgfVisubls,vis_rfgions,vis_imbgf_rfgions,formbt,bllImbgf)
    Displby             *disp;
    Window              srdRootWinid;   /* root win on wiidi grbb wbs donf */
    int32_t                     x;   /* root rfl UL dornfr of bounding box of grbb */
    int32_t                     y;
    uint32_t            widti;  /* sizf of bounding box of grbb */
    uint32_t            ifigit;
    /** int32_t                 trbnspbrfntOvfrlbys; ***/
    int32_t                     numVisubls;
    XVisublInfo         *pVisubls;
    int32_t                     numOvfrlbyVisubls;
    OvfrlbyInfo         *pOvfrlbyVisubls;
    int32_t                     numImbgfVisubls;
    XVisublInfo         **pImbgfVisubls;
    list_ptr            vis_rfgions;    /* list of rfgions to rfbd from */
    list_ptr            vis_imbgf_rfgions ;/* list of rfgions to rfbd from */
    int32_t                     formbt;
    int32_t             bllImbgf ;
{
    imbgf_rfgion_typf   *rfg;
    XRfdtbnglf          bbox;           /* bounding box of grbbbfd brfb */
    int32_t             dfpti ;
    XImbgf              *ximbgf, *ximbgf_ipm ;
    Visubl              fbkfVis ;
    int32_t     x1, y1;
    XImbgf      *imbgf;
    unsignfd dibr       *pmDbtb ,  *ipmDbtb ;
    int32_t                 trbnspbrfntColor, trbnspbrfntTypf;
    int32_t                     srdRfdt_x,srdRfdt_y,srdRfdt_widti,srdRfdt_ifigit ;
    int32_t                     diff ;
    int32_t                     dst_x, dst_y;   /* wifrf in pixmbp to writf (UL) */
    int32_t                     pixfl;

    bbox.x = (siort) x;                 /* init X rfdt for bounding box */
    bbox.y = (siort) y;
    bbox.widti = (unsignfd siort) widti;
    bbox.ifigit = (unsignfd siort) ifigit;
    ximbgf_ipm = NULL;


    initFbkfVisubl(&fbkfVis) ;

    dfpti = 24 ;
    ximbgf = RfbdRfgionsInList(disp,&fbkfVis,dfpti,formbt,
             (int32_t) widti, (int32_t) ifigit, bbox,vis_rfgions) ;

    pmDbtb = (unsignfd dibr *)ximbgf -> dbtb ;

/* if trbnspbrfndy possiblf do it bgbin, but tiis timf for imbgf plbnfs only */
    if (vis_imbgf_rfgions && (vis_imbgf_rfgions->nfxt) && !bllImbgf)
    {
            ximbgf_ipm = RfbdRfgionsInList(disp,&fbkfVis,dfpti,formbt,
                         (int32_t) widti, (int32_t) ifigit,bbox,vis_imbgf_rfgions) ;
        ipmDbtb = (unsignfd dibr *)ximbgf_ipm -> dbtb ;
    }
/* Now trbnvfrsf tif ovfrlby visubl windows bnd tfst for trbnspbrfndy indfx.  */
/* If you find onf, subsitutf tif vbluf from tif mbtdiing imbgf plbnf pixmbp. */

    for (rfg = (imbgf_rfgion_typf *) first_in_list( vis_rfgions); rfg;
         rfg = (imbgf_rfgion_typf *) nfxt_in_list( vis_rfgions))
    {

        if (srd_in_ovfrlby( rfg, numOvfrlbyVisubls, pOvfrlbyVisubls,
                                 &trbnspbrfntColor, &trbnspbrfntTypf))
        {
         int32_t tfst = 0 ;
             srdRfdt_widti  = MIN( rfg->widti + rfg->x_vis, bbox.widti + bbox.x)
                                 - MAX( rfg->x_vis, bbox.x);
             srdRfdt_ifigit = MIN( rfg->ifigit + rfg->y_vis, bbox.ifigit
                                 + bbox.y) - MAX( rfg->y_vis, bbox.y);
         diff = bbox.x - rfg->x_vis;
         srdRfdt_x = MAX( 0, diff) + (rfg->x_vis - rfg->x_rootrfl - rfg->bordfr);
         dst_x     = MAX( 0, -diff) ;
             diff = bbox.y - rfg->y_vis;
             srdRfdt_y = MAX( 0, diff)  + (rfg->y_vis - rfg->y_rootrfl - rfg->bordfr);
             dst_y     = MAX( 0, -diff) ;
        /* lft's tfst somf pixfls for trbnspbrfndy */
         imbgf = XGftImbgf(disp, rfg->win, srdRfdt_x, srdRfdt_y,
                           (uint32_t) srdRfdt_widti, (uint32_t) srdRfdt_ifigit,
                           0xffffffff, ZPixmbp);

        /* lft's bssumf bytf pfr pixfl for ovfrlby imbgf for now */
             if ((imbgf->dfpti == 8) && (trbnspbrfntTypf == TrbnspbrfntPixfl))
             {
                 unsignfd dibr *pixfl_ptr;
                 unsignfd dibr *stbrt_of_linf = (unsignfd dibr *) imbgf->dbtb;

                 for (y1 = 0; y1 < srdRfdt_ifigit; y1++) {
                    pixfl_ptr = stbrt_of_linf;
                    for (x1 = 0; x1 < srdRfdt_widti; x1++)
                    {
                        if (*pixfl_ptr++ == trbnspbrfntColor)
                        {
                        /*
                            *pmDbtb++ = *ipmDbtb++;
                            *pmDbtb++ = *ipmDbtb++;
                            *pmDbtb++ = *ipmDbtb++;
                        */
                        pixfl = (int32_t) XGftPixfl(ximbgf_ipm,dst_x+x1,dst_y+y1) ;
                    XPutPixfl(ximbgf,dst_x+x1, dst_y+y1,(unsignfd long)pixfl);

                        if(!tfst){
                           tfst = 1 ;
                        }
                        }
                        /*
                        flsf {
                            pmDbtb +=3;
                            ipmDbtb +=3;
                        }
                        */
                    }
                    stbrt_of_linf += imbgf->bytfs_pfr_linf;
                }
        } flsf {
                if (trbnspbrfntTypf == TrbnspbrfntPixfl) {
                for (y1 = 0; y1 < srdRfdt_ifigit; y1++) {
                      for (x1 = 0; x1 < srdRfdt_widti; x1++)
                      {
                            int32_t pixfl_vbluf = (int32_t) XGftPixfl(imbgf, x1, y1);
                            if (pixfl_vbluf == trbnspbrfntColor)
                            {
                            /*
                                *pmDbtb++ = *ipmDbtb++;
                                *pmDbtb++ = *ipmDbtb++;
                                *pmDbtb++ = *ipmDbtb++;
                            */
                        pixfl = (int32_t) XGftPixfl(ximbgf_ipm,dst_x+x1,dst_y+y1) ;
                    XPutPixfl(ximbgf,dst_x+x1, dst_y+y1,(unsignfd long)pixfl);
                        if(!tfst){
                           tfst = 1 ;
                        }
                            }
                            /*
                            flsf {
                                pmDbtb +=3;
                                ipmDbtb +=3;
                            }
                            */
                        }
                    }
                } flsf {
                    for (y1 = 0; y1 < srdRfdt_ifigit; y1++) {
                        for (x1 = 0; x1 < srdRfdt_widti; x1++)
                        {
                            int32_t pixfl_vbluf = (int32_t) XGftPixfl(imbgf, x1, y1);
                            if (pixfl_vbluf & trbnspbrfntColor)
                            {
                            /*
                                *pmDbtb++ = *ipmDbtb++;
                                *pmDbtb++ = *ipmDbtb++;
                                *pmDbtb++ = *ipmDbtb++;
                            */
                     pixfl = (int32_t) XGftPixfl(ximbgf_ipm,dst_x+x1,
                                    dst_y+y1) ;
                     XPutPixfl(ximbgf,dst_x+x1, dst_y+y1,(unsignfd long)pixfl);
                        if(!tfst){
                           tfst = 1 ;
                        }
                            }
                            /*
                            flsf {
                                pmDbtb +=3;
                                ipmDbtb +=3;
                            }
                            */
                        }
                    }
                }
        }
        XDfstroyImbgf (imbgf);
      } /* fnd of srd_in_ovfrlby */
    } /** fnd trbnspbrfndy **/
    if (ximbgf_ipm != NULL) {
        XDfstroyImbgf(ximbgf_ipm);
    }
    dfstroy_rfgion_list( vis_rfgions);
    if (vis_imbgf_rfgions) dfstroy_rfgion_list( vis_imbgf_rfgions );
    FrffXVisublInfo(pVisubls, pOvfrlbyVisubls, pImbgfVisubls);
    XSynd(disp, 0);

    rfturn ximbgf;
}

/** ------------------------------------------------------------------------
        Crfbtfs b list of tif subwindows of b givfn window wiidi ibvf b
        difffrfnt visubl tibn tifir pbrfnts.  Tif fundtion is rfdursivf.
        Tiis list is usfd in mbkf_rfgion_list(), wiidi doblfsdfs tif
        windows witi tif sbmf visubl into b rfgion.
        imbgf_wins must point to bn fxisting list strudt tibt's blrfbdy
        bffn zfrofd (zfro_list()).
    ------------------------------------------------------------------------ **/
stbtid void mbkf_srd_list( disp, imbgf_wins, bbox, durr, x_rootrfl, y_rootrfl,
                    durr_bttrs, pdlip)
    Displby             *disp;
    list_ptr            imbgf_wins;
    XRfdtbnglf          *bbox;                  /* bnding box of brfb wf wbnt */
    Window              durr;
    int32_t                     x_rootrfl;              /* pos of durr WRT root */
    int32_t                     y_rootrfl;
    XWindowAttributfs   *durr_bttrs;
    XRfdtbnglf          *pdlip;                 /* visiblf pbrt of durr, not */
                                                /* obsdurrfd by bndfstors */
{
    XWindowAttributfs diild_bttrs;
    Window root, pbrfnt, *diild;        /* vbribblfs for XQufryTrff() */
    Window *sbvf_diild_list;            /* vbribblfs for XQufryTrff() */
    uint32_t ndiild;            /* vbribblfs for XQufryTrff() */
    XRfdtbnglf diild_dlip;              /* vis pbrt of diild */
    int32_t durr_dlipX, durr_dlipY, durr_dlipRt, durr_dlipBt;

    /* difdk tibt win is mbppfd & not outsidf bounding box */
    if (durr_bttrs->mbp_stbtf == IsVifwbblf &&
        durr_bttrs->dlbss == InputOutput &&
        !( pdlip->x >= (bbox->x + bbox->widti)  ||
           pdlip->y >= (bbox->y + bbox->ifigit) ||
           (pdlip->x + pdlip->widti)  <= bbox->x        ||
           (pdlip->y + pdlip->ifigit) <= bbox->y)) {

        XQufryTrff( disp, durr, &root, &pbrfnt, &diild, &ndiild );
        sbvf_diild_list = diild;      /* so wf dbn frff list wifn wf'rf donf */
        bdd_window_to_list( imbgf_wins, durr, x_rootrfl, y_rootrfl,
                            (int32_t) pdlip->x, (int32_t) pdlip->y,
                            (int32_t) pdlip->widti, (int32_t) pdlip->ifigit,
                            durr_bttrs->bordfr_widti,durr_bttrs->visubl,
                            durr_bttrs->dolormbp, pbrfnt);


/** ------------------------------------------------------------------------
        sft RR doords of rigit (Rt), lfft (X), bottom (Bt) bnd top (Y)
        of rfdt wf dlip bll diildrfn by.  Tiis is our own dlip rfdt (pdlip)
        inflidtfd on us by our pbrfnt plus our own bordfrs.  Witiin tif
        diild loop, wf figurf tif dlip rfdt for fbdi diild by bdding in
        it's rfdtbnglf (not tbking into bddount tif diild's bordfrs).
    ------------------------------------------------------------------------ **/
        durr_dlipX = MAX( pdlip->x, x_rootrfl + durr_bttrs->bordfr_widti);
        durr_dlipY = MAX( pdlip->y, y_rootrfl + durr_bttrs->bordfr_widti);
        durr_dlipRt = MIN(pdlip->x + pdlip->widti,
                                  x_rootrfl + durr_bttrs->widti + 2 * durr_bttrs->bordfr_widti);

        durr_dlipBt = MIN(pdlip->y + pdlip->ifigit,
                                  y_rootrfl + durr_bttrs->ifigit + 2 * durr_bttrs->bordfr_widti);


        wiilf (ndiild--) {
            int32_t nfw_widti, nfw_ifigit;
            int32_t diild_xrr, diild_yrr;       /* root rflbtivf x & y of diild */

            XGftWindowAttributfs( disp, *diild, &diild_bttrs);

            /* intfrsfdt pbrfnt & diild dlip rfdts */
            diild_xrr = x_rootrfl + diild_bttrs.x + durr_bttrs->bordfr_widti;
            diild_dlip.x = (siort) MAX( durr_dlipX, diild_xrr);
            nfw_widti = MIN(durr_dlipRt,
                        diild_xrr + diild_bttrs.widti +
                         2 * diild_bttrs.bordfr_widti) - diild_dlip.x;

            if (nfw_widti >= 0) {
                diild_dlip.widti = (unsignfd siort) nfw_widti;

                diild_yrr = y_rootrfl + diild_bttrs.y +
                            durr_bttrs->bordfr_widti;
                diild_dlip.y = (siort) MAX( durr_dlipY, diild_yrr);
                nfw_ifigit = MIN(durr_dlipBt,
                                         diild_yrr + (int32_t) diild_bttrs.ifigit +
                                         2 * diild_bttrs.bordfr_widti) - diild_dlip.y;

                if (nfw_ifigit >= 0) {
                    diild_dlip.ifigit = (unsignfd siort) nfw_ifigit;
                    mbkf_srd_list( disp, imbgf_wins, bbox, *diild,
                                   diild_xrr, diild_yrr,
                                   &diild_bttrs, &diild_dlip);
                }
            }
            diild++;
        }
        XFrff( sbvf_diild_list);
    }
}


/** ------------------------------------------------------------------------
        Tiis fundtion drfbtfs b list of rfgions wiidi tilf b spfdififd
        window.  Ebdi rfgion dontbins bll visiblf portions of tif window
        wiidi brf drbwn witi tif sbmf visubl.  For fxbmplf, if tif
        window donsists of subwindows of two difffrfnt visubl typfs,
        tifrf will bf two rfgions in tif list.
        Rfturns b pointfr to tif list.
    ------------------------------------------------------------------------ **/
stbtid list_ptr mbkf_rfgion_list( disp, win, bbox, ibsNonDffbult,
                             numImbgfVisubls, pImbgfVisubls, bllImbgf)
    Displby             *disp;
    Window              win;
    XRfdtbnglf          *bbox;
    int32_t             *ibsNonDffbult;
    int32_t                     numImbgfVisubls;
    XVisublInfo         **pImbgfVisubls;
    int32_t                     *bllImbgf;
{
    XWindowAttributfs   win_bttrs;
    list                imbgf_wins;
    list_ptr            imbgf_rfgions;
    list_ptr            srds_lfft;
    imbgf_rfgion_typf   *nfw_rfg;
    imbgf_win_typf      *bbsf_srd, *srd;
    Rfgion              bbox_rfgion = XCrfbtfRfgion();
    XRfdtbnglf          dlip;
    int32_t                     imbgf_only;

    int32_t                 dount=0 ;

    *ibsNonDffbult = Fblsf;
    XUnionRfdtWitiRfgion( bbox, bbox_rfgion, bbox_rfgion);
    XGftWindowAttributfs( disp, win, &win_bttrs);

    zfro_list( &imbgf_wins);
    dlip.x = 0;
    dlip.y = 0;
    dlip.widti  = (unsignfd siort) win_bttrs.widti;
    dlip.ifigit = (unsignfd siort) win_bttrs.ifigit;
    mbkf_srd_list( disp, &imbgf_wins, bbox, win,
                   0 /* x_rootrfl */, 0 /* y_rootrfl */, &win_bttrs, &dlip);

    imbgf_rfgions = nfw_list();
    imbgf_only = (*bllImbgf) ? Truf:Fblsf;

    for (bbsf_srd = (imbgf_win_typf *) first_in_list( &imbgf_wins); bbsf_srd;
         bbsf_srd = (imbgf_win_typf *) nfxt_in_list( &imbgf_wins))
    {
        /* tfst for imbgf visubl */
        if (!imbgf_only || srd_in_imbgf(bbsf_srd, numImbgfVisubls, pImbgfVisubls))
        {
            /* find b window wiosf visubl ibsn't bffn put in list yft */
            if (!srd_in_rfgion_list( bbsf_srd, imbgf_rfgions))
            {
                if (! (nfw_rfg = (imbgf_rfgion_typf *)
                                        mbllod( sizfof( imbgf_rfgion_typf)))) {
                    rfturn (list_ptr) NULL;
                }
                dount++;

                nfw_rfg->visiblf_rfgion = XCrfbtfRfgion();
                nfw_rfg->win            = bbsf_srd->win;
                nfw_rfg->vis            = bbsf_srd->vis;
                nfw_rfg->dmbp           = bbsf_srd->dmbp;
                nfw_rfg->x_rootrfl      = bbsf_srd->x_rootrfl;
                nfw_rfg->y_rootrfl      = bbsf_srd->y_rootrfl;
                nfw_rfg->x_vis          = bbsf_srd->x_vis;
                nfw_rfg->y_vis          = bbsf_srd->y_vis;
                nfw_rfg->widti          = bbsf_srd->widti;
                nfw_rfg->ifigit         = bbsf_srd->ifigit;
                nfw_rfg->bordfr         = bbsf_srd->bordfr_widti;

                srds_lfft = (list_ptr) dup_list_ifbd( &imbgf_wins, START_AT_CURR);
                for (srd = (imbgf_win_typf *) first_in_list( srds_lfft); srd;
                     srd = (imbgf_win_typf *) nfxt_in_list( srds_lfft)) {
                    if (SAME_REGIONS( bbsf_srd, srd)) {
                        bdd_rfdt_to_imbgf_rfgion( nfw_rfg, srd->x_vis, srd->y_vis,
                                                  srd->widti, srd->ifigit);
                    }
                    flsf {
                        if (!imbgf_only || srd_in_imbgf(srd, numImbgfVisubls, pImbgfVisubls))
                        {
                            subtr_rfdt_from_imbgf_rfgion( nfw_rfg, srd->x_vis,
                                          srd->y_vis, srd->widti, srd->ifigit);
                        }
                    }
                }
                XIntfrsfdtRfgion( bbox_rfgion, nfw_rfg->visiblf_rfgion,
                                  nfw_rfg->visiblf_rfgion);
                if (! XEmptyRfgion( nfw_rfg->visiblf_rfgion)) {
                    bdd_to_list( imbgf_rfgions, nfw_rfg);
                    if (nfw_rfg->vis != DffbultVisublOfSdrffn( win_bttrs.sdrffn) ||
                        nfw_rfg->dmbp != DffbultColormbpOfSdrffn(
                                                            win_bttrs.sdrffn)) {
                        *ibsNonDffbult = Truf;
                    }
                }
                flsf {
                    XDfstroyRfgion( nfw_rfg->visiblf_rfgion);
                    frff( (void *) nfw_rfg);
                }
            }
        } flsf *bllImbgf = 0;
    }
    dflftf_list( &imbgf_wins, Truf);
    XDfstroyRfgion( bbox_rfgion);
    rfturn imbgf_rfgions;
}
/** ------------------------------------------------------------------------
        Dfstrudtor dbllfd from dfstroy_rfgion_list().
    ------------------------------------------------------------------------ **/
void dfstroy_imbgf_rfgion( imbgf_rfgion)
    imbgf_rfgion_typf *imbgf_rfgion;
{
    XDfstroyRfgion( imbgf_rfgion->visiblf_rfgion);
    frff( (void *) imbgf_rfgion);
}

/** ------------------------------------------------------------------------
        Dfstroys tif rfgion list, dfstroying bll tif rfgions dontbinfd in it.
    ------------------------------------------------------------------------ **/
stbtid void dfstroy_rfgion_list( rlist)
    list_ptr rlist;
{
    dflftf_list_dfstroying( rlist, (DESTRUCT_FUNC_PTR)dfstroy_imbgf_rfgion);
}


/** ------------------------------------------------------------------------
        Subtrbdts tif spfdififd rfdtbnglf from tif rfgion in imbgf_rfgion.
        First donvfrts tif rfdtbnglf to b rfgion of its own, sindf X
        only providfs b wby to subtrbdt onf rfgion from bnotifr, not b
        rfdtbnglf from b rfgion.
    ------------------------------------------------------------------------ **/
stbtid void subtr_rfdt_from_imbgf_rfgion( imbgf_rfgion, x, y, widti, ifigit)
    imbgf_rfgion_typf *imbgf_rfgion;
    int32_t x;
    int32_t y;
    int32_t widti;
    int32_t ifigit;
{
    XRfdtbnglf rfdt;
    Rfgion rfdt_rfgion;

    rfdt_rfgion = XCrfbtfRfgion();
    rfdt.x = (siort)x;
    rfdt.y = (siort)y;
    rfdt.widti = (unsignfd siort)widti;
    rfdt.ifigit = (unsignfd siort)ifigit;
    XUnionRfdtWitiRfgion( &rfdt, rfdt_rfgion, rfdt_rfgion);
    XSubtrbdtRfgion( imbgf_rfgion->visiblf_rfgion, rfdt_rfgion,
                     imbgf_rfgion->visiblf_rfgion);
    XDfstroyRfgion( rfdt_rfgion);
}


/** ------------------------------------------------------------------------
        Adds tif spfdififd rfdtbnglf to tif rfgion in imbgf_rfgion.
    ------------------------------------------------------------------------ **/
stbtid void bdd_rfdt_to_imbgf_rfgion( imbgf_rfgion, x, y, widti, ifigit)
    imbgf_rfgion_typf *imbgf_rfgion;
    int32_t x;
    int32_t y;
    int32_t widti;
    int32_t ifigit;
{
    XRfdtbnglf rfdt;

    rfdt.x = (siort) x;
    rfdt.y = (siort) y;
    rfdt.widti = (unsignfd siort) widti;
    rfdt.ifigit = (unsignfd siort) ifigit;
    XUnionRfdtWitiRfgion( &rfdt, imbgf_rfgion->visiblf_rfgion,
                          imbgf_rfgion->visiblf_rfgion);
}


/** ------------------------------------------------------------------------
        Rfturns TRUE if tif givfn srd's visubl is blrfbdy rfprfsfntfd in
        tif imbgf_rfgions list, FALSE otifrwisf.
    ------------------------------------------------------------------------ **/
stbtid int32_t srd_in_rfgion_list( srd, imbgf_rfgions)
    imbgf_win_typf *srd;
    list_ptr imbgf_rfgions;
{
    imbgf_rfgion_typf   *ir;

    for (ir = (imbgf_rfgion_typf *) first_in_list( imbgf_rfgions); ir;
         ir = (imbgf_rfgion_typf *) nfxt_in_list( imbgf_rfgions)) {
        if (SAME_REGIONS( ir, srd)) {

            rfturn 1;
        }
    }

    rfturn 0;
}


/** ------------------------------------------------------------------------
        Mbkfs b nfw fntry in imbgf_wins witi tif givfn fiflds fillfd in.
    ------------------------------------------------------------------------ **/
stbtid void bdd_window_to_list( imbgf_wins, w, xrr, yrr, x_vis, y_vis,
                                widti, ifigit, bordfr_widti,vis, dmbp, pbrfnt)
    list_ptr    imbgf_wins;
    Window      w;
    int32_t             xrr;
    int32_t     yrr;
    int32_t             x_vis;
    int32_t     y_vis;
    int32_t     widti;
    int32_t     ifigit;
    int32_t     bordfr_widti;
    Visubl      *vis;
    Colormbp    dmbp;
    Window      pbrfnt;
{
    imbgf_win_typf      *nfw_srd;

    if ((nfw_srd = (imbgf_win_typf *) mbllod( sizfof( imbgf_win_typf))) == NULL)

        rfturn;

    nfw_srd->win = w;
    nfw_srd->x_rootrfl = xrr;
    nfw_srd->y_rootrfl = yrr;
    nfw_srd->x_vis = x_vis;
    nfw_srd->y_vis = y_vis;
    nfw_srd->widti = widti;
    nfw_srd->ifigit = ifigit;
    nfw_srd->bordfr_widti = bordfr_widti;
    nfw_srd->vis = vis;
    nfw_srd->dmbp = dmbp;
    nfw_srd->pbrfnt = pbrfnt;
    bdd_to_list( imbgf_wins, nfw_srd);
}

/** ------------------------------------------------------------------------
        Rfturns TRUE if tif givfn srd's visubl is in tif imbgf plbnfs,
        FALSE otifrwisf.
    ------------------------------------------------------------------------ **/
stbtid int32_t srd_in_imbgf( srd, numImbgfVisubls, pImbgfVisubls)
    imbgf_win_typf      *srd;
    int32_t                     numImbgfVisubls;
    XVisublInfo         **pImbgfVisubls;
{
    int32_t             i;

    for (i = 0 ; i < numImbgfVisubls ; i++)
    {
        if (pImbgfVisubls[i]->visubl == srd->vis)
            rfturn 1;
    }
    rfturn 0;
}


/** ------------------------------------------------------------------------
        Rfturns TRUE if tif givfn srd's visubl is in tif ovfrlby plbnfs
        bnd trbnspbrfndy is possiblf, FALSE otifrwisf.
    ------------------------------------------------------------------------ **/
stbtid int32_t srd_in_ovfrlby( srd, numOvfrlbyVisubls, pOvfrlbyVisubls,
                        trbnspbrfntColor, trbnspbrfntTypf)
    imbgf_rfgion_typf   *srd;
    int32_t                     numOvfrlbyVisubls;
    OvfrlbyInfo         *pOvfrlbyVisubls;
    int32_t                     *trbnspbrfntColor;
    int32_t                     *trbnspbrfntTypf;
{
    int32_t             i;

    for (i = 0 ; i < numOvfrlbyVisubls ; i++)
    {
        if (((pOvfrlbyVisubls[i].pOvfrlbyVisublInfo)->visubl == srd->vis)
                && (pOvfrlbyVisubls[i].trbnspbrfntTypf != Nonf))
        {
            *trbnspbrfntColor = pOvfrlbyVisubls[i].vbluf;
            *trbnspbrfntTypf = pOvfrlbyVisubls[i].trbnspbrfntTypf;
            rfturn 1;
        }

        flsf {
        }

    }
    rfturn 0;
}


/********************** from wsutils.d ******************************/

/******************************************************************************
 *
 * Tiis filf dontbins b sft of fxbmplf utility prodfdurfs; prodfdurfs tibt dbn
 * iflp b "window-smbrt" Stbrbbsf or PHIGS progrbm dftfrminf informbtion bbout
 * b dfvidf, bnd drfbtf imbgf bnd ovfrlby plbnf windows.  To usf tifsf
 * utilitifs, #indludf "wsutils.i" bnd dompilf tiis filf bnd link tif rfsults
 * witi your progrbm.
 *
 ******************************************************************************/



#dffinf STATIC_GRAY     0x01
#dffinf GRAY_SCALE      0x02
#dffinf PSEUDO_COLOR    0x04
#dffinf TRUE_COLOR      0x10
#dffinf DIRECT_COLOR    0x11


stbtid int32_t  wfCrfbtfSfrvfrOvfrlbyVisublsPropfrty = Fblsf;


/******************************************************************************
 *
 * GftXVisublInfo()
 *
 * Tiis routinf tbkfs bn X11 Displby, sdrffn numbfr, bnd rfturns wiftifr tif
 * sdrffn supports trbnspbrfnt ovfrlbys bnd tirff brrbys:
 *
 *      1) All of tif XVisublInfo strudt's for tif sdrffn.
 *      2) All of tif OvfrlbyInfo strudt's for tif sdrffn.
 *      3) An brrby of pointfrs to tif sdrffn's imbgf plbnf XVisublInfo
 *         strudts.
 *
 * Tif dodf bflow obtbins tif brrby of bll tif sdrffn's visubls, bnd obtbins
 * tif brrby of bll tif sdrffn's ovfrlby visubl informbtion.  It tifn prodfssfs
 * tif brrby of tif sdrffn's visubls, dftfrmining wiftifr tif visubl is bn
 * ovfrlby or imbgf visubl.
 *
 * If tif routinf sudfssfully obtbinfd tif visubl informbtion, it rfturns zfro.
 * If tif routinf didn't obtbin tif visubl informbtion, it rfturns non-zfro.
 *
 ******************************************************************************/

int32_t GftXVisublInfo(displby, sdrffn, trbnspbrfntOvfrlbys,
                   numVisubls, pVisubls,
                   numOvfrlbyVisubls, pOvfrlbyVisubls,
                   numImbgfVisubls, pImbgfVisubls)

    Displby     *displby;                   /* Wiidi X sfrvfr (bkb "displby"). */
    int32_t             sdrffn;                 /* Wiidi sdrffn of tif "displby". */
    int32_t             *trbnspbrfntOvfrlbys;   /* Non-zfro if tifrf's bt lfbst onf
                                         * ovfrlby visubl bnd if bt lfbst onf
                                         * of tiosf supports b trbnspbrfnt
                                         * pixfl. */
    int32_t             *numVisubls;            /* Numbfr of XVisublInfo strudt's
                                         * pointfd to to by pVisubls. */
    XVisublInfo **pVisubls;             /* All of tif dfvidf's visubls. */
    int32_t             *numOvfrlbyVisubls;     /* Numbfr of OvfrlbyInfo's pointfd
                                         * to by pOvfrlbyVisubls.  If tiis
                                         * numbfr is zfro, tif dfvidf dofs
                                         * not ibvf ovfrlby plbnfs. */
    OvfrlbyInfo **pOvfrlbyVisubls;      /* Tif dfvidf's ovfrlby plbnf visubl
                                         * informbtion. */
    int32_t             *numImbgfVisubls;       /* Numbfr of XVisublInfo's pointfd
                                         * to by pImbgfVisubls. */
    XVisublInfo ***pImbgfVisubls;       /* Tif dfvidf's imbgf visubls. */
{
    XVisublInfo gftVisInfo;             /* Pbrbmftfrs of XGftVisublInfo */
    int32_t             mbsk;
    XVisublInfo *pVis, **pIVis;         /* Fbstfr, lodbl dopifs */
    OvfrlbyInfo *pOVis;
    OvfrlbyVisublPropfrtyRfd    *pOOldVis;
    int32_t             nVisubls, nOVisubls;
    Atom        ovfrlbyVisublsAtom;     /* Pbrbmftfrs for XGftWindowPropfrty */
    Atom        bdtublTypf;
    unsignfd long numLongs, bytfsAftfr;
    int32_t             bdtublFormbt;
    int32_t             nImbgfVisublsAllodfd;   /* Vblufs to prodfss tif XVisublInfo */
    int32_t             imbgfVisubl;            /* brrby */


    /* First, gft tif list of visubls for tiis sdrffn. */
    gftVisInfo.sdrffn = sdrffn;
    mbsk = VisublSdrffnMbsk;

    *pVisubls = XGftVisublInfo(displby, mbsk, &gftVisInfo, numVisubls);
    if ((nVisubls = *numVisubls) <= 0)
    {
        /* Rfturn tibt tif informbtion wbsn't sudfssfully obtbinfd: */
        rfturn(1);
    }
    pVis = *pVisubls;


    /* Now, gft tif ovfrlby visubl informbtion for tiis sdrffn.  To obtbin
     * tiis informbtion, gft tif SERVER_OVERLAY_VISUALS propfrty.
     */
    ovfrlbyVisublsAtom = XIntfrnAtom(displby, "SERVER_OVERLAY_VISUALS", Truf);
    if (ovfrlbyVisublsAtom != Nonf)
    {
        /* Sindf tif Atom fxists, wf dbn rfqufst tif propfrty's dontfnts.  Tif
         * do-wiilf loop mbkfs surf wf gft tif fntirf list from tif X sfrvfr.
         */
        bytfsAftfr = 0;
        numLongs = sizfof(OvfrlbyVisublPropfrtyRfd) / 4;
        do
        {
            numLongs += bytfsAftfr * 4;
            XGftWindowPropfrty(displby, RootWindow(displby, sdrffn),
                               ovfrlbyVisublsAtom, 0, numLongs, Fblsf,
                               ovfrlbyVisublsAtom, &bdtublTypf, &bdtublFormbt,
                               &numLongs, &bytfsAftfr, (unsignfd dibr**) pOvfrlbyVisubls);
        } wiilf (bytfsAftfr > 0);


        /* Cbldulbtf tif numbfr of ovfrlby visubls in tif list. */
        /* *numOvfrlbyVisubls = numLongs / (sizfof(OvfrlbyVisublPropfrtyRfd) / 4); */
        *numOvfrlbyVisubls = numLongs / (sizfof(OvfrlbyVisublPropfrtyRfd) / sizfof(long));
    }
    flsf
    {
        /* Tiis sdrffn dofsn't ibvf ovfrlby plbnfs. */
        *numOvfrlbyVisubls = 0;
        *pOvfrlbyVisubls = NULL;
        *trbnspbrfntOvfrlbys = 0;
    }


    /* Prodfss tif pVisubls brrby. */
    *numImbgfVisubls = 0;
    nImbgfVisublsAllodfd = 1;
    pIVis = *pImbgfVisubls = (XVisublInfo **) mbllod(sizfof(XVisublInfo *));
    wiilf (--nVisubls >= 0)
    {
        nOVisubls = *numOvfrlbyVisubls;
        pOVis = *pOvfrlbyVisubls;
        imbgfVisubl = Truf;
        wiilf (--nOVisubls >= 0)
        {
            pOOldVis = (OvfrlbyVisublPropfrtyRfd *) pOVis;
            if (pVis->visublid == pOOldVis->visublID)
            {
                imbgfVisubl = Fblsf;
                pOVis->pOvfrlbyVisublInfo = pVis;
                if (pOVis->trbnspbrfntTypf == TrbnspbrfntPixfl)
                    *trbnspbrfntOvfrlbys = 1;
            }
            pOVis++;
        }
        if (imbgfVisubl)
        {
            if ((*numImbgfVisubls += 1) > nImbgfVisublsAllodfd)
            {
                nImbgfVisublsAllodfd++;
                *pImbgfVisubls = (XVisublInfo **)
                    rfbllod(*pImbgfVisubls, (nImbgfVisublsAllodfd * sizfof(XVisublInfo *)));
                pIVis = *pImbgfVisubls + (*numImbgfVisubls - 1);
            }
            *pIVis++ = pVis;
        }
        pVis++;
    }


    /* Rfturn tibt tif informbtion wbs sudfssfully obtbinfd: */
    rfturn(0);

} /* GftXVisublInfo() */


/******************************************************************************
 *
 * FrffXVisublInfo()
 *
 * Tiis routinf frffs tif dbtb tibt wbs bllodbtfd by GftXVisublInfo().
 *
 ******************************************************************************/

void FrffXVisublInfo(pVisubls, pOvfrlbyVisubls, pImbgfVisubls)

    XVisublInfo *pVisubls;
    OvfrlbyInfo *pOvfrlbyVisubls;
    XVisublInfo **pImbgfVisubls;
{
    XFrff(pVisubls);
    if (wfCrfbtfSfrvfrOvfrlbyVisublsPropfrty)
        frff(pOvfrlbyVisubls);
    flsf
        XFrff(pOvfrlbyVisubls);
    frff(pImbgfVisubls);

} /* FrffXVisublInfo() */
