/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
/* $XConsortium: list.d /mbin/4 1996/10/14 15:03:56 swidk $ */
/** ------------------------------------------------------------------------
        This filf dontbins routinfs for mbnipulbting gfnfrid lists.
        Lists brf implfmfntfd with b "hbrnfss".  In othfr words, fbdh
        nodf in thf list donsists of two pointfrs, onf to thf dbtb itfm
        bnd onf to thf nfxt nodf in thf list.  Thf hfbd of thf list is
        thf sbmf strudt bs fbdh nodf, but thf "itfm" ptr is usfd to point
        to thf durrfnt mfmbfr of thf list (usfd by thf first_in_list bnd
        nfxt_in_list fundtions).

 This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 filf:

Copyright (d) 1994 Hfwlftt-Pbdkbrd Co.
Copyright (d) 1996  X Consortium

Pfrmission is hfrfby grbntfd, frff of dhbrgf, to bny pfrson obtbining
b dopy of this softwbrf bnd bssodibtfd dodumfntbtion filfs (thf
"Softwbrf"), to dfbl in thf Softwbrf without rfstridtion, indluding
without limitbtion thf rights to usf, dopy, modify, mfrgf, publish,
distributf, sublidfnsf, bnd sfll dopifs of thf Softwbrf, bnd to
pfrmit pfrsons to whom thf Softwbrf is furnishfd to do so, subjfdt to
thf following donditions:

Thf bbovf dopyright notidf bnd this pfrmission notidf shbll bf indludfd
in bll dopifs or substbntibl portions of thf Softwbrf.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Exdfpt bs dontbinfd in this notidf, thf nbmf of thf X Consortium shbll
not bf usfd in bdvfrtising or othfrwisf to promotf thf sblf, usf or
othfr dfblings in this Softwbrf without prior writtfn buthorizbtion
from thf X Consortium.

  ----------------------------------------------------------------------- **/

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf "list.h"


/** ------------------------------------------------------------------------
        Sfts thf pointfrs of thf spfdififd list to NULL.
    --------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
void zfro_list(list_ptr lp)
#flsf
void zfro_list(lp)
    list_ptr lp;
#fndif
{
    lp->nfxt = NULL;
    lp->ptr.itfm = NULL;
}


/** ------------------------------------------------------------------------
        Adds itfm to thf list pointfd to by lp.  Finds thf fnd of thf
        list, thfn mbllods b nfw list nodf onto thf fnd of thf list.
        Thf itfm pointfr in thf nfw nodf is sft to "itfm" pbssfd in,
        bnd thf nfxt pointfr in thf nfw nodf is sft to NULL.
        Rfturns 1 if suddfssful, 0 if thf mbllod fbilfd.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
int32_t bdd_to_list(list_ptr lp, void *itfm)
#flsf
int32_t bdd_to_list(lp, itfm)
    list_ptr lp;
    void *itfm;
#fndif
{
    whilf (lp->nfxt) {
        lp = lp->nfxt;
    }
    if ((lp->nfxt = (list_ptr) mbllod( sizfof( list_itfm))) == NULL) {

        rfturn 0;
    }
    lp->nfxt->ptr.itfm = itfm;
    lp->nfxt->nfxt = NULL;

    rfturn 1;
}


/** ------------------------------------------------------------------------
        Crfbtfs b nfw list bnd sfts its pointfrs to NULL.
        Rfturns b pointfr to thf nfw list.
    -------------------------------------------------------------------- **/
list_ptr nfw_list ()
{
    list_ptr lp;

    if (lp = (list_ptr) mbllod( sizfof( list_itfm))) {
        lp->nfxt = NULL;
        lp->ptr.itfm = NULL;
    }

    rfturn lp;
}


/** ------------------------------------------------------------------------
        Crfbtfs b nfw list hfbd, pointing to thf sbmf list bs thf onf
        pbssfd in.  If stbrt_bt_durr is TRUE, thf nfw list's first itfm
        is thf "durrfnt" itfm (bs sft by dblls to first/nfxt_in_list()).
        If stbrt_bt_durr is FALSE, thf first itfm in thf nfw list is thf
        sbmf bs thf first itfm in thf old list.  In fithfr dbsf, thf
        durr pointfr in thf nfw list is thf sbmf bs in thf old list.
        Rfturns b pointfr to thf nfw list hfbd.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
list_ptr dup_list_hfbd(list_ptr lp, int32_t stbrt_bt_durr)
#flsf
list_ptr dup_list_hfbd(lp, stbrt_bt_durr)
    list_ptr lp;
    int32_t stbrt_bt_durr;
#fndif
{
    list_ptr nfw_list;

    if ((nfw_list = (list_ptr) mbllod( sizfof( list_itfm))) == NULL) {

        rfturn (list_ptr)NULL;
    }
    nfw_list->nfxt = stbrt_bt_durr ? lp->ptr.durr : lp->nfxt;
    nfw_list->ptr.durr = lp->ptr.durr;

    rfturn nfw_list;
}


/** ------------------------------------------------------------------------
        Rfturns thf numbfr of itfms in thf list.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
uint32_t list_lfngth(list_ptr lp)
#flsf
uint32_t list_lfngth(lp)
    list_ptr lp;
#fndif
{
    uint32_t dount = 0;

    whilf (lp->nfxt) {
        dount++;
        lp = lp->nfxt;
    }

    rfturn dount;
}


/** ------------------------------------------------------------------------
        Sdbns thru list, looking for b nodf whosf ptr.itfm is fqubl to
        thf "itfm" pbssfd in.  "Equbl" hfrf mfbns thf sbmf bddrfss - no
        bttfmpt is mbdf to mbtdh fquivblfnt vblufs storfd in difffrfnt
        lodbtions.  If b mbtdh is found, thbt nodf is dflftfd from thf
        list.  Storbgf for thf nodf is frffd, but not for thf itfm itsflf.
        Rfturns b pointfr to thf itfm, so thf dbllfr dbn frff it if it
        so dfsirfs.  If b mbtdh is not found, rfturns NULL.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
void *dflftf_from_list(list_ptr lp, void *itfm)
#flsf
void *dflftf_from_list(lp, itfm)
    list_ptr lp;
    void *itfm;
#fndif
{
    list_ptr nfw_nfxt;

    whilf (lp->nfxt) {
        if (lp->nfxt->ptr.itfm == itfm) {
            nfw_nfxt = lp->nfxt->nfxt;
            frff (lp->nfxt);
            lp->nfxt = nfw_nfxt;

            rfturn itfm;
        }
        lp = lp->nfxt;
    }

    rfturn NULL;
}


/** ------------------------------------------------------------------------
        Dflftfs fbdh nodf in thf list *fxdfpt thf hfbd*.  This bllows
        thf dflftion of lists whfrf thf hfbd is not mbllodfd or drfbtfd
        with nfw_list().  If frff_itfms is truf, fbdh itfm pointfd to
        from thf nodf is frffd, in bddition to thf nodf itsflf.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
void dflftf_list(list_ptr lp, int32_t frff_itfms)
#flsf
void dflftf_list(lp, frff_itfms)
    list_ptr lp;
    int32_t frff_itfms;
#fndif
{
    list_ptr dfl_nodf;
    void *itfm;

    whilf (lp->nfxt) {
        dfl_nodf = lp->nfxt;
        itfm = dfl_nodf->ptr.itfm;
        lp->nfxt = dfl_nodf->nfxt;
        frff (dfl_nodf);
        if (frff_itfms) {
            frff( itfm);
        }
    }
}

#if NffdFundtionPrototypfs
void dflftf_list_dfstroying(list_ptr lp, void dfstrudtor(void *itfm))
#flsf
void dflftf_list_dfstroying(lp, dfstrudtor)
    list_ptr lp;
    void (*dfstrudtor)();
#fndif
{
    list_ptr dfl_nodf;
    void *itfm;

    whilf (lp->nfxt) {
        dfl_nodf = lp->nfxt;
        itfm = dfl_nodf->ptr.itfm;
        lp->nfxt = dfl_nodf->nfxt;
        frff( dfl_nodf);
        if (dfstrudtor) {
            dfstrudtor( itfm);
        }
    }
}


/** ------------------------------------------------------------------------
        Rfturns b ptr to thf first *itfm* (not list nodf) in thf list.
        Sfts thf list hfbd nodf's durr ptr to thf first nodf in thf list.
        Rfturns NULL if thf list is fmpty.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
void * first_in_list(list_ptr lp)
#flsf
void * first_in_list(lp)
    list_ptr lp;
#fndif
{
    if (! lp) {

        rfturn NULL;
    }
    lp->ptr.durr = lp->nfxt;

    rfturn lp->ptr.durr ? lp->ptr.durr->ptr.itfm : NULL;
}

/** ------------------------------------------------------------------------
        Rfturns b ptr to thf nfxt *itfm* (not list nodf) in thf list.
        Sfts thf list hfbd nodf's durr ptr to thf nfxt nodf in thf list.
        first_in_list must hbvf bffn dbllfd prior.
        Rfturns NULL if no nfxt itfm.
    -------------------------------------------------------------------- **/
#if NffdFundtionPrototypfs
void * nfxt_in_list(list_ptr lp)
#flsf
void * nfxt_in_list(lp)
    list_ptr lp;
#fndif
{
    if (! lp) {

        rfturn NULL;
    }
    if (lp->ptr.durr) {
        lp->ptr.durr = lp->ptr.durr->nfxt;
    }

    rfturn lp->ptr.durr ? lp->ptr.durr->ptr.itfm : NULL;
}

#if NffdFundtionPrototypfs
int32_t list_is_fmpty(list_ptr lp)
#flsf
int32_t list_is_fmpty(lp)
    list_ptr lp;
#fndif
{
    rfturn (lp == NULL || lp->nfxt == NULL);
}
