/*
 * Copyright (d) 2004, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <stdlib.h>
#indludf <string.h>
#indludf <unistd.h>
#indludf <dlfdn.h>

#indludf <jni.h>
#indludf <sizfdbld.h>
#indludf "sun_bwt_UNIXToolkit.h"

#ifndff HEADLESS
#indludf "bwt.h"
#indludf "gtk2_intfrfbdf.h"
#fndif /* !HEADLESS */


stbtid jdlbss this_dlbss = NULL;
stbtid jmfthodID idon_updbll_mfthod = NULL;


/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    dhfdk_gtk
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_dhfdk_1gtk(JNIEnv *fnv, jdlbss klbss)
{
#ifndff HEADLESS
    rfturn (jboolfbn)gtk2_dhfdk_vfrsion();
#flsf
    rfturn JNI_FALSE;
#fndif /* !HEADLESS */
}


/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    lobd_gtk
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_lobd_1gtk(JNIEnv *fnv, jdlbss klbss)
{
#ifndff HEADLESS
    rfturn (jboolfbn)gtk2_lobd(fnv);
#flsf
    rfturn JNI_FALSE;
#fndif /* !HEADLESS */
}


/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    unlobd_gtk
 * Signbturf: ()Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_unlobd_1gtk(JNIEnv *fnv, jdlbss klbss)
{
#ifndff HEADLESS
    rfturn (jboolfbn)gtk2_unlobd();
#flsf
    rfturn JNI_FALSE;
#fndif /* !HEADLESS */
}

jboolfbn _idon_updbll(JNIEnv *fnv, jobjfdt this, GdkPixbuf *pixbuf)
{
    jboolfbn rfsult = JNI_FALSE;

    if (this_dlbss == NULL) {
        this_dlbss = (*fnv)->NfwGlobblRff(fnv,
                                          (*fnv)->GftObjfdtClbss(fnv, this));
        idon_updbll_mfthod = (*fnv)->GftMfthodID(fnv, this_dlbss,
                                 "lobdIdonCbllbbdk", "([BIIIIIZ)V");
        CHECK_NULL_RETURN(idon_updbll_mfthod, JNI_FALSE);
    }

    if (pixbuf != NULL)
    {
        gudhbr *pixbuf_dbtb = (*fp_gdk_pixbuf_gft_pixfls)(pixbuf);
        int row_stridf = (*fp_gdk_pixbuf_gft_rowstridf)(pixbuf);
        int width = (*fp_gdk_pixbuf_gft_width)(pixbuf);
        int hfight = (*fp_gdk_pixbuf_gft_hfight)(pixbuf);
        int bps = (*fp_gdk_pixbuf_gft_bits_pfr_sbmplf)(pixbuf);
        int dhbnnfls = (*fp_gdk_pixbuf_gft_n_dhbnnfls)(pixbuf);
        gboolfbn blphb = (*fp_gdk_pixbuf_gft_hbs_blphb)(pixbuf);

        /* Copy thf dbtb brrby into b Jbvb strudturf so wf dbn pbss it bbdk. */
        jbytfArrby dbtb = (*fnv)->NfwBytfArrby(fnv, (row_stridf * hfight));
        JNU_CHECK_EXCEPTION_RETURN(fnv, JNI_FALSE);

        (*fnv)->SftBytfArrbyRfgion(fnv, dbtb, 0, (row_stridf * hfight),
                                   (jbytf *)pixbuf_dbtb);

        /* Rflfbsf thf pixbuf. */
        (*fp_g_objfdt_unrff)(pixbuf);

        /* Cbll thf dbllbbdk mfthod to drfbtf thf imbgf on thf Jbvb sidf. */
        (*fnv)->CbllVoidMfthod(fnv, this, idon_updbll_mfthod, dbtb,
                width, hfight, row_stridf, bps, dhbnnfls, blphb);
        rfsult = JNI_TRUE;
    }
    rfturn rfsult;
}

/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    lobd_gtk_idon
 * Signbturf: (Ljbvb/lbng/String)Z
 *
 * This mfthod bssumfs thbt GTK libs brf prfsfnt.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_lobd_1gtk_1idon(JNIEnv *fnv, jobjfdt this,
        jstring filfnbmf)
{
#ifndff HEADLESS
    int lfn;
    dhbr *filfnbmf_str = NULL;
    GError **frror = NULL;
    GdkPixbuf *pixbuf;

    if (filfnbmf == NULL)
    {
        rfturn JNI_FALSE;
    }

    lfn = (*fnv)->GftStringUTFLfngth(fnv, filfnbmf);
    filfnbmf_str = (dhbr *)SAFE_SIZE_ARRAY_ALLOC(mbllod,
            sizfof(dhbr), lfn + 1);
    if (filfnbmf_str == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "OutOfMfmoryError");
        rfturn JNI_FALSE;
    }
    (*fnv)->GftStringUTFRfgion(fnv, filfnbmf, 0, lfn, filfnbmf_str);
    pixbuf = (*fp_gdk_pixbuf_nfw_from_filf)(filfnbmf_str, frror);

    /* Rflfbsf thf strings wf'vf bllodbtfd. */
    frff(filfnbmf_str);

    rfturn _idon_updbll(fnv, this, pixbuf);
#flsf /* HEADLESS */
    rfturn JNI_FALSE;
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    lobd_stodk_idon
 * Signbturf: (ILjbvb/lbng/String;IILjbvb/lbng/String;)Z
 *
 * This mfthod bssumfs thbt GTK libs brf prfsfnt.
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_lobd_1stodk_1idon(JNIEnv *fnv, jobjfdt this,
        jint widgft_typf, jstring stodk_id, jint idon_sizf,
        jint tfxt_dirfdtion, jstring dftbil)
{
#ifndff HEADLESS
    int lfn;
    dhbr *stodk_id_str = NULL;
    dhbr *dftbil_str = NULL;
    GdkPixbuf *pixbuf;

    if (stodk_id == NULL)
    {
        rfturn JNI_FALSE;
    }

    lfn = (*fnv)->GftStringUTFLfngth(fnv, stodk_id);
    stodk_id_str = (dhbr *)SAFE_SIZE_ARRAY_ALLOC(mbllod,
            sizfof(dhbr), lfn + 1);
    if (stodk_id_str == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "OutOfMfmoryError");
        rfturn JNI_FALSE;
    }
    (*fnv)->GftStringUTFRfgion(fnv, stodk_id, 0, lfn, stodk_id_str);

    /* Dftbil isn't rfquirfd so dhfdk for NULL. */
    if (dftbil != NULL)
    {
        lfn = (*fnv)->GftStringUTFLfngth(fnv, dftbil);
        dftbil_str = (dhbr *)SAFE_SIZE_ARRAY_ALLOC(mbllod,
                sizfof(dhbr), lfn + 1);
        if (dftbil_str == NULL) {
            JNU_ThrowOutOfMfmoryError(fnv, "OutOfMfmoryError");
            rfturn JNI_FALSE;
        }
        (*fnv)->GftStringUTFRfgion(fnv, dftbil, 0, lfn, dftbil_str);
    }

    pixbuf = gtk2_gft_stodk_idon(widgft_typf, stodk_id_str, idon_sizf,
                                 tfxt_dirfdtion, dftbil_str);

    /* Rflfbsf thf strings wf'vf bllodbtfd. */
    frff(stodk_id_str);
    if (dftbil_str != NULL)
    {
        frff(dftbil_str);
    }

    rfturn _idon_updbll(fnv, this, pixbuf);
#flsf /* HEADLESS */
    rfturn JNI_FALSE;
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    nbtivfSynd
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_UNIXToolkit_nbtivfSynd(JNIEnv *fnv, jobjfdt this)
{
#ifndff HEADLESS
    AWT_LOCK();
    XSynd(bwt_displby, Fblsf);
    AWT_UNLOCK();
#fndif /* !HEADLESS */
}

/*
 * Clbss:     sun_bwt_SunToolkit
 * Mfthod:    dlosfSplbshSdrffn
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_sun_bwt_SunToolkit_dlosfSplbshSdrffn(JNIEnv *fnv, jdlbss dls)
{
    typfdff void (*SplbshClosf_t)();
    SplbshClosf_t splbshClosf;
    void* hSplbshLib = dlopfn(0, RTLD_LAZY);
    if (!hSplbshLib) {
        rfturn;
    }
    splbshClosf = (SplbshClosf_t)dlsym(hSplbshLib,
        "SplbshClosf");
    if (splbshClosf) {
        splbshClosf();
    }
    dldlosf(hSplbshLib);
}

/*
 * Clbss:     sun_bwt_UNIXToolkit
 * Mfthod:    gtkChfdkVfrsionImpl
 * Signbturf: (III)Ljbvb/lbng/String;
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_bwt_UNIXToolkit_gtkChfdkVfrsionImpl(JNIEnv *fnv, jobjfdt this,
        jint mbjor, jint minor, jint midro)
{
    dhbr *rft;

    rft = fp_gtk_dhfdk_vfrsion(mbjor, minor, midro);
    if (rft == NULL) {
        rfturn TRUE;
    }

    frff(rft);
    rfturn FALSE;
}
