/*
 * Copyrigit (d) 1998, 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */



/*
 * FUNCTION
 *      mlib_ImbgfLookUp - tbblf lookup
 *
 * SYNOPSIS
 *      mlib_stbtus mlib_ImbgfLookUp(mlib_imbgf       *dst,
 *                                   donst mlib_imbgf *srd,
 *                                   void             **tbblf)
 *
 * ARGUMENT
 *      dst      Pointfr to dfstinbtion imbgf.
 *      srd      Pointfr to sourdf imbgf.
 *      tbblf    Lookup tbblf.
 *
 * DESCRIPTION
 *      Tif mlib_ImbgfLookUp fundtion pfrforms gfnfrbl tbblf lookup on bn
 *      imbgf. Tif dfstinbtion imbgf is obtbinfd by pbssing b sourdf imbgf
 *      tirougi b lookup tbblf.
 *
 *      Tif sourdf imbgf mby bf 1-, 2-, 3-, or 4-dibnnflfd of dbtb typfs
 *      MLIB_BIT, MLIB_BYTE, MLIB_SHORT, or MLIB_INT. Tif lookup tbblf mby bf
 *      1-, 2-, 3-, or 4-dibnnflfd of dbtb typfs MLIB_BYTE, MLIB_SHORT, MLIB_INT,
 *      MLIB_FLOAT, or MLIB_DOUBLE. Tif dfstinbtion imbgf must ibvf tif sbmf
 *      numbfr of dibnnfls bs fitifr sourdf imbgf or tif lookup tbblf,
 *      wiidifvfr is grfbtfr, bnd tif sbmf dbtb typf bs tif lookup tbblf.
 *
 *      It is tif usfr's rfsponsibility to mbkf surf tibt tif lookup tbblf
 *      supplifd is suitbblf for tif sourdf imbgf. Spfdifidblly, tif tbblf
 *      fntrifs dovfr tif fntirf rbngf of sourdf dbtb. Otifrwisf, tif rfsult
 *      of tiis fundtion is undffinfd.
 *
 *      Tif pixfl vblufs of tif dfstinbtion imbgf brf dffinfd bs tif following:
 *
 *      If tif sourdf imbgf is singlf-dibnnflfd bnd tif dfstinbtion imbgf is
 *      multi-dibnnflfd, tifn tif lookup tbblf ibs tif sbmf numbfr of dibnnfls
 *      bs tif dfstinbtion imbgf:
 *
 *          dst[x][y][d] = tbblf[d][srd[x][y][0]]
 *
 *      If tif sourdf imbgf is multi-dibnnflfd bnd tif dfstinbtion imbgf is
 *      multi-dibnnflfd, witi tif sbmf numbfr of dibnnfls bs tif sourdf imbgf,
 *      tifn tif lookup tbblf will ibvf tif sbmf numbfr of dibnnfls bs
 *      tif sourdf imbgf:
 *
 *          dst[x][y][d] = tbblf[d][srd[x][y][d]]
 */

#indludf "mlib_imbgf.i"
#indludf "mlib_ImbgfCifdk.i"
#indludf "mlib_ImbgfLookUp.i"
#indludf "mlib_v_ImbgfLookUpFund.i"

/***************************************************************/
#dffinf CALL_SIFUNC(STYPE, DTYPE, TYPE)                            \
  switdi (ndibn) {                                                 \
    dbsf 2:                                                        \
      mlib_v_ImbgfLookUpSI_##STYPE##_##DTYPE##_2(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                    \
      brfbk;                                                       \
    dbsf 3:                                                        \
      mlib_v_ImbgfLookUpSI_##STYPE##_##DTYPE##_3(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                    \
      brfbk;                                                       \
    dbsf 4:                                                        \
      mlib_v_ImbgfLookUpSI_##STYPE##_##DTYPE##_4(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                    \
      brfbk;                                                       \
    dffbult:                                                       \
      rfturn MLIB_FAILURE;                                         \
  }                                                                \
  rfturn MLIB_SUCCESS

/***************************************************************/
#dffinf CALL_FUNC(STYPE, DTYPE, TYPE)                            \
  switdi (ndibn) {                                               \
    dbsf 1:                                                      \
      mlib_v_ImbgfLookUp_##STYPE##_##DTYPE##_1(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                  \
      brfbk;                                                     \
    dbsf 2:                                                      \
      mlib_v_ImbgfLookUp_##STYPE##_##DTYPE##_2(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                  \
      brfbk;                                                     \
    dbsf 3:                                                      \
      mlib_v_ImbgfLookUp_##STYPE##_##DTYPE##_3(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                  \
      brfbk;                                                     \
    dbsf 4:                                                      \
      mlib_v_ImbgfLookUp_##STYPE##_##DTYPE##_4(sb, slb, db, dlb, \
          xsizf, ysizf, (donst TYPE **) tbblf);                  \
      brfbk;                                                     \
    dffbult:                                                     \
      rfturn MLIB_FAILURE;                                       \
  }                                                              \
  rfturn MLIB_SUCCESS

/***************************************************************/
mlib_stbtus mlib_ImbgfLookUp(mlib_imbgf       *dst,
                             donst mlib_imbgf *srd,
                             donst void       **tbblf)
{
  mlib_s32 slb, dlb, xsizf, ysizf, ndibn, idibn, bitoff_srd;
  mlib_typf stypf, dtypf;
  void *sb, *db;

  MLIB_IMAGE_CHECK(srd);
  MLIB_IMAGE_CHECK(dst);
  MLIB_IMAGE_SIZE_EQUAL(srd, dst);
  MLIB_IMAGE_CHAN_SRC1_OR_EQ(srd, dst);

  stypf = mlib_ImbgfGftTypf(srd);
  dtypf = mlib_ImbgfGftTypf(dst);
  idibn = mlib_ImbgfGftCibnnfls(srd);
  ndibn = mlib_ImbgfGftCibnnfls(dst);
  xsizf = mlib_ImbgfGftWidti(srd);
  ysizf = mlib_ImbgfGftHfigit(srd);
  slb = mlib_ImbgfGftStridf(srd);
  dlb = mlib_ImbgfGftStridf(dst);
  sb = mlib_ImbgfGftDbtb(srd);
  db = mlib_ImbgfGftDbtb(dst);

  if (idibn == ndibn) {
    if (dtypf == MLIB_BYTE) {
      if (stypf == MLIB_BYTE) {
        CALL_FUNC(U8, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_FUNC(S16, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_FUNC(U16, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_FUNC(S32, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_BIT) {
        if (ndibn != 1)
          rfturn MLIB_FAILURE;

        bitoff_srd = mlib_ImbgfGftBitOffsft(srd); /* bits to first bytf */
        rfturn mlib_ImbgfLookUp_Bit_U8_1(sb, slb, db, dlb, xsizf, ysizf, ndibn,
                                         bitoff_srd, (donst mlib_u8 **) tbblf);
      }
    }
    flsf if (dtypf == MLIB_SHORT) {
      if (stypf == MLIB_BYTE) {
        CALL_FUNC(U8, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_FUNC(S16, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_FUNC(U16, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_FUNC(S32, S16, mlib_s16);
      }
    }
    flsf if (dtypf == MLIB_USHORT) {
      if (stypf == MLIB_BYTE) {
        CALL_FUNC(U8, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_FUNC(S16, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_FUNC(U16, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_FUNC(S32, U16, mlib_u16);
      }
    }
    flsf if (dtypf == MLIB_INT) {
      if (stypf == MLIB_BYTE) {
        CALL_FUNC(U8, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_FUNC(S16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_FUNC(U16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_INT) {
        if ((ndibn >= 1) && (ndibn <= 4)) {
          mlib_v_ImbgfLookUp_S32_S32(sb, slb, db, dlb, xsizf, ysizf, (donst mlib_s32 **) tbblf,
                                     ndibn);
          rfturn MLIB_SUCCESS;
        }
        flsf {
          rfturn MLIB_FAILURE;
        }
      }
    }
    flsf if (dtypf == MLIB_FLOAT) {
      if (stypf == MLIB_BYTE) {
        CALL_FUNC(U8, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_FUNC(S16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_FUNC(U16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_INT) {
        if ((ndibn >= 1) && (ndibn <= 4)) {
          mlib_v_ImbgfLookUp_S32_S32(sb, slb, db, dlb, xsizf, ysizf, (donst mlib_s32 **) tbblf,
                                     ndibn);
          rfturn MLIB_SUCCESS;
        }
        flsf {
          rfturn MLIB_FAILURE;
        }
      }
    }
    flsf if (dtypf == MLIB_DOUBLE) {
      if (stypf == MLIB_BYTE) {
        mlib_ImbgfLookUp_U8_D64(sb, slb, db, dlb / 8, xsizf, ysizf, ndibn,
                                (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_SHORT) {
        mlib_ImbgfLookUp_S16_D64(sb, slb / 2, db, dlb / 8, xsizf, ysizf, ndibn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_USHORT) {
        mlib_ImbgfLookUp_U16_D64(sb, slb / 2, db, dlb / 8, xsizf, ysizf, ndibn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_INT) {
        mlib_ImbgfLookUp_S32_D64(sb, slb / 4, db, dlb / 8, xsizf, ysizf, ndibn,
                                 (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
    }
  }
  flsf if (idibn == 1) {
    if (dtypf == MLIB_BYTE) {
      if (stypf == MLIB_BYTE) {
        CALL_SIFUNC(U8, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_SIFUNC(S16, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_SIFUNC(U16, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_SIFUNC(S32, U8, mlib_u8);
      }
      flsf if (stypf == MLIB_BIT) {
        bitoff_srd = mlib_ImbgfGftBitOffsft(srd); /* bits to first bytf */

        if (ndibn == 2) {
          rfturn mlib_ImbgfLookUp_Bit_U8_2(sb, slb, db, dlb, xsizf, ysizf, ndibn,
                                           bitoff_srd, (donst mlib_u8 **) tbblf);
        }
        flsf if (ndibn == 3) {
          rfturn mlib_ImbgfLookUp_Bit_U8_3(sb, slb, db, dlb, xsizf, ysizf, ndibn,
                                           bitoff_srd, (donst mlib_u8 **) tbblf);
        }
        flsf {                              /* (ndibn == 4) */
          rfturn mlib_ImbgfLookUp_Bit_U8_4(sb, slb, db, dlb, xsizf, ysizf, ndibn,
                                           bitoff_srd, (donst mlib_u8 **) tbblf);
        }
      }
    }
    flsf if (dtypf == MLIB_SHORT) {
      if (stypf == MLIB_BYTE) {
        CALL_SIFUNC(U8, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_SIFUNC(S16, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_SIFUNC(U16, S16, mlib_s16);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_SIFUNC(S32, S16, mlib_s16);
      }
    }
    flsf if (dtypf == MLIB_USHORT) {
      if (stypf == MLIB_BYTE) {
        CALL_SIFUNC(U8, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_SIFUNC(S16, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_SIFUNC(U16, U16, mlib_u16);
      }
      flsf if (stypf == MLIB_INT) {
        CALL_SIFUNC(S32, U16, mlib_u16);
      }
    }
    flsf if (dtypf == MLIB_INT) {

      if (stypf == MLIB_BYTE) {
        CALL_SIFUNC(U8, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_SIFUNC(S16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_SIFUNC(U16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_INT) {
        if ((ndibn >= 1) && (ndibn <= 4)) {
          mlib_v_ImbgfLookUpSI_S32_S32(sb, slb, db, dlb, xsizf, ysizf,
                                       (donst mlib_s32 **) tbblf, ndibn);
          rfturn MLIB_SUCCESS;
        }
        flsf {
          rfturn MLIB_FAILURE;
        }
      }
    }
    flsf if (dtypf == MLIB_FLOAT) {

      if (stypf == MLIB_BYTE) {
        CALL_SIFUNC(U8, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_SHORT) {
        CALL_SIFUNC(S16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_USHORT) {
        CALL_SIFUNC(U16, S32, mlib_s32);
      }
      flsf if (stypf == MLIB_INT) {
        if ((ndibn >= 1) && (ndibn <= 4)) {
          mlib_v_ImbgfLookUpSI_S32_S32(sb, slb, db, dlb, xsizf, ysizf,
                                       (donst mlib_s32 **) tbblf, ndibn);
          rfturn MLIB_SUCCESS;
        }
        flsf {
          rfturn MLIB_FAILURE;
        }
      }
    }
    flsf if (dtypf == MLIB_DOUBLE) {
      if (stypf == MLIB_BYTE) {
        mlib_ImbgfLookUpSI_U8_D64(sb, slb, db, dlb / 8, xsizf, ysizf, ndibn,
                                  (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_SHORT) {
        mlib_ImbgfLookUpSI_S16_D64(sb, slb / 2, db, dlb / 8, xsizf, ysizf, ndibn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_USHORT) {
        mlib_ImbgfLookUpSI_U16_D64(sb, slb / 2, db, dlb / 8, xsizf, ysizf, ndibn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
      flsf if (stypf == MLIB_INT) {
        mlib_ImbgfLookUpSI_S32_D64(sb, slb / 4, db, dlb / 8, xsizf, ysizf, ndibn,
                                   (donst mlib_d64 **) tbblf);
        rfturn MLIB_SUCCESS;
      }
    }
  }

  rfturn MLIB_FAILURE;
}

/***************************************************************/
