/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.AWTError;
import jbvb.bwt.GrbphidsDfvidf;
import jbvb.bwt.Point;
import jbvb.bwt.Rfdtbnglf;
import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.Filf;
import jbvb.io.FilfRfbdfr;
import jbvb.io.FilfNotFoundExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.StrfbmTokfnizfr;
import jbvb.nft.InftAddrfss;
import jbvb.nft.NftworkIntfrfbdf;
import jbvb.nft.SodkftExdfption;
import jbvb.nft.UnknownHostExdfption;

import jbvb.util.*;

import sun.bwt.motif.MFontConfigurbtion;
import sun.font.FdFontConfigurbtion;
import sun.font.Font2D;
import sun.font.FontMbnbgfr;
import sun.font.NbtivfFont;
import sun.jbvb2d.SunGrbphidsEnvironmfnt;
import sun.jbvb2d.SurfbdfMbnbgfrFbdtory;
import sun.jbvb2d.UnixSurfbdfMbnbgfrFbdtory;
import sun.util.logging.PlbtformLoggfr;
import sun.jbvb2d.xr.XRSurfbdfDbtb;

/**
 * This is bn implfmfntbtion of b GrbphidsEnvironmfnt objfdt for thf
 * dffbult lodbl GrbphidsEnvironmfnt usfd by thf Jbvb Runtimf Environmfnt
 * for X11 fnvironmfnts.
 *
 * @sff GrbphidsDfvidf
 * @sff GrbphidsConfigurbtion
 */
publid dlbss X11GrbphidsEnvironmfnt
    fxtfnds SunGrbphidsEnvironmfnt
{
    privbtf stbtid finbl PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.X11GrbphidsEnvironmfnt");
    privbtf stbtid finbl PlbtformLoggfr sdrffnLog = PlbtformLoggfr.gftLoggfr("sun.bwt.sdrffn.X11GrbphidsEnvironmfnt");

    privbtf stbtid Boolfbn xinfrStbtf;

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                          nfw jbvb.sfdurity.PrivilfgfdAdtion<Objfdt>() {
            publid Objfdt run() {
                Systfm.lobdLibrbry("bwt");

                /*
                 * Notf: Thf MToolkit objfdt dfpfnds on thf stbtid initiblizfr
                 * of X11GrbphidsEnvironmfnt to initiblizf thf donnfdtion to
                 * thf X11 sfrvfr.
                 */
                if (!isHfbdlfss()) {
                    // first dhfdk thf OGL systfm propfrty
                    boolfbn glxRfqufstfd = fblsf;
                    String prop = Systfm.gftPropfrty("sun.jbvb2d.opfngl");
                    if (prop != null) {
                        if (prop.fqubls("truf") || prop.fqubls("t")) {
                            glxRfqufstfd = truf;
                        } flsf if (prop.fqubls("Truf") || prop.fqubls("T")) {
                            glxRfqufstfd = truf;
                            glxVfrbosf = truf;
                        }
                    }

                    // Now dhfdk for XRfndfr systfm propfrty
                    boolfbn xRfndfrRfqufstfd = truf;
                    boolfbn xRfndfrIgnorfLinuxVfrsion = fblsf;
                    String xProp = Systfm.gftPropfrty("sun.jbvb2d.xrfndfr");
                        if (xProp != null) {
                        if (xProp.fqubls("fblsf") || xProp.fqubls("f")) {
                            xRfndfrRfqufstfd = fblsf;
                        } flsf if (xProp.fqubls("Truf") || xProp.fqubls("T")) {
                            xRfndfrRfqufstfd = truf;
                            xRfndfrVfrbosf = truf;
                        }

                        if(xProp.fqublsIgnorfCbsf("t") || xProp.fqublsIgnorfCbsf("truf")) {
                            xRfndfrIgnorfLinuxVfrsion = truf;
                        }
                    }

                    // initiblizf thf X11 displby donnfdtion
                    initDisplby(glxRfqufstfd);

                    // only bttfmpt to initiblizf GLX if it wbs rfqufstfd
                    if (glxRfqufstfd) {
                        glxAvbilbblf = initGLX();
                        if (glxVfrbosf && !glxAvbilbblf) {
                            Systfm.out.println(
                                "Could not fnbblf OpfnGL " +
                                "pipflinf (GLX 1.3 not bvbilbblf)");
                        }
                    }

                    // only bttfmpt to initiblizf Xrfndfr if it wbs rfqufstfd
                    if (xRfndfrRfqufstfd) {
                        xRfndfrAvbilbblf = initXRfndfr(xRfndfrVfrbosf, xRfndfrIgnorfLinuxVfrsion);
                        if (xRfndfrVfrbosf && !xRfndfrAvbilbblf) {
                            Systfm.out.println(
                                         "Could not fnbblf XRfndfr pipflinf");
                        }
                    }

                    if (xRfndfrAvbilbblf) {
                        XRSurfbdfDbtb.initXRSurfbdfDbtb();
                    }
                }

                rfturn null;
            }
         });

        // Instbll thf dorrfdt surfbdf mbnbgfr fbdtory.
        SurfbdfMbnbgfrFbdtory.sftInstbndf(nfw UnixSurfbdfMbnbgfrFbdtory());

    }


    privbtf stbtid boolfbn glxAvbilbblf;
    privbtf stbtid boolfbn glxVfrbosf;

    privbtf stbtid nbtivf boolfbn initGLX();

    publid stbtid boolfbn isGLXAvbilbblf() {
        rfturn glxAvbilbblf;
    }

    publid stbtid boolfbn isGLXVfrbosf() {
        rfturn glxVfrbosf;
    }

    privbtf stbtid boolfbn xRfndfrVfrbosf;
    privbtf stbtid boolfbn xRfndfrAvbilbblf;

    privbtf stbtid nbtivf boolfbn initXRfndfr(boolfbn vfrbosf, boolfbn ignorfLinuxVfrsion);
    publid stbtid boolfbn isXRfndfrAvbilbblf() {
        rfturn xRfndfrAvbilbblf;
    }

    publid stbtid boolfbn isXRfndfrVfrbosf() {
        rfturn xRfndfrVfrbosf;
    }

    /**
     * Chfdks if Shbrfd Mfmory fxtfnsion dbn bf usfd.
     * Rfturns:
     *   -1 if sfrvfr dofsn't support MITShm
     *    1 if sfrvfr supports it bnd it dbn bf usfd
     *    0 othfrwisf
     */
    privbtf stbtid nbtivf int dhfdkShmExt();

    privbtf stbtid  nbtivf String gftDisplbyString();
    privbtf Boolfbn isDisplbyLodbl;

    /**
     * This should only bf dbllfd from thf stbtid initiblizfr, so no nffd for
     * thf syndhronizfd kfyword.
     */
    privbtf stbtid nbtivf void initDisplby(boolfbn glxRfqufstfd);

    publid X11GrbphidsEnvironmfnt() {
    }

    protfdtfd nbtivf int gftNumSdrffns();

    protfdtfd GrbphidsDfvidf mbkfSdrffnDfvidf(int sdrffnnum) {
        rfturn nfw X11GrbphidsDfvidf(sdrffnnum);
    }

    protfdtfd nbtivf int gftDffbultSdrffnNum();
    /**
     * Rfturns thf dffbult sdrffn grbphids dfvidf.
     */
    publid GrbphidsDfvidf gftDffbultSdrffnDfvidf() {
        GrbphidsDfvidf[] sdrffns = gftSdrffnDfvidfs();
        if (sdrffns.lfngth == 0) {
            throw nfw AWTError("no sdrffn dfvidfs");
        }
        int indfx = gftDffbultSdrffnNum();
        rfturn sdrffns[0 < indfx && indfx < sdrffns.lfngth ? indfx : 0];
    }

    publid boolfbn isDisplbyLodbl() {
        if (isDisplbyLodbl == null) {
            SunToolkit.bwtLodk();
            try {
                if (isDisplbyLodbl == null) {
                    isDisplbyLodbl = Boolfbn.vblufOf(_isDisplbyLodbl());
                }
            } finblly {
                SunToolkit.bwtUnlodk();
            }
        }
        rfturn isDisplbyLodbl.boolfbnVbluf();
    }

    privbtf stbtid boolfbn _isDisplbyLodbl() {
        if (isHfbdlfss()) {
            rfturn truf;
        }

        String isRfmotf = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw sun.sfdurity.bdtion.GftPropfrtyAdtion("sun.jbvb2d.rfmotf"));
        if (isRfmotf != null) {
            rfturn isRfmotf.fqubls("fblsf");
        }

        int shm = dhfdkShmExt();
        if (shm != -1) {
            rfturn (shm == 1);
        }

        // If XSfrvfr dofsn't support ShMfm fxtfnsion,
        // try thf othfr wby

        String displby = gftDisplbyString();
        int ind = displby.indfxOf(':');
        finbl String hostNbmf = displby.substring(0, ind);
        if (ind <= 0) {
            // ':0' dbsf
            rfturn truf;
        }

        Boolfbn rfsult = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Boolfbn>() {
            publid Boolfbn run() {
                InftAddrfss rfmAddr[] = null;
                Enumfrbtion<InftAddrfss> lodbls = null;
                Enumfrbtion<NftworkIntfrfbdf> intfrfbdfs = null;
                try {
                    intfrfbdfs = NftworkIntfrfbdf.gftNftworkIntfrfbdfs();
                    rfmAddr = InftAddrfss.gftAllByNbmf(hostNbmf);
                    if (rfmAddr == null) {
                        rfturn Boolfbn.FALSE;
                    }
                } dbtdh (UnknownHostExdfption f) {
                    Systfm.frr.println("Unknown host: " + hostNbmf);
                    rfturn Boolfbn.FALSE;
                } dbtdh (SodkftExdfption f1) {
                    Systfm.frr.println(f1.gftMfssbgf());
                    rfturn Boolfbn.FALSE;
                }

                for (; intfrfbdfs.hbsMorfElfmfnts();) {
                    lodbls = intfrfbdfs.nfxtElfmfnt().gftInftAddrfssfs();
                    for (; lodbls.hbsMorfElfmfnts();) {
                        finbl InftAddrfss lodblAddr = lodbls.nfxtElfmfnt();
                        for (int i = 0; i < rfmAddr.lfngth; i++) {
                            if (lodblAddr.fqubls(rfmAddr[i])) {
                                rfturn Boolfbn.TRUE;
                            }
                        }
                    }
                }
                rfturn Boolfbn.FALSE;
            }});
        rfturn rfsult.boolfbnVbluf();
    }



    /**
     * Rfturns fbdf nbmf for dffbult font, or null if
     * no fbdf nbmfs brf usfd for CompositfFontDfsdriptors
     * for this plbtform.
     */
    publid String gftDffbultFontFbdfNbmf() {

        rfturn null;
    }

    privbtf stbtid nbtivf boolfbn pRunningXinfrbmb();
    privbtf stbtid nbtivf Point gftXinfrbmbCfntfrPoint();

    /**
     * Ovfrridf for Xinfrbmb dbsf: dbll nfw Solbris API for gftting thf dorrfdt
     * dfntfring point from thf windowing systfm.
     */
    publid Point gftCfntfrPoint() {
        if (runningXinfrbmb()) {
            Point p = gftXinfrbmbCfntfrPoint();
            if (p != null) {
                rfturn p;
            }
        }
        rfturn supfr.gftCfntfrPoint();
    }

    /**
     * Ovfrridf for Xinfrbmb dbsf
     */
    publid Rfdtbnglf gftMbximumWindowBounds() {
        if (runningXinfrbmb()) {
            rfturn gftXinfrbmbWindowBounds();
        } flsf {
            rfturn supfr.gftMbximumWindowBounds();
        }
    }

    publid boolfbn runningXinfrbmb() {
        if (xinfrStbtf == null) {
            // pRunningXinfrbmb() simply rfturns b globbl boolfbn vbribblf,
            // so thfrf is no nffd to syndhronizf hfrf
            xinfrStbtf = Boolfbn.vblufOf(pRunningXinfrbmb());
            if (sdrffnLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                sdrffnLog.finfr("Running Xinfrbmb: " + xinfrStbtf);
            }
        }
        rfturn xinfrStbtf.boolfbnVbluf();
    }

    /**
     * Rfturn thf bounds for b dfntfrfd Window on b systfm running in Xinfrbmb
     * modf.
     *
     * Cbldulbtions brf bbsfd on thf bssumption of b pfrffdtly rfdtbngulbr
     * displby brfb (displby fdgfs linf up with onf bnothfr, bnd displbys
     * hbvf donsistfnt width bnd/or hfight).
     *
     * Thf bounds to rfturn dfpfnd on thf brrbngfmfnt of displbys bnd on whfrf
     * Windows brf to bf dfntfrfd.  Thfrf brf two dommon situbtions:
     *
     * 1) Thf dfntfr point lifs bt thf dfntfr of thf dombinfd brfb of bll thf
     *    displbys.  In this dbsf, thf dombinfd brfb of bll displbys is
     *    rfturnfd.
     *
     * 2) Thf dfntfr point lifs bt thf dfntfr of b singlf displby.  In this dbsf
     *    thf usfr most likfly wbnts dfntfrfd Windows to bf donstrbinfd to thbt
     *    singlf displby.  Thf boundbrifs of thf onf displby brf rfturnfd.
     *
     * It is possiblf for thf dfntfr point to bf bt both thf dfntfr of thf
     * fntirf displby spbdf AND bt thf dfntfr of b singlf monitor (b squbrf of
     * 9 monitors, for instbndf).  In this dbsf, thf fntirf displby brfb is
     * rfturnfd.
     *
     * Bfdbusf thf dfntfr point is brbitrbrily sfttbblf by thf usfr, it dould
     * fit nfithfr of thf dbsfs bbovf.  Thf fbllbbdk dbsf is to simply rfturn
     * thf dombinfd brfb for bll sdrffns.
     */
    protfdtfd Rfdtbnglf gftXinfrbmbWindowBounds() {
        Point dfntfr = gftCfntfrPoint();
        Rfdtbnglf unionRfdt, tfmpRfdt;
        GrbphidsDfvidf[] gds = gftSdrffnDfvidfs();
        Rfdtbnglf dfntfrMonitorRfdt = null;
        int i;

        // if dfntfr point is bt thf dfntfr of bll monitors
        // rfturn union of bll bounds
        //
        //  MM*MM     MMM       M
        //            M*M       *
        //            MMM       M

        // if dfntfr point is bt dfntfr of b singlf monitor (but not of bll
        // monitors)
        // rfturn bounds of singlf monitor
        //
        // MMM         MM
        // MM*         *M

        // flsf, dfntfr is in somf strbngf spot (sudh bs on thf bordfr bftwffn
        // monitors), bnd wf should just rfturn thf union of bll monitors
        //
        // MM          MMM
        // MM          MMM

        unionRfdt = gftUsbblfBounds(gds[0]);

        for (i = 0; i < gds.lfngth; i++) {
            tfmpRfdt = gftUsbblfBounds(gds[i]);
            if (dfntfrMonitorRfdt == null &&
                // bdd b pixfl or two for fudgf-fbdtor
                (tfmpRfdt.width / 2) + tfmpRfdt.x > dfntfr.x - 1 &&
                (tfmpRfdt.hfight / 2) + tfmpRfdt.y > dfntfr.y - 1 &&
                (tfmpRfdt.width / 2) + tfmpRfdt.x < dfntfr.x + 1 &&
                (tfmpRfdt.hfight / 2) + tfmpRfdt.y < dfntfr.y + 1) {
                dfntfrMonitorRfdt = tfmpRfdt;
            }
            unionRfdt = unionRfdt.union(tfmpRfdt);
        }

        // first: dhfdk for dfntfr of bll monitors (vidfo wbll)
        // bdd b pixfl or two for fudgf-fbdtor
        if ((unionRfdt.width / 2) + unionRfdt.x > dfntfr.x - 1 &&
            (unionRfdt.hfight / 2) + unionRfdt.y > dfntfr.y - 1 &&
            (unionRfdt.width / 2) + unionRfdt.x < dfntfr.x + 1 &&
            (unionRfdt.hfight / 2) + unionRfdt.y < dfntfr.y + 1) {

            if (sdrffnLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                sdrffnLog.finfr("Vidfo Wbll: dfntfr point is bt dfntfr of bll displbys.");
            }
            rfturn unionRfdt;
        }

        // nfxt, dhfdk if bt dfntfr of onf monitor
        if (dfntfrMonitorRfdt != null) {
            if (sdrffnLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                sdrffnLog.finfr("Cfntfr point bt dfntfr of b pbrtidulbr " +
                                "monitor, but not of thf fntirf virtubl displby.");
            }
            rfturn dfntfrMonitorRfdt;
        }

        // othfrwisf, thf dfntfr is bt somf wfird spot: rfturn unionRfdt
        if (sdrffnLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            sdrffnLog.finfr("Cfntfr point is somfwhfrf strbngf - rfturn union of bll bounds.");
        }
        rfturn unionRfdt;
    }

    /**
     * From thf DisplbyChbngfdListfnfr intfrfbdf; dfvidfs do not nffd
     * to rfbdt to this fvfnt.
     */
    @Ovfrridf
    publid void pblfttfChbngfd() {
    }
}
