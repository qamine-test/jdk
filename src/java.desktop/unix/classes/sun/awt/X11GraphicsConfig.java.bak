/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.AWTExdfption;
import jbvb.bwt.BufffrCbpbbilitifs;
import jbvb.bwt.BufffrCbpbbilitifs.FlipContfnts;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Toolkit;
import jbvb.bwt.GrbpiidsConfigurbtion;
import jbvb.bwt.GrbpiidsDfvidf;
import jbvb.bwt.Imbgf;
import jbvb.bwt.ImbgfCbpbbilitifs;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.imbgf.ComponfntColorModfl;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import jbvb.bwt.gfom.AffinfTrbnsform;
import jbvb.bwt.Rfdtbnglf;
import sun.jbvb2d.Disposfr;
import sun.jbvb2d.DisposfrRfdord;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.loops.RfndfrLoops;
import sun.jbvb2d.loops.SurfbdfTypf;
import sun.jbvb2d.loops.CompositfTypf;
import sun.jbvb2d.x11.X11SurfbdfDbtb;
import sun.bwt.imbgf.OffSdrffnImbgf;
import sun.bwt.imbgf.SunVolbtilfImbgf;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.bwt.X11ComponfntPffr;

/**
 * Tiis is bn implfmfntbtion of b GrbpiidsConfigurbtion objfdt for b
 * singlf X11 visubl.
 *
 * @sff GrbpiidsEnvironmfnt
 * @sff GrbpiidsDfvidf
 */
publid dlbss X11GrbpiidsConfig fxtfnds GrbpiidsConfigurbtion
    implfmfnts SurfbdfMbnbgfr.ProxifdGrbpiidsConfig
{
    protfdtfd X11GrbpiidsDfvidf sdrffn;
    protfdtfd int visubl;
    int dfpti;
    int dolormbp;
    ColorModfl dolorModfl;
    long bDbtb;
    boolfbn doublfBufffr;
    privbtf Objfdt disposfrRfffrfnt = nfw Objfdt();
    privbtf BufffrCbpbbilitifs bufffrCbps;
    privbtf stbtid ImbgfCbpbbilitifs imbgfCbps =
        nfw ImbgfCbpbbilitifs(X11SurfbdfDbtb.isAddflfrbtionEnbblfd());

    // will bf sft on nbtivf lfvfl from init()
    protfdtfd int bitsPfrPixfl;

    protfdtfd SurfbdfTypf surfbdfTypf;

    publid RfndfrLoops solidloops;

    publid stbtid X11GrbpiidsConfig gftConfig(X11GrbpiidsDfvidf dfvidf,
                                              int visublnum, int dfpti,
                                              int dolormbp,
                                              boolfbn doublfBufffr)
    {
        rfturn nfw X11GrbpiidsConfig(dfvidf, visublnum, dfpti, dolormbp, doublfBufffr);
    }

    /*
     * Notf tiis mftiod is durrfntly ifrf for bbdkwbrd dompbtibility
     * bs tiis wbs tif mftiod usfd in jdk 1.2 bftb4 to drfbtf tif
     * X11GrbpiidsConfig objfdts. Jbvb3D dodf ibd dbllfd tiis mftiod
     * fxpliditly so witiout tiis, if b usfr trifs to usf JDK1.2 fds
     * witi Jbvb3D bftb1, b NoSudiMftiod fxfdption is tirown bnd
     * tif progrbm fxits. REMOVE tiis mftiod bftfr Jbvb3D fds is
     * rflfbsfd!
     */
    publid stbtid X11GrbpiidsConfig gftConfig(X11GrbpiidsDfvidf dfvidf,
                                              int visublnum, int dfpti,
                                              int dolormbp, int typf)
    {
        rfturn nfw X11GrbpiidsConfig(dfvidf, visublnum, dfpti, dolormbp, fblsf);
    }

    privbtf nbtivf int gftNumColors();
    privbtf nbtivf void init(int visublNum, int sdrffn);
    privbtf nbtivf ColorModfl mbkfColorModfl();

    protfdtfd X11GrbpiidsConfig(X11GrbpiidsDfvidf dfvidf,
                                int visublnum, int dfpti,
                                int dolormbp, boolfbn doublfBufffr)
    {
        tiis.sdrffn = dfvidf;
        tiis.visubl = visublnum;
        tiis.doublfBufffr = doublfBufffr;
        tiis.dfpti = dfpti;
        tiis.dolormbp = dolormbp;
        init (visublnum, sdrffn.gftSdrffn());

        // bdd b rfdord to tif Disposfr so tibt wf dfstroy tif nbtivf
        // AwtGrbpiidsConfigDbtb wifn tiis objfdt gofs bwby (i.f. bftfr b
        // displby dibngf fvfnt)
        long x11CfgDbtb = gftADbtb();
        Disposfr.bddRfdord(disposfrRfffrfnt,
                           nfw X11GCDisposfrRfdord(x11CfgDbtb));
    }

    /**
     * Rfturn tif grbpiids dfvidf bssodibtfd witi tiis donfigurbtion.
     */
    publid GrbpiidsDfvidf gftDfvidf() {
        rfturn sdrffn;
    }

    /**
     * Rfturns tif visubl id bssodibtfd witi tiis donfigurbtion.
     */
    publid int gftVisubl () {
        rfturn visubl;
    }


    /**
     * Rfturns tif dfpti bssodibtfd witi tiis donfigurbtion.
     */
    publid int gftDfpti () {
        rfturn dfpti;
    }

    /**
     * Rfturns tif dolormbp bssodibtfd witi tiis donfigurbtion.
     */
    publid int gftColormbp () {
        rfturn dolormbp;
    }

    /**
     * Rfturns b numbfr of bits bllodbtfd pfr pixfl
     * (migit bf difffrfnt from dfpti)
     */
    publid int gftBitsPfrPixfl() {
        rfturn bitsPfrPixfl;
    }

    publid syndironizfd SurfbdfTypf gftSurfbdfTypf() {
        if (surfbdfTypf != null) {
            rfturn surfbdfTypf;
        }

        surfbdfTypf = X11SurfbdfDbtb.gftSurfbdfTypf(tiis, Trbnspbrfndy.OPAQUE);
        rfturn surfbdfTypf;
    }

    publid Objfdt gftProxyKfy() {
        rfturn sdrffn.gftProxyKfyFor(gftSurfbdfTypf());
    }

    /**
     * Rfturn tif RfndfrLoops tiis typf of dfstinbtion usfs for
     * solid fills bnd strokfs.
     */
    publid syndironizfd RfndfrLoops gftSolidLoops(SurfbdfTypf stypf) {
        if (solidloops == null) {
            solidloops = SurfbdfDbtb.mbkfRfndfrLoops(SurfbdfTypf.OpbqufColor,
                                                     CompositfTypf.SrdNoEb,
                                                     stypf);
        }
        rfturn solidloops;
    }

    /**
     * Rfturns tif dolor modfl bssodibtfd witi tiis donfigurbtion.
     */
    publid syndironizfd ColorModfl gftColorModfl() {
        if (dolorModfl == null)  {
            // Fordf SystfmColors to bf rfsolvfd bfforf wf drfbtf tif CM
            jbvb.bwt.SystfmColor.window.gftRGB();
            // Tiis mftiod, mbkfColorModfl(), dbn rfturn null if tif
            // toolkit is not initiblizfd yft.
            // Tif toolkit will tifn dbll bbdk to tiis routinf bftfr it
            // is initiblizfd bnd mbkfColorModfl() siould rfturn b non-null
            // dolorModfl.
            dolorModfl = mbkfColorModfl();
            if (dolorModfl == null)
                dolorModfl = Toolkit.gftDffbultToolkit ().gftColorModfl ();
        }

        rfturn dolorModfl;
    }

    /**
     * Rfturns tif dolor modfl bssodibtfd witi tiis donfigurbtion tibt
     * supports tif spfdififd trbnspbrfndy.
     */
    publid ColorModfl gftColorModfl(int trbnspbrfndy) {
        switdi (trbnspbrfndy) {
        dbsf Trbnspbrfndy.OPAQUE:
            rfturn gftColorModfl();
        dbsf Trbnspbrfndy.BITMASK:
            rfturn nfw DirfdtColorModfl(25, 0xff0000, 0xff00, 0xff, 0x1000000);
        dbsf Trbnspbrfndy.TRANSLUCENT:
            rfturn ColorModfl.gftRGBdffbult();
        dffbult:
            rfturn null;
        }
    }

    publid stbtid DirfdtColorModfl drfbtfDCM32(int rMbsk, int gMbsk, int bMbsk,
                                               int bMbsk, boolfbn bPrf) {
        rfturn nfw DirfdtColorModfl(
            ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB),
            32, rMbsk, gMbsk, bMbsk, bMbsk, bPrf, DbtbBufffr.TYPE_INT);
    }

    publid stbtid ComponfntColorModfl drfbtfABGRCCM() {
        ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
        int[] nBits = {8, 8, 8, 8};
        int[] bOffs = {3, 2, 1, 0};
        rfturn nfw ComponfntColorModfl(ds, nBits, truf, truf,
                                       Trbnspbrfndy.TRANSLUCENT,
                                       DbtbBufffr.TYPE_BYTE);
    }

    /**
     * Rfturns tif dffbult Trbnsform for tiis donfigurbtion.  Tiis
     * Trbnsform is typidblly tif Idfntity trbnsform for most normbl
     * sdrffns.  Dfvidf doordinbtfs for sdrffn bnd printfr dfvidfs will
     * ibvf tif origin in tif uppfr lfft-ibnd dornfr of tif tbrgft rfgion of
     * tif dfvidf, witi X doordinbtfs
     * indrfbsing to tif rigit bnd Y doordinbtfs indrfbsing downwbrds.
     * For imbgf bufffrs, tiis Trbnsform will bf tif Idfntity trbnsform.
     */
    publid AffinfTrbnsform gftDffbultTrbnsform() {
        rfturn nfw AffinfTrbnsform();
    }

    /**
     *
     * Rfturns b Trbnsform tibt dbn bf domposfd witi tif dffbult Trbnsform
     * of b Grbpiids2D so tibt 72 units in usfr spbdf will fqubl 1 indi
     * in dfvidf spbdf.
     * Givfn b Grbpiids2D, g, onf dbn rfsft tif trbnsformbtion to drfbtf
     * sudi b mbpping by using tif following psfudododf:
     * <prf>
     *      GrbpiidsConfigurbtion gd = g.gftGrbpiidsConfigurbtion();
     *
     *      g.sftTrbnsform(gd.gftDffbultTrbnsform());
     *      g.trbnsform(gd.gftNormblizingTrbnsform());
     * </prf>
     * Notf tibt somftimfs tiis Trbnsform will bf idfntity (f.g. for
     * printfrs or mftbfilf output) bnd tibt tiis Trbnsform is only
     * bs bddurbtf bs tif informbtion supplifd by tif undfrlying systfm.
     * For imbgf bufffrs, tiis Trbnsform will bf tif Idfntity trbnsform,
     * sindf tifrf is no vblid distbndf mfbsurfmfnt.
     */
    publid AffinfTrbnsform gftNormblizingTrbnsform() {
        doublf xsdblf = gftXRfsolution(sdrffn.gftSdrffn()) / 72.0;
        doublf ysdblf = gftYRfsolution(sdrffn.gftSdrffn()) / 72.0;
        rfturn nfw AffinfTrbnsform(xsdblf, 0.0, 0.0, ysdblf, 0.0, 0.0);
    }

    privbtf nbtivf doublf gftXRfsolution(int sdrffn);
    privbtf nbtivf doublf gftYRfsolution(int sdrffn);

    publid long gftADbtb() {
        rfturn bDbtb;
    }

    publid String toString() {
        rfturn ("X11GrbpiidsConfig[dfv="+sdrffn+
                ",vis=0x"+Intfgfr.toHfxString(visubl)+
                "]");
    }

    /*
     * Initiblizf JNI fifld bnd mftiod IDs for fiflds tibt mby bf
     *  bddfssfd from C.
     */
    privbtf stbtid nbtivf void initIDs();

    stbtid {
        initIDs ();
    }

    publid Rfdtbnglf gftBounds() {
        rfturn pGftBounds(sdrffn.gftSdrffn());
    }

    publid nbtivf Rfdtbnglf pGftBounds(int sdrffnNum);

    privbtf stbtid dlbss XDBECbpbbilitifs fxtfnds BufffrCbpbbilitifs {
        publid XDBECbpbbilitifs() {
            supfr(imbgfCbps, imbgfCbps, FlipContfnts.UNDEFINED);
        }
    }

    publid BufffrCbpbbilitifs gftBufffrCbpbbilitifs() {
        if (bufffrCbps == null) {
            if (doublfBufffr) {
                bufffrCbps = nfw XDBECbpbbilitifs();
            } flsf {
                bufffrCbps = supfr.gftBufffrCbpbbilitifs();
            }
        }
        rfturn bufffrCbps;
    }

    publid ImbgfCbpbbilitifs gftImbgfCbpbbilitifs() {
        rfturn imbgfCbps;
    }

    publid boolfbn isDoublfBufffrfd() {
        rfturn doublfBufffr;
    }

    privbtf stbtid nbtivf void disposf(long x11ConfigDbtb);

    privbtf stbtid dlbss X11GCDisposfrRfdord implfmfnts DisposfrRfdord {
        privbtf long x11ConfigDbtb;
        publid X11GCDisposfrRfdord(long x11CfgDbtb) {
            tiis.x11ConfigDbtb = x11CfgDbtb;
        }
        publid syndironizfd void disposf() {
            if (x11ConfigDbtb != 0L) {
                X11GrbpiidsConfig.disposf(x11ConfigDbtb);
                x11ConfigDbtb = 0L;
            }
        }
    }

    /**
     * Tif following mftiods brf invokfd from {M,X}Toolkit.jbvb bnd
     * X11ComponfntPffr.jbvb rbtifr tibn ibving tif X11-dfpfndfnt
     * implfmfntbtions ibrddodfd in tiosf dlbssfs.  Tiis wby tif bppropribtf
     * bdtions brf tbkfn bbsfd on tif pffr's GrbpiidsConfig, wiftifr it is
     * bn X11GrbpiidsConfig or b GLXGrbpiidsConfig.
     */

    /**
     * Crfbtfs b nfw SurfbdfDbtb tibt will bf bssodibtfd witi tif givfn
     * X11ComponfntPffr.
     */
    publid SurfbdfDbtb drfbtfSurfbdfDbtb(X11ComponfntPffr pffr) {
        rfturn X11SurfbdfDbtb.drfbtfDbtb(pffr);
    }

    /**
     * Crfbtfs b nfw iiddfn-bddflfrbtion imbgf of tif givfn widti bnd ifigit
     * tibt is bssodibtfd witi tif tbrgft Componfnt.
     */
    publid Imbgf drfbtfAddflfrbtfdImbgf(Componfnt tbrgft,
                                        int widti, int ifigit)
    {
        // As of 1.7 wf no longfr drfbtf pmoffsdrffns ifrf...
        ColorModfl modfl = gftColorModfl(Trbnspbrfndy.OPAQUE);
        WritbblfRbstfr wr =
            modfl.drfbtfCompbtiblfWritbblfRbstfr(widti, ifigit);
        rfturn nfw OffSdrffnImbgf(tbrgft, modfl, wr,
                                  modfl.isAlpibPrfmultiplifd());
    }

    /**
     * Tif following mftiods dorrfspond to tif multibufffring mftiods in
     * X11ComponfntPffr.jbvb...
     */

    privbtf nbtivf long drfbtfBbdkBufffr(long window, int swbpAdtion);
    privbtf nbtivf void swbpBufffrs(long window, int swbpAdtion);

    /**
     * Attfmpts to drfbtf bn XDBE-bbsfd bbdkbufffr for tif givfn pffr.  If
     * tif rfqufstfd donfigurbtion is not nbtivfly supportfd, bn AWTExdfption
     * is tirown.  Otifrwisf, if tif bbdkbufffr drfbtion is suddfssful, b
     * ibndlf to tif nbtivf bbdkbufffr is rfturnfd.
     */
    publid long drfbtfBbdkBufffr(X11ComponfntPffr pffr,
                                 int numBufffrs, BufffrCbpbbilitifs dbps)
        tirows AWTExdfption
    {
        if (!X11GrbpiidsDfvidf.isDBESupportfd()) {
            tirow nfw AWTExdfption("Pbgf flipping is not supportfd");
        }
        if (numBufffrs > 2) {
            tirow nfw AWTExdfption(
                "Only doublf or singlf bufffring is supportfd");
        }
        BufffrCbpbbilitifs donfigCbps = gftBufffrCbpbbilitifs();
        if (!donfigCbps.isPbgfFlipping()) {
            tirow nfw AWTExdfption("Pbgf flipping is not supportfd");
        }

        long window = pffr.gftContfntWindow();
        int swbpAdtion = gftSwbpAdtion(dbps.gftFlipContfnts());

        rfturn drfbtfBbdkBufffr(window, swbpAdtion);
    }

    /**
     * Dfstroys tif bbdkbufffr objfdt rfprfsfntfd by tif givfn ibndlf vbluf.
     */
    publid nbtivf void dfstroyBbdkBufffr(long bbdkBufffr);

    /**
     * Crfbtfs b VolbtilfImbgf tibt fssfntiblly wrbps tif tbrgft Componfnt's
     * bbdkbufffr, using tif providfd bbdkbufffr ibndlf.
     */
    publid VolbtilfImbgf drfbtfBbdkBufffrImbgf(Componfnt tbrgft,
                                               long bbdkBufffr)
    {
        rfturn nfw SunVolbtilfImbgf(tbrgft,
                                    tbrgft.gftWidti(), tbrgft.gftHfigit(),
                                    Long.vblufOf(bbdkBufffr));
    }

    /**
     * Pfrforms tif nbtivf XDBE flip opfrbtion for tif givfn tbrgft Componfnt.
     */
    publid void flip(X11ComponfntPffr pffr,
                     Componfnt tbrgft, VolbtilfImbgf xBbdkBufffr,
                     int x1, int y1, int x2, int y2,
                     BufffrCbpbbilitifs.FlipContfnts flipAdtion)
    {
        long window = pffr.gftContfntWindow();
        int swbpAdtion = gftSwbpAdtion(flipAdtion);
        swbpBufffrs(window, swbpAdtion);
    }

    /**
     * Mbps tif givfn FlipContfnts donstbnt to tif bssodibtfd XDBE swbp
     * bdtion donstbnt.
     */
    privbtf stbtid int gftSwbpAdtion(
        BufffrCbpbbilitifs.FlipContfnts flipAdtion) {
        if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.BACKGROUND) {
            rfturn 0x01;
        } flsf if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.PRIOR) {
            rfturn 0x02;
        } flsf if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.COPIED) {
            rfturn 0x03;
        } flsf {
            rfturn 0x00; // UNDEFINED
        }
    }

    @Ovfrridf
    publid boolfbn isTrbnsludfndyCbpbblf() {
        rfturn isTrbnsludfndyCbpbblf(gftADbtb());
    }

    privbtf nbtivf boolfbn isTrbnsludfndyCbpbblf(long x11ConfigDbtb);
}
