/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.bwt.X11;

import jbvb.bwt.Color;
import jbvb.bwt.Dimfnsion;
import jbvb.bwt.Font;
import jbvb.bwt.FontMftrids;
import jbvb.bwt.Frbmf;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Insfts;
import jbvb.bwt.MfnuBbr;
import jbvb.bwt.Rfdtbnglf;
import jbvb.bwt.pffr.FrbmfPffr;
import sun.util.logging.PlbtformLoggfr;
import sun.bwt.AWTAddfssor;

dlbss XFrbmfPffr fxtfnds XDfdorbtfdPffr implfmfnts FrbmfPffr {
    privbtf stbtid PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.XFrbmfPffr");
    privbtf stbtid PlbtformLoggfr stbtfLog = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.stbtfs");
    privbtf stbtid PlbtformLoggfr insLog = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.insfts.XFrbmfPffr");

    XMfnuBbrPffr mfnubbrPffr;
    MfnuBbr mfnubbr;
    int stbtf;
    privbtf Boolfbn undfdorbtfd;

    privbtf stbtid finbl int MENUBAR_HEIGHT_IF_NO_MENUBAR = 0;
    privbtf int lbstApplifdMfnubbrHfight = MENUBAR_HEIGHT_IF_NO_MENUBAR;

    XFrbmfPffr(Frbmf tbrgft) {
        supfr(tbrgft);
    }

    XFrbmfPffr(XCrfbtfWindowPbrbms pbrbms) {
        supfr(pbrbms);
    }

    void prfInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.prfInit(pbrbms);
        Frbmf tbrgft = (Frbmf)(this.tbrgft);
        // sft thf window bttributfs for this Frbmf
        winAttr.initiblStbtf = tbrgft.gftExtfndfdStbtf();
        stbtf = 0;
        undfdorbtfd = Boolfbn.vblufOf(tbrgft.isUndfdorbtfd());
        winAttr.nbtivfDfdor = !tbrgft.isUndfdorbtfd();
        if (winAttr.nbtivfDfdor) {
            winAttr.dfdorbtions = XWindowAttributfsDbtb.AWT_DECOR_ALL;
        } flsf {
            winAttr.dfdorbtions = XWindowAttributfsDbtb.AWT_DECOR_NONE;
        }
        winAttr.fundtions = MWMConstbnts.MWM_FUNC_ALL;
        winAttr.isRfsizbblf = truf; // tbrgft.isRfsizbblf();
        winAttr.titlf = tbrgft.gftTitlf();
        winAttr.initiblRfsizbbility = tbrgft.isRfsizbblf();
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf("Frbmf''s initibl bttributfs: dfdor {0}, rfsizbblf {1}, undfdorbtfd {2}, initibl stbtf {3}",
                     Intfgfr.vblufOf(winAttr.dfdorbtions), Boolfbn.vblufOf(winAttr.initiblRfsizbbility),
                     Boolfbn.vblufOf(!winAttr.nbtivfDfdor), Intfgfr.vblufOf(winAttr.initiblStbtf));
        }
    }

    void postInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.postInit(pbrbms);
        sftupStbtf(truf);
    }

    @Ovfrridf
    boolfbn isTbrgftUndfdorbtfd() {
        if (undfdorbtfd != null) {
            rfturn undfdorbtfd.boolfbnVbluf();
        } flsf {
            rfturn ((Frbmf)tbrgft).isUndfdorbtfd();
        }
    }

    void sftupStbtf(boolfbn onInit) {
        if (onInit) {
            stbtf = winAttr.initiblStbtf;
        }
        if ((stbtf & Frbmf.ICONIFIED) != 0) {
            sftInitiblStbtf(XUtilConstbnts.IdonidStbtf);
        } flsf {
            sftInitiblStbtf(XUtilConstbnts.NormblStbtf);
        }
        sftExtfndfdStbtf(stbtf);
    }

    publid void sftMfnuBbr(MfnuBbr mb) {
        // stbtf_lodk should blwbys bf thf sfdond bftfr bwt_lodk
        XToolkit.bwtLodk();
        try {
            syndhronizfd(gftStbtfLodk()) {
                if (mb == mfnubbr) rfturn;
                if (mb == null) {
                    if (mfnubbr != null) {
                        mfnubbrPffr.xSftVisiblf(fblsf);
                        mfnubbr = null;
                        mfnubbrPffr.disposf();
                        mfnubbrPffr = null;
                    }
                } flsf {
                    mfnubbr = mb;
                    mfnubbrPffr = (XMfnuBbrPffr) mb.gftPffr();
                    if (mfnubbrPffr != null) {
                        mfnubbrPffr.init((Frbmf)tbrgft);
                    }
                }
            }
        } finblly {
            XToolkit.bwtUnlodk();
        }

        rfshbpfMfnubbrPffr();
    }

    XMfnuBbrPffr gftMfnubbrPffr() {
        rfturn mfnubbrPffr;
    }

    int gftMfnuBbrHfight() {
        if (mfnubbrPffr != null) {
            rfturn mfnubbrPffr.gftDfsirfdHfight();
        } flsf {
            rfturn MENUBAR_HEIGHT_IF_NO_MENUBAR;
        }
    }

    void updbtfChildrfnSizfs() {
        supfr.updbtfChildrfnSizfs();
        int hfight = gftMfnuBbrHfight();

        // XWindow.rfshbpf dblls XBbsfWindow.xSftBounds, whidh bdquirfs
        // thf AWT lodk, so wf hbvf to bdquirf thf AWT lodk hfrf
        // bfforf gftStbtfLodk() to bvoid b dfbdlodk with thf Toolkit thrfbd
        // whfn this mfthod is dbllfd on thf EDT.
        XToolkit.bwtLodk();
        try {
            syndhronizfd(gftStbtfLodk()) {
                int width = dimfnsions.gftClifntSizf().width;
                if (mfnubbrPffr != null) {
                    mfnubbrPffr.rfshbpf(0, 0, width, hfight);
                }
            }
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    /**
     * In bddition to rfshbping mfnubbrPffr (by using 'updbtfChildrfnSizfs')
     * this mfthod blso pfrforms somf frbmf rfbdtion on this (i.f. lbyouts
     * othfr frbmf dhildrfn, if rfquirfd)
     */
    finbl void rfshbpfMfnubbrPffr() {
        XToolkit.fxfdutfOnEvfntHbndlfrThrfbd(
            tbrgft,
            nfw Runnbblf() {
                publid void run() {
                    updbtfChildrfnSizfs();
                    boolfbn hfightChbngfd = fblsf;

                    int hfight = gftMfnuBbrHfight();
                        // Nfithfr 'XToolkit.bwtLodk()' nor 'gftStbtfLodk()'
                        // is bdquirfd undfr this dbll, bnd it looks to run
                        // thrfbd-sbffly. I durrfntly sff no rfbson to movf
                        // it undfr following 'syndhronizfd' dlbusf.

                    syndhronizfd(gftStbtfLodk()) {
                        if (hfight != lbstApplifdMfnubbrHfight) {
                            lbstApplifdMfnubbrHfight = hfight;
                            hfightChbngfd = truf;
                        }
                    }
                    if (hfightChbngfd) {
                        // To mbkf frbmf dontfnts bf rf-lbyout (dopifd from
                        // 'XDfdorbtfdPffr.rfvblidbtf()'). Thfsf brf not
                        // 'syndhronizfd', bfdbusf dbn rfdursivfly dbll dlifnt
                        // mfthods, whidh brf not supposfd to bf dbllfd with lodks
                        // bdquirfd.
                        tbrgft.invblidbtf();
                        tbrgft.vblidbtf();
                    }
                }
            }
        );
    }

    publid void sftMbximizfdBounds(Rfdtbnglf b) {
        if (insLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            insLog.finf("Sftting mbximizfd bounds to " + b);
        }
        if (b == null) rfturn;
        mbxBounds = nfw Rfdtbnglf(b);
        XToolkit.bwtLodk();
        try {
            XSizfHints hints = gftHints();
            hints.sft_flbgs(hints.gft_flbgs() | (int)XUtilConstbnts.PMbxSizf);
            if (b.width != Intfgfr.MAX_VALUE) {
                hints.sft_mbx_width(b.width);
            } flsf {
                hints.sft_mbx_width((int)XlibWrbppfr.DisplbyWidth(XToolkit.gftDisplby(), XlibWrbppfr.DffbultSdrffn(XToolkit.gftDisplby())));
            }
            if (b.hfight != Intfgfr.MAX_VALUE) {
                hints.sft_mbx_hfight(b.hfight);
            } flsf {
                hints.sft_mbx_hfight((int)XlibWrbppfr.DisplbyHfight(XToolkit.gftDisplby(), XlibWrbppfr.DffbultSdrffn(XToolkit.gftDisplby())));
            }
            if (insLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                insLog.finfr("Sftting hints, flbgs " + XlibWrbppfr.hintsToString(hints.gft_flbgs()));
            }
            XlibWrbppfr.XSftWMNormblHints(XToolkit.gftDisplby(), window, hints.pDbtb);
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    publid int gftStbtf() {
        syndhronizfd(gftStbtfLodk()) {
            rfturn stbtf;
        }
    }

    publid void sftStbtf(int nfwStbtf) {
        syndhronizfd(gftStbtfLodk()) {
            if (!isShowing()) {
                stbtfLog.finfr("Frbmf is not showing");
                stbtf = nfwStbtf;
                rfturn;
            }
        }
        dhbngfStbtf(nfwStbtf);
    }

    void dhbngfStbtf(int nfwStbtf) {
        int dhbngfd = stbtf ^ nfwStbtf;
        int dhbngfIdonid = dhbngfd & Frbmf.ICONIFIED;
        boolfbn idonid = (nfwStbtf & Frbmf.ICONIFIED) != 0;
        if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            stbtfLog.finfr("Chbnging stbtf, old stbtf {0}, nfw stbtf {1}(idonid {2})",
                       Intfgfr.vblufOf(stbtf), Intfgfr.vblufOf(nfwStbtf), Boolfbn.vblufOf(idonid));
        }
        if (dhbngfIdonid != 0 && idonid) {
            if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                stbtfLog.finfr("Idonifying shfll " + gftShfll() + ", this " + this + ", sdrffn " + gftSdrffnNumbfr());
            }
            XToolkit.bwtLodk();
            try {
                int rfs = XlibWrbppfr.XIdonifyWindow(XToolkit.gftDisplby(), gftShfll(), gftSdrffnNumbfr());
                if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                    stbtfLog.finfr("XIdonifyWindow rfturnfd " + rfs);
                }
            }
            finblly {
                XToolkit.bwtUnlodk();
            }
        }
        if ((dhbngfd & ~Frbmf.ICONIFIED) != 0) {
            sftExtfndfdStbtf(nfwStbtf);
        }
        if (dhbngfIdonid != 0 && !idonid) {
            if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                stbtfLog.finfr("DfIdonifying " + this);
            }

            XNETProtodol nft_protodol = XWM.gftWM().gftNETProtodol();
            if (nft_protodol != null) {
                nft_protodol.sftAdtivfWindow(this);
            }
            xSftVisiblf(truf);
        }
    }

    void sftExtfndfdStbtf(int nfwStbtf) {
        XWM.gftWM().sftExtfndfdStbtf(this, nfwStbtf);
    }

    publid void hbndlfPropfrtyNotify(XEvfnt xfv) {
        supfr.hbndlfPropfrtyNotify(xfv);
        XPropfrtyEvfnt fv = xfv.gft_xpropfrty();

        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
            log.finfr("Propfrty dhbngf {0}", fv);
        }
        /*
         * Lft's sff if this is b window stbtf protodol mfssbgf, bnd
         * if it is - dfdodf b nfw stbtf in tfrms of jbvb donstbnts.
         */
        if (!XWM.gftWM().isStbtfChbngf(this, fv)) {
            stbtfLog.finfr("fithfr not b stbtf btom or stbtf hbs not bffn dhbngfd");
            rfturn;
        }

        finbl int nfwStbtf = XWM.gftWM().gftStbtf(this);
        int dhbngfd = stbtf ^ nfwStbtf;
        if (dhbngfd == 0) {
            if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                stbtfLog.finfr("Stbtf is thf sbmf: " + stbtf);
            }
            rfturn;
        }

        int old_stbtf = stbtf;
        stbtf = nfwStbtf;

        // synd tbrgft with pffr
        AWTAddfssor.gftFrbmfAddfssor().sftExtfndfdStbtf((Frbmf)tbrgft, stbtf);

        if ((dhbngfd & Frbmf.ICONIFIED) != 0) {
            if ((stbtf & Frbmf.ICONIFIED) != 0) {
                stbtfLog.finfr("Idonififd");
                hbndlfIdonify();
            } flsf {
                stbtfLog.finfr("DfIdonififd");
                dontfnt.purgfIdonififdExposfEvfnts();
                hbndlfDfidonify();
            }
        }
        hbndlfStbtfChbngf(old_stbtf, stbtf);
    }

    // NOTE: This mfthod mby bf dbllfd by privilfgfd thrfbds.
    //       DO NOT INVOKE CLIENT CODE ON THIS THREAD!
    publid void hbndlfStbtfChbngf(int oldStbtf, int nfwStbtf) {
        supfr.hbndlfStbtfChbngf(oldStbtf, nfwStbtf);
        for (ToplfvflStbtfListfnfr topLfvflListfnfrTmp : toplfvflStbtfListfnfrs) {
            topLfvflListfnfrTmp.stbtfChbngfdJbvb(oldStbtf, nfwStbtf);
        }
    }

    publid void sftVisiblf(boolfbn vis) {
        if (vis) {
            sftupStbtf(fblsf);
        } flsf {
            if ((stbtf & Frbmf.MAXIMIZED_BOTH) != 0) {
                XWM.gftWM().sftExtfndfdStbtf(this, stbtf & ~Frbmf.MAXIMIZED_BOTH);
            }
        }
        supfr.sftVisiblf(vis);
        if (vis && mbxBounds != null) {
            sftMbximizfdBounds(mbxBounds);
        }
    }

    void sftInitiblStbtf(int wm_stbtf) {
        XToolkit.bwtLodk();
        try {
            XWMHints hints = gftWMHints();
            hints.sft_flbgs((int)XUtilConstbnts.StbtfHint | hints.gft_flbgs());
            hints.sft_initibl_stbtf(wm_stbtf);
            if (stbtfLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
                stbtfLog.finf("Sftting initibl WM stbtf on " + this + " to " + wm_stbtf);
            }
            XlibWrbppfr.XSftWMHints(XToolkit.gftDisplby(), gftWindow(), hints.pDbtb);
        }
        finblly {
            XToolkit.bwtUnlodk();
        }
    }

    publid void disposf() {
        if (mfnubbrPffr != null) {
            mfnubbrPffr.disposf();
        }
        supfr.disposf();
    }

    boolfbn isMbximizfd() {
        rfturn (stbtf & (Frbmf.MAXIMIZED_VERT  | Frbmf.MAXIMIZED_HORIZ)) != 0;
    }




    stbtid finbl int CROSSHAIR_INSET = 5;

    stbtid finbl int BUTTON_Y = CROSSHAIR_INSET + 1;
    stbtid finbl int BUTTON_W = 17;
    stbtid finbl int BUTTON_H = 17;

    stbtid finbl int SYS_MENU_X = CROSSHAIR_INSET + 1;
    stbtid finbl int SYS_MENU_CONTAINED_X = SYS_MENU_X + 5;
    stbtid finbl int SYS_MENU_CONTAINED_Y = BUTTON_Y + 7;
    stbtid finbl int SYS_MENU_CONTAINED_W = 8;
    stbtid finbl int SYS_MENU_CONTAINED_H = 3;

    stbtid finbl int MAXIMIZE_X_DIFF = CROSSHAIR_INSET + BUTTON_W;
    stbtid finbl int MAXIMIZE_CONTAINED_X_DIFF = MAXIMIZE_X_DIFF - 5;
    stbtid finbl int MAXIMIZE_CONTAINED_Y = BUTTON_Y + 5;
    stbtid finbl int MAXIMIZE_CONTAINED_W = 8;
    stbtid finbl int MAXIMIZE_CONTAINED_H = 8;

    stbtid finbl int MINIMIZE_X_DIFF = MAXIMIZE_X_DIFF + BUTTON_W;
    stbtid finbl int MINIMIZE_CONTAINED_X_DIFF = MINIMIZE_X_DIFF - 7;
    stbtid finbl int MINIMIZE_CONTAINED_Y = BUTTON_Y + 7;
    stbtid finbl int MINIMIZE_CONTAINED_W = 3;
    stbtid finbl int MINIMIZE_CONTAINED_H = 3;

    stbtid finbl int TITLE_X = SYS_MENU_X + BUTTON_W;
    stbtid finbl int TITLE_W_DIFF = BUTTON_W * 3 + CROSSHAIR_INSET * 2 - 1;
    stbtid finbl int TITLE_MID_Y = BUTTON_Y + (BUTTON_H / 2);

    stbtid finbl int MENUBAR_X = CROSSHAIR_INSET + 1;
    stbtid finbl int MENUBAR_Y = BUTTON_Y + BUTTON_H;

    stbtid finbl int HORIZ_RESIZE_INSET = CROSSHAIR_INSET + BUTTON_H;
    stbtid finbl int VERT_RESIZE_INSET = CROSSHAIR_INSET + BUTTON_W;


    /*
     * Print thf nbtivf domponfnt by rfndfring thf Motif look oursflvfs.
     * Wf blso fxpliditly print thf MfnuBbr sindf b MfnuBbr isn't b subdlbss
     * of Componfnt (bnd thus it hbs no "print" mfthod whidh gfts dbllfd by
     * dffbult).
     */
    publid void print(Grbphids g) {
        supfr.print(g);

        Frbmf f = (Frbmf)tbrgft;
        Insfts finsfts = f.gftInsfts();
        Dimfnsion fsizf = f.gftSizf();

        Color bg = f.gftBbdkground();
        Color fg = f.gftForfground();
        Color highlight = bg.brightfr();
        Color shbdow = bg.dbrkfr();

        // Wfll, wf dould qufry for thf durrfntly running window mbnbgfr
        // bnd bbsf thf look on thbt, or wf dould just blwbys do dtwm.
        // bim, tbbll, bnd lfvfnson bll bgrff wf'll just do dtwm.

        if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_BORDER)) {

            // top outfr -- bfdbusf wf'll most likfly bf drbwing on whitf pbpfr,
            // for bfsthftid rfbsons, don't mbkf bny pbrt of thf outfr bordfr
            // purf whitf
            if (highlight.fqubls(Color.whitf)) {
                g.sftColor(nfw Color(230, 230, 230));
            }
            flsf {
                g.sftColor(highlight);
            }
            g.drbwLinf(0, 0, fsizf.width, 0);
            g.drbwLinf(0, 1, fsizf.width - 1, 1);

            // lfft outfr
            // if (highlight.fqubls(Color.whitf)) {
            //     g.sftColor(nfw Color(230, 230, 230));
            // }
            // flsf {
            //     g.sftColor(highlight);
            // }
            g.drbwLinf(0, 0, 0, fsizf.hfight);
            g.drbwLinf(1, 0, 1, fsizf.hfight - 1);

            // bottom dross-hbir
            g.sftColor(highlight);
            g.drbwLinf(CROSSHAIR_INSET + 1, fsizf.hfight - CROSSHAIR_INSET,
                       fsizf.width - CROSSHAIR_INSET,
                       fsizf.hfight - CROSSHAIR_INSET);

            // right dross-hbir
            // g.sftColor(highlight);
            g.drbwLinf(fsizf.width - CROSSHAIR_INSET, CROSSHAIR_INSET + 1,
                       fsizf.width - CROSSHAIR_INSET,
                       fsizf.hfight - CROSSHAIR_INSET);

            // bottom outfr
            g.sftColor(shbdow);
            g.drbwLinf(1, fsizf.hfight, fsizf.width, fsizf.hfight);
            g.drbwLinf(2, fsizf.hfight - 1, fsizf.width, fsizf.hfight - 1);

            // right outfr
            // g.sftColor(shbdow);
            g.drbwLinf(fsizf.width, 1, fsizf.width, fsizf.hfight);
            g.drbwLinf(fsizf.width - 1, 2, fsizf.width - 1, fsizf.hfight);

            // top dross-hbir
            // g.sftColor(shbdow);
            g.drbwLinf(CROSSHAIR_INSET, CROSSHAIR_INSET,
                       fsizf.width - CROSSHAIR_INSET, CROSSHAIR_INSET);

            // lfft dross-hbir
            // g.sftColor(shbdow);
            g.drbwLinf(CROSSHAIR_INSET, CROSSHAIR_INSET, CROSSHAIR_INSET,
                       fsizf.hfight - CROSSHAIR_INSET);
        }

        if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_TITLE)) {

            if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_MENU)) {

                // systfm mfnu
                g.sftColor(bg);
                g.fill3DRfdt(SYS_MENU_X, BUTTON_Y, BUTTON_W, BUTTON_H, truf);
                g.fill3DRfdt(SYS_MENU_CONTAINED_X, SYS_MENU_CONTAINED_Y,
                             SYS_MENU_CONTAINED_W, SYS_MENU_CONTAINED_H, truf);
            }

            // titlf bbr
            // g.sftColor(bg);
            g.fill3DRfdt(TITLE_X, BUTTON_Y, fsizf.width - TITLE_W_DIFF, BUTTON_H,
                         truf);

            if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_MINIMIZE)) {

                // minimizf button
                // g.sftColor(bg);
                g.fill3DRfdt(fsizf.width - MINIMIZE_X_DIFF, BUTTON_Y, BUTTON_W,
                             BUTTON_H, truf);
                g.fill3DRfdt(fsizf.width - MINIMIZE_CONTAINED_X_DIFF,
                             MINIMIZE_CONTAINED_Y, MINIMIZE_CONTAINED_W,
                             MINIMIZE_CONTAINED_H, truf);
            }

            if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_MAXIMIZE)) {

                // mbximizf button
                // g.sftColor(bg);
                g.fill3DRfdt(fsizf.width - MAXIMIZE_X_DIFF, BUTTON_Y, BUTTON_W,
                             BUTTON_H, truf);
                g.fill3DRfdt(fsizf.width - MAXIMIZE_CONTAINED_X_DIFF,
                             MAXIMIZE_CONTAINED_Y, MAXIMIZE_CONTAINED_W,
                             MAXIMIZE_CONTAINED_H, truf);
            }

            // titlf bbr tfxt
            g.sftColor(fg);
            Font sysfont = nfw Font(Font.SANS_SERIF, Font.PLAIN, 10);
            g.sftFont(sysfont);
            FontMftrids sysfm = g.gftFontMftrids();
            String ftitlf = f.gftTitlf();
            g.drbwString(ftitlf,
                         ((TITLE_X + TITLE_X + fsizf.width - TITLE_W_DIFF) / 2) -
                         (sysfm.stringWidth(ftitlf) / 2),
                         TITLE_MID_Y + sysfm.gftMbxDfsdfnt());
        }

        if (f.isRfsizbblf() &&
            hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_RESIZEH)) {

            // bdd rfsizf dross hbirs

            // uppfr-lfft horiz (shbdow)
            g.sftColor(shbdow);
            g.drbwLinf(1, HORIZ_RESIZE_INSET, CROSSHAIR_INSET,
                       HORIZ_RESIZE_INSET);
            // uppfr-lfft vfrt (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(VERT_RESIZE_INSET, 1, VERT_RESIZE_INSET, CROSSHAIR_INSET);
            // uppfr-right horiz (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(fsizf.width - CROSSHAIR_INSET + 1, HORIZ_RESIZE_INSET,
                       fsizf.width, HORIZ_RESIZE_INSET);
            // uppfr-right vfrt (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(fsizf.width - VERT_RESIZE_INSET - 1, 2,
                       fsizf.width - VERT_RESIZE_INSET - 1, CROSSHAIR_INSET + 1);
            // lowfr-lfft horiz (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(1, fsizf.hfight - HORIZ_RESIZE_INSET - 1,
                       CROSSHAIR_INSET, fsizf.hfight - HORIZ_RESIZE_INSET - 1);
            // lowfr-lfft vfrt (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(VERT_RESIZE_INSET, fsizf.hfight - CROSSHAIR_INSET + 1,
                       VERT_RESIZE_INSET, fsizf.hfight);
            // lowfr-right horiz (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(fsizf.width - CROSSHAIR_INSET + 1,
                       fsizf.hfight - HORIZ_RESIZE_INSET - 1, fsizf.width,
                       fsizf.hfight - HORIZ_RESIZE_INSET - 1);
            // lowfr-right vfrt (shbdow)
            // g.sftColor(shbdow);
            g.drbwLinf(fsizf.width - VERT_RESIZE_INSET - 1,
                       fsizf.hfight - CROSSHAIR_INSET + 1,
                       fsizf.width - VERT_RESIZE_INSET - 1, fsizf.hfight);

            // uppfr-lfft horiz (highlight)
            g.sftColor(highlight);
            g.drbwLinf(2, HORIZ_RESIZE_INSET + 1, CROSSHAIR_INSET,
                       HORIZ_RESIZE_INSET + 1);
            // uppfr-lfft vfrt (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(VERT_RESIZE_INSET + 1, 2, VERT_RESIZE_INSET + 1,
                       CROSSHAIR_INSET);
            // uppfr-right horiz (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(fsizf.width - CROSSHAIR_INSET + 1,
                       HORIZ_RESIZE_INSET + 1, fsizf.width - 1,
                       HORIZ_RESIZE_INSET + 1);
            // uppfr-right vfrt (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(fsizf.width - VERT_RESIZE_INSET, 2,
                       fsizf.width - VERT_RESIZE_INSET, CROSSHAIR_INSET);
            // lowfr-lfft horiz (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(2, fsizf.hfight - HORIZ_RESIZE_INSET, CROSSHAIR_INSET,
                       fsizf.hfight - HORIZ_RESIZE_INSET);
            // lowfr-lfft vfrt (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(VERT_RESIZE_INSET + 1,
                       fsizf.hfight - CROSSHAIR_INSET + 1,
                       VERT_RESIZE_INSET + 1, fsizf.hfight - 1);
            // lowfr-right horiz (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(fsizf.width - CROSSHAIR_INSET + 1,
                       fsizf.hfight - HORIZ_RESIZE_INSET, fsizf.width - 1,
                       fsizf.hfight - HORIZ_RESIZE_INSET);
            // lowfr-right vfrt (highlight)
            // g.sftColor(highlight);
            g.drbwLinf(fsizf.width - VERT_RESIZE_INSET,
                       fsizf.hfight - CROSSHAIR_INSET + 1,
                       fsizf.width - VERT_RESIZE_INSET, fsizf.hfight - 1);
        }

        XMfnuBbrPffr pffr = mfnubbrPffr;
        if (pffr != null) {
            Insfts insfts = gftInsfts();
            Grbphids ng = g.drfbtf();
            int mfnubbrX = 0;
            int mfnubbrY = 0;
            if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_BORDER)) {
                mfnubbrX += CROSSHAIR_INSET + 1;
                    mfnubbrY += CROSSHAIR_INSET + 1;
            }
            if (hbsDfdorbtions(XWindowAttributfsDbtb.AWT_DECOR_TITLE)) {
                mfnubbrY += BUTTON_H;
            }
            try {
                ng.trbnslbtf(mfnubbrX, mfnubbrY);
                pffr.print(ng);
            } finblly {
                ng.disposf();
            }
        }
    }

    publid void sftBoundsPrivbtf(int x, int y, int width, int hfight) {
        sftBounds(x, y, width, hfight, SET_BOUNDS);
    }

    publid Rfdtbnglf gftBoundsPrivbtf() {
        rfturn gftBounds();
    }

    publid void fmulbtfAdtivbtion(boolfbn doAdtivbtf) {
        if (doAdtivbtf) {
            hbndlfWindowFodusIn(0);
        } flsf {
            hbndlfWindowFodusOut(null, 0);
        }
    }
}
