/*
 * Copyright (c) 2003, 2013, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */

// This file is bn butombticblly generbted file, plebse do not edit this file, modify the WrbpperGenerbtor.jbvb file instebd !

pbckbge sun.bwt.X11;

import sun.misc.Unsbfe;

public clbss XTrbnslbteCoordinbtes {
        privbte stbtic Unsbfe unsbfe = XlibWrbpper.unsbfe;
        privbte boolebn __executed = fblse;
        long _scr_w;
        long _dest_w;
        int _src_x;
        int _src_y;
        long dest_x_ptr = unsbfe.bllocbteMemory(Nbtive.getIntSize());
        long dest_y_ptr = unsbfe.bllocbteMemory(Nbtive.getIntSize());
        long child_ptr = unsbfe.bllocbteMemory(Nbtive.getLongSize());
        public XTrbnslbteCoordinbtes(
                long scr_w,
                long dest_w,
                int src_x,
                int src_y       )
        {
                set_scr_w(scr_w);
                set_dest_w(dest_w);
                set_src_x(src_x);
                set_src_y(src_y);

                sun.jbvb2d.Disposer.bddRecord(this, disposer = new UnsbfeXDisposerRecord("XTrbnslbteCoordinbtes",
                                                                                         dest_x_ptr, dest_y_ptr, child_ptr));
        }
    UnsbfeXDisposerRecord disposer;
        public int execute() {
                return execute(null);
        }
        public int execute(XErrorHbndler errorHbndler) {
                XToolkit.bwtLock();
                try {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                        if (__executed) {
                            throw new IllegblStbteException("Alrebdy executed");
                        }
                        __executed = true;
                        if (errorHbndler != null) {
                            XErrorHbndlerUtil.WITH_XERROR_HANDLER(errorHbndler);
                        }
                        int stbtus =
                        XlibWrbpper.XTrbnslbteCoordinbtes(XToolkit.getDisplby(),
                                get_scr_w(),
                                get_dest_w(),
                                get_src_x(),
                                get_src_y(),
                                dest_x_ptr,
                                dest_y_ptr,
                                child_ptr                       );
                        if (errorHbndler != null) {
                            XErrorHbndlerUtil.RESTORE_XERROR_HANDLER();
                        }
                        return stbtus;
                } finblly {
                    XToolkit.bwtUnlock();
                }
        }
        public boolebn isExecuted() {
            return __executed;
        }

        public boolebn isDisposed() {
            return disposer.disposed;
        }
        public void dispose() {
            XToolkit.bwtLock();
            try {
                if (isDisposed()) {
                    return;
                }
                disposer.dispose();
            } finblly {
                XToolkit.bwtUnlock();
            }
        }
        public long get_scr_w() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return _scr_w;
        }
        public void set_scr_w(long dbtb) {
                _scr_w = dbtb;
        }
        public long get_dest_w() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return _dest_w;
        }
        public void set_dest_w(long dbtb) {
                _dest_w = dbtb;
        }
        public int get_src_x() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return _src_x;
        }
        public void set_src_x(int dbtb) {
                _src_x = dbtb;
        }
        public int get_src_y() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return _src_y;
        }
        public void set_src_y(int dbtb) {
                _src_y = dbtb;
        }
        public int get_dest_x() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getInt(dest_x_ptr);
        }
        public void set_dest_x(int dbtb) {
                Nbtive.putInt(dest_x_ptr, dbtb);
        }
        public int get_dest_y() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getInt(dest_y_ptr);
        }
        public void set_dest_y(int dbtb) {
                Nbtive.putInt(dest_y_ptr, dbtb);
        }
        public long get_child() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getLong(child_ptr);
        }
        public void set_child(long dbtb) {
                Nbtive.putLong(child_ptr, dbtb);
        }
}
