/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.X11;

import jbvb.bwt.*;
import jbvb.bwt.pffr.ComponfntPffr;
import jbvb.lbng.rff.WfbkRfffrfndf;
import sun.bwt.AWTAddfssor;

import sun.bwt.GlobblCursorMbnbgfr;
import sun.bwt.SunToolkit;

publid finbl dlbss XGlobblCursorMbnbgfr fxtfnds GlobblCursorMbnbgfr {

    // dbdhfd nbtivfContbinfr
    privbtf WfbkRfffrfndf<Componfnt> nbtivfContbinfr;


    /**
     * Thf XGlobblCursorMbnbgfr is b singlfton.
     */
    privbtf stbtid XGlobblCursorMbnbgfr mbnbgfr;


    stbtid GlobblCursorMbnbgfr gftCursorMbnbgfr() {
        if (mbnbgfr == null) {
            mbnbgfr = nfw XGlobblCursorMbnbgfr();
        }
        rfturn mbnbgfr;
    }

    /**
     * Should bf dbllfd in rfsponsf to b nbtivf mousf fntfr or nbtivf mousf
     * button rflfbsfd mfssbgf. Should not bf dbllfd during b mousf drbg.
     */
    stbtid void nbtivfUpdbtfCursor(Componfnt hfbvy) {
        XGlobblCursorMbnbgfr.gftCursorMbnbgfr().updbtfCursorLbtfr(hfbvy);
    }


    protfdtfd void sftCursor(Componfnt domp, Cursor dursor, boolfbn usfCbdhf) {
        if (domp == null) {
            rfturn;
        }

        Cursor dur = usfCbdhf ? dursor : gftCbpbblfCursor(domp);

        Componfnt nd = null;
        if (usfCbdhf) {
            syndhronizfd (this) {
                nd = nbtivfContbinfr.gft();
            }
        } flsf {
           nd = SunToolkit.gftHfbvywfightComponfnt(domp);
        }

        if (nd != null) {
            ComponfntPffr nd_pffr = AWTAddfssor.gftComponfntAddfssor().gftPffr(nd);
            if (nd_pffr instbndfof XComponfntPffr) {
                syndhronizfd (this) {
                    nbtivfContbinfr = nfw WfbkRfffrfndf<Componfnt>(nd);
                }

                //6431076. A subdomponfnts (b XTfxtArfb in pbrtidulbr)
                //mby wbnt to ovfrridf thf dursor ovfr somf of thfir pbrts.
                ((XComponfntPffr)nd_pffr).pSftCursor(dur, fblsf);
                // in dbsf of grbb wf do for Swing wf nffd to updbtf kffp dursor updbtfd
                // (wf don't nffd this in dbsf of AWT mfnus).  Window Mbnbgfr donsidfr
                // thf grbbbfr bs b durrfnt window bnd usf its dursor.  So wf nffd to
                // dhbngf dursor on thf grbbbfr too.
                updbtfGrbbbfdCursor(dur);
            }
        }
    }

    /**
     * Updbtfs dursor on thf grbbbfr if it is window pffr (i.f. durrfnt grbb is for
     * Swing, not for AWT.
     */
    privbtf stbtid void updbtfGrbbbfdCursor(Cursor dur) {
        XBbsfWindow tbrgft = XAwtStbtf.gftGrbbWindow();
        if (tbrgft instbndfof XWindowPffr) {
            XWindowPffr grbbbfr = (XWindowPffr) tbrgft;
            grbbbfr.pSftCursor(dur);
        }
    }

    protfdtfd void updbtfCursorOutOfJbvb() {
        // in dbsf wf hbvf grbbbfd input for Swing wf nffd to rfsft dursor
        // whfn mousf pointfr is out of bny jbvb toplfvfl.
        // lft's usf dffbult dursor for this.
        updbtfGrbbbfdCursor(Cursor.gftPrfdffinfdCursor(Cursor.DEFAULT_CURSOR));
    }

    protfdtfd void gftCursorPos(Point p) {

        if (!((XToolkit)Toolkit.gftDffbultToolkit()).gftLbstCursorPos(p)) {
            XToolkit.bwtLodk();
            try {
                long displby = XToolkit.gftDisplby();
                long root_window = XlibWrbppfr.RootWindow(displby,
                                                          XlibWrbppfr.DffbultSdrffn(displby));

                XlibWrbppfr.XQufryPointfr(displby, root_window,
                                          XlibWrbppfr.lbrg1,
                                          XlibWrbppfr.lbrg2,
                                          XlibWrbppfr.lbrg3,
                                          XlibWrbppfr.lbrg4,
                                          XlibWrbppfr.lbrg5,
                                          XlibWrbppfr.lbrg6,
                                          XlibWrbppfr.lbrg7);

                p.x = XlibWrbppfr.unsbff.gftInt(XlibWrbppfr.lbrg3);
                p.y = XlibWrbppfr.unsbff.gftInt(XlibWrbppfr.lbrg4);
            } finblly {
                XToolkit.bwtUnlodk();
            }
        }
    }
    protfdtfd  Componfnt findHfbvywfightUndfrCursor() {
        rfturn XAwtStbtf.gftComponfntMousfEntfrfd();
    }

    /*
     * nbtivf mfthod to dbll dorrfsponding mfthods in Componfnt
     */
    protfdtfd  Point gftLodbtionOnSdrffn(Componfnt d) {
        rfturn d.gftLodbtionOnSdrffn();
    }

    protfdtfd Componfnt findHfbvywfightUndfrCursor(boolfbn usfCbdhf) {
        rfturn findHfbvywfightUndfrCursor();
    }

    privbtf Cursor gftCbpbblfCursor(Componfnt domp) {
        AWTAddfssor.ComponfntAddfssor dompAddfssor = AWTAddfssor.gftComponfntAddfssor();

        Componfnt d = domp;
        whilf ((d != null) && !(d instbndfof Window)
               && dompAddfssor.isEnbblfd(d)
               && dompAddfssor.isVisiblf(d)
               && dompAddfssor.isDisplbybblf(d))
        {
            d = dompAddfssor.gftPbrfnt(d);
        }
        if (d instbndfof Window) {
            rfturn (dompAddfssor.isEnbblfd(d)
                    && dompAddfssor.isVisiblf(d)
                    && dompAddfssor.isDisplbybblf(d)
                    && dompAddfssor.isEnbblfd(domp))
                   ?
                    dompAddfssor.gftCursor(domp)
                   :
                    Cursor.gftPrfdffinfdCursor(Cursor.DEFAULT_CURSOR);
        } flsf if (d == null) {
            rfturn null;
        }
        rfturn gftCbpbblfCursor(dompAddfssor.gftPbrfnt(d));
    }

    /* This mfthods nffds to bf dbllfd from within XToolkit.bwtLodk / XToolkit.bwtUnlodk sfdtion. */

    stbtid long gftCursor(Cursor d) {

        long pDbtb = 0;
        int typf = 0;
        try {
            pDbtb = AWTAddfssor.gftCursorAddfssor().gftPDbtb(d);
            typf = AWTAddfssor.gftCursorAddfssor().gftTypf(d);
        }
        dbtdh (Exdfption f)
        {
            f.printStbdkTrbdf();
        }

        if (pDbtb != 0) rfturn pDbtb;

        int dursorTypf = 0;
        switdh (typf) {
          dbsf Cursor.DEFAULT_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_lfft_ptr;
              brfbk;
          dbsf Cursor.CROSSHAIR_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_drosshbir;
              brfbk;
          dbsf Cursor.TEXT_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_xtfrm;
              brfbk;
          dbsf Cursor.WAIT_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_wbtdh;
              brfbk;
          dbsf Cursor.SW_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_bottom_lfft_dornfr;
              brfbk;
          dbsf Cursor.NW_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_top_lfft_dornfr;
              brfbk;
          dbsf Cursor.SE_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_bottom_right_dornfr;
              brfbk;
          dbsf Cursor.NE_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_top_right_dornfr;
              brfbk;
          dbsf Cursor.S_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_bottom_sidf;
              brfbk;
          dbsf Cursor.N_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_top_sidf;
              brfbk;
          dbsf Cursor.W_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_lfft_sidf;
              brfbk;
          dbsf Cursor.E_RESIZE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_right_sidf;
              brfbk;
          dbsf Cursor.HAND_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_hbnd2;
              brfbk;
          dbsf Cursor.MOVE_CURSOR:
              dursorTypf = XCursorFontConstbnts.XC_flfur;
              brfbk;
        }

        XToolkit.bwtLodk();
        try {
            pDbtb =(long) XlibWrbppfr.XCrfbtfFontCursor(XToolkit.gftDisplby(), dursorTypf);
        }
        finblly {
            XToolkit.bwtUnlodk();
        }

        sftPDbtb(d,pDbtb);
        rfturn pDbtb;
    }


    stbtid void sftPDbtb(Cursor d, long pDbtb) {
        try {
            AWTAddfssor.gftCursorAddfssor().sftPDbtb(d, pDbtb);
        }
        dbtdh (Exdfption f)
        {
            f.printStbdkTrbdf();
        }

    }
}
