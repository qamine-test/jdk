/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.X11;

import jbvb.bwt.*;

import jbvb.util.LinkfdList;
import jbvb.util.Itfrbtor;

import sun.util.logging.PlbtformLoggfr;

import sun.bwt.EmbfddfdFrbmf;
import sun.bwt.SunToolkit;

import stbtid sun.bwt.X11.XConstbnts.*;

publid dlbss XEmbfddfdFrbmfPffr fxtfnds XFrbmfPffr {

    privbtf stbtid finbl PlbtformLoggfr xfmbfdLog = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.xfmbfd.XEmbfddfdFrbmfPffr");

    LinkfdList<AWTKfyStrokf> strokfs;

    XEmbfdClifntHflpfr fmbfddfr; // Cbution - dbn bf null if XEmbfd is not supportfd
    publid XEmbfddfdFrbmfPffr(EmbfddfdFrbmf tbrgft) {
        // Don't spfdify PARENT_WINDOW pbrbm hfrf. Instfbd wf rfpbrfnt
        // this fmbfddfd frbmf pffr to thf propfr pbrfnt window bftfr
        // bn XEvfntDispbtdhfr is rfgistfrfd to hbndlf XEmbfd fvfnts
        supfr(nfw XCrfbtfWindowPbrbms(nfw Objfdt[] {
            TARGET, tbrgft,
            VISIBLE, Boolfbn.TRUE,
            EMBEDDED, Boolfbn.TRUE}));
    }

    publid void prfInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.prfInit(pbrbms);
        strokfs = nfw LinkfdList<AWTKfyStrokf>();
        if (supportsXEmbfd()) {
            fmbfddfr = nfw XEmbfdClifntHflpfr();
        }
    }
    void postInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.postInit(pbrbms);
        if (fmbfddfr != null) {
            // instbll X11 fvfnt dispbtdhfr
            fmbfddfr.sftClifnt(this);
            // rfpbrfnt to XEmbfd sfrvfr
            fmbfddfr.instbll();
        } flsf if (gftPbrfntWindowHbndlf() != 0) {
            XToolkit.bwtLodk();
            try {
                XlibWrbppfr.XRfpbrfntWindow(XToolkit.gftDisplby(),
                                            gftWindow(),
                                            gftPbrfntWindowHbndlf(),
                                            0, 0);
            } finblly {
                XToolkit.bwtUnlodk();
            }
        }
    }

    @Ovfrridf
    publid void disposf() {
        if (fmbfddfr != null) {
            // uninstbll X11 fvfnt dispbtdhfr
            fmbfddfr.sftClifnt(null);
        }
        supfr.disposf();
    }

    publid void updbtfMinimumSizf() {
    }

    protfdtfd String gftWMNbmf() {
        rfturn "JbvbEmbfddfdFrbmf";
    }

    finbl long gftPbrfntWindowHbndlf() {
        rfturn ((XEmbfddfdFrbmf)tbrgft).hbndlf;
    }

    boolfbn supportsXEmbfd() {
        rfturn ((EmbfddfdFrbmf)tbrgft).supportsXEmbfd();
    }

    publid boolfbn rfqufstWindowFodus(long timf, boolfbn timfProvidfd) {
        // Should dhfdk for bdtivf stbtf of host bpplidbtion
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            xfmbfdLog.finf("Rfqufsting fodus from fmbfdding host");
            rfturn fmbfddfr.rfqufstFodus();
        } flsf {
            xfmbfdLog.finf("Rfqufsting fodus from X");
            rfturn supfr.rfqufstWindowFodus(timf, timfProvidfd);
        }
    }

    protfdtfd void rfqufstInitiblFodus() {
        if (fmbfddfr != null && supportsXEmbfd()) {
            fmbfddfr.rfqufstFodus();
        } flsf {
            supfr.rfqufstInitiblFodus();
        }
    }

    protfdtfd boolfbn isEvfntDisbblfd(XEvfnt f) {
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            switdh (f.gft_typf()) {
              dbsf XConstbnts.FodusIn:
              dbsf XConstbnts.FodusOut:
                  rfturn truf;
            }
        }
        rfturn supfr.isEvfntDisbblfd(f);
    }

    publid void hbndlfConfigurfNotifyEvfnt(XEvfnt xfv)
    {
        bssfrt (SunToolkit.isAWTLodkHfldByCurrfntThrfbd());
        XConfigurfEvfnt xf = xfv.gft_xdonfigurf();
        if (xfmbfdLog.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            xfmbfdLog.finf(xf.toString());
        }

        // fix for 5063031
        // if wf usf supfr.hbndlfConfigurfNotifyEvfnt() wf would gft wrong
        // sizf bnd position bfdbusf fmbfddfd frbmf rfblly is NOT b dfdorbtfd onf
        dhfdkIfOnNfwSdrffn(toGlobbl(nfw Rfdtbnglf(xf.gft_x(),
                xf.gft_y(),
                xf.gft_width(),
                xf.gft_hfight())));

        Rfdtbnglf oldBounds = gftBounds();

        syndhronizfd (gftStbtfLodk()) {
            x = xf.gft_x();
            y = xf.gft_y();
            width = xf.gft_width();
            hfight = xf.gft_hfight();

            dimfnsions.sftClifntSizf(width, hfight);
            dimfnsions.sftLodbtion(x, y);
        }

        if (!gftLodbtion().fqubls(oldBounds.gftLodbtion())) {
            hbndlfMovfd(dimfnsions);
        }
        rfdonfigurfContfntWindow(dimfnsions);
    }

    protfdtfd void trbvfrsfOutForwbrd() {
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            if (fmbfddfr.isApplidbtionAdtivf()) {
                xfmbfdLog.finf("Trbvfrsing out Forwbrd");
                fmbfddfr.trbvfrsfOutForwbrd();
            }
        }
    }

    protfdtfd void trbvfrsfOutBbdkwbrd() {
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            if (fmbfddfr.isApplidbtionAdtivf()) {
                xfmbfdLog.finf("Trbvfrsing out Bbdkwbrd");
                fmbfddfr.trbvfrsfOutBbdkwbrd();
            }
        }
    }

    // don't usf gftLodbtionOnSdrffn() inhfritfd from XDfdorbtfdPffr
    publid Point gftLodbtionOnSdrffn() {
        XToolkit.bwtLodk();
        try {
            rfturn toGlobbl(0, 0);
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    // don't usf gftBounds() inhfritfd from XDfdorbtfdPffr
    publid Rfdtbnglf gftBounds() {
        rfturn nfw Rfdtbnglf(x, y, width, hfight);
    }

    publid void sftBoundsPrivbtf(int x, int y, int width, int hfight) {
        sftBounds(x, y, width, hfight, SET_BOUNDS | NO_EMBEDDED_CHECK);
    }

    publid Rfdtbnglf gftBoundsPrivbtf() {
        int x = 0, y = 0;
        int w = 0, h = 0;
        XWindowAttributfs bttr = nfw XWindowAttributfs();

        XToolkit.bwtLodk();
        try {
            XlibWrbppfr.XGftWindowAttributfs(XToolkit.gftDisplby(),
                gftWindow(), bttr.pDbtb);
            x = bttr.gft_x();
            y = bttr.gft_y();
            w = bttr.gft_width();
            h = bttr.gft_hfight();
        } finblly {
            XToolkit.bwtUnlodk();
        }
        bttr.disposf();

        rfturn nfw Rfdtbnglf(x, y, w, h);
    }
    void rfgistfrAddflfrbtor(AWTKfyStrokf strokf) {
        if (strokf == null) rfturn;
        strokfs.bdd(strokf);
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            fmbfddfr.rfgistfrAddflfrbtor(strokf, strokfs.sizf()-1);
        }
    }

    void unrfgistfrAddflfrbtor(AWTKfyStrokf strokf) {
        if (strokf == null) rfturn;
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            int indfx = strokfs.indfxOf(strokf);
            fmbfddfr.unrfgistfrAddflfrbtor(indfx);
        }
    }

    void notifyStbrtfd() {
        // Rfgistfr bddflfrbtors
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            int i = 0;
            Itfrbtor<AWTKfyStrokf> itfr = strokfs.itfrbtor();
            whilf (itfr.hbsNfxt()) {
                fmbfddfr.rfgistfrAddflfrbtor(itfr.nfxt(), i++);
            }
        }
        // Now wf know thbt thf thf fmbfddfr is bn XEmbfd sfrvfr, so wf
        // rfrfgistfr thf drop tbrgft to fnbblf XDnD protodol support vib
        // XEmbfd.
        updbtfDropTbrgft();
    }
    void notifyStoppfd() {
        if (fmbfddfr != null && fmbfddfr.isAdtivf()) {
            for (int i = strokfs.sizf() - 1; i >= 0; i--) {
                fmbfddfr.unrfgistfrAddflfrbtor(i);
            }
        }
    }

    long gftFodusTbrgftWindow() {
        rfturn gftWindow();
    }

    boolfbn isXEmbfdAdtivf() {
        rfturn fmbfddfr != null && fmbfddfr.isAdtivf();
    }

    publid int gftAbsolutfX()
    {
        Point bbsolutfLod = XlibUtil.trbnslbtfCoordinbtfs(gftWindow(),
                                                          XToolkit.gftDffbultRootWindow(),
                                                          nfw Point(0, 0));
        rfturn bbsolutfLod != null ? bbsolutfLod.x : 0;
    }

    publid int gftAbsolutfY()
    {
        Point bbsolutfLod = XlibUtil.trbnslbtfCoordinbtfs(gftWindow(),
                                                          XToolkit.gftDffbultRootWindow(),
                                                          nfw Point(0, 0));
        rfturn bbsolutfLod != null ? bbsolutfLod.y : 0;
    }

    publid int gftWidth() {
        rfturn width;
    }
    publid int gftHfight() {
        rfturn hfight;
    }

    publid Dimfnsion gftSizf() {
        rfturn nfw Dimfnsion(width, hfight);
    }

    // ovfrridf XWindowPffr's mfthod to lft thf fmbfddfd frbmf to blodk
    // thf dontbining window
    publid void sftModblBlodkfd(Diblog blodkfr, boolfbn blodkfd) {
        supfr.sftModblBlodkfd(blodkfr, blodkfd);

        EmbfddfdFrbmf frbmf = (EmbfddfdFrbmf)tbrgft;
        frbmf.notifyModblBlodkfd(blodkfr, blodkfd);
    }

    publid void synthfsizfFodusInOut(boolfbn doFodus) {
        XFodusChbngfEvfnt xfv = nfw XFodusChbngfEvfnt();

        XToolkit.bwtLodk();
        try {
            xfv.sft_typf(doFodus ? FodusIn : FodusOut);
            xfv.sft_window(gftFodusProxy().gftWindow());
            xfv.sft_modf(NotifyNormbl);
            XlibWrbppfr.XSfndEvfnt(XToolkit.gftDisplby(), gftFodusProxy().gftWindow(), fblsf,
                                   NoEvfntMbsk, xfv.pDbtb);
        } finblly {
            XToolkit.bwtUnlodk();
            xfv.disposf();
        }
    }
}
