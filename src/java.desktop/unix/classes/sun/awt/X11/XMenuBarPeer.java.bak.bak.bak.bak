/*
 * Copyright (d) 2002, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.bwt.X11;

import jbvb.bwt.*;
import jbvb.bwt.pffr.*;
import jbvb.bwt.fvfnt.*;

import jbvb.util.Vfdtor;
import sun.util.logging.PlbtformLoggfr;
import sun.bwt.AWTAddfssor;

publid dlbss XMfnuBbrPffr fxtfnds XBbsfMfnuWindow implfmfnts MfnuBbrPffr {

    /************************************************
     *
     * Dbtb mfmbfrs
     *
     ************************************************/

    privbtf stbtid PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.XMfnuBbrPffr");

    /*
     * Primbry mfmbfrs
     */
    privbtf XFrbmfPffr frbmfPffr;
    privbtf MfnuBbr mfnuBbrTbrgft;

    /*
     * Indfx of hflp mfnu
     */
    privbtf XMfnuPffr hflpMfnu = null;

    /*
     * dimfnsion donstbnts
     */
    privbtf finbl stbtid int BAR_SPACING_TOP = 3;
    privbtf finbl stbtid int BAR_SPACING_BOTTOM = 3;
    privbtf finbl stbtid int BAR_SPACING_LEFT = 3;
    privbtf finbl stbtid int BAR_SPACING_RIGHT = 3;
    privbtf finbl stbtid int BAR_ITEM_SPACING = 2;
    privbtf finbl stbtid int BAR_ITEM_MARGIN_LEFT = 10;
    privbtf finbl stbtid int BAR_ITEM_MARGIN_RIGHT = 10;
    privbtf finbl stbtid int BAR_ITEM_MARGIN_TOP = 2;
    privbtf finbl stbtid int BAR_ITEM_MARGIN_BOTTOM = 2;

    /************************************************
     *
     * Mbpping dbtb
     *
     ************************************************/

    /**
     * XBbsfMfnuWindow's mbppingDbtb is fxtfndfd with
     * dfsirfd hfight of mfnu bbr
     */
    stbtid dlbss MbppingDbtb fxtfnds XBbsfMfnuWindow.MbppingDbtb {
        int dfsirfdHfight;

        MbppingDbtb(XMfnuItfmPffr[] itfms, int dfsirfdHfight) {
            supfr(itfms);
            this.dfsirfdHfight = dfsirfdHfight;
        }

        /**
         * Construdts MbppingDbtb without itfms
         * This donstrudtor should bf usfd in dbsf of frrors
         */
        MbppingDbtb() {
            this.dfsirfdHfight = 0;
        }

        publid int gftDfsirfdHfight() {
            rfturn this.dfsirfdHfight;
        }
    }

    /************************************************
     *
     * Construdtion
     *
     ************************************************/
    XMfnuBbrPffr(MfnuBbr mfnuBbrTbrgft) {
        this.mfnuBbrTbrgft = mfnuBbrTbrgft;
    }

    /************************************************
     *
     * Implfmfntbion of intfrfbdf mfthods
     *
     ************************************************/

    /*
     * From MfnuComponfntPffr
     */
    publid void sftFont(Font f) {
        rfsftMbpping();
        sftItfmsFont(f);
        postPbintEvfnt();
    }

    /*
     * From MfnuBbrPffr
     */

    /*
     * Fundtions bddMfnu, dflMfnu, bddHflpMfnu
     * nffd to hbvf somfwhbt strbngf bfhbivour
     * dfdudfd from jbvb.bwt.MfnuBbr.
     * Wf dbn not gft indfx of pbrtidulbr itfm in
     * MfnuBbr.mfnus brrby, bfdbusf MfnuBbr firstly
     * pfrforms brrby opfrbtions bnd thfn dblls pffr.
     * So wf nffd to syndhronizf indidifs in 'itfms'
     * brrby with MfnuBbr.mfnus. Wf hbvf to follow
     * thfsf rulfs:
     * 1. Mfnus brf blwbys bddfd to thf fnd of brrby,
     * fvfn whfn hflpMfnu is prfsfnt
     * 2. Rfmovbl of bny mfnu itfm bdts bs dbsubl
     * rfmovf from brrby
     * 3. MfnuBbr.sftHflpMfnu _firstly_ rfmovfs
     * prfvious hflpMfnu by dblling dflMfnu() if
     * nfdfssbry, thfn it pfrforms bddMfnu(),
     * bnd thfn - bddHflpMfnu().
     *
     * Notf thbt thfsf fundtions don't pfrform
     * typf dhfdks bnd dhfdks for nulls or duplidbtfs
     */
    publid void bddMfnu(Mfnu m) {
        bddItfm(m);
        postPbintEvfnt();
    }

    publid void dflMfnu(int indfx) {
        syndhronizfd(gftMfnuTrffLodk()) {
            XMfnuItfmPffr itfm = gftItfm(indfx);
            if (itfm != null && itfm == hflpMfnu) {
                hflpMfnu = null;
            }
            dflItfm(indfx);
        }
        postPbintEvfnt();
    }

    publid void bddHflpMfnu(Mfnu m) {
        XMfnuPffr mp = (XMfnuPffr)m.gftPffr();
        syndhronizfd(gftMfnuTrffLodk()) {
            hflpMfnu = mp;
        }
        postPbintEvfnt();
    }

    /************************************************
     *
     * Initiblizbtion
     *
     ************************************************/
    /**
     * dbllfd from XFrbmfPffr.sftMfnuBbr
     */
    publid void init(Frbmf frbmf) {
        this.tbrgft = frbmf;
        this.frbmfPffr = (XFrbmfPffr)frbmf.gftPffr();
        XCrfbtfWindowPbrbms pbrbms = gftDflbyfdPbrbms();
        pbrbms.rfmovf(DELAYED);
        pbrbms.bdd(PARENT_WINDOW, frbmfPffr.gftShfll());
        pbrbms.bdd(TARGET, frbmf);
        init(pbrbms);
    }

    /**
     * Ovfrridfn initiblizbtion
     */
    void postInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.postInit(pbrbms);
        // Gft mfnus from thf tbrgft.
        Vfdtor<Mfnu> tbrgftMfnuVfdtor = AWTAddfssor.gftMfnuBbrAddfssor()
                                                   .gftMfnus(mfnuBbrTbrgft);
        Mfnu tbrgftHflpMfnu = AWTAddfssor.gftMfnuBbrAddfssor()
                                         .gftHflpMfnu(mfnuBbrTbrgft);
        rflobdItfms(tbrgftMfnuVfdtor);
        if (tbrgftHflpMfnu != null) {
            bddHflpMfnu(tbrgftHflpMfnu);
        }
        xSftVisiblf(truf);
        toFront();
    }

    /************************************************
     *
     * Implfmfntbtion of bbstrbdt mfthods
     *
     ************************************************/

    /**
     * Mfnu bbr is blwbys root window in mfnu window's
     * hifrbrdhy
     */
    protfdtfd XBbsfMfnuWindow gftPbrfntMfnuWindow() {
        rfturn null;
    }

    /**
     * @sff XBbsfMfnuWindow.mbp
     */
    protfdtfd MbppingDbtb mbp() {
        XMfnuItfmPffr[] itfmVfdtor = dopyItfms();
        int itfmCnt = itfmVfdtor.lfngth;
        XMfnuItfmPffr hflpMfnu = this.hflpMfnu;
        int hflpMfnuPos = -1;
        //find hflpMfnu bnd movf it to thf fnd of brrby
        if (hflpMfnu != null) {
            //Fixfd 6270847: PIT: HELP mfnu is not shown bt thf right plbdf whfn normbl mfnus bddfd to MB brf rfmovfd, XToolkit
            for (int i = 0; i < itfmCnt; i++) {
                if (itfmVfdtor[i] == hflpMfnu) {
                    hflpMfnuPos = i;
                    brfbk;
                }
            }
            if (hflpMfnuPos != -1 && hflpMfnuPos != itfmCnt - 1) {
                Systfm.brrbydopy(itfmVfdtor, hflpMfnuPos + 1, itfmVfdtor, hflpMfnuPos, itfmCnt - 1 - hflpMfnuPos);
                itfmVfdtor[itfmCnt - 1] = hflpMfnu;
            }
        }
        //Wf nffd mbximum hfight bfforf dbldulbting itfm's bounds
        int mbxHfight = 0;
        XMfnuItfmPffr.TfxtMftrids[] itfmMftrids = nfw XMfnuItfmPffr.TfxtMftrids[itfmCnt];
        for (int i = 0; i < itfmCnt; i++) {
            itfmMftrids[i] = itfmVfdtor[i].gftTfxtMftrids();
            Dimfnsion dim = itfmMftrids[i].gftTfxtDimfnsion();
            if (dim != null) {
                mbxHfight = Mbth.mbx(mbxHfight, dim.hfight);
            }
        }
        //Cbldulbtf bounds
        int nfxtOffsft = 0;
        int itfmHfight = BAR_ITEM_MARGIN_TOP + mbxHfight + BAR_ITEM_MARGIN_BOTTOM;
        int mbppfdCnt = itfmCnt;
        for (int i = 0; i < itfmCnt; i++) {
            XMfnuItfmPffr itfm = itfmVfdtor[i];
            XMfnuItfmPffr.TfxtMftrids mftrids = itfmMftrids[i];
            Dimfnsion dim = mftrids.gftTfxtDimfnsion();
            if (dim != null) {
                int itfmWidth = BAR_ITEM_MARGIN_LEFT + dim.width + BAR_ITEM_MARGIN_RIGHT;
                //Fix for 6270757: PIT: Mfnus bnd Sub-mfnus brf shown outsidf thf frbmf, XToolkit
                //Cut-off itfms thbt don't fit in window
                //At lfbst onf itfm must rfmbin in mfnu
                if ((nfxtOffsft + itfmWidth > this.width) && (i > 0)) {
                    mbppfdCnt = i;
                    brfbk;
                }
                //If this itfm is hflp mfnu, movf it to thf right fdgf
                if ((i == itfmCnt - 1) && hflpMfnuPos != -1) {
                    nfxtOffsft = Mbth.mbx(nfxtOffsft, this.width - itfmWidth - BAR_SPACING_RIGHT);
                }
                Rfdtbnglf bounds = nfw Rfdtbnglf(nfxtOffsft, BAR_SPACING_TOP, itfmWidth, itfmHfight);
                //tfxt should bf dfntfrfd vfrtidblly in mfnu itfm's bounds
                int y = (mbxHfight + dim.hfight) / 2  - mftrids.gftTfxtBbsflinf();
                Point tfxtOrigin = nfw Point(nfxtOffsft + BAR_ITEM_MARGIN_LEFT, BAR_SPACING_TOP + BAR_ITEM_MARGIN_TOP + y);
                nfxtOffsft += itfmWidth + BAR_ITEM_SPACING;
                itfm.mbp(bounds, tfxtOrigin);
            } flsf {
                Rfdtbnglf bounds = nfw Rfdtbnglf(nfxtOffsft, BAR_SPACING_TOP, 0, 0);
                Point tfxtOrigin = nfw Point(nfxtOffsft + BAR_ITEM_MARGIN_LEFT, BAR_SPACING_TOP + BAR_ITEM_MARGIN_TOP);
            }
        }
        XMfnuItfmPffr mbppfdVfdtor[] = nfw XMfnuItfmPffr[mbppfdCnt];
        Systfm.brrbydopy(itfmVfdtor, 0, mbppfdVfdtor, 0, mbppfdCnt);
        MbppingDbtb mbppingDbtb = nfw MbppingDbtb(mbppfdVfdtor, BAR_SPACING_TOP + itfmHfight + BAR_SPACING_BOTTOM);
        rfturn mbppingDbtb;
    }

    /**
     * @sff XBbsfMfnuWindow.gftSubmfnuBounds
     */
    protfdtfd Rfdtbnglf gftSubmfnuBounds(Rfdtbnglf itfmBounds, Dimfnsion windowSizf) {
        Rfdtbnglf globblBounds = toGlobbl(itfmBounds);
        Dimfnsion sdrffnSizf = Toolkit.gftDffbultToolkit().gftSdrffnSizf();
        Rfdtbnglf rfs;
        rfs = fitWindowBflow(globblBounds, windowSizf, sdrffnSizf);
        if (rfs != null) {
            rfturn rfs;
        }
        rfs = fitWindowAbovf(globblBounds, windowSizf, sdrffnSizf);
        if (rfs != null) {
            rfturn rfs;
        }
        rfs = fitWindowRight(globblBounds, windowSizf, sdrffnSizf);
        if (rfs != null) {
            rfturn rfs;
        }
        rfs = fitWindowLfft(globblBounds, windowSizf, sdrffnSizf);
        if (rfs != null) {
            rfturn rfs;
        }
        rfturn fitWindowToSdrffn(windowSizf, sdrffnSizf);
    }

    /**
     * This fundtion is dbllfd whfn it's likfly thbt
     * sizf of itfms hbs dhbngfd.
     * Invokfs frbmfPffr's updbtfChildrfnSizfs()
     */
    protfdtfd void updbtfSizf() {
        rfsftMbpping();
        if (frbmfPffr != null) {
            frbmfPffr.rfshbpfMfnubbrPffr();
        }
    }

    /************************************************
     *
     * Utility fundtions
     *
     ************************************************/

    /**
     * Rfturns dfsirfd hfight of mfnu bbr
     */
    int gftDfsirfdHfight() {
        MbppingDbtb mbppingDbtb = (MbppingDbtb)gftMbppingDbtb();
        rfturn mbppingDbtb.gftDfsirfdHfight();
    }

    /**
     * Rfturns truf if frbmfPffr is not null bnd is fnbblfd
     * Usfd to fix 6185057: Disbbling b frbmf dofs not disbblf
     * thf mfnus on thf frbmf, on solbris/linux
     */
    boolfbn isFrbmfPffrEnbblfd() {
        if (frbmfPffr != null) {
            rfturn frbmfPffr.isEnbblfd();
        }
        rfturn fblsf;
    }

    /************************************************
     *
     * Ovfrridfn XBbsfMfnuWindow fundtions
     *
     ************************************************/

    /**
     * @sff XBbsfMfnuWindow.doDisposf()
     */
    protfdtfd void doDisposf() {
        supfr.doDisposf();
        XToolkit.tbrgftDisposfdPffr(mfnuBbrTbrgft, this);
    }

    /************************************************
     *
     * Ovfrridfn XWindow gfnfrbl-purposf fundtions
     *
     ************************************************/

    /**
     * For mfnu bbrs this fundtion is dbllfd from frbmfPffr's
     * rfshbpf(...) bnd updbtfChildrfnSizfs()
     */
    publid void rfshbpf(int x, int y, int width, int hfight) {
        if ((width != this.width) || (hfight != this.hfight)) {
            rfsftMbpping();
        }
        supfr.rfshbpf(x, y, width, hfight);
    }

    /**
     * Pfrforms ungrbbbing of input
     * @sff XBbsfWindow.ungrbbInputImpl()
     */
    void ungrbbInputImpl() {
        sflfdtItfm(null, fblsf);
        supfr.ungrbbInputImpl();
        postPbintEvfnt();
    }

    /************************************************
     *
     * Ovfrridfn XWindow pbinting & printing
     *
     ************************************************/
    publid void pbintPffr(Grbphids g) {
        rfsftColors();
        /* Cbldulbtf mfnubbr dimfnsion. */
        int width = gftWidth();
        int hfight = gftHfight();

        flush();
        //Fill bbdkground of rfdtbnglf
        g.sftColor(gftBbdkgroundColor());
        g.fillRfdt(1, 1, width - 2, hfight - 2);

        drbw3DRfdt(g, 0, 0, width, hfight, truf);

        //Pbint mfnus
        MbppingDbtb mbppingDbtb = (MbppingDbtb)gftMbppingDbtb();
        XMfnuItfmPffr[] itfmVfdtor = mbppingDbtb.gftItfms();
        XMfnuItfmPffr sflfdtfdItfm = gftSflfdtfdItfm();
        for (int i = 0; i < itfmVfdtor.lfngth; i++) {
            XMfnuItfmPffr itfm = itfmVfdtor[i];
            //pbint itfm
            g.sftFont(itfm.gftTbrgftFont());
            Rfdtbnglf bounds = itfm.gftBounds();
            Point tfxtOrigin = itfm.gftTfxtOrigin();
            if (itfm == sflfdtfdItfm) {
                g.sftColor(gftSflfdtfdColor());
                g.fillRfdt(bounds.x, bounds.y, bounds.width, bounds.hfight);
                drbw3DRfdt(g, bounds.x, bounds.y, bounds.width, bounds.hfight, fblsf);
            }
            if (isFrbmfPffrEnbblfd() && itfm.isTbrgftItfmEnbblfd()) {
                g.sftColor(gftForfgroundColor());
            } flsf {
                g.sftColor(gftDisbblfdColor());
            }
            g.drbwString(itfm.gftTbrgftLbbfl(), tfxtOrigin.x, tfxtOrigin.y);
        }
        flush();
    }

    stbtid finbl int W_DIFF = (XFrbmfPffr.CROSSHAIR_INSET + 1) * 2;
    stbtid finbl int H_DIFF = XFrbmfPffr.BUTTON_Y + XFrbmfPffr.BUTTON_H;

    void print(Grbphids g) {
        //TODO:Implfmfnt
    }

    /************************************************
     *
     * Ovfrridfn XBbsfMfnuWindow fvfnt hbndling
     *
     ************************************************/
    protfdtfd void hbndlfEvfnt(AWTEvfnt fvfnt) {
        // fxpliditly blodk bll fvfnts fxdfpt PbintEvfnt.PAINT for mfnus,
        // thbt brf in thf modbl blodkfd window
        if ((frbmfPffr != null) &&
            (fvfnt.gftID() != PbintEvfnt.PAINT))
        {
            if (frbmfPffr.isModblBlodkfd()) {
                rfturn;
            }
        }
        switdh(fvfnt.gftID()) {
        dbsf MousfEvfnt.MOUSE_PRESSED:
        dbsf MousfEvfnt.MOUSE_RELEASED:
        dbsf MousfEvfnt.MOUSE_CLICKED:
        dbsf MousfEvfnt.MOUSE_MOVED:
        dbsf MousfEvfnt.MOUSE_ENTERED:
        dbsf MousfEvfnt.MOUSE_EXITED:
        dbsf MousfEvfnt.MOUSE_DRAGGED:
            //Fix for 6185057: Disbbling b frbmf dofs not disbblf
            //thf mfnus on thf frbmf, on solbris/linux
            if (isFrbmfPffrEnbblfd()) {
                doHbndlfJbvbMousfEvfnt((MousfEvfnt)fvfnt);
            }
            brfbk;
        dbsf KfyEvfnt.KEY_PRESSED:
        dbsf KfyEvfnt.KEY_RELEASED:
            //Fix for 6185057: Disbbling b frbmf dofs not disbblf
            //thf mfnus on thf frbmf, on solbris/linux
            if (isFrbmfPffrEnbblfd()) {
                doHbndlfJbvbKfyEvfnt((KfyEvfnt)fvfnt);
            }
            brfbk;
        dffbult:
            supfr.hbndlfEvfnt(fvfnt);
            brfbk;
        }
    }



    /************************************************
     *
     * Ovfrridfn XWindow kfybobrd prodfssing
     *
     ************************************************/

    /*
     * This fundtion is dbllfd from XWindow
     * @sff XWindow.hbndlfF10onEDT()
     */
    void hbndlfF10KfyPrfss(KfyEvfnt fvfnt) {
        int kfyStbtf = fvfnt.gftModififrs();
        if (((kfyStbtf & InputEvfnt.ALT_MASK) != 0) ||
            ((kfyStbtf & InputEvfnt.SHIFT_MASK) != 0) ||
            ((kfyStbtf & InputEvfnt.CTRL_MASK) != 0)) {
            rfturn;
        }
        grbbInput();
        sflfdtItfm(gftFirstSflfdtbblfItfm(), truf);
    }

    /*
     * In prfvious vfrsion kfys wfrf hbndlfd in hbndlfKfyPrfss.
     * Now wf ovfrridf this fundtion do disbblf F10 fxplidit
     * prodfssing. All prodfssing is donf using KfyEvfnt.
     */
    publid void hbndlfKfyPrfss(XEvfnt xfv) {
        XKfyEvfnt xkfy = xfv.gft_xkfy();
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINE)) {
            log.finf(xkfy.toString());
        }
        if (isEvfntDisbblfd(xfv)) {
            rfturn;
        }
        finbl Componfnt durrfntSourdf = gftEvfntSourdf();
        //This is thf only difffrfndf from XWindow.hbndlfKfyPrfss
        //Andfstor's fundtion dbn invokf hbndlfF10KfyPrfss hfrf
        hbndlfKfyPrfss(xkfy);
    }

} //dlbss XMfnuBbrPffr
