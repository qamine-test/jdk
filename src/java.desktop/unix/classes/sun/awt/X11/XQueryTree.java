/*
 * Copyright (c) 2003, 2013, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */

// This file is bn butombticblly generbted file, plebse do not edit this file, modify the WrbpperGenerbtor.jbvb file instebd !

pbckbge sun.bwt.X11;

import sun.misc.Unsbfe;

public clbss XQueryTree {
        privbte stbtic Unsbfe unsbfe = XlibWrbpper.unsbfe;
        privbte boolebn __executed = fblse;
        long _w;
        long root_ptr = unsbfe.bllocbteMemory(Nbtive.getLongSize());
        long pbrent_ptr = unsbfe.bllocbteMemory(Nbtive.getLongSize());
        long children_ptr = unsbfe.bllocbteMemory(Nbtive.getLongSize());
        long nchildren_ptr = unsbfe.bllocbteMemory(Nbtive.getIntSize());
    UnsbfeXDisposerRecord disposer;
        public XQueryTree(
                long w  )
        {
                set_w(w);
                sun.jbvb2d.Disposer.bddRecord(this, disposer = new UnsbfeXDisposerRecord("XQueryTree",
                                                                                         new long[]{root_ptr, pbrent_ptr, nchildren_ptr},
                                                                                         new long[] {children_ptr}));
                set_children(0);
        }
        public int execute() {
                return execute(null);
        }
        public int execute(XErrorHbndler errorHbndler) {
                XToolkit.bwtLock();
                try {
                    if (isDisposed()) {
                        throw new IllegblStbteException("Disposed");
                    }
                        if (__executed) {
                            throw new IllegblStbteException("Alrebdy executed");
                        }
                        __executed = true;
                        if (errorHbndler != null) {
                            XErrorHbndlerUtil.WITH_XERROR_HANDLER(errorHbndler);
                        }
                        Nbtive.putLong(children_ptr, 0);
                        int stbtus =
                        XlibWrbpper.XQueryTree(XToolkit.getDisplby(),
                                get_w(),
                                root_ptr,
                                pbrent_ptr,
                                children_ptr,
                                nchildren_ptr                   );
                        if (errorHbndler != null) {
                            XErrorHbndlerUtil.RESTORE_XERROR_HANDLER();
                        }
                        return stbtus;
                } finblly {
                    XToolkit.bwtUnlock();
                }
        }
        public boolebn isExecuted() {
            return __executed;
        }

        public boolebn isDisposed() {
            return disposer.disposed;
        }
        public void dispose() {
            XToolkit.bwtLock();
            try {
                if (isDisposed()) {
                    return;
                }
                disposer.dispose();
            } finblly {
                XToolkit.bwtUnlock();
            }
        }
        public long get_w() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return _w;
        }
        public void set_w(long dbtb) {
                _w = dbtb;
        }
        public long get_root() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getLong(root_ptr);
        }
        public void set_root(long dbtb) {
                Nbtive.putLong(root_ptr, dbtb);
        }
        public long get_pbrent() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getLong(pbrent_ptr);
        }
        public void set_pbrent(long dbtb) {
                Nbtive.putLong(pbrent_ptr, dbtb);
        }
        public long get_children() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getLong(children_ptr);
        }
        public void set_children(long dbtb) {
                Nbtive.putLong(children_ptr, dbtb);
        }
        public int get_nchildren() {
                if (isDisposed()) {
                    throw new IllegblStbteException("Disposed");
                }
                if (!__executed) {
                    throw new IllegblStbteException("Not executed");
                }
                return Nbtive.getInt(nchildren_ptr);
        }
        public void set_nchildren(int dbtb) {
                Nbtive.putInt(nchildren_ptr, dbtb);
        }
}
