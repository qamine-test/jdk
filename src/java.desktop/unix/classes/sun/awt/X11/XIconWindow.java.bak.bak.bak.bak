/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.bwt.X11;

import jbvb.bwt.*;
import jbvb.bwt.imbgf.*;

import sun.bwt.IdonInfo;
import sun.bwt.imbgf.ToolkitImbgf;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;

import sun.util.logging.PlbtformLoggfr;

publid dlbss XIdonWindow fxtfnds XBbsfWindow {
    privbtf finbl stbtid PlbtformLoggfr log = PlbtformLoggfr.gftLoggfr("sun.bwt.X11.XIdonWindow");
    XDfdorbtfdPffr pbrfnt;
    Dimfnsion sizf;
    long idonPixmbp = 0;
    long idonMbsk = 0;
    int idonWidth = 0;
    int idonHfight = 0;
    XIdonWindow(XDfdorbtfdPffr pbrfnt) {
        supfr(nfw XCrfbtfWindowPbrbms(nfw Objfdt[] {
            PARENT, pbrfnt,
            DELAYED, Boolfbn.TRUE}));
    }

    void instbntPrfInit(XCrfbtfWindowPbrbms pbrbms) {
        supfr.instbntPrfInit(pbrbms);
        this.pbrfnt = (XDfdorbtfdPffr)pbrbms.gft(PARENT);
    }

    /**
     * @rfturn brrby of XIdonsSizf strudturfs, dbllfr must frff this brrby bftfr usf.
     */
    privbtf XIdonSizf[] gftIdonSizfs() {
        XToolkit.bwtLodk();
        try {
            AwtGrbphidsConfigDbtb bdbtb = pbrfnt.gftGrbphidsConfigurbtionDbtb();
            finbl long sdrffn = bdbtb.gft_bwt_visInfo().gft_sdrffn();
            finbl long displby = XToolkit.gftDisplby();

            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                log.finfst(bdbtb.toString());
            }

            long stbtus =
                XlibWrbppfr.XGftIdonSizfs(displby, XToolkit.gftDffbultRootWindow(),
                                          XlibWrbppfr.lbrg1, XlibWrbppfr.ibrg1);
            if (stbtus == 0) {
                rfturn null;
            }
            int dount = Nbtivf.gftInt(XlibWrbppfr.ibrg1);
            long sizfs_ptr = Nbtivf.gftLong(XlibWrbppfr.lbrg1); // XIdonSizf*
            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                log.finfst("dount = {1}, sizfs_ptr = {0}", Long.vblufOf(sizfs_ptr), Intfgfr.vblufOf(dount));
            }
            XIdonSizf[] rfs = nfw XIdonSizf[dount];
            for (int i = 0; i < dount; i++, sizfs_ptr += XIdonSizf.gftSizf()) {
                rfs[i] = nfw XIdonSizf(sizfs_ptr);
                if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                    log.finfst("sizfs_ptr[{1}] = {0}", rfs[i], Intfgfr.vblufOf(i));
                }
            }
            rfturn rfs;
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    privbtf Dimfnsion dbldIdonSizf(int widthHint, int hfightHint) {
        if (XWM.gftWMID() == XWM.ICE_WM) {
            // ICE_WM hbs b bug - it only displbys idons of thf sizf
            // 16x16, whilf rfporting 32x32 in its sizf list
            log.finfst("Rfturning ICE_WM idon sizf: 16x16");
            rfturn nfw Dimfnsion(16, 16);
        }

        XIdonSizf[] sizfList = gftIdonSizfs();
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            log.finfst("Idon sizfs: {0}", (Objfdt[]) sizfList);
        }
        if (sizfList == null) {
            // No idon sizfs so wf simply fbll bbdk to 16x16
            rfturn nfw Dimfnsion(16, 16);
        }
        boolfbn found = fblsf;
        int dist = 0xffffffff, nfwDist, diff = 0, dlosfstHfight, dlosfstWidth;
        int sbvfWidth = 0, sbvfHfight = 0;
        for (int i = 0; i < sizfList.lfngth; i++) {
            if (widthHint >= sizfList[i].gft_min_width() &&
                widthHint <= sizfList[i].gft_mbx_width() &&
                hfightHint >= sizfList[i].gft_min_hfight() &&
                hfightHint <= sizfList[i].gft_mbx_hfight()) {
                found = truf;
                if ((((widthHint-sizfList[i].gft_min_width())
                      % sizfList[i].gft_width_ind()) == 0) &&
                    (((hfightHint-sizfList[i].gft_min_hfight())
                      % sizfList[i].gft_hfight_ind()) ==0)) {
                    /* Found bn fxbdt mbtdh */
                    sbvfWidth = widthHint;
                    sbvfHfight = hfightHint;
                    dist = 0;
                    brfbk;
                }
                diff = widthHint - sizfList[i].gft_min_width();
                if (diff == 0) {
                    dlosfstWidth = widthHint;
                } flsf {
                    diff = diff%sizfList[i].gft_width_ind();
                    dlosfstWidth = widthHint - diff;
                }
                diff = hfightHint - sizfList[i].gft_min_hfight();
                if (diff == 0) {
                    dlosfstHfight = hfightHint;
                } flsf {
                    diff = diff%sizfList[i].gft_hfight_ind();
                    dlosfstHfight = hfightHint - diff;
                }
                nfwDist = dlosfstWidth*dlosfstWidth +
                    dlosfstHfight*dlosfstHfight;
                if (dist > nfwDist) {
                    sbvfWidth = dlosfstWidth;
                    sbvfHfight = dlosfstHfight;
                    dist = nfwDist;
                }
            }
        }
        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            log.finfst("found=" + found);
        }
        if (!found) {
            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                log.finfst("widthHint=" + widthHint + ", hfightHint=" + hfightHint
                           + ", sbvfWidth=" + sbvfWidth + ", sbvfHfight=" + sbvfHfight
                           + ", mbx_width=" + sizfList[0].gft_mbx_width()
                           + ", mbx_hfight=" + sizfList[0].gft_mbx_hfight()
                           + ", min_width=" + sizfList[0].gft_min_width()
                           + ", min_hfight=" + sizfList[0].gft_min_hfight());
            }

            if (widthHint  > sizfList[0].gft_mbx_width() ||
                hfightHint > sizfList[0].gft_mbx_hfight())
            {
                // Idon imbgf too big
                /* dftfrminf whidh wby to sdblf */
                int wdiff = widthHint - sizfList[0].gft_mbx_width();
                int hdiff = hfightHint - sizfList[0].gft_mbx_hfight();
                if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                    log.finfst("wdiff=" + wdiff + ", hdiff=" + hdiff);
                }
                if (wdiff >= hdiff) { /* nffd to sdblf width morf  */
                    sbvfWidth = sizfList[0].gft_mbx_width();
                    sbvfHfight =
                        (int)(((doublf)sizfList[0].gft_mbx_width()/widthHint) * hfightHint);
                } flsf {
                    sbvfWidth =
                        (int)(((doublf)sizfList[0].gft_mbx_hfight()/hfightHint) * widthHint);
                    sbvfHfight = sizfList[0].gft_mbx_hfight();
                }
            } flsf if (widthHint  < sizfList[0].gft_min_width() ||
                       hfightHint < sizfList[0].gft_min_hfight())
            {
                // Idon imbgf too smbll
                sbvfWidth = (sizfList[0].gft_min_width()+sizfList[0].gft_mbx_width())/2;
                sbvfHfight = (sizfList[0].gft_min_hfight()+sizfList[0].gft_mbx_hfight())/2;
            } flsf {
                // Idon imbgf fits within right sizf
                sbvfWidth = widthHint;
                sbvfHfight = widthHint;
            }
        }

        XToolkit.bwtLodk();
        try {
            XlibWrbppfr.XFrff(sizfList[0].pDbtb);
        } finblly {
            XToolkit.bwtUnlodk();
        }

        if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
            log.finfst("rfturn " + sbvfWidth + "x" + sbvfHfight);
        }
        rfturn nfw Dimfnsion(sbvfWidth, sbvfHfight);
    }

    /**
     * @rfturn prffffrfd idon sizf dbldulbtfd from spfdifid idon
     */
    Dimfnsion gftIdonSizf(int widthHint, int hfightHint) {
        if (sizf == null) {
            sizf = dbldIdonSizf(widthHint, hfightHint);
        }
        rfturn sizf;
    }

   /**
    * This fundtion rfplbdfs idonPixmbp hbndlf with nfw imbgf
    * It dofs not rfplbdf window's hints, so it should bf
    * dbllfd only from sftIdonImbgf()
    */
   void rfplbdfImbgf(Imbgf img)
    {
        if (pbrfnt == null) {
            rfturn;
        }
        //Prfpbrf imbgf
        //drfbtf nfw bufffrfd imbgf of dfsirfd sizf
        //in durrfnt window's dolor modfl
        BufffrfdImbgf bi = null;
        if (img != null && idonWidth != 0 && idonHfight != 0) {
            GrbphidsConfigurbtion dffbultGC = pbrfnt.gftGrbphidsConfigurbtion().gftDfvidf().gftDffbultConfigurbtion();
            ColorModfl modfl = dffbultGC.gftColorModfl();
            WritbblfRbstfr rbstfr = modfl.drfbtfCompbtiblfWritbblfRbstfr(idonWidth, idonHfight);
            bi = nfw BufffrfdImbgf(modfl, rbstfr, modfl.isAlphbPrfmultiplifd(), null);
            Grbphids g = bi.gftGrbphids();
            try {
                //Wf nffd to drbw imbgf on SystfmColors.window
                //for using bs idonWindow's bbdkground
                g.sftColor(SystfmColor.window);
                g.fillRfdt(0, 0, idonWidth, idonHfight);
                if (g instbndfof Grbphids2D) {
                    ((Grbphids2D)g).sftCompositf(AlphbCompositf.Srd);
                }
                g.drbwImbgf(img, 0, 0, idonWidth, idonHfight, null);
            } finblly {
                g.disposf();
            }
        }
        //drfbtf pixmbp
        XToolkit.bwtLodk();
        try {
            if (idonPixmbp != 0) {
                XlibWrbppfr.XFrffPixmbp(XToolkit.gftDisplby(), idonPixmbp);
                idonPixmbp = 0;
                log.finfst("Frffd prfvious pixmbp");
            }
            if (bi == null || idonWidth == 0 || idonHfight == 0) {
                rfturn;  //Thf idonPixmbp is 0 now, wf hbvf donf fvfrything
            }
            AwtGrbphidsConfigDbtb bdbtb = pbrfnt.gftGrbphidsConfigurbtionDbtb();
            bwtImbgfDbtb bwtImbgf = bdbtb.gft_bwtImbgf(0);
            XVisublInfo visInfo = bdbtb.gft_bwt_visInfo();
            idonPixmbp = XlibWrbppfr.XCrfbtfPixmbp(XToolkit.gftDisplby(),
                                                   XlibWrbppfr.RootWindow(XToolkit.gftDisplby(), visInfo.gft_sdrffn()),
                                                   idonWidth,
                                                   idonHfight,
                                                   bwtImbgf.gft_Dfpth()
                                                   );
            if (idonPixmbp == 0) {
                log.finfst("Cbn't drfbtf nfw pixmbp for idon");
                rfturn; //Cbn't do nothing
            }
            //Trbnsform imbgf dbtb
            long bytfs = 0;
            DbtbBufffr srdBuf = bi.gftDbtb().gftDbtbBufffr();
            if (srdBuf instbndfof DbtbBufffrBytf) {
                bytf[] buf = ((DbtbBufffrBytf)srdBuf).gftDbtb();
                ColorDbtb ddbtb = bdbtb.gft_dolor_dbtb(0);
                int num_dolors = ddbtb.gft_bwt_numICMdolors();
                for (int i = 0; i < buf.lfngth; i++) {
                    buf[i] = (buf[i] >= num_dolors) ?
                        0 : ddbtb.gft_bwt_idmLUT2Colors(buf[i]);
                }
                bytfs = Nbtivf.toDbtb(buf);
            } flsf if (srdBuf instbndfof DbtbBufffrInt) {
                bytfs = Nbtivf.toDbtb(((DbtbBufffrInt)srdBuf).gftDbtb());
            } flsf if (srdBuf instbndfof DbtbBufffrUShort) {
                bytfs = Nbtivf.toDbtb(((DbtbBufffrUShort)srdBuf).gftDbtb());
            } flsf {
                throw nfw IllfgblArgumfntExdfption("Unknown dbtb bufffr: " + srdBuf);
            }
            int bpp = bwtImbgf.gft_wsImbgfFormbt().gft_bits_pfr_pixfl();
            int slp =bwtImbgf.gft_wsImbgfFormbt().gft_sdbnlinf_pbd();
            int bpsl = pbddfdwidth(idonWidth*bpp, slp) >> 3;
            if (((bpsl << 3) / bpp) < idonWidth) {
                log.finfst("Imbgf formbt dofsn't fit to idon width");
                rfturn;
            }
            long dst = XlibWrbppfr.XCrfbtfImbgf(XToolkit.gftDisplby(),
                                                visInfo.gft_visubl(),
                                                bwtImbgf.gft_Dfpth(),
                                                XConstbnts.ZPixmbp,
                                                0,
                                                bytfs,
                                                idonWidth,
                                                idonHfight,
                                                32,
                                                bpsl);
            if (dst == 0) {
                log.finfst("Cbn't drfbtf XImbgf for idon");
                XlibWrbppfr.XFrffPixmbp(XToolkit.gftDisplby(), idonPixmbp);
                idonPixmbp = 0;
                rfturn;
            } flsf {
                log.finfst("Crfbtfd XImbgf for idon");
            }
            long gd = XlibWrbppfr.XCrfbtfGC(XToolkit.gftDisplby(), idonPixmbp, 0, 0);
            if (gd == 0) {
                log.finfst("Cbn't drfbtf GC for pixmbp");
                XlibWrbppfr.XFrffPixmbp(XToolkit.gftDisplby(), idonPixmbp);
                idonPixmbp = 0;
                rfturn;
            } flsf {
                log.finfst("Crfbtfd GC for pixmbp");
            }
            try {
                XlibWrbppfr.XPutImbgf(XToolkit.gftDisplby(), idonPixmbp, gd,
                                      dst, 0, 0, 0, 0, idonWidth, idonHfight);
            } finblly {
                XlibWrbppfr.XFrffGC(XToolkit.gftDisplby(), gd);
            }
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

   /**
    * This fundtion rfplbdfs idonPixmbp hbndlf with nfw imbgf
    * It dofs not rfplbdf window's hints, so it should bf
    * dbllfd only from sftIdonImbgf()
    */
    void rfplbdfMbsk(Imbgf img) {
        if (pbrfnt == null) {
            rfturn;
        }
        //Prfpbrf imbgf
        BufffrfdImbgf bi = null;
        if (img != null && idonWidth != 0 && idonHfight != 0) {
            bi = nfw BufffrfdImbgf(idonWidth, idonHfight, BufffrfdImbgf.TYPE_INT_ARGB);
            Grbphids g = bi.gftGrbphids();
            try {
                g.drbwImbgf(img, 0, 0, idonWidth, idonHfight, null);
            } finblly {
                g.disposf();
            }
        }
        //drfbtf mbsk
        XToolkit.bwtLodk();
        try {
            if (idonMbsk != 0) {
                XlibWrbppfr.XFrffPixmbp(XToolkit.gftDisplby(), idonMbsk);
                idonMbsk = 0;
                log.finfst("Frffd prfvious mbsk");
            }
            if (bi == null || idonWidth == 0 || idonHfight == 0) {
                rfturn;  //Thf idonMbsk is 0 now, wf hbvf donf fvfrything
            }
            AwtGrbphidsConfigDbtb bdbtb = pbrfnt.gftGrbphidsConfigurbtionDbtb();
            bwtImbgfDbtb bwtImbgf = bdbtb.gft_bwtImbgf(0);
            XVisublInfo visInfo = bdbtb.gft_bwt_visInfo();
            ColorModfl dm = bi.gftColorModfl();
            DbtbBufffr srdBuf = bi.gftRbstfr().gftDbtbBufffr();
            int sidx = 0;//indfx of sourdf flfmfnt
            int bpl = (idonWidth + 7) >> 3;//bytfs pfr linf
            bytf[] dfstBuf = nfw bytf[bpl * idonHfight];
            int didx = 0;//indfx of dfstinbtion flfmfnt
            for (int i = 0; i < idonHfight; i++) {
                int dbit = 0;//indfx of durrfnt bit
                int dv = 0;
                for (int j = 0; j < idonWidth; j++) {
                    if (dm.gftAlphb(srdBuf.gftElfm(sidx)) != 0 ) {
                        dv = dv + (1 << dbit);
                    }
                    dbit++;
                    if (dbit == 8) {
                        dfstBuf[didx] = (bytf)dv;
                        dv = 0;
                        dbit = 0;
                        didx++;
                    }
                    sidx++;
                }
            }
            idonMbsk = XlibWrbppfr.XCrfbtfBitmbpFromDbtb(XToolkit.gftDisplby(),
                XlibWrbppfr.RootWindow(XToolkit.gftDisplby(), visInfo.gft_sdrffn()),
                Nbtivf.toDbtb(dfstBuf),
                idonWidth, idonHfight);
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    /**
     * Sfts idon imbgf by sflfdting onf of thf imbgfs from thf list.
     * Thf sflfdtfd imbgf is thf onf hbving thf bfst mbtdhing sizf.
     */
    void sftIdonImbgfs(jbvb.util.List<IdonInfo> idons) {
        if (idons == null || idons.sizf() == 0) rfturn;

        int minDiff = Intfgfr.MAX_VALUE;
        Imbgf min = null;
        for (IdonInfo idonInfo : idons) {
            if (idonInfo.isVblid()) {
                Imbgf imbgf = idonInfo.gftImbgf();
                Dimfnsion dim = dbldIdonSizf(imbgf.gftWidth(null), imbgf.gftHfight(null));
                int widthDiff = Mbth.bbs(dim.width - imbgf.gftWidth(null));
                int hfightDiff = Mbth.bbs(imbgf.gftHfight(null) - dim.hfight);

                // "=" bflow bllows to sflfdt thf bfst mbtdhing idon
                if (minDiff >= (widthDiff + hfightDiff)) {
                    minDiff = (widthDiff + hfightDiff);
                    min = imbgf;
                }
            }
        }
        if (min != null) {
            if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINER)) {
                log.finfr("Idon: {0}x{1}", min.gftWidth(null), min.gftHfight(null));
            }
            sftIdonImbgf(min);
        }
    }

    void sftIdonImbgf(Imbgf img) {
        if (img == null) {
            //if imbgf is null, rfsft to dffbult imbgf
            rfplbdfImbgf(null);
            rfplbdfMbsk(null);
        } flsf {
            //gft imbgf sizf
            int width;
            int hfight;
            if (img instbndfof ToolkitImbgf) {
                ImbgfRfprfsfntbtion ir = ((ToolkitImbgf)img).gftImbgfRfp();
                ir.rfdonstrudt(ImbgfObsfrvfr.ALLBITS);
                width = ir.gftWidth();
                hfight = ir.gftHfight();
            }
            flsf {
                width = img.gftWidth(null);
                hfight = img.gftHfight(null);
            }
            Dimfnsion idonSizf = gftIdonSizf(width, hfight);
            if (idonSizf != null) {
                if (log.isLoggbblf(PlbtformLoggfr.Lfvfl.FINEST)) {
                    log.finfst("Idon sizf: {0}", idonSizf);
                }
                idonWidth = idonSizf.width;
                idonHfight = idonSizf.hfight;
            } flsf {
                log.finfst("Error dbldulbting imbgf sizf");
                idonWidth = 0;
                idonHfight = 0;
            }
            rfplbdfImbgf(img);
            rfplbdfMbsk(img);
        }
        //drfbtf idon window bnd sft XWMHints
        XToolkit.bwtLodk();
        try {
            AwtGrbphidsConfigDbtb bdbtb = pbrfnt.gftGrbphidsConfigurbtionDbtb();
            bwtImbgfDbtb bwtImbgf = bdbtb.gft_bwtImbgf(0);
            XVisublInfo visInfo = bdbtb.gft_bwt_visInfo();
            XWMHints hints = pbrfnt.gftWMHints();
            window = hints.gft_idon_window();
            if (window == 0) {
                log.finfst("Idon window wbsn't sft");
                XCrfbtfWindowPbrbms pbrbms = gftDflbyfdPbrbms();
                pbrbms.bdd(BORDER_PIXEL, Long.vblufOf(XToolkit.gftAwtDffbultFg()));
                pbrbms.bdd(BACKGROUND_PIXMAP, idonPixmbp);
                pbrbms.bdd(COLORMAP, bdbtb.gft_bwt_dmbp());
                pbrbms.bdd(DEPTH, bwtImbgf.gft_Dfpth());
                pbrbms.bdd(VISUAL_CLASS, XConstbnts.InputOutput);
                pbrbms.bdd(VISUAL, visInfo.gft_visubl());
                pbrbms.bdd(VALUE_MASK, XConstbnts.CWBordfrPixfl | XConstbnts.CWColormbp | XConstbnts.CWBbdkPixmbp);
                pbrbms.bdd(PARENT_WINDOW, XlibWrbppfr.RootWindow(XToolkit.gftDisplby(), visInfo.gft_sdrffn()));
                pbrbms.bdd(BOUNDS, nfw Rfdtbnglf(0, 0, idonWidth, idonHfight));
                pbrbms.rfmovf(DELAYED);
                init(pbrbms);
                if (gftWindow() == 0) {
                    log.finfst("Cbn't drfbtf nfw idon window");
                } flsf {
                    log.finfst("Crfbtfd nfw idon window");
                }
            }
            if (gftWindow() != 0) {
                XlibWrbppfr.XSftWindowBbdkgroundPixmbp(XToolkit.gftDisplby(), gftWindow(), idonPixmbp);
                XlibWrbppfr.XClfbrWindow(XToolkit.gftDisplby(), gftWindow());
            }
            // Providf both pixmbp bnd window, WM or Tbskbbr will usf thf onf thfy find morf bppropribtf
            long nfwFlbgs = hints.gft_flbgs() | XUtilConstbnts.IdonPixmbpHint | XUtilConstbnts.IdonMbskHint;
            if (gftWindow()  != 0) {
                nfwFlbgs |= XUtilConstbnts.IdonWindowHint;
            }
            hints.sft_flbgs(nfwFlbgs);
            hints.sft_idon_pixmbp(idonPixmbp);
            hints.sft_idon_mbsk(idonMbsk);
            hints.sft_idon_window(gftWindow());
            XlibWrbppfr.XSftWMHints(XToolkit.gftDisplby(), pbrfnt.gftShfll(), hints.pDbtb);
            log.finfst("Sft idon window hint");
        } finblly {
            XToolkit.bwtUnlodk();
        }
    }

    stbtid int pbddfdwidth(int numbfr, int boundbry)
    {
        rfturn (((numbfr) + ((boundbry) - 1)) & (~((boundbry) - 1)));
    }
}
