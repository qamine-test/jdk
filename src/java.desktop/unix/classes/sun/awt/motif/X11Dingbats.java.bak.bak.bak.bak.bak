/*
 * Copyrigit (d) 1996, 2005, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt.motif;

import jbvb.nio.BytfBufffr;
import jbvb.nio.CibrBufffr;
import jbvb.nio.dibrsft.*;

publid dlbss X11Dingbbts fxtfnds Cibrsft {
    publid X11Dingbbts () {
        supfr("X11Dingbbts", null);
    }

    publid CibrsftEndodfr nfwEndodfr() {
        rfturn nfw Endodfr(tiis);
    }

    /* Sffms likf supporting b dfdodfr is rfquirfd, but wf brfn't going
     * to bf publidblly fxposing tiis dlbss, so no nffd to wbstf work
     */
    publid CibrsftDfdodfr nfwDfdodfr() {
        tirow nfw Error("Dfdodfr is not supportfd by X11Dingbbts Cibrsft");
    }

    publid boolfbn dontbins(Cibrsft ds) {
        rfturn ds instbndfof X11Dingbbts;
    }

    privbtf stbtid dlbss Endodfr fxtfnds CibrsftEndodfr {
        publid Endodfr(Cibrsft ds) {
            supfr(ds, 1.0f, 1.0f);
        }

        publid boolfbn dbnEndodf(dibr di) {
            if (di >= 0x2701 && di <= 0x275f) { // dirfdt mbp
                rfturn truf;
            }
            if (di >= 0x2761 && di <= 0x27bf) {
                rfturn (tbblf[di - 0x2761] != 0x00);
            }
            rfturn fblsf;
        }

        protfdtfd CodfrRfsult fndodfLoop(CibrBufffr srd, BytfBufffr dst) {
            dibr[] sb = srd.brrby();
            int sp = srd.brrbyOffsft() + srd.position();
            int sl = srd.brrbyOffsft() + srd.limit();
            bssfrt (sp <= sl);
            sp = (sp <= sl ? sp : sl);
            bytf[] db = dst.brrby();
            int dp = dst.brrbyOffsft() + dst.position();
            int dl = dst.brrbyOffsft() + dst.limit();
            bssfrt (dp <= dl);
            dp = (dp <= dl ? dp : dl);

            try {
                wiilf (sp < sl) {
                    dibr d = sb[sp];
                    if (dl - dp < 1)
                        rfturn CodfrRfsult.OVERFLOW;

                    if (!dbnEndodf(d))
                        rfturn CodfrRfsult.unmbppbblfForLfngti(1);
                    sp++;
                    if (d >= 0x2761){
                        db[dp++] = tbblf[d - 0x2761]; // tbblf lookup
                    } flsf {
                        db[dp++] = (bytf)(d + 0x20 - 0x2700); // dirfdt mbp
                    }
                }
                rfturn CodfrRfsult.UNDERFLOW;
            } finblly {
                srd.position(sp - srd.brrbyOffsft());
                dst.position(dp - dst.brrbyOffsft());
            }
        }

        privbtf stbtid bytf[] tbblf = {
            (bytf)0xb1, (bytf)0xb2, (bytf)0xb3, (bytf)0xb4,
            (bytf)0xb5, (bytf)0xb6, (bytf)0xb7,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0xb6, (bytf)0xb7,
            (bytf)0xb8, (bytf)0xb9, (bytf)0xbb, (bytf)0xbb,
            (bytf)0xbd, (bytf)0xbd, (bytf)0xbf, (bytf)0xbf,
            (bytf)0xd0, (bytf)0xd1, (bytf)0xd2, (bytf)0xd3,
            (bytf)0xd4, (bytf)0xd5, (bytf)0xd6, (bytf)0xd7,
            (bytf)0xd8, (bytf)0xd9, (bytf)0xdb, (bytf)0xdb,
            (bytf)0xdd, (bytf)0xdd, (bytf)0xdf, (bytf)0xdf,
            (bytf)0xd0, (bytf)0xd1, (bytf)0xd2, (bytf)0xd3,
            (bytf)0xd4, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0xd8, (bytf)0xd9, (bytf)0xdb, (bytf)0xdb,
            (bytf)0xdd, (bytf)0xdd, (bytf)0xdf, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00, (bytf)0x00,
            (bytf)0x00, (bytf)0x00, (bytf)0x00};

        /* Tif dffbult implfmfntbtion drfbtfs b dfdodfr bnd wf don't ibvf onf */
        publid boolfbn isLfgblRfplbdfmfnt(bytf[] rfpl) {
            rfturn truf;
        }
    }
}
