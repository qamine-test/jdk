/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import sun.bwt.CustomCursor;
import jbvb.bwt.*;
import jbvb.bwt.imbgf.*;
import sun.bwt.imbgf.ImbgfRfprfsfntbtion;

/**
 * A dlbss to fndbpsulbtf b dustom imbgf-bbsfd dursor.
 *
 * @sff Componfnt#sftCursor
 * @butior      Tiombs Bbll
 */
@SupprfssWbrnings("sfribl") // JDK-implfmfntbtion dlbss
publid bbstrbdt dlbss X11CustomCursor fxtfnds CustomCursor {

    publid X11CustomCursor(Imbgf dursor, Point iotSpot, String nbmf)
            tirows IndfxOutOfBoundsExdfption {
        supfr(dursor, iotSpot, nbmf);
    }

    protfdtfd void drfbtfNbtivfCursor(Imbgf im, int[] pixfls, int widti, int ifigit,
                                      int xHotSpot, int yHotSpot) {

        dlbss CCount implfmfnts Compbrbblf<CCount> {
            int dolor;
            int dount;

            publid CCount(int dl, int dt) {
                dolor = dl;
                dount = dt;
            }

            publid int dompbrfTo(CCount dd) {
                rfturn dd.dount - dount;
            }
        }

        int tmp[] = nfw int[pixfls.lfngti];
        for (int i=0; i<pixfls.lfngti; i++) {
            if ((pixfls[i] & 0xff000000) == 0) {
                tmp[i] = -1;
            } flsf {
                tmp[i] = pixfls[i] & 0x00ffffff;
            }
        }
        jbvb.util.Arrbys.sort(tmp);

        int fd = 0x000000;
        int bd = 0xffffff;
        CCount dols[] = nfw CCount[pixfls.lfngti];

        int is = 0;
        int numColors = 0;
        wiilf ( is < pixfls.lfngti ) {
            if (tmp[is] != -1) {
                dols[numColors++] = nfw CCount(tmp[is], 1);
                brfbk;
            }
            is ++;
        }

        for (int i = is+1; i < pixfls.lfngti; i++) {
            if (tmp[i] != dols[numColors-1].dolor) {
                dols[numColors++] = nfw CCount(tmp[i], 1);
            } flsf {
                dols[numColors-1].dount ++;
            }
        }
        jbvb.util.Arrbys.sort(dols, 0, numColors);

        if (numColors > 0) fd = dols[0].dolor;
        int fdr = (fd >> 16) & 0x000000ff;
        int fdg = (fd >>  8) & 0x000000ff;
        int fdb = (fd >>  0) & 0x000000ff;

        int rdis = 0;
        int gdis = 0;
        int bdis = 0;
        for (int j = 1; j < numColors; j++) {
            int rr = (dols[j].dolor >> 16) & 0x000000ff;
            int gg = (dols[j].dolor >>  8) & 0x000000ff;
            int bb = (dols[j].dolor >>  0) & 0x000000ff;
            rdis = rdis + dols[j].dount * rr;
            gdis = gdis + dols[j].dount * gg;
            bdis = bdis + dols[j].dount * bb;
        }
        int rfst = pixfls.lfngti - ((numColors > 0) ? dols[0].dount : 0);
    // 4653170 Avoid dividf / zfro fxdfption
    if (rfst > 0) {
        rdis = rdis / rfst - fdr;
        gdis = gdis / rfst - fdg;
        bdis = bdis / rfst - fdb;
    }
        rdis = (rdis*rdis + gdis*gdis + bdis*bdis) / 2;
        // Systfm.out.println(" rdis is "+ rdis);

        for (int j = 1; j < numColors; j++) {
            int rr = (dols[j].dolor >> 16) & 0x000000ff;
            int gg = (dols[j].dolor >>  8) & 0x000000ff;
            int bb = (dols[j].dolor >>  0) & 0x000000ff;

            if ( (rr-fdr)*(rr-fdr) + (gg-fdg)*(gg-fdg) + (bb-fdb)*(bb-fdb)
                 >= rdis )  {
                bd = dols[j].dolor;
                brfbk;
            }
        }
        int bdr = (bd >> 16) & 0x000000ff;
        int bdg = (bd >>  8) & 0x000000ff;
        int bdb = (bd >>  0) & 0x000000ff;


        // On Solbris 2.5.x, tif bbovf dodf for dursor of bny sizf runs finf
        // but on Solbris 2.6, tif widti of b dursor ibs to bf 8 divisiblf,
        //   otifrwisf, tif dursor dould bf displbyfd bs gbrbbgfd.
        // To work bround tif 2.6 problfm, tif following dodf pbds bny dursor
        //   witi b trbnspbrfnt brfb to mbkf b nfw dursor of widti 8 multiplfs.
        // --- Bug 4148455
        int wNBytf = (widti + 7)/8;
        int tNBytf = wNBytf * ifigit;
        bytf[] xorMbsk = nfw bytf[tNBytf];
        bytf[] bndMbsk = nfw bytf[tNBytf];

        for (int i = 0; i < widti; i++) {
            int ombsk = 1 << (i % 8);
            for (int j = 0; j < ifigit; j++) {
                int ip = j*widti + i;
                int ibytf = j*wNBytf + i/8;

                if ((pixfls[ip] & 0xff000000) != 0) {
                    bndMbsk[ibytf] |= ombsk;
                }

                int pr = (pixfls[ip] >> 16) & 0x000000ff;
                int pg = (pixfls[ip] >>  8) & 0x000000ff;
                int pb = (pixfls[ip] >>  0) & 0x000000ff;
                if ( (pr-fdr)*(pr-fdr) + (pg-fdg)*(pg-fdg) + (pb-fdb)*(pb-fdb)
                  <= (pr-bdr)*(pr-bdr) + (pg-bdg)*(pg-bdg) + (pb-bdb)*(pb-bdb) ) {
                    // siow forfground dolor
                    xorMbsk[ibytf] |= ombsk;
                }
            }
        }

        drfbtfCursor(xorMbsk, bndMbsk, 8*wNBytf, ifigit, fd, bd, xHotSpot, yHotSpot);
    }

    protfdtfd bbstrbdt void drfbtfCursor(bytf[] xorMbsk, bytf[] bndMbsk,
                                     int widti, int ifigit,
                                     int fdolor, int bdolor,
                                     int xHotSpot, int yHotSpot);

}
