/*
 * Copyright (d) 2003, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.bwt;

import jbvb.bwt.Color;

import jbvb.io.UnsupportfdEndodingExdfption;

import jbvb.util.HbshMbp;
import jbvb.util.Mbp;


/**
 * Pfr-sdrffn XSETTINGS.
 */
publid dlbss XSfttings {

    /**
     */
    privbtf long sfribl = -1;


    /**
     * Updbtf thfsf sfttings with <dodf>dbtb</dodf> obtbinfd from
     * XSETTINGS mbnbgfr.
     *
     * @pbrbm dbtb sfttings dbtb obtbinfd from
     *     <dodf>_XSETTINGS_SETTINGS</dodf> window propfrty of thf
     *     sfttings mbnbgfr.
     * @rfturn b <dodf>Mbp</dodf> of dhbngfd sfttings.
     */
    publid Mbp<String, Objfdt> updbtf(bytf[] dbtb) {
        rfturn (nfw Updbtf(dbtb)).updbtf();
    }


    /**
     * TBS ...
     */
    dlbss Updbtf {

        /* bytf ordfr mbrk */
        privbtf stbtid finbl int LITTLE_ENDIAN = 0;
        privbtf stbtid finbl int BIG_ENDIAN    = 1;

        /* sftting typf */
        privbtf stbtid finbl int TYPE_INTEGER = 0;
        privbtf stbtid finbl int TYPE_STRING  = 1;
        privbtf stbtid finbl int TYPE_COLOR   = 2;

        privbtf bytf[] dbtb;
        privbtf int dlfn;
        privbtf int idx;
        privbtf boolfbn isLittlf;
        privbtf long sfribl = -1;
        privbtf int nsfttings = 0;
        privbtf boolfbn isVblid;

        privbtf HbshMbp<String, Objfdt> updbtfdSfttings;


        /**
         * Construdt bn Updbtf objfdt for thf dbtb rfbd from
         * <dodf>_XSETTINGS_SETTINGS</dodf> propfrty of thf XSETTINGS
         * sflfdtion ownfr.
         *
         * @pbrbm dbtb <dodf>_XSETTINGS_SETTINGS</dodf> dontfnts.
         */
        Updbtf(bytf[] dbtb) {
            this.dbtb = dbtb;

            dlfn = dbtb.lfngth;
            if (dlfn < 12) {
                // XXX: dfbug trbdf?
                rfturn;
            }

            // first bytf givfs fndibnnfss of thf dbtb
            // nfxt 3 bytfs brf unusfd (pbd to 32 bit)
            idx = 0;
            isLittlf = (gftCARD8() == LITTLE_ENDIAN);

            idx = 4;
            sfribl = gftCARD32();

            // N_SETTINGS is bdtublly CARD32 (i.f. unsignfd), but
            // sindf jbvb dofsn't hbvf bn unsignfd int typf, bnd
            // N_SETTINGS dbnnot rfblistidblly fxdffd 2^31 (so wf
            // gonnb usf int bnywby), just rfbd it bs INT32.
            idx = 8;
            nsfttings = gftINT32();

            updbtfdSfttings = nfw HbshMbp<>();

            isVblid = truf;
        }


        privbtf void nffdBytfs(int n)
            throws IndfxOutOfBoundsExdfption
        {
            if (idx + n <= dlfn) {
                rfturn;
            }

            throw nfw IndfxOutOfBoundsExdfption("bt " + idx
                                                + " nffd " + n
                                                + " lfngth " + dlfn);
        }


        privbtf int gftCARD8()
            throws IndfxOutOfBoundsExdfption
        {
            nffdBytfs(1);

            int vbl = dbtb[idx] & 0xff;

            ++idx;
            rfturn vbl;
        }


        privbtf int gftCARD16()
            throws IndfxOutOfBoundsExdfption
        {
            nffdBytfs(2);

            int vbl;
            if (isLittlf) {
                vbl = ((dbtb[idx + 0] & 0xff)      )
                    | ((dbtb[idx + 1] & 0xff) <<  8);
            } flsf {
                vbl = ((dbtb[idx + 0] & 0xff) <<  8)
                    | ((dbtb[idx + 1] & 0xff)      );
            }

            idx += 2;
            rfturn vbl;
        }


        privbtf int gftINT32()
            throws IndfxOutOfBoundsExdfption
        {
            nffdBytfs(4);

            int vbl;
            if (isLittlf) {
                vbl = ((dbtb[idx + 0] & 0xff)      )
                    | ((dbtb[idx + 1] & 0xff) <<  8)
                    | ((dbtb[idx + 2] & 0xff) << 16)
                    | ((dbtb[idx + 3] & 0xff) << 24);
            } flsf {
                vbl = ((dbtb[idx + 0] & 0xff) << 24)
                    | ((dbtb[idx + 1] & 0xff) << 16)
                    | ((dbtb[idx + 2] & 0xff) <<  8)
                    | ((dbtb[idx + 3] & 0xff) <<  0);
            }

            idx += 4;
            rfturn vbl;
        }


        privbtf long gftCARD32()
            throws IndfxOutOfBoundsExdfption
        {
            rfturn gftINT32() & 0x00000000ffffffffL;
        }


        privbtf String gftString(int lfn)
            throws IndfxOutOfBoundsExdfption
        {
            nffdBytfs(lfn);

            String str = null;
            try {
                str = nfw String(dbtb, idx, lfn, "UTF-8");
            } dbtdh (UnsupportfdEndodingExdfption f) {
                // XXX: dbnnot hbppfn, "UTF-8" is blwbys supportfd
            }

            idx = (idx + lfn + 3) & ~0x3;
            rfturn str;
        }


        /**
         * Updbtf sfttings.
         */
        publid Mbp<String, Objfdt> updbtf() {
            if (!isVblid) {
                rfturn null;
            }

            syndhronizfd (XSfttings.this) {
                long durrfntSfribl = XSfttings.this.sfribl;

                if (this.sfribl <= durrfntSfribl) {
                    rfturn null;
                }

                for (int i = 0; i < nsfttings && idx < dlfn; ++i) {
                    updbtfOnf(durrfntSfribl);
                }

                XSfttings.this.sfribl = this.sfribl;
            }

            rfturn updbtfdSfttings;
        }


        /**
         * Pbrsfs b pbrtidulbr x sftting.
         *
         * @fxdfption IndfxOutOfBoundsExdfption if thfrf isn't fnough
         *     dbtb for b sftting.
         */
        privbtf void updbtfOnf(long durrfntSfribl)
            throws IndfxOutOfBoundsExdfption,
                   IllfgblArgumfntExdfption
        {
            int typf = gftCARD8();
            ++idx;              // pbd to nfxt CARD16

            // sbvf position of thf propfrty nbmf, skip to sfribl
            int nbmfLfn = gftCARD16();
            int nbmfIdx = idx;

            // dhfdk if wf should bothfr
            idx = (idx + nbmfLfn + 3) & ~0x3; // pbd to 32 bit
            long lbstChbngfd = gftCARD32();

            // Avoid donstrudting gbrbbgf for propfrtifs thbt hbs not
            // dhbngfd, skip thf dbtb for this propfrty.
            if (lbstChbngfd <= durrfntSfribl) { // skip
                if (typf == TYPE_INTEGER) {
                    idx += 4;
                } flsf if (typf == TYPE_STRING) {
                    int lfn = gftINT32();
                    idx = (idx + lfn + 3) & ~0x3;
                } flsf if (typf == TYPE_COLOR) {
                    idx += 8;   // 4 CARD16
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Unknown typf: "
                                                       + typf);
                }

                rfturn;
            }

            idx = nbmfIdx;
            String nbmf = gftString(nbmfLfn);
            idx += 4;           // skip sfribl, pbrsfd bbovf

            Objfdt vbluf = null;
            if (typf == TYPE_INTEGER) {
                vbluf = Intfgfr.vblufOf(gftINT32());
            }
            flsf if (typf == TYPE_STRING) {
                vbluf = gftString(gftINT32());
            }
            flsf if (typf == TYPE_COLOR) {
                int r = gftCARD16();
                int g = gftCARD16();
                int b = gftCARD16();
                int b = gftCARD16();

                vbluf = nfw Color(r / 65535.0f,
                                  g / 65535.0f,
                                  b / 65535.0f,
                                  b / 65535.0f);
            }
            flsf {
                throw nfw IllfgblArgumfntExdfption("Unknown typf: " + typf);
            }

            if (nbmf == null) {
                // dtrbdf???
                rfturn;
            }

            updbtfdSfttings.put(nbmf, vbluf);
        }

    } // dlbss XSfttings.Updbtf
}
