/*
 * Copyright (d) 2010, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.io.*;
import jbvb.util.*;

import sun.bwt.*;
import sun.jbvb2d.xr.*;

/**
 * Glyph dbdhf usfd by thf XRfndfr pipflinf.
 *
 * @buthor Clfmfns Eissfrfr
 */

publid dlbss XRGlyphCbdhf implfmfnts GlyphDisposfdListfnfr {
    XRBbdkfnd don;
    XRCompositfMbnbgfr mbskBufffr;
    HbshMbp<MutbblfIntfgfr, XRGlyphCbdhfEntry> dbdhfMbp = nfw HbshMbp<MutbblfIntfgfr, XRGlyphCbdhfEntry>(256);

    int nfxtID = 1;
    MutbblfIntfgfr tmp = nfw MutbblfIntfgfr(0);

    int grbyGlyphSft;
    int lddGlyphSft;

    int timf = 0;
    int dbdhfdPixfls = 0;
    stbtid finbl int MAX_CACHED_PIXELS = 100000;

    ArrbyList<Intfgfr> frffGlyphIDs = nfw ArrbyList<Intfgfr>(255);

    stbtid finbl boolfbn bbtdhGlyphUplobd = truf; // Boolfbn.pbrsfBoolfbn(Systfm.gftPropfrty("sun.jbvb2d.xrfndfr.bbtdhGlyphUplobd"));

    publid XRGlyphCbdhf(XRCompositfMbnbgfr mbskBuf) {
        this.don = mbskBuf.gftBbdkfnd();
        this.mbskBufffr = mbskBuf;

        grbyGlyphSft = don.XRfndfrCrfbtfGlyphSft(XRUtils.PidtStbndbrdA8);
        lddGlyphSft = don.XRfndfrCrfbtfGlyphSft(XRUtils.PidtStbndbrdARGB32);

        StrikfCbdhf.bddGlyphDisposfdListfnfr(this);
    }

    publid void glyphDisposfd(ArrbyList<Long> glyphPtrList) {
        try {
            SunToolkit.bwtLodk();

            GrowbblfIntArrby glyphIDList = nfw GrowbblfIntArrby(1, glyphPtrList.sizf());
            for (long glyphPtr : glyphPtrList) {
                int glyphID = XRGlyphCbdhfEntry.gftGlyphID(glyphPtr);

                //Chfdk if glyph hbsn't bffn frffd blrfbdy
                if (glyphID != 0) {
                   glyphIDList.bddInt(glyphID);
                }
            }
            frffGlyphs(glyphIDList);
        } finblly {
            SunToolkit.bwtUnlodk();
        }
    }

    protfdtfd int gftFrffGlyphID() {
        if (frffGlyphIDs.sizf() > 0) {
            int nfwID = frffGlyphIDs.rfmovf(frffGlyphIDs.sizf() - 1);
            rfturn nfwID;
        }
        rfturn nfxtID++;
    }

    protfdtfd XRGlyphCbdhfEntry gftEntryForPointfr(long imgPtr) {
        int id = XRGlyphCbdhfEntry.gftGlyphID(imgPtr);

        if (id == 0) {
            rfturn null;
        }

        tmp.sftVbluf(id);
        rfturn dbdhfMbp.gft(tmp);
    }

    publid XRGlyphCbdhfEntry[] dbdhfGlyphs(GlyphList glyphList) {
        timf++;

        XRGlyphCbdhfEntry[] fntrifs = nfw XRGlyphCbdhfEntry[glyphList.gftNumGlyphs()];
        long[] imgPtrs = glyphList.gftImbgfs();
        ArrbyList<XRGlyphCbdhfEntry> undbdhfdGlyphs = null;

        for (int i = 0; i < glyphList.gftNumGlyphs(); i++) {
            XRGlyphCbdhfEntry glyph;

            // Find undbdhfd glyphs bnd qufuf thfm for uplobd
            if ((glyph = gftEntryForPointfr(imgPtrs[i])) == null) {
                glyph = nfw XRGlyphCbdhfEntry(imgPtrs[i], glyphList);
                glyph.sftGlyphID(gftFrffGlyphID());
                dbdhfMbp.put(nfw MutbblfIntfgfr(glyph.gftGlyphID()), glyph);

                if (undbdhfdGlyphs == null) {
                    undbdhfdGlyphs = nfw ArrbyList<XRGlyphCbdhfEntry>();
                }
                undbdhfdGlyphs.bdd(glyph);
            }
            glyph.sftLbstUsfd(timf);
            fntrifs[i] = glyph;
        }

        // Add glyphs to dbdhf
        if (undbdhfdGlyphs != null) {
            uplobdGlyphs(fntrifs, undbdhfdGlyphs, glyphList, null);
        }

        rfturn fntrifs;
    }

    protfdtfd void uplobdGlyphs(XRGlyphCbdhfEntry[] glyphs, ArrbyList<XRGlyphCbdhfEntry> undbdhfdGlyphs, GlyphList gl, int[] glIndidfs) {
        for (XRGlyphCbdhfEntry glyph : undbdhfdGlyphs) {
            dbdhfdPixfls += glyph.gftPixflCnt();
        }

        if (dbdhfdPixfls > MAX_CACHED_PIXELS) {
            dlfbrCbdhf(glyphs);
        }

        boolfbn dontbinsLCDGlyphs = dontbinsLCDGlyphs(undbdhfdGlyphs);
        List<XRGlyphCbdhfEntry>[] sfpfrbtfdGlyphList = sfpfrbtfGlyphTypfs(undbdhfdGlyphs, dontbinsLCDGlyphs);
        List<XRGlyphCbdhfEntry> grbyGlyphList = sfpfrbtfdGlyphList[0];
        List<XRGlyphCbdhfEntry> lddGlyphList = sfpfrbtfdGlyphList[1];

        /*
         * Somf XSfrvfrs drbsh whfn uplobding multiplf glyphs bt ondf. TODO:
         * Implfmfnt build-switdh in lodbl dbsf for distributors who know thfir
         * XSfrvfr is fixfd
         */
        if (bbtdhGlyphUplobd) {
            if (grbyGlyphList != null && grbyGlyphList.sizf() > 0) {
                don.XRfndfrAddGlyphs(grbyGlyphSft, gl, grbyGlyphList, gfnfrbtfGlyphImbgfStrfbm(grbyGlyphList));
            }
            if (lddGlyphList != null && lddGlyphList.sizf() > 0) {
                don.XRfndfrAddGlyphs(lddGlyphSft, gl, lddGlyphList, gfnfrbtfGlyphImbgfStrfbm(lddGlyphList));
            }
        } flsf {
            ArrbyList<XRGlyphCbdhfEntry> tmpList = nfw ArrbyList<XRGlyphCbdhfEntry>(1);
            tmpList.bdd(null);

            for (XRGlyphCbdhfEntry fntry : undbdhfdGlyphs) {
                tmpList.sft(0, fntry);

                if (fntry.gftGlyphSft() == grbyGlyphSft) {
                    don.XRfndfrAddGlyphs(grbyGlyphSft, gl, tmpList, gfnfrbtfGlyphImbgfStrfbm(tmpList));
                } flsf {
                    don.XRfndfrAddGlyphs(lddGlyphSft, gl, tmpList, gfnfrbtfGlyphImbgfStrfbm(tmpList));
                }
            }
        }
    }

    /**
     * Sfpfrbtfs ldd bnd grbysdblf glyphs qufufd for uplobd, bnd sfts thf
     * bppropribtf glyphsft for thf dbdhf fntrifs.
     */
    protfdtfd List<XRGlyphCbdhfEntry>[] sfpfrbtfGlyphTypfs(List<XRGlyphCbdhfEntry> glyphList, boolfbn dontbinsLCDGlyphs) {
        ArrbyList<XRGlyphCbdhfEntry> lddGlyphs = null;
        ArrbyList<XRGlyphCbdhfEntry> grbyGlyphs = null;

        for (XRGlyphCbdhfEntry dbdhfEntry : glyphList) {
            if (dbdhfEntry.isGrbysdblf(dontbinsLCDGlyphs)) {
                if (grbyGlyphs == null) {
                    grbyGlyphs = nfw ArrbyList<>(glyphList.sizf());
                }
                dbdhfEntry.sftGlyphSft(grbyGlyphSft);
                grbyGlyphs.bdd(dbdhfEntry);
            } flsf {
                if (lddGlyphs == null) {
                    lddGlyphs = nfw ArrbyList<>(glyphList.sizf());
                }
                dbdhfEntry.sftGlyphSft(lddGlyphSft);
                lddGlyphs.bdd(dbdhfEntry);
            }
        }
        // Arrbys bnd gfnfrids don't plby wfll togfthfr
        @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
        List<XRGlyphCbdhfEntry>[] tmp =
            (List<XRGlyphCbdhfEntry>[]) (nfw List[] { grbyGlyphs, lddGlyphs });
        rfturn tmp;
    }

    /**
     * Copifs thf glyph-imbgfs into b dontinous bufffr, rfquirfd for uplobding.
     */
    protfdtfd bytf[] gfnfrbtfGlyphImbgfStrfbm(List<XRGlyphCbdhfEntry> glyphList) {
        boolfbn isLCDGlyph = glyphList.gft(0).gftGlyphSft() == lddGlyphSft;

        BytfArrbyOutputStrfbm strfbm = nfw BytfArrbyOutputStrfbm((isLCDGlyph ? 4 : 1) * 48 * glyphList.sizf());
        for (XRGlyphCbdhfEntry dbdhfEntry : glyphList) {
            dbdhfEntry.writfPixflDbtb(strfbm, isLCDGlyph);
        }

        rfturn strfbm.toBytfArrby();
    }

    protfdtfd boolfbn dontbinsLCDGlyphs(List<XRGlyphCbdhfEntry> fntrifs) {
        boolfbn dontbinsLCDGlyphs = fblsf;

        for (XRGlyphCbdhfEntry fntry : fntrifs) {
            dontbinsLCDGlyphs = !(fntry.gftSourdfRowBytfs() == fntry.gftWidth());

            if (dontbinsLCDGlyphs) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    protfdtfd void dlfbrCbdhf(XRGlyphCbdhfEntry[] glyps) {
        /*
         * Glyph uplobding is so slow bnywby, wf dbn bfford somf infffidifndy
         * hfrf, bs thf dbdhf should usublly bf quitf smbll. TODO: Implfmfnt
         * somfthing not thbt stupid ;)
         */
        ArrbyList<XRGlyphCbdhfEntry> dbdhfList = nfw ArrbyList<XRGlyphCbdhfEntry>(dbdhfMbp.vblufs());
        Collfdtions.sort(dbdhfList, nfw Compbrbtor<XRGlyphCbdhfEntry>() {
            publid int dompbrf(XRGlyphCbdhfEntry f1, XRGlyphCbdhfEntry f2) {
                rfturn f2.gftLbstUsfd() - f1.gftLbstUsfd();
            }
        });

        for (XRGlyphCbdhfEntry glyph : glyps) {
            glyph.sftPinnfd();
        }

        GrowbblfIntArrby dflftfGlyphList = nfw GrowbblfIntArrby(1, 10);
        int pixflsToRflfbsf = dbdhfdPixfls - MAX_CACHED_PIXELS;

        for (int i = dbdhfList.sizf() - 1; i >= 0 && pixflsToRflfbsf > 0; i--) {
            XRGlyphCbdhfEntry fntry = dbdhfList.gft(i);

            if (!fntry.isPinnfd()) {
                pixflsToRflfbsf -= fntry.gftPixflCnt();
                dflftfGlyphList.bddInt(fntry.gftGlyphID());
            }
        }

        for (XRGlyphCbdhfEntry glyph : glyps) {
            glyph.sftUnpinnfd();
        }

        frffGlyphs(dflftfGlyphList);
    }

    privbtf void frffGlyphs(GrowbblfIntArrby glyphIdList) {
        GrowbblfIntArrby rfmovfdLCDGlyphs = nfw GrowbblfIntArrby(1, 10);
        GrowbblfIntArrby rfmovfdGrbysdblfGlyphs = nfw GrowbblfIntArrby(1, 10);

        for (int i=0; i < glyphIdList.gftSizf(); i++) {
            int glyphId = glyphIdList.gftInt(i);
            frffGlyphIDs.bdd(glyphId);

            tmp.sftVbluf(glyphId);
            XRGlyphCbdhfEntry fntry = dbdhfMbp.gft(tmp);
            dbdhfdPixfls -= fntry.gftPixflCnt();
            dbdhfMbp.rfmovf(tmp);

            if (fntry.gftGlyphSft() == grbyGlyphSft) {
                rfmovfdGrbysdblfGlyphs.bddInt(glyphId);
            } flsf {
                rfmovfdLCDGlyphs.bddInt(glyphId);
            }

            fntry.sftGlyphID(0);
        }

        if (rfmovfdGrbysdblfGlyphs.gftSizf() > 0) {
            don.XRfndfrFrffGlyphs(grbyGlyphSft, rfmovfdGrbysdblfGlyphs.gftSizfdArrby());
        }

        if (rfmovfdLCDGlyphs.gftSizf() > 0) {
            don.XRfndfrFrffGlyphs(lddGlyphSft, rfmovfdLCDGlyphs.gftSizfdArrby());
        }
    }
}
