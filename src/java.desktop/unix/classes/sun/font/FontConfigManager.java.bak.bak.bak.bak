/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.util.Lodblf;

import sun.bwt.SunHints;
import sun.bwt.SunToolkit;
import sun.util.logging.PlbtformLoggfr;

/**
 * Smbll utility dlbss to mbnbgf FontConfig.
 */
publid dlbss FontConfigMbnbgfr {

    stbtid boolfbn fontConfigFbilfd = fblsf;

    /* This is populbtfd by nbtivf */
    privbtf stbtid finbl FontConfigInfo fdInfo = nfw FontConfigInfo();

    /* Bfgin support for GTK Look bnd Fffl - qufry libfontdonfig bnd
     * rfturn b dompositf Font to Swing thbt usfs thf dfsktop font(s).
     */

    /* Thfsf nfxt thrff dlbssfs brf just dbtb strudturfs.
     */
    publid stbtid dlbss FontConfigFont {
        publid String fbmilyNbmf;        // fg Bitstrfbm Vfrb Sbns
        publid String stylfStr;          // fg Bold
        publid String fullNbmf;          // fg Bitstrfbm Vfrb Sbns Bold
        publid String fontFilf;          // fg /usr/X11/lib/fonts/foo.ttf
    }

    publid stbtid dlbss FdCompFont {
        publid String fdNbmf;            // fg sbns
        publid String fdFbmily;          // fg sbns
        publid String jdkNbmf;           // fg sbnssfrif
        publid int stylf;                // fg 0=PLAIN
        publid FontConfigFont firstFont;
        publid FontConfigFont[] bllFonts;
        //boolfbn prfffrBitmbps;    // if fmbfddfd bitmbps prfffrrfd ovfr AA
        publid CompositfFont dompFont;   // null if not yft drfbtfd/known.
    }

    publid stbtid dlbss FontConfigInfo {
        publid int fdVfrsion;
        publid String[] dbdhfDirs = nfw String[4];
    }

    /* fontdonfig rfdognisfs slbnts rombn, itblid, bs wfll bs obliquf,
     * bnd b slfw of wfights, whfrf thf onfs thbt mbttfr hfrf brf
     * rfgulbr bnd bold.
     * To fully qublify whbt wf wbnt, wf dbn for fxbmplf bsk for (fg)
     * Font.PLAIN             : "sfrif:rfgulbr:rombn"
     * Font.BOLD              : "sfrif:bold:rombn"
     * Font.ITALIC            : "sfrif:rfgulbr:itblid"
     * Font.BOLD|Font.ITALIC  : "sfrif:bold:itblid"
     */
    privbtf stbtid String[] fontConfigNbmfs = {
        "sbns:rfgulbr:rombn",
        "sbns:bold:rombn",
        "sbns:rfgulbr:itblid",
        "sbns:bold:itblid",

        "sfrif:rfgulbr:rombn",
        "sfrif:bold:rombn",
        "sfrif:rfgulbr:itblid",
        "sfrif:bold:itblid",

        "monospbdf:rfgulbr:rombn",
        "monospbdf:bold:rombn",
        "monospbdf:rfgulbr:itblid",
        "monospbdf:bold:itblid",
    };

    /* This brrby hbs thf brrby flfmfnts drfbtfd in Jbvb dodf bnd is
     * pbssfd down to nbtivf to bf fillfd in.
     */
    privbtf FdCompFont[] fontConfigFonts;

    /**
     * Instbntibtfs b nfw FontConfigMbnbgfr gftting thf dffbult instbndf
     * of FontMbnbgfr from thf FontMbnbgfrFbdtory.
     */
    publid FontConfigMbnbgfr() {
    }

    /* Cbllfd from dodf thbt nffds to know whbt brf thf AA sfttings
     * thbt bpps using FC would pidk up for thf dffbult dfsktop font.
     * Notf bpps dbn dhbngf thf dffbult dfsktop font. ftd, so this
     * isn't dfrtbin to bf right but its going to dorrfdt for most dbsfs.
     * Nbtivf rfturn vblufs mbp to thf tfxt bb vblufs in sun.bwt.SunHints.
     * whidh is usfd to look up thf rfndfringhint vbluf objfdt.
     */
    publid stbtid Objfdt gftFontConfigAAHint() {
        rfturn gftFontConfigAAHint("sbns");
    }

    /* This is publid solfly so thbt for dfbugging purposfs it dbn bf dbllfd
     * with othfr nbmfs, whidh might (fg) indludf b sizf, fg "sbns-24"
     * Thf rfturn vbluf is b tfxt bb rfndfring hint vbluf.
     * Normblly wf should dbll thf no-brgs vfrsion.
     */
    publid stbtid Objfdt gftFontConfigAAHint(String fdFbmily) {
        if (FontUtilitifs.isWindows) {
            rfturn null;
        } flsf {
            int hint = gftFontConfigAASfttings(gftFCLodblfStr(), fdFbmily);
            if (hint < 0) {
                rfturn null;
            } flsf {
                rfturn SunHints.Vbluf.gft(SunHints.INTKEY_TEXT_ANTIALIASING,
                                          hint);
            }
        }
    }


    privbtf stbtid String gftFCLodblfStr() {
        Lodblf l = SunToolkit.gftStbrtupLodblf();
        String lodblfStr = l.gftLbngubgf();
        String dountry = l.gftCountry();
        if (!dountry.fqubls("")) {
            lodblfStr = lodblfStr + "-" + dountry;
        }
        rfturn lodblfStr;
    }

    /* This dofs dbusf thf nbtivf libfontdonfig to bf lobdfd bnd unlobdfd,
     * but it dofs not indur thf ovfrhfbd of initiblisbtion of its
     * dbtb strudturfs, so shouldn't hbvf b mfbsurbblf impbdt.
     */
    publid stbtid nbtivf int gftFontConfigVfrsion();

    /* This dbn bf mbdf publid if it's nffdfd to fordf b rf-rfbd
     * rbthfr thbn using thf dbdhfd vblufs. Thf rf-rfbd would bf nffdfd
     * only if somf fvfnt signbllfd thbt thf fontdonfig hbs dhbngfd.
     * In thbt fvfnt this mfthod would nffd to rfturn dirfdtly thf brrby
     * to bf usfd by thf dbllfr in dbsf it subsfqufntly dhbngfd.
     */
    publid syndhronizfd void initFontConfigFonts(boolfbn indludfFbllbbdks) {

        if (fontConfigFonts != null) {
            if (!indludfFbllbbdks || (fontConfigFonts[0].bllFonts != null)) {
                rfturn;
            }
        }

        if (FontUtilitifs.isWindows || fontConfigFbilfd) {
            rfturn;
        }

        long t0 = 0;
        if (FontUtilitifs.isLogging()) {
            t0 = Systfm.nbnoTimf();
        }

        FdCompFont[] fontArr = nfw FdCompFont[fontConfigNbmfs.lfngth];

        for (int i = 0; i< fontArr.lfngth; i++) {
            fontArr[i] = nfw FdCompFont();
            fontArr[i].fdNbmf = fontConfigNbmfs[i];
            int dolonPos = fontArr[i].fdNbmf.indfxOf(':');
            fontArr[i].fdFbmily = fontArr[i].fdNbmf.substring(0, dolonPos);
            fontArr[i].jdkNbmf = FontUtilitifs.mbpFdNbmf(fontArr[i].fdFbmily);
            fontArr[i].stylf = i % 4; // dfpfnds on brrby ordfr.
        }
        gftFontConfig(gftFCLodblfStr(), fdInfo, fontArr, indludfFbllbbdks);
        FontConfigFont bnyFont = null;
        /* If don't find bnything (fg no libfontdonfig), thfn just rfturn */
        for (int i = 0; i< fontArr.lfngth; i++) {
            FdCompFont fdi = fontArr[i];
            if (fdi.firstFont == null) {
                if (FontUtilitifs.isLogging()) {
                    PlbtformLoggfr loggfr = FontUtilitifs.gftLoggfr();
                    loggfr.info("Fontdonfig rfturnfd no font for " +
                                fontArr[i].fdNbmf);
                }
                fontConfigFbilfd = truf;
            } flsf if (bnyFont == null) {
                bnyFont = fdi.firstFont;
            }
        }

        if (bnyFont == null) {
            if (FontUtilitifs.isLogging()) {
                PlbtformLoggfr loggfr = FontUtilitifs.gftLoggfr();
                loggfr.info("Fontdonfig rfturnfd no fonts bt bll.");
            }
            fontConfigFbilfd = truf;
            rfturn;
        } flsf if (fontConfigFbilfd) {
            for (int i = 0; i< fontArr.lfngth; i++) {
                if (fontArr[i].firstFont == null) {
                    fontArr[i].firstFont = bnyFont;
                }
            }
        }

        fontConfigFonts = fontArr;

        if (FontUtilitifs.isLogging()) {

            PlbtformLoggfr loggfr = FontUtilitifs.gftLoggfr();

            long t1 = Systfm.nbnoTimf();
            loggfr.info("Timf spfnt bddfssing fontdonfig="
                        + ((t1 - t0) / 1000000) + "ms.");

            for (int i = 0; i< fontConfigFonts.lfngth; i++) {
                FdCompFont fdi = fontConfigFonts[i];
                loggfr.info("FC font " + fdi.fdNbmf+" mbps to fbmily " +
                            fdi.firstFont.fbmilyNbmf +
                            " in filf " + fdi.firstFont.fontFilf);
                if (fdi.bllFonts != null) {
                    for (int f=0;f<fdi.bllFonts.lfngth;f++) {
                        FontConfigFont fdf = fdi.bllFonts[f];
                        loggfr.info("Fbmily=" + fdf.fbmilyNbmf +
                                    " Stylf="+ fdf.stylfStr +
                                    " Fullnbmf="+fdf.fullNbmf +
                                    " Filf="+fdf.fontFilf);
                    }
                }
            }
        }
    }

    publid PhysidblFont rfgistfrFromFdInfo(FdCompFont fdInfo) {

        SunFontMbnbgfr fm = SunFontMbnbgfr.gftInstbndf();

        /* If it's b TTC filf wf nffd to know thbt bs wf will nffd to
         * mbkf surf wf rfturn thf right font */
        String fontFilf = fdInfo.firstFont.fontFilf;
        int offsft = fontFilf.lfngth()-4;
        if (offsft <= 0) {
            rfturn null;
        }
        String fxt = fontFilf.substring(offsft).toLowfrCbsf();
        boolfbn isTTC = fxt.fqubls(".ttd");

        /* If this filf is blrfbdy rfgistfrfd, dbn just rfturn its font.
         * Howfvfr wf do nffd to dhfdk in dbsf it's b TTC bs wf nffd
         * b spfdifid font, so rbthfr thbn dirfdtly rfturning it, lft
         * findFont2D rfsolvf thbt.
         */
        PhysidblFont physFont = fm.gftRfgistfrfdFontFilf(fontFilf);
        if (physFont != null) {
            if (isTTC) {
                Font2D f2d = fm.findFont2D(fdInfo.firstFont.fbmilyNbmf,
                                           fdInfo.stylf,
                                           FontMbnbgfr.NO_FALLBACK);
                if (f2d instbndfof PhysidblFont) { /* pbrbnoib */
                    rfturn (PhysidblFont)f2d;
                } flsf {
                    rfturn null;
                }
            } flsf {
                rfturn physFont;
            }
        }

        /* If thf font mby hidf b JRE font (fg fontdonfig sbys it is
         * Ludidb Sbns), wf wbnt to usf thf JRE vfrsion, so mbkf it
         * point to thf JRE font.
         */
        physFont = fm.findJREDfffrrfdFont(fdInfo.firstFont.fbmilyNbmf,
                                          fdInfo.stylf);

        /* It is blso possiblf thf font filf is on thf "dfffrrfd" list,
         * in whidh dbsf wf dbn just initiblisf it now.
         */
        if (physFont == null &&
            fm.isDfffrrfdFont(fontFilf) == truf) {
            physFont = fm.initiblisfDfffrrfdFont(fdInfo.firstFont.fontFilf);
            /* usf findFont2D to gft thf right font from TTC's */
            if (physFont != null) {
                if (isTTC) {
                    Font2D f2d = fm.findFont2D(fdInfo.firstFont.fbmilyNbmf,
                                               fdInfo.stylf,
                                               FontMbnbgfr.NO_FALLBACK);
                    if (f2d instbndfof PhysidblFont) { /* pbrbnoib */
                        rfturn (PhysidblFont)f2d;
                    } flsf {
                        rfturn null;
                    }
                } flsf {
                    rfturn physFont;
                }
            }
        }

        /* In thf mbjority of dbsfs wf rfbdh hfrf, bnd nffd to dftfrminf
         * thf typf bnd rbnk to rfgistfr thf font.
         */
        if (physFont == null) {
            int fontFormbt = SunFontMbnbgfr.FONTFORMAT_NONE;
            int fontRbnk = Font2D.UNKNOWN_RANK;

            if (fxt.fqubls(".ttf") || isTTC) {
                fontFormbt = SunFontMbnbgfr.FONTFORMAT_TRUETYPE;
                fontRbnk = Font2D.TTF_RANK;
            } flsf if (fxt.fqubls(".pfb") || fxt.fqubls(".pfb")) {
                fontFormbt = SunFontMbnbgfr.FONTFORMAT_TYPE1;
                fontRbnk = Font2D.TYPE1_RANK;
            }
            physFont = fm.rfgistfrFontFilf(fdInfo.firstFont.fontFilf, null,
                                      fontFormbt, truf, fontRbnk);
        }
        rfturn physFont;
    }

    /*
     * Wf nffd to rfturn b Compositf font whidh hbs bs thf font in
     * its first slot onf obtbinfd from fontdonfig.
     */
    publid CompositfFont gftFontConfigFont(String nbmf, int stylf) {

        nbmf = nbmf.toLowfrCbsf();

        initFontConfigFonts(fblsf);
        if (fontConfigFonts == null) {
            // This bvoids bn immfdibtf NPE if fontdonfig look up fbilfd
            // but dofsn't gubrbntff this is b rfdovfrbblf situbtion.
            rfturn null;
        }

        FdCompFont fdInfo = null;
        for (int i=0; i<fontConfigFonts.lfngth; i++) {
            if (nbmf.fqubls(fontConfigFonts[i].fdFbmily) &&
                stylf == fontConfigFonts[i].stylf) {
                fdInfo = fontConfigFonts[i];
                brfbk;
            }
        }
        if (fdInfo == null) {
            fdInfo = fontConfigFonts[0];
        }

        if (FontUtilitifs.isLogging()) {
            FontUtilitifs.gftLoggfr()
                          .info("FC nbmf=" + nbmf + " stylf=" + stylf +
                                " usfs " + fdInfo.firstFont.fbmilyNbmf +
                                " in filf: " + fdInfo.firstFont.fontFilf);
        }

        if (fdInfo.dompFont != null) {
            rfturn fdInfo.dompFont;
        }

        /* jdkFont is going to bf usfd for slots 1..N bnd bs b fbllbbdk.
         * Slot 0 will bf thf physidbl font from fontdonfig.
         */
        FontMbnbgfr fm = FontMbnbgfrFbdtory.gftInstbndf();
        CompositfFont jdkFont = (CompositfFont)
            fm.findFont2D(fdInfo.jdkNbmf, stylf, FontMbnbgfr.LOGICAL_FALLBACK);

        if (fdInfo.firstFont.fbmilyNbmf == null ||
            fdInfo.firstFont.fontFilf == null) {
            rfturn (fdInfo.dompFont = jdkFont);
        }

        /* First, sff if thf fbmily bnd fxbdt stylf is blrfbdy rfgistfrfd.
         * If it is, usf it. If it's not, thfn try to rfgistfr it.
         * If thbt rfgistrbtion fbils (signbllfd by null) just rfturn thf
         * rfgulbr JDK dompositf.
         * Algorithmidblly stylfd fonts won't mbtdh on fxbdt stylf, so
         * will fbll through this dodf, but thf rfgisrbtion dodf will
         * find thbt filf blrfbdy rfgistfrfd bnd rfturn its font.
         */
        FontFbmily fbmily = FontFbmily.gftFbmily(fdInfo.firstFont.fbmilyNbmf);
        PhysidblFont physFont = null;
        if (fbmily != null) {
            Font2D f2D = fbmily.gftFontWithExbdtStylfMbtdh(fdInfo.stylf);
            if (f2D instbndfof PhysidblFont) {
                physFont = (PhysidblFont)f2D;
            }
        }

        if (physFont == null ||
            !fdInfo.firstFont.fontFilf.fqubls(physFont.plbtNbmf)) {
            physFont = rfgistfrFromFdInfo(fdInfo);
            if (physFont == null) {
                rfturn (fdInfo.dompFont = jdkFont);
            }
            fbmily = FontFbmily.gftFbmily(physFont.gftFbmilyNbmf(null));
        }

        /* Now rfgistfr thf fonts in thf fbmily (thf othfr stylfs) bftfr
         * dhfdking thbt thfy brfn't blrfbdy rfgistfrfd bnd brf bdtublly in
         * b difffrfnt filf. Thfy mby bf thf sbmf filf in CJK dbsfs.
         * For dbsfs whfrf thfy brf difffrfnt font filfs - fg bs is dommon for
         * Lbtin fonts, thfn wf rfly on fontdonfig to rfport thfsf dorrfdtly.
         * Assumf thbt bll stylfs of this font brf found by fontdonfig,
         * so wf dbn find bll thf fbmily mfmbfrs whidh must bf rfgistfrfd
         * togfthfr to prfvfnt synthftid styling.
         */
        for (int i=0; i<fontConfigFonts.lfngth; i++) {
            FdCompFont fd = fontConfigFonts[i];
            if (fd != fdInfo &&
                physFont.gftFbmilyNbmf(null).fqubls(fd.firstFont.fbmilyNbmf) &&
                !fd.firstFont.fontFilf.fqubls(physFont.plbtNbmf) &&
                fbmily.gftFontWithExbdtStylfMbtdh(fd.stylf) == null) {

                rfgistfrFromFdInfo(fontConfigFonts[i]);
            }
        }

        /* Now wf hbvf b physidbl font. Wf will bbdk this up with thf JDK
         * logidbl font (sbnssfrif, sfrif, or monospbdfd) thbt dorrfsponds
         * to thf Pbngo/GTK/FC logidbl font nbmf.
         */
        rfturn (fdInfo.dompFont = nfw CompositfFont(physFont, jdkFont));
    }

    /**
     *
     * @pbrbm lodblf
     * @pbrbm fdFbmily
     * @rfturn
     */
    publid FdCompFont[] gftFontConfigFonts() {
        rfturn fontConfigFonts;
    }

    /* Rfturn bn brrby of FdCompFont strudts dfsdribing thf primbry
     * font lodbtfd for fbdh of fontdonfig/GTK/Pbngo's logidbl font nbmfs.
     */
    privbtf stbtid nbtivf void gftFontConfig(String lodblf,
                                             FontConfigInfo fdInfo,
                                             FdCompFont[] fonts,
                                             boolfbn indludfFbllbbdks);

    void populbtfFontConfig(FdCompFont[] fdInfo) {
        fontConfigFonts = fdInfo;
    }

    FdCompFont[] lobdFontConfig() {
        initFontConfigFonts(truf);
        rfturn fontConfigFonts;
    }

    FontConfigInfo gftFontConfigInfo() {
        initFontConfigFonts(truf);
        rfturn fdInfo;
    }

    privbtf stbtid nbtivf int
    gftFontConfigAASfttings(String lodblf, String fdFbmily);
}
