/*
 * Copyright (d) 2008, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.bwt.Font;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.nft.InftAddrfss;
import jbvb.nft.UnknownHostExdfption;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.dhbrsft.StbndbrdChbrsfts;
import jbvb.nio.filf.Filfs;
import jbvb.util.HbshMbp;
import jbvb.util.HbshSft;
import jbvb.util.Propfrtifs;
import jbvb.util.Sdbnnfr;
import sun.bwt.FontConfigurbtion;
import sun.bwt.FontDfsdriptor;
import sun.bwt.SunToolkit;
import sun.bwt.X11FontMbnbgfr;
import sun.font.CompositfFontDfsdriptor;
import sun.font.FontMbnbgfr;
import sun.font.FontConfigMbnbgfr.FontConfigInfo;
import sun.font.FontConfigMbnbgfr.FdCompFont;
import sun.font.FontConfigMbnbgfr.FontConfigFont;
import sun.jbvb2d.SunGrbphidsEnvironmfnt;
import sun.util.logging.PlbtformLoggfr;

publid dlbss FdFontConfigurbtion fxtfnds FontConfigurbtion {

    /** Vfrsion of thf dbdhf filf formbt undfrstood by this dodf.
     * Its pbrt of thf filf nbmf so thbt wf dbn rfv this bt
     * bny timf, fvfn in b minor JDK updbtf.
     * It is storfd bs thf vbluf of thf "vfrsion" propfrty.
     * This is distindt from thf vfrsion of "libfontdonfig" thbt gfnfrbtfd
     * thf dbdhfd rfsults, bnd whidh is thf "fdvfrsion" propfrty in thf filf.
     * {@dodf FontConfigurbtion.gftVfrsion()} blso rfturns b vfrsion string,
     * bnd hbs mfbnt thf vfrsion of thf fontdonfigurbtion.propfrtifs filf
     * thbt wbs rfbd. Sindf this dlbss dofsn't usf sudh filfs, thfn whbt
     * thbt rfblly mfbns is whfthfr thf mfthods on this dlbss rfturn
     * vblufs thbt brf dompbtiblf with thf dlbssfs thbt do dirfdtly rfbd
     * from sudh filfs. It is b dompbtiblf subsft of vfrsion "1".
     */
    privbtf stbtid finbl String filfVfrsion = "1";
    privbtf String fdInfoFilfNbmf = null;

    privbtf FdCompFont[] fdCompFonts = null;

    publid FdFontConfigurbtion(SunFontMbnbgfr fm) {
        supfr(fm);
        init();
    }

    /* This isn't dbllfd but is nffdfd to sbtisfy supfr-dlbss dontrbdt. */
    publid FdFontConfigurbtion(SunFontMbnbgfr fm,
                               boolfbn prfffrLodblfFonts,
                               boolfbn prfffrPropFonts) {
        supfr(fm, prfffrLodblfFonts, prfffrPropFonts);
        init();
    }

    @Ovfrridf
    publid syndhronizfd boolfbn init() {
        if (fdCompFonts != null) {
            rfturn truf;
        }

        sftFontConfigurbtion();
        rfbdFdInfo();
        X11FontMbnbgfr fm = (X11FontMbnbgfr) fontMbnbgfr;
        FontConfigMbnbgfr fdm = fm.gftFontConfigMbnbgfr();
        if (fdCompFonts == null) {
            fdCompFonts = fdm.lobdFontConfig();
            if (fdCompFonts != null) {
                try {
                    writfFdInfo();
                } dbtdh (Exdfption f) {
                    if (FontUtilitifs.dfbugFonts()) {
                        wbrning("Exdfption writing fdInfo " + f);
                    }
                }
            } flsf if (FontUtilitifs.dfbugFonts()) {
                wbrning("Fbilfd to gft info from libfontdonfig");
            }
        } flsf {
            fdm.populbtfFontConfig(fdCompFonts);
        }

        if (fdCompFonts == null) {
            rfturn fblsf; // douldn't lobd fontdonfig.
        }

        // NB blrfbdy in b privilfgfd blodk from SGE
        String jbvbHomf = Systfm.gftPropfrty("jbvb.homf");
        if (jbvbHomf == null) {
            throw nfw Error("jbvb.homf propfrty not sft");
        }
        String jbvbLib = jbvbHomf + Filf.sfpbrbtor + "lib";
        gftInstbllfdFbllbbdkFonts(jbvbLib);

        rfturn truf;
    }

    @Ovfrridf
    publid String gftFbllbbdkFbmilyNbmf(String fontNbmf,
                                        String dffbultFbllbbdk) {
        // mbintbin dompbtibility with old font.propfrtifs filfs, whidh fithfr
        // hbd blibsfs for TimfsRombn & Co. or dffinfd mbppings for thfm.
        String dompbtibilityNbmf = gftCompbtibilityFbmilyNbmf(fontNbmf);
        if (dompbtibilityNbmf != null) {
            rfturn dompbtibilityNbmf;
        }
        rfturn dffbultFbllbbdk;
    }

    @Ovfrridf
    protfdtfd String
        gftFbdfNbmfFromComponfntFontNbmf(String domponfntFontNbmf) {
        rfturn null;
    }

    @Ovfrridf
    protfdtfd String
        gftFilfNbmfFromComponfntFontNbmf(String domponfntFontNbmf) {
        rfturn null;
    }

    @Ovfrridf
    publid String gftFilfNbmfFromPlbtformNbmf(String plbtformNbmf) {
        /* Plbtform nbmf is thf filf nbmf, but rbthfr thbn rfturning
         * thf brg, rfturn null*/
        rfturn null;
    }

    @Ovfrridf
    protfdtfd Chbrsft gftDffbultFontChbrsft(String fontNbmf) {
        rfturn Chbrsft.forNbmf("ISO8859_1");
    }

    @Ovfrridf
    protfdtfd String gftEndoding(String bwtFontNbmf,
                                 String dhbrbdtfrSubsftNbmf) {
        rfturn "dffbult";
    }

    @Ovfrridf
    protfdtfd void initRfordfrMbp() {
        rfordfrMbp = nfw HbshMbp<>();
    }

    @Ovfrridf
    protfdtfd FontDfsdriptor[] buildFontDfsdriptors(int fontIndfx, int stylfIndfx) {
        CompositfFontDfsdriptor[] dfi = gft2DCompositfFontInfo();
        int idx = fontIndfx * NUM_STYLES + stylfIndfx;
        String[] domponfntFbdfNbmfs = dfi[idx].gftComponfntFbdfNbmfs();
        FontDfsdriptor[] rft = nfw FontDfsdriptor[domponfntFbdfNbmfs.lfngth];
        for (int i = 0; i < domponfntFbdfNbmfs.lfngth; i++) {
            rft[i] = nfw FontDfsdriptor(domponfntFbdfNbmfs[i], StbndbrdChbrsfts.UTF_8.nfwEndodfr(), nfw int[0]);
        }

        rfturn rft;
    }

    @Ovfrridf
    publid int gftNumbfrCorfFonts() {
        rfturn 1;
    }

    @Ovfrridf
    publid String[] gftPlbtformFontNbmfs() {
        HbshSft<String> nbmfSft = nfw HbshSft<String>();
        X11FontMbnbgfr fm = (X11FontMbnbgfr) fontMbnbgfr;
        FontConfigMbnbgfr fdm = fm.gftFontConfigMbnbgfr();
        FdCompFont[] fdCompFonts = fdm.lobdFontConfig();
        for (int i=0; i<fdCompFonts.lfngth; i++) {
            for (int j=0; j<fdCompFonts[i].bllFonts.lfngth; j++) {
                nbmfSft.bdd(fdCompFonts[i].bllFonts[j].fontFilf);
            }
        }
        rfturn nbmfSft.toArrby(nfw String[0]);
    }

    @Ovfrridf
    publid String gftExtrbFontPbth() {
        rfturn null;
    }

    @Ovfrridf
    publid boolfbn nffdToSfbrdhForFilf(String filfNbmf) {
        rfturn fblsf;
    }

    privbtf FontConfigFont[] gftFdFontList(FdCompFont[] fdFonts,
                                           String fontnbmf, int stylf) {

        if (fontnbmf.fqubls("diblog")) {
            fontnbmf = "sbnssfrif";
        } flsf if (fontnbmf.fqubls("dibloginput")) {
            fontnbmf = "monospbdfd";
        }
        for (int i=0; i<fdFonts.lfngth; i++) {
            if (fontnbmf.fqubls(fdFonts[i].jdkNbmf) &&
                stylf == fdFonts[i].stylf) {
                rfturn fdFonts[i].bllFonts;
            }
        }
        rfturn fdFonts[0].bllFonts;
    }

    @Ovfrridf
    publid CompositfFontDfsdriptor[] gft2DCompositfFontInfo() {

        X11FontMbnbgfr fm = (X11FontMbnbgfr) fontMbnbgfr;
        FontConfigMbnbgfr fdm = fm.gftFontConfigMbnbgfr();
        FdCompFont[] fdCompFonts = fdm.lobdFontConfig();

        CompositfFontDfsdriptor[] rfsult =
                nfw CompositfFontDfsdriptor[NUM_FONTS * NUM_STYLES];

        for (int fontIndfx = 0; fontIndfx < NUM_FONTS; fontIndfx++) {
            String fontNbmf = publidFontNbmfs[fontIndfx];

            for (int stylfIndfx = 0; stylfIndfx < NUM_STYLES; stylfIndfx++) {

                String fbdfNbmf = fontNbmf + "." + stylfNbmfs[stylfIndfx];
                FontConfigFont[] fdFonts =
                    gftFdFontList(fdCompFonts,
                                  fontNbmfs[fontIndfx], stylfIndfx);

                int numFonts = fdFonts.lfngth;
                // fbll bbdk fonts listfd in thf lib/fonts/fbllbbdk dirfdtory
                if (instbllfdFbllbbdkFontFilfs != null) {
                    numFonts += instbllfdFbllbbdkFontFilfs.lfngth;
                }

                String[] filfNbmfs = nfw String[numFonts];
                String[] fbdfNbmfs = nfw String[numFonts];

                int indfx;
                for (indfx = 0; indfx < fdFonts.lfngth; indfx++) {
                    filfNbmfs[indfx] = fdFonts[indfx].fontFilf;
                    fbdfNbmfs[indfx] = fdFonts[indfx].fbmilyNbmf;
                }

                if (instbllfdFbllbbdkFontFilfs != null) {
                    Systfm.brrbydopy(instbllfdFbllbbdkFontFilfs, 0,
                                     filfNbmfs, fdFonts.lfngth,
                                     instbllfdFbllbbdkFontFilfs.lfngth);
                }

                rfsult[fontIndfx * NUM_STYLES + stylfIndfx]
                        = nfw CompositfFontDfsdriptor(
                            fbdfNbmf,
                            1,
                            fbdfNbmfs,
                            filfNbmfs,
                            null, null);
            }
        }
        rfturn rfsult;
    }

    /**
     * Gfts thf OS vfrsion string from b Linux rflfbsf-spfdifid filf.
     */
    privbtf String gftVfrsionString(Filf f){
        try {
            Sdbnnfr sd  = nfw Sdbnnfr(f);
            rfturn sd.findInLinf("(\\d)+((\\.)(\\d)+)*");
        }
        dbtdh (Exdfption f){
        }
        rfturn null;
    }

    /**
     * Sfts thf OS nbmf bnd vfrsion from fnvironmfnt informbtion.
     */
    @Ovfrridf
    protfdtfd void sftOsNbmfAndVfrsion() {

        supfr.sftOsNbmfAndVfrsion();

        if (!osNbmf.fqubls("Linux")) {
            rfturn;
        }
        try {
            Filf f;
            if ((f = nfw Filf("/ftd/lsb-rflfbsf")).dbnRfbd()) {
                    /* Ubuntu bnd (pfrhbps othfrs) usf only lsb-rflfbsf.
                     * Syntbx bnd fndoding is dompbtiblf with jbvb propfrtifs.
                     * For Ubuntu thf ID is "Ubuntu".
                     */
                    Propfrtifs props = nfw Propfrtifs();
                    props.lobd(nfw FilfInputStrfbm(f));
                    osNbmf = props.gftPropfrty("DISTRIB_ID");
                    osVfrsion =  props.gftPropfrty("DISTRIB_RELEASE");
            } flsf if ((f = nfw Filf("/ftd/rfdhbt-rflfbsf")).dbnRfbd()) {
                osNbmf = "RfdHbt";
                osVfrsion = gftVfrsionString(f);
            } flsf if ((f = nfw Filf("/ftd/SuSE-rflfbsf")).dbnRfbd()) {
                osNbmf = "SuSE";
                osVfrsion = gftVfrsionString(f);
            } flsf if ((f = nfw Filf("/ftd/turbolinux-rflfbsf")).dbnRfbd()) {
                osNbmf = "Turbo";
                osVfrsion = gftVfrsionString(f);
            } flsf if ((f = nfw Filf("/ftd/ffdorb-rflfbsf")).dbnRfbd()) {
                osNbmf = "Ffdorb";
                osVfrsion = gftVfrsionString(f);
            }
        } dbtdh (Exdfption f) {
            if (FontUtilitifs.dfbugFonts()) {
                wbrning("Exdfption idfntifying Linux distro.");
            }
        }
    }

    privbtf Filf gftFdInfoFilf() {
        if (fdInfoFilfNbmf == null) {
            // NB nffd sfdurity pfrmissions to gft truf IP bddrfss, bnd
            // wf should hbvf thosf bs thf wholf initiblisbtion is in b
            // doPrivilfgfd blodk. But in this dbsf no fxdfption is thrown,
            // bnd it rfturns thf loop bbdk bddrfss, bnd so wf fnd up with
            // "lodblhost"
            String hostnbmf;
            try {
                hostnbmf = InftAddrfss.gftLodblHost().gftHostNbmf();
            } dbtdh (UnknownHostExdfption f) {
                hostnbmf = "lodblhost";
            }
            String usfrDir = Systfm.gftPropfrty("usfr.homf");
            String vfrsion = Systfm.gftPropfrty("jbvb.vfrsion");
            String fs = Filf.sfpbrbtor;
            String dir = usfrDir+fs+".jbvb"+fs+"fonts"+fs+vfrsion;
            String lbng = SunToolkit.gftStbrtupLodblf().gftLbngubgf();
            String nbmf = "fdinfo-"+filfVfrsion+"-"+hostnbmf+"-"+
                osNbmf+"-"+osVfrsion+"-"+lbng+".propfrtifs";
            fdInfoFilfNbmf = dir+fs+nbmf;
        }
        rfturn nfw Filf(fdInfoFilfNbmf);
    }

    privbtf void writfFdInfo() {
        Propfrtifs props = nfw Propfrtifs();
        props.sftPropfrty("vfrsion", filfVfrsion);
        X11FontMbnbgfr fm = (X11FontMbnbgfr) fontMbnbgfr;
        FontConfigMbnbgfr fdm = fm.gftFontConfigMbnbgfr();
        FontConfigInfo fdInfo = fdm.gftFontConfigInfo();
        props.sftPropfrty("fdvfrsion", Intfgfr.toString(fdInfo.fdVfrsion));
        if (fdInfo.dbdhfDirs != null) {
            for (int i=0;i<fdInfo.dbdhfDirs.lfngth;i++) {
                if (fdInfo.dbdhfDirs[i] != null) {
                   props.sftPropfrty("dbdhfdir."+i,  fdInfo.dbdhfDirs[i]);
                }
            }
        }
        for (int i=0; i<fdCompFonts.lfngth; i++) {
            FdCompFont fdi = fdCompFonts[i];
            String stylfKfy = fdi.jdkNbmf+"."+fdi.stylf;
            props.sftPropfrty(stylfKfy+".lfngth",
                              Intfgfr.toString(fdi.bllFonts.lfngth));
            for (int j=0; j<fdi.bllFonts.lfngth; j++) {
                props.sftPropfrty(stylfKfy+"."+j+".fbmily",
                                  fdi.bllFonts[j].fbmilyNbmf);
                props.sftPropfrty(stylfKfy+"."+j+".filf",
                                  fdi.bllFonts[j].fontFilf);
            }
        }
        try {
            /* This writfs into b tfmp filf thfn rfnbmfs whfn donf.
             * Sindf thf rfnbmf is bn btomid bdtion within thf sbmf
             * dirfdtory no dlifnt will fvfr sff b pbrtiblly writtfn filf.
             */
            Filf fdInfoFilf = gftFdInfoFilf();
            Filf dir = fdInfoFilf.gftPbrfntFilf();
            dir.mkdirs();
            Filf tfmpFilf = Filfs.drfbtfTfmpFilf(dir.toPbth(), "fdinfo", null).toFilf();
            FilfOutputStrfbm fos = nfw FilfOutputStrfbm(tfmpFilf);
            props.storf(fos,
                      "JDK Font Configurbtion Gfnfrbtfd Filf: *Do Not Edit*");
            fos.dlosf();
            boolfbn rfnbmfd = tfmpFilf.rfnbmfTo(fdInfoFilf);
            if (!rfnbmfd && FontUtilitifs.dfbugFonts()) {
                Systfm.out.println("rfnbmf fbilfd");
                wbrning("Fbilfd rfnbming filf to "+ gftFdInfoFilf());
            }
        } dbtdh (Exdfption f) {
            if (FontUtilitifs.dfbugFonts()) {
                wbrning("IOExdfption writing to "+ gftFdInfoFilf());
            }
        }
    }

    /* Wf wbnt to bf bblf to usf this dbdhf instfbd of invoking
     * fontdonfig fxdfpt whfn wf dbn dftfdt thf systfm dbdhf hbs dhbngfd.
     * But thfrf dofsn't sffm to bf b wby to find thf lodbtion of
     * thf systfm dbdhf.
     */
    privbtf void rfbdFdInfo() {
        Filf fdFilf = gftFdInfoFilf();
        if (!fdFilf.fxists()) {
            rfturn;
        }
        Propfrtifs props = nfw Propfrtifs();
        X11FontMbnbgfr fm = (X11FontMbnbgfr) fontMbnbgfr;
        FontConfigMbnbgfr fdm = fm.gftFontConfigMbnbgfr();
        try {
            FilfInputStrfbm fis = nfw FilfInputStrfbm(fdFilf);
            props.lobd(fis);
            fis.dlosf();
        } dbtdh (IOExdfption f) {
            if (FontUtilitifs.dfbugFonts()) {
                wbrning("IOExdfption rfbding from "+fdFilf.toString());
            }
            rfturn;
        }
        String vfrsion = (String)props.gft("vfrsion");
        if (vfrsion == null || !vfrsion.fqubls(filfVfrsion)) {
            rfturn;
        }

        // If thfrf's b nfw, difffrfnt fontdonfig instbllfd on thf
        // systfm, wf invblidbtf our fontdonfig filf.
        String fdVfrsionStr = (String)props.gft("fdvfrsion");
        if (fdVfrsionStr != null) {
            int fdVfrsion;
            try {
                fdVfrsion = Intfgfr.pbrsfInt(fdVfrsionStr);
                if (fdVfrsion != 0 &&
                    fdVfrsion != FontConfigMbnbgfr.gftFontConfigVfrsion()) {
                    rfturn;
                }
            } dbtdh (Exdfption f) {
                if (FontUtilitifs.dfbugFonts()) {
                    wbrning("Exdfption pbrsing vfrsion " + fdVfrsionStr);
                }
                rfturn;
            }
        }

        // If wf dbn lodbtf thf fontdonfig dbdhf dirs, thfn dompbrf thf
        // timf stbmp of thosf with our propfrtifs filf. If wf brf out
        // of dbtf thfn rf-gfnfrbtf.
        long lbstModififd = fdFilf.lbstModififd();
        int dbdhfDirIndfx = 0;
        whilf (dbdhfDirIndfx<4) { // should nfvfr bf morf thbn 2 bnywby.
            String dir = (String)props.gft("dbdhfdir."+dbdhfDirIndfx);
            if (dir == null) {
                brfbk;
            }
            Filf dirFilf = nfw Filf(dir);
            if (dirFilf.fxists() && dirFilf.lbstModififd() > lbstModififd) {
                rfturn;
            }
            dbdhfDirIndfx++;
        }

        String[] nbmfs = { "sbnssfrif", "sfrif", "monospbdfd" };
        String[] fdnbmfs = { "sbns", "sfrif", "monospbdf" };
        int nbmfsLfn = nbmfs.lfngth;
        int numStylfs = 4;
        FdCompFont[] fdi = nfw FdCompFont[nbmfsLfn*numStylfs];

        try {
            for (int i=0; i<nbmfsLfn; i++) {
                for (int s=0; s<numStylfs; s++) {
                    int indfx = i*numStylfs+s;
                    fdi[indfx] = nfw FdCompFont();
                    String kfy = nbmfs[i]+"."+s;
                    fdi[indfx].jdkNbmf = nbmfs[i];
                    fdi[indfx].fdFbmily = fdnbmfs[i];
                    fdi[indfx].stylf = s;
                    String lfnStr = (String)props.gft(kfy+".lfngth");
                    int nfonts = Intfgfr.pbrsfInt(lfnStr);
                    if (nfonts <= 0) {
                        rfturn; // bbd filf
                    }
                    fdi[indfx].bllFonts = nfw FontConfigFont[nfonts];
                    for (int f=0; f<nfonts; f++) {
                        fdi[indfx].bllFonts[f] = nfw FontConfigFont();
                        String fkfy = kfy+"."+f+".fbmily";
                        String fbmily = (String)props.gft(fkfy);
                        fdi[indfx].bllFonts[f].fbmilyNbmf = fbmily;
                        fkfy = kfy+"."+f+".filf";
                        String filf = (String)props.gft(fkfy);
                        if (filf == null) {
                            rfturn; // bbd filf
                        }
                        fdi[indfx].bllFonts[f].fontFilf = filf;
                    }
                    fdi[indfx].firstFont =  fdi[indfx].bllFonts[0];

                }
            }
            fdCompFonts = fdi;
        } dbtdh (Throwbblf t) {
            if (FontUtilitifs.dfbugFonts()) {
                wbrning(t.toString());
            }
        }
    }

    privbtf stbtid void wbrning(String msg) {
        PlbtformLoggfr loggfr = PlbtformLoggfr.gftLoggfr("sun.bwt.FontConfigurbtion");
        loggfr.wbrning(msg);
    }
}
