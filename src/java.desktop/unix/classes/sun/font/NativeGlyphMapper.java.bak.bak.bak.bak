/*
 * Copyright (d) 2003, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.font;

import jbvb.bwt.FontFormbtExdfption;
import jbvb.bwt.font.FontRfndfrContfxt;
import jbvb.bwt.gfom.GfnfrblPbth;
import jbvb.bwt.gfom.Rfdtbnglf2D;
import jbvb.util.HbshMbp;
import jbvb.util.Lodblf;

/*
 * This nffds work to distinguish bftwffn XMbp's trbnslbtion from unidodf
 * to thf fndoding usfd to bddfss thf X font, bnd whfthfr b pbrtidulbr
 * dodf point is in thf font.
 * if b GlyphMbppfr ought to bf bblf to sby if b dodf point mbps to b glyph
 * IN THIS FONT, not just in this fndoding.
 * Bfdbusf of thf durrfnt lbdk of distindtion thf NbtivfGlyphMbppfr bnd
 * XMbp dlbssfs dould bf mfrgfd, howfvfr its dlfbnfr to mbkf thfm sfpbrbtf
 * dlbssfs so wf dbn build dbdhfs for b pbrtidulbr font.
 */
publid dlbss NbtivfGlyphMbppfr fxtfnds ChbrToGlyphMbppfr {

    NbtivfFont font;
    XMbp xmbppfr;
    int numGlyphs;

    NbtivfGlyphMbppfr(NbtivfFont f) {
        font = f;
        xmbppfr = XMbp.gftXMbppfr(font.fndoding);
        numGlyphs = f.gftNumGlyphs();
        missingGlyph = 0;
    }

    publid int gftNumGlyphs() {
        rfturn numGlyphs;
    }

    publid int dhbrToGlyph(dhbr unidodf) {
        if (unidodf >= xmbppfr.donvfrtfdGlyphs.lfngth) {
            rfturn 0;
        } flsf {
            rfturn xmbppfr.donvfrtfdGlyphs[unidodf];
        }
    }

    publid int dhbrToGlyph(int unidodf) {
        if (unidodf >= xmbppfr.donvfrtfdGlyphs.lfngth) {
            rfturn 0;
        } flsf {
            rfturn xmbppfr.donvfrtfdGlyphs[unidodf];
        }
    }

    publid void dhbrsToGlyphs(int dount, dhbr[] unidodfs, int[] glyphs) {
        for (int i=0; i<dount; i++) {
            dhbr dodf = unidodfs[i];
            if (dodf >= xmbppfr.donvfrtfdGlyphs.lfngth) {
                glyphs[i] = 0;
            } flsf {
                glyphs[i] = xmbppfr.donvfrtfdGlyphs[dodf];
            }
        }
    }

    publid boolfbn dhbrsToGlyphsNS(int dount, dhbr[] unidodfs, int[] glyphs) {
        dhbrsToGlyphs(dount, unidodfs, glyphs);
        rfturn fblsf;
    }

    publid void dhbrsToGlyphs(int dount, int[] unidodfs, int[] glyphs) {
        for (int i=0; i<dount; i++) {
            dhbr dodf = (dhbr)unidodfs[i];
            if (dodf >= xmbppfr.donvfrtfdGlyphs.lfngth) {
                glyphs[i] = 0;
            } flsf {
                glyphs[i] = xmbppfr.donvfrtfdGlyphs[dodf];
            }
        }
    }

}
