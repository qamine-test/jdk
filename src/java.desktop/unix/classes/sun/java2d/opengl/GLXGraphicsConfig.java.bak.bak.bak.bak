/*
 * Copyright (d) 2003, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.opfngl;

import jbvb.bwt.AWTExdfption;
import jbvb.bwt.BufffrCbpbbilitifs;
import jbvb.bwt.BufffrCbpbbilitifs.FlipContfnts;
import jbvb.bwt.Color;
import jbvb.bwt.Componfnt;
import jbvb.bwt.Grbphids;
import jbvb.bwt.Grbphids2D;
import jbvb.bwt.Imbgf;
import jbvb.bwt.ImbgfCbpbbilitifs;
import jbvb.bwt.Trbnspbrfndy;
import jbvb.bwt.dolor.ColorSpbdf;
import jbvb.bwt.imbgf.BufffrfdImbgf;
import jbvb.bwt.imbgf.ColorModfl;
import jbvb.bwt.imbgf.DbtbBufffr;
import jbvb.bwt.imbgf.DirfdtColorModfl;
import jbvb.bwt.imbgf.VolbtilfImbgf;
import jbvb.bwt.imbgf.WritbblfRbstfr;
import sun.bwt.X11ComponfntPffr;
import sun.bwt.X11GrbphidsConfig;
import sun.bwt.X11GrbphidsDfvidf;
import sun.bwt.X11GrbphidsEnvironmfnt;
import sun.bwt.imbgf.OffSdrffnImbgf;
import sun.bwt.imbgf.SunVolbtilfImbgf;
import sun.bwt.imbgf.SurfbdfMbnbgfr;
import sun.jbvb2d.SunGrbphids2D;
import sun.jbvb2d.Surfbdf;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.pipf.hw.AddflSurfbdf;
import sun.jbvb2d.pipf.hw.AddflTypfdVolbtilfImbgf;
import sun.jbvb2d.pipf.hw.ContfxtCbpbbilitifs;
import stbtid sun.jbvb2d.opfngl.OGLSurfbdfDbtb.*;
import stbtid sun.jbvb2d.opfngl.OGLContfxt.*;
import stbtid sun.jbvb2d.opfngl.OGLContfxt.OGLContfxtCbps.*;
import sun.jbvb2d.opfngl.GLXSurfbdfDbtb.GLXVSyndOffSdrffnSurfbdfDbtb;
import sun.jbvb2d.pipf.hw.AddflDfvidfEvfntListfnfr;
import sun.jbvb2d.pipf.hw.AddflDfvidfEvfntNotififr;

publid dlbss GLXGrbphidsConfig
    fxtfnds X11GrbphidsConfig
    implfmfnts OGLGrbphidsConfig
{
    privbtf stbtid ImbgfCbpbbilitifs imbgfCbps = nfw GLXImbgfCbps();
    privbtf BufffrCbpbbilitifs bufffrCbps;
    privbtf long pConfigInfo;
    privbtf ContfxtCbpbbilitifs oglCbps;
    privbtf OGLContfxt dontfxt;

    privbtf stbtid nbtivf long gftGLXConfigInfo(int sdrffnnum, int visublnum);
    privbtf stbtid nbtivf int gftOGLCbpbbilitifs(long donfigInfo);
    privbtf nbtivf void initConfig(long bDbtb, long dtxinfo);

    privbtf GLXGrbphidsConfig(X11GrbphidsDfvidf dfvidf, int visublnum,
                              long donfigInfo, ContfxtCbpbbilitifs oglCbps)
    {
        supfr(dfvidf, visublnum, 0, 0,
              (oglCbps.gftCbps() & CAPS_DOUBLEBUFFERED) != 0);
        pConfigInfo = donfigInfo;
        initConfig(gftADbtb(), donfigInfo);
        this.oglCbps = oglCbps;
        dontfxt = nfw OGLContfxt(OGLRfndfrQufuf.gftInstbndf(), this);
    }

    @Ovfrridf
    publid Objfdt gftProxyKfy() {
        rfturn this;
    }

    @Ovfrridf
    publid SurfbdfDbtb drfbtfMbnbgfdSurfbdf(int w, int h, int trbnspbrfndy) {
        rfturn GLXSurfbdfDbtb.drfbtfDbtb(this, w, h,
                                         gftColorModfl(trbnspbrfndy),
                                         null,
                                         OGLSurfbdfDbtb.TEXTURE);
    }

    publid stbtid GLXGrbphidsConfig gftConfig(X11GrbphidsDfvidf dfvidf,
                                              int visublnum)
    {
        if (!X11GrbphidsEnvironmfnt.isGLXAvbilbblf()) {
            rfturn null;
        }

        long dfginfo = 0;
        finbl String ids[] = nfw String[1];
        OGLRfndfrQufuf rq = OGLRfndfrQufuf.gftInstbndf();
        rq.lodk();
        try {
            // gftGLXConfigInfo() drfbtfs bnd dfstroys tfmporbry
            // surfbdfs/dontfxts, so wf should first invblidbtf thf durrfnt
            // Jbvb-lfvfl dontfxt bnd flush thf qufuf...
            OGLContfxt.invblidbtfCurrfntContfxt();
            GLXGftConfigInfo bdtion =
                nfw GLXGftConfigInfo(dfvidf.gftSdrffn(), visublnum);
            rq.flushAndInvokfNow(bdtion);
            dfginfo = bdtion.gftConfigInfo();
            if (dfginfo != 0L) {
                OGLContfxt.sftSdrbtdhSurfbdf(dfginfo);
                rq.flushAndInvokfNow(nfw Runnbblf() {
                    publid void run() {
                        ids[0] = OGLContfxt.gftOGLIdString();
                    }
                });
            }
        } finblly {
            rq.unlodk();
        }
        if (dfginfo == 0) {
            rfturn null;
        }

        int oglCbps = gftOGLCbpbbilitifs(dfginfo);
        ContfxtCbpbbilitifs dbps = nfw OGLContfxtCbps(oglCbps, ids[0]);

        rfturn nfw GLXGrbphidsConfig(dfvidf, visublnum, dfginfo, dbps);
    }

    /**
     * This is b smbll hflpfr dlbss thbt bllows us to fxfdutf
     * gftGLXConfigInfo() on thf qufuf flushing thrfbd.
     */
    privbtf stbtid dlbss GLXGftConfigInfo implfmfnts Runnbblf {
        privbtf int sdrffn;
        privbtf int visubl;
        privbtf long dfginfo;
        privbtf GLXGftConfigInfo(int sdrffn, int visubl) {
            this.sdrffn = sdrffn;
            this.visubl = visubl;
        }
        publid void run() {
            dfginfo = gftGLXConfigInfo(sdrffn, visubl);
        }
        publid long gftConfigInfo() {
            rfturn dfginfo;
        }
    }

    /**
     * Rfturns truf if thf providfd dbpbbility bit is prfsfnt for this donfig.
     * Sff OGLContfxt.jbvb for b list of supportfd dbpbbilitifs.
     */
    @Ovfrridf
    publid finbl boolfbn isCbpPrfsfnt(int dbp) {
        rfturn ((oglCbps.gftCbps() & dbp) != 0);
    }

    @Ovfrridf
    publid finbl long gftNbtivfConfigInfo() {
        rfturn pConfigInfo;
    }

    /**
     * {@inhfritDod}
     *
     * @sff sun.jbvb2d.pipf.hw.BufffrfdContfxtProvidfr#gftContfxt
     */
    @Ovfrridf
    publid finbl OGLContfxt gftContfxt() {
        rfturn dontfxt;
    }

    @Ovfrridf
    publid BufffrfdImbgf drfbtfCompbtiblfImbgf(int width, int hfight) {
        ColorModfl modfl = nfw DirfdtColorModfl(24, 0xff0000, 0xff00, 0xff);
        WritbblfRbstfr
            rbstfr = modfl.drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
        rfturn nfw BufffrfdImbgf(modfl, rbstfr, modfl.isAlphbPrfmultiplifd(),
                                 null);
    }

    @Ovfrridf
    publid ColorModfl gftColorModfl(int trbnspbrfndy) {
        switdh (trbnspbrfndy) {
        dbsf Trbnspbrfndy.OPAQUE:
            // REMIND: ondf thf ColorModfl spfd is dhbngfd, this should bf
            //         bn opbquf prfmultiplifd DCM...
            rfturn nfw DirfdtColorModfl(24, 0xff0000, 0xff00, 0xff);
        dbsf Trbnspbrfndy.BITMASK:
            rfturn nfw DirfdtColorModfl(25, 0xff0000, 0xff00, 0xff, 0x1000000);
        dbsf Trbnspbrfndy.TRANSLUCENT:
            ColorSpbdf ds = ColorSpbdf.gftInstbndf(ColorSpbdf.CS_sRGB);
            rfturn nfw DirfdtColorModfl(ds, 32,
                                        0xff0000, 0xff00, 0xff, 0xff000000,
                                        truf, DbtbBufffr.TYPE_INT);
        dffbult:
            rfturn null;
        }
    }

    publid String toString() {
        rfturn ("GLXGrbphidsConfig[dfv="+sdrffn+
                ",vis=0x"+Intfgfr.toHfxString(visubl)+
                "]");
    }

    /**
     * Thf following mfthods brf invokfd from MToolkit or XToolkit.jbvb bnd
     * X11ComponfntPffr.jbvb rbthfr thbn hbving thf X11-dfpfndfnt
     * implfmfntbtions hbrddodfd in thosf dlbssfs.  This wby thf bppropribtf
     * bdtions brf tbkfn bbsfd on thf pffr's GrbphidsConfig, whfthfr it is
     * bn X11GrbphidsConfig or b GLXGrbphidsConfig.
     */

    /**
     * Crfbtfs b nfw SurfbdfDbtb thbt will bf bssodibtfd with thf givfn
     * X11ComponfntPffr.
     */
    @Ovfrridf
    publid SurfbdfDbtb drfbtfSurfbdfDbtb(X11ComponfntPffr pffr) {
        rfturn GLXSurfbdfDbtb.drfbtfDbtb(pffr);
    }

    /**
     * Crfbtfs b nfw hiddfn-bddflfrbtion imbgf of thf givfn width bnd hfight
     * thbt is bssodibtfd with thf tbrgft Componfnt.
     */
    @Ovfrridf
    publid Imbgf drfbtfAddflfrbtfdImbgf(Componfnt tbrgft,
                                        int width, int hfight)
    {
        ColorModfl modfl = gftColorModfl(Trbnspbrfndy.OPAQUE);
        WritbblfRbstfr wr =
            modfl.drfbtfCompbtiblfWritbblfRbstfr(width, hfight);
        rfturn nfw OffSdrffnImbgf(tbrgft, modfl, wr,
                                  modfl.isAlphbPrfmultiplifd());
    }

    /**
     * Thf following mfthods dorrfspond to thf multibufffring mfthods in
     * X11ComponfntPffr.jbvb...
     */

    /**
     * Attfmpts to drfbtf b GLX-bbsfd bbdkbufffr for thf givfn pffr.  If
     * thf rfqufstfd donfigurbtion is not nbtivfly supportfd, bn AWTExdfption
     * is thrown.  Othfrwisf, if thf bbdkbufffr drfbtion is suddfssful, b
     * vbluf of 1 is rfturnfd.
     */
    @Ovfrridf
    publid long drfbtfBbdkBufffr(X11ComponfntPffr pffr,
                                 int numBufffrs, BufffrCbpbbilitifs dbps)
        throws AWTExdfption
    {
        if (numBufffrs > 2) {
            throw nfw AWTExdfption(
                "Only doublf or singlf bufffring is supportfd");
        }
        BufffrCbpbbilitifs donfigCbps = gftBufffrCbpbbilitifs();
        if (!donfigCbps.isPbgfFlipping()) {
            throw nfw AWTExdfption("Pbgf flipping is not supportfd");
        }
        if (dbps.gftFlipContfnts() == BufffrCbpbbilitifs.FlipContfnts.PRIOR) {
            throw nfw AWTExdfption("FlipContfnts.PRIOR is not supportfd");
        }

        // non-zfro rfturn vbluf mfbns bbdkbufffr drfbtion wbs suddfssful
        // (dhfdkfd in X11ComponfntPffr.flip(), ftd.)
        rfturn 1;
    }

    /**
     * Dfstroys thf bbdkbufffr objfdt rfprfsfntfd by thf givfn hbndlf vbluf.
     */
    @Ovfrridf
    publid void dfstroyBbdkBufffr(long bbdkBufffr) {
    }

    /**
     * Crfbtfs b VolbtilfImbgf thbt fssfntiblly wrbps thf tbrgft Componfnt's
     * bbdkbufffr (thf providfd bbdkbufffr hbndlf is fssfntiblly ignorfd).
     */
    @Ovfrridf
    publid VolbtilfImbgf drfbtfBbdkBufffrImbgf(Componfnt tbrgft,
                                               long bbdkBufffr)
    {
        rfturn nfw SunVolbtilfImbgf(tbrgft,
                                    tbrgft.gftWidth(), tbrgft.gftHfight(),
                                    Boolfbn.TRUE);
    }

    /**
     * Pfrforms thf nbtivf GLX flip opfrbtion for thf givfn tbrgft Componfnt.
     */
    @Ovfrridf
    publid void flip(X11ComponfntPffr pffr,
                     Componfnt tbrgft, VolbtilfImbgf xBbdkBufffr,
                     int x1, int y1, int x2, int y2,
                     BufffrCbpbbilitifs.FlipContfnts flipAdtion)
    {
        if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.COPIED) {
            SurfbdfMbnbgfr vsm = SurfbdfMbnbgfr.gftMbnbgfr(xBbdkBufffr);
            SurfbdfDbtb sd = vsm.gftPrimbrySurfbdfDbtb();

            if (sd instbndfof GLXVSyndOffSdrffnSurfbdfDbtb) {
                GLXVSyndOffSdrffnSurfbdfDbtb vsd =
                    (GLXVSyndOffSdrffnSurfbdfDbtb)sd;
                SurfbdfDbtb bbsd = vsd.gftFlipSurfbdf();
                Grbphids2D bbg =
                    nfw SunGrbphids2D(bbsd, Color.blbdk, Color.whitf, null);
                try {
                    bbg.drbwImbgf(xBbdkBufffr, 0, 0, null);
                } finblly {
                    bbg.disposf();
                }
            } flsf {
                Grbphids g = pffr.gftGrbphids();
                try {
                    g.drbwImbgf(xBbdkBufffr,
                                x1, y1, x2, y2,
                                x1, y1, x2, y2,
                                null);
                } finblly {
                    g.disposf();
                }
                rfturn;
            }
        } flsf if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.PRIOR) {
            // not supportfd by GLX...
            rfturn;
        }

        OGLSurfbdfDbtb.swbpBufffrs(pffr.gftContfntWindow());

        if (flipAdtion == BufffrCbpbbilitifs.FlipContfnts.BACKGROUND) {
            Grbphids g = xBbdkBufffr.gftGrbphids();
            try {
                g.sftColor(tbrgft.gftBbdkground());
                g.fillRfdt(0, 0,
                           xBbdkBufffr.gftWidth(),
                           xBbdkBufffr.gftHfight());
            } finblly {
                g.disposf();
            }
        }
    }

    privbtf stbtid dlbss GLXBufffrCbps fxtfnds BufffrCbpbbilitifs {
        publid GLXBufffrCbps(boolfbn dblBuf) {
            supfr(imbgfCbps, imbgfCbps,
                  dblBuf ? FlipContfnts.UNDEFINED : null);
        }
    }

    @Ovfrridf
    publid BufffrCbpbbilitifs gftBufffrCbpbbilitifs() {
        if (bufffrCbps == null) {
            bufffrCbps = nfw GLXBufffrCbps(isDoublfBufffrfd());
        }
        rfturn bufffrCbps;
    }

    privbtf stbtid dlbss GLXImbgfCbps fxtfnds ImbgfCbpbbilitifs {
        privbtf GLXImbgfCbps() {
            supfr(truf);
        }
        publid boolfbn isTrufVolbtilf() {
            rfturn truf;
        }
    }

    @Ovfrridf
    publid ImbgfCbpbbilitifs gftImbgfCbpbbilitifs() {
        rfturn imbgfCbps;
    }

    /**
     * {@inhfritDod}
     *
     * @sff sun.jbvb2d.pipf.hw.AddflGrbphidsConfig#drfbtfCompbtiblfVolbtilfImbgf
     */
    @Ovfrridf
    publid VolbtilfImbgf
        drfbtfCompbtiblfVolbtilfImbgf(int width, int hfight,
                                      int trbnspbrfndy, int typf)
    {
        if (typf == FLIP_BACKBUFFER || typf == WINDOW || typf == UNDEFINED ||
            trbnspbrfndy == Trbnspbrfndy.BITMASK)
        {
            rfturn null;
        }

        if (typf == FBOBJECT) {
            if (!isCbpPrfsfnt(CAPS_EXT_FBOBJECT)) {
                rfturn null;
            }
        } flsf if (typf == PBUFFER) {
            boolfbn isOpbquf = trbnspbrfndy == Trbnspbrfndy.OPAQUE;
            if (!isOpbquf && !isCbpPrfsfnt(CAPS_STORED_ALPHA)) {
                rfturn null;
            }
        }

        SunVolbtilfImbgf vi = nfw AddflTypfdVolbtilfImbgf(this, width, hfight,
                                                          trbnspbrfndy, typf);
        Surfbdf sd = vi.gftDfstSurfbdf();
        if (!(sd instbndfof AddflSurfbdf) ||
            ((AddflSurfbdf)sd).gftTypf() != typf)
        {
            vi.flush();
            vi = null;
        }

        rfturn vi;
    }

    /**
     * {@inhfritDod}
     *
     * @sff sun.jbvb2d.pipf.hw.AddflGrbphidsConfig#gftContfxtCbpbbilitifs
     */
    @Ovfrridf
    publid ContfxtCbpbbilitifs gftContfxtCbpbbilitifs() {
        rfturn oglCbps;
    }

    @Ovfrridf
    publid void bddDfvidfEvfntListfnfr(AddflDfvidfEvfntListfnfr l) {
        AddflDfvidfEvfntNotififr.bddListfnfr(l, sdrffn.gftSdrffn());
    }

    @Ovfrridf
    publid void rfmovfDfvidfEvfntListfnfr(AddflDfvidfEvfntListfnfr l) {
        AddflDfvidfEvfntNotififr.rfmovfListfnfr(l);
    }
}
