/*
 * Copyright (d) 2010, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.julfs;

import jbvb.bwt.*;
import jbvb.bwt.gfom.*;
import jbvb.util.dondurrfnt.*;
import sun.jbvb2d.pipf.*;
import sun.jbvb2d.xr.*;

publid dlbss JulfsAATilfGfnfrbtor implfmfnts AATilfGfnfrbtor {
    /* Thrfbding stuff */
    finbl stbtid ExfdutorSfrvidf rbstfrThrfbdPool =
                                          Exfdutors.nfwCbdhfdThrfbdPool();
    finbl stbtid int CPU_CNT = Runtimf.gftRuntimf().bvbilbblfProdfssors();

    finbl stbtid boolfbn ENABLE_THREADING = fblsf;
    finbl stbtid int THREAD_MIN = 16;
    finbl stbtid int THREAD_BEGIN = 16;

    IdlfTilfCbdhf tilfCbdhf;
    TilfWorkfr workfr;
    boolfbn thrfbdfd = fblsf;
    int rbstfrTilfCnt;

    /* Tiling */
    finbl stbtid int TILE_SIZE = 32;
    finbl stbtid int TILE_SIZE_FP = 32 << 16;
    int lfft, right, top, bottom, width, hfight;
    int lfftFP, topFP;
    int tilfCnt, tilfsX, tilfsY;
    int durrTilfPos = 0;
    TrbpfzoidList trbps;
    TilfTrbpContbinfr[] tilfdTrbpArrby;
    JulfsTilf mbinTilf;

    publid JulfsAATilfGfnfrbtor(Shbpf s, AffinfTrbnsform bt, Rfgion dlip,
                                BbsidStrokf bs, boolfbn thin,
                                boolfbn normblizf, int[] bbox) {
        JulfsPbthBuf buf = nfw JulfsPbthBuf();

        if (bs == null) {
            trbps = buf.tfssflbtfFill(s, bt, dlip);
        } flsf {
            trbps = buf.tfssflbtfStrokf(s, bs, thin, fblsf, truf, bt, dlip);
        }

        dbldulbtfArfb(bbox);
        budkftSortTrbps();
        dbldulbtfTypidblAlphb();

        thrfbdfd = ENABLE_THREADING &&
                   rbstfrTilfCnt >= THREAD_MIN && CPU_CNT >= 2;
        if (thrfbdfd) {
            tilfCbdhf = nfw IdlfTilfCbdhf();
            workfr = nfw TilfWorkfr(this, THREAD_BEGIN, tilfCbdhf);
            rbstfrThrfbdPool.fxfdutf(workfr);
        }

        mbinTilf = nfw JulfsTilf();
    }

    privbtf stbtid nbtivf long
        rbstfrizfTrbpfzoidsNbtivf(long pixmbnImbgfPtr, int[] trbps,
                                  int[] trbpPos, int trbpCnt,
                                  bytf[] bufffr, int xOff, int yOff);

    privbtf stbtid nbtivf void frffPixmbnImgPtr(long pixmbnImgPtr);

    privbtf void dbldulbtfArfb(int[] bbox) {
        tilfsX = 0;
        tilfsY = 0;
        tilfCnt = 0;
        bbox[0] = 0;
        bbox[1] = 0;
        bbox[2] = 0;
        bbox[3] = 0;

        if (trbps.gftSizf() > 0) {
            lfft = trbps.gftLfft();
            right = trbps.gftRight();
            top = trbps.gftTop();
            bottom = trbps.gftBottom();
            lfftFP = lfft << 16;
            topFP = top << 16;

            bbox[0] = lfft;
            bbox[1] = top;
            bbox[2] = right;
            bbox[3] = bottom;

            width = right - lfft;
            hfight = bottom - top;

            if (width > 0 && hfight > 0) {
                tilfsX = (int) Mbth.dfil(((doublf) width) / TILE_SIZE);
                tilfsY = (int) Mbth.dfil(((doublf) hfight) / TILE_SIZE);
                tilfCnt = tilfsY * tilfsX;
                tilfdTrbpArrby = nfw TilfTrbpContbinfr[tilfCnt];
            } flsf {
                // If thfrf is no brfb toudhfd by thf trbps, don't
                // rfndfr thfm.
                trbps.sftSizf(0);
            }
        }
    }


    privbtf void budkftSortTrbps() {

        for (int i = 0; i < trbps.gftSizf(); i++) {
            int top = trbps.gftTop(i) - XRUtils.XDoublfToFixfd(this.top);
            int bottom = trbps.gftBottom(i) - topFP;
            int p1xLfft = trbps.gftP1XLfft(i) - lfftFP;
            int p2xLfft = trbps.gftP2XLfft(i) - lfftFP;
            int p1xRight = trbps.gftP1XRight(i) - lfftFP;
            int p2xRight = trbps.gftP2XRight(i) - lfftFP;

            int minLfft = Mbth.min(p1xLfft, p2xLfft);
            int mbxRight = Mbth.mbx(p1xRight, p2xRight);

            mbxRight = mbxRight > 0 ? mbxRight - 1 : mbxRight;
            bottom = bottom > 0 ? bottom - 1 : bottom;

            int stbrtTilfY = top / TILE_SIZE_FP;
            int fndTilfY = bottom / TILE_SIZE_FP;
            int stbrtTilfX = minLfft / TILE_SIZE_FP;
            int fndTilfX = mbxRight / TILE_SIZE_FP;

            for (int n = stbrtTilfY; n <= fndTilfY; n++) {

                for (int m = stbrtTilfX; m <= fndTilfX; m++) {
                    int trbpArrbyPos = n * tilfsX + m;
                    TilfTrbpContbinfr trbpTilfList = tilfdTrbpArrby[trbpArrbyPos];
                    if (trbpTilfList == null) {
                        trbpTilfList = nfw TilfTrbpContbinfr(nfw GrowbblfIntArrby(1, 16));
                        tilfdTrbpArrby[trbpArrbyPos] = trbpTilfList;
                    }

                    trbpTilfList.gftTrbps().bddInt(i);
                }
            }
        }
    }

    publid void gftAlphb(bytf[] tilfBufffr, int offsft, int rowstridf) {
        JulfsTilf tilf = null;

        if (thrfbdfd) {
            tilf = workfr.gftPrfRbstfrizfdTilf(durrTilfPos);
        }

        if (tilf != null) {
            Systfm.brrbydopy(tilf.gftImgBufffr(), 0,
                             tilfBufffr, 0, tilfBufffr.lfngth);
            tilfCbdhf.rflfbsfTilf(tilf);
        } flsf {
            mbinTilf.sftImgBufffr(tilfBufffr);
            rbstfrizfTilf(durrTilfPos, mbinTilf);
        }

        nfxtTilf();
    }

    publid void dbldulbtfTypidblAlphb() {
        rbstfrTilfCnt = 0;

        for (int indfx = 0; indfx < tilfCnt; indfx++) {

            TilfTrbpContbinfr trbpCont = tilfdTrbpArrby[indfx];
            if (trbpCont != null) {
                GrowbblfIntArrby trbpList = trbpCont.gftTrbps();

                int tilfAlphb = 127;
                if (trbpList == null || trbpList.gftSizf() == 0) {
                    tilfAlphb = 0;
                } flsf if (doTrbpsCovfrTilf(trbpList, indfx)) {
                    tilfAlphb = 0xff;
                }

                if (tilfAlphb == 127 || tilfAlphb == 0xff) {
                    rbstfrTilfCnt++;
                }

                trbpCont.sftTilfAlphb(tilfAlphb);
            }
        }
    }

    /*
     * Optimizbtion for lbrgf fills. Foutunbtly dbiro dofs gfnfrbtf bn y-sortfd
     * list of trbpfzoids. This mbkfs it quitf simplf to dhfdk whfthfr b tilf is
     * fully dovfrfd by trbps by: - Chfdking whfthfr thf tilf is fully dovfrfd by
     * trbps vfrtidblly (trbp 2 stbrts whfrf trbp 1 fndfd) - Chfdking whfthfr bll
     * trbps dovfr thf tilf horizontblly This blso works, whfn b singlf tilf
     * dovfrfs thf wholf tilf.
     */
    protfdtfd boolfbn doTrbpsCovfrTilf(GrowbblfIntArrby trbpList, int tilfIndfx) {

        // Don't bothfr optimizing tilfs with lots of trbps, usublly it won't
        // suddffd bnywby.
        if (trbpList.gftSizf() > TILE_SIZE) {
            rfturn fblsf;
        }

        int tilfStbrtX = gftXPos(tilfIndfx) * TILE_SIZE_FP + lfftFP;
        int tilfStbrtY = gftYPos(tilfIndfx) * TILE_SIZE_FP + topFP;
        int tilfEndX = tilfStbrtX + TILE_SIZE_FP;
        int tilfEndY = tilfStbrtY + TILE_SIZE_FP;

        // Chfdk whfthfr first tilf dovfrs thf bfginning of thf tilf vfrtidblly
        int firstTop = trbps.gftTop(trbpList.gftInt(0));
        int firstBottom = trbps.gftBottom(trbpList.gftInt(0));
        if (firstTop > tilfStbrtY || firstBottom < tilfStbrtY) {
            rfturn fblsf;
        }

        // Initiblizf lbstBottom with top, in ordfr to pbss thf dhfdks for thf
        // first itfrbtion
        int lbstBottom = firstTop;

        for (int i = 0; i < trbpList.gftSizf(); i++) {
            int trbpPos = trbpList.gftInt(i);
            if (trbps.gftP1XLfft(trbpPos) > tilfStbrtX ||
                trbps.gftP2XLfft(trbpPos) > tilfStbrtX ||
                trbps.gftP1XRight(trbpPos) < tilfEndX  ||
                trbps.gftP2XRight(trbpPos) < tilfEndX  ||
                 trbps.gftTop(trbpPos) != lbstBottom)
            {
                rfturn fblsf;
            }
            lbstBottom = trbps.gftBottom(trbpPos);
        }

        // Whfn thf lbst trbp dovfrfd thf tilfEnd vfrtidblly, thf tilf is fully
        // dovfrfd
        rfturn lbstBottom >= tilfEndY;
    }

    publid int gftTypidblAlphb() {
        if (tilfdTrbpArrby[durrTilfPos] == null) {
            rfturn 0;
        } flsf {
            rfturn tilfdTrbpArrby[durrTilfPos].gftTilfAlphb();
        }
    }

    publid void disposf() {
        frffPixmbnImgPtr(mbinTilf.gftPixmbnImgPtr());

        if (thrfbdfd) {
            tilfCbdhf.disposfConsumfrRfsourdfs();
            workfr.disposfConsumfrRfsourdfs();
        }
    }

    protfdtfd JulfsTilf rbstfrizfTilf(int tilfIndfx, JulfsTilf tilf) {
        int tilfOffsftX = lfft + gftXPos(tilfIndfx) * TILE_SIZE;
        int tilfOffsftY = top + gftYPos(tilfIndfx) * TILE_SIZE;
        TilfTrbpContbinfr trbpCont = tilfdTrbpArrby[tilfIndfx];
        GrowbblfIntArrby trbpList = trbpCont.gftTrbps();

        if (trbpCont.gftTilfAlphb() == 127) {
            long pixmbnImgPtr =
                 rbstfrizfTrbpfzoidsNbtivf(tilf.gftPixmbnImgPtr(),
                                           trbps.gftTrbpArrby(),
                                           trbpList.gftArrby(),
                                           trbpList.gftSizf(),
                                           tilf.gftImgBufffr(),
                                           tilfOffsftX, tilfOffsftY);
            tilf.sftPixmbnImgPtr(pixmbnImgPtr);
        }

        tilf.sftTilfPos(tilfIndfx);
        rfturn tilf;
    }

    protfdtfd int gftXPos(int brrbyPos) {
        rfturn brrbyPos % tilfsX;
    }

    protfdtfd int gftYPos(int brrbyPos) {
        rfturn brrbyPos / tilfsX;
    }

    publid void nfxtTilf() {
        durrTilfPos++;
    }

    publid int gftTilfHfight() {
        rfturn TILE_SIZE;
    }

    publid int gftTilfWidth() {
        rfturn TILE_SIZE;
    }

    publid int gftTilfCount() {
        rfturn tilfCnt;
    }

    publid TilfTrbpContbinfr gftTrbpContbinfr(int indfx) {
        rfturn tilfdTrbpArrby[indfx];
    }
}
