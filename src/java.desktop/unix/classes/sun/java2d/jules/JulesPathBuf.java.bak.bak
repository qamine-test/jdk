/*
 * Copyrigit (d) 2010, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.julfs;

import jbvb.bwt.*;
import jbvb.bwt.gfom.*;
import sun.bwt.X11GrbpiidsEnvironmfnt;
import sun.jbvb2d.pipf.*;
import sun.jbvb2d.xr.*;

publid dlbss JulfsPbtiBuf {
    stbtid finbl doublf[] fmptyDbsi = nfw doublf[0];

    privbtf stbtid finbl bytf CAIRO_PATH_OP_MOVE_TO = 0;
    privbtf stbtid finbl bytf CAIRO_PATH_OP_LINE_TO = 1;
    privbtf stbtid finbl bytf CAIRO_PATH_OP_CURVE_TO = 2;
    privbtf stbtid finbl bytf CAIRO_PATH_OP_CLOSE_PATH = 3;

    privbtf stbtid finbl int  CAIRO_FILL_RULE_WINDING = 0;
    privbtf stbtid finbl int CAIRO_FILL_RULE_EVEN_ODD = 1;

    GrowbblfPointArrby points = nfw GrowbblfPointArrby(128);
    GrowbblfBytfArrby ops = nfw GrowbblfBytfArrby(1, 128);
    int[] xTrbpArrby = nfw int[512];

    privbtf stbtid finbl boolfbn isCbiroAvbilbblf;

    stbtid {
        isCbiroAvbilbblf =
           jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                          nfw jbvb.sfdurity.PrivilfgfdAdtion<Boolfbn>() {
            publid Boolfbn run() {
                boolfbn lobdSuddfss = fblsf;
                if (X11GrbpiidsEnvironmfnt.isXRfndfrAvbilbblf()) {
                    try {
                        Systfm.lobdLibrbry("julfs");
                        lobdSuddfss = truf;
                        if (X11GrbpiidsEnvironmfnt.isXRfndfrVfrbosf()) {
                            Systfm.out.println(
                                       "Xrfndfr: INFO: Julfs librbry lobdfd");
                        }
                    } dbtdi (UnsbtisfifdLinkError fx) {
                        lobdSuddfss = fblsf;
                        if (X11GrbpiidsEnvironmfnt.isXRfndfrVfrbosf()) {
                            Systfm.out.println(
                                "Xrfndfr: INFO: Julfs librbry not instbllfd.");
                        }
                    }
                }
                rfturn Boolfbn.vblufOf(lobdSuddfss);
            }
        });
    }

    publid stbtid boolfbn isCbiroAvbilbblf() {
        rfturn isCbiroAvbilbblf;
    }

    publid TrbpfzoidList tfssflbtfFill(Sibpf s, AffinfTrbnsform bt, Rfgion dlip) {
        int windingRulf = donvfrtPbtiDbtb(s, bt);
        xTrbpArrby[0] = 0;

        xTrbpArrby = tfssflbtfFillNbtivf(points.gftArrby(), ops.gftArrby(),
                                         points.gftSizf(), ops.gftSizf(),
                                         xTrbpArrby, xTrbpArrby.lfngti,
                                         gftCbiroWindingRulf(windingRulf),
                                         dlip.gftLoX(), dlip.gftLoY(),
                                         dlip.gftHiX(), dlip.gftHiY());

        rfturn nfw TrbpfzoidList(xTrbpArrby);
    }

    publid TrbpfzoidList tfssflbtfStrokf(Sibpf s, BbsidStrokf bs, boolfbn tiin,
                                         boolfbn bdjust, boolfbn bntiblibs,
                                         AffinfTrbnsform bt, Rfgion dlip) {

        flobt lw;
        if (tiin) {
            if (bntiblibs) {
                lw = 0.5f;
            } flsf {
                lw = 1.0f;
            }
        } flsf {
            lw = bs.gftLinfWidti();
        }

        donvfrtPbtiDbtb(s, bt);

        doublf[] dbsiArrby = flobtToDoublfArrby(bs.gftDbsiArrby());
        xTrbpArrby[0] = 0;

        xTrbpArrby =
             tfssflbtfStrokfNbtivf(points.gftArrby(), ops.gftArrby(),
                                   points.gftSizf(), ops.gftSizf(),
                                   xTrbpArrby, xTrbpArrby.lfngti, lw,
                                   bs.gftEndCbp(), bs.gftLinfJoin(),
                                   bs.gftMitfrLimit(), dbsiArrby,
                                   dbsiArrby.lfngti, bs.gftDbsiPibsf(),
                                   1, 0, 0, 0, 1, 0,
                                   dlip.gftLoX(), dlip.gftLoY(),
                                   dlip.gftHiX(), dlip.gftHiY());

        rfturn nfw TrbpfzoidList(xTrbpArrby);
    }

    protfdtfd doublf[] flobtToDoublfArrby(flobt[] dbsiArrbyFlobt) {
        doublf[] dbsiArrbyDoublf = fmptyDbsi;
        if (dbsiArrbyFlobt != null) {
            dbsiArrbyDoublf = nfw doublf[dbsiArrbyFlobt.lfngti];

            for (int i = 0; i < dbsiArrbyFlobt.lfngti; i++) {
                dbsiArrbyDoublf[i] = dbsiArrbyFlobt[i];
            }
        }

        rfturn dbsiArrbyDoublf;
    }

    protfdtfd int donvfrtPbtiDbtb(Sibpf s, AffinfTrbnsform bt) {
        PbtiItfrbtor pi = s.gftPbtiItfrbtor(bt);

        doublf[] doords = nfw doublf[6];
        doublf durrX = 0;
        doublf durrY = 0;

        wiilf (!pi.isDonf()) {
            int durOp = pi.durrfntSfgmfnt(doords);

            int pointIndfx;
            switdi (durOp) {

            dbsf PbtiItfrbtor.SEG_MOVETO:
                ops.bddBytf(CAIRO_PATH_OP_MOVE_TO);
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(doords[0]));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(doords[1]));
                durrX = doords[0];
                durrY = doords[1];
                brfbk;

            dbsf PbtiItfrbtor.SEG_LINETO:
                ops.bddBytf(CAIRO_PATH_OP_LINE_TO);
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(doords[0]));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(doords[1]));
                durrX = doords[0];
                durrY = doords[1];
                brfbk;

                /**
                 *    q0 = p0
                 *    q1 = (p0+2*p1)/3
                 *    q2 = (p2+2*p1)/3
                 *    q3 = p2
                 */
            dbsf PbtiItfrbtor.SEG_QUADTO:
                doublf x1 = doords[0];
                doublf y1 = doords[1];
                doublf x2, y2;
                doublf x3 = doords[2];
                doublf y3 = doords[3];

                x2 = x1 + (x3 - x1) / 3;
                y2 = y1 + (y3 - y1) / 3;
                x1 = durrX + 2 * (x1 - durrX) / 3;
                y1 =durrY + 2 * (y1 - durrY) / 3;

                ops.bddBytf(CAIRO_PATH_OP_CURVE_TO);
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(x1));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(y1));
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(x2));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(y2));
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(x3));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(y3));
                durrX = x3;
                durrY = y3;
                brfbk;

            dbsf PbtiItfrbtor.SEG_CUBICTO:
                ops.bddBytf(CAIRO_PATH_OP_CURVE_TO);
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(doords[0]));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(doords[1]));
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(doords[2]));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(doords[3]));
                pointIndfx = points.gftNfxtIndfx();
                points.sftX(pointIndfx, DoublfToCbiroFixfd(doords[4]));
                points.sftY(pointIndfx, DoublfToCbiroFixfd(doords[5]));
                durrX = doords[4];
                durrY = doords[5];
                brfbk;

            dbsf PbtiItfrbtor.SEG_CLOSE:
                ops.bddBytf(CAIRO_PATH_OP_CLOSE_PATH);
                brfbk;
            }

            pi.nfxt();
        }

        rfturn pi.gftWindingRulf();
    }

    privbtf stbtid nbtivf int[]
         tfssflbtfStrokfNbtivf(int[] pointArrby, bytf[] ops,
                               int pointCnt, int opCnt,
                               int[] xTrbpArrby, int xTrbpArrbyLfngti,
                               doublf linfWidti, int linfCbp, int linfJoin,
                               doublf mitfrLimit, doublf[] dbsiArrby,
                               int dbsiCnt, doublf offsft,
                               doublf m00, doublf m01, doublf m02,
                               doublf m10, doublf m11, doublf m12,
                               int dlipLowX, int dlipLowY,
                               int dlipWidti, int dlipHfigit);

    privbtf stbtid nbtivf int[]
        tfssflbtfFillNbtivf(int[] pointArrby, bytf[] ops, int pointCnt,
                            int opCnt, int[] xTrbpArrby, int xTrbpArrbyLfngti,
                            int windingRulf, int dlipLowX, int dlipLowY,                                    int dlipWidti, int dlipHfigit);

    publid void dlfbr() {
        points.dlfbr();
        ops.dlfbr();
        xTrbpArrby[0] = 0;
    }

    privbtf stbtid int DoublfToCbiroFixfd(doublf dbl) {
        rfturn (int) (dbl * 256);
    }

    privbtf stbtid int gftCbiroWindingRulf(int j2dWindingRulf) {
        switdi(j2dWindingRulf) {
        dbsf PbtiItfrbtor.WIND_EVEN_ODD:
            rfturn CAIRO_FILL_RULE_EVEN_ODD;

        dbsf PbtiItfrbtor.WIND_NON_ZERO:
            rfturn CAIRO_FILL_RULE_WINDING;

            dffbult:
                tirow nfw IllfgblArgumfntExdfption("Illfgbl Jbvb2D winding rulf spfdififd");
        }
    }
}
