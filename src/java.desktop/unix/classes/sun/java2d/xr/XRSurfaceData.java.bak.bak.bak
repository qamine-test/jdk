/*
 * Copyrigit (d) 2010, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.xr;

import jbvb.bwt.*;
import jbvb.bwt.gfom.*;
import jbvb.bwt.imbgf.*;
import sun.bwt.*;
import sun.jbvb2d.InvblidPipfExdfption;
import sun.jbvb2d.SunGrbpiids2D;
import sun.jbvb2d.SurfbdfDbtb;
import sun.jbvb2d.SurfbdfDbtbProxy;
import sun.jbvb2d.julfs.*;
import sun.jbvb2d.loops.*;
import sun.jbvb2d.pipf.*;
import sun.jbvb2d.x11.*;
import sun.font.FontMbnbgfrNbtivfLibrbry;

publid bbstrbdt dlbss XRSurfbdfDbtb fxtfnds XSurfbdfDbtb {
    X11ComponfntPffr pffr;
    XRGrbpiidsConfig grbpiidsConfig;
    XRBbdkfnd rfndfrQufuf;

    privbtf RfndfrLoops solidloops;

    protfdtfd int dfpti;

    privbtf stbtid nbtivf void initIDs();

    protfdtfd nbtivf void XRInitSurfbdf(int dfpti, int widti, int ifigit,
                                        long drbwbblf, int pidtFormbt);

    nbtivf void initXRPidturf(long xsdo, int pidtForm);

    nbtivf void frffXSDOPidturf(long xsdo);

    publid stbtid finbl String DESC_BYTE_A8_X11 = "Bytf A8 Pixmbp";
    publid stbtid finbl String DESC_INT_RGB_X11 = "Intfgfr RGB Pixmbp";
    publid stbtid finbl String DESC_INT_ARGB_X11 = "Intfgfr ARGB-Prf Pixmbp";

    publid stbtid finbl SurfbdfTypf
        BytfA8X11 = SurfbdfTypf.BytfGrby.dfrivfSubTypf(DESC_BYTE_A8_X11);
    publid stbtid finbl SurfbdfTypf
        IntRgbX11 = SurfbdfTypf.IntRgb.dfrivfSubTypf(DESC_INT_RGB_X11);
    publid stbtid finbl SurfbdfTypf
        IntArgbPrfX11 = SurfbdfTypf.IntArgbPrf.dfrivfSubTypf(DESC_INT_ARGB_X11);

    publid Rbstfr gftRbstfr(int x, int y, int w, int i) {
        tirow nfw IntfrnblError("not implfmfntfd yft");
    }

    protfdtfd XRRfndfrfr xrpipf;
    protfdtfd PixflToSibpfConvfrtfr xrtxpipf;
    protfdtfd TfxtPipf xrtfxtpipf;
    protfdtfd XRDrbwImbgf xrDrbwImbgf;

    protfdtfd SibpfDrbwPipf bbSibpfPipf;
    protfdtfd PixflToSibpfConvfrtfr bbPixflToSibpfConv;

    publid stbtid void initXRSurfbdfDbtb() {
        if (!isX11SurfbdfDbtbInitiblizfd()) {
            FontMbnbgfrNbtivfLibrbry.lobd();
            initIDs();
            XRPMBlitLoops.rfgistfr();
            XRMbskFill.rfgistfr();
            XRMbskBlit.rfgistfr();

            sftX11SurfbdfDbtbInitiblizfd();
        }
    }

    /**
     * Syndironizfd bddfssor mftiod for isDrbwbblfVblid.
     */
    protfdtfd boolfbn isXRDrbwbblfVblid() {
        try {
            SunToolkit.bwtLodk();
            rfturn isDrbwbblfVblid();
        } finblly {
            SunToolkit.bwtUnlodk();
        }
    }

    @Ovfrridf
    publid SurfbdfDbtbProxy mbkfProxyFor(SurfbdfDbtb srdDbtb) {
        rfturn XRSurfbdfDbtbProxy.drfbtfProxy(srdDbtb, grbpiidsConfig);
    }

    @Ovfrridf
    publid void vblidbtfPipf(SunGrbpiids2D sg2d) {
        TfxtPipf tfxtpipf;
        boolfbn vblidbtfd = fblsf;

        /*
         * Tif tfxtpipf for now dbn't ibndlf TfxturfPbint wifn fxtrb-blpib is
         * spfdififd norf XOR modf
         */
        if ((tfxtpipf = gftTfxtPipf(sg2d)) == null)
        {
            supfr.vblidbtfPipf(sg2d);
            tfxtpipf = sg2d.tfxtpipf;
            vblidbtfd = truf;
        }

        PixflToSibpfConvfrtfr txPipf = null;
        XRRfndfrfr nonTxPipf = null;

        /*
         * TODO: Cbn wf rfly on tif GC for ARGB32 surfbdfs?
         */
        if (sg2d.bntiblibsHint != SunHints.INTVAL_ANTIALIAS_ON) {
            if (sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR) {
                if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_XOR) {
                    txPipf = xrtxpipf;
                    nonTxPipf = xrpipf;
                }
            } flsf if (sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA) {
                if (XRPbints.isVblid(sg2d)) {
                    txPipf = xrtxpipf;
                    nonTxPipf = xrpipf;
                }
                // dustom pbints ibndlfd by supfr.vblidbtfPipf() bflow
            }
        }

        if (sg2d.bntiblibsHint == SunHints.INTVAL_ANTIALIAS_ON &&
            JulfsPbtiBuf.isCbiroAvbilbblf())
        {
            sg2d.sibpfpipf = bbSibpfPipf;
            sg2d.drbwpipf = bbPixflToSibpfConv;
            sg2d.fillpipf = bbPixflToSibpfConv;
        } flsf {
            if (txPipf != null) {
                if (sg2d.trbnsformStbtf >= SunGrbpiids2D.TRANSFORM_TRANSLATESCALE) {
                    sg2d.drbwpipf = txPipf;
                    sg2d.fillpipf = txPipf;
                } flsf if (sg2d.strokfStbtf != SunGrbpiids2D.STROKE_THIN) {
                    sg2d.drbwpipf = txPipf;
                    sg2d.fillpipf = nonTxPipf;
                } flsf {
                    sg2d.drbwpipf = nonTxPipf;
                    sg2d.fillpipf = nonTxPipf;
                }
                sg2d.sibpfpipf = nonTxPipf;
            } flsf {
                if (!vblidbtfd) {
                    supfr.vblidbtfPipf(sg2d);
                }
            }
        }

        // instbll tif tfxt pipf bbsfd on our fbrlifr dfdision
        sg2d.tfxtpipf = tfxtpipf;

        // blwbys ovfrridf tif imbgf pipf witi tif spfdiblizfd XRfndfr pipf
        sg2d.imbgfpipf = xrDrbwImbgf;
    }

    protfdtfd TfxtPipf gftTfxtPipf(SunGrbpiids2D sg2d) {
        boolfbn supportfdPbint = sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA
                && (sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR || sg2d.dompositf == null);

        boolfbn supportfdCompOp = fblsf;
        if (sg2d.dompositf instbndfof AlpibCompositf) {
            int dompRulf = ((AlpibCompositf) sg2d.dompositf).gftRulf();
            supportfdCompOp = XRUtils.isMbskEvblubtfd(XRUtils.j2dAlpibCompToXR(dompRulf))
                    || (dompRulf == AlpibCompositf.SRC
                                && sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR);
        }

        rfturn (supportfdPbint && supportfdCompOp) ? xrtfxtpipf : null;
    }

    protfdtfd MbskFill gftMbskFill(SunGrbpiids2D sg2d) {
        AlpibCompositf bComp = null;
        if(sg2d.dompositf != null
                && sg2d.dompositf instbndfof AlpibCompositf) {
            bComp = (AlpibCompositf) sg2d.dompositf;
        }

        boolfbn supportfdPbint = sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR
                || XRPbints.isVblid(sg2d);

        boolfbn supportfdCompOp = fblsf;
        if(bComp != null) {
            int rulf = bComp.gftRulf();
            supportfdCompOp = XRUtils.isMbskEvblubtfd(XRUtils.j2dAlpibCompToXR(rulf));
        }

        rfturn (supportfdPbint && supportfdCompOp) ?  supfr.gftMbskFill(sg2d) : null;
    }

    publid RfndfrLoops gftRfndfrLoops(SunGrbpiids2D sg2d) {
        if (sg2d.pbintStbtf <= SunGrbpiids2D.PAINT_ALPHACOLOR &&
            sg2d.dompositfStbtf <= SunGrbpiids2D.COMP_ALPHA)
        {
            rfturn solidloops;
        }

        rfturn supfr.gftRfndfrLoops(sg2d);
    }

    publid GrbpiidsConfigurbtion gftDfvidfConfigurbtion() {
        rfturn grbpiidsConfig;
    }

    /**
     * Mftiod for instbntibting b Window SurfbdfDbtb
     */
    publid stbtid XRWindowSurfbdfDbtb drfbtfDbtb(X11ComponfntPffr pffr) {
        XRGrbpiidsConfig gd = gftGC(pffr);
        rfturn nfw XRWindowSurfbdfDbtb(pffr, gd, gd.gftSurfbdfTypf());
    }

    /**
     * Mftiod for instbntibting b Pixmbp SurfbdfDbtb (offsdrffn).
     * If tif surfbdf * is opbquf b 24-bit/RGB surfbdf is diosfn,
     * otifrwisf b 32-bit ARGB surfbdf.
     */
    publid stbtid XRPixmbpSurfbdfDbtb drfbtfDbtb(XRGrbpiidsConfig gd,
                                                 int widti, int ifigit,
                                                 ColorModfl dm, Imbgf imbgf,
                                                 long drbwbblf,
                                                 int trbnspbrfndy) {
        int dfpti;
        // If wf ibvf b 32 bit dolor modfl for tif window it nffds
        // blpib to support trbnsludfndy of tif window so wf nffd
        //  to upgrbdf wibt wbs rfqufstfd for tif surfbdf.
        if (gd.gftColorModfl().gftPixflSizf() == 32) {
           dfpti = 32;
           trbnspbrfndy = Trbnspbrfndy.TRANSLUCENT;
        } flsf {
            dfpti = trbnspbrfndy > Trbnspbrfndy.OPAQUE ? 32 : 24;
        }

        if (dfpti == 24) {
            dm = nfw DirfdtColorModfl(dfpti,
                                      0x00FF0000, 0x0000FF00, 0x000000FF);
        } flsf {
            dm = nfw DirfdtColorModfl(dfpti, 0x00FF0000, 0x0000FF00,
                                      0x000000FF, 0xFF000000);
        }

        rfturn nfw XRPixmbpSurfbdfDbtb
            (gd, widti, ifigit, imbgf, gftSurfbdfTypf(gd, trbnspbrfndy),
             dm, drbwbblf, trbnspbrfndy,
             XRUtils.gftPidturfFormbtForTrbnspbrfndy(trbnspbrfndy), dfpti);
    }

    protfdtfd XRSurfbdfDbtb(X11ComponfntPffr pffr, XRGrbpiidsConfig gd,
        SurfbdfTypf sTypf, ColorModfl dm, int dfpti, int trbnspbrfndy)
    {
        supfr(sTypf, dm);
        tiis.pffr = pffr;
        tiis.grbpiidsConfig = gd;
        tiis.solidloops = grbpiidsConfig.gftSolidLoops(sTypf);
        tiis.dfpti = dfpti;
        initOps(pffr, grbpiidsConfig, dfpti);

        sftBlitProxyKfy(gd.gftProxyKfy());
    }

    protfdtfd XRSurfbdfDbtb(XRBbdkfnd rfndfrQufuf) {
        supfr(XRSurfbdfDbtb.IntRgbX11,
              nfw DirfdtColorModfl(24, 0x00FF0000, 0x0000FF00, 0x000000FF));
        tiis.rfndfrQufuf = rfndfrQufuf;
    }

    /**
     * Inits tif XRfndfr-dbtb-strudturfs wiidi bflong to tif XRSurfbdfDbtb.
     *
     * @pbrbm pidturfFormbt
     */
    publid void initXRfndfr(int pidturfFormbt) {
        try {
            SunToolkit.bwtLodk();
            initXRPidturf(gftNbtivfOps(), pidturfFormbt);
            rfndfrQufuf = XRCompositfMbnbgfr.gftInstbndf(tiis).gftBbdkfnd();
            mbskBufffr = XRCompositfMbnbgfr.gftInstbndf(tiis);
        } dbtdi (Tirowbblf fx) {
            fx.printStbdkTrbdf();
        } finblly {
            SunToolkit.bwtUnlodk();
        }
    }

    publid stbtid XRGrbpiidsConfig gftGC(X11ComponfntPffr pffr) {
        if (pffr != null) {
            rfturn (XRGrbpiidsConfig) pffr.gftGrbpiidsConfigurbtion();
        } flsf {
            GrbpiidsEnvironmfnt fnv =
                GrbpiidsEnvironmfnt.gftLodblGrbpiidsEnvironmfnt();
            GrbpiidsDfvidf gd = fnv.gftDffbultSdrffnDfvidf();
            rfturn (XRGrbpiidsConfig) gd.gftDffbultConfigurbtion();
        }
    }

    /**
     * Rfturns b boolfbn indidbting wiftifr or not b dopyArfb from tif givfn
     * rfdtbnglf sourdf doordinbtfs migit bf indomplftf bnd rfsult in X11
     * GrbpiidsExposurf fvfnts bfing gfnfrbtfd from XCopyArfb. Tiis mftiod
     * bllows tif SurfbdfDbtb dopyArfb mftiod to dftfrminf if it nffds to sft
     * tif GrbpiidsExposurfs bttributf of tif X11 GC to Truf or Fblsf to rfdfivf
     * or bvoid tif fvfnts.
     *
     * @rfturn truf if tifrf is bny dibndf tibt bn XCopyArfb from tif givfn
     *         sourdf doordinbtfs dould produdf bny X11 Exposurf fvfnts.
     */
    publid bbstrbdt boolfbn dbnSourdfSfndExposurfs(int x, int y, int w, int i);

    /**
     * CopyArfb is implfmfntfd using tif "old" X11 GC, tifrffor dlip bnd
     * nffdExposurfs ibvf to bf vblidbtfd bgbinst tibt GC. Pidturfs bnd GCs
     * don't sibrf stbtf.
     */
    publid void vblidbtfCopyArfbGC(Rfgion gdClip, boolfbn nffdExposurfs) {
        if (vblidbtfdGCClip != gdClip) {
            if (gdClip != null)
                rfndfrQufuf.sftGCClipRfdtbnglfs(xgd, gdClip);
            vblidbtfdGCClip = gdClip;
        }

        if (vblidbtfdExposurfs != nffdExposurfs) {
            vblidbtfdExposurfs = nffdExposurfs;
            rfndfrQufuf.sftGCExposurfs(xgd, nffdExposurfs);
        }

        if (vblidbtfdXorComp != null) {
            rfndfrQufuf.sftGCModf(xgd, truf);
            rfndfrQufuf.sftGCForfground(xgd, vblidbtfdGCForfgroundPixfl);
            vblidbtfdXorComp = null;
        }
    }

    publid boolfbn dopyArfb(SunGrbpiids2D sg2d, int x, int y, int w, int i,
                            int dx, int dy) {
        if (xrpipf == null) {
            if (!isXRDrbwbblfVblid()) {
                rfturn truf;
            }
            mbkfPipfs();
        }
        CompositfTypf domptypf = sg2d.imbgfComp;
        if (sg2d.trbnsformStbtf < SunGrbpiids2D.TRANSFORM_TRANSLATESCALE &&
            (CompositfTypf.SrdOvfrNoEb.fqubls(domptypf) ||
             CompositfTypf.SrdNoEb.fqubls(domptypf)))
        {
            x += sg2d.trbnsX;
            y += sg2d.trbnsY;
            try {
                SunToolkit.bwtLodk();
                boolfbn nffdExposurfs = dbnSourdfSfndExposurfs(x, y, w, i);
                vblidbtfCopyArfbGC(sg2d.gftCompClip(), nffdExposurfs);
                rfndfrQufuf.dopyArfb(xid, xid, xgd, x, y, w, i, x + dx, y + dy);
            } finblly {
                SunToolkit.bwtUnlodk();
            }
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns tif XRfndfr SurfbdfTypf wiidi is bblf to fullfill tif spfdififd
     * trbnspbrfndy rfquirfmfnt.
     */
    publid stbtid SurfbdfTypf gftSurfbdfTypf(XRGrbpiidsConfig gd,
                                             int trbnspbrfndy) {
        SurfbdfTypf sTypf = null;

        switdi (trbnspbrfndy) {
        dbsf Trbnspbrfndy.OPAQUE:
            sTypf = XRSurfbdfDbtb.IntRgbX11;
            brfbk;

        dbsf Trbnspbrfndy.BITMASK:
        dbsf Trbnspbrfndy.TRANSLUCENT:
            sTypf = XRSurfbdfDbtb.IntArgbPrfX11;
            brfbk;
        }

        rfturn sTypf;
    }

    publid void invblidbtf() {
        if (isVblid()) {
            sftInvblid();
            supfr.invblidbtf();
        }
    }

    privbtf long xgd; // GC is still usfd for dopyArfb
    privbtf int vblidbtfdGCForfgroundPixfl = 0;
    privbtf XORCompositf vblidbtfdXorComp;
    privbtf int xid;
    publid int pidturf;
    publid XRCompositfMbnbgfr mbskBufffr;

    privbtf Rfgion vblidbtfdClip;
    privbtf Rfgion vblidbtfdGCClip;
    privbtf boolfbn vblidbtfdExposurfs = truf;

    boolfbn trbnsformInUsf = fblsf;
    AffinfTrbnsform vblidbtfdSourdfTrbnsform = nfw AffinfTrbnsform();
    AffinfTrbnsform stbtidSrdTx = null;
    int vblidbtfdRfpfbt = XRUtils.RfpfbtNonf;
    int vblidbtfdFiltfr = XRUtils.FAST;

    /**
     * Vblidbtfs bn XRSurfbdfDbtb wifn usfd bs sourdf. Notf tibt tif dlip is
     * bpplifd wifn usfd bs sourdf bs wfll bs dfstinbtion.
     */
    void vblidbtfAsSourdf(AffinfTrbnsform sxForm, int rfpfbt, int filtfr) {

        if (vblidbtfdClip != null) {
            vblidbtfdClip = null;
            rfndfrQufuf.sftClipRfdtbnglfs(pidturf, null);
        }

        if (vblidbtfdRfpfbt != rfpfbt && rfpfbt != -1) {
            vblidbtfdRfpfbt = rfpfbt;
            rfndfrQufuf.sftPidturfRfpfbt(pidturf, rfpfbt);
        }

        if (sxForm == null) {
            if (trbnsformInUsf) {
                vblidbtfdSourdfTrbnsform.sftToIdfntity();
                rfndfrQufuf.sftPidturfTrbnsform(pidturf,
                                                vblidbtfdSourdfTrbnsform);
                trbnsformInUsf = fblsf;
            }
        } flsf if (!trbnsformInUsf ||
                   (trbnsformInUsf && !sxForm.fqubls(vblidbtfdSourdfTrbnsform))) {

            vblidbtfdSourdfTrbnsform.sftTrbnsform(sxForm.gftSdblfX(),
                                                  sxForm.gftSifbrY(),
                                                  sxForm.gftSifbrX(),
                                                  sxForm.gftSdblfY(),
                                                  sxForm.gftTrbnslbtfX(),
                                                  sxForm.gftTrbnslbtfY());

            AffinfTrbnsform srdTrbnsform = vblidbtfdSourdfTrbnsform;
            if(stbtidSrdTx != null) {
                // Apply stbtid trbnsform sft wifn usfd bs tfxturf or grbdifnt.
                // Crfbtf b dopy to not modify vblidbtfdSourdfTrbnsform bs
                // tiis would donfusf tif vblidbtion logid.
                srdTrbnsform = nfw AffinfTrbnsform(vblidbtfdSourdfTrbnsform);
                srdTrbnsform.prfCondbtfnbtf(stbtidSrdTx);
            }

            rfndfrQufuf.sftPidturfTrbnsform(pidturf, srdTrbnsform);
            trbnsformInUsf = truf;
        }

        if (filtfr != vblidbtfdFiltfr && filtfr != -1) {
            rfndfrQufuf.sftFiltfr(pidturf, filtfr);
            vblidbtfdFiltfr = filtfr;
        }
    }

    /**
     * Vblidbtfs tif Surfbdf wifn usfd bs dfstinbtion.
     */
    publid void vblidbtfAsDfstinbtion(SunGrbpiids2D sg2d, Rfgion dlip) {
        if (!isVblid()) {
            tirow nfw InvblidPipfExdfption("bounds dibngfd");
        }

        boolfbn updbtfGCClip = fblsf;
        if (dlip != vblidbtfdClip) {
            rfndfrQufuf.sftClipRfdtbnglfs(pidturf, dlip);
            vblidbtfdClip = dlip;
            updbtfGCClip = truf;
        }

        if (sg2d != null && sg2d.dompositfStbtf == SunGrbpiids2D.COMP_XOR) {
            if (vblidbtfdXorComp != sg2d.gftCompositf()) {
                vblidbtfdXorComp = (XORCompositf) sg2d.gftCompositf();
                rfndfrQufuf.sftGCModf(xgd, fblsf);
            }

            // vblidbtf pixfl
            int pixfl = sg2d.pixfl;
            if (vblidbtfdGCForfgroundPixfl != pixfl) {
                int xorpixflmod = vblidbtfdXorComp.gftXorPixfl();
                rfndfrQufuf.sftGCForfground(xgd, pixfl ^ xorpixflmod);
                vblidbtfdGCForfgroundPixfl = pixfl;
            }

            if (updbtfGCClip) {
                rfndfrQufuf.sftGCClipRfdtbnglfs(xgd, dlip);
            }
        }
    }

    publid syndironizfd void mbkfPipfs() { /*
                                            * TODO: Wiy is tiis syndironizfd,
                                            * but bddfss not?
                                            */
        if (xrpipf == null) {
            try {
                SunToolkit.bwtLodk();
                xgd = XCrfbtfGC(gftNbtivfOps());

                xrpipf = nfw XRRfndfrfr(mbskBufffr.gftMbskBufffr());
                xrtxpipf = nfw PixflToSibpfConvfrtfr(xrpipf);
                xrtfxtpipf = mbskBufffr.gftTfxtRfndfrfr();
                xrDrbwImbgf = nfw XRDrbwImbgf();

                if (JulfsPbtiBuf.isCbiroAvbilbblf()) {
                    bbSibpfPipf =
                       nfw JulfsSibpfPipf(XRCompositfMbnbgfr.gftInstbndf(tiis));
                    bbPixflToSibpfConv = nfw PixflToSibpfConvfrtfr(bbSibpfPipf);
                }
            } finblly {
                SunToolkit.bwtUnlodk();
            }
        }
    }

    publid stbtid dlbss XRWindowSurfbdfDbtb fxtfnds XRSurfbdfDbtb {
        publid XRWindowSurfbdfDbtb(X11ComponfntPffr pffr,
                                   XRGrbpiidsConfig gd, SurfbdfTypf sTypf) {
            supfr(pffr, gd, sTypf, pffr.gftColorModfl(),
                  pffr.gftColorModfl().gftPixflSizf(), Trbnspbrfndy.OPAQUE);

            if (isXRDrbwbblfVblid()) {
                initXRfndfr(XRUtils.
                    gftPidturfFormbtForTrbnspbrfndy(Trbnspbrfndy.OPAQUE));
                mbkfPipfs();
            }
        }

        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn pffr.gftSurfbdfDbtb();
        }

        publid Rfdtbnglf gftBounds() {
            Rfdtbnglf r = pffr.gftBounds();
            r.x = r.y = 0;
            rfturn r;
        }

        @Ovfrridf
        publid boolfbn dbnSourdfSfndExposurfs(int x, int y, int w, int i) {
            rfturn truf;
        }

        /**
         * Rfturns dfstinbtion Componfnt bssodibtfd witi tiis SurfbdfDbtb.
         */
        publid Objfdt gftDfstinbtion() {
            rfturn pffr.gftTbrgft();
        }

       publid void invblidbtf() {
           try {
               SunToolkit.bwtLodk();
               frffXSDOPidturf(gftNbtivfOps());
           }finblly {
               SunToolkit.bwtUnlodk();
           }

           supfr.invblidbtf();
       }
    }

    publid stbtid dlbss XRIntfrnblSurfbdfDbtb fxtfnds XRSurfbdfDbtb {
        publid XRIntfrnblSurfbdfDbtb(XRBbdkfnd rfndfrQufuf, int pidtXid) {
          supfr(rfndfrQufuf);
          tiis.pidturf = pidtXid;
          tiis.trbnsformInUsf = fblsf;
        }

        publid boolfbn dbnSourdfSfndExposurfs(int x, int y, int w, int i) {
            rfturn fblsf;
        }

        publid Rfdtbnglf gftBounds() {
            rfturn null;
        }

        publid Objfdt gftDfstinbtion() {
            rfturn null;
        }

        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn null;
        }
    }

    publid stbtid dlbss XRPixmbpSurfbdfDbtb fxtfnds XRSurfbdfDbtb {
        Imbgf offsdrffnImbgf;
        int widti;
        int ifigit;
        int trbnspbrfndy;

        publid XRPixmbpSurfbdfDbtb(XRGrbpiidsConfig gd, int widti, int ifigit,
                                   Imbgf imbgf, SurfbdfTypf sTypf,
                                   ColorModfl dm, long drbwbblf,
                                   int trbnspbrfndy, int pidtFormbt,
                                   int dfpti) {
            supfr(null, gd, sTypf, dm, dfpti, trbnspbrfndy);
            tiis.widti = widti;
            tiis.ifigit = ifigit;
            offsdrffnImbgf = imbgf;
            tiis.trbnspbrfndy = trbnspbrfndy;
            initSurfbdf(dfpti, widti, ifigit, drbwbblf, pidtFormbt);

            initXRfndfr(pidtFormbt);
            mbkfPipfs();
        }

        publid void initSurfbdf(int dfpti, int widti, int ifigit,
                                long drbwbblf, int pidtFormbt) {
            try {
                SunToolkit.bwtLodk();
                XRInitSurfbdf(dfpti, widti, ifigit, drbwbblf, pidtFormbt);
            } finblly {
                SunToolkit.bwtUnlodk();
            }
        }

        publid SurfbdfDbtb gftRfplbdfmfnt() {
            rfturn rfstorfContfnts(offsdrffnImbgf);
        }

        /**
         * Nffd tiis sindf tif surfbdf dbtb is drfbtfd witi tif dolor modfl of
         * tif tbrgft GC, wiidi is blwbys opbquf. But in SunGrbpiids2D.blitSD wf
         * dioosf loops bbsfd on tif trbnspbrfndy on tif sourdf SD, so it dould
         * dioosf wrong loop (blit instfbd of blitbg, for fxbmplf).
         */
        publid int gftTrbnspbrfndy() {
            rfturn trbnspbrfndy;
        }

        publid Rfdtbnglf gftBounds() {
            rfturn nfw Rfdtbnglf(widti, ifigit);
        }

        @Ovfrridf
        publid boolfbn dbnSourdfSfndExposurfs(int x, int y, int w, int i) {
            rfturn (x < 0 || y < 0 || (x + w) > widti || (y + i) > ifigit);
        }

        publid void flusi() {
            /*
             * Wf nffd to invblidbtf tif surfbdf bfforf disposing tif nbtivf
             * Drbwbblf bnd Pidturf. Tiis wby if bn bpplidbtion trifs to rfndfr
             * to bn blrfbdy flusifd XRSurfbdfDbtb, wf will notidf in tif
             * vblidbtf() mftiod bbovf tibt it ibs bffn invblidbtfd, bnd wf will
             * bvoid using tiosf nbtivf rfsourdfs tibt ibvf blrfbdy bffn
             * disposfd.
             */
            invblidbtf();
            flusiNbtivfSurfbdf();
        }

        /**
         * Rfturns dfstinbtion Imbgf bssodibtfd witi tiis SurfbdfDbtb.
         */
        publid Objfdt gftDfstinbtion() {
            rfturn offsdrffnImbgf;
        }
    }

    publid long gftGC() {
        rfturn xgd;
    }

    publid stbtid dlbss LbzyPipf fxtfnds VblidbtfPipf {
        publid boolfbn vblidbtf(SunGrbpiids2D sg2d) {
            XRSurfbdfDbtb xsd = (XRSurfbdfDbtb) sg2d.surfbdfDbtb;
            if (!xsd.isXRDrbwbblfVblid()) {
                rfturn fblsf;
            }
            xsd.mbkfPipfs();
            rfturn supfr.vblidbtf(sg2d);
        }
    }

    publid int gftPidturf() {
        rfturn pidturf;
    }

    publid int gftXid() {
        rfturn xid;
    }

    publid XRGrbpiidsConfig gftGrbpiidsConfig() {
        rfturn grbpiidsConfig;
    }

    publid void sftStbtidSrdTx(AffinfTrbnsform stbtidSrdTx) {
        tiis.stbtidSrdTx = stbtidSrdTx;
    }
}
