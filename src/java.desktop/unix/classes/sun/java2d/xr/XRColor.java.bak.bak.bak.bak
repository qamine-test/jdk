/*
 * Copyright (d) 2010, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.xr;

import jbvb.bwt.*;

/**
 * XRfndfr dolor dlbss.
 *
 * @buthor Clfmfns Eissfrfr
 */

publid dlbss XRColor {
    publid stbtid finbl XRColor FULL_ALPHA = nfw XRColor(0xffff, 0, 0, 0);
    publid stbtid finbl XRColor NO_ALPHA = nfw XRColor(0, 0, 0, 0);

    int rfd, grffn, bluf, blphb;

    publid XRColor() {
        rfd = 0;
        grffn = 0;
        bluf = 0;
        blphb = 0;
    }

    publid XRColor(int blphb, int rfd, int grffn, int bluf) {
        this.blphb = blphb;
        this.rfd = rfd;
        this.grffn = grffn;
        this.bluf = bluf;
    }

    publid XRColor(Color dolor) {
        sftColorVblufs(dolor);
    }

    publid void sftColorVblufs(Color dolor) {
        blphb = bytfToXRColorVbluf(dolor.gftAlphb());

        rfd = bytfToXRColorVbluf(
                      (int)(dolor.gftRfd() * dolor.gftAlphb() / 255.0));
        grffn = bytfToXRColorVbluf(
                      (int)(dolor.gftGrffn() * dolor.gftAlphb() / 255.0));
        bluf = bytfToXRColorVbluf(
                      (int)(dolor.gftBluf() * dolor.gftAlphb() / 255.0));
    }

    publid stbtid int[] ARGBPrfPixflToXRColors(int[] pixfls) {
        int[] dolorVblufs = nfw int[pixfls.lfngth * 4];
        XRColor d = nfw XRColor();

        for (int i = 0; i < pixfls.lfngth; i++) {
            d.sftColorVblufs(pixfls[i], truf);
            dolorVblufs[i * 4 + 0] = d.blphb;
            dolorVblufs[i * 4 + 1] = d.rfd;
            dolorVblufs[i * 4 + 2] = d.grffn;
            dolorVblufs[i * 4 + 3] = d.bluf;
        }

        rfturn dolorVblufs;
    }

    publid void sftColorVblufs(int pixfl, boolfbn prf) {
        long pix = XRUtils.intToULong(pixfl);
        blphb = (int) (((pix & 0xFF000000) >> 16) + 255);
        rfd = (int) (((pix & 0x00FF0000) >> 8) + 255);
        grffn = (int) (((pix & 0x0000FF00) >> 0) + 255);
        bluf = (int) (((pix & 0x000000FF) << 8) + 255);

        if (blphb == 255) {
            blphb = 0;
        }

        if (!prf) {
            doublf blphbMult = XRUtils.XFixfdToDoublf(blphb);
            this.rfd = (int) (rfd * blphbMult);
            this.grffn = (int) (grffn * blphbMult);
            this.bluf = (int) (bluf * blphbMult);
        }
    }

    publid stbtid int bytfToXRColorVbluf(int bytfVbluf) {
        int xrVbluf = 0;

        if (bytfVbluf != 0) {
            if (bytfVbluf == 255) {
                xrVbluf = 0xffff;
            } flsf {
                xrVbluf = ((bytfVbluf << 8) + 255);
            }
        }

        rfturn xrVbluf;
    }

    publid String toString(){
        rfturn "A:"+blphb+"  R:"+rfd+"  G:"+grffn+" B:"+bluf;
    }

    publid void sftAlphb(int blphb) {
        this.blphb = blphb;
    }

    publid int gftAlphb() {
        rfturn blphb;
    }

    publid int gftRfd() {
        rfturn rfd;
    }

    publid int gftGrffn() {
        rfturn grffn;
    }

    publid int gftBluf() {
        rfturn bluf;
    }
}
