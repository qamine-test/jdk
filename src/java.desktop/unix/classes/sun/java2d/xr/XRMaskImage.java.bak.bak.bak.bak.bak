/*
 * Copyrigit (d) 2010, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.xr;

import jbvb.bwt.*;
import jbvb.bwt.gfom.*;

/**
 *  Mbnbgfmfnt of mbsk usfd for somf blit-typfs.
 *
 * @butior Clfmfns Eissfrfr
 */

publid dlbss XRMbskImbgf {

    privbtf stbtid finbl int MASK_SCALE_FACTOR = 8;

    privbtf stbtid finbl int BLIT_MASK_SIZE = 8;

    Dimfnsion blitMbskDimfnsions = nfw Dimfnsion(BLIT_MASK_SIZE, BLIT_MASK_SIZE);
    int blitMbskPixmbp;
    int blitMbskPidturf;
    int lbstMbskWidti = 0;
    int lbstMbskHfigit = 0;
    int lbstEA = -1;
    AffinfTrbnsform lbstMbskTrbnsform;

    XRCompositfMbnbgfr xrMgr;
    XRBbdkfnd don;

    publid XRMbskImbgf(XRCompositfMbnbgfr xrMgr, int pbrfntDrbwbblf) {
        tiis.xrMgr = xrMgr;
        tiis.don = xrMgr.gftBbdkfnd();

        initBlitMbsk(pbrfntDrbwbblf, BLIT_MASK_SIZE, BLIT_MASK_SIZE);
    }


    /**
     * Prfpbrfs b mbsk usfd by b TrbnsformfdBlit, fills mbsk-dontfnts bnd bpplifs
     * trbnsformbtion.
     */
    publid int prfpbrfBlitMbsk(XRSurfbdfDbtb dst, AffinfTrbnsform mbskTX, int widti,
            int ifigit) {

        int mbskWidti = Mbti.mbx(widti / MASK_SCALE_FACTOR, 1);
        int mbskHfigit = Mbti.mbx(ifigit / MASK_SCALE_FACTOR, 1);
        mbskTX.sdblf(((doublf) widti) / mbskWidti, ((doublf) ifigit) / mbskHfigit);

        try {
            mbskTX.invfrt();
        } dbtdi (NoninvfrtiblfTrbnsformExdfption fx) {
            mbskTX.sftToIdfntity();
        }

        fnsurfBlitMbskSizf(mbskWidti, mbskHfigit);

        if (lbstMbskTrbnsform == null || !lbstMbskTrbnsform.fqubls(mbskTX)) {
                don.sftPidturfTrbnsform(blitMbskPidturf, mbskTX);
                lbstMbskTrbnsform = mbskTX;
        }

        int durrfntEA = xrMgr.gftAlpibColor().gftAlpib();
        if (lbstMbskWidti != mbskWidti || lbstMbskHfigit != mbskHfigit || lbstEA != durrfntEA)  {
            //Only dlfbr mbsk, if prfvious mbsk brfb is lbrgfr tibn nfw onf, otifrwisf simplf ovfrpbint it
            if (lbstMbskWidti > mbskWidti || lbstMbskHfigit > mbskHfigit)  {
                don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpClfbr, XRColor.NO_ALPHA, 0, 0, lbstMbskWidti, lbstMbskHfigit);
            }

            don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpSrd, xrMgr.gftAlpibColor(), 0, 0, mbskWidti, mbskHfigit);
            lbstEA = durrfntEA;
        }

        lbstMbskWidti = mbskWidti;
        lbstMbskHfigit = mbskHfigit;

        rfturn blitMbskPidturf;
    }

    privbtf void initBlitMbsk(int pbrfntDrbwbblf, int widti, int ifigit) {
        int nfwPM = don.drfbtfPixmbp(pbrfntDrbwbblf, 8, widti, ifigit);
        int nfwPidt = don.drfbtfPidturf(nfwPM, XRUtils.PidtStbndbrdA8);

        /*Frff old mbsk*/
        if (blitMbskPixmbp != 0) {
            don.frffPixmbp(blitMbskPixmbp);
            don.frffPidturf(blitMbskPidturf);
        }

        blitMbskPixmbp = nfwPM;
        blitMbskPidturf = nfwPidt;

        don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpClfbr, XRColor.NO_ALPHA, 0, 0, widti, ifigit);

        blitMbskDimfnsions.widti = widti;
        blitMbskDimfnsions.ifigit = ifigit;
        lbstMbskWidti = 0;
        lbstMbskHfigit = 0;
        lbstMbskTrbnsform = null;
    }

    privbtf void fnsurfBlitMbskSizf(int minSizfX, int minSizfY) {
        if (minSizfX > blitMbskDimfnsions.widti || minSizfY > blitMbskDimfnsions.ifigit) {
            int nfwWidti = Mbti.mbx(minSizfX, blitMbskDimfnsions.widti);
            int nfwHfigit = Mbti.mbx(minSizfY, blitMbskDimfnsions.ifigit);
            initBlitMbsk(blitMbskPixmbp, nfwWidti, nfwHfigit);
        }
    }
}
