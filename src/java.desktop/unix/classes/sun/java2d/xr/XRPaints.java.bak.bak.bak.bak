/*
 * Copyright (d) 2010, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.xr;

import jbvb.bwt.*;
import jbvb.bwt.MultiplfGrbdifntPbint.*;
import jbvb.bwt.gfom.*;
import jbvb.bwt.imbgf.*;
import sun.jbvb2d.*;
import sun.jbvb2d.loops.*;
import sun.jbvb2d.xr.XRSurfbdfDbtb.XRIntfrnblSurfbdfDbtb;

bbstrbdt dlbss XRPbints {
    stbtid XRCompositfMbnbgfr xrCompMbn;

    stbtid finbl XRGrbdifnt xrGrbdifnt = nfw XRGrbdifnt();
    stbtid finbl XRLinfbrGrbdifnt xrLinfbrGrbdifnt = nfw XRLinfbrGrbdifnt();
    stbtid finbl XRRbdiblGrbdifnt xrRbdiblGrbdifnt = nfw XRRbdiblGrbdifnt();
    stbtid finbl XRTfxturf xrTfxturf = nfw XRTfxturf();

    publid stbtid void rfgistfr(XRCompositfMbnbgfr xrComp) {
        xrCompMbn = xrComp;
    }

    privbtf stbtid XRPbints gftXRPbint(SunGrbphids2D sg2d) {
        switdh (sg2d.pbintStbtf) {
        dbsf SunGrbphids2D.PAINT_GRADIENT:
            rfturn xrGrbdifnt;

        dbsf SunGrbphids2D.PAINT_LIN_GRADIENT:
            rfturn xrLinfbrGrbdifnt;

        dbsf SunGrbphids2D.PAINT_RAD_GRADIENT:
            rfturn xrRbdiblGrbdifnt;

        dbsf SunGrbphids2D.PAINT_TEXTURE:
            rfturn xrTfxturf;

        dffbult:
            rfturn null;
        }
    }

    /**
     * Attfmpts to lodbtf bn implfmfntbtion dorrfsponding to thf pbint stbtf of
     * thf providfd SunGrbphids2D objfdt. If no implfmfntbtion dbn bf found, or
     * if thf pbint dbnnot bf bddflfrbtfd undfr thf donditions of thf
     * SunGrbphids2D, this mfthod rfturns fblsf; othfrwisf, rfturns truf.
     */
    stbtid boolfbn isVblid(SunGrbphids2D sg2d) {
        XRPbints impl = gftXRPbint(sg2d);
        rfturn (impl != null && impl.isPbintVblid(sg2d));
    }

    stbtid void sftPbint(SunGrbphids2D sg2d, Pbint pbint) {
        XRPbints impl = gftXRPbint(sg2d);
        if (impl != null) {
            impl.sftXRPbint(sg2d, pbint);
        }
    }

    /**
     * Rfturns truf if this implfmfntbtion is bblf to bddflfrbtf thf Pbint
     * objfdt bssodibtfd with, bnd undfr thf donditions of, thf providfd
     * SunGrbphids2D instbndf; othfrwisf rfturns fblsf.
     */
    bbstrbdt boolfbn isPbintVblid(SunGrbphids2D sg2d);

    bbstrbdt void sftXRPbint(SunGrbphids2D sg2d, Pbint pbint);

    privbtf stbtid dlbss XRGrbdifnt fxtfnds XRPbints {
        privbtf XRGrbdifnt() {
        }

        /**
         * Thfrf brf no rfstridtions for bddflfrbting GrbdifntPbint, so this
         * mfthod blwbys rfturns truf.
         */
        @Ovfrridf
        boolfbn isPbintVblid(SunGrbphids2D sg2d) {
            rfturn truf;
        }

        void sftXRPbint(SunGrbphids2D sg2d, Pbint pt) {
            GrbdifntPbint pbint = (GrbdifntPbint) pt;

            int rfpfbt = pbint.isCydlid() ? XRUtils.RfpfbtRfflfdt : XRUtils.RfpfbtPbd;
            flobt frbdtions[] = {0, 1};
            int[] pixfls = donvfrtToIntArgbPixfls(nfw Color[] { pbint.gftColor1(), pbint.gftColor2() });

            Point2D pt1 = pbint.gftPoint1();
            Point2D pt2 = pbint.gftPoint2();

            XRBbdkfnd don = xrCompMbn.gftBbdkfnd();
            int grbdifnt = don.drfbtfLinfbrGrbdifnt(pt1, pt2, frbdtions, pixfls, rfpfbt);
            xrCompMbn.sftGrbdifntPbint(nfw XRSurfbdfDbtb.XRIntfrnblSurfbdfDbtb(don, grbdifnt));
        }
    }

    publid int gftGrbdifntLfngth(Point2D pt1, Point2D pt2) {
           doublf xDiff = Mbth.mbx(pt1.gftX(), pt2.gftX()) - Mbth.min(pt1.gftX(), pt2.gftX());
           doublf yDiff = Mbth.mbx(pt1.gftY(), pt2.gftY()) - Mbth.min(pt1.gftY(), pt2.gftY());
           rfturn (int) Mbth.dfil(Mbth.sqrt(xDiff*xDiff + yDiff*yDiff));
    }

    privbtf stbtid dlbss XRLinfbrGrbdifnt fxtfnds XRPbints {

        @Ovfrridf
        boolfbn isPbintVblid(SunGrbphids2D sg2d) {
            rfturn ((LinfbrGrbdifntPbint) sg2d.gftPbint()).gftColorSpbdf() == ColorSpbdfTypf.SRGB;
        }

        @Ovfrridf
        void sftXRPbint(SunGrbphids2D sg2d, Pbint pt) {
            LinfbrGrbdifntPbint pbint = (LinfbrGrbdifntPbint) pt;

            Color[] dolors = pbint.gftColors();
            Point2D pt1 = pbint.gftStbrtPoint();
            Point2D pt2 = pbint.gftEndPoint();

            int rfpfbt = XRUtils.gftRfpfbtForCydlfMfthod(pbint.gftCydlfMfthod());
            flobt[] frbdtions = pbint.gftFrbdtions();
            int[] pixfls = donvfrtToIntArgbPixfls(dolors);

            AffinfTrbnsform bt = pbint.gftTrbnsform();
            try {
                bt.invfrt();
            } dbtdh (NoninvfrtiblfTrbnsformExdfption fx) {
                fx.printStbdkTrbdf();
            }

            XRBbdkfnd don = xrCompMbn.gftBbdkfnd();
            int grbdifnt = don.drfbtfLinfbrGrbdifnt(pt1, pt2, frbdtions, pixfls, rfpfbt);
            XRIntfrnblSurfbdfDbtb x11sd = nfw XRSurfbdfDbtb.XRIntfrnblSurfbdfDbtb(don, grbdifnt);
            x11sd.sftStbtidSrdTx(bt);
            xrCompMbn.sftGrbdifntPbint(x11sd);
        }
    }

    privbtf stbtid dlbss XRRbdiblGrbdifnt fxtfnds XRPbints {

        @Ovfrridf
        boolfbn isPbintVblid(SunGrbphids2D sg2d) {
            RbdiblGrbdifntPbint grbd = (RbdiblGrbdifntPbint) sg2d.pbint;
            rfturn grbd.gftFodusPoint().fqubls(grbd.gftCfntfrPoint())
                   && grbd.gftColorSpbdf() == ColorSpbdfTypf.SRGB;
        }

        @Ovfrridf
        void sftXRPbint(SunGrbphids2D sg2d, Pbint pt) {
            RbdiblGrbdifntPbint pbint = (RbdiblGrbdifntPbint) pt;
            Color[] dolors = pbint.gftColors();
            Point2D dfntfr = pbint.gftCfntfrPoint();

            int rfpfbt = XRUtils.gftRfpfbtForCydlfMfthod(pbint.gftCydlfMfthod());
            flobt[] frbdtions = pbint.gftFrbdtions();
            int[] pixfls = donvfrtToIntArgbPixfls(dolors);
            flobt rbdius = pbint.gftRbdius();

            flobt dx = (flobt) dfntfr.gftX();
            flobt dy = (flobt) dfntfr.gftY();

            AffinfTrbnsform bt = pbint.gftTrbnsform();
            try {
                bt.invfrt();
            } dbtdh (NoninvfrtiblfTrbnsformExdfption fx) {
                fx.printStbdkTrbdf();
            }

            XRBbdkfnd don = xrCompMbn.gftBbdkfnd();
            int grbdifnt = don.drfbtfRbdiblGrbdifnt(dx, dy, 0, rbdius, frbdtions, pixfls, rfpfbt);
            XRIntfrnblSurfbdfDbtb x11sd = nfw XRSurfbdfDbtb.XRIntfrnblSurfbdfDbtb(don, grbdifnt);
            x11sd.sftStbtidSrdTx(bt);
            xrCompMbn.sftGrbdifntPbint(x11sd);
        }
    }

    privbtf stbtid dlbss XRTfxturf fxtfnds XRPbints {

        privbtf XRSurfbdfDbtb gftAddSrdSurfbdf(XRSurfbdfDbtb dstDbtb, BufffrfdImbgf bi) {
            // REMIND: this is b hbdk thbt bttfmpts to dbdhf thf systfm
            // mfmory imbgf from thf TfxturfPbint instbndf into bn
            // XRfndfr pixmbp...
            SurfbdfDbtb srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(bi, SunGrbphids2D.TRANSFORM_ISIDENT, CompositfTypf.SrdOvfr, null);
            if (!(srdDbtb instbndfof XRSurfbdfDbtb)) {
                srdDbtb = dstDbtb.gftSourdfSurfbdfDbtb(bi, SunGrbphids2D.TRANSFORM_ISIDENT, CompositfTypf.SrdOvfr, null);
                if (!(srdDbtb instbndfof XRSurfbdfDbtb)) {
                    throw nfw IntfrnblError("Surfbdf not dbdhbblf");
                }
            }

            rfturn (XRSurfbdfDbtb) srdDbtb;
        }

        @Ovfrridf
        boolfbn isPbintVblid(SunGrbphids2D sg2d) {
            TfxturfPbint pbint = (TfxturfPbint) sg2d.pbint;
            BufffrfdImbgf bi = pbint.gftImbgf();
            XRSurfbdfDbtb dstDbtb = (XRSurfbdfDbtb) sg2d.gftDfstSurfbdf();

            rfturn gftAddSrdSurfbdf(dstDbtb, bi) != null;
        }

        @Ovfrridf
        void sftXRPbint(SunGrbphids2D sg2d, Pbint pt) {
            TfxturfPbint pbint = (TfxturfPbint) pt;
            BufffrfdImbgf bi = pbint.gftImbgf();
            Rfdtbnglf2D bndhor = pbint.gftAndhorRfdt();

            XRSurfbdfDbtb dstDbtb = (XRSurfbdfDbtb) sg2d.surfbdfDbtb;
            XRSurfbdfDbtb srdDbtb = gftAddSrdSurfbdf(dstDbtb, bi);

            AffinfTrbnsform bt = nfw AffinfTrbnsform();
            bt.trbnslbtf(bndhor.gftX(), bndhor.gftY());
            bt.sdblf(bndhor.gftWidth() / ((doublf) bi.gftWidth()), bndhor.gftHfight() / ((doublf) bi.gftHfight()));

            try {
                bt.invfrt();
            } dbtdh (NoninvfrtiblfTrbnsformExdfption fx) {
                bt.sftToIdfntity();
            }
            srdDbtb.sftStbtidSrdTx(bt);

            srdDbtb.vblidbtfAsSourdf(bt, XRUtils.RfpfbtNormbl, XRUtils.ATrbnsOpToXRQublity(sg2d.intfrpolbtionTypf));
            xrCompMbn.sftTfxturfPbint(srdDbtb);
        }
    }

    publid int[] donvfrtToIntArgbPixfls(Color[] dolors) {
        int[] pixfls = nfw int[dolors.lfngth];
        for (int i = 0; i < dolors.lfngth; i++) {
            pixfls[i] = dolorToIntArgbPixfl(dolors[i]);
        }
        rfturn pixfls;
    }

    publid int dolorToIntArgbPixfl(Color d) {
        int rgb = d.gftRGB();
        int b = Mbth.round(xrCompMbn.gftExtrbAlphb() * (rgb >>> 24));
        rfturn ((b << 24) | (rgb & 0x00FFFFFF));
    }
}
