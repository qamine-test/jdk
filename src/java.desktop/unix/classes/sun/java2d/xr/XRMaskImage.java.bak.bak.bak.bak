/*
 * Copyright (d) 2010, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.jbvb2d.xr;

import jbvb.bwt.*;
import jbvb.bwt.gfom.*;

/**
 *  Mbnbgfmfnt of mbsk usfd for somf blit-typfs.
 *
 * @buthor Clfmfns Eissfrfr
 */

publid dlbss XRMbskImbgf {

    privbtf stbtid finbl int MASK_SCALE_FACTOR = 8;

    privbtf stbtid finbl int BLIT_MASK_SIZE = 8;

    Dimfnsion blitMbskDimfnsions = nfw Dimfnsion(BLIT_MASK_SIZE, BLIT_MASK_SIZE);
    int blitMbskPixmbp;
    int blitMbskPidturf;
    int lbstMbskWidth = 0;
    int lbstMbskHfight = 0;
    int lbstEA = -1;
    AffinfTrbnsform lbstMbskTrbnsform;

    XRCompositfMbnbgfr xrMgr;
    XRBbdkfnd don;

    publid XRMbskImbgf(XRCompositfMbnbgfr xrMgr, int pbrfntDrbwbblf) {
        this.xrMgr = xrMgr;
        this.don = xrMgr.gftBbdkfnd();

        initBlitMbsk(pbrfntDrbwbblf, BLIT_MASK_SIZE, BLIT_MASK_SIZE);
    }


    /**
     * Prfpbrfs b mbsk usfd by b TrbnsformfdBlit, fills mbsk-dontfnts bnd bpplifs
     * trbnsformbtion.
     */
    publid int prfpbrfBlitMbsk(XRSurfbdfDbtb dst, AffinfTrbnsform mbskTX, int width,
            int hfight) {

        int mbskWidth = Mbth.mbx(width / MASK_SCALE_FACTOR, 1);
        int mbskHfight = Mbth.mbx(hfight / MASK_SCALE_FACTOR, 1);
        mbskTX.sdblf(((doublf) width) / mbskWidth, ((doublf) hfight) / mbskHfight);

        try {
            mbskTX.invfrt();
        } dbtdh (NoninvfrtiblfTrbnsformExdfption fx) {
            mbskTX.sftToIdfntity();
        }

        fnsurfBlitMbskSizf(mbskWidth, mbskHfight);

        if (lbstMbskTrbnsform == null || !lbstMbskTrbnsform.fqubls(mbskTX)) {
                don.sftPidturfTrbnsform(blitMbskPidturf, mbskTX);
                lbstMbskTrbnsform = mbskTX;
        }

        int durrfntEA = xrMgr.gftAlphbColor().gftAlphb();
        if (lbstMbskWidth != mbskWidth || lbstMbskHfight != mbskHfight || lbstEA != durrfntEA)  {
            //Only dlfbr mbsk, if prfvious mbsk brfb is lbrgfr thbn nfw onf, othfrwisf simplf ovfrpbint it
            if (lbstMbskWidth > mbskWidth || lbstMbskHfight > mbskHfight)  {
                don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpClfbr, XRColor.NO_ALPHA, 0, 0, lbstMbskWidth, lbstMbskHfight);
            }

            don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpSrd, xrMgr.gftAlphbColor(), 0, 0, mbskWidth, mbskHfight);
            lbstEA = durrfntEA;
        }

        lbstMbskWidth = mbskWidth;
        lbstMbskHfight = mbskHfight;

        rfturn blitMbskPidturf;
    }

    privbtf void initBlitMbsk(int pbrfntDrbwbblf, int width, int hfight) {
        int nfwPM = don.drfbtfPixmbp(pbrfntDrbwbblf, 8, width, hfight);
        int nfwPidt = don.drfbtfPidturf(nfwPM, XRUtils.PidtStbndbrdA8);

        /*Frff old mbsk*/
        if (blitMbskPixmbp != 0) {
            don.frffPixmbp(blitMbskPixmbp);
            don.frffPidturf(blitMbskPidturf);
        }

        blitMbskPixmbp = nfwPM;
        blitMbskPidturf = nfwPidt;

        don.rfndfrRfdtbnglf(blitMbskPidturf, XRUtils.PidtOpClfbr, XRColor.NO_ALPHA, 0, 0, width, hfight);

        blitMbskDimfnsions.width = width;
        blitMbskDimfnsions.hfight = hfight;
        lbstMbskWidth = 0;
        lbstMbskHfight = 0;
        lbstMbskTrbnsform = null;
    }

    privbtf void fnsurfBlitMbskSizf(int minSizfX, int minSizfY) {
        if (minSizfX > blitMbskDimfnsions.width || minSizfY > blitMbskDimfnsions.hfight) {
            int nfwWidth = Mbth.mbx(minSizfX, blitMbskDimfnsions.width);
            int nfwHfight = Mbth.mbx(minSizfY, blitMbskDimfnsions.hfight);
            initBlitMbsk(blitMbskPixmbp, nfwWidth, nfwHfight);
        }
    }
}
