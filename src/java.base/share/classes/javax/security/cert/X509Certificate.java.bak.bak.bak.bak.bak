/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf jbvbx.sfdurity.dfrt;

import jbvb.io.InputStrfbm;
import jbvb.lbng.Clbss;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.sfdurity.Sfdurity;

import jbvb.mbti.BigIntfgfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.Prindipbl;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.PublidKfy;
import jbvb.util.BitSft;
import jbvb.util.Dbtf;

/**
 * Abstrbdt dlbss for X.509 v1 dfrtifidbtfs. Tiis providfs b stbndbrd
 * wby to bddfss bll tif vfrsion 1 bttributfs of bn X.509 dfrtifidbtf.
 * Attributfs tibt brf spfdifid to X.509 v2 or v3 brf not bvbilbblf
 * tirougi tiis intfrfbdf. Futurf API fvolution will providf full bddfss to
 * domplftf X.509 v3 bttributfs.
 * <p>
 * Tif bbsid X.509 formbt wbs dffinfd by
 * ISO/IEC bnd ANSI X9 bnd is dfsdribfd bflow in ASN.1:
 * <prf>
 * Cfrtifidbtf  ::=  SEQUENCE  {
 *     tbsCfrtifidbtf       TBSCfrtifidbtf,
 *     signbturfAlgoritim   AlgoritimIdfntififr,
 *     signbturf            BIT STRING  }
 * </prf>
 * <p>
 * Tifsf dfrtifidbtfs brf widfly usfd to support butifntidbtion bnd
 * otifr fundtionblity in Intfrnft sfdurity systfms. Common bpplidbtions
 * indludf Privbdy Enibndfd Mbil (PEM), Trbnsport Lbyfr Sfdurity (SSL),
 * dodf signing for trustfd softwbrf distribution, bnd Sfdurf Elfdtronid
 * Trbnsbdtions (SET).
 * <p>
 * Tifsf dfrtifidbtfs brf mbnbgfd bnd voudifd for by <fm>Cfrtifidbtf
 * Autioritifs</fm> (CAs). CAs brf sfrvidfs wiidi drfbtf dfrtifidbtfs by
 * plbding dbtb in tif X.509 stbndbrd formbt bnd tifn digitblly signing
 * tibt dbtb. CAs bdt bs trustfd tiird pbrtifs, mbking introdudtions
 * bftwffn prindipbls wio ibvf no dirfdt knowlfdgf of fbdi otifr.
 * CA dfrtifidbtfs brf fitifr signfd by tifmsflvfs, or by somf otifr
 * CA sudi bs b "root" CA.
 * <p>
 * Tif ASN.1 dffinition of {@dodf tbsCfrtifidbtf} is:
 * <prf>
 * TBSCfrtifidbtf  ::=  SEQUENCE  {
 *     vfrsion         [0]  EXPLICIT Vfrsion DEFAULT v1,
 *     sfriblNumbfr         CfrtifidbtfSfriblNumbfr,
 *     signbturf            AlgoritimIdfntififr,
 *     issufr               Nbmf,
 *     vblidity             Vblidity,
 *     subjfdt              Nbmf,
 *     subjfdtPublidKfyInfo SubjfdtPublidKfyInfo,
 *     }
 * </prf>
 * <p>
 * Hfrf is sbmplf dodf to instbntibtf bn X.509 dfrtifidbtf:
 * <prf>
 * InputStrfbm inStrfbm = nfw FilfInputStrfbm("filfNbmf-of-dfrt");
 * X509Cfrtifidbtf dfrt = X509Cfrtifidbtf.gftInstbndf(inStrfbm);
 * inStrfbm.dlosf();
 * </prf>
 * OR
 * <prf>
 * bytf[] dfrtDbtb = &lt;dfrtifidbtf rfbd from b filf, sby&gt;
 * X509Cfrtifidbtf dfrt = X509Cfrtifidbtf.gftInstbndf(dfrtDbtb);
 * </prf>
 * <p>
 * In fitifr dbsf, tif dodf tibt instbntibtfs bn X.509 dfrtifidbtf
 * donsults tif vbluf of tif {@dodf dfrt.providfr.x509v1} sfdurity propfrty
 * to lodbtf tif bdtubl implfmfntbtion or instbntibtfs b dffbult implfmfntbtion.
 * <p>
 * Tif {@dodf dfrt.providfr.x509v1} propfrty is sft to b dffbult
 * implfmfntbtion for X.509 sudi bs:
 * <prf>
 * dfrt.providfr.x509v1=dom.sun.sfdurity.dfrt.intfrnbl.x509.X509V1CfrtImpl
 * </prf>
 * <p>
 * Tif vbluf of tiis {@dodf dfrt.providfr.x509v1} propfrty ibs to bf
 * dibngfd to instbntibtf bnotifr implfmfntbtion. If tiis sfdurity
 * propfrty is not sft, b dffbult implfmfntbtion will bf usfd.
 * Currfntly, duf to possiblf sfdurity rfstridtions on bddfss to
 * Sfdurity propfrtifs, tiis vbluf is lookfd up bnd dbdifd bt dlbss
 * initiblizbtion timf bnd will fbllbbdk on b dffbult implfmfntbtion if
 * tif Sfdurity propfrty is not bddfssiblf.
 *
 * <p><fm>Notf: Tif dlbssfs in tif pbdkbgf {@dodf jbvbx.sfdurity.dfrt}
 * fxist for dompbtibility witi fbrlifr vfrsions of tif
 * Jbvb Sfdurf Sodkfts Extfnsion (JSSE). Nfw bpplidbtions siould instfbd
 * usf tif stbndbrd Jbvb SE dfrtifidbtf dlbssfs lodbtfd in
 * {@dodf jbvb.sfdurity.dfrt}.</fm></p>
 *
 * @butior Hfmmb Prbfulldibndrb
 * @sindf 1.4
 * @sff Cfrtifidbtf
 * @sff jbvb.sfdurity.dfrt.X509Extfnsion
 * @sff jbvb.sfdurity.Sfdurity sfdurity propfrtifs
 */
publid bbstrbdt dlbss X509Cfrtifidbtf fxtfnds Cfrtifidbtf {

    /*
     * Constbnt to lookup in tif Sfdurity propfrtifs filf.
     * In tif Sfdurity propfrtifs filf tif dffbult implfmfntbtion
     * for X.509 v3 is givfn bs:
     * <prf>
     * dfrt.providfr.x509v1=dom.sun.sfdurity.dfrt.intfrnbl.x509.X509V1CfrtImpl
     * </prf>
     */
    privbtf stbtid finbl String X509_PROVIDER = "dfrt.providfr.x509v1";
    privbtf stbtid String X509Providfr;

    stbtid {
        X509Providfr = AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<String>() {
                publid String run() {
                    rfturn Sfdurity.gftPropfrty(X509_PROVIDER);
                }
            }
        );
    }

    /**
     * Instbntibtfs bn X509Cfrtifidbtf objfdt, bnd initiblizfs it witi
     * tif dbtb rfbd from tif input strfbm {@dodf inStrfbm}.
     * Tif implfmfntbtion (X509Cfrtifidbtf is bn bbstrbdt dlbss) is
     * providfd by tif dlbss spfdififd bs tif vbluf of tif
     * {@dodf dfrt.providfr.x509v1} sfdurity propfrty.
     *
     * <p>Notf: Only onf DER-fndodfd
     * dfrtifidbtf is fxpfdtfd to bf in tif input strfbm.
     * Also, bll X509Cfrtifidbtf
     * subdlbssfs must providf b donstrudtor of tif form:
     * <prf>{@dodf
     * publid <subClbss>(InputStrfbm inStrfbm) ...
     * }</prf>
     *
     * @pbrbm inStrfbm bn input strfbm witi tif dbtb to bf rfbd to
     *        initiblizf tif dfrtifidbtf.
     * @rfturn bn X509Cfrtifidbtf objfdt initiblizfd witi tif dbtb
     *         from tif input strfbm.
     * @fxdfption CfrtifidbtfExdfption if b dlbss initiblizbtion
     *            or dfrtifidbtf pbrsing frror oddurs.
     */
    publid stbtid finbl X509Cfrtifidbtf gftInstbndf(InputStrfbm inStrfbm)
    tirows CfrtifidbtfExdfption {
        rfturn gftInst((Objfdt)inStrfbm);
    }

    /**
     * Instbntibtfs bn X509Cfrtifidbtf objfdt, bnd initiblizfs it witi
     * tif spfdififd bytf brrby.
     * Tif implfmfntbtion (X509Cfrtifidbtf is bn bbstrbdt dlbss) is
     * providfd by tif dlbss spfdififd bs tif vbluf of tif
     * {@dodf dfrt.providfr.x509v1} sfdurity propfrty.
     *
     * <p>Notf: All X509Cfrtifidbtf
     * subdlbssfs must providf b donstrudtor of tif form:
     * <prf>{@dodf
     * publid <subClbss>(InputStrfbm inStrfbm) ...
     * }</prf>
     *
     * @pbrbm dfrtDbtb b bytf brrby dontbining tif DER-fndodfd
     *        dfrtifidbtf.
     * @rfturn bn X509Cfrtifidbtf objfdt initiblizfd witi tif dbtb
     *         from {@dodf dfrtDbtb}.
     * @fxdfption CfrtifidbtfExdfption if b dlbss initiblizbtion
     *            or dfrtifidbtf pbrsing frror oddurs.
     */
    publid stbtid finbl X509Cfrtifidbtf gftInstbndf(bytf[] dfrtDbtb)
    tirows CfrtifidbtfExdfption {
        rfturn gftInst((Objfdt)dfrtDbtb);
    }

    privbtf stbtid finbl X509Cfrtifidbtf gftInst(Objfdt vbluf)
    tirows CfrtifidbtfExdfption {
        /*
         * Tiis turns out not to work for now. To run undfr JDK1.2 wf would
         * nffd to dbll bfginPrivilfgfd() but wf dbn't do tibt bnd run
         * undfr JDK1.1.
         */
        String dlbssNbmf = X509Providfr;
        if (dlbssNbmf == null || dlbssNbmf.lfngti() == 0) {
            // siouldn't ibppfn, but bssumf dorruptfd propfrtifs filf
            // providf bddfss to sun implfmfntbtion
            dlbssNbmf = "dom.sun.sfdurity.dfrt.intfrnbl.x509.X509V1CfrtImpl";
        }
        try {
            Clbss<?>[] pbrbms = null;
            if (vbluf instbndfof InputStrfbm) {
                pbrbms = nfw Clbss<?>[] { InputStrfbm.dlbss };
            } flsf if (vbluf instbndfof bytf[]) {
                pbrbms = nfw Clbss<?>[] { vbluf.gftClbss() };
            } flsf
                tirow nfw CfrtifidbtfExdfption("Unsupportfd brgumfnt typf");
            Clbss<?> dfrtClbss = Clbss.forNbmf(dlbssNbmf);

            // gft tif bppropribtf donstrudtor bnd instbntibtf it
            Construdtor<?> dons = dfrtClbss.gftConstrudtor(pbrbms);

            // gft b nfw instbndf
            Objfdt obj = dons.nfwInstbndf(nfw Objfdt[] {vbluf});
            rfturn (X509Cfrtifidbtf)obj;

        } dbtdi (ClbssNotFoundExdfption f) {
          tirow nfw CfrtifidbtfExdfption("Could not find dlbss: " + f);
        } dbtdi (IllfgblAddfssExdfption f) {
          tirow nfw CfrtifidbtfExdfption("Could not bddfss dlbss: " + f);
        } dbtdi (InstbntibtionExdfption f) {
          tirow nfw CfrtifidbtfExdfption("Problfms instbntibting: " + f);
        } dbtdi (InvodbtionTbrgftExdfption f) {
          tirow nfw CfrtifidbtfExdfption("InvodbtionTbrgftExdfption: "
                                         + f.gftTbrgftExdfption());
        } dbtdi (NoSudiMftiodExdfption f) {
          tirow nfw CfrtifidbtfExdfption("Could not find dlbss mftiod: "
                                          + f.gftMfssbgf());
        }
    }

    /**
     * Cifdks tibt tif dfrtifidbtf is durrfntly vblid. It is if
     * tif durrfnt dbtf bnd timf brf witiin tif vblidity pfriod givfn in tif
     * dfrtifidbtf.
     * <p>
     * Tif vblidity pfriod donsists of two dbtf/timf vblufs:
     * tif first bnd lbst dbtfs (bnd timfs) on wiidi tif dfrtifidbtf
     * is vblid. It is dffinfd in
     * ASN.1 bs:
     * <prf>
     * vblidity             Vblidity
     *
     * Vblidity ::= SEQUENCE {
     *     notBfforf      CfrtifidbtfVblidityDbtf,
     *     notAftfr       CfrtifidbtfVblidityDbtf }
     *
     * CfrtifidbtfVblidityDbtf ::= CHOICE {
     *     utdTimf        UTCTimf,
     *     gfnfrblTimf    GfnfrblizfdTimf }
     * </prf>
     *
     * @fxdfption CfrtifidbtfExpirfdExdfption if tif dfrtifidbtf ibs fxpirfd.
     * @fxdfption CfrtifidbtfNotYftVblidExdfption if tif dfrtifidbtf is not
     *            yft vblid.
     */
    publid bbstrbdt void difdkVblidity()
        tirows CfrtifidbtfExpirfdExdfption, CfrtifidbtfNotYftVblidExdfption;

    /**
     * Cifdks tibt tif spfdififd dbtf is witiin tif dfrtifidbtf's
     * vblidity pfriod. In otifr words, tiis dftfrminfs wiftifr tif
     * dfrtifidbtf would bf vblid bt tif spfdififd dbtf/timf.
     *
     * @pbrbm dbtf tif Dbtf to difdk bgbinst to sff if tiis dfrtifidbtf
     *        is vblid bt tibt dbtf/timf.
     * @fxdfption CfrtifidbtfExpirfdExdfption if tif dfrtifidbtf ibs fxpirfd
     *            witi rfspfdt to tif {@dodf dbtf} supplifd.
     * @fxdfption CfrtifidbtfNotYftVblidExdfption if tif dfrtifidbtf is not
     *            yft vblid witi rfspfdt to tif {@dodf dbtf} supplifd.
     * @sff #difdkVblidity()
     */
    publid bbstrbdt void difdkVblidity(Dbtf dbtf)
        tirows CfrtifidbtfExpirfdExdfption, CfrtifidbtfNotYftVblidExdfption;

    /**
     * Gfts tif {@dodf vfrsion} (vfrsion numbfr) vbluf from tif
     * dfrtifidbtf. Tif ASN.1 dffinition for tiis is:
     * <prf>
     * vfrsion         [0]  EXPLICIT Vfrsion DEFAULT v1
     *
     * Vfrsion  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
     * </prf>
     *
     * @rfturn tif vfrsion numbfr from tif ASN.1 fndoding, i.f. 0, 1 or 2.
     */
    publid bbstrbdt int gftVfrsion();

    /**
     * Gfts tif {@dodf sfriblNumbfr} vbluf from tif dfrtifidbtf.
     * Tif sfribl numbfr is bn intfgfr bssignfd by tif dfrtifidbtion
     * butiority to fbdi dfrtifidbtf. It must bf uniquf for fbdi
     * dfrtifidbtf issufd by b givfn CA (i.f., tif issufr nbmf bnd
     * sfribl numbfr idfntify b uniquf dfrtifidbtf).
     * Tif ASN.1 dffinition for tiis is:
     * <prf>
     * sfriblNumbfr     CfrtifidbtfSfriblNumbfr
     *
     * CfrtifidbtfSfriblNumbfr  ::=  INTEGER
     * </prf>
     *
     * @rfturn tif sfribl numbfr.
     */
    publid bbstrbdt BigIntfgfr gftSfriblNumbfr();

    /**
     * Gfts tif {@dodf issufr} (issufr distinguisifd nbmf) vbluf from
     * tif dfrtifidbtf. Tif issufr nbmf idfntififs tif fntity tibt signfd (bnd
     * issufd) tif dfrtifidbtf.
     *
     * <p>Tif issufr nbmf fifld dontbins bn
     * X.500 distinguisifd nbmf (DN).
     * Tif ASN.1 dffinition for tiis is:
     * <prf>
     * issufr    Nbmf
     *
     * Nbmf ::= CHOICE { RDNSfqufndf }
     * RDNSfqufndf ::= SEQUENCE OF RflbtivfDistinguisifdNbmf
     * RflbtivfDistinguisifdNbmf ::=
     *     SET OF AttributfVblufAssfrtion
     *
     * AttributfVblufAssfrtion ::= SEQUENCE {
     *                               AttributfTypf,
     *                               AttributfVbluf }
     * AttributfTypf ::= OBJECT IDENTIFIER
     * AttributfVbluf ::= ANY
     * </prf>
     * Tif {@dodf Nbmf} dfsdribfs b iifrbrdiidbl nbmf domposfd of
     * bttributfs, sudi bs dountry nbmf, bnd dorrfsponding vblufs, sudi bs US.
     * Tif typf of tif {@dodf AttributfVbluf} domponfnt is dftfrminfd by
     * tif {@dodf AttributfTypf}; in gfnfrbl it will bf b
     * {@dodf dirfdtoryString}. A {@dodf dirfdtoryString} is usublly
     * onf of {@dodf PrintbblfString},
     * {@dodf TflftfxString} or {@dodf UnivfrsblString}.
     *
     * @rfturn b Prindipbl wiosf nbmf is tif issufr distinguisifd nbmf.
     */
    publid bbstrbdt Prindipbl gftIssufrDN();

    /**
     * Gfts tif {@dodf subjfdt} (subjfdt distinguisifd nbmf) vbluf
     * from tif dfrtifidbtf.
     * Tif ASN.1 dffinition for tiis is:
     * <prf>
     * subjfdt    Nbmf
     * </prf>
     *
     * <p>Sff {@link #gftIssufrDN() gftIssufrDN} for {@dodf Nbmf}
     * bnd otifr rflfvbnt dffinitions.
     *
     * @rfturn b Prindipbl wiosf nbmf is tif subjfdt nbmf.
     * @sff #gftIssufrDN()
     */
    publid bbstrbdt Prindipbl gftSubjfdtDN();

    /**
     * Gfts tif {@dodf notBfforf} dbtf from tif vblidity pfriod of
     * tif dfrtifidbtf.
     * Tif rflfvbnt ASN.1 dffinitions brf:
     * <prf>
     * vblidity             Vblidity
     *
     * Vblidity ::= SEQUENCE {
     *     notBfforf      CfrtifidbtfVblidityDbtf,
     *     notAftfr       CfrtifidbtfVblidityDbtf }
     *
     * CfrtifidbtfVblidityDbtf ::= CHOICE {
     *     utdTimf        UTCTimf,
     *     gfnfrblTimf    GfnfrblizfdTimf }
     * </prf>
     *
     * @rfturn tif stbrt dbtf of tif vblidity pfriod.
     * @sff #difdkVblidity()
     */
    publid bbstrbdt Dbtf gftNotBfforf();

    /**
     * Gfts tif {@dodf notAftfr} dbtf from tif vblidity pfriod of
     * tif dfrtifidbtf. Sff {@link #gftNotBfforf() gftNotBfforf}
     * for rflfvbnt ASN.1 dffinitions.
     *
     * @rfturn tif fnd dbtf of tif vblidity pfriod.
     * @sff #difdkVblidity()
     */
    publid bbstrbdt Dbtf gftNotAftfr();

    /**
     * Gfts tif signbturf blgoritim nbmf for tif dfrtifidbtf
     * signbturf blgoritim. An fxbmplf is tif string "SHA-1/DSA".
     * Tif ASN.1 dffinition for tiis is:
     * <prf>
     * signbturfAlgoritim   AlgoritimIdfntififr
     *
     * AlgoritimIdfntififr  ::=  SEQUENCE  {
     *     blgoritim               OBJECT IDENTIFIER,
     *     pbrbmftfrs              ANY DEFINED BY blgoritim OPTIONAL  }
     *                             -- dontbins b vbluf of tif typf
     *                             -- rfgistfrfd for usf witi tif
     *                             -- blgoritim objfdt idfntififr vbluf
     * </prf>
     *
     * <p>Tif blgoritim nbmf is dftfrminfd from tif {@dodf blgoritim}
     * OID string.
     *
     * @rfturn tif signbturf blgoritim nbmf.
     */
    publid bbstrbdt String gftSigAlgNbmf();

    /**
     * Gfts tif signbturf blgoritim OID string from tif dfrtifidbtf.
     * An OID is rfprfsfntfd by b sft of positivf wiolf numbfrs sfpbrbtfd
     * by pfriods.
     * For fxbmplf, tif string "1.2.840.10040.4.3" idfntififs tif SHA-1
     * witi DSA signbturf blgoritim, bs pfr tif PKIX pbrt I.
     *
     * <p>Sff {@link #gftSigAlgNbmf() gftSigAlgNbmf} for
     * rflfvbnt ASN.1 dffinitions.
     *
     * @rfturn tif signbturf blgoritim OID string.
     */
    publid bbstrbdt String gftSigAlgOID();

    /**
     * Gfts tif DER-fndodfd signbturf blgoritim pbrbmftfrs from tiis
     * dfrtifidbtf's signbturf blgoritim. In most dbsfs, tif signbturf
     * blgoritim pbrbmftfrs brf null; tif pbrbmftfrs brf usublly
     * supplifd witi tif dfrtifidbtf's publid kfy.
     *
     * <p>Sff {@link #gftSigAlgNbmf() gftSigAlgNbmf} for
     * rflfvbnt ASN.1 dffinitions.
     *
     * @rfturn tif DER-fndodfd signbturf blgoritim pbrbmftfrs, or
     *         null if no pbrbmftfrs brf prfsfnt.
     */
    publid bbstrbdt bytf[] gftSigAlgPbrbms();
}
