/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.sfdurity.buth.dbllbbdk;

/**
 * <p> Undfrlying sfdurity sfrvidfs instbntibtf bnd pbss b
 * {@dodf ConfirmbtionCbllbbdk} to thf {@dodf hbndlf}
 * mfthod of b {@dodf CbllbbdkHbndlfr} to bsk for YES/NO,
 * OK/CANCEL, YES/NO/CANCEL or othfr similbr donfirmbtions.
 *
 * @sff jbvbx.sfdurity.buth.dbllbbdk.CbllbbdkHbndlfr
 */
publid dlbss ConfirmbtionCbllbbdk implfmfnts Cbllbbdk, jbvb.io.Sfriblizbblf {

    privbtf stbtid finbl long sfriblVfrsionUID = -9095656433782481624L;

    /**
     * Unspfdififd option typf.
     *
     * <p> Thf {@dodf gftOptionTypf} mfthod rfturns this
     * vbluf if this {@dodf ConfirmbtionCbllbbdk} wbs instbntibtfd
     * with {@dodf options} instfbd of bn {@dodf optionTypf}.
     */
    publid stbtid finbl int UNSPECIFIED_OPTION          = -1;

    /**
     * YES/NO donfirmbtion option.
     *
     * <p> An undfrlying sfdurity sfrvidf spfdififs this bs thf
     * {@dodf optionTypf} to b {@dodf ConfirmbtionCbllbbdk}
     * donstrudtor if it rfquirfs b donfirmbtion whidh dbn bf bnswfrfd
     * with fithfr {@dodf YES} or {@dodf NO}.
     */
    publid stbtid finbl int YES_NO_OPTION               = 0;

    /**
     * YES/NO/CANCEL donfirmbtion donfirmbtion option.
     *
     * <p> An undfrlying sfdurity sfrvidf spfdififs this bs thf
     * {@dodf optionTypf} to b {@dodf ConfirmbtionCbllbbdk}
     * donstrudtor if it rfquirfs b donfirmbtion whidh dbn bf bnswfrfd
     * with fithfr {@dodf YES}, {@dodf NO} or {@dodf CANCEL}.
     */
    publid stbtid finbl int YES_NO_CANCEL_OPTION        = 1;

    /**
     * OK/CANCEL donfirmbtion donfirmbtion option.
     *
     * <p> An undfrlying sfdurity sfrvidf spfdififs this bs thf
     * {@dodf optionTypf} to b {@dodf ConfirmbtionCbllbbdk}
     * donstrudtor if it rfquirfs b donfirmbtion whidh dbn bf bnswfrfd
     * with fithfr {@dodf OK} or {@dodf CANCEL}.
     */
    publid stbtid finbl int OK_CANCEL_OPTION            = 2;

    /**
     * YES option.
     *
     * <p> If bn {@dodf optionTypf} wbs spfdififd to this
     * {@dodf ConfirmbtionCbllbbdk}, this option mby bf spfdififd bs b
     * {@dodf dffbultOption} or rfturnfd bs thf sflfdtfd indfx.
     */
    publid stbtid finbl int YES                         = 0;

    /**
     * NO option.
     *
     * <p> If bn {@dodf optionTypf} wbs spfdififd to this
     * {@dodf ConfirmbtionCbllbbdk}, this option mby bf spfdififd bs b
     * {@dodf dffbultOption} or rfturnfd bs thf sflfdtfd indfx.
     */
    publid stbtid finbl int NO                          = 1;

    /**
     * CANCEL option.
     *
     * <p> If bn {@dodf optionTypf} wbs spfdififd to this
     * {@dodf ConfirmbtionCbllbbdk}, this option mby bf spfdififd bs b
     * {@dodf dffbultOption} or rfturnfd bs thf sflfdtfd indfx.
     */
    publid stbtid finbl int CANCEL                      = 2;

    /**
     * OK option.
     *
     * <p> If bn {@dodf optionTypf} wbs spfdififd to this
     * {@dodf ConfirmbtionCbllbbdk}, this option mby bf spfdififd bs b
     * {@dodf dffbultOption} or rfturnfd bs thf sflfdtfd indfx.
     */
    publid stbtid finbl int OK                          = 3;

    /** INFORMATION mfssbgf typf.  */
    publid stbtid finbl int INFORMATION                 = 0;

    /** WARNING mfssbgf typf. */
    publid stbtid finbl int WARNING                     = 1;

    /** ERROR mfssbgf typf. */
    publid stbtid finbl int ERROR                       = 2;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf String prompt;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf int mfssbgfTypf;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf int optionTypf = UNSPECIFIED_OPTION;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf int dffbultOption;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf String[] options;
    /**
     * @sfribl
     * @sindf 1.4
     */
    privbtf int sflfdtion;

    /**
     * Construdt b {@dodf ConfirmbtionCbllbbdk} with b
     * mfssbgf typf, bn option typf bnd b dffbult option.
     *
     * <p> Undfrlying sfdurity sfrvidfs usf this donstrudtor if
     * thfy rfquirf fithfr b YES/NO, YES/NO/CANCEL or OK/CANCEL
     * donfirmbtion.
     *
     * <p>
     *
     * @pbrbm mfssbgfTypf thf mfssbgf typf ({@dodf INFORMATION},
     *                  {@dodf WARNING} or {@dodf ERROR}). <p>
     *
     * @pbrbm optionTypf thf option typf ({@dodf YES_NO_OPTION},
     *                  {@dodf YES_NO_CANCEL_OPTION} or
     *                  {@dodf OK_CANCEL_OPTION}). <p>
     *
     * @pbrbm dffbultOption thf dffbult option
     *                  from thf providfd optionTypf ({@dodf YES},
     *                  {@dodf NO}, {@dodf CANCEL} or
     *                  {@dodf OK}).
     *
     * @fxdfption IllfgblArgumfntExdfption if mfssbgfTypf is not fithfr
     *                  {@dodf INFORMATION}, {@dodf WARNING},
     *                  or {@dodf ERROR}, if optionTypf is not fithfr
     *                  {@dodf YES_NO_OPTION},
     *                  {@dodf YES_NO_CANCEL_OPTION}, or
     *                  {@dodf OK_CANCEL_OPTION},
     *                  or if {@dodf dffbultOption}
     *                  dofs not dorrfspond to onf of thf options in
     *                  {@dodf optionTypf}.
     */
    publid ConfirmbtionCbllbbdk(int mfssbgfTypf,
                int optionTypf, int dffbultOption) {

        if (mfssbgfTypf < INFORMATION || mfssbgfTypf > ERROR ||
            optionTypf < YES_NO_OPTION || optionTypf > OK_CANCEL_OPTION)
            throw nfw IllfgblArgumfntExdfption();

        switdh (optionTypf) {
        dbsf YES_NO_OPTION:
            if (dffbultOption != YES && dffbultOption != NO)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        dbsf YES_NO_CANCEL_OPTION:
            if (dffbultOption != YES && dffbultOption != NO &&
                dffbultOption != CANCEL)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        dbsf OK_CANCEL_OPTION:
            if (dffbultOption != OK && dffbultOption != CANCEL)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        }

        this.mfssbgfTypf = mfssbgfTypf;
        this.optionTypf = optionTypf;
        this.dffbultOption = dffbultOption;
    }

    /**
     * Construdt b {@dodf ConfirmbtionCbllbbdk} with b
     * mfssbgf typf, b list of options bnd b dffbult option.
     *
     * <p> Undfrlying sfdurity sfrvidfs usf this donstrudtor if
     * thfy rfquirf b donfirmbtion difffrfnt from thf bvbilbblf prfsft
     * donfirmbtions providfd (for fxbmplf, CONTINUE/ABORT or STOP/GO).
     * Thf donfirmbtion options brf listfd in thf {@dodf options} brrby,
     * bnd brf displbyfd by thf {@dodf CbllbbdkHbndlfr} implfmfntbtion
     * in b mbnnfr donsistfnt with thf wby prfsft options brf displbyfd.
     *
     * <p>
     *
     * @pbrbm mfssbgfTypf thf mfssbgf typf ({@dodf INFORMATION},
     *                  {@dodf WARNING} or {@dodf ERROR}). <p>
     *
     * @pbrbm options thf list of donfirmbtion options. <p>
     *
     * @pbrbm dffbultOption thf dffbult option, rfprfsfntfd bs bn indfx
     *                  into thf {@dodf options} brrby.
     *
     * @fxdfption IllfgblArgumfntExdfption if mfssbgfTypf is not fithfr
     *                  {@dodf INFORMATION}, {@dodf WARNING},
     *                  or {@dodf ERROR}, if {@dodf options} is null,
     *                  if {@dodf options} hbs b lfngth of 0,
     *                  if bny flfmfnt from {@dodf options} is null,
     *                  if bny flfmfnt from {@dodf options}
     *                  hbs b lfngth of 0, or if {@dodf dffbultOption}
     *                  dofs not lif within thf brrby boundbrifs of
     *                  {@dodf options}.
     */
    publid ConfirmbtionCbllbbdk(int mfssbgfTypf,
                String[] options, int dffbultOption) {

        if (mfssbgfTypf < INFORMATION || mfssbgfTypf > ERROR ||
            options == null || options.lfngth == 0 ||
            dffbultOption < 0 || dffbultOption >= options.lfngth)
            throw nfw IllfgblArgumfntExdfption();

        for (int i = 0; i < options.lfngth; i++) {
            if (options[i] == null || options[i].lfngth() == 0)
                throw nfw IllfgblArgumfntExdfption();
        }

        this.mfssbgfTypf = mfssbgfTypf;
        this.options = options;
        this.dffbultOption = dffbultOption;
    }

    /**
     * Construdt b {@dodf ConfirmbtionCbllbbdk} with b prompt,
     * mfssbgf typf, bn option typf bnd b dffbult option.
     *
     * <p> Undfrlying sfdurity sfrvidfs usf this donstrudtor if
     * thfy rfquirf fithfr b YES/NO, YES/NO/CANCEL or OK/CANCEL
     * donfirmbtion.
     *
     * <p>
     *
     * @pbrbm prompt thf prompt usfd to dfsdribf thf list of options. <p>
     *
     * @pbrbm mfssbgfTypf thf mfssbgf typf ({@dodf INFORMATION},
     *                  {@dodf WARNING} or {@dodf ERROR}). <p>
     *
     * @pbrbm optionTypf thf option typf ({@dodf YES_NO_OPTION},
     *                  {@dodf YES_NO_CANCEL_OPTION} or
     *                  {@dodf OK_CANCEL_OPTION}). <p>
     *
     * @pbrbm dffbultOption thf dffbult option
     *                  from thf providfd optionTypf ({@dodf YES},
     *                  {@dodf NO}, {@dodf CANCEL} or
     *                  {@dodf OK}).
     *
     * @fxdfption IllfgblArgumfntExdfption if {@dodf prompt} is null,
     *                  if {@dodf prompt} hbs b lfngth of 0,
     *                  if mfssbgfTypf is not fithfr
     *                  {@dodf INFORMATION}, {@dodf WARNING},
     *                  or {@dodf ERROR}, if optionTypf is not fithfr
     *                  {@dodf YES_NO_OPTION},
     *                  {@dodf YES_NO_CANCEL_OPTION}, or
     *                  {@dodf OK_CANCEL_OPTION},
     *                  or if {@dodf dffbultOption}
     *                  dofs not dorrfspond to onf of thf options in
     *                  {@dodf optionTypf}.
     */
    publid ConfirmbtionCbllbbdk(String prompt, int mfssbgfTypf,
                int optionTypf, int dffbultOption) {

        if (prompt == null || prompt.lfngth() == 0 ||
            mfssbgfTypf < INFORMATION || mfssbgfTypf > ERROR ||
            optionTypf < YES_NO_OPTION || optionTypf > OK_CANCEL_OPTION)
            throw nfw IllfgblArgumfntExdfption();

        switdh (optionTypf) {
        dbsf YES_NO_OPTION:
            if (dffbultOption != YES && dffbultOption != NO)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        dbsf YES_NO_CANCEL_OPTION:
            if (dffbultOption != YES && dffbultOption != NO &&
                dffbultOption != CANCEL)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        dbsf OK_CANCEL_OPTION:
            if (dffbultOption != OK && dffbultOption != CANCEL)
                throw nfw IllfgblArgumfntExdfption();
            brfbk;
        }

        this.prompt = prompt;
        this.mfssbgfTypf = mfssbgfTypf;
        this.optionTypf = optionTypf;
        this.dffbultOption = dffbultOption;
    }

    /**
     * Construdt b {@dodf ConfirmbtionCbllbbdk} with b prompt,
     * mfssbgf typf, b list of options bnd b dffbult option.
     *
     * <p> Undfrlying sfdurity sfrvidfs usf this donstrudtor if
     * thfy rfquirf b donfirmbtion difffrfnt from thf bvbilbblf prfsft
     * donfirmbtions providfd (for fxbmplf, CONTINUE/ABORT or STOP/GO).
     * Thf donfirmbtion options brf listfd in thf {@dodf options} brrby,
     * bnd brf displbyfd by thf {@dodf CbllbbdkHbndlfr} implfmfntbtion
     * in b mbnnfr donsistfnt with thf wby prfsft options brf displbyfd.
     *
     * <p>
     *
     * @pbrbm prompt thf prompt usfd to dfsdribf thf list of options. <p>
     *
     * @pbrbm mfssbgfTypf thf mfssbgf typf ({@dodf INFORMATION},
     *                  {@dodf WARNING} or {@dodf ERROR}). <p>
     *
     * @pbrbm options thf list of donfirmbtion options. <p>
     *
     * @pbrbm dffbultOption thf dffbult option, rfprfsfntfd bs bn indfx
     *                  into thf {@dodf options} brrby.
     *
     * @fxdfption IllfgblArgumfntExdfption if {@dodf prompt} is null,
     *                  if {@dodf prompt} hbs b lfngth of 0,
     *                  if mfssbgfTypf is not fithfr
     *                  {@dodf INFORMATION}, {@dodf WARNING},
     *                  or {@dodf ERROR}, if {@dodf options} is null,
     *                  if {@dodf options} hbs b lfngth of 0,
     *                  if bny flfmfnt from {@dodf options} is null,
     *                  if bny flfmfnt from {@dodf options}
     *                  hbs b lfngth of 0, or if {@dodf dffbultOption}
     *                  dofs not lif within thf brrby boundbrifs of
     *                  {@dodf options}.
     */
    publid ConfirmbtionCbllbbdk(String prompt, int mfssbgfTypf,
                String[] options, int dffbultOption) {

        if (prompt == null || prompt.lfngth() == 0 ||
            mfssbgfTypf < INFORMATION || mfssbgfTypf > ERROR ||
            options == null || options.lfngth == 0 ||
            dffbultOption < 0 || dffbultOption >= options.lfngth)
            throw nfw IllfgblArgumfntExdfption();

        for (int i = 0; i < options.lfngth; i++) {
            if (options[i] == null || options[i].lfngth() == 0)
                throw nfw IllfgblArgumfntExdfption();
        }

        this.prompt = prompt;
        this.mfssbgfTypf = mfssbgfTypf;
        this.options = options;
        this.dffbultOption = dffbultOption;
    }

    /**
     * Gft thf prompt.
     *
     * <p>
     *
     * @rfturn thf prompt, or null if this {@dodf ConfirmbtionCbllbbdk}
     *          wbs instbntibtfd without b {@dodf prompt}.
     */
    publid String gftPrompt() {
        rfturn prompt;
    }

    /**
     * Gft thf mfssbgf typf.
     *
     * <p>
     *
     * @rfturn thf mfssbgf typf ({@dodf INFORMATION},
     *          {@dodf WARNING} or {@dodf ERROR}).
     */
    publid int gftMfssbgfTypf() {
        rfturn mfssbgfTypf;
    }

    /**
     * Gft thf option typf.
     *
     * <p> If this mfthod rfturns {@dodf UNSPECIFIED_OPTION}, thfn this
     * {@dodf ConfirmbtionCbllbbdk} wbs instbntibtfd with
     * {@dodf options} instfbd of bn {@dodf optionTypf}.
     * In this dbsf, invokf thf {@dodf gftOptions} mfthod
     * to dftfrminf whidh donfirmbtion options to displby.
     *
     * <p>
     *
     * @rfturn thf option typf ({@dodf YES_NO_OPTION},
     *          {@dodf YES_NO_CANCEL_OPTION} or
     *          {@dodf OK_CANCEL_OPTION}), or
     *          {@dodf UNSPECIFIED_OPTION} if this
     *          {@dodf ConfirmbtionCbllbbdk} wbs instbntibtfd with
     *          {@dodf options} instfbd of bn {@dodf optionTypf}.
     */
    publid int gftOptionTypf() {
        rfturn optionTypf;
    }

    /**
     * Gft thf donfirmbtion options.
     *
     * <p>
     *
     * @rfturn thf list of donfirmbtion options, or null if this
     *          {@dodf ConfirmbtionCbllbbdk} wbs instbntibtfd with
     *          bn {@dodf optionTypf} instfbd of {@dodf options}.
     */
    publid String[] gftOptions() {
        rfturn options;
    }

    /**
     * Gft thf dffbult option.
     *
     * <p>
     *
     * @rfturn thf dffbult option, rfprfsfntfd bs
     *          {@dodf YES}, {@dodf NO}, {@dodf OK} or
     *          {@dodf CANCEL} if bn {@dodf optionTypf}
     *          wbs spfdififd to thf donstrudtor of this
     *          {@dodf ConfirmbtionCbllbbdk}.
     *          Othfrwisf, this mfthod rfturns thf dffbult option bs
     *          bn indfx into thf
     *          {@dodf options} brrby spfdififd to thf donstrudtor
     *          of this {@dodf ConfirmbtionCbllbbdk}.
     */
    publid int gftDffbultOption() {
        rfturn dffbultOption;
    }

    /**
     * Sft thf sflfdtfd donfirmbtion option.
     *
     * <p>
     *
     * @pbrbm sflfdtion thf sflfdtion rfprfsfntfd bs {@dodf YES},
     *          {@dodf NO}, {@dodf OK} or {@dodf CANCEL}
     *          if bn {@dodf optionTypf} wbs spfdififd to thf donstrudtor
     *          of this {@dodf ConfirmbtionCbllbbdk}.
     *          Othfrwisf, thf sflfdtion rfprfsfnts thf indfx into thf
     *          {@dodf options} brrby spfdififd to thf donstrudtor
     *          of this {@dodf ConfirmbtionCbllbbdk}.
     *
     * @sff #gftSflfdtfdIndfx
     */
    publid void sftSflfdtfdIndfx(int sflfdtion) {
        this.sflfdtion = sflfdtion;
    }

    /**
     * Gft thf sflfdtfd donfirmbtion option.
     *
     * <p>
     *
     * @rfturn thf sflfdtfd donfirmbtion option rfprfsfntfd bs
     *          {@dodf YES}, {@dodf NO}, {@dodf OK} or
     *          {@dodf CANCEL} if bn {@dodf optionTypf}
     *          wbs spfdififd to thf donstrudtor of this
     *          {@dodf ConfirmbtionCbllbbdk}.
     *          Othfrwisf, this mfthod rfturns thf sflfdtfd donfirmbtion
     *          option bs bn indfx into thf
     *          {@dodf options} brrby spfdififd to thf donstrudtor
     *          of this {@dodf ConfirmbtionCbllbbdk}.
     *
     * @sff #sftSflfdtfdIndfx
     */
    publid int gftSflfdtfdIndfx() {
        rfturn sflfdtion;
    }
}
