/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.nft.ssl;

import jbvb.nio.BytfBufffr;
import jbvb.nio.RfbdOnlyBufffrExdfption;


/**
 * A dlbss whidh fnbblfs sfdurf dommunidbtions using protodols sudh bs
 * thf Sfdurf Sodkfts Lbyfr (SSL) or
 * <A HREF="http://www.iftf.org/rfd/rfd2246.txt"> IETF RFC 2246 "Trbnsport
 * Lbyfr Sfdurity" (TLS) </A> protodols, but is trbnsport indfpfndfnt.
 * <P>
 * Thf sfdurf dommunidbtions modfs indludf: <UL>
 *
 *      <LI> <fm>Intfgrity Protfdtion</fm>.  SSL/TLS protfdts bgbinst
 *      modifidbtion of mfssbgfs by bn bdtivf wirftbppfr.
 *
 *      <LI> <fm>Authfntidbtion</fm>.  In most modfs, SSL/TLS providfs
 *      pffr buthfntidbtion.  Sfrvfrs brf usublly buthfntidbtfd, bnd
 *      dlifnts mby bf buthfntidbtfd bs rfqufstfd by sfrvfrs.
 *
 *      <LI> <fm>Confidfntiblity (Privbdy Protfdtion)</fm>.  In most
 *      modfs, SSL/TLS fndrypts dbtb bfing sfnt bftwffn dlifnt bnd
 *      sfrvfr.  This protfdts thf donfidfntiblity of dbtb, so thbt
 *      pbssivf wirftbppfrs won't sff sfnsitivf dbtb sudh bs finbndibl
 *      informbtion or pfrsonbl informbtion of mbny kinds.
 *
 *      </UL>
 *
 * Thfsf kinds of protfdtion brf spfdififd by b "diphfr suitf", whidh
 * is b dombinbtion of dryptogrbphid blgorithms usfd by b givfn SSL
 * donnfdtion.  During thf nfgotibtion prodfss, thf two fndpoints must
 * bgrff on b diphfr suitf thbt is bvbilbblf in both fnvironmfnts.  If
 * thfrf is no sudh suitf in dommon, no SSL donnfdtion dbn bf
 * fstbblishfd, bnd no dbtb dbn bf fxdhbngfd.
 * <P>
 * Thf diphfr suitf usfd is fstbblishfd by b nfgotibtion prodfss dbllfd
 * "hbndshbking".  Thf gobl of this prodfss is to drfbtf or rfjoin b
 * "sfssion", whidh mby protfdt mbny donnfdtions ovfr timf.  Aftfr
 * hbndshbking hbs domplftfd, you dbn bddfss sfssion bttributfs by
 * using thf {@link #gftSfssion()} mfthod.
 * <P>
 * Thf <dodf>SSLSodkft</dodf> dlbss providfs mudh of thf sbmf sfdurity
 * fundtionblity, but bll of thf inbound bnd outbound dbtb is
 * butombtidblly trbnsportfd using thf undfrlying {@link
 * jbvb.nft.Sodkft Sodkft}, whidh by dfsign usfs b blodking modfl.
 * Whilf this is bppropribtf for mbny bpplidbtions, this modfl dofs not
 * providf thf sdblbbility rfquirfd by lbrgf sfrvfrs.
 * <P>
 * Thf primbry distindtion of bn <dodf>SSLEnginf</dodf> is thbt it
 * opfrbtfs on inbound bnd outbound bytf strfbms, indfpfndfnt of thf
 * trbnsport mfdhbnism.  It is thf rfsponsibility of thf
 * <dodf>SSLEnginf</dodf> usfr to brrbngf for rflibblf I/O trbnsport to
 * thf pffr.  By sfpbrbting thf SSL/TLS bbstrbdtion from thf I/O
 * trbnsport mfdhbnism, thf <dodf>SSLEnginf</dodf> dbn bf usfd for b
 * widf vbrifty of I/O typfs, sudh bs {@link
 * jbvb.nio.dhbnnfls.spi.AbstrbdtSflfdtbblfChbnnfl#donfigurfBlodking(boolfbn)
 * non-blodking I/O (polling)}, {@link jbvb.nio.dhbnnfls.Sflfdtor
 * sflfdtbblf non-blodking I/O}, {@link jbvb.nft.Sodkft Sodkft} bnd thf
 * trbditionbl Input/OutputStrfbms, lodbl {@link jbvb.nio.BytfBufffr
 * BytfBufffrs} or bytf brrbys, <A
 * HREF="http://www.jdp.org/fn/jsr/dftbil?id=203"> futurf bsyndhronous
 * I/O modfls </A>, bnd so on.
 * <P>
 * At b high lfvfl, thf <dodf>SSLEnginf</dodf> bppfbrs thus:
 *
 * <prf>
 *                   bpp dbtb
 *
 *                |           ^
 *                |     |     |
 *                v     |     |
 *           +----+-----|-----+----+
 *           |          |          |
 *           |       SSL|Enginf    |
 *   wrbp()  |          |          |  unwrbp()
 *           | OUTBOUND | INBOUND  |
 *           |          |          |
 *           +----+-----|-----+----+
 *                |     |     ^
 *                |     |     |
 *                v           |
 *
 *                   nft dbtb
 * </prf>
 * Applidbtion dbtb (blso known bs plbintfxt or dlfbrtfxt) is dbtb whidh
 * is produdfd or donsumfd by bn bpplidbtion.  Its dountfrpbrt is
 * nftwork dbtb, whidh donsists of fithfr hbndshbking bnd/or diphfrtfxt
 * (fndryptfd) dbtb, bnd dfstinfd to bf trbnsportfd vib bn I/O
 * mfdhbnism.  Inbound dbtb is dbtb whidh hbs bffn rfdfivfd from thf
 * pffr, bnd outbound dbtb is dfstinfd for thf pffr.
 * <P>
 * (In thf dontfxt of bn <dodf>SSLEnginf</dodf>, thf tfrm "hbndshbkf
 * dbtb" is tbkfn to mfbn bny dbtb fxdhbngfd to fstbblish bnd dontrol b
 * sfdurf donnfdtion.  Hbndshbkf dbtb indludfs thf SSL/TLS mfssbgfs
 * "blfrt", "dhbngf_diphfr_spfd," bnd "hbndshbkf.")
 * <P>
 * Thfrf brf fivf distindt phbsfs to bn <dodf>SSLEnginf</dodf>.
 *
 * <OL>
 *     <li> Crfbtion - Thf <dodf>SSLEnginf</dodf> hbs bffn drfbtfd bnd
 *     initiblizfd, but hbs not yft bffn usfd.  During this phbsf, bn
 *     bpplidbtion mby sft bny <dodf>SSLEnginf</dodf>-spfdifid sfttings
 *     (fnbblfd diphfr suitfs, whfthfr thf <dodf>SSLEnginf</dodf> should
 *     hbndshbkf in dlifnt or sfrvfr modf, bnd so on).  Ondf
 *     hbndshbking hbs bfgun, though, bny nfw sfttings (fxdfpt
 *     dlifnt/sfrvfr modf, sff bflow) will bf usfd for
 *     thf nfxt hbndshbkf.
 *
 *     <li> Initibl Hbndshbkf - Thf initibl hbndshbkf is b prodfdurf by
 *     whidh thf two pffrs fxdhbngf dommunidbtion pbrbmftfrs until bn
 *     SSLSfssion is fstbblishfd.  Applidbtion dbtb dbn not bf sfnt during
 *     this phbsf.
 *
 *     <li> Applidbtion Dbtb - Ondf thf dommunidbtion pbrbmftfrs hbvf
 *     bffn fstbblishfd bnd thf hbndshbkf is domplftf, bpplidbtion dbtb
 *     mby flow through thf <dodf>SSLEnginf</dodf>.  Outbound
 *     bpplidbtion mfssbgfs brf fndryptfd bnd intfgrity protfdtfd,
 *     bnd inbound mfssbgfs rfvfrsf thf prodfss.
 *
 *     <li>  Rfhbndshbking - Eithfr sidf mby rfqufst b rfnfgotibtion of
 *     thf sfssion bt bny timf during thf Applidbtion Dbtb phbsf.  Nfw
 *     hbndshbking dbtb dbn bf intfrmixfd bmong thf bpplidbtion dbtb.
 *     Bfforf stbrting thf rfhbndshbkf phbsf, thf bpplidbtion mby
 *     rfsft thf SSL/TLS dommunidbtion pbrbmftfrs sudh bs thf list of
 *     fnbblfd diphfrsuitfs bnd whfthfr to usf dlifnt buthfntidbtion,
 *     but dbn not dhbngf bftwffn dlifnt/sfrvfr modfs.  As bfforf, ondf
 *     hbndshbking hbs bfgun, bny nfw <dodf>SSLEnginf</dodf>
 *     donfigurbtion sfttings will not bf usfd until thf nfxt
 *     hbndshbkf.
 *
 *     <li>  Closurf - Whfn thf donnfdtion is no longfr nffdfd, thf
 *     bpplidbtion should dlosf thf <dodf>SSLEnginf</dodf> bnd should
 *     sfnd/rfdfivf bny rfmbining mfssbgfs to thf pffr bfforf
 *     dlosing thf undfrlying trbnsport mfdhbnism.  Ondf bn fnginf is
 *     dlosfd, it is not rfusbblf:  b nfw <dodf>SSLEnginf</dodf> must
 *     bf drfbtfd.
 * </OL>
 * An <dodf>SSLEnginf</dodf> is drfbtfd by dblling {@link
 * SSLContfxt#drfbtfSSLEnginf()} from bn initiblizfd
 * <dodf>SSLContfxt</dodf>.  Any donfigurbtion
 * pbrbmftfrs should bf sft bfforf mbking thf first dbll to
 * <dodf>wrbp()</dodf>, <dodf>unwrbp()</dodf>, or
 * <dodf>bfginHbndshbkf()</dodf>.  Thfsf mfthods bll triggfr thf
 * initibl hbndshbkf.
 * <P>
 * Dbtb movfs through thf fnginf by dblling {@link #wrbp(BytfBufffr,
 * BytfBufffr) wrbp()} or {@link #unwrbp(BytfBufffr, BytfBufffr)
 * unwrbp()} on outbound or inbound dbtb, rfspfdtivfly.  Dfpfnding on
 * thf stbtf of thf <dodf>SSLEnginf</dodf>, b <dodf>wrbp()</dodf> dbll
 * mby donsumf bpplidbtion dbtb from thf sourdf bufffr bnd mby produdf
 * nftwork dbtb in thf dfstinbtion bufffr.  Thf outbound dbtb
 * mby dontbin bpplidbtion bnd/or hbndshbkf dbtb.  A dbll to
 * <dodf>unwrbp()</dodf> will fxbminf thf sourdf bufffr bnd mby
 * bdvbndf thf hbndshbkf if thf dbtb is hbndshbking informbtion, or
 * mby plbdf bpplidbtion dbtb in thf dfstinbtion bufffr if thf dbtb
 * is bpplidbtion.  Thf stbtf of thf undfrlying SSL/TLS blgorithm
 * will dftfrminf whfn dbtb is donsumfd bnd produdfd.
 * <P>
 * Cblls to <dodf>wrbp()</dodf> bnd <dodf>unwrbp()</dodf> rfturn bn
 * <dodf>SSLEnginfRfsult</dodf> whidh indidbtfs thf stbtus of thf
 * opfrbtion, bnd (optionblly) how to intfrbdt with thf fnginf to mbkf
 * progrfss.
 * <P>
 * Thf <dodf>SSLEnginf</dodf> produdfs/donsumfs domplftf SSL/TLS
 * pbdkfts only, bnd dofs not storf bpplidbtion dbtb intfrnblly bftwffn
 * dblls to <dodf>wrbp()/unwrbp()</dodf>.  Thus input bnd output
 * <dodf>BytfBufffr</dodf>s must bf sizfd bppropribtfly to hold thf
 * mbximum rfdord thbt dbn bf produdfd.  Cblls to {@link
 * SSLSfssion#gftPbdkftBufffrSizf()} bnd {@link
 * SSLSfssion#gftApplidbtionBufffrSizf()} should bf usfd to dftfrminf
 * thf bppropribtf bufffr sizfs.  Thf sizf of thf outbound bpplidbtion
 * dbtb bufffr gfnfrblly dofs not mbttfr.  If bufffr donditions do not
 * bllow for thf propfr donsumption/produdtion of dbtb, thf bpplidbtion
 * must dftfrminf (vib {@link SSLEnginfRfsult}) bnd dorrfdt thf
 * problfm, bnd thfn try thf dbll bgbin.
 * <P>
 * For fxbmplf, <dodf>unwrbp()</dodf> will rfturn b {@link
 * SSLEnginfRfsult.Stbtus#BUFFER_OVERFLOW} rfsult if thf fnginf
 * dftfrminfs thbt thfrf is not fnough dfstinbtion bufffr spbdf bvbilbblf.
 * Applidbtions should dbll {@link SSLSfssion#gftApplidbtionBufffrSizf()}
 * bnd dompbrf thbt vbluf with thf spbdf bvbilbblf in thf dfstinbtion bufffr,
 * fnlbrging thf bufffr if nfdfssbry.  Similbrly, if <dodf>unwrbp()</dodf>
 * wfrf to rfturn b {@link SSLEnginfRfsult.Stbtus#BUFFER_UNDERFLOW}, thf
 * bpplidbtion should dbll {@link SSLSfssion#gftPbdkftBufffrSizf()} to fnsurf
 * thbt thf sourdf bufffr hbs fnough room to hold b rfdord (fnlbrging if
 * nfdfssbry), bnd thfn obtbin morf inbound dbtb.
 *
 * <prf>{@dodf
 *   SSLEnginfRfsult r = fnginf.unwrbp(srd, dst);
 *   switdh (r.gftStbtus()) {
 *   BUFFER_OVERFLOW:
 *       // Could bttfmpt to drbin thf dst bufffr of bny blrfbdy obtbinfd
 *       // dbtb, but wf'll just indrfbsf it to thf sizf nffdfd.
 *       int bppSizf = fnginf.gftSfssion().gftApplidbtionBufffrSizf();
 *       BytfBufffr b = BytfBufffr.bllodbtf(bppSizf + dst.position());
 *       dst.flip();
 *       b.put(dst);
 *       dst = b;
 *       // rftry thf opfrbtion.
 *       brfbk;
 *   BUFFER_UNDERFLOW:
 *       int nftSizf = fnginf.gftSfssion().gftPbdkftBufffrSizf();
 *       // Rfsizf bufffr if nffdfd.
 *       if (nftSizf > dst.dbpbdity()) {
 *           BytfBufffr b = BytfBufffr.bllodbtf(nftSizf);
 *           srd.flip();
 *           b.put(srd);
 *           srd = b;
 *       }
 *       // Obtbin morf inbound nftwork dbtb for srd,
 *       // thfn rftry thf opfrbtion.
 *       brfbk;
 *   // othfr dbsfs: CLOSED, OK.
 *   }
 * }</prf>
 *
 * <P>
 * Unlikf <dodf>SSLSodkft</dodf>, bll mfthods of SSLEnginf brf
 * non-blodking.  <dodf>SSLEnginf</dodf> implfmfntbtions mby
 * rfquirf thf rfsults of tbsks thbt mby tbkf bn fxtfndfd pfriod of
 * timf to domplftf, or mby fvfn blodk.  For fxbmplf, b TrustMbnbgfr
 * mby nffd to donnfdt to b rfmotf dfrtifidbtf vblidbtion sfrvidf,
 * or b KfyMbnbgfr might nffd to prompt b usfr to dftfrminf whidh
 * dfrtifidbtf to usf bs pbrt of dlifnt buthfntidbtion.  Additionblly,
 * drfbting dryptogrbphid signbturfs bnd vfrifying thfm dbn bf slow,
 * sffmingly blodking.
 * <P>
 * For bny opfrbtion whidh mby potfntiblly blodk, thf
 * <dodf>SSLEnginf</dodf> will drfbtf b {@link jbvb.lbng.Runnbblf}
 * dflfgbtfd tbsk.  Whfn <dodf>SSLEnginfRfsult</dodf> indidbtfs thbt b
 * dflfgbtfd tbsk rfsult is nffdfd, thf bpplidbtion must dbll {@link
 * #gftDflfgbtfdTbsk()} to obtbin bn outstbnding dflfgbtfd tbsk bnd
 * dbll its {@link jbvb.lbng.Runnbblf#run() run()} mfthod (possibly using
 * b difffrfnt thrfbd dfpfnding on thf domputf strbtfgy).  Thf
 * bpplidbtion should dontinuf obtbining dflfgbtfd tbsks until no morf
 * fxist, bnd try thf originbl opfrbtion bgbin.
 * <P>
 * At thf fnd of b dommunidbtion sfssion, bpplidbtions should propfrly
 * dlosf thf SSL/TLS link.  Thf SSL/TLS protodols hbvf dlosurf hbndshbkf
 * mfssbgfs, bnd thfsf mfssbgfs should bf dommunidbtfd to thf pffr
 * bfforf rflfbsing thf <dodf>SSLEnginf</dodf> bnd dlosing thf
 * undfrlying trbnsport mfdhbnism.  A dlosf dbn bf initibtfd by onf of:
 * bn SSLExdfption, bn inbound dlosurf hbndshbkf mfssbgf, or onf of thf
 * dlosf mfthods.  In bll dbsfs, dlosurf hbndshbkf mfssbgfs brf
 * gfnfrbtfd by thf fnginf, bnd <dodf>wrbp()</dodf> should bf rfpfbtfdly
 * dbllfd until thf rfsulting <dodf>SSLEnginfRfsult</dodf>'s stbtus
 * rfturns "CLOSED", or {@link #isOutboundDonf()} rfturns truf.  All
 * dbtb obtbinfd from thf <dodf>wrbp()</dodf> mfthod should bf sfnt to thf
 * pffr.
 * <P>
 * {@link #dlosfOutbound()} is usfd to signbl thf fnginf thbt thf
 * bpplidbtion will not bf sfnding bny morf dbtb.
 * <P>
 * A pffr will signbl its intfnt to dlosf by sfnding its own dlosurf
 * hbndshbkf mfssbgf.  Aftfr this mfssbgf hbs bffn rfdfivfd bnd
 * prodfssfd by thf lodbl <dodf>SSLEnginf</dodf>'s <dodf>unwrbp()</dodf>
 * dbll, thf bpplidbtion dbn dftfdt thf dlosf by dblling
 * <dodf>unwrbp()</dodf> bnd looking for b <dodf>SSLEnginfRfsult</dodf>
 * with stbtus "CLOSED", or if {@link #isInboundDonf()} rfturns truf.
 * If for somf rfbson thf pffr dlosfs thf dommunidbtion link without
 * sfnding thf propfr SSL/TLS dlosurf mfssbgf, thf bpplidbtion dbn
 * dftfdt thf fnd-of-strfbm bnd dbn signbl thf fnginf vib {@link
 * #dlosfInbound()} thbt thfrf will no morf inbound mfssbgfs to
 * prodfss.  Somf bpplidbtions might dhoosf to rfquirf ordfrly shutdown
 * mfssbgfs from b pffr, in whidh dbsf thfy dbn dhfdk thbt thf dlosurf
 * wbs gfnfrbtfd by b hbndshbkf mfssbgf bnd not by bn fnd-of-strfbm
 * dondition.
 * <P>
 * Thfrf brf two groups of diphfr suitfs whidh you will nffd to know
 * bbout whfn mbnbging diphfr suitfs:
 *
 * <UL>
 *      <LI> <fm>Supportfd</fm> diphfr suitfs:  bll thf suitfs whidh brf
 *      supportfd by thf SSL implfmfntbtion.  This list is rfportfd
 *      using {@link #gftSupportfdCiphfrSuitfs()}.
 *
 *      <LI> <fm>Enbblfd</fm> diphfr suitfs, whidh mby bf ffwfr thbn
 *      thf full sft of supportfd suitfs.  This group is sft using thf
 *      {@link #sftEnbblfdCiphfrSuitfs(String [])} mfthod, bnd
 *      qufrifd using thf {@link #gftEnbblfdCiphfrSuitfs()} mfthod.
 *      Initiblly, b dffbult sft of diphfr suitfs will bf fnbblfd on b
 *      nfw fnginf thbt rfprfsfnts thf minimum suggfstfd
 *      donfigurbtion.
 * </UL>
 *
 * Implfmfntbtion dffbults rfquirf thbt only diphfr suitfs whidh
 * buthfntidbtf sfrvfrs bnd providf donfidfntiblity bf fnbblfd by
 * dffbult.  Only if both sidfs fxpliditly bgrff to unbuthfntidbtfd
 * bnd/or non-privbtf (unfndryptfd) dommunidbtions will sudh b
 * diphfr suitf bf sflfdtfd.
 * <P>
 * Ebdh SSL/TLS donnfdtion must hbvf onf dlifnt bnd onf sfrvfr, thus
 * fbdh fndpoint must dfdidf whidh rolf to bssumf.  This dhoidf dftfrminfs
 * who bfgins thf hbndshbking prodfss bs wfll bs whidh typf of mfssbgfs
 * should bf sfnt by fbdh pbrty.  Thf mfthod {@link
 * #sftUsfClifntModf(boolfbn)} donfigurfs thf modf.  Ondf thf initibl
 * hbndshbking hbs stbrtfd, bn <dodf>SSLEnginf</dodf> dbn not switdh
 * bftwffn dlifnt bnd sfrvfr modfs, fvfn whfn pfrforming rfnfgotibtions.
 * <P>
 * Applidbtions might dhoosf to prodfss dflfgbtfd tbsks in difffrfnt
 * thrfbds.  Whfn bn <dodf>SSLEnginf</dodf>
 * is drfbtfd, thf durrfnt {@link jbvb.sfdurity.AddfssControlContfxt}
 * is sbvfd.  All futurf dflfgbtfd tbsks will bf prodfssfd using this
 * dontfxt:  thbt is, bll bddfss dontrol dfdisions will bf mbdf using thf
 * dontfxt dbpturfd bt fnginf drfbtion.
 *
 * <HR>
 *
 * <B>Condurrfndy Notfs</B>:
 * Thfrf brf two dondurrfndy issufs to bf bwbrf of:
 *
 * <OL>
 *      <li>Thf <dodf>wrbp()</dodf> bnd <dodf>unwrbp()</dodf> mfthods
 *      mby fxfdutf dondurrfntly of fbdh othfr.
 *
 *      <li> Thf SSL/TLS protodols fmploy ordfrfd pbdkfts.
 *      Applidbtions must tbkf dbrf to fnsurf thbt gfnfrbtfd pbdkfts
 *      brf dflivfrfd in sfqufndf.  If pbdkfts brrivf
 *      out-of-ordfr, unfxpfdtfd or fbtbl rfsults mby oddur.
 * <P>
 *      For fxbmplf:
 *
 *      <prf>
 *              syndhronizfd (outboundLodk) {
 *                  sslEnginf.wrbp(srd, dst);
 *                  outboundQufuf.put(dst);
 *              }
 *      </prf>
 *
 *      As b dorollbry, two thrfbds must not bttfmpt to dbll thf sbmf mfthod
 *      (fithfr <dodf>wrbp()</dodf> or <dodf>unwrbp()</dodf>) dondurrfntly,
 *      bfdbusf thfrf is no wby to gubrbntff thf fvfntubl pbdkft ordfring.
 * </OL>
 *
 * @sff SSLContfxt
 * @sff SSLSodkft
 * @sff SSLSfrvfrSodkft
 * @sff SSLSfssion
 * @sff jbvb.nft.Sodkft
 *
 * @sindf 1.5
 * @buthor Brbd R. Wftmorf
 */

publid bbstrbdt dlbss SSLEnginf {

    privbtf String pffrHost = null;
    privbtf int pffrPort = -1;

    /**
     * Construdtor for bn <dodf>SSLEnginf</dodf> providing no hints
     * for bn intfrnbl sfssion rfusf strbtfgy.
     *
     * @sff     SSLContfxt#drfbtfSSLEnginf()
     * @sff     SSLSfssionContfxt
     */
    protfdtfd SSLEnginf() {
    }

    /**
     * Construdtor for bn <dodf>SSLEnginf</dodf>.
     * <P>
     * <dodf>SSLEnginf</dodf> implfmfntbtions mby usf thf
     * <dodf>pffrHost</dodf> bnd <dodf>pffrPort</dodf> pbrbmftfrs bs hints
     * for thfir intfrnbl sfssion rfusf strbtfgy.
     * <P>
     * Somf diphfr suitfs (sudh bs Kfrbfros) rfquirf rfmotf hostnbmf
     * informbtion. Implfmfntbtions of this dlbss should usf this
     * donstrudtor to usf Kfrbfros.
     * <P>
     * Thf pbrbmftfrs brf not buthfntidbtfd by thf
     * <dodf>SSLEnginf</dodf>.
     *
     * @pbrbm   pffrHost thf nbmf of thf pffr host
     * @pbrbm   pffrPort thf port numbfr of thf pffr
     * @sff     SSLContfxt#drfbtfSSLEnginf(String, int)
     * @sff     SSLSfssionContfxt
     */
    protfdtfd SSLEnginf(String pffrHost, int pffrPort) {
        this.pffrHost = pffrHost;
        this.pffrPort = pffrPort;
    }

    /**
     * Rfturns thf host nbmf of thf pffr.
     * <P>
     * Notf thbt thf vbluf is not buthfntidbtfd, bnd should not bf
     * rflifd upon.
     *
     * @rfturn  thf host nbmf of thf pffr, or null if nothing is
     *          bvbilbblf.
     */
    publid String gftPffrHost() {
        rfturn pffrHost;
    }

    /**
     * Rfturns thf port numbfr of thf pffr.
     * <P>
     * Notf thbt thf vbluf is not buthfntidbtfd, bnd should not bf
     * rflifd upon.
     *
     * @rfturn  thf port numbfr of thf pffr, or -1 if nothing is
     *          bvbilbblf.
     */
    publid int gftPffrPort() {
        rfturn pffrPort;
    }

    /**
     * Attfmpts to fndodf b bufffr of plbintfxt bpplidbtion dbtb into
     * SSL/TLS nftwork dbtb.
     * <P>
     * An invodbtion of this mfthod bfhbvfs in fxbdtly thf sbmf mbnnfr
     * bs thf invodbtion:
     * <blodkquotf><prf>
     * {@link #wrbp(BytfBufffr [], int, int, BytfBufffr)
     *     fnginf.wrbp(nfw BytfBufffr [] { srd }, 0, 1, dst);}
     * </prf></blodkquotf>
     *
     * @pbrbm   srd
     *          b <dodf>BytfBufffr</dodf> dontbining outbound bpplidbtion dbtb
     * @pbrbm   dst
     *          b <dodf>BytfBufffr</dodf> to hold outbound nftwork dbtb
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  RfbdOnlyBufffrExdfption
     *          if thf <dodf>dst</dodf> bufffr is rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srd</dodf> or <dodf>dst</dodf>
     *          is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     #wrbp(BytfBufffr [], int, int, BytfBufffr)
     */
    publid SSLEnginfRfsult wrbp(BytfBufffr srd,
            BytfBufffr dst) throws SSLExdfption {
        rfturn wrbp(nfw BytfBufffr [] { srd }, 0, 1, dst);
    }

    /**
     * Attfmpts to fndodf plbintfxt bytfs from b sfqufndf of dbtb
     * bufffrs into SSL/TLS nftwork dbtb.
     * <P>
     * An invodbtion of this mfthod bfhbvfs in fxbdtly thf sbmf mbnnfr
     * bs thf invodbtion:
     * <blodkquotf><prf>
     * {@link #wrbp(BytfBufffr [], int, int, BytfBufffr)
     *     fnginf.wrbp(srds, 0, srds.lfngth, dst);}
     * </prf></blodkquotf>
     *
     * @pbrbm   srds
     *          bn brrby of <dodf>BytfBufffrs</dodf> dontbining thf
     *          outbound bpplidbtion dbtb
     * @pbrbm   dst
     *          b <dodf>BytfBufffr</dodf> to hold outbound nftwork dbtb
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  RfbdOnlyBufffrExdfption
     *          if thf <dodf>dst</dodf> bufffr is rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srds</dodf> or <dodf>dst</dodf>
     *          is null, or if bny flfmfnt in <dodf>srds</dodf> is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     #wrbp(BytfBufffr [], int, int, BytfBufffr)
     */
    publid SSLEnginfRfsult wrbp(BytfBufffr [] srds,
            BytfBufffr dst) throws SSLExdfption {
        if (srds == null) {
            throw nfw IllfgblArgumfntExdfption("srd == null");
        }
        rfturn wrbp(srds, 0, srds.lfngth, dst);
    }


    /**
     * Attfmpts to fndodf plbintfxt bytfs from b subsfqufndf of dbtb
     * bufffrs into SSL/TLS nftwork dbtb.  This <i>"gbthfring"</i>
     * opfrbtion fndodfs, in b singlf invodbtion, b sfqufndf of bytfs
     * from onf or morf of b givfn sfqufndf of bufffrs.  Gbthfring
     * wrbps brf oftfn usfful whfn implfmfnting nftwork protodols or
     * filf formbts thbt, for fxbmplf, group dbtb into sfgmfnts
     * donsisting of onf or morf fixfd-lfngth hfbdfrs followfd by b
     * vbribblf-lfngth body.  Sff
     * {@link jbvb.nio.dhbnnfls.GbthfringBytfChbnnfl} for morf
     * informbtion on gbthfring, bnd {@link
     * jbvb.nio.dhbnnfls.GbthfringBytfChbnnfl#writf(BytfBufffr[],
     * int, int)} for morf informbtion on thf subsfqufndf
     * bfhbvior.
     * <P>
     * Dfpfnding on thf stbtf of thf SSLEnginf, this mfthod mby produdf
     * nftwork dbtb without donsuming bny bpplidbtion dbtb (for fxbmplf,
     * it mby gfnfrbtf hbndshbkf dbtb.)
     * <P>
     * Thf bpplidbtion is rfsponsiblf for rflibbly trbnsporting thf
     * nftwork dbtb to thf pffr, bnd for fnsuring thbt dbtb drfbtfd by
     * multiplf dblls to wrbp() is trbnsportfd in thf sbmf ordfr in whidh
     * it wbs gfnfrbtfd.  Thf bpplidbtion must propfrly syndhronizf
     * multiplf dblls to this mfthod.
     * <P>
     * If this <dodf>SSLEnginf</dodf> hbs not yft stbrtfd its initibl
     * hbndshbkf, this mfthod will butombtidblly stbrt thf hbndshbkf.
     * <P>
     * This mfthod will bttfmpt to produdf SSL/TLS rfdords, bnd will
     * donsumf bs mudh sourdf dbtb bs possiblf, but will nfvfr donsumf
     * morf thbn thf sum of thf bytfs rfmbining in fbdh bufffr.  Ebdh
     * <dodf>BytfBufffr</dodf>'s position is updbtfd to rfflfdt thf
     * bmount of dbtb donsumfd or produdfd.  Thf limits rfmbin thf
     * sbmf.
     * <P>
     * Thf undfrlying mfmory usfd by thf <dodf>srds</dodf> bnd
     * <dodf>dst BytfBufffr</dodf>s must not bf thf sbmf.
     * <P>
     * Sff thf dlbss dfsdription for morf informbtion on fnginf dlosurf.
     *
     * @pbrbm   srds
     *          bn brrby of <dodf>BytfBufffrs</dodf> dontbining thf
     *          outbound bpplidbtion dbtb
     * @pbrbm   offsft
     *          Thf offsft within thf bufffr brrby of thf first bufffr from
     *          whidh bytfs brf to bf rftrifvfd; it must bf non-nfgbtivf
     *          bnd no lbrgfr thbn <dodf>srds.lfngth</dodf>
     * @pbrbm   lfngth
     *          Thf mbximum numbfr of bufffrs to bf bddfssfd; it must bf
     *          non-nfgbtivf bnd no lbrgfr thbn
     *          <dodf>srds.lfngth</dodf>&nbsp;-&nbsp;<dodf>offsft</dodf>
     * @pbrbm   dst
     *          b <dodf>BytfBufffr</dodf> to hold outbound nftwork dbtb
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  IndfxOutOfBoundsExdfption
     *          if thf prfdonditions on thf <dodf>offsft</dodf> bnd
     *          <dodf>lfngth</dodf> pbrbmftfrs do not hold.
     * @throws  RfbdOnlyBufffrExdfption
     *          if thf <dodf>dst</dodf> bufffr is rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srds</dodf> or <dodf>dst</dodf>
     *          is null, or if bny flfmfnt in thf <dodf>srds</dodf>
     *          subsfqufndf spfdififd is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     jbvb.nio.dhbnnfls.GbthfringBytfChbnnfl
     * @sff     jbvb.nio.dhbnnfls.GbthfringBytfChbnnfl#writf(
     *              BytfBufffr[], int, int)
     */
    publid bbstrbdt SSLEnginfRfsult wrbp(BytfBufffr [] srds, int offsft,
            int lfngth, BytfBufffr dst) throws SSLExdfption;

    /**
     * Attfmpts to dfdodf SSL/TLS nftwork dbtb into b plbintfxt
     * bpplidbtion dbtb bufffr.
     * <P>
     * An invodbtion of this mfthod bfhbvfs in fxbdtly thf sbmf mbnnfr
     * bs thf invodbtion:
     * <blodkquotf><prf>
     * {@link #unwrbp(BytfBufffr, BytfBufffr [], int, int)
     *     fnginf.unwrbp(srd, nfw BytfBufffr [] { dst }, 0, 1);}
     * </prf></blodkquotf>
     *
     * @pbrbm   srd
     *          b <dodf>BytfBufffr</dodf> dontbining inbound nftwork dbtb.
     * @pbrbm   dst
     *          b <dodf>BytfBufffr</dodf> to hold inbound bpplidbtion dbtb.
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  RfbdOnlyBufffrExdfption
     *          if thf <dodf>dst</dodf> bufffr is rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srd</dodf> or <dodf>dst</dodf>
     *          is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     #unwrbp(BytfBufffr, BytfBufffr [], int, int)
     */
    publid SSLEnginfRfsult unwrbp(BytfBufffr srd,
            BytfBufffr dst) throws SSLExdfption {
        rfturn unwrbp(srd, nfw BytfBufffr [] { dst }, 0, 1);
    }

    /**
     * Attfmpts to dfdodf SSL/TLS nftwork dbtb into b sfqufndf of plbintfxt
     * bpplidbtion dbtb bufffrs.
     * <P>
     * An invodbtion of this mfthod bfhbvfs in fxbdtly thf sbmf mbnnfr
     * bs thf invodbtion:
     * <blodkquotf><prf>
     * {@link #unwrbp(BytfBufffr, BytfBufffr [], int, int)
     *     fnginf.unwrbp(srd, dsts, 0, dsts.lfngth);}
     * </prf></blodkquotf>
     *
     * @pbrbm   srd
     *          b <dodf>BytfBufffr</dodf> dontbining inbound nftwork dbtb.
     * @pbrbm   dsts
     *          bn brrby of <dodf>BytfBufffr</dodf>s to hold inbound
     *          bpplidbtion dbtb.
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  RfbdOnlyBufffrExdfption
     *          if bny of thf <dodf>dst</dodf> bufffrs brf rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srd</dodf> or <dodf>dsts</dodf>
     *          is null, or if bny flfmfnt in <dodf>dsts</dodf> is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     #unwrbp(BytfBufffr, BytfBufffr [], int, int)
     */
    publid SSLEnginfRfsult unwrbp(BytfBufffr srd,
            BytfBufffr [] dsts) throws SSLExdfption {
        if (dsts == null) {
            throw nfw IllfgblArgumfntExdfption("dsts == null");
        }
        rfturn unwrbp(srd, dsts, 0, dsts.lfngth);
    }

    /**
     * Attfmpts to dfdodf SSL/TLS nftwork dbtb into b subsfqufndf of
     * plbintfxt bpplidbtion dbtb bufffrs.  This <i>"sdbttfring"</i>
     * opfrbtion dfdodfs, in b singlf invodbtion, b sfqufndf of bytfs
     * into onf or morf of b givfn sfqufndf of bufffrs.  Sdbttfring
     * unwrbps brf oftfn usfful whfn implfmfnting nftwork protodols or
     * filf formbts thbt, for fxbmplf, group dbtb into sfgmfnts
     * donsisting of onf or morf fixfd-lfngth hfbdfrs followfd by b
     * vbribblf-lfngth body.  Sff
     * {@link jbvb.nio.dhbnnfls.SdbttfringBytfChbnnfl} for morf
     * informbtion on sdbttfring, bnd {@link
     * jbvb.nio.dhbnnfls.SdbttfringBytfChbnnfl#rfbd(BytfBufffr[],
     * int, int)} for morf informbtion on thf subsfqufndf
     * bfhbvior.
     * <P>
     * Dfpfnding on thf stbtf of thf SSLEnginf, this mfthod mby donsumf
     * nftwork dbtb without produding bny bpplidbtion dbtb (for fxbmplf,
     * it mby donsumf hbndshbkf dbtb.)
     * <P>
     * Thf bpplidbtion is rfsponsiblf for rflibbly obtbining thf nftwork
     * dbtb from thf pffr, bnd for invoking unwrbp() on thf dbtb in thf
     * ordfr it wbs rfdfivfd.  Thf bpplidbtion must propfrly syndhronizf
     * multiplf dblls to this mfthod.
     * <P>
     * If this <dodf>SSLEnginf</dodf> hbs not yft stbrtfd its initibl
     * hbndshbkf, this mfthod will butombtidblly stbrt thf hbndshbkf.
     * <P>
     * This mfthod will bttfmpt to donsumf onf domplftf SSL/TLS nftwork
     * pbdkft, but will nfvfr donsumf morf thbn thf sum of thf bytfs
     * rfmbining in thf bufffrs.  Ebdh <dodf>BytfBufffr</dodf>'s
     * position is updbtfd to rfflfdt thf bmount of dbtb donsumfd or
     * produdfd.  Thf limits rfmbin thf sbmf.
     * <P>
     * Thf undfrlying mfmory usfd by thf <dodf>srd</dodf> bnd
     * <dodf>dsts BytfBufffr</dodf>s must not bf thf sbmf.
     * <P>
     * Thf inbound nftwork bufffr mby bf modififd bs b rfsult of this
     * dbll:  thfrfforf if thf nftwork dbtb pbdkft is rfquirfd for somf
     * sfdondbry purposf, thf dbtb should bf duplidbtfd bfforf dblling this
     * mfthod.  Notf:  thf nftwork dbtb will not bf usfful to b sfdond
     * SSLEnginf, bs fbdh SSLEnginf dontbins uniquf rbndom stbtf whidh
     * influfndfs thf SSL/TLS mfssbgfs.
     * <P>
     * Sff thf dlbss dfsdription for morf informbtion on fnginf dlosurf.
     *
     * @pbrbm   srd
     *          b <dodf>BytfBufffr</dodf> dontbining inbound nftwork dbtb.
     * @pbrbm   dsts
     *          bn brrby of <dodf>BytfBufffr</dodf>s to hold inbound
     *          bpplidbtion dbtb.
     * @pbrbm   offsft
     *          Thf offsft within thf bufffr brrby of thf first bufffr from
     *          whidh bytfs brf to bf trbnsffrrfd; it must bf non-nfgbtivf
     *          bnd no lbrgfr thbn <dodf>dsts.lfngth</dodf>.
     * @pbrbm   lfngth
     *          Thf mbximum numbfr of bufffrs to bf bddfssfd; it must bf
     *          non-nfgbtivf bnd no lbrgfr thbn
     *          <dodf>dsts.lfngth</dodf>&nbsp;-&nbsp;<dodf>offsft</dodf>.
     * @rfturn  bn <dodf>SSLEnginfRfsult</dodf> dfsdribing thf rfsult
     *          of this opfrbtion.
     * @throws  SSLExdfption
     *          A problfm wbs fndountfrfd whilf prodfssing thf
     *          dbtb thbt dbusfd thf <dodf>SSLEnginf</dodf> to bbort.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf prfdonditions on thf <dodf>offsft</dodf> bnd
     *          <dodf>lfngth</dodf> pbrbmftfrs do not hold.
     * @throws  RfbdOnlyBufffrExdfption
     *          if bny of thf <dodf>dst</dodf> bufffrs brf rfbd-only.
     * @throws  IllfgblArgumfntExdfption
     *          if fithfr <dodf>srd</dodf> or <dodf>dsts</dodf>
     *          is null, or if bny flfmfnt in thf <dodf>dsts</dodf>
     *          subsfqufndf spfdififd is null.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     jbvb.nio.dhbnnfls.SdbttfringBytfChbnnfl
     * @sff     jbvb.nio.dhbnnfls.SdbttfringBytfChbnnfl#rfbd(
     *              BytfBufffr[], int, int)
     */
    publid bbstrbdt SSLEnginfRfsult unwrbp(BytfBufffr srd,
            BytfBufffr [] dsts, int offsft, int lfngth) throws SSLExdfption;


    /**
     * Rfturns b dflfgbtfd <dodf>Runnbblf</dodf> tbsk for
     * this <dodf>SSLEnginf</dodf>.
     * <P>
     * <dodf>SSLEnginf</dodf> opfrbtions mby rfquirf thf rfsults of
     * opfrbtions thbt blodk, or mby tbkf bn fxtfndfd pfriod of timf to
     * domplftf.  This mfthod is usfd to obtbin bn outstbnding {@link
     * jbvb.lbng.Runnbblf} opfrbtion (tbsk).  Ebdh tbsk must bf bssignfd
     * b thrfbd (possibly thf durrfnt) to pfrform thf {@link
     * jbvb.lbng.Runnbblf#run() run} opfrbtion.  Ondf thf
     * <dodf>run</dodf> mfthod rfturns, thf <dodf>Runnbblf</dodf> objfdt
     * is no longfr nffdfd bnd mby bf disdbrdfd.
     * <P>
     * Dflfgbtfd tbsks run in thf <dodf>AddfssControlContfxt</dodf>
     * in plbdf whfn this objfdt wbs drfbtfd.
     * <P>
     * A dbll to this mfthod will rfturn fbdh outstbnding tbsk
     * fxbdtly ondf.
     * <P>
     * Multiplf dflfgbtfd tbsks dbn bf run in pbrbllfl.
     *
     * @rfturn  b dflfgbtfd <dodf>Runnbblf</dodf> tbsk, or null
     *          if nonf brf bvbilbblf.
     */
    publid bbstrbdt Runnbblf gftDflfgbtfdTbsk();


    /**
     * Signbls thbt no morf inbound nftwork dbtb will bf sfnt
     * to this <dodf>SSLEnginf</dodf>.
     * <P>
     * If thf bpplidbtion initibtfd thf dlosing prodfss by dblling
     * {@link #dlosfOutbound()}, undfr somf dirdumstbndfs it is not
     * rfquirfd thbt thf initibtor wbit for thf pffr's dorrfsponding
     * dlosf mfssbgf.  (Sff sfdtion 7.2.1 of thf TLS spfdifidbtion (<A
     * HREF="http://www.iftf.org/rfd/rfd2246.txt">RFC 2246</A>) for morf
     * informbtion on wbiting for dlosurf blfrts.)  In sudh dbsfs, this
     * mfthod nffd not bf dbllfd.
     * <P>
     * But if thf bpplidbtion did not initibtf thf dlosurf prodfss, or
     * if thf dirdumstbndfs bbovf do not bpply, this mfthod should bf
     * dbllfd whfnfvfr thf fnd of thf SSL/TLS dbtb strfbm is rfbdhfd.
     * This fnsurfs dlosurf of thf inbound sidf, bnd dhfdks thbt thf
     * pffr followfd thf SSL/TLS dlosf prodfdurf propfrly, thus
     * dftfdting possiblf trundbtion bttbdks.
     * <P>
     * This mfthod is idfmpotfnt:  if thf inbound sidf hbs blrfbdy
     * bffn dlosfd, this mfthod dofs not do bnything.
     * <P>
     * {@link #wrbp(BytfBufffr, BytfBufffr) wrbp()} should bf
     * dbllfd to flush bny rfmbining hbndshbkf dbtb.
     *
     * @throws  SSLExdfption
     *          if this fnginf hbs not rfdfivfd thf propfr SSL/TLS dlosf
     *          notifidbtion mfssbgf from thf pffr.
     *
     * @sff     #isInboundDonf()
     * @sff     #isOutboundDonf()
     */
    publid bbstrbdt void dlosfInbound() throws SSLExdfption;


    /**
     * Rfturns whfthfr {@link #unwrbp(BytfBufffr, BytfBufffr)} will
     * bddfpt bny morf inbound dbtb mfssbgfs.
     *
     * @rfturn  truf if thf <dodf>SSLEnginf</dodf> will not
     *          donsumf bnymorf nftwork dbtb (bnd by implidbtion,
     *          will not produdf bny morf bpplidbtion dbtb.)
     * @sff     #dlosfInbound()
     */
    publid bbstrbdt boolfbn isInboundDonf();


    /**
     * Signbls thbt no morf outbound bpplidbtion dbtb will bf sfnt
     * on this <dodf>SSLEnginf</dodf>.
     * <P>
     * This mfthod is idfmpotfnt:  if thf outbound sidf hbs blrfbdy
     * bffn dlosfd, this mfthod dofs not do bnything.
     * <P>
     * {@link #wrbp(BytfBufffr, BytfBufffr)} should bf
     * dbllfd to flush bny rfmbining hbndshbkf dbtb.
     *
     * @sff     #isOutboundDonf()
     */
    publid bbstrbdt void dlosfOutbound();


    /**
     * Rfturns whfthfr {@link #wrbp(BytfBufffr, BytfBufffr)} will
     * produdf bny morf outbound dbtb mfssbgfs.
     * <P>
     * Notf thbt during thf dlosurf phbsf, b <dodf>SSLEnginf</dodf> mby
     * gfnfrbtf hbndshbkf dlosurf dbtb thbt must bf sfnt to thf pffr.
     * <dodf>wrbp()</dodf> must bf dbllfd to gfnfrbtf this dbtb.  Whfn
     * this mfthod rfturns truf, no morf outbound dbtb will bf drfbtfd.
     *
     * @rfturn  truf if thf <dodf>SSLEnginf</dodf> will not produdf
     *          bny morf nftwork dbtb
     *
     * @sff     #dlosfOutbound()
     * @sff     #dlosfInbound()
     */
    publid bbstrbdt boolfbn isOutboundDonf();


    /**
     * Rfturns thf nbmfs of thf diphfr suitfs whidh dould bf fnbblfd for usf
     * on this fnginf.  Normblly, only b subsft of thfsf will bdtublly
     * bf fnbblfd by dffbult, sindf this list mby indludf diphfr suitfs whidh
     * do not mfft qublity of sfrvidf rfquirfmfnts for thosf dffbults.  Sudh
     * diphfr suitfs might bf usfful in spfdiblizfd bpplidbtions.
     *
     * @rfturn  bn brrby of diphfr suitf nbmfs
     * @sff     #gftEnbblfdCiphfrSuitfs()
     * @sff     #sftEnbblfdCiphfrSuitfs(String [])
     */
    publid bbstrbdt String [] gftSupportfdCiphfrSuitfs();


    /**
     * Rfturns thf nbmfs of thf SSL diphfr suitfs whidh brf durrfntly
     * fnbblfd for usf on this fnginf.  Whfn bn SSLEnginf is first
     * drfbtfd, bll fnbblfd diphfr suitfs support b minimum qublity of
     * sfrvidf.  Thus, in somf fnvironmfnts this vbluf might bf fmpty.
     * <P>
     * Evfn if b suitf hbs bffn fnbblfd, it might nfvfr bf usfd.  (For
     * fxbmplf, thf pffr dofs not support it, thf rfquisitf
     * dfrtifidbtfs/privbtf kfys for thf suitf brf not bvbilbblf, or bn
     * bnonymous suitf is fnbblfd but buthfntidbtion is rfquirfd.)
     *
     * @rfturn  bn brrby of diphfr suitf nbmfs
     * @sff     #gftSupportfdCiphfrSuitfs()
     * @sff     #sftEnbblfdCiphfrSuitfs(String [])
     */
    publid bbstrbdt String [] gftEnbblfdCiphfrSuitfs();


    /**
     * Sfts thf diphfr suitfs fnbblfd for usf on this fnginf.
     * <P>
     * Ebdh diphfr suitf in thf <dodf>suitfs</dodf> pbrbmftfr must hbvf
     * bffn listfd by gftSupportfdCiphfrSuitfs(), or thf mfthod will
     * fbil.  Following b suddfssful dbll to this mfthod, only suitfs
     * listfd in thf <dodf>suitfs</dodf> pbrbmftfr brf fnbblfd for usf.
     * <P>
     * Sff {@link #gftEnbblfdCiphfrSuitfs()} for morf informbtion
     * on why b spfdifid diphfr suitf mby nfvfr bf usfd on b fnginf.
     *
     * @pbrbm   suitfs Nbmfs of bll thf diphfr suitfs to fnbblf
     * @throws  IllfgblArgumfntExdfption whfn onf or morf of thf diphfrs
     *          nbmfd by thf pbrbmftfr is not supportfd, or whfn thf
     *          pbrbmftfr is null.
     * @sff     #gftSupportfdCiphfrSuitfs()
     * @sff     #gftEnbblfdCiphfrSuitfs()
     */
    publid bbstrbdt void sftEnbblfdCiphfrSuitfs(String suitfs []);


    /**
     * Rfturns thf nbmfs of thf protodols whidh dould bf fnbblfd for usf
     * with this <dodf>SSLEnginf</dodf>.
     *
     * @rfturn  bn brrby of protodols supportfd
     */
    publid bbstrbdt String [] gftSupportfdProtodols();


    /**
     * Rfturns thf nbmfs of thf protodol vfrsions whidh brf durrfntly
     * fnbblfd for usf with this <dodf>SSLEnginf</dodf>.
     *
     * @rfturn  bn brrby of protodols
     * @sff     #sftEnbblfdProtodols(String [])
     */
    publid bbstrbdt String [] gftEnbblfdProtodols();


    /**
     * Sft thf protodol vfrsions fnbblfd for usf on this fnginf.
     * <P>
     * Thf protodols must hbvf bffn listfd by gftSupportfdProtodols()
     * bs bfing supportfd.  Following b suddfssful dbll to this mfthod,
     * only protodols listfd in thf <dodf>protodols</dodf> pbrbmftfr
     * brf fnbblfd for usf.
     *
     * @pbrbm   protodols Nbmfs of bll thf protodols to fnbblf.
     * @throws  IllfgblArgumfntExdfption whfn onf or morf of
     *          thf protodols nbmfd by thf pbrbmftfr is not supportfd or
     *          whfn thf protodols pbrbmftfr is null.
     * @sff     #gftEnbblfdProtodols()
     */
    publid bbstrbdt void sftEnbblfdProtodols(String protodols[]);


    /**
     * Rfturns thf <dodf>SSLSfssion</dodf> in usf in this
     * <dodf>SSLEnginf</dodf>.
     * <P>
     * Thfsf dbn bf long livfd, bnd frfqufntly dorrfspond to bn fntirf
     * login sfssion for somf usfr.  Thf sfssion spfdififs b pbrtidulbr
     * diphfr suitf whidh is bfing bdtivfly usfd by bll donnfdtions in
     * thbt sfssion, bs wfll bs thf idfntitifs of thf sfssion's dlifnt
     * bnd sfrvfr.
     * <P>
     * Unlikf {@link SSLSodkft#gftSfssion()}
     * this mfthod dofs not blodk until hbndshbking is domplftf.
     * <P>
     * Until thf initibl hbndshbkf hbs domplftfd, this mfthod rfturns
     * b sfssion objfdt whidh rfports bn invblid diphfr suitf of
     * "SSL_NULL_WITH_NULL_NULL".
     *
     * @rfturn  thf <dodf>SSLSfssion</dodf> for this <dodf>SSLEnginf</dodf>
     * @sff     SSLSfssion
     */
    publid bbstrbdt SSLSfssion gftSfssion();


    /**
     * Rfturns thf {@dodf SSLSfssion} bfing donstrudtfd during b SSL/TLS
     * hbndshbkf.
     * <p>
     * TLS protodols mby nfgotibtf pbrbmftfrs thbt brf nffdfd whfn using
     * bn instbndf of this dlbss, but bfforf thf {@dodf SSLSfssion} hbs
     * bffn domplftfly initiblizfd bnd mbdf bvbilbblf vib {@dodf gftSfssion}.
     * For fxbmplf, thf list of vblid signbturf blgorithms mby rfstridt
     * thf typf of dfrtifidbtfs thbt dbn usfd during TrustMbnbgfr
     * dfdisions, or thf mbximum TLS frbgmfnt pbdkft sizfs dbn bf
     * rfsizfd to bfttfr support thf nftwork fnvironmfnt.
     * <p>
     * This mfthod providfs fbrly bddfss to thf {@dodf SSLSfssion} bfing
     * donstrudtfd.  Dfpfnding on how fbr thf hbndshbkf hbs progrfssfd,
     * somf dbtb mby not yft bf bvbilbblf for usf.  For fxbmplf, if b
     * rfmotf sfrvfr will bf sfnding b Cfrtifidbtf dhbin, but thbt dhbin
     * hbs yft not bffn prodfssfd, thf {@dodf gftPffrCfrtifidbtfs}
     * mfthod of {@dodf SSLSfssion} will throw b
     * SSLPffrUnvfrififdExdfption.  Ondf thbt dhbin hbs bffn prodfssfd,
     * {@dodf gftPffrCfrtifidbtfs} will rfturn thf propfr vbluf.
     *
     * @sff SSLSodkft
     * @sff SSLSfssion
     * @sff ExtfndfdSSLSfssion
     * @sff X509ExtfndfdKfyMbnbgfr
     * @sff X509ExtfndfdTrustMbnbgfr
     *
     * @rfturn null if this instbndf is not durrfntly hbndshbking, or
     *         if thf durrfnt hbndshbkf hbs not progrfssfd fbr fnough to
     *         drfbtf b bbsid SSLSfssion.  Othfrwisf, this mfthod rfturns thf
     *         {@dodf SSLSfssion} durrfntly bfing nfgotibtfd.
     * @throws UnsupportfdOpfrbtionExdfption if thf undfrlying providfr
     *         dofs not implfmfnt thf opfrbtion.
     *
     * @sindf 1.7
     */
    publid SSLSfssion gftHbndshbkfSfssion() {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }


    /**
     * Initibtfs hbndshbking (initibl or rfnfgotibtion) on this SSLEnginf.
     * <P>
     * This mfthod is not nffdfd for thf initibl hbndshbkf, bs thf
     * <dodf>wrbp()</dodf> bnd <dodf>unwrbp()</dodf> mfthods will
     * impliditly dbll this mfthod if hbndshbking hbs not blrfbdy bfgun.
     * <P>
     * Notf thbt thf pffr mby blso rfqufst b sfssion rfnfgotibtion with
     * this <dodf>SSLEnginf</dodf> by sfnding thf bppropribtf
     * sfssion rfnfgotibtf hbndshbkf mfssbgf.
     * <P>
     * Unlikf thf {@link SSLSodkft#stbrtHbndshbkf()
     * SSLSodkft#stbrtHbndshbkf()} mfthod, this mfthod dofs not blodk
     * until hbndshbking is domplftfd.
     * <P>
     * To fordf b domplftf SSL/TLS sfssion rfnfgotibtion, thf durrfnt
     * sfssion should bf invblidbtfd prior to dblling this mfthod.
     * <P>
     * Somf protodols mby not support multiplf hbndshbkfs on bn fxisting
     * fnginf bnd mby throw bn <dodf>SSLExdfption</dodf>.
     *
     * @throws  SSLExdfption
     *          if b problfm wbs fndountfrfd whilf signbling thf
     *          <dodf>SSLEnginf</dodf> to bfgin b nfw hbndshbkf.
     *          Sff thf dlbss dfsdription for morf informbtion on
     *          fnginf dlosurf.
     * @throws  IllfgblStbtfExdfption if thf dlifnt/sfrvfr modf
     *          hbs not yft bffn sft.
     * @sff     SSLSfssion#invblidbtf()
     */
    publid bbstrbdt void bfginHbndshbkf() throws SSLExdfption;


    /**
     * Rfturns thf durrfnt hbndshbkf stbtus for this <dodf>SSLEnginf</dodf>.
     *
     * @rfturn  thf durrfnt <dodf>SSLEnginfRfsult.HbndshbkfStbtus</dodf>.
     */
    publid bbstrbdt SSLEnginfRfsult.HbndshbkfStbtus gftHbndshbkfStbtus();


    /**
     * Configurfs thf fnginf to usf dlifnt (or sfrvfr) modf whfn
     * hbndshbking.
     * <P>
     * This mfthod must bf dbllfd bfforf bny hbndshbking oddurs.
     * Ondf hbndshbking hbs bfgun, thf modf dbn not bf rfsft for thf
     * liff of this fnginf.
     * <P>
     * Sfrvfrs normblly buthfntidbtf thfmsflvfs, bnd dlifnts
     * brf not rfquirfd to do so.
     *
     * @pbrbm   modf truf if thf fnginf should stbrt its hbndshbking
     *          in "dlifnt" modf
     * @throws  IllfgblArgumfntExdfption if b modf dhbngf is bttfmptfd
     *          bftfr thf initibl hbndshbkf hbs bfgun.
     * @sff     #gftUsfClifntModf()
     */
    publid bbstrbdt void sftUsfClifntModf(boolfbn modf);


    /**
     * Rfturns truf if thf fnginf is sft to usf dlifnt modf whfn
     * hbndshbking.
     *
     * @rfturn  truf if thf fnginf should do hbndshbking
     *          in "dlifnt" modf
     * @sff     #sftUsfClifntModf(boolfbn)
     */
    publid bbstrbdt boolfbn gftUsfClifntModf();


    /**
     * Configurfs thf fnginf to <i>rfquirf</i> dlifnt buthfntidbtion.  This
     * option is only usfful for fnginfs in thf sfrvfr modf.
     * <P>
     * An fnginf's dlifnt buthfntidbtion sftting is onf of thf following:
     * <ul>
     * <li> dlifnt buthfntidbtion rfquirfd
     * <li> dlifnt buthfntidbtion rfqufstfd
     * <li> no dlifnt buthfntidbtion dfsirfd
     * </ul>
     * <P>
     * Unlikf {@link #sftWbntClifntAuth(boolfbn)}, if this option is sft bnd
     * thf dlifnt dhoosfs not to providf buthfntidbtion informbtion
     * bbout itsflf, <i>thf nfgotibtions will stop bnd thf fnginf will
     * bfgin its dlosurf prodfdurf</i>.
     * <P>
     * Cblling this mfthod ovfrridfs bny prfvious sftting mbdf by
     * this mfthod or {@link #sftWbntClifntAuth(boolfbn)}.
     *
     * @pbrbm   nffd sft to truf if dlifnt buthfntidbtion is rfquirfd,
     *          or fblsf if no dlifnt buthfntidbtion is dfsirfd.
     * @sff     #gftNffdClifntAuth()
     * @sff     #sftWbntClifntAuth(boolfbn)
     * @sff     #gftWbntClifntAuth()
     * @sff     #sftUsfClifntModf(boolfbn)
     */
    publid bbstrbdt void sftNffdClifntAuth(boolfbn nffd);


    /**
     * Rfturns truf if thf fnginf will <i>rfquirf</i> dlifnt buthfntidbtion.
     * This option is only usfful to fnginfs in thf sfrvfr modf.
     *
     * @rfturn  truf if dlifnt buthfntidbtion is rfquirfd,
     *          or fblsf if no dlifnt buthfntidbtion is dfsirfd.
     * @sff     #sftNffdClifntAuth(boolfbn)
     * @sff     #sftWbntClifntAuth(boolfbn)
     * @sff     #gftWbntClifntAuth()
     * @sff     #sftUsfClifntModf(boolfbn)
     */
    publid bbstrbdt boolfbn gftNffdClifntAuth();


    /**
     * Configurfs thf fnginf to <i>rfqufst</i> dlifnt buthfntidbtion.
     * This option is only usfful for fnginfs in thf sfrvfr modf.
     * <P>
     * An fnginf's dlifnt buthfntidbtion sftting is onf of thf following:
     * <ul>
     * <li> dlifnt buthfntidbtion rfquirfd
     * <li> dlifnt buthfntidbtion rfqufstfd
     * <li> no dlifnt buthfntidbtion dfsirfd
     * </ul>
     * <P>
     * Unlikf {@link #sftNffdClifntAuth(boolfbn)}, if this option is sft bnd
     * thf dlifnt dhoosfs not to providf buthfntidbtion informbtion
     * bbout itsflf, <i>thf nfgotibtions will dontinuf</i>.
     * <P>
     * Cblling this mfthod ovfrridfs bny prfvious sftting mbdf by
     * this mfthod or {@link #sftNffdClifntAuth(boolfbn)}.
     *
     * @pbrbm   wbnt sft to truf if dlifnt buthfntidbtion is rfqufstfd,
     *          or fblsf if no dlifnt buthfntidbtion is dfsirfd.
     * @sff     #gftWbntClifntAuth()
     * @sff     #sftNffdClifntAuth(boolfbn)
     * @sff     #gftNffdClifntAuth()
     * @sff     #sftUsfClifntModf(boolfbn)
     */
    publid bbstrbdt void sftWbntClifntAuth(boolfbn wbnt);


    /**
     * Rfturns truf if thf fnginf will <i>rfqufst</i> dlifnt buthfntidbtion.
     * This option is only usfful for fnginfs in thf sfrvfr modf.
     *
     * @rfturn  truf if dlifnt buthfntidbtion is rfqufstfd,
     *          or fblsf if no dlifnt buthfntidbtion is dfsirfd.
     * @sff     #sftNffdClifntAuth(boolfbn)
     * @sff     #gftNffdClifntAuth()
     * @sff     #sftWbntClifntAuth(boolfbn)
     * @sff     #sftUsfClifntModf(boolfbn)
     */
    publid bbstrbdt boolfbn gftWbntClifntAuth();


    /**
     * Controls whfthfr nfw SSL sfssions mby bf fstbblishfd by this fnginf.
     * If sfssion drfbtions brf not bllowfd, bnd thfrf brf no
     * fxisting sfssions to rfsumf, thfrf will bf no suddfssful
     * hbndshbking.
     *
     * @pbrbm   flbg truf indidbtfs thbt sfssions mby bf drfbtfd; this
     *          is thf dffbult.  fblsf indidbtfs thbt bn fxisting sfssion
     *          must bf rfsumfd
     * @sff     #gftEnbblfSfssionCrfbtion()
     */
    publid bbstrbdt void sftEnbblfSfssionCrfbtion(boolfbn flbg);


    /**
     * Rfturns truf if nfw SSL sfssions mby bf fstbblishfd by this fnginf.
     *
     * @rfturn  truf indidbtfs thbt sfssions mby bf drfbtfd; this
     *          is thf dffbult.  fblsf indidbtfs thbt bn fxisting sfssion
     *          must bf rfsumfd
     * @sff     #sftEnbblfSfssionCrfbtion(boolfbn)
     */
    publid bbstrbdt boolfbn gftEnbblfSfssionCrfbtion();

    /**
     * Rfturns thf SSLPbrbmftfrs in ffffdt for this SSLEnginf.
     * Thf diphfrsuitfs bnd protodols of thf rfturnfd SSLPbrbmftfrs
     * brf blwbys non-null.
     *
     * @rfturn thf SSLPbrbmftfrs in ffffdt for this SSLEnginf.
     * @sindf 1.6
     */
    publid SSLPbrbmftfrs gftSSLPbrbmftfrs() {
        SSLPbrbmftfrs pbrbms = nfw SSLPbrbmftfrs();
        pbrbms.sftCiphfrSuitfs(gftEnbblfdCiphfrSuitfs());
        pbrbms.sftProtodols(gftEnbblfdProtodols());
        if (gftNffdClifntAuth()) {
            pbrbms.sftNffdClifntAuth(truf);
        } flsf if (gftWbntClifntAuth()) {
            pbrbms.sftWbntClifntAuth(truf);
        }
        rfturn pbrbms;
    }

    /**
     * Applifs SSLPbrbmftfrs to this fnginf.
     *
     * <p>This mfbns:
     * <ul>
     * <li>If {@dodf pbrbms.gftCiphfrSuitfs()} is non-null,
     *   {@dodf sftEnbblfdCiphfrSuitfs()} is dbllfd with thbt vbluf.</li>
     * <li>If {@dodf pbrbms.gftProtodols()} is non-null,
     *   {@dodf sftEnbblfdProtodols()} is dbllfd with thbt vbluf.</li>
     * <li>If {@dodf pbrbms.gftNffdClifntAuth()} or
     *   {@dodf pbrbms.gftWbntClifntAuth()} rfturn {@dodf truf},
     *   {@dodf sftNffdClifntAuth(truf)} bnd
     *   {@dodf sftWbntClifntAuth(truf)} brf dbllfd, rfspfdtivfly;
     *   othfrwisf {@dodf sftWbntClifntAuth(fblsf)} is dbllfd.</li>
     * <li>If {@dodf pbrbms.gftSfrvfrNbmfs()} is non-null, thf fnginf will
     *   donfigurf its sfrvfr nbmfs with thbt vbluf.</li>
     * <li>If {@dodf pbrbms.gftSNIMbtdhfrs()} is non-null, thf fnginf will
     *   donfigurf its SNI mbtdhfrs with thbt vbluf.</li>
     * </ul>
     *
     * @pbrbm pbrbms thf pbrbmftfrs
     * @throws IllfgblArgumfntExdfption if thf sftEnbblfdCiphfrSuitfs() or
     *    thf sftEnbblfdProtodols() dbll fbils
     * @sindf 1.6
     */
    publid void sftSSLPbrbmftfrs(SSLPbrbmftfrs pbrbms) {
        String[] s;
        s = pbrbms.gftCiphfrSuitfs();
        if (s != null) {
            sftEnbblfdCiphfrSuitfs(s);
        }
        s = pbrbms.gftProtodols();
        if (s != null) {
            sftEnbblfdProtodols(s);
        }
        if (pbrbms.gftNffdClifntAuth()) {
            sftNffdClifntAuth(truf);
        } flsf if (pbrbms.gftWbntClifntAuth()) {
            sftWbntClifntAuth(truf);
        } flsf {
            sftWbntClifntAuth(fblsf);
        }
    }

}
