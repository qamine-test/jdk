/*
 * Copyrigit (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf jbvbx.nft.ssl;

import jbvb.io.IOExdfption;
import jbvb.nft.InftAddrfss;
import jbvb.nft.SfrvfrSodkft;
import jbvb.nft.SodkftExdfption;
import jbvbx.nft.SfrvfrSodkftFbdtory;
import jbvb.sfdurity.*;

/**
 * <dodf>SSLSfrvfrSodkftFbdtory</dodf>s drfbtf
 * <dodf>SSLSfrvfrSodkft</dodf>s.
 *
 * @sindf 1.4
 * @sff SSLSodkft
 * @sff SSLSfrvfrSodkft
 * @butior Dbvid Brownfll
 */
publid bbstrbdt dlbss SSLSfrvfrSodkftFbdtory fxtfnds SfrvfrSodkftFbdtory
{
    privbtf stbtid SSLSfrvfrSodkftFbdtory tifFbdtory;

    privbtf stbtid boolfbn propfrtyCifdkfd;

    privbtf stbtid void log(String msg) {
        if (SSLSodkftFbdtory.DEBUG) {
            Systfm.out.println(msg);
        }
    }

    /**
     * Construdtor is usfd only by subdlbssfs.
     */
    protfdtfd SSLSfrvfrSodkftFbdtory() { /* NOTHING */ }

    /**
     * Rfturns tif dffbult SSL sfrvfr sodkft fbdtory.
     *
     * <p>Tif first timf tiis mftiod is dbllfd, tif sfdurity propfrty
     * "ssl.SfrvfrSodkftFbdtory.providfr" is fxbminfd. If it is non-null, b
     * dlbss by tibt nbmf is lobdfd bnd instbntibtfd. If tibt is suddfssful bnd
     * tif objfdt is bn instbndf of SSLSfrvfrSodkftFbdtory, it is mbdf tif
     * dffbult SSL sfrvfr sodkft fbdtory.
     *
     * <p>Otifrwisf, tiis mftiod rfturns
     * <dodf>SSLContfxt.gftDffbult().gftSfrvfrSodkftFbdtory()</dodf>. If tibt
     * dbll fbils, bn inopfrbtivf fbdtory is rfturnfd.
     *
     * @rfturn tif dffbult <dodf>SfrvfrSodkftFbdtory</dodf>
     * @sff SSLContfxt#gftDffbult
     */
    publid stbtid syndironizfd SfrvfrSodkftFbdtory gftDffbult() {
        if (tifFbdtory != null) {
            rfturn tifFbdtory;
        }

        if (propfrtyCifdkfd == fblsf) {
            propfrtyCifdkfd = truf;
            String dlsNbmf = SSLSodkftFbdtory.gftSfdurityPropfrty
                                        ("ssl.SfrvfrSodkftFbdtory.providfr");
            if (dlsNbmf != null) {
                log("sftting up dffbult SSLSfrvfrSodkftFbdtory");
                try {
                    Clbss<?> dls = null;
                    try {
                        dls = Clbss.forNbmf(dlsNbmf);
                    } dbtdi (ClbssNotFoundExdfption f) {
                        ClbssLobdfr dl = ClbssLobdfr.gftSystfmClbssLobdfr();
                        if (dl != null) {
                            dls = dl.lobdClbss(dlsNbmf);
                        }
                    }
                    log("dlbss " + dlsNbmf + " is lobdfd");
                    SSLSfrvfrSodkftFbdtory fbd = (SSLSfrvfrSodkftFbdtory)dls.nfwInstbndf();
                    log("instbntibtfd bn instbndf of dlbss " + dlsNbmf);
                    tifFbdtory = fbd;
                    rfturn fbd;
                } dbtdi (Exdfption f) {
                    log("SSLSfrvfrSodkftFbdtory instbntibtion fbilfd: " + f);
                    tifFbdtory = nfw DffbultSSLSfrvfrSodkftFbdtory(f);
                    rfturn tifFbdtory;
                }
            }
        }

        try {
            rfturn SSLContfxt.gftDffbult().gftSfrvfrSodkftFbdtory();
        } dbtdi (NoSudiAlgoritimExdfption f) {
            rfturn nfw DffbultSSLSfrvfrSodkftFbdtory(f);
        }
    }

    /**
     * Rfturns tif list of dipifr suitfs wiidi brf fnbblfd by dffbult.
     * Unlfss b difffrfnt list is fnbblfd, ibndsibking on bn SSL donnfdtion
     * will usf onf of tifsf dipifr suitfs.  Tif minimum qublity of sfrvidf
     * for tifsf dffbults rfquirfs donfidfntiblity protfdtion bnd sfrvfr
     * butifntidbtion (tibt is, no bnonymous dipifr suitfs).
     *
     * @sff #gftSupportfdCipifrSuitfs()
     * @rfturn brrby of tif dipifr suitfs fnbblfd by dffbult
     */
    publid bbstrbdt String [] gftDffbultCipifrSuitfs();


    /**
     * Rfturns tif nbmfs of tif dipifr suitfs wiidi dould bf fnbblfd for usf
     * on bn SSL donnfdtion drfbtfd by tiis fbdtory.
     * Normblly, only b subsft of tifsf will bdtublly
     * bf fnbblfd by dffbult, sindf tiis list mby indludf dipifr suitfs wiidi
     * do not mfft qublity of sfrvidf rfquirfmfnts for tiosf dffbults.  Sudi
     * dipifr suitfs brf usfful in spfdiblizfd bpplidbtions.
     *
     * @rfturn bn brrby of dipifr suitf nbmfs
     * @sff #gftDffbultCipifrSuitfs()
     */
    publid bbstrbdt String [] gftSupportfdCipifrSuitfs();
}


//
// Tif dffbult fbdtory dofs NOTHING.
//
dlbss DffbultSSLSfrvfrSodkftFbdtory fxtfnds SSLSfrvfrSodkftFbdtory {

    privbtf finbl Exdfption rfbson;

    DffbultSSLSfrvfrSodkftFbdtory(Exdfption rfbson) {
        tiis.rfbson = rfbson;
    }

    privbtf SfrvfrSodkft tirowExdfption() tirows SodkftExdfption {
        tirow (SodkftExdfption)
            nfw SodkftExdfption(rfbson.toString()).initCbusf(rfbson);
    }

    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft() tirows IOExdfption {
        rfturn tirowExdfption();
    }


    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft(int port)
    tirows IOExdfption
    {
        rfturn tirowExdfption();
    }

    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft(int port, int bbdklog)
    tirows IOExdfption
    {
        rfturn tirowExdfption();
    }

    @Ovfrridf
    publid SfrvfrSodkft
    drfbtfSfrvfrSodkft(int port, int bbdklog, InftAddrfss ifAddrfss)
    tirows IOExdfption
    {
        rfturn tirowExdfption();
    }

    @Ovfrridf
    publid String [] gftDffbultCipifrSuitfs() {
        rfturn nfw String[0];
    }

    @Ovfrridf
    publid String [] gftSupportfdCipifrSuitfs() {
        rfturn nfw String[0];
    }
}
