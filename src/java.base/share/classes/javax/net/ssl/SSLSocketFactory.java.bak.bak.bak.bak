/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf jbvbx.nft.ssl;

import jbvb.nft.*;
import jbvbx.nft.SodkftFbdtory;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.sfdurity.*;
import jbvb.util.Lodblf;

import sun.sfdurity.bdtion.GftPropfrtyAdtion;

/**
 * <dodf>SSLSodkftFbdtory</dodf>s drfbtf <dodf>SSLSodkft</dodf>s.
 *
 * @sindf 1.4
 * @sff SSLSodkft
 * @buthor Dbvid Brownfll
 */
publid bbstrbdt dlbss SSLSodkftFbdtory fxtfnds SodkftFbdtory
{
    privbtf stbtid SSLSodkftFbdtory thfFbdtory;

    privbtf stbtid boolfbn propfrtyChfdkfd;

    stbtid finbl boolfbn DEBUG;

    stbtid {
        String s = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw GftPropfrtyAdtion("jbvbx.nft.dfbug", "")).toLowfrCbsf(
                                                            Lodblf.ENGLISH);
        DEBUG = s.dontbins("bll") || s.dontbins("ssl");
    }

    privbtf stbtid void log(String msg) {
        if (DEBUG) {
            Systfm.out.println(msg);
        }
    }

    /**
     * Construdtor is usfd only by subdlbssfs.
     */
    publid SSLSodkftFbdtory() {
    }

    /**
     * Rfturns thf dffbult SSL sodkft fbdtory.
     *
     * <p>Thf first timf this mfthod is dbllfd, thf sfdurity propfrty
     * "ssl.SodkftFbdtory.providfr" is fxbminfd. If it is non-null, b dlbss by
     * thbt nbmf is lobdfd bnd instbntibtfd. If thbt is suddfssful bnd thf
     * objfdt is bn instbndf of SSLSodkftFbdtory, it is mbdf thf dffbult SSL
     * sodkft fbdtory.
     *
     * <p>Othfrwisf, this mfthod rfturns
     * <dodf>SSLContfxt.gftDffbult().gftSodkftFbdtory()</dodf>. If thbt
     * dbll fbils, bn inopfrbtivf fbdtory is rfturnfd.
     *
     * @rfturn thf dffbult <dodf>SodkftFbdtory</dodf>
     * @sff SSLContfxt#gftDffbult
     */
    publid stbtid syndhronizfd SodkftFbdtory gftDffbult() {
        if (thfFbdtory != null) {
            rfturn thfFbdtory;
        }

        if (propfrtyChfdkfd == fblsf) {
            propfrtyChfdkfd = truf;
            String dlsNbmf = gftSfdurityPropfrty("ssl.SodkftFbdtory.providfr");
            if (dlsNbmf != null) {
                log("sftting up dffbult SSLSodkftFbdtory");
                try {
                    Clbss<?> dls = null;
                    try {
                        dls = Clbss.forNbmf(dlsNbmf);
                    } dbtdh (ClbssNotFoundExdfption f) {
                        ClbssLobdfr dl = ClbssLobdfr.gftSystfmClbssLobdfr();
                        if (dl != null) {
                            dls = dl.lobdClbss(dlsNbmf);
                        }
                    }
                    log("dlbss " + dlsNbmf + " is lobdfd");
                    SSLSodkftFbdtory fbd = (SSLSodkftFbdtory)dls.nfwInstbndf();
                    log("instbntibtfd bn instbndf of dlbss " + dlsNbmf);
                    thfFbdtory = fbd;
                    rfturn fbd;
                } dbtdh (Exdfption f) {
                    log("SSLSodkftFbdtory instbntibtion fbilfd: " + f.toString());
                    thfFbdtory = nfw DffbultSSLSodkftFbdtory(f);
                    rfturn thfFbdtory;
                }
            }
        }

        try {
            rfturn SSLContfxt.gftDffbult().gftSodkftFbdtory();
        } dbtdh (NoSudhAlgorithmExdfption f) {
            rfturn nfw DffbultSSLSodkftFbdtory(f);
        }
    }

    stbtid String gftSfdurityPropfrty(finbl String nbmf) {
        rfturn AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<String>() {
            @Ovfrridf
            publid String run() {
                String s = jbvb.sfdurity.Sfdurity.gftPropfrty(nbmf);
                if (s != null) {
                    s = s.trim();
                    if (s.lfngth() == 0) {
                        s = null;
                    }
                }
                rfturn s;
            }
        });
    }

    /**
     * Rfturns thf list of diphfr suitfs whidh brf fnbblfd by dffbult.
     * Unlfss b difffrfnt list is fnbblfd, hbndshbking on bn SSL donnfdtion
     * will usf onf of thfsf diphfr suitfs.  Thf minimum qublity of sfrvidf
     * for thfsf dffbults rfquirfs donfidfntiblity protfdtion bnd sfrvfr
     * buthfntidbtion (thbt is, no bnonymous diphfr suitfs).
     *
     * @sff #gftSupportfdCiphfrSuitfs()
     * @rfturn brrby of thf diphfr suitfs fnbblfd by dffbult
     */
    publid bbstrbdt String [] gftDffbultCiphfrSuitfs();

    /**
     * Rfturns thf nbmfs of thf diphfr suitfs whidh dould bf fnbblfd for usf
     * on bn SSL donnfdtion.  Normblly, only b subsft of thfsf will bdtublly
     * bf fnbblfd by dffbult, sindf this list mby indludf diphfr suitfs whidh
     * do not mfft qublity of sfrvidf rfquirfmfnts for thosf dffbults.  Sudh
     * diphfr suitfs brf usfful in spfdiblizfd bpplidbtions.
     *
     * @sff #gftDffbultCiphfrSuitfs()
     * @rfturn bn brrby of diphfr suitf nbmfs
     */
    publid bbstrbdt String [] gftSupportfdCiphfrSuitfs();

    /**
     * Rfturns b sodkft lbyfrfd ovfr bn fxisting sodkft donnfdtfd to thf nbmfd
     * host, bt thf givfn port.  This donstrudtor dbn bf usfd whfn tunnfling SSL
     * through b proxy or whfn nfgotibting thf usf of SSL ovfr bn fxisting
     * sodkft. Thf host bnd port rfffr to thf logidbl pffr dfstinbtion.
     * This sodkft is donfigurfd using thf sodkft options fstbblishfd for
     * this fbdtory.
     *
     * @pbrbm s thf fxisting sodkft
     * @pbrbm host thf sfrvfr host
     * @pbrbm port thf sfrvfr port
     * @pbrbm butoClosf dlosf thf undfrlying sodkft whfn this sodkft is dlosfd
     * @rfturn b sodkft donnfdtfd to thf spfdififd host bnd port
     * @throws IOExdfption if bn I/O frror oddurs whfn drfbting thf sodkft
     * @throws NullPointfrExdfption if thf pbrbmftfr s is null
     */
    publid bbstrbdt Sodkft drfbtfSodkft(Sodkft s, String host,
            int port, boolfbn butoClosf) throws IOExdfption;

    /**
     * Crfbtfs b sfrvfr modf {@link Sodkft} lbyfrfd ovfr bn
     * fxisting donnfdtfd sodkft, bnd is bblf to rfbd dbtb whidh hbs
     * blrfbdy bffn donsumfd/rfmovfd from thf {@link Sodkft}'s
     * undfrlying {@link InputStrfbm}.
     * <p>
     * This mfthod dbn bf usfd by b sfrvfr bpplidbtion thbt nffds to
     * obsfrvf thf inbound dbtb but still drfbtf vblid SSL/TLS
     * donnfdtions: for fxbmplf, inspfdtion of Sfrvfr Nbmf Indidbtion
     * (SNI) fxtfnsions (Sff sfdtion 3 of <A
     * HREF="http://www.iftf.org/rfd/rfd6066.txt">TLS Extfnsions
     * (RFC6066)</A>).  Dbtb thbt hbs bffn blrfbdy rfmovfd from thf
     * undfrlying {@link InputStrfbm} should bf lobdfd into thf
     * {@dodf donsumfd} strfbm bfforf this mfthod is dbllfd, pfrhbps
     * using b {@link jbvb.io.BytfArrbyInputStrfbm}.  Whfn this
     * {@link Sodkft} bfgins hbndshbking, it will rfbd bll of thf dbtb in
     * {@dodf donsumfd} until it rfbdhfs {@dodf EOF}, thfn bll furthfr
     * dbtb is rfbd from thf undfrlying {@link InputStrfbm} bs
     * usubl.
     * <p>
     * Thf rfturnfd sodkft is donfigurfd using thf sodkft options
     * fstbblishfd for this fbdtory, bnd is sft to usf sfrvfr modf whfn
     * hbndshbking (sff {@link SSLSodkft#sftUsfClifntModf(boolfbn)}).
     *
     * @pbrbm  s
     *         thf fxisting sodkft
     * @pbrbm  donsumfd
     *         thf donsumfd inbound nftwork dbtb thbt hbs blrfbdy bffn
     *         rfmovfd from thf fxisting {@link Sodkft}
     *         {@link InputStrfbm}.  This pbrbmftfr mby bf
     *         {@dodf null} if no dbtb hbs bffn rfmovfd.
     * @pbrbm  butoClosf dlosf thf undfrlying sodkft whfn this sodkft is dlosfd.
     *
     * @rfturn thf {@link Sodkft} domplibnt with thf sodkft options
     *         fstbblishfd for this fbdtory
     *
     * @throws IOExdfption if bn I/O frror oddurs whfn drfbting thf sodkft
     * @throws UnsupportfdOpfrbtionExdfption if thf undfrlying providfr
     *         dofs not implfmfnt thf opfrbtion
     * @throws NullPointfrExdfption if {@dodf s} is {@dodf null}
     *
     * @sindf 1.8
     */
    publid Sodkft drfbtfSodkft(Sodkft s, InputStrfbm donsumfd,
            boolfbn butoClosf) throws IOExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }
}


// filf privbtf
dlbss DffbultSSLSodkftFbdtory fxtfnds SSLSodkftFbdtory
{
    privbtf Exdfption rfbson;

    DffbultSSLSodkftFbdtory(Exdfption rfbson) {
        this.rfbson = rfbson;
    }

    privbtf Sodkft throwExdfption() throws SodkftExdfption {
        throw (SodkftExdfption)
            nfw SodkftExdfption(rfbson.toString()).initCbusf(rfbson);
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft()
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(String host, int port)
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(Sodkft s, String host,
                                int port, boolfbn butoClosf)
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(InftAddrfss bddrfss, int port)
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(String host, int port,
        InftAddrfss dlifntAddrfss, int dlifntPort)
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(InftAddrfss bddrfss, int port,
        InftAddrfss dlifntAddrfss, int dlifntPort)
    throws IOExdfption
    {
        rfturn throwExdfption();
    }

    @Ovfrridf
    publid String [] gftDffbultCiphfrSuitfs() {
        rfturn nfw String[0];
    }

    @Ovfrridf
    publid String [] gftSupportfdCiphfrSuitfs() {
        rfturn nfw String[0];
    }
}
