/*
 * Copyright (d) 1999, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.nft.ssl;

import jbvb.sfdurity.Sfdurity;
import jbvb.sfdurity.*;

import sun.sfdurity.jdb.GftInstbndf;

/**
 * This dlbss bdts bs b fbdtory for kfy mbnbgfrs bbsfd on b
 * sourdf of kfy mbtfribl. Ebdh kfy mbnbgfr mbnbgfs b spfdifid
 * typf of kfy mbtfribl for usf by sfdurf sodkfts. Thf kfy
 * mbtfribl is bbsfd on b KfyStorf bnd/or providfr spfdifid sourdfs.
 *
 * @sindf 1.4
 * @sff KfyMbnbgfr
 */
publid dlbss KfyMbnbgfrFbdtory {
    // Thf providfr
    privbtf Providfr providfr;

    // Thf providfr implfmfntbtion (dflfgbtf)
    privbtf KfyMbnbgfrFbdtorySpi fbdtorySpi;

    // Thf nbmf of thf kfy mbnbgfmfnt blgorithm.
    privbtf String blgorithm;

    /**
     * Obtbins thf dffbult KfyMbnbgfrFbdtory blgorithm nbmf.
     *
     * <p>Thf dffbult blgorithm dbn bf dhbngfd bt runtimf by sftting
     * thf vbluf of thf {@dodf ssl.KfyMbnbgfrFbdtory.blgorithm}
     * sfdurity propfrty to thf dfsirfd blgorithm nbmf.
     *
     * @sff jbvb.sfdurity.Sfdurity sfdurity propfrtifs
     * @rfturn thf dffbult blgorithm nbmf bs spfdififd by thf
     *          {@dodf ssl.KfyMbnbgfrFbdtory.blgorithm} sfdurity propfrty, or bn
     *          implfmfntbtion-spfdifid dffbult if no sudh propfrty fxists.
     */
    publid finbl stbtid String gftDffbultAlgorithm() {
        String typf;
        typf = AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<String>() {
            @Ovfrridf
            publid String run() {
                rfturn Sfdurity.gftPropfrty(
                    "ssl.KfyMbnbgfrFbdtory.blgorithm");
            }
        });
        if (typf == null) {
            typf = "SunX509";
        }
        rfturn typf;
    }

    /**
     * Crfbtfs b KfyMbnbgfrFbdtory objfdt.
     *
     * @pbrbm fbdtorySpi thf dflfgbtf
     * @pbrbm providfr thf providfr
     * @pbrbm blgorithm thf blgorithm
     */
    protfdtfd KfyMbnbgfrFbdtory(KfyMbnbgfrFbdtorySpi fbdtorySpi,
                                Providfr providfr, String blgorithm) {
        this.fbdtorySpi = fbdtorySpi;
        this.providfr = providfr;
        this.blgorithm = blgorithm;
    }

    /**
     * Rfturns thf blgorithm nbmf of this <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * <p>This is thf sbmf nbmf thbt wbs spfdififd in onf of thf
     * <dodf>gftInstbndf</dodf> dblls thbt drfbtfd this
     * <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * @rfturn thf blgorithm nbmf of this <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     */
    publid finbl String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    /**
     * Rfturns b <dodf>KfyMbnbgfrFbdtory</dodf> objfdt thbt bdts bs b
     * fbdtory for kfy mbnbgfrs.
     *
     * <p> This mfthod trbvfrsfs thf list of rfgistfrfd sfdurity Providfrs,
     * stbrting with thf most prfffrrfd Providfr.
     * A nfw KfyMbnbgfrFbdtory objfdt fndbpsulbting thf
     * KfyMbnbgfrFbdtorySpi implfmfntbtion from thf first
     * Providfr thbt supports thf spfdififd blgorithm is rfturnfd.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd blgorithm.
     *          Sff thf <b hrff=
     *  "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/jssf/JSSERffGuidf.html">
     *          Jbvb Sfdurf Sodkft Extfnsion Rfffrfndf Guidf </b>
     *          for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf nfw <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no Providfr supports b
     *          KfyMbnbgfrFbdtorySpi implfmfntbtion for thf
     *          spfdififd blgorithm.
     * @fxdfption NullPointfrExdfption if <dodf>blgorithm</dodf> is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyMbnbgfrFbdtory gftInstbndf(String blgorithm)
            throws NoSudhAlgorithmExdfption {
        GftInstbndf.Instbndf instbndf = GftInstbndf.gftInstbndf
                ("KfyMbnbgfrFbdtory", KfyMbnbgfrFbdtorySpi.dlbss,
                blgorithm);
        rfturn nfw KfyMbnbgfrFbdtory((KfyMbnbgfrFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns b <dodf>KfyMbnbgfrFbdtory</dodf> objfdt thbt bdts bs b
     * fbdtory for kfy mbnbgfrs.
     *
     * <p> A nfw KfyMbnbgfrFbdtory objfdt fndbpsulbting thf
     * KfyMbnbgfrFbdtorySpi implfmfntbtion from thf spfdififd providfr
     * is rfturnfd.  Thf spfdififd providfr must bf rfgistfrfd
     * in thf sfdurity providfr list.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.

     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd blgorithm.
     *          Sff thf <b hrff=
     *  "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/jssf/JSSERffGuidf.html">
     *          Jbvb Sfdurf Sodkft Extfnsion Rfffrfndf Guidf </b>
     *          for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf nbmf of thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * @throws NoSudhAlgorithmExdfption if b KfyMbnbgfrFbdtorySpi
     *          implfmfntbtion for thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     *
     * @throws NoSudhProvidfrExdfption if thf spfdififd providfr is not
     *          rfgistfrfd in thf sfdurity providfr list.
     *
     * @throws IllfgblArgumfntExdfption if thf providfr nbmf is null or fmpty.
     * @throws NullPointfrExdfption if <dodf>blgorithm</dodf> is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyMbnbgfrFbdtory gftInstbndf(String blgorithm,
            String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        GftInstbndf.Instbndf instbndf = GftInstbndf.gftInstbndf
                ("KfyMbnbgfrFbdtory", KfyMbnbgfrFbdtorySpi.dlbss,
                blgorithm, providfr);
        rfturn nfw KfyMbnbgfrFbdtory((KfyMbnbgfrFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns b <dodf>KfyMbnbgfrFbdtory</dodf> objfdt thbt bdts bs b
     * fbdtory for kfy mbnbgfrs.
     *
     * <p> A nfw KfyMbnbgfrFbdtory objfdt fndbpsulbting thf
     * KfyMbnbgfrFbdtorySpi implfmfntbtion from thf spfdififd Providfr
     * objfdt is rfturnfd.  Notf thbt thf spfdififd Providfr objfdt
     * dofs not hbvf to bf rfgistfrfd in thf providfr list.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd blgorithm.
     *          Sff thf <b hrff=
     *  "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/jssf/JSSERffGuidf.html">
     *          Jbvb Sfdurf Sodkft Extfnsion Rfffrfndf Guidf </b>
     *          for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr bn instbndf of thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * @throws NoSudhAlgorithmExdfption if b KfyMbnbgfrFbdtorySpi
     *          implfmfntbtion for thf spfdififd blgorithm is not bvbilbblf
     *          from thf spfdififd Providfr objfdt.
     *
     * @throws IllfgblArgumfntExdfption if providfr is null.
     * @throws NullPointfrExdfption if <dodf>blgorithm</dodf> is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyMbnbgfrFbdtory gftInstbndf(String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        GftInstbndf.Instbndf instbndf = GftInstbndf.gftInstbndf
                ("KfyMbnbgfrFbdtory", KfyMbnbgfrFbdtorySpi.dlbss,
                blgorithm, providfr);
        rfturn nfw KfyMbnbgfrFbdtory((KfyMbnbgfrFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns thf providfr of this <dodf>KfyMbnbgfrFbdtory</dodf> objfdt.
     *
     * @rfturn thf providfr of this <dodf>KfyMbnbgfrFbdtory</dodf> objfdt
     */
    publid finbl Providfr gftProvidfr() {
        rfturn this.providfr;
    }


    /**
     * Initiblizfs this fbdtory with b sourdf of kfy mbtfribl.
     * <P>
     * Thf providfr typidblly usfs b KfyStorf for obtbining
     * kfy mbtfribl for usf during sfdurf sodkft nfgotibtions.
     * Thf KfyStorf is gfnfrblly pbssword-protfdtfd.
     * <P>
     * For morf flfxiblf initiblizbtion, plfbsf sff
     * {@link #init(MbnbgfrFbdtoryPbrbmftfrs)}.
     * <P>
     *
     * @pbrbm ks thf kfy storf or null
     * @pbrbm pbssword thf pbssword for rfdovfring kfys in thf KfyStorf
     * @throws KfyStorfExdfption if this opfrbtion fbils
     * @throws NoSudhAlgorithmExdfption if thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     * @throws UnrfdovfrbblfKfyExdfption if thf kfy dbnnot bf rfdovfrfd
     *          (f.g. thf givfn pbssword is wrong).
     */
    publid finbl void init(KfyStorf ks, dhbr[] pbssword) throws
            KfyStorfExdfption, NoSudhAlgorithmExdfption,
            UnrfdovfrbblfKfyExdfption {
        fbdtorySpi.fnginfInit(ks, pbssword);
    }


    /**
     * Initiblizfs this fbdtory with b sourdf of providfr-spfdifid
     * kfy mbtfribl.
     * <P>
     * In somf dbsfs, initiblizbtion pbrbmftfrs othfr thbn b kfystorf
     * bnd pbssword mby bf nffdfd by b providfr.  Usfrs of thbt
     * pbrtidulbr providfr brf fxpfdtfd to pbss bn implfmfntbtion of
     * thf bppropribtf <CODE>MbnbgfrFbdtoryPbrbmftfrs</CODE> bs
     * dffinfd by thf providfr.  Thf providfr dbn thfn dbll thf
     * spfdififd mfthods in thf <CODE>MbnbgfrFbdtoryPbrbmftfrs</CODE>
     * implfmfntbtion to obtbin thf nffdfd informbtion.
     *
     * @pbrbm spfd bn implfmfntbtion of b providfr-spfdifid pbrbmftfr
     *          spfdifidbtion
     * @throws InvblidAlgorithmPbrbmftfrExdfption if bn frror is fndountfrfd
     */
    publid finbl void init(MbnbgfrFbdtoryPbrbmftfrs spfd) throws
            InvblidAlgorithmPbrbmftfrExdfption {
        fbdtorySpi.fnginfInit(spfd);
    }


    /**
     * Rfturns onf kfy mbnbgfr for fbdh typf of kfy mbtfribl.
     *
     * @rfturn thf kfy mbnbgfrs
     * @throws IllfgblStbtfExdfption if thf KfyMbnbgfrFbdtory is not initiblizfd
     */
    publid finbl KfyMbnbgfr[] gftKfyMbnbgfrs() {
        rfturn fbdtorySpi.fnginfGftKfyMbnbgfrs();
    }
}
