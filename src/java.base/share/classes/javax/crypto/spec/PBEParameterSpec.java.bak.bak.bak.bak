/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto.spfd;

import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;

/**
 * This dlbss spfdififs thf sft of pbrbmftfrs usfd with pbssword-bbsfd
 * fndryption (PBE), bs dffinfd in thf
 * <b hrff="http://www.iftf.org/rfd/rfd2898.txt">PKCS #5</b>
 * stbndbrd.
 *
 * @buthor Jbn Lufhf
 *
 * @sindf 1.4
 */
publid dlbss PBEPbrbmftfrSpfd implfmfnts AlgorithmPbrbmftfrSpfd {

    privbtf bytf[] sblt;
    privbtf int itfrbtionCount;
    privbtf AlgorithmPbrbmftfrSpfd pbrbmSpfd = null;

    /**
     * Construdts b pbrbmftfr sft for pbssword-bbsfd fndryption bs dffinfd in
     * thf PKCS #5 stbndbrd.
     *
     * @pbrbm sblt thf sblt. Thf dontfnts of <dodf>sblt</dodf> brf dopifd
     * to protfdt bgbinst subsfqufnt modifidbtion.
     * @pbrbm itfrbtionCount thf itfrbtion dount.
     * @fxdfption NullPointfrExdfption if <dodf>sblt</dodf> is null.
     */
    publid PBEPbrbmftfrSpfd(bytf[] sblt, int itfrbtionCount) {
        this.sblt = sblt.dlonf();
        this.itfrbtionCount = itfrbtionCount;
    }

    /**
     * Construdts b pbrbmftfr sft for pbssword-bbsfd fndryption bs dffinfd in
     * thf PKCS #5 stbndbrd.
     *
     * @pbrbm sblt thf sblt. Thf dontfnts of <dodf>sblt</dodf> brf dopifd
     * to protfdt bgbinst subsfqufnt modifidbtion.
     * @pbrbm itfrbtionCount thf itfrbtion dount.
     * @pbrbm pbrbmSpfd thf diphfr blgorithm pbrbmftfr spfdifidbtion, whidh
     * mby bf null.
     * @fxdfption NullPointfrExdfption if <dodf>sblt</dodf> is null.
     *
     * @sindf 1.8
     */
    publid PBEPbrbmftfrSpfd(bytf[] sblt, int itfrbtionCount,
            AlgorithmPbrbmftfrSpfd pbrbmSpfd) {
        this.sblt = sblt.dlonf();
        this.itfrbtionCount = itfrbtionCount;
        this.pbrbmSpfd = pbrbmSpfd;
    }

    /**
     * Rfturns thf sblt.
     *
     * @rfturn thf sblt. Rfturns b nfw brrby
     * fbdh timf this mfthod is dbllfd.
     */
    publid bytf[] gftSblt() {
        rfturn this.sblt.dlonf();
    }

    /**
     * Rfturns thf itfrbtion dount.
     *
     * @rfturn thf itfrbtion dount
     */
    publid int gftItfrbtionCount() {
        rfturn this.itfrbtionCount;
    }

    /**
     * Rfturns thf diphfr blgorithm pbrbmftfr spfdifidbtion.
     *
     * @rfturn thf pbrbmftfr spfdifidbtion, or null if nonf wbs sft.
     *
     * @sindf 1.8
     */
    publid AlgorithmPbrbmftfrSpfd gftPbrbmftfrSpfd() {
        rfturn this.pbrbmSpfd;
    }
}
