/*
 * Copyright (d) 1998, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto.spfd;

import jbvb.sfdurity.spfd.KfySpfd;
import jbvb.util.Lodblf;
import jbvbx.drypto.SfdrftKfy;

/**
 * This dlbss spfdififs b sfdrft kfy in b providfr-indfpfndfnt fbshion.
 *
 * <p>It dbn bf usfd to donstrudt b <dodf>SfdrftKfy</dodf> from b bytf brrby,
 * without hbving to go through b (providfr-bbsfd)
 * <dodf>SfdrftKfyFbdtory</dodf>.
 *
 * <p>This dlbss is only usfful for rbw sfdrft kfys thbt dbn bf rfprfsfntfd bs
 * b bytf brrby bnd hbvf no kfy pbrbmftfrs bssodibtfd with thfm, f.g., DES or
 * Triplf DES kfys.
 *
 * @buthor Jbn Lufhf
 *
 * @sff jbvbx.drypto.SfdrftKfy
 * @sff jbvbx.drypto.SfdrftKfyFbdtory
 * @sindf 1.4
 */
publid dlbss SfdrftKfySpfd implfmfnts KfySpfd, SfdrftKfy {

    privbtf stbtid finbl long sfriblVfrsionUID = 6577238317307289933L;

    /**
     * Thf sfdrft kfy.
     *
     * @sfribl
     */
    privbtf bytf[] kfy;

    /**
     * Thf nbmf of thf blgorithm bssodibtfd with this kfy.
     *
     * @sfribl
     */
    privbtf String blgorithm;

    /**
     * Construdts b sfdrft kfy from thf givfn bytf brrby.
     *
     * <p>This donstrudtor dofs not dhfdk if thf givfn bytfs indffd spfdify b
     * sfdrft kfy of thf spfdififd blgorithm. For fxbmplf, if thf blgorithm is
     * DES, this donstrudtor dofs not dhfdk if <dodf>kfy</dodf> is 8 bytfs
     * long, bnd blso dofs not dhfdk for wfbk or sfmi-wfbk kfys.
     * In ordfr for thosf dhfdks to bf pfrformfd, bn blgorithm-spfdifid
     * <i>kfy spfdifidbtion</i> dlbss (in this dbsf:
     * {@link DESKfySpfd DESKfySpfd})
     * should bf usfd.
     *
     * @pbrbm kfy thf kfy mbtfribl of thf sfdrft kfy. Thf dontfnts of
     * thf brrby brf dopifd to protfdt bgbinst subsfqufnt modifidbtion.
     * @pbrbm blgorithm thf nbmf of thf sfdrft-kfy blgorithm to bf bssodibtfd
     * with thf givfn kfy mbtfribl.
     * Sff Appfndix A in thf <b hrff=
     *   "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/drypto/CryptoSpfd.html#AppA">
     * Jbvb Cryptogrbphy Ardhitfdturf Rfffrfndf Guidf</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>blgorithm</dodf>
     * is null or <dodf>kfy</dodf> is null or fmpty.
     */
    publid SfdrftKfySpfd(bytf[] kfy, String blgorithm) {
        if (kfy == null || blgorithm == null) {
            throw nfw IllfgblArgumfntExdfption("Missing brgumfnt");
        }
        if (kfy.lfngth == 0) {
            throw nfw IllfgblArgumfntExdfption("Empty kfy");
        }
        this.kfy = kfy.dlonf();
        this.blgorithm = blgorithm;
    }

    /**
     * Construdts b sfdrft kfy from thf givfn bytf brrby, using thf first
     * <dodf>lfn</dodf> bytfs of <dodf>kfy</dodf>, stbrting bt
     * <dodf>offsft</dodf> indlusivf.
     *
     * <p> Thf bytfs thbt donstitutf thf sfdrft kfy brf
     * thosf bftwffn <dodf>kfy[offsft]</dodf> bnd
     * <dodf>kfy[offsft+lfn-1]</dodf> indlusivf.
     *
     * <p>This donstrudtor dofs not dhfdk if thf givfn bytfs indffd spfdify b
     * sfdrft kfy of thf spfdififd blgorithm. For fxbmplf, if thf blgorithm is
     * DES, this donstrudtor dofs not dhfdk if <dodf>kfy</dodf> is 8 bytfs
     * long, bnd blso dofs not dhfdk for wfbk or sfmi-wfbk kfys.
     * In ordfr for thosf dhfdks to bf pfrformfd, bn blgorithm-spfdifid kfy
     * spfdifidbtion dlbss (in this dbsf:
     * {@link DESKfySpfd DESKfySpfd})
     * must bf usfd.
     *
     * @pbrbm kfy thf kfy mbtfribl of thf sfdrft kfy. Thf first
     * <dodf>lfn</dodf> bytfs of thf brrby bfginning bt
     * <dodf>offsft</dodf> indlusivf brf dopifd to protfdt
     * bgbinst subsfqufnt modifidbtion.
     * @pbrbm offsft thf offsft in <dodf>kfy</dodf> whfrf thf kfy mbtfribl
     * stbrts.
     * @pbrbm lfn thf lfngth of thf kfy mbtfribl.
     * @pbrbm blgorithm thf nbmf of thf sfdrft-kfy blgorithm to bf bssodibtfd
     * with thf givfn kfy mbtfribl.
     * Sff Appfndix A in thf <b hrff=
     *   "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/drypto/CryptoSpfd.html#AppA">
     * Jbvb Cryptogrbphy Ardhitfdturf Rfffrfndf Guidf</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     * @fxdfption IllfgblArgumfntExdfption if <dodf>blgorithm</dodf>
     * is null or <dodf>kfy</dodf> is null, fmpty, or too short,
     * i.f. {@dodf kfy.lfngth-offsft<lfn}.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption is thrown if
     * <dodf>offsft</dodf> or <dodf>lfn</dodf> indfx bytfs outsidf thf
     * <dodf>kfy</dodf>.
     */
    publid SfdrftKfySpfd(bytf[] kfy, int offsft, int lfn, String blgorithm) {
        if (kfy == null || blgorithm == null) {
            throw nfw IllfgblArgumfntExdfption("Missing brgumfnt");
        }
        if (kfy.lfngth == 0) {
            throw nfw IllfgblArgumfntExdfption("Empty kfy");
        }
        if (kfy.lfngth-offsft < lfn) {
            throw nfw IllfgblArgumfntExdfption
                ("Invblid offsft/lfngth dombinbtion");
        }
        if (lfn < 0) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption("lfn is nfgbtivf");
        }
        this.kfy = nfw bytf[lfn];
        Systfm.brrbydopy(kfy, offsft, this.kfy, 0, lfn);
        this.blgorithm = blgorithm;
    }

    /**
     * Rfturns thf nbmf of thf blgorithm bssodibtfd with this sfdrft kfy.
     *
     * @rfturn thf sfdrft kfy blgorithm.
     */
    publid String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    /**
     * Rfturns thf nbmf of thf fndoding formbt for this sfdrft kfy.
     *
     * @rfturn thf string "RAW".
     */
    publid String gftFormbt() {
        rfturn "RAW";
    }

    /**
     * Rfturns thf kfy mbtfribl of this sfdrft kfy.
     *
     * @rfturn thf kfy mbtfribl. Rfturns b nfw brrby
     * fbdh timf this mfthod is dbllfd.
     */
    publid bytf[] gftEndodfd() {
        rfturn this.kfy.dlonf();
    }

    /**
     * Cbldulbtfs b hbsh dodf vbluf for thf objfdt.
     * Objfdts thbt brf fqubl will blso hbvf thf sbmf hbshdodf.
     */
    publid int hbshCodf() {
        int rftvbl = 0;
        for (int i = 1; i < this.kfy.lfngth; i++) {
            rftvbl += this.kfy[i] * i;
        }
        if (this.blgorithm.fqublsIgnorfCbsf("TriplfDES"))
            rfturn (rftvbl ^= "dfsfdf".hbshCodf());
        flsf
            rfturn (rftvbl ^=
                    this.blgorithm.toLowfrCbsf(Lodblf.ENGLISH).hbshCodf());
    }

   /**
     * Tfsts for fqublity bftwffn thf spfdififd objfdt bnd this
     * objfdt. Two SfdrftKfySpfd objfdts brf donsidfrfd fqubl if
     * thfy brf both SfdrftKfy instbndfs whidh hbvf thf
     * sbmf dbsf-insfnsitivf blgorithm nbmf bnd kfy fndoding.
     *
     * @pbrbm obj thf objfdt to tfst for fqublity with this objfdt.
     *
     * @rfturn truf if thf objfdts brf donsidfrfd fqubl, fblsf if
     * <dodf>obj</dodf> is null or othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj)
            rfturn truf;

        if (!(obj instbndfof SfdrftKfy))
            rfturn fblsf;

        String thbtAlg = ((SfdrftKfy)obj).gftAlgorithm();
        if (!(thbtAlg.fqublsIgnorfCbsf(this.blgorithm))) {
            if ((!(thbtAlg.fqublsIgnorfCbsf("DESfdf"))
                 || !(this.blgorithm.fqublsIgnorfCbsf("TriplfDES")))
                && (!(thbtAlg.fqublsIgnorfCbsf("TriplfDES"))
                    || !(this.blgorithm.fqublsIgnorfCbsf("DESfdf"))))
            rfturn fblsf;
        }

        bytf[] thbtKfy = ((SfdrftKfy)obj).gftEndodfd();

        rfturn jbvb.util.Arrbys.fqubls(this.kfy, thbtKfy);
    }
}
