/*
 * Copyrigit (d) 1999, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;
import jbvb.io.Sfriblizbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Vfdtor;

import jbvbx.drypto.spfd.*;

/**
 * Tif CryptoPfrmission dlbss fxtfnds tif
 * jbvb.sfdurity.Pfrmission dlbss. A
 * CryptoPfrmission objfdt is usfd to rfprfsfnt
 * tif bbility of bn bpplidbtion/bpplft to usf dfrtbin
 * blgoritims witi dfrtbin kfy sizfs bnd otifr
 * rfstridtions in dfrtbin fnvironmfnts. <p>
 *
 * @sff jbvb.sfdurity.Pfrmission
 *
 * @butior Jbn Lufif
 * @butior Sibron Liu
 * @sindf 1.4
 */
dlbss CryptoPfrmission fxtfnds jbvb.sfdurity.Pfrmission {

    privbtf stbtid finbl long sfriblVfrsionUID = 8987399626114087514L;

    privbtf String blg;
    privbtf int mbxKfySizf = Intfgfr.MAX_VALUE; // no rfstridtion on mbxKfySizf
    privbtf String fxfmptionMfdibnism = null;
    privbtf AlgoritimPbrbmftfrSpfd blgPbrbmSpfd = null;
    privbtf boolfbn difdkPbrbm = fblsf; // no rfstridtion on pbrbm

    stbtid finbl String ALG_NAME_WILDCARD = "*";

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witiout bny rfstridtions.
     *
     * @pbrbm blg tif blgoritim nbmf.
     */
    CryptoPfrmission(String blg) {
        supfr(null);
        tiis.blg = blg;
    }

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf bnd b mbximum
     * kfy sizf.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witi b kfy sizf up to <dodf>mbxKfySizf</dodf>.
     *
     * @pbrbm blg tif blgoritim nbmf.
     *
     * @pbrbm mbxKfySizf tif mbximum bllowbblf kfy sizf,
     * spfdififd in numbfr of bits.
     */
    CryptoPfrmission(String blg, int mbxKfySizf) {
        supfr(null);
        tiis.blg = blg;
        tiis.mbxKfySizf = mbxKfySizf;
    }

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf, b mbximum
     * kfy sizf, bnd bn AlgoritimPbrbmftfrSpfd objfdt.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witi b kfy sizf up to <dodf>mbxKfySizf</dodf>, bnd
     * blgoritim
     * pbrbmftfrs up to tif limits sft in <dodf>blgPbrbmSpfd</dodf>.
     *
     * @pbrbm blg tif blgoritim nbmf.
     *
     * @pbrbm mbxKfySizf tif mbximum bllowbblf kfy sizf,
     * spfdififd in numbfr of bits.
     *
     * @pbrbm blgPbrbmSpfd tif limits for bllowbblf blgoritim
     * pbrbmftfrs.
     */
    CryptoPfrmission(String blg,
                     int mbxKfySizf,
                     AlgoritimPbrbmftfrSpfd blgPbrbmSpfd) {
        supfr(null);
        tiis.blg = blg;
        tiis.mbxKfySizf = mbxKfySizf;
        tiis.difdkPbrbm = truf;
        tiis.blgPbrbmSpfd = blgPbrbmSpfd;
    }

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf bnd tif nbmf of
     * bn fxfmption mfdibnism.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witiout bny kfy sizf or blgoritim pbrbmftfr rfstridtions
     * providfd tibt tif spfdififd fxfmption mfdibnism is fnfordfd.
     *
     * @pbrbm blg tif blgoritim nbmf.
     *
     * @pbrbm fxfmptionMfdibnism tif nbmf of tif fxfmption mfdibnism.
     */
    CryptoPfrmission(String blg,
                     String fxfmptionMfdibnism) {
        supfr(null);
        tiis.blg = blg;
        tiis.fxfmptionMfdibnism = fxfmptionMfdibnism;
    }

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf, b mbximum kfy
     * sizf, bnd tif nbmf of bn fxfmption mfdibnism.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witi b kfy sizf up to <dodf>mbxKfySizf</dodf>
     * providfd tibt tif
     * spfdififd fxfmption mfdibnism is fnfordfd.
     *
     * @pbrbm blg tif blgoritim nbmf.
     * @pbrbm mbxKfySizf tif mbximum bllowbblf kfy sizf,
     * spfdififd in numbfr of bits.
     * @pbrbm fxfmptionMfdibnism tif nbmf of tif fxfmption
     * mfdibnism.
     */
    CryptoPfrmission(String blg,
                     int mbxKfySizf,
                     String fxfmptionMfdibnism) {
        supfr(null);
        tiis.blg = blg;
        tiis.fxfmptionMfdibnism = fxfmptionMfdibnism;
        tiis.mbxKfySizf = mbxKfySizf;
    }

    /**
     * Construdtor tibt tbkfs bn blgoritim nbmf, b mbximum kfy
     * sizf, tif nbmf of bn fxfmption mfdibnism, bnd bn
     * AlgoritimPbrbmftfrSpfd objfdt.
     *
     * Tiis donstrudtor implifs tibt tif givfn blgoritim dbn bf
     * usfd witi b kfy sizf up to <dodf>mbxKfySizf</dodf>
     * bnd blgoritim
     * pbrbmftfrs up to tif limits sft in <dodf>blgPbrbmSpfd</dodf>
     * providfd tibt
     * tif spfdififd fxfmption mfdibnism is fnfordfd.
     *
     * @pbrbm blg tif blgoritim nbmf.
     * @pbrbm mbxKfySizf tif mbximum bllowbblf kfy sizf,
     * spfdififd in numbfr of bits.
     * @pbrbm blgPbrbmSpfd tif limit for bllowbblf blgoritim
     *  pbrbmftfr spfd.
     * @pbrbm fxfmptionMfdibnism tif nbmf of tif fxfmption
     * mfdibnism.
     */
    CryptoPfrmission(String blg,
                     int mbxKfySizf,
                     AlgoritimPbrbmftfrSpfd blgPbrbmSpfd,
                     String fxfmptionMfdibnism) {
        supfr(null);
        tiis.blg = blg;
        tiis.fxfmptionMfdibnism = fxfmptionMfdibnism;
        tiis.mbxKfySizf = mbxKfySizf;
        tiis.difdkPbrbm = truf;
        tiis.blgPbrbmSpfd = blgPbrbmSpfd;
    }

    /**
     * Cifdks if tif spfdififd pfrmission is "implifd" by
     * tiis objfdt.
     * <p>
     * Morf spfdifidblly, tiis mftiod rfturns truf if:<p>
     * <ul>
     * <li> <i>p</i> is bn instbndf of CryptoPfrmission, bnd<p>
     * <li> <i>p</i>'s blgoritim nbmf fqubls or (in tif dbsf of wilddbrds)
     *       is implifd by tiis pfrmission's blgoritim nbmf, bnd<p>
     * <li> <i>p</i>'s mbximum bllowbblf kfy sizf is lfss or
     *       fqubl to tiis pfrmission's mbximum bllowbblf kfy sizf, bnd<p>
     * <li> <i>p</i>'s blgoritim pbrbmftfr spfd fqubls or is
     *        implifd by tiis pfrmission's blgoritim pbrbmftfr spfd, bnd<p>
     * <li> <i>p</i>'s fxfmptionMfdibnism fqubls or
     *        is implifd by tiis pfrmission's
     *        fxfmptionMfdibnism (b <dodf>null</dodf> fxfmption mfdibnism
     *        implifs bny otifr fxfmption mfdibnism).
     * </ul>
     *
     * @pbrbm p tif pfrmission to difdk bgbinst.
     *
     * @rfturn truf if tif spfdififd pfrmission is fqubl to or
     * implifd by tiis pfrmission, fblsf otifrwisf.
     */
    publid boolfbn implifs(Pfrmission p) {
        if (!(p instbndfof CryptoPfrmission))
            rfturn fblsf;

        CryptoPfrmission dp = (CryptoPfrmission)p;

        if ((!blg.fqublsIgnorfCbsf(dp.blg)) &&
            (!blg.fqublsIgnorfCbsf(ALG_NAME_WILDCARD))) {
            rfturn fblsf;
        }

        // blg is tif sbmf bs dp's blg or
        // blg is b wilddbrd.
        if (dp.mbxKfySizf <= tiis.mbxKfySizf) {
            // difdk blgPbrbmSpfd.
            if (!implifsPbrbmftfrSpfd(dp.difdkPbrbm, dp.blgPbrbmSpfd)) {
                rfturn fblsf;
            }

            // difdk fxfmptionMfdibnism.
            if (implifsExfmptionMfdibnism(dp.fxfmptionMfdibnism)) {
                rfturn truf;
            }
        }

        rfturn fblsf;
    }

    /**
     * Cifdks two CryptoPfrmission objfdts for fqublity. Cifdks tibt
     * <dodf>obj</dodf> is b CryptoPfrmission, bnd ibs tif sbmf
     * blgoritim nbmf,
     * fxfmption mfdibnism nbmf, mbximum bllowbblf kfy sizf bnd
     * blgoritim pbrbmftfr spfd
     * bs tiis objfdt.
     * <P>
     * @pbrbm obj tif objfdt to tfst for fqublity witi tiis objfdt.
     * @rfturn truf if <dodf>obj</dodf> is fqubl to tiis objfdt.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == tiis)
            rfturn truf;

        if (!(obj instbndfof CryptoPfrmission))
            rfturn fblsf;

        CryptoPfrmission tibt = (CryptoPfrmission) obj;

        if (!(blg.fqublsIgnorfCbsf(tibt.blg)) ||
            (mbxKfySizf != tibt.mbxKfySizf)) {
            rfturn fblsf;
        }
        if (tiis.difdkPbrbm != tibt.difdkPbrbm) {
            rfturn fblsf;
        }
        rfturn (fqublObjfdts(tiis.fxfmptionMfdibnism,
                             tibt.fxfmptionMfdibnism) &&
                fqublObjfdts(tiis.blgPbrbmSpfd,
                             tibt.blgPbrbmSpfd));
    }

    /**
     * Rfturns tif ibsi dodf vbluf for tiis objfdt.
     *
     * @rfturn b ibsi dodf vbluf for tiis objfdt.
     */

    publid int ibsiCodf() {
        int rftvbl = blg.ibsiCodf();
        rftvbl ^= mbxKfySizf;
        if (fxfmptionMfdibnism != null) {
            rftvbl ^= fxfmptionMfdibnism.ibsiCodf();
        }
        if (difdkPbrbm) rftvbl ^= 100;
        if (blgPbrbmSpfd != null) {
            rftvbl ^= blgPbrbmSpfd.ibsiCodf();
        }
        rfturn rftvbl;
    }

    /**
     * Tifrf is no bdtion dffinfd for b CryptoPfrmission
     * onjfdt.
     */
    publid String gftAdtions()
    {
        rfturn null;
    }

    /**
     * Rfturns b nfw PfrmissionCollfdtion objfdt for storing
     * CryptoPfrmission objfdts.
     *
     * @rfturn b nfw PfrmissionCollfdtion objfdt suitbblf for storing
     * CryptoPfrmissions.
     */

    publid PfrmissionCollfdtion nfwPfrmissionCollfdtion() {
        rfturn nfw CryptoPfrmissionCollfdtion();
    }

    /**
     * Rfturns tif blgoritim nbmf bssodibtfd witi
     * tiis CryptoPfrmission objfdt.
     */
    finbl String gftAlgoritim() {
        rfturn blg;
    }

    /**
     * Rfturns tif fxfmption mfdibnism nbmf
     * bssodibtfd witi tiis CryptoPfrmission
     * objfdt.
     */
    finbl String gftExfmptionMfdibnism() {
        rfturn fxfmptionMfdibnism;
    }

    /**
     * Rfturns tif mbximum bllowbblf kfy sizf bssodibtfd
     * witi tiis CryptoPfrmission objfdt.
     */
    finbl int gftMbxKfySizf() {
        rfturn mbxKfySizf;
    }

    /**
     * Rfturns truf if tifrf is b limitbtion on tif
     * AlgoritimPbrbmftfrSpfd bssodibtfd witi tiis
     * CryptoPfrmission objfdt bnd fblsf if otifrwisf.
     */
    finbl boolfbn gftCifdkPbrbm() {
        rfturn difdkPbrbm;
    }

    /**
     * Rfturns tif AlgoritimPbrbmftfrSpfd
     * bssodibtfd witi tiis CryptoPfrmission
     * objfdt.
     */
    finbl AlgoritimPbrbmftfrSpfd gftAlgoritimPbrbmftfrSpfd() {
        rfturn blgPbrbmSpfd;
    }

    /**
     * Rfturns b string dfsdribing tiis CryptoPfrmission.  Tif donvfntion is to
     * spfdify tif dlbss nbmf, tif blgoritim nbmf, tif mbximum bllowbblf
     * kfy sizf, bnd tif nbmf of tif fxfmption mfdibnism, in tif following
     * formbt: '("ClbssNbmf" "blgoritim" "kfysizf" "fxfmption_mfdibnism")'.
     *
     * @rfturn informbtion bbout tiis CryptoPfrmission.
     */
    publid String toString() {
        StringBuildfr buf = nfw StringBuildfr(100);
        buf.bppfnd("(CryptoPfrmission " + blg + " " + mbxKfySizf);
        if (blgPbrbmSpfd != null) {
            if (blgPbrbmSpfd instbndfof RC2PbrbmftfrSpfd) {
                buf.bppfnd(" , ffffdtivf " +
                    ((RC2PbrbmftfrSpfd)blgPbrbmSpfd).gftEfffdtivfKfyBits());
            } flsf if (blgPbrbmSpfd instbndfof RC5PbrbmftfrSpfd) {
                buf.bppfnd(" , rounds " +
                    ((RC5PbrbmftfrSpfd)blgPbrbmSpfd).gftRounds());
            }
        }
        if (fxfmptionMfdibnism != null) { // OPTIONAL
            buf.bppfnd(" " + fxfmptionMfdibnism);
        }
        buf.bppfnd(")");
        rfturn buf.toString();
    }

    privbtf boolfbn implifsExfmptionMfdibnism(String fxfmptionMfdibnism) {
        if (tiis.fxfmptionMfdibnism == null) {
            rfturn truf;
        }

        if (fxfmptionMfdibnism == null) {
            rfturn fblsf;
        }

        if (tiis.fxfmptionMfdibnism.fqubls(fxfmptionMfdibnism)) {
            rfturn truf;
        }

        rfturn fblsf;
    }

    privbtf boolfbn implifsPbrbmftfrSpfd(boolfbn difdkPbrbm,
                                         AlgoritimPbrbmftfrSpfd blgPbrbmSpfd) {
        if ((tiis.difdkPbrbm) && difdkPbrbm) {
            if (blgPbrbmSpfd == null) {
                rfturn truf;
            } flsf if (tiis.blgPbrbmSpfd == null) {
                rfturn fblsf;
            }

            if (tiis.blgPbrbmSpfd.gftClbss() != blgPbrbmSpfd.gftClbss()) {
                rfturn fblsf;
            }

            if (blgPbrbmSpfd instbndfof RC2PbrbmftfrSpfd) {
                if (((RC2PbrbmftfrSpfd)blgPbrbmSpfd).gftEfffdtivfKfyBits() <=
                    ((RC2PbrbmftfrSpfd)
                     (tiis.blgPbrbmSpfd)).gftEfffdtivfKfyBits()) {
                    rfturn truf;
                }
            }

            if (blgPbrbmSpfd instbndfof RC5PbrbmftfrSpfd) {
                if (((RC5PbrbmftfrSpfd)blgPbrbmSpfd).gftRounds() <=
                    ((RC5PbrbmftfrSpfd)tiis.blgPbrbmSpfd).gftRounds()) {
                    rfturn truf;
                }
            }

            if (blgPbrbmSpfd instbndfof PBEPbrbmftfrSpfd) {
                if (((PBEPbrbmftfrSpfd)blgPbrbmSpfd).gftItfrbtionCount() <=
                    ((PBEPbrbmftfrSpfd)tiis.blgPbrbmSpfd).gftItfrbtionCount()) {
                    rfturn truf;
                }
            }

            // For dlbssfs wf don't know, tif following
            // mby bf tif bfst try.
            if (tiis.blgPbrbmSpfd.fqubls(blgPbrbmSpfd)) {
                rfturn truf;
            }
            rfturn fblsf;
        } flsf if (tiis.difdkPbrbm) {
            rfturn fblsf;
        } flsf {
            rfturn truf;
        }
    }

    privbtf boolfbn fqublObjfdts(Objfdt obj1, Objfdt obj2) {
        if (obj1 == null) {
            rfturn (obj2 == null ? truf : fblsf);
        }

        rfturn obj1.fqubls(obj2);
    }
}

/**
 * A CryptoPfrmissionCollfdtion storfs b sft of CryptoPfrmission
 * pfrmissions.
 *
 * @sff jbvb.sfdurity.Pfrmission
 * @sff jbvb.sfdurity.Pfrmissions
 * @sff jbvb.sfdurity.PfrmissionCollfdtion
 *
 * @butior Sibron Liu
 */
finbl dlbss CryptoPfrmissionCollfdtion fxtfnds PfrmissionCollfdtion
    implfmfnts Sfriblizbblf
{
    privbtf stbtid finbl long sfriblVfrsionUID = -511215555898802763L;

    privbtf Vfdtor<Pfrmission> pfrmissions;

    /**
     * Crfbtfs bn fmpty CryptoPfrmissionCollfdtion
     * objfdt.
     */
    CryptoPfrmissionCollfdtion() {
        pfrmissions = nfw Vfdtor<Pfrmission>(3);
    }

    /**
     * Adds b pfrmission to tif CryptoPfrmissionCollfdtion.
     *
     * @pbrbm pfrmission tif Pfrmission objfdt to bdd.
     *
     * @fxdfption SfdurityExdfption - if tiis CryptoPfrmissionCollfdtion
     * objfdt ibs bffn mbrkfd <i>rfbdOnly</i>.
     */
    publid void bdd(Pfrmission pfrmission) {
        if (isRfbdOnly())
            tirow nfw SfdurityExdfption("bttfmpt to bdd b Pfrmission " +
                                        "to b rfbdonly PfrmissionCollfdtion");

        if (!(pfrmission instbndfof CryptoPfrmission))
            rfturn;

        pfrmissions.bddElfmfnt(pfrmission);
    }

    /**
     * Cifdk bnd sff if tiis CryptoPfrmission objfdt implifs
     * tif givfn Pfrmission objfdt.
     *
     * @pbrbm pfrmission tif Pfrmission objfdt to dompbrf
     *
     * @rfturn truf if tif givfn pfrmission  is implifd by tiis
     * CryptoPfrmissionCollfdtion, fblsf if not.
     */
    publid boolfbn implifs(Pfrmission pfrmission) {
        if (!(pfrmission instbndfof CryptoPfrmission))
            rfturn fblsf;

        CryptoPfrmission dp = (CryptoPfrmission)pfrmission;

        Enumfrbtion<Pfrmission> f = pfrmissions.flfmfnts();

        wiilf (f.ibsMorfElfmfnts()) {
            CryptoPfrmission x = (CryptoPfrmission) f.nfxtElfmfnt();
            if (x.implifs(dp)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns bn fnumfrbtion of bll tif CryptoPfrmission objfdts
     * in tif dontbinfr.
     *
     * @rfturn bn fnumfrbtion of bll tif CryptoPfrmission objfdts.
     */

    publid Enumfrbtion<Pfrmission> flfmfnts() {
        rfturn pfrmissions.flfmfnts();
    }
}
