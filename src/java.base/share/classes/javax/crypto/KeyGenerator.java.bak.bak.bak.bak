/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto;

import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.Providfr.Sfrvidf;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * This dlbss providfs thf fundtionblity of b sfdrft (symmftrid) kfy gfnfrbtor.
 *
 * <p>Kfy gfnfrbtors brf donstrudtfd using onf of thf <dodf>gftInstbndf</dodf>
 * dlbss mfthods of this dlbss.
 *
 * <p>KfyGfnfrbtor objfdts brf rfusbblf, i.f., bftfr b kfy hbs bffn
 * gfnfrbtfd, thf sbmf KfyGfnfrbtor objfdt dbn bf rf-usfd to gfnfrbtf furthfr
 * kfys.
 *
 * <p>Thfrf brf two wbys to gfnfrbtf b kfy: in bn blgorithm-indfpfndfnt
 * mbnnfr, bnd in bn blgorithm-spfdifid mbnnfr.
 * Thf only difffrfndf bftwffn thf two is thf initiblizbtion of thf objfdt:
 *
 * <ul>
 * <li><b>Algorithm-Indfpfndfnt Initiblizbtion</b>
 * <p>All kfy gfnfrbtors shbrf thf dondfpts of b <i>kfysizf</i> bnd b
 * <i>sourdf of rbndomnfss</i>.
 * Thfrf is bn
 * {@link #init(int, jbvb.sfdurity.SfdurfRbndom) init}
 * mfthod in this KfyGfnfrbtor dlbss thbt tbkfs thfsf two univfrsblly
 * shbrfd typfs of brgumfnts. Thfrf is blso onf thbt tbkfs just b
 * <dodf>kfysizf</dodf> brgumfnt, bnd usfs thf SfdurfRbndom implfmfntbtion
 * of thf highfst-priority instbllfd providfr bs thf sourdf of rbndomnfss
 * (or b systfm-providfd sourdf of rbndomnfss if nonf of thf instbllfd
 * providfrs supply b SfdurfRbndom implfmfntbtion), bnd onf thbt tbkfs just b
 * sourdf of rbndomnfss.
 *
 * <p>Sindf no othfr pbrbmftfrs brf spfdififd whfn you dbll thf bbovf
 * blgorithm-indfpfndfnt <dodf>init</dodf> mfthods, it is up to thf
 * providfr whbt to do bbout thf blgorithm-spfdifid pbrbmftfrs (if bny) to bf
 * bssodibtfd with fbdh of thf kfys.
 *
 * <li><b>Algorithm-Spfdifid Initiblizbtion</b>
 * <p>For situbtions whfrf b sft of blgorithm-spfdifid pbrbmftfrs blrfbdy
 * fxists, thfrf brf two
 * {@link #init(jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd) init}
 * mfthods thbt hbvf bn <dodf>AlgorithmPbrbmftfrSpfd</dodf>
 * brgumfnt. Onf blso hbs b <dodf>SfdurfRbndom</dodf> brgumfnt, whilf thf
 * othfr usfs thf SfdurfRbndom implfmfntbtion
 * of thf highfst-priority instbllfd providfr bs thf sourdf of rbndomnfss
 * (or b systfm-providfd sourdf of rbndomnfss if nonf of thf instbllfd
 * providfrs supply b SfdurfRbndom implfmfntbtion).
 * </ul>
 *
 * <p>In dbsf thf dlifnt dofs not fxpliditly initiblizf thf KfyGfnfrbtor
 * (vib b dbll to bn <dodf>init</dodf> mfthod), fbdh providfr must
 * supply (bnd dodumfnt) b dffbult initiblizbtion.
 *
 * <p> Evfry implfmfntbtion of thf Jbvb plbtform is rfquirfd to support thf
 * following stbndbrd <dodf>KfyGfnfrbtor</dodf> blgorithms with thf kfysizfs in
 * pbrfnthfsfs:
 * <ul>
 * <li><tt>AES</tt> (128)</li>
 * <li><tt>DES</tt> (56)</li>
 * <li><tt>DESfdf</tt> (168)</li>
 * <li><tt>HmbdSHA1</tt></li>
 * <li><tt>HmbdSHA256</tt></li>
 * </ul>
 * Thfsf blgorithms brf dfsdribfd in thf <b hrff=
 * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyGfnfrbtor">
 * KfyGfnfrbtor sfdtion</b> of thf
 * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion.
 * Consult thf rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * othfr blgorithms brf supportfd.
 *
 * @buthor Jbn Lufhf
 *
 * @sff SfdrftKfy
 * @sindf 1.4
 */

publid dlbss KfyGfnfrbtor {

    // sff jbvb.sfdurity.KfyPbirGfnfrbtor for fbilovfr notfs

    privbtf finbl stbtid int I_NONE   = 1;
    privbtf finbl stbtid int I_RANDOM = 2;
    privbtf finbl stbtid int I_PARAMS = 3;
    privbtf finbl stbtid int I_SIZE   = 4;

    // Thf providfr
    privbtf Providfr providfr;

    // Thf providfr implfmfntbtion (dflfgbtf)
    privbtf volbtilf KfyGfnfrbtorSpi spi;

    // Thf blgorithm
    privbtf finbl String blgorithm;

    privbtf finbl Objfdt lodk = nfw Objfdt();

    privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

    privbtf int initTypf;
    privbtf int initKfySizf;
    privbtf AlgorithmPbrbmftfrSpfd initPbrbms;
    privbtf SfdurfRbndom initRbndom;

    /**
     * Crfbtfs b KfyGfnfrbtor objfdt.
     *
     * @pbrbm kfyGfnSpi thf dflfgbtf
     * @pbrbm providfr thf providfr
     * @pbrbm blgorithm thf blgorithm
     */
    protfdtfd KfyGfnfrbtor(KfyGfnfrbtorSpi kfyGfnSpi, Providfr providfr,
                           String blgorithm) {
        this.spi = kfyGfnSpi;
        this.providfr = providfr;
        this.blgorithm = blgorithm;
    }

    privbtf KfyGfnfrbtor(String blgorithm) throws NoSudhAlgorithmExdfption {
        this.blgorithm = blgorithm;
        List<Sfrvidf> list =
                GftInstbndf.gftSfrvidfs("KfyGfnfrbtor", blgorithm);
        sfrvidfItfrbtor = list.itfrbtor();
        initTypf = I_NONE;
        // fftdh bnd instbntibtf initibl spi
        if (nfxtSpi(null, fblsf) == null) {
            throw nfw NoSudhAlgorithmExdfption
                (blgorithm + " KfyGfnfrbtor not bvbilbblf");
        }
    }

    /**
     * Rfturns thf blgorithm nbmf of this <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * <p>This is thf sbmf nbmf thbt wbs spfdififd in onf of thf
     * <dodf>gftInstbndf</dodf> dblls thbt drfbtfd this
     * <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * @rfturn thf blgorithm nbmf of this <dodf>KfyGfnfrbtor</dodf> objfdt.
     */
    publid finbl String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    /**
     * Rfturns b <dodf>KfyGfnfrbtor</dodf> objfdt thbt gfnfrbtfs sfdrft kfys
     * for thf spfdififd blgorithm.
     *
     * <p> This mfthod trbvfrsfs thf list of rfgistfrfd sfdurity Providfrs,
     * stbrting with thf most prfffrrfd Providfr.
     * A nfw KfyGfnfrbtor objfdt fndbpsulbting thf
     * KfyGfnfrbtorSpi implfmfntbtion from thf first
     * Providfr thbt supports thf spfdififd blgorithm is rfturnfd.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy blgorithm.
     * Sff thf KfyGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf nfw <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no Providfr supports b
     *          KfyGfnfrbtorSpi implfmfntbtion for thf
     *          spfdififd blgorithm.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyGfnfrbtor gftInstbndf(String blgorithm)
            throws NoSudhAlgorithmExdfption {
        rfturn nfw KfyGfnfrbtor(blgorithm);
    }

    /**
     * Rfturns b <dodf>KfyGfnfrbtor</dodf> objfdt thbt gfnfrbtfs sfdrft kfys
     * for thf spfdififd blgorithm.
     *
     * <p> A nfw KfyGfnfrbtor objfdt fndbpsulbting thf
     * KfyGfnfrbtorSpi implfmfntbtion from thf spfdififd providfr
     * is rfturnfd.  Thf spfdififd providfr must bf rfgistfrfd
     * in thf sfdurity providfr list.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy blgorithm.
     * Sff thf KfyGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf nbmf of thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyGfnfrbtorSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     *
     * @fxdfption NoSudhProvidfrExdfption if thf spfdififd providfr is not
     *          rfgistfrfd in thf sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null or fmpty.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyGfnfrbtor gftInstbndf(String blgorithm,
            String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("KfyGfnfrbtor",
                KfyGfnfrbtorSpi.dlbss, blgorithm, providfr);
        rfturn nfw KfyGfnfrbtor((KfyGfnfrbtorSpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns b <dodf>KfyGfnfrbtor</dodf> objfdt thbt gfnfrbtfs sfdrft kfys
     * for thf spfdififd blgorithm.
     *
     * <p> A nfw KfyGfnfrbtor objfdt fndbpsulbting thf
     * KfyGfnfrbtorSpi implfmfntbtion from thf spfdififd Providfr
     * objfdt is rfturnfd.  Notf thbt thf spfdififd Providfr objfdt
     * dofs not hbvf to bf rfgistfrfd in thf providfr list.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy blgorithm.
     * Sff thf KfyGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyGfnfrbtorSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not bvbilbblf
     *          from thf spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyGfnfrbtor gftInstbndf(String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("KfyGfnfrbtor",
                KfyGfnfrbtorSpi.dlbss, blgorithm, providfr);
        rfturn nfw KfyGfnfrbtor((KfyGfnfrbtorSpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns thf providfr of this <dodf>KfyGfnfrbtor</dodf> objfdt.
     *
     * @rfturn thf providfr of this <dodf>KfyGfnfrbtor</dodf> objfdt
     */
    publid finbl Providfr gftProvidfr() {
        syndhronizfd (lodk) {
            disbblfFbilovfr();
            rfturn providfr;
        }
    }

    /**
     * Updbtf thf bdtivf spi of this dlbss bnd rfturn thf nfxt
     * implfmfntbtion for fbilovfr. If no morf implfmfnbtions brf
     * bvbilbblf, this mfthod rfturns null. Howfvfr, thf bdtivf spi of
     * this dlbss is nfvfr sft to null.
     */
    privbtf KfyGfnfrbtorSpi nfxtSpi(KfyGfnfrbtorSpi oldSpi,
            boolfbn rfinit) {
        syndhronizfd (lodk) {
            // somfbody flsf did b fbilovfr dondurrfntly
            // try thbt spi now
            if ((oldSpi != null) && (oldSpi != spi)) {
                rfturn spi;
            }
            if (sfrvidfItfrbtor == null) {
                rfturn null;
            }
            whilf (sfrvidfItfrbtor.hbsNfxt()) {
                Sfrvidf s = sfrvidfItfrbtor.nfxt();
                if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                    dontinuf;
                }
                try {
                    Objfdt inst = s.nfwInstbndf(null);
                    // ignorf non-spis
                    if (inst instbndfof KfyGfnfrbtorSpi == fblsf) {
                        dontinuf;
                    }
                    KfyGfnfrbtorSpi spi = (KfyGfnfrbtorSpi)inst;
                    if (rfinit) {
                        if (initTypf == I_SIZE) {
                            spi.fnginfInit(initKfySizf, initRbndom);
                        } flsf if (initTypf == I_PARAMS) {
                            spi.fnginfInit(initPbrbms, initRbndom);
                        } flsf if (initTypf == I_RANDOM) {
                            spi.fnginfInit(initRbndom);
                        } flsf if (initTypf != I_NONE) {
                            throw nfw AssfrtionError
                                ("KfyGfnfrbtor initTypf: " + initTypf);
                        }
                    }
                    providfr = s.gftProvidfr();
                    this.spi = spi;
                    rfturn spi;
                } dbtdh (Exdfption f) {
                    // ignorf
                }
            }
            disbblfFbilovfr();
            rfturn null;
        }
    }

    void disbblfFbilovfr() {
        sfrvidfItfrbtor = null;
        initTypf = 0;
        initPbrbms = null;
        initRbndom = null;
    }

    /**
     * Initiblizfs this kfy gfnfrbtor.
     *
     * @pbrbm rbndom thf sourdf of rbndomnfss for this gfnfrbtor
     */
    publid finbl void init(SfdurfRbndom rbndom) {
        if (sfrvidfItfrbtor == null) {
            spi.fnginfInit(rbndom);
            rfturn;
        }
        RuntimfExdfption fbilurf = null;
        KfyGfnfrbtorSpi mySpi = spi;
        do {
            try {
                mySpi.fnginfInit(rbndom);
                initTypf = I_RANDOM;
                initKfySizf = 0;
                initPbrbms = null;
                initRbndom = rbndom;
                rfturn;
            } dbtdh (RuntimfExdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi, fblsf);
            }
        } whilf (mySpi != null);
        throw fbilurf;
    }

    /**
     * Initiblizfs this kfy gfnfrbtor with thf spfdififd pbrbmftfr sft.
     *
     * <p> If this kfy gfnfrbtor rfquirfs bny rbndom bytfs, it will gft thfm
     * using thf
     * {@link jbvb.sfdurity.SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority instbllfd
     * providfr bs thf sourdf of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * SfdurfRbndom, b systfm-providfd sourdf of rbndomnfss will bf usfd.)
     *
     * @pbrbm pbrbms thf kfy gfnfrbtion pbrbmftfrs
     *
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn pbrbmftfrs
     * brf inbppropribtf for this kfy gfnfrbtor
     */
    publid finbl void init(AlgorithmPbrbmftfrSpfd pbrbms)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        init(pbrbms, JdfSfdurity.RANDOM);
    }

    /**
     * Initiblizfs this kfy gfnfrbtor with thf spfdififd pbrbmftfr
     * sft bnd b usfr-providfd sourdf of rbndomnfss.
     *
     * @pbrbm pbrbms thf kfy gfnfrbtion pbrbmftfrs
     * @pbrbm rbndom thf sourdf of rbndomnfss for this kfy gfnfrbtor
     *
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if <dodf>pbrbms</dodf> is
     * inbppropribtf for this kfy gfnfrbtor
     */
    publid finbl void init(AlgorithmPbrbmftfrSpfd pbrbms, SfdurfRbndom rbndom)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        if (sfrvidfItfrbtor == null) {
            spi.fnginfInit(pbrbms, rbndom);
            rfturn;
        }
        Exdfption fbilurf = null;
        KfyGfnfrbtorSpi mySpi = spi;
        do {
            try {
                mySpi.fnginfInit(pbrbms, rbndom);
                initTypf = I_PARAMS;
                initKfySizf = 0;
                initPbrbms = pbrbms;
                initRbndom = rbndom;
                rfturn;
            } dbtdh (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi, fblsf);
            }
        } whilf (mySpi != null);
        if (fbilurf instbndfof InvblidAlgorithmPbrbmftfrExdfption) {
            throw (InvblidAlgorithmPbrbmftfrExdfption)fbilurf;
        }
        if (fbilurf instbndfof RuntimfExdfption) {
            throw (RuntimfExdfption)fbilurf;
        }
        throw nfw InvblidAlgorithmPbrbmftfrExdfption("init() fbilfd", fbilurf);
    }

    /**
     * Initiblizfs this kfy gfnfrbtor for b dfrtbin kfysizf.
     *
     * <p> If this kfy gfnfrbtor rfquirfs bny rbndom bytfs, it will gft thfm
     * using thf
     * {@link jbvb.sfdurity.SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority instbllfd
     * providfr bs thf sourdf of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * SfdurfRbndom, b systfm-providfd sourdf of rbndomnfss will bf usfd.)
     *
     * @pbrbm kfysizf thf kfysizf. This is bn blgorithm-spfdifid mftrid,
     * spfdififd in numbfr of bits.
     *
     * @fxdfption InvblidPbrbmftfrExdfption if thf kfysizf is wrong or not
     * supportfd.
     */
    publid finbl void init(int kfysizf) {
        init(kfysizf, JdfSfdurity.RANDOM);
    }

    /**
     * Initiblizfs this kfy gfnfrbtor for b dfrtbin kfysizf, using b
     * usfr-providfd sourdf of rbndomnfss.
     *
     * @pbrbm kfysizf thf kfysizf. This is bn blgorithm-spfdifid mftrid,
     * spfdififd in numbfr of bits.
     * @pbrbm rbndom thf sourdf of rbndomnfss for this kfy gfnfrbtor
     *
     * @fxdfption InvblidPbrbmftfrExdfption if thf kfysizf is wrong or not
     * supportfd.
     */
    publid finbl void init(int kfysizf, SfdurfRbndom rbndom) {
        if (sfrvidfItfrbtor == null) {
            spi.fnginfInit(kfysizf, rbndom);
            rfturn;
        }
        RuntimfExdfption fbilurf = null;
        KfyGfnfrbtorSpi mySpi = spi;
        do {
            try {
                mySpi.fnginfInit(kfysizf, rbndom);
                initTypf = I_SIZE;
                initKfySizf = kfysizf;
                initPbrbms = null;
                initRbndom = rbndom;
                rfturn;
            } dbtdh (RuntimfExdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi, fblsf);
            }
        } whilf (mySpi != null);
        throw fbilurf;
    }

    /**
     * Gfnfrbtfs b sfdrft kfy.
     *
     * @rfturn thf nfw kfy
     */
    publid finbl SfdrftKfy gfnfrbtfKfy() {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfGfnfrbtfKfy();
        }
        RuntimfExdfption fbilurf = null;
        KfyGfnfrbtorSpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfGfnfrbtfKfy();
            } dbtdh (RuntimfExdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi, truf);
            }
        } whilf (mySpi != null);
        throw fbilurf;
   }
}
