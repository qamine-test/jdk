/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto;

import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.Providfr.Sfrvidf;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * This dlbss rfprfsfnts b fbdtory for sfdrft kfys.
 *
 * <P> Kfy fbdtorifs brf usfd to donvfrt <I>kfys</I> (opbquf
 * dryptogrbphid kfys of typf <dodf>Kfy</dodf>) into <I>kfy spfdifidbtions</I>
 * (trbnspbrfnt rfprfsfntbtions of thf undfrlying kfy mbtfribl), bnd vidf
 * vfrsb.
 * Sfdrft kfy fbdtorifs opfrbtf only on sfdrft (symmftrid) kfys.
 *
 * <P> Kfy fbdtorifs brf bi-dirfdtionbl, i.f., thfy bllow to build bn opbquf
 * kfy objfdt from b givfn kfy spfdifidbtion (kfy mbtfribl), or to rftrifvf
 * thf undfrlying kfy mbtfribl of b kfy objfdt in b suitbblf formbt.
 *
 * <P> Applidbtion dfvflopfrs should rfffr to thfir providfr's dodumfntbtion
 * to find out whidh kfy spfdifidbtions brf supportfd by thf
 * {@link #gfnfrbtfSfdrft(jbvb.sfdurity.spfd.KfySpfd) gfnfrbtfSfdrft} bnd
 * {@link #gftKfySpfd(jbvbx.drypto.SfdrftKfy, jbvb.lbng.Clbss) gftKfySpfd}
 * mfthods.
 * For fxbmplf, thf DES sfdrft-kfy fbdtory supplifd by thf "SunJCE" providfr
 * supports <dodf>DESKfySpfd</dodf> bs b trbnspbrfnt rfprfsfntbtion of DES
 * kfys, bnd thbt providfr's sfdrft-kfy fbdtory for Triplf DES kfys supports
 * <dodf>DESfdfKfySpfd</dodf> bs b trbnspbrfnt rfprfsfntbtion of Triplf DES
 * kfys.
 *
 * <p> Evfry implfmfntbtion of thf Jbvb plbtform is rfquirfd to support thf
 * following stbndbrd <dodf>SfdrftKfyFbdtory</dodf> blgorithms:
 * <ul>
 * <li><tt>DES</tt></li>
 * <li><tt>DESfdf</tt></li>
 * </ul>
 * Thfsf blgorithms brf dfsdribfd in thf <b hrff=
 * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#SfdrftKfyFbdtory">
 * SfdrftKfyFbdtory sfdtion</b> of thf
 * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion.
 * Consult thf rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * othfr blgorithms brf supportfd.
 *
 * @buthor Jbn Lufhf
 *
 * @sff SfdrftKfy
 * @sff jbvbx.drypto.spfd.DESKfySpfd
 * @sff jbvbx.drypto.spfd.DESfdfKfySpfd
 * @sff jbvbx.drypto.spfd.PBEKfySpfd
 * @sindf 1.4
 */

publid dlbss SfdrftKfyFbdtory {

    // Thf providfr
    privbtf Providfr providfr;

    // Thf blgorithm bssodibtfd with this fbdtory
    privbtf finbl String blgorithm;

    // Thf providfr implfmfntbtion (dflfgbtf)
    privbtf volbtilf SfdrftKfyFbdtorySpi spi;

    // lodk for mutfx during providfr sflfdtion
    privbtf finbl Objfdt lodk = nfw Objfdt();

    // rfmbining sfrvidfs to try in providfr sflfdtion
    // null ondf providfr is sflfdtfd
    privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

    /**
     * Crfbtfs b SfdrftKfyFbdtory objfdt.
     *
     * @pbrbm kfyFbdSpi thf dflfgbtf
     * @pbrbm providfr thf providfr
     * @pbrbm blgorithm thf sfdrft-kfy blgorithm
     */
    protfdtfd SfdrftKfyFbdtory(SfdrftKfyFbdtorySpi kfyFbdSpi,
                               Providfr providfr, String blgorithm) {
        this.spi = kfyFbdSpi;
        this.providfr = providfr;
        this.blgorithm = blgorithm;
    }

    privbtf SfdrftKfyFbdtory(String blgorithm) throws NoSudhAlgorithmExdfption {
        this.blgorithm = blgorithm;
        List<Sfrvidf> list =
                GftInstbndf.gftSfrvidfs("SfdrftKfyFbdtory", blgorithm);
        sfrvidfItfrbtor = list.itfrbtor();
        // fftdh bnd instbntibtf initibl spi
        if (nfxtSpi(null) == null) {
            throw nfw NoSudhAlgorithmExdfption
                (blgorithm + " SfdrftKfyFbdtory not bvbilbblf");
        }
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt thbt donvfrts
     * sfdrft kfys of thf spfdififd blgorithm.
     *
     * <p> This mfthod trbvfrsfs thf list of rfgistfrfd sfdurity Providfrs,
     * stbrting with thf most prfffrrfd Providfr.
     * A nfw SfdrftKfyFbdtory objfdt fndbpsulbting thf
     * SfdrftKfyFbdtorySpi implfmfntbtion from thf first
     * Providfr thbt supports thf spfdififd blgorithm is rfturnfd.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd sfdrft-kfy
     * blgorithm.
     * Sff thf SfdrftKfyFbdtory sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     *          is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no Providfr supports b
     *          SfdrftKfyFbdtorySpi implfmfntbtion for thf
     *          spfdififd blgorithm.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgorithm)
            throws NoSudhAlgorithmExdfption {
        rfturn nfw SfdrftKfyFbdtory(blgorithm);
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt thbt donvfrts
     * sfdrft kfys of thf spfdififd blgorithm.
     *
     * <p> A nfw SfdrftKfyFbdtory objfdt fndbpsulbting thf
     * SfdrftKfyFbdtorySpi implfmfntbtion from thf spfdififd providfr
     * is rfturnfd.  Thf spfdififd providfr must bf rfgistfrfd
     * in thf sfdurity providfr list.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd sfdrft-kfy
     * blgorithm.
     * Sff thf SfdrftKfyFbdtory sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf nbmf of thf providfr.
     *
     * @rfturn thf nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b SfdrftKfyFbdtorySpi
     *          implfmfntbtion for thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     *          is null.
     *
     * @throws NoSudhProvidfrExdfption if thf spfdififd providfr is not
     *          rfgistfrfd in thf sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null or fmpty.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgorithm,
            String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("SfdrftKfyFbdtory",
                SfdrftKfyFbdtorySpi.dlbss, blgorithm, providfr);
        rfturn nfw SfdrftKfyFbdtory((SfdrftKfyFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt thbt donvfrts
     * sfdrft kfys of thf spfdififd blgorithm.
     *
     * <p> A nfw SfdrftKfyFbdtory objfdt fndbpsulbting thf
     * SfdrftKfyFbdtorySpi implfmfntbtion from thf spfdififd Providfr
     * objfdt is rfturnfd.  Notf thbt thf spfdififd Providfr objfdt
     * dofs not hbvf to bf rfgistfrfd in thf providfr list.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd sfdrft-kfy
     * blgorithm.
     * Sff thf SfdrftKfyFbdtory sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf providfr.
     *
     * @rfturn thf nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     * is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b SfdrftKfyFbdtorySpi
     *          implfmfntbtion for thf spfdififd blgorithm is not bvbilbblf
     *          from thf spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("SfdrftKfyFbdtory",
                SfdrftKfyFbdtorySpi.dlbss, blgorithm, providfr);
        rfturn nfw SfdrftKfyFbdtory((SfdrftKfyFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns thf providfr of this <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @rfturn thf providfr of this <dodf>SfdrftKfyFbdtory</dodf> objfdt
     */
    publid finbl Providfr gftProvidfr() {
        syndhronizfd (lodk) {
            // disbblf furthfr fbilovfr bftfr this dbll
            sfrvidfItfrbtor = null;
            rfturn providfr;
        }
    }

    /**
     * Rfturns thf blgorithm nbmf of this <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * <p>This is thf sbmf nbmf thbt wbs spfdififd in onf of thf
     * <dodf>gftInstbndf</dodf> dblls thbt drfbtfd this
     * <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @rfturn thf blgorithm nbmf of this <dodf>SfdrftKfyFbdtory</dodf>
     * objfdt.
     */
    publid finbl String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    /**
     * Updbtf thf bdtivf spi of this dlbss bnd rfturn thf nfxt
     * implfmfntbtion for fbilovfr. If no morf implfmfnbtions brf
     * bvbilbblf, this mfthod rfturns null. Howfvfr, thf bdtivf spi of
     * this dlbss is nfvfr sft to null.
     */
    privbtf SfdrftKfyFbdtorySpi nfxtSpi(SfdrftKfyFbdtorySpi oldSpi) {
        syndhronizfd (lodk) {
            // somfbody flsf did b fbilovfr dondurrfntly
            // try thbt spi now
            if ((oldSpi != null) && (oldSpi != spi)) {
                rfturn spi;
            }
            if (sfrvidfItfrbtor == null) {
                rfturn null;
            }
            whilf (sfrvidfItfrbtor.hbsNfxt()) {
                Sfrvidf s = sfrvidfItfrbtor.nfxt();
                if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                    dontinuf;
                }
                try {
                    Objfdt obj = s.nfwInstbndf(null);
                    if (obj instbndfof SfdrftKfyFbdtorySpi == fblsf) {
                        dontinuf;
                    }
                    SfdrftKfyFbdtorySpi spi = (SfdrftKfyFbdtorySpi)obj;
                    providfr = s.gftProvidfr();
                    this.spi = spi;
                    rfturn spi;
                } dbtdh (NoSudhAlgorithmExdfption f) {
                    // ignorf
                }
            }
            sfrvidfItfrbtor = null;
            rfturn null;
        }
    }

    /**
     * Gfnfrbtfs b <dodf>SfdrftKfy</dodf> objfdt from thf providfd kfy
     * spfdifidbtion (kfy mbtfribl).
     *
     * @pbrbm kfySpfd thf spfdifidbtion (kfy mbtfribl) of thf sfdrft kfy
     *
     * @rfturn thf sfdrft kfy
     *
     * @fxdfption InvblidKfySpfdExdfption if thf givfn kfy spfdifidbtion
     * is inbppropribtf for this sfdrft-kfy fbdtory to produdf b sfdrft kfy.
     */
    publid finbl SfdrftKfy gfnfrbtfSfdrft(KfySpfd kfySpfd)
            throws InvblidKfySpfdExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfGfnfrbtfSfdrft(kfySpfd);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfGfnfrbtfSfdrft(kfySpfd);
            } dbtdh (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } whilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfySpfdExdfption) {
            throw (InvblidKfySpfdExdfption)fbilurf;
        }
        throw nfw InvblidKfySpfdExdfption
                ("Could not gfnfrbtf sfdrft kfy", fbilurf);
    }

    /**
     * Rfturns b spfdifidbtion (kfy mbtfribl) of thf givfn kfy objfdt
     * in thf rfqufstfd formbt.
     *
     * @pbrbm kfy thf kfy
     * @pbrbm kfySpfd thf rfqufstfd formbt in whidh thf kfy mbtfribl shbll bf
     * rfturnfd
     *
     * @rfturn thf undfrlying kfy spfdifidbtion (kfy mbtfribl) in thf
     * rfqufstfd formbt
     *
     * @fxdfption InvblidKfySpfdExdfption if thf rfqufstfd kfy spfdifidbtion is
     * inbppropribtf for thf givfn kfy (f.g., thf blgorithms bssodibtfd with
     * <dodf>kfy</dodf> bnd <dodf>kfySpfd</dodf> do not mbtdh, or
     * <dodf>kfy</dodf> rfffrfndfs b kfy on b dryptogrbphid hbrdwbrf dfvidf
     * whfrfbs <dodf>kfySpfd</dodf> is thf spfdifidbtion of b softwbrf-bbsfd
     * kfy), or thf givfn kfy dbnnot bf dfblt with
     * (f.g., thf givfn kfy hbs bn blgorithm or formbt not supportfd by this
     * sfdrft-kfy fbdtory).
     */
    publid finbl KfySpfd gftKfySpfd(SfdrftKfy kfy, Clbss<?> kfySpfd)
            throws InvblidKfySpfdExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfGftKfySpfd(kfy, kfySpfd);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfGftKfySpfd(kfy, kfySpfd);
            } dbtdh (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } whilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfySpfdExdfption) {
            throw (InvblidKfySpfdExdfption)fbilurf;
        }
        throw nfw InvblidKfySpfdExdfption
                ("Could not gft kfy spfd", fbilurf);
    }

    /**
     * Trbnslbtfs b kfy objfdt, whosf providfr mby bf unknown or potfntiblly
     * untrustfd, into b dorrfsponding kfy objfdt of this sfdrft-kfy fbdtory.
     *
     * @pbrbm kfy thf kfy whosf providfr is unknown or untrustfd
     *
     * @rfturn thf trbnslbtfd kfy
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy dbnnot bf prodfssfd
     * by this sfdrft-kfy fbdtory.
     */
    publid finbl SfdrftKfy trbnslbtfKfy(SfdrftKfy kfy)
            throws InvblidKfyExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfTrbnslbtfKfy(kfy);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfTrbnslbtfKfy(kfy);
            } dbtdh (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } whilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfyExdfption) {
            throw (InvblidKfyExdfption)fbilurf;
        }
        throw nfw InvblidKfyExdfption
                ("Could not trbnslbtf kfy", fbilurf);
    }
}
