/*
 * Copyrigit (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto;

import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.Providfr.Sfrvidf;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * Tiis dlbss rfprfsfnts b fbdtory for sfdrft kfys.
 *
 * <P> Kfy fbdtorifs brf usfd to donvfrt <I>kfys</I> (opbquf
 * dryptogrbpiid kfys of typf <dodf>Kfy</dodf>) into <I>kfy spfdifidbtions</I>
 * (trbnspbrfnt rfprfsfntbtions of tif undfrlying kfy mbtfribl), bnd vidf
 * vfrsb.
 * Sfdrft kfy fbdtorifs opfrbtf only on sfdrft (symmftrid) kfys.
 *
 * <P> Kfy fbdtorifs brf bi-dirfdtionbl, i.f., tify bllow to build bn opbquf
 * kfy objfdt from b givfn kfy spfdifidbtion (kfy mbtfribl), or to rftrifvf
 * tif undfrlying kfy mbtfribl of b kfy objfdt in b suitbblf formbt.
 *
 * <P> Applidbtion dfvflopfrs siould rfffr to tifir providfr's dodumfntbtion
 * to find out wiidi kfy spfdifidbtions brf supportfd by tif
 * {@link #gfnfrbtfSfdrft(jbvb.sfdurity.spfd.KfySpfd) gfnfrbtfSfdrft} bnd
 * {@link #gftKfySpfd(jbvbx.drypto.SfdrftKfy, jbvb.lbng.Clbss) gftKfySpfd}
 * mftiods.
 * For fxbmplf, tif DES sfdrft-kfy fbdtory supplifd by tif "SunJCE" providfr
 * supports <dodf>DESKfySpfd</dodf> bs b trbnspbrfnt rfprfsfntbtion of DES
 * kfys, bnd tibt providfr's sfdrft-kfy fbdtory for Triplf DES kfys supports
 * <dodf>DESfdfKfySpfd</dodf> bs b trbnspbrfnt rfprfsfntbtion of Triplf DES
 * kfys.
 *
 * <p> Evfry implfmfntbtion of tif Jbvb plbtform is rfquirfd to support tif
 * following stbndbrd <dodf>SfdrftKfyFbdtory</dodf> blgoritims:
 * <ul>
 * <li><tt>DES</tt></li>
 * <li><tt>DESfdf</tt></li>
 * </ul>
 * Tifsf blgoritims brf dfsdribfd in tif <b irff=
 * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#SfdrftKfyFbdtory">
 * SfdrftKfyFbdtory sfdtion</b> of tif
 * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion.
 * Consult tif rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * otifr blgoritims brf supportfd.
 *
 * @butior Jbn Lufif
 *
 * @sff SfdrftKfy
 * @sff jbvbx.drypto.spfd.DESKfySpfd
 * @sff jbvbx.drypto.spfd.DESfdfKfySpfd
 * @sff jbvbx.drypto.spfd.PBEKfySpfd
 * @sindf 1.4
 */

publid dlbss SfdrftKfyFbdtory {

    // Tif providfr
    privbtf Providfr providfr;

    // Tif blgoritim bssodibtfd witi tiis fbdtory
    privbtf finbl String blgoritim;

    // Tif providfr implfmfntbtion (dflfgbtf)
    privbtf volbtilf SfdrftKfyFbdtorySpi spi;

    // lodk for mutfx during providfr sflfdtion
    privbtf finbl Objfdt lodk = nfw Objfdt();

    // rfmbining sfrvidfs to try in providfr sflfdtion
    // null ondf providfr is sflfdtfd
    privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

    /**
     * Crfbtfs b SfdrftKfyFbdtory objfdt.
     *
     * @pbrbm kfyFbdSpi tif dflfgbtf
     * @pbrbm providfr tif providfr
     * @pbrbm blgoritim tif sfdrft-kfy blgoritim
     */
    protfdtfd SfdrftKfyFbdtory(SfdrftKfyFbdtorySpi kfyFbdSpi,
                               Providfr providfr, String blgoritim) {
        tiis.spi = kfyFbdSpi;
        tiis.providfr = providfr;
        tiis.blgoritim = blgoritim;
    }

    privbtf SfdrftKfyFbdtory(String blgoritim) tirows NoSudiAlgoritimExdfption {
        tiis.blgoritim = blgoritim;
        List<Sfrvidf> list =
                GftInstbndf.gftSfrvidfs("SfdrftKfyFbdtory", blgoritim);
        sfrvidfItfrbtor = list.itfrbtor();
        // fftdi bnd instbntibtf initibl spi
        if (nfxtSpi(null) == null) {
            tirow nfw NoSudiAlgoritimExdfption
                (blgoritim + " SfdrftKfyFbdtory not bvbilbblf");
        }
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt tibt donvfrts
     * sfdrft kfys of tif spfdififd blgoritim.
     *
     * <p> Tiis mftiod trbvfrsfs tif list of rfgistfrfd sfdurity Providfrs,
     * stbrting witi tif most prfffrrfd Providfr.
     * A nfw SfdrftKfyFbdtory objfdt fndbpsulbting tif
     * SfdrftKfyFbdtorySpi implfmfntbtion from tif first
     * Providfr tibt supports tif spfdififd blgoritim is rfturnfd.
     *
     * <p> Notf tibt tif list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * tif {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mftiod.
     *
     * @pbrbm blgoritim tif stbndbrd nbmf of tif rfqufstfd sfdrft-kfy
     * blgoritim.
     * Sff tif SfdrftKfyFbdtory sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @rfturn tif nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if tif spfdififd blgoritim
     *          is null.
     *
     * @fxdfption NoSudiAlgoritimExdfption if no Providfr supports b
     *          SfdrftKfyFbdtorySpi implfmfntbtion for tif
     *          spfdififd blgoritim.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgoritim)
            tirows NoSudiAlgoritimExdfption {
        rfturn nfw SfdrftKfyFbdtory(blgoritim);
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt tibt donvfrts
     * sfdrft kfys of tif spfdififd blgoritim.
     *
     * <p> A nfw SfdrftKfyFbdtory objfdt fndbpsulbting tif
     * SfdrftKfyFbdtorySpi implfmfntbtion from tif spfdififd providfr
     * is rfturnfd.  Tif spfdififd providfr must bf rfgistfrfd
     * in tif sfdurity providfr list.
     *
     * <p> Notf tibt tif list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * tif {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mftiod.
     *
     * @pbrbm blgoritim tif stbndbrd nbmf of tif rfqufstfd sfdrft-kfy
     * blgoritim.
     * Sff tif SfdrftKfyFbdtory sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @pbrbm providfr tif nbmf of tif providfr.
     *
     * @rfturn tif nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NoSudiAlgoritimExdfption if b SfdrftKfyFbdtorySpi
     *          implfmfntbtion for tif spfdififd blgoritim is not
     *          bvbilbblf from tif spfdififd providfr.
     *
     * @fxdfption NullPointfrExdfption if tif spfdififd blgoritim
     *          is null.
     *
     * @tirows NoSudiProvidfrExdfption if tif spfdififd providfr is not
     *          rfgistfrfd in tif sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if tif <dodf>providfr</dodf>
     *          is null or fmpty.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgoritim,
            String providfr) tirows NoSudiAlgoritimExdfption,
            NoSudiProvidfrExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("SfdrftKfyFbdtory",
                SfdrftKfyFbdtorySpi.dlbss, blgoritim, providfr);
        rfturn nfw SfdrftKfyFbdtory((SfdrftKfyFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgoritim);
    }

    /**
     * Rfturns b <dodf>SfdrftKfyFbdtory</dodf> objfdt tibt donvfrts
     * sfdrft kfys of tif spfdififd blgoritim.
     *
     * <p> A nfw SfdrftKfyFbdtory objfdt fndbpsulbting tif
     * SfdrftKfyFbdtorySpi implfmfntbtion from tif spfdififd Providfr
     * objfdt is rfturnfd.  Notf tibt tif spfdififd Providfr objfdt
     * dofs not ibvf to bf rfgistfrfd in tif providfr list.
     *
     * @pbrbm blgoritim tif stbndbrd nbmf of tif rfqufstfd sfdrft-kfy
     * blgoritim.
     * Sff tif SfdrftKfyFbdtory sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#SfdrftKfyFbdtory">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @pbrbm providfr tif providfr.
     *
     * @rfturn tif nfw <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if tif spfdififd blgoritim
     * is null.
     *
     * @fxdfption NoSudiAlgoritimExdfption if b SfdrftKfyFbdtorySpi
     *          implfmfntbtion for tif spfdififd blgoritim is not bvbilbblf
     *          from tif spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if tif <dodf>providfr</dodf>
     *          is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl SfdrftKfyFbdtory gftInstbndf(String blgoritim,
            Providfr providfr) tirows NoSudiAlgoritimExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf("SfdrftKfyFbdtory",
                SfdrftKfyFbdtorySpi.dlbss, blgoritim, providfr);
        rfturn nfw SfdrftKfyFbdtory((SfdrftKfyFbdtorySpi)instbndf.impl,
                instbndf.providfr, blgoritim);
    }

    /**
     * Rfturns tif providfr of tiis <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @rfturn tif providfr of tiis <dodf>SfdrftKfyFbdtory</dodf> objfdt
     */
    publid finbl Providfr gftProvidfr() {
        syndironizfd (lodk) {
            // disbblf furtifr fbilovfr bftfr tiis dbll
            sfrvidfItfrbtor = null;
            rfturn providfr;
        }
    }

    /**
     * Rfturns tif blgoritim nbmf of tiis <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * <p>Tiis is tif sbmf nbmf tibt wbs spfdififd in onf of tif
     * <dodf>gftInstbndf</dodf> dblls tibt drfbtfd tiis
     * <dodf>SfdrftKfyFbdtory</dodf> objfdt.
     *
     * @rfturn tif blgoritim nbmf of tiis <dodf>SfdrftKfyFbdtory</dodf>
     * objfdt.
     */
    publid finbl String gftAlgoritim() {
        rfturn tiis.blgoritim;
    }

    /**
     * Updbtf tif bdtivf spi of tiis dlbss bnd rfturn tif nfxt
     * implfmfntbtion for fbilovfr. If no morf implfmfnbtions brf
     * bvbilbblf, tiis mftiod rfturns null. Howfvfr, tif bdtivf spi of
     * tiis dlbss is nfvfr sft to null.
     */
    privbtf SfdrftKfyFbdtorySpi nfxtSpi(SfdrftKfyFbdtorySpi oldSpi) {
        syndironizfd (lodk) {
            // somfbody flsf did b fbilovfr dondurrfntly
            // try tibt spi now
            if ((oldSpi != null) && (oldSpi != spi)) {
                rfturn spi;
            }
            if (sfrvidfItfrbtor == null) {
                rfturn null;
            }
            wiilf (sfrvidfItfrbtor.ibsNfxt()) {
                Sfrvidf s = sfrvidfItfrbtor.nfxt();
                if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                    dontinuf;
                }
                try {
                    Objfdt obj = s.nfwInstbndf(null);
                    if (obj instbndfof SfdrftKfyFbdtorySpi == fblsf) {
                        dontinuf;
                    }
                    SfdrftKfyFbdtorySpi spi = (SfdrftKfyFbdtorySpi)obj;
                    providfr = s.gftProvidfr();
                    tiis.spi = spi;
                    rfturn spi;
                } dbtdi (NoSudiAlgoritimExdfption f) {
                    // ignorf
                }
            }
            sfrvidfItfrbtor = null;
            rfturn null;
        }
    }

    /**
     * Gfnfrbtfs b <dodf>SfdrftKfy</dodf> objfdt from tif providfd kfy
     * spfdifidbtion (kfy mbtfribl).
     *
     * @pbrbm kfySpfd tif spfdifidbtion (kfy mbtfribl) of tif sfdrft kfy
     *
     * @rfturn tif sfdrft kfy
     *
     * @fxdfption InvblidKfySpfdExdfption if tif givfn kfy spfdifidbtion
     * is inbppropribtf for tiis sfdrft-kfy fbdtory to produdf b sfdrft kfy.
     */
    publid finbl SfdrftKfy gfnfrbtfSfdrft(KfySpfd kfySpfd)
            tirows InvblidKfySpfdExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfGfnfrbtfSfdrft(kfySpfd);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfGfnfrbtfSfdrft(kfySpfd);
            } dbtdi (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } wiilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfySpfdExdfption) {
            tirow (InvblidKfySpfdExdfption)fbilurf;
        }
        tirow nfw InvblidKfySpfdExdfption
                ("Could not gfnfrbtf sfdrft kfy", fbilurf);
    }

    /**
     * Rfturns b spfdifidbtion (kfy mbtfribl) of tif givfn kfy objfdt
     * in tif rfqufstfd formbt.
     *
     * @pbrbm kfy tif kfy
     * @pbrbm kfySpfd tif rfqufstfd formbt in wiidi tif kfy mbtfribl sibll bf
     * rfturnfd
     *
     * @rfturn tif undfrlying kfy spfdifidbtion (kfy mbtfribl) in tif
     * rfqufstfd formbt
     *
     * @fxdfption InvblidKfySpfdExdfption if tif rfqufstfd kfy spfdifidbtion is
     * inbppropribtf for tif givfn kfy (f.g., tif blgoritims bssodibtfd witi
     * <dodf>kfy</dodf> bnd <dodf>kfySpfd</dodf> do not mbtdi, or
     * <dodf>kfy</dodf> rfffrfndfs b kfy on b dryptogrbpiid ibrdwbrf dfvidf
     * wifrfbs <dodf>kfySpfd</dodf> is tif spfdifidbtion of b softwbrf-bbsfd
     * kfy), or tif givfn kfy dbnnot bf dfblt witi
     * (f.g., tif givfn kfy ibs bn blgoritim or formbt not supportfd by tiis
     * sfdrft-kfy fbdtory).
     */
    publid finbl KfySpfd gftKfySpfd(SfdrftKfy kfy, Clbss<?> kfySpfd)
            tirows InvblidKfySpfdExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfGftKfySpfd(kfy, kfySpfd);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfGftKfySpfd(kfy, kfySpfd);
            } dbtdi (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } wiilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfySpfdExdfption) {
            tirow (InvblidKfySpfdExdfption)fbilurf;
        }
        tirow nfw InvblidKfySpfdExdfption
                ("Could not gft kfy spfd", fbilurf);
    }

    /**
     * Trbnslbtfs b kfy objfdt, wiosf providfr mby bf unknown or potfntiblly
     * untrustfd, into b dorrfsponding kfy objfdt of tiis sfdrft-kfy fbdtory.
     *
     * @pbrbm kfy tif kfy wiosf providfr is unknown or untrustfd
     *
     * @rfturn tif trbnslbtfd kfy
     *
     * @fxdfption InvblidKfyExdfption if tif givfn kfy dbnnot bf prodfssfd
     * by tiis sfdrft-kfy fbdtory.
     */
    publid finbl SfdrftKfy trbnslbtfKfy(SfdrftKfy kfy)
            tirows InvblidKfyExdfption {
        if (sfrvidfItfrbtor == null) {
            rfturn spi.fnginfTrbnslbtfKfy(kfy);
        }
        Exdfption fbilurf = null;
        SfdrftKfyFbdtorySpi mySpi = spi;
        do {
            try {
                rfturn mySpi.fnginfTrbnslbtfKfy(kfy);
            } dbtdi (Exdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
                mySpi = nfxtSpi(mySpi);
            }
        } wiilf (mySpi != null);
        if (fbilurf instbndfof InvblidKfyExdfption) {
            tirow (InvblidKfyExdfption)fbilurf;
        }
        tirow nfw InvblidKfyExdfption
                ("Could not trbnslbtf kfy", fbilurf);
    }
}
