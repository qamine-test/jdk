/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvbx.drypto;

import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.Providfr.Sfrvidf;
import jbvb.sfdurity.spfd.*;

import sun.sfdurity.util.Dfbug;
import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * This dlbss providfs thf fundtionblity of b kfy bgrffmfnt (or kfy
 * fxdhbngf) protodol.
 * <p>
 * Thf kfys involvfd in fstbblishing b shbrfd sfdrft brf drfbtfd by onf of thf
 * kfy gfnfrbtors (<dodf>KfyPbirGfnfrbtor</dodf> or
 * <dodf>KfyGfnfrbtor</dodf>), b <dodf>KfyFbdtory</dodf>, or bs b rfsult from
 * bn intfrmfdibtf phbsf of thf kfy bgrffmfnt protodol.
 *
 * <p> For fbdh of thf dorrfspondfnts in thf kfy fxdhbngf, <dodf>doPhbsf</dodf>
 * nffds to bf dbllfd. For fxbmplf, if this kfy fxdhbngf is with onf othfr
 * pbrty, <dodf>doPhbsf</dodf> nffds to bf dbllfd ondf, with thf
 * <dodf>lbstPhbsf</dodf> flbg sft to <dodf>truf</dodf>.
 * If this kfy fxdhbngf is
 * with two othfr pbrtifs, <dodf>doPhbsf</dodf> nffds to bf dbllfd twidf,
 * thf first timf sftting thf <dodf>lbstPhbsf</dodf> flbg to
 * <dodf>fblsf</dodf>, bnd thf sfdond timf sftting it to <dodf>truf</dodf>.
 * Thfrf mby bf bny numbfr of pbrtifs involvfd in b kfy fxdhbngf.
 *
 * <p> Evfry implfmfntbtion of thf Jbvb plbtform is rfquirfd to support thf
 * following stbndbrd <dodf>KfyAgrffmfnt</dodf> blgorithm:
 * <ul>
 * <li><tt>DiffifHfllmbn</tt></li>
 * </ul>
 * This blgorithm is dfsdribfd in thf <b hrff=
 * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyAgrffmfnt">
 * KfyAgrffmfnt sfdtion</b> of thf
 * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion.
 * Consult thf rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * othfr blgorithms brf supportfd.
 *
 * @buthor Jbn Lufhf
 *
 * @sff KfyGfnfrbtor
 * @sff SfdrftKfy
 * @sindf 1.4
 */

publid dlbss KfyAgrffmfnt {

    privbtf stbtid finbl Dfbug dfbug =
                        Dfbug.gftInstbndf("jdb", "KfyAgrffmfnt");

    // Thf providfr
    privbtf Providfr providfr;

    // Thf providfr implfmfntbtion (dflfgbtf)
    privbtf KfyAgrffmfntSpi spi;

    // Thf nbmf of thf kfy bgrffmfnt blgorithm.
    privbtf finbl String blgorithm;

    // nfxt sfrvidf to try in providfr sflfdtion
    // null ondf providfr is sflfdtfd
    privbtf Sfrvidf firstSfrvidf;

    // rfmbining sfrvidfs to try in providfr sflfdtion
    // null ondf providfr is sflfdtfd
    privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

    privbtf finbl Objfdt lodk;

    /**
     * Crfbtfs b KfyAgrffmfnt objfdt.
     *
     * @pbrbm kfyAgrffSpi thf dflfgbtf
     * @pbrbm providfr thf providfr
     * @pbrbm blgorithm thf blgorithm
     */
    protfdtfd KfyAgrffmfnt(KfyAgrffmfntSpi kfyAgrffSpi, Providfr providfr,
                           String blgorithm) {
        this.spi = kfyAgrffSpi;
        this.providfr = providfr;
        this.blgorithm = blgorithm;
        lodk = null;
    }

    privbtf KfyAgrffmfnt(Sfrvidf s, Itfrbtor<Sfrvidf> t, String blgorithm) {
        firstSfrvidf = s;
        sfrvidfItfrbtor = t;
        this.blgorithm = blgorithm;
        lodk = nfw Objfdt();
    }

    /**
     * Rfturns thf blgorithm nbmf of this <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * <p>This is thf sbmf nbmf thbt wbs spfdififd in onf of thf
     * <dodf>gftInstbndf</dodf> dblls thbt drfbtfd this
     * <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * @rfturn thf blgorithm nbmf of this <dodf>KfyAgrffmfnt</dodf> objfdt.
     */
    publid finbl String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    /**
     * Rfturns b <dodf>KfyAgrffmfnt</dodf> objfdt thbt implfmfnts thf
     * spfdififd kfy bgrffmfnt blgorithm.
     *
     * <p> This mfthod trbvfrsfs thf list of rfgistfrfd sfdurity Providfrs,
     * stbrting with thf most prfffrrfd Providfr.
     * A nfw KfyAgrffmfnt objfdt fndbpsulbting thf
     * KfyAgrffmfntSpi implfmfntbtion from thf first
     * Providfr thbt supports thf spfdififd blgorithm is rfturnfd.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy bgrffmfnt
     * blgorithm.
     * Sff thf KfyAgrffmfnt sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyAgrffmfnt">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf nfw <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     *          is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no Providfr supports b
     *          KfyAgrffmfntSpi implfmfntbtion for thf
     *          spfdififd blgorithm.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyAgrffmfnt gftInstbndf(String blgorithm)
            throws NoSudhAlgorithmExdfption {
        List<Sfrvidf> sfrvidfs =
                GftInstbndf.gftSfrvidfs("KfyAgrffmfnt", blgorithm);
        // mbkf surf thfrf is bt lfbst onf sfrvidf from b signfd providfr
        Itfrbtor<Sfrvidf> t = sfrvidfs.itfrbtor();
        whilf (t.hbsNfxt()) {
            Sfrvidf s = t.nfxt();
            if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                dontinuf;
            }
            rfturn nfw KfyAgrffmfnt(s, t, blgorithm);
        }
        throw nfw NoSudhAlgorithmExdfption
                                ("Algorithm " + blgorithm + " not bvbilbblf");
    }

    /**
     * Rfturns b <dodf>KfyAgrffmfnt</dodf> objfdt thbt implfmfnts thf
     * spfdififd kfy bgrffmfnt blgorithm.
     *
     * <p> A nfw KfyAgrffmfnt objfdt fndbpsulbting thf
     * KfyAgrffmfntSpi implfmfntbtion from thf spfdififd providfr
     * is rfturnfd.  Thf spfdififd providfr must bf rfgistfrfd
     * in thf sfdurity providfr list.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy bgrffmfnt
     * blgorithm.
     * Sff thf KfyAgrffmfnt sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyAgrffmfnt">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf nbmf of thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     *          is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyAgrffmfntSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     *
     * @fxdfption NoSudhProvidfrExdfption if thf spfdififd providfr is not
     *          rfgistfrfd in thf sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null or fmpty.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyAgrffmfnt gftInstbndf(String blgorithm,
            String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf
                ("KfyAgrffmfnt", KfyAgrffmfntSpi.dlbss, blgorithm, providfr);
        rfturn nfw KfyAgrffmfnt((KfyAgrffmfntSpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    /**
     * Rfturns b <dodf>KfyAgrffmfnt</dodf> objfdt thbt implfmfnts thf
     * spfdififd kfy bgrffmfnt blgorithm.
     *
     * <p> A nfw KfyAgrffmfnt objfdt fndbpsulbting thf
     * KfyAgrffmfntSpi implfmfntbtion from thf spfdififd Providfr
     * objfdt is rfturnfd.  Notf thbt thf spfdififd Providfr objfdt
     * dofs not hbvf to bf rfgistfrfd in thf providfr list.
     *
     * @pbrbm blgorithm thf stbndbrd nbmf of thf rfqufstfd kfy bgrffmfnt
     * blgorithm.
     * Sff thf KfyAgrffmfnt sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyAgrffmfnt">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf providfr.
     *
     * @rfturn thf nfw <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * @fxdfption NullPointfrExdfption if thf spfdififd blgorithm
     *          is null.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyAgrffmfntSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not bvbilbblf
     *          from thf spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>providfr</dodf>
     *          is null.
     *
     * @sff jbvb.sfdurity.Providfr
     */
    publid stbtid finbl KfyAgrffmfnt gftInstbndf(String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        Instbndf instbndf = JdfSfdurity.gftInstbndf
                ("KfyAgrffmfnt", KfyAgrffmfntSpi.dlbss, blgorithm, providfr);
        rfturn nfw KfyAgrffmfnt((KfyAgrffmfntSpi)instbndf.impl,
                instbndf.providfr, blgorithm);
    }

    // mbx numbfr of dfbug wbrnings to print from dhoosfFirstProvidfr()
    privbtf stbtid int wbrnCount = 10;

    /**
     * Choosf thf Spi from thf first providfr bvbilbblf. Usfd if
     * dflbyfd providfr sflfdtion is not possiblf bfdbusf init()
     * is not thf first mfthod dbllfd.
     */
    void dhoosfFirstProvidfr() {
        if (spi != null) {
            rfturn;
        }
        syndhronizfd (lodk) {
            if (spi != null) {
                rfturn;
            }
            if (dfbug != null) {
                int w = --wbrnCount;
                if (w >= 0) {
                    dfbug.println("KfyAgrffmfnt.init() not first mfthod "
                        + "dbllfd, disbbling dflbyfd providfr sflfdtion");
                    if (w == 0) {
                        dfbug.println("Furthfr wbrnings of this typf will "
                            + "bf supprfssfd");
                    }
                    nfw Exdfption("Cbll trbdf").printStbdkTrbdf();
                }
            }
            Exdfption lbstExdfption = null;
            whilf ((firstSfrvidf != null) || sfrvidfItfrbtor.hbsNfxt()) {
                Sfrvidf s;
                if (firstSfrvidf != null) {
                    s = firstSfrvidf;
                    firstSfrvidf = null;
                } flsf {
                    s = sfrvidfItfrbtor.nfxt();
                }
                if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                    dontinuf;
                }
                try {
                    Objfdt obj = s.nfwInstbndf(null);
                    if (obj instbndfof KfyAgrffmfntSpi == fblsf) {
                        dontinuf;
                    }
                    spi = (KfyAgrffmfntSpi)obj;
                    providfr = s.gftProvidfr();
                    // not nffdfd bny morf
                    firstSfrvidf = null;
                    sfrvidfItfrbtor = null;
                    rfturn;
                } dbtdh (Exdfption f) {
                    lbstExdfption = f;
                }
            }
            ProvidfrExdfption f = nfw ProvidfrExdfption
                    ("Could not donstrudt KfyAgrffmfntSpi instbndf");
            if (lbstExdfption != null) {
                f.initCbusf(lbstExdfption);
            }
            throw f;
        }
    }

    privbtf finbl stbtid int I_NO_PARAMS = 1;
    privbtf finbl stbtid int I_PARAMS    = 2;

    privbtf void implInit(KfyAgrffmfntSpi spi, int typf, Kfy kfy,
            AlgorithmPbrbmftfrSpfd pbrbms, SfdurfRbndom rbndom)
            throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        if (typf == I_NO_PARAMS) {
            spi.fnginfInit(kfy, rbndom);
        } flsf { // I_PARAMS
            spi.fnginfInit(kfy, pbrbms, rbndom);
        }
    }

    privbtf void dhoosfProvidfr(int initTypf, Kfy kfy,
            AlgorithmPbrbmftfrSpfd pbrbms, SfdurfRbndom rbndom)
            throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        syndhronizfd (lodk) {
            if (spi != null) {
                implInit(spi, initTypf, kfy, pbrbms, rbndom);
                rfturn;
            }
            Exdfption lbstExdfption = null;
            whilf ((firstSfrvidf != null) || sfrvidfItfrbtor.hbsNfxt()) {
                Sfrvidf s;
                if (firstSfrvidf != null) {
                    s = firstSfrvidf;
                    firstSfrvidf = null;
                } flsf {
                    s = sfrvidfItfrbtor.nfxt();
                }
                // if providfr sbys it dofs not support this kfy, ignorf it
                if (s.supportsPbrbmftfr(kfy) == fblsf) {
                    dontinuf;
                }
                if (JdfSfdurity.dbnUsfProvidfr(s.gftProvidfr()) == fblsf) {
                    dontinuf;
                }
                try {
                    KfyAgrffmfntSpi spi = (KfyAgrffmfntSpi)s.nfwInstbndf(null);
                    implInit(spi, initTypf, kfy, pbrbms, rbndom);
                    providfr = s.gftProvidfr();
                    this.spi = spi;
                    firstSfrvidf = null;
                    sfrvidfItfrbtor = null;
                    rfturn;
                } dbtdh (Exdfption f) {
                    // NoSudhAlgorithmExdfption from nfwInstbndf()
                    // InvblidKfyExdfption from init()
                    // RuntimfExdfption (ProvidfrExdfption) from init()
                    if (lbstExdfption == null) {
                        lbstExdfption = f;
                    }
                }
            }
            // no working providfr found, fbil
            if (lbstExdfption instbndfof InvblidKfyExdfption) {
                throw (InvblidKfyExdfption)lbstExdfption;
            }
            if (lbstExdfption instbndfof InvblidAlgorithmPbrbmftfrExdfption) {
                throw (InvblidAlgorithmPbrbmftfrExdfption)lbstExdfption;
            }
            if (lbstExdfption instbndfof RuntimfExdfption) {
                throw (RuntimfExdfption)lbstExdfption;
            }
            String kNbmf = (kfy != null) ? kfy.gftClbss().gftNbmf() : "(null)";
            throw nfw InvblidKfyExdfption
                ("No instbllfd providfr supports this kfy: "
                + kNbmf, lbstExdfption);
        }
    }

    /**
     * Rfturns thf providfr of this <dodf>KfyAgrffmfnt</dodf> objfdt.
     *
     * @rfturn thf providfr of this <dodf>KfyAgrffmfnt</dodf> objfdt
     */
    publid finbl Providfr gftProvidfr() {
        dhoosfFirstProvidfr();
        rfturn this.providfr;
    }

    /**
     * Initiblizfs this kfy bgrffmfnt with thf givfn kfy, whidh is rfquirfd to
     * dontbin bll thf blgorithm pbrbmftfrs rfquirfd for this kfy bgrffmfnt.
     *
     * <p> If this kfy bgrffmfnt rfquirfs bny rbndom bytfs, it will gft
     * thfm using thf
     * {@link jbvb.sfdurity.SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority
     * instbllfd providfr bs thf sourdf of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * SfdurfRbndom, b systfm-providfd sourdf of rbndomnfss will bf usfd.)
     *
     * @pbrbm kfy thf pbrty's privbtf informbtion. For fxbmplf, in thf dbsf
     * of thf Diffif-Hfllmbn kfy bgrffmfnt, this would bf thf pbrty's own
     * Diffif-Hfllmbn privbtf kfy.
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is
     * inbppropribtf for this kfy bgrffmfnt, f.g., is of thf wrong typf or
     * hbs bn indompbtiblf blgorithm typf.
     */
    publid finbl void init(Kfy kfy) throws InvblidKfyExdfption {
        init(kfy, JdfSfdurity.RANDOM);
    }

    /**
     * Initiblizfs this kfy bgrffmfnt with thf givfn kfy bnd sourdf of
     * rbndomnfss. Thf givfn kfy is rfquirfd to dontbin bll thf blgorithm
     * pbrbmftfrs rfquirfd for this kfy bgrffmfnt.
     *
     * <p> If thf kfy bgrffmfnt blgorithm rfquirfs rbndom bytfs, it gfts thfm
     * from thf givfn sourdf of rbndomnfss, <dodf>rbndom</dodf>.
     * Howfvfr, if thf undfrlying
     * blgorithm implfmfntbtion dofs not rfquirf bny rbndom bytfs,
     * <dodf>rbndom</dodf> is ignorfd.
     *
     * @pbrbm kfy thf pbrty's privbtf informbtion. For fxbmplf, in thf dbsf
     * of thf Diffif-Hfllmbn kfy bgrffmfnt, this would bf thf pbrty's own
     * Diffif-Hfllmbn privbtf kfy.
     * @pbrbm rbndom thf sourdf of rbndomnfss
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is
     * inbppropribtf for this kfy bgrffmfnt, f.g., is of thf wrong typf or
     * hbs bn indompbtiblf blgorithm typf.
     */
    publid finbl void init(Kfy kfy, SfdurfRbndom rbndom)
            throws InvblidKfyExdfption {
        if (spi != null) {
            spi.fnginfInit(kfy, rbndom);
        } flsf {
            try {
                dhoosfProvidfr(I_NO_PARAMS, kfy, null, rbndom);
            } dbtdh (InvblidAlgorithmPbrbmftfrExdfption f) {
                // should nfvfr oddur
                throw nfw InvblidKfyExdfption(f);
            }
        }
    }

    /**
     * Initiblizfs this kfy bgrffmfnt with thf givfn kfy bnd sft of
     * blgorithm pbrbmftfrs.
     *
     * <p> If this kfy bgrffmfnt rfquirfs bny rbndom bytfs, it will gft
     * thfm using thf
     * {@link jbvb.sfdurity.SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority
     * instbllfd providfr bs thf sourdf of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * SfdurfRbndom, b systfm-providfd sourdf of rbndomnfss will bf usfd.)
     *
     * @pbrbm kfy thf pbrty's privbtf informbtion. For fxbmplf, in thf dbsf
     * of thf Diffif-Hfllmbn kfy bgrffmfnt, this would bf thf pbrty's own
     * Diffif-Hfllmbn privbtf kfy.
     * @pbrbm pbrbms thf kfy bgrffmfnt pbrbmftfrs
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is
     * inbppropribtf for this kfy bgrffmfnt, f.g., is of thf wrong typf or
     * hbs bn indompbtiblf blgorithm typf.
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn pbrbmftfrs
     * brf inbppropribtf for this kfy bgrffmfnt.
     */
    publid finbl void init(Kfy kfy, AlgorithmPbrbmftfrSpfd pbrbms)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption
    {
        init(kfy, pbrbms, JdfSfdurity.RANDOM);
    }

    /**
     * Initiblizfs this kfy bgrffmfnt with thf givfn kfy, sft of
     * blgorithm pbrbmftfrs, bnd sourdf of rbndomnfss.
     *
     * @pbrbm kfy thf pbrty's privbtf informbtion. For fxbmplf, in thf dbsf
     * of thf Diffif-Hfllmbn kfy bgrffmfnt, this would bf thf pbrty's own
     * Diffif-Hfllmbn privbtf kfy.
     * @pbrbm pbrbms thf kfy bgrffmfnt pbrbmftfrs
     * @pbrbm rbndom thf sourdf of rbndomnfss
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is
     * inbppropribtf for this kfy bgrffmfnt, f.g., is of thf wrong typf or
     * hbs bn indompbtiblf blgorithm typf.
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn pbrbmftfrs
     * brf inbppropribtf for this kfy bgrffmfnt.
     */
    publid finbl void init(Kfy kfy, AlgorithmPbrbmftfrSpfd pbrbms,
                           SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption
    {
        if (spi != null) {
            spi.fnginfInit(kfy, pbrbms, rbndom);
        } flsf {
            dhoosfProvidfr(I_PARAMS, kfy, pbrbms, rbndom);
        }
    }

    /**
     * Exfdutfs thf nfxt phbsf of this kfy bgrffmfnt with thf givfn
     * kfy thbt wbs rfdfivfd from onf of thf othfr pbrtifs involvfd in this kfy
     * bgrffmfnt.
     *
     * @pbrbm kfy thf kfy for this phbsf. For fxbmplf, in thf dbsf of
     * Diffif-Hfllmbn bftwffn 2 pbrtifs, this would bf thf othfr pbrty's
     * Diffif-Hfllmbn publid kfy.
     * @pbrbm lbstPhbsf flbg whidh indidbtfs whfthfr or not this is thf lbst
     * phbsf of this kfy bgrffmfnt.
     *
     * @rfturn thf (intfrmfdibtf) kfy rfsulting from this phbsf, or null
     * if this phbsf dofs not yifld b kfy
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * this phbsf.
     * @fxdfption IllfgblStbtfExdfption if this kfy bgrffmfnt hbs not bffn
     * initiblizfd.
     */
    publid finbl Kfy doPhbsf(Kfy kfy, boolfbn lbstPhbsf)
        throws InvblidKfyExdfption, IllfgblStbtfExdfption
    {
        dhoosfFirstProvidfr();
        rfturn spi.fnginfDoPhbsf(kfy, lbstPhbsf);
    }

    /**
     * Gfnfrbtfs thf shbrfd sfdrft bnd rfturns it in b nfw bufffr.
     *
     * <p>This mfthod rfsfts this <dodf>KfyAgrffmfnt</dodf> objfdt, so thbt it
     * dbn bf rfusfd for furthfr kfy bgrffmfnts. Unlfss this kfy bgrffmfnt is
     * rfinitiblizfd with onf of thf <dodf>init</dodf> mfthods, thf sbmf
     * privbtf informbtion bnd blgorithm pbrbmftfrs will bf usfd for
     * subsfqufnt kfy bgrffmfnts.
     *
     * @rfturn thf nfw bufffr with thf shbrfd sfdrft
     *
     * @fxdfption IllfgblStbtfExdfption if this kfy bgrffmfnt hbs not bffn
     * domplftfd yft
     */
    publid finbl bytf[] gfnfrbtfSfdrft() throws IllfgblStbtfExdfption {
        dhoosfFirstProvidfr();
        rfturn spi.fnginfGfnfrbtfSfdrft();
    }

    /**
     * Gfnfrbtfs thf shbrfd sfdrft, bnd plbdfs it into thf bufffr
     * <dodf>shbrfdSfdrft</dodf>, bfginning bt <dodf>offsft</dodf> indlusivf.
     *
     * <p>If thf <dodf>shbrfdSfdrft</dodf> bufffr is too smbll to hold thf
     * rfsult, b <dodf>ShortBufffrExdfption</dodf> is thrown.
     * In this dbsf, this dbll should bf rfpfbtfd with b lbrgfr output bufffr.
     *
     * <p>This mfthod rfsfts this <dodf>KfyAgrffmfnt</dodf> objfdt, so thbt it
     * dbn bf rfusfd for furthfr kfy bgrffmfnts. Unlfss this kfy bgrffmfnt is
     * rfinitiblizfd with onf of thf <dodf>init</dodf> mfthods, thf sbmf
     * privbtf informbtion bnd blgorithm pbrbmftfrs will bf usfd for
     * subsfqufnt kfy bgrffmfnts.
     *
     * @pbrbm shbrfdSfdrft thf bufffr for thf shbrfd sfdrft
     * @pbrbm offsft thf offsft in <dodf>shbrfdSfdrft</dodf> whfrf thf
     * shbrfd sfdrft will bf storfd
     *
     * @rfturn thf numbfr of bytfs plbdfd into <dodf>shbrfdSfdrft</dodf>
     *
     * @fxdfption IllfgblStbtfExdfption if this kfy bgrffmfnt hbs not bffn
     * domplftfd yft
     * @fxdfption ShortBufffrExdfption if thf givfn output bufffr is too smbll
     * to hold thf sfdrft
     */
    publid finbl int gfnfrbtfSfdrft(bytf[] shbrfdSfdrft, int offsft)
        throws IllfgblStbtfExdfption, ShortBufffrExdfption
    {
        dhoosfFirstProvidfr();
        rfturn spi.fnginfGfnfrbtfSfdrft(shbrfdSfdrft, offsft);
    }

    /**
     * Crfbtfs thf shbrfd sfdrft bnd rfturns it bs b <dodf>SfdrftKfy</dodf>
     * objfdt of thf spfdififd blgorithm.
     *
     * <p>This mfthod rfsfts this <dodf>KfyAgrffmfnt</dodf> objfdt, so thbt it
     * dbn bf rfusfd for furthfr kfy bgrffmfnts. Unlfss this kfy bgrffmfnt is
     * rfinitiblizfd with onf of thf <dodf>init</dodf> mfthods, thf sbmf
     * privbtf informbtion bnd blgorithm pbrbmftfrs will bf usfd for
     * subsfqufnt kfy bgrffmfnts.
     *
     * @pbrbm blgorithm thf rfqufstfd sfdrft-kfy blgorithm
     *
     * @rfturn thf shbrfd sfdrft kfy
     *
     * @fxdfption IllfgblStbtfExdfption if this kfy bgrffmfnt hbs not bffn
     * domplftfd yft
     * @fxdfption NoSudhAlgorithmExdfption if thf spfdififd sfdrft-kfy
     * blgorithm is not bvbilbblf
     * @fxdfption InvblidKfyExdfption if thf shbrfd sfdrft-kfy mbtfribl dbnnot
     * bf usfd to gfnfrbtf b sfdrft kfy of thf spfdififd blgorithm (f.g.,
     * thf kfy mbtfribl is too short)
     */
    publid finbl SfdrftKfy gfnfrbtfSfdrft(String blgorithm)
        throws IllfgblStbtfExdfption, NoSudhAlgorithmExdfption,
            InvblidKfyExdfption
    {
        dhoosfFirstProvidfr();
        rfturn spi.fnginfGfnfrbtfSfdrft(blgorithm);
    }
}
