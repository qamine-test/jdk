/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.trff;

import jbvb.util.ArrbyList;
import jbvb.util.List;

import jdk.intfrnbl.org.objfdtwfb.bsm.AnnotbtionVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.FifldVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;

/**
 * A nodf thbt rfprfsfnts b fifld.
 *
 * @buthor Erid Brunfton
 */
publid dlbss FifldNodf fxtfnds FifldVisitor {

    /**
     * Thf fifld's bddfss flbgs (sff {@link jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs}). This
     * fifld blso indidbtfs if thf fifld is synthftid bnd/or dfprfdbtfd.
     */
    publid int bddfss;

    /**
     * Thf fifld's nbmf.
     */
    publid String nbmf;

    /**
     * Thf fifld's dfsdriptor (sff {@link jdk.intfrnbl.org.objfdtwfb.bsm.Typf}).
     */
    publid String dfsd;

    /**
     * Thf fifld's signbturf. Mby bf <tt>null</tt>.
     */
    publid String signbturf;

    /**
     * Thf fifld's initibl vbluf. This fifld, whidh mby bf <tt>null</tt> if thf
     * fifld dofs not hbvf bn initibl vbluf, must bf bn {@link Intfgfr}, b
     * {@link Flobt}, b {@link Long}, b {@link Doublf} or b {@link String}.
     */
    publid Objfdt vbluf;

    /**
     * Thf runtimf visiblf bnnotbtions of this fifld. This list is b list of
     * {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl visiblf
     */
    publid List<AnnotbtionNodf> visiblfAnnotbtions;

    /**
     * Thf runtimf invisiblf bnnotbtions of this fifld. This list is b list of
     * {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl invisiblf
     */
    publid List<AnnotbtionNodf> invisiblfAnnotbtions;

    /**
     * Thf runtimf visiblf typf bnnotbtions of this fifld. This list is b list
     * of {@link TypfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.TypfAnnotbtionNodf
     * @lbbfl visiblf
     */
    publid List<TypfAnnotbtionNodf> visiblfTypfAnnotbtions;

    /**
     * Thf runtimf invisiblf typf bnnotbtions of this fifld. This list is b list
     * of {@link TypfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.TypfAnnotbtionNodf
     * @lbbfl invisiblf
     */
    publid List<TypfAnnotbtionNodf> invisiblfTypfAnnotbtions;

    /**
     * Thf non stbndbrd bttributfs of this fifld. This list is b list of
     * {@link Attributf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.Attributf
     */
    publid List<Attributf> bttrs;

    /**
     * Construdts b nfw {@link FifldNodf}. <i>Subdlbssfs must not usf this
     * donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #FifldNodf(int, int, String, String, String, Objfdt)} vfrsion.
     *
     * @pbrbm bddfss
     *            thf fifld's bddfss flbgs (sff
     *            {@link jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs}). This pbrbmftfr blso
     *            indidbtfs if thf fifld is synthftid bnd/or dfprfdbtfd.
     * @pbrbm nbmf
     *            thf fifld's nbmf.
     * @pbrbm dfsd
     *            thf fifld's dfsdriptor (sff {@link jdk.intfrnbl.org.objfdtwfb.bsm.Typf
     *            Typf}).
     * @pbrbm signbturf
     *            thf fifld's signbturf.
     * @pbrbm vbluf
     *            thf fifld's initibl vbluf. This pbrbmftfr, whidh mby bf
     *            <tt>null</tt> if thf fifld dofs not hbvf bn initibl vbluf,
     *            must bf bn {@link Intfgfr}, b {@link Flobt}, b {@link Long}, b
     *            {@link Doublf} or b {@link String}.
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid FifldNodf(finbl int bddfss, finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Objfdt vbluf) {
        this(Opdodfs.ASM5, bddfss, nbmf, dfsd, signbturf, vbluf);
        if (gftClbss() != FifldNodf.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Construdts b nfw {@link FifldNodf}. <i>Subdlbssfs must not usf this
     * donstrudtor</i>.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm bddfss
     *            thf fifld's bddfss flbgs (sff
     *            {@link jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs}). This pbrbmftfr blso
     *            indidbtfs if thf fifld is synthftid bnd/or dfprfdbtfd.
     * @pbrbm nbmf
     *            thf fifld's nbmf.
     * @pbrbm dfsd
     *            thf fifld's dfsdriptor (sff {@link jdk.intfrnbl.org.objfdtwfb.bsm.Typf
     *            Typf}).
     * @pbrbm signbturf
     *            thf fifld's signbturf.
     * @pbrbm vbluf
     *            thf fifld's initibl vbluf. This pbrbmftfr, whidh mby bf
     *            <tt>null</tt> if thf fifld dofs not hbvf bn initibl vbluf,
     *            must bf bn {@link Intfgfr}, b {@link Flobt}, b {@link Long}, b
     *            {@link Doublf} or b {@link String}.
     */
    publid FifldNodf(finbl int bpi, finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl Objfdt vbluf) {
        supfr(bpi);
        this.bddfss = bddfss;
        this.nbmf = nbmf;
        this.dfsd = dfsd;
        this.signbturf = signbturf;
        this.vbluf = vbluf;
    }

    // ------------------------------------------------------------------------
    // Implfmfntbtion of thf FifldVisitor bbstrbdt dlbss
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid AnnotbtionVisitor visitAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        AnnotbtionNodf bn = nfw AnnotbtionNodf(dfsd);
        if (visiblf) {
            if (visiblfAnnotbtions == null) {
                visiblfAnnotbtions = nfw ArrbyList<AnnotbtionNodf>(1);
            }
            visiblfAnnotbtions.bdd(bn);
        } flsf {
            if (invisiblfAnnotbtions == null) {
                invisiblfAnnotbtions = nfw ArrbyList<AnnotbtionNodf>(1);
            }
            invisiblfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTypfAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        TypfAnnotbtionNodf bn = nfw TypfAnnotbtionNodf(typfRff, typfPbth, dfsd);
        if (visiblf) {
            if (visiblfTypfAnnotbtions == null) {
                visiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(1);
            }
            visiblfTypfAnnotbtions.bdd(bn);
        } flsf {
            if (invisiblfTypfAnnotbtions == null) {
                invisiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(1);
            }
            invisiblfTypfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid void visitAttributf(finbl Attributf bttr) {
        if (bttrs == null) {
            bttrs = nfw ArrbyList<Attributf>(1);
        }
        bttrs.bdd(bttr);
    }

    @Ovfrridf
    publid void visitEnd() {
    }

    // ------------------------------------------------------------------------
    // Addfpt mfthods
    // ------------------------------------------------------------------------

    /**
     * Chfdks thbt this fifld nodf is dompbtiblf with thf givfn ASM API vfrsion.
     * This mfthods dhfdks thbt this nodf, bnd bll its nodfs rfdursivfly, do not
     * dontbin flfmfnts thbt wfrf introdudfd in morf rfdfnt vfrsions of thf ASM
     * API thbn thf givfn vfrsion.
     *
     * @pbrbm bpi
     *            bn ASM API vfrsion. Must bf onf of {@link Opdodfs#ASM4} or
     *            {@link Opdodfs#ASM5}.
     */
    publid void dhfdk(finbl int bpi) {
        if (bpi == Opdodfs.ASM4) {
            if (visiblfTypfAnnotbtions != null
                    && visiblfTypfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
            if (invisiblfTypfAnnotbtions != null
                    && invisiblfTypfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
        }
    }

    /**
     * Mbkfs thf givfn dlbss visitor visit this fifld.
     *
     * @pbrbm dv
     *            b dlbss visitor.
     */
    publid void bddfpt(finbl ClbssVisitor dv) {
        FifldVisitor fv = dv.visitFifld(bddfss, nbmf, dfsd, signbturf, vbluf);
        if (fv == null) {
            rfturn;
        }
        int i, n;
        n = visiblfAnnotbtions == null ? 0 : visiblfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            AnnotbtionNodf bn = visiblfAnnotbtions.gft(i);
            bn.bddfpt(fv.visitAnnotbtion(bn.dfsd, truf));
        }
        n = invisiblfAnnotbtions == null ? 0 : invisiblfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            AnnotbtionNodf bn = invisiblfAnnotbtions.gft(i);
            bn.bddfpt(fv.visitAnnotbtion(bn.dfsd, fblsf));
        }
        n = visiblfTypfAnnotbtions == null ? 0 : visiblfTypfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            TypfAnnotbtionNodf bn = visiblfTypfAnnotbtions.gft(i);
            bn.bddfpt(fv.visitTypfAnnotbtion(bn.typfRff, bn.typfPbth, bn.dfsd,
                    truf));
        }
        n = invisiblfTypfAnnotbtions == null ? 0 : invisiblfTypfAnnotbtions
                .sizf();
        for (i = 0; i < n; ++i) {
            TypfAnnotbtionNodf bn = invisiblfTypfAnnotbtions.gft(i);
            bn.bddfpt(fv.visitTypfAnnotbtion(bn.typfRff, bn.typfPbth, bn.dfsd,
                    fblsf));
        }
        n = bttrs == null ? 0 : bttrs.sizf();
        for (i = 0; i < n; ++i) {
            fv.visitAttributf(bttrs.gft(i));
        }
        fv.visitEnd();
    }
}
