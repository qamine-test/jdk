/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.util;

import jdk.intfrnbl.org.objfdtwfb.bsm.AnnotbtionVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Hbndlf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;

/**
 * A {@link MfthodVisitor} thbt prints thf mfthods it visits with b
 * {@link Printfr}.
 *
 * @buthor Erid Brunfton
 */
publid finbl dlbss TrbdfMfthodVisitor fxtfnds MfthodVisitor {

    publid finbl Printfr p;

    publid TrbdfMfthodVisitor(finbl Printfr p) {
        this(null, p);
    }

    publid TrbdfMfthodVisitor(finbl MfthodVisitor mv, finbl Printfr p) {
        supfr(Opdodfs.ASM5, mv);
        this.p = p;
    }

    @Ovfrridf
    publid void visitPbrbmftfr(String nbmf, int bddfss) {
        p.visitPbrbmftfr(nbmf, bddfss);
        supfr.visitPbrbmftfr(nbmf, bddfss);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        Printfr p = this.p.visitMfthodAnnotbtion(dfsd, visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv.visitAnnotbtion(dfsd,
                visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTypfAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        Printfr p = this.p.visitMfthodTypfAnnotbtion(typfRff, typfPbth, dfsd,
                visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv.visitTypfAnnotbtion(
                typfRff, typfPbth, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitAttributf(finbl Attributf bttr) {
        p.visitMfthodAttributf(bttr);
        supfr.visitAttributf(bttr);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitAnnotbtionDffbult() {
        Printfr p = this.p.visitAnnotbtionDffbult();
        AnnotbtionVisitor bv = mv == null ? null : mv.visitAnnotbtionDffbult();
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitPbrbmftfrAnnotbtion(finbl int pbrbmftfr,
            finbl String dfsd, finbl boolfbn visiblf) {
        Printfr p = this.p.visitPbrbmftfrAnnotbtion(pbrbmftfr, dfsd, visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv.visitPbrbmftfrAnnotbtion(
                pbrbmftfr, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitCodf() {
        p.visitCodf();
        supfr.visitCodf();
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        p.visitFrbmf(typf, nLodbl, lodbl, nStbdk, stbdk);
        supfr.visitFrbmf(typf, nLodbl, lodbl, nStbdk, stbdk);
    }

    @Ovfrridf
    publid void visitInsn(finbl int opdodf) {
        p.visitInsn(opdodf);
        supfr.visitInsn(opdodf);
    }

    @Ovfrridf
    publid void visitIntInsn(finbl int opdodf, finbl int opfrbnd) {
        p.visitIntInsn(opdodf, opfrbnd);
        supfr.visitIntInsn(opdodf, opfrbnd);
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        p.visitVbrInsn(opdodf, vbr);
        supfr.visitVbrInsn(opdodf, vbr);
    }

    @Ovfrridf
    publid void visitTypfInsn(finbl int opdodf, finbl String typf) {
        p.visitTypfInsn(opdodf, typf);
        supfr.visitTypfInsn(opdodf, typf);
    }

    @Ovfrridf
    publid void visitFifldInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        p.visitFifldInsn(opdodf, ownfr, nbmf, dfsd);
        supfr.visitFifldInsn(opdodf, ownfr, nbmf, dfsd);
    }

    @Dfprfdbtfd
    @Ovfrridf
    publid void visitMfthodInsn(int opdodf, String ownfr, String nbmf,
            String dfsd) {
        if (bpi >= Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd);
            rfturn;
        }
        p.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd);
        if (mv != null) {
            mv.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd);
        }
    }

    @Ovfrridf
    publid void visitMfthodInsn(int opdodf, String ownfr, String nbmf,
            String dfsd, boolfbn itf) {
        if (bpi < Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
            rfturn;
        }
        p.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
        if (mv != null) {
            mv.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
        }
    }

    @Ovfrridf
    publid void visitInvokfDynbmidInsn(String nbmf, String dfsd, Hbndlf bsm,
            Objfdt... bsmArgs) {
        p.visitInvokfDynbmidInsn(nbmf, dfsd, bsm, bsmArgs);
        supfr.visitInvokfDynbmidInsn(nbmf, dfsd, bsm, bsmArgs);
    }

    @Ovfrridf
    publid void visitJumpInsn(finbl int opdodf, finbl Lbbfl lbbfl) {
        p.visitJumpInsn(opdodf, lbbfl);
        supfr.visitJumpInsn(opdodf, lbbfl);
    }

    @Ovfrridf
    publid void visitLbbfl(finbl Lbbfl lbbfl) {
        p.visitLbbfl(lbbfl);
        supfr.visitLbbfl(lbbfl);
    }

    @Ovfrridf
    publid void visitLddInsn(finbl Objfdt dst) {
        p.visitLddInsn(dst);
        supfr.visitLddInsn(dst);
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        p.visitIindInsn(vbr, indrfmfnt);
        supfr.visitIindInsn(vbr, indrfmfnt);
    }

    @Ovfrridf
    publid void visitTbblfSwitdhInsn(finbl int min, finbl int mbx,
            finbl Lbbfl dflt, finbl Lbbfl... lbbfls) {
        p.visitTbblfSwitdhInsn(min, mbx, dflt, lbbfls);
        supfr.visitTbblfSwitdhInsn(min, mbx, dflt, lbbfls);
    }

    @Ovfrridf
    publid void visitLookupSwitdhInsn(finbl Lbbfl dflt, finbl int[] kfys,
            finbl Lbbfl[] lbbfls) {
        p.visitLookupSwitdhInsn(dflt, kfys, lbbfls);
        supfr.visitLookupSwitdhInsn(dflt, kfys, lbbfls);
    }

    @Ovfrridf
    publid void visitMultiANfwArrbyInsn(finbl String dfsd, finbl int dims) {
        p.visitMultiANfwArrbyInsn(dfsd, dims);
        supfr.visitMultiANfwArrbyInsn(dfsd, dims);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitInsnAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        Printfr p = this.p
                .visitInsnAnnotbtion(typfRff, typfPbth, dfsd, visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv.visitInsnAnnotbtion(
                typfRff, typfPbth, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitTryCbtdhBlodk(finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl Lbbfl hbndlfr, finbl String typf) {
        p.visitTryCbtdhBlodk(stbrt, fnd, hbndlfr, typf);
        supfr.visitTryCbtdhBlodk(stbrt, fnd, hbndlfr, typf);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTryCbtdhAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        Printfr p = this.p.visitTryCbtdhAnnotbtion(typfRff, typfPbth, dfsd,
                visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv.visitTryCbtdhAnnotbtion(
                typfRff, typfPbth, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitLodblVbribblf(finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl int indfx) {
        p.visitLodblVbribblf(nbmf, dfsd, signbturf, stbrt, fnd, indfx);
        supfr.visitLodblVbribblf(nbmf, dfsd, signbturf, stbrt, fnd, indfx);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitLodblVbribblfAnnotbtion(int typfRff,
            TypfPbth typfPbth, Lbbfl[] stbrt, Lbbfl[] fnd, int[] indfx,
            String dfsd, boolfbn visiblf) {
        Printfr p = this.p.visitLodblVbribblfAnnotbtion(typfRff, typfPbth,
                stbrt, fnd, indfx, dfsd, visiblf);
        AnnotbtionVisitor bv = mv == null ? null : mv
                .visitLodblVbribblfAnnotbtion(typfRff, typfPbth, stbrt, fnd,
                        indfx, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitLinfNumbfr(finbl int linf, finbl Lbbfl stbrt) {
        p.visitLinfNumbfr(linf, stbrt);
        supfr.visitLinfNumbfr(linf, stbrt);
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        p.visitMbxs(mbxStbdk, mbxLodbls);
        supfr.visitMbxs(mbxStbdk, mbxLodbls);
    }

    @Ovfrridf
    publid void visitEnd() {
        p.visitMfthodEnd();
        supfr.visitEnd();
    }
}
