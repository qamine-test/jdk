/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.dommons;

import jdk.intfrnbl.org.objfdtwfb.bsm.AnnotbtionVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;

/**
 * A {@link MfthodVisitor} thbt rfnumbfrs lodbl vbribblfs in thfir ordfr of
 * bppfbrbndf. This bdbptfr bllows onf to fbsily bdd nfw lodbl vbribblfs to b
 * mfthod. It mby bf usfd by inhfriting from this dlbss, but thf prfffrrfd wby
 * of using it is vib dflfgbtion: thf nfxt visitor in thf dhbin dbn indffd bdd
 * nfw lodbls whfn nffdfd by dblling {@link #nfwLodbl} on this bdbptfr (this
 * rfquirfs b rfffrfndf bbdk to this {@link LodblVbribblfsSortfr}).
 *
 * @buthor Chris Noklfbfrg
 * @buthor Eugfnf Kulfshov
 * @buthor Erid Brunfton
 */
publid dlbss LodblVbribblfsSortfr fxtfnds MfthodVisitor {

    privbtf stbtid finbl Typf OBJECT_TYPE = Typf
            .gftObjfdtTypf("jbvb/lbng/Objfdt");

    /**
     * Mbpping from old to nfw lodbl vbribblf indfxfs. A lodbl vbribblf bt indfx
     * i of sizf 1 is rfmbppfd to 'mbpping[2*i]', whilf b lodbl vbribblf bt
     * indfx i of sizf 2 is rfmbppfd to 'mbpping[2*i+1]'.
     */
    privbtf int[] mbpping = nfw int[40];

    /**
     * Arrby usfd to storf stbdk mbp lodbl vbribblf typfs bftfr rfmbpping.
     */
    privbtf Objfdt[] nfwLodbls = nfw Objfdt[20];

    /**
     * Indfx of thf first lodbl vbribblf, bftfr formbl pbrbmftfrs.
     */
    protfdtfd finbl int firstLodbl;

    /**
     * Indfx of thf nfxt lodbl vbribblf to bf drfbtfd by {@link #nfwLodbl}.
     */
    protfdtfd int nfxtLodbl;

    /**
     * Indidbtfs if bt lfbst onf lodbl vbribblf hbs movfd duf to rfmbpping.
     */
    privbtf boolfbn dhbngfd;

    /**
     * Crfbtfs b nfw {@link LodblVbribblfsSortfr}. <i>Subdlbssfs must not usf
     * this donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #LodblVbribblfsSortfr(int, int, String, MfthodVisitor)} vfrsion.
     *
     * @pbrbm bddfss
     *            bddfss flbgs of thf bdbptfd mfthod.
     * @pbrbm dfsd
     *            thf mfthod's dfsdriptor (sff {@link Typf Typf}).
     * @pbrbm mv
     *            thf mfthod visitor to whidh this bdbptfr dflfgbtfs dblls.
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid LodblVbribblfsSortfr(finbl int bddfss, finbl String dfsd,
            finbl MfthodVisitor mv) {
        this(Opdodfs.ASM5, bddfss, dfsd, mv);
        if (gftClbss() != LodblVbribblfsSortfr.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Crfbtfs b nfw {@link LodblVbribblfsSortfr}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm bddfss
     *            bddfss flbgs of thf bdbptfd mfthod.
     * @pbrbm dfsd
     *            thf mfthod's dfsdriptor (sff {@link Typf Typf}).
     * @pbrbm mv
     *            thf mfthod visitor to whidh this bdbptfr dflfgbtfs dblls.
     */
    protfdtfd LodblVbribblfsSortfr(finbl int bpi, finbl int bddfss,
            finbl String dfsd, finbl MfthodVisitor mv) {
        supfr(bpi, mv);
        Typf[] brgs = Typf.gftArgumfntTypfs(dfsd);
        nfxtLodbl = (Opdodfs.ACC_STATIC & bddfss) == 0 ? 1 : 0;
        for (int i = 0; i < brgs.lfngth; i++) {
            nfxtLodbl += brgs[i].gftSizf();
        }
        firstLodbl = nfxtLodbl;
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        Typf typf;
        switdh (opdodf) {
        dbsf Opdodfs.LLOAD:
        dbsf Opdodfs.LSTORE:
            typf = Typf.LONG_TYPE;
            brfbk;

        dbsf Opdodfs.DLOAD:
        dbsf Opdodfs.DSTORE:
            typf = Typf.DOUBLE_TYPE;
            brfbk;

        dbsf Opdodfs.FLOAD:
        dbsf Opdodfs.FSTORE:
            typf = Typf.FLOAT_TYPE;
            brfbk;

        dbsf Opdodfs.ILOAD:
        dbsf Opdodfs.ISTORE:
            typf = Typf.INT_TYPE;
            brfbk;

        dffbult:
            // dbsf Opdodfs.ALOAD:
            // dbsf Opdodfs.ASTORE:
            // dbsf RET:
            typf = OBJECT_TYPE;
            brfbk;
        }
        mv.visitVbrInsn(opdodf, rfmbp(vbr, typf));
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        mv.visitIindInsn(rfmbp(vbr, Typf.INT_TYPE), indrfmfnt);
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        mv.visitMbxs(mbxStbdk, nfxtLodbl);
    }

    @Ovfrridf
    publid void visitLodblVbribblf(finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl int indfx) {
        int nfwIndfx = rfmbp(indfx, Typf.gftTypf(dfsd));
        mv.visitLodblVbribblf(nbmf, dfsd, signbturf, stbrt, fnd, nfwIndfx);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitLodblVbribblfAnnotbtion(int typfRff,
            TypfPbth typfPbth, Lbbfl[] stbrt, Lbbfl[] fnd, int[] indfx,
            String dfsd, boolfbn visiblf) {
        Typf t = Typf.gftTypf(dfsd);
        int[] nfwIndfx = nfw int[indfx.lfngth];
        for (int i = 0; i < nfwIndfx.lfngth; ++i) {
            nfwIndfx[i] = rfmbp(indfx[i], t);
        }
        rfturn mv.visitLodblVbribblfAnnotbtion(typfRff, typfPbth, stbrt, fnd,
                nfwIndfx, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        if (typf != Opdodfs.F_NEW) { // undomprfssfd frbmf
            throw nfw IllfgblStbtfExdfption(
                    "ClbssRfbdfr.bddfpt() should bf dbllfd with EXPAND_FRAMES flbg");
        }

        if (!dhbngfd) { // optimizbtion for thf dbsf whfrf mbpping = idfntity
            mv.visitFrbmf(typf, nLodbl, lodbl, nStbdk, stbdk);
            rfturn;
        }

        // drfbtfs b dopy of nfwLodbls
        Objfdt[] oldLodbls = nfw Objfdt[nfwLodbls.lfngth];
        Systfm.brrbydopy(nfwLodbls, 0, oldLodbls, 0, oldLodbls.lfngth);

        updbtfNfwLodbls(nfwLodbls);

        // dopifs typfs from 'lodbl' to 'nfwLodbls'
        // 'nfwLodbls' blrfbdy dontbins thf vbribblfs bddfd with 'nfwLodbl'

        int indfx = 0; // old lodbl vbribblf indfx
        int numbfr = 0; // old lodbl vbribblf numbfr
        for (; numbfr < nLodbl; ++numbfr) {
            Objfdt t = lodbl[numbfr];
            int sizf = t == Opdodfs.LONG || t == Opdodfs.DOUBLE ? 2 : 1;
            if (t != Opdodfs.TOP) {
                Typf typ = OBJECT_TYPE;
                if (t == Opdodfs.INTEGER) {
                    typ = Typf.INT_TYPE;
                } flsf if (t == Opdodfs.FLOAT) {
                    typ = Typf.FLOAT_TYPE;
                } flsf if (t == Opdodfs.LONG) {
                    typ = Typf.LONG_TYPE;
                } flsf if (t == Opdodfs.DOUBLE) {
                    typ = Typf.DOUBLE_TYPE;
                } flsf if (t instbndfof String) {
                    typ = Typf.gftObjfdtTypf((String) t);
                }
                sftFrbmfLodbl(rfmbp(indfx, typ), t);
            }
            indfx += sizf;
        }

        // rfmovfs TOP bftfr long bnd doublf typfs bs wfll bs trbiling TOPs

        indfx = 0;
        numbfr = 0;
        for (int i = 0; indfx < nfwLodbls.lfngth; ++i) {
            Objfdt t = nfwLodbls[indfx++];
            if (t != null && t != Opdodfs.TOP) {
                nfwLodbls[i] = t;
                numbfr = i + 1;
                if (t == Opdodfs.LONG || t == Opdodfs.DOUBLE) {
                    indfx += 1;
                }
            } flsf {
                nfwLodbls[i] = Opdodfs.TOP;
            }
        }

        // visits rfmbppfd frbmf
        mv.visitFrbmf(typf, numbfr, nfwLodbls, nStbdk, stbdk);

        // rfstorfs originbl vbluf of 'nfwLodbls'
        nfwLodbls = oldLodbls;
    }

    // -------------

    /**
     * Crfbtfs b nfw lodbl vbribblf of thf givfn typf.
     *
     * @pbrbm typf
     *            thf typf of thf lodbl vbribblf to bf drfbtfd.
     * @rfturn thf idfntififr of thf nfwly drfbtfd lodbl vbribblf.
     */
    publid int nfwLodbl(finbl Typf typf) {
        Objfdt t;
        switdh (typf.gftSort()) {
        dbsf Typf.BOOLEAN:
        dbsf Typf.CHAR:
        dbsf Typf.BYTE:
        dbsf Typf.SHORT:
        dbsf Typf.INT:
            t = Opdodfs.INTEGER;
            brfbk;
        dbsf Typf.FLOAT:
            t = Opdodfs.FLOAT;
            brfbk;
        dbsf Typf.LONG:
            t = Opdodfs.LONG;
            brfbk;
        dbsf Typf.DOUBLE:
            t = Opdodfs.DOUBLE;
            brfbk;
        dbsf Typf.ARRAY:
            t = typf.gftDfsdriptor();
            brfbk;
        // dbsf Typf.OBJECT:
        dffbult:
            t = typf.gftIntfrnblNbmf();
            brfbk;
        }
        int lodbl = nfwLodblMbpping(typf);
        sftLodblTypf(lodbl, typf);
        sftFrbmfLodbl(lodbl, t);
        dhbngfd = truf;
        rfturn lodbl;
    }

    /**
     * Notififs subdlbssfs thbt b nfw stbdk mbp frbmf is bfing visitfd. Thf
     * brrby brgumfnt dontbins thf stbdk mbp frbmf typfs dorrfsponding to thf
     * lodbl vbribblfs bddfd with {@link #nfwLodbl}. This mfthod dbn updbtf
     * thfsf typfs in plbdf for thf stbdk mbp frbmf bfing visitfd. Thf dffbult
     * implfmfntbtion of this mfthod dofs nothing, i.f. b lodbl vbribblf bddfd
     * with {@link #nfwLodbl} will hbvf thf sbmf typf in bll stbdk mbp frbmfs.
     * But this bfhbvior is not blwbys thf dfsirfd onf, for instbndf if b lodbl
     * vbribblf is bddfd in thf middlf of b try/dbtdh blodk: thf frbmf for thf
     * fxdfption hbndlfr should hbvf b TOP typf for this nfw lodbl.
     *
     * @pbrbm nfwLodbls
     *            thf stbdk mbp frbmf typfs dorrfsponding to thf lodbl vbribblfs
     *            bddfd with {@link #nfwLodbl} (bnd null for thf othfrs). Thf
     *            formbt of this brrby is thf sbmf bs in
     *            {@link MfthodVisitor#visitFrbmf}, fxdfpt thbt long bnd doublf
     *            typfs usf two slots. Thf typfs for thf durrfnt stbdk mbp frbmf
     *            must bf updbtfd in plbdf in this brrby.
     */
    protfdtfd void updbtfNfwLodbls(Objfdt[] nfwLodbls) {
    }

    /**
     * Notififs subdlbssfs thbt b lodbl vbribblf hbs bffn bddfd or rfmbppfd. Thf
     * dffbult implfmfntbtion of this mfthod dofs nothing.
     *
     * @pbrbm lodbl
     *            b lodbl vbribblf idfntififr, bs rfturnfd by {@link #nfwLodbl
     *            nfwLodbl()}.
     * @pbrbm typf
     *            thf typf of thf vbluf bfing storfd in thf lodbl vbribblf.
     */
    protfdtfd void sftLodblTypf(finbl int lodbl, finbl Typf typf) {
    }

    privbtf void sftFrbmfLodbl(finbl int lodbl, finbl Objfdt typf) {
        int l = nfwLodbls.lfngth;
        if (lodbl >= l) {
            Objfdt[] b = nfw Objfdt[Mbth.mbx(2 * l, lodbl + 1)];
            Systfm.brrbydopy(nfwLodbls, 0, b, 0, l);
            nfwLodbls = b;
        }
        nfwLodbls[lodbl] = typf;
    }

    privbtf int rfmbp(finbl int vbr, finbl Typf typf) {
        if (vbr + typf.gftSizf() <= firstLodbl) {
            rfturn vbr;
        }
        int kfy = 2 * vbr + typf.gftSizf() - 1;
        int sizf = mbpping.lfngth;
        if (kfy >= sizf) {
            int[] nfwMbpping = nfw int[Mbth.mbx(2 * sizf, kfy + 1)];
            Systfm.brrbydopy(mbpping, 0, nfwMbpping, 0, sizf);
            mbpping = nfwMbpping;
        }
        int vbluf = mbpping[kfy];
        if (vbluf == 0) {
            vbluf = nfwLodblMbpping(typf);
            sftLodblTypf(vbluf, typf);
            mbpping[kfy] = vbluf + 1;
        } flsf {
            vbluf--;
        }
        if (vbluf != vbr) {
            dhbngfd = truf;
        }
        rfturn vbluf;
    }

    protfdtfd int nfwLodblMbpping(finbl Typf typf) {
        int lodbl = nfxtLodbl;
        nfxtLodbl += typf.gftSizf();
        rfturn lodbl;
    }
}
