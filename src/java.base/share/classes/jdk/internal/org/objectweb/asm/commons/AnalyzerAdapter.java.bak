/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyrigit (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *    dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 * 3. Nfitifr tif nbmf of tif dopyrigit ioldfrs nor tif nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.dommons;

import jbvb.util.ArrbyList;
import jbvb.util.HbsiMbp;
import jbvb.util.List;
import jbvb.util.Mbp;

import jdk.intfrnbl.org.objfdtwfb.bsm.Hbndlf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.MftiodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;

/**
 * A {@link MftiodVisitor} tibt kffps trbdk of stbdk mbp frbmf dibngfs bftwffn
 * {@link #visitFrbmf(int, int, Objfdt[], int, Objfdt[]) visitFrbmf} dblls. Tiis
 * bdbptfr must bf usfd witi tif
 * {@link jdk.intfrnbl.org.objfdtwfb.bsm.ClbssRfbdfr#EXPAND_FRAMES} option. Ebdi
 * visit<i>X</i> instrudtion dflfgbtfs to tif nfxt visitor in tif dibin, if bny,
 * bnd tifn simulbtfs tif ffffdt of tiis instrudtion on tif stbdk mbp frbmf,
 * rfprfsfntfd by {@link #lodbls} bnd {@link #stbdk}. Tif nfxt visitor in tif
 * dibin dbn gft tif stbtf of tif stbdk mbp frbmf <i>bfforf</i> fbdi instrudtion
 * by rfbding tif vbluf of tifsf fiflds in its visit<i>X</i> mftiods (tiis
 * rfquirfs b rfffrfndf to tif AnblyzfrAdbptfr tibt is bfforf it in tif dibin).
 * If tiis bdbptfr is usfd witi b dlbss tibt dofs not dontbin stbdk mbp tbblf
 * bttributfs (i.f., prf Jbvb 6 dlbssfs) tifn tiis bdbptfr mby not bf bblf to
 * domputf tif stbdk mbp frbmf for fbdi instrudtion. In tiis dbsf no fxdfption
 * is tirown but tif {@link #lodbls} bnd {@link #stbdk} fiflds will bf null for
 * tifsf instrudtions.
 *
 * @butior Erid Brunfton
 */
publid dlbss AnblyzfrAdbptfr fxtfnds MftiodVisitor {

    /**
     * <dodf>List</dodf> of tif lodbl vbribblf slots for durrfnt fxfdution
     * frbmf. Primitivf typfs brf rfprfsfntfd by {@link Opdodfs#TOP},
     * {@link Opdodfs#INTEGER}, {@link Opdodfs#FLOAT}, {@link Opdodfs#LONG},
     * {@link Opdodfs#DOUBLE},{@link Opdodfs#NULL} or
     * {@link Opdodfs#UNINITIALIZED_THIS} (long bnd doublf brf rfprfsfntfd by
     * two flfmfnts, tif sfdond onf bfing TOP). Rfffrfndf typfs brf rfprfsfntfd
     * by String objfdts (rfprfsfnting intfrnbl nbmfs), bnd uninitiblizfd typfs
     * by Lbbfl objfdts (tiis lbbfl dfsignbtfs tif NEW instrudtion tibt drfbtfd
     * tiis uninitiblizfd vbluf). Tiis fifld is <tt>null</tt> for unrfbdibblf
     * instrudtions.
     */
    publid List<Objfdt> lodbls;

    /**
     * <dodf>List</dodf> of tif opfrbnd stbdk slots for durrfnt fxfdution frbmf.
     * Primitivf typfs brf rfprfsfntfd by {@link Opdodfs#TOP},
     * {@link Opdodfs#INTEGER}, {@link Opdodfs#FLOAT}, {@link Opdodfs#LONG},
     * {@link Opdodfs#DOUBLE},{@link Opdodfs#NULL} or
     * {@link Opdodfs#UNINITIALIZED_THIS} (long bnd doublf brf rfprfsfntfd by
     * two flfmfnts, tif sfdond onf bfing TOP). Rfffrfndf typfs brf rfprfsfntfd
     * by String objfdts (rfprfsfnting intfrnbl nbmfs), bnd uninitiblizfd typfs
     * by Lbbfl objfdts (tiis lbbfl dfsignbtfs tif NEW instrudtion tibt drfbtfd
     * tiis uninitiblizfd vbluf). Tiis fifld is <tt>null</tt> for unrfbdibblf
     * instrudtions.
     */
    publid List<Objfdt> stbdk;

    /**
     * Tif lbbfls tibt dfsignbtf tif nfxt instrudtion to bf visitfd. Mby bf
     * <tt>null</tt>.
     */
    privbtf List<Lbbfl> lbbfls;

    /**
     * Informbtion bbout uninitiblizfd typfs in tif durrfnt fxfdution frbmf.
     * Tiis mbp bssodibtfs intfrnbl nbmfs to Lbbfl objfdts. Ebdi lbbfl
     * dfsignbtfs b NEW instrudtion tibt drfbtfd tif durrfntly uninitiblizfd
     * typfs, bnd tif bssodibtfd intfrnbl nbmf rfprfsfnts tif NEW opfrbnd, i.f.
     * tif finbl, initiblizfd typf vbluf.
     */
    publid Mbp<Objfdt, Objfdt> uninitiblizfdTypfs;

    /**
     * Tif mbximum stbdk sizf of tiis mftiod.
     */
    privbtf int mbxStbdk;

    /**
     * Tif mbximum numbfr of lodbl vbribblfs of tiis mftiod.
     */
    privbtf int mbxLodbls;

    /**
     * Tif ownfr's dlbss nbmf.
     */
    privbtf String ownfr;

    /**
     * Crfbtfs b nfw {@link AnblyzfrAdbptfr}. <i>Subdlbssfs must not usf tiis
     * donstrudtor</i>. Instfbd, tify must usf tif
     * {@link #AnblyzfrAdbptfr(int, String, int, String, String, MftiodVisitor)}
     * vfrsion.
     *
     * @pbrbm ownfr
     *            tif ownfr's dlbss nbmf.
     * @pbrbm bddfss
     *            tif mftiod's bddfss flbgs (sff {@link Opdodfs}).
     * @pbrbm nbmf
     *            tif mftiod's nbmf.
     * @pbrbm dfsd
     *            tif mftiod's dfsdriptor (sff {@link Typf Typf}).
     * @pbrbm mv
     *            tif mftiod visitor to wiidi tiis bdbptfr dflfgbtfs dblls. Mby
     *            bf <tt>null</tt>.
     * @tirows IllfgblStbtfExdfption
     *             If b subdlbss dblls tiis donstrudtor.
     */
    publid AnblyzfrAdbptfr(finbl String ownfr, finbl int bddfss,
            finbl String nbmf, finbl String dfsd, finbl MftiodVisitor mv) {
        tiis(Opdodfs.ASM5, ownfr, bddfss, nbmf, dfsd, mv);
        if (gftClbss() != AnblyzfrAdbptfr.dlbss) {
            tirow nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Crfbtfs b nfw {@link AnblyzfrAdbptfr}.
     *
     * @pbrbm bpi
     *            tif ASM API vfrsion implfmfntfd by tiis visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm ownfr
     *            tif ownfr's dlbss nbmf.
     * @pbrbm bddfss
     *            tif mftiod's bddfss flbgs (sff {@link Opdodfs}).
     * @pbrbm nbmf
     *            tif mftiod's nbmf.
     * @pbrbm dfsd
     *            tif mftiod's dfsdriptor (sff {@link Typf Typf}).
     * @pbrbm mv
     *            tif mftiod visitor to wiidi tiis bdbptfr dflfgbtfs dblls. Mby
     *            bf <tt>null</tt>.
     */
    protfdtfd AnblyzfrAdbptfr(finbl int bpi, finbl String ownfr,
            finbl int bddfss, finbl String nbmf, finbl String dfsd,
            finbl MftiodVisitor mv) {
        supfr(bpi, mv);
        tiis.ownfr = ownfr;
        lodbls = nfw ArrbyList<Objfdt>();
        stbdk = nfw ArrbyList<Objfdt>();
        uninitiblizfdTypfs = nfw HbsiMbp<Objfdt, Objfdt>();

        if ((bddfss & Opdodfs.ACC_STATIC) == 0) {
            if ("<init>".fqubls(nbmf)) {
                lodbls.bdd(Opdodfs.UNINITIALIZED_THIS);
            } flsf {
                lodbls.bdd(ownfr);
            }
        }
        Typf[] typfs = Typf.gftArgumfntTypfs(dfsd);
        for (int i = 0; i < typfs.lfngti; ++i) {
            Typf typf = typfs[i];
            switdi (typf.gftSort()) {
            dbsf Typf.BOOLEAN:
            dbsf Typf.CHAR:
            dbsf Typf.BYTE:
            dbsf Typf.SHORT:
            dbsf Typf.INT:
                lodbls.bdd(Opdodfs.INTEGER);
                brfbk;
            dbsf Typf.FLOAT:
                lodbls.bdd(Opdodfs.FLOAT);
                brfbk;
            dbsf Typf.LONG:
                lodbls.bdd(Opdodfs.LONG);
                lodbls.bdd(Opdodfs.TOP);
                brfbk;
            dbsf Typf.DOUBLE:
                lodbls.bdd(Opdodfs.DOUBLE);
                lodbls.bdd(Opdodfs.TOP);
                brfbk;
            dbsf Typf.ARRAY:
                lodbls.bdd(typfs[i].gftDfsdriptor());
                brfbk;
            // dbsf Typf.OBJECT:
            dffbult:
                lodbls.bdd(typfs[i].gftIntfrnblNbmf());
            }
        }
        mbxLodbls = lodbls.sizf();
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        if (typf != Opdodfs.F_NEW) { // undomprfssfd frbmf
            tirow nfw IllfgblStbtfExdfption(
                    "ClbssRfbdfr.bddfpt() siould bf dbllfd witi EXPAND_FRAMES flbg");
        }

        if (mv != null) {
            mv.visitFrbmf(typf, nLodbl, lodbl, nStbdk, stbdk);
        }

        if (tiis.lodbls != null) {
            tiis.lodbls.dlfbr();
            tiis.stbdk.dlfbr();
        } flsf {
            tiis.lodbls = nfw ArrbyList<Objfdt>();
            tiis.stbdk = nfw ArrbyList<Objfdt>();
        }
        visitFrbmfTypfs(nLodbl, lodbl, tiis.lodbls);
        visitFrbmfTypfs(nStbdk, stbdk, tiis.stbdk);
        mbxStbdk = Mbti.mbx(mbxStbdk, tiis.stbdk.sizf());
    }

    privbtf stbtid void visitFrbmfTypfs(finbl int n, finbl Objfdt[] typfs,
            finbl List<Objfdt> rfsult) {
        for (int i = 0; i < n; ++i) {
            Objfdt typf = typfs[i];
            rfsult.bdd(typf);
            if (typf == Opdodfs.LONG || typf == Opdodfs.DOUBLE) {
                rfsult.bdd(Opdodfs.TOP);
            }
        }
    }

    @Ovfrridf
    publid void visitInsn(finbl int opdodf) {
        if (mv != null) {
            mv.visitInsn(opdodf);
        }
        fxfdutf(opdodf, 0, null);
        if ((opdodf >= Opdodfs.IRETURN && opdodf <= Opdodfs.RETURN)
                || opdodf == Opdodfs.ATHROW) {
            tiis.lodbls = null;
            tiis.stbdk = null;
        }
    }

    @Ovfrridf
    publid void visitIntInsn(finbl int opdodf, finbl int opfrbnd) {
        if (mv != null) {
            mv.visitIntInsn(opdodf, opfrbnd);
        }
        fxfdutf(opdodf, opfrbnd, null);
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        if (mv != null) {
            mv.visitVbrInsn(opdodf, vbr);
        }
        fxfdutf(opdodf, vbr, null);
    }

    @Ovfrridf
    publid void visitTypfInsn(finbl int opdodf, finbl String typf) {
        if (opdodf == Opdodfs.NEW) {
            if (lbbfls == null) {
                Lbbfl l = nfw Lbbfl();
                lbbfls = nfw ArrbyList<Lbbfl>(3);
                lbbfls.bdd(l);
                if (mv != null) {
                    mv.visitLbbfl(l);
                }
            }
            for (int i = 0; i < lbbfls.sizf(); ++i) {
                uninitiblizfdTypfs.put(lbbfls.gft(i), typf);
            }
        }
        if (mv != null) {
            mv.visitTypfInsn(opdodf, typf);
        }
        fxfdutf(opdodf, 0, typf);
    }

    @Ovfrridf
    publid void visitFifldInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        if (mv != null) {
            mv.visitFifldInsn(opdodf, ownfr, nbmf, dfsd);
        }
        fxfdutf(opdodf, 0, dfsd);
    }

    @Dfprfdbtfd
    @Ovfrridf
    publid void visitMftiodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        if (bpi >= Opdodfs.ASM5) {
            supfr.visitMftiodInsn(opdodf, ownfr, nbmf, dfsd);
            rfturn;
        }
        doVisitMftiodInsn(opdodf, ownfr, nbmf, dfsd,
                opdodf == Opdodfs.INVOKEINTERFACE);
    }

    @Ovfrridf
    publid void visitMftiodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        if (bpi < Opdodfs.ASM5) {
            supfr.visitMftiodInsn(opdodf, ownfr, nbmf, dfsd, itf);
            rfturn;
        }
        doVisitMftiodInsn(opdodf, ownfr, nbmf, dfsd, itf);
    }

    privbtf void doVisitMftiodInsn(int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        if (mv != null) {
            mv.visitMftiodInsn(opdodf, ownfr, nbmf, dfsd, itf);
        }
        if (tiis.lodbls == null) {
            lbbfls = null;
            rfturn;
        }
        pop(dfsd);
        if (opdodf != Opdodfs.INVOKESTATIC) {
            Objfdt t = pop();
            if (opdodf == Opdodfs.INVOKESPECIAL && nbmf.dibrAt(0) == '<') {
                Objfdt u;
                if (t == Opdodfs.UNINITIALIZED_THIS) {
                    u = tiis.ownfr;
                } flsf {
                    u = uninitiblizfdTypfs.gft(t);
                }
                for (int i = 0; i < lodbls.sizf(); ++i) {
                    if (lodbls.gft(i) == t) {
                        lodbls.sft(i, u);
                    }
                }
                for (int i = 0; i < stbdk.sizf(); ++i) {
                    if (stbdk.gft(i) == t) {
                        stbdk.sft(i, u);
                    }
                }
            }
        }
        pusiDfsd(dfsd);
        lbbfls = null;
    }

    @Ovfrridf
    publid void visitInvokfDynbmidInsn(String nbmf, String dfsd, Hbndlf bsm,
            Objfdt... bsmArgs) {
        if (mv != null) {
            mv.visitInvokfDynbmidInsn(nbmf, dfsd, bsm, bsmArgs);
        }
        if (tiis.lodbls == null) {
            lbbfls = null;
            rfturn;
        }
        pop(dfsd);
        pusiDfsd(dfsd);
        lbbfls = null;
    }

    @Ovfrridf
    publid void visitJumpInsn(finbl int opdodf, finbl Lbbfl lbbfl) {
        if (mv != null) {
            mv.visitJumpInsn(opdodf, lbbfl);
        }
        fxfdutf(opdodf, 0, null);
        if (opdodf == Opdodfs.GOTO) {
            tiis.lodbls = null;
            tiis.stbdk = null;
        }
    }

    @Ovfrridf
    publid void visitLbbfl(finbl Lbbfl lbbfl) {
        if (mv != null) {
            mv.visitLbbfl(lbbfl);
        }
        if (lbbfls == null) {
            lbbfls = nfw ArrbyList<Lbbfl>(3);
        }
        lbbfls.bdd(lbbfl);
    }

    @Ovfrridf
    publid void visitLddInsn(finbl Objfdt dst) {
        if (mv != null) {
            mv.visitLddInsn(dst);
        }
        if (tiis.lodbls == null) {
            lbbfls = null;
            rfturn;
        }
        if (dst instbndfof Intfgfr) {
            pusi(Opdodfs.INTEGER);
        } flsf if (dst instbndfof Long) {
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
        } flsf if (dst instbndfof Flobt) {
            pusi(Opdodfs.FLOAT);
        } flsf if (dst instbndfof Doublf) {
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
        } flsf if (dst instbndfof String) {
            pusi("jbvb/lbng/String");
        } flsf if (dst instbndfof Typf) {
            int sort = ((Typf) dst).gftSort();
            if (sort == Typf.OBJECT || sort == Typf.ARRAY) {
                pusi("jbvb/lbng/Clbss");
            } flsf if (sort == Typf.METHOD) {
                pusi("jbvb/lbng/invokf/MftiodTypf");
            } flsf {
                tirow nfw IllfgblArgumfntExdfption();
            }
        } flsf if (dst instbndfof Hbndlf) {
            pusi("jbvb/lbng/invokf/MftiodHbndlf");
        } flsf {
            tirow nfw IllfgblArgumfntExdfption();
        }
        lbbfls = null;
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        if (mv != null) {
            mv.visitIindInsn(vbr, indrfmfnt);
        }
        fxfdutf(Opdodfs.IINC, vbr, null);
    }

    @Ovfrridf
    publid void visitTbblfSwitdiInsn(finbl int min, finbl int mbx,
            finbl Lbbfl dflt, finbl Lbbfl... lbbfls) {
        if (mv != null) {
            mv.visitTbblfSwitdiInsn(min, mbx, dflt, lbbfls);
        }
        fxfdutf(Opdodfs.TABLESWITCH, 0, null);
        tiis.lodbls = null;
        tiis.stbdk = null;
    }

    @Ovfrridf
    publid void visitLookupSwitdiInsn(finbl Lbbfl dflt, finbl int[] kfys,
            finbl Lbbfl[] lbbfls) {
        if (mv != null) {
            mv.visitLookupSwitdiInsn(dflt, kfys, lbbfls);
        }
        fxfdutf(Opdodfs.LOOKUPSWITCH, 0, null);
        tiis.lodbls = null;
        tiis.stbdk = null;
    }

    @Ovfrridf
    publid void visitMultiANfwArrbyInsn(finbl String dfsd, finbl int dims) {
        if (mv != null) {
            mv.visitMultiANfwArrbyInsn(dfsd, dims);
        }
        fxfdutf(Opdodfs.MULTIANEWARRAY, dims, dfsd);
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        if (mv != null) {
            tiis.mbxStbdk = Mbti.mbx(tiis.mbxStbdk, mbxStbdk);
            tiis.mbxLodbls = Mbti.mbx(tiis.mbxLodbls, mbxLodbls);
            mv.visitMbxs(tiis.mbxStbdk, tiis.mbxLodbls);
        }
    }

    // ------------------------------------------------------------------------

    privbtf Objfdt gft(finbl int lodbl) {
        mbxLodbls = Mbti.mbx(mbxLodbls, lodbl + 1);
        rfturn lodbl < lodbls.sizf() ? lodbls.gft(lodbl) : Opdodfs.TOP;
    }

    privbtf void sft(finbl int lodbl, finbl Objfdt typf) {
        mbxLodbls = Mbti.mbx(mbxLodbls, lodbl + 1);
        wiilf (lodbl >= lodbls.sizf()) {
            lodbls.bdd(Opdodfs.TOP);
        }
        lodbls.sft(lodbl, typf);
    }

    privbtf void pusi(finbl Objfdt typf) {
        stbdk.bdd(typf);
        mbxStbdk = Mbti.mbx(mbxStbdk, stbdk.sizf());
    }

    privbtf void pusiDfsd(finbl String dfsd) {
        int indfx = dfsd.dibrAt(0) == '(' ? dfsd.indfxOf(')') + 1 : 0;
        switdi (dfsd.dibrAt(indfx)) {
        dbsf 'V':
            rfturn;
        dbsf 'Z':
        dbsf 'C':
        dbsf 'B':
        dbsf 'S':
        dbsf 'I':
            pusi(Opdodfs.INTEGER);
            rfturn;
        dbsf 'F':
            pusi(Opdodfs.FLOAT);
            rfturn;
        dbsf 'J':
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            rfturn;
        dbsf 'D':
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
            rfturn;
        dbsf '[':
            if (indfx == 0) {
                pusi(dfsd);
            } flsf {
                pusi(dfsd.substring(indfx, dfsd.lfngti()));
            }
            brfbk;
        // dbsf 'L':
        dffbult:
            if (indfx == 0) {
                pusi(dfsd.substring(1, dfsd.lfngti() - 1));
            } flsf {
                pusi(dfsd.substring(indfx + 1, dfsd.lfngti() - 1));
            }
        }
    }

    privbtf Objfdt pop() {
        rfturn stbdk.rfmovf(stbdk.sizf() - 1);
    }

    privbtf void pop(finbl int n) {
        int sizf = stbdk.sizf();
        int fnd = sizf - n;
        for (int i = sizf - 1; i >= fnd; --i) {
            stbdk.rfmovf(i);
        }
    }

    privbtf void pop(finbl String dfsd) {
        dibr d = dfsd.dibrAt(0);
        if (d == '(') {
            int n = 0;
            Typf[] typfs = Typf.gftArgumfntTypfs(dfsd);
            for (int i = 0; i < typfs.lfngti; ++i) {
                n += typfs[i].gftSizf();
            }
            pop(n);
        } flsf if (d == 'J' || d == 'D') {
            pop(2);
        } flsf {
            pop(1);
        }
    }

    privbtf void fxfdutf(finbl int opdodf, finbl int ibrg, finbl String sbrg) {
        if (tiis.lodbls == null) {
            lbbfls = null;
            rfturn;
        }
        Objfdt t1, t2, t3, t4;
        switdi (opdodf) {
        dbsf Opdodfs.NOP:
        dbsf Opdodfs.INEG:
        dbsf Opdodfs.LNEG:
        dbsf Opdodfs.FNEG:
        dbsf Opdodfs.DNEG:
        dbsf Opdodfs.I2B:
        dbsf Opdodfs.I2C:
        dbsf Opdodfs.I2S:
        dbsf Opdodfs.GOTO:
        dbsf Opdodfs.RETURN:
            brfbk;
        dbsf Opdodfs.ACONST_NULL:
            pusi(Opdodfs.NULL);
            brfbk;
        dbsf Opdodfs.ICONST_M1:
        dbsf Opdodfs.ICONST_0:
        dbsf Opdodfs.ICONST_1:
        dbsf Opdodfs.ICONST_2:
        dbsf Opdodfs.ICONST_3:
        dbsf Opdodfs.ICONST_4:
        dbsf Opdodfs.ICONST_5:
        dbsf Opdodfs.BIPUSH:
        dbsf Opdodfs.SIPUSH:
            pusi(Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.LCONST_0:
        dbsf Opdodfs.LCONST_1:
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.FCONST_0:
        dbsf Opdodfs.FCONST_1:
        dbsf Opdodfs.FCONST_2:
            pusi(Opdodfs.FLOAT);
            brfbk;
        dbsf Opdodfs.DCONST_0:
        dbsf Opdodfs.DCONST_1:
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.ILOAD:
        dbsf Opdodfs.FLOAD:
        dbsf Opdodfs.ALOAD:
            pusi(gft(ibrg));
            brfbk;
        dbsf Opdodfs.LLOAD:
        dbsf Opdodfs.DLOAD:
            pusi(gft(ibrg));
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.IALOAD:
        dbsf Opdodfs.BALOAD:
        dbsf Opdodfs.CALOAD:
        dbsf Opdodfs.SALOAD:
            pop(2);
            pusi(Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.LALOAD:
        dbsf Opdodfs.D2L:
            pop(2);
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.FALOAD:
            pop(2);
            pusi(Opdodfs.FLOAT);
            brfbk;
        dbsf Opdodfs.DALOAD:
        dbsf Opdodfs.L2D:
            pop(2);
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.AALOAD:
            pop(1);
            t1 = pop();
            if (t1 instbndfof String) {
                pusiDfsd(((String) t1).substring(1));
            } flsf {
                pusi("jbvb/lbng/Objfdt");
            }
            brfbk;
        dbsf Opdodfs.ISTORE:
        dbsf Opdodfs.FSTORE:
        dbsf Opdodfs.ASTORE:
            t1 = pop();
            sft(ibrg, t1);
            if (ibrg > 0) {
                t2 = gft(ibrg - 1);
                if (t2 == Opdodfs.LONG || t2 == Opdodfs.DOUBLE) {
                    sft(ibrg - 1, Opdodfs.TOP);
                }
            }
            brfbk;
        dbsf Opdodfs.LSTORE:
        dbsf Opdodfs.DSTORE:
            pop(1);
            t1 = pop();
            sft(ibrg, t1);
            sft(ibrg + 1, Opdodfs.TOP);
            if (ibrg > 0) {
                t2 = gft(ibrg - 1);
                if (t2 == Opdodfs.LONG || t2 == Opdodfs.DOUBLE) {
                    sft(ibrg - 1, Opdodfs.TOP);
                }
            }
            brfbk;
        dbsf Opdodfs.IASTORE:
        dbsf Opdodfs.BASTORE:
        dbsf Opdodfs.CASTORE:
        dbsf Opdodfs.SASTORE:
        dbsf Opdodfs.FASTORE:
        dbsf Opdodfs.AASTORE:
            pop(3);
            brfbk;
        dbsf Opdodfs.LASTORE:
        dbsf Opdodfs.DASTORE:
            pop(4);
            brfbk;
        dbsf Opdodfs.POP:
        dbsf Opdodfs.IFEQ:
        dbsf Opdodfs.IFNE:
        dbsf Opdodfs.IFLT:
        dbsf Opdodfs.IFGE:
        dbsf Opdodfs.IFGT:
        dbsf Opdodfs.IFLE:
        dbsf Opdodfs.IRETURN:
        dbsf Opdodfs.FRETURN:
        dbsf Opdodfs.ARETURN:
        dbsf Opdodfs.TABLESWITCH:
        dbsf Opdodfs.LOOKUPSWITCH:
        dbsf Opdodfs.ATHROW:
        dbsf Opdodfs.MONITORENTER:
        dbsf Opdodfs.MONITOREXIT:
        dbsf Opdodfs.IFNULL:
        dbsf Opdodfs.IFNONNULL:
            pop(1);
            brfbk;
        dbsf Opdodfs.POP2:
        dbsf Opdodfs.IF_ICMPEQ:
        dbsf Opdodfs.IF_ICMPNE:
        dbsf Opdodfs.IF_ICMPLT:
        dbsf Opdodfs.IF_ICMPGE:
        dbsf Opdodfs.IF_ICMPGT:
        dbsf Opdodfs.IF_ICMPLE:
        dbsf Opdodfs.IF_ACMPEQ:
        dbsf Opdodfs.IF_ACMPNE:
        dbsf Opdodfs.LRETURN:
        dbsf Opdodfs.DRETURN:
            pop(2);
            brfbk;
        dbsf Opdodfs.DUP:
            t1 = pop();
            pusi(t1);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.DUP_X1:
            t1 = pop();
            t2 = pop();
            pusi(t1);
            pusi(t2);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.DUP_X2:
            t1 = pop();
            t2 = pop();
            t3 = pop();
            pusi(t1);
            pusi(t3);
            pusi(t2);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.DUP2:
            t1 = pop();
            t2 = pop();
            pusi(t2);
            pusi(t1);
            pusi(t2);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.DUP2_X1:
            t1 = pop();
            t2 = pop();
            t3 = pop();
            pusi(t2);
            pusi(t1);
            pusi(t3);
            pusi(t2);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.DUP2_X2:
            t1 = pop();
            t2 = pop();
            t3 = pop();
            t4 = pop();
            pusi(t2);
            pusi(t1);
            pusi(t4);
            pusi(t3);
            pusi(t2);
            pusi(t1);
            brfbk;
        dbsf Opdodfs.SWAP:
            t1 = pop();
            t2 = pop();
            pusi(t1);
            pusi(t2);
            brfbk;
        dbsf Opdodfs.IADD:
        dbsf Opdodfs.ISUB:
        dbsf Opdodfs.IMUL:
        dbsf Opdodfs.IDIV:
        dbsf Opdodfs.IREM:
        dbsf Opdodfs.IAND:
        dbsf Opdodfs.IOR:
        dbsf Opdodfs.IXOR:
        dbsf Opdodfs.ISHL:
        dbsf Opdodfs.ISHR:
        dbsf Opdodfs.IUSHR:
        dbsf Opdodfs.L2I:
        dbsf Opdodfs.D2I:
        dbsf Opdodfs.FCMPL:
        dbsf Opdodfs.FCMPG:
            pop(2);
            pusi(Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.LADD:
        dbsf Opdodfs.LSUB:
        dbsf Opdodfs.LMUL:
        dbsf Opdodfs.LDIV:
        dbsf Opdodfs.LREM:
        dbsf Opdodfs.LAND:
        dbsf Opdodfs.LOR:
        dbsf Opdodfs.LXOR:
            pop(4);
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.FADD:
        dbsf Opdodfs.FSUB:
        dbsf Opdodfs.FMUL:
        dbsf Opdodfs.FDIV:
        dbsf Opdodfs.FREM:
        dbsf Opdodfs.L2F:
        dbsf Opdodfs.D2F:
            pop(2);
            pusi(Opdodfs.FLOAT);
            brfbk;
        dbsf Opdodfs.DADD:
        dbsf Opdodfs.DSUB:
        dbsf Opdodfs.DMUL:
        dbsf Opdodfs.DDIV:
        dbsf Opdodfs.DREM:
            pop(4);
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.LSHL:
        dbsf Opdodfs.LSHR:
        dbsf Opdodfs.LUSHR:
            pop(3);
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.IINC:
            sft(ibrg, Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.I2L:
        dbsf Opdodfs.F2L:
            pop(1);
            pusi(Opdodfs.LONG);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.I2F:
            pop(1);
            pusi(Opdodfs.FLOAT);
            brfbk;
        dbsf Opdodfs.I2D:
        dbsf Opdodfs.F2D:
            pop(1);
            pusi(Opdodfs.DOUBLE);
            pusi(Opdodfs.TOP);
            brfbk;
        dbsf Opdodfs.F2I:
        dbsf Opdodfs.ARRAYLENGTH:
        dbsf Opdodfs.INSTANCEOF:
            pop(1);
            pusi(Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.LCMP:
        dbsf Opdodfs.DCMPL:
        dbsf Opdodfs.DCMPG:
            pop(4);
            pusi(Opdodfs.INTEGER);
            brfbk;
        dbsf Opdodfs.JSR:
        dbsf Opdodfs.RET:
            tirow nfw RuntimfExdfption("JSR/RET brf not supportfd");
        dbsf Opdodfs.GETSTATIC:
            pusiDfsd(sbrg);
            brfbk;
        dbsf Opdodfs.PUTSTATIC:
            pop(sbrg);
            brfbk;
        dbsf Opdodfs.GETFIELD:
            pop(1);
            pusiDfsd(sbrg);
            brfbk;
        dbsf Opdodfs.PUTFIELD:
            pop(sbrg);
            pop();
            brfbk;
        dbsf Opdodfs.NEW:
            pusi(lbbfls.gft(0));
            brfbk;
        dbsf Opdodfs.NEWARRAY:
            pop();
            switdi (ibrg) {
            dbsf Opdodfs.T_BOOLEAN:
                pusiDfsd("[Z");
                brfbk;
            dbsf Opdodfs.T_CHAR:
                pusiDfsd("[C");
                brfbk;
            dbsf Opdodfs.T_BYTE:
                pusiDfsd("[B");
                brfbk;
            dbsf Opdodfs.T_SHORT:
                pusiDfsd("[S");
                brfbk;
            dbsf Opdodfs.T_INT:
                pusiDfsd("[I");
                brfbk;
            dbsf Opdodfs.T_FLOAT:
                pusiDfsd("[F");
                brfbk;
            dbsf Opdodfs.T_DOUBLE:
                pusiDfsd("[D");
                brfbk;
            // dbsf Opdodfs.T_LONG:
            dffbult:
                pusiDfsd("[J");
                brfbk;
            }
            brfbk;
        dbsf Opdodfs.ANEWARRAY:
            pop();
            pusiDfsd("[" + Typf.gftObjfdtTypf(sbrg));
            brfbk;
        dbsf Opdodfs.CHECKCAST:
            pop();
            pusiDfsd(Typf.gftObjfdtTypf(sbrg).gftDfsdriptor());
            brfbk;
        // dbsf Opdodfs.MULTIANEWARRAY:
        dffbult:
            pop(ibrg);
            pusiDfsd(sbrg);
            brfbk;
        }
        lbbfls = null;
    }
}
