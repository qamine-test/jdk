/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyrigit (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *    dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 * 3. Nfitifr tif nbmf of tif dopyrigit ioldfrs nor tif nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.util;

import jbvb.io.FilfInputStrfbm;
import jbvb.io.PrintWritfr;
import jbvb.util.HbsiMbp;
import jbvb.util.Mbp;

import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssRfbdfr;
import jdk.intfrnbl.org.objfdtwfb.bsm.Hbndlf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbti;

/**
 * A {@link Printfr} tibt prints tif ASM dodf to gfnfrbtf tif dlbssfs if visits.
 *
 * @butior Erid Brunfton
 */
publid dlbss ASMififr fxtfnds Printfr {

    /**
     * Tif nbmf of tif visitor vbribblf in tif produdfd dodf.
     */
    protfdtfd finbl String nbmf;

    /**
     * Idfntififr of tif bnnotbtion visitor vbribblf in tif produdfd dodf.
     */
    protfdtfd finbl int id;

    /**
     * Tif lbbfl nbmfs. Tiis mbp bssodibtfs String vblufs to Lbbfl kfys. It is
     * usfd only in ASMififrMftiodVisitor.
     */
    protfdtfd Mbp<Lbbfl, String> lbbflNbmfs;

    /**
     * Psfudo bddfss flbg usfd to distinguisi dlbss bddfss flbgs.
     */
    privbtf stbtid finbl int ACCESS_CLASS = 262144;

    /**
     * Psfudo bddfss flbg usfd to distinguisi fifld bddfss flbgs.
     */
    privbtf stbtid finbl int ACCESS_FIELD = 524288;

    /**
     * Psfudo bddfss flbg usfd to distinguisi innfr dlbss flbgs.
     */
    privbtf stbtid finbl int ACCESS_INNER = 1048576;

    /**
     * Construdts b nfw {@link ASMififr}. <i>Subdlbssfs must not usf tiis
     * donstrudtor</i>. Instfbd, tify must usf tif
     * {@link #ASMififr(int, String, int)} vfrsion.
     *
     * @tirows IllfgblStbtfExdfption
     *             If b subdlbss dblls tiis donstrudtor.
     */
    publid ASMififr() {
        tiis(Opdodfs.ASM5, "dw", 0);
        if (gftClbss() != ASMififr.dlbss) {
            tirow nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Construdts b nfw {@link ASMififr}.
     *
     * @pbrbm bpi
     *            tif ASM API vfrsion implfmfntfd by tiis dlbss. Must bf onf of
     *            {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm nbmf
     *            tif nbmf of tif visitor vbribblf in tif produdfd dodf.
     * @pbrbm id
     *            idfntififr of tif bnnotbtion visitor vbribblf in tif produdfd
     *            dodf.
     */
    protfdtfd ASMififr(finbl int bpi, finbl String nbmf, finbl int id) {
        supfr(bpi);
        tiis.nbmf = nbmf;
        tiis.id = id;
    }

    /**
     * Prints tif ASM sourdf dodf to gfnfrbtf tif givfn dlbss to tif stbndbrd
     * output.
     * <p>
     * Usbgf: ASMififr [-dfbug] &lt;binbry dlbss nbmf or dlbss filf nbmf&gt;
     *
     * @pbrbm brgs
     *            tif dommbnd linf brgumfnts.
     *
     * @tirows Exdfption
     *             if tif dlbss dbnnot bf found, or if bn IO fxdfption oddurs.
     */
    publid stbtid void mbin(finbl String[] brgs) tirows Exdfption {
        int i = 0;
        int flbgs = ClbssRfbdfr.SKIP_DEBUG;

        boolfbn ok = truf;
        if (brgs.lfngti < 1 || brgs.lfngti > 2) {
            ok = fblsf;
        }
        if (ok && "-dfbug".fqubls(brgs[0])) {
            i = 1;
            flbgs = 0;
            if (brgs.lfngti != 2) {
                ok = fblsf;
            }
        }
        if (!ok) {
            Systfm.frr
                    .println("Prints tif ASM dodf to gfnfrbtf tif givfn dlbss.");
            Systfm.frr.println("Usbgf: ASMififr [-dfbug] "
                    + "<fully qublififd dlbss nbmf or dlbss filf nbmf>");
            rfturn;
        }
        ClbssRfbdfr dr;
        if (brgs[i].fndsWiti(".dlbss") || brgs[i].indfxOf('\\') > -1
                || brgs[i].indfxOf('/') > -1) {
            dr = nfw ClbssRfbdfr(nfw FilfInputStrfbm(brgs[i]));
        } flsf {
            dr = nfw ClbssRfbdfr(brgs[i]);
        }
        dr.bddfpt(nfw TrbdfClbssVisitor(null, nfw ASMififr(), nfw PrintWritfr(
                Systfm.out)), flbgs);
    }

    // ------------------------------------------------------------------------
    // Clbssfs
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visit(finbl int vfrsion, finbl int bddfss, finbl String nbmf,
            finbl String signbturf, finbl String supfrNbmf,
            finbl String[] intfrfbdfs) {
        String simplfNbmf;
        int n = nbmf.lbstIndfxOf('/');
        if (n == -1) {
            simplfNbmf = nbmf;
        } flsf {
            tfxt.bdd("pbdkbgf bsm." + nbmf.substring(0, n).rfplbdf('/', '.')
                    + ";\n");
            simplfNbmf = nbmf.substring(n + 1);
        }
        tfxt.bdd("import jbvb.util.*;\n");
        tfxt.bdd("import jdk.intfrnbl.org.objfdtwfb.bsm.*;\n");
        tfxt.bdd("publid dlbss " + simplfNbmf + "Dump implfmfnts Opdodfs {\n\n");
        tfxt.bdd("publid stbtid bytf[] dump () tirows Exdfption {\n\n");
        tfxt.bdd("ClbssWritfr dw = nfw ClbssWritfr(0);\n");
        tfxt.bdd("FifldVisitor fv;\n");
        tfxt.bdd("MftiodVisitor mv;\n");
        tfxt.bdd("AnnotbtionVisitor bv0;\n\n");

        buf.sftLfngti(0);
        buf.bppfnd("dw.visit(");
        switdi (vfrsion) {
        dbsf Opdodfs.V1_1:
            buf.bppfnd("V1_1");
            brfbk;
        dbsf Opdodfs.V1_2:
            buf.bppfnd("V1_2");
            brfbk;
        dbsf Opdodfs.V1_3:
            buf.bppfnd("V1_3");
            brfbk;
        dbsf Opdodfs.V1_4:
            buf.bppfnd("V1_4");
            brfbk;
        dbsf Opdodfs.V1_5:
            buf.bppfnd("V1_5");
            brfbk;
        dbsf Opdodfs.V1_6:
            buf.bppfnd("V1_6");
            brfbk;
        dbsf Opdodfs.V1_7:
            buf.bppfnd("V1_7");
            brfbk;
        dffbult:
            buf.bppfnd(vfrsion);
            brfbk;
        }
        buf.bppfnd(", ");
        bppfndAddfss(bddfss | ACCESS_CLASS);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(signbturf);
        buf.bppfnd(", ");
        bppfndConstbnt(supfrNbmf);
        buf.bppfnd(", ");
        if (intfrfbdfs != null && intfrfbdfs.lfngti > 0) {
            buf.bppfnd("nfw String[] {");
            for (int i = 0; i < intfrfbdfs.lfngti; ++i) {
                buf.bppfnd(i == 0 ? " " : ", ");
                bppfndConstbnt(intfrfbdfs[i]);
            }
            buf.bppfnd(" }");
        } flsf {
            buf.bppfnd("null");
        }
        buf.bppfnd(");\n\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitSourdf(finbl String filf, finbl String dfbug) {
        buf.sftLfngti(0);
        buf.bppfnd("dw.visitSourdf(");
        bppfndConstbnt(filf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfbug);
        buf.bppfnd(");\n\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitOutfrClbss(finbl String ownfr, finbl String nbmf,
            finbl String dfsd) {
        buf.sftLfngti(0);
        buf.bppfnd("dw.visitOutfrClbss(");
        bppfndConstbnt(ownfr);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(");\n\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid ASMififr visitClbssAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid ASMififr visitClbssTypfAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbti, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitClbssAttributf(finbl Attributf bttr) {
        visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitInnfrClbss(finbl String nbmf, finbl String outfrNbmf,
            finbl String innfrNbmf, finbl int bddfss) {
        buf.sftLfngti(0);
        buf.bppfnd("dw.visitInnfrClbss(");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(outfrNbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(innfrNbmf);
        buf.bppfnd(", ");
        bppfndAddfss(bddfss | ACCESS_INNER);
        buf.bppfnd(");\n\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid ASMififr visitFifld(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl Objfdt vbluf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n");
        buf.bppfnd("fv = dw.visitFifld(");
        bppfndAddfss(bddfss | ACCESS_FIELD);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ");
        bppfndConstbnt(signbturf);
        buf.bppfnd(", ");
        bppfndConstbnt(vbluf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("fv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid ASMififr visitMftiod(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl String[] fxdfptions) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n");
        buf.bppfnd("mv = dw.visitMftiod(");
        bppfndAddfss(bddfss);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ");
        bppfndConstbnt(signbturf);
        buf.bppfnd(", ");
        if (fxdfptions != null && fxdfptions.lfngti > 0) {
            buf.bppfnd("nfw String[] {");
            for (int i = 0; i < fxdfptions.lfngti; ++i) {
                buf.bppfnd(i == 0 ? " " : ", ");
                bppfndConstbnt(fxdfptions[i]);
            }
            buf.bppfnd(" }");
        } flsf {
            buf.bppfnd("null");
        }
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("mv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid void visitClbssEnd() {
        tfxt.bdd("dw.visitEnd();\n\n");
        tfxt.bdd("rfturn dw.toBytfArrby();\n");
        tfxt.bdd("}\n");
        tfxt.bdd("}\n");
    }

    // ------------------------------------------------------------------------
    // Annotbtions
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visit(finbl String nbmf, finbl Objfdt vbluf) {
        buf.sftLfngti(0);
        buf.bppfnd("bv").bppfnd(id).bppfnd(".visit(");
        bppfndConstbnt(buf, nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(buf, vbluf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitEnum(finbl String nbmf, finbl String dfsd,
            finbl String vbluf) {
        buf.sftLfngti(0);
        buf.bppfnd("bv").bppfnd(id).bppfnd(".visitEnum(");
        bppfndConstbnt(buf, nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(buf, dfsd);
        buf.bppfnd(", ");
        bppfndConstbnt(buf, vbluf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid ASMififr visitAnnotbtion(finbl String nbmf, finbl String dfsd) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n");
        buf.bppfnd("AnnotbtionVisitor bv").bppfnd(id + 1).bppfnd(" = bv");
        buf.bppfnd(id).bppfnd(".visitAnnotbtion(");
        bppfndConstbnt(buf, nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(buf, dfsd);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", id + 1);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid ASMififr visitArrby(finbl String nbmf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n");
        buf.bppfnd("AnnotbtionVisitor bv").bppfnd(id + 1).bppfnd(" = bv");
        buf.bppfnd(id).bppfnd(".visitArrby(");
        bppfndConstbnt(buf, nbmf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", id + 1);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid void visitAnnotbtionEnd() {
        buf.sftLfngti(0);
        buf.bppfnd("bv").bppfnd(id).bppfnd(".visitEnd();\n");
        tfxt.bdd(buf.toString());
    }

    // ------------------------------------------------------------------------
    // Fiflds
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid ASMififr visitFifldAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid ASMififr visitFifldTypfAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbti, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitFifldAttributf(finbl Attributf bttr) {
        visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitFifldEnd() {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitEnd();\n");
        tfxt.bdd(buf.toString());
    }

    // ------------------------------------------------------------------------
    // Mftiods
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visitPbrbmftfr(String pbrbmftfrNbmf, int bddfss) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitPbrbmftfr(");
        bppfndString(buf, pbrbmftfrNbmf);
        buf.bppfnd(", ");
        bppfndAddfss(bddfss);
        tfxt.bdd(buf.bppfnd(");\n").toString());
    }

    @Ovfrridf
    publid ASMififr visitAnnotbtionDffbult() {
        buf.sftLfngti(0);
        buf.bppfnd("{\n").bppfnd("bv0 = ").bppfnd(nbmf)
                .bppfnd(".visitAnnotbtionDffbult();\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid ASMififr visitMftiodAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid ASMififr visitMftiodTypfAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbti, dfsd, visiblf);
    }

    @Ovfrridf
    publid ASMififr visitPbrbmftfrAnnotbtion(finbl int pbrbmftfr,
            finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n").bppfnd("bv0 = ").bppfnd(nbmf)
                .bppfnd(".visitPbrbmftfrAnnotbtion(").bppfnd(pbrbmftfr)
                .bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ").bppfnd(visiblf).bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid void visitMftiodAttributf(finbl Attributf bttr) {
        visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitCodf() {
        tfxt.bdd(nbmf + ".visitCodf();\n");
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        buf.sftLfngti(0);
        switdi (typf) {
        dbsf Opdodfs.F_NEW:
        dbsf Opdodfs.F_FULL:
            dfdlbrfFrbmfTypfs(nLodbl, lodbl);
            dfdlbrfFrbmfTypfs(nStbdk, stbdk);
            if (typf == Opdodfs.F_NEW) {
                buf.bppfnd(nbmf).bppfnd(".visitFrbmf(Opdodfs.F_NEW, ");
            } flsf {
                buf.bppfnd(nbmf).bppfnd(".visitFrbmf(Opdodfs.F_FULL, ");
            }
            buf.bppfnd(nLodbl).bppfnd(", nfw Objfdt[] {");
            bppfndFrbmfTypfs(nLodbl, lodbl);
            buf.bppfnd("}, ").bppfnd(nStbdk).bppfnd(", nfw Objfdt[] {");
            bppfndFrbmfTypfs(nStbdk, stbdk);
            buf.bppfnd('}');
            brfbk;
        dbsf Opdodfs.F_APPEND:
            dfdlbrfFrbmfTypfs(nLodbl, lodbl);
            buf.bppfnd(nbmf).bppfnd(".visitFrbmf(Opdodfs.F_APPEND,")
                    .bppfnd(nLodbl).bppfnd(", nfw Objfdt[] {");
            bppfndFrbmfTypfs(nLodbl, lodbl);
            buf.bppfnd("}, 0, null");
            brfbk;
        dbsf Opdodfs.F_CHOP:
            buf.bppfnd(nbmf).bppfnd(".visitFrbmf(Opdodfs.F_CHOP,")
                    .bppfnd(nLodbl).bppfnd(", null, 0, null");
            brfbk;
        dbsf Opdodfs.F_SAME:
            buf.bppfnd(nbmf).bppfnd(
                    ".visitFrbmf(Opdodfs.F_SAME, 0, null, 0, null");
            brfbk;
        dbsf Opdodfs.F_SAME1:
            dfdlbrfFrbmfTypfs(1, stbdk);
            buf.bppfnd(nbmf).bppfnd(
                    ".visitFrbmf(Opdodfs.F_SAME1, 0, null, 1, nfw Objfdt[] {");
            bppfndFrbmfTypfs(1, stbdk);
            buf.bppfnd('}');
            brfbk;
        }
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitInsn(finbl int opdodf) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitInsn(").bppfnd(OPCODES[opdodf])
                .bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitIntInsn(finbl int opdodf, finbl int opfrbnd) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf)
                .bppfnd(".visitIntInsn(")
                .bppfnd(OPCODES[opdodf])
                .bppfnd(", ")
                .bppfnd(opdodf == Opdodfs.NEWARRAY ? TYPES[opfrbnd] : Intfgfr
                        .toString(opfrbnd)).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitVbrInsn(").bppfnd(OPCODES[opdodf])
                .bppfnd(", ").bppfnd(vbr).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitTypfInsn(finbl int opdodf, finbl String typf) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitTypfInsn(").bppfnd(OPCODES[opdodf])
                .bppfnd(", ");
        bppfndConstbnt(typf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitFifldInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        buf.sftLfngti(0);
        buf.bppfnd(tiis.nbmf).bppfnd(".visitFifldInsn(")
                .bppfnd(OPCODES[opdodf]).bppfnd(", ");
        bppfndConstbnt(ownfr);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Dfprfdbtfd
    @Ovfrridf
    publid void visitMftiodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        if (bpi >= Opdodfs.ASM5) {
            supfr.visitMftiodInsn(opdodf, ownfr, nbmf, dfsd);
            rfturn;
        }
        doVisitMftiodInsn(opdodf, ownfr, nbmf, dfsd,
                opdodf == Opdodfs.INVOKEINTERFACE);
    }

    @Ovfrridf
    publid void visitMftiodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        if (bpi < Opdodfs.ASM5) {
            supfr.visitMftiodInsn(opdodf, ownfr, nbmf, dfsd, itf);
            rfturn;
        }
        doVisitMftiodInsn(opdodf, ownfr, nbmf, dfsd, itf);
    }

    privbtf void doVisitMftiodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        buf.sftLfngti(0);
        buf.bppfnd(tiis.nbmf).bppfnd(".visitMftiodInsn(")
                .bppfnd(OPCODES[opdodf]).bppfnd(", ");
        bppfndConstbnt(ownfr);
        buf.bppfnd(", ");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ");
        buf.bppfnd(itf ? "truf" : "fblsf");
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitInvokfDynbmidInsn(String nbmf, String dfsd, Hbndlf bsm,
            Objfdt... bsmArgs) {
        buf.sftLfngti(0);
        buf.bppfnd(tiis.nbmf).bppfnd(".visitInvokfDynbmidInsn(");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ");
        bppfndConstbnt(bsm);
        buf.bppfnd(", nfw Objfdt[]{");
        for (int i = 0; i < bsmArgs.lfngti; ++i) {
            bppfndConstbnt(bsmArgs[i]);
            if (i != bsmArgs.lfngti - 1) {
                buf.bppfnd(", ");
            }
        }
        buf.bppfnd("});\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitJumpInsn(finbl int opdodf, finbl Lbbfl lbbfl) {
        buf.sftLfngti(0);
        dfdlbrfLbbfl(lbbfl);
        buf.bppfnd(nbmf).bppfnd(".visitJumpInsn(").bppfnd(OPCODES[opdodf])
                .bppfnd(", ");
        bppfndLbbfl(lbbfl);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLbbfl(finbl Lbbfl lbbfl) {
        buf.sftLfngti(0);
        dfdlbrfLbbfl(lbbfl);
        buf.bppfnd(nbmf).bppfnd(".visitLbbfl(");
        bppfndLbbfl(lbbfl);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLddInsn(finbl Objfdt dst) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitLddInsn(");
        bppfndConstbnt(dst);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitIindInsn(").bppfnd(vbr).bppfnd(", ")
                .bppfnd(indrfmfnt).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitTbblfSwitdiInsn(finbl int min, finbl int mbx,
            finbl Lbbfl dflt, finbl Lbbfl... lbbfls) {
        buf.sftLfngti(0);
        for (int i = 0; i < lbbfls.lfngti; ++i) {
            dfdlbrfLbbfl(lbbfls[i]);
        }
        dfdlbrfLbbfl(dflt);

        buf.bppfnd(nbmf).bppfnd(".visitTbblfSwitdiInsn(").bppfnd(min)
                .bppfnd(", ").bppfnd(mbx).bppfnd(", ");
        bppfndLbbfl(dflt);
        buf.bppfnd(", nfw Lbbfl[] {");
        for (int i = 0; i < lbbfls.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ");
            bppfndLbbfl(lbbfls[i]);
        }
        buf.bppfnd(" });\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLookupSwitdiInsn(finbl Lbbfl dflt, finbl int[] kfys,
            finbl Lbbfl[] lbbfls) {
        buf.sftLfngti(0);
        for (int i = 0; i < lbbfls.lfngti; ++i) {
            dfdlbrfLbbfl(lbbfls[i]);
        }
        dfdlbrfLbbfl(dflt);

        buf.bppfnd(nbmf).bppfnd(".visitLookupSwitdiInsn(");
        bppfndLbbfl(dflt);
        buf.bppfnd(", nfw int[] {");
        for (int i = 0; i < kfys.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ").bppfnd(kfys[i]);
        }
        buf.bppfnd(" }, nfw Lbbfl[] {");
        for (int i = 0; i < lbbfls.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ");
            bppfndLbbfl(lbbfls[i]);
        }
        buf.bppfnd(" });\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMultiANfwArrbyInsn(finbl String dfsd, finbl int dims) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitMultiANfwArrbyInsn(");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ").bppfnd(dims).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid ASMififr visitInsnAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion("visitInsnAnnotbtion", typfRff, typfPbti,
                dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitTryCbtdiBlodk(finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl Lbbfl ibndlfr, finbl String typf) {
        buf.sftLfngti(0);
        dfdlbrfLbbfl(stbrt);
        dfdlbrfLbbfl(fnd);
        dfdlbrfLbbfl(ibndlfr);
        buf.bppfnd(nbmf).bppfnd(".visitTryCbtdiBlodk(");
        bppfndLbbfl(stbrt);
        buf.bppfnd(", ");
        bppfndLbbfl(fnd);
        buf.bppfnd(", ");
        bppfndLbbfl(ibndlfr);
        buf.bppfnd(", ");
        bppfndConstbnt(typf);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid ASMififr visitTryCbtdiAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion("visitTryCbtdiAnnotbtion", typfRff,
                typfPbti, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitLodblVbribblf(finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl int indfx) {
        buf.sftLfngti(0);
        buf.bppfnd(tiis.nbmf).bppfnd(".visitLodblVbribblf(");
        bppfndConstbnt(nbmf);
        buf.bppfnd(", ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ");
        bppfndConstbnt(signbturf);
        buf.bppfnd(", ");
        bppfndLbbfl(stbrt);
        buf.bppfnd(", ");
        bppfndLbbfl(fnd);
        buf.bppfnd(", ").bppfnd(indfx).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Printfr visitLodblVbribblfAnnotbtion(int typfRff, TypfPbti typfPbti,
            Lbbfl[] stbrt, Lbbfl[] fnd, int[] indfx, String dfsd,
            boolfbn visiblf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n").bppfnd("bv0 = ").bppfnd(nbmf)
                .bppfnd(".visitLodblVbribblfAnnotbtion(");
        buf.bppfnd(typfRff);
        buf.bppfnd(", TypfPbti.fromString(\"").bppfnd(typfPbti).bppfnd("\"), ");
        buf.bppfnd("nfw Lbbfl[] {");
        for (int i = 0; i < stbrt.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ");
            bppfndLbbfl(stbrt[i]);
        }
        buf.bppfnd(" }, nfw Lbbfl[] {");
        for (int i = 0; i < fnd.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ");
            bppfndLbbfl(fnd[i]);
        }
        buf.bppfnd(" }, nfw int[] {");
        for (int i = 0; i < indfx.lfngti; ++i) {
            buf.bppfnd(i == 0 ? " " : ", ").bppfnd(indfx[i]);
        }
        buf.bppfnd(" }, ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ").bppfnd(visiblf).bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    @Ovfrridf
    publid void visitLinfNumbfr(finbl int linf, finbl Lbbfl stbrt) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitLinfNumbfr(").bppfnd(linf).bppfnd(", ");
        bppfndLbbfl(stbrt);
        buf.bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitMbxs(").bppfnd(mbxStbdk).bppfnd(", ")
                .bppfnd(mbxLodbls).bppfnd(");\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMftiodEnd() {
        buf.sftLfngti(0);
        buf.bppfnd(nbmf).bppfnd(".visitEnd();\n");
        tfxt.bdd(buf.toString());
    }

    // ------------------------------------------------------------------------
    // Common mftiods
    // ------------------------------------------------------------------------

    publid ASMififr visitAnnotbtion(finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n").bppfnd("bv0 = ").bppfnd(nbmf)
                .bppfnd(".visitAnnotbtion(");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ").bppfnd(visiblf).bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    publid ASMififr visitTypfAnnotbtion(finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        rfturn visitTypfAnnotbtion("visitTypfAnnotbtion", typfRff, typfPbti,
                dfsd, visiblf);
    }

    publid ASMififr visitTypfAnnotbtion(finbl String mftiod, finbl int typfRff,
            finbl TypfPbti typfPbti, finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngti(0);
        buf.bppfnd("{\n").bppfnd("bv0 = ").bppfnd(nbmf).bppfnd(".")
                .bppfnd(mftiod).bppfnd("(");
        buf.bppfnd(typfRff);
        buf.bppfnd(", TypfPbti.fromString(\"").bppfnd(typfPbti).bppfnd("\"), ");
        bppfndConstbnt(dfsd);
        buf.bppfnd(", ").bppfnd(visiblf).bppfnd(");\n");
        tfxt.bdd(buf.toString());
        ASMififr b = drfbtfASMififr("bv", 0);
        tfxt.bdd(b.gftTfxt());
        tfxt.bdd("}\n");
        rfturn b;
    }

    publid void visitAttributf(finbl Attributf bttr) {
        buf.sftLfngti(0);
        buf.bppfnd("// ATTRIBUTE ").bppfnd(bttr.typf).bppfnd('\n');
        if (bttr instbndfof ASMifibblf) {
            if (lbbflNbmfs == null) {
                lbbflNbmfs = nfw HbsiMbp<Lbbfl, String>();
            }
            buf.bppfnd("{\n");
            ((ASMifibblf) bttr).bsmify(buf, "bttr", lbbflNbmfs);
            buf.bppfnd(nbmf).bppfnd(".visitAttributf(bttr);\n");
            buf.bppfnd("}\n");
        }
        tfxt.bdd(buf.toString());
    }

    // ------------------------------------------------------------------------
    // Utility mftiods
    // ------------------------------------------------------------------------

    protfdtfd ASMififr drfbtfASMififr(finbl String nbmf, finbl int id) {
        rfturn nfw ASMififr(Opdodfs.ASM5, nbmf, id);
    }

    /**
     * Appfnds b string rfprfsfntbtion of tif givfn bddfss modififrs to
     * {@link #buf buf}.
     *
     * @pbrbm bddfss
     *            somf bddfss modififrs.
     */
    void bppfndAddfss(finbl int bddfss) {
        boolfbn first = truf;
        if ((bddfss & Opdodfs.ACC_PUBLIC) != 0) {
            buf.bppfnd("ACC_PUBLIC");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_PRIVATE) != 0) {
            buf.bppfnd("ACC_PRIVATE");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_PROTECTED) != 0) {
            buf.bppfnd("ACC_PROTECTED");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_FINAL) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_FINAL");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_STATIC) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_STATIC");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_SYNCHRONIZED) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            if ((bddfss & ACCESS_CLASS) == 0) {
                buf.bppfnd("ACC_SYNCHRONIZED");
            } flsf {
                buf.bppfnd("ACC_SUPER");
            }
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_VOLATILE) != 0
                && (bddfss & ACCESS_FIELD) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_VOLATILE");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_BRIDGE) != 0 && (bddfss & ACCESS_CLASS) == 0
                && (bddfss & ACCESS_FIELD) == 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_BRIDGE");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_VARARGS) != 0 && (bddfss & ACCESS_CLASS) == 0
                && (bddfss & ACCESS_FIELD) == 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_VARARGS");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_TRANSIENT) != 0
                && (bddfss & ACCESS_FIELD) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_TRANSIENT");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_NATIVE) != 0 && (bddfss & ACCESS_CLASS) == 0
                && (bddfss & ACCESS_FIELD) == 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_NATIVE");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_ENUM) != 0
                && ((bddfss & ACCESS_CLASS) != 0
                        || (bddfss & ACCESS_FIELD) != 0 || (bddfss & ACCESS_INNER) != 0)) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_ENUM");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_ANNOTATION) != 0
                && ((bddfss & ACCESS_CLASS) != 0 || (bddfss & ACCESS_INNER) != 0)) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_ANNOTATION");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_ABSTRACT) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_ABSTRACT");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_INTERFACE) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_INTERFACE");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_STRICT) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_STRICT");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_SYNTHETIC) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_SYNTHETIC");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_DEPRECATED) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_DEPRECATED");
            first = fblsf;
        }
        if ((bddfss & Opdodfs.ACC_MANDATED) != 0) {
            if (!first) {
                buf.bppfnd(" + ");
            }
            buf.bppfnd("ACC_MANDATED");
            first = fblsf;
        }
        if (first) {
            buf.bppfnd('0');
        }
    }

    /**
     * Appfnds b string rfprfsfntbtion of tif givfn donstbnt to tif givfn
     * bufffr.
     *
     * @pbrbm dst
     *            bn {@link Intfgfr}, {@link Flobt}, {@link Long},
     *            {@link Doublf} or {@link String} objfdt. Mby bf <tt>null</tt>.
     */
    protfdtfd void bppfndConstbnt(finbl Objfdt dst) {
        bppfndConstbnt(buf, dst);
    }

    /**
     * Appfnds b string rfprfsfntbtion of tif givfn donstbnt to tif givfn
     * bufffr.
     *
     * @pbrbm buf
     *            b string bufffr.
     * @pbrbm dst
     *            bn {@link Intfgfr}, {@link Flobt}, {@link Long},
     *            {@link Doublf} or {@link String} objfdt. Mby bf <tt>null</tt>.
     */
    stbtid void bppfndConstbnt(finbl StringBufffr buf, finbl Objfdt dst) {
        if (dst == null) {
            buf.bppfnd("null");
        } flsf if (dst instbndfof String) {
            bppfndString(buf, (String) dst);
        } flsf if (dst instbndfof Typf) {
            buf.bppfnd("Typf.gftTypf(\"");
            buf.bppfnd(((Typf) dst).gftDfsdriptor());
            buf.bppfnd("\")");
        } flsf if (dst instbndfof Hbndlf) {
            buf.bppfnd("nfw Hbndlf(");
            Hbndlf i = (Hbndlf) dst;
            buf.bppfnd("Opdodfs.").bppfnd(HANDLE_TAG[i.gftTbg()])
                    .bppfnd(", \"");
            buf.bppfnd(i.gftOwnfr()).bppfnd("\", \"");
            buf.bppfnd(i.gftNbmf()).bppfnd("\", \"");
            buf.bppfnd(i.gftDfsd()).bppfnd("\")");
        } flsf if (dst instbndfof Bytf) {
            buf.bppfnd("nfw Bytf((bytf)").bppfnd(dst).bppfnd(')');
        } flsf if (dst instbndfof Boolfbn) {
            buf.bppfnd(((Boolfbn) dst).boolfbnVbluf() ? "Boolfbn.TRUE"
                    : "Boolfbn.FALSE");
        } flsf if (dst instbndfof Siort) {
            buf.bppfnd("nfw Siort((siort)").bppfnd(dst).bppfnd(')');
        } flsf if (dst instbndfof Cibrbdtfr) {
            int d = ((Cibrbdtfr) dst).dibrVbluf();
            buf.bppfnd("nfw Cibrbdtfr((dibr)").bppfnd(d).bppfnd(')');
        } flsf if (dst instbndfof Intfgfr) {
            buf.bppfnd("nfw Intfgfr(").bppfnd(dst).bppfnd(')');
        } flsf if (dst instbndfof Flobt) {
            buf.bppfnd("nfw Flobt(\"").bppfnd(dst).bppfnd("\")");
        } flsf if (dst instbndfof Long) {
            buf.bppfnd("nfw Long(").bppfnd(dst).bppfnd("L)");
        } flsf if (dst instbndfof Doublf) {
            buf.bppfnd("nfw Doublf(\"").bppfnd(dst).bppfnd("\")");
        } flsf if (dst instbndfof bytf[]) {
            bytf[] v = (bytf[]) dst;
            buf.bppfnd("nfw bytf[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]);
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof boolfbn[]) {
            boolfbn[] v = (boolfbn[]) dst;
            buf.bppfnd("nfw boolfbn[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]);
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof siort[]) {
            siort[] v = (siort[]) dst;
            buf.bppfnd("nfw siort[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd("(siort)").bppfnd(v[i]);
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof dibr[]) {
            dibr[] v = (dibr[]) dst;
            buf.bppfnd("nfw dibr[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd("(dibr)")
                        .bppfnd((int) v[i]);
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof int[]) {
            int[] v = (int[]) dst;
            buf.bppfnd("nfw int[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]);
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof long[]) {
            long[] v = (long[]) dst;
            buf.bppfnd("nfw long[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]).bppfnd('L');
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof flobt[]) {
            flobt[] v = (flobt[]) dst;
            buf.bppfnd("nfw flobt[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]).bppfnd('f');
            }
            buf.bppfnd('}');
        } flsf if (dst instbndfof doublf[]) {
            doublf[] v = (doublf[]) dst;
            buf.bppfnd("nfw doublf[] {");
            for (int i = 0; i < v.lfngti; i++) {
                buf.bppfnd(i == 0 ? "" : ",").bppfnd(v[i]).bppfnd('d');
            }
            buf.bppfnd('}');
        }
    }

    privbtf void dfdlbrfFrbmfTypfs(finbl int n, finbl Objfdt[] o) {
        for (int i = 0; i < n; ++i) {
            if (o[i] instbndfof Lbbfl) {
                dfdlbrfLbbfl((Lbbfl) o[i]);
            }
        }
    }

    privbtf void bppfndFrbmfTypfs(finbl int n, finbl Objfdt[] o) {
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                buf.bppfnd(", ");
            }
            if (o[i] instbndfof String) {
                bppfndConstbnt(o[i]);
            } flsf if (o[i] instbndfof Intfgfr) {
                switdi (((Intfgfr) o[i]).intVbluf()) {
                dbsf 0:
                    buf.bppfnd("Opdodfs.TOP");
                    brfbk;
                dbsf 1:
                    buf.bppfnd("Opdodfs.INTEGER");
                    brfbk;
                dbsf 2:
                    buf.bppfnd("Opdodfs.FLOAT");
                    brfbk;
                dbsf 3:
                    buf.bppfnd("Opdodfs.DOUBLE");
                    brfbk;
                dbsf 4:
                    buf.bppfnd("Opdodfs.LONG");
                    brfbk;
                dbsf 5:
                    buf.bppfnd("Opdodfs.NULL");
                    brfbk;
                dbsf 6:
                    buf.bppfnd("Opdodfs.UNINITIALIZED_THIS");
                    brfbk;
                }
            } flsf {
                bppfndLbbfl((Lbbfl) o[i]);
            }
        }
    }

    /**
     * Appfnds b dfdlbrbtion of tif givfn lbbfl to {@link #buf buf}. Tiis
     * dfdlbrbtion is of tif form "Lbbfl lXXX = nfw Lbbfl();". Dofs notiing if
     * tif givfn lbbfl ibs blrfbdy bffn dfdlbrfd.
     *
     * @pbrbm l
     *            b lbbfl.
     */
    protfdtfd void dfdlbrfLbbfl(finbl Lbbfl l) {
        if (lbbflNbmfs == null) {
            lbbflNbmfs = nfw HbsiMbp<Lbbfl, String>();
        }
        String nbmf = lbbflNbmfs.gft(l);
        if (nbmf == null) {
            nbmf = "l" + lbbflNbmfs.sizf();
            lbbflNbmfs.put(l, nbmf);
            buf.bppfnd("Lbbfl ").bppfnd(nbmf).bppfnd(" = nfw Lbbfl();\n");
        }
    }

    /**
     * Appfnds tif nbmf of tif givfn lbbfl to {@link #buf buf}. Tif givfn lbbfl
     * <i>must</i> blrfbdy ibvf b nbmf. Onf wby to fnsurf tiis is to blwbys dbll
     * {@link #dfdlbrfLbbfl dfdlbrfd} bfforf dblling tiis mftiod.
     *
     * @pbrbm l
     *            b lbbfl.
     */
    protfdtfd void bppfndLbbfl(finbl Lbbfl l) {
        buf.bppfnd(lbbflNbmfs.gft(l));
    }
}
