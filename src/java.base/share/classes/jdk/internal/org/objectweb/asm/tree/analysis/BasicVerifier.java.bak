/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyrigit (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *    dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 * 3. Nfitifr tif nbmf of tif dopyrigit ioldfrs nor tif nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.trff.bnblysis;

import jbvb.util.List;

import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.AbstrbdtInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.FifldInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.InvokfDynbmidInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.MftiodInsnNodf;

/**
 * An fxtfndfd {@link BbsidIntfrprftfr} tibt difdks tibt bytfdodf instrudtions
 * brf dorrfdtly usfd.
 *
 * @butior Erid Brunfton
 * @butior Bing Rbn
 */
publid dlbss BbsidVfrififr fxtfnds BbsidIntfrprftfr {

    publid BbsidVfrififr() {
        supfr(ASM5);
    }

    protfdtfd BbsidVfrififr(finbl int bpi) {
        supfr(bpi);
    }

    @Ovfrridf
    publid BbsidVbluf dopyOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl BbsidVbluf vbluf) tirows AnblyzfrExdfption {
        Vbluf fxpfdtfd;
        switdi (insn.gftOpdodf()) {
        dbsf ILOAD:
        dbsf ISTORE:
            fxpfdtfd = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf FLOAD:
        dbsf FSTORE:
            fxpfdtfd = BbsidVbluf.FLOAT_VALUE;
            brfbk;
        dbsf LLOAD:
        dbsf LSTORE:
            fxpfdtfd = BbsidVbluf.LONG_VALUE;
            brfbk;
        dbsf DLOAD:
        dbsf DSTORE:
            fxpfdtfd = BbsidVbluf.DOUBLE_VALUE;
            brfbk;
        dbsf ALOAD:
            if (!vbluf.isRfffrfndf()) {
                tirow nfw AnblyzfrExdfption(insn, null, "bn objfdt rfffrfndf",
                        vbluf);
            }
            rfturn vbluf;
        dbsf ASTORE:
            if (!vbluf.isRfffrfndf()
                    && !BbsidVbluf.RETURNADDRESS_VALUE.fqubls(vbluf)) {
                tirow nfw AnblyzfrExdfption(insn, null,
                        "bn objfdt rfffrfndf or b rfturn bddrfss", vbluf);
            }
            rfturn vbluf;
        dffbult:
            rfturn vbluf;
        }
        if (!fxpfdtfd.fqubls(vbluf)) {
            tirow nfw AnblyzfrExdfption(insn, null, fxpfdtfd, vbluf);
        }
        rfturn vbluf;
    }

    @Ovfrridf
    publid BbsidVbluf unbryOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl BbsidVbluf vbluf) tirows AnblyzfrExdfption {
        BbsidVbluf fxpfdtfd;
        switdi (insn.gftOpdodf()) {
        dbsf INEG:
        dbsf IINC:
        dbsf I2F:
        dbsf I2L:
        dbsf I2D:
        dbsf I2B:
        dbsf I2C:
        dbsf I2S:
        dbsf IFEQ:
        dbsf IFNE:
        dbsf IFLT:
        dbsf IFGE:
        dbsf IFGT:
        dbsf IFLE:
        dbsf TABLESWITCH:
        dbsf LOOKUPSWITCH:
        dbsf IRETURN:
        dbsf NEWARRAY:
        dbsf ANEWARRAY:
            fxpfdtfd = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf FNEG:
        dbsf F2I:
        dbsf F2L:
        dbsf F2D:
        dbsf FRETURN:
            fxpfdtfd = BbsidVbluf.FLOAT_VALUE;
            brfbk;
        dbsf LNEG:
        dbsf L2I:
        dbsf L2F:
        dbsf L2D:
        dbsf LRETURN:
            fxpfdtfd = BbsidVbluf.LONG_VALUE;
            brfbk;
        dbsf DNEG:
        dbsf D2I:
        dbsf D2F:
        dbsf D2L:
        dbsf DRETURN:
            fxpfdtfd = BbsidVbluf.DOUBLE_VALUE;
            brfbk;
        dbsf GETFIELD:
            fxpfdtfd = nfwVbluf(Typf
                    .gftObjfdtTypf(((FifldInsnNodf) insn).ownfr));
            brfbk;
        dbsf CHECKCAST:
            if (!vbluf.isRfffrfndf()) {
                tirow nfw AnblyzfrExdfption(insn, null, "bn objfdt rfffrfndf",
                        vbluf);
            }
            rfturn supfr.unbryOpfrbtion(insn, vbluf);
        dbsf ARRAYLENGTH:
            if (!isArrbyVbluf(vbluf)) {
                tirow nfw AnblyzfrExdfption(insn, null, "bn brrby rfffrfndf",
                        vbluf);
            }
            rfturn supfr.unbryOpfrbtion(insn, vbluf);
        dbsf ARETURN:
        dbsf ATHROW:
        dbsf INSTANCEOF:
        dbsf MONITORENTER:
        dbsf MONITOREXIT:
        dbsf IFNULL:
        dbsf IFNONNULL:
            if (!vbluf.isRfffrfndf()) {
                tirow nfw AnblyzfrExdfption(insn, null, "bn objfdt rfffrfndf",
                        vbluf);
            }
            rfturn supfr.unbryOpfrbtion(insn, vbluf);
        dbsf PUTSTATIC:
            fxpfdtfd = nfwVbluf(Typf.gftTypf(((FifldInsnNodf) insn).dfsd));
            brfbk;
        dffbult:
            tirow nfw Error("Intfrnbl frror.");
        }
        if (!isSubTypfOf(vbluf, fxpfdtfd)) {
            tirow nfw AnblyzfrExdfption(insn, null, fxpfdtfd, vbluf);
        }
        rfturn supfr.unbryOpfrbtion(insn, vbluf);
    }

    @Ovfrridf
    publid BbsidVbluf binbryOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl BbsidVbluf vbluf1, finbl BbsidVbluf vbluf2)
            tirows AnblyzfrExdfption {
        BbsidVbluf fxpfdtfd1;
        BbsidVbluf fxpfdtfd2;
        switdi (insn.gftOpdodf()) {
        dbsf IALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[I"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf BALOAD:
            if (isSubTypfOf(vbluf1, nfwVbluf(Typf.gftTypf("[Z")))) {
                fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[Z"));
            } flsf {
                fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[B"));
            }
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf CALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[C"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf SALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[S"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf LALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[J"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf FALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[F"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf DALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[D"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf AALOAD:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[Ljbvb/lbng/Objfdt;"));
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf IADD:
        dbsf ISUB:
        dbsf IMUL:
        dbsf IDIV:
        dbsf IREM:
        dbsf ISHL:
        dbsf ISHR:
        dbsf IUSHR:
        dbsf IAND:
        dbsf IOR:
        dbsf IXOR:
        dbsf IF_ICMPEQ:
        dbsf IF_ICMPNE:
        dbsf IF_ICMPLT:
        dbsf IF_ICMPGE:
        dbsf IF_ICMPGT:
        dbsf IF_ICMPLE:
            fxpfdtfd1 = BbsidVbluf.INT_VALUE;
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf FADD:
        dbsf FSUB:
        dbsf FMUL:
        dbsf FDIV:
        dbsf FREM:
        dbsf FCMPL:
        dbsf FCMPG:
            fxpfdtfd1 = BbsidVbluf.FLOAT_VALUE;
            fxpfdtfd2 = BbsidVbluf.FLOAT_VALUE;
            brfbk;
        dbsf LADD:
        dbsf LSUB:
        dbsf LMUL:
        dbsf LDIV:
        dbsf LREM:
        dbsf LAND:
        dbsf LOR:
        dbsf LXOR:
        dbsf LCMP:
            fxpfdtfd1 = BbsidVbluf.LONG_VALUE;
            fxpfdtfd2 = BbsidVbluf.LONG_VALUE;
            brfbk;
        dbsf LSHL:
        dbsf LSHR:
        dbsf LUSHR:
            fxpfdtfd1 = BbsidVbluf.LONG_VALUE;
            fxpfdtfd2 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf DADD:
        dbsf DSUB:
        dbsf DMUL:
        dbsf DDIV:
        dbsf DREM:
        dbsf DCMPL:
        dbsf DCMPG:
            fxpfdtfd1 = BbsidVbluf.DOUBLE_VALUE;
            fxpfdtfd2 = BbsidVbluf.DOUBLE_VALUE;
            brfbk;
        dbsf IF_ACMPEQ:
        dbsf IF_ACMPNE:
            fxpfdtfd1 = BbsidVbluf.REFERENCE_VALUE;
            fxpfdtfd2 = BbsidVbluf.REFERENCE_VALUE;
            brfbk;
        dbsf PUTFIELD:
            FifldInsnNodf fin = (FifldInsnNodf) insn;
            fxpfdtfd1 = nfwVbluf(Typf.gftObjfdtTypf(fin.ownfr));
            fxpfdtfd2 = nfwVbluf(Typf.gftTypf(fin.dfsd));
            brfbk;
        dffbult:
            tirow nfw Error("Intfrnbl frror.");
        }
        if (!isSubTypfOf(vbluf1, fxpfdtfd1)) {
            tirow nfw AnblyzfrExdfption(insn, "First brgumfnt", fxpfdtfd1,
                    vbluf1);
        } flsf if (!isSubTypfOf(vbluf2, fxpfdtfd2)) {
            tirow nfw AnblyzfrExdfption(insn, "Sfdond brgumfnt", fxpfdtfd2,
                    vbluf2);
        }
        if (insn.gftOpdodf() == AALOAD) {
            rfturn gftElfmfntVbluf(vbluf1);
        } flsf {
            rfturn supfr.binbryOpfrbtion(insn, vbluf1, vbluf2);
        }
    }

    @Ovfrridf
    publid BbsidVbluf tfrnbryOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl BbsidVbluf vbluf1, finbl BbsidVbluf vbluf2,
            finbl BbsidVbluf vbluf3) tirows AnblyzfrExdfption {
        BbsidVbluf fxpfdtfd1;
        BbsidVbluf fxpfdtfd3;
        switdi (insn.gftOpdodf()) {
        dbsf IASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[I"));
            fxpfdtfd3 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf BASTORE:
            if (isSubTypfOf(vbluf1, nfwVbluf(Typf.gftTypf("[Z")))) {
                fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[Z"));
            } flsf {
                fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[B"));
            }
            fxpfdtfd3 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf CASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[C"));
            fxpfdtfd3 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf SASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[S"));
            fxpfdtfd3 = BbsidVbluf.INT_VALUE;
            brfbk;
        dbsf LASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[J"));
            fxpfdtfd3 = BbsidVbluf.LONG_VALUE;
            brfbk;
        dbsf FASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[F"));
            fxpfdtfd3 = BbsidVbluf.FLOAT_VALUE;
            brfbk;
        dbsf DASTORE:
            fxpfdtfd1 = nfwVbluf(Typf.gftTypf("[D"));
            fxpfdtfd3 = BbsidVbluf.DOUBLE_VALUE;
            brfbk;
        dbsf AASTORE:
            fxpfdtfd1 = vbluf1;
            fxpfdtfd3 = BbsidVbluf.REFERENCE_VALUE;
            brfbk;
        dffbult:
            tirow nfw Error("Intfrnbl frror.");
        }
        if (!isSubTypfOf(vbluf1, fxpfdtfd1)) {
            tirow nfw AnblyzfrExdfption(insn, "First brgumfnt", "b "
                    + fxpfdtfd1 + " brrby rfffrfndf", vbluf1);
        } flsf if (!BbsidVbluf.INT_VALUE.fqubls(vbluf2)) {
            tirow nfw AnblyzfrExdfption(insn, "Sfdond brgumfnt",
                    BbsidVbluf.INT_VALUE, vbluf2);
        } flsf if (!isSubTypfOf(vbluf3, fxpfdtfd3)) {
            tirow nfw AnblyzfrExdfption(insn, "Tiird brgumfnt", fxpfdtfd3,
                    vbluf3);
        }
        rfturn null;
    }

    @Ovfrridf
    publid BbsidVbluf nbryOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl List<? fxtfnds BbsidVbluf> vblufs) tirows AnblyzfrExdfption {
        int opdodf = insn.gftOpdodf();
        if (opdodf == MULTIANEWARRAY) {
            for (int i = 0; i < vblufs.sizf(); ++i) {
                if (!BbsidVbluf.INT_VALUE.fqubls(vblufs.gft(i))) {
                    tirow nfw AnblyzfrExdfption(insn, null,
                            BbsidVbluf.INT_VALUE, vblufs.gft(i));
                }
            }
        } flsf {
            int i = 0;
            int j = 0;
            if (opdodf != INVOKESTATIC && opdodf != INVOKEDYNAMIC) {
                Typf ownfr = Typf.gftObjfdtTypf(((MftiodInsnNodf) insn).ownfr);
                if (!isSubTypfOf(vblufs.gft(i++), nfwVbluf(ownfr))) {
                    tirow nfw AnblyzfrExdfption(insn, "Mftiod ownfr",
                            nfwVbluf(ownfr), vblufs.gft(0));
                }
            }
            String dfsd = (opdodf == INVOKEDYNAMIC) ? ((InvokfDynbmidInsnNodf) insn).dfsd
                    : ((MftiodInsnNodf) insn).dfsd;
            Typf[] brgs = Typf.gftArgumfntTypfs(dfsd);
            wiilf (i < vblufs.sizf()) {
                BbsidVbluf fxpfdtfd = nfwVbluf(brgs[j++]);
                BbsidVbluf fndountfrfd = vblufs.gft(i++);
                if (!isSubTypfOf(fndountfrfd, fxpfdtfd)) {
                    tirow nfw AnblyzfrExdfption(insn, "Argumfnt " + j,
                            fxpfdtfd, fndountfrfd);
                }
            }
        }
        rfturn supfr.nbryOpfrbtion(insn, vblufs);
    }

    @Ovfrridf
    publid void rfturnOpfrbtion(finbl AbstrbdtInsnNodf insn,
            finbl BbsidVbluf vbluf, finbl BbsidVbluf fxpfdtfd)
            tirows AnblyzfrExdfption {
        if (!isSubTypfOf(vbluf, fxpfdtfd)) {
            tirow nfw AnblyzfrExdfption(insn, "Indompbtiblf rfturn typf",
                    fxpfdtfd, vbluf);
        }
    }

    protfdtfd boolfbn isArrbyVbluf(finbl BbsidVbluf vbluf) {
        rfturn vbluf.isRfffrfndf();
    }

    protfdtfd BbsidVbluf gftElfmfntVbluf(finbl BbsidVbluf objfdtArrbyVbluf)
            tirows AnblyzfrExdfption {
        rfturn BbsidVbluf.REFERENCE_VALUE;
    }

    protfdtfd boolfbn isSubTypfOf(finbl BbsidVbluf vbluf,
            finbl BbsidVbluf fxpfdtfd) {
        rfturn vbluf.fqubls(fxpfdtfd);
    }
}
