/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.dommons;

import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;

import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.MfthodNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.TryCbtdhBlodkNodf;

/**
 * A {@link MfthodVisitor} bdbptfr to sort thf fxdfption hbndlfrs. Thf hbndlfrs
 * brf sortfd in b mfthod innfrmost-to-outfrmost. This bllows thf progrbmmfr to
 * bdd hbndlfrs without worrying bbout ordfring thfm dorrfdtly with rfspfdt to
 * fxisting, in-dodf hbndlfrs.
 *
 * Bfhbvior is only dffinfd for propfrly-nfstfd hbndlfrs. If bny "try" blodks
 * ovfrlbp (somfthing thbt isn't possiblf in Jbvb dodf) thfn this mby not do
 * whbt you wbnt. In fbdt, this bdbptfr just sorts by thf lfngth of thf "try"
 * blodk, tbking bdvbntbgf of thf fbdt thbt b givfn try blodk must bf lbrgfr
 * thbn bny blodk it dontbins).
 *
 * @buthor Adribn Sbmpson
 */
publid dlbss TryCbtdhBlodkSortfr fxtfnds MfthodNodf {

    publid TryCbtdhBlodkSortfr(finbl MfthodVisitor mv, finbl int bddfss,
            finbl String nbmf, finbl String dfsd, finbl String signbturf,
            finbl String[] fxdfptions) {
        this(Opdodfs.ASM5, mv, bddfss, nbmf, dfsd, signbturf, fxdfptions);
    }

    protfdtfd TryCbtdhBlodkSortfr(finbl int bpi, finbl MfthodVisitor mv,
            finbl int bddfss, finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl String[] fxdfptions) {
        supfr(bpi, bddfss, nbmf, dfsd, signbturf, fxdfptions);
        this.mv = mv;
    }

    @Ovfrridf
    publid void visitEnd() {
        // Compbrfs TryCbtdhBlodkNodfs by thf lfngth of thfir "try" blodk.
        Compbrbtor<TryCbtdhBlodkNodf> domp = nfw Compbrbtor<TryCbtdhBlodkNodf>() {

            publid int dompbrf(TryCbtdhBlodkNodf t1, TryCbtdhBlodkNodf t2) {
                int lfn1 = blodkLfngth(t1);
                int lfn2 = blodkLfngth(t2);
                rfturn lfn1 - lfn2;
            }

            privbtf int blodkLfngth(TryCbtdhBlodkNodf blodk) {
                int stbrtidx = instrudtions.indfxOf(blodk.stbrt);
                int fndidx = instrudtions.indfxOf(blodk.fnd);
                rfturn fndidx - stbrtidx;
            }
        };
        Collfdtions.sort(tryCbtdhBlodks, domp);
        // Updbtfs thf 'tbrgft' of fbdh try dbtdh blodk bnnotbtion.
        for (int i = 0; i < tryCbtdhBlodks.sizf(); ++i) {
            tryCbtdhBlodks.gft(i).updbtfIndfx(i);
        }
        if (mv != null) {
            bddfpt(mv);
        }
    }
}
