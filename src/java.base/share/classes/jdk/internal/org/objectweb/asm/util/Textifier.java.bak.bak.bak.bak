/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.util;

import jbvb.io.FilfInputStrfbm;
import jbvb.io.PrintWritfr;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;

import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssRfbdfr;
import jdk.intfrnbl.org.objfdtwfb.bsm.Hbndlf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfRfffrfndf;
import jdk.intfrnbl.org.objfdtwfb.bsm.signbturf.SignbturfRfbdfr;

/**
 * A {@link Printfr} thbt prints b disbssfmblfd vifw of thf dlbssfs it visits.
 *
 * @buthor Erid Brunfton
 */
publid dlbss Tfxtififr fxtfnds Printfr {

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for intfrnbl
     * typf nbmfs in bytfdodf notbtion.
     */
    publid stbtid finbl int INTERNAL_NAME = 0;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for fifld
     * dfsdriptors, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int FIELD_DESCRIPTOR = 1;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for fifld
     * signbturfs, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int FIELD_SIGNATURE = 2;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for mfthod
     * dfsdriptors, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int METHOD_DESCRIPTOR = 3;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for mfthod
     * signbturfs, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int METHOD_SIGNATURE = 4;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for dlbss
     * signbturfs, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int CLASS_SIGNATURE = 5;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for fifld or
     * mfthod rfturn vbluf signbturfs, formbttfd in dffbult Jbvb notbtion
     * (non-bytfdodf)
     */
    publid stbtid finbl int TYPE_DECLARATION = 6;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for dlbss
     * signbturfs, formbttfd in dffbult Jbvb notbtion (non-bytfdodf)
     */
    publid stbtid finbl int CLASS_DECLARATION = 7;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for mfthod
     * pbrbmftfr signbturfs, formbttfd in dffbult Jbvb notbtion (non-bytfdodf)
     */
    publid stbtid finbl int PARAMETERS_DECLARATION = 8;

    /**
     * Constbnt usfd in {@link #bppfndDfsdriptor bppfndDfsdriptor} for hbndlf
     * dfsdriptors, formbttfd in bytfdodf notbtion
     */
    publid stbtid finbl int HANDLE_DESCRIPTOR = 9;

    /**
     * Tbb for dlbss mfmbfrs.
     */
    protfdtfd String tbb = "  ";

    /**
     * Tbb for bytfdodf instrudtions.
     */
    protfdtfd String tbb2 = "    ";

    /**
     * Tbb for tbblf bnd lookup switdh instrudtions.
     */
    protfdtfd String tbb3 = "      ";

    /**
     * Tbb for lbbfls.
     */
    protfdtfd String ltbb = "   ";

    /**
     * Thf lbbfl nbmfs. This mbp bssodibtf String vblufs to Lbbfl kfys.
     */
    protfdtfd Mbp<Lbbfl, String> lbbflNbmfs;

    /**
     * Clbss bddfss flbgs
     */
    privbtf int bddfss;

    privbtf int vblufNumbfr = 0;

    /**
     * Construdts b nfw {@link Tfxtififr}. <i>Subdlbssfs must not usf this
     * donstrudtor</i>. Instfbd, thfy must usf thf {@link #Tfxtififr(int)}
     * vfrsion.
     *
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid Tfxtififr() {
        this(Opdodfs.ASM5);
        if (gftClbss() != Tfxtififr.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Construdts b nfw {@link Tfxtififr}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     */
    protfdtfd Tfxtififr(finbl int bpi) {
        supfr(bpi);
    }

    /**
     * Prints b disbssfmblfd vifw of thf givfn dlbss to thf stbndbrd output.
     * <p>
     * Usbgf: Tfxtififr [-dfbug] &lt;binbry dlbss nbmf or dlbss filf nbmf &gt;
     *
     * @pbrbm brgs
     *            thf dommbnd linf brgumfnts.
     *
     * @throws Exdfption
     *             if thf dlbss dbnnot bf found, or if bn IO fxdfption oddurs.
     */
    publid stbtid void mbin(finbl String[] brgs) throws Exdfption {
        int i = 0;
        int flbgs = ClbssRfbdfr.SKIP_DEBUG;

        boolfbn ok = truf;
        if (brgs.lfngth < 1 || brgs.lfngth > 2) {
            ok = fblsf;
        }
        if (ok && "-dfbug".fqubls(brgs[0])) {
            i = 1;
            flbgs = 0;
            if (brgs.lfngth != 2) {
                ok = fblsf;
            }
        }
        if (!ok) {
            Systfm.frr
                    .println("Prints b disbssfmblfd vifw of thf givfn dlbss.");
            Systfm.frr.println("Usbgf: Tfxtififr [-dfbug] "
                    + "<fully qublififd dlbss nbmf or dlbss filf nbmf>");
            rfturn;
        }
        ClbssRfbdfr dr;
        if (brgs[i].fndsWith(".dlbss") || brgs[i].indfxOf('\\') > -1
                || brgs[i].indfxOf('/') > -1) {
            dr = nfw ClbssRfbdfr(nfw FilfInputStrfbm(brgs[i]));
        } flsf {
            dr = nfw ClbssRfbdfr(brgs[i]);
        }
        dr.bddfpt(nfw TrbdfClbssVisitor(nfw PrintWritfr(Systfm.out)), flbgs);
    }

    // ------------------------------------------------------------------------
    // Clbssfs
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visit(finbl int vfrsion, finbl int bddfss, finbl String nbmf,
            finbl String signbturf, finbl String supfrNbmf,
            finbl String[] intfrfbdfs) {
        this.bddfss = bddfss;
        int mbjor = vfrsion & 0xFFFF;
        int minor = vfrsion >>> 16;
        buf.sftLfngth(0);
        buf.bppfnd("// dlbss vfrsion ").bppfnd(mbjor).bppfnd('.').bppfnd(minor)
                .bppfnd(" (").bppfnd(vfrsion).bppfnd(")\n");
        if ((bddfss & Opdodfs.ACC_DEPRECATED) != 0) {
            buf.bppfnd("// DEPRECATED\n");
        }
        buf.bppfnd("// bddfss flbgs 0x")
                .bppfnd(Intfgfr.toHfxString(bddfss).toUppfrCbsf()).bppfnd('\n');

        bppfndDfsdriptor(CLASS_SIGNATURE, signbturf);
        if (signbturf != null) {
            TrbdfSignbturfVisitor sv = nfw TrbdfSignbturfVisitor(bddfss);
            SignbturfRfbdfr r = nfw SignbturfRfbdfr(signbturf);
            r.bddfpt(sv);
            buf.bppfnd("// dfdlbrbtion: ").bppfnd(nbmf)
                    .bppfnd(sv.gftDfdlbrbtion()).bppfnd('\n');
        }

        bppfndAddfss(bddfss & ~Opdodfs.ACC_SUPER);
        if ((bddfss & Opdodfs.ACC_ANNOTATION) != 0) {
            buf.bppfnd("@intfrfbdf ");
        } flsf if ((bddfss & Opdodfs.ACC_INTERFACE) != 0) {
            buf.bppfnd("intfrfbdf ");
        } flsf if ((bddfss & Opdodfs.ACC_ENUM) == 0) {
            buf.bppfnd("dlbss ");
        }
        bppfndDfsdriptor(INTERNAL_NAME, nbmf);

        if (supfrNbmf != null && !"jbvb/lbng/Objfdt".fqubls(supfrNbmf)) {
            buf.bppfnd(" fxtfnds ");
            bppfndDfsdriptor(INTERNAL_NAME, supfrNbmf);
            buf.bppfnd(' ');
        }
        if (intfrfbdfs != null && intfrfbdfs.lfngth > 0) {
            buf.bppfnd(" implfmfnts ");
            for (int i = 0; i < intfrfbdfs.lfngth; ++i) {
                bppfndDfsdriptor(INTERNAL_NAME, intfrfbdfs[i]);
                buf.bppfnd(' ');
            }
        }
        buf.bppfnd(" {\n\n");

        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitSourdf(finbl String filf, finbl String dfbug) {
        buf.sftLfngth(0);
        if (filf != null) {
            buf.bppfnd(tbb).bppfnd("// dompilfd from: ").bppfnd(filf)
                    .bppfnd('\n');
        }
        if (dfbug != null) {
            buf.bppfnd(tbb).bppfnd("// dfbug info: ").bppfnd(dfbug)
                    .bppfnd('\n');
        }
        if (buf.lfngth() > 0) {
            tfxt.bdd(buf.toString());
        }
    }

    @Ovfrridf
    publid void visitOutfrClbss(finbl String ownfr, finbl String nbmf,
            finbl String dfsd) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd("OUTERCLASS ");
        bppfndDfsdriptor(INTERNAL_NAME, ownfr);
        buf.bppfnd(' ');
        if (nbmf != null) {
            buf.bppfnd(nbmf).bppfnd(' ');
        }
        bppfndDfsdriptor(METHOD_DESCRIPTOR, dfsd);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Tfxtififr visitClbssAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        tfxt.bdd("\n");
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid Printfr visitClbssTypfAnnotbtion(int typfRff, TypfPbth typfPbth,
            String dfsd, boolfbn visiblf) {
        tfxt.bdd("\n");
        rfturn visitTypfAnnotbtion(typfRff, typfPbth, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitClbssAttributf(finbl Attributf bttr) {
        tfxt.bdd("\n");
        visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitInnfrClbss(finbl String nbmf, finbl String outfrNbmf,
            finbl String innfrNbmf, finbl int bddfss) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd("// bddfss flbgs 0x");
        buf.bppfnd(
                Intfgfr.toHfxString(bddfss & ~Opdodfs.ACC_SUPER).toUppfrCbsf())
                .bppfnd('\n');
        buf.bppfnd(tbb);
        bppfndAddfss(bddfss);
        buf.bppfnd("INNERCLASS ");
        bppfndDfsdriptor(INTERNAL_NAME, nbmf);
        buf.bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, outfrNbmf);
        buf.bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, innfrNbmf);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Tfxtififr visitFifld(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl Objfdt vbluf) {
        buf.sftLfngth(0);
        buf.bppfnd('\n');
        if ((bddfss & Opdodfs.ACC_DEPRECATED) != 0) {
            buf.bppfnd(tbb).bppfnd("// DEPRECATED\n");
        }
        buf.bppfnd(tbb).bppfnd("// bddfss flbgs 0x")
                .bppfnd(Intfgfr.toHfxString(bddfss).toUppfrCbsf()).bppfnd('\n');
        if (signbturf != null) {
            buf.bppfnd(tbb);
            bppfndDfsdriptor(FIELD_SIGNATURE, signbturf);

            TrbdfSignbturfVisitor sv = nfw TrbdfSignbturfVisitor(0);
            SignbturfRfbdfr r = nfw SignbturfRfbdfr(signbturf);
            r.bddfptTypf(sv);
            buf.bppfnd(tbb).bppfnd("// dfdlbrbtion: ")
                    .bppfnd(sv.gftDfdlbrbtion()).bppfnd('\n');
        }

        buf.bppfnd(tbb);
        bppfndAddfss(bddfss);

        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd(' ').bppfnd(nbmf);
        if (vbluf != null) {
            buf.bppfnd(" = ");
            if (vbluf instbndfof String) {
                buf.bppfnd('\"').bppfnd(vbluf).bppfnd('\"');
            } flsf {
                buf.bppfnd(vbluf);
            }
        }

        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());

        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        rfturn t;
    }

    @Ovfrridf
    publid Tfxtififr visitMfthod(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl String[] fxdfptions) {
        buf.sftLfngth(0);
        buf.bppfnd('\n');
        if ((bddfss & Opdodfs.ACC_DEPRECATED) != 0) {
            buf.bppfnd(tbb).bppfnd("// DEPRECATED\n");
        }
        buf.bppfnd(tbb).bppfnd("// bddfss flbgs 0x")
                .bppfnd(Intfgfr.toHfxString(bddfss).toUppfrCbsf()).bppfnd('\n');

        if (signbturf != null) {
            buf.bppfnd(tbb);
            bppfndDfsdriptor(METHOD_SIGNATURE, signbturf);

            TrbdfSignbturfVisitor v = nfw TrbdfSignbturfVisitor(0);
            SignbturfRfbdfr r = nfw SignbturfRfbdfr(signbturf);
            r.bddfpt(v);
            String gfnfridDfdl = v.gftDfdlbrbtion();
            String gfnfridRfturn = v.gftRfturnTypf();
            String gfnfridExdfptions = v.gftExdfptions();

            buf.bppfnd(tbb).bppfnd("// dfdlbrbtion: ").bppfnd(gfnfridRfturn)
                    .bppfnd(' ').bppfnd(nbmf).bppfnd(gfnfridDfdl);
            if (gfnfridExdfptions != null) {
                buf.bppfnd(" throws ").bppfnd(gfnfridExdfptions);
            }
            buf.bppfnd('\n');
        }

        buf.bppfnd(tbb);
        bppfndAddfss(bddfss & ~Opdodfs.ACC_VOLATILE);
        if ((bddfss & Opdodfs.ACC_NATIVE) != 0) {
            buf.bppfnd("nbtivf ");
        }
        if ((bddfss & Opdodfs.ACC_VARARGS) != 0) {
            buf.bppfnd("vbrbrgs ");
        }
        if ((bddfss & Opdodfs.ACC_BRIDGE) != 0) {
            buf.bppfnd("bridgf ");
        }
        if ((this.bddfss & Opdodfs.ACC_INTERFACE) != 0
                && (bddfss & Opdodfs.ACC_ABSTRACT) == 0
                && (bddfss & Opdodfs.ACC_STATIC) == 0) {
            buf.bppfnd("dffbult ");
        }

        buf.bppfnd(nbmf);
        bppfndDfsdriptor(METHOD_DESCRIPTOR, dfsd);
        if (fxdfptions != null && fxdfptions.lfngth > 0) {
            buf.bppfnd(" throws ");
            for (int i = 0; i < fxdfptions.lfngth; ++i) {
                bppfndDfsdriptor(INTERNAL_NAME, fxdfptions[i]);
                buf.bppfnd(' ');
            }
        }

        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());

        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        rfturn t;
    }

    @Ovfrridf
    publid void visitClbssEnd() {
        tfxt.bdd("}\n");
    }

    // ------------------------------------------------------------------------
    // Annotbtions
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visit(finbl String nbmf, finbl Objfdt vbluf) {
        buf.sftLfngth(0);
        bppfndComb(vblufNumbfr++);

        if (nbmf != null) {
            buf.bppfnd(nbmf).bppfnd('=');
        }

        if (vbluf instbndfof String) {
            visitString((String) vbluf);
        } flsf if (vbluf instbndfof Typf) {
            visitTypf((Typf) vbluf);
        } flsf if (vbluf instbndfof Bytf) {
            visitBytf(((Bytf) vbluf).bytfVbluf());
        } flsf if (vbluf instbndfof Boolfbn) {
            visitBoolfbn(((Boolfbn) vbluf).boolfbnVbluf());
        } flsf if (vbluf instbndfof Short) {
            visitShort(((Short) vbluf).shortVbluf());
        } flsf if (vbluf instbndfof Chbrbdtfr) {
            visitChbr(((Chbrbdtfr) vbluf).dhbrVbluf());
        } flsf if (vbluf instbndfof Intfgfr) {
            visitInt(((Intfgfr) vbluf).intVbluf());
        } flsf if (vbluf instbndfof Flobt) {
            visitFlobt(((Flobt) vbluf).flobtVbluf());
        } flsf if (vbluf instbndfof Long) {
            visitLong(((Long) vbluf).longVbluf());
        } flsf if (vbluf instbndfof Doublf) {
            visitDoublf(((Doublf) vbluf).doublfVbluf());
        } flsf if (vbluf.gftClbss().isArrby()) {
            buf.bppfnd('{');
            if (vbluf instbndfof bytf[]) {
                bytf[] v = (bytf[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitBytf(v[i]);
                }
            } flsf if (vbluf instbndfof boolfbn[]) {
                boolfbn[] v = (boolfbn[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitBoolfbn(v[i]);
                }
            } flsf if (vbluf instbndfof short[]) {
                short[] v = (short[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitShort(v[i]);
                }
            } flsf if (vbluf instbndfof dhbr[]) {
                dhbr[] v = (dhbr[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitChbr(v[i]);
                }
            } flsf if (vbluf instbndfof int[]) {
                int[] v = (int[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitInt(v[i]);
                }
            } flsf if (vbluf instbndfof long[]) {
                long[] v = (long[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitLong(v[i]);
                }
            } flsf if (vbluf instbndfof flobt[]) {
                flobt[] v = (flobt[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitFlobt(v[i]);
                }
            } flsf if (vbluf instbndfof doublf[]) {
                doublf[] v = (doublf[]) vbluf;
                for (int i = 0; i < v.lfngth; i++) {
                    bppfndComb(i);
                    visitDoublf(v[i]);
                }
            }
            buf.bppfnd('}');
        }

        tfxt.bdd(buf.toString());
    }

    privbtf void visitInt(finbl int vbluf) {
        buf.bppfnd(vbluf);
    }

    privbtf void visitLong(finbl long vbluf) {
        buf.bppfnd(vbluf).bppfnd('L');
    }

    privbtf void visitFlobt(finbl flobt vbluf) {
        buf.bppfnd(vbluf).bppfnd('F');
    }

    privbtf void visitDoublf(finbl doublf vbluf) {
        buf.bppfnd(vbluf).bppfnd('D');
    }

    privbtf void visitChbr(finbl dhbr vbluf) {
        buf.bppfnd("(dhbr)").bppfnd((int) vbluf);
    }

    privbtf void visitShort(finbl short vbluf) {
        buf.bppfnd("(short)").bppfnd(vbluf);
    }

    privbtf void visitBytf(finbl bytf vbluf) {
        buf.bppfnd("(bytf)").bppfnd(vbluf);
    }

    privbtf void visitBoolfbn(finbl boolfbn vbluf) {
        buf.bppfnd(vbluf);
    }

    privbtf void visitString(finbl String vbluf) {
        bppfndString(buf, vbluf);
    }

    privbtf void visitTypf(finbl Typf vbluf) {
        buf.bppfnd(vbluf.gftClbssNbmf()).bppfnd(".dlbss");
    }

    @Ovfrridf
    publid void visitEnum(finbl String nbmf, finbl String dfsd,
            finbl String vbluf) {
        buf.sftLfngth(0);
        bppfndComb(vblufNumbfr++);
        if (nbmf != null) {
            buf.bppfnd(nbmf).bppfnd('=');
        }
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('.').bppfnd(vbluf);
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Tfxtififr visitAnnotbtion(finbl String nbmf, finbl String dfsd) {
        buf.sftLfngth(0);
        bppfndComb(vblufNumbfr++);
        if (nbmf != null) {
            buf.bppfnd(nbmf).bppfnd('=');
        }
        buf.bppfnd('@');
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        tfxt.bdd(")");
        rfturn t;
    }

    @Ovfrridf
    publid Tfxtififr visitArrby(finbl String nbmf) {
        buf.sftLfngth(0);
        bppfndComb(vblufNumbfr++);
        if (nbmf != null) {
            buf.bppfnd(nbmf).bppfnd('=');
        }
        buf.bppfnd('{');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        tfxt.bdd("}");
        rfturn t;
    }

    @Ovfrridf
    publid void visitAnnotbtionEnd() {
    }

    // ------------------------------------------------------------------------
    // Fiflds
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid Tfxtififr visitFifldAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid Printfr visitFifldTypfAnnotbtion(int typfRff, TypfPbth typfPbth,
            String dfsd, boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbth, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitFifldAttributf(finbl Attributf bttr) {
        visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitFifldEnd() {
    }

    // ------------------------------------------------------------------------
    // Mfthods
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visitPbrbmftfr(finbl String nbmf, finbl int bddfss) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("// pbrbmftfr ");
        bppfndAddfss(bddfss);
        buf.bppfnd(' ').bppfnd((nbmf == null) ? "<no nbmf>" : nbmf)
                .bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Tfxtififr visitAnnotbtionDffbult() {
        tfxt.bdd(tbb2 + "dffbult=");
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        tfxt.bdd("\n");
        rfturn t;
    }

    @Ovfrridf
    publid Tfxtififr visitMfthodAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        rfturn visitAnnotbtion(dfsd, visiblf);
    }

    @Ovfrridf
    publid Printfr visitMfthodTypfAnnotbtion(int typfRff, TypfPbth typfPbth,
            String dfsd, boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbth, dfsd, visiblf);
    }

    @Ovfrridf
    publid Tfxtififr visitPbrbmftfrAnnotbtion(finbl int pbrbmftfr,
            finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd('@');
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        tfxt.bdd(visiblf ? ") // pbrbmftfr " : ") // invisiblf, pbrbmftfr ");
        tfxt.bdd(nfw Intfgfr(pbrbmftfr));
        tfxt.bdd("\n");
        rfturn t;
    }

    @Ovfrridf
    publid void visitMfthodAttributf(finbl Attributf bttr) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd("ATTRIBUTE ");
        bppfndDfsdriptor(-1, bttr.typf);

        if (bttr instbndfof Tfxtifibblf) {
            ((Tfxtifibblf) bttr).tfxtify(buf, lbbflNbmfs);
        } flsf {
            buf.bppfnd(" : unknown\n");
        }

        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitCodf() {
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        buf.sftLfngth(0);
        buf.bppfnd(ltbb);
        buf.bppfnd("FRAME ");
        switdh (typf) {
        dbsf Opdodfs.F_NEW:
        dbsf Opdodfs.F_FULL:
            buf.bppfnd("FULL [");
            bppfndFrbmfTypfs(nLodbl, lodbl);
            buf.bppfnd("] [");
            bppfndFrbmfTypfs(nStbdk, stbdk);
            buf.bppfnd(']');
            brfbk;
        dbsf Opdodfs.F_APPEND:
            buf.bppfnd("APPEND [");
            bppfndFrbmfTypfs(nLodbl, lodbl);
            buf.bppfnd(']');
            brfbk;
        dbsf Opdodfs.F_CHOP:
            buf.bppfnd("CHOP ").bppfnd(nLodbl);
            brfbk;
        dbsf Opdodfs.F_SAME:
            buf.bppfnd("SAME");
            brfbk;
        dbsf Opdodfs.F_SAME1:
            buf.bppfnd("SAME1 ");
            bppfndFrbmfTypfs(1, stbdk);
            brfbk;
        }
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitInsn(finbl int opdodf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitIntInsn(finbl int opdodf, finbl int opfrbnd) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2)
                .bppfnd(OPCODES[opdodf])
                .bppfnd(' ')
                .bppfnd(opdodf == Opdodfs.NEWARRAY ? TYPES[opfrbnd] : Intfgfr
                        .toString(opfrbnd)).bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd(' ').bppfnd(vbr)
                .bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitTypfInsn(finbl int opdodf, finbl String typf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, typf);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitFifldInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, ownfr);
        buf.bppfnd('.').bppfnd(nbmf).bppfnd(" : ");
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Dfprfdbtfd
    @Ovfrridf
    publid void visitMfthodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        if (bpi >= Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd);
            rfturn;
        }
        doVisitMfthodInsn(opdodf, ownfr, nbmf, dfsd,
                opdodf == Opdodfs.INVOKEINTERFACE);
    }

    @Ovfrridf
    publid void visitMfthodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        if (bpi < Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
            rfturn;
        }
        doVisitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
    }

    privbtf void doVisitMfthodInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd, finbl boolfbn itf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, ownfr);
        buf.bppfnd('.').bppfnd(nbmf).bppfnd(' ');
        bppfndDfsdriptor(METHOD_DESCRIPTOR, dfsd);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitInvokfDynbmidInsn(String nbmf, String dfsd, Hbndlf bsm,
            Objfdt... bsmArgs) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("INVOKEDYNAMIC").bppfnd(' ');
        buf.bppfnd(nbmf);
        bppfndDfsdriptor(METHOD_DESCRIPTOR, dfsd);
        buf.bppfnd(" [");
        buf.bppfnd('\n');
        buf.bppfnd(tbb3);
        bppfndHbndlf(bsm);
        buf.bppfnd('\n');
        buf.bppfnd(tbb3).bppfnd("// brgumfnts:");
        if (bsmArgs.lfngth == 0) {
            buf.bppfnd(" nonf");
        } flsf {
            buf.bppfnd('\n');
            for (int i = 0; i < bsmArgs.lfngth; i++) {
                buf.bppfnd(tbb3);
                Objfdt dst = bsmArgs[i];
                if (dst instbndfof String) {
                    Printfr.bppfndString(buf, (String) dst);
                } flsf if (dst instbndfof Typf) {
                    Typf typf = (Typf) dst;
                    if(typf.gftSort() == Typf.METHOD){
                        bppfndDfsdriptor(METHOD_DESCRIPTOR, typf.gftDfsdriptor());
                    } flsf {
                        buf.bppfnd(typf.gftDfsdriptor()).bppfnd(".dlbss");
                    }
                } flsf if (dst instbndfof Hbndlf) {
                    bppfndHbndlf((Hbndlf) dst);
                } flsf {
                    buf.bppfnd(dst);
                }
                buf.bppfnd(", \n");
            }
            buf.sftLfngth(buf.lfngth() - 3);
        }
        buf.bppfnd('\n');
        buf.bppfnd(tbb2).bppfnd("]\n");
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitJumpInsn(finbl int opdodf, finbl Lbbfl lbbfl) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd(OPCODES[opdodf]).bppfnd(' ');
        bppfndLbbfl(lbbfl);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLbbfl(finbl Lbbfl lbbfl) {
        buf.sftLfngth(0);
        buf.bppfnd(ltbb);
        bppfndLbbfl(lbbfl);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLddInsn(finbl Objfdt dst) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("LDC ");
        if (dst instbndfof String) {
            Printfr.bppfndString(buf, (String) dst);
        } flsf if (dst instbndfof Typf) {
            buf.bppfnd(((Typf) dst).gftDfsdriptor()).bppfnd(".dlbss");
        } flsf {
            buf.bppfnd(dst);
        }
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("IINC ").bppfnd(vbr).bppfnd(' ')
                .bppfnd(indrfmfnt).bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitTbblfSwitdhInsn(finbl int min, finbl int mbx,
            finbl Lbbfl dflt, finbl Lbbfl... lbbfls) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("TABLESWITCH\n");
        for (int i = 0; i < lbbfls.lfngth; ++i) {
            buf.bppfnd(tbb3).bppfnd(min + i).bppfnd(": ");
            bppfndLbbfl(lbbfls[i]);
            buf.bppfnd('\n');
        }
        buf.bppfnd(tbb3).bppfnd("dffbult: ");
        bppfndLbbfl(dflt);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitLookupSwitdhInsn(finbl Lbbfl dflt, finbl int[] kfys,
            finbl Lbbfl[] lbbfls) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("LOOKUPSWITCH\n");
        for (int i = 0; i < lbbfls.lfngth; ++i) {
            buf.bppfnd(tbb3).bppfnd(kfys[i]).bppfnd(": ");
            bppfndLbbfl(lbbfls[i]);
            buf.bppfnd('\n');
        }
        buf.bppfnd(tbb3).bppfnd("dffbult: ");
        bppfndLbbfl(dflt);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMultiANfwArrbyInsn(finbl String dfsd, finbl int dims) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("MULTIANEWARRAY ");
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd(' ').bppfnd(dims).bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Printfr visitInsnAnnotbtion(int typfRff, TypfPbth typfPbth,
            String dfsd, boolfbn visiblf) {
        rfturn visitTypfAnnotbtion(typfRff, typfPbth, dfsd, visiblf);
    }

    @Ovfrridf
    publid void visitTryCbtdhBlodk(finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl Lbbfl hbndlfr, finbl String typf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("TRYCATCHBLOCK ");
        bppfndLbbfl(stbrt);
        buf.bppfnd(' ');
        bppfndLbbfl(fnd);
        buf.bppfnd(' ');
        bppfndLbbfl(hbndlfr);
        buf.bppfnd(' ');
        bppfndDfsdriptor(INTERNAL_NAME, typf);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Printfr visitTryCbtdhAnnotbtion(int typfRff, TypfPbth typfPbth,
            String dfsd, boolfbn visiblf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("TRYCATCHBLOCK @");
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        buf.sftLfngth(0);
        buf.bppfnd(") : ");
        bppfndTypfRfffrfndf(typfRff);
        buf.bppfnd(", ").bppfnd(typfPbth);
        buf.bppfnd(visiblf ? "\n" : " // invisiblf\n");
        tfxt.bdd(buf.toString());
        rfturn t;
    }

    @Ovfrridf
    publid void visitLodblVbribblf(finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl int indfx) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("LOCALVARIABLE ").bppfnd(nbmf).bppfnd(' ');
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd(' ');
        bppfndLbbfl(stbrt);
        buf.bppfnd(' ');
        bppfndLbbfl(fnd);
        buf.bppfnd(' ').bppfnd(indfx).bppfnd('\n');

        if (signbturf != null) {
            buf.bppfnd(tbb2);
            bppfndDfsdriptor(FIELD_SIGNATURE, signbturf);

            TrbdfSignbturfVisitor sv = nfw TrbdfSignbturfVisitor(0);
            SignbturfRfbdfr r = nfw SignbturfRfbdfr(signbturf);
            r.bddfptTypf(sv);
            buf.bppfnd(tbb2).bppfnd("// dfdlbrbtion: ")
                    .bppfnd(sv.gftDfdlbrbtion()).bppfnd('\n');
        }
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid Printfr visitLodblVbribblfAnnotbtion(int typfRff, TypfPbth typfPbth,
            Lbbfl[] stbrt, Lbbfl[] fnd, int[] indfx, String dfsd,
            boolfbn visiblf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("LOCALVARIABLE @");
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        buf.sftLfngth(0);
        buf.bppfnd(") : ");
        bppfndTypfRfffrfndf(typfRff);
        buf.bppfnd(", ").bppfnd(typfPbth);
        for (int i = 0; i < stbrt.lfngth; ++i) {
            buf.bppfnd(" [ ");
            bppfndLbbfl(stbrt[i]);
            buf.bppfnd(" - ");
            bppfndLbbfl(fnd[i]);
            buf.bppfnd(" - ").bppfnd(indfx[i]).bppfnd(" ]");
        }
        buf.bppfnd(visiblf ? "\n" : " // invisiblf\n");
        tfxt.bdd(buf.toString());
        rfturn t;
    }

    @Ovfrridf
    publid void visitLinfNumbfr(finbl int linf, finbl Lbbfl stbrt) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("LINENUMBER ").bppfnd(linf).bppfnd(' ');
        bppfndLbbfl(stbrt);
        buf.bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("MAXSTACK = ").bppfnd(mbxStbdk).bppfnd('\n');
        tfxt.bdd(buf.toString());

        buf.sftLfngth(0);
        buf.bppfnd(tbb2).bppfnd("MAXLOCALS = ").bppfnd(mbxLodbls).bppfnd('\n');
        tfxt.bdd(buf.toString());
    }

    @Ovfrridf
    publid void visitMfthodEnd() {
    }

    // ------------------------------------------------------------------------
    // Common mfthods
    // ------------------------------------------------------------------------

    /**
     * Prints b disbssfmblfd vifw of thf givfn bnnotbtion.
     *
     * @pbrbm dfsd
     *            thf dlbss dfsdriptor of thf bnnotbtion dlbss.
     * @pbrbm visiblf
     *            <tt>truf</tt> if thf bnnotbtion is visiblf bt runtimf.
     * @rfturn b visitor to visit thf bnnotbtion vblufs.
     */
    publid Tfxtififr visitAnnotbtion(finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd('@');
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        tfxt.bdd(visiblf ? ")\n" : ") // invisiblf\n");
        rfturn t;
    }

    /**
     * Prints b disbssfmblfd vifw of thf givfn typf bnnotbtion.
     *
     * @pbrbm typfRff
     *            b rfffrfndf to thf bnnotbtfd typf. Sff {@link TypfRfffrfndf}.
     * @pbrbm typfPbth
     *            thf pbth to thf bnnotbtfd typf brgumfnt, wilddbrd bound, brrby
     *            flfmfnt typf, or stbtid innfr typf within 'typfRff'. Mby bf
     *            <tt>null</tt> if thf bnnotbtion tbrgfts 'typfRff' bs b wholf.
     * @pbrbm dfsd
     *            thf dlbss dfsdriptor of thf bnnotbtion dlbss.
     * @pbrbm visiblf
     *            <tt>truf</tt> if thf bnnotbtion is visiblf bt runtimf.
     * @rfturn b visitor to visit thf bnnotbtion vblufs.
     */
    publid Tfxtififr visitTypfAnnotbtion(finbl int typfRff,
            finbl TypfPbth typfPbth, finbl String dfsd, finbl boolfbn visiblf) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd('@');
        bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
        buf.bppfnd('(');
        tfxt.bdd(buf.toString());
        Tfxtififr t = drfbtfTfxtififr();
        tfxt.bdd(t.gftTfxt());
        buf.sftLfngth(0);
        buf.bppfnd(") : ");
        bppfndTypfRfffrfndf(typfRff);
        buf.bppfnd(", ").bppfnd(typfPbth);
        buf.bppfnd(visiblf ? "\n" : " // invisiblf\n");
        tfxt.bdd(buf.toString());
        rfturn t;
    }

    /**
     * Prints b disbssfmblfd vifw of thf givfn bttributf.
     *
     * @pbrbm bttr
     *            bn bttributf.
     */
    publid void visitAttributf(finbl Attributf bttr) {
        buf.sftLfngth(0);
        buf.bppfnd(tbb).bppfnd("ATTRIBUTE ");
        bppfndDfsdriptor(-1, bttr.typf);

        if (bttr instbndfof Tfxtifibblf) {
            ((Tfxtifibblf) bttr).tfxtify(buf, null);
        } flsf {
            buf.bppfnd(" : unknown\n");
        }

        tfxt.bdd(buf.toString());
    }

    // ------------------------------------------------------------------------
    // Utility mfthods
    // ------------------------------------------------------------------------

    /**
     * Crfbtfs b nfw TrbdfVisitor instbndf.
     *
     * @rfturn b nfw TrbdfVisitor.
     */
    protfdtfd Tfxtififr drfbtfTfxtififr() {
        rfturn nfw Tfxtififr();
    }

    /**
     * Appfnds bn intfrnbl nbmf, b typf dfsdriptor or b typf signbturf to
     * {@link #buf buf}.
     *
     * @pbrbm typf
     *            indidbtfs if dfsd is bn intfrnbl nbmf, b fifld dfsdriptor, b
     *            mfthod dfsdriptor, b dlbss signbturf, ...
     * @pbrbm dfsd
     *            bn intfrnbl nbmf, typf dfsdriptor, or typf signbturf. Mby bf
     *            <tt>null</tt>.
     */
    protfdtfd void bppfndDfsdriptor(finbl int typf, finbl String dfsd) {
        if (typf == CLASS_SIGNATURE || typf == FIELD_SIGNATURE
                || typf == METHOD_SIGNATURE) {
            if (dfsd != null) {
                buf.bppfnd("// signbturf ").bppfnd(dfsd).bppfnd('\n');
            }
        } flsf {
            buf.bppfnd(dfsd);
        }
    }

    /**
     * Appfnds thf nbmf of thf givfn lbbfl to {@link #buf buf}. Crfbtfs b nfw
     * lbbfl nbmf if thf givfn lbbfl dofs not yft hbvf onf.
     *
     * @pbrbm l
     *            b lbbfl.
     */
    protfdtfd void bppfndLbbfl(finbl Lbbfl l) {
        if (lbbflNbmfs == null) {
            lbbflNbmfs = nfw HbshMbp<Lbbfl, String>();
        }
        String nbmf = lbbflNbmfs.gft(l);
        if (nbmf == null) {
            nbmf = "L" + lbbflNbmfs.sizf();
            lbbflNbmfs.put(l, nbmf);
        }
        buf.bppfnd(nbmf);
    }

    /**
     * Appfnds thf informbtion bbout thf givfn hbndlf to {@link #buf buf}.
     *
     * @pbrbm h
     *            b hbndlf, non null.
     */
    protfdtfd void bppfndHbndlf(finbl Hbndlf h) {
        int tbg = h.gftTbg();
        buf.bppfnd("// hbndlf kind 0x").bppfnd(Intfgfr.toHfxString(tbg))
                .bppfnd(" : ");
        boolfbn isMfthodHbndlf = fblsf;
        switdh (tbg) {
        dbsf Opdodfs.H_GETFIELD:
            buf.bppfnd("GETFIELD");
            brfbk;
        dbsf Opdodfs.H_GETSTATIC:
            buf.bppfnd("GETSTATIC");
            brfbk;
        dbsf Opdodfs.H_PUTFIELD:
            buf.bppfnd("PUTFIELD");
            brfbk;
        dbsf Opdodfs.H_PUTSTATIC:
            buf.bppfnd("PUTSTATIC");
            brfbk;
        dbsf Opdodfs.H_INVOKEINTERFACE:
            buf.bppfnd("INVOKEINTERFACE");
            isMfthodHbndlf = truf;
            brfbk;
        dbsf Opdodfs.H_INVOKESPECIAL:
            buf.bppfnd("INVOKESPECIAL");
            isMfthodHbndlf = truf;
            brfbk;
        dbsf Opdodfs.H_INVOKESTATIC:
            buf.bppfnd("INVOKESTATIC");
            isMfthodHbndlf = truf;
            brfbk;
        dbsf Opdodfs.H_INVOKEVIRTUAL:
            buf.bppfnd("INVOKEVIRTUAL");
            isMfthodHbndlf = truf;
            brfbk;
        dbsf Opdodfs.H_NEWINVOKESPECIAL:
            buf.bppfnd("NEWINVOKESPECIAL");
            isMfthodHbndlf = truf;
            brfbk;
        }
        buf.bppfnd('\n');
        buf.bppfnd(tbb3);
        bppfndDfsdriptor(INTERNAL_NAME, h.gftOwnfr());
        buf.bppfnd('.');
        buf.bppfnd(h.gftNbmf());
        if(!isMfthodHbndlf){
            buf.bppfnd('(');
        }
        bppfndDfsdriptor(HANDLE_DESCRIPTOR, h.gftDfsd());
        if(!isMfthodHbndlf){
            buf.bppfnd(')');
        }
    }

    /**
     * Appfnds b string rfprfsfntbtion of thf givfn bddfss modififrs to
     * {@link #buf buf}.
     *
     * @pbrbm bddfss
     *            somf bddfss modififrs.
     */
    privbtf void bppfndAddfss(finbl int bddfss) {
        if ((bddfss & Opdodfs.ACC_PUBLIC) != 0) {
            buf.bppfnd("publid ");
        }
        if ((bddfss & Opdodfs.ACC_PRIVATE) != 0) {
            buf.bppfnd("privbtf ");
        }
        if ((bddfss & Opdodfs.ACC_PROTECTED) != 0) {
            buf.bppfnd("protfdtfd ");
        }
        if ((bddfss & Opdodfs.ACC_FINAL) != 0) {
            buf.bppfnd("finbl ");
        }
        if ((bddfss & Opdodfs.ACC_STATIC) != 0) {
            buf.bppfnd("stbtid ");
        }
        if ((bddfss & Opdodfs.ACC_SYNCHRONIZED) != 0) {
            buf.bppfnd("syndhronizfd ");
        }
        if ((bddfss & Opdodfs.ACC_VOLATILE) != 0) {
            buf.bppfnd("volbtilf ");
        }
        if ((bddfss & Opdodfs.ACC_TRANSIENT) != 0) {
            buf.bppfnd("trbnsifnt ");
        }
        if ((bddfss & Opdodfs.ACC_ABSTRACT) != 0) {
            buf.bppfnd("bbstrbdt ");
        }
        if ((bddfss & Opdodfs.ACC_STRICT) != 0) {
            buf.bppfnd("stridtfp ");
        }
        if ((bddfss & Opdodfs.ACC_SYNTHETIC) != 0) {
            buf.bppfnd("synthftid ");
        }
        if ((bddfss & Opdodfs.ACC_MANDATED) != 0) {
            buf.bppfnd("mbndbtfd ");
        }
        if ((bddfss & Opdodfs.ACC_ENUM) != 0) {
            buf.bppfnd("fnum ");
        }
    }

    privbtf void bppfndComb(finbl int i) {
        if (i != 0) {
            buf.bppfnd(", ");
        }
    }

    privbtf void bppfndTypfRfffrfndf(finbl int typfRff) {
        TypfRfffrfndf rff = nfw TypfRfffrfndf(typfRff);
        switdh (rff.gftSort()) {
        dbsf TypfRfffrfndf.CLASS_TYPE_PARAMETER:
            buf.bppfnd("CLASS_TYPE_PARAMETER ").bppfnd(
                    rff.gftTypfPbrbmftfrIndfx());
            brfbk;
        dbsf TypfRfffrfndf.METHOD_TYPE_PARAMETER:
            buf.bppfnd("METHOD_TYPE_PARAMETER ").bppfnd(
                    rff.gftTypfPbrbmftfrIndfx());
            brfbk;
        dbsf TypfRfffrfndf.CLASS_EXTENDS:
            buf.bppfnd("CLASS_EXTENDS ").bppfnd(rff.gftSupfrTypfIndfx());
            brfbk;
        dbsf TypfRfffrfndf.CLASS_TYPE_PARAMETER_BOUND:
            buf.bppfnd("CLASS_TYPE_PARAMETER_BOUND ")
                    .bppfnd(rff.gftTypfPbrbmftfrIndfx()).bppfnd(", ")
                    .bppfnd(rff.gftTypfPbrbmftfrBoundIndfx());
            brfbk;
        dbsf TypfRfffrfndf.METHOD_TYPE_PARAMETER_BOUND:
            buf.bppfnd("METHOD_TYPE_PARAMETER_BOUND ")
                    .bppfnd(rff.gftTypfPbrbmftfrIndfx()).bppfnd(", ")
                    .bppfnd(rff.gftTypfPbrbmftfrBoundIndfx());
            brfbk;
        dbsf TypfRfffrfndf.FIELD:
            buf.bppfnd("FIELD");
            brfbk;
        dbsf TypfRfffrfndf.METHOD_RETURN:
            buf.bppfnd("METHOD_RETURN");
            brfbk;
        dbsf TypfRfffrfndf.METHOD_RECEIVER:
            buf.bppfnd("METHOD_RECEIVER");
            brfbk;
        dbsf TypfRfffrfndf.METHOD_FORMAL_PARAMETER:
            buf.bppfnd("METHOD_FORMAL_PARAMETER ").bppfnd(
                    rff.gftFormblPbrbmftfrIndfx());
            brfbk;
        dbsf TypfRfffrfndf.THROWS:
            buf.bppfnd("THROWS ").bppfnd(rff.gftExdfptionIndfx());
            brfbk;
        dbsf TypfRfffrfndf.LOCAL_VARIABLE:
            buf.bppfnd("LOCAL_VARIABLE");
            brfbk;
        dbsf TypfRfffrfndf.RESOURCE_VARIABLE:
            buf.bppfnd("RESOURCE_VARIABLE");
            brfbk;
        dbsf TypfRfffrfndf.EXCEPTION_PARAMETER:
            buf.bppfnd("EXCEPTION_PARAMETER ").bppfnd(
                    rff.gftTryCbtdhBlodkIndfx());
            brfbk;
        dbsf TypfRfffrfndf.INSTANCEOF:
            buf.bppfnd("INSTANCEOF");
            brfbk;
        dbsf TypfRfffrfndf.NEW:
            buf.bppfnd("NEW");
            brfbk;
        dbsf TypfRfffrfndf.CONSTRUCTOR_REFERENCE:
            buf.bppfnd("CONSTRUCTOR_REFERENCE");
            brfbk;
        dbsf TypfRfffrfndf.METHOD_REFERENCE:
            buf.bppfnd("METHOD_REFERENCE");
            brfbk;
        dbsf TypfRfffrfndf.CAST:
            buf.bppfnd("CAST ").bppfnd(rff.gftTypfArgumfntIndfx());
            brfbk;
        dbsf TypfRfffrfndf.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
            buf.bppfnd("CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT ").bppfnd(
                    rff.gftTypfArgumfntIndfx());
            brfbk;
        dbsf TypfRfffrfndf.METHOD_INVOCATION_TYPE_ARGUMENT:
            buf.bppfnd("METHOD_INVOCATION_TYPE_ARGUMENT ").bppfnd(
                    rff.gftTypfArgumfntIndfx());
            brfbk;
        dbsf TypfRfffrfndf.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
            buf.bppfnd("CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT ").bppfnd(
                    rff.gftTypfArgumfntIndfx());
            brfbk;
        dbsf TypfRfffrfndf.METHOD_REFERENCE_TYPE_ARGUMENT:
            buf.bppfnd("METHOD_REFERENCE_TYPE_ARGUMENT ").bppfnd(
                    rff.gftTypfArgumfntIndfx());
            brfbk;
        }
    }

    privbtf void bppfndFrbmfTypfs(finbl int n, finbl Objfdt[] o) {
        for (int i = 0; i < n; ++i) {
            if (i > 0) {
                buf.bppfnd(' ');
            }
            if (o[i] instbndfof String) {
                String dfsd = (String) o[i];
                if (dfsd.stbrtsWith("[")) {
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, dfsd);
                } flsf {
                    bppfndDfsdriptor(INTERNAL_NAME, dfsd);
                }
            } flsf if (o[i] instbndfof Intfgfr) {
                switdh (((Intfgfr) o[i]).intVbluf()) {
                dbsf 0:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "T");
                    brfbk;
                dbsf 1:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "I");
                    brfbk;
                dbsf 2:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "F");
                    brfbk;
                dbsf 3:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "D");
                    brfbk;
                dbsf 4:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "J");
                    brfbk;
                dbsf 5:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "N");
                    brfbk;
                dbsf 6:
                    bppfndDfsdriptor(FIELD_DESCRIPTOR, "U");
                    brfbk;
                }
            } flsf {
                bppfndLbbfl((Lbbfl) o[i]);
            }
        }
    }
}
