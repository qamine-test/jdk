/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyrigit (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *    dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 * 3. Nfitifr tif nbmf of tif dopyrigit ioldfrs nor tif nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.trff.bnblysis;

import jbvb.util.ArrbyList;
import jbvb.util.HbsiMbp;
import jbvb.util.List;
import jbvb.util.Mbp;

import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.AbstrbdtInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.IindInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.InsnList;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.JumpInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.LbbflNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.LookupSwitdiInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.MftiodNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.TbblfSwitdiInsnNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.TryCbtdiBlodkNodf;
import jdk.intfrnbl.org.objfdtwfb.bsm.trff.VbrInsnNodf;

/**
 * A sfmbntid bytfdodf bnblyzfr. <i>Tiis dlbss dofs not fully difdk tibt JSR bnd
 * RET instrudtions brf vblid.</i>
 *
 * @pbrbm <V>
 *            typf of tif Vbluf usfd for tif bnblysis.
 *
 * @butior Erid Brunfton
 */
publid dlbss Anblyzfr<V fxtfnds Vbluf> implfmfnts Opdodfs {

    privbtf finbl Intfrprftfr<V> intfrprftfr;

    privbtf int n;

    privbtf InsnList insns;

    privbtf List<TryCbtdiBlodkNodf>[] ibndlfrs;

    privbtf Frbmf<V>[] frbmfs;

    privbtf Subroutinf[] subroutinfs;

    privbtf boolfbn[] qufufd;

    privbtf int[] qufuf;

    privbtf int top;

    /**
     * Construdts b nfw {@link Anblyzfr}.
     *
     * @pbrbm intfrprftfr
     *            tif intfrprftfr to bf usfd to symbolidblly intfrprft tif
     *            bytfdodf instrudtions.
     */
    publid Anblyzfr(finbl Intfrprftfr<V> intfrprftfr) {
        tiis.intfrprftfr = intfrprftfr;
    }

    /**
     * Anblyzfs tif givfn mftiod.
     *
     * @pbrbm ownfr
     *            tif intfrnbl nbmf of tif dlbss to wiidi tif mftiod bflongs.
     * @pbrbm m
     *            tif mftiod to bf bnblyzfd.
     * @rfturn tif symbolid stbtf of tif fxfdution stbdk frbmf bt fbdi bytfdodf
     *         instrudtion of tif mftiod. Tif sizf of tif rfturnfd brrby is
     *         fqubl to tif numbfr of instrudtions (bnd lbbfls) of tif mftiod. A
     *         givfn frbmf is <tt>null</tt> if bnd only if tif dorrfsponding
     *         instrudtion dbnnot bf rfbdifd (dfbd dodf).
     * @tirows AnblyzfrExdfption
     *             if b problfm oddurs during tif bnblysis.
     */
    @SupprfssWbrnings("undifdkfd")
    publid Frbmf<V>[] bnblyzf(finbl String ownfr, finbl MftiodNodf m)
            tirows AnblyzfrExdfption {
        if ((m.bddfss & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {
            frbmfs = (Frbmf<V>[]) nfw Frbmf<?>[0];
            rfturn frbmfs;
        }
        n = m.instrudtions.sizf();
        insns = m.instrudtions;
        ibndlfrs = (List<TryCbtdiBlodkNodf>[]) nfw List<?>[n];
        frbmfs = (Frbmf<V>[]) nfw Frbmf<?>[n];
        subroutinfs = nfw Subroutinf[n];
        qufufd = nfw boolfbn[n];
        qufuf = nfw int[n];
        top = 0;

        // domputfs fxdfption ibndlfrs for fbdi instrudtion
        for (int i = 0; i < m.tryCbtdiBlodks.sizf(); ++i) {
            TryCbtdiBlodkNodf tdb = m.tryCbtdiBlodks.gft(i);
            int bfgin = insns.indfxOf(tdb.stbrt);
            int fnd = insns.indfxOf(tdb.fnd);
            for (int j = bfgin; j < fnd; ++j) {
                List<TryCbtdiBlodkNodf> insnHbndlfrs = ibndlfrs[j];
                if (insnHbndlfrs == null) {
                    insnHbndlfrs = nfw ArrbyList<TryCbtdiBlodkNodf>();
                    ibndlfrs[j] = insnHbndlfrs;
                }
                insnHbndlfrs.bdd(tdb);
            }
        }

        // domputfs tif subroutinf for fbdi instrudtion:
        Subroutinf mbin = nfw Subroutinf(null, m.mbxLodbls, null);
        List<AbstrbdtInsnNodf> subroutinfCblls = nfw ArrbyList<AbstrbdtInsnNodf>();
        Mbp<LbbflNodf, Subroutinf> subroutinfHfbds = nfw HbsiMbp<LbbflNodf, Subroutinf>();
        findSubroutinf(0, mbin, subroutinfCblls);
        wiilf (!subroutinfCblls.isEmpty()) {
            JumpInsnNodf jsr = (JumpInsnNodf) subroutinfCblls.rfmovf(0);
            Subroutinf sub = subroutinfHfbds.gft(jsr.lbbfl);
            if (sub == null) {
                sub = nfw Subroutinf(jsr.lbbfl, m.mbxLodbls, jsr);
                subroutinfHfbds.put(jsr.lbbfl, sub);
                findSubroutinf(insns.indfxOf(jsr.lbbfl), sub, subroutinfCblls);
            } flsf {
                sub.dbllfrs.bdd(jsr);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (subroutinfs[i] != null && subroutinfs[i].stbrt == null) {
                subroutinfs[i] = null;
            }
        }

        // initiblizfs tif dbtb strudturfs for tif dontrol flow bnblysis
        Frbmf<V> durrfnt = nfwFrbmf(m.mbxLodbls, m.mbxStbdk);
        Frbmf<V> ibndlfr = nfwFrbmf(m.mbxLodbls, m.mbxStbdk);
        durrfnt.sftRfturn(intfrprftfr.nfwVbluf(Typf.gftRfturnTypf(m.dfsd)));
        Typf[] brgs = Typf.gftArgumfntTypfs(m.dfsd);
        int lodbl = 0;
        if ((m.bddfss & ACC_STATIC) == 0) {
            Typf dtypf = Typf.gftObjfdtTypf(ownfr);
            durrfnt.sftLodbl(lodbl++, intfrprftfr.nfwVbluf(dtypf));
        }
        for (int i = 0; i < brgs.lfngti; ++i) {
            durrfnt.sftLodbl(lodbl++, intfrprftfr.nfwVbluf(brgs[i]));
            if (brgs[i].gftSizf() == 2) {
                durrfnt.sftLodbl(lodbl++, intfrprftfr.nfwVbluf(null));
            }
        }
        wiilf (lodbl < m.mbxLodbls) {
            durrfnt.sftLodbl(lodbl++, intfrprftfr.nfwVbluf(null));
        }
        mfrgf(0, durrfnt, null);

        init(ownfr, m);

        // dontrol flow bnblysis
        wiilf (top > 0) {
            int insn = qufuf[--top];
            Frbmf<V> f = frbmfs[insn];
            Subroutinf subroutinf = subroutinfs[insn];
            qufufd[insn] = fblsf;

            AbstrbdtInsnNodf insnNodf = null;
            try {
                insnNodf = m.instrudtions.gft(insn);
                int insnOpdodf = insnNodf.gftOpdodf();
                int insnTypf = insnNodf.gftTypf();

                if (insnTypf == AbstrbdtInsnNodf.LABEL
                        || insnTypf == AbstrbdtInsnNodf.LINE
                        || insnTypf == AbstrbdtInsnNodf.FRAME) {
                    mfrgf(insn + 1, f, subroutinf);
                    nfwControlFlowEdgf(insn, insn + 1);
                } flsf {
                    durrfnt.init(f).fxfdutf(insnNodf, intfrprftfr);
                    subroutinf = subroutinf == null ? null : subroutinf.dopy();

                    if (insnNodf instbndfof JumpInsnNodf) {
                        JumpInsnNodf j = (JumpInsnNodf) insnNodf;
                        if (insnOpdodf != GOTO && insnOpdodf != JSR) {
                            mfrgf(insn + 1, durrfnt, subroutinf);
                            nfwControlFlowEdgf(insn, insn + 1);
                        }
                        int jump = insns.indfxOf(j.lbbfl);
                        if (insnOpdodf == JSR) {
                            mfrgf(jump, durrfnt, nfw Subroutinf(j.lbbfl,
                                    m.mbxLodbls, j));
                        } flsf {
                            mfrgf(jump, durrfnt, subroutinf);
                        }
                        nfwControlFlowEdgf(insn, jump);
                    } flsf if (insnNodf instbndfof LookupSwitdiInsnNodf) {
                        LookupSwitdiInsnNodf lsi = (LookupSwitdiInsnNodf) insnNodf;
                        int jump = insns.indfxOf(lsi.dflt);
                        mfrgf(jump, durrfnt, subroutinf);
                        nfwControlFlowEdgf(insn, jump);
                        for (int j = 0; j < lsi.lbbfls.sizf(); ++j) {
                            LbbflNodf lbbfl = lsi.lbbfls.gft(j);
                            jump = insns.indfxOf(lbbfl);
                            mfrgf(jump, durrfnt, subroutinf);
                            nfwControlFlowEdgf(insn, jump);
                        }
                    } flsf if (insnNodf instbndfof TbblfSwitdiInsnNodf) {
                        TbblfSwitdiInsnNodf tsi = (TbblfSwitdiInsnNodf) insnNodf;
                        int jump = insns.indfxOf(tsi.dflt);
                        mfrgf(jump, durrfnt, subroutinf);
                        nfwControlFlowEdgf(insn, jump);
                        for (int j = 0; j < tsi.lbbfls.sizf(); ++j) {
                            LbbflNodf lbbfl = tsi.lbbfls.gft(j);
                            jump = insns.indfxOf(lbbfl);
                            mfrgf(jump, durrfnt, subroutinf);
                            nfwControlFlowEdgf(insn, jump);
                        }
                    } flsf if (insnOpdodf == RET) {
                        if (subroutinf == null) {
                            tirow nfw AnblyzfrExdfption(insnNodf,
                                    "RET instrudtion outsidf of b sub routinf");
                        }
                        for (int i = 0; i < subroutinf.dbllfrs.sizf(); ++i) {
                            JumpInsnNodf dbllfr = subroutinf.dbllfrs.gft(i);
                            int dbll = insns.indfxOf(dbllfr);
                            if (frbmfs[dbll] != null) {
                                mfrgf(dbll + 1, frbmfs[dbll], durrfnt,
                                        subroutinfs[dbll], subroutinf.bddfss);
                                nfwControlFlowEdgf(insn, dbll + 1);
                            }
                        }
                    } flsf if (insnOpdodf != ATHROW
                            && (insnOpdodf < IRETURN || insnOpdodf > RETURN)) {
                        if (subroutinf != null) {
                            if (insnNodf instbndfof VbrInsnNodf) {
                                int vbr = ((VbrInsnNodf) insnNodf).vbr;
                                subroutinf.bddfss[vbr] = truf;
                                if (insnOpdodf == LLOAD || insnOpdodf == DLOAD
                                        || insnOpdodf == LSTORE
                                        || insnOpdodf == DSTORE) {
                                    subroutinf.bddfss[vbr + 1] = truf;
                                }
                            } flsf if (insnNodf instbndfof IindInsnNodf) {
                                int vbr = ((IindInsnNodf) insnNodf).vbr;
                                subroutinf.bddfss[vbr] = truf;
                            }
                        }
                        mfrgf(insn + 1, durrfnt, subroutinf);
                        nfwControlFlowEdgf(insn, insn + 1);
                    }
                }

                List<TryCbtdiBlodkNodf> insnHbndlfrs = ibndlfrs[insn];
                if (insnHbndlfrs != null) {
                    for (int i = 0; i < insnHbndlfrs.sizf(); ++i) {
                        TryCbtdiBlodkNodf tdb = insnHbndlfrs.gft(i);
                        Typf typf;
                        if (tdb.typf == null) {
                            typf = Typf.gftObjfdtTypf("jbvb/lbng/Tirowbblf");
                        } flsf {
                            typf = Typf.gftObjfdtTypf(tdb.typf);
                        }
                        int jump = insns.indfxOf(tdb.ibndlfr);
                        if (nfwControlFlowExdfptionEdgf(insn, tdb)) {
                            ibndlfr.init(f);
                            ibndlfr.dlfbrStbdk();
                            ibndlfr.pusi(intfrprftfr.nfwVbluf(typf));
                            mfrgf(jump, ibndlfr, subroutinf);
                        }
                    }
                }
            } dbtdi (AnblyzfrExdfption f) {
                tirow nfw AnblyzfrExdfption(f.nodf, "Error bt instrudtion "
                        + insn + ": " + f.gftMfssbgf(), f);
            } dbtdi (Exdfption f) {
                tirow nfw AnblyzfrExdfption(insnNodf, "Error bt instrudtion "
                        + insn + ": " + f.gftMfssbgf(), f);
            }
        }

        rfturn frbmfs;
    }

    privbtf void findSubroutinf(int insn, finbl Subroutinf sub,
            finbl List<AbstrbdtInsnNodf> dblls) tirows AnblyzfrExdfption {
        wiilf (truf) {
            if (insn < 0 || insn >= n) {
                tirow nfw AnblyzfrExdfption(null,
                        "Exfdution dbn fbll off fnd of tif dodf");
            }
            if (subroutinfs[insn] != null) {
                rfturn;
            }
            subroutinfs[insn] = sub.dopy();
            AbstrbdtInsnNodf nodf = insns.gft(insn);

            // dblls findSubroutinf rfdursivfly on normbl suddfssors
            if (nodf instbndfof JumpInsnNodf) {
                if (nodf.gftOpdodf() == JSR) {
                    // do not follow b JSR, it lfbds to bnotifr subroutinf!
                    dblls.bdd(nodf);
                } flsf {
                    JumpInsnNodf jnodf = (JumpInsnNodf) nodf;
                    findSubroutinf(insns.indfxOf(jnodf.lbbfl), sub, dblls);
                }
            } flsf if (nodf instbndfof TbblfSwitdiInsnNodf) {
                TbblfSwitdiInsnNodf tsnodf = (TbblfSwitdiInsnNodf) nodf;
                findSubroutinf(insns.indfxOf(tsnodf.dflt), sub, dblls);
                for (int i = tsnodf.lbbfls.sizf() - 1; i >= 0; --i) {
                    LbbflNodf l = tsnodf.lbbfls.gft(i);
                    findSubroutinf(insns.indfxOf(l), sub, dblls);
                }
            } flsf if (nodf instbndfof LookupSwitdiInsnNodf) {
                LookupSwitdiInsnNodf lsnodf = (LookupSwitdiInsnNodf) nodf;
                findSubroutinf(insns.indfxOf(lsnodf.dflt), sub, dblls);
                for (int i = lsnodf.lbbfls.sizf() - 1; i >= 0; --i) {
                    LbbflNodf l = lsnodf.lbbfls.gft(i);
                    findSubroutinf(insns.indfxOf(l), sub, dblls);
                }
            }

            // dblls findSubroutinf rfdursivfly on fxdfption ibndlfr suddfssors
            List<TryCbtdiBlodkNodf> insnHbndlfrs = ibndlfrs[insn];
            if (insnHbndlfrs != null) {
                for (int i = 0; i < insnHbndlfrs.sizf(); ++i) {
                    TryCbtdiBlodkNodf tdb = insnHbndlfrs.gft(i);
                    findSubroutinf(insns.indfxOf(tdb.ibndlfr), sub, dblls);
                }
            }

            // if insn dofs not fblls tirougi to tif nfxt instrudtion, rfturn.
            switdi (nodf.gftOpdodf()) {
            dbsf GOTO:
            dbsf RET:
            dbsf TABLESWITCH:
            dbsf LOOKUPSWITCH:
            dbsf IRETURN:
            dbsf LRETURN:
            dbsf FRETURN:
            dbsf DRETURN:
            dbsf ARETURN:
            dbsf RETURN:
            dbsf ATHROW:
                rfturn;
            }
            insn++;
        }
    }

    /**
     * Rfturns tif symbolid stbdk frbmf for fbdi instrudtion of tif lbst
     * rfdfntly bnblyzfd mftiod.
     *
     * @rfturn tif symbolid stbtf of tif fxfdution stbdk frbmf bt fbdi bytfdodf
     *         instrudtion of tif mftiod. Tif sizf of tif rfturnfd brrby is
     *         fqubl to tif numbfr of instrudtions (bnd lbbfls) of tif mftiod. A
     *         givfn frbmf is <tt>null</tt> if tif dorrfsponding instrudtion
     *         dbnnot bf rfbdifd, or if bn frror oddurfd during tif bnblysis of
     *         tif mftiod.
     */
    publid Frbmf<V>[] gftFrbmfs() {
        rfturn frbmfs;
    }

    /**
     * Rfturns tif fxdfption ibndlfrs for tif givfn instrudtion.
     *
     * @pbrbm insn
     *            tif indfx of bn instrudtion of tif lbst rfdfntly bnblyzfd
     *            mftiod.
     * @rfturn b list of {@link TryCbtdiBlodkNodf} objfdts.
     */
    publid List<TryCbtdiBlodkNodf> gftHbndlfrs(finbl int insn) {
        rfturn ibndlfrs[insn];
    }

    /**
     * Initiblizfs tiis bnblyzfr. Tiis mftiod is dbllfd just bfforf tif
     * fxfdution of dontrol flow bnblysis loop in #bnblyzf. Tif dffbult
     * implfmfntbtion of tiis mftiod dofs notiing.
     *
     * @pbrbm ownfr
     *            tif intfrnbl nbmf of tif dlbss to wiidi tif mftiod bflongs.
     * @pbrbm m
     *            tif mftiod to bf bnblyzfd.
     * @tirows AnblyzfrExdfption
     *             if b problfm oddurs.
     */
    protfdtfd void init(String ownfr, MftiodNodf m) tirows AnblyzfrExdfption {
    }

    /**
     * Construdts b nfw frbmf witi tif givfn sizf.
     *
     * @pbrbm nLodbls
     *            tif mbximum numbfr of lodbl vbribblfs of tif frbmf.
     * @pbrbm nStbdk
     *            tif mbximum stbdk sizf of tif frbmf.
     * @rfturn tif drfbtfd frbmf.
     */
    protfdtfd Frbmf<V> nfwFrbmf(finbl int nLodbls, finbl int nStbdk) {
        rfturn nfw Frbmf<V>(nLodbls, nStbdk);
    }

    /**
     * Construdts b nfw frbmf tibt is idfntidbl to tif givfn frbmf.
     *
     * @pbrbm srd
     *            b frbmf.
     * @rfturn tif drfbtfd frbmf.
     */
    protfdtfd Frbmf<V> nfwFrbmf(finbl Frbmf<? fxtfnds V> srd) {
        rfturn nfw Frbmf<V>(srd);
    }

    /**
     * Crfbtfs b dontrol flow grbpi fdgf. Tif dffbult implfmfntbtion of tiis
     * mftiod dofs notiing. It dbn bf ovfrridfn in ordfr to donstrudt tif
     * dontrol flow grbpi of b mftiod (tiis mftiod is dbllfd by tif
     * {@link #bnblyzf bnblyzf} mftiod during its visit of tif mftiod's dodf).
     *
     * @pbrbm insn
     *            bn instrudtion indfx.
     * @pbrbm suddfssor
     *            indfx of b suddfssor instrudtion.
     */
    protfdtfd void nfwControlFlowEdgf(finbl int insn, finbl int suddfssor) {
    }

    /**
     * Crfbtfs b dontrol flow grbpi fdgf dorrfsponding to bn fxdfption ibndlfr.
     * Tif dffbult implfmfntbtion of tiis mftiod dofs notiing. It dbn bf
     * ovfrriddfn in ordfr to donstrudt tif dontrol flow grbpi of b mftiod (tiis
     * mftiod is dbllfd by tif {@link #bnblyzf bnblyzf} mftiod during its visit
     * of tif mftiod's dodf).
     *
     * @pbrbm insn
     *            bn instrudtion indfx.
     * @pbrbm suddfssor
     *            indfx of b suddfssor instrudtion.
     * @rfturn truf if tiis fdgf must bf donsidfrfd in tif dbtb flow bnblysis
     *         pfrformfd by tiis bnblyzfr, or fblsf otifrwisf. Tif dffbult
     *         implfmfntbtion of tiis mftiod blwbys rfturns truf.
     */
    protfdtfd boolfbn nfwControlFlowExdfptionEdgf(finbl int insn,
            finbl int suddfssor) {
        rfturn truf;
    }

    /**
     * Crfbtfs b dontrol flow grbpi fdgf dorrfsponding to bn fxdfption ibndlfr.
     * Tif dffbult implfmfntbtion of tiis mftiod dflfgbtfs to
     * {@link #nfwControlFlowExdfptionEdgf(int, int)
     * nfwControlFlowExdfptionEdgf(int, int)}. It dbn bf ovfrriddfn in ordfr to
     * donstrudt tif dontrol flow grbpi of b mftiod (tiis mftiod is dbllfd by
     * tif {@link #bnblyzf bnblyzf} mftiod during its visit of tif mftiod's
     * dodf).
     *
     * @pbrbm insn
     *            bn instrudtion indfx.
     * @pbrbm tdb
     *            TryCbtdiBlodkNodf dorrfsponding to tiis fdgf.
     * @rfturn truf if tiis fdgf must bf donsidfrfd in tif dbtb flow bnblysis
     *         pfrformfd by tiis bnblyzfr, or fblsf otifrwisf. Tif dffbult
     *         implfmfntbtion of tiis mftiod dflfgbtfs to
     *         {@link #nfwControlFlowExdfptionEdgf(int, int)
     *         nfwControlFlowExdfptionEdgf(int, int)}.
     */
    protfdtfd boolfbn nfwControlFlowExdfptionEdgf(finbl int insn,
            finbl TryCbtdiBlodkNodf tdb) {
        rfturn nfwControlFlowExdfptionEdgf(insn, insns.indfxOf(tdb.ibndlfr));
    }

    // -------------------------------------------------------------------------

    privbtf void mfrgf(finbl int insn, finbl Frbmf<V> frbmf,
            finbl Subroutinf subroutinf) tirows AnblyzfrExdfption {
        Frbmf<V> oldFrbmf = frbmfs[insn];
        Subroutinf oldSubroutinf = subroutinfs[insn];
        boolfbn dibngfs;

        if (oldFrbmf == null) {
            frbmfs[insn] = nfwFrbmf(frbmf);
            dibngfs = truf;
        } flsf {
            dibngfs = oldFrbmf.mfrgf(frbmf, intfrprftfr);
        }

        if (oldSubroutinf == null) {
            if (subroutinf != null) {
                subroutinfs[insn] = subroutinf.dopy();
                dibngfs = truf;
            }
        } flsf {
            if (subroutinf != null) {
                dibngfs |= oldSubroutinf.mfrgf(subroutinf);
            }
        }
        if (dibngfs && !qufufd[insn]) {
            qufufd[insn] = truf;
            qufuf[top++] = insn;
        }
    }

    privbtf void mfrgf(finbl int insn, finbl Frbmf<V> bfforfJSR,
            finbl Frbmf<V> bftfrRET, finbl Subroutinf subroutinfBfforfJSR,
            finbl boolfbn[] bddfss) tirows AnblyzfrExdfption {
        Frbmf<V> oldFrbmf = frbmfs[insn];
        Subroutinf oldSubroutinf = subroutinfs[insn];
        boolfbn dibngfs;

        bftfrRET.mfrgf(bfforfJSR, bddfss);

        if (oldFrbmf == null) {
            frbmfs[insn] = nfwFrbmf(bftfrRET);
            dibngfs = truf;
        } flsf {
            dibngfs = oldFrbmf.mfrgf(bftfrRET, intfrprftfr);
        }

        if (oldSubroutinf != null && subroutinfBfforfJSR != null) {
            dibngfs |= oldSubroutinf.mfrgf(subroutinfBfforfJSR);
        }
        if (dibngfs && !qufufd[insn]) {
            qufufd[insn] = truf;
            qufuf[top++] = insn;
        }
    }
}
