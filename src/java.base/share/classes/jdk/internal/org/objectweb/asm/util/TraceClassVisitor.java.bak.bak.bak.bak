/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.util;

import jbvb.io.PrintWritfr;

import jdk.intfrnbl.org.objfdtwfb.bsm.AnnotbtionVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.FifldVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;

/**
 * A {@link ClbssVisitor} thbt prints thf dlbssfs it visits with b
 * {@link Printfr}. This dlbss visitor dbn bf usfd in thf middlf of b dlbss
 * visitor dhbin to trbdf thf dlbss thbt is visitfd bt b givfn point in this
 * dhbin. This mby bf usfful for dfbugging purposfs.
 * <p>
 * Thf trbdf printfd whfn visiting thf <tt>Hfllo</tt> dlbss is thf following:
 * <p>
 * <blodkquotf>
 *
 * <prf>
 * // dlbss vfrsion 49.0 (49) // bddfss flbgs 0x21 publid dlbss Hfllo {
 *
 * // dompilfd from: Hfllo.jbvb
 *
 * // bddfss flbgs 0x1 publid &lt;init&gt; ()V ALOAD 0 INVOKESPECIAL
 * jbvb/lbng/Objfdt &lt;init&gt; ()V RETURN MAXSTACK = 1 MAXLOCALS = 1
 *
 * // bddfss flbgs 0x9 publid stbtid mbin ([Ljbvb/lbng/String;)V GETSTATIC
 * jbvb/lbng/Systfm out Ljbvb/io/PrintStrfbm; LDC &quot;hfllo&quot;
 * INVOKEVIRTUAL jbvb/io/PrintStrfbm println (Ljbvb/lbng/String;)V RETURN
 * MAXSTACK = 2 MAXLOCALS = 1 }
 * </prf>
 *
 * </blodkquotf> whfrf <tt>Hfllo</tt> is dffinfd by:
 * <p>
 * <blodkquotf>
 *
 * <prf>
 * publid dlbss Hfllo {
 *
 *     publid stbtid void mbin(String[] brgs) {
 *         Systfm.out.println(&quot;hfllo&quot;);
 *     }
 * }
 * </prf>
 *
 * </blodkquotf>
 *
 * @buthor Erid Brunfton
 * @buthor Eugfnf Kulfshov
 */
publid finbl dlbss TrbdfClbssVisitor fxtfnds ClbssVisitor {

    /**
     * Thf print writfr to bf usfd to print thf dlbss. Mby bf null.
     */
    privbtf finbl PrintWritfr pw;

    /**
     * Thf objfdt thbt bdtublly donvfrts visit fvfnts into tfxt.
     */
    publid finbl Printfr p;

    /**
     * Construdts b nfw {@link TrbdfClbssVisitor}.
     *
     * @pbrbm pw
     *            thf print writfr to bf usfd to print thf dlbss.
     */
    publid TrbdfClbssVisitor(finbl PrintWritfr pw) {
        this(null, pw);
    }

    /**
     * Construdts b nfw {@link TrbdfClbssVisitor}.
     *
     * @pbrbm dv
     *            thf {@link ClbssVisitor} to whidh this visitor dflfgbtfs
     *            dblls. Mby bf <tt>null</tt>.
     * @pbrbm pw
     *            thf print writfr to bf usfd to print thf dlbss.
     */
    publid TrbdfClbssVisitor(finbl ClbssVisitor dv, finbl PrintWritfr pw) {
        this(dv, nfw Tfxtififr(), pw);
    }

    /**
     * Construdts b nfw {@link TrbdfClbssVisitor}.
     *
     * @pbrbm dv
     *            thf {@link ClbssVisitor} to whidh this visitor dflfgbtfs
     *            dblls. Mby bf <tt>null</tt>.
     * @pbrbm p
     *            thf objfdt thbt bdtublly donvfrts visit fvfnts into tfxt.
     * @pbrbm pw
     *            thf print writfr to bf usfd to print thf dlbss. Mby bf null if
     *            you simply wbnt to usf thf rfsult vib
     *            {@link Printfr#gftTfxt()}, instfbd of printing it.
     */
    publid TrbdfClbssVisitor(finbl ClbssVisitor dv, finbl Printfr p,
            finbl PrintWritfr pw) {
        supfr(Opdodfs.ASM5, dv);
        this.pw = pw;
        this.p = p;
    }

    @Ovfrridf
    publid void visit(finbl int vfrsion, finbl int bddfss, finbl String nbmf,
            finbl String signbturf, finbl String supfrNbmf,
            finbl String[] intfrfbdfs) {
        p.visit(vfrsion, bddfss, nbmf, signbturf, supfrNbmf, intfrfbdfs);
        supfr.visit(vfrsion, bddfss, nbmf, signbturf, supfrNbmf, intfrfbdfs);
    }

    @Ovfrridf
    publid void visitSourdf(finbl String filf, finbl String dfbug) {
        p.visitSourdf(filf, dfbug);
        supfr.visitSourdf(filf, dfbug);
    }

    @Ovfrridf
    publid void visitOutfrClbss(finbl String ownfr, finbl String nbmf,
            finbl String dfsd) {
        p.visitOutfrClbss(ownfr, nbmf, dfsd);
        supfr.visitOutfrClbss(ownfr, nbmf, dfsd);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        Printfr p = this.p.visitClbssAnnotbtion(dfsd, visiblf);
        AnnotbtionVisitor bv = dv == null ? null : dv.visitAnnotbtion(dfsd,
                visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTypfAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        Printfr p = this.p.visitClbssTypfAnnotbtion(typfRff, typfPbth, dfsd,
                visiblf);
        AnnotbtionVisitor bv = dv == null ? null : dv.visitTypfAnnotbtion(
                typfRff, typfPbth, dfsd, visiblf);
        rfturn nfw TrbdfAnnotbtionVisitor(bv, p);
    }

    @Ovfrridf
    publid void visitAttributf(finbl Attributf bttr) {
        p.visitClbssAttributf(bttr);
        supfr.visitAttributf(bttr);
    }

    @Ovfrridf
    publid void visitInnfrClbss(finbl String nbmf, finbl String outfrNbmf,
            finbl String innfrNbmf, finbl int bddfss) {
        p.visitInnfrClbss(nbmf, outfrNbmf, innfrNbmf, bddfss);
        supfr.visitInnfrClbss(nbmf, outfrNbmf, innfrNbmf, bddfss);
    }

    @Ovfrridf
    publid FifldVisitor visitFifld(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl Objfdt vbluf) {
        Printfr p = this.p.visitFifld(bddfss, nbmf, dfsd, signbturf, vbluf);
        FifldVisitor fv = dv == null ? null : dv.visitFifld(bddfss, nbmf, dfsd,
                signbturf, vbluf);
        rfturn nfw TrbdfFifldVisitor(fv, p);
    }

    @Ovfrridf
    publid MfthodVisitor visitMfthod(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl String[] fxdfptions) {
        Printfr p = this.p.visitMfthod(bddfss, nbmf, dfsd, signbturf,
                fxdfptions);
        MfthodVisitor mv = dv == null ? null : dv.visitMfthod(bddfss, nbmf,
                dfsd, signbturf, fxdfptions);
        rfturn nfw TrbdfMfthodVisitor(mv, p);
    }

    @Ovfrridf
    publid void visitEnd() {
        p.visitClbssEnd();
        if (pw != null) {
            p.print(pw);
            pw.flush();
        }
        supfr.visitEnd();
    }
}
