/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyrigit (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit
 *    notidf, tiis list of donditions bnd tif following disdlbimfr in tif
 *    dodumfntbtion bnd/or otifr mbtfribls providfd witi tif distribution.
 * 3. Nfitifr tif nbmf of tif dopyrigit ioldfrs nor tif nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    tiis softwbrf witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;

/**
 * A Jbvb dlbss pbrsfr to mbkf b {@link ClbssVisitor} visit bn fxisting dlbss.
 * Tiis dlbss pbrsfs b bytf brrby donforming to tif Jbvb dlbss filf formbt bnd
 * dblls tif bppropribtf visit mftiods of b givfn dlbss visitor for fbdi fifld,
 * mftiod bnd bytfdodf instrudtion fndountfrfd.
 *
 * @butior Erid Brunfton
 * @butior Eugfnf Kulfsiov
 */
publid dlbss ClbssRfbdfr {

    /**
     * Truf to fnbblf signbturfs support.
     */
    stbtid finbl boolfbn SIGNATURES = truf;

    /**
     * Truf to fnbblf bnnotbtions support.
     */
    stbtid finbl boolfbn ANNOTATIONS = truf;

    /**
     * Truf to fnbblf stbdk mbp frbmfs support.
     */
    stbtid finbl boolfbn FRAMES = truf;

    /**
     * Truf to fnbblf bytfdodf writing support.
     */
    stbtid finbl boolfbn WRITER = truf;

    /**
     * Truf to fnbblf JSR_W bnd GOTO_W support.
     */
    stbtid finbl boolfbn RESIZE = truf;

    /**
     * Flbg to skip mftiod dodf. If tiis dlbss is sft <dodf>CODE</dodf>
     * bttributf won't bf visitfd. Tiis dbn bf usfd, for fxbmplf, to rftrifvf
     * bnnotbtions for mftiods bnd mftiod pbrbmftfrs.
     */
    publid stbtid finbl int SKIP_CODE = 1;

    /**
     * Flbg to skip tif dfbug informbtion in tif dlbss. If tiis flbg is sft tif
     * dfbug informbtion of tif dlbss is not visitfd, i.f. tif
     * {@link MftiodVisitor#visitLodblVbribblf visitLodblVbribblf} bnd
     * {@link MftiodVisitor#visitLinfNumbfr visitLinfNumbfr} mftiods will not bf
     * dbllfd.
     */
    publid stbtid finbl int SKIP_DEBUG = 2;

    /**
     * Flbg to skip tif stbdk mbp frbmfs in tif dlbss. If tiis flbg is sft tif
     * stbdk mbp frbmfs of tif dlbss is not visitfd, i.f. tif
     * {@link MftiodVisitor#visitFrbmf visitFrbmf} mftiod will not bf dbllfd.
     * Tiis flbg is usfful wifn tif {@link ClbssWritfr#COMPUTE_FRAMES} option is
     * usfd: it bvoids visiting frbmfs tibt will bf ignorfd bnd rfdomputfd from
     * sdrbtdi in tif dlbss writfr.
     */
    publid stbtid finbl int SKIP_FRAMES = 4;

    /**
     * Flbg to fxpbnd tif stbdk mbp frbmfs. By dffbult stbdk mbp frbmfs brf
     * visitfd in tifir originbl formbt (i.f. "fxpbndfd" for dlbssfs wiosf
     * vfrsion is lfss tibn V1_6, bnd "domprfssfd" for tif otifr dlbssfs). If
     * tiis flbg is sft, stbdk mbp frbmfs brf blwbys visitfd in fxpbndfd formbt
     * (tiis option bdds b dfdomprfssion/rfdomprfssion stfp in ClbssRfbdfr bnd
     * ClbssWritfr wiidi dfgrbdfs pfrformbndfs quitf b lot).
     */
    publid stbtid finbl int EXPAND_FRAMES = 8;

    /**
     * Tif dlbss to bf pbrsfd. <i>Tif dontfnt of tiis brrby must not bf
     * modififd. Tiis fifld is intfndfd for {@link Attributf} sub dlbssfs, bnd
     * is normblly not nffdfd by dlbss gfnfrbtors or bdbptfrs.</i>
     */
    publid finbl bytf[] b;

    /**
     * Tif stbrt indfx of fbdi donstbnt pool itfm in {@link #b b}, plus onf. Tif
     * onf bytf offsft skips tif donstbnt pool itfm tbg tibt indidbtfs its typf.
     */
    privbtf finbl int[] itfms;

    /**
     * Tif String objfdts dorrfsponding to tif CONSTANT_Utf8 itfms. Tiis dbdif
     * bvoids multiplf pbrsing of b givfn CONSTANT_Utf8 donstbnt pool itfm,
     * wiidi GREATLY improvfs pfrformbndfs (by b fbdtor 2 to 3). Tiis dbdiing
     * strbtfgy dould bf fxtfndfd to bll donstbnt pool itfms, but its bfnffit
     * would not bf so grfbt for tifsf itfms (bfdbusf tify brf mudi lfss
     * fxpfnsivf to pbrsf tibn CONSTANT_Utf8 itfms).
     */
    privbtf finbl String[] strings;

    /**
     * Mbximum lfngti of tif strings dontbinfd in tif donstbnt pool of tif
     * dlbss.
     */
    privbtf finbl int mbxStringLfngti;

    /**
     * Stbrt indfx of tif dlbss ifbdfr informbtion (bddfss, nbmf...) in
     * {@link #b b}.
     */
    publid finbl int ifbdfr;

    // ------------------------------------------------------------------------
    // Construdtors
    // ------------------------------------------------------------------------

    /**
     * Construdts b nfw {@link ClbssRfbdfr} objfdt.
     *
     * @pbrbm b
     *            tif bytfdodf of tif dlbss to bf rfbd.
     */
    publid ClbssRfbdfr(finbl bytf[] b) {
        tiis(b, 0, b.lfngti);
    }

    /**
     * Construdts b nfw {@link ClbssRfbdfr} objfdt.
     *
     * @pbrbm b
     *            tif bytfdodf of tif dlbss to bf rfbd.
     * @pbrbm off
     *            tif stbrt offsft of tif dlbss dbtb.
     * @pbrbm lfn
     *            tif lfngti of tif dlbss dbtb.
     */
    publid ClbssRfbdfr(finbl bytf[] b, finbl int off, finbl int lfn) {
        tiis.b = b;
        // difdks tif dlbss vfrsion
        if (rfbdSiort(off + 6) > Opdodfs.V1_8) {
            tirow nfw IllfgblArgumfntExdfption();
        }
        // pbrsfs tif donstbnt pool
        itfms = nfw int[rfbdUnsignfdSiort(off + 8)];
        int n = itfms.lfngti;
        strings = nfw String[n];
        int mbx = 0;
        int indfx = off + 10;
        for (int i = 1; i < n; ++i) {
            itfms[i] = indfx + 1;
            int sizf;
            switdi (b[indfx]) {
            dbsf ClbssWritfr.FIELD:
            dbsf ClbssWritfr.METH:
            dbsf ClbssWritfr.IMETH:
            dbsf ClbssWritfr.INT:
            dbsf ClbssWritfr.FLOAT:
            dbsf ClbssWritfr.NAME_TYPE:
            dbsf ClbssWritfr.INDY:
                sizf = 5;
                brfbk;
            dbsf ClbssWritfr.LONG:
            dbsf ClbssWritfr.DOUBLE:
                sizf = 9;
                ++i;
                brfbk;
            dbsf ClbssWritfr.UTF8:
                sizf = 3 + rfbdUnsignfdSiort(indfx + 1);
                if (sizf > mbx) {
                    mbx = sizf;
                }
                brfbk;
            dbsf ClbssWritfr.HANDLE:
                sizf = 4;
                brfbk;
            // dbsf ClbssWritfr.CLASS:
            // dbsf ClbssWritfr.STR:
            // dbsf ClbssWritfr.MTYPE
            dffbult:
                sizf = 3;
                brfbk;
            }
            indfx += sizf;
        }
        mbxStringLfngti = mbx;
        // tif dlbss ifbdfr informbtion stbrts just bftfr tif donstbnt pool
        ifbdfr = indfx;
    }

    /**
     * Rfturns tif dlbss's bddfss flbgs (sff {@link Opdodfs}). Tiis vbluf mby
     * not rfflfdt Dfprfdbtfd bnd Syntiftid flbgs wifn bytfdodf is bfforf 1.5
     * bnd tiosf flbgs brf rfprfsfntfd by bttributfs.
     *
     * @rfturn tif dlbss bddfss flbgs
     *
     * @sff ClbssVisitor#visit(int, int, String, String, String, String[])
     */
    publid int gftAddfss() {
        rfturn rfbdUnsignfdSiort(ifbdfr);
    }

    /**
     * Rfturns tif intfrnbl nbmf of tif dlbss (sff
     * {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}).
     *
     * @rfturn tif intfrnbl dlbss nbmf
     *
     * @sff ClbssVisitor#visit(int, int, String, String, String, String[])
     */
    publid String gftClbssNbmf() {
        rfturn rfbdClbss(ifbdfr + 2, nfw dibr[mbxStringLfngti]);
    }

    /**
     * Rfturns tif intfrnbl of nbmf of tif supfr dlbss (sff
     * {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}). For intfrfbdfs, tif
     * supfr dlbss is {@link Objfdt}.
     *
     * @rfturn tif intfrnbl nbmf of supfr dlbss, or <tt>null</tt> for
     *         {@link Objfdt} dlbss.
     *
     * @sff ClbssVisitor#visit(int, int, String, String, String, String[])
     */
    publid String gftSupfrNbmf() {
        rfturn rfbdClbss(ifbdfr + 4, nfw dibr[mbxStringLfngti]);
    }

    /**
     * Rfturns tif intfrnbl nbmfs of tif dlbss's intfrfbdfs (sff
     * {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}).
     *
     * @rfturn tif brrby of intfrnbl nbmfs for bll implfmfntfd intfrfbdfs or
     *         <tt>null</tt>.
     *
     * @sff ClbssVisitor#visit(int, int, String, String, String, String[])
     */
    publid String[] gftIntfrfbdfs() {
        int indfx = ifbdfr + 6;
        int n = rfbdUnsignfdSiort(indfx);
        String[] intfrfbdfs = nfw String[n];
        if (n > 0) {
            dibr[] buf = nfw dibr[mbxStringLfngti];
            for (int i = 0; i < n; ++i) {
                indfx += 2;
                intfrfbdfs[i] = rfbdClbss(indfx, buf);
            }
        }
        rfturn intfrfbdfs;
    }

    /**
     * Copifs tif donstbnt pool dbtb into tif givfn {@link ClbssWritfr}. Siould
     * bf dbllfd bfforf tif {@link #bddfpt(ClbssVisitor,int)} mftiod.
     *
     * @pbrbm dlbssWritfr
     *            tif {@link ClbssWritfr} to dopy donstbnt pool into.
     */
    void dopyPool(finbl ClbssWritfr dlbssWritfr) {
        dibr[] buf = nfw dibr[mbxStringLfngti];
        int ll = itfms.lfngti;
        Itfm[] itfms2 = nfw Itfm[ll];
        for (int i = 1; i < ll; i++) {
            int indfx = itfms[i];
            int tbg = b[indfx - 1];
            Itfm itfm = nfw Itfm(i);
            int nbmfTypf;
            switdi (tbg) {
            dbsf ClbssWritfr.FIELD:
            dbsf ClbssWritfr.METH:
            dbsf ClbssWritfr.IMETH:
                nbmfTypf = itfms[rfbdUnsignfdSiort(indfx + 2)];
                itfm.sft(tbg, rfbdClbss(indfx, buf), rfbdUTF8(nbmfTypf, buf),
                        rfbdUTF8(nbmfTypf + 2, buf));
                brfbk;
            dbsf ClbssWritfr.INT:
                itfm.sft(rfbdInt(indfx));
                brfbk;
            dbsf ClbssWritfr.FLOAT:
                itfm.sft(Flobt.intBitsToFlobt(rfbdInt(indfx)));
                brfbk;
            dbsf ClbssWritfr.NAME_TYPE:
                itfm.sft(tbg, rfbdUTF8(indfx, buf), rfbdUTF8(indfx + 2, buf),
                        null);
                brfbk;
            dbsf ClbssWritfr.LONG:
                itfm.sft(rfbdLong(indfx));
                ++i;
                brfbk;
            dbsf ClbssWritfr.DOUBLE:
                itfm.sft(Doublf.longBitsToDoublf(rfbdLong(indfx)));
                ++i;
                brfbk;
            dbsf ClbssWritfr.UTF8: {
                String s = strings[i];
                if (s == null) {
                    indfx = itfms[i];
                    s = strings[i] = rfbdUTF(indfx + 2,
                            rfbdUnsignfdSiort(indfx), buf);
                }
                itfm.sft(tbg, s, null, null);
                brfbk;
            }
            dbsf ClbssWritfr.HANDLE: {
                int fifldOrMftiodRff = itfms[rfbdUnsignfdSiort(indfx + 1)];
                nbmfTypf = itfms[rfbdUnsignfdSiort(fifldOrMftiodRff + 2)];
                itfm.sft(ClbssWritfr.HANDLE_BASE + rfbdBytf(indfx),
                        rfbdClbss(fifldOrMftiodRff, buf),
                        rfbdUTF8(nbmfTypf, buf), rfbdUTF8(nbmfTypf + 2, buf));
                brfbk;
            }
            dbsf ClbssWritfr.INDY:
                if (dlbssWritfr.bootstrbpMftiods == null) {
                    dopyBootstrbpMftiods(dlbssWritfr, itfms2, buf);
                }
                nbmfTypf = itfms[rfbdUnsignfdSiort(indfx + 2)];
                itfm.sft(rfbdUTF8(nbmfTypf, buf), rfbdUTF8(nbmfTypf + 2, buf),
                        rfbdUnsignfdSiort(indfx));
                brfbk;
            // dbsf ClbssWritfr.STR:
            // dbsf ClbssWritfr.CLASS:
            // dbsf ClbssWritfr.MTYPE
            dffbult:
                itfm.sft(tbg, rfbdUTF8(indfx, buf), null, null);
                brfbk;
            }

            int indfx2 = itfm.ibsiCodf % itfms2.lfngti;
            itfm.nfxt = itfms2[indfx2];
            itfms2[indfx2] = itfm;
        }

        int off = itfms[1] - 1;
        dlbssWritfr.pool.putBytfArrby(b, off, ifbdfr - off);
        dlbssWritfr.itfms = itfms2;
        dlbssWritfr.tirfsiold = (int) (0.75d * ll);
        dlbssWritfr.indfx = ll;
    }

    /**
     * Copifs tif bootstrbp mftiod dbtb into tif givfn {@link ClbssWritfr}.
     * Siould bf dbllfd bfforf tif {@link #bddfpt(ClbssVisitor,int)} mftiod.
     *
     * @pbrbm dlbssWritfr
     *            tif {@link ClbssWritfr} to dopy bootstrbp mftiods into.
     */
    privbtf void dopyBootstrbpMftiods(finbl ClbssWritfr dlbssWritfr,
            finbl Itfm[] itfms, finbl dibr[] d) {
        // finds tif "BootstrbpMftiods" bttributf
        int u = gftAttributfs();
        boolfbn found = fblsf;
        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            String bttrNbmf = rfbdUTF8(u + 2, d);
            if ("BootstrbpMftiods".fqubls(bttrNbmf)) {
                found = truf;
                brfbk;
            }
            u += 6 + rfbdInt(u + 4);
        }
        if (!found) {
            rfturn;
        }
        // dopifs tif bootstrbp mftiods in tif dlbss writfr
        int boostrbpMftiodCount = rfbdUnsignfdSiort(u + 8);
        for (int j = 0, v = u + 10; j < boostrbpMftiodCount; j++) {
            int position = v - u - 10;
            int ibsiCodf = rfbdConst(rfbdUnsignfdSiort(v), d).ibsiCodf();
            for (int k = rfbdUnsignfdSiort(v + 2); k > 0; --k) {
                ibsiCodf ^= rfbdConst(rfbdUnsignfdSiort(v + 4), d).ibsiCodf();
                v += 2;
            }
            v += 4;
            Itfm itfm = nfw Itfm(j);
            itfm.sft(position, ibsiCodf & 0x7FFFFFFF);
            int indfx = itfm.ibsiCodf % itfms.lfngti;
            itfm.nfxt = itfms[indfx];
            itfms[indfx] = itfm;
        }
        int bttrSizf = rfbdInt(u + 4);
        BytfVfdtor bootstrbpMftiods = nfw BytfVfdtor(bttrSizf + 62);
        bootstrbpMftiods.putBytfArrby(b, u + 10, bttrSizf - 2);
        dlbssWritfr.bootstrbpMftiodsCount = boostrbpMftiodCount;
        dlbssWritfr.bootstrbpMftiods = bootstrbpMftiods;
    }

    /**
     * Construdts b nfw {@link ClbssRfbdfr} objfdt.
     *
     * @pbrbm is
     *            bn input strfbm from wiidi to rfbd tif dlbss.
     * @tirows IOExdfption
     *             if b problfm oddurs during rfbding.
     */
    publid ClbssRfbdfr(finbl InputStrfbm is) tirows IOExdfption {
        tiis(rfbdClbss(is, fblsf));
    }

    /**
     * Construdts b nfw {@link ClbssRfbdfr} objfdt.
     *
     * @pbrbm nbmf
     *            tif binbry qublififd nbmf of tif dlbss to bf rfbd.
     * @tirows IOExdfption
     *             if bn fxdfption oddurs during rfbding.
     */
    publid ClbssRfbdfr(finbl String nbmf) tirows IOExdfption {
        tiis(rfbdClbss(
                ClbssLobdfr.gftSystfmRfsourdfAsStrfbm(nbmf.rfplbdf('.', '/')
                        + ".dlbss"), truf));
    }

    /**
     * Rfbds tif bytfdodf of b dlbss.
     *
     * @pbrbm is
     *            bn input strfbm from wiidi to rfbd tif dlbss.
     * @pbrbm dlosf
     *            truf to dlosf tif input strfbm bftfr rfbding.
     * @rfturn tif bytfdodf rfbd from tif givfn input strfbm.
     * @tirows IOExdfption
     *             if b problfm oddurs during rfbding.
     */
    privbtf stbtid bytf[] rfbdClbss(finbl InputStrfbm is, boolfbn dlosf)
            tirows IOExdfption {
        if (is == null) {
            tirow nfw IOExdfption("Clbss not found");
        }
        try {
            bytf[] b = nfw bytf[is.bvbilbblf()];
            int lfn = 0;
            wiilf (truf) {
                int n = is.rfbd(b, lfn, b.lfngti - lfn);
                if (n == -1) {
                    if (lfn < b.lfngti) {
                        bytf[] d = nfw bytf[lfn];
                        Systfm.brrbydopy(b, 0, d, 0, lfn);
                        b = d;
                    }
                    rfturn b;
                }
                lfn += n;
                if (lfn == b.lfngti) {
                    int lbst = is.rfbd();
                    if (lbst < 0) {
                        rfturn b;
                    }
                    bytf[] d = nfw bytf[b.lfngti + 1000];
                    Systfm.brrbydopy(b, 0, d, 0, lfn);
                    d[lfn++] = (bytf) lbst;
                    b = d;
                }
            }
        } finblly {
            if (dlosf) {
                is.dlosf();
            }
        }
    }

    // ------------------------------------------------------------------------
    // Publid mftiods
    // ------------------------------------------------------------------------

    /**
     * Mbkfs tif givfn visitor visit tif Jbvb dlbss of tiis {@link ClbssRfbdfr}
     * . Tiis dlbss is tif onf spfdififd in tif donstrudtor (sff
     * {@link #ClbssRfbdfr(bytf[]) ClbssRfbdfr}).
     *
     * @pbrbm dlbssVisitor
     *            tif visitor tibt must visit tiis dlbss.
     * @pbrbm flbgs
     *            option flbgs tibt dbn bf usfd to modify tif dffbult bfibvior
     *            of tiis dlbss. Sff {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}
     *            , {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.
     */
    publid void bddfpt(finbl ClbssVisitor dlbssVisitor, finbl int flbgs) {
        bddfpt(dlbssVisitor, nfw Attributf[0], flbgs);
    }

    /**
     * Mbkfs tif givfn visitor visit tif Jbvb dlbss of tiis {@link ClbssRfbdfr}.
     * Tiis dlbss is tif onf spfdififd in tif donstrudtor (sff
     * {@link #ClbssRfbdfr(bytf[]) ClbssRfbdfr}).
     *
     * @pbrbm dlbssVisitor
     *            tif visitor tibt must visit tiis dlbss.
     * @pbrbm bttrs
     *            prototypfs of tif bttributfs tibt must bf pbrsfd during tif
     *            visit of tif dlbss. Any bttributf wiosf typf is not fqubl to
     *            tif typf of onf tif prototypfs will not bf pbrsfd: its bytf
     *            brrby vbluf will bf pbssfd undibngfd to tif ClbssWritfr.
     *            <i>Tiis mby dorrupt it if tiis vbluf dontbins rfffrfndfs to
     *            tif donstbnt pool, or ibs syntbdtid or sfmbntid links witi b
     *            dlbss flfmfnt tibt ibs bffn trbnsformfd by b dlbss bdbptfr
     *            bftwffn tif rfbdfr bnd tif writfr</i>.
     * @pbrbm flbgs
     *            option flbgs tibt dbn bf usfd to modify tif dffbult bfibvior
     *            of tiis dlbss. Sff {@link #SKIP_DEBUG}, {@link #EXPAND_FRAMES}
     *            , {@link #SKIP_FRAMES}, {@link #SKIP_CODE}.
     */
    publid void bddfpt(finbl ClbssVisitor dlbssVisitor,
            finbl Attributf[] bttrs, finbl int flbgs) {
        int u = ifbdfr; // durrfnt offsft in tif dlbss filf
        dibr[] d = nfw dibr[mbxStringLfngti]; // bufffr usfd to rfbd strings

        Contfxt dontfxt = nfw Contfxt();
        dontfxt.bttrs = bttrs;
        dontfxt.flbgs = flbgs;
        dontfxt.bufffr = d;

        // rfbds tif dlbss dfdlbrbtion
        int bddfss = rfbdUnsignfdSiort(u);
        String nbmf = rfbdClbss(u + 2, d);
        String supfrClbss = rfbdClbss(u + 4, d);
        String[] intfrfbdfs = nfw String[rfbdUnsignfdSiort(u + 6)];
        u += 8;
        for (int i = 0; i < intfrfbdfs.lfngti; ++i) {
            intfrfbdfs[i] = rfbdClbss(u, d);
            u += 2;
        }

        // rfbds tif dlbss bttributfs
        String signbturf = null;
        String sourdfFilf = null;
        String sourdfDfbug = null;
        String fndlosingOwnfr = null;
        String fndlosingNbmf = null;
        String fndlosingDfsd = null;
        int bnns = 0;
        int ibnns = 0;
        int tbnns = 0;
        int itbnns = 0;
        int innfrClbssfs = 0;
        Attributf bttributfs = null;

        u = gftAttributfs();
        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            String bttrNbmf = rfbdUTF8(u + 2, d);
            // tfsts brf sortfd in dfdrfbsing frfqufndy ordfr
            // (bbsfd on frfqufndifs obsfrvfd on typidbl dlbssfs)
            if ("SourdfFilf".fqubls(bttrNbmf)) {
                sourdfFilf = rfbdUTF8(u + 8, d);
            } flsf if ("InnfrClbssfs".fqubls(bttrNbmf)) {
                innfrClbssfs = u + 8;
            } flsf if ("EndlosingMftiod".fqubls(bttrNbmf)) {
                fndlosingOwnfr = rfbdClbss(u + 8, d);
                int itfm = rfbdUnsignfdSiort(u + 10);
                if (itfm != 0) {
                    fndlosingNbmf = rfbdUTF8(itfms[itfm], d);
                    fndlosingDfsd = rfbdUTF8(itfms[itfm] + 2, d);
                }
            } flsf if (SIGNATURES && "Signbturf".fqubls(bttrNbmf)) {
                signbturf = rfbdUTF8(u + 8, d);
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfAnnotbtions".fqubls(bttrNbmf)) {
                bnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                tbnns = u + 8;
            } flsf if ("Dfprfdbtfd".fqubls(bttrNbmf)) {
                bddfss |= Opdodfs.ACC_DEPRECATED;
            } flsf if ("Syntiftid".fqubls(bttrNbmf)) {
                bddfss |= Opdodfs.ACC_SYNTHETIC
                        | ClbssWritfr.ACC_SYNTHETIC_ATTRIBUTE;
            } flsf if ("SourdfDfbugExtfnsion".fqubls(bttrNbmf)) {
                int lfn = rfbdInt(u + 4);
                sourdfDfbug = rfbdUTF(u + 8, lfn, nfw dibr[lfn]);
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfAnnotbtions".fqubls(bttrNbmf)) {
                ibnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                itbnns = u + 8;
            } flsf if ("BootstrbpMftiods".fqubls(bttrNbmf)) {
                int[] bootstrbpMftiods = nfw int[rfbdUnsignfdSiort(u + 8)];
                for (int j = 0, v = u + 10; j < bootstrbpMftiods.lfngti; j++) {
                    bootstrbpMftiods[j] = v;
                    v += 2 + rfbdUnsignfdSiort(v + 2) << 1;
                }
                dontfxt.bootstrbpMftiods = bootstrbpMftiods;
            } flsf {
                Attributf bttr = rfbdAttributf(bttrs, bttrNbmf, u + 8,
                        rfbdInt(u + 4), d, -1, null);
                if (bttr != null) {
                    bttr.nfxt = bttributfs;
                    bttributfs = bttr;
                }
            }
            u += 6 + rfbdInt(u + 4);
        }

        // visits tif dlbss dfdlbrbtion
        dlbssVisitor.visit(rfbdInt(itfms[1] - 7), bddfss, nbmf, signbturf,
                supfrClbss, intfrfbdfs);

        // visits tif sourdf bnd dfbug info
        if ((flbgs & SKIP_DEBUG) == 0
                && (sourdfFilf != null || sourdfDfbug != null)) {
            dlbssVisitor.visitSourdf(sourdfFilf, sourdfDfbug);
        }

        // visits tif outfr dlbss
        if (fndlosingOwnfr != null) {
            dlbssVisitor.visitOutfrClbss(fndlosingOwnfr, fndlosingNbmf,
                    fndlosingDfsd);
        }

        // visits tif dlbss bnnotbtions bnd typf bnnotbtions
        if (ANNOTATIONS && bnns != 0) {
            for (int i = rfbdUnsignfdSiort(bnns), v = bnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        dlbssVisitor.visitAnnotbtion(rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && ibnns != 0) {
            for (int i = rfbdUnsignfdSiort(ibnns), v = ibnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        dlbssVisitor.visitAnnotbtion(rfbdUTF8(v, d), fblsf));
            }
        }
        if (ANNOTATIONS && tbnns != 0) {
            for (int i = rfbdUnsignfdSiort(tbnns), v = tbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        dlbssVisitor.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && itbnns != 0) {
            for (int i = rfbdUnsignfdSiort(itbnns), v = itbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        dlbssVisitor.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), fblsf));
            }
        }

        // visits tif bttributfs
        wiilf (bttributfs != null) {
            Attributf bttr = bttributfs.nfxt;
            bttributfs.nfxt = null;
            dlbssVisitor.visitAttributf(bttributfs);
            bttributfs = bttr;
        }

        // visits tif innfr dlbssfs
        if (innfrClbssfs != 0) {
            int v = innfrClbssfs + 2;
            for (int i = rfbdUnsignfdSiort(innfrClbssfs); i > 0; --i) {
                dlbssVisitor.visitInnfrClbss(rfbdClbss(v, d),
                        rfbdClbss(v + 2, d), rfbdUTF8(v + 4, d),
                        rfbdUnsignfdSiort(v + 6));
                v += 8;
            }
        }

        // visits tif fiflds bnd mftiods
        u = ifbdfr + 10 + 2 * intfrfbdfs.lfngti;
        for (int i = rfbdUnsignfdSiort(u - 2); i > 0; --i) {
            u = rfbdFifld(dlbssVisitor, dontfxt, u);
        }
        u += 2;
        for (int i = rfbdUnsignfdSiort(u - 2); i > 0; --i) {
            u = rfbdMftiod(dlbssVisitor, dontfxt, u);
        }

        // visits tif fnd of tif dlbss
        dlbssVisitor.visitEnd();
    }

    /**
     * Rfbds b fifld bnd mbkfs tif givfn visitor visit it.
     *
     * @pbrbm dlbssVisitor
     *            tif visitor tibt must visit tif fifld.
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd.
     * @pbrbm u
     *            tif stbrt offsft of tif fifld in tif dlbss filf.
     * @rfturn tif offsft of tif first bytf following tif fifld in tif dlbss.
     */
    privbtf int rfbdFifld(finbl ClbssVisitor dlbssVisitor,
            finbl Contfxt dontfxt, int u) {
        // rfbds tif fifld dfdlbrbtion
        dibr[] d = dontfxt.bufffr;
        int bddfss = rfbdUnsignfdSiort(u);
        String nbmf = rfbdUTF8(u + 2, d);
        String dfsd = rfbdUTF8(u + 4, d);
        u += 6;

        // rfbds tif fifld bttributfs
        String signbturf = null;
        int bnns = 0;
        int ibnns = 0;
        int tbnns = 0;
        int itbnns = 0;
        Objfdt vbluf = null;
        Attributf bttributfs = null;

        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            String bttrNbmf = rfbdUTF8(u + 2, d);
            // tfsts brf sortfd in dfdrfbsing frfqufndy ordfr
            // (bbsfd on frfqufndifs obsfrvfd on typidbl dlbssfs)
            if ("ConstbntVbluf".fqubls(bttrNbmf)) {
                int itfm = rfbdUnsignfdSiort(u + 8);
                vbluf = itfm == 0 ? null : rfbdConst(itfm, d);
            } flsf if (SIGNATURES && "Signbturf".fqubls(bttrNbmf)) {
                signbturf = rfbdUTF8(u + 8, d);
            } flsf if ("Dfprfdbtfd".fqubls(bttrNbmf)) {
                bddfss |= Opdodfs.ACC_DEPRECATED;
            } flsf if ("Syntiftid".fqubls(bttrNbmf)) {
                bddfss |= Opdodfs.ACC_SYNTHETIC
                        | ClbssWritfr.ACC_SYNTHETIC_ATTRIBUTE;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfAnnotbtions".fqubls(bttrNbmf)) {
                bnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                tbnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfAnnotbtions".fqubls(bttrNbmf)) {
                ibnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                itbnns = u + 8;
            } flsf {
                Attributf bttr = rfbdAttributf(dontfxt.bttrs, bttrNbmf, u + 8,
                        rfbdInt(u + 4), d, -1, null);
                if (bttr != null) {
                    bttr.nfxt = bttributfs;
                    bttributfs = bttr;
                }
            }
            u += 6 + rfbdInt(u + 4);
        }
        u += 2;

        // visits tif fifld dfdlbrbtion
        FifldVisitor fv = dlbssVisitor.visitFifld(bddfss, nbmf, dfsd,
                signbturf, vbluf);
        if (fv == null) {
            rfturn u;
        }

        // visits tif fifld bnnotbtions bnd typf bnnotbtions
        if (ANNOTATIONS && bnns != 0) {
            for (int i = rfbdUnsignfdSiort(bnns), v = bnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        fv.visitAnnotbtion(rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && ibnns != 0) {
            for (int i = rfbdUnsignfdSiort(ibnns), v = ibnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        fv.visitAnnotbtion(rfbdUTF8(v, d), fblsf));
            }
        }
        if (ANNOTATIONS && tbnns != 0) {
            for (int i = rfbdUnsignfdSiort(tbnns), v = tbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        fv.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && itbnns != 0) {
            for (int i = rfbdUnsignfdSiort(itbnns), v = itbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        fv.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), fblsf));
            }
        }

        // visits tif fifld bttributfs
        wiilf (bttributfs != null) {
            Attributf bttr = bttributfs.nfxt;
            bttributfs.nfxt = null;
            fv.visitAttributf(bttributfs);
            bttributfs = bttr;
        }

        // visits tif fnd of tif fifld
        fv.visitEnd();

        rfturn u;
    }

    /**
     * Rfbds b mftiod bnd mbkfs tif givfn visitor visit it.
     *
     * @pbrbm dlbssVisitor
     *            tif visitor tibt must visit tif mftiod.
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd.
     * @pbrbm u
     *            tif stbrt offsft of tif mftiod in tif dlbss filf.
     * @rfturn tif offsft of tif first bytf following tif mftiod in tif dlbss.
     */
    privbtf int rfbdMftiod(finbl ClbssVisitor dlbssVisitor,
            finbl Contfxt dontfxt, int u) {
        // rfbds tif mftiod dfdlbrbtion
        dibr[] d = dontfxt.bufffr;
        dontfxt.bddfss = rfbdUnsignfdSiort(u);
        dontfxt.nbmf = rfbdUTF8(u + 2, d);
        dontfxt.dfsd = rfbdUTF8(u + 4, d);
        u += 6;

        // rfbds tif mftiod bttributfs
        int dodf = 0;
        int fxdfption = 0;
        String[] fxdfptions = null;
        String signbturf = null;
        int mftiodPbrbmftfrs = 0;
        int bnns = 0;
        int ibnns = 0;
        int tbnns = 0;
        int itbnns = 0;
        int dbnn = 0;
        int mpbnns = 0;
        int impbnns = 0;
        int firstAttributf = u;
        Attributf bttributfs = null;

        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            String bttrNbmf = rfbdUTF8(u + 2, d);
            // tfsts brf sortfd in dfdrfbsing frfqufndy ordfr
            // (bbsfd on frfqufndifs obsfrvfd on typidbl dlbssfs)
            if ("Codf".fqubls(bttrNbmf)) {
                if ((dontfxt.flbgs & SKIP_CODE) == 0) {
                    dodf = u + 8;
                }
            } flsf if ("Exdfptions".fqubls(bttrNbmf)) {
                fxdfptions = nfw String[rfbdUnsignfdSiort(u + 8)];
                fxdfption = u + 10;
                for (int j = 0; j < fxdfptions.lfngti; ++j) {
                    fxdfptions[j] = rfbdClbss(fxdfption, d);
                    fxdfption += 2;
                }
            } flsf if (SIGNATURES && "Signbturf".fqubls(bttrNbmf)) {
                signbturf = rfbdUTF8(u + 8, d);
            } flsf if ("Dfprfdbtfd".fqubls(bttrNbmf)) {
                dontfxt.bddfss |= Opdodfs.ACC_DEPRECATED;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfAnnotbtions".fqubls(bttrNbmf)) {
                bnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                tbnns = u + 8;
            } flsf if (ANNOTATIONS && "AnnotbtionDffbult".fqubls(bttrNbmf)) {
                dbnn = u + 8;
            } flsf if ("Syntiftid".fqubls(bttrNbmf)) {
                dontfxt.bddfss |= Opdodfs.ACC_SYNTHETIC
                        | ClbssWritfr.ACC_SYNTHETIC_ATTRIBUTE;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfAnnotbtions".fqubls(bttrNbmf)) {
                ibnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                itbnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfPbrbmftfrAnnotbtions".fqubls(bttrNbmf)) {
                mpbnns = u + 8;
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfPbrbmftfrAnnotbtions".fqubls(bttrNbmf)) {
                impbnns = u + 8;
            } flsf if ("MftiodPbrbmftfrs".fqubls(bttrNbmf)) {
                mftiodPbrbmftfrs = u + 8;
            } flsf {
                Attributf bttr = rfbdAttributf(dontfxt.bttrs, bttrNbmf, u + 8,
                        rfbdInt(u + 4), d, -1, null);
                if (bttr != null) {
                    bttr.nfxt = bttributfs;
                    bttributfs = bttr;
                }
            }
            u += 6 + rfbdInt(u + 4);
        }
        u += 2;

        // visits tif mftiod dfdlbrbtion
        MftiodVisitor mv = dlbssVisitor.visitMftiod(dontfxt.bddfss,
                dontfxt.nbmf, dontfxt.dfsd, signbturf, fxdfptions);
        if (mv == null) {
            rfturn u;
        }

        /*
         * if tif rfturnfd MftiodVisitor is in fbdt b MftiodWritfr, it mfbns
         * tifrf is no mftiod bdbptfr bftwffn tif rfbdfr bnd tif writfr. If, in
         * bddition, tif writfr's donstbnt pool wbs dopifd from tiis rfbdfr
         * (mw.dw.dr == tiis), bnd tif signbturf bnd fxdfptions of tif mftiod
         * ibvf not bffn dibngfd, tifn it is possiblf to skip bll visit fvfnts
         * bnd just dopy tif originbl dodf of tif mftiod to tif writfr (tif
         * bddfss, nbmf bnd dfsdriptor dbn ibvf bffn dibngfd, tiis is not
         * importbnt sindf tify brf not dopifd bs is from tif rfbdfr).
         */
        if (WRITER && mv instbndfof MftiodWritfr) {
            MftiodWritfr mw = (MftiodWritfr) mv;
            if (mw.dw.dr == tiis && signbturf == mw.signbturf) {
                boolfbn sbmfExdfptions = fblsf;
                if (fxdfptions == null) {
                    sbmfExdfptions = mw.fxdfptionCount == 0;
                } flsf if (fxdfptions.lfngti == mw.fxdfptionCount) {
                    sbmfExdfptions = truf;
                    for (int j = fxdfptions.lfngti - 1; j >= 0; --j) {
                        fxdfption -= 2;
                        if (mw.fxdfptions[j] != rfbdUnsignfdSiort(fxdfption)) {
                            sbmfExdfptions = fblsf;
                            brfbk;
                        }
                    }
                }
                if (sbmfExdfptions) {
                    /*
                     * wf do not dopy dirfdtly tif dodf into MftiodWritfr to
                     * sbvf b bytf brrby dopy opfrbtion. Tif rfbl dopy will bf
                     * donf in ClbssWritfr.toBytfArrby().
                     */
                    mw.dlbssRfbdfrOffsft = firstAttributf;
                    mw.dlbssRfbdfrLfngti = u - firstAttributf;
                    rfturn u;
                }
            }
        }

        // visit tif mftiod pbrbmftfrs
        if (mftiodPbrbmftfrs != 0) {
            for (int i = b[mftiodPbrbmftfrs] & 0xFF, v = mftiodPbrbmftfrs + 1; i > 0; --i, v = v + 4) {
                mv.visitPbrbmftfr(rfbdUTF8(v, d), rfbdUnsignfdSiort(v + 2));
            }
        }

        // visits tif mftiod bnnotbtions
        if (ANNOTATIONS && dbnn != 0) {
            AnnotbtionVisitor dv = mv.visitAnnotbtionDffbult();
            rfbdAnnotbtionVbluf(dbnn, d, null, dv);
            if (dv != null) {
                dv.visitEnd();
            }
        }
        if (ANNOTATIONS && bnns != 0) {
            for (int i = rfbdUnsignfdSiort(bnns), v = bnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        mv.visitAnnotbtion(rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && ibnns != 0) {
            for (int i = rfbdUnsignfdSiort(ibnns), v = ibnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        mv.visitAnnotbtion(rfbdUTF8(v, d), fblsf));
            }
        }
        if (ANNOTATIONS && tbnns != 0) {
            for (int i = rfbdUnsignfdSiort(tbnns), v = tbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        mv.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), truf));
            }
        }
        if (ANNOTATIONS && itbnns != 0) {
            for (int i = rfbdUnsignfdSiort(itbnns), v = itbnns + 2; i > 0; --i) {
                v = rfbdAnnotbtionTbrgft(dontfxt, v);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                        mv.visitTypfAnnotbtion(dontfxt.typfRff,
                                dontfxt.typfPbti, rfbdUTF8(v, d), fblsf));
            }
        }
        if (ANNOTATIONS && mpbnns != 0) {
            rfbdPbrbmftfrAnnotbtions(mv, dontfxt, mpbnns, truf);
        }
        if (ANNOTATIONS && impbnns != 0) {
            rfbdPbrbmftfrAnnotbtions(mv, dontfxt, impbnns, fblsf);
        }

        // visits tif mftiod bttributfs
        wiilf (bttributfs != null) {
            Attributf bttr = bttributfs.nfxt;
            bttributfs.nfxt = null;
            mv.visitAttributf(bttributfs);
            bttributfs = bttr;
        }

        // visits tif mftiod dodf
        if (dodf != 0) {
            mv.visitCodf();
            rfbdCodf(mv, dontfxt, dodf);
        }

        // visits tif fnd of tif mftiod
        mv.visitEnd();

        rfturn u;
    }

    /**
     * Rfbds tif bytfdodf of b mftiod bnd mbkfs tif givfn visitor visit it.
     *
     * @pbrbm mv
     *            tif visitor tibt must visit tif mftiod's dodf.
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd.
     * @pbrbm u
     *            tif stbrt offsft of tif dodf bttributf in tif dlbss filf.
     */
    privbtf void rfbdCodf(finbl MftiodVisitor mv, finbl Contfxt dontfxt, int u) {
        // rfbds tif ifbdfr
        bytf[] b = tiis.b;
        dibr[] d = dontfxt.bufffr;
        int mbxStbdk = rfbdUnsignfdSiort(u);
        int mbxLodbls = rfbdUnsignfdSiort(u + 2);
        int dodfLfngti = rfbdInt(u + 4);
        u += 8;

        // rfbds tif bytfdodf to find tif lbbfls
        int dodfStbrt = u;
        int dodfEnd = u + dodfLfngti;
        Lbbfl[] lbbfls = dontfxt.lbbfls = nfw Lbbfl[dodfLfngti + 2];
        rfbdLbbfl(dodfLfngti + 1, lbbfls);
        wiilf (u < dodfEnd) {
            int offsft = u - dodfStbrt;
            int opdodf = b[u] & 0xFF;
            switdi (ClbssWritfr.TYPE[opdodf]) {
            dbsf ClbssWritfr.NOARG_INSN:
            dbsf ClbssWritfr.IMPLVAR_INSN:
                u += 1;
                brfbk;
            dbsf ClbssWritfr.LABEL_INSN:
                rfbdLbbfl(offsft + rfbdSiort(u + 1), lbbfls);
                u += 3;
                brfbk;
            dbsf ClbssWritfr.LABELW_INSN:
                rfbdLbbfl(offsft + rfbdInt(u + 1), lbbfls);
                u += 5;
                brfbk;
            dbsf ClbssWritfr.WIDE_INSN:
                opdodf = b[u + 1] & 0xFF;
                if (opdodf == Opdodfs.IINC) {
                    u += 6;
                } flsf {
                    u += 4;
                }
                brfbk;
            dbsf ClbssWritfr.TABL_INSN:
                // skips 0 to 3 pbdding bytfs
                u = u + 4 - (offsft & 3);
                // rfbds instrudtion
                rfbdLbbfl(offsft + rfbdInt(u), lbbfls);
                for (int i = rfbdInt(u + 8) - rfbdInt(u + 4) + 1; i > 0; --i) {
                    rfbdLbbfl(offsft + rfbdInt(u + 12), lbbfls);
                    u += 4;
                }
                u += 12;
                brfbk;
            dbsf ClbssWritfr.LOOK_INSN:
                // skips 0 to 3 pbdding bytfs
                u = u + 4 - (offsft & 3);
                // rfbds instrudtion
                rfbdLbbfl(offsft + rfbdInt(u), lbbfls);
                for (int i = rfbdInt(u + 4); i > 0; --i) {
                    rfbdLbbfl(offsft + rfbdInt(u + 12), lbbfls);
                    u += 8;
                }
                u += 8;
                brfbk;
            dbsf ClbssWritfr.VAR_INSN:
            dbsf ClbssWritfr.SBYTE_INSN:
            dbsf ClbssWritfr.LDC_INSN:
                u += 2;
                brfbk;
            dbsf ClbssWritfr.SHORT_INSN:
            dbsf ClbssWritfr.LDCW_INSN:
            dbsf ClbssWritfr.FIELDORMETH_INSN:
            dbsf ClbssWritfr.TYPE_INSN:
            dbsf ClbssWritfr.IINC_INSN:
                u += 3;
                brfbk;
            dbsf ClbssWritfr.ITFMETH_INSN:
            dbsf ClbssWritfr.INDYMETH_INSN:
                u += 5;
                brfbk;
            // dbsf MANA_INSN:
            dffbult:
                u += 4;
                brfbk;
            }
        }

        // rfbds tif try dbtdi fntrifs to find tif lbbfls, bnd blso visits tifm
        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            Lbbfl stbrt = rfbdLbbfl(rfbdUnsignfdSiort(u + 2), lbbfls);
            Lbbfl fnd = rfbdLbbfl(rfbdUnsignfdSiort(u + 4), lbbfls);
            Lbbfl ibndlfr = rfbdLbbfl(rfbdUnsignfdSiort(u + 6), lbbfls);
            String typf = rfbdUTF8(itfms[rfbdUnsignfdSiort(u + 8)], d);
            mv.visitTryCbtdiBlodk(stbrt, fnd, ibndlfr, typf);
            u += 8;
        }
        u += 2;

        // rfbds tif dodf bttributfs
        int[] tbnns = null; // stbrt indfx of fbdi visiblf typf bnnotbtion
        int[] itbnns = null; // stbrt indfx of fbdi invisiblf typf bnnotbtion
        int tbnn = 0; // durrfnt indfx in tbnns brrby
        int itbnn = 0; // durrfnt indfx in itbnns brrby
        int ntoff = -1; // nfxt visiblf typf bnnotbtion dodf offsft
        int nitoff = -1; // nfxt invisiblf typf bnnotbtion dodf offsft
        int vbrTbblf = 0;
        int vbrTypfTbblf = 0;
        boolfbn zip = truf;
        boolfbn unzip = (dontfxt.flbgs & EXPAND_FRAMES) != 0;
        int stbdkMbp = 0;
        int stbdkMbpSizf = 0;
        int frbmfCount = 0;
        Contfxt frbmf = null;
        Attributf bttributfs = null;

        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            String bttrNbmf = rfbdUTF8(u + 2, d);
            if ("LodblVbribblfTbblf".fqubls(bttrNbmf)) {
                if ((dontfxt.flbgs & SKIP_DEBUG) == 0) {
                    vbrTbblf = u + 8;
                    for (int j = rfbdUnsignfdSiort(u + 8), v = u; j > 0; --j) {
                        int lbbfl = rfbdUnsignfdSiort(v + 10);
                        if (lbbfls[lbbfl] == null) {
                            rfbdLbbfl(lbbfl, lbbfls).stbtus |= Lbbfl.DEBUG;
                        }
                        lbbfl += rfbdUnsignfdSiort(v + 12);
                        if (lbbfls[lbbfl] == null) {
                            rfbdLbbfl(lbbfl, lbbfls).stbtus |= Lbbfl.DEBUG;
                        }
                        v += 10;
                    }
                }
            } flsf if ("LodblVbribblfTypfTbblf".fqubls(bttrNbmf)) {
                vbrTypfTbblf = u + 8;
            } flsf if ("LinfNumbfrTbblf".fqubls(bttrNbmf)) {
                if ((dontfxt.flbgs & SKIP_DEBUG) == 0) {
                    for (int j = rfbdUnsignfdSiort(u + 8), v = u; j > 0; --j) {
                        int lbbfl = rfbdUnsignfdSiort(v + 10);
                        if (lbbfls[lbbfl] == null) {
                            rfbdLbbfl(lbbfl, lbbfls).stbtus |= Lbbfl.DEBUG;
                        }
                        lbbfls[lbbfl].linf = rfbdUnsignfdSiort(v + 12);
                        v += 4;
                    }
                }
            } flsf if (ANNOTATIONS
                    && "RuntimfVisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                tbnns = rfbdTypfAnnotbtions(mv, dontfxt, u + 8, truf);
                ntoff = tbnns.lfngti == 0 || rfbdBytf(tbnns[0]) < 0x43 ? -1
                        : rfbdUnsignfdSiort(tbnns[0] + 1);
            } flsf if (ANNOTATIONS
                    && "RuntimfInvisiblfTypfAnnotbtions".fqubls(bttrNbmf)) {
                itbnns = rfbdTypfAnnotbtions(mv, dontfxt, u + 8, fblsf);
                nitoff = itbnns.lfngti == 0 || rfbdBytf(itbnns[0]) < 0x43 ? -1
                        : rfbdUnsignfdSiort(itbnns[0] + 1);
            } flsf if (FRAMES && "StbdkMbpTbblf".fqubls(bttrNbmf)) {
                if ((dontfxt.flbgs & SKIP_FRAMES) == 0) {
                    stbdkMbp = u + 10;
                    stbdkMbpSizf = rfbdInt(u + 4);
                    frbmfCount = rfbdUnsignfdSiort(u + 8);
                }
                /*
                 * ifrf wf do not fxtrbdt tif lbbfls dorrfsponding to tif
                 * bttributf dontfnt. Tiis would rfquirf b full pbrsing of tif
                 * bttributf, wiidi would nffd to bf rfpfbtfd in tif sfdond
                 * pibsf (sff bflow). Instfbd tif dontfnt of tif bttributf is
                 * rfbd onf frbmf bt b timf (i.f. bftfr b frbmf ibs bffn
                 * visitfd, tif nfxt frbmf is rfbd), bnd tif lbbfls it dontbins
                 * brf blso fxtrbdtfd onf frbmf bt b timf. Tibnks to tif
                 * ordfring of frbmfs, ibving only b "onf frbmf lookbifbd" is
                 * not b problfm, i.f. it is not possiblf to sff bn offsft
                 * smbllfr tibn tif offsft of tif durrfnt insn bnd for wiidi no
                 * Lbbfl fxist.
                 */
                /*
                 * Tiis is not truf for UNINITIALIZED typf offsfts. Wf solvf
                 * tiis by pbrsing tif stbdk mbp tbblf witiout b full dfdoding
                 * (sff bflow).
                 */
            } flsf if (FRAMES && "StbdkMbp".fqubls(bttrNbmf)) {
                if ((dontfxt.flbgs & SKIP_FRAMES) == 0) {
                    zip = fblsf;
                    stbdkMbp = u + 10;
                    stbdkMbpSizf = rfbdInt(u + 4);
                    frbmfCount = rfbdUnsignfdSiort(u + 8);
                }
                /*
                 * IMPORTANT! ifrf wf bssumf tibt tif frbmfs brf ordfrfd, bs in
                 * tif StbdkMbpTbblf bttributf, bltiougi tiis is not gubrbntffd
                 * by tif bttributf formbt.
                 */
            } flsf {
                for (int j = 0; j < dontfxt.bttrs.lfngti; ++j) {
                    if (dontfxt.bttrs[j].typf.fqubls(bttrNbmf)) {
                        Attributf bttr = dontfxt.bttrs[j].rfbd(tiis, u + 8,
                                rfbdInt(u + 4), d, dodfStbrt - 8, lbbfls);
                        if (bttr != null) {
                            bttr.nfxt = bttributfs;
                            bttributfs = bttr;
                        }
                    }
                }
            }
            u += 6 + rfbdInt(u + 4);
        }
        u += 2;

        // gfnfrbtfs tif first (implidit) stbdk mbp frbmf
        if (FRAMES && stbdkMbp != 0) {
            /*
             * for tif first fxplidit frbmf tif offsft is not offsft_dfltb + 1
             * but only offsft_dfltb; sftting tif implidit frbmf offsft to -1
             * bllow tif usf of tif "offsft_dfltb + 1" rulf in bll dbsfs
             */
            frbmf = dontfxt;
            frbmf.offsft = -1;
            frbmf.modf = 0;
            frbmf.lodblCount = 0;
            frbmf.lodblDiff = 0;
            frbmf.stbdkCount = 0;
            frbmf.lodbl = nfw Objfdt[mbxLodbls];
            frbmf.stbdk = nfw Objfdt[mbxStbdk];
            if (unzip) {
                gftImpliditFrbmf(dontfxt);
            }
            /*
             * Finds lbbfls for UNINITIALIZED frbmf typfs. Instfbd of dfdoding
             * fbdi flfmfnt of tif stbdk mbp tbblf, wf look for 3 donsfdutivf
             * bytfs tibt "look likf" bn UNINITIALIZED typf (tbg 8, offsft
             * witiin dodf bounds, NEW instrudtion bt tiis offsft). Wf mby find
             * fblsf positivfs (i.f. not rfbl UNINITIALIZED typfs), but tiis
             * siould bf rbrf, bnd tif only donsfqufndf will bf tif drfbtion of
             * bn unnffdfd lbbfl. Tiis is bfttfr tibn drfbting b lbbfl for fbdi
             * NEW instrudtion, bnd fbstfr tibn fully dfdoding tif wiolf stbdk
             * mbp tbblf.
             */
            for (int i = stbdkMbp; i < stbdkMbp + stbdkMbpSizf - 2; ++i) {
                if (b[i] == 8) { // UNINITIALIZED FRAME TYPE
                    int v = rfbdUnsignfdSiort(i + 1);
                    if (v >= 0 && v < dodfLfngti) {
                        if ((b[dodfStbrt + v] & 0xFF) == Opdodfs.NEW) {
                            rfbdLbbfl(v, lbbfls);
                        }
                    }
                }
            }
        }

        // visits tif instrudtions
        u = dodfStbrt;
        wiilf (u < dodfEnd) {
            int offsft = u - dodfStbrt;

            // visits tif lbbfl bnd linf numbfr for tiis offsft, if bny
            Lbbfl l = lbbfls[offsft];
            if (l != null) {
                mv.visitLbbfl(l);
                if ((dontfxt.flbgs & SKIP_DEBUG) == 0 && l.linf > 0) {
                    mv.visitLinfNumbfr(l.linf, l);
                }
            }

            // visits tif frbmf for tiis offsft, if bny
            wiilf (FRAMES && frbmf != null
                    && (frbmf.offsft == offsft || frbmf.offsft == -1)) {
                // if tifrf is b frbmf for tiis offsft, mbkfs tif visitor visit
                // it, bnd rfbds tif nfxt frbmf if tifrf is onf.
                if (frbmf.offsft != -1) {
                    if (!zip || unzip) {
                        mv.visitFrbmf(Opdodfs.F_NEW, frbmf.lodblCount,
                                frbmf.lodbl, frbmf.stbdkCount, frbmf.stbdk);
                    } flsf {
                        mv.visitFrbmf(frbmf.modf, frbmf.lodblDiff, frbmf.lodbl,
                                frbmf.stbdkCount, frbmf.stbdk);
                    }
                }
                if (frbmfCount > 0) {
                    stbdkMbp = rfbdFrbmf(stbdkMbp, zip, unzip, frbmf);
                    --frbmfCount;
                } flsf {
                    frbmf = null;
                }
            }

            // visits tif instrudtion bt tiis offsft
            int opdodf = b[u] & 0xFF;
            switdi (ClbssWritfr.TYPE[opdodf]) {
            dbsf ClbssWritfr.NOARG_INSN:
                mv.visitInsn(opdodf);
                u += 1;
                brfbk;
            dbsf ClbssWritfr.IMPLVAR_INSN:
                if (opdodf > Opdodfs.ISTORE) {
                    opdodf -= 59; // ISTORE_0
                    mv.visitVbrInsn(Opdodfs.ISTORE + (opdodf >> 2),
                            opdodf & 0x3);
                } flsf {
                    opdodf -= 26; // ILOAD_0
                    mv.visitVbrInsn(Opdodfs.ILOAD + (opdodf >> 2), opdodf & 0x3);
                }
                u += 1;
                brfbk;
            dbsf ClbssWritfr.LABEL_INSN:
                mv.visitJumpInsn(opdodf, lbbfls[offsft + rfbdSiort(u + 1)]);
                u += 3;
                brfbk;
            dbsf ClbssWritfr.LABELW_INSN:
                mv.visitJumpInsn(opdodf - 33, lbbfls[offsft + rfbdInt(u + 1)]);
                u += 5;
                brfbk;
            dbsf ClbssWritfr.WIDE_INSN:
                opdodf = b[u + 1] & 0xFF;
                if (opdodf == Opdodfs.IINC) {
                    mv.visitIindInsn(rfbdUnsignfdSiort(u + 2), rfbdSiort(u + 4));
                    u += 6;
                } flsf {
                    mv.visitVbrInsn(opdodf, rfbdUnsignfdSiort(u + 2));
                    u += 4;
                }
                brfbk;
            dbsf ClbssWritfr.TABL_INSN: {
                // skips 0 to 3 pbdding bytfs
                u = u + 4 - (offsft & 3);
                // rfbds instrudtion
                int lbbfl = offsft + rfbdInt(u);
                int min = rfbdInt(u + 4);
                int mbx = rfbdInt(u + 8);
                Lbbfl[] tbblf = nfw Lbbfl[mbx - min + 1];
                u += 12;
                for (int i = 0; i < tbblf.lfngti; ++i) {
                    tbblf[i] = lbbfls[offsft + rfbdInt(u)];
                    u += 4;
                }
                mv.visitTbblfSwitdiInsn(min, mbx, lbbfls[lbbfl], tbblf);
                brfbk;
            }
            dbsf ClbssWritfr.LOOK_INSN: {
                // skips 0 to 3 pbdding bytfs
                u = u + 4 - (offsft & 3);
                // rfbds instrudtion
                int lbbfl = offsft + rfbdInt(u);
                int lfn = rfbdInt(u + 4);
                int[] kfys = nfw int[lfn];
                Lbbfl[] vblufs = nfw Lbbfl[lfn];
                u += 8;
                for (int i = 0; i < lfn; ++i) {
                    kfys[i] = rfbdInt(u);
                    vblufs[i] = lbbfls[offsft + rfbdInt(u + 4)];
                    u += 8;
                }
                mv.visitLookupSwitdiInsn(lbbfls[lbbfl], kfys, vblufs);
                brfbk;
            }
            dbsf ClbssWritfr.VAR_INSN:
                mv.visitVbrInsn(opdodf, b[u + 1] & 0xFF);
                u += 2;
                brfbk;
            dbsf ClbssWritfr.SBYTE_INSN:
                mv.visitIntInsn(opdodf, b[u + 1]);
                u += 2;
                brfbk;
            dbsf ClbssWritfr.SHORT_INSN:
                mv.visitIntInsn(opdodf, rfbdSiort(u + 1));
                u += 3;
                brfbk;
            dbsf ClbssWritfr.LDC_INSN:
                mv.visitLddInsn(rfbdConst(b[u + 1] & 0xFF, d));
                u += 2;
                brfbk;
            dbsf ClbssWritfr.LDCW_INSN:
                mv.visitLddInsn(rfbdConst(rfbdUnsignfdSiort(u + 1), d));
                u += 3;
                brfbk;
            dbsf ClbssWritfr.FIELDORMETH_INSN:
            dbsf ClbssWritfr.ITFMETH_INSN: {
                int dpIndfx = itfms[rfbdUnsignfdSiort(u + 1)];
                boolfbn itf = b[dpIndfx - 1] == ClbssWritfr.IMETH;
                String iownfr = rfbdClbss(dpIndfx, d);
                dpIndfx = itfms[rfbdUnsignfdSiort(dpIndfx + 2)];
                String inbmf = rfbdUTF8(dpIndfx, d);
                String idfsd = rfbdUTF8(dpIndfx + 2, d);
                if (opdodf < Opdodfs.INVOKEVIRTUAL) {
                    mv.visitFifldInsn(opdodf, iownfr, inbmf, idfsd);
                } flsf {
                    mv.visitMftiodInsn(opdodf, iownfr, inbmf, idfsd, itf);
                }
                if (opdodf == Opdodfs.INVOKEINTERFACE) {
                    u += 5;
                } flsf {
                    u += 3;
                }
                brfbk;
            }
            dbsf ClbssWritfr.INDYMETH_INSN: {
                int dpIndfx = itfms[rfbdUnsignfdSiort(u + 1)];
                int bsmIndfx = dontfxt.bootstrbpMftiods[rfbdUnsignfdSiort(dpIndfx)];
                Hbndlf bsm = (Hbndlf) rfbdConst(rfbdUnsignfdSiort(bsmIndfx), d);
                int bsmArgCount = rfbdUnsignfdSiort(bsmIndfx + 2);
                Objfdt[] bsmArgs = nfw Objfdt[bsmArgCount];
                bsmIndfx += 4;
                for (int i = 0; i < bsmArgCount; i++) {
                    bsmArgs[i] = rfbdConst(rfbdUnsignfdSiort(bsmIndfx), d);
                    bsmIndfx += 2;
                }
                dpIndfx = itfms[rfbdUnsignfdSiort(dpIndfx + 2)];
                String inbmf = rfbdUTF8(dpIndfx, d);
                String idfsd = rfbdUTF8(dpIndfx + 2, d);
                mv.visitInvokfDynbmidInsn(inbmf, idfsd, bsm, bsmArgs);
                u += 5;
                brfbk;
            }
            dbsf ClbssWritfr.TYPE_INSN:
                mv.visitTypfInsn(opdodf, rfbdClbss(u + 1, d));
                u += 3;
                brfbk;
            dbsf ClbssWritfr.IINC_INSN:
                mv.visitIindInsn(b[u + 1] & 0xFF, b[u + 2]);
                u += 3;
                brfbk;
            // dbsf MANA_INSN:
            dffbult:
                mv.visitMultiANfwArrbyInsn(rfbdClbss(u + 1, d), b[u + 3] & 0xFF);
                u += 4;
                brfbk;
            }

            // visit tif instrudtion bnnotbtions, if bny
            wiilf (tbnns != null && tbnn < tbnns.lfngti && ntoff <= offsft) {
                if (ntoff == offsft) {
                    int v = rfbdAnnotbtionTbrgft(dontfxt, tbnns[tbnn]);
                    rfbdAnnotbtionVblufs(v + 2, d, truf,
                            mv.visitInsnAnnotbtion(dontfxt.typfRff,
                                    dontfxt.typfPbti, rfbdUTF8(v, d), truf));
                }
                ntoff = ++tbnn >= tbnns.lfngti || rfbdBytf(tbnns[tbnn]) < 0x43 ? -1
                        : rfbdUnsignfdSiort(tbnns[tbnn] + 1);
            }
            wiilf (itbnns != null && itbnn < itbnns.lfngti && nitoff <= offsft) {
                if (nitoff == offsft) {
                    int v = rfbdAnnotbtionTbrgft(dontfxt, itbnns[itbnn]);
                    rfbdAnnotbtionVblufs(v + 2, d, truf,
                            mv.visitInsnAnnotbtion(dontfxt.typfRff,
                                    dontfxt.typfPbti, rfbdUTF8(v, d), fblsf));
                }
                nitoff = ++itbnn >= itbnns.lfngti
                        || rfbdBytf(itbnns[itbnn]) < 0x43 ? -1
                        : rfbdUnsignfdSiort(itbnns[itbnn] + 1);
            }
        }
        if (lbbfls[dodfLfngti] != null) {
            mv.visitLbbfl(lbbfls[dodfLfngti]);
        }

        // visits tif lodbl vbribblf tbblfs
        if ((dontfxt.flbgs & SKIP_DEBUG) == 0 && vbrTbblf != 0) {
            int[] typfTbblf = null;
            if (vbrTypfTbblf != 0) {
                u = vbrTypfTbblf + 2;
                typfTbblf = nfw int[rfbdUnsignfdSiort(vbrTypfTbblf) * 3];
                for (int i = typfTbblf.lfngti; i > 0;) {
                    typfTbblf[--i] = u + 6; // signbturf
                    typfTbblf[--i] = rfbdUnsignfdSiort(u + 8); // indfx
                    typfTbblf[--i] = rfbdUnsignfdSiort(u); // stbrt
                    u += 10;
                }
            }
            u = vbrTbblf + 2;
            for (int i = rfbdUnsignfdSiort(vbrTbblf); i > 0; --i) {
                int stbrt = rfbdUnsignfdSiort(u);
                int lfngti = rfbdUnsignfdSiort(u + 2);
                int indfx = rfbdUnsignfdSiort(u + 8);
                String vsignbturf = null;
                if (typfTbblf != null) {
                    for (int j = 0; j < typfTbblf.lfngti; j += 3) {
                        if (typfTbblf[j] == stbrt && typfTbblf[j + 1] == indfx) {
                            vsignbturf = rfbdUTF8(typfTbblf[j + 2], d);
                            brfbk;
                        }
                    }
                }
                mv.visitLodblVbribblf(rfbdUTF8(u + 4, d), rfbdUTF8(u + 6, d),
                        vsignbturf, lbbfls[stbrt], lbbfls[stbrt + lfngti],
                        indfx);
                u += 10;
            }
        }

        // visits tif lodbl vbribblfs typf bnnotbtions
        if (tbnns != null) {
            for (int i = 0; i < tbnns.lfngti; ++i) {
                if ((rfbdBytf(tbnns[i]) >> 1) == (0x40 >> 1)) {
                    int v = rfbdAnnotbtionTbrgft(dontfxt, tbnns[i]);
                    v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                            mv.visitLodblVbribblfAnnotbtion(dontfxt.typfRff,
                                    dontfxt.typfPbti, dontfxt.stbrt,
                                    dontfxt.fnd, dontfxt.indfx, rfbdUTF8(v, d),
                                    truf));
                }
            }
        }
        if (itbnns != null) {
            for (int i = 0; i < itbnns.lfngti; ++i) {
                if ((rfbdBytf(itbnns[i]) >> 1) == (0x40 >> 1)) {
                    int v = rfbdAnnotbtionTbrgft(dontfxt, itbnns[i]);
                    v = rfbdAnnotbtionVblufs(v + 2, d, truf,
                            mv.visitLodblVbribblfAnnotbtion(dontfxt.typfRff,
                                    dontfxt.typfPbti, dontfxt.stbrt,
                                    dontfxt.fnd, dontfxt.indfx, rfbdUTF8(v, d),
                                    fblsf));
                }
            }
        }

        // visits tif dodf bttributfs
        wiilf (bttributfs != null) {
            Attributf bttr = bttributfs.nfxt;
            bttributfs.nfxt = null;
            mv.visitAttributf(bttributfs);
            bttributfs = bttr;
        }

        // visits tif mbx stbdk bnd mbx lodbls vblufs
        mv.visitMbxs(mbxStbdk, mbxLodbls);
    }

    /**
     * Pbrsfs b typf bnnotbtion tbblf to find tif lbbfls, bnd to visit tif try
     * dbtdi blodk bnnotbtions.
     *
     * @pbrbm u
     *            tif stbrt offsft of b typf bnnotbtion tbblf.
     * @pbrbm mv
     *            tif mftiod visitor to bf usfd to visit tif try dbtdi blodk
     *            bnnotbtions.
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd.
     * @pbrbm visiblf
     *            if tif typf bnnotbtion tbblf to pbrsf dontbins runtimf visiblf
     *            bnnotbtions.
     * @rfturn tif stbrt offsft of fbdi typf bnnotbtion in tif pbrsfd tbblf.
     */
    privbtf int[] rfbdTypfAnnotbtions(finbl MftiodVisitor mv,
            finbl Contfxt dontfxt, int u, boolfbn visiblf) {
        dibr[] d = dontfxt.bufffr;
        int[] offsfts = nfw int[rfbdUnsignfdSiort(u)];
        u += 2;
        for (int i = 0; i < offsfts.lfngti; ++i) {
            offsfts[i] = u;
            int tbrgft = rfbdInt(u);
            switdi (tbrgft >>> 24) {
            dbsf 0x00: // CLASS_TYPE_PARAMETER
            dbsf 0x01: // METHOD_TYPE_PARAMETER
            dbsf 0x16: // METHOD_FORMAL_PARAMETER
                u += 2;
                brfbk;
            dbsf 0x13: // FIELD
            dbsf 0x14: // METHOD_RETURN
            dbsf 0x15: // METHOD_RECEIVER
                u += 1;
                brfbk;
            dbsf 0x40: // LOCAL_VARIABLE
            dbsf 0x41: // RESOURCE_VARIABLE
                for (int j = rfbdUnsignfdSiort(u + 1); j > 0; --j) {
                    int stbrt = rfbdUnsignfdSiort(u + 3);
                    int lfngti = rfbdUnsignfdSiort(u + 5);
                    rfbdLbbfl(stbrt, dontfxt.lbbfls);
                    rfbdLbbfl(stbrt + lfngti, dontfxt.lbbfls);
                    u += 6;
                }
                u += 3;
                brfbk;
            dbsf 0x47: // CAST
            dbsf 0x48: // CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT
            dbsf 0x49: // METHOD_INVOCATION_TYPE_ARGUMENT
            dbsf 0x4A: // CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT
            dbsf 0x4B: // METHOD_REFERENCE_TYPE_ARGUMENT
                u += 4;
                brfbk;
            // dbsf 0x10: // CLASS_EXTENDS
            // dbsf 0x11: // CLASS_TYPE_PARAMETER_BOUND
            // dbsf 0x12: // METHOD_TYPE_PARAMETER_BOUND
            // dbsf 0x17: // THROWS
            // dbsf 0x42: // EXCEPTION_PARAMETER
            // dbsf 0x43: // INSTANCEOF
            // dbsf 0x44: // NEW
            // dbsf 0x45: // CONSTRUCTOR_REFERENCE
            // dbsf 0x46: // METHOD_REFERENCE
            dffbult:
                u += 3;
                brfbk;
            }
            int pbtiLfngti = rfbdBytf(u);
            if ((tbrgft >>> 24) == 0x42) {
                TypfPbti pbti = pbtiLfngti == 0 ? null : nfw TypfPbti(b, u);
                u += 1 + 2 * pbtiLfngti;
                u = rfbdAnnotbtionVblufs(u + 2, d, truf,
                        mv.visitTryCbtdiAnnotbtion(tbrgft, pbti,
                                rfbdUTF8(u, d), visiblf));
            } flsf {
                u = rfbdAnnotbtionVblufs(u + 3 + 2 * pbtiLfngti, d, truf, null);
            }
        }
        rfturn offsfts;
    }

    /**
     * Pbrsfs tif ifbdfr of b typf bnnotbtion to fxtrbdt its tbrgft_typf bnd
     * tbrgft_pbti (tif rfsult is storfd in tif givfn dontfxt), bnd rfturns tif
     * stbrt offsft of tif rfst of tif typf_bnnotbtion strudturf (i.f. tif
     * offsft to tif typf_indfx fifld, wiidi is followfd by
     * num_flfmfnt_vbluf_pbirs bnd tifn tif nbmf,vbluf pbirs).
     *
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd. Tiis is wifrf tif
     *            fxtrbdtfd tbrgft_typf bnd tbrgft_pbti must bf storfd.
     * @pbrbm u
     *            tif stbrt offsft of b typf_bnnotbtion strudturf.
     * @rfturn tif stbrt offsft of tif rfst of tif typf_bnnotbtion strudturf.
     */
    privbtf int rfbdAnnotbtionTbrgft(finbl Contfxt dontfxt, int u) {
        int tbrgft = rfbdInt(u);
        switdi (tbrgft >>> 24) {
        dbsf 0x00: // CLASS_TYPE_PARAMETER
        dbsf 0x01: // METHOD_TYPE_PARAMETER
        dbsf 0x16: // METHOD_FORMAL_PARAMETER
            tbrgft &= 0xFFFF0000;
            u += 2;
            brfbk;
        dbsf 0x13: // FIELD
        dbsf 0x14: // METHOD_RETURN
        dbsf 0x15: // METHOD_RECEIVER
            tbrgft &= 0xFF000000;
            u += 1;
            brfbk;
        dbsf 0x40: // LOCAL_VARIABLE
        dbsf 0x41: { // RESOURCE_VARIABLE
            tbrgft &= 0xFF000000;
            int n = rfbdUnsignfdSiort(u + 1);
            dontfxt.stbrt = nfw Lbbfl[n];
            dontfxt.fnd = nfw Lbbfl[n];
            dontfxt.indfx = nfw int[n];
            u += 3;
            for (int i = 0; i < n; ++i) {
                int stbrt = rfbdUnsignfdSiort(u);
                int lfngti = rfbdUnsignfdSiort(u + 2);
                dontfxt.stbrt[i] = rfbdLbbfl(stbrt, dontfxt.lbbfls);
                dontfxt.fnd[i] = rfbdLbbfl(stbrt + lfngti, dontfxt.lbbfls);
                dontfxt.indfx[i] = rfbdUnsignfdSiort(u + 4);
                u += 6;
            }
            brfbk;
        }
        dbsf 0x47: // CAST
        dbsf 0x48: // CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT
        dbsf 0x49: // METHOD_INVOCATION_TYPE_ARGUMENT
        dbsf 0x4A: // CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT
        dbsf 0x4B: // METHOD_REFERENCE_TYPE_ARGUMENT
            tbrgft &= 0xFF0000FF;
            u += 4;
            brfbk;
        // dbsf 0x10: // CLASS_EXTENDS
        // dbsf 0x11: // CLASS_TYPE_PARAMETER_BOUND
        // dbsf 0x12: // METHOD_TYPE_PARAMETER_BOUND
        // dbsf 0x17: // THROWS
        // dbsf 0x42: // EXCEPTION_PARAMETER
        // dbsf 0x43: // INSTANCEOF
        // dbsf 0x44: // NEW
        // dbsf 0x45: // CONSTRUCTOR_REFERENCE
        // dbsf 0x46: // METHOD_REFERENCE
        dffbult:
            tbrgft &= (tbrgft >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;
            u += 3;
            brfbk;
        }
        int pbtiLfngti = rfbdBytf(u);
        dontfxt.typfRff = tbrgft;
        dontfxt.typfPbti = pbtiLfngti == 0 ? null : nfw TypfPbti(b, u);
        rfturn u + 1 + 2 * pbtiLfngti;
    }

    /**
     * Rfbds pbrbmftfr bnnotbtions bnd mbkfs tif givfn visitor visit tifm.
     *
     * @pbrbm mv
     *            tif visitor tibt must visit tif bnnotbtions.
     * @pbrbm dontfxt
     *            informbtion bbout tif dlbss bfing pbrsfd.
     * @pbrbm v
     *            stbrt offsft in {@link #b b} of tif bnnotbtions to bf rfbd.
     * @pbrbm visiblf
     *            <tt>truf</tt> if tif bnnotbtions to bf rfbd brf visiblf bt
     *            runtimf.
     */
    privbtf void rfbdPbrbmftfrAnnotbtions(finbl MftiodVisitor mv,
            finbl Contfxt dontfxt, int v, finbl boolfbn visiblf) {
        int i;
        int n = b[v++] & 0xFF;
        // workbround for b bug in jbvbd (jbvbd dompilfr gfnfrbtfs b pbrbmftfr
        // bnnotbtion brrby wiosf sizf is fqubl to tif numbfr of pbrbmftfrs in
        // tif Jbvb sourdf filf, wiilf it siould gfnfrbtf bn brrby wiosf sizf is
        // fqubl to tif numbfr of pbrbmftfrs in tif mftiod dfsdriptor - wiidi
        // indludfs tif syntiftid pbrbmftfrs bddfd by tif dompilfr). Tiis work-
        // bround supposfs tibt tif syntiftid pbrbmftfrs brf tif first onfs.
        int syntiftids = Typf.gftArgumfntTypfs(dontfxt.dfsd).lfngti - n;
        AnnotbtionVisitor bv;
        for (i = 0; i < syntiftids; ++i) {
            // virtubl bnnotbtion to dftfdt syntiftid pbrbmftfrs in MftiodWritfr
            bv = mv.visitPbrbmftfrAnnotbtion(i, "Ljbvb/lbng/Syntiftid;", fblsf);
            if (bv != null) {
                bv.visitEnd();
            }
        }
        dibr[] d = dontfxt.bufffr;
        for (; i < n + syntiftids; ++i) {
            int j = rfbdUnsignfdSiort(v);
            v += 2;
            for (; j > 0; --j) {
                bv = mv.visitPbrbmftfrAnnotbtion(i, rfbdUTF8(v, d), visiblf);
                v = rfbdAnnotbtionVblufs(v + 2, d, truf, bv);
            }
        }
    }

    /**
     * Rfbds tif vblufs of bn bnnotbtion bnd mbkfs tif givfn visitor visit tifm.
     *
     * @pbrbm v
     *            tif stbrt offsft in {@link #b b} of tif vblufs to bf rfbd
     *            (indluding tif unsignfd siort tibt givfs tif numbfr of
     *            vblufs).
     * @pbrbm buf
     *            bufffr to bf usfd to dbll {@link #rfbdUTF8 rfbdUTF8},
     *            {@link #rfbdClbss(int,dibr[]) rfbdClbss} or {@link #rfbdConst
     *            rfbdConst}.
     * @pbrbm nbmfd
     *            if tif bnnotbtion vblufs brf nbmfd or not.
     * @pbrbm bv
     *            tif visitor tibt must visit tif vblufs.
     * @rfturn tif fnd offsft of tif bnnotbtion vblufs.
     */
    privbtf int rfbdAnnotbtionVblufs(int v, finbl dibr[] buf,
            finbl boolfbn nbmfd, finbl AnnotbtionVisitor bv) {
        int i = rfbdUnsignfdSiort(v);
        v += 2;
        if (nbmfd) {
            for (; i > 0; --i) {
                v = rfbdAnnotbtionVbluf(v + 2, buf, rfbdUTF8(v, buf), bv);
            }
        } flsf {
            for (; i > 0; --i) {
                v = rfbdAnnotbtionVbluf(v, buf, null, bv);
            }
        }
        if (bv != null) {
            bv.visitEnd();
        }
        rfturn v;
    }

    /**
     * Rfbds b vbluf of bn bnnotbtion bnd mbkfs tif givfn visitor visit it.
     *
     * @pbrbm v
     *            tif stbrt offsft in {@link #b b} of tif vbluf to bf rfbd
     *            (<i>not indluding tif vbluf nbmf donstbnt pool indfx</i>).
     * @pbrbm buf
     *            bufffr to bf usfd to dbll {@link #rfbdUTF8 rfbdUTF8},
     *            {@link #rfbdClbss(int,dibr[]) rfbdClbss} or {@link #rfbdConst
     *            rfbdConst}.
     * @pbrbm nbmf
     *            tif nbmf of tif vbluf to bf rfbd.
     * @pbrbm bv
     *            tif visitor tibt must visit tif vbluf.
     * @rfturn tif fnd offsft of tif bnnotbtion vbluf.
     */
    privbtf int rfbdAnnotbtionVbluf(int v, finbl dibr[] buf, finbl String nbmf,
            finbl AnnotbtionVisitor bv) {
        int i;
        if (bv == null) {
            switdi (b[v] & 0xFF) {
            dbsf 'f': // fnum_donst_vbluf
                rfturn v + 5;
            dbsf '@': // bnnotbtion_vbluf
                rfturn rfbdAnnotbtionVblufs(v + 3, buf, truf, null);
            dbsf '[': // brrby_vbluf
                rfturn rfbdAnnotbtionVblufs(v + 1, buf, fblsf, null);
            dffbult:
                rfturn v + 3;
            }
        }
        switdi (b[v++] & 0xFF) {
        dbsf 'I': // pointfr to CONSTANT_Intfgfr
        dbsf 'J': // pointfr to CONSTANT_Long
        dbsf 'F': // pointfr to CONSTANT_Flobt
        dbsf 'D': // pointfr to CONSTANT_Doublf
            bv.visit(nbmf, rfbdConst(rfbdUnsignfdSiort(v), buf));
            v += 2;
            brfbk;
        dbsf 'B': // pointfr to CONSTANT_Bytf
            bv.visit(nbmf,
                    nfw Bytf((bytf) rfbdInt(itfms[rfbdUnsignfdSiort(v)])));
            v += 2;
            brfbk;
        dbsf 'Z': // pointfr to CONSTANT_Boolfbn
            bv.visit(nbmf,
                    rfbdInt(itfms[rfbdUnsignfdSiort(v)]) == 0 ? Boolfbn.FALSE
                            : Boolfbn.TRUE);
            v += 2;
            brfbk;
        dbsf 'S': // pointfr to CONSTANT_Siort
            bv.visit(nbmf, nfw Siort(
                    (siort) rfbdInt(itfms[rfbdUnsignfdSiort(v)])));
            v += 2;
            brfbk;
        dbsf 'C': // pointfr to CONSTANT_Cibr
            bv.visit(nbmf, nfw Cibrbdtfr(
                    (dibr) rfbdInt(itfms[rfbdUnsignfdSiort(v)])));
            v += 2;
            brfbk;
        dbsf 's': // pointfr to CONSTANT_Utf8
            bv.visit(nbmf, rfbdUTF8(v, buf));
            v += 2;
            brfbk;
        dbsf 'f': // fnum_donst_vbluf
            bv.visitEnum(nbmf, rfbdUTF8(v, buf), rfbdUTF8(v + 2, buf));
            v += 4;
            brfbk;
        dbsf 'd': // dlbss_info
            bv.visit(nbmf, Typf.gftTypf(rfbdUTF8(v, buf)));
            v += 2;
            brfbk;
        dbsf '@': // bnnotbtion_vbluf
            v = rfbdAnnotbtionVblufs(v + 2, buf, truf,
                    bv.visitAnnotbtion(nbmf, rfbdUTF8(v, buf)));
            brfbk;
        dbsf '[': // brrby_vbluf
            int sizf = rfbdUnsignfdSiort(v);
            v += 2;
            if (sizf == 0) {
                rfturn rfbdAnnotbtionVblufs(v - 2, buf, fblsf,
                        bv.visitArrby(nbmf));
            }
            switdi (tiis.b[v++] & 0xFF) {
            dbsf 'B':
                bytf[] bv = nfw bytf[sizf];
                for (i = 0; i < sizf; i++) {
                    bv[i] = (bytf) rfbdInt(itfms[rfbdUnsignfdSiort(v)]);
                    v += 3;
                }
                bv.visit(nbmf, bv);
                --v;
                brfbk;
            dbsf 'Z':
                boolfbn[] zv = nfw boolfbn[sizf];
                for (i = 0; i < sizf; i++) {
                    zv[i] = rfbdInt(itfms[rfbdUnsignfdSiort(v)]) != 0;
                    v += 3;
                }
                bv.visit(nbmf, zv);
                --v;
                brfbk;
            dbsf 'S':
                siort[] sv = nfw siort[sizf];
                for (i = 0; i < sizf; i++) {
                    sv[i] = (siort) rfbdInt(itfms[rfbdUnsignfdSiort(v)]);
                    v += 3;
                }
                bv.visit(nbmf, sv);
                --v;
                brfbk;
            dbsf 'C':
                dibr[] dv = nfw dibr[sizf];
                for (i = 0; i < sizf; i++) {
                    dv[i] = (dibr) rfbdInt(itfms[rfbdUnsignfdSiort(v)]);
                    v += 3;
                }
                bv.visit(nbmf, dv);
                --v;
                brfbk;
            dbsf 'I':
                int[] iv = nfw int[sizf];
                for (i = 0; i < sizf; i++) {
                    iv[i] = rfbdInt(itfms[rfbdUnsignfdSiort(v)]);
                    v += 3;
                }
                bv.visit(nbmf, iv);
                --v;
                brfbk;
            dbsf 'J':
                long[] lv = nfw long[sizf];
                for (i = 0; i < sizf; i++) {
                    lv[i] = rfbdLong(itfms[rfbdUnsignfdSiort(v)]);
                    v += 3;
                }
                bv.visit(nbmf, lv);
                --v;
                brfbk;
            dbsf 'F':
                flobt[] fv = nfw flobt[sizf];
                for (i = 0; i < sizf; i++) {
                    fv[i] = Flobt
                            .intBitsToFlobt(rfbdInt(itfms[rfbdUnsignfdSiort(v)]));
                    v += 3;
                }
                bv.visit(nbmf, fv);
                --v;
                brfbk;
            dbsf 'D':
                doublf[] dv = nfw doublf[sizf];
                for (i = 0; i < sizf; i++) {
                    dv[i] = Doublf
                            .longBitsToDoublf(rfbdLong(itfms[rfbdUnsignfdSiort(v)]));
                    v += 3;
                }
                bv.visit(nbmf, dv);
                --v;
                brfbk;
            dffbult:
                v = rfbdAnnotbtionVblufs(v - 3, buf, fblsf, bv.visitArrby(nbmf));
            }
        }
        rfturn v;
    }

    /**
     * Computfs tif implidit frbmf of tif mftiod durrfntly bfing pbrsfd (bs
     * dffinfd in tif givfn {@link Contfxt}) bnd storfs it in tif givfn dontfxt.
     *
     * @pbrbm frbmf
     *            informbtion bbout tif dlbss bfing pbrsfd.
     */
    privbtf void gftImpliditFrbmf(finbl Contfxt frbmf) {
        String dfsd = frbmf.dfsd;
        Objfdt[] lodbls = frbmf.lodbl;
        int lodbl = 0;
        if ((frbmf.bddfss & Opdodfs.ACC_STATIC) == 0) {
            if ("<init>".fqubls(frbmf.nbmf)) {
                lodbls[lodbl++] = Opdodfs.UNINITIALIZED_THIS;
            } flsf {
                lodbls[lodbl++] = rfbdClbss(ifbdfr + 2, frbmf.bufffr);
            }
        }
        int i = 1;
        loop: wiilf (truf) {
            int j = i;
            switdi (dfsd.dibrAt(i++)) {
            dbsf 'Z':
            dbsf 'C':
            dbsf 'B':
            dbsf 'S':
            dbsf 'I':
                lodbls[lodbl++] = Opdodfs.INTEGER;
                brfbk;
            dbsf 'F':
                lodbls[lodbl++] = Opdodfs.FLOAT;
                brfbk;
            dbsf 'J':
                lodbls[lodbl++] = Opdodfs.LONG;
                brfbk;
            dbsf 'D':
                lodbls[lodbl++] = Opdodfs.DOUBLE;
                brfbk;
            dbsf '[':
                wiilf (dfsd.dibrAt(i) == '[') {
                    ++i;
                }
                if (dfsd.dibrAt(i) == 'L') {
                    ++i;
                    wiilf (dfsd.dibrAt(i) != ';') {
                        ++i;
                    }
                }
                lodbls[lodbl++] = dfsd.substring(j, ++i);
                brfbk;
            dbsf 'L':
                wiilf (dfsd.dibrAt(i) != ';') {
                    ++i;
                }
                lodbls[lodbl++] = dfsd.substring(j + 1, i++);
                brfbk;
            dffbult:
                brfbk loop;
            }
        }
        frbmf.lodblCount = lodbl;
    }

    /**
     * Rfbds b stbdk mbp frbmf bnd storfs tif rfsult in tif givfn
     * {@link Contfxt} objfdt.
     *
     * @pbrbm stbdkMbp
     *            tif stbrt offsft of b stbdk mbp frbmf in tif dlbss filf.
     * @pbrbm zip
     *            if tif stbdk mbp frbmf bt stbdkMbp is domprfssfd or not.
     * @pbrbm unzip
     *            if tif stbdk mbp frbmf must bf undomprfssfd.
     * @pbrbm frbmf
     *            wifrf tif pbrsfd stbdk mbp frbmf must bf storfd.
     * @rfturn tif offsft of tif first bytf following tif pbrsfd frbmf.
     */
    privbtf int rfbdFrbmf(int stbdkMbp, boolfbn zip, boolfbn unzip,
            Contfxt frbmf) {
        dibr[] d = frbmf.bufffr;
        Lbbfl[] lbbfls = frbmf.lbbfls;
        int tbg;
        int dfltb;
        if (zip) {
            tbg = b[stbdkMbp++] & 0xFF;
        } flsf {
            tbg = MftiodWritfr.FULL_FRAME;
            frbmf.offsft = -1;
        }
        frbmf.lodblDiff = 0;
        if (tbg < MftiodWritfr.SAME_LOCALS_1_STACK_ITEM_FRAME) {
            dfltb = tbg;
            frbmf.modf = Opdodfs.F_SAME;
            frbmf.stbdkCount = 0;
        } flsf if (tbg < MftiodWritfr.RESERVED) {
            dfltb = tbg - MftiodWritfr.SAME_LOCALS_1_STACK_ITEM_FRAME;
            stbdkMbp = rfbdFrbmfTypf(frbmf.stbdk, 0, stbdkMbp, d, lbbfls);
            frbmf.modf = Opdodfs.F_SAME1;
            frbmf.stbdkCount = 1;
        } flsf {
            dfltb = rfbdUnsignfdSiort(stbdkMbp);
            stbdkMbp += 2;
            if (tbg == MftiodWritfr.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
                stbdkMbp = rfbdFrbmfTypf(frbmf.stbdk, 0, stbdkMbp, d, lbbfls);
                frbmf.modf = Opdodfs.F_SAME1;
                frbmf.stbdkCount = 1;
            } flsf if (tbg >= MftiodWritfr.CHOP_FRAME
                    && tbg < MftiodWritfr.SAME_FRAME_EXTENDED) {
                frbmf.modf = Opdodfs.F_CHOP;
                frbmf.lodblDiff = MftiodWritfr.SAME_FRAME_EXTENDED - tbg;
                frbmf.lodblCount -= frbmf.lodblDiff;
                frbmf.stbdkCount = 0;
            } flsf if (tbg == MftiodWritfr.SAME_FRAME_EXTENDED) {
                frbmf.modf = Opdodfs.F_SAME;
                frbmf.stbdkCount = 0;
            } flsf if (tbg < MftiodWritfr.FULL_FRAME) {
                int lodbl = unzip ? frbmf.lodblCount : 0;
                for (int i = tbg - MftiodWritfr.SAME_FRAME_EXTENDED; i > 0; i--) {
                    stbdkMbp = rfbdFrbmfTypf(frbmf.lodbl, lodbl++, stbdkMbp, d,
                            lbbfls);
                }
                frbmf.modf = Opdodfs.F_APPEND;
                frbmf.lodblDiff = tbg - MftiodWritfr.SAME_FRAME_EXTENDED;
                frbmf.lodblCount += frbmf.lodblDiff;
                frbmf.stbdkCount = 0;
            } flsf { // if (tbg == FULL_FRAME) {
                frbmf.modf = Opdodfs.F_FULL;
                int n = rfbdUnsignfdSiort(stbdkMbp);
                stbdkMbp += 2;
                frbmf.lodblDiff = n;
                frbmf.lodblCount = n;
                for (int lodbl = 0; n > 0; n--) {
                    stbdkMbp = rfbdFrbmfTypf(frbmf.lodbl, lodbl++, stbdkMbp, d,
                            lbbfls);
                }
                n = rfbdUnsignfdSiort(stbdkMbp);
                stbdkMbp += 2;
                frbmf.stbdkCount = n;
                for (int stbdk = 0; n > 0; n--) {
                    stbdkMbp = rfbdFrbmfTypf(frbmf.stbdk, stbdk++, stbdkMbp, d,
                            lbbfls);
                }
            }
        }
        frbmf.offsft += dfltb + 1;
        rfbdLbbfl(frbmf.offsft, lbbfls);
        rfturn stbdkMbp;
    }

    /**
     * Rfbds b stbdk mbp frbmf typf bnd storfs it bt tif givfn indfx in tif
     * givfn brrby.
     *
     * @pbrbm frbmf
     *            tif brrby wifrf tif pbrsfd typf must bf storfd.
     * @pbrbm indfx
     *            tif indfx in 'frbmf' wifrf tif pbrsfd typf must bf storfd.
     * @pbrbm v
     *            tif stbrt offsft of tif stbdk mbp frbmf typf to rfbd.
     * @pbrbm buf
     *            b bufffr to rfbd strings.
     * @pbrbm lbbfls
     *            tif lbbfls of tif mftiod durrfntly bfing pbrsfd, indfxfd by
     *            tifir offsft. If tif pbrsfd typf is bn Uninitiblizfd typf, b
     *            nfw lbbfl for tif dorrfsponding NEW instrudtion is storfd in
     *            tiis brrby if it dofs not blrfbdy fxist.
     * @rfturn tif offsft of tif first bytf bftfr tif pbrsfd typf.
     */
    privbtf int rfbdFrbmfTypf(finbl Objfdt[] frbmf, finbl int indfx, int v,
            finbl dibr[] buf, finbl Lbbfl[] lbbfls) {
        int typf = b[v++] & 0xFF;
        switdi (typf) {
        dbsf 0:
            frbmf[indfx] = Opdodfs.TOP;
            brfbk;
        dbsf 1:
            frbmf[indfx] = Opdodfs.INTEGER;
            brfbk;
        dbsf 2:
            frbmf[indfx] = Opdodfs.FLOAT;
            brfbk;
        dbsf 3:
            frbmf[indfx] = Opdodfs.DOUBLE;
            brfbk;
        dbsf 4:
            frbmf[indfx] = Opdodfs.LONG;
            brfbk;
        dbsf 5:
            frbmf[indfx] = Opdodfs.NULL;
            brfbk;
        dbsf 6:
            frbmf[indfx] = Opdodfs.UNINITIALIZED_THIS;
            brfbk;
        dbsf 7: // Objfdt
            frbmf[indfx] = rfbdClbss(v, buf);
            v += 2;
            brfbk;
        dffbult: // Uninitiblizfd
            frbmf[indfx] = rfbdLbbfl(rfbdUnsignfdSiort(v), lbbfls);
            v += 2;
        }
        rfturn v;
    }

    /**
     * Rfturns tif lbbfl dorrfsponding to tif givfn offsft. Tif dffbult
     * implfmfntbtion of tiis mftiod drfbtfs b lbbfl for tif givfn offsft if it
     * ibs not bffn blrfbdy drfbtfd.
     *
     * @pbrbm offsft
     *            b bytfdodf offsft in b mftiod.
     * @pbrbm lbbfls
     *            tif blrfbdy drfbtfd lbbfls, indfxfd by tifir offsft. If b
     *            lbbfl blrfbdy fxists for offsft tiis mftiod must not drfbtf b
     *            nfw onf. Otifrwisf it must storf tif nfw lbbfl in tiis brrby.
     * @rfturn b non null Lbbfl, wiidi must bf fqubl to lbbfls[offsft].
     */
    protfdtfd Lbbfl rfbdLbbfl(int offsft, Lbbfl[] lbbfls) {
        if (lbbfls[offsft] == null) {
            lbbfls[offsft] = nfw Lbbfl();
        }
        rfturn lbbfls[offsft];
    }

    /**
     * Rfturns tif stbrt indfx of tif bttributf_info strudturf of tiis dlbss.
     *
     * @rfturn tif stbrt indfx of tif bttributf_info strudturf of tiis dlbss.
     */
    privbtf int gftAttributfs() {
        // skips tif ifbdfr
        int u = ifbdfr + 8 + rfbdUnsignfdSiort(ifbdfr + 6) * 2;
        // skips fiflds bnd mftiods
        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            for (int j = rfbdUnsignfdSiort(u + 8); j > 0; --j) {
                u += 6 + rfbdInt(u + 12);
            }
            u += 8;
        }
        u += 2;
        for (int i = rfbdUnsignfdSiort(u); i > 0; --i) {
            for (int j = rfbdUnsignfdSiort(u + 8); j > 0; --j) {
                u += 6 + rfbdInt(u + 12);
            }
            u += 8;
        }
        // tif bttributf_info strudturf stbrts just bftfr tif mftiods
        rfturn u + 2;
    }

    /**
     * Rfbds bn bttributf in {@link #b b}.
     *
     * @pbrbm bttrs
     *            prototypfs of tif bttributfs tibt must bf pbrsfd during tif
     *            visit of tif dlbss. Any bttributf wiosf typf is not fqubl to
     *            tif typf of onf tif prototypfs is ignorfd (i.f. bn fmpty
     *            {@link Attributf} instbndf is rfturnfd).
     * @pbrbm typf
     *            tif typf of tif bttributf.
     * @pbrbm off
     *            indfx of tif first bytf of tif bttributf's dontfnt in
     *            {@link #b b}. Tif 6 bttributf ifbdfr bytfs, dontbining tif
     *            typf bnd tif lfngti of tif bttributf, brf not tbkfn into
     *            bddount ifrf (tify ibvf blrfbdy bffn rfbd).
     * @pbrbm lfn
     *            tif lfngti of tif bttributf's dontfnt.
     * @pbrbm buf
     *            bufffr to bf usfd to dbll {@link #rfbdUTF8 rfbdUTF8},
     *            {@link #rfbdClbss(int,dibr[]) rfbdClbss} or {@link #rfbdConst
     *            rfbdConst}.
     * @pbrbm dodfOff
     *            indfx of tif first bytf of dodf's bttributf dontfnt in
     *            {@link #b b}, or -1 if tif bttributf to bf rfbd is not b dodf
     *            bttributf. Tif 6 bttributf ifbdfr bytfs, dontbining tif typf
     *            bnd tif lfngti of tif bttributf, brf not tbkfn into bddount
     *            ifrf.
     * @pbrbm lbbfls
     *            tif lbbfls of tif mftiod's dodf, or <tt>null</tt> if tif
     *            bttributf to bf rfbd is not b dodf bttributf.
     * @rfturn tif bttributf tibt ibs bffn rfbd, or <tt>null</tt> to skip tiis
     *         bttributf.
     */
    privbtf Attributf rfbdAttributf(finbl Attributf[] bttrs, finbl String typf,
            finbl int off, finbl int lfn, finbl dibr[] buf, finbl int dodfOff,
            finbl Lbbfl[] lbbfls) {
        for (int i = 0; i < bttrs.lfngti; ++i) {
            if (bttrs[i].typf.fqubls(typf)) {
                rfturn bttrs[i].rfbd(tiis, off, lfn, buf, dodfOff, lbbfls);
            }
        }
        rfturn nfw Attributf(typf).rfbd(tiis, off, lfn, null, -1, null);
    }

    // ------------------------------------------------------------------------
    // Utility mftiods: low lfvfl pbrsing
    // ------------------------------------------------------------------------

    /**
     * Rfturns tif numbfr of donstbnt pool itfms in {@link #b b}.
     *
     * @rfturn tif numbfr of donstbnt pool itfms in {@link #b b}.
     */
    publid int gftItfmCount() {
        rfturn itfms.lfngti;
    }

    /**
     * Rfturns tif stbrt indfx of tif donstbnt pool itfm in {@link #b b}, plus
     * onf. <i>Tiis mftiod is intfndfd for {@link Attributf} sub dlbssfs, bnd is
     * normblly not nffdfd by dlbss gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm itfm
     *            tif indfx b donstbnt pool itfm.
     * @rfturn tif stbrt indfx of tif donstbnt pool itfm in {@link #b b}, plus
     *         onf.
     */
    publid int gftItfm(finbl int itfm) {
        rfturn itfms[itfm];
    }

    /**
     * Rfturns tif mbximum lfngti of tif strings dontbinfd in tif donstbnt pool
     * of tif dlbss.
     *
     * @rfturn tif mbximum lfngti of tif strings dontbinfd in tif donstbnt pool
     *         of tif dlbss.
     */
    publid int gftMbxStringLfngti() {
        rfturn mbxStringLfngti;
    }

    /**
     * Rfbds b bytf vbluf in {@link #b b}. <i>Tiis mftiod is intfndfd for
     * {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by dlbss
     * gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of tif vbluf to bf rfbd in {@link #b b}.
     * @rfturn tif rfbd vbluf.
     */
    publid int rfbdBytf(finbl int indfx) {
        rfturn b[indfx] & 0xFF;
    }

    /**
     * Rfbds bn unsignfd siort vbluf in {@link #b b}. <i>Tiis mftiod is intfndfd
     * for {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by dlbss
     * gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of tif vbluf to bf rfbd in {@link #b b}.
     * @rfturn tif rfbd vbluf.
     */
    publid int rfbdUnsignfdSiort(finbl int indfx) {
        bytf[] b = tiis.b;
        rfturn ((b[indfx] & 0xFF) << 8) | (b[indfx + 1] & 0xFF);
    }

    /**
     * Rfbds b signfd siort vbluf in {@link #b b}. <i>Tiis mftiod is intfndfd
     * for {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by dlbss
     * gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of tif vbluf to bf rfbd in {@link #b b}.
     * @rfturn tif rfbd vbluf.
     */
    publid siort rfbdSiort(finbl int indfx) {
        bytf[] b = tiis.b;
        rfturn (siort) (((b[indfx] & 0xFF) << 8) | (b[indfx + 1] & 0xFF));
    }

    /**
     * Rfbds b signfd int vbluf in {@link #b b}. <i>Tiis mftiod is intfndfd for
     * {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by dlbss
     * gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of tif vbluf to bf rfbd in {@link #b b}.
     * @rfturn tif rfbd vbluf.
     */
    publid int rfbdInt(finbl int indfx) {
        bytf[] b = tiis.b;
        rfturn ((b[indfx] & 0xFF) << 24) | ((b[indfx + 1] & 0xFF) << 16)
                | ((b[indfx + 2] & 0xFF) << 8) | (b[indfx + 3] & 0xFF);
    }

    /**
     * Rfbds b signfd long vbluf in {@link #b b}. <i>Tiis mftiod is intfndfd for
     * {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by dlbss
     * gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of tif vbluf to bf rfbd in {@link #b b}.
     * @rfturn tif rfbd vbluf.
     */
    publid long rfbdLong(finbl int indfx) {
        long l1 = rfbdInt(indfx);
        long l0 = rfbdInt(indfx + 4) & 0xFFFFFFFFL;
        rfturn (l1 << 32) | l0;
    }

    /**
     * Rfbds bn UTF8 string donstbnt pool itfm in {@link #b b}. <i>Tiis mftiod
     * is intfndfd for {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd
     * by dlbss gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of bn unsignfd siort vbluf in {@link #b b},
     *            wiosf vbluf is tif indfx of bn UTF8 donstbnt pool itfm.
     * @pbrbm buf
     *            bufffr to bf usfd to rfbd tif itfm. Tiis bufffr must bf
     *            suffidifntly lbrgf. It is not butombtidblly rfsizfd.
     * @rfturn tif String dorrfsponding to tif spfdififd UTF8 itfm.
     */
    publid String rfbdUTF8(int indfx, finbl dibr[] buf) {
        int itfm = rfbdUnsignfdSiort(indfx);
        if (indfx == 0 || itfm == 0) {
            rfturn null;
        }
        String s = strings[itfm];
        if (s != null) {
            rfturn s;
        }
        indfx = itfms[itfm];
        rfturn strings[itfm] = rfbdUTF(indfx + 2, rfbdUnsignfdSiort(indfx), buf);
    }

    /**
     * Rfbds UTF8 string in {@link #b b}.
     *
     * @pbrbm indfx
     *            stbrt offsft of tif UTF8 string to bf rfbd.
     * @pbrbm utfLfn
     *            lfngti of tif UTF8 string to bf rfbd.
     * @pbrbm buf
     *            bufffr to bf usfd to rfbd tif string. Tiis bufffr must bf
     *            suffidifntly lbrgf. It is not butombtidblly rfsizfd.
     * @rfturn tif String dorrfsponding to tif spfdififd UTF8 string.
     */
    privbtf String rfbdUTF(int indfx, finbl int utfLfn, finbl dibr[] buf) {
        int fndIndfx = indfx + utfLfn;
        bytf[] b = tiis.b;
        int strLfn = 0;
        int d;
        int st = 0;
        dibr dd = 0;
        wiilf (indfx < fndIndfx) {
            d = b[indfx++];
            switdi (st) {
            dbsf 0:
                d = d & 0xFF;
                if (d < 0x80) { // 0xxxxxxx
                    buf[strLfn++] = (dibr) d;
                } flsf if (d < 0xE0 && d > 0xBF) { // 110x xxxx 10xx xxxx
                    dd = (dibr) (d & 0x1F);
                    st = 1;
                } flsf { // 1110 xxxx 10xx xxxx 10xx xxxx
                    dd = (dibr) (d & 0x0F);
                    st = 2;
                }
                brfbk;

            dbsf 1: // bytf 2 of 2-bytf dibr or bytf 3 of 3-bytf dibr
                buf[strLfn++] = (dibr) ((dd << 6) | (d & 0x3F));
                st = 0;
                brfbk;

            dbsf 2: // bytf 2 of 3-bytf dibr
                dd = (dibr) ((dd << 6) | (d & 0x3F));
                st = 1;
                brfbk;
            }
        }
        rfturn nfw String(buf, 0, strLfn);
    }

    /**
     * Rfbds b dlbss donstbnt pool itfm in {@link #b b}. <i>Tiis mftiod is
     * intfndfd for {@link Attributf} sub dlbssfs, bnd is normblly not nffdfd by
     * dlbss gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm indfx
     *            tif stbrt indfx of bn unsignfd siort vbluf in {@link #b b},
     *            wiosf vbluf is tif indfx of b dlbss donstbnt pool itfm.
     * @pbrbm buf
     *            bufffr to bf usfd to rfbd tif itfm. Tiis bufffr must bf
     *            suffidifntly lbrgf. It is not butombtidblly rfsizfd.
     * @rfturn tif String dorrfsponding to tif spfdififd dlbss itfm.
     */
    publid String rfbdClbss(finbl int indfx, finbl dibr[] buf) {
        // domputfs tif stbrt indfx of tif CONSTANT_Clbss itfm in b
        // bnd rfbds tif CONSTANT_Utf8 itfm dfsignbtfd by
        // tif first two bytfs of tiis CONSTANT_Clbss itfm
        rfturn rfbdUTF8(itfms[rfbdUnsignfdSiort(indfx)], buf);
    }

    /**
     * Rfbds b numfrid or string donstbnt pool itfm in {@link #b b}. <i>Tiis
     * mftiod is intfndfd for {@link Attributf} sub dlbssfs, bnd is normblly not
     * nffdfd by dlbss gfnfrbtors or bdbptfrs.</i>
     *
     * @pbrbm itfm
     *            tif indfx of b donstbnt pool itfm.
     * @pbrbm buf
     *            bufffr to bf usfd to rfbd tif itfm. Tiis bufffr must bf
     *            suffidifntly lbrgf. It is not butombtidblly rfsizfd.
     * @rfturn tif {@link Intfgfr}, {@link Flobt}, {@link Long}, {@link Doublf},
     *         {@link String}, {@link Typf} or {@link Hbndlf} dorrfsponding to
     *         tif givfn donstbnt pool itfm.
     */
    publid Objfdt rfbdConst(finbl int itfm, finbl dibr[] buf) {
        int indfx = itfms[itfm];
        switdi (b[indfx - 1]) {
        dbsf ClbssWritfr.INT:
            rfturn nfw Intfgfr(rfbdInt(indfx));
        dbsf ClbssWritfr.FLOAT:
            rfturn nfw Flobt(Flobt.intBitsToFlobt(rfbdInt(indfx)));
        dbsf ClbssWritfr.LONG:
            rfturn nfw Long(rfbdLong(indfx));
        dbsf ClbssWritfr.DOUBLE:
            rfturn nfw Doublf(Doublf.longBitsToDoublf(rfbdLong(indfx)));
        dbsf ClbssWritfr.CLASS:
            rfturn Typf.gftObjfdtTypf(rfbdUTF8(indfx, buf));
        dbsf ClbssWritfr.STR:
            rfturn rfbdUTF8(indfx, buf);
        dbsf ClbssWritfr.MTYPE:
            rfturn Typf.gftMftiodTypf(rfbdUTF8(indfx, buf));
        dffbult: // dbsf ClbssWritfr.HANDLE_BASE + [1..9]:
            int tbg = rfbdBytf(indfx);
            int[] itfms = tiis.itfms;
            int dpIndfx = itfms[rfbdUnsignfdSiort(indfx + 1)];
            String ownfr = rfbdClbss(dpIndfx, buf);
            dpIndfx = itfms[rfbdUnsignfdSiort(dpIndfx + 2)];
            String nbmf = rfbdUTF8(dpIndfx, buf);
            String dfsd = rfbdUTF8(dpIndfx + 2, buf);
            rfturn nfw Hbndlf(tbg, ownfr, nbmf, dfsd);
        }
    }
}
