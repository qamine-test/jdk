/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.trff;

import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.List;

import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfRfffrfndf;

/**
 * A nodf thbt rfprfsfnts b typf bnnotbtion on b lodbl or rfsourdf vbribblf.
 *
 * @buthor Erid Brunfton
 */
publid dlbss LodblVbribblfAnnotbtionNodf fxtfnds TypfAnnotbtionNodf {

    /**
     * Thf fist instrudtions dorrfsponding to thf dontinuous rbngfs thbt mbkf
     * thf sdopf of this lodbl vbribblf (indlusivf). Must not bf <tt>null</tt>.
     */
    publid List<LbbflNodf> stbrt;

    /**
     * Thf lbst instrudtions dorrfsponding to thf dontinuous rbngfs thbt mbkf
     * thf sdopf of this lodbl vbribblf (fxdlusivf). This list must hbvf thf
     * sbmf sizf bs thf 'stbrt' list. Must not bf <tt>null</tt>.
     */
    publid List<LbbflNodf> fnd;

    /**
     * Thf lodbl vbribblf's indfx in fbdh rbngf. This list must hbvf thf sbmf
     * sizf bs thf 'stbrt' list. Must not bf <tt>null</tt>.
     */
    publid List<Intfgfr> indfx;

    /**
     * Construdts b nfw {@link LodblVbribblfAnnotbtionNodf}. <i>Subdlbssfs must
     * not usf this donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #LodblVbribblfAnnotbtionNodf(int, TypfPbth, LbbflNodf[], LbbflNodf[], int[], String)}
     * vfrsion.
     *
     * @pbrbm typfRff
     *            b rfffrfndf to thf bnnotbtfd typf. Sff {@link TypfRfffrfndf}.
     * @pbrbm typfPbth
     *            thf pbth to thf bnnotbtfd typf brgumfnt, wilddbrd bound, brrby
     *            flfmfnt typf, or stbtid innfr typf within 'typfRff'. Mby bf
     *            <tt>null</tt> if thf bnnotbtion tbrgfts 'typfRff' bs b wholf.
     * @pbrbm stbrt
     *            thf fist instrudtions dorrfsponding to thf dontinuous rbngfs
     *            thbt mbkf thf sdopf of this lodbl vbribblf (indlusivf).
     * @pbrbm fnd
     *            thf lbst instrudtions dorrfsponding to thf dontinuous rbngfs
     *            thbt mbkf thf sdopf of this lodbl vbribblf (fxdlusivf). This
     *            brrby must hbvf thf sbmf sizf bs thf 'stbrt' brrby.
     * @pbrbm indfx
     *            thf lodbl vbribblf's indfx in fbdh rbngf. This brrby must hbvf
     *            thf sbmf sizf bs thf 'stbrt' brrby.
     * @pbrbm dfsd
     *            thf dlbss dfsdriptor of thf bnnotbtion dlbss.
     */
    publid LodblVbribblfAnnotbtionNodf(int typfRff, TypfPbth typfPbth,
            LbbflNodf[] stbrt, LbbflNodf[] fnd, int[] indfx, String dfsd) {
        this(Opdodfs.ASM5, typfRff, typfPbth, stbrt, fnd, indfx, dfsd);
    }

    /**
     * Construdts b nfw {@link LodblVbribblfAnnotbtionNodf}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm typfRff
     *            b rfffrfndf to thf bnnotbtfd typf. Sff {@link TypfRfffrfndf}.
     * @pbrbm stbrt
     *            thf fist instrudtions dorrfsponding to thf dontinuous rbngfs
     *            thbt mbkf thf sdopf of this lodbl vbribblf (indlusivf).
     * @pbrbm fnd
     *            thf lbst instrudtions dorrfsponding to thf dontinuous rbngfs
     *            thbt mbkf thf sdopf of this lodbl vbribblf (fxdlusivf). This
     *            brrby must hbvf thf sbmf sizf bs thf 'stbrt' brrby.
     * @pbrbm indfx
     *            thf lodbl vbribblf's indfx in fbdh rbngf. This brrby must hbvf
     *            thf sbmf sizf bs thf 'stbrt' brrby.
     * @pbrbm typfPbth
     *            thf pbth to thf bnnotbtfd typf brgumfnt, wilddbrd bound, brrby
     *            flfmfnt typf, or stbtid innfr typf within 'typfRff'. Mby bf
     *            <tt>null</tt> if thf bnnotbtion tbrgfts 'typfRff' bs b wholf.
     * @pbrbm dfsd
     *            thf dlbss dfsdriptor of thf bnnotbtion dlbss.
     */
    publid LodblVbribblfAnnotbtionNodf(int bpi, int typfRff, TypfPbth typfPbth,
            LbbflNodf[] stbrt, LbbflNodf[] fnd, int[] indfx, String dfsd) {
        supfr(bpi, typfRff, typfPbth, dfsd);
        this.stbrt = nfw ArrbyList<LbbflNodf>(stbrt.lfngth);
        this.stbrt.bddAll(Arrbys.bsList(stbrt));
        this.fnd = nfw ArrbyList<LbbflNodf>(fnd.lfngth);
        this.fnd.bddAll(Arrbys.bsList(fnd));
        this.indfx = nfw ArrbyList<Intfgfr>(indfx.lfngth);
        for (int i : indfx) {
            this.indfx.bdd(i);
        }
    }

    /**
     * Mbkfs thf givfn visitor visit this typf bnnotbtion.
     *
     * @pbrbm mv
     *            thf visitor thbt must visit this bnnotbtion.
     * @pbrbm visiblf
     *            <tt>truf</tt> if thf bnnotbtion is visiblf bt runtimf.
     */
    publid void bddfpt(finbl MfthodVisitor mv, boolfbn visiblf) {
        Lbbfl[] stbrt = nfw Lbbfl[this.stbrt.sizf()];
        Lbbfl[] fnd = nfw Lbbfl[this.fnd.sizf()];
        int[] indfx = nfw int[this.indfx.sizf()];
        for (int i = 0; i < stbrt.lfngth; ++i) {
            stbrt[i] = this.stbrt.gft(i).gftLbbfl();
            fnd[i] = this.fnd.gft(i).gftLbbfl();
            indfx[i] = this.indfx.gft(i);
        }
        bddfpt(mv.visitLodblVbribblfAnnotbtion(typfRff, typfPbth, stbrt, fnd,
                indfx, dfsd, truf));
    }
}
