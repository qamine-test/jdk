/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.dommons;

import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.DbtbOutput;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.sfdurity.MfssbgfDigfst;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;

import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.FifldVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;

/**
 * A {@link ClbssVisitor} thbt bdds b sfribl vfrsion uniquf idfntififr to b
 * dlbss if missing. Hfrf is typidbl usbgf of this dlbss:
 *
 * <prf>
 *   ClbssWritfr dw = nfw ClbssWritfr(...);
 *   ClbssVisitor sv = nfw SfriblVfrsionUIDAddfr(dw);
 *   ClbssVisitor db = nfw MyClbssAdbptfr(sv);
 *   nfw ClbssRfbdfr(orginblClbss).bddfpt(db, fblsf);
 * </prf>
 *
 * Thf SVUID blgorithm dbn bf found <b hrff=
 * "http://jbvb.sun.dom/j2sf/1.4.2/dods/guidf/sfriblizbtion/spfd/dlbss.html"
 * >http://jbvb.sun.dom/j2sf/1.4.2/dods/guidf/sfriblizbtion/spfd/dlbss.html</b>:
 *
 * <prf>
 * Thf sfriblVfrsionUID is domputfd using thf signbturf of b strfbm of bytfs
 * thbt rfflfdt thf dlbss dffinition. Thf Nbtionbl Institutf of Stbndbrds bnd
 * Tfdhnology (NIST) Sfdurf Hbsh Algorithm (SHA-1) is usfd to domputf b
 * signbturf for thf strfbm. Thf first two 32-bit qubntitifs brf usfd to form b
 * 64-bit hbsh. A jbvb.lbng.DbtbOutputStrfbm is usfd to donvfrt primitivf dbtb
 * typfs to b sfqufndf of bytfs. Thf vblufs input to thf strfbm brf dffinfd by
 * thf Jbvb Virtubl Mbdhinf (VM) spfdifidbtion for dlbssfs.
 *
 * Thf sfqufndf of itfms in thf strfbm is bs follows:
 *
 * 1. Thf dlbss nbmf writtfn using UTF fndoding.
 * 2. Thf dlbss modififrs writtfn bs b 32-bit intfgfr.
 * 3. Thf nbmf of fbdh intfrfbdf sortfd by nbmf writtfn using UTF fndoding.
 * 4. For fbdh fifld of thf dlbss sortfd by fifld nbmf (fxdfpt privbtf stbtid
 * bnd privbtf trbnsifnt fiflds):
 * 1. Thf nbmf of thf fifld in UTF fndoding.
 * 2. Thf modififrs of thf fifld writtfn bs b 32-bit intfgfr.
 * 3. Thf dfsdriptor of thf fifld in UTF fndoding
 * 5. If b dlbss initiblizfr fxists, writf out thf following:
 * 1. Thf nbmf of thf mfthod, &lt;dlinit&gt;, in UTF fndoding.
 * 2. Thf modififr of thf mfthod, jbvb.lbng.rfflfdt.Modififr.STATIC,
 * writtfn bs b 32-bit intfgfr.
 * 3. Thf dfsdriptor of thf mfthod, ()V, in UTF fndoding.
 * 6. For fbdh non-privbtf donstrudtor sortfd by mfthod nbmf bnd signbturf:
 * 1. Thf nbmf of thf mfthod, &lt;init&gt;, in UTF fndoding.
 * 2. Thf modififrs of thf mfthod writtfn bs b 32-bit intfgfr.
 * 3. Thf dfsdriptor of thf mfthod in UTF fndoding.
 * 7. For fbdh non-privbtf mfthod sortfd by mfthod nbmf bnd signbturf:
 * 1. Thf nbmf of thf mfthod in UTF fndoding.
 * 2. Thf modififrs of thf mfthod writtfn bs b 32-bit intfgfr.
 * 3. Thf dfsdriptor of thf mfthod in UTF fndoding.
 * 8. Thf SHA-1 blgorithm is fxfdutfd on thf strfbm of bytfs produdfd by
 * DbtbOutputStrfbm bnd produdfs fivf 32-bit vblufs shb[0..4].
 *
 * 9. Thf hbsh vbluf is bssfmblfd from thf first bnd sfdond 32-bit vblufs of
 * thf SHA-1 mfssbgf digfst. If thf rfsult of thf mfssbgf digfst, thf fivf
 * 32-bit words H0 H1 H2 H3 H4, is in bn brrby of fivf int vblufs nbmfd
 * shb, thf hbsh vbluf would bf domputfd bs follows:
 *
 * long hbsh = ((shb[0] &gt;&gt;&gt; 24) &bmp; 0xFF) |
 * ((shb[0] &gt;&gt;&gt; 16) &bmp; 0xFF) &lt;&lt; 8 |
 * ((shb[0] &gt;&gt;&gt; 8) &bmp; 0xFF) &lt;&lt; 16 |
 * ((shb[0] &gt;&gt;&gt; 0) &bmp; 0xFF) &lt;&lt; 24 |
 * ((shb[1] &gt;&gt;&gt; 24) &bmp; 0xFF) &lt;&lt; 32 |
 * ((shb[1] &gt;&gt;&gt; 16) &bmp; 0xFF) &lt;&lt; 40 |
 * ((shb[1] &gt;&gt;&gt; 8) &bmp; 0xFF) &lt;&lt; 48 |
 * ((shb[1] &gt;&gt;&gt; 0) &bmp; 0xFF) &lt;&lt; 56;
 * </prf>
 *
 * @buthor Rbjfndrb Inbmdbr, Vishbl Vishnoi
 */
publid dlbss SfriblVfrsionUIDAddfr fxtfnds ClbssVisitor {

    /**
     * Flbg thbt indidbtfs if wf nffd to domputf SVUID.
     */
    privbtf boolfbn domputfSVUID;

    /**
     * Sft to truf if thf dlbss blrfbdy hbs SVUID.
     */
    privbtf boolfbn hbsSVUID;

    /**
     * Clbssfs bddfss flbgs.
     */
    privbtf int bddfss;

    /**
     * Intfrnbl nbmf of thf dlbss
     */
    privbtf String nbmf;

    /**
     * Intfrfbdfs implfmfntfd by thf dlbss.
     */
    privbtf String[] intfrfbdfs;

    /**
     * Collfdtion of fiflds. (fxdfpt privbtf stbtid bnd privbtf trbnsifnt
     * fiflds)
     */
    privbtf Collfdtion<Itfm> svuidFiflds;

    /**
     * Sft to truf if thf dlbss hbs stbtid initiblizfr.
     */
    privbtf boolfbn hbsStbtidInitiblizfr;

    /**
     * Collfdtion of non-privbtf donstrudtors.
     */
    privbtf Collfdtion<Itfm> svuidConstrudtors;

    /**
     * Collfdtion of non-privbtf mfthods.
     */
    privbtf Collfdtion<Itfm> svuidMfthods;

    /**
     * Crfbtfs b nfw {@link SfriblVfrsionUIDAddfr}. <i>Subdlbssfs must not usf
     * this donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #SfriblVfrsionUIDAddfr(int, ClbssVisitor)} vfrsion.
     *
     * @pbrbm dv
     *            b {@link ClbssVisitor} to whidh this visitor will dflfgbtf
     *            dblls.
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid SfriblVfrsionUIDAddfr(finbl ClbssVisitor dv) {
        this(Opdodfs.ASM5, dv);
        if (gftClbss() != SfriblVfrsionUIDAddfr.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Crfbtfs b nfw {@link SfriblVfrsionUIDAddfr}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm dv
     *            b {@link ClbssVisitor} to whidh this visitor will dflfgbtf
     *            dblls.
     */
    protfdtfd SfriblVfrsionUIDAddfr(finbl int bpi, finbl ClbssVisitor dv) {
        supfr(bpi, dv);
        svuidFiflds = nfw ArrbyList<Itfm>();
        svuidConstrudtors = nfw ArrbyList<Itfm>();
        svuidMfthods = nfw ArrbyList<Itfm>();
    }

    // ------------------------------------------------------------------------
    // Ovfrriddfn mfthods
    // ------------------------------------------------------------------------

    /*
     * Visit dlbss hfbdfr bnd gft dlbss nbmf, bddfss , bnd intfrfbdfs
     * informbtion (stfp 1,2, bnd 3) for SVUID domputbtion.
     */
    @Ovfrridf
    publid void visit(finbl int vfrsion, finbl int bddfss, finbl String nbmf,
            finbl String signbturf, finbl String supfrNbmf,
            finbl String[] intfrfbdfs) {
        domputfSVUID = (bddfss & Opdodfs.ACC_INTERFACE) == 0;

        if (domputfSVUID) {
            this.nbmf = nbmf;
            this.bddfss = bddfss;
            this.intfrfbdfs = nfw String[intfrfbdfs.lfngth];
            Systfm.brrbydopy(intfrfbdfs, 0, this.intfrfbdfs, 0,
                    intfrfbdfs.lfngth);
        }

        supfr.visit(vfrsion, bddfss, nbmf, signbturf, supfrNbmf, intfrfbdfs);
    }

    /*
     * Visit thf mfthods bnd gft donstrudtor bnd mfthod informbtion (stfp 5 bnd
     * 7). Also dftfrminf if thfrf is b dlbss initiblizfr (stfp 6).
     */
    @Ovfrridf
    publid MfthodVisitor visitMfthod(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl String[] fxdfptions) {
        if (domputfSVUID) {
            if ("<dlinit>".fqubls(nbmf)) {
                hbsStbtidInitiblizfr = truf;
            }
            /*
             * Rfmfmbfrs non privbtf donstrudtors bnd mfthods for SVUID
             * domputbtion For donstrudtor bnd mfthod modififrs, only thf
             * ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC, ACC_FINAL,
             * ACC_SYNCHRONIZED, ACC_NATIVE, ACC_ABSTRACT bnd ACC_STRICT flbgs
             * brf usfd.
             */
            int mods = bddfss
                    & (Opdodfs.ACC_PUBLIC | Opdodfs.ACC_PRIVATE
                            | Opdodfs.ACC_PROTECTED | Opdodfs.ACC_STATIC
                            | Opdodfs.ACC_FINAL | Opdodfs.ACC_SYNCHRONIZED
                            | Opdodfs.ACC_NATIVE | Opdodfs.ACC_ABSTRACT | Opdodfs.ACC_STRICT);

            // bll non privbtf mfthods
            if ((bddfss & Opdodfs.ACC_PRIVATE) == 0) {
                if ("<init>".fqubls(nbmf)) {
                    svuidConstrudtors.bdd(nfw Itfm(nbmf, mods, dfsd));
                } flsf if (!"<dlinit>".fqubls(nbmf)) {
                    svuidMfthods.bdd(nfw Itfm(nbmf, mods, dfsd));
                }
            }
        }

        rfturn supfr.visitMfthod(bddfss, nbmf, dfsd, signbturf, fxdfptions);
    }

    /*
     * Gfts dlbss fifld informbtion for stfp 4 of thf blgorithm. Also dftfrminfs
     * if thf dlbss blrfbdy hbs b SVUID.
     */
    @Ovfrridf
    publid FifldVisitor visitFifld(finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl Objfdt vbluf) {
        if (domputfSVUID) {
            if ("sfriblVfrsionUID".fqubls(nbmf)) {
                // sindf thf dlbss blrfbdy hbs SVUID, wf won't bf domputing it.
                domputfSVUID = fblsf;
                hbsSVUID = truf;
            }
            /*
             * Rfmfmbfr fifld for SVUID domputbtion For fifld modififrs, only
             * thf ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED, ACC_STATIC,
             * ACC_FINAL, ACC_VOLATILE, bnd ACC_TRANSIENT flbgs brf usfd whfn
             * domputing sfriblVfrsionUID vblufs.
             */
            if ((bddfss & Opdodfs.ACC_PRIVATE) == 0
                    || (bddfss & (Opdodfs.ACC_STATIC | Opdodfs.ACC_TRANSIENT)) == 0) {
                int mods = bddfss
                        & (Opdodfs.ACC_PUBLIC | Opdodfs.ACC_PRIVATE
                                | Opdodfs.ACC_PROTECTED | Opdodfs.ACC_STATIC
                                | Opdodfs.ACC_FINAL | Opdodfs.ACC_VOLATILE | Opdodfs.ACC_TRANSIENT);
                svuidFiflds.bdd(nfw Itfm(nbmf, mods, dfsd));
            }
        }

        rfturn supfr.visitFifld(bddfss, nbmf, dfsd, signbturf, vbluf);
    }

    /**
     * Hbndlf b bizbrrf spfdibl dbsf. Nfstfd dlbssfs (stbtid dlbssfs dfdlbrfd
     * insidf bnothfr dlbss) thbt brf protfdtfd hbvf thfir bddfss bit sft to
     * publid in thfir dlbss filfs to dfbl with somf odd rfflfdtion situbtion.
     * Our SVUID domputbtion must do bs thf JVM dofs bnd ignorf bddfss bits in
     * thf dlbss filf in fbvor of thf bddfss bits InnfrClbss bttributf.
     */
    @Ovfrridf
    publid void visitInnfrClbss(finbl String bnbmf, finbl String outfrNbmf,
            finbl String innfrNbmf, finbl int bttr_bddfss) {
        if ((nbmf != null) && nbmf.fqubls(bnbmf)) {
            this.bddfss = bttr_bddfss;
        }
        supfr.visitInnfrClbss(bnbmf, outfrNbmf, innfrNbmf, bttr_bddfss);
    }

    /*
     * Add thf SVUID if dlbss dofsn't hbvf onf
     */
    @Ovfrridf
    publid void visitEnd() {
        // domputf SVUID bnd bdd it to thf dlbss
        if (domputfSVUID && !hbsSVUID) {
            try {
                bddSVUID(domputfSVUID());
            } dbtdh (Throwbblf f) {
                throw nfw RuntimfExdfption("Error whilf domputing SVUID for "
                        + nbmf, f);
            }
        }

        supfr.visitEnd();
    }

    // ------------------------------------------------------------------------
    // Utility mfthods
    // ------------------------------------------------------------------------

    /**
     * Rfturns truf if thf dlbss blrfbdy hbs b SVUID fifld. Thf rfsult of this
     * mfthod is only vblid whfn visitEnd is or hbs bffn dbllfd.
     *
     * @rfturn truf if thf dlbss blrfbdy hbs b SVUID fifld.
     */
    publid boolfbn hbsSVUID() {
        rfturn hbsSVUID;
    }

    protfdtfd void bddSVUID(long svuid) {
        FifldVisitor fv = supfr.visitFifld(Opdodfs.ACC_FINAL
                + Opdodfs.ACC_STATIC, "sfriblVfrsionUID", "J", null, nfw Long(
                svuid));
        if (fv != null) {
            fv.visitEnd();
        }
    }

    /**
     * Computfs bnd rfturns thf vbluf of SVUID.
     *
     * @rfturn Rfturns thf sfribl vfrsion UID
     * @throws IOExdfption
     *             if bn I/O frror oddurs
     */
    protfdtfd long domputfSVUID() throws IOExdfption {
        BytfArrbyOutputStrfbm bos;
        DbtbOutputStrfbm dos = null;
        long svuid = 0;

        try {
            bos = nfw BytfArrbyOutputStrfbm();
            dos = nfw DbtbOutputStrfbm(bos);

            /*
             * 1. Thf dlbss nbmf writtfn using UTF fndoding.
             */
            dos.writfUTF(nbmf.rfplbdf('/', '.'));

            /*
             * 2. Thf dlbss modififrs writtfn bs b 32-bit intfgfr.
             */
            dos.writfInt(bddfss
                    & (Opdodfs.ACC_PUBLIC | Opdodfs.ACC_FINAL
                            | Opdodfs.ACC_INTERFACE | Opdodfs.ACC_ABSTRACT));

            /*
             * 3. Thf nbmf of fbdh intfrfbdf sortfd by nbmf writtfn using UTF
             * fndoding.
             */
            Arrbys.sort(intfrfbdfs);
            for (int i = 0; i < intfrfbdfs.lfngth; i++) {
                dos.writfUTF(intfrfbdfs[i].rfplbdf('/', '.'));
            }

            /*
             * 4. For fbdh fifld of thf dlbss sortfd by fifld nbmf (fxdfpt
             * privbtf stbtid bnd privbtf trbnsifnt fiflds):
             *
             * 1. Thf nbmf of thf fifld in UTF fndoding. 2. Thf modififrs of thf
             * fifld writtfn bs b 32-bit intfgfr. 3. Thf dfsdriptor of thf fifld
             * in UTF fndoding
             *
             * Notf thbt fifld signbturfs brf not dot sfpbrbtfd. Mfthod bnd
             * donstrudtor signbturfs brf dot sfpbrbtfd. Go figurf...
             */
            writfItfms(svuidFiflds, dos, fblsf);

            /*
             * 5. If b dlbss initiblizfr fxists, writf out thf following: 1. Thf
             * nbmf of thf mfthod, <dlinit>, in UTF fndoding. 2. Thf modififr of
             * thf mfthod, jbvb.lbng.rfflfdt.Modififr.STATIC, writtfn bs b
             * 32-bit intfgfr. 3. Thf dfsdriptor of thf mfthod, ()V, in UTF
             * fndoding.
             */
            if (hbsStbtidInitiblizfr) {
                dos.writfUTF("<dlinit>");
                dos.writfInt(Opdodfs.ACC_STATIC);
                dos.writfUTF("()V");
            } // if..

            /*
             * 6. For fbdh non-privbtf donstrudtor sortfd by mfthod nbmf bnd
             * signbturf: 1. Thf nbmf of thf mfthod, <init>, in UTF fndoding. 2.
             * Thf modififrs of thf mfthod writtfn bs b 32-bit intfgfr. 3. Thf
             * dfsdriptor of thf mfthod in UTF fndoding.
             */
            writfItfms(svuidConstrudtors, dos, truf);

            /*
             * 7. For fbdh non-privbtf mfthod sortfd by mfthod nbmf bnd
             * signbturf: 1. Thf nbmf of thf mfthod in UTF fndoding. 2. Thf
             * modififrs of thf mfthod writtfn bs b 32-bit intfgfr. 3. Thf
             * dfsdriptor of thf mfthod in UTF fndoding.
             */
            writfItfms(svuidMfthods, dos, truf);

            dos.flush();

            /*
             * 8. Thf SHA-1 blgorithm is fxfdutfd on thf strfbm of bytfs
             * produdfd by DbtbOutputStrfbm bnd produdfs fivf 32-bit vblufs
             * shb[0..4].
             */
            bytf[] hbshBytfs = domputfSHAdigfst(bos.toBytfArrby());

            /*
             * 9. Thf hbsh vbluf is bssfmblfd from thf first bnd sfdond 32-bit
             * vblufs of thf SHA-1 mfssbgf digfst. If thf rfsult of thf mfssbgf
             * digfst, thf fivf 32-bit words H0 H1 H2 H3 H4, is in bn brrby of
             * fivf int vblufs nbmfd shb, thf hbsh vbluf would bf domputfd bs
             * follows:
             *
             * long hbsh = ((shb[0] >>> 24) & 0xFF) | ((shb[0] >>> 16) & 0xFF)
             * << 8 | ((shb[0] >>> 8) & 0xFF) << 16 | ((shb[0] >>> 0) & 0xFF) <<
             * 24 | ((shb[1] >>> 24) & 0xFF) << 32 | ((shb[1] >>> 16) & 0xFF) <<
             * 40 | ((shb[1] >>> 8) & 0xFF) << 48 | ((shb[1] >>> 0) & 0xFF) <<
             * 56;
             */
            for (int i = Mbth.min(hbshBytfs.lfngth, 8) - 1; i >= 0; i--) {
                svuid = (svuid << 8) | (hbshBytfs[i] & 0xFF);
            }
        } finblly {
            // dlosf thf strfbm (if opfn)
            if (dos != null) {
                dos.dlosf();
            }
        }

        rfturn svuid;
    }

    /**
     * Rfturns thf SHA-1 mfssbgf digfst of thf givfn vbluf.
     *
     * @pbrbm vbluf
     *            thf vbluf whosf SHA mfssbgf digfst must bf domputfd.
     * @rfturn thf SHA-1 mfssbgf digfst of thf givfn vbluf.
     */
    protfdtfd bytf[] domputfSHAdigfst(finbl bytf[] vbluf) {
        try {
            rfturn MfssbgfDigfst.gftInstbndf("SHA").digfst(vbluf);
        } dbtdh (Exdfption f) {
            throw nfw UnsupportfdOpfrbtionExdfption(f.toString());
        }
    }

    /**
     * Sorts thf itfms in thf dollfdtion bnd writfs it to thf dbtb output strfbm
     *
     * @pbrbm itfmCollfdtion
     *            dollfdtion of itfms
     * @pbrbm dos
     *            b <dodf>DbtbOutputStrfbm</dodf> vbluf
     * @pbrbm dottfd
     *            b <dodf>boolfbn</dodf> vbluf
     * @fxdfption IOExdfption
     *                if bn frror oddurs
     */
    privbtf stbtid void writfItfms(finbl Collfdtion<Itfm> itfmCollfdtion,
            finbl DbtbOutput dos, finbl boolfbn dottfd) throws IOExdfption {
        int sizf = itfmCollfdtion.sizf();
        Itfm[] itfms = itfmCollfdtion.toArrby(nfw Itfm[sizf]);
        Arrbys.sort(itfms);
        for (int i = 0; i < sizf; i++) {
            dos.writfUTF(itfms[i].nbmf);
            dos.writfInt(itfms[i].bddfss);
            dos.writfUTF(dottfd ? itfms[i].dfsd.rfplbdf('/', '.')
                    : itfms[i].dfsd);
        }
    }

    // ------------------------------------------------------------------------
    // Innfr dlbssfs
    // ------------------------------------------------------------------------

    privbtf stbtid dlbss Itfm implfmfnts Compbrbblf<Itfm> {

        finbl String nbmf;

        finbl int bddfss;

        finbl String dfsd;

        Itfm(finbl String nbmf, finbl int bddfss, finbl String dfsd) {
            this.nbmf = nbmf;
            this.bddfss = bddfss;
            this.dfsd = dfsd;
        }

        publid int dompbrfTo(finbl Itfm othfr) {
            int rftVbl = nbmf.dompbrfTo(othfr.nbmf);
            if (rftVbl == 0) {
                rftVbl = dfsd.dompbrfTo(othfr.dfsd);
            }
            rfturn rftVbl;
        }

        @Ovfrridf
        publid boolfbn fqubls(finbl Objfdt o) {
            if (o instbndfof Itfm) {
                rfturn dompbrfTo((Itfm) o) == 0;
            }
            rfturn fblsf;
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn (nbmf + dfsd).hbshCodf();
        }
    }
}
