/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * ASM: b vfry smbll bnd fbst Jbvb bytfdodf mbnipulbtion frbmfwork
 * Copyright (d) 2000-2011 INRIA, Frbndf Tflfdom
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions
 * brf mft:
 * 1. Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr.
 * 2. Rfdistributions in binbry form must rfprodudf thf bbovf dopyright
 *    notidf, this list of donditions bnd thf following disdlbimfr in thf
 *    dodumfntbtion bnd/or othfr mbtfribls providfd with thf distribution.
 * 3. Nfithfr thf nbmf of thf dopyright holdfrs nor thf nbmfs of its
 *    dontributors mby bf usfd to fndorsf or promotf produdts dfrivfd from
 *    this softwbrf without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jdk.intfrnbl.org.objfdtwfb.bsm.trff;

import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.List;

import jdk.intfrnbl.org.objfdtwfb.bsm.AnnotbtionVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Attributf;
import jdk.intfrnbl.org.objfdtwfb.bsm.ClbssVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Hbndlf;
import jdk.intfrnbl.org.objfdtwfb.bsm.Lbbfl;
import jdk.intfrnbl.org.objfdtwfb.bsm.MfthodVisitor;
import jdk.intfrnbl.org.objfdtwfb.bsm.Opdodfs;
import jdk.intfrnbl.org.objfdtwfb.bsm.Typf;
import jdk.intfrnbl.org.objfdtwfb.bsm.TypfPbth;

/**
 * A nodf thbt rfprfsfnts b mfthod.
 *
 * @buthor Erid Brunfton
 */
publid dlbss MfthodNodf fxtfnds MfthodVisitor {

    /**
     * Thf mfthod's bddfss flbgs (sff {@link Opdodfs}). This fifld blso
     * indidbtfs if thf mfthod is synthftid bnd/or dfprfdbtfd.
     */
    publid int bddfss;

    /**
     * Thf mfthod's nbmf.
     */
    publid String nbmf;

    /**
     * Thf mfthod's dfsdriptor (sff {@link Typf}).
     */
    publid String dfsd;

    /**
     * Thf mfthod's signbturf. Mby bf <tt>null</tt>.
     */
    publid String signbturf;

    /**
     * Thf intfrnbl nbmfs of thf mfthod's fxdfption dlbssfs (sff
     * {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}). This list is b list of
     * {@link String} objfdts.
     */
    publid List<String> fxdfptions;

    /**
     * Thf mfthod pbrbmftfr info (bddfss flbgs bnd nbmf)
     */
    publid List<PbrbmftfrNodf> pbrbmftfrs;

    /**
     * Thf runtimf visiblf bnnotbtions of this mfthod. This list is b list of
     * {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl visiblf
     */
    publid List<AnnotbtionNodf> visiblfAnnotbtions;

    /**
     * Thf runtimf invisiblf bnnotbtions of this mfthod. This list is b list of
     * {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl invisiblf
     */
    publid List<AnnotbtionNodf> invisiblfAnnotbtions;

    /**
     * Thf runtimf visiblf typf bnnotbtions of this mfthod. This list is b list
     * of {@link TypfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.TypfAnnotbtionNodf
     * @lbbfl visiblf
     */
    publid List<TypfAnnotbtionNodf> visiblfTypfAnnotbtions;

    /**
     * Thf runtimf invisiblf typf bnnotbtions of this mfthod. This list is b
     * list of {@link TypfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.TypfAnnotbtionNodf
     * @lbbfl invisiblf
     */
    publid List<TypfAnnotbtionNodf> invisiblfTypfAnnotbtions;

    /**
     * Thf non stbndbrd bttributfs of this mfthod. This list is b list of
     * {@link Attributf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.Attributf
     */
    publid List<Attributf> bttrs;

    /**
     * Thf dffbult vbluf of this bnnotbtion intfrfbdf mfthod. This fifld must bf
     * b {@link Bytf}, {@link Boolfbn}, {@link Chbrbdtfr}, {@link Short},
     * {@link Intfgfr}, {@link Long}, {@link Flobt}, {@link Doublf},
     * {@link String} or {@link Typf}, or bn two flfmfnts String brrby (for
     * fnumfrbtion vblufs), b {@link AnnotbtionNodf}, or b {@link List} of
     * vblufs of onf of thf prfdfding typfs. Mby bf <tt>null</tt>.
     */
    publid Objfdt bnnotbtionDffbult;

    /**
     * Thf runtimf visiblf pbrbmftfr bnnotbtions of this mfthod. Thfsf lists brf
     * lists of {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl invisiblf pbrbmftfrs
     */
    publid List<AnnotbtionNodf>[] visiblfPbrbmftfrAnnotbtions;

    /**
     * Thf runtimf invisiblf pbrbmftfr bnnotbtions of this mfthod. Thfsf lists
     * brf lists of {@link AnnotbtionNodf} objfdts. Mby bf <tt>null</tt>.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AnnotbtionNodf
     * @lbbfl visiblf pbrbmftfrs
     */
    publid List<AnnotbtionNodf>[] invisiblfPbrbmftfrAnnotbtions;

    /**
     * Thf instrudtions of this mfthod. This list is b list of
     * {@link AbstrbdtInsnNodf} objfdts.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.AbstrbdtInsnNodf
     * @lbbfl instrudtions
     */
    publid InsnList instrudtions;

    /**
     * Thf try dbtdh blodks of this mfthod. This list is b list of
     * {@link TryCbtdhBlodkNodf} objfdts.
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.TryCbtdhBlodkNodf
     */
    publid List<TryCbtdhBlodkNodf> tryCbtdhBlodks;

    /**
     * Thf mbximum stbdk sizf of this mfthod.
     */
    publid int mbxStbdk;

    /**
     * Thf mbximum numbfr of lodbl vbribblfs of this mfthod.
     */
    publid int mbxLodbls;

    /**
     * Thf lodbl vbribblfs of this mfthod. This list is b list of
     * {@link LodblVbribblfNodf} objfdts. Mby bf <tt>null</tt>
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.LodblVbribblfNodf
     */
    publid List<LodblVbribblfNodf> lodblVbribblfs;

    /**
     * Thf visiblf lodbl vbribblf bnnotbtions of this mfthod. This list is b
     * list of {@link LodblVbribblfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.LodblVbribblfAnnotbtionNodf
     */
    publid List<LodblVbribblfAnnotbtionNodf> visiblfLodblVbribblfAnnotbtions;

    /**
     * Thf invisiblf lodbl vbribblf bnnotbtions of this mfthod. This list is b
     * list of {@link LodblVbribblfAnnotbtionNodf} objfdts. Mby bf <tt>null</tt>
     *
     * @bssodibtfs jdk.intfrnbl.org.objfdtwfb.bsm.trff.LodblVbribblfAnnotbtionNodf
     */
    publid List<LodblVbribblfAnnotbtionNodf> invisiblfLodblVbribblfAnnotbtions;

    /**
     * If thf bddfpt mfthod hbs bffn dbllfd on this objfdt.
     */
    privbtf boolfbn visitfd;

    /**
     * Construdts bn uninitiblizfd {@link MfthodNodf}. <i>Subdlbssfs must not
     * usf this donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #MfthodNodf(int)} vfrsion.
     *
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid MfthodNodf() {
        this(Opdodfs.ASM5);
        if (gftClbss() != MfthodNodf.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Construdts bn uninitiblizfd {@link MfthodNodf}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     */
    publid MfthodNodf(finbl int bpi) {
        supfr(bpi);
        this.instrudtions = nfw InsnList();
    }

    /**
     * Construdts b nfw {@link MfthodNodf}. <i>Subdlbssfs must not usf this
     * donstrudtor</i>. Instfbd, thfy must usf thf
     * {@link #MfthodNodf(int, int, String, String, String, String[])} vfrsion.
     *
     * @pbrbm bddfss
     *            thf mfthod's bddfss flbgs (sff {@link Opdodfs}). This
     *            pbrbmftfr blso indidbtfs if thf mfthod is synthftid bnd/or
     *            dfprfdbtfd.
     * @pbrbm nbmf
     *            thf mfthod's nbmf.
     * @pbrbm dfsd
     *            thf mfthod's dfsdriptor (sff {@link Typf}).
     * @pbrbm signbturf
     *            thf mfthod's signbturf. Mby bf <tt>null</tt>.
     * @pbrbm fxdfptions
     *            thf intfrnbl nbmfs of thf mfthod's fxdfption dlbssfs (sff
     *            {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}). Mby bf
     *            <tt>null</tt>.
     * @throws IllfgblStbtfExdfption
     *             If b subdlbss dblls this donstrudtor.
     */
    publid MfthodNodf(finbl int bddfss, finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl String[] fxdfptions) {
        this(Opdodfs.ASM5, bddfss, nbmf, dfsd, signbturf, fxdfptions);
        if (gftClbss() != MfthodNodf.dlbss) {
            throw nfw IllfgblStbtfExdfption();
        }
    }

    /**
     * Construdts b nfw {@link MfthodNodf}.
     *
     * @pbrbm bpi
     *            thf ASM API vfrsion implfmfntfd by this visitor. Must bf onf
     *            of {@link Opdodfs#ASM4} or {@link Opdodfs#ASM5}.
     * @pbrbm bddfss
     *            thf mfthod's bddfss flbgs (sff {@link Opdodfs}). This
     *            pbrbmftfr blso indidbtfs if thf mfthod is synthftid bnd/or
     *            dfprfdbtfd.
     * @pbrbm nbmf
     *            thf mfthod's nbmf.
     * @pbrbm dfsd
     *            thf mfthod's dfsdriptor (sff {@link Typf}).
     * @pbrbm signbturf
     *            thf mfthod's signbturf. Mby bf <tt>null</tt>.
     * @pbrbm fxdfptions
     *            thf intfrnbl nbmfs of thf mfthod's fxdfption dlbssfs (sff
     *            {@link Typf#gftIntfrnblNbmf() gftIntfrnblNbmf}). Mby bf
     *            <tt>null</tt>.
     */
    publid MfthodNodf(finbl int bpi, finbl int bddfss, finbl String nbmf,
            finbl String dfsd, finbl String signbturf, finbl String[] fxdfptions) {
        supfr(bpi);
        this.bddfss = bddfss;
        this.nbmf = nbmf;
        this.dfsd = dfsd;
        this.signbturf = signbturf;
        this.fxdfptions = nfw ArrbyList<String>(fxdfptions == null ? 0
                : fxdfptions.lfngth);
        boolfbn isAbstrbdt = (bddfss & Opdodfs.ACC_ABSTRACT) != 0;
        if (!isAbstrbdt) {
            this.lodblVbribblfs = nfw ArrbyList<LodblVbribblfNodf>(5);
        }
        this.tryCbtdhBlodks = nfw ArrbyList<TryCbtdhBlodkNodf>();
        if (fxdfptions != null) {
            this.fxdfptions.bddAll(Arrbys.bsList(fxdfptions));
        }
        this.instrudtions = nfw InsnList();
    }

    // ------------------------------------------------------------------------
    // Implfmfntbtion of thf MfthodVisitor bbstrbdt dlbss
    // ------------------------------------------------------------------------

    @Ovfrridf
    publid void visitPbrbmftfr(String nbmf, int bddfss) {
        if (pbrbmftfrs == null) {
            pbrbmftfrs = nfw ArrbyList<PbrbmftfrNodf>(5);
        }
        pbrbmftfrs.bdd(nfw PbrbmftfrNodf(nbmf, bddfss));
    }

    @Ovfrridf
    @SupprfssWbrnings("sfribl")
    publid AnnotbtionVisitor visitAnnotbtionDffbult() {
        rfturn nfw AnnotbtionNodf(nfw ArrbyList<Objfdt>(0) {
            @Ovfrridf
            publid boolfbn bdd(finbl Objfdt o) {
                bnnotbtionDffbult = o;
                rfturn supfr.bdd(o);
            }
        });
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitAnnotbtion(finbl String dfsd,
            finbl boolfbn visiblf) {
        AnnotbtionNodf bn = nfw AnnotbtionNodf(dfsd);
        if (visiblf) {
            if (visiblfAnnotbtions == null) {
                visiblfAnnotbtions = nfw ArrbyList<AnnotbtionNodf>(1);
            }
            visiblfAnnotbtions.bdd(bn);
        } flsf {
            if (invisiblfAnnotbtions == null) {
                invisiblfAnnotbtions = nfw ArrbyList<AnnotbtionNodf>(1);
            }
            invisiblfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTypfAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        TypfAnnotbtionNodf bn = nfw TypfAnnotbtionNodf(typfRff, typfPbth, dfsd);
        if (visiblf) {
            if (visiblfTypfAnnotbtions == null) {
                visiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(1);
            }
            visiblfTypfAnnotbtions.bdd(bn);
        } flsf {
            if (invisiblfTypfAnnotbtions == null) {
                invisiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(1);
            }
            invisiblfTypfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid AnnotbtionVisitor visitPbrbmftfrAnnotbtion(finbl int pbrbmftfr,
            finbl String dfsd, finbl boolfbn visiblf) {
        AnnotbtionNodf bn = nfw AnnotbtionNodf(dfsd);
        if (visiblf) {
            if (visiblfPbrbmftfrAnnotbtions == null) {
                int pbrbms = Typf.gftArgumfntTypfs(this.dfsd).lfngth;
                visiblfPbrbmftfrAnnotbtions = (List<AnnotbtionNodf>[]) nfw List<?>[pbrbms];
            }
            if (visiblfPbrbmftfrAnnotbtions[pbrbmftfr] == null) {
                visiblfPbrbmftfrAnnotbtions[pbrbmftfr] = nfw ArrbyList<AnnotbtionNodf>(
                        1);
            }
            visiblfPbrbmftfrAnnotbtions[pbrbmftfr].bdd(bn);
        } flsf {
            if (invisiblfPbrbmftfrAnnotbtions == null) {
                int pbrbms = Typf.gftArgumfntTypfs(this.dfsd).lfngth;
                invisiblfPbrbmftfrAnnotbtions = (List<AnnotbtionNodf>[]) nfw List<?>[pbrbms];
            }
            if (invisiblfPbrbmftfrAnnotbtions[pbrbmftfr] == null) {
                invisiblfPbrbmftfrAnnotbtions[pbrbmftfr] = nfw ArrbyList<AnnotbtionNodf>(
                        1);
            }
            invisiblfPbrbmftfrAnnotbtions[pbrbmftfr].bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid void visitAttributf(finbl Attributf bttr) {
        if (bttrs == null) {
            bttrs = nfw ArrbyList<Attributf>(1);
        }
        bttrs.bdd(bttr);
    }

    @Ovfrridf
    publid void visitCodf() {
    }

    @Ovfrridf
    publid void visitFrbmf(finbl int typf, finbl int nLodbl,
            finbl Objfdt[] lodbl, finbl int nStbdk, finbl Objfdt[] stbdk) {
        instrudtions.bdd(nfw FrbmfNodf(typf, nLodbl, lodbl == null ? null
                : gftLbbflNodfs(lodbl), nStbdk, stbdk == null ? null
                : gftLbbflNodfs(stbdk)));
    }

    @Ovfrridf
    publid void visitInsn(finbl int opdodf) {
        instrudtions.bdd(nfw InsnNodf(opdodf));
    }

    @Ovfrridf
    publid void visitIntInsn(finbl int opdodf, finbl int opfrbnd) {
        instrudtions.bdd(nfw IntInsnNodf(opdodf, opfrbnd));
    }

    @Ovfrridf
    publid void visitVbrInsn(finbl int opdodf, finbl int vbr) {
        instrudtions.bdd(nfw VbrInsnNodf(opdodf, vbr));
    }

    @Ovfrridf
    publid void visitTypfInsn(finbl int opdodf, finbl String typf) {
        instrudtions.bdd(nfw TypfInsnNodf(opdodf, typf));
    }

    @Ovfrridf
    publid void visitFifldInsn(finbl int opdodf, finbl String ownfr,
            finbl String nbmf, finbl String dfsd) {
        instrudtions.bdd(nfw FifldInsnNodf(opdodf, ownfr, nbmf, dfsd));
    }

    @Dfprfdbtfd
    @Ovfrridf
    publid void visitMfthodInsn(int opdodf, String ownfr, String nbmf,
            String dfsd) {
        if (bpi >= Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd);
            rfturn;
        }
        instrudtions.bdd(nfw MfthodInsnNodf(opdodf, ownfr, nbmf, dfsd));
    }

    @Ovfrridf
    publid void visitMfthodInsn(int opdodf, String ownfr, String nbmf,
            String dfsd, boolfbn itf) {
        if (bpi < Opdodfs.ASM5) {
            supfr.visitMfthodInsn(opdodf, ownfr, nbmf, dfsd, itf);
            rfturn;
        }
        instrudtions.bdd(nfw MfthodInsnNodf(opdodf, ownfr, nbmf, dfsd, itf));
    }

    @Ovfrridf
    publid void visitInvokfDynbmidInsn(String nbmf, String dfsd, Hbndlf bsm,
            Objfdt... bsmArgs) {
        instrudtions.bdd(nfw InvokfDynbmidInsnNodf(nbmf, dfsd, bsm, bsmArgs));
    }

    @Ovfrridf
    publid void visitJumpInsn(finbl int opdodf, finbl Lbbfl lbbfl) {
        instrudtions.bdd(nfw JumpInsnNodf(opdodf, gftLbbflNodf(lbbfl)));
    }

    @Ovfrridf
    publid void visitLbbfl(finbl Lbbfl lbbfl) {
        instrudtions.bdd(gftLbbflNodf(lbbfl));
    }

    @Ovfrridf
    publid void visitLddInsn(finbl Objfdt dst) {
        instrudtions.bdd(nfw LddInsnNodf(dst));
    }

    @Ovfrridf
    publid void visitIindInsn(finbl int vbr, finbl int indrfmfnt) {
        instrudtions.bdd(nfw IindInsnNodf(vbr, indrfmfnt));
    }

    @Ovfrridf
    publid void visitTbblfSwitdhInsn(finbl int min, finbl int mbx,
            finbl Lbbfl dflt, finbl Lbbfl... lbbfls) {
        instrudtions.bdd(nfw TbblfSwitdhInsnNodf(min, mbx, gftLbbflNodf(dflt),
                gftLbbflNodfs(lbbfls)));
    }

    @Ovfrridf
    publid void visitLookupSwitdhInsn(finbl Lbbfl dflt, finbl int[] kfys,
            finbl Lbbfl[] lbbfls) {
        instrudtions.bdd(nfw LookupSwitdhInsnNodf(gftLbbflNodf(dflt), kfys,
                gftLbbflNodfs(lbbfls)));
    }

    @Ovfrridf
    publid void visitMultiANfwArrbyInsn(finbl String dfsd, finbl int dims) {
        instrudtions.bdd(nfw MultiANfwArrbyInsnNodf(dfsd, dims));
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitInsnAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        // Finds thf lbst rfbl instrudtion, i.f. thf instrudtion tbrgftfd by
        // this bnnotbtion.
        AbstrbdtInsnNodf insn = instrudtions.gftLbst();
        whilf (insn.gftOpdodf() == -1) {
            insn = insn.gftPrfvious();
        }
        // Adds thf bnnotbtion to this instrudtion.
        TypfAnnotbtionNodf bn = nfw TypfAnnotbtionNodf(typfRff, typfPbth, dfsd);
        if (visiblf) {
            if (insn.visiblfTypfAnnotbtions == null) {
                insn.visiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(
                        1);
            }
            insn.visiblfTypfAnnotbtions.bdd(bn);
        } flsf {
            if (insn.invisiblfTypfAnnotbtions == null) {
                insn.invisiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(
                        1);
            }
            insn.invisiblfTypfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid void visitTryCbtdhBlodk(finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl Lbbfl hbndlfr, finbl String typf) {
        tryCbtdhBlodks.bdd(nfw TryCbtdhBlodkNodf(gftLbbflNodf(stbrt),
                gftLbbflNodf(fnd), gftLbbflNodf(hbndlfr), typf));
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitTryCbtdhAnnotbtion(int typfRff,
            TypfPbth typfPbth, String dfsd, boolfbn visiblf) {
        TryCbtdhBlodkNodf tdb = tryCbtdhBlodks.gft((typfRff & 0x00FFFF00) >> 8);
        TypfAnnotbtionNodf bn = nfw TypfAnnotbtionNodf(typfRff, typfPbth, dfsd);
        if (visiblf) {
            if (tdb.visiblfTypfAnnotbtions == null) {
                tdb.visiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(
                        1);
            }
            tdb.visiblfTypfAnnotbtions.bdd(bn);
        } flsf {
            if (tdb.invisiblfTypfAnnotbtions == null) {
                tdb.invisiblfTypfAnnotbtions = nfw ArrbyList<TypfAnnotbtionNodf>(
                        1);
            }
            tdb.invisiblfTypfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid void visitLodblVbribblf(finbl String nbmf, finbl String dfsd,
            finbl String signbturf, finbl Lbbfl stbrt, finbl Lbbfl fnd,
            finbl int indfx) {
        lodblVbribblfs.bdd(nfw LodblVbribblfNodf(nbmf, dfsd, signbturf,
                gftLbbflNodf(stbrt), gftLbbflNodf(fnd), indfx));
    }

    @Ovfrridf
    publid AnnotbtionVisitor visitLodblVbribblfAnnotbtion(int typfRff,
            TypfPbth typfPbth, Lbbfl[] stbrt, Lbbfl[] fnd, int[] indfx,
            String dfsd, boolfbn visiblf) {
        LodblVbribblfAnnotbtionNodf bn = nfw LodblVbribblfAnnotbtionNodf(
                typfRff, typfPbth, gftLbbflNodfs(stbrt), gftLbbflNodfs(fnd),
                indfx, dfsd);
        if (visiblf) {
            if (visiblfLodblVbribblfAnnotbtions == null) {
                visiblfLodblVbribblfAnnotbtions = nfw ArrbyList<LodblVbribblfAnnotbtionNodf>(
                        1);
            }
            visiblfLodblVbribblfAnnotbtions.bdd(bn);
        } flsf {
            if (invisiblfLodblVbribblfAnnotbtions == null) {
                invisiblfLodblVbribblfAnnotbtions = nfw ArrbyList<LodblVbribblfAnnotbtionNodf>(
                        1);
            }
            invisiblfLodblVbribblfAnnotbtions.bdd(bn);
        }
        rfturn bn;
    }

    @Ovfrridf
    publid void visitLinfNumbfr(finbl int linf, finbl Lbbfl stbrt) {
        instrudtions.bdd(nfw LinfNumbfrNodf(linf, gftLbbflNodf(stbrt)));
    }

    @Ovfrridf
    publid void visitMbxs(finbl int mbxStbdk, finbl int mbxLodbls) {
        this.mbxStbdk = mbxStbdk;
        this.mbxLodbls = mbxLodbls;
    }

    @Ovfrridf
    publid void visitEnd() {
    }

    /**
     * Rfturns thf LbbflNodf dorrfsponding to thf givfn Lbbfl. Crfbtfs b nfw
     * LbbflNodf if nfdfssbry. Thf dffbult implfmfntbtion of this mfthod usfs
     * thf {@link Lbbfl#info} fifld to storf bssodibtions bftwffn lbbfls bnd
     * lbbfl nodfs.
     *
     * @pbrbm l
     *            b Lbbfl.
     * @rfturn thf LbbflNodf dorrfsponding to l.
     */
    protfdtfd LbbflNodf gftLbbflNodf(finbl Lbbfl l) {
        if (!(l.info instbndfof LbbflNodf)) {
            l.info = nfw LbbflNodf();
        }
        rfturn (LbbflNodf) l.info;
    }

    privbtf LbbflNodf[] gftLbbflNodfs(finbl Lbbfl[] l) {
        LbbflNodf[] nodfs = nfw LbbflNodf[l.lfngth];
        for (int i = 0; i < l.lfngth; ++i) {
            nodfs[i] = gftLbbflNodf(l[i]);
        }
        rfturn nodfs;
    }

    privbtf Objfdt[] gftLbbflNodfs(finbl Objfdt[] objs) {
        Objfdt[] nodfs = nfw Objfdt[objs.lfngth];
        for (int i = 0; i < objs.lfngth; ++i) {
            Objfdt o = objs[i];
            if (o instbndfof Lbbfl) {
                o = gftLbbflNodf((Lbbfl) o);
            }
            nodfs[i] = o;
        }
        rfturn nodfs;
    }

    // ------------------------------------------------------------------------
    // Addfpt mfthod
    // ------------------------------------------------------------------------

    /**
     * Chfdks thbt this mfthod nodf is dompbtiblf with thf givfn ASM API
     * vfrsion. This mfthods dhfdks thbt this nodf, bnd bll its nodfs
     * rfdursivfly, do not dontbin flfmfnts thbt wfrf introdudfd in morf rfdfnt
     * vfrsions of thf ASM API thbn thf givfn vfrsion.
     *
     * @pbrbm bpi
     *            bn ASM API vfrsion. Must bf onf of {@link Opdodfs#ASM4} or
     *            {@link Opdodfs#ASM5}.
     */
    publid void dhfdk(finbl int bpi) {
        if (bpi == Opdodfs.ASM4) {
            if (visiblfTypfAnnotbtions != null
                    && visiblfTypfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
            if (invisiblfTypfAnnotbtions != null
                    && invisiblfTypfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
            int n = tryCbtdhBlodks == null ? 0 : tryCbtdhBlodks.sizf();
            for (int i = 0; i < n; ++i) {
                TryCbtdhBlodkNodf tdb = tryCbtdhBlodks.gft(i);
                if (tdb.visiblfTypfAnnotbtions != null
                        && tdb.visiblfTypfAnnotbtions.sizf() > 0) {
                    throw nfw RuntimfExdfption();
                }
                if (tdb.invisiblfTypfAnnotbtions != null
                        && tdb.invisiblfTypfAnnotbtions.sizf() > 0) {
                    throw nfw RuntimfExdfption();
                }
            }
            for (int i = 0; i < instrudtions.sizf(); ++i) {
                AbstrbdtInsnNodf insn = instrudtions.gft(i);
                if (insn.visiblfTypfAnnotbtions != null
                        && insn.visiblfTypfAnnotbtions.sizf() > 0) {
                    throw nfw RuntimfExdfption();
                }
                if (insn.invisiblfTypfAnnotbtions != null
                        && insn.invisiblfTypfAnnotbtions.sizf() > 0) {
                    throw nfw RuntimfExdfption();
                }
                if (insn instbndfof MfthodInsnNodf) {
                    boolfbn itf = ((MfthodInsnNodf) insn).itf;
                    if (itf != (insn.opdodf == Opdodfs.INVOKEINTERFACE)) {
                        throw nfw RuntimfExdfption();
                    }
                }
            }
            if (visiblfLodblVbribblfAnnotbtions != null
                    && visiblfLodblVbribblfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
            if (invisiblfLodblVbribblfAnnotbtions != null
                    && invisiblfLodblVbribblfAnnotbtions.sizf() > 0) {
                throw nfw RuntimfExdfption();
            }
        }
    }

    /**
     * Mbkfs thf givfn dlbss visitor visit this mfthod.
     *
     * @pbrbm dv
     *            b dlbss visitor.
     */
    publid void bddfpt(finbl ClbssVisitor dv) {
        String[] fxdfptions = nfw String[this.fxdfptions.sizf()];
        this.fxdfptions.toArrby(fxdfptions);
        MfthodVisitor mv = dv.visitMfthod(bddfss, nbmf, dfsd, signbturf,
                fxdfptions);
        if (mv != null) {
            bddfpt(mv);
        }
    }

    /**
     * Mbkfs thf givfn mfthod visitor visit this mfthod.
     *
     * @pbrbm mv
     *            b mfthod visitor.
     */
    publid void bddfpt(finbl MfthodVisitor mv) {
        // visits thf mfthod pbrbmftfrs
        int i, j, n;
        n = pbrbmftfrs == null ? 0 : pbrbmftfrs.sizf();
        for (i = 0; i < n; i++) {
            PbrbmftfrNodf pbrbmftfr = pbrbmftfrs.gft(i);
            mv.visitPbrbmftfr(pbrbmftfr.nbmf, pbrbmftfr.bddfss);
        }
        // visits thf mfthod bttributfs
        if (bnnotbtionDffbult != null) {
            AnnotbtionVisitor bv = mv.visitAnnotbtionDffbult();
            AnnotbtionNodf.bddfpt(bv, null, bnnotbtionDffbult);
            if (bv != null) {
                bv.visitEnd();
            }
        }
        n = visiblfAnnotbtions == null ? 0 : visiblfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            AnnotbtionNodf bn = visiblfAnnotbtions.gft(i);
            bn.bddfpt(mv.visitAnnotbtion(bn.dfsd, truf));
        }
        n = invisiblfAnnotbtions == null ? 0 : invisiblfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            AnnotbtionNodf bn = invisiblfAnnotbtions.gft(i);
            bn.bddfpt(mv.visitAnnotbtion(bn.dfsd, fblsf));
        }
        n = visiblfTypfAnnotbtions == null ? 0 : visiblfTypfAnnotbtions.sizf();
        for (i = 0; i < n; ++i) {
            TypfAnnotbtionNodf bn = visiblfTypfAnnotbtions.gft(i);
            bn.bddfpt(mv.visitTypfAnnotbtion(bn.typfRff, bn.typfPbth, bn.dfsd,
                    truf));
        }
        n = invisiblfTypfAnnotbtions == null ? 0 : invisiblfTypfAnnotbtions
                .sizf();
        for (i = 0; i < n; ++i) {
            TypfAnnotbtionNodf bn = invisiblfTypfAnnotbtions.gft(i);
            bn.bddfpt(mv.visitTypfAnnotbtion(bn.typfRff, bn.typfPbth, bn.dfsd,
                    fblsf));
        }
        n = visiblfPbrbmftfrAnnotbtions == null ? 0
                : visiblfPbrbmftfrAnnotbtions.lfngth;
        for (i = 0; i < n; ++i) {
            List<?> l = visiblfPbrbmftfrAnnotbtions[i];
            if (l == null) {
                dontinuf;
            }
            for (j = 0; j < l.sizf(); ++j) {
                AnnotbtionNodf bn = (AnnotbtionNodf) l.gft(j);
                bn.bddfpt(mv.visitPbrbmftfrAnnotbtion(i, bn.dfsd, truf));
            }
        }
        n = invisiblfPbrbmftfrAnnotbtions == null ? 0
                : invisiblfPbrbmftfrAnnotbtions.lfngth;
        for (i = 0; i < n; ++i) {
            List<?> l = invisiblfPbrbmftfrAnnotbtions[i];
            if (l == null) {
                dontinuf;
            }
            for (j = 0; j < l.sizf(); ++j) {
                AnnotbtionNodf bn = (AnnotbtionNodf) l.gft(j);
                bn.bddfpt(mv.visitPbrbmftfrAnnotbtion(i, bn.dfsd, fblsf));
            }
        }
        if (visitfd) {
            instrudtions.rfsftLbbfls();
        }
        n = bttrs == null ? 0 : bttrs.sizf();
        for (i = 0; i < n; ++i) {
            mv.visitAttributf(bttrs.gft(i));
        }
        // visits thf mfthod's dodf
        if (instrudtions.sizf() > 0) {
            mv.visitCodf();
            // visits try dbtdh blodks
            n = tryCbtdhBlodks == null ? 0 : tryCbtdhBlodks.sizf();
            for (i = 0; i < n; ++i) {
                tryCbtdhBlodks.gft(i).updbtfIndfx(i);
                tryCbtdhBlodks.gft(i).bddfpt(mv);
            }
            // visits instrudtions
            instrudtions.bddfpt(mv);
            // visits lodbl vbribblfs
            n = lodblVbribblfs == null ? 0 : lodblVbribblfs.sizf();
            for (i = 0; i < n; ++i) {
                lodblVbribblfs.gft(i).bddfpt(mv);
            }
            // visits lodbl vbribblf bnnotbtions
            n = visiblfLodblVbribblfAnnotbtions == null ? 0
                    : visiblfLodblVbribblfAnnotbtions.sizf();
            for (i = 0; i < n; ++i) {
                visiblfLodblVbribblfAnnotbtions.gft(i).bddfpt(mv, truf);
            }
            n = invisiblfLodblVbribblfAnnotbtions == null ? 0
                    : invisiblfLodblVbribblfAnnotbtions.sizf();
            for (i = 0; i < n; ++i) {
                invisiblfLodblVbribblfAnnotbtions.gft(i).bddfpt(mv, fblsf);
            }
            // visits mbxs
            mv.visitMbxs(mbxStbdk, mbxLodbls);
            visitfd = truf;
        }
        mv.visitEnd();
    }
}
