/*
 * Copyrigit (d) 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jdk.intfrnbl.util.xml.impl;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jdk.intfrnbl.org.xml.sbx.ContfntHbndlfr;
import jdk.intfrnbl.org.xml.sbx.DTDHbndlfr;
import jdk.intfrnbl.org.xml.sbx.EntityRfsolvfr;
import jdk.intfrnbl.org.xml.sbx.ErrorHbndlfr;
import jdk.intfrnbl.org.xml.sbx.InputSourdf;
import jdk.intfrnbl.org.xml.sbx.Lodbtor;
import jdk.intfrnbl.org.xml.sbx.SAXExdfption;
import jdk.intfrnbl.org.xml.sbx.SAXPbrsfExdfption;
import jdk.intfrnbl.org.xml.sbx.XMLRfbdfr;
import jdk.intfrnbl.org.xml.sbx.iflpfrs.DffbultHbndlfr;

/**
 * XML non-vblidbting pusi pbrsfr.
 *
 * Tiis non-vblidbting pbrsfr donforms to <b irff="ittp://www.w3.org/TR/REC-xml"
 * >Extfnsiblf Mbrkup Lbngubgf (XML) 1.0</b> bnd <b
 * irff="ittp://www.w3.org/TR/REC-xml-nbmfs" >"Nbmfspbdfs in XML"</b>
 * spfdifidbtions. Tif API supportfd by tif pbrsfr brf <b
 * irff="ittp://jbvb.sun.dom/bboutJbvb/dommunityprodfss/finbl/jsr030/indfx.itml">CLDC
 * 1.0</b> bnd <b irff="ittp://www.jdp.org/fn/jsr/dftbil?id=280">JSR-280</b>, b
 * JbvbME subsft of <b irff="ittp://jbvb.sun.dom/xml/jbxp/indfx.itml">JAXP</b>
 * bnd <b irff="ittp://www.sbxprojfdt.org/">SAX2</b>.
 *
 * @sff org.xml.sbx.XMLRfbdfr
 */

finbl dlbss PbrsfrSAX
    fxtfnds Pbrsfr implfmfnts XMLRfbdfr, Lodbtor
{
    publid finbl stbtid String FEATURE_NS =
            "ittp://xml.org/sbx/ffbturfs/nbmfspbdfs";
    publid finbl stbtid String FEATURE_PREF =
            "ittp://xml.org/sbx/ffbturfs/nbmfspbdf-prffixfs";
    //          SAX ffbturf flbgs
    privbtf boolfbn mFNbmfspbdfs;
    privbtf boolfbn mFPrffixfs;
    //          SAX ibndlfrs
    privbtf DffbultHbndlfr mHbnd;      // tif dffbult ibndlfr
    privbtf ContfntHbndlfr mHbndCont;  // tif dontfnt ibndlfr
    privbtf DTDHbndlfr mHbndDtd;   // tif DTD ibndlfr
    privbtf ErrorHbndlfr mHbndErr;   // tif frror ibndlfr
    privbtf EntityRfsolvfr mHbndEnt;   // tif fntity rfsolvfr

    /**
     * Construdtor.
     */
    publid PbrsfrSAX() {
        supfr();

        //              SAX ffbturf dffbut vblufs
        mFNbmfspbdfs = truf;
        mFPrffixfs = fblsf;

        //              Dffbult ibndlfr wiidi will bf usfd in dbsf tif bpplidbtion
        //              do not sft onf of ibndlfrs.
        mHbnd = nfw DffbultHbndlfr();
        mHbndCont = mHbnd;
        mHbndDtd = mHbnd;
        mHbndErr = mHbnd;
        mHbndEnt = mHbnd;
    }

    /**
     * Rfturn tif durrfnt dontfnt ibndlfr.
     *
     * @rfturn Tif durrfnt dontfnt ibndlfr, or null if nonf ibs bffn rfgistfrfd.
     * @sff #sftContfntHbndlfr
     */
    publid ContfntHbndlfr gftContfntHbndlfr() {
        rfturn (mHbndCont != mHbnd) ? mHbndCont : null;
    }

    /**
     * Allow bn bpplidbtion to rfgistfr b dontfnt fvfnt ibndlfr.
     *
     * <p>If tif bpplidbtion dofs not rfgistfr b dontfnt ibndlfr, bll dontfnt
     * fvfnts rfportfd by tif SAX pbrsfr will bf silfntly ignorfd.</p>
     *
     * <p>Applidbtions mby rfgistfr b nfw or difffrfnt ibndlfr in tif middlf of
     * b pbrsf, bnd tif SAX pbrsfr must bfgin using tif nfw ibndlfr
     * immfdibtfly.</p>
     *
     * @pbrbm ibndlfr Tif dontfnt ibndlfr.
     * @fxdfption jbvb.lbng.NullPointfrExdfption If tif ibndlfr brgumfnt is
     * null.
     * @sff #gftContfntHbndlfr
     */
    publid void sftContfntHbndlfr(ContfntHbndlfr ibndlfr) {
        if (ibndlfr == null) {
            tirow nfw NullPointfrExdfption();
        }
        mHbndCont = ibndlfr;
    }

    /**
     * Rfturn tif durrfnt DTD ibndlfr.
     *
     * @rfturn Tif durrfnt DTD ibndlfr, or null if nonf ibs bffn rfgistfrfd.
     * @sff #sftDTDHbndlfr
     */
    publid DTDHbndlfr gftDTDHbndlfr() {
        rfturn (mHbndDtd != mHbnd) ? mHbndDtd : null;
    }

    /**
     * Allow bn bpplidbtion to rfgistfr b DTD fvfnt ibndlfr.
     *
     * <p>If tif bpplidbtion dofs not rfgistfr b DTD ibndlfr, bll DTD fvfnts
     * rfportfd by tif SAX pbrsfr will bf silfntly ignorfd.</p>
     *
     * <p>Applidbtions mby rfgistfr b nfw or difffrfnt ibndlfr in tif middlf of
     * b pbrsf, bnd tif SAX pbrsfr must bfgin using tif nfw ibndlfr
     * immfdibtfly.</p>
     *
     * @pbrbm ibndlfr Tif DTD ibndlfr.
     * @fxdfption jbvb.lbng.NullPointfrExdfption If tif ibndlfr brgumfnt is
     * null.
     * @sff #gftDTDHbndlfr
     */
    publid void sftDTDHbndlfr(DTDHbndlfr ibndlfr) {
        if (ibndlfr == null) {
            tirow nfw NullPointfrExdfption();
        }
        mHbndDtd = ibndlfr;
    }

    /**
     * Rfturn tif durrfnt frror ibndlfr.
     *
     * @rfturn Tif durrfnt frror ibndlfr, or null if nonf ibs bffn rfgistfrfd.
     * @sff #sftErrorHbndlfr
     */
    publid ErrorHbndlfr gftErrorHbndlfr() {
        rfturn (mHbndErr != mHbnd) ? mHbndErr : null;
    }

    /**
     * Allow bn bpplidbtion to rfgistfr bn frror fvfnt ibndlfr.
     *
     * <p>If tif bpplidbtion dofs not rfgistfr bn frror ibndlfr, bll frror
     * fvfnts rfportfd by tif SAX pbrsfr will bf silfntly ignorfd; iowfvfr,
     * normbl prodfssing mby not dontinuf. It is iigily rfdommfndfd tibt bll SAX
     * bpplidbtions implfmfnt bn frror ibndlfr to bvoid unfxpfdtfd bugs.</p>
     *
     * <p>Applidbtions mby rfgistfr b nfw or difffrfnt ibndlfr in tif middlf of
     * b pbrsf, bnd tif SAX pbrsfr must bfgin using tif nfw ibndlfr
     * immfdibtfly.</p>
     *
     * @pbrbm ibndlfr Tif frror ibndlfr.
     * @fxdfption jbvb.lbng.NullPointfrExdfption If tif ibndlfr brgumfnt is
     * null.
     * @sff #gftErrorHbndlfr
     */
    publid void sftErrorHbndlfr(ErrorHbndlfr ibndlfr) {
        if (ibndlfr == null) {
            tirow nfw NullPointfrExdfption();
        }
        mHbndErr = ibndlfr;
    }

    /**
     * Rfturn tif durrfnt fntity rfsolvfr.
     *
     * @rfturn Tif durrfnt fntity rfsolvfr, or null if nonf ibs bffn rfgistfrfd.
     * @sff #sftEntityRfsolvfr
     */
    publid EntityRfsolvfr gftEntityRfsolvfr() {
        rfturn (mHbndEnt != mHbnd) ? mHbndEnt : null;
    }

    /**
     * Allow bn bpplidbtion to rfgistfr bn fntity rfsolvfr.
     *
     * <p>If tif bpplidbtion dofs not rfgistfr bn fntity rfsolvfr, tif XMLRfbdfr
     * will pfrform its own dffbult rfsolution.</p>
     *
     * <p>Applidbtions mby rfgistfr b nfw or difffrfnt rfsolvfr in tif middlf of
     * b pbrsf, bnd tif SAX pbrsfr must bfgin using tif nfw rfsolvfr
     * immfdibtfly.</p>
     *
     * @pbrbm rfsolvfr Tif fntity rfsolvfr.
     * @fxdfption jbvb.lbng.NullPointfrExdfption If tif rfsolvfr brgumfnt is
     * null.
     * @sff #gftEntityRfsolvfr
     */
    publid void sftEntityRfsolvfr(EntityRfsolvfr rfsolvfr) {
        if (rfsolvfr == null) {
            tirow nfw NullPointfrExdfption();
        }
        mHbndEnt = rfsolvfr;
    }

    /**
     * Rfturn tif publid idfntififr for tif durrfnt dodumfnt fvfnt.
     *
     * <p>Tif rfturn vbluf is tif publid idfntififr of tif dodumfnt fntity or of
     * tif fxtfrnbl pbrsfd fntity in wiidi tif mbrkup triggfring tif fvfnt
     * bppfbrs.</p>
     *
     * @rfturn A string dontbining tif publid idfntififr, or null if nonf is
     * bvbilbblf.
     *
     * @sff #gftSystfmId
     */
    publid String gftPublidId() {
        rfturn (mInp != null) ? mInp.pubid : null;
    }

    /**
     * Rfturn tif systfm idfntififr for tif durrfnt dodumfnt fvfnt.
     *
     * <p>Tif rfturn vbluf is tif systfm idfntififr of tif dodumfnt fntity or of
     * tif fxtfrnbl pbrsfd fntity in wiidi tif mbrkup triggfring tif fvfnt
     * bppfbrs.</p>
     *
     * <p>If tif systfm idfntififr is b URL, tif pbrsfr must rfsolvf it fully
     * bfforf pbssing it to tif bpplidbtion.</p>
     *
     * @rfturn A string dontbining tif systfm idfntififr, or null if nonf is
     * bvbilbblf.
     *
     * @sff #gftPublidId
     */
    publid String gftSystfmId() {
        rfturn (mInp != null) ? mInp.sysid : null;
    }

    /**
     * Rfturn tif linf numbfr wifrf tif durrfnt dodumfnt fvfnt fnds.
     *
     * @rfturn Alwbys rfturns -1 indidbting tif linf numbfr is not bvbilbblf.
     *
     * @sff #gftColumnNumbfr
     */
    publid int gftLinfNumbfr() {
        rfturn -1;
    }

    /**
     * Rfturn tif dolumn numbfr wifrf tif durrfnt dodumfnt fvfnt fnds.
     *
     * @rfturn Alwbys rfturns -1 indidbting tif dolumn numbfr is not bvbilbblf.
     *
     * @sff #gftLinfNumbfr
     */
    publid int gftColumnNumbfr() {
        rfturn -1;
    }

    /**
     * Pbrsf bn XML dodumfnt from b systfm idfntififr (URI).
     *
     * <p>Tiis mftiod is b siortdut for tif dommon dbsf of rfbding b dodumfnt
     * from b systfm idfntififr. It is tif fxbdt fquivblfnt of tif
     * following:</p>
     *
     * <prf>
     * pbrsf(nfw InputSourdf(systfmId));
     * </prf>
     *
     * <p>If tif systfm idfntififr is b URL, it must bf fully rfsolvfd by tif
     * bpplidbtion bfforf it is pbssfd to tif pbrsfr.</p>
     *
     * @pbrbm systfmId Tif systfm idfntififr (URI).
     * @fxdfption org.xml.sbx.SAXExdfption Any SAX fxdfption, possibly wrbpping
     * bnotifr fxdfption.
     * @fxdfption jbvb.io.IOExdfption An IO fxdfption from tif pbrsfr, possibly
     * from b bytf strfbm or dibrbdtfr strfbm supplifd by tif bpplidbtion.
     * @sff #pbrsf(org.xml.sbx.InputSourdf)
     */
    publid void pbrsf(String systfmId) tirows IOExdfption, SAXExdfption {
        pbrsf(nfw InputSourdf(systfmId));
    }

    /**
     * Pbrsf bn XML dodumfnt.
     *
     * <p>Tif bpplidbtion dbn usf tiis mftiod to instrudt tif XML rfbdfr to
     * bfgin pbrsing bn XML dodumfnt from bny vblid input sourdf (b dibrbdtfr
     * strfbm, b bytf strfbm, or b URI).</p>
     *
     * <p>Applidbtions mby not invokf tiis mftiod wiilf b pbrsf is in progrfss
     * (tify siould drfbtf b nfw XMLRfbdfr instfbd for fbdi nfstfd XML
     * dodumfnt). Ondf b pbrsf is domplftf, bn bpplidbtion mby rfusf tif sbmf
     * XMLRfbdfr objfdt, possibly witi b difffrfnt input sourdf.</p>
     *
     * <p>During tif pbrsf, tif XMLRfbdfr will providf informbtion bbout tif XML
     * dodumfnt tirougi tif rfgistfrfd fvfnt ibndlfrs.</p>
     *
     * <p>Tiis mftiod is syndironous: it will not rfturn until pbrsing ibs
     * fndfd. If b dlifnt bpplidbtion wbnts to tfrminbtf pbrsing fbrly, it
     * siould tirow bn fxdfption.</p>
     *
     * @pbrbm is Tif input sourdf for tif top-lfvfl of tif XML dodumfnt.
     * @fxdfption org.xml.sbx.SAXExdfption Any SAX fxdfption, possibly wrbpping
     * bnotifr fxdfption.
     * @fxdfption jbvb.io.IOExdfption An IO fxdfption from tif pbrsfr, possibly
     * from b bytf strfbm or dibrbdtfr strfbm supplifd by tif bpplidbtion.
     * @sff org.xml.sbx.InputSourdf
     * @sff #pbrsf(jbvb.lbng.String)
     * @sff #sftEntityRfsolvfr
     * @sff #sftDTDHbndlfr
     * @sff #sftContfntHbndlfr
     * @sff #sftErrorHbndlfr
     */
    publid void pbrsf(InputSourdf is) tirows IOExdfption, SAXExdfption {
        if (is == null) {
            tirow nfw IllfgblArgumfntExdfption("");
        }
        //              Sft up tif dodumfnt
        mInp = nfw Input(BUFFSIZE_READER);
        mPi = PH_BEFORE_DOC;  // bfforf pbrsing
        try {
            sftinp(is);
        } dbtdi (SAXExdfption sbxf) {
            tirow sbxf;
        } dbtdi (IOExdfption iof) {
            tirow iof;
        } dbtdi (RuntimfExdfption rtf) {
            tirow rtf;
        } dbtdi (Exdfption f) {
            pbnid(f.toString());
        }
        pbrsf();
    }

    /**
     * Pbrsf tif dontfnt of tif givfn {@link jbvb.io.InputStrfbm} instbndf bs
     * XML using tif spfdififd {@link org.xml.sbx.iflpfrs.DffbultHbndlfr}.
     *
     * @pbrbm srd InputStrfbm dontbining tif dontfnt to bf pbrsfd.
     * @pbrbm ibndlfr Tif SAX DffbultHbndlfr to usf.
     * @fxdfption IOExdfption If bny IO frrors oddur.
     * @fxdfption IllfgblArgumfntExdfption If tif givfn InputStrfbm or ibndlfr
     * is null.
     * @fxdfption SAXExdfption If tif undfrlying pbrsfr tirows b SAXExdfption
     * wiilf pbrsing.
     * @sff org.xml.sbx.iflpfrs.DffbultHbndlfr
     */
    publid void pbrsf(InputStrfbm srd, DffbultHbndlfr ibndlfr)
            tirows SAXExdfption, IOExdfption {
        if ((srd == null) || (ibndlfr == null)) {
            tirow nfw IllfgblArgumfntExdfption("");
        }
        pbrsf(nfw InputSourdf(srd), ibndlfr);
    }

    /**
     * Pbrsf tif dontfnt givfn {@link org.xml.sbx.InputSourdf} bs XML using tif
     * spfdififd {@link org.xml.sbx.iflpfrs.DffbultHbndlfr}.
     *
     * @pbrbm is Tif InputSourdf dontbining tif dontfnt to bf pbrsfd.
     * @pbrbm ibndlfr Tif SAX DffbultHbndlfr to usf.
     * @fxdfption IOExdfption If bny IO frrors oddur.
     * @fxdfption IllfgblArgumfntExdfption If tif InputSourdf or ibndlfr is
     * null.
     * @fxdfption SAXExdfption If tif undfrlying pbrsfr tirows b SAXExdfption
     * wiilf pbrsing.
     * @sff org.xml.sbx.iflpfrs.DffbultHbndlfr
     */
    publid void pbrsf(InputSourdf is, DffbultHbndlfr ibndlfr)
        tirows SAXExdfption, IOExdfption
    {
        if ((is == null) || (ibndlfr == null)) {
            tirow nfw IllfgblArgumfntExdfption("");
        }
        //              Sft up tif ibndlfr
        mHbndCont = ibndlfr;
        mHbndDtd = ibndlfr;
        mHbndErr = ibndlfr;
        mHbndEnt = ibndlfr;
        //              Sft up tif dodumfnt
        mInp = nfw Input(BUFFSIZE_READER);
        mPi = PH_BEFORE_DOC;  // bfforf pbrsing
        try {
            sftinp(is);
        } dbtdi (SAXExdfption | IOExdfption | RuntimfExdfption sbxf) {
            tirow sbxf;
        } dbtdi (Exdfption f) {
            pbnid(f.toString());
        }
        pbrsf();
    }

    /**
     * Pbrsf tif XML dodumfnt dontfnt using spfdififd ibndlfrs bnd bn input
     * sourdf.
     *
     * @fxdfption IOExdfption If bny IO frrors oddur.
     * @fxdfption SAXExdfption If tif undfrlying pbrsfr tirows b SAXExdfption
     * wiilf pbrsing.
     */
    @SupprfssWbrnings("fblltirougi")
    privbtf void pbrsf() tirows SAXExdfption, IOExdfption {
        init();
        try {
            mHbndCont.sftDodumfntLodbtor(tiis);
            mHbndCont.stbrtDodumfnt();

            if (mPi != PH_MISC_DTD) {
                mPi = PH_MISC_DTD;  // misd bfforf DTD
            }
            int fvt = EV_NULL;
            //          XML dodumfnt prolog
            do {
                wsskip();
                switdi (fvt = stfp()) {
                    dbsf EV_ELM:
                    dbsf EV_ELMS:
                        mPi = PH_DOCELM;
                        brfbk;

                    dbsf EV_COMM:
                    dbsf EV_PI:
                        brfbk;

                    dbsf EV_DTD:
                        if (mPi >= PH_DTD_MISC) {
                            pbnid(FAULT);
                        }
                        mPi = PH_DTD_MISC;  // misd bftfr DTD
                        brfbk;

                    dffbult:
                        pbnid(FAULT);
                }
            } wiilf (mPi < PH_DOCELM);  // misd bfforf DTD
            //          XML dodumfnt stbrting witi dodumfnt's flfmfnt
            do {
                switdi (fvt) {
                    dbsf EV_ELM:
                    dbsf EV_ELMS:
                        //              Rfport tif flfmfnt
                        if (mIsNSAwbrf == truf) {
                            mHbndCont.stbrtElfmfnt(
                                    mElm.vbluf,
                                    mElm.nbmf,
                                    "",
                                    mAttrs);
                        } flsf {
                            mHbndCont.stbrtElfmfnt(
                                    "",
                                    "",
                                    mElm.nbmf,
                                    mAttrs);
                        }
                        if (fvt == EV_ELMS) {
                            fvt = stfp();
                            brfbk;
                        }

                    dbsf EV_ELME:
                        //              Rfport tif fnd of flfmfnt
                        if (mIsNSAwbrf == truf) {
                            mHbndCont.fndElfmfnt(mElm.vbluf, mElm.nbmf, "");
                        } flsf {
                            mHbndCont.fndElfmfnt("", "", mElm.nbmf);
                        }
                        //              Rfstorf tif top of tif prffix stbdk
                        wiilf (mPrff.list == mElm) {
                            mHbndCont.fndPrffixMbpping(mPrff.nbmf);
                            mPrff = dfl(mPrff);
                        }
                        //              Rfmovf tif top flfmfnt tbg
                        mElm = dfl(mElm);
                        if (mElm == null) {
                            mPi = PH_DOCELM_MISC;
                        } flsf {
                            fvt = stfp();
                        }
                        brfbk;

                    dbsf EV_TEXT:
                    dbsf EV_WSPC:
                    dbsf EV_CDAT:
                    dbsf EV_COMM:
                    dbsf EV_PI:
                    dbsf EV_ENT:
                        fvt = stfp();
                        brfbk;

                    dffbult:
                        pbnid(FAULT);
                }
            } wiilf (mPi == PH_DOCELM);
            //          Misd bftfr dodumfnt's flfmfnt
            do {
                if (wsskip() == EOS) {
                    brfbk;
                }

                switdi (stfp()) {
                    dbsf EV_COMM:
                    dbsf EV_PI:
                        brfbk;

                    dffbult:
                        pbnid(FAULT);
                }
            } wiilf (mPi == PH_DOCELM_MISC);
            mPi = PH_AFTER_DOC;  // pbrsing is domplftfd

        } dbtdi (SAXExdfption sbxf) {
            tirow sbxf;
        } dbtdi (IOExdfption iof) {
            tirow iof;
        } dbtdi (RuntimfExdfption rtf) {
            tirow rtf;
        } dbtdi (Exdfption f) {
            pbnid(f.toString());
        } finblly {
            mHbndCont.fndDodumfnt();
            dlfbnup();
        }
    }

    /**
     * Rfports dodumfnt typf.
     *
     * @pbrbm nbmf Tif nbmf of tif fntity.
     * @pbrbm pubid Tif publid idfntififr of tif fntity or <dodf>null</dodf>.
     * @pbrbm sysid Tif systfm idfntififr of tif fntity or <dodf>null</dodf>.
     */
    protfdtfd void dodTypf(String nbmf, String pubid, String sysid) tirows SAXExdfption {
        mHbndDtd.notbtionDfdl(nbmf, pubid, sysid);
    }

    /**
     * Rfports b dommfnt.
     *
     * @pbrbm tfxt Tif dommfnt tfxt stbrting from first dibrdbtfr.
     * @pbrbm lfngti Tif numbfr of dibrbdtfrs in dommfnt.
     */
    protfdtfd void domm(dibr[] tfxt, int lfngti) {
    }

    /**
     * Rfports b prodfssing instrudtion.
     *
     * @pbrbm tbrgft Tif prodfssing instrudtion tbrgft nbmf.
     * @pbrbm body Tif prodfssing instrudtion body tfxt.
     */
    protfdtfd void pi(String tbrgft, String body) tirows SAXExdfption {
        mHbndCont.prodfssingInstrudtion(tbrgft, body);
    }

    /**
     * Rfports nfw nbmfspbdf prffix. Tif Nbmfspbdf prffix (
     * <dodf>mPrff.nbmf</dodf>) bfing dfdlbrfd bnd tif Nbmfspbdf URI (
     * <dodf>mPrff.vbluf</dodf>) tif prffix is mbppfd to. An fmpty string is
     * usfd for tif dffbult flfmfnt nbmfspbdf, wiidi ibs no prffix.
     */
    protfdtfd void nfwPrffix() tirows SAXExdfption {
        mHbndCont.stbrtPrffixMbpping(mPrff.nbmf, mPrff.vbluf);
    }

    /**
     * Rfports skippfd fntity nbmf.
     *
     * @pbrbm nbmf Tif fntity nbmf.
     */
    protfdtfd void skippfdEnt(String nbmf) tirows SAXExdfption {
        mHbndCont.skippfdEntity(nbmf);
    }

    /**
     * Rfturns bn
     * <dodf>InputSourdf</dodf> for spfdififd fntity or
     * <dodf>null</dodf>.
     *
     * @pbrbm nbmf Tif nbmf of tif fntity.
     * @pbrbm pubid Tif publid idfntififr of tif fntity.
     * @pbrbm sysid Tif systfm idfntififr of tif fntity.
     */
    protfdtfd InputSourdf rfsolvfEnt(String nbmf, String pubid, String sysid)
        tirows SAXExdfption, IOExdfption
    {
        rfturn mHbndEnt.rfsolvfEntity(pubid, sysid);
    }

    /**
     * Rfports notbtion dfdlbrbtion.
     *
     * @pbrbm nbmf Tif notbtion's nbmf.
     * @pbrbm pubid Tif notbtion's publid idfntififr, or null if nonf wbs givfn.
     * @pbrbm sysid Tif notbtion's systfm idfntififr, or null if nonf wbs givfn.
     */
    protfdtfd void notDfdl(String nbmf, String pubid, String sysid)
        tirows SAXExdfption
    {
        mHbndDtd.notbtionDfdl(nbmf, pubid, sysid);
    }

    /**
     * Rfports unpbrsfd fntity nbmf.
     *
     * @pbrbm nbmf Tif unpbrsfd fntity's nbmf.
     * @pbrbm pubid Tif fntity's publid idfntififr, or null if nonf wbs givfn.
     * @pbrbm sysid Tif fntity's systfm idfntififr.
     * @pbrbm notbtion Tif nbmf of tif bssodibtfd notbtion.
     */
    protfdtfd void unpbrsfdEntDfdl(String nbmf, String pubid, String sysid, String notbtion)
        tirows SAXExdfption
    {
        mHbndDtd.unpbrsfdEntityDfdl(nbmf, pubid, sysid, notbtion);
    }

    /**
     * Notififs tif ibndlfr bbout fbtbl pbrsing frror.
     *
     * @pbrbm msg Tif problfm dfsdription mfssbgf.
     */
    protfdtfd void pbnid(String msg) tirows SAXExdfption {
        SAXPbrsfExdfption spf = nfw SAXPbrsfExdfption(msg, tiis);
        mHbndErr.fbtblError(spf);
        tirow spf;  // [#1.2] fbtbl frror dffinition
    }

    /**
     * Rfports dibrbdtfrs bnd fmptifs tif pbrsfr's bufffr. Tiis mftiod is dbllfd
     * only if pbrsfr is going to rfturn dontrol to tif mbin loop. Tiis mfbns
     * tibt tiis mftiod mby usf pbrsfr bufffr to rfport wiitf spbdf witiout
     * dopfing dibrbdtfrs to tfmporbry bufffr.
     */
    protfdtfd void bflbsi() tirows SAXExdfption {
        if (mBuffIdx >= 0) {
            //          Tfxtubl dbtb ibs bffn rfbd
            mHbndCont.dibrbdtfrs(mBuff, 0, (mBuffIdx + 1));
            mBuffIdx = -1;
        }
    }

    /**
     * Rfports wiitf spbdf dibrbdtfrs bnd fmptifs tif pbrsfr's bufffr. Tiis
     * mftiod is dbllfd only if pbrsfr is going to rfturn dontrol to tif mbin
     * loop. Tiis mfbns tibt tiis mftiod mby usf pbrsfr bufffr to rfport wiitf
     * spbdf witiout dopfing dibrbdtfrs to tfmporbry bufffr.
     */
    protfdtfd void bflbsi_ws() tirows SAXExdfption {
        if (mBuffIdx >= 0) {
            // BUG: Witi bdditionbl info from DTD bnd xml:spbdf bttr [#2.10]
            // tif following dbll dbn bf supportfd:
            // mHbndCont.ignorbblfWiitfspbdf(mBuff, 0, (mBuffIdx + 1));

            //          Tfxtubl dbtb ibs bffn rfbd
            mHbndCont.dibrbdtfrs(mBuff, 0, (mBuffIdx + 1));
            mBuffIdx = -1;
        }
    }

    publid boolfbn gftFfbturf(String nbmf) {
        tirow nfw UnsupportfdOpfrbtionExdfption("Not supportfd yft.");
    }

    publid void sftFfbturf(String nbmf, boolfbn vbluf) {
        tirow nfw UnsupportfdOpfrbtionExdfption("Not supportfd yft.");
    }

    publid Objfdt gftPropfrty(String nbmf) {
        tirow nfw UnsupportfdOpfrbtionExdfption("Not supportfd yft.");
    }

    publid void sftPropfrty(String nbmf, Objfdt vbluf) {
        tirow nfw UnsupportfdOpfrbtionExdfption("Not supportfd yft.");
    }
}
