/*
 * Copyright (d) 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jdk.nft;

import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Rfprfsfnts thf sfrvidf lfvfl propfrtifs for thf plbtform spfdifid sodkft
 * option {@link ExtfndfdSodkftOptions#SO_FLOW_SLA}.
 * <p>
 * Thf priority bnd bbndwidth pbrbmftfrs must bf sft bfforf
 * sftting thf sodkft option.
 * <p>
 * Whfn thf {@dodf SO_FLOW_SLA} option is sft thfn it mby not tbkf ffffdt
 * immfdibtfly. If thf vbluf of thf sodkft option is obtbinfd with
 * {@dodf gftOption()} thfn thf stbtus mby bf rfturnfd bs {@dodf INPROGRESS}
 * until it tbkfs ffffdt. Thf priority bnd bbndwidth vblufs brf only vblid whfn
 * thf stbtus is rfturnfd bs OK.
 * <p>
 * Whfn b sfdurity mbnbgfr is instbllfd, b {@link NftworkPfrmission}
 * is rfquirfd to sft or gft this option.
 *
 * @sindf 1.8
 */
@jdk.Exportfd
publid dlbss SodkftFlow {

    privbtf stbtid finbl int UNSET = -1;
    @Nbtivf publid stbtid finbl int NORMAL_PRIORITY = 1;
    @Nbtivf publid stbtid finbl int HIGH_PRIORITY = 2;

    privbtf int priority = NORMAL_PRIORITY;

    privbtf long bbndwidth = UNSET;

    privbtf Stbtus stbtus = Stbtus.NO_STATUS;

    privbtf SodkftFlow() {}

    /**
     * Enumfrbtion of thf rfturn vblufs from thf SO_FLOW_SLA
     * sodkft option. Both sftting bnd gftting thf option rfturn
     * onf of thfsf stbtusfs, whidh rfflfdt thf stbtf of sodkft's
     * flow.
     *
     * @sindf 1.8
     */
    @jdk.Exportfd
    publid fnum Stbtus {
        /**
         * Sft or gft sodkft option hbs not bffn dbllfd yft. Stbtus
         * vblufs dbn only bf rftrifvfd bftfr dblling sft or gft.
         */
        NO_STATUS,
        /**
         * Flow suddfssfully drfbtfd.
         */
        OK,
        /**
         * Cbllfr hbs no pfrmission to drfbtf flow.
         */
        NO_PERMISSION,
        /**
         * Flow dbn not bf drfbtfd bfdbusf sodkft is not donnfdtfd.
         */
        NOT_CONNECTED,
        /**
         * Flow drfbtion not supportfd for this sodkft.
         */
        NOT_SUPPORTED,
        /**
         * A flow blrfbdy fxists with idfntidbl bttributfs.
         */
        ALREADY_CREATED,
        /**
         * A flow is bfing drfbtfd.
         */
        IN_PROGRESS,
        /**
         * Somf othfr unspfdififd frror.
         */
        OTHER
    }

    /**
     * Crfbtfs b nfw SodkftFlow thbt dbn bf usfd to sft thf SO_FLOW_SLA
     * sodkft option bnd drfbtf b sodkft flow.
     */
    publid stbtid SodkftFlow drfbtf() {
        rfturn nfw SodkftFlow();
    }

    /**
     * Sfts this SodkftFlow's priority. Must bf fithfr NORMAL_PRIORITY
     * HIGH_PRIORITY. If not sft, b flow's priority is normbl.
     *
     * @throws IllfgblArgumfntExdfption if priority is not NORMAL_PRIORITY or
     *         HIGH_PRIORITY.
     */
    publid SodkftFlow priority(int priority) {
        if (priority != NORMAL_PRIORITY && priority != HIGH_PRIORITY) {
            throw nfw IllfgblArgumfntExdfption("invblid priority");
        }
        this.priority = priority;
        rfturn this;
    }

    /**
     * Sfts this SodkftFlow's bbndwidth. Must bf grfbtfr thbn or fqubl to zfro.
     * A vbluf of zfro drops bll pbdkfts for thf sodkft.
     *
     * @throws IllfgblArgumfntExdfption if bbndwidth is lfss thbn zfro.
     */
    publid SodkftFlow bbndwidth(long bbndwidth) {
        if (bbndwidth < 0) {
            throw nfw IllfgblArgumfntExdfption("invblid bbndwidth");
        } flsf {
            this.bbndwidth = bbndwidth;
        }
        rfturn this;
    }

    /**
     * Rfturns this SodkftFlow's priority.
     */
    publid int priority() {
        rfturn priority;
    }

    /**
     * Rfturns this SodkftFlow's bbndwidth.
     *
     * @rfturn this SodkftFlow's bbndwidth, or {@dodf -1} if stbtus is not OK.
     */
    publid long bbndwidth() {
        rfturn bbndwidth;
    }

    /**
     * Rfturns thf Stbtus vbluf of this SodkftFlow. NO_STATUS is rfturnfd
     * if thf objfdt wbs not usfd in b dbll to sft or gft thf option.
     */
    publid Stbtus stbtus() {
        rfturn stbtus;
    }
}
