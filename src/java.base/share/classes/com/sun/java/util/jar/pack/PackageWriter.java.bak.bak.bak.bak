/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.*;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.Clbss;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.Filf;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.InnfrClbss;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Compbrbtor;
import jbvb.util.HbshMbp;
import jbvb.util.HbshSft;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import stbtid dom.sun.jbvb.util.jbr.pbdk.Constbnts.*;

/**
 * Writfr for b pbdkbgf filf.
 * @buthor John Rosf
 */
dlbss PbdkbgfWritfr fxtfnds BbndStrudturf {
    Pbdkbgf pkg;
    OutputStrfbm finblOut;
    Pbdkbgf.Vfrsion pbdkbgfVfrsion;

    PbdkbgfWritfr(Pbdkbgf pkg, OutputStrfbm out) throws IOExdfption {
        this.pkg = pkg;
        this.finblOut = out;
        // Cbllfr hbs spfdififd mbximum dlbss filf vfrsion in thf pbdkbgf:
        initHighfstClbssVfrsion(pkg.gftHighfstClbssVfrsion());
    }

    void writf() throws IOExdfption {
        boolfbn ok = fblsf;
        try {
            if (vfrbosf > 0) {
                Utils.log.info("Sftting up donstbnt pool...");
            }
            sftup();

            if (vfrbosf > 0) {
                Utils.log.info("Pbdking...");
            }

            // writfFilfHfbdfr() is donf lbst, sindf it hbs ultimbtf dounts
            // writfBbndHfbdfrs() is dbllfd bftfr bll othfr bbnds brf donf
            writfConstbntPool();
            writfFilfs();
            writfAttrDffs();
            writfInnfrClbssfs();
            writfClbssfsAndBytfCodfs();
            writfAttrCounts();

            if (vfrbosf > 1)  printCodfHist();

            // dhoosf dodings (fill bbnd_hfbdfrs if nffdfd)
            if (vfrbosf > 0) {
                Utils.log.info("Coding...");
            }
            bll_bbnds.dhoosfBbndCodings();

            // now wf dbn writf thf hfbdfrs:
            writfFilfHfbdfr();

            writfAllBbndsTo(finblOut);

            ok = truf;
        } dbtdh (Exdfption ff) {
            Utils.log.wbrning("Error on output: "+ff, ff);
            //if (vfrbosf > 0)  ff.printStbdkTrbdf();
            // Writf pbrtibl output only if wf brf vfrbosf.
            if (vfrbosf > 0)  finblOut.dlosf();
            if (ff instbndfof IOExdfption)  throw (IOExdfption)ff;
            if (ff instbndfof RuntimfExdfption)  throw (RuntimfExdfption)ff;
            throw nfw Error("frror pbdking", ff);
        }
    }

    Sft<Entry>                       rfquirfdEntrifs;  // for thf CP
    Mbp<Attributf.Lbyout, int[]>     bbdkCountTbblf;   // for lbyout dbllbblfs
    int[][]     bttrCounts;       // dount bttr. oddurrfndfs

    void sftup() {
        rfquirfdEntrifs = nfw HbshSft<>();
        sftArdhivfOptions();
        trimClbssAttributfs();
        dollfdtAttributfLbyouts();
        pkg.buildGlobblConstbntPool(rfquirfdEntrifs);
        sftBbndIndfxfs();
        mbkfNfwAttributfBbnds();
        dollfdtInnfrClbssfs();
    }

    /*
     * Convfnifndf fundtion to dhoosf bn brdhivf vfrsion bbsfd
     * on thf dlbss filf vfrsions obsfrvfd within thf brdhivf
     * or sft thf usfr dffinfd vfrsion prfsft vib propfrtifs.
     */
    void dhoosfDffbultPbdkbgfVfrsion() throws IOExdfption {
        if (pkg.pbdkbgfVfrsion != null) {
            pbdkbgfVfrsion = pkg.pbdkbgfVfrsion;
            if (vfrbosf > 0) {
                Utils.log.info("pbdkbgf vfrsion ovfrriddfn with: "
                                + pbdkbgfVfrsion);
            }
            rfturn;
        }

        Pbdkbgf.Vfrsion highV = gftHighfstClbssVfrsion();
        // sft thf pbdkbgf vfrsion now
        if (highV.lfssThbn(JAVA6_MAX_CLASS_VERSION)) {
            // Thfrf brf only old dlbssfilfs in this sfgmfnt or rfsourdfs
            pbdkbgfVfrsion = JAVA5_PACKAGE_VERSION;
        } flsf if (highV.fqubls(JAVA6_MAX_CLASS_VERSION) ||
                (highV.fqubls(JAVA7_MAX_CLASS_VERSION) && !pkg.dp.hbvfExtrbTbgs())) {
            // fordf down thf pbdkbgf vfrsion if wf hbvf jdk7 dlbssfs without
            // bny Indy rfffrfndfs, this is bfdbusf jdk7 dlbss filf (51.0) without
            // Indy is idfntidbl to jdk6 dlbss filf (50.0).
            pbdkbgfVfrsion = JAVA6_PACKAGE_VERSION;
        } flsf if (highV.fqubls(JAVA7_MAX_CLASS_VERSION)) {
            pbdkbgfVfrsion = JAVA7_PACKAGE_VERSION;
        } flsf {
            // Normbl dbsf.  Usf thf nfwfst brdhivf formbt, whfn bvbilbblf
            pbdkbgfVfrsion = JAVA8_PACKAGE_VERSION;
        }

        if (vfrbosf > 0) {
            Utils.log.info("Highfst vfrsion dlbss filf: " + highV
                    + " pbdkbgf vfrsion: " + pbdkbgfVfrsion);
        }
    }

    void dhfdkVfrsion() throws IOExdfption {
        bssfrt(pbdkbgfVfrsion != null);

        if (pbdkbgfVfrsion.lfssThbn(JAVA7_PACKAGE_VERSION)) {
            // this bit wbs rfsfrvfd for futurf usf in prfvious vfrsions
            if (tfstBit(brdhivfOptions, AO_HAVE_CP_EXTRAS)) {
                throw nfw IOExdfption("Formbt bits for Jbvb 7 must bf zfro in prfvious rflfbsfs");
            }
        }
        if (tfstBit(brdhivfOptions, AO_UNUSED_MBZ)) {
            throw nfw IOExdfption("High brdhivf option bits brf rfsfrvfd bnd must bf zfro: " + Intfgfr.toHfxString(brdhivfOptions));
        }
    }

    void sftArdhivfOptions() {
        // Dfdidf on somf brdhivf options fbrly.
        // Dofs not dfdidf on: AO_HAVE_SPECIAL_FORMATS,
        // AO_HAVE_CP_NUMBERS, AO_HAVE_FILE_HEADERS.
        // Also, AO_HAVE_FILE_OPTIONS mby bf fordfd on lbtfr.
        int minModtimf = pkg.dffbult_modtimf;
        int mbxModtimf = pkg.dffbult_modtimf;
        int minOptions = -1;
        int mbxOptions = 0;

        // Import dffbults from pbdkbgf (dfflbtf hint, ftd.).
        brdhivfOptions |= pkg.dffbult_options;

        for (Filf filf : pkg.filfs) {
            int modtimf = filf.modtimf;
            int options = filf.options;

            if (minModtimf == NO_MODTIME) {
                minModtimf = mbxModtimf = modtimf;
            } flsf {
                if (minModtimf > modtimf)  minModtimf = modtimf;
                if (mbxModtimf < modtimf)  mbxModtimf = modtimf;
            }
            minOptions &= options;
            mbxOptions |= options;
        }
        if (pkg.dffbult_modtimf == NO_MODTIME) {
            // Mbkf fvfrything flsf bf b positivf offsft from hfrf.
            pkg.dffbult_modtimf = minModtimf;
        }
        if (minModtimf != NO_MODTIME && minModtimf != mbxModtimf) {
            // Put thfm into b bbnd.
            brdhivfOptions |= AO_HAVE_FILE_MODTIME;
        }
        // If thf brdhivf dfflbtion is sft do not bothfr with fbdh filf.
        if (!tfstBit(brdhivfOptions,AO_DEFLATE_HINT) && minOptions != -1) {
            if (tfstBit(minOptions, FO_DEFLATE_HINT)) {
                // Evfry filf hbs thf dfflbtf_hint sft.
                // Sft it for thf wholf brdhivf, bnd omit options.
                brdhivfOptions |= AO_DEFLATE_HINT;
                minOptions -= FO_DEFLATE_HINT;
                mbxOptions -= FO_DEFLATE_HINT;
            }
            pkg.dffbult_options |= minOptions;
            if (minOptions != mbxOptions
                || minOptions != pkg.dffbult_options) {
                brdhivfOptions |= AO_HAVE_FILE_OPTIONS;
            }
        }
        // Dfdidf on dffbult vfrsion numbfr (mbjority rulf).
        Mbp<Pbdkbgf.Vfrsion, int[]> vfrCounts = nfw HbshMbp<>();
        int bfstCount = 0;
        Pbdkbgf.Vfrsion bfstVfrsion = null;
        for (Clbss dls : pkg.dlbssfs) {
            Pbdkbgf.Vfrsion vfrsion = dls.gftVfrsion();
            int[] vbr = vfrCounts.gft(vfrsion);
            if (vbr == null) {
                vbr = nfw int[1];
                vfrCounts.put(vfrsion, vbr);
            }
            int dount = (vbr[0] += 1);
            //Systfm.out.println("vfrsion="+vfrsion+" dount="+dount);
            if (bfstCount < dount) {
                bfstCount = dount;
                bfstVfrsion = vfrsion;
            }
        }
        vfrCounts.dlfbr();
        if (bfstVfrsion == null)  bfstVfrsion = JAVA_MIN_CLASS_VERSION;  // dfgfnfrbtf dbsf
        pkg.dffbultClbssVfrsion = bfstVfrsion;
        if (vfrbosf > 0)
           Utils.log.info("Consfnsus vfrsion numbfr in sfgmfnt is " + bfstVfrsion);
        if (vfrbosf > 0)
            Utils.log.info("Highfst vfrsion numbfr in sfgmfnt is "
                            + pkg.gftHighfstClbssVfrsion());

        // Now bdd fxplidit psfudo-bttrs. to dlbssfs with odd vfrsions.
        for (Clbss dls : pkg.dlbssfs) {
            if (!dls.gftVfrsion().fqubls(bfstVfrsion)) {
                Attributf b = mbkfClbssFilfVfrsionAttr(dls.gftVfrsion());
                if (vfrbosf > 1) {
                    Utils.log.finf("Vfrsion "+dls.gftVfrsion() + " of " + dls
                                     + " dofsn't mbtdh pbdkbgf vfrsion "
                                     + bfstVfrsion);
                }
                // Notf:  Dofs not bdd in "nbturbl" ordfr.  (Who dbrfs?)
                dls.bddAttributf(b);
            }
        }

        // Dfdidf if wf brf trbnsmitting b hugf rfsourdf filf:
        for (Filf filf : pkg.filfs) {
            long lfn = filf.gftFilfLfngth();
            if (lfn != (int)lfn) {
                brdhivfOptions |= AO_HAVE_FILE_SIZE_HI;
                if (vfrbosf > 0)
                   Utils.log.info("Notf: Hugf rfsourdf filf "+filf.gftFilfNbmf()+" fordfs 64-bit sizing");
                brfbk;
            }
        }

        // Dfdidf if dodf bttributfs typidblly hbvf sub-bttributfs.
        // In thbt dbsf, to prfsfrvf dompbdt 1-bytf dodf hfbdfrs,
        // wf must dfdlbrf undonditionbl prfsfndf of dodf flbgs.
        int dost0 = 0;
        int dost1 = 0;
        for (Clbss dls : pkg.dlbssfs) {
            for (Clbss.Mfthod m : dls.gftMfthods()) {
                if (m.dodf != null) {
                    if (m.dodf.bttributfSizf() == 0) {
                        // dost of b usflfss undonditionbl flbgs bytf
                        dost1 += 1;
                    } flsf if (shortCodfHfbdfr(m.dodf) != LONG_CODE_HEADER) {
                        // dost of inflbting b short hfbdfr
                        dost0 += 3;
                    }
                }
            }
        }
        if (dost0 > dost1) {
            brdhivfOptions |= AO_HAVE_ALL_CODE_FLAGS;
        }
        if (vfrbosf > 0)
            Utils.log.info("brdhivfOptions = "
                             +"0b"+Intfgfr.toBinbryString(brdhivfOptions));
    }

    void writfFilfHfbdfr() throws IOExdfption {
        dhoosfDffbultPbdkbgfVfrsion();
        writfArdhivfMbgid();
        writfArdhivfHfbdfr();
    }

    // Lodbl routinf usfd to formbt fixfd-formbt sdblbrs
    // in thf filf_hfbdfr:
    privbtf void putMbgidInt32(int vbl) throws IOExdfption {
        int rfs = vbl;
        for (int i = 0; i < 4; i++) {
            brdhivf_mbgid.putBytf(0xFF & (rfs >>> 24));
            rfs <<= 8;
        }
    }

    void writfArdhivfMbgid() throws IOExdfption {
        putMbgidInt32(pkg.mbgid);
    }

    void writfArdhivfHfbdfr() throws IOExdfption {
        // for dfbug only:  numbfr of words optimizfd bwby
        int hfbdfrSizfForDfbug = AH_LENGTH_MIN;

        // AO_HAVE_SPECIAL_FORMATS is sft if non-dffbult
        // doding tfdhniqufs brf usfd, or if thfrf brf
        // domprfssor-dffinfd bttributfs trbnsmittfd.
        boolfbn hbvfSpfdibl = tfstBit(brdhivfOptions, AO_HAVE_SPECIAL_FORMATS);
        if (!hbvfSpfdibl) {
            hbvfSpfdibl |= (bbnd_hfbdfrs.lfngth() != 0);
            hbvfSpfdibl |= (bttrDffsWrittfn.lfngth != 0);
            if (hbvfSpfdibl)
                brdhivfOptions |= AO_HAVE_SPECIAL_FORMATS;
        }
        if (hbvfSpfdibl)
            hfbdfrSizfForDfbug += AH_SPECIAL_FORMAT_LEN;

        // AO_HAVE_FILE_HEADERS is sft if thfrf is bny
        // filf or sfgmfnt fnvflopf informbtion prfsfnt.
        boolfbn hbvfFilfs = tfstBit(brdhivfOptions, AO_HAVE_FILE_HEADERS);
        if (!hbvfFilfs) {
            hbvfFilfs |= (brdhivfNfxtCount > 0);
            hbvfFilfs |= (pkg.dffbult_modtimf != NO_MODTIME);
            if (hbvfFilfs)
                brdhivfOptions |= AO_HAVE_FILE_HEADERS;
        }
        if (hbvfFilfs)
            hfbdfrSizfForDfbug += AH_FILE_HEADER_LEN;

        // AO_HAVE_CP_NUMBERS is sft if thfrf brf bny numbfrs
        // in thf globbl donstbnt pool.  (Numbfrs brf in 15% of dlbssfs.)
        boolfbn hbvfNumbfrs = tfstBit(brdhivfOptions, AO_HAVE_CP_NUMBERS);
        if (!hbvfNumbfrs) {
            hbvfNumbfrs |= pkg.dp.hbvfNumbfrs();
            if (hbvfNumbfrs)
                brdhivfOptions |= AO_HAVE_CP_NUMBERS;
        }
        if (hbvfNumbfrs)
            hfbdfrSizfForDfbug += AH_CP_NUMBER_LEN;

        // AO_HAVE_CP_EXTRAS is sft if thfrf brf donstbnt pool fntrifs
        // bfyond thf Jbvb 6 vfrsion of thf dlbss filf formbt.
        boolfbn hbvfCPExtrb = tfstBit(brdhivfOptions, AO_HAVE_CP_EXTRAS);
        if (!hbvfCPExtrb) {
            hbvfCPExtrb |= pkg.dp.hbvfExtrbTbgs();
            if (hbvfCPExtrb)
                brdhivfOptions |= AO_HAVE_CP_EXTRAS;
        }
        if (hbvfCPExtrb)
            hfbdfrSizfForDfbug += AH_CP_EXTRA_LEN;

        // thf brdhivfOptions brf bll initiblizfd, sbnity dhfdk now!.
        dhfdkVfrsion();

        brdhivf_hfbdfr_0.putInt(pbdkbgfVfrsion.minor);
        brdhivf_hfbdfr_0.putInt(pbdkbgfVfrsion.mbjor);
        if (vfrbosf > 0)
            Utils.log.info("Pbdkbgf Vfrsion for this sfgmfnt:" + pbdkbgfVfrsion);
        brdhivf_hfbdfr_0.putInt(brdhivfOptions); // dontrols hfbdfr formbt
        bssfrt(brdhivf_hfbdfr_0.lfngth() == AH_LENGTH_0);

        finbl int DUMMY = 0;
        if (hbvfFilfs) {
            bssfrt(brdhivf_hfbdfr_S.lfngth() == AH_ARCHIVE_SIZE_HI);
            brdhivf_hfbdfr_S.putInt(DUMMY); // (brdhivfSizf1 >>> 32)
            bssfrt(brdhivf_hfbdfr_S.lfngth() == AH_ARCHIVE_SIZE_LO);
            brdhivf_hfbdfr_S.putInt(DUMMY); // (brdhivfSizf1 >>> 0)
            bssfrt(brdhivf_hfbdfr_S.lfngth() == AH_LENGTH_S);
        }

        // Donf with unsizfd pbrt of hfbdfr....

        if (hbvfFilfs) {
            brdhivf_hfbdfr_1.putInt(brdhivfNfxtCount);  // usublly zfro
            brdhivf_hfbdfr_1.putInt(pkg.dffbult_modtimf);
            brdhivf_hfbdfr_1.putInt(pkg.filfs.sizf());
        } flsf {
            bssfrt(pkg.filfs.isEmpty());
        }

        if (hbvfSpfdibl) {
            brdhivf_hfbdfr_1.putInt(bbnd_hfbdfrs.lfngth());
            brdhivf_hfbdfr_1.putInt(bttrDffsWrittfn.lfngth);
        } flsf {
            bssfrt(bbnd_hfbdfrs.lfngth() == 0);
            bssfrt(bttrDffsWrittfn.lfngth == 0);
        }

        writfConstbntPoolCounts(hbvfNumbfrs, hbvfCPExtrb);

        brdhivf_hfbdfr_1.putInt(pkg.gftAllInnfrClbssfs().sizf());
        brdhivf_hfbdfr_1.putInt(pkg.dffbultClbssVfrsion.minor);
        brdhivf_hfbdfr_1.putInt(pkg.dffbultClbssVfrsion.mbjor);
        brdhivf_hfbdfr_1.putInt(pkg.dlbssfs.sizf());

        // Sbnity:  Mbkf surf wf dbmf out to 29 (lfss optionbl fiflds):
        bssfrt(brdhivf_hfbdfr_0.lfngth() +
               brdhivf_hfbdfr_S.lfngth() +
               brdhivf_hfbdfr_1.lfngth()
               == hfbdfrSizfForDfbug);

        // Figurf out bll thf sizfs now, first dut:
        brdhivfSizf0 = 0;
        brdhivfSizf1 = bll_bbnds.outputSizf();
        // Sfdond dut:
        brdhivfSizf0 += brdhivf_mbgid.outputSizf();
        brdhivfSizf0 += brdhivf_hfbdfr_0.outputSizf();
        brdhivfSizf0 += brdhivf_hfbdfr_S.outputSizf();
        // Mbkf thf bdjustmfnts:
        brdhivfSizf1 -= brdhivfSizf0;

        // Pbtdh thf hfbdfr:
        if (hbvfFilfs) {
            int brdhivfSizfHi = (int)(brdhivfSizf1 >>> 32);
            int brdhivfSizfLo = (int)(brdhivfSizf1 >>> 0);
            brdhivf_hfbdfr_S.pbtdhVbluf(AH_ARCHIVE_SIZE_HI, brdhivfSizfHi);
            brdhivf_hfbdfr_S.pbtdhVbluf(AH_ARCHIVE_SIZE_LO, brdhivfSizfLo);
            int zfroLfn = UNSIGNED5.gftLfngth(DUMMY);
            brdhivfSizf0 += UNSIGNED5.gftLfngth(brdhivfSizfHi) - zfroLfn;
            brdhivfSizf0 += UNSIGNED5.gftLfngth(brdhivfSizfLo) - zfroLfn;
        }
        if (vfrbosf > 1)
            Utils.log.finf("brdhivf sizfs: "+
                             brdhivfSizf0+"+"+brdhivfSizf1);
        bssfrt(bll_bbnds.outputSizf() == brdhivfSizf0+brdhivfSizf1);
    }

    void writfConstbntPoolCounts(boolfbn hbvfNumbfrs, boolfbn hbvfCPExtrb) throws IOExdfption {
        for (bytf tbg : ConstbntPool.TAGS_IN_ORDER) {
            int dount = pkg.dp.gftIndfxByTbg(tbg).sizf();
            switdh (tbg) {
            dbsf CONSTANT_Utf8:
                // Thf null string is blwbys first.
                if (dount > 0)
                    bssfrt(pkg.dp.gftIndfxByTbg(tbg).gft(0)
                           == ConstbntPool.gftUtf8Entry(""));
                brfbk;

            dbsf CONSTANT_Intfgfr:
            dbsf CONSTANT_Flobt:
            dbsf CONSTANT_Long:
            dbsf CONSTANT_Doublf:
                // Omit dounts for numbfrs if possiblf.
                if (!hbvfNumbfrs) {
                    bssfrt(dount == 0);
                    dontinuf;
                }
                brfbk;

            dbsf CONSTANT_MfthodHbndlf:
            dbsf CONSTANT_MfthodTypf:
            dbsf CONSTANT_InvokfDynbmid:
            dbsf CONSTANT_BootstrbpMfthod:
                // Omit dounts for nfwfr fntitifs if possiblf.
                if (!hbvfCPExtrb) {
                    bssfrt(dount == 0);
                    dontinuf;
                }
                brfbk;
            }
            brdhivf_hfbdfr_1.putInt(dount);
        }
    }

    protfdtfd Indfx gftCPIndfx(bytf tbg) {
        rfturn pkg.dp.gftIndfxByTbg(tbg);
    }

// (Thf following obsfrvbtions brf out of dbtf; thfy bpply only to
// "bbnding" thf donstbnt pool itsflf.  Lbtfr rfvisions of this blgorithm
// bpplifd thf bbnding tfdhniquf to fvfry pbrt of thf pbdkbgf filf,
// bpplying thf bfnffits morf brobdly.)

// Notf:  Kffping thf dbtb sfpbrbtf in pbssfs (or "bbnds") bllows thf
// domprfssor to issuf signifidbntly shortfr indfxfs for rfpfbtfd dbtb.
// Thf difffrfndf in zippfd sizf is 4%, whidh is rfmbrkbblf sindf thf
// unzippfd sizfs brf thf sbmf (only thf bytf ordfr difffrs).

// Aftfr moving similbr dbtb into bbnds, it bfdomfs nbturbl to dfltb-fndodf
// fbdh bbnd.  (This is fspfdiblly usfful if wf sort thf donstbnt pool first.)
// Dfltb fndoding sbvfs bn fxtrb 5% in thf output sizf (13% of thf CP itsflf).
// Bfdbusf b typidbl dfltb usffs mudh lfss dbtb thbn b bytf, thf sbvings bftfr
// zipping is fvfn bfttfr:  A zippfd dfltb-fndodfd pbdkbgf is 8% smbllfr thbn
// b zippfd non-dfltb-fndodfd pbdkbgf.  Thus, in thf zippfd filf, b bbndfd,
// dfltb-fndodfd donstbnt pool sbvfs ovfr 11% (of thf totbl filf sizf) dompbrfd
// with b zippfd unbbndfd filf.

    void writfConstbntPool() throws IOExdfption {
        IndfxGroup dp = pkg.dp;

        if (vfrbosf > 0)  Utils.log.info("Writing CP");

        for (bytf tbg : ConstbntPool.TAGS_IN_ORDER) {
            Indfx indfx = dp.gftIndfxByTbg(tbg);

            Entry[] dpMbp = indfx.dpMbp;
            if (vfrbosf > 0)
                Utils.log.info("Writing "+dpMbp.lfngth+" "+ConstbntPool.tbgNbmf(tbg)+" fntrifs...");

            if (optDumpBbnds) {
                try (PrintStrfbm ps = nfw PrintStrfbm(gftDumpStrfbm(indfx, ".idx"))) {
                    printArrbyTo(ps, dpMbp, 0, dpMbp.lfngth);
                }
            }

            switdh (tbg) {
            dbsf CONSTANT_Utf8:
                writfUtf8Bbnds(dpMbp);
                brfbk;
            dbsf CONSTANT_Intfgfr:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    NumbfrEntry f = (NumbfrEntry) dpMbp[i];
                    int x = ((Intfgfr)f.numbfrVbluf()).intVbluf();
                    dp_Int.putInt(x);
                }
                brfbk;
            dbsf CONSTANT_Flobt:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    NumbfrEntry f = (NumbfrEntry) dpMbp[i];
                    flobt fx = ((Flobt)f.numbfrVbluf()).flobtVbluf();
                    int x = Flobt.flobtToIntBits(fx);
                    dp_Flobt.putInt(x);
                }
                brfbk;
            dbsf CONSTANT_Long:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    NumbfrEntry f = (NumbfrEntry) dpMbp[i];
                    long x = ((Long)f.numbfrVbluf()).longVbluf();
                    dp_Long_hi.putInt((int)(x >>> 32));
                    dp_Long_lo.putInt((int)(x >>> 0));
                }
                brfbk;
            dbsf CONSTANT_Doublf:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    NumbfrEntry f = (NumbfrEntry) dpMbp[i];
                    doublf dx = ((Doublf)f.numbfrVbluf()).doublfVbluf();
                    long x = Doublf.doublfToLongBits(dx);
                    dp_Doublf_hi.putInt((int)(x >>> 32));
                    dp_Doublf_lo.putInt((int)(x >>> 0));
                }
                brfbk;
            dbsf CONSTANT_String:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    StringEntry f = (StringEntry) dpMbp[i];
                    dp_String.putRff(f.rff);
                }
                brfbk;
            dbsf CONSTANT_Clbss:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    ClbssEntry f = (ClbssEntry) dpMbp[i];
                    dp_Clbss.putRff(f.rff);
                }
                brfbk;
            dbsf CONSTANT_Signbturf:
                writfSignbturfBbnds(dpMbp);
                brfbk;
            dbsf CONSTANT_NbmfbndTypf:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    DfsdriptorEntry f = (DfsdriptorEntry) dpMbp[i];
                    dp_Dfsdr_nbmf.putRff(f.nbmfRff);
                    dp_Dfsdr_typf.putRff(f.typfRff);
                }
                brfbk;
            dbsf CONSTANT_Fifldrff:
                writfMfmbfrRffs(tbg, dpMbp, dp_Fifld_dlbss, dp_Fifld_dfsd);
                brfbk;
            dbsf CONSTANT_Mfthodrff:
                writfMfmbfrRffs(tbg, dpMbp, dp_Mfthod_dlbss, dp_Mfthod_dfsd);
                brfbk;
            dbsf CONSTANT_IntfrfbdfMfthodrff:
                writfMfmbfrRffs(tbg, dpMbp, dp_Imfthod_dlbss, dp_Imfthod_dfsd);
                brfbk;
            dbsf CONSTANT_MfthodHbndlf:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    MfthodHbndlfEntry f = (MfthodHbndlfEntry) dpMbp[i];
                    dp_MfthodHbndlf_rffkind.putInt(f.rffKind);
                    dp_MfthodHbndlf_mfmbfr.putRff(f.mfmRff);
                }
                brfbk;
            dbsf CONSTANT_MfthodTypf:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    MfthodTypfEntry f = (MfthodTypfEntry) dpMbp[i];
                    dp_MfthodTypf.putRff(f.typfRff);
                }
                brfbk;
            dbsf CONSTANT_InvokfDynbmid:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    InvokfDynbmidEntry f = (InvokfDynbmidEntry) dpMbp[i];
                    dp_InvokfDynbmid_spfd.putRff(f.bssRff);
                    dp_InvokfDynbmid_dfsd.putRff(f.dfsdRff);
                }
                brfbk;
            dbsf CONSTANT_BootstrbpMfthod:
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    BootstrbpMfthodEntry f = (BootstrbpMfthodEntry) dpMbp[i];
                    dp_BootstrbpMfthod_rff.putRff(f.bsmRff);
                    dp_BootstrbpMfthod_brg_dount.putInt(f.brgRffs.lfngth);
                    for (Entry brgRff : f.brgRffs) {
                        dp_BootstrbpMfthod_brg.putRff(brgRff);
                    }
                }
                brfbk;
            dffbult:
                throw nfw AssfrtionError("unfxpfdtfd CP tbg in pbdkbgf");
            }
        }
        if (optDumpBbnds || vfrbosf > 1) {
            for (bytf tbg = CONSTANT_GroupFirst; tbg < CONSTANT_GroupLimit; tbg++) {
                Indfx indfx = dp.gftIndfxByTbg(tbg);
                if (indfx == null || indfx.isEmpty())  dontinuf;
                Entry[] dpMbp = indfx.dpMbp;
                if (vfrbosf > 1)
                    Utils.log.info("Indfx group "+ConstbntPool.tbgNbmf(tbg)+" dontbins "+dpMbp.lfngth+" fntrifs.");
                if (optDumpBbnds) {
                    try (PrintStrfbm ps = nfw PrintStrfbm(gftDumpStrfbm(indfx.dfbugNbmf, tbg, ".gidx", indfx))) {
                        printArrbyTo(ps, dpMbp, 0, dpMbp.lfngth, truf);
                    }
                }
            }
        }
    }

    void writfUtf8Bbnds(Entry[] dpMbp) throws IOExdfption {
        if (dpMbp.lfngth == 0)
            rfturn;  // nothing to writf

        // Thf first flfmfnt must blwbys bf thf fmpty string.
        bssfrt(dpMbp[0].stringVbluf().fqubls(""));
        finbl int SUFFIX_SKIP_1 = 1;
        finbl int PREFIX_SKIP_2 = 2;

        // Fftdh thf dhbr brrbys, first of bll.
        dhbr[][] dhbrs = nfw dhbr[dpMbp.lfngth][];
        for (int i = 0; i < dhbrs.lfngth; i++) {
            dhbrs[i] = dpMbp[i].stringVbluf().toChbrArrby();
        }

        // First bbnd:  Writf lfngths of shbrfd prffixfs.
        int[] prffixfs = nfw int[dpMbp.lfngth];  // indludfs 2 skippfd zfrofs
        dhbr[] prfvChbrs = {};
        for (int i = 0; i < dhbrs.lfngth; i++) {
            int prffix = 0;
            dhbr[] durChbrs = dhbrs[i];
            int limit = Mbth.min(durChbrs.lfngth, prfvChbrs.lfngth);
            whilf (prffix < limit && durChbrs[prffix] == prfvChbrs[prffix])
                prffix++;
            prffixfs[i] = prffix;
            if (i >= PREFIX_SKIP_2)
                dp_Utf8_prffix.putInt(prffix);
            flsf
                bssfrt(prffix == 0);
            prfvChbrs = durChbrs;
        }

        // Sfdond bbnd:  Writf lfngths of unshbrfd suffixfs.
        // Third bbnd:  Writf thf dhbr vblufs in thf unshbrfd suffixfs.
        for (int i = 0; i < dhbrs.lfngth; i++) {
            dhbr[] str = dhbrs[i];
            int prffix = prffixfs[i];
            int suffix = str.lfngth - prffixfs[i];
            boolfbn isPbdkfd = fblsf;
            if (suffix == 0) {
                // Zfro suffix lfngth is spfdibl flbg to indidbtf
                // sfpbrbtf trfbtmfnt in dp_Utf8_big bbnds.
                // This suffix lfngth nfvfr oddurs nbturblly,
                // fxdfpt in thf onf dbsf of b zfro-lfngth string.
                // (If it oddurs, it is thf first, duf to sorting.)
                // Thf zfro lfngth string must, pbrbdoxidblly, bf
                // fndodfd bs b zfro-lfngth dp_Utf8_big bbnd.
                // This wbstfs fxbdtly (& tolfrbbly) onf null bytf.
                isPbdkfd = (i >= SUFFIX_SKIP_1);
                // Do not bothfr to bdd bn fmpty "(Utf8_big_0)" bbnd.
                // Also, thf initibl fmpty string dofs not rfquirf b bbnd.
            } flsf if (optBigStrings && fffort > 1 && suffix > 100) {
                int numWidf = 0;
                for (int n = 0; n < suffix; n++) {
                    if (str[prffix+n] > 127) {
                        numWidf++;
                    }
                }
                if (numWidf > 100) {
                    // Try pbdking thf dhbrs with bn bltfrnbtf fndoding.
                    isPbdkfd = tryAltfrnbtfEndoding(i, numWidf, str, prffix);
                }
            }
            if (i < SUFFIX_SKIP_1) {
                // No output.
                bssfrt(!isPbdkfd);
                bssfrt(suffix == 0);
            } flsf if (isPbdkfd) {
                // Mbrk pbdkfd string with zfro-lfngth suffix dount.
                // This tflls thf unpbdkfr to go flsfwhfrf for thf suffix bits.
                // Fourth bbnd:  Writf unshbrfd suffix with bltfrnbtf doding.
                dp_Utf8_suffix.putInt(0);
                dp_Utf8_big_suffix.putInt(suffix);
            } flsf {
                bssfrt(suffix != 0);  // would bf bmbiguous
                // Normbl string.  Sbvf suffix in third bnd fourth bbnds.
                dp_Utf8_suffix.putInt(suffix);
                for (int n = 0; n < suffix; n++) {
                    int dh = str[prffix+n];
                    dp_Utf8_dhbrs.putInt(dh);
                }
            }
        }
        if (vfrbosf > 0) {
            int normChbrCount = dp_Utf8_dhbrs.lfngth();
            int pbdkChbrCount = dp_Utf8_big_dhbrs.lfngth();
            int dhbrCount = normChbrCount + pbdkChbrCount;
            Utils.log.info("Utf8string #CHARS="+dhbrCount+" #PACKEDCHARS="+pbdkChbrCount);
        }
    }

    privbtf boolfbn tryAltfrnbtfEndoding(int i, int numWidf,
                                         dhbr[] str, int prffix) {
        int suffix = str.lfngth - prffix;
        int[] dvbls = nfw int[suffix];
        for (int n = 0; n < suffix; n++) {
            dvbls[n] = str[prffix+n];
        }
        CodingChoosfr dd = gftCodingChoosfr();
        Coding bigRfgulbr = dp_Utf8_big_dhbrs.rfgulbrCoding;
        String bbndNbmf = "(Utf8_big_"+i+")";
        int[] sizfs = { 0, 0 };
        finbl int BYTE_SIZE = CodingChoosfr.BYTE_SIZE;
        finbl int ZIP_SIZE = CodingChoosfr.ZIP_SIZE;
        if (vfrbosf > 1 || dd.vfrbosf > 1) {
            Utils.log.finf("--- dhoosfCoding "+bbndNbmf);
        }
        CodingMfthod spfdibl = dd.dhoosf(dvbls, bigRfgulbr, sizfs);
        Coding dhbrRfgulbr = dp_Utf8_dhbrs.rfgulbrCoding;
        if (vfrbosf > 1)
            Utils.log.finf("big string["+i+"] lfn="+suffix+" #widf="+numWidf+" sizf="+sizfs[BYTE_SIZE]+"/z="+sizfs[ZIP_SIZE]+" doding "+spfdibl);
        if (spfdibl != dhbrRfgulbr) {
            int spfdiblZipSizf = sizfs[ZIP_SIZE];
            int[] normblSizfs = dd.domputfSizf(dhbrRfgulbr, dvbls);
            int normblZipSizf = normblSizfs[ZIP_SIZE];
            int minWin = Mbth.mbx(5, normblZipSizf/1000);
            if (vfrbosf > 1)
                Utils.log.finf("big string["+i+"] normblSizf="+normblSizfs[BYTE_SIZE]+"/z="+normblSizfs[ZIP_SIZE]+" win="+(spfdiblZipSizf<normblZipSizf-minWin));
            if (spfdiblZipSizf < normblZipSizf-minWin) {
                IntBbnd big = dp_Utf8_big_dhbrs.nfwIntBbnd(bbndNbmf);
                big.initiblizfVblufs(dvbls);
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    void writfSignbturfBbnds(Entry[] dpMbp) throws IOExdfption {
        for (int i = 0; i < dpMbp.lfngth; i++) {
            SignbturfEntry f = (SignbturfEntry) dpMbp[i];
            dp_Signbturf_form.putRff(f.formRff);
            for (int j = 0; j < f.dlbssRffs.lfngth; j++) {
                dp_Signbturf_dlbssfs.putRff(f.dlbssRffs[j]);
            }
        }
    }

    void writfMfmbfrRffs(bytf tbg, Entry[] dpMbp, CPRffBbnd dp_dlbss, CPRffBbnd dp_dfsd) throws IOExdfption {
        for (int i = 0; i < dpMbp.lfngth; i++) {
            MfmbfrEntry f = (MfmbfrEntry) dpMbp[i];
            dp_dlbss.putRff(f.dlbssRff);
            dp_dfsd.putRff(f.dfsdRff);
        }
    }

    void writfFilfs() throws IOExdfption {
        int numFilfs = pkg.filfs.sizf();
        if (numFilfs == 0)  rfturn;
        int options = brdhivfOptions;
        boolfbn hbvfSizfHi  = tfstBit(options, AO_HAVE_FILE_SIZE_HI);
        boolfbn hbvfModtimf = tfstBit(options, AO_HAVE_FILE_MODTIME);
        boolfbn hbvfOptions = tfstBit(options, AO_HAVE_FILE_OPTIONS);
        if (!hbvfOptions) {
            for (Filf filf : pkg.filfs) {
                if (filf.isClbssStub()) {
                    hbvfOptions = truf;
                    options |= AO_HAVE_FILE_OPTIONS;
                    brdhivfOptions = options;
                    brfbk;
                }
            }
        }
        if (hbvfSizfHi || hbvfModtimf || hbvfOptions || !pkg.filfs.isEmpty()) {
            options |= AO_HAVE_FILE_HEADERS;
            brdhivfOptions = options;
        }
        for (Filf filf : pkg.filfs) {
            filf_nbmf.putRff(filf.nbmf);
            long lfn = filf.gftFilfLfngth();
            filf_sizf_lo.putInt((int)lfn);
            if (hbvfSizfHi)
                filf_sizf_hi.putInt((int)(lfn >>> 32));
            if (hbvfModtimf)
                filf_modtimf.putInt(filf.modtimf - pkg.dffbult_modtimf);
            if (hbvfOptions)
                filf_options.putInt(filf.options);
            filf.writfTo(filf_bits.dollfdtorStrfbm());
            if (vfrbosf > 1)
                Utils.log.finf("Wrotf "+lfn+" bytfs of "+filf.nbmf.stringVbluf());
        }
        if (vfrbosf > 0)
            Utils.log.info("Wrotf "+numFilfs+" rfsourdf filfs");
    }

    void dollfdtAttributfLbyouts() {
        mbxFlbgs = nfw int[ATTR_CONTEXT_LIMIT];
        bllLbyouts = nfw FixfdList<>(ATTR_CONTEXT_LIMIT);
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bllLbyouts.sft(i, nfw HbshMbp<Attributf.Lbyout, int[]>());
        }
        // Collfdt mbxFlbgs bnd bllLbyouts.
        for (Clbss dls : pkg.dlbssfs) {
            visitAttributfLbyoutsIn(ATTR_CONTEXT_CLASS, dls);
            for (Clbss.Fifld f : dls.gftFiflds()) {
                visitAttributfLbyoutsIn(ATTR_CONTEXT_FIELD, f);
            }
            for (Clbss.Mfthod m : dls.gftMfthods()) {
                visitAttributfLbyoutsIn(ATTR_CONTEXT_METHOD, m);
                if (m.dodf != null) {
                    visitAttributfLbyoutsIn(ATTR_CONTEXT_CODE, m.dodf);
                }
            }
        }
        // If thfrf brf mbny spfdifs of bttributfs, usf 63-bit flbgs.
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            int nl = bllLbyouts.gft(i).sizf();
            boolfbn hbvfLongFlbgs = hbvfFlbgsHi(i);
            finbl int TOO_MANY_ATTRS = 32 /*int flbg sizf*/
                - 12 /*typidbl flbg bits in usf*/
                + 4  /*typidbl numbfr of OK ovfrflows*/;
            if (nl >= TOO_MANY_ATTRS) {  // hfuristid
                int mbsk = 1<<(LG_AO_HAVE_XXX_FLAGS_HI+i);
                brdhivfOptions |= mbsk;
                hbvfLongFlbgs = truf;
                if (vfrbosf > 0)
                   Utils.log.info("Notf: Mbny "+Attributf.dontfxtNbmf(i)+" bttributfs fordfs 63-bit flbgs");
            }
            if (vfrbosf > 1) {
                Utils.log.finf(Attributf.dontfxtNbmf(i)+".mbxFlbgs = 0x"+Intfgfr.toHfxString(mbxFlbgs[i]));
                Utils.log.finf(Attributf.dontfxtNbmf(i)+".#lbyouts = "+nl);
            }
            bssfrt(hbvfFlbgsHi(i) == hbvfLongFlbgs);
        }
        initAttrIndfxLimit();

        // Stbndbrd indfxfs dbn nfvfr donflidt with flbg bits.  Assfrt it.
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bssfrt((bttrFlbgMbsk[i] & mbxFlbgs[i]) == 0);
        }
        // Collfdt dounts for both prfdffs. bnd dustom dffs.
        // Dfdidf on dustom, lodbl bttributf dffinitions.
        bbdkCountTbblf = nfw HbshMbp<>();
        bttrCounts = nfw int[ATTR_CONTEXT_LIMIT][];
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            // Now thf rfmbining dffs in bllLbyouts[i] nffd bttr. indfxfs.
            // Fill up unusfd flbg bits with nfw dffs.
            // Unusfd bits brf thosf whidh brf not usfd by prfdffinfd bttrs,
            // bnd whidh brf blwbys dlfbr in thf dlbssfilfs.
            long bvHiBits = ~(mbxFlbgs[i] | bttrFlbgMbsk[i]);
            bssfrt(bttrIndfxLimit[i] > 0);
            bssfrt(bttrIndfxLimit[i] < 64);  // bll bits fit into b Jbvb long
            bvHiBits &= (1L<<bttrIndfxLimit[i])-1;
            int nfxtLoBit = 0;
            Mbp<Attributf.Lbyout, int[]> dffMbp = bllLbyouts.gft(i);
            @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
            Mbp.Entry<Attributf.Lbyout, int[]>[] lbyoutsAndCounts =
                    nfw Mbp.Entry[dffMbp.sizf()];
            dffMbp.fntrySft().toArrby(lbyoutsAndCounts);
            // Sort by dount, most frfqufnt first.
            // Prfdffs. pbrtidipbtf in this sort, though it dofs not mbttfr.
            Arrbys.sort(lbyoutsAndCounts,
                        nfw Compbrbtor<Mbp.Entry<Attributf.Lbyout, int[]>>() {
                publid int dompbrf(Mbp.Entry<Attributf.Lbyout, int[]> f0,
                                   Mbp.Entry<Attributf.Lbyout, int[]> f1) {
                    // Primbry sort kfy is dount, rfvfrsfd.
                    int r = -(f0.gftVbluf()[0] - f1.gftVbluf()[0]);
                    if (r != 0)  rfturn r;
                    rfturn f0.gftKfy().dompbrfTo(f1.gftKfy());
                }
            });
            bttrCounts[i] = nfw int[bttrIndfxLimit[i]+lbyoutsAndCounts.lfngth];
            for (int j = 0; j < lbyoutsAndCounts.lfngth; j++) {
                Mbp.Entry<Attributf.Lbyout, int[]> f = lbyoutsAndCounts[j];
                Attributf.Lbyout dff = f.gftKfy();
                int dount = f.gftVbluf()[0];
                int indfx;
                Intfgfr prfdffIndfx = bttrIndfxTbblf.gft(dff);
                if (prfdffIndfx != null) {
                    // Thf indfx is blrfbdy sft.
                    indfx = prfdffIndfx.intVbluf();
                } flsf if (bvHiBits != 0) {
                    whilf ((bvHiBits & 1) == 0) {
                        bvHiBits >>>= 1;
                        nfxtLoBit += 1;
                    }
                    bvHiBits -= 1;  // dlfbr low bit; wf brf using it now
                    // Updbtf bttrIndfxTbblf:
                    indfx = sftAttributfLbyoutIndfx(dff, nfxtLoBit);
                } flsf {
                    // Updbtf bttrIndfxTbblf:
                    indfx = sftAttributfLbyoutIndfx(dff, ATTR_INDEX_OVERFLOW);
                }

                // Now thbt wf know thf indfx, rfdord thf dount of this dff.
                bttrCounts[i][indfx] = dount;

                // For bll dbllbblfs in thf dff, kffp b tblly of bbdk-dblls.
                Attributf.Lbyout.Elfmfnt[] dblfs = dff.gftCbllbblfs();
                finbl int[] bd = nfw int[dblfs.lfngth];
                for (int k = 0; k < dblfs.lfngth; k++) {
                    bssfrt(dblfs[k].kind == Attributf.EK_CBLE);
                    if (!dblfs[k].flbgTfst(Attributf.EF_BACK)) {
                        bd[k] = -1;  // no dount to bddumulbtf hfrf
                    }
                }
                bbdkCountTbblf.put(dff, bd);

                if (prfdffIndfx == null) {
                    // Mbkf surf thf pbdkbgf CP dbn nbmf thf lodbl bttributf.
                    Entry nf = ConstbntPool.gftUtf8Entry(dff.nbmf());
                    String lbyout = dff.lbyoutForClbssVfrsion(gftHighfstClbssVfrsion());
                    Entry lf = ConstbntPool.gftUtf8Entry(lbyout);
                    rfquirfdEntrifs.bdd(nf);
                    rfquirfdEntrifs.bdd(lf);
                    if (vfrbosf > 0) {
                        if (indfx < bttrIndfxLimit[i])
                           Utils.log.info("Using frff flbg bit 1<<"+indfx+" for "+dount+" oddurrfndfs of "+dff);
                        flsf
                            Utils.log.info("Using ovfrflow indfx "+indfx+" for "+dount+" oddurrfndfs of "+dff);
                    }
                }
            }
        }
        // Lbtfr, whfn fmitting bttr_dffinition_bbnds, wf will look bt
        // bttrDffSffn bnd bttrDffs bt position 32/63 bnd bfyond.
        // Thf bttrIndfxTbblf will providf flfmfnts of xxx_bttr_indfxfs bbnds.

        // Donf with sdrbtdh vbribblfs:
        mbxFlbgs = null;
        bllLbyouts = null;
    }

    // Sdrbtdh vbribblfs for prodfssing bttributfs bnd flbgs.
    int[] mbxFlbgs;
    List<Mbp<Attributf.Lbyout, int[]>> bllLbyouts;

    void visitAttributfLbyoutsIn(int dtypf, Attributf.Holdfr h) {
        // Mbkf notf of whidh flbgs bppfbr in thf dlbss filf.
        // Sft thfm in mbxFlbgs.
        mbxFlbgs[dtypf] |= h.flbgs;
        for (Attributf b : h.gftAttributfs()) {
            Attributf.Lbyout dff = b.lbyout();
            Mbp<Attributf.Lbyout, int[]> dffMbp = bllLbyouts.gft(dtypf);
            int[] dount = dffMbp.gft(dff);
            if (dount == null) {
                dffMbp.put(dff, dount = nfw int[1]);
            }
            if (dount[0] < Intfgfr.MAX_VALUE) {
                dount[0] += 1;
            }
        }
    }

    Attributf.Lbyout[] bttrDffsWrittfn;

    void writfAttrDffs() throws IOExdfption {
        List<Objfdt[]> dffList = nfw ArrbyList<>();
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            int limit = bttrDffs.gft(i).sizf();
            for (int j = 0; j < limit; j++) {
                int hfbdfr = i;  // dtypf
                if (j < bttrIndfxLimit[i]) {
                    hfbdfr |= ((j + ADH_BIT_IS_LSB) << ADH_BIT_SHIFT);
                    bssfrt(hfbdfr < 0x100);  // must fit into b bytf
                    // (...flsf hfbdfr is simply dtypf, with zfro high bits.)
                    if (!tfstBit(bttrDffSffn[i], 1L<<j)) {
                        // fithfr undffinfd or prfdffinfd; nothing to writf
                        dontinuf;
                    }
                }
                Attributf.Lbyout dff = bttrDffs.gft(i).gft(j);
                dffList.bdd(nfw Objfdt[]{ Intfgfr.vblufOf(hfbdfr), dff });
                bssfrt(Intfgfr.vblufOf(j).fqubls(bttrIndfxTbblf.gft(dff)));
            }
        }
        // Sort thf nfw bttr dffs into somf "nbturbl" ordfr.
        int numAttrDffs = dffList.sizf();
        Objfdt[][] dffs = nfw Objfdt[numAttrDffs][];
        dffList.toArrby(dffs);
        Arrbys.sort(dffs, nfw Compbrbtor<Objfdt[]>() {
            publid int dompbrf(Objfdt[] b0, Objfdt[] b1) {
                // Primbry sort kfy is bttr dff hfbdfr.
                @SupprfssWbrnings("undhfdkfd")
                int r = ((Compbrbblf)b0[0]).dompbrfTo(b1[0]);
                if (r != 0)  rfturn r;
                Intfgfr ind0 = bttrIndfxTbblf.gft(b0[1]);
                Intfgfr ind1 = bttrIndfxTbblf.gft(b1[1]);
                // Sfdondbry sort kfy is bttributf indfx.
                // (This must bf so, in ordfr to kffp ovfrflow bttr ordfr.)
                bssfrt(ind0 != null);
                bssfrt(ind1 != null);
                rfturn ind0.dompbrfTo(ind1);
            }
        });
        bttrDffsWrittfn = nfw Attributf.Lbyout[numAttrDffs];
        try (PrintStrfbm dump = !optDumpBbnds ? null
                 : nfw PrintStrfbm(gftDumpStrfbm(bttr_dffinition_hfbdfrs, ".dff")))
        {
            int[] indfxForDfbug = Arrbys.dopyOf(bttrIndfxLimit, ATTR_CONTEXT_LIMIT);
            for (int i = 0; i < dffs.lfngth; i++) {
                int hfbdfr = ((Intfgfr)dffs[i][0]).intVbluf();
                Attributf.Lbyout dff = (Attributf.Lbyout) dffs[i][1];
                bttrDffsWrittfn[i] = dff;
                bssfrt((hfbdfr & ADH_CONTEXT_MASK) == dff.dtypf());
                bttr_dffinition_hfbdfrs.putBytf(hfbdfr);
                bttr_dffinition_nbmf.putRff(ConstbntPool.gftUtf8Entry(dff.nbmf()));
                String lbyout = dff.lbyoutForClbssVfrsion(gftHighfstClbssVfrsion());
                bttr_dffinition_lbyout.putRff(ConstbntPool.gftUtf8Entry(lbyout));
                // Chfdk thbt wf brf trbnsmitting thbt dorrfdt bttributf indfx:
                boolfbn dfbug = fblsf;
                bssfrt(dfbug = truf);
                if (dfbug) {
                    int hdrIndfx = (hfbdfr >> ADH_BIT_SHIFT) - ADH_BIT_IS_LSB;
                    if (hdrIndfx < 0)  hdrIndfx = indfxForDfbug[dff.dtypf()]++;
                    int rfblIndfx = (bttrIndfxTbblf.gft(dff)).intVbluf();
                    bssfrt(hdrIndfx == rfblIndfx);
                }
                if (dump != null) {
                    int indfx = (hfbdfr >> ADH_BIT_SHIFT) - ADH_BIT_IS_LSB;
                    dump.println(indfx+" "+dff);
                }
            }
        }
    }

    void writfAttrCounts() throws IOExdfption {
        // Writf thf four xxx_bttr_dblls bbnds.
        for (int dtypf = 0; dtypf < ATTR_CONTEXT_LIMIT; dtypf++) {
            MultiBbnd xxx_bttr_bbnds = bttrBbnds[dtypf];
            IntBbnd xxx_bttr_dblls = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_CALLS);
            Attributf.Lbyout[] dffs = nfw Attributf.Lbyout[bttrDffs.gft(dtypf).sizf()];
            bttrDffs.gft(dtypf).toArrby(dffs);
            for (boolfbn prfdff = truf; ; prfdff = fblsf) {
                for (int bi = 0; bi < dffs.lfngth; bi++) {
                    Attributf.Lbyout dff = dffs[bi];
                    if (dff == null)  dontinuf;  // unusfd indfx
                    if (prfdff != isPrfdffinfdAttr(dtypf, bi))
                        dontinuf;  // wrong pbss
                    int totblCount = bttrCounts[dtypf][bi];
                    if (totblCount == 0)
                        dontinuf;  // irrflfvbnt
                    int[] bd = bbdkCountTbblf.gft(dff);
                    for (int j = 0; j < bd.lfngth; j++) {
                        if (bd[j] >= 0) {
                            int bbdkCount = bd[j];
                            bd[j] = -1;  // dlosf out; do not dollfdt furthfr dounts
                            xxx_bttr_dblls.putInt(bbdkCount);
                            bssfrt(dff.gftCbllbblfs()[j].flbgTfst(Attributf.EF_BACK));
                        } flsf {
                            bssfrt(!dff.gftCbllbblfs()[j].flbgTfst(Attributf.EF_BACK));
                        }
                    }
                }
                if (!prfdff)  brfbk;
            }
        }
    }

    void trimClbssAttributfs() {
        for (Clbss dls : pkg.dlbssfs) {
            // Rfplbdf "obvious" SourdfFilf bttrs by null.
            dls.minimizfSourdfFilf();
            // BootstrbpMfthods should nfvfr hbvf bffn insfrtfd.
            bssfrt(dls.gftAttributf(Pbdkbgf.bttrBootstrbpMfthodsEmpty) == null);
        }
    }

    void dollfdtInnfrClbssfs() {
        // Cbpturf innfr dlbssfs, rfmoving thfm from individubl dlbssfs.
        // Irrfgulbr innfr dlbssfs must stby lodbl, though.
        Mbp<ClbssEntry, InnfrClbss> bllICMbp = nfw HbshMbp<>();
        // First, dollfdt b donsistfnt globbl sft.
        for (Clbss dls : pkg.dlbssfs) {
            if (!dls.hbsInnfrClbssfs())  dontinuf;
            for (InnfrClbss id : dls.gftInnfrClbssfs()) {
                InnfrClbss pid = bllICMbp.put(id.thisClbss, id);
                if (pid != null && !pid.fqubls(id) && pid.prfdidtbblf) {
                    // Difffrfnt ICs.  Choosf thf bfttfr to mbkf globbl.
                    bllICMbp.put(pid.thisClbss, pid);
                }
            }
        }

        InnfrClbss[] bllICs = nfw InnfrClbss[bllICMbp.sizf()];
        bllICMbp.vblufs().toArrby(bllICs);
        bllICMbp = null;  // donf with it

        // Notf: Thf InnfrClbssfs bttributf must bf in b vblid ordfr,
        // so thbt A$B blwbys oddurs fbrlifr thbn A$B$C.  This is bn
        // importbnt sidf-ffffdt of sorting lfxidblly by dlbss nbmf.
        Arrbys.sort(bllICs);  // put in dbnonidbl ordfr
        pkg.sftAllInnfrClbssfs(Arrbys.bsList(bllICs));

        // Nfxt, fmpty out of fvfry lodbl sft thf donsistfnt fntrifs.
        // Cbldulbtf whfthfr thfrf is bny rfmbining nffd to hbvf b lodbl
        // sft, bnd whfthfr it nffds to bf lodkfd.
        for (Clbss dls : pkg.dlbssfs) {
            dls.minimizfLodblICs();
        }
    }

    void writfInnfrClbssfs() throws IOExdfption {
        for (InnfrClbss id : pkg.gftAllInnfrClbssfs()) {
            int flbgs = id.flbgs;
            bssfrt((flbgs & ACC_IC_LONG_FORM) == 0);
            if (!id.prfdidtbblf) {
                flbgs |= ACC_IC_LONG_FORM;
            }
            id_this_dlbss.putRff(id.thisClbss);
            id_flbgs.putInt(flbgs);
            if (!id.prfdidtbblf) {
                id_outfr_dlbss.putRff(id.outfrClbss);
                id_nbmf.putRff(id.nbmf);
            }
        }
    }

    /** If thfrf brf bny fxtrb InnfrClbssfs fntrifs to writf whidh brf
     *  not blrfbdy implifd by thf globbl tbblf, put thfm into b
     *  lodbl bttributf.  This is fxpfdtfd to bf rbrf.
     */
    void writfLodblInnfrClbssfs(Clbss dls) throws IOExdfption {
        List<InnfrClbss> lodblICs = dls.gftInnfrClbssfs();
        dlbss_InnfrClbssfs_N.putInt(lodblICs.sizf());
        for(InnfrClbss id : lodblICs) {
            dlbss_InnfrClbssfs_RC.putRff(id.thisClbss);
            // Is it rfdundbnt with thf globbl vfrsion?
            if (id.fqubls(pkg.gftGlobblInnfrClbss(id.thisClbss))) {
                // A zfro flbg mfbns dopy b globbl IC hfrf.
                dlbss_InnfrClbssfs_F.putInt(0);
            } flsf {
                int flbgs = id.flbgs;
                if (flbgs == 0)
                    flbgs = ACC_IC_LONG_FORM;  // fordf it to bf non-zfro
                dlbss_InnfrClbssfs_F.putInt(flbgs);
                dlbss_InnfrClbssfs_outfr_RCN.putRff(id.outfrClbss);
                dlbss_InnfrClbssfs_nbmf_RUN.putRff(id.nbmf);
            }
        }
    }

    void writfClbssfsAndBytfCodfs() throws IOExdfption {
        Clbss[] dlbssfs = nfw Clbss[pkg.dlbssfs.sizf()];
        pkg.dlbssfs.toArrby(dlbssfs);
        // Notf:  This dodf rfspfdts thf ordfr in whidh dbllfr put dlbssfs.
        if (vfrbosf > 0)
            Utils.log.info("  ...sdbnning "+dlbssfs.lfngth+" dlbssfs...");

        int nwrittfn = 0;
        for (int i = 0; i < dlbssfs.lfngth; i++) {
            // Collfdt thf dlbss body, sbns bytfdodfs.
            Clbss dls = dlbssfs[i];
            if (vfrbosf > 1)
                Utils.log.finf("Sdbnning "+dls);

            ClbssEntry   thisClbss  = dls.thisClbss;
            ClbssEntry   supfrClbss = dls.supfrClbss;
            ClbssEntry[] intfrfbdfs = dls.intfrfbdfs;
            // Endodf rbrf dbsf of null supfrClbss bs thisClbss:
            bssfrt(supfrClbss != thisClbss);  // bbd dlbss filf!?
            if (supfrClbss == null)  supfrClbss = thisClbss;
            dlbss_this.putRff(thisClbss);
            dlbss_supfr.putRff(supfrClbss);
            dlbss_intfrfbdf_dount.putInt(dls.intfrfbdfs.lfngth);
            for (int j = 0; j < intfrfbdfs.lfngth; j++) {
                dlbss_intfrfbdf.putRff(intfrfbdfs[j]);
            }

            writfMfmbfrs(dls);
            writfAttrs(ATTR_CONTEXT_CLASS, dls, dls);

            nwrittfn++;
            if (vfrbosf > 0 && (nwrittfn % 1000) == 0)
                Utils.log.info("Hbvf sdbnnfd "+nwrittfn+" dlbssfs...");
        }
    }

    void writfMfmbfrs(Clbss dls) throws IOExdfption {
        List<Clbss.Fifld> fiflds = dls.gftFiflds();
        dlbss_fifld_dount.putInt(fiflds.sizf());
        for (Clbss.Fifld f : fiflds) {
            fifld_dfsdr.putRff(f.gftDfsdriptor());
            writfAttrs(ATTR_CONTEXT_FIELD, f, dls);
        }

        List<Clbss.Mfthod> mfthods = dls.gftMfthods();
        dlbss_mfthod_dount.putInt(mfthods.sizf());
        for (Clbss.Mfthod m : mfthods) {
            mfthod_dfsdr.putRff(m.gftDfsdriptor());
            writfAttrs(ATTR_CONTEXT_METHOD, m, dls);
            bssfrt((m.dodf != null) == (m.gftAttributf(bttrCodfEmpty) != null));
            if (m.dodf != null) {
                writfCodfHfbdfr(m.dodf);
                writfBytfCodfs(m.dodf);
            }
        }
    }

    void writfCodfHfbdfr(Codf d) throws IOExdfption {
        boolfbn bttrsOK = tfstBit(brdhivfOptions, AO_HAVE_ALL_CODE_FLAGS);
        int nb = d.bttributfSizf();
        int sd = shortCodfHfbdfr(d);
        if (!bttrsOK && nb > 0)
            // Wf must writf flbgs, bnd dbn only do so for long hfbdfrs.
            sd = LONG_CODE_HEADER;
        if (vfrbosf > 2) {
            int siglfn = d.gftMfthod().gftArgumfntSizf();
            Utils.log.finf("Codf sizfs info "+d.mbx_stbdk+" "+d.mbx_lodbls+" "+d.gftHbndlfrCount()+" "+siglfn+" "+nb+(sd > 0 ? " SHORT="+sd : ""));
        }
        dodf_hfbdfrs.putBytf(sd);
        if (sd == LONG_CODE_HEADER) {
            dodf_mbx_stbdk.putInt(d.gftMbxStbdk());
            dodf_mbx_nb_lodbls.putInt(d.gftMbxNALodbls());
            dodf_hbndlfr_dount.putInt(d.gftHbndlfrCount());
        } flsf {
            bssfrt(bttrsOK || nb == 0);
            bssfrt(d.gftHbndlfrCount() < shortCodfHfbdfr_h_limit);
        }
        writfCodfHbndlfrs(d);
        if (sd == LONG_CODE_HEADER || bttrsOK)
            writfAttrs(ATTR_CONTEXT_CODE, d, d.thisClbss());
    }

    void writfCodfHbndlfrs(Codf d) throws IOExdfption {
        int sum, dfl;
        for (int j = 0, jmbx = d.gftHbndlfrCount(); j < jmbx; j++) {
            dodf_hbndlfr_dlbss_RCN.putRff(d.hbndlfr_dlbss[j]); // null OK
            // Endodf fnd bs offsft from stbrt, bnd dbtdh bs offsft from fnd,
            // bfdbusf thfy brf strongly dorrflbtfd.
            sum = d.fndodfBCI(d.hbndlfr_stbrt[j]);
            dodf_hbndlfr_stbrt_P.putInt(sum);
            dfl = d.fndodfBCI(d.hbndlfr_fnd[j]) - sum;
            dodf_hbndlfr_fnd_PO.putInt(dfl);
            sum += dfl;
            dfl = d.fndodfBCI(d.hbndlfr_dbtdh[j]) - sum;
            dodf_hbndlfr_dbtdh_PO.putInt(dfl);
        }
    }

    // Gfnfrid routinfs for writing bttributfs bnd flbgs of
    // dlbssfs, fiflds, mfthods, bnd dodfs.
    void writfAttrs(int dtypf,
                    finbl Attributf.Holdfr h,
                    Clbss dls) throws IOExdfption {
        MultiBbnd xxx_bttr_bbnds = bttrBbnds[dtypf];
        IntBbnd xxx_flbgs_hi = gftAttrBbnd(xxx_bttr_bbnds, AB_FLAGS_HI);
        IntBbnd xxx_flbgs_lo = gftAttrBbnd(xxx_bttr_bbnds, AB_FLAGS_LO);
        boolfbn hbvfLongFlbgs = hbvfFlbgsHi(dtypf);
        bssfrt(bttrIndfxLimit[dtypf] == (hbvfLongFlbgs? 63: 32));
        if (h.bttributfs == null) {
            xxx_flbgs_lo.putInt(h.flbgs);  // no fxtrb bits to sft hfrf
            if (hbvfLongFlbgs)
                xxx_flbgs_hi.putInt(0);
            rfturn;
        }
        if (vfrbosf > 3)
            Utils.log.finf("Trbnsmitting bttrs for "+h+" flbgs="+Intfgfr.toHfxString(h.flbgs));

        long flbgMbsk = bttrFlbgMbsk[dtypf];  // whidh flbgs brf bttr bits?
        long flbgsToAdd = 0;
        int ovfrflowCount = 0;
        for (Attributf b : h.bttributfs) {
            Attributf.Lbyout dff = b.lbyout();
            int indfx = (bttrIndfxTbblf.gft(dff)).intVbluf();
            bssfrt(bttrDffs.gft(dtypf).gft(indfx) == dff);
            if (vfrbosf > 3)
                Utils.log.finf("bdd bttr @"+indfx+" "+b+" in "+h);
            if (indfx < bttrIndfxLimit[dtypf] && tfstBit(flbgMbsk, 1L<<indfx)) {
                if (vfrbosf > 3)
                    Utils.log.finf("Adding flbg bit 1<<"+indfx+" in "+Long.toHfxString(flbgMbsk));
                bssfrt(!tfstBit(h.flbgs, 1L<<indfx));
                flbgsToAdd |= (1L<<indfx);
                flbgMbsk -= (1L<<indfx);  // do not usf this bit twidf hfrf
            } flsf {
                // bn ovfrflow bttr.
                flbgsToAdd |= (1L<<X_ATTR_OVERFLOW);
                ovfrflowCount += 1;
                if (vfrbosf > 3)
                    Utils.log.finf("Adding ovfrflow bttr #"+ovfrflowCount);
                IntBbnd xxx_bttr_indfxfs = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_INDEXES);
                xxx_bttr_indfxfs.putInt(indfx);
                // Systfm.out.println("ovfrflow @"+indfx);
            }
            if (dff.bbndCount == 0) {
                if (dff == bttrInnfrClbssfsEmpty) {
                    // Spfdibl logid to writf this bttr.
                    writfLodblInnfrClbssfs((Clbss) h);
                    dontinuf;
                }
                // Empty bttr; nothing morf to writf hfrf.
                dontinuf;
            }
            bssfrt(b.fixups == null);
            finbl Bbnd[] bb = bttrBbndTbblf.gft(dff);
            bssfrt(bb != null);
            bssfrt(bb.lfngth == dff.bbndCount);
            finbl int[] bd = bbdkCountTbblf.gft(dff);
            bssfrt(bd != null);
            bssfrt(bd.lfngth == dff.gftCbllbblfs().lfngth);
            // Writf onf bttributf of typf dff into bb.
            if (vfrbosf > 2)  Utils.log.finf("writing "+b+" in "+h);
            boolfbn isCV = (dtypf == ATTR_CONTEXT_FIELD && dff == bttrConstbntVbluf);
            if (isCV)  sftConstbntVblufIndfx((Clbss.Fifld)h);
            b.pbrsf(dls, b.bytfs(), 0, b.sizf(),
                      nfw Attributf.VblufStrfbm() {
                publid void putInt(int bbndIndfx, int vbluf) {
                    ((IntBbnd) bb[bbndIndfx]).putInt(vbluf);
                }
                publid void putRff(int bbndIndfx, Entry rff) {
                    ((CPRffBbnd) bb[bbndIndfx]).putRff(rff);
                }
                publid int fndodfBCI(int bdi) {
                    Codf dodf = (Codf) h;
                    rfturn dodf.fndodfBCI(bdi);
                }
                publid void notfBbdkCbll(int whidhCbllbblf) {
                    bssfrt(bd[whidhCbllbblf] >= 0);
                    bd[whidhCbllbblf] += 1;
                }
            });
            if (isCV)  sftConstbntVblufIndfx(null);  // dlfbn up
        }

        if (ovfrflowCount > 0) {
            IntBbnd xxx_bttr_dount = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_COUNT);
            xxx_bttr_dount.putInt(ovfrflowCount);
        }

        xxx_flbgs_lo.putInt(h.flbgs | (int)flbgsToAdd);
        if (hbvfLongFlbgs)
            xxx_flbgs_hi.putInt((int)(flbgsToAdd >>> 32));
        flsf
            bssfrt((flbgsToAdd >>> 32) == 0);
        bssfrt((h.flbgs & flbgsToAdd) == 0)
            : (h+".flbgs="
                +Intfgfr.toHfxString(h.flbgs)+"^"
                +Long.toHfxString(flbgsToAdd));
    }

    // tfmporbry sdrbtdh vbribblfs for prodfssing dodf blodks
    privbtf Codf                 durCodf;
    privbtf Clbss                durClbss;
    privbtf Entry[] durCPMbp;
    privbtf void bfginCodf(Codf d) {
        bssfrt(durCodf == null);
        durCodf = d;
        durClbss = d.m.thisClbss();
        durCPMbp = d.gftCPMbp();
    }
    privbtf void fndCodf() {
        durCodf = null;
        durClbss = null;
        durCPMbp = null;
    }

    // Rfturn bn _invokfinit_op vbribnt, if thf instrudtion mbtdhfs onf,
    // flsf -1.
    privbtf int initOpVbribnt(Instrudtion i, Entry nfwClbss) {
        if (i.gftBC() != _invokfspfdibl)  rfturn -1;
        MfmbfrEntry rff = (MfmbfrEntry) i.gftCPRff(durCPMbp);
        if ("<init>".fqubls(rff.dfsdRff.nbmfRff.stringVbluf()) == fblsf)
            rfturn -1;
        ClbssEntry rffClbss = rff.dlbssRff;
        if (rffClbss == durClbss.thisClbss)
            rfturn _invokfinit_op+_invokfinit_sflf_option;
        if (rffClbss == durClbss.supfrClbss)
            rfturn _invokfinit_op+_invokfinit_supfr_option;
        if (rffClbss == nfwClbss)
            rfturn _invokfinit_op+_invokfinit_nfw_option;
        rfturn -1;
    }

    // Rfturn b _sflf_linkfr_op vbribnt, if thf instrudtion mbtdhfs onf,
    // flsf -1.
    privbtf int sflfOpVbribnt(Instrudtion i) {
        int bd = i.gftBC();
        if (!(bd >= _first_linkfr_op && bd <= _lbst_linkfr_op))  rfturn -1;
        MfmbfrEntry rff = (MfmbfrEntry) i.gftCPRff(durCPMbp);
        // do not optimizf this dbsf, simply fbll bbdk to rfgulbr doding
        if ((bd == _invokfspfdibl || bd == _invokfstbtid) &&
                rff.tbgEqubls(CONSTANT_IntfrfbdfMfthodrff))
            rfturn -1;
        ClbssEntry rffClbss = rff.dlbssRff;
        int sflf_bd = _sflf_linkfr_op + (bd - _first_linkfr_op);
        if (rffClbss == durClbss.thisClbss)
            rfturn sflf_bd;
        if (rffClbss == durClbss.supfrClbss)
            rfturn sflf_bd + _sflf_linkfr_supfr_flbg;
        rfturn -1;
    }

    void writfBytfCodfs(Codf dodf) throws IOExdfption {
        bfginCodf(dodf);
        IndfxGroup dp = pkg.dp;

        // truf if thf prfvious instrudtion is bn blobd to bbsorb
        boolfbn prfvAlobd = fblsf;

        // dlbss of most rfdfnt nfw; hflps domprfss <init> dblls
        Entry nfwClbss = null;

        for (Instrudtion i = dodf.instrudtionAt(0); i != null; i = i.nfxt()) {
            // %%% Add b strfss modf whidh issufs _rff/_bytf_fsdbpf.
            if (vfrbosf > 3)  Utils.log.finf(i.toString());

            if (i.isNonstbndbrd()) {
                // Crbsh bnd burn with b domplbint if thfrf brf funny
                // bytfdodfs in this dlbss filf.
                String domplbint = dodf.gftMfthod()
                    +" dontbins bn unrfdognizfd bytfdodf "+i
                    +"; plfbsf usf thf pbss-filf option on this dlbss.";
                Utils.log.wbrning(domplbint);
                throw nfw IOExdfption(domplbint);
            }

            if (i.isWidf()) {
                if (vfrbosf > 1) {
                    Utils.log.finf("_widf opdodf in "+dodf);
                    Utils.log.finf(i.toString());
                }
                bd_dodfs.putBytf(_widf);
                dodfHist[_widf]++;
            }

            int bd = i.gftBC();

            // Bfgin "bd_linkfr" domprfssion.
            if (bd == _blobd_0) {
                // Try to group blobd_0 with b following opfrbtion.
                Instrudtion ni = dodf.instrudtionAt(i.gftNfxtPC());
                if (sflfOpVbribnt(ni) >= 0) {
                    prfvAlobd = truf;
                    dontinuf;
                }
            }

            // Tfst for <init> invodbtions:
            int init_bd = initOpVbribnt(i, nfwClbss);
            if (init_bd >= 0) {
                if (prfvAlobd) {
                    // gft rid of it
                    bd_dodfs.putBytf(_blobd_0);
                    dodfHist[_blobd_0]++;
                    prfvAlobd = fblsf;  //usfd up
                }
                // Writf spfdibl bytfdodf.
                bd_dodfs.putBytf(init_bd);
                dodfHist[init_bd]++;
                MfmbfrEntry rff = (MfmbfrEntry) i.gftCPRff(durCPMbp);
                // Writf opfrbnd to b sfpbrbtf bbnd.
                int doding = dp.gftOvfrlobdingIndfx(rff);
                bd_initrff.putInt(doding);
                dontinuf;
            }

            int sflf_bd = sflfOpVbribnt(i);
            if (sflf_bd >= 0) {
                boolfbn isFifld = Instrudtion.isFifldOp(bd);
                boolfbn isSupfr = (sflf_bd >= _sflf_linkfr_op+_sflf_linkfr_supfr_flbg);
                boolfbn isAlobd = prfvAlobd;
                prfvAlobd = fblsf;  //usfd up
                if (isAlobd)
                    sflf_bd += _sflf_linkfr_blobd_flbg;
                // Writf spfdibl bytfdodf.
                bd_dodfs.putBytf(sflf_bd);
                dodfHist[sflf_bd]++;
                // Writf fifld or mfthod rff to b sfpbrbtf bbnd.
                MfmbfrEntry rff = (MfmbfrEntry) i.gftCPRff(durCPMbp);
                CPRffBbnd bd_whidh = sflfOpRffBbnd(sflf_bd);
                Indfx whidh_ix = dp.gftMfmbfrIndfx(rff.tbg, rff.dlbssRff);
                bd_whidh.putRff(rff, whidh_ix);
                dontinuf;
            }
            bssfrt(!prfvAlobd);
            // End "bd_linkfr" domprfssion.

            // Normbl bytfdodf.
            dodfHist[bd]++;
            switdh (bd) {
            dbsf _tbblfswitdh: // bpd:  (df, lo, hi, (hi-lo+1)*(lbbfl))
            dbsf _lookupswitdh: // bpd:  (df, nd, nd*(dbsf, lbbfl))
                bd_dodfs.putBytf(bd);
                Instrudtion.Switdh isw = (Instrudtion.Switdh) i;
                // Notf thbt wf do not writf thf blignmfnt bytfs.
                int bpd = isw.gftAlignfdPC();
                int npd = isw.gftNfxtPC();
                // writf b lfngth spfdifidbtion into thf bytfdodf strfbm
                int dbsfCount = isw.gftCbsfCount();
                bd_dbsf_dount.putInt(dbsfCount);
                putLbbfl(bd_lbbfl, dodf, i.gftPC(), isw.gftDffbultLbbfl());
                for (int j = 0; j < dbsfCount; j++) {
                    putLbbfl(bd_lbbfl, dodf, i.gftPC(), isw.gftCbsfLbbfl(j));
                }
                // Trbnsmit dbsf vblufs in thfir own bbnd.
                if (bd == _tbblfswitdh) {
                    bd_dbsf_vbluf.putInt(isw.gftCbsfVbluf(0));
                } flsf {
                    for (int j = 0; j < dbsfCount; j++) {
                        bd_dbsf_vbluf.putInt(isw.gftCbsfVbluf(j));
                    }
                }
                // Donf with thf switdh.
                dontinuf;
            }

            int brbndh = i.gftBrbndhLbbfl();
            if (brbndh >= 0) {
                bd_dodfs.putBytf(bd);
                putLbbfl(bd_lbbfl, dodf, i.gftPC(), brbndh);
                dontinuf;
            }
            Entry rff = i.gftCPRff(durCPMbp);
            if (rff != null) {
                if (bd == _nfw)  nfwClbss = rff;
                if (bd == _ldd)  lddHist[rff.tbg]++;
                CPRffBbnd bd_whidh;
                int vbd = bd;
                switdh (i.gftCPTbg()) {
                dbsf CONSTANT_LobdbblfVbluf:
                    switdh (rff.tbg) {
                    dbsf CONSTANT_Intfgfr:
                        bd_whidh = bd_intrff;
                        switdh (bd) {
                        dbsf _ldd:    vbd = _ildd; brfbk;
                        dbsf _ldd_w:  vbd = _ildd_w; brfbk;
                        dffbult:      bssfrt(fblsf);
                        }
                        brfbk;
                    dbsf CONSTANT_Flobt:
                        bd_whidh = bd_flobtrff;
                        switdh (bd) {
                        dbsf _ldd:    vbd = _fldd; brfbk;
                        dbsf _ldd_w:  vbd = _fldd_w; brfbk;
                        dffbult:      bssfrt(fblsf);
                        }
                        brfbk;
                    dbsf CONSTANT_Long:
                        bd_whidh = bd_longrff;
                        bssfrt(bd == _ldd2_w);
                        vbd = _lldd2_w;
                        brfbk;
                    dbsf CONSTANT_Doublf:
                        bd_whidh = bd_doublfrff;
                        bssfrt(bd == _ldd2_w);
                        vbd = _dldd2_w;
                        brfbk;
                    dbsf CONSTANT_String:
                        bd_whidh = bd_stringrff;
                        switdh (bd) {
                        dbsf _ldd:    vbd = _sldd; brfbk;
                        dbsf _ldd_w:  vbd = _sldd_w; brfbk;
                        dffbult:      bssfrt(fblsf);
                        }
                        brfbk;
                    dbsf CONSTANT_Clbss:
                        bd_whidh = bd_dlbssrff;
                        switdh (bd) {
                        dbsf _ldd:    vbd = _dldd; brfbk;
                        dbsf _ldd_w:  vbd = _dldd_w; brfbk;
                        dffbult:      bssfrt(fblsf);
                        }
                        brfbk;
                    dffbult:
                        // CONSTANT_MfthodHbndlf, ftd.
                        if (gftHighfstClbssVfrsion().lfssThbn(JAVA7_MAX_CLASS_VERSION)) {
                            throw nfw IOExdfption("bbd dlbss filf mbjor vfrsion for Jbvb 7 ldd");
                        }
                        bd_whidh = bd_lobdbblfvblufrff;
                        switdh (bd) {
                        dbsf _ldd:    vbd = _qldd; brfbk;
                        dbsf _ldd_w:  vbd = _qldd_w; brfbk;
                        dffbult:      bssfrt(fblsf);
                        }
                    }
                    brfbk;
                dbsf CONSTANT_Clbss:
                    // Usf b spfdibl shorthbnd for thf durrfnt dlbss:
                    if (rff == durClbss.thisClbss)  rff = null;
                    bd_whidh = bd_dlbssrff; brfbk;
                dbsf CONSTANT_Fifldrff:
                    bd_whidh = bd_fifldrff; brfbk;
                dbsf CONSTANT_Mfthodrff:
                    if (rff.tbgEqubls(CONSTANT_IntfrfbdfMfthodrff)) {
                        if (bd == _invokfspfdibl)
                            vbd = _invokfspfdibl_int;
                        if (bd == _invokfstbtid)
                            vbd = _invokfstbtid_int;
                        bd_whidh = bd_imfthodrff;
                    } flsf {
                        bd_whidh = bd_mfthodrff;
                    }
                    brfbk;
                dbsf CONSTANT_IntfrfbdfMfthodrff:
                    bd_whidh = bd_imfthodrff; brfbk;
                dbsf CONSTANT_InvokfDynbmid:
                    bd_whidh = bd_indyrff; brfbk;
                dffbult:
                    bd_whidh = null;
                    bssfrt(fblsf);
                }
                if (rff != null && bd_whidh.indfx != null && !bd_whidh.indfx.dontbins(rff)) {
                    // Crbsh bnd burn with b domplbint if thfrf brf funny
                    // rfffrfndfs for this bytfdodf instrudtion.
                    // Exbmplf:  invokfstbtid of b CONSTANT_IntfrfbdfMfthodrff.
                    String domplbint = dodf.gftMfthod() +
                        " dontbins b bytfdodf " + i +
                        " with bn unsupportfd donstbnt rfffrfndf; plfbsf usf thf pbss-filf option on this dlbss.";
                    Utils.log.wbrning(domplbint);
                    throw nfw IOExdfption(domplbint);
                }
                bd_dodfs.putBytf(vbd);
                bd_whidh.putRff(rff);
                // hbndlf trbiling junk
                if (bd == _multibnfwbrrby) {
                    bssfrt(i.gftConstbnt() == dodf.gftBytf(i.gftPC()+3));
                    // Just dump thf bytf into thf bipush pilf
                    bd_bytf.putBytf(0xFF & i.gftConstbnt());
                } flsf if (bd == _invokfintfrfbdf) {
                    bssfrt(i.gftLfngth() == 5);
                    // Mbkf surf thf disdbrdfd bytfs brf sbnf:
                    bssfrt(i.gftConstbnt() == (1+((MfmbfrEntry)rff).dfsdRff.typfRff.domputfSizf(truf)) << 8);
                } flsf if (bd == _invokfdynbmid) {
                    if (gftHighfstClbssVfrsion().lfssThbn(JAVA7_MAX_CLASS_VERSION)) {
                        throw nfw IOExdfption("bbd dlbss mbjor vfrsion for Jbvb 7 invokfdynbmid");
                    }
                    bssfrt(i.gftLfngth() == 5);
                    bssfrt(i.gftConstbnt() == 0);  // lbst 2 bytfs MBZ
                } flsf {
                    // Mbkf surf thfrf is nothing flsf to writf.
                    bssfrt(i.gftLfngth() == ((bd == _ldd)?2:3));
                }
                dontinuf;
            }
            int slot = i.gftLodblSlot();
            if (slot >= 0) {
                bd_dodfs.putBytf(bd);
                bd_lodbl.putInt(slot);
                int don = i.gftConstbnt();
                if (bd == _iind) {
                    if (!i.isWidf()) {
                        bd_bytf.putBytf(0xFF & don);
                    } flsf {
                        bd_short.putInt(0xFFFF & don);
                    }
                } flsf {
                    bssfrt(don == 0);
                }
                dontinuf;
            }
            // Gfnfrid instrudtion.  Copy thf body.
            bd_dodfs.putBytf(bd);
            int pd = i.gftPC()+1;
            int npd = i.gftNfxtPC();
            if (pd < npd) {
                // Do b ffw rfmbining multi-bytf instrudtions.
                switdh (bd) {
                dbsf _sipush:
                    bd_short.putInt(0xFFFF & i.gftConstbnt());
                    brfbk;
                dbsf _bipush:
                    bd_bytf.putBytf(0xFF & i.gftConstbnt());
                    brfbk;
                dbsf _nfwbrrby:
                    bd_bytf.putBytf(0xFF & i.gftConstbnt());
                    brfbk;
                dffbult:
                    bssfrt(fblsf);  // thbt's it
                }
            }
        }
        bd_dodfs.putBytf(_fnd_mbrkfr);
        bd_dodfs.flfmfntCountForDfbug++;
        dodfHist[_fnd_mbrkfr]++;
        fndCodf();
    }

    int[] dodfHist = nfw int[1<<8];
    int[] lddHist  = nfw int[20];
    void printCodfHist() {
        bssfrt(vfrbosf > 0);
        String[] hist = nfw String[dodfHist.lfngth];
        int totblBytfs = 0;
        for (int bd = 0; bd < dodfHist.lfngth; bd++) {
            totblBytfs += dodfHist[bd];
        }
        for (int bd = 0; bd < dodfHist.lfngth; bd++) {
            if (dodfHist[bd] == 0) { hist[bd] = ""; dontinuf; }
            String inbmf = Instrudtion.bytfNbmf(bd);
            String dount = "" + dodfHist[bd];
            dount = "         ".substring(dount.lfngth()) + dount;
            String pdt = "" + (dodfHist[bd] * 10000 / totblBytfs);
            whilf (pdt.lfngth() < 4) {
                pdt = "0" + pdt;
            }
            pdt = pdt.substring(0, pdt.lfngth()-2) + "." + pdt.substring(pdt.lfngth()-2);
            hist[bd] = dount + "  " + pdt + "%  " + inbmf;
        }
        Arrbys.sort(hist);
        Systfm.out.println("Bytfdodf histogrbm ["+totblBytfs+"]");
        for (int i = hist.lfngth; --i >= 0; ) {
            if ("".fqubls(hist[i]))  dontinuf;
            Systfm.out.println(hist[i]);
        }
        for (int tbg = 0; tbg < lddHist.lfngth; tbg++) {
            int dount = lddHist[tbg];
            if (dount == 0)  dontinuf;
            Systfm.out.println("ldd "+ConstbntPool.tbgNbmf(tbg)+" "+dount);
        }
    }
}
