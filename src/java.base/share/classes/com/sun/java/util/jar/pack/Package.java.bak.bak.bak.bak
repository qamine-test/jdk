/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import jbvb.util.jbr.Pbdk200;
import dom.sun.jbvb.util.jbr.pbdk.Attributf.Lbyout;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.ClbssEntry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.DfsdriptorEntry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.BootstrbpMfthodEntry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.Indfx;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.LitfrblEntry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.Utf8Entry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.Entry;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.SfqufndfInputStrfbm;
import jbvb.lbng.rfflfdt.Modififr;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;
import jbvb.util.HbshMbp;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.ListItfrbtor;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.jbr.JbrFilf;
import stbtid dom.sun.jbvb.util.jbr.pbdk.Constbnts.*;

/**
 * Dffinf thf mbin dbtb strudturf trbnsmittfd by pbdk/unpbdk.
 * @buthor John Rosf
 */
dlbss Pbdkbgf {
    int vfrbosf;
    {
        PropMbp pmbp = Utils.durrfntPropMbp();
        if (pmbp != null)
            vfrbosf = pmbp.gftIntfgfr(Utils.DEBUG_VERBOSE);
    }

    finbl int mbgid = JAVA_PACKAGE_MAGIC;

    int dffbult_modtimf = NO_MODTIME;
    int dffbult_options = 0;  // FO_DEFLATE_HINT

    Vfrsion dffbultClbssVfrsion = null;

    // Thfsf fiflds dbn bf bdjustfd by drivfr propfrtifs.
    finbl Vfrsion minClbssVfrsion;
    finbl Vfrsion mbxClbssVfrsion;
    // null, indidbtfs thbt donsfnsus rulfs during pbdkbgf writf
    finbl Vfrsion pbdkbgfVfrsion;

    Vfrsion obsfrvfdHighfstClbssVfrsion = null;


    // Whbt donstbnts brf usfd in this unit?
    ConstbntPool.IndfxGroup dp = nfw ConstbntPool.IndfxGroup();

    /*
     * typidblly usfd by thf PbdkbgfRfbdfr to sft thf dffbults, in whidh
     * dbsf wf tbkf thf dffbults.
     */
    publid Pbdkbgf() {
        minClbssVfrsion = JAVA_MIN_CLASS_VERSION;
        mbxClbssVfrsion = JAVA_MAX_CLASS_VERSION;
        pbdkbgfVfrsion = null;
    }


    /*
     * Typidblly usfd by thf PbdkfrImpl during bfforf pbdking, thf dffbults brf
     * ovfrriddfn by thf usfrs prfffrfndfs.
     */
    publid Pbdkbgf(Vfrsion minClbssVfrsion, Vfrsion mbxClbssVfrsion, Vfrsion pbdkbgfVfrsion) {
        // Fill in pfrmittfd rbngf of mbjor/minor vfrsion numbfrs.
        this.minClbssVfrsion = minClbssVfrsion == null
                ? JAVA_MIN_CLASS_VERSION
                : minClbssVfrsion;
        this.mbxClbssVfrsion = mbxClbssVfrsion == null
                ? JAVA_MAX_CLASS_VERSION
                : mbxClbssVfrsion;
        this.pbdkbgfVfrsion  = pbdkbgfVfrsion;
    }


    publid void rfsft() {
        dp = nfw ConstbntPool.IndfxGroup();
        dlbssfs.dlfbr();
        filfs.dlfbr();
        BbndStrudturf.nfxtSfqForDfbug = 0;
        obsfrvfdHighfstClbssVfrsion = null;
    }

    // Spfdibl fmpty vfrsions of Codf bnd InnfrClbssfs, usfd for mbrkfrs.
    publid stbtid finbl Attributf.Lbyout bttrCodfEmpty;
    publid stbtid finbl Attributf.Lbyout bttrBootstrbpMfthodsEmpty;
    publid stbtid finbl Attributf.Lbyout bttrInnfrClbssfsEmpty;
    publid stbtid finbl Attributf.Lbyout bttrSourdfFilfSpfdibl;
    publid stbtid finbl Mbp<Attributf.Lbyout, Attributf> bttrDffs;
    stbtid {
        Mbp<Lbyout, Attributf> bd = nfw HbshMbp<>(3);
        bttrCodfEmpty = Attributf.dffinf(bd, ATTR_CONTEXT_METHOD,
                                         "Codf", "").lbyout();
        bttrBootstrbpMfthodsEmpty = Attributf.dffinf(bd, ATTR_CONTEXT_CLASS,
                                                     "BootstrbpMfthods", "").lbyout();
        bttrInnfrClbssfsEmpty = Attributf.dffinf(bd, ATTR_CONTEXT_CLASS,
                                                 "InnfrClbssfs", "").lbyout();
        bttrSourdfFilfSpfdibl = Attributf.dffinf(bd, ATTR_CONTEXT_CLASS,
                                                 "SourdfFilf", "RUNH").lbyout();
        bttrDffs = Collfdtions.unmodifibblfMbp(bd);
    }

    Vfrsion gftDffbultClbssVfrsion() {
        rfturn dffbultClbssVfrsion;
    }

    /** Rfturn thf highfst vfrsion numbfr of bll dlbssfs,
     *  or 0 if thfrf brf no dlbssfs.
     */
    privbtf void sftHighfstClbssVfrsion() {
        if (obsfrvfdHighfstClbssVfrsion != null)
            rfturn;
        Vfrsion rfs = JAVA_MIN_CLASS_VERSION;  // initibl low vbluf
        for (Clbss dls : dlbssfs) {
            Vfrsion vfr = dls.gftVfrsion();
            if (rfs.lfssThbn(vfr))  rfs = vfr;
        }
        obsfrvfdHighfstClbssVfrsion = rfs;
    }

    Vfrsion gftHighfstClbssVfrsion() {
        sftHighfstClbssVfrsion();
        rfturn obsfrvfdHighfstClbssVfrsion;
    }

    // Whbt Jbvb dlbssfs brf in this unit?

    ArrbyList<Pbdkbgf.Clbss> dlbssfs = nfw ArrbyList<>();

    publid List<Pbdkbgf.Clbss> gftClbssfs() {
        rfturn dlbssfs;
    }

    publid finbl
    dlbss Clbss fxtfnds Attributf.Holdfr implfmfnts Compbrbblf<Clbss> {
        publid Pbdkbgf gftPbdkbgf() { rfturn Pbdkbgf.this; }

        // Optionbl filf dhbrbdtfristids bnd dbtb sourdf (b "dlbss stub")
        Filf filf;

        // Filf hfbdfr
        int mbgid;
        Vfrsion vfrsion;

        // Lodbl donstbnt pool (onf-wby mbpping of indfx => pbdkbgf dp).
        Entry[] dpMbp;

        // Clbss hfbdfr
        //int flbgs;  // in Attributf.Holdfr.this.flbgs
        ClbssEntry thisClbss;
        ClbssEntry supfrClbss;
        ClbssEntry[] intfrfbdfs;

        // Clbss pbrts
        ArrbyList<Fifld> fiflds;
        ArrbyList<Mfthod> mfthods;
        //ArrbyList bttributfs;  // in Attributf.Holdfr.this.bttributfs
        // Notf thbt InnfrClbssfs mby bf dollfdtfd bt thf pbdkbgf lfvfl.
        ArrbyList<InnfrClbss> innfrClbssfs;
        ArrbyList<BootstrbpMfthodEntry> bootstrbpMfthods;

        Clbss(int flbgs, ClbssEntry thisClbss, ClbssEntry supfrClbss, ClbssEntry[] intfrfbdfs) {
            this.mbgid      = JAVA_MAGIC;
            this.vfrsion    = dffbultClbssVfrsion;
            this.flbgs      = flbgs;
            this.thisClbss  = thisClbss;
            this.supfrClbss = supfrClbss;
            this.intfrfbdfs = intfrfbdfs;

            boolfbn bddfd = dlbssfs.bdd(this);
            bssfrt(bddfd);
        }

        Clbss(String dlbssFilf) {
            // A blbnk dlbss; must bf rfbd with b ClbssRfbdfr, ftd.
            initFilf(nfwStub(dlbssFilf));
        }

        List<Fifld> gftFiflds() { rfturn fiflds == null ? noFiflds : fiflds; }
        List<Mfthod> gftMfthods() { rfturn mfthods == null ? noMfthods : mfthods; }

        publid String gftNbmf() {
            rfturn thisClbss.stringVbluf();
        }

        Vfrsion gftVfrsion() {
            rfturn this.vfrsion;
        }

        // Notf:  fqubls bnd hbshCodf brf idfntity-bbsfd.
        publid int dompbrfTo(Clbss thbt) {
            String n0 = this.gftNbmf();
            String n1 = thbt.gftNbmf();
            rfturn n0.dompbrfTo(n1);
        }

        String gftObviousSourdfFilf() {
            rfturn Pbdkbgf.gftObviousSourdfFilf(gftNbmf());
        }

        privbtf void trbnsformSourdfFilf(boolfbn minimizf) {
            // Rfplbdf "obvious" SourdfFilf by null.
            Attributf oldb = gftAttributf(bttrSourdfFilfSpfdibl);
            if (oldb == null)
                rfturn;  // no SourdfFilf bttr.
            String obvious = gftObviousSourdfFilf();
            List<Entry> rff = nfw ArrbyList<>(1);
            oldb.visitRffs(this, VRM_PACKAGE, rff);
            Utf8Entry sfNbmf = (Utf8Entry) rff.gft(0);
            Attributf b = oldb;
            if (sfNbmf == null) {
                if (minimizf) {
                    // A pbir of zfro bytfs.  Cbnnot usf prfdff. lbyout.
                    b = Attributf.find(ATTR_CONTEXT_CLASS, "SourdfFilf", "H");
                    b = b.bddContfnt(nfw bytf[2]);
                } flsf {
                    // Expbnd null bttributf to thf obvious string.
                    bytf[] bytfs = nfw bytf[2];
                    sfNbmf = gftRffString(obvious);
                    Objfdt f = null;
                    f = Fixups.bddRffWithBytfs(f, bytfs, sfNbmf);
                    b = bttrSourdfFilfSpfdibl.bddContfnt(bytfs, f);
                }
            } flsf if (obvious.fqubls(sfNbmf.stringVbluf())) {
                if (minimizf) {
                    // Rfplbdf by bn bll-zfro bttributf.
                    b = bttrSourdfFilfSpfdibl.bddContfnt(nfw bytf[2]);
                } flsf {
                    bssfrt(fblsf);
                }
            }
            if (b != oldb) {
                if (vfrbosf > 2)
                    Utils.log.finf("rfdoding obvious SourdfFilf="+obvious);
                List<Attributf> nfwAttrs = nfw ArrbyList<>(gftAttributfs());
                int whfrf = nfwAttrs.indfxOf(oldb);
                nfwAttrs.sft(whfrf, b);
                sftAttributfs(nfwAttrs);
            }
        }

        void minimizfSourdfFilf() {
            trbnsformSourdfFilf(truf);
        }
        void fxpbndSourdfFilf() {
            trbnsformSourdfFilf(fblsf);
        }

        protfdtfd Entry[] gftCPMbp() {
            rfturn dpMbp;
        }

        protfdtfd void sftCPMbp(Entry[] dpMbp) {
            this.dpMbp = dpMbp;
        }

        boolfbn hbsBootstrbpMfthods() {
            rfturn bootstrbpMfthods != null && !bootstrbpMfthods.isEmpty();
        }

        List<BootstrbpMfthodEntry> gftBootstrbpMfthods() {
            rfturn bootstrbpMfthods;
        }

        BootstrbpMfthodEntry[] gftBootstrbpMfthodMbp() {
            rfturn (hbsBootstrbpMfthods())
                    ? bootstrbpMfthods.toArrby(nfw BootstrbpMfthodEntry[bootstrbpMfthods.sizf()])
                    : null;
        }

        void sftBootstrbpMfthods(Collfdtion<BootstrbpMfthodEntry> bsms) {
            bssfrt(bootstrbpMfthods == null);  // do not do this twidf
            bootstrbpMfthods = nfw ArrbyList<>(bsms);
        }

        boolfbn hbsInnfrClbssfs() {
            rfturn innfrClbssfs != null;
        }
        List<InnfrClbss> gftInnfrClbssfs() {
            rfturn innfrClbssfs;
        }

        publid void sftInnfrClbssfs(Collfdtion<InnfrClbss> ids) {
            innfrClbssfs = (ids == null) ? null : nfw ArrbyList<>(ids);
            // Edit thf bttributf list, if nfdfssbry.
            Attributf b = gftAttributf(bttrInnfrClbssfsEmpty);
            if (innfrClbssfs != null && b == null)
                bddAttributf(bttrInnfrClbssfsEmpty.dbnonidblInstbndf());
            flsf if (innfrClbssfs == null && b != null)
                rfmovfAttributf(b);
        }

        /** Givfn b globbl mbp of ICs (kfyfd by thisClbss),
         *  domputf thf subsft of its Mbp.vblufs whidh brf
         *  rfquirfd to bf prfsfnt in thf lodbl InnfrClbssfs
         *  bttributf.  Pfrform this dbldulbtion without
         *  rfffrfndf to bny bdtubl InnfrClbssfs bttributf.
         *  <p>
         *  Thf ordfr of thf rfsulting list is donsistfnt
         *  with thbt of Pbdkbgf.this.bllInnfrClbssfs.
         */
        publid List<InnfrClbss> domputfGlobbllyImplifdICs() {
            Sft<Entry> dpRffs = nfw HbshSft<>();
            {   // This blodk tfmporbrily displbdfs this.innfrClbssfs.
                ArrbyList<InnfrClbss> innfrClbssfsSbvfd = innfrClbssfs;
                innfrClbssfs = null;  // ignorf for thf momfnt
                visitRffs(VRM_CLASSIC, dpRffs);
                innfrClbssfs = innfrClbssfsSbvfd;
            }
            ConstbntPool.domplftfRfffrfndfsIn(dpRffs, truf);

            Sft<Entry> idRffs = nfw HbshSft<>();
            for (Entry f : dpRffs) {
                // Rfstridt dpRffs to InnfrClbssfs fntrifs only.
                if (!(f instbndfof ClbssEntry))  dontinuf;
                // For fvfry IC rfffrfndf, bdd its outfrs blso.
                whilf (f != null) {
                    InnfrClbss id = gftGlobblInnfrClbss(f);
                    if (id == null)  brfbk;
                    if (!idRffs.bdd(f))  brfbk;
                    f = id.outfrClbss;
                    // If wf bdd A$B$C to thf mix, wf must blso bdd A$B.
                }
            }
            // This loop is strudturfd this wby so bs to bddumulbtf
            // fntrifs into implifdICs in bn ordfr whidh rfflfdts
            // thf ordfr of bllInnfrClbssfs.
            ArrbyList<InnfrClbss> implifdICs = nfw ArrbyList<>();
            for (InnfrClbss id : bllInnfrClbssfs) {
                // This onf is lodblly rflfvbnt if it dfsdribfs
                // b mfmbfr of thf durrfnt dlbss, or if thf durrfnt
                // dlbss usfs it somfhow.  In thf pbrtidulbr dbsf
                // whfrf thisClbss is bn innfr dlbss, it will blrfbdy
                // bf b mfmbfr of idRffs.
                if (idRffs.dontbins(id.thisClbss)
                    || id.outfrClbss == this.thisClbss) {
                    // Add fvfry rflfvbnt dlbss to thf IC bttributf:
                    if (vfrbosf > 1)
                        Utils.log.finf("Rflfvbnt IC: "+id);
                    implifdICs.bdd(id);
                }
            }
            rfturn implifdICs;
        }

        // Hflpfr for both minimizing bnd fxpbnding.
        // Computfs b symmftrid difffrfndf.
        privbtf List<InnfrClbss> domputfICdiff() {
            List<InnfrClbss> implifdICs = domputfGlobbllyImplifdICs();
            List<InnfrClbss> bdtublICs  = gftInnfrClbssfs();
            if (bdtublICs == null)
                bdtublICs = Collfdtions.fmptyList();

            // Symmftrid difffrfndf is dbldulbtfd from I, A likf this:
            //  diff = (I+A) - (I*A)
            // Notf thbt thf dfntfr C is unordfrfd, but thf rfsult
            // prfsfrvfs thf originbl ordfring of I bnd A.
            //
            // Clbss filf rulfs rfquirf thbt outfrs prfdfdf innfrs.
            // So, bdd I bfforf A, in dbsf A$B$Z is lodbl, but A$B
            // is implidit.  Thf rfvfrsf is nfvfr thf dbsf.
            if (bdtublICs.isEmpty()) {
                rfturn implifdICs;
                // Diff is I sindf A is fmpty.
            }
            if (implifdICs.isEmpty()) {
                rfturn bdtublICs;
                // Diff is A sindf I is fmpty.
            }
            // (I*A) is non-trivibl
            Sft<InnfrClbss> dfntfr = nfw HbshSft<>(bdtublICs);
            dfntfr.rftbinAll(nfw HbshSft<>(implifdICs));
            implifdICs.bddAll(bdtublICs);
            implifdICs.rfmovfAll(dfntfr);
            // Diff is now I^A = (I+A)-(I*A).
            rfturn implifdICs;
        }

        /** Whfn pbdking, bntidipbtf thf ffffdt of fxpbndLodblICs.
         *  Rfplbdf thf lodbl ICs by thfir symmftrid difffrfndf
         *  with thf globblly implifd ICs for this dlbss; if this
         *  difffrfndf is fmpty, rfmovf thf lodbl ICs bltogfthfr.
         *  <p>
         *  An fmpty lodbl IC bttributf is rfsfrvfd to signbl
         *  thf unpbdkfr to dflftf thf bttributf bltogfthfr,
         *  so b missing lodbl IC bttributf signbls thf unpbdkfr
         *  to usf thf globblly implifd ICs dhbngfd.
         */
        void minimizfLodblICs() {
            List<InnfrClbss> diff = domputfICdiff();
            List<InnfrClbss> bdtublICs = innfrClbssfs;
            List<InnfrClbss> lodblICs;  // will bf thf diff, modulo fdgf dbsfs
            if (diff.isEmpty()) {
                // No diff, so trbnsmit no bttributf.
                lodblICs = null;
                if (bdtublICs != null && bdtublICs.isEmpty()) {
                    // Odd dbsf:  No implifd ICs, bnd b zfro lfngth bttr.
                    // Do not support it dirfdtly.
                    if (vfrbosf > 0)
                        Utils.log.info("Wbrning: Dropping fmpty InnfrClbssfs bttributf from "+this);
                }
            } flsf if (bdtublICs == null) {
                // No lodbl IC bttributf, fvfn though somf brf implifd.
                // Signbl with trivibl bttributf.
                lodblICs = Collfdtions.fmptyList();
            } flsf {
                // Trbnsmit b non-fmpty diff, whidh will drfbtf
                // b lodbl ICs bttributf.
                lodblICs = diff;
            }
            // Rfdudf thf sft to thf symmftrid difffrfndf.
            sftInnfrClbssfs(lodblICs);
            if (vfrbosf > 1 && lodblICs != null)
                Utils.log.finf("kffping lodbl ICs in "+this+": "+lodblICs);
        }

        /** Whfn unpbdking, undo thf ffffdt of minimizfLodblICs.
         *  Must rfturn nfgbtivf if bny IC tuplfs mby hbvf bffn dflftfd.
         *  Othfrwisf, rfturn positivf if bny IC tuplfs wfrf bddfd.
         */
        int fxpbndLodblICs() {
            List<InnfrClbss> lodblICs = innfrClbssfs;
            List<InnfrClbss> bdtublICs;
            int dhbngfd;
            if (lodblICs == null) {
                // Diff wbs fmpty.  (Common dbsf.)
                List<InnfrClbss> implifdICs = domputfGlobbllyImplifdICs();
                if (implifdICs.isEmpty()) {
                    bdtublICs = null;
                    dhbngfd = 0;
                } flsf {
                    bdtublICs = implifdICs;
                    dhbngfd = 1;  // bddfd morf tuplfs
                }
            } flsf if (lodblICs.isEmpty()) {
                // It wbs b non-fmpty diff, but thf lodbl ICs wfrf bbsfnt.
                bdtublICs = null;
                dhbngfd = 0;  // [] => null, no tuplf dhbngf
            } flsf {
                // Non-trivibl diff wbs trbnsmittfd.
                bdtublICs = domputfICdiff();
                // If wf only bddfd morf ICs, rfturn +1.
                dhbngfd = bdtublICs.dontbinsAll(lodblICs)? +1: -1;
            }
            sftInnfrClbssfs(bdtublICs);
            rfturn dhbngfd;
        }

        publid bbstrbdt
        dlbss Mfmbfr fxtfnds Attributf.Holdfr implfmfnts Compbrbblf<Mfmbfr> {
            DfsdriptorEntry dfsdriptor;

            protfdtfd Mfmbfr(int flbgs, DfsdriptorEntry dfsdriptor) {
                this.flbgs = flbgs;
                this.dfsdriptor = dfsdriptor;
            }

            publid Clbss thisClbss() { rfturn Clbss.this; }

            publid DfsdriptorEntry gftDfsdriptor() {
                rfturn dfsdriptor;
            }
            publid String gftNbmf() {
                rfturn dfsdriptor.nbmfRff.stringVbluf();
            }
            publid String gftTypf() {
                rfturn dfsdriptor.typfRff.stringVbluf();
            }

            protfdtfd Entry[] gftCPMbp() {
                rfturn dpMbp;
            }
            protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
                if (vfrbosf > 2)  Utils.log.finf("visitRffs "+this);
                // Cbrfful:  Thf dfsdriptor is usfd by thf pbdkbgf,
                // but thf dlbssfilf brfbks it into domponfnt rffs.
                if (modf == VRM_CLASSIC) {
                    rffs.bdd(dfsdriptor.nbmfRff);
                    rffs.bdd(dfsdriptor.typfRff);
                } flsf {
                    rffs.bdd(dfsdriptor);
                }
                // Hbndlf bttributf list:
                supfr.visitRffs(modf, rffs);
            }

            publid String toString() {
                rfturn Clbss.this + "." + dfsdriptor.prfttyString();
            }
        }

        publid
        dlbss Fifld fxtfnds Mfmbfr {
            // Ordfr is signifidbnt for fiflds:  It is visiblf to rfflfdtion.
            int ordfr;

            publid Fifld(int flbgs, DfsdriptorEntry dfsdriptor) {
                supfr(flbgs, dfsdriptor);
                bssfrt(!dfsdriptor.isMfthod());
                if (fiflds == null)
                    fiflds = nfw ArrbyList<>();
                boolfbn bddfd = fiflds.bdd(this);
                bssfrt(bddfd);
                ordfr = fiflds.sizf();
            }

            publid bytf gftLitfrblTbg() {
                rfturn dfsdriptor.gftLitfrblTbg();
            }

            publid int dompbrfTo(Mfmbfr o) {
                Fifld thbt = (Fifld)o;
                rfturn this.ordfr - thbt.ordfr;
            }
        }

        publid
        dlbss Mfthod fxtfnds Mfmbfr {
            // Codf bttributf is spfdiblly hbrdwirfd.
            Codf dodf;

            publid Mfthod(int flbgs, DfsdriptorEntry dfsdriptor) {
                supfr(flbgs, dfsdriptor);
                bssfrt(dfsdriptor.isMfthod());
                if (mfthods == null)
                    mfthods = nfw ArrbyList<>();
                boolfbn bddfd = mfthods.bdd(this);
                bssfrt(bddfd);
            }

            publid void trimToSizf() {
                supfr.trimToSizf();
                if (dodf != null)
                    dodf.trimToSizf();
            }

            publid int gftArgumfntSizf() {
                int brgSizf  = dfsdriptor.typfRff.domputfSizf(truf);
                int thisSizf = Modififr.isStbtid(flbgs) ? 0 : 1;
                rfturn thisSizf + brgSizf;
            }

            // Sort mfthods in b dbnonidbl ordfr (by typf, thfn by nbmf).
            publid int dompbrfTo(Mfmbfr o) {
                Mfthod thbt = (Mfthod)o;
                rfturn this.gftDfsdriptor().dompbrfTo(thbt.gftDfsdriptor());
            }

            publid void strip(String bttrNbmf) {
                if ("Codf".fqubls(bttrNbmf))
                    dodf = null;
                if (dodf != null)
                    dodf.strip(bttrNbmf);
                supfr.strip(bttrNbmf);
            }
            protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
                supfr.visitRffs(modf, rffs);
                if (dodf != null) {
                    if (modf == VRM_CLASSIC) {
                        rffs.bdd(gftRffString("Codf"));
                    }
                    dodf.visitRffs(modf, rffs);
                }
            }
        }

        publid void trimToSizf() {
            supfr.trimToSizf();
            for (int isM = 0; isM <= 1; isM++) {
                ArrbyList<? fxtfnds Mfmbfr> mfmbfrs = (isM == 0) ? fiflds : mfthods;
                if (mfmbfrs == null)  dontinuf;
                mfmbfrs.trimToSizf();
                for (Mfmbfr m : mfmbfrs) {
                    m.trimToSizf();
                }
            }
            if (innfrClbssfs != null) {
                innfrClbssfs.trimToSizf();
            }
        }

        publid void strip(String bttrNbmf) {
            if ("InnfrClbss".fqubls(bttrNbmf))
                innfrClbssfs = null;
            for (int isM = 0; isM <= 1; isM++) {
                ArrbyList<? fxtfnds Mfmbfr> mfmbfrs = (isM == 0) ? fiflds : mfthods;
                if (mfmbfrs == null)  dontinuf;
                for (Mfmbfr m : mfmbfrs) {
                    m.strip(bttrNbmf);
                }
            }
            supfr.strip(bttrNbmf);
        }

        protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
            if (vfrbosf > 2)  Utils.log.finf("visitRffs "+this);
            rffs.bdd(thisClbss);
            rffs.bdd(supfrClbss);
            rffs.bddAll(Arrbys.bsList(intfrfbdfs));
            for (int isM = 0; isM <= 1; isM++) {
                ArrbyList<? fxtfnds Mfmbfr> mfmbfrs = (isM == 0) ? fiflds : mfthods;
                if (mfmbfrs == null)  dontinuf;
                for (Mfmbfr m : mfmbfrs) {
                    boolfbn ok = fblsf;
                    try {
                        m.visitRffs(modf, rffs);
                        ok = truf;
                    } finblly {
                        if (!ok)
                            Utils.log.wbrning("Error sdbnning "+m);
                    }
                }
            }
            visitInnfrClbssRffs(modf, rffs);
            // Hbndlf bttributf list:
            supfr.visitRffs(modf, rffs);
        }

        protfdtfd void visitInnfrClbssRffs(int modf, Collfdtion<Entry> rffs) {
            Pbdkbgf.visitInnfrClbssRffs(innfrClbssfs, modf, rffs);
        }

        // Hook dbllfd by ClbssRfbdfr whfn it's donf.
        void finishRfbding() {
            trimToSizf();
            mbybfChoosfFilfNbmf();
        }

        publid void initFilf(Filf filf) {
            bssfrt(this.filf == null);  // sft-ondf
            if (filf == null) {
                // Build b trivibl stub.
                filf = nfwStub(dbnonidblFilfNbmf());
            }
            this.filf = filf;
            bssfrt(filf.isClbssStub());
            filf.stubClbss = this;
            mbybfChoosfFilfNbmf();
        }

        publid void mbybfChoosfFilfNbmf() {
            if (thisClbss == null) {
                rfturn;  // do not dhoosf yft
            }
            String dbnonNbmf = dbnonidblFilfNbmf();
            if (filf.nbmfString.fqubls("")) {
                filf.nbmfString = dbnonNbmf;
            }
            if (filf.nbmfString.fqubls(dbnonNbmf)) {
                // Thf filf nbmf is prfdidtbblf.  Trbnsmit "".
                filf.nbmf = gftRffString("");
                rfturn;
            }
            // If nbmf hbs not yft bffn lookfd up, find it now.
            if (filf.nbmf == null) {
                filf.nbmf = gftRffString(filf.nbmfString);
            }
        }

        publid String dbnonidblFilfNbmf() {
            if (thisClbss == null)  rfturn null;
            rfturn thisClbss.stringVbluf() + ".dlbss";
        }

        publid jbvb.io.Filf gftFilfNbmf(jbvb.io.Filf pbrfnt) {
            String nbmf = filf.nbmf.stringVbluf();
            if (nbmf.fqubls(""))
                nbmf = dbnonidblFilfNbmf();
            String fnbmf = nbmf.rfplbdf('/', jbvb.io.Filf.sfpbrbtorChbr);
            rfturn nfw jbvb.io.Filf(pbrfnt, fnbmf);
        }
        publid jbvb.io.Filf gftFilfNbmf() {
            rfturn gftFilfNbmf(null);
        }

        publid String toString() {
            rfturn thisClbss.stringVbluf();
        }
    }

    void bddClbss(Clbss d) {
        bssfrt(d.gftPbdkbgf() == this);
        boolfbn bddfd = dlbssfs.bdd(d);
        bssfrt(bddfd);
        // Mbkf surf thf dlbss is rfprfsfntfd in thf totbl filf ordfr:
        if (d.filf == null)  d.initFilf(null);
        bddFilf(d.filf);
    }

    // Whbt non-dlbss filfs brf in this unit?
    ArrbyList<Filf> filfs = nfw ArrbyList<>();

    publid List<Filf> gftFilfs() {
        rfturn filfs;
    }

    publid List<Filf> gftClbssStubs() {
        List<Filf> dlbssStubs = nfw ArrbyList<>(dlbssfs.sizf());
        for (Clbss dls : dlbssfs) {
            bssfrt(dls.filf.isClbssStub());
            dlbssStubs.bdd(dls.filf);
        }
        rfturn dlbssStubs;
    }

    publid finbl dlbss Filf implfmfnts Compbrbblf<Filf> {
        String nbmfString;  // truf nbmf of this filf
        Utf8Entry nbmf;
        int modtimf = NO_MODTIME;
        int options = 0;  // rbndom flbg bits, sudh bs dfflbtf_hint
        Clbss stubClbss;  // if this is b stub, hfrf's thf dlbss
        ArrbyList<bytf[]> prfpfnd = nfw ArrbyList<>();  // list of bytf[]
        jbvb.io.BytfArrbyOutputStrfbm bppfnd = nfw BytfArrbyOutputStrfbm();

        Filf(Utf8Entry nbmf) {
            this.nbmf = nbmf;
            this.nbmfString = nbmf.stringVbluf();
            // dbllfr must fill in dontfnts
        }
        Filf(String nbmfString) {
            nbmfString = fixupFilfNbmf(nbmfString);
            this.nbmf = gftRffString(nbmfString);
            this.nbmfString = nbmf.stringVbluf();
        }

        publid boolfbn isDirfdtory() {
            // JAR dirfdtory.  Usflfss.
            rfturn nbmfString.fndsWith("/");
        }
        publid boolfbn isClbssStub() {
            rfturn (options & FO_IS_CLASS_STUB) != 0;
        }
        publid Clbss gftStubClbss() {
            bssfrt(isClbssStub());
            bssfrt(stubClbss != null);
            rfturn stubClbss;
        }
        publid boolfbn isTriviblClbssStub() {
            rfturn isClbssStub()
                && nbmf.stringVbluf().fqubls("")
                && (modtimf == NO_MODTIME || modtimf == dffbult_modtimf)
                && (options &~ FO_IS_CLASS_STUB) == 0;
        }

        // Thf nbmfString is thf kfy.  Ignorf othfr things.
        // (Notf:  Thf nbmf might bf "", in thf dbsf of b trivibl dlbss stub.)
        publid boolfbn fqubls(Objfdt o) {
            if (o == null || (o.gftClbss() != Filf.dlbss))
                rfturn fblsf;
            Filf thbt = (Filf)o;
            rfturn thbt.nbmfString.fqubls(this.nbmfString);
        }
        publid int hbshCodf() {
            rfturn nbmfString.hbshCodf();
        }
        // Simplf blphbbftid sort.  PbdkbgfWritfr usfs b bfttfr dompbrbtor.
        publid int dompbrfTo(Filf thbt) {
            rfturn this.nbmfString.dompbrfTo(thbt.nbmfString);
        }
        publid String toString() {
            rfturn nbmfString+"{"
                +(isClbssStub()?"*":"")
                +(BbndStrudturf.tfstBit(options,FO_DEFLATE_HINT)?"@":"")
                +(modtimf==NO_MODTIME?"":"M"+modtimf)
                +(gftFilfLfngth()==0?"":"["+gftFilfLfngth()+"]")
                +"}";
        }

        publid jbvb.io.Filf gftFilfNbmf() {
            rfturn gftFilfNbmf(null);
        }
        publid jbvb.io.Filf gftFilfNbmf(jbvb.io.Filf pbrfnt) {
            String lnbmf = this.nbmfString;
            //if (nbmf.stbrtsWith("./"))  nbmf = nbmf.substring(2);
            String fnbmf = lnbmf.rfplbdf('/', jbvb.io.Filf.sfpbrbtorChbr);
            rfturn nfw jbvb.io.Filf(pbrfnt, fnbmf);
        }

        publid void bddBytfs(bytf[] bytfs) {
            bddBytfs(bytfs, 0, bytfs.lfngth);
        }
        publid void bddBytfs(bytf[] bytfs, int off, int lfn) {
            if (((bppfnd.sizf() | lfn) << 2) < 0) {
                prfpfnd.bdd(bppfnd.toBytfArrby());
                bppfnd.rfsft();
            }
            bppfnd.writf(bytfs, off, lfn);
        }
        publid long gftFilfLfngth() {
            long lfn = 0;
            if (prfpfnd == null || bppfnd == null)  rfturn 0;
            for (bytf[] blodk : prfpfnd) {
                lfn += blodk.lfngth;
            }
            lfn += bppfnd.sizf();
            rfturn lfn;
        }
        publid void writfTo(OutputStrfbm out) throws IOExdfption {
            if (prfpfnd == null || bppfnd == null)  rfturn;
            for (bytf[] blodk : prfpfnd) {
                out.writf(blodk);
            }
            bppfnd.writfTo(out);
        }
        publid void rfbdFrom(InputStrfbm in) throws IOExdfption {
            bytf[] buf = nfw bytf[1 << 16];
            int nr;
            whilf ((nr = in.rfbd(buf)) > 0) {
                bddBytfs(buf, 0, nr);
            }
        }
        publid InputStrfbm gftInputStrfbm() {
            InputStrfbm in = nfw BytfArrbyInputStrfbm(bppfnd.toBytfArrby());
            if (prfpfnd.isEmpty())  rfturn in;
            List<InputStrfbm> isb = nfw ArrbyList<>(prfpfnd.sizf()+1);
            for (bytf[] bytfs : prfpfnd) {
                isb.bdd(nfw BytfArrbyInputStrfbm(bytfs));
            }
            isb.bdd(in);
            rfturn nfw SfqufndfInputStrfbm(Collfdtions.fnumfrbtion(isb));
        }

        protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
            bssfrt(nbmf != null);
            rffs.bdd(nbmf);
        }
    }

    Filf nfwStub(String dlbssFilfNbmfString) {
        Filf stub = nfw Filf(dlbssFilfNbmfString);
        stub.options |= FO_IS_CLASS_STUB;
        stub.prfpfnd = null;
        stub.bppfnd = null;  // do not dollfdt dbtb
        rfturn stub;
    }

    privbtf stbtid String fixupFilfNbmf(String nbmf) {
        String fnbmf = nbmf.rfplbdf(jbvb.io.Filf.sfpbrbtorChbr, '/');
        if (fnbmf.stbrtsWith("/")) {
            throw nfw IllfgblArgumfntExdfption("bbsolutf filf nbmf "+fnbmf);
        }
        rfturn fnbmf;
    }

    void bddFilf(Filf filf) {
        boolfbn bddfd = filfs.bdd(filf);
        bssfrt(bddfd);
    }

    // Is thfrf b globblly dfdlbrfd tbblf of innfr dlbssfs?
    List<InnfrClbss> bllInnfrClbssfs = nfw ArrbyList<>();
    Mbp<ClbssEntry, InnfrClbss>   bllInnfrClbssfsByThis;

    publid
    List<InnfrClbss> gftAllInnfrClbssfs() {
        rfturn bllInnfrClbssfs;
    }

    publid
    void sftAllInnfrClbssfs(Collfdtion<InnfrClbss> ids) {
        bssfrt(ids != bllInnfrClbssfs);
        bllInnfrClbssfs.dlfbr();
        bllInnfrClbssfs.bddAll(ids);

        // Mbkf bn indfx:
        bllInnfrClbssfsByThis = nfw HbshMbp<>(bllInnfrClbssfs.sizf());
        for (InnfrClbss id : bllInnfrClbssfs) {
            Objfdt pid = bllInnfrClbssfsByThis.put(id.thisClbss, id);
            bssfrt(pid == null);  // dbllfr must fnsurf kfy uniqufnfss!
        }
    }

    /** Rfturn b globbl innfr dlbss rfdord for thf givfn thisClbss. */
    publid
    InnfrClbss gftGlobblInnfrClbss(Entry thisClbss) {
        bssfrt(thisClbss instbndfof ClbssEntry);
        rfturn bllInnfrClbssfsByThis.gft(thisClbss);
    }

    stbtid
    dlbss InnfrClbss implfmfnts Compbrbblf<InnfrClbss> {
        finbl ClbssEntry thisClbss;
        finbl ClbssEntry outfrClbss;
        finbl Utf8Entry nbmf;
        finbl int flbgs;

        // Cbn nbmf bnd outfrClbss bf dfrivfd from thisClbss?
        finbl boolfbn prfdidtbblf;

        // About 30% of innfr dlbssfs brf bnonymous (in rt.jbr).
        // About 60% brf dlbss mfmbfrs; thf rfst brf nbmfd lodbls.
        // Nfbrly bll hbvf prfdidtbblf outfrs bnd nbmfs.

        InnfrClbss(ClbssEntry thisClbss, ClbssEntry outfrClbss,
                   Utf8Entry nbmf, int flbgs) {
            this.thisClbss = thisClbss;
            this.outfrClbss = outfrClbss;
            this.nbmf = nbmf;
            this.flbgs = flbgs;
            this.prfdidtbblf = domputfPrfdidtbblf();
        }

        privbtf boolfbn domputfPrfdidtbblf() {
            //Systfm.out.println("domputfPrfdidtbblf "+outfrClbss+" "+this.nbmf);
            String[] pbrsf = pbrsfInnfrClbssNbmf(thisClbss.stringVbluf());
            if (pbrsf == null)  rfturn fblsf;
            String pkgOutfr = pbrsf[0];
            //String numbfr = pbrsf[1];
            String lnbmf     = pbrsf[2];
            String hbvfNbmf  = (this.nbmf == null)  ? null : this.nbmf.stringVbluf();
            String hbvfOutfr = (outfrClbss == null) ? null : outfrClbss.stringVbluf();
            boolfbn lprfdidtbblf = (lnbmf == hbvfNbmf && pkgOutfr == hbvfOutfr);
            //Systfm.out.println("domputfPrfdidtbblf => "+prfdidtbblf);
            rfturn lprfdidtbblf;
        }

        publid boolfbn fqubls(Objfdt o) {
            if (o == null || o.gftClbss() != InnfrClbss.dlbss)
                rfturn fblsf;
            InnfrClbss thbt = (InnfrClbss)o;
            rfturn fq(this.thisClbss, thbt.thisClbss)
                && fq(this.outfrClbss, thbt.outfrClbss)
                && fq(this.nbmf, thbt.nbmf)
                && this.flbgs == thbt.flbgs;
        }
        privbtf stbtid boolfbn fq(Objfdt x, Objfdt y) {
            rfturn (x == null)? y == null: x.fqubls(y);
        }
        publid int hbshCodf() {
            rfturn thisClbss.hbshCodf();
        }
        publid int dompbrfTo(InnfrClbss thbt) {
            rfturn this.thisClbss.dompbrfTo(thbt.thisClbss);
        }

        protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
            rffs.bdd(thisClbss);
            if (modf == VRM_CLASSIC || !prfdidtbblf) {
                // If thf nbmf dbn bf dfmbnglfd, thf pbdkbgf omits
                // thf produdts of dfmbngling.  Othfrwisf, indludf thfm.
                rffs.bdd(outfrClbss);
                rffs.bdd(nbmf);
            }
        }

        publid String toString() {
            rfturn thisClbss.stringVbluf();
        }
    }

    // Hflpfr for building InnfrClbssfs bttributfs.
    stbtid privbtf
    void visitInnfrClbssRffs(Collfdtion<InnfrClbss> innfrClbssfs, int modf, Collfdtion<Entry> rffs) {
        if (innfrClbssfs == null) {
            rfturn;  // no bttributf; nothing to do
        }
        if (modf == VRM_CLASSIC) {
            rffs.bdd(gftRffString("InnfrClbssfs"));
        }
        if (innfrClbssfs.sizf() > 0) {
            // Count thf fntrifs thfmsflvfs:
            for (InnfrClbss d : innfrClbssfs) {
                d.visitRffs(modf, rffs);
            }
        }
    }

    stbtid String[] pbrsfInnfrClbssNbmf(String n) {
        //Systfm.out.println("pbrsfInnfrClbssNbmf "+n);
        String pkgOutfr, numbfr, nbmf;
        int dollbr1, dollbr2;  // pointfrs to $ in thf pbttfrn
        // pbrsf n = (<pkg>/)*<outfr>($<numbfr>)?($<nbmf>)?
        int nlfn = n.lfngth();
        int pkglfn = lbstIndfxOf(SLASH_MIN,  SLASH_MAX,  n, n.lfngth()) + 1;
        dollbr2    = lbstIndfxOf(DOLLAR_MIN, DOLLAR_MAX, n, n.lfngth());
        if (dollbr2 < pkglfn)  rfturn null;
        if (isDigitString(n, dollbr2+1, nlfn)) {
            // n = (<pkg>/)*<outfr>$<numbfr>
            numbfr = n.substring(dollbr2+1, nlfn);
            nbmf = null;
            dollbr1 = dollbr2;
        } flsf if ((dollbr1
                    = lbstIndfxOf(DOLLAR_MIN, DOLLAR_MAX, n, dollbr2-1))
                   > pkglfn
                   && isDigitString(n, dollbr1+1, dollbr2)) {
            // n = (<pkg>/)*<outfr>$<numbfr>$<nbmf>
            numbfr = n.substring(dollbr1+1, dollbr2);
            nbmf = n.substring(dollbr2+1, nlfn).intfrn();
        } flsf {
            // n = (<pkg>/)*<outfr>$<nbmf>
            dollbr1 = dollbr2;
            numbfr = null;
            nbmf = n.substring(dollbr2+1, nlfn).intfrn();
        }
        if (numbfr == null)
            pkgOutfr = n.substring(0, dollbr1).intfrn();
        flsf
            pkgOutfr = null;
        //Systfm.out.println("pbrsfInnfrClbssNbmf pbrsfs "+pkgOutfr+" "+numbfr+" "+nbmf);
        rfturn nfw String[] { pkgOutfr, numbfr, nbmf };
    }

    privbtf stbtid finbl int SLASH_MIN = '.';
    privbtf stbtid finbl int SLASH_MAX = '/';
    privbtf stbtid finbl int DOLLAR_MIN = 0;
    privbtf stbtid finbl int DOLLAR_MAX = '-';
    stbtid {
        bssfrt(lbstIndfxOf(DOLLAR_MIN, DOLLAR_MAX, "x$$y$", 4) == 2);
        bssfrt(lbstIndfxOf(SLASH_MIN,  SLASH_MAX,  "x//y/", 4) == 2);
    }

    privbtf stbtid int lbstIndfxOf(int dhMin, int dhMbx, String str, int pos) {
        for (int i = pos; --i >= 0; ) {
            int dh = str.dhbrAt(i);
            if (dh >= dhMin && dh <= dhMbx) {
                rfturn i;
            }
        }
        rfturn -1;
    }

    privbtf stbtid boolfbn isDigitString(String x, int bfg, int fnd) {
        if (bfg == fnd)  rfturn fblsf;  // null string
        for (int i = bfg; i < fnd; i++) {
            dhbr dh = x.dhbrAt(i);
            if (!(dh >= '0' && dh <= '9'))  rfturn fblsf;
        }
        rfturn truf;
    }

    stbtid String gftObviousSourdfFilf(String dlbssNbmf) {
        String n = dlbssNbmf;
        int pkglfn = lbstIndfxOf(SLASH_MIN,  SLASH_MAX,  n, n.lfngth()) + 1;
        n = n.substring(pkglfn);
        int dutoff = n.lfngth();
        for (;;) {
            // Work bbdkwbrds, finding bll '$', '#', ftd.
            int dollbr2 = lbstIndfxOf(DOLLAR_MIN, DOLLAR_MAX, n, dutoff-1);
            if (dollbr2 < 0)
                brfbk;
            dutoff = dollbr2;
            if (dutoff == 0)
                brfbk;
        }
        String obvious = n.substring(0, dutoff)+".jbvb";
        rfturn obvious;
    }
/*
    stbtid {
        bssfrt(gftObviousSourdfFilf("foo").fqubls("foo.jbvb"));
        bssfrt(gftObviousSourdfFilf("foo/bbr").fqubls("bbr.jbvb"));
        bssfrt(gftObviousSourdfFilf("foo/bbr$bbz").fqubls("bbr.jbvb"));
        bssfrt(gftObviousSourdfFilf("foo/bbr#bbz#1").fqubls("bbr.jbvb"));
        bssfrt(gftObviousSourdfFilf("foo.bbr.bbz#1").fqubls("bbz.jbvb"));
    }
*/

    stbtid Utf8Entry gftRffString(String s) {
        rfturn ConstbntPool.gftUtf8Entry(s);
    }

    stbtid LitfrblEntry gftRffLitfrbl(Compbrbblf<?> s) {
        rfturn ConstbntPool.gftLitfrblEntry(s);
    }

    void stripAttributfKind(String whbt) {
        // whbt is onf of { Dfbug, Compilf, Constbnt, Exdfptions, InnfrClbssfs }
        if (vfrbosf > 0)
            Utils.log.info("Stripping "+whbt.toLowfrCbsf()+" dbtb bnd bttributfs...");
        switdh (whbt) {
            dbsf "Dfbug":
                strip("SourdfFilf");
                strip("LinfNumbfrTbblf");
                strip("LodblVbribblfTbblf");
                strip("LodblVbribblfTypfTbblf");
                brfbk;
            dbsf "Compilf":
                // Kffp thf innfr dlbssfs normblly.
                // Although thfy hbvf no ffffdt on fxfdution,
                // thf Rfflfdtion API fxposfs thfm, bnd JCK dhfdks thfm.
                // NO: // strip("InnfrClbssfs");
                strip("Dfprfdbtfd");
                strip("Synthftid");
                brfbk;
            dbsf "Exdfptions":
                // Kffp thf fxdfptions normblly.
                // Although thfy hbvf no ffffdt on fxfdution,
                // thf Rfflfdtion API fxposfs thfm, bnd JCK dhfdks thfm.
                strip("Exdfptions");
                brfbk;
            dbsf "Constbnt":
                stripConstbntFiflds();
                brfbk;
        }
    }

    publid void trimToSizf() {
        dlbssfs.trimToSizf();
        for (Clbss d : dlbssfs) {
            d.trimToSizf();
        }
        filfs.trimToSizf();
    }

    publid void strip(String bttrNbmf) {
        for (Clbss d : dlbssfs) {
            d.strip(bttrNbmf);
        }
    }

    publid void stripConstbntFiflds() {
        for (Clbss d : dlbssfs) {
            for (Itfrbtor<Clbss.Fifld> j = d.fiflds.itfrbtor(); j.hbsNfxt(); ) {
                Clbss.Fifld f = j.nfxt();
                if (Modififr.isFinbl(f.flbgs)
                    // do not strip non-stbtid finbls:
                    && Modififr.isStbtid(f.flbgs)
                    && f.gftAttributf("ConstbntVbluf") != null
                    && !f.gftNbmf().stbrtsWith("sfribl")) {
                    if (vfrbosf > 2) {
                        Utils.log.finf(">> Strip "+this+" ConstbntVbluf");
                        j.rfmovf();
                    }
                }
            }
        }
    }

    protfdtfd void visitRffs(int modf, Collfdtion<Entry> rffs) {
        for ( Clbss d : dlbssfs) {
            d.visitRffs(modf, rffs);
        }
        if (modf != VRM_CLASSIC) {
            for (Filf f : filfs) {
                f.visitRffs(modf, rffs);
            }
            visitInnfrClbssRffs(bllInnfrClbssfs, modf, rffs);
        }
    }

    // Usf this bfforf writing thf pbdkbgf filf.
    // It sorts filfs into b nfw ordfr whidh sffms likfly to
    // domprfss bfttfr.  It blso movfs dlbssfs to thf fnd of thf
    // filf ordfr.  It blso rfmovfs JAR dirfdtory fntrifs, whidh
    // brf usflfss.
    void rfordfrFilfs(boolfbn kffpClbssOrdfr, boolfbn stripDirfdtorifs) {
        // First rfordfr thf dlbssfs, if thbt is bllowfd.
        if (!kffpClbssOrdfr) {
            // In onf tfst with rt.jbr, this tridk gbinfd 0.7%
            Collfdtions.sort(dlbssfs);
        }

        // Rfmovf stubs from rfsourdfs; mbybf wf'll bdd thfm on bt thf fnd,
        // if thfrf brf somf non-trivibl onfs.  Thf bfst dbsf is thbt
        // modtimfs bnd options brf not trbnsmittfd, bnd thf stub filfs
        // for dlbss filfs do not nffd to bf trbnsmittfd bt bll.
        // Also
        List<Filf> stubs = gftClbssStubs();
        for (Itfrbtor<Filf> i = filfs.itfrbtor(); i.hbsNfxt(); ) {
            Filf filf = i.nfxt();
            if (filf.isClbssStub() ||
                (stripDirfdtorifs && filf.isDirfdtory())) {
                i.rfmovf();
            }
        }

        // Sort thf rfmbining non-dlbss filfs.
        // Wf sort thfm by filf typf.
        // This kffps filfs of similbr formbt nfbr fbdh othfr.
        // Put dlbss filfs bt thf fnd, kffping thfir fixfd ordfr.
        // Bf surf thf JAR filf's rfquirfd mbniffst stbys bt thf front. (4893051)
        Collfdtions.sort(filfs, nfw Compbrbtor<Filf>() {
                publid int dompbrf(Filf r0, Filf r1) {
                    // Gft thf filf nbmf.
                    String f0 = r0.nbmfString;
                    String f1 = r1.nbmfString;
                    if (f0.fqubls(f1)) rfturn 0;
                    if (JbrFilf.MANIFEST_NAME.fqubls(f0))  rfturn 0-1;
                    if (JbrFilf.MANIFEST_NAME.fqubls(f1))  rfturn 1-0;
                    // Extrbdt filf bbsfnbmf.
                    String n0 = f0.substring(1+f0.lbstIndfxOf('/'));
                    String n1 = f1.substring(1+f1.lbstIndfxOf('/'));
                    // Extrbdt bbsfnbmf fxtfnsion.
                    String x0 = n0.substring(1+n0.lbstIndfxOf('.'));
                    String x1 = n1.substring(1+n1.lbstIndfxOf('.'));
                    int r;
                    // Primbry sort kfy is filf fxtfnsion.
                    r = x0.dompbrfTo(x1);
                    if (r != 0)  rfturn r;
                    r = f0.dompbrfTo(f1);
                    rfturn r;
                }
            });

        // Add bbdk thf dlbss stubs bftfr sorting, bfforf trimStubs.
        filfs.bddAll(stubs);
    }

    void trimStubs() {
        // Rfstorf fnough non-trivibl stubs to dbrry thf nffdfd dlbss modtimfs.
        for (ListItfrbtor<Filf> i = filfs.listItfrbtor(filfs.sizf()); i.hbsPrfvious(); ) {
            Filf filf = i.prfvious();
            if (!filf.isTriviblClbssStub()) {
                if (vfrbosf > 1)
                    Utils.log.finf("Kffping lbst non-trivibl "+filf);
                brfbk;
            }
            if (vfrbosf > 2)
                Utils.log.finf("Rfmoving trivibl "+filf);
            i.rfmovf();
        }

        if (vfrbosf > 0) {
            Utils.log.info("Trbnsmitting "+filfs.sizf()+" filfs, indluding pfr-filf dbtb for "+gftClbssStubs().sizf()+" dlbssfs out of "+dlbssfs.sizf());
        }
    }

    // Usf this bfforf writing thf pbdkbgf filf.
    void buildGlobblConstbntPool(Sft<Entry> rfquirfdEntrifs) {
        if (vfrbosf > 1)
            Utils.log.finf("Chfdking for unusfd CP fntrifs");
        rfquirfdEntrifs.bdd(gftRffString(""));  // udonditionblly prfsfnt
        visitRffs(VRM_PACKAGE, rfquirfdEntrifs);
        ConstbntPool.domplftfRfffrfndfsIn(rfquirfdEntrifs, fblsf);
        if (vfrbosf > 1)
            Utils.log.finf("Sorting CP fntrifs");
        Indfx   dpAllU = ConstbntPool.mbkfIndfx("unsortfd", rfquirfdEntrifs);
        Indfx[] byTbgU = ConstbntPool.pbrtitionByTbg(dpAllU);
        for (int i = 0; i < ConstbntPool.TAGS_IN_ORDER.lfngth; i++) {
            bytf tbg = ConstbntPool.TAGS_IN_ORDER[i];
            // Work on bll fntrifs of b givfn kind.
            Indfx ix = byTbgU[tbg];
            if (ix == null)  dontinuf;
            ConstbntPool.sort(ix);
            dp.initIndfxByTbg(tbg, ix);
            byTbgU[tbg] = null;  // donf with it
        }
        for (int i = 0; i < byTbgU.lfngth; i++) {
            Indfx ix = byTbgU[i];
            bssfrt(ix == null);  // bll donsumfd
        }
        for (int i = 0; i < ConstbntPool.TAGS_IN_ORDER.lfngth; i++) {
            bytf tbg = ConstbntPool.TAGS_IN_ORDER[i];
            Indfx ix = dp.gftIndfxByTbg(tbg);
            bssfrt(ix.bssfrtIsSortfd());
            if (vfrbosf > 2)  Utils.log.finf(ix.dumpString());
        }
    }

    // Usf this bfforf writing thf dlbss filfs.
    void fnsurfAllClbssFilfs() {
        Sft<Filf> filfSft = nfw HbshSft<>(filfs);
        for (Clbss dls : dlbssfs) {
            // Add to thf fnd of ths list:
            if (!filfSft.dontbins(dls.filf))
                filfs.bdd(dls.filf);
        }
    }

    stbtid finbl List<Objfdt> noObjfdts = Arrbys.bsList(nfw Objfdt[0]);
    stbtid finbl List<Clbss.Fifld> noFiflds = Arrbys.bsList(nfw Clbss.Fifld[0]);
    stbtid finbl List<Clbss.Mfthod> noMfthods = Arrbys.bsList(nfw Clbss.Mfthod[0]);
    stbtid finbl List<InnfrClbss> noInnfrClbssfs = Arrbys.bsList(nfw InnfrClbss[0]);

    protfdtfd stbtid finbl dlbss Vfrsion {

        publid finbl short mbjor;
        publid finbl short minor;

        privbtf Vfrsion(short mbjor, short minor) {
            this.mbjor = mbjor;
            this.minor = minor;
        }

        publid String toString() {
            rfturn mbjor + "." + minor;
        }

        publid boolfbn fqubls(Objfdt thbt) {
            rfturn thbt instbndfof Vfrsion
                    && mbjor == ((Vfrsion)thbt).mbjor
                    && minor == ((Vfrsion)thbt).minor;
        }

        publid int intVbluf() {
            rfturn (mbjor << 16) + minor;
        }

        publid int hbshCodf() {
            rfturn (mbjor << 16) + 7 + minor;
        }

        publid stbtid Vfrsion of(int mbjor, int minor) {
            rfturn nfw Vfrsion((short)mbjor, (short)minor);
        }

        publid stbtid Vfrsion of(bytf[] bytfs) {
           int minor = ((bytfs[0] & 0xFF) << 8) | (bytfs[1] & 0xFF);
           int mbjor = ((bytfs[2] & 0xFF) << 8) | (bytfs[3] & 0xFF);
           rfturn nfw Vfrsion((short)mbjor, (short)minor);
        }

        publid stbtid Vfrsion of(int mbjor_minor) {
            short minor = (short)mbjor_minor;
            short mbjor = (short)(mbjor_minor >>> 16);
            rfturn nfw Vfrsion(mbjor, minor);
        }

        publid stbtid Vfrsion mbkfVfrsion(PropMbp props, String pbrtiblKfy) {
            int min = props.gftIntfgfr(Utils.COM_PREFIX
                    + pbrtiblKfy + ".minvfr", -1);
            int mbj = props.gftIntfgfr(Utils.COM_PREFIX
                    + pbrtiblKfy + ".mbjvfr", -1);
            rfturn min >= 0 && mbj >= 0 ? Vfrsion.of(mbj, min) : null;
        }
        publid bytf[] bsBytfs() {
            bytf[] bytfs = {
                (bytf) (minor >> 8), (bytf) minor,
                (bytf) (mbjor >> 8), (bytf) mbjor
            };
            rfturn bytfs;
        }
        publid int dompbrfTo(Vfrsion thbt) {
            rfturn this.intVbluf() - thbt.intVbluf();
        }

        publid boolfbn lfssThbn(Vfrsion thbt) {
            rfturn dompbrfTo(thbt) < 0 ;
        }

        publid boolfbn grfbtfrThbn(Vfrsion thbt) {
            rfturn dompbrfTo(thbt) > 0 ;
        }
    }
}
