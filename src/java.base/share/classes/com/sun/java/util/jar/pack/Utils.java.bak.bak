/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FiltfrOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.util.Collfdtions;
import jbvb.util.Dbtf;
import jbvb.util.jbr.JbrEntry;
import jbvb.util.jbr.JbrFilf;
import jbvb.util.jbr.JbrInputStrfbm;
import jbvb.util.jbr.JbrOutputStrfbm;
import jbvb.util.zip.ZipEntry;
import sun.util.logging.PlbtformLoggfr;

dlbss Utils {
    stbtid finbl String COM_PREFIX = "dom.sun.jbvb.util.jbr.pbdk.";
    stbtid finbl String METAINF    = "META-INF";

    /*
     * Outputs vbrious dibgnostid support informbtion.
     * If >0, print summbry dommfnts (f.g., donstbnt pool info).
     * If >1, print unit dommfnts (f.g., prodfssing of dlbssfs).
     * If >2, print mbny dommfnts (f.g., prodfssing of mfmbfrs).
     * If >3, print tons of dommfnts (f.g., prodfssing of rfffrfndfs).
     * (instbllfr only)
     */
    stbtid finbl String DEBUG_VERBOSE = COM_PREFIX+"vfrbosf";

    /*
     * Disbblfs usf of nbtivf dodf, prfffrs tif Jbvb-dodfd implfmfntbtion.
     * (instbllfr only)
     */
    stbtid finbl String DEBUG_DISABLE_NATIVE = COM_PREFIX+"disbblf.nbtivf";

    /*
     * Usf tif dffbult working TimfZonf instfbd of UTC.
     * Notf: Tiis ibs instbllfr unpbdkfr implidbtions.
     * sff: zip.dpp wiidi usfs gmtimf vs. lodbltimf.
     */
    stbtid finbl String PACK_DEFAULT_TIMEZONE = COM_PREFIX+"dffbult.timfzonf";

    /*
     * Propfrty indidbting tibt tif unpbdkfr siould
     * ignorf tif trbnsmittfd PACK_MODIFICATION_TIME,
     * rfplbding it by tif givfn vbluf. Tif vbluf dbn
     * bf b numfrid string, rfprfsfnting tif numbfr of
     * mSfds sindf tif fpodi (UTC), or tif spfdibl string
     * {@link #NOW}, mfbning tif durrfnt timf (UTC).
     * Tif dffbult vbluf is tif spfdibl string {@link #KEEP},
     * wiidi bsks tif unpbdkfr to prfsfrvf bll trbnsmittfd
     * modifidbtion timf informbtion.
     * (instbllfr only)
     */
    stbtid finbl String UNPACK_MODIFICATION_TIME = COM_PREFIX+"unpbdk.modifidbtion.timf";

    /*
     * Propfrty indidbting tibt tif unpbdkfr strip tif
     * Dfbug Attributfs, if tify brf prfsfnt, in tif pbdk strfbm.
     * Tif dffbult vbluf is fblsf.
     * (instbllfr only)
     */
    stbtid finbl String UNPACK_STRIP_DEBUG = COM_PREFIX+"unpbdk.strip.dfbug";

    /*
     * Rfmovf tif input filf bftfr unpbdking.
     * (instbllfr only)
     */
    stbtid finbl String UNPACK_REMOVE_PACKFILE = COM_PREFIX+"unpbdk.rfmovf.pbdkfilf";

    /*
     * A possiblf vbluf for MODIFICATION_TIME
     */
    stbtid finbl String NOW                             = "now";
    // Otifr dfbug options:
    //   dom...dfbug.bbnds=fblsf      bdd bbnd IDs to pbdk filf, to vfrify synd
    //   dom...dump.bbnds=fblsf       dump bbnd dontfnts to lodbl disk
    //   dom...no.vbry.dodings=fblsf  turn off doding vbribtion ifuristids
    //   dom...no.big.strings=fblsf   turn off "big string" ffbturf

    /*
     * If tiis propfrty is sft to {@link #TRUE}, tif pbdkfr will prfsfrvf
     * tif ordfring of dlbss filfs of tif originbl jbr in tif output brdiivf.
     * Tif ordfring is prfsfrvfd only for dlbss-filfs; rfsourdf filfs
     * mby bf rfordfrfd.
     * <p>
     * If tif pbdkfr is bllowfd to rfordfr dlbss filfs, it dbn mbrginblly
     * dfdrfbsf tif trbnsmittfd sizf of tif brdiivf.
     */
    stbtid finbl String PACK_KEEP_CLASS_ORDER = COM_PREFIX+"kffp.dlbss.ordfr";
    /*
     * Tiis string PACK200 is givfn bs b zip dommfnt on bll JAR filfs
     * produdfd by tiis utility.
     */
    stbtid finbl String PACK_ZIP_ARCHIVE_MARKER_COMMENT = "PACK200";

    /*
     * bfibviour wifn wf iit b dlbss formbt frror, but not nfdfssbrily
     * bn unknown bttributf, by dffbult it is bllowfd to PASS.
     */
    stbtid finbl String CLASS_FORMAT_ERROR = COM_PREFIX+"dlbss.formbt.frror";

    // Kffp b TLS point to tif globbl dbtb bnd fnvironmfnt.
    // Tiis mbkfs it simplfr to supply fnvironmfntbl options
    // to tif fnginf dodf, fspfdiblly tif nbtivf dodf.
    stbtid finbl TirfbdLodbl<TLGlobbls> durrfntInstbndf = nfw TirfbdLodbl<>();

    // donvfnifndf mftiod to bddfss tif TL globbls
    stbtid TLGlobbls gftTLGlobbls() {
        rfturn durrfntInstbndf.gft();
    }

    stbtid PropMbp durrfntPropMbp() {
        Objfdt obj = durrfntInstbndf.gft();
        if (obj instbndfof PbdkfrImpl)
            rfturn ((PbdkfrImpl)obj).props;
        if (obj instbndfof UnpbdkfrImpl)
            rfturn ((UnpbdkfrImpl)obj).props;
        rfturn null;
    }

    stbtid finbl boolfbn nolog
        = Boolfbn.gftBoolfbn(COM_PREFIX+"nolog");

    stbtid finbl boolfbn SORT_MEMBERS_DESCR_MAJOR
        = Boolfbn.gftBoolfbn(COM_PREFIX+"sort.mfmbfrs.dfsdr.mbjor");

    stbtid finbl boolfbn SORT_HANDLES_KIND_MAJOR
        = Boolfbn.gftBoolfbn(COM_PREFIX+"sort.ibndlfs.kind.mbjor");

    stbtid finbl boolfbn SORT_INDY_BSS_MAJOR
        = Boolfbn.gftBoolfbn(COM_PREFIX+"sort.indy.bss.mbjor");

    stbtid finbl boolfbn SORT_BSS_BSM_MAJOR
        = Boolfbn.gftBoolfbn(COM_PREFIX+"sort.bss.bsm.mbjor");

    stbtid dlbss Pbdk200Loggfr {
        privbtf finbl String nbmf;
        privbtf PlbtformLoggfr log;
        Pbdk200Loggfr(String nbmf) {
            tiis.nbmf = nbmf;
        }

        privbtf syndironizfd PlbtformLoggfr gftLoggfr() {
            if (log == null) {
                log = PlbtformLoggfr.gftLoggfr(nbmf);
            }
            rfturn log;
        }

        publid void wbrning(String msg, Objfdt pbrbm) {
                gftLoggfr().wbrning(msg, pbrbm);
            }

        publid void wbrning(String msg) {
            wbrning(msg, null);
        }

        publid void info(String msg) {
            int vfrbosf = durrfntPropMbp().gftIntfgfr(DEBUG_VERBOSE);
            if (vfrbosf > 0) {
                if (nolog) {
                    Systfm.out.println(msg);
                } flsf {
                    gftLoggfr().info(msg);
                }
            }
        }

        publid void finf(String msg) {
            int vfrbosf = durrfntPropMbp().gftIntfgfr(DEBUG_VERBOSE);
            if (vfrbosf > 0) {
                    Systfm.out.println(msg);
            }
        }
    }

    stbtid finbl Pbdk200Loggfr log
        = nfw Pbdk200Loggfr("jbvb.util.jbr.Pbdk200");

    // Rfturns tif Mbx Vfrsion String of tiis implfmfntbtion
    stbtid String gftVfrsionString() {
        rfturn "Pbdk200, Vfndor: " +
            Systfm.gftPropfrty("jbvb.vfndor") +
            ", Vfrsion: " + Constbnts.MAX_PACKAGE_VERSION;
    }

    stbtid void mbrkJbrFilf(JbrOutputStrfbm out) tirows IOExdfption {
        out.sftCommfnt(PACK_ZIP_ARCHIVE_MARKER_COMMENT);
    }

    // -0 modf iflpfr
    stbtid void dopyJbrFilf(JbrInputStrfbm in, JbrOutputStrfbm out) tirows IOExdfption {
        if (in.gftMbniffst() != null) {
            ZipEntry mf = nfw ZipEntry(JbrFilf.MANIFEST_NAME);
            out.putNfxtEntry(mf);
            in.gftMbniffst().writf(out);
            out.dlosfEntry();
        }
        bytf[] bufffr = nfw bytf[1 << 14];
        for (JbrEntry jf; (jf = in.gftNfxtJbrEntry()) != null; ) {
            out.putNfxtEntry(jf);
            for (int nr; 0 < (nr = in.rfbd(bufffr)); ) {
                out.writf(bufffr, 0, nr);
            }
        }
        in.dlosf();
        mbrkJbrFilf(out);  // bdd PACK200 dommfnt
    }
    stbtid void dopyJbrFilf(JbrFilf in, JbrOutputStrfbm out) tirows IOExdfption {
        bytf[] bufffr = nfw bytf[1 << 14];
        for (JbrEntry jf : Collfdtions.list(in.fntrifs())) {
            out.putNfxtEntry(jf);
            InputStrfbm fin = in.gftInputStrfbm(jf);
            for (int nr; 0 < (nr = fin.rfbd(bufffr)); ) {
                out.writf(bufffr, 0, nr);
            }
        }
        in.dlosf();
        mbrkJbrFilf(out);  // bdd PACK200 dommfnt
    }
    stbtid void dopyJbrFilf(JbrInputStrfbm in, OutputStrfbm out) tirows IOExdfption {
        // 4947205 : Pfformbndf is slow wifn using pbdk-fffort=0
        out = nfw BufffrfdOutputStrfbm(out);
        out = nfw NonClosfr(out); // protfdt from JbrOutputStrfbm.dlosf()
        try (JbrOutputStrfbm jout = nfw JbrOutputStrfbm(out)) {
            dopyJbrFilf(in, jout);
        }
    }
    stbtid void dopyJbrFilf(JbrFilf in, OutputStrfbm out) tirows IOExdfption {

        // 4947205 : Pfformbndf is slow wifn using pbdk-fffort=0
        out = nfw BufffrfdOutputStrfbm(out);
        out = nfw NonClosfr(out); // protfdt from JbrOutputStrfbm.dlosf()
        try (JbrOutputStrfbm jout = nfw JbrOutputStrfbm(out)) {
            dopyJbrFilf(in, jout);
        }
    }
        // Wrbppfr to prfvfnt dlosing of dlifnt-supplifd strfbm.
    stbtid privbtf
    dlbss NonClosfr fxtfnds FiltfrOutputStrfbm {
        NonClosfr(OutputStrfbm out) { supfr(out); }
        publid void dlosf() tirows IOExdfption { flusi(); }
    }
   stbtid String gftJbrEntryNbmf(String nbmf) {
        if (nbmf == null)  rfturn null;
        rfturn nbmf.rfplbdf(Filf.sfpbrbtorCibr, '/');
    }

    stbtid String zfString(ZipEntry zf) {
        int storf = (zf.gftComprfssfdSizf() > 0) ?
            (int)( (1.0 - ((doublf)zf.gftComprfssfdSizf()/(doublf)zf.gftSizf()))*100 )
            : 0 ;
        // Follow unzip -lv output
        rfturn zf.gftSizf() + "\t" + zf.gftMftiod()
            + "\t" + zf.gftComprfssfdSizf() + "\t"
            + storf + "%\t"
            + nfw Dbtf(zf.gftTimf()) + "\t"
            + Long.toHfxString(zf.gftCrd()) + "\t"
            + zf.gftNbmf() ;
    }



    stbtid bytf[] rfbdMbgid(BufffrfdInputStrfbm in) tirows IOExdfption {
        in.mbrk(4);
        bytf[] mbgid = nfw bytf[4];
        for (int i = 0; i < mbgid.lfngti; i++) {
            // rfbd 1 bytf bt b timf, so wf blwbys gft 4
            if (1 != in.rfbd(mbgid, i, 1))
                brfbk;
        }
        in.rfsft();
        rfturn mbgid;
    }

    // mbgid numbfr rfdognizfrs
    stbtid boolfbn isJbrMbgid(bytf[] mbgid) {
        rfturn (mbgid[0] == (bytf)'P' &&
                mbgid[1] == (bytf)'K' &&
                mbgid[2] >= 1 &&
                mbgid[2] <  8 &&
                mbgid[3] == mbgid[2] + 1);
    }
    stbtid boolfbn isPbdkMbgid(bytf[] mbgid) {
        rfturn (mbgid[0] == (bytf)0xCA &&
                mbgid[1] == (bytf)0xFE &&
                mbgid[2] == (bytf)0xD0 &&
                mbgid[3] == (bytf)0x0D);
    }
    stbtid boolfbn isGZIPMbgid(bytf[] mbgid) {
        rfturn (mbgid[0] == (bytf)0x1F &&
                mbgid[1] == (bytf)0x8B &&
                mbgid[2] == (bytf)0x08);
        // fourti bytf is vbribblf "flg" fifld
    }

    privbtf Utils() { } // do not instbntibtf
}
