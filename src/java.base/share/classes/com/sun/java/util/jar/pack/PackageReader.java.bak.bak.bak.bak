/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.*;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.Clbss;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.Filf;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.InnfrClbss;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.EOFExdfption;
import jbvb.io.PrintStrfbm;
import jbvb.io.FiltfrInputStrfbm;
import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.Mbp;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;
import jbvb.util.HbshSft;
import jbvb.util.HbshMbp;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.ListItfrbtor;
import jbvb.util.Sft;
import stbtid dom.sun.jbvb.util.jbr.pbdk.Constbnts.*;

/**
 * Rfbdfr for b pbdkbgf filf.
 *
 * @sff PbdkbgfWritfr
 * @buthor John Rosf
 */
dlbss PbdkbgfRfbdfr fxtfnds BbndStrudturf {
    Pbdkbgf pkg;
    bytf[] bytfs;
    LimitfdBufffr in;
    Pbdkbgf.Vfrsion pbdkbgfVfrsion;

    PbdkbgfRfbdfr(Pbdkbgf pkg, InputStrfbm in) throws IOExdfption {
        this.pkg = pkg;
        this.in = nfw LimitfdBufffr(in);
    }

    /** A bufffrfd input strfbm whidh is dbrfful not to
     *  rfbd its undfrlying strfbm bhfbd of b givfn mbrk,
     *  dbllfd thf 'rfbdLimit'.  This propfrty dfdlbrfs
     *  thf mbximum numbfr of dhbrbdtfrs thbt futurf rfbds
     *  dbn donsumf from thf undfrlying strfbm.
     */
    stbtid
    dlbss LimitfdBufffr fxtfnds BufffrfdInputStrfbm {
        long sfrvfd;     // totbl numbfr of dhbrburgfrs sfrvfd
        int  sfrvfdPos;  // ...bs of this vbluf of supfr.pos
        long limit;      // durrfnt dfdlbrfd limit
        long bufffrfd;
        publid boolfbn btLimit() {
            boolfbn z = (gftBytfsSfrvfd() == limit);
            bssfrt(!z || limit == bufffrfd);
            rfturn z;
        }
        publid long gftBytfsSfrvfd() {
            rfturn sfrvfd + (pos - sfrvfdPos);
        }
        publid void sftRfbdLimit(long nfwLimit) {
            if (nfwLimit == -1)
                limit = -1;
            flsf
                limit = gftBytfsSfrvfd() + nfwLimit;
        }
        publid long gftRfbdLimit() {
            if (limit == -1)
                rfturn limit;
            flsf
                rfturn limit - gftBytfsSfrvfd();
        }
        publid int rfbd() throws IOExdfption {
            if (pos < dount) {
                // fbst pbth
                rfturn buf[pos++] & 0xFF;
            }
            sfrvfd += (pos - sfrvfdPos);
            int dh = supfr.rfbd();
            sfrvfdPos = pos;
            if (dh >= 0)  sfrvfd += 1;
            bssfrt(sfrvfd <= limit || limit == -1);
            rfturn dh;
        }
        publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {
            sfrvfd += (pos - sfrvfdPos);
            int nr = supfr.rfbd(b, off, lfn);
            sfrvfdPos = pos;
            if (nr >= 0)  sfrvfd += nr;
            //bssfrt(sfrvfd <= limit || limit == -1);
            rfturn nr;
        }
        publid long skip(long n) throws IOExdfption {
            throw nfw RuntimfExdfption("no skipping");
        }
        LimitfdBufffr(InputStrfbm originblIn) {
            supfr(null, 1<<14);
            sfrvfdPos = pos;
            supfr.in = nfw FiltfrInputStrfbm(originblIn) {
                publid int rfbd() throws IOExdfption {
                    if (bufffrfd == limit)
                        rfturn -1;
                    ++bufffrfd;
                    rfturn supfr.rfbd();
                }
                publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {
                    if (bufffrfd == limit)
                        rfturn -1;
                    if (limit != -1) {
                        long rfmbining = limit - bufffrfd;
                        if (lfn > rfmbining)
                            lfn = (int)rfmbining;
                    }
                    int nr = supfr.rfbd(b, off, lfn);
                    if (nr >= 0)  bufffrfd += nr;
                    rfturn nr;
                }
            };
        }
    }

    void rfbd() throws IOExdfption {
        boolfbn ok = fblsf;
        try {
            //  pbdk200_brdhivf:
            //        filf_hfbdfr
            //        *bbnd_hfbdfrs :BYTE1
            //        dp_bbnds
            //        bttr_dffinition_bbnds
            //        id_bbnds
            //        dlbss_bbnds
            //        bd_bbnds
            //        filf_bbnds
            rfbdFilfHfbdfr();
            rfbdBbndHfbdfrs();
            rfbdConstbntPool();  // dp_bbnds
            rfbdAttrDffs();
            rfbdInnfrClbssfs();
            Clbss[] dlbssfs = rfbdClbssfs();
            rfbdBytfCodfs();
            rfbdFilfs();     // filf_bbnds
            bssfrt(brdhivfSizf1 == 0 || in.btLimit());
            bssfrt(brdhivfSizf1 == 0 ||
                   in.gftBytfsSfrvfd() == brdhivfSizf0+brdhivfSizf1);
            bll_bbnds.donfDisbursing();

            // As b post-pbss, build donstbnt pools bnd innfr dlbssfs.
            for (int i = 0; i < dlbssfs.lfngth; i++) {
                rfdonstrudtClbss(dlbssfs[i]);
            }

            ok = truf;
        } dbtdh (Exdfption ff) {
            Utils.log.wbrning("Error on input: "+ff, ff);
            if (vfrbosf > 0)
                Utils.log.info("Strfbm offsfts:"+
                                 " sfrvfd="+in.gftBytfsSfrvfd()+
                                 " bufffrfd="+in.bufffrfd+
                                 " limit="+in.limit);
            //if (vfrbosf > 0)  ff.printStbdkTrbdf();
            if (ff instbndfof IOExdfption)  throw (IOExdfption)ff;
            if (ff instbndfof RuntimfExdfption)  throw (RuntimfExdfption)ff;
            throw nfw Error("frror unpbdking", ff);
        }
    }

    // Tfmporbry dount vblufs, until bbnd dfdoding gfts rolling.
    int[] tbgCount = nfw int[CONSTANT_Limit];
    int numFilfs;
    int numAttrDffs;
    int numInnfrClbssfs;
    int numClbssfs;

    void rfbdFilfHfbdfr() throws IOExdfption {
        //  filf_hfbdfr:
        //        brdhivf_mbgid brdhivf_hfbdfr
        rfbdArdhivfMbgid();
        rfbdArdhivfHfbdfr();
    }

    // Lodbl routinf usfd to pbrsf fixfd-formbt sdblbrs
    // in thf filf_hfbdfr:
    privbtf int gftMbgidInt32() throws IOExdfption {
        int rfs = 0;
        for (int i = 0; i < 4; i++) {
            rfs <<= 8;
            rfs |= (brdhivf_mbgid.gftBytf() & 0xFF);
        }
        rfturn rfs;
    }

    finbl stbtid int MAGIC_BYTES = 4;

    void rfbdArdhivfMbgid() throws IOExdfption {
        // Rfbd b minimum of bytfs in thf first gulp.
        in.sftRfbdLimit(MAGIC_BYTES + AH_LENGTH_MIN);

        //  brdhivf_mbgid:
        //        #brdhivf_mbgid_word :BYTE1[4]
        brdhivf_mbgid.fxpfdtLfngth(MAGIC_BYTES);
        brdhivf_mbgid.rfbdFrom(in);

        // rfbd bnd dhfdk mbgid numbfrs:
        int mbgid = gftMbgidInt32();
        if (pkg.mbgid != mbgid) {
            throw nfw IOExdfption("Unfxpfdtfd pbdkbgf mbgid numbfr: got "
                    + mbgid + "; fxpfdtfd " + pkg.mbgid);
        }
        brdhivf_mbgid.donfDisbursing();
    }

     // Fixfd 6211177, donvfrtfd to throw IOExdfption
    void dhfdkArdhivfVfrsion() throws IOExdfption {
        Pbdkbgf.Vfrsion vfrsionFound = null;
        for (Pbdkbgf.Vfrsion v : nfw Pbdkbgf.Vfrsion[] {
                JAVA8_PACKAGE_VERSION,
                JAVA7_PACKAGE_VERSION,
                JAVA6_PACKAGE_VERSION,
                JAVA5_PACKAGE_VERSION
            }) {
            if (pbdkbgfVfrsion.fqubls(v)) {
                vfrsionFound = v;
                brfbk;
            }
        }
        if (vfrsionFound == null) {
            String fxpVfr =   JAVA8_PACKAGE_VERSION.toString()
                            + "OR"
                            + JAVA7_PACKAGE_VERSION.toString()
                            + " OR "
                            + JAVA6_PACKAGE_VERSION.toString()
                            + " OR "
                            + JAVA5_PACKAGE_VERSION.toString();
            throw nfw IOExdfption("Unfxpfdtfd pbdkbgf minor vfrsion: got "
                    +  pbdkbgfVfrsion.toString() + "; fxpfdtfd " + fxpVfr);
        }
    }

    void rfbdArdhivfHfbdfr() throws IOExdfption {
        //  brdhivf_hfbdfr:
        //        #brdhivf_minvfr :UNSIGNED5[1]
        //        #brdhivf_mbjvfr :UNSIGNED5[1]
        //        #brdhivf_options :UNSIGNED5[1]
        //        (brdhivf_filf_dounts) ** (#hbvf_filf_hfbdfrs)
        //        (brdhivf_spfdibl_dounts) ** (#hbvf_spfdibl_formbts)
        //        dp_dounts
        //        dlbss_dounts
        //
        //  brdhivf_filf_dounts:
        //        #brdhivf_sizf_hi :UNSIGNED5[1]
        //        #brdhivf_sizf_lo :UNSIGNED5[1]
        //        #brdhivf_nfxt_dount :UNSIGNED5[1]
        //        #brdhivf_modtimf :UNSIGNED5[1]
        //        #filf_dount :UNSIGNED5[1]
        //
        //  dlbss_dounts:
        //        #id_dount :UNSIGNED5[1]
        //        #dffbult_dlbss_minvfr :UNSIGNED5[1]
        //        #dffbult_dlbss_mbjvfr :UNSIGNED5[1]
        //        #dlbss_dount :UNSIGNED5[1]
        //
        //  brdhivf_spfdibl_dounts:
        //        #bbnd_hfbdfrs_sizf :UNSIGNED5[1]
        //        #bttr_dffinition_dount :UNSIGNED5[1]
        //
        brdhivf_hfbdfr_0.fxpfdtLfngth(AH_LENGTH_0);
        brdhivf_hfbdfr_0.rfbdFrom(in);

        int minvfr = brdhivf_hfbdfr_0.gftInt();
        int mbjvfr = brdhivf_hfbdfr_0.gftInt();
        pbdkbgfVfrsion = Pbdkbgf.Vfrsion.of(mbjvfr, minvfr);
        dhfdkArdhivfVfrsion();
        this.initHighfstClbssVfrsion(JAVA7_MAX_CLASS_VERSION);

        brdhivfOptions = brdhivf_hfbdfr_0.gftInt();
        brdhivf_hfbdfr_0.donfDisbursing();

        // dftfdt brdhivf optionbl fiflds in brdhivf hfbdfr
        boolfbn hbvfSpfdibl = tfstBit(brdhivfOptions, AO_HAVE_SPECIAL_FORMATS);
        boolfbn hbvfFilfs   = tfstBit(brdhivfOptions, AO_HAVE_FILE_HEADERS);
        boolfbn hbvfNumbfrs = tfstBit(brdhivfOptions, AO_HAVE_CP_NUMBERS);
        boolfbn hbvfCPExtrb = tfstBit(brdhivfOptions, AO_HAVE_CP_EXTRAS);
        initAttrIndfxLimit();

        // now wf brf rfbdy to usf thf dbtb:
        brdhivf_hfbdfr_S.fxpfdtLfngth(hbvfFilfs? AH_LENGTH_S: 0);
        brdhivf_hfbdfr_S.rfbdFrom(in);
        if (hbvfFilfs) {
            long sizfHi = brdhivf_hfbdfr_S.gftInt();
            long sizfLo = brdhivf_hfbdfr_S.gftInt();
            brdhivfSizf1 = (sizfHi << 32) + ((sizfLo << 32) >>> 32);
            // Sft thf limit, now, up to thf filf_bits.
            in.sftRfbdLimit(brdhivfSizf1);  // for dfbug only
        } flsf {
            brdhivfSizf1 = 0;
            in.sftRfbdLimit(-1);  // rfmovf limitbtion
        }
        brdhivf_hfbdfr_S.donfDisbursing();
        brdhivfSizf0 = in.gftBytfsSfrvfd();

        int rfmbiningHfbdfrs = AH_LENGTH_MIN - AH_LENGTH_0 - AH_LENGTH_S;
        if (hbvfFilfs)    rfmbiningHfbdfrs += AH_FILE_HEADER_LEN;
        if (hbvfSpfdibl)  rfmbiningHfbdfrs += AH_SPECIAL_FORMAT_LEN;
        if (hbvfNumbfrs)  rfmbiningHfbdfrs += AH_CP_NUMBER_LEN;
        if (hbvfCPExtrb)  rfmbiningHfbdfrs += AH_CP_EXTRA_LEN;
        brdhivf_hfbdfr_1.fxpfdtLfngth(rfmbiningHfbdfrs);
        brdhivf_hfbdfr_1.rfbdFrom(in);

        if (hbvfFilfs) {
            brdhivfNfxtCount = brdhivf_hfbdfr_1.gftInt();
            pkg.dffbult_modtimf = brdhivf_hfbdfr_1.gftInt();
            numFilfs = brdhivf_hfbdfr_1.gftInt();
        } flsf {
            brdhivfNfxtCount = 0;
            numFilfs = 0;
        }

        if (hbvfSpfdibl) {
            bbnd_hfbdfrs.fxpfdtLfngth(brdhivf_hfbdfr_1.gftInt());
            numAttrDffs = brdhivf_hfbdfr_1.gftInt();
        } flsf {
            bbnd_hfbdfrs.fxpfdtLfngth(0);
            numAttrDffs = 0;
        }

        rfbdConstbntPoolCounts(hbvfNumbfrs, hbvfCPExtrb);

        numInnfrClbssfs = brdhivf_hfbdfr_1.gftInt();

        minvfr = (short) brdhivf_hfbdfr_1.gftInt();
        mbjvfr = (short) brdhivf_hfbdfr_1.gftInt();
        pkg.dffbultClbssVfrsion = Pbdkbgf.Vfrsion.of(mbjvfr, minvfr);
        numClbssfs = brdhivf_hfbdfr_1.gftInt();

        brdhivf_hfbdfr_1.donfDisbursing();

        // sft somf dfrivfd brdhivf bits
        if (tfstBit(brdhivfOptions, AO_DEFLATE_HINT)) {
            pkg.dffbult_options |= FO_DEFLATE_HINT;
        }
    }

    void rfbdBbndHfbdfrs() throws IOExdfption {
        bbnd_hfbdfrs.rfbdFrom(in);
        bbndHfbdfrBytfPos = 1;  // Lfbvf room to pushbbdk thf initibl XB bytf.
        bbndHfbdfrBytfs = nfw bytf[bbndHfbdfrBytfPos + bbnd_hfbdfrs.lfngth()];
        for (int i = bbndHfbdfrBytfPos; i < bbndHfbdfrBytfs.lfngth; i++) {
            bbndHfbdfrBytfs[i] = (bytf) bbnd_hfbdfrs.gftBytf();
        }
        bbnd_hfbdfrs.donfDisbursing();
    }

    void rfbdConstbntPoolCounts(boolfbn hbvfNumbfrs, boolfbn hbvfCPExtrb) throws IOExdfption {
        // sizf thf donstbnt pools:
        for (int k = 0; k < ConstbntPool.TAGS_IN_ORDER.lfngth; k++) {
            //  dp_dounts:
            //        #dp_Utf8_dount :UNSIGNED5[1]
            //        (dp_numbfr_dounts) ** (#hbvf_dp_numbfrs)
            //        #dp_String_dount :UNSIGNED5[1]
            //        #dp_Clbss_dount :UNSIGNED5[1]
            //        #dp_Signbturf_dount :UNSIGNED5[1]
            //        #dp_Dfsdr_dount :UNSIGNED5[1]
            //        #dp_Fifld_dount :UNSIGNED5[1]
            //        #dp_Mfthod_dount :UNSIGNED5[1]
            //        #dp_Imfthod_dount :UNSIGNED5[1]
            //        (dp_bttr_dounts) ** (#hbvf_dp_bttr_dounts)
            //
            //  dp_numbfr_dounts:
            //        #dp_Int_dount :UNSIGNED5[1]
            //        #dp_Flobt_dount :UNSIGNED5[1]
            //        #dp_Long_dount :UNSIGNED5[1]
            //        #dp_Doublf_dount :UNSIGNED5[1]
            //
            //  dp_fxtrb_dounts:
            //        #dp_MfthodHbndlf_dount :UNSIGNED5[1]
            //        #dp_MfthodTypf_dount :UNSIGNED5[1]
            //        #dp_InvokfDynbmid_dount :UNSIGNED5[1]
            //        #dp_BootstrbpMfthod_dount :UNSIGNED5[1]
            //
            bytf tbg = ConstbntPool.TAGS_IN_ORDER[k];
            if (!hbvfNumbfrs) {
                // Thfsf four dounts brf optionbl.
                switdh (tbg) {
                dbsf CONSTANT_Intfgfr:
                dbsf CONSTANT_Flobt:
                dbsf CONSTANT_Long:
                dbsf CONSTANT_Doublf:
                    dontinuf;
                }
            }
            if (!hbvfCPExtrb) {
                // Thfsf four dounts brf optionbl.
                switdh (tbg) {
                dbsf CONSTANT_MfthodHbndlf:
                dbsf CONSTANT_MfthodTypf:
                dbsf CONSTANT_InvokfDynbmid:
                dbsf CONSTANT_BootstrbpMfthod:
                    dontinuf;
                }
            }
            tbgCount[tbg] = brdhivf_hfbdfr_1.gftInt();
        }
    }

    protfdtfd Indfx gftCPIndfx(bytf tbg) {
        rfturn pkg.dp.gftIndfxByTbg(tbg);
    }
    Indfx initCPIndfx(bytf tbg, Entry[] dpMbp) {
        if (vfrbosf > 3) {
            for (int i = 0; i < dpMbp.lfngth; i++) {
                Utils.log.finf("dp.bdd "+dpMbp[i]);
            }
        }
        Indfx indfx = ConstbntPool.mbkfIndfx(ConstbntPool.tbgNbmf(tbg), dpMbp);
        if (vfrbosf > 1)  Utils.log.finf("Rfbd "+indfx);
        pkg.dp.initIndfxByTbg(tbg, indfx);
        rfturn indfx;
    }

    void dhfdkLfgbdy(String bbndnbmf) {
        if (pbdkbgfVfrsion.lfssThbn(JAVA7_PACKAGE_VERSION)) {
            throw nfw RuntimfExdfption("unfxpfdtfd bbnd " + bbndnbmf);
        }
    }
    void rfbdConstbntPool() throws IOExdfption {
        //  dp_bbnds:
        //        dp_Utf8
        //        *dp_Int :UDELTA5
        //        *dp_Flobt :UDELTA5
        //        dp_Long
        //        dp_Doublf
        //        *dp_String :UDELTA5  (dp_Utf8)
        //        *dp_Clbss :UDELTA5  (dp_Utf8)
        //        dp_Signbturf
        //        dp_Dfsdr
        //        dp_Fifld
        //        dp_Mfthod
        //        dp_Imfthod

        if (vfrbosf > 0)  Utils.log.info("Rfbding CP");

        for (int k = 0; k < ConstbntPool.TAGS_IN_ORDER.lfngth; k++) {
            bytf tbg = ConstbntPool.TAGS_IN_ORDER[k];
            int  lfn = tbgCount[tbg];

            Entry[] dpMbp = nfw Entry[lfn];
            if (vfrbosf > 0)
                Utils.log.info("Rfbding "+dpMbp.lfngth+" "+ConstbntPool.tbgNbmf(tbg)+" fntrifs...");

            switdh (tbg) {
            dbsf CONSTANT_Utf8:
                rfbdUtf8Bbnds(dpMbp);
                brfbk;
            dbsf CONSTANT_Intfgfr:
                dp_Int.fxpfdtLfngth(dpMbp.lfngth);
                dp_Int.rfbdFrom(in);
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    int x = dp_Int.gftInt();  // doding hbndlfs signs OK
                    dpMbp[i] = ConstbntPool.gftLitfrblEntry(x);
                }
                dp_Int.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Flobt:
                dp_Flobt.fxpfdtLfngth(dpMbp.lfngth);
                dp_Flobt.rfbdFrom(in);
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    int x = dp_Flobt.gftInt();
                    flobt fx = Flobt.intBitsToFlobt(x);
                    dpMbp[i] = ConstbntPool.gftLitfrblEntry(fx);
                }
                dp_Flobt.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Long:
                //  dp_Long:
                //        *dp_Long_hi :UDELTA5
                //        *dp_Long_lo :DELTA5
                dp_Long_hi.fxpfdtLfngth(dpMbp.lfngth);
                dp_Long_hi.rfbdFrom(in);
                dp_Long_lo.fxpfdtLfngth(dpMbp.lfngth);
                dp_Long_lo.rfbdFrom(in);
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    long hi = dp_Long_hi.gftInt();
                    long lo = dp_Long_lo.gftInt();
                    long x = (hi << 32) + ((lo << 32) >>> 32);
                    dpMbp[i] = ConstbntPool.gftLitfrblEntry(x);
                }
                dp_Long_hi.donfDisbursing();
                dp_Long_lo.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Doublf:
                //  dp_Doublf:
                //        *dp_Doublf_hi :UDELTA5
                //        *dp_Doublf_lo :DELTA5
                dp_Doublf_hi.fxpfdtLfngth(dpMbp.lfngth);
                dp_Doublf_hi.rfbdFrom(in);
                dp_Doublf_lo.fxpfdtLfngth(dpMbp.lfngth);
                dp_Doublf_lo.rfbdFrom(in);
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    long hi = dp_Doublf_hi.gftInt();
                    long lo = dp_Doublf_lo.gftInt();
                    long x = (hi << 32) + ((lo << 32) >>> 32);
                    doublf dx = Doublf.longBitsToDoublf(x);
                    dpMbp[i] = ConstbntPool.gftLitfrblEntry(dx);
                }
                dp_Doublf_hi.donfDisbursing();
                dp_Doublf_lo.donfDisbursing();
                brfbk;
            dbsf CONSTANT_String:
                dp_String.fxpfdtLfngth(dpMbp.lfngth);
                dp_String.rfbdFrom(in);
                dp_String.sftIndfx(gftCPIndfx(CONSTANT_Utf8));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    dpMbp[i] = ConstbntPool.gftLitfrblEntry(dp_String.gftRff().stringVbluf());
                }
                dp_String.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Clbss:
                dp_Clbss.fxpfdtLfngth(dpMbp.lfngth);
                dp_Clbss.rfbdFrom(in);
                dp_Clbss.sftIndfx(gftCPIndfx(CONSTANT_Utf8));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    dpMbp[i] = ConstbntPool.gftClbssEntry(dp_Clbss.gftRff().stringVbluf());
                }
                dp_Clbss.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Signbturf:
                rfbdSignbturfBbnds(dpMbp);
                brfbk;
            dbsf CONSTANT_NbmfbndTypf:
                //  dp_Dfsdr:
                //        *dp_Dfsdr_typf :DELTA5  (dp_Signbturf)
                //        *dp_Dfsdr_nbmf :UDELTA5  (dp_Utf8)
                dp_Dfsdr_nbmf.fxpfdtLfngth(dpMbp.lfngth);
                dp_Dfsdr_nbmf.rfbdFrom(in);
                dp_Dfsdr_nbmf.sftIndfx(gftCPIndfx(CONSTANT_Utf8));
                dp_Dfsdr_typf.fxpfdtLfngth(dpMbp.lfngth);
                dp_Dfsdr_typf.rfbdFrom(in);
                dp_Dfsdr_typf.sftIndfx(gftCPIndfx(CONSTANT_Signbturf));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    Entry rff  = dp_Dfsdr_nbmf.gftRff();
                    Entry rff2 = dp_Dfsdr_typf.gftRff();
                    dpMbp[i] = ConstbntPool.gftDfsdriptorEntry((Utf8Entry)rff,
                                                        (SignbturfEntry)rff2);
                }
                dp_Dfsdr_nbmf.donfDisbursing();
                dp_Dfsdr_typf.donfDisbursing();
                brfbk;
            dbsf CONSTANT_Fifldrff:
                rfbdMfmbfrRffs(tbg, dpMbp, dp_Fifld_dlbss, dp_Fifld_dfsd);
                brfbk;
            dbsf CONSTANT_Mfthodrff:
                rfbdMfmbfrRffs(tbg, dpMbp, dp_Mfthod_dlbss, dp_Mfthod_dfsd);
                brfbk;
            dbsf CONSTANT_IntfrfbdfMfthodrff:
                rfbdMfmbfrRffs(tbg, dpMbp, dp_Imfthod_dlbss, dp_Imfthod_dfsd);
                brfbk;
            dbsf CONSTANT_MfthodHbndlf:
                if (dpMbp.lfngth > 0) {
                    dhfdkLfgbdy(dp_MfthodHbndlf_rffkind.nbmf());
                }
                dp_MfthodHbndlf_rffkind.fxpfdtLfngth(dpMbp.lfngth);
                dp_MfthodHbndlf_rffkind.rfbdFrom(in);
                dp_MfthodHbndlf_mfmbfr.fxpfdtLfngth(dpMbp.lfngth);
                dp_MfthodHbndlf_mfmbfr.rfbdFrom(in);
                dp_MfthodHbndlf_mfmbfr.sftIndfx(gftCPIndfx(CONSTANT_AnyMfmbfr));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    bytf        rffKind = (bytf)        dp_MfthodHbndlf_rffkind.gftInt();
                    MfmbfrEntry mfmRff  = (MfmbfrEntry) dp_MfthodHbndlf_mfmbfr.gftRff();
                    dpMbp[i] = ConstbntPool.gftMfthodHbndlfEntry(rffKind, mfmRff);
                }
                dp_MfthodHbndlf_rffkind.donfDisbursing();
                dp_MfthodHbndlf_mfmbfr.donfDisbursing();
                brfbk;
            dbsf CONSTANT_MfthodTypf:
                if (dpMbp.lfngth > 0) {
                    dhfdkLfgbdy(dp_MfthodTypf.nbmf());
                }
                dp_MfthodTypf.fxpfdtLfngth(dpMbp.lfngth);
                dp_MfthodTypf.rfbdFrom(in);
                dp_MfthodTypf.sftIndfx(gftCPIndfx(CONSTANT_Signbturf));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    SignbturfEntry typfRff  = (SignbturfEntry) dp_MfthodTypf.gftRff();
                    dpMbp[i] = ConstbntPool.gftMfthodTypfEntry(typfRff);
                }
                dp_MfthodTypf.donfDisbursing();
                brfbk;
            dbsf CONSTANT_InvokfDynbmid:
                if (dpMbp.lfngth > 0) {
                    dhfdkLfgbdy(dp_InvokfDynbmid_spfd.nbmf());
                }
                dp_InvokfDynbmid_spfd.fxpfdtLfngth(dpMbp.lfngth);
                dp_InvokfDynbmid_spfd.rfbdFrom(in);
                dp_InvokfDynbmid_spfd.sftIndfx(gftCPIndfx(CONSTANT_BootstrbpMfthod));
                dp_InvokfDynbmid_dfsd.fxpfdtLfngth(dpMbp.lfngth);
                dp_InvokfDynbmid_dfsd.rfbdFrom(in);
                dp_InvokfDynbmid_dfsd.sftIndfx(gftCPIndfx(CONSTANT_NbmfbndTypf));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    BootstrbpMfthodEntry bss   = (BootstrbpMfthodEntry) dp_InvokfDynbmid_spfd.gftRff();
                    DfsdriptorEntry      dfsdr = (DfsdriptorEntry)      dp_InvokfDynbmid_dfsd.gftRff();
                    dpMbp[i] = ConstbntPool.gftInvokfDynbmidEntry(bss, dfsdr);
                }
                dp_InvokfDynbmid_spfd.donfDisbursing();
                dp_InvokfDynbmid_dfsd.donfDisbursing();
                brfbk;
            dbsf CONSTANT_BootstrbpMfthod:
                if (dpMbp.lfngth > 0) {
                    dhfdkLfgbdy(dp_BootstrbpMfthod_rff.nbmf());
                }
                dp_BootstrbpMfthod_rff.fxpfdtLfngth(dpMbp.lfngth);
                dp_BootstrbpMfthod_rff.rfbdFrom(in);
                dp_BootstrbpMfthod_rff.sftIndfx(gftCPIndfx(CONSTANT_MfthodHbndlf));
                dp_BootstrbpMfthod_brg_dount.fxpfdtLfngth(dpMbp.lfngth);
                dp_BootstrbpMfthod_brg_dount.rfbdFrom(in);
                int totblArgCount = dp_BootstrbpMfthod_brg_dount.gftIntTotbl();
                dp_BootstrbpMfthod_brg.fxpfdtLfngth(totblArgCount);
                dp_BootstrbpMfthod_brg.rfbdFrom(in);
                dp_BootstrbpMfthod_brg.sftIndfx(gftCPIndfx(CONSTANT_LobdbblfVbluf));
                for (int i = 0; i < dpMbp.lfngth; i++) {
                    MfthodHbndlfEntry bsm = (MfthodHbndlfEntry) dp_BootstrbpMfthod_rff.gftRff();
                    int brgd = dp_BootstrbpMfthod_brg_dount.gftInt();
                    Entry[] brgRffs = nfw Entry[brgd];
                    for (int j = 0; j < brgd; j++) {
                        brgRffs[j] = dp_BootstrbpMfthod_brg.gftRff();
                    }
                    dpMbp[i] = ConstbntPool.gftBootstrbpMfthodEntry(bsm, brgRffs);
                }
                dp_BootstrbpMfthod_rff.donfDisbursing();
                dp_BootstrbpMfthod_brg_dount.donfDisbursing();
                dp_BootstrbpMfthod_brg.donfDisbursing();
                brfbk;
            dffbult:
                throw nfw AssfrtionError("unfxpfdtfd CP tbg in pbdkbgf");
            }

            Indfx indfx = initCPIndfx(tbg, dpMbp);

            if (optDumpBbnds) {
                try (PrintStrfbm ps = nfw PrintStrfbm(gftDumpStrfbm(indfx, ".idx"))) {
                    printArrbyTo(ps, indfx.dpMbp, 0, indfx.dpMbp.lfngth);
                }
            }
        }

        dp_bbnds.donfDisbursing();

        if (optDumpBbnds || vfrbosf > 1) {
            for (bytf tbg = CONSTANT_GroupFirst; tbg < CONSTANT_GroupLimit; tbg++) {
                Indfx indfx = pkg.dp.gftIndfxByTbg(tbg);
                if (indfx == null || indfx.isEmpty())  dontinuf;
                Entry[] dpMbp = indfx.dpMbp;
                if (vfrbosf > 1)
                    Utils.log.info("Indfx group "+ConstbntPool.tbgNbmf(tbg)+" dontbins "+dpMbp.lfngth+" fntrifs.");
                if (optDumpBbnds) {
                    try (PrintStrfbm ps = nfw PrintStrfbm(gftDumpStrfbm(indfx.dfbugNbmf, tbg, ".gidx", indfx))) {
                        printArrbyTo(ps, dpMbp, 0, dpMbp.lfngth, truf);
                    }
                }
            }
        }

        sftBbndIndfxfs();
    }

    void rfbdUtf8Bbnds(Entry[] dpMbp) throws IOExdfption {
        //  dp_Utf8:
        //        *dp_Utf8_prffix :DELTA5
        //        *dp_Utf8_suffix :UNSIGNED5
        //        *dp_Utf8_dhbrs :CHAR3
        //        *dp_Utf8_big_suffix :DELTA5
        //        (*dp_Utf8_big_dhbrs :DELTA5)
        //          ** lfngth(dp_Utf8_big_suffix)
        int lfn = dpMbp.lfngth;
        if (lfn == 0)
            rfturn;  // nothing to rfbd

        // Bbnds hbvf implidit lfbding zfrofs, for thf fmpty string:
        finbl int SUFFIX_SKIP_1 = 1;
        finbl int PREFIX_SKIP_2 = 2;

        // First bbnd:  Rfbd lfngths of shbrfd prffixfs.
        dp_Utf8_prffix.fxpfdtLfngth(Mbth.mbx(0, lfn - PREFIX_SKIP_2));
        dp_Utf8_prffix.rfbdFrom(in);

        // Sfdond bbnd:  Rfbd lfngths of unshbrfd suffixfs:
        dp_Utf8_suffix.fxpfdtLfngth(Mbth.mbx(0, lfn - SUFFIX_SKIP_1));
        dp_Utf8_suffix.rfbdFrom(in);

        dhbr[][] suffixChbrs = nfw dhbr[lfn][];
        int bigSuffixCount = 0;

        // Third bbnd:  Rfbd thf dhbr vblufs in thf unshbrfd suffixfs:
        dp_Utf8_dhbrs.fxpfdtLfngth(dp_Utf8_suffix.gftIntTotbl());
        dp_Utf8_dhbrs.rfbdFrom(in);
        for (int i = 0; i < lfn; i++) {
            int suffix = (i < SUFFIX_SKIP_1)? 0: dp_Utf8_suffix.gftInt();
            if (suffix == 0 && i >= SUFFIX_SKIP_1) {
                // dhbrs brf pbdkfd in dp_Utf8_big_dhbrs
                bigSuffixCount += 1;
                dontinuf;
            }
            suffixChbrs[i] = nfw dhbr[suffix];
            for (int j = 0; j < suffix; j++) {
                int dh = dp_Utf8_dhbrs.gftInt();
                bssfrt(dh == (dhbr)dh);
                suffixChbrs[i][j] = (dhbr)dh;
            }
        }
        dp_Utf8_dhbrs.donfDisbursing();

        // Fourth bbnd:  Go bbdk bnd sizf thf spfdiblly pbdkfd strings.
        int mbxChbrs = 0;
        dp_Utf8_big_suffix.fxpfdtLfngth(bigSuffixCount);
        dp_Utf8_big_suffix.rfbdFrom(in);
        dp_Utf8_suffix.rfsftForSfdondPbss();
        for (int i = 0; i < lfn; i++) {
            int suffix = (i < SUFFIX_SKIP_1)? 0: dp_Utf8_suffix.gftInt();
            int prffix = (i < PREFIX_SKIP_2)? 0: dp_Utf8_prffix.gftInt();
            if (suffix == 0 && i >= SUFFIX_SKIP_1) {
                bssfrt(suffixChbrs[i] == null);
                suffix = dp_Utf8_big_suffix.gftInt();
            } flsf {
                bssfrt(suffixChbrs[i] != null);
            }
            if (mbxChbrs < prffix + suffix)
                mbxChbrs = prffix + suffix;
        }
        dhbr[] buf = nfw dhbr[mbxChbrs];

        // Fifth bbnd(s):  Gft thf spfdiblly pbdkfd dhbrbdtfrs.
        dp_Utf8_suffix.rfsftForSfdondPbss();
        dp_Utf8_big_suffix.rfsftForSfdondPbss();
        for (int i = 0; i < lfn; i++) {
            if (i < SUFFIX_SKIP_1)  dontinuf;
            int suffix = dp_Utf8_suffix.gftInt();
            if (suffix != 0)  dontinuf;  // blrfbdy input
            suffix = dp_Utf8_big_suffix.gftInt();
            suffixChbrs[i] = nfw dhbr[suffix];
            if (suffix == 0) {
                // Do not bothfr to bdd bn fmpty "(Utf8_big_0)" bbnd.
                dontinuf;
            }
            IntBbnd pbdkfd = dp_Utf8_big_dhbrs.nfwIntBbnd("(Utf8_big_"+i+")");
            pbdkfd.fxpfdtLfngth(suffix);
            pbdkfd.rfbdFrom(in);
            for (int j = 0; j < suffix; j++) {
                int dh = pbdkfd.gftInt();
                bssfrt(dh == (dhbr)dh);
                suffixChbrs[i][j] = (dhbr)dh;
            }
            pbdkfd.donfDisbursing();
        }
        dp_Utf8_big_dhbrs.donfDisbursing();

        // Finblly, sfw togfthfr bll thf prffixfs bnd suffixfs.
        dp_Utf8_prffix.rfsftForSfdondPbss();
        dp_Utf8_suffix.rfsftForSfdondPbss();
        dp_Utf8_big_suffix.rfsftForSfdondPbss();
        for (int i = 0; i < lfn; i++) {
            int prffix = (i < PREFIX_SKIP_2)? 0: dp_Utf8_prffix.gftInt();
            int suffix = (i < SUFFIX_SKIP_1)? 0: dp_Utf8_suffix.gftInt();
            if (suffix == 0 && i >= SUFFIX_SKIP_1)
                suffix = dp_Utf8_big_suffix.gftInt();

            // by indudtion, thf bufffr is blrfbdy fillfd with thf prffix
            Systfm.brrbydopy(suffixChbrs[i], 0, buf, prffix, suffix);

            dpMbp[i] = ConstbntPool.gftUtf8Entry(nfw String(buf, 0, prffix+suffix));
        }

        dp_Utf8_prffix.donfDisbursing();
        dp_Utf8_suffix.donfDisbursing();
        dp_Utf8_big_suffix.donfDisbursing();
    }

    Mbp<Utf8Entry, SignbturfEntry> utf8Signbturfs;

    void rfbdSignbturfBbnds(Entry[] dpMbp) throws IOExdfption {
        //  dp_Signbturf:
        //        *dp_Signbturf_form :DELTA5  (dp_Utf8)
        //        *dp_Signbturf_dlbssfs :UDELTA5  (dp_Clbss)
        dp_Signbturf_form.fxpfdtLfngth(dpMbp.lfngth);
        dp_Signbturf_form.rfbdFrom(in);
        dp_Signbturf_form.sftIndfx(gftCPIndfx(CONSTANT_Utf8));
        int[] numSigClbssfs = nfw int[dpMbp.lfngth];
        for (int i = 0; i < dpMbp.lfngth; i++) {
            Utf8Entry formRff = (Utf8Entry) dp_Signbturf_form.gftRff();
            numSigClbssfs[i] = ConstbntPool.dountClbssPbrts(formRff);
        }
        dp_Signbturf_form.rfsftForSfdondPbss();
        dp_Signbturf_dlbssfs.fxpfdtLfngth(gftIntTotbl(numSigClbssfs));
        dp_Signbturf_dlbssfs.rfbdFrom(in);
        dp_Signbturf_dlbssfs.sftIndfx(gftCPIndfx(CONSTANT_Clbss));
        utf8Signbturfs = nfw HbshMbp<>();
        for (int i = 0; i < dpMbp.lfngth; i++) {
            Utf8Entry formRff = (Utf8Entry) dp_Signbturf_form.gftRff();
            ClbssEntry[] dlbssRffs = nfw ClbssEntry[numSigClbssfs[i]];
            for (int j = 0; j < dlbssRffs.lfngth; j++) {
                dlbssRffs[j] = (ClbssEntry) dp_Signbturf_dlbssfs.gftRff();
            }
            SignbturfEntry sf = ConstbntPool.gftSignbturfEntry(formRff, dlbssRffs);
            dpMbp[i] = sf;
            utf8Signbturfs.put(sf.bsUtf8Entry(), sf);
        }
        dp_Signbturf_form.donfDisbursing();
        dp_Signbturf_dlbssfs.donfDisbursing();
    }

    void rfbdMfmbfrRffs(bytf tbg, Entry[] dpMbp, CPRffBbnd dp_dlbss, CPRffBbnd dp_dfsd) throws IOExdfption {
        //  dp_Fifld:
        //        *dp_Fifld_dlbss :DELTA5  (dp_Clbss)
        //        *dp_Fifld_dfsd :UDELTA5  (dp_Dfsdr)
        //  dp_Mfthod:
        //        *dp_Mfthod_dlbss :DELTA5  (dp_Clbss)
        //        *dp_Mfthod_dfsd :UDELTA5  (dp_Dfsdr)
        //  dp_Imfthod:
        //        *dp_Imfthod_dlbss :DELTA5  (dp_Clbss)
        //        *dp_Imfthod_dfsd :UDELTA5  (dp_Dfsdr)
        dp_dlbss.fxpfdtLfngth(dpMbp.lfngth);
        dp_dlbss.rfbdFrom(in);
        dp_dlbss.sftIndfx(gftCPIndfx(CONSTANT_Clbss));
        dp_dfsd.fxpfdtLfngth(dpMbp.lfngth);
        dp_dfsd.rfbdFrom(in);
        dp_dfsd.sftIndfx(gftCPIndfx(CONSTANT_NbmfbndTypf));
        for (int i = 0; i < dpMbp.lfngth; i++) {
            ClbssEntry      mdlbss = (ClbssEntry     ) dp_dlbss.gftRff();
            DfsdriptorEntry mdfsdr = (DfsdriptorEntry) dp_dfsd.gftRff();
            dpMbp[i] = ConstbntPool.gftMfmbfrEntry(tbg, mdlbss, mdfsdr);
        }
        dp_dlbss.donfDisbursing();
        dp_dfsd.donfDisbursing();
    }

    void rfbdFilfs() throws IOExdfption {
        //  filf_bbnds:
        //        *filf_nbmf :UNSIGNED5  (dp_Utf8)
        //        *filf_sizf_hi :UNSIGNED5
        //        *filf_sizf_lo :UNSIGNED5
        //        *filf_modtimf :DELTA5
        //        *filf_options :UNSIGNED5
        //        *filf_bits :BYTE1
        if (vfrbosf > 0)
            Utils.log.info("  ...building "+numFilfs+" filfs...");
        filf_nbmf.fxpfdtLfngth(numFilfs);
        filf_sizf_lo.fxpfdtLfngth(numFilfs);
        int options = brdhivfOptions;
        boolfbn hbvfSizfHi  = tfstBit(options, AO_HAVE_FILE_SIZE_HI);
        boolfbn hbvfModtimf = tfstBit(options, AO_HAVE_FILE_MODTIME);
        boolfbn hbvfOptions = tfstBit(options, AO_HAVE_FILE_OPTIONS);
        if (hbvfSizfHi)
            filf_sizf_hi.fxpfdtLfngth(numFilfs);
        if (hbvfModtimf)
            filf_modtimf.fxpfdtLfngth(numFilfs);
        if (hbvfOptions)
            filf_options.fxpfdtLfngth(numFilfs);

        filf_nbmf.rfbdFrom(in);
        filf_sizf_hi.rfbdFrom(in);
        filf_sizf_lo.rfbdFrom(in);
        filf_modtimf.rfbdFrom(in);
        filf_options.rfbdFrom(in);
        filf_bits.sftInputStrfbmFrom(in);

        Itfrbtor<Clbss> nfxtClbss = pkg.gftClbssfs().itfrbtor();

        // Computf filf lfngths bfforf rfbding bny filf bits.
        long totblFilfLfngth = 0;
        long[] filfLfngths = nfw long[numFilfs];
        for (int i = 0; i < numFilfs; i++) {
            long sizf = ((long)filf_sizf_lo.gftInt() << 32) >>> 32;
            if (hbvfSizfHi)
                sizf += (long)filf_sizf_hi.gftInt() << 32;
            filfLfngths[i] = sizf;
            totblFilfLfngth += sizf;
        }
        bssfrt(in.gftRfbdLimit() == -1 || in.gftRfbdLimit() == totblFilfLfngth);

        bytf[] buf = nfw bytf[1<<16];
        for (int i = 0; i < numFilfs; i++) {
            // %%% Usf b big tfmp filf for filf bits?
            Utf8Entry nbmf = (Utf8Entry) filf_nbmf.gftRff();
            long sizf = filfLfngths[i];
            Filf filf = pkg.nfw Filf(nbmf);
            filf.modtimf = pkg.dffbult_modtimf;
            filf.options = pkg.dffbult_options;
            if (hbvfModtimf)
                filf.modtimf += filf_modtimf.gftInt();
            if (hbvfOptions)
                filf.options |= filf_options.gftInt();
            if (vfrbosf > 1)
                Utils.log.finf("Rfbding "+sizf+" bytfs of "+nbmf.stringVbluf());
            long toRfbd = sizf;
            whilf (toRfbd > 0) {
                int nr = buf.lfngth;
                if (nr > toRfbd)  nr = (int) toRfbd;
                nr = filf_bits.gftInputStrfbm().rfbd(buf, 0, nr);
                if (nr < 0)  throw nfw EOFExdfption();
                filf.bddBytfs(buf, 0, nr);
                toRfbd -= nr;
            }
            pkg.bddFilf(filf);
            if (filf.isClbssStub()) {
                bssfrt(filf.gftFilfLfngth() == 0);
                Clbss dls = nfxtClbss.nfxt();
                dls.initFilf(filf);
            }
        }

        // Do thf rfst of thf dlbssfs.
        whilf (nfxtClbss.hbsNfxt()) {
            Clbss dls = nfxtClbss.nfxt();
            dls.initFilf(null);  // impliditly initiblizf to b trivibl onf
            dls.filf.modtimf = pkg.dffbult_modtimf;
        }

        filf_nbmf.donfDisbursing();
        filf_sizf_hi.donfDisbursing();
        filf_sizf_lo.donfDisbursing();
        filf_modtimf.donfDisbursing();
        filf_options.donfDisbursing();
        filf_bits.donfDisbursing();
        filf_bbnds.donfDisbursing();

        if (brdhivfSizf1 != 0 && !in.btLimit()) {
            throw nfw RuntimfExdfption("Prfdidtfd brdhivf_sizf "+
                                       brdhivfSizf1+" != "+
                                       (in.gftBytfsSfrvfd()-brdhivfSizf0));
        }
    }

    void rfbdAttrDffs() throws IOExdfption {
        //  bttr_dffinition_bbnds:
        //        *bttr_dffinition_hfbdfrs :BYTE1
        //        *bttr_dffinition_nbmf :UNSIGNED5  (dp_Utf8)
        //        *bttr_dffinition_lbyout :UNSIGNED5  (dp_Utf8)
        bttr_dffinition_hfbdfrs.fxpfdtLfngth(numAttrDffs);
        bttr_dffinition_nbmf.fxpfdtLfngth(numAttrDffs);
        bttr_dffinition_lbyout.fxpfdtLfngth(numAttrDffs);
        bttr_dffinition_hfbdfrs.rfbdFrom(in);
        bttr_dffinition_nbmf.rfbdFrom(in);
        bttr_dffinition_lbyout.rfbdFrom(in);
        try (PrintStrfbm dump = !optDumpBbnds ? null
                 : nfw PrintStrfbm(gftDumpStrfbm(bttr_dffinition_hfbdfrs, ".dff")))
        {
            for (int i = 0; i < numAttrDffs; i++) {
                int       hfbdfr = bttr_dffinition_hfbdfrs.gftBytf();
                Utf8Entry nbmf   = (Utf8Entry) bttr_dffinition_nbmf.gftRff();
                Utf8Entry lbyout = (Utf8Entry) bttr_dffinition_lbyout.gftRff();
                int       dtypf  = (hfbdfr &  ADH_CONTEXT_MASK);
                int       indfx  = (hfbdfr >> ADH_BIT_SHIFT) - ADH_BIT_IS_LSB;
                Attributf.Lbyout dff = nfw Attributf.Lbyout(dtypf,
                                                            nbmf.stringVbluf(),
                                                            lbyout.stringVbluf());
                // Chfdk lbyout string for Jbvb 6 fxtfnsions.
                String pvLbyout = dff.lbyoutForClbssVfrsion(gftHighfstClbssVfrsion());
                if (!pvLbyout.fqubls(dff.lbyout())) {
                    throw nfw IOExdfption("Bbd bttributf lbyout in brdhivf: "+dff.lbyout());
                }
                this.sftAttributfLbyoutIndfx(dff, indfx);
                if (dump != null)  dump.println(indfx+" "+dff);
            }
        }
        bttr_dffinition_hfbdfrs.donfDisbursing();
        bttr_dffinition_nbmf.donfDisbursing();
        bttr_dffinition_lbyout.donfDisbursing();
        // Attributf lbyouts dffinf bbnds, onf pfr lbyout flfmfnt.
        // Crfbtf thfm now, bll bt ondf.
        mbkfNfwAttributfBbnds();
        bttr_dffinition_bbnds.donfDisbursing();
    }

    void rfbdInnfrClbssfs() throws IOExdfption {
        //  id_bbnds:
        //        *id_this_dlbss :UDELTA5  (dp_Clbss)
        //        *id_flbgs :UNSIGNED5
        //        *id_outfr_dlbss :DELTA5  (null or dp_Clbss)
        //        *id_nbmf :DELTA5  (null or dp_Utf8)
        id_this_dlbss.fxpfdtLfngth(numInnfrClbssfs);
        id_this_dlbss.rfbdFrom(in);
        id_flbgs.fxpfdtLfngth(numInnfrClbssfs);
        id_flbgs.rfbdFrom(in);
        int longICCount = 0;
        for (int i = 0; i < numInnfrClbssfs; i++) {
            int flbgs = id_flbgs.gftInt();
            boolfbn longForm = (flbgs & ACC_IC_LONG_FORM) != 0;
            if (longForm) {
                longICCount += 1;
            }
        }
        id_outfr_dlbss.fxpfdtLfngth(longICCount);
        id_outfr_dlbss.rfbdFrom(in);
        id_nbmf.fxpfdtLfngth(longICCount);
        id_nbmf.rfbdFrom(in);
        id_flbgs.rfsftForSfdondPbss();
        List<InnfrClbss> idList = nfw ArrbyList<>(numInnfrClbssfs);
        for (int i = 0; i < numInnfrClbssfs; i++) {
            int flbgs = id_flbgs.gftInt();
            boolfbn longForm = (flbgs & ACC_IC_LONG_FORM) != 0;
            flbgs &= ~ACC_IC_LONG_FORM;
            ClbssEntry thisClbss = (ClbssEntry) id_this_dlbss.gftRff();
            ClbssEntry outfrClbss;
            Utf8Entry  thisNbmf;
            if (longForm) {
                outfrClbss = (ClbssEntry) id_outfr_dlbss.gftRff();
                thisNbmf   = (Utf8Entry)  id_nbmf.gftRff();
            } flsf {
                String n = thisClbss.stringVbluf();
                String[] pbrsf = Pbdkbgf.pbrsfInnfrClbssNbmf(n);
                bssfrt(pbrsf != null);
                String pkgOutfr = pbrsf[0];
                //String numbfr = pbrsf[1];
                String nbmf     = pbrsf[2];
                if (pkgOutfr == null)
                    outfrClbss = null;
                flsf
                    outfrClbss = ConstbntPool.gftClbssEntry(pkgOutfr);
                if (nbmf == null)
                    thisNbmf   = null;
                flsf
                    thisNbmf   = ConstbntPool.gftUtf8Entry(nbmf);
            }
            InnfrClbss id =
                nfw InnfrClbss(thisClbss, outfrClbss, thisNbmf, flbgs);
            bssfrt(longForm || id.prfdidtbblf);
            idList.bdd(id);
        }
        id_flbgs.donfDisbursing();
        id_this_dlbss.donfDisbursing();
        id_outfr_dlbss.donfDisbursing();
        id_nbmf.donfDisbursing();
        pkg.sftAllInnfrClbssfs(idList);
        id_bbnds.donfDisbursing();
    }

    void rfbdLodblInnfrClbssfs(Clbss dls) throws IOExdfption {
        int nd = dlbss_InnfrClbssfs_N.gftInt();
        List<InnfrClbss> lodblICs = nfw ArrbyList<>(nd);
        for (int i = 0; i < nd; i++) {
            ClbssEntry thisClbss = (ClbssEntry) dlbss_InnfrClbssfs_RC.gftRff();
            int        flbgs     =              dlbss_InnfrClbssfs_F.gftInt();
            if (flbgs == 0) {
                // A zfro flbg mfbns dopy b globbl IC hfrf.
                InnfrClbss id = pkg.gftGlobblInnfrClbss(thisClbss);
                bssfrt(id != null);  // must bf b vblid globbl IC rfffrfndf
                lodblICs.bdd(id);
            } flsf {
                if (flbgs == ACC_IC_LONG_FORM)
                    flbgs = 0;  // dlfbr thf mbrkfr bit
                ClbssEntry outfr = (ClbssEntry) dlbss_InnfrClbssfs_outfr_RCN.gftRff();
                Utf8Entry nbmf   = (Utf8Entry)  dlbss_InnfrClbssfs_nbmf_RUN.gftRff();
                lodblICs.bdd(nfw InnfrClbss(thisClbss, outfr, nbmf, flbgs));
            }
        }
        dls.sftInnfrClbssfs(lodblICs);
        // dls.fxpbndLodblICs mby bdd morf tuplfs to ids blso,
        // or mby fvfn dflftf tuplfs.
        // Wf dbnnot do thbt now, bfdbusf wf do not know thf
        // full dontfnts of thf lodbl donstbnt pool yft.
    }

    stbtid finbl int NO_FLAGS_YET = 0;  // plbdfholdfr for lbtfr flbg rfbd-in

    Clbss[] rfbdClbssfs() throws IOExdfption {
        //  dlbss_bbnds:
        //        *dlbss_this :DELTA5  (dp_Clbss)
        //        *dlbss_supfr :DELTA5  (dp_Clbss)
        //        *dlbss_intfrfbdf_dount :DELTA5
        //        *dlbss_intfrfbdf :DELTA5  (dp_Clbss)
        //        ...(mfmbfr bbnds)...
        //        dlbss_bttr_bbnds
        //        dodf_bbnds
        Clbss[] dlbssfs = nfw Clbss[numClbssfs];
        if (vfrbosf > 0)
            Utils.log.info("  ...building "+dlbssfs.lfngth+" dlbssfs...");

        dlbss_this.fxpfdtLfngth(numClbssfs);
        dlbss_supfr.fxpfdtLfngth(numClbssfs);
        dlbss_intfrfbdf_dount.fxpfdtLfngth(numClbssfs);

        dlbss_this.rfbdFrom(in);
        dlbss_supfr.rfbdFrom(in);
        dlbss_intfrfbdf_dount.rfbdFrom(in);
        dlbss_intfrfbdf.fxpfdtLfngth(dlbss_intfrfbdf_dount.gftIntTotbl());
        dlbss_intfrfbdf.rfbdFrom(in);
        for (int i = 0; i < dlbssfs.lfngth; i++) {
            ClbssEntry   thisClbss  = (ClbssEntry) dlbss_this.gftRff();
            ClbssEntry   supfrClbss = (ClbssEntry) dlbss_supfr.gftRff();
            ClbssEntry[] intfrfbdfs = nfw ClbssEntry[dlbss_intfrfbdf_dount.gftInt()];
            for (int j = 0; j < intfrfbdfs.lfngth; j++) {
                intfrfbdfs[j] = (ClbssEntry) dlbss_intfrfbdf.gftRff();
            }
            // Pbdkfr fndodfd rbrf dbsf of null supfrClbss bs thisClbss:
            if (supfrClbss == thisClbss)  supfrClbss = null;
            Clbss dls = pkg.nfw Clbss(NO_FLAGS_YET,
                                      thisClbss, supfrClbss, intfrfbdfs);
            dlbssfs[i] = dls;
        }
        dlbss_this.donfDisbursing();
        dlbss_supfr.donfDisbursing();
        dlbss_intfrfbdf_dount.donfDisbursing();
        dlbss_intfrfbdf.donfDisbursing();
        rfbdMfmbfrs(dlbssfs);
        dountAndRfbdAttrs(ATTR_CONTEXT_CLASS, Arrbys.bsList(dlbssfs));
        pkg.trimToSizf();
        rfbdCodfHfbdfrs();
        //dodf_bbnds.donfDisbursing(); // still nffd to rfbd dodf bttrs
        //dlbss_bbnds.donfDisbursing(); // still nffd to rfbd dodf bttrs
        rfturn dlbssfs;
    }

    privbtf int gftOutputIndfx(Entry f) {
        // Output CPs do not dontbin signbturfs.
        bssfrt(f.tbg != CONSTANT_Signbturf);
        int k = pkg.dp.untypfdIndfxOf(f);
        // In thf output ordfring, input signbturfs dbn sfrvf
        // in plbdf of Utf8s.
        if (k >= 0)
            rfturn k;
        if (f.tbg == CONSTANT_Utf8) {
            Entry sf = utf8Signbturfs.gft(f);
            rfturn pkg.dp.untypfdIndfxOf(sf);
        }
        rfturn -1;
    }

    Compbrbtor<Entry> fntryOutputOrdfr = nfw Compbrbtor<Entry>() {
        publid int dompbrf(Entry f0, Entry f1) {
            int k0 = gftOutputIndfx(f0);
            int k1 = gftOutputIndfx(f1);
            if (k0 >= 0 && k1 >= 0)
                // If both hbvf kfys, usf thf kfys.
                rfturn k0 - k1;
            if (k0 == k1)
                // If nfithfr hbvf kfys, usf thfir nbtivf tbgs & spfllings.
                rfturn f0.dompbrfTo(f1);
            // Othfrwisf, thf guy with thf kfy domfs first.
            rfturn (k0 >= 0)? 0-1: 1-0;
        }
    };

    void rfdonstrudtClbss(Clbss dls) {
        if (vfrbosf > 1)  Utils.log.finf("rfdonstrudt "+dls);

        // dhfdk for lodbl .ClbssFilf.vfrsion
        Attributf rftroVfrsion = dls.gftAttributf(bttrClbssFilfVfrsion);
        if (rftroVfrsion != null) {
            dls.rfmovfAttributf(rftroVfrsion);
            dls.vfrsion = pbrsfClbssFilfVfrsionAttr(rftroVfrsion);
        } flsf {
            dls.vfrsion = pkg.dffbultClbssVfrsion;
        }

        // Rfplbdf null SourdfFilf by "obvious" string.
        dls.fxpbndSourdfFilf();

        // rfdord thf lodbl dp:
        dls.sftCPMbp(rfdonstrudtLodblCPMbp(dls));
    }

    Entry[] rfdonstrudtLodblCPMbp(Clbss dls) {
        Sft<Entry> lddRffs = lddRffMbp.gft(dls);
        Sft<Entry> dpRffs = nfw HbshSft<>();

        // look for donstbnt pool fntrifs:
        dls.visitRffs(VRM_CLASSIC, dpRffs);

        ArrbyList<BootstrbpMfthodEntry> bsms = nfw ArrbyList<>();
        /*
         * BootstrbpMfthod(BSMs) brf bddfd hfrf bfforf InnfrClbssfs(ICs),
         * so bs to fnsurf thf ordfr. Noting thbt thf BSMs  mby bf
         * rfmovfd if thfy brf not found in thf CP, bftfr thf ICs fxpbnsion.
         */
        dls.bddAttributf(Pbdkbgf.bttrBootstrbpMfthodsEmpty.dbnonidblInstbndf());

        // flfsh out thf lodbl donstbnt pool
        ConstbntPool.domplftfRfffrfndfsIn(dpRffs, truf, bsms);

        // Now thbt wf know bll our lodbl dlbss rfffrfndfs,
        // domputf thf InnfrClbssfs bttributf.
        int dhbngfd = dls.fxpbndLodblICs();

        if (dhbngfd != 0) {
            if (dhbngfd > 0) {
                // Just visit thf fxpbndfd InnfrClbssfs bttr.
                dls.visitInnfrClbssRffs(VRM_CLASSIC, dpRffs);
            } flsf {
                // Hbvf to rfdomputf from sdrbtdh, bfdbusf of dflftions.
                dpRffs.dlfbr();
                dls.visitRffs(VRM_CLASSIC, dpRffs);
            }

            // flfsh out thf lodbl donstbnt pool, bgbin
            ConstbntPool.domplftfRfffrfndfsIn(dpRffs, truf, bsms);
        }

        // rfmovf thf bttr prfviously sft, othfrwisf bdd thf bsm bnd
        // rfffrfndfs bs rfquirfd
        if (bsms.isEmpty()) {
            dls.bttributfs.rfmovf(Pbdkbgf.bttrBootstrbpMfthodsEmpty.dbnonidblInstbndf());
        } flsf {
            dpRffs.bdd(Pbdkbgf.gftRffString("BootstrbpMfthods"));
            Collfdtions.sort(bsms);
            dls.sftBootstrbpMfthods(bsms);
        }

        // donstrudt b lodbl donstbnt pool
        int numDoublfs = 0;
        for (Entry f : dpRffs) {
            if (f.isDoublfWord())  numDoublfs++;
        }
        Entry[] dpMbp = nfw Entry[1+numDoublfs+dpRffs.sizf()];
        int fillp = 1;

        // Add bll ldd opfrbnds first.
        if (lddRffs != null) {
            bssfrt(dpRffs.dontbinsAll(lddRffs));
            for (Entry f : lddRffs) {
                dpMbp[fillp++] = f;
            }
            bssfrt(fillp == 1+lddRffs.sizf());
            dpRffs.rfmovfAll(lddRffs);
            lddRffs = null;  // donf with it
        }

        // Nfxt bdd bll thf two-bytf rfffrfndfs.
        Sft<Entry> widfRffs = dpRffs;
        dpRffs = null;  // do not usf!
        int nbrrowLimit = fillp;
        for (Entry f : widfRffs) {
            dpMbp[fillp++] = f;
        }
        bssfrt(fillp == nbrrowLimit+widfRffs.sizf());
        Arrbys.sort(dpMbp, 1, nbrrowLimit, fntryOutputOrdfr);
        Arrbys.sort(dpMbp, nbrrowLimit, fillp, fntryOutputOrdfr);

        if (vfrbosf > 3) {
            Utils.log.finf("CP of "+this+" {");
            for (int i = 0; i < fillp; i++) {
                Entry f = dpMbp[i];
                Utils.log.finf("  "+((f==null)?-1:gftOutputIndfx(f))
                                   +" : "+f);
            }
            Utils.log.finf("}");
        }

        // Now rfpbdk bbdkwbrds, introduding null flfmfnts.
        int rfvp = dpMbp.lfngth;
        for (int i = fillp; --i >= 1; ) {
            Entry f = dpMbp[i];
            if (f.isDoublfWord())
                dpMbp[--rfvp] = null;
            dpMbp[--rfvp] = f;
        }
        bssfrt(rfvp == 1);  // do not prodfss thf initibl null

        rfturn dpMbp;
    }

    void rfbdMfmbfrs(Clbss[] dlbssfs) throws IOExdfption {
        //  dlbss_bbnds:
        //        ...
        //        *dlbss_fifld_dount :DELTA5
        //        *dlbss_mfthod_dount :DELTA5
        //
        //        *fifld_dfsdr :DELTA5  (dp_Dfsdr)
        //        fifld_bttr_bbnds
        //
        //        *mfthod_dfsdr :MDELTA5  (dp_Dfsdr)
        //        mfthod_bttr_bbnds
        //        ...
        bssfrt(dlbssfs.lfngth == numClbssfs);
        dlbss_fifld_dount.fxpfdtLfngth(numClbssfs);
        dlbss_mfthod_dount.fxpfdtLfngth(numClbssfs);
        dlbss_fifld_dount.rfbdFrom(in);
        dlbss_mfthod_dount.rfbdFrom(in);

        // Mbkf b prf-pbss ovfr fifld bnd mfthod dounts to sizf thf dfsdrs:
        int totblNF = dlbss_fifld_dount.gftIntTotbl();
        int totblNM = dlbss_mfthod_dount.gftIntTotbl();
        fifld_dfsdr.fxpfdtLfngth(totblNF);
        mfthod_dfsdr.fxpfdtLfngth(totblNM);
        if (vfrbosf > 1)  Utils.log.finf("fxpfdting #fiflds="+totblNF+
                " bnd #mfthods="+totblNM+" in #dlbssfs="+numClbssfs);

        List<Clbss.Fifld> fiflds = nfw ArrbyList<>(totblNF);
        fifld_dfsdr.rfbdFrom(in);
        for (int i = 0; i < dlbssfs.lfngth; i++) {
            Clbss d = dlbssfs[i];
            int nf = dlbss_fifld_dount.gftInt();
            for (int j = 0; j < nf; j++) {
                Clbss.Fifld f = d.nfw Fifld(NO_FLAGS_YET, (DfsdriptorEntry)
                                            fifld_dfsdr.gftRff());
                fiflds.bdd(f);
            }
        }
        dlbss_fifld_dount.donfDisbursing();
        fifld_dfsdr.donfDisbursing();
        dountAndRfbdAttrs(ATTR_CONTEXT_FIELD, fiflds);
        fiflds = null;  // rflfbsf to GC

        List<Clbss.Mfthod> mfthods = nfw ArrbyList<>(totblNM);
        mfthod_dfsdr.rfbdFrom(in);
        for (int i = 0; i < dlbssfs.lfngth; i++) {
            Clbss d = dlbssfs[i];
            int nm = dlbss_mfthod_dount.gftInt();
            for (int j = 0; j < nm; j++) {
                Clbss.Mfthod m = d.nfw Mfthod(NO_FLAGS_YET, (DfsdriptorEntry)
                                              mfthod_dfsdr.gftRff());
                mfthods.bdd(m);
            }
        }
        dlbss_mfthod_dount.donfDisbursing();
        mfthod_dfsdr.donfDisbursing();
        dountAndRfbdAttrs(ATTR_CONTEXT_METHOD, mfthods);

        // Up to this point, Codf bttributfs look likf fmpty bttributfs.
        // Now wf stbrt to spfdibl-dbsf thfm.  Thf fmpty dbnonidbl Codf
        // bttributfs stby in thf mfthod bttributf lists, howfvfr.
        bllCodfs = buildCodfAttrs(mfthods);
    }

    Codf[] bllCodfs;
    List<Codf> dodfsWithFlbgs;
    Mbp<Clbss, Sft<Entry>> lddRffMbp = nfw HbshMbp<>();

    Codf[] buildCodfAttrs(List<Clbss.Mfthod> mfthods) {
        List<Codf> dodfs = nfw ArrbyList<>(mfthods.sizf());
        for (Clbss.Mfthod m : mfthods) {
            if (m.gftAttributf(bttrCodfEmpty) != null) {
                m.dodf = nfw Codf(m);
                dodfs.bdd(m.dodf);
            }
        }
        Codf[] b = nfw Codf[dodfs.sizf()];
        dodfs.toArrby(b);
        rfturn b;
    }

    void rfbdCodfHfbdfrs() throws IOExdfption {
        //  dodf_bbnds:
        //        *dodf_hfbdfrs :BYTE1
        //
        //        *dodf_mbx_stbdk :UNSIGNED5
        //        *dodf_mbx_nb_lodbls :UNSIGNED5
        //        *dodf_hbndlfr_dount :UNSIGNED5
        //        ...
        //        dodf_bttr_bbnds
        boolfbn bttrsOK = tfstBit(brdhivfOptions, AO_HAVE_ALL_CODE_FLAGS);
        dodf_hfbdfrs.fxpfdtLfngth(bllCodfs.lfngth);
        dodf_hfbdfrs.rfbdFrom(in);
        List<Codf> longCodfs = nfw ArrbyList<>(bllCodfs.lfngth / 10);
        for (int i = 0; i < bllCodfs.lfngth; i++) {
            Codf d = bllCodfs[i];
            int sd = dodf_hfbdfrs.gftBytf();
            bssfrt(sd == (sd & 0xFF));
            if (vfrbosf > 2)
                Utils.log.finf("dodfHfbdfr "+d+" = "+sd);
            if (sd == LONG_CODE_HEADER) {
                // Wf will rfbd ms/ml/nh/flbgs from bbnds shortly.
                longCodfs.bdd(d);
                dontinuf;
            }
            // Short dodf hfbdfr is thf usubl dbsf:
            d.sftMbxStbdk(     shortCodfHfbdfr_mbx_stbdk(sd) );
            d.sftMbxNALodbls(  shortCodfHfbdfr_mbx_nb_lodbls(sd) );
            d.sftHbndlfrCount( shortCodfHfbdfr_hbndlfr_dount(sd) );
            bssfrt(shortCodfHfbdfr(d) == sd);
        }
        dodf_hfbdfrs.donfDisbursing();
        dodf_mbx_stbdk.fxpfdtLfngth(longCodfs.sizf());
        dodf_mbx_nb_lodbls.fxpfdtLfngth(longCodfs.sizf());
        dodf_hbndlfr_dount.fxpfdtLfngth(longCodfs.sizf());

        // Do thf long hfbdfrs now.
        dodf_mbx_stbdk.rfbdFrom(in);
        dodf_mbx_nb_lodbls.rfbdFrom(in);
        dodf_hbndlfr_dount.rfbdFrom(in);
        for (Codf d : longCodfs) {
            d.sftMbxStbdk(     dodf_mbx_stbdk.gftInt() );
            d.sftMbxNALodbls(  dodf_mbx_nb_lodbls.gftInt() );
            d.sftHbndlfrCount( dodf_hbndlfr_dount.gftInt() );
        }
        dodf_mbx_stbdk.donfDisbursing();
        dodf_mbx_nb_lodbls.donfDisbursing();
        dodf_hbndlfr_dount.donfDisbursing();

        rfbdCodfHbndlfrs();

        if (bttrsOK) {
            // Codf bttributfs brf dommon (dfbug info not strippfd).
            dodfsWithFlbgs = Arrbys.bsList(bllCodfs);
        } flsf {
            // Codf bttributfs brf vfry spbrsf (dfbug info is strippfd).
            dodfsWithFlbgs = longCodfs;
        }
        dountAttrs(ATTR_CONTEXT_CODE, dodfsWithFlbgs);
        // do rfbdAttrs lbtfr, bftfr BCs brf sdbnnfd
    }

    void rfbdCodfHbndlfrs() throws IOExdfption {
        //  dodf_bbnds:
        //        ...
        //        *dodf_hbndlfr_stbrt_P :BCI5
        //        *dodf_hbndlfr_fnd_PO :BRANCH5
        //        *dodf_hbndlfr_dbtdh_PO :BRANCH5
        //        *dodf_hbndlfr_dlbss_RCN :UNSIGNED5  (null or dp_Clbss)
        //        ...
        int nh = 0;
        for (int i = 0; i < bllCodfs.lfngth; i++) {
            Codf d = bllCodfs[i];
            nh += d.gftHbndlfrCount();
        }

        VblufBbnd[] dodf_hbndlfr_bbnds = {
            dodf_hbndlfr_stbrt_P,
            dodf_hbndlfr_fnd_PO,
            dodf_hbndlfr_dbtdh_PO,
            dodf_hbndlfr_dlbss_RCN
        };

        for (int i = 0; i < dodf_hbndlfr_bbnds.lfngth; i++) {
            dodf_hbndlfr_bbnds[i].fxpfdtLfngth(nh);
            dodf_hbndlfr_bbnds[i].rfbdFrom(in);
        }

        for (int i = 0; i < bllCodfs.lfngth; i++) {
            Codf d = bllCodfs[i];
            for (int j = 0, jmbx = d.gftHbndlfrCount(); j < jmbx; j++) {
                d.hbndlfr_dlbss[j] = dodf_hbndlfr_dlbss_RCN.gftRff();
                // For now, just rfdord thf rbw BCI dodfs.
                // Wf must wbit until wf hbvf instrudtion boundbrifs.
                d.hbndlfr_stbrt[j] = dodf_hbndlfr_stbrt_P.gftInt();
                d.hbndlfr_fnd[j]   = dodf_hbndlfr_fnd_PO.gftInt();
                d.hbndlfr_dbtdh[j] = dodf_hbndlfr_dbtdh_PO.gftInt();
            }
        }
        for (int i = 0; i < dodf_hbndlfr_bbnds.lfngth; i++) {
            dodf_hbndlfr_bbnds[i].donfDisbursing();
        }
    }

    void fixupCodfHbndlfrs() {
        // Adtublly dfdodf (rfnumbfr) thf BCIs now.
        for (int i = 0; i < bllCodfs.lfngth; i++) {
            Codf d = bllCodfs[i];
            for (int j = 0, jmbx = d.gftHbndlfrCount(); j < jmbx; j++) {
                int sum = d.hbndlfr_stbrt[j];
                d.hbndlfr_stbrt[j] = d.dfdodfBCI(sum);
                sum += d.hbndlfr_fnd[j];
                d.hbndlfr_fnd[j]   = d.dfdodfBCI(sum);
                sum += d.hbndlfr_dbtdh[j];
                d.hbndlfr_dbtdh[j] = d.dfdodfBCI(sum);
            }
        }
    }

    // Gfnfrid routinfs for rfbding bttributfs of
    // dlbssfs, fiflds, mfthods, bnd dodfs.
    // Thf holdfrs is b globbl list, blrfbdy dollfdtfd,
    // of bttributf "dustomfrs".
    void dountAndRfbdAttrs(int dtypf, Collfdtion<? fxtfnds Attributf.Holdfr> holdfrs)
            throws IOExdfption {
        //  dlbss_bttr_bbnds:
        //        *dlbss_flbgs :UNSIGNED5
        //        *dlbss_bttr_dount :UNSIGNED5
        //        *dlbss_bttr_indfxfs :UNSIGNED5
        //        *dlbss_bttr_dblls :UNSIGNED5
        //        *dlbss_Signbturf_RS :UNSIGNED5 (dp_Signbturf)
        //        dlbss_mftbdbtb_bbnds
        //        *dlbss_SourdfFilf_RU :UNSIGNED5 (dp_Utf8)
        //        *dlbss_EndlosingMfthod_RM :UNSIGNED5 (dp_Mfthod)
        //        id_lodbl_bbnds
        //        *dlbss_ClbssFilf_vfrsion_minor_H :UNSIGNED5
        //        *dlbss_ClbssFilf_vfrsion_mbjor_H :UNSIGNED5
        //        dlbss_typf_mftbdbtb_bbnds
        //
        //  fifld_bttr_bbnds:
        //        *fifld_flbgs :UNSIGNED5
        //        *fifld_bttr_dount :UNSIGNED5
        //        *fifld_bttr_indfxfs :UNSIGNED5
        //        *fifld_bttr_dblls :UNSIGNED5
        //        *fifld_Signbturf_RS :UNSIGNED5 (dp_Signbturf)
        //        fifld_mftbdbtb_bbnds
        //        *fifld_ConstbntVbluf_KQ :UNSIGNED5 (dp_Int, ftd.; sff notf)
        //        fifld_typf_mftbdbtb_bbnds
        //
        //  mfthod_bttr_bbnds:
        //        *mfthod_flbgs :UNSIGNED5
        //        *mfthod_bttr_dount :UNSIGNED5
        //        *mfthod_bttr_indfxfs :UNSIGNED5
        //        *mfthod_bttr_dblls :UNSIGNED5
        //        *mfthod_Signbturf_RS :UNSIGNED5 (dp_Signbturf)
        //        mfthod_mftbdbtb_bbnds
        //        *mfthod_Exdfptions_N :UNSIGNED5
        //        *mfthod_Exdfptions_RC :UNSIGNED5  (dp_Clbss)
        //        *mfthod_MfthodPbrbmftfrs_NB: BYTE1
        //        *mfthod_MfthodPbrbmftfrs_RUN: UNSIGNED5 (dp_Utf8)
        //        *mfthod_MfthodPbrbmftfrs_FH:  UNSIGNED5 (flbg)
        //        mfthod_typf_mftbdbtb_bbnds
        //
        //  dodf_bttr_bbnds:
        //        *dodf_flbgs :UNSIGNED5
        //        *dodf_bttr_dount :UNSIGNED5
        //        *dodf_bttr_indfxfs :UNSIGNED5
        //        *dodf_bttr_dblls :UNSIGNED5
        //        *dodf_LinfNumbfrTbblf_N :UNSIGNED5
        //        *dodf_LinfNumbfrTbblf_bdi_P :BCI5
        //        *dodf_LinfNumbfrTbblf_linf :UNSIGNED5
        //        *dodf_LodblVbribblfTbblf_N :UNSIGNED5
        //        *dodf_LodblVbribblfTbblf_bdi_P :BCI5
        //        *dodf_LodblVbribblfTbblf_spbn_O :BRANCH5
        //        *dodf_LodblVbribblfTbblf_nbmf_RU :UNSIGNED5 (dp_Utf8)
        //        *dodf_LodblVbribblfTbblf_typf_RS :UNSIGNED5 (dp_Signbturf)
        //        *dodf_LodblVbribblfTbblf_slot :UNSIGNED5
        //        dodf_typf_mftbdbtb_bbnds

        dountAttrs(dtypf, holdfrs);
        rfbdAttrs(dtypf, holdfrs);
    }

    // Rfbd flbgs bnd dount thf bttributfs thbt brf to bf plbdfd
    // on thf givfn holdfrs.
    void dountAttrs(int dtypf, Collfdtion<? fxtfnds Attributf.Holdfr> holdfrs)
            throws IOExdfption {
        // Hfrf, xxx stbnds for onf of dlbss, fifld, mfthod, dodf.
        MultiBbnd xxx_bttr_bbnds = bttrBbnds[dtypf];
        long flbgMbsk = bttrFlbgMbsk[dtypf];
        if (vfrbosf > 1) {
            Utils.log.finf("sdbnning flbgs bnd bttrs for "+
                    Attributf.dontfxtNbmf(dtypf)+"["+holdfrs.sizf()+"]");
        }

        // Fftdh thf bttributf lbyout dffinitions whidh govfrn thf bbnds
        // wf brf bbout to rfbd.
        List<Attributf.Lbyout> dffList = bttrDffs.gft(dtypf);
        Attributf.Lbyout[] dffs = nfw Attributf.Lbyout[dffList.sizf()];
        dffList.toArrby(dffs);
        IntBbnd xxx_flbgs_hi = gftAttrBbnd(xxx_bttr_bbnds, AB_FLAGS_HI);
        IntBbnd xxx_flbgs_lo = gftAttrBbnd(xxx_bttr_bbnds, AB_FLAGS_LO);
        IntBbnd xxx_bttr_dount = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_COUNT);
        IntBbnd xxx_bttr_indfxfs = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_INDEXES);
        IntBbnd xxx_bttr_dblls = gftAttrBbnd(xxx_bttr_bbnds, AB_ATTR_CALLS);

        // Count up thf numbfr of holdfrs whidh hbvf ovfrflow bttrs.
        int ovfrflowMbsk = bttrOvfrflowMbsk[dtypf];
        int ovfrflowHoldfrCount = 0;
        boolfbn hbvfLongFlbgs = hbvfFlbgsHi(dtypf);
        xxx_flbgs_hi.fxpfdtLfngth(hbvfLongFlbgs? holdfrs.sizf(): 0);
        xxx_flbgs_hi.rfbdFrom(in);
        xxx_flbgs_lo.fxpfdtLfngth(holdfrs.sizf());
        xxx_flbgs_lo.rfbdFrom(in);
        bssfrt((flbgMbsk & ovfrflowMbsk) == ovfrflowMbsk);
        for (Attributf.Holdfr h : holdfrs) {
            int flbgs = xxx_flbgs_lo.gftInt();
            h.flbgs = flbgs;
            if ((flbgs & ovfrflowMbsk) != 0)
                ovfrflowHoldfrCount += 1;
        }

        // For fbdh holdfr with ovfrflow bttrs, rfbd b dount.
        xxx_bttr_dount.fxpfdtLfngth(ovfrflowHoldfrCount);
        xxx_bttr_dount.rfbdFrom(in);
        xxx_bttr_indfxfs.fxpfdtLfngth(xxx_bttr_dount.gftIntTotbl());
        xxx_bttr_indfxfs.rfbdFrom(in);

        // Now it's timf to dhfdk flbg bits thbt indidbtf bttributfs.
        // Wf bddumulbtf (b) b list of bttributf typfs for fbdh holdfr
        // (dlbss/fifld/mfthod/dodf), bnd blso wf bddumulbtf (b) b totbl
        // dount for fbdh bttributf typf.
        int[] totblCounts = nfw int[dffs.lfngth];
        for (Attributf.Holdfr h : holdfrs) {
            bssfrt(h.bttributfs == null);
            // Systfm.out.println("flbgs="+h.flbgs+" using fm="+flbgMbsk);
            long bttrBits = ((h.flbgs & flbgMbsk) << 32) >>> 32;
            // Clfbn up thf flbgs now.
            h.flbgs -= (int)bttrBits;   // strip bttr bits
            bssfrt(h.flbgs == (dhbr)h.flbgs);  // 16 bits only now
            bssfrt((dtypf != ATTR_CONTEXT_CODE) || h.flbgs == 0);
            if (hbvfLongFlbgs)
                bttrBits += (long)xxx_flbgs_hi.gftInt() << 32;
            if (bttrBits == 0)  dontinuf;  // no bttrs on this guy

            int nob = 0;  // numbfr of ovfrflow bttrs
            long ovfrflowBit = (bttrBits & ovfrflowMbsk);
            bssfrt(ovfrflowBit >= 0);
            bttrBits -= ovfrflowBit;
            if (ovfrflowBit != 0) {
                nob = xxx_bttr_dount.gftInt();
            }

            int nfb = 0;  // numbfr of flbg bttrs
            long bits = bttrBits;
            for (int bi = 0; bits != 0; bi++) {
                if ((bits & (1L<<bi)) == 0)  dontinuf;
                bits -= (1L<<bi);
                nfb += 1;
            }
            List<Attributf> hb = nfw ArrbyList<>(nfb + nob);
            h.bttributfs = hb;
            bits = bttrBits;  // itfrbtf bgbin
            for (int bi = 0; bits != 0; bi++) {
                if ((bits & (1L<<bi)) == 0)  dontinuf;
                bits -= (1L<<bi);
                totblCounts[bi] += 1;
                // This dffinition indfx is livf in this holdfr.
                if (dffs[bi] == null)  bbdAttrIndfx(bi, dtypf);
                Attributf dbnonidbl = dffs[bi].dbnonidblInstbndf();
                hb.bdd(dbnonidbl);
                nfb -= 1;
            }
            bssfrt(nfb == 0);
            for (; nob > 0; nob--) {
                int bi = xxx_bttr_indfxfs.gftInt();
                totblCounts[bi] += 1;
                // This dffinition indfx is livf in this holdfr.
                if (dffs[bi] == null)  bbdAttrIndfx(bi, dtypf);
                Attributf dbnonidbl = dffs[bi].dbnonidblInstbndf();
                hb.bdd(dbnonidbl);
            }
        }

        xxx_flbgs_hi.donfDisbursing();
        xxx_flbgs_lo.donfDisbursing();
        xxx_bttr_dount.donfDisbursing();
        xxx_bttr_indfxfs.donfDisbursing();

        // Now fbdh holdfr hbs b list of dbnonidbl bttributf instbndfs.
        // For lbyouts with no flfmfnts, wf brf donf.  Howfvfr, for
        // lbyouts with bbnds, wf must rfplbdf fbdh dbnonidbl (fmpty)
        // instbndf with b vbluf-bfbring onf, initiblizfd from thf
        // bppropribtf bbnds.

        // Mbkf b smbll pbss to dftfdt bnd rfbd bbdkwbrd dbll dounts.
        int dbllCounts = 0;
        for (boolfbn prfdff = truf; ; prfdff = fblsf) {
            for (int bi = 0; bi < dffs.lfngth; bi++) {
                Attributf.Lbyout dff = dffs[bi];
                if (dff == null)  dontinuf;  // unusfd indfx
                if (prfdff != isPrfdffinfdAttr(dtypf, bi))
                    dontinuf;  // wrong pbss
                int totblCount = totblCounts[bi];
                if (totblCount == 0)
                    dontinuf;  // irrflfvbnt
                Attributf.Lbyout.Elfmfnt[] dblfs = dff.gftCbllbblfs();
                for (int j = 0; j < dblfs.lfngth; j++) {
                    bssfrt(dblfs[j].kind == Attributf.EK_CBLE);
                    if (dblfs[j].flbgTfst(Attributf.EF_BACK))
                        dbllCounts += 1;
                }
            }
            if (!prfdff)  brfbk;
        }
        xxx_bttr_dblls.fxpfdtLfngth(dbllCounts);
        xxx_bttr_dblls.rfbdFrom(in);

        // Finblly, sizf bll thf bttributf bbnds.
        for (boolfbn prfdff = truf; ; prfdff = fblsf) {
            for (int bi = 0; bi < dffs.lfngth; bi++) {
                Attributf.Lbyout dff = dffs[bi];
                if (dff == null)  dontinuf;  // unusfd indfx
                if (prfdff != isPrfdffinfdAttr(dtypf, bi))
                    dontinuf;  // wrong pbss
                int totblCount = totblCounts[bi];
                Bbnd[] bb = bttrBbndTbblf.gft(dff);
                if (dff == bttrInnfrClbssfsEmpty) {
                    // Spfdibl dbsf.
                    // Sizf thf bbnds bs if using thf following lbyout:
                    //    [RCH TI[ (0)[] ()[RCNH RUNH] ]].
                    dlbss_InnfrClbssfs_N.fxpfdtLfngth(totblCount);
                    dlbss_InnfrClbssfs_N.rfbdFrom(in);
                    int tuplfCount = dlbss_InnfrClbssfs_N.gftIntTotbl();
                    dlbss_InnfrClbssfs_RC.fxpfdtLfngth(tuplfCount);
                    dlbss_InnfrClbssfs_RC.rfbdFrom(in);
                    dlbss_InnfrClbssfs_F.fxpfdtLfngth(tuplfCount);
                    dlbss_InnfrClbssfs_F.rfbdFrom(in);
                    // Drop rfmbining dolumns whfrfvfr flbgs brf zfro:
                    tuplfCount -= dlbss_InnfrClbssfs_F.gftIntCount(0);
                    dlbss_InnfrClbssfs_outfr_RCN.fxpfdtLfngth(tuplfCount);
                    dlbss_InnfrClbssfs_outfr_RCN.rfbdFrom(in);
                    dlbss_InnfrClbssfs_nbmf_RUN.fxpfdtLfngth(tuplfCount);
                    dlbss_InnfrClbssfs_nbmf_RUN.rfbdFrom(in);
                } flsf if (!optDfbugBbnds && totblCount == 0) {
                    // Expfdt no flfmfnts bt bll.  Skip quidkly. howfvfr if wf
                    // brf dfbugging bbnds, rfbd bll bbnds rfgbrdlfss
                    for (int j = 0; j < bb.lfngth; j++) {
                        bb[j].donfWithUnusfdBbnd();
                    }
                } flsf {
                    // Rfbd thfsf bbnds in sfqufndf.
                    boolfbn hbsCbllbblfs = dff.hbsCbllbblfs();
                    if (!hbsCbllbblfs) {
                        rfbdAttrBbnds(dff.flfms, totblCount, nfw int[0], bb);
                    } flsf {
                        Attributf.Lbyout.Elfmfnt[] dblfs = dff.gftCbllbblfs();
                        // At first, rfdord initibl dblls.
                        // Lbtfr, forwbrd dblls mby blso bddumulbtf hfrf:
                        int[] forwbrdCounts = nfw int[dblfs.lfngth];
                        forwbrdCounts[0] = totblCount;
                        for (int j = 0; j < dblfs.lfngth; j++) {
                            bssfrt(dblfs[j].kind == Attributf.EK_CBLE);
                            int fntryCount = forwbrdCounts[j];
                            forwbrdCounts[j] = -1;  // No morf, plfbsf!
                            if (totblCount > 0 && dblfs[j].flbgTfst(Attributf.EF_BACK))
                                fntryCount += xxx_bttr_dblls.gftInt();
                            rfbdAttrBbnds(dblfs[j].body, fntryCount, forwbrdCounts, bb);
                        }
                    }
                    // mbrk thfm rfbd,  to sbtisfy bssfrts
                    if (optDfbugBbnds && totblCount == 0) {
                        for (int j = 0; j < bb.lfngth; j++) {
                            bb[j].donfDisbursing();
                        }
                    }
                }
            }
            if (!prfdff)  brfbk;
        }
        xxx_bttr_dblls.donfDisbursing();
    }

    void bbdAttrIndfx(int bi, int dtypf) throws IOExdfption {
        throw nfw IOExdfption("Unknown bttributf indfx "+bi+" for "+
                                   ATTR_CONTEXT_NAME[dtypf]+" bttributf");
    }

    void rfbdAttrs(int dtypf, Collfdtion<? fxtfnds Attributf.Holdfr> holdfrs)
            throws IOExdfption {
        // Dfdodf bbnd vblufs into bttributfs.
        Sft<Attributf.Lbyout> sbwDffs = nfw HbshSft<>();
        BytfArrbyOutputStrfbm buf = nfw BytfArrbyOutputStrfbm();
        for (finbl Attributf.Holdfr h : holdfrs) {
            if (h.bttributfs == null)  dontinuf;
            for (ListItfrbtor<Attributf> j = h.bttributfs.listItfrbtor(); j.hbsNfxt(); ) {
                Attributf b = j.nfxt();
                Attributf.Lbyout dff = b.lbyout();
                if (dff.bbndCount == 0) {
                    if (dff == bttrInnfrClbssfsEmpty) {
                        // Spfdibl logid to rfbd this bttr.
                        rfbdLodblInnfrClbssfs((Clbss) h);
                        dontinuf;
                    }
                    // Cbnonidbl fmpty bttr works finf (f.g., Synthftid).
                    dontinuf;
                }
                sbwDffs.bdd(dff);
                boolfbn isCV = (dtypf == ATTR_CONTEXT_FIELD && dff == bttrConstbntVbluf);
                if (isCV)  sftConstbntVblufIndfx((Clbss.Fifld)h);
                if (vfrbosf > 2)
                    Utils.log.finf("rfbd "+b+" in "+h);
                finbl Bbnd[] bb = bttrBbndTbblf.gft(dff);
                // Rfbd onf bttributf of typf dff from bb into b bytf brrby.
                buf.rfsft();
                Objfdt fixups = b.unpbrsf(nfw Attributf.VblufStrfbm() {
                    publid int gftInt(int bbndIndfx) {
                        rfturn ((IntBbnd) bb[bbndIndfx]).gftInt();
                    }
                    publid Entry gftRff(int bbndIndfx) {
                        rfturn ((CPRffBbnd) bb[bbndIndfx]).gftRff();
                    }
                    publid int dfdodfBCI(int bdiCodf) {
                        Codf dodf = (Codf) h;
                        rfturn dodf.dfdodfBCI(bdiCodf);
                    }
                }, buf);
                // Rfplbdf thf dbnonidbl bttr with thf onf just rfbd.
                j.sft(b.bddContfnt(buf.toBytfArrby(), fixups));
                if (isCV)  sftConstbntVblufIndfx(null);  // dlfbn up
            }
        }

        // Mbrk thf bbnds wf just usfd bs donf disbursing.
        for (Attributf.Lbyout dff : sbwDffs) {
            if (dff == null)  dontinuf;  // unusfd indfx
            Bbnd[] bb = bttrBbndTbblf.gft(dff);
            for (int j = 0; j < bb.lfngth; j++) {
                bb[j].donfDisbursing();
            }
        }

        if (dtypf == ATTR_CONTEXT_CLASS) {
            dlbss_InnfrClbssfs_N.donfDisbursing();
            dlbss_InnfrClbssfs_RC.donfDisbursing();
            dlbss_InnfrClbssfs_F.donfDisbursing();
            dlbss_InnfrClbssfs_outfr_RCN.donfDisbursing();
            dlbss_InnfrClbssfs_nbmf_RUN.donfDisbursing();
        }

        MultiBbnd xxx_bttr_bbnds = bttrBbnds[dtypf];
        for (int i = 0; i < xxx_bttr_bbnds.sizf(); i++) {
            Bbnd b = xxx_bttr_bbnds.gft(i);
            if (b instbndfof MultiBbnd)
                b.donfDisbursing();
        }
        xxx_bttr_bbnds.donfDisbursing();
    }

    privbtf
    void rfbdAttrBbnds(Attributf.Lbyout.Elfmfnt[] flfms,
                       int dount, int[] forwbrdCounts,
                       Bbnd[] bb)
            throws IOExdfption {
        for (int i = 0; i < flfms.lfngth; i++) {
            Attributf.Lbyout.Elfmfnt f = flfms[i];
            Bbnd fBbnd = null;
            if (f.hbsBbnd()) {
                fBbnd = bb[f.bbndIndfx];
                fBbnd.fxpfdtLfngth(dount);
                fBbnd.rfbdFrom(in);
            }
            switdh (f.kind) {
            dbsf Attributf.EK_REPL:
                // Rfdursivf dbll.
                int rfpCount = ((IntBbnd)fBbnd).gftIntTotbl();
                // Notf:  gftIntTotbl mbkfs bn fxtrb pbss ovfr this bbnd.
                rfbdAttrBbnds(f.body, rfpCount, forwbrdCounts, bb);
                brfbk;
            dbsf Attributf.EK_UN:
                int rfmbiningCount = dount;
                for (int j = 0; j < f.body.lfngth; j++) {
                    int dbsfCount;
                    if (j == f.body.lfngth-1) {
                        dbsfCount = rfmbiningCount;
                    } flsf {
                        dbsfCount = 0;
                        for (int j0 = j;
                             (j == j0)
                             || (j < f.body.lfngth
                                 && f.body[j].flbgTfst(Attributf.EF_BACK));
                             j++) {
                            dbsfCount += ((IntBbnd)fBbnd).gftIntCount(f.body[j].vbluf);
                        }
                        --j;  // bbdk up to lbst oddurrfndf of this body
                    }
                    rfmbiningCount -= dbsfCount;
                    rfbdAttrBbnds(f.body[j].body, dbsfCount, forwbrdCounts, bb);
                }
                bssfrt(rfmbiningCount == 0);
                brfbk;
            dbsf Attributf.EK_CALL:
                bssfrt(f.body.lfngth == 1);
                bssfrt(f.body[0].kind == Attributf.EK_CBLE);
                if (!f.flbgTfst(Attributf.EF_BACK)) {
                    // Bbdkwbrd dblls brf prf-dountfd, but forwbrds brf not.
                    // Push thf prfsfnt dount forwbrd.
                    bssfrt(forwbrdCounts[f.vbluf] >= 0);
                    forwbrdCounts[f.vbluf] += dount;
                }
                brfbk;
            dbsf Attributf.EK_CBLE:
                bssfrt(fblsf);
                brfbk;
            }
        }
    }

    void rfbdBytfCodfs() throws IOExdfption {
        //  bd_bbnds:
        //        *bd_dodfs :BYTE1
        //        *bd_dbsf_dount :UNSIGNED5
        //        *bd_dbsf_vbluf :DELTA5
        //        *bd_bytf :BYTE1
        //        *bd_short :DELTA5
        //        *bd_lodbl :UNSIGNED5
        //        *bd_lbbfl :BRANCH5
        //        *bd_intrff :DELTA5  (dp_Int)
        //        *bd_flobtrff :DELTA5  (dp_Flobt)
        //        *bd_longrff :DELTA5  (dp_Long)
        //        *bd_doublfrff :DELTA5  (dp_Doublf)
        //        *bd_stringrff :DELTA5  (dp_String)
        //        *bd_dlbssrff :UNSIGNED5  (durrfnt dlbss or dp_Clbss)
        //        *bd_fifldrff :DELTA5  (dp_Fifld)
        //        *bd_mfthodrff :UNSIGNED5  (dp_Mfthod)
        //        *bd_imfthodrff :DELTA5  (dp_Imfthod)
        //        *bd_thisfifld :UNSIGNED5 (dp_Fifld, only for durrfnt dlbss)
        //        *bd_supfrfifld :UNSIGNED5 (dp_Fifld, only for durrfnt supfr)
        //        *bd_thismfthod :UNSIGNED5 (dp_Mfthod, only for durrfnt dlbss)
        //        *bd_supfrmfthod :UNSIGNED5 (dp_Mfthod, only for durrfnt supfr)
        //        *bd_initrff :UNSIGNED5 (dp_Fifld, only for most rfdfnt nfw)
        //        *bd_fsdrff :UNSIGNED5 (dp_All)
        //        *bd_fsdrffsizf :UNSIGNED5
        //        *bd_fsdsizf :UNSIGNED5
        //        *bd_fsdbytf :BYTE1
        bd_dodfs.flfmfntCountForDfbug = bllCodfs.lfngth;
        bd_dodfs.sftInputStrfbmFrom(in);
        rfbdBytfCodfOps();  // rfbds from bd_dodfs bnd bd_dbsf_dount
        bd_dodfs.donfDisbursing();

        // All thf opfrbnd bbnds hbvf now bffn sizfd.  Rfbd thfm bll in turn.
        Bbnd[] opfrbnd_bbnds = {
            bd_dbsf_vbluf,
            bd_bytf, bd_short,
            bd_lodbl, bd_lbbfl,
            bd_intrff, bd_flobtrff,
            bd_longrff, bd_doublfrff, bd_stringrff,
            bd_lobdbblfvblufrff,
            bd_dlbssrff, bd_fifldrff,
            bd_mfthodrff, bd_imfthodrff,
            bd_indyrff,
            bd_thisfifld, bd_supfrfifld,
            bd_thismfthod, bd_supfrmfthod,
            bd_initrff,
            bd_fsdrff, bd_fsdrffsizf, bd_fsdsizf
        };
        for (int i = 0; i < opfrbnd_bbnds.lfngth; i++) {
            opfrbnd_bbnds[i].rfbdFrom(in);
        }
        bd_fsdbytf.fxpfdtLfngth(bd_fsdsizf.gftIntTotbl());
        bd_fsdbytf.rfbdFrom(in);

        fxpbndBytfCodfOps();

        // Donf fftdhing vblufs from opfrbnd bbnds:
        bd_dbsf_dount.donfDisbursing();
        for (int i = 0; i < opfrbnd_bbnds.lfngth; i++) {
            opfrbnd_bbnds[i].donfDisbursing();
        }
        bd_fsdbytf.donfDisbursing();
        bd_bbnds.donfDisbursing();

        // Wf must dflby thf pbrsing of Codf bttributfs until wf
        // hbvf b domplftf modfl of bytfdodfs, for BCI fndodings.
        rfbdAttrs(ATTR_CONTEXT_CODE, dodfsWithFlbgs);
        // Ditto for fxdfption hbndlfrs in dodfs.
        fixupCodfHbndlfrs();
        // Now wf dbn finish with dlbss_bbnds; df. rfbdClbssfs().
        dodf_bbnds.donfDisbursing();
        dlbss_bbnds.donfDisbursing();
    }

    privbtf void rfbdBytfCodfOps() throws IOExdfption {
        // sdrbtdh bufffr for dollfdting dodf::
        bytf[] buf = nfw bytf[1<<12];
        // rfdord of bll switdh opdodfs (thfsf brf vbribblf-lfngth)
        List<Intfgfr> bllSwitdhOps = nfw ArrbyList<>();
        for (int k = 0; k < bllCodfs.lfngth; k++) {
            Codf d = bllCodfs[k];
        sdbnOnfMfthod:
            for (int i = 0; ; i++) {
                int bd = bd_dodfs.gftBytf();
                if (i + 10 > buf.lfngth)  buf = rfbllod(buf);
                buf[i] = (bytf)bd;
                boolfbn isWidf = fblsf;
                if (bd == _widf) {
                    bd = bd_dodfs.gftBytf();
                    buf[++i] = (bytf)bd;
                    isWidf = truf;
                }
                bssfrt(bd == (0xFF & bd));
                // Adjust fxpfdtbtions of vbrious bbnd sizfs.
                switdh (bd) {
                dbsf _tbblfswitdh:
                dbsf _lookupswitdh:
                    bd_dbsf_dount.fxpfdtMorfLfngth(1);
                    bllSwitdhOps.bdd(bd);
                    brfbk;
                dbsf _iind:
                    bd_lodbl.fxpfdtMorfLfngth(1);
                    if (isWidf)
                        bd_short.fxpfdtMorfLfngth(1);
                    flsf
                        bd_bytf.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _sipush:
                    bd_short.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _bipush:
                    bd_bytf.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _nfwbrrby:
                    bd_bytf.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _multibnfwbrrby:
                    bssfrt(gftCPRffOpBbnd(bd) == bd_dlbssrff);
                    bd_dlbssrff.fxpfdtMorfLfngth(1);
                    bd_bytf.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _rff_fsdbpf:
                    bd_fsdrffsizf.fxpfdtMorfLfngth(1);
                    bd_fsdrff.fxpfdtMorfLfngth(1);
                    brfbk;
                dbsf _bytf_fsdbpf:
                    bd_fsdsizf.fxpfdtMorfLfngth(1);
                    // bd_fsdbytf will hbvf to bf dountfd too
                    brfbk;
                dffbult:
                    if (Instrudtion.isInvokfInitOp(bd)) {
                        bd_initrff.fxpfdtMorfLfngth(1);
                        brfbk;
                    }
                    if (Instrudtion.isSflfLinkfrOp(bd)) {
                        CPRffBbnd bd_whidh = sflfOpRffBbnd(bd);
                        bd_whidh.fxpfdtMorfLfngth(1);
                        brfbk;
                    }
                    if (Instrudtion.isBrbndhOp(bd)) {
                        bd_lbbfl.fxpfdtMorfLfngth(1);
                        brfbk;
                    }
                    if (Instrudtion.isCPRffOp(bd)) {
                        CPRffBbnd bd_whidh = gftCPRffOpBbnd(bd);
                        bd_whidh.fxpfdtMorfLfngth(1);
                        bssfrt(bd != _multibnfwbrrby);  // hbndlfd flsfwhfrf
                        brfbk;
                    }
                    if (Instrudtion.isLodblSlotOp(bd)) {
                        bd_lodbl.fxpfdtMorfLfngth(1);
                        brfbk;
                    }
                    brfbk;
                dbsf _fnd_mbrkfr:
                    {
                        // Trbnsffr from buf to b morf pfrmbnfnt plbdf:
                        d.bytfs = rfbllod(buf, i);
                        brfbk sdbnOnfMfthod;
                    }
                }
            }
        }

        // To sizf instrudtion bbnds dorrfdtly, wf nffd info on switdhfs:
        bd_dbsf_dount.rfbdFrom(in);
        for (Intfgfr i : bllSwitdhOps) {
            int bd = i.intVbluf();
            int dbsfCount = bd_dbsf_dount.gftInt();
            bd_lbbfl.fxpfdtMorfLfngth(1+dbsfCount); // dffbult lbbfl + dbsfs
            bd_dbsf_vbluf.fxpfdtMorfLfngth(bd == _tbblfswitdh ? 1 : dbsfCount);
        }
        bd_dbsf_dount.rfsftForSfdondPbss();
    }

    privbtf void fxpbndBytfCodfOps() throws IOExdfption {
        // sdrbtdh bufffr for dollfdting dodf:
        bytf[] buf = nfw bytf[1<<12];
        // sdrbtdh bufffr for dollfdting instrudtion boundbrifs:
        int[] insnMbp = nfw int[1<<12];
        // list of lbbfl dbrrifrs, for lbbfl dfdoding post-pbss:
        int[] lbbfls = nfw int[1<<10];
        // sdrbtdh bufffr for rfgistfring CP rffs:
        Fixups fixupBuf = nfw Fixups();

        for (int k = 0; k < bllCodfs.lfngth; k++) {
            Codf dodf = bllCodfs[k];
            bytf[] dodfOps = dodf.bytfs;
            dodf.bytfs = null;  // just for now, whilf wf bddumulbtf bits

            Clbss durClbss = dodf.thisClbss();

            Sft<Entry> lddRffSft = lddRffMbp.gft(durClbss);
            if (lddRffSft == null)
                lddRffMbp.put(durClbss, lddRffSft = nfw HbshSft<>());

            ClbssEntry thisClbss  = durClbss.thisClbss;
            ClbssEntry supfrClbss = durClbss.supfrClbss;
            ClbssEntry nfwClbss   = null;  // dlbss of lbst _nfw opdodf

            int pd = 0;  // fill pointfr in buf; bdtubl bytfdodf PC
            int numInsns = 0;
            int numLbbfls = 0;
            boolfbn hbsEsds = fblsf;
            fixupBuf.dlfbr();
            for (int i = 0; i < dodfOps.lfngth; i++) {
                int bd = Instrudtion.gftBytf(dodfOps, i);
                int durPC = pd;
                insnMbp[numInsns++] = durPC;
                if (pd + 10 > buf.lfngth)  buf = rfbllod(buf);
                if (numInsns+10 > insnMbp.lfngth)  insnMbp = rfbllod(insnMbp);
                if (numLbbfls+10 > lbbfls.lfngth)  lbbfls = rfbllod(lbbfls);
                boolfbn isWidf = fblsf;
                if (bd == _widf) {
                    buf[pd++] = (bytf) bd;
                    bd = Instrudtion.gftBytf(dodfOps, ++i);
                    isWidf = truf;
                }
                switdh (bd) {
                dbsf _tbblfswitdh: // bpd:  (df, lo, hi, (hi-lo+1)*(lbbfl))
                dbsf _lookupswitdh: // bpd:  (df, nd, nd*(dbsf, lbbfl))
                    {
                        int dbsfCount = bd_dbsf_dount.gftInt();
                        whilf ((pd + 30 + dbsfCount*8) > buf.lfngth)
                            buf = rfbllod(buf);
                        buf[pd++] = (bytf) bd;
                        //initiblizf bpd, df, lo, hi bytfs to rfbsonbblf bits:
                        Arrbys.fill(buf, pd, pd+30, (bytf)0);
                        Instrudtion.Switdh isw = (Instrudtion.Switdh)
                            Instrudtion.bt(buf, durPC);
                        //isw.sftDffbultLbbfl(gftLbbfl(bd_lbbfl, dodf, durPC));
                        isw.sftCbsfCount(dbsfCount);
                        if (bd == _tbblfswitdh) {
                            isw.sftCbsfVbluf(0, bd_dbsf_vbluf.gftInt());
                        } flsf {
                            for (int j = 0; j < dbsfCount; j++) {
                                isw.sftCbsfVbluf(j, bd_dbsf_vbluf.gftInt());
                            }
                        }
                        // Mbkf our gftLbbfl dblls lbtfr.
                        lbbfls[numLbbfls++] = durPC;
                        pd = isw.gftNfxtPC();
                        dontinuf;
                    }
                dbsf _iind:
                    {
                        buf[pd++] = (bytf) bd;
                        int lodbl = bd_lodbl.gftInt();
                        int dfltb;
                        if (isWidf) {
                            dfltb = bd_short.gftInt();
                            Instrudtion.sftShort(buf, pd, lodbl); pd += 2;
                            Instrudtion.sftShort(buf, pd, dfltb); pd += 2;
                        } flsf {
                            dfltb = (bytf) bd_bytf.gftBytf();
                            buf[pd++] = (bytf)lodbl;
                            buf[pd++] = (bytf)dfltb;
                        }
                        dontinuf;
                    }
                dbsf _sipush:
                    {
                        int vbl = bd_short.gftInt();
                        buf[pd++] = (bytf) bd;
                        Instrudtion.sftShort(buf, pd, vbl); pd += 2;
                        dontinuf;
                    }
                dbsf _bipush:
                dbsf _nfwbrrby:
                    {
                        int vbl = bd_bytf.gftBytf();
                        buf[pd++] = (bytf) bd;
                        buf[pd++] = (bytf) vbl;
                        dontinuf;
                    }
                dbsf _rff_fsdbpf:
                    {
                        // Notf thbt insnMbp hbs onf fntry for this.
                        hbsEsds = truf;
                        int sizf = bd_fsdrffsizf.gftInt();
                        Entry rff = bd_fsdrff.gftRff();
                        if (sizf == 1)  lddRffSft.bdd(rff);
                        int fmt;
                        switdh (sizf) {
                        dbsf 1: fixupBuf.bddU1(pd, rff); brfbk;
                        dbsf 2: fixupBuf.bddU2(pd, rff); brfbk;
                        dffbult: bssfrt(fblsf); fmt = 0;
                        }
                        buf[pd+0] = buf[pd+1] = 0;
                        pd += sizf;
                    }
                    dontinuf;
                dbsf _bytf_fsdbpf:
                    {
                        // Notf thbt insnMbp hbs onf fntry for bll thfsf bytfs.
                        hbsEsds = truf;
                        int sizf = bd_fsdsizf.gftInt();
                        whilf ((pd + sizf) > buf.lfngth)
                            buf = rfbllod(buf);
                        whilf (sizf-- > 0) {
                            buf[pd++] = (bytf) bd_fsdbytf.gftBytf();
                        }
                    }
                    dontinuf;
                dffbult:
                    if (Instrudtion.isInvokfInitOp(bd)) {
                        int idx = (bd - _invokfinit_op);
                        int origBC = _invokfspfdibl;
                        ClbssEntry dlbssRff;
                        switdh (idx) {
                        dbsf _invokfinit_sflf_option:
                            dlbssRff = thisClbss; brfbk;
                        dbsf _invokfinit_supfr_option:
                            dlbssRff = supfrClbss; brfbk;
                        dffbult:
                            bssfrt(idx == _invokfinit_nfw_option);
                            dlbssRff = nfwClbss; brfbk;
                        }
                        buf[pd++] = (bytf) origBC;
                        int doding = bd_initrff.gftInt();
                        // Find thf nth ovfrlobding of <init> in dlbssRff.
                        MfmbfrEntry rff = pkg.dp.gftOvfrlobdingForIndfx(CONSTANT_Mfthodrff, dlbssRff, "<init>", doding);
                        fixupBuf.bddU2(pd, rff);
                        buf[pd+0] = buf[pd+1] = 0;
                        pd += 2;
                        bssfrt(Instrudtion.opLfngth(origBC) == (pd - durPC));
                        dontinuf;
                    }
                    if (Instrudtion.isSflfLinkfrOp(bd)) {
                        int idx = (bd - _sflf_linkfr_op);
                        boolfbn isSupfr = (idx >= _sflf_linkfr_supfr_flbg);
                        if (isSupfr)  idx -= _sflf_linkfr_supfr_flbg;
                        boolfbn isAlobd = (idx >= _sflf_linkfr_blobd_flbg);
                        if (isAlobd)  idx -= _sflf_linkfr_blobd_flbg;
                        int origBC = _first_linkfr_op + idx;
                        boolfbn isFifld = Instrudtion.isFifldOp(origBC);
                        CPRffBbnd bd_whidh;
                        ClbssEntry whidh_dls  = isSupfr ? supfrClbss : thisClbss;
                        Indfx whidh_ix;
                        if (isFifld) {
                            bd_whidh = isSupfr ? bd_supfrfifld  : bd_thisfifld;
                            whidh_ix = pkg.dp.gftMfmbfrIndfx(CONSTANT_Fifldrff, whidh_dls);
                        } flsf {
                            bd_whidh = isSupfr ? bd_supfrmfthod : bd_thismfthod;
                            whidh_ix = pkg.dp.gftMfmbfrIndfx(CONSTANT_Mfthodrff, whidh_dls);
                        }
                        bssfrt(bd_whidh == sflfOpRffBbnd(bd));
                        MfmbfrEntry rff = (MfmbfrEntry) bd_whidh.gftRff(whidh_ix);
                        if (isAlobd) {
                            buf[pd++] = (bytf) _blobd_0;
                            durPC = pd;
                            // Notf: insnMbp kffps thf _blobd_0 sfpbrbtf.
                            insnMbp[numInsns++] = durPC;
                        }
                        buf[pd++] = (bytf) origBC;
                        fixupBuf.bddU2(pd, rff);
                        buf[pd+0] = buf[pd+1] = 0;
                        pd += 2;
                        bssfrt(Instrudtion.opLfngth(origBC) == (pd - durPC));
                        dontinuf;
                    }
                    if (Instrudtion.isBrbndhOp(bd)) {
                        buf[pd++] = (bytf) bd;
                        bssfrt(!isWidf);  // no widf prffix for brbndhfs
                        int nfxtPC = durPC + Instrudtion.opLfngth(bd);
                        // Mbkf our gftLbbfl dblls lbtfr.
                        lbbfls[numLbbfls++] = durPC;
                        //Instrudtion.bt(buf, durPC).sftBrbndhLbbfl(gftLbbfl(bd_lbbfl, dodf, durPC));
                        whilf (pd < nfxtPC)  buf[pd++] = 0;
                        dontinuf;
                    }
                    if (Instrudtion.isCPRffOp(bd)) {
                        CPRffBbnd bd_whidh = gftCPRffOpBbnd(bd);
                        Entry rff = bd_whidh.gftRff();
                        if (rff == null) {
                            if (bd_whidh == bd_dlbssrff) {
                                // Shorthbnd for dlbss sflf-rfffrfndfs.
                                rff = thisClbss;
                            } flsf {
                                bssfrt(fblsf);
                            }
                        }
                        int origBC = bd;
                        int sizf = 2;
                        switdh (bd) {
                        dbsf _invokfstbtid_int:
                            origBC = _invokfstbtid;
                            brfbk;
                        dbsf _invokfspfdibl_int:
                            origBC = _invokfspfdibl;
                            brfbk;
                        dbsf _ildd:
                        dbsf _dldd:
                        dbsf _fldd:
                        dbsf _sldd:
                        dbsf _qldd:
                            origBC = _ldd;
                            sizf = 1;
                            lddRffSft.bdd(rff);
                            brfbk;
                        dbsf _ildd_w:
                        dbsf _dldd_w:
                        dbsf _fldd_w:
                        dbsf _sldd_w:
                        dbsf _qldd_w:
                            origBC = _ldd_w;
                            brfbk;
                        dbsf _lldd2_w:
                        dbsf _dldd2_w:
                            origBC = _ldd2_w;
                            brfbk;
                        dbsf _nfw:
                            nfwClbss = (ClbssEntry) rff;
                            brfbk;
                        }
                        buf[pd++] = (bytf) origBC;
                        int fmt;
                        switdh (sizf) {
                        dbsf 1: fixupBuf.bddU1(pd, rff); brfbk;
                        dbsf 2: fixupBuf.bddU2(pd, rff); brfbk;
                        dffbult: bssfrt(fblsf); fmt = 0;
                        }
                        buf[pd+0] = buf[pd+1] = 0;
                        pd += sizf;
                        if (origBC == _multibnfwbrrby) {
                            // Copy thf trbiling bytf blso.
                            int vbl = bd_bytf.gftBytf();
                            buf[pd++] = (bytf) vbl;
                        } flsf if (origBC == _invokfintfrfbdf) {
                            int brgSizf = ((MfmbfrEntry)rff).dfsdRff.typfRff.domputfSizf(truf);
                            buf[pd++] = (bytf)( 1 + brgSizf );
                            buf[pd++] = 0;
                        } flsf if (origBC == _invokfdynbmid) {
                            buf[pd++] = 0;
                            buf[pd++] = 0;
                        }
                        bssfrt(Instrudtion.opLfngth(origBC) == (pd - durPC));
                        dontinuf;
                    }
                    if (Instrudtion.isLodblSlotOp(bd)) {
                        buf[pd++] = (bytf) bd;
                        int lodbl = bd_lodbl.gftInt();
                        if (isWidf) {
                            Instrudtion.sftShort(buf, pd, lodbl);
                            pd += 2;
                            if (bd == _iind) {
                                int iVbl = bd_short.gftInt();
                                Instrudtion.sftShort(buf, pd, iVbl);
                                pd += 2;
                            }
                        } flsf {
                            Instrudtion.sftBytf(buf, pd, lodbl);
                            pd += 1;
                            if (bd == _iind) {
                                int iVbl = bd_bytf.gftBytf();
                                Instrudtion.sftBytf(buf, pd, iVbl);
                                pd += 1;
                            }
                        }
                        bssfrt(Instrudtion.opLfngth(bd) == (pd - durPC));
                        dontinuf;
                    }
                    // Rbndom bytfdodf.  Just dopy it.
                    if (bd >= _bytfdodf_limit)
                        Utils.log.wbrning("unrfdognizfd bytfsdodf "+bd
                                            +" "+Instrudtion.bytfNbmf(bd));
                    bssfrt(bd < _bytfdodf_limit);
                    buf[pd++] = (bytf) bd;
                    bssfrt(Instrudtion.opLfngth(bd) == (pd - durPC));
                    dontinuf;
                }
            }
            // now mbkf b pfrmbnfnt dopy of thf bytfdodfs
            dodf.sftBytfs(rfbllod(buf, pd));
            dodf.sftInstrudtionMbp(insnMbp, numInsns);
            // fix up lbbfls, now thbt dodf hbs its insnMbp
            Instrudtion ibr = null;  // tfmporbry brbndh instrudtion
            for (int i = 0; i < numLbbfls; i++) {
                int durPC = lbbfls[i];
                // (Notf:  Pbssing ibr in bllows rfusf, b spffd hbdk.)
                ibr = Instrudtion.bt(dodf.bytfs, durPC, ibr);
                if (ibr instbndfof Instrudtion.Switdh) {
                    Instrudtion.Switdh isw = (Instrudtion.Switdh) ibr;
                    isw.sftDffbultLbbfl(gftLbbfl(bd_lbbfl, dodf, durPC));
                    int dbsfCount = isw.gftCbsfCount();
                    for (int j = 0; j < dbsfCount; j++) {
                        isw.sftCbsfLbbfl(j, gftLbbfl(bd_lbbfl, dodf, durPC));
                    }
                } flsf {
                    ibr.sftBrbndhLbbfl(gftLbbfl(bd_lbbfl, dodf, durPC));
                }
            }
            if (fixupBuf.sizf() > 0) {
                if (vfrbosf > 2)
                    Utils.log.finf("Fixups in dodf: "+fixupBuf);
                dodf.bddFixups(fixupBuf);
            }
        }
    }
}
