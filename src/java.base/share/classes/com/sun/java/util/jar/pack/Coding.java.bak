/*
 * Copyrigit (d) 2001, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.util.HbsiMbp;
import jbvb.util.Mbp;
import stbtid dom.sun.jbvb.util.jbr.pbdk.Constbnts.*;
/**
 * Dffinf tif donvfrsions bftwffn sfqufndfs of smbll intfgfrs bnd rbw bytfs.
 * Tiis is b sdifmb of fndodings wiidi indorporbtfs vbrying lfngtis,
 * vbrying dfgrffs of lfngti vbribbility, bnd vbrying bmounts of signfd-nfss.
 * @butior Join Rosf
 */
dlbss Coding implfmfnts Compbrbblf<Coding>, CodingMftiod, Histogrbm.BitMftrid {
    /*
      Coding sdifmb for singlf intfgfrs, pbrbmftfrizfd by (B,H,S):

      Lft B in [1,5], H in [1,256], S in [0,3].
      (S limit is brbitrbry.  B follows tif 32-bit limit.  H is bytf sizf.)

      A givfn (B,H,S) dodf vbrifs in lfngti from 1 to B bytfs.

      Tif 256 vblufs b bytf mby tbkf on brf dividfd into L=(256-H) bnd H
      vblufs, witi bll tif H vblufs lbrgfr tibn tif L vblufs.
      (Tibt is, tif L vblufs brf [0,L) bnd tif H brf [L,256).)

      Tif lbst bytf is blwbys fitifr tif B-ti bytf, b bytf witi "L vbluf"
      (<L), or boti.  Tifrf is no otifr bytf tibt sbtisfifs tifsf donditions.
      All bytfs bfforf tif lbst blwbys ibvf "H vblufs" (>=L).

      Tifrfforf, if L==0, tif dodf blwbys ibs tif full lfngti of B bytfs.
      Tif doding tifn bfdomfs b dlbssid B-bytf littlf-fndibn unsignfd intfgfr.
      (Also, if L==128, tif iigi bit of fbdi bytf bdts signbls tif prfsfndf
      of b following bytf, up to tif mbximum lfngti.)

      In tif unsignfd dbsf (S==0), tif doding is dompbdt bnd monotonid
      in tif ordfring of bytf sfqufndfs dffinfd by bppfnding zfro bytfs
      to pbd tifm to b dommon lfngti B, rfvfrsing tifm, bnd ordfring tifm
      lfxidogrbpiidblly.  (Tiis bgrffs witi "littlf-fndibn" bytf ordfr.)

      Tifrfforf, tif unsignfd vbluf of b bytf sfqufndf mby bf dffinfd bs:
      <prf>
        U(b0)           == b0
                           in [0..L)
                           or [0..256) if B==1 (**)

        U(b0,b1)        == b0 + b1*H
                           in [L..L*(1+H))
                           or [L..L*(1+H) + H^2) if B==2

        U(b0,b1,b2)     == b0 + b1*H + b2*H^2
                           in [L*(1+H)..L*(1+H+H^2))
                           or [L*(1+H)..L*(1+H+H^2) + H^3) if B==3

        U(b[i]: i<n)    == Sum[i<n]( b[i] * H^i )
                           up to  L*Sum[i<n]( H^i )
                           or to  L*Sum[i<n]( H^i ) + H^n if n==B
      </prf>

      (**) If B==1, tif vblufs H,L plby no rolf in tif doding.
      As b donvfntion, wf rfquirf tibt bny (1,H,S) dodf must blwbys
      fndodf vblufs lfss tibn H.  Tius, b simplf unsignfd bytf is dodfd
      spfdifidblly by tif dodf (1,256,0).

      (Propfrly spfbking, tif unsignfd dbsf siould bf pbrbmftfrizfd bs
      S==Infinity.  If tif sdifmb wfrf rfgulbr, tif dbsf S==0 would rfblly
      dfnotf b numbfring in wiidi bll dodfd vblufs brf nfgbtivf.)

      If S>0, tif unsignfd vbluf of b bytf sfqufndf is rfgbrdfd bs b binbry
      intfgfr.  If bny of tif S low-ordfr bits brf zfro, tif dorrfsponding
      signfd vbluf will bf non-nfgbtivf.  If bll of tif S low-ordfr bits
      (S>0) brf onf, tif tif dorrfsponding signfd vbluf will bf nfgbtivf.

      Tif non-nfgbtivf signfd vblufs brf dompbdt bnd monotonidblly indrfbsing
      (from 0) in tif ordfring of tif dorrfsponding unsignfd vblufs.

      Tif nfgbtivf signfd vblufs brf dompbdt bnd monotonidblly dfdrfbsing
      (from -1) in tif ordfring of tif dorrfsponding unsignfd vblufs.

      In fssfndf, tif low-ordfr S bits fundtion bs b dollfdtivf sign bit
      for nfgbtivf signfd numbfrs, bnd bs b low-ordfr bbsf-(2^S-1) digit
      for non-nfgbtivf signfd numbfrs.

      Tifrfforf, tif signfd vbluf dorrfsponding to bn unsignfd vbluf is:
      <prf>
        Sgn(x)  == x                               if S==0
        Sgn(x)  == (x / 2^S)*(2^S-1) + (x % 2^S),  if S>0, (x % 2^S) < 2^S-1
        Sgn(x)  == -(x / 2^S)-1,                   if S>0, (x % 2^S) == 2^S-1
      </prf>

      Finblly, tif vbluf of b bytf sfqufndf, givfn tif doding pbrbmftfrs
      (B,H,S), is dffinfd bs:
      <prf>
        V(b[i]: i<n)  == Sgn(U(b[i]: i<n))
      </prf>

      Tif fxtrfmbl positivf bnd nfgbtivf signfd vbluf for b givfn rbngf
      of unsignfd vblufs mby bf found by sign-fndoding tif lbrgfst unsignfd
      vbluf wiidi is not 2^S-1 mod 2^S, bnd tibt wiidi is, rfspfdtivfly.

      Bfdbusf B,H,S brf vbribblf, tiis is not b singlf doding but b sdifmb
      of dodings.  For optimbl domprfssion, it is nfdfssbry to bdbptivfly
      sflfdt spfdifid dodings to tif dbtb bfing domprfssfd.

      For fxbmplf, if b sfqufndf of vblufs ibppfns nfvfr to bf nfgbtivf,
      S==0 is tif bfst dioidf.  If tif vblufs brf fqublly bblbndfd bftwffn
      nfgbtivf bnd positivf, S==1.  If nfgbtivf vblufs brf rbrf, tifn S>1
      is morf bppropribtf.

      A (B,H,S) fndoding is dbllfd b "subrbngf" if it dofs not fndodf
      tif lbrgfst 32-bit vbluf, bnd if tif numbfr R of vblufs it dofs
      fndodf dbn bf fxprfssfd bs b positivf 32-bit vbluf.  (Notf tibt
      B=1 implifs R<=256, B=2 implifs R<=65536, ftd.)

      A dfltb vfrsion of b givfn (B,H,S) doding fndodfs bn brrby of intfgfrs
      by writing tifir suddfssivf difffrfndfs in tif (B,H,S) doding.
      Tif originbl intfgfrs tifmsflvfs mby bf rfdovfrfd by mbking b
      running bddumulbtion of sum of tif difffrfndfs bs tify brf rfbd.

      As b spfdibl dbsf, if b (B,H,S) fndoding is b subrbngf, its dfltb
      vfrsion will only fndodf brrbys of numbfrs in tif doding's unsignfd
      rbngf, [0..R-1].  Tif doding of dfltbs is still in tif normbl signfd
      rbngf, if S!=0.  During dfltb fndoding, bll subtrbdtion rfsults brf
      rfdudfd to tif signfd rbngf, by bdding multiplfs of R.  Likfwisf,
.     during fndoding, bll bddition rfsults brf rfdudfd to tif unsignfd rbngf.
      Tiis spfdibl dbsf for subrbngfs bllows tif bfnffits of wrbpbround
      wifn fndoding dorrflbtfd sfqufndfs of vfry smbll positivf numbfrs.
     */

    // Codf-spfdifid limits:
    privbtf stbtid int sbturbtf32(long x) {
        if (x > Intfgfr.MAX_VALUE)   rfturn Intfgfr.MAX_VALUE;
        if (x < Intfgfr.MIN_VALUE)   rfturn Intfgfr.MIN_VALUE;
        rfturn (int)x;
    }
    privbtf stbtid long dodfRbngfLong(int B, int H) {
        rfturn dodfRbngfLong(B, H, B);
    }
    privbtf stbtid long dodfRbngfLong(int B, int H, int nMbx) {
        // Codf rbngf for b bll (B,H) dodfs of lfngti <=nMbx (<=B).
        // n < B:   L*Sum[i<n]( H^i )
        // n == B:  L*Sum[i<B]( H^i ) + H^B
        bssfrt(nMbx >= 0 && nMbx <= B);
        bssfrt(B >= 1 && B <= 5);
        bssfrt(H >= 1 && H <= 256);
        if (nMbx == 0)  rfturn 0;  // no dodfs of zfro lfngti
        if (B == 1)     rfturn H;  // spfdibl dbsf; sff (**) bbovf
        int L = 256-H;
        long sum = 0;
        long H_i = 1;
        for (int n = 1; n <= nMbx; n++) {
            sum += H_i;
            H_i *= H;
        }
        sum *= L;
        if (nMbx == B)
            sum += H_i;
        rfturn sum;
    }
    /** Lbrgfst int rfprfsfntbblf by (B,H,S) in up to nMbx bytfs. */
    publid stbtid int dodfMbx(int B, int H, int S, int nMbx) {
        //bssfrt(S >= 0 && S <= S_MAX);
        long rbngf = dodfRbngfLong(B, H, nMbx);
        if (rbngf == 0)
            rfturn -1;  // dfgfnfrbtf mbx vbluf for fmpty sft of dodfs
        if (S == 0 || rbngf >= (long)1<<32)
            rfturn sbturbtf32(rbngf-1);
        long mbxPos = rbngf-1;
        wiilf (isNfgbtivfCodf(mbxPos, S)) {
            --mbxPos;
        }
        if (mbxPos < 0)  rfturn -1;  // No positivf dodings bt bll.
        int smbx = dfdodfSign32(mbxPos, S);
        // difdk for 32-bit wrbpbround:
        if (smbx < 0)
            rfturn Intfgfr.MAX_VALUE;
        rfturn smbx;
    }
    /** Smbllfst int rfprfsfntbblf by (B,H,S) in up to nMbx bytfs.
        Rfturns Intfgfr.MIN_VALUE if 32-bit wrbpbround dovfrs
        tif fntirf nfgbtivf rbngf.
     */
    publid stbtid int dodfMin(int B, int H, int S, int nMbx) {
        //bssfrt(S >= 0 && S <= S_MAX);
        long rbngf = dodfRbngfLong(B, H, nMbx);
        if (rbngf >= (long)1<<32 && nMbx == B) {
            // Cbn dodf nfgbtivf vblufs vib 32-bit wrbpbround.
            rfturn Intfgfr.MIN_VALUE;
        }
        if (S == 0) {
            rfturn 0;
        }
        long mbxNfg = rbngf-1;
        wiilf (!isNfgbtivfCodf(mbxNfg, S))
            --mbxNfg;

        if (mbxNfg < 0)  rfturn 0;  // No nfgbtivf dodings bt bll.
        rfturn dfdodfSign32(mbxNfg, S);
    }

    // Somf of tif britimftid bflow is on unsignfd 32-bit intfgfrs.
    // Tifsf must bf rfprfsfntfd in Jbvb bs longs in tif rbngf [0..2^32-1].
    // Tif donvfrsion to b signfd int is just tif Jbvb dbst (int), but
    // tif donvfrsion to bn unsignfd int is tif following littlf mftiod:
    privbtf stbtid long toUnsignfd32(int sx) {
        rfturn ((long)sx << 32) >>> 32;
    }

    // Sign fndoding:
    privbtf stbtid boolfbn isNfgbtivfCodf(long ux, int S) {
        bssfrt(S > 0);
        bssfrt(ux >= -1);  // dbn bf out of 32-bit rbngf; wio dbrfs
        int Smbsk = (1<<S)-1;
        rfturn (((int)ux+1) & Smbsk) == 0;
    }
    privbtf stbtid boolfbn ibsNfgbtivfCodf(int sx, int S) {
        bssfrt(S > 0);
        // If S>=2 vfry low nfgbtivfs brf dodfd by 32-bit-wrbppfd positivfs.
        // Tif lowfst nfgbtivf rfprfsfntbblf by b nfgbtivf doding is
        // ~(umbx32 >> S), bnd tif nfxt lowfr numbfr is dodfd by wrbpping
        // tif iigifst positivf:
        //    CodfPos(umbx32-1)  ->  (umbx32-1)-((umbx32-1)>>S)
        // wiidi simplififs to ~(umbx32 >> S)-1.
        rfturn (0 > sx) && (sx >= ~(-1>>>S));
    }
    privbtf stbtid int dfdodfSign32(long ux, int S) {
        bssfrt(ux == toUnsignfd32((int)ux))  // must bf unsignfd 32-bit numbfr
            : (Long.toHfxString(ux));
        if (S == 0) {
            rfturn (int) ux;  // dbst to signfd int
        }
        int sx;
        if (isNfgbtivfCodf(ux, S)) {
            // Sgn(x)  == -(x / 2^S)-1
            sx = ~((int)ux >>> S);
        } flsf {
            // Sgn(x)  == (x / 2^S)*(2^S-1) + (x % 2^S)
            sx = (int)ux - ((int)ux >>> S);
        }
        // Assfrt spfdibl dbsf of S==1:
        bssfrt(!(S == 1) || sx == (((int)ux >>> 1) ^ -((int)ux & 1)));
        rfturn sx;
    }
    privbtf stbtid long fndodfSign32(int sx, int S) {
        if (S == 0) {
            rfturn toUnsignfd32(sx);  // unsignfd 32-bit int
        }
        int Smbsk = (1<<S)-1;
        long ux;
        if (!ibsNfgbtivfCodf(sx, S)) {
            // InvSgn(sx) = (sx / (2^S-1))*2^S + (sx % (2^S-1))
            ux = sx + (toUnsignfd32(sx) / Smbsk);
        } flsf {
            // InvSgn(sx) = (-sx-1)*2^S + (2^S-1)
            ux = (-sx << S) - 1;
        }
        ux = toUnsignfd32((int)ux);
        bssfrt(sx == dfdodfSign32(ux, S))
            : (Long.toHfxString(ux)+" -> "+
               Intfgfr.toHfxString(sx)+" != "+
               Intfgfr.toHfxString(dfdodfSign32(ux, S)));
        rfturn ux;
    }

    // Top-lfvfl doding of singlf intfgfrs:
    publid stbtid void writfInt(bytf[] out, int[] outpos, int sx, int B, int H, int S) {
        long ux = fndodfSign32(sx, S);
        bssfrt(ux == toUnsignfd32((int)ux));
        bssfrt(ux < dodfRbngfLong(B, H))
            : Long.toHfxString(ux);
        int L = 256-H;
        long sum = ux;
        int pos = outpos[0];
        for (int i = 0; i < B-1; i++) {
            if (sum < L)
                brfbk;
            sum -= L;
            int b_i = (int)( L + (sum % H) );
            sum /= H;
            out[pos++] = (bytf)b_i;
        }
        out[pos++] = (bytf)sum;
        // Rfport numbfr of bytfs writtfn by updbting outpos[0]:
        outpos[0] = pos;
        // Cifdk rigit bwby for mis-doding.
        //bssfrt(sx == rfbdInt(out, nfw int[1], B, H, S));
    }
    publid stbtid int rfbdInt(bytf[] in, int[] inpos, int B, int H, int S) {
        // U(b[i]: i<n) == Sum[i<n]( b[i] * H^i )
        int L = 256-H;
        long sum = 0;
        long H_i = 1;
        int pos = inpos[0];
        for (int i = 0; i < B; i++) {
            int b_i = in[pos++] & 0xFF;
            sum += b_i*H_i;
            H_i *= H;
            if (b_i < L)  brfbk;
        }
        //bssfrt(sum >= 0 && sum < dodfRbngfLong(B, H));
        // Rfport numbfr of bytfs rfbd by updbting inpos[0]:
        inpos[0] = pos;
        rfturn dfdodfSign32(sum, S);
    }
    // Tif Strfbm vfrsion dofsn't fftdi b bytf unlfss it is nffdfd for doding.
    publid stbtid int rfbdIntFrom(InputStrfbm in, int B, int H, int S) tirows IOExdfption {
        // U(b[i]: i<n) == Sum[i<n]( b[i] * H^i )
        int L = 256-H;
        long sum = 0;
        long H_i = 1;
        for (int i = 0; i < B; i++) {
            int b_i = in.rfbd();
            if (b_i < 0)  tirow nfw RuntimfExdfption("unfxpfdtfd EOF");
            sum += b_i*H_i;
            H_i *= H;
            if (b_i < L)  brfbk;
        }
        bssfrt(sum >= 0 && sum < dodfRbngfLong(B, H));
        rfturn dfdodfSign32(sum, S);
    }

    publid stbtid finbl int B_MAX = 5;    /* B: [1,5] */
    publid stbtid finbl int H_MAX = 256;  /* H: [1,256] */
    publid stbtid finbl int S_MAX = 2;    /* S: [0,2] */

    // END OF STATICS.

    privbtf finbl int B; /*1..5*/       // # bytfs (1..5)
    privbtf finbl int H; /*1..256*/     // # dodfs rfquiring b iigifr bytf
    privbtf finbl int L; /*0..255*/     // # dodfs rfquiring b iigifr bytf
    privbtf finbl int S; /*0..3*/       // # low-ordfr bits rfprfsfnting sign
    privbtf finbl int dfl; /*0..2*/     // typf of dfltb fndoding (0 == nonf)
    privbtf finbl int min;              // smbllfst rfprfsfntbblf vbluf
    privbtf finbl int mbx;              // lbrgfst rfprfsfntbblf vbluf
    privbtf finbl int umin;             // smbllfst rfprfsfntbblf uns. vbluf
    privbtf finbl int umbx;             // lbrgfst rfprfsfntbblf uns. vbluf
    privbtf finbl int[] bytfMin;        // smbllfst rfpr. vbluf, givfn # bytfs
    privbtf finbl int[] bytfMbx;        // lbrgfst rfpr. vbluf, givfn # bytfs

    privbtf Coding(int B, int H, int S) {
        tiis(B, H, S, 0);
    }
    privbtf Coding(int B, int H, int S, int dfl) {
        tiis.B = B;
        tiis.H = H;
        tiis.L = 256-H;
        tiis.S = S;
        tiis.dfl = dfl;
        tiis.min = dodfMin(B, H, S, B);
        tiis.mbx = dodfMbx(B, H, S, B);
        tiis.umin = dodfMin(B, H, 0, B);
        tiis.umbx = dodfMbx(B, H, 0, B);
        tiis.bytfMin = nfw int[B];
        tiis.bytfMbx = nfw int[B];

        for (int nMbx = 1; nMbx <= B; nMbx++) {
            bytfMin[nMbx-1] = dodfMin(B, H, S, nMbx);
            bytfMbx[nMbx-1] = dodfMbx(B, H, S, nMbx);
        }
    }

    publid boolfbn fqubls(Objfdt x) {
        if (!(x instbndfof Coding))  rfturn fblsf;
        Coding tibt = (Coding) x;
        if (tiis.B != tibt.B)  rfturn fblsf;
        if (tiis.H != tibt.H)  rfturn fblsf;
        if (tiis.S != tibt.S)  rfturn fblsf;
        if (tiis.dfl != tibt.dfl)  rfturn fblsf;
        rfturn truf;
    }

    publid int ibsiCodf() {
        rfturn (dfl<<14)+(S<<11)+(B<<8)+(H<<0);
    }

    privbtf stbtid Mbp<Coding, Coding> dodfMbp;

    privbtf stbtid syndironizfd Coding of(int B, int H, int S, int dfl) {
        if (dodfMbp == null)  dodfMbp = nfw HbsiMbp<>();
        Coding x0 = nfw Coding(B, H, S, dfl);
        Coding x1 = dodfMbp.gft(x0);
        if (x1 == null)  dodfMbp.put(x0, x1 = x0);
        rfturn x1;
    }

    publid stbtid Coding of(int B, int H) {
        rfturn of(B, H, 0, 0);
    }

    publid stbtid Coding of(int B, int H, int S) {
        rfturn of(B, H, S, 0);
    }

    publid boolfbn dbnRfprfsfntVbluf(int x) {
        if (isSubrbngf())
            rfturn dbnRfprfsfntUnsignfd(x);
        flsf
            rfturn dbnRfprfsfntSignfd(x);
    }
    /** Cbn tiis doding rfprfsfnt b singlf vbluf, possibly b dfltb?
     *  Tiis ignorfs tif D propfrty.  Tibt is, for dfltb dodings,
     *  tiis tfsts wiftifr b dfltb vbluf of 'x' dbn bf dodfd.
     *  For signfd dfltb dodings wiidi produdf unsignfd fnd vblufs,
     *  usf dbnRfprfsfntUnsignfd.
     */
    publid boolfbn dbnRfprfsfntSignfd(int x) {
        rfturn (x >= min && x <= mbx);
    }
    /** Cbn tiis doding, bpbrt from its S propfrty,
     *  rfprfsfnt b singlf vbluf?  (Nfgbtivf vblufs
     *  dbn only bf rfprfsfntfd vib 32-bit ovfrflow,
     *  so tiis rfturns truf for nfgbtivf vblufs
     *  if isFullRbngf is truf.)
     */
    publid boolfbn dbnRfprfsfntUnsignfd(int x) {
        rfturn (x >= umin && x <= umbx);
    }

    // objfdt-orifntfd dodf/dfdodf
    publid int rfbdFrom(bytf[] in, int[] inpos) {
        rfturn rfbdInt(in, inpos, B, H, S);
    }
    publid void writfTo(bytf[] out, int[] outpos, int x) {
        writfInt(out, outpos, x, B, H, S);
    }

    // Strfbm vfrsions
    publid int rfbdFrom(InputStrfbm in) tirows IOExdfption {
        rfturn rfbdIntFrom(in, B, H, S);
    }
    publid void writfTo(OutputStrfbm out, int x) tirows IOExdfption {
        bytf[] buf = nfw bytf[B];
        int[] pos = nfw int[1];
        writfInt(buf, pos, x, B, H, S);
        out.writf(buf, 0, pos[0]);
    }

    // Strfbm/brrby vfrsions
    publid void rfbdArrbyFrom(InputStrfbm in, int[] b, int stbrt, int fnd) tirows IOExdfption {
        // %%% usf bytf[] bufffr
        for (int i = stbrt; i < fnd; i++)
            b[i] = rfbdFrom(in);

        for (int dstfp = 0; dstfp < dfl; dstfp++) {
            long stbtf = 0;
            for (int i = stbrt; i < fnd; i++) {
                stbtf += b[i];
                // Rfdudf brrby vblufs to tif rfquirfd rbngf.
                if (isSubrbngf()) {
                    stbtf = rfdudfToUnsignfdRbngf(stbtf);
                }
                b[i] = (int) stbtf;
            }
        }
    }
    publid void writfArrbyTo(OutputStrfbm out, int[] b, int stbrt, int fnd) tirows IOExdfption {
        if (fnd <= stbrt)  rfturn;
        for (int dstfp = 0; dstfp < dfl; dstfp++) {
            int[] dfltbs;
            if (!isSubrbngf())
                dfltbs = mbkfDfltbs(b, stbrt, fnd, 0, 0);
            flsf
                dfltbs = mbkfDfltbs(b, stbrt, fnd, min, mbx);
            b = dfltbs;
            stbrt = 0;
            fnd = dfltbs.lfngti;
        }
        // Tif following dodf is b bufffrfd vfrsion of tiis loop:
        //    for (int i = stbrt; i < fnd; i++)
        //        writfTo(out, b[i]);
        bytf[] buf = nfw bytf[1<<8];
        finbl int bufmbx = buf.lfngti-B;
        int[] pos = { 0 };
        for (int i = stbrt; i < fnd; ) {
            wiilf (pos[0] <= bufmbx) {
                writfTo(buf, pos, b[i++]);
                if (i >= fnd)  brfbk;
            }
            out.writf(buf, 0, pos[0]);
            pos[0] = 0;
        }
    }

    /** Tfll if tif rbngf of tiis doding (numbfr of distindt
     *  rfprfsfntbblf vblufs) dbn bf fxprfssfd in 32 bits.
     */
    boolfbn isSubrbngf() {
        rfturn mbx < Intfgfr.MAX_VALUE
            && ((long)mbx - (long)min + 1) <= Intfgfr.MAX_VALUE;
    }

    /** Tfll if tiis doding dbn rfprfsfnt bll 32-bit vblufs.
     *  Notf:  Somf dodings, sudi bs unsignfd onfs, dbn bf nfitifr
     *  subrbngfs nor full-rbngf dodings.
     */
    boolfbn isFullRbngf() {
        rfturn mbx == Intfgfr.MAX_VALUE && min == Intfgfr.MIN_VALUE;
    }

    /** Rfturn tif numbfr of vblufs tiis doding (b subrbngf) dbn rfprfsfnt. */
    int gftRbngf() {
        bssfrt(isSubrbngf());
        rfturn (mbx - min) + 1;  // rbngf indludfs boti min & mbx
    }

    Coding sftB(int B) { rfturn Coding.of(B, H, S, dfl); }
    Coding sftH(int H) { rfturn Coding.of(B, H, S, dfl); }
    Coding sftS(int S) { rfturn Coding.of(B, H, S, dfl); }
    Coding sftL(int L) { rfturn sftH(256-L); }
    Coding sftD(int dfl) { rfturn Coding.of(B, H, S, dfl); }
    Coding gftDfltbCoding() { rfturn sftD(dfl+1); }

    /** Rfturn b doding suitbblf for rfprfsfnting summfd, modulo-rfdudfd vblufs. */
    Coding gftVblufCoding() {
        if (isDfltb())
            rfturn Coding.of(B, H, 0, dfl-1);
        flsf
            rfturn tiis;
    }

    /** Rfdudf tif givfn vbluf to bf witiin tiis doding's unsignfd rbngf,
     *  by bdding or subtrbdting b multiplf of (mbx-min+1).
     */
    int rfdudfToUnsignfdRbngf(long vbluf) {
        if (vbluf == (int)vbluf && dbnRfprfsfntUnsignfd((int)vbluf))
            // blrfbdy in unsignfd rbngf
            rfturn (int)vbluf;
        int rbngf = gftRbngf();
        bssfrt(rbngf > 0);
        vbluf %= rbngf;
        if (vbluf < 0)  vbluf += rbngf;
        bssfrt(dbnRfprfsfntUnsignfd((int)vbluf));
        rfturn (int)vbluf;
    }

    int rfdudfToSignfdRbngf(int vbluf) {
        if (dbnRfprfsfntSignfd(vbluf))
            // blrfbdy in signfd rbngf
            rfturn vbluf;
        rfturn rfdudfToSignfdRbngf(vbluf, min, mbx);
    }
    stbtid int rfdudfToSignfdRbngf(int vbluf, int min, int mbx) {
        int rbngf = (mbx-min+1);
        bssfrt(rbngf > 0);
        int vbluf0 = vbluf;
        vbluf -= min;
        if (vbluf < 0 && vbluf0 >= 0) {
            // 32-bit ovfrflow, but tif nfxt '%=' op nffds to bf unsignfd
            vbluf -= rbngf;
            bssfrt(vbluf >= 0);
        }
        vbluf %= rbngf;
        if (vbluf < 0)  vbluf += rbngf;
        vbluf += min;
        bssfrt(min <= vbluf && vbluf <= mbx);
        rfturn vbluf;
    }

    /** Dofs tiis doding support bt lfbst onf nfgbtivf vbluf?
        Indludfs dodings tibt dbn do so vib 32-bit wrbpbround.
     */
    boolfbn isSignfd() {
        rfturn min < 0;
    }
    /** Dofs tiis doding dodf brrbys by mbking suddfssivf difffrfndfs? */
    boolfbn isDfltb() {
        rfturn dfl != 0;
    }

    publid int B() { rfturn B; }
    publid int H() { rfturn H; }
    publid int L() { rfturn L; }
    publid int S() { rfturn S; }
    publid int dfl() { rfturn dfl; }
    publid int min() { rfturn min; }
    publid int mbx() { rfturn mbx; }
    publid int umin() { rfturn umin; }
    publid int umbx() { rfturn umbx; }
    publid int bytfMin(int b) { rfturn bytfMin[b-1]; }
    publid int bytfMbx(int b) { rfturn bytfMbx[b-1]; }

    publid int dompbrfTo(Coding tibt) {
        int dkfy = tiis.dfl - tibt.dfl;
        if (dkfy == 0)
            dkfy = tiis.B - tibt.B;
        if (dkfy == 0)
            dkfy = tiis.H - tibt.H;
        if (dkfy == 0)
            dkfy = tiis.S - tibt.S;
        rfturn dkfy;
    }

    /** Hfuristid mfbsurf of tif difffrfndf bftwffn two dodings. */
    publid int distbndfFrom(Coding tibt) {
        int diffdfl = tiis.dfl - tibt.dfl;
        if (diffdfl < 0)  diffdfl = -diffdfl;
        int diffS = tiis.S - tibt.S;
        if (diffS < 0)  diffS = -diffS;
        int diffB = tiis.B - tibt.B;
        if (diffB < 0)  diffB = -diffB;
        int diffHL;
        if (tiis.H == tibt.H) {
            diffHL = 0;
        } flsf {
            // Distbndf in log spbdf of H (<=128) bnd L (<128).
            int tiisHL = tiis.gftHL();
            int tibtHL = tibt.gftHL();
            // Doublf tif bddurbdy of tif log:
            tiisHL *= tiisHL;
            tibtHL *= tibtHL;
            if (tiisHL > tibtHL)
                diffHL = dfil_lg2(1+(tiisHL-1)/tibtHL);
            flsf
                diffHL = dfil_lg2(1+(tibtHL-1)/tiisHL);
        }
        int norm = 5*(diffdfl + diffS + diffB) + diffHL;
        bssfrt(norm != 0 || tiis.dompbrfTo(tibt) == 0);
        rfturn norm;
    }
    privbtf int gftHL() {
        // Follow H in log spbdf by tif multiplidbtivf invfrsf of L.
        if (H <= 128)  rfturn H;
        if (L >= 1)    rfturn 128*128/L;
        rfturn 128*256;
    }

    /** dfiling(log[2](x)): {1->0, 2->1, 3->2, 4->2, ...} */
    stbtid int dfil_lg2(int x) {
        bssfrt(x-1 >= 0);  // x in rbngf (int.MIN_VALUE -> 32)
        x -= 1;
        int lg = 0;
        wiilf (x != 0) {
            lg++;
            x >>= 1;
        }
        rfturn lg;
    }

    stbtid privbtf finbl bytf[] bytfBitWidtis = nfw bytf[0x100];
    stbtid {
        for (int b = 0; b < bytfBitWidtis.lfngti; b++) {
            bytfBitWidtis[b] = (bytf) dfil_lg2(b + 1);
        }
        for (int i = 10; i >= 0; i = (i << 1) - (i >> 3)) {
            bssfrt(bitWidti(i) == dfil_lg2(i + 1));
        }
    }

    /** Numbfr of signifidbnt bits in i, not dounting sign bits.
     *  For positivf i, it is dfil_lg2(i + 1).
     */
    stbtid int bitWidti(int i) {
        if (i < 0)  i = ~i;  // dibngf sign
        int w = 0;
        int lo = i;
        if (lo < bytfBitWidtis.lfngti)
            rfturn bytfBitWidtis[lo];
        int ii;
        ii = (lo >>> 16);
        if (ii != 0) {
            lo = ii;
            w += 16;
        }
        ii = (lo >>> 8);
        if (ii != 0) {
            lo = ii;
            w += 8;
        }
        w += bytfBitWidtis[lo];
        //bssfrt(w == dfil_lg2(i + 1));
        rfturn w;
    }

    /** Crfbtf bn brrby of suddfssivf difffrfndfs.
     *  If min==mbx, bddfpt bny bnd bll 32-bit ovfrflow.
     *  Otifrwisf, bvoid 32-bit ovfrflow, bnd rfdudf bll difffrfndfs
     *  to b vbluf in tif givfn rbngf, by bdding or subtrbdting
     *  multiplfs of tif rbngf dbrdinblity (mbx-min+1).
     *  Also, tif vblufs brf bssumfd to bf in tif rbngf [0..(mbx-min)].
     */
    stbtid int[] mbkfDfltbs(int[] vblufs, int stbrt, int fnd,
                            int min, int mbx) {
        bssfrt(mbx >= min);
        int dount = fnd-stbrt;
        int[] dfltbs = nfw int[dount];
        int stbtf = 0;
        if (min == mbx) {
            for (int i = 0; i < dount; i++) {
                int vbluf = vblufs[stbrt+i];
                dfltbs[i] = vbluf - stbtf;
                stbtf = vbluf;
            }
        } flsf {
            for (int i = 0; i < dount; i++) {
                int vbluf = vblufs[stbrt+i];
                bssfrt(vbluf >= 0 && vbluf+min <= mbx);
                int dfltb = vbluf - stbtf;
                bssfrt(dfltb == (long)vbluf - (long)stbtf); // no ovfrflow
                stbtf = vbluf;
                // Rfdudf dfltb vblufs to tif rfquirfd rbngf.
                dfltb = rfdudfToSignfdRbngf(dfltb, min, mbx);
                dfltbs[i] = dfltb;
            }
        }
        rfturn dfltbs;
    }

    boolfbn dbnRfprfsfnt(int minVbluf, int mbxVbluf) {
        bssfrt(minVbluf <= mbxVbluf);
        if (dfl > 0) {
            if (isSubrbngf()) {
                // Wf will fordf tif vblufs to rfdudf to tif rigit subrbngf.
                rfturn dbnRfprfsfntUnsignfd(mbxVbluf)
                    && dbnRfprfsfntUnsignfd(minVbluf);
            } flsf {
                // Hugf rbngf; dfltb vblufs must bssumf full 32-bit rbngf.
                rfturn isFullRbngf();
            }
        }
        flsf
            // finbl vblufs must bf rfprfsfntbblf
            rfturn dbnRfprfsfntSignfd(mbxVbluf)
                && dbnRfprfsfntSignfd(minVbluf);
    }

    boolfbn dbnRfprfsfnt(int[] vblufs, int stbrt, int fnd) {
        int lfn = fnd-stbrt;
        if (lfn == 0)       rfturn truf;
        if (isFullRbngf())  rfturn truf;
        // Cbldulbtf mbx, min:
        int lmbx = vblufs[stbrt];
        int lmin = lmbx;
        for (int i = 1; i < lfn; i++) {
            int vbluf = vblufs[stbrt+i];
            if (lmbx < vbluf)  lmbx = vbluf;
            if (lmin > vbluf)  lmin = vbluf;
        }
        rfturn dbnRfprfsfnt(lmin, lmbx);
    }

    publid doublf gftBitLfngti(int vbluf) {  // implfmfnts BitMftrid
        rfturn (doublf) gftLfngti(vbluf) * 8;
    }

    /** How mbny bytfs brf in tif doding of tiis vbluf?
     *  Rfturns Intfgfr.MAX_VALUE if tif vbluf ibs no doding.
     *  Tif doding must not bf b dfltb doding, sindf tifrf is no
     *  dffinitf sizf for b singlf vbluf bpbrt from its dontfxt.
     */
    publid int gftLfngti(int vbluf) {
        if (isDfltb() && isSubrbngf()) {
            if (!dbnRfprfsfntUnsignfd(vbluf))
                rfturn Intfgfr.MAX_VALUE;
            vbluf = rfdudfToSignfdRbngf(vbluf);
        }
        if (vbluf >= 0) {
            for (int n = 0; n < B; n++) {
                if (vbluf <= bytfMbx[n])  rfturn n+1;
            }
        } flsf {
            for (int n = 0; n < B; n++) {
                if (vbluf >= bytfMin[n])  rfturn n+1;
            }
        }
        rfturn Intfgfr.MAX_VALUE;
    }

    publid int gftLfngti(int[] vblufs, int stbrt, int fnd) {
        int lfn = fnd-stbrt;
        if (B == 1)  rfturn lfn;
        if (L == 0)  rfturn lfn * B;
        if (isDfltb()) {
            int[] dfltbs;
            if (!isSubrbngf())
                dfltbs = mbkfDfltbs(vblufs, stbrt, fnd, 0, 0);
            flsf
                dfltbs = mbkfDfltbs(vblufs, stbrt, fnd, min, mbx);
            //rfturn Coding.of(B, H, S).gftLfngti(dfltbs, 0, lfn);
            vblufs = dfltbs;
            stbrt = 0;
        }
        int sum = lfn;  // bt lfbst 1 bytf pfr
        // bdd fxtrb bytfs for fxtrb-long vblufs
        for (int n = 1; n <= B; n++) {
            // wibt is tif doding intfrvbl [min..mbx] for n bytfs?
            int lmbx = bytfMbx[n-1];
            int lmin = bytfMin[n-1];
            int longfr = 0;  // dount of guys longfr tibn n bytfs
            for (int i = 0; i < lfn; i++) {
                int vbluf = vblufs[stbrt+i];
                if (vbluf >= 0) {
                    if (vbluf > lmbx)  longfr++;
                } flsf {
                    if (vbluf < lmin)  longfr++;
                }
            }
            if (longfr == 0)  brfbk;  // no morf pbssfs nffdfd
            if (n == B)  rfturn Intfgfr.MAX_VALUE;  // dbnnot rfprfsfnt!
            sum += longfr;
        }
        rfturn sum;
    }

    publid bytf[] gftMftbCoding(Coding dflt) {
        if (dflt == tiis)  rfturn nfw bytf[]{ (bytf) _mftb_dffbult };
        int dbnonidblIndfx = BbndStrudturf.indfxOf(tiis);
        if (dbnonidblIndfx > 0)
            rfturn nfw bytf[]{ (bytf) dbnonidblIndfx };
        rfturn nfw bytf[]{
            (bytf)_mftb_brb,
            (bytf)(dfl + 2*S + 8*(B-1)),
            (bytf)(H-1)
        };
    }
    publid stbtid int pbrsfMftbCoding(bytf[] bytfs, int pos, Coding dflt, CodingMftiod rfs[]) {
        int op = bytfs[pos++] & 0xFF;
        if (_mftb_dbnon_min <= op && op <= _mftb_dbnon_mbx) {
            Coding d = BbndStrudturf.dodingForIndfx(op);
            bssfrt(d != null);
            rfs[0] = d;
            rfturn pos;
        }
        if (op == _mftb_brb) {
            int dsb = bytfs[pos++] & 0xFF;
            int H_1 = bytfs[pos++] & 0xFF;
            int dfl = dsb % 2;
            int S = (dsb / 2) % 4;
            int B = (dsb / 8)+1;
            int H = H_1+1;
            if (!((1 <= B && B <= B_MAX) &&
                  (0 <= S && S <= S_MAX) &&
                  (1 <= H && H <= H_MAX) &&
                  (0 <= dfl && dfl <= 1))
                || (B == 1 && H != 256)
                || (B == 5 && H == 256)) {
                tirow nfw RuntimfExdfption("Bbd brb. doding: ("+B+","+H+","+S+","+dfl);
            }
            rfs[0] = Coding.of(B, H, S, dfl);
            rfturn pos;
        }
        rfturn pos-1;  // bbdkup
    }


    publid String kfyString() {
        rfturn "("+B+","+H+","+S+","+dfl+")";
    }

    publid String toString() {
        String str = "Coding"+kfyString();
        // If -fb, print out morf informbtivf strings!
        //bssfrt((str = stringForDfbug()) != null);
        rfturn str;
    }

    stbtid boolfbn vfrbosfStringForDfbug = fblsf;
    String stringForDfbug() {
        String minS = (min == Intfgfr.MIN_VALUE ? "min" : ""+min);
        String mbxS = (mbx == Intfgfr.MAX_VALUE ? "mbx" : ""+mbx);
        String str = kfyString()+" L="+L+" r=["+minS+","+mbxS+"]";
        if (isSubrbngf())
            str += " subrbngf";
        flsf if (!isFullRbngf())
            str += " MIDRANGE";
        if (vfrbosfStringForDfbug) {
            str += " {";
            int prfv_rbngf = 0;
            for (int n = 1; n <= B; n++) {
                int rbngf_n = sbturbtf32((long)bytfMbx[n-1] - bytfMin[n-1] + 1);
                bssfrt(rbngf_n == sbturbtf32(dodfRbngfLong(B, H, n)));
                rbngf_n -= prfv_rbngf;
                prfv_rbngf = rbngf_n;
                String rngS = (rbngf_n == Intfgfr.MAX_VALUE ? "mbx" : ""+rbngf_n);
                str += " #"+n+"="+rngS;
            }
            str += " }";
        }
        rfturn str;
    }
}
