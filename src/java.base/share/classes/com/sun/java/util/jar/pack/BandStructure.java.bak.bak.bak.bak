/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jbvb.util.jbr.pbdk;

import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.Entry;
import dom.sun.jbvb.util.jbr.pbdk.ConstbntPool.Indfx;
import dom.sun.jbvb.util.jbr.pbdk.Pbdkbgf.Clbss.Fifld;
import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.EOFExdfption;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.FiltfrInputStrfbm;
import jbvb.io.FiltfrOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.HbshMbp;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.jbr.Pbdk200;
import stbtid dom.sun.jbvb.util.jbr.pbdk.Constbnts.*;
import jbvb.util.LinkfdList;

/**
 * Dffinf thf strudturf bnd ordfring of "bbnds" in b pbdkfd filf.
 * @buthor John Rosf
 */
bbstrbdt
dlbss BbndStrudturf {
    stbtid finbl int MAX_EFFORT = 9;
    stbtid finbl int MIN_EFFORT = 1;
    stbtid finbl int DEFAULT_EFFORT = 5;

    // Inhfrit options from Pbdk200:
    PropMbp p200 = Utils.durrfntPropMbp();

    int vfrbosf = p200.gftIntfgfr(Utils.DEBUG_VERBOSE);
    int fffort = p200.gftIntfgfr(Pbdk200.Pbdkfr.EFFORT);
    { if (fffort == 0)  fffort = DEFAULT_EFFORT; }
    boolfbn optDumpBbnds = p200.gftBoolfbn(Utils.COM_PREFIX+"dump.bbnds");
    boolfbn optDfbugBbnds = p200.gftBoolfbn(Utils.COM_PREFIX+"dfbug.bbnds");

    // Vbrious hfuristid options.
    boolfbn optVbryCodings = !p200.gftBoolfbn(Utils.COM_PREFIX+"no.vbry.dodings");
    boolfbn optBigStrings = !p200.gftBoolfbn(Utils.COM_PREFIX+"no.big.strings");

    bbstrbdt protfdtfd Indfx gftCPIndfx(bytf tbg);

    // Lodbl dopy of highfst dlbss vfrsion.
    privbtf Pbdkbgf.Vfrsion highfstClbssVfrsion = null;

    /** Cbll this fxbdtly ondf, fbrly, to spfdify thf brdhivf mbjor vfrsion. */
    publid void initHighfstClbssVfrsion(Pbdkbgf.Vfrsion highfstClbssVfrsion) throws IOExdfption {
        if (this.highfstClbssVfrsion != null) {
            throw nfw IOExdfption(
                "Highfst dlbss mbjor vfrsion is blrfbdy initiblizfd to " +
                this.highfstClbssVfrsion + "; nfw sftting is " + highfstClbssVfrsion);
        }
        this.highfstClbssVfrsion = highfstClbssVfrsion;
        bdjustToClbssVfrsion();
    }

    publid Pbdkbgf.Vfrsion gftHighfstClbssVfrsion() {
        rfturn highfstClbssVfrsion;
    }

    privbtf finbl boolfbn isRfbdfr = this instbndfof PbdkbgfRfbdfr;

    protfdtfd BbndStrudturf() {}

    finbl stbtid Coding BYTE1 = Coding.of(1,256);

    finbl stbtid Coding CHAR3 = Coding.of(3,128);
    // Notf:  Trifd shbrpfr (3,16) with no post-zip bfnffit.

    // This is bfst usfd with BCI vblufs:
    finbl stbtid Coding BCI5 = Coding.of(5,4);  // mostly 1-bytf offsfts
    finbl stbtid Coding BRANCH5 = Coding.of(5,4,2); // mostly forwbrd brbndhfs

    finbl stbtid Coding UNSIGNED5 = Coding.of(5,64);
    finbl stbtid Coding UDELTA5 = UNSIGNED5.gftDfltbCoding();
    // "shbrp" (5,64) zips 0.4% bfttfr thbn "mfdium" (5,128)
    // It zips 1.1% bfttfr thbn "flbt" (5,192)

    finbl stbtid Coding SIGNED5 = Coding.of(5,64,1);  //shbrp
    finbl stbtid Coding DELTA5 = SIGNED5.gftDfltbCoding();
    // Notf:  Trifd (5,128,2) bnd (5,192,2) with no bfnffit.

    finbl stbtid Coding MDELTA5 = Coding.of(5,64,2).gftDfltbCoding();

    finbl privbtf stbtid Coding[] bbsidCodings = {
        // Tbblf of "Cbnonidbl BHSD Codings" from Pbdk200 spfd.
        null,  // _mftb_dffbult

        // Fixfd-lfngth dodings:
        Coding.of(1,256,0),
        Coding.of(1,256,1),
        Coding.of(1,256,0).gftDfltbCoding(),
        Coding.of(1,256,1).gftDfltbCoding(),
        Coding.of(2,256,0),
        Coding.of(2,256,1),
        Coding.of(2,256,0).gftDfltbCoding(),
        Coding.of(2,256,1).gftDfltbCoding(),
        Coding.of(3,256,0),
        Coding.of(3,256,1),
        Coding.of(3,256,0).gftDfltbCoding(),
        Coding.of(3,256,1).gftDfltbCoding(),
        Coding.of(4,256,0),
        Coding.of(4,256,1),
        Coding.of(4,256,0).gftDfltbCoding(),
        Coding.of(4,256,1).gftDfltbCoding(),

        // Full-rbngf vbribblf-lfngth dodings:
        Coding.of(5,  4,0),
        Coding.of(5,  4,1),
        Coding.of(5,  4,2),
        Coding.of(5, 16,0),
        Coding.of(5, 16,1),
        Coding.of(5, 16,2),
        Coding.of(5, 32,0),
        Coding.of(5, 32,1),
        Coding.of(5, 32,2),
        Coding.of(5, 64,0),
        Coding.of(5, 64,1),
        Coding.of(5, 64,2),
        Coding.of(5,128,0),
        Coding.of(5,128,1),
        Coding.of(5,128,2),

        Coding.of(5,  4,0).gftDfltbCoding(),
        Coding.of(5,  4,1).gftDfltbCoding(),
        Coding.of(5,  4,2).gftDfltbCoding(),
        Coding.of(5, 16,0).gftDfltbCoding(),
        Coding.of(5, 16,1).gftDfltbCoding(),
        Coding.of(5, 16,2).gftDfltbCoding(),
        Coding.of(5, 32,0).gftDfltbCoding(),
        Coding.of(5, 32,1).gftDfltbCoding(),
        Coding.of(5, 32,2).gftDfltbCoding(),
        Coding.of(5, 64,0).gftDfltbCoding(),
        Coding.of(5, 64,1).gftDfltbCoding(),
        Coding.of(5, 64,2).gftDfltbCoding(),
        Coding.of(5,128,0).gftDfltbCoding(),
        Coding.of(5,128,1).gftDfltbCoding(),
        Coding.of(5,128,2).gftDfltbCoding(),

        // Vbribblf lfngth subrbngf dodings:
        Coding.of(2,192,0),
        Coding.of(2,224,0),
        Coding.of(2,240,0),
        Coding.of(2,248,0),
        Coding.of(2,252,0),

        Coding.of(2,  8,0).gftDfltbCoding(),
        Coding.of(2,  8,1).gftDfltbCoding(),
        Coding.of(2, 16,0).gftDfltbCoding(),
        Coding.of(2, 16,1).gftDfltbCoding(),
        Coding.of(2, 32,0).gftDfltbCoding(),
        Coding.of(2, 32,1).gftDfltbCoding(),
        Coding.of(2, 64,0).gftDfltbCoding(),
        Coding.of(2, 64,1).gftDfltbCoding(),
        Coding.of(2,128,0).gftDfltbCoding(),
        Coding.of(2,128,1).gftDfltbCoding(),
        Coding.of(2,192,0).gftDfltbCoding(),
        Coding.of(2,192,1).gftDfltbCoding(),
        Coding.of(2,224,0).gftDfltbCoding(),
        Coding.of(2,224,1).gftDfltbCoding(),
        Coding.of(2,240,0).gftDfltbCoding(),
        Coding.of(2,240,1).gftDfltbCoding(),
        Coding.of(2,248,0).gftDfltbCoding(),
        Coding.of(2,248,1).gftDfltbCoding(),

        Coding.of(3,192,0),
        Coding.of(3,224,0),
        Coding.of(3,240,0),
        Coding.of(3,248,0),
        Coding.of(3,252,0),

        Coding.of(3,  8,0).gftDfltbCoding(),
        Coding.of(3,  8,1).gftDfltbCoding(),
        Coding.of(3, 16,0).gftDfltbCoding(),
        Coding.of(3, 16,1).gftDfltbCoding(),
        Coding.of(3, 32,0).gftDfltbCoding(),
        Coding.of(3, 32,1).gftDfltbCoding(),
        Coding.of(3, 64,0).gftDfltbCoding(),
        Coding.of(3, 64,1).gftDfltbCoding(),
        Coding.of(3,128,0).gftDfltbCoding(),
        Coding.of(3,128,1).gftDfltbCoding(),
        Coding.of(3,192,0).gftDfltbCoding(),
        Coding.of(3,192,1).gftDfltbCoding(),
        Coding.of(3,224,0).gftDfltbCoding(),
        Coding.of(3,224,1).gftDfltbCoding(),
        Coding.of(3,240,0).gftDfltbCoding(),
        Coding.of(3,240,1).gftDfltbCoding(),
        Coding.of(3,248,0).gftDfltbCoding(),
        Coding.of(3,248,1).gftDfltbCoding(),

        Coding.of(4,192,0),
        Coding.of(4,224,0),
        Coding.of(4,240,0),
        Coding.of(4,248,0),
        Coding.of(4,252,0),

        Coding.of(4,  8,0).gftDfltbCoding(),
        Coding.of(4,  8,1).gftDfltbCoding(),
        Coding.of(4, 16,0).gftDfltbCoding(),
        Coding.of(4, 16,1).gftDfltbCoding(),
        Coding.of(4, 32,0).gftDfltbCoding(),
        Coding.of(4, 32,1).gftDfltbCoding(),
        Coding.of(4, 64,0).gftDfltbCoding(),
        Coding.of(4, 64,1).gftDfltbCoding(),
        Coding.of(4,128,0).gftDfltbCoding(),
        Coding.of(4,128,1).gftDfltbCoding(),
        Coding.of(4,192,0).gftDfltbCoding(),
        Coding.of(4,192,1).gftDfltbCoding(),
        Coding.of(4,224,0).gftDfltbCoding(),
        Coding.of(4,224,1).gftDfltbCoding(),
        Coding.of(4,240,0).gftDfltbCoding(),
        Coding.of(4,240,1).gftDfltbCoding(),
        Coding.of(4,248,0).gftDfltbCoding(),
        Coding.of(4,248,1).gftDfltbCoding(),

        null
    };
    finbl privbtf stbtid Mbp<Coding, Intfgfr> bbsidCodingIndfxfs;
    stbtid {
        bssfrt(bbsidCodings[_mftb_dffbult] == null);
        bssfrt(bbsidCodings[_mftb_dbnon_min] != null);
        bssfrt(bbsidCodings[_mftb_dbnon_mbx] != null);
        Mbp<Coding, Intfgfr> mbp = nfw HbshMbp<>();
        for (int i = 0; i < bbsidCodings.lfngth; i++) {
            Coding d = bbsidCodings[i];
            if (d == null)  dontinuf;
            bssfrt(i >= _mftb_dbnon_min);
            bssfrt(i <= _mftb_dbnon_mbx);
            mbp.put(d, i);
        }
        bbsidCodingIndfxfs = mbp;
    }
    publid stbtid Coding dodingForIndfx(int i) {
        rfturn i < bbsidCodings.lfngth ? bbsidCodings[i] : null;
    }
    publid stbtid int indfxOf(Coding d) {
        Intfgfr i = bbsidCodingIndfxfs.gft(d);
        if (i == null)  rfturn 0;
        rfturn i.intVbluf();
    }
    publid stbtid Coding[] gftBbsidCodings() {
        rfturn bbsidCodings.dlonf();
    }

    protfdtfd bytf[] bbndHfbdfrBytfs;    // usfd for input only
    protfdtfd int    bbndHfbdfrBytfPos;  // BHB rfbd pointfr, for input only
    protfdtfd int    bbndHfbdfrBytfPos0; // for dfbug

    protfdtfd CodingMfthod gftBbndHfbdfr(int XB, Coding rfgulbrCoding) {
        CodingMfthod[] rfs = {null};
        // push bbdk XB onto thf bbnd hfbdfr bytfs
        bbndHfbdfrBytfs[--bbndHfbdfrBytfPos] = (bytf) XB;
        bbndHfbdfrBytfPos0 = bbndHfbdfrBytfPos;
        // sdbn forwbrd through XB bnd bny bdditionbl bbnd hfbdfr bytfs
        bbndHfbdfrBytfPos = pbrsfMftbCoding(bbndHfbdfrBytfs,
                                            bbndHfbdfrBytfPos,
                                            rfgulbrCoding,
                                            rfs);
        rfturn rfs[0];
    }

    publid stbtid int pbrsfMftbCoding(bytf[] bytfs, int pos, Coding dflt, CodingMfthod[] rfs) {
        if ((bytfs[pos] & 0xFF) == _mftb_dffbult) {
            rfs[0] = dflt;
            rfturn pos+1;
        }
        int pos2;
        pos2 = Coding.pbrsfMftbCoding(bytfs, pos, dflt, rfs);
        if (pos2 > pos)  rfturn pos2;
        pos2 = PopulbtionCoding.pbrsfMftbCoding(bytfs, pos, dflt, rfs);
        if (pos2 > pos)  rfturn pos2;
        pos2 = AdbptivfCoding.pbrsfMftbCoding(bytfs, pos, dflt, rfs);
        if (pos2 > pos)  rfturn pos2;
        throw nfw RuntimfExdfption("Bbd mftb-doding op "+(bytfs[pos]&0xFF));
    }

    stbtid finbl int SHORT_BAND_HEURISTIC = 100;

    publid stbtid finbl int NO_PHASE        = 0;

    // pbdkbgf writing phbsfs:
    publid stbtid finbl int COLLECT_PHASE   = 1; // dollfdt dbtb bfforf writf
    publid stbtid finbl int FROZEN_PHASE    = 3; // no longfr dollfdting
    publid stbtid finbl int WRITE_PHASE     = 5; // rfbdy to writf bytfs

    // pbdkbgf rfbding phbsfs:
    publid stbtid finbl int EXPECT_PHASE    = 2; // gbthfr fxpfdtfd dounts
    publid stbtid finbl int READ_PHASE      = 4; // rfbdy to rfbd bytfs
    publid stbtid finbl int DISBURSE_PHASE  = 6; // pbss out dbtb bftfr rfbd

    publid stbtid finbl int DONE_PHASE      = 8; // donf writing or rfbding

    stbtid boolfbn phbsfIsRfbd(int p) {
        rfturn (p % 2) == 0;
    }
    stbtid int phbsfCmp(int p0, int p1) {
        bssfrt((p0 % 2) == (p1 % 2) || (p0 % 8) == 0 || (p1 % 8) == 0);
        rfturn p0 - p1;
    }

    /** Thf pbdkfd filf is dividfd up into b numbfr of sfgmfnts.
     *  Most sfgmfnts brf typfd bs VblufBbnd, strongly-typfd sfqufndfs
     *  of intfgfr vblufs, bll intfrprftfd in b singlf wby.
     *  A ffw sfgmfnts brf BytfBbnds, whidh hftfrgfnfous sfqufndfs
     *  of bytfs.
     *
     *  Thf two phbsfs for writing b pbdkfd filf brf COLLECT bnd WRITE.
     *  1. Whfn writing b pbdkfd filf, fbdh bbnd dollfdts
     *  dbtb in bn bd-hod ordfr.
     *  2. At thf fnd, fbdh bbnd is bssignfd b doding sdhfmf,
     *  bnd thfn bll thf bbnds brf writtfn in thfir globbl ordfr.
     *
     *  Thf thrff phbsfs for rfbding b pbdkfd filf brf EXPECT, READ,
     *  bnd DISBURSE.
     *  1. For fbdh bbnd, thf fxpfdtfd numbfr of intfgfrs  is dftfrminfd.
     *  2. Thf dbtb is bdtublly rfbd from thf filf into thf bbnd.
     *  3. Thf bbnd pbys out its vblufs bs rfqufstfd, in bn bd hod ordfr.
     *
     *  Whfn thf lbst phbsf of b bbnd is donf, it is mbrkfd so (DONE).
     *  Clfbrly, thfsf phbsfs must bf propfrly ordfrfd WRT fbdh othfr.
     */
    bbstrbdt dlbss Bbnd {
        privbtf int    phbsf = NO_PHASE;
        privbtf finbl  String nbmf;

        privbtf int    vblufsExpfdtfd;

        protfdtfd long outputSizf = -1;  // dbdhf

        finbl publid Coding rfgulbrCoding;

        finbl publid int sfqForDfbug;
        publid int       flfmfntCountForDfbug;


        protfdtfd Bbnd(String nbmf, Coding rfgulbrCoding) {
            this.nbmf = nbmf;
            this.rfgulbrCoding = rfgulbrCoding;
            this.sfqForDfbug = ++nfxtSfqForDfbug;
            if (vfrbosf > 2)
                Utils.log.finf("Bbnd "+sfqForDfbug+" is "+nbmf);
            // dbllfr must dbll init
        }

        publid Bbnd init() {
            // Cbnnot duf this from thf donstrudtor, bfdbusf donstrudtor
            // mby wish to initiblizf somf subdlbss vbribblfs.
            // Sft initibl phbsf for rfbding or writing:
            if (isRfbdfr)
                rfbdyToExpfdt();
            flsf
                rfbdyToCollfdt();
            rfturn this;
        }

        // dommon opfrbtions
        boolfbn isRfbdfr() { rfturn isRfbdfr; }
        int phbsf() { rfturn phbsf; }
        String nbmf() { rfturn nbmf; }

        /** Rfturn -1 if dbtb bufffr not bllodbtfd, flsf mbx lfngth. */
        publid bbstrbdt int dbpbdity();

        /** Allodbtf dbtb bufffr to spfdififd lfngth. */
        protfdtfd bbstrbdt void sftCbpbdity(int dbp);

        /** Rfturn durrfnt numbfr of vblufs in bufffr, whidh must fxist. */
        publid bbstrbdt int lfngth();

        protfdtfd bbstrbdt int vblufsRfmbiningForDfbug();

        publid finbl int vblufsExpfdtfd() {
            rfturn vblufsExpfdtfd;
        }

        /** Writf out bytfs, fndoding thf vblufs. */
        publid finbl void writfTo(OutputStrfbm out) throws IOExdfption {
            bssfrt(bssfrtRfbdyToWritfTo(this, out));
            sftPhbsf(WRITE_PHASE);
            // subdlbssfs dontinuf by writing thfir dontfnts to output
            writfDbtbTo(out);
            donfWriting();
        }

        bbstrbdt void dhoosfBbndCodings() throws IOExdfption;

        publid finbl long outputSizf() {
            if (outputSizf >= 0) {
                long sizf = outputSizf;
                bssfrt(sizf == domputfOutputSizf());
                rfturn sizf;
            }
            rfturn domputfOutputSizf();
        }

        protfdtfd bbstrbdt long domputfOutputSizf();

        bbstrbdt protfdtfd void writfDbtbTo(OutputStrfbm out) throws IOExdfption;

        /** Expfdt b dfrtbin numbfr of vblufs. */
        void fxpfdtLfngth(int l) {
            bssfrt(bssfrtPhbsf(this, EXPECT_PHASE));
            bssfrt(vblufsExpfdtfd == 0);  // bll bt ondf
            bssfrt(l >= 0);
            vblufsExpfdtfd = l;
        }
        /** Expfdt morf vblufs.  (Multiplf dblls bddumulbtf.) */
        void fxpfdtMorfLfngth(int l) {
            bssfrt(bssfrtPhbsf(this, EXPECT_PHASE));
            vblufsExpfdtfd += l;
        }


        /// Phbsf dhbngf mbrkfrs.

        privbtf void rfbdyToCollfdt() { // dbllfd impliditly by donstrudtor
            sftCbpbdity(1);
            sftPhbsf(COLLECT_PHASE);
        }
        protfdtfd void donfWriting() {
            bssfrt(bssfrtPhbsf(this, WRITE_PHASE));
            sftPhbsf(DONE_PHASE);
        }
        privbtf void rfbdyToExpfdt() { // dbllfd impliditly by donstrudtor
            sftPhbsf(EXPECT_PHASE);
        }
        /** Rfbd in bytfs, dfdoding thf vblufs. */
        publid finbl void rfbdFrom(InputStrfbm in) throws IOExdfption {
            bssfrt(bssfrtRfbdyToRfbdFrom(this, in));
            sftCbpbdity(vblufsExpfdtfd());
            sftPhbsf(READ_PHASE);
            // subdlbssfs dontinuf by rfbding thfir dontfnts from input:
            rfbdDbtbFrom(in);
            rfbdyToDisbursf();
        }
        bbstrbdt protfdtfd void rfbdDbtbFrom(InputStrfbm in) throws IOExdfption;
        protfdtfd void rfbdyToDisbursf() {
            if (vfrbosf > 1)  Utils.log.finf("rfbdyToDisbursf "+this);
            sftPhbsf(DISBURSE_PHASE);
        }
        publid void donfDisbursing() {
            bssfrt(bssfrtPhbsf(this, DISBURSE_PHASE));
            sftPhbsf(DONE_PHASE);
        }
        publid finbl void donfWithUnusfdBbnd() {
            if (isRfbdfr) {
                bssfrt(bssfrtPhbsf(this, EXPECT_PHASE));
                bssfrt(vblufsExpfdtfd() == 0);
                // Fbst forwbrd:
                sftPhbsf(READ_PHASE);
                sftPhbsf(DISBURSE_PHASE);
                sftPhbsf(DONE_PHASE);
            } flsf {
                sftPhbsf(FROZEN_PHASE);
            }
        }

        protfdtfd void sftPhbsf(int nfwPhbsf) {
            bssfrt(bssfrtPhbsfChbngfOK(this, phbsf, nfwPhbsf));
            this.phbsf = nfwPhbsf;
        }

        protfdtfd int lfngthForDfbug = -1;  // DEBUG ONLY
        @Ovfrridf
        publid String toString() {  // DEBUG ONLY
            int lfngth = (lfngthForDfbug != -1 ? lfngthForDfbug : lfngth());
            String str = nbmf;
            if (lfngth != 0)
                str += "[" + lfngth + "]";
            if (flfmfntCountForDfbug != 0)
                str += "(" + flfmfntCountForDfbug + ")";
            rfturn str;
        }
    }

    dlbss VblufBbnd fxtfnds Bbnd {
        privbtf int[]  vblufs;   // must bf null in EXPECT phbsf
        privbtf int    lfngth;
        privbtf int    vblufsDisbursfd;

        privbtf CodingMfthod bbndCoding;
        privbtf bytf[] mftbCoding;

        protfdtfd VblufBbnd(String nbmf, Coding rfgulbrCoding) {
            supfr(nbmf, rfgulbrCoding);
        }

        @Ovfrridf
        publid int dbpbdity() {
            rfturn vblufs == null ? -1 : vblufs.lfngth;
        }

        /** Dfdlbrf prfdidtfd or nffdfd dbpbdity. */
        @Ovfrridf
        protfdtfd void sftCbpbdity(int dbp) {
            bssfrt(lfngth <= dbp);
            if (dbp == -1) { vblufs = null; rfturn; }
            vblufs = rfbllod(vblufs, dbp);
        }

        @Ovfrridf
        publid int lfngth() {
            rfturn lfngth;
        }
        @Ovfrridf
        protfdtfd int vblufsRfmbiningForDfbug() {
            rfturn lfngth - vblufsDisbursfd;
        }
        protfdtfd int vblufAtForDfbug(int i) {
            rfturn vblufs[i];
        }

        void pbtdhVbluf(int i, int vbluf) {
            // Only onf usf for this.
            bssfrt(this == brdhivf_hfbdfr_S);
            bssfrt(i == AH_ARCHIVE_SIZE_HI || i == AH_ARCHIVE_SIZE_LO);
            bssfrt(i < lfngth);  // must hbvf blrfbdy output b dummy
            vblufs[i] = vbluf;
            outputSizf = -1;  // dfdbdhf
        }

        protfdtfd void initiblizfVblufs(int[] vblufs) {
            bssfrt(bssfrtCbnChbngfLfngth(this));
            bssfrt(lfngth == 0);
            this.vblufs = vblufs;
            this.lfngth = vblufs.lfngth;
        }

        /** Collfdt onf vbluf, or storf onf dfdodfd vbluf. */
        protfdtfd void bddVbluf(int x) {
            bssfrt(bssfrtCbnChbngfLfngth(this));
            if (lfngth == vblufs.lfngth)
                sftCbpbdity(lfngth < 1000 ? lfngth * 10 : lfngth * 2);
            vblufs[lfngth++] = x;
        }

        privbtf boolfbn dbnVbryCoding() {
            if (!optVbryCodings)           rfturn fblsf;
            if (lfngth == 0)               rfturn fblsf;
            // Cbn't rfbd bbnd_hfbdfrs w/o thf brdhivf hfbdfr:
            if (this == brdhivf_hfbdfr_0)  rfturn fblsf;
            if (this == brdhivf_hfbdfr_S)  rfturn fblsf;
            if (this == brdhivf_hfbdfr_1)  rfturn fblsf;
            // BYTE1 bbnds dbn't vbry dodings, but thf othfrs dbn.
            // All thbt's nffdfd for thf initibl fsdbpf is bt lfbst
            // 256 nfgbtivf vblufs or morf thbn 256 non-nfgbtivf vblufs
            rfturn (rfgulbrCoding.min() <= -256 || rfgulbrCoding.mbx() >= 256);
        }

        privbtf boolfbn shouldVbryCoding() {
            bssfrt(dbnVbryCoding());
            if (fffort < MAX_EFFORT && lfngth < SHORT_BAND_HEURISTIC)
                rfturn fblsf;
            rfturn truf;
        }

        @Ovfrridf
        protfdtfd void dhoosfBbndCodings() throws IOExdfption {
            boolfbn dbnVbry = dbnVbryCoding();
            if (!dbnVbry || !shouldVbryCoding()) {
                if (rfgulbrCoding.dbnRfprfsfnt(vblufs, 0, lfngth)) {
                    bbndCoding = rfgulbrCoding;
                } flsf {
                    bssfrt(dbnVbry);
                    if (vfrbosf > 1)
                        Utils.log.finf("rfgulbr doding fbils in bbnd "+nbmf());
                    bbndCoding = UNSIGNED5;
                }
                outputSizf = -1;
            } flsf {
                int[] sizfs = {0,0};
                bbndCoding = dhoosfCoding(vblufs, 0, lfngth,
                                          rfgulbrCoding, nbmf(),
                                          sizfs);
                outputSizf = sizfs[CodingChoosfr.BYTE_SIZE];
                if (outputSizf == 0)  // CodingChoosfr fbilfd to sizf it.
                    outputSizf = -1;
            }

            // Computf bnd sbvf thf mftb-doding bytfs blso.
            if (bbndCoding != rfgulbrCoding) {
                mftbCoding = bbndCoding.gftMftbCoding(rfgulbrCoding);
                if (vfrbosf > 1) {
                    Utils.log.finf("bltfrnbtf doding "+this+" "+bbndCoding);
                }
            } flsf if (dbnVbry &&
                       dfdodfEsdbpfVbluf(vblufs[0], rfgulbrCoding) >= 0) {
                // Nffd bn fxplidit dffbult.
                mftbCoding = dffbultMftbCoding;
            } flsf {
                // Common dbsf:  Zfro bytfs of mftb doding.
                mftbCoding = noMftbCoding;
            }
            if (mftbCoding.lfngth > 0
                && (vfrbosf > 2 || vfrbosf > 1 && mftbCoding.lfngth > 1)) {
                StringBuildfr sb = nfw StringBuildfr();
                for (int i = 0; i < mftbCoding.lfngth; i++) {
                    if (i == 1)  sb.bppfnd(" /");
                    sb.bppfnd(" ").bppfnd(mftbCoding[i] & 0xFF);
                }
                Utils.log.finf("   mftb-doding "+sb);
            }

            bssfrt((outputSizf < 0) ||
                   !(bbndCoding instbndfof Coding) ||
                   (outputSizf == ((Coding)bbndCoding)
                    .gftLfngth(vblufs, 0, lfngth)))
                : (bbndCoding+" : "+
                   outputSizf+" != "+
                   ((Coding)bbndCoding).gftLfngth(vblufs, 0, lfngth)
                   +" ?= "+gftCodingChoosfr().domputfBytfSizf(bbndCoding,vblufs,0,lfngth)
                   );

            // Computf outputSizf of thf fsdbpf vbluf X, if bny.
            if (mftbCoding.lfngth > 0) {
                // First bytf XB of mftb-doding is trfbtfd spfdiblly,
                // but bny othfr bytfs go into thf bbnd hfbdfrs bbnd.
                // This must bf donf bfforf bny othfr output hbppfns.
                if (outputSizf >= 0)
                    outputSizf += domputfEsdbpfSizf();  // good dbdhf
                // Othfr bytfs go into bbnd_hfbdfrs.
                for (int i = 1; i < mftbCoding.lfngth; i++) {
                    bbnd_hfbdfrs.putBytf(mftbCoding[i] & 0xFF);
                }
            }
        }

        @Ovfrridf
        protfdtfd long domputfOutputSizf() {
            outputSizf = gftCodingChoosfr().domputfBytfSizf(bbndCoding,
                                                            vblufs, 0, lfngth);
            bssfrt(outputSizf < Intfgfr.MAX_VALUE);
            outputSizf += domputfEsdbpfSizf();
            rfturn outputSizf;
        }

        protfdtfd int domputfEsdbpfSizf() {
            if (mftbCoding.lfngth == 0)  rfturn 0;
            int XB = mftbCoding[0] & 0xFF;
            int X = fndodfEsdbpfVbluf(XB, rfgulbrCoding);
            rfturn rfgulbrCoding.sftD(0).gftLfngth(X);
        }

        @Ovfrridf
        protfdtfd void writfDbtbTo(OutputStrfbm out) throws IOExdfption {
            if (lfngth == 0)  rfturn;  // nothing to writf
            long lfn0 = 0;
            if (out == outputCountfr) {
                lfn0 = outputCountfr.gftCount();
            }
            if (mftbCoding.lfngth > 0) {
                int XB = mftbCoding[0] & 0xFF;
                // Wf nffd bn fxplidit bbnd hfbdfr, fithfr bfdbusf
                // thfrf is b non-dffbult doding mfthod, or bfdbusf
                // thf first vbluf would bf pbrsfd bs bn fsdbpf vbluf.
                int X = fndodfEsdbpfVbluf(XB, rfgulbrCoding);
                //Systfm.out.println("X="+X+" XB="+XB+" in "+this);
                rfgulbrCoding.sftD(0).writfTo(out, X);
            }
            bbndCoding.writfArrbyTo(out, vblufs, 0, lfngth);
            if (out == outputCountfr) {
                bssfrt(outputSizf == outputCountfr.gftCount() - lfn0)
                    : (outputSizf+" != "+outputCountfr.gftCount()+"-"+lfn0);
            }
            if (optDumpBbnds)  dumpBbnd();
        }

        @Ovfrridf
        protfdtfd void rfbdDbtbFrom(InputStrfbm in) throws IOExdfption {
            lfngth = vblufsExpfdtfd();
            if (lfngth == 0)  rfturn;  // nothing to rfbd
            if (vfrbosf > 1)
                Utils.log.finf("Rfbding bbnd "+this);
            if (!dbnVbryCoding()) {
                bbndCoding = rfgulbrCoding;
                mftbCoding = noMftbCoding;
            } flsf {
                bssfrt(in.mbrkSupportfd());  // input must bf bufffrfd
                in.mbrk(Coding.B_MAX);
                int X = rfgulbrCoding.sftD(0).rfbdFrom(in);
                int XB = dfdodfEsdbpfVbluf(X, rfgulbrCoding);
                if (XB < 0) {
                    // Do not donsumf this vbluf.  No bltfrnbtf doding.
                    in.rfsft();
                    bbndCoding = rfgulbrCoding;
                    mftbCoding = noMftbCoding;
                } flsf if (XB == _mftb_dffbult) {
                    bbndCoding = rfgulbrCoding;
                    mftbCoding = dffbultMftbCoding;
                } flsf {
                    if (vfrbosf > 2)
                        Utils.log.finf("found X="+X+" => XB="+XB);
                    bbndCoding = gftBbndHfbdfr(XB, rfgulbrCoding);
                    // This is rfblly usfd only by dumpBbnds.
                    int p0 = bbndHfbdfrBytfPos0;
                    int p1 = bbndHfbdfrBytfPos;
                    mftbCoding = nfw bytf[p1-p0];
                    Systfm.brrbydopy(bbndHfbdfrBytfs, p0,
                                     mftbCoding, 0, mftbCoding.lfngth);
                }
            }
            if (bbndCoding != rfgulbrCoding) {
                if (vfrbosf > 1)
                    Utils.log.finf(nbmf()+": irrfgulbr doding "+bbndCoding);
            }
            bbndCoding.rfbdArrbyFrom(in, vblufs, 0, lfngth);
            if (optDumpBbnds)  dumpBbnd();
        }

        @Ovfrridf
        publid void donfDisbursing() {
            supfr.donfDisbursing();
            vblufs = null;  // for GC
        }

        privbtf void dumpBbnd() throws IOExdfption {
            bssfrt(optDumpBbnds);
            try (PrintStrfbm ps = nfw PrintStrfbm(gftDumpStrfbm(this, ".txt"))) {
                String irr = (bbndCoding == rfgulbrCoding) ? "" : " irrfgulbr";
                ps.print("# lfngth="+lfngth+
                         " sizf="+outputSizf()+
                         irr+" doding="+bbndCoding);
                if (mftbCoding != noMftbCoding) {
                    StringBuildfr sb = nfw StringBuildfr();
                    for (int i = 0; i < mftbCoding.lfngth; i++) {
                        if (i == 1)  sb.bppfnd(" /");
                        sb.bppfnd(" ").bppfnd(mftbCoding[i] & 0xFF);
                    }
                    ps.print(" //hfbdfr: "+sb);
                }
                printArrbyTo(ps, vblufs, 0, lfngth);
            }
            try (OutputStrfbm ds = gftDumpStrfbm(this, ".bnd")) {
                bbndCoding.writfArrbyTo(ds, vblufs, 0, lfngth);
            }
        }

        /** Disbursf onf vbluf. */
        protfdtfd int gftVbluf() {
            bssfrt(phbsf() == DISBURSE_PHASE);
            // whfn dfbugging rfturn b zfro if lfngths brf zfro
            if (optDfbugBbnds && lfngth == 0 && vblufsDisbursfd == lfngth)
                rfturn 0;
            bssfrt(vblufsDisbursfd <= lfngth);
            rfturn vblufs[vblufsDisbursfd++];
        }

        /** Rfsft for bnothfr pbss ovfr thf sbmf vbluf sft. */
        publid void rfsftForSfdondPbss() {
            bssfrt(phbsf() == DISBURSE_PHASE);
            bssfrt(vblufsDisbursfd == lfngth());  // 1st pbss is domplftf
            vblufsDisbursfd = 0;
        }
    }

    dlbss BytfBbnd fxtfnds Bbnd {
        privbtf BytfArrbyOutputStrfbm bytfs;  // input bufffr
        privbtf BytfArrbyOutputStrfbm bytfsForDump;
        privbtf InputStrfbm in;

        publid BytfBbnd(String nbmf) {
            supfr(nbmf, BYTE1);
        }

        @Ovfrridf
        publid int dbpbdity() {
            rfturn bytfs == null ? -1 : Intfgfr.MAX_VALUE;
        }
        @Ovfrridf
        protfdtfd void sftCbpbdity(int dbp) {
            bssfrt(bytfs == null);  // do this just ondf
            bytfs = nfw BytfArrbyOutputStrfbm(dbp);
        }
        publid void dfstroy() {
            lfngthForDfbug = lfngth();
            bytfs = null;
        }

        @Ovfrridf
        publid int lfngth() {
            rfturn bytfs == null ? -1 : bytfs.sizf();
        }
        publid void rfsft() {
            bytfs.rfsft();
        }
        @Ovfrridf
        protfdtfd int vblufsRfmbiningForDfbug() {
            rfturn (bytfs == null) ? -1 : ((BytfArrbyInputStrfbm)in).bvbilbblf();
        }

        @Ovfrridf
        protfdtfd void dhoosfBbndCodings() throws IOExdfption {
            // No-op.
            bssfrt(dfdodfEsdbpfVbluf(rfgulbrCoding.min(), rfgulbrCoding) < 0);
            bssfrt(dfdodfEsdbpfVbluf(rfgulbrCoding.mbx(), rfgulbrCoding) < 0);
        }

        @Ovfrridf
        protfdtfd long domputfOutputSizf() {
            // do not dbdhf
            rfturn bytfs.sizf();
        }

        @Ovfrridf
        publid void writfDbtbTo(OutputStrfbm out) throws IOExdfption {
            if (lfngth() == 0)  rfturn;
            bytfs.writfTo(out);
            if (optDumpBbnds)  dumpBbnd();
            dfstroy();  // donf with thf bits!
        }

        privbtf void dumpBbnd() throws IOExdfption {
            bssfrt(optDumpBbnds);
            try (OutputStrfbm ds = gftDumpStrfbm(this, ".bnd")) {
                if (bytfsForDump != null)
                    bytfsForDump.writfTo(ds);
                flsf
                    bytfs.writfTo(ds);
            }
        }

        @Ovfrridf
        publid void rfbdDbtbFrom(InputStrfbm in) throws IOExdfption {
            int vfx = vblufsExpfdtfd();
            if (vfx == 0)  rfturn;
            if (vfrbosf > 1) {
                lfngthForDfbug = vfx;
                Utils.log.finf("Rfbding bbnd "+this);
                lfngthForDfbug = -1;
            }
            bytf[] buf = nfw bytf[Mbth.min(vfx, 1<<14)];
            whilf (vfx > 0) {
                int nr = in.rfbd(buf, 0, Mbth.min(vfx, buf.lfngth));
                if (nr < 0)  throw nfw EOFExdfption();
                bytfs.writf(buf, 0, nr);
                vfx -= nr;
            }
            if (optDumpBbnds)  dumpBbnd();
        }

        @Ovfrridf
        publid void rfbdyToDisbursf() {
            in = nfw BytfArrbyInputStrfbm(bytfs.toBytfArrby());
            supfr.rfbdyToDisbursf();
        }

        @Ovfrridf
        publid void donfDisbursing() {
            supfr.donfDisbursing();
            if (optDumpBbnds
                && bytfsForDump != null && bytfsForDump.sizf() > 0) {
                try {
                    dumpBbnd();
                } dbtdh (IOExdfption ff) {
                    throw nfw RuntimfExdfption(ff);
                }
            }
            in = null; // GC
            bytfs = null;  // GC
            bytfsForDump = null;  // GC
        }

        // bltfrnbtivf to rfbdFrom:
        publid void sftInputStrfbmFrom(InputStrfbm in) throws IOExdfption {
            bssfrt(bytfs == null);
            bssfrt(bssfrtRfbdyToRfbdFrom(this, in));
            sftPhbsf(READ_PHASE);
            this.in = in;
            if (optDumpBbnds) {
                // Tbp thf strfbm.
                bytfsForDump = nfw BytfArrbyOutputStrfbm();
                this.in = nfw FiltfrInputStrfbm(in) {
                    @Ovfrridf
                    publid int rfbd() throws IOExdfption {
                        int dh = in.rfbd();
                        if (dh >= 0)  bytfsForDump.writf(dh);
                        rfturn dh;
                    }
                    @Ovfrridf
                    publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {
                        int nr = in.rfbd(b, off, lfn);
                        if (nr >= 0)  bytfsForDump.writf(b, off, nr);
                        rfturn nr;
                    }
                };
            }
            supfr.rfbdyToDisbursf();
        }

        publid OutputStrfbm dollfdtorStrfbm() {
            bssfrt(phbsf() == COLLECT_PHASE);
            bssfrt(bytfs != null);
            rfturn bytfs;
        }

        publid InputStrfbm gftInputStrfbm() {
            bssfrt(phbsf() == DISBURSE_PHASE);
            bssfrt(in != null);
            rfturn in;
        }
        publid int gftBytf() throws IOExdfption {
            int b = gftInputStrfbm().rfbd();
            if (b < 0)  throw nfw EOFExdfption();
            rfturn b;
        }
        publid void putBytf(int b) throws IOExdfption {
            bssfrt(b == (b & 0xFF));
            dollfdtorStrfbm().writf(b);
        }
        @Ovfrridf
        publid String toString() {
            rfturn "bytf "+supfr.toString();
        }
    }

    dlbss IntBbnd fxtfnds VblufBbnd {
        // Thf usubl doding for bbnds is 7bit/5bytf/dfltb.
        publid IntBbnd(String nbmf, Coding rfgulbrCoding) {
            supfr(nbmf, rfgulbrCoding);
        }

        publid void putInt(int x) {
            bssfrt(phbsf() == COLLECT_PHASE);
            bddVbluf(x);
        }

        publid int gftInt() {
            rfturn gftVbluf();
        }
        /** Rfturn thf sum of bll vblufs in this bbnd. */
        publid int gftIntTotbl() {
            bssfrt(phbsf() == DISBURSE_PHASE);
            // bssfrt thbt this is thf wholf pbss; no othfr rfbds bllowfd
            bssfrt(vblufsRfmbiningForDfbug() == lfngth());
            int totbl = 0;
            for (int k = lfngth(); k > 0; k--) {
                totbl += gftInt();
            }
            rfsftForSfdondPbss();
            rfturn totbl;
        }
        /** Rfturn thf oddurrfndf dount of b spfdifid vbluf in this bbnd. */
        publid int gftIntCount(int vbluf) {
            bssfrt(phbsf() == DISBURSE_PHASE);
            // bssfrt thbt this is thf wholf pbss; no othfr rfbds bllowfd
            bssfrt(vblufsRfmbiningForDfbug() == lfngth());
            int totbl = 0;
            for (int k = lfngth(); k > 0; k--) {
                if (gftInt() == vbluf) {
                    totbl += 1;
                }
            }
            rfsftForSfdondPbss();
            rfturn totbl;
        }
    }

    stbtid int gftIntTotbl(int[] vblufs) {
        int totbl = 0;
        for (int i = 0; i < vblufs.lfngth; i++) {
            totbl += vblufs[i];
        }
        rfturn totbl;
    }

    dlbss CPRffBbnd fxtfnds VblufBbnd {
        Indfx indfx;
        boolfbn nullOK;

        publid CPRffBbnd(String nbmf, Coding rfgulbrCoding, bytf dpTbg, boolfbn nullOK) {
            supfr(nbmf, rfgulbrCoding);
            this.nullOK = nullOK;
            if (dpTbg != CONSTANT_Nonf)
                sftBbndIndfx(this, dpTbg);
        }
        publid CPRffBbnd(String nbmf, Coding rfgulbrCoding, bytf dpTbg) {
            this(nbmf, rfgulbrCoding, dpTbg, fblsf);
        }
        publid CPRffBbnd(String nbmf, Coding rfgulbrCoding, Objfdt undff) {
            this(nbmf, rfgulbrCoding, CONSTANT_Nonf, fblsf);
        }

        publid void sftIndfx(Indfx indfx) {
            this.indfx = indfx;
        }

        protfdtfd void rfbdDbtbFrom(InputStrfbm in) throws IOExdfption {
            supfr.rfbdDbtbFrom(in);
            bssfrt(bssfrtVblidCPRffs(this));
        }

        /** Writf b donstbnt pool rfffrfndf. */
        publid void putRff(Entry f) {
            bddVbluf(fndodfRffOrNull(f, indfx));
        }
        publid void putRff(Entry f, Indfx indfx) {
            bssfrt(this.indfx == null);
            bddVbluf(fndodfRffOrNull(f, indfx));
        }
        publid void putRff(Entry f, bytf dptbg) {
            putRff(f, gftCPIndfx(dptbg));
        }

        publid Entry gftRff() {
            if (indfx == null)  Utils.log.wbrning("No indfx for "+this);
            bssfrt(indfx != null);
            rfturn dfdodfRffOrNull(gftVbluf(), indfx);
        }
        publid Entry gftRff(Indfx indfx) {
            bssfrt(this.indfx == null);
            rfturn dfdodfRffOrNull(gftVbluf(), indfx);
        }
        publid Entry gftRff(bytf dptbg) {
            rfturn gftRff(gftCPIndfx(dptbg));
        }

        privbtf int fndodfRffOrNull(Entry f, Indfx indfx) {
            int nonNullCodf;  // NNC is thf doding whidh bssumfs nulls brf rbrf
            if (f == null) {
                nonNullCodf = -1;  // nfgbtivf vblufs brf rbrf
            } flsf {
                nonNullCodf = fndodfRff(f, indfx);
            }
            // If nulls brf fxpfdtfd, indrfmfnt, to mbkf -1 dodf turn to 0.
            rfturn (nullOK ? 1 : 0) + nonNullCodf;
        }
        privbtf Entry dfdodfRffOrNull(int dodf, Indfx indfx) {
            // Invfrsf to fndodfRffOrNull...
            int nonNullCodf = dodf - (nullOK ? 1 : 0);
            if (nonNullCodf == -1) {
                rfturn null;
            } flsf {
                rfturn dfdodfRff(nonNullCodf, indfx);
            }
        }
    }

    // Bootstrbp support for CPRffBbnds.  Thfsf brf nffdfd to rfdord
    // intfndfd CP indfxfs, bfforf thf CP hbs bffn drfbtfd.
    privbtf finbl List<CPRffBbnd> bllKQBbnds = nfw ArrbyList<>();
    privbtf List<Objfdt[]> nffdPrfdffIndfx = nfw ArrbyList<>();


    int fndodfRff(Entry f, Indfx ix) {
        if (ix == null)
            throw nfw RuntimfExdfption("null indfx for " + f.stringVbluf());
        int doding = ix.indfxOf(f);
        if (vfrbosf > 2)
            Utils.log.finf("putRff "+doding+" => "+f);
        rfturn doding;
    }

    Entry dfdodfRff(int n, Indfx ix) {
        if (n < 0 || n >= ix.sizf())
            Utils.log.wbrning("dfdoding bbd rff "+n+" in "+ix);
        Entry f = ix.gftEntry(n);
        if (vfrbosf > 2)
            Utils.log.finf("gftRff "+n+" => "+f);
        rfturn f;
    }

    privbtf CodingChoosfr dodingChoosfr;
    protfdtfd CodingChoosfr gftCodingChoosfr() {
        if (dodingChoosfr == null) {
            dodingChoosfr = nfw CodingChoosfr(fffort, bbsidCodings);
            if (dodingChoosfr.strfss != null
                && this instbndfof PbdkbgfWritfr) {
                // Twist thf rbndom stbtf bbsfd on my first filf.
                // This sfnds fbdh sfgmfnt off in b difffrfnt dirfdtion.
                List<Pbdkbgf.Clbss> dlbssfs = ((PbdkbgfWritfr)this).pkg.dlbssfs;
                if (!dlbssfs.isEmpty()) {
                    Pbdkbgf.Clbss dls = dlbssfs.gft(0);
                    dodingChoosfr.bddStrfssSffd(dls.gftNbmf().hbshCodf());
                }
            }
        }
        rfturn dodingChoosfr;
    }

    publid CodingMfthod dhoosfCoding(int[] vblufs, int stbrt, int fnd,
                                     Coding rfgulbr, String bbndNbmf,
                                     int[] sizfs) {
        bssfrt(optVbryCodings);
        if (fffort <= MIN_EFFORT) {
            rfturn rfgulbr;
        }
        CodingChoosfr dd = gftCodingChoosfr();
        if (vfrbosf > 1 || dd.vfrbosf > 1) {
            Utils.log.finf("--- dhoosfCoding "+bbndNbmf);
        }
        rfturn dd.dhoosf(vblufs, stbrt, fnd, rfgulbr, sizfs);
    }

    stbtid finbl bytf[] dffbultMftbCoding = { _mftb_dffbult };
    stbtid finbl bytf[] noMftbCoding      = {};

    // Thf first vbluf in b bbnd is blwbys dodfd with thf dffbult doding D.
    // If this first vbluf X is bn fsdbpf vbluf, it bdtublly rfprfsfnts thf
    // first (bnd pfrhbps only) bytf of b mftb-doding.
    //
    // If D.S != 0 bnd D indludfs thf rbngf [-256..-1],
    // thf fsdbpf vblufs brf in thbt rbngf,
    // bnd thf first bytf XB is -1-X.
    //
    // If D.S == 0 bnd D indludfs thf rbngf [(D.L)..(D.L)+255],
    // thf fsdbpf vblufs brf in thbt rbngf,
    // bnd XB is X-(D.L).
    //
    // This rfprfsfntbtion is dfsignfd so thbt b bbnd hfbdfr is unlikfly
    // to bf donfusfd with thf initibl vbluf of b hfbdfrlfss bbnd,
    // bnd yft so thbt b bbnd hfbdfr is likfly to oddupy only b bytf or two.
    //
    // Rfsult is in [0..255] if XB wbs suddfssfully fxtrbdtfd, flsf -1.
    // Sff sfdtion "Coding Spfdififr Mftb-Endoding" in thf JSR 200 spfd.
    protfdtfd stbtid int dfdodfEsdbpfVbluf(int X, Coding rfgulbrCoding) {
        // Thf first vbluf in b bbnd is blwbys dodfd with thf dffbult doding D.
        // If this first vbluf X is bn fsdbpf vbluf, it bdtublly rfprfsfnts thf
        // first (bnd pfrhbps only) bytf of b mftb-doding.
        // Rfsult is in [0..255] if XB wbs suddfssfully fxtrbdtfd, flsf -1.
        if (rfgulbrCoding.B() == 1 || rfgulbrCoding.L() == 0)
            rfturn -1;  // dfgfnfrbtf rfgulbr doding (BYTE1)
        if (rfgulbrCoding.S() != 0) {
            if (-256 <= X && X <= -1 && rfgulbrCoding.min() <= -256) {
                int XB = -1-X;
                bssfrt(XB >= 0 && XB < 256);
                rfturn XB;
            }
        } flsf {
            int L = rfgulbrCoding.L();
            if (L <= X && X <= L+255 && rfgulbrCoding.mbx() >= L+255) {
                int XB = X-L;
                bssfrt(XB >= 0 && XB < 256);
                rfturn XB;
            }
        }
        rfturn -1;  // nfgbtivf vbluf for fbilurf
    }
    // Invfrsf to dfdodfEsdbpfVbluf().
    protfdtfd stbtid int fndodfEsdbpfVbluf(int XB, Coding rfgulbrCoding) {
        bssfrt(XB >= 0 && XB < 256);
        bssfrt(rfgulbrCoding.B() > 1 && rfgulbrCoding.L() > 0);
        int X;
        if (rfgulbrCoding.S() != 0) {
            bssfrt(rfgulbrCoding.min() <= -256);
            X = -1-XB;
        } flsf {
            int L = rfgulbrCoding.L();
            bssfrt(rfgulbrCoding.mbx() >= L+255);
            X = XB+L;
        }
        bssfrt(dfdodfEsdbpfVbluf(X, rfgulbrCoding) == XB)
            : (rfgulbrCoding+" XB="+XB+" X="+X);
        rfturn X;
    }

    stbtid {
        boolfbn dhfdkXB = fblsf;
        bssfrt(dhfdkXB = truf);
        if (dhfdkXB) {
            for (int i = 0; i < bbsidCodings.lfngth; i++) {
                Coding D = bbsidCodings[i];
                if (D == null)   dontinuf;
                if (D.B() == 1)  dontinuf;
                if (D.L() == 0)  dontinuf;
                for (int XB = 0; XB <= 255; XB++) {
                    // Thf following fxfrdisfs dfdodfEsdbpfVbluf blso:
                    fndodfEsdbpfVbluf(XB, D);
                }
            }
        }
    }

    dlbss MultiBbnd fxtfnds Bbnd {
        MultiBbnd(String nbmf, Coding rfgulbrCoding) {
            supfr(nbmf, rfgulbrCoding);
        }

        @Ovfrridf
        publid Bbnd init() {
            supfr.init();
            // This is bll just to kffp thf bssfrts hbppy:
            sftCbpbdity(0);
            if (phbsf() == EXPECT_PHASE) {
                // Fbst forwbrd:
                sftPhbsf(READ_PHASE);
                sftPhbsf(DISBURSE_PHASE);
            }
            rfturn this;
        }

        Bbnd[] bbnds     = nfw Bbnd[10];
        int    bbndCount = 0;

        int sizf() {
            rfturn bbndCount;
        }
        Bbnd gft(int i) {
            bssfrt(i < bbndCount);
            rfturn bbnds[i];
        }
        Bbnd[] toArrby() {
            rfturn (Bbnd[]) rfbllod(bbnds, bbndCount);
        }

        void bdd(Bbnd b) {
            bssfrt(bbndCount == 0 || notfPrfvForAssfrt(b, bbnds[bbndCount-1]));
            if (bbndCount == bbnds.lfngth) {
                bbnds = (Bbnd[]) rfbllod(bbnds);
            }
            bbnds[bbndCount++] = b;
        }

        BytfBbnd nfwBytfBbnd(String nbmf) {
            BytfBbnd b = nfw BytfBbnd(nbmf);
            b.init(); bdd(b);
            rfturn b;
        }
        IntBbnd nfwIntBbnd(String nbmf) {
            IntBbnd b = nfw IntBbnd(nbmf, rfgulbrCoding);
            b.init(); bdd(b);
            rfturn b;
        }
        IntBbnd nfwIntBbnd(String nbmf, Coding rfgulbrCoding) {
            IntBbnd b = nfw IntBbnd(nbmf, rfgulbrCoding);
            b.init(); bdd(b);
            rfturn b;
        }
        MultiBbnd nfwMultiBbnd(String nbmf, Coding rfgulbrCoding) {
            MultiBbnd b = nfw MultiBbnd(nbmf, rfgulbrCoding);
            b.init(); bdd(b);
            rfturn b;
        }
        CPRffBbnd nfwCPRffBbnd(String nbmf, bytf dpTbg) {
            CPRffBbnd b = nfw CPRffBbnd(nbmf, rfgulbrCoding, dpTbg);
            b.init(); bdd(b);
            rfturn b;
        }
        CPRffBbnd nfwCPRffBbnd(String nbmf, Coding rfgulbrCoding,
                               bytf dpTbg) {
            CPRffBbnd b = nfw CPRffBbnd(nbmf, rfgulbrCoding, dpTbg);
            b.init(); bdd(b);
            rfturn b;
        }
        CPRffBbnd nfwCPRffBbnd(String nbmf, Coding rfgulbrCoding,
                               bytf dpTbg, boolfbn nullOK) {
            CPRffBbnd b = nfw CPRffBbnd(nbmf, rfgulbrCoding, dpTbg, nullOK);
            b.init(); bdd(b);
            rfturn b;
        }

        int bbndCount() { rfturn bbndCount; }

        privbtf int dbp = -1;
        @Ovfrridf
        publid int dbpbdity() { rfturn dbp; }
        @Ovfrridf
        publid void sftCbpbdity(int dbp) { this.dbp = dbp; }

        @Ovfrridf
        publid int lfngth() { rfturn 0; }
        @Ovfrridf
        publid int vblufsRfmbiningForDfbug() { rfturn 0; }

        @Ovfrridf
        protfdtfd void dhoosfBbndCodings() throws IOExdfption {
            // doding dfdision pbss
            for (int i = 0; i < bbndCount; i++) {
                Bbnd b = bbnds[i];
                b.dhoosfBbndCodings();
            }
        }

        @Ovfrridf
        protfdtfd long domputfOutputSizf() {
            // doding dfdision pbss
            long sum = 0;
            for (int i = 0; i < bbndCount; i++) {
                Bbnd b = bbnds[i];
                long bsizf = b.outputSizf();
                bssfrt(bsizf >= 0) : b;
                sum += bsizf;
            }
            // do not dbdhf
            rfturn sum;
        }

        @Ovfrridf
        protfdtfd void writfDbtbTo(OutputStrfbm out) throws IOExdfption {
            long prfCount = 0;
            if (outputCountfr != null)  prfCount = outputCountfr.gftCount();
            for (int i = 0; i < bbndCount; i++) {
                Bbnd b = bbnds[i];
                b.writfTo(out);
                if (outputCountfr != null) {
                    long postCount = outputCountfr.gftCount();
                    long lfn = postCount - prfCount;
                    prfCount = postCount;
                    if ((vfrbosf > 0 && lfn > 0) || vfrbosf > 1) {
                        Utils.log.info("  ...wrotf "+lfn+" bytfs from "+b);
                    }
                }
            }
        }

        @Ovfrridf
        protfdtfd void rfbdDbtbFrom(InputStrfbm in) throws IOExdfption {
            bssfrt(fblsf);  // not dbllfd?
            for (int i = 0; i < bbndCount; i++) {
                Bbnd b = bbnds[i];
                b.rfbdFrom(in);
                if ((vfrbosf > 0 && b.lfngth() > 0) || vfrbosf > 1) {
                    Utils.log.info("  ...rfbd "+b);
                }
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn "{"+bbndCount()+" bbnds: "+supfr.toString()+"}";
        }
    }

    /**
     * An output strfbm whidh dounts thf numbfr of bytfs writtfn.
     */
    privbtf stbtid
    dlbss BytfCountfr fxtfnds FiltfrOutputStrfbm {
        // (should go publid undfr thf nbmf CountingOutputStrfbm?)

        privbtf long dount;

        publid BytfCountfr(OutputStrfbm out) {
            supfr(out);
        }

        publid long gftCount() { rfturn dount; }
        publid void sftCount(long d) { dount = d; }

        @Ovfrridf
        publid void writf(int b) throws IOExdfption {
            dount++;
            if (out != null)  out.writf(b);
        }
        @Ovfrridf
        publid void writf(bytf b[], int off, int lfn) throws IOExdfption {
            dount += lfn;
            if (out != null)  out.writf(b, off, lfn);
        }
        @Ovfrridf
        publid String toString() {
            rfturn String.vblufOf(gftCount());
        }
    }
    BytfCountfr outputCountfr;

    void writfAllBbndsTo(OutputStrfbm out) throws IOExdfption {
        // Wrbp b bytf-dountfr bround thf output strfbm.
        outputCountfr = nfw BytfCountfr(out);
        out = outputCountfr;
        bll_bbnds.writfTo(out);
        if (vfrbosf > 0) {
            long nbytfs = outputCountfr.gftCount();
            Utils.log.info("Wrotf totbl of "+nbytfs+" bytfs.");
            bssfrt(nbytfs == brdhivfSizf0+brdhivfSizf1);
        }
        outputCountfr = null;
    }

    // rbndom AO_XXX bits, dfdodfd from thf brdhivf hfbdfr
    protfdtfd int brdhivfOptions;

    // brdhivfSizf1 sizfs most of thf brdhivf [brdhivf_options..filf_bits).
    protfdtfd long brdhivfSizf0; // sizf through brdhivf_sizf_lo
    protfdtfd long brdhivfSizf1; // sizf rfportfd in brdhivf_hfbdfr
    protfdtfd int  brdhivfNfxtCount; // rfportfd in brdhivf_hfbdfr

    stbtid finbl int AH_LENGTH_0 = 3;     // brdhivf_hfbdfr_0 = {minvfr, mbjvfr, options}
    stbtid finbl int AH_LENGTH_MIN = 15;  // obsfrvfd in spfd {hfbdfr_0[3], dp_dounts[8], dlbss_dounts[4]}
    // Lfngth dontributions from optionbl brdhivf sizf fiflds:
    stbtid finbl int AH_LENGTH_S = 2; // brdhivf_hfbdfr_S = optionbl {sizf_hi, sizf_lo}
    stbtid finbl int AH_ARCHIVE_SIZE_HI = 0; // offsft in brdhivf_hfbdfr_S
    stbtid finbl int AH_ARCHIVE_SIZE_LO = 1; // offsft in brdhivf_hfbdfr_S
    // Lfngth dontributions from optionbl hfbdfr fiflds:
    stbtid finbl int AH_FILE_HEADER_LEN = 5; // filf_dounts = {{sizf_hi, sizf_lo}, nfxt, modtimf, filfs}
    stbtid finbl int AH_SPECIAL_FORMAT_LEN = 2; // spfdibl_dounts = {lbyouts, bbnd_hfbdfrs}
    stbtid finbl int AH_CP_NUMBER_LEN = 4;  // dp_numbfr_dounts = {int, flobt, long, doublf}
    stbtid finbl int AH_CP_EXTRA_LEN = 4;  // dp_bttr_dounts = {MH, MT, InDy, BSM}

    // Common strudturf of bttributf bbnd groups:
    stbtid finbl int AB_FLAGS_HI = 0;
    stbtid finbl int AB_FLAGS_LO = 1;
    stbtid finbl int AB_ATTR_COUNT = 2;
    stbtid finbl int AB_ATTR_INDEXES = 3;
    stbtid finbl int AB_ATTR_CALLS = 4;

    stbtid IntBbnd gftAttrBbnd(MultiBbnd xxx_bttr_bbnds, int whidh) {
        IntBbnd b = (IntBbnd) xxx_bttr_bbnds.gft(whidh);
        switdh (whidh) {
        dbsf AB_FLAGS_HI:
            bssfrt(b.nbmf().fndsWith("_flbgs_hi")); brfbk;
        dbsf AB_FLAGS_LO:
            bssfrt(b.nbmf().fndsWith("_flbgs_lo")); brfbk;
        dbsf AB_ATTR_COUNT:
            bssfrt(b.nbmf().fndsWith("_bttr_dount")); brfbk;
        dbsf AB_ATTR_INDEXES:
            bssfrt(b.nbmf().fndsWith("_bttr_indfxfs")); brfbk;
        dbsf AB_ATTR_CALLS:
            bssfrt(b.nbmf().fndsWith("_bttr_dblls")); brfbk;
        dffbult:
            bssfrt(fblsf); brfbk;
        }
        rfturn b;
    }

    stbtid privbtf finbl boolfbn NULL_IS_OK = truf;

    MultiBbnd bll_bbnds = (MultiBbnd) nfw MultiBbnd("(pbdkbgf)", UNSIGNED5).init();

    // filf hfbdfr (vbrious rbndom bytfs)
    BytfBbnd brdhivf_mbgid = bll_bbnds.nfwBytfBbnd("brdhivf_mbgid");
    IntBbnd  brdhivf_hfbdfr_0 = bll_bbnds.nfwIntBbnd("brdhivf_hfbdfr_0", UNSIGNED5);
    IntBbnd  brdhivf_hfbdfr_S = bll_bbnds.nfwIntBbnd("brdhivf_hfbdfr_S", UNSIGNED5);
    IntBbnd  brdhivf_hfbdfr_1 = bll_bbnds.nfwIntBbnd("brdhivf_hfbdfr_1", UNSIGNED5);
    BytfBbnd bbnd_hfbdfrs = bll_bbnds.nfwBytfBbnd("bbnd_hfbdfrs");

    // donstbnt pool dontfnts
    MultiBbnd dp_bbnds = bll_bbnds.nfwMultiBbnd("(donstbnt_pool)", DELTA5);
    IntBbnd   dp_Utf8_prffix = dp_bbnds.nfwIntBbnd("dp_Utf8_prffix");
    IntBbnd   dp_Utf8_suffix = dp_bbnds.nfwIntBbnd("dp_Utf8_suffix", UNSIGNED5);
    IntBbnd   dp_Utf8_dhbrs = dp_bbnds.nfwIntBbnd("dp_Utf8_dhbrs", CHAR3);
    IntBbnd   dp_Utf8_big_suffix = dp_bbnds.nfwIntBbnd("dp_Utf8_big_suffix");
    MultiBbnd dp_Utf8_big_dhbrs = dp_bbnds.nfwMultiBbnd("(dp_Utf8_big_dhbrs)", DELTA5);
    IntBbnd   dp_Int = dp_bbnds.nfwIntBbnd("dp_Int", UDELTA5);
    IntBbnd   dp_Flobt = dp_bbnds.nfwIntBbnd("dp_Flobt", UDELTA5);
    IntBbnd   dp_Long_hi = dp_bbnds.nfwIntBbnd("dp_Long_hi", UDELTA5);
    IntBbnd   dp_Long_lo = dp_bbnds.nfwIntBbnd("dp_Long_lo");
    IntBbnd   dp_Doublf_hi = dp_bbnds.nfwIntBbnd("dp_Doublf_hi", UDELTA5);
    IntBbnd   dp_Doublf_lo = dp_bbnds.nfwIntBbnd("dp_Doublf_lo");
    CPRffBbnd dp_String = dp_bbnds.nfwCPRffBbnd("dp_String", UDELTA5, CONSTANT_Utf8);
    CPRffBbnd dp_Clbss = dp_bbnds.nfwCPRffBbnd("dp_Clbss", UDELTA5, CONSTANT_Utf8);
    CPRffBbnd dp_Signbturf_form = dp_bbnds.nfwCPRffBbnd("dp_Signbturf_form", CONSTANT_Utf8);
    CPRffBbnd dp_Signbturf_dlbssfs = dp_bbnds.nfwCPRffBbnd("dp_Signbturf_dlbssfs", UDELTA5, CONSTANT_Clbss);
    CPRffBbnd dp_Dfsdr_nbmf = dp_bbnds.nfwCPRffBbnd("dp_Dfsdr_nbmf", CONSTANT_Utf8);
    CPRffBbnd dp_Dfsdr_typf = dp_bbnds.nfwCPRffBbnd("dp_Dfsdr_typf", UDELTA5, CONSTANT_Signbturf);
    CPRffBbnd dp_Fifld_dlbss = dp_bbnds.nfwCPRffBbnd("dp_Fifld_dlbss", CONSTANT_Clbss);
    CPRffBbnd dp_Fifld_dfsd = dp_bbnds.nfwCPRffBbnd("dp_Fifld_dfsd", UDELTA5, CONSTANT_NbmfbndTypf);
    CPRffBbnd dp_Mfthod_dlbss = dp_bbnds.nfwCPRffBbnd("dp_Mfthod_dlbss", CONSTANT_Clbss);
    CPRffBbnd dp_Mfthod_dfsd = dp_bbnds.nfwCPRffBbnd("dp_Mfthod_dfsd", UDELTA5, CONSTANT_NbmfbndTypf);
    CPRffBbnd dp_Imfthod_dlbss = dp_bbnds.nfwCPRffBbnd("dp_Imfthod_dlbss", CONSTANT_Clbss);
    CPRffBbnd dp_Imfthod_dfsd = dp_bbnds.nfwCPRffBbnd("dp_Imfthod_dfsd", UDELTA5, CONSTANT_NbmfbndTypf);
    IntBbnd   dp_MfthodHbndlf_rffkind = dp_bbnds.nfwIntBbnd("dp_MfthodHbndlf_rffkind", DELTA5);
    CPRffBbnd dp_MfthodHbndlf_mfmbfr = dp_bbnds.nfwCPRffBbnd("dp_MfthodHbndlf_mfmbfr", UDELTA5, CONSTANT_AnyMfmbfr);
    CPRffBbnd dp_MfthodTypf = dp_bbnds.nfwCPRffBbnd("dp_MfthodTypf", UDELTA5, CONSTANT_Signbturf);
    CPRffBbnd dp_BootstrbpMfthod_rff = dp_bbnds.nfwCPRffBbnd("dp_BootstrbpMfthod_rff", DELTA5, CONSTANT_MfthodHbndlf);
    IntBbnd   dp_BootstrbpMfthod_brg_dount = dp_bbnds.nfwIntBbnd("dp_BootstrbpMfthod_brg_dount", UDELTA5);
    CPRffBbnd dp_BootstrbpMfthod_brg = dp_bbnds.nfwCPRffBbnd("dp_BootstrbpMfthod_brg", DELTA5, CONSTANT_LobdbblfVbluf);
    CPRffBbnd dp_InvokfDynbmid_spfd = dp_bbnds.nfwCPRffBbnd("dp_InvokfDynbmid_spfd", DELTA5, CONSTANT_BootstrbpMfthod);
    CPRffBbnd dp_InvokfDynbmid_dfsd = dp_bbnds.nfwCPRffBbnd("dp_InvokfDynbmid_dfsd", UDELTA5, CONSTANT_NbmfbndTypf);

    // bbnds for dbrrying bttributf dffinitions:
    MultiBbnd bttr_dffinition_bbnds = bll_bbnds.nfwMultiBbnd("(bttr_dffinition_bbnds)", UNSIGNED5);
    BytfBbnd bttr_dffinition_hfbdfrs = bttr_dffinition_bbnds.nfwBytfBbnd("bttr_dffinition_hfbdfrs");
    CPRffBbnd bttr_dffinition_nbmf = bttr_dffinition_bbnds.nfwCPRffBbnd("bttr_dffinition_nbmf", CONSTANT_Utf8);
    CPRffBbnd bttr_dffinition_lbyout = bttr_dffinition_bbnds.nfwCPRffBbnd("bttr_dffinition_lbyout", CONSTANT_Utf8);

    // bbnds for hbrdwirfd InnfrClbssfs bttributf (shbrfd bdross thf pbdkbgf)
    MultiBbnd id_bbnds = bll_bbnds.nfwMultiBbnd("(id_bbnds)", DELTA5);
    CPRffBbnd id_this_dlbss = id_bbnds.nfwCPRffBbnd("id_this_dlbss", UDELTA5, CONSTANT_Clbss);
    IntBbnd id_flbgs = id_bbnds.nfwIntBbnd("id_flbgs", UNSIGNED5);
    // Thfsf bbnds dontbin dbtb only whfrf flbgs sfts ACC_IC_LONG_FORM:
    CPRffBbnd id_outfr_dlbss = id_bbnds.nfwCPRffBbnd("id_outfr_dlbss", DELTA5, CONSTANT_Clbss, NULL_IS_OK);
    CPRffBbnd id_nbmf = id_bbnds.nfwCPRffBbnd("id_nbmf", DELTA5, CONSTANT_Utf8, NULL_IS_OK);

    // bbnds for dbrrying dlbss sdhfmb informbtion:
    MultiBbnd dlbss_bbnds = bll_bbnds.nfwMultiBbnd("(dlbss_bbnds)", DELTA5);
    CPRffBbnd dlbss_this = dlbss_bbnds.nfwCPRffBbnd("dlbss_this", CONSTANT_Clbss);
    CPRffBbnd dlbss_supfr = dlbss_bbnds.nfwCPRffBbnd("dlbss_supfr", CONSTANT_Clbss);
    IntBbnd   dlbss_intfrfbdf_dount = dlbss_bbnds.nfwIntBbnd("dlbss_intfrfbdf_dount");
    CPRffBbnd dlbss_intfrfbdf = dlbss_bbnds.nfwCPRffBbnd("dlbss_intfrfbdf", CONSTANT_Clbss);

    // bbnds for dlbss mfmbfrs
    IntBbnd   dlbss_fifld_dount = dlbss_bbnds.nfwIntBbnd("dlbss_fifld_dount");
    IntBbnd   dlbss_mfthod_dount = dlbss_bbnds.nfwIntBbnd("dlbss_mfthod_dount");

    CPRffBbnd fifld_dfsdr = dlbss_bbnds.nfwCPRffBbnd("fifld_dfsdr", CONSTANT_NbmfbndTypf);
    MultiBbnd fifld_bttr_bbnds = dlbss_bbnds.nfwMultiBbnd("(fifld_bttr_bbnds)", UNSIGNED5);
    IntBbnd fifld_flbgs_hi = fifld_bttr_bbnds.nfwIntBbnd("fifld_flbgs_hi");
    IntBbnd fifld_flbgs_lo = fifld_bttr_bbnds.nfwIntBbnd("fifld_flbgs_lo");
    IntBbnd fifld_bttr_dount = fifld_bttr_bbnds.nfwIntBbnd("fifld_bttr_dount");
    IntBbnd fifld_bttr_indfxfs = fifld_bttr_bbnds.nfwIntBbnd("fifld_bttr_indfxfs");
    IntBbnd fifld_bttr_dblls = fifld_bttr_bbnds.nfwIntBbnd("fifld_bttr_dblls");

    // bbnds for prfdffinfd fifld bttributfs
    CPRffBbnd fifld_ConstbntVbluf_KQ = fifld_bttr_bbnds.nfwCPRffBbnd("fifld_ConstbntVbluf_KQ", CONSTANT_FifldSpfdifid);
    CPRffBbnd fifld_Signbturf_RS = fifld_bttr_bbnds.nfwCPRffBbnd("fifld_Signbturf_RS", CONSTANT_Signbturf);
    MultiBbnd fifld_mftbdbtb_bbnds = fifld_bttr_bbnds.nfwMultiBbnd("(fifld_mftbdbtb_bbnds)", UNSIGNED5);
    MultiBbnd fifld_typf_mftbdbtb_bbnds = fifld_bttr_bbnds.nfwMultiBbnd("(fifld_typf_mftbdbtb_bbnds)", UNSIGNED5);

    CPRffBbnd mfthod_dfsdr = dlbss_bbnds.nfwCPRffBbnd("mfthod_dfsdr", MDELTA5, CONSTANT_NbmfbndTypf);
    MultiBbnd mfthod_bttr_bbnds = dlbss_bbnds.nfwMultiBbnd("(mfthod_bttr_bbnds)", UNSIGNED5);
    IntBbnd  mfthod_flbgs_hi = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_flbgs_hi");
    IntBbnd  mfthod_flbgs_lo = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_flbgs_lo");
    IntBbnd  mfthod_bttr_dount = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_bttr_dount");
    IntBbnd  mfthod_bttr_indfxfs = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_bttr_indfxfs");
    IntBbnd  mfthod_bttr_dblls = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_bttr_dblls");
    // bbnd for prfdffinfd mfthod bttributfs
    IntBbnd  mfthod_Exdfptions_N = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_Exdfptions_N");
    CPRffBbnd mfthod_Exdfptions_RC = mfthod_bttr_bbnds.nfwCPRffBbnd("mfthod_Exdfptions_RC", CONSTANT_Clbss);
    CPRffBbnd mfthod_Signbturf_RS = mfthod_bttr_bbnds.nfwCPRffBbnd("mfthod_Signbturf_RS", CONSTANT_Signbturf);
    MultiBbnd mfthod_mftbdbtb_bbnds = mfthod_bttr_bbnds.nfwMultiBbnd("(mfthod_mftbdbtb_bbnds)", UNSIGNED5);
    // bbnd for prfdffinf mfthod pbrbmftfrs
    IntBbnd  mfthod_MfthodPbrbmftfrs_NB = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_MfthodPbrbmftfrs_NB", BYTE1);
    CPRffBbnd mfthod_MfthodPbrbmftfrs_nbmf_RUN = mfthod_bttr_bbnds.nfwCPRffBbnd("mfthod_MfthodPbrbmftfrs_nbmf_RUN", UNSIGNED5, CONSTANT_Utf8, NULL_IS_OK);
    IntBbnd   mfthod_MfthodPbrbmftfrs_flbg_FH = mfthod_bttr_bbnds.nfwIntBbnd("mfthod_MfthodPbrbmftfrs_flbg_FH");
    MultiBbnd mfthod_typf_mftbdbtb_bbnds = mfthod_bttr_bbnds.nfwMultiBbnd("(mfthod_typf_mftbdbtb_bbnds)", UNSIGNED5);

    MultiBbnd dlbss_bttr_bbnds = dlbss_bbnds.nfwMultiBbnd("(dlbss_bttr_bbnds)", UNSIGNED5);
    IntBbnd dlbss_flbgs_hi = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_flbgs_hi");
    IntBbnd dlbss_flbgs_lo = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_flbgs_lo");
    IntBbnd dlbss_bttr_dount = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_bttr_dount");
    IntBbnd dlbss_bttr_indfxfs = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_bttr_indfxfs");
    IntBbnd dlbss_bttr_dblls = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_bttr_dblls");
    // bbnd for prfdffinfd SourdfFilf bnd othfr dlbss bttributfs
    CPRffBbnd dlbss_SourdfFilf_RUN = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_SourdfFilf_RUN", UNSIGNED5, CONSTANT_Utf8, NULL_IS_OK);
    CPRffBbnd dlbss_EndlosingMfthod_RC = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_EndlosingMfthod_RC", CONSTANT_Clbss);
    CPRffBbnd dlbss_EndlosingMfthod_RDN = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_EndlosingMfthod_RDN", UNSIGNED5, CONSTANT_NbmfbndTypf, NULL_IS_OK);
    CPRffBbnd dlbss_Signbturf_RS = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_Signbturf_RS", CONSTANT_Signbturf);
    MultiBbnd dlbss_mftbdbtb_bbnds = dlbss_bttr_bbnds.nfwMultiBbnd("(dlbss_mftbdbtb_bbnds)", UNSIGNED5);
    IntBbnd   dlbss_InnfrClbssfs_N = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_InnfrClbssfs_N");
    CPRffBbnd dlbss_InnfrClbssfs_RC = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_InnfrClbssfs_RC", CONSTANT_Clbss);
    IntBbnd   dlbss_InnfrClbssfs_F = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_InnfrClbssfs_F");
    CPRffBbnd dlbss_InnfrClbssfs_outfr_RCN = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_InnfrClbssfs_outfr_RCN", UNSIGNED5, CONSTANT_Clbss, NULL_IS_OK);
    CPRffBbnd dlbss_InnfrClbssfs_nbmf_RUN = dlbss_bttr_bbnds.nfwCPRffBbnd("dlbss_InnfrClbssfs_nbmf_RUN", UNSIGNED5, CONSTANT_Utf8, NULL_IS_OK);
    IntBbnd dlbss_ClbssFilf_vfrsion_minor_H = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_ClbssFilf_vfrsion_minor_H");
    IntBbnd dlbss_ClbssFilf_vfrsion_mbjor_H = dlbss_bttr_bbnds.nfwIntBbnd("dlbss_ClbssFilf_vfrsion_mbjor_H");
    MultiBbnd dlbss_typf_mftbdbtb_bbnds = dlbss_bttr_bbnds.nfwMultiBbnd("(dlbss_typf_mftbdbtb_bbnds)", UNSIGNED5);

    MultiBbnd dodf_bbnds = dlbss_bbnds.nfwMultiBbnd("(dodf_bbnds)", UNSIGNED5);
    BytfBbnd  dodf_hfbdfrs = dodf_bbnds.nfwBytfBbnd("dodf_hfbdfrs"); //BYTE1
    IntBbnd   dodf_mbx_stbdk = dodf_bbnds.nfwIntBbnd("dodf_mbx_stbdk", UNSIGNED5);
    IntBbnd   dodf_mbx_nb_lodbls = dodf_bbnds.nfwIntBbnd("dodf_mbx_nb_lodbls", UNSIGNED5);
    IntBbnd   dodf_hbndlfr_dount = dodf_bbnds.nfwIntBbnd("dodf_hbndlfr_dount", UNSIGNED5);
    IntBbnd   dodf_hbndlfr_stbrt_P = dodf_bbnds.nfwIntBbnd("dodf_hbndlfr_stbrt_P", BCI5);
    IntBbnd   dodf_hbndlfr_fnd_PO = dodf_bbnds.nfwIntBbnd("dodf_hbndlfr_fnd_PO", BRANCH5);
    IntBbnd   dodf_hbndlfr_dbtdh_PO = dodf_bbnds.nfwIntBbnd("dodf_hbndlfr_dbtdh_PO", BRANCH5);
    CPRffBbnd dodf_hbndlfr_dlbss_RCN = dodf_bbnds.nfwCPRffBbnd("dodf_hbndlfr_dlbss_RCN", UNSIGNED5, CONSTANT_Clbss, NULL_IS_OK);

    MultiBbnd dodf_bttr_bbnds = dlbss_bbnds.nfwMultiBbnd("(dodf_bttr_bbnds)", UNSIGNED5);
    IntBbnd   dodf_flbgs_hi = dodf_bttr_bbnds.nfwIntBbnd("dodf_flbgs_hi");
    IntBbnd   dodf_flbgs_lo = dodf_bttr_bbnds.nfwIntBbnd("dodf_flbgs_lo");
    IntBbnd   dodf_bttr_dount = dodf_bttr_bbnds.nfwIntBbnd("dodf_bttr_dount");
    IntBbnd   dodf_bttr_indfxfs = dodf_bttr_bbnds.nfwIntBbnd("dodf_bttr_indfxfs");
    IntBbnd   dodf_bttr_dblls = dodf_bttr_bbnds.nfwIntBbnd("dodf_bttr_dblls");

    MultiBbnd stbdkmbp_bbnds = dodf_bttr_bbnds.nfwMultiBbnd("(StbdkMbpTbblf_bbnds)", UNSIGNED5);
    IntBbnd   dodf_StbdkMbpTbblf_N = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_N");
    IntBbnd   dodf_StbdkMbpTbblf_frbmf_T = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_frbmf_T",BYTE1);
    IntBbnd   dodf_StbdkMbpTbblf_lodbl_N = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_lodbl_N");
    IntBbnd   dodf_StbdkMbpTbblf_stbdk_N = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_stbdk_N");
    IntBbnd   dodf_StbdkMbpTbblf_offsft = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_offsft", UNSIGNED5);
    IntBbnd   dodf_StbdkMbpTbblf_T = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_T", BYTE1);
    CPRffBbnd dodf_StbdkMbpTbblf_RC = stbdkmbp_bbnds.nfwCPRffBbnd("dodf_StbdkMbpTbblf_RC", CONSTANT_Clbss);
    IntBbnd   dodf_StbdkMbpTbblf_P = stbdkmbp_bbnds.nfwIntBbnd("dodf_StbdkMbpTbblf_P", BCI5);

    // bbnds for prfdffinfd LinfNumbfrTbblf bttributf
    IntBbnd   dodf_LinfNumbfrTbblf_N = dodf_bttr_bbnds.nfwIntBbnd("dodf_LinfNumbfrTbblf_N");
    IntBbnd   dodf_LinfNumbfrTbblf_bdi_P = dodf_bttr_bbnds.nfwIntBbnd("dodf_LinfNumbfrTbblf_bdi_P", BCI5);
    IntBbnd   dodf_LinfNumbfrTbblf_linf = dodf_bttr_bbnds.nfwIntBbnd("dodf_LinfNumbfrTbblf_linf");

    // bbnds for prfdffinfd LodblVbribblf{Typf}Tbblf bttributfs
    IntBbnd   dodf_LodblVbribblfTbblf_N = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTbblf_N");
    IntBbnd   dodf_LodblVbribblfTbblf_bdi_P = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTbblf_bdi_P", BCI5);
    IntBbnd   dodf_LodblVbribblfTbblf_spbn_O = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTbblf_spbn_O", BRANCH5);
    CPRffBbnd dodf_LodblVbribblfTbblf_nbmf_RU = dodf_bttr_bbnds.nfwCPRffBbnd("dodf_LodblVbribblfTbblf_nbmf_RU", CONSTANT_Utf8);
    CPRffBbnd dodf_LodblVbribblfTbblf_typf_RS = dodf_bttr_bbnds.nfwCPRffBbnd("dodf_LodblVbribblfTbblf_typf_RS", CONSTANT_Signbturf);
    IntBbnd   dodf_LodblVbribblfTbblf_slot = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTbblf_slot");
    IntBbnd   dodf_LodblVbribblfTypfTbblf_N = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTypfTbblf_N");
    IntBbnd   dodf_LodblVbribblfTypfTbblf_bdi_P = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTypfTbblf_bdi_P", BCI5);
    IntBbnd   dodf_LodblVbribblfTypfTbblf_spbn_O = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTypfTbblf_spbn_O", BRANCH5);
    CPRffBbnd dodf_LodblVbribblfTypfTbblf_nbmf_RU = dodf_bttr_bbnds.nfwCPRffBbnd("dodf_LodblVbribblfTypfTbblf_nbmf_RU", CONSTANT_Utf8);
    CPRffBbnd dodf_LodblVbribblfTypfTbblf_typf_RS = dodf_bttr_bbnds.nfwCPRffBbnd("dodf_LodblVbribblfTypfTbblf_typf_RS", CONSTANT_Signbturf);
    IntBbnd   dodf_LodblVbribblfTypfTbblf_slot = dodf_bttr_bbnds.nfwIntBbnd("dodf_LodblVbribblfTypfTbblf_slot");
    MultiBbnd dodf_typf_mftbdbtb_bbnds = dodf_bttr_bbnds.nfwMultiBbnd("(dodf_typf_mftbdbtb_bbnds)", UNSIGNED5);

    // bbnds for bytfdodfs
    MultiBbnd bd_bbnds = bll_bbnds.nfwMultiBbnd("(bytf_dodfs)", UNSIGNED5);
    BytfBbnd  bd_dodfs = bd_bbnds.nfwBytfBbnd("bd_dodfs"); //BYTE1
    // rfmbining bbnds providf typfd opdodf fiflds rfquirfd by thf bd_dodfs

    IntBbnd   bd_dbsf_dount = bd_bbnds.nfwIntBbnd("bd_dbsf_dount");  // *switdh
    IntBbnd   bd_dbsf_vbluf = bd_bbnds.nfwIntBbnd("bd_dbsf_vbluf", DELTA5);  // *switdh
    BytfBbnd  bd_bytf = bd_bbnds.nfwBytfBbnd("bd_bytf"); //BYTE1   // bipush, iind, *nfwbrrby
    IntBbnd   bd_short = bd_bbnds.nfwIntBbnd("bd_short", DELTA5);  // sipush, widf iind
    IntBbnd   bd_lodbl = bd_bbnds.nfwIntBbnd("bd_lodbl");    // *lobd, *storf, iind, rft
    IntBbnd   bd_lbbfl = bd_bbnds.nfwIntBbnd("bd_lbbfl", BRANCH5);    // if*, goto*, jsr*, *switdh

    // Most CP rffs fxhibit somf dorrflbtion, bnd bfnffit from dfltb doding.
    // Thf notbblf fxdfptions brf dlbss bnd mfthod rfffrfndfs.

    // ldd* opfrbnds:
    CPRffBbnd bd_intrff = bd_bbnds.nfwCPRffBbnd("bd_intrff", DELTA5, CONSTANT_Intfgfr);
    CPRffBbnd bd_flobtrff = bd_bbnds.nfwCPRffBbnd("bd_flobtrff", DELTA5, CONSTANT_Flobt);
    CPRffBbnd bd_longrff = bd_bbnds.nfwCPRffBbnd("bd_longrff", DELTA5, CONSTANT_Long);
    CPRffBbnd bd_doublfrff = bd_bbnds.nfwCPRffBbnd("bd_doublfrff", DELTA5, CONSTANT_Doublf);
    CPRffBbnd bd_stringrff = bd_bbnds.nfwCPRffBbnd("bd_stringrff", DELTA5, CONSTANT_String);
    CPRffBbnd bd_lobdbblfvblufrff = bd_bbnds.nfwCPRffBbnd("bd_lobdbblfvblufrff", DELTA5, CONSTANT_LobdbblfVbluf);

    // nulls produdfd by bd_dlbssrff brf tbkfn to mfbn thf durrfnt dlbss
    CPRffBbnd bd_dlbssrff = bd_bbnds.nfwCPRffBbnd("bd_dlbssrff", UNSIGNED5, CONSTANT_Clbss, NULL_IS_OK);   // nfw, *bnfw*, d*dbst, i*of, ldd
    CPRffBbnd bd_fifldrff = bd_bbnds.nfwCPRffBbnd("bd_fifldrff", DELTA5, CONSTANT_Fifldrff);   // gft*, put*
    CPRffBbnd bd_mfthodrff = bd_bbnds.nfwCPRffBbnd("bd_mfthodrff", CONSTANT_Mfthodrff); // invokf[vs]*
    CPRffBbnd bd_imfthodrff = bd_bbnds.nfwCPRffBbnd("bd_imfthodrff", DELTA5, CONSTANT_IntfrfbdfMfthodrff); // invokfintfrfbdf
    CPRffBbnd bd_indyrff = bd_bbnds.nfwCPRffBbnd("bd_indyrff", DELTA5, CONSTANT_InvokfDynbmid); // invokfdynbmid

    // _sflf_linkfr_op fbmily
    CPRffBbnd bd_thisfifld = bd_bbnds.nfwCPRffBbnd("bd_thisfifld", CONSTANT_Nonf);     // bny fifld within dur. dlbss
    CPRffBbnd bd_supfrfifld = bd_bbnds.nfwCPRffBbnd("bd_supfrfifld", CONSTANT_Nonf);   // bny fifld within supfrdlbss
    CPRffBbnd bd_thismfthod = bd_bbnds.nfwCPRffBbnd("bd_thismfthod", CONSTANT_Nonf);   // bny mfthod within dur. dlbss
    CPRffBbnd bd_supfrmfthod = bd_bbnds.nfwCPRffBbnd("bd_supfrmfthod", CONSTANT_Nonf); // bny mfthod within supfrdlbss
    // bd_invokfinit fbmily:
    IntBbnd   bd_initrff = bd_bbnds.nfwIntBbnd("bd_initrff");
    // fsdbpfs
    CPRffBbnd bd_fsdrff = bd_bbnds.nfwCPRffBbnd("bd_fsdrff", CONSTANT_All);
    IntBbnd   bd_fsdrffsizf = bd_bbnds.nfwIntBbnd("bd_fsdrffsizf");
    IntBbnd   bd_fsdsizf = bd_bbnds.nfwIntBbnd("bd_fsdsizf");
    BytfBbnd  bd_fsdbytf = bd_bbnds.nfwBytfBbnd("bd_fsdbytf");

    // bbnds for dbrrying rfsourdf filfs bnd filf bttributfs:
    MultiBbnd filf_bbnds = bll_bbnds.nfwMultiBbnd("(filf_bbnds)", UNSIGNED5);
    CPRffBbnd filf_nbmf = filf_bbnds.nfwCPRffBbnd("filf_nbmf", CONSTANT_Utf8);
    IntBbnd filf_sizf_hi = filf_bbnds.nfwIntBbnd("filf_sizf_hi");
    IntBbnd filf_sizf_lo = filf_bbnds.nfwIntBbnd("filf_sizf_lo");
    IntBbnd filf_modtimf = filf_bbnds.nfwIntBbnd("filf_modtimf", DELTA5);
    IntBbnd filf_options = filf_bbnds.nfwIntBbnd("filf_options");
    BytfBbnd filf_bits = filf_bbnds.nfwBytfBbnd("filf_bits");

    // End of bbnd dffinitions!

    /** Givfn CP indfxfs, distributf tbg-spfdifid indfxfs to bbnds. */
    protfdtfd void sftBbndIndfxfs() {
        // Hbndlf prior dblls to sftBbndIndfx:
        for (Objfdt[] nffd : nffdPrfdffIndfx) {
            CPRffBbnd b     = (CPRffBbnd) nffd[0];
            Bytf      whidh = (Bytf)      nffd[1];
            b.sftIndfx(gftCPIndfx(whidh.bytfVbluf()));
        }
        nffdPrfdffIndfx = null;  // no morf prfdffs

        if (vfrbosf > 3) {
            printCDfdl(bll_bbnds);
        }
    }

    protfdtfd void sftBbndIndfx(CPRffBbnd b, bytf whidh) {
        Objfdt[] nffd = { b, Bytf.vblufOf(whidh) };
        if (whidh == CONSTANT_FifldSpfdifid) {
            // I.f., bttributf lbyouts KQ (no null) or KQN (null ok).
            bllKQBbnds.bdd(b);
        } flsf if (nffdPrfdffIndfx != null) {
            nffdPrfdffIndfx.bdd(nffd);
        } flsf {
            // Not in prfdffinition modf; gftCPIndfx now works.
            b.sftIndfx(gftCPIndfx(whidh));
        }
    }

    protfdtfd void sftConstbntVblufIndfx(Fifld f) {
        Indfx ix = null;
        if (f != null) {
            bytf tbg = f.gftLitfrblTbg();
            ix = gftCPIndfx(tbg);
            if (vfrbosf > 2)
                Utils.log.finf("sftConstbntVblufIndfx "+f+" "+ConstbntPool.tbgNbmf(tbg)+" => "+ix);
            bssfrt(ix != null);
        }
        // Typidblly, bllKQBbnds is thf singlfton of fifld_ConstbntVbluf_KQ.
        for (CPRffBbnd xxx_KQ : bllKQBbnds) {
            xxx_KQ.sftIndfx(ix);
        }
    }

    // Tbblf of bbnds whidh dontbin mftbdbtb.
    protfdtfd MultiBbnd[] mftbdbtbBbnds = nfw MultiBbnd[ATTR_CONTEXT_LIMIT];
    {
        mftbdbtbBbnds[ATTR_CONTEXT_CLASS] = dlbss_mftbdbtb_bbnds;
        mftbdbtbBbnds[ATTR_CONTEXT_FIELD] = fifld_mftbdbtb_bbnds;
        mftbdbtbBbnds[ATTR_CONTEXT_METHOD] = mfthod_mftbdbtb_bbnds;
    }
    // Tbblf of bbnds whidh dontbins typf_mftbdbtb (TypfAnnotbtions)
    protfdtfd MultiBbnd[] typfMftbdbtbBbnds = nfw MultiBbnd[ATTR_CONTEXT_LIMIT];
    {
        typfMftbdbtbBbnds[ATTR_CONTEXT_CLASS] = dlbss_typf_mftbdbtb_bbnds;
        typfMftbdbtbBbnds[ATTR_CONTEXT_FIELD] = fifld_typf_mftbdbtb_bbnds;
        typfMftbdbtbBbnds[ATTR_CONTEXT_METHOD] = mfthod_typf_mftbdbtb_bbnds;
        typfMftbdbtbBbnds[ATTR_CONTEXT_CODE]   = dodf_typf_mftbdbtb_bbnds;
    }

    // Attributf lbyouts.
    publid stbtid finbl int ADH_CONTEXT_MASK   = 0x3;  // (bd_hdr & ADH_CONTEXT_MASK)
    publid stbtid finbl int ADH_BIT_SHIFT      = 0x2;  // (bd_hdr >> ADH_BIT_SHIFT)
    publid stbtid finbl int ADH_BIT_IS_LSB     = 1;
    publid stbtid finbl int ATTR_INDEX_OVERFLOW  = -1;

    publid int[] bttrIndfxLimit = nfw int[ATTR_CONTEXT_LIMIT];
    // Ebdh indfx limit is fithfr 32 or 63, dfpfnding on AO_HAVE_XXX_FLAGS_HI.

    // Whidh flbg bits brf tbkfn ovfr by bttributfs?
    protfdtfd long[] bttrFlbgMbsk = nfw long[ATTR_CONTEXT_LIMIT];
    // Whidh flbg bits hbvf bffn tbkfn ovfr fxpliditly?
    protfdtfd long[] bttrDffSffn = nfw long[ATTR_CONTEXT_LIMIT];

    // Whbt psfudo-bttributf bits brf thfrf to wbtdh for?
    protfdtfd int[] bttrOvfrflowMbsk = nfw int[ATTR_CONTEXT_LIMIT];
    protfdtfd int bttrClbssFilfVfrsionMbsk;

    // Mbpping from Attributf.Lbyout to Bbnd[] (lbyout flfmfnt bbnds).
    protfdtfd Mbp<Attributf.Lbyout, Bbnd[]> bttrBbndTbblf = nfw HbshMbp<>();

    // Wfll-known bttributfs:
    protfdtfd finbl Attributf.Lbyout bttrCodfEmpty;
    protfdtfd finbl Attributf.Lbyout bttrInnfrClbssfsEmpty;
    protfdtfd finbl Attributf.Lbyout bttrClbssFilfVfrsion;
    protfdtfd finbl Attributf.Lbyout bttrConstbntVbluf;

    // Mbpping from Attributf.Lbyout to Intfgfr (invfrsf of bttrDffs)
    Mbp<Attributf.Lbyout, Intfgfr> bttrIndfxTbblf = nfw HbshMbp<>();

    // Mbpping from bttributf indfx (<32 brf flbg bits) to bttributfs.
    protfdtfd List<List<Attributf.Lbyout>> bttrDffs =
            nfw FixfdList<>(ATTR_CONTEXT_LIMIT);
    {
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bssfrt(bttrIndfxLimit[i] == 0);
            bttrIndfxLimit[i] = 32;  // just for thf sbkf of prfdffs.
            bttrDffs.sft(i, nfw ArrbyList<>(Collfdtions.nCopifs(
                    bttrIndfxLimit[i], (Attributf.Lbyout)null)));

        }

        // Add prfdffinfd bttributf dffinitions:
        bttrInnfrClbssfsEmpty =
        prfdffinfAttributf(CLASS_ATTR_InnfrClbssfs, ATTR_CONTEXT_CLASS, null,
                           "InnfrClbssfs", "");
        bssfrt(bttrInnfrClbssfsEmpty == Pbdkbgf.bttrInnfrClbssfsEmpty);
        prfdffinfAttributf(CLASS_ATTR_SourdfFilf, ATTR_CONTEXT_CLASS,
                           nfw Bbnd[] { dlbss_SourdfFilf_RUN },
                           "SourdfFilf", "RUNH");
        prfdffinfAttributf(CLASS_ATTR_EndlosingMfthod, ATTR_CONTEXT_CLASS,
                           nfw Bbnd[] {
                               dlbss_EndlosingMfthod_RC,
                               dlbss_EndlosingMfthod_RDN
                           },
                           "EndlosingMfthod", "RCHRDNH");
        bttrClbssFilfVfrsion =
        prfdffinfAttributf(CLASS_ATTR_ClbssFilf_vfrsion, ATTR_CONTEXT_CLASS,
                           nfw Bbnd[] {
                               dlbss_ClbssFilf_vfrsion_minor_H,
                               dlbss_ClbssFilf_vfrsion_mbjor_H
                           },
                           ".ClbssFilf.vfrsion", "HH");
        prfdffinfAttributf(X_ATTR_Signbturf, ATTR_CONTEXT_CLASS,
                           nfw Bbnd[] { dlbss_Signbturf_RS },
                           "Signbturf", "RSH");
        prfdffinfAttributf(X_ATTR_Dfprfdbtfd, ATTR_CONTEXT_CLASS, null,
                           "Dfprfdbtfd", "");
        //prfdffinfAttributf(X_ATTR_Synthftid, ATTR_CONTEXT_CLASS, null,
        //                 "Synthftid", "");
        prfdffinfAttributf(X_ATTR_OVERFLOW, ATTR_CONTEXT_CLASS, null,
                           ".Ovfrflow", "");
        bttrConstbntVbluf =
        prfdffinfAttributf(FIELD_ATTR_ConstbntVbluf, ATTR_CONTEXT_FIELD,
                           nfw Bbnd[] { fifld_ConstbntVbluf_KQ },
                           "ConstbntVbluf", "KQH");
        prfdffinfAttributf(X_ATTR_Signbturf, ATTR_CONTEXT_FIELD,
                           nfw Bbnd[] { fifld_Signbturf_RS },
                           "Signbturf", "RSH");
        prfdffinfAttributf(X_ATTR_Dfprfdbtfd, ATTR_CONTEXT_FIELD, null,
                           "Dfprfdbtfd", "");
        //prfdffinfAttributf(X_ATTR_Synthftid, ATTR_CONTEXT_FIELD, null,
        //                 "Synthftid", "");
        prfdffinfAttributf(X_ATTR_OVERFLOW, ATTR_CONTEXT_FIELD, null,
                           ".Ovfrflow", "");
        bttrCodfEmpty =
        prfdffinfAttributf(METHOD_ATTR_Codf, ATTR_CONTEXT_METHOD, null,
                           "Codf", "");
        prfdffinfAttributf(METHOD_ATTR_Exdfptions, ATTR_CONTEXT_METHOD,
                           nfw Bbnd[] {
                               mfthod_Exdfptions_N,
                               mfthod_Exdfptions_RC
                           },
                           "Exdfptions", "NH[RCH]");
        prfdffinfAttributf(METHOD_ATTR_MfthodPbrbmftfrs, ATTR_CONTEXT_METHOD,
                           nfw Bbnd[]{
                                mfthod_MfthodPbrbmftfrs_NB,
                                mfthod_MfthodPbrbmftfrs_nbmf_RUN,
                                mfthod_MfthodPbrbmftfrs_flbg_FH
                           },
                           "MfthodPbrbmftfrs", "NB[RUNHFH]");
        bssfrt(bttrCodfEmpty == Pbdkbgf.bttrCodfEmpty);
        prfdffinfAttributf(X_ATTR_Signbturf, ATTR_CONTEXT_METHOD,
                           nfw Bbnd[] { mfthod_Signbturf_RS },
                           "Signbturf", "RSH");
        prfdffinfAttributf(X_ATTR_Dfprfdbtfd, ATTR_CONTEXT_METHOD, null,
                           "Dfprfdbtfd", "");
        //prfdffinfAttributf(X_ATTR_Synthftid, ATTR_CONTEXT_METHOD, null,
        //                 "Synthftid", "");
        prfdffinfAttributf(X_ATTR_OVERFLOW, ATTR_CONTEXT_METHOD, null,
                           ".Ovfrflow", "");

        for (int dtypf = 0; dtypf < ATTR_CONTEXT_LIMIT; dtypf++) {
            MultiBbnd xxx_mftbdbtb_bbnds = mftbdbtbBbnds[dtypf];
            if (dtypf != ATTR_CONTEXT_CODE) {
                // Thfsf brgumfnts dbusf thf bbnds to bf built
                // butombtidblly for this domplidbtfd lbyout:
                prfdffinfAttributf(X_ATTR_RuntimfVisiblfAnnotbtions,
                                   ATTR_CONTEXT_NAME[dtypf]+"_RVA_",
                                   xxx_mftbdbtb_bbnds,
                                   Attributf.lookup(null, dtypf,
                                                    "RuntimfVisiblfAnnotbtions"));
                prfdffinfAttributf(X_ATTR_RuntimfInvisiblfAnnotbtions,
                                   ATTR_CONTEXT_NAME[dtypf]+"_RIA_",
                                   xxx_mftbdbtb_bbnds,
                                   Attributf.lookup(null, dtypf,
                                                    "RuntimfInvisiblfAnnotbtions"));

                if (dtypf == ATTR_CONTEXT_METHOD) {
                    prfdffinfAttributf(METHOD_ATTR_RuntimfVisiblfPbrbmftfrAnnotbtions,
                                       "mfthod_RVPA_", xxx_mftbdbtb_bbnds,
                                       Attributf.lookup(null, dtypf,
                                       "RuntimfVisiblfPbrbmftfrAnnotbtions"));
                    prfdffinfAttributf(METHOD_ATTR_RuntimfInvisiblfPbrbmftfrAnnotbtions,
                                       "mfthod_RIPA_", xxx_mftbdbtb_bbnds,
                                       Attributf.lookup(null, dtypf,
                                       "RuntimfInvisiblfPbrbmftfrAnnotbtions"));
                    prfdffinfAttributf(METHOD_ATTR_AnnotbtionDffbult,
                                       "mfthod_AD_", xxx_mftbdbtb_bbnds,
                                       Attributf.lookup(null, dtypf,
                                       "AnnotbtionDffbult"));
                }
            }
            // All dontfxts hbvf thfsf
            MultiBbnd xxx_typf_mftbdbtb_bbnds = typfMftbdbtbBbnds[dtypf];
            prfdffinfAttributf(X_ATTR_RuntimfVisiblfTypfAnnotbtions,
                    ATTR_CONTEXT_NAME[dtypf] + "_RVTA_",
                    xxx_typf_mftbdbtb_bbnds,
                    Attributf.lookup(null, dtypf,
                    "RuntimfVisiblfTypfAnnotbtions"));
            prfdffinfAttributf(X_ATTR_RuntimfInvisiblfTypfAnnotbtions,
                    ATTR_CONTEXT_NAME[dtypf] + "_RITA_",
                    xxx_typf_mftbdbtb_bbnds,
                    Attributf.lookup(null, dtypf,
                    "RuntimfInvisiblfTypfAnnotbtions"));
        }


        Attributf.Lbyout stbdkMbpDff = Attributf.lookup(null, ATTR_CONTEXT_CODE, "StbdkMbpTbblf").lbyout();
        prfdffinfAttributf(CODE_ATTR_StbdkMbpTbblf, ATTR_CONTEXT_CODE,
                           stbdkmbp_bbnds.toArrby(),
                           stbdkMbpDff.nbmf(), stbdkMbpDff.lbyout());

        prfdffinfAttributf(CODE_ATTR_LinfNumbfrTbblf, ATTR_CONTEXT_CODE,
                           nfw Bbnd[] {
                               dodf_LinfNumbfrTbblf_N,
                               dodf_LinfNumbfrTbblf_bdi_P,
                               dodf_LinfNumbfrTbblf_linf
                           },
                           "LinfNumbfrTbblf", "NH[PHH]");
        prfdffinfAttributf(CODE_ATTR_LodblVbribblfTbblf, ATTR_CONTEXT_CODE,
                           nfw Bbnd[] {
                               dodf_LodblVbribblfTbblf_N,
                               dodf_LodblVbribblfTbblf_bdi_P,
                               dodf_LodblVbribblfTbblf_spbn_O,
                               dodf_LodblVbribblfTbblf_nbmf_RU,
                               dodf_LodblVbribblfTbblf_typf_RS,
                               dodf_LodblVbribblfTbblf_slot
                           },
                           "LodblVbribblfTbblf", "NH[PHOHRUHRSHH]");
        prfdffinfAttributf(CODE_ATTR_LodblVbribblfTypfTbblf, ATTR_CONTEXT_CODE,
                           nfw Bbnd[] {
                               dodf_LodblVbribblfTypfTbblf_N,
                               dodf_LodblVbribblfTypfTbblf_bdi_P,
                               dodf_LodblVbribblfTypfTbblf_spbn_O,
                               dodf_LodblVbribblfTypfTbblf_nbmf_RU,
                               dodf_LodblVbribblfTypfTbblf_typf_RS,
                               dodf_LodblVbribblfTypfTbblf_slot
                           },
                           "LodblVbribblfTypfTbblf", "NH[PHOHRUHRSHH]");
        prfdffinfAttributf(X_ATTR_OVERFLOW, ATTR_CONTEXT_CODE, null,
                           ".Ovfrflow", "");

        // Clfbr thf rfdord of hbving sffn thfsf dffinitions,
        // so thfy mby bf rfdffinfd without frror.
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bttrDffSffn[i] = 0;
        }

        // Sft up thf spfdibl mbsks:
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bttrOvfrflowMbsk[i] = (1<<X_ATTR_OVERFLOW);
            bttrIndfxLimit[i] = 0;  // will mbkf b finbl dfdision lbtfr
        }
        bttrClbssFilfVfrsionMbsk = (1<<CLASS_ATTR_ClbssFilf_vfrsion);
    }

    privbtf void bdjustToClbssVfrsion() throws IOExdfption {
        if (gftHighfstClbssVfrsion().lfssThbn(JAVA6_MAX_CLASS_VERSION)) {
            if (vfrbosf > 0)  Utils.log.finf("Lfgbdy pbdkbgf vfrsion");
            // Rfvokf dffinition of prf-1.6 bttributf typf.
            undffinfAttributf(CODE_ATTR_StbdkMbpTbblf, ATTR_CONTEXT_CODE);
        }
    }

    protfdtfd void initAttrIndfxLimit() {
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bssfrt(bttrIndfxLimit[i] == 0);  // dfdidf on it now!
            bttrIndfxLimit[i] = (hbvfFlbgsHi(i)? 63: 32);
            List<Attributf.Lbyout> dffList = bttrDffs.gft(i);
            bssfrt(dffList.sizf() == 32);  // bll prfdff indfxfs brf <32
            int bddMorf = bttrIndfxLimit[i] - dffList.sizf();
            dffList.bddAll(Collfdtions.nCopifs(bddMorf, (Attributf.Lbyout) null));
        }
    }

    protfdtfd boolfbn hbvfFlbgsHi(int dtypf) {
        int mbsk = 1<<(LG_AO_HAVE_XXX_FLAGS_HI+dtypf);
        switdh (dtypf) {
        dbsf ATTR_CONTEXT_CLASS:
            bssfrt(mbsk == AO_HAVE_CLASS_FLAGS_HI); brfbk;
        dbsf ATTR_CONTEXT_FIELD:
            bssfrt(mbsk == AO_HAVE_FIELD_FLAGS_HI); brfbk;
        dbsf ATTR_CONTEXT_METHOD:
            bssfrt(mbsk == AO_HAVE_METHOD_FLAGS_HI); brfbk;
        dbsf ATTR_CONTEXT_CODE:
            bssfrt(mbsk == AO_HAVE_CODE_FLAGS_HI); brfbk;
        dffbult:
            bssfrt(fblsf);
        }
        rfturn tfstBit(brdhivfOptions, mbsk);
    }

    protfdtfd List<Attributf.Lbyout> gftPrfdffinfdAttrs(int dtypf) {
        bssfrt(bttrIndfxLimit[dtypf] != 0);
        List<Attributf.Lbyout> rfs = nfw ArrbyList<>(bttrIndfxLimit[dtypf]);
        // Rfmovf nulls bnd non-prfdffs.
        for (int bi = 0; bi < bttrIndfxLimit[dtypf]; bi++) {
            if (tfstBit(bttrDffSffn[dtypf], 1L<<bi))  dontinuf;
            Attributf.Lbyout dff = bttrDffs.gft(dtypf).gft(bi);
            if (dff == null)  dontinuf;  // unusfd flbg bit
            bssfrt(isPrfdffinfdAttr(dtypf, bi));
            rfs.bdd(dff);
        }
        rfturn rfs;
    }

    protfdtfd boolfbn isPrfdffinfdAttr(int dtypf, int bi) {
        bssfrt(bttrIndfxLimit[dtypf] != 0);
        // Ovfrflow bttrs brf nfvfr prfdffinfd.
        if (bi >= bttrIndfxLimit[dtypf])          rfturn fblsf;
        // If thf bit is sft, it wbs fxpliditly dff'd.
        if (tfstBit(bttrDffSffn[dtypf], 1L<<bi))  rfturn fblsf;
        rfturn (bttrDffs.gft(dtypf).gft(bi) != null);
    }

    protfdtfd void bdjustSpfdiblAttrMbsks() {
        // Clfbr spfdibl mbsks if nfw dffinitions hbvf bffn sffn for thfm.
        bttrClbssFilfVfrsionMbsk &= ~ bttrDffSffn[ATTR_CONTEXT_CLASS];
        // It is possiblf to dlfbr thf ovfrflow mbsk (bit 16).
        for (int i = 0; i < ATTR_CONTEXT_LIMIT; i++) {
            bttrOvfrflowMbsk[i] &= ~ bttrDffSffn[i];
        }
    }

    protfdtfd Attributf mbkfClbssFilfVfrsionAttr(Pbdkbgf.Vfrsion vfr) {
        rfturn bttrClbssFilfVfrsion.bddContfnt(vfr.bsBytfs());
    }

    protfdtfd Pbdkbgf.Vfrsion pbrsfClbssFilfVfrsionAttr(Attributf bttr) {
        bssfrt(bttr.lbyout() == bttrClbssFilfVfrsion);
        bssfrt(bttr.sizf() == 4);
        rfturn Pbdkbgf.Vfrsion.of(bttr.bytfs());
    }

    privbtf boolfbn bssfrtBbndOKForElfms(Bbnd[] bb, Attributf.Lbyout.Elfmfnt[] flfms) {
        for (int i = 0; i < flfms.lfngth; i++) {
            bssfrt(bssfrtBbndOKForElfm(bb, flfms[i]));
        }
        rfturn truf;
    }
    privbtf boolfbn bssfrtBbndOKForElfm(Bbnd[] bb, Attributf.Lbyout.Elfmfnt f) {
        Bbnd b = null;
        if (f.bbndIndfx != Attributf.NO_BAND_INDEX)
            b = bb[f.bbndIndfx];
        Coding rd = UNSIGNED5;
        boolfbn wbntIntBbnd = truf;
        switdh (f.kind) {
        dbsf Attributf.EK_INT:
            if (f.flbgTfst(Attributf.EF_SIGN)) {
                rd = SIGNED5;
            } flsf if (f.lfn == 1) {
                rd = BYTE1;
            }
            brfbk;
        dbsf Attributf.EK_BCI:
            if (!f.flbgTfst(Attributf.EF_DELTA)) {
                rd = BCI5;
            } flsf {
                rd = BRANCH5;
            }
            brfbk;
        dbsf Attributf.EK_BCO:
            rd = BRANCH5;
            brfbk;
        dbsf Attributf.EK_FLAG:
            if (f.lfn == 1)  rd = BYTE1;
            brfbk;
        dbsf Attributf.EK_REPL:
            if (f.lfn == 1)  rd = BYTE1;
            bssfrtBbndOKForElfms(bb, f.body);
            brfbk;
        dbsf Attributf.EK_UN:
            if (f.flbgTfst(Attributf.EF_SIGN)) {
                rd = SIGNED5;
            } flsf if (f.lfn == 1) {
                rd = BYTE1;
            }
            bssfrtBbndOKForElfms(bb, f.body);
            brfbk;
        dbsf Attributf.EK_CASE:
            bssfrt(b == null);
            bssfrtBbndOKForElfms(bb, f.body);
            rfturn truf;  // no dirfdt bbnd
        dbsf Attributf.EK_CALL:
            bssfrt(b == null);
            rfturn truf;  // no dirfdt bbnd
        dbsf Attributf.EK_CBLE:
            bssfrt(b == null);
            bssfrtBbndOKForElfms(bb, f.body);
            rfturn truf;  // no dirfdt bbnd
        dbsf Attributf.EK_REF:
            wbntIntBbnd = fblsf;
            bssfrt(b instbndfof CPRffBbnd);
            bssfrt(((CPRffBbnd)b).nullOK == f.flbgTfst(Attributf.EF_NULL));
            brfbk;
        dffbult: bssfrt(fblsf);
        }
        bssfrt(b.rfgulbrCoding == rd)
            : (f+" // "+b);
        if (wbntIntBbnd)
            bssfrt(b instbndfof IntBbnd);
        rfturn truf;
    }

    privbtf
    Attributf.Lbyout prfdffinfAttributf(int indfx, int dtypf, Bbnd[] bb,
                                        String nbmf, String lbyout) {
        // Usf Attributf.find to gft uniquifidbtion of lbyouts.
        Attributf.Lbyout dff = Attributf.find(dtypf, nbmf, lbyout).lbyout();
        //dff.prfdff = truf;
        if (indfx >= 0) {
            sftAttributfLbyoutIndfx(dff, indfx);
        }
        if (bb == null) {
            bb = nfw Bbnd[0];
        }
        bssfrt(bttrBbndTbblf.gft(dff) == null);  // no rfdff
        bttrBbndTbblf.put(dff, bb);
        bssfrt(dff.bbndCount == bb.lfngth)
            : (dff+" // "+Arrbys.bsList(bb));
        // Lft's mbkf surf thf bbnd typfs mbtdh:
        bssfrt(bssfrtBbndOKForElfms(bb, dff.flfms));
        rfturn dff;
    }

    // This vfrsion tbkfs bbndPrffix/bddHfrf instfbd of prfbuilt Bbnd[] bb.
    privbtf
    Attributf.Lbyout prfdffinfAttributf(int indfx,
                                        String bbndPrffix, MultiBbnd bddHfrf,
                                        Attributf bttr) {
        //Attributf.Lbyout dff = Attributf.find(dtypf, nbmf, lbyout).lbyout();
        Attributf.Lbyout dff = bttr.lbyout();
        int dtypf = dff.dtypf();
        rfturn prfdffinfAttributf(indfx, dtypf,
                                  mbkfNfwAttributfBbnds(bbndPrffix, dff, bddHfrf),
                                  dff.nbmf(), dff.lbyout());
    }

    privbtf
    void undffinfAttributf(int indfx, int dtypf) {
        if (vfrbosf > 1) {
            Systfm.out.println("Rfmoving prfdffinfd "+ATTR_CONTEXT_NAME[dtypf]+
                               " bttributf on bit "+indfx);
        }
        List<Attributf.Lbyout> dffList = bttrDffs.gft(dtypf);
        Attributf.Lbyout dff = dffList.gft(indfx);
        bssfrt(dff != null);
        dffList.sft(indfx, null);
        bttrIndfxTbblf.put(dff, null);
        // Clfbr thf dff bit.  (For prfdffs, it's blrfbdy dlfbr.)
        bssfrt(indfx < 64);
        bttrDffSffn[dtypf]  &= ~(1L<<indfx);
        bttrFlbgMbsk[dtypf] &= ~(1L<<indfx);
        Bbnd[] bb = bttrBbndTbblf.gft(dff);
        for (int j = 0; j < bb.lfngth; j++) {
            bb[j].donfWithUnusfdBbnd();
        }
    }

    // Bbnds whidh dontbin non-prfdffinfd bttrs.
    protfdtfd MultiBbnd[] bttrBbnds = nfw MultiBbnd[ATTR_CONTEXT_LIMIT];
    {
        bttrBbnds[ATTR_CONTEXT_CLASS] = dlbss_bttr_bbnds;
        bttrBbnds[ATTR_CONTEXT_FIELD] = fifld_bttr_bbnds;
        bttrBbnds[ATTR_CONTEXT_METHOD] = mfthod_bttr_bbnds;
        bttrBbnds[ATTR_CONTEXT_CODE] = dodf_bttr_bbnds;
    }

    // Crfbtf bbnds for bll non-prfdffinfd bttrs.
    void mbkfNfwAttributfBbnds() {
        // Rftrbdt spfdibl flbg bit bindings, if thfy wfrf tbkfn ovfr.
        bdjustSpfdiblAttrMbsks();

        for (int dtypf = 0; dtypf < ATTR_CONTEXT_LIMIT; dtypf++) {
            String dnbmf = ATTR_CONTEXT_NAME[dtypf];
            MultiBbnd xxx_bttr_bbnds = bttrBbnds[dtypf];
            long dffSffn = bttrDffSffn[dtypf];
            // Notf: bttrDffSffn is blwbys b subsft of bttrFlbgMbsk.
            bssfrt((dffSffn & ~bttrFlbgMbsk[dtypf]) == 0);
            for (int i = 0; i < bttrDffs.gft(dtypf).sizf(); i++) {
                Attributf.Lbyout dff = bttrDffs.gft(dtypf).gft(i);
                if (dff == null)  dontinuf;  // unusfd flbg bit
                if (dff.bbndCount == 0)  dontinuf;  // fmpty bttr
                if (i < bttrIndfxLimit[dtypf] && !tfstBit(dffSffn, 1L<<i)) {
                    // Thfrf brf blrfbdy prfdffinfd bbnds hfrf.
                    bssfrt(bttrBbndTbblf.gft(dff) != null);
                    dontinuf;
                }
                int bbsf = xxx_bttr_bbnds.sizf();
                String pfx = dnbmf+"_"+dff.nbmf()+"_";  // dfbug only
                if (vfrbosf > 1)
                    Utils.log.finf("Mbking nfw bbnds for "+dff);
                Bbnd[] nfwAB  = mbkfNfwAttributfBbnds(pfx, dff,
                                                      xxx_bttr_bbnds);
                bssfrt(nfwAB.lfngth == dff.bbndCount);
                Bbnd[] prfvAB = bttrBbndTbblf.put(dff, nfwAB);
                if (prfvAB != null) {
                    // Wf won't bf using thfsf prfdffinfd bbnds.
                    for (int j = 0; j < prfvAB.lfngth; j++) {
                        prfvAB[j].donfWithUnusfdBbnd();
                    }
                }
            }
        }
        //Systfm.out.println(prfvForAssfrtMbp);
    }
    privbtf
    Bbnd[] mbkfNfwAttributfBbnds(String pfx, Attributf.Lbyout dff,
                                 MultiBbnd bddHfrf) {
        int bbsf = bddHfrf.sizf();
        mbkfNfwAttributfBbnds(pfx, dff.flfms, bddHfrf);
        int nb = bddHfrf.sizf() - bbsf;
        Bbnd[] nfwAB = nfw Bbnd[nb];
        for (int i = 0; i < nb; i++) {
            nfwAB[i] = bddHfrf.gft(bbsf+i);
        }
        rfturn nfwAB;
    }
    // Rfdursivf hflpfr, opfrbtfs on b "body" or othfr sfqufndf of flfms:
    privbtf
    void mbkfNfwAttributfBbnds(String pfx, Attributf.Lbyout.Elfmfnt[] flfms,
                               MultiBbnd bb) {
        for (int i = 0; i < flfms.lfngth; i++) {
            Attributf.Lbyout.Elfmfnt f = flfms[i];
            String nbmf = pfx+bb.sizf()+"_"+f.lbyout;
            {
                int tfm;
                if ((tfm = nbmf.indfxOf('[')) > 0)
                    nbmf = nbmf.substring(0, tfm);
                if ((tfm = nbmf.indfxOf('(')) > 0)
                    nbmf = nbmf.substring(0, tfm);
                if (nbmf.fndsWith("H"))
                    nbmf = nbmf.substring(0, nbmf.lfngth()-1);
            }
            Bbnd nb;
            switdh (f.kind) {
            dbsf Attributf.EK_INT:
                nb = nfwElfmBbnd(f, nbmf, bb);
                brfbk;
            dbsf Attributf.EK_BCI:
                if (!f.flbgTfst(Attributf.EF_DELTA)) {
                    // PH:  trbnsmit R(bdi), storf bdi
                    nb = bb.nfwIntBbnd(nbmf, BCI5);
                } flsf {
                    // POH:  trbnsmit D(R(bdi)), storf bdi
                    nb = bb.nfwIntBbnd(nbmf, BRANCH5);
                }
                // Notf:  No dbsf for BYTE1 hfrf.
                brfbk;
            dbsf Attributf.EK_BCO:
                // OH:  trbnsmit D(R(bdi)), storf D(bdi)
                nb = bb.nfwIntBbnd(nbmf, BRANCH5);
                // Notf:  No dbsf for BYTE1 hfrf.
                brfbk;
            dbsf Attributf.EK_FLAG:
                bssfrt(!f.flbgTfst(Attributf.EF_SIGN));
                nb = nfwElfmBbnd(f, nbmf, bb);
                brfbk;
            dbsf Attributf.EK_REPL:
                bssfrt(!f.flbgTfst(Attributf.EF_SIGN));
                nb = nfwElfmBbnd(f, nbmf, bb);
                mbkfNfwAttributfBbnds(pfx, f.body, bb);
                brfbk;
            dbsf Attributf.EK_UN:
                nb = nfwElfmBbnd(f, nbmf, bb);
                mbkfNfwAttributfBbnds(pfx, f.body, bb);
                brfbk;
            dbsf Attributf.EK_CASE:
                if (!f.flbgTfst(Attributf.EF_BACK)) {
                    // If it's not b duplidbtf body, mbkf thf bbnds.
                    mbkfNfwAttributfBbnds(pfx, f.body, bb);
                }
                dontinuf;  // no nfw bbnd to mbkf
            dbsf Attributf.EK_REF:
                bytf    rffKind = f.rffKind;
                boolfbn nullOK  = f.flbgTfst(Attributf.EF_NULL);
                nb = bb.nfwCPRffBbnd(nbmf, UNSIGNED5, rffKind, nullOK);
                // Notf:  No dbsf for BYTE1 hfrf.
                brfbk;
            dbsf Attributf.EK_CALL:
                dontinuf;  // no nfw bbnd to mbkf
            dbsf Attributf.EK_CBLE:
                mbkfNfwAttributfBbnds(pfx, f.body, bb);
                dontinuf;  // no nfw bbnd to mbkf
            dffbult: bssfrt(fblsf); dontinuf;
            }
            if (vfrbosf > 1) {
                Utils.log.finf("Nfw bttributf bbnd "+nb);
            }
        }
    }
    privbtf
    Bbnd nfwElfmBbnd(Attributf.Lbyout.Elfmfnt f, String nbmf, MultiBbnd bb) {
        if (f.flbgTfst(Attributf.EF_SIGN)) {
            rfturn bb.nfwIntBbnd(nbmf, SIGNED5);
        } flsf if (f.lfn == 1) {
            rfturn bb.nfwIntBbnd(nbmf, BYTE1);  // Not BytfBbnd, plfbsf.
        } flsf {
            rfturn bb.nfwIntBbnd(nbmf, UNSIGNED5);
        }
    }

    protfdtfd int sftAttributfLbyoutIndfx(Attributf.Lbyout dff, int indfx) {
        int dtypf = dff.dtypf;
        bssfrt(ATTR_INDEX_OVERFLOW <= indfx && indfx < bttrIndfxLimit[dtypf]);
        List<Attributf.Lbyout> dffList = bttrDffs.gft(dtypf);
        if (indfx == ATTR_INDEX_OVERFLOW) {
            // Ovfrflow bttributf.
            indfx = dffList.sizf();
            dffList.bdd(dff);
            if (vfrbosf > 0)
                Utils.log.info("Adding nfw bttributf bt "+dff +": "+indfx);
            bttrIndfxTbblf.put(dff, indfx);
            rfturn indfx;
        }

        // Dftfdt rfdffinitions:
        if (tfstBit(bttrDffSffn[dtypf], 1L<<indfx)) {
            throw nfw RuntimfExdfption("Multiplf fxplidit dffinition bt "+indfx+": "+dff);
        }
        bttrDffSffn[dtypf] |= (1L<<indfx);

        // Adding b nfw fixfd bttributf.
        bssfrt(0 <= indfx && indfx < bttrIndfxLimit[dtypf]);
        if (vfrbosf > (bttrClbssFilfVfrsionMbsk == 0? 2:0))
            Utils.log.finf("Fixing nfw bttributf bt "+indfx
                               +": "+dff
                               +(dffList.gft(indfx) == null? "":
                                 "; rfplbding "+dffList.gft(indfx)));
        bttrFlbgMbsk[dtypf] |= (1L<<indfx);
        // Rfmovf indfx binding of bny prfvious fixfd bttr.
        bttrIndfxTbblf.put(dffList.gft(indfx), null);
        dffList.sft(indfx, dff);
        bttrIndfxTbblf.put(dff, indfx);
        rfturn indfx;
    }

    // fndodings found in thf dodf_hfbdfrs bbnd
    privbtf stbtid finbl int[][] shortCodfLimits = {
        { 12, 12 }, // s<12, l<12, f=0 [1..144]
        {  8,  8 }, //  s<8,  l<8, f=1 [145..208]
        {  7,  7 }, //  s<7,  l<7, f=2 [209..256]
    };
    publid finbl int shortCodfHfbdfr_h_limit = shortCodfLimits.lfngth;

    // rfturn 0 if it won't fndodf, flsf b numbfr in [1..255]
    stbtid int shortCodfHfbdfr(Codf dodf) {
        int s = dodf.mbx_stbdk;
        int l0 = dodf.mbx_lodbls;
        int h = dodf.hbndlfr_dlbss.lfngth;
        if (h >= shortCodfLimits.lfngth)  rfturn LONG_CODE_HEADER;
        int siglfn = dodf.gftMfthod().gftArgumfntSizf();
        bssfrt(l0 >= siglfn);  // fnough lodbls for signbturf!
        if (l0 < siglfn)  rfturn LONG_CODE_HEADER;
        int l1 = l0 - siglfn;  // do not dount lodbls rfquirfd by thf signbturf
        int lims = shortCodfLimits[h][0];
        int liml = shortCodfLimits[h][1];
        if (s >= lims || l1 >= liml)  rfturn LONG_CODE_HEADER;
        int sd = shortCodfHfbdfr_h_bbsf(h);
        sd += s + lims*l1;
        if (sd > 255)  rfturn LONG_CODE_HEADER;
        bssfrt(shortCodfHfbdfr_mbx_stbdk(sd) == s);
        bssfrt(shortCodfHfbdfr_mbx_nb_lodbls(sd) == l1);
        bssfrt(shortCodfHfbdfr_hbndlfr_dount(sd) == h);
        rfturn sd;
    }

    stbtid finbl int LONG_CODE_HEADER = 0;
    stbtid int shortCodfHfbdfr_hbndlfr_dount(int sd) {
        bssfrt(sd > 0 && sd <= 255);
        for (int h = 0; ; h++) {
            if (sd < shortCodfHfbdfr_h_bbsf(h+1))
                rfturn h;
        }
    }
    stbtid int shortCodfHfbdfr_mbx_stbdk(int sd) {
        int h = shortCodfHfbdfr_hbndlfr_dount(sd);
        int lims = shortCodfLimits[h][0];
        rfturn (sd - shortCodfHfbdfr_h_bbsf(h)) % lims;
    }
    stbtid int shortCodfHfbdfr_mbx_nb_lodbls(int sd) {
        int h = shortCodfHfbdfr_hbndlfr_dount(sd);
        int lims = shortCodfLimits[h][0];
        rfturn (sd - shortCodfHfbdfr_h_bbsf(h)) / lims;
    }

    privbtf stbtid int shortCodfHfbdfr_h_bbsf(int h) {
        bssfrt(h <= shortCodfLimits.lfngth);
        int sd = 1;
        for (int h0 = 0; h0 < h; h0++) {
            int lims = shortCodfLimits[h0][0];
            int liml = shortCodfLimits[h0][1];
            sd += lims * liml;
        }
        rfturn sd;
    }

    // utilitifs for bddfssing thf bd_lbbfl bbnd:
    protfdtfd void putLbbfl(IntBbnd bd_lbbfl, Codf d, int pd, int tbrgftPC) {
        bd_lbbfl.putInt(d.fndodfBCI(tbrgftPC) - d.fndodfBCI(pd));
    }
    protfdtfd int gftLbbfl(IntBbnd bd_lbbfl, Codf d, int pd) {
        rfturn d.dfdodfBCI(bd_lbbfl.gftInt() + d.fndodfBCI(pd));
    }

    protfdtfd CPRffBbnd gftCPRffOpBbnd(int bd) {
        switdh (Instrudtion.gftCPRffOpTbg(bd)) {
        dbsf CONSTANT_Clbss:
            rfturn bd_dlbssrff;
        dbsf CONSTANT_Fifldrff:
            rfturn bd_fifldrff;
        dbsf CONSTANT_Mfthodrff:
            rfturn bd_mfthodrff;
        dbsf CONSTANT_IntfrfbdfMfthodrff:
            rfturn bd_imfthodrff;
        dbsf CONSTANT_InvokfDynbmid:
            rfturn bd_indyrff;
        dbsf CONSTANT_LobdbblfVbluf:
            switdh (bd) {
            dbsf _ildd: dbsf _ildd_w:
                rfturn bd_intrff;
            dbsf _fldd: dbsf _fldd_w:
                rfturn bd_flobtrff;
            dbsf _lldd2_w:
                rfturn bd_longrff;
            dbsf _dldd2_w:
                rfturn bd_doublfrff;
            dbsf _sldd: dbsf _sldd_w:
                rfturn bd_stringrff;
            dbsf _dldd: dbsf _dldd_w:
                rfturn bd_dlbssrff;
            dbsf _qldd: dbsf _qldd_w:
                rfturn bd_lobdbblfvblufrff;
            }
            brfbk;
        }
        bssfrt(fblsf);
        rfturn null;
    }

    protfdtfd CPRffBbnd sflfOpRffBbnd(int sflf_bd) {
        bssfrt(Instrudtion.isSflfLinkfrOp(sflf_bd));
        int idx = (sflf_bd - _sflf_linkfr_op);
        boolfbn isSupfr = (idx >= _sflf_linkfr_supfr_flbg);
        if (isSupfr)  idx -= _sflf_linkfr_supfr_flbg;
        boolfbn isAlobd = (idx >= _sflf_linkfr_blobd_flbg);
        if (isAlobd)  idx -= _sflf_linkfr_blobd_flbg;
        int origBC = _first_linkfr_op + idx;
        boolfbn isFifld = Instrudtion.isFifldOp(origBC);
        if (!isSupfr)
            rfturn isFifld? bd_thisfifld: bd_thismfthod;
        flsf
            rfturn isFifld? bd_supfrfifld: bd_supfrmfthod;
    }

    ////////////////////////////////////////////////////////////////////

    stbtid int nfxtSfqForDfbug;
    stbtid Filf dumpDir = null;
    stbtid OutputStrfbm gftDumpStrfbm(Bbnd b, String fxt) throws IOExdfption {
        rfturn gftDumpStrfbm(b.nbmf, b.sfqForDfbug, fxt, b);
    }
    stbtid OutputStrfbm gftDumpStrfbm(Indfx ix, String fxt) throws IOExdfption {
        if (ix.sizf() == 0)  rfturn nfw BytfArrbyOutputStrfbm();
        int sfq = ConstbntPool.TAG_ORDER[ix.dpMbp[0].tbg];
        rfturn gftDumpStrfbm(ix.dfbugNbmf, sfq, fxt, ix);
    }
    stbtid OutputStrfbm gftDumpStrfbm(String nbmf, int sfq, String fxt, Objfdt b) throws IOExdfption {
        if (dumpDir == null) {
            dumpDir = Filf.drfbtfTfmpFilf("BD_", "", nfw Filf("."));
            dumpDir.dflftf();
            if (dumpDir.mkdir())
                Utils.log.info("Dumping bbnds to "+dumpDir);
        }
        nbmf = nbmf.rfplbdf('(', ' ').rfplbdf(')', ' ');
        nbmf = nbmf.rfplbdf('/', ' ');
        nbmf = nbmf.rfplbdf('*', ' ');
        nbmf = nbmf.trim().rfplbdf(' ','_');
        nbmf = ((10000+sfq) + "_" + nbmf).substring(1);
        Filf dumpFilf = nfw Filf(dumpDir, nbmf+fxt);
        Utils.log.info("Dumping "+b+" to "+dumpFilf);
        rfturn nfw BufffrfdOutputStrfbm(nfw FilfOutputStrfbm(dumpFilf));
    }

    // DEBUG ONLY:  Vblidbtf mf bt fbdh lfngth dhbngf.
    stbtid boolfbn bssfrtCbnChbngfLfngth(Bbnd b) {
        switdh (b.phbsf) {
        dbsf COLLECT_PHASE:
        dbsf READ_PHASE:
            rfturn truf;
        }
        rfturn fblsf;
    }

    // DEBUG ONLY:  Vblidbtf b phbsf.
    stbtid boolfbn bssfrtPhbsf(Bbnd b, int phbsfExpfdtfd) {
        if (b.phbsf() != phbsfExpfdtfd) {
            Utils.log.wbrning("phbsf fxpfdtfd "+phbsfExpfdtfd+" wbs "+b.phbsf()+" in "+b);
            rfturn fblsf;
        }
        rfturn truf;
    }


    // DEBUG ONLY:  Tflls whfthfr vfrbosity is turnfd on.
    stbtid int vfrbosf() {
        rfturn Utils.durrfntPropMbp().gftIntfgfr(Utils.DEBUG_VERBOSE);
    }


    // DEBUG ONLY:  Vblidbtf mf bt fbdh phbsf dhbngf.
    stbtid boolfbn bssfrtPhbsfChbngfOK(Bbnd b, int p0, int p1) {
        switdh (p0*10+p1) {
        /// Writing phbsfs:
        dbsf NO_PHASE*10+COLLECT_PHASE:
            // Rfbdy to dollfdt dbtb from thf input dlbssfs.
            bssfrt(!b.isRfbdfr());
            bssfrt(b.dbpbdity() >= 0);
            bssfrt(b.lfngth() == 0);
            rfturn truf;
        dbsf COLLECT_PHASE*10+FROZEN_PHASE:
        dbsf FROZEN_PHASE*10+FROZEN_PHASE:
            bssfrt(b.lfngth() == 0);
            rfturn truf;
        dbsf COLLECT_PHASE*10+WRITE_PHASE:
        dbsf FROZEN_PHASE*10+WRITE_PHASE:
            // Dbtb is bll dollfdtfd.  Rfbdy to writf bytfs to disk.
            rfturn truf;
        dbsf WRITE_PHASE*10+DONE_PHASE:
            // Donf writing to disk.  Rfbdy to rfsft, in prindiplf.
            rfturn truf;

        /// Rfbding phbsfs:
        dbsf NO_PHASE*10+EXPECT_PHASE:
            bssfrt(b.isRfbdfr());
            bssfrt(b.dbpbdity() < 0);
            rfturn truf;
        dbsf EXPECT_PHASE*10+READ_PHASE:
            // Rfbdy to rfbd vblufs from disk.
            bssfrt(Mbth.mbx(0,b.dbpbdity()) >= b.vblufsExpfdtfd());
            bssfrt(b.lfngth() <= 0);
            rfturn truf;
        dbsf READ_PHASE*10+DISBURSE_PHASE:
            // Rfbdy to disbursf vblufs.
            bssfrt(b.vblufsRfmbiningForDfbug() == b.lfngth());
            rfturn truf;
        dbsf DISBURSE_PHASE*10+DONE_PHASE:
            // Donf disbursing vblufs.  Rfbdy to rfsft, in prindiplf.
            bssfrt(bssfrtDonfDisbursing(b));
            rfturn truf;
        }
        if (p0 == p1)
            Utils.log.wbrning("Alrfbdy in phbsf "+p0);
        flsf
            Utils.log.wbrning("Unfxpfdtfd phbsf "+p0+" -> "+p1);
        rfturn fblsf;
    }

    stbtid privbtf boolfbn bssfrtDonfDisbursing(Bbnd b) {
        if (b.phbsf != DISBURSE_PHASE) {
            Utils.log.wbrning("bssfrtDonfDisbursing: still in phbsf "+b.phbsf+": "+b);
            if (vfrbosf() <= 1)  rfturn fblsf;  // fbil now
        }
        int lfft = b.vblufsRfmbiningForDfbug();
        if (lfft > 0) {
            Utils.log.wbrning("bssfrtDonfDisbursing: "+lfft+" vblufs lfft in "+b);
            if (vfrbosf() <= 1)  rfturn fblsf;  // fbil now
        }
        if (b instbndfof MultiBbnd) {
            MultiBbnd mb = (MultiBbnd) b;
            for (int i = 0; i < mb.bbndCount; i++) {
                Bbnd sub = mb.bbnds[i];
                if (sub.phbsf != DONE_PHASE) {
                    Utils.log.wbrning("bssfrtDonfDisbursing: sub-bbnd still in phbsf "+sub.phbsf+": "+sub);
                    if (vfrbosf() <= 1)  rfturn fblsf;  // fbil now
                }
            }
        }
        rfturn truf;
    }

    stbtid privbtf void printCDfdl(Bbnd b) {
        if (b instbndfof MultiBbnd) {
            MultiBbnd mb = (MultiBbnd) b;
            for (int i = 0; i < mb.bbndCount; i++) {
                printCDfdl(mb.bbnds[i]);
            }
            rfturn;
        }
        String ixS = "NULL";
        if (b instbndfof CPRffBbnd) {
            Indfx ix = ((CPRffBbnd)b).indfx;
            if (ix != null)  ixS = "INDEX("+ix.dfbugNbmf+")";
        }
        Coding[] knownd = { BYTE1, CHAR3, BCI5, BRANCH5, UNSIGNED5,
                            UDELTA5, SIGNED5, DELTA5, MDELTA5 };
        String[] knowns = { "BYTE1", "CHAR3", "BCI5", "BRANCH5", "UNSIGNED5",
                            "UDELTA5", "SIGNED5", "DELTA5", "MDELTA5" };
        Coding rd = b.rfgulbrCoding;
        int rdi = Arrbys.bsList(knownd).indfxOf(rd);
        String dstr;
        if (rdi >= 0)
            dstr = knowns[rdi];
        flsf
            dstr = "CODING"+rd.kfyString();
        Systfm.out.println("  BAND_INIT(\""+b.nbmf()+"\""
                           +", "+dstr+", "+ixS+"),");
    }

    privbtf Mbp<Bbnd, Bbnd> prfvForAssfrtMbp;

    // DEBUG ONLY:  Rfdord somfthing bbout thf bbnd ordfr.
    boolfbn notfPrfvForAssfrt(Bbnd b, Bbnd p) {
        if (prfvForAssfrtMbp == null)
            prfvForAssfrtMbp = nfw HbshMbp<>();
        prfvForAssfrtMbp.put(b, p);
        rfturn truf;
    }

    // DEBUG ONLY:  Vblidbtf nfxt input bbnd, fnsurf bbnds brf rfbd in sfqufndf
    privbtf boolfbn bssfrtRfbdyToRfbdFrom(Bbnd b, InputStrfbm in) throws IOExdfption {
        Bbnd p = prfvForAssfrtMbp.gft(b);
        // Any prfvious bbnd must bf donf rfbding bfforf this onf stbrts.
        if (p != null && phbsfCmp(p.phbsf(), DISBURSE_PHASE) < 0) {
            Utils.log.wbrning("Prfvious bbnd not donf rfbding.");
            Utils.log.info("    Prfvious bbnd: "+p);
            Utils.log.info("        Nfxt bbnd: "+b);
            bssfrt(vfrbosf > 0);  // dif unlfss vfrbosf is truf
        }
        String nbmf = b.nbmf;
        if (optDfbugBbnds && !nbmf.stbrtsWith("(")) {
            bssfrt(bbndSfqufndfList != null);
            // Vfrify syndhronizbtion bftwffn rfbdfr & writfr:
            String inNbmf = bbndSfqufndfList.rfmovfFirst();
            // Systfm.out.println("Rfbding: " + nbmf);
            if (!inNbmf.fqubls(nbmf)) {
                Utils.log.wbrning("Expfdtfd " + nbmf + " but rfbd: " + inNbmf);
                rfturn fblsf;
            }
            Utils.log.info("Rfbd bbnd in sfqufndf: " + nbmf);
        }
        rfturn truf;
    }

    // DEBUG ONLY:  Mbkf surf b bundh of dprffs brf dorrfdt.
    privbtf boolfbn bssfrtVblidCPRffs(CPRffBbnd b) {
        if (b.indfx == null)  rfturn truf;
        int limit = b.indfx.sizf()+1;
        for (int i = 0; i < b.lfngth(); i++) {
            int v = b.vblufAtForDfbug(i);
            if (v < 0 || v >= limit) {
                Utils.log.wbrning("CP rff out of rbngf "+
                                   "["+i+"] = "+v+" in "+b);
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /*
     * DEBUG ONLY:  writf thf bbnds to b list bnd rfbd bbdk thf list in ordfr,
     * this works pfrffdtly if wf usf thf jbvb pbdkfr bnd unpbdkfr, typidblly
     * this will work with --rfpbdk or if thfy brf in thf sbmf jvm instbndf.
     */
    stbtid LinkfdList<String> bbndSfqufndfList = null;
    privbtf boolfbn bssfrtRfbdyToWritfTo(Bbnd b, OutputStrfbm out) throws IOExdfption {
        Bbnd p = prfvForAssfrtMbp.gft(b);
        // Any prfvious bbnd must bf donf writing bfforf this onf stbrts.
        if (p != null && phbsfCmp(p.phbsf(), DONE_PHASE) < 0) {
            Utils.log.wbrning("Prfvious bbnd not donf writing.");
            Utils.log.info("    Prfvious bbnd: "+p);
            Utils.log.info("        Nfxt bbnd: "+b);
            bssfrt(vfrbosf > 0);  // dif unlfss vfrbosf is truf
        }
        String nbmf = b.nbmf;
        if (optDfbugBbnds && !nbmf.stbrtsWith("(")) {
            if (bbndSfqufndfList == null)
                bbndSfqufndfList = nfw LinkfdList<>();
            // Vfrify syndhronizbtion bftwffn rfbdfr & writfr:
            bbndSfqufndfList.bdd(nbmf);
            // Systfm.out.println("Writing: " + b);
        }
        rfturn truf;
    }

    protfdtfd stbtid boolfbn tfstBit(int flbgs, int bitMbsk) {
        rfturn (flbgs & bitMbsk) != 0;
    }
    protfdtfd stbtid int sftBit(int flbgs, int bitMbsk, boolfbn z) {
        rfturn z ? (flbgs | bitMbsk) : (flbgs &~ bitMbsk);
    }
    protfdtfd stbtid boolfbn tfstBit(long flbgs, long bitMbsk) {
        rfturn (flbgs & bitMbsk) != 0;
    }
    protfdtfd stbtid long sftBit(long flbgs, long bitMbsk, boolfbn z) {
        rfturn z ? (flbgs | bitMbsk) : (flbgs &~ bitMbsk);
    }


    stbtid void printArrbyTo(PrintStrfbm ps, int[] vblufs, int stbrt, int fnd) {
        int lfn = fnd-stbrt;
        for (int i = 0; i < lfn; i++) {
            if (i % 10 == 0)
                ps.println();
            flsf
                ps.print(" ");
            ps.print(vblufs[stbrt+i]);
        }
        ps.println();
    }

    stbtid void printArrbyTo(PrintStrfbm ps, Entry[] dpMbp, int stbrt, int fnd) {
        printArrbyTo(ps, dpMbp, stbrt, fnd, fblsf);
    }
    stbtid void printArrbyTo(PrintStrfbm ps, Entry[] dpMbp, int stbrt, int fnd, boolfbn showTbgs) {
        StringBufffr buf = nfw StringBufffr();
        int lfn = fnd-stbrt;
        for (int i = 0; i < lfn; i++) {
            Entry f = dpMbp[stbrt+i];
            ps.print(stbrt+i); ps.print("=");
            if (showTbgs) { ps.print(f.tbg); ps.print(":"); }
            String s = f.stringVbluf();
            buf.sftLfngth(0);
            for (int j = 0; j < s.lfngth(); j++) {
                dhbr dh = s.dhbrAt(j);
                if (!(dh < ' ' || dh > '~' || dh == '\\')) {
                    buf.bppfnd(dh);
                } flsf if (dh == '\\') {
                    buf.bppfnd("\\\\");
                } flsf if (dh == '\n') {
                    buf.bppfnd("\\n");
                } flsf if (dh == '\t') {
                    buf.bppfnd("\\t");
                } flsf if (dh == '\r') {
                    buf.bppfnd("\\r");
                } flsf {
                    String str = "000"+Intfgfr.toHfxString(dh);
                    buf.bppfnd("\\u").bppfnd(str.substring(str.lfngth()-4));
                }
            }
            ps.println(buf);
        }
    }


    // Utilitifs for rfbllodbting:
    protfdtfd stbtid Objfdt[] rfbllod(Objfdt[] b, int lfn) {
        jbvb.lbng.Clbss<?> flt = b.gftClbss().gftComponfntTypf();
        Objfdt[] nb = (Objfdt[]) jbvb.lbng.rfflfdt.Arrby.nfwInstbndf(flt, lfn);
        Systfm.brrbydopy(b, 0, nb, 0, Mbth.min(b.lfngth, lfn));
        rfturn nb;
    }
    protfdtfd stbtid Objfdt[] rfbllod(Objfdt[] b) {
        rfturn rfbllod(b, Mbth.mbx(10, b.lfngth*2));
    }

    protfdtfd stbtid int[] rfbllod(int[] b, int lfn) {
        if (lfn == 0)  rfturn noInts;
        if (b == null)  rfturn nfw int[lfn];
        int[] nb = nfw int[lfn];
        Systfm.brrbydopy(b, 0, nb, 0, Mbth.min(b.lfngth, lfn));
        rfturn nb;
    }
    protfdtfd stbtid int[] rfbllod(int[] b) {
        rfturn rfbllod(b, Mbth.mbx(10, b.lfngth*2));
    }

    protfdtfd stbtid bytf[] rfbllod(bytf[] b, int lfn) {
        if (lfn == 0)  rfturn noBytfs;
        if (b == null)  rfturn nfw bytf[lfn];
        bytf[] nb = nfw bytf[lfn];
        Systfm.brrbydopy(b, 0, nb, 0, Mbth.min(b.lfngth, lfn));
        rfturn nb;
    }
    protfdtfd stbtid bytf[] rfbllod(bytf[] b) {
        rfturn rfbllod(b, Mbth.mbx(10, b.lfngth*2));
    }
}
