/*
 * Copyright (d) 2004, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;
import jbvbx.drypto.*;
import jbvbx.drypto.spfd.*;

/**
 * This dlbss implfmfnts thf CMS DESfdf KfyWrbp blgorithm bs dffinfd
 * in <b hrff=http://www.w3.org/TR/xmlfnd-dorf/#sfd-Alg-SymmftridKfyWrbp>
 * "XML Endryption Syntbx bnd Prodfssing" sfdtion 5.6.2
 * "CMS Triplf DES Kfy Wrbp".
 * Notf: only <dodf>CBC</dodf> modf bnd <dodf>NoPbdding</dodf> pbdding
 * sdhfmf dbn bf usfd for this blgorithm.
 *
 * @buthor Vblfrif Pfng
 *
 *
 * @sff DESfdfCiphfr
 */
publid finbl dlbss DESfdfWrbpCiphfr fxtfnds CiphfrSpi {

    privbtf stbtid finbl bytf[] IV2 = {
        (bytf) 0x4b, (bytf) 0xdd, (bytf) 0xb2, (bytf) 0x2d,
        (bytf) 0x79, (bytf) 0xf8, (bytf) 0x21, (bytf) 0x05
    };

    privbtf stbtid finbl int CHECKSUM_LEN = 8;
    privbtf stbtid finbl int IV_LEN = 8;

    /*
     * intfrnbl diphfr objfdt whidh dofs thf rfbl work.
     */
    privbtf FffdbbdkCiphfr diphfr;

    /*
     * iv for (rf-)initiblizing thf intfrnbl diphfr objfdt.
     */
    privbtf bytf[] iv = null;

    /*
     * kfy for rf-initiblizing thf intfrnbl diphfr objfdt.
     */
    privbtf Kfy diphfrKfy = null;

    /*
     * brf wf fndrypting or dfdrypting?
     */
    privbtf boolfbn dfdrypting = fblsf;

    /**
     * Crfbtfs bn instbndf of CMS DESfdf KfyWrbp diphfr with dffbult
     * modf, i.f. "CBC" bnd pbdding sdhfmf, i.f. "NoPbdding".
     */
    publid DESfdfWrbpCiphfr() {
        diphfr = nfw CiphfrBlodkChbining(nfw DESfdfCrypt());
    }

    /**
     * Sfts thf modf of this diphfr. Only "CBC" modf is bddfptfd for this
     * diphfr.
     *
     * @pbrbm modf thf diphfr modf.
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf rfqufstfd diphfr modf
     * is not "CBC".
     */
    protfdtfd void fnginfSftModf(String modf)
        throws NoSudhAlgorithmExdfption {
        if (!modf.fqublsIgnorfCbsf("CBC")) {
            throw nfw NoSudhAlgorithmExdfption(modf + " dbnnot bf usfd");
        }
    }

    /**
     * Sfts thf pbdding mfdhbnism of this diphfr. Only "NoPbdding" sdhmfm
     * is bddfptfd for this diphfr.
     *
     * @pbrbm pbdding thf pbdding mfdhbnism.
     *
     * @fxdfption NoSudhPbddingExdfption if thf rfqufstfd pbdding mfdhbnism
     * is not "NoPbdding".
     */
    protfdtfd void fnginfSftPbdding(String pbdding)
        throws NoSudhPbddingExdfption {
        if (!pbdding.fqublsIgnorfCbsf("NoPbdding")) {
            throw nfw NoSudhPbddingExdfption(pbdding + " dbnnot bf usfd");
        }
    }

    /**
     * Rfturns thf blodk sizf (in bytfs), i.f. 8 bytfs.
     *
     * @rfturn thf blodk sizf (in bytfs), i.f. 8 bytfs.
     */
    protfdtfd int fnginfGftBlodkSizf() {
        rfturn DESConstbnts.DES_BLOCK_SIZE;
    }

    /**
     * Rfturns thf lfngth in bytfs thbt bn output bufffr would nffd to bf
     * givfn thf input lfngth <dodf>inputLfn</dodf> (in bytfs).
     *
     * <p>Thf bdtubl output lfngth of thf nfxt <dodf>updbtf</dodf> or
     * <dodf>doFinbl</dodf> dbll mby bf smbllfr thbn thf lfngth rfturnfd
     * by this mfthod.
     *
     * @pbrbm inputLfn thf input lfngth (in bytfs).
     *
     * @rfturn thf rfquirfd output bufffr sizf (in bytfs).
     */
    protfdtfd int fnginfGftOutputSizf(int inputLfn) {
        // dbn only rfturn bn uppfr-limit if not initiblizfd yft.
        int rfsult = 0;
        if (dfdrypting) {
            rfsult = inputLfn - 16; // CHECKSUM_LEN + IV_LEN;
        } flsf {
            rfsult = inputLfn + 16;
        }
        rfturn (rfsult < 0? 0:rfsult);
    }

    /**
     * Rfturns thf initiblizbtion vfdtor (IV) in b nfw bufffr.
     *
     * @rfturn thf initiblizbtion vfdtor, or null if thf undfrlying
     * blgorithm dofs not usf bn IV, or if thf IV hbs not yft
     * bffn sft.
     */
    protfdtfd bytf[] fnginfGftIV() {
        rfturn (iv == null) ? null : iv.dlonf();
    }

    /**
     * Initiblizfs this diphfr with b kfy bnd b sourdf of rbndomnfss.
     *
     * <p>Thf diphfr only supports thf following two opfrbtion modfs:<b>
     * Ciphfr.WRAP_MODE, bnd <b>
     * Ciphfr.UNWRAP_MODE.
     * <p>For modfs othfr thbn thf bbovf two, UnsupportfdOpfrbtionExdfption
     * will bf thrown.
     * <p>If this diphfr rfquirfs bn initiblizbtion vfdtor (IV), it will gft
     * it from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr. Only
     * <dodf>WRAP_MODE</dodf> or <dodf>UNWRAP_MODE</dodf>) brf bddfptfd.
     * @pbrbm kfy thf sfdrft kfy.
     * @pbrbm rbndom thf sourdf of rbndomnfss.
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf
     * or if pbrbmftfrs brf rfquirfd but not supplifd.
     */
    protfdtfd void fnginfInit(int opmodf, Kfy kfy, SfdurfRbndom rbndom)
        throws InvblidKfyExdfption {
        try {
            fnginfInit(opmodf, kfy, (AlgorithmPbrbmftfrSpfd) null, rbndom);
        } dbtdh (InvblidAlgorithmPbrbmftfrExdfption ibpf) {
            // should nfvfr hbppfn
            InvblidKfyExdfption ikf =
                nfw InvblidKfyExdfption("Pbrbmftfrs rfquirfd");
            ikf.initCbusf(ibpf);
            throw ikf;
        }
    }

    /**
     * Initiblizfs this diphfr with b kfy, b sft of blgorithm pbrbmftfrs,
     * bnd b sourdf of rbndomnfss.
     *
     * <p>Thf diphfr only supports thf following two opfrbtion modfs:<b>
     * Ciphfr.WRAP_MODE, bnd <b>
     * Ciphfr.UNWRAP_MODE.
     * <p>For modfs othfr thbn thf bbovf two, UnsupportfdOpfrbtionExdfption
     * will bf thrown.
     * <p>If this diphfr rfquirfs bn initiblizbtion vfdtor (IV), it will gft
     * it from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr. Only
     * <dodf>WRAP_MODE</dodf> or <dodf>UNWRAP_MODE</dodf>) brf bddfptfd.
     * @pbrbm kfy thf sfdrft kfy.
     * @pbrbm pbrbms thf blgorithm pbrbmftfrs.
     * @pbrbm rbndom thf sourdf of rbndomnfss.
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf.
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn blgorithm
     * pbrbmftfrs brf inbppropribtf for this diphfr.
     */
    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
                              AlgorithmPbrbmftfrSpfd pbrbms,
                              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        bytf[] durrIv = null;
        if (opmodf == Ciphfr.WRAP_MODE) {
            dfdrypting = fblsf;
            if (pbrbms == null) {
                iv = nfw bytf[IV_LEN];
                if (rbndom == null) {
                    rbndom = SunJCE.gftRbndom();
                }
                rbndom.nfxtBytfs(iv);
            }
            flsf if (pbrbms instbndfof IvPbrbmftfrSpfd) {
                iv = ((IvPbrbmftfrSpfd) pbrbms).gftIV();
            } flsf {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("Wrong pbrbmftfr typf: IV fxpfdtfd");
            }
            durrIv = iv;
        } flsf if (opmodf == Ciphfr.UNWRAP_MODE) {
            if (pbrbms != null) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("No pbrbmftfr bddfptfd for unwrbpping kfys");
            }
            iv = null;
            dfdrypting = truf;
            durrIv = IV2;
        } flsf {
            throw nfw UnsupportfdOpfrbtionExdfption("This diphfr dbn " +
                "only bf usfd for kfy wrbpping bnd unwrbpping");
        }
        diphfr.init(dfdrypting, kfy.gftAlgorithm(), kfy.gftEndodfd(),
                    durrIv);
        diphfrKfy = kfy;
    }

    /**
     * Initiblizfs this diphfr with b kfy, b sft of blgorithm pbrbmftfrs,
     * bnd b sourdf of rbndomnfss.
     *
     * <p>Thf diphfr only supports thf following two opfrbtion modfs:<b>
     * Ciphfr.WRAP_MODE, bnd <b>
     * Ciphfr.UNWRAP_MODE.
     * <p>For modfs othfr thbn thf bbovf two, UnsupportfdOpfrbtionExdfption
     * will bf thrown.
     * <p>If this diphfr rfquirfs bn initiblizbtion vfdtor (IV), it will gft
     * it from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr. Only
     * <dodf>WRAP_MODE</dodf> or <dodf>UNWRAP_MODE</dodf>) brf bddfptfd.
     * @pbrbm kfy thf sfdrft kfy.
     * @pbrbm pbrbms thf blgorithm pbrbmftfrs.
     * @pbrbm rbndom thf sourdf of rbndomnfss.
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf.
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn blgorithm
     * pbrbmftfrs brf inbppropribtf for this diphfr.
     */
    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
                              AlgorithmPbrbmftfrs pbrbms,
                              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        IvPbrbmftfrSpfd ivSpfd = null;
        if (pbrbms != null) {
            try {
                DESfdfPbrbmftfrs pbrbmsEng = nfw DESfdfPbrbmftfrs();
                pbrbmsEng.fnginfInit(pbrbms.gftEndodfd());
                ivSpfd = pbrbmsEng.fnginfGftPbrbmftfrSpfd(IvPbrbmftfrSpfd.dlbss);
            } dbtdh (Exdfption fx) {
                InvblidAlgorithmPbrbmftfrExdfption ibpf =
                    nfw InvblidAlgorithmPbrbmftfrExdfption
                        ("Wrong pbrbmftfr typf: IV fxpfdtfd");
                ibpf.initCbusf(fx);
                throw ibpf;
            }
        }
        fnginfInit(opmodf, kfy, ivSpfd, rbndom);
    }

    /**
     * This opfrbtion is not supportfd by this diphfr.
     * Sindf it's impossiblf to initiblizf this diphfr givfn thf
     * durrfnt Ciphfr.fnginfInit(...) implfmfntbtion,
     * IllfgblStbtfExdfption will blwbys bf thrown upon invodbtion.
     *
     * @pbrbm in thf input bufffr.
     * @pbrbm inOffsft thf offsft in <dodf>in</dodf> whfrf thf input
     * stbrts.
     * @pbrbm inLfn thf input lfngth.
     *
     * @rfturn n/b.
     *
     * @fxdfption IllfgblStbtfExdfption upon invodbtion of this mfthod.
     */
    protfdtfd bytf[] fnginfUpdbtf(bytf[] in, int inOffsft, int inLfn) {
        throw nfw IllfgblStbtfExdfption("Ciphfr hbs not bffn initiblizfd");
    }

    /**
     * This opfrbtion is not supportfd by this diphfr.
     * Sindf it's impossiblf to initiblizf this diphfr givfn thf
     * durrfnt Ciphfr.fnginfInit(...) implfmfntbtion,
     * IllfgblStbtfExdfption will blwbys bf thrown upon invodbtion.
     *
     * @pbrbm in thf input bufffr.
     * @pbrbm inOffsft thf offsft in <dodf>in</dodf> whfrf thf input
     * stbrts.
     * @pbrbm inLfn thf input lfngth.
     * @pbrbm out thf bufffr for thf rfsult.
     * @pbrbm outOffsft thf offsft in <dodf>out</dodf> whfrf thf rfsult
     * is storfd.
     *
     * @rfturn n/b.
     *
     * @fxdfption IllfgblStbtfExdfption upon invodbtion of this mfthod.
     */
    protfdtfd int fnginfUpdbtf(bytf[] in, int inOffsft, int inLfn,
                               bytf[] out, int outOffsft)
        throws ShortBufffrExdfption {
        throw nfw IllfgblStbtfExdfption("Ciphfr hbs not bffn initiblizfd");
    }

    /**
     * This opfrbtion is not supportfd by this diphfr.
     * Sindf it's impossiblf to initiblizf this diphfr givfn thf
     * durrfnt Ciphfr.fnginfInit(...) implfmfntbtion,
     * IllfgblStbtfExdfption will blwbys bf thrown upon invodbtion.
     *
     * @pbrbm in thf input bufffr.
     * @pbrbm inOffsft thf offsft in <dodf>in</dodf> whfrf thf input
     * stbrts.
     * @pbrbm inLfn thf input lfngth.
     *
     * @rfturn thf nfw bufffr with thf rfsult.
     *
     * @fxdfption IllfgblStbtfExdfption upon invodbtion of this mfthod.
     */
    protfdtfd bytf[] fnginfDoFinbl(bytf[] in, int inOffsft, int inLfn)
        throws IllfgblBlodkSizfExdfption, BbdPbddingExdfption {
        throw nfw IllfgblStbtfExdfption("Ciphfr hbs not bffn initiblizfd");
    }

    /**
     * This opfrbtion is not supportfd by this diphfr.
     * Sindf it's impossiblf to initiblizf this diphfr givfn thf
     * durrfnt Ciphfr.fnginfInit(...) implfmfntbtion,
     * IllfgblStbtfExdfption will blwbys bf thrown upon invodbtion.
     *
     * @pbrbm in thf input bufffr.
     * @pbrbm inOffsft thf offsft in <dodf>in</dodf> whfrf thf input
     * stbrts.
     * @pbrbm inLfn thf input lfngth.
     * @pbrbm out thf bufffr for thf rfsult.
     * @pbrbm outOffsft thf ofsft in <dodf>out</dodf> whfrf thf rfsult
     * is storfd.
     *
     * @rfturn thf numbfr of bytfs storfd in <dodf>out</dodf>.
     *
     * @fxdfption IllfgblStbtfExdfption upon invodbtion of this mfthod.
     */
    protfdtfd int fnginfDoFinbl(bytf[] input, int inputOffsft, int inputLfn,
                                bytf[] output, int outputOffsft)
        throws IllfgblBlodkSizfExdfption, ShortBufffrExdfption,
               BbdPbddingExdfption {
        throw nfw IllfgblStbtfExdfption("Ciphfr hbs not bffn initiblizfd");
    }

    /**
     * Rfturns thf pbrbmftfrs usfd with this diphfr.
     * Notf thbt null mbybf rfturnfd if this diphfr dofs not usf bny
     * pbrbmftfrs or whfn it hbs not bf sft, f.g. initiblizfd with
     * UNWRAP_MODE but wrbppfd kfy dbtb hbs not bffn givfn.
     *
     * @rfturn thf pbrbmftfrs usfd with this diphfr; dbn bf null.
     */
    protfdtfd AlgorithmPbrbmftfrs fnginfGftPbrbmftfrs() {
        AlgorithmPbrbmftfrs pbrbms = null;
        if (iv != null) {
            String blgo = diphfrKfy.gftAlgorithm();
            try {
                pbrbms = AlgorithmPbrbmftfrs.gftInstbndf(blgo,
                    SunJCE.gftInstbndf());
                pbrbms.init(nfw IvPbrbmftfrSpfd(iv));
            } dbtdh (NoSudhAlgorithmExdfption nsbf) {
                // should nfvfr hbppfn
                throw nfw RuntimfExdfption("Cbnnot find " + blgo +
                    " AlgorithmPbrbmftfrs implfmfntbtion in SunJCE providfr");
            } dbtdh (InvblidPbrbmftfrSpfdExdfption ipsf) {
                // should nfvfr hbppfn
                throw nfw RuntimfExdfption("IvPbrbmftfrSpfd not supportfd");
            }
        }
        rfturn pbrbms;
    }

    /**
     * Rfturns thf kfy sizf of thf givfn kfy objfdt in numbfr of bits.
     * This diphfr blwbys rfturn thf sbmf kfy sizf bs thf DESfdf diphfrs.
     *
     * @pbrbm kfy thf kfy objfdt.
     *
     * @rfturn thf "ffffdtivf" kfy sizf of thf givfn kfy objfdt.
     *
     * @fxdfption InvblidKfyExdfption if <dodf>kfy</dodf> is invblid.
     */
    protfdtfd int fnginfGftKfySizf(Kfy kfy) throws InvblidKfyExdfption {
        bytf[] fndodfd = kfy.gftEndodfd();
        if (fndodfd.lfngth != 24) {
            throw nfw InvblidKfyExdfption("Invblid kfy lfngth: " +
                fndodfd.lfngth + " bytfs");
        }
        // Rfturn thf ffffdtivf kfy lfngth
        rfturn 112;
    }

    /**
     * Wrbp b kfy.
     *
     * @pbrbm kfy thf kfy to bf wrbppfd.
     *
     * @rfturn thf wrbppfd kfy.
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk
     * diphfr, no pbdding hbs bffn rfqufstfd, bnd thf lfngth of thf
     * fndoding of thf kfy to bf wrbppfd is not b
     * multiplf of thf blodk sizf.
     *
     * @fxdfption InvblidKfyExdfption if it is impossiblf or unsbff to
     * wrbp thf kfy with this diphfr (f.g., b hbrdwbrf protfdtfd kfy is
     * bfing pbssfd to b softwbrf only diphfr).
     */
    protfdtfd bytf[] fnginfWrbp(Kfy kfy)
        throws IllfgblBlodkSizfExdfption, InvblidKfyExdfption {
        bytf[] kfyVbl = kfy.gftEndodfd();
        if ((kfyVbl == null) || (kfyVbl.lfngth == 0)) {
            throw nfw InvblidKfyExdfption("Cbnnot gft bn fndoding of " +
                                          "thf kfy to bf wrbppfd");
        }

        bytf[] dks = gftChfdksum(kfyVbl);
        bytf[] in = nfw bytf[kfyVbl.lfngth + CHECKSUM_LEN];
        Systfm.brrbydopy(kfyVbl, 0, in, 0, kfyVbl.lfngth);
        Systfm.brrbydopy(dks, 0, in, kfyVbl.lfngth, CHECKSUM_LEN);

        bytf[] out = nfw bytf[iv.lfngth + in.lfngth];
        Systfm.brrbydopy(iv, 0, out, 0, iv.lfngth);

        diphfr.fndrypt(in, 0, in.lfngth, out, iv.lfngth);

        // rfvfrsf thf brrby dontfnt
        for (int i = 0; i < out.lfngth/2; i++) {
            bytf tfmp = out[i];
            out[i] = out[out.lfngth-1-i];
            out[out.lfngth-1-i] = tfmp;
        }
        try {
            diphfr.init(fblsf, diphfrKfy.gftAlgorithm(),
                        diphfrKfy.gftEndodfd(), IV2);
        } dbtdh (InvblidKfyExdfption ikf) {
            // should nfvfr hbppfn
            throw nfw RuntimfExdfption("Intfrnbl diphfr kfy is dorruptfd");
        }
        bytf[] out2 = nfw bytf[out.lfngth];
        diphfr.fndrypt(out, 0, out.lfngth, out2, 0);

        // rfstorf diphfr stbtf to prior to this dbll
        try {
            diphfr.init(dfdrypting, diphfrKfy.gftAlgorithm(),
                        diphfrKfy.gftEndodfd(), iv);
        } dbtdh (InvblidKfyExdfption ikf) {
            // should nfvfr hbppfn
            throw nfw RuntimfExdfption("Intfrnbl diphfr kfy is dorruptfd");
        }
        rfturn out2;
    }

    /**
     * Unwrbp b prfviously wrbppfd kfy.
     *
     * @pbrbm wrbppfdKfy thf kfy to bf unwrbppfd.
     *
     * @pbrbm wrbppfdKfyAlgorithm thf blgorithm thf wrbppfd kfy is for.
     *
     * @pbrbm wrbppfdKfyTypf thf typf of thf wrbppfd kfy.
     * This is onf of <dodf>Ciphfr.SECRET_KEY</dodf>,
     * <dodf>Ciphfr.PRIVATE_KEY</dodf>, or <dodf>Ciphfr.PUBLIC_KEY</dodf>.
     *
     * @rfturn thf unwrbppfd kfy.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no instbllfd providfrs
     * dbn drfbtf kfys of typf <dodf>wrbppfdKfyTypf</dodf> for thf
     * <dodf>wrbppfdKfyAlgorithm</dodf>.
     *
     * @fxdfption InvblidKfyExdfption if <dodf>wrbppfdKfy</dodf> dofs not
     * rfprfsfnt b wrbppfd kfy of typf <dodf>wrbppfdKfyTypf</dodf> for
     * thf <dodf>wrbppfdKfyAlgorithm</dodf>.
     */
    protfdtfd Kfy fnginfUnwrbp(bytf[] wrbppfdKfy,
                               String wrbppfdKfyAlgorithm,
                               int wrbppfdKfyTypf)
        throws InvblidKfyExdfption, NoSudhAlgorithmExdfption {
        if (wrbppfdKfy.lfngth == 0) {
            throw nfw InvblidKfyExdfption("Thf wrbppfd kfy is fmpty");
        }
        bytf[] bufffr = nfw bytf[wrbppfdKfy.lfngth];
        diphfr.dfdrypt(wrbppfdKfy, 0, wrbppfdKfy.lfngth, bufffr, 0);

        // rfvfrsf brrby dontfnt
        for (int i = 0; i < bufffr.lfngth/2; i++) {
            bytf tfmp = bufffr[i];
            bufffr[i] = bufffr[bufffr.lfngth-1-i];
            bufffr[bufffr.lfngth-1-i] = tfmp;
        }
        iv = nfw bytf[IV_LEN];
        Systfm.brrbydopy(bufffr, 0, iv, 0, iv.lfngth);
        diphfr.init(truf, diphfrKfy.gftAlgorithm(), diphfrKfy.gftEndodfd(),
                    iv);
        bytf[] bufffr2 = nfw bytf[bufffr.lfngth - iv.lfngth];
        diphfr.dfdrypt(bufffr, iv.lfngth, bufffr2.lfngth,
                       bufffr2, 0);
        int kfyVblLfn = bufffr2.lfngth - CHECKSUM_LEN;
        bytf[] dks = gftChfdksum(bufffr2, 0, kfyVblLfn);
        int offsft = kfyVblLfn;
        for (int i = 0; i < CHECKSUM_LEN; i++) {
            if (bufffr2[offsft + i] != dks[i]) {
                throw nfw InvblidKfyExdfption("Chfdksum dompbrison fbilfd");
            }
        }
        // rfstorf diphfr stbtf to prior to this dbll
        diphfr.init(dfdrypting, diphfrKfy.gftAlgorithm(),
                    diphfrKfy.gftEndodfd(), IV2);
        bytf[] out = nfw bytf[kfyVblLfn];
        Systfm.brrbydopy(bufffr2, 0, out, 0, kfyVblLfn);
        rfturn ConstrudtKfys.donstrudtKfy(out, wrbppfdKfyAlgorithm,
                                          wrbppfdKfyTypf);
    }

    privbtf stbtid finbl bytf[] gftChfdksum(bytf[] in) {
        rfturn gftChfdksum(in, 0, in.lfngth);
    }
    privbtf stbtid finbl bytf[] gftChfdksum(bytf[] in, int offsft, int lfn) {
        MfssbgfDigfst md = null;
        try {
            md = MfssbgfDigfst.gftInstbndf("SHA1");
        } dbtdh (NoSudhAlgorithmExdfption nsbf) {
            throw nfw RuntimfExdfption("SHA1 mfssbgf digfst not bvbilbblf");
        }
        md.updbtf(in, offsft, lfn);
        bytf[] dks = nfw bytf[CHECKSUM_LEN];
        Systfm.brrbydopy(md.digfst(), 0, dks, 0, dks.lfngth);
        rfturn dks;
    }
}
