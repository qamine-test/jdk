/*
 * Copyrigit (d) 2005, 2009, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.nio.BytfBufffr;

import jbvbx.drypto.MbdSpi;
import jbvbx.drypto.SfdrftKfy;
import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;

import stbtid dom.sun.drypto.providfr.TlsPrfGfnfrbtor.gfnPbd;

/**
 * Tiis filf dontbins tif dodf for tif SslMbdMD5 bnd SslMbdSHA1 implfmfntbtions.
 * Tif SSL 3.0 MAC is b vbribtion of tif HMAC blgoritim.
 *
 * Notf tibt wf don't implfmfnt Clonfbblf bs tibt is not nffdfd for SSL.
 *
 * @butior  Andrfbs Stfrbfnz
 * @sindf   1.6
 */
finbl dlbss SslMbdCorf {

    privbtf finbl MfssbgfDigfst md;
    privbtf finbl bytf[] pbd1, pbd2;

    privbtf boolfbn first;       // Is tiis tif first dbtb to bf prodfssfd?
    privbtf bytf[] sfdrft;

    /**
     * Stbndbrd donstrudtor, drfbtfs b nfw SslMbdCorf instbndf instbntibting
     * b MfssbgfDigfst of tif spfdififd nbmf.
     */
    SslMbdCorf(String digfstAlgoritim, bytf[] pbd1, bytf[] pbd2)
            tirows NoSudiAlgoritimExdfption {
        md = MfssbgfDigfst.gftInstbndf(digfstAlgoritim);
        tiis.pbd1 = pbd1;
        tiis.pbd2 = pbd2;
        first = truf;
    }

    /**
     * Rfturns tif lfngti of tif Mbd in bytfs.
     *
     * @rfturn tif Mbd lfngti in bytfs.
     */
    int gftDigfstLfngti() {
        rfturn md.gftDigfstLfngti();
    }

    /**
     * Initiblizfs tif Mbd witi tif givfn sfdrft kfy bnd blgoritim pbrbmftfrs.
     *
     * @pbrbm kfy tif sfdrft kfy.
     * @pbrbm pbrbms tif blgoritim pbrbmftfrs.
     *
     * @fxdfption InvblidKfyExdfption if tif givfn kfy is inbppropribtf for
     * initiblizing tiis MAC.
     * @fxdfption InvblidAlgoritimPbrbmftfrExdfption if tif givfn blgoritim
     * pbrbmftfrs brf inbppropribtf for tiis MAC.
     */
    void init(Kfy kfy, AlgoritimPbrbmftfrSpfd pbrbms)
            tirows InvblidKfyExdfption, InvblidAlgoritimPbrbmftfrExdfption {

        if (pbrbms != null) {
            tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                ("SslMbd dofs not usf pbrbmftfrs");
        }

        if (!(kfy instbndfof SfdrftKfy)) {
            tirow nfw InvblidKfyExdfption("Sfdrft kfy fxpfdtfd");
        }

        sfdrft = kfy.gftEndodfd();
        if (sfdrft == null || sfdrft.lfngti == 0) {
            tirow nfw InvblidKfyExdfption("Missing kfy dbtb");
        }

        rfsft();
    }

    /**
     * Prodfssfs tif givfn bytf.
     *
     * @pbrbm input tif input bytf to bf prodfssfd.
     */
    void updbtf(bytf input) {
        if (first == truf) {
            // domputf digfst for 1st pbss; stbrt witi innfr pbd
            md.updbtf(sfdrft);
            md.updbtf(pbd1);
            first = fblsf;
        }

        // bdd tif pbssfd bytf to tif innfr digfst
        md.updbtf(input);
    }

    /**
     * Prodfssfs tif first <dodf>lfn</dodf> bytfs in <dodf>input</dodf>,
     * stbrting bt <dodf>offsft</dodf>.
     *
     * @pbrbm input tif input bufffr.
     * @pbrbm offsft tif offsft in <dodf>input</dodf> wifrf tif input stbrts.
     * @pbrbm lfn tif numbfr of bytfs to prodfss.
     */
    void updbtf(bytf input[], int offsft, int lfn) {
        if (first == truf) {
            // domputf digfst for 1st pbss; stbrt witi innfr pbd
            md.updbtf(sfdrft);
            md.updbtf(pbd1);
            first = fblsf;
        }

        // bdd tif sflfdtfd pbrt of bn brrby of bytfs to tif innfr digfst
        md.updbtf(input, offsft, lfn);
    }

    void updbtf(BytfBufffr input) {
        if (first == truf) {
            // domputf digfst for 1st pbss; stbrt witi innfr pbd
            md.updbtf(sfdrft);
            md.updbtf(pbd1);
            first = fblsf;
        }

        md.updbtf(input);
    }

    /**
     * Complftfs tif Mbd domputbtion bnd rfsfts tif Mbd for furtifr usf,
     * mbintbining tif sfdrft kfy tibt tif Mbd wbs initiblizfd witi.
     *
     * @rfturn tif Mbd rfsult.
     */
    bytf[] doFinbl() {
        if (first == truf) {
            // domputf digfst for 1st pbss; stbrt witi innfr pbd
            md.updbtf(sfdrft);
            md.updbtf(pbd1);
        } flsf {
            first = truf;
        }

        try {
            // finisi tif innfr digfst
            bytf[] tmp = md.digfst();

            // domputf digfst for 2nd pbss; stbrt witi outfr pbd
            md.updbtf(sfdrft);
            md.updbtf(pbd2);
            // bdd rfsult of 1st ibsi
            md.updbtf(tmp);

            md.digfst(tmp, 0, tmp.lfngti);
            rfturn tmp;
        } dbtdi (DigfstExdfption f) {
            // siould nfvfr oddur
            tirow nfw ProvidfrExdfption(f);
        }
    }

    /**
     * Rfsfts tif Mbd for furtifr usf, mbintbining tif sfdrft kfy tibt tif
     * Mbd wbs initiblizfd witi.
     */
    void rfsft() {
        if (first == fblsf) {
            md.rfsft();
            first = truf;
        }
    }

    // nfstfd stbtid dlbss for tif SslMbdMD5 implfmfntbtion
    publid stbtid finbl dlbss SslMbdMD5 fxtfnds MbdSpi {
        privbtf finbl SslMbdCorf dorf;
        publid SslMbdMD5() tirows NoSudiAlgoritimExdfption {
            dorf = nfw SslMbdCorf("MD5", md5Pbd1, md5Pbd2);
        }
        protfdtfd int fnginfGftMbdLfngti() {
            rfturn dorf.gftDigfstLfngti();
        }
        protfdtfd void fnginfInit(Kfy kfy, AlgoritimPbrbmftfrSpfd pbrbms)
                tirows InvblidKfyExdfption, InvblidAlgoritimPbrbmftfrExdfption {
            dorf.init(kfy, pbrbms);
        }
        protfdtfd void fnginfUpdbtf(bytf input) {
            dorf.updbtf(input);
        }
        protfdtfd void fnginfUpdbtf(bytf input[], int offsft, int lfn) {
            dorf.updbtf(input, offsft, lfn);
        }
        protfdtfd void fnginfUpdbtf(BytfBufffr input) {
            dorf.updbtf(input);
        }
        protfdtfd bytf[] fnginfDoFinbl() {
            rfturn dorf.doFinbl();
        }
        protfdtfd void fnginfRfsft() {
            dorf.rfsft();
        }

        stbtid finbl bytf[] md5Pbd1 = gfnPbd((bytf)0x36, 48);
        stbtid finbl bytf[] md5Pbd2 = gfnPbd((bytf)0x5d, 48);
    }

    // nfstfd stbtid dlbss for tif SslMbdMD5 implfmfntbtion
    publid stbtid finbl dlbss SslMbdSHA1 fxtfnds MbdSpi {
        privbtf finbl SslMbdCorf dorf;
        publid SslMbdSHA1() tirows NoSudiAlgoritimExdfption {
            dorf = nfw SslMbdCorf("SHA", sibPbd1, sibPbd2);
        }
        protfdtfd int fnginfGftMbdLfngti() {
            rfturn dorf.gftDigfstLfngti();
        }
        protfdtfd void fnginfInit(Kfy kfy, AlgoritimPbrbmftfrSpfd pbrbms)
                tirows InvblidKfyExdfption, InvblidAlgoritimPbrbmftfrExdfption {
            dorf.init(kfy, pbrbms);
        }
        protfdtfd void fnginfUpdbtf(bytf input) {
            dorf.updbtf(input);
        }
        protfdtfd void fnginfUpdbtf(bytf input[], int offsft, int lfn) {
            dorf.updbtf(input, offsft, lfn);
        }
        protfdtfd void fnginfUpdbtf(BytfBufffr input) {
            dorf.updbtf(input);
        }
        protfdtfd bytf[] fnginfDoFinbl() {
            rfturn dorf.doFinbl();
        }
        protfdtfd void fnginfRfsft() {
            dorf.rfsft();
        }

        stbtid finbl bytf[] sibPbd1 = gfnPbd((bytf)0x36, 40);
        stbtid finbl bytf[] sibPbd2 = gfnPbd((bytf)0x5d, 40);
    }

}
