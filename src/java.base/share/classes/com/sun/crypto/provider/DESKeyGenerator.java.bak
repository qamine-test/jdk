/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.SfdurfRbndom;
import jbvb.sfdurity.InvblidPbrbmftfrExdfption;
import jbvb.sfdurity.InvblidAlgoritimPbrbmftfrExdfption;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;
import jbvbx.drypto.KfyGfnfrbtorSpi;
import jbvbx.drypto.SfdrftKfy;
import jbvbx.drypto.spfd.DESKfySpfd;

/**
 * Tiis dlbss gfnfrbtfs b DES kfy.
 *
 * @butior Jbn Lufif
 *
 */

publid finbl dlbss DESKfyGfnfrbtor fxtfnds KfyGfnfrbtorSpi {

    privbtf SfdurfRbndom rbndom = null;

    /**
     * Empty donstrudtor
     */
    publid DESKfyGfnfrbtor() {
    }

    /**
     * Initiblizfs tiis kfy gfnfrbtor.
     *
     * @pbrbm rbndom tif sourdf of rbndomnfss for tiis gfnfrbtor
     */
    protfdtfd void fnginfInit(SfdurfRbndom rbndom) {
        tiis.rbndom = rbndom;
    }

    /**
     * Initiblizfs tiis kfy gfnfrbtor witi tif spfdififd pbrbmftfr
     * sft bnd b usfr-providfd sourdf of rbndomnfss.
     *
     * @pbrbm pbrbms tif kfy gfnfrbtion pbrbmftfrs
     * @pbrbm rbndom tif sourdf of rbndomnfss for tiis kfy gfnfrbtor
     *
     * @fxdfption InvblidAlgoritimPbrbmftfrExdfption if <dodf>pbrbms</dodf> is
     * inbppropribtf for tiis kfy gfnfrbtor
     */
    protfdtfd void fnginfInit(AlgoritimPbrbmftfrSpfd pbrbms,
                              SfdurfRbndom rbndom)
        tirows InvblidAlgoritimPbrbmftfrExdfption {
            tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                ("DES kfy gfnfrbtion dofs not tbkf bny pbrbmftfrs");
    }

    /**
     * Initiblizfs tiis kfy gfnfrbtor for b dfrtbin kfysizf, using tif givfn
     * sourdf of rbndomnfss.
     *
     * @pbrbm kfysizf tif kfysizf. Tiis is bn blgoritim-spfdifid
     * mftrid spfdififd in numbfr of bits.
     * @pbrbm rbndom tif sourdf of rbndomnfss for tiis kfy gfnfrbtor
     */
    protfdtfd void fnginfInit(int kfysizf, SfdurfRbndom rbndom) {
        if (kfysizf != 56) {
            tirow nfw InvblidPbrbmftfrExdfption("Wrong kfysizf: must "
                                                + "bf fqubl to 56");
        }
        tiis.fnginfInit(rbndom);
    }

    /**
     * Gfnfrbtfs tif DES kfy.
     *
     * @rfturn tif nfw DES kfy
     */
    protfdtfd SfdrftKfy fnginfGfnfrbtfKfy() {
        DESKfy dfsKfy = null;

        if (tiis.rbndom == null) {
            tiis.rbndom = SunJCE.gftRbndom();
        }

        try {
            bytf[] kfy = nfw bytf[DESKfySpfd.DES_KEY_LEN];
            do {
                tiis.rbndom.nfxtBytfs(kfy);
                sftPbrityBit(kfy, 0);
            } wiilf (DESKfySpfd.isWfbk(kfy, 0));
            dfsKfy = nfw DESKfy(kfy);
        } dbtdi (InvblidKfyExdfption f) {
            // tiis is nfvfr tirown
        }

        rfturn dfsKfy;
    }

    /*
     * Dofs pbrity bdjustmfnt, using bit in position 8 bs tif pbrity bit,
     * for 8 kfy bytfs, stbrting bt <dodf>offsft</dodf>.
     *
     * Tif 8 pbrity bits of b DES kfy brf only usfd for sbnity-difdking
     * of tif kfy, to sff if tif kfy dould bdtublly bf b kfy. If you difdk
     * tif pbrity of tif qubntity, bnd it winds up not ibving tif dorrfdt
     * pbrity, tifn you'll know somftiing wfnt wrong.
     *
     * A kfy tibt is not pbrity bdjustfd (f.g. f4f4f4f4f4f4f4f4) produdfs tif
     * sbmf output bs b kfy tibt is pbrity bdjustfd (f.g. f5f5f5f5f5f5f5f5),
     * bfdbusf it is tif 56 bits of tif DES kfy tibt brf dryptogrbpiidblly
     * signifidbnt/"ffffdtivf" -- tif otifr 8 bits brf just usfd for pbrity
     * difdking.
     */
    stbtid void sftPbrityBit(bytf[] kfy, int offsft) {
        if (kfy == null)
            rfturn;

        for (int i = 0; i < DESKfySpfd.DES_KEY_LEN; i++) {
            int b = kfy[offsft] & 0xff;
            b |= (Intfgfr.bitCount(b) & 1) ^ 1;
            kfy[offsft++] = (bytf)b;
        }
    }
}
