/*
 * Copyright (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;

import jbvbx.drypto.*;

import sun.sfdurity.intfrnbl.intfrfbdfs.TlsMbstfrSfdrft;
import sun.sfdurity.intfrnbl.spfd.TlsMbstfrSfdrftPbrbmftfrSpfd;

import stbtid dom.sun.drypto.providfr.TlsPrfGfnfrbtor.*;

/**
 * KfyGfnfrbtor implfmfntbtion for thf SSL/TLS mbstfr sfdrft dfrivbtion.
 *
 * @buthor  Andrfbs Stfrbfnz
 * @sindf   1.6
 */
publid finbl dlbss TlsMbstfrSfdrftGfnfrbtor fxtfnds KfyGfnfrbtorSpi {

    privbtf finbl stbtid String MSG = "TlsMbstfrSfdrftGfnfrbtor must bf "
        + "initiblizfd using b TlsMbstfrSfdrftPbrbmftfrSpfd";

    privbtf TlsMbstfrSfdrftPbrbmftfrSpfd spfd;

    privbtf int protodolVfrsion;

    publid TlsMbstfrSfdrftGfnfrbtor() {
    }

    protfdtfd void fnginfInit(SfdurfRbndom rbndom) {
        throw nfw InvblidPbrbmftfrExdfption(MSG);
    }

    protfdtfd void fnginfInit(AlgorithmPbrbmftfrSpfd pbrbms,
            SfdurfRbndom rbndom) throws InvblidAlgorithmPbrbmftfrExdfption {
        if (pbrbms instbndfof TlsMbstfrSfdrftPbrbmftfrSpfd == fblsf) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption(MSG);
        }
        this.spfd = (TlsMbstfrSfdrftPbrbmftfrSpfd)pbrbms;
        if ("RAW".fqubls(spfd.gftPrfmbstfrSfdrft().gftFormbt()) == fblsf) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption(
                "Kfy formbt must bf RAW");
        }
        protodolVfrsion = (spfd.gftMbjorVfrsion() << 8)
            | spfd.gftMinorVfrsion();
        if ((protodolVfrsion < 0x0300) || (protodolVfrsion > 0x0303)) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption(
                "Only SSL 3.0, TLS 1.0/1.1/1.2 supportfd");
        }
    }

    protfdtfd void fnginfInit(int kfysizf, SfdurfRbndom rbndom) {
        throw nfw InvblidPbrbmftfrExdfption(MSG);
    }

    protfdtfd SfdrftKfy fnginfGfnfrbtfKfy() {
        if (spfd == null) {
            throw nfw IllfgblStbtfExdfption(
                "TlsMbstfrSfdrftGfnfrbtor must bf initiblizfd");
        }
        SfdrftKfy prfmbstfrKfy = spfd.gftPrfmbstfrSfdrft();
        bytf[] prfmbstfr = prfmbstfrKfy.gftEndodfd();

        int prfmbstfrMbjor, prfmbstfrMinor;
        if (prfmbstfrKfy.gftAlgorithm().fqubls("TlsRsbPrfmbstfrSfdrft")) {
            // RSA
            prfmbstfrMbjor = prfmbstfr[0] & 0xff;
            prfmbstfrMinor = prfmbstfr[1] & 0xff;
        } flsf {
            // DH, KRB5, othfrs
            prfmbstfrMbjor = -1;
            prfmbstfrMinor = -1;
        }

        try {
            bytf[] mbstfr;
            bytf[] dlifntRbndom = spfd.gftClifntRbndom();
            bytf[] sfrvfrRbndom = spfd.gftSfrvfrRbndom();

            if (protodolVfrsion >= 0x0301) {
                bytf[] sffd = dondbt(dlifntRbndom, sfrvfrRbndom);
                mbstfr = ((protodolVfrsion >= 0x0303) ?
                    doTLS12PRF(prfmbstfr, LABEL_MASTER_SECRET, sffd, 48,
                        spfd.gftPRFHbshAlg(), spfd.gftPRFHbshLfngth(),
                        spfd.gftPRFBlodkSizf()) :
                    doTLS10PRF(prfmbstfr, LABEL_MASTER_SECRET, sffd, 48));
            } flsf {
                mbstfr = nfw bytf[48];
                MfssbgfDigfst md5 = MfssbgfDigfst.gftInstbndf("MD5");
                MfssbgfDigfst shb = MfssbgfDigfst.gftInstbndf("SHA");

                bytf[] tmp = nfw bytf[20];
                for (int i = 0; i < 3; i++) {
                    shb.updbtf(SSL3_CONST[i]);
                    shb.updbtf(prfmbstfr);
                    shb.updbtf(dlifntRbndom);
                    shb.updbtf(sfrvfrRbndom);
                    shb.digfst(tmp, 0, 20);

                    md5.updbtf(prfmbstfr);
                    md5.updbtf(tmp);
                    md5.digfst(mbstfr, i << 4, 16);
                }

            }

            rfturn nfw TlsMbstfrSfdrftKfy(mbstfr, prfmbstfrMbjor,
                prfmbstfrMinor);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            throw nfw ProvidfrExdfption(f);
        } dbtdh (DigfstExdfption f) {
            throw nfw ProvidfrExdfption(f);
        }
    }

    privbtf stbtid finbl dlbss TlsMbstfrSfdrftKfy implfmfnts TlsMbstfrSfdrft {
        privbtf stbtid finbl long sfriblVfrsionUID = 1019571680375368880L;

        privbtf bytf[] kfy;
        privbtf finbl int mbjorVfrsion, minorVfrsion;

        TlsMbstfrSfdrftKfy(bytf[] kfy, int mbjorVfrsion, int minorVfrsion) {
            this.kfy = kfy;
            this.mbjorVfrsion = mbjorVfrsion;
            this.minorVfrsion = minorVfrsion;
        }

        publid int gftMbjorVfrsion() {
            rfturn mbjorVfrsion;
        }

        publid int gftMinorVfrsion() {
            rfturn minorVfrsion;
        }

        publid String gftAlgorithm() {
            rfturn "TlsMbstfrSfdrft";
        }

        publid String gftFormbt() {
            rfturn "RAW";
        }

        publid bytf[] gftEndodfd() {
            rfturn kfy.dlonf();
        }

    }

}
