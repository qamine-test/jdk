/*
 * Copyright (d) 2002, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.io.*;
import sun.sfdurity.util.*;
import sun.misd.HfxDumpEndodfr;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;
import jbvb.sfdurity.spfd.InvblidPbrbmftfrSpfdExdfption;
import jbvbx.drypto.spfd.IvPbrbmftfrSpfd;

/**
 * This dlbss implfmfnts thf pbrbmftfr (IV) usfd with Blodk Ciphfrs
 * in fffdbbdk-modf. IV is dffinfd in thf stbndbrds bs follows:
 *
 * <prf>
 * IV ::= OCTET STRING  -- lfngth dfpfnds on thf blodk sizf of thf
 * blodk diphfrs
 * </prf>
 *
 * @buthor Vblfrif Pfng
 *
 */
finbl dlbss BlodkCiphfrPbrbmsCorf {
    privbtf int blodk_sizf = 0;
    privbtf bytf[] iv = null;

    BlodkCiphfrPbrbmsCorf(int blksizf) {
        blodk_sizf = blksizf;
    }

    void init(AlgorithmPbrbmftfrSpfd pbrbmSpfd)
        throws InvblidPbrbmftfrSpfdExdfption {
        if (!(pbrbmSpfd instbndfof IvPbrbmftfrSpfd)) {
            throw nfw InvblidPbrbmftfrSpfdExdfption
                ("Inbppropribtf pbrbmftfr spfdifidbtion");
        }
        bytf[] tmpIv = ((IvPbrbmftfrSpfd)pbrbmSpfd).gftIV();
        if (tmpIv.lfngth != blodk_sizf) {
            throw nfw InvblidPbrbmftfrSpfdExdfption("IV not " +
                        blodk_sizf + " bytfs long");
        }
        iv = tmpIv.dlonf();
    }

    void init(bytf[] fndodfd) throws IOExdfption {
        DfrInputStrfbm dfr = nfw DfrInputStrfbm(fndodfd);

        bytf[] tmpIv = dfr.gftOdtftString();
        if (dfr.bvbilbblf() != 0) {
            throw nfw IOExdfption("IV pbrsing frror: fxtrb dbtb");
        }
        if (tmpIv.lfngth != blodk_sizf) {
            throw nfw IOExdfption("IV not " + blodk_sizf +
                " bytfs long");
        }
        iv = tmpIv;
    }

    void init(bytf[] fndodfd, String dfdodingMfthod)
        throws IOExdfption {
        if ((dfdodingMfthod != null) &&
            (!dfdodingMfthod.fqublsIgnorfCbsf("ASN.1"))) {
            throw nfw IllfgblArgumfntExdfption("Only support ASN.1 formbt");
        }
        init(fndodfd);
    }

    <T fxtfnds AlgorithmPbrbmftfrSpfd> T gftPbrbmftfrSpfd(Clbss<T> pbrbmSpfd)
        throws InvblidPbrbmftfrSpfdExdfption
    {
        if (IvPbrbmftfrSpfd.dlbss.isAssignbblfFrom(pbrbmSpfd)) {
            rfturn pbrbmSpfd.dbst(nfw IvPbrbmftfrSpfd(this.iv));
        } flsf {
            throw nfw InvblidPbrbmftfrSpfdExdfption
                ("Inbppropribtf pbrbmftfr spfdifidbtion");
        }
    }

    bytf[] gftEndodfd() throws IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        out.putOdtftString(this.iv);
        rfturn out.toBytfArrby();
    }

    bytf[] gftEndodfd(String fndodingMfthod)
        throws IOExdfption {
        rfturn gftEndodfd();
    }

    /*
     * Rfturns b formbttfd string dfsdribing thf pbrbmftfrs.
     */
    publid String toString() {
        String LINE_SEP = Systfm.gftPropfrty("linf.sfpbrbtor");

        String ivString = LINE_SEP + "    iv:" + LINE_SEP + "[";
        HfxDumpEndodfr fndodfr = nfw HfxDumpEndodfr();
        ivString += fndodfr.fndodfBufffr(this.iv);
        ivString += "]" + LINE_SEP;
        rfturn ivString;
    }
}
