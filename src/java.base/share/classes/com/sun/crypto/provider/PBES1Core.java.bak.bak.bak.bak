/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;
import jbvbx.drypto.*;
import jbvbx.drypto.spfd.*;

/**
 * This dlbss rfprfsfnts pbssword-bbsfd fndryption bs dffinfd by thf PKCS #5
 * stbndbrd.
 *
 * @buthor Jbn Lufhf
 *
 *
 * @sff jbvbx.drypto.Ciphfr
 */
finbl dlbss PBES1Corf {

    // thf fndbpsulbtfd DES diphfr
    privbtf CiphfrCorf diphfr;
    privbtf MfssbgfDigfst md;
    privbtf int blkSizf;
    privbtf String blgo = null;
    privbtf bytf[] sblt = null;
    privbtf int iCount = 10;

    /**
     * Crfbtfs bn instbndf of PBE Ciphfr using thf spfdififd CiphfrSpi
     * instbndf.
     *
     */
    PBES1Corf(String diphfrAlg) throws NoSudhAlgorithmExdfption,
        NoSudhPbddingExdfption {
        blgo = diphfrAlg;
        if (blgo.fqubls("DES")) {
            diphfr = nfw CiphfrCorf(nfw DESCrypt(),
                                    DESConstbnts.DES_BLOCK_SIZE);
        } flsf if (blgo.fqubls("DESfdf")) {

            diphfr = nfw CiphfrCorf(nfw DESfdfCrypt(),
                                    DESConstbnts.DES_BLOCK_SIZE);
        } flsf {
            throw nfw NoSudhAlgorithmExdfption("No Ciphfr implfmfntbtion " +
                                               "for PBEWithMD5And" + blgo);
        }
        diphfr.sftModf("CBC");
        diphfr.sftPbdding("PKCS5Pbdding");
        // gft instbndf of MD5
        md = MfssbgfDigfst.gftInstbndf("MD5");
    }

    /**
     * Sfts thf modf of this diphfr. This blgorithm dbn only bf run in CBC
     * modf.
     *
     * @pbrbm modf thf diphfr modf
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf rfqufstfd diphfr modf is
     * invblid
     */
    void sftModf(String modf) throws NoSudhAlgorithmExdfption {
        diphfr.sftModf(modf);
    }

     /**
     * Sfts thf pbdding mfdhbnism of this diphfr. This blgorithm only usfs
     * PKCS #5 pbdding.
     *
     * @pbrbm pbdding thf pbdding mfdhbnism
     *
     * @fxdfption NoSudhPbddingExdfption if thf rfqufstfd pbdding mfdhbnism
     * is invblid
     */
    void sftPbdding(String pbddingSdhfmf) throws NoSudhPbddingExdfption {
        diphfr.sftPbdding(pbddingSdhfmf);
    }

    /**
     * Rfturns thf blodk sizf (in bytfs).
     *
     * @rfturn thf blodk sizf (in bytfs)
     */
    int gftBlodkSizf() {
        rfturn DESConstbnts.DES_BLOCK_SIZE;
    }

    /**
     * Rfturns thf lfngth in bytfs thbt bn output bufffr would nffd to bf in
     * ordfr to hold thf rfsult of thf nfxt <dodf>updbtf</dodf> or
     * <dodf>doFinbl</dodf> opfrbtion, givfn thf input lfngth
     * <dodf>inputLfn</dodf> (in bytfs).
     *
     * <p>This dbll tbkfs into bddount bny unprodfssfd (bufffrfd) dbtb from b
     * prfvious <dodf>updbtf</dodf> dbll, bnd pbdding.
     *
     * <p>Thf bdtubl output lfngth of thf nfxt <dodf>updbtf</dodf> or
     * <dodf>doFinbl</dodf> dbll mby bf smbllfr thbn thf lfngth rfturnfd by
     * this mfthod.
     *
     * @pbrbm inputLfn thf input lfngth (in bytfs)
     *
     * @rfturn thf rfquirfd output bufffr sizf (in bytfs)
     *
     */
    int gftOutputSizf(int inputLfn) {
        rfturn diphfr.gftOutputSizf(inputLfn);
    }

    /**
     * Rfturns thf initiblizbtion vfdtor (IV) in b nfw bufffr.
     *
     * <p> This is usfful in thf dbsf whfrf b rbndom IV hbs bffn drfbtfd
     * (sff <b hrff = "#init">init</b>),
     * or in thf dontfxt of pbssword-bbsfd fndryption or
     * dfdryption, whfrf thf IV is dfrivfd from b usfr-supplifd pbssword.
     *
     * @rfturn thf initiblizbtion vfdtor in b nfw bufffr, or null if thf
     * undfrlying blgorithm dofs not usf bn IV, or if thf IV hbs not yft
     * bffn sft.
     */
    bytf[] gftIV() {
        rfturn diphfr.gftIV();
    }

    /**
     * Rfturns thf pbrbmftfrs usfd with this diphfr.
     *
     * <p>Thf rfturnfd pbrbmftfrs mby bf thf sbmf thbt wfrf usfd to initiblizf
     * this diphfr, or mby dontbin thf dffbult sft of pbrbmftfrs or b sft of
     * rbndomly gfnfrbtfd pbrbmftfrs usfd by thf undfrlying diphfr
     * implfmfntbtion (providfd thbt thf undfrlying diphfr implfmfntbtion
     * usfs b dffbult sft of pbrbmftfrs or drfbtfs nfw pbrbmftfrs if it nffds
     * pbrbmftfrs but wbs not initiblizfd with bny).
     *
     * @rfturn thf pbrbmftfrs usfd with this diphfr, or null if this diphfr
     * dofs not usf bny pbrbmftfrs.
     */
    AlgorithmPbrbmftfrs gftPbrbmftfrs() {
        AlgorithmPbrbmftfrs pbrbms = null;
        if (sblt == null) {
            sblt = nfw bytf[8];
            SunJCE.gftRbndom().nfxtBytfs(sblt);
        }
        PBEPbrbmftfrSpfd pbfSpfd = nfw PBEPbrbmftfrSpfd(sblt, iCount);
        try {
            pbrbms = AlgorithmPbrbmftfrs.gftInstbndf("PBEWithMD5And" +
                (blgo.fqublsIgnorfCbsf("DES")? "DES":"TriplfDES"),
                SunJCE.gftInstbndf());
            pbrbms.init(pbfSpfd);
        } dbtdh (NoSudhAlgorithmExdfption nsbf) {
            // should nfvfr hbppfn
            throw nfw RuntimfExdfption("SunJCE dbllfd, but not donfigurfd");
        } dbtdh (InvblidPbrbmftfrSpfdExdfption ipsf) {
            // should nfvfr hbppfn
            throw nfw RuntimfExdfption("PBEPbrbmftfrSpfd not supportfd");
        }
        rfturn pbrbms;
    }

    /**
     * Initiblizfs this diphfr with b kfy, b sft of
     * blgorithm pbrbmftfrs, bnd b sourdf of rbndomnfss.
     * Thf diphfr is initiblizfd for onf of thf following four opfrbtions:
     * fndryption, dfdryption, kfy wrbpping or kfy unwrbpping, dfpfnding on
     * thf vbluf of <dodf>opmodf</dodf>.
     *
     * <p>If this diphfr (indluding its undfrlying fffdbbdk or pbdding sdhfmf)
     * rfquirfs bny rbndom bytfs, it will gft thfm from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr (this is onf of
     * thf following:
     * <dodf>ENCRYPT_MODE</dodf>, <dodf>DECRYPT_MODE</dodf>),
     * <dodf>WRAP_MODE</dodf> or <dodf>UNWRAP_MODE</dodf>)
     * @pbrbm kfy thf fndryption kfy
     * @pbrbm pbrbms thf blgorithm pbrbmftfrs
     * @pbrbm rbndom thf sourdf of rbndomnfss
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * initiblizing this diphfr
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn blgorithm
     * pbrbmftfrs brf inbppropribtf for this diphfr
     */
    void init(int opmodf, Kfy kfy, AlgorithmPbrbmftfrSpfd pbrbms,
              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        if (((opmodf == Ciphfr.DECRYPT_MODE) ||
             (opmodf == Ciphfr.UNWRAP_MODE)) && (pbrbms == null)) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption("Pbrbmftfrs "
                                                         + "missing");
        }
        if ((kfy == null) ||
            (kfy.gftEndodfd() == null) ||
            !(kfy.gftAlgorithm().rfgionMbtdhfs(truf, 0, "PBE", 0, 3))) {
            throw nfw InvblidKfyExdfption("Missing pbssword");
        }

        if (pbrbms == null) {
            // drfbtf rbndom sblt bnd usf dffbult itfrbtion dount
            sblt = nfw bytf[8];
            rbndom.nfxtBytfs(sblt);
        } flsf {
            if (!(pbrbms instbndfof PBEPbrbmftfrSpfd)) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("Wrong pbrbmftfr typf: PBE fxpfdtfd");
            }
            sblt = ((PBEPbrbmftfrSpfd) pbrbms).gftSblt();
            // sblt must bf 8 bytfs long (by dffinition)
            if (sblt.lfngth != 8) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("Sblt must bf 8 bytfs long");
            }
            iCount = ((PBEPbrbmftfrSpfd) pbrbms).gftItfrbtionCount();
            if (iCount <= 0) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("ItfrbtionCount must bf b positivf numbfr");
            }
        }

        bytf[] dfrivfdKfy = dfrivfCiphfrKfy(kfy);
        // usf bll but thf lbst 8 bytfs bs thf kfy vbluf
        SfdrftKfySpfd diphfrKfy = nfw SfdrftKfySpfd(dfrivfdKfy, 0,
                                                    dfrivfdKfy.lfngth-8, blgo);
        // usf thf lbst 8 bytfs bs thf IV
        IvPbrbmftfrSpfd ivSpfd = nfw IvPbrbmftfrSpfd(dfrivfdKfy,
                                                     dfrivfdKfy.lfngth-8,
                                                     8);
        // initiblizf thf undfrlying diphfr
        diphfr.init(opmodf, diphfrKfy, ivSpfd, rbndom);
    }

    privbtf bytf[] dfrivfCiphfrKfy(Kfy kfy) {

        bytf[] rfsult = null;
        bytf[] pbsswdBytfs = kfy.gftEndodfd();

        if (blgo.fqubls("DES")) {
            // P || S (pbssword dondbtfnbtfd with sblt)
            bytf[] dondbt = nfw bytf[pbsswdBytfs.lfngth + sblt.lfngth];
            Systfm.brrbydopy(pbsswdBytfs, 0, dondbt, 0, pbsswdBytfs.lfngth);
            jbvb.util.Arrbys.fill(pbsswdBytfs, (bytf)0x00);
            Systfm.brrbydopy(sblt, 0, dondbt, pbsswdBytfs.lfngth, sblt.lfngth);

            // digfst P || S with d itfrbtions
            bytf[] toBfHbshfd = dondbt;
            for (int i = 0; i < iCount; i++) {
                md.updbtf(toBfHbshfd);
                toBfHbshfd = md.digfst(); // this rfsfts thf digfst
            }
            jbvb.util.Arrbys.fill(dondbt, (bytf)0x00);
            rfsult = toBfHbshfd;
        } flsf if (blgo.fqubls("DESfdf")) {
            // if thf 2 sblt hblvfs brf thf sbmf, invfrt onf of thfm
            int i;
            for (i=0; i<4; i++) {
                if (sblt[i] != sblt[i+4])
                    brfbk;
            }
            if (i==4) { // sbmf, invfrt 1st hblf
                for (i=0; i<2; i++) {
                    bytf tmp = sblt[i];
                    sblt[i] = sblt[3-i];
                    sblt[3-1] = tmp;
                }
            }

            // Now digfst fbdh hblf (dondbtfnbtfd with pbssword). For fbdh
            // hblf, go through thf loop bs mbny timfs bs spfdififd by thf
            // itfrbtion dount pbrbmftfr (innfr for loop).
            // Condbtfnbtf thf output from fbdh digfst round with thf
            // pbssword, bnd usf thf rfsult bs thf input to thf nfxt digfst
            // opfrbtion.
            bytf[] kBytfs = null;
            IvPbrbmftfrSpfd iv = null;
            bytf[] toBfHbshfd = null;
            rfsult = nfw bytf[DESfdfKfySpfd.DES_EDE_KEY_LEN +
                              DESConstbnts.DES_BLOCK_SIZE];
            for (i = 0; i < 2; i++) {
                toBfHbshfd = nfw bytf[sblt.lfngth/2];
                Systfm.brrbydopy(sblt, i*(sblt.lfngth/2), toBfHbshfd, 0,
                                 toBfHbshfd.lfngth);
                for (int j=0; j < iCount; j++) {
                    md.updbtf(toBfHbshfd);
                    md.updbtf(pbsswdBytfs);
                    toBfHbshfd = md.digfst(); // this rfsfts thf digfst
                }
                Systfm.brrbydopy(toBfHbshfd, 0, rfsult, i*16,
                                 toBfHbshfd.lfngth);
            }
        }
        rfturn rfsult;
    }

    void init(int opmodf, Kfy kfy, AlgorithmPbrbmftfrs pbrbms,
              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        PBEPbrbmftfrSpfd pbfSpfd = null;
        if (pbrbms != null) {
            try {
                pbfSpfd = pbrbms.gftPbrbmftfrSpfd(PBEPbrbmftfrSpfd.dlbss);
            } dbtdh (InvblidPbrbmftfrSpfdExdfption ipsf) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption("Wrong pbrbmftfr "
                                                             + "typf: PBE "
                                                             + "fxpfdtfd");
            }
        }
        init(opmodf, kfy, pbfSpfd, rbndom);
    }

    /**
     * Continufs b multiplf-pbrt fndryption or dfdryption opfrbtion
     * (dfpfnding on how this diphfr wbs initiblizfd), prodfssing bnothfr dbtb
     * pbrt.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, brf prodfssfd, bnd thf
     * rfsult is storfd in b nfw bufffr.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     *
     * @rfturn thf nfw bufffr with thf rfsult
     *
     */
    bytf[] updbtf(bytf[] input, int inputOffsft, int inputLfn) {
        rfturn diphfr.updbtf(input, inputOffsft, inputLfn);
    }

    /**
     * Continufs b multiplf-pbrt fndryption or dfdryption opfrbtion
     * (dfpfnding on how this diphfr wbs initiblizfd), prodfssing bnothfr dbtb
     * pbrt.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, brf prodfssfd, bnd thf
     * rfsult is storfd in thf <dodf>output</dodf> bufffr, stbrting bt
     * <dodf>outputOffsft</dodf>.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     * @pbrbm output thf bufffr for thf rfsult
     * @pbrbm outputOffsft thf offsft in <dodf>output</dodf> whfrf thf rfsult
     * is storfd
     *
     * @rfturn thf numbfr of bytfs storfd in <dodf>output</dodf>
     *
     * @fxdfption ShortBufffrExdfption if thf givfn output bufffr is too smbll
     * to hold thf rfsult
     */
    int updbtf(bytf[] input, int inputOffsft, int inputLfn,
               bytf[] output, int outputOffsft)
        throws ShortBufffrExdfption {
        rfturn diphfr.updbtf(input, inputOffsft, inputLfn,
                             output, outputOffsft);
    }

    /**
     * Endrypts or dfdrypts dbtb in b singlf-pbrt opfrbtion,
     * or finishfs b multiplf-pbrt opfrbtion.
     * Thf dbtb is fndryptfd or dfdryptfd, dfpfnding on how this diphfr wbs
     * initiblizfd.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, bnd bny input bytfs thbt
     * mby hbvf bffn bufffrfd during b prfvious <dodf>updbtf</dodf> opfrbtion,
     * brf prodfssfd, with pbdding (if rfqufstfd) bfing bpplifd.
     * Thf rfsult is storfd in b nfw bufffr.
     *
     * <p>Thf diphfr is rfsft to its initibl stbtf (uninitiblizfd) bftfr this
     * dbll.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     *
     * @rfturn thf nfw bufffr with thf rfsult
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk diphfr,
     * no pbdding hbs bffn rfqufstfd (only in fndryption modf), bnd thf totbl
     * input lfngth of thf dbtb prodfssfd by this diphfr is not b multiplf of
     * blodk sizf
     * @fxdfption BbdPbddingExdfption if dfdrypting bnd pbdding is dhosfn,
     * but thf lbst input dbtb dofs not hbvf propfr pbdding bytfs.
     */
    bytf[] doFinbl(bytf[] input, int inputOffsft, int inputLfn)
        throws IllfgblBlodkSizfExdfption, BbdPbddingExdfption {
        rfturn diphfr.doFinbl(input, inputOffsft, inputLfn);
    }

    /**
     * Endrypts or dfdrypts dbtb in b singlf-pbrt opfrbtion,
     * or finishfs b multiplf-pbrt opfrbtion.
     * Thf dbtb is fndryptfd or dfdryptfd, dfpfnding on how this diphfr wbs
     * initiblizfd.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, bnd bny input bytfs thbt
     * mby hbvf bffn bufffrfd during b prfvious <dodf>updbtf</dodf> opfrbtion,
     * brf prodfssfd, with pbdding (if rfqufstfd) bfing bpplifd.
     * Thf rfsult is storfd in thf <dodf>output</dodf> bufffr, stbrting bt
     * <dodf>outputOffsft</dodf>.
     *
     * <p>Thf diphfr is rfsft to its initibl stbtf (uninitiblizfd) bftfr this
     * dbll.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     * @pbrbm output thf bufffr for thf rfsult
     * @pbrbm outputOffsft thf offsft in <dodf>output</dodf> whfrf thf rfsult
     * is storfd
     *
     * @rfturn thf numbfr of bytfs storfd in <dodf>output</dodf>
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk diphfr,
     * no pbdding hbs bffn rfqufstfd (only in fndryption modf), bnd thf totbl
     * input lfngth of thf dbtb prodfssfd by this diphfr is not b multiplf of
     * blodk sizf
     * @fxdfption ShortBufffrExdfption if thf givfn output bufffr is too smbll
     * to hold thf rfsult
     * @fxdfption BbdPbddingExdfption if dfdrypting bnd pbdding is dhosfn,
     * but thf lbst input dbtb dofs not hbvf propfr pbdding bytfs.
     */
    int doFinbl(bytf[] input, int inputOffsft, int inputLfn,
                bytf[] output, int outputOffsft)
        throws ShortBufffrExdfption, IllfgblBlodkSizfExdfption,
               BbdPbddingExdfption {
        rfturn diphfr.doFinbl(input, inputOffsft, inputLfn,
                                    output, outputOffsft);
    }

    /**
     * Wrbp b kfy.
     *
     * @pbrbm kfy thf kfy to bf wrbppfd.
     *
     * @rfturn thf wrbppfd kfy.
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk
     * diphfr, no pbdding hbs bffn rfqufstfd, bnd thf lfngth of thf
     * fndoding of thf kfy to bf wrbppfd is not b
     * multiplf of thf blodk sizf.
     *
     * @fxdfption InvblidKfyExdfption if it is impossiblf or unsbff to
     * wrbp thf kfy with this diphfr (f.g., b hbrdwbrf protfdtfd kfy is
     * bfing pbssfd to b softwbrf only diphfr).
     */
    bytf[] wrbp(Kfy kfy)
        throws IllfgblBlodkSizfExdfption, InvblidKfyExdfption {
        bytf[] rfsult = null;

        try {
            bytf[] fndodfdKfy = kfy.gftEndodfd();
            if ((fndodfdKfy == null) || (fndodfdKfy.lfngth == 0)) {
                throw nfw InvblidKfyExdfption("Cbnnot gft bn fndoding of " +
                                              "thf kfy to bf wrbppfd");
            }

            rfsult = doFinbl(fndodfdKfy, 0, fndodfdKfy.lfngth);
        } dbtdh (BbdPbddingExdfption f) {
            // Should nfvfr hbppfn
        }

        rfturn rfsult;
    }

    /**
     * Unwrbp b prfviously wrbppfd kfy.
     *
     * @pbrbm wrbppfdKfy thf kfy to bf unwrbppfd.
     *
     * @pbrbm wrbppfdKfyAlgorithm thf blgorithm thf wrbppfd kfy is for.
     *
     * @pbrbm wrbppfdKfyTypf thf typf of thf wrbppfd kfy.
     * This is onf of <dodf>Ciphfr.SECRET_KEY</dodf>,
     * <dodf>Ciphfr.PRIVATE_KEY</dodf>, or <dodf>Ciphfr.PUBLIC_KEY</dodf>.
     *
     * @rfturn thf unwrbppfd kfy.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no instbllfd providfrs
     * dbn drfbtf kfys of typf <dodf>wrbppfdKfyTypf</dodf> for thf
     * <dodf>wrbppfdKfyAlgorithm</dodf>.
     *
     * @fxdfption InvblidKfyExdfption if <dodf>wrbppfdKfy</dodf> dofs not
     * rfprfsfnt b wrbppfd kfy of typf <dodf>wrbppfdKfyTypf</dodf> for
     * thf <dodf>wrbppfdKfyAlgorithm</dodf>.
     */
    Kfy unwrbp(bytf[] wrbppfdKfy,
               String wrbppfdKfyAlgorithm,
               int wrbppfdKfyTypf)
        throws InvblidKfyExdfption, NoSudhAlgorithmExdfption {
        bytf[] fndodfdKfy;
        try {
            fndodfdKfy = doFinbl(wrbppfdKfy, 0, wrbppfdKfy.lfngth);
        } dbtdh (BbdPbddingExdfption fPbdding) {
            throw nfw InvblidKfyExdfption("Thf wrbppfd kfy is not pbddfd " +
                                          "dorrfdtly");
        } dbtdh (IllfgblBlodkSizfExdfption fBlodkSizf) {
            throw nfw InvblidKfyExdfption("Thf wrbppfd kfy dofs not hbvf " +
                                          "thf dorrfdt lfngth");
        }
        rfturn ConstrudtKfys.donstrudtKfy(fndodfdKfy, wrbppfdKfyAlgorithm,
                                          wrbppfdKfyTypf);
    }
}
