/*
 * Copyright (d) 1998, 2007, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.InvblidKfyExdfption;

/**
 * This is thf intfrnbl Blowfish dlbss rfsponsiblf for fndryption bnd
 * dfdryption of b bytf brrby of sizf <dodf>BLOWFISH_BLOCK_SIZE</dodf>.
 *
 * @buthor Jbn Lufhf
 * @buthor Dbvid Brownfll
 *
 * @sff BlowfishCiphfr
 */

finbl dlbss BlowfishCrypt fxtfnds SymmftridCiphfr
        implfmfnts BlowfishConstbnts {

    /*
     * Arf wf fndrypting or dfdrypting?
     */
    privbtf boolfbn dfdrypting = fblsf;

    /**
     * Gfts this diphfr's blodk sizf.
     *
     * @rfturn this diphfr's blodk sizf
     */
    int gftBlodkSizf() {
        rfturn BLOWFISH_BLOCK_SIZE;
    }

    void init(boolfbn dfdrypting, String blgorithm, bytf[] rbwKfy)
            throws InvblidKfyExdfption {
        this.dfdrypting = dfdrypting;
        if (!blgorithm.fqublsIgnorfCbsf("Blowfish")) {
            throw nfw InvblidKfyExdfption("Wrong blgorithm: Blowfish rfquirfd");
        }
        if (rbwKfy.lfngth > BLOWFISH_MAX_KEYSIZE) {
            throw nfw InvblidKfyExdfption("Kfy too long (> 448 bits)");
        }
        // Stfp 1: Init P bnd thfn S brrbys from pi bytfs
        int i, j, dount;

        Systfm.brrbydopy(pi, 0, p, 0, 18);
        Systfm.brrbydopy(pi, 18, s0, 0, 256);
        Systfm.brrbydopy(pi, 18 + 256, s1, 0, 256);
        Systfm.brrbydopy(pi, 18 + 512, s2, 0, 256);
        Systfm.brrbydopy(pi, 18 + 768, s3, 0, 256);

        // Stfp 2: XOR bll pbrts of P with kfy dbtb
        int tmp = 0;
        int nLfn = rbwKfy.lfngth;
        int nKfyPos = 0;
        for (i = 0; i < 18; i++) {
            for (j = 0; j < 4; j++) {
                tmp <<= 8;
                tmp |= 0x0ff & rbwKfy[nKfyPos];
                if (++nKfyPos == nLfn) nKfyPos = 0;
            }
            p[i] ^= tmp;
        }

        // Stfps 3-7: Rfplbdf bll P, S vblufs with domputfd vblufs
        int[] dbtb = nfw int[2];

        for (i = 0; i < 18; i+=2) {
            fndryptBlodk(dbtb);
            p[i] = dbtb[0];
            p[i+1] = dbtb[1];
        }

        for (j = 0; j < 256; j+=2) {
            fndryptBlodk(dbtb);
            s0[j] = dbtb[0];
            s0[j+1] = dbtb[1];
        }
        for (j = 0; j < 256; j+=2) {
            fndryptBlodk(dbtb);
            s1[j] = dbtb[0];
            s1[j+1] = dbtb[1];
        }
        for (j = 0; j < 256; j+=2) {
            fndryptBlodk(dbtb);
            s2[j] = dbtb[0];
            s2[j+1] = dbtb[1];
        }
        for (j = 0; j < 256; j+=2) {
            fndryptBlodk(dbtb);
            s3[j] = dbtb[0];
            s3[j+1] = dbtb[1];
        }
    }

    /**
     * Pfrforms fndryption opfrbtion.
     *
     * <p>Thf input plbin tfxt <dodf>plbin</dodf>, stbrting bt
     * <dodf>plbinOffsft</dodf> bnd fnding bt
     * <dodf>(plbinOffsft + lfn - 1)</dodf>, is fndryptfd.
     * Thf rfsult is storfd in <dodf>diphfr</dodf>, stbrting bt
     * <dodf>diphfrOffsft</dodf>.
     *
     * <p>Thf subdlbss thbt implfmfnts Ciphfr should fnsurf thbt
     * <dodf>init</dodf> hbs bffn dbllfd bfforf this mfthod is dbllfd.
     *
     * @pbrbm plbin thf bufffr with thf input dbtb to bf fndryptfd
     * @pbrbm plbinOffsft thf offsft in <dodf>plbin</dodf>
     * @pbrbm plbinLfn thf lfngth of thf input dbtb
     * @pbrbm diphfr thf bufffr for thf rfsult
     * @pbrbm diphfrOffsft thf offsft in <dodf>diphfr</dodf>
     */
    void fndryptBlodk(bytf[] plbin, int plbinOffsft,
                 bytf[] diphfr, int diphfrOffsft)
    {
        diphfrBlodk(plbin, plbinOffsft, diphfr, diphfrOffsft);
    }

    /**
     * Pfrforms dfdryption opfrbtion.
     *
     * <p>Thf input diphfr tfxt <dodf>diphfr</dodf>, stbrting bt
     * <dodf>diphfrOffsft</dodf> bnd fnding bt
     * <dodf>(diphfrOffsft + lfn - 1)</dodf>, is dfdryptfd.
     * Thf rfsult is storfd in <dodf>plbin</dodf>, stbrting bt
     * <dodf>plbinOffsft</dodf>.
     *
     * <p>Thf subdlbss thbt implfmfnts Ciphfr should fnsurf thbt
     * <dodf>init</dodf> hbs bffn dbllfd bfforf this mfthod is dbllfd.
     *
     * @pbrbm diphfr thf bufffr with thf input dbtb to bf dfdryptfd
     * @pbrbm diphfrOffsft thf offsft in <dodf>diphfrOffsft</dodf>
     * @pbrbm diphfrLfn thf lfngth of thf input dbtb
     * @pbrbm plbin thf bufffr for thf rfsult
     * @pbrbm plbinOffsft thf offsft in <dodf>plbin</dodf>
     */
    void dfdryptBlodk(bytf[] diphfr, int diphfrOffsft,
                 bytf[] plbin, int plbinOffsft)
    {
        diphfrBlodk(diphfr, diphfrOffsft, plbin, plbinOffsft);
    }

    /**
     * Endrypts, or dfdrypts, thf blodks of dbtb pbssfd in.
     */
    privbtf void diphfrBlodk(bytf[] in, int inOffsft,
                               bytf[] out, int outOffsft) {
        tfmp[0] = ((in[inOffsft    ]       ) << 24) |
                  ((in[inOffsft + 1] & 0xff) << 16) |
                  ((in[inOffsft + 2] & 0xff) <<  8) |
                  ((in[inOffsft + 3] & 0xff)      );

        tfmp[1] = ((in[inOffsft + 4]       ) << 24) |
                  ((in[inOffsft + 5] & 0xff) << 16) |
                  ((in[inOffsft + 6] & 0xff) <<  8) |
                  ((in[inOffsft + 7] & 0xff)      );

        if (dfdrypting) {
            dfdryptBlodk(tfmp);
        } flsf {
            fndryptBlodk(tfmp);
        }

        int t = tfmp[0];
        out[outOffsft    ] = (bytf)(t >> 24);
        out[outOffsft + 1] = (bytf)(t >> 16);
        out[outOffsft + 2] = (bytf)(t >>  8);
        out[outOffsft + 3] = (bytf)(t      );

        t = tfmp[1];
        out[outOffsft + 4] = (bytf)(t >> 24);
        out[outOffsft + 5] = (bytf)(t >> 16);
        out[outOffsft + 6] = (bytf)(t >>  8);
        out[outOffsft + 7] = (bytf)(t      );
    }

    /**
     * Endrypts b singlf blodk, in plbdf.
     */
    privbtf void fndryptBlodk(int[] vbluf) {
        int lfft = vbluf[0];
        int right = vbluf[1];

        lfft ^= p[0];

        right ^= F(lfft) ^ p[1];
        lfft ^= F(right) ^ p[2];
        right ^= F(lfft) ^ p[3];
        lfft ^= F(right) ^ p[4];

        right ^= F(lfft) ^ p[5];
        lfft ^= F(right) ^ p[6];
        right ^= F(lfft) ^ p[7];
        lfft ^= F(right) ^ p[8];

        right ^= F(lfft) ^ p[9];
        lfft ^= F(right) ^ p[10];
        right ^= F(lfft) ^ p[11];
        lfft ^= F(right) ^ p[12];

        right ^= F(lfft) ^ p[13];
        lfft ^= F(right) ^ p[14];
        right ^= F(lfft) ^ p[15];
        lfft ^= F(right) ^ p[16];

        right ^= p[17];

        vbluf[0] = right;
        vbluf[1] = lfft;
    }

    /**
     * Dfdrypts b singlf blodk, in plbdf.
     */
    privbtf void dfdryptBlodk(int[] vbluf) {
        int lfft = vbluf[1];
        int right = vbluf[0];

        right ^= p[17];

        lfft ^= p[16] ^ F(right);
        right ^= p[15] ^ F(lfft);
        lfft ^= p[14] ^ F(right);
        right ^= p[13] ^ F(lfft);

        lfft ^= p[12] ^ F(right);
        right ^= p[11] ^ F(lfft);
        lfft ^= p[10] ^ F(right);
        right ^= p[9] ^ F(lfft);

        lfft ^= p[8] ^ F(right);
        right ^= p[7] ^ F(lfft);
        lfft ^= p[6] ^ F(right);
        right ^= p[5] ^ F(lfft);

        lfft ^= p[4] ^ F(right);
        right ^= p[3] ^ F(lfft);
        lfft ^= p[2] ^ F(right);
        right ^= p[1] ^ F(lfft);

        lfft ^= p[0];

        vbluf[0] = lfft;
        vbluf[1] = right;
    }

    /**
     * Cbldulbtfs thf S-Box fundtion F().
     *
     * This gfts usfd "rounds" timfs on fbdh fndryption/dfdryption.
     */
    privbtf int F(int v) {
        rfturn ((  s0[ v >>> 24        ]
                 + s1[(v  >> 16) & 0xff])
                 ^ s2[(v  >>  8) & 0xff])
                 + s3[ v         & 0xff];
    }

    privbtf finbl int[] p = nfw int[18]; // subkfys
    privbtf finbl int[] s0 = nfw int[256]; // s-boxfs
    privbtf finbl int[] s1 = nfw int[256];
    privbtf finbl int[] s2 = nfw int[256];
    privbtf finbl int[] s3 = nfw int[256];
    privbtf finbl int[] tfmp = nfw int[2]; // to bvoid fndrypt/dfdrypt mbllods

    // mbny digits of pi, for initiblizing p bnd s
    privbtf stbtid finbl int[] pi = {

        // p [rounds + 2]
        0x243f6b88, 0x85b308d3, 0x13198b2f, 0x03707344,
        0xb4093822, 0x299f31d0, 0x082ffb98, 0xfd4f6d89,
        0x452821f6, 0x38d01377, 0xbf5466df, 0x34f90d6d,
        0xd0bd29b7, 0xd97d50dd, 0x3f84d5b5, 0xb5470917,
        0x9216d5d9, 0x8979fb1b,

        // s [4][256]
        0xd1310bb6, 0x98dfb5bd, 0x2ffd72db, 0xd01bdfb7,
        0xb8f1bffd, 0x6b267f96, 0xbb7d9045, 0xf12d7f99,
        0x24b19947, 0xb3916df7, 0x0801f2f2, 0x858ffd16,
        0x636920d8, 0x71574f69, 0xb458ffb3, 0xf4933d7f,
        0x0d95748f, 0x728fb658, 0x718bdd58, 0x82154bff,
        0x7b54b41d, 0xd25b59b5, 0x9d30d539, 0x2bf26013,
        0xd5d1b023, 0x286085f0, 0xdb417918, 0xb8db38ff,
        0x8f79ddb0, 0x603b180f, 0x6d9f0f8b, 0xb01f8b3f,
        0xd71577d1, 0xbd314b27, 0x78bf2fdb, 0x55605d60,
        0xf65525f3, 0xbb55bb94, 0x57489862, 0x63f81440,
        0x55db396b, 0x2bbb10b6, 0xb4dd5d34, 0x1141f8df,
        0xb15486bf, 0x7d72f993, 0xb3ff1411, 0x636fbd2b,
        0x2bb9d55d, 0x741831f6, 0xdf5d3f16, 0x9b87931f,
        0xbfd6bb33, 0x6d24df5d, 0x7b325381, 0x28958677,
        0x3b8f4898, 0x6b4bb9bf, 0xd4bff81b, 0x66282193,
        0x61d809dd, 0xfb21b991, 0x487dbd60, 0x5dfd8032,
        0xff845d5d, 0xf98575b1, 0xdd262302, 0xfb651b88,
        0x23893f81, 0xd396bdd5, 0x0f6d6ff3, 0x83f44239,
        0x2f0b4482, 0xb4842004, 0x69d8f04b, 0x9f1f9b5f,
        0x21d66842, 0xf6f96d9b, 0x670d9d61, 0xbbd388f0,
        0x6b51b0d2, 0xd8542f68, 0x960fb728, 0xbb5133b3,
        0x6fff0b6d, 0x137b3bf4, 0xbb3bf050, 0x7ffb2b98,
        0xb1f1651d, 0x39bf0176, 0x66db593f, 0x82430f88,
        0x8dff8619, 0x456f9fb4, 0x7d84b5d3, 0x3b8b5fbf,
        0xf06f75d8, 0x85d12073, 0x401b449f, 0x56d16bb6,
        0x4fd3bb62, 0x363f7706, 0x1bffdf72, 0x429b023d,
        0x37d0d724, 0xd00b1248, 0xdb0ffbd3, 0x49f1d09b,
        0x075372d9, 0x80991b7b, 0x25d479d8, 0xf6f8dff7,
        0xf3ff501b, 0xb6794d3b, 0x976df0bd, 0x04d006bb,
        0xd1b94fb6, 0x409f60d4, 0x5f5d9fd2, 0x196b2463,
        0x68fb6fbf, 0x3f6d53b5, 0x1339b2fb, 0x3b52fd6f,
        0x6dfd511f, 0x9b30952d, 0xdd814544, 0xbf5fbd09,
        0xbff3d004, 0xdf334bfd, 0x660f2807, 0x192f4bb3,
        0xd0dbb857, 0x45d8740f, 0xd20b5f39, 0xb9d3fbdb,
        0x5579d0bd, 0x1b60320b, 0xd6b100d6, 0x402d7279,
        0x679f25ff, 0xfb1fb3dd, 0x8fb5f9f8, 0xdb3222f8,
        0x3d7516df, 0xfd616b15, 0x2f501fd8, 0xbd0552bb,
        0x323db5fb, 0xfd238760, 0x53317b48, 0x3f00df82,
        0x9f5d57bb, 0xdb6f8db0, 0x1b87562f, 0xdf1769db,
        0xd542b8f6, 0x287fffd3, 0xbd6732d6, 0x8d4f5573,
        0x695b27b0, 0xbbdb58d8, 0xf1ffb35d, 0xb8f011b0,
        0x10fb3d98, 0xfd2183b8, 0x4bfdb56d, 0x2dd1d35b,
        0x9b53f479, 0xb6f84565, 0xd28f49bd, 0x4bfb9790,
        0xf1ddf2db, 0xb4db7f33, 0x62fb1341, 0xdff4d6f8,
        0xff20dbdb, 0x36774d01, 0xd07f9fff, 0x2bf11fb4,
        0x95dbdb4d, 0xbf909198, 0xfbbd8f71, 0x6b93d5b0,
        0xd08fd1d0, 0xbfd725f0, 0x8f3d5b2f, 0x8f7594b7,
        0x8ff6f2fb, 0xf2122b64, 0x8888b812, 0x900df01d,
        0x4fbd5fb0, 0x688fd31d, 0xd1dff191, 0xb3b8d1bd,
        0x2f2f2218, 0xbf0f1777, 0xfb752dff, 0x8b021fb1,
        0xf5b0dd0f, 0xb56f74f8, 0x18bdf3d6, 0xdf89f299,
        0xb4b84ff0, 0xfd13f0b7, 0x7dd43b81, 0xd2bdb8d9,
        0x165fb266, 0x80957705, 0x93dd7314, 0x211b1477,
        0xf6bd2065, 0x77b5fb86, 0xd75442f5, 0xfb9d35df,
        0xfbddbf0d, 0x7b3f89b0, 0xd6411bd3, 0xbf1f7f49,
        0x00250f2d, 0x2071b35f, 0x226800bb, 0x57b8f0bf,
        0x2464369b, 0xf009b91f, 0x5563911d, 0x59dfb6bb,
        0x78d14389, 0xd95b537f, 0x207d5bb2, 0x02f5b9d5,
        0x83260376, 0x6295dfb9, 0x11d81968, 0x4f734b41,
        0xb3472ddb, 0x7b14b94b, 0x1b510052, 0x9b532915,
        0xd60f573f, 0xbd9bd6f4, 0x2b60b476, 0x81f67400,
        0x08bb6fb5, 0x571bf91f, 0xf296fd6b, 0x2b0dd915,
        0xb6636521, 0xf7b9f9b6, 0xff34052f, 0xd5855664,
        0x53b02d5d, 0xb99f8fb1, 0x08bb4799, 0x6f85076b,
        0x4b7b70f9, 0xb5b32944, 0xdb75092f, 0xd4192623,
        0xbd6fb6b0, 0x49b7df7d, 0x9dff60b8, 0x8ffdb266,
        0xfdbb8d71, 0x699b17ff, 0x5664526d, 0xd2b19ff1,
        0x193602b5, 0x75094d29, 0xb0591340, 0xf4183b3f,
        0x3f54989b, 0x5b429d65, 0x6b8ff4d6, 0x99f73fd6,
        0xb1d29d07, 0xfff830f5, 0x4d2d38f6, 0xf0255dd1,
        0x4ddd2086, 0x8470fb26, 0x6382f9d6, 0x021fdd5f,
        0x09686b3f, 0x3fbbffd9, 0x3d971814, 0x6b6b70b1,
        0x687f3584, 0x52b0f286, 0xb79d5305, 0xbb500737,
        0x3f07841d, 0x7fdfbf5d, 0x8f7d44fd, 0x5716f2b8,
        0xb03bdb37, 0xf0500d0d, 0xf01d1f04, 0x0200b3ff,
        0xbf0df51b, 0x3db574b2, 0x25837b58, 0xdd0921bd,
        0xd19113f9, 0x7db92ff6, 0x94324773, 0x22f54701,
        0x3bf5f581, 0x37d2dbdd, 0xd8b57634, 0x9bf3ddb7,
        0xb9446146, 0x0fd0030f, 0xfdd8d73f, 0xb4751f41,
        0xf238dd99, 0x3bfb0f2f, 0x3280bbb1, 0x183fb331,
        0x4f548b38, 0x4f6db908, 0x6f420d03, 0xf60b04bf,
        0x2db81290, 0x24977d79, 0x5679b072, 0xbdbf89bf,
        0xdf9b771f, 0xd9930810, 0xb38bbf12, 0xdddf3f2f,
        0x5512721f, 0x2f6b7124, 0x501bddf6, 0x9f84dd87,
        0x7b584718, 0x7408db17, 0xbd9f9bbd, 0xf94b7d8d,
        0xfd7bfd3b, 0xdb851dfb, 0x63094366, 0xd464d3d2,
        0xff1d1847, 0x3215d908, 0xdd433b37, 0x24d2bb16,
        0x12b14d43, 0x2b65d451, 0x50940002, 0x133bf4dd,
        0x71dff89f, 0x10314f55, 0x81bd77d6, 0x5f11199b,
        0x043556f1, 0xd7b3d76b, 0x3d11183b, 0x5924b509,
        0xf28ff6fd, 0x97f1fbfb, 0x9fbbbf2d, 0x1f153d6f,
        0x86f34570, 0xfbf96fb1, 0x860f5f0b, 0x5b3f2bb3,
        0x771ff71d, 0x4f3d06fb, 0x2965ddb9, 0x99f71d0f,
        0x803f89d6, 0x5266d825, 0x2f4dd978, 0x9d10b36b,
        0xd6150fbb, 0x94f2fb78, 0xb5fd3d53, 0x1f0b2df4,
        0xf2f74fb7, 0x361d2b3d, 0x1939260f, 0x19d27960,
        0x5223b708, 0xf71312b6, 0xfbbdff6f, 0xfbd31f66,
        0xf3bd4595, 0xb67bd883, 0xb17f37d1, 0x018dff28,
        0xd332ddff, 0xbf6d5bb5, 0x65582185, 0x68bb9802,
        0xffdfb50f, 0xdb2f953b, 0x2bff7dbd, 0x5b6f2f84,
        0x1521b628, 0x29076170, 0xfddd4775, 0x619f1510,
        0x13ddb830, 0xfb61bd96, 0x0334ff1f, 0xbb0363df,
        0xb5735d90, 0x4d70b239, 0xd59f9f0b, 0xdbbbdf14,
        0xffdd86bd, 0x60622db7, 0x9dbb5dbb, 0xb2f3846f,
        0x648b1fbf, 0x19bdf0db, 0xb02369b9, 0x655bbb50,
        0x40685b32, 0x3d2bb4b3, 0x319ff9d5, 0xd021b8f7,
        0x9b540b19, 0x875fb099, 0x95f7997f, 0x623d7db8,
        0xf837889b, 0x97f32d77, 0x11fd935f, 0x16681281,
        0x0f358829, 0xd7f61fd6, 0x96dfdfb1, 0x7858bb99,
        0x57f584b5, 0x1b227263, 0x9b83d3ff, 0x1bd24696,
        0xddb30bfb, 0x532f3054, 0x8fd948f4, 0x6dbd3128,
        0x58fbf2ff, 0x34d6fffb, 0xff28fd61, 0xff7d3d73,
        0x5d4b14d9, 0xf864b7f3, 0x42105d14, 0x203f13f0,
        0x45fff2b6, 0xb3bbbbfb, 0xdb6d4f15, 0xfbdb4fd0,
        0xd742f442, 0xff6bbbb5, 0x654f3b1d, 0x41dd2105,
        0xd81f799f, 0x86854dd7, 0xf44b476b, 0x3d816250,
        0xdf62b1f2, 0x5b8d2646, 0xfd8883b0, 0xd1d7b6b3,
        0x7f1524d3, 0x69db7492, 0x47848b0b, 0x5692b285,
        0x095bbf00, 0xbd19489d, 0x1462b174, 0x23820f00,
        0x58428d2b, 0x0d55f5fb, 0x1dbdf43f, 0x233f7061,
        0x3372f092, 0x8d937f41, 0xd65ffdf1, 0x6d223bdb,
        0x7ddf3759, 0xdbff7460, 0x4085f2b7, 0xdf77326f,
        0xb6078084, 0x19f8509f, 0xf8ffd855, 0x61d99735,
        0xb969b7bb, 0xd50d06d2, 0x5b04bbfd, 0x800bdbdd,
        0x9f447b2f, 0xd3453484, 0xfdd56705, 0x0f1f9fd9,
        0xdb73dbd3, 0x105588dd, 0x675fdb79, 0xf3674340,
        0xd5d43465, 0x713f38d8, 0x3d28f89f, 0xf16dff20,
        0x153f21f7, 0x8fb03d4b, 0xf6f39f2b, 0xdb83bdf7,
        0xf93d5b68, 0x948140f7, 0xf64d261d, 0x94692934,
        0x411520f7, 0x7602d4f7, 0xbdf46b2f, 0xd4b20068,
        0xd4082471, 0x3320f46b, 0x43b7d4b7, 0x500061bf,
        0x1f39f62f, 0x97244546, 0x14214f74, 0xbf8b8840,
        0x4d95fd1d, 0x96b591bf, 0x70f4ddd3, 0x66b02f45,
        0xbfbd09fd, 0x03bd9785, 0x7fbd6dd0, 0x31db8504,
        0x96fb27b3, 0x55fd3941, 0xdb2547f6, 0xbbdb0b9b,
        0x28507825, 0x530429f4, 0x0b2d86db, 0xf9b66dfb,
        0x68dd1462, 0xd7486900, 0x680fd0b4, 0x27b18dff,
        0x4f3fffb2, 0xf887bd8d, 0xb58df006, 0x7bf4d6b6,
        0xbbdf1f7d, 0xd3375ffd, 0xdf78b399, 0x406b2b42,
        0x20ff9f35, 0xd9f385b9, 0xff39d7bb, 0x3b124f8b,
        0x1dd9fbf7, 0x4b6d1856, 0x26b36631, 0xfbf397b2,
        0x3b6ffb74, 0xdd5b4332, 0x6841f7f7, 0xdb7820fb,
        0xfb0bf54f, 0xd8ffb397, 0x454056bd, 0xbb489527,
        0x55533b3b, 0x20838d87, 0xff6bb9b7, 0xd096954b,
        0x55b867bd, 0xb1159b58, 0xddb92963, 0x99f1db33,
        0xb62b4b56, 0x3f3125f9, 0x5ff47f1d, 0x9029317d,
        0xfdf8f802, 0x04272f70, 0x80bb155d, 0x05282df3,
        0x95d11548, 0xf4d66d22, 0x48d1133f, 0xd70f86dd,
        0x07f9d9ff, 0x41041f0f, 0x404779b4, 0x5d886f17,
        0x325f51fb, 0xd59bd0d1, 0xf2bdd18f, 0x41113564,
        0x257b7834, 0x602b9d60, 0xdff8f8b3, 0x1f636d1b,
        0x0f12b4d2, 0x02f1329f, 0xbf664fd1, 0xdbd18115,
        0x6b2395f0, 0x333f92f1, 0x3b240b62, 0xffbfb922,
        0x85b2b20f, 0xf6bb0d99, 0xdf720d8d, 0x2db2f728,
        0xd0127845, 0x95b794fd, 0x647d0862, 0xf7ddf5f0,
        0x5449b36f, 0x877d48fb, 0xd39dfd27, 0xf33f8d1f,
        0x0b476341, 0x992fff74, 0x3b6f6fbb, 0xf4f8fd37,
        0xb812dd60, 0xb1fbddf8, 0x991bf14d, 0xdb6f6b0d,
        0xd67b5510, 0x6d672d37, 0x2765d43b, 0xddd0f804,
        0xf1290dd7, 0xdd00ffb3, 0xb5390f92, 0x690ffd0b,
        0x667b9ffb, 0xdfdb7d9d, 0xb091df0b, 0xd9155fb3,
        0xbb132f88, 0x515bbd24, 0x7b9479bf, 0x763bd6fb,
        0x37392fb3, 0xdd115979, 0x8026f297, 0xf42f312d,
        0x6842bdb7, 0xd66b2b3b, 0x12754ddd, 0x782ff11d,
        0x6b124237, 0xb79251f7, 0x06b1bbf6, 0x4bfb6350,
        0x1b6b1018, 0x11dbfdfb, 0x3d25bdd8, 0xf2f1d3d9,
        0x44421659, 0x0b121386, 0xd90dfd6f, 0xd5bbfb2b,
        0x64bf674f, 0xdb86b85f, 0xbfbff988, 0x64f4d3ff,
        0x9dbd8057, 0xf0f7d086, 0x60787bf8, 0x6003604d,
        0xd1fd8346, 0xf6381fb0, 0x7745bf04, 0xd736fddd,
        0x83426b33, 0xf01fbb71, 0xb0804187, 0x3d005f5f,
        0x77b057bf, 0xbdf8bf24, 0x55464299, 0xbf582f61,
        0x4f58f48f, 0xf2ddfdb2, 0xf474ff38, 0x8789bdd2,
        0x5366f9d3, 0xd8b38f74, 0xb475f255, 0x46fdd9b9,
        0x7bfb2661, 0x8b1ddf84, 0x846b0f79, 0x915f95f2,
        0x466f598f, 0x20b45770, 0x8dd55591, 0xd902df4d,
        0xb90bbdf1, 0xbb8205d0, 0x11b86248, 0x7574b99f,
        0xb77f19b6, 0xf0b9dd09, 0x662d09b1, 0xd4324633,
        0xf85b1f02, 0x09f0bf8d, 0x4b99b025, 0x1d6fff10,
        0x1bb93d1d, 0x0bb5b4df, 0xb186f20f, 0x2868f169,
        0xddb7db83, 0x573906ff, 0xb1f2df9b, 0x4fdd7f52,
        0x50115f01, 0xb70683fb, 0xb002b5d4, 0x0df6d027,
        0x9bf88d27, 0x773f8641, 0xd3604d06, 0x61b806b5,
        0xf0177b28, 0xd0f586f0, 0x006058bb, 0x30dd7d62,
        0x11f69fd7, 0x2338fb63, 0x53d2dd94, 0xd2d21634,
        0xbbdbff56, 0x90bdb6df, 0xfbfd7db1, 0xdf591d76,
        0x6f05f409, 0x4b7d0188, 0x39720b3d, 0x7d927d24,
        0x86f3725f, 0x724d9db9, 0x1bd15bb4, 0xd39fb8fd,
        0xfd545578, 0x08fdb5b5, 0xd83d7dd3, 0x4dbd0fd4,
        0x1f50ff5f, 0xb161f6f8, 0xb28514d9, 0x6d51133d,
        0x6fd5d7f7, 0x56f14fd4, 0x362bbfdf, 0xddd6d837,
        0xd79b3234, 0x92638212, 0x670ffb8f, 0x406000f0,
        0x3b39df37, 0xd3fbf5df, 0xbbd27737, 0x5bd52d1b,
        0x5db0679f, 0x4fb33742, 0xd3822740, 0x99bd9bbf,
        0xd5118f9d, 0xbf0f7315, 0xd62d1d7f, 0xd700d47b,
        0xb78d1b6b, 0x21b19045, 0xb26fb1bf, 0x6b366fb4,
        0x5748bb2f, 0xbd946f79, 0xd6b376d2, 0x6549d2d8,
        0x530ff8ff, 0x468ddf7d, 0xd5730b1d, 0x4dd04dd6,
        0x2939bbdb, 0xb9bb4650, 0xbd9526f8, 0xbf5ff304,
        0xb1fbd5f0, 0x6b2d519b, 0x63ff8df2, 0x9b86ff22,
        0xd089d2b8, 0x43242ff6, 0xb51f03bb, 0x9df2d0b4,
        0x83d061bb, 0x9bf96b4d, 0x8ff51550, 0xbb645bd6,
        0x2826b2f9, 0xb73b3bf1, 0x4bb99586, 0xff5562f9,
        0xd72fffd3, 0xf752f7db, 0x3f046f69, 0x77fb0b59,
        0x80f4b915, 0x87b08601, 0x9b09f6bd, 0x3b3ff593,
        0xf990fd5b, 0x9f34d797, 0x2df0b7d9, 0x022b8b51,
        0x96d5bd3b, 0x017db67d, 0xd1df3fd6, 0x7d7d2d28,
        0x1f9f25df, 0xbdf2b89b, 0x5bd6b472, 0x5b88f54d,
        0xf029bd71, 0xf019b5f6, 0x47b0bdfd, 0xfd93fb9b,
        0xf8d3d48d, 0x283b57dd, 0xf8d56629, 0x79132f28,
        0x785f0191, 0xfd756055, 0xf7960f44, 0xf3d35f8d,
        0x15056dd4, 0x88f46dbb, 0x03b16125, 0x0564f0bd,
        0xd3fb9f15, 0x3d9057b2, 0x97271bfd, 0xb93b072b,
        0x1b3f6d9b, 0x1f6321f5, 0xf59d66fb, 0x26ddf319,
        0x7533d928, 0xb155fdf5, 0x03563482, 0x8bbb3dbb,
        0x28517711, 0xd20bd9f8, 0xbbdd5167, 0xddbd925f,
        0x4df81751, 0x3830dd8f, 0x379d5862, 0x9320f991,
        0xfb7b90d2, 0xfb3f7bdf, 0x5121df64, 0x774fbf32,
        0xb8b6f37f, 0xd3293d46, 0x48df5369, 0x6413f680,
        0xb2bf0810, 0xdd6db224, 0x69852dfd, 0x09072166,
        0xb39b460b, 0x6445d0dd, 0x586ddfdf, 0x1d20d8bf,
        0x5bbff7dd, 0x1b588d40, 0xddd2017f, 0x6bb4f3bb,
        0xddb26b7f, 0x3b59ff45, 0x3f350b44, 0xbdb4ddd5,
        0x72fbdfb8, 0xfb6484bb, 0x8d6612bf, 0xbf3d6f47,
        0xd29bf463, 0x542f5d9f, 0xbfd2771b, 0xf64f6370,
        0x740f0d8d, 0xf75b1357, 0xf8721671, 0xbf537d5d,
        0x4040db08, 0x4fb4f2dd, 0x34d2466b, 0x0115bf84,
        0xf1b00428, 0x95983b1d, 0x06b89fb4, 0xdf6fb048,
        0x6f3f3b82, 0x3520bb82, 0x011b1d4b, 0x277227f8,
        0x611560b1, 0xf7933fdd, 0xbb3b792b, 0x344525bd,
        0xb08839f1, 0x51df794b, 0x2f32d9b7, 0xb01fbbd9,
        0xf01dd87f, 0xbdd7d1f6, 0xdf0111d3, 0xb1f8bbd7,
        0x1b908749, 0xd44fbd9b, 0xd0dbdfdb, 0xd50bdb38,
        0x0339d32b, 0xd6913667, 0x8df9317d, 0xf0b12b4f,
        0xf79f59b7, 0x43f5bb3b, 0xf2d519ff, 0x27d9459d,
        0xbf97222d, 0x15f6fd2b, 0x0f91fd71, 0x9b941525,
        0xfbf59361, 0xdfb69dfb, 0xd2b86459, 0x12bbb8d1,
        0xb6d1075f, 0xf3056b0d, 0x10d25065, 0xdb03b442,
        0xf0fd6f0f, 0x1698db3b, 0x4d98b0bf, 0x3278f964,
        0x9f1f9532, 0xf0d392df, 0xd3b0342b, 0x8971f21f,
        0x1b0b7441, 0x4bb3348d, 0xd5bf7120, 0xd37632d8,
        0xdf359f8d, 0x9b992f2f, 0xf60b6f47, 0x0ff3f11d,
        0xf54ddb54, 0x1fdbd891, 0xdf6279df, 0xdd3f7f6f,
        0x1618b166, 0xfd2d1d05, 0x848fd2d5, 0xf6fb2299,
        0xf523f357, 0xb6327623, 0x93b83531, 0x56dddd02,
        0xbdf08162, 0x5b75fbb5, 0x6f163697, 0x88d273dd,
        0xdf966292, 0x81b949d0, 0x4d50901b, 0x71d65614,
        0xf6d6d7bd, 0x327b140b, 0x45f1d006, 0xd3f27b9b,
        0xd9bb53fd, 0x62b80f00, 0xbb25bff2, 0x35bdd2f6,
        0x71126905, 0xb2040222, 0xb6dbdf7d, 0xdd769d2b,
        0x53113fd0, 0x1640f3d3, 0x38bbbd60, 0x2547bdf0,
        0xbb38209d, 0xf746df76, 0x77bfb1d5, 0x20756060,
        0x85dbff4f, 0x8bf88dd8, 0x7bbbf9b0, 0x4df9bb7f,
        0x1948d25d, 0x02fb8b8d, 0x01d36bf4, 0xd6fbf1f9,
        0x90d4f869, 0xb65ddfb0, 0x3f09252d, 0xd208f69f,
        0xb74f6132, 0xdf77f25b, 0x578fdff3, 0x3bd372f6,
    };
}
