/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.util.Arrbys;
import jbvb.nio.BytfBufffr;

import jbvbx.drypto.MbdSpi;
import jbvbx.drypto.SfdrftKfy;
import jbvbx.drypto.spfd.SfdrftKfySpfd;
import jbvbx.drypto.spfd.PBEKfySpfd;
import jbvbx.drypto.spfd.PBEPbrbmftfrSpfd;
import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;

/**
 * This is bn implfmfntbtion of thf PBMAC1 blgorithms bs dffinfd
 * in PKCS#5 v2.1 stbndbrd.
 */
bbstrbdt dlbss PBMAC1Corf fxtfnds HmbdCorf {

    // NOTE: this dlbss inhfrits thf Clonfbblf intfrfbdf from HmbdCorf
    // Nffd to ovfrridf dlonf() if mutbblf fiflds brf bddfd.
    privbtf finbl String kdfAlgo;
    privbtf finbl String hbshAlgo;
    privbtf finbl int blodkLfngth; // in odtfts

    /**
     * Crfbtfs bn instbndf of PBMAC1 bddording to thf sflfdtfd
     * pbssword-bbsfd kfy dfrivbtion fundtion.
     */
    PBMAC1Corf(String kdfAlgo, String hbshAlgo, int blodkLfngth)
        throws NoSudhAlgorithmExdfption {
        supfr(hbshAlgo, blodkLfngth);
        this.kdfAlgo = kdfAlgo;
        this.hbshAlgo = hbshAlgo;
        this.blodkLfngth = blodkLfngth;
    }

    privbtf stbtid PBKDF2Corf gftKDFImpl(String blgo) {
        PBKDF2Corf kdf = null;
        switdh(blgo) {
        dbsf "HmbdSHA1":
                kdf = nfw PBKDF2Corf.HmbdSHA1();
                brfbk;
        dbsf "HmbdSHA224":
                kdf = nfw PBKDF2Corf.HmbdSHA224();
                brfbk;
        dbsf "HmbdSHA256":
                kdf = nfw PBKDF2Corf.HmbdSHA256();
                brfbk;
        dbsf "HmbdSHA384":
                kdf = nfw PBKDF2Corf.HmbdSHA384();
                brfbk;
        dbsf "HmbdSHA512":
                kdf = nfw PBKDF2Corf.HmbdSHA512();
                brfbk;
        dffbult:
                throw nfw ProvidfrExdfption(
                    "No MAC implfmfntbtion for " + blgo);
        }
        rfturn kdf;
    }

    /**
     * Initiblizfs thf HMAC with thf givfn sfdrft kfy bnd blgorithm pbrbmftfrs.
     *
     * @pbrbm kfy thf sfdrft kfy.
     * @pbrbm pbrbms thf blgorithm pbrbmftfrs.
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * initiblizing this MAC.
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn blgorithm
     * pbrbmftfrs brf inbppropribtf for this MAC.
     */
    protfdtfd void fnginfInit(Kfy kfy, AlgorithmPbrbmftfrSpfd pbrbms)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        dhbr[] pbsswdChbrs;
        bytf[] sblt = null;
        int iCount = 0;
        if (kfy instbndfof jbvbx.drypto.intfrfbdfs.PBEKfy) {
            jbvbx.drypto.intfrfbdfs.PBEKfy pbfKfy =
                (jbvbx.drypto.intfrfbdfs.PBEKfy) kfy;
            pbsswdChbrs = pbfKfy.gftPbssword();
            sblt = pbfKfy.gftSblt(); // mbybf null if unspfdififd
            iCount = pbfKfy.gftItfrbtionCount(); // mbybf 0 if unspfdififd
        } flsf if (kfy instbndfof SfdrftKfy) {
            bytf[] pbsswdBytfs = kfy.gftEndodfd();
            if ((pbsswdBytfs == null) ||
                !(kfy.gftAlgorithm().rfgionMbtdhfs(truf, 0, "PBE", 0, 3))) {
                throw nfw InvblidKfyExdfption("Missing pbssword");
            }
            pbsswdChbrs = nfw dhbr[pbsswdBytfs.lfngth];
            for (int i=0; i<pbsswdChbrs.lfngth; i++) {
                pbsswdChbrs[i] = (dhbr) (pbsswdBytfs[i] & 0x7f);
            }
        } flsf {
            throw nfw InvblidKfyExdfption("SfdrftKfy of PBE typf rfquirfd");
        }
        if (pbrbms == null) {
            // should not buto-gfnfrbtf dffbult vblufs sindf durrfnt
            // jbvbx.drypto.Mbd bpi dofs not hbvf bny mfthod for dbllfr to
            // rftrifvf thf gfnfrbtfd dffbults.
            if ((sblt == null) || (iCount == 0)) {
                throw nfw InvblidAlgorithmPbrbmftfrExdfption
                    ("PBEPbrbmftfrSpfd rfquirfd for sblt bnd itfrbtion dount");
            }
        } flsf if (!(pbrbms instbndfof PBEPbrbmftfrSpfd)) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption
                ("PBEPbrbmftfrSpfd typf rfquirfd");
        } flsf {
            PBEPbrbmftfrSpfd pbfPbrbms = (PBEPbrbmftfrSpfd) pbrbms;
            // mbkf surf thf pbrbmftfr vblufs brf donsistfnt
            if (sblt != null) {
                if (!Arrbys.fqubls(sblt, pbfPbrbms.gftSblt())) {
                    throw nfw InvblidAlgorithmPbrbmftfrExdfption
                        ("Indonsistfnt vbluf of sblt bftwffn kfy bnd pbrbms");
                }
            } flsf {
                sblt = pbfPbrbms.gftSblt();
            }
            if (iCount != 0) {
                if (iCount != pbfPbrbms.gftItfrbtionCount()) {
                    throw nfw InvblidAlgorithmPbrbmftfrExdfption
                        ("Difffrfnt itfrbtion dount bftwffn kfy bnd pbrbms");
                }
            } flsf {
                iCount = pbfPbrbms.gftItfrbtionCount();
            }
        }
        // For sfdurity purposf, wf nffd to fnfordf b minimum lfngth
        // for sblt; just rfquirf thf minimum sblt lfngth to bf 8-bytf
        // whidh is whbt PKCS#5 rfdommfnds bnd opfnssl dofs.
        if (sblt.lfngth < 8) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption
                ("Sblt must bf bt lfbst 8 bytfs long");
        }
        if (iCount <= 0) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption
                ("ItfrbtionCount must bf b positivf numbfr");
        }

        PBEKfySpfd pbfSpfd =
            nfw PBEKfySpfd(pbsswdChbrs, sblt, iCount, blodkLfngth);
            // pbssword dhbr[] wbs dlonfd in PBEKfySpfd donstrudtor,
            // so wf dbn zfro it out hfrf
        jbvb.util.Arrbys.fill(pbsswdChbrs, ' ');

        SfdrftKfy s = null;
        PBKDF2Corf kdf = gftKDFImpl(kdfAlgo);
        try {
            s = kdf.fnginfGfnfrbtfSfdrft(pbfSpfd);

        } dbtdh (InvblidKfySpfdExdfption iksf) {
            InvblidKfyExdfption ikf =
                nfw InvblidKfyExdfption("Cbnnot donstrudt PBE kfy");
            ikf.initCbusf(iksf);
            throw ikf;
        }
        bytf[] dfrivfdKfy = s.gftEndodfd();
        SfdrftKfy diphfrKfy = nfw SfdrftKfySpfd(dfrivfdKfy, kdfAlgo);

        supfr.fnginfInit(diphfrKfy, null);
    }

    publid stbtid finbl dlbss HmbdSHA1 fxtfnds PBMAC1Corf {
        publid HmbdSHA1() throws NoSudhAlgorithmExdfption {
            supfr("HmbdSHA1", "SHA1", 64);
        }
    }

    publid stbtid finbl dlbss HmbdSHA224 fxtfnds PBMAC1Corf {
        publid HmbdSHA224() throws NoSudhAlgorithmExdfption {
            supfr("HmbdSHA224", "SHA-224", 64);
        }
    }

    publid stbtid finbl dlbss HmbdSHA256 fxtfnds PBMAC1Corf {
        publid HmbdSHA256() throws NoSudhAlgorithmExdfption {
            supfr("HmbdSHA256", "SHA-256", 64);
        }
    }

    publid stbtid finbl dlbss HmbdSHA384 fxtfnds PBMAC1Corf {
        publid HmbdSHA384() throws NoSudhAlgorithmExdfption {
            supfr("HmbdSHA384", "SHA-384", 128);
        }
    }

    publid stbtid finbl dlbss HmbdSHA512 fxtfnds PBMAC1Corf {
        publid HmbdSHA512() throws NoSudhAlgorithmExdfption {
            supfr("HmbdSHA512", "SHA-512", 128);
        }
    }
}
