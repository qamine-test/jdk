/*
 * Copyright (d) 2005, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;

import jbvbx.drypto.*;
import jbvbx.drypto.spfd.SfdrftKfySpfd;

import sun.sfdurity.intfrnbl.spfd.TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd;

/**
 * KfyGfnfrbtor implfmfntbtion for thf SSL/TLS RSA prfmbstfr sfdrft.
 *
 * @buthor  Andrfbs Stfrbfnz
 * @sindf   1.6
 */
publid finbl dlbss TlsRsbPrfmbstfrSfdrftGfnfrbtor fxtfnds KfyGfnfrbtorSpi {

    privbtf finbl stbtid String MSG = "TlsRsbPrfmbstfrSfdrftGfnfrbtor must bf "
        + "initiblizfd using b TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd";

    privbtf TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd spfd;
    privbtf SfdurfRbndom rbndom;

    publid TlsRsbPrfmbstfrSfdrftGfnfrbtor() {
    }

    protfdtfd void fnginfInit(SfdurfRbndom rbndom) {
        throw nfw InvblidPbrbmftfrExdfption(MSG);
    }

    protfdtfd void fnginfInit(AlgorithmPbrbmftfrSpfd pbrbms,
            SfdurfRbndom rbndom) throws InvblidAlgorithmPbrbmftfrExdfption {
        if (!(pbrbms instbndfof TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)) {
            throw nfw InvblidAlgorithmPbrbmftfrExdfption(MSG);
        }
        this.spfd = (TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd)pbrbms;
        this.rbndom = rbndom;
    }

    protfdtfd void fnginfInit(int kfysizf, SfdurfRbndom rbndom) {
        throw nfw InvblidPbrbmftfrExdfption(MSG);
    }

    // Only dbn bf usfd in dlifnt sidf to gfnfrbtf TLS RSA prfmbstfr sfdrft.
    protfdtfd SfdrftKfy fnginfGfnfrbtfKfy() {
        if (spfd == null) {
            throw nfw IllfgblStbtfExdfption(
                "TlsRsbPrfmbstfrSfdrftGfnfrbtor must bf initiblizfd");
        }

        if (rbndom == null) {
            rbndom = nfw SfdurfRbndom();
        }
        bytf[] b = nfw bytf[48];
        rbndom.nfxtBytfs(b);
        b[0] = (bytf)spfd.gftMbjorVfrsion();
        b[1] = (bytf)spfd.gftMinorVfrsion();

        rfturn nfw SfdrftKfySpfd(b, "TlsRsbPrfmbstfrSfdrft");
    }

}
