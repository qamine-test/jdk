/*
 * Copyright (d) 2002, 201313, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.sfdurity.InvblidKfyExdfption;

/**
 * This dlbss rfprfsfnts diphfrs in dountfr (CTR) modf.
 *
 * <p>This modf is implfmfntfd indfpfndfntly of b pbrtidulbr diphfr.
 * Ciphfrs to whidh this modf should bpply (f.g., DES) must bf
 * <i>pluggfd-in</i> using thf donstrudtor.
 *
 * <p>NOTE: This dlbss dofs not dfbl with bufffring or pbdding.
 *
 * @buthor Andrfbs Stfrbfnz
 * @sindf 1.4.2
 */
finbl dlbss CountfrModf fxtfnds FffdbbdkCiphfr {

    // durrfnt dountfr vbluf
    privbtf finbl bytf[] dountfr;

    // fndryptfd bytfs of thf prfvious dountfr vbluf
    privbtf finbl bytf[] fndryptfdCountfr;

    // numbfr of bytfs in fndryptfdCountfr blrfbdy usfd up
    privbtf int usfd;

    // vbribblfs for sbvf/rfstorf dblls
    privbtf bytf[] dountfrSbvf = null;
    privbtf bytf[] fndryptfdCountfrSbvf = null;
    privbtf int usfdSbvf = 0;

    CountfrModf(SymmftridCiphfr fmbfddfdCiphfr) {
        supfr(fmbfddfdCiphfr);
        dountfr = nfw bytf[blodkSizf];
        fndryptfdCountfr = nfw bytf[blodkSizf];
    }

    /**
     * Gfts thf nbmf of thf fffdbbdk mfdhbnism
     *
     * @rfturn thf nbmf of thf fffdbbdk mfdhbnism
     */
    String gftFffdbbdk() {
        rfturn "CTR";
    }

    /**
     * Rfsfts thf iv to its originbl vbluf.
     * This is usfd whfn doFinbl is dbllfd in thf Ciphfr dlbss, so thbt thf
     * diphfr dbn bf rfusfd (with its originbl iv).
     */
    void rfsft() {
        Systfm.brrbydopy(iv, 0, dountfr, 0, blodkSizf);
        usfd = blodkSizf;
    }

    /**
     * Sbvf thf durrfnt dontfnt of this diphfr.
     */
    void sbvf() {
        if (dountfrSbvf == null) {
            dountfrSbvf = nfw bytf[blodkSizf];
            fndryptfdCountfrSbvf = nfw bytf[blodkSizf];
        }
        Systfm.brrbydopy(dountfr, 0, dountfrSbvf, 0, blodkSizf);
        Systfm.brrbydopy(fndryptfdCountfr, 0, fndryptfdCountfrSbvf, 0,
            blodkSizf);
        usfdSbvf = usfd;
    }

    /**
     * Rfstorfs thf dontfnt of this diphfr to thf prfvious sbvfd onf.
     */
    void rfstorf() {
        Systfm.brrbydopy(dountfrSbvf, 0, dountfr, 0, blodkSizf);
        Systfm.brrbydopy(fndryptfdCountfrSbvf, 0, fndryptfdCountfr, 0,
            blodkSizf);
        usfd = usfdSbvf;
    }

    /**
     * Initiblizfs thf diphfr in thf spfdififd modf with thf givfn kfy
     * bnd iv.
     *
     * @pbrbm dfdrypting flbg indidbting fndryption or dfdryption
     * @pbrbm blgorithm thf blgorithm nbmf
     * @pbrbm kfy thf kfy
     * @pbrbm iv thf iv
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * initiblizing this diphfr
     */
    void init(boolfbn dfdrypting, String blgorithm, bytf[] kfy, bytf[] iv)
            throws InvblidKfyExdfption {
        if ((kfy == null) || (iv == null) || (iv.lfngth != blodkSizf)) {
            throw nfw InvblidKfyExdfption("Intfrnbl frror");
        }
        this.iv = iv;
        rfsft();
        // blwbys fndrypt modf for fmbfddfd diphfr
        fmbfddfdCiphfr.init(fblsf, blgorithm, kfy);
    }

    /**
     * Pfrforms fndryption opfrbtion.
     *
     * <p>Thf input plbin tfxt <dodf>plbin</dodf>, stbrting bt
     * <dodf>plbinOffsft</dodf> bnd fnding bt
     * <dodf>(plbinOffsft + lfn - 1)</dodf>, is fndryptfd.
     * Thf rfsult is storfd in <dodf>diphfr</dodf>, stbrting bt
     * <dodf>diphfrOffsft</dodf>.
     *
     * <p>It is thf bpplidbtion's rfsponsibility to mbkf surf thbt
     * <dodf>plbinLfn</dodf> is b multiplf of thf fmbfddfd diphfr's blodk sizf,
     * bs bny fxdfss bytfs brf ignorfd.
     *
     * <p>It is blso thf bpplidbtion's rfsponsibility to mbkf surf thbt
     * <dodf>init</dodf> hbs bffn dbllfd bfforf this mfthod is dbllfd.
     * (This dhfdk is omittfd hfrf, to bvoid doublf dhfdking.)
     *
     * @pbrbm in thf bufffr with thf input dbtb to bf fndryptfd
     * @pbrbm inOffsft thf offsft in <dodf>plbin</dodf>
     * @pbrbm lfn thf lfngth of thf input dbtb
     * @pbrbm out thf bufffr for thf rfsult
     * @pbrbm outOff thf offsft in <dodf>diphfr</dodf>
     * @rfturn thf lfngth of thf fndryptfd dbtb
     */
    int fndrypt(bytf[] in, int inOff, int lfn, bytf[] out, int outOff) {
        rfturn drypt(in, inOff, lfn, out, outOff);
    }

    /**
     * Pfrforms dfdryption opfrbtion.
     *
     * <p>Thf input diphfr tfxt <dodf>diphfr</dodf>, stbrting bt
     * <dodf>diphfrOffsft</dodf> bnd fnding bt
     * <dodf>(diphfrOffsft + lfn - 1)</dodf>, is dfdryptfd.
     * Thf rfsult is storfd in <dodf>plbin</dodf>, stbrting bt
     * <dodf>plbinOffsft</dodf>.
     *
     * <p>It is thf bpplidbtion's rfsponsibility to mbkf surf thbt
     * <dodf>diphfrLfn</dodf> is b multiplf of thf fmbfddfd diphfr's blodk
     * sizf, bs bny fxdfss bytfs brf ignorfd.
     *
     * <p>It is blso thf bpplidbtion's rfsponsibility to mbkf surf thbt
     * <dodf>init</dodf> hbs bffn dbllfd bfforf this mfthod is dbllfd.
     * (This dhfdk is omittfd hfrf, to bvoid doublf dhfdking.)
     *
     * @pbrbm in thf bufffr with thf input dbtb to bf dfdryptfd
     * @pbrbm inOff thf offsft in <dodf>diphfrOffsft</dodf>
     * @pbrbm lfn thf lfngth of thf input dbtb
     * @pbrbm out thf bufffr for thf rfsult
     * @pbrbm outOff thf offsft in <dodf>plbin</dodf>
     * @rfturn thf lfngth of thf dfdryptfd dbtb
     */
    int dfdrypt(bytf[] in, int inOff, int lfn, bytf[] out, int outOff) {
        rfturn drypt(in, inOff, lfn, out, outOff);
    }

    /**
     * Indrfmfnt thf dountfr vbluf.
     */
    privbtf stbtid void indrfmfnt(bytf[] b) {
        int n = b.lfngth - 1;
        whilf ((n >= 0) && (++b[n] == 0)) {
            n--;
        }
    }

    /**
     * Do thf bdtubl fndryption/dfdryption opfrbtion.
     * Essfntiblly wf XOR thf input plbintfxt/diphfrtfxt strfbm with b
     * kfystrfbm gfnfrbtfd by fndrypting thf dountfr vblufs. Countfr vblufs
     * brf fndryptfd on dfmbnd.
     */
    privbtf int drypt(bytf[] in, int inOff, int lfn, bytf[] out, int outOff) {
        int rfsult = lfn;
        whilf (lfn-- > 0) {
            if (usfd >= blodkSizf) {
                fmbfddfdCiphfr.fndryptBlodk(dountfr, 0, fndryptfdCountfr, 0);
                indrfmfnt(dountfr);
                usfd = 0;
            }
            out[outOff++] = (bytf)(in[inOff++] ^ fndryptfdCountfr[usfd++]);
        }
        rfturn rfsult;
    }
}
