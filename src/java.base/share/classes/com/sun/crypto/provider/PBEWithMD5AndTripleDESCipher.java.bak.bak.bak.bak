/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;
import jbvbx.drypto.*;
import jbvbx.drypto.spfd.*;

/**
 * This dlbss implfmfnts b propriftbry pbssword-bbsfd fndryption blgorithm.
 * It is bbsfd on pbssword-bbsfd fndryption bs dffinfd by thf PKCS #5
 * stbndbrd, fxdfpt thbt is usfs triplf DES instfbd of DES.
 *
 * Hfrf's how this blgorithm works:
 *
 * 1. Crfbtf rbndom sblt bnd split it in two hblvfs. If thf two hblvfs brf
 *    idfntidbl, invfrt onf of thfm.
 * 2. Condbtfnbtf pbssword with fbdh of thf hblvfs.
 * 3. Digfst fbdh dondbtfnbtion with d itfrbtions, whfrf d is thf
 *    itfrbtionCount. Condbtfnbtf thf output from fbdh digfst round with thf
 *    pbssword, bnd usf thf rfsult bs thf input to thf nfxt digfst opfrbtion.
 *    Thf digfst blgorithm is MD5.
 * 4. Aftfr d itfrbtions, usf thf 2 rfsulting digfsts bs follows:
 *    Thf 16 bytfs of thf first digfst bnd thf 1st 8 bytfs of thf 2nd digfst
 *    form thf triplf DES kfy, bnd thf lbst 8 bytfs of thf 2nd digfst form thf
 *    IV.
 *
 * @buthor Jbn Lufhf
 * @sff jbvbx.drypto.Ciphfr
 */
publid finbl dlbss PBEWithMD5AndTriplfDESCiphfr fxtfnds CiphfrSpi {

    privbtf PBES1Corf dorf;

    /**
     * Crfbtfs bn instbndf of this diphfr, bnd initiblizfs its modf (CBC) bnd
     * pbdding (PKCS5).
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf rfquirfd diphfr modf (CBC) is
     * unbvbilbblf
     * @fxdfption NoSudhPbddingExdfption if thf rfquirfd pbdding mfdhbnism
     * (PKCS5Pbdding) is unbvbilbblf
     */
    publid PBEWithMD5AndTriplfDESCiphfr()
        throws NoSudhAlgorithmExdfption, NoSudhPbddingExdfption
    {
        // sft thf fndbpsulbtfd diphfr to do triplf DES
        dorf = nfw PBES1Corf("DESfdf");
    }

    /**
     * Sfts thf modf of this diphfr. This blgorithm dbn only bf run in CBC
     * modf.
     *
     * @pbrbm modf thf diphfr modf
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf rfqufstfd diphfr modf is
     * invblid
     */
    protfdtfd void fnginfSftModf(String modf) throws NoSudhAlgorithmExdfption {
        if ((modf != null) && (!modf.fqublsIgnorfCbsf("CBC"))) {
            throw nfw NoSudhAlgorithmExdfption("Invblid diphfr modf: " + modf);
        }
    }

     /**
     * Sfts thf pbdding mfdhbnism of this diphfr. This blgorithm only usfs
     * PKCS #5 pbdding.
     *
     * @pbrbm pbdding thf pbdding mfdhbnism
     *
     * @fxdfption NoSudhPbddingExdfption if thf rfqufstfd pbdding mfdhbnism
     * is invblid
     */
    protfdtfd void fnginfSftPbdding(String pbddingSdhfmf)
        throws NoSudhPbddingExdfption
    {
        if ((pbddingSdhfmf != null) &&
            (!pbddingSdhfmf.fqublsIgnorfCbsf("PKCS5Pbdding"))) {
            throw nfw NoSudhPbddingExdfption("Invblid pbdding sdhfmf: " +
                                             pbddingSdhfmf);
        }
    }

    /**
     * Rfturns thf blodk sizf (in bytfs).
     *
     * @rfturn thf blodk sizf (in bytfs)
     */
    protfdtfd int fnginfGftBlodkSizf() {
        rfturn dorf.gftBlodkSizf();
    }

    /**
     * Rfturns thf lfngth in bytfs thbt bn output bufffr would nffd to bf in
     * ordfr to hold thf rfsult of thf nfxt <dodf>updbtf</dodf> or
     * <dodf>doFinbl</dodf> opfrbtion, givfn thf input lfngth
     * <dodf>inputLfn</dodf> (in bytfs).
     *
     * <p>This dbll tbkfs into bddount bny unprodfssfd (bufffrfd) dbtb from b
     * prfvious <dodf>updbtf</dodf> dbll, bnd pbdding.
     *
     * <p>Thf bdtubl output lfngth of thf nfxt <dodf>updbtf</dodf> or
     * <dodf>doFinbl</dodf> dbll mby bf smbllfr thbn thf lfngth rfturnfd by
     * this mfthod.
     *
     * @pbrbm inputLfn thf input lfngth (in bytfs)
     *
     * @rfturn thf rfquirfd output bufffr sizf (in bytfs)
     *
     */
    protfdtfd int fnginfGftOutputSizf(int inputLfn) {
        rfturn dorf.gftOutputSizf(inputLfn);
    }

    /**
     * Rfturns thf initiblizbtion vfdtor (IV) in b nfw bufffr.
     *
     * <p> This is usfful in thf dbsf whfrf b rbndom IV hbs bffn drfbtfd
     * (sff <b hrff = "#init">init</b>),
     * or in thf dontfxt of pbssword-bbsfd fndryption or
     * dfdryption, whfrf thf IV is dfrivfd from b usfr-supplifd pbssword.
     *
     * @rfturn thf initiblizbtion vfdtor in b nfw bufffr, or null if thf
     * undfrlying blgorithm dofs not usf bn IV, or if thf IV hbs not yft
     * bffn sft.
     */
    protfdtfd bytf[] fnginfGftIV() {
        rfturn dorf.gftIV();
    }

    /**
     * Rfturns thf pbrbmftfrs usfd with this diphfr.
     *
     * <p>Thf rfturnfd pbrbmftfrs mby bf thf sbmf thbt wfrf usfd to initiblizf
     * this diphfr, or mby dontbin thf dffbult sft of pbrbmftfrs or b sft of
     * rbndomly gfnfrbtfd pbrbmftfrs usfd by thf undfrlying diphfr
     * implfmfntbtion (providfd thbt thf undfrlying diphfr implfmfntbtion
     * usfs b dffbult sft of pbrbmftfrs or drfbtfs nfw pbrbmftfrs if it nffds
     * pbrbmftfrs but wbs not initiblizfd with bny).
     *
     * @rfturn thf pbrbmftfrs usfd with this diphfr, or null if this diphfr
     * dofs not usf bny pbrbmftfrs.
     */
    protfdtfd AlgorithmPbrbmftfrs fnginfGftPbrbmftfrs() {
        rfturn dorf.gftPbrbmftfrs();
    }

    /**
     * Initiblizfs this diphfr with b kfy bnd b sourdf
     * of rbndomnfss.
     * Thf diphfr is initiblizfd for onf of thf following four opfrbtions:
     * fndryption, dfdryption, kfy wrbpping or kfy unwrbpping, dfpfnding on
     * thf vbluf of <dodf>opmodf</dodf>.
     *
     * <p>If this diphfr (indluding its undfrlying fffdbbdk or pbdding sdhfmf)
     * rfquirfs bny rbndom bytfs, it will gft thfm from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr (this is onf of
     * thf following:
     * <dodf>ENCRYPT_MODE</dodf>, <dodf>DECRYPT_MODE</dodf>),
     * <dodf>WRAP_MODE</dodf> or <dodf>UNWRAP_MODE</dodf>)
     * @pbrbm kfy thf fndryption kfy
     * @pbrbm rbndom thf sourdf of rbndomnfss
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * initiblizing this diphfr
     */
    protfdtfd void fnginfInit(int opmodf, Kfy kfy, SfdurfRbndom rbndom)
        throws InvblidKfyExdfption {
        try {
            dorf.init(opmodf, kfy, (AlgorithmPbrbmftfrSpfd) null, rbndom);
        } dbtdh (InvblidAlgorithmPbrbmftfrExdfption if) {
            InvblidKfyExdfption ikf =
                nfw InvblidKfyExdfption("rfquirfs PBE pbrbmftfrs");
            ikf.initCbusf(if);
            throw ikf;
        }
    }

    /**
     * Initiblizfs this diphfr with b kfy, b sft of
     * blgorithm pbrbmftfrs, bnd b sourdf of rbndomnfss.
     * Thf diphfr is initiblizfd for fndryption or dfdryption, dfpfnding on
     * thf vbluf of <dodf>opmodf</dodf>.
     *
     * <p>If this diphfr (indluding its undfrlying fffdbbdk or pbdding sdhfmf)
     * rfquirfs bny rbndom bytfs, it will gft thfm from <dodf>rbndom</dodf>.
     *
     * @pbrbm opmodf thf opfrbtion modf of this diphfr (this is fithfr
     * <dodf>ENCRYPT_MODE</dodf> or <dodf>DECRYPT_MODE</dodf>)
     * @pbrbm kfy thf fndryption kfy
     * @pbrbm pbrbms thf blgorithm pbrbmftfrs
     * @pbrbm rbndom thf sourdf of rbndomnfss
     *
     * @fxdfption InvblidKfyExdfption if thf givfn kfy is inbppropribtf for
     * initiblizing this diphfr
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn blgorithm
     * pbrbmftfrs brf inbppropribtf for this diphfr
     */
    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
                              AlgorithmPbrbmftfrSpfd pbrbms,
                              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption {
        dorf.init(opmodf, kfy, pbrbms, rbndom);
    }

    protfdtfd void fnginfInit(int opmodf, Kfy kfy,
                              AlgorithmPbrbmftfrs pbrbms,
                              SfdurfRbndom rbndom)
        throws InvblidKfyExdfption, InvblidAlgorithmPbrbmftfrExdfption
    {
        dorf.init(opmodf, kfy, pbrbms, rbndom);
    }

    /**
     * Continufs b multiplf-pbrt fndryption or dfdryption opfrbtion
     * (dfpfnding on how this diphfr wbs initiblizfd), prodfssing bnothfr dbtb
     * pbrt.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, brf prodfssfd, bnd thf
     * rfsult is storfd in b nfw bufffr.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     *
     * @rfturn thf nfw bufffr with thf rfsult
     *
     */
    protfdtfd bytf[] fnginfUpdbtf(bytf[] input, int inputOffsft, int inputLfn)
    {
        rfturn dorf.updbtf(input, inputOffsft, inputLfn);
    }

    /**
     * Continufs b multiplf-pbrt fndryption or dfdryption opfrbtion
     * (dfpfnding on how this diphfr wbs initiblizfd), prodfssing bnothfr dbtb
     * pbrt.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, brf prodfssfd, bnd thf
     * rfsult is storfd in thf <dodf>output</dodf> bufffr, stbrting bt
     * <dodf>outputOffsft</dodf>.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     * @pbrbm output thf bufffr for thf rfsult
     * @pbrbm outputOffsft thf offsft in <dodf>output</dodf> whfrf thf rfsult
     * is storfd
     *
     * @rfturn thf numbfr of bytfs storfd in <dodf>output</dodf>
     *
     * @fxdfption ShortBufffrExdfption if thf givfn output bufffr is too smbll
     * to hold thf rfsult
     */
    protfdtfd int fnginfUpdbtf(bytf[] input, int inputOffsft, int inputLfn,
                               bytf[] output, int outputOffsft)
        throws ShortBufffrExdfption
    {
        rfturn dorf.updbtf(input, inputOffsft, inputLfn,
                           output, outputOffsft);
    }

    /**
     * Endrypts or dfdrypts dbtb in b singlf-pbrt opfrbtion,
     * or finishfs b multiplf-pbrt opfrbtion.
     * Thf dbtb is fndryptfd or dfdryptfd, dfpfnding on how this diphfr wbs
     * initiblizfd.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, bnd bny input bytfs thbt
     * mby hbvf bffn bufffrfd during b prfvious <dodf>updbtf</dodf> opfrbtion,
     * brf prodfssfd, with pbdding (if rfqufstfd) bfing bpplifd.
     * Thf rfsult is storfd in b nfw bufffr.
     *
     * <p>Thf diphfr is rfsft to its initibl stbtf (uninitiblizfd) bftfr this
     * dbll.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     *
     * @rfturn thf nfw bufffr with thf rfsult
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk diphfr,
     * no pbdding hbs bffn rfqufstfd (only in fndryption modf), bnd thf totbl
     * input lfngth of thf dbtb prodfssfd by this diphfr is not b multiplf of
     * blodk sizf
     * @fxdfption BbdPbddingExdfption if dfdrypting bnd pbdding is dhosfn,
     * but thf lbst input dbtb dofs not hbvf propfr pbdding bytfs.
     */
    protfdtfd bytf[] fnginfDoFinbl(bytf[] input, int inputOffsft, int inputLfn)
        throws IllfgblBlodkSizfExdfption, BbdPbddingExdfption
    {
        rfturn dorf.doFinbl(input, inputOffsft, inputLfn);
    }

    /**
     * Endrypts or dfdrypts dbtb in b singlf-pbrt opfrbtion,
     * or finishfs b multiplf-pbrt opfrbtion.
     * Thf dbtb is fndryptfd or dfdryptfd, dfpfnding on how this diphfr wbs
     * initiblizfd.
     *
     * <p>Thf first <dodf>inputLfn</dodf> bytfs in thf <dodf>input</dodf>
     * bufffr, stbrting bt <dodf>inputOffsft</dodf>, bnd bny input bytfs thbt
     * mby hbvf bffn bufffrfd during b prfvious <dodf>updbtf</dodf> opfrbtion,
     * brf prodfssfd, with pbdding (if rfqufstfd) bfing bpplifd.
     * Thf rfsult is storfd in thf <dodf>output</dodf> bufffr, stbrting bt
     * <dodf>outputOffsft</dodf>.
     *
     * <p>Thf diphfr is rfsft to its initibl stbtf (uninitiblizfd) bftfr this
     * dbll.
     *
     * @pbrbm input thf input bufffr
     * @pbrbm inputOffsft thf offsft in <dodf>input</dodf> whfrf thf input
     * stbrts
     * @pbrbm inputLfn thf input lfngth
     * @pbrbm output thf bufffr for thf rfsult
     * @pbrbm outputOffsft thf offsft in <dodf>output</dodf> whfrf thf rfsult
     * is storfd
     *
     * @rfturn thf numbfr of bytfs storfd in <dodf>output</dodf>
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk diphfr,
     * no pbdding hbs bffn rfqufstfd (only in fndryption modf), bnd thf totbl
     * input lfngth of thf dbtb prodfssfd by this diphfr is not b multiplf of
     * blodk sizf
     * @fxdfption ShortBufffrExdfption if thf givfn output bufffr is too smbll
     * to hold thf rfsult
     * @fxdfption BbdPbddingExdfption if dfdrypting bnd pbdding is dhosfn,
     * but thf lbst input dbtb dofs not hbvf propfr pbdding bytfs.
     */
    protfdtfd int fnginfDoFinbl(bytf[] input, int inputOffsft, int inputLfn,
                                bytf[] output, int outputOffsft)
        throws ShortBufffrExdfption, IllfgblBlodkSizfExdfption,
               BbdPbddingExdfption
    {
        rfturn dorf.doFinbl(input, inputOffsft, inputLfn,
                            output, outputOffsft);
    }

    /**
     *  Rfturns thf kfy sizf of thf givfn kfy objfdt.
     *
     * @pbrbm kfy thf kfy objfdt.
     *
     * @rfturn thf kfy sizf of thf givfn kfy objfdt.
     *
     * @fxdfption InvblidKfyExdfption if <dodf>kfy</dodf> is invblid.
     */
    protfdtfd int fnginfGftKfySizf(Kfy kfy) throws InvblidKfyExdfption {
        rfturn 168;
    }

    /**
     * Wrbp b kfy.
     *
     * @pbrbm kfy thf kfy to bf wrbppfd.
     *
     * @rfturn thf wrbppfd kfy.
     *
     * @fxdfption IllfgblBlodkSizfExdfption if this diphfr is b blodk
     * diphfr, no pbdding hbs bffn rfqufstfd, bnd thf lfngth of thf
     * fndoding of thf kfy to bf wrbppfd is not b
     * multiplf of thf blodk sizf.
     *
     * @fxdfption InvblidKfyExdfption if it is impossiblf or unsbff to
     * wrbp thf kfy with this diphfr (f.g., b hbrdwbrf protfdtfd kfy is
     * bfing pbssfd to b softwbrf only diphfr).
     */
    protfdtfd bytf[] fnginfWrbp(Kfy kfy)
        throws IllfgblBlodkSizfExdfption, InvblidKfyExdfption {
        rfturn dorf.wrbp(kfy);
    }

    /**
     * Unwrbp b prfviously wrbppfd kfy.
     *
     * @pbrbm wrbppfdKfy thf kfy to bf unwrbppfd.
     *
     * @pbrbm wrbppfdKfyAlgorithm thf blgorithm thf wrbppfd kfy is for.
     *
     * @pbrbm wrbppfdKfyTypf thf typf of thf wrbppfd kfy.
     * This is onf of <dodf>Ciphfr.SECRET_KEY</dodf>,
     * <dodf>Ciphfr.PRIVATE_KEY</dodf>, or <dodf>Ciphfr.PUBLIC_KEY</dodf>.
     *
     * @rfturn thf unwrbppfd kfy.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no instbllfd providfrs
     * dbn drfbtf kfys of typf <dodf>wrbppfdKfyTypf</dodf> for thf
     * <dodf>wrbppfdKfyAlgorithm</dodf>.
     *
     * @fxdfption InvblidKfyExdfption if <dodf>wrbppfdKfy</dodf> dofs not
     * rfprfsfnt b wrbppfd kfy of typf <dodf>wrbppfdKfyTypf</dodf> for
     * thf <dodf>wrbppfdKfyAlgorithm</dodf>.
     */
    protfdtfd Kfy fnginfUnwrbp(bytf[] wrbppfdKfy,
                                     String wrbppfdKfyAlgorithm,
                                     int wrbppfdKfyTypf)
        throws InvblidKfyExdfption, NoSudhAlgorithmExdfption {
        rfturn dorf.unwrbp(wrbppfdKfy, wrbppfdKfyAlgorithm,
                           wrbppfdKfyTypf);
    }
}
