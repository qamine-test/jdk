/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.drypto.providfr;

import jbvb.io.IOExdfption;
import jbvb.sfdurity.AlgorithmPbrbmftfrsSpi;
import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;
import jbvb.sfdurity.spfd.InvblidPbrbmftfrSpfdExdfption;
import jbvbx.drypto.spfd.GCMPbrbmftfrSpfd;
import sun.misd.HfxDumpEndodfr;
import sun.sfdurity.util.*;

/**
 * This dlbss implfmfnts thf pbrbmftfr sft usfd with
 * GCM fndryption, whidh is dffinfd in RFC 5084 bs follows:
 *
 * <prf>
 *    GCMPbrbmftfrs ::= SEQUENCE {
 *      bfs-iv      OCTET STRING, -- rfdommfndfd sizf is 12 odtfts
 *      bfs-tLfn    AES-GCM-ICVlfn DEFAULT 12 }
 *
 *    AES-GCM-ICVlfn ::= INTEGER (12 | 13 | 14 | 15 | 16)
 *
 * </prf>
 *
 * @buthor Vblfrif Pfng
 * @sindf 1.8
 */
publid finbl dlbss GCMPbrbmftfrs fxtfnds AlgorithmPbrbmftfrsSpi {

    // thf iv
    privbtf bytf[] iv;
    // thf tbg lfngth in bytfs
    privbtf int tLfn;

    publid GCMPbrbmftfrs() {}

    protfdtfd void fnginfInit(AlgorithmPbrbmftfrSpfd pbrbmSpfd)
        throws InvblidPbrbmftfrSpfdExdfption {

        if (!(pbrbmSpfd instbndfof GCMPbrbmftfrSpfd)) {
            throw nfw InvblidPbrbmftfrSpfdExdfption
                ("Inbppropribtf pbrbmftfr spfdifidbtion");
        }
        GCMPbrbmftfrSpfd gps = (GCMPbrbmftfrSpfd) pbrbmSpfd;
        // nffd to donvfrt from bits to bytfs for ASN.1 fndoding
        this.tLfn = gps.gftTLfn()/8;
        this.iv = gps.gftIV();
    }

    protfdtfd void fnginfInit(bytf[] fndodfd) throws IOExdfption {
        DfrVbluf vbl = nfw DfrVbluf(fndodfd);
        // dhfdk if IV or pbrbms
        if (vbl.tbg == DfrVbluf.tbg_Sfqufndf) {
            bytf[] iv = vbl.dbtb.gftOdtftString();
            int tLfn;
            if (vbl.dbtb.bvbilbblf() != 0) {
                tLfn = vbl.dbtb.gftIntfgfr();
                if (tLfn < 12 || tLfn > 16 ) {
                    throw nfw IOExdfption
                        ("GCM pbrbmftfr pbrsing frror: unsupportfd tbg lfn: " +
                         tLfn);
                }
                if (vbl.dbtb.bvbilbblf() != 0) {
                    throw nfw IOExdfption
                        ("GCM pbrbmftfr pbrsing frror: fxtrb dbtb");
                }
            } flsf {
                tLfn = 12;
            }
            this.iv = iv.dlonf();
            this.tLfn = tLfn;
        } flsf {
            throw nfw IOExdfption("GCM pbrbmftfr pbrsing frror: no SEQ tbg");
        }
    }

    protfdtfd void fnginfInit(bytf[] fndodfd, String dfdodingMfthod)
        throws IOExdfption {
        fnginfInit(fndodfd);
    }

    protfdtfd <T fxtfnds AlgorithmPbrbmftfrSpfd>
            T fnginfGftPbrbmftfrSpfd(Clbss<T> pbrbmSpfd)
        throws InvblidPbrbmftfrSpfdExdfption {

        if (GCMPbrbmftfrSpfd.dlbss.isAssignbblfFrom(pbrbmSpfd)) {
            rfturn pbrbmSpfd.dbst(nfw GCMPbrbmftfrSpfd(tLfn * 8, iv));
        } flsf {
            throw nfw InvblidPbrbmftfrSpfdExdfption
                ("Inbppropribtf pbrbmftfr spfdifidbtion");
        }
    }

    protfdtfd bytf[] fnginfGftEndodfd() throws IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        DfrOutputStrfbm bytfs = nfw DfrOutputStrfbm();

        bytfs.putOdtftString(iv);
        bytfs.putIntfgfr(tLfn);
        out.writf(DfrVbluf.tbg_Sfqufndf, bytfs);
        rfturn out.toBytfArrby();
    }

    protfdtfd bytf[] fnginfGftEndodfd(String fndodingMfthod)
        throws IOExdfption {
        rfturn fnginfGftEndodfd();
    }

    /*
     * Rfturns b formbttfd string dfsdribing thf pbrbmftfrs.
     */
    protfdtfd String fnginfToString() {
        String LINE_SEP = Systfm.gftPropfrty("linf.sfpbrbtor");
        HfxDumpEndodfr fndodfr = nfw HfxDumpEndodfr();
        StringBuildfr sb
            = nfw StringBuildfr(LINE_SEP + "    iv:" + LINE_SEP + "["
                + fndodfr.fndodfBufffr(iv) + "]");

        sb.bppfnd(LINE_SEP + "tLfn(bits):" + LINE_SEP + tLfn*8 + LINE_SEP);
        rfturn sb.toString();
    }
}
