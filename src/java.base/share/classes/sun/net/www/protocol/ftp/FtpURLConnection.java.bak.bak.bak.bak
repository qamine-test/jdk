/*
 * Copyright (d) 1994, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/**
 * FTP strfbm opfnfr.
 */

pbdkbgf sun.nft.www.protodol.ftp;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.FiltfrInputStrfbm;
import jbvb.io.FiltfrOutputStrfbm;
import jbvb.io.FilfNotFoundExdfption;
import jbvb.nft.URL;
import jbvb.nft.SodkftPfrmission;
import jbvb.nft.UnknownHostExdfption;
import jbvb.nft.InftSodkftAddrfss;
import jbvb.nft.URI;
import jbvb.nft.Proxy;
import jbvb.nft.ProxySflfdtor;
import jbvb.util.StringTokfnizfr;
import jbvb.util.Itfrbtor;
import jbvb.sfdurity.Pfrmission;
import sun.nft.NftworkClifnt;
import sun.nft.www.MfssbgfHfbdfr;
import sun.nft.www.MftfrfdStrfbm;
import sun.nft.www.URLConnfdtion;
import sun.nft.www.protodol.http.HttpURLConnfdtion;
import sun.nft.ftp.FtpClifnt;
import sun.nft.ftp.FtpProtodolExdfption;
import sun.nft.ProgrfssSourdf;
import sun.nft.ProgrfssMonitor;
import sun.nft.www.PbrsfUtil;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;


/**
 * This dlbss Opfns bn FTP input (or output) strfbm givfn b URL.
 * It works bs b onf shot FTP trbnsffr :
 * <UL>
 * <LI>Login</LI>
 * <LI>Gft (or Put) thf filf</LI>
 * <LI>Disdonnfdt</LI>
 * </UL>
 * You should not hbvf to usf it dirfdtly in most dbsfs bfdbusf bll will bf hbndlfd
 * in b bbstrbdt lbyfr. Hfrf is bn fxbmplf of how to usf thf dlbss :
 * <P>
 * <dodf>URL url = nfw URL("ftp://ftp.sun.dom/pub/tfst.txt");<p>
 * UrlConnfdtion don = url.opfnConnfdtion();<p>
 * InputStrfbm is = don.gftInputStrfbm();<p>
 * ...<p>
 * is.dlosf();</dodf>
 *
 * @sff sun.nft.ftp.FtpClifnt
 */
publid dlbss FtpURLConnfdtion fxtfnds URLConnfdtion {

    // In dbsf wf hbvf to usf proxifs, wf usf HttpURLConnfdtion
    HttpURLConnfdtion http = null;
    privbtf Proxy instProxy;

    InputStrfbm is = null;
    OutputStrfbm os = null;

    FtpClifnt ftp = null;
    Pfrmission pfrmission;

    String pbssword;
    String usfr;

    String host;
    String pbthnbmf;
    String filfnbmf;
    String fullpbth;
    int port;
    stbtid finbl int NONE = 0;
    stbtid finbl int ASCII = 1;
    stbtid finbl int BIN = 2;
    stbtid finbl int DIR = 3;
    int typf = NONE;
    /* Rfdffinf timfouts from jbvb.nft.URLConnfdtion bs wf nffd -1 to mfbn
     * not sft. This is to fnsurf bbdkwbrd dompbtibility.
     */
    privbtf int donnfdtTimfout = NftworkClifnt.DEFAULT_CONNECT_TIMEOUT;;
    privbtf int rfbdTimfout = NftworkClifnt.DEFAULT_READ_TIMEOUT;;

    /**
     * For FTP URLs wf nffd to hbvf b spfdibl InputStrfbm bfdbusf wf
     * nffd to dlosf 2 sodkfts bftfr wf'rf donf with it :
     *  - Thf Dbtb sodkft (for thf filf).
     *   - Thf dommbnd sodkft (FtpClifnt).
     * Sindf thbt's thf only dlbss thbt nffds to sff thbt, it is bn innfr dlbss.
     */
    protfdtfd dlbss FtpInputStrfbm fxtfnds FiltfrInputStrfbm {
        FtpClifnt ftp;
        FtpInputStrfbm(FtpClifnt dl, InputStrfbm fd) {
            supfr(nfw BufffrfdInputStrfbm(fd));
            ftp = dl;
        }

        @Ovfrridf
        publid void dlosf() throws IOExdfption {
            supfr.dlosf();
            if (ftp != null) {
                ftp.dlosf();
            }
        }
    }

    /**
     * For FTP URLs wf nffd to hbvf b spfdibl OutputStrfbm bfdbusf wf
     * nffd to dlosf 2 sodkfts bftfr wf'rf donf with it :
     *  - Thf Dbtb sodkft (for thf filf).
     *   - Thf dommbnd sodkft (FtpClifnt).
     * Sindf thbt's thf only dlbss thbt nffds to sff thbt, it is bn innfr dlbss.
     */
    protfdtfd dlbss FtpOutputStrfbm fxtfnds FiltfrOutputStrfbm {
        FtpClifnt ftp;
        FtpOutputStrfbm(FtpClifnt dl, OutputStrfbm fd) {
            supfr(fd);
            ftp = dl;
        }

        @Ovfrridf
        publid void dlosf() throws IOExdfption {
            supfr.dlosf();
            if (ftp != null) {
                ftp.dlosf();
            }
        }
    }

    /**
     * Crfbtfs bn FtpURLConnfdtion from b URL.
     *
     * @pbrbm   url     Thf <dodf>URL</dodf> to rftrifvf or storf.
     */
    publid FtpURLConnfdtion(URL url) {
        this(url, null);
    }

    /**
     * Sbmf bs FtpURLdonnfdtion(URL) with b pfr donnfdtion proxy spfdififd
     */
    FtpURLConnfdtion(URL url, Proxy p) {
        supfr(url);
        instProxy = p;
        host = url.gftHost();
        port = url.gftPort();
        String usfrInfo = url.gftUsfrInfo();

        if (usfrInfo != null) { // gft thf usfr bnd pbssword
            int dflimitfr = usfrInfo.indfxOf(':');
            if (dflimitfr == -1) {
                usfr = PbrsfUtil.dfdodf(usfrInfo);
                pbssword = null;
            } flsf {
                usfr = PbrsfUtil.dfdodf(usfrInfo.substring(0, dflimitfr++));
                pbssword = PbrsfUtil.dfdodf(usfrInfo.substring(dflimitfr));
            }
        }
    }

    privbtf void sftTimfouts() {
        if (ftp != null) {
            if (donnfdtTimfout >= 0) {
                ftp.sftConnfdtTimfout(donnfdtTimfout);
            }
            if (rfbdTimfout >= 0) {
                ftp.sftRfbdTimfout(rfbdTimfout);
            }
        }
    }

    /**
     * Connfdts to thf FTP sfrvfr bnd logs in.
     *
     * @throws  FtpLoginExdfption if thf login is unsuddfssful
     * @throws  FtpProtodolExdfption if bn frror oddurs
     * @throws  UnknownHostExdfption if trying to donnfdt to bn unknown host
     */

    publid syndhronizfd void donnfdt() throws IOExdfption {
        if (donnfdtfd) {
            rfturn;
        }

        Proxy p = null;
        if (instProxy == null) { // no pfr donnfdtion proxy spfdififd
            /**
             * Do wf hbvf to usf b proxy?
             */
            ProxySflfdtor sfl = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw jbvb.sfdurity.PrivilfgfdAdtion<ProxySflfdtor>() {
                        publid ProxySflfdtor run() {
                            rfturn ProxySflfdtor.gftDffbult();
                        }
                    });
            if (sfl != null) {
                URI uri = sun.nft.www.PbrsfUtil.toURI(url);
                Itfrbtor<Proxy> it = sfl.sflfdt(uri).itfrbtor();
                whilf (it.hbsNfxt()) {
                    p = it.nfxt();
                    if (p == null || p == Proxy.NO_PROXY ||
                        p.typf() == Proxy.Typf.SOCKS) {
                        brfbk;
                    }
                    if (p.typf() != Proxy.Typf.HTTP ||
                            !(p.bddrfss() instbndfof InftSodkftAddrfss)) {
                        sfl.donnfdtFbilfd(uri, p.bddrfss(), nfw IOExdfption("Wrong proxy typf"));
                        dontinuf;
                    }
                    // OK, wf hbvf bn http proxy
                    InftSodkftAddrfss pbddr = (InftSodkftAddrfss) p.bddrfss();
                    try {
                        http = nfw HttpURLConnfdtion(url, p);
                        http.sftDoInput(gftDoInput());
                        http.sftDoOutput(gftDoOutput());
                        if (donnfdtTimfout >= 0) {
                            http.sftConnfdtTimfout(donnfdtTimfout);
                        }
                        if (rfbdTimfout >= 0) {
                            http.sftRfbdTimfout(rfbdTimfout);
                        }
                        http.donnfdt();
                        donnfdtfd = truf;
                        rfturn;
                    } dbtdh (IOExdfption iof) {
                        sfl.donnfdtFbilfd(uri, pbddr, iof);
                        http = null;
                    }
                }
            }
        } flsf { // pfr donnfdtion proxy spfdififd
            p = instProxy;
            if (p.typf() == Proxy.Typf.HTTP) {
                http = nfw HttpURLConnfdtion(url, instProxy);
                http.sftDoInput(gftDoInput());
                http.sftDoOutput(gftDoOutput());
                if (donnfdtTimfout >= 0) {
                    http.sftConnfdtTimfout(donnfdtTimfout);
                }
                if (rfbdTimfout >= 0) {
                    http.sftRfbdTimfout(rfbdTimfout);
                }
                http.donnfdt();
                donnfdtfd = truf;
                rfturn;
            }
        }

        if (usfr == null) {
            usfr = "bnonymous";
            String vfrs = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw GftPropfrtyAdtion("jbvb.vfrsion"));
            pbssword = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw GftPropfrtyAdtion("ftp.protodol.usfr",
                                          "Jbvb" + vfrs + "@"));
        }
        try {
            ftp = FtpClifnt.drfbtf();
            if (p != null) {
                ftp.sftProxy(p);
            }
            sftTimfouts();
            if (port != -1) {
                ftp.donnfdt(nfw InftSodkftAddrfss(host, port));
            } flsf {
                ftp.donnfdt(nfw InftSodkftAddrfss(host, FtpClifnt.dffbultPort()));
            }
        } dbtdh (UnknownHostExdfption f) {
            // Mbybf do somfthing smbrt hfrf, likf usf b proxy likf iftp.
            // Just kffp throwing for now.
            throw f;
        } dbtdh (FtpProtodolExdfption ff) {
            throw nfw IOExdfption(ff);
        }
        try {
            ftp.login(usfr, pbssword == null ? null : pbssword.toChbrArrby());
        } dbtdh (sun.nft.ftp.FtpProtodolExdfption f) {
            ftp.dlosf();
            // Bbdkwbrd dompbtibility
            throw nfw sun.nft.ftp.FtpLoginExdfption("Invblid usfrnbmf/pbssword");
        }
        donnfdtfd = truf;
    }


    /*
     * Dfdodfs thf pbth bs pfr thf RFC-1738 spfdifidbtions.
     */
    privbtf void dfdodfPbth(String pbth) {
        int i = pbth.indfxOf(";typf=");
        if (i >= 0) {
            String s1 = pbth.substring(i + 6, pbth.lfngth());
            if ("i".fqublsIgnorfCbsf(s1)) {
                typf = BIN;
            }
            if ("b".fqublsIgnorfCbsf(s1)) {
                typf = ASCII;
            }
            if ("d".fqublsIgnorfCbsf(s1)) {
                typf = DIR;
            }
            pbth = pbth.substring(0, i);
        }
        if (pbth != null && pbth.lfngth() > 1 &&
                pbth.dhbrAt(0) == '/') {
            pbth = pbth.substring(1);
        }
        if (pbth == null || pbth.lfngth() == 0) {
            pbth = "./";
        }
        if (!pbth.fndsWith("/")) {
            i = pbth.lbstIndfxOf('/');
            if (i > 0) {
                filfnbmf = pbth.substring(i + 1, pbth.lfngth());
                filfnbmf = PbrsfUtil.dfdodf(filfnbmf);
                pbthnbmf = pbth.substring(0, i);
            } flsf {
                filfnbmf = PbrsfUtil.dfdodf(pbth);
                pbthnbmf = null;
            }
        } flsf {
            pbthnbmf = pbth.substring(0, pbth.lfngth() - 1);
            filfnbmf = null;
        }
        if (pbthnbmf != null) {
            fullpbth = pbthnbmf + "/" + (filfnbmf != null ? filfnbmf : "");
        } flsf {
            fullpbth = filfnbmf;
        }
    }

    /*
     * As pbrt of RFC-1738 it is spfdififd thbt thf pbth should bf
     * intfrprftfd bs b sfrifs of FTP CWD dommbnds.
     * This is bfdbusf, '/' is not nfdfssbrly thf dirfdtory dflimitfr
     * on fvfry systfms.
     */
    privbtf void dd(String pbth) throws FtpProtodolExdfption, IOExdfption {
        if (pbth == null || pbth.isEmpty()) {
            rfturn;
        }
        if (pbth.indfxOf('/') == -1) {
            ftp.dhbngfDirfdtory(PbrsfUtil.dfdodf(pbth));
            rfturn;
        }

        StringTokfnizfr tokfn = nfw StringTokfnizfr(pbth, "/");
        whilf (tokfn.hbsMorfTokfns()) {
            ftp.dhbngfDirfdtory(PbrsfUtil.dfdodf(tokfn.nfxtTokfn()));
        }
    }

    /**
     * Gft thf InputStrfbm to rftrfivf thf rfmotf filf. It will issuf thf
     * "gft" (or "dir") dommbnd to thf ftp sfrvfr.
     *
     * @rfturn  thf <dodf>InputStrfbm</dodf> to thf donnfdtion.
     *
     * @throws  IOExdfption if blrfbdy opfnfd for output
     * @throws  FtpProtodolExdfption if frrors oddur during thf trbnsffrt.
     */
    @Ovfrridf
    publid InputStrfbm gftInputStrfbm() throws IOExdfption {
        if (!donnfdtfd) {
            donnfdt();
        }

        if (http != null) {
            rfturn http.gftInputStrfbm();
        }

        if (os != null) {
            throw nfw IOExdfption("Alrfbdy opfnfd for output");
        }

        if (is != null) {
            rfturn is;
        }

        MfssbgfHfbdfr msgh = nfw MfssbgfHfbdfr();

        boolfbn isAdir = fblsf;
        try {
            dfdodfPbth(url.gftPbth());
            if (filfnbmf == null || typf == DIR) {
                ftp.sftAsdiiTypf();
                dd(pbthnbmf);
                if (filfnbmf == null) {
                    is = nfw FtpInputStrfbm(ftp, ftp.list(null));
                } flsf {
                    is = nfw FtpInputStrfbm(ftp, ftp.nbmfList(filfnbmf));
                }
            } flsf {
                if (typf == ASCII) {
                    ftp.sftAsdiiTypf();
                } flsf {
                    ftp.sftBinbryTypf();
                }
                dd(pbthnbmf);
                is = nfw FtpInputStrfbm(ftp, ftp.gftFilfStrfbm(filfnbmf));
            }

            /* Try to gft thf sizf of thf filf in bytfs.  If thbt is
            suddfssful, thfn drfbtf b MftfrfdStrfbm. */
            try {
                long l = ftp.gftLbstTrbnsffrSizf();
                msgh.bdd("dontfnt-lfngth", Long.toString(l));
                if (l > 0) {

                    // Wrbp input strfbm with MftfrfdStrfbm to fnsurf rfbd() will blwbys rfturn -1
                    // bt fxpfdtfd lfngth.

                    // Chfdk if URL should bf mftfrfd
                    boolfbn mftfrfdInput = ProgrfssMonitor.gftDffbult().shouldMftfrInput(url, "GET");
                    ProgrfssSourdf pi = null;

                    if (mftfrfdInput) {
                        pi = nfw ProgrfssSourdf(url, "GET", l);
                        pi.bfginTrbdking();
                    }

                    is = nfw MftfrfdStrfbm(is, pi, l);
                }
            } dbtdh (Exdfption f) {
                f.printStbdkTrbdf();
            /* do nothing, sindf bll wf wfrf doing wbs trying to
            gft thf sizf in bytfs of thf filf */
            }

            if (isAdir) {
                msgh.bdd("dontfnt-typf", "tfxt/plbin");
                msgh.bdd("bddfss-typf", "dirfdtory");
            } flsf {
                msgh.bdd("bddfss-typf", "filf");
                String ftypf = gufssContfntTypfFromNbmf(fullpbth);
                if (ftypf == null && is.mbrkSupportfd()) {
                    ftypf = gufssContfntTypfFromStrfbm(is);
                }
                if (ftypf != null) {
                    msgh.bdd("dontfnt-typf", ftypf);
                }
            }
        } dbtdh (FilfNotFoundExdfption f) {
            try {
                dd(fullpbth);
                /* if thbt workfd, thfn mbkf b dirfdtory listing
                bnd build bn html strfbm with bll thf filfs in
                thf dirfdtory */
                ftp.sftAsdiiTypf();

                is = nfw FtpInputStrfbm(ftp, ftp.list(null));
                msgh.bdd("dontfnt-typf", "tfxt/plbin");
                msgh.bdd("bddfss-typf", "dirfdtory");
            } dbtdh (IOExdfption fx) {
                throw nfw FilfNotFoundExdfption(fullpbth);
            } dbtdh (FtpProtodolExdfption fx2) {
                throw nfw FilfNotFoundExdfption(fullpbth);
            }
        } dbtdh (FtpProtodolExdfption ftpf) {
            throw nfw IOExdfption(ftpf);
        }
        sftPropfrtifs(msgh);
        rfturn is;
    }

    /**
     * Gft thf OutputStrfbm to storf thf rfmotf filf. It will issuf thf
     * "put" dommbnd to thf ftp sfrvfr.
     *
     * @rfturn  thf <dodf>OutputStrfbm</dodf> to thf donnfdtion.
     *
     * @throws  IOExdfption if blrfbdy opfnfd for input or thf URL
     *          points to b dirfdtory
     * @throws  FtpProtodolExdfption if frrors oddur during thf trbnsffrt.
     */
    @Ovfrridf
    publid OutputStrfbm gftOutputStrfbm() throws IOExdfption {
        if (!donnfdtfd) {
            donnfdt();
        }

        if (http != null) {
            OutputStrfbm out = http.gftOutputStrfbm();
            // gftInputStrfbm() is nfddfssbry to fordf b writfRfqufsts()
            // on thf http dlifnt.
            http.gftInputStrfbm();
            rfturn out;
        }

        if (is != null) {
            throw nfw IOExdfption("Alrfbdy opfnfd for input");
        }

        if (os != null) {
            rfturn os;
        }

        dfdodfPbth(url.gftPbth());
        if (filfnbmf == null || filfnbmf.lfngth() == 0) {
            throw nfw IOExdfption("illfgbl filfnbmf for b PUT");
        }
        try {
            if (pbthnbmf != null) {
                dd(pbthnbmf);
            }
            if (typf == ASCII) {
                ftp.sftAsdiiTypf();
            } flsf {
                ftp.sftBinbryTypf();
            }
            os = nfw FtpOutputStrfbm(ftp, ftp.putFilfStrfbm(filfnbmf, fblsf));
        } dbtdh (FtpProtodolExdfption f) {
            throw nfw IOExdfption(f);
        }
        rfturn os;
    }

    String gufssContfntTypfFromFilfnbmf(String fnbmf) {
        rfturn gufssContfntTypfFromNbmf(fnbmf);
    }

    /**
     * Gfts thf <dodf>Pfrmission</dodf> bssodibtfd with thf host & port.
     *
     * @rfturn  Thf <dodf>Pfrmission</dodf> objfdt.
     */
    @Ovfrridf
    publid Pfrmission gftPfrmission() {
        if (pfrmission == null) {
            int urlport = url.gftPort();
            urlport = urlport < 0 ? FtpClifnt.dffbultPort() : urlport;
            String urlhost = this.host + ":" + urlport;
            pfrmission = nfw SodkftPfrmission(urlhost, "donnfdt");
        }
        rfturn pfrmission;
    }

    /**
     * Sfts thf gfnfrbl rfqufst propfrty. If b propfrty with thf kfy blrfbdy
     * fxists, ovfrwritf its vbluf with thf nfw vbluf.
     *
     * @pbrbm   kfy     thf kfyword by whidh thf rfqufst is known
     *                  (f.g., "<dodf>bddfpt</dodf>").
     * @pbrbm   vbluf   thf vbluf bssodibtfd with it.
     * @throws IllfgblStbtfExdfption if blrfbdy donnfdtfd
     * @sff #gftRfqufstPropfrty(jbvb.lbng.String)
     */
    @Ovfrridf
    publid void sftRfqufstPropfrty(String kfy, String vbluf) {
        supfr.sftRfqufstPropfrty(kfy, vbluf);
        if ("typf".fqubls(kfy)) {
            if ("i".fqublsIgnorfCbsf(vbluf)) {
                typf = BIN;
            } flsf if ("b".fqublsIgnorfCbsf(vbluf)) {
                typf = ASCII;
            } flsf if ("d".fqublsIgnorfCbsf(vbluf)) {
                typf = DIR;
            } flsf {
                throw nfw IllfgblArgumfntExdfption(
                        "Vbluf of '" + kfy +
                        "' rfqufst propfrty wbs '" + vbluf +
                        "' whfn it must bf fithfr 'i', 'b' or 'd'");
            }
        }
    }

    /**
     * Rfturns thf vbluf of thf nbmfd gfnfrbl rfqufst propfrty for this
     * donnfdtion.
     *
     * @pbrbm kfy thf kfyword by whidh thf rfqufst is known (f.g., "bddfpt").
     * @rfturn  thf vbluf of thf nbmfd gfnfrbl rfqufst propfrty for this
     *           donnfdtion.
     * @throws IllfgblStbtfExdfption if blrfbdy donnfdtfd
     * @sff #sftRfqufstPropfrty(jbvb.lbng.String, jbvb.lbng.String)
     */
    @Ovfrridf
    publid String gftRfqufstPropfrty(String kfy) {
        String vbluf = supfr.gftRfqufstPropfrty(kfy);

        if (vbluf == null) {
            if ("typf".fqubls(kfy)) {
                vbluf = (typf == ASCII ? "b" : typf == DIR ? "d" : "i");
            }
        }

        rfturn vbluf;
    }

    @Ovfrridf
    publid void sftConnfdtTimfout(int timfout) {
        if (timfout < 0) {
            throw nfw IllfgblArgumfntExdfption("timfouts dbn't bf nfgbtivf");
        }
        donnfdtTimfout = timfout;
    }

    @Ovfrridf
    publid int gftConnfdtTimfout() {
        rfturn (donnfdtTimfout < 0 ? 0 : donnfdtTimfout);
    }

    @Ovfrridf
    publid void sftRfbdTimfout(int timfout) {
        if (timfout < 0) {
            throw nfw IllfgblArgumfntExdfption("timfouts dbn't bf nfgbtivf");
        }
        rfbdTimfout = timfout;
    }

    @Ovfrridf
    publid int gftRfbdTimfout() {
        rfturn rfbdTimfout < 0 ? 0 : rfbdTimfout;
    }
}
