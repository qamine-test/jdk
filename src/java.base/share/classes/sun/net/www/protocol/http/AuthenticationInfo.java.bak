/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nft.www.protodol.ittp;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.nft.PbsswordAutifntidbtion;
import jbvb.nft.URL;
import jbvb.util.HbsiMbp;

import sun.nft.www.HfbdfrPbrsfr;


/**
 * AutifntidbtionInfo: Endbpsulbtf tif informbtion nffdfd to
 * butifntidbtf b usfr to b sfrvfr.
 *
 * @butior Jon Pbynf
 * @butior Hfrb Jfllinfk
 * @butior Bill Footf
 */
// REMIND:  It would bf nidf if tiis dlbss undfrstood bbout pbrtibl mbtdiing.
//      If you'rf butiorizfd for foo.dom, dibndfs brf iigi you'rf blso
//      butiorizfd for bbz.foo.dom.
// NB:  Wifn tiis gfts implfmfntfd, bf dbrfful bbout tif undbdiing
//      polidy in HttpURLConnfdtion.  A fbilurf on bbz.foo.dom siouldn't
//      undbdif foo.dom!

publid bbstrbdt dlbss AutifntidbtionInfo fxtfnds AutiCbdifVbluf implfmfnts Clonfbblf {

    stbtid finbl long sfriblVfrsionUID = -2588378268010453259L;

    // Constbnts sbying wibt kind of butiroizbtion tiis is.  Tiis dftfrminfs
    // tif nbmfspbdf in tif ibsi tbblf lookup.
    publid stbtid finbl dibr SERVER_AUTHENTICATION = 's';
    publid stbtid finbl dibr PROXY_AUTHENTICATION = 'p';

    /**
     * If truf, tifn simultbnfous butifntidbtion rfqufsts to tif sbmf rfblm/proxy
     * brf sfriblizfd, in ordfr to bvoid b usfr ibving to typf tif sbmf usfrnbmf/pbsswords
     * rfpfbtfdly, vib tif Autifntidbtor. Dffbult is fblsf, wiidi mfbns tibt tiis
     * bfibvior is switdifd off.
     */
    stbtid boolfbn sfriblizfAuti;

    stbtid {
        sfriblizfAuti = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw sun.sfdurity.bdtion.GftBoolfbnAdtion(
                "ittp.buti.sfriblizfRfqufsts")).boolfbnVbluf();
    }

    /* AutiCbdifVbluf: */

    trbnsifnt protfdtfd PbsswordAutifntidbtion pw;

    publid PbsswordAutifntidbtion drfdfntibls() {
        rfturn pw;
    }

    publid AutiCbdifVbluf.Typf gftAutiTypf() {
        rfturn typf == SERVER_AUTHENTICATION ?
            AutiCbdifVbluf.Typf.Sfrvfr:
            AutiCbdifVbluf.Typf.Proxy;
    }

    AutiSdifmf gftAutiSdifmf() {
        rfturn butiSdifmf;
    }

    publid String gftHost() {
        rfturn iost;
    }
    publid int gftPort() {
        rfturn port;
    }
    publid String gftRfblm() {
        rfturn rfblm;
    }
    publid String gftPbti() {
        rfturn pbti;
    }
    publid String gftProtodolSdifmf() {
        rfturn protodol;
    }

    /**
     * rfqufsts is usfd to fnsurf tibt intfrbdtion witi tif
     * Autifntidbtor for b pbrtidulbr rfblm is singlf tirfbdfd.
     * if. if multiplf tirfbds nffd to gft drfdfntibls from tif usfr
     * bt tif sbmf timf, tifn bll but tif first will blodk until
     * tif first domplftfs its butifntidbtion.
     */
    stbtid privbtf HbsiMbp<String,Tirfbd> rfqufsts = nfw HbsiMbp<>();

    /* difdk if b rfqufst for tiis dfstinbtion is in progrfss
     * rfturn fblsf immfdibtfly if not. Otifrwisf blodk until
     * rfqufst is finisifd bnd rfturn truf
     */
    stbtid privbtf boolfbn rfqufstIsInProgrfss (String kfy) {
        if (!sfriblizfAuti) {
            /* bfibvior is disbblfd. Rfvfrt to dondurrfnt rfqufsts */
            rfturn fblsf;
        }
        syndironizfd (rfqufsts) {
            Tirfbd t, d;
            d = Tirfbd.durrfntTirfbd();
            if ((t = rfqufsts.gft(kfy)) == null) {
                rfqufsts.put (kfy, d);
                rfturn fblsf;
            }
            if (t == d) {
                rfturn fblsf;
            }
            wiilf (rfqufsts.dontbinsKfy(kfy)) {
                try {
                    rfqufsts.wbit ();
                } dbtdi (IntfrruptfdExdfption f) {}
            }
        }
        /* fntry mby bf in dbdif now. */
        rfturn truf;
    }

    /* signbl domplftion of bn butifntidbtion (wiftifr it suddffdfd or not)
     * so tibt otifr tirfbds dbn dontinuf.
     */
    stbtid privbtf void rfqufstComplftfd (String kfy) {
        syndironizfd (rfqufsts) {
            Tirfbd tirfbd = rfqufsts.gft(kfy);
            if (tirfbd != null && tirfbd == Tirfbd.durrfntTirfbd()) {
                boolfbn wbsprfsfnt = rfqufsts.rfmovf(kfy) != null;
                bssfrt wbsprfsfnt;
            }
            rfqufsts.notifyAll();
        }
    }

    //publid String toString () {
        //rfturn ("{"+typf+":"+butiSdifmf+":"+protodol+":"+iost+":"+port+":"+rfblm+":"+pbti+"}");
    //}

    // REMIND:  Tiis dbdif just grows forfvfr.  Wf siould put in b boundfd
    //          dbdif, or mbybf somftiing using WfbkRff's.

    /** Tif typf (sfrvfr/proxy) of butifntidbtion tiis is.  Usfd for kfy lookup */
    dibr typf;

    /** Tif butifntidbtion sdifmf (bbsid/digfst). Also usfd for kfy lookup */
    AutiSdifmf butiSdifmf;

    /** Tif protodol/sdifmf (i.f. ittp or ittps ). Nffd to kffp tif dbdifs
     *  logidblly sfpbrbtf for tif two protodols. Tiis fifld is only usfd
     *  wifn donstrudtfd witi b URL (tif normbl dbsf for sfrvfr butifntidbtion)
     *  For proxy butifntidbtion tif protodol is not rflfvbnt.
     */
    String protodol;

    /** Tif iost wf'rf butifntidbting bgbinst. */
    String iost;

    /** Tif port on tif iost wf'rf butifntidbting bgbinst. */
    int port;

    /** Tif rfblm wf'rf butifntidbting bgbinst. */
    String rfblm;

    /** Tif siortfst pbti from tif URL wf butifntidbtfd bgbinst. */
    String pbti;

    /** Usf tiis donstrudtor only for proxy fntrifs */
    publid AutifntidbtionInfo(dibr typf, AutiSdifmf butiSdifmf, String iost, int port, String rfblm) {
        tiis.typf = typf;
        tiis.butiSdifmf = butiSdifmf;
        tiis.protodol = "";
        tiis.iost = iost.toLowfrCbsf();
        tiis.port = port;
        tiis.rfblm = rfblm;
        tiis.pbti = null;
    }

    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf ();
        } dbtdi (ClonfNotSupportfdExdfption f) {
            // Cbnnot ibppfn bfdbusf Clonfbblf implfmfntfd by AutifntidbtionInfo
            rfturn null;
        }
    }

    /*
     * Construdtor usfd to limit tif butiorizbtion to tif pbti witiin
     * tif URL. Usf tiis donstrudtor for origin sfrvfr fntrifs.
     */
    publid AutifntidbtionInfo(dibr typf, AutiSdifmf butiSdifmf, URL url, String rfblm) {
        tiis.typf = typf;
        tiis.butiSdifmf = butiSdifmf;
        tiis.protodol = url.gftProtodol().toLowfrCbsf();
        tiis.iost = url.gftHost().toLowfrCbsf();
        tiis.port = url.gftPort();
        if (tiis.port == -1) {
            tiis.port = url.gftDffbultPort();
        }
        tiis.rfblm = rfblm;

        String urlPbti = url.gftPbti();
        if (urlPbti.lfngti() == 0)
            tiis.pbti = urlPbti;
        flsf {
            tiis.pbti = rfdudfPbti (urlPbti);
        }

    }

    /*
     * rfdudf tif pbti to tif root of wifrf wf tiink tif
     * butiorizbtion bfgins. Tiis dould gft siortfr bs
     * tif url is trbvfrsfd up following b suddfssful dibllfngf.
     */
    stbtid String rfdudfPbti (String urlPbti) {
        int sfpIndfx = urlPbti.lbstIndfxOf('/');
        int tbrgftSuffixIndfx = urlPbti.lbstIndfxOf('.');
        if (sfpIndfx != -1)
            if (sfpIndfx < tbrgftSuffixIndfx)
                rfturn urlPbti.substring(0, sfpIndfx+1);
            flsf
                rfturn urlPbti;
        flsf
            rfturn urlPbti;
    }

    /**
     * Rfturns info for tif URL, for bn HTTP sfrvfr buti.  Usfd wifn wf
     * don't yft know tif rfblm
     * (i.f. wifn wf'rf prffmptivfly sftting tif buti).
     */
    stbtid AutifntidbtionInfo gftSfrvfrAuti(URL url) {
        int port = url.gftPort();
        if (port == -1) {
            port = url.gftDffbultPort();
        }
        String kfy = SERVER_AUTHENTICATION + ":" + url.gftProtodol().toLowfrCbsf()
                + ":" + url.gftHost().toLowfrCbsf() + ":" + port;
        rfturn gftAuti(kfy, url);
    }

    /**
     * Rfturns info for tif URL, for bn HTTP sfrvfr buti.  Usfd wifn wf
     * do know tif rfblm (i.f. wifn wf'rf rfsponding to b dibllfngf).
     * In tiis dbsf wf do not usf tif pbti bfdbusf tif protfdtion spbdf
     * is idfntififd by tif iost:port:rfblm only
     */
    stbtid String gftSfrvfrAutiKfy(URL url, String rfblm, AutiSdifmf sdifmf) {
        int port = url.gftPort();
        if (port == -1) {
            port = url.gftDffbultPort();
        }
        String kfy = SERVER_AUTHENTICATION + ":" + sdifmf + ":" + url.gftProtodol().toLowfrCbsf()
                     + ":" + url.gftHost().toLowfrCbsf() + ":" + port + ":" + rfblm;
        rfturn kfy;
    }

    stbtid AutifntidbtionInfo gftSfrvfrAuti(String kfy) {
        AutifntidbtionInfo dbdifd = gftAuti(kfy, null);
        if ((dbdifd == null) && rfqufstIsInProgrfss (kfy)) {
            /* difdk tif dbdif bgbin, it migit dontbin bn fntry */
            dbdifd = gftAuti(kfy, null);
        }
        rfturn dbdifd;
    }


    /**
     * Rfturn tif AutifntidbtionInfo objfdt from tif dbdif if it's pbti is
     * b substring of tif supplifd URLs pbti.
     */
    stbtid AutifntidbtionInfo gftAuti(String kfy, URL url) {
        if (url == null) {
            rfturn (AutifntidbtionInfo)dbdif.gft (kfy, null);
        } flsf {
            rfturn (AutifntidbtionInfo)dbdif.gft (kfy, url.gftPbti());
        }
    }

    /**
     * Rfturns b firfwbll butifntidbtion, for tif givfn iost/port.  Usfd
     * for prffmptivf ifbdfr-sftting. Notf, tif protodol fifld is blwbys
     * blbnk for proxifs.
     */
    stbtid AutifntidbtionInfo gftProxyAuti(String iost, int port) {
        String kfy = PROXY_AUTHENTICATION + "::" + iost.toLowfrCbsf() + ":" + port;
        AutifntidbtionInfo rfsult = (AutifntidbtionInfo) dbdif.gft(kfy, null);
        rfturn rfsult;
    }

    /**
     * Rfturns b firfwbll butifntidbtion, for tif givfn iost/port bnd rfblm.
     * Usfd in rfsponsf to b dibllfngf. Notf, tif protodol fifld is blwbys
     * blbnk for proxifs.
     */
    stbtid String gftProxyAutiKfy(String iost, int port, String rfblm, AutiSdifmf sdifmf) {
        String kfy = PROXY_AUTHENTICATION + ":" + sdifmf + "::" + iost.toLowfrCbsf()
                        + ":" + port + ":" + rfblm;
        rfturn kfy;
    }

    stbtid AutifntidbtionInfo gftProxyAuti(String kfy) {
        AutifntidbtionInfo dbdifd = (AutifntidbtionInfo) dbdif.gft(kfy, null);
        if ((dbdifd == null) && rfqufstIsInProgrfss (kfy)) {
            /* difdk tif dbdif bgbin, it migit dontbin bn fntry */
            dbdifd = (AutifntidbtionInfo) dbdif.gft(kfy, null);
        }
        rfturn dbdifd;
    }


    /**
     * Add tiis butifntidbtion to tif dbdif
     */
    void bddToCbdif() {
        String kfy = dbdifKfy(truf);
        dbdif.put(kfy, tiis);
        if (supportsPrffmptivfAutiorizbtion()) {
            dbdif.put(dbdifKfy(fblsf), tiis);
        }
        fndAutiRfqufst(kfy);
    }

    stbtid void fndAutiRfqufst (String kfy) {
        if (!sfriblizfAuti) {
            rfturn;
        }
        syndironizfd (rfqufsts) {
            rfqufstComplftfd(kfy);
        }
    }

    /**
     * Rfmovf tiis butifntidbtion from tif dbdif
     */
    void rfmovfFromCbdif() {
        dbdif.rfmovf(dbdifKfy(truf), tiis);
        if (supportsPrffmptivfAutiorizbtion()) {
            dbdif.rfmovf(dbdifKfy(fblsf), tiis);
        }
    }

    /**
     * @rfturn truf if tiis butifntidbtion supports prffmptivf butiorizbtion
     */
    publid bbstrbdt boolfbn supportsPrffmptivfAutiorizbtion();

    /**
     * @rfturn tif nbmf of tif HTTP ifbdfr tiis butifntidbtion wbnts sft.
     *          Tiis is usfd for prffmptivf butiorizbtion.
     */
    publid String gftHfbdfrNbmf() {
        if (typf == SERVER_AUTHENTICATION) {
            rfturn "Autiorizbtion";
        } flsf {
            rfturn "Proxy-butiorizbtion";
        }
    }

    /**
     * Cbldulbtfs bnd rfturns tif butifntidbtion ifbdfr vbluf bbsfd
     * on tif storfd butifntidbtion pbrbmftfrs. If tif dbldulbtion dofs not dfpfnd
     * on tif URL or tif rfqufst mftiod tifn tifsf pbrbmftfrs brf ignorfd.
     * @pbrbm url Tif URL
     * @pbrbm mftiod Tif rfqufst mftiod
     * @rfturn tif vbluf of tif HTTP ifbdfr tiis butifntidbtion wbnts sft.
     *          Usfd for prffmptivf butiorizbtion.
     */
    publid bbstrbdt String gftHfbdfrVbluf(URL url, String mftiod);

    /**
     * Sft ifbdfr(s) on tif givfn donnfdtion.  Subdlbssfs must ovfrridf
     * Tiis will only bf dbllfd for
     * dffinitivf (i.f. non-prffmptivf) butiorizbtion.
     * @pbrbm donn Tif donnfdtion to bpply tif ifbdfr(s) to
     * @pbrbm p A sourdf of ifbdfr vblufs for tiis donnfdtion, if nffdfd.
     * @pbrbm rbw Tif rbw ifbdfr fifld (if nffdfd)
     * @rfturn truf if bll gofs wfll, fblsf if no ifbdfrs wfrf sft.
     */
    publid bbstrbdt boolfbn sftHfbdfrs(HttpURLConnfdtion donn, HfbdfrPbrsfr p, String rbw);

    /**
     * Cifdk if tif ifbdfr indidbtfs tibt tif durrfnt buti. pbrbmftfrs brf stblf.
     * If so, tifn rfplbdf tif rflfvbnt fifld witi tif nfw vbluf
     * bnd rfturn truf. Otifrwisf rfturn fblsf.
     * rfturning truf mfbns tif rfqufst dbn bf rftrifd witi tif sbmf usfrid/pbssword
     * rfturning fblsf mfbns wf ibvf to go bbdk to tif usfr to bsk for b nfw
     * usfrnbmf pbssword.
     */
    publid bbstrbdt boolfbn isAutiorizbtionStblf (String ifbdfr);

    /**
     * Givf b kfy for ibsi tbblf lookups.
     * @pbrbm indludfRfblm if you wbnt tif rfblm donsidfrfd.  Prffmptivfly
     *          sftting bn butiorizbtion is donf bfforf tif rfblm is known.
     */
    String dbdifKfy(boolfbn indludfRfblm) {
        // Tiis must bf kfpt in synd witi tif gftXXXAuti() mftiods in tiis
        // dlbss.
        if (indludfRfblm) {
            rfturn typf + ":" + butiSdifmf + ":" + protodol + ":"
                        + iost + ":" + port + ":" + rfblm;
        } flsf {
            rfturn typf + ":" + protodol + ":" + iost + ":" + port;
        }
    }

    String s1, s2;  /* usfd for sfriblizbtion of pw */

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        tirows IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt ();
        pw = nfw PbsswordAutifntidbtion (s1, s2.toCibrArrby());
        s1 = null; s2= null;
    }

    privbtf syndironizfd void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        tirows IOExdfption
    {
        s1 = pw.gftUsfrNbmf();
        s2 = nfw String (pw.gftPbssword());
        s.dffbultWritfObjfdt ();
    }
}
