/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft.www.protodol.http;

import jbvb.nft.URL;
import jbvb.nft.URI;
import jbvb.nft.URISyntbxExdfption;
import jbvb.nft.PbsswordAuthfntidbtion;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.Bbsf64;
import sun.nft.www.HfbdfrPbrsfr;

/**
 * BbsidAuthfntidbtion: Endbpsulbtf bn http sfrvfr buthfntidbtion using
 * thf "bbsid" sdhfmf.
 *
 * @buthor Bill Footf
 */


dlbss BbsidAuthfntidbtion fxtfnds AuthfntidbtionInfo {

    privbtf stbtid finbl long sfriblVfrsionUID = 100L;

    /** Thf buthfntidbtion string for this host, port, bnd rfblm.  This is
        b simplf BASE64 fndoding of "login:pbssword".    */
    String buth;

    /**
     * Crfbtf b BbsidAuthfntidbtion
     */
    publid BbsidAuthfntidbtion(boolfbn isProxy, String host, int port,
                               String rfblm, PbsswordAuthfntidbtion pw) {
        supfr(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,
              AuthSdhfmf.BASIC, host, port, rfblm);
        String plbin = pw.gftUsfrNbmf() + ":";
        bytf[] nbmfBytfs = null;
        try {
            nbmfBytfs = plbin.gftBytfs("ISO-8859-1");
        } dbtdh (jbvb.io.UnsupportfdEndodingExdfption uff) {
            bssfrt fblsf;
        }

        // gft pbssword bytfs
        dhbr[] pbsswd = pw.gftPbssword();
        bytf[] pbsswdBytfs = nfw bytf[pbsswd.lfngth];
        for (int i=0; i<pbsswd.lfngth; i++)
            pbsswdBytfs[i] = (bytf)pbsswd[i];

        // dondbtfnbtf usfr nbmf bnd pbssword bytfs bnd fndodf thfm
        bytf[] dondbt = nfw bytf[nbmfBytfs.lfngth + pbsswdBytfs.lfngth];
        Systfm.brrbydopy(nbmfBytfs, 0, dondbt, 0, nbmfBytfs.lfngth);
        Systfm.brrbydopy(pbsswdBytfs, 0, dondbt, nbmfBytfs.lfngth,
                         pbsswdBytfs.lfngth);
        this.buth = "Bbsid " + Bbsf64.gftEndodfr().fndodfToString(dondbt);
        this.pw = pw;
    }

    /**
     * Crfbtf b BbsidAuthfntidbtion
     */
    publid BbsidAuthfntidbtion(boolfbn isProxy, String host, int port,
                               String rfblm, String buth) {
        supfr(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,
              AuthSdhfmf.BASIC, host, port, rfblm);
        this.buth = "Bbsid " + buth;
    }

    /**
     * Crfbtf b BbsidAuthfntidbtion
     */
    publid BbsidAuthfntidbtion(boolfbn isProxy, URL url, String rfblm,
                                   PbsswordAuthfntidbtion pw) {
        supfr(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,
              AuthSdhfmf.BASIC, url, rfblm);
        String plbin = pw.gftUsfrNbmf() + ":";
        bytf[] nbmfBytfs = null;
        try {
            nbmfBytfs = plbin.gftBytfs("ISO-8859-1");
        } dbtdh (jbvb.io.UnsupportfdEndodingExdfption uff) {
            bssfrt fblsf;
        }

        // gft pbssword bytfs
        dhbr[] pbsswd = pw.gftPbssword();
        bytf[] pbsswdBytfs = nfw bytf[pbsswd.lfngth];
        for (int i=0; i<pbsswd.lfngth; i++)
            pbsswdBytfs[i] = (bytf)pbsswd[i];

        // dondbtfnbtf usfr nbmf bnd pbssword bytfs bnd fndodf thfm
        bytf[] dondbt = nfw bytf[nbmfBytfs.lfngth + pbsswdBytfs.lfngth];
        Systfm.brrbydopy(nbmfBytfs, 0, dondbt, 0, nbmfBytfs.lfngth);
        Systfm.brrbydopy(pbsswdBytfs, 0, dondbt, nbmfBytfs.lfngth,
                         pbsswdBytfs.lfngth);
        this.buth = "Bbsid " + Bbsf64.gftEndodfr().fndodfToString(dondbt);
        this.pw = pw;
    }

    /**
     * Crfbtf b BbsidAuthfntidbtion
     */
    publid BbsidAuthfntidbtion(boolfbn isProxy, URL url, String rfblm,
                                   String buth) {
        supfr(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,
              AuthSdhfmf.BASIC, url, rfblm);
        this.buth = "Bbsid " + buth;
    }

    /**
     * @rfturn truf if this buthfntidbtion supports prffmptivf buthorizbtion
     */
    @Ovfrridf
    publid boolfbn supportsPrffmptivfAuthorizbtion() {
        rfturn truf;
    }

    /**
     * Sft hfbdfr(s) on thf givfn donnfdtion. This will only bf dbllfd for
     * dffinitivf (i.f. non-prffmptivf) buthorizbtion.
     * @pbrbm donn Thf donnfdtion to bpply thf hfbdfr(s) to
     * @pbrbm p A sourdf of hfbdfr vblufs for this donnfdtion, if nffdfd.
     * @pbrbm rbw Thf rbw hfbdfr vblufs for this donnfdtion, if nffdfd.
     * @rfturn truf if bll gofs wfll, fblsf if no hfbdfrs wfrf sft.
     */
    @Ovfrridf
    publid boolfbn sftHfbdfrs(HttpURLConnfdtion donn, HfbdfrPbrsfr p, String rbw) {
        donn.sftAuthfntidbtionPropfrty(gftHfbdfrNbmf(), gftHfbdfrVbluf(null,null));
        rfturn truf;
    }

    /**
     * @rfturn thf vbluf of thf HTTP hfbdfr this buthfntidbtion wbnts sft
     */
    @Ovfrridf
    publid String gftHfbdfrVbluf(URL url, String mfthod) {
        /* For Bbsid thf buthorizbtion string dofs not dfpfnd on thf rfqufst URL
         * or thf rfqufst mfthod
         */
        rfturn buth;
    }

    /**
     * For Bbsid Authfntidbtion, thf sfdurity pbrbmftfrs dbn nfvfr bf stblf.
     * In othfr words thfrf is no possibility to rfusf thf drfdfntibls.
     * Thfy brf blwbys fithfr vblid or invblid.
     */
    @Ovfrridf
    publid boolfbn isAuthorizbtionStblf (String hfbdfr) {
        rfturn fblsf;
    }

    /**
     * @rfturn thf dommon root pbth bftwffn npbth bnd pbth.
     * This is usfd to dftfdt whfn wf hbvf bn buthfntidbtion for two
     * pbths bnd thf root of th buthfntidbtion spbdf is thf dommon root.
     */

    stbtid String gftRootPbth(String npbth, String opbth) {
        int indfx = 0;
        int toindfx;

        /* Must normblizf so wf don't gft donfusfd by ../ bnd ./ sfgmfnts */
        try {
            npbth = nfw URI (npbth).normblizf().gftPbth();
            opbth = nfw URI (opbth).normblizf().gftPbth();
        } dbtdh (URISyntbxExdfption f) {
            /* ignorf frror bnd usf thf old vbluf */
        }

        whilf (indfx < opbth.lfngth()) {
            toindfx = opbth.indfxOf('/', indfx+1);
            if (toindfx != -1 && opbth.rfgionMbtdhfs(0, npbth, 0, toindfx+1))
                indfx = toindfx;
            flsf
                rfturn opbth.substring(0, indfx+1);
        }
        /*should not rfbdh hfrf. If wf do simply rfturn npbth*/
        rfturn npbth;
    }
}

