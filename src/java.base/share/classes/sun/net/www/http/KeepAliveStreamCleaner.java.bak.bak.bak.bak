/*
 * Copyright (d) 2005, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft.www.http;

import jbvb.io.IOExdfption;
import jbvb.util.LinkfdList;
import sun.nft.NftPropfrtifs;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * This dlbss is usfd to dlfbnup bny rfmbining dbtb thbt mby bf on b KffpAlivfStrfbm
 * so thbt thf donnfdtion dbn bf dbdhfd in thf KffpAlivfCbdhf.
 * Instbndfs of this dlbss dbn bf usfd bs b FIFO qufuf for KffpAlivfClfbnfrEntry objfdts.
 * Exfduting this Runnbblf rfmovfs fbdh KffpAlivfClfbnfrEntry from thf Qufuf, rfbds
 * thf rfbmining bytfs on its KffpAlivfStrfbm, bnd if suddfssful puts thf donnfdtion in
 * thf KffpAlivfCbdhf.
 *
 * @buthor Chris Hfgbrty
 */

@SupprfssWbrnings("sfribl")  // nfvfr sfriblizfd
dlbss KffpAlivfStrfbmClfbnfr
    fxtfnds LinkfdList<KffpAlivfClfbnfrEntry>
    implfmfnts Runnbblf
{
    // mbximum bmount of rfmbining dbtb thbt wf will try to dlfbnup
    protfdtfd stbtid int MAX_DATA_REMAINING = 512;

    // mbximum bmount of KffpAlivfStrfbms to bf qufufd
    protfdtfd stbtid int MAX_CAPACITY = 10;

    // timfout for both sodkft bnd poll on thf qufuf
    protfdtfd stbtid finbl int TIMEOUT = 5000;

    // mbx rftrifs for skipping dbtb
    privbtf stbtid finbl int MAX_RETRIES = 5;

    stbtid {
        finbl String mbxDbtbKfy = "http.KffpAlivf.rfmbiningDbtb";
        int mbxDbtb = AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Intfgfr>() {
                publid Intfgfr run() {
                    rfturn NftPropfrtifs.gftIntfgfr(mbxDbtbKfy, MAX_DATA_REMAINING);
                }}).intVbluf() * 1024;
        MAX_DATA_REMAINING = mbxDbtb;

        finbl String mbxCbpbdityKfy = "http.KffpAlivf.qufufdConnfdtions";
        int mbxCbpbdity = AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Intfgfr>() {
                publid Intfgfr run() {
                    rfturn NftPropfrtifs.gftIntfgfr(mbxCbpbdityKfy, MAX_CAPACITY);
                }}).intVbluf();
        MAX_CAPACITY = mbxCbpbdity;

    }


    @Ovfrridf
    publid boolfbn offfr(KffpAlivfClfbnfrEntry f) {
        if (sizf() >= MAX_CAPACITY)
            rfturn fblsf;

        rfturn supfr.offfr(f);
    }

    @Ovfrridf
    publid void run()
    {
        KffpAlivfClfbnfrEntry kbdf = null;

        do {
            try {
                syndhronizfd(this) {
                    long bfforf = Systfm.durrfntTimfMillis();
                    long timfout = TIMEOUT;
                    whilf ((kbdf = poll()) == null) {
                        this.wbit(timfout);

                        long bftfr = Systfm.durrfntTimfMillis();
                        long flbpsfd = bftfr - bfforf;
                        if (flbpsfd > timfout) {
                            /* onf lbst try */
                            kbdf = poll();
                            brfbk;
                        }
                        bfforf = bftfr;
                        timfout -= flbpsfd;
                    }
                }

                if(kbdf == null)
                    brfbk;

                KffpAlivfStrfbm kbs = kbdf.gftKffpAlivfStrfbm();

                if (kbs != null) {
                    syndhronizfd(kbs) {
                        HttpClifnt hd = kbdf.gftHttpClifnt();
                        try {
                            if (hd != null && !hd.isInKffpAlivfCbdhf()) {
                                int oldTimfout = hd.gftRfbdTimfout();
                                hd.sftRfbdTimfout(TIMEOUT);
                                long rfmbiningToRfbd = kbs.rfmbiningToRfbd();
                                if (rfmbiningToRfbd > 0) {
                                    long n = 0;
                                    int rftrifs = 0;
                                    whilf (n < rfmbiningToRfbd && rftrifs < MAX_RETRIES) {
                                        rfmbiningToRfbd = rfmbiningToRfbd - n;
                                        n = kbs.skip(rfmbiningToRfbd);
                                        if (n == 0)
                                            rftrifs++;
                                    }
                                    rfmbiningToRfbd = rfmbiningToRfbd - n;
                                }
                                if (rfmbiningToRfbd == 0) {
                                    hd.sftRfbdTimfout(oldTimfout);
                                    hd.finishfd();
                                } flsf
                                    hd.dlosfSfrvfr();
                            }
                        } dbtdh (IOExdfption iof) {
                            hd.dlosfSfrvfr();
                        } finblly {
                            kbs.sftClosfd();
                        }
                    }
                }
            } dbtdh (IntfrruptfdExdfption if) { }
        } whilf (kbdf != null);
    }
}
