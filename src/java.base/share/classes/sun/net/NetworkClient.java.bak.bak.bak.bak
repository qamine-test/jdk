/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.nft;

import jbvb.io.*;
import jbvb.nft.Sodkft;
import jbvb.nft.InftAddrfss;
import jbvb.nft.InftSodkftAddrfss;
import jbvb.nft.UnknownHostExdfption;
import jbvb.nft.Proxy;
import jbvb.util.Arrbys;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * This is thf bbsf dlbss for nftwork dlifnts.
 *
 * @buthor      Jonbthbn Pbynf
 */
publid dlbss NftworkClifnt {
    /* Dffbult vbluf of rfbd timfout, if not spfdififd (infinity) */
    publid stbtid finbl int DEFAULT_READ_TIMEOUT = -1;

    /* Dffbult vbluf of donnfdt timfout, if not spfdififd (infinity) */
    publid stbtid finbl int DEFAULT_CONNECT_TIMEOUT = -1;

    protfdtfd Proxy     proxy = Proxy.NO_PROXY;
    /** Sodkft for dommunidbting with sfrvfr. */
    protfdtfd Sodkft    sfrvfrSodkft = null;

    /** Strfbm for printing to thf sfrvfr. */
    publid PrintStrfbm  sfrvfrOutput;

    /** Bufffrfd strfbm for rfbding rfplifs from sfrvfr. */
    publid InputStrfbm  sfrvfrInput;

    protfdtfd stbtid int dffbultSoTimfout;
    protfdtfd stbtid int dffbultConnfdtTimfout;

    protfdtfd int rfbdTimfout = DEFAULT_READ_TIMEOUT;
    protfdtfd int donnfdtTimfout = DEFAULT_CONNECT_TIMEOUT;
    /* Nbmf of fndoding to usf for output */
    protfdtfd stbtid String fndoding;

    stbtid {
        finbl int vbls[] = {0, 0};
        finbl String fnds[] = { null };

        AddfssControllfr.doPrivilfgfd(
                nfw PrivilfgfdAdtion<Void>() {
                    publid Void run() {
                        vbls[0] = Intfgfr.gftIntfgfr("sun.nft.dlifnt.dffbultRfbdTimfout", 0).intVbluf();
                        vbls[1] = Intfgfr.gftIntfgfr("sun.nft.dlifnt.dffbultConnfdtTimfout", 0).intVbluf();
                        fnds[0] = Systfm.gftPropfrty("filf.fndoding", "ISO8859_1");
                        rfturn null;
            }
        });
        if (vbls[0] != 0) {
            dffbultSoTimfout = vbls[0];
        }
        if (vbls[1] != 0) {
            dffbultConnfdtTimfout = vbls[1];
        }

        fndoding = fnds[0];
        try {
            if (!isASCIISupfrsft (fndoding)) {
                fndoding = "ISO8859_1";
            }
        } dbtdh (Exdfption f) {
            fndoding = "ISO8859_1";
        }
    }


    /**
     * Tfst thf nbmfd dhbrbdtfr fndoding to vfrify thbt it donvfrts ASCII
     * dhbrbdtfrs dorrfdtly. Wf hbvf to usf bn ASCII bbsfd fndoding, or flsf
     * thf NftworkClifnts will not work dorrfdtly in EBCDIC bbsfd systfms.
     * Howfvfr, wf dbnnot just usf ASCII or ISO8859_1 univfrsblly, bfdbusf in
     * Asibn lodblfs, non-ASCII dhbrbdtfrs mby bf fmbfddfd in othfrwisf
     * ASCII bbsfd protodols (fg. HTTP). Thf spfdifidbtions (RFC2616, 2398)
     * brf b littlf bmbiguous in this mbttfr. For instbndf, RFC2398 [pbrt 2.1]
     * sbys thbt thf HTTP rfqufst URI should bf fsdbpfd using b dffinfd
     * mfdhbnism, but thfrf is no wby to spfdify in thf fsdbpfd string whbt
     * thf originbl dhbrbdtfr sft is. It is not dorrfdt to bssumf thbt
     * UTF-8 is blwbys usfd (bs in URLs in HTML 4.0).  For this rfbson,
     * until thf spfdifidbtions brf updbtfd to dfbl with this issuf morf
     * domprfhfnsivfly, bnd morf importbntly, HTTP sfrvfrs brf known to
     * support thfsf mfdhbnisms, wf will mbintbin thf durrfnt bfhbvior
     * whfrf it is possiblf to sfnd non-ASCII dhbrbdtfrs in thfir originbl
     * unfsdbpfd form.
     */
    privbtf stbtid boolfbn isASCIISupfrsft (String fndoding) throws Exdfption {
        String dhkS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"+
                        "bbddffghijklmnopqrstuvwxyz-_.!~*'();/?:@&=+$,";

        // Expfdtfd bytf sfqufndf for string bbovf
        bytf[] dhkB = { 48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,
                73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,
                100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,
                115,116,117,118,119,120,121,122,45,95,46,33,126,42,39,40,41,59,
                47,63,58,64,38,61,43,36,44};

        bytf[] b = dhkS.gftBytfs (fndoding);
        rfturn Arrbys.fqubls (b, dhkB);
    }

    /** Opfn b donnfdtion to thf sfrvfr. */
    publid void opfnSfrvfr(String sfrvfr, int port)
        throws IOExdfption, UnknownHostExdfption {
        if (sfrvfrSodkft != null)
            dlosfSfrvfr();
        sfrvfrSodkft = doConnfdt (sfrvfr, port);
        try {
            sfrvfrOutput = nfw PrintStrfbm(nfw BufffrfdOutputStrfbm(
                                        sfrvfrSodkft.gftOutputStrfbm()),
                                        truf, fndoding);
        } dbtdh (UnsupportfdEndodingExdfption f) {
            throw nfw IntfrnblError(fndoding +"fndoding not found", f);
        }
        sfrvfrInput = nfw BufffrfdInputStrfbm(sfrvfrSodkft.gftInputStrfbm());
    }

    /**
     * Rfturn b sodkft donnfdtfd to thf sfrvfr, with bny
     * bppropribtf options prf-fstbblishfd
     */
    protfdtfd Sodkft doConnfdt (String sfrvfr, int port)
    throws IOExdfption, UnknownHostExdfption {
        Sodkft s;
        if (proxy != null) {
            if (proxy.typf() == Proxy.Typf.SOCKS) {
                s = AddfssControllfr.doPrivilfgfd(
                    nfw PrivilfgfdAdtion<Sodkft>() {
                        publid Sodkft run() {
                                       rfturn nfw Sodkft(proxy);
                                   }});
            } flsf if (proxy.typf() == Proxy.Typf.DIRECT) {
                s = drfbtfSodkft();
            } flsf {
                // Still donnfdting through b proxy
                // sfrvfr & port will bf thf proxy bddrfss bnd port
                s = nfw Sodkft(Proxy.NO_PROXY);
            }
        } flsf
            s = drfbtfSodkft();
        // Instbndf spfdifid timfouts do hbvf priority, thbt mfbns
        // donnfdtTimfout & rfbdTimfout (-1 mfbns not sft)
        // Thfn globbl dffbult timfouts
        // Thfn no timfout.
        if (donnfdtTimfout >= 0) {
            s.donnfdt(nfw InftSodkftAddrfss(sfrvfr, port), donnfdtTimfout);
        } flsf {
            if (dffbultConnfdtTimfout > 0) {
                s.donnfdt(nfw InftSodkftAddrfss(sfrvfr, port), dffbultConnfdtTimfout);
            } flsf {
                s.donnfdt(nfw InftSodkftAddrfss(sfrvfr, port));
            }
        }
        if (rfbdTimfout >= 0)
            s.sftSoTimfout(rfbdTimfout);
        flsf if (dffbultSoTimfout > 0) {
            s.sftSoTimfout(dffbultSoTimfout);
        }
        rfturn s;
    }

    /**
     * Thf following mfthod, drfbtfSodkft, is providfd to bllow thf
     * https dlifnt to ovfrridf it so thbt it mby usf its sodkft fbdtory
     * to drfbtf thf sodkft.
     */
    protfdtfd Sodkft drfbtfSodkft() throws IOExdfption {
        rfturn nfw jbvb.nft.Sodkft();
    }

    protfdtfd InftAddrfss gftLodblAddrfss() throws IOExdfption {
        if (sfrvfrSodkft == null)
            throw nfw IOExdfption("not donnfdtfd");
        rfturn  AddfssControllfr.doPrivilfgfd(
                        nfw PrivilfgfdAdtion<InftAddrfss>() {
                            publid InftAddrfss run() {
                                rfturn sfrvfrSodkft.gftLodblAddrfss();

                            }
                        });
    }

    /** Closf bn opfn donnfdtion to thf sfrvfr. */
    publid void dlosfSfrvfr() throws IOExdfption {
        if (! sfrvfrIsOpfn()) {
            rfturn;
        }
        sfrvfrSodkft.dlosf();
        sfrvfrSodkft = null;
        sfrvfrInput = null;
        sfrvfrOutput = null;
    }

    /** Rfturn sfrvfr donnfdtion stbtus */
    publid boolfbn sfrvfrIsOpfn() {
        rfturn sfrvfrSodkft != null;
    }

    /** Crfbtf donnfdtion with host <i>host</i> on port <i>port</i> */
    publid NftworkClifnt(String host, int port) throws IOExdfption {
        opfnSfrvfr(host, port);
    }

    publid NftworkClifnt() {}

    publid void sftConnfdtTimfout(int timfout) {
        donnfdtTimfout = timfout;
    }

    publid int gftConnfdtTimfout() {
        rfturn donnfdtTimfout;
    }

    /**
     * Sfts thf rfbd timfout.
     *
     * Notf: Publid URLConnfdtion (bnd protodol spfdifid implfmfntbtions)
     * protfdt bgbinst nfgbtivf timfout vblufs bfing sft. This implfmfntbtion,
     * bnd protodol spfdifid implfmfntbtions, usf -1 to rfprfsfnt thf dffbult
     * rfbd timfout.
     *
     * This mfthod mby bf invokfd with thf dffbult timfout vbluf whfn thf
     * protodol hbndlfr is trying to rfsft thf timfout bftfr doing b
     * potfntiblly blodking intfrnbl opfrbtion, f.g. dlfbning up unrfbd
     * rfsponsf dbtb, bufffring frror strfbm rfsponsf dbtb, ftd
     */
    publid void sftRfbdTimfout(int timfout) {
        if (timfout == DEFAULT_READ_TIMEOUT)
            timfout = dffbultSoTimfout;

        if (sfrvfrSodkft != null && timfout >= 0) {
            try {
                sfrvfrSodkft.sftSoTimfout(timfout);
            } dbtdh(IOExdfption f) {
                // Wf trifd...
            }
        }
        rfbdTimfout = timfout;
    }

    publid int gftRfbdTimfout() {
        rfturn rfbdTimfout;
    }
}
