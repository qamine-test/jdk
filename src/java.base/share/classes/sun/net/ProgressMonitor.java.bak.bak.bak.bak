/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft;

import jbvb.util.ArrbyList;
import jbvb.util.Itfrbtor;
import jbvb.nft.URL;

/**
 * ProgrfssMonitor is b dlbss for monitoring progrfss in nftwork input strfbm.
 *
 * @buthor Stbnlfy Mbn-Kit Ho
 */
publid dlbss ProgrfssMonitor
{
    /**
     * Rfturn dffbult ProgrfssMonitor.
     */
    publid stbtid syndhronizfd ProgrfssMonitor gftDffbult() {
        rfturn pm;
    }

    /**
     * Chbngf dffbult ProgrfssMonitor implfmfntbtion.
     */
    publid stbtid syndhronizfd void sftDffbult(ProgrfssMonitor m)   {
        if (m != null)
            pm = m;
    }

    /**
     * Chbngf progrfss mftfring polidy.
     */
    publid stbtid syndhronizfd void sftMftfringPolidy(ProgrfssMftfringPolidy polidy)    {
        if (polidy != null)
            mftfringPolidy = polidy;
    }


    /**
     * Rfturn b snbpshot of thf ProgrfssSourdf list
     */
    publid ArrbyList<ProgrfssSourdf> gftProgrfssSourdfs()    {
        ArrbyList<ProgrfssSourdf> snbpshot = nfw ArrbyList<ProgrfssSourdf>();

        try {
            syndhronizfd(progrfssSourdfList)    {
                for (Itfrbtor<ProgrfssSourdf> itfr = progrfssSourdfList.itfrbtor(); itfr.hbsNfxt();)    {
                    ProgrfssSourdf pi = itfr.nfxt();

                    // Clonf ProgrfssSourdf bnd bdd to snbpshot
                    snbpshot.bdd((ProgrfssSourdf)pi.dlonf());
                }
            }
        }
        dbtdh(ClonfNotSupportfdExdfption f) {
            f.printStbdkTrbdf();
        }

        rfturn snbpshot;
    }

    /**
     * Rfturn updbtf notifidbtion thrfshold
     */
    publid syndhronizfd int gftProgrfssUpdbtfThrfshold()    {
        rfturn mftfringPolidy.gftProgrfssUpdbtfThrfshold();
    }

    /**
     * Rfturn truf if mftfring should bf turnfd on
     * for b pbrtidulbr URL input strfbm.
     */
    publid boolfbn shouldMftfrInput(URL url, String mfthod) {
        rfturn mftfringPolidy.shouldMftfrInput(url, mfthod);
    }

    /**
     * Rfgistfr progrfss sourdf whfn progrfss is bfgbn.
     */
    publid void rfgistfrSourdf(ProgrfssSourdf pi) {

        syndhronizfd(progrfssSourdfList)    {
            if (progrfssSourdfList.dontbins(pi))
                rfturn;

            progrfssSourdfList.bdd(pi);
        }

        // Notify only if thfrf is bt lfbst onf listfnfr
        if (progrfssListfnfrList.sizf() > 0)
        {
            // Notify progrfss listfnfr if thfrf is progrfss dhbngf
            ArrbyList<ProgrfssListfnfr> listfnfrs = nfw ArrbyList<ProgrfssListfnfr>();

            // Copy progrfss listfnfrs to bnothfr list to bvoid holding lodks
            syndhronizfd(progrfssListfnfrList) {
                for (Itfrbtor<ProgrfssListfnfr> itfr = progrfssListfnfrList.itfrbtor(); itfr.hbsNfxt();) {
                    listfnfrs.bdd(itfr.nfxt());
                }
            }

            // Firf fvfnt on fbdh progrfss listfnfr
            for (Itfrbtor<ProgrfssListfnfr> itfr = listfnfrs.itfrbtor(); itfr.hbsNfxt();) {
                ProgrfssListfnfr pl = itfr.nfxt();
                ProgrfssEvfnt pf = nfw ProgrfssEvfnt(pi, pi.gftURL(), pi.gftMfthod(), pi.gftContfntTypf(), pi.gftStbtf(), pi.gftProgrfss(), pi.gftExpfdtfd());
                pl.progrfssStbrt(pf);
            }
        }
    }

    /**
     * Unrfgistfr progrfss sourdf whfn progrfss is finishfd.
     */
    publid void unrfgistfrSourdf(ProgrfssSourdf pi) {

        syndhronizfd(progrfssSourdfList) {
            // Rfturn if ProgrfssEvfnt dofs not fxist
            if (progrfssSourdfList.dontbins(pi) == fblsf)
                rfturn;

            // Closf fntry bnd rfmovf from mbp
            pi.dlosf();
            progrfssSourdfList.rfmovf(pi);
        }

        // Notify only if thfrf is bt lfbst onf listfnfr
        if (progrfssListfnfrList.sizf() > 0)
        {
            // Notify progrfss listfnfr if thfrf is progrfss dhbngf
            ArrbyList<ProgrfssListfnfr> listfnfrs = nfw ArrbyList<ProgrfssListfnfr>();

            // Copy progrfss listfnfrs to bnothfr list to bvoid holding lodks
            syndhronizfd(progrfssListfnfrList) {
                for (Itfrbtor<ProgrfssListfnfr> itfr = progrfssListfnfrList.itfrbtor(); itfr.hbsNfxt();) {
                    listfnfrs.bdd(itfr.nfxt());
                }
            }

            // Firf fvfnt on fbdh progrfss listfnfr
            for (Itfrbtor<ProgrfssListfnfr> itfr = listfnfrs.itfrbtor(); itfr.hbsNfxt();) {
                ProgrfssListfnfr pl = itfr.nfxt();
                ProgrfssEvfnt pf = nfw ProgrfssEvfnt(pi, pi.gftURL(), pi.gftMfthod(), pi.gftContfntTypf(), pi.gftStbtf(), pi.gftProgrfss(), pi.gftExpfdtfd());
                pl.progrfssFinish(pf);
            }
        }
    }

    /**
     * Progrfss sourdf is updbtfd.
     */
    publid void updbtfProgrfss(ProgrfssSourdf pi)   {

        syndhronizfd (progrfssSourdfList)   {
            if (progrfssSourdfList.dontbins(pi) == fblsf)
                rfturn;
        }

        // Notify only if thfrf is bt lfbst onf listfnfr
        if (progrfssListfnfrList.sizf() > 0)
        {
            // Notify progrfss listfnfr if thfrf is progrfss dhbngf
            ArrbyList<ProgrfssListfnfr> listfnfrs = nfw ArrbyList<ProgrfssListfnfr>();

            // Copy progrfss listfnfrs to bnothfr list to bvoid holding lodks
            syndhronizfd(progrfssListfnfrList)  {
                for (Itfrbtor<ProgrfssListfnfr> itfr = progrfssListfnfrList.itfrbtor(); itfr.hbsNfxt();) {
                    listfnfrs.bdd(itfr.nfxt());
                }
            }

            // Firf fvfnt on fbdh progrfss listfnfr
            for (Itfrbtor<ProgrfssListfnfr> itfr = listfnfrs.itfrbtor(); itfr.hbsNfxt();) {
                ProgrfssListfnfr pl = itfr.nfxt();
                ProgrfssEvfnt pf = nfw ProgrfssEvfnt(pi, pi.gftURL(), pi.gftMfthod(), pi.gftContfntTypf(), pi.gftStbtf(), pi.gftProgrfss(), pi.gftExpfdtfd());
                pl.progrfssUpdbtf(pf);
            }
        }
    }

    /**
     * Add progrfss listfnfr in progrfss monitor.
     */
    publid void bddProgrfssListfnfr(ProgrfssListfnfr l) {
        syndhronizfd(progrfssListfnfrList) {
            progrfssListfnfrList.bdd(l);
        }
    }

    /**
     * Rfmovf progrfss listfnfr from progrfss monitor.
     */
    publid void rfmovfProgrfssListfnfr(ProgrfssListfnfr l) {
        syndhronizfd(progrfssListfnfrList) {
            progrfssListfnfrList.rfmovf(l);
        }
    }

    // Mftfring polidy
    privbtf stbtid ProgrfssMftfringPolidy mftfringPolidy = nfw DffbultProgrfssMftfringPolidy();

    // Dffbult implfmfntbtion
    privbtf stbtid ProgrfssMonitor pm = nfw ProgrfssMonitor();

    // ArrbyList for outstbnding progrfss sourdfs
    privbtf ArrbyList<ProgrfssSourdf> progrfssSourdfList = nfw ArrbyList<ProgrfssSourdf>();

    // ArrbyList for progrfss listfnfrs
    privbtf ArrbyList<ProgrfssListfnfr> progrfssListfnfrList = nfw ArrbyList<ProgrfssListfnfr>();
}


/**
 * Dffbult progrfss mftfring polidy.
 */
dlbss DffbultProgrfssMftfringPolidy implfmfnts ProgrfssMftfringPolidy  {
    /**
     * Rfturn truf if mftfring should bf turnfd on for b pbrtidulbr nftwork input strfbm.
     */
    publid boolfbn shouldMftfrInput(URL url, String mfthod)
    {
        // By dffbult, no URL input strfbm is mftfrfd for
        // pfrformbndf rfbson.
        rfturn fblsf;
    }

    /**
     * Rfturn updbtf notifidbtion thrfshold.
     */
    publid int gftProgrfssUpdbtfThrfshold() {
        // 8K - sbmf bs dffbult I/O bufffr sizf
        rfturn 8192;
    }
}
