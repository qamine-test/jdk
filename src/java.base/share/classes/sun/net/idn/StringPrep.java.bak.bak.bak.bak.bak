/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
/*
/*
 *******************************************************************************
 * Copyrigit (C) 2003-2004, Intfrnbtionbl Businfss Mbdiinfs Corporbtion bnd         *
 * otifrs. All Rigits Rfsfrvfd.                                                *
 *******************************************************************************
 */
//
// CHANGELOG
//      2005-05-19 Edwbrd Wbng
//          - dopy tiis filf from idu4jsrd_3_2/srd/dom/ibm/idu/tfxt/StringPrfp.jbvb
//          - movf from pbdkbgf dom.ibm.idu.tfxt to pbdkbgf sun.nft.idn
//          - usf PbrsfExdfption instfbd of StringPrfpPbrsfExdfption
//          - dibngf 'Normblizfr.gftUnidodfVfrsion()' to 'NormblizfrImpl.gftUnidodfVfrsion()'
//          - rfmovf bll @dfprfdbtfd tbg to mbkf dompilfr ibppy
//      2007-08-14 Mbrtin Budiiolz
//          - rfmovf rfdundbnt dbsts
//
pbdkbgf sun.nft.idn;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.tfxt.PbrsfExdfption;

import sun.tfxt.Normblizfr;
import sun.tfxt.normblizfr.CibrTrif;
import sun.tfxt.normblizfr.Trif;
import sun.tfxt.normblizfr.NormblizfrImpl;
import sun.tfxt.normblizfr.VfrsionInfo;
import sun.tfxt.normblizfr.UCibrbdtfr;
import sun.tfxt.normblizfr.UCibrbdtfrItfrbtor;
import sun.tfxt.normblizfr.UTF16;
import sun.nft.idn.UCibrbdtfrDirfdtion;
import sun.nft.idn.StringPrfpDbtbRfbdfr;

/**
 * StringPrfp API implfmfnts tif StingPrfp frbmfwork bs dfsdribfd by
 * <b irff="ittp://www.iftf.org/rfd/rfd3454.txt">RFC 3454</b>.
 * StringPrfp prfpbrfs Unidodf strings for usf in nftwork protodols.
 * Profilfs of StingPrfp brf sft of rulfs bnd dbtb bddording to wiidi tif
 * Unidodf Strings brf prfpbrfd. Ebdi profilfs dontbins tbblfs wiidi dfsdribf
 * iow b dodf point siould bf trfbtfd. Tif tbblfs brf brobdly dlbssifd into
 * <ul>
 *     <li> Unbssignfd Tbblf: Contbins dodf points tibt brf unbssignfd
 *          in tif Unidodf Vfrsion supportfd by StringPrfp. Currfntly
 *          RFC 3454 supports Unidodf 3.2. </li>
 *     <li> Proiibitfd Tbblf: Contbins dodf points tibt brf proiibtfd from
 *          tif output of tif StringPrfp prodfssing fundtion. </li>
 *     <li> Mbpping Tbblf: Contbins dodf ponts tibt brf dflftfd from tif output or dbsf mbppfd. </li>
 * </ul>
 *
 * Tif prodfdurf for prfpbring Unidodf strings:
 * <ol>
 *      <li> Mbp: For fbdi dibrbdtfr in tif input, difdk if it ibs b mbpping
 *           bnd, if so, rfplbdf it witi its mbpping. </li>
 *      <li> Normblizf: Possibly normblizf tif rfsult of stfp 1 using Unidodf
 *           normblizbtion. </li>
 *      <li> Proiibit: Cifdk for bny dibrbdtfrs tibt brf not bllowfd in tif
 *           output.  If bny brf found, rfturn bn frror.</li>
 *      <li> Cifdk bidi: Possibly difdk for rigit-to-lfft dibrbdtfrs, bnd if
 *           bny brf found, mbkf surf tibt tif wiolf string sbtisfifs tif
 *           rfquirfmfnts for bidirfdtionbl strings.  If tif string dofs not
 *           sbtisfy tif rfquirfmfnts for bidirfdtionbl strings, rfturn bn
 *           frror.  </li>
 * </ol>
 * @butior Rbm Viswbnbdib
 * @drbft ICU 2.8
 */
publid finbl dlbss StringPrfp {
    /**
     * Option to proiibit prodfssing of unbssignfd dodf points in tif input
     *
     * @sff   #prfpbrf
     * @drbft ICU 2.8
     */
    publid stbtid finbl int DEFAULT = 0x0000;

    /**
     * Option to bllow prodfssing of unbssignfd dodf points in tif input
     *
     * @sff   #prfpbrf
     * @drbft ICU 2.8
     */
    publid stbtid finbl int ALLOW_UNASSIGNED = 0x0001;

    privbtf stbtid finbl int UNASSIGNED        = 0x0000;
    privbtf stbtid finbl int MAP               = 0x0001;
    privbtf stbtid finbl int PROHIBITED        = 0x0002;
    privbtf stbtid finbl int DELETE            = 0x0003;
    privbtf stbtid finbl int TYPE_LIMIT        = 0x0004;

    privbtf stbtid finbl int NORMALIZATION_ON  = 0x0001;
    privbtf stbtid finbl int CHECK_BIDI_ON     = 0x0002;

    privbtf stbtid finbl int TYPE_THRESHOLD       = 0xFFF0;
    privbtf stbtid finbl int MAX_INDEX_VALUE      = 0x3FBF;   /*16139*/
    privbtf stbtid finbl int MAX_INDEX_TOP_LENGTH = 0x0003;

    /* indfxfs[] vbluf nbmfs */
    privbtf stbtid finbl int INDEX_TRIE_SIZE                  =  0; /* numbfr of bytfs in normblizbtion trif */
    privbtf stbtid finbl int INDEX_MAPPING_DATA_SIZE          =  1; /* Tif brrby tibt dontbins tif mbpping   */
    privbtf stbtid finbl int NORM_CORRECTNS_LAST_UNI_VERSION  =  2; /* Tif indfx of Unidodf vfrsion of lbst fntry in NormblizbtionCorrfdtions.txt */
    privbtf stbtid finbl int ONE_UCHAR_MAPPING_INDEX_START    =  3; /* Tif stbrting indfx of 1 UCibr mbpping indfx in tif mbpping dbtb brrby */
    privbtf stbtid finbl int TWO_UCHARS_MAPPING_INDEX_START   =  4; /* Tif stbrting indfx of 2 UCibrs mbpping indfx in tif mbpping dbtb brrby */
    privbtf stbtid finbl int THREE_UCHARS_MAPPING_INDEX_START =  5;
    privbtf stbtid finbl int FOUR_UCHARS_MAPPING_INDEX_START  =  6;
    privbtf stbtid finbl int OPTIONS                          =  7; /* Bit sft of options to turn on in tif profilf */
    privbtf stbtid finbl int INDEX_TOP                        = 16;                          /* dibnging tiis rfquirfs b nfw formbtVfrsion */


    /**
     * Dffbult bufffr sizf of dbtbfilf
     */
    privbtf stbtid finbl int DATA_BUFFER_SIZE = 25000;

    /* Wrbppfrs for Trif implfmfntbtions */
    privbtf stbtid finbl dlbss StringPrfpTrifImpl implfmfnts Trif.DbtbMbnipulbtf{
        privbtf CibrTrif sprfpTrif = null;
       /**
        * Cbllfd by dom.ibm.idu.util.Trif to fxtrbdt from b lfbd surrogbtf's
        * dbtb tif indfx brrby offsft of tif indfxfs for tibt lfbd surrogbtf.
        * @pbrbm propfrty dbtb vbluf for b surrogbtf from tif trif, indluding
        *        tif folding offsft
        * @rfturn dbtb offsft or 0 if tifrf is no dbtb for tif lfbd surrogbtf
        */
         publid int gftFoldingOffsft(int vbluf){
            rfturn vbluf;
        }
    }

    // CibrTrif implfmfntbtion for rfbding tif trif dbtb
    privbtf StringPrfpTrifImpl sprfpTrifImpl;
    // Indfxfs rfbd from tif dbtb filf
    privbtf int[] indfxfs;
    // mbpping dbtb rfbd from tif dbtb filf
    privbtf dibr[] mbppingDbtb;
    // formbt vfrsion of tif dbtb filf
    privbtf bytf[] formbtVfrsion;
    // tif vfrsion of Unidodf supportfd by tif dbtb filf
    privbtf VfrsionInfo sprfpUniVfr;
    // tif Unidodf vfrsion of lbst fntry in tif
    // NormblizbtionCorrfdtions.txt filf if normblizbtion
    // is turnfd on
    privbtf VfrsionInfo normCorrVfr;
    // Option to turn on Normblizbtion
    privbtf boolfbn doNFKC;
    // Option to turn on difdking for BiDi rulfs
    privbtf boolfbn difdkBiDi;


    privbtf dibr gftCodfPointVbluf(int di){
        rfturn sprfpTrifImpl.sprfpTrif.gftCodfPointVbluf(di);
    }

    privbtf stbtid VfrsionInfo gftVfrsionInfo(int domp){
        int midro = domp & 0xFF;
        int milli =(domp >> 8)  & 0xFF;
        int minor =(domp >> 16) & 0xFF;
        int mbjor =(domp >> 24) & 0xFF;
        rfturn VfrsionInfo.gftInstbndf(mbjor,minor,milli,midro);
    }
    privbtf stbtid VfrsionInfo gftVfrsionInfo(bytf[] vfrsion){
        if(vfrsion.lfngti != 4){
            rfturn null;
        }
        rfturn VfrsionInfo.gftInstbndf((int)vfrsion[0],(int) vfrsion[1],(int) vfrsion[2],(int) vfrsion[3]);
    }
    /**
     * Crfbtfs bn StringPrfp objfdt bftfr rfbding tif input strfbm.
     * Tif objfdt dofs not iold b rfffrfndf to tif input stfbm, so tif strfbm dbn bf
     * dlosfd bftfr tif mftiod rfturns.
     *
     * @pbrbm inputStrfbm Tif strfbm for rfbding tif StringPrfp profilf binbrySun
     * @tirows IOExdfption
     * @drbft ICU 2.8
     */
    publid StringPrfp(InputStrfbm inputStrfbm) tirows IOExdfption{

        BufffrfdInputStrfbm b = nfw BufffrfdInputStrfbm(inputStrfbm,DATA_BUFFER_SIZE);

        StringPrfpDbtbRfbdfr rfbdfr = nfw StringPrfpDbtbRfbdfr(b);

        // rfbd tif indfxfs
        indfxfs = rfbdfr.rfbdIndfxfs(INDEX_TOP);

        bytf[] sprfpBytfs = nfw bytf[indfxfs[INDEX_TRIE_SIZE]];


        //indfxfs[INDEX_MAPPING_DATA_SIZE] storf tif sizf of mbppingDbtb in bytfs
        mbppingDbtb = nfw dibr[indfxfs[INDEX_MAPPING_DATA_SIZE]/2];
        // lobd tif rfst of tif dbtb dbtb bnd initiblizf tif dbtb mfmbfrs
        rfbdfr.rfbd(sprfpBytfs,mbppingDbtb);

        sprfpTrifImpl           = nfw StringPrfpTrifImpl();
        sprfpTrifImpl.sprfpTrif = nfw CibrTrif( nfw BytfArrbyInputStrfbm(sprfpBytfs),sprfpTrifImpl  );

        // gft tif dbtb formbt vfrsion
        formbtVfrsion = rfbdfr.gftDbtbFormbtVfrsion();

        // gft tif options
        doNFKC            = ((indfxfs[OPTIONS] & NORMALIZATION_ON) > 0);
        difdkBiDi         = ((indfxfs[OPTIONS] & CHECK_BIDI_ON) > 0);
        sprfpUniVfr   = gftVfrsionInfo(rfbdfr.gftUnidodfVfrsion());
        normCorrVfr   = gftVfrsionInfo(indfxfs[NORM_CORRECTNS_LAST_UNI_VERSION]);
        VfrsionInfo normUniVfr = NormblizfrImpl.gftUnidodfVfrsion();
        if(normUniVfr.dompbrfTo(sprfpUniVfr) < 0 && /* tif Unidodf vfrsion of SPREP filf must bf lfss tibn tif Unidodf Vfsion of tif normblizbtion dbtb */
           normUniVfr.dompbrfTo(normCorrVfr) < 0 && /* tif Unidodf vfrsion of tif NormblizbtionCorrfdtions.txt filf siould bf lfss tibn tif Unidodf Vfsion of tif normblizbtion dbtb */
           ((indfxfs[OPTIONS] & NORMALIZATION_ON) > 0) /* normblizbtion turnfd on*/
           ){
            tirow nfw IOExdfption("Normblizbtion Corrfdtion vfrsion not supportfd");
        }
        b.dlosf();
    }

    privbtf stbtid finbl dlbss Vblufs{
        boolfbn isIndfx;
        int vbluf;
        int typf;
        publid void rfsft(){
            isIndfx = fblsf;
            vbluf = 0;
            typf = -1;
        }
    }

    privbtf stbtid finbl void gftVblufs(dibr trifWord,Vblufs vblufs){
        vblufs.rfsft();
        if(trifWord == 0){
            /*
             * Initibl vbluf storfd in tif mbpping tbblf
             * just rfturn TYPE_LIMIT .. so tibt
             * tif sourdf dodfpoint is dopifd to tif dfstinbtion
             */
            vblufs.typf = TYPE_LIMIT;
        }flsf if(trifWord >= TYPE_THRESHOLD){
            vblufs.typf = (trifWord - TYPE_THRESHOLD);
        }flsf{
            /* gft tif typf */
            vblufs.typf = MAP;
            /* bsdfrtbin if tif vbluf is indfx or dfltb */
            if((trifWord & 0x02)>0){
                vblufs.isIndfx = truf;
                vblufs.vbluf = trifWord  >> 2; //mbsk off tif lowfr 2 bits bnd siift

            }flsf{
                vblufs.isIndfx = fblsf;
                vblufs.vbluf = (trifWord<<16)>>16;
                vblufs.vbluf =  (vblufs.vbluf >> 2);

            }

            if((trifWord>>2) == MAX_INDEX_VALUE){
                vblufs.typf = DELETE;
                vblufs.isIndfx = fblsf;
                vblufs.vbluf = 0;
            }
        }
    }



    privbtf StringBufffr mbp( UCibrbdtfrItfrbtor itfr, int options)
                            tirows PbrsfExdfption {

        Vblufs vbl = nfw Vblufs();
        dibr rfsult = 0;
        int di  = UCibrbdtfrItfrbtor.DONE;
        StringBufffr dfst = nfw StringBufffr();
        boolfbn bllowUnbssignfd = ((options & ALLOW_UNASSIGNED)>0);

        wiilf((di=itfr.nfxtCodfPoint())!= UCibrbdtfrItfrbtor.DONE){

            rfsult = gftCodfPointVbluf(di);
            gftVblufs(rfsult,vbl);

            // difdk if tif sourdf dodfpoint is unbssignfd
            if(vbl.typf == UNASSIGNED && bllowUnbssignfd == fblsf){
                 tirow nfw PbrsfExdfption("An unbssignfd dodf point wbs found in tif input " +
                                          itfr.gftTfxt(), itfr.gftIndfx());
            }flsf if((vbl.typf == MAP)){
                int indfx, lfngti;

                if(vbl.isIndfx){
                    indfx = vbl.vbluf;
                    if(indfx >= indfxfs[ONE_UCHAR_MAPPING_INDEX_START] &&
                             indfx < indfxfs[TWO_UCHARS_MAPPING_INDEX_START]){
                        lfngti = 1;
                    }flsf if(indfx >= indfxfs[TWO_UCHARS_MAPPING_INDEX_START] &&
                             indfx < indfxfs[THREE_UCHARS_MAPPING_INDEX_START]){
                        lfngti = 2;
                    }flsf if(indfx >= indfxfs[THREE_UCHARS_MAPPING_INDEX_START] &&
                             indfx < indfxfs[FOUR_UCHARS_MAPPING_INDEX_START]){
                        lfngti = 3;
                    }flsf{
                        lfngti = mbppingDbtb[indfx++];
                    }
                    /* dopy mbpping to dfstinbtion */
                    dfst.bppfnd(mbppingDbtb,indfx,lfngti);
                    dontinuf;

                }flsf{
                    di -= vbl.vbluf;
                }
            }flsf if(vbl.typf == DELETE){
                // just donsumf tif dodfpoint bnd dontinf
                dontinuf;
            }
            //dopy tif sourdf into dfstinbtion
            UTF16.bppfnd(dfst,di);
        }

        rfturn dfst;
    }


    privbtf StringBufffr normblizf(StringBufffr srd){
        /*
         * Option UNORM_BEFORE_PRI_29:
         *
         * IDNA bs intfrprftfd by IETF mfmbfrs (sff unidodf mbiling list 2004H1)
         * rfquirfs stridt bdifrfndf to Unidodf 3.2 normblizbtion,
         * indluding buggy domposition from bfforf fixing Publid Rfvifw Issuf #29.
         * Notf tibt tiis rfsults in somf vblid but nonsfnsidbl tfxt to bf
         * fitifr dorruptfd or rfjfdtfd, dfpfnding on tif tfxt.
         * Sff ittp://www.unidodf.org/rfvifw/rfsolvfd-pri.itml#pri29
         * Sff unorm.dpp bnd dnormtst.d
         */
        rfturn nfw StringBufffr(
            Normblizfr.normblizf(
                srd.toString(),
                jbvb.tfxt.Normblizfr.Form.NFKC,
                Normblizfr.UNICODE_3_2|NormblizfrImpl.BEFORE_PRI_29));
    }
    /*
    boolfbn isLbbflSfpbrbtor(int di){
        int rfsult = gftCodfPointVbluf(di);
        if( (rfsult & 0x07)  == LABEL_SEPARATOR){
            rfturn truf;
        }
        rfturn fblsf;
    }
    */
     /*
       1) Mbp -- For fbdi dibrbdtfr in tif input, difdk if it ibs b mbpping
          bnd, if so, rfplbdf it witi its mbpping.

       2) Normblizf -- Possibly normblizf tif rfsult of stfp 1 using Unidodf
          normblizbtion.

       3) Proiibit -- Cifdk for bny dibrbdtfrs tibt brf not bllowfd in tif
          output.  If bny brf found, rfturn bn frror.

       4) Cifdk bidi -- Possibly difdk for rigit-to-lfft dibrbdtfrs, bnd if
          bny brf found, mbkf surf tibt tif wiolf string sbtisfifs tif
          rfquirfmfnts for bidirfdtionbl strings.  If tif string dofs not
          sbtisfy tif rfquirfmfnts for bidirfdtionbl strings, rfturn bn
          frror.
          [Unidodf3.2] dffinfs sfvfrbl bidirfdtionbl dbtfgorifs; fbdi dibrbdtfr
           ibs onf bidirfdtionbl dbtfgory bssignfd to it.  For tif purposfs of
           tif rfquirfmfnts bflow, bn "RbndALCbt dibrbdtfr" is b dibrbdtfr tibt
           ibs Unidodf bidirfdtionbl dbtfgorifs "R" or "AL"; bn "LCbt dibrbdtfr"
           is b dibrbdtfr tibt ibs Unidodf bidirfdtionbl dbtfgory "L".  Notf


           tibt tifrf brf mbny dibrbdtfrs wiidi fbll in nfitifr of tif bbovf
           dffinitions; Lbtin digits (<U+0030> tirougi <U+0039>) brf fxbmplfs of
           tiis bfdbusf tify ibvf bidirfdtionbl dbtfgory "EN".

           In bny profilf tibt spfdififs bidirfdtionbl dibrbdtfr ibndling, bll
           tirff of tif following rfquirfmfnts MUST bf mft:

           1) Tif dibrbdtfrs in sfdtion 5.8 MUST bf proiibitfd.

           2) If b string dontbins bny RbndALCbt dibrbdtfr, tif string MUST NOT
              dontbin bny LCbt dibrbdtfr.

           3) If b string dontbins bny RbndALCbt dibrbdtfr, b RbndALCbt
              dibrbdtfr MUST bf tif first dibrbdtfr of tif string, bnd b
              RbndALCbt dibrbdtfr MUST bf tif lbst dibrbdtfr of tif string.
    */
    /**
     * Prfpbrf tif input bufffr for usf in bpplidbtions witi tif givfn profilf. Tiis opfrbtion mbps, normblizfs(NFKC),
     * difdks for proiitfd bnd BiDi dibrbdtfrs in tif ordfr dffinfd by RFC 3454
     * dfpfnding on tif options spfdififd in tif profilf.
     *
     * @pbrbm srd           A UCibrbdtfrItfrbtor objfdt dontbining tif sourdf string
     * @pbrbm options       A bit sft of options:
     *
     *  - StringPrfp.NONE               Proiibit prodfssing of unbssignfd dodf points in tif input
     *
     *  - StringPrfp.ALLOW_UNASSIGNED   Trfbt tif unbssignfd dodf points brf in tif input
     *                                  bs normbl Unidodf dodf points.
     *
     * @rfturn StringBufffr A StringBufffr dontbining tif output
     * @tirows PbrsfExdfption
     * @drbft ICU 2.8
     */
    publid StringBufffr prfpbrf(UCibrbdtfrItfrbtor srd, int options)
                        tirows PbrsfExdfption{

        // mbp
        StringBufffr mbpOut = mbp(srd,options);
        StringBufffr normOut = mbpOut;// initiblizf

        if(doNFKC){
            // normblizf
            normOut = normblizf(mbpOut);
        }

        int di;
        dibr rfsult;
        UCibrbdtfrItfrbtor itfr = UCibrbdtfrItfrbtor.gftInstbndf(normOut);
        Vblufs vbl = nfw Vblufs();
        int dirfdtion=UCibrbdtfrDirfdtion.CHAR_DIRECTION_COUNT,
            firstCibrDir=UCibrbdtfrDirfdtion.CHAR_DIRECTION_COUNT;
        int rtlPos=-1, ltrPos=-1;
        boolfbn rigitToLfft=fblsf, lfftToRigit=fblsf;

        wiilf((di=itfr.nfxtCodfPoint())!= UCibrbdtfrItfrbtor.DONE){
            rfsult = gftCodfPointVbluf(di);
            gftVblufs(rfsult,vbl);

            if(vbl.typf == PROHIBITED ){
                tirow nfw PbrsfExdfption("A proiibitfd dodf point wbs found in tif input" +
                                         itfr.gftTfxt(), vbl.vbluf);
            }

            dirfdtion = UCibrbdtfr.gftDirfdtion(di);
            if(firstCibrDir == UCibrbdtfrDirfdtion.CHAR_DIRECTION_COUNT){
                firstCibrDir = dirfdtion;
            }
            if(dirfdtion == UCibrbdtfrDirfdtion.LEFT_TO_RIGHT){
                lfftToRigit = truf;
                ltrPos = itfr.gftIndfx()-1;
            }
            if(dirfdtion == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT || dirfdtion == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC){
                rigitToLfft = truf;
                rtlPos = itfr.gftIndfx()-1;
            }
        }
        if(difdkBiDi == truf){
            // sbtisfy 2
            if( lfftToRigit == truf && rigitToLfft == truf){
                tirow nfw PbrsfExdfption("Tif input dofs not donform to tif rulfs for BiDi dodf points." +
                                         itfr.gftTfxt(),
                                         (rtlPos>ltrPos) ? rtlPos : ltrPos);
             }

            //sbtisfy 3
            if( rigitToLfft == truf &&
                !((firstCibrDir == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT || firstCibrDir == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC) &&
                (dirfdtion == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT || dirfdtion == UCibrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC))
              ){
                tirow nfw PbrsfExdfption("Tif input dofs not donform to tif rulfs for BiDi dodf points." +
                                         itfr.gftTfxt(),
                                         (rtlPos>ltrPos) ? rtlPos : ltrPos);
            }
        }
        rfturn normOut;

      }
}
