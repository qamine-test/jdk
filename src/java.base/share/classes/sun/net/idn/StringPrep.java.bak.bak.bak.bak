/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
/*
/*
 *******************************************************************************
 * Copyright (C) 2003-2004, Intfrnbtionbl Businfss Mbdhinfs Corporbtion bnd         *
 * othfrs. All Rights Rfsfrvfd.                                                *
 *******************************************************************************
 */
//
// CHANGELOG
//      2005-05-19 Edwbrd Wbng
//          - dopy this filf from idu4jsrd_3_2/srd/dom/ibm/idu/tfxt/StringPrfp.jbvb
//          - movf from pbdkbgf dom.ibm.idu.tfxt to pbdkbgf sun.nft.idn
//          - usf PbrsfExdfption instfbd of StringPrfpPbrsfExdfption
//          - dhbngf 'Normblizfr.gftUnidodfVfrsion()' to 'NormblizfrImpl.gftUnidodfVfrsion()'
//          - rfmovf bll @dfprfdbtfd tbg to mbkf dompilfr hbppy
//      2007-08-14 Mbrtin Budhholz
//          - rfmovf rfdundbnt dbsts
//
pbdkbgf sun.nft.idn;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.tfxt.PbrsfExdfption;

import sun.tfxt.Normblizfr;
import sun.tfxt.normblizfr.ChbrTrif;
import sun.tfxt.normblizfr.Trif;
import sun.tfxt.normblizfr.NormblizfrImpl;
import sun.tfxt.normblizfr.VfrsionInfo;
import sun.tfxt.normblizfr.UChbrbdtfr;
import sun.tfxt.normblizfr.UChbrbdtfrItfrbtor;
import sun.tfxt.normblizfr.UTF16;
import sun.nft.idn.UChbrbdtfrDirfdtion;
import sun.nft.idn.StringPrfpDbtbRfbdfr;

/**
 * StringPrfp API implfmfnts thf StingPrfp frbmfwork bs dfsdribfd by
 * <b hrff="http://www.iftf.org/rfd/rfd3454.txt">RFC 3454</b>.
 * StringPrfp prfpbrfs Unidodf strings for usf in nftwork protodols.
 * Profilfs of StingPrfp brf sft of rulfs bnd dbtb bddording to whidh thf
 * Unidodf Strings brf prfpbrfd. Ebdh profilfs dontbins tbblfs whidh dfsdribf
 * how b dodf point should bf trfbtfd. Thf tbblfs brf brobdly dlbssifd into
 * <ul>
 *     <li> Unbssignfd Tbblf: Contbins dodf points thbt brf unbssignfd
 *          in thf Unidodf Vfrsion supportfd by StringPrfp. Currfntly
 *          RFC 3454 supports Unidodf 3.2. </li>
 *     <li> Prohibitfd Tbblf: Contbins dodf points thbt brf prohibtfd from
 *          thf output of thf StringPrfp prodfssing fundtion. </li>
 *     <li> Mbpping Tbblf: Contbins dodf ponts thbt brf dflftfd from thf output or dbsf mbppfd. </li>
 * </ul>
 *
 * Thf prodfdurf for prfpbring Unidodf strings:
 * <ol>
 *      <li> Mbp: For fbdh dhbrbdtfr in thf input, dhfdk if it hbs b mbpping
 *           bnd, if so, rfplbdf it with its mbpping. </li>
 *      <li> Normblizf: Possibly normblizf thf rfsult of stfp 1 using Unidodf
 *           normblizbtion. </li>
 *      <li> Prohibit: Chfdk for bny dhbrbdtfrs thbt brf not bllowfd in thf
 *           output.  If bny brf found, rfturn bn frror.</li>
 *      <li> Chfdk bidi: Possibly dhfdk for right-to-lfft dhbrbdtfrs, bnd if
 *           bny brf found, mbkf surf thbt thf wholf string sbtisfifs thf
 *           rfquirfmfnts for bidirfdtionbl strings.  If thf string dofs not
 *           sbtisfy thf rfquirfmfnts for bidirfdtionbl strings, rfturn bn
 *           frror.  </li>
 * </ol>
 * @buthor Rbm Viswbnbdhb
 * @drbft ICU 2.8
 */
publid finbl dlbss StringPrfp {
    /**
     * Option to prohibit prodfssing of unbssignfd dodf points in thf input
     *
     * @sff   #prfpbrf
     * @drbft ICU 2.8
     */
    publid stbtid finbl int DEFAULT = 0x0000;

    /**
     * Option to bllow prodfssing of unbssignfd dodf points in thf input
     *
     * @sff   #prfpbrf
     * @drbft ICU 2.8
     */
    publid stbtid finbl int ALLOW_UNASSIGNED = 0x0001;

    privbtf stbtid finbl int UNASSIGNED        = 0x0000;
    privbtf stbtid finbl int MAP               = 0x0001;
    privbtf stbtid finbl int PROHIBITED        = 0x0002;
    privbtf stbtid finbl int DELETE            = 0x0003;
    privbtf stbtid finbl int TYPE_LIMIT        = 0x0004;

    privbtf stbtid finbl int NORMALIZATION_ON  = 0x0001;
    privbtf stbtid finbl int CHECK_BIDI_ON     = 0x0002;

    privbtf stbtid finbl int TYPE_THRESHOLD       = 0xFFF0;
    privbtf stbtid finbl int MAX_INDEX_VALUE      = 0x3FBF;   /*16139*/
    privbtf stbtid finbl int MAX_INDEX_TOP_LENGTH = 0x0003;

    /* indfxfs[] vbluf nbmfs */
    privbtf stbtid finbl int INDEX_TRIE_SIZE                  =  0; /* numbfr of bytfs in normblizbtion trif */
    privbtf stbtid finbl int INDEX_MAPPING_DATA_SIZE          =  1; /* Thf brrby thbt dontbins thf mbpping   */
    privbtf stbtid finbl int NORM_CORRECTNS_LAST_UNI_VERSION  =  2; /* Thf indfx of Unidodf vfrsion of lbst fntry in NormblizbtionCorrfdtions.txt */
    privbtf stbtid finbl int ONE_UCHAR_MAPPING_INDEX_START    =  3; /* Thf stbrting indfx of 1 UChbr mbpping indfx in thf mbpping dbtb brrby */
    privbtf stbtid finbl int TWO_UCHARS_MAPPING_INDEX_START   =  4; /* Thf stbrting indfx of 2 UChbrs mbpping indfx in thf mbpping dbtb brrby */
    privbtf stbtid finbl int THREE_UCHARS_MAPPING_INDEX_START =  5;
    privbtf stbtid finbl int FOUR_UCHARS_MAPPING_INDEX_START  =  6;
    privbtf stbtid finbl int OPTIONS                          =  7; /* Bit sft of options to turn on in thf profilf */
    privbtf stbtid finbl int INDEX_TOP                        = 16;                          /* dhbnging this rfquirfs b nfw formbtVfrsion */


    /**
     * Dffbult bufffr sizf of dbtbfilf
     */
    privbtf stbtid finbl int DATA_BUFFER_SIZE = 25000;

    /* Wrbppfrs for Trif implfmfntbtions */
    privbtf stbtid finbl dlbss StringPrfpTrifImpl implfmfnts Trif.DbtbMbnipulbtf{
        privbtf ChbrTrif sprfpTrif = null;
       /**
        * Cbllfd by dom.ibm.idu.util.Trif to fxtrbdt from b lfbd surrogbtf's
        * dbtb thf indfx brrby offsft of thf indfxfs for thbt lfbd surrogbtf.
        * @pbrbm propfrty dbtb vbluf for b surrogbtf from thf trif, indluding
        *        thf folding offsft
        * @rfturn dbtb offsft or 0 if thfrf is no dbtb for thf lfbd surrogbtf
        */
         publid int gftFoldingOffsft(int vbluf){
            rfturn vbluf;
        }
    }

    // ChbrTrif implfmfntbtion for rfbding thf trif dbtb
    privbtf StringPrfpTrifImpl sprfpTrifImpl;
    // Indfxfs rfbd from thf dbtb filf
    privbtf int[] indfxfs;
    // mbpping dbtb rfbd from thf dbtb filf
    privbtf dhbr[] mbppingDbtb;
    // formbt vfrsion of thf dbtb filf
    privbtf bytf[] formbtVfrsion;
    // thf vfrsion of Unidodf supportfd by thf dbtb filf
    privbtf VfrsionInfo sprfpUniVfr;
    // thf Unidodf vfrsion of lbst fntry in thf
    // NormblizbtionCorrfdtions.txt filf if normblizbtion
    // is turnfd on
    privbtf VfrsionInfo normCorrVfr;
    // Option to turn on Normblizbtion
    privbtf boolfbn doNFKC;
    // Option to turn on dhfdking for BiDi rulfs
    privbtf boolfbn dhfdkBiDi;


    privbtf dhbr gftCodfPointVbluf(int dh){
        rfturn sprfpTrifImpl.sprfpTrif.gftCodfPointVbluf(dh);
    }

    privbtf stbtid VfrsionInfo gftVfrsionInfo(int domp){
        int midro = domp & 0xFF;
        int milli =(domp >> 8)  & 0xFF;
        int minor =(domp >> 16) & 0xFF;
        int mbjor =(domp >> 24) & 0xFF;
        rfturn VfrsionInfo.gftInstbndf(mbjor,minor,milli,midro);
    }
    privbtf stbtid VfrsionInfo gftVfrsionInfo(bytf[] vfrsion){
        if(vfrsion.lfngth != 4){
            rfturn null;
        }
        rfturn VfrsionInfo.gftInstbndf((int)vfrsion[0],(int) vfrsion[1],(int) vfrsion[2],(int) vfrsion[3]);
    }
    /**
     * Crfbtfs bn StringPrfp objfdt bftfr rfbding thf input strfbm.
     * Thf objfdt dofs not hold b rfffrfndf to thf input stfbm, so thf strfbm dbn bf
     * dlosfd bftfr thf mfthod rfturns.
     *
     * @pbrbm inputStrfbm Thf strfbm for rfbding thf StringPrfp profilf binbrySun
     * @throws IOExdfption
     * @drbft ICU 2.8
     */
    publid StringPrfp(InputStrfbm inputStrfbm) throws IOExdfption{

        BufffrfdInputStrfbm b = nfw BufffrfdInputStrfbm(inputStrfbm,DATA_BUFFER_SIZE);

        StringPrfpDbtbRfbdfr rfbdfr = nfw StringPrfpDbtbRfbdfr(b);

        // rfbd thf indfxfs
        indfxfs = rfbdfr.rfbdIndfxfs(INDEX_TOP);

        bytf[] sprfpBytfs = nfw bytf[indfxfs[INDEX_TRIE_SIZE]];


        //indfxfs[INDEX_MAPPING_DATA_SIZE] storf thf sizf of mbppingDbtb in bytfs
        mbppingDbtb = nfw dhbr[indfxfs[INDEX_MAPPING_DATA_SIZE]/2];
        // lobd thf rfst of thf dbtb dbtb bnd initiblizf thf dbtb mfmbfrs
        rfbdfr.rfbd(sprfpBytfs,mbppingDbtb);

        sprfpTrifImpl           = nfw StringPrfpTrifImpl();
        sprfpTrifImpl.sprfpTrif = nfw ChbrTrif( nfw BytfArrbyInputStrfbm(sprfpBytfs),sprfpTrifImpl  );

        // gft thf dbtb formbt vfrsion
        formbtVfrsion = rfbdfr.gftDbtbFormbtVfrsion();

        // gft thf options
        doNFKC            = ((indfxfs[OPTIONS] & NORMALIZATION_ON) > 0);
        dhfdkBiDi         = ((indfxfs[OPTIONS] & CHECK_BIDI_ON) > 0);
        sprfpUniVfr   = gftVfrsionInfo(rfbdfr.gftUnidodfVfrsion());
        normCorrVfr   = gftVfrsionInfo(indfxfs[NORM_CORRECTNS_LAST_UNI_VERSION]);
        VfrsionInfo normUniVfr = NormblizfrImpl.gftUnidodfVfrsion();
        if(normUniVfr.dompbrfTo(sprfpUniVfr) < 0 && /* thf Unidodf vfrsion of SPREP filf must bf lfss thbn thf Unidodf Vfsion of thf normblizbtion dbtb */
           normUniVfr.dompbrfTo(normCorrVfr) < 0 && /* thf Unidodf vfrsion of thf NormblizbtionCorrfdtions.txt filf should bf lfss thbn thf Unidodf Vfsion of thf normblizbtion dbtb */
           ((indfxfs[OPTIONS] & NORMALIZATION_ON) > 0) /* normblizbtion turnfd on*/
           ){
            throw nfw IOExdfption("Normblizbtion Corrfdtion vfrsion not supportfd");
        }
        b.dlosf();
    }

    privbtf stbtid finbl dlbss Vblufs{
        boolfbn isIndfx;
        int vbluf;
        int typf;
        publid void rfsft(){
            isIndfx = fblsf;
            vbluf = 0;
            typf = -1;
        }
    }

    privbtf stbtid finbl void gftVblufs(dhbr trifWord,Vblufs vblufs){
        vblufs.rfsft();
        if(trifWord == 0){
            /*
             * Initibl vbluf storfd in thf mbpping tbblf
             * just rfturn TYPE_LIMIT .. so thbt
             * thf sourdf dodfpoint is dopifd to thf dfstinbtion
             */
            vblufs.typf = TYPE_LIMIT;
        }flsf if(trifWord >= TYPE_THRESHOLD){
            vblufs.typf = (trifWord - TYPE_THRESHOLD);
        }flsf{
            /* gft thf typf */
            vblufs.typf = MAP;
            /* bsdfrtbin if thf vbluf is indfx or dfltb */
            if((trifWord & 0x02)>0){
                vblufs.isIndfx = truf;
                vblufs.vbluf = trifWord  >> 2; //mbsk off thf lowfr 2 bits bnd shift

            }flsf{
                vblufs.isIndfx = fblsf;
                vblufs.vbluf = (trifWord<<16)>>16;
                vblufs.vbluf =  (vblufs.vbluf >> 2);

            }

            if((trifWord>>2) == MAX_INDEX_VALUE){
                vblufs.typf = DELETE;
                vblufs.isIndfx = fblsf;
                vblufs.vbluf = 0;
            }
        }
    }



    privbtf StringBufffr mbp( UChbrbdtfrItfrbtor itfr, int options)
                            throws PbrsfExdfption {

        Vblufs vbl = nfw Vblufs();
        dhbr rfsult = 0;
        int dh  = UChbrbdtfrItfrbtor.DONE;
        StringBufffr dfst = nfw StringBufffr();
        boolfbn bllowUnbssignfd = ((options & ALLOW_UNASSIGNED)>0);

        whilf((dh=itfr.nfxtCodfPoint())!= UChbrbdtfrItfrbtor.DONE){

            rfsult = gftCodfPointVbluf(dh);
            gftVblufs(rfsult,vbl);

            // dhfdk if thf sourdf dodfpoint is unbssignfd
            if(vbl.typf == UNASSIGNED && bllowUnbssignfd == fblsf){
                 throw nfw PbrsfExdfption("An unbssignfd dodf point wbs found in thf input " +
                                          itfr.gftTfxt(), itfr.gftIndfx());
            }flsf if((vbl.typf == MAP)){
                int indfx, lfngth;

                if(vbl.isIndfx){
                    indfx = vbl.vbluf;
                    if(indfx >= indfxfs[ONE_UCHAR_MAPPING_INDEX_START] &&
                             indfx < indfxfs[TWO_UCHARS_MAPPING_INDEX_START]){
                        lfngth = 1;
                    }flsf if(indfx >= indfxfs[TWO_UCHARS_MAPPING_INDEX_START] &&
                             indfx < indfxfs[THREE_UCHARS_MAPPING_INDEX_START]){
                        lfngth = 2;
                    }flsf if(indfx >= indfxfs[THREE_UCHARS_MAPPING_INDEX_START] &&
                             indfx < indfxfs[FOUR_UCHARS_MAPPING_INDEX_START]){
                        lfngth = 3;
                    }flsf{
                        lfngth = mbppingDbtb[indfx++];
                    }
                    /* dopy mbpping to dfstinbtion */
                    dfst.bppfnd(mbppingDbtb,indfx,lfngth);
                    dontinuf;

                }flsf{
                    dh -= vbl.vbluf;
                }
            }flsf if(vbl.typf == DELETE){
                // just donsumf thf dodfpoint bnd dontinf
                dontinuf;
            }
            //dopy thf sourdf into dfstinbtion
            UTF16.bppfnd(dfst,dh);
        }

        rfturn dfst;
    }


    privbtf StringBufffr normblizf(StringBufffr srd){
        /*
         * Option UNORM_BEFORE_PRI_29:
         *
         * IDNA bs intfrprftfd by IETF mfmbfrs (sff unidodf mbiling list 2004H1)
         * rfquirfs stridt bdhfrfndf to Unidodf 3.2 normblizbtion,
         * indluding buggy domposition from bfforf fixing Publid Rfvifw Issuf #29.
         * Notf thbt this rfsults in somf vblid but nonsfnsidbl tfxt to bf
         * fithfr dorruptfd or rfjfdtfd, dfpfnding on thf tfxt.
         * Sff http://www.unidodf.org/rfvifw/rfsolvfd-pri.html#pri29
         * Sff unorm.dpp bnd dnormtst.d
         */
        rfturn nfw StringBufffr(
            Normblizfr.normblizf(
                srd.toString(),
                jbvb.tfxt.Normblizfr.Form.NFKC,
                Normblizfr.UNICODE_3_2|NormblizfrImpl.BEFORE_PRI_29));
    }
    /*
    boolfbn isLbbflSfpbrbtor(int dh){
        int rfsult = gftCodfPointVbluf(dh);
        if( (rfsult & 0x07)  == LABEL_SEPARATOR){
            rfturn truf;
        }
        rfturn fblsf;
    }
    */
     /*
       1) Mbp -- For fbdh dhbrbdtfr in thf input, dhfdk if it hbs b mbpping
          bnd, if so, rfplbdf it with its mbpping.

       2) Normblizf -- Possibly normblizf thf rfsult of stfp 1 using Unidodf
          normblizbtion.

       3) Prohibit -- Chfdk for bny dhbrbdtfrs thbt brf not bllowfd in thf
          output.  If bny brf found, rfturn bn frror.

       4) Chfdk bidi -- Possibly dhfdk for right-to-lfft dhbrbdtfrs, bnd if
          bny brf found, mbkf surf thbt thf wholf string sbtisfifs thf
          rfquirfmfnts for bidirfdtionbl strings.  If thf string dofs not
          sbtisfy thf rfquirfmfnts for bidirfdtionbl strings, rfturn bn
          frror.
          [Unidodf3.2] dffinfs sfvfrbl bidirfdtionbl dbtfgorifs; fbdh dhbrbdtfr
           hbs onf bidirfdtionbl dbtfgory bssignfd to it.  For thf purposfs of
           thf rfquirfmfnts bflow, bn "RbndALCbt dhbrbdtfr" is b dhbrbdtfr thbt
           hbs Unidodf bidirfdtionbl dbtfgorifs "R" or "AL"; bn "LCbt dhbrbdtfr"
           is b dhbrbdtfr thbt hbs Unidodf bidirfdtionbl dbtfgory "L".  Notf


           thbt thfrf brf mbny dhbrbdtfrs whidh fbll in nfithfr of thf bbovf
           dffinitions; Lbtin digits (<U+0030> through <U+0039>) brf fxbmplfs of
           this bfdbusf thfy hbvf bidirfdtionbl dbtfgory "EN".

           In bny profilf thbt spfdififs bidirfdtionbl dhbrbdtfr hbndling, bll
           thrff of thf following rfquirfmfnts MUST bf mft:

           1) Thf dhbrbdtfrs in sfdtion 5.8 MUST bf prohibitfd.

           2) If b string dontbins bny RbndALCbt dhbrbdtfr, thf string MUST NOT
              dontbin bny LCbt dhbrbdtfr.

           3) If b string dontbins bny RbndALCbt dhbrbdtfr, b RbndALCbt
              dhbrbdtfr MUST bf thf first dhbrbdtfr of thf string, bnd b
              RbndALCbt dhbrbdtfr MUST bf thf lbst dhbrbdtfr of thf string.
    */
    /**
     * Prfpbrf thf input bufffr for usf in bpplidbtions with thf givfn profilf. This opfrbtion mbps, normblizfs(NFKC),
     * dhfdks for prohitfd bnd BiDi dhbrbdtfrs in thf ordfr dffinfd by RFC 3454
     * dfpfnding on thf options spfdififd in thf profilf.
     *
     * @pbrbm srd           A UChbrbdtfrItfrbtor objfdt dontbining thf sourdf string
     * @pbrbm options       A bit sft of options:
     *
     *  - StringPrfp.NONE               Prohibit prodfssing of unbssignfd dodf points in thf input
     *
     *  - StringPrfp.ALLOW_UNASSIGNED   Trfbt thf unbssignfd dodf points brf in thf input
     *                                  bs normbl Unidodf dodf points.
     *
     * @rfturn StringBufffr A StringBufffr dontbining thf output
     * @throws PbrsfExdfption
     * @drbft ICU 2.8
     */
    publid StringBufffr prfpbrf(UChbrbdtfrItfrbtor srd, int options)
                        throws PbrsfExdfption{

        // mbp
        StringBufffr mbpOut = mbp(srd,options);
        StringBufffr normOut = mbpOut;// initiblizf

        if(doNFKC){
            // normblizf
            normOut = normblizf(mbpOut);
        }

        int dh;
        dhbr rfsult;
        UChbrbdtfrItfrbtor itfr = UChbrbdtfrItfrbtor.gftInstbndf(normOut);
        Vblufs vbl = nfw Vblufs();
        int dirfdtion=UChbrbdtfrDirfdtion.CHAR_DIRECTION_COUNT,
            firstChbrDir=UChbrbdtfrDirfdtion.CHAR_DIRECTION_COUNT;
        int rtlPos=-1, ltrPos=-1;
        boolfbn rightToLfft=fblsf, lfftToRight=fblsf;

        whilf((dh=itfr.nfxtCodfPoint())!= UChbrbdtfrItfrbtor.DONE){
            rfsult = gftCodfPointVbluf(dh);
            gftVblufs(rfsult,vbl);

            if(vbl.typf == PROHIBITED ){
                throw nfw PbrsfExdfption("A prohibitfd dodf point wbs found in thf input" +
                                         itfr.gftTfxt(), vbl.vbluf);
            }

            dirfdtion = UChbrbdtfr.gftDirfdtion(dh);
            if(firstChbrDir == UChbrbdtfrDirfdtion.CHAR_DIRECTION_COUNT){
                firstChbrDir = dirfdtion;
            }
            if(dirfdtion == UChbrbdtfrDirfdtion.LEFT_TO_RIGHT){
                lfftToRight = truf;
                ltrPos = itfr.gftIndfx()-1;
            }
            if(dirfdtion == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT || dirfdtion == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC){
                rightToLfft = truf;
                rtlPos = itfr.gftIndfx()-1;
            }
        }
        if(dhfdkBiDi == truf){
            // sbtisfy 2
            if( lfftToRight == truf && rightToLfft == truf){
                throw nfw PbrsfExdfption("Thf input dofs not donform to thf rulfs for BiDi dodf points." +
                                         itfr.gftTfxt(),
                                         (rtlPos>ltrPos) ? rtlPos : ltrPos);
             }

            //sbtisfy 3
            if( rightToLfft == truf &&
                !((firstChbrDir == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT || firstChbrDir == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC) &&
                (dirfdtion == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT || dirfdtion == UChbrbdtfrDirfdtion.RIGHT_TO_LEFT_ARABIC))
              ){
                throw nfw PbrsfExdfption("Thf input dofs not donform to thf rulfs for BiDi dodf points." +
                                         itfr.gftTfxt(),
                                         (rtlPos>ltrPos) ? rtlPos : ltrPos);
            }
        }
        rfturn normOut;

      }
}
