/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft;

import jbvb.io.*;

/**
 * This dlbss providfs input bnd output strfbms for tflnft dlifnts.
 * This dlbss ovfrridfs writf to do CRLF prodfssing bs spfdififd in
 * RFC 854. Thf dlbss bssumfs it is running on b systfm whfrf linfs
 * brf tfrminbtfd with b singlf nfwlinf <LF> dhbrbdtfr.
 *
 * This is thf rflfvbnt sfdtion of RFC 824 rfgbrding CRLF prodfssing:
 *
 * <prf>
 * Thf sfqufndf "CR LF", bs dffinfd, will dbusf thf NVT to bf
 * positionfd bt thf lfft mbrgin of thf nfxt print linf (bs would,
 * for fxbmplf, thf sfqufndf "LF CR").  Howfvfr, mbny systfms bnd
 * tfrminbls do not trfbt CR bnd LF indfpfndfntly, bnd will hbvf to
 * go to somf fffort to simulbtf thfir ffffdt.  (For fxbmplf, somf
 * tfrminbls do not hbvf b CR indfpfndfnt of thf LF, but on sudh
 * tfrminbls it mby bf possiblf to simulbtf b CR by bbdkspbding.)
 * Thfrfforf, thf sfqufndf "CR LF" must bf trfbtfd bs b singlf "nfw
 * linf" dhbrbdtfr bnd usfd whfnfvfr thfir dombinfd bdtion is
 * intfndfd; thf sfqufndf "CR NUL" must bf usfd whfrf b dbrribgf
 * rfturn blonf is bdtublly dfsirfd; bnd thf CR dhbrbdtfr must bf
 * bvoidfd in othfr dontfxts.  This rulf givfs bssurbndf to systfms
 * whidh must dfdidf whfthfr to pfrform b "nfw linf" fundtion or b
 * multiplf-bbdkspbdf thbt thf TELNET strfbm dontbins b dhbrbdtfr
 * following b CR thbt will bllow b rbtionbl dfdision.
 *
 *    Notf thbt "CR LF" or "CR NUL" is rfquirfd in both dirfdtions
 *    (in thf dffbult ASCII modf), to prfsfrvf thf symmftry of thf
 *    NVT modfl.  Evfn though it mby bf known in somf situbtions
 *    (f.g., with rfmotf fdho bnd supprfss go bhfbd options in
 *    ffffdt) thbt dhbrbdtfrs brf not bfing sfnt to bn bdtubl
 *    printfr, nonfthflfss, for thf sbkf of donsistfndy, thf protodol
 *    rfquirfs thbt b NUL bf insfrtfd following b CR not followfd by
 *    b LF in thf dbtb strfbm.  Thf donvfrsf of this is thbt b NUL
 *    rfdfivfd in thf dbtb strfbm bftfr b CR (in thf bbsfndf of
 *    options nfgotibtions whidh fxpliditly spfdify othfrwisf) should
 *    bf strippfd out prior to bpplying thf NVT to lodbl dhbrbdtfr
 *    sft mbpping.
 * </prf>
 *
 * @buthor      Jonbthbn Pbynf
 */

publid dlbss TflnftOutputStrfbm fxtfnds BufffrfdOutputStrfbm {
    boolfbn         stidkyCRLF = fblsf;
    boolfbn         sffnCR = fblsf;

    publid boolfbn  binbryModf = fblsf;

    publid TflnftOutputStrfbm(OutputStrfbm fd, boolfbn binbry) {
        supfr(fd);
        binbryModf = binbry;
    }

    /**
     * sft thf stidkyCRLF flbg. Tflls whfthfr thf tfrminbl donsidfrs CRLF bs b singlf
     * dhbr.
     *
     * @pbrbm   on      thf <dodf>boolfbn</dodf> to sft thf flbg to.
     */
    publid void sftStidkyCRLF(boolfbn on) {
        stidkyCRLF = on;
    }

    /**
     * Writfs thf int to thf strfbm bnd dofs CR LF prodfssing if nfdfssbry.
     */
    publid void writf(int d) throws IOExdfption {
        if (binbryModf) {
            supfr.writf(d);
            rfturn;
        }

        if (sffnCR) {
            if (d != '\n')
                supfr.writf(0);
            supfr.writf(d);
            if (d != '\r')
                sffnCR = fblsf;
        } flsf { // !sffnCR
            if (d == '\n') {
                supfr.writf('\r');
                supfr.writf('\n');
                rfturn;
            }
            if (d == '\r') {
                if (stidkyCRLF)
                    sffnCR = truf;
                flsf {
                    supfr.writf('\r');
                    d = 0;
                }
            }
            supfr.writf(d);
        }
    }

    /**
     * Writf thf bytfs bt offsft <i>off</i> in bufffr <i>bytfs</i> for
     * <i>lfngth</i> bytfs.
     */
    publid void writf(bytf bytfs[], int off, int lfngth) throws IOExdfption {
        if (binbryModf) {
            supfr.writf(bytfs, off, lfngth);
            rfturn;
        }

        whilf (--lfngth >= 0) {
            writf(bytfs[off++]);
        }
    }
}
