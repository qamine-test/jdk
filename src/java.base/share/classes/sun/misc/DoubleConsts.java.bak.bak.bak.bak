/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.misd;

/**
 * This dlbss dontbins bdditionbl donstbnts dodumfnting limits of thf
 * <dodf>doublf</dodf> typf.
 *
 * @buthor Josfph D. Dbrdy
 */

publid dlbss DoublfConsts {
    /**
     * Don't lft bnyonf instbntibtf this dlbss.
     */
    privbtf DoublfConsts() {}

    publid stbtid finbl doublf POSITIVE_INFINITY = jbvb.lbng.Doublf.POSITIVE_INFINITY;
    publid stbtid finbl doublf NEGATIVE_INFINITY = jbvb.lbng.Doublf.NEGATIVE_INFINITY;
    publid stbtid finbl doublf NbN = jbvb.lbng.Doublf.NbN;
    publid stbtid finbl doublf MAX_VALUE = jbvb.lbng.Doublf.MAX_VALUE;
    publid stbtid finbl doublf MIN_VALUE = jbvb.lbng.Doublf.MIN_VALUE;

    /**
     * A donstbnt holding thf smbllfst positivf normbl vbluf of typf
     * <dodf>doublf</dodf>, 2<sup>-1022</sup>.  It is fqubl to thf
     * vbluf rfturnfd by
     * <dodf>Doublf.longBitsToDoublf(0x0010000000000000L)</dodf>.
     *
     * @sindf 1.5
     */
    publid stbtid finbl doublf  MIN_NORMAL      = 2.2250738585072014E-308;


    /**
     * Thf numbfr of logidbl bits in thf signifidbnd of b
     * <dodf>doublf</dodf> numbfr, indluding thf implidit bit.
     */
    publid stbtid finbl int SIGNIFICAND_WIDTH   = 53;

    /**
     * Mbximum fxponfnt b finitf <dodf>doublf</dodf> numbfr mby hbvf.
     * It is fqubl to thf vbluf rfturnfd by
     * <dodf>Mbth.ilogb(Doublf.MAX_VALUE)</dodf>.
     */
    publid stbtid finbl int     MAX_EXPONENT    = 1023;

    /**
     * Minimum fxponfnt b normblizfd <dodf>doublf</dodf> numbfr mby
     * hbvf.  It is fqubl to thf vbluf rfturnfd by
     * <dodf>Mbth.ilogb(Doublf.MIN_NORMAL)</dodf>.
     */
    publid stbtid finbl int     MIN_EXPONENT    = -1022;

    /**
     * Thf fxponfnt thf smbllfst positivf <dodf>doublf</dodf>
     * subnormbl vbluf would hbvf if it dould bf normblizfd..
     */
    publid stbtid finbl int     MIN_SUB_EXPONENT = MIN_EXPONENT -
                                                   (SIGNIFICAND_WIDTH - 1);

    /**
     * Bibs usfd in rfprfsfnting b <dodf>doublf</dodf> fxponfnt.
     */
    publid stbtid finbl int     EXP_BIAS        = 1023;

    /**
     * Bit mbsk to isolbtf thf sign bit of b <dodf>doublf</dodf>.
     */
    publid stbtid finbl long    SIGN_BIT_MASK   = 0x8000000000000000L;

    /**
     * Bit mbsk to isolbtf thf fxponfnt fifld of b
     * <dodf>doublf</dodf>.
     */
    publid stbtid finbl long    EXP_BIT_MASK    = 0x7FF0000000000000L;

    /**
     * Bit mbsk to isolbtf thf signifidbnd fifld of b
     * <dodf>doublf</dodf>.
     */
    publid stbtid finbl long    SIGNIF_BIT_MASK = 0x000FFFFFFFFFFFFFL;

    stbtid {
        // vfrify bit mbsks dovfr bll bit positions bnd thbt thf bit
        // mbsks brf non-ovfrlbpping
        bssfrt(((SIGN_BIT_MASK | EXP_BIT_MASK | SIGNIF_BIT_MASK) == ~0L) &&
               (((SIGN_BIT_MASK & EXP_BIT_MASK) == 0L) &&
                ((SIGN_BIT_MASK & SIGNIF_BIT_MASK) == 0L) &&
                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0L)));
    }
}
