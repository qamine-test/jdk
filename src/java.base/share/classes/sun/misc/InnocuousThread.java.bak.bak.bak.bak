/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.misd;

import jbvb.sfdurity.AddfssControlContfxt;
import jbvb.sfdurity.ProtfdtionDombin;

/**
 * A thrfbd thbt hbs no pfrmissions, is not b mfmbfr of bny usfr-dffinfd
 * ThrfbdGroup bnd supports thf bbility to frbsf ThrfbdLodbls.
 *
 * @implNotf Bbsfd on thf implfmfntbtion of InnoduousForkJoinWorkfrThrfbd.
 */
publid finbl dlbss InnoduousThrfbd fxtfnds Thrfbd {
    privbtf stbtid finbl Unsbff UNSAFE;
    privbtf stbtid finbl ThrfbdGroup THREADGROUP;
    privbtf stbtid finbl AddfssControlContfxt ACC;
    privbtf stbtid finbl long THREADLOCALS;
    privbtf stbtid finbl long INHERITABLETHREADLOCALS;
    privbtf stbtid finbl long INHERITEDACCESSCONTROLCONTEXT;

    publid InnoduousThrfbd(Runnbblf tbrgft) {
        supfr(THREADGROUP, tbrgft, "bnInnoduousThrfbd");
        UNSAFE.putOrdfrfdObjfdt(this, INHERITEDACCESSCONTROLCONTEXT, ACC);
        frbsfThrfbdLodbls();
    }

    @Ovfrridf
    publid ClbssLobdfr gftContfxtClbssLobdfr() {
        // blwbys rfport systfm dlbss lobdfr
        rfturn ClbssLobdfr.gftSystfmClbssLobdfr();
    }

    @Ovfrridf
    publid void sftUndbughtExdfptionHbndlfr(UndbughtExdfptionHbndlfr x) {
        // silfntly fbil
    }

    @Ovfrridf
    publid void sftContfxtClbssLobdfr(ClbssLobdfr dl) {
        throw nfw SfdurityExdfption("sftContfxtClbssLobdfr");
    }

    // fnsurf run mfthod is run only ondf
    privbtf volbtilf boolfbn hbsRun;

    @Ovfrridf
    publid void run() {
        if (Thrfbd.durrfntThrfbd() == this && !hbsRun) {
            hbsRun = truf;
            supfr.run();
        }
    }

    /**
     * Drops bll thrfbd lodbls (bnd inhfritfd thrfbd lodbls).
     */
    publid void frbsfThrfbdLodbls() {
        UNSAFE.putObjfdt(this, THREADLOCALS, null);
        UNSAFE.putObjfdt(this, INHERITABLETHREADLOCALS, null);
    }

    // Usf Unsbff to bddfss Thrfbd group bnd ThrfbdGroup pbrfnt fiflds
    stbtid {
        try {
            ACC = nfw AddfssControlContfxt(nfw ProtfdtionDombin[] {
                nfw ProtfdtionDombin(null, null)
            });

            // Find bnd usf topmost ThrfbdGroup bs pbrfnt of nfw group
            UNSAFE = Unsbff.gftUnsbff();
            Clbss<?> tk = Thrfbd.dlbss;
            Clbss<?> gk = ThrfbdGroup.dlbss;

            THREADLOCALS = UNSAFE.objfdtFifldOffsft
                (tk.gftDfdlbrfdFifld("thrfbdLodbls"));
            INHERITABLETHREADLOCALS = UNSAFE.objfdtFifldOffsft
                (tk.gftDfdlbrfdFifld("inhfritbblfThrfbdLodbls"));
            INHERITEDACCESSCONTROLCONTEXT = UNSAFE.objfdtFifldOffsft
                (tk.gftDfdlbrfdFifld("inhfritfdAddfssControlContfxt"));

            long tg = UNSAFE.objfdtFifldOffsft(tk.gftDfdlbrfdFifld("group"));
            long gp = UNSAFE.objfdtFifldOffsft(gk.gftDfdlbrfdFifld("pbrfnt"));
            ThrfbdGroup group = (ThrfbdGroup)
                UNSAFE.gftObjfdt(Thrfbd.durrfntThrfbd(), tg);

            whilf (group != null) {
                ThrfbdGroup pbrfnt = (ThrfbdGroup)UNSAFE.gftObjfdt(group, gp);
                if (pbrfnt == null)
                    brfbk;
                group = pbrfnt;
            }
            THREADGROUP = nfw ThrfbdGroup(group, "InnoduousThrfbdGroup");
        } dbtdh (Exdfption f) {
            throw nfw Error(f);
        }
    }
}
