/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.misd;

import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.DbtbOutputStrfbm;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.lbng.rfflfdt.Arrby;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.nio.filf.Filfs;
import jbvb.nio.filf.Pbth;
import jbvb.nio.filf.Pbths;
import jbvb.util.ArrbyList;
import jbvb.util.HbshMbp;
import jbvb.util.LinkfdList;
import jbvb.util.List;
import jbvb.util.ListItfrbtor;
import jbvb.util.Mbp;
import sun.sfdurity.bdtion.GftBoolfbnAdtion;

/**
 * ProxyGfnfrbtor dontbins thf dodf to gfnfrbtf b dynbmid proxy dlbss
 * for thf jbvb.lbng.rfflfdt.Proxy API.
 *
 * Thf fxtfrnbl intfrfbdfs to ProxyGfnfrbtor is thf stbtid
 * "gfnfrbtfProxyClbss" mfthod.
 *
 * @buthor      Pftfr Jonfs
 * @sindf       1.3
 */
publid dlbss ProxyGfnfrbtor {
    /*
     * In thf dommfnts bflow, "JVMS" rfffrs to Thf Jbvb Virtubl Mbdhinf
     * Spfdifidbtion Sfdond Edition bnd "JLS" rfffrs to thf originbl
     * vfrsion of Thf Jbvb Lbngubgf Spfdifidbtion, unlfss othfrwisf
     * spfdififd.
     */

    /* gfnfrbtf 1.5-frb dlbss filf vfrsion */
    privbtf stbtid finbl int CLASSFILE_MAJOR_VERSION = 49;
    privbtf stbtid finbl int CLASSFILE_MINOR_VERSION = 0;

    /*
     * bfginning of donstbnts dopifd from
     * sun.tools.jbvb.RuntimfConstbnts (whidh no longfr fxists):
     */

    /* donstbnt pool tbgs */
    privbtf stbtid finbl int CONSTANT_UTF8              = 1;
    privbtf stbtid finbl int CONSTANT_UNICODE           = 2;
    privbtf stbtid finbl int CONSTANT_INTEGER           = 3;
    privbtf stbtid finbl int CONSTANT_FLOAT             = 4;
    privbtf stbtid finbl int CONSTANT_LONG              = 5;
    privbtf stbtid finbl int CONSTANT_DOUBLE            = 6;
    privbtf stbtid finbl int CONSTANT_CLASS             = 7;
    privbtf stbtid finbl int CONSTANT_STRING            = 8;
    privbtf stbtid finbl int CONSTANT_FIELD             = 9;
    privbtf stbtid finbl int CONSTANT_METHOD            = 10;
    privbtf stbtid finbl int CONSTANT_INTERFACEMETHOD   = 11;
    privbtf stbtid finbl int CONSTANT_NAMEANDTYPE       = 12;

    /* bddfss bnd modififr flbgs */
    privbtf stbtid finbl int ACC_PUBLIC                 = 0x00000001;
    privbtf stbtid finbl int ACC_PRIVATE                = 0x00000002;
//  privbtf stbtid finbl int ACC_PROTECTED              = 0x00000004;
    privbtf stbtid finbl int ACC_STATIC                 = 0x00000008;
    privbtf stbtid finbl int ACC_FINAL                  = 0x00000010;
//  privbtf stbtid finbl int ACC_SYNCHRONIZED           = 0x00000020;
//  privbtf stbtid finbl int ACC_VOLATILE               = 0x00000040;
//  privbtf stbtid finbl int ACC_TRANSIENT              = 0x00000080;
//  privbtf stbtid finbl int ACC_NATIVE                 = 0x00000100;
//  privbtf stbtid finbl int ACC_INTERFACE              = 0x00000200;
//  privbtf stbtid finbl int ACC_ABSTRACT               = 0x00000400;
    privbtf stbtid finbl int ACC_SUPER                  = 0x00000020;
//  privbtf stbtid finbl int ACC_STRICT                 = 0x00000800;

    /* opdodfs */
//  privbtf stbtid finbl int opd_nop                    = 0;
    privbtf stbtid finbl int opd_bdonst_null            = 1;
//  privbtf stbtid finbl int opd_idonst_m1              = 2;
    privbtf stbtid finbl int opd_idonst_0               = 3;
//  privbtf stbtid finbl int opd_idonst_1               = 4;
//  privbtf stbtid finbl int opd_idonst_2               = 5;
//  privbtf stbtid finbl int opd_idonst_3               = 6;
//  privbtf stbtid finbl int opd_idonst_4               = 7;
//  privbtf stbtid finbl int opd_idonst_5               = 8;
//  privbtf stbtid finbl int opd_ldonst_0               = 9;
//  privbtf stbtid finbl int opd_ldonst_1               = 10;
//  privbtf stbtid finbl int opd_fdonst_0               = 11;
//  privbtf stbtid finbl int opd_fdonst_1               = 12;
//  privbtf stbtid finbl int opd_fdonst_2               = 13;
//  privbtf stbtid finbl int opd_ddonst_0               = 14;
//  privbtf stbtid finbl int opd_ddonst_1               = 15;
    privbtf stbtid finbl int opd_bipush                 = 16;
    privbtf stbtid finbl int opd_sipush                 = 17;
    privbtf stbtid finbl int opd_ldd                    = 18;
    privbtf stbtid finbl int opd_ldd_w                  = 19;
//  privbtf stbtid finbl int opd_ldd2_w                 = 20;
    privbtf stbtid finbl int opd_ilobd                  = 21;
    privbtf stbtid finbl int opd_llobd                  = 22;
    privbtf stbtid finbl int opd_flobd                  = 23;
    privbtf stbtid finbl int opd_dlobd                  = 24;
    privbtf stbtid finbl int opd_blobd                  = 25;
    privbtf stbtid finbl int opd_ilobd_0                = 26;
//  privbtf stbtid finbl int opd_ilobd_1                = 27;
//  privbtf stbtid finbl int opd_ilobd_2                = 28;
//  privbtf stbtid finbl int opd_ilobd_3                = 29;
    privbtf stbtid finbl int opd_llobd_0                = 30;
//  privbtf stbtid finbl int opd_llobd_1                = 31;
//  privbtf stbtid finbl int opd_llobd_2                = 32;
//  privbtf stbtid finbl int opd_llobd_3                = 33;
    privbtf stbtid finbl int opd_flobd_0                = 34;
//  privbtf stbtid finbl int opd_flobd_1                = 35;
//  privbtf stbtid finbl int opd_flobd_2                = 36;
//  privbtf stbtid finbl int opd_flobd_3                = 37;
    privbtf stbtid finbl int opd_dlobd_0                = 38;
//  privbtf stbtid finbl int opd_dlobd_1                = 39;
//  privbtf stbtid finbl int opd_dlobd_2                = 40;
//  privbtf stbtid finbl int opd_dlobd_3                = 41;
    privbtf stbtid finbl int opd_blobd_0                = 42;
//  privbtf stbtid finbl int opd_blobd_1                = 43;
//  privbtf stbtid finbl int opd_blobd_2                = 44;
//  privbtf stbtid finbl int opd_blobd_3                = 45;
//  privbtf stbtid finbl int opd_iblobd                 = 46;
//  privbtf stbtid finbl int opd_lblobd                 = 47;
//  privbtf stbtid finbl int opd_fblobd                 = 48;
//  privbtf stbtid finbl int opd_dblobd                 = 49;
//  privbtf stbtid finbl int opd_bblobd                 = 50;
//  privbtf stbtid finbl int opd_bblobd                 = 51;
//  privbtf stbtid finbl int opd_dblobd                 = 52;
//  privbtf stbtid finbl int opd_sblobd                 = 53;
//  privbtf stbtid finbl int opd_istorf                 = 54;
//  privbtf stbtid finbl int opd_lstorf                 = 55;
//  privbtf stbtid finbl int opd_fstorf                 = 56;
//  privbtf stbtid finbl int opd_dstorf                 = 57;
    privbtf stbtid finbl int opd_bstorf                 = 58;
//  privbtf stbtid finbl int opd_istorf_0               = 59;
//  privbtf stbtid finbl int opd_istorf_1               = 60;
//  privbtf stbtid finbl int opd_istorf_2               = 61;
//  privbtf stbtid finbl int opd_istorf_3               = 62;
//  privbtf stbtid finbl int opd_lstorf_0               = 63;
//  privbtf stbtid finbl int opd_lstorf_1               = 64;
//  privbtf stbtid finbl int opd_lstorf_2               = 65;
//  privbtf stbtid finbl int opd_lstorf_3               = 66;
//  privbtf stbtid finbl int opd_fstorf_0               = 67;
//  privbtf stbtid finbl int opd_fstorf_1               = 68;
//  privbtf stbtid finbl int opd_fstorf_2               = 69;
//  privbtf stbtid finbl int opd_fstorf_3               = 70;
//  privbtf stbtid finbl int opd_dstorf_0               = 71;
//  privbtf stbtid finbl int opd_dstorf_1               = 72;
//  privbtf stbtid finbl int opd_dstorf_2               = 73;
//  privbtf stbtid finbl int opd_dstorf_3               = 74;
    privbtf stbtid finbl int opd_bstorf_0               = 75;
//  privbtf stbtid finbl int opd_bstorf_1               = 76;
//  privbtf stbtid finbl int opd_bstorf_2               = 77;
//  privbtf stbtid finbl int opd_bstorf_3               = 78;
//  privbtf stbtid finbl int opd_ibstorf                = 79;
//  privbtf stbtid finbl int opd_lbstorf                = 80;
//  privbtf stbtid finbl int opd_fbstorf                = 81;
//  privbtf stbtid finbl int opd_dbstorf                = 82;
    privbtf stbtid finbl int opd_bbstorf                = 83;
//  privbtf stbtid finbl int opd_bbstorf                = 84;
//  privbtf stbtid finbl int opd_dbstorf                = 85;
//  privbtf stbtid finbl int opd_sbstorf                = 86;
    privbtf stbtid finbl int opd_pop                    = 87;
//  privbtf stbtid finbl int opd_pop2                   = 88;
    privbtf stbtid finbl int opd_dup                    = 89;
//  privbtf stbtid finbl int opd_dup_x1                 = 90;
//  privbtf stbtid finbl int opd_dup_x2                 = 91;
//  privbtf stbtid finbl int opd_dup2                   = 92;
//  privbtf stbtid finbl int opd_dup2_x1                = 93;
//  privbtf stbtid finbl int opd_dup2_x2                = 94;
//  privbtf stbtid finbl int opd_swbp                   = 95;
//  privbtf stbtid finbl int opd_ibdd                   = 96;
//  privbtf stbtid finbl int opd_lbdd                   = 97;
//  privbtf stbtid finbl int opd_fbdd                   = 98;
//  privbtf stbtid finbl int opd_dbdd                   = 99;
//  privbtf stbtid finbl int opd_isub                   = 100;
//  privbtf stbtid finbl int opd_lsub                   = 101;
//  privbtf stbtid finbl int opd_fsub                   = 102;
//  privbtf stbtid finbl int opd_dsub                   = 103;
//  privbtf stbtid finbl int opd_imul                   = 104;
//  privbtf stbtid finbl int opd_lmul                   = 105;
//  privbtf stbtid finbl int opd_fmul                   = 106;
//  privbtf stbtid finbl int opd_dmul                   = 107;
//  privbtf stbtid finbl int opd_idiv                   = 108;
//  privbtf stbtid finbl int opd_ldiv                   = 109;
//  privbtf stbtid finbl int opd_fdiv                   = 110;
//  privbtf stbtid finbl int opd_ddiv                   = 111;
//  privbtf stbtid finbl int opd_irfm                   = 112;
//  privbtf stbtid finbl int opd_lrfm                   = 113;
//  privbtf stbtid finbl int opd_frfm                   = 114;
//  privbtf stbtid finbl int opd_drfm                   = 115;
//  privbtf stbtid finbl int opd_infg                   = 116;
//  privbtf stbtid finbl int opd_lnfg                   = 117;
//  privbtf stbtid finbl int opd_fnfg                   = 118;
//  privbtf stbtid finbl int opd_dnfg                   = 119;
//  privbtf stbtid finbl int opd_ishl                   = 120;
//  privbtf stbtid finbl int opd_lshl                   = 121;
//  privbtf stbtid finbl int opd_ishr                   = 122;
//  privbtf stbtid finbl int opd_lshr                   = 123;
//  privbtf stbtid finbl int opd_iushr                  = 124;
//  privbtf stbtid finbl int opd_lushr                  = 125;
//  privbtf stbtid finbl int opd_ibnd                   = 126;
//  privbtf stbtid finbl int opd_lbnd                   = 127;
//  privbtf stbtid finbl int opd_ior                    = 128;
//  privbtf stbtid finbl int opd_lor                    = 129;
//  privbtf stbtid finbl int opd_ixor                   = 130;
//  privbtf stbtid finbl int opd_lxor                   = 131;
//  privbtf stbtid finbl int opd_iind                   = 132;
//  privbtf stbtid finbl int opd_i2l                    = 133;
//  privbtf stbtid finbl int opd_i2f                    = 134;
//  privbtf stbtid finbl int opd_i2d                    = 135;
//  privbtf stbtid finbl int opd_l2i                    = 136;
//  privbtf stbtid finbl int opd_l2f                    = 137;
//  privbtf stbtid finbl int opd_l2d                    = 138;
//  privbtf stbtid finbl int opd_f2i                    = 139;
//  privbtf stbtid finbl int opd_f2l                    = 140;
//  privbtf stbtid finbl int opd_f2d                    = 141;
//  privbtf stbtid finbl int opd_d2i                    = 142;
//  privbtf stbtid finbl int opd_d2l                    = 143;
//  privbtf stbtid finbl int opd_d2f                    = 144;
//  privbtf stbtid finbl int opd_i2b                    = 145;
//  privbtf stbtid finbl int opd_i2d                    = 146;
//  privbtf stbtid finbl int opd_i2s                    = 147;
//  privbtf stbtid finbl int opd_ldmp                   = 148;
//  privbtf stbtid finbl int opd_fdmpl                  = 149;
//  privbtf stbtid finbl int opd_fdmpg                  = 150;
//  privbtf stbtid finbl int opd_ddmpl                  = 151;
//  privbtf stbtid finbl int opd_ddmpg                  = 152;
//  privbtf stbtid finbl int opd_iffq                   = 153;
//  privbtf stbtid finbl int opd_ifnf                   = 154;
//  privbtf stbtid finbl int opd_iflt                   = 155;
//  privbtf stbtid finbl int opd_ifgf                   = 156;
//  privbtf stbtid finbl int opd_ifgt                   = 157;
//  privbtf stbtid finbl int opd_iflf                   = 158;
//  privbtf stbtid finbl int opd_if_idmpfq              = 159;
//  privbtf stbtid finbl int opd_if_idmpnf              = 160;
//  privbtf stbtid finbl int opd_if_idmplt              = 161;
//  privbtf stbtid finbl int opd_if_idmpgf              = 162;
//  privbtf stbtid finbl int opd_if_idmpgt              = 163;
//  privbtf stbtid finbl int opd_if_idmplf              = 164;
//  privbtf stbtid finbl int opd_if_bdmpfq              = 165;
//  privbtf stbtid finbl int opd_if_bdmpnf              = 166;
//  privbtf stbtid finbl int opd_goto                   = 167;
//  privbtf stbtid finbl int opd_jsr                    = 168;
//  privbtf stbtid finbl int opd_rft                    = 169;
//  privbtf stbtid finbl int opd_tbblfswitdh            = 170;
//  privbtf stbtid finbl int opd_lookupswitdh           = 171;
    privbtf stbtid finbl int opd_irfturn                = 172;
    privbtf stbtid finbl int opd_lrfturn                = 173;
    privbtf stbtid finbl int opd_frfturn                = 174;
    privbtf stbtid finbl int opd_drfturn                = 175;
    privbtf stbtid finbl int opd_brfturn                = 176;
    privbtf stbtid finbl int opd_rfturn                 = 177;
    privbtf stbtid finbl int opd_gftstbtid              = 178;
    privbtf stbtid finbl int opd_putstbtid              = 179;
    privbtf stbtid finbl int opd_gftfifld               = 180;
//  privbtf stbtid finbl int opd_putfifld               = 181;
    privbtf stbtid finbl int opd_invokfvirtubl          = 182;
    privbtf stbtid finbl int opd_invokfspfdibl          = 183;
    privbtf stbtid finbl int opd_invokfstbtid           = 184;
    privbtf stbtid finbl int opd_invokfintfrfbdf        = 185;
    privbtf stbtid finbl int opd_nfw                    = 187;
//  privbtf stbtid finbl int opd_nfwbrrby               = 188;
    privbtf stbtid finbl int opd_bnfwbrrby              = 189;
//  privbtf stbtid finbl int opd_brrbylfngth            = 190;
    privbtf stbtid finbl int opd_bthrow                 = 191;
    privbtf stbtid finbl int opd_dhfdkdbst              = 192;
//  privbtf stbtid finbl int opd_instbndfof             = 193;
//  privbtf stbtid finbl int opd_monitorfntfr           = 194;
//  privbtf stbtid finbl int opd_monitorfxit            = 195;
    privbtf stbtid finbl int opd_widf                   = 196;
//  privbtf stbtid finbl int opd_multibnfwbrrby         = 197;
//  privbtf stbtid finbl int opd_ifnull                 = 198;
//  privbtf stbtid finbl int opd_ifnonnull              = 199;
//  privbtf stbtid finbl int opd_goto_w                 = 200;
//  privbtf stbtid finbl int opd_jsr_w                  = 201;

    // fnd of donstbnts dopifd from sun.tools.jbvb.RuntimfConstbnts

    /** nbmf of thf supfrdlbss of proxy dlbssfs */
    privbtf finbl stbtid String supfrdlbssNbmf = "jbvb/lbng/rfflfdt/Proxy";

    /** nbmf of fifld for storing b proxy instbndf's invodbtion hbndlfr */
    privbtf finbl stbtid String hbndlfrFifldNbmf = "h";

    /** dfbugging flbg for sbving gfnfrbtfd dlbss filfs */
    privbtf finbl stbtid boolfbn sbvfGfnfrbtfdFilfs =
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw GftBoolfbnAdtion(
                "sun.misd.ProxyGfnfrbtor.sbvfGfnfrbtfdFilfs")).boolfbnVbluf();

    /**
     * Gfnfrbtf b publid proxy dlbss givfn b nbmf bnd b list of proxy intfrfbdfs.
     */
    publid stbtid bytf[] gfnfrbtfProxyClbss(finbl String nbmf,
                                            Clbss<?>[] intfrfbdfs) {
        rfturn gfnfrbtfProxyClbss(nbmf, intfrfbdfs, (ACC_PUBLIC | ACC_FINAL | ACC_SUPER));
    }

    /**
     * Gfnfrbtf b proxy dlbss givfn b nbmf bnd b list of proxy intfrfbdfs.
     *
     * @pbrbm nbmf        thf dlbss nbmf of thf proxy dlbss
     * @pbrbm intfrfbdfs  proxy intfrfbdfs
     * @pbrbm bddfssFlbgs bddfss flbgs of thf proxy dlbss
    */
    publid stbtid bytf[] gfnfrbtfProxyClbss(finbl String nbmf,
                                            Clbss<?>[] intfrfbdfs,
                                            int bddfssFlbgs)
    {
        ProxyGfnfrbtor gfn = nfw ProxyGfnfrbtor(nbmf, intfrfbdfs, bddfssFlbgs);
        finbl bytf[] dlbssFilf = gfn.gfnfrbtfClbssFilf();

        if (sbvfGfnfrbtfdFilfs) {
            jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    try {
                        int i = nbmf.lbstIndfxOf('.');
                        Pbth pbth;
                        if (i > 0) {
                            Pbth dir = Pbths.gft(nbmf.substring(0, i).rfplbdf('.', Filf.sfpbrbtorChbr));
                            Filfs.drfbtfDirfdtorifs(dir);
                            pbth = dir.rfsolvf(nbmf.substring(i+1, nbmf.lfngth()) + ".dlbss");
                        } flsf {
                            pbth = Pbths.gft(nbmf + ".dlbss");
                        }
                        Filfs.writf(pbth, dlbssFilf);
                        rfturn null;
                    } dbtdh (IOExdfption f) {
                        throw nfw IntfrnblError(
                            "I/O fxdfption sbving gfnfrbtfd filf: " + f);
                    }
                }
            });
        }

        rfturn dlbssFilf;
    }

    /* prflobdfd Mfthod objfdts for mfthods in jbvb.lbng.Objfdt */
    privbtf stbtid Mfthod hbshCodfMfthod;
    privbtf stbtid Mfthod fqublsMfthod;
    privbtf stbtid Mfthod toStringMfthod;
    stbtid {
        try {
            hbshCodfMfthod = Objfdt.dlbss.gftMfthod("hbshCodf");
            fqublsMfthod =
                Objfdt.dlbss.gftMfthod("fqubls", nfw Clbss<?>[] { Objfdt.dlbss });
            toStringMfthod = Objfdt.dlbss.gftMfthod("toString");
        } dbtdh (NoSudhMfthodExdfption f) {
            throw nfw NoSudhMfthodError(f.gftMfssbgf());
        }
    }

    /** nbmf of proxy dlbss */
    privbtf String dlbssNbmf;

    /** proxy intfrfbdfs */
    privbtf Clbss<?>[] intfrfbdfs;

    /** proxy dlbss bddfss flbgs */
    privbtf int bddfssFlbgs;

    /** donstbnt pool of dlbss bfing gfnfrbtfd */
    privbtf ConstbntPool dp = nfw ConstbntPool();

    /** FifldInfo strudt for fbdh fifld of gfnfrbtfd dlbss */
    privbtf List<FifldInfo> fiflds = nfw ArrbyList<>();

    /** MfthodInfo strudt for fbdh mfthod of gfnfrbtfd dlbss */
    privbtf List<MfthodInfo> mfthods = nfw ArrbyList<>();

    /**
     * mbps mfthod signbturf string to list of ProxyMfthod objfdts for
     * proxy mfthods with thbt signbturf
     */
    privbtf Mbp<String, List<ProxyMfthod>> proxyMfthods = nfw HbshMbp<>();

    /** dount of ProxyMfthod objfdts bddfd to proxyMfthods */
    privbtf int proxyMfthodCount = 0;

    /**
     * Construdt b ProxyGfnfrbtor to gfnfrbtf b proxy dlbss with thf
     * spfdififd nbmf bnd for thf givfn intfrfbdfs.
     *
     * A ProxyGfnfrbtor objfdt dontbins thf stbtf for thf ongoing
     * gfnfrbtion of b pbrtidulbr proxy dlbss.
     */
    privbtf ProxyGfnfrbtor(String dlbssNbmf, Clbss<?>[] intfrfbdfs, int bddfssFlbgs) {
        this.dlbssNbmf = dlbssNbmf;
        this.intfrfbdfs = intfrfbdfs;
        this.bddfssFlbgs = bddfssFlbgs;
    }

    /**
     * Gfnfrbtf b dlbss filf for thf proxy dlbss.  This mfthod drivfs thf
     * dlbss filf gfnfrbtion prodfss.
     */
    privbtf bytf[] gfnfrbtfClbssFilf() {

        /* ============================================================
         * Stfp 1: Assfmblf ProxyMfthod objfdts for bll mfthods to
         * gfnfrbtf proxy dispbtdhing dodf for.
         */

        /*
         * Rfdord thbt proxy mfthods brf nffdfd for thf hbshCodf, fqubls,
         * bnd toString mfthods of jbvb.lbng.Objfdt.  This is donf bfforf
         * thf mfthods from thf proxy intfrfbdfs so thbt thf mfthods from
         * jbvb.lbng.Objfdt tbkf prfdfdfndf ovfr duplidbtf mfthods in thf
         * proxy intfrfbdfs.
         */
        bddProxyMfthod(hbshCodfMfthod, Objfdt.dlbss);
        bddProxyMfthod(fqublsMfthod, Objfdt.dlbss);
        bddProxyMfthod(toStringMfthod, Objfdt.dlbss);

        /*
         * Now rfdord bll of thf mfthods from thf proxy intfrfbdfs, giving
         * fbrlifr intfrfbdfs prfdfdfndf ovfr lbtfr onfs with duplidbtf
         * mfthods.
         */
        for (Clbss<?> intf : intfrfbdfs) {
            for (Mfthod m : intf.gftMfthods()) {
                bddProxyMfthod(m, intf);
            }
        }

        /*
         * For fbdh sft of proxy mfthods with thf sbmf signbturf,
         * vfrify thbt thf mfthods' rfturn typfs brf dompbtiblf.
         */
        for (List<ProxyMfthod> sigmfthods : proxyMfthods.vblufs()) {
            dhfdkRfturnTypfs(sigmfthods);
        }

        /* ============================================================
         * Stfp 2: Assfmblf FifldInfo bnd MfthodInfo strudts for bll of
         * fiflds bnd mfthods in thf dlbss wf brf gfnfrbting.
         */
        try {
            mfthods.bdd(gfnfrbtfConstrudtor());

            for (List<ProxyMfthod> sigmfthods : proxyMfthods.vblufs()) {
                for (ProxyMfthod pm : sigmfthods) {

                    // bdd stbtid fifld for mfthod's Mfthod objfdt
                    fiflds.bdd(nfw FifldInfo(pm.mfthodFifldNbmf,
                        "Ljbvb/lbng/rfflfdt/Mfthod;",
                         ACC_PRIVATE | ACC_STATIC));

                    // gfnfrbtf dodf for proxy mfthod bnd bdd it
                    mfthods.bdd(pm.gfnfrbtfMfthod());
                }
            }

            mfthods.bdd(gfnfrbtfStbtidInitiblizfr());

        } dbtdh (IOExdfption f) {
            throw nfw IntfrnblError("unfxpfdtfd I/O Exdfption", f);
        }

        if (mfthods.sizf() > 65535) {
            throw nfw IllfgblArgumfntExdfption("mfthod limit fxdffdfd");
        }
        if (fiflds.sizf() > 65535) {
            throw nfw IllfgblArgumfntExdfption("fifld limit fxdffdfd");
        }

        /* ============================================================
         * Stfp 3: Writf thf finbl dlbss filf.
         */

        /*
         * Mbkf surf thbt donstbnt pool indfxfs brf rfsfrvfd for thf
         * following itfms bfforf stbrting to writf thf finbl dlbss filf.
         */
        dp.gftClbss(dotToSlbsh(dlbssNbmf));
        dp.gftClbss(supfrdlbssNbmf);
        for (Clbss<?> intf: intfrfbdfs) {
            dp.gftClbss(dotToSlbsh(intf.gftNbmf()));
        }

        /*
         * Disbllow nfw donstbnt pool bdditions bfyond this point, sindf
         * wf brf bbout to writf thf finbl donstbnt pool tbblf.
         */
        dp.sftRfbdOnly();

        BytfArrbyOutputStrfbm bout = nfw BytfArrbyOutputStrfbm();
        DbtbOutputStrfbm dout = nfw DbtbOutputStrfbm(bout);

        try {
            /*
             * Writf bll thf itfms of thf "ClbssFilf" strudturf.
             * Sff JVMS sfdtion 4.1.
             */
                                        // u4 mbgid;
            dout.writfInt(0xCAFEBABE);
                                        // u2 minor_vfrsion;
            dout.writfShort(CLASSFILE_MINOR_VERSION);
                                        // u2 mbjor_vfrsion;
            dout.writfShort(CLASSFILE_MAJOR_VERSION);

            dp.writf(dout);             // (writf donstbnt pool)

                                        // u2 bddfss_flbgs;
            dout.writfShort(bddfssFlbgs);
                                        // u2 this_dlbss;
            dout.writfShort(dp.gftClbss(dotToSlbsh(dlbssNbmf)));
                                        // u2 supfr_dlbss;
            dout.writfShort(dp.gftClbss(supfrdlbssNbmf));

                                        // u2 intfrfbdfs_dount;
            dout.writfShort(intfrfbdfs.lfngth);
                                        // u2 intfrfbdfs[intfrfbdfs_dount];
            for (Clbss<?> intf : intfrfbdfs) {
                dout.writfShort(dp.gftClbss(
                    dotToSlbsh(intf.gftNbmf())));
            }

                                        // u2 fiflds_dount;
            dout.writfShort(fiflds.sizf());
                                        // fifld_info fiflds[fiflds_dount];
            for (FifldInfo f : fiflds) {
                f.writf(dout);
            }

                                        // u2 mfthods_dount;
            dout.writfShort(mfthods.sizf());
                                        // mfthod_info mfthods[mfthods_dount];
            for (MfthodInfo m : mfthods) {
                m.writf(dout);
            }

                                         // u2 bttributfs_dount;
            dout.writfShort(0); // (no ClbssFilf bttributfs for proxy dlbssfs)

        } dbtdh (IOExdfption f) {
            throw nfw IntfrnblError("unfxpfdtfd I/O Exdfption", f);
        }

        rfturn bout.toBytfArrby();
    }

    /**
     * Add bnothfr mfthod to bf proxifd, fithfr by drfbting b nfw
     * ProxyMfthod objfdt or bugmfnting bn old onf for b duplidbtf
     * mfthod.
     *
     * "fromClbss" indidbtfs thf proxy intfrfbdf thbt thf mfthod wbs
     * found through, whidh mby bf difffrfnt from (b subintfrfbdf of)
     * thf mfthod's "dfdlbring dlbss".  Notf thbt thf first Mfthod
     * objfdt pbssfd for b givfn nbmf bnd dfsdriptor idfntififs thf
     * Mfthod objfdt (bnd thus thf dfdlbring dlbss) thbt will bf
     * pbssfd to thf invodbtion hbndlfr's "invokf" mfthod for b givfn
     * sft of duplidbtf mfthods.
     */
    privbtf void bddProxyMfthod(Mfthod m, Clbss<?> fromClbss) {
        String nbmf = m.gftNbmf();
        Clbss<?>[] pbrbmftfrTypfs = m.gftPbrbmftfrTypfs();
        Clbss<?> rfturnTypf = m.gftRfturnTypf();
        Clbss<?>[] fxdfptionTypfs = m.gftExdfptionTypfs();

        String sig = nbmf + gftPbrbmftfrDfsdriptors(pbrbmftfrTypfs);
        List<ProxyMfthod> sigmfthods = proxyMfthods.gft(sig);
        if (sigmfthods != null) {
            for (ProxyMfthod pm : sigmfthods) {
                if (rfturnTypf == pm.rfturnTypf) {
                    /*
                     * Found b mbtdh: rfdudf fxdfption typfs to thf
                     * grfbtfst sft of fxdfptions thbt dbn thrown
                     * dompbtibly with thf throws dlbusfs of both
                     * ovfrriddfn mfthods.
                     */
                    List<Clbss<?>> lfgblExdfptions = nfw ArrbyList<>();
                    dollfdtCompbtiblfTypfs(
                        fxdfptionTypfs, pm.fxdfptionTypfs, lfgblExdfptions);
                    dollfdtCompbtiblfTypfs(
                        pm.fxdfptionTypfs, fxdfptionTypfs, lfgblExdfptions);
                    pm.fxdfptionTypfs = nfw Clbss<?>[lfgblExdfptions.sizf()];
                    pm.fxdfptionTypfs =
                        lfgblExdfptions.toArrby(pm.fxdfptionTypfs);
                    rfturn;
                }
            }
        } flsf {
            sigmfthods = nfw ArrbyList<>(3);
            proxyMfthods.put(sig, sigmfthods);
        }
        sigmfthods.bdd(nfw ProxyMfthod(nbmf, pbrbmftfrTypfs, rfturnTypf,
                                       fxdfptionTypfs, fromClbss));
    }

    /**
     * For b givfn sft of proxy mfthods with thf sbmf signbturf, dhfdk
     * thbt thfir rfturn typfs brf dompbtiblf bddording to thf Proxy
     * spfdifidbtion.
     *
     * Spfdifidblly, if thfrf is morf thbn onf sudh mfthod, thfn bll
     * of thf rfturn typfs must bf rfffrfndf typfs, bnd thfrf must bf
     * onf rfturn typf thbt is bssignbblf to fbdh of thf rfst of thfm.
     */
    privbtf stbtid void dhfdkRfturnTypfs(List<ProxyMfthod> mfthods) {
        /*
         * If thfrf is only onf mfthod with b givfn signbturf, thfrf
         * dbnnot bf b donflidt.  This is thf only dbsf in whidh b
         * primitivf (or void) rfturn typf is bllowfd.
         */
        if (mfthods.sizf() < 2) {
            rfturn;
        }

        /*
         * List of rfturn typfs thbt brf not yft known to bf
         * bssignbblf from ("dovfrfd" by) bny of thf othfrs.
         */
        LinkfdList<Clbss<?>> undovfrfdRfturnTypfs = nfw LinkfdList<>();

    nfxtNfwRfturnTypf:
        for (ProxyMfthod pm : mfthods) {
            Clbss<?> nfwRfturnTypf = pm.rfturnTypf;
            if (nfwRfturnTypf.isPrimitivf()) {
                throw nfw IllfgblArgumfntExdfption(
                    "mfthods with sbmf signbturf " +
                    gftFrifndlyMfthodSignbturf(pm.mfthodNbmf,
                                               pm.pbrbmftfrTypfs) +
                    " but indompbtiblf rfturn typfs: " +
                    nfwRfturnTypf.gftNbmf() + " bnd othfrs");
            }
            boolfbn bddfd = fblsf;

            /*
             * Compbrf thf nfw rfturn typf to thf fxisting undovfrfd
             * rfturn typfs.
             */
            ListItfrbtor<Clbss<?>> litfr = undovfrfdRfturnTypfs.listItfrbtor();
            whilf (litfr.hbsNfxt()) {
                Clbss<?> undovfrfdRfturnTypf = litfr.nfxt();

                /*
                 * If bn fxisting undovfrfd rfturn typf is bssignbblf
                 * to this nfw onf, thfn wf dbn forgft thf nfw onf.
                 */
                if (nfwRfturnTypf.isAssignbblfFrom(undovfrfdRfturnTypf)) {
                    bssfrt !bddfd;
                    dontinuf nfxtNfwRfturnTypf;
                }

                /*
                 * If thf nfw rfturn typf is bssignbblf to bn fxisting
                 * undovfrfd onf, thfn should rfplbdf thf fxisting onf
                 * with thf nfw onf (or just forgft thf fxisting onf,
                 * if thf nfw onf hbs blrfbdy bf put in thf list).
                 */
                if (undovfrfdRfturnTypf.isAssignbblfFrom(nfwRfturnTypf)) {
                    // (wf dbn bssumf thbt fbdh rfturn typf is uniquf)
                    if (!bddfd) {
                        litfr.sft(nfwRfturnTypf);
                        bddfd = truf;
                    } flsf {
                        litfr.rfmovf();
                    }
                }
            }

            /*
             * If wf got through thf list of fxisting undovfrfd rfturn
             * typfs without bn bssignbbility rflbtionship, thfn bdd
             * thf nfw rfturn typf to thf list of undovfrfd onfs.
             */
            if (!bddfd) {
                undovfrfdRfturnTypfs.bdd(nfwRfturnTypf);
            }
        }

        /*
         * Wf shouldn't fnd up with morf thbn onf rfturn typf thbt is
         * not bssignbblf from bny of thf othfrs.
         */
        if (undovfrfdRfturnTypfs.sizf() > 1) {
            ProxyMfthod pm = mfthods.gft(0);
            throw nfw IllfgblArgumfntExdfption(
                "mfthods with sbmf signbturf " +
                gftFrifndlyMfthodSignbturf(pm.mfthodNbmf, pm.pbrbmftfrTypfs) +
                " but indompbtiblf rfturn typfs: " + undovfrfdRfturnTypfs);
        }
    }

    /**
     * A FifldInfo objfdt dontbins informbtion bbout b pbrtidulbr fifld
     * in thf dlbss bfing gfnfrbtfd.  Thf dlbss mirrors thf dbtb itfms of
     * thf "fifld_info" strudturf of thf dlbss filf formbt (sff JVMS 4.5).
     */
    privbtf dlbss FifldInfo {
        publid int bddfssFlbgs;
        publid String nbmf;
        publid String dfsdriptor;

        publid FifldInfo(String nbmf, String dfsdriptor, int bddfssFlbgs) {
            this.nbmf = nbmf;
            this.dfsdriptor = dfsdriptor;
            this.bddfssFlbgs = bddfssFlbgs;

            /*
             * Mbkf surf thbt donstbnt pool indfxfs brf rfsfrvfd for thf
             * following itfms bfforf stbrting to writf thf finbl dlbss filf.
             */
            dp.gftUtf8(nbmf);
            dp.gftUtf8(dfsdriptor);
        }

        publid void writf(DbtbOutputStrfbm out) throws IOExdfption {
            /*
             * Writf bll thf itfms of thf "fifld_info" strudturf.
             * Sff JVMS sfdtion 4.5.
             */
                                        // u2 bddfss_flbgs;
            out.writfShort(bddfssFlbgs);
                                        // u2 nbmf_indfx;
            out.writfShort(dp.gftUtf8(nbmf));
                                        // u2 dfsdriptor_indfx;
            out.writfShort(dp.gftUtf8(dfsdriptor));
                                        // u2 bttributfs_dount;
            out.writfShort(0);  // (no fifld_info bttributfs for proxy dlbssfs)
        }
    }

    /**
     * An ExdfptionTbblfEntry objfdt holds vblufs for thf dbtb itfms of
     * bn fntry in thf "fxdfption_tbblf" itfm of thf "Codf" bttributf of
     * "mfthod_info" strudturfs (sff JVMS 4.7.3).
     */
    privbtf stbtid dlbss ExdfptionTbblfEntry {
        publid short stbrtPd;
        publid short fndPd;
        publid short hbndlfrPd;
        publid short dbtdhTypf;

        publid ExdfptionTbblfEntry(short stbrtPd, short fndPd,
                                   short hbndlfrPd, short dbtdhTypf)
        {
            this.stbrtPd = stbrtPd;
            this.fndPd = fndPd;
            this.hbndlfrPd = hbndlfrPd;
            this.dbtdhTypf = dbtdhTypf;
        }
    };

    /**
     * A MfthodInfo objfdt dontbins informbtion bbout b pbrtidulbr mfthod
     * in thf dlbss bfing gfnfrbtfd.  This dlbss mirrors thf dbtb itfms of
     * thf "mfthod_info" strudturf of thf dlbss filf formbt (sff JVMS 4.6).
     */
    privbtf dlbss MfthodInfo {
        publid int bddfssFlbgs;
        publid String nbmf;
        publid String dfsdriptor;
        publid short mbxStbdk;
        publid short mbxLodbls;
        publid BytfArrbyOutputStrfbm dodf = nfw BytfArrbyOutputStrfbm();
        publid List<ExdfptionTbblfEntry> fxdfptionTbblf =
            nfw ArrbyList<ExdfptionTbblfEntry>();
        publid short[] dfdlbrfdExdfptions;

        publid MfthodInfo(String nbmf, String dfsdriptor, int bddfssFlbgs) {
            this.nbmf = nbmf;
            this.dfsdriptor = dfsdriptor;
            this.bddfssFlbgs = bddfssFlbgs;

            /*
             * Mbkf surf thbt donstbnt pool indfxfs brf rfsfrvfd for thf
             * following itfms bfforf stbrting to writf thf finbl dlbss filf.
             */
            dp.gftUtf8(nbmf);
            dp.gftUtf8(dfsdriptor);
            dp.gftUtf8("Codf");
            dp.gftUtf8("Exdfptions");
        }

        publid void writf(DbtbOutputStrfbm out) throws IOExdfption {
            /*
             * Writf bll thf itfms of thf "mfthod_info" strudturf.
             * Sff JVMS sfdtion 4.6.
             */
                                        // u2 bddfss_flbgs;
            out.writfShort(bddfssFlbgs);
                                        // u2 nbmf_indfx;
            out.writfShort(dp.gftUtf8(nbmf));
                                        // u2 dfsdriptor_indfx;
            out.writfShort(dp.gftUtf8(dfsdriptor));
                                        // u2 bttributfs_dount;
            out.writfShort(2);  // (two mfthod_info bttributfs:)

            // Writf "Codf" bttributf. Sff JVMS sfdtion 4.7.3.

                                        // u2 bttributf_nbmf_indfx;
            out.writfShort(dp.gftUtf8("Codf"));
                                        // u4 bttributf_lfngth;
            out.writfInt(12 + dodf.sizf() + 8 * fxdfptionTbblf.sizf());
                                        // u2 mbx_stbdk;
            out.writfShort(mbxStbdk);
                                        // u2 mbx_lodbls;
            out.writfShort(mbxLodbls);
                                        // u2 dodf_lfngth;
            out.writfInt(dodf.sizf());
                                        // u1 dodf[dodf_lfngth];
            dodf.writfTo(out);
                                        // u2 fxdfption_tbblf_lfngth;
            out.writfShort(fxdfptionTbblf.sizf());
            for (ExdfptionTbblfEntry f : fxdfptionTbblf) {
                                        // u2 stbrt_pd;
                out.writfShort(f.stbrtPd);
                                        // u2 fnd_pd;
                out.writfShort(f.fndPd);
                                        // u2 hbndlfr_pd;
                out.writfShort(f.hbndlfrPd);
                                        // u2 dbtdh_typf;
                out.writfShort(f.dbtdhTypf);
            }
                                        // u2 bttributfs_dount;
            out.writfShort(0);

            // writf "Exdfptions" bttributf.  Sff JVMS sfdtion 4.7.4.

                                        // u2 bttributf_nbmf_indfx;
            out.writfShort(dp.gftUtf8("Exdfptions"));
                                        // u4 bttributfs_lfngth;
            out.writfInt(2 + 2 * dfdlbrfdExdfptions.lfngth);
                                        // u2 numbfr_of_fxdfptions;
            out.writfShort(dfdlbrfdExdfptions.lfngth);
                        // u2 fxdfption_indfx_tbblf[numbfr_of_fxdfptions];
            for (short vbluf : dfdlbrfdExdfptions) {
                out.writfShort(vbluf);
            }
        }

    }

    /**
     * A ProxyMfthod objfdt rfprfsfnts b proxy mfthod in thf proxy dlbss
     * bfing gfnfrbtfd: b mfthod whosf implfmfntbtion will fndodf bnd
     * dispbtdh invodbtions to thf proxy instbndf's invodbtion hbndlfr.
     */
    privbtf dlbss ProxyMfthod {

        publid String mfthodNbmf;
        publid Clbss<?>[] pbrbmftfrTypfs;
        publid Clbss<?> rfturnTypf;
        publid Clbss<?>[] fxdfptionTypfs;
        publid Clbss<?> fromClbss;
        publid String mfthodFifldNbmf;

        privbtf ProxyMfthod(String mfthodNbmf, Clbss<?>[] pbrbmftfrTypfs,
                            Clbss<?> rfturnTypf, Clbss<?>[] fxdfptionTypfs,
                            Clbss<?> fromClbss)
        {
            this.mfthodNbmf = mfthodNbmf;
            this.pbrbmftfrTypfs = pbrbmftfrTypfs;
            this.rfturnTypf = rfturnTypf;
            this.fxdfptionTypfs = fxdfptionTypfs;
            this.fromClbss = fromClbss;
            this.mfthodFifldNbmf = "m" + proxyMfthodCount++;
        }

        /**
         * Rfturn b MfthodInfo objfdt for this mfthod, indluding gfnfrbting
         * thf dodf bnd fxdfption tbblf fntry.
         */
        privbtf MfthodInfo gfnfrbtfMfthod() throws IOExdfption {
            String dfsd = gftMfthodDfsdriptor(pbrbmftfrTypfs, rfturnTypf);
            MfthodInfo minfo = nfw MfthodInfo(mfthodNbmf, dfsd,
                ACC_PUBLIC | ACC_FINAL);

            int[] pbrbmftfrSlot = nfw int[pbrbmftfrTypfs.lfngth];
            int nfxtSlot = 1;
            for (int i = 0; i < pbrbmftfrSlot.lfngth; i++) {
                pbrbmftfrSlot[i] = nfxtSlot;
                nfxtSlot += gftWordsPfrTypf(pbrbmftfrTypfs[i]);
            }
            int lodblSlot0 = nfxtSlot;
            short pd, tryBfgin = 0, tryEnd;

            DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(minfo.dodf);

            dodf_blobd(0, out);

            out.writfBytf(opd_gftfifld);
            out.writfShort(dp.gftFifldRff(
                supfrdlbssNbmf,
                hbndlfrFifldNbmf, "Ljbvb/lbng/rfflfdt/InvodbtionHbndlfr;"));

            dodf_blobd(0, out);

            out.writfBytf(opd_gftstbtid);
            out.writfShort(dp.gftFifldRff(
                dotToSlbsh(dlbssNbmf),
                mfthodFifldNbmf, "Ljbvb/lbng/rfflfdt/Mfthod;"));

            if (pbrbmftfrTypfs.lfngth > 0) {

                dodf_ipush(pbrbmftfrTypfs.lfngth, out);

                out.writfBytf(opd_bnfwbrrby);
                out.writfShort(dp.gftClbss("jbvb/lbng/Objfdt"));

                for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {

                    out.writfBytf(opd_dup);

                    dodf_ipush(i, out);

                    dodfWrbpArgumfnt(pbrbmftfrTypfs[i], pbrbmftfrSlot[i], out);

                    out.writfBytf(opd_bbstorf);
                }
            } flsf {

                out.writfBytf(opd_bdonst_null);
            }

            out.writfBytf(opd_invokfintfrfbdf);
            out.writfShort(dp.gftIntfrfbdfMfthodRff(
                "jbvb/lbng/rfflfdt/InvodbtionHbndlfr",
                "invokf",
                "(Ljbvb/lbng/Objfdt;Ljbvb/lbng/rfflfdt/Mfthod;" +
                    "[Ljbvb/lbng/Objfdt;)Ljbvb/lbng/Objfdt;"));
            out.writfBytf(4);
            out.writfBytf(0);

            if (rfturnTypf == void.dlbss) {

                out.writfBytf(opd_pop);

                out.writfBytf(opd_rfturn);

            } flsf {

                dodfUnwrbpRfturnVbluf(rfturnTypf, out);
            }

            tryEnd = pd = (short) minfo.dodf.sizf();

            List<Clbss<?>> dbtdhList = domputfUniqufCbtdhList(fxdfptionTypfs);
            if (dbtdhList.sizf() > 0) {

                for (Clbss<?> fx : dbtdhList) {
                    minfo.fxdfptionTbblf.bdd(nfw ExdfptionTbblfEntry(
                        tryBfgin, tryEnd, pd,
                        dp.gftClbss(dotToSlbsh(fx.gftNbmf()))));
                }

                out.writfBytf(opd_bthrow);

                pd = (short) minfo.dodf.sizf();

                minfo.fxdfptionTbblf.bdd(nfw ExdfptionTbblfEntry(
                    tryBfgin, tryEnd, pd, dp.gftClbss("jbvb/lbng/Throwbblf")));

                dodf_bstorf(lodblSlot0, out);

                out.writfBytf(opd_nfw);
                out.writfShort(dp.gftClbss(
                    "jbvb/lbng/rfflfdt/UndfdlbrfdThrowbblfExdfption"));

                out.writfBytf(opd_dup);

                dodf_blobd(lodblSlot0, out);

                out.writfBytf(opd_invokfspfdibl);

                out.writfShort(dp.gftMfthodRff(
                    "jbvb/lbng/rfflfdt/UndfdlbrfdThrowbblfExdfption",
                    "<init>", "(Ljbvb/lbng/Throwbblf;)V"));

                out.writfBytf(opd_bthrow);
            }

            if (minfo.dodf.sizf() > 65535) {
                throw nfw IllfgblArgumfntExdfption("dodf sizf limit fxdffdfd");
            }

            minfo.mbxStbdk = 10;
            minfo.mbxLodbls = (short) (lodblSlot0 + 1);
            minfo.dfdlbrfdExdfptions = nfw short[fxdfptionTypfs.lfngth];
            for (int i = 0; i < fxdfptionTypfs.lfngth; i++) {
                minfo.dfdlbrfdExdfptions[i] = dp.gftClbss(
                    dotToSlbsh(fxdfptionTypfs[i].gftNbmf()));
            }

            rfturn minfo;
        }

        /**
         * Gfnfrbtf dodf for wrbpping bn brgumfnt of thf givfn typf
         * whosf vbluf dbn bf found bt thf spfdififd lodbl vbribblf
         * indfx, in ordfr for it to bf pbssfd (bs bn Objfdt) to thf
         * invodbtion hbndlfr's "invokf" mfthod.  Thf dodf is writtfn
         * to thf supplifd strfbm.
         */
        privbtf void dodfWrbpArgumfnt(Clbss<?> typf, int slot,
                                      DbtbOutputStrfbm out)
            throws IOExdfption
        {
            if (typf.isPrimitivf()) {
                PrimitivfTypfInfo prim = PrimitivfTypfInfo.gft(typf);

                if (typf == int.dlbss ||
                    typf == boolfbn.dlbss ||
                    typf == bytf.dlbss ||
                    typf == dhbr.dlbss ||
                    typf == short.dlbss)
                {
                    dodf_ilobd(slot, out);
                } flsf if (typf == long.dlbss) {
                    dodf_llobd(slot, out);
                } flsf if (typf == flobt.dlbss) {
                    dodf_flobd(slot, out);
                } flsf if (typf == doublf.dlbss) {
                    dodf_dlobd(slot, out);
                } flsf {
                    throw nfw AssfrtionError();
                }

                out.writfBytf(opd_invokfstbtid);
                out.writfShort(dp.gftMfthodRff(
                    prim.wrbppfrClbssNbmf,
                    "vblufOf", prim.wrbppfrVblufOfDfsd));

            } flsf {

                dodf_blobd(slot, out);
            }
        }

        /**
         * Gfnfrbtf dodf for unwrbpping b rfturn vbluf of thf givfn
         * typf from thf invodbtion hbndlfr's "invokf" mfthod (bs typf
         * Objfdt) to its dorrfdt typf.  Thf dodf is writtfn to thf
         * supplifd strfbm.
         */
        privbtf void dodfUnwrbpRfturnVbluf(Clbss<?> typf, DbtbOutputStrfbm out)
            throws IOExdfption
        {
            if (typf.isPrimitivf()) {
                PrimitivfTypfInfo prim = PrimitivfTypfInfo.gft(typf);

                out.writfBytf(opd_dhfdkdbst);
                out.writfShort(dp.gftClbss(prim.wrbppfrClbssNbmf));

                out.writfBytf(opd_invokfvirtubl);
                out.writfShort(dp.gftMfthodRff(
                    prim.wrbppfrClbssNbmf,
                    prim.unwrbpMfthodNbmf, prim.unwrbpMfthodDfsd));

                if (typf == int.dlbss ||
                    typf == boolfbn.dlbss ||
                    typf == bytf.dlbss ||
                    typf == dhbr.dlbss ||
                    typf == short.dlbss)
                {
                    out.writfBytf(opd_irfturn);
                } flsf if (typf == long.dlbss) {
                    out.writfBytf(opd_lrfturn);
                } flsf if (typf == flobt.dlbss) {
                    out.writfBytf(opd_frfturn);
                } flsf if (typf == doublf.dlbss) {
                    out.writfBytf(opd_drfturn);
                } flsf {
                    throw nfw AssfrtionError();
                }

            } flsf {

                out.writfBytf(opd_dhfdkdbst);
                out.writfShort(dp.gftClbss(dotToSlbsh(typf.gftNbmf())));

                out.writfBytf(opd_brfturn);
            }
        }

        /**
         * Gfnfrbtf dodf for initiblizing thf stbtid fifld thbt storfs
         * thf Mfthod objfdt for this proxy mfthod.  Thf dodf is writtfn
         * to thf supplifd strfbm.
         */
        privbtf void dodfFifldInitiblizbtion(DbtbOutputStrfbm out)
            throws IOExdfption
        {
            dodfClbssForNbmf(fromClbss, out);

            dodf_ldd(dp.gftString(mfthodNbmf), out);

            dodf_ipush(pbrbmftfrTypfs.lfngth, out);

            out.writfBytf(opd_bnfwbrrby);
            out.writfShort(dp.gftClbss("jbvb/lbng/Clbss"));

            for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {

                out.writfBytf(opd_dup);

                dodf_ipush(i, out);

                if (pbrbmftfrTypfs[i].isPrimitivf()) {
                    PrimitivfTypfInfo prim =
                        PrimitivfTypfInfo.gft(pbrbmftfrTypfs[i]);

                    out.writfBytf(opd_gftstbtid);
                    out.writfShort(dp.gftFifldRff(
                        prim.wrbppfrClbssNbmf, "TYPE", "Ljbvb/lbng/Clbss;"));

                } flsf {
                    dodfClbssForNbmf(pbrbmftfrTypfs[i], out);
                }

                out.writfBytf(opd_bbstorf);
            }

            out.writfBytf(opd_invokfvirtubl);
            out.writfShort(dp.gftMfthodRff(
                "jbvb/lbng/Clbss",
                "gftMfthod",
                "(Ljbvb/lbng/String;[Ljbvb/lbng/Clbss;)" +
                "Ljbvb/lbng/rfflfdt/Mfthod;"));

            out.writfBytf(opd_putstbtid);
            out.writfShort(dp.gftFifldRff(
                dotToSlbsh(dlbssNbmf),
                mfthodFifldNbmf, "Ljbvb/lbng/rfflfdt/Mfthod;"));
        }
    }

    /**
     * Gfnfrbtf thf donstrudtor mfthod for thf proxy dlbss.
     */
    privbtf MfthodInfo gfnfrbtfConstrudtor() throws IOExdfption {
        MfthodInfo minfo = nfw MfthodInfo(
            "<init>", "(Ljbvb/lbng/rfflfdt/InvodbtionHbndlfr;)V",
            ACC_PUBLIC);

        DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(minfo.dodf);

        dodf_blobd(0, out);

        dodf_blobd(1, out);

        out.writfBytf(opd_invokfspfdibl);
        out.writfShort(dp.gftMfthodRff(
            supfrdlbssNbmf,
            "<init>", "(Ljbvb/lbng/rfflfdt/InvodbtionHbndlfr;)V"));

        out.writfBytf(opd_rfturn);

        minfo.mbxStbdk = 10;
        minfo.mbxLodbls = 2;
        minfo.dfdlbrfdExdfptions = nfw short[0];

        rfturn minfo;
    }

    /**
     * Gfnfrbtf thf stbtid initiblizfr mfthod for thf proxy dlbss.
     */
    privbtf MfthodInfo gfnfrbtfStbtidInitiblizfr() throws IOExdfption {
        MfthodInfo minfo = nfw MfthodInfo(
            "<dlinit>", "()V", ACC_STATIC);

        int lodblSlot0 = 1;
        short pd, tryBfgin = 0, tryEnd;

        DbtbOutputStrfbm out = nfw DbtbOutputStrfbm(minfo.dodf);

        for (List<ProxyMfthod> sigmfthods : proxyMfthods.vblufs()) {
            for (ProxyMfthod pm : sigmfthods) {
                pm.dodfFifldInitiblizbtion(out);
            }
        }

        out.writfBytf(opd_rfturn);

        tryEnd = pd = (short) minfo.dodf.sizf();

        minfo.fxdfptionTbblf.bdd(nfw ExdfptionTbblfEntry(
            tryBfgin, tryEnd, pd,
            dp.gftClbss("jbvb/lbng/NoSudhMfthodExdfption")));

        dodf_bstorf(lodblSlot0, out);

        out.writfBytf(opd_nfw);
        out.writfShort(dp.gftClbss("jbvb/lbng/NoSudhMfthodError"));

        out.writfBytf(opd_dup);

        dodf_blobd(lodblSlot0, out);

        out.writfBytf(opd_invokfvirtubl);
        out.writfShort(dp.gftMfthodRff(
            "jbvb/lbng/Throwbblf", "gftMfssbgf", "()Ljbvb/lbng/String;"));

        out.writfBytf(opd_invokfspfdibl);
        out.writfShort(dp.gftMfthodRff(
            "jbvb/lbng/NoSudhMfthodError", "<init>", "(Ljbvb/lbng/String;)V"));

        out.writfBytf(opd_bthrow);

        pd = (short) minfo.dodf.sizf();

        minfo.fxdfptionTbblf.bdd(nfw ExdfptionTbblfEntry(
            tryBfgin, tryEnd, pd,
            dp.gftClbss("jbvb/lbng/ClbssNotFoundExdfption")));

        dodf_bstorf(lodblSlot0, out);

        out.writfBytf(opd_nfw);
        out.writfShort(dp.gftClbss("jbvb/lbng/NoClbssDffFoundError"));

        out.writfBytf(opd_dup);

        dodf_blobd(lodblSlot0, out);

        out.writfBytf(opd_invokfvirtubl);
        out.writfShort(dp.gftMfthodRff(
            "jbvb/lbng/Throwbblf", "gftMfssbgf", "()Ljbvb/lbng/String;"));

        out.writfBytf(opd_invokfspfdibl);
        out.writfShort(dp.gftMfthodRff(
            "jbvb/lbng/NoClbssDffFoundError",
            "<init>", "(Ljbvb/lbng/String;)V"));

        out.writfBytf(opd_bthrow);

        if (minfo.dodf.sizf() > 65535) {
            throw nfw IllfgblArgumfntExdfption("dodf sizf limit fxdffdfd");
        }

        minfo.mbxStbdk = 10;
        minfo.mbxLodbls = (short) (lodblSlot0 + 1);
        minfo.dfdlbrfdExdfptions = nfw short[0];

        rfturn minfo;
    }


    /*
     * =============== Codf Gfnfrbtion Utility Mfthods ===============
     */

    /*
     * Thf following mfthods gfnfrbtf dodf for thf lobd or storf opfrbtion
     * indidbtfd by thfir nbmf for thf givfn lodbl vbribblf.  Thf dodf is
     * writtfn to thf supplifd strfbm.
     */

    privbtf void dodf_ilobd(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_ilobd, opd_ilobd_0, out);
    }

    privbtf void dodf_llobd(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_llobd, opd_llobd_0, out);
    }

    privbtf void dodf_flobd(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_flobd, opd_flobd_0, out);
    }

    privbtf void dodf_dlobd(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_dlobd, opd_dlobd_0, out);
    }

    privbtf void dodf_blobd(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_blobd, opd_blobd_0, out);
    }

//  privbtf void dodf_istorf(int lvbr, DbtbOutputStrfbm out)
//      throws IOExdfption
//  {
//      dodfLodblLobdStorf(lvbr, opd_istorf, opd_istorf_0, out);
//  }

//  privbtf void dodf_lstorf(int lvbr, DbtbOutputStrfbm out)
//      throws IOExdfption
//  {
//      dodfLodblLobdStorf(lvbr, opd_lstorf, opd_lstorf_0, out);
//  }

//  privbtf void dodf_fstorf(int lvbr, DbtbOutputStrfbm out)
//      throws IOExdfption
//  {
//      dodfLodblLobdStorf(lvbr, opd_fstorf, opd_fstorf_0, out);
//  }

//  privbtf void dodf_dstorf(int lvbr, DbtbOutputStrfbm out)
//      throws IOExdfption
//  {
//      dodfLodblLobdStorf(lvbr, opd_dstorf, opd_dstorf_0, out);
//  }

    privbtf void dodf_bstorf(int lvbr, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodfLodblLobdStorf(lvbr, opd_bstorf, opd_bstorf_0, out);
    }

    /**
     * Gfnfrbtf dodf for b lobd or storf instrudtion for thf givfn lodbl
     * vbribblf.  Thf dodf is writtfn to thf supplifd strfbm.
     *
     * "opdodf" indidbtfs thf opdodf form of thf dfsirfd lobd or storf
     * instrudtion thbt tbkfs bn fxplidit lodbl vbribblf indfx, bnd
     * "opdodf_0" indidbtfs thf dorrfsponding form of thf instrudtion
     * with thf implidit indfx 0.
     */
    privbtf void dodfLodblLobdStorf(int lvbr, int opdodf, int opdodf_0,
                                    DbtbOutputStrfbm out)
        throws IOExdfption
    {
        bssfrt lvbr >= 0 && lvbr <= 0xFFFF;
        if (lvbr <= 3) {
            out.writfBytf(opdodf_0 + lvbr);
        } flsf if (lvbr <= 0xFF) {
            out.writfBytf(opdodf);
            out.writfBytf(lvbr & 0xFF);
        } flsf {
            /*
             * Usf thf "widf" instrudtion modififr for lodbl vbribblf
             * indfxfs thbt do not fit into bn unsignfd bytf.
             */
            out.writfBytf(opd_widf);
            out.writfBytf(opdodf);
            out.writfShort(lvbr & 0xFFFF);
        }
    }

    /**
     * Gfnfrbtf dodf for bn "ldd" instrudtion for thf givfn donstbnt pool
     * indfx (thf "ldd_w" instrudtion is usfd if thf indfx dofs not fit
     * into bn unsignfd bytf).  Thf dodf is writtfn to thf supplifd strfbm.
     */
    privbtf void dodf_ldd(int indfx, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        bssfrt indfx >= 0 && indfx <= 0xFFFF;
        if (indfx <= 0xFF) {
            out.writfBytf(opd_ldd);
            out.writfBytf(indfx & 0xFF);
        } flsf {
            out.writfBytf(opd_ldd_w);
            out.writfShort(indfx & 0xFFFF);
        }
    }

    /**
     * Gfnfrbtf dodf to push b donstbnt intfgfr vbluf on to thf opfrbnd
     * stbdk, using thf "idonst_<i>", "bipush", or "sipush" instrudtions
     * dfpfnding on thf sizf of thf vbluf.  Thf dodf is writtfn to thf
     * supplifd strfbm.
     */
    privbtf void dodf_ipush(int vbluf, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        if (vbluf >= -1 && vbluf <= 5) {
            out.writfBytf(opd_idonst_0 + vbluf);
        } flsf if (vbluf >= Bytf.MIN_VALUE && vbluf <= Bytf.MAX_VALUE) {
            out.writfBytf(opd_bipush);
            out.writfBytf(vbluf & 0xFF);
        } flsf if (vbluf >= Short.MIN_VALUE && vbluf <= Short.MAX_VALUE) {
            out.writfBytf(opd_sipush);
            out.writfShort(vbluf & 0xFFFF);
        } flsf {
            throw nfw AssfrtionError();
        }
    }

    /**
     * Gfnfrbtf dodf to invokf thf Clbss.forNbmf with thf nbmf of thf givfn
     * dlbss to gft its Clbss objfdt bt runtimf.  Thf dodf is writtfn to
     * thf supplifd strfbm.  Notf thbt thf dodf gfnfrbtfd by this mfthod
     * mby dbusfd thf dhfdkfd ClbssNotFoundExdfption to bf thrown.
     */
    privbtf void dodfClbssForNbmf(Clbss<?> dl, DbtbOutputStrfbm out)
        throws IOExdfption
    {
        dodf_ldd(dp.gftString(dl.gftNbmf()), out);

        out.writfBytf(opd_invokfstbtid);
        out.writfShort(dp.gftMfthodRff(
            "jbvb/lbng/Clbss",
            "forNbmf", "(Ljbvb/lbng/String;)Ljbvb/lbng/Clbss;"));
    }


    /*
     * ==================== Gfnfrbl Utility Mfthods ====================
     */

    /**
     * Convfrt b fully qublififd dlbss nbmf thbt usfs '.' bs thf pbdkbgf
     * sfpbrbtor, thf fxtfrnbl rfprfsfntbtion usfd by thf Jbvb lbngubgf
     * bnd APIs, to b fully qublififd dlbss nbmf thbt usfs '/' bs thf
     * pbdkbgf sfpbrbtor, thf rfprfsfntbtion usfd in thf dlbss filf
     * formbt (sff JVMS sfdtion 4.2).
     */
    privbtf stbtid String dotToSlbsh(String nbmf) {
        rfturn nbmf.rfplbdf('.', '/');
    }

    /**
     * Rfturn thf "mfthod dfsdriptor" string for b mfthod with thf givfn
     * pbrbmftfr typfs bnd rfturn typf.  Sff JVMS sfdtion 4.3.3.
     */
    privbtf stbtid String gftMfthodDfsdriptor(Clbss<?>[] pbrbmftfrTypfs,
                                              Clbss<?> rfturnTypf)
    {
        rfturn gftPbrbmftfrDfsdriptors(pbrbmftfrTypfs) +
            ((rfturnTypf == void.dlbss) ? "V" : gftFifldTypf(rfturnTypf));
    }

    /**
     * Rfturn thf list of "pbrbmftfr dfsdriptor" strings fndlosfd in
     * pbrfnthfsfs dorrfsponding to thf givfn pbrbmftfr typfs (in othfr
     * words, b mfthod dfsdriptor without b rfturn dfsdriptor).  This
     * string is usfful for donstrudting string kfys for mfthods without
     * rfgbrd to thfir rfturn typf.
     */
    privbtf stbtid String gftPbrbmftfrDfsdriptors(Clbss<?>[] pbrbmftfrTypfs) {
        StringBuildfr dfsd = nfw StringBuildfr("(");
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            dfsd.bppfnd(gftFifldTypf(pbrbmftfrTypfs[i]));
        }
        dfsd.bppfnd(')');
        rfturn dfsd.toString();
    }

    /**
     * Rfturn thf "fifld typf" string for thf givfn typf, bppropribtf for
     * b fifld dfsdriptor, b pbrbmftfr dfsdriptor, or b rfturn dfsdriptor
     * othfr thbn "void".  Sff JVMS sfdtion 4.3.2.
     */
    privbtf stbtid String gftFifldTypf(Clbss<?> typf) {
        if (typf.isPrimitivf()) {
            rfturn PrimitivfTypfInfo.gft(typf).bbsfTypfString;
        } flsf if (typf.isArrby()) {
            /*
             * Addording to JLS 20.3.2, thf gftNbmf() mfthod on Clbss dofs
             * rfturn thf VM typf dfsdriptor formbt for brrby dlbssfs (only);
             * using thbt should bf quidkfr thbn thf othfrwisf obvious dodf:
             *
             *     rfturn "[" + gftTypfDfsdriptor(typf.gftComponfntTypf());
             */
            rfturn typf.gftNbmf().rfplbdf('.', '/');
        } flsf {
            rfturn "L" + dotToSlbsh(typf.gftNbmf()) + ";";
        }
    }

    /**
     * Rfturns b humbn-rfbdbblf string rfprfsfnting thf signbturf of b
     * mfthod with thf givfn nbmf bnd pbrbmftfr typfs.
     */
    privbtf stbtid String gftFrifndlyMfthodSignbturf(String nbmf,
                                                     Clbss<?>[] pbrbmftfrTypfs)
    {
        StringBuildfr sig = nfw StringBuildfr(nbmf);
        sig.bppfnd('(');
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            if (i > 0) {
                sig.bppfnd(',');
            }
            Clbss<?> pbrbmftfrTypf = pbrbmftfrTypfs[i];
            int dimfnsions = 0;
            whilf (pbrbmftfrTypf.isArrby()) {
                pbrbmftfrTypf = pbrbmftfrTypf.gftComponfntTypf();
                dimfnsions++;
            }
            sig.bppfnd(pbrbmftfrTypf.gftNbmf());
            whilf (dimfnsions-- > 0) {
                sig.bppfnd("[]");
            }
        }
        sig.bppfnd(')');
        rfturn sig.toString();
    }

    /**
     * Rfturn thf numbfr of bbstrbdt "words", or donsfdutivf lodbl vbribblf
     * indfxfs, rfquirfd to dontbin b vbluf of thf givfn typf.  Sff JVMS
     * sfdtion 3.6.1.
     *
     * Notf thbt thf originbl vfrsion of thf JVMS dontbinfd b dffinition of
     * this bbstrbdt notion of b "word" in sfdtion 3.4, but thbt dffinition
     * wbs rfmovfd for thf sfdond fdition.
     */
    privbtf stbtid int gftWordsPfrTypf(Clbss<?> typf) {
        if (typf == long.dlbss || typf == doublf.dlbss) {
            rfturn 2;
        } flsf {
            rfturn 1;
        }
    }

    /**
     * Add to thf givfn list bll of thf typfs in thf "from" brrby thbt
     * brf not blrfbdy dontbinfd in thf list bnd brf bssignbblf to bt
     * lfbst onf of thf typfs in thf "with" brrby.
     *
     * This mfthod is usfful for domputing thf grfbtfst dommon sft of
     * dfdlbrfd fxdfptions from duplidbtf mfthods inhfritfd from
     * difffrfnt intfrfbdfs.
     */
    privbtf stbtid void dollfdtCompbtiblfTypfs(Clbss<?>[] from,
                                               Clbss<?>[] with,
                                               List<Clbss<?>> list)
    {
        for (Clbss<?> fd: from) {
            if (!list.dontbins(fd)) {
                for (Clbss<?> wd: with) {
                    if (wd.isAssignbblfFrom(fd)) {
                        list.bdd(fd);
                        brfbk;
                    }
                }
            }
        }
    }

    /**
     * Givfn thf fxdfptions dfdlbrfd in thf throws dlbusf of b proxy mfthod,
     * domputf thf fxdfptions thbt nffd to bf dbught from thf invodbtion
     * hbndlfr's invokf mfthod bnd rfthrown intbdt in thf mfthod's
     * implfmfntbtion bfforf dbtdhing othfr Throwbblfs bnd wrbpping thfm
     * in UndfdlbrfdThrowbblfExdfptions.
     *
     * Thf fxdfptions to bf dbught brf rfturnfd in b List objfdt.  Ebdh
     * fxdfption in thf rfturnfd list is gubrbntffd to not bf b subdlbss of
     * bny of thf othfr fxdfptions in thf list, so thf dbtdh blodks for
     * thfsf fxdfptions mby bf gfnfrbtfd in bny ordfr rflbtivf to fbdh othfr.
     *
     * Error bnd RuntimfExdfption brf fbdh blwbys dontbinfd by thf rfturnfd
     * list (if nonf of thfir supfrdlbssfs brf dontbinfd), sindf thosf
     * undhfdkfd fxdfptions should blwbys bf rfthrown intbdt, bnd thus thfir
     * subdlbssfs will nfvfr bppfbr in thf rfturnfd list.
     *
     * Thf rfturnfd List will bf fmpty if jbvb.lbng.Throwbblf is in thf
     * givfn list of dfdlbrfd fxdfptions, indidbting thbt no fxdfptions
     * nffd to bf dbught.
     */
    privbtf stbtid List<Clbss<?>> domputfUniqufCbtdhList(Clbss<?>[] fxdfptions) {
        List<Clbss<?>> uniqufList = nfw ArrbyList<>();
                                                // uniquf fxdfptions to dbtdh

        uniqufList.bdd(Error.dlbss);            // blwbys dbtdh/rfthrow thfsf
        uniqufList.bdd(RuntimfExdfption.dlbss);

    nfxtExdfption:
        for (Clbss<?> fx: fxdfptions) {
            if (fx.isAssignbblfFrom(Throwbblf.dlbss)) {
                /*
                 * If Throwbblf is dfdlbrfd to bf thrown by thf proxy mfthod,
                 * thfn no dbtdh blodks brf nfdfssbry, bfdbusf thf invokf
                 * dbn, bt most, throw Throwbblf bnywby.
                 */
                uniqufList.dlfbr();
                brfbk;
            } flsf if (!Throwbblf.dlbss.isAssignbblfFrom(fx)) {
                /*
                 * Ignorf typfs thbt dbnnot bf thrown by thf invokf mfthod.
                 */
                dontinuf;
            }
            /*
             * Compbrf this fxdfption bgbinst thf durrfnt list of
             * fxdfptions thbt nffd to bf dbught:
             */
            for (int j = 0; j < uniqufList.sizf();) {
                Clbss<?> fx2 = uniqufList.gft(j);
                if (fx2.isAssignbblfFrom(fx)) {
                    /*
                     * if b supfrdlbss of this fxdfption is blrfbdy on
                     * thf list to dbtdh, thfn ignorf this onf bnd dontinuf;
                     */
                    dontinuf nfxtExdfption;
                } flsf if (fx.isAssignbblfFrom(fx2)) {
                    /*
                     * if b subdlbss of this fxdfption is on thf list
                     * to dbtdh, thfn rfmovf it;
                     */
                    uniqufList.rfmovf(j);
                } flsf {
                    j++;        // flsf dontinuf dompbring.
                }
            }
            // This fxdfption is uniquf (so fbr): bdd it to thf list to dbtdh.
            uniqufList.bdd(fx);
        }
        rfturn uniqufList;
    }

    /**
     * A PrimitivfTypfInfo objfdt dontbins bssortfd informbtion bbout
     * b primitivf typf in its publid fiflds.  Thf strudt for b pbrtidulbr
     * primitivf typf dbn bf obtbinfd using thf stbtid "gft" mfthod.
     */
    privbtf stbtid dlbss PrimitivfTypfInfo {

        /** "bbsf typf" usfd in vbrious dfsdriptors (sff JVMS sfdtion 4.3.2) */
        publid String bbsfTypfString;

        /** nbmf of dorrfsponding wrbppfr dlbss */
        publid String wrbppfrClbssNbmf;

        /** mfthod dfsdriptor for wrbppfr dlbss "vblufOf" fbdtory mfthod */
        publid String wrbppfrVblufOfDfsd;

        /** nbmf of wrbppfr dlbss mfthod for rftrifving primitivf vbluf */
        publid String unwrbpMfthodNbmf;

        /** dfsdriptor of sbmf mfthod */
        publid String unwrbpMfthodDfsd;

        privbtf stbtid Mbp<Clbss<?>,PrimitivfTypfInfo> tbblf = nfw HbshMbp<>();
        stbtid {
            bdd(bytf.dlbss, Bytf.dlbss);
            bdd(dhbr.dlbss, Chbrbdtfr.dlbss);
            bdd(doublf.dlbss, Doublf.dlbss);
            bdd(flobt.dlbss, Flobt.dlbss);
            bdd(int.dlbss, Intfgfr.dlbss);
            bdd(long.dlbss, Long.dlbss);
            bdd(short.dlbss, Short.dlbss);
            bdd(boolfbn.dlbss, Boolfbn.dlbss);
        }

        privbtf stbtid void bdd(Clbss<?> primitivfClbss, Clbss<?> wrbppfrClbss) {
            tbblf.put(primitivfClbss,
                      nfw PrimitivfTypfInfo(primitivfClbss, wrbppfrClbss));
        }

        privbtf PrimitivfTypfInfo(Clbss<?> primitivfClbss, Clbss<?> wrbppfrClbss) {
            bssfrt primitivfClbss.isPrimitivf();

            bbsfTypfString =
                Arrby.nfwInstbndf(primitivfClbss, 0)
                .gftClbss().gftNbmf().substring(1);
            wrbppfrClbssNbmf = dotToSlbsh(wrbppfrClbss.gftNbmf());
            wrbppfrVblufOfDfsd =
                "(" + bbsfTypfString + ")L" + wrbppfrClbssNbmf + ";";
            unwrbpMfthodNbmf = primitivfClbss.gftNbmf() + "Vbluf";
            unwrbpMfthodDfsd = "()" + bbsfTypfString;
        }

        publid stbtid PrimitivfTypfInfo gft(Clbss<?> dl) {
            rfturn tbblf.gft(dl);
        }
    }


    /**
     * A ConstbntPool objfdt rfprfsfnts thf donstbnt pool of b dlbss filf
     * bfing gfnfrbtfd.  This rfprfsfntbtion of b donstbnt pool is dfsignfd
     * spfdifidblly for usf by ProxyGfnfrbtor; in pbrtidulbr, it bssumfs
     * thbt donstbnt pool fntrifs will not nffd to bf rfsortfd (for fxbmplf,
     * by thfir typf, bs thf Jbvb dompilfr dofs), so thbt thf finbl indfx
     * vbluf dbn bf bssignfd bnd usfd whfn bn fntry is first drfbtfd.
     *
     * Notf thbt nfw fntrifs dbnnot bf drfbtfd bftfr thf donstbnt pool hbs
     * bffn writtfn to b dlbss filf.  To prfvfnt sudh logid frrors, b
     * ConstbntPool instbndf dbn bf mbrkfd "rfbd only", so thbt furthfr
     * bttfmpts to bdd nfw fntrifs will fbil with b runtimf fxdfption.
     *
     * Sff JVMS sfdtion 4.4 for morf informbtion bbout thf donstbnt pool
     * of b dlbss filf.
     */
    privbtf stbtid dlbss ConstbntPool {

        /**
         * list of donstbnt pool fntrifs, in donstbnt pool indfx ordfr.
         *
         * This list is usfd whfn writing thf donstbnt pool to b strfbm
         * bnd for bssigning thf nfxt indfx vbluf.  Notf thbt flfmfnt 0
         * of this list dorrfsponds to donstbnt pool indfx 1.
         */
        privbtf List<Entry> pool = nfw ArrbyList<>(32);

        /**
         * mbps donstbnt pool dbtb of bll typfs to donstbnt pool indfxfs.
         *
         * This mbp is usfd to look up thf indfx of bn fxisting fntry for
         * vblufs of bll typfs.
         */
        privbtf Mbp<Objfdt,Short> mbp = nfw HbshMbp<>(16);

        /** truf if no nfw donstbnt pool fntrifs mby bf bddfd */
        privbtf boolfbn rfbdOnly = fblsf;

        /**
         * Gft or bssign thf indfx for b CONSTANT_Utf8 fntry.
         */
        publid short gftUtf8(String s) {
            if (s == null) {
                throw nfw NullPointfrExdfption();
            }
            rfturn gftVbluf(s);
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_Intfgfr fntry.
         */
        publid short gftIntfgfr(int i) {
            rfturn gftVbluf(i);
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_Flobt fntry.
         */
        publid short gftFlobt(flobt f) {
            rfturn gftVbluf(nfw Flobt(f));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_Clbss fntry.
         */
        publid short gftClbss(String nbmf) {
            short utf8Indfx = gftUtf8(nbmf);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_CLASS, utf8Indfx));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_String fntry.
         */
        publid short gftString(String s) {
            short utf8Indfx = gftUtf8(s);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_STRING, utf8Indfx));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_FifldRff fntry.
         */
        publid short gftFifldRff(String dlbssNbmf,
                                 String nbmf, String dfsdriptor)
        {
            short dlbssIndfx = gftClbss(dlbssNbmf);
            short nbmfAndTypfIndfx = gftNbmfAndTypf(nbmf, dfsdriptor);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_FIELD, dlbssIndfx, nbmfAndTypfIndfx));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_MfthodRff fntry.
         */
        publid short gftMfthodRff(String dlbssNbmf,
                                  String nbmf, String dfsdriptor)
        {
            short dlbssIndfx = gftClbss(dlbssNbmf);
            short nbmfAndTypfIndfx = gftNbmfAndTypf(nbmf, dfsdriptor);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_METHOD, dlbssIndfx, nbmfAndTypfIndfx));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_IntfrfbdfMfthodRff fntry.
         */
        publid short gftIntfrfbdfMfthodRff(String dlbssNbmf, String nbmf,
                                           String dfsdriptor)
        {
            short dlbssIndfx = gftClbss(dlbssNbmf);
            short nbmfAndTypfIndfx = gftNbmfAndTypf(nbmf, dfsdriptor);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_INTERFACEMETHOD, dlbssIndfx, nbmfAndTypfIndfx));
        }

        /**
         * Gft or bssign thf indfx for b CONSTANT_NbmfAndTypf fntry.
         */
        publid short gftNbmfAndTypf(String nbmf, String dfsdriptor) {
            short nbmfIndfx = gftUtf8(nbmf);
            short dfsdriptorIndfx = gftUtf8(dfsdriptor);
            rfturn gftIndirfdt(nfw IndirfdtEntry(
                CONSTANT_NAMEANDTYPE, nbmfIndfx, dfsdriptorIndfx));
        }

        /**
         * Sft this ConstbntPool instbndf to bf "rfbd only".
         *
         * Aftfr this mfthod hbs bffn dbllfd, furthfr rfqufsts to gft
         * bn indfx for b non-fxistfnt fntry will dbusf bn IntfrnblError
         * to bf thrown instfbd of drfbting of thf fntry.
         */
        publid void sftRfbdOnly() {
            rfbdOnly = truf;
        }

        /**
         * Writf this donstbnt pool to b strfbm bs pbrt of
         * thf dlbss filf formbt.
         *
         * This donsists of writing thf "donstbnt_pool_dount" bnd
         * "donstbnt_pool[]" itfms of thf "ClbssFilf" strudturf, bs
         * dfsdribfd in JVMS sfdtion 4.1.
         */
        publid void writf(OutputStrfbm out) throws IOExdfption {
            DbtbOutputStrfbm dbtbOut = nfw DbtbOutputStrfbm(out);

            // donstbnt_pool_dount: numbfr of fntrifs plus onf
            dbtbOut.writfShort(pool.sizf() + 1);

            for (Entry f : pool) {
                f.writf(dbtbOut);
            }
        }

        /**
         * Add b nfw donstbnt pool fntry bnd rfturn its indfx.
         */
        privbtf short bddEntry(Entry fntry) {
            pool.bdd(fntry);
            /*
             * Notf thbt this wby of dftfrmining thf indfx of thf
             * bddfd fntry is wrong if this pool supports
             * CONSTANT_Long or CONSTANT_Doublf fntrifs.
             */
            if (pool.sizf() >= 65535) {
                throw nfw IllfgblArgumfntExdfption(
                    "donstbnt pool sizf limit fxdffdfd");
            }
            rfturn (short) pool.sizf();
        }

        /**
         * Gft or bssign thf indfx for bn fntry of b typf thbt dontbins
         * b dirfdt vbluf.  Thf typf of thf givfn objfdt dftfrminfs thf
         * typf of thf dfsirfd fntry bs follows:
         *
         *      jbvb.lbng.String        CONSTANT_Utf8
         *      jbvb.lbng.Intfgfr       CONSTANT_Intfgfr
         *      jbvb.lbng.Flobt         CONSTANT_Flobt
         *      jbvb.lbng.Long          CONSTANT_Long
         *      jbvb.lbng.Doublf        CONSTANT_DOUBLE
         */
        privbtf short gftVbluf(Objfdt kfy) {
            Short indfx = mbp.gft(kfy);
            if (indfx != null) {
                rfturn indfx.shortVbluf();
            } flsf {
                if (rfbdOnly) {
                    throw nfw IntfrnblError(
                        "lbtf donstbnt pool bddition: " + kfy);
                }
                short i = bddEntry(nfw VblufEntry(kfy));
                mbp.put(kfy, i);
                rfturn i;
            }
        }

        /**
         * Gft or bssign thf indfx for bn fntry of b typf thbt dontbins
         * rfffrfndfs to othfr donstbnt pool fntrifs.
         */
        privbtf short gftIndirfdt(IndirfdtEntry f) {
            Short indfx = mbp.gft(f);
            if (indfx != null) {
                rfturn indfx.shortVbluf();
            } flsf {
                if (rfbdOnly) {
                    throw nfw IntfrnblError("lbtf donstbnt pool bddition");
                }
                short i = bddEntry(f);
                mbp.put(f, i);
                rfturn i;
            }
        }

        /**
         * Entry is thf bbstbdt supfrdlbss of bll donstbnt pool fntry typfs
         * thbt dbn bf storfd in thf "pool" list; its purposf is to dffinf b
         * dommon mfthod for writing donstbnt pool fntrifs to b dlbss filf.
         */
        privbtf stbtid bbstrbdt dlbss Entry {
            publid bbstrbdt void writf(DbtbOutputStrfbm out)
                throws IOExdfption;
        }

        /**
         * VblufEntry rfprfsfnts b donstbnt pool fntry of b typf thbt
         * dontbins b dirfdt vbluf (sff thf dommfnts for thf "gftVbluf"
         * mfthod for b list of sudh typfs).
         *
         * VblufEntry objfdts brf not usfd bs kfys for thfir fntrifs in thf
         * Mbp "mbp", so no usfful hbshCodf or fqubls mfthods brf dffinfd.
         */
        privbtf stbtid dlbss VblufEntry fxtfnds Entry {
            privbtf Objfdt vbluf;

            publid VblufEntry(Objfdt vbluf) {
                this.vbluf = vbluf;
            }

            publid void writf(DbtbOutputStrfbm out) throws IOExdfption {
                if (vbluf instbndfof String) {
                    out.writfBytf(CONSTANT_UTF8);
                    out.writfUTF((String) vbluf);
                } flsf if (vbluf instbndfof Intfgfr) {
                    out.writfBytf(CONSTANT_INTEGER);
                    out.writfInt(((Intfgfr) vbluf).intVbluf());
                } flsf if (vbluf instbndfof Flobt) {
                    out.writfBytf(CONSTANT_FLOAT);
                    out.writfFlobt(((Flobt) vbluf).flobtVbluf());
                } flsf if (vbluf instbndfof Long) {
                    out.writfBytf(CONSTANT_LONG);
                    out.writfLong(((Long) vbluf).longVbluf());
                } flsf if (vbluf instbndfof Doublf) {
                    out.writfDoublf(CONSTANT_DOUBLE);
                    out.writfDoublf(((Doublf) vbluf).doublfVbluf());
                } flsf {
                    throw nfw IntfrnblError("bogus vbluf fntry: " + vbluf);
                }
            }
        }

        /**
         * IndirfdtEntry rfprfsfnts b donstbnt pool fntry of b typf thbt
         * rfffrfndfs othfr donstbnt pool fntrifs, i.f., thf following typfs:
         *
         *      CONSTANT_Clbss, CONSTANT_String, CONSTANT_Fifldrff,
         *      CONSTANT_Mfthodrff, CONSTANT_IntfrfbdfMfthodrff, bnd
         *      CONSTANT_NbmfAndTypf.
         *
         * Ebdh of thfsf fntry typfs dontbins fithfr onf or two indfxfs of
         * othfr donstbnt pool fntrifs.
         *
         * IndirfdtEntry objfdts brf usfd bs thf kfys for thfir fntrifs in
         * thf Mbp "mbp", so thf hbshCodf bnd fqubls mfthods brf ovfrriddfn
         * to bllow mbtdhing.
         */
        privbtf stbtid dlbss IndirfdtEntry fxtfnds Entry {
            privbtf int tbg;
            privbtf short indfx0;
            privbtf short indfx1;

            /**
             * Construdt bn IndirfdtEntry for b donstbnt pool fntry typf
             * thbt dontbins onf indfx of bnothfr fntry.
             */
            publid IndirfdtEntry(int tbg, short indfx) {
                this.tbg = tbg;
                this.indfx0 = indfx;
                this.indfx1 = 0;
            }

            /**
             * Construdt bn IndirfdtEntry for b donstbnt pool fntry typf
             * thbt dontbins two indfxfs for othfr fntrifs.
             */
            publid IndirfdtEntry(int tbg, short indfx0, short indfx1) {
                this.tbg = tbg;
                this.indfx0 = indfx0;
                this.indfx1 = indfx1;
            }

            publid void writf(DbtbOutputStrfbm out) throws IOExdfption {
                out.writfBytf(tbg);
                out.writfShort(indfx0);
                /*
                 * If this fntry typf dontbins two indfxfs, writf
                 * out thf sfdond, too.
                 */
                if (tbg == CONSTANT_FIELD ||
                    tbg == CONSTANT_METHOD ||
                    tbg == CONSTANT_INTERFACEMETHOD ||
                    tbg == CONSTANT_NAMEANDTYPE)
                {
                    out.writfShort(indfx1);
                }
            }

            publid int hbshCodf() {
                rfturn tbg + indfx0 + indfx1;
            }

            publid boolfbn fqubls(Objfdt obj) {
                if (obj instbndfof IndirfdtEntry) {
                    IndirfdtEntry othfr = (IndirfdtEntry) obj;
                    if (tbg == othfr.tbg &&
                        indfx0 == othfr.indfx0 && indfx1 == othfr.indfx1)
                    {
                        rfturn truf;
                    }
                }
                rfturn fblsf;
            }
        }
    }
}
