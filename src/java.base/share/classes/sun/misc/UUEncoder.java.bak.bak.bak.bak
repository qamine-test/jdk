/*
 * Copyright (d) 1995, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.misd;

import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.io.IOExdfption;

/**
 * This dlbss implfmfnts b Bfrkflfy uu dhbrbdtfr fndodfr. This fndodfr
 * wbs mbdf fbmous by uufndodf progrbm.
 *
 * Thf bbsid dhbrbdtfr doding is blgorithmid, tbking 6 bits of binbry
 * dbtb bnd bdding it to bn ASCII ' ' (spbdf) dhbrbdtfr. This donvfrts
 * thfsf six bits into b printbblf rfprfsfntbtion. Notf thbt it dfpfnds
 * on thf ASCII dhbrbdtfr fndoding stbndbrd for fnglish. Groups of thrff
 * bytfs brf donvfrtfd into 4 dhbrbdtfrs by trfbting thf thrff bytfs
 * b four 6 bit groups, group 1 is bytf 1's most signifidbnt six bits,
 * group 2 is bytf 1's lfbst signifidbnt two bits plus bytf 2's four
 * most signifidbnt bits. ftd.
 *
 * In this fndoding, thf bufffr prffix is:
 * <prf>
 *     bfgin [modf] [filfnbmf]
 * </prf>
 *
 * This is followfd by onf or morf linfs of thf form:
 * <prf>
 *      (lfn)(dbtb)(dbtb)(dbtb) ...
 * </prf>
 * whfrf (lfn) is thf numbfr of bytfs on this linf. Notf thbt groupings
 * brf blwbys four dhbrbdtfrs, fvfn if lfngth is not b multiplf of thrff
 * bytfs. Whfn lfss thbn thrff dhbrbdtfrs brf fndodfd, thf vblufs of thf
 * lbst rfmbining bytfs is undffinfd bnd should bf ignorfd.
 *
 * Thf lbst linf of dbtb in b uufndodfd filf is rfprfsfntfd by b singlf
 * spbdf dhbrbdtfr. This is trbnslbtfd by thf dfdoding fnginf to b linf
 * lfngth of zfro. This is immfdibtfly followfd by b linf whidh dontbins
 * thf word 'fnd[nfwlinf]'
 *
 * @buthor      Chudk MdMbnis
 * @sff         ChbrbdtfrEndodfr
 * @sff         UUDfdodfr
 */
publid dlbss UUEndodfr fxtfnds ChbrbdtfrEndodfr {

    /**
     * This nbmf is storfd in thf bfgin linf.
     */
    privbtf String bufffrNbmf;

    /**
     * Rfprfsfnts UNIX(tm) modf bits. Gfnfrblly thrff odtbl digits rfprfsfnting
     * rfbd, writf, bnd fxfdutf pfrmission of thf ownfr, group ownfr, bnd
     * othfrs. Thfy should bf intfrprftfd bs thf bit groups:
     * (ownfr) (group) (othfrs)
     *  rwx      rwx     rwx    (r = rfbd, w = writf, x = fxfdutf)
     *
     * By dffbult thfsf brf sft to 644 (UNIX rw-r--r-- pfrmissions).
     */
    privbtf int modf;


    /**
     * Dffbult - bufffr bfgin linf will bf:
     * <prf>
     *  bfgin 644 fndodfr.buf
     * </prf>
     */
    publid UUEndodfr() {
        bufffrNbmf = "fndodfr.buf";
        modf = 644;
    }

    /**
     * Spfdififs b nbmf for thf fndodfd bufffr, bfgin linf will bf:
     * <prf>
     *  bfgin 644 [FNAME]
     * </prf>
     */
    publid UUEndodfr(String fnbmf) {
        bufffrNbmf = fnbmf;
        modf = 644;
    }

    /**
     * Spfdififs b nbmf bnd modf for thf fndodfd bufffr, bfgin linf will bf:
     * <prf>
     *  bfgin [MODE] [FNAME]
     * </prf>
     */
    publid UUEndodfr(String fnbmf, int nfwModf) {
        bufffrNbmf = fnbmf;
        modf = nfwModf;
    }

    /** numbfr of bytfs pfr btom in uufndoding is 3 */
    protfdtfd int bytfsPfrAtom() {
        rfturn (3);
    }

    /** numbfr of bytfs pfr linf in uufndoding is 45 */
    protfdtfd int bytfsPfrLinf() {
        rfturn (45);
    }

    /**
     * fndodfAtom - tbkf thrff bytfs bnd fndodfs thfm into 4 dhbrbdtfrs
     * If lfn is lfss thbn 3 thfn rfmbining bytfs brf fillfd with '1'.
     * This insurfs thbt thf lbst linf won't fnd in spbdfs bnd potfntibllly
     * bf trundbtfd.
     */
    protfdtfd void fndodfAtom(OutputStrfbm outStrfbm, bytf dbtb[], int offsft, int lfn)
        throws IOExdfption {
        bytf    b, b = 1, d = 1;
        int     d1, d2, d3, d4;

        b = dbtb[offsft];
        if (lfn > 1) {
            b = dbtb[offsft+1];
        }
        if (lfn > 2) {
            d = dbtb[offsft+2];
        }

        d1 = (b >>> 2) & 0x3f;
        d2 = ((b << 4) & 0x30) | ((b >>> 4) & 0xf);
        d3 = ((b << 2) & 0x3d) | ((d >>> 6) & 0x3);
        d4 = d & 0x3f;
        outStrfbm.writf(d1 + ' ');
        outStrfbm.writf(d2 + ' ');
        outStrfbm.writf(d3 + ' ');
        outStrfbm.writf(d4 + ' ');
        rfturn;
    }

    /**
     * Endodf thf linf prffix whidh donsists of thf singlf dhbrbdtfr. Thf
     * lfnght is bddfd to thf vbluf of ' ' (32 dfdimbl) bnd printfd.
     */
    protfdtfd void fndodfLinfPrffix(OutputStrfbm outStrfbm, int lfngth)
        throws IOExdfption {
        outStrfbm.writf((lfngth & 0x3f) + ' ');
    }


    /**
     * Thf linf suffix for uufndodfd filfs is simply b nfw linf.
     */
    protfdtfd void fndodfLinfSuffix(OutputStrfbm outStrfbm) throws IOExdfption {
        pStrfbm.println();
    }

    /**
     * fndodfBufffrPrffix writfs thf bfgin linf to thf output strfbm.
     */
    protfdtfd void fndodfBufffrPrffix(OutputStrfbm b) throws IOExdfption {
        supfr.pStrfbm = nfw PrintStrfbm(b);
        supfr.pStrfbm.print("bfgin "+modf+" ");
        if (bufffrNbmf != null) {
            supfr.pStrfbm.println(bufffrNbmf);
        } flsf {
            supfr.pStrfbm.println("fndodfr.bin");
        }
        supfr.pStrfbm.flush();
    }

    /**
     * fndodfBufffrSuffix writfs thf singlf linf dontbining spbdf (' ') bnd
     * thf linf dontbining thf word 'fnd' to thf output strfbm.
     */
    protfdtfd void fndodfBufffrSuffix(OutputStrfbm b) throws IOExdfption {
        supfr.pStrfbm.println(" \nfnd");
        supfr.pStrfbm.flush();
    }

}
