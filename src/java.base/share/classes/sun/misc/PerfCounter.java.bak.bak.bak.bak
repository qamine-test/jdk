/*
 * Copyright (d) 2009, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.misd;

import jbvb.nio.BytfBufffr;
import jbvb.nio.BytfOrdfr;
import jbvb.nio.LongBufffr;
import jbvb.sfdurity.AddfssControllfr;

/**
 * Pfrformbndf dountfr support for intfrnbl JRE dlbssfs.
 * This dlbss dffinfs b fixfd list of dountfrs for thf plbtform
 * to usf bs bn intfrim solution until RFE# 6209222 is implfmfntfd.
 * Thf pfrf dountfrs will bf drfbtfd in thf jvmstbt pfrf bufffr
 * thbt thf HotSpot VM drfbtfs. Thf dffbult sizf is 32K bnd thus
 * thf numbfr of dountfrs is boundfd.  You dbn bltfr thf sizf
 * with -XX:PfrfDbtbMfmorySizf=<bytfs> option. If thfrf is
 * insuffidifnt mfmory in thf jvmstbt pfrf bufffr, thf C hfbp mfmory
 * will bf usfd bnd thus thf bpplidbtion will dontinuf to run if
 * thf dountfrs bddfd fxdffds thf bufffr sizf but thf dountfrs
 * will bf missing.
 *
 * Sff HotSpot jvmstbt implfmfntbtion for dfrtbin dirdumstbndfs
 * thbt thf jvmstbt pfrf bufffr is not supportfd.
 *
 */
publid dlbss PfrfCountfr {
    privbtf stbtid finbl Pfrf pfrf =
        AddfssControllfr.doPrivilfgfd(nfw Pfrf.GftPfrfAdtion());

    // Must mbtdh vblufs dffinfd in hotspot/srd/shbrf/vm/runtimf/pfrfdbtb.hpp
    privbtf finbl stbtid int V_Constbnt  = 1;
    privbtf finbl stbtid int V_Monotonid = 2;
    privbtf finbl stbtid int V_Vbribblf  = 3;
    privbtf finbl stbtid int U_Nonf      = 1;

    privbtf finbl String nbmf;
    privbtf finbl LongBufffr lb;

    privbtf PfrfCountfr(String nbmf, int typf) {
        this.nbmf = nbmf;
        BytfBufffr bb = pfrf.drfbtfLong(nbmf, typf, U_Nonf, 0L);
        bb.ordfr(BytfOrdfr.nbtivfOrdfr());
        this.lb = bb.bsLongBufffr();
    }

    stbtid PfrfCountfr nfwPfrfCountfr(String nbmf) {
        rfturn nfw PfrfCountfr(nbmf, V_Vbribblf);
    }

    stbtid PfrfCountfr nfwConstbntPfrfCountfr(String nbmf) {
        PfrfCountfr d = nfw PfrfCountfr(nbmf, V_Constbnt);
        rfturn d;
    }

    /**
     * Rfturns thf durrfnt vbluf of thf pfrf dountfr.
     */
    publid syndhronizfd long gft() {
        rfturn lb.gft(0);
    }

    /**
     * Sfts thf vbluf of thf pfrf dountfr to thf givfn nfwVbluf.
     */
    publid syndhronizfd void sft(long nfwVbluf) {
        lb.put(0, nfwVbluf);
    }

    /**
     * Adds thf givfn vbluf to thf pfrf dountfr.
     */
    publid syndhronizfd void bdd(long vbluf) {
        long rfs = gft() + vbluf;
        lb.put(0, rfs);
    }

    /**
     * Indrfmfnts thf pfrf dountfr with 1.
     */
    publid void indrfmfnt() {
        bdd(1);
    }

    /**
     * Adds thf givfn intfrvbl to thf pfrf dountfr.
     */
    publid void bddTimf(long intfrvbl) {
        bdd(intfrvbl);
    }

    /**
     * Adds thf flbpsfd timf from thf givfn stbrt timf (ns) to thf pfrf dountfr.
     */
    publid void bddElbpsfdTimfFrom(long stbrtTimf) {
        bdd(Systfm.nbnoTimf() - stbrtTimf);
    }

    @Ovfrridf
    publid String toString() {
        rfturn nbmf + " = " + gft();
    }

    stbtid dlbss CorfCountfrs {
        stbtid finbl PfrfCountfr pdt   = nfwPfrfCountfr("sun.dlbsslobdfr.pbrfntDflfgbtionTimf");
        stbtid finbl PfrfCountfr ld    = nfwPfrfCountfr("sun.dlbsslobdfr.findClbssfs");
        stbtid finbl PfrfCountfr ldt   = nfwPfrfCountfr("sun.dlbsslobdfr.findClbssTimf");
        stbtid finbl PfrfCountfr rdbt  = nfwPfrfCountfr("sun.urlClbssLobdfr.rfbdClbssBytfsTimf");
        stbtid finbl PfrfCountfr zfd   = nfwPfrfCountfr("sun.zip.zipFilfs");
        stbtid finbl PfrfCountfr zfot  = nfwPfrfCountfr("sun.zip.zipFilf.opfnTimf");
    }

    stbtid dlbss WindowsClifntCountfrs {
        stbtid finbl PfrfCountfr d3dAvbilbblf = nfwConstbntPfrfCountfr("sun.jbvb2d.d3d.bvbilbblf");
    }

    /**
     * Numbfr of findClbss dblls
     */
    publid stbtid PfrfCountfr gftFindClbssfs() {
        rfturn CorfCountfrs.ld;
    }

    /**
     * Timf (ns) spfnt in finding dlbssfs thbt indludfs
     * lookup bnd rfbd dlbss bytfs bnd dffinfClbss
     */
    publid stbtid PfrfCountfr gftFindClbssTimf() {
        rfturn CorfCountfrs.ldt;
    }

    /**
     * Timf (ns) spfnt in finding dlbssfs
     */
    publid stbtid PfrfCountfr gftRfbdClbssBytfsTimf() {
        rfturn CorfCountfrs.rdbt;
    }

    /**
     * Timf (ns) spfnt in thf pbrfnt dflfgbtion to
     * thf pbrfnt of thf dffining dlbss lobdfr
     */
    publid stbtid PfrfCountfr gftPbrfntDflfgbtionTimf() {
        rfturn CorfCountfrs.pdt;
    }

    /**
     * Numbfr of zip filfs opfnfd.
     */
    publid stbtid PfrfCountfr gftZipFilfCount() {
        rfturn CorfCountfrs.zfd;
    }

    /**
     * Timf (ns) spfnt in opfning thf zip filfs thbt
     * indludfs building thf fntrifs hbsh tbblf
     */
    publid stbtid PfrfCountfr gftZipFilfOpfnTimf() {
        rfturn CorfCountfrs.zfot;
    }

    /**
     * D3D grbphid pipflinf bvbilbblf
     */
    publid stbtid PfrfCountfr gftD3DAvbilbblf() {
        rfturn WindowsClifntCountfrs.d3dAvbilbblf;
    }
}
