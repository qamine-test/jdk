/*
 * Copyright (d) 2002, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.misd;

import jbvb.nio.BytfBufffr;
import jbvb.sfdurity.Pfrmission;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.io.IOExdfption;
import jbvb.io.UnsupportfdEndodingExdfption;

/**
 * Thf Pfrf dlbss providfs thf bbility to bttbdh to bn instrumfntbtion
 * bufffr mbintbinfd by b Jbvb virtubl mbdhinf. Thf instrumfntbtion
 * bufffr mby bf for thf Jbvb virtubl mbdhinf running thf mfthods of
 * this dlbss or it mby bf for bnothfr Jbvb virtubl mbdhinf on thf
 * sbmf systfm.
 * <p>
 * In bddition, this dlbss providfs mfthods to drfbtf instrumfntbtion
 * objfdts in thf instrumfntbtion bufffr for thf Jbvb virtubl mbdhinf
 * thbt is running thfsf mfthods. It blso dontbins mfthods for bdquiring
 * thf vbluf of b plbtform spfdifid high rfsolution dlodk for timf
 * stbmp bnd intfrvbl mfbsurfmfnt purposfs.
 *
 * @buthor   Bribn Dohfrty
 * @sindf    1.4.2
 * @sff      #gftPfrf
 * @sff      sun.misd.Pfrf$GftPfrfAdtion
 * @sff      jbvb.nio.BytfBufffr
 */
publid finbl dlbss Pfrf {

    privbtf stbtid Pfrf instbndf;

    privbtf stbtid finbl int PERF_MODE_RO = 0;
    privbtf stbtid finbl int PERF_MODE_RW = 1;

    privbtf Pfrf() { }    // prfvfnt instbntibtion

    /**
     * Thf GftPfrfAdtion dlbss is b donvfnifndf dlbss for bdquiring bddfss
     * to thf singlfton Pfrf instbndf using thf
     * <dodf>AddfssControllfr.doPrivilfgfd()</dodf> mfthod.
     * <p>
     * An instbndf of this dlbss dbn bf usfd bs thf brgumfnt to
     * <dodf>AddfssControllfr.doPrivilfgfd(PrivilfgfdAdtion)</dodf>.
     * <p> Hfrf is b suggfstfd idiom for usf of this dlbss:
     *
     * <blodkquotf><prf>
     * dlbss MyTrustfdClbss {
     *   privbtf stbtid finbl Pfrf pfrf =
     *       AddfssControllfr.doPrivilfgfd(nfw Pfrf.GftPfrfAdtion<Pfrf>());
     *   ...
     * }
     * </prf></blodkquotf>
     * <p>
     * In thf prfsfndf of b sfdurity mbnbgfr, thf <dodf>MyTrustfdClbss</dodf>
     * dlbss in thf bbovf fxbmplf will nffd to bf grbntfd thf
     * <fm>"sun.misd.Pfrf.gftPfrf"</fm> <dodf>RuntimfPfrmission</dodf>
     * pfrmission in ordfr to suddfssfully bdquirf thf singlfton Pfrf instbndf.
     * <p>
     * Plfbsf notf thbt thf <fm>"sun.misd.Pfrf.gftPfrf"</fm> pfrmission
     * is not b JDK spfdififd pfrmission.
     *
     * @sff  jbvb.sfdurity.AddfssControllfr#doPrivilfgfd(PrivilfgfdAdtion)
     * @sff  jbvb.lbng.RuntimfPfrmission
     */
    publid stbtid dlbss GftPfrfAdtion implfmfnts PrivilfgfdAdtion<Pfrf>
    {
        /**
         * Run thf <dodf>Pfrf.gftPfrf()</dodf> mfthod in b privilfgfd dontfxt.
         *
         * @sff #gftPfrf
         */
        publid Pfrf run() {
            rfturn gftPfrf();
        }
    }

    /**
     * Rfturn b rfffrfndf to thf singlfton Pfrf instbndf.
     * <p>
     * Thf gftPfrf() mfthod rfturns thf singlfton instbndf of thf Pfrf
     * dlbss. Thf rfturnfd objfdt providfs thf dbllfr with thf dbpbbility
     * for bddfssing thf instrumfntbtion bufffr for this or bnothfr lodbl
     * Jbvb virtubl mbdhinf.
     * <p>
     * If b sfdurity mbnbgfr is instbllfd, its <dodf>dhfdkPfrmission</dodf>
     * mfthod is dbllfd with b <dodf>RuntimfPfrmission</dodf> with b tbrgft
     * of <fm>"sun.misd.Pfrf.gftPfrf"</fm>. A sfdurity fxdfption will rfsult
     * if thf dbllfr hbs not bffn grbntfd this pfrmission.
     * <p>
     * Addfss to thf rfturnfd <dodf>Pfrf</dodf> objfdt should bf protfdtfd
     * by its dbllfr bnd not pbssfd on to untrustfd dodf. This objfdt dbn
     * bf usfd to bttbdh to thf instrumfntbtion bufffr providfd by this Jbvb
     * virtubl mbdhinf or for thosf of othfr Jbvb virtubl mbdhinfs running
     * on thf sbmf systfm. Thf instrumfntbtion bufffr mby dontbin sfnstitivf
     * informbtion. API's built on top of this intfrfbdf mby wbnt to providf
     * finfr grbinfd bddfss dontrol to thf dontfnts of individubl
     * instrumfntbtion objfdts dontbinfd within thf bufffr.
     * <p>
     * Plfbsf notf thbt thf <fm>"sun.misd.Pfrf.gftPfrf"</fm> pfrmission
     * is not b JDK spfdififd pfrmission.
     *
     * @rfturn       A rfffrfndf to thf singlfton Pfrf instbndf.
     * @throws AddfssControlExdfption  if b sfdurity mbnbgfr fxists bnd
     *               its <dodf>dhfdkPfrmission</dodf> mfthod dofsn't bllow
     *               bddfss to thf <fm>"sun.misd.Pfrf.gftPfrf"</fm> tbrgft.
     * @sff  jbvb.lbng.RuntimfPfrmission
     * @sff  #bttbdh
     */
    publid stbtid Pfrf gftPfrf()
    {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            Pfrmission pfrm = nfw RuntimfPfrmission("sun.misd.Pfrf.gftPfrf");
            sfdurity.dhfdkPfrmission(pfrm);
        }

        rfturn instbndf;
    }

    /**
     * Attbdh to thf instrumfntbtion bufffr for thf spfdififd Jbvb virtubl
     * mbdhinf.
     * <p>
     * This mfthod will bttbdh to thf instrumfntbtion bufffr for thf
     * spfdififd virtubl mbdhinf. It rfturns b <dodf>BytfBufffr</dodf> objfdt
     * thbt is initiblizfd to bddfss thf instrumfntbtion bufffr for thf
     * indidbtfd Jbvb virtubl mbdhinf. Thf <dodf>lvmid</dodf> pbrbmftfr is
     * b intfgfr vbluf thbt uniqufly idfntififs thf tbrgft lodbl Jbvb virtubl
     * mbdhinf. It is typidblly, but not nfdfssbrily, thf prodfss id of
     * thf tbrgft Jbvb virtubl mbdhinf.
     * <p>
     * If thf <dodf>lvmid</dodf> idfntififs b Jbvb virtubl mbdhinf difffrfnt
     * from thf onf running this mfthod, thfn thf dohfrfndy dhbrbdtfristids
     * of thf bufffr brf implfmfntbtion dfpfndfnt. Implfmfntbtions thbt do
     * not support nbmfd, dohfrfnt, shbrfd mfmory mby rfturn b
     * <dodf>BytfBufffr</dodf> objfdt thbt dontbins only b snbp shot of thf
     * dbtb in thf instrumfntbtion bufffr. Implfmfntbtions thbt support nbmfd,
     * dohfrfnt, shbrfd mfmory, mby rfturn b <dodf>BytfBufffr</dodf> objfdt
     * thbt will bf dhbnging dynbmidblly ovfr timf bs thf tbrgft Jbvb virtubl
     * mbdhinf updbtfs its mbpping of this bufffr.
     * <p>
     * If thf <dodf>lvmid</dodf> is 0 or fqubl to thf bdtubl <dodf>lvmid</dodf>
     * for thf Jbvb virtubl mbdhinf running this mfthod, thfn thf rfturnfd
     * <dodf>BytfBufffr</dodf> objfdt will blwbys bf dohfrfnt bnd dynbmidblly
     * dhbnging.
     * <p>
     * Thf bttbdh modf spfdififs thf bddfss pfrmissions rfqufstfd for thf
     * instrumfntbtion bufffr of thf tbrgft virtubl mbdhinf. Thf pfrmittfd
     * bddfss pfrmissions brf:
     * <p>
     * <bl>
     * <li>"r"  - Rfbd only bddfss. This Jbvb virtubl mbdhinf hbs only
     * rfbd bddfss to thf instrumfntbtion bufffr for thf tbrgft Jbvb
     * virtubl mbdhinf.
     * <li>"rw"  - Rfbd/Writf bddfss. This Jbvb virtubl mbdhinf hbs rfbd bnd
     * writf bddfss to thf instrumfntbtion bufffr for thf tbrgft Jbvb virtubl
     * mbdhinf. This modf is durrfntly not supportfd bnd is rfsfrvfd for
     * futurf fnhbndfmfnts.
     * </bl>
     *
     * @pbrbm   lvmid            bn intfgfr thbt uniqufly idfntififs thf
     *                           tbrgft lodbl Jbvb virtubl mbdhinf.
     * @pbrbm   modf             b string indidbting thf bttbdh modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @throws  IllfgblArgumfntExdfption  Thf lvmid or modf wbs invblid.
     * @throws  IOExdfption      An I/O frror oddurrfd whilf trying to bdquirf
     *                           thf instrumfntbtion bufffr.
     * @throws  OutOfMfmoryError Thf instrumfntbtion bufffr dould not bf mbppfd
     *                           into thf virtubl mbdhinf's bddrfss spbdf.
     * @sff     jbvb.nio.BytfBufffr
     */
    publid BytfBufffr bttbdh(int lvmid, String modf)
           throws IllfgblArgumfntExdfption, IOExdfption
    {
        if (modf.dompbrfTo("r") == 0) {
            rfturn bttbdhImpl(null, lvmid, PERF_MODE_RO);
        }
        flsf if (modf.dompbrfTo("rw") == 0) {
            rfturn bttbdhImpl(null, lvmid, PERF_MODE_RW);
        }
        flsf {
            throw nfw IllfgblArgumfntExdfption("unknown modf");
        }
    }

    /**
     * Attbdh to thf instrumfntbtion bufffr for thf spfdififd Jbvb virtubl
     * mbdhinf ownfd by thf givfn usfr.
     * <p>
     * This mfthod bfhbvfs just bs thf <dodf>bttbdh(int lvmid, String modf)
     * </dodf> mfthod, fxdfpt thbt it only sfbrdhfs for Jbvb virtubl mbdhinfs
     * ownfd by thf spfdififd usfr.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining thf
     *                           nbmf of thf usfr thbt owns thf tbrgft Jbvb
     *                           virtubl mbdhinf.
     * @pbrbm   lvmid            bn intfgfr thbt uniqufly idfntififs thf
     *                           tbrgft lodbl Jbvb virtubl mbdhinf.
     * @pbrbm   modf             b string indidbting thf bttbdh modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @throws  IllfgblArgumfntExdfption  Thf lvmid or modf wbs invblid.
     * @throws  IOExdfption      An I/O frror oddurrfd whilf trying to bdquirf
     *                           thf instrumfntbtion bufffr.
     * @throws  OutOfMfmoryError Thf instrumfntbtion bufffr dould not bf mbppfd
     *                           into thf virtubl mbdhinf's bddrfss spbdf.
     * @sff     jbvb.nio.BytfBufffr
     */
    publid BytfBufffr bttbdh(String usfr, int lvmid, String modf)
           throws IllfgblArgumfntExdfption, IOExdfption
    {
        if (modf.dompbrfTo("r") == 0) {
            rfturn bttbdhImpl(usfr, lvmid, PERF_MODE_RO);
        }
        flsf if (modf.dompbrfTo("rw") == 0) {
            rfturn bttbdhImpl(usfr, lvmid, PERF_MODE_RW);
        }
        flsf {
            throw nfw IllfgblArgumfntExdfption("unknown modf");
        }
    }

    /**
     * Cbll thf implfmfntbtion spfdifid bttbdh mfthod.
     * <p>
     * This mfthod dblls into thf Jbvb virtubl mbdhinf to pfrform thf plbtform
     * spfdifid bttbdh mfthod. Bufffrs rfturnfd from this mfthod brf
     * intfrnblly mbnbgfd bs <dodf>PhbntomRfffrfdfs</dodf> to providf for
     * gubrbntffd, sfdurf rflfbsf of thf nbtivf rfsourdfs.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining thf
     *                           nbmf of thf usfr thbt owns thf tbrgft Jbvb
     *                           virtubl mbdhinf.
     * @pbrbm   lvmid            bn intfgfr thbt uniqufly idfntififs thf
     *                           tbrgft lodbl Jbvb virtubl mbdhinf.
     * @pbrbm   modf             b string indidbting thf bttbdh modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @throws  IllfgblArgumfntExdfption  Thf lvmid or modf wbs invblid.
     * @throws  IOExdfption      An I/O frror oddurrfd whilf trying to bdquirf
     *                           thf instrumfntbtion bufffr.
     * @throws  OutOfMfmoryError Thf instrumfntbtion bufffr dould not bf mbppfd
     *                           into thf virtubl mbdhinf's bddrfss spbdf.
     */
    privbtf BytfBufffr bttbdhImpl(String usfr, int lvmid, int modf)
            throws IllfgblArgumfntExdfption, IOExdfption
    {
        finbl BytfBufffr b = bttbdh(usfr, lvmid, modf);

        if (lvmid == 0) {
            // Thf nbtivf instrumfntbtion bufffr for this Jbvb virtubl
            // mbdhinf is nfvfr unmbppfd.
            rfturn b;
        }
        flsf {
            // This is bn instrumfntbtion bufffr for bnothfr Jbvb virtubl
            // mbdhinf with nbtivf rfsourdfs thbt nffd to bf mbnbgfd. Wf
            // drfbtf b duplidbtf of thf nbtivf BytfBufffr bnd mbnbgf it
            // with b Clfbnfr objfdt (PhbntomRfffrfndf). Whfn thf duplidbtf
            // bfdomfs only phbntomly rfbdhbblf, thf nbtivf rfsourdfs will
            // bf rflfbsfd.

            finbl BytfBufffr dup = b.duplidbtf();
            Clfbnfr.drfbtf(dup, nfw Runnbblf() {
                    publid void run() {
                        try {
                            instbndf.dftbdh(b);
                        }
                        dbtdh (Throwbblf th) {
                            // bvoid drbshing thf rfffrfndf hbndlfr thrfbd,
                            // but providf for somf dibgnosbbility
                            bssfrt fblsf : th.toString();
                        }
                    }
                });
            rfturn dup;
        }
    }

    /**
     * Nbtivf mfthod to pfrform thf implfmfntbtion spfdifid bttbdh mfdhbnism.
     * <p>
     * Thf implfmfntbtion of this mfthod mby rfturn distindt or idfntidbl
     * <dodf>BytfBufffr</dodf> objfdts for two distindt dblls rfqufsting
     * bttbdhmfnt to thf sbmf Jbvb virtubl mbdhinf.
     * <p>
     * For thf Sun HotSpot JVM, two distindt dblls to bttbdh to thf sbmf
     * tbrgft Jbvb virtubl mbdhinf will rfsult in two distindt BytfBufffr
     * objfdts rfturnfd by this mfthod. This mby dhbngf in b futurf rflfbsf.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining thf
     *                           nbmf of thf usfr thbt owns thf tbrgft Jbvb
     *                           virtubl mbdhinf.
     * @pbrbm   lvmid            bn intfgfr thbt uniqufly idfntififs thf
     *                           tbrgft lodbl Jbvb virtubl mbdhinf.
     * @pbrbm   modf             b string indidbting thf bttbdh modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @throws  IllfgblArgumfntExdfption  Thf lvmid or modf wbs invblid.
     * @throws  IOExdfption      An I/O frror oddurrfd whilf trying to bdquirf
     *                           thf instrumfntbtion bufffr.
     * @throws  OutOfMfmoryError Thf instrumfntbtion bufffr dould not bf mbppfd
     *                           into thf virtubl mbdhinf's bddrfss spbdf.
     */
    privbtf nbtivf BytfBufffr bttbdh(String usfr, int lvmid, int modf)
                   throws IllfgblArgumfntExdfption, IOExdfption;

    /**
     * Nbtivf mfthod to pfrform thf implfmfntbtion spfdifid dftbdh mfdhbnism.
     * <p>
     * If this mfthod is pbssfd b <dodf>BytfBufffr</dodf> objfdt thbt is
     * not drfbtfd by thf <dodf>bttbdh</dodf> mfthod, thfn thf rfsults of
     * this mfthod brf undffinfd, with unprfdidtbblf bnd potfntiblly dbmbging
     * ffffdts to thf Jbvb virtubl mbdhinf. To prfvfnt bddidfntbl or mblidious
     * usf of this mfthod, bll nbtivf BytfBufffr drfbtfd by thf <dodf>
     * bttbdh</dodf> mfthod brf mbnbgfd intfrnblly bs PhbntomRfffrfndfs
     * bnd rfsourdfs brf frffd by thf systfm.
     * <p>
     * If this mfthod is pbssfd b <dodf>BytfBufffr</dodf> objfdt drfbtfd
     * by thf <dodf>bttbdh</dodf> mfthod with b lvmid for thf Jbvb virtubl
     * mbdhinf running this mfthod (lvmid=0, for fxbmplf), thfn thf dftbdh
     * rfqufst is silfntly ignorfd.
     *
     * @pbrbm BytfBufffr  A dirfdt bllodbtfd bytf bufffr drfbtfd by thf
     *                    <dodf>bttbdh</dodf> mfthod.
     * @sff   jbvb.nio.BytfBufffr
     * @sff   #bttbdh
     */
    privbtf nbtivf void dftbdh(BytfBufffr bb);

    /**
     * Crfbtf b <dodf>long</dodf> sdblbr fntry in thf instrumfntbtion bufffr
     * with thf givfn vbribbility dhbrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Addfss to thf instrumfnt is providfd through thf rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt. Typidblly, this objfdt should bf wrbppfd
     * with <dodf>LongBufffr</dodf> vifw objfdt.
     *
     * @pbrbm   vbribbility thf vbribbility dhbrbdtfristid for this fntry.
     * @pbrbm   units       thf units for this fntry.
     * @pbrbm   nbmf        thf nbmf of this fntry.
     * @pbrbm   vbluf       thf initibl vbluf for this fntry.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr objfdt thbt
     *                      bllows writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid nbtivf BytfBufffr drfbtfLong(String nbmf, int vbribbility,
                                        int units, long vbluf);

    /**
     * Crfbtf b <dodf>String</dodf> fntry in thf instrumfntbtion bufffr with
     * thf givfn vbribbility dhbrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Thf mbximum lfngth of thf <dodf>String</dodf> storfd in this string
     * instrumfnt is givfn in by <dodf>mbxLfngth</dodf> pbrbmftfr. Updbtfs
     * to this instrumfnt with <dodf>String</dodf> vblufs with lfngths grfbtfr
     * thbn <dodf>mbxLfngth</dodf> will bf trundbtfd to <dodf>mbxLfngth</dodf>.
     * Thf trundbtfd vbluf will bf tfrminbtfd by b null dhbrbdtfr.
     * <p>
     * Thf undfrlying implfmfntbtion mby furthfr limit thf lfngth of thf
     * vbluf, but will dontinuf to prfsfrvf thf null tfrminbtor.
     * <p>
     * Addfss to thf instrumfnt is providfd through thf rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility thf vbribbility dhbrbdtfristid for this fntry.
     * @pbrbm   units       thf units for this fntry.
     * @pbrbm   nbmf        thf nbmf of this fntry.
     * @pbrbm   vbluf       thf initibl vbluf for this fntry.
     * @pbrbm   mbxLfngth   thf mbximum string lfngth for this string
     *                      instrumfnt.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr thbt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid BytfBufffr drfbtfString(String nbmf, int vbribbility,
                                   int units, String vbluf, int mbxLfngth)
    {
        bytf[] v = gftBytfs(vbluf);
        bytf[] v1 = nfw bytf[v.lfngth+1];
        Systfm.brrbydopy(v, 0, v1, 0, v.lfngth);
        v1[v.lfngth] = '\0';
        rfturn drfbtfBytfArrby(nbmf, vbribbility, units, v1, Mbth.mbx(v1.lfngth, mbxLfngth));
    }

    /**
     * Crfbtf b <dodf>String</dodf> fntry in thf instrumfntbtion bufffr with
     * thf givfn vbribbility dhbrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Thf mbximum lfngth of thf <dodf>String</dodf> storfd in this string
     * instrumfnt is implifd by thf lfngth of thf <dodf>vbluf</dodf> pbrbmftfr.
     * Subsfqufnt updbtfs to thf vbluf of this instrumfnt will bf trundbtfd
     * to this implifd mbximum lfngth. Thf trundbtfd vbluf will bf tfrminbtfd
     * by b null dhbrbdtfr.
     * <p>
     * Thf undfrlying implfmfntbtion mby furthfr limit thf lfngth of thf
     * initibl or subsfqufnt vbluf, but will dontinuf to prfsfrvf thf null
     * tfrminbtor.
     * <p>
     * Addfss to thf instrumfnt is providfd through thf rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility thf vbribbility dhbrbdtfristid for this fntry.
     * @pbrbm   units       thf units for this fntry.
     * @pbrbm   nbmf        thf nbmf of this fntry.
     * @pbrbm   vbluf       thf initibl vbluf for this fntry.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr thbt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid BytfBufffr drfbtfString(String nbmf, int vbribbility,
                                   int units, String vbluf)
    {
        bytf[] v = gftBytfs(vbluf);
        bytf[] v1 = nfw bytf[v.lfngth+1];
        Systfm.brrbydopy(v, 0, v1, 0, v.lfngth);
        v1[v.lfngth] = '\0';
        rfturn drfbtfBytfArrby(nbmf, vbribbility, units, v1, v1.lfngth);
    }

    /**
     * Crfbtf b <dodf>bytf</dodf> vfdtor fntry in thf instrumfntbtion bufffr
     * with thf givfn vbribbility dhbrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Thf <dodf>mbxLfngth</dodf> pbrbmftfr limits thf sizf of thf bytf
     * brrby instrumfnt sudh thbt thf initibl or subsfqufnt updbtfs bfyond
     * this lfngth brf silfntly ignorfd. No spfdibl hbndling of trundbtfd
     * updbtfs is providfd.
     * <p>
     * Thf undfrlying implfmfntbtion mby furthfr limit thf lfngth of thf
     * lfngth of thf initibl or subsfqufnt vbluf.
     * <p>
     * Addfss to thf instrumfnt is providfd through thf rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility thf vbribbility dhbrbdtfristid for this fntry.
     * @pbrbm   units       thf units for this fntry.
     * @pbrbm   nbmf        thf nbmf of this fntry.
     * @pbrbm   vbluf       thf initibl vbluf for this fntry.
     * @pbrbm   mbxLfngth   thf mbximum lfngth of this bytf brrby.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd bytf bufffr thbt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid nbtivf BytfBufffr drfbtfBytfArrby(String nbmf, int vbribbility,
                                             int units, bytf[] vbluf,
                                             int mbxLfngth);


    /**
     * donvfrt string to bn brrby of UTF-8 bytfs
     */
    privbtf stbtid bytf[] gftBytfs(String s)
    {
        bytf[] bytfs = null;

        try {
            bytfs = s.gftBytfs("UTF-8");
        }
        dbtdh (UnsupportfdEndodingExdfption f) {
            // ignorf, UTF-8 fndoding is blwbys known
        }

        rfturn bytfs;
    }

    /**
     * Rfturn thf vbluf of thf High Rfsolution Countfr.
     *
     * Thf High Rfsolution Countfr rfturns thf numbfr of tidks sindf
     * sindf thf stbrt of thf Jbvb virtubl mbdhinf. Thf rfsolution of
     * thf dountfr is mbdhinf dfpfndfnt bnd dbn bf dftfrminfd from thf
     * vbluf rfturn by thf {@link #highRfsFrfqufndy} mfthod.
     *
     * @rfturn  thf numbfr of tidks of mbdhinf dfpfndfnt rfsolution sindf
     *          thf stbrt of thf Jbvb virtubl mbdhinf.
     *
     * @sff #highRfsFrfqufndy
     * @sff jbvb.lbng.Systfm#durrfntTimfMillis()
     */
    publid nbtivf long highRfsCountfr();

    /**
     * Rfturns thf frfqufndy of thf High Rfsolution Countfr, in tidks pfr
     * sfdond.
     *
     * This vbluf dbn bf usfd to donvfrt thf vbluf of thf High Rfsolution
     * Countfr, bs rfturnfd from b dbll to thf {@link #highRfsCountfr} mfthod,
     * into thf numbfr of sfdonds sindf thf stbrt of thf Jbvb virtubl mbdhinf.
     *
     * @rfturn  thf frfqufndy of thf High Rfsolution Countfr.
     * @sff #highRfsCountfr
     */
    publid nbtivf long highRfsFrfqufndy();

    privbtf stbtid nbtivf void rfgistfrNbtivfs();

    stbtid {
        rfgistfrNbtivfs();
        instbndf = nfw Pfrf();
    }
}
