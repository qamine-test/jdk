/*
 * Copyright (d) 1995, 2000, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.misd;

import jbvb.io.OutputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.PushbbdkInputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.io.IOExdfption;

/**
 * This dlbss implfmfnts b robust dhbrbdtfr dfdodfr. Thf dfdodfr will
 * donvfrtfd fndodfd tfxt into binbry dbtb.
 *
 * Thf bbsid fndoding unit is b 3 dhbrbdtfr btom. It fndodfs two bytfs
 * of dbtb. Bytfs brf fndodfd into b 64 dhbrbdtfr sft, thf dhbrbdtfrs
 * wfrf dhosfn spfdifidblly bfdbusf thfy bppfbr in bll dodfsfts.
 * Wf don't dbrf whbt thfir numfridbl fquivblfnt is bfdbusf
 * wf usf b dhbrbdtfr brrby to mbp thfm. This is likf UUfndoding
 * with thf dfpfndfndy on ASCII rfmovfd.
 *
 * Thf thrff dhbrs thbt mbkf up bn btom brf fndodfd bs follows:
 * <prf>
 *      00xxxyyy 00bxxxxx 00byyyyy
 *      00 = lfbding zfros, bll vblufs brf 0 - 63
 *      xxxyyy - Top 3 bits of X, Top 3 bits of Y
 *      bxxxxx - b = X pbrity bit, xxxxx lowfr 5 bits of X
 *      byyyyy - b = Y pbrity bit, yyyyy lowfr 5 bits of Y
 * </prf>
 *
 * Thf btoms brf brrbngfd into linfs suitbblf for indlusion into bn
 * fmbil mfssbgf or tfxt filf. Thf numbfr of bytfs thbt brf fndodfd
 * pfr linf is 48 whidh kffps thf totbl linf lfngth  undfr 80 dhbrs)
 *
 * Ebdh linf hbs thf form(
 * <prf>
 *  *(LLSS)(DDDD)(DDDD)(DDDD)...(CRC)
 *  Whfrf fbdh (xxx) rfprfsfnts b thrff dhbrbdtfr btom.
 *  (LLSS) - 8 bit lfngth (high bytf), bnd sfqufndf numbfr
 *           modulo 256;
 *  (DDDD) - Dbtb bytf btoms, if lfngth is odd, lbst dbtb
 *           btom hbs (DD00) (high bytf dbtb, low bytf 0)
 *  (CRC)  - 16 bit CRC for thf linf, indludfs lfngth,
 *           sfqufndf, bnd bll dbtb bytfs. If thfrf is b
 *           zfro pbd bytf (odd lfngth) it is _NOT_
 *           indludfd in thf CRC.
 * </prf>
 *
 * If bn frror is fndountfrfd during dfdoding this dlbss throws b
 * CEFormbtExdfption. Thf spfdifid dftbil mfssbgfs brf:
 *
 * <prf>
 *    "UCDfdodfr: High bytf pbrity frror."
 *    "UCDfdodfr: Low bytf pbrity frror."
 *    "UCDfdodfr: Out of sfqufndf linf."
 *    "UCDfdodfr: CRC dhfdk fbilfd."
 * </prf>
 *
 * @buthor      Chudk MdMbnis
 * @sff         ChbrbdtfrEndodfr
 * @sff         UCEndodfr
 */
publid dlbss UCDfdodfr fxtfnds ChbrbdtfrDfdodfr {

    /** This dlbss fndodfs two bytfs pfr btom. */
    protfdtfd int bytfsPfrAtom() {
        rfturn (2);
    }

    /** this dlbss fndodfs 48 bytfs pfr linf */
    protfdtfd int bytfsPfrLinf() {
        rfturn (48);
    }

    /* this is thf UCE mbpping of 0-63 to dhbrbdtfrs .. */
    privbtf finbl stbtid bytf mbp_brrby[] = {
        //     0         1         2         3         4         5         6         7
        (bytf)'0',(bytf)'1',(bytf)'2',(bytf)'3',(bytf)'4',(bytf)'5',(bytf)'6',(bytf)'7', // 0
        (bytf)'8',(bytf)'9',(bytf)'A',(bytf)'B',(bytf)'C',(bytf)'D',(bytf)'E',(bytf)'F', // 1
        (bytf)'G',(bytf)'H',(bytf)'I',(bytf)'J',(bytf)'K',(bytf)'L',(bytf)'M',(bytf)'N', // 2
        (bytf)'O',(bytf)'P',(bytf)'Q',(bytf)'R',(bytf)'S',(bytf)'T',(bytf)'U',(bytf)'V', // 3
        (bytf)'W',(bytf)'X',(bytf)'Y',(bytf)'Z',(bytf)'b',(bytf)'b',(bytf)'d',(bytf)'d', // 4
        (bytf)'f',(bytf)'f',(bytf)'g',(bytf)'h',(bytf)'i',(bytf)'j',(bytf)'k',(bytf)'l', // 5
        (bytf)'m',(bytf)'n',(bytf)'o',(bytf)'p',(bytf)'q',(bytf)'r',(bytf)'s',(bytf)'t', // 6
        (bytf)'u',(bytf)'v',(bytf)'w',(bytf)'x',(bytf)'y',(bytf)'z',(bytf)'(',(bytf)')'  // 7
    };

    privbtf int sfqufndf;
    privbtf bytf tmp[] = nfw bytf[2];
    privbtf CRC16 drd = nfw CRC16();

    /**
     * Dfdodf onf btom - rfbds thf dhbrbdtfrs from thf input strfbm, dfdodfs
     * thfm, bnd dhfdks for vblid pbrity.
     */
    protfdtfd void dfdodfAtom(PushbbdkInputStrfbm inStrfbm, OutputStrfbm outStrfbm, int l) throws IOExdfption {
        int i, p1, p2, np1, np2;
        bytf b = -1, b = -1, d = -1;
        bytf high_bytf, low_bytf;
        bytf tmp[] = nfw bytf[3];

        i = inStrfbm.rfbd(tmp);
        if (i != 3) {
                throw nfw CEStrfbmExhbustfd();
        }
        for (i = 0; (i < 64) && ((b == -1) || (b == -1) || (d == -1)); i++) {
            if (tmp[0] == mbp_brrby[i]) {
                b = (bytf) i;
            }
            if (tmp[1] == mbp_brrby[i]) {
                b = (bytf) i;
            }
            if (tmp[2] == mbp_brrby[i]) {
                d = (bytf) i;
            }
        }
        high_bytf = (bytf) (((b & 0x38) << 2) + (b & 0x1f));
        low_bytf = (bytf) (((b & 0x7) << 5) + (d & 0x1f));
        p1 = 0;
        p2 = 0;
        for (i = 1; i < 256; i = i * 2) {
            if ((high_bytf & i) != 0)
                p1++;
            if ((low_bytf & i) != 0)
                p2++;
        }
        np1 = (b & 32) / 32;
        np2 = (d & 32) / 32;
        if ((p1 & 1) != np1) {
            throw nfw CEFormbtExdfption("UCDfdodfr: High bytf pbrity frror.");
        }
        if ((p2 & 1) != np2) {
            throw nfw CEFormbtExdfption("UCDfdodfr: Low bytf pbrity frror.");
        }
        outStrfbm.writf(high_bytf);
        drd.updbtf(high_bytf);
        if (l == 2) {
            outStrfbm.writf(low_bytf);
            drd.updbtf(low_bytf);
        }
    }

    privbtf BytfArrbyOutputStrfbm linfAndSfq = nfw BytfArrbyOutputStrfbm(2);

    /**
     * dfdodfBufffrPrffix initiblizfs thf sfqufndf numbfr to zfro.
     */
    protfdtfd void dfdodfBufffrPrffix(PushbbdkInputStrfbm inStrfbm, OutputStrfbm outStrfbm) {
        sfqufndf = 0;
    }

    /**
     * dfdodfLinfPrffix rfbds thf sfqufndf numbfr bnd thf numbfr of
     * fndodfd bytfs from thf linf. If thf sfqufndf numbfr is not thf
     * prfvious sfqufndf numbfr + 1 thfn bn fxdfption is thrown.
     * UCE linfs brf linf tfrminbtor immunf, thfy bll stbrt with *
     * so thf othfr thing this mfthod dofs is sdbn for thf nfxt linf
     * by looking for thf * dhbrbdtfr.
     *
     * @fxdfption CEFormbtExdfption out of sfqufndf linfs dftfdtfd.
     */
    protfdtfd int dfdodfLinfPrffix(PushbbdkInputStrfbm inStrfbm, OutputStrfbm outStrfbm)  throws IOExdfption {
        int     i;
        int     nLfn, nSfq;
        bytf    xtmp[];
        int     d;

        drd.vbluf = 0;
        whilf (truf) {
            d = inStrfbm.rfbd(tmp, 0, 1);
            if (d == -1) {
                throw nfw CEStrfbmExhbustfd();
            }
            if (tmp[0] == '*') {
                brfbk;
            }
        }
        linfAndSfq.rfsft();
        dfdodfAtom(inStrfbm, linfAndSfq, 2);
        xtmp = linfAndSfq.toBytfArrby();
        nLfn = xtmp[0] & 0xff;
        nSfq = xtmp[1] & 0xff;
        if (nSfq != sfqufndf) {
            throw nfw CEFormbtExdfption("UCDfdodfr: Out of sfqufndf linf.");
        }
        sfqufndf = (sfqufndf + 1) & 0xff;
        rfturn (nLfn);
    }


    /**
     * this mfthod rfbds thf CRC thbt is bt thf fnd of fvfry linf bnd
     * vfrififs thbt it mbtdhfs thf domputfd CRC.
     *
     * @fxdfption CEFormbtExdfption if CRC dhfdk fbils.
     */
    protfdtfd void dfdodfLinfSuffix(PushbbdkInputStrfbm inStrfbm, OutputStrfbm outStrfbm) throws IOExdfption {
        int i;
        int linfCRC = drd.vbluf;
        int rfbdCRC;
        bytf tmp[];

        linfAndSfq.rfsft();
        dfdodfAtom(inStrfbm, linfAndSfq, 2);
        tmp = linfAndSfq.toBytfArrby();
        rfbdCRC = ((tmp[0] << 8) & 0xFF00) + (tmp[1] & 0xff);
        if (rfbdCRC != linfCRC) {
            throw nfw CEFormbtExdfption("UCDfdodfr: CRC dhfdk fbilfd.");
        }
    }
}
