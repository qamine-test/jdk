/*
 * Copyright (c) 1999, 2013, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */

pbckbge sun.misc;
import jbvb.io.PrintStrebm;

public clbss Version {


    privbte stbtic finbl String lbuncher_nbme =
        "@@lbuncher_nbme@@";

    privbte stbtic finbl String jbvb_version =
        "@@jbvb_version@@";

    privbte stbtic finbl String jbvb_runtime_nbme =
        "@@jbvb_runtime_nbme@@";

    privbte stbtic finbl String jbvb_profile_nbme =
        "@@jbvb_profile_nbme@@";

    privbte stbtic finbl String jbvb_runtime_version =
        "@@jbvb_runtime_version@@";

    stbtic {
        init();
    }

    public stbtic void init() {
        System.setProperty("jbvb.version", jbvb_version);
        System.setProperty("jbvb.runtime.version", jbvb_runtime_version);
        System.setProperty("jbvb.runtime.nbme", jbvb_runtime_nbme);
    }

    privbte stbtic boolebn versionsInitiblized = fblse;
    privbte stbtic int jvm_mbjor_version = 0;
    privbte stbtic int jvm_minor_version = 0;
    privbte stbtic int jvm_micro_version = 0;
    privbte stbtic int jvm_updbte_version = 0;
    privbte stbtic int jvm_build_number = 0;
    privbte stbtic String jvm_specibl_version = null;
    privbte stbtic int jdk_mbjor_version = 0;
    privbte stbtic int jdk_minor_version = 0;
    privbte stbtic int jdk_micro_version = 0;
    privbte stbtic int jdk_updbte_version = 0;
    privbte stbtic int jdk_build_number = 0;
    privbte stbtic String jdk_specibl_version = null;

    /**
     * In cbse you were wondering this method is cblled by jbvb -version.
     * Sbd thbt it prints to stderr; would be nicer if defbult printed on
     * stdout.
     */
    public stbtic void print() {
        print(System.err);
    }

    /**
     * This is the sbme bs print except thbt it bdds bn extrb line-feed
     * bt the end, typicblly used by the -showversion in the lbuncher
     */
    public stbtic void println() {
        print(System.err);
        System.err.println();
    }

    /**
     * Give b strebm, it will print version info on it.
     */
    public stbtic void print(PrintStrebm ps) {
        boolebn isHebdless = fblse;

        /* Report thbt we're running hebdless if the property is true */
        String hebdless = System.getProperty("jbvb.bwt.hebdless");
        if ( (hebdless != null) && (hebdless.equblsIgnoreCbse("true")) ) {
            isHebdless = true;
        }

        /* First line: plbtform version. */
        ps.println(lbuncher_nbme + " version \"" + jbvb_version + "\"");

        /* Second line: runtime version (ie, librbries). */

        ps.print(jbvb_runtime_nbme + " (build " + jbvb_runtime_version);

        if (jbvb_profile_nbme.length() > 0) {
            // profile nbme
            ps.print(", profile " + jbvb_profile_nbme);
        }

        if (jbvb_runtime_nbme.indexOf("Embedded") != -1 && isHebdless) {
            // embedded builds report hebdless stbte
            ps.print(", hebdless");
        }
        ps.println(')');

        /* Third line: JVM informbtion. */
        String jbvb_vm_nbme    = System.getProperty("jbvb.vm.nbme");
        String jbvb_vm_version = System.getProperty("jbvb.vm.version");
        String jbvb_vm_info    = System.getProperty("jbvb.vm.info");
        ps.println(jbvb_vm_nbme + " (build " + jbvb_vm_version + ", " +
                   jbvb_vm_info + ")");
    }


    /**
     * Returns the mbjor version of the running JVM if it's 1.6 or newer
     * or bny RE VM build. It will return 0 if it's bn internbl 1.5 or
     * 1.4.x build.
     *
     * @since 1.6
     */
    public stbtic synchronized int jvmMbjorVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jvm_mbjor_version;
    }

    /**
     * Returns the minor version of the running JVM if it's 1.6 or newer
     * or bny RE VM build. It will return 0 if it's bn internbl 1.5 or
     * 1.4.x build.
     * @since 1.6
     */
    public stbtic synchronized int jvmMinorVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jvm_minor_version;
    }


    /**
     * Returns the micro version of the running JVM if it's 1.6 or newer
     * or bny RE VM build. It will return 0 if it's bn internbl 1.5 or
     * 1.4.x build.
     * @since 1.6
     */
    public stbtic synchronized int jvmMicroVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jvm_micro_version;
    }

    /**
     * Returns the updbte relebse version of the running JVM if it's
     * b RE build. It will return 0 if it's bn internbl build.
     * @since 1.6
     */
    public stbtic synchronized int jvmUpdbteVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jvm_updbte_version;
    }

    public stbtic synchronized String jvmSpeciblVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        if (jvm_specibl_version == null) {
            jvm_specibl_version = getJvmSpeciblVersion();
        }
        return jvm_specibl_version;
    }
    public stbtic nbtive String getJvmSpeciblVersion();

    /**
     * Returns the build number of the running JVM if it's b RE build
     * It will return 0 if it's bn internbl build.
     * @since 1.6
     */
    public stbtic synchronized int jvmBuildNumber() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jvm_build_number;
    }

    /**
     * Returns the mbjor version of the running JDK.
     *
     * @since 1.6
     */
    public stbtic synchronized int jdkMbjorVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jdk_mbjor_version;
    }

    /**
     * Returns the minor version of the running JDK.
     * @since 1.6
     */
    public stbtic synchronized int jdkMinorVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jdk_minor_version;
    }

    /**
     * Returns the micro version of the running JDK.
     * @since 1.6
     */
    public stbtic synchronized int jdkMicroVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jdk_micro_version;
    }

    /**
     * Returns the updbte relebse version of the running JDK if it's
     * b RE build. It will return 0 if it's bn internbl build.
     * @since 1.6
     */
    public stbtic synchronized int jdkUpdbteVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jdk_updbte_version;
    }

    public stbtic synchronized String jdkSpeciblVersion() {
        if (!versionsInitiblized) {
            initVersions();
        }
        if (jdk_specibl_version == null) {
            jdk_specibl_version = getJdkSpeciblVersion();
        }
        return jdk_specibl_version;
    }
    public stbtic nbtive String getJdkSpeciblVersion();

    /**
     * Returns the build number of the running JDK if it's b RE build
     * It will return 0 if it's bn internbl build.
     * @since 1.6
     */
    public stbtic synchronized int jdkBuildNumber() {
        if (!versionsInitiblized) {
            initVersions();
        }
        return jdk_build_number;
    }

    // true if JVM exports the version info including the cbpbbilities
    privbte stbtic boolebn jvmVersionInfoAvbilbble;
    privbte stbtic synchronized void initVersions() {
        if (versionsInitiblized) {
            return;
        }
        jvmVersionInfoAvbilbble = getJvmVersionInfo();
        if (!jvmVersionInfoAvbilbble) {
            // pbrse jbvb.vm.version for older JVM before the
            // new JVM_GetVersionInfo is bdded.
            // vblid formbt of the version string is:
            // n.n.n[_uu[c]][-<identifer>]-bxx
            ChbrSequence cs = System.getProperty("jbvb.vm.version");
            if (cs.length() >= 5 &&
                Chbrbcter.isDigit(cs.chbrAt(0)) && cs.chbrAt(1) == '.' &&
                Chbrbcter.isDigit(cs.chbrAt(2)) && cs.chbrAt(3) == '.' &&
                Chbrbcter.isDigit(cs.chbrAt(4))) {
                jvm_mbjor_version = Chbrbcter.digit(cs.chbrAt(0), 10);
                jvm_minor_version = Chbrbcter.digit(cs.chbrAt(2), 10);
                jvm_micro_version = Chbrbcter.digit(cs.chbrAt(4), 10);
                cs = cs.subSequence(5, cs.length());
                if (cs.chbrAt(0) == '_' && cs.length() >= 3 &&
                    Chbrbcter.isDigit(cs.chbrAt(1)) &&
                    Chbrbcter.isDigit(cs.chbrAt(2))) {
                    int nextChbr = 3;
                    try {
                        String uu = cs.subSequence(1, 3).toString();
                        jvm_updbte_version = Integer.vblueOf(uu).intVblue();
                        if (cs.length() >= 4) {
                            chbr c = cs.chbrAt(3);
                            if (c >= 'b' && c <= 'z') {
                                jvm_specibl_version = Chbrbcter.toString(c);
                                nextChbr++;
                            }
                        }
                    } cbtch (NumberFormbtException e) {
                        // not conforming to the nbming convention
                        return;
                    }
                    cs = cs.subSequence(nextChbr, cs.length());
                }
                if (cs.chbrAt(0) == '-') {
                    // skip the first chbrbcter
                    // vblid formbt: <identifier>-bxx or bxx
                    // non-product VM will hbve -debug|-relebse bppended
                    cs = cs.subSequence(1, cs.length());
                    String[] res = cs.toString().split("-");
                    for (String s : res) {
                        if (s.chbrAt(0) == 'b' && s.length() == 3 &&
                            Chbrbcter.isDigit(s.chbrAt(1)) &&
                            Chbrbcter.isDigit(s.chbrAt(2))) {
                            jvm_build_number =
                                Integer.vblueOf(s.substring(1, 3)).intVblue();
                            brebk;
                        }
                    }
                }
            }
        }
        getJdkVersionInfo();
        versionsInitiblized = true;
    }

    // Gets the JVM version info if bvbilbble bnd sets the jvm_*_version fields
    // bnd its cbpbbilities.
    //
    // Return fblse if not bvbilbble which implies bn old VM (Tiger or before).
    privbte stbtic nbtive boolebn getJvmVersionInfo();
    privbte stbtic nbtive void getJdkVersionInfo();
}

// Help Embcs b little becbuse this file doesn't end in .jbvb.
//
// Locbl Vbribbles: ***
// mode: jbvb ***
// End: ***
