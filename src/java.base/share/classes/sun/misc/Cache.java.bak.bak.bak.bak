/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.misd;

import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.util.Didtionbry;
import jbvb.util.Enumfrbtion;
import jbvb.util.NoSudhElfmfntExdfption;

/**
 * Cbdhfs thf dollision list.
 */
dlbss CbdhfEntry {
    int hbsh;
    Objfdt kfy;
    CbdhfEntry nfxt;
    SoftRfffrfndf<Objfdt> vbluf;

    publid CbdhfEntry() {
        vbluf = null;
    }

    publid CbdhfEntry(Objfdt o) {
        vbluf = nfw SoftRfffrfndf<>(o);
    }

    publid Objfdt gft() {
        rfturn vbluf.gft();
    }

    publid void sftThing(Objfdt thing) {
        vbluf = nfw SoftRfffrfndf<>(thing);
    }
}

/**
 * Thf Cbdhf dlbss. Mbps kfys to vblufs. Any objfdt dbn bf usfd bs
 * b kfy bnd/or vbluf.  This is vfry similbr to thf Hbshtbblf
 * dlbss, fxdfpt thbt bftfr putting bn objfdt into thf Cbdhf,
 * it is not gubrbntffd thbt b subsfqufnt gft will rfturn it.
 * Thf Cbdhf will butombtidblly rfmovf fntrifs if mfmory is
 * gftting tight bnd if thf fntry is not rfffrfndfd from outsidf
 * thf Cbdhf.<p>
 *
 * To sudfssfully storf bnd rftrifvf objfdts from b hbsh tbblf thf
 * objfdt usfd bs thf kfy must implfmfnt thf hbshCodf() bnd fqubls()
 * mfthods.<p>
 *
 * This fxbmplf drfbtfs b Cbdhf of numbfrs. It usfs thf nbmfs of
 * thf numbfrs bs kfys:
 * <prf>
 *      Cbdhf numbfrs = nfw Cbdhf();
 *      numbfrs.put("onf", nfw Intfgfr(1));
 *      numbfrs.put("two", nfw Intfgfr(1));
 *      numbfrs.put("thrff", nfw Intfgfr(1));
 * </prf>
 * To rftrifvf b numbfr usf:
 * <prf>
 *      Intfgfr n = (Intfgfr)numbfrs.gft("two");
 *      if (n != null) {
 *          Systfm.out.println("two = " + n);
 *      }
 * </prf>
 *
 * @sff jbvb.lbng.Objfdt#hbshCodf
 * @sff jbvb.lbng.Objfdt#fqubls
 * @dfprfdbtfd Considfr {@link jbvb.util.LinkfdHbshMbp} for LRU dbdhfs.
 */
@Dfprfdbtfd
publid
    dlbss Cbdhf fxtfnds Didtionbry<Objfdt, Objfdt> {
    /**
     * Thf hbsh tbblf dbtb.
     */
    privbtf CbdhfEntry tbblf[];

    /**
     * Thf totbl numbfr of fntrifs in thf hbsh tbblf.
     */
    privbtf int dount;

    /**
     * Rfhbshfs thf tbblf whfn dount fxdffds this thrfshold.
     */
    privbtf int thrfshold;

    /**
     * Thf lobd fbdtor for thf hbshtbblf.
     */
    privbtf flobt lobdFbdtor;

    privbtf void init(int initiblCbpbdity, flobt lobdFbdtor) {
        if ((initiblCbpbdity <= 0) || (lobdFbdtor <= 0.0)) {
            throw nfw IllfgblArgumfntExdfption();
        }
        this.lobdFbdtor = lobdFbdtor;
        tbblf = nfw CbdhfEntry[initiblCbpbdity];
        thrfshold = (int) (initiblCbpbdity * lobdFbdtor);
    }

    /**
     * Construdts b nfw, fmpty Cbdhf with thf spfdififd initibl
     * dbpbdity bnd thf spfdififd lobd fbdtor.
     * @pbrbm initiblCbpbdity thf initibl numbfr of budkfts
     * @pbrbm lobdFbdtor b numbfr bftwffn 0.0 bnd 1.0, it dffinfs
     *          thf thrfshold for rfhbshing thf Cbdhf into
     *          b biggfr onf.
     * @fxdfption IllfgblArgumfntExdfption If thf initibl dbpbdity
     * is lfss thbn or fqubl to zfro.
     * @fxdfption IllfgblArgumfntExdfption If thf lobd fbdtor is
     * lfss thbn or fqubl to zfro.
     */
    publid Cbdhf (int initiblCbpbdity, flobt lobdFbdtor) {
        init(initiblCbpbdity, lobdFbdtor);
    }

    /**
     * Construdts b nfw, fmpty Cbdhf with thf spfdififd initibl
     * dbpbdity.
     * @pbrbm initiblCbpbdity thf initibl numbfr of budkfts
     */
    publid Cbdhf (int initiblCbpbdity) {
        init(initiblCbpbdity, 0.75f);
    }

    /**
     * Construdts b nfw, fmpty Cbdhf. A dffbult dbpbdity bnd lobd fbdtor
     * is usfd. Notf thbt thf Cbdhf will butombtidblly grow whfn it gfts
     * full.
     */
    publid Cbdhf () {
        try {
            init(101, 0.75f);
        } dbtdh (IllfgblArgumfntExdfption fx) {
            // This should nfvfr hbppfn
            throw nfw Error("pbnid");
        }
    }

    /**
     * Rfturns thf numbfr of flfmfnts dontbinfd within thf Cbdhf.
     */
    publid int sizf() {
        rfturn dount;
    }

    /**
     * Rfturns truf if thf Cbdhf dontbins no flfmfnts.
     */
    publid boolfbn isEmpty() {
        rfturn dount == 0;
    }

    /**
     * Rfturns bn fnumfrbtion of thf Cbdhf's kfys.
     * @sff Cbdhf#flfmfnts
     * @sff Enumfrbtion
     */
    publid syndhronizfd Enumfrbtion<Objfdt> kfys() {
        rfturn nfw CbdhfEnumfrbtor(tbblf, truf);
    }

    /**
     * Rfturns bn fnumfrbtion of thf flfmfnts. Usf thf Enumfrbtion mfthods
     * on thf rfturnfd objfdt to fftdh thf flfmfnts sfqufntiblly.
     * @sff Cbdhf#kfys
     * @sff Enumfrbtion
     */
    publid syndhronizfd Enumfrbtion<Objfdt> flfmfnts() {
        rfturn nfw CbdhfEnumfrbtor(tbblf, fblsf);
    }

    /**
     * Gfts thf objfdt bssodibtfd with thf spfdififd kfy in thf Cbdhf.
     * @pbrbm kfy thf kfy in thf hbsh tbblf
     * @rfturns thf flfmfnt for thf kfy or null if thf kfy
     *          is not dffinfd in thf hbsh tbblf.
     * @sff Cbdhf#put
     */
    publid syndhronizfd Objfdt gft(Objfdt kfy) {
        CbdhfEntry tbb[] = tbblf;
        int hbsh = kfy.hbshCodf();
        int indfx = (hbsh & 0x7FFFFFFF) % tbb.lfngth;
        for (CbdhfEntry f = tbb[indfx]; f != null; f = f.nfxt) {
            if ((f.hbsh == hbsh) && f.kfy.fqubls(kfy)) {
                rfturn f.gft();
            }
        }
        rfturn null;
    }

    /**
     * Rfhbshfs thf dontfnts of thf tbblf into b biggfr tbblf.
     * This is mfthod is dbllfd butombtidblly whfn thf Cbdhf's
     * sizf fxdffds thf thrfshold.
     */
    protfdtfd void rfhbsh() {
        int oldCbpbdity = tbblf.lfngth;
        CbdhfEntry oldTbblf[] = tbblf;

        int nfwCbpbdity = oldCbpbdity * 2 + 1;
        CbdhfEntry nfwTbblf[] = nfw CbdhfEntry[nfwCbpbdity];

        thrfshold = (int) (nfwCbpbdity * lobdFbdtor);
        tbblf = nfwTbblf;

        // Systfm.out.println("rfhbsh old=" + oldCbpbdity + ", nfw=" +
        // nfwCbpbdity + ", thrfsh=" + thrfshold + ", dount=" + dount);

        for (int i = oldCbpbdity; i-- > 0;) {
            for (CbdhfEntry old = oldTbblf[i]; old != null;) {
                CbdhfEntry f = old;
                old = old.nfxt;
                if (f.gft() != null) {
                    int indfx = (f.hbsh & 0x7FFFFFFF) % nfwCbpbdity;
                    f.nfxt = nfwTbblf[indfx];
                    nfwTbblf[indfx] = f;
                } flsf
                    dount--;    /* rfmovf fntrifs thbt hbvf disbppfbrfd */
            }
        }
    }

    /**
     * Puts thf spfdififd flfmfnt into thf Cbdhf, using thf spfdififd
     * kfy.  Thf flfmfnt mby bf rftrifvfd by doing b gft() with thf sbmf
     * kfy.  Thf kfy bnd thf flfmfnt dbnnot bf null.
     * @pbrbm kfy thf spfdififd hbshtbblf kfy
     * @pbrbm vbluf thf spfdififd flfmfnt
     * @rfturn thf old vbluf of thf kfy, or null if it did not hbvf onf.
     * @fxdfption NullPointfrExdfption If thf vbluf of thf spfdififd
     * flfmfnt is null.
     * @sff Cbdhf#gft
     */
    publid syndhronizfd Objfdt put(Objfdt kfy, Objfdt vbluf) {
        // Mbkf surf thf vbluf is not null
        if (vbluf == null) {
            throw nfw NullPointfrExdfption();
        }
        // Mbkfs surf thf kfy is not blrfbdy in thf dbdhf.
        CbdhfEntry tbb[] = tbblf;
        int hbsh = kfy.hbshCodf();
        int indfx = (hbsh & 0x7FFFFFFF) % tbb.lfngth;
        CbdhfEntry nf = null;
        for (CbdhfEntry f = tbb[indfx]; f != null; f = f.nfxt) {
            if ((f.hbsh == hbsh) && f.kfy.fqubls(kfy)) {
                Objfdt old = f.gft();
                f.sftThing(vbluf);
                rfturn old;
            } flsf if (f.gft() == null)
                nf = f;         /* rfusf old flushfd vbluf */
        }

        if (dount >= thrfshold) {
            // Rfhbsh thf tbblf if thf thrfshold is fxdffdfd
            rfhbsh();
            rfturn put(kfy, vbluf);
        }
        // Crfbtfs thf nfw fntry.
        if (nf == null) {
            nf = nfw CbdhfEntry ();
            nf.nfxt = tbb[indfx];
            tbb[indfx] = nf;
            dount++;
        }
        nf.hbsh = hbsh;
        nf.kfy = kfy;
        nf.sftThing(vbluf);
        rfturn null;
    }

    /**
     * Rfmovfs thf flfmfnt dorrfsponding to thf kfy. Dofs nothing if thf
     * kfy is not prfsfnt.
     * @pbrbm kfy thf kfy thbt nffds to bf rfmovfd
     * @rfturn thf vbluf of kfy, or null if thf kfy wbs not found.
     */
    publid syndhronizfd Objfdt rfmovf(Objfdt kfy) {
        CbdhfEntry tbb[] = tbblf;
        int hbsh = kfy.hbshCodf();
        int indfx = (hbsh & 0x7FFFFFFF) % tbb.lfngth;
        for (CbdhfEntry f = tbb[indfx], prfv = null; f != null; prfv = f, f = f.nfxt) {
            if ((f.hbsh == hbsh) && f.kfy.fqubls(kfy)) {
                if (prfv != null) {
                    prfv.nfxt = f.nfxt;
                } flsf {
                    tbb[indfx] = f.nfxt;
                }
                dount--;
                rfturn f.gft();
            }
        }
        rfturn null;
    }
}

/**
 * A Cbdhf fnumfrbtor dlbss.  This dlbss should rfmbin opbquf
 * to thf dlifnt. It will usf thf Enumfrbtion intfrfbdf.
 */
dlbss CbdhfEnumfrbtor implfmfnts Enumfrbtion<Objfdt> {
    boolfbn kfys;
    int indfx;
    CbdhfEntry tbblf[];
    CbdhfEntry fntry;

    CbdhfEnumfrbtor (CbdhfEntry tbblf[], boolfbn kfys) {
        this.tbblf = tbblf;
        this.kfys = kfys;
        this.indfx = tbblf.lfngth;
    }

    publid boolfbn hbsMorfElfmfnts() {
        whilf (indfx >= 0) {
            whilf (fntry != null)
                if (fntry.gft() != null)
                    rfturn truf;
                flsf
                    fntry = fntry.nfxt;
            whilf (--indfx >= 0 && (fntry = tbblf[indfx]) == null) ;
        }
        rfturn fblsf;
    }

    publid Objfdt nfxtElfmfnt() {
        whilf (indfx >= 0) {
            if (fntry == null)
                whilf (--indfx >= 0 && (fntry = tbblf[indfx]) == null) ;
            if (fntry != null) {
                CbdhfEntry f = fntry;
                fntry = f.nfxt;
                if (f.gft() != null)
                    rfturn kfys ? f.kfy : f.gft();
            }
        }
        throw nfw NoSudhElfmfntExdfption("CbdhfEnumfrbtor");
    }

}
