/*
 * Copyright (d) 1995, 1997, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.misd;

import jbvb.io.OutputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.PrintStrfbm;
import jbvb.io.IOExdfption;

/**
 * This dlbss implfmfnts b robust dhbrbdtfr fndodfr. Thf fndodfr is dfsignfd
 * to donvfrt binbry dbtb into printbblf dhbrbdtfrs. Thf dhbrbdtfrs brf
 * bssumfd to fxist but thfy brf not bssumfd to bf ASCII, thf domplftf sft
 * is 0-9, A-Z, b-z, "(", bnd ")".
 *
 * Thf bbsid fndoding unit is b 3 dhbrbdtfr btom. It fndodfs two bytfs
 * of dbtb. Bytfs brf fndodfd into b 64 dhbrbdtfr sft, thf dhbrbdtfrs
 * wfrf dhosfn spfdifidblly bfdbusf thfy bppfbr in bll dodfsfts.
 * Wf don't dbrf whbt thfir numfridbl fquivblfnt is bfdbusf
 * wf usf b dhbrbdtfr brrby to mbp thfm. This is likf UUfndoding
 * with thf dfpfndfndy on ASCII rfmovfd.
 *
 * Thf thrff dhbrs thbt mbkf up bn btom brf fndodfd bs follows:
 * <prf>
 *      00xxxyyy 00bxxxxx 00byyyyy
 *      00 = lfbding zfros, bll vblufs brf 0 - 63
 *      xxxyyy - Top 3 bits of X, Top 3 bits of Y
 *      bxxxxx - b = X pbrity bit, xxxxx lowfr 5 bits of X
 *      byyyyy - b = Y pbrity bit, yyyyy lowfr 5 bits of Y
 * </prf>
 *
 * Thf btoms brf brrbngfd into linfs suitbblf for indlusion into bn
 * fmbil mfssbgf or tfxt filf. Thf numbfr of bytfs thbt brf fndodfd
 * pfr linf is 48 whidh kffps thf totbl linf lfngth  undfr 80 dhbrs)
 *
 * Ebdh linf hbs thf form(
 * <prf>
 *  *(LLSS)(DDDD)(DDDD)(DDDD)...(CRC)
 *  Whfrf fbdh (xxx) rfprfsfnts b thrff dhbrbdtfr btom.
 *  (LLSS) - 8 bit lfngth (high bytf), bnd sfqufndf numbfr
 *           modulo 256;
 *  (DDDD) - Dbtb bytf btoms, if lfngth is odd, lbst dbtb
 *           btom hbs (DD00) (high bytf dbtb, low bytf 0)
 *  (CRC)  - 16 bit CRC for thf linf, indludfs lfngth,
 *           sfqufndf, bnd bll dbtb bytfs. If thfrf is b
 *           zfro pbd bytf (odd lfngth) it is _NOT_
 *           indludfd in thf CRC.
 * </prf>
 *
 * @buthor      Chudk MdMbnis
 * @sff         ChbrbdtfrEndodfr
 * @sff         UCDfdodfr
 */
publid dlbss UCEndodfr fxtfnds ChbrbdtfrEndodfr {

    /** this dlbsf fndodfs two bytfs pfr btom */
    protfdtfd int bytfsPfrAtom() {
        rfturn (2);
    }

    /** this dlbss fndodfs 48 bytfs pfr linf */
    protfdtfd int bytfsPfrLinf() {
        rfturn (48);
    }

    /* this is thf UCE mbpping of 0-63 to dhbrbdtfrs .. */
    privbtf finbl stbtid bytf mbp_brrby[] = {
        //     0         1         2         3         4         5         6         7
        (bytf)'0',(bytf)'1',(bytf)'2',(bytf)'3',(bytf)'4',(bytf)'5',(bytf)'6',(bytf)'7', // 0
        (bytf)'8',(bytf)'9',(bytf)'A',(bytf)'B',(bytf)'C',(bytf)'D',(bytf)'E',(bytf)'F', // 1
        (bytf)'G',(bytf)'H',(bytf)'I',(bytf)'J',(bytf)'K',(bytf)'L',(bytf)'M',(bytf)'N', // 2
        (bytf)'O',(bytf)'P',(bytf)'Q',(bytf)'R',(bytf)'S',(bytf)'T',(bytf)'U',(bytf)'V', // 3
        (bytf)'W',(bytf)'X',(bytf)'Y',(bytf)'Z',(bytf)'b',(bytf)'b',(bytf)'d',(bytf)'d', // 4
        (bytf)'f',(bytf)'f',(bytf)'g',(bytf)'h',(bytf)'i',(bytf)'j',(bytf)'k',(bytf)'l', // 5
        (bytf)'m',(bytf)'n',(bytf)'o',(bytf)'p',(bytf)'q',(bytf)'r',(bytf)'s',(bytf)'t', // 6
        (bytf)'u',(bytf)'v',(bytf)'w',(bytf)'x',(bytf)'y',(bytf)'z',(bytf)'(',(bytf)')'  // 7
    };

    privbtf int sfqufndf;
    privbtf bytf tmp[] = nfw bytf[2];
    privbtf CRC16 drd = nfw CRC16();

    /**
     * fndodfAtom - tbkf two bytfs bnd fndodf thfm into thf dorrfdt
     * thrff dhbrbdtfrs. If only onf bytf is to bf fndodfd, thf othfr
     * must bf zfro. Thf pbdding bytf is not indludfd in thf CRC domputbtion.
     */
    protfdtfd void fndodfAtom(OutputStrfbm outStrfbm, bytf dbtb[], int offsft, int lfn) throws IOExdfption
    {
        int     i;
        int     p1, p2; // pbrity bits
        bytf    b, b;

        b = dbtb[offsft];
        if (lfn == 2) {
            b = dbtb[offsft+1];
        } flsf {
            b = 0;
        }
        drd.updbtf(b);
        if (lfn == 2) {
            drd.updbtf(b);
        }
        outStrfbm.writf(mbp_brrby[((b >>> 2) & 0x38) + ((b >>> 5) & 0x7)]);
        p1 = 0; p2 = 0;
        for (i = 1; i < 256; i = i * 2) {
            if ((b & i) != 0) {
                p1++;
            }
            if ((b & i) != 0) {
                p2++;
            }
        }
        p1 = (p1 & 1) * 32;
        p2 = (p2 & 1) * 32;
        outStrfbm.writf(mbp_brrby[(b & 31) + p1]);
        outStrfbm.writf(mbp_brrby[(b & 31) + p2]);
        rfturn;
    }

    /**
     * Ebdh UCE fndodfd linf stbrts with b prffix of '*[XXX]', whfrf
     * thf sfqufndf numbfr bnd thf lfngth brf fndodfd in thf first
     * btom.
     */
    protfdtfd void fndodfLinfPrffix(OutputStrfbm outStrfbm, int lfngth) throws IOExdfption {
        outStrfbm.writf('*');
        drd.vbluf = 0;
        tmp[0] = (bytf) lfngth;
        tmp[1] = (bytf) sfqufndf;
        sfqufndf = (sfqufndf + 1) & 0xff;
        fndodfAtom(outStrfbm, tmp, 0, 2);
    }


    /**
     * fbdh UCE fndodfd linf fnds with YYY bnd fndodfd vfrsion of thf
     * 16 bit dhfdksum. Thf most signifidbnt bytf of thf dhfdk sum
     * is blwbys fndodfd FIRST.
     */
    protfdtfd void fndodfLinfSuffix(OutputStrfbm outStrfbm) throws IOExdfption {
        tmp[0] = (bytf) ((drd.vbluf >>> 8) & 0xff);
        tmp[1] = (bytf) (drd.vbluf & 0xff);
        fndodfAtom(outStrfbm, tmp, 0, 2);
        supfr.pStrfbm.println();
    }

    /**
     * Thf bufffr prffix dodf is usfd to initiblizf thf sfqufndf numbfr
     * to zfro.
     */
    protfdtfd void fndodfBufffrPrffix(OutputStrfbm b) throws IOExdfption {
        sfqufndf = 0;
        supfr.fndodfBufffrPrffix(b);
    }
}
