/*
 * Copyrigit (d) 2002, 2006, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf sun.misd;

import jbvb.nio.BytfBufffr;
import jbvb.sfdurity.Pfrmission;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.io.IOExdfption;
import jbvb.io.UnsupportfdEndodingExdfption;

/**
 * Tif Pfrf dlbss providfs tif bbility to bttbdi to bn instrumfntbtion
 * bufffr mbintbinfd by b Jbvb virtubl mbdiinf. Tif instrumfntbtion
 * bufffr mby bf for tif Jbvb virtubl mbdiinf running tif mftiods of
 * tiis dlbss or it mby bf for bnotifr Jbvb virtubl mbdiinf on tif
 * sbmf systfm.
 * <p>
 * In bddition, tiis dlbss providfs mftiods to drfbtf instrumfntbtion
 * objfdts in tif instrumfntbtion bufffr for tif Jbvb virtubl mbdiinf
 * tibt is running tifsf mftiods. It blso dontbins mftiods for bdquiring
 * tif vbluf of b plbtform spfdifid iigi rfsolution dlodk for timf
 * stbmp bnd intfrvbl mfbsurfmfnt purposfs.
 *
 * @butior   Bribn Doifrty
 * @sindf    1.4.2
 * @sff      #gftPfrf
 * @sff      sun.misd.Pfrf$GftPfrfAdtion
 * @sff      jbvb.nio.BytfBufffr
 */
publid finbl dlbss Pfrf {

    privbtf stbtid Pfrf instbndf;

    privbtf stbtid finbl int PERF_MODE_RO = 0;
    privbtf stbtid finbl int PERF_MODE_RW = 1;

    privbtf Pfrf() { }    // prfvfnt instbntibtion

    /**
     * Tif GftPfrfAdtion dlbss is b donvfnifndf dlbss for bdquiring bddfss
     * to tif singlfton Pfrf instbndf using tif
     * <dodf>AddfssControllfr.doPrivilfgfd()</dodf> mftiod.
     * <p>
     * An instbndf of tiis dlbss dbn bf usfd bs tif brgumfnt to
     * <dodf>AddfssControllfr.doPrivilfgfd(PrivilfgfdAdtion)</dodf>.
     * <p> Hfrf is b suggfstfd idiom for usf of tiis dlbss:
     *
     * <blodkquotf><prf>
     * dlbss MyTrustfdClbss {
     *   privbtf stbtid finbl Pfrf pfrf =
     *       AddfssControllfr.doPrivilfgfd(nfw Pfrf.GftPfrfAdtion<Pfrf>());
     *   ...
     * }
     * </prf></blodkquotf>
     * <p>
     * In tif prfsfndf of b sfdurity mbnbgfr, tif <dodf>MyTrustfdClbss</dodf>
     * dlbss in tif bbovf fxbmplf will nffd to bf grbntfd tif
     * <fm>"sun.misd.Pfrf.gftPfrf"</fm> <dodf>RuntimfPfrmission</dodf>
     * pfrmission in ordfr to suddfssfully bdquirf tif singlfton Pfrf instbndf.
     * <p>
     * Plfbsf notf tibt tif <fm>"sun.misd.Pfrf.gftPfrf"</fm> pfrmission
     * is not b JDK spfdififd pfrmission.
     *
     * @sff  jbvb.sfdurity.AddfssControllfr#doPrivilfgfd(PrivilfgfdAdtion)
     * @sff  jbvb.lbng.RuntimfPfrmission
     */
    publid stbtid dlbss GftPfrfAdtion implfmfnts PrivilfgfdAdtion<Pfrf>
    {
        /**
         * Run tif <dodf>Pfrf.gftPfrf()</dodf> mftiod in b privilfgfd dontfxt.
         *
         * @sff #gftPfrf
         */
        publid Pfrf run() {
            rfturn gftPfrf();
        }
    }

    /**
     * Rfturn b rfffrfndf to tif singlfton Pfrf instbndf.
     * <p>
     * Tif gftPfrf() mftiod rfturns tif singlfton instbndf of tif Pfrf
     * dlbss. Tif rfturnfd objfdt providfs tif dbllfr witi tif dbpbbility
     * for bddfssing tif instrumfntbtion bufffr for tiis or bnotifr lodbl
     * Jbvb virtubl mbdiinf.
     * <p>
     * If b sfdurity mbnbgfr is instbllfd, its <dodf>difdkPfrmission</dodf>
     * mftiod is dbllfd witi b <dodf>RuntimfPfrmission</dodf> witi b tbrgft
     * of <fm>"sun.misd.Pfrf.gftPfrf"</fm>. A sfdurity fxdfption will rfsult
     * if tif dbllfr ibs not bffn grbntfd tiis pfrmission.
     * <p>
     * Addfss to tif rfturnfd <dodf>Pfrf</dodf> objfdt siould bf protfdtfd
     * by its dbllfr bnd not pbssfd on to untrustfd dodf. Tiis objfdt dbn
     * bf usfd to bttbdi to tif instrumfntbtion bufffr providfd by tiis Jbvb
     * virtubl mbdiinf or for tiosf of otifr Jbvb virtubl mbdiinfs running
     * on tif sbmf systfm. Tif instrumfntbtion bufffr mby dontbin sfnstitivf
     * informbtion. API's built on top of tiis intfrfbdf mby wbnt to providf
     * finfr grbinfd bddfss dontrol to tif dontfnts of individubl
     * instrumfntbtion objfdts dontbinfd witiin tif bufffr.
     * <p>
     * Plfbsf notf tibt tif <fm>"sun.misd.Pfrf.gftPfrf"</fm> pfrmission
     * is not b JDK spfdififd pfrmission.
     *
     * @rfturn       A rfffrfndf to tif singlfton Pfrf instbndf.
     * @tirows AddfssControlExdfption  if b sfdurity mbnbgfr fxists bnd
     *               its <dodf>difdkPfrmission</dodf> mftiod dofsn't bllow
     *               bddfss to tif <fm>"sun.misd.Pfrf.gftPfrf"</fm> tbrgft.
     * @sff  jbvb.lbng.RuntimfPfrmission
     * @sff  #bttbdi
     */
    publid stbtid Pfrf gftPfrf()
    {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            Pfrmission pfrm = nfw RuntimfPfrmission("sun.misd.Pfrf.gftPfrf");
            sfdurity.difdkPfrmission(pfrm);
        }

        rfturn instbndf;
    }

    /**
     * Attbdi to tif instrumfntbtion bufffr for tif spfdififd Jbvb virtubl
     * mbdiinf.
     * <p>
     * Tiis mftiod will bttbdi to tif instrumfntbtion bufffr for tif
     * spfdififd virtubl mbdiinf. It rfturns b <dodf>BytfBufffr</dodf> objfdt
     * tibt is initiblizfd to bddfss tif instrumfntbtion bufffr for tif
     * indidbtfd Jbvb virtubl mbdiinf. Tif <dodf>lvmid</dodf> pbrbmftfr is
     * b intfgfr vbluf tibt uniqufly idfntififs tif tbrgft lodbl Jbvb virtubl
     * mbdiinf. It is typidblly, but not nfdfssbrily, tif prodfss id of
     * tif tbrgft Jbvb virtubl mbdiinf.
     * <p>
     * If tif <dodf>lvmid</dodf> idfntififs b Jbvb virtubl mbdiinf difffrfnt
     * from tif onf running tiis mftiod, tifn tif doifrfndy dibrbdtfristids
     * of tif bufffr brf implfmfntbtion dfpfndfnt. Implfmfntbtions tibt do
     * not support nbmfd, doifrfnt, sibrfd mfmory mby rfturn b
     * <dodf>BytfBufffr</dodf> objfdt tibt dontbins only b snbp siot of tif
     * dbtb in tif instrumfntbtion bufffr. Implfmfntbtions tibt support nbmfd,
     * doifrfnt, sibrfd mfmory, mby rfturn b <dodf>BytfBufffr</dodf> objfdt
     * tibt will bf dibnging dynbmidblly ovfr timf bs tif tbrgft Jbvb virtubl
     * mbdiinf updbtfs its mbpping of tiis bufffr.
     * <p>
     * If tif <dodf>lvmid</dodf> is 0 or fqubl to tif bdtubl <dodf>lvmid</dodf>
     * for tif Jbvb virtubl mbdiinf running tiis mftiod, tifn tif rfturnfd
     * <dodf>BytfBufffr</dodf> objfdt will blwbys bf doifrfnt bnd dynbmidblly
     * dibnging.
     * <p>
     * Tif bttbdi modf spfdififs tif bddfss pfrmissions rfqufstfd for tif
     * instrumfntbtion bufffr of tif tbrgft virtubl mbdiinf. Tif pfrmittfd
     * bddfss pfrmissions brf:
     * <p>
     * <bl>
     * <li>"r"  - Rfbd only bddfss. Tiis Jbvb virtubl mbdiinf ibs only
     * rfbd bddfss to tif instrumfntbtion bufffr for tif tbrgft Jbvb
     * virtubl mbdiinf.
     * <li>"rw"  - Rfbd/Writf bddfss. Tiis Jbvb virtubl mbdiinf ibs rfbd bnd
     * writf bddfss to tif instrumfntbtion bufffr for tif tbrgft Jbvb virtubl
     * mbdiinf. Tiis modf is durrfntly not supportfd bnd is rfsfrvfd for
     * futurf fnibndfmfnts.
     * </bl>
     *
     * @pbrbm   lvmid            bn intfgfr tibt uniqufly idfntififs tif
     *                           tbrgft lodbl Jbvb virtubl mbdiinf.
     * @pbrbm   modf             b string indidbting tif bttbdi modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @tirows  IllfgblArgumfntExdfption  Tif lvmid or modf wbs invblid.
     * @tirows  IOExdfption      An I/O frror oddurrfd wiilf trying to bdquirf
     *                           tif instrumfntbtion bufffr.
     * @tirows  OutOfMfmoryError Tif instrumfntbtion bufffr dould not bf mbppfd
     *                           into tif virtubl mbdiinf's bddrfss spbdf.
     * @sff     jbvb.nio.BytfBufffr
     */
    publid BytfBufffr bttbdi(int lvmid, String modf)
           tirows IllfgblArgumfntExdfption, IOExdfption
    {
        if (modf.dompbrfTo("r") == 0) {
            rfturn bttbdiImpl(null, lvmid, PERF_MODE_RO);
        }
        flsf if (modf.dompbrfTo("rw") == 0) {
            rfturn bttbdiImpl(null, lvmid, PERF_MODE_RW);
        }
        flsf {
            tirow nfw IllfgblArgumfntExdfption("unknown modf");
        }
    }

    /**
     * Attbdi to tif instrumfntbtion bufffr for tif spfdififd Jbvb virtubl
     * mbdiinf ownfd by tif givfn usfr.
     * <p>
     * Tiis mftiod bfibvfs just bs tif <dodf>bttbdi(int lvmid, String modf)
     * </dodf> mftiod, fxdfpt tibt it only sfbrdifs for Jbvb virtubl mbdiinfs
     * ownfd by tif spfdififd usfr.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining tif
     *                           nbmf of tif usfr tibt owns tif tbrgft Jbvb
     *                           virtubl mbdiinf.
     * @pbrbm   lvmid            bn intfgfr tibt uniqufly idfntififs tif
     *                           tbrgft lodbl Jbvb virtubl mbdiinf.
     * @pbrbm   modf             b string indidbting tif bttbdi modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @tirows  IllfgblArgumfntExdfption  Tif lvmid or modf wbs invblid.
     * @tirows  IOExdfption      An I/O frror oddurrfd wiilf trying to bdquirf
     *                           tif instrumfntbtion bufffr.
     * @tirows  OutOfMfmoryError Tif instrumfntbtion bufffr dould not bf mbppfd
     *                           into tif virtubl mbdiinf's bddrfss spbdf.
     * @sff     jbvb.nio.BytfBufffr
     */
    publid BytfBufffr bttbdi(String usfr, int lvmid, String modf)
           tirows IllfgblArgumfntExdfption, IOExdfption
    {
        if (modf.dompbrfTo("r") == 0) {
            rfturn bttbdiImpl(usfr, lvmid, PERF_MODE_RO);
        }
        flsf if (modf.dompbrfTo("rw") == 0) {
            rfturn bttbdiImpl(usfr, lvmid, PERF_MODE_RW);
        }
        flsf {
            tirow nfw IllfgblArgumfntExdfption("unknown modf");
        }
    }

    /**
     * Cbll tif implfmfntbtion spfdifid bttbdi mftiod.
     * <p>
     * Tiis mftiod dblls into tif Jbvb virtubl mbdiinf to pfrform tif plbtform
     * spfdifid bttbdi mftiod. Bufffrs rfturnfd from tiis mftiod brf
     * intfrnblly mbnbgfd bs <dodf>PibntomRfffrfdfs</dodf> to providf for
     * gubrbntffd, sfdurf rflfbsf of tif nbtivf rfsourdfs.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining tif
     *                           nbmf of tif usfr tibt owns tif tbrgft Jbvb
     *                           virtubl mbdiinf.
     * @pbrbm   lvmid            bn intfgfr tibt uniqufly idfntififs tif
     *                           tbrgft lodbl Jbvb virtubl mbdiinf.
     * @pbrbm   modf             b string indidbting tif bttbdi modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @tirows  IllfgblArgumfntExdfption  Tif lvmid or modf wbs invblid.
     * @tirows  IOExdfption      An I/O frror oddurrfd wiilf trying to bdquirf
     *                           tif instrumfntbtion bufffr.
     * @tirows  OutOfMfmoryError Tif instrumfntbtion bufffr dould not bf mbppfd
     *                           into tif virtubl mbdiinf's bddrfss spbdf.
     */
    privbtf BytfBufffr bttbdiImpl(String usfr, int lvmid, int modf)
            tirows IllfgblArgumfntExdfption, IOExdfption
    {
        finbl BytfBufffr b = bttbdi(usfr, lvmid, modf);

        if (lvmid == 0) {
            // Tif nbtivf instrumfntbtion bufffr for tiis Jbvb virtubl
            // mbdiinf is nfvfr unmbppfd.
            rfturn b;
        }
        flsf {
            // Tiis is bn instrumfntbtion bufffr for bnotifr Jbvb virtubl
            // mbdiinf witi nbtivf rfsourdfs tibt nffd to bf mbnbgfd. Wf
            // drfbtf b duplidbtf of tif nbtivf BytfBufffr bnd mbnbgf it
            // witi b Clfbnfr objfdt (PibntomRfffrfndf). Wifn tif duplidbtf
            // bfdomfs only pibntomly rfbdibblf, tif nbtivf rfsourdfs will
            // bf rflfbsfd.

            finbl BytfBufffr dup = b.duplidbtf();
            Clfbnfr.drfbtf(dup, nfw Runnbblf() {
                    publid void run() {
                        try {
                            instbndf.dftbdi(b);
                        }
                        dbtdi (Tirowbblf ti) {
                            // bvoid drbsiing tif rfffrfndf ibndlfr tirfbd,
                            // but providf for somf dibgnosbbility
                            bssfrt fblsf : ti.toString();
                        }
                    }
                });
            rfturn dup;
        }
    }

    /**
     * Nbtivf mftiod to pfrform tif implfmfntbtion spfdifid bttbdi mfdibnism.
     * <p>
     * Tif implfmfntbtion of tiis mftiod mby rfturn distindt or idfntidbl
     * <dodf>BytfBufffr</dodf> objfdts for two distindt dblls rfqufsting
     * bttbdimfnt to tif sbmf Jbvb virtubl mbdiinf.
     * <p>
     * For tif Sun HotSpot JVM, two distindt dblls to bttbdi to tif sbmf
     * tbrgft Jbvb virtubl mbdiinf will rfsult in two distindt BytfBufffr
     * objfdts rfturnfd by tiis mftiod. Tiis mby dibngf in b futurf rflfbsf.
     *
     * @pbrbm   usfr             A <dodf>String</dodf> objfdt dontbining tif
     *                           nbmf of tif usfr tibt owns tif tbrgft Jbvb
     *                           virtubl mbdiinf.
     * @pbrbm   lvmid            bn intfgfr tibt uniqufly idfntififs tif
     *                           tbrgft lodbl Jbvb virtubl mbdiinf.
     * @pbrbm   modf             b string indidbting tif bttbdi modf.
     * @rfturn  BytfBufffr       b dirfdt bllodbtfd bytf bufffr
     * @tirows  IllfgblArgumfntExdfption  Tif lvmid or modf wbs invblid.
     * @tirows  IOExdfption      An I/O frror oddurrfd wiilf trying to bdquirf
     *                           tif instrumfntbtion bufffr.
     * @tirows  OutOfMfmoryError Tif instrumfntbtion bufffr dould not bf mbppfd
     *                           into tif virtubl mbdiinf's bddrfss spbdf.
     */
    privbtf nbtivf BytfBufffr bttbdi(String usfr, int lvmid, int modf)
                   tirows IllfgblArgumfntExdfption, IOExdfption;

    /**
     * Nbtivf mftiod to pfrform tif implfmfntbtion spfdifid dftbdi mfdibnism.
     * <p>
     * If tiis mftiod is pbssfd b <dodf>BytfBufffr</dodf> objfdt tibt is
     * not drfbtfd by tif <dodf>bttbdi</dodf> mftiod, tifn tif rfsults of
     * tiis mftiod brf undffinfd, witi unprfdidtbblf bnd potfntiblly dbmbging
     * ffffdts to tif Jbvb virtubl mbdiinf. To prfvfnt bddidfntbl or mblidious
     * usf of tiis mftiod, bll nbtivf BytfBufffr drfbtfd by tif <dodf>
     * bttbdi</dodf> mftiod brf mbnbgfd intfrnblly bs PibntomRfffrfndfs
     * bnd rfsourdfs brf frffd by tif systfm.
     * <p>
     * If tiis mftiod is pbssfd b <dodf>BytfBufffr</dodf> objfdt drfbtfd
     * by tif <dodf>bttbdi</dodf> mftiod witi b lvmid for tif Jbvb virtubl
     * mbdiinf running tiis mftiod (lvmid=0, for fxbmplf), tifn tif dftbdi
     * rfqufst is silfntly ignorfd.
     *
     * @pbrbm BytfBufffr  A dirfdt bllodbtfd bytf bufffr drfbtfd by tif
     *                    <dodf>bttbdi</dodf> mftiod.
     * @sff   jbvb.nio.BytfBufffr
     * @sff   #bttbdi
     */
    privbtf nbtivf void dftbdi(BytfBufffr bb);

    /**
     * Crfbtf b <dodf>long</dodf> sdblbr fntry in tif instrumfntbtion bufffr
     * witi tif givfn vbribbility dibrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Addfss to tif instrumfnt is providfd tirougi tif rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt. Typidblly, tiis objfdt siould bf wrbppfd
     * witi <dodf>LongBufffr</dodf> vifw objfdt.
     *
     * @pbrbm   vbribbility tif vbribbility dibrbdtfristid for tiis fntry.
     * @pbrbm   units       tif units for tiis fntry.
     * @pbrbm   nbmf        tif nbmf of tiis fntry.
     * @pbrbm   vbluf       tif initibl vbluf for tiis fntry.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr objfdt tibt
     *                      bllows writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid nbtivf BytfBufffr drfbtfLong(String nbmf, int vbribbility,
                                        int units, long vbluf);

    /**
     * Crfbtf b <dodf>String</dodf> fntry in tif instrumfntbtion bufffr witi
     * tif givfn vbribbility dibrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Tif mbximum lfngti of tif <dodf>String</dodf> storfd in tiis string
     * instrumfnt is givfn in by <dodf>mbxLfngti</dodf> pbrbmftfr. Updbtfs
     * to tiis instrumfnt witi <dodf>String</dodf> vblufs witi lfngtis grfbtfr
     * tibn <dodf>mbxLfngti</dodf> will bf trundbtfd to <dodf>mbxLfngti</dodf>.
     * Tif trundbtfd vbluf will bf tfrminbtfd by b null dibrbdtfr.
     * <p>
     * Tif undfrlying implfmfntbtion mby furtifr limit tif lfngti of tif
     * vbluf, but will dontinuf to prfsfrvf tif null tfrminbtor.
     * <p>
     * Addfss to tif instrumfnt is providfd tirougi tif rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility tif vbribbility dibrbdtfristid for tiis fntry.
     * @pbrbm   units       tif units for tiis fntry.
     * @pbrbm   nbmf        tif nbmf of tiis fntry.
     * @pbrbm   vbluf       tif initibl vbluf for tiis fntry.
     * @pbrbm   mbxLfngti   tif mbximum string lfngti for tiis string
     *                      instrumfnt.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr tibt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid BytfBufffr drfbtfString(String nbmf, int vbribbility,
                                   int units, String vbluf, int mbxLfngti)
    {
        bytf[] v = gftBytfs(vbluf);
        bytf[] v1 = nfw bytf[v.lfngti+1];
        Systfm.brrbydopy(v, 0, v1, 0, v.lfngti);
        v1[v.lfngti] = '\0';
        rfturn drfbtfBytfArrby(nbmf, vbribbility, units, v1, Mbti.mbx(v1.lfngti, mbxLfngti));
    }

    /**
     * Crfbtf b <dodf>String</dodf> fntry in tif instrumfntbtion bufffr witi
     * tif givfn vbribbility dibrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Tif mbximum lfngti of tif <dodf>String</dodf> storfd in tiis string
     * instrumfnt is implifd by tif lfngti of tif <dodf>vbluf</dodf> pbrbmftfr.
     * Subsfqufnt updbtfs to tif vbluf of tiis instrumfnt will bf trundbtfd
     * to tiis implifd mbximum lfngti. Tif trundbtfd vbluf will bf tfrminbtfd
     * by b null dibrbdtfr.
     * <p>
     * Tif undfrlying implfmfntbtion mby furtifr limit tif lfngti of tif
     * initibl or subsfqufnt vbluf, but will dontinuf to prfsfrvf tif null
     * tfrminbtor.
     * <p>
     * Addfss to tif instrumfnt is providfd tirougi tif rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility tif vbribbility dibrbdtfristid for tiis fntry.
     * @pbrbm   units       tif units for tiis fntry.
     * @pbrbm   nbmf        tif nbmf of tiis fntry.
     * @pbrbm   vbluf       tif initibl vbluf for tiis fntry.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd BytfBufffr tibt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid BytfBufffr drfbtfString(String nbmf, int vbribbility,
                                   int units, String vbluf)
    {
        bytf[] v = gftBytfs(vbluf);
        bytf[] v1 = nfw bytf[v.lfngti+1];
        Systfm.brrbydopy(v, 0, v1, 0, v.lfngti);
        v1[v.lfngti] = '\0';
        rfturn drfbtfBytfArrby(nbmf, vbribbility, units, v1, v1.lfngti);
    }

    /**
     * Crfbtf b <dodf>bytf</dodf> vfdtor fntry in tif instrumfntbtion bufffr
     * witi tif givfn vbribbility dibrbdtfristid, units, bnd initibl vbluf.
     * <p>
     * Tif <dodf>mbxLfngti</dodf> pbrbmftfr limits tif sizf of tif bytf
     * brrby instrumfnt sudi tibt tif initibl or subsfqufnt updbtfs bfyond
     * tiis lfngti brf silfntly ignorfd. No spfdibl ibndling of trundbtfd
     * updbtfs is providfd.
     * <p>
     * Tif undfrlying implfmfntbtion mby furtifr limit tif lfngti of tif
     * lfngti of tif initibl or subsfqufnt vbluf.
     * <p>
     * Addfss to tif instrumfnt is providfd tirougi tif rfturnfd <dodf>
     * BytfBufffr</dodf> objfdt.
     *
     * @pbrbm   vbribbility tif vbribbility dibrbdtfristid for tiis fntry.
     * @pbrbm   units       tif units for tiis fntry.
     * @pbrbm   nbmf        tif nbmf of tiis fntry.
     * @pbrbm   vbluf       tif initibl vbluf for tiis fntry.
     * @pbrbm   mbxLfngti   tif mbximum lfngti of tiis bytf brrby.
     * @rfturn  BytfBufffr  b dirfdt bllodbtfd bytf bufffr tibt bllows
     *                      writf bddfss to b nbtivf mfmory lodbtion
     *                      dontbining b <dodf>long</dodf> vbluf.
     *
     * sff sun.misd.pfrf.Vbribbility
     * sff sun.misd.pfrf.Units
     * @sff jbvb.nio.BytfBufffr
     */
    publid nbtivf BytfBufffr drfbtfBytfArrby(String nbmf, int vbribbility,
                                             int units, bytf[] vbluf,
                                             int mbxLfngti);


    /**
     * donvfrt string to bn brrby of UTF-8 bytfs
     */
    privbtf stbtid bytf[] gftBytfs(String s)
    {
        bytf[] bytfs = null;

        try {
            bytfs = s.gftBytfs("UTF-8");
        }
        dbtdi (UnsupportfdEndodingExdfption f) {
            // ignorf, UTF-8 fndoding is blwbys known
        }

        rfturn bytfs;
    }

    /**
     * Rfturn tif vbluf of tif Higi Rfsolution Countfr.
     *
     * Tif Higi Rfsolution Countfr rfturns tif numbfr of tidks sindf
     * sindf tif stbrt of tif Jbvb virtubl mbdiinf. Tif rfsolution of
     * tif dountfr is mbdiinf dfpfndfnt bnd dbn bf dftfrminfd from tif
     * vbluf rfturn by tif {@link #iigiRfsFrfqufndy} mftiod.
     *
     * @rfturn  tif numbfr of tidks of mbdiinf dfpfndfnt rfsolution sindf
     *          tif stbrt of tif Jbvb virtubl mbdiinf.
     *
     * @sff #iigiRfsFrfqufndy
     * @sff jbvb.lbng.Systfm#durrfntTimfMillis()
     */
    publid nbtivf long iigiRfsCountfr();

    /**
     * Rfturns tif frfqufndy of tif Higi Rfsolution Countfr, in tidks pfr
     * sfdond.
     *
     * Tiis vbluf dbn bf usfd to donvfrt tif vbluf of tif Higi Rfsolution
     * Countfr, bs rfturnfd from b dbll to tif {@link #iigiRfsCountfr} mftiod,
     * into tif numbfr of sfdonds sindf tif stbrt of tif Jbvb virtubl mbdiinf.
     *
     * @rfturn  tif frfqufndy of tif Higi Rfsolution Countfr.
     * @sff #iigiRfsCountfr
     */
    publid nbtivf long iigiRfsFrfqufndy();

    privbtf stbtid nbtivf void rfgistfrNbtivfs();

    stbtid {
        rfgistfrNbtivfs();
        instbndf = nfw Pfrf();
    }
}
