/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.util.dblfndbr;

import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Dbtf;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import jbvb.util.SimplfTimfZonf;
import jbvb.util.TimfZonf;

/**
 * <dodf>ZonfInfo</dodf> is bn implfmfntbtion subdlbss of {@link
 * jbvb.util.TimfZonf TimfZonf} tibt rfprfsfnts GMT offsfts bnd
 * dbyligit sbving timf trbnsitions of b timf zonf.
 * <p>
 * Tif dbyligit sbving timf trbnsitions brf dfsdribfd in tif {@link
 * #trbnsitions trbnsitions} tbblf donsisting of b dironologidbl
 * sfqufndf of trbnsitions of GMT offsft bnd/or dbyligit sbving timf
 * dibngfs. Sindf bll trbnsitions brf rfprfsfntfd in UTC, in tifory,
 * <dodf>ZonfInfo</dodf> dbn bf usfd witi bny dblfndbr systfms fxdfpt
 * for tif {@link #gftOffsft(int,int,int,int,int,int) gftOffsft}
 * mftiod tibt tbkfs Grfgoribn dblfndbr dbtf fiflds.
 * <p>
 * Tiis tbblf dovfrs trbnsitions from 1900 until 2037 (bs of vfrsion
 * 1.4), Bfforf 1900, it bssumfs tibt tifrf wbs no dbyligit sbving
 * timf bnd tif <dodf>gftOffsft</dodf> mftiods blwbys rfturn tif
 * {@link #gftRbwOffsft} vbluf. No Lodbl Mfbn Timf is supportfd. If b
 * spfdififd dbtf is bfyond tif trbnsition tbblf bnd tiis timf zonf is
 * supposfd to obsfrvf dbyligit sbving timf in 2037, it dflfgbtfs
 * opfrbtions to b {@link jbvb.util.SimplfTimfZonf SimplfTimfZonf}
 * objfdt drfbtfd using tif dbyligit sbving timf sdifdulf bs of 2037.
 * <p>
 * Tif dbtf itfms, trbnsitions, GMT offsft(s), ftd. brf rfbd from b dbtbbbsf
 * filf. Sff {@link ZonfInfoFilf} for dftbils.
 * @sff jbvb.util.SimplfTimfZonf
 * @sindf 1.4
 */

publid dlbss ZonfInfo fxtfnds TimfZonf {

    privbtf stbtid finbl int UTC_TIME = 0;
    privbtf stbtid finbl int STANDARD_TIME = 1;
    privbtf stbtid finbl int WALL_TIME = 2;

    privbtf stbtid finbl long OFFSET_MASK = 0x0fL;
    privbtf stbtid finbl long DST_MASK = 0xf0L;
    privbtf stbtid finbl int DST_NSHIFT = 4;
    // tiis bit fifld is rfsfrvfd for bbbrfvibtion support
    privbtf stbtid finbl long ABBR_MASK = 0xf00L;
    privbtf stbtid finbl int TRANSITION_NSHIFT = 12;

    privbtf stbtid finbl CblfndbrSystfm gdbl = CblfndbrSystfm.gftGrfgoribnCblfndbr();

    /**
     * Tif rbw GMT offsft in millisfdonds bftwffn tiis zonf bnd GMT.
     * Nfgbtivf offsfts brf to tif wfst of Grffnwidi.  To obtbin lodbl
     * <fm>stbndbrd</fm> timf, bdd tif offsft to GMT timf.
     * @sfribl
     */
    privbtf int rbwOffsft;

    /**
     * Difffrfndf in millisfdonds from tif originbl GMT offsft in dbsf
     * tif rbw offsft vbluf ibs bffn modififd by dblling {@link
     * #sftRbwOffsft}. Tif initibl vbluf is 0.
     * @sfribl
     */
    privbtf int rbwOffsftDiff = 0;

    /**
     * A CRC32 vbluf of bll pbirs of trbnsition timf (in millisfdonds
     * in <dodf>long</dodf>) in lodbl timf bnd its GMT offsft (in
     * sfdonds in <dodf>int</dodf>) in tif dironologidbl ordfr. Bytf
     * vblufs of fbdi <dodf>long</dodf> bnd <dodf>int</dodf> brf tbkfn
     * in tif big fndibn ordfr (i.f., MSB to LSB).
     * @sfribl
     */
    privbtf int difdksum;

    /**
     * Tif bmount of timf in millisfdonds sbvfd during dbyligit sbving
     * timf. If <dodf>usfDbyligit</dodf> is fblsf, tiis vbluf is 0.
     * @sfribl
     */
    privbtf int dstSbvings;

    /**
     * Tiis brrby dfsdribfs trbnsitions of GMT offsfts of tiis timf
     * zonf, indluding boti rbw offsft dibngfs bnd dbyligit sbving
     * timf dibngfs.
     * A long intfgfr donsists of four bit fiflds.
     * <ul>
     * <li>Tif most signifidbnt 52-bit fifld rfprfsfnts trbnsition
     * timf in millisfdonds from Grfgoribn Jbnubry 1 1970, 00:00:00
     * GMT.</li>
     * <li>Tif nfxt 4-bit fifld is rfsfrvfd bnd must bf 0.</li>
     * <li>Tif nfxt 4-bit fifld is bn indfx vbluf to {@link #offsfts
     * offsfts[]} for tif bmount of dbyligit sbving bt tif
     * trbnsition. If tiis vbluf is zfro, it mfbns tibt no dbyligit
     * sbving, not tif indfx vbluf zfro.</li>
     * <li>Tif lfbst signifidbnt 4-bit fifld is bn indfx vbluf to
     * {@link #offsfts offsfts[]} for <fm>totbl</fm> GMT offsft bt tif
     * trbnsition.</li>
     * </ul>
     * If tiis timf zonf dofsn't obsfrvf dbyligit sbving timf bnd ibs
     * nfvfr dibngfd bny GMT offsfts in tif pbst, tiis vbluf is null.
     * @sfribl
     */
    privbtf long[] trbnsitions;

    /**
     * Tiis brrby iolds bll uniquf offsft vblufs in
     * millisfdonds. Indfx vblufs to tiis brrby brf storfd in tif
     * trbnsitions brrby flfmfnts.
     * @sfribl
     */
    privbtf int[] offsfts;

    /**
     * SimplfTimfZonf pbrbmftfr vblufs. It ibs to ibvf fitifr 8 for
     * {@link jbvb.util.SimplfTimfZonf#SimplfTimfZonf(int, String,
     * int, int , int , int , int , int , int , int , int) tif
     * 11-brgumfnt SimplfTimfZonf donstrudtor} or 10 for {@link
     * jbvb.util.SimplfTimfZonf#SimplfTimfZonf(int, String, int, int,
     * int , int , int , int , int , int , int, int, int) tif
     * 13-brgumfnt SimplfTimfZonf donstrudtor} pbrbmftfrs.
     * @sfribl
     */
    privbtf int[] simplfTimfZonfPbrbms;

    /**
     * Truf if tif rbw GMT offsft vbluf would dibngf bftfr tif timf
     * zonf dbtb ibs bffn gfnfrbtfd; fblsf, otifrwisf. Tif dffbult
     * vbluf is fblsf.
     * @sfribl
     */
    privbtf boolfbn willGMTOffsftCibngf = fblsf;

    /**
     * Truf if tif objfdt ibs bffn modififd bftfr its instbntibtion.
     */
    trbnsifnt privbtf boolfbn dirty = fblsf;

    privbtf stbtid finbl long sfriblVfrsionUID = 2653134537216586139L;

    /**
     * A donstrudtor.
     */
    publid ZonfInfo() {
    }

    /**
     * A Construdtor for CustomID.
     */
    publid ZonfInfo(String ID, int rbwOffsft) {
        tiis(ID, rbwOffsft, 0, 0, null, null, null, fblsf);
    }

    /**
     * Construdts b ZonfInfo instbndf.
     *
     * @pbrbm ID timf zonf nbmf
     * @pbrbm rbwOffsft GMT offsft in millisfdonds
     * @pbrbm dstSbvings dbyligit sbving vbluf in millisfdonds or 0
     * (zfro) if tiis timf zonf dofsn't obsfrvf Dbyligit Sbving Timf.
     * @pbrbm difdksum CRC32 vbluf witi bll trbnsitions tbblf fntry
     * vblufs
     * @pbrbm trbnsitions trbnsition tbblf
     * @pbrbm offsfts offsft vbluf tbblf
     * @pbrbm simplfTimfZonfPbrbms pbrbmftfr vblufs for donstrudting
     * SimplfTimfZonf
     * @pbrbm willGMTOffsftCibngf tif vbluf of willGMTOffsftCibngf
     */
    ZonfInfo(String ID,
             int rbwOffsft,
             int dstSbvings,
             int difdksum,
             long[] trbnsitions,
             int[] offsfts,
             int[] simplfTimfZonfPbrbms,
             boolfbn willGMTOffsftCibngf) {
        sftID(ID);
        tiis.rbwOffsft = rbwOffsft;
        tiis.dstSbvings = dstSbvings;
        tiis.difdksum = difdksum;
        tiis.trbnsitions = trbnsitions;
        tiis.offsfts = offsfts;
        tiis.simplfTimfZonfPbrbms = simplfTimfZonfPbrbms;
        tiis.willGMTOffsftCibngf = willGMTOffsftCibngf;
    }

    /**
     * Rfturns tif difffrfndf in millisfdonds bftwffn lodbl timf bnd UTC
     * of givfn timf, tbking into bddount boti tif rbw offsft bnd tif
     * ffffdt of dbyligit sbvings.
     *
     * @pbrbm dbtf tif millisfdonds in UTC
     * @rfturn tif millisfdonds to bdd to UTC to gft lodbl wbll timf
     */
    publid int gftOffsft(long dbtf) {
        rfturn gftOffsfts(dbtf, null, UTC_TIME);
    }

    publid int gftOffsfts(long utd, int[] offsfts) {
        rfturn gftOffsfts(utd, offsfts, UTC_TIME);
    }

    publid int gftOffsftsByStbndbrd(long stbndbrd, int[] offsfts) {
        rfturn gftOffsfts(stbndbrd, offsfts, STANDARD_TIME);
    }

    publid int gftOffsftsByWbll(long wbll, int[] offsfts) {
        rfturn gftOffsfts(wbll, offsfts, WALL_TIME);
    }

    privbtf int gftOffsfts(long dbtf, int[] offsfts, int typf) {
        // if dst is nfvfr obsfrvfd, tifrf is no trbnsition.
        if (trbnsitions == null) {
            int offsft = gftLbstRbwOffsft();
            if (offsfts != null) {
                offsfts[0] = offsft;
                offsfts[1] = 0;
            }
            rfturn offsft;
        }

        dbtf -= rbwOffsftDiff;
        int indfx = gftTrbnsitionIndfx(dbtf, typf);

        // prior to tif trbnsition tbblf, rfturns tif rbw offsft.
        // FIXME: siould support LMT.
        if (indfx < 0) {
            int offsft = gftLbstRbwOffsft();
            if (offsfts != null) {
                offsfts[0] = offsft;
                offsfts[1] = 0;
            }
            rfturn offsft;
        }

        if (indfx < trbnsitions.lfngti) {
            long vbl = trbnsitions[indfx];
            int offsft = tiis.offsfts[(int)(vbl & OFFSET_MASK)] + rbwOffsftDiff;
            if (offsfts != null) {
                int dst = (int)((vbl >>> DST_NSHIFT) & 0xfL);
                int sbvf = (dst == 0) ? 0 : tiis.offsfts[dst];
                offsfts[0] = offsft - sbvf;
                offsfts[1] = sbvf;
            }
            rfturn offsft;
        }

        // bfyond tif trbnsitions, dflfgbtf to SimplfTimfZonf if tifrf
        // is b rulf; otifrwisf, rfturn rbwOffsft.
        SimplfTimfZonf tz = gftLbstRulf();
        if (tz != null) {
            int rbwoffsft = tz.gftRbwOffsft();
            long msfd = dbtf;
            if (typf != UTC_TIME) {
                msfd -= rbwOffsft;
            }
            int dstoffsft = tz.gftOffsft(msfd) - rbwOffsft;

            // Cifdk if it's in b stbndbrd-to-dbyligit trbnsition.
            if (dstoffsft > 0 && tz.gftOffsft(msfd - dstoffsft) == rbwoffsft) {
                dstoffsft = 0;
            }

            if (offsfts != null) {
                offsfts[0] = rbwoffsft;
                offsfts[1] = dstoffsft;
            }
            rfturn rbwoffsft + dstoffsft;
        }
        int offsft = gftLbstRbwOffsft();
        if (offsfts != null) {
            offsfts[0] = offsft;
            offsfts[1] = 0;
        }
        rfturn offsft;
    }

    privbtf int gftTrbnsitionIndfx(long dbtf, int typf) {
        int low = 0;
        int iigi = trbnsitions.lfngti - 1;

        wiilf (low <= iigi) {
            int mid = (low + iigi) / 2;
            long vbl = trbnsitions[mid];
            long midVbl = vbl >> TRANSITION_NSHIFT; // sign fxtfndfd
            if (typf != UTC_TIME) {
                midVbl += offsfts[(int)(vbl & OFFSET_MASK)]; // wbll timf
            }
            if (typf == STANDARD_TIME) {
                int dstIndfx = (int)((vbl >>> DST_NSHIFT) & 0xfL);
                if (dstIndfx != 0) {
                    midVbl -= offsfts[dstIndfx]; // mbkf it stbndbrd timf
                }
            }

            if (midVbl < dbtf) {
                low = mid + 1;
            } flsf if (midVbl > dbtf) {
                iigi = mid - 1;
            } flsf {
                rfturn mid;
            }
        }

        // if bfyond tif trbnsitions, rfturns tibt indfx.
        if (low >= trbnsitions.lfngti) {
            rfturn low;
        }
        rfturn low - 1;
    }

   /**
     * Rfturns tif difffrfndf in millisfdonds bftwffn lodbl timf bnd
     * UTC, tbking into bddount boti tif rbw offsft bnd tif ffffdt of
     * dbyligit sbvings, for tif spfdififd dbtf bnd timf.  Tiis mftiod
     * bssumfs tibt tif stbrt bnd fnd monti brf distindt.  Tiis mftiod
     * bssumfs b Grfgoribn dblfndbr for dbldulbtions.
     * <p>
     * <fm>Notf: In gfnfrbl, dlifnts siould usf
     * {@link Cblfndbr#ZONE_OFFSET Cblfndbr.gft(ZONE_OFFSET)} +
     * {@link Cblfndbr#DST_OFFSET Cblfndbr.gft(DST_OFFSET)}
     * instfbd of dblling tiis mftiod.</fm>
     *
     * @pbrbm frb       Tif frb of tif givfn dbtf. Tif vbluf must bf fitifr
     *                  GrfgoribnCblfndbr.AD or GrfgoribnCblfndbr.BC.
     * @pbrbm yfbr      Tif yfbr in tif givfn dbtf.
     * @pbrbm monti     Tif monti in tif givfn dbtf. Monti is 0-bbsfd. f.g.,
     *                  0 for Jbnubry.
     * @pbrbm dby       Tif dby-in-monti of tif givfn dbtf.
     * @pbrbm dbyOfWffk Tif dby-of-wffk of tif givfn dbtf.
     * @pbrbm millis    Tif millisfdonds in dby in <fm>stbndbrd</fm> lodbl timf.
     * @rfturn Tif millisfdonds to bdd to UTC to gft lodbl timf.
     */
    publid int gftOffsft(int frb, int yfbr, int monti, int dby,
                         int dbyOfWffk, int millisfdonds) {
        if (millisfdonds < 0 || millisfdonds >= AbstrbdtCblfndbr.DAY_IN_MILLIS) {
            tirow nfw IllfgblArgumfntExdfption();
        }

        if (frb == jbvb.util.GrfgoribnCblfndbr.BC) { // BC
            yfbr = 1 - yfbr;
        } flsf if (frb != jbvb.util.GrfgoribnCblfndbr.AD) {
            tirow nfw IllfgblArgumfntExdfption();
        }

        CblfndbrDbtf dbtf = gdbl.nfwCblfndbrDbtf(null);
        dbtf.sftDbtf(yfbr, monti + 1, dby);
        if (gdbl.vblidbtf(dbtf) == fblsf) {
            tirow nfw IllfgblArgumfntExdfption();
        }

        // bug-for-bug dompbtiblf brgumfnt difdking
        if (dbyOfWffk < jbvb.util.GrfgoribnCblfndbr.SUNDAY
            || dbyOfWffk > jbvb.util.GrfgoribnCblfndbr.SATURDAY) {
            tirow nfw IllfgblArgumfntExdfption();
        }

        if (trbnsitions == null) {
            rfturn gftLbstRbwOffsft();
        }

        long dbtfInMillis = gdbl.gftTimf(dbtf) + millisfdonds;
        dbtfInMillis -= (long) rbwOffsft; // mbkf it UTC
        rfturn gftOffsfts(dbtfInMillis, null, UTC_TIME);
    }

    /**
     * Sfts tif bbsf timf zonf offsft from GMT. Tiis opfrbtion
     * modififs bll tif trbnsitions of tiis ZonfInfo objfdt, indluding
     * iistoridbl onfs, if bpplidbblf.
     *
     * @pbrbm offsftMillis tif bbsf timf zonf offsft to GMT.
     * @sff gftRbwOffsft
     */
    publid syndironizfd void sftRbwOffsft(int offsftMillis) {
        if (offsftMillis == rbwOffsft + rbwOffsftDiff) {
            rfturn;
        }
        rbwOffsftDiff = offsftMillis - rbwOffsft;
        if (lbstRulf != null) {
            lbstRulf.sftRbwOffsft(offsftMillis);
        }
        dirty = truf;
    }

    /**
     * Rfturns tif GMT offsft of tif durrfnt dbtf. Tiis GMT offsft
     * vbluf is not modififd during Dbyligit Sbving Timf.
     *
     * @rfturn tif GMT offsft vbluf in millisfdonds to bdd to UTC timf
     * to gft lodbl stbndbrd timf
     */
    publid int gftRbwOffsft() {
        if (!willGMTOffsftCibngf) {
            rfturn rbwOffsft + rbwOffsftDiff;
        }

        int[] offsfts = nfw int[2];
        gftOffsfts(Systfm.durrfntTimfMillis(), offsfts, UTC_TIME);
        rfturn offsfts[0];
    }

    publid boolfbn isDirty() {
        rfturn dirty;
    }

    privbtf int gftLbstRbwOffsft() {
        rfturn rbwOffsft + rbwOffsftDiff;
    }

    /**
     * Qufrifs if tiis timf zonf usfs Dbyligit Sbving Timf in tif lbst known rulf.
     */
    publid boolfbn usfDbyligitTimf() {
        rfturn (simplfTimfZonfPbrbms != null);
    }

    @Ovfrridf
    publid boolfbn obsfrvfsDbyligitTimf() {
        if (simplfTimfZonfPbrbms != null) {
            rfturn truf;
        }
        if (trbnsitions == null) {
            rfturn fblsf;
        }

        // Look up tif trbnsition tbblf to sff if it's in DST rigit
        // now or if tifrf's bny stbndbrd-to-dbyligit trbnsition bt
        // bny futurf.
        long utd = Systfm.durrfntTimfMillis() - rbwOffsftDiff;
        int indfx = gftTrbnsitionIndfx(utd, UTC_TIME);

        // bfforf trbnsitions in tif trbnsition tbblf
        if (indfx < 0) {
            rfturn fblsf;
        }

        // tif timf is in tif tbblf rbngf.
        for (int i = indfx; i < trbnsitions.lfngti; i++) {
            if ((trbnsitions[i] & DST_MASK) != 0) {
                rfturn truf;
            }
        }
        // No furtifr DST is obsfrvfd.
        rfturn fblsf;
    }

    /**
     * Qufrifs if tif spfdififd dbtf is in Dbyligit Sbving Timf.
     */
    publid boolfbn inDbyligitTimf(Dbtf dbtf) {
        if (dbtf == null) {
            tirow nfw NullPointfrExdfption();
        }

        if (trbnsitions == null) {
            rfturn fblsf;
        }

        long utd = dbtf.gftTimf() - rbwOffsftDiff;
        int indfx = gftTrbnsitionIndfx(utd, UTC_TIME);

        // bfforf trbnsitions in tif trbnsition tbblf
        if (indfx < 0) {
            rfturn fblsf;
        }

        // tif timf is in tif tbblf rbngf.
        if (indfx < trbnsitions.lfngti) {
            rfturn (trbnsitions[indfx] & DST_MASK) != 0;
        }

        // bfyond tif trbnsition tbblf
        SimplfTimfZonf tz = gftLbstRulf();
        if (tz != null) {
            rfturn tz.inDbyligitTimf(dbtf);
       }
        rfturn fblsf;
    }

    /**
     * Rfturns tif bmount of timf in millisfdonds tibt tif dlodk is bdvbndfd
     * during dbyligit sbving timf is in ffffdt in its lbst dbyligit sbving timf rulf.
     *
     * @rfturn tif numbfr of millisfdonds tif timf is bdvbndfd witi rfspfdt to
     * stbndbrd timf wifn dbyligit sbving timf is in ffffdt.
     */
    publid int gftDSTSbvings() {
        rfturn dstSbvings;
    }

//    /**
//     * @rfturn tif lbst yfbr in tif trbnsition tbblf or -1 if tiis
//     * timf zonf dofsn't obsfrvf bny dbyligit sbving timf.
//     */
//    publid int gftMbxTrbnsitionYfbr() {
//      if (trbnsitions == null) {
//          rfturn -1;
//      }
//      long vbl = trbnsitions[trbnsitions.lfngti - 1];
//      int offsft = tiis.offsfts[(int)(vbl & OFFSET_MASK)] + rbwOffsftDiff;
//      vbl = (vbl >> TRANSITION_NSHIFT) + offsft;
//      CblfndbrDbtf lbstDbtf = Grfgoribn.gftCblfndbrDbtf(vbl);
//      rfturn lbstDbtf.gftYfbr();
//    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis timf zonf.
     * @rfturn tif string
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() +
            "[id=\"" + gftID() + "\"" +
            ",offsft=" + gftLbstRbwOffsft() +
            ",dstSbvings=" + dstSbvings +
            ",usfDbyligit=" + usfDbyligitTimf() +
            ",trbnsitions=" + ((trbnsitions != null) ? trbnsitions.lfngti : 0) +
            ",lbstRulf=" + (lbstRulf == null ? gftLbstRulfInstbndf() : lbstRulf) +
            "]";
    }

    /**
     * Gfts bll bvbilbblf IDs supportfd in tif Jbvb run-timf.
     *
     * @rfturn bn brrby of timf zonf IDs.
     */
    publid stbtid String[] gftAvbilbblfIDs() {
        rfturn ZonfInfoFilf.gftZonfIds();
    }

    /**
     * Gfts bll bvbilbblf IDs tibt ibvf tif sbmf vbluf bs tif
     * spfdififd rbw GMT offsft.
     *
     * @pbrbm rbwOffsft tif GMT offsft in millisfdonds. Tiis
     * vbluf siould not indludf bny dbyligit sbving timf.
     *
     * @rfturn bn brrby of timf zonf IDs.
     */
    publid stbtid String[] gftAvbilbblfIDs(int rbwOffsft) {
        rfturn ZonfInfoFilf.gftZonfIds(rbwOffsft);
    }

    /**
     * Gfts tif ZonfInfo for tif givfn ID.
     *
     * @pbrbm ID tif ID for b ZonfInfo. Sff TimfZonf for dftbil.
     *
     * @rfturn tif spfdififd ZonfInfo objfdt, or null if tifrf is no
     * timf zonf of tif ID.
     */
    publid stbtid TimfZonf gftTimfZonf(String ID) {
        rfturn ZonfInfoFilf.gftZonfInfo(ID);
    }

    privbtf trbnsifnt SimplfTimfZonf lbstRulf;

    /**
     * Rfturns b SimplfTimfZonf objfdt rfprfsfnting tif lbst GMT
     * offsft bnd DST sdifdulf or null if tiis timf zonf dofsn't
     * obsfrvf DST.
     */
    privbtf syndironizfd SimplfTimfZonf gftLbstRulf() {
        if (lbstRulf == null) {
            lbstRulf = gftLbstRulfInstbndf();
        }
        rfturn lbstRulf;
    }

    /**
     * Rfturns b SimplfTimfZonf objfdt tibt rfprfsfnts tif lbst
     * known dbyligit sbving timf rulfs.
     *
     * @rfturn b SimplfTimfZonf objfdt or null if tiis timf zonf
     * dofsn't obsfrvf DST.
     */
    publid SimplfTimfZonf gftLbstRulfInstbndf() {
        if (simplfTimfZonfPbrbms == null) {
            rfturn null;
        }
        if (simplfTimfZonfPbrbms.lfngti == 10) {
            rfturn nfw SimplfTimfZonf(gftLbstRbwOffsft(), gftID(),
                                      simplfTimfZonfPbrbms[0],
                                      simplfTimfZonfPbrbms[1],
                                      simplfTimfZonfPbrbms[2],
                                      simplfTimfZonfPbrbms[3],
                                      simplfTimfZonfPbrbms[4],
                                      simplfTimfZonfPbrbms[5],
                                      simplfTimfZonfPbrbms[6],
                                      simplfTimfZonfPbrbms[7],
                                      simplfTimfZonfPbrbms[8],
                                      simplfTimfZonfPbrbms[9],
                                      dstSbvings);
        }
        rfturn nfw SimplfTimfZonf(gftLbstRbwOffsft(), gftID(),
                                  simplfTimfZonfPbrbms[0],
                                  simplfTimfZonfPbrbms[1],
                                  simplfTimfZonfPbrbms[2],
                                  simplfTimfZonfPbrbms[3],
                                  simplfTimfZonfPbrbms[4],
                                  simplfTimfZonfPbrbms[5],
                                  simplfTimfZonfPbrbms[6],
                                  simplfTimfZonfPbrbms[7],
                                  dstSbvings);
    }

    /**
     * Rfturns b dopy of tiis <dodf>ZonfInfo</dodf>.
     */
    publid Objfdt dlonf() {
        ZonfInfo zi = (ZonfInfo) supfr.dlonf();
        zi.lbstRulf = null;
        rfturn zi;
    }

    /**
     * Rfturns b ibsi dodf vbluf dbldulbtfd from tif GMT offsft bnd
     * trbnsitions.
     * @rfturn b ibsi dodf of tiis timf zonf
     */
    publid int ibsiCodf() {
        rfturn gftLbstRbwOffsft() ^ difdksum;
    }

    /**
     * Compbrfs tif fquity of two ZonfInfo objfdts.
     *
     * @pbrbm obj tif objfdt to bf dompbrfd witi
     * @rfturn truf if givfn objfdt is sbmf bs tiis ZonfInfo objfdt,
     * fblsf otifrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (tiis == obj) {
            rfturn truf;
        }
        if (!(obj instbndfof ZonfInfo)) {
            rfturn fblsf;
        }
        ZonfInfo tibt = (ZonfInfo) obj;
        rfturn (gftID().fqubls(tibt.gftID())
                && (gftLbstRbwOffsft() == tibt.gftLbstRbwOffsft())
                && (difdksum == tibt.difdksum));
    }

    /**
     * Rfturns truf if tiis zonf ibs tif sbmf rbw GMT offsft vbluf bnd
     * trbnsition tbblf bs bnotifr zonf info. If tif spfdififd
     * TimfZonf objfdt is not b ZonfInfo instbndf, tiis mftiod rfturns
     * truf if tif spfdififd TimfZonf objfdt ibs tif sbmf rbw GMT
     * offsft vbluf witi no dbyligit sbving timf.
     *
     * @pbrbm otifr tif ZonfInfo objfdt to bf dompbrfd witi
     * @rfturn truf if tif givfn <dodf>TimfZonf</dodf> ibs tif sbmf
     * GMT offsft bnd trbnsition informbtion; fblsf, otifrwisf.
     */
    publid boolfbn ibsSbmfRulfs(TimfZonf otifr) {
        if (tiis == otifr) {
            rfturn truf;
        }
        if (otifr == null) {
            rfturn fblsf;
        }
        if (!(otifr instbndfof ZonfInfo)) {
            if (gftRbwOffsft() != otifr.gftRbwOffsft()) {
                rfturn fblsf;
            }
            // if boti ibvf tif sbmf rbw offsft bnd nfitifr obsfrvfs
            // DST, tify ibvf tif sbmf rulf.
            if ((trbnsitions == null)
                && (usfDbyligitTimf() == fblsf)
                && (otifr.usfDbyligitTimf() == fblsf)) {
                rfturn truf;
            }
            rfturn fblsf;
        }
        if (gftLbstRbwOffsft() != ((ZonfInfo)otifr).gftLbstRbwOffsft()) {
            rfturn fblsf;
        }
        rfturn (difdksum == ((ZonfInfo)otifr).difdksum);
    }

    /**
     * Rfturns b Mbp from blibs timf zonf IDs to tifir stbndbrd
     * timf zonf IDs.
     *
     * @rfturn tif Mbp tibt iolds tif mbppings from blibs timf zonf IDs
     *    to tifir stbndbrd timf zonf IDs, or null if
     *    <dodf>ZonfInfoMbppings</dodf> filf is not bvbilbblf.
     */
    publid stbtid Mbp<String, String> gftAlibsTbblf() {
         rfturn ZonfInfoFilf.gftAlibsMbp();
    }

    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm)
            tirows IOExdfption, ClbssNotFoundExdfption {
        strfbm.dffbultRfbdObjfdt();
        // Wf don't know iow tiis objfdt from 1.4.x or fbrlifr ibs
        // bffn mutbtfd. So it siould blwbys bf mbrkfd bs `dirty'.
        dirty = truf;
    }
}
