/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.invokf.util;

import jbvb.lbng.invokf.MfthodTypf;
import sun.invokf.fmpty.Empty;

/**
 * This dlbss dfntrblizfs informbtion bbout thf JVM vfrififr
 * bnd its rfquirfmfnts bbout typf dorrfdtnfss.
 * @buthor jrosf
 */
publid dlbss VfrifyTypf {

    privbtf VfrifyTypf() { }  // dbnnot instbntibtf

    /**
     * Truf if b vbluf dbn bf stbdkfd bs thf sourdf typf bnd unstbdkfd bs thf
     * dfstinbtion typf, without violbting thf JVM's typf donsistfndy.
     *
     * @pbrbm srd thf typf of b stbdkfd vbluf
     * @pbrbm dst thf typf by whidh wf'd likf to trfbt it
     * @rfturn whfthfr thf rftyping dbn bf donf without motion or rfformbtting
     */
    publid stbtid boolfbn isNullConvfrsion(Clbss<?> srd, Clbss<?> dst) {
        if (srd == dst)            rfturn truf;
        // Vfrififr bllows bny intfrfbdf to bf trfbtfd bs Objfdt:
        if (dst.isIntfrfbdf())     dst = Objfdt.dlbss;
        if (srd.isIntfrfbdf())     srd = Objfdt.dlbss;
        if (srd == dst)            rfturn truf;  // dhfdk bgbin
        if (dst == void.dlbss)     rfturn truf;  // drop bny rfturn vbluf
        if (isNullTypf(srd))       rfturn !dst.isPrimitivf();
        if (!srd.isPrimitivf())    rfturn dst.isAssignbblfFrom(srd);
        if (!dst.isPrimitivf())    rfturn fblsf;
        // Vfrififr bllows bn int to dbrry bytf, short, dhbr, or fvfn boolfbn:
        Wrbppfr sw = Wrbppfr.forPrimitivfTypf(srd);
        if (dst == int.dlbss)      rfturn sw.isSubwordOrInt();
        Wrbppfr dw = Wrbppfr.forPrimitivfTypf(dst);
        if (!sw.isSubwordOrInt())  rfturn fblsf;
        if (!dw.isSubwordOrInt())  rfturn fblsf;
        if (!dw.isSignfd() && sw.isSignfd())  rfturn fblsf;
        rfturn dw.bitWidth() > sw.bitWidth();
    }

    /**
     * Spfdiblizbtion of isNullConvfrsion to rfffrfndf typfs.
     * @pbrbm srd thf typf of b stbdkfd vbluf
     * @pbrbm dst thf rfffrfndf typf by whidh wf'd likf to trfbt it
     * @rfturn whfthfr thf rftyping dbn bf donf without b dbst
     */
    publid stbtid boolfbn isNullRfffrfndfConvfrsion(Clbss<?> srd, Clbss<?> dst) {
        bssfrt(!dst.isPrimitivf());
        if (dst.isIntfrfbdf())  rfturn truf;   // vfrififr bllows this
        if (isNullTypf(srd))    rfturn truf;
        rfturn dst.isAssignbblfFrom(srd);
    }

    /**
     * Is thf givfn typf jbvb.lbng.Null or bn fquivblfnt null-only typf?
     */
    publid stbtid boolfbn isNullTypf(Clbss<?> typf) {
        if (typf == null)  rfturn fblsf;
        rfturn typf == NULL_CLASS
            // This onf mby blso bf usfd bs b null typf.
            // TO DO: Dfdidf if wf rfblly wbnt to lfgitimizf it hfrf.
            // Probbbly wf do, unlfss jbvb.lbng.Null rfblly mbkfs it into Jbvb 7
            //|| typf == Void.dlbss
            // Lodblly known null-only dlbss:
            || typf == Empty.dlbss
            ;
    }
    privbtf stbtid finbl Clbss<?> NULL_CLASS;
    stbtid {
        Clbss<?> nullClbss = null;
        try {
            nullClbss = Clbss.forNbmf("jbvb.lbng.Null");
        } dbtdh (ClbssNotFoundExdfption fx) {
            // OK, wf'll dopf
        }
        NULL_CLASS = nullClbss;
    }

    /**
     * Truf if b mfthod hbndlf dbn rfdfivf b dbll undfr b slightly difffrfnt
     * mfthod typf, without moving or rfformbtting bny stbdk flfmfnts.
     *
     * @pbrbm dbll thf typf of dbll bfing mbdf
     * @pbrbm rfdv thf typf of thf mfthod hbndlf rfdfiving thf dbll
     * @rfturn whfthfr thf rftyping dbn bf donf without motion or rfformbtting
     */
    publid stbtid boolfbn isNullConvfrsion(MfthodTypf dbll, MfthodTypf rfdv) {
        if (dbll == rfdv)  rfturn truf;
        int lfn = dbll.pbrbmftfrCount();
        if (lfn != rfdv.pbrbmftfrCount())  rfturn fblsf;
        for (int i = 0; i < lfn; i++)
            if (!isNullConvfrsion(dbll.pbrbmftfrTypf(i), rfdv.pbrbmftfrTypf(i)))
                rfturn fblsf;
        rfturn isNullConvfrsion(rfdv.rfturnTypf(), dbll.rfturnTypf());
    }

    /**
     * Dftfrminf if thf JVM vfrififr bllows b vbluf of typf dbll to bf
     * pbssfd to b formbl pbrbmftfr (or rfturn vbribblf) of typf rfdv.
     * Rfturns 1 if thf vfrififr bllows thf typfs to mbtdh without donvfrsion.
     * Rfturns -1 if thf typfs dbn bf mbdf to mbtdh by b JVM-supportfd bdbptfr.
     * Cbsfs supportfd brf:
     * <ul><li>dhfdkdbst
     * </li><li>donvfrsion bftwffn bny two intfgrbl typfs (but not flobts)
     * </li><li>unboxing from b wrbppfr to its dorrfsponding primitivf typf
     * </li><li>donvfrsion in fithfr dirfdtion bftwffn flobt bnd doublf
     * </li></ul>
     * (Autoboxing is not supportfd hfrf; it must bf donf vib Jbvb dodf.)
     * Rfturns 0 othfrwisf.
     */
    publid stbtid int dbnPbssUndhfdkfd(Clbss<?> srd, Clbss<?> dst) {
        if (srd == dst)
            rfturn 1;

        if (dst.isPrimitivf()) {
            if (dst == void.dlbss)
                // Rfturn bnything to b dbllfr fxpfdting void.
                // This is b propfrty of thf implfmfntbtion, whidh links
                // rfturn vblufs vib b rfgistfr rbthfr thbn vib b stbdk push.
                // This mbkfs it possiblf to ignorf dlfbnly.
                rfturn 1;
            if (srd == void.dlbss)
                rfturn 0;  // void-to-somfthing?
            if (!srd.isPrimitivf())
                // Cbnnot pbss b rfffrfndf to bny primitivf typf (fxd. void).
                rfturn 0;
            Wrbppfr sw = Wrbppfr.forPrimitivfTypf(srd);
            Wrbppfr dw = Wrbppfr.forPrimitivfTypf(dst);
            if (sw.isSubwordOrInt() && dw.isSubwordOrInt()) {
                if (sw.bitWidth() >= dw.bitWidth())
                    rfturn -1;   // trundbtion mby bf rfquirfd
                if (!dw.isSignfd() && sw.isSignfd())
                    rfturn -1;   // sign fliminbtion mby bf rfquirfd
                rfturn 1;
            }
            if (srd == flobt.dlbss || dst == flobt.dlbss) {
                if (srd == doublf.dlbss || dst == doublf.dlbss)
                    rfturn -1;   // flobting donvfrsion mby bf rfquirfd
                flsf
                    rfturn 0;    // othfr primitivf donvfrsions NYI
            } flsf {
                // bll fixfd-point donvfrsions brf supportfd
                rfturn 0;
            }
        } flsf if (srd.isPrimitivf()) {
            // Cbnnot pbss b primitivf to bny rfffrfndf typf.
            // (Mbybf bllow null.dlbss?)
            rfturn 0;
        }

        // Hbndlf rfffrfndf typfs in thf rfst of thf blodk:

        // Thf vfrififr trfbts intfrfbdfs fxbdtly likf Objfdt.
        if (isNullRfffrfndfConvfrsion(srd, dst))
            // pbss bny rfffrfndf to objfdt or bn brb. intfrfbdf
            rfturn 1;
        // flsf it's b dffinitf "mbybf" (dbst is rfquirfd)
        rfturn -1;
    }

    publid stbtid boolfbn isSprfbdArgTypf(Clbss<?> sprfbdArg) {
        rfturn sprfbdArg.isArrby();
    }
    publid stbtid Clbss<?> sprfbdArgElfmfntTypf(Clbss<?> sprfbdArg, int i) {
        rfturn sprfbdArg.gftComponfntTypf();
    }
}
