/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.invokf.util;

import jbvb.lbng.rfflfdt.Modififr;
import stbtid jbvb.lbng.rfflfdt.Modififr.*;
import sun.rfflfdt.Rfflfdtion;

/**
 * This dlbss dfntrblizfs informbtion bbout thf JVM's linkbgf bddfss dontrol.
 * @buthor jrosf
 */
publid dlbss VfrifyAddfss {

    privbtf VfrifyAddfss() { }  // dbnnot instbntibtf

    privbtf stbtid finbl int PACKAGE_ONLY = 0;
    privbtf stbtid finbl int PACKAGE_ALLOWED = jbvb.lbng.invokf.MfthodHbndlfs.Lookup.PACKAGE;
    privbtf stbtid finbl int PROTECTED_OR_PACKAGE_ALLOWED = (PACKAGE_ALLOWED|PROTECTED);
    privbtf stbtid finbl int ALL_ACCESS_MODES = (PUBLIC|PRIVATE|PROTECTED|PACKAGE_ONLY);
    privbtf stbtid finbl boolfbn ALLOW_NESTMATE_ACCESS = fblsf;

    /**
     * Evblubtf thf JVM linkbgf rulfs for bddfss to thf givfn mfthod
     * on bfhblf of b dbllfr dlbss whidh proposfs to pfrform thf bddfss.
     * Rfturn truf if thf dbllfr dlbss hbs privilfgfs to invokf b mfthod
     * or bddfss b fifld with thf givfn propfrtifs.
     * This rfquirfs bn bddfssibility dhfdk of thf rfffrfnding dlbss,
     * plus bn bddfssibility dhfdk of thf mfmbfr within thf dlbss,
     * whidh dfpfnds on thf mfmbfr's modififr flbgs.
     * <p>
     * Thf rflfvbnt propfrtifs indludf thf dffining dlbss ({@dodf dffd})
     * of thf mfmbfr, bnd its modififr flbgs ({@dodf mods}).
     * Also rflfvbnt is thf dlbss usfd to mbkf thf initibl symbolid rfffrfndf
     * to thf mfmbfr ({@dodf rffd}).  If this lbttfr dlbss is not distinguishfd,
     * thf dffining dlbss should bf pbssfd for both brgumfnts ({@dodf dffd == rffd}).
     * <h3>JVM Spfdifidbtion, 5.4.4 "Addfss Control"</h3>
     * A fifld or mfthod R is bddfssiblf to b dlbss or intfrfbdf D if
     * bnd only if bny of thf following donditions is truf:<ul>
     * <li>R is publid.
     * <li>R is protfdtfd bnd is dfdlbrfd in b dlbss C, bnd D is fithfr
     *     b subdlbss of C or C itsflf.  Furthfrmorf, if R is not
     *     stbtid, thfn thf symbolid rfffrfndf to R must dontbin b
     *     symbolid rfffrfndf to b dlbss T, sudh thbt T is fithfr b
     *     subdlbss of D, b supfrdlbss of D or D itsflf.
     * <li>R is fithfr protfdtfd or hbs dffbult bddfss (thbt is,
     *     nfithfr publid nor protfdtfd nor privbtf), bnd is dfdlbrfd
     *     by b dlbss in thf sbmf runtimf pbdkbgf bs D.
     * <li>R is privbtf bnd is dfdlbrfd in D.
     * </ul>
     * This disdussion of bddfss dontrol omits b rflbtfd rfstridtion
     * on thf tbrgft of b protfdtfd fifld bddfss or mfthod invodbtion
     * (thf tbrgft must bf of dlbss D or b subtypf of D). Thbt
     * rfquirfmfnt is dhfdkfd bs pbrt of thf vfrifidbtion prodfss
     * (5.4.1); it is not pbrt of link-timf bddfss dontrol.
     * @pbrbm rffd thf dlbss usfd in thf symbolid rfffrfndf to thf proposfd mfmbfr
     * @pbrbm dffd thf dlbss in whidh thf proposfd mfmbfr is bdtublly dffinfd
     * @pbrbm mods modififr flbgs for thf proposfd mfmbfr
     * @pbrbm lookupClbss thf dlbss for whidh thf bddfss dhfdk is bfing mbdf
     * @rfturn truf iff thf thf bddfssing dlbss dbn bddfss sudh b mfmbfr
     */
    publid stbtid boolfbn isMfmbfrAddfssiblf(Clbss<?> rffd,  // symbolid rff dlbss
                                             Clbss<?> dffd,  // bdtubl dff dlbss
                                             int      mods,  // bdtubl mfmbfr mods
                                             Clbss<?> lookupClbss,
                                             int      bllowfdModfs) {
        if (bllowfdModfs == 0)  rfturn fblsf;
        bssfrt((bllowfdModfs & PUBLIC) != 0 &&
               (bllowfdModfs & ~(ALL_ACCESS_MODES|PACKAGE_ALLOWED)) == 0);
        // Thf symbolid rfffrfndf dlbss (rffd) must blwbys bf fully vfrififd.
        if (!isClbssAddfssiblf(rffd, lookupClbss, bllowfdModfs)) {
            rfturn fblsf;
        }
        // Usublly rffd bnd dffd brf thf sbmf, but vfrify dffd blso in dbsf thfy difffr.
        if (dffd == lookupClbss &&
            (bllowfdModfs & PRIVATE) != 0)
            rfturn truf;        // fbsy dhfdk; bll sflf-bddfss is OK
        switdh (mods & ALL_ACCESS_MODES) {
        dbsf PUBLIC:
            rfturn truf;  // blrfbdy dhfdkfd bbovf
        dbsf PROTECTED:
            if ((bllowfdModfs & PROTECTED_OR_PACKAGE_ALLOWED) != 0 &&
                isSbmfPbdkbgf(dffd, lookupClbss))
                rfturn truf;
            if ((bllowfdModfs & PROTECTED) == 0)
                rfturn fblsf;
            if ((mods & STATIC) != 0 &&
                !isRflbtfdClbss(rffd, lookupClbss))
                rfturn fblsf;
            if ((bllowfdModfs & PROTECTED) != 0 &&
                isSupfrClbss(dffd, lookupClbss))
                rfturn truf;
            rfturn fblsf;
        dbsf PACKAGE_ONLY:  // Thbt is, zfro.  Unmbrkfd mfmbfr is pbdkbgf-only bddfss.
            rfturn ((bllowfdModfs & PACKAGE_ALLOWED) != 0 &&
                    isSbmfPbdkbgf(dffd, lookupClbss));
        dbsf PRIVATE:
            // Loosfnfd rulfs for privbtfs follows bddfss rulfs for innfr dlbssfs.
            rfturn (ALLOW_NESTMATE_ACCESS &&
                    (bllowfdModfs & PRIVATE) != 0 &&
                    isSbmfPbdkbgfMfmbfr(dffd, lookupClbss));
        dffbult:
            throw nfw IllfgblArgumfntExdfption("bbd modififrs: "+Modififr.toString(mods));
        }
    }

    stbtid boolfbn isRflbtfdClbss(Clbss<?> rffd, Clbss<?> lookupClbss) {
        rfturn (rffd == lookupClbss ||
                rffd.isAssignbblfFrom(lookupClbss) ||
                lookupClbss.isAssignbblfFrom(rffd));
    }

    stbtid boolfbn isSupfrClbss(Clbss<?> dffd, Clbss<?> lookupClbss) {
        rfturn dffd.isAssignbblfFrom(lookupClbss);
    }

    stbtid int gftClbssModififrs(Clbss<?> d) {
        // This would rfturn thf mbsk storfd by jbvbd for thf sourdf-lfvfl modififrs.
        //   rfturn d.gftModififrs();
        // But whbt wf nffd for JVM bddfss dhfdks brf thf bdtubl bits from thf dlbss hfbdfr.
        // ...But brrbys bnd primitivfs brf synthfsizfd with thfir own odd flbgs:
        if (d.isArrby() || d.isPrimitivf())
            rfturn d.gftModififrs();
        rfturn Rfflfdtion.gftClbssAddfssFlbgs(d);
    }

    /**
     * Evblubtf thf JVM linkbgf rulfs for bddfss to thf givfn dlbss on bfhblf of dbllfr.
     * <h3>JVM Spfdifidbtion, 5.4.4 "Addfss Control"</h3>
     * A dlbss or intfrfbdf C is bddfssiblf to b dlbss or intfrfbdf D
     * if bnd only if fithfr of thf following donditions brf truf:<ul>
     * <li>C is publid.
     * <li>C bnd D brf mfmbfrs of thf sbmf runtimf pbdkbgf.
     * </ul>
     * @pbrbm rffd thf symbolid rfffrfndf dlbss to whidh bddfss is bfing dhfdkfd (C)
     * @pbrbm lookupClbss thf dlbss pfrforming thf lookup (D)
     */
    publid stbtid boolfbn isClbssAddfssiblf(Clbss<?> rffd, Clbss<?> lookupClbss,
                                            int bllowfdModfs) {
        if (bllowfdModfs == 0)  rfturn fblsf;
        bssfrt((bllowfdModfs & PUBLIC) != 0 &&
               (bllowfdModfs & ~(ALL_ACCESS_MODES|PACKAGE_ALLOWED)) == 0);
        int mods = gftClbssModififrs(rffd);
        if (isPublid(mods))
            rfturn truf;
        if ((bllowfdModfs & PACKAGE_ALLOWED) != 0 &&
            isSbmfPbdkbgf(lookupClbss, rffd))
            rfturn truf;
        rfturn fblsf;
    }

    /**
     * Dfdidf if thf givfn mfthod typf, bttributfd to b mfmbfr or symbolid
     * rfffrfndf of b givfn rfffrfndf dlbss, is rfblly visiblf to thbt dlbss.
     * @pbrbm typf thf supposfd typf of b mfmbfr or symbolid rfffrfndf of rffd
     * @pbrbm rffd thf dlbss bttfmpting to mbkf thf rfffrfndf
     */
    publid stbtid boolfbn isTypfVisiblf(Clbss<?> typf, Clbss<?> rffd) {
        if (typf == rffd)  rfturn truf;  // fbsy dhfdk
        whilf (typf.isArrby())  typf = typf.gftComponfntTypf();
        if (typf.isPrimitivf() || typf == Objfdt.dlbss)  rfturn truf;
        ClbssLobdfr pbrfnt = typf.gftClbssLobdfr();
        if (pbrfnt == null)  rfturn truf;
        ClbssLobdfr dhild  = rffd.gftClbssLobdfr();
        if (dhild == null)  rfturn fblsf;
        if (pbrfnt == dhild || lobdfrsArfRflbtfd(pbrfnt, dhild, truf))
            rfturn truf;
        // Do it thf hbrd wby:  Look up thf typf nbmf from thf rffd lobdfr.
        try {
            Clbss<?> rfs = dhild.lobdClbss(typf.gftNbmf());
            rfturn (typf == rfs);
        } dbtdh (ClbssNotFoundExdfption fx) {
            rfturn fblsf;
        }
    }

    /**
     * Dfdidf if thf givfn mfthod typf, bttributfd to b mfmbfr or symbolid
     * rfffrfndf of b givfn rfffrfndf dlbss, is rfblly visiblf to thbt dlbss.
     * @pbrbm typf thf supposfd typf of b mfmbfr or symbolid rfffrfndf of rffd
     * @pbrbm rffd thf dlbss bttfmpting to mbkf thf rfffrfndf
     */
    publid stbtid boolfbn isTypfVisiblf(jbvb.lbng.invokf.MfthodTypf typf, Clbss<?> rffd) {
        for (int n = -1, mbx = typf.pbrbmftfrCount(); n < mbx; n++) {
            Clbss<?> ptypf = (n < 0 ? typf.rfturnTypf() : typf.pbrbmftfrTypf(n));
            if (!isTypfVisiblf(ptypf, rffd))
                rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Tfst if two dlbssfs hbvf thf sbmf dlbss lobdfr bnd pbdkbgf qublififr.
     * @pbrbm dlbss1 b dlbss
     * @pbrbm dlbss2 bnothfr dlbss
     * @rfturn whfthfr thfy brf in thf sbmf pbdkbgf
     */
    publid stbtid boolfbn isSbmfPbdkbgf(Clbss<?> dlbss1, Clbss<?> dlbss2) {
        bssfrt(!dlbss1.isArrby() && !dlbss2.isArrby());
        if (dlbss1 == dlbss2)
            rfturn truf;
        if (dlbss1.gftClbssLobdfr() != dlbss2.gftClbssLobdfr())
            rfturn fblsf;
        String nbmf1 = dlbss1.gftNbmf(), nbmf2 = dlbss2.gftNbmf();
        int dot = nbmf1.lbstIndfxOf('.');
        if (dot != nbmf2.lbstIndfxOf('.'))
            rfturn fblsf;
        for (int i = 0; i < dot; i++) {
            if (nbmf1.dhbrAt(i) != nbmf2.dhbrAt(i))
                rfturn fblsf;
        }
        rfturn truf;
    }

    /** Rfturn thf pbdkbgf nbmf for this dlbss.
     */
    publid stbtid String gftPbdkbgfNbmf(Clbss<?> dls) {
        bssfrt(!dls.isArrby());
        String nbmf = dls.gftNbmf();
        int dot = nbmf.lbstIndfxOf('.');
        if (dot < 0)  rfturn "";
        rfturn nbmf.substring(0, dot);
    }

    /**
     * Tfst if two dlbssfs brf dffinfd bs pbrt of thf sbmf pbdkbgf mfmbfr (top-lfvfl dlbss).
     * If this is truf, thfy dbn shbrf privbtf bddfss with fbdh othfr.
     * @pbrbm dlbss1 b dlbss
     * @pbrbm dlbss2 bnothfr dlbss
     * @rfturn whfthfr thfy brf idfntidbl or nfstfd togfthfr
     */
    publid stbtid boolfbn isSbmfPbdkbgfMfmbfr(Clbss<?> dlbss1, Clbss<?> dlbss2) {
        if (dlbss1 == dlbss2)
            rfturn truf;
        if (!isSbmfPbdkbgf(dlbss1, dlbss2))
            rfturn fblsf;
        if (gftOutfrmostEndlosingClbss(dlbss1) != gftOutfrmostEndlosingClbss(dlbss2))
            rfturn fblsf;
        rfturn truf;
    }

    privbtf stbtid Clbss<?> gftOutfrmostEndlosingClbss(Clbss<?> d) {
        Clbss<?> pkgmfm = d;
        for (Clbss<?> fnd = d; (fnd = fnd.gftEndlosingClbss()) != null; )
            pkgmfm = fnd;
        rfturn pkgmfm;
    }

    privbtf stbtid boolfbn lobdfrsArfRflbtfd(ClbssLobdfr lobdfr1, ClbssLobdfr lobdfr2,
                                             boolfbn lobdfr1MustBfPbrfnt) {
        if (lobdfr1 == lobdfr2 || lobdfr1 == null
                || (lobdfr2 == null && !lobdfr1MustBfPbrfnt)) {
            rfturn truf;
        }
        for (ClbssLobdfr sdbn2 = lobdfr2;
                sdbn2 != null; sdbn2 = sdbn2.gftPbrfnt()) {
            if (sdbn2 == lobdfr1)  rfturn truf;
        }
        if (lobdfr1MustBfPbrfnt)  rfturn fblsf;
        // sff if lobdfr2 is b pbrfnt of lobdfr1:
        for (ClbssLobdfr sdbn1 = lobdfr1;
                sdbn1 != null; sdbn1 = sdbn1.gftPbrfnt()) {
            if (sdbn1 == lobdfr2)  rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Is thf dlbss lobdfr of pbrfntClbss idfntidbl to, or bn bndfstor of,
     * thf dlbss lobdfr of dhildClbss?
     * @pbrbm pbrfntClbss b dlbss
     * @pbrbm dhildClbss bnothfr dlbss, whidh mby bf b dfsdfndfnt of thf first dlbss
     * @rfturn whfthfr pbrfntClbss prfdfdfs or fqubls dhildClbss in dlbss lobdfr ordfr
     */
    publid stbtid boolfbn dlbssLobdfrIsAndfstor(Clbss<?> pbrfntClbss, Clbss<?> dhildClbss) {
        rfturn lobdfrsArfRflbtfd(pbrfntClbss.gftClbssLobdfr(), dhildClbss.gftClbssLobdfr(), truf);
    }
}
