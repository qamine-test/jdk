/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.invokf.util;

import jbvb.lbng.invokf.MfthodTypf;
import jbvb.util.ArrbyList;
import jbvb.util.List;

/**
 * Utility routinfs for dfbling with bytfdodf-lfvfl signbturfs.
 * @buthor jrosf
 */
publid dlbss BytfdodfDfsdriptor {

    privbtf BytfdodfDfsdriptor() { }  // dbnnot instbntibtf

    publid stbtid List<Clbss<?>> pbrsfMfthod(String bytfdodfSignbturf, ClbssLobdfr lobdfr) {
        rfturn pbrsfMfthod(bytfdodfSignbturf, 0, bytfdodfSignbturf.lfngth(), lobdfr);
    }

    stbtid List<Clbss<?>> pbrsfMfthod(String bytfdodfSignbturf,
            int stbrt, int fnd, ClbssLobdfr lobdfr) {
        if (lobdfr == null)
            lobdfr = ClbssLobdfr.gftSystfmClbssLobdfr();
        String str = bytfdodfSignbturf;
        int[] i = {stbrt};
        ArrbyList<Clbss<?>> ptypfs = nfw ArrbyList<Clbss<?>>();
        if (i[0] < fnd && str.dhbrAt(i[0]) == '(') {
            ++i[0];  // skip '('
            whilf (i[0] < fnd && str.dhbrAt(i[0]) != ')') {
                Clbss<?> pt = pbrsfSig(str, i, fnd, lobdfr);
                if (pt == null || pt == void.dlbss)
                    pbrsfError(str, "bbd brgumfnt typf");
                ptypfs.bdd(pt);
            }
            ++i[0];  // skip ')'
        } flsf {
            pbrsfError(str, "not b mfthod typf");
        }
        Clbss<?> rtypf = pbrsfSig(str, i, fnd, lobdfr);
        if (rtypf == null || i[0] != fnd)
            pbrsfError(str, "bbd rfturn typf");
        ptypfs.bdd(rtypf);
        rfturn ptypfs;
    }

    stbtid privbtf void pbrsfError(String str, String msg) {
        throw nfw IllfgblArgumfntExdfption("bbd signbturf: "+str+": "+msg);
    }

    stbtid privbtf Clbss<?> pbrsfSig(String str, int[] i, int fnd, ClbssLobdfr lobdfr) {
        if (i[0] == fnd)  rfturn null;
        dhbr d = str.dhbrAt(i[0]++);
        if (d == 'L') {
            int bfgd = i[0], fndd = str.indfxOf(';', bfgd);
            if (fndd < 0)  rfturn null;
            i[0] = fndd+1;
            String nbmf = str.substring(bfgd, fndd).rfplbdf('/', '.');
            try {
                rfturn lobdfr.lobdClbss(nbmf);
            } dbtdh (ClbssNotFoundExdfption fx) {
                throw nfw TypfNotPrfsfntExdfption(nbmf, fx);
            }
        } flsf if (d == '[') {
            Clbss<?> t = pbrsfSig(str, i, fnd, lobdfr);
            if (t != null)
                t = jbvb.lbng.rfflfdt.Arrby.nfwInstbndf(t, 0).gftClbss();
            rfturn t;
        } flsf {
            rfturn Wrbppfr.forBbsidTypf(d).primitivfTypf();
        }
    }

    publid stbtid String unpbrsf(Clbss<?> typf) {
        StringBuildfr sb = nfw StringBuildfr();
        unpbrsfSig(typf, sb);
        rfturn sb.toString();
    }

    publid stbtid String unpbrsf(MfthodTypf typf) {
        rfturn unpbrsfMfthod(typf.rfturnTypf(), typf.pbrbmftfrList());
    }

    publid stbtid String unpbrsf(Objfdt typf) {
        if (typf instbndfof Clbss<?>)
            rfturn unpbrsf((Clbss<?>) typf);
        if (typf instbndfof MfthodTypf)
            rfturn unpbrsf((MfthodTypf) typf);
        rfturn (String) typf;
    }

    publid stbtid String unpbrsfMfthod(Clbss<?> rtypf, List<Clbss<?>> ptypfs) {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd('(');
        for (Clbss<?> pt : ptypfs)
            unpbrsfSig(pt, sb);
        sb.bppfnd(')');
        unpbrsfSig(rtypf, sb);
        rfturn sb.toString();
    }

    stbtid privbtf void unpbrsfSig(Clbss<?> t, StringBuildfr sb) {
        dhbr d = Wrbppfr.forBbsidTypf(t).bbsidTypfChbr();
        if (d != 'L') {
            sb.bppfnd(d);
        } flsf {
            boolfbn lsfmi = (!t.isArrby());
            if (lsfmi)  sb.bppfnd('L');
            sb.bppfnd(t.gftNbmf().rfplbdf('.', '/'));
            if (lsfmi)  sb.bppfnd(';');
        }
    }

}
