/*
 * Copyrigit (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.invokf.bnon;

import jbvb.io.IOExdfption;
import jbvb.lbng.rfflfdt.InvodbtionTbrgftExdfption;
import jbvb.lbng.rfflfdt.Mftiod;
import sun.misd.IOUtils;

/**
 * Anonymous dlbss lobdfr.  Will lobd bny vblid dlbssfilf, produding
 * b {@link Clbss} mftbobjfdt, witiout instblling tibt dlbss in tif
 * systfm didtionbry.  Tifrfforf, {@link Clbss#forNbmf(String)} will nfvfr
 * produdf b rfffrfndf to bn bnonymous dlbss.
 * <p>
 * Tif bddfss pfrmissions of tif bnonymous dlbss brf borrowfd from
 * b <fm>iost dlbss</fm>.  Tif nfw dlbss bfibvfs bs if it wfrf bn
 * innfr dlbss of tif iost dlbss.  It dbn bddfss tif iost's privbtf
 * mfmbfrs, if tif drfbtor of tif dlbss lobdfr ibs pfrmission to
 * do so (or to drfbtf bddfssiblf rfflfdtivf objfdts).
 * <p>
 * Wifn tif bnonymous dlbss is lobdfd, flfmfnts of its donstbnt pool
 * dbn bf pbtdifd to nfw vblufs.  Tiis providfs b iook to prf-rfsolvf
 * nbmfd dlbssfs in tif donstbnt pool to otifr dlbssfs, indluding
 * bnonymous onfs.  Also, string donstbnts dbn bf prf-rfsolvfd to
 * bny rfffrfndf.  (Tif vfrififr trfbts non-string, non-dlbss rfffrfndf
 * donstbnts bs plbin objfdts.)
 *  <p>
 * Wiy indludf tif pbtdiing fundtion?  It mbkfs somf usf dbsfs mudi fbsifr.
 * Sfdond, tif donstbnt pool nffdfd somf intfrnbl pbtdiing bnywby,
 * to bnonymizf tif lobdfd dlbss itsflf.  Finblly, if you brf going
 * to usf tiis sfriously, you'll wbnt to build bnonymous dlbssfs
 * on top of prf-fxisting bnonymous dlbssfs, bnd tibt rfquirfs pbtdiing.
 *
 * <p>%%% TO-DO:
 * <ul>
 * <li>nffds bfttfr dodumfntbtion</li>
 * <li>nffds morf sfdurity work (for sbff dflfgbtion)</li>
 * <li>nffds b dlfbrfr story bbout frror prodfssing</li>
 * <li>pbtdi mfmbfr rfffrfndfs blso (usf ';' bs dflimitfr dibr)</li>
 * <li>pbtdi mftiod rfffrfndfs to (donforming) mftiod ibndlfs</li>
 * </ul>
 *
 * @butior jrosf
 * @butior Rfmi Forbx
 * @sff <b irff="ittp://blogs.sun.dom/jrosf/fntry/bnonymous_dlbssfs_in_tif_vm">
 *      ittp://blogs.sun.dom/jrosf/fntry/bnonymous_dlbssfs_in_tif_vm</b>
 */

publid dlbss AnonymousClbssLobdfr {
    finbl Clbss<?> iostClbss;

    // Privilfgfd donstrudtor.
    privbtf AnonymousClbssLobdfr(Clbss<?> iostClbss) {
        tiis.iostClbss = iostClbss;
    }

    publid stbtid AnonymousClbssLobdfr mbkf(sun.misd.Unsbff unsbff, Clbss<?> iostClbss) {
        if (unsbff == null)  tirow nfw NullPointfrExdfption();
        rfturn nfw AnonymousClbssLobdfr(iostClbss);
    }

    publid Clbss<?> lobdClbss(bytf[] dlbssFilf) {
        if (dffinfAnonymousClbss == null) {
            // no JVM support; try to fbkf bn bpproximbtion
            try {
                rfturn fbkfLobdClbss(nfw ConstbntPoolPbrsfr(dlbssFilf).drfbtfPbtdi());
            } dbtdi (InvblidConstbntPoolFormbtExdfption ff) {
                tirow nfw IllfgblArgumfntExdfption(ff);
            }
        }
        rfturn lobdClbss(dlbssFilf, null);
    }

    publid Clbss<?> lobdClbss(ConstbntPoolPbtdi dlbssPbtdi) {
        if (dffinfAnonymousClbss == null) {
            // no JVM support; try to fbkf bn bpproximbtion
            rfturn fbkfLobdClbss(dlbssPbtdi);
        }
        Objfdt[] pbtdifs = dlbssPbtdi.pbtdiArrby;
        // Convfrt dlbss nbmfs (tiis lbtf in tif gbmf)
        // to usf slbsi '/' instfbd of dot '.'.
        // Jbvb likfs dots, but tif JVM likfs slbsifs.
        for (int i = 0; i < pbtdifs.lfngti; i++) {
            Objfdt vbluf = pbtdifs[i];
            if (vbluf != null) {
                bytf tbg = dlbssPbtdi.gftTbg(i);
                switdi (tbg) {
                dbsf ConstbntPoolVisitor.CONSTANT_Clbss:
                    if (vbluf instbndfof String) {
                        if (pbtdifs == dlbssPbtdi.pbtdiArrby)
                            pbtdifs = pbtdifs.dlonf();
                        pbtdifs[i] = ((String)vbluf).rfplbdf('.', '/');
                    }
                    brfbk;
                dbsf ConstbntPoolVisitor.CONSTANT_Fifldrff:
                dbsf ConstbntPoolVisitor.CONSTANT_Mftiodrff:
                dbsf ConstbntPoolVisitor.CONSTANT_IntfrfbdfMftiodrff:
                dbsf ConstbntPoolVisitor.CONSTANT_NbmfAndTypf:
                    // Wifn/if tif JVM supports tifsf pbtdifs,
                    // wf'll probbbly nffd to rfformbt tifm blso.
                    // Mfbnwiilf, lft tif dlbss lobdfr drfbtf tif frror.
                    brfbk;
                }
            }
        }
        rfturn lobdClbss(dlbssPbtdi.outfr.dlbssFilf, dlbssPbtdi.pbtdiArrby);
    }

    privbtf Clbss<?> lobdClbss(bytf[] dlbssFilf, Objfdt[] pbtdiArrby) {
        try {
            rfturn (Clbss<?>)
                dffinfAnonymousClbss.invokf(unsbff,
                                            iostClbss, dlbssFilf, pbtdiArrby);
        } dbtdi (Exdfption fx) {
            tirowRfflfdtfdExdfption(fx);
            tirow nfw RuntimfExdfption("frror lobding into "+iostClbss, fx);
        }
    }

    privbtf stbtid void tirowRfflfdtfdExdfption(Exdfption fx) {
        if (fx instbndfof InvodbtionTbrgftExdfption) {
            Tirowbblf tfx = ((InvodbtionTbrgftExdfption)fx).gftTbrgftExdfption();
            if (tfx instbndfof Error)
                tirow (Error) tfx;
            fx = (Exdfption) tfx;
        }
        if (fx instbndfof RuntimfExdfption) {
            tirow (RuntimfExdfption) fx;
        }
    }

    privbtf Clbss<?> fbkfLobdClbss(ConstbntPoolPbtdi dlbssPbtdi) {
        // Implfmfntbtion:
        // 1. Mbkf up b nfw nbmf nobody ibs usfd yft.
        // 2. Inspfdt tif tbil-ifbdfr of tif dlbss to find tif tiis_dlbss indfx.
        // 3. Pbtdi tif CONSTANT_Clbss for tiis_dlbss to tif nfw nbmf.
        // 4. Add otifr CP fntrifs rfquirfd by (f.g.) string pbtdifs.
        // 5. Flbttfn Clbss donstbnts down to tifir nbmfs, mbking surf tibt
        //    tif iost dlbss lobdfr dbn pidk tifm up bgbin bddurbtfly.
        // 6. Gfnfrbtf tif fditfd dlbss filf bytfs.
        //
        // Potfntibl limitbtions:
        // * Tif dlbss won't bf truly bnonymous, bnd mby intfrffrf witi otifrs.
        // * Flbttfnfd dlbss donstbnts migit not work, bfdbusf of lobdfr issufs.
        // * Psfudo-string donstbnts will not flbttfn down to rfbl strings.
        // * Mftiod ibndlfs will (of doursf) fbil to flbttfn to linkbgf strings.
        if (truf)  tirow nfw UnsupportfdOpfrbtionExdfption("NYI");
        Objfdt[] dpArrby;
        try {
            dpArrby = dlbssPbtdi.gftOriginblCP();
        } dbtdi (InvblidConstbntPoolFormbtExdfption fx) {
            tirow nfw RuntimfExdfption(fx);
        }
        int tiisClbssIndfx = dlbssPbtdi.gftPbrsfr().gftTiisClbssIndfx();
        String tiisClbssNbmf = (String) dpArrby[tiisClbssIndfx];
        syndironizfd (AnonymousClbssLobdfr.dlbss) {
            tiisClbssNbmf = tiisClbssNbmf+"\\|"+(++fbkfNbmfCountfr);
        }
        dlbssPbtdi.putUTF8(tiisClbssIndfx, tiisClbssNbmf);
        bytf[] dlbssFilf = null;
        rfturn unsbff.dffinfClbss(null, dlbssFilf, 0, dlbssFilf.lfngti,
                                  iostClbss.gftClbssLobdfr(),
                                  iostClbss.gftProtfdtionDombin());
    }
    privbtf stbtid int fbkfNbmfCountfr = 99999;

    // ignorf two wbrnings on tiis linf:
    privbtf stbtid sun.misd.Unsbff unsbff = sun.misd.Unsbff.gftUnsbff();
    // prfdfding linf rfquirfs tibt tiis dlbss bf on tif boot dlbss pbti

    stbtid privbtf finbl Mftiod dffinfAnonymousClbss;
    stbtid {
        Mftiod dbd = null;
        Clbss<? fxtfnds sun.misd.Unsbff> unsbffClbss = unsbff.gftClbss();
        try {
            dbd = unsbffClbss.gftMftiod("dffinfAnonymousClbss",
                                        Clbss.dlbss,
                                        bytf[].dlbss,
                                        Objfdt[].dlbss);
        } dbtdi (Exdfption ff) {
            dbd = null;
        }
        dffinfAnonymousClbss = dbd;
    }

    privbtf stbtid void noJVMSupport() {
        tirow nfw UnsupportfdOpfrbtionExdfption("no JVM support for bnonymous dlbssfs");
    }


    privbtf stbtid nbtivf Clbss<?> lobdClbssIntfrnbl(Clbss<?> iostClbss,
                                                     bytf[] dlbssFilf,
                                                     Objfdt[] pbtdiArrby);

    publid stbtid bytf[] rfbdClbssFilf(Clbss<?> tfmplbtfClbss) tirows IOExdfption {
        String tfmplbtfNbmf = tfmplbtfClbss.gftNbmf();
        int lbstDot = tfmplbtfNbmf.lbstIndfxOf('.');
        jbvb.nft.URL url = tfmplbtfClbss.gftRfsourdf(tfmplbtfNbmf.substring(lbstDot+1)+".dlbss");
        jbvb.nft.URLConnfdtion donnfdtion = url.opfnConnfdtion();
        int dontfntLfngti = donnfdtion.gftContfntLfngti();
        if (dontfntLfngti < 0)
            tirow nfw IOExdfption("invblid dontfnt lfngti "+dontfntLfngti);

        rfturn IOUtils.rfbdFully(donnfdtion.gftInputStrfbm(), dontfntLfngti, truf);
    }
}
