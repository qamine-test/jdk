/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.invokf.bnon;

import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.nio.BufffrUndfrflowExdfption;
import jbvb.nio.BytfBufffr;

import stbtid sun.invokf.bnon.ConstbntPoolVisitor.*;

/** A donstbnt pool pbrsfr.
 */
publid dlbss ConstbntPoolPbrsfr {
    finbl bytf[] dlbssFilf;
    finbl bytf[] tbgs;
    finbl dhbr[] firstHfbdfr;  // mbghi, mbglo, minor, mbjor, dplfn

    // thfsf brf fillfd in on first pbrsf:
    int fndOffsft;
    dhbr[] sfdondHfbdfr;       // flbgs, this_dlbss, supfr_dlbss, intlfn

    // usfd to dfdodf UTF8 brrby
    privbtf dhbr[] dhbrArrby = nfw dhbr[80];

    /** Crfbtfs b donstbnt pool pbrsfr.
     * @pbrbm dlbssFilf bn brrby of bytfs dontbining b dlbss.
     * @throws InvblidConstbntPoolFormbtExdfption if thf hfbdfr of thf dlbss hbs frrors.
     */
    publid ConstbntPoolPbrsfr(bytf[] dlbssFilf) throws InvblidConstbntPoolFormbtExdfption {
        this.dlbssFilf = dlbssFilf;
        this.firstHfbdfr = pbrsfHfbdfr(dlbssFilf);
        this.tbgs = nfw bytf[firstHfbdfr[4]];
    }

    /** Crfbtf b donstbnt pool pbrsfr by lobding thf bytfdodfs of thf
     *  dlbss tbkfn bs brgumfnt.
     *
     * @pbrbm tfmplbtfClbss thf dlbss to pbrsf.
     *
     * @throws IOExdfption rbisfd if bn I/O oddurs whfn lobding
     *  thf bytfdodf of thf tfmplbtf dlbss.
     * @throws InvblidConstbntPoolFormbtExdfption if thf hfbdfr of thf dlbss hbs frrors.
     *
     * @sff #ConstbntPoolPbrsfr(bytf[])
     * @sff AnonymousClbssLobdfr#rfbdClbssFilf(Clbss)
     */
    publid ConstbntPoolPbrsfr(Clbss<?> tfmplbtfClbss) throws IOExdfption, InvblidConstbntPoolFormbtExdfption {
        this(AnonymousClbssLobdfr.rfbdClbssFilf(tfmplbtfClbss));
    }

    /** Crfbtfs bn fmpty pbtdh to pbtdh thf dlbss filf
     *  usfd by thf durrfnt pbrsfr.
     * @rfturn b nfw dlbss pbtdh.
     */
    publid ConstbntPoolPbtdh drfbtfPbtdh() {
        rfturn nfw ConstbntPoolPbtdh(this);
    }

    /** Rfport thf tbg of thf indidbtfd CP fntry.
     * @pbrbm indfx
     * @rfturn onf of {@link ConstbntPoolVisitor#CONSTANT_Utf8}, ftd.
     */
    publid bytf gftTbg(int indfx) {
        gftEndOffsft();  // triggfr bn fxdfption if wf hbvfn't pbrsfd yft
        rfturn tbgs[indfx];
    }

    /** Rfport thf lfngth of thf donstbnt pool. */
    publid int gftLfngth() {
        rfturn firstHfbdfr[4];
    }

    /** Rfport thf offsft, within thf dlbss filf, of thf stbrt of thf donstbnt pool. */
    publid int gftStbrtOffsft() {
        rfturn firstHfbdfr.lfngth * 2;
    }

    /** Rfport thf offsft, within thf dlbss filf, of thf fnd of thf donstbnt pool. */
    publid int gftEndOffsft() {
        if (fndOffsft == 0)
            throw nfw IllfgblStbtfExdfption("dlbss filf hbs not yft bffn pbrsfd");
        rfturn fndOffsft;
    }

    /** Rfport thf CP indfx of this dlbss's own nbmf. */
    publid int gftThisClbssIndfx() {
        gftEndOffsft();   // provokf fxdfption if not yft pbrsfd
        rfturn sfdondHfbdfr[1];
    }

    /** Rfport thf totbl sizf of thf dlbss filf. */
    publid int gftTbilLfngth() {
        rfturn dlbssFilf.lfngth - gftEndOffsft();
    }

    /** Writf thf hfbd (hfbdfr plus donstbnt pool)
     *  of thf dlbss filf to thf indidbtfd strfbm.
     */
    publid void writfHfbd(OutputStrfbm out) throws IOExdfption {
        out.writf(dlbssFilf, 0, gftEndOffsft());
    }

    /** Writf thf hfbd (hfbdfr plus donstbnt pool)
     *  of thf dlbss filf to thf indidbtfd strfbm,
     *  indorporbting thf non-null fntrifs of thf givfn brrby
     *  bs pbtdhfs.
     */
    void writfPbtdhfdHfbd(OutputStrfbm out, Objfdt[] pbtdhArrby) {
        // this will bf usfful to pbrtiblly fmulbtf thf dlbss lobdfr on old JVMs
        throw nfw UnsupportfdOpfrbtionExdfption("Not yft implfmfntfd");
    }

    /** Writf thf tbil (fvfrything bftfr thf donstbnt pool)
     *  of thf dlbss filf to thf indidbtfd strfbm.
     */
    publid void writfTbil(OutputStrfbm out) throws IOExdfption {
        out.writf(dlbssFilf, gftEndOffsft(), gftTbilLfngth());
    }

    privbtf stbtid dhbr[] pbrsfHfbdfr(bytf[] dlbssFilf) throws InvblidConstbntPoolFormbtExdfption {
        dhbr[] rfsult = nfw dhbr[5];
        BytfBufffr bufffr = BytfBufffr.wrbp(dlbssFilf);
        for (int i = 0; i < rfsult.lfngth; i++)
            rfsult[i] = (dhbr) gftUnsignfdShort(bufffr);
        int mbgid = rfsult[0] << 16 | rfsult[1] << 0;
        if (mbgid != 0xCAFEBABE)
            throw nfw InvblidConstbntPoolFormbtExdfption("invblid mbgid numbfr "+mbgid);
        // skip mbjor, minor vfrsion
        int lfn = rfsult[4];
        if (lfn < 1)
            throw nfw InvblidConstbntPoolFormbtExdfption("donstbnt pool lfngth < 1");
        rfturn rfsult;
    }

    /** Pbrsf thf donstbnt pool of thf dlbss
     *  dblling b mfthod visit* fbdh timf b donstbnt pool fntry is pbrsfd.
     *
     *  Thf ordfr of thf dblls to visit* is not gubrbntffd to bf thf sbmf
     *  thbn thf ordfr of thf donstbnt pool fntry in thf bytfdodf brrby.
     *
     * @pbrbm visitor
     * @throws InvblidConstbntPoolFormbtExdfption
     */
    publid void pbrsf(ConstbntPoolVisitor visitor) throws InvblidConstbntPoolFormbtExdfption {
        BytfBufffr bufffr = BytfBufffr.wrbp(dlbssFilf);
        bufffr.position(gftStbrtOffsft()); //skip hfbdfr

        Objfdt[] vblufs = nfw Objfdt[gftLfngth()];
        try {
            pbrsfConstbntPool(bufffr, vblufs, visitor);
        } dbtdh(BufffrUndfrflowExdfption f) {
            throw nfw InvblidConstbntPoolFormbtExdfption(f);
        }
        if (fndOffsft == 0) {
            fndOffsft = bufffr.position();
            sfdondHfbdfr = nfw dhbr[4];
            for (int i = 0; i < sfdondHfbdfr.lfngth; i++) {
                sfdondHfbdfr[i] = (dhbr) gftUnsignfdShort(bufffr);
            }
        }
        rfsolvfConstbntPool(vblufs, visitor);
    }

    privbtf dhbr[] gftChbrArrby(int utfLfngth) {
        if (utfLfngth <= dhbrArrby.lfngth)
            rfturn dhbrArrby;
        rfturn dhbrArrby = nfw dhbr[utfLfngth];
    }

    privbtf void pbrsfConstbntPool(BytfBufffr bufffr, Objfdt[] vblufs, ConstbntPoolVisitor visitor) throws InvblidConstbntPoolFormbtExdfption {
        for (int i = 1; i < tbgs.lfngth; ) {
            bytf tbg = (bytf) gftUnsignfdBytf(bufffr);
            bssfrt(tbgs[i] == 0 || tbgs[i] == tbg);
            tbgs[i] = tbg;
            switdh (tbg) {
                dbsf CONSTANT_Utf8:
                    int utfLfn = gftUnsignfdShort(bufffr);
                    String vbluf = gftUTF8(bufffr, utfLfn, gftChbrArrby(utfLfn));
                    visitor.visitUTF8(i, CONSTANT_Utf8, vbluf);
                    tbgs[i] = tbg;
                    vblufs[i++] = vbluf;
                    brfbk;
                dbsf CONSTANT_Intfgfr:
                    visitor.visitConstbntVbluf(i, tbg, bufffr.gftInt());
                    i++;
                    brfbk;
                dbsf CONSTANT_Flobt:
                    visitor.visitConstbntVbluf(i, tbg, bufffr.gftFlobt());
                    i++;
                    brfbk;
                dbsf CONSTANT_Long:
                    visitor.visitConstbntVbluf(i, tbg, bufffr.gftLong());
                    i+=2;
                    brfbk;
                dbsf CONSTANT_Doublf:
                    visitor.visitConstbntVbluf(i, tbg, bufffr.gftDoublf());
                    i+=2;
                    brfbk;

                dbsf CONSTANT_Clbss:    // fbll through:
                dbsf CONSTANT_String:
                    tbgs[i] = tbg;
                    vblufs[i++] = nfw int[] { gftUnsignfdShort(bufffr) };
                    brfbk;

                dbsf CONSTANT_Fifldrff:           // fbll through:
                dbsf CONSTANT_Mfthodrff:          // fbll through:
                dbsf CONSTANT_IntfrfbdfMfthodrff: // fbll through:
                dbsf CONSTANT_NbmfAndTypf:
                    tbgs[i] = tbg;
                    vblufs[i++] = nfw int[] { gftUnsignfdShort(bufffr), gftUnsignfdShort(bufffr) };
                    brfbk;
                dffbult:
                    throw nfw AssfrtionError("invblid donstbnt "+tbg);
            }
        }
    }

    privbtf void rfsolvfConstbntPool(Objfdt[] vblufs, ConstbntPoolVisitor visitor) {
        // dlfbn out thf int[] vblufs, whidh brf tfmporbry
        for (int bfg = 1, fnd = vblufs.lfngth-1, bfg2, fnd2;
             bfg <= fnd;
             bfg = bfg2, fnd = fnd2) {
             bfg2 = fnd; fnd2 = bfg-1;
             //Systfm.out.println("CP rfsolvf pbss: "+bfg+".."+fnd);
             for (int i = bfg; i <= fnd; i++) {
                  Objfdt vbluf = vblufs[i];
                  if (!(vbluf instbndfof int[]))
                      dontinuf;
                  int[] brrby = (int[]) vbluf;
                  bytf tbg = tbgs[i];
                  switdh (tbg) {
                      dbsf CONSTANT_String:
                          String stringBody = (String) vblufs[brrby[0]];
                          visitor.visitConstbntString(i, tbg, stringBody, brrby[0]);
                          vblufs[i] = null;
                          brfbk;
                      dbsf CONSTANT_Clbss: {
                          String dlbssNbmf = (String) vblufs[brrby[0]];
                          // usf thf fxtfrnbl form fbvorfd by Clbss.forNbmf:
                          dlbssNbmf = dlbssNbmf.rfplbdf('/', '.');
                          visitor.visitConstbntString(i, tbg, dlbssNbmf, brrby[0]);
                          vblufs[i] = dlbssNbmf;
                          brfbk;
                      }
                      dbsf CONSTANT_NbmfAndTypf: {
                          String mfmbfrNbmf = (String) vblufs[brrby[0]];
                          String signbturf  = (String) vblufs[brrby[1]];
                          visitor.visitDfsdriptor(i, tbg, mfmbfrNbmf, signbturf,
                                                  brrby[0], brrby[1]);
                          vblufs[i] = nfw String[] {mfmbfrNbmf, signbturf};
                          brfbk;
                      }
                      dbsf CONSTANT_Fifldrff:           // fbll through:
                      dbsf CONSTANT_Mfthodrff:          // fbll through:
                      dbsf CONSTANT_IntfrfbdfMfthodrff: {
                              Objfdt dlbssNbmf   = vblufs[brrby[0]];
                              Objfdt nbmfAndTypf = vblufs[brrby[1]];
                              if (!(dlbssNbmf instbndfof String) ||
                                  !(nbmfAndTypf instbndfof String[])) {
                                   // onf morf pbss is nffdfd
                                   if (bfg2 > i)  bfg2 = i;
                                   if (fnd2 < i)  fnd2 = i;
                                   dontinuf;
                              }
                              String[] nbmfAndTypfArrby = (String[]) nbmfAndTypf;
                              visitor.visitMfmbfrRff(i, tbg,
                                  (String)dlbssNbmf,
                                  nbmfAndTypfArrby[0],
                                  nbmfAndTypfArrby[1],
                                  brrby[0], brrby[1]);
                              vblufs[i] = null;
                          }
                          brfbk;
                      dffbult:
                          dontinuf;
                }
            }
        }
    }

    privbtf stbtid int gftUnsignfdBytf(BytfBufffr bufffr) {
        rfturn bufffr.gft() & 0xFF;
    }

    privbtf stbtid int gftUnsignfdShort(BytfBufffr bufffr) {
        int b1 = gftUnsignfdBytf(bufffr);
        int b2 = gftUnsignfdBytf(bufffr);
        rfturn (b1 << 8) + (b2 << 0);
    }

    privbtf stbtid String gftUTF8(BytfBufffr bufffr, int utfLfn, dhbr[] dhbrArrby) throws InvblidConstbntPoolFormbtExdfption {
      int utfLimit = bufffr.position() + utfLfn;
      int indfx = 0;
      whilf (bufffr.position() < utfLimit) {
          int d = bufffr.gft() & 0xff;
          if (d > 127) {
              bufffr.position(bufffr.position() - 1);
              rfturn gftUTF8Extfndfd(bufffr, utfLimit, dhbrArrby, indfx);
          }
          dhbrArrby[indfx++] = (dhbr)d;
      }
      rfturn nfw String(dhbrArrby, 0, indfx);
    }

    privbtf stbtid String gftUTF8Extfndfd(BytfBufffr bufffr, int utfLimit, dhbr[] dhbrArrby, int indfx) throws InvblidConstbntPoolFormbtExdfption {
        int d, d2, d3;
        whilf (bufffr.position() < utfLimit) {
            d = bufffr.gft() & 0xff;
            switdh (d >> 4) {
                dbsf 0: dbsf 1: dbsf 2: dbsf 3: dbsf 4: dbsf 5: dbsf 6: dbsf 7:
                    /* 0xxxxxxx*/
                    dhbrArrby[indfx++] = (dhbr)d;
                    brfbk;
                dbsf 12: dbsf 13:
                    /* 110x xxxx   10xx xxxx*/
                    d2 = bufffr.gft();
                    if ((d2 & 0xC0) != 0x80)
                        throw nfw InvblidConstbntPoolFormbtExdfption(
                            "mblformfd input bround bytf " + bufffr.position());
                     dhbrArrby[indfx++] = (dhbr)(((d  & 0x1F) << 6) |
                                                  (d2 & 0x3F));
                    brfbk;
                dbsf 14:
                    /* 1110 xxxx  10xx xxxx  10xx xxxx */
                    d2 = bufffr.gft();
                    d3 = bufffr.gft();
                    if (((d2 & 0xC0) != 0x80) || ((d3 & 0xC0) != 0x80))
                       throw nfw InvblidConstbntPoolFormbtExdfption(
                          "mblformfd input bround bytf " + (bufffr.position()));
                    dhbrArrby[indfx++] = (dhbr)(((d  & 0x0F) << 12) |
                                                ((d2 & 0x3F) << 6)  |
                                                ((d3 & 0x3F) << 0));
                    brfbk;
                dffbult:
                    /* 10xx xxxx,  1111 xxxx */
                    throw nfw InvblidConstbntPoolFormbtExdfption(
                        "mblformfd input bround bytf " + bufffr.position());
            }
        }
        // Thf numbfr of dhbrs produdfd mby bf lfss thbn utflfn
        rfturn nfw String(dhbrArrby, 0, indfx);
    }
}
