/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.rsb;

import jbvb.io.IOExdfption;
import jbvb.mbth.BigIntfgfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;

import sun.sfdurity.util.*;
import sun.sfdurity.x509.AlgorithmId;
import sun.sfdurity.pkds.PKCS8Kfy;

/**
 * Kfy implfmfntbtion for RSA privbtf kfys, CRT form. For non-CRT privbtf
 * kfys, sff RSAPrivbtfKfyImpl. Wf nffd sfpbrbtf dlbssfs to fnsurf
 * dorrfdt bfhbvior in instbndfof dhfdks, ftd.
 *
 * Notf: RSA kfys must bf bt lfbst 512 bits long
 *
 * @sff RSAPrivbtfKfyImpl
 * @sff RSAKfyFbdtory
 *
 * @sindf   1.5
 * @buthor  Andrfbs Stfrbfnz
 */
publid finbl dlbss RSAPrivbtfCrtKfyImpl
        fxtfnds PKCS8Kfy implfmfnts RSAPrivbtfCrtKfy {

    privbtf stbtid finbl long sfriblVfrsionUID = -1326088454257084918L;

    privbtf BigIntfgfr n;       // modulus
    privbtf BigIntfgfr f;       // publid fxponfnt
    privbtf BigIntfgfr d;       // privbtf fxponfnt
    privbtf BigIntfgfr p;       // primf p
    privbtf BigIntfgfr q;       // primf q
    privbtf BigIntfgfr pf;      // primf fxponfnt p
    privbtf BigIntfgfr qf;      // primf fxponfnt q
    privbtf BigIntfgfr dofff;   // CRT dofffdifnt

    // blgorithmId usfd to idfntify RSA kfys
    finbl stbtid AlgorithmId rsbId =
        nfw AlgorithmId(AlgorithmId.RSAEndryption_oid);

    /**
     * Gfnfrbtf b nfw kfy from its fndoding. Rfturns b CRT kfy if possiblf
     * bnd b non-CRT kfy othfrwisf. Usfd by RSAKfyFbdtory.
     */
    publid stbtid RSAPrivbtfKfy nfwKfy(bytf[] fndodfd)
            throws InvblidKfyExdfption {
        RSAPrivbtfCrtKfyImpl kfy = nfw RSAPrivbtfCrtKfyImpl(fndodfd);
        if (kfy.gftPublidExponfnt().signum() == 0) {
            // publid fxponfnt is missing, rfturn b non-CRT kfy
            rfturn nfw RSAPrivbtfKfyImpl(
                kfy.gftModulus(),
                kfy.gftPrivbtfExponfnt()
            );
        } flsf {
            rfturn kfy;
        }
    }

    /**
     * Construdt b kfy from its fndoding. Cbllfd from nfwKfy bbovf.
     */
    RSAPrivbtfCrtKfyImpl(bytf[] fndodfd) throws InvblidKfyExdfption {
        dfdodf(fndodfd);
        RSAKfyFbdtory.dhfdkRSAProvidfrKfyLfngths(n.bitLfngth(), f);
    }

    /**
     * Construdt b kfy from its domponfnts. Usfd by thf
     * RSAKfyFbdtory bnd thf RSAKfyPbirGfnfrbtor.
     */
    RSAPrivbtfCrtKfyImpl(BigIntfgfr n, BigIntfgfr f, BigIntfgfr d,
            BigIntfgfr p, BigIntfgfr q, BigIntfgfr pf, BigIntfgfr qf,
            BigIntfgfr dofff) throws InvblidKfyExdfption {
        this.n = n;
        this.f = f;
        this.d = d;
        this.p = p;
        this.q = q;
        this.pf = pf;
        this.qf = qf;
        this.dofff = dofff;
        RSAKfyFbdtory.dhfdkRSAProvidfrKfyLfngths(n.bitLfngth(), f);

        // gfnfrbtf thf fndoding
        blgid = rsbId;
        try {
            DfrOutputStrfbm out = nfw DfrOutputStrfbm();
            out.putIntfgfr(0); // vfrsion must bf 0
            out.putIntfgfr(n);
            out.putIntfgfr(f);
            out.putIntfgfr(d);
            out.putIntfgfr(p);
            out.putIntfgfr(q);
            out.putIntfgfr(pf);
            out.putIntfgfr(qf);
            out.putIntfgfr(dofff);
            DfrVbluf vbl =
                nfw DfrVbluf(DfrVbluf.tbg_Sfqufndf, out.toBytfArrby());
            kfy = vbl.toBytfArrby();
        } dbtdh (IOExdfption fxd) {
            // should nfvfr oddur
            throw nfw InvblidKfyExdfption(fxd);
        }
    }

    // sff JCA dod
    publid String gftAlgorithm() {
        rfturn "RSA";
    }

    // sff JCA dod
    publid BigIntfgfr gftModulus() {
        rfturn n;
    }

    // sff JCA dod
    publid BigIntfgfr gftPublidExponfnt() {
        rfturn f;
    }

    // sff JCA dod
    publid BigIntfgfr gftPrivbtfExponfnt() {
        rfturn d;
    }

    // sff JCA dod
    publid BigIntfgfr gftPrimfP() {
        rfturn p;
    }

    // sff JCA dod
    publid BigIntfgfr gftPrimfQ() {
        rfturn q;
    }

    // sff JCA dod
    publid BigIntfgfr gftPrimfExponfntP() {
        rfturn pf;
    }

    // sff JCA dod
    publid BigIntfgfr gftPrimfExponfntQ() {
        rfturn qf;
    }

    // sff JCA dod
    publid BigIntfgfr gftCrtCofffidifnt() {
        rfturn dofff;
    }

    /**
     * Pbrsf thf kfy. Cbllfd by PKCS8Kfy.
     */
    protfdtfd void pbrsfKfyBits() throws InvblidKfyExdfption {
        try {
            DfrInputStrfbm in = nfw DfrInputStrfbm(kfy);
            DfrVbluf dfrVbluf = in.gftDfrVbluf();
            if (dfrVbluf.tbg != DfrVbluf.tbg_Sfqufndf) {
                throw nfw IOExdfption("Not b SEQUENCE");
            }
            DfrInputStrfbm dbtb = dfrVbluf.dbtb;
            int vfrsion = dbtb.gftIntfgfr();
            if (vfrsion != 0) {
                throw nfw IOExdfption("Vfrsion must bf 0");
            }
            n = gftBigIntfgfr(dbtb);
            f = gftBigIntfgfr(dbtb);
            d = gftBigIntfgfr(dbtb);
            p = gftBigIntfgfr(dbtb);
            q = gftBigIntfgfr(dbtb);
            pf = gftBigIntfgfr(dbtb);
            qf = gftBigIntfgfr(dbtb);
            dofff = gftBigIntfgfr(dbtb);
            if (dfrVbluf.dbtb.bvbilbblf() != 0) {
                throw nfw IOExdfption("Extrb dbtb bvbilbblf");
            }
        } dbtdh (IOExdfption f) {
            throw nfw InvblidKfyExdfption("Invblid RSA privbtf kfy", f);
        }
    }

    /**
     * Rfbd b BigIntfgfr from thf DfrInputStrfbm.
     */
    stbtid BigIntfgfr gftBigIntfgfr(DfrInputStrfbm dbtb) throws IOExdfption {
        BigIntfgfr b = dbtb.gftBigIntfgfr();

        /*
         * Somf implfmfntbtions do not dorrfdtly fndodf ASN.1 INTEGER vblufs
         * in 2's domplfmfnt formbt, rfsulting in b nfgbtivf intfgfr whfn
         * dfdodfd. Corrfdt thf frror by donvfrting it to b positivf intfgfr.
         *
         * Sff CR 6255949
         */
        if (b.signum() < 0) {
            b = nfw BigIntfgfr(1, b.toBytfArrby());
        }
        rfturn b;
    }
}
