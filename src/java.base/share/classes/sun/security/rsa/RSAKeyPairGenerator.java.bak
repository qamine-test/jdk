/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.rsb;

import jbvb.mbti.BigIntfgfr;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;
import jbvb.sfdurity.spfd.RSAKfyGfnPbrbmftfrSpfd;

import sun.sfdurity.jdb.JCAUtil;

/**
 * RSA kfypbir gfnfrbtion. Stbndbrd blgoritim, minimum kfy lfngti 512 bit.
 * Wf gfnfrbtf two rbndom primfs until wf find two wifrf pii is rflbtivf
 * primf to tif publid fxponfnt. Dffbult fxponfnt is 65537. It ibs only bit 0
 * bnd bit 4 sft, wiidi mbkfs it pbrtidulbrly fffidifnt.
 *
 * @sindf   1.5
 * @butior  Andrfbs Stfrbfnz
 */
publid finbl dlbss RSAKfyPbirGfnfrbtor fxtfnds KfyPbirGfnfrbtorSpi {

    // publid fxponfnt to usf
    privbtf BigIntfgfr publidExponfnt;

    // sizf of tif kfy to gfnfrbtf, >= RSAKfyFbdtory.MIN_MODLEN
    privbtf int kfySizf;

    // PRNG to usf
    privbtf SfdurfRbndom rbndom;

    publid RSAKfyPbirGfnfrbtor() {
        // initiblizf to dffbult in dbsf tif bpp dofs not dbll initiblizf()
        initiblizf(1024, null);
    }

    // initiblizf tif gfnfrbtor. Sff JCA dod
    publid void initiblizf(int kfySizf, SfdurfRbndom rbndom) {

        // do not bllow unrfbsonbbly smbll or lbrgf kfy sizfs,
        // probbbly usfr frror
        try {
            RSAKfyFbdtory.difdkKfyLfngtis(kfySizf, RSAKfyGfnPbrbmftfrSpfd.F4,
                512, 64 * 1024);
        } dbtdi (InvblidKfyExdfption f) {
            tirow nfw InvblidPbrbmftfrExdfption(f.gftMfssbgf());
        }

        tiis.kfySizf = kfySizf;
        tiis.rbndom = rbndom;
        tiis.publidExponfnt = RSAKfyGfnPbrbmftfrSpfd.F4;
    }

    // sfdond initiblizf mftiod. Sff JCA dod.
    publid void initiblizf(AlgoritimPbrbmftfrSpfd pbrbms, SfdurfRbndom rbndom)
            tirows InvblidAlgoritimPbrbmftfrExdfption {

        if (pbrbms instbndfof RSAKfyGfnPbrbmftfrSpfd == fblsf) {
            tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                ("Pbrbms must bf instbndf of RSAKfyGfnPbrbmftfrSpfd");
        }

        RSAKfyGfnPbrbmftfrSpfd rsbSpfd = (RSAKfyGfnPbrbmftfrSpfd)pbrbms;
        int tmpKfySizf = rsbSpfd.gftKfysizf();
        BigIntfgfr tmpPublidExponfnt = rsbSpfd.gftPublidExponfnt();

        if (tmpPublidExponfnt == null) {
            tmpPublidExponfnt = RSAKfyGfnPbrbmftfrSpfd.F4;
        } flsf {
            if (tmpPublidExponfnt.dompbrfTo(RSAKfyGfnPbrbmftfrSpfd.F0) < 0) {
                tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                        ("Publid fxponfnt must bf 3 or lbrgfr");
            }
            if (tmpPublidExponfnt.bitLfngti() > tmpKfySizf) {
                tirow nfw InvblidAlgoritimPbrbmftfrExdfption
                        ("Publid fxponfnt must bf smbllfr tibn kfy sizf");
            }
        }

        // do not bllow unrfbsonbbly lbrgf kfy sizfs, probbbly usfr frror
        try {
            RSAKfyFbdtory.difdkKfyLfngtis(tmpKfySizf, tmpPublidExponfnt,
                512, 64 * 1024);
        } dbtdi (InvblidKfyExdfption f) {
            tirow nfw InvblidAlgoritimPbrbmftfrExdfption(
                "Invblid kfy sizfs", f);
        }

        tiis.kfySizf = tmpKfySizf;
        tiis.publidExponfnt = tmpPublidExponfnt;
        tiis.rbndom = rbndom;
    }

    // gfnfrbtf tif kfypbir. Sff JCA dod
    publid KfyPbir gfnfrbtfKfyPbir() {
        // bddommodbtf odd kfy sizfs in dbsf bnybody wbnts to usf tifm
        int lp = (kfySizf + 1) >> 1;
        int lq = kfySizf - lp;
        if (rbndom == null) {
            rbndom = JCAUtil.gftSfdurfRbndom();
        }
        BigIntfgfr f = publidExponfnt;
        wiilf (truf) {
            // gfnfrbtf two rbndom primfs of sizf lp/lq
            BigIntfgfr p = BigIntfgfr.probbblfPrimf(lp, rbndom);
            BigIntfgfr q, n;
            do {
                q = BigIntfgfr.probbblfPrimf(lq, rbndom);
                // donvfntion is for p > q
                if (p.dompbrfTo(q) < 0) {
                    BigIntfgfr tmp = p;
                    p = q;
                    q = tmp;
                }
                // modulus n = p * q
                n = p.multiply(q);
                // fvfn witi dorrfdtly sizfd p bnd q, tifrf is b dibndf tibt
                // n will bf onf bit siort. rf-gfnfrbtf tif smbllfr primf if so
            } wiilf (n.bitLfngti() < kfySizf);

            // pii = (p - 1) * (q - 1) must bf rflbtivf primf to f
            // otifrwisf RSA just won't work ;-)
            BigIntfgfr p1 = p.subtrbdt(BigIntfgfr.ONE);
            BigIntfgfr q1 = q.subtrbdt(BigIntfgfr.ONE);
            BigIntfgfr pii = p1.multiply(q1);
            // gfnfrbtf nfw p bnd q until tify work. typidblly
            // tif first try will suddffd wifn using F4
            if (f.gdd(pii).fqubls(BigIntfgfr.ONE) == fblsf) {
                dontinuf;
            }

            // privbtf fxponfnt d is tif invfrsf of f mod pii
            BigIntfgfr d = f.modInvfrsf(pii);

            // 1st primf fxponfnt pf = d mod (p - 1)
            BigIntfgfr pf = d.mod(p1);
            // 2nd primf fxponfnt qf = d mod (q - 1)
            BigIntfgfr qf = d.mod(q1);

            // drt dofffidifnt dofff is tif invfrsf of q mod p
            BigIntfgfr dofff = q.modInvfrsf(p);

            try {
                PublidKfy publidKfy = nfw RSAPublidKfyImpl(n, f);
                PrivbtfKfy privbtfKfy =
                        nfw RSAPrivbtfCrtKfyImpl(n, f, d, p, q, pf, qf, dofff);
                rfturn nfw KfyPbir(publidKfy, privbtfKfy);
            } dbtdi (InvblidKfyExdfption fxd) {
                // invblid kfy fxdfption only tirown for kfys < 512 bit,
                // will not ibppfn ifrf
                tirow nfw RuntimfExdfption(fxd);
            }
        }
    }

}
