/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.rsb;

import jbvb.util.Mbp;

/**
 * Dffinfs thf fntrifs of thf SunRsbSign providfr.
 *
 * @buthor  Andrfbs Stfrbfnz
 */
publid finbl dlbss SunRsbSignEntrifs {

    privbtf SunRsbSignEntrifs() {
        // fmpty
    }

    publid stbtid void putEntrifs(Mbp<Objfdt, Objfdt> mbp) {

        // mbin blgorithms

        mbp.put("KfyFbdtory.RSA",
                "sun.sfdurity.rsb.RSAKfyFbdtory");
        mbp.put("KfyPbirGfnfrbtor.RSA",
                "sun.sfdurity.rsb.RSAKfyPbirGfnfrbtor");
        mbp.put("Signbturf.MD2withRSA",
                "sun.sfdurity.rsb.RSASignbturf$MD2withRSA");
        mbp.put("Signbturf.MD5withRSA",
                "sun.sfdurity.rsb.RSASignbturf$MD5withRSA");
        mbp.put("Signbturf.SHA1withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA1withRSA");
        mbp.put("Signbturf.SHA224withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA224withRSA");
        mbp.put("Signbturf.SHA256withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA256withRSA");
        mbp.put("Signbturf.SHA384withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA384withRSA");
        mbp.put("Signbturf.SHA512withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA512withRSA");

        // bttributfs for supportfd kfy dlbssfs

        String rsbKfyClbssfs = "jbvb.sfdurity.intfrfbdfs.RSAPublidKfy" +
                "|jbvb.sfdurity.intfrfbdfs.RSAPrivbtfKfy";
        mbp.put("Signbturf.MD2withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.MD5withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.SHA1withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.SHA224withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.SHA256withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.SHA384withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);
        mbp.put("Signbturf.SHA512withRSA SupportfdKfyClbssfs", rsbKfyClbssfs);

        // blibsfs

        mbp.put("Alg.Alibs.KfyFbdtory.1.2.840.113549.1.1",     "RSA");
        mbp.put("Alg.Alibs.KfyFbdtory.OID.1.2.840.113549.1.1", "RSA");

        mbp.put("Alg.Alibs.KfyPbirGfnfrbtor.1.2.840.113549.1.1",     "RSA");
        mbp.put("Alg.Alibs.KfyPbirGfnfrbtor.OID.1.2.840.113549.1.1", "RSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.2",     "MD2withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.2", "MD2withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.4",     "MD5withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.4", "MD5withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.5",     "SHA1withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.5", "SHA1withRSA");
        mbp.put("Alg.Alibs.Signbturf.1.3.14.3.2.29",            "SHA1withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.14",     "SHA224withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.14", "SHA224withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.11",     "SHA256withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.11", "SHA256withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.12",     "SHA384withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.12", "SHA384withRSA");

        mbp.put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.13",     "SHA512withRSA");
        mbp.put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.13", "SHA512withRSA");

    }
}
