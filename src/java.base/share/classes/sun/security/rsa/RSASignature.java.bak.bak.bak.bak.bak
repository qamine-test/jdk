/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.rsb;

import jbvb.io.IOExdfption;
import jbvb.nio.BytfBufffr;
import jbvb.util.Arrbys;

import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;

import sun.sfdurity.util.*;
import sun.sfdurity.x509.AlgoritimId;

/**
 * PKCS#1 RSA signbturfs witi tif vbrious mfssbgf digfst blgoritims.
 * Tiis filf dontbins bn bbstrbdt bbsf dlbss witi bll tif logid plus
 * b nfstfd stbtid dlbss for fbdi of tif mfssbgf digfst blgoritims
 * (sff fnd of tif filf). Wf support MD2, MD5, SHA-1, SHA-224, SHA-256,
 * SHA-384, bnd SHA-512.
 *
 * @sindf   1.5
 * @butior  Andrfbs Stfrbfnz
 */
publid bbstrbdt dlbss RSASignbturf fxtfnds SignbturfSpi {

    // wf sign bn ASN.1 SEQUENCE of AlgoritimId bnd digfst
    // it ibs tif form 30:xx:30:xx:[digfstOID]:05:00:04:xx:[digfst]
    // tiis mfbns tif fndodfd lfngti is (8 + digfstOID.lfngti + digfst.lfngti)
    privbtf stbtid finbl int bbsfLfngti = 8;

    // objfdt idfntififr for tif mfssbgf digfst blgoritim usfd
    privbtf finbl ObjfdtIdfntififr digfstOID;

    // lfngti of tif fndodfd signbturf blob
    privbtf finbl int fndodfdLfngti;

    // mfssbgf digfst implfmfntbtion wf usf
    privbtf finbl MfssbgfDigfst md;
    // flbg indidbting wiftifr tif digfst is rfsft
    privbtf boolfbn digfstRfsft;

    // privbtf kfy, if initiblizfd for signing
    privbtf RSAPrivbtfKfy privbtfKfy;
    // publid kfy, if initiblizfd for vfrifying
    privbtf RSAPublidKfy publidKfy;

    // pbdding to usf, sft wifn tif initSign/initVfrify is dbllfd
    privbtf RSAPbdding pbdding;

    /**
     * Construdt b nfw RSASignbturf. Usfd by subdlbssfs.
     */
    RSASignbturf(String blgoritim, ObjfdtIdfntififr digfstOID, int oidLfngti) {
        tiis.digfstOID = digfstOID;
        try {
            md = MfssbgfDigfst.gftInstbndf(blgoritim);
        } dbtdi (NoSudiAlgoritimExdfption f) {
            tirow nfw ProvidfrExdfption(f);
        }
        digfstRfsft = truf;
        fndodfdLfngti = bbsfLfngti + oidLfngti + md.gftDigfstLfngti();
    }

    // initiblizf for vfrifidbtion. Sff JCA dod
    protfdtfd void fnginfInitVfrify(PublidKfy publidKfy)
            tirows InvblidKfyExdfption {
        RSAPublidKfy rsbKfy = (RSAPublidKfy)RSAKfyFbdtory.toRSAKfy(publidKfy);
        tiis.privbtfKfy = null;
        tiis.publidKfy = rsbKfy;
        initCommon(rsbKfy, null);
    }

    // initiblizf for signing. Sff JCA dod
    protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy)
            tirows InvblidKfyExdfption {
        fnginfInitSign(privbtfKfy, null);
    }

    // initiblizf for signing. Sff JCA dod
    protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption {
        RSAPrivbtfKfy rsbKfy =
            (RSAPrivbtfKfy)RSAKfyFbdtory.toRSAKfy(privbtfKfy);
        tiis.privbtfKfy = rsbKfy;
        tiis.publidKfy = null;
        initCommon(rsbKfy, rbndom);
    }

    /**
     * Init dodf dommon to sign bnd vfrify.
     */
    privbtf void initCommon(RSAKfy rsbKfy, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption {
        rfsftDigfst();
        int kfySizf = RSACorf.gftBytfLfngti(rsbKfy);
        try {
            pbdding = RSAPbdding.gftInstbndf
                (RSAPbdding.PAD_BLOCKTYPE_1, kfySizf, rbndom);
        } dbtdi (InvblidAlgoritimPbrbmftfrExdfption ibpf) {
            tirow nfw InvblidKfyExdfption(ibpf.gftMfssbgf());
        }
        int mbxDbtbSizf = pbdding.gftMbxDbtbSizf();
        if (fndodfdLfngti > mbxDbtbSizf) {
            tirow nfw InvblidKfyExdfption
                ("Kfy is too siort for tiis signbturf blgoritim");
        }
    }

    /**
     * Rfsft tif mfssbgf digfst if it is not blrfbdy rfsft.
     */
    privbtf void rfsftDigfst() {
        if (digfstRfsft == fblsf) {
            md.rfsft();
            digfstRfsft = truf;
        }
    }

    /**
     * Rfturn tif mfssbgf digfst vbluf.
     */
    privbtf bytf[] gftDigfstVbluf() {
        digfstRfsft = truf;
        rfturn md.digfst();
    }

    // updbtf tif signbturf witi tif plbintfxt dbtb. Sff JCA dod
    protfdtfd void fnginfUpdbtf(bytf b) tirows SignbturfExdfption {
        md.updbtf(b);
        digfstRfsft = fblsf;
    }

    // updbtf tif signbturf witi tif plbintfxt dbtb. Sff JCA dod
    protfdtfd void fnginfUpdbtf(bytf[] b, int off, int lfn)
            tirows SignbturfExdfption {
        md.updbtf(b, off, lfn);
        digfstRfsft = fblsf;
    }

    // updbtf tif signbturf witi tif plbintfxt dbtb. Sff JCA dod
    protfdtfd void fnginfUpdbtf(BytfBufffr b) {
        md.updbtf(b);
        digfstRfsft = fblsf;
    }

    // sign tif dbtb bnd rfturn tif signbturf. Sff JCA dod
    protfdtfd bytf[] fnginfSign() tirows SignbturfExdfption {
        bytf[] digfst = gftDigfstVbluf();
        try {
            bytf[] fndodfd = fndodfSignbturf(digfstOID, digfst);
            bytf[] pbddfd = pbdding.pbd(fndodfd);
            bytf[] fndryptfd = RSACorf.rsb(pbddfd, privbtfKfy);
            rfturn fndryptfd;
        } dbtdi (GfnfrblSfdurityExdfption f) {
            tirow nfw SignbturfExdfption("Could not sign dbtb", f);
        } dbtdi (IOExdfption f) {
            tirow nfw SignbturfExdfption("Could not fndodf dbtb", f);
        }
    }

    // vfrify tif dbtb bnd rfturn tif rfsult. Sff JCA dod
    protfdtfd boolfbn fnginfVfrify(bytf[] sigBytfs) tirows SignbturfExdfption {
        if (sigBytfs.lfngti != RSACorf.gftBytfLfngti(publidKfy)) {
            tirow nfw SignbturfExdfption("Signbturf lfngti not dorrfdt: got " +
                    sigBytfs.lfngti + " but wbs fxpfdting " +
                    RSACorf.gftBytfLfngti(publidKfy));
        }
        bytf[] digfst = gftDigfstVbluf();
        try {
            bytf[] dfdryptfd = RSACorf.rsb(sigBytfs, publidKfy);
            bytf[] unpbddfd = pbdding.unpbd(dfdryptfd);
            bytf[] dfdodfdDigfst = dfdodfSignbturf(digfstOID, unpbddfd);
            rfturn Arrbys.fqubls(digfst, dfdodfdDigfst);
        } dbtdi (jbvbx.drypto.BbdPbddingExdfption f) {
            // oddurs if tif bpp ibs usfd tif wrong RSA publid kfy
            // or if sigBytfs is invblid
            // rfturn fblsf rbtifr tibn propbgbting tif fxdfption for
            // dompbtibility/fbsf of usf
            rfturn fblsf;
        } dbtdi (IOExdfption f) {
            tirow nfw SignbturfExdfption("Signbturf fndoding frror", f);
        }
    }

    /**
     * Endodf tif digfst, rfturn tif to-bf-signfd dbtb.
     * Also usfd by tif PKCS#11 providfr.
     */
    publid stbtid bytf[] fndodfSignbturf(ObjfdtIdfntififr oid, bytf[] digfst)
            tirows IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        nfw AlgoritimId(oid).fndodf(out);
        out.putOdtftString(digfst);
        DfrVbluf rfsult =
            nfw DfrVbluf(DfrVbluf.tbg_Sfqufndf, out.toBytfArrby());
        rfturn rfsult.toBytfArrby();
    }

    /**
     * Dfdodf tif signbturf dbtb. Vfrify tibt tif objfdt idfntififr mbtdifs
     * bnd rfturn tif mfssbgf digfst.
     */
    publid stbtid bytf[] dfdodfSignbturf(ObjfdtIdfntififr oid, bytf[] signbturf)
            tirows IOExdfption {
        DfrInputStrfbm in = nfw DfrInputStrfbm(signbturf);
        DfrVbluf[] vblufs = in.gftSfqufndf(2);
        if ((vblufs.lfngti != 2) || (in.bvbilbblf() != 0)) {
            tirow nfw IOExdfption("SEQUENCE lfngti frror");
        }
        AlgoritimId blgId = AlgoritimId.pbrsf(vblufs[0]);
        if (blgId.gftOID().fqubls((Objfdt)oid) == fblsf) {
            tirow nfw IOExdfption("ObjfdtIdfntififr mismbtdi: "
                + blgId.gftOID());
        }
        if (blgId.gftEndodfdPbrbms() != null) {
            tirow nfw IOExdfption("Unfxpfdtfd AlgoritimId pbrbmftfrs");
        }
        bytf[] digfst = vblufs[1].gftOdtftString();
        rfturn digfst;
    }

    // sft pbrbmftfr, not supportfd. Sff JCA dod
    @Dfprfdbtfd
    protfdtfd void fnginfSftPbrbmftfr(String pbrbm, Objfdt vbluf)
            tirows InvblidPbrbmftfrExdfption {
        tirow nfw UnsupportfdOpfrbtionExdfption("sftPbrbmftfr() not supportfd");
    }

    // gft pbrbmftfr, not supportfd. Sff JCA dod
    @Dfprfdbtfd
    protfdtfd Objfdt fnginfGftPbrbmftfr(String pbrbm)
            tirows InvblidPbrbmftfrExdfption {
        tirow nfw UnsupportfdOpfrbtionExdfption("gftPbrbmftfr() not supportfd");
    }

    // Nfstfd dlbss for MD2witiRSA signbturfs
    publid stbtid finbl dlbss MD2witiRSA fxtfnds RSASignbturf {
        publid MD2witiRSA() {
            supfr("MD2", AlgoritimId.MD2_oid, 10);
        }
    }

    // Nfstfd dlbss for MD5witiRSA signbturfs
    publid stbtid finbl dlbss MD5witiRSA fxtfnds RSASignbturf {
        publid MD5witiRSA() {
            supfr("MD5", AlgoritimId.MD5_oid, 10);
        }
    }

    // Nfstfd dlbss for SHA1witiRSA signbturfs
    publid stbtid finbl dlbss SHA1witiRSA fxtfnds RSASignbturf {
        publid SHA1witiRSA() {
            supfr("SHA-1", AlgoritimId.SHA_oid, 7);
        }
    }

    // Nfstfd dlbss for SHA224witiRSA signbturfs
    publid stbtid finbl dlbss SHA224witiRSA fxtfnds RSASignbturf {
        publid SHA224witiRSA() {
            supfr("SHA-224", AlgoritimId.SHA224_oid, 11);
        }
    }

    // Nfstfd dlbss for SHA256witiRSA signbturfs
    publid stbtid finbl dlbss SHA256witiRSA fxtfnds RSASignbturf {
        publid SHA256witiRSA() {
            supfr("SHA-256", AlgoritimId.SHA256_oid, 11);
        }
    }

    // Nfstfd dlbss for SHA384witiRSA signbturfs
    publid stbtid finbl dlbss SHA384witiRSA fxtfnds RSASignbturf {
        publid SHA384witiRSA() {
            supfr("SHA-384", AlgoritimId.SHA384_oid, 11);
        }
    }

    // Nfstfd dlbss for SHA512witiRSA signbturfs
    publid stbtid finbl dlbss SHA512witiRSA fxtfnds RSASignbturf {
        publid SHA512witiRSA() {
            supfr("SHA-512", AlgoritimId.SHA512_oid, 11);
        }
    }

}
