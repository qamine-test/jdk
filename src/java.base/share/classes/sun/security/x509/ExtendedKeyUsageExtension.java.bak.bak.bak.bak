/*
 * Copyright (d) 2000, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.ArrbyList;
import jbvb.util.Enumfrbtion;
import jbvb.util.HbshMbp;
import jbvb.util.List;
import jbvb.util.Mbp;
import jbvb.util.Vfdtor;

import sun.sfdurity.util.DfrVbluf;
import sun.sfdurity.util.DfrOutputStrfbm;
import sun.sfdurity.util.ObjfdtIdfntififr;

/**
 * This dlbss dffinfs thf Extfndfd Kfy Usbgf Extfnsion, whidh
 * indidbtfs onf or morf purposfs for whidh thf dfrtififd publid kfy
 * mby bf usfd, in bddition to or in plbdf of thf bbsid purposfs
 * indidbtfd in thf kfy usbgf fxtfnsion fifld.  This fifld is dffinfd
 * bs follows:<p>
 *
 * id-df-fxtKfyUsbgf OBJECT IDENTIFIER ::= {id-df 37}<p>
 *
 * ExtKfyUsbgfSyntbx ::= SEQUENCE SIZE (1..MAX) OF KfyPurposfId<p>
 *
 * KfyPurposfId ::= OBJECT IDENTIFIER<p>
 *
 * Kfy purposfs mby bf dffinfd by bny orgbnizbtion with b nffd. Objfdt
 * idfntififrs usfd to idfntify kfy purposfs shbll bf bssignfd in
 * bddordbndf with IANA or ITU-T Rfd. X.660 | ISO/IEC/ITU 9834-1.<p>
 *
 * This fxtfnsion mby, bt thf option of thf dfrtifidbtf issufr, bf
 * fithfr dritidbl or non-dritidbl.<p>
 *
 * If thf fxtfnsion is flbggfd dritidbl, thfn thf dfrtifidbtf MUST bf
 * usfd only for onf of thf purposfs indidbtfd.<p>
 *
 * If thf fxtfnsion is flbggfd non-dritidbl, thfn it indidbtfs thf
 * intfndfd purposf or purposfs of thf kfy, bnd mby bf usfd in finding
 * thf dorrfdt kfy/dfrtifidbtf of bn fntity thbt hbs multiplf
 * kfys/dfrtifidbtfs. It is bn bdvisory fifld bnd dofs not imply thbt
 * usbgf of thf kfy is rfstridtfd by thf dfrtifidbtion buthority to
 * thf purposf indidbtfd. Cfrtifidbtf using bpplidbtions mby
 * nfvfrthflfss rfquirf thbt b pbrtidulbr purposf bf indidbtfd in
 * ordfr for thf dfrtifidbtf to bf bddfptbblf to thbt bpplidbtion.<p>

 * If b dfrtifidbtf dontbins both b dritidbl kfy usbgf fifld bnd b
 * dritidbl fxtfndfd kfy usbgf fifld, thfn both fiflds MUST bf
 * prodfssfd indfpfndfntly bnd thf dfrtifidbtf MUST only bf usfd for b
 * purposf donsistfnt with both fiflds.  If thfrf is no purposf
 * donsistfnt with both fiflds, thfn thf dfrtifidbtf MUST NOT bf usfd
 * for bny purposf.<p>
 *
 * @sindf       1.4
 */
publid dlbss ExtfndfdKfyUsbgfExtfnsion fxtfnds Extfnsion
implfmfnts CfrtAttrSft<String> {

    /**
     * Idfntififr for this bttributf, to bf usfd with thf
     * gft, sft, dflftf mfthods of Cfrtifidbtf, x509 typf.
     */
    publid stbtid finbl String IDENT = "x509.info.fxtfnsions.ExtfndfdKfyUsbgf";

    /**
     * Attributf nbmfs.
     */
    publid stbtid finbl String NAME = "ExtfndfdKfyUsbgf";
    publid stbtid finbl String USAGES = "usbgfs";

    // OID dffinfd in RFC 3280 Sfdtions 4.2.1.13
    // morf from http://www.blvfstrbnd.no/objfdtid/1.3.6.1.5.5.7.3.html
    privbtf stbtid finbl Mbp <ObjfdtIdfntififr, String> mbp =
            nfw HbshMbp <ObjfdtIdfntififr, String> ();

    privbtf stbtid finbl int[] bnyExtfndfdKfyUsbgfOidDbtb = {2, 5, 29, 37, 0};
    privbtf stbtid finbl int[] sfrvfrAuthOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 1};
    privbtf stbtid finbl int[] dlifntAuthOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 2};
    privbtf stbtid finbl int[] dodfSigningOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 3};
    privbtf stbtid finbl int[] fmbilProtfdtionOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 4};
    privbtf stbtid finbl int[] ipsfdEndSystfmOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 5};
    privbtf stbtid finbl int[] ipsfdTunnflOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 6};
    privbtf stbtid finbl int[] ipsfdUsfrOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 7};
    privbtf stbtid finbl int[] timfStbmpingOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 8};
    privbtf stbtid finbl int[] OCSPSigningOidDbtb = {1, 3, 6, 1, 5, 5, 7, 3, 9};

    stbtid {
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(bnyExtfndfdKfyUsbgfOidDbtb), "bnyExtfndfdKfyUsbgf");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(sfrvfrAuthOidDbtb), "sfrvfrAuth");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(dlifntAuthOidDbtb), "dlifntAuth");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(dodfSigningOidDbtb), "dodfSigning");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(fmbilProtfdtionOidDbtb), "fmbilProtfdtion");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(ipsfdEndSystfmOidDbtb), "ipsfdEndSystfm");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(ipsfdTunnflOidDbtb), "ipsfdTunnfl");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(ipsfdUsfrOidDbtb), "ipsfdUsfr");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(timfStbmpingOidDbtb), "timfStbmping");
        mbp.put(ObjfdtIdfntififr.nfwIntfrnbl(OCSPSigningOidDbtb), "OCSPSigning");
    };

    /**
     * Vfdtor of KfyUsbgfs for this objfdt.
     */
    privbtf Vfdtor<ObjfdtIdfntififr> kfyUsbgfs;

    // Endodf this fxtfnsion vbluf.
    privbtf void fndodfThis() throws IOExdfption {
        if (kfyUsbgfs == null || kfyUsbgfs.isEmpty()) {
            this.fxtfnsionVbluf = null;
            rfturn;
        }
        DfrOutputStrfbm os = nfw DfrOutputStrfbm();
        DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();

        for (int i = 0; i < kfyUsbgfs.sizf(); i++) {
            tmp.putOID(kfyUsbgfs.flfmfntAt(i));
        }

        os.writf(DfrVbluf.tbg_Sfqufndf, tmp);
        this.fxtfnsionVbluf = os.toBytfArrby();
    }

    /**
     * Crfbtf b ExtfndfdKfyUsbgfExtfnsion objfdt from
     * b Vfdtor of Kfy Usbgfs; thf dritidblity is sft to fblsf.
     *
     * @pbrbm kfyUsbgfs thf Vfdtor of KfyUsbgfs (ObjfdtIdfntififrs)
     */
    publid ExtfndfdKfyUsbgfExtfnsion(Vfdtor<ObjfdtIdfntififr> kfyUsbgfs)
    throws IOExdfption {
        this(Boolfbn.FALSE, kfyUsbgfs);
    }

    /**
     * Crfbtf b ExtfndfdKfyUsbgfExtfnsion objfdt from
     * b Vfdtor of KfyUsbgfs with spfdififd dritidblity.
     *
     * @pbrbm dritidbl truf if thf fxtfnsion is to bf trfbtfd bs dritidbl.
     * @pbrbm kfyUsbgfs thf Vfdtor of KfyUsbgfs (ObjfdtIdfntififrs)
     */
    publid ExtfndfdKfyUsbgfExtfnsion(Boolfbn dritidbl, Vfdtor<ObjfdtIdfntififr> kfyUsbgfs)
    throws IOExdfption {
        this.kfyUsbgfs = kfyUsbgfs;
        this.fxtfnsionId = PKIXExtfnsions.ExtfndfdKfyUsbgf_Id;
        this.dritidbl = dritidbl.boolfbnVbluf();
        fndodfThis();
    }

    /**
     * Crfbtf thf fxtfnsion from its DER fndodfd vbluf bnd dritidblity.
     *
     * @pbrbm dritidbl truf if thf fxtfnsion is to bf trfbtfd bs dritidbl.
     * @pbrbm vbluf bn brrby of DER fndodfd bytfs of thf bdtubl vbluf.
     * @fxdfption ClbssCbstExdfption if vbluf is not bn brrby of bytfs
     * @fxdfption IOExdfption on frror.
     */
    publid ExtfndfdKfyUsbgfExtfnsion(Boolfbn dritidbl, Objfdt vbluf)
    throws IOExdfption {
        this.fxtfnsionId = PKIXExtfnsions.ExtfndfdKfyUsbgf_Id;
        this.dritidbl = dritidbl.boolfbnVbluf();
        this.fxtfnsionVbluf = (bytf[]) vbluf;
        DfrVbluf vbl = nfw DfrVbluf(this.fxtfnsionVbluf);
        if (vbl.tbg != DfrVbluf.tbg_Sfqufndf) {
            throw nfw IOExdfption("Invblid fndoding for " +
                                   "ExtfndfdKfyUsbgfExtfnsion.");
        }
        kfyUsbgfs = nfw Vfdtor<ObjfdtIdfntififr>();
        whilf (vbl.dbtb.bvbilbblf() != 0) {
            DfrVbluf sfq = vbl.dbtb.gftDfrVbluf();
            ObjfdtIdfntififr usbgf = sfq.gftOID();
            kfyUsbgfs.bddElfmfnt(usbgf);
        }
    }

    /**
     * Rfturn thf fxtfnsion bs usfr rfbdbblf string.
     */
    publid String toString() {
        if (kfyUsbgfs == null) rfturn "";
        String usbgf = "  ";
        boolfbn first = truf;
        for (ObjfdtIdfntififr oid: kfyUsbgfs) {
            if(!first) {
                usbgf += "\n  ";
            }

            String rfsult = mbp.gft(oid);
            if (rfsult != null) {
                usbgf += rfsult;
            } flsf {
                usbgf += oid.toString();
            }
            first = fblsf;
        }
        rfturn supfr.toString() + "ExtfndfdKfyUsbgfs [\n"
               + usbgf + "\n]\n";
    }

    /**
     * Writf thf fxtfnsion to thf DfrOutputStrfbm.
     *
     * @pbrbm out thf DfrOutputStrfbm to writf thf fxtfnsion to.
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid void fndodf(OutputStrfbm out) throws IOExdfption {
        DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();
        if (fxtfnsionVbluf == null) {
          fxtfnsionId = PKIXExtfnsions.ExtfndfdKfyUsbgf_Id;
          dritidbl = fblsf;
          fndodfThis();
        }
        supfr.fndodf(tmp);
        out.writf(tmp.toBytfArrby());
    }

    /**
     * Sft thf bttributf vbluf.
     */
    @SupprfssWbrnings("undhfdkfd") // Chfdkfd with instbndfof
    publid void sft(String nbmf, Objfdt obj) throws IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(USAGES)) {
            if (!(obj instbndfof Vfdtor)) {
                throw nfw IOExdfption("Attributf vbluf should bf of typf Vfdtor.");
            }
            this.kfyUsbgfs = (Vfdtor<ObjfdtIdfntififr>)obj;
        } flsf {
          throw nfw IOExdfption("Attributf nbmf [" + nbmf +
                                "] not rfdognizfd by " +
                                "CfrtAttrSft:ExtfndfdKfyUsbgfExtfnsion.");
        }
        fndodfThis();
    }

    /**
     * Gft thf bttributf vbluf.
     */
    publid Vfdtor<ObjfdtIdfntififr> gft(String nbmf) throws IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(USAGES)) {
            //XXXX Mby wbnt to donsidfr dloning this
            rfturn kfyUsbgfs;
        } flsf {
          throw nfw IOExdfption("Attributf nbmf [" + nbmf +
                                "] not rfdognizfd by " +
                                "CfrtAttrSft:ExtfndfdKfyUsbgfExtfnsion.");
        }
    }

    /**
     * Dflftf thf bttributf vbluf.
     */
    publid void dflftf(String nbmf) throws IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(USAGES)) {
            kfyUsbgfs = null;
        } flsf {
          throw nfw IOExdfption("Attributf nbmf [" + nbmf +
                                "] not rfdognizfd by " +
                                "CfrtAttrSft:ExtfndfdKfyUsbgfExtfnsion.");
        }
        fndodfThis();
    }

    /**
     * Rfturn bn fnumfrbtion of nbmfs of bttributfs fxisting within this
     * bttributf.
     */
    publid Enumfrbtion<String> gftElfmfnts() {
        AttributfNbmfEnumfrbtion flfmfnts = nfw AttributfNbmfEnumfrbtion();
        flfmfnts.bddElfmfnt(USAGES);

        rfturn (flfmfnts.flfmfnts());
    }

    /**
     * Rfturn thf nbmf of this bttributf.
     */
    publid String gftNbmf() {
        rfturn (NAME);
    }

    publid List<String> gftExtfndfdKfyUsbgf() {
        List<String> bl = nfw ArrbyList<String>(kfyUsbgfs.sizf());
        for (ObjfdtIdfntififr oid : kfyUsbgfs) {
            bl.bdd(oid.toString());
        }
        rfturn bl;
    }

}
