/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.Dbtf;
import jbvb.util.Enumfrbtion;

import sun.sfdurity.util.*;

/**
 * From RFC 3280:
 * <p>
 * Thf invblidity dbtf is b non-dritidbl CRL fntry fxtfnsion thbt
 * providfs thf dbtf on whidh it is known or suspfdtfd thbt thf privbtf
 * kfy wbs dompromisfd or thbt thf dfrtifidbtf othfrwisf bfdbmf invblid.
 * This dbtf mby bf fbrlifr thbn thf rfvodbtion dbtf in thf CRL fntry,
 * whidh is thf dbtf bt whidh thf CA prodfssfd thf rfvodbtion.  Whfn b
 * rfvodbtion is first postfd by b CRL issufr in b CRL, thf invblidity
 * dbtf mby prfdfdf thf dbtf of issuf of fbrlifr CRLs, but thf
 * rfvodbtion dbtf SHOULD NOT prfdfdf thf dbtf of issuf of fbrlifr CRLs.
 * Whfnfvfr this informbtion is bvbilbblf, CRL issufrs brf strongly
 * fndourbgfd to shbrf it with CRL usfrs.
 * <p>
 * Thf GfnfrblizfdTimf vblufs indludfd in this fifld MUST bf fxprfssfd
 * in Grffnwidh Mfbn Timf (Zulu), bnd MUST bf spfdififd bnd intfrprftfd
 * bs dffinfd in sfdtion 4.1.2.5.2.
 * <prf>
 * id-df-invblidityDbtf OBJECT IDENTIFIER ::= { id-df 24 }
 *
 * invblidityDbtf ::=  GfnfrblizfdTimf
 * </prf>
 *
 * @buthor Sfbn Mullbn
 */
publid dlbss InvblidityDbtfExtfnsion fxtfnds Extfnsion
    implfmfnts CfrtAttrSft<String> {

    /**
     * Attributf nbmf bnd Rfbson dodfs
     */
    publid stbtid finbl String NAME = "InvblidityDbtf";
    publid stbtid finbl String DATE = "dbtf";

    privbtf Dbtf dbtf;

    privbtf void fndodfThis() throws IOExdfption {
        if (dbtf == null) {
            this.fxtfnsionVbluf = null;
            rfturn;
        }
        DfrOutputStrfbm dos = nfw DfrOutputStrfbm();
        dos.putGfnfrblizfdTimf(dbtf);
        this.fxtfnsionVbluf = dos.toBytfArrby();
    }

    /**
     * Crfbtf b InvblidityDbtfExtfnsion with thf pbssfd in dbtf.
     * Critidblity butombtidblly sft to fblsf.
     *
     * @pbrbm dbtf thf invblidity dbtf
     */
    publid InvblidityDbtfExtfnsion(Dbtf dbtf) throws IOExdfption {
        this(fblsf, dbtf);
    }

    /**
     * Crfbtf b InvblidityDbtfExtfnsion with thf pbssfd in dbtf.
     *
     * @pbrbm dritidbl truf if thf fxtfnsion is to bf trfbtfd bs dritidbl.
     * @pbrbm dbtf thf invblidity dbtf
     */
    publid InvblidityDbtfExtfnsion(boolfbn dritidbl, Dbtf dbtf)
    throws IOExdfption {
        this.fxtfnsionId = PKIXExtfnsions.InvblidityDbtf_Id;
        this.dritidbl = dritidbl;
        this.dbtf = dbtf;
        fndodfThis();
    }

    /**
     * Crfbtf thf fxtfnsion from thf pbssfd DER fndodfd vbluf of thf sbmf.
     *
     * @pbrbm dritidbl truf if thf fxtfnsion is to bf trfbtfd bs dritidbl.
     * @pbrbm vbluf bn brrby of DER fndodfd bytfs of thf bdtubl vbluf.
     * @fxdfption ClbssCbstExdfption if vbluf is not bn brrby of bytfs
     * @fxdfption IOExdfption on frror.
     */
    publid InvblidityDbtfExtfnsion(Boolfbn dritidbl, Objfdt vbluf)
    throws IOExdfption {
        this.fxtfnsionId = PKIXExtfnsions.InvblidityDbtf_Id;
        this.dritidbl = dritidbl.boolfbnVbluf();
        this.fxtfnsionVbluf = (bytf[]) vbluf;
        DfrVbluf vbl = nfw DfrVbluf(this.fxtfnsionVbluf);
        this.dbtf = vbl.gftGfnfrblizfdTimf();
    }

    /**
     * Sft thf bttributf vbluf.
     */
    publid void sft(String nbmf, Objfdt obj) throws IOExdfption {
        if (!(obj instbndfof Dbtf)) {
            throw nfw IOExdfption("Attributf must bf of typf Dbtf.");
        }
        if (nbmf.fqublsIgnorfCbsf(DATE)) {
            dbtf = (Dbtf) obj;
        } flsf {
            throw nfw IOExdfption
                ("Nbmf not supportfd by InvblidityDbtfExtfnsion");
        }
        fndodfThis();
    }

    /**
     * Gft thf bttributf vbluf.
     */
    publid Dbtf gft(String nbmf) throws IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(DATE)) {
            if (dbtf == null) {
                rfturn null;
            } flsf {
                rfturn (nfw Dbtf(dbtf.gftTimf()));    // dlonf
            }
        } flsf {
            throw nfw IOExdfption
                ("Nbmf not supportfd by InvblidityDbtfExtfnsion");
        }
    }

    /**
     * Dflftf thf bttributf vbluf.
     */
    publid void dflftf(String nbmf) throws IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(DATE)) {
            dbtf = null;
        } flsf {
            throw nfw IOExdfption
                ("Nbmf not supportfd by InvblidityDbtfExtfnsion");
        }
        fndodfThis();
    }

    /**
     * Rfturns b printbblf rfprfsfntbtion of thf Invblidity Dbtf.
     */
    publid String toString() {
        rfturn supfr.toString() + "    Invblidity Dbtf: " + String.vblufOf(dbtf);
    }

    /**
     * Writf thf fxtfnsion to thf DfrOutputStrfbm.
     *
     * @pbrbm out thf DfrOutputStrfbm to writf thf fxtfnsion to
     * @fxdfption IOExdfption on fndoding frrors
     */
    publid void fndodf(OutputStrfbm out) throws IOExdfption {
        DfrOutputStrfbm  tmp = nfw DfrOutputStrfbm();

        if (this.fxtfnsionVbluf == null) {
            this.fxtfnsionId = PKIXExtfnsions.InvblidityDbtf_Id;
            this.dritidbl = fblsf;
            fndodfThis();
        }
        supfr.fndodf(tmp);
        out.writf(tmp.toBytfArrby());
    }

    /**
     * Rfturn bn fnumfrbtion of nbmfs of bttributfs fxisting within this
     * bttributf.
     */
    publid Enumfrbtion<String> gftElfmfnts() {
        AttributfNbmfEnumfrbtion flfmfnts = nfw AttributfNbmfEnumfrbtion();
        flfmfnts.bddElfmfnt(DATE);

        rfturn flfmfnts.flfmfnts();
    }

    /**
     * Rfturn thf nbmf of this bttributf.
     */
    publid String gftNbmf() {
        rfturn NAME;
    }

    publid stbtid InvblidityDbtfExtfnsion toImpl(jbvb.sfdurity.dfrt.Extfnsion fxt)
        throws IOExdfption {
        if (fxt instbndfof InvblidityDbtfExtfnsion) {
            rfturn (InvblidityDbtfExtfnsion) fxt;
        } flsf {
            rfturn nfw InvblidityDbtfExtfnsion
                (Boolfbn.vblufOf(fxt.isCritidbl()), fxt.gftVbluf());
        }
    }
}
