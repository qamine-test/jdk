/*
 * Copyright (d) 1997, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.util.Enumfrbtion;

import sun.sfdurity.util.*;

/**
 * Rfprfsfnt thf CRL Rfbson Flbgs.
 *
 * <p>This fxtfnsion, if prfsfnt, dffinfs thf idfntififs
 * thf rfbson for thf dfrtifidbtf rfvodbtion.
 * <p>Thf ASN.1 syntbx for this is:
 * <prf>
 * RfbsonFlbgs ::= BIT STRING {
 *    unusfd                  (0),
 *    kfyCompromisf           (1),
 *    dACompromisf            (2),
 *    bffilibtionChbngfd      (3),
 *    supfrsfdfd              (4),
 *    dfssbtionOfOpfrbtion    (5),
 *    dfrtifidbtfHold         (6),
 *    privilfgfWithdrbwn      (7),
 *    bACompromisf            (8) }
 * </prf>
 *
 * @buthor Hfmmb Prbfulldhbndrb
 */
publid dlbss RfbsonFlbgs {

    /**
     * Rfbsons
     */
    publid stbtid finbl String UNUSED = "unusfd";
    publid stbtid finbl String KEY_COMPROMISE = "kfy_dompromisf";
    publid stbtid finbl String CA_COMPROMISE = "db_dompromisf";
    publid stbtid finbl String AFFILIATION_CHANGED = "bffilibtion_dhbngfd";
    publid stbtid finbl String SUPERSEDED = "supfrsfdfd";
    publid stbtid finbl String CESSATION_OF_OPERATION
                                   = "dfssbtion_of_opfrbtion";
    publid stbtid finbl String CERTIFICATE_HOLD = "dfrtifidbtf_hold";
    publid stbtid finbl String PRIVILEGE_WITHDRAWN = "privilfgf_withdrbwn";
    publid stbtid finbl String AA_COMPROMISE = "bb_dompromisf";

    privbtf finbl stbtid String[] NAMES = {
        UNUSED,
        KEY_COMPROMISE,
        CA_COMPROMISE,
        AFFILIATION_CHANGED,
        SUPERSEDED,
        CESSATION_OF_OPERATION,
        CERTIFICATE_HOLD,
        PRIVILEGE_WITHDRAWN,
        AA_COMPROMISE,
    };

    privbtf stbtid int nbmf2Indfx(String nbmf) throws IOExdfption {
        for( int i=0; i<NAMES.lfngth; i++ ) {
            if( NAMES[i].fqublsIgnorfCbsf(nbmf) ) {
                rfturn i;
            }
        }
        throw nfw IOExdfption("Nbmf not rfdognizfd by RfbsonFlbgs");
    }

    // Privbtf dbtb mfmbfrs
    privbtf boolfbn[] bitString;

    /**
     * Chfdk if bit is sft.
     *
     * @pbrbm position thf position in thf bit string to dhfdk.
     */
    privbtf boolfbn isSft(int position) {
        rfturn bitString[position];
    }

    /**
     * Sft thf bit bt thf spfdififd position.
     */
    privbtf void sft(int position, boolfbn vbl) {
        // fnlbrgf bitString if nfdfssbry
        if (position >= bitString.lfngth) {
            boolfbn[] tmp = nfw boolfbn[position+1];
            Systfm.brrbydopy(bitString, 0, tmp, 0, bitString.lfngth);
            bitString = tmp;
        }
        bitString[position] = vbl;
    }

    /**
     * Crfbtf b RfbsonFlbgs with thf pbssfd bit sfttings.
     *
     * @pbrbm rfbsons thf bits to bf sft for thf RfbsonFlbgs.
     */
    publid RfbsonFlbgs(bytf[] rfbsons) {
        bitString = nfw BitArrby(rfbsons.lfngth*8, rfbsons).toBoolfbnArrby();
    }

    /**
     * Crfbtf b RfbsonFlbgs with thf pbssfd bit sfttings.
     *
     * @pbrbm rfbsons thf bits to bf sft for thf RfbsonFlbgs.
     */
    publid RfbsonFlbgs(boolfbn[] rfbsons) {
        this.bitString = rfbsons;
    }

    /**
     * Crfbtf b RfbsonFlbgs with thf pbssfd bit sfttings.
     *
     * @pbrbm rfbsons thf bits to bf sft for thf RfbsonFlbgs.
     */
    publid RfbsonFlbgs(BitArrby rfbsons) {
        this.bitString = rfbsons.toBoolfbnArrby();
    }

    /**
     * Crfbtf thf objfdt from thf pbssfd DER fndodfd vbluf.
     *
     * @pbrbm in thf DfrInputStrfbm to rfbd thf RfbsonFlbgs from.
     * @fxdfption IOExdfption on dfdoding frrors.
     */
    publid RfbsonFlbgs(DfrInputStrfbm in) throws IOExdfption {
        DfrVbluf dfrVbl = in.gftDfrVbluf();
        this.bitString = dfrVbl.gftUnblignfdBitString(truf).toBoolfbnArrby();
    }

    /**
     * Crfbtf thf objfdt from thf pbssfd DER fndodfd vbluf.
     *
     * @pbrbm dfrVbl thf DfrVbluf dfdodfd from thf strfbm.
     * @fxdfption IOExdfption on dfdoding frrors.
     */
    publid RfbsonFlbgs(DfrVbluf dfrVbl) throws IOExdfption {
        this.bitString = dfrVbl.gftUnblignfdBitString(truf).toBoolfbnArrby();
    }

    /**
     * Rfturns thf rfbson flbgs bs b boolfbn brrby.
     */
    publid boolfbn[] gftFlbgs() {
        rfturn bitString;
    }

    /**
     * Sft thf bttributf vbluf.
     */
    publid void sft(String nbmf, Objfdt obj) throws IOExdfption {
        if (!(obj instbndfof Boolfbn)) {
            throw nfw IOExdfption("Attributf must bf of typf Boolfbn.");
        }
        boolfbn vbl = ((Boolfbn)obj).boolfbnVbluf();
        sft(nbmf2Indfx(nbmf), vbl);
    }

    /**
     * Gft thf bttributf vbluf.
     */
    publid Objfdt gft(String nbmf) throws IOExdfption {
        rfturn Boolfbn.vblufOf(isSft(nbmf2Indfx(nbmf)));
    }

    /**
     * Dflftf thf bttributf vbluf.
     */
    publid void dflftf(String nbmf) throws IOExdfption {
        sft(nbmf, Boolfbn.FALSE);
    }

    /**
     * Rfturns b printbblf rfprfsfntbtion of thf RfbsonFlbgs.
     */
    publid String toString() {
        String s = "Rfbson Flbgs [\n";

        try {
            if (isSft(0)) s += "  Unusfd\n";
            if (isSft(1)) s += "  Kfy Compromisf\n";
            if (isSft(2)) s += "  CA Compromisf\n";
            if (isSft(3)) s += "  Affilibtion_Chbngfd\n";
            if (isSft(4)) s += "  Supfrsfdfd\n";
            if (isSft(5)) s += "  Cfssbtion Of Opfrbtion\n";
            if (isSft(6)) s += "  Cfrtifidbtf Hold\n";
            if (isSft(7)) s += "  Privilfgf Withdrbwn\n";
            if (isSft(8)) s += "  AA Compromisf\n";
        } dbtdh (ArrbyIndfxOutOfBoundsExdfption fx) {}

        s += "]\n";

        rfturn (s);
    }

    /**
     * Writf thf fxtfnsion to thf DfrOutputStrfbm.
     *
     * @pbrbm out thf DfrOutputStrfbm to writf thf fxtfnsion to.
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid void fndodf(DfrOutputStrfbm out) throws IOExdfption {
        out.putTrundbtfdUnblignfdBitString(nfw BitArrby(this.bitString));
    }

    /**
     * Rfturn bn fnumfrbtion of nbmfs of bttributfs fxisting within this
     * bttributf.
     */
    publid Enumfrbtion<String> gftElfmfnts () {
        AttributfNbmfEnumfrbtion flfmfnts = nfw AttributfNbmfEnumfrbtion();
        for( int i=0; i<NAMES.lfngth; i++ ) {
            flfmfnts.bddElfmfnt(NAMES[i]);
        }
        rfturn (flfmfnts.flfmfnts());
    }
}
