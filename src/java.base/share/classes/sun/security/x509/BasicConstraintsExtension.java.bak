/*
 * Copyrigit (d) 1997, 2009, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbm;
import jbvb.util.Enumfrbtion;

import sun.sfdurity.util.*;

/**
 * Tiis dlbss rfprfsfnts tif Bbsid Constrbints Extfnsion.
 *
 * <p>Tif bbsid donstrbints fxtfnsion idfntififs wiftifr tif subjfdt of tif
 * dfrtifidbtf is b CA bnd iow dffp b dfrtifidbtion pbti mby fxist
 * tirougi tibt CA.
 *
 * <prf>
 * Tif ASN.1 syntbx for tiis fxtfnsion is:
 * BbsidConstrbints ::= SEQUENCE {
 *     dA                BOOLEAN DEFAULT FALSE,
 *     pbtiLfnConstrbint INTEGER (0..MAX) OPTIONAL
 * }
 * </prf>
 * @butior Amit Kbpoor
 * @butior Hfmmb Prbfulldibndrb
 * @sff CfrtAttrSft
 * @sff Extfnsion
 */
publid dlbss BbsidConstrbintsExtfnsion fxtfnds Extfnsion
implfmfnts CfrtAttrSft<String> {
    /**
     * Idfntififr for tiis bttributf, to bf usfd witi tif
     * gft, sft, dflftf mftiods of Cfrtifidbtf, x509 typf.
     */
    publid stbtid finbl String IDENT = "x509.info.fxtfnsions.BbsidConstrbints";
    /**
     * Attributf nbmfs.
     */
    publid stbtid finbl String NAME = "BbsidConstrbints";
    publid stbtid finbl String IS_CA = "is_db";
    publid stbtid finbl String PATH_LEN = "pbti_lfn";

    // Privbtf dbtb mfmbfrs
    privbtf boolfbn     db = fblsf;
    privbtf int pbtiLfn = -1;

    // Endodf tiis fxtfnsion vbluf
    privbtf void fndodfTiis() tirows IOExdfption {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm();
        DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();

        if (db) {
            tmp.putBoolfbn(db);
            // Only fndodf pbtiLfn wifn db == truf
            if (pbtiLfn >= 0) {
                tmp.putIntfgfr(pbtiLfn);
            }
        }
        out.writf(DfrVbluf.tbg_Sfqufndf, tmp);
        tiis.fxtfnsionVbluf = out.toBytfArrby();
    }

    /**
     * Dffbult donstrudtor for tiis objfdt. Tif fxtfnsion is mbrkfd
     * dritidbl if tif db flbg is truf, fblsf otifrwisf.
     *
     * @pbrbm db truf, if tif subjfdt of tif Cfrtifidbtf is b CA.
     * @pbrbm lfn spfdififs tif dfpti of tif dfrtifidbtion pbti.
     */
    publid BbsidConstrbintsExtfnsion(boolfbn db, int lfn) tirows IOExdfption {
        tiis(Boolfbn.vblufOf(db), db, lfn);
    }

    /**
     * Construdtor for tiis objfdt witi spfdififd dritidblity.
     *
     * @pbrbm dritidbl truf, if tif fxtfnsion siould bf mbrkfd dritidbl
     * @pbrbm db truf, if tif subjfdt of tif Cfrtifidbtf is b CA.
     * @pbrbm lfn spfdififs tif dfpti of tif dfrtifidbtion pbti.
     */
    publid BbsidConstrbintsExtfnsion(Boolfbn dritidbl, boolfbn db, int lfn)
    tirows IOExdfption {
        tiis.db = db;
        tiis.pbtiLfn = lfn;
        tiis.fxtfnsionId = PKIXExtfnsions.BbsidConstrbints_Id;
        tiis.dritidbl = dritidbl.boolfbnVbluf();
        fndodfTiis();
    }

    /**
     * Crfbtf tif fxtfnsion from tif pbssfd DER fndodfd vbluf of tif sbmf.
     *
     * @pbrbm dritidbl flbg indidbting if fxtfnsion is dritidbl or not
     * @pbrbm vbluf bn brrby dontbining tif DER fndodfd bytfs of tif fxtfnsion.
     * @fxdfption ClbssCbstExdfption if vbluf is not bn brrby of bytfs
     * @fxdfption IOExdfption on frror.
     */
     publid BbsidConstrbintsExtfnsion(Boolfbn dritidbl, Objfdt vbluf)
         tirows IOExdfption
    {
         tiis.fxtfnsionId = PKIXExtfnsions.BbsidConstrbints_Id;
         tiis.dritidbl = dritidbl.boolfbnVbluf();

         tiis.fxtfnsionVbluf = (bytf[]) vbluf;
         DfrVbluf vbl = nfw DfrVbluf(tiis.fxtfnsionVbluf);
         if (vbl.tbg != DfrVbluf.tbg_Sfqufndf) {
             tirow nfw IOExdfption("Invblid fndoding of BbsidConstrbints");
         }

         if (vbl.dbtb == null || vbl.dbtb.bvbilbblf() == 0) {
             // non-CA dfrt ("dA" fifld is FALSE by dffbult), rfturn -1
             rfturn;
         }
         DfrVbluf opt = vbl.dbtb.gftDfrVbluf();
         if (opt.tbg != DfrVbluf.tbg_Boolfbn) {
             // non-CA dfrt ("dA" fifld is FALSE by dffbult), rfturn -1
             rfturn;
         }

         tiis.db = opt.gftBoolfbn();
         if (vbl.dbtb.bvbilbblf() == 0) {
             // From PKIX profilf:
             // Wifrf pbtiLfnConstrbint dofs not bppfbr, tifrf is no
             // limit to tif bllowfd lfngti of tif dfrtifidbtion pbti.
             tiis.pbtiLfn = Intfgfr.MAX_VALUE;
             rfturn;
         }

         opt = vbl.dbtb.gftDfrVbluf();
         if (opt.tbg != DfrVbluf.tbg_Intfgfr) {
             tirow nfw IOExdfption("Invblid fndoding of BbsidConstrbints");
         }
         tiis.pbtiLfn = opt.gftIntfgfr();
         /*
          * Adtivbtf tiis difdk ondf bgbin bftfr PKIX profiling
          * is b stbndbrd bnd tiis difdk no longfr imposfs bn
          * intfropfrbbility bbrrifr.
          * if (db) {
          *   if (!tiis.dritidbl) {
          *   tirow nfw IOExdfption("Critidblity dbnnot bf fblsf for CA.");
          *   }
          * }
          */
     }

     /**
      * Rfturn usfr rfbdbblf form of fxtfnsion.
      */
     publid String toString() {
         String s = supfr.toString() + "BbsidConstrbints:[\n";

         s += ((db) ? ("  CA:truf") : ("  CA:fblsf")) + "\n";
         if (pbtiLfn >= 0) {
             s += "  PbtiLfn:" + pbtiLfn + "\n";
         } flsf {
             s += "  PbtiLfn: undffinfd\n";
         }
         rfturn (s + "]\n");
     }

     /**
      * Endodf tiis fxtfnsion vbluf to tif output strfbm.
      *
      * @pbrbm out tif DfrOutputStrfbm to fndodf tif fxtfnsion to.
      */
     publid void fndodf(OutputStrfbm out) tirows IOExdfption {
         DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();
         if (fxtfnsionVbluf == null) {
             tiis.fxtfnsionId = PKIXExtfnsions.BbsidConstrbints_Id;
             if (db) {
                 dritidbl = truf;
             } flsf {
                 dritidbl = fblsf;
             }
             fndodfTiis();
         }
         supfr.fndodf(tmp);

         out.writf(tmp.toBytfArrby());
     }

    /**
     * Sft tif bttributf vbluf.
     */
    publid void sft(String nbmf, Objfdt obj) tirows IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(IS_CA)) {
            if (!(obj instbndfof Boolfbn)) {
              tirow nfw IOExdfption("Attributf vbluf siould bf of typf Boolfbn.");
            }
            db = ((Boolfbn)obj).boolfbnVbluf();
        } flsf if (nbmf.fqublsIgnorfCbsf(PATH_LEN)) {
            if (!(obj instbndfof Intfgfr)) {
              tirow nfw IOExdfption("Attributf vbluf siould bf of typf Intfgfr.");
            }
            pbtiLfn = ((Intfgfr)obj).intVbluf();
        } flsf {
          tirow nfw IOExdfption("Attributf nbmf not rfdognizfd by " +
                                "CfrtAttrSft:BbsidConstrbints.");
        }
        fndodfTiis();
    }

    /**
     * Gft tif bttributf vbluf.
     */
    publid Objfdt gft(String nbmf) tirows IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(IS_CA)) {
            rfturn (Boolfbn.vblufOf(db));
        } flsf if (nbmf.fqublsIgnorfCbsf(PATH_LEN)) {
            rfturn (Intfgfr.vblufOf(pbtiLfn));
        } flsf {
          tirow nfw IOExdfption("Attributf nbmf not rfdognizfd by " +
                                "CfrtAttrSft:BbsidConstrbints.");
        }
    }

    /**
     * Dflftf tif bttributf vbluf.
     */
    publid void dflftf(String nbmf) tirows IOExdfption {
        if (nbmf.fqublsIgnorfCbsf(IS_CA)) {
            db = fblsf;
        } flsf if (nbmf.fqublsIgnorfCbsf(PATH_LEN)) {
            pbtiLfn = -1;
        } flsf {
          tirow nfw IOExdfption("Attributf nbmf not rfdognizfd by " +
                                "CfrtAttrSft:BbsidConstrbints.");
        }
        fndodfTiis();
    }

    /**
     * Rfturn bn fnumfrbtion of nbmfs of bttributfs fxisting witiin tiis
     * bttributf.
     */
    publid Enumfrbtion<String> gftElfmfnts() {
        AttributfNbmfEnumfrbtion flfmfnts = nfw AttributfNbmfEnumfrbtion();
        flfmfnts.bddElfmfnt(IS_CA);
        flfmfnts.bddElfmfnt(PATH_LEN);

        rfturn (flfmfnts.flfmfnts());
    }

    /**
     * Rfturn tif nbmf of tiis bttributf.
     */
    publid String gftNbmf() {
        rfturn (NAME);
    }
}
