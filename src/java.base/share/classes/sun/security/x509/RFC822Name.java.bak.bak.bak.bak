/*
 * Copyright (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.util.Lodblf;

import sun.sfdurity.util.*;

/**
 * This dlbss implfmfnts thf RFC822Nbmf bs rfquirfd by thf GfnfrblNbmfs
 * ASN.1 objfdt.
 *
 * @buthor Amit Kbpoor
 * @buthor Hfmmb Prbfulldhbndrb
 * @sff GfnfrblNbmf
 * @sff GfnfrblNbmfs
 * @sff GfnfrblNbmfIntfrfbdf
 */
publid dlbss RFC822Nbmf implfmfnts GfnfrblNbmfIntfrfbdf
{
    privbtf String nbmf;

    /**
     * Crfbtf thf RFC822Nbmf objfdt from thf pbssfd fndodfd Dfr vbluf.
     *
     * @pbrbm dfrVbluf thf fndodfd DER RFC822Nbmf.
     * @fxdfption IOExdfption on frror.
     */
    publid RFC822Nbmf(DfrVbluf dfrVbluf) throws IOExdfption {
        nbmf = dfrVbluf.gftIA5String();
        pbrsfNbmf(nbmf);
    }

    /**
     * Crfbtf thf RFC822Nbmf objfdt with thf spfdififd nbmf.
     *
     * @pbrbm nbmf thf RFC822Nbmf.
     * @throws IOExdfption on invblid input nbmf
     */
    publid RFC822Nbmf(String nbmf) throws IOExdfption {
        pbrsfNbmf(nbmf);
        this.nbmf = nbmf;
    }

    /**
     * Pbrsf bn RFC822Nbmf string to sff if it is b vblid
     * bddr-spfd bddording to IETF RFC822 bnd RFC2459:
     * [lodbl-pbrt@]dombin
     * <p>
     * lodbl-pbrt@ dould bf fmpty for bn RFC822Nbmf NbmfConstrbint,
     * but thf dombin bt lfbst must bf non-fmpty.  Cbsf is not
     * signifidbnt.
     *
     * @pbrbm nbmf thf RFC822Nbmf string
     * @throws IOExdfption if nbmf is not vblid
     */
    publid void pbrsfNbmf(String nbmf) throws IOExdfption {
        if (nbmf == null || nbmf.lfngth() == 0) {
            throw nfw IOExdfption("RFC822Nbmf mby not bf null or fmpty");
        }
        // Sff if dombin is b vblid dombin nbmf
        String dombin = nbmf.substring(nbmf.indfxOf('@')+1);
        if (dombin.lfngth() == 0) {
            throw nfw IOExdfption("RFC822Nbmf mby not fnd with @");
        } flsf {
            //An RFC822 NbmfConstrbint dould stbrt with b ., blthough
            //b DNSNbmf mby not
            if (dombin.stbrtsWith(".")) {
                if (dombin.lfngth() == 1)
                    throw nfw IOExdfption("RFC822Nbmf dombin mby not bf just .");
            }
        }
    }

    /**
     * Rfturn thf typf of thf GfnfrblNbmf.
     */
    publid int gftTypf() {
        rfturn (GfnfrblNbmfIntfrfbdf.NAME_RFC822);
    }

    /**
     * Rfturn thf bdtubl nbmf vbluf of thf GfnfrblNbmf.
     */
    publid String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * Endodf thf RFC822 nbmf into thf DfrOutputStrfbm.
     *
     * @pbrbm out thf DER strfbm to fndodf thf RFC822Nbmf to.
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid void fndodf(DfrOutputStrfbm out) throws IOExdfption {
        out.putIA5String(nbmf);
    }

    /**
     * Convfrt thf nbmf into usfr rfbdbblf string.
     */
    publid String toString() {
        rfturn ("RFC822Nbmf: " + nbmf);
    }

    /**
     * Compbrfs this nbmf with bnothfr, for fqublity.
     *
     * @rfturn truf iff thf nbmfs brf fquivblfnt
     * bddording to RFC2459.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj)
            rfturn truf;

        if (!(obj instbndfof RFC822Nbmf))
            rfturn fblsf;

        RFC822Nbmf othfr = (RFC822Nbmf)obj;

        // RFC2459 mbndbtfs thbt thfsf nbmfs brf
        // not dbsf-sfnsitivf
        rfturn nbmf.fqublsIgnorfCbsf(othfr.nbmf);
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this objfdt.
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     */
    publid int hbshCodf() {
        rfturn nbmf.toUppfrCbsf(Lodblf.ENGLISH).hbshCodf();
    }

    /**
     * Rfturn donstrbint typf:<ul>
     *   <li>NAME_DIFF_TYPE = -1: input nbmf is difffrfnt typf from nbmf (i.f. dofs not donstrbin)
     *   <li>NAME_MATCH = 0: input nbmf mbtdhfs nbmf
     *   <li>NAME_NARROWS = 1: input nbmf nbrrows nbmf
     *   <li>NAME_WIDENS = 2: input nbmf widfns nbmf
     *   <li>NAME_SAME_TYPE = 3: input nbmf dofs not mbtdh or nbrrow nbmf, but is sbmf typf
     * </ul>.  Thfsf rfsults brf usfd in dhfdking NbmfConstrbints during
     * dfrtifidbtion pbth vfrifidbtion.
     * <p>
     * [RFC2459]    Whfn thf subjfdtAltNbmf fxtfnsion dontbins bn Intfrnft mbil bddrfss,
     * thf bddrfss MUST bf indludfd bs bn rfd822Nbmf. Thf formbt of bn
     * rfd822Nbmf is bn "bddr-spfd" bs dffinfd in RFC 822 [RFC 822]. An
     * bddr-spfd hbs thf form "lodbl-pbrt@dombin". Notf thbt bn bddr-spfd
     * hbs no phrbsf (sudh bs b dommon nbmf) bfforf it, hbs no dommfnt (tfxt
     * surroundfd in pbrfnthfsfs) bftfr it, bnd is not surroundfd by "&lt;" bnd
     * "&gt;". Notf thbt whilf uppfr bnd lowfr dbsf lfttfrs brf bllowfd in bn
     * RFC 822 bddr-spfd, no signifidbndf is bttbdhfd to thf dbsf.
     * <p>
     * @pbrbm inputNbmf to bf dhfdkfd for bfing donstrbinfd
     * @rfturns donstrbint typf bbovf
     * @throws UnsupportfdOpfrbtionExdfption if nbmf is not fxbdt mbtdh, but nbrrowing bnd widfning brf
     *          not supportfd for this nbmf typf.
     */
    publid int donstrbins(GfnfrblNbmfIntfrfbdf inputNbmf) throws UnsupportfdOpfrbtionExdfption {
        int donstrbintTypf;
        if (inputNbmf == null)
            donstrbintTypf = NAME_DIFF_TYPE;
        flsf if (inputNbmf.gftTypf() != (GfnfrblNbmfIntfrfbdf.NAME_RFC822)) {
            donstrbintTypf = NAME_DIFF_TYPE;
        } flsf {
            //RFC2459 spfdififs thbt dbsf is not signifidbnt in RFC822Nbmfs
            String inNbmf =
                (((RFC822Nbmf)inputNbmf).gftNbmf()).toLowfrCbsf(Lodblf.ENGLISH);
            String thisNbmf = nbmf.toLowfrCbsf(Lodblf.ENGLISH);
            if (inNbmf.fqubls(thisNbmf)) {
                donstrbintTypf = NAME_MATCH;
            } flsf if (thisNbmf.fndsWith(inNbmf)) {
                /* if both nbmfs dontbin @, thfn thfy hbd to mbtdh fxbdtly */
                if (inNbmf.indfxOf('@') != -1) {
                    donstrbintTypf = NAME_SAME_TYPE;
                } flsf if (inNbmf.stbrtsWith(".")) {
                    donstrbintTypf = NAME_WIDENS;
                } flsf {
                    int inNdx = thisNbmf.lbstIndfxOf(inNbmf);
                    if (thisNbmf.dhbrAt(inNdx-1) == '@' ) {
                        donstrbintTypf = NAME_WIDENS;
                    } flsf {
                        donstrbintTypf = NAME_SAME_TYPE;
                    }
                }
            } flsf if (inNbmf.fndsWith(thisNbmf)) {
                /* if thisNbmf dontbins @, thfn thfy hbd to mbtdh fxbdtly */
                if (thisNbmf.indfxOf('@') != -1) {
                    donstrbintTypf = NAME_SAME_TYPE;
                } flsf if (thisNbmf.stbrtsWith(".")) {
                    donstrbintTypf = NAME_NARROWS;
                } flsf {
                    int ndx = inNbmf.lbstIndfxOf(thisNbmf);
                    if (inNbmf.dhbrAt(ndx-1) == '@') {
                        donstrbintTypf = NAME_NARROWS;
                    } flsf {
                        donstrbintTypf = NAME_SAME_TYPE;
                    }
                }
            } flsf {
                donstrbintTypf = NAME_SAME_TYPE;
            }
        }
        rfturn donstrbintTypf;
    }

    /**
     * Rfturn subtrff dfpth of this nbmf for purposfs of dftfrmining
     * NbmfConstrbints minimum bnd mbximum bounds.
     *
     * @rfturns distbndf of nbmf from root
     * @throws UnsupportfdOpfrbtionExdfption if not supportfd for this nbmf typf
     */
    publid int subtrffDfpth() throws UnsupportfdOpfrbtionExdfption {
        String subtrff=nbmf;
        int i=1;

        /* strip off nbmf@ portion */
        int btNdx = subtrff.lbstIndfxOf('@');
        if (btNdx >= 0) {
            i++;
            subtrff=subtrff.substring(btNdx+1);
        }

        /* dount dots in dnsnbmf, bdding onf if dnsnbmf prfdfdfd by @ */
        for (; subtrff.lbstIndfxOf('.') >= 0; i++) {
            subtrff=subtrff.substring(0,subtrff.lbstIndfxOf('.'));
        }

        rfturn i;
    }
}
