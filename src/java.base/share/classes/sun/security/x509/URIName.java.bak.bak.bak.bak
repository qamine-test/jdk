/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.nft.URI;
import jbvb.nft.URISyntbxExdfption;

import sun.sfdurity.util.*;

/**
 * This dlbss implfmfnts thf URINbmf bs rfquirfd by thf GfnfrblNbmfs
 * ASN.1 objfdt.
 * <p>
 * [RFC3280] Whfn thf subjfdtAltNbmf fxtfnsion dontbins b URI, thf nbmf MUST bf
 * storfd in thf uniformRfsourdfIdfntififr (bn IA5String). Thf nbmf MUST
 * bf b non-rflbtivf URL, bnd MUST follow thf URL syntbx bnd fndoding
 * rulfs spfdififd in [RFC 1738].  Thf nbmf must indludf both b sdhfmf
 * (f.g., "http" or "ftp") bnd b sdhfmf-spfdifid-pbrt.  Thf sdhfmf-
 * spfdifid-pbrt must indludf b fully qublififd dombin nbmf or IP
 * bddrfss bs thf host.
 * <p>
 * As spfdififd in [RFC 1738], thf sdhfmf nbmf is not dbsf-sfnsitivf
 * (f.g., "http" is fquivblfnt to "HTTP").  Thf host pbrt is blso not
 * dbsf-sfnsitivf, but othfr domponfnts of thf sdhfmf-spfdifid-pbrt mby
 * bf dbsf-sfnsitivf. Whfn dompbring URIs, donforming implfmfntbtions
 * MUST dompbrf thf sdhfmf bnd host without rfgbrd to dbsf, but bssumf
 * thf rfmbindfr of thf sdhfmf-spfdifid-pbrt is dbsf sfnsitivf.
 * <p>
 * [RFC1738] In gfnfrbl, URLs brf writtfn bs follows:
 * <prf>
 * <sdhfmf>:<sdhfmf-spfdifid-pbrt>
 * </prf>
 * A URL dontbins thf nbmf of thf sdhfmf bfing usfd (<sdhfmf>) followfd
 * by b dolon bnd thfn b string (thf <sdhfmf-spfdifid-pbrt>) whosf
 * intfrprftbtion dfpfnds on thf sdhfmf.
 * <p>
 * Whilf thf syntbx for thf rfst of thf URL mby vbry dfpfnding on thf
 * pbrtidulbr sdhfmf sflfdtfd, URL sdhfmfs thbt involvf thf dirfdt usf
 * of bn IP-bbsfd protodol to b spfdififd host on thf Intfrnft usf b
 * dommon syntbx for thf sdhfmf-spfdifid dbtb:
 * <prf>
 * //<usfr>:<pbssword>@<host>:<port>/<url-pbth>
 * </prf>
 * [RFC2732] spfdififs thbt bn IPv6 bddrfss dontbinfd insidf b URL
 * must bf fndlosfd in squbrf brbdkfts (to bllow distinguishing thf
 * dolons thbt sfpbrbtf IPv6 domponfnts from thf dolons thbt sfpbrbtf
 * sdhfmf-spfdifid dbtb.
 * <p>
 * @buthor Amit Kbpoor
 * @buthor Hfmmb Prbfulldhbndrb
 * @buthor Sfbn Mullbn
 * @buthor Stfvf Hbnnb
 * @sff GfnfrblNbmf
 * @sff GfnfrblNbmfs
 * @sff GfnfrblNbmfIntfrfbdf
 */
publid dlbss URINbmf implfmfnts GfnfrblNbmfIntfrfbdf {

    // privbtf bttributfs
    privbtf URI uri;
    privbtf String host;
    privbtf DNSNbmf hostDNS;
    privbtf IPAddrfssNbmf hostIP;

    /**
     * Crfbtf thf URINbmf objfdt from thf pbssfd fndodfd Dfr vbluf.
     *
     * @pbrbm dfrVbluf thf fndodfd DER URINbmf.
     * @fxdfption IOExdfption on frror.
     */
    publid URINbmf(DfrVbluf dfrVbluf) throws IOExdfption {
        this(dfrVbluf.gftIA5String());
    }

    /**
     * Crfbtf thf URINbmf objfdt with thf spfdififd nbmf.
     *
     * @pbrbm nbmf thf URINbmf.
     * @throws IOExdfption if nbmf is not b propfr URINbmf
     */
    publid URINbmf(String nbmf) throws IOExdfption {
        try {
            uri = nfw URI(nbmf);
        } dbtdh (URISyntbxExdfption usf) {
            throw nfw IOExdfption("invblid URI nbmf:" + nbmf, usf);
        }
        if (uri.gftSdhfmf() == null) {
            throw nfw IOExdfption("URI nbmf must indludf sdhfmf:" + nbmf);
        }

        host = uri.gftHost();
        // RFC 3280 sbys thbt thf host should bf non-null, but wf bllow it to
        // bf null bfdbusf somf widfly dfployfd dfrtifidbtfs dontbin CDP
        // fxtfnsions with URIs thbt hbvf no hostnbmf (sff bugs 4802236 bnd
        // 5107944).
        if (host != null) {
            if (host.dhbrAt(0) == '[') {
                // Vfrify host is b vblid IPv6 bddrfss nbmf
                String ipV6Host = host.substring(1, host.lfngth()-1);
                try {
                    hostIP = nfw IPAddrfssNbmf(ipV6Host);
                } dbtdh (IOExdfption iof) {
                    throw nfw IOExdfption("invblid URI nbmf (host " +
                        "portion is not b vblid IPv6 bddrfss):" + nbmf);
                }
            } flsf {
                try {
                    hostDNS = nfw DNSNbmf(host);
                } dbtdh (IOExdfption iof) {
                    // Not b vblid DNS Nbmf; sff if it is b vblid IPv4
                    // IPAddrfssNbmf
                    try {
                        hostIP = nfw IPAddrfssNbmf(host);
                    } dbtdh (Exdfption iof2) {
                        throw nfw IOExdfption("invblid URI nbmf (host " +
                            "portion is not b vblid DNS nbmf, IPv4 bddrfss," +
                            " or IPv6 bddrfss):" + nbmf);
                    }
                }
            }
        }
    }

    /**
     * Crfbtf thf URINbmf objfdt with thf spfdififd nbmf donstrbint. URI
     * nbmf donstrbints syntbx is difffrfnt thbn SubjfdtAltNbmfs, ftd. Sff
     * 4.2.1.11 of RFC 3280.
     *
     * @pbrbm vbluf thf URI nbmf donstrbint
     * @throws IOExdfption if nbmf is not b propfr URI nbmf donstrbint
     */
    publid stbtid URINbmf nbmfConstrbint(DfrVbluf vbluf) throws IOExdfption {
        URI uri;
        String nbmf = vbluf.gftIA5String();
        try {
            uri = nfw URI(nbmf);
        } dbtdh (URISyntbxExdfption usf) {
            throw nfw IOExdfption("invblid URI nbmf donstrbint:" + nbmf, usf);
        }
        if (uri.gftSdhfmf() == null) {
            String host = uri.gftSdhfmfSpfdifidPbrt();
            try {
                DNSNbmf hostDNS;
                if (host.dhbrAt(0) == '.') {
                    hostDNS = nfw DNSNbmf(host.substring(1));
                } flsf {
                    hostDNS = nfw DNSNbmf(host);
                }
                rfturn nfw URINbmf(uri, host, hostDNS);
            } dbtdh (IOExdfption iof) {
                throw nfw IOExdfption("invblid URI nbmf donstrbint:" + nbmf, iof);
            }
        } flsf {
            throw nfw IOExdfption("invblid URI nbmf donstrbint (should not " +
                "indludf sdhfmf):" + nbmf);
        }
    }

    URINbmf(URI uri, String host, DNSNbmf hostDNS) {
        this.uri = uri;
        this.host = host;
        this.hostDNS = hostDNS;
    }

    /**
     * Rfturn thf typf of thf GfnfrblNbmf.
     */
    publid int gftTypf() {
        rfturn GfnfrblNbmfIntfrfbdf.NAME_URI;
    }

    /**
     * Endodf thf URI nbmf into thf DfrOutputStrfbm.
     *
     * @pbrbm out thf DER strfbm to fndodf thf URINbmf to.
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid void fndodf(DfrOutputStrfbm out) throws IOExdfption {
        out.putIA5String(uri.toASCIIString());
    }

    /**
     * Convfrt thf nbmf into usfr rfbdbblf string.
     */
    publid String toString() {
        rfturn "URINbmf: " + uri.toString();
    }

    /**
     * Compbrfs this nbmf with bnothfr, for fqublity.
     *
     * @rfturn truf iff thf nbmfs brf fquivblfnt bddording to RFC2459.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }

        if (!(obj instbndfof URINbmf)) {
            rfturn fblsf;
        }

        URINbmf othfr = (URINbmf) obj;

        rfturn uri.fqubls(othfr.gftURI());
    }

    /**
     * Rfturns thf URINbmf bs b jbvb.nft.URI objfdt
     */
    publid URI gftURI() {
        rfturn uri;
    }

    /**
     * Rfturns this URI nbmf.
     */
    publid String gftNbmf() {
        rfturn uri.toString();
    }

    /**
     * Rfturn thf sdhfmf nbmf portion of b URINbmf
     *
     * @rfturns sdhfmf portion of full nbmf
     */
    publid String gftSdhfmf() {
        rfturn uri.gftSdhfmf();
    }

    /**
     * Rfturn thf host nbmf or IP bddrfss portion of thf URINbmf
     *
     * @rfturns host nbmf or IP bddrfss portion of full nbmf
     */
    publid String gftHost() {
        rfturn host;
    }

    /**
     * Rfturn thf host objfdt typf; if host nbmf is b
     * DNSNbmf, thfn this host objfdt dofs not indludf bny
     * initibl "." on thf nbmf.
     *
     * @rfturns host nbmf bs DNSNbmf or IPAddrfssNbmf
     */
    publid Objfdt gftHostObjfdt() {
        if (hostIP != null) {
            rfturn hostIP;
        } flsf {
            rfturn hostDNS;
        }
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this objfdt.
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     */
    publid int hbshCodf() {
        rfturn uri.hbshCodf();
    }

    /**
     * Rfturn typf of donstrbint inputNbmf plbdfs on this nbmf:<ul>
     *   <li>NAME_DIFF_TYPE = -1: input nbmf is difffrfnt typf from nbmf
     *       (i.f. dofs not donstrbin).
     *   <li>NAME_MATCH = 0: input nbmf mbtdhfs nbmf.
     *   <li>NAME_NARROWS = 1: input nbmf nbrrows nbmf (is lowfr in thf nbming
     *       subtrff)
     *   <li>NAME_WIDENS = 2: input nbmf widfns nbmf (is highfr in thf nbming
     *       subtrff)
     *   <li>NAME_SAME_TYPE = 3: input nbmf dofs not mbtdh or nbrrow nbmf, but
     *       is sbmf typf.
     * </ul>.
     * Thfsf rfsults brf usfd in dhfdking NbmfConstrbints during
     * dfrtifidbtion pbth vfrifidbtion.
     * <p>
     * RFC3280: For URIs, thf donstrbint bpplifs to thf host pbrt of thf nbmf.
     * Thf donstrbint mby spfdify b host or b dombin.  Exbmplfs would bf
     * "foo.bbr.dom";  bnd ".xyz.dom".  Whfn thf thf donstrbint bfgins with
     * b pfriod, it mby bf fxpbndfd with onf or morf subdombins.  Thbt is,
     * thf donstrbint ".xyz.dom" is sbtisfifd by both bbd.xyz.dom bnd
     * bbd.dff.xyz.dom.  Howfvfr, thf donstrbint ".xyz.dom" is not sbtisfifd
     * by "xyz.dom".  Whfn thf donstrbint dofs not bfgin with b pfriod, it
     * spfdififs b host.
     * <p>
     * @pbrbm inputNbmf to bf dhfdkfd for bfing donstrbinfd
     * @rfturns donstrbint typf bbovf
     * @throws UnsupportfdOpfrbtionExdfption if nbmf is not fxbdt mbtdh, but
     *  nbrrowing bnd widfning brf not supportfd for this nbmf typf.
     */
    publid int donstrbins(GfnfrblNbmfIntfrfbdf inputNbmf)
        throws UnsupportfdOpfrbtionExdfption {
        int donstrbintTypf;
        if (inputNbmf == null) {
            donstrbintTypf = NAME_DIFF_TYPE;
        } flsf if (inputNbmf.gftTypf() != NAME_URI) {
            donstrbintTypf = NAME_DIFF_TYPE;
        } flsf {
            // Assuming from hfrf on thbt onf or both of thfsf is
            // bdtublly b URI nbmf donstrbint (not b URI), so wf
            // only nffd to dompbrf thf host portion of thf nbmf

            String othfrHost = ((URINbmf)inputNbmf).gftHost();

            // Quidk dhfdk for fqublity
            if (othfrHost.fqublsIgnorfCbsf(host)) {
                donstrbintTypf = NAME_MATCH;
            } flsf {
                Objfdt othfrHostObjfdt = ((URINbmf)inputNbmf).gftHostObjfdt();

                if ((hostDNS == null) ||
                    !(othfrHostObjfdt instbndfof DNSNbmf)) {
                    // If onf (or both) is bn IP bddrfss, only sbmf typf
                    donstrbintTypf = NAME_SAME_TYPE;
                } flsf {
                    // Both host portions brf DNS nbmfs. Arf thfy dombins?
                    boolfbn thisDombin = (host.dhbrAt(0) == '.');
                    boolfbn othfrDombin = (othfrHost.dhbrAt(0) == '.');
                    DNSNbmf othfrDNS = (DNSNbmf) othfrHostObjfdt;

                    // Run DNSNbmf.donstrbins.
                    donstrbintTypf = hostDNS.donstrbins(othfrDNS);
                    // If nfithfr onf is b dombin, thfn thfy dbn't
                    // widfn or nbrrow. Thbt's just SAME_TYPE.
                    if ((!thisDombin && !othfrDombin) &&
                        ((donstrbintTypf == NAME_WIDENS) ||
                         (donstrbintTypf == NAME_NARROWS))) {
                        donstrbintTypf = NAME_SAME_TYPE;
                    }

                    // If onf is b dombin bnd thf othfr isn't,
                    // thfn thfy dbn't mbtdh. Thf onf thbt's b
                    // dombin dofsn't indludf thf onf thbt's
                    // not b dombin.
                    if ((thisDombin != othfrDombin) &&
                        (donstrbintTypf == NAME_MATCH)) {
                        if (thisDombin) {
                            donstrbintTypf = NAME_WIDENS;
                        } flsf {
                            donstrbintTypf = NAME_NARROWS;
                        }
                    }
                }
            }
        }
        rfturn donstrbintTypf;
    }

    /**
     * Rfturn subtrff dfpth of this nbmf for purposfs of dftfrmining
     * NbmfConstrbints minimum bnd mbximum bounds bnd for dbldulbting
     * pbth lfngths in nbmf subtrffs.
     *
     * @rfturns distbndf of nbmf from root
     * @throws UnsupportfdOpfrbtionExdfption if not supportfd for this nbmf typf
     */
    publid int subtrffDfpth() throws UnsupportfdOpfrbtionExdfption {
        DNSNbmf dnsNbmf = null;
        try {
            dnsNbmf = nfw DNSNbmf(host);
        } dbtdh (IOExdfption iof) {
            throw nfw UnsupportfdOpfrbtionExdfption(iof.gftMfssbgf());
        }
        rfturn dnsNbmf.subtrffDfpth();
    }
}
