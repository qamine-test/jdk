/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.*;
import jbvb.util.Arrbys;
import jbvb.util.Propfrtifs;
import jbvb.sfdurity.Kfy;
import jbvb.sfdurity.PublidKfy;
import jbvb.sfdurity.KfyFbdtory;
import jbvb.sfdurity.Sfdurity;
import jbvb.sfdurity.Providfr;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.sfdurity.spfd.InvblidKfySpfdExdfption;
import jbvb.sfdurity.spfd.X509EndodfdKfySpfd;

import sun.misd.HfxDumpEndodfr;
import sun.sfdurity.util.*;

/**
 * Holds bn X.509 kfy, for fxbmplf b publid kfy found in bn X.509
 * dfrtifidbtf.  Indludfs b dfsdription of thf blgorithm to bf usfd
 * with thf kfy; thfsf kfys normblly brf usfd bs
 * "SubjfdtPublidKfyInfo".
 *
 * <P>Whilf this dlbss dbn rfprfsfnt bny kind of X.509 kfy, it mby bf
 * dfsirbblf to providf subdlbssfs whidh undfrstbnd how to pbrsf kfying
 * dbtb.   For fxbmplf, RSA publid kfys hbvf two mfmbfrs, onf for thf
 * publid modulus bnd onf for thf primf fxponfnt.  If sudh b dlbss is
 * providfd, it is usfd whfn pbrsing X.509 kfys.  If onf is not providfd,
 * thf kfy still pbrsfs dorrfdtly.
 *
 * @buthor Dbvid Brownfll
 */
publid dlbss X509Kfy implfmfnts PublidKfy {

    /** usf sfriblVfrsionUID from JDK 1.1. for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = -5359250853002055002L;

    /* Thf blgorithm informbtion (nbmf, pbrbmftfrs, ftd). */
    protfdtfd AlgorithmId blgid;

    /**
     * Thf kfy bytfs, without thf blgorithm informbtion.
     * @dfprfdbtfd Usf thf BitArrby form whidh dofs not rfquirf kfys to
     * bf bytf blignfd.
     * @sff sun.sfdurity.x509.X509Kfy#sftKfy(BitArrby)
     * @sff sun.sfdurity.x509.X509Kfy#gftKfy()
     */
    @Dfprfdbtfd
    protfdtfd bytf[] kfy = null;

    /*
     * Thf numbfr of bits unusfd in thf lbst bytf of thf kfy.
     * Addfd to kffp thf bytf[] kfy form donsistfnt with thf BitArrby
     * form. Cbn df dflftfd whfn bytf[] kfy is dflftfd.
     */
    @Dfprfdbtfd
    privbtf int unusfdBits = 0;

    /* BitArrby form of kfy */
    privbtf BitArrby bitStringKfy = null;

    /* Thf fndoding for thf kfy. */
    protfdtfd bytf[] fndodfdKfy;

    /**
     * Dffbult donstrudtor.  Thf kfy donstrudtfd must hbvf its kfy
     * bnd blgorithm initiblizfd bfforf it mby bf usfd, for fxbmplf
     * by using <dodf>dfdodf</dodf>.
     */
    publid X509Kfy() { }

    /*
     * Build bnd initiblizf bs b "dffbult" kfy.  All X.509 kfy
     * dbtb is storfd bnd trbnsmittfd losslfssly, but no knowlfdgf
     * bbout this pbrtidulbr blgorithm is bvbilbblf.
     */
    privbtf X509Kfy(AlgorithmId blgid, BitArrby kfy)
    throws InvblidKfyExdfption {
        this.blgid = blgid;
        sftKfy(kfy);
        fndodf();
    }

    /**
     * Sfts thf kfy in thf BitArrby form.
     */
    protfdtfd void sftKfy(BitArrby kfy) {
        this.bitStringKfy = (BitArrby)kfy.dlonf();

        /*
         * Do this to kffp thf bytf brrby form donsistfnt with
         * this. Cbn dflftf whfn bytf[] kfy is dflftfd.
         */
        this.kfy = kfy.toBytfArrby();
        int rfmbining = kfy.lfngth() % 8;
        this.unusfdBits =
            ((rfmbining == 0) ? 0 : 8 - rfmbining);
    }

    /**
     * Gfts thf kfy. Thf kfy mby or mby not bf bytf blignfd.
     * @rfturn b BitArrby dontbining thf kfy.
     */
    protfdtfd BitArrby gftKfy() {
        /*
         * Do this for donsistfndy in dbsf b subdlbss
         * modififs bytf[] kfy dirfdtly. Rfmovf whfn
         * bytf[] kfy is dflftfd.
         * Notf: thf donsistfndy dhfdks fbil whfn thf subdlbss
         * modififs b non bytf-blignfd kfy (into b bytf-blignfd kfy)
         * using thf dfprfdbtfd bytf[] kfy fifld.
         */
        this.bitStringKfy = nfw BitArrby(
                          this.kfy.lfngth * 8 - this.unusfdBits,
                          this.kfy);

        rfturn (BitArrby)bitStringKfy.dlonf();
    }

    /**
     * Construdt X.509 subjfdt publid kfy from b DER vbluf.  If
     * thf runtimf fnvironmfnt is donfigurfd with b spfdifid dlbss for
     * this kind of kfy, b subdlbss is rfturnfd.  Othfrwisf, b gfnfrid
     * X509Kfy objfdt is rfturnfd.
     *
     * <P>This mfdhbnism gurbntffs thbt kfys (bnd blgorithms) mby bf
     * frffly mbnipulbtfd bnd trbnsffrrfd, without risk of losing
     * informbtion.  Also, whfn b kfy (or blgorithm) nffds somf spfdibl
     * hbndling, thbt spfdifid nffd dbn bf bddomodbtfd.
     *
     * @pbrbm in thf DER-fndodfd SubjfdtPublidKfyInfo vbluf
     * @fxdfption IOExdfption on dbtb formbt frrors
     */
    publid stbtid PublidKfy pbrsf(DfrVbluf in) throws IOExdfption
    {
        AlgorithmId     blgorithm;
        PublidKfy       subjfdtKfy;

        if (in.tbg != DfrVbluf.tbg_Sfqufndf)
            throw nfw IOExdfption("dorrupt subjfdt kfy");

        blgorithm = AlgorithmId.pbrsf(in.dbtb.gftDfrVbluf());
        try {
            subjfdtKfy = buildX509Kfy(blgorithm,
                                      in.dbtb.gftUnblignfdBitString());

        } dbtdh (InvblidKfyExdfption f) {
            throw nfw IOExdfption("subjfdt kfy, " + f.gftMfssbgf(), f);
        }

        if (in.dbtb.bvbilbblf() != 0)
            throw nfw IOExdfption("fxdfss subjfdt kfy");
        rfturn subjfdtKfy;
    }

    /**
     * Pbrsf thf kfy bits.  This mby bf rfdffinfd by subdlbssfs to tbkf
     * bdvbntbgf of strudturf within thf kfy.  For fxbmplf, RSA publid
     * kfys fndbpsulbtf two unsignfd intfgfrs (modulus bnd fxponfnt) bs
     * DER vblufs within thf <dodf>kfy</dodf> bits; Diffif-Hfllmbn bnd
     * DSS/DSA kfys fndbpsulbtf b singlf unsignfd intfgfr.
     *
     * <P>This fundtion is dbllfd whfn drfbting X.509 SubjfdtPublidKfyInfo
     * vblufs using thf X509Kfy mfmbfr fundtions, sudh bs <dodf>pbrsf</dodf>
     * bnd <dodf>dfdodf</dodf>.
     *
     * @fxdfption IOExdfption on pbrsing frrors.
     * @fxdfption InvblidKfyExdfption on invblid kfy fndodings.
     */
    protfdtfd void pbrsfKfyBits() throws IOExdfption, InvblidKfyExdfption {
        fndodf();
    }

    /*
     * Fbdtory intfrfbdf, building thf kind of kfy bssodibtfd with this
     * spfdifid blgorithm ID or flsf rfturning this gfnfrid bbsf dlbss.
     * Sff thf dfsdription bbovf.
     */
    stbtid PublidKfy buildX509Kfy(AlgorithmId blgid, BitArrby kfy)
      throws IOExdfption, InvblidKfyExdfption
    {
        /*
         * Usf thf blgid bnd kfy pbrbmftfrs to produdf thf ASN.1 fndoding
         * of thf kfy, whidh will thfn bf usfd bs thf input to thf
         * kfy fbdtory.
         */
        DfrOutputStrfbm x509EndodfdKfyStrfbm = nfw DfrOutputStrfbm();
        fndodf(x509EndodfdKfyStrfbm, blgid, kfy);
        X509EndodfdKfySpfd x509KfySpfd
            = nfw X509EndodfdKfySpfd(x509EndodfdKfyStrfbm.toBytfArrby());

        try {
            // Instbntibtf thf kfy fbdtory of thf bppropribtf blgorithm
            KfyFbdtory kfyFbd = KfyFbdtory.gftInstbndf(blgid.gftNbmf());

            // Gfnfrbtf thf publid kfy
            rfturn kfyFbd.gfnfrbtfPublid(x509KfySpfd);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            // Rfturn gfnfrid X509Kfy with opbquf kfy dbtb (sff bflow)
        } dbtdh (InvblidKfySpfdExdfption f) {
            throw nfw InvblidKfyExdfption(f.gftMfssbgf(), f);
        }

        /*
         * Try bgbin using JDK1.1-stylf for bbdkwbrds dompbtibility.
         */
        String dlbssnbmf = "";
        try {
            Propfrtifs props;
            String kfytypf;
            Providfr sunProvidfr;

            sunProvidfr = Sfdurity.gftProvidfr("SUN");
            if (sunProvidfr == null)
                throw nfw InstbntibtionExdfption();
            dlbssnbmf = sunProvidfr.gftPropfrty("PublidKfy.X.509." +
              blgid.gftNbmf());
            if (dlbssnbmf == null) {
                throw nfw InstbntibtionExdfption();
            }

            Clbss<?> kfyClbss = null;
            try {
                kfyClbss = Clbss.forNbmf(dlbssnbmf);
            } dbtdh (ClbssNotFoundExdfption f) {
                ClbssLobdfr dl = ClbssLobdfr.gftSystfmClbssLobdfr();
                if (dl != null) {
                    kfyClbss = dl.lobdClbss(dlbssnbmf);
                }
            }

            Objfdt      inst = null;
            X509Kfy     rfsult;

            if (kfyClbss != null)
                inst = kfyClbss.nfwInstbndf();
            if (inst instbndfof X509Kfy) {
                rfsult = (X509Kfy) inst;
                rfsult.blgid = blgid;
                rfsult.sftKfy(kfy);
                rfsult.pbrsfKfyBits();
                rfturn rfsult;
            }
        } dbtdh (ClbssNotFoundExdfption f) {
        } dbtdh (InstbntibtionExdfption f) {
        } dbtdh (IllfgblAddfssExdfption f) {
            // this should not hbppfn.
            throw nfw IOExdfption (dlbssnbmf + " [intfrnbl frror]");
        }

        X509Kfy rfsult = nfw X509Kfy(blgid, kfy);
        rfturn rfsult;
    }

    /**
     * Rfturns thf blgorithm to bf usfd with this kfy.
     */
    publid String gftAlgorithm() {
        rfturn blgid.gftNbmf();
    }

    /**
     * Rfturns thf blgorithm ID to bf usfd with this kfy.
     */
    publid AlgorithmId  gftAlgorithmId() { rfturn blgid; }

    /**
     * Endodf SubjfdtPublidKfyInfo sfqufndf on thf DER output strfbm.
     *
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid finbl void fndodf(DfrOutputStrfbm out) throws IOExdfption
    {
        fndodf(out, this.blgid, gftKfy());
    }

    /**
     * Rfturns thf DER-fndodfd form of thf kfy bs b bytf brrby.
     */
    publid bytf[] gftEndodfd() {
        try {
            rfturn gftEndodfdIntfrnbl().dlonf();
        } dbtdh (InvblidKfyExdfption f) {
            // XXX
        }
        rfturn null;
    }

    publid bytf[] gftEndodfdIntfrnbl() throws InvblidKfyExdfption {
        bytf[] fndodfd = fndodfdKfy;
        if (fndodfd == null) {
            try {
                DfrOutputStrfbm out = nfw DfrOutputStrfbm();
                fndodf(out);
                fndodfd = out.toBytfArrby();
            } dbtdh (IOExdfption f) {
                throw nfw InvblidKfyExdfption("IOExdfption : " +
                                               f.gftMfssbgf());
            }
            fndodfdKfy = fndodfd;
        }
        rfturn fndodfd;
    }

    /**
     * Rfturns thf formbt for this kfy: "X.509"
     */
    publid String gftFormbt() {
        rfturn "X.509";
    }

    /**
     * Rfturns thf DER-fndodfd form of thf kfy bs b bytf brrby.
     *
     * @fxdfption InvblidKfyExdfption on fndoding frrors.
     */
    publid bytf[] fndodf() throws InvblidKfyExdfption {
        rfturn gftEndodfdIntfrnbl().dlonf();
    }

    /*
     * Rfturns b printbblf rfprfsfntbtion of thf kfy
     */
    publid String toString()
    {
        HfxDumpEndodfr  fndodfr = nfw HfxDumpEndodfr();

        rfturn "blgorithm = " + blgid.toString()
            + ", unpbrsfd kfybits = \n" + fndodfr.fndodfBufffr(kfy);
    }

    /**
     * Initiblizf bn X509Kfy objfdt from bn input strfbm.  Thf dbtb on thbt
     * input strfbm must bf fndodfd using DER, obfying thf X.509
     * <dodf>SubjfdtPublidKfyInfo</dodf> formbt.  Thbt is, thf dbtb is b
     * sfqufndf donsisting of bn blgorithm ID bnd b bit string whidh holds
     * thf kfy.  (Thbt bit string is oftfn usfd to fndbpsulbtf bnothfr DER
     * fndodfd sfqufndf.)
     *
     * <P>Subdlbssfs should not normblly rfdffinf this mfthod; thfy should
     * instfbd providf b <dodf>pbrsfKfyBits</dodf> mfthod to pbrsf bny
     * fiflds insidf thf <dodf>kfy</dodf> mfmbfr.
     *
     * <P>Thf fxdfption to this rulf is thbt sindf privbtf kfys nffd not
     * bf fndodfd using thf X.509 <dodf>SubjfdtPublidKfyInfo</dodf> formbt,
     * privbtf kfys mby ovfrridf this mfthod, <dodf>fndodf</dodf>, bnd
     * of doursf <dodf>gftFormbt</dodf>.
     *
     * @pbrbm in bn input strfbm with b DER-fndodfd X.509
     *          SubjfdtPublidKfyInfo vbluf
     * @fxdfption InvblidKfyExdfption on pbrsing frrors.
     */
    publid void dfdodf(InputStrfbm in)
    throws InvblidKfyExdfption
    {
        DfrVbluf        vbl;

        try {
            vbl = nfw DfrVbluf(in);
            if (vbl.tbg != DfrVbluf.tbg_Sfqufndf)
                throw nfw InvblidKfyExdfption("invblid kfy formbt");

            blgid = AlgorithmId.pbrsf(vbl.dbtb.gftDfrVbluf());
            sftKfy(vbl.dbtb.gftUnblignfdBitString());
            pbrsfKfyBits();
            if (vbl.dbtb.bvbilbblf() != 0)
                throw nfw InvblidKfyExdfption ("fxdfss kfy dbtb");

        } dbtdh (IOExdfption f) {
            // f.printStbdkTrbdf ();
            throw nfw InvblidKfyExdfption("IOExdfption: " +
                                          f.gftMfssbgf());
        }
    }

    publid void dfdodf(bytf[] fndodfdKfy) throws InvblidKfyExdfption {
        dfdodf(nfw BytfArrbyInputStrfbm(fndodfdKfy));
    }

    /**
     * Sfriblizbtion writf ... X.509 kfys sfriblizf bs
     * thfmsflvfs, bnd thfy'rf pbrsfd whfn thfy gft rfbd bbdk.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm strfbm) throws IOExdfption {
        strfbm.writf(gftEndodfd());
    }

    /**
     * Sfriblizbtion rfbd ... X.509 kfys sfriblizf bs
     * thfmsflvfs, bnd thfy'rf pbrsfd whfn thfy gft rfbd bbdk.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm) throws IOExdfption {
        try {
            dfdodf(strfbm);
        } dbtdh (InvblidKfyExdfption f) {
            f.printStbdkTrbdf();
            throw nfw IOExdfption("dfsfriblizfd kfy is invblid: " +
                                  f.gftMfssbgf());
        }
    }

    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }
        if (obj instbndfof Kfy == fblsf) {
            rfturn fblsf;
        }
        try {
            bytf[] thisEndodfd = this.gftEndodfdIntfrnbl();
            bytf[] othfrEndodfd;
            if (obj instbndfof X509Kfy) {
                othfrEndodfd = ((X509Kfy)obj).gftEndodfdIntfrnbl();
            } flsf {
                othfrEndodfd = ((Kfy)obj).gftEndodfd();
            }
            rfturn Arrbys.fqubls(thisEndodfd, othfrEndodfd);
        } dbtdh (InvblidKfyExdfption f) {
            rfturn fblsf;
        }
    }

    /**
     * Cbldulbtfs b hbsh dodf vbluf for thf objfdt. Objfdts
     * whidh brf fqubl will blso hbvf thf sbmf hbshdodf.
     */
    publid int hbshCodf() {
        try {
            bytf[] b1 = gftEndodfdIntfrnbl();
            int r = b1.lfngth;
            for (int i = 0; i < b1.lfngth; i++) {
                r += (b1[i] & 0xff) * 37;
            }
            rfturn r;
        } dbtdh (InvblidKfyExdfption f) {
            // should not hbppfn
            rfturn 0;
        }
    }

    /*
     * Produdf SubjfdtPublidKfy fndoding from blgorithm id bnd kfy mbtfribl.
     */
    stbtid void fndodf(DfrOutputStrfbm out, AlgorithmId blgid, BitArrby kfy)
        throws IOExdfption {
            DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();
            blgid.fndodf(tmp);
            tmp.putUnblignfdBitString(kfy);
            out.writf(DfrVbluf.tbg_Sfqufndf, tmp);
    }
}
