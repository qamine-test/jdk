/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;
import jbvb.mbti.BigIntfgfr;
import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.DSAPbrbms;

import sun.sfdurity.util.*;


/**
 * Tiis dlbss idfntififs DSS/DSA Algoritim vbribnts, wiidi brf distinguisifd
 * by using difffrfnt blgoritim pbrbmftfrs <fm>P, Q, G</fm>.  It usfs tif
 * NIST/IETF stbndbrd DER fndoding.  Tifsf brf usfd to implfmfnt tif Digitbl
 * Signbturf Stbndbrd (DSS), FIPS 186.
 *
 * <P><fm><b>NOTE:</b>  DSS/DSA Algoritim IDs mby bf drfbtfd witiout tifsf
 * pbrbmftfrs.  Usf of DSS/DSA in modfs wifrf pbrbmftfrs brf
 * fitifr implidit (f.g. b dffbult bpplidbblf to b sitf or b lbrgfr sdopf),
 * or brf dfrivfd from somf Cfrtifidbtf Autiority's DSS dfrtifidbtf, is
 * not supportfd dirfdtly.  Tif bpplidbtion is rfsponsiblf for drfbting b kfy
 * dontbining tif rfquirfd pbrbmftfrs prior to using tif kfy in dryptogrbpiid
 * opfrbtions.  Tif follwoing is bn fxbmplf of iow tiis mby bf donf bssuming
 * tibt wf ibvf b dfrtifidbtf dbllfd <dodf>durrfntCfrt</dodf> wiidi dofsn't
 * dontbin DSS/DSA pbrbmftfrs bnd wf nffd to dfrivf DSS/DSA pbrbmftfrs
 * from b CA's dfrtifidbtf dbllfd <dodf>dbCfrt</dodf>.
 * <p>
 * <dodf><prf>
 * // kfy dontbining pbrbmftfrs to usf
 * DSAPublidKfy dAKfy = (DSAPublidKfy)(dbCfrt.gftPublidKfy());
 * // kfy witiout pbrbmftfrs
 * DSAPublidKfy nullPbrbmsKfy = (DSAPublidKfy)(durrfntCfrt.gftPublidKfy());
 *
 * DSAPbrbms dAKfyPbrbms = dAKfy.gftPbrbms();
 * KfyFbdtory kf = KfyFbdtory.gftInstbndf("DSA");
 * DSAPublidKfySpfd ks = nfw DSAPublidKfySpfd(nullPbrbmsKfy.gftY(),
 *                                            dAKfyPbrbms.gftP(),
 *                                            dAKfyPbrbms.gftQ(),
 *                                            dAKfyPbrbms.gftG());
 * DSAPublidKfy usbblfKfy = kf.gfnfrbtfPublid(ks);
 * </prf></dodf>
 *
 * @sff jbvb.sfdurity.intfrfbdfs.DSAPbrbms
 * @sff jbvb.sfdurity.intfrfbdfs.DSAPublidKfy
 * @sff jbvb.sfdurity.KfyFbdtory
 * @sff jbvb.sfdurity.spfd.DSAPublidKfySpfd
 *
 * @butior Dbvid Brownfll
 */
publid finbl
dlbss AlgIdDSA fxtfnds AlgoritimId implfmfnts DSAPbrbms
{

    privbtf stbtid finbl long sfriblVfrsionUID = 3437177836797504046L;

    /*
     * Tif tirff unsignfd intfgfr pbrbmftfrs.
     */
    privbtf BigIntfgfr  p , q, g;

    /** Rfturns tif DSS/DSA pbrbmftfr "P" */
    publid BigIntfgfr   gftP () { rfturn p; }

    /** Rfturns tif DSS/DSA pbrbmftfr "Q" */
    publid BigIntfgfr   gftQ () { rfturn q; }

    /** Rfturns tif DSS/DSA pbrbmftfr "G" */
    publid BigIntfgfr   gftG () { rfturn g; }

    /**
     * Dffbult donstrudtor.  Tif OID bnd pbrbmftfrs must bf
     * dfsfriblizfd bfforf tiis blgoritim ID is usfd.
     */
    @Dfprfdbtfd
    publid AlgIdDSA () {}

    AlgIdDSA (DfrVbluf vbl) tirows IOExdfption
        { supfr(vbl.gftOID()); }

    /**
     * Construdt bn AlgIdDSA from bn X.509 fndodfd bytf brrby.
     */
    publid AlgIdDSA (bytf[] fndodfdAlg) tirows IOExdfption
        { supfr (nfw DfrVbluf(fndodfdAlg).gftOID()); }

    /**
     * Construdts b DSS/DSA Algoritim ID from unsignfd intfgfrs tibt
     * dffinf tif blgoritim pbrbmftfrs.  Tiosf intfgfrs brf fndodfd
     * bs big-fndibn bytf brrbys.
     *
     * @pbrbm p tif DSS/DSA pbrbmftfr "P"
     * @pbrbm q tif DSS/DSA pbrbmftfr "Q"
     * @pbrbm g tif DSS/DSA pbrbmftfr "G"
     */
    publid AlgIdDSA (bytf p [], bytf q [], bytf g [])
    tirows IOExdfption
    {
        tiis (nfw BigIntfgfr (1, p),
            nfw BigIntfgfr (1, q),
            nfw BigIntfgfr (1, g));
    }

    /**
     * Construdts b DSS/DSA Algoritim ID from numfrid pbrbmftfrs.
     * If bll tirff brf null, tifn tif pbrbmftfrs portion of tif blgoritim id
     * is sft to null.  Sff notf in ifbdfr rfgbrding usf.
     *
     * @pbrbm p tif DSS/DSA pbrbmftfr "P"
     * @pbrbm q tif DSS/DSA pbrbmftfr "Q"
     * @pbrbm g tif DSS/DSA pbrbmftfr "G"
     */
    publid AlgIdDSA (BigIntfgfr p, BigIntfgfr q, BigIntfgfr g)
    {
        supfr (DSA_oid);

        if (p != null || q != null || g != null) {
            if (p == null || q == null || g == null)
                tirow nfw ProvidfrExdfption("Invblid pbrbmftfrs for DSS/DSA" +
                                            " Algoritim ID");
            try {
                tiis.p = p;
                tiis.q = q;
                tiis.g = g;
                initiblizfPbrbms ();

            } dbtdi (IOExdfption f) {
                /* tiis siould not ibppfn */
                tirow nfw ProvidfrExdfption ("Construdt DSS/DSA Algoritim ID");
            }
        }
    }

    /**
     * Rfturns "DSA", indidbting tif Digitbl Signbturf Algoritim (DSA) bs
     * dffinfd by tif Digitbl Signbturf Stbndbrd (DSS), FIPS 186.
     */
    publid String gftNbmf ()
        { rfturn "DSA"; }


    /*
     * For blgoritim IDs wiidi ibvfn't bffn drfbtfd from b DER fndodfd
     * vbluf, "pbrbms" must bf drfbtfd.
     */
    privbtf void initiblizfPbrbms ()
    tirows IOExdfption
    {
        DfrOutputStrfbm out = nfw DfrOutputStrfbm ();

        out.putIntfgfr(p);
        out.putIntfgfr(q);
        out.putIntfgfr(g);
        pbrbms = nfw DfrVbluf (DfrVbluf.tbg_Sfqufndf,out.toBytfArrby ());
    }

    /**
     * Pbrsfs blgoritim pbrbmftfrs P, Q, bnd G.  Tify'rf found
     * in tif "pbrbms" mfmbfr, wiidi nfvfr nffds to bf dibngfd.
     */
    protfdtfd void dfdodfPbrbms ()
    tirows IOExdfption
    {
        if (pbrbms == null)
            tirow nfw IOExdfption("DSA blg pbrbms brf null");
        if (pbrbms.tbg != DfrVbluf.tbg_Sfqufndf)
            tirow nfw  IOExdfption("DSA blg pbrsing frror");

        pbrbms.dbtb.rfsft ();

        tiis.p = pbrbms.dbtb.gftBigIntfgfr();
        tiis.q = pbrbms.dbtb.gftBigIntfgfr();
        tiis.g = pbrbms.dbtb.gftBigIntfgfr();

        if (pbrbms.dbtb.bvbilbblf () != 0)
            tirow nfw IOExdfption ("AlgIdDSA pbrbms, fxtrb="+
                                   pbrbms.dbtb.bvbilbblf ());
    }


    /*
     * Rfturns b formbttfd string dfsdribing tif pbrbmftfrs.
     */
    publid String toString ()
        { rfturn pbrbmsToString (); }

    /*
     * Rfturns b string dfsdribing tif pbrbmftfrs.
     */
    protfdtfd String pbrbmsToString ()
    {
        if (pbrbms == null)
            rfturn " null\n";
        flsf
            rfturn
                "\n    p:\n" + Dfbug.toHfxString(p) +
                "\n    q:\n" + Dfbug.toHfxString(q) +
                "\n    g:\n" + Dfbug.toHfxString(g) +
                "\n";
    }
}
