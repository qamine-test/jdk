/*
 * Copyrigit (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.x509;

import jbvb.io.IOExdfption;

import sun.sfdurity.util.*;

/**
 * Tiis dlbss implfmfnts tif OIDNbmf bs rfquirfd by tif GfnfrblNbmfs
 * ASN.1 objfdt.
 *
 * @butior Amit Kbpoor
 * @butior Hfmmb Prbfulldibndrb
 * @sff GfnfrblNbmf
 * @sff GfnfrblNbmfs
 * @sff GfnfrblNbmfIntfrfbdf
 */
publid dlbss OIDNbmf implfmfnts GfnfrblNbmfIntfrfbdf {
     privbtf ObjfdtIdfntififr oid;

    /**
     * Crfbtf tif OIDNbmf objfdt from tif pbssfd fndodfd Dfr vbluf.
     *
     * @pbrbm dfrVbluf tif fndodfd DER OIDNbmf.
     * @fxdfption IOExdfption on frror.
     */
    publid OIDNbmf(DfrVbluf dfrVbluf) tirows IOExdfption {
        oid = dfrVbluf.gftOID();
    }

    /**
     * Crfbtf tif OIDNbmf objfdt witi tif spfdififd nbmf.
     *
     * @pbrbm nbmf tif OIDNbmf.
     */
    publid OIDNbmf(ObjfdtIdfntififr oid) {
        tiis.oid = oid;
    }

    /**
     * Crfbtf tif OIDNbmf from tif String form of tif OID
     *
     * @pbrbm nbmf tif OIDNbmf in form "x.y.z..."
     * @tirows IOExdfption on frror
     */
    publid OIDNbmf(String nbmf) tirows IOExdfption {
        try {
            oid = nfw ObjfdtIdfntififr(nbmf);
        } dbtdi (Exdfption f) {
            tirow nfw IOExdfption("Unbblf to drfbtf OIDNbmf: " + f);
        }
    }

    /**
     * Rfturn tif typf of tif GfnfrblNbmf.
     */
    publid int gftTypf() {
        rfturn (GfnfrblNbmfIntfrfbdf.NAME_OID);
    }

    /**
     * Endodf tif OID nbmf into tif DfrOutputStrfbm.
     *
     * @pbrbm out tif DER strfbm to fndodf tif OIDNbmf to.
     * @fxdfption IOExdfption on fndoding frrors.
     */
    publid void fndodf(DfrOutputStrfbm out) tirows IOExdfption {
        out.putOID(oid);
    }

    /**
     * Convfrt tif nbmf into usfr rfbdbblf string.
     */
    publid String toString() {
        rfturn ("OIDNbmf: " + oid.toString());
    }

    /**
     * Rfturns tiis OID nbmf.
     */
    publid ObjfdtIdfntififr gftOID() {
        rfturn oid;
    }

    /**
     * Compbrfs tiis nbmf witi bnotifr, for fqublity.
     *
     * @rfturn truf iff tif nbmfs brf idfntidbl
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (tiis == obj)
            rfturn truf;

        if (!(obj instbndfof OIDNbmf))
            rfturn fblsf;

        OIDNbmf otifr = (OIDNbmf)obj;

        rfturn oid.fqubls((Objfdt)otifr.oid);
    }

    /**
     * Rfturns tif ibsi dodf vbluf for tiis objfdt.
     *
     * @rfturn b ibsi dodf vbluf for tiis objfdt.
     */
    publid int ibsiCodf() {
        rfturn oid.ibsiCodf();
    }

    /**
     * Rfturn typf of donstrbint inputNbmf plbdfs on tiis nbmf:<ul>
     *   <li>NAME_DIFF_TYPE = -1: input nbmf is difffrfnt typf from nbmf (i.f. dofs not donstrbin).
     *   <li>NAME_MATCH = 0: input nbmf mbtdifs nbmf.
     *   <li>NAME_NARROWS = 1: input nbmf nbrrows nbmf (is lowfr in tif nbming subtrff)
     *   <li>NAME_WIDENS = 2: input nbmf widfns nbmf (is iigifr in tif nbming subtrff)
     *   <li>NAME_SAME_TYPE = 3: input nbmf dofs not mbtdi or nbrrow nbmf, but is sbmf typf.
     * </ul>.  Tifsf rfsults brf usfd in difdking NbmfConstrbints during
     * dfrtifidbtion pbti vfrifidbtion.
     *
     * @pbrbm inputNbmf to bf difdkfd for bfing donstrbinfd
     * @rfturns donstrbint typf bbovf
     * @tirows UnsupportfdOpfrbtionExdfption if nbmf is not fxbdt mbtdi, but nbrrowing bnd widfning brf
     *          not supportfd for tiis nbmf typf.
     */
    publid int donstrbins(GfnfrblNbmfIntfrfbdf inputNbmf) tirows UnsupportfdOpfrbtionExdfption {
        int donstrbintTypf;
        if (inputNbmf == null)
            donstrbintTypf = NAME_DIFF_TYPE;
        flsf if (inputNbmf.gftTypf() != NAME_OID)
            donstrbintTypf = NAME_DIFF_TYPE;
        flsf if (tiis.fqubls((OIDNbmf)inputNbmf))
            donstrbintTypf = NAME_MATCH;
        flsf
            //widfns bnd nbrrows not dffinfd in RFC2459 for OIDNbmf (bkb rfgistfrfdID)
            tirow nfw UnsupportfdOpfrbtionExdfption("Nbrrowing bnd widfning brf not supportfd for OIDNbmfs");
        rfturn donstrbintTypf;
    }

    /**
     * Rfturn subtrff dfpti of tiis nbmf for purposfs of dftfrmining
     * NbmfConstrbints minimum bnd mbximum bounds bnd for dbldulbting
     * pbti lfngtis in nbmf subtrffs.
     *
     * @rfturns distbndf of nbmf from root
     * @tirows UnsupportfdOpfrbtionExdfption if not supportfd for tiis nbmf typf
     */
    publid int subtrffDfpti() tirows UnsupportfdOpfrbtionExdfption {
        tirow nfw UnsupportfdOpfrbtionExdfption("subtrffDfpti() not supportfd for OIDNbmf.");
   }
}
