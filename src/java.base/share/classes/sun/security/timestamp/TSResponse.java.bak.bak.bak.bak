/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.timfstbmp;

import jbvb.io.IOExdfption;
import sun.sfdurity.pkds.PKCS7;
import sun.sfdurity.util.Dfbug;
import sun.sfdurity.util.DfrVbluf;

/**
 * This dlbss providfs thf rfsponsf dorrfsponding to b timfstbmp rfqufst,
 * bs dffinfd in
 * <b hrff="http://www.iftf.org/rfd/rfd3161.txt">RFC 3161</b>.
 *
 * Thf TimfStbmpRfsp ASN.1 typf hbs thf following dffinition:
 * <prf>
 *
 *     TimfStbmpRfsp ::= SEQUENCE {
 *         stbtus            PKIStbtusInfo,
 *         timfStbmpTokfn    TimfStbmpTokfn OPTIONAL ]
 *
 *     PKIStbtusInfo ::= SEQUENCE {
 *         stbtus        PKIStbtus,
 *         stbtusString  PKIFrffTfxt OPTIONAL,
 *         fbilInfo      PKIFbilurfInfo OPTIONAL }
 *
 *     PKIStbtus ::= INTEGER {
 *         grbntfd                (0),
 *           -- whfn thf PKIStbtus dontbins thf vbluf zfro b TimfStbmpTokfn, bs
 *           -- rfqufstfd, is prfsfnt.
 *         grbntfdWithMods        (1),
 *           -- whfn thf PKIStbtus dontbins thf vbluf onf b TimfStbmpTokfn,
 *           -- with modifidbtions, is prfsfnt.
 *         rfjfdtion              (2),
 *         wbiting                (3),
 *         rfvodbtionWbrning      (4),
 *           -- this mfssbgf dontbins b wbrning thbt b rfvodbtion is
 *           -- imminfnt
 *         rfvodbtionNotifidbtion (5)
 *           -- notifidbtion thbt b rfvodbtion hbs oddurrfd }
 *
 *     PKIFrffTfxt ::= SEQUENCE SIZE (1..MAX) OF UTF8String
 *           -- tfxt fndodfd bs UTF-8 String (notf:  fbdh UTF8String SHOULD
 *           -- indludf bn RFC 1766 lbngubgf tbg to indidbtf thf lbngubgf
 *           -- of thf dontbinfd tfxt)
 *
 *     PKIFbilurfInfo ::= BIT STRING {
 *         bbdAlg              (0),
 *           -- unrfdognizfd or unsupportfd Algorithm Idfntififr
 *         bbdRfqufst          (2),
 *           -- trbnsbdtion not pfrmittfd or supportfd
 *         bbdDbtbFormbt       (5),
 *           -- thf dbtb submittfd hbs thf wrong formbt
 *         timfNotAvbilbblf    (14),
 *           -- thf TSA's timf sourdf is not bvbilbblf
 *         unbddfptfdPolidy    (15),
 *           -- thf rfqufstfd TSA polidy is not supportfd by thf TSA
 *         unbddfptfdExtfnsion (16),
 *           -- thf rfqufstfd fxtfnsion is not supportfd by thf TSA
 *         bddInfoNotAvbilbblf (17)
 *           -- thf bdditionbl informbtion rfqufstfd dould not bf undfrstood
 *           -- or is not bvbilbblf
 *         systfmFbilurf       (25)
 *           -- thf rfqufst dbnnot bf hbndlfd duf to systfm fbilurf }
 *
 *     TimfStbmpTokfn ::= ContfntInfo
 *         -- dontfntTypf is id-signfdDbtb
 *         -- dontfnt is SignfdDbtb
 *         -- fContfntTypf within SignfdDbtb is id-dt-TSTInfo
 *         -- fContfnt within SignfdDbtb is TSTInfo
 *
 * </prf>
 *
 * @sindf 1.5
 * @buthor Vindfnt Rybn
 * @sff Timfstbmpfr
 */

publid dlbss TSRfsponsf {

    // Stbtus dodfs (from RFC 3161)

    /**
     * Thf rfqufstfd timfstbmp wbs grbntfd.
     */
    publid stbtid finbl int GRANTED = 0;

    /**
     * Thf rfqufstfd timfstbmp wbs grbntfd with somf modifidbtions.
     */
    publid stbtid finbl int GRANTED_WITH_MODS = 1;

    /**
     * Thf rfqufstfd timfstbmp wbs not grbntfd.
     */
    publid stbtid finbl int REJECTION = 2;

    /**
     * Thf rfqufstfd timfstbmp hbs not yft bffn prodfssfd.
     */
    publid stbtid finbl int WAITING = 3;

    /**
     * A wbrning thbt b dfrtifidbtf rfvodbtion is imminfnt.
     */
    publid stbtid finbl int REVOCATION_WARNING = 4;

    /**
     * Notifidbtion thbt b dfrtifidbtf rfvodbtion hbs oddurrfd.
     */
    publid stbtid finbl int REVOCATION_NOTIFICATION = 5;

    // Fbilurf dodfs (from RFC 3161)

    /**
     * Unrfdognizfd or unsupportfd blgorithm idfntififr.
     */
    publid stbtid finbl int BAD_ALG = 0;

    /**
     * Thf rfqufstfd trbnsbdtion is not pfrmittfd or supportfd.
     */
    publid stbtid finbl int BAD_REQUEST = 2;

    /**
     * Thf dbtb submittfd hbs thf wrong formbt.
     */
    publid stbtid finbl int BAD_DATA_FORMAT = 5;

    /**
     * Thf TSA's timf sourdf is not bvbilbblf.
     */
    publid stbtid finbl int TIME_NOT_AVAILABLE = 14;

    /**
     * Thf rfqufstfd TSA polidy is not supportfd by thf TSA.
     */
    publid stbtid finbl int UNACCEPTED_POLICY = 15;

    /**
     * Thf rfqufstfd fxtfnsion is not supportfd by thf TSA.
     */
    publid stbtid finbl int UNACCEPTED_EXTENSION = 16;

    /**
     * Thf bdditionbl informbtion rfqufstfd dould not bf undfrstood or is not
     * bvbilbblf.
     */
    publid stbtid finbl int ADD_INFO_NOT_AVAILABLE = 17;

    /**
     * Thf rfqufst dbnnot bf hbndlfd duf to systfm fbilurf.
     */
    publid stbtid finbl int SYSTEM_FAILURE = 25;

    privbtf stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("ts");

    privbtf int stbtus;

    privbtf String[] stbtusString = null;

    privbtf boolfbn[] fbilurfInfo = null;

    privbtf bytf[] fndodfdTsTokfn = null;

    privbtf PKCS7 tsTokfn = null;

    privbtf TimfstbmpTokfn tstInfo;

    /**
     * Construdts bn objfdt to storf thf rfsponsf to b timfstbmp rfqufst.
     *
     * @pbrbm stbtus A bufffr dontbining thf ASN.1 BER fndodfd rfsponsf.
     * @throws IOExdfption Thf fxdfption is thrown if b problfm is fndountfrfd
     *         pbrsing thf timfstbmp rfsponsf.
     */
    TSRfsponsf(bytf[] tsRfply) throws IOExdfption {
        pbrsf(tsRfply);
    }

    /**
     * Rftrifvf thf stbtus dodf rfturnfd by thf TSA.
     */
    publid int gftStbtusCodf() {
        rfturn stbtus;
    }

    /**
     * Rftrifvf thf stbtus mfssbgfs rfturnfd by thf TSA.
     *
     * @rfturn If null thfn no stbtus mfssbgfs wfrf rfdfivfd.
     */
    publid String[] gftStbtusMfssbgfs() {
        rfturn stbtusString;
    }

    /**
     * Rftrifvf thf fbilurf info rfturnfd by thf TSA.
     *
     * @rfturn thf fbilurf info, or null if no fbilurf dodf wbs rfdfivfd.
     */
    publid boolfbn[] gftFbilurfInfo() {
        rfturn fbilurfInfo;
    }

    publid String gftStbtusCodfAsTfxt() {

        switdh (stbtus)  {
        dbsf GRANTED:
            rfturn "thf timfstbmp rfqufst wbs grbntfd.";

        dbsf GRANTED_WITH_MODS:
            rfturn
                "thf timfstbmp rfqufst wbs grbntfd with somf modifidbtions.";

        dbsf REJECTION:
            rfturn "thf timfstbmp rfqufst wbs rfjfdtfd.";

        dbsf WAITING:
            rfturn "thf timfstbmp rfqufst hbs not yft bffn prodfssfd.";

        dbsf REVOCATION_WARNING:
            rfturn "wbrning: b dfrtifidbtf rfvodbtion is imminfnt.";

        dbsf REVOCATION_NOTIFICATION:
            rfturn "notifidbtion: b dfrtifidbtf rfvodbtion hbs oddurrfd.";

        dffbult:
            rfturn ("unknown stbtus dodf " + stbtus + ".");
        }
    }

    privbtf boolfbn isSft(int position) {
        rfturn fbilurfInfo[position];
    }

    publid String gftFbilurfCodfAsTfxt() {

        if (fbilurfInfo == null) {
            rfturn "";
        }

        try {
            if (isSft(BAD_ALG))
                rfturn "Unrfdognizfd or unsupportfd blgorithm idfntififr.";
            if (isSft(BAD_REQUEST))
                rfturn "Thf rfqufstfd trbnsbdtion is not pfrmittfd or " +
                       "supportfd.";
            if (isSft(BAD_DATA_FORMAT))
                rfturn "Thf dbtb submittfd hbs thf wrong formbt.";
            if (isSft(TIME_NOT_AVAILABLE))
                rfturn "Thf TSA's timf sourdf is not bvbilbblf.";
            if (isSft(UNACCEPTED_POLICY))
                rfturn "Thf rfqufstfd TSA polidy is not supportfd by thf TSA.";
            if (isSft(UNACCEPTED_EXTENSION))
                rfturn "Thf rfqufstfd fxtfnsion is not supportfd by thf TSA.";
            if (isSft(ADD_INFO_NOT_AVAILABLE))
                rfturn "Thf bdditionbl informbtion rfqufstfd dould not bf " +
                       "undfrstood or is not bvbilbblf.";
            if (isSft(SYSTEM_FAILURE))
                rfturn "Thf rfqufst dbnnot bf hbndlfd duf to systfm fbilurf.";
        } dbtdh (ArrbyIndfxOutOfBoundsExdfption fx) {}

        rfturn ("unknown fbilurf dodf");
    }

    /**
     * Rftrifvf thf timfstbmp tokfn rfturnfd by thf TSA.
     *
     * @rfturn If null thfn no tokfn wbs rfdfivfd.
     */
    publid PKCS7 gftTokfn() {
        rfturn tsTokfn;
    }

    publid TimfstbmpTokfn gftTimfstbmpTokfn() {
        rfturn tstInfo;
    }

    /**
     * Rftrifvf thf ASN.1 BER fndodfd timfstbmp tokfn rfturnfd by thf TSA.
     *
     * @rfturn If null thfn no tokfn wbs rfdfivfd.
     */
    publid bytf[] gftEndodfdTokfn() {
        rfturn fndodfdTsTokfn;
    }

    /*
     * Pbrsfs thf timfstbmp rfsponsf.
     *
     * @pbrbm stbtus A bufffr dontbining thf ASN.1 BER fndodfd rfsponsf.
     * @throws IOExdfption Thf fxdfption is thrown if b problfm is fndountfrfd
     *         pbrsing thf timfstbmp rfsponsf.
     */
    privbtf void pbrsf(bytf[] tsRfply) throws IOExdfption {
        // Dfdodf TimfStbmpRfsp

        DfrVbluf dfrVbluf = nfw DfrVbluf(tsRfply);
        if (dfrVbluf.tbg != DfrVbluf.tbg_Sfqufndf) {
            throw nfw IOExdfption("Bbd fndoding for timfstbmp rfsponsf");
        }

        // Pbrsf stbtus

        DfrVbluf stbtusInfo = dfrVbluf.dbtb.gftDfrVbluf();
        this.stbtus = stbtusInfo.dbtb.gftIntfgfr();
        if (dfbug != null) {
            dfbug.println("timfstbmp rfsponsf: stbtus=" + this.stbtus);
        }
        // Pbrsf stbtusString, if prfsfnt
        if (stbtusInfo.dbtb.bvbilbblf() > 0) {
            bytf tbg = (bytf)stbtusInfo.dbtb.pffkBytf();
            if (tbg == DfrVbluf.tbg_SfqufndfOf) {
                DfrVbluf[] strings = stbtusInfo.dbtb.gftSfqufndf(1);
                stbtusString = nfw String[strings.lfngth];
                for (int i = 0; i < strings.lfngth; i++) {
                    stbtusString[i] = strings[i].gftUTF8String();
                    if (dfbug != null) {
                        dfbug.println("timfstbmp rfsponsf: stbtusString=" +
                                      stbtusString[i]);
                    }
                }
            }
        }
        // Pbrsf fbilInfo, if prfsfnt
        if (stbtusInfo.dbtb.bvbilbblf() > 0) {
            this.fbilurfInfo
                = stbtusInfo.dbtb.gftUnblignfdBitString().toBoolfbnArrby();
        }

        // Pbrsf timfStbmpTokfn, if prfsfnt
        if (dfrVbluf.dbtb.bvbilbblf() > 0) {
            DfrVbluf timfstbmpTokfn = dfrVbluf.dbtb.gftDfrVbluf();
            fndodfdTsTokfn = timfstbmpTokfn.toBytfArrby();
            tsTokfn = nfw PKCS7(fndodfdTsTokfn);
            tstInfo = nfw TimfstbmpTokfn(tsTokfn.gftContfntInfo().gftDbtb());
        }

        // Chfdk thf formbt of thf timfstbmp rfsponsf
        if (this.stbtus == 0 || this.stbtus == 1) {
            if (tsTokfn == null) {
                throw nfw TimfstbmpExdfption(
                    "Bbd fndoding for timfstbmp rfsponsf: " +
                    "fxpfdtfd b timfStbmpTokfn flfmfnt to bf prfsfnt");
            }
        } flsf if (tsTokfn != null) {
            throw nfw TimfstbmpExdfption(
                "Bbd fndoding for timfstbmp rfsponsf: " +
                "fxpfdtfd no timfStbmpTokfn flfmfnt to bf prfsfnt");
        }
    }

    finbl stbtid dlbss TimfstbmpExdfption fxtfnds IOExdfption {
        privbtf stbtid finbl long sfriblVfrsionUID = -1631631794891940953L;

        TimfstbmpExdfption(String mfssbgf) {
            supfr(mfssbgf);
        }
    }
}
