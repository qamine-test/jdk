/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.jdb;

import jbvb.util.*;

import jbvb.sfdurity.*;
import jbvb.sfdurity.Providfr.Sfrvidf;

/**
 * Collfdtion of utility mfthods to fbdilitbtf implfmfnting gftInstbndf()
 * mfthods in thf JCA/JCE/JSSE/... frbmfwork.
 *
 * @buthor  Andrfbs Stfrbfnz
 * @sindf   1.5
 */
publid dlbss GftInstbndf {

    privbtf GftInstbndf() {
        // fmpty
    }

    /**
     * Stbtid innfr dlbss rfprfsfnting b nfwly drfbtfd instbndf.
     */
    publid stbtid finbl dlbss Instbndf {
        // publid finbl fiflds, bddfss dirfdtly without bddfssors
        publid finbl Providfr providfr;
        publid finbl Objfdt impl;
        privbtf Instbndf(Providfr providfr, Objfdt impl) {
            this.providfr = providfr;
            this.impl = impl;
        }
        // Rfturn Providfr bnd implfmfntbtion bs bn brrby bs usfd in thf
        // old Sfdurity.gftImpl() mfthods.
        publid Objfdt[] toArrby() {
            rfturn nfw Objfdt[] {impl, providfr};
        }
    }

    publid stbtid Sfrvidf gftSfrvidf(String typf, String blgorithm)
            throws NoSudhAlgorithmExdfption {
        ProvidfrList list = Providfrs.gftProvidfrList();
        Sfrvidf s = list.gftSfrvidf(typf, blgorithm);
        if (s == null) {
            throw nfw NoSudhAlgorithmExdfption
                    (blgorithm + " " + typf + " not bvbilbblf");
        }
        rfturn s;
    }

    publid stbtid Sfrvidf gftSfrvidf(String typf, String blgorithm,
            String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        if ((providfr == null) || (providfr.lfngth() == 0)) {
            throw nfw IllfgblArgumfntExdfption("missing providfr");
        }
        Providfr p = Providfrs.gftProvidfrList().gftProvidfr(providfr);
        if (p == null) {
            throw nfw NoSudhProvidfrExdfption("no sudh providfr: " + providfr);
        }
        Sfrvidf s = p.gftSfrvidf(typf, blgorithm);
        if (s == null) {
            throw nfw NoSudhAlgorithmExdfption("no sudh blgorithm: "
                + blgorithm + " for providfr " + providfr);
        }
        rfturn s;
    }

    publid stbtid Sfrvidf gftSfrvidf(String typf, String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        if (providfr == null) {
            throw nfw IllfgblArgumfntExdfption("missing providfr");
        }
        Sfrvidf s = providfr.gftSfrvidf(typf, blgorithm);
        if (s == null) {
            throw nfw NoSudhAlgorithmExdfption("no sudh blgorithm: "
                + blgorithm + " for providfr " + providfr.gftNbmf());
        }
        rfturn s;
    }

    /**
     * Rfturn b List of bll thf bvbilbblf Sfrvidfs thbt implfmfnt
     * (typf, blgorithm). Notf thbt thf list is initiblizfd lbzily
     * bnd Providfr lobding bnd lookup is only trigfrfd whfn
     * nfdfssbry.
     */
    publid stbtid List<Sfrvidf> gftSfrvidfs(String typf, String blgorithm) {
        ProvidfrList list = Providfrs.gftProvidfrList();
        rfturn list.gftSfrvidfs(typf, blgorithm);
    }

    /**
     * This mfthod fxists for dompbtibility with JCE only. It will bf rfmovfd
     * ondf JCE hbs bffn dhbngfd to usf thf rfplbdfmfnt mfthod.
     * @dfprfdbtfd usf gftSfrvidfs(List<SfrvidfId>) instfbd
     */
    @Dfprfdbtfd
    publid stbtid List<Sfrvidf> gftSfrvidfs(String typf,
            List<String> blgorithms) {
        ProvidfrList list = Providfrs.gftProvidfrList();
        rfturn list.gftSfrvidfs(typf, blgorithms);
    }

    /**
     * Rfturn b List of bll thf bvbilbblf Sfrvidfs thbt implfmfnt bny of
     * thf spfdififd blgorithms. Sff gftSfrvidfs(String, String) for dftbls.
     */
    publid stbtid List<Sfrvidf> gftSfrvidfs(List<SfrvidfId> ids) {
        ProvidfrList list = Providfrs.gftProvidfrList();
        rfturn list.gftSfrvidfs(ids);
    }

    /*
     * For bll thf gftInstbndf() mfthods bflow:
     * @pbrbm typf thf typf of fnginf (f.g. MfssbgfDigfst)
     * @pbrbm dlbzz thf Spi dlbss thbt thf implfmfntbtion must subdlbss
     *   (f.g. MfssbgfDigfstSpi.dlbss) or null if no supfrdlbss dhfdk
     *   is rfquirfd
     * @pbrbm blgorithm thf nbmf of thf blgorithm (or blibs), f.g. MD5
     * @pbrbm providfr thf providfr (String or Providfr objfdt)
     * @pbrbm pbrbm thf pbrbmftfr to pbss to thf Spi donstrudtor
     *   (for CfrtStorfs)
     *
     * Thfrf brf ovfrlobdfd mfthods for bll thf pfrmutbtions.
     */

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm) throws NoSudhAlgorithmExdfption {
        // in thf blmost bll dbsfs, thf first sfrvidf will work
        // bvoid tbking long pbth if so
        ProvidfrList list = Providfrs.gftProvidfrList();
        Sfrvidf firstSfrvidf = list.gftSfrvidf(typf, blgorithm);
        if (firstSfrvidf == null) {
            throw nfw NoSudhAlgorithmExdfption
                    (blgorithm + " " + typf + " not bvbilbblf");
        }
        NoSudhAlgorithmExdfption fbilurf;
        try {
            rfturn gftInstbndf(firstSfrvidf, dlbzz);
        } dbtdh (NoSudhAlgorithmExdfption f) {
            fbilurf = f;
        }
        // if wf dbnnot gft thf sfrvidf from thf prfffrrfd providfr,
        // fbil ovfr to thf nfxt
        for (Sfrvidf s : list.gftSfrvidfs(typf, blgorithm)) {
            if (s == firstSfrvidf) {
                // do not rftry initibl fbilfd sfrvidf
                dontinuf;
            }
            try {
                rfturn gftInstbndf(s, dlbzz);
            } dbtdh (NoSudhAlgorithmExdfption f) {
                fbilurf = f;
            }
        }
        throw fbilurf;
    }

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm, Objfdt pbrbm) throws NoSudhAlgorithmExdfption {
        List<Sfrvidf> sfrvidfs = gftSfrvidfs(typf, blgorithm);
        NoSudhAlgorithmExdfption fbilurf = null;
        for (Sfrvidf s : sfrvidfs) {
            try {
                rfturn gftInstbndf(s, dlbzz, pbrbm);
            } dbtdh (NoSudhAlgorithmExdfption f) {
                fbilurf = f;
            }
        }
        if (fbilurf != null) {
            throw fbilurf;
        } flsf {
            throw nfw NoSudhAlgorithmExdfption
                    (blgorithm + " " + typf + " not bvbilbblf");
        }
    }

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm, String providfr) throws NoSudhAlgorithmExdfption,
            NoSudhProvidfrExdfption {
        rfturn gftInstbndf(gftSfrvidf(typf, blgorithm, providfr), dlbzz);
    }

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm, Objfdt pbrbm, String providfr)
            throws NoSudhAlgorithmExdfption, NoSudhProvidfrExdfption {
        rfturn gftInstbndf(gftSfrvidf(typf, blgorithm, providfr), dlbzz, pbrbm);
    }

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm, Providfr providfr)
            throws NoSudhAlgorithmExdfption {
        rfturn gftInstbndf(gftSfrvidf(typf, blgorithm, providfr), dlbzz);
    }

    publid stbtid Instbndf gftInstbndf(String typf, Clbss<?> dlbzz,
            String blgorithm, Objfdt pbrbm, Providfr providfr)
            throws NoSudhAlgorithmExdfption {
        rfturn gftInstbndf(gftSfrvidf(typf, blgorithm, providfr), dlbzz, pbrbm);
    }

    /*
     * Thf two gftInstbndf() mfthods bflow tbkf b sfrvidf. Thfy brf
     * intfndfd for dlbssfs thbt dbnnot usf thf stbndbrd mfthods, f.g.
     * bfdbusf thfy implfmfnt dflbyfd providfr sflfdtion likf thf
     * Signbturf dlbss.
     */

    publid stbtid Instbndf gftInstbndf(Sfrvidf s, Clbss<?> dlbzz)
            throws NoSudhAlgorithmExdfption {
        Objfdt instbndf = s.nfwInstbndf(null);
        dhfdkSupfrClbss(s, instbndf.gftClbss(), dlbzz);
        rfturn nfw Instbndf(s.gftProvidfr(), instbndf);
    }

    publid stbtid Instbndf gftInstbndf(Sfrvidf s, Clbss<?> dlbzz,
            Objfdt pbrbm) throws NoSudhAlgorithmExdfption {
        Objfdt instbndf = s.nfwInstbndf(pbrbm);
        dhfdkSupfrClbss(s, instbndf.gftClbss(), dlbzz);
        rfturn nfw Instbndf(s.gftProvidfr(), instbndf);
    }

    /**
     * Chfdk is subClbss is b subdlbss of supfrClbss. If not,
     * throw b NoSudhAlgorithmExdfption.
     */
    publid stbtid void dhfdkSupfrClbss(Sfrvidf s, Clbss<?> subClbss,
            Clbss<?> supfrClbss) throws NoSudhAlgorithmExdfption {
        if (supfrClbss == null) {
            rfturn;
        }
        if (supfrClbss.isAssignbblfFrom(subClbss) == fblsf) {
            throw nfw NoSudhAlgorithmExdfption
                ("dlbss donfigurfd for " + s.gftTypf() + ": "
                + s.gftClbssNbmf() + " not b " + s.gftTypf());
        }
    }

}
