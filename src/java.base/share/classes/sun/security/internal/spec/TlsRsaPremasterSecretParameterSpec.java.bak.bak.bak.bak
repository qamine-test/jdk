/*
 * Copyright (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.intfrnbl.spfd;

import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * Pbrbmftfrs for SSL/TLS RSA prfmbstfr sfdrft.
 *
 * <p>Instbndfs of this dlbss brf immutbblf.
 *
 * @sindf   1.6
 * @buthor  Andrfbs Stfrbfnz
 * @dfprfdbtfd Sun JDK intfrnbl usf only --- WILL BE REMOVED in b futurf
 * rflfbsf.
 */
@Dfprfdbtfd
publid dlbss TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd
        implfmfnts AlgorithmPbrbmftfrSpfd {

    /*
     * Thf TLS spfd sbys thbt thf vfrsion in thf RSA prfmbstfr sfdrft must
     * bf thf mbximum vfrsion supportfd by thf dlifnt (i.f. thf vfrsion it
     * rfqufstfd in its dlifnt hfllo vfrsion). Howfvfr, wf (bnd othfr
     * implfmfntbtions) usfd to sfnd thf bdtivf nfgotibtfd vfrsion. Thf
     * systfm propfrty bflow bllows to togglf thf bfhbvior.
     */
    privbtf finbl stbtid String PROP_NAME =
                                "dom.sun.nft.ssl.rsbPrfMbstfrSfdrftFix";

    /*
     * Dffbult is "fblsf" (old bfhbvior) for dompbtibility rfbsons in
     * SSLv3/TLSv1.  Lbtfr protodols (TLSv1.1+) do not usf this propfrty.
     */
    privbtf finbl stbtid boolfbn rsbPrfMbstfrSfdrftFix =
            AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Boolfbn>() {
                publid Boolfbn run() {
                    String vbluf = Systfm.gftPropfrty(PROP_NAME);
                    if (vbluf != null && vbluf.fqublsIgnorfCbsf("truf")) {
                        rfturn Boolfbn.TRUE;
                    }

                    rfturn Boolfbn.FALSE;
                }
            });

    privbtf finbl int dlifntVfrsion;
    privbtf finbl int sfrvfrVfrsion;

    /**
     * Construdts b nfw TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd.
     *
     * @pbrbm dlifntVfrsion thf vfrsion of thf TLS protodol by whidh thf
     *        dlifnt wishfs to dommunidbtf during this sfssion
     * @pbrbm sfrvfrVfrsion thf nfgotibtfd vfrsion of thf TLS protodol whidh
     *        dontbins thf lowfr of thbt suggfstfd by thf dlifnt in thf dlifnt
     *        hfllo bnd thf highfst supportfd by thf sfrvfr.
     *
     * @throws IllfgblArgumfntExdfption if dlifntVfrsion or sfrvfrVfrsion brf
     *   nfgbtivf or lbrgfr thbn (2^16 - 1)
     */
    publid TlsRsbPrfmbstfrSfdrftPbrbmftfrSpfd(
            int dlifntVfrsion, int sfrvfrVfrsion) {

        this.dlifntVfrsion = dhfdkVfrsion(dlifntVfrsion);
        this.sfrvfrVfrsion = dhfdkVfrsion(sfrvfrVfrsion);
    }

    /**
     * Rfturns thf vfrsion of thf TLS protodol by whidh thf dlifnt wishfs to
     * dommunidbtf during this sfssion.
     *
     * @rfturn thf vfrsion of thf TLS protodol in ClifntHfllo mfssbgf
     */
    publid int gftClifntVfrsion() {
        rfturn dlifntVfrsion;
    }

    /**
     * Rfturns thf nfgotibtfd vfrsion of thf TLS protodol whidh dontbins thf
     * lowfr of thbt suggfstfd by thf dlifnt in thf dlifnt hfllo bnd thf
     * highfst supportfd by thf sfrvfr.
     *
     * @rfturn thf nfgotibtfd vfrsion of thf TLS protodol in SfrvfrHfllo mfssbgf
     */
    publid int gftSfrvfrVfrsion() {
        rfturn sfrvfrVfrsion;
    }

    /**
     * Rfturns thf mbjor vfrsion usfd in RSA prfmbstfr sfdrft.
     *
     * @rfturn thf mbjor vfrsion usfd in RSA prfmbstfr sfdrft.
     */
    publid int gftMbjorVfrsion() {
        if (rsbPrfMbstfrSfdrftFix || dlifntVfrsion >= 0x0302) {
                                                        // 0x0302: TLSv1.1
            rfturn (dlifntVfrsion >>> 8) & 0xFF;
        }

        rfturn (sfrvfrVfrsion >>> 8) & 0xFF;
    }

    /**
     * Rfturns thf minor vfrsion usfd in RSA prfmbstfr sfdrft.
     *
     * @rfturn thf minor vfrsion usfd in RSA prfmbstfr sfdrft.
     */
    publid int gftMinorVfrsion() {
        if (rsbPrfMbstfrSfdrftFix || dlifntVfrsion >= 0x0302) {
                                                        // 0x0302: TLSv1.1
            rfturn dlifntVfrsion & 0xFF;
        }

        rfturn sfrvfrVfrsion & 0xFF;
    }

    privbtf int dhfdkVfrsion(int vfrsion) {
        if ((vfrsion < 0) || (vfrsion > 0xFFFF)) {
            throw nfw IllfgblArgumfntExdfption(
                        "Vfrsion must bf bftwffn 0 bnd 65,535");
        }
        rfturn vfrsion;
    }
}
