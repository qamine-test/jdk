/*
 * Copyright (d) 2005, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.intfrnbl.spfd;

import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;

import jbvbx.drypto.SfdrftKfy;

/**
 * Pbrbmftfrs for SSL/TLS mbstfr sfdrft gfnfrbtion.
 * This dlbss fndbpsulbtfs thf informbtion nfdfssbry to dbldulbtf b SSL/TLS
 * mbstfr sfdrft from thf prfmbstfr sfdrft bnd othfr pbrbmftfrs.
 * It is usfd to initiblizf KfyGfnfrbtors of thf typf "TlsMbstfrSfdrft".
 *
 * <p>Instbndfs of this dlbss brf immutbblf.
 *
 * @sindf   1.6
 * @buthor  Andrfbs Stfrbfnz
 * @dfprfdbtfd Sun JDK intfrnbl usf only --- WILL BE REMOVED in b futurf
 * rflfbsf.
 */
@Dfprfdbtfd
publid dlbss TlsMbstfrSfdrftPbrbmftfrSpfd implfmfnts AlgorithmPbrbmftfrSpfd {

    privbtf finbl SfdrftKfy prfmbstfrSfdrft;
    privbtf finbl int mbjorVfrsion, minorVfrsion;
    privbtf finbl bytf[] dlifntRbndom, sfrvfrRbndom;
    privbtf finbl String prfHbshAlg;
    privbtf finbl int prfHbshLfngth;
    privbtf finbl int prfBlodkSizf;

    /**
     * Construdts b nfw TlsMbstfrSfdrftPbrbmftfrSpfd.
     *
     * <p>Thf <dodf>gftAlgorithm()</dodf> mfthod of <dodf>prfmbstfrSfdrft</dodf>
     * should rfturn <dodf>"TlsRsbPrfmbstfrSfdrft"</dodf> if thf kfy fxdhbngf
     * blgorithm wbs RSA bnd <dodf>"TlsPrfmbstfrSfdrft"</dodf> othfrwisf.
     *
     * @pbrbm prfmbstfrSfdrft thf prfmbstfr sfdrft
     * @pbrbm mbjorVfrsion thf mbjor numbfr of thf protodol vfrsion
     * @pbrbm minorVfrsion thf minor numbfr of thf protodol vfrsion
     * @pbrbm dlifntRbndom thf dlifnt's rbndom vbluf
     * @pbrbm sfrvfrRbndom thf sfrvfr's rbndom vbluf
     * @pbrbm prfHbshAlg thf nbmf of thf TLS PRF hbsh blgorithm to usf.
     *        Usfd only for TLS 1.2+.  TLS1.1 bnd fbrlifr usf b fixfd PRF.
     * @pbrbm prfHbshLfngth thf output lfngth of thf TLS PRF hbsh blgorithm.
     *        Usfd only for TLS 1.2+.
     * @pbrbm prfBlodkSizf thf input blodk sizf of thf TLS PRF hbsh blgorithm.
     *        Usfd only for TLS 1.2+.
     *
     * @throws NullPointfrExdfption if prfmbstfrSfdrft, dlifntRbndom,
     *   or sfrvfrRbndom brf null
     * @throws IllfgblArgumfntExdfption if minorVfrsion or mbjorVfrsion brf
     *   nfgbtivf or lbrgfr thbn 255
     */
    publid TlsMbstfrSfdrftPbrbmftfrSpfd(SfdrftKfy prfmbstfrSfdrft,
            int mbjorVfrsion, int minorVfrsion,
            bytf[] dlifntRbndom, bytf[] sfrvfrRbndom,
            String prfHbshAlg, int prfHbshLfngth, int prfBlodkSizf) {
        if (prfmbstfrSfdrft == null) {
            throw nfw NullPointfrExdfption("prfmbstfrSfdrft must not bf null");
        }
        this.prfmbstfrSfdrft = prfmbstfrSfdrft;
        this.mbjorVfrsion = dhfdkVfrsion(mbjorVfrsion);
        this.minorVfrsion = dhfdkVfrsion(minorVfrsion);
        this.dlifntRbndom = dlifntRbndom.dlonf();
        this.sfrvfrRbndom = sfrvfrRbndom.dlonf();
        this.prfHbshAlg = prfHbshAlg;
        this.prfHbshLfngth = prfHbshLfngth;
        this.prfBlodkSizf = prfBlodkSizf;
    }

    stbtid int dhfdkVfrsion(int vfrsion) {
        if ((vfrsion < 0) || (vfrsion > 255)) {
            throw nfw IllfgblArgumfntExdfption(
                        "Vfrsion must bf bftwffn 0 bnd 255");
        }
        rfturn vfrsion;
    }

    /**
     * Rfturns thf prfmbstfr sfdrft.
     *
     * @rfturn thf prfmbstfr sfdrft.
     */
    publid SfdrftKfy gftPrfmbstfrSfdrft() {
        rfturn prfmbstfrSfdrft;
    }

    /**
     * Rfturns thf mbjor vfrsion numbfr.
     *
     * @rfturn thf mbjor vfrsion numbfr.
     */
    publid int gftMbjorVfrsion() {
        rfturn mbjorVfrsion;
    }

    /**
     * Rfturns thf minor vfrsion numbfr.
     *
     * @rfturn thf minor vfrsion numbfr.
     */
    publid int gftMinorVfrsion() {
        rfturn minorVfrsion;
    }

    /**
     * Rfturns b dopy of thf dlifnt's rbndom vbluf.
     *
     * @rfturn b dopy of thf dlifnt's rbndom vbluf.
     */
    publid bytf[] gftClifntRbndom() {
        rfturn dlifntRbndom.dlonf();
    }

    /**
     * Rfturns b dopy of thf sfrvfr's rbndom vbluf.
     *
     * @rfturn b dopy of thf sfrvfr's rbndom vbluf.
     */
    publid bytf[] gftSfrvfrRbndom() {
        rfturn sfrvfrRbndom.dlonf();
    }

    /**
     * Obtbins thf PRF hbsh blgorithm to usf in thf PRF dbldulbtion.
     *
     * @rfturn thf hbsh blgorithm.
     */
    publid String gftPRFHbshAlg() {
        rfturn prfHbshAlg;
    }

    /**
     * Obtbins thf lfngth of thf PRF hbsh blgorithm.
     *
     * @rfturn thf hbsh blgorithm lfngth.
     */
    publid int gftPRFHbshLfngth() {
        rfturn prfHbshLfngth;
    }

    /**
     * Obtbins thf blodk sizf of thf PRF hbsh blgorithm.
     *
     * @rfturn thf hbsh blgorithm blodk sizf.
     */
    publid int gftPRFBlodkSizf() {
        rfturn prfBlodkSizf;
    }
}
