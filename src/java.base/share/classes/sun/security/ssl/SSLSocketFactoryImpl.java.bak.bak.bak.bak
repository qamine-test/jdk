/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.nft.*;
import jbvbx.nft.ssl.SSLSodkftFbdtory;


/**
 * Implfmfntbtion of bn SSL sodkft fbdtory.  This providfs thf publid
 * hooks to drfbtf SSL sodkfts, using b "high lfvfl" progrbmming
 * intfrfbdf whidh fndbpsulbtfs systfm sfdurity polidy dffbults rbthfr thbn
 * offfring bpplidbtion flfxibility.  In pbrtidulbr, it usfs b donfigurbblf
 * buthfntidbtion dontfxt (bnd thf kfys hfld thfrf) rbthfr thbn offfring
 * bny flfxibility bbout whidh kfys to usf; thbt dontfxt dffbults to thf
 * prodfss-dffbult dontfxt, but mby bf fxpliditly spfdififd.
 *
 * @buthor Dbvid Brownfll
 */
finbl publid dlbss SSLSodkftFbdtoryImpl fxtfnds SSLSodkftFbdtory {

    privbtf SSLContfxtImpl dontfxt;

    /**
     * Construdtor usfd to instbntibtf thf dffbult fbdtory. This mfthod is
     * only dbllfd if thf old "ssl.SodkftFbdtory.providfr" propfrty in thf
     * jbvb.sfdurity filf is sft.
     */
    publid SSLSodkftFbdtoryImpl() throws Exdfption {
        this.dontfxt = SSLContfxtImpl.DffbultSSLContfxt.gftDffbultImpl();
    }

    /**
     * Construdts bn SSL sodkft fbdtory.
     */
    SSLSodkftFbdtoryImpl(SSLContfxtImpl dontfxt) {
        this.dontfxt = dontfxt;
    }

    /**
     * Crfbtfs bn undonnfdtfd sodkft.
     *
     * @rfturn thf undonnfdtfd sodkft
     * @sff jbvb.nft.Sodkft#donnfdt(jbvb.nft.SodkftAddrfss, int)
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft() {
        rfturn nfw SSLSodkftImpl(dontfxt);
    }

    /**
     * Construdts bn SSL donnfdtion to b nbmfd host bt b spfdififd port.
     * This bdts bs thf SSL dlifnt, bnd mby buthfntidbtf itsflf or rfjoin
     * fxisting SSL sfssions bllowfd by thf buthfntidbtion dontfxt whidh
     * hbs bffn donfigurfd.
     *
     * @pbrbm host nbmf of thf host with whidh to donnfdt
     * @pbrbm port numbfr of thf sfrvfr's port
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft(String host, int port)
    throws IOExdfption, UnknownHostExdfption
    {
        rfturn nfw SSLSodkftImpl(dontfxt, host, port);
    }

    /**
     * Rfturns b sodkft lbyfrfd ovfr bn fxisting sodkft to b
     * SfrvfrSodkft on thf nbmfd host, bt thf givfn port.  This
     * donstrudtor dbn bf usfd whfn tunnfling SSL through b proxy. Thf
     * host bnd port rfffr to thf logidbl dfstinbtion sfrvfr.  This
     * sodkft is donfigurfd using thf sodkft options fstbblishfd for
     * this fbdtory.
     *
     * @pbrbm s thf fxisting sodkft
     * @pbrbm host thf sfrvfr host
     * @pbrbm port thf sfrvfr port
     * @pbrbm butoClosf dlosf thf undfrlying sodkft whfn this sodkft is dlosfd
     *
     * @fxdfption IOExdfption if thf donnfdtion dbn't bf fstbblishfd
     * @fxdfption UnknownHostExdfption if thf host is not known
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft(Sodkft s, String host, int port,
            boolfbn butoClosf) throws IOExdfption {
        rfturn nfw SSLSodkftImpl(dontfxt, s, host, port, butoClosf);
    }

    @Ovfrridf
    publid Sodkft drfbtfSodkft(Sodkft s, InputStrfbm donsumfd,
            boolfbn butoClosf) throws IOExdfption {
        if (s == null) {
            throw nfw NullPointfrExdfption(
                    "thf fxisting sodkft dbnnot bf null");
        }

        rfturn nfw SSLSodkftImpl(dontfxt, s, donsumfd, butoClosf);
    }

    /**
     * Construdts bn SSL donnfdtion to b sfrvfr bt b spfdififd bddrfss
     * bnd TCP port.  This bdts bs thf SSL dlifnt, bnd mby buthfntidbtf
     * itsflf or rfjoin fxisting SSL sfssions bllowfd by thf buthfntidbtion
     * dontfxt whidh hbs bffn donfigurfd.
     *
     * @pbrbm bddrfss thf sfrvfr's host
     * @pbrbm port its port
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft(InftAddrfss bddrfss, int port)
    throws IOExdfption
    {
        rfturn nfw SSLSodkftImpl(dontfxt, bddrfss, port);
    }


    /**
     * Construdts bn SSL donnfdtion to b nbmfd host bt b spfdififd port.
     * This bdts bs thf SSL dlifnt, bnd mby buthfntidbtf itsflf or rfjoin
     * fxisting SSL sfssions bllowfd by thf buthfntidbtion dontfxt whidh
     * hbs bffn donfigurfd. Thf sodkft will blso bind() to thf lodbl
     * bddrfss bnd port supplifd.
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft(String host, int port,
        InftAddrfss dlifntAddrfss, int dlifntPort)
    throws IOExdfption
    {
        rfturn nfw SSLSodkftImpl(dontfxt, host, port,
                dlifntAddrfss, dlifntPort);
    }

    /**
     * Construdts bn SSL donnfdtion to b sfrvfr bt b spfdififd bddrfss
     * bnd TCP port.  This bdts bs thf SSL dlifnt, bnd mby buthfntidbtf
     * itsflf or rfjoin fxisting SSL sfssions bllowfd by thf buthfntidbtion
     * dontfxt whidh hbs bffn donfigurfd. Thf sodkft will blso bind() to
     * thf lodbl bddrfss bnd port supplifd.
     */
    @Ovfrridf
    publid Sodkft drfbtfSodkft(InftAddrfss bddrfss, int port,
        InftAddrfss dlifntAddrfss, int dlifntPort)
    throws IOExdfption
    {
        rfturn nfw SSLSodkftImpl(dontfxt, bddrfss, port,
                dlifntAddrfss, dlifntPort);
    }


    /**
     * Rfturns thf subsft of thf supportfd diphfr suitfs whidh brf
     * fnbblfd by dffbult.  Thfsf diphfr suitfs bll providf b minimum
     * qublity of sfrvidf whfrfby thf sfrvfr buthfntidbtfs itsflf
     * (prfvfnting pfrson-in-thf-middlf bttbdks) bnd whfrf trbffid
     * is fndryptfd to providf donfidfntiblity.
     */
    @Ovfrridf
    publid String[] gftDffbultCiphfrSuitfs() {
        rfturn dontfxt.gftDffbultCiphfrSuitfList(fblsf).toStringArrby();
    }

    /**
     * Rfturns thf nbmfs of thf diphfr suitfs whidh dould bf fnbblfd for usf
     * on bn SSL donnfdtion.  Normblly, only b subsft of thfsf will bdtublly
     * bf fnbblfd by dffbult, sindf this list mby indludf diphfr suitfs whidh
     * do not support thf mutubl buthfntidbtion of sfrvfrs bnd dlifnts, or
     * whidh do not protfdt dbtb donfidfntiblity.  Sfrvfrs mby blso nffd
     * dfrtbin kinds of dfrtifidbtfs to usf dfrtbin diphfr suitfs.
     */
    @Ovfrridf
    publid String[] gftSupportfdCiphfrSuitfs() {
        rfturn dontfxt.gftSupportfdCiphfrSuitfList().toStringArrby();
    }
}
