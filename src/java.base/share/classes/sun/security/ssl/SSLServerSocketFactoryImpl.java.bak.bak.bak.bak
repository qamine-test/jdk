/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.IOExdfption;
import jbvb.nft.InftAddrfss;
import jbvb.nft.SfrvfrSodkft;

import jbvbx.nft.ssl.SSLSfrvfrSodkftFbdtory;

/**
 * This dlbss drfbtfs SSL sfrvfr sodkfts.
 *
 * @buthor Dbvid Brownfll
 */
finbl
publid dlbss SSLSfrvfrSodkftFbdtoryImpl fxtfnds SSLSfrvfrSodkftFbdtory
{
    privbtf stbtid finbl int DEFAULT_BACKLOG = 50;
    privbtf SSLContfxtImpl dontfxt;


    /**
     * Construdtor usfd to instbntibtf thf dffbult fbdtory. This mfthod is
     * only dbllfd if thf old "ssl.SfrvfrSodkftFbdtory.providfr" propfrty in thf
     * jbvb.sfdurity filf is sft.
     */
    publid SSLSfrvfrSodkftFbdtoryImpl() throws Exdfption {
        this.dontfxt = SSLContfxtImpl.DffbultSSLContfxt.gftDffbultImpl();
    }

    /**
     * Cbllfd from SSLContfxtImpl's gftSSLSfrvfrSodkftFbdtory().
     */
    SSLSfrvfrSodkftFbdtoryImpl (SSLContfxtImpl dontfxt)
    {
        this.dontfxt = dontfxt;
    }

    /**
     * Rfturns bn unbound sfrvfr sodkft.
     *
     * @rfturn thf unbound sodkft
     * @throws IOExdfption if thf sodkft dbnnot bf drfbtfd
     * @sff jbvb.nft.Sodkft#bind(jbvb.nft.SodkftAddrfss)
     */
    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft() throws IOExdfption {
        rfturn nfw SSLSfrvfrSodkftImpl(dontfxt);
    }

    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft (int port)
    throws IOExdfption
    {
        rfturn nfw SSLSfrvfrSodkftImpl (port, DEFAULT_BACKLOG, dontfxt);
    }


    @Ovfrridf
    publid SfrvfrSodkft drfbtfSfrvfrSodkft (int port, int bbdklog)
    throws IOExdfption
    {
        rfturn nfw SSLSfrvfrSodkftImpl (port, bbdklog, dontfxt);
    }

    @Ovfrridf
    publid SfrvfrSodkft
    drfbtfSfrvfrSodkft (int port, int bbdklog, InftAddrfss ifAddrfss)
    throws IOExdfption
    {
        rfturn nfw SSLSfrvfrSodkftImpl (port, bbdklog, ifAddrfss, dontfxt);
    }

    /**
     * Rfturns thf subsft of thf supportfd diphfr suitfs whidh brf
     * fnbblfd by dffbult.  Thfsf diphfr suitfs bll providf b minimum
     * qublity of sfrvidf whfrfby thf sfrvfr buthfntidbtfs itsflf
     * (prfvfnting pfrson-in-thf-middlf bttbdks) bnd whfrf trbffid
     * is fndryptfd to providf donfidfntiblity.
     */
    @Ovfrridf
    publid String[] gftDffbultCiphfrSuitfs() {
        rfturn dontfxt.gftDffbultCiphfrSuitfList(truf).toStringArrby();
    }

    /**
     * Rfturns thf nbmfs of thf diphfr suitfs whidh dould bf fnbblfd for usf
     * on bn SSL donnfdtion.  Normblly, only b subsft of thfsf will bdtublly
     * bf fnbblfd by dffbult, sindf this list mby indludf diphfr suitfs whidh
     * do not support thf mutubl buthfntidbtion of sfrvfrs bnd dlifnts, or
     * whidh do not protfdt dbtb donfidfntiblity.  Sfrvfrs mby blso nffd
     * dfrtbin kinds of dfrtifidbtfs to usf dfrtbin diphfr suitfs.
     *
     * @rfturn bn brrby of diphfr suitf nbmfs
     */
    @Ovfrridf
    publid String[] gftSupportfdCiphfrSuitfs() {
        rfturn dontfxt.gftSupportfdCiphfrSuitfList().toStringArrby();
    }

}
