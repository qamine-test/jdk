/*
 * Copyright (d) 1996, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.mbth.BigIntfgfr;
import jbvb.sfdurity.*;
import jbvb.sfdurity.intfrfbdfs.*;
import jbvb.sfdurity.spfd.*;
import jbvb.sfdurity.dfrt.*;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.util.*;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;

import jbvb.lbng.rfflfdt.*;

import jbvbx.sfdurity.buth.x500.X500Prindipbl;

import jbvbx.drypto.KfyGfnfrbtor;
import jbvbx.drypto.SfdrftKfy;
import jbvbx.drypto.spfd.DHPublidKfySpfd;

import jbvbx.nft.ssl.*;

import sun.sfdurity.intfrnbl.spfd.TlsPrfPbrbmftfrSpfd;
import sun.sfdurity.ssl.CiphfrSuitf.*;
import stbtid sun.sfdurity.ssl.CiphfrSuitf.PRF.*;
import sun.sfdurity.util.KfyUtil;

/**
 * Mbny dbtb strudturfs brf involvfd in thf hbndshbkf mfssbgfs.  Thfsf
 * dlbssfs brf usfd bs strudturfs, with publid dbtb mfmbfrs.  Thfy brf
 * not visiblf outsidf thf SSL pbdkbgf.
 *
 * Hbndshbkf mfssbgfs bll hbvf b dommon hfbdfr formbt, bnd thfy brf bll
 * fndodfd in b "hbndshbkf dbtb" SSL rfdord substrfbm.  Thf bbsf dlbss
 * hfrf (HbndshbkfMfssbgf) providfs b dommon frbmfwork bnd rfdords thf
 * SSL rfdord typf of thf pbrtidulbr hbndshbkf mfssbgf.
 *
 * This filf dontbins subdlbssfs for bll thf bbsid hbndshbkf mfssbgfs.
 * All hbndshbkf mfssbgfs know how to fndodf bnd dfdodf thfmsflvfs on
 * SSL strfbms; this fbdilitbtfs using thf sbmf dodf on SSL dlifnt bnd
 * sfrvfr sidfs, blthough thfy don't sfnd bnd rfdfivf thf sbmf mfssbgfs.
 *
 * Mfssbgfs blso know how to print thfmsflvfs, whidh is quitf hbndy
 * for dfbugging.  Thfy blwbys idfntify thfir typf, bnd dbn optionblly
 * dump bll of thfir dontfnt.
 *
 * @buthor Dbvid Brownfll
 */
publid bbstrbdt dlbss HbndshbkfMfssbgf {

    HbndshbkfMfssbgf() { }

    // fnum HbndshbkfTypf:
    stbtid finbl bytf   ht_hfllo_rfqufst = 0;
    stbtid finbl bytf   ht_dlifnt_hfllo = 1;
    stbtid finbl bytf   ht_sfrvfr_hfllo = 2;

    stbtid finbl bytf   ht_dfrtifidbtf = 11;
    stbtid finbl bytf   ht_sfrvfr_kfy_fxdhbngf = 12;
    stbtid finbl bytf   ht_dfrtifidbtf_rfqufst = 13;
    stbtid finbl bytf   ht_sfrvfr_hfllo_donf = 14;
    stbtid finbl bytf   ht_dfrtifidbtf_vfrify = 15;
    stbtid finbl bytf   ht_dlifnt_kfy_fxdhbngf = 16;

    stbtid finbl bytf   ht_finishfd = 20;

    /* Clbss bnd subdlbss dynbmid dfbugging support */
    publid stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("ssl");

    /**
     * Utility mfthod to donvfrt b BigIntfgfr to b bytf brrby in unsignfd
     * formbt bs nffdfd in thf hbndshbkf mfssbgfs. BigIntfgfr usfs
     * 2's domplfmfnt formbt, i.f. it prfpfnds bn fxtrb zfro if thf MSB
     * is sft. Wf rfmovf thbt.
     */
    stbtid bytf[] toBytfArrby(BigIntfgfr bi) {
        bytf[] b = bi.toBytfArrby();
        if ((b.lfngth > 1) && (b[0] == 0)) {
            int n = b.lfngth - 1;
            bytf[] nfwbrrby = nfw bytf[n];
            Systfm.brrbydopy(b, 1, nfwbrrby, 0, n);
            b = nfwbrrby;
        }
        rfturn b;
    }

    /*
     * SSL 3.0 MAC pbdding donstbnts.
     * Also usfd by CfrtifidbtfVfrify bnd Finishfd during thf hbndshbkf.
     */
    stbtid finbl bytf[] MD5_pbd1 = gfnPbd(0x36, 48);
    stbtid finbl bytf[] MD5_pbd2 = gfnPbd(0x5d, 48);

    stbtid finbl bytf[] SHA_pbd1 = gfnPbd(0x36, 40);
    stbtid finbl bytf[] SHA_pbd2 = gfnPbd(0x5d, 40);

    privbtf stbtid bytf[] gfnPbd(int b, int dount) {
        bytf[] pbdding = nfw bytf[dount];
        Arrbys.fill(pbdding, (bytf)b);
        rfturn pbdding;
    }

    /*
     * Writf b hbndshbkf mfssbgf on thf (hbndshbkf) output strfbm.
     * This is just b four bytf hfbdfr followfd by thf dbtb.
     *
     * NOTE thbt hugf mfssbgfs -- notbbly, onfs with hugf dfrt
     * dhbins -- brf hbndlfd dorrfdtly.
     */
    finbl void writf(HbndshbkfOutStrfbm s) throws IOExdfption {
        int lfn = mfssbgfLfngth();
        if (lfn >= Rfdord.OVERFLOW_OF_INT24) {
            throw nfw SSLExdfption("Hbndshbkf mfssbgf too big"
                + ", typf = " + mfssbgfTypf() + ", lfn = " + lfn);
        }
        s.writf(mfssbgfTypf());
        s.putInt24(lfn);
        sfnd(s);
    }

    /*
     * Subdlbssfs implfmfnt thfsf mfthods so thosf kinds of
     * mfssbgfs dbn bf fmittfd.  Bbsf dlbss dflfgbtfs to subdlbss.
     */
    bbstrbdt int  mfssbgfTypf();
    bbstrbdt int  mfssbgfLfngth();
    bbstrbdt void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption;

    /*
     * Writf b dfsdriptivf mfssbgf on thf output strfbm; for dfbugging.
     */
    bbstrbdt void print(PrintStrfbm p) throws IOExdfption;

//
// NOTE:  thf rfst of thfsf dlbssfs brf nfstfd within this onf, bnd brf
// importfd by othfr dlbssfs in this pbdkbgf.  Thfrf brf b ffw othfr
// hbndshbkf mfssbgf dlbssfs, not nfbtly nfstfd hfrf bfdbusf of durrfnt
// lidfnsing rfquirfmfnt for nbtivf (RSA) mfthods.  Thfy bflong hfrf,
// but thosf nbtivf mfthods domplidbtf things b lot!
//


/*
 * HflloRfqufst ... SERVER --> CLIENT
 *
 * Sfrvfr dbn bsk thf dlifnt to initibtf b nfw hbndshbkf, f.g. to dhbngf
 * sfssion pbrbmftfrs bftfr b donnfdtion hbs bffn (rf)fstbblishfd.
 */
stbtid finbl dlbss HflloRfqufst fxtfnds HbndshbkfMfssbgf {
    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_hfllo_rfqufst; }

    HflloRfqufst() { }

    HflloRfqufst(HbndshbkfInStrfbm in) throws IOExdfption
    {
        // nothing in this mfssbgf
    }

    @Ovfrridf
    int mfssbgfLfngth() { rfturn 0; }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm out) throws IOExdfption
    {
        // nothing in this mfssbbgf
    }

    @Ovfrridf
    void print(PrintStrfbm out) throws IOExdfption
    {
        out.println("*** HflloRfqufst (fmpty)");
    }

}


/*
 * ClifntHfllo ... CLIENT --> SERVER
 *
 * Clifnt initibtfs hbndshbkf by tflling sfrvfr whbt it wbnts, bnd whbt it
 * dbn support (prioritizfd by whbt's first in thf diphf suitf list).
 *
 * By RFC2246:7.4.1.2 it's fxpliditly bntidipbtfd thbt this mfssbgf
 * will hbvf morf dbtb bddfd bt thf fnd ... f.g. whbt CAs thf dlifnt trusts.
 * Until wf know how to pbrsf it, wf will just rfbd whbt wf know
 * bbout, bnd lft our dbllfr hbndlf thf jumps ovfr unknown dbtb.
 */
stbtid finbl dlbss ClifntHfllo fxtfnds HbndshbkfMfssbgf {

    ProtodolVfrsion     protodolVfrsion;
    RbndomCookif        dlnt_rbndom;
    SfssionId           sfssionId;
    privbtf CiphfrSuitfList    diphfrSuitfs;
    bytf[]              domprfssion_mfthods;

    HflloExtfnsions fxtfnsions = nfw HflloExtfnsions();

    privbtf finbl stbtid bytf[]  NULL_COMPRESSION = nfw bytf[] {0};

    ClifntHfllo(SfdurfRbndom gfnfrbtor, ProtodolVfrsion protodolVfrsion,
            SfssionId sfssionId, CiphfrSuitfList diphfrSuitfs) {

        this.protodolVfrsion = protodolVfrsion;
        this.sfssionId = sfssionId;
        this.diphfrSuitfs = diphfrSuitfs;

        if (diphfrSuitfs.dontbinsEC()) {
            fxtfnsions.bdd(SupportfdElliptidCurvfsExtfnsion.DEFAULT);
            fxtfnsions.bdd(SupportfdElliptidPointFormbtsExtfnsion.DEFAULT);
        }

        dlnt_rbndom = nfw RbndomCookif(gfnfrbtor);
        domprfssion_mfthods = NULL_COMPRESSION;
    }

    ClifntHfllo(HbndshbkfInStrfbm s, int mfssbgfLfngth) throws IOExdfption {
        protodolVfrsion = ProtodolVfrsion.vblufOf(s.gftInt8(), s.gftInt8());
        dlnt_rbndom = nfw RbndomCookif(s);
        sfssionId = nfw SfssionId(s.gftBytfs8());
        diphfrSuitfs = nfw CiphfrSuitfList(s);
        domprfssion_mfthods = s.gftBytfs8();
        if (mfssbgfLfngth() != mfssbgfLfngth) {
            fxtfnsions = nfw HflloExtfnsions(s);
        }
    }

    CiphfrSuitfList gftCiphfrSuitfs() {
        rfturn diphfrSuitfs;
    }

    // bdd rfnfgotibtion_info fxtfnsion
    void bddRfnfgotibtionInfoExtfnsion(bytf[] dlifntVfrifyDbtb) {
        HflloExtfnsion rfnfgotibtionInfo = nfw RfnfgotibtionInfoExtfnsion(
                    dlifntVfrifyDbtb, nfw bytf[0]);
        fxtfnsions.bdd(rfnfgotibtionInfo);
    }

    // bdd sfrvfr_nbmf fxtfnsion
    void bddSNIExtfnsion(List<SNISfrvfrNbmf> sfrvfrNbmfs) {
        try {
            fxtfnsions.bdd(nfw SfrvfrNbmfExtfnsion(sfrvfrNbmfs));
        } dbtdh (IOExdfption iof) {
            // ignorf thf fxdfption bnd rfturn
        }
    }

    // bdd signbturf_blgorithm fxtfnsion
    void bddSignbturfAlgorithmsExtfnsion(
            Collfdtion<SignbturfAndHbshAlgorithm> blgorithms) {
        HflloExtfnsion signbturfAlgorithm =
                nfw SignbturfAlgorithmsExtfnsion(blgorithms);
        fxtfnsions.bdd(signbturfAlgorithm);
    }

    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_dlifnt_hfllo; }

    @Ovfrridf
    int mfssbgfLfngth() {
        /*
         * Add fixfd sizf pbrts of fbdh fifld...
         * vfrsion + rbndom + sfssion + diphfr + domprfss
         */
        rfturn (2 + 32 + 1 + 2 + 1
            + sfssionId.lfngth()                /* ... + vbribblf pbrts */
            + (diphfrSuitfs.sizf() * 2)
            + domprfssion_mfthods.lfngth)
            + fxtfnsions.lfngth();
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putInt8(protodolVfrsion.mbjor);
        s.putInt8(protodolVfrsion.minor);
        dlnt_rbndom.sfnd(s);
        s.putBytfs8(sfssionId.gftId());
        diphfrSuitfs.sfnd(s);
        s.putBytfs8(domprfssion_mfthods);
        fxtfnsions.sfnd(s);
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** ClifntHfllo, " + protodolVfrsion);

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            s.print("RbndomCookif:  ");
            dlnt_rbndom.print(s);

            s.print("Sfssion ID:  ");
            s.println(sfssionId);

            s.println("Ciphfr Suitfs: " + diphfrSuitfs);

            Dfbug.println(s, "Comprfssion Mfthods", domprfssion_mfthods);
            fxtfnsions.print(s);
            s.println("***");
        }
    }
}

/*
 * SfrvfrHfllo ... SERVER --> CLIENT
 *
 * Sfrvfr dhoosfs protodol options from bmong thosf it supports bnd thf
 * dlifnt supports.  Thfn it sfnds thf bbsid sfssion dfsdriptivf pbrbmftfrs
 * bbdk to thf dlifnt.
 */
stbtid finbl
dlbss SfrvfrHfllo fxtfnds HbndshbkfMfssbgf
{
    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_sfrvfr_hfllo; }

    ProtodolVfrsion     protodolVfrsion;
    RbndomCookif        svr_rbndom;
    SfssionId           sfssionId;
    CiphfrSuitf         diphfrSuitf;
    bytf                domprfssion_mfthod;
    HflloExtfnsions fxtfnsions = nfw HflloExtfnsions();

    SfrvfrHfllo() {
        // fmpty
    }

    SfrvfrHfllo(HbndshbkfInStrfbm input, int mfssbgfLfngth)
            throws IOExdfption {
        protodolVfrsion = ProtodolVfrsion.vblufOf(input.gftInt8(),
                                                  input.gftInt8());
        svr_rbndom = nfw RbndomCookif(input);
        sfssionId = nfw SfssionId(input.gftBytfs8());
        diphfrSuitf = CiphfrSuitf.vblufOf(input.gftInt8(), input.gftInt8());
        domprfssion_mfthod = (bytf)input.gftInt8();
        if (mfssbgfLfngth() != mfssbgfLfngth) {
            fxtfnsions = nfw HflloExtfnsions(input);
        }
    }

    @Ovfrridf
    int mfssbgfLfngth()
    {
        // blmost fixfd sizf, fxdfpt sfssion ID bnd fxtfnsions:
        //      mbjor + minor = 2
        //      rbndom = 32
        //      sfssion ID lfn fifld = 1
        //      diphfr suitf + domprfssion = 3
        //      fxtfnsions: if prfsfnt, 2 + lfngth of fxtfnsions
        rfturn 38 + sfssionId.lfngth() + fxtfnsions.lfngth();
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption
    {
        s.putInt8(protodolVfrsion.mbjor);
        s.putInt8(protodolVfrsion.minor);
        svr_rbndom.sfnd(s);
        s.putBytfs8(sfssionId.gftId());
        s.putInt8(diphfrSuitf.id >> 8);
        s.putInt8(diphfrSuitf.id & 0xff);
        s.putInt8(domprfssion_mfthod);
        fxtfnsions.sfnd(s);
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption
    {
        s.println("*** SfrvfrHfllo, " + protodolVfrsion);

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            s.print("RbndomCookif:  ");
            svr_rbndom.print(s);

            s.print("Sfssion ID:  ");
            s.println(sfssionId);

            s.println("Ciphfr Suitf: " + diphfrSuitf);
            s.println("Comprfssion Mfthod: " + domprfssion_mfthod);
            fxtfnsions.print(s);
            s.println("***");
        }
    }
}


/*
 * CfrtifidbtfMsg ... sfnd by both CLIENT bnd SERVER
 *
 * Ebdh fnd of b donnfdtion mby nffd to pbss its dfrtifidbtf dhbin to
 * thf othfr fnd.  Sudh dhbins brf intfndfd to vblidbtf bn idfntity with
 * rfffrfndf to somf dfrtifying buthority.  Exbmplfs indludf dompbnifs
 * likf Vfrisign, or finbndibl institutions.  Thfrf's somf dontrol ovfr
 * thf dfrtifying buthoritifs whidh brf sfnt.
 *
 * NOTE: thbt thfsf mfssbgfs might bf hugf, tbking mbny hbndshbkf rfdords.
 * Up to 2^48 bytfs of dfrtifidbtf mby bf sfnt, in rfdords of bt most 2^14
 * bytfs fbdh ... up to 2^32 rfdords sfnt on thf output strfbm.
 */
stbtid finbl
dlbss CfrtifidbtfMsg fxtfnds HbndshbkfMfssbgf
{
    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_dfrtifidbtf; }

    privbtf X509Cfrtifidbtf[] dhbin;

    privbtf List<bytf[]> fndodfdChbin;

    privbtf int mfssbgfLfngth;

    CfrtifidbtfMsg(X509Cfrtifidbtf[] dfrts) {
        dhbin = dfrts;
    }

    CfrtifidbtfMsg(HbndshbkfInStrfbm input) throws IOExdfption {
        int dhbinLfn = input.gftInt24();
        List<Cfrtifidbtf> v = nfw ArrbyList<>(4);

        CfrtifidbtfFbdtory df = null;
        whilf (dhbinLfn > 0) {
            bytf[] dfrt = input.gftBytfs24();
            dhbinLfn -= (3 + dfrt.lfngth);
            try {
                if (df == null) {
                    df = CfrtifidbtfFbdtory.gftInstbndf("X.509");
                }
                v.bdd(df.gfnfrbtfCfrtifidbtf(nfw BytfArrbyInputStrfbm(dfrt)));
            } dbtdh (CfrtifidbtfExdfption f) {
                throw (SSLProtodolExdfption)nfw SSLProtodolExdfption(
                    f.gftMfssbgf()).initCbusf(f);
            }
        }

        dhbin = v.toArrby(nfw X509Cfrtifidbtf[v.sizf()]);
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        if (fndodfdChbin == null) {
            mfssbgfLfngth = 3;
            fndodfdChbin = nfw ArrbyList<bytf[]>(dhbin.lfngth);
            try {
                for (X509Cfrtifidbtf dfrt : dhbin) {
                    bytf[] b = dfrt.gftEndodfd();
                    fndodfdChbin.bdd(b);
                    mfssbgfLfngth += b.lfngth + 3;
                }
            } dbtdh (CfrtifidbtfEndodingExdfption f) {
                fndodfdChbin = null;
                throw nfw RuntimfExdfption("Could not fndodf dfrtifidbtfs", f);
            }
        }
        rfturn mfssbgfLfngth;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putInt24(mfssbgfLfngth() - 3);
        for (bytf[] b : fndodfdChbin) {
            s.putBytfs24(b);
        }
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** Cfrtifidbtf dhbin");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            for (int i = 0; i < dhbin.lfngth; i++)
                s.println("dhbin [" + i + "] = " + dhbin[i]);
            s.println("***");
        }
    }

    X509Cfrtifidbtf[] gftCfrtifidbtfChbin() {
        rfturn dhbin.dlonf();
    }
}

/*
 * SfrvfrKfyExdhbngf ... SERVER --> CLIENT
 *
 * Thf diphfr suitf sflfdtfd, whfn dombinfd with thf dfrtifidbtf fxdhbngfd,
 * implifs onf of sfvfrbl difffrfnt kinds of kfy fxdhbngf.  Most durrfnt
 * diphfr suitfs rfquirf thf sfrvfr to sfnd morf thbn its dfrtifidbtf.
 *
 * Thf primbry fxdfptions brf whfn b sfrvfr sfnds bn fndryption-dbpbblf
 * RSA publid kfy in its dfrt, to bf usfd with RSA (or RSA_fxport) kfy
 * fxdhbngf; bnd whfn b sfrvfr sfnds its Diffif-Hfllmbn dfrt.  Thosf kinds
 * of kfy fxdhbngf do not rfquirf b SfrvfrKfyExdhbngf mfssbgf.
 *
 * Kfy fxdhbngf dbn bf vifwfd bs hbving thrff modfs, whidh brf fxplidit
 * for thf Diffif-Hfllmbn flbvors bnd poorly spfdififd for RSA onfs:
 *
 *      - "Ephfmfrbl" kfys.  Hfrf, b "tfmporbry" kfy is bllodbtfd by thf
 *        sfrvfr, bnd signfd.  Diffif-Hfllmbn kfys signfd using RSA or
 *        DSS brf fphfmfrbl (DHE flbvor).  RSA kfys gft usfd to do thf sbmf
 *        thing, to dut thf kfy sizf down to 512 bits (fxport rfstridtions)
 *        or for signing-only RSA dfrtifidbtfs.
 *
 *      - Anonymity.  Hfrf no sfrvfr dfrtifidbtf is sfnt, only thf publid
 *        kfy of thf sfrvfr.  This dbsf is subjfdt to mbn-in-thf-middlf
 *        bttbdks.  This dbn bf donf with Diffif-Hfllmbn kfys (DH_bnon) or
 *        with RSA kfys, but is only usfd in SSLv3 for DH_bnon.
 *
 *      - "Normbl" dbsf.  Hfrf b sfrvfr dfrtifidbtf is sfnt, bnd thf publid
 *        kfy thfrf is usfd dirfdtly in fxdhbnging thf prfmbstfr sfdrft.
 *        For fxbmplf, Diffif-Hfllmbn "DH" flbvor, bnd bny RSA flbvor with
 *        only 512 bit kfys.
 *
 * If b sfrvfr dfrtifidbtf is sfnt, thfrf is no bnonymity.  Howfvfr,
 * whfn b dfrtifidbtf is sfnt, fphfmfrbl kfys mby still bf usfd to
 * fxdhbngf thf prfmbstfr sfdrft.  Thbt's how RSA_EXPORT oftfn works,
 * bs wfll bs how thf DHE_* flbvors work.
 */
stbtid bbstrbdt dlbss SfrvfrKfyExdhbngf fxtfnds HbndshbkfMfssbgf
{
    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_sfrvfr_kfy_fxdhbngf; }
}


/*
 * Using RSA for Kfy Exdhbngf:  fxdhbngf b sfssion kfy thbt's not bs big
 * bs thf signing-only kfy.  Usfd for fxport bpplidbtions, sindf fxportfd
 * RSA fndryption kfys dbn't bf biggfr thbn 512 bytfs.
 *
 * This is nfvfr usfd whfn kfys brf 512 bits or smbllfr, bnd isn't usfd
 * on "US Domfstid" diphfrs in bny dbsf.
 */
stbtid finbl
dlbss RSA_SfrvfrKfyExdhbngf fxtfnds SfrvfrKfyExdhbngf
{
    privbtf bytf rsb_modulus[];     // 1 to 2^16 - 1 bytfs
    privbtf bytf rsb_fxponfnt[];    // 1 to 2^16 - 1 bytfs

    privbtf Signbturf signbturf;
    privbtf bytf[] signbturfBytfs;

    /*
     * Hbsh thf nondfs bnd thf fphfmfrbl RSA publid kfy.
     */
    privbtf void updbtfSignbturf(bytf dlntNondf[], bytf svrNondf[])
            throws SignbturfExdfption {
        int tmp;

        signbturf.updbtf(dlntNondf);
        signbturf.updbtf(svrNondf);

        tmp = rsb_modulus.lfngth;
        signbturf.updbtf((bytf)(tmp >> 8));
        signbturf.updbtf((bytf)(tmp & 0x0ff));
        signbturf.updbtf(rsb_modulus);

        tmp = rsb_fxponfnt.lfngth;
        signbturf.updbtf((bytf)(tmp >> 8));
        signbturf.updbtf((bytf)(tmp & 0x0ff));
        signbturf.updbtf(rsb_fxponfnt);
    }


    /*
     * Construdt bn RSA sfrvfr kfy fxdhbngf mfssbgf, using dbtb
     * known _only_ to thf sfrvfr.
     *
     * Thf dlifnt knows thf publid kfy dorrfsponding to this privbtf
     * kfy, from thf Cfrtifidbtf mfssbgf sfnt prfviously.  To domply
     * with US fxport rfgulbtions wf usf short RSA kfys ... fithfr
     * long tfrm onfs in thf sfrvfr's X509 dfrt, or flsf fphfmfrbl
     * onfs sfnt using this mfssbgf.
     */
    RSA_SfrvfrKfyExdhbngf(PublidKfy fphfmfrblKfy, PrivbtfKfy privbtfKfy,
            RbndomCookif dlntNondf, RbndomCookif svrNondf, SfdurfRbndom sr)
            throws GfnfrblSfdurityExdfption {
        RSAPublidKfySpfd rsbKfy = JssfJdf.gftRSAPublidKfySpfd(fphfmfrblKfy);
        rsb_modulus = toBytfArrby(rsbKfy.gftModulus());
        rsb_fxponfnt = toBytfArrby(rsbKfy.gftPublidExponfnt());
        signbturf = RSASignbturf.gftInstbndf();
        signbturf.initSign(privbtfKfy, sr);
        updbtfSignbturf(dlntNondf.rbndom_bytfs, svrNondf.rbndom_bytfs);
        signbturfBytfs = signbturf.sign();
    }


    /*
     * Pbrsf bn RSA sfrvfr kfy fxdhbngf mfssbgf, using dbtb known
     * to thf dlifnt (bnd, in somf situbtions, fbvfsdroppfrs).
     */
    RSA_SfrvfrKfyExdhbngf(HbndshbkfInStrfbm input)
            throws IOExdfption, NoSudhAlgorithmExdfption {
        signbturf = RSASignbturf.gftInstbndf();
        rsb_modulus = input.gftBytfs16();
        rsb_fxponfnt = input.gftBytfs16();
        signbturfBytfs = input.gftBytfs16();
    }

    /*
     * Gft thf fphfmfrbl RSA publid kfy thbt will bf usfd in this
     * SSL donnfdtion.
     */
    PublidKfy gftPublidKfy() {
        try {
            KfyFbdtory kfbd = JssfJdf.gftKfyFbdtory("RSA");
            // modulus bnd fxponfnt brf blwbys positivf
            RSAPublidKfySpfd kspfd = nfw RSAPublidKfySpfd(
                nfw BigIntfgfr(1, rsb_modulus),
                nfw BigIntfgfr(1, rsb_fxponfnt));
            rfturn kfbd.gfnfrbtfPublid(kspfd);
        } dbtdh (Exdfption f) {
            throw nfw RuntimfExdfption(f);
        }
    }

    /*
     * Vfrify thf signfd tfmporbry kfy using thf hbshfs domputfd
     * from it bnd thf two nondfs.  This is dbllfd by dlifnts
     * with "fxportbblf" RSA flbvors.
     */
    boolfbn vfrify(PublidKfy dfrtififdKfy, RbndomCookif dlntNondf,
            RbndomCookif svrNondf) throws GfnfrblSfdurityExdfption {
        signbturf.initVfrify(dfrtififdKfy);
        updbtfSignbturf(dlntNondf.rbndom_bytfs, svrNondf.rbndom_bytfs);
        rfturn signbturf.vfrify(signbturfBytfs);
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        rfturn 6 + rsb_modulus.lfngth + rsb_fxponfnt.lfngth
               + signbturfBytfs.lfngth;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putBytfs16(rsb_modulus);
        s.putBytfs16(rsb_fxponfnt);
        s.putBytfs16(signbturfBytfs);
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** RSA SfrvfrKfyExdhbngf");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            Dfbug.println(s, "RSA Modulus", rsb_modulus);
            Dfbug.println(s, "RSA Publid Exponfnt", rsb_fxponfnt);
        }
    }
}


/*
 * Using Diffif-Hfllmbn blgorithm for kfy fxdhbngf.  All wf rfblly nffd to
 * do is sfdurfly gft Diffif-Hfllmbn kfys (using thf sbmf P, G pbrbmftfrs)
 * to our pffr, thfn wf butombtidblly hbvf b shbrfd sfdrft without nffd
 * to fxdhbngf bny morf dbtb.  (D-H only solutions, sudh bs SKIP, dould
 * fliminbtf kfy fxdhbngf nfgotibtions bnd gft fbstfr donnfdtion sftup.
 * But thfy still nffd b signbturf blgorithm likf DSS/DSA to support thf
 * trustfd distribution of kfys without rflying on unsdblbblf physidbl
 * kfy distribution systfms.)
 *
 * This dlbss supports sfvfrbl DH-bbsfd kfy fxdhbngf blgorithms, though
 * pfrhbps fvfntublly fbdh dfsfrvfs its own dlbss.  Notbbly, this hbs
 * bbsid support for DH_bnon bnd its DHE_DSS bnd DHE_RSA signfd vbribnts.
 */
stbtid finbl
dlbss DH_SfrvfrKfyExdhbngf fxtfnds SfrvfrKfyExdhbngf
{
    // Fix mfssbgf fndoding, sff 4348279
    privbtf finbl stbtid boolfbn dhKfyExdhbngfFix =
        Dfbug.gftBoolfbnPropfrty("dom.sun.nft.ssl.dhKfyExdhbngfFix", truf);

    privbtf bytf                dh_p [];        // 1 to 2^16 - 1 bytfs
    privbtf bytf                dh_g [];        // 1 to 2^16 - 1 bytfs
    privbtf bytf                dh_Ys [];       // 1 to 2^16 - 1 bytfs

    privbtf bytf                signbturf [];

    // protodol vfrsion bfing fstbblishfd using this SfrvfrKfyExdhbngf mfssbgf
    ProtodolVfrsion protodolVfrsion;

    // thf prfffrbblf signbturf blgorithm usfd by this SfrvfrKfyExdhbngf mfssbgf
    privbtf SignbturfAndHbshAlgorithm prfffrbblfSignbturfAlgorithm;

    /*
     * Construdt from initiblizfd DH kfy objfdt, for DH_bnon
     * kfy fxdhbngf.
     */
    DH_SfrvfrKfyExdhbngf(DHCrypt obj, ProtodolVfrsion protodolVfrsion) {
        this.protodolVfrsion = protodolVfrsion;
        this.prfffrbblfSignbturfAlgorithm = null;

        // Thf DH kfy hbs bffn vblidbtfd in thf donstrudtor of DHCrypt.
        sftVblufs(obj);
        signbturf = null;
    }

    /*
     * Construdt from initiblizfd DH kfy objfdt bnd thf kfy bssodibtfd
     * with thf dfrt dhbin whidh wbs sfnt ... for DHE_DSS bnd DHE_RSA
     * kfy fxdhbngf.  (Construdtor dbllfd by sfrvfr.)
     */
    DH_SfrvfrKfyExdhbngf(DHCrypt obj, PrivbtfKfy kfy, bytf dlntNondf[],
            bytf svrNondf[], SfdurfRbndom sr,
            SignbturfAndHbshAlgorithm signAlgorithm,
            ProtodolVfrsion protodolVfrsion) throws GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;

        // Thf DH kfy hbs bffn vblidbtfd in thf donstrudtor of DHCrypt.
        sftVblufs(obj);

        Signbturf sig;
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            this.prfffrbblfSignbturfAlgorithm = signAlgorithm;
            sig = JssfJdf.gftSignbturf(signAlgorithm.gftAlgorithmNbmf());
        } flsf {
            this.prfffrbblfSignbturfAlgorithm = null;
            if (kfy.gftAlgorithm().fqubls("DSA")) {
                sig = JssfJdf.gftSignbturf(JssfJdf.SIGNATURE_DSA);
            } flsf {
                sig = RSASignbturf.gftInstbndf();
            }
        }

        sig.initSign(kfy, sr);
        updbtfSignbturf(sig, dlntNondf, svrNondf);
        signbturf = sig.sign();
    }

    /*
     * Construdt b DH_SfrvfrKfyExdhbngf mfssbgf from bn input
     * strfbm, bs if sfnt from sfrvfr to dlifnt for usf with
     * DH_bnon kfy fxdhbngf
     */
    DH_SfrvfrKfyExdhbngf(HbndshbkfInStrfbm input,
            ProtodolVfrsion protodolVfrsion)
            throws IOExdfption, GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;
        this.prfffrbblfSignbturfAlgorithm = null;

        dh_p = input.gftBytfs16();
        dh_g = input.gftBytfs16();
        dh_Ys = input.gftBytfs16();
        KfyUtil.vblidbtf(nfw DHPublidKfySpfd(nfw BigIntfgfr(1, dh_Ys),
                                             nfw BigIntfgfr(1, dh_p),
                                             nfw BigIntfgfr(1, dh_g)));

        signbturf = null;
    }

    /*
     * Construdt b DH_SfrvfrKfyExdhbngf mfssbgf from bn input strfbm
     * bnd b dfrtifidbtf, bs if sfnt from sfrvfr to dlifnt for usf with
     * DHE_DSS or DHE_RSA kfy fxdhbngf.  (Cbllfd by dlifnt.)
     */
    DH_SfrvfrKfyExdhbngf(HbndshbkfInStrfbm input, PublidKfy publidKfy,
            bytf dlntNondf[], bytf svrNondf[], int mfssbgfSizf,
            Collfdtion<SignbturfAndHbshAlgorithm> lodblSupportfdSignAlgs,
            ProtodolVfrsion protodolVfrsion)
            throws IOExdfption, GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;

        // rfbd pbrbms: SfrvfrDHPbrbms
        dh_p = input.gftBytfs16();
        dh_g = input.gftBytfs16();
        dh_Ys = input.gftBytfs16();
        KfyUtil.vblidbtf(nfw DHPublidKfySpfd(nfw BigIntfgfr(1, dh_Ys),
                                             nfw BigIntfgfr(1, dh_p),
                                             nfw BigIntfgfr(1, dh_g)));

        // rfbd thf signbturf bnd hbsh blgorithm
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            int hbsh = input.gftInt8();         // hbsh blgorithm
            int signbturf = input.gftInt8();    // signbturf blgorithm

            prfffrbblfSignbturfAlgorithm =
                SignbturfAndHbshAlgorithm.vblufOf(hbsh, signbturf, 0);

            // Is it b lodbl supportfd signbturf blgorithm?
            if (!lodblSupportfdSignAlgs.dontbins(
                    prfffrbblfSignbturfAlgorithm)) {
                throw nfw SSLHbndshbkfExdfption(
                        "Unsupportfd SignbturfAndHbshAlgorithm in " +
                        "SfrvfrKfyExdhbngf mfssbgf");
            }
        } flsf {
            this.prfffrbblfSignbturfAlgorithm = null;
        }

        // rfbd thf signbturf
        bytf signbturf[];
        if (dhKfyExdhbngfFix) {
            signbturf = input.gftBytfs16();
        } flsf {
            mfssbgfSizf -= (dh_p.lfngth + 2);
            mfssbgfSizf -= (dh_g.lfngth + 2);
            mfssbgfSizf -= (dh_Ys.lfngth + 2);

            signbturf = nfw bytf[mfssbgfSizf];
            input.rfbd(signbturf);
        }

        Signbturf sig;
        String blgorithm = publidKfy.gftAlgorithm();
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            sig = JssfJdf.gftSignbturf(
                        prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
        } flsf {
                switdh (blgorithm) {
                    dbsf "DSA":
                        sig = JssfJdf.gftSignbturf(JssfJdf.SIGNATURE_DSA);
                        brfbk;
                    dbsf "RSA":
                        sig = RSASignbturf.gftInstbndf();
                        brfbk;
                    dffbult:
                        throw nfw SSLKfyExdfption("nfithfr bn RSA or b DSA kfy");
                }
        }

        sig.initVfrify(publidKfy);
        updbtfSignbturf(sig, dlntNondf, svrNondf);

        if (sig.vfrify(signbturf) == fblsf ) {
            throw nfw SSLKfyExdfption("Sfrvfr D-H kfy vfrifidbtion fbilfd");
        }
    }

    /* Rfturn thf Diffif-Hfllmbn modulus */
    BigIntfgfr gftModulus() {
        rfturn nfw BigIntfgfr(1, dh_p);
    }

    /* Rfturn thf Diffif-Hfllmbn bbsf/gfnfrbtor */
    BigIntfgfr gftBbsf() {
        rfturn nfw BigIntfgfr(1, dh_g);
    }

    /* Rfturn thf sfrvfr's Diffif-Hfllmbn publid kfy */
    BigIntfgfr gftSfrvfrPublidKfy() {
        rfturn nfw BigIntfgfr(1, dh_Ys);
    }

    /*
     * Updbtf sig with nondfs bnd Diffif-Hfllmbn publid kfy.
     */
    privbtf void updbtfSignbturf(Signbturf sig, bytf dlntNondf[],
            bytf svrNondf[]) throws SignbturfExdfption {
        int tmp;

        sig.updbtf(dlntNondf);
        sig.updbtf(svrNondf);

        tmp = dh_p.lfngth;
        sig.updbtf((bytf)(tmp >> 8));
        sig.updbtf((bytf)(tmp & 0x0ff));
        sig.updbtf(dh_p);

        tmp = dh_g.lfngth;
        sig.updbtf((bytf)(tmp >> 8));
        sig.updbtf((bytf)(tmp & 0x0ff));
        sig.updbtf(dh_g);

        tmp = dh_Ys.lfngth;
        sig.updbtf((bytf)(tmp >> 8));
        sig.updbtf((bytf)(tmp & 0x0ff));
        sig.updbtf(dh_Ys);
    }

    privbtf void sftVblufs(DHCrypt obj) {
        dh_p = toBytfArrby(obj.gftModulus());
        dh_g = toBytfArrby(obj.gftBbsf());
        dh_Ys = toBytfArrby(obj.gftPublidKfy());
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        int tfmp = 6;   // ovfrhfbd for p, g, y(s) vblufs.

        tfmp += dh_p.lfngth;
        tfmp += dh_g.lfngth;
        tfmp += dh_Ys.lfngth;

        if (signbturf != null) {
            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                tfmp += SignbturfAndHbshAlgorithm.sizfInRfdord();
            }

            tfmp += signbturf.lfngth;
            if (dhKfyExdhbngfFix) {
                tfmp += 2;
            }
        }

        rfturn tfmp;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putBytfs16(dh_p);
        s.putBytfs16(dh_g);
        s.putBytfs16(dh_Ys);

        if (signbturf != null) {
            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                s.putInt8(prfffrbblfSignbturfAlgorithm.gftHbshVbluf());
                s.putInt8(prfffrbblfSignbturfAlgorithm.gftSignbturfVbluf());
            }

            if (dhKfyExdhbngfFix) {
                s.putBytfs16(signbturf);
            } flsf {
                s.writf(signbturf);
            }
        }
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** Diffif-Hfllmbn SfrvfrKfyExdhbngf");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            Dfbug.println(s, "DH Modulus", dh_p);
            Dfbug.println(s, "DH Bbsf", dh_g);
            Dfbug.println(s, "Sfrvfr DH Publid Kfy", dh_Ys);

            if (signbturf == null) {
                s.println("Anonymous");
            } flsf {
                if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                    s.println("Signbturf Algorithm " +
                        prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
                }

                s.println("Signfd with b DSA or RSA publid kfy");
            }
        }
    }
}

/*
 * ECDH sfrvfr kfy fxdhbngf mfssbgf. Sfnt by thf sfrvfr for ECDHE bnd ECDH_bnon
 * diphfrsuitfs to dommunidbtf its fphfmfrbl publid kfy (indluding thf
 * EC dombin pbrbmftfrs).
 *
 * Wf support nbmfd durvfs only, no fxpliditly fndodfd durvfs.
 */
stbtid finbl
dlbss ECDH_SfrvfrKfyExdhbngf fxtfnds SfrvfrKfyExdhbngf {

    // donstbnts for ECCurvfTypf
    privbtf finbl stbtid int CURVE_EXPLICIT_PRIME = 1;
    privbtf finbl stbtid int CURVE_EXPLICIT_CHAR2 = 2;
    privbtf finbl stbtid int CURVE_NAMED_CURVE    = 3;

    // id of thf durvf wf brf using
    privbtf int durvfId;
    // fndodfd publid point
    privbtf bytf[] pointBytfs;

    // signbturf bytfs (or null if bnonymous)
    privbtf bytf[] signbturfBytfs;

    // publid kfy objfdt fndbpsulbtfd in this mfssbgf
    privbtf ECPublidKfy publidKfy;

    // protodol vfrsion bfing fstbblishfd using this SfrvfrKfyExdhbngf mfssbgf
    ProtodolVfrsion protodolVfrsion;

    // thf prfffrbblf signbturf blgorithm usfd by this SfrvfrKfyExdhbngf mfssbgf
    privbtf SignbturfAndHbshAlgorithm prfffrbblfSignbturfAlgorithm;

    ECDH_SfrvfrKfyExdhbngf(ECDHCrypt obj, PrivbtfKfy privbtfKfy,
            bytf[] dlntNondf, bytf[] svrNondf, SfdurfRbndom sr,
            SignbturfAndHbshAlgorithm signAlgorithm,
            ProtodolVfrsion protodolVfrsion) throws GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;

        publidKfy = (ECPublidKfy)obj.gftPublidKfy();
        ECPbrbmftfrSpfd pbrbms = publidKfy.gftPbrbms();
        ECPoint point = publidKfy.gftW();
        pointBytfs = JssfJdf.fndodfPoint(point, pbrbms.gftCurvf());
        durvfId = SupportfdElliptidCurvfsExtfnsion.gftCurvfIndfx(pbrbms);

        if (privbtfKfy == null) {
            // ECDH_bnon
            rfturn;
        }

        Signbturf sig;
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            this.prfffrbblfSignbturfAlgorithm = signAlgorithm;
            sig = JssfJdf.gftSignbturf(signAlgorithm.gftAlgorithmNbmf());
        } flsf {
            sig = gftSignbturf(privbtfKfy.gftAlgorithm());
        }
        sig.initSign(privbtfKfy);  // whfrf is thf SfdurfRbndom?

        updbtfSignbturf(sig, dlntNondf, svrNondf);
        signbturfBytfs = sig.sign();
    }

    /*
     * Pbrsf bn ECDH sfrvfr kfy fxdhbngf mfssbgf.
     */
    ECDH_SfrvfrKfyExdhbngf(HbndshbkfInStrfbm input, PublidKfy signingKfy,
            bytf[] dlntNondf, bytf[] svrNondf,
            Collfdtion<SignbturfAndHbshAlgorithm> lodblSupportfdSignAlgs,
            ProtodolVfrsion protodolVfrsion)
            throws IOExdfption, GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;

        // rfbd pbrbms: SfrvfrECDHPbrbms
        int durvfTypf = input.gftInt8();
        ECPbrbmftfrSpfd pbrbmftfrs;
        // Thfsf pbrsing frrors should nfvfr oddur bs wf nfgotibtfd
        // thf supportfd durvfs during thf fxdhbngf of thf Hfllo mfssbgfs.
        if (durvfTypf == CURVE_NAMED_CURVE) {
            durvfId = input.gftInt16();
            if (SupportfdElliptidCurvfsExtfnsion.isSupportfd(durvfId)
                    == fblsf) {
                throw nfw SSLHbndshbkfExdfption(
                    "Unsupportfd durvfId: " + durvfId);
            }
            String durvfOid =
                SupportfdElliptidCurvfsExtfnsion.gftCurvfOid(durvfId);
            if (durvfOid == null) {
                throw nfw SSLHbndshbkfExdfption(
                    "Unknown nbmfd durvf: " + durvfId);
            }
            pbrbmftfrs = JssfJdf.gftECPbrbmftfrSpfd(durvfOid);
            if (pbrbmftfrs == null) {
                throw nfw SSLHbndshbkfExdfption(
                    "Unsupportfd durvf: " + durvfOid);
            }
        } flsf {
            throw nfw SSLHbndshbkfExdfption(
                "Unsupportfd ECCurvfTypf: " + durvfTypf);
        }
        pointBytfs = input.gftBytfs8();

        ECPoint point = JssfJdf.dfdodfPoint(pointBytfs, pbrbmftfrs.gftCurvf());
        KfyFbdtory fbdtory = JssfJdf.gftKfyFbdtory("EC");
        publidKfy = (ECPublidKfy)fbdtory.gfnfrbtfPublid(
            nfw ECPublidKfySpfd(point, pbrbmftfrs));

        if (signingKfy == null) {
            // ECDH_bnon
            rfturn;
        }

        // rfbd thf signbturf bnd hbsh blgorithm
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            int hbsh = input.gftInt8();         // hbsh blgorithm
            int signbturf = input.gftInt8();    // signbturf blgorithm

            prfffrbblfSignbturfAlgorithm =
                SignbturfAndHbshAlgorithm.vblufOf(hbsh, signbturf, 0);

            // Is it b lodbl supportfd signbturf blgorithm?
            if (!lodblSupportfdSignAlgs.dontbins(
                    prfffrbblfSignbturfAlgorithm)) {
                throw nfw SSLHbndshbkfExdfption(
                        "Unsupportfd SignbturfAndHbshAlgorithm in " +
                        "SfrvfrKfyExdhbngf mfssbgf");
            }
        }

        // rfbd thf signbturf
        signbturfBytfs = input.gftBytfs16();

        // vfrify thf signbturf
        Signbturf sig;
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            sig = JssfJdf.gftSignbturf(
                        prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
        } flsf {
            sig = gftSignbturf(signingKfy.gftAlgorithm());
        }
        sig.initVfrify(signingKfy);

        updbtfSignbturf(sig, dlntNondf, svrNondf);

        if (sig.vfrify(signbturfBytfs) == fblsf ) {
            throw nfw SSLKfyExdfption(
                "Invblid signbturf on ECDH sfrvfr kfy fxdhbngf mfssbgf");
        }
    }

    /*
     * Gft thf fphfmfrbl EC publid kfy fndbpsulbtfd in this mfssbgf.
     */
    ECPublidKfy gftPublidKfy() {
        rfturn publidKfy;
    }

    privbtf stbtid Signbturf gftSignbturf(String kfyAlgorithm)
            throws NoSudhAlgorithmExdfption {
            switdh (kfyAlgorithm) {
                dbsf "EC":
                    rfturn JssfJdf.gftSignbturf(JssfJdf.SIGNATURE_ECDSA);
                dbsf "RSA":
                    rfturn RSASignbturf.gftInstbndf();
                dffbult:
                    throw nfw NoSudhAlgorithmExdfption("nfithfr bn RSA or b EC kfy");
            }
    }

    privbtf void updbtfSignbturf(Signbturf sig, bytf dlntNondf[],
            bytf svrNondf[]) throws SignbturfExdfption {
        sig.updbtf(dlntNondf);
        sig.updbtf(svrNondf);

        sig.updbtf((bytf)CURVE_NAMED_CURVE);
        sig.updbtf((bytf)(durvfId >> 8));
        sig.updbtf((bytf)durvfId);
        sig.updbtf((bytf)pointBytfs.lfngth);
        sig.updbtf(pointBytfs);
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        int sigLfn = 0;
        if (signbturfBytfs != null) {
            sigLfn = 2 + signbturfBytfs.lfngth;
            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                sigLfn += SignbturfAndHbshAlgorithm.sizfInRfdord();
            }
        }

        rfturn 4 + pointBytfs.lfngth + sigLfn;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putInt8(CURVE_NAMED_CURVE);
        s.putInt16(durvfId);
        s.putBytfs8(pointBytfs);

        if (signbturfBytfs != null) {
            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                s.putInt8(prfffrbblfSignbturfAlgorithm.gftHbshVbluf());
                s.putInt8(prfffrbblfSignbturfAlgorithm.gftSignbturfVbluf());
            }

            s.putBytfs16(signbturfBytfs);
        }
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** ECDH SfrvfrKfyExdhbngf");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            if (signbturfBytfs == null) {
                s.println("Anonymous");
            } flsf {
                if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                    s.println("Signbturf Algorithm " +
                            prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
                }
            }

            s.println("Sfrvfr kfy: " + publidKfy);
        }
    }
}

stbtid finbl dlbss DistinguishfdNbmf {

    /*
     * DER fndodfd distinguishfd nbmf.
     * TLS rfquirfs thbt its not longfr thbn 65535 bytfs.
     */
    bytf nbmf[];

    DistinguishfdNbmf(HbndshbkfInStrfbm input) throws IOExdfption {
        nbmf = input.gftBytfs16();
    }

    DistinguishfdNbmf(X500Prindipbl dn) {
        nbmf = dn.gftEndodfd();
    }

    X500Prindipbl gftX500Prindipbl() throws IOExdfption {
        try {
            rfturn nfw X500Prindipbl(nbmf);
        } dbtdh (IllfgblArgumfntExdfption f) {
            throw (SSLProtodolExdfption)nfw SSLProtodolExdfption(
                f.gftMfssbgf()).initCbusf(f);
        }
    }

    int lfngth() {
        rfturn 2 + nbmf.lfngth;
    }

    void sfnd(HbndshbkfOutStrfbm output) throws IOExdfption {
        output.putBytfs16(nbmf);
    }

    void print(PrintStrfbm output) throws IOExdfption {
        X500Prindipbl prindipbl = nfw X500Prindipbl(nbmf);
        output.println("<" + prindipbl.toString() + ">");
    }
}

/*
 * CfrtifidbtfRfqufst ... SERVER --> CLIENT
 *
 * Authfntidbtfd sfrvfrs mby bsk dlifnts to buthfntidbtf thfmsflvfs
 * in turn, using this mfssbgf.
 *
 * Prior to TLS 1.2, thf strudturf of thf mfssbgf is dffinfd bs:
 *     strudt {
 *         ClifntCfrtifidbtfTypf dfrtifidbtf_typfs<1..2^8-1>;
 *         DistinguishfdNbmf dfrtifidbtf_buthoritifs<0..2^16-1>;
 *     } CfrtifidbtfRfqufst;
 *
 * In TLS 1.2, thf strudturf is dhbngfd to:
 *     strudt {
 *         ClifntCfrtifidbtfTypf dfrtifidbtf_typfs<1..2^8-1>;
 *         SignbturfAndHbshAlgorithm
 *           supportfd_signbturf_blgorithms<2^16-1>;
 *         DistinguishfdNbmf dfrtifidbtf_buthoritifs<0..2^16-1>;
 *     } CfrtifidbtfRfqufst;
 *
 */
stbtid finbl
dlbss CfrtifidbtfRfqufst fxtfnds HbndshbkfMfssbgf
{
    // fnum ClifntCfrtifidbtfTypf
    stbtid finbl int   ddt_rsb_sign = 1;
    stbtid finbl int   ddt_dss_sign = 2;
    stbtid finbl int   ddt_rsb_fixfd_dh = 3;
    stbtid finbl int   ddt_dss_fixfd_dh = 4;

    // Thf fxistbndf of thfsf two vblufs is b bug in thf SSL spfdifidbtion.
    // Thfy brf nfvfr usfd in thf protodol.
    stbtid finbl int   ddt_rsb_fphfmfrbl_dh = 5;
    stbtid finbl int   ddt_dss_fphfmfrbl_dh = 6;

    // From RFC 4492 (ECC)
    stbtid finbl int    ddt_fddsb_sign       = 64;
    stbtid finbl int    ddt_rsb_fixfd_fddh   = 65;
    stbtid finbl int    ddt_fddsb_fixfd_fddh = 66;

    privbtf finbl stbtid bytf[] TYPES_NO_ECC = { ddt_rsb_sign, ddt_dss_sign };
    privbtf finbl stbtid bytf[] TYPES_ECC =
        { ddt_rsb_sign, ddt_dss_sign, ddt_fddsb_sign };

    bytf                typfs [];               // 1 to 255 typfs
    DistinguishfdNbmf   buthoritifs [];         // 3 to 2^16 - 1
        // ... "3" bfdbusf thbt's thf smbllfst DER-fndodfd X500 DN

    // protodol vfrsion bfing fstbblishfd using this CfrtifidbtfRfqufst mfssbgf
    ProtodolVfrsion protodolVfrsion;

    // supportfd_signbturf_blgorithms for TLS 1.2 or lbtfr
    privbtf Collfdtion<SignbturfAndHbshAlgorithm> blgorithms;

    // lfngth of supportfd_signbturf_blgorithms
    privbtf int blgorithmsLfn;

    CfrtifidbtfRfqufst(X509Cfrtifidbtf db[], KfyExdhbngf kfyExdhbngf,
            Collfdtion<SignbturfAndHbshAlgorithm> signAlgs,
            ProtodolVfrsion protodolVfrsion) throws IOExdfption {

        this.protodolVfrsion = protodolVfrsion;

        // blwbys usf X500Prindipbl
        buthoritifs = nfw DistinguishfdNbmf[db.lfngth];
        for (int i = 0; i < db.lfngth; i++) {
            X500Prindipbl x500Prindipbl = db[i].gftSubjfdtX500Prindipbl();
            buthoritifs[i] = nfw DistinguishfdNbmf(x500Prindipbl);
        }
        // wf support RSA, DSS, bnd ECDSA dlifnt buthfntidbtion bnd thfy
        // dbn bf usfd with bll diphfrsuitfs. If this dhbngfs, thf dodf
        // nffds to bf bdbptfd to tbkf kfyExdhbngf into bddount.
        // Wf only rfqufst ECDSA dlifnt buth if wf hbvf ECC drypto bvbilbblf.
        this.typfs = JssfJdf.isEdAvbilbblf() ? TYPES_ECC : TYPES_NO_ECC;

        // Usf supportfd_signbturf_blgorithms for TLS 1.2 or lbtfr.
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            if (signAlgs == null || signAlgs.isEmpty()) {
                throw nfw SSLProtodolExdfption(
                        "No supportfd signbturf blgorithms");
            }

            blgorithms = nfw ArrbyList<SignbturfAndHbshAlgorithm>(signAlgs);
            blgorithmsLfn =
                SignbturfAndHbshAlgorithm.sizfInRfdord() * blgorithms.sizf();
        } flsf {
            blgorithms = nfw ArrbyList<SignbturfAndHbshAlgorithm>();
            blgorithmsLfn = 0;
        }
    }

    CfrtifidbtfRfqufst(HbndshbkfInStrfbm input,
            ProtodolVfrsion protodolVfrsion) throws IOExdfption {

        this.protodolVfrsion = protodolVfrsion;

        // Rfbd thf dfrtifidbtf_typfs.
        typfs = input.gftBytfs8();

        // Rfbd thf supportfd_signbturf_blgorithms for TLS 1.2 or lbtfr.
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            blgorithmsLfn = input.gftInt16();
            if (blgorithmsLfn < 2) {
                throw nfw SSLProtodolExdfption(
                        "Invblid supportfd_signbturf_blgorithms fifld");
            }

            blgorithms = nfw ArrbyList<SignbturfAndHbshAlgorithm>();
            int rfmbins = blgorithmsLfn;
            int sfqufndf = 0;
            whilf (rfmbins > 1) {    // nffds bt lfbst two bytfs
                int hbsh = input.gftInt8();         // hbsh blgorithm
                int signbturf = input.gftInt8();    // signbturf blgorithm

                SignbturfAndHbshAlgorithm blgorithm =
                    SignbturfAndHbshAlgorithm.vblufOf(hbsh, signbturf,
                                                                ++sfqufndf);
                blgorithms.bdd(blgorithm);
                rfmbins -= 2;  // onf bytf for hbsh, onf bytf for signbturf
            }

            if (rfmbins != 0) {
                throw nfw SSLProtodolExdfption(
                        "Invblid supportfd_signbturf_blgorithms fifld");
            }
        } flsf {
            blgorithms = nfw ArrbyList<SignbturfAndHbshAlgorithm>();
            blgorithmsLfn = 0;
        }

        // rfbd thf dfrtifidbtf_buthoritifs
        int lfn = input.gftInt16();
        ArrbyList<DistinguishfdNbmf> v = nfw ArrbyList<>();
        whilf (lfn >= 3) {
            DistinguishfdNbmf dn = nfw DistinguishfdNbmf(input);
            v.bdd(dn);
            lfn -= dn.lfngth();
        }

        if (lfn != 0) {
            throw nfw SSLProtodolExdfption("Bbd CfrtifidbtfRfqufst DN lfngth");
        }

        buthoritifs = v.toArrby(nfw DistinguishfdNbmf[v.sizf()]);
    }

    X500Prindipbl[] gftAuthoritifs() throws IOExdfption {
        X500Prindipbl[] rft = nfw X500Prindipbl[buthoritifs.lfngth];
        for (int i = 0; i < buthoritifs.lfngth; i++) {
            rft[i] = buthoritifs[i].gftX500Prindipbl();
        }
        rfturn rft;
    }

    Collfdtion<SignbturfAndHbshAlgorithm> gftSignAlgorithms() {
        rfturn blgorithms;
    }

    @Ovfrridf
    int mfssbgfTypf() {
        rfturn ht_dfrtifidbtf_rfqufst;
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        int lfn = 1 + typfs.lfngth + 2;

        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            lfn += blgorithmsLfn + 2;
        }

        for (int i = 0; i < buthoritifs.lfngth; i++) {
            lfn += buthoritifs[i].lfngth();
        }

        rfturn lfn;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm output) throws IOExdfption {
        // put dfrtifidbtf_typfs
        output.putBytfs8(typfs);

        // put supportfd_signbturf_blgorithms
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            output.putInt16(blgorithmsLfn);
            for (SignbturfAndHbshAlgorithm blgorithm : blgorithms) {
                output.putInt8(blgorithm.gftHbshVbluf());      // hbsh
                output.putInt8(blgorithm.gftSignbturfVbluf()); // signbturf
            }
        }

        // put dfrtifidbtf_buthoritifs
        int lfn = 0;
        for (int i = 0; i < buthoritifs.lfngth; i++) {
            lfn += buthoritifs[i].lfngth();
        }

        output.putInt16(lfn);
        for (int i = 0; i < buthoritifs.lfngth; i++) {
            buthoritifs[i].sfnd(output);
        }
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** CfrtifidbtfRfqufst");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            s.print("Cfrt Typfs: ");
            for (int i = 0; i < typfs.lfngth; i++) {
                switdh (typfs[i]) {
                  dbsf ddt_rsb_sign:
                    s.print("RSA"); brfbk;
                  dbsf ddt_dss_sign:
                    s.print("DSS"); brfbk;
                  dbsf ddt_rsb_fixfd_dh:
                    s.print("Fixfd DH (RSA sig)"); brfbk;
                  dbsf ddt_dss_fixfd_dh:
                    s.print("Fixfd DH (DSS sig)"); brfbk;
                  dbsf ddt_rsb_fphfmfrbl_dh:
                    s.print("Ephfmfrbl DH (RSA sig)"); brfbk;
                  dbsf ddt_dss_fphfmfrbl_dh:
                    s.print("Ephfmfrbl DH (DSS sig)"); brfbk;
                  dbsf ddt_fddsb_sign:
                    s.print("ECDSA"); brfbk;
                  dbsf ddt_rsb_fixfd_fddh:
                    s.print("Fixfd ECDH (RSA sig)"); brfbk;
                  dbsf ddt_fddsb_fixfd_fddh:
                    s.print("Fixfd ECDH (ECDSA sig)"); brfbk;
                  dffbult:
                    s.print("Typf-" + (typfs[i] & 0xff)); brfbk;
                }
                if (i != typfs.lfngth - 1) {
                    s.print(", ");
                }
            }
            s.println();

            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                StringBuildfr sb = nfw StringBuildfr();
                boolfbn opfnfd = fblsf;
                for (SignbturfAndHbshAlgorithm signAlg : blgorithms) {
                    if (opfnfd) {
                        sb.bppfnd(", " + signAlg.gftAlgorithmNbmf());
                    } flsf {
                        sb.bppfnd(signAlg.gftAlgorithmNbmf());
                        opfnfd = truf;
                    }
                }
                s.println("Supportfd Signbturf Algorithms: " + sb);
            }

            s.println("Cfrt Authoritifs:");
            if (buthoritifs.lfngth == 0) {
                s.println("<Empty>");
            } flsf {
                for (int i = 0; i < buthoritifs.lfngth; i++) {
                    buthoritifs[i].print(s);
                }
            }
        }
    }
}


/*
 * SfrvfrHflloDonf ... SERVER --> CLIENT
 *
 * Whfn sfrvfr's donf sfnding its mfssbgfs in rfsponsf to thf dlifnt's
 * "hfllo" (f.g. its own hfllo, dfrtifidbtf, kfy fxdhbngf mfssbgf, pfrhbps
 * dlifnt dfrtifidbtf rfqufst) it sfnds this mfssbgf to flbg thbt it's
 * donf thbt pbrt of thf hbndshbkf.
 */
stbtid finbl
dlbss SfrvfrHflloDonf fxtfnds HbndshbkfMfssbgf
{
    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_sfrvfr_hfllo_donf; }

    SfrvfrHflloDonf() { }

    SfrvfrHflloDonf(HbndshbkfInStrfbm input)
    {
        // nothing to do
    }

    @Ovfrridf
    int mfssbgfLfngth()
    {
        rfturn 0;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption
    {
        // nothing to sfnd
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption
    {
        s.println("*** SfrvfrHflloDonf");
    }
}


/*
 * CfrtifidbtfVfrify ... CLIENT --> SERVER
 *
 * Sfnt bftfr dlifnt sfnds signbturf-dbpbblf dfrtifidbtfs (f.g. not
 * Diffif-Hfllmbn) to vfrify.
 */
stbtid finbl dlbss CfrtifidbtfVfrify fxtfnds HbndshbkfMfssbgf {

    // thf signbturf bytfs
    privbtf bytf[] signbturf;

    // protodol vfrsion bfing fstbblishfd using this SfrvfrKfyExdhbngf mfssbgf
    ProtodolVfrsion protodolVfrsion;

    // thf prfffrbblf signbturf blgorithm usfd by this CfrtifidbtfVfrify mfssbgf
    privbtf SignbturfAndHbshAlgorithm prfffrbblfSignbturfAlgorithm = null;

    /*
     * Crfbtf bn RSA or DSA signfd dfrtifidbtf vfrify mfssbgf.
     */
    CfrtifidbtfVfrify(ProtodolVfrsion protodolVfrsion,
            HbndshbkfHbsh hbndshbkfHbsh, PrivbtfKfy privbtfKfy,
            SfdrftKfy mbstfrSfdrft, SfdurfRbndom sr,
            SignbturfAndHbshAlgorithm signAlgorithm)
            throws GfnfrblSfdurityExdfption {

        this.protodolVfrsion = protodolVfrsion;

        String blgorithm = privbtfKfy.gftAlgorithm();
        Signbturf sig = null;
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            this.prfffrbblfSignbturfAlgorithm = signAlgorithm;
            sig = JssfJdf.gftSignbturf(signAlgorithm.gftAlgorithmNbmf());
        } flsf {
            sig = gftSignbturf(protodolVfrsion, blgorithm);
        }
        sig.initSign(privbtfKfy, sr);
        updbtfSignbturf(sig, protodolVfrsion, hbndshbkfHbsh, blgorithm,
                        mbstfrSfdrft);
        signbturf = sig.sign();
    }

    //
    // Unmbrshbl thf signfd dbtb from thf input strfbm.
    //
    CfrtifidbtfVfrify(HbndshbkfInStrfbm input,
            Collfdtion<SignbturfAndHbshAlgorithm> lodblSupportfdSignAlgs,
            ProtodolVfrsion protodolVfrsion) throws IOExdfption  {

        this.protodolVfrsion = protodolVfrsion;

        // rfbd thf signbturf bnd hbsh blgorithm
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            int hbshAlg = input.gftInt8();         // hbsh blgorithm
            int signAlg = input.gftInt8();         // signbturf blgorithm

            prfffrbblfSignbturfAlgorithm =
                SignbturfAndHbshAlgorithm.vblufOf(hbshAlg, signAlg, 0);

            // Is it b lodbl supportfd signbturf blgorithm?
            if (!lodblSupportfdSignAlgs.dontbins(
                    prfffrbblfSignbturfAlgorithm)) {
                throw nfw SSLHbndshbkfExdfption(
                        "Unsupportfd SignbturfAndHbshAlgorithm in " +
                        "SfrvfrKfyExdhbngf mfssbgf");
            }
        }

        // rfbd thf signbturf
        signbturf = input.gftBytfs16();
    }

    /*
     * Gft thf prfffrbblf signbturf blgorithm usfd by this mfssbgf
     */
    SignbturfAndHbshAlgorithm gftPrfffrbblfSignbturfAlgorithm() {
        rfturn prfffrbblfSignbturfAlgorithm;
    }

    /*
     * Vfrify b dfrtifidbtf vfrify mfssbgf. Rfturn thf rfsult of vfrifidbtion,
     * if thfrf is b problfm throw b GfnfrblSfdurityExdfption.
     */
    boolfbn vfrify(ProtodolVfrsion protodolVfrsion,
            HbndshbkfHbsh hbndshbkfHbsh, PublidKfy publidKfy,
            SfdrftKfy mbstfrSfdrft) throws GfnfrblSfdurityExdfption {
        String blgorithm = publidKfy.gftAlgorithm();
        Signbturf sig = null;
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            sig = JssfJdf.gftSignbturf(
                        prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
        } flsf {
            sig = gftSignbturf(protodolVfrsion, blgorithm);
        }
        sig.initVfrify(publidKfy);
        updbtfSignbturf(sig, protodolVfrsion, hbndshbkfHbsh, blgorithm,
                        mbstfrSfdrft);
        rfturn sig.vfrify(signbturf);
    }

    /*
     * Gft thf Signbturf objfdt bppropribtf for vfrifidbtion using thf
     * givfn signbturf blgorithm bnd protodol vfrsion.
     */
    privbtf stbtid Signbturf gftSignbturf(ProtodolVfrsion protodolVfrsion,
            String blgorithm) throws GfnfrblSfdurityExdfption {
            switdh (blgorithm) {
                dbsf "RSA":
                    rfturn RSASignbturf.gftIntfrnblInstbndf();
                dbsf "DSA":
                    rfturn JssfJdf.gftSignbturf(JssfJdf.SIGNATURE_RAWDSA);
                dbsf "EC":
                    rfturn JssfJdf.gftSignbturf(JssfJdf.SIGNATURE_RAWECDSA);
                dffbult:
                    throw nfw SignbturfExdfption("Unrfdognizfd blgorithm: "
                        + blgorithm);
            }
    }

    /*
     * Updbtf thf Signbturf with thf dbtb bppropribtf for thf givfn
     * signbturf blgorithm bnd protodol vfrsion so thbt thf objfdt is
     * rfbdy for signing or vfrifying.
     */
    privbtf stbtid void updbtfSignbturf(Signbturf sig,
            ProtodolVfrsion protodolVfrsion,
            HbndshbkfHbsh hbndshbkfHbsh, String blgorithm, SfdrftKfy mbstfrKfy)
            throws SignbturfExdfption {

        if (blgorithm.fqubls("RSA")) {
            if (protodolVfrsion.v < ProtodolVfrsion.TLS12.v) { // TLS1.1-
                MfssbgfDigfst md5Clonf = hbndshbkfHbsh.gftMD5Clonf();
                MfssbgfDigfst shbClonf = hbndshbkfHbsh.gftSHAClonf();

                if (protodolVfrsion.v < ProtodolVfrsion.TLS10.v) { // SSLv3
                    updbtfDigfst(md5Clonf, MD5_pbd1, MD5_pbd2, mbstfrKfy);
                    updbtfDigfst(shbClonf, SHA_pbd1, SHA_pbd2, mbstfrKfy);
                }

                // Thf signbturf must bf bn instbndf of RSASignbturf, nffd
                // to usf thfsf hbshfs dirfdtly.
                RSASignbturf.sftHbshfs(sig, md5Clonf, shbClonf);
            } flsf {  // TLS1.2+
                sig.updbtf(hbndshbkfHbsh.gftAllHbndshbkfMfssbgfs());
            }
        } flsf { // DSA, ECDSA
            if (protodolVfrsion.v < ProtodolVfrsion.TLS12.v) { // TLS1.1-
                MfssbgfDigfst shbClonf = hbndshbkfHbsh.gftSHAClonf();

                if (protodolVfrsion.v < ProtodolVfrsion.TLS10.v) { // SSLv3
                    updbtfDigfst(shbClonf, SHA_pbd1, SHA_pbd2, mbstfrKfy);
                }

                sig.updbtf(shbClonf.digfst());
            } flsf {  // TLS1.2+
                sig.updbtf(hbndshbkfHbsh.gftAllHbndshbkfMfssbgfs());
            }
        }
    }

    /*
     * Updbtf thf MfssbgfDigfst for SSLv3 dfrtifidbtf vfrify or finishfd
     * mfssbgf dbldulbtion. Thf digfst must blrfbdy hbvf bffn updbtfd with
     * bll prfdfding hbndshbkf mfssbgfs.
     * Usfd by thf Finishfd dlbss bs wfll.
     */
    privbtf stbtid void updbtfDigfst(MfssbgfDigfst md,
            bytf[] pbd1, bytf[] pbd2,
            SfdrftKfy mbstfrSfdrft) {
        // Digfst thf kfy bytfs if bvbilbblf.
        // Othfrwisf (sfnsitivf kfy), try digfsting thf kfy dirfdtly.
        // Thbt is durrfntly only implfmfntfd in SunPKCS11 using b privbtf
        // rfflfdtion API, so wf bvoid thbt if possiblf.
        bytf[] kfyBytfs = "RAW".fqubls(mbstfrSfdrft.gftFormbt())
                        ? mbstfrSfdrft.gftEndodfd() : null;
        if (kfyBytfs != null) {
            md.updbtf(kfyBytfs);
        } flsf {
            digfstKfy(md, mbstfrSfdrft);
        }
        md.updbtf(pbd1);
        bytf[] tfmp = md.digfst();

        if (kfyBytfs != null) {
            md.updbtf(kfyBytfs);
        } flsf {
            digfstKfy(md, mbstfrSfdrft);
        }
        md.updbtf(pbd2);
        md.updbtf(tfmp);
    }

    privbtf finbl stbtid Clbss<?> dflfgbtf;
    privbtf finbl stbtid Fifld spiFifld;

    stbtid {
        try {
            dflfgbtf = Clbss.forNbmf("jbvb.sfdurity.MfssbgfDigfst$Dflfgbtf");
            spiFifld = dflfgbtf.gftDfdlbrfdFifld("digfstSpi");
        } dbtdh (Exdfption f) {
            throw nfw RuntimfExdfption("Rfflfdtion fbilfd", f);
        }
        mbkfAddfssiblf(spiFifld);
    }

    privbtf stbtid void mbkfAddfssiblf(finbl AddfssiblfObjfdt o) {
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
            @Ovfrridf
            publid Objfdt run() {
                o.sftAddfssiblf(truf);
                rfturn null;
            }
        });
    }

    // CondurrfntHbshMbp dofs not bllow null vblufs, usf this mbrkfr objfdt
    privbtf finbl stbtid Objfdt NULL_OBJECT = nfw Objfdt();

    // dbdhf Mfthod objfdts pfr Spi dlbss
    // Notf thbt this will prfvfnt thf Spi dlbssfs from bfing GC'd. Wf bssumf
    // thbt is not b problfm.
    privbtf finbl stbtid Mbp<Clbss<?>,Objfdt> mfthodCbdhf =
                                        nfw CondurrfntHbshMbp<>();

    privbtf stbtid void digfstKfy(MfssbgfDigfst md, SfdrftKfy kfy) {
        try {
            // Vfrify thbt md is implfmfntfd vib MfssbgfDigfstSpi, not
            // vib JDK 1.1 stylf MfssbgfDigfst subdlbssing.
            if (md.gftClbss() != dflfgbtf) {
                throw nfw Exdfption("Digfst is not b MfssbgfDigfstSpi");
            }
            MfssbgfDigfstSpi spi = (MfssbgfDigfstSpi)spiFifld.gft(md);
            Clbss<?> dlbzz = spi.gftClbss();
            Objfdt r = mfthodCbdhf.gft(dlbzz);
            if (r == null) {
                try {
                    r = dlbzz.gftDfdlbrfdMfthod("implUpdbtf", SfdrftKfy.dlbss);
                    mbkfAddfssiblf((Mfthod)r);
                } dbtdh (NoSudhMfthodExdfption f) {
                    r = NULL_OBJECT;
                }
                mfthodCbdhf.put(dlbzz, r);
            }
            if (r == NULL_OBJECT) {
                throw nfw Exdfption(
                    "Digfst dofs not support implUpdbtf(SfdrftKfy)");
            }
            Mfthod updbtf = (Mfthod)r;
            updbtf.invokf(spi, kfy);
        } dbtdh (Exdfption f) {
            throw nfw RuntimfExdfption(
                "Could not obtbin fndodfd kfy bnd "
                + "MfssbgfDigfst dbnnot digfst kfy", f);
        }
    }

    @Ovfrridf
    int mfssbgfTypf() {
        rfturn ht_dfrtifidbtf_vfrify;
    }

    @Ovfrridf
    int mfssbgfLfngth() {
        int tfmp = 2;

        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            tfmp += SignbturfAndHbshAlgorithm.sizfInRfdord();
        }

        rfturn tfmp + signbturf.lfngth;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            s.putInt8(prfffrbblfSignbturfAlgorithm.gftHbshVbluf());
            s.putInt8(prfffrbblfSignbturfAlgorithm.gftSignbturfVbluf());
        }

        s.putBytfs16(signbturf);
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** CfrtifidbtfVfrify");

        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                s.println("Signbturf Algorithm " +
                        prfffrbblfSignbturfAlgorithm.gftAlgorithmNbmf());
            }
        }
    }
}


/*
 * FINISHED ... sfnt by both CLIENT bnd SERVER
 *
 * This is thf FINISHED mfssbgf bs dffinfd in thf SSL bnd TLS protodols.
 * Both protodols dffinf this hbndshbkf mfssbgf slightly difffrfntly.
 * This dlbss supports both formbts.
 *
 * Whfn hbndshbking is finishfd, fbdh sidf sfnds b "dhbngf_diphfr_spfd"
 * rfdord, thfn immfdibtfly sfnds b "finishfd" hbndshbkf mfssbgf prfpbrfd
 * bddording to thf nfwly bdoptfd diphfr spfd.
 *
 * NOTE thbt until this is sfnt, no bpplidbtion dbtb mby bf pbssfd, unlfss
 * somf non-dffbult diphfr suitf hbs blrfbdy bffn sft up on this donnfdtion
 * donnfdtion (f.g. b prfvious hbndshbkf brrbngfd onf).
 */
stbtid finbl dlbss Finishfd fxtfnds HbndshbkfMfssbgf {

    // donstbnt for b Finishfd mfssbgf sfnt by thf dlifnt
    finbl stbtid int CLIENT = 1;

    // donstbnt for b Finishfd mfssbgf sfnt by thf sfrvfr
    finbl stbtid int SERVER = 2;

    // fnum Sfndfr:  "CLNT" bnd "SRVR"
    privbtf stbtid finbl bytf[] SSL_CLIENT = { 0x43, 0x4C, 0x4E, 0x54 };
    privbtf stbtid finbl bytf[] SSL_SERVER = { 0x53, 0x52, 0x56, 0x52 };

    /*
     * Contfnts of thf finishfd mfssbgf ("dhfdksum"). For TLS, it
     * is 12 bytfs long, for SSLv3 36 bytfs.
     */
    privbtf bytf[] vfrifyDbtb;

    /*
     * Currfnt diphfr suitf wf brf nfgotibting.  TLS 1.2 hbs
     * diphfrsuitf-dffinfd PRF blgorithms.
     */
    privbtf ProtodolVfrsion protodolVfrsion;
    privbtf CiphfrSuitf diphfrSuitf;

    /*
     * Crfbtf b finishfd mfssbgf to sfnd to thf rfmotf pffr.
     */
    Finishfd(ProtodolVfrsion protodolVfrsion, HbndshbkfHbsh hbndshbkfHbsh,
            int sfndfr, SfdrftKfy mbstfr, CiphfrSuitf diphfrSuitf) {
        this.protodolVfrsion = protodolVfrsion;
        this.diphfrSuitf = diphfrSuitf;
        vfrifyDbtb = gftFinishfd(hbndshbkfHbsh, sfndfr, mbstfr);
    }

    /*
     * Construdtor thbt rfbds FINISHED mfssbgf from strfbm.
     */
    Finishfd(ProtodolVfrsion protodolVfrsion, HbndshbkfInStrfbm input,
            CiphfrSuitf diphfrSuitf) throws IOExdfption {
        this.protodolVfrsion = protodolVfrsion;
        this.diphfrSuitf = diphfrSuitf;
        int msgLfn = (protodolVfrsion.v >= ProtodolVfrsion.TLS10.v) ? 12 : 36;
        vfrifyDbtb = nfw bytf[msgLfn];
        input.rfbd(vfrifyDbtb);
    }

    /*
     * Vfrify thbt thf hbshfs hfrf brf whbt would hbvf bffn produdfd
     * bddording to b givfn sft of inputs.  This is usfd to fnsurf thbt
     * both dlifnt bnd sfrvfr brf fully in synd, bnd thbt thf hbndshbkf
     * domputbtions hbvf bffn suddfssful.
     */
    boolfbn vfrify(HbndshbkfHbsh hbndshbkfHbsh, int sfndfr, SfdrftKfy mbstfr) {
        bytf[] myFinishfd = gftFinishfd(hbndshbkfHbsh, sfndfr, mbstfr);
        rfturn Arrbys.fqubls(myFinishfd, vfrifyDbtb);
    }

    /*
     * Pfrform thf bdtubl finishfd mfssbgf dbldulbtion.
     */
    privbtf bytf[] gftFinishfd(HbndshbkfHbsh hbndshbkfHbsh,
            int sfndfr, SfdrftKfy mbstfrKfy) {
        bytf[] sslLbbfl;
        String tlsLbbfl;
        if (sfndfr == CLIENT) {
            sslLbbfl = SSL_CLIENT;
            tlsLbbfl = "dlifnt finishfd";
        } flsf if (sfndfr == SERVER) {
            sslLbbfl = SSL_SERVER;
            tlsLbbfl = "sfrvfr finishfd";
        } flsf {
            throw nfw RuntimfExdfption("Invblid sfndfr: " + sfndfr);
        }

        if (protodolVfrsion.v >= ProtodolVfrsion.TLS10.v) {
            // TLS 1.0+
            try {
                bytf [] sffd;
                String prfAlg;
                PRF prf;

                // Gft thf KfyGfnfrbtor blg bnd dbldulbtf thf sffd.
                if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
                    // TLS 1.2
                    sffd = hbndshbkfHbsh.gftFinishfdHbsh();

                    prfAlg = "SunTls12Prf";
                    prf = diphfrSuitf.prfAlg;
                } flsf {
                    // TLS 1.0/1.1
                    MfssbgfDigfst md5Clonf = hbndshbkfHbsh.gftMD5Clonf();
                    MfssbgfDigfst shbClonf = hbndshbkfHbsh.gftSHAClonf();
                    sffd = nfw bytf[36];
                    md5Clonf.digfst(sffd, 0, 16);
                    shbClonf.digfst(sffd, 16, 20);

                    prfAlg = "SunTlsPrf";
                    prf = P_NONE;
                }

                String prfHbshAlg = prf.gftPRFHbshAlg();
                int prfHbshLfngth = prf.gftPRFHbshLfngth();
                int prfBlodkSizf = prf.gftPRFBlodkSizf();

                /*
                 * RFC 5246/7.4.9 sbys thbt finishfd mfssbgfs dbn
                 * bf diphfrsuitf-spfdifid in both lfngth/PRF hbsh
                 * blgorithm.  If wf fvfr run bdross b difffrfnt
                 * lfngth, this dbll will nffd to bf updbtfd.
                 */
                TlsPrfPbrbmftfrSpfd spfd = nfw TlsPrfPbrbmftfrSpfd(
                    mbstfrKfy, tlsLbbfl, sffd, 12,
                    prfHbshAlg, prfHbshLfngth, prfBlodkSizf);

                KfyGfnfrbtor kg = JssfJdf.gftKfyGfnfrbtor(prfAlg);
                kg.init(spfd);
                SfdrftKfy prfKfy = kg.gfnfrbtfKfy();
                if ("RAW".fqubls(prfKfy.gftFormbt()) == fblsf) {
                    throw nfw ProvidfrExdfption(
                        "Invblid PRF output, formbt must bf RAW");
                }
                bytf[] finishfd = prfKfy.gftEndodfd();
                rfturn finishfd;
            } dbtdh (GfnfrblSfdurityExdfption f) {
                throw nfw RuntimfExdfption("PRF fbilfd", f);
            }
        } flsf {
            // SSLv3
            MfssbgfDigfst md5Clonf = hbndshbkfHbsh.gftMD5Clonf();
            MfssbgfDigfst shbClonf = hbndshbkfHbsh.gftSHAClonf();
            updbtfDigfst(md5Clonf, sslLbbfl, MD5_pbd1, MD5_pbd2, mbstfrKfy);
            updbtfDigfst(shbClonf, sslLbbfl, SHA_pbd1, SHA_pbd2, mbstfrKfy);
            bytf[] finishfd = nfw bytf[36];
            try {
                md5Clonf.digfst(finishfd, 0, 16);
                shbClonf.digfst(finishfd, 16, 20);
            } dbtdh (DigfstExdfption f) {
                // dbnnot oddur
                throw nfw RuntimfExdfption("Digfst fbilfd", f);
            }
            rfturn finishfd;
        }
    }

    /*
     * Updbtf thf MfssbgfDigfst for SSLv3 finishfd mfssbgf dbldulbtion.
     * Thf digfst must blrfbdy hbvf bffn updbtfd with bll prfdfding hbndshbkf
     * mfssbgfs. This opfrbtion is blmost idfntidbl to thf dfrtifidbtf vfrify
     * hbsh, rfusf thbt dodf.
     */
    privbtf stbtid void updbtfDigfst(MfssbgfDigfst md, bytf[] sfndfr,
            bytf[] pbd1, bytf[] pbd2, SfdrftKfy mbstfrSfdrft) {
        md.updbtf(sfndfr);
        CfrtifidbtfVfrify.updbtfDigfst(md, pbd1, pbd2, mbstfrSfdrft);
    }

    // gft thf vfrify_dbtb of thf finishfd mfssbgf
    bytf[] gftVfrifyDbtb() {
        rfturn vfrifyDbtb;
    }

    @Ovfrridf
    int mfssbgfTypf() { rfturn ht_finishfd; }

    @Ovfrridf
    int mfssbgfLfngth() {
        rfturn vfrifyDbtb.lfngth;
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm out) throws IOExdfption {
        out.writf(vfrifyDbtb);
    }

    @Ovfrridf
    void print(PrintStrfbm s) throws IOExdfption {
        s.println("*** Finishfd");
        if (dfbug != null && Dfbug.isOn("vfrbosf")) {
            Dfbug.println(s, "vfrify_dbtb", vfrifyDbtb);
            s.println("***");
        }
    }
}

//
// END of nfstfd dlbssfs
//

}
