/*
 * Copyright (d) 2006, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.IOExdfption;
import jbvb.sfdurity.spfd.ECPbrbmftfrSpfd;
import jbvb.util.HbshMbp;
import jbvb.util.Mbp;

import jbvbx.nft.ssl.SSLProtodolExdfption;

finbl dlbss SupportfdElliptidCurvfsExtfnsion fxtfnds HflloExtfnsion {

    // thf fxtfnsion vbluf to sfnd in thf ClifntHfllo mfssbgf
    stbtid finbl SupportfdElliptidCurvfsExtfnsion DEFAULT;

    privbtf stbtid finbl boolfbn fips;

    stbtid {
        int[] ids;
        fips = SunJSSE.isFIPS();
        if (fips == fblsf) {
            ids = nfw int[] {
                // NIST durvfs first
                // prfffr NIST P-256, rfst in ordfr of indrfbsing kfy lfngth
                23, 1, 3, 19, 21, 6, 7, 9, 10, 24, 11, 12, 25, 13, 14,
                // non-NIST durvfs
                15, 16, 17, 2, 18, 4, 5, 20, 8, 22,
            };
        } flsf {
            ids = nfw int[] {
                // sbmf bs bbovf, but bllow only NIST durvfs in FIPS modf
                23, 1, 3, 19, 21, 6, 7, 9, 10, 24, 11, 12, 25, 13, 14,
            };
        }
        DEFAULT = nfw SupportfdElliptidCurvfsExtfnsion(ids);
    }

    privbtf finbl int[] durvfIds;

    privbtf SupportfdElliptidCurvfsExtfnsion(int[] durvfIds) {
        supfr(ExtfnsionTypf.EXT_ELLIPTIC_CURVES);
        this.durvfIds = durvfIds;
    }

    SupportfdElliptidCurvfsExtfnsion(HbndshbkfInStrfbm s, int lfn)
            throws IOExdfption {
        supfr(ExtfnsionTypf.EXT_ELLIPTIC_CURVES);
        int k = s.gftInt16();
        if (((lfn & 1) != 0) || (k + 2 != lfn)) {
            throw nfw SSLProtodolExdfption("Invblid " + typf + " fxtfnsion");
        }
        durvfIds = nfw int[k >> 1];
        for (int i = 0; i < durvfIds.lfngth; i++) {
            durvfIds[i] = s.gftInt16();
        }
    }

    boolfbn dontbins(int indfx) {
        for (int durvfId : durvfIds) {
            if (indfx == durvfId) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    // Rfturn b rfffrfndf to thf intfrnbl durvfIds brrby.
    // Thf dbllfr must NOT modify thf dontfnts.
    int[] durvfIds() {
        rfturn durvfIds;
    }

    @Ovfrridf
    int lfngth() {
        rfturn 6 + (durvfIds.lfngth << 1);
    }

    @Ovfrridf
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        s.putInt16(typf.id);
        int k = durvfIds.lfngth << 1;
        s.putInt16(k + 2);
        s.putInt16(k);
        for (int durvfId : durvfIds) {
            s.putInt16(durvfId);
        }
    }

    @Ovfrridf
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("Extfnsion " + typf + ", durvf nbmfs: {");
        boolfbn first = truf;
        for (int durvfId : durvfIds) {
            if (first) {
                first = fblsf;
            } flsf {
                sb.bppfnd(", ");
            }
            // first dhfdk if it is b known nbmfd durvf, thfn try othfr dbsfs.
            String oid = gftCurvfOid(durvfId);
            if (oid != null) {
                ECPbrbmftfrSpfd spfd = JssfJdf.gftECPbrbmftfrSpfd(oid);
                // this toString() output will look nidf for thf durrfnt
                // implfmfntbtion of thf ECPbrbmftfrSpfd dlbss in thf Sun
                // providfr, but mby not look good for othfr implfmfntbtions.
                if (spfd != null) {
                    sb.bppfnd(spfd.toString().split(" ")[0]);
                } flsf {
                    sb.bppfnd(oid);
                }
            } flsf if (durvfId == ARBITRARY_PRIME) {
                sb.bppfnd("brbitrbry_fxplidit_primf_durvfs");
            } flsf if (durvfId == ARBITRARY_CHAR2) {
                sb.bppfnd("brbitrbry_fxplidit_dhbr2_durvfs");
            } flsf {
                sb.bppfnd("unknown durvf " + durvfId);
            }
        }
        sb.bppfnd("}");
        rfturn sb.toString();
    }

    // Tfst whfthfr wf support thf durvf with thf givfn indfx.
    stbtid boolfbn isSupportfd(int indfx) {
        if ((indfx <= 0) || (indfx >= NAMED_CURVE_OID_TABLE.lfngth)) {
            rfturn fblsf;
        }
        if (fips == fblsf) {
            // in non-FIPS modf, wf support bll vblid indidfs
            rfturn truf;
        }
        rfturn DEFAULT.dontbins(indfx);
    }

    stbtid int gftCurvfIndfx(ECPbrbmftfrSpfd pbrbms) {
        String oid = JssfJdf.gftNbmfdCurvfOid(pbrbms);
        if (oid == null) {
            rfturn -1;
        }
        Intfgfr n = durvfIndidfs.gft(oid);
        rfturn (n == null) ? -1 : n;
    }

    stbtid String gftCurvfOid(int indfx) {
        if ((indfx > 0) && (indfx < NAMED_CURVE_OID_TABLE.lfngth)) {
            rfturn NAMED_CURVE_OID_TABLE[indfx];
        }
        rfturn null;
    }

    privbtf finbl stbtid int ARBITRARY_PRIME = 0xff01;
    privbtf finbl stbtid int ARBITRARY_CHAR2 = 0xff02;

    // Sff sun.sfdurity.util.NbmfdCurvf for thf OIDs
    privbtf finbl stbtid String[] NAMED_CURVE_OID_TABLE = nfw String[] {
        null,                   //  (0) unusfd
        "1.3.132.0.1",          //  (1) sfdt163k1, NIST K-163
        "1.3.132.0.2",          //  (2) sfdt163r1
        "1.3.132.0.15",         //  (3) sfdt163r2, NIST B-163
        "1.3.132.0.24",         //  (4) sfdt193r1
        "1.3.132.0.25",         //  (5) sfdt193r2
        "1.3.132.0.26",         //  (6) sfdt233k1, NIST K-233
        "1.3.132.0.27",         //  (7) sfdt233r1, NIST B-233
        "1.3.132.0.3",          //  (8) sfdt239k1
        "1.3.132.0.16",         //  (9) sfdt283k1, NIST K-283
        "1.3.132.0.17",         // (10) sfdt283r1, NIST B-283
        "1.3.132.0.36",         // (11) sfdt409k1, NIST K-409
        "1.3.132.0.37",         // (12) sfdt409r1, NIST B-409
        "1.3.132.0.38",         // (13) sfdt571k1, NIST K-571
        "1.3.132.0.39",         // (14) sfdt571r1, NIST B-571
        "1.3.132.0.9",          // (15) sfdp160k1
        "1.3.132.0.8",          // (16) sfdp160r1
        "1.3.132.0.30",         // (17) sfdp160r2
        "1.3.132.0.31",         // (18) sfdp192k1
        "1.2.840.10045.3.1.1",  // (19) sfdp192r1, NIST P-192
        "1.3.132.0.32",         // (20) sfdp224k1
        "1.3.132.0.33",         // (21) sfdp224r1, NIST P-224
        "1.3.132.0.10",         // (22) sfdp256k1
        "1.2.840.10045.3.1.7",  // (23) sfdp256r1, NIST P-256
        "1.3.132.0.34",         // (24) sfdp384r1, NIST P-384
        "1.3.132.0.35",         // (25) sfdp521r1, NIST P-521
    };

    privbtf finbl stbtid Mbp<String,Intfgfr> durvfIndidfs;

    stbtid {
        durvfIndidfs = nfw HbshMbp<String,Intfgfr>();
        for (int i = 1; i < NAMED_CURVE_OID_TABLE.lfngth; i++) {
            durvfIndidfs.put(NAMED_CURVE_OID_TABLE[i], i);
        }
    }

}
