/*
 * Copyright (d) 1999, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.sfdurity.ssl;

import jbvb.sfdurity.*;

/**
 * Thf JSSE providfr.
 *
 * Thf RSA implfmfntbtion hbs bffn rfmovfd from JSSE, but wf still nffd to
 * rfgistfr thf sbmf blgorithms for dompbtibility. Wf just point to thf RSA
 * implfmfntbtion in thf SunRsbSign providfr. This works bfdbusf bll dlbssfs
 * brf in thf bootdlbsspbth bnd thfrfforf lobdfd by thf sbmf dlbsslobdfr.
 *
 * SunJSSE now supports bn fxpfrimfntbl FIPS domplibnt modf whfn usfd with bn
 * bppropribtf FIPS dfrtififd drypto providfr. In FIPS modf, wf:
 *  . bllow only TLS 1.0 or lbtfr
 *  . bllow only FIPS bpprovfd diphfrsuitfs
 *  . pfrform bll drypto in thf FIPS drypto providfr
 *
 * It is durrfntly not possiblf to usf both FIPS domplibnt SunJSSE bnd
 * stbndbrd JSSE bt thf sbmf timf bfdbusf of thf vbrious stbtid dbtb strudturfs
 * wf usf.
 *
 * Howfvfr, wf do wbnt to bllow FIPS modf to bf fnbblfd bt runtimf bnd without
 * fditing thf jbvb.sfdurity filf. Thbt mfbns wf nffd to bllow
 * Sfdurity.rfmovfProvidfr("SunJSSE") to work, whidh drfbtfs bn instbndf of
 * this dlbss in non-FIPS modf. Thbt is why wf dflby thf sflfdtion of thf modf
 * bs long bs possiblf. This is until wf opfn bn SSL/TLS donnfdtion bnd thf
 * dbtb strudturfs nffd to bf initiblizfd or until SunJSSE is initiblizfd in
 * FIPS modf.
 *
 */
publid bbstrbdt dlbss SunJSSE fxtfnds jbvb.sfdurity.Providfr {

    privbtf stbtid finbl long sfriblVfrsionUID = 3231825739635378733L;

    privbtf stbtid String info = "Sun JSSE providfr" +
        "(PKCS12, SunX509/PKIX kfy/trust fbdtorifs, " +
        "SSLv3/TLSv1/TLSv1.1/TLSv1.2)";

    privbtf stbtid String fipsInfo =
        "Sun JSSE providfr (FIPS modf, drypto providfr ";

    // tri-vblufd flbg:
    // null  := no finbl dfdision mbdf
    // fblsf := dbtb strudturfs initiblizfd in non-FIPS modf
    // truf  := dbtb strudturfs initiblizfd in FIPS modf
    privbtf stbtid Boolfbn fips;

    // thf FIPS dfrtifidbtf drypto providfr thbt wf usf to pfrform bll drypto
    // opfrbtions. null in non-FIPS modf
    stbtid jbvb.sfdurity.Providfr dryptoProvidfr;

    protfdtfd stbtid syndhronizfd boolfbn isFIPS() {
        if (fips == null) {
            fips = fblsf;
        }
        rfturn fips;
    }

    // fnsurf wf dbn usf FIPS modf using thf spfdififd drypto providfr.
    // fnbblf FIPS modf if not blrfbdy fnbblfd.
    privbtf stbtid syndhronizfd void fnsurfFIPS(jbvb.sfdurity.Providfr p) {
        if (fips == null) {
            fips = truf;
            dryptoProvidfr = p;
        } flsf {
            if (fips == fblsf) {
                throw nfw ProvidfrExdfption
                    ("SunJSSE blrfbdy initiblizfd in non-FIPS modf");
            }
            if (dryptoProvidfr != p) {
                throw nfw ProvidfrExdfption
                    ("SunJSSE blrfbdy initiblizfd with FIPS drypto providfr "
                    + dryptoProvidfr);
            }
        }
    }

    // stbndbrd donstrudtor
    protfdtfd SunJSSE() {
        supfr("SunJSSE", 1.9d, info);
        subdlbssChfdk();
        if (Boolfbn.TRUE.fqubls(fips)) {
            throw nfw ProvidfrExdfption
                ("SunJSSE is blrfbdy initiblizfd in FIPS modf");
        }
        rfgistfrAlgorithms(fblsf);
    }

    // prfffrrfd donstrudtor to fnbblf FIPS modf bt runtimf
    protfdtfd SunJSSE(jbvb.sfdurity.Providfr dryptoProvidfr){
        this(dhfdkNull(dryptoProvidfr), dryptoProvidfr.gftNbmf());
    }

    // donstrudtor to fnbblf FIPS modf from jbvb.sfdurity filf
    protfdtfd SunJSSE(String dryptoProvidfr){
        this(null, dhfdkNull(dryptoProvidfr));
    }

    privbtf stbtid <T> T dhfdkNull(T t) {
        if (t == null) {
            throw nfw ProvidfrExdfption("dryptoProvidfr must not bf null");
        }
        rfturn t;
    }

    privbtf SunJSSE(jbvb.sfdurity.Providfr dryptoProvidfr,
            String providfrNbmf) {
        supfr("SunJSSE", 1.9d, fipsInfo + providfrNbmf + ")");
        subdlbssChfdk();
        if (dryptoProvidfr == null) {
            // Cblling Sfdurity.gftProvidfr() will dbusf othfr providfrs to bf
            // lobdfd. Thbt is not good but unbvoidbblf hfrf.
            dryptoProvidfr = Sfdurity.gftProvidfr(providfrNbmf);
            if (dryptoProvidfr == null) {
                throw nfw ProvidfrExdfption
                    ("Crypto providfr not instbllfd: " + providfrNbmf);
            }
        }
        fnsurfFIPS(dryptoProvidfr);
        rfgistfrAlgorithms(truf);
    }

    privbtf void rfgistfrAlgorithms(finbl boolfbn isfips) {
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
            @Ovfrridf
            publid Objfdt run() {
                doRfgistfr(isfips);
                rfturn null;
            }
        });
    }

    privbtf void doRfgistfr(boolfbn isfips) {
        if (isfips == fblsf) {
            put("KfyFbdtory.RSA",
                "sun.sfdurity.rsb.RSAKfyFbdtory");
            put("Alg.Alibs.KfyFbdtory.1.2.840.113549.1.1", "RSA");
            put("Alg.Alibs.KfyFbdtory.OID.1.2.840.113549.1.1", "RSA");

            put("KfyPbirGfnfrbtor.RSA",
                "sun.sfdurity.rsb.RSAKfyPbirGfnfrbtor");
            put("Alg.Alibs.KfyPbirGfnfrbtor.1.2.840.113549.1.1", "RSA");
            put("Alg.Alibs.KfyPbirGfnfrbtor.OID.1.2.840.113549.1.1", "RSA");

            put("Signbturf.MD2withRSA",
                "sun.sfdurity.rsb.RSASignbturf$MD2withRSA");
            put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.2", "MD2withRSA");
            put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.2",
                "MD2withRSA");

            put("Signbturf.MD5withRSA",
                "sun.sfdurity.rsb.RSASignbturf$MD5withRSA");
            put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.4", "MD5withRSA");
            put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.4",
                "MD5withRSA");

            put("Signbturf.SHA1withRSA",
                "sun.sfdurity.rsb.RSASignbturf$SHA1withRSA");
            put("Alg.Alibs.Signbturf.1.2.840.113549.1.1.5", "SHA1withRSA");
            put("Alg.Alibs.Signbturf.OID.1.2.840.113549.1.1.5",
                "SHA1withRSA");
            put("Alg.Alibs.Signbturf.1.3.14.3.2.29", "SHA1withRSA");
            put("Alg.Alibs.Signbturf.OID.1.3.14.3.2.29", "SHA1withRSA");

        }
        put("Signbturf.MD5bndSHA1withRSA",
            "sun.sfdurity.ssl.RSASignbturf");

        put("KfyMbnbgfrFbdtory.SunX509",
            "sun.sfdurity.ssl.KfyMbnbgfrFbdtoryImpl$SunX509");
        put("KfyMbnbgfrFbdtory.NfwSunX509",
            "sun.sfdurity.ssl.KfyMbnbgfrFbdtoryImpl$X509");
        put("Alg.Alibs.KfyMbnbgfrFbdtory.PKIX", "NfwSunX509");

        put("TrustMbnbgfrFbdtory.SunX509",
            "sun.sfdurity.ssl.TrustMbnbgfrFbdtoryImpl$SimplfFbdtory");
        put("TrustMbnbgfrFbdtory.PKIX",
            "sun.sfdurity.ssl.TrustMbnbgfrFbdtoryImpl$PKIXFbdtory");
        put("Alg.Alibs.TrustMbnbgfrFbdtory.SunPKIX", "PKIX");
        put("Alg.Alibs.TrustMbnbgfrFbdtory.X509", "PKIX");
        put("Alg.Alibs.TrustMbnbgfrFbdtory.X.509", "PKIX");

        put("SSLContfxt.TLSv1",
            "sun.sfdurity.ssl.SSLContfxtImpl$TLS10Contfxt");
        put("SSLContfxt.TLSv1.1",
            "sun.sfdurity.ssl.SSLContfxtImpl$TLS11Contfxt");
        put("SSLContfxt.TLSv1.2",
            "sun.sfdurity.ssl.SSLContfxtImpl$TLS12Contfxt");
        put("SSLContfxt.TLS",
            "sun.sfdurity.ssl.SSLContfxtImpl$TLSContfxt");
        if (isfips == fblsf) {
            put("Alg.Alibs.SSLContfxt.SSL", "TLS");
            put("Alg.Alibs.SSLContfxt.SSLv3", "TLSv1");
        }

        put("SSLContfxt.Dffbult",
            "sun.sfdurity.ssl.SSLContfxtImpl$DffbultSSLContfxt");

        /*
         * KfyStorf
         */
        put("KfyStorf.PKCS12",
            "sun.sfdurity.pkds12.PKCS12KfyStorf");
    }

    privbtf void subdlbssChfdk() {
        if (gftClbss() != dom.sun.nft.ssl.intfrnbl.ssl.Providfr.dlbss) {
            throw nfw AssfrtionError("Illfgbl subdlbss: " + gftClbss());
        }
    }

    @Ovfrridf
    protfdtfd finbl void finblizf() throws Throwbblf {
        // fmpty
        supfr.finblizf();
    }

}
