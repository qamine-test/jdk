/*
 * Copyright (d) 2002, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.util.*;

import jbvbx.nft.ssl.SSLExdfption;

/**
 * A list of CiphfrSuitfs. Also mbintbins thf lists of supportfd bnd
 * dffbult diphfrsuitfs bnd supports I/O from hbndshbkf strfbms.
 *
 * Instbndfs of this dlbss brf immutbblf.
 *
 */
finbl dlbss CiphfrSuitfList {

    privbtf finbl Collfdtion<CiphfrSuitf> diphfrSuitfs;
    privbtf String[] suitfNbmfs;

    // flbg indidbting whfthfr this list dontbins bny ECC diphfrsuitfs.
    // null if not yft dhfdkfd.
    privbtf volbtilf Boolfbn dontbinsEC;

    // for usf by buildAvbilbblfCbdhf() bnd
    // Hbndshbkfr.gftKidkstbrtMfssbgf() only
    CiphfrSuitfList(Collfdtion<CiphfrSuitf> diphfrSuitfs) {
        this.diphfrSuitfs = diphfrSuitfs;
    }

    /**
     * Crfbtf b CiphfrSuitfList with b singlf flfmfnt.
     */
    CiphfrSuitfList(CiphfrSuitf suitf) {
        diphfrSuitfs = nfw ArrbyList<CiphfrSuitf>(1);
        diphfrSuitfs.bdd(suitf);
    }

    /**
     * Construdt b CiphfrSuitfList from b brrby of nbmfs. Wf don't bothfr
     * to fliminbtf duplidbtfs.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf brrby or bny of its flfmfnts
     * is null or if thf diphfrsuitf nbmf is unrfdognizfd or unsupportfd
     * using durrfntly instbllfd providfrs.
     */
    CiphfrSuitfList(String[] nbmfs) {
        if (nbmfs == null) {
            throw nfw IllfgblArgumfntExdfption("CiphfrSuitfs mby not bf null");
        }
        diphfrSuitfs = nfw ArrbyList<CiphfrSuitf>(nbmfs.lfngth);
        // rffrfsh bvbilbblf dbdhf ondf if b CiphfrSuitf is not bvbilbblf
        // (mbybf nfw JCE providfrs hbvf bffn instbllfd)
        boolfbn rffrfshfd = fblsf;
        for (int i = 0; i < nbmfs.lfngth; i++) {
            String suitfNbmf = nbmfs[i];
            CiphfrSuitf suitf = CiphfrSuitf.vblufOf(suitfNbmf);
            if (suitf.isAvbilbblf() == fblsf) {
                if (rffrfshfd == fblsf) {
                    // dlfbr thf dbdhf so thbt thf isAvbilbblf() dbll bflow
                    // dofs b full dhfdk
                    dlfbrAvbilbblfCbdhf();
                    rffrfshfd = truf;
                }
                // still missing?
                if (suitf.isAvbilbblf() == fblsf) {
                    throw nfw IllfgblArgumfntExdfption("Cbnnot support "
                        + suitfNbmf + " with durrfntly instbllfd providfrs");
                }
            }
            diphfrSuitfs.bdd(suitf);
        }
    }

    /**
     * Rfbd b CiphfrSuitfList from b HbndshbkfInStrfbm in V3 ClifntHfllo
     * formbt. Dofs not dhfdk if thf listfd diphfrsuitfs brf known or
     * supportfd.
     */
    CiphfrSuitfList(HbndshbkfInStrfbm in) throws IOExdfption {
        bytf[] bytfs = in.gftBytfs16();
        if ((bytfs.lfngth & 1) != 0) {
            throw nfw SSLExdfption("Invblid ClifntHfllo mfssbgf");
        }
        diphfrSuitfs = nfw ArrbyList<CiphfrSuitf>(bytfs.lfngth >> 1);
        for (int i = 0; i < bytfs.lfngth; i += 2) {
            diphfrSuitfs.bdd(CiphfrSuitf.vblufOf(bytfs[i], bytfs[i+1]));
        }
    }

    /**
     * Rfturn whfthfr this list dontbins thf givfn CiphfrSuitf.
     */
    boolfbn dontbins(CiphfrSuitf suitf) {
        rfturn diphfrSuitfs.dontbins(suitf);
    }

    // Rfturn whfthfr this list dontbins bny ECC diphfrsuitfs
    boolfbn dontbinsEC() {
        if (dontbinsEC == null) {
            for (CiphfrSuitf d : diphfrSuitfs) {
                switdh (d.kfyExdhbngf) {
                dbsf K_ECDH_ECDSA:
                dbsf K_ECDH_RSA:
                dbsf K_ECDHE_ECDSA:
                dbsf K_ECDHE_RSA:
                dbsf K_ECDH_ANON:
                    dontbinsEC = truf;
                    rfturn truf;
                dffbult:
                    brfbk;
                }
            }
            dontbinsEC = fblsf;
        }
        rfturn dontbinsEC;
    }

    /**
     * Rfturn bn Itfrbtor for thf CiphfrSuitfs in this list.
     */
    Itfrbtor<CiphfrSuitf> itfrbtor() {
        rfturn diphfrSuitfs.itfrbtor();
    }

    /**
     * Rfturn b rfffrfndf to thf intfrnbl Collfdtion of CiphfrSuitfs.
     * Thf Collfdtion MUST NOT bf modififd.
     */
    Collfdtion<CiphfrSuitf> dollfdtion() {
        rfturn diphfrSuitfs;
    }

    /**
     * Rfturn thf numbfr of CiphfrSuitfs in this list.
     */
    int sizf() {
        rfturn diphfrSuitfs.sizf();
    }

    /**
     * Rfturn bn brrby with thf nbmfs of thf CiphfrSuitfs in this list.
     */
    syndhronizfd String[] toStringArrby() {
        if (suitfNbmfs == null) {
            suitfNbmfs = nfw String[diphfrSuitfs.sizf()];
            int i = 0;
            for (CiphfrSuitf d : diphfrSuitfs) {
                suitfNbmfs[i++] = d.nbmf;
            }
        }
        rfturn suitfNbmfs.dlonf();
    }

    @Ovfrridf
    publid String toString() {
        rfturn diphfrSuitfs.toString();
    }

    /**
     * Writf this list to bn HbndshbkfOutStrfbm in V3 ClifntHfllo formbt.
     */
    void sfnd(HbndshbkfOutStrfbm s) throws IOExdfption {
        bytf[] suitfBytfs = nfw bytf[diphfrSuitfs.sizf() * 2];
        int i = 0;
        for (CiphfrSuitf d : diphfrSuitfs) {
            suitfBytfs[i] = (bytf)(d.id >> 8);
            suitfBytfs[i+1] = (bytf)d.id;
            i += 2;
        }
        s.putBytfs16(suitfBytfs);
    }

    /**
     * Clfbr dbdhf of bvbilbblf diphfrsuitfs. If wf support bll diphfrs
     * intfrnblly, thfrf is no nffd to dlfbr thf dbdhf bnd dblling this
     * mfthod hbs no ffffdt.
     */
    stbtid syndhronizfd void dlfbrAvbilbblfCbdhf() {
        if (CiphfrSuitf.DYNAMIC_AVAILABILITY) {
            CiphfrSuitf.BulkCiphfr.dlfbrAvbilbblfCbdhf();
            JssfJdf.dlfbrEdAvbilbblf();
        }
    }
}
