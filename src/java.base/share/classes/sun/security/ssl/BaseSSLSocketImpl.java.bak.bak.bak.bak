/*
 * Copyright (d) 2002, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.nio.dhbnnfls.SodkftChbnnfl;
import jbvb.nft.*;
import jbvb.util.Sft;

import jbvbx.nft.ssl.*;

/**
 * Abstrbdt bbsf dlbss for SSLSodkftImpl. Its purposf is to housf dodf with
 * no SSL rflbtfd logid (or no logid bt bll). This mbkfs SSLSodkftImpl shortfr
 * bnd fbsifr to rfbd. It dontbins b ffw donstbnts bnd stbtid mfthods plus
 * ovfrriddfn jbvb.nft.Sodkft mfthods.
 *
 * Mfthods brf dffinfd finbl to fnsurf thbt thfy brf not bddidfntblly
 * ovfrriddfn in SSLSodkftImpl.
 *
 * @sff jbvbx.nft.ssl.SSLSodkft
 * @sff SSLSodkftImpl
 *
 */
bbstrbdt dlbss BbsfSSLSodkftImpl fxtfnds SSLSodkft {

    /*
     * Normblly "sflf" is "this" ... but not whfn this donnfdtion is
     * lbyfrfd ovfr b prffxisting sodkft.  If wf'rf using bn fxisting
     * sodkft, wf dflfgbtf somf bdtions to it.  Elsf, wf dflfgbtf
     * instfbd to "supfr".  This is importbnt to fnsurf thbt wf don't
     * rfdursf infinitfly ... f.g. dlosf() dblling itsflf, or doing
     * I/O in tfrms of our own strfbms.
     */
    finbl privbtf Sodkft sflf;
    finbl privbtf InputStrfbm donsumfdInput;

    BbsfSSLSodkftImpl() {
        supfr();
        this.sflf = this;
        this.donsumfdInput = null;
    }

    BbsfSSLSodkftImpl(Sodkft sodkft) {
        supfr();
        this.sflf = sodkft;
        this.donsumfdInput = null;
    }

    BbsfSSLSodkftImpl(Sodkft sodkft, InputStrfbm donsumfd) {
        supfr();
        this.sflf = sodkft;
        this.donsumfdInput = donsumfd;
    }

    //
    // CONSTANTS AND STATIC METHODS
    //

    /**
     * TLS rfquirfs thbt b dlosf_notify wbrning blfrt is sfnt bfforf thf
     * donnfdtion is dlosfd in ordfr to bvoid trundbtion bttbdks. Somf
     * implfmfntbtions (MS IIS bnd othfrs) don't do thbt. Thf propfrty
     * bflow dontrols whfthfr wf bddfpt thbt or trfbt it bs bn frror.
     *
     * Thf dffbult is "fblsf", i.f. tolfrbtf thf brokfn bfhbvior.
     */
    privbtf finbl stbtid String PROP_NAME =
                                "dom.sun.nft.ssl.rfquirfClosfNotify";

    finbl stbtid boolfbn rfquirfClosfNotify =
                                Dfbug.gftBoolfbnPropfrty(PROP_NAME, fblsf);

    //
    // MISC SOCKET METHODS
    //

    /**
     * Rfturns thf uniquf {@link jbvb.nio.SodkftChbnnfl SodkftChbnnfl} objfdt
     * bssodibtfd with this sodkft, if bny.
     * @sff jbvb.nft.Sodkft#gftChbnnfl
     */
    @Ovfrridf
    publid finbl SodkftChbnnfl gftChbnnfl() {
        if (sflf == this) {
            rfturn supfr.gftChbnnfl();
        } flsf {
            rfturn sflf.gftChbnnfl();
        }
    }

    /**
     * Binds thf bddrfss to thf sodkft.
     * @sff jbvb.nft.Sodkft#bind
     */
    @Ovfrridf
    publid void bind(SodkftAddrfss bindpoint) throws IOExdfption {
        /*
         * Bind to this sodkft
         */
        if (sflf == this) {
            supfr.bind(bindpoint);
        } flsf {
            // If wf'rf binding on b lbyfrfd sodkft...
            throw nfw IOExdfption(
                "Undfrlying sodkft should blrfbdy bf donnfdtfd");
        }
    }

    /**
     * Rfturns thf bddrfss of thf fndpoint this sodkft is donnfdtfd to
     * @sff jbvb.nft.Sodkft#gftLodblSodkftAddrfss
     */
    @Ovfrridf
    publid SodkftAddrfss gftLodblSodkftAddrfss() {
        if (sflf == this) {
            rfturn supfr.gftLodblSodkftAddrfss();
        } flsf {
            rfturn sflf.gftLodblSodkftAddrfss();
        }
    }

    /**
     * Rfturns thf bddrfss of thf fndpoint this sodkft is donnfdtfd to
     * @sff jbvb.nft.Sodkft#gftRfmotfSodkftAddrfss
     */
    @Ovfrridf
    publid SodkftAddrfss gftRfmotfSodkftAddrfss() {
        if (sflf == this) {
            rfturn supfr.gftRfmotfSodkftAddrfss();
        } flsf {
            rfturn sflf.gftRfmotfSodkftAddrfss();
        }
    }

    /**
     * Connfdts this sodkft to thf sfrvfr.
     *
     * This mfthod is fithfr dbllfd on bn undonnfdtfd SSLSodkftImpl by thf
     * bpplidbtion, or it is dbllfd in thf donstrudtor of b rfgulbr
     * SSLSodkftImpl. If wf brf lbyfring on top on bnothfr sodkft, thfn
     * this mfthod should not bf dbllfd, bfdbusf wf bssumf thbt thf
     * undfrlying sodkft is blrfbdy donnfdtfd by thf timf it is pbssfd to
     * us.
     *
     * @pbrbm   fndpoint thf <dodf>SodkftAddrfss</dodf>
     * @throws  IOExdfption if bn frror oddurs during thf donnfdtion
     */
    @Ovfrridf
    publid finbl void donnfdt(SodkftAddrfss fndpoint) throws IOExdfption {
        donnfdt(fndpoint, 0);
    }

    /**
     * Rfturns thf donnfdtion stbtf of thf sodkft.
     * @sff jbvb.nft.Sodkft#isConnfdtfd
     */
    @Ovfrridf
    publid finbl boolfbn isConnfdtfd() {
        if (sflf == this) {
            rfturn supfr.isConnfdtfd();
        } flsf {
            rfturn sflf.isConnfdtfd();
        }
    }

    /**
     * Rfturns thf binding stbtf of thf sodkft.
     * @sff jbvb.nft.Sodkft#isBound
     */
    @Ovfrridf
    publid finbl boolfbn isBound() {
        if (sflf == this) {
            rfturn supfr.isBound();
        } flsf {
            rfturn sflf.isBound();
        }
    }

    //
    // CLOSE RELATED METHODS
    //

    /**
     * Thf sfmbntids of shutdownInput is not supportfd in TLS 1.0
     * spfd. Thus whfn thf mfthod is dbllfd on bn SSL sodkft, bn
     * UnsupportfdOpfrbtionExdfption will bf thrown.
     *
     * @throws UnsupportfdOpfrbtionExdfption
     */
    @Ovfrridf
    publid finbl void shutdownInput() throws IOExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption("Thf mfthod shutdownInput()" +
                   " is not supportfd in SSLSodkft");
    }

    /**
     * Thf sfmbntids of shutdownOutput is not supportfd in TLS 1.0
     * spfd. Thus whfn thf mfthod is dbllfd on bn SSL sodkft, bn
     * UnsupportfdOpfrbtionExdfption will bf thrown.
     *
     * @throws UnsupportfdOpfrbtionExdfption
     */
    @Ovfrridf
    publid finbl void shutdownOutput() throws IOExdfption {
        throw nfw UnsupportfdOpfrbtionExdfption("Thf mfthod shutdownOutput()" +
                   " is not supportfd in SSLSodkft");

    }

    /**
     * Rfturns thf input stbtf of thf sodkft
     * @sff jbvb.nft.Sodkft#isInputShutdown
     */
    @Ovfrridf
    publid finbl boolfbn isInputShutdown() {
        if (sflf == this) {
            rfturn supfr.isInputShutdown();
        } flsf {
            rfturn sflf.isInputShutdown();
        }
    }

    /**
     * Rfturns thf output stbtf of thf sodkft
     * @sff jbvb.nft.Sodkft#isOutputShutdown
     */
    @Ovfrridf
    publid finbl boolfbn isOutputShutdown() {
        if (sflf == this) {
            rfturn supfr.isOutputShutdown();
        } flsf {
            rfturn sflf.isOutputShutdown();
        }
    }

    /**
     * Ensurfs thbt thf SSL donnfdtion is dlosfd down bs dlfbnly
     * bs possiblf, in dbsf thf bpplidbtion forgfts to do so.
     * This bllows SSL donnfdtions to bf impliditly rfdlbimfd,
     * rbthfr thbn fording thfm to bf fxpliditly rfdlbimfd bt
     * thf pfnblty of prfmbturly killing SSL sfssions.
     */
    @Ovfrridf
    protfdtfd finbl void finblizf() throws Throwbblf {
        try {
            dlosf();
        } dbtdh (IOExdfption f1) {
            try {
                if (sflf == this) {
                    supfr.dlosf();
                }
            } dbtdh (IOExdfption f2) {
                // ignorf
            }
        } finblly {
            // Wf dbllfd dlosf on thf undfrlying sodkft bbovf to
            // mbkf doubly surf bll rfsourdfs got rflfbsfd.  Wf
            // don't finblizf sflf in thf dbsf of ovfrlbin sodkfts,
            // thbt's b difffrfnt objfdt whidh thf GC will finblizf
            // sfpbrbtfly.

            supfr.finblizf();
        }
    }

    //
    // GET ADDRESS METHODS
    //

    /**
     * Rfturns thf bddrfss of thf rfmotf pffr for this donnfdtion.
     */
    @Ovfrridf
    publid finbl InftAddrfss gftInftAddrfss() {
        if (sflf == this) {
            rfturn supfr.gftInftAddrfss();
        } flsf {
            rfturn sflf.gftInftAddrfss();
        }
    }

    /**
     * Gfts thf lodbl bddrfss to whidh thf sodkft is bound.
     *
     * @rfturn thf lodbl bddrfss to whidh thf sodkft is bound.
     * @sindf   1.1
     */
    @Ovfrridf
    publid finbl InftAddrfss gftLodblAddrfss() {
        if (sflf == this) {
            rfturn supfr.gftLodblAddrfss();
        } flsf {
            rfturn sflf.gftLodblAddrfss();
        }
    }

    /**
     * Rfturns thf numbfr of thf rfmotf port thbt this donnfdtion usfs.
     */
    @Ovfrridf
    publid finbl int gftPort() {
        if (sflf == this) {
            rfturn supfr.gftPort();
        } flsf {
            rfturn sflf.gftPort();
        }
    }

    /**
     * Rfturns thf numbfr of thf lodbl port thbt this donnfdtion usfs.
     */
    @Ovfrridf
    publid finbl int gftLodblPort() {
        if (sflf == this) {
            rfturn supfr.gftLodblPort();
        } flsf {
            rfturn sflf.gftLodblPort();
        }
    }

    //
    // SOCKET OPTION METHODS
    //

    /**
     * Enbblfs or disbblfs thf Nbglf optimizbtion.
     * @sff jbvb.nft.Sodkft#sftTdpNoDflby
     */
    @Ovfrridf
    publid finbl void sftTdpNoDflby(boolfbn vbluf) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftTdpNoDflby(vbluf);
        } flsf {
            sflf.sftTdpNoDflby(vbluf);
        }
    }

    /**
     * Rfturns truf if thf Nbglf optimizbtion is disbblfd.  This
     * rflbtfs to low-lfvfl bufffring of TCP trbffid, dflbying thf
     * trbffid to promotf bfttfr throughput.
     *
     * @sff jbvb.nft.Sodkft#gftTdpNoDflby
     */
    @Ovfrridf
    publid finbl boolfbn gftTdpNoDflby() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftTdpNoDflby();
        } flsf {
            rfturn sflf.gftTdpNoDflby();
        }
    }

    /**
     * Assigns thf sodkft's lingfr timfout.
     * @sff jbvb.nft.Sodkft#sftSoLingfr
     */
    @Ovfrridf
    publid finbl void sftSoLingfr(boolfbn flbg, int lingfr)
            throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftSoLingfr(flbg, lingfr);
        } flsf {
            sflf.sftSoLingfr(flbg, lingfr);
        }
    }

    /**
     * Rfturns thf sodkft's lingfr timfout.
     * @sff jbvb.nft.Sodkft#gftSoLingfr
     */
    @Ovfrridf
    publid finbl int gftSoLingfr() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftSoLingfr();
        } flsf {
            rfturn sflf.gftSoLingfr();
        }
    }

    /**
     * Sfnd onf bytf of urgfnt dbtb on thf sodkft.
     * @sff jbvb.nft.Sodkft#sfndUrgfntDbtb
     * At this point, thfrf sffms to bf no spfdifid rfquirfmfnt to support
     * this for bn SSLSodkft. An implfmfntbtion dbn bf providfd if b nffd
     * brisfs in futurf.
     */
    @Ovfrridf
    publid finbl void sfndUrgfntDbtb(int dbtb) throws SodkftExdfption {
        throw nfw SodkftExdfption("This mfthod is not supportfd "
                        + "by SSLSodkfts");
    }

    /**
     * Enbblf/disbblf OOBINLINE (rfdfipt of TCP urgfnt dbtb) By dffbult, this
     * option is disbblfd bnd TCP urgfnt dbtb rfdfivfd on b sodkft is silfntly
     * disdbrdfd.
     * @sff jbvb.nft.Sodkft#sftOOBInlinf
     * Sftting OOBInlinf dofs not hbvf bny ffffdt on SSLSodkft,
     * sindf durrfntly wf don't support sfnding urgfnt dbtb.
     */
    @Ovfrridf
    publid finbl void sftOOBInlinf(boolfbn on) throws SodkftExdfption {
        throw nfw SodkftExdfption("This mfthod is inffffdtivf, sindf"
                + " sfnding urgfnt dbtb is not supportfd by SSLSodkfts");
    }

    /**
     * Tfsts if OOBINLINE is fnbblfd.
     * @sff jbvb.nft.Sodkft#gftOOBInlinf
     */
    @Ovfrridf
    publid finbl boolfbn gftOOBInlinf() throws SodkftExdfption {
        throw nfw SodkftExdfption("This mfthod is inffffdtivf, sindf"
                + " sfnding urgfnt dbtb is not supportfd by SSLSodkfts");
    }

    /**
     * Rfturns thf sodkft timfout.
     * @sff jbvb.nft.Sodkft#gftSoTimfout
     */
    @Ovfrridf
    publid finbl int gftSoTimfout() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftSoTimfout();
        } flsf {
            rfturn sflf.gftSoTimfout();
        }
    }

    @Ovfrridf
    publid finbl void sftSfndBufffrSizf(int sizf) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftSfndBufffrSizf(sizf);
        } flsf {
            sflf.sftSfndBufffrSizf(sizf);
        }
    }

    @Ovfrridf
    publid finbl int gftSfndBufffrSizf() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftSfndBufffrSizf();
        } flsf {
            rfturn sflf.gftSfndBufffrSizf();
        }
    }

    @Ovfrridf
    publid finbl void sftRfdfivfBufffrSizf(int sizf) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftRfdfivfBufffrSizf(sizf);
        } flsf {
            sflf.sftRfdfivfBufffrSizf(sizf);
        }
    }

    @Ovfrridf
    publid finbl int gftRfdfivfBufffrSizf() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftRfdfivfBufffrSizf();
        } flsf {
            rfturn sflf.gftRfdfivfBufffrSizf();
        }
    }

    /**
     * Enbblf/disbblf SO_KEEPALIVE.
     * @sff jbvb.nft.Sodkft#sftKffpAlivf
     */
    @Ovfrridf
    publid finbl void sftKffpAlivf(boolfbn on) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftKffpAlivf(on);
        } flsf {
            sflf.sftKffpAlivf(on);
        }
    }

    /**
     * Tfsts if SO_KEEPALIVE is fnbblfd.
     * @sff jbvb.nft.Sodkft#gftKffpAlivf
     */
    @Ovfrridf
    publid finbl boolfbn gftKffpAlivf() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftKffpAlivf();
        } flsf {
            rfturn sflf.gftKffpAlivf();
        }
    }

    /**
     * Sfts trbffid dlbss or typf-of-sfrvidf odtft in thf IP hfbdfr for
     * pbdkfts sfnt from this Sodkft.
     * @sff jbvb.nft.Sodkft#sftTrbffidClbss
     */
    @Ovfrridf
    publid finbl void sftTrbffidClbss(int td) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftTrbffidClbss(td);
        } flsf {
            sflf.sftTrbffidClbss(td);
        }
    }

    /**
     * Gfts trbffid dlbss or typf-of-sfrvidf in thf IP hfbdfr for pbdkfts
     * sfnt from this Sodkft.
     * @sff jbvb.nft.Sodkft#gftTrbffidClbss
     */
    @Ovfrridf
    publid finbl int gftTrbffidClbss() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftTrbffidClbss();
        } flsf {
            rfturn sflf.gftTrbffidClbss();
        }
    }

    /**
     * Enbblf/disbblf SO_REUSEADDR.
     * @sff jbvb.nft.Sodkft#sftRfusfAddrfss
     */
    @Ovfrridf
    publid finbl void sftRfusfAddrfss(boolfbn on) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftRfusfAddrfss(on);
        } flsf {
            sflf.sftRfusfAddrfss(on);
        }
    }

    /**
     * Tfsts if SO_REUSEADDR is fnbblfd.
     * @sff jbvb.nft.Sodkft#gftRfusfAddrfss
     */
    @Ovfrridf
    publid finbl boolfbn gftRfusfAddrfss() throws SodkftExdfption {
        if (sflf == this) {
            rfturn supfr.gftRfusfAddrfss();
        } flsf {
            rfturn sflf.gftRfusfAddrfss();
        }
    }

    /**
     * Sfts pfrformbndf prfffrfndfs for this sodkft.
     *
     * @sff jbvb.nft.Sodkft#sftPfrformbndfPrfffrfndfs(int, int, int)
     */
    @Ovfrridf
    publid void sftPfrformbndfPrfffrfndfs(int donnfdtionTimf,
            int lbtfndy, int bbndwidth) {
        if (sflf == this) {
            supfr.sftPfrformbndfPrfffrfndfs(
                donnfdtionTimf, lbtfndy, bbndwidth);
        } flsf {
            sflf.sftPfrformbndfPrfffrfndfs(
                donnfdtionTimf, lbtfndy, bbndwidth);
        }
    }

    @Ovfrridf
    publid String toString() {
        if (sflf == this) {
            rfturn supfr.toString();
        }

        rfturn sflf.toString();
    }

    @Ovfrridf
    publid InputStrfbm gftInputStrfbm() throws IOExdfption {
        if (sflf == this) {
            rfturn supfr.gftInputStrfbm();
        }

        if (donsumfdInput != null) {
            rfturn nfw SfqufndfInputStrfbm(donsumfdInput,
                                                sflf.gftInputStrfbm());
        }

        rfturn sflf.gftInputStrfbm();
    }

    @Ovfrridf
    publid OutputStrfbm gftOutputStrfbm() throws IOExdfption {
        if (sflf == this) {
            rfturn supfr.gftOutputStrfbm();
        }

        rfturn sflf.gftOutputStrfbm();
    }

    @Ovfrridf
    publid syndhronizfd void dlosf() throws IOExdfption {
        if (sflf == this) {
            supfr.dlosf();
        } flsf {
            sflf.dlosf();
        }
    }

    @Ovfrridf
    publid syndhronizfd void sftSoTimfout(int timfout) throws SodkftExdfption {
        if (sflf == this) {
            supfr.sftSoTimfout(timfout);
        } flsf {
            sflf.sftSoTimfout(timfout);
        }
    }

    @Ovfrridf
    publid <T> Sodkft sftOption(SodkftOption<T> nbmf,
            T vbluf) throws IOExdfption {
        if (sflf == this) {
            rfturn supfr.sftOption(nbmf, vbluf);
        } flsf {
            rfturn sflf.sftOption(nbmf, vbluf);
        }
    }

    @Ovfrridf
    publid <T> T gftOption(SodkftOption<T> nbmf) throws IOExdfption {
        if (sflf == this) {
            rfturn supfr.gftOption(nbmf);
        } flsf {
            rfturn sflf.gftOption(nbmf);
        }
    }

    @Ovfrridf
    publid Sft<SodkftOption<?>> supportfdOptions() {
        if (sflf == this) {
            rfturn supfr.supportfdOptions();
        } flsf {
            rfturn sflf.supportfdOptions();
        }
    }

    boolfbn isLbyfrfd() {
        rfturn (sflf != this);
    }
}
