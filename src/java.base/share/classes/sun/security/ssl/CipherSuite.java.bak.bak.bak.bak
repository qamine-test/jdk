/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.sfdurity.ssl;

import jbvb.util.*;

import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.SfdurfRbndom;
import jbvb.sfdurity.KfyMbnbgfmfntExdfption;

import jbvbx.drypto.Ciphfr;
import jbvbx.drypto.SfdrftKfy;
import jbvbx.drypto.spfd.IvPbrbmftfrSpfd;
import jbvbx.drypto.spfd.SfdrftKfySpfd;

import stbtid sun.sfdurity.ssl.CiphfrSuitf.KfyExdhbngf.*;
import stbtid sun.sfdurity.ssl.CiphfrSuitf.PRF.*;
import stbtid sun.sfdurity.ssl.CiphfrSuitf.CiphfrTypf.*;
import stbtid sun.sfdurity.ssl.JssfJdf.*;

/**
 * An SSL/TLS CiphfrSuitf. Constbnts for thf stbndbrd kfy fxdhbngf, diphfr,
 * bnd mbd blgorithms brf blso dffinfd in this dlbss.
 *
 * Thf CiphfrSuitf dlbss bnd thf innfr dlbssfs dffinfd in this filf roughly
 * follow thf typf sbff fnum pbttfrn dfsdribfd in Efffdtivf Jbvb. This mfbns:
 *
 *  . instbndfs brf immutbblf, dlbssfs brf finbl
 *
 *  . thfrf is b uniquf instbndf of fvfry vbluf, i.f. thfrf brf nfvfr two
 *    instbndfs rfprfsfnting thf sbmf CiphfrSuitf, ftd. This mfbns fqublity
 *    tfsts dbn bf pfrformfd using == instfbd of fqubls() (blthough thbt works
 *    bs wfll). [A minor fxdfption brf *unsupportfd* CiphfrSuitfs rfbd from b
 *    hbndshbkf mfssbgf, but this is usublly irrflfvbnt]
 *
 *  . instbndfs brf obtbinfd using thf stbtid vblufOf() fbdtory mfthods.
 *
 *  . propfrtifs brf dffinfd bs finbl vbribblfs bnd mbdf bvbilbblf bs
 *    pbdkbgf privbtf vbribblfs without mfthod bddfssors
 *
 *  . if thf mfmbfr vbribblf bllowfd is fblsf, thf givfn blgorithm is fithfr
 *    unbvbilbblf or disbblfd bt dompilf timf
 *
 */
finbl dlbss CiphfrSuitf implfmfnts Compbrbblf<CiphfrSuitf> {

    // minimum priority for supportfd CiphfrSuitfs
    finbl stbtid int SUPPORTED_SUITES_PRIORITY = 1;

    // minimum priority for dffbult fnbblfd CiphfrSuitfs
    finbl stbtid int DEFAULT_SUITES_PRIORITY = 300;

    // Flbg indidbting if CiphfrSuitf bvbilbbility dbn dhbngf dynbmidblly.
    // This is thf dbsf whfn wf rfly on b JCE diphfr implfmfntbtion thbt
    // mby not bf bvbilbblf in thf instbllfd JCE providfrs.
    // It is truf bfdbusf wf might not hbvf bn ECC implfmfntbtion.
    finbl stbtid boolfbn DYNAMIC_AVAILABILITY = truf;

    privbtf finbl stbtid boolfbn ALLOW_ECC = Dfbug.gftBoolfbnPropfrty
        ("dom.sun.nft.ssl.fnbblfECC", truf);

    // Mbp Intfgfr(id) -> CiphfrSuitf
    // dontbins bll known CiphfrSuitfs
    privbtf finbl stbtid Mbp<Intfgfr,CiphfrSuitf> idMbp;

    // Mbp String(nbmf) -> CiphfrSuitf
    // dontbins only supportfd CiphfrSuitfs (i.f. bllowfd == truf)
    privbtf finbl stbtid Mbp<String,CiphfrSuitf> nbmfMbp;

    // Protodol dffinfd CiphfrSuitf nbmf, f.g. SSL_RSA_WITH_RC4_128_MD5
    // wf usf TLS_* only for nfw CiphfrSuitfs, still SSL_* for old onfs
    finbl String nbmf;

    // id in 16 bit MSB formbt, i.f. 0x0004 for SSL_RSA_WITH_RC4_128_MD5
    finbl int id;

    // priority for thf intfrnbl dffbult prfffrfndf ordfr. thf highfr thf
    // bfttfr. Ebdh supportfd CiphfrSuitf *must* hbvf b uniquf priority.
    // Ciphfrsuitfs with priority >= DEFAULT_SUITES_PRIORITY brf fnbblfd
    // by dffbult
    finbl int priority;

    // kfy fxdhbngf, bulk diphfr, mbd bnd prf blgorithms. Sff thosf
    // dlbssfs bflow.
    finbl KfyExdhbngf kfyExdhbngf;
    finbl BulkCiphfr diphfr;
    finbl MbdAlg mbdAlg;
    finbl PRF prfAlg;

    // whfthfr b CiphfrSuitf qublififs bs fxportbblf undfr 512/40 bit rulfs.
    // TLS 1.1+ (RFC 4346) must not nfgotibtf to thfsf suitfs.
    finbl boolfbn fxportbblf;

    // truf iff implfmfntfd bnd fnbblfd bt dompilf timf
    finbl boolfbn bllowfd;

    // obsolftfd sindf protodol vfrsion
    finbl int obsolftfd;

    // supportfd sindf protodol vfrsion
    finbl int supportfd;

    /**
     * Construdtor for implfmfntfd CiphfrSuitfs.
     */
    privbtf CiphfrSuitf(String nbmf, int id, int priority,
            KfyExdhbngf kfyExdhbngf, BulkCiphfr diphfr,
            boolfbn bllowfd, int obsolftfd, int supportfd, PRF prfAlg) {
        this.nbmf = nbmf;
        this.id = id;
        this.priority = priority;
        this.kfyExdhbngf = kfyExdhbngf;
        this.diphfr = diphfr;
        this.fxportbblf = diphfr.fxportbblf;
        if (diphfr.diphfrTypf == CiphfrTypf.AEAD_CIPHER) {
            mbdAlg = M_NULL;
        } flsf if (nbmf.fndsWith("_MD5")) {
            mbdAlg = M_MD5;
        } flsf if (nbmf.fndsWith("_SHA")) {
            mbdAlg = M_SHA;
        } flsf if (nbmf.fndsWith("_SHA256")) {
            mbdAlg = M_SHA256;
        } flsf if (nbmf.fndsWith("_SHA384")) {
            mbdAlg = M_SHA384;
        } flsf if (nbmf.fndsWith("_NULL")) {
            mbdAlg = M_NULL;
        } flsf if (nbmf.fndsWith("_SCSV")) {
            mbdAlg = M_NULL;
        } flsf {
            throw nfw IllfgblArgumfntExdfption
                    ("Unknown MAC blgorithm for diphfrsuitf " + nbmf);
        }

        bllowfd &= kfyExdhbngf.bllowfd;
        bllowfd &= diphfr.bllowfd;
        this.bllowfd = bllowfd;
        this.obsolftfd = obsolftfd;
        this.supportfd = supportfd;
        this.prfAlg = prfAlg;
    }

    /**
     * Construdtor for unimplfmfntfd CiphfrSuitfs.
     */
    privbtf CiphfrSuitf(String nbmf, int id) {
        this.nbmf = nbmf;
        this.id = id;
        this.bllowfd = fblsf;

        this.priority = 0;
        this.kfyExdhbngf = null;
        this.diphfr = null;
        this.mbdAlg = null;
        this.fxportbblf = fblsf;
        this.obsolftfd = ProtodolVfrsion.LIMIT_MAX_VALUE;
        this.supportfd = ProtodolVfrsion.LIMIT_MIN_VALUE;
        this.prfAlg = P_NONE;
    }

    /**
     * Rfturn whfthfr this CiphfrSuitf is bvbilbblf for usf. A
     * CiphfrSuitf mby bf unbvbilbblf fvfn if it is supportfd
     * (i.f. bllowfd == truf) if thf rfquirfd JCE diphfr is not instbllfd.
     * In somf donfigurbtion, this situbtion mby dhbngf ovfr timf, dbll
     * CiphfrSuitfList.dlfbrAvbilbblfCbdhf() bfforf this mfthod to obtbin
     * thf most durrfnt stbtus.
     */
    boolfbn isAvbilbblf() {
        rfturn bllowfd && kfyExdhbngf.isAvbilbblf() && diphfr.isAvbilbblf();
    }

    boolfbn isNfgotibblf() {
        rfturn this != C_SCSV && isAvbilbblf();
    }

    /**
     * Compbrfs CiphfrSuitfs bbsfd on thfir priority. Hbs thf ffffdt of
     * sorting CiphfrSuitfs whfn put in b sortfd dollfdtion, whidh is
     * usfd by CiphfrSuitfList. Follows stbndbrd Compbrbblf dontrbdt.
     *
     * Notf thbt for unsupportfd CiphfrSuitfs pbrsfd from b hbndshbkf
     * mfssbgf wf violbtf thf fqubls() dontrbdt.
     */
    @Ovfrridf
    publid int dompbrfTo(CiphfrSuitf o) {
        rfturn o.priority - priority;
    }

    /**
     * Rfturns this.nbmf.
     */
    @Ovfrridf
    publid String toString() {
        rfturn nbmf;
    }

    /**
     * Rfturn b CiphfrSuitf for thf givfn nbmf. Thf rfturnfd CiphfrSuitf
     * is supportfd by this implfmfntbtion but mby not bdtublly bf
     * durrfntly usfbblf. Sff isAvbilbblf().
     *
     * @fxdfption IllfgblArgumfntExdfption if thf CiphfrSuitf is unknown or
     * unsupportfd.
     */
    stbtid CiphfrSuitf vblufOf(String s) {
        if (s == null) {
            throw nfw IllfgblArgumfntExdfption("Nbmf must not bf null");
        }

        CiphfrSuitf d = nbmfMbp.gft(s);
        if ((d == null) || (d.bllowfd == fblsf)) {
            throw nfw IllfgblArgumfntExdfption("Unsupportfd diphfrsuitf " + s);
        }

        rfturn d;
    }

    /**
     * Rfturn b CiphfrSuitf with thf givfn ID. A tfmporbry objfdt is
     * donstrudtfd if thf ID is unknown. Usf isAvbilbblf() to vfrify thbt
     * thf CiphfrSuitf dbn bdtublly bf usfd.
     */
    stbtid CiphfrSuitf vblufOf(int id1, int id2) {
        id1 &= 0xff;
        id2 &= 0xff;
        int id = (id1 << 8) | id2;
        CiphfrSuitf d = idMbp.gft(id);
        if (d == null) {
            String h1 = Intfgfr.toString(id1, 16);
            String h2 = Intfgfr.toString(id2, 16);
            d = nfw CiphfrSuitf("Unknown 0x" + h1 + ":0x" + h2, id);
        }
        rfturn d;
    }

    // for usf by CiphfrSuitfList only
    stbtid Collfdtion<CiphfrSuitf> bllowfdCiphfrSuitfs() {
        rfturn nbmfMbp.vblufs();
    }

    /*
     * Usf this mfthod whfn bll of thf vblufs nffd to bf spfdififd.
     * This is primbrily usfd whfn dffining b nfw diphfrsuitf for
     * TLS 1.2+ thbt dofsn't usf thf "dffbult" PRF.
     */
    privbtf stbtid void bdd(String nbmf, int id, int priority,
            KfyExdhbngf kfyExdhbngf, BulkCiphfr diphfr,
            boolfbn bllowfd, int obsolftfd, int supportfd, PRF prf) {

        CiphfrSuitf d = nfw CiphfrSuitf(nbmf, id, priority, kfyExdhbngf,
            diphfr, bllowfd, obsolftfd, supportfd, prf);
        if (idMbp.put(id, d) != null) {
            throw nfw RuntimfExdfption("Duplidbtf diphfrsuitf dffinition: "
                                        + id + ", " + nbmf);
        }
        if (d.bllowfd) {
            if (nbmfMbp.put(nbmf, d) != null) {
                throw nfw RuntimfExdfption("Duplidbtf diphfrsuitf dffinition: "
                                            + id + ", " + nbmf);
            }
        }
    }

    /*
     * Usf this mfthod whfn thfrf is no lowfr protodol limit whfrf this
     * suitf dbn bf usfd, bnd thf PRF is P_SHA256.  Thbt is, thf
     * fxisting diphfrsuitfs.  From RFC 5246:
     *
     *     All diphfr suitfs in this dodumfnt usf P_SHA256.
     */
    privbtf stbtid void bdd(String nbmf, int id, int priority,
            KfyExdhbngf kfyExdhbngf, BulkCiphfr diphfr,
            boolfbn bllowfd, int obsolftfd) {
        // If this is bn obsolftfd suitf, thfn don't lft thf TLS 1.2
        // protodol hbvf b vblid PRF vbluf.
        PRF prf = P_SHA256;
        if (obsolftfd < ProtodolVfrsion.TLS12.v) {
            prf = P_NONE;
        }

        bdd(nbmf, id, priority, kfyExdhbngf, diphfr, bllowfd, obsolftfd,
            ProtodolVfrsion.LIMIT_MIN_VALUE, prf);
    }

    /*
     * Usf this mfthod whfn thfrf is no uppfr protodol limit.  Thbt is,
     * suitfs whidh hbvf not bffn obsolftfd.
     */
    privbtf stbtid void bdd(String nbmf, int id, int priority,
            KfyExdhbngf kfyExdhbngf, BulkCiphfr diphfr, boolfbn bllowfd) {
        bdd(nbmf, id, priority, kfyExdhbngf,
            diphfr, bllowfd, ProtodolVfrsion.LIMIT_MAX_VALUE);
    }

    /*
     * Usf this mfthod to dffinf bn unimplfmfntfd suitf.  This providfs
     * b numbfr<->nbmf mbpping thbt dbn bf usfd for dfbugging.
     */
    privbtf stbtid void bdd(String nbmf, int id) {
        CiphfrSuitf d = nfw CiphfrSuitf(nbmf, id);
        if (idMbp.put(id, d) != null) {
            throw nfw RuntimfExdfption("Duplidbtf diphfrsuitf dffinition: "
                                        + id + ", " + nbmf);
        }
    }

    /**
     * An SSL/TLS kfy fxdhbngf blgorithm.
     */
    stbtid fnum KfyExdhbngf {

        // kfy fxdhbngf blgorithms
        K_NULL       ("NULL",       fblsf),
        K_RSA        ("RSA",        truf),
        K_RSA_EXPORT ("RSA_EXPORT", truf),
        K_DH_RSA     ("DH_RSA",     fblsf),
        K_DH_DSS     ("DH_DSS",     fblsf),
        K_DHE_DSS    ("DHE_DSS",    truf),
        K_DHE_RSA    ("DHE_RSA",    truf),
        K_DH_ANON    ("DH_bnon",    truf),

        K_ECDH_ECDSA ("ECDH_ECDSA",  ALLOW_ECC),
        K_ECDH_RSA   ("ECDH_RSA",    ALLOW_ECC),
        K_ECDHE_ECDSA("ECDHE_ECDSA", ALLOW_ECC),
        K_ECDHE_RSA  ("ECDHE_RSA",   ALLOW_ECC),
        K_ECDH_ANON  ("ECDH_bnon",   ALLOW_ECC),

        // Kfrbfros diphfr suitfs
        K_KRB5       ("KRB5", truf),
        K_KRB5_EXPORT("KRB5_EXPORT", truf),

        // rfnfgotibtion protfdtion rfqufst signbling diphfr suitf
        K_SCSV       ("SCSV",        truf);

        // nbmf of thf kfy fxdhbngf blgorithm, f.g. DHE_DSS
        finbl String nbmf;
        finbl boolfbn bllowfd;
        privbtf finbl boolfbn blwbysAvbilbblf;

        KfyExdhbngf(String nbmf, boolfbn bllowfd) {
            this.nbmf = nbmf;
            this.bllowfd = bllowfd;
            this.blwbysAvbilbblf = bllowfd &&
                (!nbmf.stbrtsWith("EC")) && (!nbmf.stbrtsWith("KRB"));
        }

        boolfbn isAvbilbblf() {
            if (blwbysAvbilbblf) {
                rfturn truf;
            }

            if (nbmf.stbrtsWith("EC")) {
                rfturn (bllowfd && JssfJdf.isEdAvbilbblf());
            } flsf if (nbmf.stbrtsWith("KRB")) {
                rfturn (bllowfd && JssfJdf.isKfrbfrosAvbilbblf());
            } flsf {
                rfturn bllowfd;
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn nbmf;
        }
    }

    stbtid fnum CiphfrTypf {
        STREAM_CIPHER,         // null or strfbm diphfr
        BLOCK_CIPHER,          // blodk diphfr in CBC modf
        AEAD_CIPHER            // AEAD diphfr
    }

    /**
     * An SSL/TLS bulk diphfr blgorithm. Onf instbndf pfr dombinbtion of
     * diphfr bnd kfy lfngth.
     *
     * Also dontbins b fbdtory mfthod to obtbin in initiblizfd CiphfrBox
     * for this blgorithm.
     */
    finbl stbtid dlbss BulkCiphfr {

        // Mbp BulkCiphfr -> Boolfbn(bvbilbblf)
        privbtf finbl stbtid Mbp<BulkCiphfr,Boolfbn> bvbilbblfCbdhf =
                                            nfw HbshMbp<>(8);

        // dfsdriptivf nbmf indluding kfy sizf, f.g. AES/128
        finbl String dfsdription;

        // JCE diphfr trbnsformbtion string, f.g. AES/CBC/NoPbdding
        finbl String trbnsformbtion;

        // blgorithm nbmf, f.g. AES
        finbl String blgorithm;

        // supportfd bnd dompilf timf fnbblfd. Also sff isAvbilbblf()
        finbl boolfbn bllowfd;

        // numbfr of bytfs of fntropy in thf kfy
        finbl int kfySizf;

        // lfngth of thf bdtubl diphfr kfy in bytfs.
        // for non-fxportbblf diphfrs, this is thf sbmf bs kfySizf
        finbl int fxpbndfdKfySizf;

        // sizf of thf IV
        finbl int ivSizf;

        // sizf of fixfd IV
        //
        // rfdord_iv_lfngth = ivSizf - fixfdIvSizf
        finbl int fixfdIvSizf;

        // fxportbblf undfr 512/40 bit rulfs
        finbl boolfbn fxportbblf;

        // Is thf diphfr blgorithm of Ciphfr Blodk Chbining (CBC) modf?
        finbl CiphfrTypf diphfrTypf;

        // sizf of thf buthfntidbtion tbg, only bpplidbblf to diphfr suitfs in
        // Gblois Countfr Modf (GCM)
        //
        // As fbr bs wf know, bll supportfd GCM diphfr suitfs usf 128-bits
        // buthfntidbtion tbgs.
        finbl int tbgSizf = 16;

        // Thf sfdurf rbndom usfd to dftfdt thf diphfr bvbilbbility.
        privbtf finbl stbtid SfdurfRbndom sfdurfRbndom;

        stbtid {
            try {
                sfdurfRbndom = JssfJdf.gftSfdurfRbndom();
            } dbtdh (KfyMbnbgfmfntExdfption kmf) {
                throw nfw RuntimfExdfption(kmf);
            }
        }

        BulkCiphfr(String trbnsformbtion, CiphfrTypf diphfrTypf, int kfySizf,
                int fxpbndfdKfySizf, int ivSizf,
                int fixfdIvSizf, boolfbn bllowfd) {

            this.trbnsformbtion = trbnsformbtion;
            String[] splits = trbnsformbtion.split("/");
            this.blgorithm = splits[0];
            this.diphfrTypf = diphfrTypf;
            this.dfsdription = this.blgorithm + "/" + (kfySizf << 3);
            this.kfySizf = kfySizf;
            this.ivSizf = ivSizf;
            this.fixfdIvSizf = fixfdIvSizf;
            this.bllowfd = bllowfd;

            this.fxpbndfdKfySizf = fxpbndfdKfySizf;
            this.fxportbblf = truf;
        }

        BulkCiphfr(String trbnsformbtion, CiphfrTypf diphfrTypf, int kfySizf,
                int ivSizf, int fixfdIvSizf, boolfbn bllowfd) {
            this.trbnsformbtion = trbnsformbtion;
            String[] splits = trbnsformbtion.split("/");
            this.blgorithm = splits[0];
            this.diphfrTypf = diphfrTypf;
            this.dfsdription = this.blgorithm + "/" + (kfySizf << 3);
            this.kfySizf = kfySizf;
            this.ivSizf = ivSizf;
            this.fixfdIvSizf = fixfdIvSizf;
            this.bllowfd = bllowfd;

            this.fxpbndfdKfySizf = kfySizf;
            this.fxportbblf = fblsf;
        }

        /**
         * Rfturn bn initiblizfd CiphfrBox for this BulkCiphfr.
         * IV must bf null for strfbm diphfrs.
         *
         * @fxdfption NoSudhAlgorithmExdfption if bnything gofs wrong
         */
        CiphfrBox nfwCiphfr(ProtodolVfrsion vfrsion, SfdrftKfy kfy,
                IvPbrbmftfrSpfd iv, SfdurfRbndom rbndom,
                boolfbn fndrypt) throws NoSudhAlgorithmExdfption {
            rfturn CiphfrBox.nfwCiphfrBox(vfrsion, this,
                                            kfy, iv, rbndom, fndrypt);
        }

        /**
         * Tfst if this bulk diphfr is bvbilbblf. For usf by CiphfrSuitf.
         *
         * Currfntly bll supportfd diphfrs fxdfpt AES brf blwbys bvbilbblf
         * vib thf JSSE intfrnbl implfmfntbtions. Wf blso bssumf AES/128 of
         * CBC modf is blwbys bvbilbblf sindf it is shippfd with thf SunJCE
         * providfr.  Howfvfr, AES/256 is unbvbilbblf whfn thf dffbult JCE
         * polidy jurisdidtion filfs brf instbllfd bfdbusf of kfy lfngth
         * rfstridtions, bnd AEAD is unbvbilbblf whfn thf undfrlying providfrs
         * do not support AEAD/GCM modf.
         */
        boolfbn isAvbilbblf() {
            if (bllowfd == fblsf) {
                rfturn fblsf;
            }

            if ((this == B_AES_256) ||
                    (this.diphfrTypf == CiphfrTypf.AEAD_CIPHER)) {
                rfturn isAvbilbblf(this);
            }

            // blwbys bvbilbblf
            rfturn truf;
        }

        // for usf by CiphfrSuitfList.dlfbrAvbilbblfCbdhf();
        stbtid syndhronizfd void dlfbrAvbilbblfCbdhf() {
            if (DYNAMIC_AVAILABILITY) {
                bvbilbblfCbdhf.dlfbr();
            }
        }

        privbtf stbtid syndhronizfd boolfbn isAvbilbblf(BulkCiphfr diphfr) {
            Boolfbn b = bvbilbblfCbdhf.gft(diphfr);
            if (b == null) {
                int kfySizfInBits = diphfr.kfySizf * 8;
                if (kfySizfInBits > 128) {    // nffd thf JCE unlimitfd
                                               // strfngth jurisdidtion polidy
                    try {
                        if (Ciphfr.gftMbxAllowfdKfyLfngth(
                                diphfr.trbnsformbtion) < kfySizfInBits) {
                            b = Boolfbn.FALSE;
                        }
                    } dbtdh (Exdfption f) {
                        b = Boolfbn.FALSE;
                    }
                }

                if (b == null) {
                    b = Boolfbn.FALSE;          // mby bf rfsft to TRUE if
                                                // thf diphfr is bvbilbblf
                    CiphfrBox tfmporbry = null;
                    try {
                        SfdrftKfy kfy = nfw SfdrftKfySpfd(
                                            nfw bytf[diphfr.fxpbndfdKfySizf],
                                            diphfr.blgorithm);
                        IvPbrbmftfrSpfd iv;
                        if (diphfr.diphfrTypf == CiphfrTypf.AEAD_CIPHER) {
                            iv = nfw IvPbrbmftfrSpfd(
                                            nfw bytf[diphfr.fixfdIvSizf]);
                        } flsf {
                            iv = nfw IvPbrbmftfrSpfd(nfw bytf[diphfr.ivSizf]);
                        }
                        tfmporbry = diphfr.nfwCiphfr(
                                            ProtodolVfrsion.DEFAULT,
                                            kfy, iv, sfdurfRbndom, truf);
                        b = tfmporbry.isAvbilbblf();
                    } dbtdh (NoSudhAlgorithmExdfption f) {
                        // not bvbilbblf
                    } finblly {
                        if (tfmporbry != null) {
                            tfmporbry.disposf();
                        }
                    }
                }

                bvbilbblfCbdhf.put(diphfr, b);
            }

            rfturn b.boolfbnVbluf();
        }

        @Ovfrridf
        publid String toString() {
            rfturn dfsdription;
        }
    }

    /**
     * An SSL/TLS kfy MAC blgorithm.
     *
     * Also dontbins b fbdtory mfthod to obtbin bn initiblizfd MAC
     * for this blgorithm.
     */
    finbl stbtid dlbss MbdAlg {

        // dfsdriptivf nbmf, f.g. MD5
        finbl String nbmf;

        // sizf of thf MAC vbluf (bnd MAC kfy) in bytfs
        finbl int sizf;

        // blodk sizf of thf undfrlying hbsh blgorithm
        finbl int hbshBlodkSizf;

        // minimbl pbdding sizf of thf undfrlying hbsh blgorithm
        finbl int minimblPbddingSizf;

        MbdAlg(String nbmf, int sizf,
                int hbshBlodkSizf, int minimblPbddingSizf) {
            this.nbmf = nbmf;
            this.sizf = sizf;
            this.hbshBlodkSizf = hbshBlodkSizf;
            this.minimblPbddingSizf = minimblPbddingSizf;
        }

        /**
         * Rfturn bn initiblizfd MAC for this MbdAlg. ProtodolVfrsion
         * must fithfr bf SSL30 (SSLv3 dustom MAC) or TLS10 (std. HMAC).
         *
         * @fxdfption NoSudhAlgorithmExdfption if bnything gofs wrong
         */
        MAC nfwMbd(ProtodolVfrsion protodolVfrsion, SfdrftKfy sfdrft)
                throws NoSudhAlgorithmExdfption, InvblidKfyExdfption {
            rfturn nfw MAC(this, protodolVfrsion, sfdrft);
        }

        @Ovfrridf
        publid String toString() {
            rfturn nbmf;
        }
    }

    // fxport strfngth diphfrs
    finbl stbtid BulkCiphfr B_NULL    =
        nfw BulkCiphfr("NULL",          STREAM_CIPHER,    0,  0,  0, 0, truf);
    finbl stbtid BulkCiphfr B_RC4_40  =
        nfw BulkCiphfr(CIPHER_RC4,      STREAM_CIPHER,    5, 16,  0, 0, truf);
    finbl stbtid BulkCiphfr B_RC2_40  =
        nfw BulkCiphfr("RC2",           BLOCK_CIPHER,     5, 16,  8, 0, fblsf);
    finbl stbtid BulkCiphfr B_DES_40  =
        nfw BulkCiphfr(CIPHER_DES,      BLOCK_CIPHER,     5,  8,  8, 0, truf);

    // domfstid strfngth diphfrs
    finbl stbtid BulkCiphfr B_RC4_128 =
        nfw BulkCiphfr(CIPHER_RC4,      STREAM_CIPHER,   16,  0,  0, truf);
    finbl stbtid BulkCiphfr B_DES     =
        nfw BulkCiphfr(CIPHER_DES,      BLOCK_CIPHER,     8,  8,  0, truf);
    finbl stbtid BulkCiphfr B_3DES    =
        nfw BulkCiphfr(CIPHER_3DES,     BLOCK_CIPHER,    24,  8,  0, truf);
    finbl stbtid BulkCiphfr B_IDEA    =
        nfw BulkCiphfr("IDEA",          BLOCK_CIPHER,    16,  8,  0, fblsf);
    finbl stbtid BulkCiphfr B_AES_128 =
        nfw BulkCiphfr(CIPHER_AES,      BLOCK_CIPHER,    16, 16,  0, truf);
    finbl stbtid BulkCiphfr B_AES_256 =
        nfw BulkCiphfr(CIPHER_AES,      BLOCK_CIPHER,    32, 16,  0, truf);
    finbl stbtid BulkCiphfr B_AES_128_GCM =
        nfw BulkCiphfr(CIPHER_AES_GCM,  AEAD_CIPHER,     16, 12,  4, truf);
    finbl stbtid BulkCiphfr B_AES_256_GCM =
        nfw BulkCiphfr(CIPHER_AES_GCM,  AEAD_CIPHER,     32, 12,  4, truf);

    // MACs
    finbl stbtid MbdAlg M_NULL    = nfw MbdAlg("NULL",     0,   0,   0);
    finbl stbtid MbdAlg M_MD5     = nfw MbdAlg("MD5",     16,  64,   9);
    finbl stbtid MbdAlg M_SHA     = nfw MbdAlg("SHA",     20,  64,   9);
    finbl stbtid MbdAlg M_SHA256  = nfw MbdAlg("SHA256",  32,  64,   9);
    finbl stbtid MbdAlg M_SHA384  = nfw MbdAlg("SHA384",  48, 128,  17);

    /**
     * PRFs (PsfudoRbndom Fundtion) from TLS spfdifidbtions.
     *
     * TLS 1.1- usfs b singlf MD5/SHA1-bbsfd PRF blgorithm for gfnfrbting
     * thf nfdfssbry mbtfribl.
     *
     * In TLS 1.2+, bll fxisting/known CiphfrSuitfs usf SHA256, howfvfr
     * nfw Ciphfrsuitfs (f.g. RFC 5288) dbn dffinf spfdifid PRF hbsh
     * blgorithms.
     */
    stbtid fnum PRF {

        // PRF blgorithms
        P_NONE(     "NONE",  0,   0),
        P_SHA256("SHA-256", 32,  64),
        P_SHA384("SHA-384", 48, 128),
        P_SHA512("SHA-512", 64, 128);  // not durrfntly usfd.

        // PRF dhbrbdtfristids
        privbtf finbl String prfHbshAlg;
        privbtf finbl int prfHbshLfngth;
        privbtf finbl int prfBlodkSizf;

        PRF(String prfHbshAlg, int prfHbshLfngth, int prfBlodkSizf) {
            this.prfHbshAlg = prfHbshAlg;
            this.prfHbshLfngth = prfHbshLfngth;
            this.prfBlodkSizf = prfBlodkSizf;
        }

        String gftPRFHbshAlg() {
            rfturn prfHbshAlg;
        }

        int gftPRFHbshLfngth() {
            rfturn prfHbshLfngth;
        }

        int gftPRFBlodkSizf() {
            rfturn prfBlodkSizf;
        }
    }

    stbtid {
        idMbp = nfw HbshMbp<Intfgfr,CiphfrSuitf>();
        nbmfMbp = nfw HbshMbp<String,CiphfrSuitf>();

        finbl boolfbn F = fblsf;
        finbl boolfbn T = truf;
        // N: diphfrsuitfs only bllowfd if wf brf not in FIPS modf
        finbl boolfbn N = (SunJSSE.isFIPS() == fblsf);

        /*
         * TLS Ciphfr Suitf Rfgistry, bs of August 2010.
         *
         * http://www.ibnb.org/bssignmfnts/tls-pbrbmftfrs/tls-pbrbmftfrs.xml
         *
         * Rbngf      Rfgistrbtion Prodfdurfs   Notfs
         * 000-191    Stbndbrds Adtion          Rfffrs to vbluf of first bytf
         * 192-254    Spfdifidbtion Rfquirfd    Rfffrs to vbluf of first bytf
         * 255        Rfsfrvfd for Privbtf Usf  Rfffrs to vbluf of first bytf
         *
         * Vbluf      Dfsdription                               Rfffrfndf
         * 0x00,0x00  TLS_NULL_WITH_NULL_NULL                   [RFC5246]
         * 0x00,0x01  TLS_RSA_WITH_NULL_MD5                     [RFC5246]
         * 0x00,0x02  TLS_RSA_WITH_NULL_SHA                     [RFC5246]
         * 0x00,0x03  TLS_RSA_EXPORT_WITH_RC4_40_MD5            [RFC4346]
         * 0x00,0x04  TLS_RSA_WITH_RC4_128_MD5                  [RFC5246]
         * 0x00,0x05  TLS_RSA_WITH_RC4_128_SHA                  [RFC5246]
         * 0x00,0x06  TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5        [RFC4346]
         * 0x00,0x07  TLS_RSA_WITH_IDEA_CBC_SHA                 [RFC5469]
         * 0x00,0x08  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA         [RFC4346]
         * 0x00,0x09  TLS_RSA_WITH_DES_CBC_SHA                  [RFC5469]
         * 0x00,0x0A  TLS_RSA_WITH_3DES_EDE_CBC_SHA             [RFC5246]
         * 0x00,0x0B  TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA      [RFC4346]
         * 0x00,0x0C  TLS_DH_DSS_WITH_DES_CBC_SHA               [RFC5469]
         * 0x00,0x0D  TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA          [RFC5246]
         * 0x00,0x0E  TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA      [RFC4346]
         * 0x00,0x0F  TLS_DH_RSA_WITH_DES_CBC_SHA               [RFC5469]
         * 0x00,0x10  TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA          [RFC5246]
         * 0x00,0x11  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA     [RFC4346]
         * 0x00,0x12  TLS_DHE_DSS_WITH_DES_CBC_SHA              [RFC5469]
         * 0x00,0x13  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA         [RFC5246]
         * 0x00,0x14  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA     [RFC4346]
         * 0x00,0x15  TLS_DHE_RSA_WITH_DES_CBC_SHA              [RFC5469]
         * 0x00,0x16  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA         [RFC5246]
         * 0x00,0x17  TLS_DH_bnon_EXPORT_WITH_RC4_40_MD5        [RFC4346]
         * 0x00,0x18  TLS_DH_bnon_WITH_RC4_128_MD5              [RFC5246]
         * 0x00,0x19  TLS_DH_bnon_EXPORT_WITH_DES40_CBC_SHA     [RFC4346]
         * 0x00,0x1A  TLS_DH_bnon_WITH_DES_CBC_SHA              [RFC5469]
         * 0x00,0x1B  TLS_DH_bnon_WITH_3DES_EDE_CBC_SHA         [RFC5246]
         * 0x00,0x1C-1D Rfsfrvfd to bvoid donflidts with SSLv3  [RFC5246]
         * 0x00,0x1E  TLS_KRB5_WITH_DES_CBC_SHA                 [RFC2712]
         * 0x00,0x1F  TLS_KRB5_WITH_3DES_EDE_CBC_SHA            [RFC2712]
         * 0x00,0x20  TLS_KRB5_WITH_RC4_128_SHA                 [RFC2712]
         * 0x00,0x21  TLS_KRB5_WITH_IDEA_CBC_SHA                [RFC2712]
         * 0x00,0x22  TLS_KRB5_WITH_DES_CBC_MD5                 [RFC2712]
         * 0x00,0x23  TLS_KRB5_WITH_3DES_EDE_CBC_MD5            [RFC2712]
         * 0x00,0x24  TLS_KRB5_WITH_RC4_128_MD5                 [RFC2712]
         * 0x00,0x25  TLS_KRB5_WITH_IDEA_CBC_MD5                [RFC2712]
         * 0x00,0x26  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA       [RFC2712]
         * 0x00,0x27  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA       [RFC2712]
         * 0x00,0x28  TLS_KRB5_EXPORT_WITH_RC4_40_SHA           [RFC2712]
         * 0x00,0x29  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5       [RFC2712]
         * 0x00,0x2A  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5       [RFC2712]
         * 0x00,0x2B  TLS_KRB5_EXPORT_WITH_RC4_40_MD5           [RFC2712]
         * 0x00,0x2C  TLS_PSK_WITH_NULL_SHA                     [RFC4785]
         * 0x00,0x2D  TLS_DHE_PSK_WITH_NULL_SHA                 [RFC4785]
         * 0x00,0x2E  TLS_RSA_PSK_WITH_NULL_SHA                 [RFC4785]
         * 0x00,0x2F  TLS_RSA_WITH_AES_128_CBC_SHA              [RFC5246]
         * 0x00,0x30  TLS_DH_DSS_WITH_AES_128_CBC_SHA           [RFC5246]
         * 0x00,0x31  TLS_DH_RSA_WITH_AES_128_CBC_SHA           [RFC5246]
         * 0x00,0x32  TLS_DHE_DSS_WITH_AES_128_CBC_SHA          [RFC5246]
         * 0x00,0x33  TLS_DHE_RSA_WITH_AES_128_CBC_SHA          [RFC5246]
         * 0x00,0x34  TLS_DH_bnon_WITH_AES_128_CBC_SHA          [RFC5246]
         * 0x00,0x35  TLS_RSA_WITH_AES_256_CBC_SHA              [RFC5246]
         * 0x00,0x36  TLS_DH_DSS_WITH_AES_256_CBC_SHA           [RFC5246]
         * 0x00,0x37  TLS_DH_RSA_WITH_AES_256_CBC_SHA           [RFC5246]
         * 0x00,0x38  TLS_DHE_DSS_WITH_AES_256_CBC_SHA          [RFC5246]
         * 0x00,0x39  TLS_DHE_RSA_WITH_AES_256_CBC_SHA          [RFC5246]
         * 0x00,0x3A  TLS_DH_bnon_WITH_AES_256_CBC_SHA          [RFC5246]
         * 0x00,0x3B  TLS_RSA_WITH_NULL_SHA256                  [RFC5246]
         * 0x00,0x3C  TLS_RSA_WITH_AES_128_CBC_SHA256           [RFC5246]
         * 0x00,0x3D  TLS_RSA_WITH_AES_256_CBC_SHA256           [RFC5246]
         * 0x00,0x3E  TLS_DH_DSS_WITH_AES_128_CBC_SHA256        [RFC5246]
         * 0x00,0x3F  TLS_DH_RSA_WITH_AES_128_CBC_SHA256        [RFC5246]
         * 0x00,0x40  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256       [RFC5246]
         * 0x00,0x41  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA         [RFC5932]
         * 0x00,0x42  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA      [RFC5932]
         * 0x00,0x43  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA      [RFC5932]
         * 0x00,0x44  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA     [RFC5932]
         * 0x00,0x45  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA     [RFC5932]
         * 0x00,0x46  TLS_DH_bnon_WITH_CAMELLIA_128_CBC_SHA     [RFC5932]
         * 0x00,0x47-4F Rfsfrvfd to bvoid donflidts with
         *            dfployfd implfmfntbtions                  [Pbsi_Eronfn]
         * 0x00,0x50-58 Rfsfrvfd to bvoid donflidts             [Pbsi Eronfn]
         * 0x00,0x59-5C Rfsfrvfd to bvoid donflidts with
         *            dfployfd implfmfntbtions                  [Pbsi_Eronfn]
         * 0x00,0x5D-5F Unbssignfd
         * 0x00,0x60-66 Rfsfrvfd to bvoid donflidts with widfly
         *            dfployfd implfmfntbtions                  [Pbsi_Eronfn]
         * 0x00,0x67  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256       [RFC5246]
         * 0x00,0x68  TLS_DH_DSS_WITH_AES_256_CBC_SHA256        [RFC5246]
         * 0x00,0x69  TLS_DH_RSA_WITH_AES_256_CBC_SHA256        [RFC5246]
         * 0x00,0x6A  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256       [RFC5246]
         * 0x00,0x6B  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256       [RFC5246]
         * 0x00,0x6C  TLS_DH_bnon_WITH_AES_128_CBC_SHA256       [RFC5246]
         * 0x00,0x6D  TLS_DH_bnon_WITH_AES_256_CBC_SHA256       [RFC5246]
         * 0x00,0x6E-83 Unbssignfd
         * 0x00,0x84  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA         [RFC5932]
         * 0x00,0x85  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA      [RFC5932]
         * 0x00,0x86  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA      [RFC5932]
         * 0x00,0x87  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA     [RFC5932]
         * 0x00,0x88  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA     [RFC5932]
         * 0x00,0x89  TLS_DH_bnon_WITH_CAMELLIA_256_CBC_SHA     [RFC5932]
         * 0x00,0x8A  TLS_PSK_WITH_RC4_128_SHA                  [RFC4279]
         * 0x00,0x8B  TLS_PSK_WITH_3DES_EDE_CBC_SHA             [RFC4279]
         * 0x00,0x8C  TLS_PSK_WITH_AES_128_CBC_SHA              [RFC4279]
         * 0x00,0x8D  TLS_PSK_WITH_AES_256_CBC_SHA              [RFC4279]
         * 0x00,0x8E  TLS_DHE_PSK_WITH_RC4_128_SHA              [RFC4279]
         * 0x00,0x8F  TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA         [RFC4279]
         * 0x00,0x90  TLS_DHE_PSK_WITH_AES_128_CBC_SHA          [RFC4279]
         * 0x00,0x91  TLS_DHE_PSK_WITH_AES_256_CBC_SHA          [RFC4279]
         * 0x00,0x92  TLS_RSA_PSK_WITH_RC4_128_SHA              [RFC4279]
         * 0x00,0x93  TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA         [RFC4279]
         * 0x00,0x94  TLS_RSA_PSK_WITH_AES_128_CBC_SHA          [RFC4279]
         * 0x00,0x95  TLS_RSA_PSK_WITH_AES_256_CBC_SHA          [RFC4279]
         * 0x00,0x96  TLS_RSA_WITH_SEED_CBC_SHA                 [RFC4162]
         * 0x00,0x97  TLS_DH_DSS_WITH_SEED_CBC_SHA              [RFC4162]
         * 0x00,0x98  TLS_DH_RSA_WITH_SEED_CBC_SHA              [RFC4162]
         * 0x00,0x99  TLS_DHE_DSS_WITH_SEED_CBC_SHA             [RFC4162]
         * 0x00,0x9A  TLS_DHE_RSA_WITH_SEED_CBC_SHA             [RFC4162]
         * 0x00,0x9B  TLS_DH_bnon_WITH_SEED_CBC_SHA             [RFC4162]
         * 0x00,0x9C  TLS_RSA_WITH_AES_128_GCM_SHA256           [RFC5288]
         * 0x00,0x9D  TLS_RSA_WITH_AES_256_GCM_SHA384           [RFC5288]
         * 0x00,0x9E  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256       [RFC5288]
         * 0x00,0x9F  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384       [RFC5288]
         * 0x00,0xA0  TLS_DH_RSA_WITH_AES_128_GCM_SHA256        [RFC5288]
         * 0x00,0xA1  TLS_DH_RSA_WITH_AES_256_GCM_SHA384        [RFC5288]
         * 0x00,0xA2  TLS_DHE_DSS_WITH_AES_128_GCM_SHA256       [RFC5288]
         * 0x00,0xA3  TLS_DHE_DSS_WITH_AES_256_GCM_SHA384       [RFC5288]
         * 0x00,0xA4  TLS_DH_DSS_WITH_AES_128_GCM_SHA256        [RFC5288]
         * 0x00,0xA5  TLS_DH_DSS_WITH_AES_256_GCM_SHA384        [RFC5288]
         * 0x00,0xA6  TLS_DH_bnon_WITH_AES_128_GCM_SHA256       [RFC5288]
         * 0x00,0xA7  TLS_DH_bnon_WITH_AES_256_GCM_SHA384       [RFC5288]
         * 0x00,0xA8  TLS_PSK_WITH_AES_128_GCM_SHA256           [RFC5487]
         * 0x00,0xA9  TLS_PSK_WITH_AES_256_GCM_SHA384           [RFC5487]
         * 0x00,0xAA  TLS_DHE_PSK_WITH_AES_128_GCM_SHA256       [RFC5487]
         * 0x00,0xAB  TLS_DHE_PSK_WITH_AES_256_GCM_SHA384       [RFC5487]
         * 0x00,0xAC  TLS_RSA_PSK_WITH_AES_128_GCM_SHA256       [RFC5487]
         * 0x00,0xAD  TLS_RSA_PSK_WITH_AES_256_GCM_SHA384       [RFC5487]
         * 0x00,0xAE  TLS_PSK_WITH_AES_128_CBC_SHA256           [RFC5487]
         * 0x00,0xAF  TLS_PSK_WITH_AES_256_CBC_SHA384           [RFC5487]
         * 0x00,0xB0  TLS_PSK_WITH_NULL_SHA256                  [RFC5487]
         * 0x00,0xB1  TLS_PSK_WITH_NULL_SHA384                  [RFC5487]
         * 0x00,0xB2  TLS_DHE_PSK_WITH_AES_128_CBC_SHA256       [RFC5487]
         * 0x00,0xB3  TLS_DHE_PSK_WITH_AES_256_CBC_SHA384       [RFC5487]
         * 0x00,0xB4  TLS_DHE_PSK_WITH_NULL_SHA256              [RFC5487]
         * 0x00,0xB5  TLS_DHE_PSK_WITH_NULL_SHA384              [RFC5487]
         * 0x00,0xB6  TLS_RSA_PSK_WITH_AES_128_CBC_SHA256       [RFC5487]
         * 0x00,0xB7  TLS_RSA_PSK_WITH_AES_256_CBC_SHA384       [RFC5487]
         * 0x00,0xB8  TLS_RSA_PSK_WITH_NULL_SHA256              [RFC5487]
         * 0x00,0xB9  TLS_RSA_PSK_WITH_NULL_SHA384              [RFC5487]
         * 0x00,0xBA  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256      [RFC5932]
         * 0x00,0xBB  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256   [RFC5932]
         * 0x00,0xBC  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256   [RFC5932]
         * 0x00,0xBD  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256  [RFC5932]
         * 0x00,0xBE  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256  [RFC5932]
         * 0x00,0xBF  TLS_DH_bnon_WITH_CAMELLIA_128_CBC_SHA256  [RFC5932]
         * 0x00,0xC0  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256      [RFC5932]
         * 0x00,0xC1  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256   [RFC5932]
         * 0x00,0xC2  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256   [RFC5932]
         * 0x00,0xC3  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256  [RFC5932]
         * 0x00,0xC4  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256  [RFC5932]
         * 0x00,0xC5  TLS_DH_bnon_WITH_CAMELLIA_256_CBC_SHA256  [RFC5932]
         * 0x00,0xC6-FE         Unbssignfd
         * 0x00,0xFF  TLS_EMPTY_RENEGOTIATION_INFO_SCSV         [RFC5746]
         * 0x01-BF,*  Unbssignfd
         * 0xC0,0x01  TLS_ECDH_ECDSA_WITH_NULL_SHA              [RFC4492]
         * 0xC0,0x02  TLS_ECDH_ECDSA_WITH_RC4_128_SHA           [RFC4492]
         * 0xC0,0x03  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA      [RFC4492]
         * 0xC0,0x04  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA       [RFC4492]
         * 0xC0,0x05  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA       [RFC4492]
         * 0xC0,0x06  TLS_ECDHE_ECDSA_WITH_NULL_SHA             [RFC4492]
         * 0xC0,0x07  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA          [RFC4492]
         * 0xC0,0x08  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA     [RFC4492]
         * 0xC0,0x09  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA      [RFC4492]
         * 0xC0,0x0A  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA      [RFC4492]
         * 0xC0,0x0B  TLS_ECDH_RSA_WITH_NULL_SHA                [RFC4492]
         * 0xC0,0x0C  TLS_ECDH_RSA_WITH_RC4_128_SHA             [RFC4492]
         * 0xC0,0x0D  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA        [RFC4492]
         * 0xC0,0x0E  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA         [RFC4492]
         * 0xC0,0x0F  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA         [RFC4492]
         * 0xC0,0x10  TLS_ECDHE_RSA_WITH_NULL_SHA               [RFC4492]
         * 0xC0,0x11  TLS_ECDHE_RSA_WITH_RC4_128_SHA            [RFC4492]
         * 0xC0,0x12  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA       [RFC4492]
         * 0xC0,0x13  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA        [RFC4492]
         * 0xC0,0x14  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA        [RFC4492]
         * 0xC0,0x15  TLS_ECDH_bnon_WITH_NULL_SHA               [RFC4492]
         * 0xC0,0x16  TLS_ECDH_bnon_WITH_RC4_128_SHA            [RFC4492]
         * 0xC0,0x17  TLS_ECDH_bnon_WITH_3DES_EDE_CBC_SHA       [RFC4492]
         * 0xC0,0x18  TLS_ECDH_bnon_WITH_AES_128_CBC_SHA        [RFC4492]
         * 0xC0,0x19  TLS_ECDH_bnon_WITH_AES_256_CBC_SHA        [RFC4492]
         * 0xC0,0x1A  TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA         [RFC5054]
         * 0xC0,0x1B  TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA     [RFC5054]
         * 0xC0,0x1C  TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA     [RFC5054]
         * 0xC0,0x1D  TLS_SRP_SHA_WITH_AES_128_CBC_SHA          [RFC5054]
         * 0xC0,0x1E  TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA      [RFC5054]
         * 0xC0,0x1F  TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA      [RFC5054]
         * 0xC0,0x20  TLS_SRP_SHA_WITH_AES_256_CBC_SHA          [RFC5054]
         * 0xC0,0x21  TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA      [RFC5054]
         * 0xC0,0x22  TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA      [RFC5054]
         * 0xC0,0x23  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256   [RFC5289]
         * 0xC0,0x24  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384   [RFC5289]
         * 0xC0,0x25  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256    [RFC5289]
         * 0xC0,0x26  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384    [RFC5289]
         * 0xC0,0x27  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256     [RFC5289]
         * 0xC0,0x28  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384     [RFC5289]
         * 0xC0,0x29  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256      [RFC5289]
         * 0xC0,0x2A  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384      [RFC5289]
         * 0xC0,0x2B  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256   [RFC5289]
         * 0xC0,0x2C  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384   [RFC5289]
         * 0xC0,0x2D  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256    [RFC5289]
         * 0xC0,0x2E  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384    [RFC5289]
         * 0xC0,0x2F  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256     [RFC5289]
         * 0xC0,0x30  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384     [RFC5289]
         * 0xC0,0x31  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256      [RFC5289]
         * 0xC0,0x32  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384      [RFC5289]
         * 0xC0,0x33  TLS_ECDHE_PSK_WITH_RC4_128_SHA            [RFC5489]
         * 0xC0,0x34  TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA       [RFC5489]
         * 0xC0,0x35  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA        [RFC5489]
         * 0xC0,0x36  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA        [RFC5489]
         * 0xC0,0x37  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256     [RFC5489]
         * 0xC0,0x38  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384     [RFC5489]
         * 0xC0,0x39  TLS_ECDHE_PSK_WITH_NULL_SHA               [RFC5489]
         * 0xC0,0x3A  TLS_ECDHE_PSK_WITH_NULL_SHA256            [RFC5489]
         * 0xC0,0x3B  TLS_ECDHE_PSK_WITH_NULL_SHA384            [RFC5489]
         * 0xC0,0x3C-FF Unbssignfd
         * 0xC1-FD,*  Unbssignfd
         * 0xFE,0x00-FD Unbssignfd
         * 0xFE,0xFE-FF Rfsfrvfd to bvoid donflidts with widfly
         *            dfployfd implfmfntbtions                  [Pbsi_Eronfn]
         * 0xFF,0x00-FF Rfsfrvfd for Privbtf Usf                [RFC5246]
         */

        bdd("SSL_NULL_WITH_NULL_NULL",
                              0x0000,   1, K_NULL,       B_NULL,    F);

        /*
         * Dffinition of thf CiphfrSuitfs thbt brf fnbblfd by dffbult.
         * Thfy brf listfd in prfffrfndf ordfr, most prfffrrfd first, using
         * thf following dritfrib:
         * 1. Prfffr Suitf B domplibnt diphfr suitfs, sff RFC6460 (To bf
         *    dhbngfd lbtfr, sff bflow).
         * 2. Prfffr thf strongfr bulk diphfr, in thf ordfr of AES_256(GCM),
         *    AES_128(GCM), AES_256, AES_128, RC-4, 3DES-EDE.
         * 3. Prfffr thf strongfr MAC blgorithm, in thf ordfr of SHA384,
         *    SHA256, SHA, MD5.
         * 4. Prfffr thf bfttfr pfrformbndf of kfy fxdhbngf bnd digitbl
         *    signbturf blgorithm, in thf ordfr of ECDHE-ECDSA, ECDHE-RSA,
         *    RSA, ECDH-ECDSA, ECDH-RSA, DHE-RSA, DHE-DSS.
         */
        int p = DEFAULT_SUITES_PRIORITY * 2;

        // shortfn nbmfs to fit thf following tbblf dlfbnly.
        int mbx = ProtodolVfrsion.LIMIT_MAX_VALUE;
        int tls11 = ProtodolVfrsion.TLS11.v;
        int tls12 = ProtodolVfrsion.TLS12.v;

        //  ID           Kfy Exdhbngf   Ciphfr     A  obs  suprt  PRF
        //  ======       ============   =========  =  ===  =====  ========

        // Suitf B domplibnt diphfr suitfs, sff RFC 6460.
        //
        // Notf thbt, bt prfsfnt this providfr is not Suitf B domplibnt. Thf
        // prfffrfndf ordfr of thf GCM diphfr suitfs dofs not follow thf spfd
        // of RFC 6460.  In this sfdtion, only two diphfr suitfs brf listfd
        // so thbt bpplidbtions dbn mbkf usf of Suitf-B domplibnt diphfr
        // suitf firstly.
        bdd("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
            0xd02d, --p, K_ECDHE_ECDSA, B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
            0xd02b, --p, K_ECDHE_ECDSA, B_AES_128_GCM, T, mbx, tls12, P_SHA256);

        // AES_256(GCM)
        bdd("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
            0xd030, --p, K_ECDHE_RSA,   B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_RSA_WITH_AES_256_GCM_SHA384",
            0x009d, --p, K_RSA,         B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
            0xd02f, --p, K_ECDH_ECDSA,  B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
            0xd032, --p, K_ECDH_RSA,    B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
            0x009f, --p, K_DHE_RSA,     B_AES_256_GCM, T, mbx, tls12, P_SHA384);
        bdd("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
            0x00b3, --p, K_DHE_DSS,     B_AES_256_GCM, T, mbx, tls12, P_SHA384);

        // AES_128(GCM)
        bdd("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
            0xd02f, --p, K_ECDHE_RSA,   B_AES_128_GCM, T, mbx, tls12, P_SHA256);
        bdd("TLS_RSA_WITH_AES_128_GCM_SHA256",
            0x009d, --p, K_RSA,         B_AES_128_GCM, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
            0xd02d, --p, K_ECDH_ECDSA,  B_AES_128_GCM, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
            0xd031, --p, K_ECDH_RSA,    B_AES_128_GCM, T, mbx, tls12, P_SHA256);
        bdd("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
            0x009f, --p, K_DHE_RSA,     B_AES_128_GCM, T, mbx, tls12, P_SHA256);
        bdd("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
            0x00b2, --p, K_DHE_DSS,     B_AES_128_GCM, T, mbx, tls12, P_SHA256);

        // AES_256(CBC)
        bdd("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
            0xd024, --p, K_ECDHE_ECDSA, B_AES_256, T, mbx, tls12, P_SHA384);
        bdd("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
            0xd028, --p, K_ECDHE_RSA,   B_AES_256, T, mbx, tls12, P_SHA384);
        bdd("TLS_RSA_WITH_AES_256_CBC_SHA256",
            0x003d, --p, K_RSA,         B_AES_256, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
            0xd026, --p, K_ECDH_ECDSA,  B_AES_256, T, mbx, tls12, P_SHA384);
        bdd("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
            0xd02b, --p, K_ECDH_RSA,    B_AES_256, T, mbx, tls12, P_SHA384);
        bdd("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
            0x006b, --p, K_DHE_RSA,     B_AES_256, T, mbx, tls12, P_SHA256);
        bdd("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
            0x006b, --p, K_DHE_DSS,     B_AES_256, T, mbx, tls12, P_SHA256);

        bdd("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
            0xC00A, --p, K_ECDHE_ECDSA, B_AES_256, T);
        bdd("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
            0xC014, --p, K_ECDHE_RSA,   B_AES_256, T);
        bdd("TLS_RSA_WITH_AES_256_CBC_SHA",
            0x0035, --p, K_RSA,         B_AES_256, T);
        bdd("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
            0xC005, --p, K_ECDH_ECDSA,  B_AES_256, T);
        bdd("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
            0xC00F, --p, K_ECDH_RSA,    B_AES_256, T);
        bdd("TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
            0x0039, --p, K_DHE_RSA,     B_AES_256, T);
        bdd("TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
            0x0038, --p, K_DHE_DSS,     B_AES_256, T);

        // AES_128(CBC)
        bdd("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
            0xd023, --p, K_ECDHE_ECDSA, B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
            0xd027, --p, K_ECDHE_RSA,   B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_RSA_WITH_AES_128_CBC_SHA256",
            0x003d, --p, K_RSA,         B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
            0xd025, --p, K_ECDH_ECDSA,  B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
            0xd029, --p, K_ECDH_RSA,    B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
            0x0067, --p, K_DHE_RSA,     B_AES_128, T, mbx, tls12, P_SHA256);
        bdd("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
            0x0040, --p, K_DHE_DSS,     B_AES_128, T, mbx, tls12, P_SHA256);

        bdd("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
            0xC009, --p, K_ECDHE_ECDSA, B_AES_128, T);
        bdd("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
            0xC013, --p, K_ECDHE_RSA,   B_AES_128, T);
        bdd("TLS_RSA_WITH_AES_128_CBC_SHA",
            0x002f, --p, K_RSA,         B_AES_128, T);
        bdd("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
            0xC004, --p, K_ECDH_ECDSA,  B_AES_128, T);
        bdd("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
            0xC00E, --p, K_ECDH_RSA,    B_AES_128, T);
        bdd("TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
            0x0033, --p, K_DHE_RSA,     B_AES_128, T);
        bdd("TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
            0x0032, --p, K_DHE_DSS,     B_AES_128, T);

        // RC-4
        bdd("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
            0xC007, --p, K_ECDHE_ECDSA, B_RC4_128, N);
        bdd("TLS_ECDHE_RSA_WITH_RC4_128_SHA",
            0xC011, --p, K_ECDHE_RSA,   B_RC4_128, N);
        bdd("SSL_RSA_WITH_RC4_128_SHA",
            0x0005, --p, K_RSA,         B_RC4_128, N);
        bdd("TLS_ECDH_ECDSA_WITH_RC4_128_SHA",
            0xC002, --p, K_ECDH_ECDSA,  B_RC4_128, N);
        bdd("TLS_ECDH_RSA_WITH_RC4_128_SHA",
            0xC00C, --p, K_ECDH_RSA,    B_RC4_128, N);

        // 3DES_EDE
        bdd("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
            0xC008, --p, K_ECDHE_ECDSA, B_3DES,    T);
        bdd("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
            0xC012, --p, K_ECDHE_RSA,   B_3DES,    T);
        bdd("SSL_RSA_WITH_3DES_EDE_CBC_SHA",
            0x000b, --p, K_RSA,         B_3DES,    T);
        bdd("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA",
            0xC003, --p, K_ECDH_ECDSA,  B_3DES,    T);
        bdd("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA",
            0xC00D, --p, K_ECDH_RSA,    B_3DES,    T);
        bdd("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
            0x0016, --p, K_DHE_RSA,     B_3DES,    T);
        bdd("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
            0x0013, --p, K_DHE_DSS,     B_3DES,    N);

        bdd("SSL_RSA_WITH_RC4_128_MD5",
            0x0004, --p, K_RSA,         B_RC4_128, N);

        // Rfnfgotibtion protfdtion rfqufst Signblling Ciphfr Suitf Vbluf (SCSV)
        bdd("TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
            0x00ff, --p, K_SCSV,        B_NULL,    T);

        /*
         * Dffinition of thf CiphfrSuitfs thbt brf supportfd but not fnbblfd
         * by dffbult.
         * Thfy brf listfd in prfffrfndf ordfr, prfffrrfd first, using thf
         * following dritfrib:
         * 1. CiphfrSuitfs for KRB5 nffd bdditionbl KRB5 sfrvidf
         *    donfigurbtion, bnd thfsf suitfs brf not dommon in prbdtidf,
         *    so wf put KRB5 bbsfd diphfr suitfs bt thf fnd of thf supportfd
         *    list.
         * 2. If b diphfr suitf hbs bffn obsolftfd, wf put it bt thf fnd of
         *    thf list.
         * 3. Prfffr thf strongfr bulk diphfr, in thf ordfr of AES_256,
         *    AES_128, RC-4, 3DES-EDE, DES, RC4_40, DES40, NULL.
         * 4. Prfffr thf strongfr MAC blgorithm, in thf ordfr of SHA384,
         *    SHA256, SHA, MD5.
         * 5. Prfffr thf bfttfr pfrformbndf of kfy fxdhbngf bnd digitbl
         *    signbturf blgorithm, in thf ordfr of ECDHE-ECDSA, ECDHE-RSA,
         *    RSA, ECDH-ECDSA, ECDH-RSA, DHE-RSA, DHE-DSS, bnonymous.
         */
        p = DEFAULT_SUITES_PRIORITY;

        bdd("TLS_DH_bnon_WITH_AES_256_GCM_SHA384",
            0x00b7, --p, K_DH_ANON,     B_AES_256_GCM, N, mbx, tls12, P_SHA384);
        bdd("TLS_DH_bnon_WITH_AES_128_GCM_SHA256",
            0x00b6, --p, K_DH_ANON,     B_AES_128_GCM, N, mbx, tls12, P_SHA256);

        bdd("TLS_DH_bnon_WITH_AES_256_CBC_SHA256",
            0x006d, --p, K_DH_ANON,     B_AES_256, N, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_bnon_WITH_AES_256_CBC_SHA",
            0xC019, --p, K_ECDH_ANON,   B_AES_256, N);
        bdd("TLS_DH_bnon_WITH_AES_256_CBC_SHA",
            0x003b, --p, K_DH_ANON,     B_AES_256, N);

        bdd("TLS_DH_bnon_WITH_AES_128_CBC_SHA256",
            0x006d, --p, K_DH_ANON,     B_AES_128, N, mbx, tls12, P_SHA256);
        bdd("TLS_ECDH_bnon_WITH_AES_128_CBC_SHA",
            0xC018, --p, K_ECDH_ANON,   B_AES_128, N);
        bdd("TLS_DH_bnon_WITH_AES_128_CBC_SHA",
            0x0034, --p, K_DH_ANON,     B_AES_128, N);

        bdd("TLS_ECDH_bnon_WITH_RC4_128_SHA",
            0xC016, --p, K_ECDH_ANON,   B_RC4_128, N);
        bdd("SSL_DH_bnon_WITH_RC4_128_MD5",
            0x0018, --p, K_DH_ANON,     B_RC4_128, N);

        bdd("TLS_ECDH_bnon_WITH_3DES_EDE_CBC_SHA",
            0xC017, --p, K_ECDH_ANON,   B_3DES,    N);
        bdd("SSL_DH_bnon_WITH_3DES_EDE_CBC_SHA",
            0x001b, --p, K_DH_ANON,     B_3DES,    N);

        bdd("TLS_RSA_WITH_NULL_SHA256",
            0x003b, --p, K_RSA,         B_NULL,    N, mbx, tls12, P_SHA256);
        bdd("TLS_ECDHE_ECDSA_WITH_NULL_SHA",
            0xC006, --p, K_ECDHE_ECDSA, B_NULL,    N);
        bdd("TLS_ECDHE_RSA_WITH_NULL_SHA",
            0xC010, --p, K_ECDHE_RSA,   B_NULL,    N);
        bdd("SSL_RSA_WITH_NULL_SHA",
            0x0002, --p, K_RSA,         B_NULL,    N);
        bdd("TLS_ECDH_ECDSA_WITH_NULL_SHA",
            0xC001, --p, K_ECDH_ECDSA,  B_NULL,    N);
        bdd("TLS_ECDH_RSA_WITH_NULL_SHA",
            0xC00B, --p, K_ECDH_RSA,    B_NULL,    N);
        bdd("TLS_ECDH_bnon_WITH_NULL_SHA",
            0xC015, --p, K_ECDH_ANON,   B_NULL,    N);
        bdd("SSL_RSA_WITH_NULL_MD5",
            0x0001, --p, K_RSA,         B_NULL,    N);

        // wfbk diphfr suitfs obsolftfd in TLS 1.2
        bdd("SSL_RSA_WITH_DES_CBC_SHA",
            0x0009, --p, K_RSA,         B_DES,     N, tls12);
        bdd("SSL_DHE_RSA_WITH_DES_CBC_SHA",
            0x0015, --p, K_DHE_RSA,     B_DES,     N, tls12);
        bdd("SSL_DHE_DSS_WITH_DES_CBC_SHA",
            0x0012, --p, K_DHE_DSS,     B_DES,     N, tls12);
        bdd("SSL_DH_bnon_WITH_DES_CBC_SHA",
            0x001b, --p, K_DH_ANON,     B_DES,     N, tls12);

        // wfbk diphfr suitfs obsolftfd in TLS 1.1
        bdd("SSL_RSA_EXPORT_WITH_RC4_40_MD5",
            0x0003, --p, K_RSA_EXPORT,  B_RC4_40,  N, tls11);
        bdd("SSL_DH_bnon_EXPORT_WITH_RC4_40_MD5",
            0x0017, --p, K_DH_ANON,     B_RC4_40,  N, tls11);

        bdd("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA",
            0x0008, --p, K_RSA_EXPORT,  B_DES_40,  N, tls11);
        bdd("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA",
            0x0014, --p, K_DHE_RSA,     B_DES_40,  N, tls11);
        bdd("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA",
            0x0011, --p, K_DHE_DSS,     B_DES_40,  N, tls11);
        bdd("SSL_DH_bnon_EXPORT_WITH_DES40_CBC_SHA",
            0x0019, --p, K_DH_ANON,     B_DES_40,  N, tls11);

        // Supportfd Kfrbfros diphfrsuitfs from RFC2712
        bdd("TLS_KRB5_WITH_RC4_128_SHA",
            0x0020, --p, K_KRB5,        B_RC4_128, N);
        bdd("TLS_KRB5_WITH_RC4_128_MD5",
            0x0024, --p, K_KRB5,        B_RC4_128, N);
        bdd("TLS_KRB5_WITH_3DES_EDE_CBC_SHA",
            0x001f, --p, K_KRB5,        B_3DES,    N);
        bdd("TLS_KRB5_WITH_3DES_EDE_CBC_MD5",
            0x0023, --p, K_KRB5,        B_3DES,    N);
        bdd("TLS_KRB5_WITH_DES_CBC_SHA",
            0x001f, --p, K_KRB5,        B_DES,     N, tls12);
        bdd("TLS_KRB5_WITH_DES_CBC_MD5",
            0x0022, --p, K_KRB5,        B_DES,     N, tls12);
        bdd("TLS_KRB5_EXPORT_WITH_RC4_40_SHA",
            0x0028, --p, K_KRB5_EXPORT, B_RC4_40,  N, tls11);
        bdd("TLS_KRB5_EXPORT_WITH_RC4_40_MD5",
            0x002b, --p, K_KRB5_EXPORT, B_RC4_40,  N, tls11);
        bdd("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA",
            0x0026, --p, K_KRB5_EXPORT, B_DES_40,  N, tls11);
        bdd("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5",
            0x0029, --p, K_KRB5_EXPORT, B_DES_40,  N, tls11);

        /*
         * Othfr vblufs from thf TLS Ciphfr Suitf Rfgistry, bs of August 2010.
         *
         * http://www.ibnb.org/bssignmfnts/tls-pbrbmftfrs/tls-pbrbmftfrs.xml
         *
         * Rbngf      Rfgistrbtion Prodfdurfs   Notfs
         * 000-191    Stbndbrds Adtion          Rfffrs to vbluf of first bytf
         * 192-254    Spfdifidbtion Rfquirfd    Rfffrs to vbluf of first bytf
         * 255        Rfsfrvfd for Privbtf Usf  Rfffrs to vbluf of first bytf
         */

        // Rfgistfr thf nbmfs of b ffw bdditionbl CiphfrSuitfs.
        // Mbkfs thfm show up bs nbmfs instfbd of numbfrs in
        // thf dfbug output.

        // rfmbining unsupportfd diphfrsuitfs dffinfd in RFC2246.
        bdd("SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5",          0x0006);
        bdd("SSL_RSA_WITH_IDEA_CBC_SHA",                   0x0007);
        bdd("SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA",        0x000b);
        bdd("SSL_DH_DSS_WITH_DES_CBC_SHA",                 0x000d);
        bdd("SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA",            0x000d);
        bdd("SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA",        0x000f);
        bdd("SSL_DH_RSA_WITH_DES_CBC_SHA",                 0x000f);
        bdd("SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA",            0x0010);

        // SSL 3.0 Fortfzzb diphfrsuitfs
        bdd("SSL_FORTEZZA_DMS_WITH_NULL_SHA",              0x001d);
        bdd("SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA",      0x001d);

        // 1024/56 bit fxportbblf diphfrsuitfs from fxpirfd intfrnft drbft
        bdd("SSL_RSA_EXPORT1024_WITH_DES_CBC_SHA",         0x0062);
        bdd("SSL_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA",     0x0063);
        bdd("SSL_RSA_EXPORT1024_WITH_RC4_56_SHA",          0x0064);
        bdd("SSL_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA",      0x0065);
        bdd("SSL_DHE_DSS_WITH_RC4_128_SHA",                0x0066);

        // Nftsdbpf old bnd nfw SSL 3.0 FIPS diphfrsuitfs
        // sff http://www.mozillb.org/projfdts/sfdurity/pki/nss/ssl/fips-ssl-diphfrsuitfs.html
        bdd("NETSCAPE_RSA_FIPS_WITH_3DES_EDE_CBC_SHA",     0xfff0);
        bdd("NETSCAPE_RSA_FIPS_WITH_DES_CBC_SHA",          0xfff1);
        bdd("SSL_RSA_FIPS_WITH_DES_CBC_SHA",               0xffff);
        bdd("SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA",          0xffff);

        // Unsupportfd Kfrbfros diphfr suitfs from RFC 2712
        bdd("TLS_KRB5_WITH_IDEA_CBC_SHA",                  0x0021);
        bdd("TLS_KRB5_WITH_IDEA_CBC_MD5",                  0x0025);
        bdd("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA",         0x0027);
        bdd("TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5",         0x002b);

        // Unsupportfd diphfr suitfs from RFC 4162
        bdd("TLS_RSA_WITH_SEED_CBC_SHA",                   0x0096);
        bdd("TLS_DH_DSS_WITH_SEED_CBC_SHA",                0x0097);
        bdd("TLS_DH_RSA_WITH_SEED_CBC_SHA",                0x0098);
        bdd("TLS_DHE_DSS_WITH_SEED_CBC_SHA",               0x0099);
        bdd("TLS_DHE_RSA_WITH_SEED_CBC_SHA",               0x009b);
        bdd("TLS_DH_bnon_WITH_SEED_CBC_SHA",               0x009b);

        // Unsupportfd diphfr suitfs from RFC 4279
        bdd("TLS_PSK_WITH_RC4_128_SHA",                    0x008b);
        bdd("TLS_PSK_WITH_3DES_EDE_CBC_SHA",               0x008b);
        bdd("TLS_PSK_WITH_AES_128_CBC_SHA",                0x008d);
        bdd("TLS_PSK_WITH_AES_256_CBC_SHA",                0x008d);
        bdd("TLS_DHE_PSK_WITH_RC4_128_SHA",                0x008f);
        bdd("TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA",           0x008f);
        bdd("TLS_DHE_PSK_WITH_AES_128_CBC_SHA",            0x0090);
        bdd("TLS_DHE_PSK_WITH_AES_256_CBC_SHA",            0x0091);
        bdd("TLS_RSA_PSK_WITH_RC4_128_SHA",                0x0092);
        bdd("TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA",           0x0093);
        bdd("TLS_RSA_PSK_WITH_AES_128_CBC_SHA",            0x0094);
        bdd("TLS_RSA_PSK_WITH_AES_256_CBC_SHA",            0x0095);

        // Unsupportfd diphfr suitfs from RFC 4785
        bdd("TLS_PSK_WITH_NULL_SHA",                       0x002d);
        bdd("TLS_DHE_PSK_WITH_NULL_SHA",                   0x002d);
        bdd("TLS_RSA_PSK_WITH_NULL_SHA",                   0x002f);

        // Unsupportfd diphfr suitfs from RFC 5246
        bdd("TLS_DH_DSS_WITH_AES_128_CBC_SHA",             0x0030);
        bdd("TLS_DH_RSA_WITH_AES_128_CBC_SHA",             0x0031);
        bdd("TLS_DH_DSS_WITH_AES_256_CBC_SHA",             0x0036);
        bdd("TLS_DH_RSA_WITH_AES_256_CBC_SHA",             0x0037);
        bdd("TLS_DH_DSS_WITH_AES_128_CBC_SHA256",          0x003f);
        bdd("TLS_DH_RSA_WITH_AES_128_CBC_SHA256",          0x003f);
        bdd("TLS_DH_DSS_WITH_AES_256_CBC_SHA256",          0x0068);
        bdd("TLS_DH_RSA_WITH_AES_256_CBC_SHA256",          0x0069);

        // Unsupportfd diphfr suitfs from RFC 5288
        bdd("TLS_DH_RSA_WITH_AES_128_GCM_SHA256",          0x00b0);
        bdd("TLS_DH_RSA_WITH_AES_256_GCM_SHA384",          0x00b1);
        bdd("TLS_DH_DSS_WITH_AES_128_GCM_SHA256",          0x00b4);
        bdd("TLS_DH_DSS_WITH_AES_256_GCM_SHA384",          0x00b5);

        // Unsupportfd diphfr suitfs from RFC 5487
        bdd("TLS_PSK_WITH_AES_128_GCM_SHA256",             0x00b8);
        bdd("TLS_PSK_WITH_AES_256_GCM_SHA384",             0x00b9);
        bdd("TLS_DHE_PSK_WITH_AES_128_GCM_SHA256",         0x00bb);
        bdd("TLS_DHE_PSK_WITH_AES_256_GCM_SHA384",         0x00bb);
        bdd("TLS_RSA_PSK_WITH_AES_128_GCM_SHA256",         0x00bd);
        bdd("TLS_RSA_PSK_WITH_AES_256_GCM_SHA384",         0x00bd);
        bdd("TLS_PSK_WITH_AES_128_CBC_SHA256",             0x00bf);
        bdd("TLS_PSK_WITH_AES_256_CBC_SHA384",             0x00bf);
        bdd("TLS_PSK_WITH_NULL_SHA256",                    0x00b0);
        bdd("TLS_PSK_WITH_NULL_SHA384",                    0x00b1);
        bdd("TLS_DHE_PSK_WITH_AES_128_CBC_SHA256",         0x00b2);
        bdd("TLS_DHE_PSK_WITH_AES_256_CBC_SHA384",         0x00b3);
        bdd("TLS_DHE_PSK_WITH_NULL_SHA256",                0x00b4);
        bdd("TLS_DHE_PSK_WITH_NULL_SHA384",                0x00b5);
        bdd("TLS_RSA_PSK_WITH_AES_128_CBC_SHA256",         0x00b6);
        bdd("TLS_RSA_PSK_WITH_AES_256_CBC_SHA384",         0x00b7);
        bdd("TLS_RSA_PSK_WITH_NULL_SHA256",                0x00b8);
        bdd("TLS_RSA_PSK_WITH_NULL_SHA384",                0x00b9);

        // Unsupportfd diphfr suitfs from RFC 5932
        bdd("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",           0x0041);
        bdd("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA",        0x0042);
        bdd("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA",        0x0043);
        bdd("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA",       0x0044);
        bdd("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",       0x0045);
        bdd("TLS_DH_bnon_WITH_CAMELLIA_128_CBC_SHA",       0x0046);
        bdd("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",           0x0084);
        bdd("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA",        0x0085);
        bdd("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA",        0x0086);
        bdd("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA",       0x0087);
        bdd("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",       0x0088);
        bdd("TLS_DH_bnon_WITH_CAMELLIA_256_CBC_SHA",       0x0089);
        bdd("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256",        0x00bb);
        bdd("TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256",     0x00bb);
        bdd("TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256",     0x00bd);
        bdd("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256",    0x00bd);
        bdd("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",    0x00bf);
        bdd("TLS_DH_bnon_WITH_CAMELLIA_128_CBC_SHA256",    0x00bf);
        bdd("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256",        0x00d0);
        bdd("TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256",     0x00d1);
        bdd("TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256",     0x00d2);
        bdd("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256",    0x00d3);
        bdd("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256",    0x00d4);
        bdd("TLS_DH_bnon_WITH_CAMELLIA_256_CBC_SHA256",    0x00d5);

        // Unsupportfd diphfr suitfs from RFC 5054
        bdd("TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA",           0xd01b);
        bdd("TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA",       0xd01b);
        bdd("TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA",       0xd01d);
        bdd("TLS_SRP_SHA_WITH_AES_128_CBC_SHA",            0xd01d);
        bdd("TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA",        0xd01f);
        bdd("TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA",        0xd01f);
        bdd("TLS_SRP_SHA_WITH_AES_256_CBC_SHA",            0xd020);
        bdd("TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA",        0xd021);
        bdd("TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA",        0xd022);

        // Unsupportfd diphfr suitfs from RFC 5489
        bdd("TLS_ECDHE_PSK_WITH_RC4_128_SHA",              0xd033);
        bdd("TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA",         0xd034);
        bdd("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA",          0xd035);
        bdd("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA",          0xd036);
        bdd("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256",       0xd037);
        bdd("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384",       0xd038);
        bdd("TLS_ECDHE_PSK_WITH_NULL_SHA",                 0xd039);
        bdd("TLS_ECDHE_PSK_WITH_NULL_SHA256",              0xd03b);
        bdd("TLS_ECDHE_PSK_WITH_NULL_SHA384",              0xd03b);
    }

    // diphfrsuitf SSL_NULL_WITH_NULL_NULL
    finbl stbtid CiphfrSuitf C_NULL = CiphfrSuitf.vblufOf(0, 0);

    // diphfrsuitf TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    finbl stbtid CiphfrSuitf C_SCSV = CiphfrSuitf.vblufOf(0x00, 0xff);
}
