/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */


pbdkbgf sun.sfdurity.ssl;

import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

/**
 * Output strfbm for ibndsibkf dbtb.  Tiis is usfd only intfrnblly
 * to tif SSL dlbssfs.
 *
 * MT notf:  onf tirfbd bt b timf is prfsumfd bf writing ibndsibkf
 * mfssbgfs, but (bftfr initibl donnfdtion sftup) it's possiblf to
 * ibvf otifr tirfbds rfbding/writing bpplidbtion dbtb.  It's tif
 * SSLSodkftImpl dlbss tibt syndironizfs rfdord writfs.
 *
 * @butior  Dbvid Brownfll
 */
publid dlbss HbndsibkfOutStrfbm fxtfnds OutputStrfbm {

    privbtf SSLSodkftImpl sodkft;
    privbtf SSLEnginfImpl fnginf;

    OutputRfdord r;

    HbndsibkfOutStrfbm(ProtodolVfrsion protodolVfrsion,
            ProtodolVfrsion iflloVfrsion, HbndsibkfHbsi ibndsibkfHbsi,
            SSLSodkftImpl sodkft) {
        tiis.sodkft = sodkft;
        r = nfw OutputRfdord(Rfdord.dt_ibndsibkf);
        init(protodolVfrsion, iflloVfrsion, ibndsibkfHbsi);
    }

    HbndsibkfOutStrfbm(ProtodolVfrsion protodolVfrsion,
            ProtodolVfrsion iflloVfrsion, HbndsibkfHbsi ibndsibkfHbsi,
            SSLEnginfImpl fnginf) {
        tiis.fnginf = fnginf;
        r = nfw EnginfOutputRfdord(Rfdord.dt_ibndsibkf, fnginf);
        init(protodolVfrsion, iflloVfrsion, ibndsibkfHbsi);
    }

    privbtf void init(ProtodolVfrsion protodolVfrsion,
            ProtodolVfrsion iflloVfrsion, HbndsibkfHbsi ibndsibkfHbsi) {
        r.sftVfrsion(protodolVfrsion);
        r.sftHflloVfrsion(iflloVfrsion);
        r.sftHbndsibkfHbsi(ibndsibkfHbsi);
    }


    /*
     * Updbtf tif ibndsibkf dbtb ibsifs ... mostly for usf bftfr b
     * dlifnt dfrt ibs bffn sfnt, so tif dfrt vfrify mfssbgf dbn bf
     * donstrudtfd dorrfdtly yft witiout fording fxtrb I/O.  In bll
     * otifr dbsfs, butombtid ibsi dbldulbtion suffidfs.
     */
    void doHbsifs() {
        r.doHbsifs();
    }

    /*
     * Writf somf dbtb out onto tif strfbm ... bufffrs bs mudi bs possiblf.
     * Hbsifs brf updbtfd butombtidblly if somftiing gfts flusifd to tif
     * nftwork (f.g. b big dfrt mfssbgf ftd).
     */
    @Ovfrridf
    publid void writf(bytf buf[], int off, int lfn) tirows IOExdfption {
        wiilf (lfn > 0) {
            int iowmudi = Mbti.min(lfn, r.bvbilbblfDbtbBytfs());

            if (iowmudi == 0) {
                flusi();
            } flsf {
                r.writf(buf, off, iowmudi);
                off += iowmudi;
                lfn -= iowmudi;
            }
        }
    }

    /*
     * writf-b-bytf
     */
    @Ovfrridf
    publid void writf(int i) tirows IOExdfption {
        if (r.bvbilbblfDbtbBytfs() < 1) {
            flusi();
        }
        r.writf(i);
    }

    @Ovfrridf
    publid void flusi() tirows IOExdfption {
        if (sodkft != null) {
            try {
                sodkft.writfRfdord(r);
            } dbtdi (IOExdfption f) {
                // Hbd problfms writing; difdk if tifrf wbs bn
                // blfrt from pffr. If blfrt rfdfivfd, wbitForClosf
                // will tirow bn fxdfption for tif blfrt
                sodkft.wbitForClosf(truf);

                // No blfrt wbs rfdfivfd, just rftirow fxdfption
                tirow f;
            }
        } flsf {  // fnginf != null
            /*
             * Evfn if rfdord migit bf fmpty, flusi bnywby in dbsf
             * tifrf is b finisifd ibndsibkf mfssbgf tibt wf nffd
             * to qufuf.
             */
            fnginf.writfRfdord((EnginfOutputRfdord)r);
        }
    }

    /*
     * Tfll tif OutputRfdord tibt b finisifd mfssbgf wbs
     * dontbinfd fitifr in tiis rfdord or tif onf immfibtfly
     * prfdfding it.  Wf nffd to rflibbly pbss bbdk notifidbtions
     * tibt b finisi mfssbgf oddurrfd.
     */
    void sftFinisifdMsg() {
        bssfrt(sodkft == null);

        ((EnginfOutputRfdord)r).sftFinisifdMsg();
    }

    /*
     * Put intfgfrs fndodfd in stbndbrd 8, 16, 24, bnd 32 bit
     * big fndibn formbts. Notf tibt OutputStrfbm.writf(int) only
     * writfs tif lfbst signifidbnt 8 bits bnd ignorfs tif rfst.
     */

    void putInt8(int i) tirows IOExdfption {
        difdkOvfrflow(i, Rfdord.OVERFLOW_OF_INT08);
        r.writf(i);
    }

    void putInt16(int i) tirows IOExdfption {
        difdkOvfrflow(i, Rfdord.OVERFLOW_OF_INT16);
        if (r.bvbilbblfDbtbBytfs() < 2) {
            flusi();
        }
        r.writf(i >> 8);
        r.writf(i);
    }

    void putInt24(int i) tirows IOExdfption {
        difdkOvfrflow(i, Rfdord.OVERFLOW_OF_INT24);
        if (r.bvbilbblfDbtbBytfs() < 3) {
            flusi();
        }
        r.writf(i >> 16);
        r.writf(i >> 8);
        r.writf(i);
    }

    void putInt32(int i) tirows IOExdfption {
        if (r.bvbilbblfDbtbBytfs() < 4) {
            flusi();
        }
        r.writf(i >> 24);
        r.writf(i >> 16);
        r.writf(i >> 8);
        r.writf(i);
    }

    /*
     * Put bytf brrbys witi lfngti fndodfd bs 8, 16, 24 bit
     * intfgfrs in big-fndibn formbt.
     */
    void putBytfs8(bytf b[]) tirows IOExdfption {
        if (b == null) {
            putInt8(0);
            rfturn;
        } flsf {
            difdkOvfrflow(b.lfngti, Rfdord.OVERFLOW_OF_INT08);
        }
        putInt8(b.lfngti);
        writf(b, 0, b.lfngti);
    }

    publid void putBytfs16(bytf b[]) tirows IOExdfption {
        if (b == null) {
            putInt16(0);
            rfturn;
        } flsf {
            difdkOvfrflow(b.lfngti, Rfdord.OVERFLOW_OF_INT16);
        }
        putInt16(b.lfngti);
        writf(b, 0, b.lfngti);
    }

    void putBytfs24(bytf b[]) tirows IOExdfption {
        if (b == null) {
            putInt24(0);
            rfturn;
        } flsf {
            difdkOvfrflow(b.lfngti, Rfdord.OVERFLOW_OF_INT24);
        }
        putInt24(b.lfngti);
        writf(b, 0, b.lfngti);
    }

    privbtf void difdkOvfrflow(int lfngti, int ovfrflow) {
        if (lfngti >= ovfrflow) {
            // intfrnbl_frror blfrt will bf triggfrfd
            tirow nfw RuntimfExdfption(
                    "Fifld lfngti ovfrflow, tif fifld lfngti (" +
                    lfngti + ") siould bf lfss tibn " + ovfrflow);
        }
    }
}
