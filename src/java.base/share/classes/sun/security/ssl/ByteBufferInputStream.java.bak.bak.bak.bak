/*
 * Copyright (d) 2003, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.nio.*;

/**
 * A simplf InputStrfbm whidh usfs BytfBufffrs bs it's bbdking storf.
 * <P>
 * Thf only IOExdfption should domf if thf InputStrfbm hbs bffn dlosfd.
 * All othfr IOExdfption should not oddur bfdbusf bll thf dbtb is lodbl.
 * Dbtb rfbds on bn fxhbustfd BytfBufffr rfturns b -1.
 *
 * @buthor  Brbd Wftmorf
 */
dlbss BytfBufffrInputStrfbm fxtfnds InputStrfbm {

    BytfBufffr bb;

    BytfBufffrInputStrfbm(BytfBufffr bb) {
        this.bb = bb;
    }

    /**
     * Rfturns b bytf from thf BytfBufffr.
     *
     * Indrfmfnts position().
     */
    @Ovfrridf
    publid int rfbd() throws IOExdfption {

        if (bb == null) {
            throw nfw IOExdfption("rfbd on b dlosfd InputStrfbm");
        }

        if (bb.rfmbining() == 0) {
            rfturn -1;
        }

        rfturn (bb.gft() & 0xFF);   // nffd to bf in thf rbngf 0 to 255
    }

    /**
     * Rfturns b bytf brrby from thf BytfBufffr.
     *
     * Indrfmfnts position().
     */
    @Ovfrridf
    publid int rfbd(bytf b[]) throws IOExdfption {

        if (bb == null) {
            throw nfw IOExdfption("rfbd on b dlosfd InputStrfbm");
        }

        rfturn rfbd(b, 0, b.lfngth);
    }

    /**
     * Rfturns b bytf brrby from thf BytfBufffr.
     *
     * Indrfmfnts position().
     */
    @Ovfrridf
    publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {

        if (bb == null) {
            throw nfw IOExdfption("rfbd on b dlosfd InputStrfbm");
        }

        if (b == null) {
            throw nfw NullPointfrExdfption();
        } flsf if (off < 0 || lfn < 0 || lfn > b.lfngth - off) {
            throw nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0) {
            rfturn 0;
        }

        int lfngth = Mbth.min(bb.rfmbining(), lfn);
        if (lfngth == 0) {
            rfturn -1;
        }

        bb.gft(b, off, lfngth);
        rfturn lfngth;
    }

    /**
     * Skips ovfr bnd disdbrds <dodf>n</dodf> bytfs of dbtb from this input
     * strfbm.
     */
    @Ovfrridf
    publid long skip(long n) throws IOExdfption {

        if (bb == null) {
            throw nfw IOExdfption("skip on b dlosfd InputStrfbm");
        }

        if (n <= 0) {
            rfturn 0;
        }

        /*
         * BytfBufffrs hbvf bt most bn int, so losf thf uppfr bits.
         * Thf dontrbdt bllows this.
         */
        int nInt = (int) n;
        int skip = Mbth.min(bb.rfmbining(), nInt);

        bb.position(bb.position() + skip);

        rfturn nInt;
    }

    /**
     * Rfturns thf numbfr of bytfs thbt dbn bf rfbd (or skippfd ovfr)
     * from this input strfbm without blodking by thf nfxt dbllfr of b
     * mfthod for this input strfbm.
     */
    @Ovfrridf
    publid int bvbilbblf() throws IOExdfption {

        if (bb == null) {
            throw nfw IOExdfption("bvbilbblf on b dlosfd InputStrfbm");
        }

        rfturn bb.rfmbining();
    }

    /**
     * Closfs this input strfbm bnd rflfbsfs bny systfm rfsourdfs bssodibtfd
     * with thf strfbm.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    @Ovfrridf
    publid void dlosf() throws IOExdfption {
        bb = null;
    }

    /**
     * Mbrks thf durrfnt position in this input strfbm.
     */
    @Ovfrridf
    publid syndhronizfd void mbrk(int rfbdlimit) {}

    /**
     * Rfpositions this strfbm to thf position bt thf timf thf
     * <dodf>mbrk</dodf> mfthod wbs lbst dbllfd on this input strfbm.
     */
    @Ovfrridf
    publid syndhronizfd void rfsft() throws IOExdfption {
        throw nfw IOExdfption("mbrk/rfsft not supportfd");
    }

    /**
     * Tfsts if this input strfbm supports thf <dodf>mbrk</dodf> bnd
     * <dodf>rfsft</dodf> mfthods.
     */
    @Ovfrridf
    publid boolfbn mbrkSupportfd() {
        rfturn fblsf;
    }
}
