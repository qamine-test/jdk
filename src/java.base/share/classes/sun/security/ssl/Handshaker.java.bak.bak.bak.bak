/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */


pbdkbgf sun.sfdurity.ssl;

import jbvb.io.*;
import jbvb.util.*;
import jbvb.sfdurity.*;
import jbvb.sfdurity.NoSudhAlgorithmExdfption;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.AlgorithmConstrbints;
import jbvb.sfdurity.AddfssControlContfxt;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;

import jbvbx.drypto.*;
import jbvbx.drypto.spfd.*;

import jbvbx.nft.ssl.*;
import sun.misd.HfxDumpEndodfr;

import sun.sfdurity.intfrnbl.spfd.*;
import sun.sfdurity.intfrnbl.intfrfbdfs.TlsMbstfrSfdrft;

import sun.sfdurity.ssl.HbndshbkfMfssbgf.*;
import sun.sfdurity.ssl.CiphfrSuitf.*;

import stbtid sun.sfdurity.ssl.CiphfrSuitf.PRF.*;
import stbtid sun.sfdurity.ssl.CiphfrSuitf.CiphfrTypf.*;

/**
 * Hbndshbkfr ... prodfssfs hbndshbkf rfdords from bn SSL V3.0
 * dbtb strfbm, hbndling bll thf dftbils of thf hbndshbkf protodol.
 *
 * Notf thbt thf rfbl protodol work is donf in two subdlbssfs, thf  bbsf
 * dlbss just providfs thf dontrol flow bnd kfy gfnfrbtion frbmfwork.
 *
 * @buthor Dbvid Brownfll
 */
bbstrbdt dlbss Hbndshbkfr {

    // protodol vfrsion bfing fstbblishfd using this Hbndshbkfr
    ProtodolVfrsion protodolVfrsion;

    // thf durrfntly bdtivf protodol vfrsion during b rfnfgotibtion
    ProtodolVfrsion     bdtivfProtodolVfrsion;

    // sfdurity pbrbmftfrs for sfdurf rfnfgotibtion.
    boolfbn             sfdurfRfnfgotibtion;
    bytf[]              dlifntVfrifyDbtb;
    bytf[]              sfrvfrVfrifyDbtb;

    // Is it bn initibl nfgotibtion  or b rfnfgotibtion?
    boolfbn                     isInitiblHbndshbkf;

    // List of fnbblfd protodols
    privbtf ProtodolList        fnbblfdProtodols;

    // List of fnbblfd CiphfrSuitfs
    privbtf CiphfrSuitfList     fnbblfdCiphfrSuitfs;

    // Thf fndpoint idfntifidbtion protodol
    String              idfntifidbtionProtodol;

    // Thf dryptogrbphid blgorithm donstrbints
    privbtf AlgorithmConstrbints    blgorithmConstrbints = null;

    // Lodbl supportfd signbturf bnd blgorithms
    Collfdtion<SignbturfAndHbshAlgorithm> lodblSupportfdSignAlgs;

    // Pffr supportfd signbturf bnd blgorithms
    Collfdtion<SignbturfAndHbshAlgorithm> pffrSupportfdSignAlgs;

    /*

    /*
     * List of bdtivf protodols
     *
     * Adtivf protodols is b subsft of fnbblfd protodols, bnd will
     * dontbin only thosf protodols thbt hbvf vbild diphfr suitfs
     * fnbblfd.
     */
    privbtf ProtodolList       bdtivfProtodols;

    /*
     * List of bdtivf diphfr suitfs
     *
     * Adtivf diphfr suitfs is b subsft of fnbblfd diphfr suitfs, bnd will
     * dontbin only thosf diphfr suitfs bvbilbblf for thf bdtivf protodols.
     */
    privbtf CiphfrSuitfList    bdtivfCiphfrSuitfs;

    // Thf sfrvfr nbmf indidbtion bnd mbtdhfrs
    List<SNISfrvfrNbmf>         sfrvfrNbmfs =
                                    Collfdtions.<SNISfrvfrNbmf>fmptyList();
    Collfdtion<SNIMbtdhfr>      sniMbtdhfrs =
                                    Collfdtions.<SNIMbtdhfr>fmptyList();

    privbtf boolfbn             isClifnt;
    privbtf boolfbn             nffdCfrtVfrify;

    SSLSodkftImpl               donn = null;
    SSLEnginfImpl               fnginf = null;

    HbndshbkfHbsh               hbndshbkfHbsh;
    HbndshbkfInStrfbm           input;
    HbndshbkfOutStrfbm          output;
    int                         stbtf;
    SSLContfxtImpl              sslContfxt;
    RbndomCookif                dlnt_rbndom, svr_rbndom;
    SSLSfssionImpl              sfssion;

    // durrfnt CiphfrSuitf. Nfvfr null, initiblly SSL_NULL_WITH_NULL_NULL
    CiphfrSuitf         diphfrSuitf;

    // durrfnt kfy fxdhbngf. Nfvfr null, initiblly K_NULL
    KfyExdhbngf         kfyExdhbngf;

    /* Truf if this sfssion is bfing rfsumfd (fbst hbndshbkf) */
    boolfbn             rfsumingSfssion;

    /* Truf if it's OK to stbrt b nfw SSL sfssion */
    boolfbn             fnbblfNfwSfssion;

    // Whfthfr lodbl diphfr suitfs prfffrfndf should bf honorfd during
    // hbndshbking?
    //
    // Notf thbt in this providfr, this option only bpplifs to sfrvfr sidf.
    // Lodbl diphfr suitfs prfffrfndf is blwbys honorfd in dlifnt sidf in
    // this providfr.
    boolfbn prfffrLodblCiphfrSuitfs = fblsf;

    // Tfmporbry storbgf for thf individubl kfys. Sft by
    // dbldulbtfConnfdtionKfys() bnd dlfbrfd ondf thf diphfrs brf
    // bdtivbtfd.
    privbtf SfdrftKfy dlntWritfKfy, svrWritfKfy;
    privbtf IvPbrbmftfrSpfd dlntWritfIV, svrWritfIV;
    privbtf SfdrftKfy dlntMbdSfdrft, svrMbdSfdrft;

    /*
     * Dflfgbtfd tbsk subsystfm dbtb strudturfs.
     *
     * If thrown is sft, wf nffd to propbgbtf this bbdk immfdibtfly
     * on fntry into prodfssMfssbgf().
     *
     * Dbtb is protfdtfd by thf SSLEnginf.this lodk.
     */
    privbtf volbtilf boolfbn tbskDflfgbtfd = fblsf;
    privbtf volbtilf DflfgbtfdTbsk<?> dflfgbtfdTbsk = null;
    privbtf volbtilf Exdfption thrown = null;

    // Could probbbly usf b jbvb.util.dondurrfnt.btomid.AtomidRfffrfndf
    // hfrf instfbd of using this lodk.  Considfr dhbnging.
    privbtf Objfdt thrownLodk = nfw Objfdt();

    /* Clbss bnd subdlbss dynbmid dfbugging support */
    stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("ssl");

    // By dffbult, disbblf thf unsbff lfgbdy sfssion rfnfgotibtion
    stbtid finbl boolfbn bllowUnsbffRfnfgotibtion = Dfbug.gftBoolfbnPropfrty(
                    "sun.sfdurity.ssl.bllowUnsbffRfnfgotibtion", fblsf);

    // For mbximum intfropfrbbility bnd bbdkwbrd dompbtibility, RFC 5746
    // bllows sfrvfr (or dlifnt) to bddfpt ClifntHfllo (or SfrvfrHfllo)
    // mfssbgf without thf sfdurf rfnfgotibtion_info fxtfnsion or SCSV.
    //
    // For mbximum sfdurity, RFC 5746 blso bllows sfrvfr (or dlifnt) to
    // rfjfdt sudh mfssbgf with b fbtbl "hbndshbkf_fbilurf" blfrt.
    //
    // By dffbult, bllow sudh lfgbdy hfllo mfssbgfs.
    stbtid finbl boolfbn bllowLfgbdyHflloMfssbgfs = Dfbug.gftBoolfbnPropfrty(
                    "sun.sfdurity.ssl.bllowLfgbdyHflloMfssbgfs", truf);

    // To prfvfnt thf TLS rfnfgotibtion issufs, by sftting systfm propfrty
    // "jdk.tls.rfjfdtClifntInitibtfdRfnfgotibtion" to truf, bpplidbtions in
    // sfrvfr sidf dbn disbblf bll dlifnt initibtfd SSL rfnfgotibtions
    // rfgbrdlfss of thf support of TLS protodols.
    //
    // By dffbult, bllow dlifnt initibtfd rfnfgotibtions.
    stbtid finbl boolfbn rfjfdtClifntInitibtfdRfnfgo =
            Dfbug.gftBoolfbnPropfrty(
                "jdk.tls.rfjfdtClifntInitibtfdRfnfgotibtion", fblsf);

    // nffd to disposf thf objfdt whfn it is invblidbtfd
    boolfbn invblidbtfd;

    Hbndshbkfr(SSLSodkftImpl d, SSLContfxtImpl dontfxt,
            ProtodolList fnbblfdProtodols, boolfbn nffdCfrtVfrify,
            boolfbn isClifnt, ProtodolVfrsion bdtivfProtodolVfrsion,
            boolfbn isInitiblHbndshbkf, boolfbn sfdurfRfnfgotibtion,
            bytf[] dlifntVfrifyDbtb, bytf[] sfrvfrVfrifyDbtb) {
        this.donn = d;
        init(dontfxt, fnbblfdProtodols, nffdCfrtVfrify, isClifnt,
            bdtivfProtodolVfrsion, isInitiblHbndshbkf, sfdurfRfnfgotibtion,
            dlifntVfrifyDbtb, sfrvfrVfrifyDbtb);
    }

    Hbndshbkfr(SSLEnginfImpl fnginf, SSLContfxtImpl dontfxt,
            ProtodolList fnbblfdProtodols, boolfbn nffdCfrtVfrify,
            boolfbn isClifnt, ProtodolVfrsion bdtivfProtodolVfrsion,
            boolfbn isInitiblHbndshbkf, boolfbn sfdurfRfnfgotibtion,
            bytf[] dlifntVfrifyDbtb, bytf[] sfrvfrVfrifyDbtb) {
        this.fnginf = fnginf;
        init(dontfxt, fnbblfdProtodols, nffdCfrtVfrify, isClifnt,
            bdtivfProtodolVfrsion, isInitiblHbndshbkf, sfdurfRfnfgotibtion,
            dlifntVfrifyDbtb, sfrvfrVfrifyDbtb);
    }

    privbtf void init(SSLContfxtImpl dontfxt, ProtodolList fnbblfdProtodols,
            boolfbn nffdCfrtVfrify, boolfbn isClifnt,
            ProtodolVfrsion bdtivfProtodolVfrsion,
            boolfbn isInitiblHbndshbkf, boolfbn sfdurfRfnfgotibtion,
            bytf[] dlifntVfrifyDbtb, bytf[] sfrvfrVfrifyDbtb) {

        if (dfbug != null && Dfbug.isOn("hbndshbkf")) {
            Systfm.out.println(
                "Allow unsbff rfnfgotibtion: " + bllowUnsbffRfnfgotibtion +
                "\nAllow lfgbdy hfllo mfssbgfs: " + bllowLfgbdyHflloMfssbgfs +
                "\nIs initibl hbndshbkf: " + isInitiblHbndshbkf +
                "\nIs sfdurf rfnfgotibtion: " + sfdurfRfnfgotibtion);
        }

        this.sslContfxt = dontfxt;
        this.isClifnt = isClifnt;
        this.nffdCfrtVfrify = nffdCfrtVfrify;
        this.bdtivfProtodolVfrsion = bdtivfProtodolVfrsion;
        this.isInitiblHbndshbkf = isInitiblHbndshbkf;
        this.sfdurfRfnfgotibtion = sfdurfRfnfgotibtion;
        this.dlifntVfrifyDbtb = dlifntVfrifyDbtb;
        this.sfrvfrVfrifyDbtb = sfrvfrVfrifyDbtb;
        fnbblfNfwSfssion = truf;
        invblidbtfd = fblsf;

        sftCiphfrSuitf(CiphfrSuitf.C_NULL);
        sftEnbblfdProtodols(fnbblfdProtodols);

        if (donn != null) {
            blgorithmConstrbints = nfw SSLAlgorithmConstrbints(donn, truf);
        } flsf {        // fnginf != null
            blgorithmConstrbints = nfw SSLAlgorithmConstrbints(fnginf, truf);
        }


        //
        // In bddition to thf donnfdtion stbtf mbdhinf, dontrolling
        // how thf donnfdtion dfbls with thf difffrfnt sorts of rfdords
        // thbt gft sfnt (notbbly hbndshbkf trbnsitions!), thfrf's
        // blso b hbndshbking stbtf mbdhinf thbt dontrols mfssbgf
        // sfqufnding.
        //
        // It's b donvfnifnt brtifbdt of thf protodol thbt this dbn,
        // with only b douplf of minor fxdfptions, bf drivfn by thf
        // typf donstbnt for thf lbst mfssbgf sffn:  fxdfpt for thf
        // dlifnt's dfrt vfrify, thosf donstbnts brf in b donvfnifnt
        // ordfr to drbstidblly simplify stbtf mbdhinf dhfdking.
        //
        stbtf = -2;  // initiblizfd but not bdtivbtfd
    }

    /*
     * Rfroutfs dblls to thf SSLSodkft or SSLEnginf (*SE).
     *
     * Wf dould hbvf blso donf it by fxtrb dlbssfs
     * bnd lftting thfm ovfrridf, but this sffmfd mudh
     * lfss involvfd.
     */
    void fbtblSE(bytf b, String dibgnostid) throws IOExdfption {
        fbtblSE(b, dibgnostid, null);
    }

    void fbtblSE(bytf b, Throwbblf dbusf) throws IOExdfption {
        fbtblSE(b, null, dbusf);
    }

    void fbtblSE(bytf b, String dibgnostid, Throwbblf dbusf)
            throws IOExdfption {
        if (donn != null) {
            donn.fbtbl(b, dibgnostid, dbusf);
        } flsf {
            fnginf.fbtbl(b, dibgnostid, dbusf);
        }
    }

    void wbrningSE(bytf b) {
        if (donn != null) {
            donn.wbrning(b);
        } flsf {
            fnginf.wbrning(b);
        }
    }

    // ONLY usfd by ClifntHbndshbkfr to sftup thf pffr host in SSLSfssion.
    String gftHostSE() {
        if (donn != null) {
            rfturn donn.gftHost();
        } flsf {
            rfturn fnginf.gftPffrHost();
        }
    }

    // ONLY usfd by SfrvfrHbndshbkfr to sftup thf pffr host in SSLSfssion.
    String gftHostAddrfssSE() {
        if (donn != null) {
            rfturn donn.gftInftAddrfss().gftHostAddrfss();
        } flsf {
            /*
             * This is for dbdhing only, dofsn't mbttfr thbt's is rfblly
             * b hostnbmf.  Thf mbin thing is thbt it dofsn't do
             * b rfvfrsf DNS lookup, potfntiblly slowing things down.
             */
            rfturn fnginf.gftPffrHost();
        }
    }

    int gftPortSE() {
        if (donn != null) {
            rfturn donn.gftPort();
        } flsf {
            rfturn fnginf.gftPffrPort();
        }
    }

    int gftLodblPortSE() {
        if (donn != null) {
            rfturn donn.gftLodblPort();
        } flsf {
            rfturn -1;
        }
    }

    AddfssControlContfxt gftAddSE() {
        if (donn != null) {
            rfturn donn.gftAdd();
        } flsf {
            rfturn fnginf.gftAdd();
        }
    }

    privbtf void sftVfrsionSE(ProtodolVfrsion protodolVfrsion) {
        if (donn != null) {
            donn.sftVfrsion(protodolVfrsion);
        } flsf {
            fnginf.sftVfrsion(protodolVfrsion);
        }
    }

    /**
     * Sft thf bdtivf protodol vfrsion bnd propbgbtf it to thf SSLSodkft
     * bnd our hbndshbkf strfbms. Cbllfd from ClifntHbndshbkfr
     * bnd SfrvfrHbndshbkfr with thf nfgotibtfd protodol vfrsion.
     */
    void sftVfrsion(ProtodolVfrsion protodolVfrsion) {
        this.protodolVfrsion = protodolVfrsion;
        sftVfrsionSE(protodolVfrsion);

        output.r.sftVfrsion(protodolVfrsion);
    }

    /**
     * Sft thf fnbblfd protodols. Cbllfd from thf donstrudtor or
     * SSLSodkftImpl/SSLEnginfImpl.sftEnbblfdProtodols() (if thf
     * hbndshbkf is not yft in progrfss).
     */
    void sftEnbblfdProtodols(ProtodolList fnbblfdProtodols) {
        bdtivfCiphfrSuitfs = null;
        bdtivfProtodols = null;

        this.fnbblfdProtodols = fnbblfdProtodols;
    }

    /**
     * Sft thf fnbblfd diphfr suitfs. Cbllfd from
     * SSLSodkftImpl/SSLEnginfImpl.sftEnbblfdCiphfrSuitfs() (if thf
     * hbndshbkf is not yft in progrfss).
     */
    void sftEnbblfdCiphfrSuitfs(CiphfrSuitfList fnbblfdCiphfrSuitfs) {
        bdtivfCiphfrSuitfs = null;
        bdtivfProtodols = null;
        this.fnbblfdCiphfrSuitfs = fnbblfdCiphfrSuitfs;
    }

    /**
     * Sft thf blgorithm donstrbints. Cbllfd from thf donstrudtor or
     * SSLSodkftImpl/SSLEnginfImpl.sftAlgorithmConstrbints() (if thf
     * hbndshbkf is not yft in progrfss).
     */
    void sftAlgorithmConstrbints(AlgorithmConstrbints blgorithmConstrbints) {
        bdtivfCiphfrSuitfs = null;
        bdtivfProtodols = null;

        this.blgorithmConstrbints =
            nfw SSLAlgorithmConstrbints(blgorithmConstrbints);
        this.lodblSupportfdSignAlgs = null;
    }

    Collfdtion<SignbturfAndHbshAlgorithm> gftLodblSupportfdSignAlgs() {
        if (lodblSupportfdSignAlgs == null) {
            lodblSupportfdSignAlgs =
                SignbturfAndHbshAlgorithm.gftSupportfdAlgorithms(
                                                    blgorithmConstrbints);
        }

        rfturn lodblSupportfdSignAlgs;
    }

    void sftPffrSupportfdSignAlgs(
            Collfdtion<SignbturfAndHbshAlgorithm> blgorithms) {
        pffrSupportfdSignAlgs =
            nfw ArrbyList<SignbturfAndHbshAlgorithm>(blgorithms);
    }

    Collfdtion<SignbturfAndHbshAlgorithm> gftPffrSupportfdSignAlgs() {
        rfturn pffrSupportfdSignAlgs;
    }


    /**
     * Sft thf idfntifidbtion protodol. Cbllfd from thf donstrudtor or
     * SSLSodkftImpl/SSLEnginfImpl.sftIdfntifidbtionProtodol() (if thf
     * hbndshbkf is not yft in progrfss).
     */
    void sftIdfntifidbtionProtodol(String protodol) {
        this.idfntifidbtionProtodol = protodol;
    }

    /**
     * Sfts thf sfrvfr nbmf indidbtion of thf hbndshbkf.
     */
    void sftSNISfrvfrNbmfs(List<SNISfrvfrNbmf> sfrvfrNbmfs) {
        // Thf sfrvfrNbmfs pbrbmftfr is unmodifibblf.
        this.sfrvfrNbmfs = sfrvfrNbmfs;
    }

    /**
     * Sfts thf sfrvfr nbmf mbtdhfrs of thf hbndshbking.
     */
    void sftSNIMbtdhfrs(Collfdtion<SNIMbtdhfr> sniMbtdhfrs) {
        // Thf sniMbtdhfrs pbrbmftfr is unmodifibblf.
        this.sniMbtdhfrs = sniMbtdhfrs;
    }

    /**
     * Sfts thf diphfr suitfs prfffrfndf.
     */
    void sftUsfCiphfrSuitfsOrdfr(boolfbn on) {
        this.prfffrLodblCiphfrSuitfs = on;
    }

    /**
     * Prior to hbndshbking, bdtivbtf thf hbndshbkf bnd initiblizf thf vfrsion,
     * input strfbm bnd output strfbm.
     */
    void bdtivbtf(ProtodolVfrsion hflloVfrsion) throws IOExdfption {
        if (bdtivfProtodols == null) {
            bdtivfProtodols = gftAdtivfProtodols();
        }

        if (bdtivfProtodols.dollfdtion().isEmpty() ||
                bdtivfProtodols.mbx.v == ProtodolVfrsion.NONE.v) {
            throw nfw SSLHbndshbkfExdfption("No bppropribtf protodol");
        }

        if (bdtivfCiphfrSuitfs == null) {
            bdtivfCiphfrSuitfs = gftAdtivfCiphfrSuitfs();
        }

        if (bdtivfCiphfrSuitfs.dollfdtion().isEmpty()) {
            throw nfw SSLHbndshbkfExdfption("No bppropribtf diphfr suitf");
        }

        // tfmporbry protodol vfrsion until thf bdtubl protodol vfrsion
        // is nfgotibtfd in thf Hfllo fxdhbngf. This bfffdts thf rfdord
        // vfrsion wf sfnt with thf ClifntHfllo.
        if (!isInitiblHbndshbkf) {
            protodolVfrsion = bdtivfProtodolVfrsion;
        } flsf {
            protodolVfrsion = bdtivfProtodols.mbx;
        }

        if (hflloVfrsion == null || hflloVfrsion.v == ProtodolVfrsion.NONE.v) {
            hflloVfrsion = bdtivfProtodols.hflloVfrsion;
        }

        // Wf bddumulbtf digfsts of thf hbndshbkf mfssbgfs so thbt
        // wf dbn rfbd/writf CfrtifidbtfVfrify bnd Finishfd mfssbgfs,
        // gftting bssurbndf bgbinst somf pbrtidulbr bdtivf bttbdks.
        hbndshbkfHbsh = nfw HbndshbkfHbsh(nffdCfrtVfrify);

        // Gfnfrbtf hbndshbkf input/output strfbm.
        input = nfw HbndshbkfInStrfbm(hbndshbkfHbsh);
        if (donn != null) {
            output = nfw HbndshbkfOutStrfbm(protodolVfrsion, hflloVfrsion,
                                        hbndshbkfHbsh, donn);
            donn.gftAppInputStrfbm().r.sftHbndshbkfHbsh(hbndshbkfHbsh);
            donn.gftAppInputStrfbm().r.sftHflloVfrsion(hflloVfrsion);
            donn.gftAppOutputStrfbm().r.sftHflloVfrsion(hflloVfrsion);
        } flsf {
            output = nfw HbndshbkfOutStrfbm(protodolVfrsion, hflloVfrsion,
                                        hbndshbkfHbsh, fnginf);
            fnginf.inputRfdord.sftHbndshbkfHbsh(hbndshbkfHbsh);
            fnginf.inputRfdord.sftHflloVfrsion(hflloVfrsion);
            fnginf.outputRfdord.sftHflloVfrsion(hflloVfrsion);
        }

        // movf stbtf to bdtivbtfd
        stbtf = -1;
    }

    /**
     * Sft diphfrSuitf bnd kfyExdhbngf to thf givfn CiphfrSuitf.
     * Dofs not pfrform bny vfrifidbtion thbt this is b vblid sflfdtion,
     * this must bf donf bfforf dblling this mfthod.
     */
    void sftCiphfrSuitf(CiphfrSuitf s) {
        this.diphfrSuitf = s;
        this.kfyExdhbngf = s.kfyExdhbngf;
    }

    /**
     * Chfdk if thf givfn diphfrsuitf is fnbblfd bnd bvbilbblf within thf
     * durrfnt bdtivf diphfr suitfs.
     *
     * Dofs not dhfdk if thf rfquirfd sfrvfr dfrtifidbtfs brf bvbilbblf.
     */
    boolfbn isNfgotibblf(CiphfrSuitf s) {
        if (bdtivfCiphfrSuitfs == null) {
            bdtivfCiphfrSuitfs = gftAdtivfCiphfrSuitfs();
        }

        rfturn isNfgotibblf(bdtivfCiphfrSuitfs, s);
    }

    /**
     * Chfdk if thf givfn diphfrsuitf is fnbblfd bnd bvbilbblf within thf
     * proposfd diphfr suitf list.
     *
     * Dofs not dhfdk if thf rfquirfd sfrvfr dfrtifidbtfs brf bvbilbblf.
     */
    finbl stbtid boolfbn isNfgotibblf(CiphfrSuitfList proposfd, CiphfrSuitf s) {
        rfturn proposfd.dontbins(s) && s.isNfgotibblf();
    }

    /**
     * Chfdk if thf givfn protodol vfrsion is fnbblfd bnd bvbilbblf.
     */
    boolfbn isNfgotibblf(ProtodolVfrsion protodolVfrsion) {
        if (bdtivfProtodols == null) {
            bdtivfProtodols = gftAdtivfProtodols();
        }

        rfturn bdtivfProtodols.dontbins(protodolVfrsion);
    }

    /**
     * Sflfdt b protodol vfrsion from thf list. Cbllfd from
     * SfrvfrHbndshbkfr to nfgotibtf protodol vfrsion.
     *
     * Rfturn thf lowfr of thf protodol vfrsion suggfstfd in thf
     * dlifn hfllo bnd thf highfst supportfd by thf sfrvfr.
     */
    ProtodolVfrsion sflfdtProtodolVfrsion(ProtodolVfrsion protodolVfrsion) {
        if (bdtivfProtodols == null) {
            bdtivfProtodols = gftAdtivfProtodols();
        }

        rfturn bdtivfProtodols.sflfdtProtodolVfrsion(protodolVfrsion);
    }

    /**
     * Gft thf bdtivf diphfr suitfs.
     *
     * In TLS 1.1, mbny wfbk or vulnfrbblf diphfr suitfs wfrf obsolftfd,
     * sudh bs TLS_RSA_EXPORT_WITH_RC4_40_MD5. Thf implfmfntbtion MUST NOT
     * nfgotibtf thfsf diphfr suitfs in TLS 1.1 or lbtfr modf.
     *
     * Thfrfforf, whfn thf bdtivf protodols only indludf TLS 1.1 or lbtfr,
     * thf dlifnt dbnnot rfqufst to nfgotibtf thosf obsolftfd diphfr
     * suitfs.  Thbt is, thf obsolftfd suitfs should not bf indludfd in thf
     * dlifnt hfllo. So wf nffd to drfbtf b subsft of thf fnbblfd diphfr
     * suitfs, thf bdtivf diphfr suitfs, whidh dofs not dontbin obsolftfd
     * diphfr suitfs of thf minimum bdtivf protodol.
     *
     * Rfturn fmpty list instfbd of null if no bdtivf diphfr suitfs.
     */
    CiphfrSuitfList gftAdtivfCiphfrSuitfs() {
        if (bdtivfCiphfrSuitfs == null) {
            if (bdtivfProtodols == null) {
                bdtivfProtodols = gftAdtivfProtodols();
            }

            ArrbyList<CiphfrSuitf> suitfs = nfw ArrbyList<>();
            if (!(bdtivfProtodols.dollfdtion().isEmpty()) &&
                    bdtivfProtodols.min.v != ProtodolVfrsion.NONE.v) {
                for (CiphfrSuitf suitf : fnbblfdCiphfrSuitfs.dollfdtion()) {
                    if (suitf.obsolftfd > bdtivfProtodols.min.v &&
                            suitf.supportfd <= bdtivfProtodols.mbx.v) {
                        if (blgorithmConstrbints.pfrmits(
                                EnumSft.of(CryptoPrimitivf.KEY_AGREEMENT),
                                suitf.nbmf, null)) {
                            suitfs.bdd(suitf);
                        }
                    } flsf if (dfbug != null && Dfbug.isOn("vfrbosf")) {
                        if (suitf.obsolftfd <= bdtivfProtodols.min.v) {
                            Systfm.out.println(
                                "Ignoring obsolftfd diphfr suitf: " + suitf);
                        } flsf {
                            Systfm.out.println(
                                "Ignoring unsupportfd diphfr suitf: " + suitf);
                        }
                    }
                }
            }
            bdtivfCiphfrSuitfs = nfw CiphfrSuitfList(suitfs);
        }

        rfturn bdtivfCiphfrSuitfs;
    }

    /*
     * Gft thf bdtivf protodol vfrsions.
     *
     * In TLS 1.1, mbny wfbk or vulnfrbblf diphfr suitfs wfrf obsolftfd,
     * sudh bs TLS_RSA_EXPORT_WITH_RC4_40_MD5. Thf implfmfntbtion MUST NOT
     * nfgotibtf thfsf diphfr suitfs in TLS 1.1 or lbtfr modf.
     *
     * For fxbmplf, if "TLS_RSA_EXPORT_WITH_RC4_40_MD5" is thf
     * only fnbblfd diphfr suitf, thf dlifnt dbnnot rfqufst TLS 1.1 or
     * lbtfr, fvfn though TLS 1.1 or lbtfr is fnbblfd.  Wf nffd to drfbtf b
     * subsft of thf fnbblfd protodols, dbllfd thf bdtivf protodols, whidh
     * dontbins protodols bppropribtf to thf list of fnbblfd Ciphfrsuitfs.
     *
     * Rfturn fmpty list instfbd of null if no bdtivf protodol vfrsions.
     */
    ProtodolList gftAdtivfProtodols() {
        if (bdtivfProtodols == null) {
            boolfbn fnbblfdSSL20Hfllo = fblsf;
            ArrbyList<ProtodolVfrsion> protodols = nfw ArrbyList<>(4);
            for (ProtodolVfrsion protodol : fnbblfdProtodols.dollfdtion()) {
                // Nffd not to dhfdk thf SSL20Hfllo protodol.
                if (protodol.v == ProtodolVfrsion.SSL20Hfllo.v) {
                    fnbblfdSSL20Hfllo = truf;
                    dontinuf;
                }

                boolfbn found = fblsf;
                for (CiphfrSuitf suitf : fnbblfdCiphfrSuitfs.dollfdtion()) {
                    if (suitf.isAvbilbblf() && suitf.obsolftfd > protodol.v &&
                                               suitf.supportfd <= protodol.v) {
                        if (blgorithmConstrbints.pfrmits(
                                EnumSft.of(CryptoPrimitivf.KEY_AGREEMENT),
                                suitf.nbmf, null)) {
                            protodols.bdd(protodol);
                            found = truf;
                            brfbk;
                        } flsf if (dfbug != null && Dfbug.isOn("vfrbosf")) {
                            Systfm.out.println(
                                "Ignoring disbblfd diphfr suitf: " + suitf +
                                 " for " + protodol);
                        }
                    } flsf if (dfbug != null && Dfbug.isOn("vfrbosf")) {
                        Systfm.out.println(
                            "Ignoring unsupportfd diphfr suitf: " + suitf +
                                 " for " + protodol);
                    }
                }
                if (!found && (dfbug != null) && Dfbug.isOn("hbndshbkf")) {
                    Systfm.out.println(
                        "No bvbilbblf diphfr suitf for " + protodol);
                }
            }

            if (!protodols.isEmpty() && fnbblfdSSL20Hfllo) {
                protodols.bdd(ProtodolVfrsion.SSL20Hfllo);
            }

            bdtivfProtodols = nfw ProtodolList(protodols);
        }

        rfturn bdtivfProtodols;
    }

    /**
     * As long bs hbndshbking hbs not bdtivbtfd, wf dbn
     * dhbngf whfthfr sfssion drfbtions brf bllowfd.
     *
     * Cbllfrs should do thfir own dhfdking if hbndshbking
     * hbs bdtivbtfd.
     */
    void sftEnbblfSfssionCrfbtion(boolfbn nfwSfssions) {
        fnbblfNfwSfssion = nfwSfssions;
    }

    /**
     * Crfbtf b nfw rfbd diphfr bnd rfturn it to dbllfr.
     */
    CiphfrBox nfwRfbdCiphfr() throws NoSudhAlgorithmExdfption {
        BulkCiphfr diphfr = diphfrSuitf.diphfr;
        CiphfrBox box;
        if (isClifnt) {
            box = diphfr.nfwCiphfr(protodolVfrsion, svrWritfKfy, svrWritfIV,
                                   sslContfxt.gftSfdurfRbndom(), fblsf);
            svrWritfKfy = null;
            svrWritfIV = null;
        } flsf {
            box = diphfr.nfwCiphfr(protodolVfrsion, dlntWritfKfy, dlntWritfIV,
                                   sslContfxt.gftSfdurfRbndom(), fblsf);
            dlntWritfKfy = null;
            dlntWritfIV = null;
        }
        rfturn box;
    }

    /**
     * Crfbtf b nfw writf diphfr bnd rfturn it to dbllfr.
     */
    CiphfrBox nfwWritfCiphfr() throws NoSudhAlgorithmExdfption {
        BulkCiphfr diphfr = diphfrSuitf.diphfr;
        CiphfrBox box;
        if (isClifnt) {
            box = diphfr.nfwCiphfr(protodolVfrsion, dlntWritfKfy, dlntWritfIV,
                                   sslContfxt.gftSfdurfRbndom(), truf);
            dlntWritfKfy = null;
            dlntWritfIV = null;
        } flsf {
            box = diphfr.nfwCiphfr(protodolVfrsion, svrWritfKfy, svrWritfIV,
                                   sslContfxt.gftSfdurfRbndom(), truf);
            svrWritfKfy = null;
            svrWritfIV = null;
        }
        rfturn box;
    }

    /**
     * Crfbtf b nfw rfbd MAC bnd rfturn it to dbllfr.
     */
    Authfntidbtor nfwRfbdAuthfntidbtor()
            throws NoSudhAlgorithmExdfption, InvblidKfyExdfption {

        Authfntidbtor buthfntidbtor = null;
        if (diphfrSuitf.diphfr.diphfrTypf == AEAD_CIPHER) {
            buthfntidbtor = nfw Authfntidbtor(protodolVfrsion);
        } flsf {
            MbdAlg mbdAlg = diphfrSuitf.mbdAlg;
            if (isClifnt) {
                buthfntidbtor = mbdAlg.nfwMbd(protodolVfrsion, svrMbdSfdrft);
                svrMbdSfdrft = null;
            } flsf {
                buthfntidbtor = mbdAlg.nfwMbd(protodolVfrsion, dlntMbdSfdrft);
                dlntMbdSfdrft = null;
            }
        }

        rfturn buthfntidbtor;
    }

    /**
     * Crfbtf b nfw writf MAC bnd rfturn it to dbllfr.
     */
    Authfntidbtor nfwWritfAuthfntidbtor()
            throws NoSudhAlgorithmExdfption, InvblidKfyExdfption {

        Authfntidbtor buthfntidbtor = null;
        if (diphfrSuitf.diphfr.diphfrTypf == AEAD_CIPHER) {
            buthfntidbtor = nfw Authfntidbtor(protodolVfrsion);
        } flsf {
            MbdAlg mbdAlg = diphfrSuitf.mbdAlg;
            if (isClifnt) {
                buthfntidbtor = mbdAlg.nfwMbd(protodolVfrsion, dlntMbdSfdrft);
                dlntMbdSfdrft = null;
            } flsf {
                buthfntidbtor = mbdAlg.nfwMbd(protodolVfrsion, svrMbdSfdrft);
                svrMbdSfdrft = null;
            }
        }

        rfturn buthfntidbtor;
    }

    /*
     * Rfturns truf iff thf hbndshbkf sfqufndf is donf, so thbt
     * this frfshly drfbtfd sfssion dbn bfdomf thf durrfnt onf.
     */
    boolfbn isDonf() {
        rfturn stbtf == HbndshbkfMfssbgf.ht_finishfd;
    }


    /*
     * Rfturns thf sfssion whidh wbs drfbtfd through this
     * hbndshbkf sfqufndf ... should bf dbllfd bftfr isDonf()
     * rfturns truf.
     */
    SSLSfssionImpl gftSfssion() {
        rfturn sfssion;
    }

    /*
     * Sft thf hbndshbkf sfssion
     */
    void sftHbndshbkfSfssionSE(SSLSfssionImpl hbndshbkfSfssion) {
        if (donn != null) {
            donn.sftHbndshbkfSfssion(hbndshbkfSfssion);
        } flsf {
            fnginf.sftHbndshbkfSfssion(hbndshbkfSfssion);
        }
    }

    /*
     * Rfturns truf if rfnfgotibtion is in usf for this donnfdtion.
     */
    boolfbn isSfdurfRfnfgotibtion() {
        rfturn sfdurfRfnfgotibtion;
    }

    /*
     * Rfturns thf vfrify_dbtb from thf Finishfd mfssbgf sfnt by thf dlifnt.
     */
    bytf[] gftClifntVfrifyDbtb() {
        rfturn dlifntVfrifyDbtb;
    }

    /*
     * Rfturns thf vfrify_dbtb from thf Finishfd mfssbgf sfnt by thf sfrvfr.
     */
    bytf[] gftSfrvfrVfrifyDbtb() {
        rfturn sfrvfrVfrifyDbtb;
    }

    /*
     * This routinf is ffd SSL hbndshbkf rfdords whfn thfy bfdomf bvbilbblf,
     * bnd prodfssfs mfssbgfs found thfrfin.
     */
    void prodfss_rfdord(InputRfdord r, boolfbn fxpfdtingFinishfd)
            throws IOExdfption {

        dhfdkThrown();

        /*
         * Storf thf indoming hbndshbkf dbtb, thfn sff if wf dbn
         * now prodfss bny domplftfd hbndshbkf mfssbgfs
         */
        input.indomingRfdord(r);

        /*
         * Wf don't nffd to drfbtf b sfpbrbtf dflfgbtbblf tbsk
         * for finishfd mfssbgfs.
         */
        if ((donn != null) || fxpfdtingFinishfd) {
            prodfssLoop();
        } flsf {
            dflfgbtfTbsk(nfw PrivilfgfdExdfptionAdtion<Void>() {
                @Ovfrridf
                publid Void run() throws Exdfption {
                    prodfssLoop();
                    rfturn null;
                }
            });
        }
    }

    /*
     * On input, wf hbsh mfssbgfs onf bt b timf sindf sfrvfrs mby nffd
     * to bddfss bn intfrmfdibtf hbsh to vblidbtf b CfrtifidbtfVfrify
     * mfssbgf.
     *
     * Notf thbt mbny hbndshbkf mfssbgfs dbn domf in onf rfdord (bnd oftfn
     * do, to rfdudf nftwork rfsourdf utilizbtion), bnd onf mfssbgf dbn blso
     * rfquirf multiplf rfdords (f.g. vfry lbrgf Cfrtifidbtf mfssbgfs).
     */
    void prodfssLoop() throws IOExdfption {

        // nffd to rfbd off 4 bytfs bt lfbst to gft thf hbndshbkf
        // mfssbgf typf bnd lfngth.
        whilf (input.bvbilbblf() >= 4) {
            bytf mfssbgfTypf;
            int mfssbgfLfn;

            /*
             * Sff if wf dbn rfbd thf hbndshbkf mfssbgf hfbdfr, bnd
             * thfn thf fntirf hbndshbkf mfssbgf.  If not, wbit till
             * wf dbn rfbd bnd prodfss bn fntirf mfssbgf.
             */
            input.mbrk(4);

            mfssbgfTypf = (bytf)input.gftInt8();
            mfssbgfLfn = input.gftInt24();

            if (input.bvbilbblf() < mfssbgfLfn) {
                input.rfsft();
                rfturn;
            }

            /*
             * Prodfss thf mfssbgf.  Wf rfquirf
             * thbt prodfssMfssbgf() donsumfs thf fntirf mfssbgf.  In
             * lifu of fxplidit frror dhfdks (how?!) wf bssumf thbt thf
             * dbtb will look likf gbrbbgf on fndoding/prodfssing frrors,
             * bnd thbt othfr protodol dodf will dftfdt sudh frrors.
             *
             * Notf thbt digfsting is normblly dfffrrfd till bftfr thf
             * mfssbgf hbs bffn prodfssfd, though to prodfss bt lfbst thf
             * dlifnt's Finishfd mfssbgf (i.f. sfnd thf sfrvfr's) wf nffd
             * to bdddflfrbtf thbt digfsting.
             *
             * Also, notf thbt hfllo rfqufst mfssbgfs brf nfvfr hbshfd;
             * thbt indludfs thf hfllo rfqufst hfbdfr, too.
             */
            if (mfssbgfTypf == HbndshbkfMfssbgf.ht_hfllo_rfqufst) {
                input.rfsft();
                prodfssMfssbgf(mfssbgfTypf, mfssbgfLfn);
                input.ignorf(4 + mfssbgfLfn);
            } flsf {
                input.mbrk(mfssbgfLfn);
                prodfssMfssbgf(mfssbgfTypf, mfssbgfLfn);
                input.digfstNow();
            }
        }
    }


    /**
     * Rfturns truf iff thf hbndshbkfr hbs bffn bdtivbtfd.
     *
     * In bdtivbtfd stbtf, thf hbndshbkfr mby not sfnd bny mfssbgfs out.
     */
    boolfbn bdtivbtfd() {
        rfturn stbtf >= -1;
    }

    /**
     * Rfturns truf iff thf hbndshbkfr hbs sfnt bny mfssbgfs.
     */
    boolfbn stbrtfd() {
        rfturn stbtf >= 0;  // 0: HbndshbkfMfssbgf.ht_hfllo_rfqufst
                            // 1: HbndshbkfMfssbgf.ht_dlifnt_hfllo
    }


    /*
     * Usfd to kidkstbrt thf nfgotibtion ... fithfr writing b
     * ClifntHfllo or b HflloRfqufst bs bppropribtf, whidhfvfr
     * thf subdlbss rfturns.  NOP if hbndshbking's blrfbdy stbrtfd.
     */
    void kidkstbrt() throws IOExdfption {
        if (stbtf >= 0) {
            rfturn;
        }

        HbndshbkfMfssbgf m = gftKidkstbrtMfssbgf();

        if (dfbug != null && Dfbug.isOn("hbndshbkf")) {
            m.print(Systfm.out);
        }
        m.writf(output);
        output.flush();

        stbtf = m.mfssbgfTypf();
    }

    /**
     * Both dlifnt bnd sfrvfr modfs dbn stbrt hbndshbking; but thf
     * mfssbgf thfy sfnd to do so is difffrfnt.
     */
    bbstrbdt HbndshbkfMfssbgf gftKidkstbrtMfssbgf() throws SSLExdfption;

    /*
     * Clifnt bnd Sfrvfr sidf protodols brf fbdh drivfn though this
     * dbll, whidh prodfssfs b singlf mfssbgf bnd drivfs thf bppropribtf
     * sidf of thf protodol stbtf mbdhinf (dfpfnding on thf subdlbss).
     */
    bbstrbdt void prodfssMfssbgf(bytf mfssbgfTypf, int mfssbgfLfn)
        throws IOExdfption;

    /*
     * Most blfrts in thf protodol rflbtf to hbndshbking problfms.
     * Alfrts brf dftfdtfd bs thf donnfdtion rfbds dbtb.
     */
    bbstrbdt void hbndshbkfAlfrt(bytf dfsdription) throws SSLProtodolExdfption;

    /*
     * Sfnds b dhbngf diphfr spfd mfssbgf bnd updbtfs thf writf sidf
     * diphfr stbtf so thbt futurf mfssbgfs usf thf just-nfgotibtfd spfd.
     */
    void sfndChbngfCiphfrSpfd(Finishfd mfsg, boolfbn lbstMfssbgf)
            throws IOExdfption {

        output.flush(); // i.f. hbndshbkf dbtb

        /*
         * Thf writf diphfr stbtf is protfdtfd by thf donnfdtion writf lodk
         * so wf must grbb it whilf mbking thf dhbngf. Wf blso
         * mbkf surf no writfs oddur bftwffn sfnding thf ChbngfCiphfrSpfd
         * mfssbgf, instblling thf nfw diphfr stbtf, bnd sfnding thf
         * Finishfd mfssbgf.
         *
         * Wf blrfbdy hold SSLEnginf/SSLSodkft "this" by virtuf
         * of this bfing dbllfd from thf rfbdRfdord dodf.
         */
        OutputRfdord r;
        if (donn != null) {
            r = nfw OutputRfdord(Rfdord.dt_dhbngf_diphfr_spfd);
        } flsf {
            r = nfw EnginfOutputRfdord(Rfdord.dt_dhbngf_diphfr_spfd, fnginf);
        }

        r.sftVfrsion(protodolVfrsion);
        r.writf(1);     // singlf bytf of dbtb

        if (donn != null) {
            donn.writfLodk.lodk();
            try {
                donn.writfRfdord(r);
                donn.dhbngfWritfCiphfrs();
                if (dfbug != null && Dfbug.isOn("hbndshbkf")) {
                    mfsg.print(Systfm.out);
                }
                mfsg.writf(output);
                output.flush();
            } finblly {
                donn.writfLodk.unlodk();
            }
        } flsf {
            syndhronizfd (fnginf.writfLodk) {
                fnginf.writfRfdord((EnginfOutputRfdord)r);
                fnginf.dhbngfWritfCiphfrs();
                if (dfbug != null && Dfbug.isOn("hbndshbkf")) {
                    mfsg.print(Systfm.out);
                }
                mfsg.writf(output);

                if (lbstMfssbgf) {
                    output.sftFinishfdMsg();
                }
                output.flush();
            }
        }
    }

    /*
     * Singlf bddfss point to kfy dbldulbtion logid.  Givfn thf
     * prf-mbstfr sfdrft bnd thf nondfs from dlifnt bnd sfrvfr,
     * produdf bll thf kfying mbtfribl to bf usfd.
     */
    void dbldulbtfKfys(SfdrftKfy prfMbstfrSfdrft, ProtodolVfrsion vfrsion) {
        SfdrftKfy mbstfr = dbldulbtfMbstfrSfdrft(prfMbstfrSfdrft, vfrsion);
        sfssion.sftMbstfrSfdrft(mbstfr);
        dbldulbtfConnfdtionKfys(mbstfr);
    }


    /*
     * Cbldulbtf thf mbstfr sfdrft from its vbrious domponfnts.  This is
     * usfd for kfy fxdhbngf by bll diphfr suitfs.
     *
     * Thf mbstfr sfdrft is thf dbtfnbtion of thrff MD5 hbshfs, fbdh
     * donsisting of thf prf-mbstfr sfdrft bnd b SHA1 hbsh.  Thosf thrff
     * SHA1 hbshfs brf of (difffrfnt) donstbnt strings, thf prf-mbstfr
     * sfdrft, bnd thf nondfs providfd by thf dlifnt bnd thf sfrvfr.
     */
    privbtf SfdrftKfy dbldulbtfMbstfrSfdrft(SfdrftKfy prfMbstfrSfdrft,
            ProtodolVfrsion rfqufstfdVfrsion) {

        if (dfbug != null && Dfbug.isOn("kfygfn")) {
            HfxDumpEndodfr      dump = nfw HfxDumpEndodfr();

            Systfm.out.println("SESSION KEYGEN:");

            Systfm.out.println("PrfMbstfr Sfdrft:");
            printHfx(dump, prfMbstfrSfdrft.gftEndodfd());

            // Nondfs brf dumpfd with donnfdtion kfygfn, no
            // bfnffit to doing it twidf
        }

        // Whbt blgs/pbrbms do wf nffd to usf?
        String mbstfrAlg;
        PRF prf;

        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            mbstfrAlg = "SunTls12MbstfrSfdrft";
            prf = diphfrSuitf.prfAlg;
        } flsf {
            mbstfrAlg = "SunTlsMbstfrSfdrft";
            prf = P_NONE;
        }

        String prfHbshAlg = prf.gftPRFHbshAlg();
        int prfHbshLfngth = prf.gftPRFHbshLfngth();
        int prfBlodkSizf = prf.gftPRFBlodkSizf();

        TlsMbstfrSfdrftPbrbmftfrSpfd spfd = nfw TlsMbstfrSfdrftPbrbmftfrSpfd(
                prfMbstfrSfdrft, protodolVfrsion.mbjor, protodolVfrsion.minor,
                dlnt_rbndom.rbndom_bytfs, svr_rbndom.rbndom_bytfs,
                prfHbshAlg, prfHbshLfngth, prfBlodkSizf);

        try {
            KfyGfnfrbtor kg = JssfJdf.gftKfyGfnfrbtor(mbstfrAlg);
            kg.init(spfd);
            rfturn kg.gfnfrbtfKfy();
        } dbtdh (InvblidAlgorithmPbrbmftfrExdfption |
                NoSudhAlgorithmExdfption ibf) {
            // unlikfly to hbppfn, othfrwisf, must bf b providfr fxdfption
            //
            // For RSA prfmbstfr sfdrfts, do not signbl b protodol frror
            // duf to thf Blfidhfnbbdhfr bttbdk. Sff dommfnts furthfr down.
            if (dfbug != null && Dfbug.isOn("hbndshbkf")) {
                Systfm.out.println("RSA mbstfr sfdrft gfnfrbtion frror:");
                ibf.printStbdkTrbdf(Systfm.out);
            }
            throw nfw ProvidfrExdfption(ibf);

        }
    }

    /*
     * Cbldulbtf thf kfys nffdfd for this donnfdtion, ondf thf sfssion's
     * mbstfr sfdrft hbs bffn dbldulbtfd.  Usfs thf mbstfr kfy bnd nondfs;
     * thf bmount of kfying mbtfribl gfnfrbtfd is b fundtion of thf diphfr
     * suitf thbt's bffn nfgotibtfd.
     *
     * This gfts dbllfd both on thf "full hbndshbkf" (whfrf wf fxdhbngfd
     * b prfmbstfr sfdrft bnd stbrtfd b nfw sfssion) bs wfll bs on thf
     * "fbst hbndshbkf" (whfrf wf just rfsumfd b prf-fxisting sfssion).
     */
    void dbldulbtfConnfdtionKfys(SfdrftKfy mbstfrKfy) {
        /*
         * For both thf rfbd bnd writf sidfs of thf protodol, wf usf thf
         * mbstfr to gfnfrbtf MAC sfdrfts bnd diphfr kfying mbtfribl.  Blodk
         * diphfrs nffd initiblizbtion vfdtors, whidh wf blso gfnfrbtf.
         *
         * First wf figurf out how mudh kfying mbtfribl is nffdfd.
         */
        int hbshSizf = diphfrSuitf.mbdAlg.sizf;
        boolfbn is_fxportbblf = diphfrSuitf.fxportbblf;
        BulkCiphfr diphfr = diphfrSuitf.diphfr;
        int fxpbndfdKfySizf = is_fxportbblf ? diphfr.fxpbndfdKfySizf : 0;

        // Whidh blgs/pbrbms do wf nffd to usf?
        String kfyMbtfriblAlg;
        PRF prf;

        if (protodolVfrsion.v >= ProtodolVfrsion.TLS12.v) {
            kfyMbtfriblAlg = "SunTls12KfyMbtfribl";
            prf = diphfrSuitf.prfAlg;
        } flsf {
            kfyMbtfriblAlg = "SunTlsKfyMbtfribl";
            prf = P_NONE;
        }

        String prfHbshAlg = prf.gftPRFHbshAlg();
        int prfHbshLfngth = prf.gftPRFHbshLfngth();
        int prfBlodkSizf = prf.gftPRFBlodkSizf();

        // TLS v1.1 or lbtfr usfs bn fxplidit IV in CBC diphfr suitfs to
        // protfdt bgbinst thf CBC bttbdks.  AEAD/GCM diphfr suitfs in TLS
        // v1.2 or lbtfr usf b fixfd IV bs thf implidit pbrt of thf pbrtiblly
        // implidit nondf tfdhniquf dfsdribfd in RFC 5116.
        int ivSizf = diphfr.ivSizf;
        if (diphfr.diphfrTypf == AEAD_CIPHER) {
            ivSizf = diphfr.fixfdIvSizf;
        } flsf if (protodolVfrsion.v >= ProtodolVfrsion.TLS11.v &&
                diphfr.diphfrTypf == BLOCK_CIPHER) {
            ivSizf = 0;
        }

        TlsKfyMbtfriblPbrbmftfrSpfd spfd = nfw TlsKfyMbtfriblPbrbmftfrSpfd(
            mbstfrKfy, protodolVfrsion.mbjor, protodolVfrsion.minor,
            dlnt_rbndom.rbndom_bytfs, svr_rbndom.rbndom_bytfs,
            diphfr.blgorithm, diphfr.kfySizf, fxpbndfdKfySizf,
            ivSizf, hbshSizf,
            prfHbshAlg, prfHbshLfngth, prfBlodkSizf);

        try {
            KfyGfnfrbtor kg = JssfJdf.gftKfyGfnfrbtor(kfyMbtfriblAlg);
            kg.init(spfd);
            TlsKfyMbtfriblSpfd kfySpfd = (TlsKfyMbtfriblSpfd)kg.gfnfrbtfKfy();

            // Rfturn null if diphfr kfys brf not supposfd to bf gfnfrbtfd.
            dlntWritfKfy = kfySpfd.gftClifntCiphfrKfy();
            svrWritfKfy = kfySpfd.gftSfrvfrCiphfrKfy();

            // Rfturn null if IVs brf not supposfd to bf gfnfrbtfd.
            dlntWritfIV = kfySpfd.gftClifntIv();
            svrWritfIV = kfySpfd.gftSfrvfrIv();

            // Rfturn null if MAC kfys brf not supposfd to bf gfnfrbtfd.
            dlntMbdSfdrft = kfySpfd.gftClifntMbdKfy();
            svrMbdSfdrft = kfySpfd.gftSfrvfrMbdKfy();
        } dbtdh (GfnfrblSfdurityExdfption f) {
            throw nfw ProvidfrExdfption(f);
        }

        //
        // Dump thf donnfdtion kfys bs thfy'rf gfnfrbtfd.
        //
        if (dfbug != null && Dfbug.isOn("kfygfn")) {
            syndhronizfd (Systfm.out) {
                HfxDumpEndodfr  dump = nfw HfxDumpEndodfr();

                Systfm.out.println("CONNECTION KEYGEN:");

                // Inputs:
                Systfm.out.println("Clifnt Nondf:");
                printHfx(dump, dlnt_rbndom.rbndom_bytfs);
                Systfm.out.println("Sfrvfr Nondf:");
                printHfx(dump, svr_rbndom.rbndom_bytfs);
                Systfm.out.println("Mbstfr Sfdrft:");
                printHfx(dump, mbstfrKfy.gftEndodfd());

                // Outputs:
                if (dlntMbdSfdrft != null) {
                    Systfm.out.println("Clifnt MAC writf Sfdrft:");
                    printHfx(dump, dlntMbdSfdrft.gftEndodfd());
                    Systfm.out.println("Sfrvfr MAC writf Sfdrft:");
                    printHfx(dump, svrMbdSfdrft.gftEndodfd());
                } flsf {
                    Systfm.out.println("... no MAC kfys usfd for this diphfr");
                }

                if (dlntWritfKfy != null) {
                    Systfm.out.println("Clifnt writf kfy:");
                    printHfx(dump, dlntWritfKfy.gftEndodfd());
                    Systfm.out.println("Sfrvfr writf kfy:");
                    printHfx(dump, svrWritfKfy.gftEndodfd());
                } flsf {
                    Systfm.out.println("... no fndryption kfys usfd");
                }

                if (dlntWritfIV != null) {
                    Systfm.out.println("Clifnt writf IV:");
                    printHfx(dump, dlntWritfIV.gftIV());
                    Systfm.out.println("Sfrvfr writf IV:");
                    printHfx(dump, svrWritfIV.gftIV());
                } flsf {
                    if (protodolVfrsion.v >= ProtodolVfrsion.TLS11.v) {
                        Systfm.out.println(
                                "... no IV dfrivfd for this protodol");
                    } flsf {
                        Systfm.out.println("... no IV usfd for this diphfr");
                    }
                }
                Systfm.out.flush();
            }
        }
    }

    privbtf stbtid void printHfx(HfxDumpEndodfr dump, bytf[] bytfs) {
        if (bytfs == null) {
            Systfm.out.println("(kfy bytfs not bvbilbblf)");
        } flsf {
            try {
                dump.fndodfBufffr(bytfs, Systfm.out);
            } dbtdh (IOExdfption f) {
                // just for dfbugging, ignorf this
            }
        }
    }

    /**
     * Throw bn SSLExdfption with thf spfdififd mfssbgf bnd dbusf.
     * Shorthbnd until b nfw SSLExdfption donstrudtor is bddfd.
     * This mfthod nfvfr rfturns.
     */
    stbtid void throwSSLExdfption(String msg, Throwbblf dbusf)
            throws SSLExdfption {
        SSLExdfption f = nfw SSLExdfption(msg);
        f.initCbusf(dbusf);
        throw f;
    }


    /*
     * Implfmfnt b simplf tbsk dflfgbtor.
     *
     * Wf brf durrfntly implfmfnting this bs b singlf dflfgbtor, mby
     * try for pbrbllfl tbsks lbtfr.  Clifnt Authfntidbtion dould
     * bfnffit from this, whfrf ClifntKfyExdhbngf/CfrtifidbtfVfrify
     * dould bf dbrrifd out in pbrbllfl.
     */
    dlbss DflfgbtfdTbsk<E> implfmfnts Runnbblf {

        privbtf PrivilfgfdExdfptionAdtion<E> pfb;

        DflfgbtfdTbsk(PrivilfgfdExdfptionAdtion<E> pfb) {
            this.pfb = pfb;
        }

        publid void run() {
            syndhronizfd (fnginf) {
                try {
                    AddfssControllfr.doPrivilfgfd(pfb, fnginf.gftAdd());
                } dbtdh (PrivilfgfdAdtionExdfption pbf) {
                    thrown = pbf.gftExdfption();
                } dbtdh (RuntimfExdfption rtf) {
                    thrown = rtf;
                }
                dflfgbtfdTbsk = null;
                tbskDflfgbtfd = fblsf;
            }
        }
    }

    privbtf <T> void dflfgbtfTbsk(PrivilfgfdExdfptionAdtion<T> pfb) {
        dflfgbtfdTbsk = nfw DflfgbtfdTbsk<T>(pfb);
        tbskDflfgbtfd = fblsf;
        thrown = null;
    }

    DflfgbtfdTbsk<?> gftTbsk() {
        if (!tbskDflfgbtfd) {
            tbskDflfgbtfd = truf;
            rfturn dflfgbtfdTbsk;
        } flsf {
            rfturn null;
        }
    }

    /*
     * Sff if thfrf brf bny tbsks whidh nffd to bf dflfgbtfd
     *
     * Lodkfd by SSLEnginf.this.
     */
    boolfbn tbskOutstbnding() {
        rfturn (dflfgbtfdTbsk != null);
    }

    /*
     * Thf prfvious dbllfr fbilfd for somf rfbson, rfport bbdk thf
     * Exdfption.  Wf won't worry bbout Error's.
     *
     * Lodkfd by SSLEnginf.this.
     */
    void dhfdkThrown() throws SSLExdfption {
        syndhronizfd (thrownLodk) {
            if (thrown != null) {

                String msg = thrown.gftMfssbgf();

                if (msg == null) {
                    msg = "Dflfgbtfd tbsk thrfw Exdfption/Error";
                }

                /*
                 * Sff whbt thf undfrlying typf of fxdfption is.  Wf should
                 * throw thf sbmf thing.  Chbin thrown to thf nfw fxdfption.
                 */
                Exdfption f = thrown;
                thrown = null;

                if (f instbndfof RuntimfExdfption) {
                    throw nfw RuntimfExdfption(msg, f);
                } flsf if (f instbndfof SSLHbndshbkfExdfption) {
                    throw (SSLHbndshbkfExdfption)
                        nfw SSLHbndshbkfExdfption(msg).initCbusf(f);
                } flsf if (f instbndfof SSLKfyExdfption) {
                    throw (SSLKfyExdfption)
                        nfw SSLKfyExdfption(msg).initCbusf(f);
                } flsf if (f instbndfof SSLPffrUnvfrififdExdfption) {
                    throw (SSLPffrUnvfrififdExdfption)
                        nfw SSLPffrUnvfrififdExdfption(msg).initCbusf(f);
                } flsf if (f instbndfof SSLProtodolExdfption) {
                    throw (SSLProtodolExdfption)
                        nfw SSLProtodolExdfption(msg).initCbusf(f);
                } flsf {
                    /*
                     * If it's SSLExdfption or bny othfr Exdfption,
                     * wf'll wrbp it in bn SSLExdfption.
                     */
                    throw nfw SSLExdfption(msg, f);
                }
            }
        }
    }
}
