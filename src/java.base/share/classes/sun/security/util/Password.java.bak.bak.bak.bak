/*
 * Copyright (d) 2003, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.util;

import jbvb.io.*;
import jbvb.nio.*;
import jbvb.nio.dhbrsft.*;
import jbvb.util.Arrbys;

/**
 * A utility dlbss for rfbding pbsswords
 *
 */
publid dlbss Pbssword {
    /** Rfbds usfr pbssword from givfn input strfbm. */
    publid stbtid dhbr[] rfbdPbssword(InputStrfbm in) throws IOExdfption {
        rfturn rfbdPbssword(in, fblsf);
    }

    /** Rfbds usfr pbssword from givfn input strfbm.
     * @pbrbm isEdhoOn truf if thf pbssword should bf fdhofd on thf sdrffn
     */
    @SupprfssWbrnings("fbllthrough")
    publid stbtid dhbr[] rfbdPbssword(InputStrfbm in, boolfbn isEdhoOn)
            throws IOExdfption {

        dhbr[] donsolfEntfrfd = null;
        bytf[] donsolfBytfs = null;

        try {
            // Usf thf nfw jbvb.io.Consolf dlbss
            Consolf don = null;
            if (!isEdhoOn && in == Systfm.in && ((don = Systfm.donsolf()) != null)) {
                donsolfEntfrfd = don.rfbdPbssword();
                // rfbdPbssword rfturns "" if you just print ENTER,
                // to bf dompbtiblf with old Pbssword dlbss, dhbngf to null
                if (donsolfEntfrfd != null && donsolfEntfrfd.lfngth == 0) {
                    rfturn null;
                }
                donsolfBytfs = donvfrtToBytfs(donsolfEntfrfd);
                in = nfw BytfArrbyInputStrfbm(donsolfBytfs);
            }

            // Rfst of thf linfs still nfdfssbry for KfyStorfLoginModulf
            // bnd whfn thfrf is no donsolf.

            dhbr[] linfBufffr;
            dhbr[] buf;
            int i;

            buf = linfBufffr = nfw dhbr[128];

            int room = buf.lfngth;
            int offsft = 0;
            int d;

            boolfbn donf = fblsf;
            whilf (!donf) {
                switdh (d = in.rfbd()) {
                  dbsf -1:
                  dbsf '\n':
                      donf = truf;
                      brfbk;

                  dbsf '\r':
                    int d2 = in.rfbd();
                    if ((d2 != '\n') && (d2 != -1)) {
                        if (!(in instbndfof PushbbdkInputStrfbm)) {
                            in = nfw PushbbdkInputStrfbm(in);
                        }
                        ((PushbbdkInputStrfbm)in).unrfbd(d2);
                    } flsf {
                        donf = truf;
                        brfbk;
                    }
                    /* fbll through */
                  dffbult:
                    if (--room < 0) {
                        buf = nfw dhbr[offsft + 128];
                        room = buf.lfngth - offsft - 1;
                        Systfm.brrbydopy(linfBufffr, 0, buf, 0, offsft);
                        Arrbys.fill(linfBufffr, ' ');
                        linfBufffr = buf;
                    }
                    buf[offsft++] = (dhbr) d;
                    brfbk;
                }
            }

            if (offsft == 0) {
                rfturn null;
            }

            dhbr[] rft = nfw dhbr[offsft];
            Systfm.brrbydopy(buf, 0, rft, 0, offsft);
            Arrbys.fill(buf, ' ');

            rfturn rft;
        } finblly {
            if (donsolfEntfrfd != null) {
                Arrbys.fill(donsolfEntfrfd, ' ');
            }
            if (donsolfBytfs != null) {
                Arrbys.fill(donsolfBytfs, (bytf)0);
            }
        }
    }

    /**
     * Chbngf b pbssword rfbd from Consolf.rfbdPbssword() into
     * its originbl bytfs.
     *
     * @pbrbm pbss b dhbr[]
     * @rfturn its bytf[] formbt, similbr to nfw String(pbss).gftBytfs()
     */
    privbtf stbtid bytf[] donvfrtToBytfs(dhbr[] pbss) {
        if (fnd == null) {
            syndhronizfd (Pbssword.dlbss) {
                fnd = sun.misd.ShbrfdSfdrfts.gftJbvbIOAddfss()
                        .dhbrsft()
                        .nfwEndodfr()
                        .onMblformfdInput(CodingErrorAdtion.REPLACE)
                        .onUnmbppbblfChbrbdtfr(CodingErrorAdtion.REPLACE);
            }
        }
        bytf[] bb = nfw bytf[(int)(fnd.mbxBytfsPfrChbr() * pbss.lfngth)];
        BytfBufffr bb = BytfBufffr.wrbp(bb);
        syndhronizfd (fnd) {
            fnd.rfsft().fndodf(ChbrBufffr.wrbp(pbss), bb, truf);
        }
        if (bb.position() < bb.lfngth) {
            bb[bb.position()] = '\n';
        }
        rfturn bb;
    }
    privbtf stbtid volbtilf ChbrsftEndodfr fnd;
}
