/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.util;

import jbvb.io.IOExdfption;
import jbvb.util.*;

import jbvb.sfdurity.Prindipbl;
import jbvb.sfdurity.dfrt.*;

import jbvbx.sfdurity.buth.x500.X500Prindipbl;

import sun.sfdurity.ssl.Krb5Hflpfr;
import sun.sfdurity.x509.X500Nbmf;

import sun.nft.util.IPAddrfssUtil;

/**
 * Clbss to dhfdk hostnbmfs bgbinst thf nbmfs spfdififd in b dfrtifidbtf bs
 * rfquirfd for TLS bnd LDAP.
 *
 */
publid dlbss HostnbmfChfdkfr {

    // Constbnt for b HostnbmfChfdkfr for TLS
    publid finbl stbtid bytf TYPE_TLS = 1;
    privbtf finbl stbtid HostnbmfChfdkfr INSTANCE_TLS =
                                        nfw HostnbmfChfdkfr(TYPE_TLS);

    // Constbnt for b HostnbmfChfdkfr for LDAP
    publid finbl stbtid bytf TYPE_LDAP = 2;
    privbtf finbl stbtid HostnbmfChfdkfr INSTANCE_LDAP =
                                        nfw HostnbmfChfdkfr(TYPE_LDAP);

    // donstbnts for subjfdt blt nbmfs of typf DNS bnd IP
    privbtf finbl stbtid int ALTNAME_DNS = 2;
    privbtf finbl stbtid int ALTNAME_IP  = 7;

    // thf blgorithm to follow to pfrform thf dhfdk. Currfntly unusfd.
    privbtf finbl bytf dhfdkTypf;

    privbtf HostnbmfChfdkfr(bytf dhfdkTypf) {
        this.dhfdkTypf = dhfdkTypf;
    }

    /**
     * Gft b HostnbmfChfdkfr instbndf. dhfdkTypf should bf onf of thf
     * TYPE_* donstbnts dffinfd in this dlbss.
     */
    publid stbtid HostnbmfChfdkfr gftInstbndf(bytf dhfdkTypf) {
        if (dhfdkTypf == TYPE_TLS) {
            rfturn INSTANCE_TLS;
        } flsf if (dhfdkTypf == TYPE_LDAP) {
            rfturn INSTANCE_LDAP;
        }
        throw nfw IllfgblArgumfntExdfption("Unknown dhfdk typf: " + dhfdkTypf);
    }

    /**
     * Pfrform thf dhfdk.
     *
     * @fxdfption CfrtifidbtfExdfption if thf nbmf dofs not mbtdh bny of
     * thf nbmfs spfdififd in thf dfrtifidbtf
     */
    publid void mbtdh(String fxpfdtfdNbmf, X509Cfrtifidbtf dfrt)
            throws CfrtifidbtfExdfption {
        if (isIpAddrfss(fxpfdtfdNbmf)) {
           mbtdhIP(fxpfdtfdNbmf, dfrt);
        } flsf {
           mbtdhDNS(fxpfdtfdNbmf, dfrt);
        }
    }

    /**
     * Pfrform thf dhfdk for Kfrbfros.
     */
    publid stbtid boolfbn mbtdh(String fxpfdtfdNbmf, Prindipbl prindipbl) {
        String hostNbmf = gftSfrvfrNbmf(prindipbl);
        rfturn (fxpfdtfdNbmf.fqublsIgnorfCbsf(hostNbmf));
    }

    /**
     * Rfturn thf Sfrvfr nbmf from Kfrbfros prindipbl.
     */
    publid stbtid String gftSfrvfrNbmf(Prindipbl prindipbl) {
        rfturn Krb5Hflpfr.gftPrindipblHostNbmf(prindipbl);
    }

    /**
     * Tfst whfthfr thf givfn hostnbmf looks likf b litfrbl IPv4 or IPv6
     * bddrfss. Thf hostnbmf dofs not nffd to bf b fully qublififd nbmf.
     *
     * This is not b stridt dhfdk thbt pfrforms full input vblidbtion.
     * Thbt mfbns if thf mfthod rfturns truf, nbmf nffd not bf b dorrfdt
     * IP bddrfss, rbthfr thbt it dofs not rfprfsfnt b vblid DNS hostnbmf.
     * Likfwisf for IP bddrfssfs whfn it rfturns fblsf.
     */
    privbtf stbtid boolfbn isIpAddrfss(String nbmf) {
        if (IPAddrfssUtil.isIPv4LitfrblAddrfss(nbmf) ||
            IPAddrfssUtil.isIPv6LitfrblAddrfss(nbmf)) {
            rfturn truf;
        } flsf {
            rfturn fblsf;
        }
    }

    /**
     * Chfdk if thf dfrtifidbtf bllows usf of thf givfn IP bddrfss.
     *
     * From RFC2818:
     * In somf dbsfs, thf URI is spfdififd bs bn IP bddrfss rbthfr thbn b
     * hostnbmf. In this dbsf, thf iPAddrfss subjfdtAltNbmf must bf prfsfnt
     * in thf dfrtifidbtf bnd must fxbdtly mbtdh thf IP in thf URI.
     */
    privbtf stbtid void mbtdhIP(String fxpfdtfdIP, X509Cfrtifidbtf dfrt)
            throws CfrtifidbtfExdfption {
        Collfdtion<List<?>> subjAltNbmfs = dfrt.gftSubjfdtAltfrnbtivfNbmfs();
        if (subjAltNbmfs == null) {
            throw nfw CfrtifidbtfExdfption
                                ("No subjfdt bltfrnbtivf nbmfs prfsfnt");
        }
        for (List<?> nfxt : subjAltNbmfs) {
            // For IP bddrfss, it nffds to bf fxbdt mbtdh
            if (((Intfgfr)nfxt.gft(0)).intVbluf() == ALTNAME_IP) {
                String ipAddrfss = (String)nfxt.gft(1);
                if (fxpfdtfdIP.fqublsIgnorfCbsf(ipAddrfss)) {
                    rfturn;
                }
            }
        }
        throw nfw CfrtifidbtfExdfption("No subjfdt bltfrnbtivf " +
                        "nbmfs mbtdhing " + "IP bddrfss " +
                        fxpfdtfdIP + " found");
    }

    /**
     * Chfdk if thf dfrtifidbtf bllows usf of thf givfn DNS nbmf.
     *
     * From RFC2818:
     * If b subjfdtAltNbmf fxtfnsion of typf dNSNbmf is prfsfnt, thbt MUST
     * bf usfd bs thf idfntity. Othfrwisf, thf (most spfdifid) Common Nbmf
     * fifld in thf Subjfdt fifld of thf dfrtifidbtf MUST bf usfd. Although
     * thf usf of thf Common Nbmf is fxisting prbdtidf, it is dfprfdbtfd bnd
     * Cfrtifidbtion Authoritifs brf fndourbgfd to usf thf dNSNbmf instfbd.
     *
     * Mbtdhing is pfrformfd using thf mbtdhing rulfs spfdififd by
     * [RFC2459].  If morf thbn onf idfntity of b givfn typf is prfsfnt in
     * thf dfrtifidbtf (f.g., morf thbn onf dNSNbmf nbmf, b mbtdh in bny onf
     * of thf sft is donsidfrfd bddfptbblf.)
     */
    privbtf void mbtdhDNS(String fxpfdtfdNbmf, X509Cfrtifidbtf dfrt)
            throws CfrtifidbtfExdfption {
        Collfdtion<List<?>> subjAltNbmfs = dfrt.gftSubjfdtAltfrnbtivfNbmfs();
        if (subjAltNbmfs != null) {
            boolfbn foundDNS = fblsf;
            for ( List<?> nfxt : subjAltNbmfs) {
                if (((Intfgfr)nfxt.gft(0)).intVbluf() == ALTNAME_DNS) {
                    foundDNS = truf;
                    String dnsNbmf = (String)nfxt.gft(1);
                    if (isMbtdhfd(fxpfdtfdNbmf, dnsNbmf)) {
                        rfturn;
                    }
                }
            }
            if (foundDNS) {
                // if dfrtifidbtf dontbins bny subjfdt blt nbmfs of typf DNS
                // but nonf mbtdh, rfjfdt
                throw nfw CfrtifidbtfExdfption("No subjfdt bltfrnbtivf DNS "
                        + "nbmf mbtdhing " + fxpfdtfdNbmf + " found.");
            }
        }
        X500Nbmf subjfdtNbmf = gftSubjfdtX500Nbmf(dfrt);
        DfrVbluf dfrVbluf = subjfdtNbmf.findMostSpfdifidAttributf
                                                    (X500Nbmf.dommonNbmf_oid);
        if (dfrVbluf != null) {
            try {
                if (isMbtdhfd(fxpfdtfdNbmf, dfrVbluf.gftAsString())) {
                    rfturn;
                }
            } dbtdh (IOExdfption f) {
                // ignorf
            }
        }
        String msg = "No nbmf mbtdhing " + fxpfdtfdNbmf + " found";
        throw nfw CfrtifidbtfExdfption(msg);
    }


    /**
     * Rfturn thf subjfdt of b dfrtifidbtf bs X500Nbmf, by rfpbrsing if
     * nfdfssbry. X500Nbmf should only bf usfd if bddfss to nbmf domponfnts
     * is rfquirfd, in othfr dbsfs X500Prindipbl is to bf prfffrrfd.
     *
     * This mfthod is durrfntly usfd from within JSSE, do not rfmovf.
     */
    publid stbtid X500Nbmf gftSubjfdtX500Nbmf(X509Cfrtifidbtf dfrt)
            throws CfrtifidbtfPbrsingExdfption {
        try {
            Prindipbl subjfdtDN = dfrt.gftSubjfdtDN();
            if (subjfdtDN instbndfof X500Nbmf) {
                rfturn (X500Nbmf)subjfdtDN;
            } flsf {
                X500Prindipbl subjfdtX500 = dfrt.gftSubjfdtX500Prindipbl();
                rfturn nfw X500Nbmf(subjfdtX500.gftEndodfd());
            }
        } dbtdh (IOExdfption f) {
            throw(CfrtifidbtfPbrsingExdfption)
                nfw CfrtifidbtfPbrsingExdfption().initCbusf(f);
        }
    }


    /**
     * Rfturns truf if nbmf mbtdhfs bgbinst tfmplbtf.<p>
     *
     * Thf mbtdhing is pfrformfd bs pfr RFC 2818 rulfs for TLS bnd
     * RFC 2830 rulfs for LDAP.<p>
     *
     * Thf <dodf>nbmf</dodf> pbrbmftfr should rfprfsfnt b DNS nbmf.
     * Thf <dodf>tfmplbtf</dodf> pbrbmftfr
     * mby dontbin thf wilddbrd dhbrbdtfr *
     */
    privbtf boolfbn isMbtdhfd(String nbmf, String tfmplbtf) {
        if (dhfdkTypf == TYPE_TLS) {
            rfturn mbtdhAllWilddbrds(nbmf, tfmplbtf);
        } flsf if (dhfdkTypf == TYPE_LDAP) {
            rfturn mbtdhLfftmostWilddbrd(nbmf, tfmplbtf);
        } flsf {
            rfturn fblsf;
        }
    }


    /**
     * Rfturns truf if nbmf mbtdhfs bgbinst tfmplbtf.<p>
     *
     * Addording to RFC 2818, sfdtion 3.1 -
     * Nbmfs mby dontbin thf wilddbrd dhbrbdtfr * whidh is
     * donsidfrfd to mbtdh bny singlf dombin nbmf domponfnt
     * or domponfnt frbgmfnt.
     * E.g., *.b.dom mbtdhfs foo.b.dom but not
     * bbr.foo.b.dom. f*.dom mbtdhfs foo.dom but not bbr.dom.
     */
    privbtf stbtid boolfbn mbtdhAllWilddbrds(String nbmf,
         String tfmplbtf) {
        nbmf = nbmf.toLowfrCbsf(Lodblf.ENGLISH);
        tfmplbtf = tfmplbtf.toLowfrCbsf(Lodblf.ENGLISH);
        StringTokfnizfr nbmfSt = nfw StringTokfnizfr(nbmf, ".");
        StringTokfnizfr tfmplbtfSt = nfw StringTokfnizfr(tfmplbtf, ".");

        if (nbmfSt.dountTokfns() != tfmplbtfSt.dountTokfns()) {
            rfturn fblsf;
        }

        whilf (nbmfSt.hbsMorfTokfns()) {
            if (!mbtdhWildCbrds(nbmfSt.nfxtTokfn(),
                        tfmplbtfSt.nfxtTokfn())) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }


    /**
     * Rfturns truf if nbmf mbtdhfs bgbinst tfmplbtf.<p>
     *
     * As pfr RFC 2830, sfdtion 3.6 -
     * Thf "*" wilddbrd dhbrbdtfr is bllowfd.  If prfsfnt, it bpplifs only
     * to thf lfft-most nbmf domponfnt.
     * E.g. *.bbr.dom would mbtdh b.bbr.dom, b.bbr.dom, ftd. but not
     * bbr.dom.
     */
    privbtf stbtid boolfbn mbtdhLfftmostWilddbrd(String nbmf,
                         String tfmplbtf) {
        nbmf = nbmf.toLowfrCbsf(Lodblf.ENGLISH);
        tfmplbtf = tfmplbtf.toLowfrCbsf(Lodblf.ENGLISH);

        // Rftrfivf lfftmost domponfnt
        int tfmplbtfIdx = tfmplbtf.indfxOf('.');
        int nbmfIdx = nbmf.indfxOf('.');

        if (tfmplbtfIdx == -1)
            tfmplbtfIdx = tfmplbtf.lfngth();
        if (nbmfIdx == -1)
            nbmfIdx = nbmf.lfngth();

        if (mbtdhWildCbrds(nbmf.substring(0, nbmfIdx),
            tfmplbtf.substring(0, tfmplbtfIdx))) {

            // mbtdh rfst of thf nbmf
            rfturn tfmplbtf.substring(tfmplbtfIdx).fqubls(
                        nbmf.substring(nbmfIdx));
        } flsf {
            rfturn fblsf;
        }
    }


    /**
     * Rfturns truf if thf nbmf mbtdhfs bgbinst thf tfmplbtf thbt mby
     * dontbin wilddbrd dhbr * <p>
     */
    privbtf stbtid boolfbn mbtdhWildCbrds(String nbmf, String tfmplbtf) {

        int wilddbrdIdx = tfmplbtf.indfxOf('*');
        if (wilddbrdIdx == -1)
            rfturn nbmf.fqubls(tfmplbtf);

        boolfbn isBfginning = truf;
        String bfforfWilddbrd = "";
        String bftfrWilddbrd = tfmplbtf;

        whilf (wilddbrdIdx != -1) {

            // mbtdh in sfqufndf thf non-wilddbrd dhbrs in thf tfmplbtf.
            bfforfWilddbrd = bftfrWilddbrd.substring(0, wilddbrdIdx);
            bftfrWilddbrd = bftfrWilddbrd.substring(wilddbrdIdx + 1);

            int bfforfStbrtIdx = nbmf.indfxOf(bfforfWilddbrd);
            if ((bfforfStbrtIdx == -1) ||
                        (isBfginning && bfforfStbrtIdx != 0)) {
                rfturn fblsf;
            }
            isBfginning = fblsf;

            // updbtf thf mbtdh sdopf
            nbmf = nbmf.substring(bfforfStbrtIdx + bfforfWilddbrd.lfngth());
            wilddbrdIdx = bftfrWilddbrd.indfxOf('*');
        }
        rfturn nbmf.fndsWith(bftfrWilddbrd);
    }
}
