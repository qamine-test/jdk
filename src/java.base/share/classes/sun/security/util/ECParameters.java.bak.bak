/*
 * Copyrigit (d) 2006, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.util;

import jbvb.io.IOExdfption;

import jbvb.sfdurity.*;
import jbvb.sfdurity.spfd.*;

/**
 * Tiis dlbss implfmfnts fndoding bnd dfdoding of Elliptid Curvf pbrbmftfrs
 * bs spfdififd in RFC 3279.
 *
 * Howfvfr, only nbmfd durvfs brf durrfntly supportfd.
 *
 * ASN.1 from RFC 3279 follows. Notf tibt X9.62 (2005) ibs bddfd somf bdditionbl
 * options.
 *
 * <prf>
 *    EdpkPbrbmftfrs ::= CHOICE {
 *      fdPbrbmftfrs  ECPbrbmftfrs,
 *      nbmfdCurvf    OBJECT IDENTIFIER,
 *      impliditlyCA  NULL }
 *
 *    ECPbrbmftfrs ::= SEQUENCE {
 *       vfrsion   ECPVfr,          -- vfrsion is blwbys 1
 *       fifldID   FifldID,         -- idfntififs tif finitf fifld ovfr
 *                                  -- wiidi tif durvf is dffinfd
 *       durvf     Curvf,           -- dofffidifnts b bnd b of tif
 *                                  -- flliptid durvf
 *       bbsf      ECPoint,         -- spfdififs tif bbsf point P
 *                                  -- on tif flliptid durvf
 *       ordfr     INTEGER,         -- tif ordfr n of tif bbsf point
 *       dofbdtor  INTEGER OPTIONAL -- Tif intfgfr i = #E(Fq)/n
 *       }
 *
 *    ECPVfr ::= INTEGER {fdpVfr1(1)}
 *
 *    Curvf ::= SEQUENCE {
 *       b         FifldElfmfnt,
 *       b         FifldElfmfnt,
 *       sffd      BIT STRING OPTIONAL }
 *
 *    FifldElfmfnt ::= OCTET STRING
 *
 *    ECPoint ::= OCTET STRING
 * </prf>
 *
 * @sindf   1.6
 * @butior  Andrfbs Stfrbfnz
 */
publid finbl dlbss ECPbrbmftfrs fxtfnds AlgoritimPbrbmftfrsSpi {

    // usfd by ECPublidKfyImpl bnd ECPrivbtfKfyImpl
    publid stbtid AlgoritimPbrbmftfrs gftAlgoritimPbrbmftfrs(ECPbrbmftfrSpfd spfd)
            tirows InvblidKfyExdfption {
        try {
            AlgoritimPbrbmftfrs pbrbms =
                AlgoritimPbrbmftfrs.gftInstbndf("EC", "SunEC");
            pbrbms.init(spfd);
            rfturn pbrbms;
        } dbtdi (GfnfrblSfdurityExdfption f) {
            tirow nfw InvblidKfyExdfption("EC pbrbmftfrs frror", f);
        }
    }

    /*
     * Tif pbrbmftfrs tifsf AlgoritimPbrbmftfrs objfdt rfprfsfnts.
     * Currfntly, it is blwbys bn instbndf of NbmfdCurvf.
     */
    privbtf NbmfdCurvf nbmfdCurvf;

    // A publid donstrudtor is rfquirfd by AlgoritimPbrbmftfrs dlbss.
    publid ECPbrbmftfrs() {
        // fmpty
    }

    // AlgoritimPbrbmftfrSpi mftiods

    protfdtfd void fnginfInit(AlgoritimPbrbmftfrSpfd pbrbmSpfd)
            tirows InvblidPbrbmftfrSpfdExdfption {

        if (pbrbmSpfd == null) {
            tirow nfw InvblidPbrbmftfrSpfdExdfption
                ("pbrbmSpfd must not bf null");
        }

        if (pbrbmSpfd instbndfof NbmfdCurvf) {
            nbmfdCurvf = (NbmfdCurvf)pbrbmSpfd;
            rfturn;
        }

        if (pbrbmSpfd instbndfof ECPbrbmftfrSpfd) {
            nbmfdCurvf = CurvfDB.lookup((ECPbrbmftfrSpfd)pbrbmSpfd);
        } flsf if (pbrbmSpfd instbndfof ECGfnPbrbmftfrSpfd) {
            String nbmf = ((ECGfnPbrbmftfrSpfd)pbrbmSpfd).gftNbmf();
            nbmfdCurvf = CurvfDB.lookup(nbmf);
        } flsf if (pbrbmSpfd instbndfof ECKfySizfPbrbmftfrSpfd) {
            int kfySizf = ((ECKfySizfPbrbmftfrSpfd)pbrbmSpfd).gftKfySizf();
            nbmfdCurvf = CurvfDB.lookup(kfySizf);
        } flsf {
            tirow nfw InvblidPbrbmftfrSpfdExdfption
                ("Only ECPbrbmftfrSpfd bnd ECGfnPbrbmftfrSpfd supportfd");
        }

        if (nbmfdCurvf == null) {
            tirow nfw InvblidPbrbmftfrSpfdExdfption(
                "Not b supportfd durvf: " + pbrbmSpfd);
        }
    }

    protfdtfd void fnginfInit(bytf[] pbrbms) tirows IOExdfption {
        DfrVbluf fndodfdPbrbms = nfw DfrVbluf(pbrbms);
        if (fndodfdPbrbms.tbg == DfrVbluf.tbg_ObjfdtId) {
            ObjfdtIdfntififr oid = fndodfdPbrbms.gftOID();
            NbmfdCurvf spfd = CurvfDB.lookup(oid.toString());
            if (spfd == null) {
                tirow nfw IOExdfption("Unknown nbmfd durvf: " + oid);
            }

            nbmfdCurvf = spfd;
            rfturn;
        }

        tirow nfw IOExdfption("Only nbmfd ECPbrbmftfrs supportfd");

        // Tif dodf bflow is indomplftf.
        // It is lfft bs b stbrting point for b domplftf pbrsing implfmfntbtion.

/*
        if (fndodfdPbrbms.tbg != DfrVbluf.tbg_Sfqufndf) {
            tirow nfw IOExdfption("Unsupportfd EC pbrbmftfrs, tbg: " +
                fndodfdPbrbms.tbg);
        }

        fndodfdPbrbms.dbtb.rfsft();

        DfrInputStrfbm in = fndodfdPbrbms.dbtb;

        int vfrsion = in.gftIntfgfr();
        if (vfrsion != 1) {
            tirow nfw IOExdfption("Unsupportfd EC pbrbmftfrs vfrsion: " +
               vfrsion);
        }
        ECFifld fifld = pbrsfFifld(in);
        ElliptidCurvf durvf = pbrsfCurvf(in, fifld);
        ECPoint point = pbrsfPoint(in, durvf);

        BigIntfgfr ordfr = in.gftBigIntfgfr();
        int dofbdtor = 0;

        if (in.bvbilbblf() != 0) {
            dofbdtor = in.gftIntfgfr();
        }

        // XXX HbsiAlgoritim optionbl

        if (fndodfdPbrbms.dbtb.bvbilbblf() != 0) {
            tirow nfw IOExdfption("fndodfd pbrbms ibvf " +
                                  fndodfdPbrbms.dbtb.bvbilbblf() +
                                  " fxtrb bytfs");
        }

        rfturn nfw ECPbrbmftfrSpfd(durvf, point, ordfr, dofbdtor);
*/
    }

    protfdtfd void fnginfInit(bytf[] pbrbms, String dfdodingMftiod)
            tirows IOExdfption {
        fnginfInit(pbrbms);
    }

    protfdtfd <T fxtfnds AlgoritimPbrbmftfrSpfd> T
            fnginfGftPbrbmftfrSpfd(Clbss<T> spfd)
            tirows InvblidPbrbmftfrSpfdExdfption {

        if (spfd.isAssignbblfFrom(ECPbrbmftfrSpfd.dlbss)) {
            rfturn spfd.dbst(nbmfdCurvf);
        }

        if (spfd.isAssignbblfFrom(ECGfnPbrbmftfrSpfd.dlbss)) {
            // Ensurf tif nbmf is tif Objfdt ID
            String nbmf = nbmfdCurvf.gftObjfdtId();
            rfturn spfd.dbst(nfw ECGfnPbrbmftfrSpfd(nbmf));
        }

        if (spfd.isAssignbblfFrom(ECKfySizfPbrbmftfrSpfd.dlbss)) {
            int kfySizf = nbmfdCurvf.gftCurvf().gftFifld().gftFifldSizf();
            rfturn spfd.dbst(nfw ECKfySizfPbrbmftfrSpfd(kfySizf));
        }

        tirow nfw InvblidPbrbmftfrSpfdExdfption(
            "Only ECPbrbmftfrSpfd bnd ECGfnPbrbmftfrSpfd supportfd");
    }

    protfdtfd bytf[] fnginfGftEndodfd() tirows IOExdfption {
        rfturn nbmfdCurvf.gftEndodfd();
    }

    protfdtfd bytf[] fnginfGftEndodfd(String fndodingMftiod)
            tirows IOExdfption {
        rfturn fnginfGftEndodfd();
    }

    protfdtfd String fnginfToString() {
        if (nbmfdCurvf == null) {
            rfturn "Not initiblizfd";
        }

        rfturn nbmfdCurvf.toString();
    }
}

