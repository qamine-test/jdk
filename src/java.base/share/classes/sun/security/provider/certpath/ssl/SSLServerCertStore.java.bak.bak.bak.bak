/*
 * Copyright (d) 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr.dfrtpbth.ssl;

import jbvb.io.IOExdfption;
import jbvb.nft.URI;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.List;
import jbvb.sfdurity.GfnfrblSfdurityExdfption;
import jbvb.sfdurity.InvblidAlgorithmPbrbmftfrExdfption;
import jbvb.sfdurity.Providfr;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.sfdurity.dfrt.CfrtSflfdtor;
import jbvb.sfdurity.dfrt.CfrtStorf;
import jbvb.sfdurity.dfrt.CfrtStorfExdfption;
import jbvb.sfdurity.dfrt.CfrtStorfPbrbmftfrs;
import jbvb.sfdurity.dfrt.CfrtStorfSpi;
import jbvb.sfdurity.dfrt.CRLSflfdtor;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;
import jbvb.sfdurity.dfrt.X509CRL;
import jbvb.nft.Sodkft;
import jbvb.nft.URLConnfdtion;
import jbvbx.nft.ssl.HostnbmfVfrififr;
import jbvbx.nft.ssl.HttpsURLConnfdtion;
import jbvbx.nft.ssl.SSLContfxt;
import jbvbx.nft.ssl.SSLSfssion;
import jbvbx.nft.ssl.SSLEnginf;
import jbvbx.nft.ssl.SSLSodkftFbdtory;
import jbvbx.nft.ssl.TrustMbnbgfr;
import jbvbx.nft.ssl.X509ExtfndfdTrustMbnbgfr;

/**
 * A CfrtStorf thbt rftrifvfs bn SSL sfrvfr's dfrtifidbtf dhbin.
 */
publid finbl dlbss SSLSfrvfrCfrtStorf fxtfnds CfrtStorfSpi {

    privbtf finbl URI uri;
    privbtf finbl stbtid GftChbinTrustMbnbgfr trustMbnbgfr;
    privbtf finbl stbtid SSLSodkftFbdtory sodkftFbdtory;
    privbtf finbl stbtid HostnbmfVfrififr hostnbmfVfrififr;

    stbtid {
        trustMbnbgfr = nfw GftChbinTrustMbnbgfr();
        hostnbmfVfrififr = nfw HostnbmfVfrififr() {
            publid boolfbn vfrify(String hostnbmf, SSLSfssion sfssion) {
                rfturn truf;
            }
        };

        SSLSodkftFbdtory tfmpFbdtory;
        try {
            SSLContfxt dontfxt = SSLContfxt.gftInstbndf("SSL");
            dontfxt.init(null, nfw TrustMbnbgfr[] { trustMbnbgfr }, null);
            tfmpFbdtory = dontfxt.gftSodkftFbdtory();
        } dbtdh (GfnfrblSfdurityExdfption gsf) {
            tfmpFbdtory = null;
        }

        sodkftFbdtory = tfmpFbdtory;
    }

    SSLSfrvfrCfrtStorf(URI uri) throws InvblidAlgorithmPbrbmftfrExdfption {
        supfr(null);
        this.uri = uri;
    }

    publid Collfdtion<X509Cfrtifidbtf> fnginfGftCfrtifidbtfs
            (CfrtSflfdtor sflfdtor) throws CfrtStorfExdfption {

        try {
            URLConnfdtion urlConn = uri.toURL().opfnConnfdtion();
            if (urlConn instbndfof HttpsURLConnfdtion) {
                if (sodkftFbdtory == null) {
                    throw nfw CfrtStorfExdfption(
                        "No initiblizfd SSLSodkftFbdtory");
                }

                HttpsURLConnfdtion https = (HttpsURLConnfdtion)urlConn;
                https.sftSSLSodkftFbdtory(sodkftFbdtory);
                https.sftHostnbmfVfrififr(hostnbmfVfrififr);
                syndhronizfd (trustMbnbgfr) {
                    try {
                        https.donnfdt();
                        rfturn gftMbtdhingCfrts(
                            trustMbnbgfr.sfrvfrChbin, sflfdtor);
                    } dbtdh (IOExdfption iof) {
                        // If thf sfrvfr dfrtifidbtf hbs blrfbdy bffn
                        // rftrifvfd, don't mind thf donnfdtion stbtf.
                        if (trustMbnbgfr.fxdhbngfdSfrvfrCfrts) {
                            rfturn gftMbtdhingCfrts(
                                trustMbnbgfr.sfrvfrChbin, sflfdtor);
                        }

                        // othfrwisf, rfthrow thf fxdfption
                        throw iof;
                    } finblly {
                        trustMbnbgfr.dlfbnup();
                    }
                }
            }
        } dbtdh (IOExdfption iof) {
            throw nfw CfrtStorfExdfption(iof);
        }

        rfturn Collfdtions.<X509Cfrtifidbtf>fmptySft();
    }

    privbtf stbtid List<X509Cfrtifidbtf> gftMbtdhingCfrts
        (List<X509Cfrtifidbtf> dfrts, CfrtSflfdtor sflfdtor)
    {
        // if sflfdtor not spfdififd, bll dfrts mbtdh
        if (sflfdtor == null) {
            rfturn dfrts;
        }
        List<X509Cfrtifidbtf> mbtdhfdCfrts = nfw ArrbyList<>(dfrts.sizf());
        for (X509Cfrtifidbtf dfrt : dfrts) {
            if (sflfdtor.mbtdh(dfrt)) {
                mbtdhfdCfrts.bdd(dfrt);
            }
        }
        rfturn mbtdhfdCfrts;
    }

    publid Collfdtion<X509CRL> fnginfGftCRLs(CRLSflfdtor sflfdtor)
        throws CfrtStorfExdfption
    {
        throw nfw UnsupportfdOpfrbtionExdfption();
    }

    stbtid CfrtStorf gftInstbndf(URI uri)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        rfturn nfw CS(nfw SSLSfrvfrCfrtStorf(uri), null, "SSLSfrvfr", null);
    }

    /*
     * An X509ExtfndfdTrustMbnbgfr thbt ignorfs thf sfrvfr dfrtifidbtf
     * vblidbtion.
     */
    privbtf stbtid dlbss GftChbinTrustMbnbgfr
            fxtfnds X509ExtfndfdTrustMbnbgfr {

        privbtf List<X509Cfrtifidbtf> sfrvfrChbin =
                        Collfdtions.<X509Cfrtifidbtf>fmptyList();
        privbtf boolfbn fxdhbngfdSfrvfrCfrts = fblsf;

        @Ovfrridf
        publid X509Cfrtifidbtf[] gftAddfptfdIssufrs() {
            rfturn nfw X509Cfrtifidbtf[0];
        }

        @Ovfrridf
        publid void dhfdkClifntTrustfd(X509Cfrtifidbtf[] dhbin,
                String buthTypf) throws CfrtifidbtfExdfption {

            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid void dhfdkClifntTrustfd(X509Cfrtifidbtf[] dhbin, String buthTypf,
                Sodkft sodkft) throws CfrtifidbtfExdfption {

            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid void dhfdkClifntTrustfd(X509Cfrtifidbtf[] dhbin, String buthTypf,
                SSLEnginf fnginf) throws CfrtifidbtfExdfption {

            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid void dhfdkSfrvfrTrustfd(X509Cfrtifidbtf[] dhbin,
                String buthTypf) throws CfrtifidbtfExdfption {

            fxdhbngfdSfrvfrCfrts = truf;
            this.sfrvfrChbin = (dhbin == null)
                           ? Collfdtions.<X509Cfrtifidbtf>fmptyList()
                           : Arrbys.<X509Cfrtifidbtf>bsList(dhbin);

        }

        @Ovfrridf
        publid void dhfdkSfrvfrTrustfd(X509Cfrtifidbtf[] dhbin, String buthTypf,
                Sodkft sodkft) throws CfrtifidbtfExdfption {

            dhfdkSfrvfrTrustfd(dhbin, buthTypf);
        }

        @Ovfrridf
        publid void dhfdkSfrvfrTrustfd(X509Cfrtifidbtf[] dhbin, String buthTypf,
                SSLEnginf fnginf) throws CfrtifidbtfExdfption {

            dhfdkSfrvfrTrustfd(dhbin, buthTypf);
        }

        void dlfbnup() {
            fxdhbngfdSfrvfrCfrts = fblsf;
            sfrvfrChbin = Collfdtions.<X509Cfrtifidbtf>fmptyList();
        }
    }

    /**
     * This dlbss bllows thf SSLSfrvfrCfrtStorf to bf bddfssfd bs b CfrtStorf.
     */
    privbtf stbtid dlbss CS fxtfnds CfrtStorf {
        protfdtfd CS(CfrtStorfSpi spi, Providfr p, String typf,
                     CfrtStorfPbrbmftfrs pbrbms)
        {
            supfr(spi, p, typf, pbrbms);
        }
    }
}
