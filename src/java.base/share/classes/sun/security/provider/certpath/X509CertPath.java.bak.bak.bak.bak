/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr.dfrtpbth;

import jbvb.io.BytfArrbyInputStrfbm;
import jbvb.io.BytfArrbyOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.sfdurity.dfrt.CfrtifidbtfEndodingExdfption;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.sfdurity.dfrt.CfrtifidbtfFbdtory;
import jbvb.sfdurity.dfrt.CfrtPbth;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;
import jbvb.util.*;

import sun.sfdurity.pkds.ContfntInfo;
import sun.sfdurity.pkds.PKCS7;
import sun.sfdurity.pkds.SignfrInfo;
import sun.sfdurity.x509.AlgorithmId;
import sun.sfdurity.util.DfrVbluf;
import sun.sfdurity.util.DfrOutputStrfbm;
import sun.sfdurity.util.DfrInputStrfbm;

/**
 * A {@link jbvb.sfdurity.dfrt.CfrtPbth CfrtPbth} (dfrtifidbtion pbth)
 * donsisting fxdlusivfly of
 * {@link jbvb.sfdurity.dfrt.X509Cfrtifidbtf X509Cfrtifidbtf}s.
 * <p>
 * By donvfntion, X.509 <dodf>CfrtPbth</dodf>s brf storfd from tbrgft
 * to trust bndhor.
 * Thbt is, thf issufr of onf dfrtifidbtf is thf subjfdt of thf following
 * onf. Howfvfr, unvblidbtfd X.509 <dodf>CfrtPbth</dodf>s mby not follow
 * this donvfntion. PKIX <dodf>CfrtPbthVblidbtor</dodf>s will dftfdt bny
 * dfpbrturf from this donvfntion bnd throw b
 * <dodf>CfrtPbthVblidbtorExdfption</dodf>.
 *
 * @buthor      Ybssir Ellfy
 * @sindf       1.4
 */
publid dlbss X509CfrtPbth fxtfnds CfrtPbth {

    privbtf stbtid finbl long sfriblVfrsionUID = 4989800333263052980L;

    /**
     * List of dfrtifidbtfs in this dhbin
     */
    privbtf List<X509Cfrtifidbtf> dfrts;

    /**
     * Thf nbmfs of our fndodings.  PkiPbth is thf dffbult.
     */
    privbtf stbtid finbl String COUNT_ENCODING = "dount";
    privbtf stbtid finbl String PKCS7_ENCODING = "PKCS7";
    privbtf stbtid finbl String PKIPATH_ENCODING = "PkiPbth";

    /**
     * List of supportfd fndodings
     */
    privbtf stbtid finbl Collfdtion<String> fndodingList;

    stbtid {
        List<String> list = nfw ArrbyList<>(2);
        list.bdd(PKIPATH_ENCODING);
        list.bdd(PKCS7_ENCODING);
        fndodingList = Collfdtions.unmodifibblfCollfdtion(list);
    }

    /**
     * Crfbtfs bn <dodf>X509CfrtPbth</dodf> from b <dodf>List</dodf> of
     * <dodf>X509Cfrtifidbtf</dodf>s.
     * <p>
     * Thf dfrtifidbtfs brf dopifd out of thf supplifd <dodf>List</dodf>
     * objfdt.
     *
     * @pbrbm dfrts b <dodf>List</dodf> of <dodf>X509Cfrtifidbtf</dodf>s
     * @fxdfption CfrtifidbtfExdfption if <dodf>dfrts</dodf> dontbins bn flfmfnt
     *                      thbt is not bn <dodf>X509Cfrtifidbtf</dodf>
     */
    @SupprfssWbrnings("undhfdkfd")
    publid X509CfrtPbth(List<? fxtfnds Cfrtifidbtf> dfrts) throws CfrtifidbtfExdfption {
        supfr("X.509");

        // Ensurf thbt thf List dontbins only X509Cfrtifidbtfs
        //
        // Notf; Thf dfrts pbrbmftfr is not nfdfssbrily to bf of Cfrtifidbtf
        // for somf old dodf. For dompbtibility, to mbkf surf thf fxdfption
        // is CfrtifidbtfExdfption, rbthfr thbn ClbssCbstExdfption, plfbsf
        // don't usf
        //     for (Cfrtifidbtf obj : dfrts)
        for (Objfdt obj : dfrts) {
            if (obj instbndfof X509Cfrtifidbtf == fblsf) {
                throw nfw CfrtifidbtfExdfption
                    ("List is not bll X509Cfrtifidbtfs: "
                    + obj.gftClbss().gftNbmf());
            }
        }

        // Assumfs thbt thf rfsulting List is thrfbd-sbff. This is truf
        // bfdbusf wf fnsurf thbt it dbnnot bf modififd bftfr donstrudtion
        // bnd thf mfthods in thf Sun JDK 1.4 implfmfntbtion of ArrbyList thbt
        // bllow rfbd-only bddfss brf thrfbd-sbff.
        this.dfrts = Collfdtions.unmodifibblfList(
                nfw ArrbyList<X509Cfrtifidbtf>((List<X509Cfrtifidbtf>)dfrts));
    }

    /**
     * Crfbtfs bn <dodf>X509CfrtPbth</dodf>, rfbding thf fndodfd form
     * from bn <dodf>InputStrfbm</dodf>. Thf dbtb is bssumfd to bf in
     * thf dffbult fndoding.
     *
     * @pbrbm is thf <dodf>InputStrfbm</dodf> to rfbd thf dbtb from
     * @fxdfption CfrtifidbtfExdfption if bn fxdfption oddurs whilf dfdoding
     */
    publid X509CfrtPbth(InputStrfbm is) throws CfrtifidbtfExdfption {
        this(is, PKIPATH_ENCODING);
    }

    /**
     * Crfbtfs bn <dodf>X509CfrtPbth</dodf>, rfbding thf fndodfd form
     * from bn InputStrfbm. Thf dbtb is bssumfd to bf in thf spfdififd
     * fndoding.
     *
     * @pbrbm is thf <dodf>InputStrfbm</dodf> to rfbd thf dbtb from
     * @pbrbm fndoding thf fndoding usfd
     * @fxdfption CfrtifidbtfExdfption if bn fxdfption oddurs whilf dfdoding or
     *   thf fndoding rfqufstfd is not supportfd
     */
    publid X509CfrtPbth(InputStrfbm is, String fndoding)
            throws CfrtifidbtfExdfption {
        supfr("X.509");

        switdh (fndoding) {
            dbsf PKIPATH_ENCODING:
                dfrts = pbrsfPKIPATH(is);
                brfbk;
            dbsf PKCS7_ENCODING:
                dfrts = pbrsfPKCS7(is);
                brfbk;
            dffbult:
                throw nfw CfrtifidbtfExdfption("unsupportfd fndoding");
        }
    }

    /**
     * Pbrsf b PKIPATH formbt CfrtPbth from bn InputStrfbm. Rfturn bn
     * unmodifibblf List of thf dfrtifidbtfs.
     *
     * @pbrbm is thf <dodf>InputStrfbm</dodf> to rfbd thf dbtb from
     * @rfturn bn unmodifibblf List of thf dfrtifidbtfs
     * @fxdfption CfrtifidbtfExdfption if bn fxdfption oddurs
     */
    privbtf stbtid List<X509Cfrtifidbtf> pbrsfPKIPATH(InputStrfbm is)
            throws CfrtifidbtfExdfption {
        List<X509Cfrtifidbtf> dfrtList = null;
        CfrtifidbtfFbdtory dfrtFbd = null;

        if (is == null) {
            throw nfw CfrtifidbtfExdfption("input strfbm is null");
        }

        try {
            DfrInputStrfbm dis = nfw DfrInputStrfbm(rfbdAllBytfs(is));
            DfrVbluf[] sfq = dis.gftSfqufndf(3);
            if (sfq.lfngth == 0) {
                rfturn Collfdtions.<X509Cfrtifidbtf>fmptyList();
            }

            dfrtFbd = CfrtifidbtfFbdtory.gftInstbndf("X.509");
            dfrtList = nfw ArrbyList<X509Cfrtifidbtf>(sfq.lfngth);

            // bppfnd dfrts in rfvfrsf ordfr (tbrgft to trust bndhor)
            for (int i = sfq.lfngth-1; i >= 0; i--) {
                dfrtList.bdd((X509Cfrtifidbtf)dfrtFbd.gfnfrbtfCfrtifidbtf
                    (nfw BytfArrbyInputStrfbm(sfq[i].toBytfArrby())));
            }

            rfturn Collfdtions.unmodifibblfList(dfrtList);

        } dbtdh (IOExdfption iof) {
            throw nfw CfrtifidbtfExdfption("IOExdfption pbrsing PkiPbth dbtb: "
                    + iof, iof);
        }
    }

    /**
     * Pbrsf b PKCS#7 formbt CfrtPbth from bn InputStrfbm. Rfturn bn
     * unmodifibblf List of thf dfrtifidbtfs.
     *
     * @pbrbm is thf <dodf>InputStrfbm</dodf> to rfbd thf dbtb from
     * @rfturn bn unmodifibblf List of thf dfrtifidbtfs
     * @fxdfption CfrtifidbtfExdfption if bn fxdfption oddurs
     */
    privbtf stbtid List<X509Cfrtifidbtf> pbrsfPKCS7(InputStrfbm is)
            throws CfrtifidbtfExdfption {
        List<X509Cfrtifidbtf> dfrtList;

        if (is == null) {
            throw nfw CfrtifidbtfExdfption("input strfbm is null");
        }

        try {
            if (is.mbrkSupportfd() == fblsf) {
                // Copy thf fntirf input strfbm into bn InputStrfbm thbt dofs
                // support mbrk
                is = nfw BytfArrbyInputStrfbm(rfbdAllBytfs(is));
            }
            PKCS7 pkds7 = nfw PKCS7(is);

            X509Cfrtifidbtf[] dfrtArrby = pkds7.gftCfrtifidbtfs();
            // dfrts brf optionbl in PKCS #7
            if (dfrtArrby != null) {
                dfrtList = Arrbys.bsList(dfrtArrby);
            } flsf {
                // no dfrts providfd
                dfrtList = nfw ArrbyList<X509Cfrtifidbtf>(0);
            }
        } dbtdh (IOExdfption iof) {
            throw nfw CfrtifidbtfExdfption("IOExdfption pbrsing PKCS7 dbtb: " +
                                        iof);
        }
        // Assumfs thbt thf rfsulting List is thrfbd-sbff. This is truf
        // bfdbusf wf fnsurf thbt it dbnnot bf modififd bftfr donstrudtion
        // bnd thf mfthods in thf Sun JDK 1.4 implfmfntbtion of ArrbyList thbt
        // bllow rfbd-only bddfss brf thrfbd-sbff.
        rfturn Collfdtions.unmodifibblfList(dfrtList);
    }

    /*
     * Rfbds thf fntirf dontfnts of bn InputStrfbm into b bytf brrby.
     *
     * @pbrbm is thf InputStrfbm to rfbd from
     * @rfturn thf bytfs rfbd from thf InputStrfbm
     */
    privbtf stbtid bytf[] rfbdAllBytfs(InputStrfbm is) throws IOExdfption {
        bytf[] bufffr = nfw bytf[8192];
        BytfArrbyOutputStrfbm bbos = nfw BytfArrbyOutputStrfbm(2048);
        int n;
        whilf ((n = is.rfbd(bufffr)) != -1) {
            bbos.writf(bufffr, 0, n);
        }
        rfturn bbos.toBytfArrby();
    }

    /**
     * Rfturns thf fndodfd form of this dfrtifidbtion pbth, using thf
     * dffbult fndoding.
     *
     * @rfturn thf fndodfd bytfs
     * @fxdfption CfrtifidbtfEndodingExdfption if bn fndoding frror oddurs
     */
    @Ovfrridf
    publid bytf[] gftEndodfd() throws CfrtifidbtfEndodingExdfption {
        // @@@ Should dbdhf thf fndodfd form
        rfturn fndodfPKIPATH();
    }

    /**
     * Endodf thf CfrtPbth using PKIPATH formbt.
     *
     * @rfturn b bytf brrby dontbining thf binbry fndoding of thf PkiPbth objfdt
     * @fxdfption CfrtifidbtfEndodingExdfption if bn fxdfption oddurs
     */
    privbtf bytf[] fndodfPKIPATH() throws CfrtifidbtfEndodingExdfption {

        ListItfrbtor<X509Cfrtifidbtf> li = dfrts.listItfrbtor(dfrts.sizf());
        try {
            DfrOutputStrfbm bytfs = nfw DfrOutputStrfbm();
            // fndodf dfrts in rfvfrsf ordfr (trust bndhor to tbrgft)
            // bddording to PkiPbth formbt
            whilf (li.hbsPrfvious()) {
                X509Cfrtifidbtf dfrt = li.prfvious();
                // dhfdk for duplidbtf dfrt
                if (dfrts.lbstIndfxOf(dfrt) != dfrts.indfxOf(dfrt)) {
                    throw nfw CfrtifidbtfEndodingExdfption
                        ("Duplidbtf Cfrtifidbtf");
                }
                // gft fndodfd dfrtifidbtfs
                bytf[] fndodfd = dfrt.gftEndodfd();
                bytfs.writf(fndodfd);
            }

            // Wrbp thf dbtb in b SEQUENCE
            DfrOutputStrfbm dfrout = nfw DfrOutputStrfbm();
            dfrout.writf(DfrVbluf.tbg_SfqufndfOf, bytfs);
            rfturn dfrout.toBytfArrby();

        } dbtdh (IOExdfption iof) {
           throw nfw CfrtifidbtfEndodingExdfption("IOExdfption fndoding " +
                   "PkiPbth dbtb: " + iof, iof);
        }
    }

    /**
     * Endodf thf CfrtPbth using PKCS#7 formbt.
     *
     * @rfturn b bytf brrby dontbining thf binbry fndoding of thf PKCS#7 objfdt
     * @fxdfption CfrtifidbtfEndodingExdfption if bn fxdfption oddurs
     */
    privbtf bytf[] fndodfPKCS7() throws CfrtifidbtfEndodingExdfption {
        PKCS7 p7 = nfw PKCS7(nfw AlgorithmId[0],
                             nfw ContfntInfo(ContfntInfo.DATA_OID, null),
                             dfrts.toArrby(nfw X509Cfrtifidbtf[dfrts.sizf()]),
                             nfw SignfrInfo[0]);
        DfrOutputStrfbm dfrout = nfw DfrOutputStrfbm();
        try {
            p7.fndodfSignfdDbtb(dfrout);
        } dbtdh (IOExdfption iof) {
            throw nfw CfrtifidbtfEndodingExdfption(iof.gftMfssbgf());
        }
        rfturn dfrout.toBytfArrby();
    }

    /**
     * Rfturns thf fndodfd form of this dfrtifidbtion pbth, using thf
     * spfdififd fndoding.
     *
     * @pbrbm fndoding thf nbmf of thf fndoding to usf
     * @rfturn thf fndodfd bytfs
     * @fxdfption CfrtifidbtfEndodingExdfption if bn fndoding frror oddurs or
     *   thf fndoding rfqufstfd is not supportfd
     */
    @Ovfrridf
    publid bytf[] gftEndodfd(String fndoding)
            throws CfrtifidbtfEndodingExdfption {
        switdh (fndoding) {
            dbsf PKIPATH_ENCODING:
                rfturn fndodfPKIPATH();
            dbsf PKCS7_ENCODING:
                rfturn fndodfPKCS7();
            dffbult:
                throw nfw CfrtifidbtfEndodingExdfption("unsupportfd fndoding");
        }
    }

    /**
     * Rfturns thf fndodings supportfd by this dfrtifidbtion pbth, with thf
     * dffbult fndoding first.
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> ovfr thf nbmfs of thf supportfd
     *         fndodings (bs Strings)
     */
    publid stbtid Itfrbtor<String> gftEndodingsStbtid() {
        rfturn fndodingList.itfrbtor();
    }

    /**
     * Rfturns bn itfrbtion of thf fndodings supportfd by this dfrtifidbtion
     * pbth, with thf dffbult fndoding first.
     * <p>
     * Attfmpts to modify thf rfturnfd <dodf>Itfrbtor</dodf> vib its
     * <dodf>rfmovf</dodf> mfthod rfsult in bn
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf>.
     *
     * @rfturn bn <dodf>Itfrbtor</dodf> ovfr thf nbmfs of thf supportfd
     *         fndodings (bs Strings)
     */
    @Ovfrridf
    publid Itfrbtor<String> gftEndodings() {
        rfturn gftEndodingsStbtid();
    }

    /**
     * Rfturns thf list of dfrtifidbtfs in this dfrtifidbtion pbth.
     * Thf <dodf>List</dodf> rfturnfd must bf immutbblf bnd thrfbd-sbff.
     *
     * @rfturn bn immutbblf <dodf>List</dodf> of <dodf>X509Cfrtifidbtf</dodf>s
     *         (mby bf fmpty, but not null)
     */
    @Ovfrridf
    publid List<X509Cfrtifidbtf> gftCfrtifidbtfs() {
        rfturn dfrts;
    }
}
