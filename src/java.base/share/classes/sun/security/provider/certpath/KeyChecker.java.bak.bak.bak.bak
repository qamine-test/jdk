/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr.dfrtpbth;

import jbvb.util.*;
import jbvb.sfdurity.dfrt.*;
import jbvb.sfdurity.dfrt.PKIXRfbson;

import sun.sfdurity.util.Dfbug;
import stbtid sun.sfdurity.x509.PKIXExtfnsions.*;

/**
 * KfyChfdkfr is b <dodf>PKIXCfrtPbthChfdkfr</dodf> thbt dhfdks thbt thf
 * kfyCfrtSign bit is sft in thf kfyUsbgf fxtfnsion in bn intfrmfdibtf CA
 * dfrtifidbtf. It blso dhfdks whfthfr thf finbl dfrtifidbtf in b
 * dfrtifidbtion pbth mffts thf spfdififd tbrgft donstrbints spfdififd bs
 * b CfrtSflfdtor in thf PKIXPbrbmftfrs pbssfd to thf CfrtPbthVblidbtor.
 *
 * @sindf       1.4
 * @buthor      Ybssir Ellfy
 */
dlbss KfyChfdkfr fxtfnds PKIXCfrtPbthChfdkfr {

    privbtf stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("dfrtpbth");
    privbtf finbl int dfrtPbthLfn;
    privbtf finbl CfrtSflfdtor tbrgftConstrbints;
    privbtf int rfmbiningCfrts;

    privbtf Sft<String> supportfdExts;

    /**
     * Crfbtfs b KfyChfdkfr.
     *
     * @pbrbm dfrtPbthLfn bllowbblf dfrt pbth lfngth
     * @pbrbm tbrgftCfrtSfl b CfrtSflfdtor objfdt spfdifying thf donstrbints
     * on thf tbrgft dfrtifidbtf
     */
    KfyChfdkfr(int dfrtPbthLfn, CfrtSflfdtor tbrgftCfrtSfl) {
        this.dfrtPbthLfn = dfrtPbthLfn;
        this.tbrgftConstrbints = tbrgftCfrtSfl;
    }

    /**
     * Initiblizfs thf intfrnbl stbtf of thf dhfdkfr from pbrbmftfrs
     * spfdififd in thf donstrudtor
     */
    @Ovfrridf
    publid void init(boolfbn forwbrd) throws CfrtPbthVblidbtorExdfption {
        if (!forwbrd) {
            rfmbiningCfrts = dfrtPbthLfn;
        } flsf {
            throw nfw CfrtPbthVblidbtorExdfption
                ("forwbrd dhfdking not supportfd");
        }
    }

    @Ovfrridf
    publid boolfbn isForwbrdChfdkingSupportfd() {
        rfturn fblsf;
    }

    @Ovfrridf
    publid Sft<String> gftSupportfdExtfnsions() {
        if (supportfdExts == null) {
            supportfdExts = nfw HbshSft<String>(3);
            supportfdExts.bdd(KfyUsbgf_Id.toString());
            supportfdExts.bdd(ExtfndfdKfyUsbgf_Id.toString());
            supportfdExts.bdd(SubjfdtAltfrnbtivfNbmf_Id.toString());
            supportfdExts = Collfdtions.unmodifibblfSft(supportfdExts);
        }
        rfturn supportfdExts;
    }

    /**
     * Chfdks thbt kfyUsbgf bnd tbrgft donstrbints brf sbtisfifd by
     * thf spfdififd dfrtifidbtf.
     *
     * @pbrbm dfrt thf Cfrtifidbtf
     * @pbrbm unrfsolvfdCritExts thf unrfsolvfd dritidbl fxtfnsions
     * @throws CfrtPbthVblidbtorExdfption if dfrtifidbtf dofs not vfrify
     */
    @Ovfrridf
    publid void dhfdk(Cfrtifidbtf dfrt, Collfdtion<String> unrfsCritExts)
        throws CfrtPbthVblidbtorExdfption
    {
        X509Cfrtifidbtf durrCfrt = (X509Cfrtifidbtf)dfrt;

        rfmbiningCfrts--;

        // if finbl dfrtifidbtf, dhfdk thbt tbrgft donstrbints brf sbtisfifd
        if (rfmbiningCfrts == 0) {
            if (tbrgftConstrbints != null &&
                tbrgftConstrbints.mbtdh(durrCfrt) == fblsf) {
                throw nfw CfrtPbthVblidbtorExdfption("tbrgft dfrtifidbtf " +
                    "donstrbints dhfdk fbilfd");
            }
        } flsf {
            // othfrwisf, vfrify thbt kfyCfrtSign bit is sft in CA dfrtifidbtf
            vfrifyCAKfyUsbgf(durrCfrt);
        }

        // rfmovf thf fxtfnsions thbt wf hbvf dhfdkfd
        if (unrfsCritExts != null && !unrfsCritExts.isEmpty()) {
            unrfsCritExts.rfmovf(KfyUsbgf_Id.toString());
            unrfsCritExts.rfmovf(ExtfndfdKfyUsbgf_Id.toString());
            unrfsCritExts.rfmovf(SubjfdtAltfrnbtivfNbmf_Id.toString());
        }
    }

    // thf indfx of kfyCfrtSign in thf boolfbn KfyUsbgf brrby
    privbtf stbtid finbl int KEY_CERT_SIGN = 5;
    /**
     * Vfrififs thf kfy usbgf fxtfnsion in b CA dfrt.
     * Thf kfy usbgf fxtfnsion, if prfsfnt, must bssfrt thf kfyCfrtSign bit.
     * Thf fxtfndfd kfy usbgf fxtfnsion is not dhfdkfd (sff CR 4776794 for
     * morf informbtion).
     */
    stbtid void vfrifyCAKfyUsbgf(X509Cfrtifidbtf dfrt)
            throws CfrtPbthVblidbtorExdfption {
        String msg = "CA kfy usbgf";
        if (dfbug != null) {
            dfbug.println("KfyChfdkfr.vfrifyCAKfyUsbgf() ---dhfdking " + msg
                          + "...");
        }

        boolfbn[] kfyUsbgfBits = dfrt.gftKfyUsbgf();

        // gftKfyUsbgf rfturns null if thf KfyUsbgf fxtfnsion is not prfsfnt
        // in thf dfrtifidbtf - in whidh dbsf thfrf is nothing to dhfdk
        if (kfyUsbgfBits == null) {
            rfturn;
        }

        // throw bn fxdfption if thf kfyCfrtSign bit is not sft
        if (!kfyUsbgfBits[KEY_CERT_SIGN]) {
            throw nfw CfrtPbthVblidbtorExdfption
                (msg + " dhfdk fbilfd: kfyCfrtSign bit is not sft", null,
                 null, -1, PKIXRfbson.INVALID_KEY_USAGE);
        }

        if (dfbug != null) {
            dfbug.println("KfyChfdkfr.vfrifyCAKfyUsbgf() " + msg
                          + " vfrififd.");
        }
    }
}
