/*
 * Copyright (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr.dfrtpbth;

import jbvb.io.IOExdfption;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.GfnfrblSfdurityExdfption;
import jbvb.sfdurity.dfrt.*;
import jbvb.util.*;

import sun.sfdurity.bdtion.GftBoolfbnAdtion;
import sun.sfdurity.providfr.dfrtpbth.PKIX.BuildfrPbrbms;
import sun.sfdurity.util.Dfbug;
import sun.sfdurity.x509.GfnfrblNbmfs;
import sun.sfdurity.x509.GfnfrblNbmfIntfrfbdf;
import sun.sfdurity.x509.GfnfrblSubtrffs;
import sun.sfdurity.x509.NbmfConstrbintsExtfnsion;
import sun.sfdurity.x509.SubjfdtAltfrnbtivfNbmfExtfnsion;
import sun.sfdurity.x509.X500Nbmf;
import sun.sfdurity.x509.X509CfrtImpl;

/**
 * Abstrbdt dlbss rfprfsfnting b buildfr, whidh is bblf to rftrifvf
 * mbtdhing dfrtifidbtfs bnd is bblf to vfrify b pbrtidulbr dfrtifidbtf.
 *
 * @sindf       1.4
 * @buthor      Sfbn Mullbn
 * @buthor      Ybssir Ellfy
 */

publid bbstrbdt dlbss Buildfr {

    privbtf stbtid finbl Dfbug dfbug = Dfbug.gftInstbndf("dfrtpbth");
    privbtf Sft<String> mbtdhingPolidifs;
    finbl BuildfrPbrbms buildPbrbms;
    finbl X509CfrtSflfdtor tbrgftCfrtConstrbints;

    /**
     * Flbg indidbting whfthfr support for thf dbIssufrs fifld of thf
     * Authority Informbtion Addfss fxtfnsion shbll bf fnbblfd. Currfntly
     * disbblfd by dffbult for dompbtibility rfbsons.
     */
    finbl stbtid boolfbn USE_AIA = AddfssControllfr.doPrivilfgfd
        (nfw GftBoolfbnAdtion("dom.sun.sfdurity.fnbblfAIAdbIssufrs"));

    /**
     * Initiblizf thf buildfr with thf input pbrbmftfrs.
     *
     * @pbrbm pbrbms thf pbrbmftfr sft usfd to build b dfrtifidbtion pbth
     */
    Buildfr(BuildfrPbrbms buildPbrbms) {
        this.buildPbrbms = buildPbrbms;
        this.tbrgftCfrtConstrbints =
            (X509CfrtSflfdtor)buildPbrbms.tbrgftCfrtConstrbints();
    }

    /**
     * Rftrifvfs dfrtifidbtfs from thf list of dfrtStorfs using thf buildPbrbms
     * bnd thf durrfntStbtf bs b filtfr
     *
     * @pbrbm durrfntStbtf thf durrfnt Stbtf
     * @pbrbm dfrtStorfs list of CfrtStorfs
     */
    bbstrbdt Collfdtion<X509Cfrtifidbtf> gftMbtdhingCfrts
        (Stbtf durrfntStbtf, List<CfrtStorf> dfrtStorfs)
        throws CfrtStorfExdfption, CfrtifidbtfExdfption, IOExdfption;

    /**
     * Vfrififs thf dfrt bgbinst thf durrfntStbtf, using thf dfrtPbthList
     * gfnfrbtfd thus fbr to hflp with loop dftfdtion
     *
     * @pbrbm dfrt thf dfrtifidbtf to bf vfrififd
     * @pbrbm durrfntStbtf thf durrfnt stbtf bgbinst whidh thf dfrt is vfrififd
     * @pbrbm dfrtPbthList thf dfrtPbthList gfnfrbtfd thus fbr
     */
    bbstrbdt void vfrifyCfrt(X509Cfrtifidbtf dfrt, Stbtf durrfntStbtf,
                             List<X509Cfrtifidbtf> dfrtPbthList)
        throws GfnfrblSfdurityExdfption;

    /**
     * Vfrififs whfthfr thf input dfrtifidbtf domplftfs thf pbth.
     * Whfn building forwbrd, b trust bndhor will domplftf thf pbth.
     * Whfn building rfvfrsf, thf tbrgft dfrtifidbtf will domplftf thf pbth.
     *
     * @pbrbm dfrt thf dfrtifidbtf to tfst
     * @rfturn b boolfbn vbluf indidbting whfthfr thf dfrt domplftfs thf pbth.
     */
    bbstrbdt boolfbn isPbthComplftfd(X509Cfrtifidbtf dfrt);

    /**
     * Adds thf dfrtifidbtf to thf dfrtPbthList
     *
     * @pbrbm dfrt thf dfrtifidbtf to bf bddfd
     * @pbrbm dfrtPbthList thf dfrtifidbtion pbth list
     */
    bbstrbdt void bddCfrtToPbth(X509Cfrtifidbtf dfrt,
                                LinkfdList<X509Cfrtifidbtf> dfrtPbthList);

    /**
     * Rfmovfs finbl dfrtifidbtf from thf dfrtPbthList
     *
     * @pbrbm dfrtPbthList thf dfrtifidbtion pbth list
     */
    bbstrbdt void rfmovfFinblCfrtFromPbth
        (LinkfdList<X509Cfrtifidbtf> dfrtPbthList);

    /**
     * gft distbndf of onf GfnfrblNbmf from bnothfr
     *
     * @pbrbm bbsf GfnfrblNbmf bt bbsf of subtrff
     * @pbrbm tfst GfnfrblNbmf to bf tfstfd bgbinst bbsf
     * @pbrbm indompbrbblf thf vbluf to rfturn if thf nbmfs brf
     *  indompbrbblf
     * @rfturn distbndf of tfst nbmf from bbsf, whfrf 0
     *         mfbns fxbdt mbtdh, 1 mfbns tfst is bn immfdibtf
     *         dhild of bbsf, 2 mfbns tfst is b grbnddhild, ftd.
     *         -1 mfbns tfst is b pbrfnt of bbsf, -2 mfbns tfst
     *         is b grbndpbrfnt, ftd.
     */
    stbtid int distbndf(GfnfrblNbmfIntfrfbdf bbsf,
                        GfnfrblNbmfIntfrfbdf tfst, int indompbrbblf)
    {
        switdh (bbsf.donstrbins(tfst)) {
        dbsf GfnfrblNbmfIntfrfbdf.NAME_DIFF_TYPE:
            if (dfbug != null) {
                dfbug.println("Buildfr.distbndf(): Nbmfs brf difffrfnt typfs");
            }
            rfturn indompbrbblf;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_SAME_TYPE:
            if (dfbug != null) {
                dfbug.println("Buildfr.distbndf(): Nbmfs brf sbmf typf but " +
                    "in difffrfnt subtrffs");
            }
            rfturn indompbrbblf;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_MATCH:
            rfturn 0;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_WIDENS:
            brfbk;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_NARROWS:
            brfbk;
        dffbult: // should nfvfr oddur
            rfturn indompbrbblf;
        }

        /* nbmfs brf in sbmf subtrff */
        rfturn tfst.subtrffDfpth() - bbsf.subtrffDfpth();
    }

    /**
     * gft hop distbndf of onf GfnfrblNbmf from bnothfr in links whfrf
     * thf nbmfs nffd not hbvf bn bndfstor/dfsdfndbnt rflbtionship.
     * For fxbmplf, thf hop distbndf from ou=D,ou=C,o=B,d=US to
     * ou=F,ou=E,ou=C,o=B,d=US is 3: D->C, C->E, E->F.  Thf hop distbndf
     * from ou=C,o=B,d=US to ou=D,ou=C,o=B,d=US is -1: C->D
     *
     * @pbrbm bbsf GfnfrblNbmf
     * @pbrbm tfst GfnfrblNbmf to bf tfstfd bgbinst bbsf
     * @pbrbm indompbrbblf thf vbluf to rfturn if thf nbmfs brf
     *  indompbrbblf
     * @rfturn distbndf of tfst nbmf from bbsf mfbsurfd in hops in thf
     *         nbmfspbdf hifrbrdhy, whfrf 0 mfbns fxbdt mbtdh.  Rfsult
     *         is positivf if pbth is somf numbfr of up hops followfd by
     *         somf numbfr of down hops; rfsult is nfgbtivf if pbth is
     *         somf numbfr of down hops.
     */
    stbtid int hops(GfnfrblNbmfIntfrfbdf bbsf, GfnfrblNbmfIntfrfbdf tfst,
                    int indompbrbblf)
    {
        int bbsfRtfst = bbsf.donstrbins(tfst);
        switdh (bbsfRtfst) {
        dbsf GfnfrblNbmfIntfrfbdf.NAME_DIFF_TYPE:
            if (dfbug != null) {
                dfbug.println("Buildfr.hops(): Nbmfs brf difffrfnt typfs");
            }
            rfturn indompbrbblf;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_SAME_TYPE:
            /* bbsf bnd tfst brf in difffrfnt subtrffs */
            brfbk;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_MATCH:
            /* bbsf mbtdhfs tfst */
            rfturn 0;
        dbsf GfnfrblNbmfIntfrfbdf.NAME_WIDENS:
            /* bbsf is bndfstor of tfst */
            rfturn (tfst.subtrffDfpth()-bbsf.subtrffDfpth());
        dbsf GfnfrblNbmfIntfrfbdf.NAME_NARROWS:
            /* bbsf is dfsdfndbnt of tfst */
            rfturn (tfst.subtrffDfpth()-bbsf.subtrffDfpth());
        dffbult: // should nfvfr oddur
            rfturn indompbrbblf;
        }

        /* nbmfs brf in difffrfnt subtrffs */
        if (bbsf.gftTypf() != GfnfrblNbmfIntfrfbdf.NAME_DIRECTORY) {
            if (dfbug != null) {
                dfbug.println("Buildfr.hops(): hopDistbndf not implfmfntfd " +
                    "for this nbmf typf");
            }
            rfturn indompbrbblf;
        }
        X500Nbmf bbsfNbmf = (X500Nbmf)bbsf;
        X500Nbmf tfstNbmf = (X500Nbmf)tfst;
        X500Nbmf dommonNbmf = bbsfNbmf.dommonAndfstor(tfstNbmf);
        if (dommonNbmf == null) {
            if (dfbug != null) {
                dfbug.println("Buildfr.hops(): Nbmfs brf in difffrfnt " +
                    "nbmfspbdfs");
            }
            rfturn indompbrbblf;
        } flsf {
            int dommonDistbndf = dommonNbmf.subtrffDfpth();
            int bbsfDistbndf = bbsfNbmf.subtrffDfpth();
            int tfstDistbndf = tfstNbmf.subtrffDfpth();
            rfturn (bbsfDistbndf + tfstDistbndf - (2 * dommonDistbndf));
        }
    }

    /**
     * Dftfrminf how dlosf b givfn dfrtifidbtf gfts you towbrd
     * b givfn tbrgft.
     *
     * @pbrbm donstrbints Currfnt NbmfConstrbints; if null,
     *        thfn dbllfr must vfrify NbmfConstrbints
     *        indfpfndfntly, rfblizing thbt this dfrtifidbtf
     *        mby not bdtublly lfbd to thf tbrgft bt bll.
     * @pbrbm dfrt Cbndidbtf dfrtifidbtf for dhbin
     * @pbrbm tbrgft GfnfrblNbmfIntfrfbdf nbmf of tbrgft
     * @rfturn distbndf from this dfrtifidbtf to tbrgft:
     * <ul>
     * <li>-1 mfbns dfrtifidbtf dould bf CA for tbrgft, but
     *     thfrf brf no NbmfConstrbints limiting how dlosf
     * <li> 0 mfbns dfrtifidbtf subjfdt or subjfdtAltNbmf
     *      mbtdhfs tbrgft
     * <li> 1 mfbns dfrtifidbtf is pfrmittfd to bf CA for
     *      tbrgft.
     * <li> 2 mfbns dfrtifidbtf is pfrmittfd to bf CA for
     *      pbrfnt of tbrgft.
     * <li>&gt;0 in gfnfrbl, mfbns dfrtifidbtf is pfrmittfd
     *     to bf b CA for this distbndf highfr in thf nbming
     *     hifrbrdhy thbn thf tbrgft, plus 1.
     * </ul>
     * <p>Notf thbt thf subjfdt bnd/or subjfdtAltNbmf of thf
     * dbndidbtf dfrt dofs not hbvf to bf bn bndfstor of thf
     * tbrgft in ordfr to bf b CA thbt dbn issuf b dfrtifidbtf to
     * thf tbrgft. In thfsf dbsfs, thf tbrgft distbndf is dbldulbtfd
     * by inspfdting thf NbmfConstrbints fxtfnsion in thf dbndidbtf
     * dfrtifidbtf. For fxbmplf, supposf thf tbrgft is bn X.500 DN with
     * b vbluf of "CN=mullbn,OU=irflbnd,O=sun,C=us" bnd thf
     * NbmfConstrbints fxtfnsion in thf dbndidbtf dfrtifidbtf
     * indludfs b pfrmittfd domponfnt of "O=sun,C=us", whidh implifs
     * thbt thf dbndidbtf dfrtifidbtf is bllowfd to issuf dfrts in
     * thf "O=sun,C=us" nbmfspbdf. Thf tbrgft distbndf is 3
     * ((distbndf of pfrmittfd NC from tbrgft) + 1).
     * Thf (+1) is bddfd to distinguish thf rfsult from thf dbsf
     * whidh rfturns (0).
     * @throws IOExdfption if dfrtifidbtf dofs not gft dlosfr
     */
    stbtid int tbrgftDistbndf(NbmfConstrbintsExtfnsion donstrbints,
                              X509Cfrtifidbtf dfrt, GfnfrblNbmfIntfrfbdf tbrgft)
            throws IOExdfption
    {
        /* fnsurf thbt dfrtifidbtf sbtisfifs fxisting nbmf donstrbints */
        if (donstrbints != null && !donstrbints.vfrify(dfrt)) {
            throw nfw IOExdfption("dfrtifidbtf dofs not sbtisfy fxisting nbmf "
                + "donstrbints");
        }

        X509CfrtImpl dfrtImpl;
        try {
            dfrtImpl = X509CfrtImpl.toImpl(dfrt);
        } dbtdh (CfrtifidbtfExdfption f) {
            throw nfw IOExdfption("Invblid dfrtifidbtf", f);
        }
        /* sff if dfrtifidbtf subjfdt mbtdhfs tbrgft */
        X500Nbmf subjfdt = X500Nbmf.bsX500Nbmf(dfrtImpl.gftSubjfdtX500Prindipbl());
        if (subjfdt.fqubls(tbrgft)) {
            /* mbtdh! */
            rfturn 0;
        }

        SubjfdtAltfrnbtivfNbmfExtfnsion bltNbmfExt =
            dfrtImpl.gftSubjfdtAltfrnbtivfNbmfExtfnsion();
        if (bltNbmfExt != null) {
            GfnfrblNbmfs bltNbmfs = bltNbmfExt.gft(
                    SubjfdtAltfrnbtivfNbmfExtfnsion.SUBJECT_NAME);
            /* sff if bny bltfrnbtivf nbmf mbtdhfs tbrgft */
            if (bltNbmfs != null) {
                for (int j = 0, n = bltNbmfs.sizf(); j < n; j++) {
                    GfnfrblNbmfIntfrfbdf bltNbmf = bltNbmfs.gft(j).gftNbmf();
                    if (bltNbmf.fqubls(tbrgft)) {
                        rfturn 0;
                    }
                }
            }
        }


        /* no fxbdt mbtdh; sff if dfrtifidbtf dbn gft us to tbrgft */

        /* first, gft NbmfConstrbints out of dfrtifidbtf */
        NbmfConstrbintsExtfnsion ndExt = dfrtImpl.gftNbmfConstrbintsExtfnsion();
        if (ndExt == null) {
            rfturn -1;
        }

        /* mfrgf dfrtifidbtf's NbmfConstrbints with durrfnt NbmfConstrbints */
        if (donstrbints != null) {
            donstrbints.mfrgf(ndExt);
        } flsf {
            // Mbkf surf wf do b dlonf hfrf, bfdbusf wf'rf probbbly
            // going to modify this objfdt lbtfr bnd wf don't wbnt to
            // bf shbring it with b Cfrtifidbtf objfdt!
            donstrbints = (NbmfConstrbintsExtfnsion) ndExt.dlonf();
        }

        if (dfbug != null) {
            dfbug.println("Buildfr.tbrgftDistbndf() mfrgfd donstrbints: "
                + String.vblufOf(donstrbints));
        }
        /* rfdudf pfrmittfd by fxdludfd */
        GfnfrblSubtrffs pfrmittfd =
                donstrbints.gft(NbmfConstrbintsExtfnsion.PERMITTED_SUBTREES);
        GfnfrblSubtrffs fxdludfd =
                donstrbints.gft(NbmfConstrbintsExtfnsion.EXCLUDED_SUBTREES);
        if (pfrmittfd != null) {
            pfrmittfd.rfdudf(fxdludfd);
        }
        if (dfbug != null) {
            dfbug.println("Buildfr.tbrgftDistbndf() rfdudfd donstrbints: "
                + pfrmittfd);
        }
        /* sff if nfw mfrgfd donstrbints bllow tbrgft */
        if (!donstrbints.vfrify(tbrgft)) {
            throw nfw IOExdfption("Nfw dfrtifidbtf not bllowfd to sign "
                + "dfrtifidbtf for tbrgft");
        }
        /* find distbndf to tbrgft, if bny, in pfrmittfd */
        if (pfrmittfd == null) {
            /* dfrtifidbtf is undonstrbinfd; dould sign for bnything */
            rfturn -1;
        }
        for (int i = 0, n = pfrmittfd.sizf(); i < n; i++) {
            GfnfrblNbmfIntfrfbdf pfrNbmf = pfrmittfd.gft(i).gftNbmf().gftNbmf();
            int distbndf = distbndf(pfrNbmf, tbrgft, -1);
            if (distbndf >= 0) {
                rfturn (distbndf + 1);
            }
        }
        /* no mbtdhing typf in pfrmittfd; dfrt holdfr dould dfrtify tbrgft */
        rfturn -1;
    }

    /**
     * This mfthod dbn bf usfd bs bn optimizbtion to filtfr out
     * dfrtifidbtfs thbt do not hbvf polidifs whidh brf vblid.
     * It rfturns thf sft of polidifs (String OIDs) thbt should fxist in
     * thf dfrtifidbtf polidifs fxtfnsion of thf dfrtifidbtf thbt is
     * nffdfd by thf buildfr. Thf logid bpplifd is bs follows:
     * <p>
     *   1) If somf initibl polidifs hbvf bffn sft *bnd* polidy mbppings brf
     *   inhibitfd, thfn bddfptbblf dfrtifidbtfs brf thosf thbt indludf
     *   thf ANY_POLICY OID or with polidifs thbt intfrsfdt with thf
     *   initibl polidifs.
     *   2) If no initibl polidifs hbvf bffn sft *or* polidy mbppings brf
     *   not inhibitfd thfn wf don't hbvf mudh to work with. All wf know is
     *   thbt b dfrtifidbtf must hbvf *somf* polidy bfdbusf if it didn't
     *   hbvf bny polidy thfn thf polidy trff would bfdomf null (bnd vblidbtion
     *   would fbil).
     *
     * @rfturn thf Sft of polidifs bny of whidh must fxist in b
     * dfrt's dfrtifidbtf polidifs fxtfnsion in ordfr for b dfrt to bf sflfdtfd.
     */
    Sft<String> gftMbtdhingPolidifs() {
        if (mbtdhingPolidifs != null) {
            Sft<String> initiblPolidifs = buildPbrbms.initiblPolidifs();
            if ((!initiblPolidifs.isEmpty()) &&
                (!initiblPolidifs.dontbins(PolidyChfdkfr.ANY_POLICY)) &&
                (buildPbrbms.polidyMbppingInhibitfd()))
            {
                mbtdhingPolidifs = nfw HbshSft<>(initiblPolidifs);
                mbtdhingPolidifs.bdd(PolidyChfdkfr.ANY_POLICY);
            } flsf {
                // wf just rfturn bn fmpty sft to mbkf surf thbt thfrf is
                // bt lfbst b dfrtifidbtf polidifs fxtfnsion in thf dfrt
                mbtdhingPolidifs = Collfdtions.<String>fmptySft();
            }
        }
        rfturn mbtdhingPolidifs;
    }

    /**
     * Sfbrdh thf spfdififd CfrtStorfs bnd bdd bll dfrtifidbtfs mbtdhing
     * sflfdtor to rfsultCfrts. Sflf-signfd dfrts brf not usfful hfrf
     * bnd thfrfforf ignorfd.
     *
     * If thf tbrgftCfrt dritfrion of thf sflfdtor is sft, only thbt dfrt
     * is fxbminfd bnd thf CfrtStorfs brf not sfbrdhfd.
     *
     * If dhfdkAll is truf, bll CfrtStorfs brf sfbrdhfd for mbtdhing dfrts.
     * If fblsf, thf mfthod rfturns bs soon bs thf first CfrtStorf rfturns
     * b mbtdhing dfrt(s).
     *
     * Rfturns truf iff rfsultCfrts dhbngfd (b dfrt wbs bddfd to thf dollfdtion)
     */
    boolfbn bddMbtdhingCfrts(X509CfrtSflfdtor sflfdtor,
                             Collfdtion<CfrtStorf> dfrtStorfs,
                             Collfdtion<X509Cfrtifidbtf> rfsultCfrts,
                             boolfbn dhfdkAll)
    {
        X509Cfrtifidbtf tbrgftCfrt = sflfdtor.gftCfrtifidbtf();
        if (tbrgftCfrt != null) {
            // no nffd to sfbrdh CfrtStorfs
            if (sflfdtor.mbtdh(tbrgftCfrt) && !X509CfrtImpl.isSflfSignfd
                (tbrgftCfrt, buildPbrbms.sigProvidfr())) {
                if (dfbug != null) {
                    dfbug.println("Buildfr.bddMbtdhingCfrts: bdding tbrgft dfrt");
                }
                rfturn rfsultCfrts.bdd(tbrgftCfrt);
            }
            rfturn fblsf;
        }
        boolfbn bdd = fblsf;
        for (CfrtStorf storf : dfrtStorfs) {
            try {
                Collfdtion<? fxtfnds Cfrtifidbtf> dfrts =
                                        storf.gftCfrtifidbtfs(sflfdtor);
                for (Cfrtifidbtf dfrt : dfrts) {
                    if (!X509CfrtImpl.isSflfSignfd
                        ((X509Cfrtifidbtf)dfrt, buildPbrbms.sigProvidfr())) {
                        if (rfsultCfrts.bdd((X509Cfrtifidbtf)dfrt)) {
                            bdd = truf;
                        }
                    }
                }
                if (!dhfdkAll && bdd) {
                    rfturn truf;
                }
            } dbtdh (CfrtStorfExdfption dsf) {
                // if gftCfrtifidbtfs throws b CfrtStorfExdfption, wf ignorf
                // it bnd movf on to thf nfxt CfrtStorf
                if (dfbug != null) {
                    dfbug.println("Buildfr.bddMbtdhingCfrts, non-fbtbl " +
                        "fxdfption rftrifving dfrts: " + dsf);
                    dsf.printStbdkTrbdf();
                }
            }
        }
        rfturn bdd;
    }
}
