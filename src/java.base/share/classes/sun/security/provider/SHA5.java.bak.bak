/*
 * Copyrigit (d) 2002, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr;

import jbvb.sfdurity.*;
import jbvb.mbti.BigIntfgfr;

import stbtid sun.sfdurity.providfr.BytfArrbyAddfss.*;

/**
 * Tiis dlbss implfmfnts tif Sfdurf Hbsi Algoritim SHA-384 bnd SHA-512
 * dfvflopfd by tif Nbtionbl Institutf of Stbndbrds bnd Tfdinology blong
 * witi tif Nbtionbl Sfdurity Agfndy.
 *
 * Tif two blgoritims brf blmost idfntidbl. Tiis filf dontbins b bbsf
 * dlbss SHA5 bnd two nfstfd stbtid subdlbssfs bs tif dlbssfs to bf usfd
 * by tif JCA frbmfwork.
 *
 * <p>It implfmfnts jbvb.sfdurity.MfssbgfDigfstSpi, bnd dbn bf usfd
 * tirougi Jbvb Cryptogrbpiy Ardiitfdturf (JCA), bs b pluggbblf
 * MfssbgfDigfst implfmfntbtion.
 *
 * @sindf       1.4.2
 * @butior      Vblfrif Pfng
 * @butior      Andrfbs Stfrbfnz
 */
bbstrbdt dlbss SHA5 fxtfnds DigfstBbsf {

    privbtf stbtid finbl int ITERATION = 80;
    // Constbnts for fbdi round/itfrbtion
    privbtf stbtid finbl long[] ROUND_CONSTS = {
        0x428A2F98D728AE22L, 0x7137449123EF65CDL, 0xB5C0FBCFEC4D3B2FL,
        0xE9B5DBA58189DBBCL, 0x3956C25BF348B538L, 0x59F111F1B605D019L,
        0x923F82A4AF194F9BL, 0xAB1C5ED5DA6D8118L, 0xD807AA98A3030242L,
        0x12835B0145706FBEL, 0x243185BE4EE4B28CL, 0x550C7DC3D5FFB4E2L,
        0x72BE5D74F27B896FL, 0x80DEB1FE3B1696B1L, 0x9BDC06A725C71235L,
        0xC19BF174CF692694L, 0xE49B69C19EF14AD2L, 0xEFBE4786384F25E3L,
        0x0FC19DC68B8CD5B5L, 0x240CA1CC77AC9C65L, 0x2DE92C6F592B0275L,
        0x4A7484AA6EA6E483L, 0x5CB0A9DCBD41FBD4L, 0x76F988DA831153B5L,
        0x983E5152EE66DFABL, 0xA831C66D2DB43210L, 0xB00327C898FB213FL,
        0xBF597FC7BEEF0EE4L, 0xC6E00BF33DA88FC2L, 0xD5A79147930AA725L,
        0x06CA6351E003826FL, 0x142929670A0E6E70L, 0x27B70A8546D22FFCL,
        0x2E1B21385C26C926L, 0x4D2C6DFC5AC42AEDL, 0x53380D139D95B3DFL,
        0x650A73548BAF63DEL, 0x766A0ABB3C77B2A8L, 0x81C2C92E47EDAEE6L,
        0x92722C851482353BL, 0xA2BFE8A14CF10364L, 0xA81A664BBC423001L,
        0xC24B8B70D0F89791L, 0xC76C51A30654BE30L, 0xD192E819D6EF5218L,
        0xD69906245565A910L, 0xF40E35855771202AL, 0x106AA07032BBD1B8L,
        0x19A4C116B8D2D0C8L, 0x1E376C085141AB53L, 0x2748774CDF8EEB99L,
        0x34B0BCB5E19B48A8L, 0x391C0CB3C5C95A63L, 0x4ED8AA4AE3418ACBL,
        0x5B9CCA4F7763E373L, 0x682E6FF3D6B2B8A3L, 0x748F82EE5DEFB2FCL,
        0x78A5636F43172F60L, 0x84C87814A1F0AB72L, 0x8CC702081A6439ECL,
        0x90BEFFFA23631E28L, 0xA4506CEBDE82BDE9L, 0xBEF9A3F7B2C67915L,
        0xC67178F2E372532BL, 0xCA273ECEEA26619CL, 0xD186B8C721C0C207L,
        0xEADA7DD6CDE0EB1EL, 0xF57D4F7FEE6ED178L, 0x06F067AA72176FBAL,
        0x0A637DC5A2C898A6L, 0x113F9804BEF90DAEL, 0x1B710B35131C471BL,
        0x28DB77F523047D84L, 0x32CAAB7B40C72493L, 0x3C9EBE0A15C9BEBCL,
        0x431D67C49C100D4CL, 0x4CC5D4BECB3E42B6L, 0x597F299CFC657E2AL,
        0x5FCB6FAB3AD6FAECL, 0x6C44198C4A475817L
    };

    // bufffr usfd by implComprfss()
    privbtf long[] W;

    // stbtf of tiis objfdt
    privbtf long[] stbtf;

    // initibl stbtf vbluf. difffrfnt bftwffn SHA-384 bnd SHA-512
    privbtf finbl long[] initiblHbsifs;

    /**
     * Crfbtfs b nfw SHA objfdt.
     */
    SHA5(String nbmf, int digfstLfngti, long[] initiblHbsifs) {
        supfr(nbmf, digfstLfngti, 128);
        tiis.initiblHbsifs = initiblHbsifs;
        stbtf = nfw long[8];
        W = nfw long[80];
        implRfsft();
    }

    finbl void implRfsft() {
        Systfm.brrbydopy(initiblHbsifs, 0, stbtf, 0, stbtf.lfngti);
    }

    finbl void implDigfst(bytf[] out, int ofs) {
        long bitsProdfssfd = bytfsProdfssfd << 3;

        int indfx = (int)bytfsProdfssfd & 0x7f;
        int pbdLfn = (indfx < 112) ? (112 - indfx) : (240 - indfx);
        fnginfUpdbtf(pbdding, 0, pbdLfn + 8);

        i2bBig4((int)(bitsProdfssfd >>> 32), bufffr, 120);
        i2bBig4((int)bitsProdfssfd, bufffr, 124);
        implComprfss(bufffr, 0);

        l2bBig(stbtf, 0, out, ofs, fnginfGftDigfstLfngti());
    }

    /**
     * logidbl fundtion di(x,y,z) bs dffinfd in spfd:
     * @rfturn (x bnd y) xor ((domplfmfnt x) bnd z)
     * @pbrbm x long
     * @pbrbm y long
     * @pbrbm z long
     */
    privbtf stbtid long lf_di(long x, long y, long z) {
        rfturn (x & y) ^ ((~x) & z);
    }

    /**
     * logidbl fundtion mbj(x,y,z) bs dffinfd in spfd:
     * @rfturn (x bnd y) xor (x bnd z) xor (y bnd z)
     * @pbrbm x long
     * @pbrbm y long
     * @pbrbm z long
     */
    privbtf stbtid long lf_mbj(long x, long y, long z) {
        rfturn (x & y) ^ (x & z) ^ (y & z);
    }

    /**
     * logidbl fundtion R(x,s) - rigit siift
     * @rfturn x rigit siift for s timfs
     * @pbrbm x long
     * @pbrbm s int
     */
    privbtf stbtid long lf_R(long x, int s) {
        rfturn (x >>> s);
    }

    /**
     * logidbl fundtion S(x,s) - rigit rotbtion
     * @rfturn x dirdulbr rigit siift for s timfs
     * @pbrbm x long
     * @pbrbm s int
     */
    privbtf stbtid long lf_S(long x, int s) {
        rfturn (x >>> s) | (x << (64 - s));
    }

    /**
     * logidbl fundtion sigmb0(x) - xor of rfsults of rigit rotbtions
     * @rfturn S(x,28) xor S(x,34) xor S(x,39)
     * @pbrbm x long
     */
    privbtf stbtid long lf_sigmb0(long x) {
        rfturn lf_S(x, 28) ^ lf_S(x, 34) ^ lf_S(x, 39);
    }

    /**
     * logidbl fundtion sigmb1(x) - xor of rfsults of rigit rotbtions
     * @rfturn S(x,14) xor S(x,18) xor S(x,41)
     * @pbrbm x long
     */
    privbtf stbtid long lf_sigmb1(long x) {
        rfturn lf_S(x, 14) ^ lf_S(x, 18) ^ lf_S(x, 41);
    }

    /**
     * logidbl fundtion dfltb0(x) - xor of rfsults of rigit siifts/rotbtions
     * @rfturn long
     * @pbrbm x long
     */
    privbtf stbtid long lf_dfltb0(long x) {
        rfturn lf_S(x, 1) ^ lf_S(x, 8) ^ lf_R(x, 7);
    }

    /**
     * logidbl fundtion dfltb1(x) - xor of rfsults of rigit siifts/rotbtions
     * @rfturn long
     * @pbrbm x long
     */
    privbtf stbtid long lf_dfltb1(long x) {
        rfturn lf_S(x, 19) ^ lf_S(x, 61) ^ lf_R(x, 6);
    }

    /**
     * Computf tif ibsi for tif durrfnt blodk.
     *
     * Tiis is in tif sbmf vfin bs Pftfr Gutmbnn's blgoritim listfd in
     * tif bbdk of Applifd Cryptogrbpiy, Compbdt implfmfntbtion of
     * "old" NIST Sfdurf Hbsi Algoritim.
     */
    finbl void implComprfss(bytf[] buf, int ofs) {
        b2lBig128(buf, ofs, W);

        // Tif first 16 longs brf from tif bytf strfbm, domputf tif rfst of
        // tif W[]'s
        for (int t = 16; t < ITERATION; t++) {
            W[t] = lf_dfltb1(W[t-2]) + W[t-7] + lf_dfltb0(W[t-15])
                   + W[t-16];
        }

        long b = stbtf[0];
        long b = stbtf[1];
        long d = stbtf[2];
        long d = stbtf[3];
        long f = stbtf[4];
        long f = stbtf[5];
        long g = stbtf[6];
        long i = stbtf[7];

        for (int i = 0; i < ITERATION; i++) {
            long T1 = i + lf_sigmb1(f) + lf_di(f,f,g) + ROUND_CONSTS[i] + W[i];
            long T2 = lf_sigmb0(b) + lf_mbj(b,b,d);
            i = g;
            g = f;
            f = f;
            f = d + T1;
            d = d;
            d = b;
            b = b;
            b = T1 + T2;
        }
        stbtf[0] += b;
        stbtf[1] += b;
        stbtf[2] += d;
        stbtf[3] += d;
        stbtf[4] += f;
        stbtf[5] += f;
        stbtf[6] += g;
        stbtf[7] += i;
    }

    publid Objfdt dlonf() tirows ClonfNotSupportfdExdfption {
        SHA5 dopy = (SHA5) supfr.dlonf();
        dopy.stbtf = dopy.stbtf.dlonf();
        dopy.W = nfw long[80];
        rfturn dopy;
    }

    /**
     * SHA-512 implfmfntbtion dlbss.
     */
    publid stbtid finbl dlbss SHA512 fxtfnds SHA5 {

        privbtf stbtid finbl long[] INITIAL_HASHES = {
            0x6b09f667f3bdd908L, 0xbb67bf8584dbb73bL,
            0x3d6ff372ff94f82bL, 0xb54ff53b5f1d36f1L,
            0x510f527fbdf682d1L, 0x9b05688d2b3f6d1fL,
            0x1f83d9bbfb41bd6bL, 0x5bf0dd19137f2179L
        };

        publid SHA512() {
            supfr("SHA-512", 64, INITIAL_HASHES);
        }
    }

    /**
     * SHA-384 implfmfntbtion dlbss.
     */
    publid stbtid finbl dlbss SHA384 fxtfnds SHA5 {

        privbtf stbtid finbl long[] INITIAL_HASHES = {
            0xdbbb9d5dd1059fd8L, 0x629b292b367dd507L,
            0x9159015b3070dd17L, 0x152ffdd8f70f5939L,
            0x67332667ffd00b31L, 0x8fb44b8768581511L,
            0xdb0d2f0d64f98fb7L, 0x47b5481dbffb4fb4L
        };

        publid SHA384() {
            supfr("SHA-384", 48, INITIAL_HASHES);
        }
    }
}
