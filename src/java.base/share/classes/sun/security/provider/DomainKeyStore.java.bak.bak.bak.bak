/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.providfr;

import jbvb.io.*;
import jbvb.nft.*;
import jbvb.sfdurity.*;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.sfdurity.dfrt.CfrtifidbtfFbdtory;
import jbvb.sfdurity.dfrt.CfrtifidbtfExdfption;
import jbvb.util.*;

import sun.misd.IOUtils;
import sun.sfdurity.pkds.EndryptfdPrivbtfKfyInfo;
import sun.sfdurity.util.PolidyUtil;

/**
 * This dlbss providfs thf dombin kfystorf typf idfntififd bs "DKS".
 * DKS prfsfnts b dollfdtion of sfpbrbtf kfystorfs bs b singlf logidbl kfystorf.
 * Thf dollfdtion of kfystorfs is spfdififd in b dombin donfigurbtion filf whidh
 * is pbssfd to DKS in b {@link DombinLobdStorfPbrbmftfr}.
 * <p>
 * Thf following propfrtifs brf supportfd:
 * <dl>
 * <dt> {@dodf kfystorfTypf="<typf>"} </dt>
 *     <dd> Thf kfystorf typf. </dd>
 * <dt> {@dodf kfystorfURI="<url>"} </dt>
 *     <dd> Thf kfystorf lodbtion. </dd>
 * <dt> {@dodf kfystorfProvidfrNbmf="<nbmf>"} </dt>
 *     <dd> Thf nbmf of thf kfystorf's JCE providfr. </dd>
 * <dt> {@dodf kfystorfPbsswordEnv="<fnvironmfnt-vbribblf>"} </dt>
 *     <dd> Thf fnvironmfnt vbribblf thbt storfs b kfystorf pbssword.
 * <dt> {@dodf fntryNbmfSfpbrbtor="<sfpbrbtor>"} </dt>
 *     <dd> Thf sfpbrbtor bftwffn b kfystorf nbmf prffix bnd bn fntry nbmf.
 *          Whfn spfdififd, it bpplifs to bll thf fntrifs in b dombin.
 *          Its dffbult vbluf is b spbdf. </dd>
 * </dl>
 *
 * @sindf 1.8
 */

bbstrbdt dlbss DombinKfyStorf fxtfnds KfyStorfSpi {

    // rfgulbr DKS
    publid stbtid finbl dlbss DKS fxtfnds DombinKfyStorf {
        String donvfrtAlibs(String blibs) {
            rfturn blibs.toLowfrCbsf(Lodblf.ENGLISH);
        }
    }

    // DKS propfrty nbmfs
    privbtf stbtid finbl String ENTRY_NAME_SEPARATOR = "fntrynbmfsfpbrbtor";
    privbtf stbtid finbl String KEYSTORE_PROVIDER_NAME = "kfystorfprovidfrnbmf";
    privbtf stbtid finbl String KEYSTORE_TYPE = "kfystorftypf";
    privbtf stbtid finbl String KEYSTORE_URI = "kfystorfuri";
    privbtf stbtid finbl String KEYSTORE_PASSWORD_ENV = "kfystorfpbsswordfnv";

    // RfgEx mftb dhbrbdtfrs
    privbtf stbtid finbl String REGEX_META = ".$|()[{^?*+\\";

    // Dffbult prffix for kfystorfs lobdfd-by-strfbm
    privbtf stbtid finbl String DEFAULT_STREAM_PREFIX = "iostrfbm";
    privbtf int strfbmCountfr = 1;
    privbtf String fntryNbmfSfpbrbtor = " ";
    privbtf String fntryNbmfSfpbrbtorRfgEx = " ";

    // Dffbult kfystorf typf
    privbtf stbtid finbl String DEFAULT_KEYSTORE_TYPE =
        KfyStorf.gftDffbultTypf();

    // Dombin kfystorfs
    privbtf finbl Mbp<String, KfyStorf> kfystorfs = nfw HbshMbp<>();

    DombinKfyStorf() {
    }

    // donvfrt bn blibs to intfrnbl form, ovfrriddfn in subdlbssfs:
    // lowfr dbsf for rfgulbr DKS
    bbstrbdt String donvfrtAlibs(String blibs);

    /**
     * Rfturns thf kfy bssodibtfd with thf givfn blibs, using thf givfn
     * pbssword to rfdovfr it.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm pbssword thf pbssword for rfdovfring thf kfy
     *
     * @rfturn thf rfqufstfd kfy, or null if thf givfn blibs dofs not fxist
     * or dofs not idfntify b <i>kfy fntry</i>.
     *
     * @fxdfption NoSudhAlgorithmExdfption if thf blgorithm for rfdovfring thf
     * kfy dbnnot bf found
     * @fxdfption UnrfdovfrbblfKfyExdfption if thf kfy dbnnot bf rfdovfrfd
     * (f.g., thf givfn pbssword is wrong).
     */
    publid Kfy fnginfGftKfy(String blibs, dhbr[] pbssword)
        throws NoSudhAlgorithmExdfption, UnrfdovfrbblfKfyExdfption
    {
        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);
        Kfy kfy = null;

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                kfy = kfystorf.gftKfy(fntryAlibs, pbssword);
                if (kfy != null) {
                    brfbk;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn kfy;
    }

    /**
     * Rfturns thf dfrtifidbtf dhbin bssodibtfd with thf givfn blibs.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf dfrtifidbtf dhbin (ordfrfd with thf usfr's dfrtifidbtf first
     * bnd thf root dfrtifidbtf buthority lbst), or null if thf givfn blibs
     * dofs not fxist or dofs not dontbin b dfrtifidbtf dhbin (i.f., thf givfn
     * blibs idfntififs fithfr b <i>trustfd dfrtifidbtf fntry</i> or b
     * <i>kfy fntry</i> without b dfrtifidbtf dhbin).
     */
    publid Cfrtifidbtf[] fnginfGftCfrtifidbtfChbin(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);
        Cfrtifidbtf[] dhbin = null;

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                dhbin = kfystorf.gftCfrtifidbtfChbin(fntryAlibs);
                if (dhbin != null) {
                    brfbk;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn dhbin;
    }

    /**
     * Rfturns thf dfrtifidbtf bssodibtfd with thf givfn blibs.
     *
     * <p>If thf givfn blibs nbmf idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, thf dfrtifidbtf bssodibtfd with thbt
     * fntry is rfturnfd. If thf givfn blibs nbmf idfntififs b
     * <i>kfy fntry</i>, thf first flfmfnt of thf dfrtifidbtf dhbin of thbt
     * fntry is rfturnfd, or null if thbt fntry dofs not hbvf b dfrtifidbtf
     * dhbin.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf dfrtifidbtf, or null if thf givfn blibs dofs not fxist or
     * dofs not dontbin b dfrtifidbtf.
     */
    publid Cfrtifidbtf fnginfGftCfrtifidbtf(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);
        Cfrtifidbtf dfrt = null;

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                dfrt = kfystorf.gftCfrtifidbtf(fntryAlibs);
                if (dfrt != null) {
                    brfbk;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn dfrt;
    }

    /**
     * Rfturns thf drfbtion dbtf of thf fntry idfntififd by thf givfn blibs.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn thf drfbtion dbtf of this fntry, or null if thf givfn blibs dofs
     * not fxist
     */
    publid Dbtf fnginfGftCrfbtionDbtf(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);
        Dbtf dbtf = null;

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                dbtf = kfystorf.gftCrfbtionDbtf(fntryAlibs);
                if (dbtf != null) {
                    brfbk;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn dbtf;
    }

    /**
     * Assigns thf givfn privbtf kfy to thf givfn blibs, protfdting
     * it with thf givfn pbssword bs dffinfd in PKCS8.
     *
     * <p>Thf givfn jbvb.sfdurity.PrivbtfKfy <dodf>kfy</dodf> must
     * bf bddompbnifd by b dfrtifidbtf dhbin dfrtifying thf
     * dorrfsponding publid kfy.
     *
     * <p>If thf givfn blibs blrfbdy fxists, thf kfystorf informbtion
     * bssodibtfd with it is ovfrriddfn by thf givfn kfy bnd dfrtifidbtf
     * dhbin.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm kfy thf privbtf kfy to bf bssodibtfd with thf blibs
     * @pbrbm pbssword thf pbssword to protfdt thf kfy
     * @pbrbm dhbin thf dfrtifidbtf dhbin for thf dorrfsponding publid
     * kfy (only rfquirfd if thf givfn kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if thf givfn kfy is not b privbtf kfy,
     * dbnnot bf protfdtfd, or this opfrbtion fbils for somf othfr rfbson
     */
    publid void fnginfSftKfyEntry(String blibs, Kfy kfy, dhbr[] pbssword,
                                  Cfrtifidbtf[] dhbin)
        throws KfyStorfExdfption
    {
        AbstrbdtMbp.SimplfEntry<String,
            AbstrbdtMbp.SimplfEntry<String, KfyStorf>> pbir =
                gftKfystorfForWriting(blibs);

        if (pbir == null) {
            throw nfw KfyStorfExdfption("Error sftting kfy fntry for '" +
                blibs + "'");
        }
        String fntryAlibs = pbir.gftKfy();
        Mbp.Entry<String, KfyStorf> kfystorf = pbir.gftVbluf();
        kfystorf.gftVbluf().sftKfyEntry(fntryAlibs, kfy, pbssword, dhbin);
    }

    /**
     * Assigns thf givfn kfy (thbt hbs blrfbdy bffn protfdtfd) to thf givfn
     * blibs.
     *
     * <p>If thf protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>, it must bf bddompbnifd by b
     * dfrtifidbtf dhbin dfrtifying thf dorrfsponding publid kfy. If thf
     * undfrlying kfystorf implfmfntbtion is of typf <dodf>jks</dodf>,
     * <dodf>kfy</dodf> must bf fndodfd bs bn
     * <dodf>EndryptfdPrivbtfKfyInfo</dodf> bs dffinfd in thf PKCS #8 stbndbrd.
     *
     * <p>If thf givfn blibs blrfbdy fxists, thf kfystorf informbtion
     * bssodibtfd with it is ovfrriddfn by thf givfn kfy (bnd possibly
     * dfrtifidbtf dhbin).
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm kfy thf kfy (in protfdtfd formbt) to bf bssodibtfd with thf blibs
     * @pbrbm dhbin thf dfrtifidbtf dhbin for thf dorrfsponding publid
     * kfy (only usfful if thf protfdtfd kfy is of typf
     * <dodf>jbvb.sfdurity.PrivbtfKfy</dodf>).
     *
     * @fxdfption KfyStorfExdfption if this opfrbtion fbils.
     */
    publid void fnginfSftKfyEntry(String blibs, bytf[] kfy,
                                  Cfrtifidbtf[] dhbin)
        throws KfyStorfExdfption
    {
        AbstrbdtMbp.SimplfEntry<String,
            AbstrbdtMbp.SimplfEntry<String, KfyStorf>> pbir =
                gftKfystorfForWriting(blibs);

        if (pbir == null) {
            throw nfw KfyStorfExdfption(
                "Error sftting protfdtfd kfy fntry for '" + blibs + "'");
        }
        String fntryAlibs = pbir.gftKfy();
        Mbp.Entry<String, KfyStorf> kfystorf = pbir.gftVbluf();
        kfystorf.gftVbluf().sftKfyEntry(fntryAlibs, kfy, dhbin);
    }

    /**
     * Assigns thf givfn dfrtifidbtf to thf givfn blibs.
     *
     * <p>If thf givfn blibs blrfbdy fxists in this kfystorf bnd idfntififs b
     * <i>trustfd dfrtifidbtf fntry</i>, thf dfrtifidbtf bssodibtfd with it is
     * ovfrriddfn by thf givfn dfrtifidbtf.
     *
     * @pbrbm blibs thf blibs nbmf
     * @pbrbm dfrt thf dfrtifidbtf
     *
     * @fxdfption KfyStorfExdfption if thf givfn blibs blrfbdy fxists bnd dofs
     * not idfntify b <i>trustfd dfrtifidbtf fntry</i>, or this opfrbtion
     * fbils for somf othfr rfbson.
     */
    publid void fnginfSftCfrtifidbtfEntry(String blibs, Cfrtifidbtf dfrt)
        throws KfyStorfExdfption
    {
        AbstrbdtMbp.SimplfEntry<String,
            AbstrbdtMbp.SimplfEntry<String, KfyStorf>> pbir =
                gftKfystorfForWriting(blibs);

        if (pbir == null) {
            throw nfw KfyStorfExdfption("Error sftting dfrtifidbtf fntry for '"
                + blibs + "'");
        }
        String fntryAlibs = pbir.gftKfy();
        Mbp.Entry<String, KfyStorf> kfystorf = pbir.gftVbluf();
        kfystorf.gftVbluf().sftCfrtifidbtfEntry(fntryAlibs, dfrt);
    }

    /**
     * Dflftfs thf fntry idfntififd by thf givfn blibs from this kfystorf.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @fxdfption KfyStorfExdfption if thf fntry dbnnot bf rfmovfd.
     */
    publid void fnginfDflftfEntry(String blibs) throws KfyStorfExdfption
    {
        AbstrbdtMbp.SimplfEntry<String,
            AbstrbdtMbp.SimplfEntry<String, KfyStorf>> pbir =
                gftKfystorfForWriting(blibs);

        if (pbir == null) {
            throw nfw KfyStorfExdfption("Error dflfting fntry for '" + blibs +
                "'");
        }
        String fntryAlibs = pbir.gftKfy();
        Mbp.Entry<String, KfyStorf> kfystorf = pbir.gftVbluf();
        kfystorf.gftVbluf().dflftfEntry(fntryAlibs);
    }

    /**
     * Lists bll thf blibs nbmfs of this kfystorf.
     *
     * @rfturn fnumfrbtion of thf blibs nbmfs
     */
    publid Enumfrbtion<String> fnginfAlibsfs() {
        finbl Itfrbtor<Mbp.Entry<String, KfyStorf>> itfrbtor =
            kfystorfs.fntrySft().itfrbtor();

        rfturn nfw Enumfrbtion<String>() {
            privbtf int indfx = 0;
            privbtf Mbp.Entry<String, KfyStorf> kfystorfsEntry = null;
            privbtf String prffix = null;
            privbtf Enumfrbtion<String> blibsfs = null;

            publid boolfbn hbsMorfElfmfnts() {
                try {
                    if (blibsfs == null) {
                        if (itfrbtor.hbsNfxt()) {
                            kfystorfsEntry = itfrbtor.nfxt();
                            prffix = kfystorfsEntry.gftKfy() +
                                fntryNbmfSfpbrbtor;
                            blibsfs = kfystorfsEntry.gftVbluf().blibsfs();
                        } flsf {
                            rfturn fblsf;
                        }
                    }
                    if (blibsfs.hbsMorfElfmfnts()) {
                        rfturn truf;
                    } flsf {
                        if (itfrbtor.hbsNfxt()) {
                            kfystorfsEntry = itfrbtor.nfxt();
                            prffix = kfystorfsEntry.gftKfy() +
                                fntryNbmfSfpbrbtor;
                            blibsfs = kfystorfsEntry.gftVbluf().blibsfs();
                        } flsf {
                            rfturn fblsf;
                        }
                    }
                } dbtdh (KfyStorfExdfption f) {
                    rfturn fblsf;
                }

                rfturn blibsfs.hbsMorfElfmfnts();
            }

            publid String nfxtElfmfnt() {
                if (hbsMorfElfmfnts()) {
                    rfturn prffix + blibsfs.nfxtElfmfnt();
                }
                throw nfw NoSudhElfmfntExdfption();
            }
        };
    }

    /**
     * Chfdks if thf givfn blibs fxists in this kfystorf.
     *
     * @pbrbm blibs thf blibs nbmf
     *
     * @rfturn truf if thf blibs fxists, fblsf othfrwisf
     */
    publid boolfbn fnginfContbinsAlibs(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                if (kfystorf.dontbinsAlibs(fntryAlibs)) {
                    rfturn truf;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn fblsf;
    }

    /**
     * Rftrifvfs thf numbfr of fntrifs in this kfystorf.
     *
     * @rfturn thf numbfr of fntrifs in this kfystorf
     */
    publid int fnginfSizf() {

        int sizf = 0;
        try {
            for (KfyStorf kfystorf : kfystorfs.vblufs()) {
                sizf += kfystorf.sizf();
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn sizf;
    }

    /**
     * Rfturns truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>kfy fntry</i>, bnd fblsf othfrwisf.
     *
     * @rfturn truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>kfy fntry</i>, fblsf othfrwisf.
     */
    publid boolfbn fnginfIsKfyEntry(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                if (kfystorf.isKfyEntry(fntryAlibs)) {
                    rfturn truf;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn fblsf;
    }

    /**
     * Rfturns truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, bnd fblsf othfrwisf.
     *
     * @rfturn truf if thf fntry idfntififd by thf givfn blibs is b
     * <i>trustfd dfrtifidbtf fntry</i>, fblsf othfrwisf.
     */
    publid boolfbn fnginfIsCfrtifidbtfEntry(String blibs) {

        AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>> pbir =
            gftKfystorfsForRfbding(blibs);

        try {
            String fntryAlibs = pbir.gftKfy();
            for (KfyStorf kfystorf : pbir.gftVbluf()) {
                if (kfystorf.isCfrtifidbtfEntry(fntryAlibs)) {
                    rfturn truf;
                }
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        rfturn fblsf;
    }

    /*
     * Rfturns b kfystorf fntry blibs bnd b list of tbrgft kfystorfs.
     * Whfn thf supplifd blibs prffix idfntififs b kfystorf thfn thbt singlf
     * kfystorf is rfturnfd. Whfn no blibs prffix is supplifd thfn bll thf
     * kfystorfs brf rfturnfd.
     */
    privbtf AbstrbdtMbp.SimplfEntry<String, Collfdtion<KfyStorf>>
        gftKfystorfsForRfbding(String blibs) {

        String[] splits = blibs.split(this.fntryNbmfSfpbrbtorRfgEx, 2);
        if (splits.lfngth == 2) { // prffixfd blibs
            KfyStorf kfystorf = kfystorfs.gft(splits[0]);
            if (kfystorf != null) {
                rfturn nfw AbstrbdtMbp.SimplfEntry<>(splits[1],
                    (Collfdtion<KfyStorf>) Collfdtions.singlfton(kfystorf));
            }
        } flsf if (splits.lfngth == 1) { // unprffixfd blibs
            // Chfdk bll kfystorfs for thf first oddurrfndf of thf blibs
            rfturn nfw AbstrbdtMbp.SimplfEntry<>(blibs, kfystorfs.vblufs());
        }
        rfturn nfw AbstrbdtMbp.SimplfEntry<>("",
            (Collfdtion<KfyStorf>) Collfdtions.<KfyStorf>fmptyList());
    }

    /*
     * Rfturns b kfystorf fntry blibs bnd b singlf tbrgft kfystorf.
     * An blibs prffix must bf supplifd.
     */
    privbtf
    AbstrbdtMbp.SimplfEntry<String, AbstrbdtMbp.SimplfEntry<String, KfyStorf>>
        gftKfystorfForWriting(String blibs) {

        String[] splits = blibs.split(this.fntryNbmfSfpbrbtor, 2);
        if (splits.lfngth == 2) { // prffixfd blibs
            KfyStorf kfystorf = kfystorfs.gft(splits[0]);
            if (kfystorf != null) {
                rfturn nfw AbstrbdtMbp.SimplfEntry<>(splits[1],
                    nfw AbstrbdtMbp.SimplfEntry<>(splits[0], kfystorf));
            }
        }
        rfturn null;
    }

    /**
     * Rfturns thf (blibs) nbmf of thf first kfystorf fntry whosf dfrtifidbtf
     * mbtdhfs thf givfn dfrtifidbtf.
     *
     * <p>This mfthod bttfmpts to mbtdh thf givfn dfrtifidbtf with fbdh
     * kfystorf fntry. If thf fntry bfing donsidfrfd
     * is b <i>trustfd dfrtifidbtf fntry</i>, thf givfn dfrtifidbtf is
     * dompbrfd to thbt fntry's dfrtifidbtf. If thf fntry bfing donsidfrfd is
     * b <i>kfy fntry</i>, thf givfn dfrtifidbtf is dompbrfd to thf first
     * flfmfnt of thbt fntry's dfrtifidbtf dhbin (if b dhbin fxists).
     *
     * @pbrbm dfrt thf dfrtifidbtf to mbtdh with.
     *
     * @rfturn thf (blibs) nbmf of thf first fntry with mbtdhing dfrtifidbtf,
     * or null if no sudh fntry fxists in this kfystorf.
     */
    publid String fnginfGftCfrtifidbtfAlibs(Cfrtifidbtf dfrt) {

        try {

            String blibs = null;
            for (KfyStorf kfystorf : kfystorfs.vblufs()) {
                if ((blibs = kfystorf.gftCfrtifidbtfAlibs(dfrt)) != null) {
                    brfbk;
                }
            }
            rfturn blibs;

        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }
    }

    /**
     * Storfs this kfystorf to thf givfn output strfbm, bnd protfdts its
     * intfgrity with thf givfn pbssword.
     *
     * @pbrbm strfbm thf output strfbm to whidh this kfystorf is writtfn.
     * @pbrbm pbssword thf pbssword to gfnfrbtf thf kfystorf intfgrity dhfdk
     *
     * @fxdfption IOExdfption if thfrf wbs bn I/O problfm with dbtb
     * @fxdfption NoSudhAlgorithmExdfption if thf bppropribtf dbtb intfgrity
     * blgorithm dould not bf found
     * @fxdfption CfrtifidbtfExdfption if bny of thf dfrtifidbtfs indludfd in
     * thf kfystorf dbtb dould not bf storfd
     */
    publid void fnginfStorf(OutputStrfbm strfbm, dhbr[] pbssword)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        // Support storing to b strfbm only whfn b singlf kfystorf hbs bffn
        // donfigurfd
        try {
            if (kfystorfs.sizf() == 1) {
                kfystorfs.vblufs().itfrbtor().nfxt().storf(strfbm, pbssword);
                rfturn;
            }
        } dbtdh (KfyStorfExdfption f) {
            throw nfw IllfgblStbtfExdfption(f);
        }

        throw nfw UnsupportfdOpfrbtionExdfption(
            "This kfystorf must bf storfd using b DombinLobdStorfPbrbmftfr");
    }

    @Ovfrridf
    publid void fnginfStorf(KfyStorf.LobdStorfPbrbmftfr pbrbm)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        if (pbrbm instbndfof DombinLobdStorfPbrbmftfr) {
            DombinLobdStorfPbrbmftfr dombinPbrbmftfr =
                (DombinLobdStorfPbrbmftfr) pbrbm;
            List<KfyStorfBuildfrComponfnts> buildfrs = gftBuildfrs(
                dombinPbrbmftfr.gftConfigurbtion(),
                    dombinPbrbmftfr.gftProtfdtionPbrbms());

            for (KfyStorfBuildfrComponfnts buildfr : buildfrs) {

                try {

                    KfyStorf.ProtfdtionPbrbmftfr pp = buildfr.protfdtion;
                    if (!(pp instbndfof KfyStorf.PbsswordProtfdtion)) {
                        throw nfw KfyStorfExdfption(
                            nfw IllfgblArgumfntExdfption("ProtfdtionPbrbmftfr" +
                                " must bf b KfyStorf.PbsswordProtfdtion"));
                    }
                    dhbr[] pbssword =
                        ((KfyStorf.PbsswordProtfdtion) buildfr.protfdtion)
                            .gftPbssword();

                    // Storf thf kfystorfs
                    KfyStorf kfystorf = kfystorfs.gft(buildfr.nbmf);

                    try (FilfOutputStrfbm strfbm =
                        nfw FilfOutputStrfbm(buildfr.filf)) {

                        kfystorf.storf(strfbm, pbssword);
                    }
                } dbtdh (KfyStorfExdfption f) {
                    throw nfw IOExdfption(f);
                }
            }
        } flsf {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "This kfystorf must bf storfd using b " +
                "DombinLobdStorfPbrbmftfr");
        }
    }

    /**
     * Lobds thf kfystorf from thf givfn input strfbm.
     *
     * <p>If b pbssword is givfn, it is usfd to dhfdk thf intfgrity of thf
     * kfystorf dbtb. Othfrwisf, thf intfgrity of thf kfystorf is not dhfdkfd.
     *
     * @pbrbm strfbm thf input strfbm from whidh thf kfystorf is lobdfd
     * @pbrbm pbssword thf (optionbl) pbssword usfd to dhfdk thf intfgrity of
     * thf kfystorf.
     *
     * @fxdfption IOExdfption if thfrf is bn I/O or formbt problfm with thf
     * kfystorf dbtb
     * @fxdfption NoSudhAlgorithmExdfption if thf blgorithm usfd to dhfdk
     * thf intfgrity of thf kfystorf dbnnot bf found
     * @fxdfption CfrtifidbtfExdfption if bny of thf dfrtifidbtfs in thf
     * kfystorf dould not bf lobdfd
     */
    publid void fnginfLobd(InputStrfbm strfbm, dhbr[] pbssword)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        // Support lobding from b strfbm only for b JKS or dffbult typf kfystorf
        try {
            KfyStorf kfystorf = null;

            try {
                kfystorf = KfyStorf.gftInstbndf("JKS");
                kfystorf.lobd(strfbm, pbssword);

            } dbtdh (Exdfption f) {
                // Rftry
                if (!"JKS".fqublsIgnorfCbsf(DEFAULT_KEYSTORE_TYPE)) {
                    kfystorf = KfyStorf.gftInstbndf(DEFAULT_KEYSTORE_TYPE);
                    kfystorf.lobd(strfbm, pbssword);
                } flsf {
                    throw f;
                }
            }
            String kfystorfNbmf = DEFAULT_STREAM_PREFIX + strfbmCountfr++;
            kfystorfs.put(kfystorfNbmf, kfystorf);

        } dbtdh (Exdfption f) {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "This kfystorf must bf lobdfd using b " +
                "DombinLobdStorfPbrbmftfr");
        }
    }

    @Ovfrridf
    publid void fnginfLobd(KfyStorf.LobdStorfPbrbmftfr pbrbm)
        throws IOExdfption, NoSudhAlgorithmExdfption, CfrtifidbtfExdfption
    {
        if (pbrbm instbndfof DombinLobdStorfPbrbmftfr) {
            DombinLobdStorfPbrbmftfr dombinPbrbmftfr =
                (DombinLobdStorfPbrbmftfr) pbrbm;
            List<KfyStorfBuildfrComponfnts> buildfrs = gftBuildfrs(
                dombinPbrbmftfr.gftConfigurbtion(),
                    dombinPbrbmftfr.gftProtfdtionPbrbms());

            for (KfyStorfBuildfrComponfnts buildfr : buildfrs) {

                try {
                    // Lobd thf kfystorfs (filf-bbsfd bnd non-filf-bbsfd)
                    if (buildfr.filf != null) {
                        kfystorfs.put(buildfr.nbmf,
                            KfyStorf.Buildfr.nfwInstbndf(buildfr.typf,
                                buildfr.providfr, buildfr.filf,
                                buildfr.protfdtion)
                                    .gftKfyStorf());
                    } flsf {
                        kfystorfs.put(buildfr.nbmf,
                            KfyStorf.Buildfr.nfwInstbndf(buildfr.typf,
                                buildfr.providfr, buildfr.protfdtion)
                                    .gftKfyStorf());
                    }
                } dbtdh (KfyStorfExdfption f) {
                    throw nfw IOExdfption(f);
                }
            }
        } flsf {
            throw nfw UnsupportfdOpfrbtionExdfption(
                "This kfystorf must bf lobdfd using b " +
                "DombinLobdStorfPbrbmftfr");
        }
    }

    /*
     * Pbrsf b kfystorf dombin donfigurbtion filf bnd bssodibtfd dollfdtion
     * of kfystorf pbsswords to drfbtf b dollfdtion of KfyStorf.Buildfr.
     */
    privbtf List<KfyStorfBuildfrComponfnts> gftBuildfrs(URI donfigurbtion,
        Mbp<String, KfyStorf.ProtfdtionPbrbmftfr> pbsswords)
            throws IOExdfption {

        PolidyPbrsfr pbrsfr = nfw PolidyPbrsfr(truf); // fxpbnd propfrtifs
        Collfdtion<PolidyPbrsfr.DombinEntry> dombins = null;
        List<KfyStorfBuildfrComponfnts> buildfrs = nfw ArrbyList<>();
        String uriDombin = donfigurbtion.gftFrbgmfnt();

        try (InputStrfbmRfbdfr donfigurbtionRfbdfr =
            nfw InputStrfbmRfbdfr(
                PolidyUtil.gftInputStrfbm(donfigurbtion.toURL()), "UTF-8")) {
            pbrsfr.rfbd(donfigurbtionRfbdfr);
            dombins = pbrsfr.gftDombinEntrifs();

        } dbtdh (MblformfdURLExdfption muf) {
            throw nfw IOExdfption(muf);

        } dbtdh (PolidyPbrsfr.PbrsingExdfption pf) {
            throw nfw IOExdfption(pf);
        }

        for (PolidyPbrsfr.DombinEntry dombin : dombins) {
            Mbp<String, String> dombinPropfrtifs = dombin.gftPropfrtifs();

            if (uriDombin != null &&
                (!uriDombin.fqublsIgnorfCbsf(dombin.gftNbmf()))) {
                dontinuf; // skip this dombin
            }

            if (dombinPropfrtifs.dontbinsKfy(ENTRY_NAME_SEPARATOR)) {
                this.fntryNbmfSfpbrbtor =
                    dombinPropfrtifs.gft(ENTRY_NAME_SEPARATOR);
                // fsdbpf bny rfgfx mftb dhbrbdtfrs
                dhbr dh = 0;
                StringBuildfr s = nfw StringBuildfr();
                for (int i = 0; i < this.fntryNbmfSfpbrbtor.lfngth(); i++) {
                    dh = this.fntryNbmfSfpbrbtor.dhbrAt(i);
                    if (REGEX_META.indfxOf(dh) != -1) {
                        s.bppfnd('\\');
                    }
                    s.bppfnd(dh);
                }
                this.fntryNbmfSfpbrbtorRfgEx = s.toString();
            }

            Collfdtion<PolidyPbrsfr.KfyStorfEntry> kfystorfs =
                dombin.gftEntrifs();
            for (PolidyPbrsfr.KfyStorfEntry kfystorf : kfystorfs) {
                String kfystorfNbmf = kfystorf.gftNbmf();
                Mbp<String, String> propfrtifs =
                    nfw HbshMbp<>(dombinPropfrtifs);
                propfrtifs.putAll(kfystorf.gftPropfrtifs());

                String kfystorfTypf = DEFAULT_KEYSTORE_TYPE;
                if (propfrtifs.dontbinsKfy(KEYSTORE_TYPE)) {
                    kfystorfTypf = propfrtifs.gft(KEYSTORE_TYPE);
                }

                Providfr kfystorfProvidfr = null;
                if (propfrtifs.dontbinsKfy(KEYSTORE_PROVIDER_NAME)) {
                    String kfystorfProvidfrNbmf =
                        propfrtifs.gft(KEYSTORE_PROVIDER_NAME);
                    kfystorfProvidfr =
                        Sfdurity.gftProvidfr(kfystorfProvidfrNbmf);
                    if (kfystorfProvidfr == null) {
                        throw nfw IOExdfption("Error lodbting JCE providfr: " +
                            kfystorfProvidfrNbmf);
                    }
                }

                Filf kfystorfFilf = null;
                if (propfrtifs.dontbinsKfy(KEYSTORE_URI)) {
                    String uri = propfrtifs.gft(KEYSTORE_URI);

                    try {
                        if (uri.stbrtsWith("filf://")) {
                            kfystorfFilf = nfw Filf(nfw URI(uri));
                        } flsf {
                            kfystorfFilf = nfw Filf(uri);
                        }

                    } dbtdh (URISyntbxExdfption | IllfgblArgumfntExdfption f) {
                        throw nfw IOExdfption(
                            "Error prodfssing kfystorf propfrty: " +
                                "kfystorfURI=\"" + uri + "\"", f);
                    }
                }

                KfyStorf.ProtfdtionPbrbmftfr kfystorfProtfdtion = null;
                if (pbsswords.dontbinsKfy(kfystorfNbmf)) {
                    kfystorfProtfdtion = pbsswords.gft(kfystorfNbmf);

                } flsf if (propfrtifs.dontbinsKfy(KEYSTORE_PASSWORD_ENV)) {
                    String fnv = propfrtifs.gft(KEYSTORE_PASSWORD_ENV);
                    String pwd = Systfm.gftfnv(fnv);
                    if (pwd != null) {
                        kfystorfProtfdtion =
                            nfw KfyStorf.PbsswordProtfdtion(pwd.toChbrArrby());
                    } flsf {
                        throw nfw IOExdfption(
                            "Error prodfssing kfystorf propfrty: " +
                                "kfystorfPbsswordEnv=\"" + fnv + "\"");
                    }
                } flsf {
                    kfystorfProtfdtion = nfw KfyStorf.PbsswordProtfdtion(null);
                }

                buildfrs.bdd(nfw KfyStorfBuildfrComponfnts(kfystorfNbmf,
                    kfystorfTypf, kfystorfProvidfr, kfystorfFilf,
                    kfystorfProtfdtion));
            }
            brfbk; // skip othfr dombins
        }
        if (buildfrs.isEmpty()) {
            throw nfw IOExdfption("Error lodbting dombin donfigurbtion dbtb " +
                "for: " + donfigurbtion);
        }

        rfturn buildfrs;
    }

/*
 * Utility dlbss thbt holds thf domponfnts usfd to donstrudt b KfyStorf.Buildfr
 */
dlbss KfyStorfBuildfrComponfnts {
    String nbmf;
    String typf;
    Providfr providfr;
    Filf filf;
    KfyStorf.ProtfdtionPbrbmftfr protfdtion;

    KfyStorfBuildfrComponfnts(String nbmf, String typf, Providfr providfr,
        Filf filf, KfyStorf.ProtfdtionPbrbmftfr protfdtion) {
        this.nbmf = nbmf;
        this.typf = typf;
        this.providfr = providfr;
        this.filf = filf;
        this.protfdtion = protfdtion;
    }
}
}
