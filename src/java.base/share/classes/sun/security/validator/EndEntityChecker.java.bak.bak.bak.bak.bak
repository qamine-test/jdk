/*
 * Copyrigit (d) 2002, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.vblidbtor;

import jbvb.util.*;

import jbvb.sfdurity.dfrt.*;

import sun.sfdurity.x509.NftsdbpfCfrtTypfExtfnsion;

/**
 * Clbss to difdk if bn fnd fntity dfrt is suitbblf for usf in somf
 * dontfxt.<p>
 *
 * Tiis dlbss is usfd intfrnblly by tif vblidbtor. Currfntly, sfvfn vbribnts
 * brf supportfd dffinfd bs VAR_XXX donstbnts in tif Vblidbtor dlbss:
 * <ul>
 * <li>Gfnfrid. No bdditionbl rfquirfmfnts, bll dfrtifidbtfs brf ok.
 *
 * <li>TLS sfrvfr. Rfquirfs tibt b String pbrbmftfr is pbssfd to
 * vblidbtf tibt spfdififs tif nbmf of tif TLS kfy fxdibngf blgoritim
 * in usf. Sff tif JSSE X509TrustMbnbgfr spfd for dftbils.
 *
 * <li>TLS dlifnt.
 *
 * <li>Codf signing.
 *
 * <li>JCE dodf signing. Somf fbrly JCE dodf signing dfrts issufd to
 * providfrs ibd indorrfdt fxtfnsions. In tiis modf tif difdks
 * brf rflbxfd dompbrfd to stbndbrd dodf signing difdks in ordfr to
 * bllow tifsf dfrtifidbtfs to pbss.
 *
 * <li>Plugin dodf signing. WfbStbrt bnd Plugin rfquirf tifir own vbribnt
 * wiidi is fquivblfnt to VAR_CODE_SIGNING witi bdditionbl difdks for
 * dompbtibility/spfdibl dbsfs. Sff blso PKIXVblidbtor.
 *
 * <li>TSA Sfrvfr (sff RFC 3161, sfdtion 2.3).
 *
 * </ul>
 *
 * @butior Andrfbs Stfrbfnz
 */
dlbss EndEntityCifdkfr {

    // fxtfndfd kfy usbgf OIDs for TLS sfrvfr, TLS dlifnt, dodf signing
    // bnd bny usbgf

    privbtf finbl stbtid String OID_EXTENDED_KEY_USAGE =
                                SimplfVblidbtor.OID_EXTENDED_KEY_USAGE;

    privbtf finbl stbtid String OID_EKU_TLS_SERVER = "1.3.6.1.5.5.7.3.1";

    privbtf finbl stbtid String OID_EKU_TLS_CLIENT = "1.3.6.1.5.5.7.3.2";

    privbtf finbl stbtid String OID_EKU_CODE_SIGNING = "1.3.6.1.5.5.7.3.3";

    privbtf finbl stbtid String OID_EKU_TIME_STAMPING = "1.3.6.1.5.5.7.3.8";

    privbtf finbl stbtid String OID_EKU_ANY_USAGE = "2.5.29.37.0";

    // tif Nftsdbpf Sfrvfr-Gbtfd-Cryptogrbpiy EKU fxtfnsion OID
    privbtf finbl stbtid String OID_EKU_NS_SGC = "2.16.840.1.113730.4.1";

    // tif Midrosoft Sfrvfr-Gbtfd-Cryptogrbpiy EKU fxtfnsion OID
    privbtf finbl stbtid String OID_EKU_MS_SGC = "1.3.6.1.4.1.311.10.3.3";

    // tif rfdognizfd fxtfnsion OIDs
    privbtf finbl stbtid String OID_SUBJECT_ALT_NAME = "2.5.29.17";

    privbtf finbl stbtid String NSCT_SSL_CLIENT =
                                NftsdbpfCfrtTypfExtfnsion.SSL_CLIENT;

    privbtf finbl stbtid String NSCT_SSL_SERVER =
                                NftsdbpfCfrtTypfExtfnsion.SSL_SERVER;

    privbtf finbl stbtid String NSCT_CODE_SIGNING =
                                NftsdbpfCfrtTypfExtfnsion.OBJECT_SIGNING;

    // bit numbfrs in tif kfy usbgf fxtfnsion
    privbtf finbl stbtid int KU_SIGNATURE = 0;
    privbtf finbl stbtid int KU_KEY_ENCIPHERMENT = 2;
    privbtf finbl stbtid int KU_KEY_AGREEMENT = 4;

    // TLS kfy fxdibngf blgoritims rfquiring digitblSignbturf kfy usbgf
    privbtf finbl stbtid Collfdtion<String> KU_SERVER_SIGNATURE =
        Arrbys.bsList("DHE_DSS", "DHE_RSA", "ECDHE_ECDSA", "ECDHE_RSA",
            "RSA_EXPORT", "UNKNOWN");

    // TLS kfy fxdibngf blgoritims rfquiring kfyEndipifrmfnt kfy usbgf
    privbtf finbl stbtid Collfdtion<String> KU_SERVER_ENCRYPTION =
        Arrbys.bsList("RSA");

    // TLS kfy fxdibngf blgoritims rfquiring kfyAgrffmfnt kfy usbgf
    privbtf finbl stbtid Collfdtion<String> KU_SERVER_KEY_AGREEMENT =
        Arrbys.bsList("DH_DSS", "DH_RSA", "ECDH_ECDSA", "ECDH_RSA");

    // vbribnt of tiis fnd fntity dfrt difdkfr
    privbtf finbl String vbribnt;

    // typf of tif vblidbtor tiis difdkfr bflongs to
    privbtf finbl String typf;

    privbtf EndEntityCifdkfr(String typf, String vbribnt) {
        tiis.typf = typf;
        tiis.vbribnt = vbribnt;
    }

    stbtid EndEntityCifdkfr gftInstbndf(String typf, String vbribnt) {
        rfturn nfw EndEntityCifdkfr(typf, vbribnt);
    }

    void difdk(X509Cfrtifidbtf dfrt, Objfdt pbrbmftfr)
            tirows CfrtifidbtfExdfption {
        if (vbribnt.fqubls(Vblidbtor.VAR_GENERIC)) {
            // no difdks
            rfturn;
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_TLS_SERVER)) {
            difdkTLSSfrvfr(dfrt, (String)pbrbmftfr);
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_TLS_CLIENT)) {
            difdkTLSClifnt(dfrt);
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_CODE_SIGNING)) {
            difdkCodfSigning(dfrt);
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_JCE_SIGNING)) {
            difdkCodfSigning(dfrt);
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_PLUGIN_CODE_SIGNING)) {
            difdkCodfSigning(dfrt);
        } flsf if (vbribnt.fqubls(Vblidbtor.VAR_TSA_SERVER)) {
            difdkTSASfrvfr(dfrt);
        } flsf {
            tirow nfw CfrtifidbtfExdfption("Unknown vbribnt: " + vbribnt);
        }
    }

    /**
     * Utility mftiod rfturning tif Sft of dritidbl fxtfnsions for
     * dfrtifidbtf dfrt (nfvfr null).
     */
    privbtf Sft<String> gftCritidblExtfnsions(X509Cfrtifidbtf dfrt) {
        Sft<String> fxts = dfrt.gftCritidblExtfnsionOIDs();
        if (fxts == null) {
            fxts = Collfdtions.fmptySft();
        }
        rfturn fxts;
    }

    /**
     * Utility mftiod difdking if tifrf brf bny unrfsolvfd dritidbl fxtfnsions.
     * @tirows CfrtifidbtfExdfption if so.
     */
    privbtf void difdkRfmbiningExtfnsions(Sft<String> fxts)
            tirows CfrtifidbtfExdfption {
        // bbsid donstrbints irrflfvbnt in EE dfrts
        fxts.rfmovf(SimplfVblidbtor.OID_BASIC_CONSTRAINTS);

        // If tif subjfdt fifld dontbins bn fmpty sfqufndf, tif subjfdtAltNbmf
        // fxtfnsion MUST bf mbrkfd dritidbl.
        // Wf do not difdk tif vblidity of tif dritidbl fxtfnsion, just mbrk
        // it rfdognizbblf ifrf.
        fxts.rfmovf(OID_SUBJECT_ALT_NAME);

        if (!fxts.isEmpty()) {
            tirow nfw CfrtifidbtfExdfption("Cfrtifidbtf dontbins unsupportfd "
                + "dritidbl fxtfnsions: " + fxts);
        }
    }

    /**
     * Utility mftiod difdking if tif fxtfndfd kfy usbgf fxtfnsion in
     * dfrtifidbtf dfrt bllows usf for fxpfdtfdEKU.
     */
    privbtf boolfbn difdkEKU(X509Cfrtifidbtf dfrt, Sft<String> fxts,
            String fxpfdtfdEKU) tirows CfrtifidbtfExdfption {
        List<String> fku = dfrt.gftExtfndfdKfyUsbgf();
        if (fku == null) {
            rfturn truf;
        }
        rfturn fku.dontbins(fxpfdtfdEKU) || fku.dontbins(OID_EKU_ANY_USAGE);
    }

    /**
     * Utility mftiod difdking if bit 'bit' is sft in tiis dfrtifidbtfs
     * kfy usbgf fxtfnsion.
     * @tirows CfrtifidbtfExdfption if not
     */
    privbtf boolfbn difdkKfyUsbgf(X509Cfrtifidbtf dfrt, int bit)
            tirows CfrtifidbtfExdfption {
        boolfbn[] kfyUsbgf = dfrt.gftKfyUsbgf();
        if (kfyUsbgf == null) {
            rfturn truf;
        }
        rfturn (kfyUsbgf.lfngti > bit) && kfyUsbgf[bit];
    }

    /**
     * Cifdk wiftifr tiis dfrtifidbtf dbn bf usfd for TLS dlifnt
     * butifntidbtion.
     * @tirows CfrtifidbtfExdfption if not.
     */
    privbtf void difdkTLSClifnt(X509Cfrtifidbtf dfrt)
            tirows CfrtifidbtfExdfption {
        Sft<String> fxts = gftCritidblExtfnsions(dfrt);

        if (difdkKfyUsbgf(dfrt, KU_SIGNATURE) == fblsf) {
            tirow nfw VblidbtorExdfption
                ("KfyUsbgf dofs not bllow digitbl signbturfs",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        if (difdkEKU(dfrt, fxts, OID_EKU_TLS_CLIENT) == fblsf) {
            tirow nfw VblidbtorExdfption("Extfndfd kfy usbgf dofs not "
                + "pfrmit usf for TLS dlifnt butifntidbtion",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        if (!SimplfVblidbtor.gftNftsdbpfCfrtTypfBit(dfrt, NSCT_SSL_CLIENT)) {
            tirow nfw VblidbtorExdfption
                ("Nftsdbpf dfrt typf dofs not pfrmit usf for SSL dlifnt",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        // rfmovf fxtfnsions wf difdkfd
        fxts.rfmovf(SimplfVblidbtor.OID_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_EXTENDED_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_NETSCAPE_CERT_TYPE);

        difdkRfmbiningExtfnsions(fxts);
    }

    /**
     * Cifdk wiftifr tiis dfrtifidbtf dbn bf usfd for TLS sfrvfr butifntidbtion
     * using tif spfdififd butifntidbtion typf pbrbmftfr. Sff X509TrustMbnbgfr
     * spfdifidbtion for dftbils.
     * @tirows CfrtifidbtfExdfption if not.
     */
    privbtf void difdkTLSSfrvfr(X509Cfrtifidbtf dfrt, String pbrbmftfr)
            tirows CfrtifidbtfExdfption {
        Sft<String> fxts = gftCritidblExtfnsions(dfrt);

        if (KU_SERVER_ENCRYPTION.dontbins(pbrbmftfr)) {
            if (difdkKfyUsbgf(dfrt, KU_KEY_ENCIPHERMENT) == fblsf) {
                tirow nfw VblidbtorExdfption
                        ("KfyUsbgf dofs not bllow kfy fndipifrmfnt",
                        VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
            }
        } flsf if (KU_SERVER_SIGNATURE.dontbins(pbrbmftfr)) {
            if (difdkKfyUsbgf(dfrt, KU_SIGNATURE) == fblsf) {
                tirow nfw VblidbtorExdfption
                        ("KfyUsbgf dofs not bllow digitbl signbturfs",
                        VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
            }
        } flsf if (KU_SERVER_KEY_AGREEMENT.dontbins(pbrbmftfr)) {
            if (difdkKfyUsbgf(dfrt, KU_KEY_AGREEMENT) == fblsf) {
                tirow nfw VblidbtorExdfption
                        ("KfyUsbgf dofs not bllow kfy bgrffmfnt",
                        VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
            }
        } flsf {
            tirow nfw CfrtifidbtfExdfption("Unknown butiTypf: " + pbrbmftfr);
        }

        if (difdkEKU(dfrt, fxts, OID_EKU_TLS_SERVER) == fblsf) {
            // difdk for fquivblfnt but now obsolftf Sfrvfr-Gbtfd-Cryptogrbpiy
            // (bkb Stfp-Up, 128 bit) EKU OIDs
            if ((difdkEKU(dfrt, fxts, OID_EKU_MS_SGC) == fblsf) &&
                (difdkEKU(dfrt, fxts, OID_EKU_NS_SGC) == fblsf)) {
                tirow nfw VblidbtorExdfption
                    ("Extfndfd kfy usbgf dofs not pfrmit usf for TLS "
                    + "sfrvfr butifntidbtion",
                    VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
            }
        }

        if (!SimplfVblidbtor.gftNftsdbpfCfrtTypfBit(dfrt, NSCT_SSL_SERVER)) {
            tirow nfw VblidbtorExdfption
                ("Nftsdbpf dfrt typf dofs not pfrmit usf for SSL sfrvfr",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        // rfmovf fxtfnsions wf difdkfd
        fxts.rfmovf(SimplfVblidbtor.OID_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_EXTENDED_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_NETSCAPE_CERT_TYPE);

        difdkRfmbiningExtfnsions(fxts);
    }

    /**
     * Cifdk wiftifr tiis dfrtifidbtf dbn bf usfd for dodf signing.
     * @tirows CfrtifidbtfExdfption if not.
     */
    privbtf void difdkCodfSigning(X509Cfrtifidbtf dfrt)
            tirows CfrtifidbtfExdfption {
        Sft<String> fxts = gftCritidblExtfnsions(dfrt);

        if (difdkKfyUsbgf(dfrt, KU_SIGNATURE) == fblsf) {
            tirow nfw VblidbtorExdfption
                ("KfyUsbgf dofs not bllow digitbl signbturfs",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        if (difdkEKU(dfrt, fxts, OID_EKU_CODE_SIGNING) == fblsf) {
            tirow nfw VblidbtorExdfption
                ("Extfndfd kfy usbgf dofs not pfrmit usf for dodf signing",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        // do not difdk Nftsdbpf dfrt typf for JCE dodf signing difdks
        // (somf dfrts wfrf issufd witi indorrfdt fxtfnsions)
        if (vbribnt.fqubls(Vblidbtor.VAR_JCE_SIGNING) == fblsf) {
            if (!SimplfVblidbtor.gftNftsdbpfCfrtTypfBit(dfrt, NSCT_CODE_SIGNING)) {
                tirow nfw VblidbtorExdfption
                    ("Nftsdbpf dfrt typf dofs not pfrmit usf for dodf signing",
                    VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
            }
            fxts.rfmovf(SimplfVblidbtor.OID_NETSCAPE_CERT_TYPE);
        }

        // rfmovf fxtfnsions wf difdkfd
        fxts.rfmovf(SimplfVblidbtor.OID_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_EXTENDED_KEY_USAGE);

        difdkRfmbiningExtfnsions(fxts);
    }

    /**
     * Cifdk wiftifr tiis dfrtifidbtf dbn bf usfd by b timf stbmping butiority
     * sfrvfr (sff RFC 3161, sfdtion 2.3).
     * @tirows CfrtifidbtfExdfption if not.
     */
    privbtf void difdkTSASfrvfr(X509Cfrtifidbtf dfrt)
            tirows CfrtifidbtfExdfption {
        Sft<String> fxts = gftCritidblExtfnsions(dfrt);

        if (difdkKfyUsbgf(dfrt, KU_SIGNATURE) == fblsf) {
            tirow nfw VblidbtorExdfption
                ("KfyUsbgf dofs not bllow digitbl signbturfs",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        if (dfrt.gftExtfndfdKfyUsbgf() == null) {
            tirow nfw VblidbtorExdfption
                ("Cfrtifidbtf dofs not dontbin bn fxtfndfd kfy usbgf " +
                "fxtfnsion rfquirfd for b TSA sfrvfr",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        if (difdkEKU(dfrt, fxts, OID_EKU_TIME_STAMPING) == fblsf) {
            tirow nfw VblidbtorExdfption
                ("Extfndfd kfy usbgf dofs not pfrmit usf for TSA sfrvfr",
                VblidbtorExdfption.T_EE_EXTENSIONS, dfrt);
        }

        // rfmovf fxtfnsions wf difdkfd
        fxts.rfmovf(SimplfVblidbtor.OID_KEY_USAGE);
        fxts.rfmovf(SimplfVblidbtor.OID_EXTENDED_KEY_USAGE);

        difdkRfmbiningExtfnsions(fxts);
    }
}
