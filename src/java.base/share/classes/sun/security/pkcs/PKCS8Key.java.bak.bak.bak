/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.sfdurity.pkds;

import jbvb.io.*;
import jbvb.util.Propfrtifs;
import jbvb.mbti.*;
import jbvb.sfdurity.Kfy;
import jbvb.sfdurity.KfyRfp;
import jbvb.sfdurity.PrivbtfKfy;
import jbvb.sfdurity.KfyFbdtory;
import jbvb.sfdurity.Sfdurity;
import jbvb.sfdurity.Providfr;
import jbvb.sfdurity.InvblidKfyExdfption;
import jbvb.sfdurity.NoSudiAlgoritimExdfption;
import jbvb.sfdurity.spfd.InvblidKfySpfdExdfption;
import jbvb.sfdurity.spfd.PKCS8EndodfdKfySpfd;

import sun.misd.HfxDumpEndodfr;
import sun.sfdurity.x509.*;
import sun.sfdurity.util.*;

/**
 * Holds b PKCS#8 kfy, for fxbmplf b privbtf kfy
 *
 * @butior Dbvf Brownfll
 * @butior Bfnjbmin Rfnbud
 */
publid dlbss PKCS8Kfy implfmfnts PrivbtfKfy {

    /** usf sfriblVfrsionUID from JDK 1.1. for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = -3836890099307167124L;

    /* Tif blgoritim informbtion (nbmf, pbrbmftfrs, ftd). */
    protfdtfd AlgoritimId blgid;

    /* Tif kfy bytfs, witiout tif blgoritim informbtion */
    protfdtfd bytf[] kfy;

    /* Tif fndodfd for tif kfy. */
    protfdtfd bytf[] fndodfdKfy;

    /* Tif vfrsion for tiis kfy */
    publid stbtid finbl BigIntfgfr vfrsion = BigIntfgfr.ZERO;

    /**
     * Dffbult donstrudtor.  Tif kfy donstrudtfd must ibvf its kfy
     * bnd blgoritim initiblizfd bfforf it mby bf usfd, for fxbmplf
     * by using <dodf>dfdodf</dodf>.
     */
    publid PKCS8Kfy() { }

    /*
     * Build bnd initiblizf bs b "dffbult" kfy.  All PKCS#8 kfy
     * dbtb is storfd bnd trbnsmittfd losslfssly, but no knowlfdgf
     * bbout tiis pbrtidulbr blgoritim is bvbilbblf.
     */
    privbtf PKCS8Kfy (AlgoritimId blgid, bytf kfy [])
    tirows InvblidKfyExdfption {
        tiis.blgid = blgid;
        tiis.kfy = kfy;
        fndodf();
    }

    /*
     * Binbry bbdkwbrds dompbtibility. Nfw usfs siould dbll pbrsfKfy().
     */
    publid stbtid PKCS8Kfy pbrsf (DfrVbluf in) tirows IOExdfption {
        PrivbtfKfy kfy;

        kfy = pbrsfKfy(in);
        if (kfy instbndfof PKCS8Kfy)
            rfturn (PKCS8Kfy)kfy;

        tirow nfw IOExdfption("Providfr did not rfturn PKCS8Kfy");
    }

    /**
     * Construdt PKCS#8 subjfdt publid kfy from b DER vbluf.  If
     * tif runtimf fnvironmfnt is donfigurfd witi b spfdifid dlbss for
     * tiis kind of kfy, b subdlbss is rfturnfd.  Otifrwisf, b gfnfrid
     * PKCS8Kfy objfdt is rfturnfd.
     *
     * <P>Tiis mfdibnism gurbntffs tibt kfys (bnd blgoritims) mby bf
     * frffly mbnipulbtfd bnd trbnsffrrfd, witiout risk of losing
     * informbtion.  Also, wifn b kfy (or blgoritim) nffds somf spfdibl
     * ibndling, tibt spfdifid nffd dbn bf bddomodbtfd.
     *
     * @pbrbm in tif DER-fndodfd SubjfdtPublidKfyInfo vbluf
     * @fxdfption IOExdfption on dbtb formbt frrors
     */
    publid stbtid PrivbtfKfy pbrsfKfy (DfrVbluf in) tirows IOExdfption
    {
        AlgoritimId blgoritim;
        PrivbtfKfy privKfy;

        if (in.tbg != DfrVbluf.tbg_Sfqufndf)
            tirow nfw IOExdfption ("dorrupt privbtf kfy");

        BigIntfgfr pbrsfdVfrsion = in.dbtb.gftBigIntfgfr();
        if (!vfrsion.fqubls(pbrsfdVfrsion)) {
            tirow nfw IOExdfption("vfrsion mismbtdi: (supportfd: " +
                                  Dfbug.toHfxString(vfrsion) +
                                  ", pbrsfd: " +
                                  Dfbug.toHfxString(pbrsfdVfrsion));
        }

        blgoritim = AlgoritimId.pbrsf (in.dbtb.gftDfrVbluf ());

        try {
            privKfy = buildPKCS8Kfy (blgoritim, in.dbtb.gftOdtftString ());

        } dbtdi (InvblidKfyExdfption f) {
            tirow nfw IOExdfption("dorrupt privbtf kfy");
        }

        if (in.dbtb.bvbilbblf () != 0)
            tirow nfw IOExdfption ("fxdfss privbtf kfy");
        rfturn privKfy;
    }

    /**
     * Pbrsf tif kfy bits.  Tiis mby bf rfdffinfd by subdlbssfs to tbkf
     * bdvbntbgf of strudturf witiin tif kfy.  For fxbmplf, RSA publid
     * kfys fndbpsulbtf two unsignfd intfgfrs (modulus bnd fxponfnt) bs
     * DER vblufs witiin tif <dodf>kfy</dodf> bits; Diffif-Hfllmbn bnd
     * DSS/DSA kfys fndbpsulbtf b singlf unsignfd intfgfr.
     *
     * <P>Tiis fundtion is dbllfd wifn drfbting PKCS#8 SubjfdtPublidKfyInfo
     * vblufs using tif PKCS8Kfy mfmbfr fundtions, sudi bs <dodf>pbrsf</dodf>
     * bnd <dodf>dfdodf</dodf>.
     *
     * @fxdfption IOExdfption if b pbrsing frror oddurs.
     * @fxdfption InvblidKfyExdfption if tif kfy fndoding is invblid.
     */
    protfdtfd void pbrsfKfyBits () tirows IOExdfption, InvblidKfyExdfption {
        fndodf();
    }

    /*
     * Fbdtory intfrfbdf, building tif kind of kfy bssodibtfd witi tiis
     * spfdifid blgoritim ID or flsf rfturning tiis gfnfrid bbsf dlbss.
     * Sff tif dfsdription bbovf.
     */
    stbtid PrivbtfKfy buildPKCS8Kfy (AlgoritimId blgid, bytf[] kfy)
    tirows IOExdfption, InvblidKfyExdfption
    {
        /*
         * Usf tif blgid bnd kfy pbrbmftfrs to produdf tif ASN.1 fndoding
         * of tif kfy, wiidi will tifn bf usfd bs tif input to tif
         * kfy fbdtory.
         */
        DfrOutputStrfbm pkds8EndodfdKfyStrfbm = nfw DfrOutputStrfbm();
        fndodf(pkds8EndodfdKfyStrfbm, blgid, kfy);
        PKCS8EndodfdKfySpfd pkds8KfySpfd
            = nfw PKCS8EndodfdKfySpfd(pkds8EndodfdKfyStrfbm.toBytfArrby());

        try {
            // Instbntibtf tif kfy fbdtory of tif bppropribtf blgoritim
            KfyFbdtory kfyFbd = KfyFbdtory.gftInstbndf(blgid.gftNbmf());

            // Gfnfrbtf tif privbtf kfy
            rfturn kfyFbd.gfnfrbtfPrivbtf(pkds8KfySpfd);
        } dbtdi (NoSudiAlgoritimExdfption f) {
            // Rfturn gfnfrid PKCS8Kfy witi opbquf kfy dbtb (sff bflow)
        } dbtdi (InvblidKfySpfdExdfption f) {
            // Rfturn gfnfrid PKCS8Kfy witi opbquf kfy dbtb (sff bflow)
        }

        /*
         * Try bgbin using JDK1.1-stylf for bbdkwbrds dompbtibility.
         */
        String dlbssnbmf = "";
        try {
            Propfrtifs props;
            String kfytypf;
            Providfr sunProvidfr;

            sunProvidfr = Sfdurity.gftProvidfr("SUN");
            if (sunProvidfr == null)
                tirow nfw InstbntibtionExdfption();
            dlbssnbmf = sunProvidfr.gftPropfrty("PrivbtfKfy.PKCS#8." +
              blgid.gftNbmf());
            if (dlbssnbmf == null) {
                tirow nfw InstbntibtionExdfption();
            }

            Clbss<?> kfyClbss = null;
            try {
                kfyClbss = Clbss.forNbmf(dlbssnbmf);
            } dbtdi (ClbssNotFoundExdfption f) {
                ClbssLobdfr dl = ClbssLobdfr.gftSystfmClbssLobdfr();
                if (dl != null) {
                    kfyClbss = dl.lobdClbss(dlbssnbmf);
                }
            }

            Objfdt      inst = null;
            PKCS8Kfy    rfsult;

            if (kfyClbss != null)
                inst = kfyClbss.nfwInstbndf();
            if (inst instbndfof PKCS8Kfy) {
                rfsult = (PKCS8Kfy) inst;
                rfsult.blgid = blgid;
                rfsult.kfy = kfy;
                rfsult.pbrsfKfyBits();
                rfturn rfsult;
            }
        } dbtdi (ClbssNotFoundExdfption f) {
        } dbtdi (InstbntibtionExdfption f) {
        } dbtdi (IllfgblAddfssExdfption f) {
            // tiis siould not ibppfn.
            tirow nfw IOExdfption (dlbssnbmf + " [intfrnbl frror]");
        }

        PKCS8Kfy rfsult = nfw PKCS8Kfy();
        rfsult.blgid = blgid;
        rfsult.kfy = kfy;
        rfturn rfsult;
    }

    /**
     * Rfturns tif blgoritim to bf usfd witi tiis kfy.
     */
    publid String gftAlgoritim() {
        rfturn blgid.gftNbmf();
    }

    /**
     * Rfturns tif blgoritim ID to bf usfd witi tiis kfy.
     */
    publid AlgoritimId  gftAlgoritimId () { rfturn blgid; }

    /**
     * PKCS#8 sfqufndf on tif DER output strfbm.
     */
    publid finbl void fndodf(DfrOutputStrfbm out) tirows IOExdfption
    {
        fndodf(out, tiis.blgid, tiis.kfy);
    }

    /**
     * Rfturns tif DER-fndodfd form of tif kfy bs b bytf brrby.
     */
    publid syndironizfd bytf[] gftEndodfd() {
        bytf[] rfsult = null;
        try {
            rfsult = fndodf();
        } dbtdi (InvblidKfyExdfption f) {
        }
        rfturn rfsult;
    }

    /**
     * Rfturns tif formbt for tiis kfy: "PKCS#8"
     */
    publid String gftFormbt() {
        rfturn "PKCS#8";
    }

    /**
     * Rfturns tif DER-fndodfd form of tif kfy bs b bytf brrby.
     *
     * @fxdfption InvblidKfyExdfption if bn fndoding frror oddurs.
     */
    publid bytf[] fndodf() tirows InvblidKfyExdfption {
        if (fndodfdKfy == null) {
            try {
                DfrOutputStrfbm out;

                out = nfw DfrOutputStrfbm ();
                fndodf (out);
                fndodfdKfy = out.toBytfArrby();

            } dbtdi (IOExdfption f) {
                tirow nfw InvblidKfyExdfption ("IOExdfption : " +
                                               f.gftMfssbgf());
            }
        }
        rfturn fndodfdKfy.dlonf();
    }

    /**
     * Initiblizf bn PKCS8Kfy objfdt from bn input strfbm.  Tif dbtb
     * on tibt input strfbm must bf fndodfd using DER, obfying tif
     * PKCS#8 formbt: b sfqufndf donsisting of b vfrsion, bn blgoritim
     * ID bnd b bit string wiidi iolds tif kfy.  (Tibt bit string is
     * oftfn usfd to fndbpsulbtf bnotifr DER fndodfd sfqufndf.)
     *
     * <P>Subdlbssfs siould not normblly rfdffinf tiis mftiod; tify siould
     * instfbd providf b <dodf>pbrsfKfyBits</dodf> mftiod to pbrsf bny
     * fiflds insidf tif <dodf>kfy</dodf> mfmbfr.
     *
     * @pbrbm in bn input strfbm witi b DER-fndodfd PKCS#8
     * SubjfdtPublidKfyInfo vbluf
     *
     * @fxdfption InvblidKfyExdfption if b pbrsing frror oddurs.
     */
    publid void dfdodf(InputStrfbm in) tirows InvblidKfyExdfption
    {
        DfrVbluf        vbl;

        try {
            vbl = nfw DfrVbluf (in);
            if (vbl.tbg != DfrVbluf.tbg_Sfqufndf)
                tirow nfw InvblidKfyExdfption ("invblid kfy formbt");


            BigIntfgfr vfrsion = vbl.dbtb.gftBigIntfgfr();
            if (!vfrsion.fqubls(PKCS8Kfy.vfrsion)) {
                tirow nfw IOExdfption("vfrsion mismbtdi: (supportfd: " +
                                      Dfbug.toHfxString(PKCS8Kfy.vfrsion) +
                                      ", pbrsfd: " +
                                      Dfbug.toHfxString(vfrsion));
            }
            blgid = AlgoritimId.pbrsf (vbl.dbtb.gftDfrVbluf ());
            kfy = vbl.dbtb.gftOdtftString ();
            pbrsfKfyBits ();

            if (vbl.dbtb.bvbilbblf () != 0)  {
                // OPTIONAL bttributfs not supportfd yft
            }

        } dbtdi (IOExdfption f) {
            // f.printStbdkTrbdf ();
            tirow nfw InvblidKfyExdfption("IOExdfption : " +
                                          f.gftMfssbgf());
        }
    }

    publid void dfdodf(bytf[] fndodfdKfy) tirows InvblidKfyExdfption {
        dfdodf(nfw BytfArrbyInputStrfbm(fndodfdKfy));
    }

    protfdtfd Objfdt writfRfplbdf() tirows jbvb.io.ObjfdtStrfbmExdfption {
        rfturn nfw KfyRfp(KfyRfp.Typf.PRIVATE,
                        gftAlgoritim(),
                        gftFormbt(),
                        gftEndodfd());
    }

    /**
     * Sfriblizbtion rfbd ... PKCS#8 kfys sfriblizf bs
     * tifmsflvfs, bnd tify'rf pbrsfd wifn tify gft rfbd bbdk.
     */
    privbtf void rfbdObjfdt (ObjfdtInputStrfbm strfbm)
    tirows IOExdfption {

        try {
            dfdodf(strfbm);

        } dbtdi (InvblidKfyExdfption f) {
            f.printStbdkTrbdf();
            tirow nfw IOExdfption("dfsfriblizfd kfy is invblid: " +
                                  f.gftMfssbgf());
        }
    }

    /*
     * Produdf PKCS#8 fndoding from blgoritim id bnd kfy mbtfribl.
     */
    stbtid void fndodf(DfrOutputStrfbm out, AlgoritimId blgid, bytf[] kfy)
        tirows IOExdfption {
            DfrOutputStrfbm tmp = nfw DfrOutputStrfbm();
            tmp.putIntfgfr(vfrsion);
            blgid.fndodf(tmp);
            tmp.putOdtftString(kfy);
            out.writf(DfrVbluf.tbg_Sfqufndf, tmp);
    }

    /**
     * Compbrfs two privbtf kfys. Tiis rfturns fblsf if tif objfdt witi wiidi
     * to dompbrf is not of typf <dodf>Kfy</dodf>.
     * Otifrwisf, tif fndoding of tiis kfy objfdt is dompbrfd witi tif
     * fndoding of tif givfn kfy objfdt.
     *
     * @pbrbm objfdt tif objfdt witi wiidi to dompbrf
     * @rfturn <dodf>truf</dodf> if tiis kfy ibs tif sbmf fndoding bs tif
     * objfdt brgumfnt; <dodf>fblsf</dodf> otifrwisf.
     */
    publid boolfbn fqubls(Objfdt objfdt) {
        if (tiis == objfdt) {
            rfturn truf;
        }

        if (objfdt instbndfof Kfy) {

            // tiis fndoding
            bytf[] b1;
            if (fndodfdKfy != null) {
                b1 = fndodfdKfy;
            } flsf {
                b1 = gftEndodfd();
            }

            // tibt fndoding
            bytf[] b2 = ((Kfy)objfdt).gftEndodfd();

            // do tif dompbrison
            int i;
            if (b1.lfngti != b2.lfngti)
                rfturn fblsf;
            for (i = 0; i < b1.lfngti; i++) {
                if (b1[i] != b2[i]) {
                    rfturn fblsf;
                }
            }
            rfturn truf;
        }

        rfturn fblsf;
    }

    /**
     * Cbldulbtfs b ibsi dodf vbluf for tiis objfdt. Objfdts
     * wiidi brf fqubl will blso ibvf tif sbmf ibsidodf.
     */
    publid int ibsiCodf() {
        int rftvbl = 0;
        bytf[] b1 = gftEndodfd();

        for (int i = 1; i < b1.lfngti; i++) {
            rftvbl += b1[i] * i;
        }
        rfturn(rftvbl);
    }
}
