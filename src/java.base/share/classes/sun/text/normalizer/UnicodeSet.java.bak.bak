/*
 * Copyrigit (d) 2005, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
/*
 *******************************************************************************
 * (C) Copyrigit IBM Corp. bnd otifrs, 1996-2009 - All Rigits Rfsfrvfd         *
 *                                                                             *
 * Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is dopyrigitfd   *
 * bnd ownfd by IBM, Tifsf mbtfribls brf providfd undfr tfrms of b Lidfnsf     *
 * Agrffmfnt bftwffn IBM bnd Sun. Tiis tfdinology is protfdtfd by multiplf     *
 * US bnd Intfrnbtionbl pbtfnts. Tiis notidf bnd bttribution to IBM mby not    *
 * to rfmovfd.                                                                 *
 *******************************************************************************
 */

pbdkbgf sun.tfxt.normblizfr;

import jbvb.tfxt.PbrsfPosition;
import jbvb.util.Itfrbtor;
import jbvb.util.TrffSft;

/**
 * A mutbblf sft of Unidodf dibrbdtfrs bnd multidibrbdtfr strings.  Objfdts of tiis dlbss
 * rfprfsfnt <fm>dibrbdtfr dlbssfs</fm> usfd in rfgulbr fxprfssions.
 * A dibrbdtfr spfdififs b subsft of Unidodf dodf points.  Lfgbl
 * dodf points brf U+0000 to U+10FFFF, indlusivf.
 *
 * <p>Tif UnidodfSft dlbss is not dfsignfd to bf subdlbssfd.
 *
 * <p><dodf>UnidodfSft</dodf> supports two APIs. Tif first is tif
 * <fm>opfrbnd</fm> API tibt bllows tif dbllfr to modify tif vbluf of
 * b <dodf>UnidodfSft</dodf> objfdt. It donforms to Jbvb 2's
 * <dodf>jbvb.util.Sft</dodf> intfrfbdf, bltiougi
 * <dodf>UnidodfSft</dodf> dofs not bdtublly implfmfnt tibt
 * intfrfbdf. All mftiods of <dodf>Sft</dodf> brf supportfd, witi tif
 * modifidbtion tibt tify tbkf b dibrbdtfr rbngf or singlf dibrbdtfr
 * instfbd of bn <dodf>Objfdt</dodf>, bnd tify tbkf b
 * <dodf>UnidodfSft</dodf> instfbd of b <dodf>Collfdtion</dodf>.  Tif
 * opfrbnd API mby bf tiougit of in tfrms of boolfbn logid: b boolfbn
 * OR is implfmfntfd by <dodf>bdd</dodf>, b boolfbn AND is implfmfntfd
 * by <dodf>rftbin</dodf>, b boolfbn XOR is implfmfntfd by
 * <dodf>domplfmfnt</dodf> tbking bn brgumfnt, bnd b boolfbn NOT is
 * implfmfntfd by <dodf>domplfmfnt</dodf> witi no brgumfnt.  In tfrms
 * of trbditionbl sft tifory fundtion nbmfs, <dodf>bdd</dodf> is b
 * union, <dodf>rftbin</dodf> is bn intfrsfdtion, <dodf>rfmovf</dodf>
 * is bn bsymmftrid difffrfndf, bnd <dodf>domplfmfnt</dodf> witi no
 * brgumfnt is b sft domplfmfnt witi rfspfdt to tif supfrsft rbngf
 * <dodf>MIN_VALUE-MAX_VALUE</dodf>
 *
 * <p>Tif sfdond API is tif
 * <dodf>bpplyPbttfrn()</dodf>/<dodf>toPbttfrn()</dodf> API from tif
 * <dodf>jbvb.tfxt.Formbt</dodf>-dfrivfd dlbssfs.  Unlikf tif
 * mftiods tibt bdd dibrbdtfrs, bdd dbtfgorifs, bnd dontrol tif logid
 * of tif sft, tif mftiod <dodf>bpplyPbttfrn()</dodf> sfts bll
 * bttributfs of b <dodf>UnidodfSft</dodf> bt ondf, bbsfd on b
 * string pbttfrn.
 *
 * <p><b>Pbttfrn syntbx</b></p>
 *
 * Pbttfrns brf bddfptfd by tif donstrudtors bnd tif
 * <dodf>bpplyPbttfrn()</dodf> mftiods bnd rfturnfd by tif
 * <dodf>toPbttfrn()</dodf> mftiod.  Tifsf pbttfrns follow b syntbx
 * similbr to tibt fmployfd by vfrsion 8 rfgulbr fxprfssion dibrbdtfr
 * dlbssfs.  Hfrf brf somf simplf fxbmplfs:
 *
 * <blodkquotf>
 *   <tbblf>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[]</dodf></td>
 *       <td vblign="top">No dibrbdtfrs</td>
 *     </tr><tr blign="top">
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[b]</dodf></td>
 *       <td vblign="top">Tif dibrbdtfr 'b'</td>
 *     </tr><tr blign="top">
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[bf]</dodf></td>
 *       <td vblign="top">Tif dibrbdtfrs 'b' bnd 'f'</td>
 *     </tr>
 *     <tr>
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[b-f]</dodf></td>
 *       <td vblign="top">Tif dibrbdtfrs 'b' tirougi 'f' indlusivf, in Unidodf dodf
 *       point ordfr</td>
 *     </tr>
 *     <tr>
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[\\u4E01]</dodf></td>
 *       <td vblign="top">Tif dibrbdtfr U+4E01</td>
 *     </tr>
 *     <tr>
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[b{bb}{bd}]</dodf></td>
 *       <td vblign="top">Tif dibrbdtfr 'b' bnd tif multidibrbdtfr strings &quot;bb&quot; bnd
 *       &quot;bd&quot;</td>
 *     </tr>
 *     <tr>
 *       <td nowrbp vblign="top" blign="lfft"><dodf>[\p{Lu}]</dodf></td>
 *       <td vblign="top">All dibrbdtfrs in tif gfnfrbl dbtfgory Uppfrdbsf Lfttfr</td>
 *     </tr>
 *   </tbblf>
 * </blodkquotf>
 *
 * Any dibrbdtfr mby bf prfdfdfd by b bbdkslbsi in ordfr to rfmovf bny spfdibl
 * mfbning.  Wiitf spbdf dibrbdtfrs, bs dffinfd by UCibrbdtfrPropfrty.isRulfWiitfSpbdf(), brf
 * ignorfd, unlfss tify brf fsdbpfd.
 *
 * <p>Propfrty pbttfrns spfdify b sft of dibrbdtfrs ibving b dfrtbin
 * propfrty bs dffinfd by tif Unidodf stbndbrd.  Boti tif POSIX-likf
 * "[:Lu:]" bnd tif Pfrl-likf syntbx "\p{Lu}" brf rfdognizfd.  For b
 * domplftf list of supportfd propfrty pbttfrns, sff tif Usfr's Guidf
 * for UnidodfSft bt
 * <b irff="ittp://www.idu-projfdt.org/usfrguidf/unidodfSft.itml">
 * ittp://www.idu-projfdt.org/usfrguidf/unidodfSft.itml</b>.
 * Adtubl dftfrminbtion of propfrty dbtb is dffinfd by tif undfrlying
 * Unidodf dbtbbbsf bs implfmfntfd by UCibrbdtfr.
 *
 * <p>Pbttfrns spfdify individubl dibrbdtfrs, rbngfs of dibrbdtfrs, bnd
 * Unidodf propfrty sfts.  Wifn flfmfnts brf dondbtfnbtfd, tify
 * spfdify tifir union.  To domplfmfnt b sft, plbdf b '^' immfdibtfly
 * bftfr tif opfning '['.  Propfrty pbttfrns brf invfrtfd by modifying
 * tifir dflimitfrs; "[:^foo]" bnd "\P{foo}".  In bny otifr lodbtion,
 * '^' ibs no spfdibl mfbning.
 *
 * <p>Rbngfs brf indidbtfd by plbding two b '-' bftwffn two
 * dibrbdtfrs, bs in "b-z".  Tiis spfdififs tif rbngf of bll
 * dibrbdtfrs from tif lfft to tif rigit, in Unidodf ordfr.  If tif
 * lfft dibrbdtfr is grfbtfr tibn or fqubl to tif
 * rigit dibrbdtfr it is b syntbx frror.  If b '-' oddurs bs tif first
 * dibrbdtfr bftfr tif opfning '[' or '[^', or if it oddurs bs tif
 * lbst dibrbdtfr bfforf tif dlosing ']', tifn it is tbkfn bs b
 * litfrbl.  Tius "[b\\-b]", "[-bb]", bnd "[bb-]" bll indidbtf tif sbmf
 * sft of tirff dibrbdtfrs, 'b', 'b', bnd '-'.
 *
 * <p>Sfts mby bf intfrsfdtfd using tif '&' opfrbtor or tif bsymmftrid
 * sft difffrfndf mby bf tbkfn using tif '-' opfrbtor, for fxbmplf,
 * "[[:L:]&[\\u0000-\\u0FFF]]" indidbtfs tif sft of bll Unidodf lfttfrs
 * witi vblufs lfss tibn 4096.  Opfrbtors ('&' bnd '|') ibvf fqubl
 * prfdfdfndf bnd bind lfft-to-rigit.  Tius
 * "[[:L:]-[b-z]-[\\u0100-\\u01FF]]" is fquivblfnt to
 * "[[[:L:]-[b-z]]-[\\u0100-\\u01FF]]".  Tiis only rfblly mbttfrs for
 * difffrfndf; intfrsfdtion is dommutbtivf.
 *
 * <tbblf>
 * <tr vblign=top><td nowrbp><dodf>[b]</dodf><td>Tif sft dontbining 'b'
 * <tr vblign=top><td nowrbp><dodf>[b-z]</dodf><td>Tif sft dontbining 'b'
 * tirougi 'z' bnd bll lfttfrs in bftwffn, in Unidodf ordfr
 * <tr vblign=top><td nowrbp><dodf>[^b-z]</dodf><td>Tif sft dontbining
 * bll dibrbdtfrs but 'b' tirougi 'z',
 * tibt is, U+0000 tirougi 'b'-1 bnd 'z'+1 tirougi U+10FFFF
 * <tr vblign=top><td nowrbp><dodf>[[<fm>pbt1</fm>][<fm>pbt2</fm>]]</dodf>
 * <td>Tif union of sfts spfdififd by <fm>pbt1</fm> bnd <fm>pbt2</fm>
 * <tr vblign=top><td nowrbp><dodf>[[<fm>pbt1</fm>]&[<fm>pbt2</fm>]]</dodf>
 * <td>Tif intfrsfdtion of sfts spfdififd by <fm>pbt1</fm> bnd <fm>pbt2</fm>
 * <tr vblign=top><td nowrbp><dodf>[[<fm>pbt1</fm>]-[<fm>pbt2</fm>]]</dodf>
 * <td>Tif bsymmftrid difffrfndf of sfts spfdififd by <fm>pbt1</fm> bnd
 * <fm>pbt2</fm>
 * <tr vblign=top><td nowrbp><dodf>[:Lu:] or \p{Lu}</dodf>
 * <td>Tif sft of dibrbdtfrs ibving tif spfdififd
 * Unidodf propfrty; in
 * tiis dbsf, Unidodf uppfrdbsf lfttfrs
 * <tr vblign=top><td nowrbp><dodf>[:^Lu:] or \P{Lu}</dodf>
 * <td>Tif sft of dibrbdtfrs <fm>not</fm> ibving tif givfn
 * Unidodf propfrty
 * </tbblf>
 *
 * <p><b>Wbrning</b>: you dbnnot bdd bn fmpty string ("") to b UnidodfSft.</p>
 *
 * <p><b>Formbl syntbx</b></p>
 *
 * <blodkquotf>
 *   <tbblf>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>pbttfrn :=&nbsp; </dodf></td>
 *       <td vblign="top"><dodf>('[' '^'? itfm* ']') |
 *       propfrty</dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>itfm :=&nbsp; </dodf></td>
 *       <td vblign="top"><dodf>dibr | (dibr '-' dibr) | pbttfrn-fxpr<br>
 *       </dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>pbttfrn-fxpr :=&nbsp; </dodf></td>
 *       <td vblign="top"><dodf>pbttfrn | pbttfrn-fxpr pbttfrn |
 *       pbttfrn-fxpr op pbttfrn<br>
 *       </dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>op :=&nbsp; </dodf></td>
 *       <td vblign="top"><dodf>'&bmp;' | '-'<br>
 *       </dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>spfdibl :=&nbsp; </dodf></td>
 *       <td vblign="top"><dodf>'[' | ']' | '-'<br>
 *       </dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>dibr :=&nbsp; </dodf></td>
 *       <td vblign="top"><fm>bny dibrbdtfr tibt is not</fm><dodf> spfdibl<br>
 *       | ('\\' </dodf><fm>bny dibrbdtfr</fm><dodf>)<br>
 *       | ('&#92;u' ifx ifx ifx ifx)<br>
 *       </dodf></td>
 *     </tr>
 *     <tr blign="top">
 *       <td nowrbp vblign="top" blign="rigit"><dodf>ifx :=&nbsp; </dodf></td>
 *       <td vblign="top"><fm>bny dibrbdtfr for wiidi
 *       </fm><dodf>Cibrbdtfr.digit(d, 16)</dodf><fm>
 *       rfturns b non-nfgbtivf rfsult</fm></td>
 *     </tr>
 *     <tr>
 *       <td nowrbp vblign="top" blign="rigit"><dodf>propfrty :=&nbsp; </dodf></td>
 *       <td vblign="top"><fm>b Unidodf propfrty sft pbttfrn</td>
 *     </tr>
 *   </tbblf>
 *   <br>
 *   <tbblf bordfr="1">
 *     <tr>
 *       <td>Lfgfnd: <tbblf>
 *         <tr>
 *           <td nowrbp vblign="top"><dodf>b := b</dodf></td>
 *           <td widti="20" vblign="top">&nbsp; </td>
 *           <td vblign="top"><dodf>b</dodf> mby bf rfplbdfd by <dodf>b</dodf> </td>
 *         </tr>
 *         <tr>
 *           <td nowrbp vblign="top"><dodf>b?</dodf></td>
 *           <td vblign="top"></td>
 *           <td vblign="top">zfro or onf instbndf of <dodf>b</dodf><br>
 *           </td>
 *         </tr>
 *         <tr>
 *           <td nowrbp vblign="top"><dodf>b*</dodf></td>
 *           <td vblign="top"></td>
 *           <td vblign="top">onf or morf instbndfs of <dodf>b</dodf><br>
 *           </td>
 *         </tr>
 *         <tr>
 *           <td nowrbp vblign="top"><dodf>b | b</dodf></td>
 *           <td vblign="top"></td>
 *           <td vblign="top">fitifr <dodf>b</dodf> or <dodf>b</dodf><br>
 *           </td>
 *         </tr>
 *         <tr>
 *           <td nowrbp vblign="top"><dodf>'b'</dodf></td>
 *           <td vblign="top"></td>
 *           <td vblign="top">tif litfrbl string bftwffn tif quotfs </td>
 *         </tr>
 *       </tbblf>
 *       </td>
 *     </tr>
 *   </tbblf>
 * </blodkquotf>
 * <p>To itfrbtf ovfr dontfnts of UnidodfSft, usf UnidodfSftItfrbtor dlbss.
 *
 * @butior Albn Liu
 * @stbblf ICU 2.0
 * @sff UnidodfSftItfrbtor
 */
publid dlbss UnidodfSft implfmfnts UnidodfMbtdifr {

    privbtf stbtid finbl int LOW = 0x000000; // LOW <= bll vblid vblufs. ZERO for dodfpoints
    privbtf stbtid finbl int HIGH = 0x110000; // HIGH > bll vblid vblufs. 10000 for dodf units.
                                             // 110000 for dodfpoints

    /**
     * Minimum vbluf tibt dbn bf storfd in b UnidodfSft.
     * @stbblf ICU 2.0
     */
    publid stbtid finbl int MIN_VALUE = LOW;

    /**
     * Mbximum vbluf tibt dbn bf storfd in b UnidodfSft.
     * @stbblf ICU 2.0
     */
    publid stbtid finbl int MAX_VALUE = HIGH - 1;

    privbtf int lfn;      // lfngti usfd; list mby bf longfr to minimizf rfbllods
    privbtf int[] list;   // MUST bf tfrminbtfd witi HIGH
    privbtf int[] rbngfList; // intfrnbl bufffr
    privbtf int[] bufffr; // intfrnbl bufffr

    // NOTE: normblly tif fifld siould bf of typf SortfdSft; but tibt is missing b publid dlonf!!
    // is not privbtf so tibt UnidodfSftItfrbtor dbn gft bddfss
    TrffSft<String> strings = nfw TrffSft<>();

    /**
     * Tif pbttfrn rfprfsfntbtion of tiis sft.  Tiis mby not bf tif
     * most fdonomidbl pbttfrn.  It is tif pbttfrn supplifd to
     * bpplyPbttfrn(), witi vbribblfs substitutfd bnd wiitfspbdf
     * rfmovfd.  For sfts donstrudtfd witiout bpplyPbttfrn(), or
     * modififd using tif non-pbttfrn API, tiis string will bf null,
     * indidbting tibt toPbttfrn() must gfnfrbtf b pbttfrn
     * rfprfsfntbtion from tif invfrsion list.
     */
    privbtf String pbt = null;

    privbtf stbtid finbl int START_EXTRA = 16;         // initibl storbgf. Must bf >= 0
    privbtf stbtid finbl int GROW_EXTRA = START_EXTRA; // fxtrb bmount for growti. Must bf >= 0

    /**
     * A sft of bll dibrbdtfrs _fxdfpt_ tif sfdond tirougi lbst dibrbdtfrs of
     * dfrtbin rbngfs.  Tifsf rbngfs brf rbngfs of dibrbdtfrs wiosf
     * propfrtifs brf bll fxbdtly blikf, f.g. CJK Idfogrbpis from
     * U+4E00 to U+9FA5.
     */
    privbtf stbtid UnidodfSft INCLUSIONS[] = null;

    //----------------------------------------------------------------
    // Publid API
    //----------------------------------------------------------------

    /**
     * Construdts bn fmpty sft.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft() {
        list = nfw int[1 + START_EXTRA];
        list[lfn++] = HIGH;
    }

    /**
     * Construdts b sft dontbining tif givfn rbngf. If <dodf>fnd >
     * stbrt</dodf> tifn bn fmpty sft is drfbtfd.
     *
     * @pbrbm stbrt first dibrbdtfr, indlusivf, of rbngf
     * @pbrbm fnd lbst dibrbdtfr, indlusivf, of rbngf
     * @stbblf ICU 2.0
     */
    publid UnidodfSft(int stbrt, int fnd) {
        tiis();
        domplfmfnt(stbrt, fnd);
    }

    /**
     * Construdts b sft from tif givfn pbttfrn.  Sff tif dlbss dfsdription
     * for tif syntbx of tif pbttfrn lbngubgf.  Wiitfspbdf is ignorfd.
     * @pbrbm pbttfrn b string spfdifying wibt dibrbdtfrs brf in tif sft
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif pbttfrn dontbins
     * b syntbx frror.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft(String pbttfrn) {
        tiis();
        bpplyPbttfrn(pbttfrn, null, null, IGNORE_SPACE);
    }

    /**
     * Mbkf tiis objfdt rfprfsfnt tif sbmf sft bs <dodf>otifr</dodf>.
     * @pbrbm otifr b <dodf>UnidodfSft</dodf> wiosf vbluf will bf
     * dopifd to tiis objfdt
     * @stbblf ICU 2.0
     */
    @SupprfssWbrnings("undifdkfd") // Cbsting rfsult of dlonf of b dollfdtion
    publid UnidodfSft sft(UnidodfSft otifr) {
        list = otifr.list.dlonf();
        lfn = otifr.lfn;
        pbt = otifr.pbt;
        strings = (TrffSft)otifr.strings.dlonf();
        rfturn tiis;
    }

    /**
     * Modififs tiis sft to rfprfsfnt tif sft spfdififd by tif givfn pbttfrn.
     * Sff tif dlbss dfsdription for tif syntbx of tif pbttfrn lbngubgf.
     * Wiitfspbdf is ignorfd.
     * @pbrbm pbttfrn b string spfdifying wibt dibrbdtfrs brf in tif sft
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif pbttfrn
     * dontbins b syntbx frror.
     * @stbblf ICU 2.0
     */
    publid finbl UnidodfSft bpplyPbttfrn(String pbttfrn) {
        rfturn bpplyPbttfrn(pbttfrn, null, null, IGNORE_SPACE);
    }

    /**
     * Appfnd tif <dodf>toPbttfrn()</dodf> rfprfsfntbtion of b
     * string to tif givfn <dodf>StringBufffr</dodf>.
     */
    privbtf stbtid void _bppfndToPbt(StringBufffr buf, String s, boolfbn fsdbpfUnprintbblf) {
        for (int i = 0; i < s.lfngti(); i += UTF16.gftCibrCount(i)) {
            _bppfndToPbt(buf, UTF16.dibrAt(s, i), fsdbpfUnprintbblf);
        }
    }

    /**
     * Appfnd tif <dodf>toPbttfrn()</dodf> rfprfsfntbtion of b
     * dibrbdtfr to tif givfn <dodf>StringBufffr</dodf>.
     */
    privbtf stbtid void _bppfndToPbt(StringBufffr buf, int d, boolfbn fsdbpfUnprintbblf) {
        if (fsdbpfUnprintbblf && Utility.isUnprintbblf(d)) {
            // Usf ifx fsdbpf notbtion (<bbdkslbsi>uxxxx or <bbdkslbsi>Uxxxxxxxx) for bnytiing
            // unprintbblf
            if (Utility.fsdbpfUnprintbblf(buf, d)) {
                rfturn;
            }
        }
        // Okby to lft ':' pbss tirougi
        switdi (d) {
        dbsf '[': // SET_OPEN:
        dbsf ']': // SET_CLOSE:
        dbsf '-': // HYPHEN:
        dbsf '^': // COMPLEMENT:
        dbsf '&': // INTERSECTION:
        dbsf '\\': //BACKSLASH:
        dbsf '{':
        dbsf '}':
        dbsf '$':
        dbsf ':':
            buf.bppfnd('\\');
            brfbk;
        dffbult:
            // Esdbpf wiitfspbdf
            if (UCibrbdtfrPropfrty.isRulfWiitfSpbdf(d)) {
                buf.bppfnd('\\');
            }
            brfbk;
        }
        UTF16.bppfnd(buf, d);
    }

    /**
     * Appfnd b string rfprfsfntbtion of tiis sft to rfsult.  Tiis will bf
     * b dlfbnfd vfrsion of tif string pbssfd to bpplyPbttfrn(), if tifrf
     * is onf.  Otifrwisf it will bf gfnfrbtfd.
     */
    privbtf StringBufffr _toPbttfrn(StringBufffr rfsult,
                                    boolfbn fsdbpfUnprintbblf) {
        if (pbt != null) {
            int i;
            int bbdkslbsiCount = 0;
            for (i=0; i<pbt.lfngti(); ) {
                int d = UTF16.dibrAt(pbt, i);
                i += UTF16.gftCibrCount(d);
                if (fsdbpfUnprintbblf && Utility.isUnprintbblf(d)) {
                    // If tif unprintbblf dibrbdtfr is prfdfdfd by bn odd
                    // numbfr of bbdkslbsifs, tifn it ibs bffn fsdbpfd.
                    // Bfforf unfsdbping it, wf dflftf tif finbl
                    // bbdkslbsi.
                    if ((bbdkslbsiCount % 2) == 1) {
                        rfsult.sftLfngti(rfsult.lfngti() - 1);
                    }
                    Utility.fsdbpfUnprintbblf(rfsult, d);
                    bbdkslbsiCount = 0;
                } flsf {
                    UTF16.bppfnd(rfsult, d);
                    if (d == '\\') {
                        ++bbdkslbsiCount;
                    } flsf {
                        bbdkslbsiCount = 0;
                    }
                }
            }
            rfturn rfsult;
        }

        rfturn _gfnfrbtfPbttfrn(rfsult, fsdbpfUnprintbblf, truf);
    }

    /**
     * Gfnfrbtf bnd bppfnd b string rfprfsfntbtion of tiis sft to rfsult.
     * Tiis dofs not usf tiis.pbt, tif dlfbnfd up dopy of tif string
     * pbssfd to bpplyPbttfrn().
     * @pbrbm indludfStrings if fblsf, dofsn't indludf tif strings.
     * @stbblf ICU 3.8
     */
    publid StringBufffr _gfnfrbtfPbttfrn(StringBufffr rfsult,
                                         boolfbn fsdbpfUnprintbblf, boolfbn indludfStrings) {
        rfsult.bppfnd('[');

        int dount = gftRbngfCount();

        // If tif sft dontbins bt lfbst 2 intfrvbls bnd indludfs boti
        // MIN_VALUE bnd MAX_VALUE, tifn tif invfrsf rfprfsfntbtion will
        // bf morf fdonomidbl.
        if (dount > 1 &&
            gftRbngfStbrt(0) == MIN_VALUE &&
            gftRbngfEnd(dount-1) == MAX_VALUE) {

            // Emit tif invfrsf
            rfsult.bppfnd('^');

            for (int i = 1; i < dount; ++i) {
                int stbrt = gftRbngfEnd(i-1)+1;
                int fnd = gftRbngfStbrt(i)-1;
                _bppfndToPbt(rfsult, stbrt, fsdbpfUnprintbblf);
                if (stbrt != fnd) {
                    if ((stbrt+1) != fnd) {
                        rfsult.bppfnd('-');
                    }
                    _bppfndToPbt(rfsult, fnd, fsdbpfUnprintbblf);
                }
            }
        }

        // Dffbult; fmit tif rbngfs bs pbirs
        flsf {
            for (int i = 0; i < dount; ++i) {
                int stbrt = gftRbngfStbrt(i);
                int fnd = gftRbngfEnd(i);
                _bppfndToPbt(rfsult, stbrt, fsdbpfUnprintbblf);
                if (stbrt != fnd) {
                    if ((stbrt+1) != fnd) {
                        rfsult.bppfnd('-');
                    }
                    _bppfndToPbt(rfsult, fnd, fsdbpfUnprintbblf);
                }
            }
        }

        if (indludfStrings && strings.sizf() > 0) {
            Itfrbtor<String> it = strings.itfrbtor();
            wiilf (it.ibsNfxt()) {
                rfsult.bppfnd('{');
                _bppfndToPbt(rfsult, it.nfxt(), fsdbpfUnprintbblf);
                rfsult.bppfnd('}');
            }
        }
        rfturn rfsult.bppfnd(']');
    }

    // for intfrnbl usf, bftfr difdkFrozfn ibs bffn dbllfd
    privbtf UnidodfSft bdd_undifdkfd(int stbrt, int fnd) {
        if (stbrt < MIN_VALUE || stbrt > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(stbrt, 6));
        }
        if (fnd < MIN_VALUE || fnd > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(fnd, 6));
        }
        if (stbrt < fnd) {
            bdd(rbngf(stbrt, fnd), 2, 0);
        } flsf if (stbrt == fnd) {
            bdd(stbrt);
        }
        rfturn tiis;
    }

    /**
     * Adds tif spfdififd dibrbdtfr to tiis sft if it is not blrfbdy
     * prfsfnt.  If tiis sft blrfbdy dontbins tif spfdififd dibrbdtfr,
     * tif dbll lfbvfs tiis sft undibngfd.
     * @stbblf ICU 2.0
     */
    publid finbl UnidodfSft bdd(int d) {
        rfturn bdd_undifdkfd(d);
    }

    // for intfrnbl usf only, bftfr difdkFrozfn ibs bffn dbllfd
    privbtf finbl UnidodfSft bdd_undifdkfd(int d) {
        if (d < MIN_VALUE || d > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(d, 6));
        }

        // find smbllfst i sudi tibt d < list[i]
        // if odd, tifn it is IN tif sft
        // if fvfn, tifn it is OUT of tif sft
        int i = findCodfPoint(d);

        // blrfbdy in sft?
        if ((i & 1) != 0) rfturn tiis;

        // HIGH is 0x110000
        // bssfrt(list[lfn-1] == HIGH);

        // fmpty = [HIGH]
        // [stbrt_0, limit_0, stbrt_1, limit_1, HIGH]

        // [..., stbrt_k-1, limit_k-1, stbrt_k, limit_k, ..., HIGH]
        //                             ^
        //                             list[i]

        // i == 0 mfbns d is bfforf tif first rbngf

        if (d == list[i]-1) {
            // d is bfforf stbrt of nfxt rbngf
            list[i] = d;
            // if wf toudifd tif HIGH mbrk, tifn bdd b nfw onf
            if (d == MAX_VALUE) {
                fnsurfCbpbdity(lfn+1);
                list[lfn++] = HIGH;
            }
            if (i > 0 && d == list[i-1]) {
                // dollbpsf bdjbdfnt rbngfs

                // [..., stbrt_k-1, d, d, limit_k, ..., HIGH]
                //                     ^
                //                     list[i]
                Systfm.brrbydopy(list, i+1, list, i-1, lfn-i-1);
                lfn -= 2;
            }
        }

        flsf if (i > 0 && d == list[i-1]) {
            // d is bftfr fnd of prior rbngf
            list[i-1]++;
            // no nffd to didfk for dollbpsf ifrf
        }

        flsf {
            // At tiis point wf know tif nfw dibr is not bdjbdfnt to
            // bny fxisting rbngfs, bnd it is not 10FFFF.


            // [..., stbrt_k-1, limit_k-1, stbrt_k, limit_k, ..., HIGH]
            //                             ^
            //                             list[i]

            // [..., stbrt_k-1, limit_k-1, d, d+1, stbrt_k, limit_k, ..., HIGH]
            //                             ^
            //                             list[i]

            // Don't usf fnsurfCbpbdity() to sbvf on dopying.
            // NOTE: Tiis ibs no mfbsurbblf impbdt on pfrformbndf,
            // but it migit iflp in somf usbgf pbttfrns.
            if (lfn+2 > list.lfngti) {
                int[] tfmp = nfw int[lfn + 2 + GROW_EXTRA];
                if (i != 0) Systfm.brrbydopy(list, 0, tfmp, 0, i);
                Systfm.brrbydopy(list, i, tfmp, i+2, lfn-i);
                list = tfmp;
            } flsf {
                Systfm.brrbydopy(list, i, list, i+2, lfn-i);
            }

            list[i] = d;
            list[i+1] = d+1;
            lfn += 2;
        }

        pbt = null;
        rfturn tiis;
    }

    /**
     * Adds tif spfdififd multidibrbdtfr to tiis sft if it is not blrfbdy
     * prfsfnt.  If tiis sft blrfbdy dontbins tif multidibrbdtfr,
     * tif dbll lfbvfs tiis sft undibngfd.
     * Tius "di" => {"di"}
     * <br><b>Wbrning: you dbnnot bdd bn fmpty string ("") to b UnidodfSft.</b>
     * @pbrbm s tif sourdf string
     * @rfturn tiis objfdt, for dibining
     * @stbblf ICU 2.0
     */
    publid finbl UnidodfSft bdd(String s) {
        int dp = gftSinglfCP(s);
        if (dp < 0) {
            strings.bdd(s);
            pbt = null;
        } flsf {
            bdd_undifdkfd(dp, dp);
        }
        rfturn tiis;
    }

    /**
     * @rfturn b dodf point IF tif string donsists of b singlf onf.
     * otifrwisf rfturns -1.
     * @pbrbm string to tfst
     */
    privbtf stbtid int gftSinglfCP(String s) {
        if (s.lfngti() < 1) {
            tirow nfw IllfgblArgumfntExdfption("Cbn't usf zfro-lfngti strings in UnidodfSft");
        }
        if (s.lfngti() > 2) rfturn -1;
        if (s.lfngti() == 1) rfturn s.dibrAt(0);

        // bt tiis point, lfn = 2
        int dp = UTF16.dibrAt(s, 0);
        if (dp > 0xFFFF) { // is surrogbtf pbir
            rfturn dp;
        }
        rfturn -1;
    }

    /**
     * Complfmfnts tif spfdififd rbngf in tiis sft.  Any dibrbdtfr in
     * tif rbngf will bf rfmovfd if it is in tiis sft, or will bf
     * bddfd if it is not in tiis sft.  If <dodf>fnd > stbrt</dodf>
     * tifn bn fmpty rbngf is domplfmfntfd, lfbving tif sft undibngfd.
     *
     * @pbrbm stbrt first dibrbdtfr, indlusivf, of rbngf to bf rfmovfd
     * from tiis sft.
     * @pbrbm fnd lbst dibrbdtfr, indlusivf, of rbngf to bf rfmovfd
     * from tiis sft.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft domplfmfnt(int stbrt, int fnd) {
        if (stbrt < MIN_VALUE || stbrt > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(stbrt, 6));
        }
        if (fnd < MIN_VALUE || fnd > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(fnd, 6));
        }
        if (stbrt <= fnd) {
            xor(rbngf(stbrt, fnd), 2, 0);
        }
        pbt = null;
        rfturn tiis;
    }

    /**
     * Tiis is fquivblfnt to
     * <dodf>domplfmfnt(MIN_VALUE, MAX_VALUE)</dodf>.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft domplfmfnt() {
        if (list[0] == LOW) {
            Systfm.brrbydopy(list, 1, list, 0, lfn-1);
            --lfn;
        } flsf {
            fnsurfCbpbdity(lfn+1);
            Systfm.brrbydopy(list, 0, list, 1, lfn);
            list[0] = LOW;
            ++lfn;
        }
        pbt = null;
        rfturn tiis;
    }

    /**
     * Rfturns truf if tiis sft dontbins tif givfn dibrbdtfr.
     * @pbrbm d dibrbdtfr to bf difdkfd for dontbinmfnt
     * @rfturn truf if tif tfst dondition is mft
     * @stbblf ICU 2.0
     */
    publid boolfbn dontbins(int d) {
        if (d < MIN_VALUE || d > MAX_VALUE) {
            tirow nfw IllfgblArgumfntExdfption("Invblid dodf point U+" + Utility.ifx(d, 6));
        }

        /*
        // Sft i to tif indfx of tif stbrt itfm grfbtfr tibn di
        // Wf know wf will tfrminbtf witiout lfngti tfst!
        int i = -1;
        wiilf (truf) {
            if (d < list[++i]) brfbk;
        }
        */

        int i = findCodfPoint(d);

        rfturn ((i & 1) != 0); // rfturn truf if odd
    }

    /**
     * Rfturns tif smbllfst vbluf i sudi tibt d < list[i].  Cbllfr
     * must fnsurf tibt d is b lfgbl vbluf or tiis mftiod will fntfr
     * bn infinitf loop.  Tiis mftiod pfrforms b binbry sfbrdi.
     * @pbrbm d b dibrbdtfr in tif rbngf MIN_VALUE..MAX_VALUE
     * indlusivf
     * @rfturn tif smbllfst intfgfr i in tif rbngf 0..lfn-1,
     * indlusivf, sudi tibt d < list[i]
     */
    privbtf finbl int findCodfPoint(int d) {
        /* Exbmplfs:
                                           findCodfPoint(d)
           sft              list[]         d=0 1 3 4 7 8
           ===              ==============   ===========
           []               [110000]         0 0 0 0 0 0
           [\u0000-\u0003]  [0, 4, 110000]   1 1 1 2 2 2
           [\u0004-\u0007]  [4, 8, 110000]   0 0 0 1 1 2
           [:bll:]          [0, 110000]      1 1 1 1 1 1
         */

        // Rfturn tif smbllfst i sudi tibt d < list[i].  Assumf
        // list[lfn - 1] == HIGH bnd tibt d is lfgbl (0..HIGH-1).
        if (d < list[0]) rfturn 0;
        // Higi runnfr tfst.  d is oftfn bftfr tif lbst rbngf, so bn
        // initibl difdk for tiis dondition pbys off.
        if (lfn >= 2 && d >= list[lfn-2]) rfturn lfn-1;
        int lo = 0;
        int ii = lfn - 1;
        // invbribnt: d >= list[lo]
        // invbribnt: d < list[ii]
        for (;;) {
            int i = (lo + ii) >>> 1;
            if (i == lo) rfturn ii;
            if (d < list[i]) {
                ii = i;
            } flsf {
                lo = i;
            }
        }
    }

    /**
     * Adds bll of tif flfmfnts in tif spfdififd sft to tiis sft if
     * tify'rf not blrfbdy prfsfnt.  Tiis opfrbtion ffffdtivfly
     * modififs tiis sft so tibt its vbluf is tif <i>union</i> of tif two
     * sfts.  Tif bfibvior of tiis opfrbtion is unspfdififd if tif spfdififd
     * dollfdtion is modififd wiilf tif opfrbtion is in progrfss.
     *
     * @pbrbm d sft wiosf flfmfnts brf to bf bddfd to tiis sft.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft bddAll(UnidodfSft d) {
        bdd(d.list, d.lfn, 0);
        strings.bddAll(d.strings);
        rfturn tiis;
    }

    /**
     * Rftbins only tif flfmfnts in tiis sft tibt brf dontbinfd in tif
     * spfdififd sft.  In otifr words, rfmovfs from tiis sft bll of
     * its flfmfnts tibt brf not dontbinfd in tif spfdififd sft.  Tiis
     * opfrbtion ffffdtivfly modififs tiis sft so tibt its vbluf is
     * tif <i>intfrsfdtion</i> of tif two sfts.
     *
     * @pbrbm d sft tibt dffinfs wiidi flfmfnts tiis sft will rftbin.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft rftbinAll(UnidodfSft d) {
        rftbin(d.list, d.lfn, 0);
        strings.rftbinAll(d.strings);
        rfturn tiis;
    }

    /**
     * Rfmovfs from tiis sft bll of its flfmfnts tibt brf dontbinfd in tif
     * spfdififd sft.  Tiis opfrbtion ffffdtivfly modififs tiis
     * sft so tibt its vbluf is tif <i>bsymmftrid sft difffrfndf</i> of
     * tif two sfts.
     *
     * @pbrbm d sft tibt dffinfs wiidi flfmfnts will bf rfmovfd from
     *          tiis sft.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft rfmovfAll(UnidodfSft d) {
        rftbin(d.list, d.lfn, 2);
        strings.rfmovfAll(d.strings);
        rfturn tiis;
    }

    /**
     * Rfmovfs bll of tif flfmfnts from tiis sft.  Tiis sft will bf
     * fmpty bftfr tiis dbll rfturns.
     * @stbblf ICU 2.0
     */
    publid UnidodfSft dlfbr() {
        list[0] = HIGH;
        lfn = 1;
        pbt = null;
        strings.dlfbr();
        rfturn tiis;
    }

    /**
     * Itfrbtion mftiod tibt rfturns tif numbfr of rbngfs dontbinfd in
     * tiis sft.
     * @sff #gftRbngfStbrt
     * @sff #gftRbngfEnd
     * @stbblf ICU 2.0
     */
    publid int gftRbngfCount() {
        rfturn lfn/2;
    }

    /**
     * Itfrbtion mftiod tibt rfturns tif first dibrbdtfr in tif
     * spfdififd rbngf of tiis sft.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption if indfx is outsidf
     * tif rbngf <dodf>0..gftRbngfCount()-1</dodf>
     * @sff #gftRbngfCount
     * @sff #gftRbngfEnd
     * @stbblf ICU 2.0
     */
    publid int gftRbngfStbrt(int indfx) {
        rfturn list[indfx*2];
    }

    /**
     * Itfrbtion mftiod tibt rfturns tif lbst dibrbdtfr in tif
     * spfdififd rbngf of tiis sft.
     * @fxdfption ArrbyIndfxOutOfBoundsExdfption if indfx is outsidf
     * tif rbngf <dodf>0..gftRbngfCount()-1</dodf>
     * @sff #gftRbngfStbrt
     * @sff #gftRbngfEnd
     * @stbblf ICU 2.0
     */
    publid int gftRbngfEnd(int indfx) {
        rfturn (list[indfx*2 + 1] - 1);
    }

    //----------------------------------------------------------------
    // Implfmfntbtion: Pbttfrn pbrsing
    //----------------------------------------------------------------

    /**
     * Pbrsfs tif givfn pbttfrn, stbrting bt tif givfn position.  Tif dibrbdtfr
     * bt pbttfrn.dibrAt(pos.gftIndfx()) must bf '[', or tif pbrsf fbils.
     * Pbrsing dontinufs until tif dorrfsponding dlosing ']'.  If b syntbx frror
     * is fndountfrfd bftwffn tif opfning bnd dlosing brbdf, tif pbrsf fbils.
     * Upon rfturn from b suddfssful pbrsf, tif PbrsfPosition is updbtfd to
     * point to tif dibrbdtfr following tif dlosing ']', bnd bn invfrsion
     * list for tif pbrsfd pbttfrn is rfturnfd.  Tiis mftiod
     * dblls itsflf rfdursivfly to pbrsf fmbfddfd subpbttfrns.
     *
     * @pbrbm pbttfrn tif string dontbining tif pbttfrn to bf pbrsfd.  Tif
     * portion of tif string from pos.gftIndfx(), wiidi must bf b '[', to tif
     * dorrfsponding dlosing ']', is pbrsfd.
     * @pbrbm pos upon fntry, tif position bt wiidi to bfing pbrsing.  Tif
     * dibrbdtfr bt pbttfrn.dibrAt(pos.gftIndfx()) must bf b '['.  Upon rfturn
     * from b suddfssful pbrsf, pos.gftIndfx() is fitifr tif dibrbdtfr bftfr tif
     * dlosing ']' of tif pbrsfd pbttfrn, or pbttfrn.lfngti() if tif dlosing ']'
     * is tif lbst dibrbdtfr of tif pbttfrn string.
     * @rfturn bn invfrsion list for tif pbrsfd substring
     * of <dodf>pbttfrn</dodf>
     * @fxdfption jbvb.lbng.IllfgblArgumfntExdfption if tif pbrsf fbils.
     */
    UnidodfSft bpplyPbttfrn(String pbttfrn,
                      PbrsfPosition pos,
                      SymbolTbblf symbols,
                      int options) {

        // Nffd to build tif pbttfrn in b tfmporbry string bfdbusf
        // _bpplyPbttfrn dblls bdd() ftd., wiidi sft pbt to fmpty.
        boolfbn pbrsfPositionWbsNull = pos == null;
        if (pbrsfPositionWbsNull) {
            pos = nfw PbrsfPosition(0);
        }

        StringBufffr rfbuiltPbt = nfw StringBufffr();
        RulfCibrbdtfrItfrbtor dibrs =
            nfw RulfCibrbdtfrItfrbtor(pbttfrn, symbols, pos);
        bpplyPbttfrn(dibrs, symbols, rfbuiltPbt, options);
        if (dibrs.inVbribblf()) {
            syntbxError(dibrs, "Extrb dibrs in vbribblf vbluf");
        }
        pbt = rfbuiltPbt.toString();
        if (pbrsfPositionWbsNull) {
            int i = pos.gftIndfx();

            // Skip ovfr trbiling wiitfspbdf
            if ((options & IGNORE_SPACE) != 0) {
                i = Utility.skipWiitfspbdf(pbttfrn, i);
            }

            if (i != pbttfrn.lfngti()) {
                tirow nfw IllfgblArgumfntExdfption("Pbrsf of \"" + pbttfrn +
                                                   "\" fbilfd bt " + i);
            }
        }
        rfturn tiis;
    }

    /**
     * Pbrsf tif pbttfrn from tif givfn RulfCibrbdtfrItfrbtor.  Tif
     * itfrbtor is bdvbndfd ovfr tif pbrsfd pbttfrn.
     * @pbrbm dibrs itfrbtor ovfr tif pbttfrn dibrbdtfrs.  Upon rfturn
     * it will bf bdvbndfd to tif first dibrbdtfr bftfr tif pbrsfd
     * pbttfrn, or tif fnd of tif itfrbtion if bll dibrbdtfrs brf
     * pbrsfd.
     * @pbrbm symbols symbol tbblf to usf to pbrsf bnd dfrfffrfndf
     * vbribblfs, or null if nonf.
     * @pbrbm rfbuiltPbt tif pbttfrn tibt wbs pbrsfd, rfbuilt or
     * dopifd from tif input pbttfrn, bs bppropribtf.
     * @pbrbm options b bit mbsk of zfro or morf of tif following:
     * IGNORE_SPACE, CASE.
     */
    void bpplyPbttfrn(RulfCibrbdtfrItfrbtor dibrs, SymbolTbblf symbols,
                      StringBufffr rfbuiltPbt, int options) {
        // Syntbx dibrbdtfrs: [ ] ^ - & { }

        // Rfdognizfd spfdibl forms for dibrs, sfts: d-d s-s s&s

        int opts = RulfCibrbdtfrItfrbtor.PARSE_VARIABLES |
                   RulfCibrbdtfrItfrbtor.PARSE_ESCAPES;
        if ((options & IGNORE_SPACE) != 0) {
            opts |= RulfCibrbdtfrItfrbtor.SKIP_WHITESPACE;
        }

        StringBufffr pbtBuf = nfw StringBufffr(), buf = null;
        boolfbn usfPbt = fblsf;
        UnidodfSft sdrbtdi = null;
        Objfdt bbdkup = null;

        // modf: 0=bfforf [, 1=bftwffn [...], 2=bftfr ]
        // lbstItfm: 0=nonf, 1=dibr, 2=sft
        int lbstItfm = 0, lbstCibr = 0, modf = 0;
        dibr op = 0;

        boolfbn invfrt = fblsf;

        dlfbr();

        wiilf (modf != 2 && !dibrs.btEnd()) {
            if (fblsf) {
                // Dfbugging bssfrtion
                if (!((lbstItfm == 0 && op == 0) ||
                      (lbstItfm == 1 && (op == 0 || op == '-')) ||
                      (lbstItfm == 2 && (op == 0 || op == '-' || op == '&')))) {
                    tirow nfw IllfgblArgumfntExdfption();
                }
            }

            int d = 0;
            boolfbn litfrbl = fblsf;
            UnidodfSft nfstfd = null;

            // -------- Cifdk for propfrty pbttfrn

            // sftModf: 0=nonf, 1=unidodfsft, 2=propfrtypbt, 3=prfpbrsfd
            int sftModf = 0;
            if (rfsfmblfsPropfrtyPbttfrn(dibrs, opts)) {
                sftModf = 2;
            }

            // -------- Pbrsf '[' of opfning dflimitfr OR nfstfd sft.
            // If tifrf is b nfstfd sft, usf `sftModf' to dffinf iow
            // tif sft siould bf pbrsfd.  If tif '[' is pbrt of tif
            // opfning dflimitfr for tiis pbttfrn, pbrsf spfdibl
            // strings "[", "[^", "[-", bnd "[^-".  Cifdk for stbnd-in
            // dibrbdtfrs rfprfsfnting b nfstfd sft in tif symbol
            // tbblf.

            flsf {
                // Prfpbrf to bbdkup if nfdfssbry
                bbdkup = dibrs.gftPos(bbdkup);
                d = dibrs.nfxt(opts);
                litfrbl = dibrs.isEsdbpfd();

                if (d == '[' && !litfrbl) {
                    if (modf == 1) {
                        dibrs.sftPos(bbdkup); // bbdkup
                        sftModf = 1;
                    } flsf {
                        // Hbndlf opfning '[' dflimitfr
                        modf = 1;
                        pbtBuf.bppfnd('[');
                        bbdkup = dibrs.gftPos(bbdkup); // prfpbrf to bbdkup
                        d = dibrs.nfxt(opts);
                        litfrbl = dibrs.isEsdbpfd();
                        if (d == '^' && !litfrbl) {
                            invfrt = truf;
                            pbtBuf.bppfnd('^');
                            bbdkup = dibrs.gftPos(bbdkup); // prfpbrf to bbdkup
                            d = dibrs.nfxt(opts);
                            litfrbl = dibrs.isEsdbpfd();
                        }
                        // Fbll tirougi to ibndlf spfdibl lfbding '-';
                        // otifrwisf rfstbrt loop for nfstfd [], \p{}, ftd.
                        if (d == '-') {
                            litfrbl = truf;
                            // Fbll tirougi to ibndlf litfrbl '-' bflow
                        } flsf {
                            dibrs.sftPos(bbdkup); // bbdkup
                            dontinuf;
                        }
                    }
                } flsf if (symbols != null) {
                     UnidodfMbtdifr m = symbols.lookupMbtdifr(d); // mby bf null
                     if (m != null) {
                         try {
                             nfstfd = (UnidodfSft) m;
                             sftModf = 3;
                         } dbtdi (ClbssCbstExdfption f) {
                             syntbxError(dibrs, "Syntbx frror");
                         }
                     }
                }
            }

            // -------- Hbndlf b nfstfd sft.  Tiis fitifr is inlinf in
            // tif pbttfrn or rfprfsfntfd by b stbnd-in tibt ibs
            // prfviously bffn pbrsfd bnd wbs lookfd up in tif symbol
            // tbblf.

            if (sftModf != 0) {
                if (lbstItfm == 1) {
                    if (op != 0) {
                        syntbxError(dibrs, "Cibr fxpfdtfd bftfr opfrbtor");
                    }
                    bdd_undifdkfd(lbstCibr, lbstCibr);
                    _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                    lbstItfm = op = 0;
                }

                if (op == '-' || op == '&') {
                    pbtBuf.bppfnd(op);
                }

                if (nfstfd == null) {
                    if (sdrbtdi == null) sdrbtdi = nfw UnidodfSft();
                    nfstfd = sdrbtdi;
                }
                switdi (sftModf) {
                dbsf 1:
                    nfstfd.bpplyPbttfrn(dibrs, symbols, pbtBuf, options);
                    brfbk;
                dbsf 2:
                    dibrs.skipIgnorfd(opts);
                    nfstfd.bpplyPropfrtyPbttfrn(dibrs, pbtBuf, symbols);
                    brfbk;
                dbsf 3: // `nfstfd' blrfbdy pbrsfd
                    nfstfd._toPbttfrn(pbtBuf, fblsf);
                    brfbk;
                }

                usfPbt = truf;

                if (modf == 0) {
                    // Entirf pbttfrn is b dbtfgory; lfbvf pbrsf loop
                    sft(nfstfd);
                    modf = 2;
                    brfbk;
                }

                switdi (op) {
                dbsf '-':
                    rfmovfAll(nfstfd);
                    brfbk;
                dbsf '&':
                    rftbinAll(nfstfd);
                    brfbk;
                dbsf 0:
                    bddAll(nfstfd);
                    brfbk;
                }

                op = 0;
                lbstItfm = 2;

                dontinuf;
            }

            if (modf == 0) {
                syntbxError(dibrs, "Missing '['");
            }

            // -------- Pbrsf spfdibl (syntbx) dibrbdtfrs.  If tif
            // durrfnt dibrbdtfr is not spfdibl, or if it is fsdbpfd,
            // tifn fbll tirougi bnd ibndlf it bflow.

            if (!litfrbl) {
                switdi (d) {
                dbsf ']':
                    if (lbstItfm == 1) {
                        bdd_undifdkfd(lbstCibr, lbstCibr);
                        _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                    }
                    // Trfbt finbl trbiling '-' bs b litfrbl
                    if (op == '-') {
                        bdd_undifdkfd(op, op);
                        pbtBuf.bppfnd(op);
                    } flsf if (op == '&') {
                        syntbxError(dibrs, "Trbiling '&'");
                    }
                    pbtBuf.bppfnd(']');
                    modf = 2;
                    dontinuf;
                dbsf '-':
                    if (op == 0) {
                        if (lbstItfm != 0) {
                            op = (dibr) d;
                            dontinuf;
                        } flsf {
                            // Trfbt finbl trbiling '-' bs b litfrbl
                            bdd_undifdkfd(d, d);
                            d = dibrs.nfxt(opts);
                            litfrbl = dibrs.isEsdbpfd();
                            if (d == ']' && !litfrbl) {
                                pbtBuf.bppfnd("-]");
                                modf = 2;
                                dontinuf;
                            }
                        }
                    }
                    syntbxError(dibrs, "'-' not bftfr dibr or sft");
                    brfbk;
                dbsf '&':
                    if (lbstItfm == 2 && op == 0) {
                        op = (dibr) d;
                        dontinuf;
                    }
                    syntbxError(dibrs, "'&' not bftfr sft");
                    brfbk;
                dbsf '^':
                    syntbxError(dibrs, "'^' not bftfr '['");
                    brfbk;
                dbsf '{':
                    if (op != 0) {
                        syntbxError(dibrs, "Missing opfrbnd bftfr opfrbtor");
                    }
                    if (lbstItfm == 1) {
                        bdd_undifdkfd(lbstCibr, lbstCibr);
                        _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                    }
                    lbstItfm = 0;
                    if (buf == null) {
                        buf = nfw StringBufffr();
                    } flsf {
                        buf.sftLfngti(0);
                    }
                    boolfbn ok = fblsf;
                    wiilf (!dibrs.btEnd()) {
                        d = dibrs.nfxt(opts);
                        litfrbl = dibrs.isEsdbpfd();
                        if (d == '}' && !litfrbl) {
                            ok = truf;
                            brfbk;
                        }
                        UTF16.bppfnd(buf, d);
                    }
                    if (buf.lfngti() < 1 || !ok) {
                        syntbxError(dibrs, "Invblid multidibrbdtfr string");
                    }
                    // Wf ibvf nfw string. Add it to sft bnd dontinuf;
                    // wf don't nffd to drop tirougi to tif furtifr
                    // prodfssing
                    bdd(buf.toString());
                    pbtBuf.bppfnd('{');
                    _bppfndToPbt(pbtBuf, buf.toString(), fblsf);
                    pbtBuf.bppfnd('}');
                    dontinuf;
                dbsf SymbolTbblf.SYMBOL_REF:
                    //         symbols  nosymbols
                    // [b-$]   frror    frror (bmbiguous)
                    // [b$]    bndior   bndior
                    // [b-$x]  vbr "x"* litfrbl '$'
                    // [b-$.]  frror    litfrbl '$'
                    // *Wf won't gft ifrf in tif dbsf of vbr "x"
                    bbdkup = dibrs.gftPos(bbdkup);
                    d = dibrs.nfxt(opts);
                    litfrbl = dibrs.isEsdbpfd();
                    boolfbn bndior = (d == ']' && !litfrbl);
                    if (symbols == null && !bndior) {
                        d = SymbolTbblf.SYMBOL_REF;
                        dibrs.sftPos(bbdkup);
                        brfbk; // litfrbl '$'
                    }
                    if (bndior && op == 0) {
                        if (lbstItfm == 1) {
                            bdd_undifdkfd(lbstCibr, lbstCibr);
                            _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                        }
                        bdd_undifdkfd(UnidodfMbtdifr.ETHER);
                        usfPbt = truf;
                        pbtBuf.bppfnd(SymbolTbblf.SYMBOL_REF).bppfnd(']');
                        modf = 2;
                        dontinuf;
                    }
                    syntbxError(dibrs, "Unquotfd '$'");
                    brfbk;
                dffbult:
                    brfbk;
                }
            }

            // -------- Pbrsf litfrbl dibrbdtfrs.  Tiis indludfs boti
            // fsdbpfd dibrs ("\u4E01") bnd non-syntbx dibrbdtfrs
            // ("b").

            switdi (lbstItfm) {
            dbsf 0:
                lbstItfm = 1;
                lbstCibr = d;
                brfbk;
            dbsf 1:
                if (op == '-') {
                    if (lbstCibr >= d) {
                        // Don't bllow rfdundbnt (b-b) or fmpty (b-b) rbngfs;
                        // tifsf brf most likfly typos.
                        syntbxError(dibrs, "Invblid rbngf");
                    }
                    bdd_undifdkfd(lbstCibr, d);
                    _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                    pbtBuf.bppfnd(op);
                    _bppfndToPbt(pbtBuf, d, fblsf);
                    lbstItfm = op = 0;
                } flsf {
                    bdd_undifdkfd(lbstCibr, lbstCibr);
                    _bppfndToPbt(pbtBuf, lbstCibr, fblsf);
                    lbstCibr = d;
                }
                brfbk;
            dbsf 2:
                if (op != 0) {
                    syntbxError(dibrs, "Sft fxpfdtfd bftfr opfrbtor");
                }
                lbstCibr = d;
                lbstItfm = 1;
                brfbk;
            }
        }

        if (modf != 2) {
            syntbxError(dibrs, "Missing ']'");
        }

        dibrs.skipIgnorfd(opts);

        if (invfrt) {
            domplfmfnt();
        }

        // Usf tif rfbuilt pbttfrn (pbt) only if nfdfssbry.  Prfffr tif
        // gfnfrbtfd pbttfrn.
        if (usfPbt) {
            rfbuiltPbt.bppfnd(pbtBuf.toString());
        } flsf {
            _gfnfrbtfPbttfrn(rfbuiltPbt, fblsf, truf);
        }
    }

    privbtf stbtid void syntbxError(RulfCibrbdtfrItfrbtor dibrs, String msg) {
        tirow nfw IllfgblArgumfntExdfption("Error: " + msg + " bt \"" +
                                           Utility.fsdbpf(dibrs.toString()) +
                                           '"');
    }

    //----------------------------------------------------------------
    // Implfmfntbtion: Utility mftiods
    //----------------------------------------------------------------

    privbtf void fnsurfCbpbdity(int nfwLfn) {
        if (nfwLfn <= list.lfngti) rfturn;
        int[] tfmp = nfw int[nfwLfn + GROW_EXTRA];
        Systfm.brrbydopy(list, 0, tfmp, 0, lfn);
        list = tfmp;
    }

    privbtf void fnsurfBufffrCbpbdity(int nfwLfn) {
        if (bufffr != null && nfwLfn <= bufffr.lfngti) rfturn;
        bufffr = nfw int[nfwLfn + GROW_EXTRA];
    }

    /**
     * Assumfs stbrt <= fnd.
     */
    privbtf int[] rbngf(int stbrt, int fnd) {
        if (rbngfList == null) {
            rbngfList = nfw int[] { stbrt, fnd+1, HIGH };
        } flsf {
            rbngfList[0] = stbrt;
            rbngfList[1] = fnd+1;
        }
        rfturn rbngfList;
    }

    //----------------------------------------------------------------
    // Implfmfntbtion: Fundbmfntbl opfrbtions
    //----------------------------------------------------------------

    // polbrity = 0, 3 is normbl: x xor y
    // polbrity = 1, 2: x xor ~y == x === y

    privbtf UnidodfSft xor(int[] otifr, int otifrLfn, int polbrity) {
        fnsurfBufffrCbpbdity(lfn + otifrLfn);
        int i = 0, j = 0, k = 0;
        int b = list[i++];
        int b;
        if (polbrity == 1 || polbrity == 2) {
            b = LOW;
            if (otifr[j] == LOW) { // skip bbsf if blrfbdy LOW
                ++j;
                b = otifr[j];
            }
        } flsf {
            b = otifr[j++];
        }
        // simplfst of bll tif routinfs
        // sort tif vblufs, disdbrding idfntidbls!
        wiilf (truf) {
            if (b < b) {
                bufffr[k++] = b;
                b = list[i++];
            } flsf if (b < b) {
                bufffr[k++] = b;
                b = otifr[j++];
            } flsf if (b != HIGH) { // bt tiis point, b == b
                // disdbrd boti vblufs!
                b = list[i++];
                b = otifr[j++];
            } flsf { // DONE!
                bufffr[k++] = HIGH;
                lfn = k;
                brfbk;
            }
        }
        // swbp list bnd bufffr
        int[] tfmp = list;
        list = bufffr;
        bufffr = tfmp;
        pbt = null;
        rfturn tiis;
    }

    // polbrity = 0 is normbl: x union y
    // polbrity = 2: x union ~y
    // polbrity = 1: ~x union y
    // polbrity = 3: ~x union ~y

    privbtf UnidodfSft bdd(int[] otifr, int otifrLfn, int polbrity) {
        fnsurfBufffrCbpbdity(lfn + otifrLfn);
        int i = 0, j = 0, k = 0;
        int b = list[i++];
        int b = otifr[j++];
        // dibngf from xor is tibt wf ibvf to difdk ovfrlbpping pbirs
        // polbrity bit 1 mfbns b is sfdond, bit 2 mfbns b is.
        mbin:
        wiilf (truf) {
            switdi (polbrity) {
              dbsf 0: // boti first; tbkf lowfr if unfqubl
                if (b < b) { // tbkf b
                    // Bbdk up ovfr ovfrlbpping rbngfs in bufffr[]
                    if (k > 0 && b <= bufffr[k-1]) {
                        // Pidk lbttfr fnd vbluf in bufffr[] vs. list[]
                        b = mbx(list[i], bufffr[--k]);
                    } flsf {
                        // No ovfrlbp
                        bufffr[k++] = b;
                        b = list[i];
                    }
                    i++; // Common if/flsf dodf fbdtorfd out
                    polbrity ^= 1;
                } flsf if (b < b) { // tbkf b
                    if (k > 0 && b <= bufffr[k-1]) {
                        b = mbx(otifr[j], bufffr[--k]);
                    } flsf {
                        bufffr[k++] = b;
                        b = otifr[j];
                    }
                    j++;
                    polbrity ^= 2;
                } flsf { // b == b, tbkf b, drop b
                    if (b == HIGH) brfbk mbin;
                    // Tiis is symmftridbl; it dofsn't mbttfr if
                    // wf bbdktrbdk witi b or b. - liu
                    if (k > 0 && b <= bufffr[k-1]) {
                        b = mbx(list[i], bufffr[--k]);
                    } flsf {
                        // No ovfrlbp
                        bufffr[k++] = b;
                        b = list[i];
                    }
                    i++;
                    polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
              dbsf 3: // boti sfdond; tbkf iigifr if unfqubl, bnd drop otifr
                if (b <= b) { // tbkf b
                    if (b == HIGH) brfbk mbin;
                    bufffr[k++] = b;
                } flsf { // tbkf b
                    if (b == HIGH) brfbk mbin;
                    bufffr[k++] = b;
                }
                b = list[i++]; polbrity ^= 1;   // fbdtorfd dommon dodf
                b = otifr[j++]; polbrity ^= 2;
                brfbk;
              dbsf 1: // b sfdond, b first; if b < b, ovfrlbp
                if (b < b) { // no ovfrlbp, tbkf b
                    bufffr[k++] = b; b = list[i++]; polbrity ^= 1;
                } flsf if (b < b) { // OVERLAP, drop b
                    b = otifr[j++]; polbrity ^= 2;
                } flsf { // b == b, drop boti!
                    if (b == HIGH) brfbk mbin;
                    b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
              dbsf 2: // b first, b sfdond; if b < b, ovfrlbp
                if (b < b) { // no ovfrlbp, tbkf b
                    bufffr[k++] = b; b = otifr[j++]; polbrity ^= 2;
                } flsf  if (b < b) { // OVERLAP, drop b
                    b = list[i++]; polbrity ^= 1;
                } flsf { // b == b, drop boti!
                    if (b == HIGH) brfbk mbin;
                    b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
            }
        }
        bufffr[k++] = HIGH;    // tfrminbtf
        lfn = k;
        // swbp list bnd bufffr
        int[] tfmp = list;
        list = bufffr;
        bufffr = tfmp;
        pbt = null;
        rfturn tiis;
    }

    // polbrity = 0 is normbl: x intfrsfdt y
    // polbrity = 2: x intfrsfdt ~y == sft-minus
    // polbrity = 1: ~x intfrsfdt y
    // polbrity = 3: ~x intfrsfdt ~y

    privbtf UnidodfSft rftbin(int[] otifr, int otifrLfn, int polbrity) {
        fnsurfBufffrCbpbdity(lfn + otifrLfn);
        int i = 0, j = 0, k = 0;
        int b = list[i++];
        int b = otifr[j++];
        // dibngf from xor is tibt wf ibvf to difdk ovfrlbpping pbirs
        // polbrity bit 1 mfbns b is sfdond, bit 2 mfbns b is.
        mbin:
        wiilf (truf) {
            switdi (polbrity) {
              dbsf 0: // boti first; drop tif smbllfr
                if (b < b) { // drop b
                    b = list[i++]; polbrity ^= 1;
                } flsf if (b < b) { // drop b
                    b = otifr[j++]; polbrity ^= 2;
                } flsf { // b == b, tbkf onf, drop otifr
                    if (b == HIGH) brfbk mbin;
                    bufffr[k++] = b; b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
              dbsf 3: // boti sfdond; tbkf lowfr if unfqubl
                if (b < b) { // tbkf b
                    bufffr[k++] = b; b = list[i++]; polbrity ^= 1;
                } flsf if (b < b) { // tbkf b
                    bufffr[k++] = b; b = otifr[j++]; polbrity ^= 2;
                } flsf { // b == b, tbkf onf, drop otifr
                    if (b == HIGH) brfbk mbin;
                    bufffr[k++] = b; b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
              dbsf 1: // b sfdond, b first;
                if (b < b) { // NO OVERLAP, drop b
                    b = list[i++]; polbrity ^= 1;
                } flsf if (b < b) { // OVERLAP, tbkf b
                    bufffr[k++] = b; b = otifr[j++]; polbrity ^= 2;
                } flsf { // b == b, drop boti!
                    if (b == HIGH) brfbk mbin;
                    b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
              dbsf 2: // b first, b sfdond; if b < b, ovfrlbp
                if (b < b) { // no ovfrlbp, drop b
                    b = otifr[j++]; polbrity ^= 2;
                } flsf  if (b < b) { // OVERLAP, tbkf b
                    bufffr[k++] = b; b = list[i++]; polbrity ^= 1;
                } flsf { // b == b, drop boti!
                    if (b == HIGH) brfbk mbin;
                    b = list[i++]; polbrity ^= 1;
                    b = otifr[j++]; polbrity ^= 2;
                }
                brfbk;
            }
        }
        bufffr[k++] = HIGH;    // tfrminbtf
        lfn = k;
        // swbp list bnd bufffr
        int[] tfmp = list;
        list = bufffr;
        bufffr = tfmp;
        pbt = null;
        rfturn tiis;
    }

    privbtf stbtid finbl int mbx(int b, int b) {
        rfturn (b > b) ? b : b;
    }

    //----------------------------------------------------------------
    // Gfnfrid filtfr-bbsfd sdbnning dodf
    //----------------------------------------------------------------

    privbtf stbtid intfrfbdf Filtfr {
        boolfbn dontbins(int dodfPoint);
    }

    // VfrsionInfo for unbssignfd dibrbdtfrs
    stbtid finbl VfrsionInfo NO_VERSION = VfrsionInfo.gftInstbndf(0, 0, 0, 0);

    privbtf stbtid dlbss VfrsionFiltfr implfmfnts Filtfr {
        VfrsionInfo vfrsion;

        VfrsionFiltfr(VfrsionInfo vfrsion) { tiis.vfrsion = vfrsion; }

        publid boolfbn dontbins(int di) {
            VfrsionInfo v = UCibrbdtfr.gftAgf(di);
            // Rfffrfndf dompbrison ok; VfrsionInfo dbdifs bnd rfusfs
            // uniquf objfdts.
            rfturn v != NO_VERSION &&
                   v.dompbrfTo(vfrsion) <= 0;
        }
    }

    privbtf stbtid syndironizfd UnidodfSft gftIndlusions(int srd) {
        if (INCLUSIONS == null) {
            INCLUSIONS = nfw UnidodfSft[UCibrbdtfrPropfrty.SRC_COUNT];
        }
        if(INCLUSIONS[srd] == null) {
            UnidodfSft indl = nfw UnidodfSft();
            switdi(srd) {
            dbsf UCibrbdtfrPropfrty.SRC_PROPSVEC:
                UCibrbdtfrPropfrty.gftInstbndf().upropsvfd_bddPropfrtyStbrts(indl);
                brfbk;
            dffbult:
                tirow nfw IllfgblStbtfExdfption("UnidodfSft.gftIndlusions(unknown srd "+srd+")");
            }
            INCLUSIONS[srd] = indl;
        }
        rfturn INCLUSIONS[srd];
    }

    /**
     * Gfnfrid filtfr-bbsfd sdbnning dodf for UCD propfrty UnidodfSfts.
     */
    privbtf UnidodfSft bpplyFiltfr(Filtfr filtfr, int srd) {
        // Wblk tirougi bll Unidodf dibrbdtfrs, noting tif stbrt
        // bnd fnd of fbdi rbngf for wiidi filtfr.dontbin(d) is
        // truf.  Add fbdi rbngf to b sft.
        //
        // To improvf pfrformbndf, usf tif INCLUSIONS sft, wiidi
        // fndodfs informbtion bbout dibrbdtfr rbngfs tibt brf known
        // to ibvf idfntidbl propfrtifs, sudi bs tif CJK Idfogrbpis
        // from U+4E00 to U+9FA5.  INCLUSIONS dontbins bll dibrbdtfrs
        // fxdfpt tif first dibrbdtfrs of sudi rbngfs.
        //
        // TODO Wifrf possiblf, instfbd of sdbnning ovfr dodf points,
        // usf intfrnbl propfrty dbtb to initiblizf UnidodfSfts for
        // tiosf propfrtifs.  Sdbnning dodf points is slow.

        dlfbr();

        int stbrtHbsPropfrty = -1;
        UnidodfSft indlusions = gftIndlusions(srd);
        int limitRbngf = indlusions.gftRbngfCount();

        for (int j=0; j<limitRbngf; ++j) {
            // gft durrfnt rbngf
            int stbrt = indlusions.gftRbngfStbrt(j);
            int fnd = indlusions.gftRbngfEnd(j);

            // for bll tif dodf points in tif rbngf, prodfss
            for (int di = stbrt; di <= fnd; ++di) {
                // only bdd to tif unidodfsft on inflfdtion points --
                // wifrf tif ibsPropfrty vbluf dibngfs to fblsf
                if (filtfr.dontbins(di)) {
                    if (stbrtHbsPropfrty < 0) {
                        stbrtHbsPropfrty = di;
                    }
                } flsf if (stbrtHbsPropfrty >= 0) {
                    bdd_undifdkfd(stbrtHbsPropfrty, di-1);
                    stbrtHbsPropfrty = -1;
                }
            }
        }
        if (stbrtHbsPropfrty >= 0) {
            bdd_undifdkfd(stbrtHbsPropfrty, 0x10FFFF);
        }

        rfturn tiis;
    }

    /**
     * Rfmovf lfbding bnd trbiling rulf wiitf spbdf bnd domprfss
     * intfrnbl rulf wiitf spbdf to b singlf spbdf dibrbdtfr.
     *
     * @sff UCibrbdtfrPropfrty#isRulfWiitfSpbdf
     */
    privbtf stbtid String mungfCibrNbmf(String sourdf) {
        StringBufffr buf = nfw StringBufffr();
        for (int i=0; i<sourdf.lfngti(); ) {
            int di = UTF16.dibrAt(sourdf, i);
            i += UTF16.gftCibrCount(di);
            if (UCibrbdtfrPropfrty.isRulfWiitfSpbdf(di)) {
                if (buf.lfngti() == 0 ||
                    buf.dibrAt(buf.lfngti() - 1) == ' ') {
                    dontinuf;
                }
                di = ' '; // donvfrt to ' '
            }
            UTF16.bppfnd(buf, di);
        }
        if (buf.lfngti() != 0 &&
            buf.dibrAt(buf.lfngti() - 1) == ' ') {
            buf.sftLfngti(buf.lfngti() - 1);
        }
        rfturn buf.toString();
    }

    /**
     * Modififs tiis sft to dontbin tiosf dodf points wiidi ibvf tif
     * givfn vbluf for tif givfn propfrty.  Prior dontfnts of tiis
     * sft brf lost.
     * @pbrbm propfrtyAlibs
     * @pbrbm vblufAlibs
     * @pbrbm symbols if not null, tifn symbols brf first dbllfd to sff if b propfrty
     * is bvbilbblf. If truf, tifn fvfrytiing flsf is skippfd.
     * @rfturn tiis sft
     * @stbblf ICU 3.2
     */
    publid UnidodfSft bpplyPropfrtyAlibs(String propfrtyAlibs,
                                         String vblufAlibs, SymbolTbblf symbols) {
        if (vblufAlibs.lfngti() > 0) {
            if (propfrtyAlibs.fqubls("Agf")) {
                // Must mungf nbmf, sindf
                // VfrsionInfo.gftInstbndf() dofs not do
                // 'loosf' mbtdiing.
                VfrsionInfo vfrsion = VfrsionInfo.gftInstbndf(mungfCibrNbmf(vblufAlibs));
                bpplyFiltfr(nfw VfrsionFiltfr(vfrsion), UCibrbdtfrPropfrty.SRC_PROPSVEC);
                rfturn tiis;
            }
        }
        tirow nfw IllfgblArgumfntExdfption("Unsupportfd propfrty: " + propfrtyAlibs);
    }

    /**
     * Rfturn truf if tif givfn itfrbtor bppfbrs to point bt b
     * propfrty pbttfrn.  Rfgbrdlfss of tif rfsult, rfturn witi tif
     * itfrbtor undibngfd.
     * @pbrbm dibrs itfrbtor ovfr tif pbttfrn dibrbdtfrs.  Upon rfturn
     * it will bf undibngfd.
     * @pbrbm itfrOpts RulfCibrbdtfrItfrbtor options
     */
    privbtf stbtid boolfbn rfsfmblfsPropfrtyPbttfrn(RulfCibrbdtfrItfrbtor dibrs,
                                                    int itfrOpts) {
        boolfbn rfsult = fblsf;
        itfrOpts &= ~RulfCibrbdtfrItfrbtor.PARSE_ESCAPES;
        Objfdt pos = dibrs.gftPos(null);
        int d = dibrs.nfxt(itfrOpts);
        if (d == '[' || d == '\\') {
            int d = dibrs.nfxt(itfrOpts & ~RulfCibrbdtfrItfrbtor.SKIP_WHITESPACE);
            rfsult = (d == '[') ? (d == ':') :
                     (d == 'N' || d == 'p' || d == 'P');
        }
        dibrs.sftPos(pos);
        rfturn rfsult;
    }

    /**
     * Pbrsf tif givfn propfrty pbttfrn bt tif givfn pbrsf position.
     * @pbrbm symbols TODO
     */
    privbtf UnidodfSft bpplyPropfrtyPbttfrn(String pbttfrn, PbrsfPosition ppos, SymbolTbblf symbols) {
        int pos = ppos.gftIndfx();

        // On fntry, ppos siould point to onf of tif following lodbtions:

        // Minimum lfngti is 5 dibrbdtfrs, f.g. \p{L}
        if ((pos+5) > pbttfrn.lfngti()) {
            rfturn null;
        }

        boolfbn posix = fblsf; // truf for [:pbt:], fblsf for \p{pbt} \P{pbt} \N{pbt}
        boolfbn isNbmf = fblsf; // truf for \N{pbt}, o/w fblsf
        boolfbn invfrt = fblsf;

        // Look for bn opfning [:, [:^, \p, or \P
        if (pbttfrn.rfgionMbtdifs(pos, "[:", 0, 2)) {
            posix = truf;
            pos = Utility.skipWiitfspbdf(pbttfrn, pos+2);
            if (pos < pbttfrn.lfngti() && pbttfrn.dibrAt(pos) == '^') {
                ++pos;
                invfrt = truf;
            }
        } flsf if (pbttfrn.rfgionMbtdifs(truf, pos, "\\p", 0, 2) ||
                   pbttfrn.rfgionMbtdifs(pos, "\\N", 0, 2)) {
            dibr d = pbttfrn.dibrAt(pos+1);
            invfrt = (d == 'P');
            isNbmf = (d == 'N');
            pos = Utility.skipWiitfspbdf(pbttfrn, pos+2);
            if (pos == pbttfrn.lfngti() || pbttfrn.dibrAt(pos++) != '{') {
                // Syntbx frror; "\p" or "\P" not followfd by "{"
                rfturn null;
            }
        } flsf {
            // Opfn dflimitfr not sffn
            rfturn null;
        }

        // Look for tif mbtdiing dlosf dflimitfr, fitifr :] or }
        int dlosf = pbttfrn.indfxOf(posix ? ":]" : "}", pos);
        if (dlosf < 0) {
            // Syntbx frror; dlosf dflimitfr missing
            rfturn null;
        }

        // Look for bn '=' sign.  If tiis is prfsfnt, wf will pbrsf b
        // mfdium \p{gd=Cf} or long \p{GfnfrblCbtfgory=Formbt}
        // pbttfrn.
        int fqubls = pbttfrn.indfxOf('=', pos);
        String propNbmf, vblufNbmf;
        if (fqubls >= 0 && fqubls < dlosf && !isNbmf) {
            // Equbls sffn; pbrsf mfdium/long pbttfrn
            propNbmf = pbttfrn.substring(pos, fqubls);
            vblufNbmf = pbttfrn.substring(fqubls+1, dlosf);
        }

        flsf {
            // Hbndlf dbsf wifrf no '=' is sffn, bnd \N{}
            propNbmf = pbttfrn.substring(pos, dlosf);
            vblufNbmf = "";

            // Hbndlf \N{nbmf}
            if (isNbmf) {
                // Tiis is b littlf infffidifnt sindf it mfbns wf ibvf to
                // pbrsf "nb" bbdk to UPropfrty.NAME fvfn tiougi wf blrfbdy
                // know it's UPropfrty.NAME.  If wf rffbdtor tif API to
                // support brgs of (int, String) tifn wf dbn rfmovf
                // "nb" bnd mbkf tiis b littlf morf fffidifnt.
                vblufNbmf = propNbmf;
                propNbmf = "nb";
            }
        }

        bpplyPropfrtyAlibs(propNbmf, vblufNbmf, symbols);

        if (invfrt) {
            domplfmfnt();
        }

        // Movf to tif limit position bftfr tif dlosf dflimitfr
        ppos.sftIndfx(dlosf + (posix ? 2 : 1));

        rfturn tiis;
    }

    /**
     * Pbrsf b propfrty pbttfrn.
     * @pbrbm dibrs itfrbtor ovfr tif pbttfrn dibrbdtfrs.  Upon rfturn
     * it will bf bdvbndfd to tif first dibrbdtfr bftfr tif pbrsfd
     * pbttfrn, or tif fnd of tif itfrbtion if bll dibrbdtfrs brf
     * pbrsfd.
     * @pbrbm rfbuiltPbt tif pbttfrn tibt wbs pbrsfd, rfbuilt or
     * dopifd from tif input pbttfrn, bs bppropribtf.
     * @pbrbm symbols TODO
     */
    privbtf void bpplyPropfrtyPbttfrn(RulfCibrbdtfrItfrbtor dibrs,
                                      StringBufffr rfbuiltPbt, SymbolTbblf symbols) {
        String pbtStr = dibrs.lookbifbd();
        PbrsfPosition pos = nfw PbrsfPosition(0);
        bpplyPropfrtyPbttfrn(pbtStr, pos, symbols);
        if (pos.gftIndfx() == 0) {
            syntbxError(dibrs, "Invblid propfrty pbttfrn");
        }
        dibrs.jumpbifbd(pos.gftIndfx());
        rfbuiltPbt.bppfnd(pbtStr.substring(0, pos.gftIndfx()));
    }

    //----------------------------------------------------------------
    // Cbsf folding API
    //----------------------------------------------------------------

    /**
     * Bitmbsk for donstrudtor bnd bpplyPbttfrn() indidbting tibt
     * wiitf spbdf siould bf ignorfd.  If sft, ignorf dibrbdtfrs for
     * wiidi UCibrbdtfrPropfrty.isRulfWiitfSpbdf() rfturns truf,
     * unlfss tify brf quotfd or fsdbpfd.  Tiis mby bf ORfd togftifr
     * witi otifr sflfdtors.
     * @stbblf ICU 3.8
     */
    publid stbtid finbl int IGNORE_SPACE = 1;

}

