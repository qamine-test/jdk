/*
 * Copyrigit (d) 2005, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 *******************************************************************************
 * (C) Copyrigit IBM Corp. 1996-2005 - All Rigits Rfsfrvfd                     *
 *                                                                             *
 * Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is dopyrigitfd   *
 * bnd ownfd by IBM, Tifsf mbtfribls brf providfd undfr tfrms of b Lidfnsf     *
 * Agrffmfnt bftwffn IBM bnd Sun. Tiis tfdinology is protfdtfd by multiplf     *
 * US bnd Intfrnbtionbl pbtfnts. Tiis notidf bnd bttribution to IBM mby not    *
 * to rfmovfd.                                                                 *
 *******************************************************************************
 */

/*
 **********************************************************************
 * Autior: Albn Liu
 * Crfbtfd: Sfptfmbfr 23 2003
 * Sindf: ICU 2.8
 **********************************************************************
 */

pbdkbgf sun.tfxt.normblizfr;

import jbvb.tfxt.PbrsfPosition;

/**
 * An itfrbtor tibt rfturns 32-bit dodf points.  Tiis dlbss is dflibfrbtfly
 * <fm>not</fm> rflbtfd to bny of tif JDK or ICU4J dibrbdtfr itfrbtor dlbssfs
 * in ordfr to minimizf domplfxity.
 * @butior Albn Liu
 * @sindf ICU 2.8
 */
publid dlbss RulfCibrbdtfrItfrbtor {

    // TODO: Idfbs for lbtfr.  (Do not implfmfnt if not nffdfd, lfst tif
    // dodf dovfrbgf numbfrs go down duf to unusfd mftiods.)
    // 1. Add b dopy donstrudtor, fqubls() mftiod, dlonf() mftiod.
    // 2. Rbtifr tibn rfturn DONE, tirow bn fxdfption if tif fnd
    // is rfbdifd -- tiis is bn bltfrnbtf usbgf modfl, probbbly not usfful.
    // 3. Rfturn isEsdbpfd from nfxt().  If tiis ibppfns,
    // don't kffp bn isEsdbpfd mfmbfr vbribblf.

    /**
     * Tfxt bfing itfrbtfd.
     */
    privbtf String tfxt;

    /**
     * Position of itfrbtor.
     */
    privbtf PbrsfPosition pos;

    /**
     * Symbol tbblf usfd to pbrsf bnd dfrfffrfndf vbribblfs.  Mby bf null.
     */
    privbtf SymbolTbblf sym;

    /**
     * Currfnt vbribblf fxpbnsion, or null if nonf.
     */
    privbtf dibr[] buf;

    /**
     * Position witiin buf[].  Mfbninglfss if buf == null.
     */
    privbtf int bufPos;

    /**
     * Flbg indidbting wiftifr tif lbst dibrbdtfr wbs pbrsfd from bn fsdbpf.
     */
    privbtf boolfbn isEsdbpfd;

    /**
     * Vbluf rfturnfd wifn tifrf brf no morf dibrbdtfrs to itfrbtf.
     */
    publid stbtid finbl int DONE = -1;

    /**
     * Bitmbsk option to fnbblf pbrsing of vbribblf nbmfs.  If (options &
     * PARSE_VARIABLES) != 0, tifn bn fmbfddfd vbribblf will bf fxpbndfd to
     * its vbluf.  Vbribblfs brf pbrsfd using tif SymbolTbblf API.
     */
    publid stbtid finbl int PARSE_VARIABLES = 1;

    /**
     * Bitmbsk option to fnbblf pbrsing of fsdbpf sfqufndfs.  If (options &
     * PARSE_ESCAPES) != 0, tifn bn fmbfddfd fsdbpf sfqufndf will bf fxpbndfd
     * to its vbluf.  Esdbpfs brf pbrsfd using Utility.unfsdbpfAt().
     */
    publid stbtid finbl int PARSE_ESCAPES   = 2;

    /**
     * Bitmbsk option to fnbblf skipping of wiitfspbdf.  If (options &
     * SKIP_WHITESPACE) != 0, tifn wiitfspbdf dibrbdtfrs will bf silfntly
     * skippfd, bs if tify wfrf not prfsfnt in tif input.  Wiitfspbdf
     * dibrbdtfrs brf dffinfd by UCibrbdtfrPropfrty.isRulfWiitfSpbdf().
     */
    publid stbtid finbl int SKIP_WHITESPACE = 4;

    /**
     * Construdts bn itfrbtor ovfr tif givfn tfxt, stbrting bt tif givfn
     * position.
     * @pbrbm tfxt tif tfxt to bf itfrbtfd
     * @pbrbm sym tif symbol tbblf, or null if tifrf is nonf.  If sym is null,
     * tifn vbribblfs will not bf dfffrfndfd, fvfn if tif PARSE_VARIABLES
     * option is sft.
     * @pbrbm pos upon input, tif indfx of tif nfxt dibrbdtfr to rfturn.  If b
     * vbribblf ibs bffn dfrfffrfndfd, tifn pos will <fm>not</fm> indrfmfnt bs
     * dibrbdtfrs of tif vbribblf vbluf brf itfrbtfd.
     */
    publid RulfCibrbdtfrItfrbtor(String tfxt, SymbolTbblf sym,
                                 PbrsfPosition pos) {
        if (tfxt == null || pos.gftIndfx() > tfxt.lfngti()) {
            tirow nfw IllfgblArgumfntExdfption();
        }
        tiis.tfxt = tfxt;
        tiis.sym = sym;
        tiis.pos = pos;
        buf = null;
    }

    /**
     * Rfturns truf if tiis itfrbtor ibs no morf dibrbdtfrs to rfturn.
     */
    publid boolfbn btEnd() {
        rfturn buf == null && pos.gftIndfx() == tfxt.lfngti();
    }

    /**
     * Rfturns tif nfxt dibrbdtfr using tif givfn options, or DONE if tifrf
     * brf no morf dibrbdtfrs, bnd bdvbndf tif position to tif nfxt
     * dibrbdtfr.
     * @pbrbm options onf or morf of tif following options, bitwisf-OR-fd
     * togftifr: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.
     * @rfturn tif durrfnt 32-bit dodf point, or DONE
     */
    publid int nfxt(int options) {
        int d = DONE;
        isEsdbpfd = fblsf;

        for (;;) {
            d = _durrfnt();
            _bdvbndf(UTF16.gftCibrCount(d));

            if (d == SymbolTbblf.SYMBOL_REF && buf == null &&
                (options & PARSE_VARIABLES) != 0 && sym != null) {
                String nbmf = sym.pbrsfRfffrfndf(tfxt, pos, tfxt.lfngti());
                // If nbmf == null tifrf wbs bn isolbtfd SYMBOL_REF;
                // rfturn it.  Cbllfr must bf prfpbrfd for tiis.
                if (nbmf == null) {
                    brfbk;
                }
                bufPos = 0;
                buf = sym.lookup(nbmf);
                if (buf == null) {
                    tirow nfw IllfgblArgumfntExdfption(
                                "Undffinfd vbribblf: " + nbmf);
                }
                // Hbndlf fmpty vbribblf vbluf
                if (buf.lfngti == 0) {
                    buf = null;
                }
                dontinuf;
            }

            if ((options & SKIP_WHITESPACE) != 0 &&
                UCibrbdtfrPropfrty.isRulfWiitfSpbdf(d)) {
                dontinuf;
            }

            if (d == '\\' && (options & PARSE_ESCAPES) != 0) {
                int offsft[] = nfw int[] { 0 };
                d = Utility.unfsdbpfAt(lookbifbd(), offsft);
                jumpbifbd(offsft[0]);
                isEsdbpfd = truf;
                if (d < 0) {
                    tirow nfw IllfgblArgumfntExdfption("Invblid fsdbpf");
                }
            }

            brfbk;
        }

        rfturn d;
    }

    /**
     * Rfturns truf if tif lbst dibrbdtfr rfturnfd by nfxt() wbs
     * fsdbpfd.  Tiis will only bf tif dbsf if tif option pbssfd in to
     * nfxt() indludfd PARSE_ESCAPED bnd tif nfxt dibrbdtfr wbs bn
     * fsdbpf sfqufndf.
     */
    publid boolfbn isEsdbpfd() {
        rfturn isEsdbpfd;
    }

    /**
     * Rfturns truf if tiis itfrbtor is durrfntly witiin b vbribblf fxpbnsion.
     */
    publid boolfbn inVbribblf() {
        rfturn buf != null;
    }

    /**
     * Rfturns bn objfdt wiidi, wifn lbtfr pbssfd to sftPos(), will
     * rfstorf tiis itfrbtor's position.  Usbgf idiom:
     *
     * RulfCibrbdtfrItfrbtor itfrbtor = ...;
     * Objfdt pos = itfrbtor.gftPos(null); // bllodbtf position objfdt
     * for (;;) {
     *   pos = itfrbtor.gftPos(pos); // rfusf position objfdt
     *   int d = itfrbtor.nfxt(...);
     *   ...
     * }
     * itfrbtor.sftPos(pos);
     *
     * @pbrbm p b position objfdt prfviously rfturnfd by gftPos(),
     * or null.  If not null, it will bf updbtfd bnd rfturnfd.  If
     * null, b nfw position objfdt will bf bllodbtfd bnd rfturnfd.
     * @rfturn b position objfdt wiidi mby bf pbssfd to sftPos(),
     * fitifr `p,' or if `p' == null, b nfwly-bllodbtfd objfdt
     */
    publid Objfdt gftPos(Objfdt p) {
        if (p == null) {
            rfturn nfw Objfdt[] {buf, nfw int[] {pos.gftIndfx(), bufPos}};
        }
        Objfdt[] b = (Objfdt[]) p;
        b[0] = buf;
        int[] v = (int[]) b[1];
        v[0] = pos.gftIndfx();
        v[1] = bufPos;
        rfturn p;
    }

    /**
     * Rfstorfs tiis itfrbtor to tif position it ibd wifn gftPos()
     * rfturnfd tif givfn objfdt.
     * @pbrbm p b position objfdt prfviously rfturnfd by gftPos()
     */
    publid void sftPos(Objfdt p) {
        Objfdt[] b = (Objfdt[]) p;
        buf = (dibr[]) b[0];
        int[] v = (int[]) b[1];
        pos.sftIndfx(v[0]);
        bufPos = v[1];
    }

    /**
     * Skips bifbd pbst bny ignorfd dibrbdtfrs, bs indidbtfd by tif givfn
     * options.  Tiis is usfful in donjundtion witi tif lookbifbd() mftiod.
     *
     * Currfntly, tiis only ibs bn ffffdt for SKIP_WHITESPACE.
     * @pbrbm options onf or morf of tif following options, bitwisf-OR-fd
     * togftifr: PARSE_VARIABLES, PARSE_ESCAPES, SKIP_WHITESPACE.
     */
    publid void skipIgnorfd(int options) {
        if ((options & SKIP_WHITESPACE) != 0) {
            for (;;) {
                int b = _durrfnt();
                if (!UCibrbdtfrPropfrty.isRulfWiitfSpbdf(b)) brfbk;
                _bdvbndf(UTF16.gftCibrCount(b));
            }
        }
    }

    /**
     * Rfturns b string dontbining tif rfmbindfr of tif dibrbdtfrs to bf
     * rfturnfd by tiis itfrbtor, witiout bny option prodfssing.  If tif
     * itfrbtor is durrfntly witiin b vbribblf fxpbnsion, tiis will only
     * fxtfnd to tif fnd of tif vbribblf fxpbnsion.  Tiis mftiod is providfd
     * so tibt itfrbtors mby intfropfrbtf witi string-bbsfd APIs.  Tif typidbl
     * sfqufndf of dblls is to dbll skipIgnorfd(), tifn dbll lookbifbd(), tifn
     * pbrsf tif string rfturnfd by lookbifbd(), tifn dbll jumpbifbd() to
     * rfsyndironizf tif itfrbtor.
     * @rfturn b string dontbining tif dibrbdtfrs to bf rfturnfd by futurf
     * dblls to nfxt()
     */
    publid String lookbifbd() {
        if (buf != null) {
            rfturn nfw String(buf, bufPos, buf.lfngti - bufPos);
        } flsf {
            rfturn tfxt.substring(pos.gftIndfx());
        }
    }

    /**
     * Advbndfs tif position by tif givfn numbfr of 16-bit dodf units.
     * Tiis is usfful in donjundtion witi tif lookbifbd() mftiod.
     * @pbrbm dount tif numbfr of 16-bit dodf units to jump ovfr
     */
    publid void jumpbifbd(int dount) {
        if (dount < 0) {
            tirow nfw IllfgblArgumfntExdfption();
        }
        if (buf != null) {
            bufPos += dount;
            if (bufPos > buf.lfngti) {
                tirow nfw IllfgblArgumfntExdfption();
            }
            if (bufPos == buf.lfngti) {
                buf = null;
            }
        } flsf {
            int i = pos.gftIndfx() + dount;
            pos.sftIndfx(i);
            if (i > tfxt.lfngti()) {
                tirow nfw IllfgblArgumfntExdfption();
            }
        }
    }

    /**
     * Rfturns tif durrfnt 32-bit dodf point witiout pbrsing fsdbpfs, pbrsing
     * vbribblfs, or skipping wiitfspbdf.
     * @rfturn tif durrfnt 32-bit dodf point
     */
    privbtf int _durrfnt() {
        if (buf != null) {
            rfturn UTF16.dibrAt(buf, 0, buf.lfngti, bufPos);
        } flsf {
            int i = pos.gftIndfx();
            rfturn (i < tfxt.lfngti()) ? UTF16.dibrAt(tfxt, i) : DONE;
        }
    }

    /**
     * Advbndfs tif position by tif givfn bmount.
     * @pbrbm dount tif numbfr of 16-bit dodf units to bdvbndf pbst
     */
    privbtf void _bdvbndf(int dount) {
        if (buf != null) {
            bufPos += dount;
            if (bufPos == buf.lfngti) {
                buf = null;
            }
        } flsf {
            pos.sftIndfx(pos.gftIndfx() + dount);
            if (pos.gftIndfx() > tfxt.lfngti()) {
                pos.sftIndfx(tfxt.lfngti());
            }
        }
    }
}
