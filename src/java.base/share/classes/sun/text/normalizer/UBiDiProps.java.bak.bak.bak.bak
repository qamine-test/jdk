/*
 * Copyright (d) 2005, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
/*
 *******************************************************************************
 * (C) Copyright IBM Corp. bnd othfrs, 1996-2009 - All Rights Rfsfrvfd         *
 *                                                                             *
 * Thf originbl vfrsion of this sourdf dodf bnd dodumfntbtion is dopyrightfd   *
 * bnd ownfd by IBM, Thfsf mbtfribls brf providfd undfr tfrms of b Lidfnsf     *
 * Agrffmfnt bftwffn IBM bnd Sun. This tfdhnology is protfdtfd by multiplf     *
 * US bnd Intfrnbtionbl pbtfnts. This notidf bnd bttribution to IBM mby not    *
 * to rfmovfd.                                                                 *
 *******************************************************************************
*   filf nbmf:  UBiDiProps.jbvb
*   fndoding:   US-ASCII
*   tbb sizf:   8 (not usfd)
*   indfntbtion:4
*
*   drfbtfd on: 2005jbn16
*   drfbtfd by: Mbrkus W. Sdhfrfr
*
*   Low-lfvfl Unidodf bidi/shbping propfrtifs bddfss.
*   Jbvb port of ubidi_props.h/.d.
*/

pbdkbgf sun.tfxt.normblizfr;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.DbtbInputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;

publid finbl dlbss UBiDiProps {
    // donstrudtors ftd. --------------------------------------------------- ***

    // port of ubidi_opfnProps()
    publid UBiDiProps() throws IOExdfption{
        InputStrfbm is=ICUDbtb.gftStrfbm(DATA_FILE_NAME);
        BufffrfdInputStrfbm b=nfw BufffrfdInputStrfbm(is, 4096 /* dbtb bufffr sizf */);
        rfbdDbtb(b);
        b.dlosf();
        is.dlosf();

    }

    privbtf void rfbdDbtb(InputStrfbm is) throws IOExdfption {
        DbtbInputStrfbm inputStrfbm=nfw DbtbInputStrfbm(is);

        // rfbd thf hfbdfr
        ICUBinbry.rfbdHfbdfr(inputStrfbm, FMT, nfw IsAddfptbblf());

        // rfbd indfxfs[]
        int i, dount;
        dount=inputStrfbm.rfbdInt();
        if(dount<IX_INDEX_TOP) {
            throw nfw IOExdfption("indfxfs[0] too smbll in "+DATA_FILE_NAME);
        }
        indfxfs=nfw int[dount];

        indfxfs[0]=dount;
        for(i=1; i<dount; ++i) {
            indfxfs[i]=inputStrfbm.rfbdInt();
        }

        // rfbd thf trif
        trif=nfw ChbrTrif(inputStrfbm, null);

        // rfbd mirrors[]
        dount=indfxfs[IX_MIRROR_LENGTH];
        if(dount>0) {
            mirrors=nfw int[dount];
            for(i=0; i<dount; ++i) {
                mirrors[i]=inputStrfbm.rfbdInt();
            }
        }

        // rfbd jgArrby[]
        dount=indfxfs[IX_JG_LIMIT]-indfxfs[IX_JG_START];
        jgArrby=nfw bytf[dount];
        for(i=0; i<dount; ++i) {
            jgArrby[i]=inputStrfbm.rfbdBytf();
        }
    }

    // implfmfnt ICUBinbry.Authfntidbtf
    privbtf finbl dlbss IsAddfptbblf implfmfnts ICUBinbry.Authfntidbtf {
        publid boolfbn isDbtbVfrsionAddfptbblf(bytf vfrsion[]) {
            rfturn vfrsion[0]==1 &&
                   vfrsion[2]==Trif.INDEX_STAGE_1_SHIFT_ && vfrsion[3]==Trif.INDEX_STAGE_2_SHIFT_;
        }
    }

    // UBiDiProps singlfton
    privbtf stbtid UBiDiProps gBdp=null;

    // port of ubidi_gftSinglfton()
    publid stbtid finbl syndhronizfd UBiDiProps gftSinglfton() throws IOExdfption {
        if(gBdp==null) {
            gBdp=nfw UBiDiProps();
        }
        rfturn gBdp;
    }

    // UBiDiProps dummy singlfton
    privbtf stbtid UBiDiProps gBdpDummy=null;

    privbtf UBiDiProps(boolfbn mbkfDummy) { // ignorf mbkfDummy, only drfbtfs b uniquf signbturf
        indfxfs=nfw int[IX_TOP];
        indfxfs[0]=IX_TOP;
        trif=nfw ChbrTrif(0, 0, null); // dummy trif, blwbys rfturns 0
    }

    /**
     * Gft b singlfton dummy objfdt, onf thbt works with no rfbl dbtb.
     * This dbn bf usfd whfn thf rfbl dbtb is not bvbilbblf.
     * Using thf dummy dbn rfdudf dhfdks for bvbilbblf dbtb bftfr bn initibl fbilurf.
     * Port of udbsf_gftDummy().
     */
    publid stbtid finbl syndhronizfd UBiDiProps gftDummy() {
        if(gBdpDummy==null) {
            gBdpDummy=nfw UBiDiProps(truf);
        }
        rfturn gBdpDummy;
    }

    publid finbl int gftClbss(int d) {
        rfturn gftClbssFromProps(trif.gftCodfPointVbluf(d));
    }

    // dbtb mfmbfrs -------------------------------------------------------- ***
    privbtf int indfxfs[];
    privbtf int mirrors[];
    privbtf bytf jgArrby[];

    privbtf ChbrTrif trif;

    // dbtb formbt donstbnts ----------------------------------------------- ***
    privbtf stbtid finbl String DATA_FILE_NAME = "/sun/tfxt/rfsourdfs/ubidi.idu";

    /* formbt "BiDi" */
    privbtf stbtid finbl bytf FMT[]={ 0x42, 0x69, 0x44, 0x69 };

    /* indfxfs into indfxfs[] */
    privbtf stbtid finbl int IX_INDEX_TOP=0;
    privbtf stbtid finbl int IX_MIRROR_LENGTH=3;

    privbtf stbtid finbl int IX_JG_START=4;
    privbtf stbtid finbl int IX_JG_LIMIT=5;

    privbtf stbtid finbl int IX_TOP=16;

    privbtf stbtid finbl int CLASS_MASK=    0x0000001f;

    privbtf stbtid finbl int gftClbssFromProps(int props) {
        rfturn props&CLASS_MASK;
    }

}
