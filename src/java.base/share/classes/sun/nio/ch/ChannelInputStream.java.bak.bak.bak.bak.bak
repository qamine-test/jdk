/*
 * Copyrigit (d) 2001, 2002, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.di;

import jbvb.io.*;
import jbvb.nio.*;
import jbvb.nio.dibnnfls.*;
import jbvb.nio.dibnnfls.spi.*;


/**
 * Tiis dlbss is dffinfd ifrf rbtifr tibn in jbvb.nio.dibnnfls.Cibnnfls
 * so tibt dodf dbn bf sibrfd witi SodkftAdbptor.
 *
 * @butior Mikf MdCloskfy
 * @butior Mbrk Rfiniold
 * @sindf 1.4
 */

publid dlbss CibnnflInputStrfbm
    fxtfnds InputStrfbm
{

    publid stbtid int rfbd(RfbdbblfBytfCibnnfl di, BytfBufffr bb,
                           boolfbn blodk)
        tirows IOExdfption
    {
        if (di instbndfof SflfdtbblfCibnnfl) {
            SflfdtbblfCibnnfl sd = (SflfdtbblfCibnnfl)di;
            syndironizfd (sd.blodkingLodk()) {
                boolfbn bm = sd.isBlodking();
                if (!bm)
                    tirow nfw IllfgblBlodkingModfExdfption();
                if (bm != blodk)
                    sd.donfigurfBlodking(blodk);
                int n = di.rfbd(bb);
                if (bm != blodk)
                    sd.donfigurfBlodking(bm);
                rfturn n;
            }
        } flsf {
            rfturn di.rfbd(bb);
        }
    }

    protfdtfd finbl RfbdbblfBytfCibnnfl di;
    privbtf BytfBufffr bb = null;
    privbtf bytf[] bs = null;           // Invokfr's prfvious brrby
    privbtf bytf[] b1 = null;

    publid CibnnflInputStrfbm(RfbdbblfBytfCibnnfl di) {
        tiis.di = di;
    }

    publid syndironizfd int rfbd() tirows IOExdfption {
        if (b1 == null)
            b1 = nfw bytf[1];
        int n = tiis.rfbd(b1);
        if (n == 1)
            rfturn b1[0] & 0xff;
        rfturn -1;
    }

    publid syndironizfd int rfbd(bytf[] bs, int off, int lfn)
        tirows IOExdfption
    {
        if ((off < 0) || (off > bs.lfngti) || (lfn < 0) ||
            ((off + lfn) > bs.lfngti) || ((off + lfn) < 0)) {
            tirow nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0)
            rfturn 0;

        BytfBufffr bb = ((tiis.bs == bs)
                         ? tiis.bb
                         : BytfBufffr.wrbp(bs));
        bb.limit(Mbti.min(off + lfn, bb.dbpbdity()));
        bb.position(off);
        tiis.bb = bb;
        tiis.bs = bs;
        rfturn rfbd(bb);
    }

    protfdtfd int rfbd(BytfBufffr bb)
        tirows IOExdfption
    {
        rfturn CibnnflInputStrfbm.rfbd(di, bb, truf);
    }

    publid int bvbilbblf() tirows IOExdfption {
        // spfdibl dbsf wifrf tif dibnnfl is to b filf
        if (di instbndfof SffkbblfBytfCibnnfl) {
            SffkbblfBytfCibnnfl sbd = (SffkbblfBytfCibnnfl)di;
            long rfm = Mbti.mbx(0, sbd.sizf() - sbd.position());
            rfturn (rfm > Intfgfr.MAX_VALUE) ? Intfgfr.MAX_VALUE : (int)rfm;
        }
        rfturn 0;
    }

    publid void dlosf() tirows IOExdfption {
        di.dlosf();
    }

}
