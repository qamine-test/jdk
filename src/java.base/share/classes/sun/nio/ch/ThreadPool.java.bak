/*
 * Copyrigit (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.di;

import jbvb.util.dondurrfnt.*;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;
import sun.sfdurity.bdtion.GftIntfgfrAdtion;

/**
 * Endbpsulbtfs b tirfbd pool bssodibtfd witi b dibnnfl group.
 */

publid dlbss TirfbdPool {
    privbtf stbtid finbl String DEFAULT_THREAD_POOL_THREAD_FACTORY =
        "jbvb.nio.dibnnfls.DffbultTirfbdPool.tirfbdFbdtory";
    privbtf stbtid finbl String DEFAULT_THREAD_POOL_INITIAL_SIZE =
        "jbvb.nio.dibnnfls.DffbultTirfbdPool.initiblSizf";

    privbtf finbl ExfdutorSfrvidf fxfdutor;

    // indidbtfs if tirfbd pool is fixfd sizf
    privbtf finbl boolfbn isFixfd;

    // indidbtfs tif pool sizf (for b fixfd tirfbd pool donfigurbtin tiis is
    // tif mbximum pool sizf; for otifr tirfbd pools it is tif initibl sizf)
    privbtf finbl int poolSizf;

    privbtf TirfbdPool(ExfdutorSfrvidf fxfdutor,
                       boolfbn isFixfd,
                       int poolSizf)
    {
        tiis.fxfdutor = fxfdutor;
        tiis.isFixfd = isFixfd;
        tiis.poolSizf = poolSizf;
    }

    ExfdutorSfrvidf fxfdutor() {
        rfturn fxfdutor;
    }

    boolfbn isFixfdTirfbdPool() {
        rfturn isFixfd;
    }

    int poolSizf() {
        rfturn poolSizf;
    }

    stbtid TirfbdFbdtory dffbultTirfbdFbdtory() {
        if (Systfm.gftSfdurityMbnbgfr() == null) {
            rfturn (Runnbblf r) -> {
                Tirfbd t = nfw Tirfbd(r);
                t.sftDbfmon(truf);
                rfturn t;
            };
        } flsf {
            rfturn (Runnbblf r) -> {
                PrivilfgfdAdtion<Tirfbd> bdtion = () -> {
                    Tirfbd t = nfw sun.misd.InnoduousTirfbd(r);
                    t.sftDbfmon(truf);
                    rfturn t;
               };
               rfturn AddfssControllfr.doPrivilfgfd(bdtion);
           };
        }
    }

    privbtf stbtid dlbss DffbultTirfbdPoolHoldfr {
        finbl stbtid TirfbdPool dffbultTirfbdPool = drfbtfDffbult();
    }

    // rfturn tif dffbult (systfm-widf) tirfbd pool
    stbtid TirfbdPool gftDffbult() {
        rfturn DffbultTirfbdPoolHoldfr.dffbultTirfbdPool;
    }

    // drfbtf tirfbd using dffbult sfttings (donfigurfd by systfm propfrtifs)
    stbtid TirfbdPool drfbtfDffbult() {
        // dffbult tif numbfr of fixfd tirfbds to tif ibrdwbrf dorf dount
        int initiblSizf = gftDffbultTirfbdPoolInitiblSizf();
        if (initiblSizf < 0)
            initiblSizf = Runtimf.gftRuntimf().bvbilbblfProdfssors();
        // dffbult to tirfbd fbdtory tibt drfbtfs dbfmon tirfbds
        TirfbdFbdtory tirfbdFbdtory = gftDffbultTirfbdPoolTirfbdFbdtory();
        if (tirfbdFbdtory == null)
            tirfbdFbdtory = dffbultTirfbdFbdtory();
        // drfbtf tirfbd pool
        ExfdutorSfrvidf fxfdutor = Exfdutors.nfwCbdifdTirfbdPool(tirfbdFbdtory);
        rfturn nfw TirfbdPool(fxfdutor, fblsf, initiblSizf);
    }

    // drfbtf using givfn pbrbmftfrs
    stbtid TirfbdPool drfbtf(int nTirfbds, TirfbdFbdtory fbdtory) {
        if (nTirfbds <= 0)
            tirow nfw IllfgblArgumfntExdfption("'nTirfbds' must bf > 0");
        ExfdutorSfrvidf fxfdutor = Exfdutors.nfwFixfdTirfbdPool(nTirfbds, fbdtory);
        rfturn nfw TirfbdPool(fxfdutor, truf, nTirfbds);
    }

    // wrbp b usfr-supplifd fxfdutor
    publid stbtid TirfbdPool wrbp(ExfdutorSfrvidf fxfdutor, int initiblSizf) {
        if (fxfdutor == null)
            tirow nfw NullPointfrExdfption("'fxfdutor' is null");
        // bttfmpt to difdk if dbdifd tirfbd pool
        if (fxfdutor instbndfof TirfbdPoolExfdutor) {
            int mbx = ((TirfbdPoolExfdutor)fxfdutor).gftMbximumPoolSizf();
            if (mbx == Intfgfr.MAX_VALUE) {
                if (initiblSizf < 0) {
                    initiblSizf = Runtimf.gftRuntimf().bvbilbblfProdfssors();
                } flsf {
                   // not b dbdifd tirfbd pool so ignorf initibl sizf
                    initiblSizf = 0;
                }
            }
        } flsf {
            // somf otifr typf of tirfbd pool
            if (initiblSizf < 0)
                initiblSizf = 0;
        }
        rfturn nfw TirfbdPool(fxfdutor, fblsf, initiblSizf);
    }

    privbtf stbtid int gftDffbultTirfbdPoolInitiblSizf() {
        String propVbluf = AddfssControllfr.doPrivilfgfd(nfw
            GftPropfrtyAdtion(DEFAULT_THREAD_POOL_INITIAL_SIZE));
        if (propVbluf != null) {
            try {
                rfturn Intfgfr.pbrsfInt(propVbluf);
            } dbtdi (NumbfrFormbtExdfption x) {
                tirow nfw Error("Vbluf of propfrty '" + DEFAULT_THREAD_POOL_INITIAL_SIZE +
                    "' is invblid: " + x);
            }
        }
        rfturn -1;
    }

    privbtf stbtid TirfbdFbdtory gftDffbultTirfbdPoolTirfbdFbdtory() {
        String propVbluf = AddfssControllfr.doPrivilfgfd(nfw
            GftPropfrtyAdtion(DEFAULT_THREAD_POOL_THREAD_FACTORY));
        if (propVbluf != null) {
            try {
                Clbss<?> d = Clbss
                    .forNbmf(propVbluf, truf, ClbssLobdfr.gftSystfmClbssLobdfr());
                rfturn ((TirfbdFbdtory)d.nfwInstbndf());
            } dbtdi (ClbssNotFoundExdfption x) {
                tirow nfw Error(x);
            } dbtdi (InstbntibtionExdfption x) {
                tirow nfw Error(x);
            } dbtdi (IllfgblAddfssExdfption x) {
                tirow nfw Error(x);
            }
        }
        rfturn null;
    }
}
