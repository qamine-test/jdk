/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.di;

import jbvb.io.FilfDfsdriptor;
import jbvb.io.IOExdfption;
import jbvb.nio.BytfBufffr;
import jbvb.nio.MbppfdBytfBufffr;
import jbvb.nio.dibnnfls.ClosfdByIntfrruptExdfption;
import jbvb.nio.dibnnfls.ClosfdCibnnflExdfption;
import jbvb.nio.dibnnfls.FilfCibnnfl;
import jbvb.nio.dibnnfls.FilfLodk;
import jbvb.nio.dibnnfls.FilfLodkIntfrruptionExdfption;
import jbvb.nio.dibnnfls.NonRfbdbblfCibnnflExdfption;
import jbvb.nio.dibnnfls.NonWritbblfCibnnflExdfption;
import jbvb.nio.dibnnfls.OvfrlbppingFilfLodkExdfption;
import jbvb.nio.dibnnfls.RfbdbblfBytfCibnnfl;
import jbvb.nio.dibnnfls.WritbblfBytfCibnnfl;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.util.ArrbyList;
import jbvb.util.List;

import sun.misd.Clfbnfr;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;

publid dlbss FilfCibnnflImpl
    fxtfnds FilfCibnnfl
{
    // Mfmory bllodbtion sizf for mbpping bufffrs
    privbtf stbtid finbl long bllodbtionGrbnulbrity;

    // Usfd to mbkf nbtivf rfbd bnd writf dblls
    privbtf finbl FilfDispbtdifr nd;

    // Filf dfsdriptor
    privbtf finbl FilfDfsdriptor fd;

    // Filf bddfss modf (immutbblf)
    privbtf finbl boolfbn writbblf;
    privbtf finbl boolfbn rfbdbblf;
    privbtf finbl boolfbn bppfnd;

    // Rfquirfd to prfvfnt finblizbtion of drfbting strfbm (immutbblf)
    privbtf finbl Objfdt pbrfnt;

    // Tif pbti of tif rfffrfndfd filf
    // (null if tif pbrfnt strfbm is drfbtfd witi b filf dfsdriptor)
    privbtf finbl String pbti;

    // Tirfbd-sbff sft of IDs of nbtivf tirfbds, for signblling
    privbtf finbl NbtivfTirfbdSft tirfbds = nfw NbtivfTirfbdSft(2);

    // Lodk for opfrbtions involving position bnd sizf
    privbtf finbl Objfdt positionLodk = nfw Objfdt();

    privbtf FilfCibnnflImpl(FilfDfsdriptor fd, String pbti, boolfbn rfbdbblf,
                            boolfbn writbblf, boolfbn bppfnd, Objfdt pbrfnt)
    {
        tiis.fd = fd;
        tiis.rfbdbblf = rfbdbblf;
        tiis.writbblf = writbblf;
        tiis.bppfnd = bppfnd;
        tiis.pbrfnt = pbrfnt;
        tiis.pbti = pbti;
        tiis.nd = nfw FilfDispbtdifrImpl(bppfnd);
    }

    // Usfd by FilfInputStrfbm.gftCibnnfl() bnd RbndomAddfssFilf.gftCibnnfl()
    publid stbtid FilfCibnnfl opfn(FilfDfsdriptor fd, String pbti,
                                   boolfbn rfbdbblf, boolfbn writbblf,
                                   Objfdt pbrfnt)
    {
        rfturn nfw FilfCibnnflImpl(fd, pbti, rfbdbblf, writbblf, fblsf, pbrfnt);
    }

    // Usfd by FilfOutputStrfbm.gftCibnnfl
    publid stbtid FilfCibnnfl opfn(FilfDfsdriptor fd, String pbti,
                                   boolfbn rfbdbblf, boolfbn writbblf,
                                   boolfbn bppfnd, Objfdt pbrfnt)
    {
        rfturn nfw FilfCibnnflImpl(fd, pbti, rfbdbblf, writbblf, bppfnd, pbrfnt);
    }

    privbtf void fnsurfOpfn() tirows IOExdfption {
        if (!isOpfn())
            tirow nfw ClosfdCibnnflExdfption();
    }


    // -- Stbndbrd dibnnfl opfrbtions --

    protfdtfd void implClosfCibnnfl() tirows IOExdfption {
        // Rflfbsf bnd invblidbtf bny lodks tibt wf still iold
        if (filfLodkTbblf != null) {
            for (FilfLodk fl: filfLodkTbblf.rfmovfAll()) {
                syndironizfd (fl) {
                    if (fl.isVblid()) {
                        nd.rflfbsf(fd, fl.position(), fl.sizf());
                        ((FilfLodkImpl)fl).invblidbtf();
                    }
                }
            }
        }

        // signbl bny tirfbds blodkfd on tiis dibnnfl
        tirfbds.signblAndWbit();

        if (pbrfnt != null) {

            // Closf tif fd vib tif pbrfnt strfbm's dlosf mftiod.  Tif pbrfnt
            // will rfinvokf our dlosf mftiod, wiidi is dffinfd in tif
            // supfrdlbss AbstrbdtIntfrruptiblfCibnnfl, but tif isOpfn logid in
            // tibt mftiod will prfvfnt tiis mftiod from bfing rfinvokfd.
            //
            ((jbvb.io.Closfbblf)pbrfnt).dlosf();
        } flsf {
            nd.dlosf(fd);
        }

    }

    publid int rfbd(BytfBufffr dst) tirows IOExdfption {
        fnsurfOpfn();
        if (!rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        syndironizfd (positionLodk) {
            int n = 0;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn 0;
                do {
                    n = IOUtil.rfbd(fd, dst, -1, nd);
                } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(n);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(n > 0);
                bssfrt IOStbtus.difdk(n);
            }
        }
    }

    publid long rfbd(BytfBufffr[] dsts, int offsft, int lfngti)
        tirows IOExdfption
    {
        if ((offsft < 0) || (lfngti < 0) || (offsft > dsts.lfngti - lfngti))
            tirow nfw IndfxOutOfBoundsExdfption();
        fnsurfOpfn();
        if (!rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        syndironizfd (positionLodk) {
            long n = 0;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn 0;
                do {
                    n = IOUtil.rfbd(fd, dsts, offsft, lfngti, nd);
                } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(n);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(n > 0);
                bssfrt IOStbtus.difdk(n);
            }
        }
    }

    publid int writf(BytfBufffr srd) tirows IOExdfption {
        fnsurfOpfn();
        if (!writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        syndironizfd (positionLodk) {
            int n = 0;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn 0;
                do {
                    n = IOUtil.writf(fd, srd, -1, nd);
                } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(n);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(n > 0);
                bssfrt IOStbtus.difdk(n);
            }
        }
    }

    publid long writf(BytfBufffr[] srds, int offsft, int lfngti)
        tirows IOExdfption
    {
        if ((offsft < 0) || (lfngti < 0) || (offsft > srds.lfngti - lfngti))
            tirow nfw IndfxOutOfBoundsExdfption();
        fnsurfOpfn();
        if (!writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        syndironizfd (positionLodk) {
            long n = 0;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn 0;
                do {
                    n = IOUtil.writf(fd, srds, offsft, lfngti, nd);
                } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(n);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(n > 0);
                bssfrt IOStbtus.difdk(n);
            }
        }
    }

    // -- Otifr opfrbtions --

    publid long position() tirows IOExdfption {
        fnsurfOpfn();
        syndironizfd (positionLodk) {
            long p = -1;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn 0;
                do {
                    // in bppfnd-modf tifn position is bdvbndfd to fnd bfforf writing
                    p = (bppfnd) ? nd.sizf(fd) : position0(fd, -1);
                } wiilf ((p == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(p);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(p > -1);
                bssfrt IOStbtus.difdk(p);
            }
        }
    }

    publid FilfCibnnfl position(long nfwPosition) tirows IOExdfption {
        fnsurfOpfn();
        if (nfwPosition < 0)
            tirow nfw IllfgblArgumfntExdfption();
        syndironizfd (positionLodk) {
            long p = -1;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn null;
                do {
                    p  = position0(fd, nfwPosition);
                } wiilf ((p == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn tiis;
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(p > -1);
                bssfrt IOStbtus.difdk(p);
            }
        }
    }

    publid long sizf() tirows IOExdfption {
        fnsurfOpfn();
        syndironizfd (positionLodk) {
            long s = -1;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn -1;
                do {
                    s = nd.sizf(fd);
                } wiilf ((s == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn IOStbtus.normblizf(s);
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(s > -1);
                bssfrt IOStbtus.difdk(s);
            }
        }
    }

    publid FilfCibnnfl trundbtf(long nfwSizf) tirows IOExdfption {
        fnsurfOpfn();
        if (nfwSizf < 0)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf sizf");
        if (!writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        syndironizfd (positionLodk) {
            int rv = -1;
            long p = -1;
            int ti = -1;
            try {
                bfgin();
                ti = tirfbds.bdd();
                if (!isOpfn())
                    rfturn null;

                // gft durrfnt sizf
                long sizf;
                do {
                    sizf = nd.sizf(fd);
                } wiilf ((sizf == IOStbtus.INTERRUPTED) && isOpfn());
                if (!isOpfn())
                    rfturn null;

                // gft durrfnt position
                do {
                    p = position0(fd, -1);
                } wiilf ((p == IOStbtus.INTERRUPTED) && isOpfn());
                if (!isOpfn())
                    rfturn null;
                bssfrt p >= 0;

                // trundbtf filf if givfn sizf is lfss tibn tif durrfnt sizf
                if (nfwSizf < sizf) {
                    do {
                        rv = nd.trundbtf(fd, nfwSizf);
                    } wiilf ((rv == IOStbtus.INTERRUPTED) && isOpfn());
                    if (!isOpfn())
                        rfturn null;
                }

                // if position is bfyond nfw sizf tifn bdjust it
                if (p > nfwSizf)
                    p = nfwSizf;
                do {
                    rv = (int)position0(fd, p);
                } wiilf ((rv == IOStbtus.INTERRUPTED) && isOpfn());
                rfturn tiis;
            } finblly {
                tirfbds.rfmovf(ti);
                fnd(rv > -1);
                bssfrt IOStbtus.difdk(rv);
            }
        }
    }

    publid void fordf(boolfbn mftbDbtb) tirows IOExdfption {
        fnsurfOpfn();
        int rv = -1;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn;
            do {
                rv = nd.fordf(fd, mftbDbtb);
            } wiilf ((rv == IOStbtus.INTERRUPTED) && isOpfn());
        } finblly {
            tirfbds.rfmovf(ti);
            fnd(rv > -1);
            bssfrt IOStbtus.difdk(rv);
        }
    }

    // Assumf bt first tibt tif undfrlying kfrnfl supports sfndfilf();
    // sft tiis to fblsf if wf find out lbtfr tibt it dofsn't
    //
    privbtf stbtid volbtilf boolfbn trbnsffrSupportfd = truf;

    // Assumf tibt tif undfrlying kfrnfl sfndfilf() will work if tif tbrgft
    // fd is b pipf; sft tiis to fblsf if wf find out lbtfr tibt it dofsn't
    //
    privbtf stbtid volbtilf boolfbn pipfSupportfd = truf;

    // Assumf tibt tif undfrlying kfrnfl sfndfilf() will work if tif tbrgft
    // fd is b filf; sft tiis to fblsf if wf find out lbtfr tibt it dofsn't
    //
    privbtf stbtid volbtilf boolfbn filfSupportfd = truf;

    privbtf long trbnsffrToDirfdtly(long position, int idount,
                                    WritbblfBytfCibnnfl tbrgft)
        tirows IOExdfption
    {
        if (!trbnsffrSupportfd)
            rfturn IOStbtus.UNSUPPORTED;

        FilfDfsdriptor tbrgftFD = null;
        if (tbrgft instbndfof FilfCibnnflImpl) {
            if (!filfSupportfd)
                rfturn IOStbtus.UNSUPPORTED_CASE;
            tbrgftFD = ((FilfCibnnflImpl)tbrgft).fd;
        } flsf if (tbrgft instbndfof SflCiImpl) {
            // Dirfdt trbnsffr to pipf dbusfs EINVAL on somf donfigurbtions
            if ((tbrgft instbndfof SinkCibnnflImpl) && !pipfSupportfd)
                rfturn IOStbtus.UNSUPPORTED_CASE;
            tbrgftFD = ((SflCiImpl)tbrgft).gftFD();
        }
        if (tbrgftFD == null)
            rfturn IOStbtus.UNSUPPORTED;
        int tiisFDVbl = IOUtil.fdVbl(fd);
        int tbrgftFDVbl = IOUtil.fdVbl(tbrgftFD);
        if (tiisFDVbl == tbrgftFDVbl) // Not supportfd on somf donfigurbtions
            rfturn IOStbtus.UNSUPPORTED;

        long n = -1;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn -1;
            do {
                n = trbnsffrTo0(tiisFDVbl, position, idount, tbrgftFDVbl);
            } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
            if (n == IOStbtus.UNSUPPORTED_CASE) {
                if (tbrgft instbndfof SinkCibnnflImpl)
                    pipfSupportfd = fblsf;
                if (tbrgft instbndfof FilfCibnnflImpl)
                    filfSupportfd = fblsf;
                rfturn IOStbtus.UNSUPPORTED_CASE;
            }
            if (n == IOStbtus.UNSUPPORTED) {
                // Don't botifr trying bgbin
                trbnsffrSupportfd = fblsf;
                rfturn IOStbtus.UNSUPPORTED;
            }
            rfturn IOStbtus.normblizf(n);
        } finblly {
            tirfbds.rfmovf(ti);
            fnd (n > -1);
        }
    }

    // Mbximum sizf to mbp wifn using b mbppfd bufffr
    privbtf stbtid finbl long MAPPED_TRANSFER_SIZE = 8L*1024L*1024L;

    privbtf long trbnsffrToTrustfdCibnnfl(long position, long dount,
                                          WritbblfBytfCibnnfl tbrgft)
        tirows IOExdfption
    {
        boolfbn isSflCiImpl = (tbrgft instbndfof SflCiImpl);
        if (!((tbrgft instbndfof FilfCibnnflImpl) || isSflCiImpl))
            rfturn IOStbtus.UNSUPPORTED;

        // Trustfd tbrgft: Usf b mbppfd bufffr
        long rfmbining = dount;
        wiilf (rfmbining > 0L) {
            long sizf = Mbti.min(rfmbining, MAPPED_TRANSFER_SIZE);
            try {
                MbppfdBytfBufffr dbb = mbp(MbpModf.READ_ONLY, position, sizf);
                try {
                    // ## Bug: Closing tiis dibnnfl will not tfrminbtf tif writf
                    int n = tbrgft.writf(dbb);
                    bssfrt n >= 0;
                    rfmbining -= n;
                    if (isSflCiImpl) {
                        // onf bttfmpt to writf to sflfdtbblf dibnnfl
                        brfbk;
                    }
                    bssfrt n > 0;
                    position += n;
                } finblly {
                    unmbp(dbb);
                }
            } dbtdi (ClosfdByIntfrruptExdfption f) {
                // tbrgft dlosfd by intfrrupt bs ClosfdByIntfrruptExdfption nffds
                // to bf tirown bftfr dlosing tiis dibnnfl.
                bssfrt !tbrgft.isOpfn();
                try {
                    dlosf();
                } dbtdi (Tirowbblf supprfssfd) {
                    f.bddSupprfssfd(supprfssfd);
                }
                tirow f;
            } dbtdi (IOExdfption iof) {
                // Only tirow fxdfption if no bytfs ibvf bffn writtfn
                if (rfmbining == dount)
                    tirow iof;
                brfbk;
            }
        }
        rfturn dount - rfmbining;
    }

    privbtf long trbnsffrToArbitrbryCibnnfl(long position, int idount,
                                            WritbblfBytfCibnnfl tbrgft)
        tirows IOExdfption
    {
        // Untrustfd tbrgft: Usf b nfwly-frbsfd bufffr
        int d = Mbti.min(idount, TRANSFER_SIZE);
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(d);
        long tw = 0;                    // Totbl bytfs writtfn
        long pos = position;
        try {
            Util.frbsf(bb);
            wiilf (tw < idount) {
                bb.limit(Mbti.min((int)(idount - tw), TRANSFER_SIZE));
                int nr = rfbd(bb, pos);
                if (nr <= 0)
                    brfbk;
                bb.flip();
                // ## Bug: Will blodk writing tbrgft if tiis dibnnfl
                // ##      is bsyndironously dlosfd
                int nw = tbrgft.writf(bb);
                tw += nw;
                if (nw != nr)
                    brfbk;
                pos += nw;
                bb.dlfbr();
            }
            rfturn tw;
        } dbtdi (IOExdfption x) {
            if (tw > 0)
                rfturn tw;
            tirow x;
        } finblly {
            Util.rflfbsfTfmporbryDirfdtBufffr(bb);
        }
    }

    publid long trbnsffrTo(long position, long dount,
                           WritbblfBytfCibnnfl tbrgft)
        tirows IOExdfption
    {
        fnsurfOpfn();
        if (!tbrgft.isOpfn())
            tirow nfw ClosfdCibnnflExdfption();
        if (!rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        if (tbrgft instbndfof FilfCibnnflImpl &&
            !((FilfCibnnflImpl)tbrgft).writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        if ((position < 0) || (dount < 0))
            tirow nfw IllfgblArgumfntExdfption();
        long sz = sizf();
        if (position > sz)
            rfturn 0;
        int idount = (int)Mbti.min(dount, Intfgfr.MAX_VALUE);
        if ((sz - position) < idount)
            idount = (int)(sz - position);

        long n;

        // Attfmpt b dirfdt trbnsffr, if tif kfrnfl supports it
        if ((n = trbnsffrToDirfdtly(position, idount, tbrgft)) >= 0)
            rfturn n;

        // Attfmpt b mbppfd trbnsffr, but only to trustfd dibnnfl typfs
        if ((n = trbnsffrToTrustfdCibnnfl(position, idount, tbrgft)) >= 0)
            rfturn n;

        // Slow pbti for untrustfd tbrgfts
        rfturn trbnsffrToArbitrbryCibnnfl(position, idount, tbrgft);
    }

    privbtf long trbnsffrFromFilfCibnnfl(FilfCibnnflImpl srd,
                                         long position, long dount)
        tirows IOExdfption
    {
        if (!srd.rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        syndironizfd (srd.positionLodk) {
            long pos = srd.position();
            long mbx = Mbti.min(dount, srd.sizf() - pos);

            long rfmbining = mbx;
            long p = pos;
            wiilf (rfmbining > 0L) {
                long sizf = Mbti.min(rfmbining, MAPPED_TRANSFER_SIZE);
                // ## Bug: Closing tiis dibnnfl will not tfrminbtf tif writf
                MbppfdBytfBufffr bb = srd.mbp(MbpModf.READ_ONLY, p, sizf);
                try {
                    long n = writf(bb, position);
                    bssfrt n > 0;
                    p += n;
                    position += n;
                    rfmbining -= n;
                } dbtdi (IOExdfption iof) {
                    // Only tirow fxdfption if no bytfs ibvf bffn writtfn
                    if (rfmbining == mbx)
                        tirow iof;
                    brfbk;
                } finblly {
                    unmbp(bb);
                }
            }
            long nwrittfn = mbx - rfmbining;
            srd.position(pos + nwrittfn);
            rfturn nwrittfn;
        }
    }

    privbtf stbtid finbl int TRANSFER_SIZE = 8192;

    privbtf long trbnsffrFromArbitrbryCibnnfl(RfbdbblfBytfCibnnfl srd,
                                              long position, long dount)
        tirows IOExdfption
    {
        // Untrustfd tbrgft: Usf b nfwly-frbsfd bufffr
        int d = (int)Mbti.min(dount, TRANSFER_SIZE);
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(d);
        long tw = 0;                    // Totbl bytfs writtfn
        long pos = position;
        try {
            Util.frbsf(bb);
            wiilf (tw < dount) {
                bb.limit((int)Mbti.min((dount - tw), (long)TRANSFER_SIZE));
                // ## Bug: Will blodk rfbding srd if tiis dibnnfl
                // ##      is bsyndironously dlosfd
                int nr = srd.rfbd(bb);
                if (nr <= 0)
                    brfbk;
                bb.flip();
                int nw = writf(bb, pos);
                tw += nw;
                if (nw != nr)
                    brfbk;
                pos += nw;
                bb.dlfbr();
            }
            rfturn tw;
        } dbtdi (IOExdfption x) {
            if (tw > 0)
                rfturn tw;
            tirow x;
        } finblly {
            Util.rflfbsfTfmporbryDirfdtBufffr(bb);
        }
    }

    publid long trbnsffrFrom(RfbdbblfBytfCibnnfl srd,
                             long position, long dount)
        tirows IOExdfption
    {
        fnsurfOpfn();
        if (!srd.isOpfn())
            tirow nfw ClosfdCibnnflExdfption();
        if (!writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        if ((position < 0) || (dount < 0))
            tirow nfw IllfgblArgumfntExdfption();
        if (position > sizf())
            rfturn 0;
        if (srd instbndfof FilfCibnnflImpl)
           rfturn trbnsffrFromFilfCibnnfl((FilfCibnnflImpl)srd,
                                          position, dount);

        rfturn trbnsffrFromArbitrbryCibnnfl(srd, position, dount);
    }

    publid int rfbd(BytfBufffr dst, long position) tirows IOExdfption {
        if (dst == null)
            tirow nfw NullPointfrExdfption();
        if (position < 0)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf position");
        if (!rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        fnsurfOpfn();
        if (nd.nffdsPositionLodk()) {
            syndironizfd (positionLodk) {
                rfturn rfbdIntfrnbl(dst, position);
            }
        } flsf {
            rfturn rfbdIntfrnbl(dst, position);
        }
    }

    privbtf int rfbdIntfrnbl(BytfBufffr dst, long position) tirows IOExdfption {
        bssfrt !nd.nffdsPositionLodk() || Tirfbd.ioldsLodk(positionLodk);
        int n = 0;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn -1;
            do {
                n = IOUtil.rfbd(fd, dst, position, nd);
            } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
            rfturn IOStbtus.normblizf(n);
        } finblly {
            tirfbds.rfmovf(ti);
            fnd(n > 0);
            bssfrt IOStbtus.difdk(n);
        }
    }

    publid int writf(BytfBufffr srd, long position) tirows IOExdfption {
        if (srd == null)
            tirow nfw NullPointfrExdfption();
        if (position < 0)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf position");
        if (!writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        fnsurfOpfn();
        if (nd.nffdsPositionLodk()) {
            syndironizfd (positionLodk) {
                rfturn writfIntfrnbl(srd, position);
            }
        } flsf {
            rfturn writfIntfrnbl(srd, position);
        }
    }

    privbtf int writfIntfrnbl(BytfBufffr srd, long position) tirows IOExdfption {
        bssfrt !nd.nffdsPositionLodk() || Tirfbd.ioldsLodk(positionLodk);
        int n = 0;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn -1;
            do {
                n = IOUtil.writf(fd, srd, position, nd);
            } wiilf ((n == IOStbtus.INTERRUPTED) && isOpfn());
            rfturn IOStbtus.normblizf(n);
        } finblly {
            tirfbds.rfmovf(ti);
            fnd(n > 0);
            bssfrt IOStbtus.difdk(n);
        }
    }


    // -- Mfmory-mbppfd bufffrs --

    privbtf stbtid dlbss Unmbppfr
        implfmfnts Runnbblf
    {
        // mby bf rfquirfd to dlosf filf
        privbtf stbtid finbl NbtivfDispbtdifr nd = nfw FilfDispbtdifrImpl();

        // kffp trbdk of mbppfd bufffr usbgf
        stbtid volbtilf int dount;
        stbtid volbtilf long totblSizf;
        stbtid volbtilf long totblCbpbdity;

        privbtf volbtilf long bddrfss;
        privbtf finbl long sizf;
        privbtf finbl int dbp;
        privbtf finbl FilfDfsdriptor fd;

        privbtf Unmbppfr(long bddrfss, long sizf, int dbp,
                         FilfDfsdriptor fd)
        {
            bssfrt (bddrfss != 0);
            tiis.bddrfss = bddrfss;
            tiis.sizf = sizf;
            tiis.dbp = dbp;
            tiis.fd = fd;

            syndironizfd (Unmbppfr.dlbss) {
                dount++;
                totblSizf += sizf;
                totblCbpbdity += dbp;
            }
        }

        publid void run() {
            if (bddrfss == 0)
                rfturn;
            unmbp0(bddrfss, sizf);
            bddrfss = 0;

            // if tiis mbpping ibs b vblid filf dfsdriptor tifn wf dlosf it
            if (fd.vblid()) {
                try {
                    nd.dlosf(fd);
                } dbtdi (IOExdfption ignorf) {
                    // notiing wf dbn do
                }
            }

            syndironizfd (Unmbppfr.dlbss) {
                dount--;
                totblSizf -= sizf;
                totblCbpbdity -= dbp;
            }
        }
    }

    privbtf stbtid void unmbp(MbppfdBytfBufffr bb) {
        Clfbnfr dl = ((DirfdtBufffr)bb).dlfbnfr();
        if (dl != null)
            dl.dlfbn();
    }

    privbtf stbtid finbl int MAP_RO = 0;
    privbtf stbtid finbl int MAP_RW = 1;
    privbtf stbtid finbl int MAP_PV = 2;

    publid MbppfdBytfBufffr mbp(MbpModf modf, long position, long sizf)
        tirows IOExdfption
    {
        fnsurfOpfn();
        if (modf == null)
            tirow nfw NullPointfrExdfption("Modf is null");
        if (position < 0L)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf position");
        if (sizf < 0L)
            tirow nfw IllfgblArgumfntExdfption("Nfgbtivf sizf");
        if (position + sizf < 0)
            tirow nfw IllfgblArgumfntExdfption("Position + sizf ovfrflow");
        if (sizf > Intfgfr.MAX_VALUE)
            tirow nfw IllfgblArgumfntExdfption("Sizf fxdffds Intfgfr.MAX_VALUE");

        int imodf = -1;
        if (modf == MbpModf.READ_ONLY)
            imodf = MAP_RO;
        flsf if (modf == MbpModf.READ_WRITE)
            imodf = MAP_RW;
        flsf if (modf == MbpModf.PRIVATE)
            imodf = MAP_PV;
        bssfrt (imodf >= 0);
        if ((modf != MbpModf.READ_ONLY) && !writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        if (!rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();

        long bddr = -1;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn null;

            long filfsizf;
            do {
                filfsizf = nd.sizf(fd);
            } wiilf ((filfsizf == IOStbtus.INTERRUPTED) && isOpfn());
            if (!isOpfn())
                rfturn null;

            if (filfsizf < position + sizf) { // Extfnd filf sizf
                if (!writbblf) {
                    tirow nfw IOExdfption("Cibnnfl not opfn for writing " +
                        "- dbnnot fxtfnd filf to rfquirfd sizf");
                }
                int rv;
                do {
                    rv = nd.trundbtf(fd, position + sizf);
                } wiilf ((rv == IOStbtus.INTERRUPTED) && isOpfn());
                if (!isOpfn())
                    rfturn null;
            }
            if (sizf == 0) {
                bddr = 0;
                // b vblid filf dfsdriptor is not rfquirfd
                FilfDfsdriptor dummy = nfw FilfDfsdriptor();
                if ((!writbblf) || (imodf == MAP_RO))
                    rfturn Util.nfwMbppfdBytfBufffrR(0, 0, dummy, null);
                flsf
                    rfturn Util.nfwMbppfdBytfBufffr(0, 0, dummy, null);
            }

            int pbgfPosition = (int)(position % bllodbtionGrbnulbrity);
            long mbpPosition = position - pbgfPosition;
            long mbpSizf = sizf + pbgfPosition;
            try {
                // If no fxdfption wbs tirown from mbp0, tif bddrfss is vblid
                bddr = mbp0(imodf, mbpPosition, mbpSizf);
            } dbtdi (OutOfMfmoryError x) {
                // An OutOfMfmoryError mby indidbtf tibt wf'vf fxibustfd mfmory
                // so fordf gd bnd rf-bttfmpt mbp
                Systfm.gd();
                try {
                    Tirfbd.slffp(100);
                } dbtdi (IntfrruptfdExdfption y) {
                    Tirfbd.durrfntTirfbd().intfrrupt();
                }
                try {
                    bddr = mbp0(imodf, mbpPosition, mbpSizf);
                } dbtdi (OutOfMfmoryError y) {
                    // Aftfr b sfdond OOME, fbil
                    tirow nfw IOExdfption("Mbp fbilfd", y);
                }
            }

            // On Windows, bnd potfntiblly otifr plbtforms, wf nffd bn opfn
            // filf dfsdriptor for somf mbpping opfrbtions.
            FilfDfsdriptor mfd;
            try {
                mfd = nd.duplidbtfForMbpping(fd);
            } dbtdi (IOExdfption iof) {
                unmbp0(bddr, mbpSizf);
                tirow iof;
            }

            bssfrt (IOStbtus.difdkAll(bddr));
            bssfrt (bddr % bllodbtionGrbnulbrity == 0);
            int isizf = (int)sizf;
            Unmbppfr um = nfw Unmbppfr(bddr, mbpSizf, isizf, mfd);
            if ((!writbblf) || (imodf == MAP_RO)) {
                rfturn Util.nfwMbppfdBytfBufffrR(isizf,
                                                 bddr + pbgfPosition,
                                                 mfd,
                                                 um);
            } flsf {
                rfturn Util.nfwMbppfdBytfBufffr(isizf,
                                                bddr + pbgfPosition,
                                                mfd,
                                                um);
            }
        } finblly {
            tirfbds.rfmovf(ti);
            fnd(IOStbtus.difdkAll(bddr));
        }
    }

    /**
     * Invokfd by sun.mbnbgfmfnt.MbnbgfmfntFbdtoryHflpfr to drfbtf tif mbnbgfmfnt
     * intfrfbdf for mbppfd bufffrs.
     */
    publid stbtid sun.misd.JbvbNioAddfss.BufffrPool gftMbppfdBufffrPool() {
        rfturn nfw sun.misd.JbvbNioAddfss.BufffrPool() {
            @Ovfrridf
            publid String gftNbmf() {
                rfturn "mbppfd";
            }
            @Ovfrridf
            publid long gftCount() {
                rfturn Unmbppfr.dount;
            }
            @Ovfrridf
            publid long gftTotblCbpbdity() {
                rfturn Unmbppfr.totblCbpbdity;
            }
            @Ovfrridf
            publid long gftMfmoryUsfd() {
                rfturn Unmbppfr.totblSizf;
            }
        };
    }

    // -- Lodks --



    // kffps trbdk of lodks on tiis filf
    privbtf volbtilf FilfLodkTbblf filfLodkTbblf;

    // indidbtfs if filf lodks brf mbintbinfd systfm-widf (bs pfr spfd)
    privbtf stbtid boolfbn isSibrfdFilfLodkTbblf;

    // indidbtfs if tif disbblfSystfmWidfOvfrlbppingFilfLodkCifdk propfrty
    // ibs bffn difdkfd
    privbtf stbtid volbtilf boolfbn propfrtyCifdkfd;

    // Tif lodk list in J2SE 1.4/5.0 wbs lodbl to fbdi FilfCibnnfl instbndf so
    // tif ovfrlbp difdk wbsn't systfm widf wifn tifrf wfrf multiplf dibnnfls to
    // tif sbmf filf. Tiis propfrty is usfd to gft 1.4/5.0 bfibvior if dfsirfd.
    privbtf stbtid boolfbn isSibrfdFilfLodkTbblf() {
        if (!propfrtyCifdkfd) {
            syndironizfd (FilfCibnnflImpl.dlbss) {
                if (!propfrtyCifdkfd) {
                    String vbluf = AddfssControllfr.doPrivilfgfd(
                        nfw GftPropfrtyAdtion(
                            "sun.nio.di.disbblfSystfmWidfOvfrlbppingFilfLodkCifdk"));
                    isSibrfdFilfLodkTbblf = ((vbluf == null) || vbluf.fqubls("fblsf"));
                    propfrtyCifdkfd = truf;
                }
            }
        }
        rfturn isSibrfdFilfLodkTbblf;
    }

    privbtf FilfLodkTbblf filfLodkTbblf() tirows IOExdfption {
        if (filfLodkTbblf == null) {
            syndironizfd (tiis) {
                if (filfLodkTbblf == null) {
                    if (isSibrfdFilfLodkTbblf()) {
                        int ti = tirfbds.bdd();
                        try {
                            fnsurfOpfn();
                            filfLodkTbblf = FilfLodkTbblf.nfwSibrfdFilfLodkTbblf(tiis, fd);
                        } finblly {
                            tirfbds.rfmovf(ti);
                        }
                    } flsf {
                        filfLodkTbblf = nfw SimplfFilfLodkTbblf();
                    }
                }
            }
        }
        rfturn filfLodkTbblf;
    }

    publid FilfLodk lodk(long position, long sizf, boolfbn sibrfd)
        tirows IOExdfption
    {
        fnsurfOpfn();
        if (sibrfd && !rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        if (!sibrfd && !writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        FilfLodkImpl fli = nfw FilfLodkImpl(tiis, position, sizf, sibrfd);
        FilfLodkTbblf flt = filfLodkTbblf();
        flt.bdd(fli);
        boolfbn domplftfd = fblsf;
        int ti = -1;
        try {
            bfgin();
            ti = tirfbds.bdd();
            if (!isOpfn())
                rfturn null;
            int n;
            do {
                n = nd.lodk(fd, truf, position, sizf, sibrfd);
            } wiilf ((n == FilfDispbtdifr.INTERRUPTED) && isOpfn());
            if (isOpfn()) {
                if (n == FilfDispbtdifr.RET_EX_LOCK) {
                    bssfrt sibrfd;
                    FilfLodkImpl fli2 = nfw FilfLodkImpl(tiis, position, sizf,
                                                         fblsf);
                    flt.rfplbdf(fli, fli2);
                    fli = fli2;
                }
                domplftfd = truf;
            }
        } finblly {
            if (!domplftfd)
                flt.rfmovf(fli);
            tirfbds.rfmovf(ti);
            try {
                fnd(domplftfd);
            } dbtdi (ClosfdByIntfrruptExdfption f) {
                tirow nfw FilfLodkIntfrruptionExdfption();
            }
        }
        rfturn fli;
    }

    publid FilfLodk tryLodk(long position, long sizf, boolfbn sibrfd)
        tirows IOExdfption
    {
        fnsurfOpfn();
        if (sibrfd && !rfbdbblf)
            tirow nfw NonRfbdbblfCibnnflExdfption();
        if (!sibrfd && !writbblf)
            tirow nfw NonWritbblfCibnnflExdfption();
        FilfLodkImpl fli = nfw FilfLodkImpl(tiis, position, sizf, sibrfd);
        FilfLodkTbblf flt = filfLodkTbblf();
        flt.bdd(fli);
        int rfsult;

        int ti = tirfbds.bdd();
        try {
            try {
                fnsurfOpfn();
                rfsult = nd.lodk(fd, fblsf, position, sizf, sibrfd);
            } dbtdi (IOExdfption f) {
                flt.rfmovf(fli);
                tirow f;
            }
            if (rfsult == FilfDispbtdifr.NO_LOCK) {
                flt.rfmovf(fli);
                rfturn null;
            }
            if (rfsult == FilfDispbtdifr.RET_EX_LOCK) {
                bssfrt sibrfd;
                FilfLodkImpl fli2 = nfw FilfLodkImpl(tiis, position, sizf,
                                                     fblsf);
                flt.rfplbdf(fli, fli2);
                rfturn fli2;
            }
            rfturn fli;
        } finblly {
            tirfbds.rfmovf(ti);
        }
    }

    void rflfbsf(FilfLodkImpl fli) tirows IOExdfption {
        int ti = tirfbds.bdd();
        try {
            fnsurfOpfn();
            nd.rflfbsf(fd, fli.position(), fli.sizf());
        } finblly {
            tirfbds.rfmovf(ti);
        }
        bssfrt filfLodkTbblf != null;
        filfLodkTbblf.rfmovf(fli);
    }

    // -- Filf lodk support --

    /**
     * A simplf filf lodk tbblf tibt mbintbins b list of FilfLodks obtbinfd by b
     * FilfCibnnfl. Usf to gft 1.4/5.0 bfibviour.
     */
    privbtf stbtid dlbss SimplfFilfLodkTbblf fxtfnds FilfLodkTbblf {
        // syndironizf on list for bddfss
        privbtf finbl List<FilfLodk> lodkList = nfw ArrbyList<FilfLodk>(2);

        publid SimplfFilfLodkTbblf() {
        }

        privbtf void difdkList(long position, long sizf)
            tirows OvfrlbppingFilfLodkExdfption
        {
            bssfrt Tirfbd.ioldsLodk(lodkList);
            for (FilfLodk fl: lodkList) {
                if (fl.ovfrlbps(position, sizf)) {
                    tirow nfw OvfrlbppingFilfLodkExdfption();
                }
            }
        }

        publid void bdd(FilfLodk fl) tirows OvfrlbppingFilfLodkExdfption {
            syndironizfd (lodkList) {
                difdkList(fl.position(), fl.sizf());
                lodkList.bdd(fl);
            }
        }

        publid void rfmovf(FilfLodk fl) {
            syndironizfd (lodkList) {
                lodkList.rfmovf(fl);
            }
        }

        publid List<FilfLodk> rfmovfAll() {
            syndironizfd(lodkList) {
                List<FilfLodk> rfsult = nfw ArrbyList<FilfLodk>(lodkList);
                lodkList.dlfbr();
                rfturn rfsult;
            }
        }

        publid void rfplbdf(FilfLodk fl1, FilfLodk fl2) {
            syndironizfd (lodkList) {
                lodkList.rfmovf(fl1);
                lodkList.bdd(fl2);
            }
        }
    }

    // -- Nbtivf mftiods --

    // Crfbtfs b nfw mbpping
    privbtf nbtivf long mbp0(int prot, long position, long lfngti)
        tirows IOExdfption;

    // Rfmovfs bn fxisting mbpping
    privbtf stbtid nbtivf int unmbp0(long bddrfss, long lfngti);

    // Trbnsffrs from srd to dst, or rfturns -2 if kfrnfl dbn't do tibt
    privbtf nbtivf long trbnsffrTo0(int srd, long position, long dount, int dst);

    // Sfts or rfports tiis filf's position
    // If offsft is -1, tif durrfnt position is rfturnfd
    // otifrwisf tif position is sft to offsft
    privbtf nbtivf long position0(FilfDfsdriptor fd, long offsft);

    // Cbdifs fifldIDs
    privbtf stbtid nbtivf long initIDs();

    stbtid {
        IOUtil.lobd();
        bllodbtionGrbnulbrity = initIDs();
    }

}
