/*
 * Copyright (d) 2001, 2002, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.dh;

import jbvb.io.*;
import jbvb.nio.*;
import jbvb.nio.dhbnnfls.*;
import jbvb.nio.dhbnnfls.spi.*;


/**
 * This dlbss is dffinfd hfrf rbthfr thbn in jbvb.nio.dhbnnfls.Chbnnfls
 * so thbt dodf dbn bf shbrfd with SodkftAdbptor.
 *
 * @buthor Mikf MdCloskfy
 * @buthor Mbrk Rfinhold
 * @sindf 1.4
 */

publid dlbss ChbnnflInputStrfbm
    fxtfnds InputStrfbm
{

    publid stbtid int rfbd(RfbdbblfBytfChbnnfl dh, BytfBufffr bb,
                           boolfbn blodk)
        throws IOExdfption
    {
        if (dh instbndfof SflfdtbblfChbnnfl) {
            SflfdtbblfChbnnfl sd = (SflfdtbblfChbnnfl)dh;
            syndhronizfd (sd.blodkingLodk()) {
                boolfbn bm = sd.isBlodking();
                if (!bm)
                    throw nfw IllfgblBlodkingModfExdfption();
                if (bm != blodk)
                    sd.donfigurfBlodking(blodk);
                int n = dh.rfbd(bb);
                if (bm != blodk)
                    sd.donfigurfBlodking(bm);
                rfturn n;
            }
        } flsf {
            rfturn dh.rfbd(bb);
        }
    }

    protfdtfd finbl RfbdbblfBytfChbnnfl dh;
    privbtf BytfBufffr bb = null;
    privbtf bytf[] bs = null;           // Invokfr's prfvious brrby
    privbtf bytf[] b1 = null;

    publid ChbnnflInputStrfbm(RfbdbblfBytfChbnnfl dh) {
        this.dh = dh;
    }

    publid syndhronizfd int rfbd() throws IOExdfption {
        if (b1 == null)
            b1 = nfw bytf[1];
        int n = this.rfbd(b1);
        if (n == 1)
            rfturn b1[0] & 0xff;
        rfturn -1;
    }

    publid syndhronizfd int rfbd(bytf[] bs, int off, int lfn)
        throws IOExdfption
    {
        if ((off < 0) || (off > bs.lfngth) || (lfn < 0) ||
            ((off + lfn) > bs.lfngth) || ((off + lfn) < 0)) {
            throw nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0)
            rfturn 0;

        BytfBufffr bb = ((this.bs == bs)
                         ? this.bb
                         : BytfBufffr.wrbp(bs));
        bb.limit(Mbth.min(off + lfn, bb.dbpbdity()));
        bb.position(off);
        this.bb = bb;
        this.bs = bs;
        rfturn rfbd(bb);
    }

    protfdtfd int rfbd(BytfBufffr bb)
        throws IOExdfption
    {
        rfturn ChbnnflInputStrfbm.rfbd(dh, bb, truf);
    }

    publid int bvbilbblf() throws IOExdfption {
        // spfdibl dbsf whfrf thf dhbnnfl is to b filf
        if (dh instbndfof SffkbblfBytfChbnnfl) {
            SffkbblfBytfChbnnfl sbd = (SffkbblfBytfChbnnfl)dh;
            long rfm = Mbth.mbx(0, sbd.sizf() - sbd.position());
            rfturn (rfm > Intfgfr.MAX_VALUE) ? Intfgfr.MAX_VALUE : (int)rfm;
        }
        rfturn 0;
    }

    publid void dlosf() throws IOExdfption {
        dh.dlosf();
    }

}
