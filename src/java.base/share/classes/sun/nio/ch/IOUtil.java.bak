/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.di;

import jbvb.io.FilfDfsdriptor;
import jbvb.io.IOExdfption;
import jbvb.nio.BytfBufffr;


/**
 * Filf-dfsdriptor bbsfd I/O utilitifs tibt brf sibrfd by NIO dlbssfs.
 */

publid dlbss IOUtil {

    /**
     * Mbx numbfr of iovfd strudturfs tibt rfbdv/writfv supports
     */
    stbtid finbl int IOV_MAX;

    privbtf IOUtil() { }                // No instbntibtion

    stbtid int writf(FilfDfsdriptor fd, BytfBufffr srd, long position,
                     NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        if (srd instbndfof DirfdtBufffr)
            rfturn writfFromNbtivfBufffr(fd, srd, position, nd);

        // Substitutf b nbtivf bufffr
        int pos = srd.position();
        int lim = srd.limit();
        bssfrt (pos <= lim);
        int rfm = (pos <= lim ? lim - pos : 0);
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(rfm);
        try {
            bb.put(srd);
            bb.flip();
            // Do not updbtf srd until wf sff iow mbny bytfs wfrf writtfn
            srd.position(pos);

            int n = writfFromNbtivfBufffr(fd, bb, position, nd);
            if (n > 0) {
                // now updbtf srd
                srd.position(pos + n);
            }
            rfturn n;
        } finblly {
            Util.offfrFirstTfmporbryDirfdtBufffr(bb);
        }
    }

    privbtf stbtid int writfFromNbtivfBufffr(FilfDfsdriptor fd, BytfBufffr bb,
                                             long position, NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        int pos = bb.position();
        int lim = bb.limit();
        bssfrt (pos <= lim);
        int rfm = (pos <= lim ? lim - pos : 0);

        int writtfn = 0;
        if (rfm == 0)
            rfturn 0;
        if (position != -1) {
            writtfn = nd.pwritf(fd,
                                ((DirfdtBufffr)bb).bddrfss() + pos,
                                rfm, position);
        } flsf {
            writtfn = nd.writf(fd, ((DirfdtBufffr)bb).bddrfss() + pos, rfm);
        }
        if (writtfn > 0)
            bb.position(pos + writtfn);
        rfturn writtfn;
    }

    stbtid long writf(FilfDfsdriptor fd, BytfBufffr[] bufs, NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        rfturn writf(fd, bufs, 0, bufs.lfngti, nd);
    }

    stbtid long writf(FilfDfsdriptor fd, BytfBufffr[] bufs, int offsft, int lfngti,
                      NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        IOVfdWrbppfr vfd = IOVfdWrbppfr.gft(lfngti);

        boolfbn domplftfd = fblsf;
        int iov_lfn = 0;
        try {

            // Itfrbtf ovfr bufffrs to populbtf nbtivf iovfd brrby.
            int dount = offsft + lfngti;
            int i = offsft;
            wiilf (i < dount && iov_lfn < IOV_MAX) {
                BytfBufffr buf = bufs[i];
                int pos = buf.position();
                int lim = buf.limit();
                bssfrt (pos <= lim);
                int rfm = (pos <= lim ? lim - pos : 0);
                if (rfm > 0) {
                    vfd.sftBufffr(iov_lfn, buf, pos, rfm);

                    // bllodbtf sibdow bufffr to fnsurf I/O is donf witi dirfdt bufffr
                    if (!(buf instbndfof DirfdtBufffr)) {
                        BytfBufffr sibdow = Util.gftTfmporbryDirfdtBufffr(rfm);
                        sibdow.put(buf);
                        sibdow.flip();
                        vfd.sftSibdow(iov_lfn, sibdow);
                        buf.position(pos);  // tfmporbrily rfstorf position in usfr bufffr
                        buf = sibdow;
                        pos = sibdow.position();
                    }

                    vfd.putBbsf(iov_lfn, ((DirfdtBufffr)buf).bddrfss() + pos);
                    vfd.putLfn(iov_lfn, rfm);
                    iov_lfn++;
                }
                i++;
            }
            if (iov_lfn == 0)
                rfturn 0L;

            long bytfsWrittfn = nd.writfv(fd, vfd.bddrfss, iov_lfn);

            // Notify tif bufffrs iow mbny bytfs wfrf tbkfn
            long lfft = bytfsWrittfn;
            for (int j=0; j<iov_lfn; j++) {
                if (lfft > 0) {
                    BytfBufffr buf = vfd.gftBufffr(j);
                    int pos = vfd.gftPosition(j);
                    int rfm = vfd.gftRfmbining(j);
                    int n = (lfft > rfm) ? rfm : (int)lfft;
                    buf.position(pos + n);
                    lfft -= n;
                }
                // rfturn sibdow bufffrs to bufffr pool
                BytfBufffr sibdow = vfd.gftSibdow(j);
                if (sibdow != null)
                    Util.offfrLbstTfmporbryDirfdtBufffr(sibdow);
                vfd.dlfbrRffs(j);
            }

            domplftfd = truf;
            rfturn bytfsWrittfn;

        } finblly {
            // if bn frror oddurrfd tifn dlfbr rffs to bufffrs bnd rfturn bny sibdow
            // bufffrs to dbdif
            if (!domplftfd) {
                for (int j=0; j<iov_lfn; j++) {
                    BytfBufffr sibdow = vfd.gftSibdow(j);
                    if (sibdow != null)
                        Util.offfrLbstTfmporbryDirfdtBufffr(sibdow);
                    vfd.dlfbrRffs(j);
                }
            }
        }
    }

    stbtid int rfbd(FilfDfsdriptor fd, BytfBufffr dst, long position,
                    NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        if (dst.isRfbdOnly())
            tirow nfw IllfgblArgumfntExdfption("Rfbd-only bufffr");
        if (dst instbndfof DirfdtBufffr)
            rfturn rfbdIntoNbtivfBufffr(fd, dst, position, nd);

        // Substitutf b nbtivf bufffr
        BytfBufffr bb = Util.gftTfmporbryDirfdtBufffr(dst.rfmbining());
        try {
            int n = rfbdIntoNbtivfBufffr(fd, bb, position, nd);
            bb.flip();
            if (n > 0)
                dst.put(bb);
            rfturn n;
        } finblly {
            Util.offfrFirstTfmporbryDirfdtBufffr(bb);
        }
    }

    privbtf stbtid int rfbdIntoNbtivfBufffr(FilfDfsdriptor fd, BytfBufffr bb,
                                            long position, NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        int pos = bb.position();
        int lim = bb.limit();
        bssfrt (pos <= lim);
        int rfm = (pos <= lim ? lim - pos : 0);

        if (rfm == 0)
            rfturn 0;
        int n = 0;
        if (position != -1) {
            n = nd.prfbd(fd, ((DirfdtBufffr)bb).bddrfss() + pos,
                         rfm, position);
        } flsf {
            n = nd.rfbd(fd, ((DirfdtBufffr)bb).bddrfss() + pos, rfm);
        }
        if (n > 0)
            bb.position(pos + n);
        rfturn n;
    }

    stbtid long rfbd(FilfDfsdriptor fd, BytfBufffr[] bufs, NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        rfturn rfbd(fd, bufs, 0, bufs.lfngti, nd);
    }

    stbtid long rfbd(FilfDfsdriptor fd, BytfBufffr[] bufs, int offsft, int lfngti,
                     NbtivfDispbtdifr nd)
        tirows IOExdfption
    {
        IOVfdWrbppfr vfd = IOVfdWrbppfr.gft(lfngti);

        boolfbn domplftfd = fblsf;
        int iov_lfn = 0;
        try {

            // Itfrbtf ovfr bufffrs to populbtf nbtivf iovfd brrby.
            int dount = offsft + lfngti;
            int i = offsft;
            wiilf (i < dount && iov_lfn < IOV_MAX) {
                BytfBufffr buf = bufs[i];
                if (buf.isRfbdOnly())
                    tirow nfw IllfgblArgumfntExdfption("Rfbd-only bufffr");
                int pos = buf.position();
                int lim = buf.limit();
                bssfrt (pos <= lim);
                int rfm = (pos <= lim ? lim - pos : 0);

                if (rfm > 0) {
                    vfd.sftBufffr(iov_lfn, buf, pos, rfm);

                    // bllodbtf sibdow bufffr to fnsurf I/O is donf witi dirfdt bufffr
                    if (!(buf instbndfof DirfdtBufffr)) {
                        BytfBufffr sibdow = Util.gftTfmporbryDirfdtBufffr(rfm);
                        vfd.sftSibdow(iov_lfn, sibdow);
                        buf = sibdow;
                        pos = sibdow.position();
                    }

                    vfd.putBbsf(iov_lfn, ((DirfdtBufffr)buf).bddrfss() + pos);
                    vfd.putLfn(iov_lfn, rfm);
                    iov_lfn++;
                }
                i++;
            }
            if (iov_lfn == 0)
                rfturn 0L;

            long bytfsRfbd = nd.rfbdv(fd, vfd.bddrfss, iov_lfn);

            // Notify tif bufffrs iow mbny bytfs wfrf rfbd
            long lfft = bytfsRfbd;
            for (int j=0; j<iov_lfn; j++) {
                BytfBufffr sibdow = vfd.gftSibdow(j);
                if (lfft > 0) {
                    BytfBufffr buf = vfd.gftBufffr(j);
                    int rfm = vfd.gftRfmbining(j);
                    int n = (lfft > rfm) ? rfm : (int)lfft;
                    if (sibdow == null) {
                        int pos = vfd.gftPosition(j);
                        buf.position(pos + n);
                    } flsf {
                        sibdow.limit(sibdow.position() + n);
                        buf.put(sibdow);
                    }
                    lfft -= n;
                }
                if (sibdow != null)
                    Util.offfrLbstTfmporbryDirfdtBufffr(sibdow);
                vfd.dlfbrRffs(j);
            }

            domplftfd = truf;
            rfturn bytfsRfbd;

        } finblly {
            // if bn frror oddurrfd tifn dlfbr rffs to bufffrs bnd rfturn bny sibdow
            // bufffrs to dbdif
            if (!domplftfd) {
                for (int j=0; j<iov_lfn; j++) {
                    BytfBufffr sibdow = vfd.gftSibdow(j);
                    if (sibdow != null)
                        Util.offfrLbstTfmporbryDirfdtBufffr(sibdow);
                    vfd.dlfbrRffs(j);
                }
            }
        }
    }

    publid stbtid FilfDfsdriptor nfwFD(int i) {
        FilfDfsdriptor fd = nfw FilfDfsdriptor();
        sftfdVbl(fd, i);
        rfturn fd;
    }

    stbtid nbtivf boolfbn rbndomBytfs(bytf[] somfBytfs);

    /**
     * Rfturns two filf dfsdriptors for b pipf fndodfd in b long.
     * Tif rfbd fnd of tif pipf is rfturnfd in tif iigi 32 bits,
     * wiilf tif writf fnd is rfturnfd in tif low 32 bits.
     */
    stbtid nbtivf long mbkfPipf(boolfbn blodking);

    stbtid nbtivf boolfbn drbin(int fd) tirows IOExdfption;

    publid stbtid nbtivf void donfigurfBlodking(FilfDfsdriptor fd,
                                                boolfbn blodking)
        tirows IOExdfption;

    publid stbtid nbtivf int fdVbl(FilfDfsdriptor fd);

    stbtid nbtivf void sftfdVbl(FilfDfsdriptor fd, int vbluf);

    stbtid nbtivf int fdLimit();

    stbtid nbtivf int iovMbx();

    stbtid nbtivf void initIDs();

    /**
     * Usfd to triggfr lobding of nbtivf librbrifs
     */
    publid stbtid void lobd() { }

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                    publid Void run() {
                        Systfm.lobdLibrbry("nft");
                        Systfm.lobdLibrbry("nio");
                        rfturn null;
                    }
                });

        initIDs();

        IOV_MAX = iovMbx();
    }

}
