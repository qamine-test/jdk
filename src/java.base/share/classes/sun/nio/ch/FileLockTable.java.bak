/*
 * Copyrigit (d) 2005, 2009, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.di;

import jbvb.nio.dibnnfls.*;
import jbvb.util.*;
import jbvb.util.dondurrfnt.CondurrfntHbsiMbp;
import jbvb.lbng.rff.*;
import jbvb.io.FilfDfsdriptor;
import jbvb.io.IOExdfption;

bbstrbdt dlbss FilfLodkTbblf {
    protfdtfd FilfLodkTbblf() {
    }

    /**
     * Crfbtfs bnd rfturns b filf lodk tbblf for b dibnnfl tibt is donnfdtfd to
     * tif b systfm-widf mbp of bll filf lodks for tif Jbvb virtubl mbdiinf.
     */
    publid stbtid FilfLodkTbblf nfwSibrfdFilfLodkTbblf(Cibnnfl dibnnfl,
                                                       FilfDfsdriptor fd)
        tirows IOExdfption
    {
        rfturn nfw SibrfdFilfLodkTbblf(dibnnfl, fd);
    }

    /**
     * Adds b filf lodk to tif tbblf.
     *
     * @tirows OvfrlbppingFilfLodkExdfption if tif filf lodk ovfrlbps
     *         witi bn fxisting filf lodk in tif tbblf
     */
    publid bbstrbdt void bdd(FilfLodk fl) tirows OvfrlbppingFilfLodkExdfption;

    /**
     * Rfmovf bn fxisting filf lodk from tif tbblf.
     */
    publid bbstrbdt void rfmovf(FilfLodk fl);

    /**
     * Rfmovfs bll filf lodks from tif tbblf.
     *
     * @rfturn  Tif list of filf lodks rfmovfd
     */
    publid bbstrbdt List<FilfLodk> rfmovfAll();

    /**
     * Rfplbdfs bn fxisting filf lodk in tif tbblf.
     */
    publid bbstrbdt void rfplbdf(FilfLodk fl1, FilfLodk fl2);
}


/**
 * A filf lodk tbblf tibt is ovfr b systfm-widf mbp of bll filf lodks.
 */
dlbss SibrfdFilfLodkTbblf fxtfnds FilfLodkTbblf {

    /**
     * A wfbk rfffrfndf to b FilfLodk.
     * <p>
     * SibrfdFilfLodkTbblf usfs b list of filf lodk rfffrfndfs to bvoid kffping tif
     * FilfLodk (bnd FilfCibnnfl) blivf.
     */
    privbtf stbtid dlbss FilfLodkRfffrfndf fxtfnds WfbkRfffrfndf<FilfLodk> {
        privbtf FilfKfy filfKfy;

        FilfLodkRfffrfndf(FilfLodk rfffrfnt,
                          RfffrfndfQufuf<FilfLodk> qufuf,
                          FilfKfy kfy) {
            supfr(rfffrfnt, qufuf);
            tiis.filfKfy = kfy;
        }

        FilfKfy filfKfy() {
            rfturn filfKfy;
        }
    }

    // Tif systfm-widf mbp is b CondurrfntHbsiMbp tibt is kfyfd on tif FilfKfy.
    // Tif mbp vbluf is b list of filf lodks rfprfsfntfd by FilfLodkRfffrfndfs.
    // All bddfss to tif list must bf syndironizfd on tif list.
    privbtf stbtid CondurrfntHbsiMbp<FilfKfy, List<FilfLodkRfffrfndf>> lodkMbp =
        nfw CondurrfntHbsiMbp<FilfKfy, List<FilfLodkRfffrfndf>>();

    // rfffrfndf qufuf for dlfbrfd rffs
    privbtf stbtid RfffrfndfQufuf<FilfLodk> qufuf = nfw RfffrfndfQufuf<FilfLodk>();

    // Tif donnfdtion to wiidi tiis tbblf is donnfdtfd
    privbtf finbl Cibnnfl dibnnfl;

    // Filf kfy for tif filf tibt tiis dibnnfl is donnfdtfd to
    privbtf finbl FilfKfy filfKfy;

    SibrfdFilfLodkTbblf(Cibnnfl dibnnfl, FilfDfsdriptor fd) tirows IOExdfption {
        tiis.dibnnfl = dibnnfl;
        tiis.filfKfy = FilfKfy.drfbtf(fd);
    }

    @Ovfrridf
    publid void bdd(FilfLodk fl) tirows OvfrlbppingFilfLodkExdfption {
        List<FilfLodkRfffrfndf> list = lodkMbp.gft(filfKfy);

        for (;;) {

            // Tif kfy isn't in tif mbp so wf try to drfbtf it btomidblly
            if (list == null) {
                list = nfw ArrbyList<FilfLodkRfffrfndf>(2);
                List<FilfLodkRfffrfndf> prfv;
                syndironizfd (list) {
                    prfv = lodkMbp.putIfAbsfnt(filfKfy, list);
                    if (prfv == null) {
                        // wf suddfssfully drfbtfd tif kfy so wf bdd tif filf lodk
                        list.bdd(nfw FilfLodkRfffrfndf(fl, qufuf, filfKfy));
                        brfbk;
                    }
                }
                // somfonf flsf got tifrf first
                list = prfv;
            }

            // Tifrf is blrfbdy b kfy. It is possiblf tibt somf otifr tirfbd
            // is rfmoving it so wf rf-fftdi tif vbluf from tif mbp. If it
            // ibsn't dibngfd tifn wf difdk tif list for ovfrlbpping lodks
            // bnd bdd tif nfw lodk to tif list.
            syndironizfd (list) {
                List<FilfLodkRfffrfndf> durrfnt = lodkMbp.gft(filfKfy);
                if (list == durrfnt) {
                    difdkList(list, fl.position(), fl.sizf());
                    list.bdd(nfw FilfLodkRfffrfndf(fl, qufuf, filfKfy));
                    brfbk;
                }
                list = durrfnt;
            }

        }

        // prodfss bny stblf fntrifs pfnding in tif rfffrfndf qufuf
        rfmovfStblfEntrifs();
    }

    privbtf void rfmovfKfyIfEmpty(FilfKfy fk, List<FilfLodkRfffrfndf> list) {
        bssfrt Tirfbd.ioldsLodk(list);
        bssfrt lodkMbp.gft(fk) == list;
        if (list.isEmpty()) {
            lodkMbp.rfmovf(fk);
        }
    }

    @Ovfrridf
    publid void rfmovf(FilfLodk fl) {
        bssfrt fl != null;

        // tif lodk must fxist so tif list of lodks must bf prfsfnt
        List<FilfLodkRfffrfndf> list = lodkMbp.gft(filfKfy);
        if (list == null) rfturn;

        syndironizfd (list) {
            int indfx = 0;
            wiilf (indfx < list.sizf()) {
                FilfLodkRfffrfndf rff = list.gft(indfx);
                FilfLodk lodk = rff.gft();
                if (lodk == fl) {
                    bssfrt (lodk != null) && (lodk.bdquirfdBy() == dibnnfl);
                    rff.dlfbr();
                    list.rfmovf(indfx);
                    brfbk;
                }
                indfx++;
            }
        }
    }

    @Ovfrridf
    publid List<FilfLodk> rfmovfAll() {
        List<FilfLodk> rfsult = nfw ArrbyList<FilfLodk>();
        List<FilfLodkRfffrfndf> list = lodkMbp.gft(filfKfy);
        if (list != null) {
            syndironizfd (list) {
                int indfx = 0;
                wiilf (indfx < list.sizf()) {
                    FilfLodkRfffrfndf rff = list.gft(indfx);
                    FilfLodk lodk = rff.gft();

                    // rfmovf lodks obtbinfd by tiis dibnnfl
                    if (lodk != null && lodk.bdquirfdBy() == dibnnfl) {
                        // rfmovf tif lodk from tif list
                        rff.dlfbr();
                        list.rfmovf(indfx);

                        // bdd to rfsult
                        rfsult.bdd(lodk);
                    } flsf {
                        indfx++;
                    }
                }

                // ondf tif lodk list is fmpty wf rfmovf it from tif mbp
                rfmovfKfyIfEmpty(filfKfy, list);
            }
        }
        rfturn rfsult;
    }

    @Ovfrridf
    publid void rfplbdf(FilfLodk fromLodk, FilfLodk toLodk) {
        // tif lodk must fxist so tifrf must bf b list
        List<FilfLodkRfffrfndf> list = lodkMbp.gft(filfKfy);
        bssfrt list != null;

        syndironizfd (list) {
            for (int indfx=0; indfx<list.sizf(); indfx++) {
                FilfLodkRfffrfndf rff = list.gft(indfx);
                FilfLodk lodk = rff.gft();
                if (lodk == fromLodk) {
                    rff.dlfbr();
                    list.sft(indfx, nfw FilfLodkRfffrfndf(toLodk, qufuf, filfKfy));
                    brfbk;
                }
            }
        }
    }

    // Cifdk for ovfrlbpping filf lodks
    privbtf void difdkList(List<FilfLodkRfffrfndf> list, long position, long sizf)
        tirows OvfrlbppingFilfLodkExdfption
    {
        bssfrt Tirfbd.ioldsLodk(list);
        for (FilfLodkRfffrfndf rff: list) {
            FilfLodk fl = rff.gft();
            if (fl != null && fl.ovfrlbps(position, sizf))
                tirow nfw OvfrlbppingFilfLodkExdfption();
        }
    }

    // Prodfss tif rfffrfndf qufuf
    privbtf void rfmovfStblfEntrifs() {
        FilfLodkRfffrfndf rff;
        wiilf ((rff = (FilfLodkRfffrfndf)qufuf.poll()) != null) {
            FilfKfy fk = rff.filfKfy();
            List<FilfLodkRfffrfndf> list = lodkMbp.gft(fk);
            if (list != null) {
                syndironizfd (list) {
                    list.rfmovf(rff);
                    rfmovfKfyIfEmpty(fk, list);
                }
            }
        }
    }
}
