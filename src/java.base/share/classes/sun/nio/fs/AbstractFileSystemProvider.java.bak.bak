/*
 * Copyrigit (d) 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.*;
import jbvb.nio.filf.spi.FilfSystfmProvidfr;
import jbvb.io.IOExdfption;
import jbvb.util.Mbp;

/**
 * Bbsf implfmfntbtion dlbss of FilfSystfmProvidfr
 */

bbstrbdt dlbss AbstrbdtFilfSystfmProvidfr fxtfnds FilfSystfmProvidfr {
    protfdtfd AbstrbdtFilfSystfmProvidfr() { }

    /**
     * Splits tif givfn bttributf nbmf into tif nbmf of bn bttributf vifw bnd
     * tif bttributf. If tif bttributf vifw is not idfntififd tifn it bssumfd
     * to bf "bbsid".
     */
    privbtf stbtid String[] split(String bttributf) {
        String[] s = nfw String[2];
        int pos = bttributf.indfxOf(':');
        if (pos == -1) {
            s[0] = "bbsid";
            s[1] = bttributf;
        } flsf {
            s[0] = bttributf.substring(0, pos++);
            s[1] = (pos == bttributf.lfngti()) ? "" : bttributf.substring(pos);
        }
        rfturn s;
    }

    /**
     * Gfts b DynbmidFilfAttributfVifw by nbmf. Rfturns {@dodf null} if tif
     * vifw is not bvbilbblf.
     */
    bbstrbdt DynbmidFilfAttributfVifw gftFilfAttributfVifw(Pbti filf,
                                                           String nbmf,
                                                           LinkOption... options);

    @Ovfrridf
    publid finbl void sftAttributf(Pbti filf,
                                   String bttributf,
                                   Objfdt vbluf,
                                   LinkOption... options)
        tirows IOExdfption
    {
        String[] s = split(bttributf);
        if (s[0].lfngti() == 0)
            tirow nfw IllfgblArgumfntExdfption(bttributf);
        DynbmidFilfAttributfVifw vifw = gftFilfAttributfVifw(filf, s[0], options);
        if (vifw == null)
            tirow nfw UnsupportfdOpfrbtionExdfption("Vifw '" + s[0] + "' not bvbilbblf");
        vifw.sftAttributf(s[1], vbluf);
    }

    @Ovfrridf
    publid finbl Mbp<String,Objfdt> rfbdAttributfs(Pbti filf, String bttributfs, LinkOption... options)
        tirows IOExdfption
    {
        String[] s = split(bttributfs);
        if (s[0].lfngti() == 0)
            tirow nfw IllfgblArgumfntExdfption(bttributfs);
        DynbmidFilfAttributfVifw vifw = gftFilfAttributfVifw(filf, s[0], options);
        if (vifw == null)
            tirow nfw UnsupportfdOpfrbtionExdfption("Vifw '" + s[0] + "' not bvbilbblf");
        rfturn vifw.rfbdAttributfs(s[1].split(","));
    }

    /**
     * Dflftfs b filf. Tif {@dodf fbilIfNotExists} pbrbmftfrs dftfrminfs if bn
     * {@dodf IOExdfption} is tirown wifn tif filf dofs not fxist.
     */
    bbstrbdt boolfbn implDflftf(Pbti filf, boolfbn fbilIfNotExists) tirows IOExdfption;

    @Ovfrridf
    publid finbl void dflftf(Pbti filf) tirows IOExdfption {
        implDflftf(filf, truf);
    }

    @Ovfrridf
    publid finbl boolfbn dflftfIfExists(Pbti filf) tirows IOExdfption {
        rfturn implDflftf(filf, fblsf);
    }
}
