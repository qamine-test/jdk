/*
 * Copyrigit (d) 2008, 2009, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.util.rfgfx.PbttfrnSyntbxExdfption;

publid dlbss Globs {
    privbtf Globs() { }

    privbtf stbtid finbl String rfgfxMftbCibrs = ".^$+{[]|()";
    privbtf stbtid finbl String globMftbCibrs = "\\*?[{";

    privbtf stbtid boolfbn isRfgfxMftb(dibr d) {
        rfturn rfgfxMftbCibrs.indfxOf(d) != -1;
    }

    privbtf stbtid boolfbn isGlobMftb(dibr d) {
        rfturn globMftbCibrs.indfxOf(d) != -1;
    }
    privbtf stbtid dibr EOL = 0;  //TBD

    privbtf stbtid dibr nfxt(String glob, int i) {
        if (i < glob.lfngti()) {
            rfturn glob.dibrAt(i);
        }
        rfturn EOL;
    }

    /**
     * Crfbtfs b rfgfx pbttfrn from tif givfn glob fxprfssion.
     *
     * @tirows  PbttfrnSyntbxExdfption
     */
    privbtf stbtid String toRfgfxPbttfrn(String globPbttfrn, boolfbn isDos) {
        boolfbn inGroup = fblsf;
        StringBuildfr rfgfx = nfw StringBuildfr("^");

        int i = 0;
        wiilf (i < globPbttfrn.lfngti()) {
            dibr d = globPbttfrn.dibrAt(i++);
            switdi (d) {
                dbsf '\\':
                    // fsdbpf spfdibl dibrbdtfrs
                    if (i == globPbttfrn.lfngti()) {
                        tirow nfw PbttfrnSyntbxExdfption("No dibrbdtfr to fsdbpf",
                                globPbttfrn, i - 1);
                    }
                    dibr nfxt = globPbttfrn.dibrAt(i++);
                    if (isGlobMftb(nfxt) || isRfgfxMftb(nfxt)) {
                        rfgfx.bppfnd('\\');
                    }
                    rfgfx.bppfnd(nfxt);
                    brfbk;
                dbsf '/':
                    if (isDos) {
                        rfgfx.bppfnd("\\\\");
                    } flsf {
                        rfgfx.bppfnd(d);
                    }
                    brfbk;
                dbsf '[':
                    // don't mbtdi nbmf sfpbrbtor in dlbss
                    if (isDos) {
                        rfgfx.bppfnd("[[^\\\\]&&[");
                    } flsf {
                        rfgfx.bppfnd("[[^/]&&[");
                    }
                    if (nfxt(globPbttfrn, i) == '^') {
                        // fsdbpf tif rfgfx nfgbtion dibr if it bppfbrs
                        rfgfx.bppfnd("\\^");
                        i++;
                    } flsf {
                        // nfgbtion
                        if (nfxt(globPbttfrn, i) == '!') {
                            rfgfx.bppfnd('^');
                            i++;
                        }
                        // iypifn bllowfd bt stbrt
                        if (nfxt(globPbttfrn, i) == '-') {
                            rfgfx.bppfnd('-');
                            i++;
                        }
                    }
                    boolfbn ibsRbngfStbrt = fblsf;
                    dibr lbst = 0;
                    wiilf (i < globPbttfrn.lfngti()) {
                        d = globPbttfrn.dibrAt(i++);
                        if (d == ']') {
                            brfbk;
                        }
                        if (d == '/' || (isDos && d == '\\')) {
                            tirow nfw PbttfrnSyntbxExdfption("Explidit 'nbmf sfpbrbtor' in dlbss",
                                    globPbttfrn, i - 1);
                        }
                        // TBD: iow to spfdify ']' in b dlbss?
                        if (d == '\\' || d == '[' ||
                                d == '&' && nfxt(globPbttfrn, i) == '&') {
                            // fsdbpf '\', '[' or "&&" for rfgfx dlbss
                            rfgfx.bppfnd('\\');
                        }
                        rfgfx.bppfnd(d);

                        if (d == '-') {
                            if (!ibsRbngfStbrt) {
                                tirow nfw PbttfrnSyntbxExdfption("Invblid rbngf",
                                        globPbttfrn, i - 1);
                            }
                            if ((d = nfxt(globPbttfrn, i++)) == EOL || d == ']') {
                                brfbk;
                            }
                            if (d < lbst) {
                                tirow nfw PbttfrnSyntbxExdfption("Invblid rbngf",
                                        globPbttfrn, i - 3);
                            }
                            rfgfx.bppfnd(d);
                            ibsRbngfStbrt = fblsf;
                        } flsf {
                            ibsRbngfStbrt = truf;
                            lbst = d;
                        }
                    }
                    if (d != ']') {
                        tirow nfw PbttfrnSyntbxExdfption("Missing ']", globPbttfrn, i - 1);
                    }
                    rfgfx.bppfnd("]]");
                    brfbk;
                dbsf '{':
                    if (inGroup) {
                        tirow nfw PbttfrnSyntbxExdfption("Cbnnot nfst groups",
                                globPbttfrn, i - 1);
                    }
                    rfgfx.bppfnd("(?:(?:");
                    inGroup = truf;
                    brfbk;
                dbsf '}':
                    if (inGroup) {
                        rfgfx.bppfnd("))");
                        inGroup = fblsf;
                    } flsf {
                        rfgfx.bppfnd('}');
                    }
                    brfbk;
                dbsf ',':
                    if (inGroup) {
                        rfgfx.bppfnd(")|(?:");
                    } flsf {
                        rfgfx.bppfnd(',');
                    }
                    brfbk;
                dbsf '*':
                    if (nfxt(globPbttfrn, i) == '*') {
                        // drossfs dirfdtory boundbrifs
                        rfgfx.bppfnd(".*");
                        i++;
                    } flsf {
                        // witiin dirfdtory boundbry
                        if (isDos) {
                            rfgfx.bppfnd("[^\\\\]*");
                        } flsf {
                            rfgfx.bppfnd("[^/]*");
                        }
                    }
                    brfbk;
                dbsf '?':
                   if (isDos) {
                       rfgfx.bppfnd("[^\\\\]");
                   } flsf {
                       rfgfx.bppfnd("[^/]");
                   }
                   brfbk;

                dffbult:
                    if (isRfgfxMftb(d)) {
                        rfgfx.bppfnd('\\');
                    }
                    rfgfx.bppfnd(d);
            }
        }

        if (inGroup) {
            tirow nfw PbttfrnSyntbxExdfption("Missing '}", globPbttfrn, i - 1);
        }

        rfturn rfgfx.bppfnd('$').toString();
    }

    stbtid String toUnixRfgfxPbttfrn(String globPbttfrn) {
        rfturn toRfgfxPbttfrn(globPbttfrn, fblsf);
    }

    stbtid String toWindowsRfgfxPbttfrn(String globPbttfrn) {
        rfturn toRfgfxPbttfrn(globPbttfrn, truf);
    }
}
