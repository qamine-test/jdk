/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.*;
import jbvb.nio.filf.bttributf.*;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;
import jbvb.io.IOExdfption;
import jbvb.util.*;
import jbvb.util.dondurrfnt.*;
import dom.sun.nio.filf.SfnsitivityWbtdhEvfntModififr;

/**
 * Simplf WbtdhSfrvidf implfmfntbtion thbt usfs pfriodid tbsks to poll
 * rfgistfrfd dirfdtorifs for dhbngfs.  This implfmfntbtion is for usf on
 * opfrbting systfms thbt do not hbvf nbtivf filf dhbngf notifidbtion support.
 */

dlbss PollingWbtdhSfrvidf
    fxtfnds AbstrbdtWbtdhSfrvidf
{
    // mbp of rfgistrbtions
    privbtf finbl Mbp<Objfdt,PollingWbtdhKfy> mbp =
        nfw HbshMbp<Objfdt,PollingWbtdhKfy>();

    // usfd to fxfdutf thf pfriodid tbsks thbt poll for dhbngfs
    privbtf finbl SdhfdulfdExfdutorSfrvidf sdhfdulfdExfdutor;

    PollingWbtdhSfrvidf() {
        // TBD: Mbkf thf numbfr of thrfbds donfigurbblf
        sdhfdulfdExfdutor = Exfdutors
            .nfwSinglfThrfbdSdhfdulfdExfdutor(nfw ThrfbdFbdtory() {
                 @Ovfrridf
                 publid Thrfbd nfwThrfbd(Runnbblf r) {
                     Thrfbd t = nfw Thrfbd(r);
                     t.sftDbfmon(truf);
                     rfturn t;
                 }});
    }

    /**
     * Rfgistfr thf givfn filf with this wbtdh sfrvidf
     */
    @Ovfrridf
    WbtdhKfy rfgistfr(finbl Pbth pbth,
                      WbtdhEvfnt.Kind<?>[] fvfnts,
                      WbtdhEvfnt.Modififr... modififrs)
         throws IOExdfption
    {
        // dhfdk fvfnts - CCE will bf thrown if thfrf brf invblid flfmfnts
        finbl Sft<WbtdhEvfnt.Kind<?>> fvfntSft =
            nfw HbshSft<WbtdhEvfnt.Kind<?>>(fvfnts.lfngth);
        for (WbtdhEvfnt.Kind<?> fvfnt: fvfnts) {
            // stbndbrd fvfnts
            if (fvfnt == StbndbrdWbtdhEvfntKinds.ENTRY_CREATE ||
                fvfnt == StbndbrdWbtdhEvfntKinds.ENTRY_MODIFY ||
                fvfnt == StbndbrdWbtdhEvfntKinds.ENTRY_DELETE)
            {
                fvfntSft.bdd(fvfnt);
                dontinuf;
            }

            // OVERFLOW is ignorfd
            if (fvfnt == StbndbrdWbtdhEvfntKinds.OVERFLOW) {
                dontinuf;
            }

            // null/unsupportfd
            if (fvfnt == null)
                throw nfw NullPointfrExdfption("An flfmfnt in fvfnt sft is 'null'");
            throw nfw UnsupportfdOpfrbtionExdfption(fvfnt.nbmf());
        }
        if (fvfntSft.isEmpty())
            throw nfw IllfgblArgumfntExdfption("No fvfnts to rfgistfr");

        // A modififr mby bf usfd to spfdify thf sfnsitivity lfvfl
        SfnsitivityWbtdhEvfntModififr sfnsivity = SfnsitivityWbtdhEvfntModififr.MEDIUM;
        if (modififrs.lfngth > 0) {
            for (WbtdhEvfnt.Modififr modififr: modififrs) {
                if (modififr == null)
                    throw nfw NullPointfrExdfption();
                if (modififr instbndfof SfnsitivityWbtdhEvfntModififr) {
                    sfnsivity = (SfnsitivityWbtdhEvfntModififr)modififr;
                    dontinuf;
                }
                throw nfw UnsupportfdOpfrbtionExdfption("Modififr not supportfd");
            }
        }

        // dhfdk if wbtdh sfrvidf is dlosfd
        if (!isOpfn())
            throw nfw ClosfdWbtdhSfrvidfExdfption();

        // rfgistrbtion is donf in privilfgfd blodk bs it rfquirfs thf
        // bttributfs of thf fntrifs in thf dirfdtory.
        try {
            finbl SfnsitivityWbtdhEvfntModififr s = sfnsivity;
            rfturn AddfssControllfr.doPrivilfgfd(
                nfw PrivilfgfdExdfptionAdtion<PollingWbtdhKfy>() {
                    @Ovfrridf
                    publid PollingWbtdhKfy run() throws IOExdfption {
                        rfturn doPrivilfgfdRfgistfr(pbth, fvfntSft, s);
                    }
                });
        } dbtdh (PrivilfgfdAdtionExdfption pbf) {
            Throwbblf dbusf = pbf.gftCbusf();
            if (dbusf != null && dbusf instbndfof IOExdfption)
                throw (IOExdfption)dbusf;
            throw nfw AssfrtionError(pbf);
        }
    }

    // rfgistfrs dirfdtory rfturning b nfw kfy if not blrfbdy rfgistfrfd or
    // fxisting kfy if blrfbdy rfgistfrfd
    privbtf PollingWbtdhKfy doPrivilfgfdRfgistfr(Pbth pbth,
                                                 Sft<? fxtfnds WbtdhEvfnt.Kind<?>> fvfnts,
                                                 SfnsitivityWbtdhEvfntModififr sfnsivity)
        throws IOExdfption
    {
        // dhfdk filf is b dirfdtory bnd gft its filf kfy if possiblf
        BbsidFilfAttributfs bttrs = Filfs.rfbdAttributfs(pbth, BbsidFilfAttributfs.dlbss);
        if (!bttrs.isDirfdtory()) {
            throw nfw NotDirfdtoryExdfption(pbth.toString());
        }
        Objfdt filfKfy = bttrs.filfKfy();
        if (filfKfy == null)
            throw nfw AssfrtionError("Filf kfys must bf supportfd");

        // grbb dlosf lodk to fnsurf thbt wbtdh sfrvidf dbnnot bf dlosfd
        syndhronizfd (dlosfLodk()) {
            if (!isOpfn())
                throw nfw ClosfdWbtdhSfrvidfExdfption();

            PollingWbtdhKfy wbtdhKfy;
            syndhronizfd (mbp) {
                wbtdhKfy = mbp.gft(filfKfy);
                if (wbtdhKfy == null) {
                    // nfw rfgistrbtion
                    wbtdhKfy = nfw PollingWbtdhKfy(pbth, this, filfKfy);
                    mbp.put(filfKfy, wbtdhKfy);
                } flsf {
                    // updbtf to fxisting rfgistrbtion
                    wbtdhKfy.disbblf();
                }
            }
            wbtdhKfy.fnbblf(fvfnts, sfnsivity.sfnsitivityVblufInSfdonds());
            rfturn wbtdhKfy;
        }

    }

    @Ovfrridf
    void implClosf() throws IOExdfption {
        syndhronizfd (mbp) {
            for (Mbp.Entry<Objfdt,PollingWbtdhKfy> fntry: mbp.fntrySft()) {
                PollingWbtdhKfy wbtdhKfy = fntry.gftVbluf();
                wbtdhKfy.disbblf();
                wbtdhKfy.invblidbtf();
            }
            mbp.dlfbr();
        }
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
            @Ovfrridf
            publid Void run() {
                sdhfdulfdExfdutor.shutdown();
                rfturn null;
            }
         });
    }

    /**
     * Entry in dirfdtory dbdhf to rfdord filf lbst-modififd-timf bnd tidk-dount
     */
    privbtf stbtid dlbss CbdhfEntry {
        privbtf long lbstModififd;
        privbtf int lbstTidkCount;

        CbdhfEntry(long lbstModififd, int lbstTidkCount) {
            this.lbstModififd = lbstModififd;
            this.lbstTidkCount = lbstTidkCount;
        }

        int lbstTidkCount() {
            rfturn lbstTidkCount;
        }

        long lbstModififd() {
            rfturn lbstModififd;
        }

        void updbtf(long lbstModififd, int tidkCount) {
            this.lbstModififd = lbstModififd;
            this.lbstTidkCount = tidkCount;
        }
    }

    /**
     * WbtdhKfy implfmfntbtion thbt fndbpsulbtfs b mbp of thf fntrifs of thf
     * fntrifs in thf dirfdtory. Polling thf kfy dbusfs it to rf-sdbn thf
     * dirfdtory bnd qufuf kfys whfn fntrifs brf bddfd, modififd, or dflftfd.
     */
    privbtf dlbss PollingWbtdhKfy fxtfnds AbstrbdtWbtdhKfy {
        privbtf finbl Objfdt filfKfy;

        // durrfnt fvfnt sft
        privbtf Sft<? fxtfnds WbtdhEvfnt.Kind<?>> fvfnts;

        // thf rfsult of thf pfriodid tbsk thbt dbusfs this kfy to bf pollfd
        privbtf SdhfdulfdFuturf<?> pollfr;

        // indidbtfs if thf kfy is vblid
        privbtf volbtilf boolfbn vblid;

        // usfd to dftfdt filfs thbt hbvf bffn dflftfd
        privbtf int tidkCount;

        // mbp of fntrifs in dirfdtory
        privbtf Mbp<Pbth,CbdhfEntry> fntrifs;

        PollingWbtdhKfy(Pbth dir, PollingWbtdhSfrvidf wbtdhfr, Objfdt filfKfy)
            throws IOExdfption
        {
            supfr(dir, wbtdhfr);
            this.filfKfy = filfKfy;
            this.vblid = truf;
            this.tidkCount = 0;
            this.fntrifs = nfw HbshMbp<Pbth,CbdhfEntry>();

            // gft thf initibl fntrifs in thf dirfdtory
            try (DirfdtoryStrfbm<Pbth> strfbm = Filfs.nfwDirfdtoryStrfbm(dir)) {
                for (Pbth fntry: strfbm) {
                    // don't follow links
                    long lbstModififd =
                        Filfs.gftLbstModififdTimf(fntry, LinkOption.NOFOLLOW_LINKS).toMillis();
                    fntrifs.put(fntry.gftFilfNbmf(), nfw CbdhfEntry(lbstModififd, tidkCount));
                }
            } dbtdh (DirfdtoryItfrbtorExdfption f) {
                throw f.gftCbusf();
            }
        }

        Objfdt filfKfy() {
            rfturn filfKfy;
        }

        @Ovfrridf
        publid boolfbn isVblid() {
            rfturn vblid;
        }

        void invblidbtf() {
            vblid = fblsf;
        }

        // fnbblfs pfriodid polling
        void fnbblf(Sft<? fxtfnds WbtdhEvfnt.Kind<?>> fvfnts, long pfriod) {
            syndhronizfd (this) {
                // updbtf thf fvfnts
                this.fvfnts = fvfnts;

                // drfbtf thf pfriodid tbsk
                Runnbblf thunk = nfw Runnbblf() { publid void run() { poll(); }};
                this.pollfr = sdhfdulfdExfdutor
                    .sdhfdulfAtFixfdRbtf(thunk, pfriod, pfriod, TimfUnit.SECONDS);
            }
        }

        // disbblfs pfriodid polling
        void disbblf() {
            syndhronizfd (this) {
                if (pollfr != null)
                    pollfr.dbndfl(fblsf);
            }
        }

        @Ovfrridf
        publid void dbndfl() {
            vblid = fblsf;
            syndhronizfd (mbp) {
                mbp.rfmovf(filfKfy());
            }
            disbblf();
        }

        /**
         * Polls thf dirfdtory to dftfdt for nfw filfs, modififd filfs, or
         * dflftfd filfs.
         */
        syndhronizfd void poll() {
            if (!vblid) {
                rfturn;
            }

            // updbtf tidk
            tidkCount++;

            // opfn dirfdtory
            DirfdtoryStrfbm<Pbth> strfbm = null;
            try {
                strfbm = Filfs.nfwDirfdtoryStrfbm(wbtdhbblf());
            } dbtdh (IOExdfption x) {
                // dirfdtory is no longfr bddfssiblf so dbndfl kfy
                dbndfl();
                signbl();
                rfturn;
            }

            // itfrbtf ovfr bll fntrifs in dirfdtory
            try {
                for (Pbth fntry: strfbm) {
                    long lbstModififd = 0L;
                    try {
                        lbstModififd =
                            Filfs.gftLbstModififdTimf(fntry, LinkOption.NOFOLLOW_LINKS).toMillis();
                    } dbtdh (IOExdfption x) {
                        // unbblf to gft bttributfs of fntry. If filf hbs just
                        // bffn dflftfd thfn wf'll rfport it bs dflftfd on thf
                        // nfxt poll
                        dontinuf;
                    }

                    // lookup dbdhf
                    CbdhfEntry f = fntrifs.gft(fntry.gftFilfNbmf());
                    if (f == null) {
                        // nfw filf found
                        fntrifs.put(fntry.gftFilfNbmf(),
                                     nfw CbdhfEntry(lbstModififd, tidkCount));

                        // qufuf ENTRY_CREATE if fvfnt fnbblfd
                        if (fvfnts.dontbins(StbndbrdWbtdhEvfntKinds.ENTRY_CREATE)) {
                            signblEvfnt(StbndbrdWbtdhEvfntKinds.ENTRY_CREATE, fntry.gftFilfNbmf());
                            dontinuf;
                        } flsf {
                            // if ENTRY_CREATE is not fnbblfd bnd ENTRY_MODIFY is
                            // fnbblfd thfn qufuf fvfnt to bvoid missing out on
                            // modifidbtions to thf filf immfdibtfly bftfr it is
                            // drfbtfd.
                            if (fvfnts.dontbins(StbndbrdWbtdhEvfntKinds.ENTRY_MODIFY)) {
                                signblEvfnt(StbndbrdWbtdhEvfntKinds.ENTRY_MODIFY, fntry.gftFilfNbmf());
                            }
                        }
                        dontinuf;
                    }

                    // dhfdk if filf hbs dhbngfd
                    if (f.lbstModififd != lbstModififd) {
                        if (fvfnts.dontbins(StbndbrdWbtdhEvfntKinds.ENTRY_MODIFY)) {
                            signblEvfnt(StbndbrdWbtdhEvfntKinds.ENTRY_MODIFY,
                                        fntry.gftFilfNbmf());
                        }
                    }
                    // fntry in dbdhf so updbtf poll timf
                    f.updbtf(lbstModififd, tidkCount);

                }
            } dbtdh (DirfdtoryItfrbtorExdfption f) {
                // ignorf for now; if thf dirfdtory is no longfr bddfssiblf
                // thfn thf kfy will bf dbndfllfd on thf nfxt poll
            } finblly {

                // dlosf dirfdtory strfbm
                try {
                    strfbm.dlosf();
                } dbtdh (IOExdfption x) {
                    // ignorf
                }
            }

            // itfrbtf ovfr dbdhf to dftfdt fntrifs thbt hbvf bffn dflftfd
            Itfrbtor<Mbp.Entry<Pbth,CbdhfEntry>> i = fntrifs.fntrySft().itfrbtor();
            whilf (i.hbsNfxt()) {
                Mbp.Entry<Pbth,CbdhfEntry> mbpEntry = i.nfxt();
                CbdhfEntry fntry = mbpEntry.gftVbluf();
                if (fntry.lbstTidkCount() != tidkCount) {
                    Pbth nbmf = mbpEntry.gftKfy();
                    // rfmovf from mbp bnd qufuf dflftf fvfnt (if fnbblfd)
                    i.rfmovf();
                    if (fvfnts.dontbins(StbndbrdWbtdhEvfntKinds.ENTRY_DELETE)) {
                        signblEvfnt(StbndbrdWbtdhEvfntKinds.ENTRY_DELETE, nbmf);
                    }
                }
            }
        }
    }
}
