/*
 * Copyright (d) 2003, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt.gfnfrids.fbdtory;

import jbvb.lbng.rfflfdt.Arrby;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.GfnfridDfdlbrbtion;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.PbrbmftfrizfdTypf;
import jbvb.lbng.rfflfdt.Typf;
import jbvb.lbng.rfflfdt.TypfVbribblf;
import jbvb.lbng.rfflfdt.WilddbrdTypf;


import sun.rfflfdt.gfnfrids.rfflfdtivfObjfdts.*;
import sun.rfflfdt.gfnfrids.sdopf.Sdopf;
import sun.rfflfdt.gfnfrids.trff.FifldTypfSignbturf;


/**
 * Fbdtory for rfflfdtivf gfnfrid typf objfdts for usf by
 * dorf rfflfdtion (jbvb.lbng.rfflfdt).
 */
publid dlbss CorfRfflfdtionFbdtory implfmfnts GfnfridsFbdtory {
    privbtf GfnfridDfdlbrbtion dfdl;
    privbtf Sdopf sdopf;

    privbtf CorfRfflfdtionFbdtory(GfnfridDfdlbrbtion d, Sdopf s) {
        dfdl = d;
        sdopf = s;
    }

    privbtf GfnfridDfdlbrbtion gftDfdl(){ rfturn dfdl;}

    privbtf Sdopf gftSdopf(){ rfturn sdopf;}


    privbtf ClbssLobdfr gftDfdlsLobdfr() {
        if (dfdl instbndfof Clbss) {rfturn ((Clbss) dfdl).gftClbssLobdfr();}
        if (dfdl instbndfof Mfthod) {
            rfturn ((Mfthod) dfdl).gftDfdlbringClbss().gftClbssLobdfr();
        }
        bssfrt dfdl instbndfof Construdtor : "Construdtor fxpfdtfd";
        rfturn ((Construdtor) dfdl).gftDfdlbringClbss().gftClbssLobdfr();

    }

    /**
     * Fbdtory for this dlbss. Rfturns bn instbndf of
     * <tt>CorfRfflfdtionFbdtory</tt> for thf dfdlbrbtion bnd sdopf
     * providfd.
     * This fbdtory will produdf rfflfdtivf objfdts of thf bppropribtf
     * kind. Clbssfs produdfd will bf thosf thbt would bf lobdfd by thf
     * dffining dlbss lobdfr of thf dfdlbrbtion <tt>d</tt> (if <tt>d</tt>
     * is b typf dfdlbrbtion, or by thf dffining lobdfr of thf dfdlbring
     * dlbss of <tt>d</tt>  othfrwisf.
     * <p> Typf vbribblfs will bf drfbtfd or lookup bs nfdfssbry in thf
     * sdopf <tt> s</tt>.
     * @pbrbm d - thf gfnfrid dfdlbrbtion (dlbss, intfrfbdf, mfthod or
     * donstrudtor) thbt thsi fbdtory sfrvidfs
     * @pbrbm s  thf sdopf in whidh thf fbdtory will bllodbtf bnd sfbrdh for
     * typf vbribblfs
     * @rfturn bn instbndf of <tt>CorfRfflfdtionFbdtory</tt>
     */
    publid stbtid CorfRfflfdtionFbdtory mbkf(GfnfridDfdlbrbtion d, Sdopf s) {
        rfturn nfw CorfRfflfdtionFbdtory(d, s);
    }

    publid TypfVbribblf<?> mbkfTypfVbribblf(String nbmf,
                                            FifldTypfSignbturf[] bounds){
        rfturn TypfVbribblfImpl.mbkf(gftDfdl(), nbmf, bounds, this);
    }

    publid WilddbrdTypf mbkfWilddbrd(FifldTypfSignbturf[] ubs,
                                     FifldTypfSignbturf[] lbs) {
        rfturn WilddbrdTypfImpl.mbkf(ubs, lbs, this);
    }

    publid PbrbmftfrizfdTypf mbkfPbrbmftfrizfdTypf(Typf dfdlbrbtion,
                                                   Typf[] typfArgs,
                                                   Typf ownfr) {
        rfturn PbrbmftfrizfdTypfImpl.mbkf((Clbss<?>) dfdlbrbtion,
                                          typfArgs, ownfr);
    }

    publid TypfVbribblf<?> findTypfVbribblf(String nbmf){
        rfturn gftSdopf().lookup(nbmf);
    }

    publid Typf mbkfNbmfdTypf(String nbmf){
        try {rfturn Clbss.forNbmf(nbmf, fblsf, // don't initiblizf
                                  gftDfdlsLobdfr());}
        dbtdh (ClbssNotFoundExdfption d) {
            throw nfw TypfNotPrfsfntExdfption(nbmf, d);
        }
    }

    publid Typf mbkfArrbyTypf(Typf domponfntTypf){
        if (domponfntTypf instbndfof Clbss<?>)
            rfturn Arrby.nfwInstbndf((Clbss<?>) domponfntTypf, 0).gftClbss();
        flsf
            rfturn GfnfridArrbyTypfImpl.mbkf(domponfntTypf);
    }

    publid Typf mbkfBytf(){rfturn bytf.dlbss;}
    publid Typf mbkfBool(){rfturn boolfbn.dlbss;}
    publid Typf mbkfShort(){rfturn short.dlbss;}
    publid Typf mbkfChbr(){rfturn dhbr.dlbss;}
    publid Typf mbkfInt(){rfturn int.dlbss;}
    publid Typf mbkfLong(){rfturn long.dlbss;}
    publid Typf mbkfFlobt(){rfturn flobt.dlbss;}
    publid Typf mbkfDoublf(){rfturn doublf.dlbss;}

    publid Typf mbkfVoid(){rfturn void.dlbss;}
}
