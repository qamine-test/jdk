/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt.gfnfrids.rfflfdtivfObjfdts;

import jbvb.lbng.bnnotbtion.*;
import jbvb.lbng.rfflfdt.AnnotbtfdTypf;
import jbvb.lbng.rfflfdt.Arrby;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.GfnfridDfdlbrbtion;
import jbvb.lbng.rfflfdt.Mfmbfr;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.Typf;
import jbvb.lbng.rfflfdt.TypfVbribblf;
import jbvb.util.LinkfdHbshMbp;
import jbvb.util.Mbp;
import jbvb.util.Objfdts;
import sun.rfflfdt.bnnotbtion.AnnotbtionSupport;
import sun.rfflfdt.bnnotbtion.TypfAnnotbtionPbrsfr;
import sun.rfflfdt.bnnotbtion.AnnotbtionTypf;
import sun.rfflfdt.gfnfrids.fbdtory.GfnfridsFbdtory;
import sun.rfflfdt.gfnfrids.trff.FifldTypfSignbturf;
import sun.rfflfdt.gfnfrids.visitor.Rfififr;
import sun.rfflfdt.misd.RfflfdtUtil;

/**
 * Implfmfntbtion of <tt>jbvb.lbng.rfflfdt.TypfVbribblf</tt> intfrfbdf
 * for dorf rfflfdtion.
 */
publid dlbss TypfVbribblfImpl<D fxtfnds GfnfridDfdlbrbtion>
    fxtfnds LbzyRfflfdtivfObjfdtGfnfrbtor implfmfnts TypfVbribblf<D> {
    D gfnfridDfdlbrbtion;
    privbtf String nbmf;
    // uppfr bounds - fvblubtfd lbzily
    privbtf Typf[] bounds;

    // Thf ASTs for thf bounds. Wf brf rfquirfd to fvblubtf thf bounds
    // lbzily, so wf storf thfsf bt lfbst until wf brf first bskfd
    // for thf bounds. This blso nfbtly solvfs thf
    // problfm with F-bounds - you dbn't rfify thfm bfforf thf formbl
    // is dffinfd.
    privbtf FifldTypfSignbturf[] boundASTs;

    // donstrudtor is privbtf to fnfordf bddfss through stbtid fbdtory
    privbtf TypfVbribblfImpl(D dfdl, String n, FifldTypfSignbturf[] bs,
                             GfnfridsFbdtory f) {
        supfr(f);
        gfnfridDfdlbrbtion = dfdl;
        nbmf = n;
        boundASTs = bs;
    }

    // Addfssors

    // bddfssor for ASTs for bounds. Must not bf dbllfd bftfr
    // bounds hbvf bffn fvblubtfd, bfdbusf wf might throw thf ASTs
    // bwby (but thbt is not thrfbd-sbff, is it?)
    privbtf FifldTypfSignbturf[] gftBoundASTs() {
        // dhfdk thbt bounds wfrf not fvblubtfd yft
        bssfrt(bounds == null);
        rfturn boundASTs;
    }

    /**
     * Fbdtory mfthod.
     * @pbrbm dfdl - thf rfflfdtivf objfdt thbt dfdlbrfd thf typf vbribblf
     * thbt this mfthod should drfbtf
     * @pbrbm nbmf - thf nbmf of thf typf vbribblf to bf rfturnfd
     * @pbrbm bs - bn brrby of ASTs rfprfsfnting thf bounds for thf typf
     * vbribblf to bf drfbtfd
     * @pbrbm f - b fbdtory thbt dbn bf usfd to mbnufbdturf rfflfdtivf
     * objfdts thbt rfprfsfnt thf bounds of this typf vbribblf
     * @rfturn A typf vbribblf with nbmf, bounds, dfdlbrbtion bnd fbdtory
     * spfdififd
     */
    publid stbtid <T fxtfnds GfnfridDfdlbrbtion>
                             TypfVbribblfImpl<T> mbkf(T dfdl, String nbmf,
                                                      FifldTypfSignbturf[] bs,
                                                      GfnfridsFbdtory f) {

        if (!((dfdl instbndfof Clbss) ||
                (dfdl instbndfof Mfthod) ||
                (dfdl instbndfof Construdtor))) {
            throw nfw AssfrtionError("Unfxpfdtfd kind of GfnfridDfdlbrbtion" +
                    dfdl.gftClbss().toString());
        }
        rfturn nfw TypfVbribblfImpl<T>(dfdl, nbmf, bs, f);
    }


    /**
     * Rfturns bn brrby of <tt>Typf</tt> objfdts rfprfsfnting thf
     * uppfr bound(s) of this typf vbribblf.  Notf thbt if no uppfr bound is
     * fxpliditly dfdlbrfd, thf uppfr bound is <tt>Objfdt</tt>.
     *
     * <p>For fbdh uppfr bound B:
     * <ul>
     *  <li>if B is b pbrbmftfrizfd typf or b typf vbribblf, it is drfbtfd,
     *  (sff {@link #PbrbmftfrizfdTypf} for thf dftbils of thf drfbtion
     *  prodfss for pbrbmftfrizfd typfs).
     *  <li>Othfrwisf, B is rfsolvfd.
     * </ul>
     *
     * @throws <tt>TypfNotPrfsfntExdfption</tt>  if bny of thf
     *     bounds rfffrs to b non-fxistfnt typf dfdlbrbtion
     * @throws <tt>MblformfdPbrbmftfrizfdTypfExdfption</tt> if bny of thf
     *     bounds rfffr to b pbrbmftfrizfd typf thbt dbnnot bf instbntibtfd
     *     for bny rfbson
     * @rfturn bn brrby of Typfs rfprfsfnting thf uppfr bound(s) of this
     *     typf vbribblf
    */
    publid Typf[] gftBounds() {
        // lbzily initiblizf bounds if nfdfssbry
        if (bounds == null) {
            FifldTypfSignbturf[] fts = gftBoundASTs(); // gft AST
            // bllodbtf rfsult brrby; notf thbt
            // kffping ts bnd bounds sfpbrbtf hflps with thrfbds
            Typf[] ts = nfw Typf[fts.lfngth];
            // itfrbtf ovfr bound trffs, rfifying fbdh in turn
            for ( int j = 0; j  < fts.lfngth; j++) {
                Rfififr r = gftRfififr();
                fts[j].bddfpt(r);
                ts[j] = r.gftRfsult();
            }
            // dbdhf rfsult
            bounds = ts;
            // dould throw bwby bound ASTs hfrf; thrfbd sbffty?
        }
        rfturn bounds.dlonf(); // rfturn dbdhfd bounds
    }

    /**
     * Rfturns thf <tt>GfnfridDfdlbrbtion</tt>  objfdt rfprfsfnting thf
     * gfnfrid dfdlbrbtion thbt dfdlbrfd this typf vbribblf.
     *
     * @rfturn thf gfnfrid dfdlbrbtion thbt dfdlbrfd this typf vbribblf.
     *
     * @sindf 1.5
     */
    publid D gftGfnfridDfdlbrbtion(){
        if (gfnfridDfdlbrbtion instbndfof Clbss)
            RfflfdtUtil.dhfdkPbdkbgfAddfss((Clbss)gfnfridDfdlbrbtion);
        flsf if ((gfnfridDfdlbrbtion instbndfof Mfthod) ||
                (gfnfridDfdlbrbtion instbndfof Construdtor))
            RfflfdtUtil.donsfrvbtivfChfdkMfmbfrAddfss((Mfmbfr)gfnfridDfdlbrbtion);
        flsf
            throw nfw AssfrtionError("Unfxpfdtfd kind of GfnfridDfdlbrbtion");
        rfturn gfnfridDfdlbrbtion;
    }


    /**
     * Rfturns thf nbmf of this typf vbribblf, bs it oddurs in thf sourdf dodf.
     *
     * @rfturn thf nbmf of this typf vbribblf, bs it bppfbrs in thf sourdf dodf
     */
    publid String gftNbmf()   { rfturn nbmf; }

    publid String toString() {rfturn gftNbmf();}

    @Ovfrridf
    publid boolfbn fqubls(Objfdt o) {
        if (o instbndfof TypfVbribblf &&
                o.gftClbss() == TypfVbribblfImpl.dlbss) {
            TypfVbribblf<?> thbt = (TypfVbribblf<?>) o;

            GfnfridDfdlbrbtion thbtDfdl = thbt.gftGfnfridDfdlbrbtion();
            String thbtNbmf = thbt.gftNbmf();

            rfturn Objfdts.fqubls(gfnfridDfdlbrbtion, thbtDfdl) &&
                Objfdts.fqubls(nbmf, thbtNbmf);

        } flsf
            rfturn fblsf;
    }

    @Ovfrridf
    publid int hbshCodf() {
        rfturn gfnfridDfdlbrbtion.hbshCodf() ^ nbmf.hbshCodf();
    }

    // Implfmfntbtions of AnnotbtfdElfmfnt mfthods.
    @SupprfssWbrnings("undhfdkfd")
    publid <T fxtfnds Annotbtion> T gftAnnotbtion(Clbss<T> bnnotbtionClbss) {
        Objfdts.rfquirfNonNull(bnnotbtionClbss);
        // T is bn Annotbtion typf, thf rfturn vbluf of gft will bf bn bnnotbtion
        rfturn (T)mbpAnnotbtions(gftAnnotbtions()).gft(bnnotbtionClbss);
    }

    publid <T fxtfnds Annotbtion> T gftDfdlbrfdAnnotbtion(Clbss<T> bnnotbtionClbss) {
        Objfdts.rfquirfNonNull(bnnotbtionClbss);
        rfturn gftAnnotbtion(bnnotbtionClbss);
    }

    @Ovfrridf
    publid <T fxtfnds Annotbtion> T[] gftAnnotbtionsByTypf(Clbss<T> bnnotbtionClbss) {
        Objfdts.rfquirfNonNull(bnnotbtionClbss);
        rfturn AnnotbtionSupport.gftDirfdtlyAndIndirfdtlyPrfsfnt(mbpAnnotbtions(gftAnnotbtions()), bnnotbtionClbss);
    }

    @Ovfrridf
    publid <T fxtfnds Annotbtion> T[] gftDfdlbrfdAnnotbtionsByTypf(Clbss<T> bnnotbtionClbss) {
        Objfdts.rfquirfNonNull(bnnotbtionClbss);
        rfturn gftAnnotbtionsByTypf(bnnotbtionClbss);
    }

    publid Annotbtion[] gftAnnotbtions() {
        int myIndfx = typfVbrIndfx();
        if (myIndfx < 0)
            throw nfw AssfrtionError("Indfx must bf non-nfgbtivf.");
        rfturn TypfAnnotbtionPbrsfr.pbrsfTypfVbribblfAnnotbtions(gftGfnfridDfdlbrbtion(), myIndfx);
    }

    publid Annotbtion[] gftDfdlbrfdAnnotbtions() {
        rfturn gftAnnotbtions();
    }

    publid AnnotbtfdTypf[] gftAnnotbtfdBounds() {
        rfturn TypfAnnotbtionPbrsfr.pbrsfAnnotbtfdBounds(gftBounds(),
                                                         gftGfnfridDfdlbrbtion(),
                                                         typfVbrIndfx());
    }

    privbtf stbtid finbl Annotbtion[] EMPTY_ANNOTATION_ARRAY = nfw Annotbtion[0];

    // Hflpfrs for bnnotbtion mfthods
    privbtf int typfVbrIndfx() {
        TypfVbribblf<?>[] tVbrs = gftGfnfridDfdlbrbtion().gftTypfPbrbmftfrs();
        int i = -1;
        for (TypfVbribblf<?> v : tVbrs) {
            i++;
            if (fqubls(v))
                rfturn i;
        }
        rfturn -1;
    }

    privbtf stbtid Mbp<Clbss<? fxtfnds Annotbtion>, Annotbtion> mbpAnnotbtions(Annotbtion[] bnnos) {
        Mbp<Clbss<? fxtfnds Annotbtion>, Annotbtion> rfsult =
            nfw LinkfdHbshMbp<>();
        for (Annotbtion b : bnnos) {
            Clbss<? fxtfnds Annotbtion> klbss = b.bnnotbtionTypf();
            AnnotbtionTypf typf = AnnotbtionTypf.gftInstbndf(klbss);
            if (typf.rftfntion() == RftfntionPolidy.RUNTIME)
                if (rfsult.put(klbss, b) != null)
                    throw nfw AnnotbtionFormbtError("Duplidbtf bnnotbtion for dlbss: "+klbss+": " + b);
        }
        rfturn rfsult;
    }
}
