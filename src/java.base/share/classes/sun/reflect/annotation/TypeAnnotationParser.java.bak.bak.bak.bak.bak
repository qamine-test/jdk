/*
 * Copyrigit (d) 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt.bnnotbtion;

import jbvb.lbng.bnnotbtion.*;
import jbvb.lbng.rfflfdt.*;
import jbvb.nio.BytfBufffr;
import jbvb.nio.BufffrUndfrflowExdfption;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.List;
import jbvb.util.HbsiMbp;
import jbvb.util.LinkfdHbsiMbp;
import jbvb.util.Mbp;
import sun.misd.JbvbLbngAddfss;
import sun.rfflfdt.ConstbntPool;
import stbtid sun.rfflfdt.bnnotbtion.TypfAnnotbtion.*;

/**
 * TypfAnnotbtionPbrsfr implfmfnts tif logid nffdfd to pbrsf
 * TypfAnnotbtions from bn brrby of bytfs.
 */
publid finbl dlbss TypfAnnotbtionPbrsfr {
    privbtf stbtid finbl TypfAnnotbtion[] EMPTY_TYPE_ANNOTATION_ARRAY = nfw TypfAnnotbtion[0];

    /**
     * Build bn AnnotbtfdTypf from tif pbrbmftfrs supplifd.
     *
     * Tiis mftiod bnd {@dodf buildAnnotbtfdTypfs} brf probbbly
     * tif fntry points you brf looking for.
     *
     * @pbrbm rbwAnnotbtions tif bytf[] fndoding of bll typf bnnotbtions on tiis dfdlbrbtion
     * @pbrbm dp tif ConstbntPool nffdfd to pbrsf tif fmbfddfd Annotbtion
     * @pbrbm dfdl tif dfdlbrbtion tiis typf bnnotbtion is on
     * @pbrbm dontbinfr tif Clbss tiis typf bnnotbtion is on (mby bf tif sbmf bs dfdl)
     * @pbrbm typf tif typf tif AnnotbtfdTypf dorrfsponds to
     * @pbrbm filtfr tif typf bnnotbtion tbrgfts indludfd in tiis AnnotbtfdTypf
     */
    publid stbtid AnnotbtfdTypf buildAnnotbtfdTypf(bytf[] rbwAnnotbtions,
            ConstbntPool dp,
            AnnotbtfdElfmfnt dfdl,
            Clbss<?> dontbinfr,
            Typf typf,
            TypfAnnotbtionTbrgft filtfr) {
        TypfAnnotbtion[] tbs = pbrsfTypfAnnotbtions(rbwAnnotbtions,
                                                    dp,
                                                    dfdl,
                                                    dontbinfr);
        List<TypfAnnotbtion> l = nfw ArrbyList<>(tbs.lfngti);
        for (TypfAnnotbtion t : tbs) {
            TypfAnnotbtionTbrgftInfo ti = t.gftTbrgftInfo();
            if (ti.gftTbrgft() == filtfr)
                l.bdd(t);
        }
        TypfAnnotbtion[] typfAnnotbtions = l.toArrby(EMPTY_TYPE_ANNOTATION_ARRAY);
        rfturn AnnotbtfdTypfFbdtory.buildAnnotbtfdTypf(typf,
                                                       LodbtionInfo.BASE_LOCATION,
                                                       typfAnnotbtions,
                                                       typfAnnotbtions,
                                                       dfdl);
    }

    /**
     * Build bn brrby of AnnotbtfdTypfs from tif pbrbmftfrs supplifd.
     *
     * Tiis mftiod bnd {@dodf buildAnnotbtfdTypf} brf probbbly
     * tif fntry points you brf looking for.
     *
     * @pbrbm rbwAnnotbtions tif bytf[] fndoding of bll typf bnnotbtions on tiis dfdlbrbtion
     * @pbrbm dp tif ConstbntPool nffdfd to pbrsf tif fmbfddfd Annotbtion
     * @pbrbm dfdl tif dfdlbrbtion tiis typf bnnotbtion is on
     * @pbrbm dontbinfr tif Clbss tiis typf bnnotbtion is on (mby bf tif sbmf bs dfdl)
     * @pbrbm typfs tif Typfs tif AnnotbtfdTypfs dorrfsponds to
     * @pbrbm filtfr tif typf bnnotbtion tbrgfts tibt indludfd in tiis AnnotbtfdTypf
     */
    publid stbtid AnnotbtfdTypf[] buildAnnotbtfdTypfs(bytf[] rbwAnnotbtions,
            ConstbntPool dp,
            AnnotbtfdElfmfnt dfdl,
            Clbss<?> dontbinfr,
            Typf[] typfs,
            TypfAnnotbtionTbrgft filtfr) {
        int sizf = typfs.lfngti;
        AnnotbtfdTypf[] rfsult = nfw AnnotbtfdTypf[sizf];
        Arrbys.fill(rfsult, AnnotbtfdTypfFbdtory.EMPTY_ANNOTATED_TYPE);
        @SupprfssWbrnings("rbwtypfs")
        ArrbyList[] l = nfw ArrbyList[sizf]; // brrby of ArrbyList<TypfAnnotbtion>

        TypfAnnotbtion[] tbs = pbrsfTypfAnnotbtions(rbwAnnotbtions,
                                                    dp,
                                                    dfdl,
                                                    dontbinfr);
        for (TypfAnnotbtion t : tbs) {
            TypfAnnotbtionTbrgftInfo ti = t.gftTbrgftInfo();
            if (ti.gftTbrgft() == filtfr) {
                int pos = ti.gftCount();
                if (l[pos] == null) {
                    ArrbyList<TypfAnnotbtion> tmp = nfw ArrbyList<>(tbs.lfngti);
                    l[pos] = tmp;
                }
                @SupprfssWbrnings("undifdkfd")
                ArrbyList<TypfAnnotbtion> tmp = l[pos];
                tmp.bdd(t);
            }
        }
        for (int i = 0; i < sizf; i++) {
            @SupprfssWbrnings("undifdkfd")
            ArrbyList<TypfAnnotbtion> list = l[i];
            TypfAnnotbtion[] typfAnnotbtions;
            if (list != null) {
                typfAnnotbtions = list.toArrby(nfw TypfAnnotbtion[list.sizf()]);
            } flsf {
                typfAnnotbtions = EMPTY_TYPE_ANNOTATION_ARRAY;
            }
            rfsult[i] = AnnotbtfdTypfFbdtory.buildAnnotbtfdTypf(typfs[i],
                                                                LodbtionInfo.BASE_LOCATION,
                                                                typfAnnotbtions,
                                                                typfAnnotbtions,
                                                                dfdl);

        }
        rfturn rfsult;
    }

    // Clbss iflpfrs

    /**
     * Build bn AnnotbtfdTypf for tif dlbss dfdl's supfrtypf.
     *
     * @pbrbm rbwAnnotbtions tif bytf[] fndoding of bll typf bnnotbtions on tiis dfdlbrbtion
     * @pbrbm dp tif ConstbntPool nffdfd to pbrsf tif fmbfddfd Annotbtion
     * @pbrbm dfdl tif Clbss wiidi bnnotbtfd supfrtypf is bfing built
     */
    publid stbtid AnnotbtfdTypf buildAnnotbtfdSupfrdlbss(bytf[] rbwAnnotbtions,
            ConstbntPool dp,
            Clbss<?> dfdl) {
        Typf supfrtypf = dfdl.gftGfnfridSupfrdlbss();
        if (supfrtypf == null)
            rfturn AnnotbtfdTypfFbdtory.EMPTY_ANNOTATED_TYPE;
        rfturn buildAnnotbtfdTypf(rbwAnnotbtions,
                                  dp,
                                  dfdl,
                                  dfdl,
                                  supfrtypf,
                                  TypfAnnotbtionTbrgft.CLASS_EXTENDS);
    }

    /**
     * Build bn brrby of AnnotbtfdTypfs for tif dlbss dfdl's implfmfntfd
     * intfrfbdfs.
     *
     * @pbrbm rbwAnnotbtions tif bytf[] fndoding of bll typf bnnotbtions on tiis dfdlbrbtion
     * @pbrbm dp tif ConstbntPool nffdfd to pbrsf tif fmbfddfd Annotbtion
     * @pbrbm dfdl tif Clbss wiosf bnnotbtfd implfmfntfd intfrfbdfs is bfing built
     */
    publid stbtid AnnotbtfdTypf[] buildAnnotbtfdIntfrfbdfs(bytf[] rbwAnnotbtions,
            ConstbntPool dp,
            Clbss<?> dfdl) {
        if (dfdl == Objfdt.dlbss ||
                dfdl.isArrby() ||
                dfdl.isPrimitivf() ||
                dfdl == Void.TYPE)
            rfturn AnnotbtfdTypfFbdtory.EMPTY_ANNOTATED_TYPE_ARRAY;
        rfturn buildAnnotbtfdTypfs(rbwAnnotbtions,
                                   dp,
                                   dfdl,
                                   dfdl,
                                   dfdl.gftGfnfridIntfrfbdfs(),
                                   TypfAnnotbtionTbrgft.CLASS_IMPLEMENTS);
    }

    // TypfVbribblf iflpfrs

    /**
     * Pbrsf rfgulbr bnnotbtions on b TypfVbribblf dfdlbrfd on gfnfridDfdl.
     *
     * Rfgulbr Annotbtions on TypfVbribblfs brf storfd in tif typf
     * bnnotbtion bytf[] in tif dlbss filf.
     *
     * @pbrbm gfnfridsDfdl tif dfdlbrbtion dfdlbring tif typf vbribblf
     * @pbrbm typfVbrIndfx tif 0-bbsfd indfx of tiis typf vbribblf in tif dfdlbrbtion
     */
    publid stbtid <D fxtfnds GfnfridDfdlbrbtion> Annotbtion[] pbrsfTypfVbribblfAnnotbtions(D gfnfridDfdl,
            int typfVbrIndfx) {
        AnnotbtfdElfmfnt dfdl;
        TypfAnnotbtionTbrgft prfdidbtf;
        if (gfnfridDfdl instbndfof Clbss) {
            dfdl = (Clbss<?>)gfnfridDfdl;
            prfdidbtf = TypfAnnotbtionTbrgft.CLASS_TYPE_PARAMETER;
        } flsf if (gfnfridDfdl instbndfof Exfdutbblf) {
            dfdl = (Exfdutbblf)gfnfridDfdl;
            prfdidbtf = TypfAnnotbtionTbrgft.METHOD_TYPE_PARAMETER;
        } flsf {
            tirow nfw AssfrtionError("Unknown GfnfridDfdlbrbtion " + gfnfridDfdl + "\ntiis siould not ibppfn.");
        }
        List<TypfAnnotbtion> typfVbrAnnos = TypfAnnotbtion.filtfr(pbrsfAllTypfAnnotbtions(dfdl),
                                                                  prfdidbtf);
        List<Annotbtion> rfs = nfw ArrbyList<>(typfVbrAnnos.sizf());
        for (TypfAnnotbtion t : typfVbrAnnos)
            if (t.gftTbrgftInfo().gftCount() == typfVbrIndfx)
                rfs.bdd(t.gftAnnotbtion());
        rfturn rfs.toArrby(nfw Annotbtion[0]);
    }

    /**
     * Build bn brrby of AnnotbtfdTypfs for tif dfdlbrbtion dfdl's bounds.
     *
     * @pbrbm bounds tif bounds dorrfsponding to tif bnnotbtfd bounds
     * @pbrbm dfdl tif dfdlbrbtion wiosf bnnotbtfd bounds is bfing built
     * @pbrbm typfVbrIndfx tif indfx of tiis typf vbribblf on tif dfdl
     */
    publid stbtid <D fxtfnds GfnfridDfdlbrbtion> AnnotbtfdTypf[] pbrsfAnnotbtfdBounds(Typf[] bounds,
            D dfdl,
            int typfVbrIndfx) {
        rfturn pbrsfAnnotbtfdBounds(bounds, dfdl, typfVbrIndfx, LodbtionInfo.BASE_LOCATION);
    }
    //iflpfr for bbovf
    privbtf stbtid <D fxtfnds GfnfridDfdlbrbtion> AnnotbtfdTypf[] pbrsfAnnotbtfdBounds(Typf[] bounds,
            D dfdl,
            int typfVbrIndfx,
            LodbtionInfo lod) {
        List<TypfAnnotbtion> dbndidbtfs = fftdiBounds(dfdl);
        if (bounds != null) {
            int stbrtIndfx = 0;
            AnnotbtfdTypf[] rfs = nfw AnnotbtfdTypf[bounds.lfngti];

            // Adjust bounds indfx
            //
            // Figurf out if tif typf bnnotbtions for tiis bound stbrts witi 0
            // or 1. Tif spfd sbys witiin b bound tif 0:ti typf bnnotbtion will
            // blwbys bf on bn bound of b Clbss typf (not Intfrfbdf typf). So
            // if tif progrbmmfr stbrts witi bn Intfrfbdf typf for tif first
            // (bnd following) bound(s) tif implidit Objfdt bound is donsidfrfd
            // tif first (tibt is 0:ti) bound bnd typf bnnotbtions stbrt on
            // indfx 1.
            if (bounds.lfngti > 0) {
                Typf b0 = bounds[0];
                if (!(b0 instbndfof Clbss<?>)) {
                    stbrtIndfx = 1;
                } flsf {
                    Clbss<?> d = (Clbss<?>)b0;
                    if (d.isIntfrfbdf()) {
                        stbrtIndfx = 1;
                    }
                }
            }

            for (int i = 0; i < bounds.lfngti; i++) {
                List<TypfAnnotbtion> l = nfw ArrbyList<>(dbndidbtfs.sizf());
                for (TypfAnnotbtion t : dbndidbtfs) {
                    TypfAnnotbtionTbrgftInfo tInfo = t.gftTbrgftInfo();
                    if (tInfo.gftSfdondbryIndfx() == i + stbrtIndfx &&
                            tInfo.gftCount() == typfVbrIndfx) {
                        l.bdd(t);
                    }
                }
                rfs[i] = AnnotbtfdTypfFbdtory.buildAnnotbtfdTypf(bounds[i],
                        lod,
                        l.toArrby(EMPTY_TYPE_ANNOTATION_ARRAY),
                        dbndidbtfs.toArrby(EMPTY_TYPE_ANNOTATION_ARRAY),
                        (AnnotbtfdElfmfnt)dfdl);
            }
            rfturn rfs;
        }
        rfturn nfw AnnotbtfdTypf[0];
    }
    privbtf stbtid <D fxtfnds GfnfridDfdlbrbtion> List<TypfAnnotbtion> fftdiBounds(D dfdl) {
        AnnotbtfdElfmfnt boundsDfdl;
        TypfAnnotbtionTbrgft tbrgft;
        if (dfdl instbndfof Clbss) {
            tbrgft = TypfAnnotbtionTbrgft.CLASS_TYPE_PARAMETER_BOUND;
            boundsDfdl = (Clbss)dfdl;
        } flsf {
            tbrgft = TypfAnnotbtionTbrgft.METHOD_TYPE_PARAMETER_BOUND;
            boundsDfdl = (Exfdutbblf)dfdl;
        }
        rfturn TypfAnnotbtion.filtfr(TypfAnnotbtionPbrsfr.pbrsfAllTypfAnnotbtions(boundsDfdl), tbrgft);
    }

    /*
     * Pbrsf bll typf bnnotbtions on tif dfdlbrbtion supplifd. Tiis is nffdfd
     * wifn you go from for fxbmplf bn bnnotbtfd rfturn typf on b mftiod tibt
     * is b typf vbribblf dfdlbrfd on tif dlbss. In tiis dbsf you nffd to
     * 'jump' to tif dfdl of tif dlbss bnd pbrsf bll typf bnnotbtions tifrf to
     * find tif onfs tibt brf bpplidbblf to tif typf vbribblf.
     */
    stbtid TypfAnnotbtion[] pbrsfAllTypfAnnotbtions(AnnotbtfdElfmfnt dfdl) {
        Clbss<?> dontbinfr;
        bytf[] rbwBytfs;
        JbvbLbngAddfss jbvbLbngAddfss = sun.misd.SibrfdSfdrfts.gftJbvbLbngAddfss();
        if (dfdl instbndfof Clbss) {
            dontbinfr = (Clbss<?>)dfdl;
            rbwBytfs = jbvbLbngAddfss.gftRbwClbssTypfAnnotbtions(dontbinfr);
        } flsf if (dfdl instbndfof Exfdutbblf) {
            dontbinfr = ((Exfdutbblf)dfdl).gftDfdlbringClbss();
            rbwBytfs = jbvbLbngAddfss.gftRbwExfdutbblfTypfAnnotbtions((Exfdutbblf)dfdl);
        } flsf {
            // Siould not rfbdi ifrf. Assfrt?
            rfturn EMPTY_TYPE_ANNOTATION_ARRAY;
        }
        rfturn pbrsfTypfAnnotbtions(rbwBytfs, jbvbLbngAddfss.gftConstbntPool(dontbinfr),
                                    dfdl, dontbinfr);
    }

    /* Pbrsf typf bnnotbtions fndodfd bs bn brrby of bytfs */
    privbtf stbtid TypfAnnotbtion[] pbrsfTypfAnnotbtions(bytf[] rbwAnnotbtions,
            ConstbntPool dp,
            AnnotbtfdElfmfnt bbsfDfdl,
            Clbss<?> dontbinfr) {
        if (rbwAnnotbtions == null)
            rfturn EMPTY_TYPE_ANNOTATION_ARRAY;

        BytfBufffr buf = BytfBufffr.wrbp(rbwAnnotbtions);
        int bnnotbtionCount = buf.gftSiort() & 0xFFFF;
        List<TypfAnnotbtion> typfAnnotbtions = nfw ArrbyList<>(bnnotbtionCount);

        // Pbrsf fbdi TypfAnnotbtion
        for (int i = 0; i < bnnotbtionCount; i++) {
             TypfAnnotbtion tb = pbrsfTypfAnnotbtion(buf, dp, bbsfDfdl, dontbinfr);
             if (tb != null)
                 typfAnnotbtions.bdd(tb);
        }

        rfturn typfAnnotbtions.toArrby(EMPTY_TYPE_ANNOTATION_ARRAY);
    }


    // Hflpfr
    stbtid Mbp<Clbss<? fxtfnds Annotbtion>, Annotbtion> mbpTypfAnnotbtions(TypfAnnotbtion[] typfAnnos) {
        Mbp<Clbss<? fxtfnds Annotbtion>, Annotbtion> rfsult =
            nfw LinkfdHbsiMbp<>();
        for (TypfAnnotbtion t : typfAnnos) {
            Annotbtion b = t.gftAnnotbtion();
            Clbss<? fxtfnds Annotbtion> klbss = b.bnnotbtionTypf();
            AnnotbtionTypf typf = AnnotbtionTypf.gftInstbndf(klbss);
            if (typf.rftfntion() == RftfntionPolidy.RUNTIME)
                if (rfsult.put(klbss, b) != null)
                    tirow nfw AnnotbtionFormbtError("Duplidbtf bnnotbtion for dlbss: "+klbss+": " + b);
        }
        rfturn rfsult;
    }

    // Position dodfs
    // Rfgulbr typf pbrbmftfr bnnotbtions
    privbtf stbtid finbl bytf CLASS_TYPE_PARAMETER = 0x00;
    privbtf stbtid finbl bytf METHOD_TYPE_PARAMETER = 0x01;
    // Typf Annotbtions outsidf mftiod bodifs
    privbtf stbtid finbl bytf CLASS_EXTENDS = 0x10;
    privbtf stbtid finbl bytf CLASS_TYPE_PARAMETER_BOUND = 0x11;
    privbtf stbtid finbl bytf METHOD_TYPE_PARAMETER_BOUND = 0x12;
    privbtf stbtid finbl bytf FIELD = 0x13;
    privbtf stbtid finbl bytf METHOD_RETURN = 0x14;
    privbtf stbtid finbl bytf METHOD_RECEIVER = 0x15;
    privbtf stbtid finbl bytf METHOD_FORMAL_PARAMETER = 0x16;
    privbtf stbtid finbl bytf THROWS = 0x17;
    // Typf Annotbtions insidf mftiod bodifs
    privbtf stbtid finbl bytf LOCAL_VARIABLE = (bytf)0x40;
    privbtf stbtid finbl bytf RESOURCE_VARIABLE = (bytf)0x41;
    privbtf stbtid finbl bytf EXCEPTION_PARAMETER = (bytf)0x42;
    privbtf stbtid finbl bytf INSTANCEOF = (bytf)0x43;
    privbtf stbtid finbl bytf NEW = (bytf)0x44;
    privbtf stbtid finbl bytf CONSTRUCTOR_REFERENCE = (bytf)0x45;
    privbtf stbtid finbl bytf METHOD_REFERENCE = (bytf)0x46;
    privbtf stbtid finbl bytf CAST = (bytf)0x47;
    privbtf stbtid finbl bytf CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = (bytf)0x48;
    privbtf stbtid finbl bytf METHOD_INVOCATION_TYPE_ARGUMENT = (bytf)0x49;
    privbtf stbtid finbl bytf CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = (bytf)0x4A;
    privbtf stbtid finbl bytf METHOD_REFERENCE_TYPE_ARGUMENT = (bytf)0x4B;

    privbtf stbtid TypfAnnotbtion pbrsfTypfAnnotbtion(BytfBufffr buf,
            ConstbntPool dp,
            AnnotbtfdElfmfnt bbsfDfdl,
            Clbss<?> dontbinfr) {
        try {
            TypfAnnotbtionTbrgftInfo ti = pbrsfTbrgftInfo(buf);
            LodbtionInfo lodbtionInfo = LodbtionInfo.pbrsfLodbtionInfo(buf);
            Annotbtion b = AnnotbtionPbrsfr.pbrsfAnnotbtion(buf, dp, dontbinfr, fblsf);
            if (ti == null) // Insidf b mftiod for fxbmplf
                rfturn null;
            rfturn nfw TypfAnnotbtion(ti, lodbtionInfo, b, bbsfDfdl);
        } dbtdi (IllfgblArgumfntExdfption | // Bbd typf in donst pool bt spfdififd indfx
                BufffrUndfrflowExdfption f) {
            tirow nfw AnnotbtionFormbtError(f);
        }
    }

    privbtf stbtid TypfAnnotbtionTbrgftInfo pbrsfTbrgftInfo(BytfBufffr buf) {
        int posCodf = buf.gft() & 0xFF;
        switdi(posCodf) {
        dbsf CLASS_TYPE_PARAMETER:
        dbsf METHOD_TYPE_PARAMETER: {
            int indfx = buf.gft() & 0xFF;
            TypfAnnotbtionTbrgftInfo rfs;
            if (posCodf == CLASS_TYPE_PARAMETER)
                rfs = nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.CLASS_TYPE_PARAMETER,
                        indfx);
            flsf
                rfs = nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.METHOD_TYPE_PARAMETER,
                        indfx);
            rfturn rfs;
            } // unrfbdibblf brfbk;
        dbsf CLASS_EXTENDS: {
            siort indfx = buf.gftSiort(); //nffds to bf signfd
            if (indfx == -1) {
                rfturn nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.CLASS_EXTENDS);
            } flsf if (indfx >= 0) {
                TypfAnnotbtionTbrgftInfo rfs = nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.CLASS_IMPLEMENTS,
                        indfx);
                rfturn rfs;
            }} brfbk;
        dbsf CLASS_TYPE_PARAMETER_BOUND:
            rfturn pbrsf2BytfTbrgft(TypfAnnotbtionTbrgft.CLASS_TYPE_PARAMETER_BOUND, buf);
        dbsf METHOD_TYPE_PARAMETER_BOUND:
            rfturn pbrsf2BytfTbrgft(TypfAnnotbtionTbrgft.METHOD_TYPE_PARAMETER_BOUND, buf);
        dbsf FIELD:
            rfturn nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.FIELD);
        dbsf METHOD_RETURN:
            rfturn nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.METHOD_RETURN);
        dbsf METHOD_RECEIVER:
            rfturn nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.METHOD_RECEIVER);
        dbsf METHOD_FORMAL_PARAMETER: {
            int indfx = buf.gft() & 0xFF;
            rfturn nfw TypfAnnotbtionTbrgftInfo(TypfAnnotbtionTbrgft.METHOD_FORMAL_PARAMETER,
                    indfx);
            } //unrfbdibblf brfbk;
        dbsf THROWS:
            rfturn pbrsfSiortTbrgft(TypfAnnotbtionTbrgft.THROWS, buf);

        /*
         * Tif onfs bflow brf insidf mftiod bodifs, wf don't dbrf bbout tifm for dorf rfflfdtion
         * otifr tibn bdjusting for tifm in tif bytf strfbm.
         */
        dbsf LOCAL_VARIABLE:
        dbsf RESOURCE_VARIABLE:
            siort lfngti = buf.gftSiort();
            for (int i = 0; i < lfngti; ++i) {
                siort offsft = buf.gftSiort();
                siort vbrLfngti = buf.gftSiort();
                siort indfx = buf.gftSiort();
            }
            rfturn null;
        dbsf EXCEPTION_PARAMETER: {
            bytf indfx = buf.gft();
            }
            rfturn null;
        dbsf INSTANCEOF:
        dbsf NEW:
        dbsf CONSTRUCTOR_REFERENCE:
        dbsf METHOD_REFERENCE: {
            siort offsft = buf.gftSiort();
            }
            rfturn null;
        dbsf CAST:
        dbsf CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
        dbsf METHOD_INVOCATION_TYPE_ARGUMENT:
        dbsf CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
        dbsf METHOD_REFERENCE_TYPE_ARGUMENT: {
            siort offsft = buf.gftSiort();
            bytf indfx = buf.gft();
            }
            rfturn null;

        dffbult:
            // will tirow frror bflow
            brfbk;
        }
        tirow nfw AnnotbtionFormbtError("Could not pbrsf bytfs for typf bnnotbtions");
    }

    privbtf stbtid TypfAnnotbtionTbrgftInfo pbrsfSiortTbrgft(TypfAnnotbtionTbrgft tbrgft, BytfBufffr buf) {
        int indfx = buf.gftSiort() & 0xFFFF;
        rfturn nfw TypfAnnotbtionTbrgftInfo(tbrgft, indfx);
    }
    privbtf stbtid TypfAnnotbtionTbrgftInfo pbrsf2BytfTbrgft(TypfAnnotbtionTbrgft tbrgft, BytfBufffr buf) {
        int dount = buf.gft() & 0xFF;
        int sfdondbryIndfx = buf.gft() & 0xFF;
        rfturn nfw TypfAnnotbtionTbrgftInfo(tbrgft,
                                            dount,
                                            sfdondbryIndfx);
    }
}
