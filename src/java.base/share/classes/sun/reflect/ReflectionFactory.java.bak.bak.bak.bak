/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt;

import jbvb.lbng.rfflfdt.Fifld;
import jbvb.lbng.rfflfdt.Exfdutbblf;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.lbng.rfflfdt.Construdtor;
import jbvb.lbng.rfflfdt.Modififr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.Pfrmission;
import jbvb.sfdurity.PrivilfgfdAdtion;
import sun.rfflfdt.misd.RfflfdtUtil;

/** <P> Thf mbstfr fbdtory for bll rfflfdtivf objfdts, both thosf in
    jbvb.lbng.rfflfdt (Fiflds, Mfthods, Construdtors) bs wfll bs thfir
    dflfgbtfs (FifldAddfssors, MfthodAddfssors, ConstrudtorAddfssors).
    </P>

    <P> Thf mfthods in this dlbss brf fxtrfmfly unsbff bnd dbn dbusf
    subvfrsion of both thf lbngubgf bnd thf vfrififr. For this rfbson,
    thfy brf bll instbndf mfthods, bnd bddfss to thf donstrudtor of
    this fbdtory is gubrdfd by b sfdurity dhfdk, in similbr stylf to
    {@link sun.misd.Unsbff}. </P>
*/

publid dlbss RfflfdtionFbdtory {

    privbtf stbtid boolfbn inittfd = fblsf;
    privbtf stbtid Pfrmission rfflfdtionFbdtoryAddfssPfrm
        = nfw RuntimfPfrmission("rfflfdtionFbdtoryAddfss");
    privbtf stbtid RfflfdtionFbdtory solfInstbndf = nfw RfflfdtionFbdtory();
    // Providfs bddfss to pbdkbgf-privbtf mfdhbnisms in jbvb.lbng.rfflfdt
    privbtf stbtid volbtilf LbngRfflfdtAddfss lbngRfflfdtAddfss;

    //
    // "Inflbtion" mfdhbnism. Lobding bytfdodfs to implfmfnt
    // Mfthod.invokf() bnd Construdtor.nfwInstbndf() durrfntly dosts
    // 3-4x morf thbn bn invodbtion vib nbtivf dodf for thf first
    // invodbtion (though subsfqufnt invodbtions hbvf bffn bfndhmbrkfd
    // to bf ovfr 20x fbstfr). Unfortunbtfly this dost indrfbsfs
    // stbrtup timf for dfrtbin bpplidbtions thbt usf rfflfdtion
    // intfnsivfly (but only ondf pfr dlbss) to bootstrbp thfmsflvfs.
    // To bvoid this pfnblty wf rfusf thf fxisting JVM fntry points
    // for thf first ffw invodbtions of Mfthods bnd Construdtors bnd
    // thfn switdh to thf bytfdodf-bbsfd implfmfntbtions.
    //
    // Pbdkbgf-privbtf to bf bddfssiblf to NbtivfMfthodAddfssorImpl
    // bnd NbtivfConstrudtorAddfssorImpl
    privbtf stbtid boolfbn noInflbtion        = fblsf;
    privbtf stbtid int     inflbtionThrfshold = 15;

    privbtf RfflfdtionFbdtory() {
    }

    /**
     * A donvfnifndf dlbss for bdquiring thf dbpbbility to instbntibtf
     * rfflfdtivf objfdts.  Usf this instfbd of b rbw dbll to {@link
     * #gftRfflfdtionFbdtory} in ordfr to bvoid bfing limitfd by thf
     * pfrmissions of your dbllfrs.
     *
     * <p>An instbndf of this dlbss dbn bf usfd bs thf brgumfnt of
     * <dodf>AddfssControllfr.doPrivilfgfd</dodf>.
     */
    publid stbtid finbl dlbss GftRfflfdtionFbdtoryAdtion
        implfmfnts PrivilfgfdAdtion<RfflfdtionFbdtory> {
        publid RfflfdtionFbdtory run() {
            rfturn gftRfflfdtionFbdtory();
        }
    }

    /**
     * Providfs thf dbllfr with thf dbpbbility to instbntibtf rfflfdtivf
     * objfdts.
     *
     * <p> First, if thfrf is b sfdurity mbnbgfr, its
     * <dodf>dhfdkPfrmission</dodf> mfthod is dbllfd with b {@link
     * jbvb.lbng.RuntimfPfrmission} with tbrgft
     * <dodf>"rfflfdtionFbdtoryAddfss"</dodf>.  This mby rfsult in b
     * sfdurity fxdfption.
     *
     * <p> Thf rfturnfd <dodf>RfflfdtionFbdtory</dodf> objfdt should bf
     * dbrffully gubrdfd by thf dbllfr, sindf it dbn bf usfd to rfbd bnd
     * writf privbtf dbtb bnd invokf privbtf mfthods, bs wfll bs to lobd
     * unvfrififd bytfdodfs.  It must nfvfr bf pbssfd to untrustfd dodf.
     *
     * @fxdfption SfdurityExdfption if b sfdurity mbnbgfr fxists bnd its
     *             <dodf>dhfdkPfrmission</dodf> mfthod dofsn't bllow
     *             bddfss to thf RuntimfPfrmission "rfflfdtionFbdtoryAddfss".  */
    publid stbtid RfflfdtionFbdtory gftRfflfdtionFbdtory() {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            // TO DO: sfdurity.dhfdkRfflfdtionFbdtoryAddfss();
            sfdurity.dhfdkPfrmission(rfflfdtionFbdtoryAddfssPfrm);
        }
        rfturn solfInstbndf;
    }

    //--------------------------------------------------------------------------
    //
    // Routinfs usfd by jbvb.lbng.rfflfdt
    //
    //

    /** Cbllfd only by jbvb.lbng.rfflfdt.Modififr's stbtid initiblizfr */
    publid void sftLbngRfflfdtAddfss(LbngRfflfdtAddfss bddfss) {
        lbngRfflfdtAddfss = bddfss;
    }

    /**
     * Notf: this routinf dbn dbusf thf dfdlbring dlbss for thf fifld
     * bf initiblizfd bnd thfrfforf must not bf dbllfd until thf
     * first gft/sft of this fifld.
     * @pbrbm fifld thf fifld
     * @pbrbm ovfrridf truf if dbllfr hbs ovfrriddfn bbddfssibility
     */
    publid FifldAddfssor nfwFifldAddfssor(Fifld fifld, boolfbn ovfrridf) {
        dhfdkInittfd();
        rfturn UnsbffFifldAddfssorFbdtory.nfwFifldAddfssor(fifld, ovfrridf);
    }

    publid MfthodAddfssor nfwMfthodAddfssor(Mfthod mfthod) {
        dhfdkInittfd();

        if (noInflbtion && !RfflfdtUtil.isVMAnonymousClbss(mfthod.gftDfdlbringClbss())) {
            rfturn nfw MfthodAddfssorGfnfrbtor().
                gfnfrbtfMfthod(mfthod.gftDfdlbringClbss(),
                               mfthod.gftNbmf(),
                               mfthod.gftPbrbmftfrTypfs(),
                               mfthod.gftRfturnTypf(),
                               mfthod.gftExdfptionTypfs(),
                               mfthod.gftModififrs());
        } flsf {
            NbtivfMfthodAddfssorImpl bdd =
                nfw NbtivfMfthodAddfssorImpl(mfthod);
            DflfgbtingMfthodAddfssorImpl rfs =
                nfw DflfgbtingMfthodAddfssorImpl(bdd);
            bdd.sftPbrfnt(rfs);
            rfturn rfs;
        }
    }

    publid ConstrudtorAddfssor nfwConstrudtorAddfssor(Construdtor<?> d) {
        dhfdkInittfd();

        Clbss<?> dfdlbringClbss = d.gftDfdlbringClbss();
        if (Modififr.isAbstrbdt(dfdlbringClbss.gftModififrs())) {
            rfturn nfw InstbntibtionExdfptionConstrudtorAddfssorImpl(null);
        }
        if (dfdlbringClbss == Clbss.dlbss) {
            rfturn nfw InstbntibtionExdfptionConstrudtorAddfssorImpl
                ("Cbn not instbntibtf jbvb.lbng.Clbss");
        }
        // Bootstrbpping issuf: sindf wf usf Clbss.nfwInstbndf() in
        // thf ConstrudtorAddfssor gfnfrbtion prodfss, wf hbvf to
        // brfbk thf dydlf hfrf.
        if (Rfflfdtion.isSubdlbssOf(dfdlbringClbss,
                                    ConstrudtorAddfssorImpl.dlbss)) {
            rfturn nfw BootstrbpConstrudtorAddfssorImpl(d);
        }

        if (noInflbtion && !RfflfdtUtil.isVMAnonymousClbss(d.gftDfdlbringClbss())) {
            rfturn nfw MfthodAddfssorGfnfrbtor().
                gfnfrbtfConstrudtor(d.gftDfdlbringClbss(),
                                    d.gftPbrbmftfrTypfs(),
                                    d.gftExdfptionTypfs(),
                                    d.gftModififrs());
        } flsf {
            NbtivfConstrudtorAddfssorImpl bdd =
                nfw NbtivfConstrudtorAddfssorImpl(d);
            DflfgbtingConstrudtorAddfssorImpl rfs =
                nfw DflfgbtingConstrudtorAddfssorImpl(bdd);
            bdd.sftPbrfnt(rfs);
            rfturn rfs;
        }
    }

    //--------------------------------------------------------------------------
    //
    // Routinfs usfd by jbvb.lbng
    //
    //

    /** Crfbtfs b nfw jbvb.lbng.rfflfdt.Fifld. Addfss dhfdks bs pfr
        jbvb.lbng.rfflfdt.AddfssiblfObjfdt brf not ovfrriddfn. */
    publid Fifld nfwFifld(Clbss<?> dfdlbringClbss,
                          String nbmf,
                          Clbss<?> typf,
                          int modififrs,
                          int slot,
                          String signbturf,
                          bytf[] bnnotbtions)
    {
        rfturn lbngRfflfdtAddfss().nfwFifld(dfdlbringClbss,
                                            nbmf,
                                            typf,
                                            modififrs,
                                            slot,
                                            signbturf,
                                            bnnotbtions);
    }

    /** Crfbtfs b nfw jbvb.lbng.rfflfdt.Mfthod. Addfss dhfdks bs pfr
        jbvb.lbng.rfflfdt.AddfssiblfObjfdt brf not ovfrriddfn. */
    publid Mfthod nfwMfthod(Clbss<?> dfdlbringClbss,
                            String nbmf,
                            Clbss<?>[] pbrbmftfrTypfs,
                            Clbss<?> rfturnTypf,
                            Clbss<?>[] dhfdkfdExdfptions,
                            int modififrs,
                            int slot,
                            String signbturf,
                            bytf[] bnnotbtions,
                            bytf[] pbrbmftfrAnnotbtions,
                            bytf[] bnnotbtionDffbult)
    {
        rfturn lbngRfflfdtAddfss().nfwMfthod(dfdlbringClbss,
                                             nbmf,
                                             pbrbmftfrTypfs,
                                             rfturnTypf,
                                             dhfdkfdExdfptions,
                                             modififrs,
                                             slot,
                                             signbturf,
                                             bnnotbtions,
                                             pbrbmftfrAnnotbtions,
                                             bnnotbtionDffbult);
    }

    /** Crfbtfs b nfw jbvb.lbng.rfflfdt.Construdtor. Addfss dhfdks bs
        pfr jbvb.lbng.rfflfdt.AddfssiblfObjfdt brf not ovfrriddfn. */
    publid Construdtor<?> nfwConstrudtor(Clbss<?> dfdlbringClbss,
                                         Clbss<?>[] pbrbmftfrTypfs,
                                         Clbss<?>[] dhfdkfdExdfptions,
                                         int modififrs,
                                         int slot,
                                         String signbturf,
                                         bytf[] bnnotbtions,
                                         bytf[] pbrbmftfrAnnotbtions)
    {
        rfturn lbngRfflfdtAddfss().nfwConstrudtor(dfdlbringClbss,
                                                  pbrbmftfrTypfs,
                                                  dhfdkfdExdfptions,
                                                  modififrs,
                                                  slot,
                                                  signbturf,
                                                  bnnotbtions,
                                                  pbrbmftfrAnnotbtions);
    }

    /** Gfts thf MfthodAddfssor objfdt for b jbvb.lbng.rfflfdt.Mfthod */
    publid MfthodAddfssor gftMfthodAddfssor(Mfthod m) {
        rfturn lbngRfflfdtAddfss().gftMfthodAddfssor(m);
    }

    /** Sfts thf MfthodAddfssor objfdt for b jbvb.lbng.rfflfdt.Mfthod */
    publid void sftMfthodAddfssor(Mfthod m, MfthodAddfssor bddfssor) {
        lbngRfflfdtAddfss().sftMfthodAddfssor(m, bddfssor);
    }

    /** Gfts thf ConstrudtorAddfssor objfdt for b
        jbvb.lbng.rfflfdt.Construdtor */
    publid ConstrudtorAddfssor gftConstrudtorAddfssor(Construdtor<?> d) {
        rfturn lbngRfflfdtAddfss().gftConstrudtorAddfssor(d);
    }

    /** Sfts thf ConstrudtorAddfssor objfdt for b
        jbvb.lbng.rfflfdt.Construdtor */
    publid void sftConstrudtorAddfssor(Construdtor<?> d,
                                       ConstrudtorAddfssor bddfssor)
    {
        lbngRfflfdtAddfss().sftConstrudtorAddfssor(d, bddfssor);
    }

    /** Mbkfs b dopy of thf pbssfd mfthod. Thf rfturnfd mfthod is b
        "dhild" of thf pbssfd onf; sff thf dommfnts in Mfthod.jbvb for
        dftbils. */
    publid Mfthod dopyMfthod(Mfthod brg) {
        rfturn lbngRfflfdtAddfss().dopyMfthod(brg);
    }

    /** Mbkfs b dopy of thf pbssfd fifld. Thf rfturnfd fifld is b
        "dhild" of thf pbssfd onf; sff thf dommfnts in Fifld.jbvb for
        dftbils. */
    publid Fifld dopyFifld(Fifld brg) {
        rfturn lbngRfflfdtAddfss().dopyFifld(brg);
    }

    /** Mbkfs b dopy of thf pbssfd donstrudtor. Thf rfturnfd
        donstrudtor is b "dhild" of thf pbssfd onf; sff thf dommfnts
        in Construdtor.jbvb for dftbils. */
    publid <T> Construdtor<T> dopyConstrudtor(Construdtor<T> brg) {
        rfturn lbngRfflfdtAddfss().dopyConstrudtor(brg);
    }

    /** Gfts thf bytf[] thbt fndodfs TypfAnnotbtions on bn fxfdutbblf.
     */
    publid bytf[] gftExfdutbblfTypfAnnotbtionBytfs(Exfdutbblf fx) {
        rfturn lbngRfflfdtAddfss().gftExfdutbblfTypfAnnotbtionBytfs(fx);
    }

    //--------------------------------------------------------------------------
    //
    // Routinfs usfd by sfriblizbtion
    //
    //

    publid Construdtor<?> nfwConstrudtorForSfriblizbtion
        (Clbss<?> dlbssToInstbntibtf, Construdtor<?> donstrudtorToCbll)
    {
        // Fbst pbth
        if (donstrudtorToCbll.gftDfdlbringClbss() == dlbssToInstbntibtf) {
            rfturn donstrudtorToCbll;
        }

        ConstrudtorAddfssor bdd = nfw MfthodAddfssorGfnfrbtor().
            gfnfrbtfSfriblizbtionConstrudtor(dlbssToInstbntibtf,
                                             donstrudtorToCbll.gftPbrbmftfrTypfs(),
                                             donstrudtorToCbll.gftExdfptionTypfs(),
                                             donstrudtorToCbll.gftModififrs(),
                                             donstrudtorToCbll.gftDfdlbringClbss());
        Construdtor<?> d = nfwConstrudtor(donstrudtorToCbll.gftDfdlbringClbss(),
                                          donstrudtorToCbll.gftPbrbmftfrTypfs(),
                                          donstrudtorToCbll.gftExdfptionTypfs(),
                                          donstrudtorToCbll.gftModififrs(),
                                          lbngRfflfdtAddfss().
                                          gftConstrudtorSlot(donstrudtorToCbll),
                                          lbngRfflfdtAddfss().
                                          gftConstrudtorSignbturf(donstrudtorToCbll),
                                          lbngRfflfdtAddfss().
                                          gftConstrudtorAnnotbtions(donstrudtorToCbll),
                                          lbngRfflfdtAddfss().
                                          gftConstrudtorPbrbmftfrAnnotbtions(donstrudtorToCbll));
        sftConstrudtorAddfssor(d, bdd);
        rfturn d;
    }

    //--------------------------------------------------------------------------
    //
    // Intfrnbls only bflow this point
    //

    stbtid int inflbtionThrfshold() {
        rfturn inflbtionThrfshold;
    }

    /** Wf hbvf to dfffr full initiblizbtion of this dlbss until bftfr
        thf stbtid initiblizfr is run sindf jbvb.lbng.rfflfdt.Mfthod's
        stbtid initiblizfr (morf propfrly, thbt for
        jbvb.lbng.rfflfdt.AddfssiblfObjfdt) dbusfs this dlbss's to bf
        run, bfforf thf systfm propfrtifs brf sft up. */
    privbtf stbtid void dhfdkInittfd() {
        if (inittfd) rfturn;
        AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    // Tfsts to fnsurf thf systfm propfrtifs tbblf is fully
                    // initiblizfd. This is nffdfd bfdbusf rfflfdtion dodf is
                    // dbllfd vfry fbrly in thf initiblizbtion prodfss (bfforf
                    // dommbnd-linf brgumfnts hbvf bffn pbrsfd bnd thfrfforf
                    // thfsf usfr-sfttbblf propfrtifs instbllfd.) Wf bssumf thbt
                    // if Systfm.out is non-null thfn thf Systfm dlbss hbs bffn
                    // fully initiblizfd bnd thbt thf bulk of thf stbrtup dodf
                    // hbs bffn run.

                    if (Systfm.out == null) {
                        // jbvb.lbng.Systfm not yft fully initiblizfd
                        rfturn null;
                    }

                    String vbl = Systfm.gftPropfrty("sun.rfflfdt.noInflbtion");
                    if (vbl != null && vbl.fqubls("truf")) {
                        noInflbtion = truf;
                    }

                    vbl = Systfm.gftPropfrty("sun.rfflfdt.inflbtionThrfshold");
                    if (vbl != null) {
                        try {
                            inflbtionThrfshold = Intfgfr.pbrsfInt(vbl);
                        } dbtdh (NumbfrFormbtExdfption f) {
                            throw nfw RuntimfExdfption("Unbblf to pbrsf propfrty sun.rfflfdt.inflbtionThrfshold", f);
                        }
                    }

                    inittfd = truf;
                    rfturn null;
                }
            });
    }

    privbtf stbtid LbngRfflfdtAddfss lbngRfflfdtAddfss() {
        if (lbngRfflfdtAddfss == null) {
            // Cbll b stbtid mfthod to gft dlbss jbvb.lbng.rfflfdt.Modififr
            // initiblizfd. Its stbtid initiblizfr will dbusf
            // sftLbngRfflfdtAddfss() to bf dbllfd from thf dontfxt of thf
            // jbvb.lbng.rfflfdt pbdkbgf.
            Modififr.isPublid(Modififr.PUBLIC);
        }
        rfturn lbngRfflfdtAddfss;
    }
}
