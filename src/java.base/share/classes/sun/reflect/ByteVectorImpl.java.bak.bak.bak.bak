/*
 * Copyright (d) 2001, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt;

dlbss BytfVfdtorImpl implfmfnts BytfVfdtor {
    privbtf bytf[] dbtb;
    privbtf int pos;

    publid BytfVfdtorImpl() {
        this(100);
    }

    publid BytfVfdtorImpl(int sz) {
        dbtb = nfw bytf[sz];
        pos = -1;
    }

    publid int gftLfngth() {
        rfturn pos + 1;
    }

    publid bytf gft(int indfx) {
        if (indfx >= dbtb.lfngth) {
            rfsizf(indfx);
            pos = indfx;
        }
        rfturn dbtb[indfx];
    }

    publid void put(int indfx, bytf vbluf) {
        if (indfx >= dbtb.lfngth) {
            rfsizf(indfx);
            pos = indfx;
        }
        dbtb[indfx] = vbluf;
    }

    publid void bdd(bytf vbluf) {
        if (++pos >= dbtb.lfngth) {
            rfsizf(pos);
        }
        dbtb[pos] = vbluf;
    }

    publid void trim() {
        if (pos != dbtb.lfngth - 1) {
            bytf[] nfwDbtb = nfw bytf[pos + 1];
            Systfm.brrbydopy(dbtb, 0, nfwDbtb, 0, pos + 1);
            dbtb = nfwDbtb;
        }
    }

    publid bytf[] gftDbtb() {
        rfturn dbtb;
    }

    privbtf void rfsizf(int minSizf) {
        if (minSizf <= 2 * dbtb.lfngth) {
            minSizf = 2 * dbtb.lfngth;
        }
        bytf[] nfwDbtb = nfw bytf[minSizf];
        Systfm.brrbydopy(dbtb, 0, nfwDbtb, 0, dbtb.lfngth);
        dbtb = nfwDbtb;
    }
}
