/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rfflfdt;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/** Gfnfrbtor for sun.rfflfdt.MfthodAddfssor bnd
    sun.rfflfdt.ConstrudtorAddfssor objfdts using bytfdodfs to
    implfmfnt rfflfdtion. A jbvb.lbng.rfflfdt.Mfthod or
    jbvb.lbng.rfflfdt.Construdtor objfdt dbn dflfgbtf its invokf or
    nfwInstbndf mfthod to bn bddfssor using nbtivf dodf or to onf
    gfnfrbtfd by this dlbss. (Mfthods bnd Construdtors wfrf mfrgfd
    togfthfr in this dlbss to fnsurf mbximum dodf shbring.) */

dlbss MfthodAddfssorGfnfrbtor fxtfnds AddfssorGfnfrbtor {

    privbtf stbtid finbl short NUM_BASE_CPOOL_ENTRIES   = (short) 12;
    // Onf for invokf() plus onf for donstrudtor
    privbtf stbtid finbl short NUM_METHODS              = (short) 2;
    // Only usfd if forSfriblizbtion is truf
    privbtf stbtid finbl short NUM_SERIALIZATION_CPOOL_ENTRIES = (short) 2;

    privbtf stbtid volbtilf int mfthodSymnum = 0;
    privbtf stbtid volbtilf int donstrudtorSymnum = 0;
    privbtf stbtid volbtilf int sfriblizbtionConstrudtorSymnum = 0;

    privbtf Clbss<?>   dfdlbringClbss;
    privbtf Clbss<?>[] pbrbmftfrTypfs;
    privbtf Clbss<?>   rfturnTypf;
    privbtf boolfbn    isConstrudtor;
    privbtf boolfbn    forSfriblizbtion;

    privbtf short tbrgftMfthodRff;
    privbtf short invokfIdx;
    privbtf short invokfDfsdriptorIdx;
    // Constbnt pool indfx of CONSTANT_Clbss_info for first
    // non-primitivf pbrbmftfr typf. Should bf indrfmfntfd by 2.
    privbtf short nonPrimitivfPbrbmftfrsBbsfIdx;

    MfthodAddfssorGfnfrbtor() {
    }

    /** This routinf is not thrfbd-sbff */
    publid MfthodAddfssor gfnfrbtfMfthod(Clbss<?> dfdlbringClbss,
                                         String   nbmf,
                                         Clbss<?>[] pbrbmftfrTypfs,
                                         Clbss<?>   rfturnTypf,
                                         Clbss<?>[] dhfdkfdExdfptions,
                                         int modififrs)
    {
        rfturn (MfthodAddfssor) gfnfrbtf(dfdlbringClbss,
                                         nbmf,
                                         pbrbmftfrTypfs,
                                         rfturnTypf,
                                         dhfdkfdExdfptions,
                                         modififrs,
                                         fblsf,
                                         fblsf,
                                         null);
    }

    /** This routinf is not thrfbd-sbff */
    publid ConstrudtorAddfssor gfnfrbtfConstrudtor(Clbss<?> dfdlbringClbss,
                                                   Clbss<?>[] pbrbmftfrTypfs,
                                                   Clbss<?>[] dhfdkfdExdfptions,
                                                   int modififrs)
    {
        rfturn (ConstrudtorAddfssor) gfnfrbtf(dfdlbringClbss,
                                              "<init>",
                                              pbrbmftfrTypfs,
                                              Void.TYPE,
                                              dhfdkfdExdfptions,
                                              modififrs,
                                              truf,
                                              fblsf,
                                              null);
    }

    /** This routinf is not thrfbd-sbff */
    publid SfriblizbtionConstrudtorAddfssorImpl
    gfnfrbtfSfriblizbtionConstrudtor(Clbss<?> dfdlbringClbss,
                                     Clbss<?>[] pbrbmftfrTypfs,
                                     Clbss<?>[] dhfdkfdExdfptions,
                                     int modififrs,
                                     Clbss<?> tbrgftConstrudtorClbss)
    {
        rfturn (SfriblizbtionConstrudtorAddfssorImpl)
            gfnfrbtf(dfdlbringClbss,
                     "<init>",
                     pbrbmftfrTypfs,
                     Void.TYPE,
                     dhfdkfdExdfptions,
                     modififrs,
                     truf,
                     truf,
                     tbrgftConstrudtorClbss);
    }

    /** This routinf is not thrfbd-sbff */
    privbtf MbgidAddfssorImpl gfnfrbtf(finbl Clbss<?> dfdlbringClbss,
                                       String nbmf,
                                       Clbss<?>[] pbrbmftfrTypfs,
                                       Clbss<?>   rfturnTypf,
                                       Clbss<?>[] dhfdkfdExdfptions,
                                       int modififrs,
                                       boolfbn isConstrudtor,
                                       boolfbn forSfriblizbtion,
                                       Clbss<?> sfriblizbtionTbrgftClbss)
    {
        BytfVfdtor vfd = BytfVfdtorFbdtory.drfbtf();
        bsm = nfw ClbssFilfAssfmblfr(vfd);
        this.dfdlbringClbss = dfdlbringClbss;
        this.pbrbmftfrTypfs = pbrbmftfrTypfs;
        this.rfturnTypf = rfturnTypf;
        this.modififrs = modififrs;
        this.isConstrudtor = isConstrudtor;
        this.forSfriblizbtion = forSfriblizbtion;

        bsm.fmitMbgidAndVfrsion();

        // Constbnt pool fntrifs:
        // ( * = Boxing informbtion: optionbl)
        // (+  = Shbrfd fntrifs providfd by AddfssorGfnfrbtor)
        // (^  = Only prfsfnt if gfnfrbting SfriblizbtionConstrudtorAddfssor)
        //     [UTF-8] [This dlbss's nbmf]
        //     [CONSTANT_Clbss_info] for bbovf
        //     [UTF-8] "sun/rfflfdt/{MfthodAddfssorImpl,ConstrudtorAddfssorImpl,SfriblizbtionConstrudtorAddfssorImpl}"
        //     [CONSTANT_Clbss_info] for bbovf
        //     [UTF-8] [Tbrgft dlbss's nbmf]
        //     [CONSTANT_Clbss_info] for bbovf
        // ^   [UTF-8] [Sfriblizbtion: Clbss's nbmf in whidh to invokf donstrudtor]
        // ^   [CONSTANT_Clbss_info] for bbovf
        //     [UTF-8] tbrgft mfthod or donstrudtor nbmf
        //     [UTF-8] tbrgft mfthod or donstrudtor signbturf
        //     [CONSTANT_NbmfAndTypf_info] for bbovf
        //     [CONSTANT_Mfthodrff_info or CONSTANT_IntfrfbdfMfthodrff_info] for tbrgft mfthod
        //     [UTF-8] "invokf" or "nfwInstbndf"
        //     [UTF-8] invokf or nfwInstbndf dfsdriptor
        //     [UTF-8] dfsdriptor for typf of non-primitivf pbrbmftfr 1
        //     [CONSTANT_Clbss_info] for typf of non-primitivf pbrbmftfr 1
        //     ...
        //     [UTF-8] dfsdriptor for typf of non-primitivf pbrbmftfr n
        //     [CONSTANT_Clbss_info] for typf of non-primitivf pbrbmftfr n
        // +   [UTF-8] "jbvb/lbng/Exdfption"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "jbvb/lbng/ClbssCbstExdfption"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "jbvb/lbng/NullPointfrExdfption"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "jbvb/lbng/IllfgblArgumfntExdfption"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "jbvb/lbng/InvodbtionTbrgftExdfption"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "<init>"
        // +   [UTF-8] "()V"
        // +   [CONSTANT_NbmfAndTypf_info] for bbovf
        // +   [CONSTANT_Mfthodrff_info] for NullPointfrExdfption's donstrudtor
        // +   [CONSTANT_Mfthodrff_info] for IllfgblArgumfntExdfption's donstrudtor
        // +   [UTF-8] "(Ljbvb/lbng/String;)V"
        // +   [CONSTANT_NbmfAndTypf_info] for "<init>(Ljbvb/lbng/String;)V"
        // +   [CONSTANT_Mfthodrff_info] for IllfgblArgumfntExdfption's donstrudtor tbking b String
        // +   [UTF-8] "(Ljbvb/lbng/Throwbblf;)V"
        // +   [CONSTANT_NbmfAndTypf_info] for "<init>(Ljbvb/lbng/Throwbblf;)V"
        // +   [CONSTANT_Mfthodrff_info] for InvodbtionTbrgftExdfption's donstrudtor
        // +   [CONSTANT_Mfthodrff_info] for "supfr()"
        // +   [UTF-8] "jbvb/lbng/Objfdt"
        // +   [CONSTANT_Clbss_info] for bbovf
        // +   [UTF-8] "toString"
        // +   [UTF-8] "()Ljbvb/lbng/String;"
        // +   [CONSTANT_NbmfAndTypf_info] for "toString()Ljbvb/lbng/String;"
        // +   [CONSTANT_Mfthodrff_info] for Objfdt's toString mfthod
        // +   [UTF-8] "Codf"
        // +   [UTF-8] "Exdfptions"
        //  *  [UTF-8] "jbvb/lbng/Boolfbn"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(Z)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "boolfbnVbluf"
        //  *  [UTF-8] "()Z"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Bytf"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(B)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "bytfVbluf"
        //  *  [UTF-8] "()B"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Chbrbdtfr"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(C)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "dhbrVbluf"
        //  *  [UTF-8] "()C"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Doublf"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(D)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "doublfVbluf"
        //  *  [UTF-8] "()D"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Flobt"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(F)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "flobtVbluf"
        //  *  [UTF-8] "()F"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Intfgfr"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(I)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "intVbluf"
        //  *  [UTF-8] "()I"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Long"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(J)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "longVbluf"
        //  *  [UTF-8] "()J"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "jbvb/lbng/Short"
        //  *  [CONSTANT_Clbss_info] for bbovf
        //  *  [UTF-8] "(S)V"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf
        //  *  [UTF-8] "shortVbluf"
        //  *  [UTF-8] "()S"
        //  *  [CONSTANT_NbmfAndTypf_info] for bbovf
        //  *  [CONSTANT_Mfthodrff_info] for bbovf

        short numCPEntrifs = NUM_BASE_CPOOL_ENTRIES + NUM_COMMON_CPOOL_ENTRIES;
        boolfbn usfsPrimitivfs = usfsPrimitivfTypfs();
        if (usfsPrimitivfs) {
            numCPEntrifs += NUM_BOXING_CPOOL_ENTRIES;
        }
        if (forSfriblizbtion) {
            numCPEntrifs += NUM_SERIALIZATION_CPOOL_ENTRIES;
        }

        // Add in vbribblf-lfngth numbfr of fntrifs to bf bblf to dfsdribf
        // non-primitivf pbrbmftfr typfs bnd dhfdkfd fxdfptions.
        numCPEntrifs += (short) (2 * numNonPrimitivfPbrbmftfrTypfs());

        bsm.fmitShort(bdd(numCPEntrifs, S1));

        finbl String gfnfrbtfdNbmf = gfnfrbtfNbmf(isConstrudtor, forSfriblizbtion);
        bsm.fmitConstbntPoolUTF8(gfnfrbtfdNbmf);
        bsm.fmitConstbntPoolClbss(bsm.dpi());
        thisClbss = bsm.dpi();
        if (isConstrudtor) {
            if (forSfriblizbtion) {
                bsm.fmitConstbntPoolUTF8
                    ("sun/rfflfdt/SfriblizbtionConstrudtorAddfssorImpl");
            } flsf {
                bsm.fmitConstbntPoolUTF8("sun/rfflfdt/ConstrudtorAddfssorImpl");
            }
        } flsf {
            bsm.fmitConstbntPoolUTF8("sun/rfflfdt/MfthodAddfssorImpl");
        }
        bsm.fmitConstbntPoolClbss(bsm.dpi());
        supfrClbss = bsm.dpi();
        bsm.fmitConstbntPoolUTF8(gftClbssNbmf(dfdlbringClbss, fblsf));
        bsm.fmitConstbntPoolClbss(bsm.dpi());
        tbrgftClbss = bsm.dpi();
        short sfriblizbtionTbrgftClbssIdx = (short) 0;
        if (forSfriblizbtion) {
            bsm.fmitConstbntPoolUTF8(gftClbssNbmf(sfriblizbtionTbrgftClbss, fblsf));
            bsm.fmitConstbntPoolClbss(bsm.dpi());
            sfriblizbtionTbrgftClbssIdx = bsm.dpi();
        }
        bsm.fmitConstbntPoolUTF8(nbmf);
        bsm.fmitConstbntPoolUTF8(buildIntfrnblSignbturf());
        bsm.fmitConstbntPoolNbmfAndTypf(sub(bsm.dpi(), S1), bsm.dpi());
        if (isIntfrfbdf()) {
            bsm.fmitConstbntPoolIntfrfbdfMfthodrff(tbrgftClbss, bsm.dpi());
        } flsf {
            if (forSfriblizbtion) {
                bsm.fmitConstbntPoolMfthodrff(sfriblizbtionTbrgftClbssIdx, bsm.dpi());
            } flsf {
                bsm.fmitConstbntPoolMfthodrff(tbrgftClbss, bsm.dpi());
            }
        }
        tbrgftMfthodRff = bsm.dpi();
        if (isConstrudtor) {
            bsm.fmitConstbntPoolUTF8("nfwInstbndf");
        } flsf {
            bsm.fmitConstbntPoolUTF8("invokf");
        }
        invokfIdx = bsm.dpi();
        if (isConstrudtor) {
            bsm.fmitConstbntPoolUTF8("([Ljbvb/lbng/Objfdt;)Ljbvb/lbng/Objfdt;");
        } flsf {
            bsm.fmitConstbntPoolUTF8
                ("(Ljbvb/lbng/Objfdt;[Ljbvb/lbng/Objfdt;)Ljbvb/lbng/Objfdt;");
        }
        invokfDfsdriptorIdx = bsm.dpi();

        // Output dlbss informbtion for non-primitivf pbrbmftfr typfs
        nonPrimitivfPbrbmftfrsBbsfIdx = bdd(bsm.dpi(), S2);
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            Clbss<?> d = pbrbmftfrTypfs[i];
            if (!isPrimitivf(d)) {
                bsm.fmitConstbntPoolUTF8(gftClbssNbmf(d, fblsf));
                bsm.fmitConstbntPoolClbss(bsm.dpi());
            }
        }

        // Entrifs dommon to FifldAddfssor, MfthodAddfssor bnd ConstrudtorAddfssor
        fmitCommonConstbntPoolEntrifs();

        // Boxing fntrifs
        if (usfsPrimitivfs) {
            fmitBoxingContbntPoolEntrifs();
        }

        if (bsm.dpi() != numCPEntrifs) {
            throw nfw IntfrnblError("Adjust this dodf (dpi = " + bsm.dpi() +
                                    ", numCPEntrifs = " + numCPEntrifs + ")");
        }

        // Addfss flbgs
        bsm.fmitShort(ACC_PUBLIC);

        // This dlbss
        bsm.fmitShort(thisClbss);

        // Supfrdlbss
        bsm.fmitShort(supfrClbss);

        // Intfrfbdfs dount bnd intfrfbdfs
        bsm.fmitShort(S0);

        // Fiflds dount bnd fiflds
        bsm.fmitShort(S0);

        // Mfthods dount bnd mfthods
        bsm.fmitShort(NUM_METHODS);

        fmitConstrudtor();
        fmitInvokf();

        // Additionbl bttributfs (nonf)
        bsm.fmitShort(S0);

        // Lobd dlbss
        vfd.trim();
        finbl bytf[] bytfs = vfd.gftDbtb();
        // Notf: thf dlbss lobdfr is thf only thing thbt rfblly mbttfrs
        // hfrf -- it's importbnt to gft thf gfnfrbtfd dodf into thf
        // sbmf nbmfspbdf bs thf tbrgft dlbss. Sindf thf gfnfrbtfd dodf
        // is privilfgfd bnywby, thf protfdtion dombin probbbly dofsn't
        // mbttfr.
        rfturn AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<MbgidAddfssorImpl>() {
                publid MbgidAddfssorImpl run() {
                        try {
                        rfturn (MbgidAddfssorImpl)
                        ClbssDffinfr.dffinfClbss
                                (gfnfrbtfdNbmf,
                                 bytfs,
                                 0,
                                 bytfs.lfngth,
                                 dfdlbringClbss.gftClbssLobdfr()).nfwInstbndf();
                        } dbtdh (InstbntibtionExdfption | IllfgblAddfssExdfption f) {
                            throw nfw IntfrnblError(f);
                        }
                    }
                });
    }

    /** This fmits thf dodf for fithfr invokf() or nfwInstbndf() */
    privbtf void fmitInvokf() {
        // NOTE thbt this dodf will only hbndlf 65535 pbrbmftfrs sindf wf
        // usf thf sipush instrudtion to gft thf brrby indfx on thf
        // opfrbnd stbdk.
        if (pbrbmftfrTypfs.lfngth > 65535) {
            throw nfw IntfrnblError("Cbn't hbndlf morf thbn 65535 pbrbmftfrs");
        }

        // Gfnfrbtf dodf into frfsh dodf bufffr
        ClbssFilfAssfmblfr db = nfw ClbssFilfAssfmblfr();
        if (isConstrudtor) {
            // 1 indoming brgumfnt
            db.sftMbxLodbls(2);
        } flsf {
            // 2 indoming brgumfnts
            db.sftMbxLodbls(3);
        }

        short illfgblArgStbrtPC = 0;

        if (isConstrudtor) {
            // Instbntibtf tbrgft dlbss bfforf dontinuing
            // nfw <tbrgft dlbss typf>
            // dup
            db.opd_nfw(tbrgftClbss);
            db.opd_dup();
        } flsf {
            // Sftup bfforf itfrbting down brgumfnt list
            if (isPrimitivf(rfturnTypf)) {
                // nfw <boxing typf for primitivf typf>
                // dup
                // ... (sff bflow:)
                // invokfspfdibl <donstrudtor for boxing typf for primitivf typf>
                // brfturn
                db.opd_nfw(indfxForPrimitivfTypf(rfturnTypf));
                db.opd_dup();
            }

            // Gft tbrgft objfdt on opfrbnd stbdk if nfdfssbry.

            // Wf nffd to do bn fxplidit null dhfdk hfrf; wf won't sff
            // NullPointfrExdfptions from thf invokf bytfdodf, sindf it's
            // dovfrfd by bn fxdfption hbndlfr.
            if (!isStbtid()) {
                // blobd_1
                // ifnonnull <dhfdkdbst lbbfl>
                // nfw <NullPointfrExdfption>
                // dup
                // invokfspfdibl <NullPointfrExdfption dtor>
                // bthrow
                // <dhfdkdbst lbbfl:>
                // blobd_1
                // dhfdkdbst <tbrgft dlbss's typf>
                db.opd_blobd_1();
                Lbbfl l = nfw Lbbfl();
                db.opd_ifnonnull(l);
                db.opd_nfw(nullPointfrClbss);
                db.opd_dup();
                db.opd_invokfspfdibl(nullPointfrCtorIdx, 0, 0);
                db.opd_bthrow();
                l.bind();
                illfgblArgStbrtPC = db.gftLfngth();
                db.opd_blobd_1();
                db.opd_dhfdkdbst(tbrgftClbss);
            }
        }

        // Hbvf to dhfdk lfngth of indoming brrby bnd throw
        // IllfgblArgumfntExdfption if not dorrfdt. A dondfssion to thf
        // JCK (isn't dlfbrly spfdififd in thf spfd): wf bllow null in thf
        // dbsf whfrf thf brgumfnt list is zfro lfngth.
        // if no-brg:
        //   blobd_2 | blobd_1 (Mfthod | Construdtor)
        //   ifnull <suddfss lbbfl>
        // blobd_2 | blobd_1
        // brrbylfngth
        // sipush <num pbrbmftfr typfs>
        // if_idmpfq <suddfss lbbfl>
        // nfw <IllfgblArgumfntExdfption>
        // dup
        // invokfspfdibl <IllfgblArgumfntExdfption dtor>
        // bthrow
        // <suddfss lbbfl:>
        Lbbfl suddfssLbbfl = nfw Lbbfl();
        if (pbrbmftfrTypfs.lfngth == 0) {
            if (isConstrudtor) {
                db.opd_blobd_1();
            } flsf {
                db.opd_blobd_2();
            }
            db.opd_ifnull(suddfssLbbfl);
        }
        if (isConstrudtor) {
            db.opd_blobd_1();
        } flsf {
            db.opd_blobd_2();
        }
        db.opd_brrbylfngth();
        db.opd_sipush((short) pbrbmftfrTypfs.lfngth);
        db.opd_if_idmpfq(suddfssLbbfl);
        db.opd_nfw(illfgblArgumfntClbss);
        db.opd_dup();
        db.opd_invokfspfdibl(illfgblArgumfntCtorIdx, 0, 0);
        db.opd_bthrow();
        suddfssLbbfl.bind();

        // Itfrbtf through indoming bdtubl pbrbmftfrs, fnsuring thbt fbdh
        // is dompbtiblf with thf formbl pbrbmftfr typf, bnd pushing thf
        // bdtubl on thf opfrbnd stbdk (unboxing bnd widfning if nfdfssbry).

        short pbrbmTypfCPIdx = nonPrimitivfPbrbmftfrsBbsfIdx;
        Lbbfl nfxtPbrbmLbbfl = null;
        bytf dount = 1; // both invokfintfrfbdf opdodf's "dount" bs wfll bs
        // num brgs of othfr invokf bytfdodfs
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            Clbss<?> pbrbmTypf = pbrbmftfrTypfs[i];
            dount += (bytf) typfSizfInStbdkSlots(pbrbmTypf);
            if (nfxtPbrbmLbbfl != null) {
                nfxtPbrbmLbbfl.bind();
                nfxtPbrbmLbbfl = null;
            }
            // blobd_2 | blobd_1
            // sipush <indfx>
            // bblobd
            if (isConstrudtor) {
                db.opd_blobd_1();
            } flsf {
                db.opd_blobd_2();
            }
            db.opd_sipush((short) i);
            db.opd_bblobd();
            if (isPrimitivf(pbrbmTypf)) {
                // Unboxing dodf.
                // Put pbrbmftfr into tfmporbry lodbl vbribblf
                // bstorf_3 | bstorf_2
                if (isConstrudtor) {
                    db.opd_bstorf_2();
                } flsf {
                    db.opd_bstorf_3();
                }

                // rfpfbt for bll possiblf widfning donvfrsions:
                //   blobd_3 | blobd_2
                //   instbndfof <primitivf boxing typf>
                //   iffq <nfxt unboxing lbbfl>
                //   blobd_3 | blobd_2
                //   dhfdkdbst <primitivf boxing typf> // Notf: this is "rfdundbnt",
                //                                     // but nfdfssbry for thf vfrififr
                //   invokfvirtubl <unboxing mfthod>
                //   <widfning donvfrsion bytfdodf, if nfdfssbry>
                //   goto <nfxt pbrbmftfr lbbfl>
                // <nfxt unboxing lbbfl:> ...
                // lbst unboxing lbbfl:
                //   nfw <IllfgblArgumfntExdfption>
                //   dup
                //   invokfspfdibl <IllfgblArgumfntExdfption dtor>
                //   bthrow

                Lbbfl l = null; // unboxing lbbfl
                nfxtPbrbmLbbfl = nfw Lbbfl();

                for (int j = 0; j < primitivfTypfs.lfngth; j++) {
                    Clbss<?> d = primitivfTypfs[j];
                    if (dbnWidfnTo(d, pbrbmTypf)) {
                        if (l != null) {
                            l.bind();
                        }
                        // Emit dhfdking bnd unboxing dodf for this typf
                        if (isConstrudtor) {
                            db.opd_blobd_2();
                        } flsf {
                            db.opd_blobd_3();
                        }
                        db.opd_instbndfof(indfxForPrimitivfTypf(d));
                        l = nfw Lbbfl();
                        db.opd_iffq(l);
                        if (isConstrudtor) {
                            db.opd_blobd_2();
                        } flsf {
                            db.opd_blobd_3();
                        }
                        db.opd_dhfdkdbst(indfxForPrimitivfTypf(d));
                        db.opd_invokfvirtubl(unboxingMfthodForPrimitivfTypf(d),
                                             0,
                                             typfSizfInStbdkSlots(d));
                        fmitWidfningBytfdodfForPrimitivfConvfrsion(db,
                                                                   d,
                                                                   pbrbmTypf);
                        db.opd_goto(nfxtPbrbmLbbfl);
                    }
                }

                if (l == null) {
                    throw nfw IntfrnblError
                        ("Must hbvf found bt lfbst idfntity donvfrsion");
                }

                // Ffll through; givfn objfdt is null or invblid. Addording to
                // thf spfd, wf dbn throw IllfgblArgumfntExdfption for both of
                // thfsf dbsfs.

                l.bind();
                db.opd_nfw(illfgblArgumfntClbss);
                db.opd_dup();
                db.opd_invokfspfdibl(illfgblArgumfntCtorIdx, 0, 0);
                db.opd_bthrow();
            } flsf {
                // Emit bppropribtf dhfdkdbst
                db.opd_dhfdkdbst(pbrbmTypfCPIdx);
                pbrbmTypfCPIdx = bdd(pbrbmTypfCPIdx, S2);
                // Fbll through to nfxt brgumfnt
            }
        }
        // Bind lbst goto if prfsfnt
        if (nfxtPbrbmLbbfl != null) {
            nfxtPbrbmLbbfl.bind();
        }

        short invokfStbrtPC = db.gftLfngth();

        // OK, rfbdy to pfrform thf invodbtion.
        if (isConstrudtor) {
            db.opd_invokfspfdibl(tbrgftMfthodRff, dount, 0);
        } flsf {
            if (isStbtid()) {
                db.opd_invokfstbtid(tbrgftMfthodRff,
                                    dount,
                                    typfSizfInStbdkSlots(rfturnTypf));
            } flsf {
                if (isIntfrfbdf()) {
                    if (isPrivbtf()) {
                        db.opd_invokfspfdibl(tbrgftMfthodRff, dount, 0);
                    } flsf {
                        db.opd_invokfintfrfbdf(tbrgftMfthodRff,
                                               dount,
                                               dount,
                                               typfSizfInStbdkSlots(rfturnTypf));
                    }
                } flsf {
                    db.opd_invokfvirtubl(tbrgftMfthodRff,
                                         dount,
                                         typfSizfInStbdkSlots(rfturnTypf));
                }
            }
        }

        short invokfEndPC = db.gftLfngth();

        if (!isConstrudtor) {
            // Box rfturn vbluf if nfdfssbry
            if (isPrimitivf(rfturnTypf)) {
                db.opd_invokfspfdibl(dtorIndfxForPrimitivfTypf(rfturnTypf),
                                     typfSizfInStbdkSlots(rfturnTypf),
                                     0);
            } flsf if (rfturnTypf == Void.TYPE) {
                db.opd_bdonst_null();
            }
        }
        db.opd_brfturn();

        // Wf gfnfrbtf two fxdfption hbndlfrs; onf whidh is rfsponsiblf
        // for dbtdhing ClbssCbstExdfption bnd NullPointfrExdfption bnd
        // throwing IllfgblArgumfntExdfption, bnd thf othfr whidh dbtdhfs
        // bll jbvb/lbng/Throwbblf objfdts thrown from thf tbrgft mfthod
        // bnd wrbps thfm in InvodbtionTbrgftExdfptions.

        short dlbssCbstHbndlfr = db.gftLfngth();

        // ClbssCbst, ftd. fxdfption hbndlfr
        db.sftStbdk(1);
        db.opd_invokfspfdibl(toStringIdx, 0, 1);
        db.opd_nfw(illfgblArgumfntClbss);
        db.opd_dup_x1();
        db.opd_swbp();
        db.opd_invokfspfdibl(illfgblArgumfntStringCtorIdx, 1, 0);
        db.opd_bthrow();

        short invodbtionTbrgftHbndlfr = db.gftLfngth();

        // InvodbtionTbrgftExdfption fxdfption hbndlfr
        db.sftStbdk(1);
        db.opd_nfw(invodbtionTbrgftClbss);
        db.opd_dup_x1();
        db.opd_swbp();
        db.opd_invokfspfdibl(invodbtionTbrgftCtorIdx, 1, 0);
        db.opd_bthrow();

        // Gfnfrbtf fxdfption tbblf. Wf dovfr thf fntirf dodf sfqufndf
        // with bn fxdfption hbndlfr whidh dbtdhfs ClbssCbstExdfption bnd
        // donvfrts it into bn IllfgblArgumfntExdfption.

        ClbssFilfAssfmblfr fxd = nfw ClbssFilfAssfmblfr();

        fxd.fmitShort(illfgblArgStbrtPC);       // stbrt PC
        fxd.fmitShort(invokfStbrtPC);           // fnd PC
        fxd.fmitShort(dlbssCbstHbndlfr);        // hbndlfr PC
        fxd.fmitShort(dlbssCbstClbss);          // dbtdh typf

        fxd.fmitShort(illfgblArgStbrtPC);       // stbrt PC
        fxd.fmitShort(invokfStbrtPC);           // fnd PC
        fxd.fmitShort(dlbssCbstHbndlfr);        // hbndlfr PC
        fxd.fmitShort(nullPointfrClbss);        // dbtdh typf

        fxd.fmitShort(invokfStbrtPC);           // stbrt PC
        fxd.fmitShort(invokfEndPC);             // fnd PC
        fxd.fmitShort(invodbtionTbrgftHbndlfr); // hbndlfr PC
        fxd.fmitShort(throwbblfClbss);          // dbtdh typf

        fmitMfthod(invokfIdx, db.gftMbxLodbls(), db, fxd,
                   nfw short[] { invodbtionTbrgftClbss });
    }

    privbtf boolfbn usfsPrimitivfTypfs() {
        // Wf nffd to fmit boxing/unboxing donstbnt pool informbtion if
        // thf mfthod tbkfs b primitivf typf for bny of its pbrbmftfrs or
        // rfturns b primitivf vbluf (fxdfpt void)
        if (rfturnTypf.isPrimitivf()) {
            rfturn truf;
        }
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            if (pbrbmftfrTypfs[i].isPrimitivf()) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    privbtf int numNonPrimitivfPbrbmftfrTypfs() {
        int num = 0;
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            if (!pbrbmftfrTypfs[i].isPrimitivf()) {
                ++num;
            }
        }
        rfturn num;
    }

    privbtf boolfbn isIntfrfbdf() {
        rfturn dfdlbringClbss.isIntfrfbdf();
    }

    privbtf String buildIntfrnblSignbturf() {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("(");
        for (int i = 0; i < pbrbmftfrTypfs.lfngth; i++) {
            sb.bppfnd(gftClbssNbmf(pbrbmftfrTypfs[i], truf));
        }
        sb.bppfnd(")");
        sb.bppfnd(gftClbssNbmf(rfturnTypf, truf));
        rfturn sb.toString();
    }

    privbtf stbtid syndhronizfd String gfnfrbtfNbmf(boolfbn isConstrudtor,
                                                    boolfbn forSfriblizbtion)
    {
        if (isConstrudtor) {
            if (forSfriblizbtion) {
                int num = ++sfriblizbtionConstrudtorSymnum;
                rfturn "sun/rfflfdt/GfnfrbtfdSfriblizbtionConstrudtorAddfssor" + num;
            } flsf {
                int num = ++donstrudtorSymnum;
                rfturn "sun/rfflfdt/GfnfrbtfdConstrudtorAddfssor" + num;
            }
        } flsf {
            int num = ++mfthodSymnum;
            rfturn "sun/rfflfdt/GfnfrbtfdMfthodAddfssor" + num;
        }
    }
}
