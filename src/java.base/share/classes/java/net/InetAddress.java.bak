/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.util.HbsiMbp;
import jbvb.util.LinkfdHbsiMbp;
import jbvb.util.Rbndom;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdList;
import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.SfrvidfLobdfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.io.ObjfdtStrfbmExdfption;
import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtInputStrfbm.GftFifld;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm.PutFifld;
import sun.sfdurity.bdtion.*;
import sun.nft.InftAddrfssCbdifPolidy;
import sun.nft.util.IPAddrfssUtil;
import sun.nft.spi.nbmfsfrvidf.*;

/**
 * Tiis dlbss rfprfsfnts bn Intfrnft Protodol (IP) bddrfss.
 *
 * <p> An IP bddrfss is fitifr b 32-bit or 128-bit unsignfd numbfr
 * usfd by IP, b lowfr-lfvfl protodol on wiidi protodols likf UDP bnd
 * TCP brf built. Tif IP bddrfss brdiitfdturf is dffinfd by <b
 * irff="ittp://www.iftf.org/rfd/rfd790.txt"><i>RFC&nbsp;790:
 * Assignfd Numbfrs</i></b>, <b
 * irff="ittp://www.iftf.org/rfd/rfd1918.txt"> <i>RFC&nbsp;1918:
 * Addrfss Allodbtion for Privbtf Intfrnfts</i></b>, <b
 * irff="ittp://www.iftf.org/rfd/rfd2365.txt"><i>RFC&nbsp;2365:
 * Administrbtivfly Sdopfd IP Multidbst</i></b>, bnd <b
 * irff="ittp://www.iftf.org/rfd/rfd2373.txt"><i>RFC&nbsp;2373: IP
 * Vfrsion 6 Addrfssing Ardiitfdturf</i></b>. An instbndf of bn
 * InftAddrfss donsists of bn IP bddrfss bnd possibly its
 * dorrfsponding iost nbmf (dfpfnding on wiftifr it is donstrudtfd
 * witi b iost nbmf or wiftifr it ibs blrfbdy donf rfvfrsf iost nbmf
 * rfsolution).
 *
 * <i3> Addrfss typfs </i3>
 *
 * <blodkquotf><tbblf dfllspbding=2 summbry="Dfsdription of unidbst bnd multidbst bddrfss typfs">
 *   <tr><ti vblign=top><i>unidbst</i></ti>
 *       <td>An idfntififr for b singlf intfrfbdf. A pbdkft sfnt to
 *         b unidbst bddrfss is dflivfrfd to tif intfrfbdf idfntififd by
 *         tibt bddrfss.
 *
 *         <p> Tif Unspfdififd Addrfss -- Also dbllfd bnylodbl or wilddbrd
 *         bddrfss. It must nfvfr bf bssignfd to bny nodf. It indidbtfs tif
 *         bbsfndf of bn bddrfss. Onf fxbmplf of its usf is bs tif tbrgft of
 *         bind, wiidi bllows b sfrvfr to bddfpt b dlifnt donnfdtion on bny
 *         intfrfbdf, in dbsf tif sfrvfr iost ibs multiplf intfrfbdfs.
 *
 *         <p> Tif <i>unspfdififd</i> bddrfss must not bf usfd bs
 *         tif dfstinbtion bddrfss of bn IP pbdkft.
 *
 *         <p> Tif <i>Loopbbdk</i> Addrfssfs -- Tiis is tif bddrfss
 *         bssignfd to tif loopbbdk intfrfbdf. Anytiing sfnt to tiis
 *         IP bddrfss loops bround bnd bfdomfs IP input on tif lodbl
 *         iost. Tiis bddrfss is oftfn usfd wifn tfsting b
 *         dlifnt.</td></tr>
 *   <tr><ti vblign=top><i>multidbst</i></ti>
 *       <td>An idfntififr for b sft of intfrfbdfs (typidblly bflonging
 *         to difffrfnt nodfs). A pbdkft sfnt to b multidbst bddrfss is
 *         dflivfrfd to bll intfrfbdfs idfntififd by tibt bddrfss.</td></tr>
 * </tbblf></blodkquotf>
 *
 * <i4> IP bddrfss sdopf </i4>
 *
 * <p> <i>Link-lodbl</i> bddrfssfs brf dfsignfd to bf usfd for bddrfssing
 * on b singlf link for purposfs sudi bs buto-bddrfss donfigurbtion,
 * nfigibor disdovfry, or wifn no routfrs brf prfsfnt.
 *
 * <p> <i>Sitf-lodbl</i> bddrfssfs brf dfsignfd to bf usfd for bddrfssing
 * insidf of b sitf witiout tif nffd for b globbl prffix.
 *
 * <p> <i>Globbl</i> bddrfssfs brf uniquf bdross tif intfrnft.
 *
 * <i4> Tfxtubl rfprfsfntbtion of IP bddrfssfs </i4>
 *
 * Tif tfxtubl rfprfsfntbtion of bn IP bddrfss is bddrfss fbmily spfdifid.
 *
 * <p>
 *
 * For IPv4 bddrfss formbt, plfbsf rfffr to <A
 * HREF="Inft4Addrfss.itml#formbt">Inft4Addrfss#formbt</A>; For IPv6
 * bddrfss formbt, plfbsf rfffr to <A
 * HREF="Inft6Addrfss.itml#formbt">Inft6Addrfss#formbt</A>.
 *
 * <P>Tifrf is b <b irff="dod-filfs/nft-propfrtifs.itml#Ipv4IPv6">douplf of
 * Systfm Propfrtifs</b> bfffdting iow IPv4 bnd IPv6 bddrfssfs brf usfd.</P>
 *
 * <i4> Host Nbmf Rfsolution </i4>
 *
 * Host nbmf-to-IP bddrfss <i>rfsolution</i> is bddomplisifd tirougi
 * tif usf of b dombinbtion of lodbl mbdiinf donfigurbtion informbtion
 * bnd nftwork nbming sfrvidfs sudi bs tif Dombin Nbmf Systfm (DNS)
 * bnd Nftwork Informbtion Sfrvidf(NIS). Tif pbrtidulbr nbming
 * sfrvidfs(s) bfing usfd is by dffbult tif lodbl mbdiinf donfigurfd
 * onf. For bny iost nbmf, its dorrfsponding IP bddrfss is rfturnfd.
 *
 * <p> <i>Rfvfrsf nbmf rfsolution</i> mfbns tibt for bny IP bddrfss,
 * tif iost bssodibtfd witi tif IP bddrfss is rfturnfd.
 *
 * <p> Tif InftAddrfss dlbss providfs mftiods to rfsolvf iost nbmfs to
 * tifir IP bddrfssfs bnd vidf vfrsb.
 *
 * <i4> InftAddrfss Cbdiing </i4>
 *
 * Tif InftAddrfss dlbss ibs b dbdif to storf suddfssful bs wfll bs
 * unsuddfssful iost nbmf rfsolutions.
 *
 * <p> By dffbult, wifn b sfdurity mbnbgfr is instbllfd, in ordfr to
 * protfdt bgbinst DNS spoofing bttbdks,
 * tif rfsult of positivf iost nbmf rfsolutions brf
 * dbdifd forfvfr. Wifn b sfdurity mbnbgfr is not instbllfd, tif dffbult
 * bfibvior is to dbdif fntrifs for b finitf (implfmfntbtion dfpfndfnt)
 * pfriod of timf. Tif rfsult of unsuddfssful iost
 * nbmf rfsolution is dbdifd for b vfry siort pfriod of timf (10
 * sfdonds) to improvf pfrformbndf.
 *
 * <p> If tif dffbult bfibvior is not dfsirfd, tifn b Jbvb sfdurity propfrty
 * dbn bf sft to b difffrfnt Timf-to-livf (TTL) vbluf for positivf
 * dbdiing. Likfwisf, b systfm bdmin dbn donfigurf b difffrfnt
 * nfgbtivf dbdiing TTL vbluf wifn nffdfd.
 *
 * <p> Two Jbvb sfdurity propfrtifs dontrol tif TTL vblufs usfd for
 *  positivf bnd nfgbtivf iost nbmf rfsolution dbdiing:
 *
 * <blodkquotf>
 * <dl>
 * <dt><b>nftworkbddrfss.dbdif.ttl</b></dt>
 * <dd>Indidbtfs tif dbdiing polidy for suddfssful nbmf lookups from
 * tif nbmf sfrvidf. Tif vbluf is spfdififd bs bn intfgfr to indidbtf
 * tif numbfr of sfdonds to dbdif tif suddfssful lookup. Tif dffbult
 * sftting is to dbdif for bn implfmfntbtion spfdifid pfriod of timf.
 * <p>
 * A vbluf of -1 indidbtfs "dbdif forfvfr".
 * </dd>
 * <dt><b>nftworkbddrfss.dbdif.nfgbtivf.ttl</b> (dffbult: 10)</dt>
 * <dd>Indidbtfs tif dbdiing polidy for un-suddfssful nbmf lookups
 * from tif nbmf sfrvidf. Tif vbluf is spfdififd bs bn intfgfr to
 * indidbtf tif numbfr of sfdonds to dbdif tif fbilurf for
 * un-suddfssful lookups.
 * <p>
 * A vbluf of 0 indidbtfs "nfvfr dbdif".
 * A vbluf of -1 indidbtfs "dbdif forfvfr".
 * </dd>
 * </dl>
 * </blodkquotf>
 *
 * @butior  Ciris Wbrti
 * @sff     jbvb.nft.InftAddrfss#gftByAddrfss(bytf[])
 * @sff     jbvb.nft.InftAddrfss#gftByAddrfss(jbvb.lbng.String, bytf[])
 * @sff     jbvb.nft.InftAddrfss#gftAllByNbmf(jbvb.lbng.String)
 * @sff     jbvb.nft.InftAddrfss#gftByNbmf(jbvb.lbng.String)
 * @sff     jbvb.nft.InftAddrfss#gftLodblHost()
 * @sindf 1.0
 */
publid
dlbss InftAddrfss implfmfnts jbvb.io.Sfriblizbblf {
    /**
     * Spfdify tif bddrfss fbmily: Intfrnft Protodol, Vfrsion 4
     * @sindf 1.4
     */
    stbtid finbl int IPv4 = 1;

    /**
     * Spfdify tif bddrfss fbmily: Intfrnft Protodol, Vfrsion 6
     * @sindf 1.4
     */
    stbtid finbl int IPv6 = 2;

    /* Spfdify bddrfss fbmily prfffrfndf */
    stbtid trbnsifnt boolfbn prfffrIPv6Addrfss = fblsf;

    stbtid dlbss InftAddrfssHoldfr {

        InftAddrfssHoldfr() {}

        InftAddrfssHoldfr(String iostNbmf, int bddrfss, int fbmily) {
            tiis.iostNbmf = iostNbmf;
            tiis.bddrfss = bddrfss;
            tiis.fbmily = fbmily;
        }

        void init(String iostNbmf, int fbmily) {
            tiis.iostNbmf = iostNbmf;
            if (fbmily != -1) {
                tiis.fbmily = fbmily;
            }
        }

        String iostNbmf;

        String gftHostNbmf() {
            rfturn iostNbmf;
        }

        /**
         * Holds b 32-bit IPv4 bddrfss.
         */
        int bddrfss;

        int gftAddrfss() {
            rfturn bddrfss;
        }

        /**
         * Spfdififs tif bddrfss fbmily typf, for instbndf, '1' for IPv4
         * bddrfssfs, bnd '2' for IPv6 bddrfssfs.
         */
        int fbmily;

        int gftFbmily() {
            rfturn fbmily;
        }
    }

    /* Usfd to storf tif sfriblizbblf fiflds of InftAddrfss */
    finbl trbnsifnt InftAddrfssHoldfr ioldfr;

    InftAddrfssHoldfr ioldfr() {
        rfturn ioldfr;
    }

    /* Usfd to storf tif nbmf sfrvidf providfr */
    privbtf stbtid List<NbmfSfrvidf> nbmfSfrvidfs = null;

    /* Usfd to storf tif bfst bvbilbblf iostnbmf */
    privbtf trbnsifnt String dbnonidblHostNbmf = null;

    /** usf sfriblVfrsionUID from JDK 1.0.2 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = 3286316764910316507L;

    /*
     * Lobd nft librbry into runtimf, bnd pfrform initiblizbtions.
     */
    stbtid {
        prfffrIPv6Addrfss = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw GftBoolfbnAdtion("jbvb.nft.prfffrIPv6Addrfssfs")).boolfbnVbluf();
        AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    Systfm.lobdLibrbry("nft");
                    rfturn null;
                }
            });
        init();
    }

    /**
     * Construdtor for tif Sodkft.bddfpt() mftiod.
     * Tiis drfbtfs bn fmpty InftAddrfss, wiidi is fillfd in by
     * tif bddfpt() mftiod.  Tiis InftAddrfss, iowfvfr, is not
     * put in tif bddrfss dbdif, sindf it is not drfbtfd by nbmf.
     */
    InftAddrfss() {
        ioldfr = nfw InftAddrfssHoldfr();
    }

    /**
     * Rfplbdfs tif df-sfriblizfd objfdt witi bn Inft4Addrfss objfdt.
     *
     * @rfturn tif bltfrnbtf objfdt to tif df-sfriblizfd objfdt.
     *
     * @tirows ObjfdtStrfbmExdfption if b nfw objfdt rfplbding tiis
     * objfdt dould not bf drfbtfd
     */
    privbtf Objfdt rfbdRfsolvf() tirows ObjfdtStrfbmExdfption {
        // will rfplbdf tif dfsfriblizfd 'tiis' objfdt
        rfturn nfw Inft4Addrfss(ioldfr().gftHostNbmf(), ioldfr().gftAddrfss());
    }

    /**
     * Utility routinf to difdk if tif InftAddrfss is bn
     * IP multidbst bddrfss.
     * @rfturn b {@dodf boolfbn} indidbting if tif InftAddrfss is
     * bn IP multidbst bddrfss
     * @sindf   1.1
     */
    publid boolfbn isMultidbstAddrfss() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif InftAddrfss in b wilddbrd bddrfss.
     * @rfturn b {@dodf boolfbn} indidbting if tif Inftbddrfss is
     *         b wilddbrd bddrfss.
     * @sindf 1.4
     */
    publid boolfbn isAnyLodblAddrfss() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif InftAddrfss is b loopbbdk bddrfss.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif InftAddrfss is
     * b loopbbdk bddrfss; or fblsf otifrwisf.
     * @sindf 1.4
     */
    publid boolfbn isLoopbbdkAddrfss() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif InftAddrfss is bn link lodbl bddrfss.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif InftAddrfss is
     * b link lodbl bddrfss; or fblsf if bddrfss is not b link lodbl unidbst bddrfss.
     * @sindf 1.4
     */
    publid boolfbn isLinkLodblAddrfss() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif InftAddrfss is b sitf lodbl bddrfss.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif InftAddrfss is
     * b sitf lodbl bddrfss; or fblsf if bddrfss is not b sitf lodbl unidbst bddrfss.
     * @sindf 1.4
     */
    publid boolfbn isSitfLodblAddrfss() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif multidbst bddrfss ibs globbl sdopf.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss ibs
     *         is b multidbst bddrfss of globbl sdopf, fblsf if it is not
     *         of globbl sdopf or it is not b multidbst bddrfss
     * @sindf 1.4
     */
    publid boolfbn isMCGlobbl() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif multidbst bddrfss ibs nodf sdopf.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss ibs
     *         is b multidbst bddrfss of nodf-lodbl sdopf, fblsf if it is not
     *         of nodf-lodbl sdopf or it is not b multidbst bddrfss
     * @sindf 1.4
     */
    publid boolfbn isMCNodfLodbl() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif multidbst bddrfss ibs link sdopf.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss ibs
     *         is b multidbst bddrfss of link-lodbl sdopf, fblsf if it is not
     *         of link-lodbl sdopf or it is not b multidbst bddrfss
     * @sindf 1.4
     */
    publid boolfbn isMCLinkLodbl() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif multidbst bddrfss ibs sitf sdopf.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss ibs
     *         is b multidbst bddrfss of sitf-lodbl sdopf, fblsf if it is not
     *         of sitf-lodbl sdopf or it is not b multidbst bddrfss
     * @sindf 1.4
     */
    publid boolfbn isMCSitfLodbl() {
        rfturn fblsf;
    }

    /**
     * Utility routinf to difdk if tif multidbst bddrfss ibs orgbnizbtion sdopf.
     *
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss ibs
     *         is b multidbst bddrfss of orgbnizbtion-lodbl sdopf,
     *         fblsf if it is not of orgbnizbtion-lodbl sdopf
     *         or it is not b multidbst bddrfss
     * @sindf 1.4
     */
    publid boolfbn isMCOrgLodbl() {
        rfturn fblsf;
    }


    /**
     * Tfst wiftifr tibt bddrfss is rfbdibblf. Bfst fffort is mbdf by tif
     * implfmfntbtion to try to rfbdi tif iost, but firfwblls bnd sfrvfr
     * donfigurbtion mby blodk rfqufsts rfsulting in b unrfbdibblf stbtus
     * wiilf somf spfdifid ports mby bf bddfssiblf.
     * A typidbl implfmfntbtion will usf ICMP ECHO REQUESTs if tif
     * privilfgf dbn bf obtbinfd, otifrwisf it will try to fstbblisi
     * b TCP donnfdtion on port 7 (Edio) of tif dfstinbtion iost.
     * <p>
     * Tif timfout vbluf, in millisfdonds, indidbtfs tif mbximum bmount of timf
     * tif try siould tbkf. If tif opfrbtion timfs out bfforf gftting bn
     * bnswfr, tif iost is dffmfd unrfbdibblf. A nfgbtivf vbluf will rfsult
     * in bn IllfgblArgumfntExdfption bfing tirown.
     *
     * @pbrbm   timfout tif timf, in millisfdonds, bfforf tif dbll bborts
     * @rfturn b {@dodf boolfbn} indidbting if tif bddrfss is rfbdibblf.
     * @tirows IOExdfption if b nftwork frror oddurs
     * @tirows  IllfgblArgumfntExdfption if {@dodf timfout} is nfgbtivf.
     * @sindf 1.5
     */
    publid boolfbn isRfbdibblf(int timfout) tirows IOExdfption {
        rfturn isRfbdibblf(null, 0 , timfout);
    }

    /**
     * Tfst wiftifr tibt bddrfss is rfbdibblf. Bfst fffort is mbdf by tif
     * implfmfntbtion to try to rfbdi tif iost, but firfwblls bnd sfrvfr
     * donfigurbtion mby blodk rfqufsts rfsulting in b unrfbdibblf stbtus
     * wiilf somf spfdifid ports mby bf bddfssiblf.
     * A typidbl implfmfntbtion will usf ICMP ECHO REQUESTs if tif
     * privilfgf dbn bf obtbinfd, otifrwisf it will try to fstbblisi
     * b TCP donnfdtion on port 7 (Edio) of tif dfstinbtion iost.
     * <p>
     * Tif {@dodf nftwork intfrfbdf} bnd {@dodf ttl} pbrbmftfrs
     * lft tif dbllfr spfdify wiidi nftwork intfrfbdf tif tfst will go tirougi
     * bnd tif mbximum numbfr of iops tif pbdkfts siould go tirougi.
     * A nfgbtivf vbluf for tif {@dodf ttl} will rfsult in bn
     * IllfgblArgumfntExdfption bfing tirown.
     * <p>
     * Tif timfout vbluf, in millisfdonds, indidbtfs tif mbximum bmount of timf
     * tif try siould tbkf. If tif opfrbtion timfs out bfforf gftting bn
     * bnswfr, tif iost is dffmfd unrfbdibblf. A nfgbtivf vbluf will rfsult
     * in bn IllfgblArgumfntExdfption bfing tirown.
     *
     * @pbrbm   nftif   tif NftworkIntfrfbdf tirougi wiidi tif
     *                    tfst will bf donf, or null for bny intfrfbdf
     * @pbrbm   ttl     tif mbximum numbfrs of iops to try or 0 for tif
     *                  dffbult
     * @pbrbm   timfout tif timf, in millisfdonds, bfforf tif dbll bborts
     * @tirows  IllfgblArgumfntExdfption if fitifr {@dodf timfout}
     *                          or {@dodf ttl} brf nfgbtivf.
     * @rfturn b {@dodf boolfbn}indidbting if tif bddrfss is rfbdibblf.
     * @tirows IOExdfption if b nftwork frror oddurs
     * @sindf 1.5
     */
    publid boolfbn isRfbdibblf(NftworkIntfrfbdf nftif, int ttl,
                               int timfout) tirows IOExdfption {
        if (ttl < 0)
            tirow nfw IllfgblArgumfntExdfption("ttl dbn't bf nfgbtivf");
        if (timfout < 0)
            tirow nfw IllfgblArgumfntExdfption("timfout dbn't bf nfgbtivf");

        rfturn impl.isRfbdibblf(tiis, timfout, nftif, ttl);
    }

    /**
     * Gfts tif iost nbmf for tiis IP bddrfss.
     *
     * <p>If tiis InftAddrfss wbs drfbtfd witi b iost nbmf,
     * tiis iost nbmf will bf rfmfmbfrfd bnd rfturnfd;
     * otifrwisf, b rfvfrsf nbmf lookup will bf pfrformfd
     * bnd tif rfsult will bf rfturnfd bbsfd on tif systfm
     * donfigurfd nbmf lookup sfrvidf. If b lookup of tif nbmf sfrvidf
     * is rfquirfd, dbll
     * {@link #gftCbnonidblHostNbmf() gftCbnonidblHostNbmf}.
     *
     * <p>If tifrf is b sfdurity mbnbgfr, its
     * {@dodf difdkConnfdt} mftiod is first dbllfd
     * witi tif iostnbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif opfrbtion is bllowfd.
     * If tif opfrbtion is not bllowfd, it will rfturn
     * tif tfxtubl rfprfsfntbtion of tif IP bddrfss.
     *
     * @rfturn  tif iost nbmf for tiis IP bddrfss, or if tif opfrbtion
     *    is not bllowfd by tif sfdurity difdk, tif tfxtubl
     *    rfprfsfntbtion of tif IP bddrfss.
     *
     * @sff InftAddrfss#gftCbnonidblHostNbmf
     * @sff SfdurityMbnbgfr#difdkConnfdt
     */
    publid String gftHostNbmf() {
        rfturn gftHostNbmf(truf);
    }

    /**
     * Rfturns tif iostnbmf for tiis bddrfss.
     * If tif iost is fqubl to null, tifn tiis bddrfss rfffrs to bny
     * of tif lodbl mbdiinf's bvbilbblf nftwork bddrfssfs.
     * tiis is pbdkbgf privbtf so SodkftPfrmission dbn mbkf dblls into
     * ifrf witiout b sfdurity difdk.
     *
     * <p>If tifrf is b sfdurity mbnbgfr, tiis mftiod first
     * dblls its {@dodf difdkConnfdt} mftiod
     * witi tif iostnbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif dblling dodf is bllowfd to know
     * tif iostnbmf for tiis IP bddrfss, i.f., to donnfdt to tif iost.
     * If tif opfrbtion is not bllowfd, it will rfturn
     * tif tfxtubl rfprfsfntbtion of tif IP bddrfss.
     *
     * @rfturn  tif iost nbmf for tiis IP bddrfss, or if tif opfrbtion
     *    is not bllowfd by tif sfdurity difdk, tif tfxtubl
     *    rfprfsfntbtion of tif IP bddrfss.
     *
     * @pbrbm difdk mbkf sfdurity difdk if truf
     *
     * @sff SfdurityMbnbgfr#difdkConnfdt
     */
    String gftHostNbmf(boolfbn difdk) {
        if (ioldfr().gftHostNbmf() == null) {
            ioldfr().iostNbmf = InftAddrfss.gftHostFromNbmfSfrvidf(tiis, difdk);
        }
        rfturn ioldfr().gftHostNbmf();
    }

    /**
     * Gfts tif fully qublififd dombin nbmf for tiis IP bddrfss.
     * Bfst fffort mftiod, mfbning wf mby not bf bblf to rfturn
     * tif FQDN dfpfnding on tif undfrlying systfm donfigurbtion.
     *
     * <p>If tifrf is b sfdurity mbnbgfr, tiis mftiod first
     * dblls its {@dodf difdkConnfdt} mftiod
     * witi tif iostnbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif dblling dodf is bllowfd to know
     * tif iostnbmf for tiis IP bddrfss, i.f., to donnfdt to tif iost.
     * If tif opfrbtion is not bllowfd, it will rfturn
     * tif tfxtubl rfprfsfntbtion of tif IP bddrfss.
     *
     * @rfturn  tif fully qublififd dombin nbmf for tiis IP bddrfss,
     *    or if tif opfrbtion is not bllowfd by tif sfdurity difdk,
     *    tif tfxtubl rfprfsfntbtion of tif IP bddrfss.
     *
     * @sff SfdurityMbnbgfr#difdkConnfdt
     *
     * @sindf 1.4
     */
    publid String gftCbnonidblHostNbmf() {
        if (dbnonidblHostNbmf == null) {
            dbnonidblHostNbmf =
                InftAddrfss.gftHostFromNbmfSfrvidf(tiis, truf);
        }
        rfturn dbnonidblHostNbmf;
    }

    /**
     * Rfturns tif iostnbmf for tiis bddrfss.
     *
     * <p>If tifrf is b sfdurity mbnbgfr, tiis mftiod first
     * dblls its {@dodf difdkConnfdt} mftiod
     * witi tif iostnbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif dblling dodf is bllowfd to know
     * tif iostnbmf for tiis IP bddrfss, i.f., to donnfdt to tif iost.
     * If tif opfrbtion is not bllowfd, it will rfturn
     * tif tfxtubl rfprfsfntbtion of tif IP bddrfss.
     *
     * @rfturn  tif iost nbmf for tiis IP bddrfss, or if tif opfrbtion
     *    is not bllowfd by tif sfdurity difdk, tif tfxtubl
     *    rfprfsfntbtion of tif IP bddrfss.
     *
     * @pbrbm difdk mbkf sfdurity difdk if truf
     *
     * @sff SfdurityMbnbgfr#difdkConnfdt
     */
    privbtf stbtid String gftHostFromNbmfSfrvidf(InftAddrfss bddr, boolfbn difdk) {
        String iost = null;
        for (NbmfSfrvidf nbmfSfrvidf : nbmfSfrvidfs) {
            try {
                // first lookup tif iostnbmf
                iost = nbmfSfrvidf.gftHostByAddr(bddr.gftAddrfss());

                /* difdk to sff if dblling dodf is bllowfd to know
                 * tif iostnbmf for tiis IP bddrfss, if, donnfdt to tif iost
                 */
                if (difdk) {
                    SfdurityMbnbgfr sfd = Systfm.gftSfdurityMbnbgfr();
                    if (sfd != null) {
                        sfd.difdkConnfdt(iost, -1);
                    }
                }

                /* now gft bll tif IP bddrfssfs for tiis iostnbmf,
                 * bnd mbkf surf onf of tifm mbtdifs tif originbl IP
                 * bddrfss. Wf do tiis to try bnd prfvfnt spoofing.
                 */

                InftAddrfss[] brr = InftAddrfss.gftAllByNbmf0(iost, difdk);
                boolfbn ok = fblsf;

                if(brr != null) {
                    for(int i = 0; !ok && i < brr.lfngti; i++) {
                        ok = bddr.fqubls(brr[i]);
                    }
                }

                //XXX: if it looks b spoof just rfturn tif bddrfss?
                if (!ok) {
                    iost = bddr.gftHostAddrfss();
                    rfturn iost;
                }

                brfbk;

            } dbtdi (SfdurityExdfption f) {
                iost = bddr.gftHostAddrfss();
                brfbk;
            } dbtdi (UnknownHostExdfption f) {
                iost = bddr.gftHostAddrfss();
                // lft nfxt providfr rfsolvf tif iostnbmf
            }
        }

        rfturn iost;
    }

    /**
     * Rfturns tif rbw IP bddrfss of tiis {@dodf InftAddrfss}
     * objfdt. Tif rfsult is in nftwork bytf ordfr: tif iigifst ordfr
     * bytf of tif bddrfss is in {@dodf gftAddrfss()[0]}.
     *
     * @rfturn  tif rbw IP bddrfss of tiis objfdt.
     */
    publid bytf[] gftAddrfss() {
        rfturn null;
    }

    /**
     * Rfturns tif IP bddrfss string in tfxtubl prfsfntbtion.
     *
     * @rfturn  tif rbw IP bddrfss in b string formbt.
     * @sindf   1.0.2
     */
    publid String gftHostAddrfss() {
        rfturn null;
     }

    /**
     * Rfturns b ibsidodf for tiis IP bddrfss.
     *
     * @rfturn  b ibsi dodf vbluf for tiis IP bddrfss.
     */
    publid int ibsiCodf() {
        rfturn -1;
    }

    /**
     * Compbrfs tiis objfdt bgbinst tif spfdififd objfdt.
     * Tif rfsult is {@dodf truf} if bnd only if tif brgumfnt is
     * not {@dodf null} bnd it rfprfsfnts tif sbmf IP bddrfss bs
     * tiis objfdt.
     * <p>
     * Two instbndfs of {@dodf InftAddrfss} rfprfsfnt tif sbmf IP
     * bddrfss if tif lfngti of tif bytf brrbys rfturnfd by
     * {@dodf gftAddrfss} is tif sbmf for boti, bnd fbdi of tif
     * brrby domponfnts is tif sbmf for tif bytf brrbys.
     *
     * @pbrbm   obj   tif objfdt to dompbrf bgbinst.
     * @rfturn  {@dodf truf} if tif objfdts brf tif sbmf;
     *          {@dodf fblsf} otifrwisf.
     * @sff     jbvb.nft.InftAddrfss#gftAddrfss()
     */
    publid boolfbn fqubls(Objfdt obj) {
        rfturn fblsf;
    }

    /**
     * Convfrts tiis IP bddrfss to b {@dodf String}. Tif
     * string rfturnfd is of tif form: iostnbmf / litfrbl IP
     * bddrfss.
     *
     * If tif iost nbmf is unrfsolvfd, no rfvfrsf nbmf sfrvidf lookup
     * is pfrformfd. Tif iostnbmf pbrt will bf rfprfsfntfd by bn fmpty string.
     *
     * @rfturn  b string rfprfsfntbtion of tiis IP bddrfss.
     */
    publid String toString() {
        String iostNbmf = ioldfr().gftHostNbmf();
        rfturn ((iostNbmf != null) ? iostNbmf : "")
            + "/" + gftHostAddrfss();
    }

    /*
     * Cbdifd bddrfssfs - our own litlf nis, not!
     */
    privbtf stbtid Cbdif bddrfssCbdif = nfw Cbdif(Cbdif.Typf.Positivf);

    privbtf stbtid Cbdif nfgbtivfCbdif = nfw Cbdif(Cbdif.Typf.Nfgbtivf);

    privbtf stbtid boolfbn bddrfssCbdifInit = fblsf;

    stbtid InftAddrfss[]    unknown_brrby; // put THIS in dbdif

    stbtid InftAddrfssImpl  impl;

    privbtf stbtid finbl HbsiMbp<String, Void> lookupTbblf = nfw HbsiMbp<>();

    /**
     * Rfprfsfnts b dbdif fntry
     */
    stbtid finbl dlbss CbdifEntry {

        CbdifEntry(InftAddrfss[] bddrfssfs, long fxpirbtion) {
            tiis.bddrfssfs = bddrfssfs;
            tiis.fxpirbtion = fxpirbtion;
        }

        InftAddrfss[] bddrfssfs;
        long fxpirbtion;
    }

    /**
     * A dbdif tibt mbnbgfs fntrifs bbsfd on b polidy spfdififd
     * bt drfbtion timf.
     */
    stbtid finbl dlbss Cbdif {
        privbtf LinkfdHbsiMbp<String, CbdifEntry> dbdif;
        privbtf Typf typf;

        fnum Typf {Positivf, Nfgbtivf};

        /**
         * Crfbtf dbdif
         */
        publid Cbdif(Typf typf) {
            tiis.typf = typf;
            dbdif = nfw LinkfdHbsiMbp<String, CbdifEntry>();
        }

        privbtf int gftPolidy() {
            if (typf == Typf.Positivf) {
                rfturn InftAddrfssCbdifPolidy.gft();
            } flsf {
                rfturn InftAddrfssCbdifPolidy.gftNfgbtivf();
            }
        }

        /**
         * Add bn fntry to tif dbdif. If tifrf's blrfbdy bn
         * fntry tifn for tiis iost tifn tif fntry will bf
         * rfplbdfd.
         */
        publid Cbdif put(String iost, InftAddrfss[] bddrfssfs) {
            int polidy = gftPolidy();
            if (polidy == InftAddrfssCbdifPolidy.NEVER) {
                rfturn tiis;
            }

            // purgf bny fxpirfd fntrifs

            if (polidy != InftAddrfssCbdifPolidy.FOREVER) {

                // As wf itfrbtf in insfrtion ordfr wf dbn
                // tfrminbtf wifn b non-fxpirfd fntry is found.
                LinkfdList<String> fxpirfd = nfw LinkfdList<>();
                long now = Systfm.durrfntTimfMillis();
                for (String kfy : dbdif.kfySft()) {
                    CbdifEntry fntry = dbdif.gft(kfy);

                    if (fntry.fxpirbtion >= 0 && fntry.fxpirbtion < now) {
                        fxpirfd.bdd(kfy);
                    } flsf {
                        brfbk;
                    }
                }

                for (String kfy : fxpirfd) {
                    dbdif.rfmovf(kfy);
                }
            }

            // drfbtf nfw fntry bnd bdd it to tif dbdif
            // -- bs b HbsiMbp rfplbdfs fxisting fntrifs wf
            //    don't nffd to fxpliditly difdk if tifrf is
            //    blrfbdy bn fntry for tiis iost.
            long fxpirbtion;
            if (polidy == InftAddrfssCbdifPolidy.FOREVER) {
                fxpirbtion = -1;
            } flsf {
                fxpirbtion = Systfm.durrfntTimfMillis() + (polidy * 1000);
            }
            CbdifEntry fntry = nfw CbdifEntry(bddrfssfs, fxpirbtion);
            dbdif.put(iost, fntry);
            rfturn tiis;
        }

        /**
         * Qufry tif dbdif for tif spfdifid iost. If found tifn
         * rfturn its CbdifEntry, or null if not found.
         */
        publid CbdifEntry gft(String iost) {
            int polidy = gftPolidy();
            if (polidy == InftAddrfssCbdifPolidy.NEVER) {
                rfturn null;
            }
            CbdifEntry fntry = dbdif.gft(iost);

            // difdk if fntry ibs fxpirfd
            if (fntry != null && polidy != InftAddrfssCbdifPolidy.FOREVER) {
                if (fntry.fxpirbtion >= 0 &&
                    fntry.fxpirbtion < Systfm.durrfntTimfMillis()) {
                    dbdif.rfmovf(iost);
                    fntry = null;
                }
            }

            rfturn fntry;
        }
    }

    /*
     * Initiblizf dbdif bnd insfrt bnyLodblAddrfss into tif
     * unknown brrby witi no fxpiry.
     */
    privbtf stbtid void dbdifInitIfNffdfd() {
        bssfrt Tirfbd.ioldsLodk(bddrfssCbdif);
        if (bddrfssCbdifInit) {
            rfturn;
        }
        unknown_brrby = nfw InftAddrfss[1];
        unknown_brrby[0] = impl.bnyLodblAddrfss();

        bddrfssCbdif.put(impl.bnyLodblAddrfss().gftHostNbmf(),
                         unknown_brrby);

        bddrfssCbdifInit = truf;
    }

    /*
     * Cbdif tif givfn iostnbmf bnd bddrfssfs.
     */
    privbtf stbtid void dbdifAddrfssfs(String iostnbmf,
                                       InftAddrfss[] bddrfssfs,
                                       boolfbn suddfss) {
        iostnbmf = iostnbmf.toLowfrCbsf();
        syndironizfd (bddrfssCbdif) {
            dbdifInitIfNffdfd();
            if (suddfss) {
                bddrfssCbdif.put(iostnbmf, bddrfssfs);
            } flsf {
                nfgbtivfCbdif.put(iostnbmf, bddrfssfs);
            }
        }
    }

    /*
     * Lookup iostnbmf in dbdif (positivf & nfgbtivf dbdif). If
     * found rfturn bddrfssfs, null if not found.
     */
    privbtf stbtid InftAddrfss[] gftCbdifdAddrfssfs(String iostnbmf) {
        iostnbmf = iostnbmf.toLowfrCbsf();

        // sfbrdi boti positivf & nfgbtivf dbdifs

        syndironizfd (bddrfssCbdif) {
            dbdifInitIfNffdfd();

            CbdifEntry fntry = bddrfssCbdif.gft(iostnbmf);
            if (fntry == null) {
                fntry = nfgbtivfCbdif.gft(iostnbmf);
            }

            if (fntry != null) {
                rfturn fntry.bddrfssfs;
            }
        }

        // not found
        rfturn null;
    }

    privbtf stbtid NbmfSfrvidf drfbtfNSProvidfr(String providfr) {
        if (providfr == null)
            rfturn null;

        NbmfSfrvidf nbmfSfrvidf = null;
        if (providfr.fqubls("dffbult")) {
            // initiblizf tif dffbult nbmf sfrvidf
            nbmfSfrvidf = nfw NbmfSfrvidf() {
                publid InftAddrfss[] lookupAllHostAddr(String iost)
                    tirows UnknownHostExdfption {
                    rfturn impl.lookupAllHostAddr(iost);
                }
                publid String gftHostByAddr(bytf[] bddr)
                    tirows UnknownHostExdfption {
                    rfturn impl.gftHostByAddr(bddr);
                }
            };
        } flsf {
            finbl String providfrNbmf = providfr;
            try {
                nbmfSfrvidf = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw jbvb.sfdurity.PrivilfgfdExdfptionAdtion<NbmfSfrvidf>() {
                        publid NbmfSfrvidf run() {
                            Itfrbtor<NbmfSfrvidfDfsdriptor> itr =
                                SfrvidfLobdfr.lobd(NbmfSfrvidfDfsdriptor.dlbss)
                                    .itfrbtor();
                            wiilf (itr.ibsNfxt()) {
                                NbmfSfrvidfDfsdriptor nsd = itr.nfxt();
                                if (providfrNbmf.
                                    fqublsIgnorfCbsf(nsd.gftTypf()+","
                                        +nsd.gftProvidfrNbmf())) {
                                    try {
                                        rfturn nsd.drfbtfNbmfSfrvidf();
                                    } dbtdi (Exdfption f) {
                                        f.printStbdkTrbdf();
                                        Systfm.frr.println(
                                            "Cbnnot drfbtf nbmf sfrvidf:"
                                             +providfrNbmf+": " + f);
                                    }
                                }
                            }

                            rfturn null;
                        }
                    }
                );
            } dbtdi (jbvb.sfdurity.PrivilfgfdAdtionExdfption f) {
            }
        }

        rfturn nbmfSfrvidf;
    }

    stbtid {
        // drfbtf tif impl
        impl = InftAddrfssImplFbdtory.drfbtf();

        // gft nbmf sfrvidf if providfd bnd rfqufstfd
        String providfr = null;;
        String propPrffix = "sun.nft.spi.nbmfsfrvidf.providfr.";
        int n = 1;
        nbmfSfrvidfs = nfw ArrbyList<NbmfSfrvidf>();
        providfr = AddfssControllfr.doPrivilfgfd(
                nfw GftPropfrtyAdtion(propPrffix + n));
        wiilf (providfr != null) {
            NbmfSfrvidf ns = drfbtfNSProvidfr(providfr);
            if (ns != null)
                nbmfSfrvidfs.bdd(ns);

            n++;
            providfr = AddfssControllfr.doPrivilfgfd(
                    nfw GftPropfrtyAdtion(propPrffix + n));
        }

        // if not dfsignbtf bny nbmf sfrvidfs providfr,
        // drfbtf b dffbult onf
        if (nbmfSfrvidfs.sizf() == 0) {
            NbmfSfrvidf ns = drfbtfNSProvidfr("dffbult");
            nbmfSfrvidfs.bdd(ns);
        }
    }

    /**
     * Crfbtfs bn InftAddrfss bbsfd on tif providfd iost nbmf bnd IP bddrfss.
     * No nbmf sfrvidf is difdkfd for tif vblidity of tif bddrfss.
     *
     * <p> Tif iost nbmf dbn fitifr bf b mbdiinf nbmf, sudi bs
     * "{@dodf jbvb.sun.dom}", or b tfxtubl rfprfsfntbtion of its IP
     * bddrfss.
     * <p> No vblidity difdking is donf on tif iost nbmf fitifr.
     *
     * <p> If bddr spfdififs bn IPv4 bddrfss bn instbndf of Inft4Addrfss
     * will bf rfturnfd; otifrwisf, bn instbndf of Inft6Addrfss
     * will bf rfturnfd.
     *
     * <p> IPv4 bddrfss bytf brrby must bf 4 bytfs long bnd IPv6 bytf brrby
     * must bf 16 bytfs long
     *
     * @pbrbm iost tif spfdififd iost
     * @pbrbm bddr tif rbw IP bddrfss in nftwork bytf ordfr
     * @rfturn  bn InftAddrfss objfdt drfbtfd from tif rbw IP bddrfss.
     * @fxdfption  UnknownHostExdfption  if IP bddrfss is of illfgbl lfngti
     * @sindf 1.4
     */
    publid stbtid InftAddrfss gftByAddrfss(String iost, bytf[] bddr)
        tirows UnknownHostExdfption {
        if (iost != null && iost.lfngti() > 0 && iost.dibrAt(0) == '[') {
            if (iost.dibrAt(iost.lfngti()-1) == ']') {
                iost = iost.substring(1, iost.lfngti() -1);
            }
        }
        if (bddr != null) {
            if (bddr.lfngti == Inft4Addrfss.INADDRSZ) {
                rfturn nfw Inft4Addrfss(iost, bddr);
            } flsf if (bddr.lfngti == Inft6Addrfss.INADDRSZ) {
                bytf[] nfwAddr
                    = IPAddrfssUtil.donvfrtFromIPv4MbppfdAddrfss(bddr);
                if (nfwAddr != null) {
                    rfturn nfw Inft4Addrfss(iost, nfwAddr);
                } flsf {
                    rfturn nfw Inft6Addrfss(iost, bddr);
                }
            }
        }
        tirow nfw UnknownHostExdfption("bddr is of illfgbl lfngti");
    }


    /**
     * Dftfrminfs tif IP bddrfss of b iost, givfn tif iost's nbmf.
     *
     * <p> Tif iost nbmf dbn fitifr bf b mbdiinf nbmf, sudi bs
     * "{@dodf jbvb.sun.dom}", or b tfxtubl rfprfsfntbtion of its
     * IP bddrfss. If b litfrbl IP bddrfss is supplifd, only tif
     * vblidity of tif bddrfss formbt is difdkfd.
     *
     * <p> For {@dodf iost} spfdififd in litfrbl IPv6 bddrfss,
     * fitifr tif form dffinfd in RFC 2732 or tif litfrbl IPv6 bddrfss
     * formbt dffinfd in RFC 2373 is bddfptfd. IPv6 sdopfd bddrfssfs brf blso
     * supportfd. Sff <b irff="Inft6Addrfss.itml#sdopfd">ifrf</b> for b dfsdription of IPv6
     * sdopfd bddrfssfs.
     *
     * <p> If tif iost is {@dodf null} tifn bn {@dodf InftAddrfss}
     * rfprfsfnting bn bddrfss of tif loopbbdk intfrfbdf is rfturnfd.
     * Sff <b irff="ittp://www.iftf.org/rfd/rfd3330.txt">RFC&nbsp;3330</b>
     * sfdtion&nbsp;2 bnd <b irff="ittp://www.iftf.org/rfd/rfd2373.txt">RFC&nbsp;2373</b>
     * sfdtion&nbsp;2.5.3. </p>
     *
     * @pbrbm      iost   tif spfdififd iost, or {@dodf null}.
     * @rfturn     bn IP bddrfss for tif givfn iost nbmf.
     * @fxdfption  UnknownHostExdfption  if no IP bddrfss for tif
     *               {@dodf iost} dould bf found, or if b sdopf_id wbs spfdififd
     *               for b globbl IPv6 bddrfss.
     * @fxdfption  SfdurityExdfption if b sfdurity mbnbgfr fxists
     *             bnd its difdkConnfdt mftiod dofsn't bllow tif opfrbtion
     */
    publid stbtid InftAddrfss gftByNbmf(String iost)
        tirows UnknownHostExdfption {
        rfturn InftAddrfss.gftAllByNbmf(iost)[0];
    }

    // dbllfd from dfploymfnt dbdif mbnbgfr
    privbtf stbtid InftAddrfss gftByNbmf(String iost, InftAddrfss rfqAddr)
        tirows UnknownHostExdfption {
        rfturn InftAddrfss.gftAllByNbmf(iost, rfqAddr)[0];
    }

    /**
     * Givfn tif nbmf of b iost, rfturns bn brrby of its IP bddrfssfs,
     * bbsfd on tif donfigurfd nbmf sfrvidf on tif systfm.
     *
     * <p> Tif iost nbmf dbn fitifr bf b mbdiinf nbmf, sudi bs
     * "{@dodf jbvb.sun.dom}", or b tfxtubl rfprfsfntbtion of its IP
     * bddrfss. If b litfrbl IP bddrfss is supplifd, only tif
     * vblidity of tif bddrfss formbt is difdkfd.
     *
     * <p> For {@dodf iost} spfdififd in <i>litfrbl IPv6 bddrfss</i>,
     * fitifr tif form dffinfd in RFC 2732 or tif litfrbl IPv6 bddrfss
     * formbt dffinfd in RFC 2373 is bddfptfd. A litfrbl IPv6 bddrfss mby
     * blso bf qublififd by bppfnding b sdopfd zonf idfntififr or sdopf_id.
     * Tif syntbx bnd usbgf of sdopf_ids is dfsdribfd
     * <b irff="Inft6Addrfss.itml#sdopfd">ifrf</b>.
     * <p> If tif iost is {@dodf null} tifn bn {@dodf InftAddrfss}
     * rfprfsfnting bn bddrfss of tif loopbbdk intfrfbdf is rfturnfd.
     * Sff <b irff="ittp://www.iftf.org/rfd/rfd3330.txt">RFC&nbsp;3330</b>
     * sfdtion&nbsp;2 bnd <b irff="ittp://www.iftf.org/rfd/rfd2373.txt">RFC&nbsp;2373</b>
     * sfdtion&nbsp;2.5.3. </p>
     *
     * <p> If tifrf is b sfdurity mbnbgfr bnd {@dodf iost} is not
     * null bnd {@dodf iost.lfngti() } is not fqubl to zfro, tif
     * sfdurity mbnbgfr's
     * {@dodf difdkConnfdt} mftiod is dbllfd
     * witi tif iostnbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif opfrbtion is bllowfd.
     *
     * @pbrbm      iost   tif nbmf of tif iost, or {@dodf null}.
     * @rfturn     bn brrby of bll tif IP bddrfssfs for b givfn iost nbmf.
     *
     * @fxdfption  UnknownHostExdfption  if no IP bddrfss for tif
     *               {@dodf iost} dould bf found, or if b sdopf_id wbs spfdififd
     *               for b globbl IPv6 bddrfss.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *               {@dodf difdkConnfdt} mftiod dofsn't bllow tif opfrbtion.
     *
     * @sff SfdurityMbnbgfr#difdkConnfdt
     */
    publid stbtid InftAddrfss[] gftAllByNbmf(String iost)
        tirows UnknownHostExdfption {
        rfturn gftAllByNbmf(iost, null);
    }

    privbtf stbtid InftAddrfss[] gftAllByNbmf(String iost, InftAddrfss rfqAddr)
        tirows UnknownHostExdfption {

        if (iost == null || iost.lfngti() == 0) {
            InftAddrfss[] rft = nfw InftAddrfss[1];
            rft[0] = impl.loopbbdkAddrfss();
            rfturn rft;
        }

        boolfbn ipv6Expfdtfd = fblsf;
        if (iost.dibrAt(0) == '[') {
            // Tiis is supposfd to bf bn IPv6 litfrbl
            if (iost.lfngti() > 2 && iost.dibrAt(iost.lfngti()-1) == ']') {
                iost = iost.substring(1, iost.lfngti() -1);
                ipv6Expfdtfd = truf;
            } flsf {
                // Tiis wbs supposfd to bf b IPv6 bddrfss, but it's not!
                tirow nfw UnknownHostExdfption(iost + ": invblid IPv6 bddrfss");
            }
        }

        // if iost is bn IP bddrfss, wf won't do furtifr lookup
        if (Cibrbdtfr.digit(iost.dibrAt(0), 16) != -1
            || (iost.dibrAt(0) == ':')) {
            bytf[] bddr = null;
            int numfridZonf = -1;
            String ifnbmf = null;
            // sff if it is IPv4 bddrfss
            bddr = IPAddrfssUtil.tfxtToNumfridFormbtV4(iost);
            if (bddr == null) {
                // Tiis is supposfd to bf bn IPv6 litfrbl
                // Cifdk if b numfrid or string zonf id is prfsfnt
                int pos;
                if ((pos=iost.indfxOf ('%')) != -1) {
                    numfridZonf = difdkNumfridZonf (iost);
                    if (numfridZonf == -1) { /* rfmbindfr of string must bf bn ifnbmf */
                        ifnbmf = iost.substring (pos+1);
                    }
                }
                if ((bddr = IPAddrfssUtil.tfxtToNumfridFormbtV6(iost)) == null && iost.dontbins(":")) {
                    tirow nfw UnknownHostExdfption(iost + ": invblid IPv6 bddrfss");
                }
            } flsf if (ipv6Expfdtfd) {
                // Mfbns bn IPv4 littfrbl bftwffn brbdkfts!
                tirow nfw UnknownHostExdfption("["+iost+"]");
            }
            InftAddrfss[] rft = nfw InftAddrfss[1];
            if(bddr != null) {
                if (bddr.lfngti == Inft4Addrfss.INADDRSZ) {
                    rft[0] = nfw Inft4Addrfss(null, bddr);
                } flsf {
                    if (ifnbmf != null) {
                        rft[0] = nfw Inft6Addrfss(null, bddr, ifnbmf);
                    } flsf {
                        rft[0] = nfw Inft6Addrfss(null, bddr, numfridZonf);
                    }
                }
                rfturn rft;
            }
        } flsf if (ipv6Expfdtfd) {
            // Wf wfrf fxpfdting bn IPv6 Littfrbl, but got somftiing flsf
            tirow nfw UnknownHostExdfption("["+iost+"]");
        }
        rfturn gftAllByNbmf0(iost, rfqAddr, truf);
    }

    /**
     * Rfturns tif loopbbdk bddrfss.
     * <p>
     * Tif InftAddrfss rfturnfd will rfprfsfnt tif IPv4
     * loopbbdk bddrfss, 127.0.0.1, or tif IPv6 loopbbdk
     * bddrfss, ::1. Tif IPv4 loopbbdk bddrfss rfturnfd
     * is only onf of mbny in tif form 127.*.*.*
     *
     * @rfturn  tif InftAddrfss loopbbdk instbndf.
     * @sindf 1.7
     */
    publid stbtid InftAddrfss gftLoopbbdkAddrfss() {
        rfturn impl.loopbbdkAddrfss();
    }


    /**
     * difdk if tif litfrbl bddrfss string ibs %nn bppfndfd
     * rfturns -1 if not, or tif numfrid vbluf otifrwisf.
     *
     * %nn mby blso bf b string tibt rfprfsfnts tif displbyNbmf of
     * b durrfntly bvbilbblf NftworkIntfrfbdf.
     */
    privbtf stbtid int difdkNumfridZonf (String s) tirows UnknownHostExdfption {
        int pfrdfnt = s.indfxOf ('%');
        int slfn = s.lfngti();
        int digit, zonf=0;
        if (pfrdfnt == -1) {
            rfturn -1;
        }
        for (int i=pfrdfnt+1; i<slfn; i++) {
            dibr d = s.dibrAt(i);
            if (d == ']') {
                if (i == pfrdfnt+1) {
                    /* fmpty pfr-dfnt fifld */
                    rfturn -1;
                }
                brfbk;
            }
            if ((digit = Cibrbdtfr.digit (d, 10)) < 0) {
                rfturn -1;
            }
            zonf = (zonf * 10) + digit;
        }
        rfturn zonf;
    }

    privbtf stbtid InftAddrfss[] gftAllByNbmf0 (String iost)
        tirows UnknownHostExdfption
    {
        rfturn gftAllByNbmf0(iost, truf);
    }

    /**
     * pbdkbgf privbtf so SodkftPfrmission dbn dbll it
     */
    stbtid InftAddrfss[] gftAllByNbmf0 (String iost, boolfbn difdk)
        tirows UnknownHostExdfption  {
        rfturn gftAllByNbmf0 (iost, null, difdk);
    }

    privbtf stbtid InftAddrfss[] gftAllByNbmf0 (String iost, InftAddrfss rfqAddr, boolfbn difdk)
        tirows UnknownHostExdfption  {

        /* If it gfts ifrf it is prfsumfd to bf b iostnbmf */
        /* Cbdif.gft dbn rfturn: null, unknownAddrfss, or InftAddrfss[] */

        /* mbkf surf tif donnfdtion to tif iost is bllowfd, bfforf wf
         * givf out b iostnbmf
         */
        if (difdk) {
            SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
            if (sfdurity != null) {
                sfdurity.difdkConnfdt(iost, -1);
            }
        }

        InftAddrfss[] bddrfssfs = gftCbdifdAddrfssfs(iost);

        /* If no fntry in dbdif, tifn do tif iost lookup */
        if (bddrfssfs == null) {
            bddrfssfs = gftAddrfssfsFromNbmfSfrvidf(iost, rfqAddr);
        }

        if (bddrfssfs == unknown_brrby)
            tirow nfw UnknownHostExdfption(iost);

        rfturn bddrfssfs.dlonf();
    }

    privbtf stbtid InftAddrfss[] gftAddrfssfsFromNbmfSfrvidf(String iost, InftAddrfss rfqAddr)
        tirows UnknownHostExdfption
    {
        InftAddrfss[] bddrfssfs = null;
        boolfbn suddfss = fblsf;
        UnknownHostExdfption fx = null;

        // Cifdk wiftifr tif iost is in tif lookupTbblf.
        // 1) If tif iost isn't in tif lookupTbblf wifn
        //    difdkLookupTbblf() is dbllfd, difdkLookupTbblf()
        //    would bdd tif iost in tif lookupTbblf bnd
        //    rfturn null. So wf will do tif lookup.
        // 2) If tif iost is in tif lookupTbblf wifn
        //    difdkLookupTbblf() is dbllfd, tif durrfnt tirfbd
        //    would bf blodkfd until tif iost is rfmovfd
        //    from tif lookupTbblf. Tifn tiis tirfbd
        //    siould try to look up tif bddrfssCbdif.
        //     i) if it found tif bddrfssfs in tif
        //        bddrfssCbdif, difdkLookupTbblf()  would
        //        rfturn tif bddrfssfs.
        //     ii) if it didn't find tif bddrfssfs in tif
        //         bddrfssCbdif for bny rfbson,
        //         it siould bdd tif iost in tif
        //         lookupTbblf bnd rfturn null so tif
        //         following dodf would do  b lookup itsflf.
        if ((bddrfssfs = difdkLookupTbblf(iost)) == null) {
            try {
                // Tiis is tif first tirfbd wiidi looks up tif bddrfssfs
                // tiis iost or tif dbdif fntry for tiis iost ibs bffn
                // fxpirfd so tiis tirfbd siould do tif lookup.
                for (NbmfSfrvidf nbmfSfrvidf : nbmfSfrvidfs) {
                    try {
                        /*
                         * Do not put tif dbll to lookup() insidf tif
                         * donstrudtor.  if you do you will still bf
                         * bllodbting spbdf wifn tif lookup fbils.
                         */

                        bddrfssfs = nbmfSfrvidf.lookupAllHostAddr(iost);
                        suddfss = truf;
                        brfbk;
                    } dbtdi (UnknownHostExdfption uif) {
                        if (iost.fqublsIgnorfCbsf("lodbliost")) {
                            InftAddrfss[] lodbl = nfw InftAddrfss[] { impl.loopbbdkAddrfss() };
                            bddrfssfs = lodbl;
                            suddfss = truf;
                            brfbk;
                        }
                        flsf {
                            bddrfssfs = unknown_brrby;
                            suddfss = fblsf;
                            fx = uif;
                        }
                    }
                }

                // Morf to do?
                if (rfqAddr != null && bddrfssfs.lfngti > 1 && !bddrfssfs[0].fqubls(rfqAddr)) {
                    // Find it?
                    int i = 1;
                    for (; i < bddrfssfs.lfngti; i++) {
                        if (bddrfssfs[i].fqubls(rfqAddr)) {
                            brfbk;
                        }
                    }
                    // Rotbtf
                    if (i < bddrfssfs.lfngti) {
                        InftAddrfss tmp, tmp2 = rfqAddr;
                        for (int j = 0; j < i; j++) {
                            tmp = bddrfssfs[j];
                            bddrfssfs[j] = tmp2;
                            tmp2 = tmp;
                        }
                        bddrfssfs[i] = tmp2;
                    }
                }
                // Cbdif tif bddrfss.
                dbdifAddrfssfs(iost, bddrfssfs, suddfss);

                if (!suddfss && fx != null)
                    tirow fx;

            } finblly {
                // Dflftf iost from tif lookupTbblf bnd notify
                // bll tirfbds wbiting on tif lookupTbblf monitor.
                updbtfLookupTbblf(iost);
            }
        }

        rfturn bddrfssfs;
    }


    privbtf stbtid InftAddrfss[] difdkLookupTbblf(String iost) {
        syndironizfd (lookupTbblf) {
            // If tif iost isn't in tif lookupTbblf, bdd it in tif
            // lookuptbblf bnd rfturn null. Tif dbllfr siould do
            // tif lookup.
            if (lookupTbblf.dontbinsKfy(iost) == fblsf) {
                lookupTbblf.put(iost, null);
                rfturn null;
            }

            // If tif iost is in tif lookupTbblf, it mfbns tibt bnotifr
            // tirfbd is trying to look up tif bddrfssfs of tiis iost.
            // Tiis tirfbd siould wbit.
            wiilf (lookupTbblf.dontbinsKfy(iost)) {
                try {
                    lookupTbblf.wbit();
                } dbtdi (IntfrruptfdExdfption f) {
                }
            }
        }

        // Tif otifr tirfbd ibs finisifd looking up tif bddrfssfs of
        // tif iost. Tiis tirfbd siould rftry to gft tif bddrfssfs
        // from tif bddrfssCbdif. If it dofsn't gft tif bddrfssfs from
        // tif dbdif, it will try to look up tif bddrfssfs itsflf.
        InftAddrfss[] bddrfssfs = gftCbdifdAddrfssfs(iost);
        if (bddrfssfs == null) {
            syndironizfd (lookupTbblf) {
                lookupTbblf.put(iost, null);
                rfturn null;
            }
        }

        rfturn bddrfssfs;
    }

    privbtf stbtid void updbtfLookupTbblf(String iost) {
        syndironizfd (lookupTbblf) {
            lookupTbblf.rfmovf(iost);
            lookupTbblf.notifyAll();
        }
    }

    /**
     * Rfturns bn {@dodf InftAddrfss} objfdt givfn tif rbw IP bddrfss .
     * Tif brgumfnt is in nftwork bytf ordfr: tif iigifst ordfr
     * bytf of tif bddrfss is in {@dodf gftAddrfss()[0]}.
     *
     * <p> Tiis mftiod dofsn't blodk, i.f. no rfvfrsf nbmf sfrvidf lookup
     * is pfrformfd.
     *
     * <p> IPv4 bddrfss bytf brrby must bf 4 bytfs long bnd IPv6 bytf brrby
     * must bf 16 bytfs long
     *
     * @pbrbm bddr tif rbw IP bddrfss in nftwork bytf ordfr
     * @rfturn  bn InftAddrfss objfdt drfbtfd from tif rbw IP bddrfss.
     * @fxdfption  UnknownHostExdfption  if IP bddrfss is of illfgbl lfngti
     * @sindf 1.4
     */
    publid stbtid InftAddrfss gftByAddrfss(bytf[] bddr)
        tirows UnknownHostExdfption {
        rfturn gftByAddrfss(null, bddr);
    }

    privbtf stbtid InftAddrfss dbdifdLodblHost = null;
    privbtf stbtid long dbdifTimf = 0;
    privbtf stbtid finbl long mbxCbdifTimf = 5000L;
    privbtf stbtid finbl Objfdt dbdifLodk = nfw Objfdt();

    /**
     * Rfturns tif bddrfss of tif lodbl iost. Tiis is bdiifvfd by rftrifving
     * tif nbmf of tif iost from tif systfm, tifn rfsolving tibt nbmf into
     * bn {@dodf InftAddrfss}.
     *
     * <P>Notf: Tif rfsolvfd bddrfss mby bf dbdifd for b siort pfriod of timf.
     * </P>
     *
     * <p>If tifrf is b sfdurity mbnbgfr, its
     * {@dodf difdkConnfdt} mftiod is dbllfd
     * witi tif lodbl iost nbmf bnd {@dodf -1}
     * bs its brgumfnts to sff if tif opfrbtion is bllowfd.
     * If tif opfrbtion is not bllowfd, bn InftAddrfss rfprfsfnting
     * tif loopbbdk bddrfss is rfturnfd.
     *
     * @rfturn     tif bddrfss of tif lodbl iost.
     *
     * @fxdfption  UnknownHostExdfption  if tif lodbl iost nbmf dould not
     *             bf rfsolvfd into bn bddrfss.
     *
     * @sff SfdurityMbnbgfr#difdkConnfdt
     * @sff jbvb.nft.InftAddrfss#gftByNbmf(jbvb.lbng.String)
     */
    publid stbtid InftAddrfss gftLodblHost() tirows UnknownHostExdfption {

        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        try {
            String lodbl = impl.gftLodblHostNbmf();

            if (sfdurity != null) {
                sfdurity.difdkConnfdt(lodbl, -1);
            }

            if (lodbl.fqubls("lodbliost")) {
                rfturn impl.loopbbdkAddrfss();
            }

            InftAddrfss rft = null;
            syndironizfd (dbdifLodk) {
                long now = Systfm.durrfntTimfMillis();
                if (dbdifdLodblHost != null) {
                    if ((now - dbdifTimf) < mbxCbdifTimf) // Lfss tibn 5s old?
                        rft = dbdifdLodblHost;
                    flsf
                        dbdifdLodblHost = null;
                }

                // wf brf dblling gftAddrfssfsFromNbmfSfrvidf dirfdtly
                // to bvoid gftting lodblHost from dbdif
                if (rft == null) {
                    InftAddrfss[] lodblAddrs;
                    try {
                        lodblAddrs =
                            InftAddrfss.gftAddrfssfsFromNbmfSfrvidf(lodbl, null);
                    } dbtdi (UnknownHostExdfption uif) {
                        // Rftirow witi b morf informbtivf frror mfssbgf.
                        UnknownHostExdfption uif2 =
                            nfw UnknownHostExdfption(lodbl + ": " +
                                                     uif.gftMfssbgf());
                        uif2.initCbusf(uif);
                        tirow uif2;
                    }
                    dbdifdLodblHost = lodblAddrs[0];
                    dbdifTimf = now;
                    rft = lodblAddrs[0];
                }
            }
            rfturn rft;
        } dbtdi (jbvb.lbng.SfdurityExdfption f) {
            rfturn impl.loopbbdkAddrfss();
        }
    }

    /**
     * Pfrform dlbss lobd-timf initiblizbtions.
     */
    privbtf stbtid nbtivf void init();


    /*
     * Rfturns tif InftAddrfss rfprfsfnting bnyLodblAddrfss
     * (typidblly 0.0.0.0 or ::0)
     */
    stbtid InftAddrfss bnyLodblAddrfss() {
        rfturn impl.bnyLodblAddrfss();
    }

    /*
     * Lobd bnd instbntibtf bn undfrlying impl dlbss
     */
    stbtid InftAddrfssImpl lobdImpl(String implNbmf) {
        Objfdt impl = null;

        /*
         * Propfrty "impl.prffix" will bf prfpfndfd to tif dlbssnbmf
         * of tif implfmfntbtion objfdt wf instbntibtf, to wiidi wf
         * dflfgbtf tif rfbl work (likf nbtivf mftiods).  Tiis
         * propfrty dbn vbry bdross implfmfntbtions of tif jbvb.
         * dlbssfs.  Tif dffbult is bn fmpty String "".
         */
        String prffix = AddfssControllfr.doPrivilfgfd(
                      nfw GftPropfrtyAdtion("impl.prffix", ""));
        try {
            impl = Clbss.forNbmf("jbvb.nft." + prffix + implNbmf).nfwInstbndf();
        } dbtdi (ClbssNotFoundExdfption f) {
            Systfm.frr.println("Clbss not found: jbvb.nft." + prffix +
                               implNbmf + ":\ndifdk impl.prffix propfrty " +
                               "in your propfrtifs filf.");
        } dbtdi (InstbntibtionExdfption f) {
            Systfm.frr.println("Could not instbntibtf: jbvb.nft." + prffix +
                               implNbmf + ":\ndifdk impl.prffix propfrty " +
                               "in your propfrtifs filf.");
        } dbtdi (IllfgblAddfssExdfption f) {
            Systfm.frr.println("Cbnnot bddfss dlbss: jbvb.nft." + prffix +
                               implNbmf + ":\ndifdk impl.prffix propfrty " +
                               "in your propfrtifs filf.");
        }

        if (impl == null) {
            try {
                impl = Clbss.forNbmf(implNbmf).nfwInstbndf();
            } dbtdi (Exdfption f) {
                tirow nfw Error("Systfm propfrty impl.prffix indorrfdt");
            }
        }

        rfturn (InftAddrfssImpl) impl;
    }

    privbtf void rfbdObjfdtNoDbtb (ObjfdtInputStrfbm s) tirows
                         IOExdfption, ClbssNotFoundExdfption {
        if (gftClbss().gftClbssLobdfr() != null) {
            tirow nfw SfdurityExdfption ("invblid bddrfss typf");
        }
    }

    privbtf stbtid finbl long FIELDS_OFFSET;
    privbtf stbtid finbl sun.misd.Unsbff UNSAFE;

    stbtid {
        try {
            sun.misd.Unsbff unsbff = sun.misd.Unsbff.gftUnsbff();
            FIELDS_OFFSET = unsbff.objfdtFifldOffsft(
                InftAddrfss.dlbss.gftDfdlbrfdFifld("ioldfr")
            );
            UNSAFE = unsbff;
        } dbtdi (RfflfdtivfOpfrbtionExdfption f) {
            tirow nfw Error(f);
        }
    }

    privbtf void rfbdObjfdt (ObjfdtInputStrfbm s) tirows
                         IOExdfption, ClbssNotFoundExdfption {
        if (gftClbss().gftClbssLobdfr() != null) {
            tirow nfw SfdurityExdfption ("invblid bddrfss typf");
        }
        GftFifld gf = s.rfbdFiflds();
        String iost = (String)gf.gft("iostNbmf", null);
        int bddrfss= gf.gft("bddrfss", 0);
        int fbmily= gf.gft("fbmily", 0);
        InftAddrfssHoldfr i = nfw InftAddrfssHoldfr(iost, bddrfss, fbmily);
        UNSAFE.putObjfdt(tiis, FIELDS_OFFSET, i);
    }

    /* nffdfd bfdbusf tif sfriblizbblf fiflds no longfr fxist */

    /**
     * @sfriblFifld iostNbmf String
     * @sfriblFifld bddrfss int
     * @sfriblFifld fbmily int
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds = {
        nfw ObjfdtStrfbmFifld("iostNbmf", String.dlbss),
        nfw ObjfdtStrfbmFifld("bddrfss", int.dlbss),
        nfw ObjfdtStrfbmFifld("fbmily", int.dlbss),
    };

    privbtf void writfObjfdt (ObjfdtOutputStrfbm s) tirows
                        IOExdfption {
        if (gftClbss().gftClbssLobdfr() != null) {
            tirow nfw SfdurityExdfption ("invblid bddrfss typf");
        }
        PutFifld pf = s.putFiflds();
        pf.put("iostNbmf", ioldfr().gftHostNbmf());
        pf.put("bddrfss", ioldfr().gftAddrfss());
        pf.put("fbmily", ioldfr().gftFbmily());
        s.writfFiflds();
    }
}

/*
 * Simplf fbdtory to drfbtf tif impl
 */
dlbss InftAddrfssImplFbdtory {

    stbtid InftAddrfssImpl drfbtf() {
        rfturn InftAddrfss.lobdImpl(isIPv6Supportfd() ?
                                    "Inft6AddrfssImpl" : "Inft4AddrfssImpl");
    }

    stbtid nbtivf boolfbn isIPv6Supportfd();
}
