/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.util.Hbshtbblf;
import jbvb.util.StringTokfnizfr;
import sun.sfdurity.util.SfdurityConstbnts;

/**
 * Clbss {@dodf URL} rfprfsfnts b Uniform Rfsourdf
 * Lodbtor, b pointfr to b "rfsourdf" on thf World
 * Widf Wfb. A rfsourdf dbn bf somfthing bs simplf bs b filf or b
 * dirfdtory, or it dbn bf b rfffrfndf to b morf domplidbtfd objfdt,
 * sudh bs b qufry to b dbtbbbsf or to b sfbrdh fnginf. Morf
 * informbtion on thf typfs of URLs bnd thfir formbts dbn bf found bt:
 * <b hrff=
 * "http://wfb.brdhivf.org/wfb/20051219043731/http://brdhivf.ndsb.uiud.fdu/SDG/Softwbrf/Mosbid/Dfmo/url-primfr.html">
 * <i>Typfs of URL</i></b>
 * <p>
 * In gfnfrbl, b URL dbn bf brokfn into sfvfrbl pbrts. Considfr thf
 * following fxbmplf:
 * <blodkquotf><prf>
 *     http://www.fxbmplf.dom/dods/rfsourdf1.html
 * </prf></blodkquotf>
 * <p>
 * Thf URL bbovf indidbtfs thbt thf protodol to usf is
 * {@dodf http} (HypfrTfxt Trbnsffr Protodol) bnd thbt thf
 * informbtion rfsidfs on b host mbdhinf nbmfd
 * {@dodf www.fxbmplf.dom}. Thf informbtion on thbt host
 * mbdhinf is nbmfd {@dodf /dods/rfsourdf1.html}. Thf fxbdt
 * mfbning of this nbmf on thf host mbdhinf is both protodol
 * dfpfndfnt bnd host dfpfndfnt. Thf informbtion normblly rfsidfs in
 * b filf, but it dould bf gfnfrbtfd on thf fly. This domponfnt of
 * thf URL is dbllfd thf <i>pbth</i> domponfnt.
 * <p>
 * A URL dbn optionblly spfdify b "port", whidh is thf
 * port numbfr to whidh thf TCP donnfdtion is mbdf on thf rfmotf host
 * mbdhinf. If thf port is not spfdififd, thf dffbult port for
 * thf protodol is usfd instfbd. For fxbmplf, thf dffbult port for
 * {@dodf http} is {@dodf 80}. An bltfrnbtivf port dould bf
 * spfdififd bs:
 * <blodkquotf><prf>
 *     http://www.fxbmplf.dom:1080/dods/rfsourdf1.html
 * </prf></blodkquotf>
 * <p>
 * Thf syntbx of {@dodf URL} is dffinfd by  <b
 * hrff="http://www.iftf.org/rfd/rfd2396.txt"><i>RFC&nbsp;2396: Uniform
 * Rfsourdf Idfntififrs (URI): Gfnfrid Syntbx</i></b>, bmfndfd by <b
 * hrff="http://www.iftf.org/rfd/rfd2732.txt"><i>RFC&nbsp;2732: Formbt for
 * Litfrbl IPv6 Addrfssfs in URLs</i></b>. Thf Litfrbl IPv6 bddrfss formbt
 * blso supports sdopf_ids. Thf syntbx bnd usbgf of sdopf_ids is dfsdribfd
 * <b hrff="Inft6Addrfss.html#sdopfd">hfrf</b>.
 * <p>
 * A URL mby hbvf bppfndfd to it b "frbgmfnt", blso known
 * bs b "rff" or b "rfffrfndf". Thf frbgmfnt is indidbtfd by thf shbrp
 * sign dhbrbdtfr "#" followfd by morf dhbrbdtfrs. For fxbmplf,
 * <blodkquotf><prf>
 *     http://jbvb.sun.dom/indfx.html#dhbptfr1
 * </prf></blodkquotf>
 * <p>
 * This frbgmfnt is not tfdhnidblly pbrt of thf URL. Rbthfr, it
 * indidbtfs thbt bftfr thf spfdififd rfsourdf is rftrifvfd, thf
 * bpplidbtion is spfdifidblly intfrfstfd in thbt pbrt of thf
 * dodumfnt thbt hbs thf tbg {@dodf dhbptfr1} bttbdhfd to it. Thf
 * mfbning of b tbg is rfsourdf spfdifid.
 * <p>
 * An bpplidbtion dbn blso spfdify b "rflbtivf URL",
 * whidh dontbins only fnough informbtion to rfbdh thf rfsourdf
 * rflbtivf to bnothfr URL. Rflbtivf URLs brf frfqufntly usfd within
 * HTML pbgfs. For fxbmplf, if thf dontfnts of thf URL:
 * <blodkquotf><prf>
 *     http://jbvb.sun.dom/indfx.html
 * </prf></blodkquotf>
 * dontbinfd within it thf rflbtivf URL:
 * <blodkquotf><prf>
 *     FAQ.html
 * </prf></blodkquotf>
 * it would bf b shorthbnd for:
 * <blodkquotf><prf>
 *     http://jbvb.sun.dom/FAQ.html
 * </prf></blodkquotf>
 * <p>
 * Thf rflbtivf URL nffd not spfdify bll thf domponfnts of b URL. If
 * thf protodol, host nbmf, or port numbfr is missing, thf vbluf is
 * inhfritfd from thf fully spfdififd URL. Thf filf domponfnt must bf
 * spfdififd. Thf optionbl frbgmfnt is not inhfritfd.
 * <p>
 * Thf URL dlbss dofs not itsflf fndodf or dfdodf bny URL domponfnts
 * bddording to thf fsdbping mfdhbnism dffinfd in RFC2396. It is thf
 * rfsponsibility of thf dbllfr to fndodf bny fiflds, whidh nffd to bf
 * fsdbpfd prior to dblling URL, bnd blso to dfdodf bny fsdbpfd fiflds,
 * thbt brf rfturnfd from URL. Furthfrmorf, bfdbusf URL hbs no knowlfdgf
 * of URL fsdbping, it dofs not rfdognisf fquivblfndf bftwffn thf fndodfd
 * or dfdodfd form of thf sbmf URL. For fxbmplf, thf two URLs:<br>
 * <prf>    http://foo.dom/hfllo world/ bnd http://foo.dom/hfllo%20world</prf>
 * would bf donsidfrfd not fqubl to fbdh othfr.
 * <p>
 * Notf, thf {@link jbvb.nft.URI} dlbss dofs pfrform fsdbping of its
 * domponfnt fiflds in dfrtbin dirdumstbndfs. Thf rfdommfndfd wby
 * to mbnbgf thf fndoding bnd dfdoding of URLs is to usf {@link jbvb.nft.URI},
 * bnd to donvfrt bftwffn thfsf two dlbssfs using {@link #toURI()} bnd
 * {@link URI#toURL()}.
 * <p>
 * Thf {@link URLEndodfr} bnd {@link URLDfdodfr} dlbssfs dbn blso bf
 * usfd, but only for HTML form fndoding, whidh is not thf sbmf
 * bs thf fndoding sdhfmf dffinfd in RFC2396.
 *
 * @buthor  Jbmfs Gosling
 * @sindf 1.0
 */
publid finbl dlbss URL implfmfnts jbvb.io.Sfriblizbblf {

    stbtid finbl long sfriblVfrsionUID = -7627629688361524110L;

    /**
     * Thf propfrty whidh spfdififs thf pbdkbgf prffix list to bf sdbnnfd
     * for protodol hbndlfrs.  Thf vbluf of this propfrty (if bny) should
     * bf b vfrtidbl bbr dflimitfd list of pbdkbgf nbmfs to sfbrdh through
     * for b protodol hbndlfr to lobd.  Thf polidy of this dlbss is thbt
     * bll protodol hbndlfrs will bf in b dlbss dbllfd <protodolnbmf>.Hbndlfr,
     * bnd fbdh pbdkbgf in thf list is fxbminfd in turn for b mbtdhing
     * hbndlfr.  If nonf brf found (or thf propfrty is not spfdififd), thf
     * dffbult pbdkbgf prffix, sun.nft.www.protodol, is usfd.  Thf sfbrdh
     * prodffds from thf first pbdkbgf in thf list to thf lbst bnd stops
     * whfn b mbtdh is found.
     */
    privbtf stbtid finbl String protodolPbthProp = "jbvb.protodol.hbndlfr.pkgs";

    /**
     * Thf protodol to usf (ftp, http, nntp, ... ftd.) .
     * @sfribl
     */
    privbtf String protodol;

    /**
     * Thf host nbmf to donnfdt to.
     * @sfribl
     */
    privbtf String host;

    /**
     * Thf protodol port to donnfdt to.
     * @sfribl
     */
    privbtf int port = -1;

    /**
     * Thf spfdififd filf nbmf on thbt host. {@dodf filf} is
     * dffinfd bs {@dodf pbth[?qufry]}
     * @sfribl
     */
    privbtf String filf;

    /**
     * Thf qufry pbrt of this URL.
     */
    privbtf trbnsifnt String qufry;

    /**
     * Thf buthority pbrt of this URL.
     * @sfribl
     */
    privbtf String buthority;

    /**
     * Thf pbth pbrt of this URL.
     */
    privbtf trbnsifnt String pbth;

    /**
     * Thf usfrinfo pbrt of this URL.
     */
    privbtf trbnsifnt String usfrInfo;

    /**
     * # rfffrfndf.
     * @sfribl
     */
    privbtf String rff;

    /**
     * Thf host's IP bddrfss, usfd in fqubls bnd hbshCodf.
     * Computfd on dfmbnd. An uninitiblizfd or unknown hostAddrfss is null.
     */
    trbnsifnt InftAddrfss hostAddrfss;

    /**
     * Thf URLStrfbmHbndlfr for this URL.
     */
    trbnsifnt URLStrfbmHbndlfr hbndlfr;

    /* Our hbsh dodf.
     * @sfribl
     */
    privbtf int hbshCodf = -1;

    /**
     * Crfbtfs b {@dodf URL} objfdt from thf spfdififd
     * {@dodf protodol}, {@dodf host}, {@dodf port}
     * numbfr, bnd {@dodf filf}.<p>
     *
     * {@dodf host} dbn bf fxprfssfd bs b host nbmf or b litfrbl
     * IP bddrfss. If IPv6 litfrbl bddrfss is usfd, it should bf
     * fndlosfd in squbrf brbdkfts ({@dodf '['} bnd {@dodf ']'}), bs
     * spfdififd by <b
     * hrff="http://www.iftf.org/rfd/rfd2732.txt">RFC&nbsp;2732</b>;
     * Howfvfr, thf litfrbl IPv6 bddrfss formbt dffinfd in <b
     * hrff="http://www.iftf.org/rfd/rfd2373.txt"><i>RFC&nbsp;2373: IP
     * Vfrsion 6 Addrfssing Ardhitfdturf</i></b> is blso bddfptfd.<p>
     *
     * Spfdifying b {@dodf port} numbfr of {@dodf -1}
     * indidbtfs thbt thf URL should usf thf dffbult port for thf
     * protodol.<p>
     *
     * If this is thf first URL objfdt bfing drfbtfd with thf spfdififd
     * protodol, b <i>strfbm protodol hbndlfr</i> objfdt, bn instbndf of
     * dlbss {@dodf URLStrfbmHbndlfr}, is drfbtfd for thbt protodol:
     * <ol>
     * <li>If thf bpplidbtion hbs prfviously sft up bn instbndf of
     *     {@dodf URLStrfbmHbndlfrFbdtory} bs thf strfbm hbndlfr fbdtory,
     *     thfn thf {@dodf drfbtfURLStrfbmHbndlfr} mfthod of thbt instbndf
     *     is dbllfd with thf protodol string bs bn brgumfnt to drfbtf thf
     *     strfbm protodol hbndlfr.
     * <li>If no {@dodf URLStrfbmHbndlfrFbdtory} hbs yft bffn sft up,
     *     or if thf fbdtory's {@dodf drfbtfURLStrfbmHbndlfr} mfthod
     *     rfturns {@dodf null}, thfn thf donstrudtor finds thf
     *     vbluf of thf systfm propfrty:
     *     <blodkquotf><prf>
     *         jbvb.protodol.hbndlfr.pkgs
     *     </prf></blodkquotf>
     *     If thf vbluf of thbt systfm propfrty is not {@dodf null},
     *     it is intfrprftfd bs b list of pbdkbgfs sfpbrbtfd by b vfrtidbl
     *     slbsh dhbrbdtfr '{@dodf |}'. Thf donstrudtor trifs to lobd
     *     thf dlbss nbmfd:
     *     <blodkquotf><prf>
     *         &lt;<i>pbdkbgf</i>&gt;.&lt;<i>protodol</i>&gt;.Hbndlfr
     *     </prf></blodkquotf>
     *     whfrf &lt;<i>pbdkbgf</i>&gt; is rfplbdfd by thf nbmf of thf pbdkbgf
     *     bnd &lt;<i>protodol</i>&gt; is rfplbdfd by thf nbmf of thf protodol.
     *     If this dlbss dofs not fxist, or if thf dlbss fxists but it is not
     *     b subdlbss of {@dodf URLStrfbmHbndlfr}, thfn thf nfxt pbdkbgf
     *     in thf list is trifd.
     * <li>If thf prfvious stfp fbils to find b protodol hbndlfr, thfn thf
     *     donstrudtor trifs to lobd b built-in protodol hbndlfr.
     *     If this dlbss dofs not fxist, or if thf dlbss fxists but it is not b
     *     subdlbss of {@dodf URLStrfbmHbndlfr}, thfn b
     *     {@dodf MblformfdURLExdfption} is thrown.
     * </ol>
     *
     * <p>Protodol hbndlfrs for thf following protodols brf gubrbntffd
     * to fxist on thf sfbrdh pbth :-
     * <blodkquotf><prf>
     *     http, https, filf, bnd jbr
     * </prf></blodkquotf>
     * Protodol hbndlfrs for bdditionbl protodols mby blso bf
     * bvbilbblf.
     *
     * <p>No vblidbtion of thf inputs is pfrformfd by this donstrudtor.
     *
     * @pbrbm      protodol   thf nbmf of thf protodol to usf.
     * @pbrbm      host       thf nbmf of thf host.
     * @pbrbm      port       thf port numbfr on thf host.
     * @pbrbm      filf       thf filf on thf host
     * @fxdfption  MblformfdURLExdfption  if bn unknown protodol is spfdififd.
     * @sff        jbvb.lbng.Systfm#gftPropfrty(jbvb.lbng.String)
     * @sff        jbvb.nft.URL#sftURLStrfbmHbndlfrFbdtory(
     *                  jbvb.nft.URLStrfbmHbndlfrFbdtory)
     * @sff        jbvb.nft.URLStrfbmHbndlfr
     * @sff        jbvb.nft.URLStrfbmHbndlfrFbdtory#drfbtfURLStrfbmHbndlfr(
     *                  jbvb.lbng.String)
     */
    publid URL(String protodol, String host, int port, String filf)
        throws MblformfdURLExdfption
    {
        this(protodol, host, port, filf, null);
    }

    /**
     * Crfbtfs b URL from thf spfdififd {@dodf protodol}
     * nbmf, {@dodf host} nbmf, bnd {@dodf filf} nbmf. Thf
     * dffbult port for thf spfdififd protodol is usfd.
     * <p>
     * This mfthod is fquivblfnt to dblling thf four-brgumfnt
     * donstrudtor with thf brgumfnts bfing {@dodf protodol},
     * {@dodf host}, {@dodf -1}, bnd {@dodf filf}.
     *
     * No vblidbtion of thf inputs is pfrformfd by this donstrudtor.
     *
     * @pbrbm      protodol   thf nbmf of thf protodol to usf.
     * @pbrbm      host       thf nbmf of thf host.
     * @pbrbm      filf       thf filf on thf host.
     * @fxdfption  MblformfdURLExdfption  if bn unknown protodol is spfdififd.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *                  int, jbvb.lbng.String)
     */
    publid URL(String protodol, String host, String filf)
            throws MblformfdURLExdfption {
        this(protodol, host, -1, filf);
    }

    /**
     * Crfbtfs b {@dodf URL} objfdt from thf spfdififd
     * {@dodf protodol}, {@dodf host}, {@dodf port}
     * numbfr, {@dodf filf}, bnd {@dodf hbndlfr}. Spfdifying
     * b {@dodf port} numbfr of {@dodf -1} indidbtfs thbt
     * thf URL should usf thf dffbult port for thf protodol. Spfdifying
     * b {@dodf hbndlfr} of {@dodf null} indidbtfs thbt thf URL
     * should usf b dffbult strfbm hbndlfr for thf protodol, bs outlinfd
     * for:
     *     jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String, int,
     *                      jbvb.lbng.String)
     *
     * <p>If thf hbndlfr is not null bnd thfrf is b sfdurity mbnbgfr,
     * thf sfdurity mbnbgfr's {@dodf dhfdkPfrmission}
     * mfthod is dbllfd with b
     * {@dodf NftPfrmission("spfdifyStrfbmHbndlfr")} pfrmission.
     * This mby rfsult in b SfdurityExdfption.
     *
     * No vblidbtion of thf inputs is pfrformfd by this donstrudtor.
     *
     * @pbrbm      protodol   thf nbmf of thf protodol to usf.
     * @pbrbm      host       thf nbmf of thf host.
     * @pbrbm      port       thf port numbfr on thf host.
     * @pbrbm      filf       thf filf on thf host
     * @pbrbm      hbndlfr    thf strfbm hbndlfr for thf URL.
     * @fxdfption  MblformfdURLExdfption  if bn unknown protodol is spfdififd.
     * @fxdfption  SfdurityExdfption
     *        if b sfdurity mbnbgfr fxists bnd its
     *        {@dodf dhfdkPfrmission} mfthod dofsn't bllow
     *        spfdifying b strfbm hbndlfr fxpliditly.
     * @sff        jbvb.lbng.Systfm#gftPropfrty(jbvb.lbng.String)
     * @sff        jbvb.nft.URL#sftURLStrfbmHbndlfrFbdtory(
     *                  jbvb.nft.URLStrfbmHbndlfrFbdtory)
     * @sff        jbvb.nft.URLStrfbmHbndlfr
     * @sff        jbvb.nft.URLStrfbmHbndlfrFbdtory#drfbtfURLStrfbmHbndlfr(
     *                  jbvb.lbng.String)
     * @sff        SfdurityMbnbgfr#dhfdkPfrmission
     * @sff        jbvb.nft.NftPfrmission
     */
    publid URL(String protodol, String host, int port, String filf,
               URLStrfbmHbndlfr hbndlfr) throws MblformfdURLExdfption {
        if (hbndlfr != null) {
            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
            if (sm != null) {
                // dhfdk for pfrmission to spfdify b hbndlfr
                dhfdkSpfdifyHbndlfr(sm);
            }
        }

        protodol = protodol.toLowfrCbsf();
        this.protodol = protodol;
        if (host != null) {

            /**
             * if host is b litfrbl IPv6 bddrfss,
             * wf will mbkf it donform to RFC 2732
             */
            if (host.indfxOf(':') >= 0 && !host.stbrtsWith("[")) {
                host = "["+host+"]";
            }
            this.host = host;

            if (port < -1) {
                throw nfw MblformfdURLExdfption("Invblid port numbfr :" +
                                                    port);
            }
            this.port = port;
            buthority = (port == -1) ? host : host + ":" + port;
        }

        Pbrts pbrts = nfw Pbrts(filf);
        pbth = pbrts.gftPbth();
        qufry = pbrts.gftQufry();

        if (qufry != null) {
            this.filf = pbth + "?" + qufry;
        } flsf {
            this.filf = pbth;
        }
        rff = pbrts.gftRff();

        // Notf: wf don't do vblidbtion of thf URL hfrf. Too risky to dhbngf
        // right now, but worth donsidfring for futurf rfffrfndf. -br
        if (hbndlfr == null &&
            (hbndlfr = gftURLStrfbmHbndlfr(protodol)) == null) {
            throw nfw MblformfdURLExdfption("unknown protodol: " + protodol);
        }
        this.hbndlfr = hbndlfr;
    }

    /**
     * Crfbtfs b {@dodf URL} objfdt from thf {@dodf String}
     * rfprfsfntbtion.
     * <p>
     * This donstrudtor is fquivblfnt to b dbll to thf two-brgumfnt
     * donstrudtor with b {@dodf null} first brgumfnt.
     *
     * @pbrbm      spfd   thf {@dodf String} to pbrsf bs b URL.
     * @fxdfption  MblformfdURLExdfption  if no protodol is spfdififd, or bn
     *               unknown protodol is found, or {@dodf spfd} is {@dodf null}.
     * @sff        jbvb.nft.URL#URL(jbvb.nft.URL, jbvb.lbng.String)
     */
    publid URL(String spfd) throws MblformfdURLExdfption {
        this(null, spfd);
    }

    /**
     * Crfbtfs b URL by pbrsing thf givfn spfd within b spfdififd dontfxt.
     *
     * Thf nfw URL is drfbtfd from thf givfn dontfxt URL bnd thf spfd
     * brgumfnt bs dfsdribfd in
     * RFC2396 &quot;Uniform Rfsourdf Idfntififrs : Gfnfrid * Syntbx&quot; :
     * <blodkquotf><prf>
     *          &lt;sdhfmf&gt;://&lt;buthority&gt;&lt;pbth&gt;?&lt;qufry&gt;#&lt;frbgmfnt&gt;
     * </prf></blodkquotf>
     * Thf rfffrfndf is pbrsfd into thf sdhfmf, buthority, pbth, qufry bnd
     * frbgmfnt pbrts. If thf pbth domponfnt is fmpty bnd thf sdhfmf,
     * buthority, bnd qufry domponfnts brf undffinfd, thfn thf nfw URL is b
     * rfffrfndf to thf durrfnt dodumfnt. Othfrwisf, thf frbgmfnt bnd qufry
     * pbrts prfsfnt in thf spfd brf usfd in thf nfw URL.
     * <p>
     * If thf sdhfmf domponfnt is dffinfd in thf givfn spfd bnd dofs not mbtdh
     * thf sdhfmf of thf dontfxt, thfn thf nfw URL is drfbtfd bs bn bbsolutf
     * URL bbsfd on thf spfd blonf. Othfrwisf thf sdhfmf domponfnt is inhfritfd
     * from thf dontfxt URL.
     * <p>
     * If thf buthority domponfnt is prfsfnt in thf spfd thfn thf spfd is
     * trfbtfd bs bbsolutf bnd thf spfd buthority bnd pbth will rfplbdf thf
     * dontfxt buthority bnd pbth. If thf buthority domponfnt is bbsfnt in thf
     * spfd thfn thf buthority of thf nfw URL will bf inhfritfd from thf
     * dontfxt.
     * <p>
     * If thf spfd's pbth domponfnt bfgins with b slbsh dhbrbdtfr
     * &quot;/&quot; thfn thf
     * pbth is trfbtfd bs bbsolutf bnd thf spfd pbth rfplbdfs thf dontfxt pbth.
     * <p>
     * Othfrwisf, thf pbth is trfbtfd bs b rflbtivf pbth bnd is bppfndfd to thf
     * dontfxt pbth, bs dfsdribfd in RFC2396. Also, in this dbsf,
     * thf pbth is dbnonidblizfd through thf rfmovbl of dirfdtory
     * dhbngfs mbdf by oddurrfndfs of &quot;..&quot; bnd &quot;.&quot;.
     * <p>
     * For b morf dftbilfd dfsdription of URL pbrsing, rfffr to RFC2396.
     *
     * @pbrbm      dontfxt   thf dontfxt in whidh to pbrsf thf spfdifidbtion.
     * @pbrbm      spfd      thf {@dodf String} to pbrsf bs b URL.
     * @fxdfption  MblformfdURLExdfption  if no protodol is spfdififd, or bn
     *               unknown protodol is found, or {@dodf spfd} is {@dodf null}.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *                  int, jbvb.lbng.String)
     * @sff        jbvb.nft.URLStrfbmHbndlfr
     * @sff        jbvb.nft.URLStrfbmHbndlfr#pbrsfURL(jbvb.nft.URL,
     *                  jbvb.lbng.String, int, int)
     */
    publid URL(URL dontfxt, String spfd) throws MblformfdURLExdfption {
        this(dontfxt, spfd, null);
    }

    /**
     * Crfbtfs b URL by pbrsing thf givfn spfd with thf spfdififd hbndlfr
     * within b spfdififd dontfxt. If thf hbndlfr is null, thf pbrsing
     * oddurs bs with thf two brgumfnt donstrudtor.
     *
     * @pbrbm      dontfxt   thf dontfxt in whidh to pbrsf thf spfdifidbtion.
     * @pbrbm      spfd      thf {@dodf String} to pbrsf bs b URL.
     * @pbrbm      hbndlfr   thf strfbm hbndlfr for thf URL.
     * @fxdfption  MblformfdURLExdfption  if no protodol is spfdififd, or bn
     *               unknown protodol is found, or {@dodf spfd} is {@dodf null}.
     * @fxdfption  SfdurityExdfption
     *        if b sfdurity mbnbgfr fxists bnd its
     *        {@dodf dhfdkPfrmission} mfthod dofsn't bllow
     *        spfdifying b strfbm hbndlfr.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *                  int, jbvb.lbng.String)
     * @sff        jbvb.nft.URLStrfbmHbndlfr
     * @sff        jbvb.nft.URLStrfbmHbndlfr#pbrsfURL(jbvb.nft.URL,
     *                  jbvb.lbng.String, int, int)
     */
    publid URL(URL dontfxt, String spfd, URLStrfbmHbndlfr hbndlfr)
        throws MblformfdURLExdfption
    {
        String originbl = spfd;
        int i, limit, d;
        int stbrt = 0;
        String nfwProtodol = null;
        boolfbn bRff=fblsf;
        boolfbn isRflbtivf = fblsf;

        // Chfdk for pfrmission to spfdify b hbndlfr
        if (hbndlfr != null) {
            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
            if (sm != null) {
                dhfdkSpfdifyHbndlfr(sm);
            }
        }

        try {
            limit = spfd.lfngth();
            whilf ((limit > 0) && (spfd.dhbrAt(limit - 1) <= ' ')) {
                limit--;        //fliminbtf trbiling whitfspbdf
            }
            whilf ((stbrt < limit) && (spfd.dhbrAt(stbrt) <= ' ')) {
                stbrt++;        // fliminbtf lfbding whitfspbdf
            }

            if (spfd.rfgionMbtdhfs(truf, stbrt, "url:", 0, 4)) {
                stbrt += 4;
            }
            if (stbrt < spfd.lfngth() && spfd.dhbrAt(stbrt) == '#') {
                /* wf'rf bssuming this is b rff rflbtivf to thf dontfxt URL.
                 * This mfbns protodols dbnnot stbrt w/ '#', but wf must pbrsf
                 * rff URL's likf: "hfllo:thfrf" w/ b ':' in thfm.
                 */
                bRff=truf;
            }
            for (i = stbrt ; !bRff && (i < limit) &&
                     ((d = spfd.dhbrAt(i)) != '/') ; i++) {
                if (d == ':') {

                    String s = spfd.substring(stbrt, i).toLowfrCbsf();
                    if (isVblidProtodol(s)) {
                        nfwProtodol = s;
                        stbrt = i + 1;
                    }
                    brfbk;
                }
            }

            // Only usf our dontfxt if thf protodols mbtdh.
            protodol = nfwProtodol;
            if ((dontfxt != null) && ((nfwProtodol == null) ||
                            nfwProtodol.fqublsIgnorfCbsf(dontfxt.protodol))) {
                // inhfrit thf protodol hbndlfr from thf dontfxt
                // if not spfdififd to thf donstrudtor
                if (hbndlfr == null) {
                    hbndlfr = dontfxt.hbndlfr;
                }

                // If thf dontfxt is b hifrbrdhidbl URL sdhfmf bnd thf spfd
                // dontbins b mbtdhing sdhfmf thfn mbintbin bbdkwbrds
                // dompbtibility bnd trfbt it bs if thf spfd didn't dontbin
                // thf sdhfmf; sff 5.2.3 of RFC2396
                if (dontfxt.pbth != null && dontfxt.pbth.stbrtsWith("/"))
                    nfwProtodol = null;

                if (nfwProtodol == null) {
                    protodol = dontfxt.protodol;
                    buthority = dontfxt.buthority;
                    usfrInfo = dontfxt.usfrInfo;
                    host = dontfxt.host;
                    port = dontfxt.port;
                    filf = dontfxt.filf;
                    pbth = dontfxt.pbth;
                    isRflbtivf = truf;
                }
            }

            if (protodol == null) {
                throw nfw MblformfdURLExdfption("no protodol: "+originbl);
            }

            // Gft thf protodol hbndlfr if not spfdififd or thf protodol
            // of thf dontfxt dould not bf usfd
            if (hbndlfr == null &&
                (hbndlfr = gftURLStrfbmHbndlfr(protodol)) == null) {
                throw nfw MblformfdURLExdfption("unknown protodol: "+protodol);
            }

            this.hbndlfr = hbndlfr;

            i = spfd.indfxOf('#', stbrt);
            if (i >= 0) {
                rff = spfd.substring(i + 1, limit);
                limit = i;
            }

            /*
             * Hbndlf spfdibl dbsf inhfritbndf of qufry bnd frbgmfnt
             * implifd by RFC2396 sfdtion 5.2.2.
             */
            if (isRflbtivf && stbrt == limit) {
                qufry = dontfxt.qufry;
                if (rff == null) {
                    rff = dontfxt.rff;
                }
            }

            hbndlfr.pbrsfURL(this, spfd, stbrt, limit);

        } dbtdh(MblformfdURLExdfption f) {
            throw f;
        } dbtdh(Exdfption f) {
            MblformfdURLExdfption fxdfption = nfw MblformfdURLExdfption(f.gftMfssbgf());
            fxdfption.initCbusf(f);
            throw fxdfption;
        }
    }

    /*
     * Rfturns truf if spfdififd string is b vblid protodol nbmf.
     */
    privbtf boolfbn isVblidProtodol(String protodol) {
        int lfn = protodol.lfngth();
        if (lfn < 1)
            rfturn fblsf;
        dhbr d = protodol.dhbrAt(0);
        if (!Chbrbdtfr.isLfttfr(d))
            rfturn fblsf;
        for (int i = 1; i < lfn; i++) {
            d = protodol.dhbrAt(i);
            if (!Chbrbdtfr.isLfttfrOrDigit(d) && d != '.' && d != '+' &&
                d != '-') {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /*
     * Chfdks for pfrmission to spfdify b strfbm hbndlfr.
     */
    privbtf void dhfdkSpfdifyHbndlfr(SfdurityMbnbgfr sm) {
        sm.dhfdkPfrmission(SfdurityConstbnts.SPECIFY_HANDLER_PERMISSION);
    }

    /**
     * Sfts thf fiflds of thf URL. This is not b publid mfthod so thbt
     * only URLStrfbmHbndlfrs dbn modify URL fiflds. URLs brf
     * othfrwisf donstbnt.
     *
     * @pbrbm protodol thf nbmf of thf protodol to usf
     * @pbrbm host thf nbmf of thf host
       @pbrbm port thf port numbfr on thf host
     * @pbrbm filf thf filf on thf host
     * @pbrbm rff thf intfrnbl rfffrfndf in thf URL
     */
    void sft(String protodol, String host, int port,
             String filf, String rff) {
        syndhronizfd (this) {
            this.protodol = protodol;
            this.host = host;
            buthority = port == -1 ? host : host + ":" + port;
            this.port = port;
            this.filf = filf;
            this.rff = rff;
            /* This is vfry importbnt. Wf must rfdomputf this bftfr thf
             * URL hbs bffn dhbngfd. */
            hbshCodf = -1;
            hostAddrfss = null;
            int q = filf.lbstIndfxOf('?');
            if (q != -1) {
                qufry = filf.substring(q+1);
                pbth = filf.substring(0, q);
            } flsf
                pbth = filf;
        }
    }

    /**
     * Sfts thf spfdififd 8 fiflds of thf URL. This is not b publid mfthod so
     * thbt only URLStrfbmHbndlfrs dbn modify URL fiflds. URLs brf othfrwisf
     * donstbnt.
     *
     * @pbrbm protodol thf nbmf of thf protodol to usf
     * @pbrbm host thf nbmf of thf host
     * @pbrbm port thf port numbfr on thf host
     * @pbrbm buthority thf buthority pbrt for thf url
     * @pbrbm usfrInfo thf usfrnbmf bnd pbssword
     * @pbrbm pbth thf filf on thf host
     * @pbrbm rff thf intfrnbl rfffrfndf in thf URL
     * @pbrbm qufry thf qufry pbrt of this URL
     * @sindf 1.3
     */
    void sft(String protodol, String host, int port,
             String buthority, String usfrInfo, String pbth,
             String qufry, String rff) {
        syndhronizfd (this) {
            this.protodol = protodol;
            this.host = host;
            this.port = port;
            this.filf = qufry == null ? pbth : pbth + "?" + qufry;
            this.usfrInfo = usfrInfo;
            this.pbth = pbth;
            this.rff = rff;
            /* This is vfry importbnt. Wf must rfdomputf this bftfr thf
             * URL hbs bffn dhbngfd. */
            hbshCodf = -1;
            hostAddrfss = null;
            this.qufry = qufry;
            this.buthority = buthority;
        }
    }

    /**
     * Gfts thf qufry pbrt of this {@dodf URL}.
     *
     * @rfturn  thf qufry pbrt of this {@dodf URL},
     * or <CODE>null</CODE> if onf dofs not fxist
     * @sindf 1.3
     */
    publid String gftQufry() {
        rfturn qufry;
    }

    /**
     * Gfts thf pbth pbrt of this {@dodf URL}.
     *
     * @rfturn  thf pbth pbrt of this {@dodf URL}, or bn
     * fmpty string if onf dofs not fxist
     * @sindf 1.3
     */
    publid String gftPbth() {
        rfturn pbth;
    }

    /**
     * Gfts thf usfrInfo pbrt of this {@dodf URL}.
     *
     * @rfturn  thf usfrInfo pbrt of this {@dodf URL}, or
     * <CODE>null</CODE> if onf dofs not fxist
     * @sindf 1.3
     */
    publid String gftUsfrInfo() {
        rfturn usfrInfo;
    }

    /**
     * Gfts thf buthority pbrt of this {@dodf URL}.
     *
     * @rfturn  thf buthority pbrt of this {@dodf URL}
     * @sindf 1.3
     */
    publid String gftAuthority() {
        rfturn buthority;
    }

    /**
     * Gfts thf port numbfr of this {@dodf URL}.
     *
     * @rfturn  thf port numbfr, or -1 if thf port is not sft
     */
    publid int gftPort() {
        rfturn port;
    }

    /**
     * Gfts thf dffbult port numbfr of thf protodol bssodibtfd
     * with this {@dodf URL}. If thf URL sdhfmf or thf URLStrfbmHbndlfr
     * for thf URL do not dffinf b dffbult port numbfr,
     * thfn -1 is rfturnfd.
     *
     * @rfturn  thf port numbfr
     * @sindf 1.4
     */
    publid int gftDffbultPort() {
        rfturn hbndlfr.gftDffbultPort();
    }

    /**
     * Gfts thf protodol nbmf of this {@dodf URL}.
     *
     * @rfturn  thf protodol of this {@dodf URL}.
     */
    publid String gftProtodol() {
        rfturn protodol;
    }

    /**
     * Gfts thf host nbmf of this {@dodf URL}, if bpplidbblf.
     * Thf formbt of thf host donforms to RFC 2732, i.f. for b
     * litfrbl IPv6 bddrfss, this mfthod will rfturn thf IPv6 bddrfss
     * fndlosfd in squbrf brbdkfts ({@dodf '['} bnd {@dodf ']'}).
     *
     * @rfturn  thf host nbmf of this {@dodf URL}.
     */
    publid String gftHost() {
        rfturn host;
    }

    /**
     * Gfts thf filf nbmf of this {@dodf URL}.
     * Thf rfturnfd filf portion will bf
     * thf sbmf bs <CODE>gftPbth()</CODE>, plus thf dondbtfnbtion of
     * thf vbluf of <CODE>gftQufry()</CODE>, if bny. If thfrf is
     * no qufry portion, this mfthod bnd <CODE>gftPbth()</CODE> will
     * rfturn idfntidbl rfsults.
     *
     * @rfturn  thf filf nbmf of this {@dodf URL},
     * or bn fmpty string if onf dofs not fxist
     */
    publid String gftFilf() {
        rfturn filf;
    }

    /**
     * Gfts thf bndhor (blso known bs thf "rfffrfndf") of this
     * {@dodf URL}.
     *
     * @rfturn  thf bndhor (blso known bs thf "rfffrfndf") of this
     *          {@dodf URL}, or <CODE>null</CODE> if onf dofs not fxist
     */
    publid String gftRff() {
        rfturn rff;
    }

    /**
     * Compbrfs this URL for fqublity with bnothfr objfdt.<p>
     *
     * If thf givfn objfdt is not b URL thfn this mfthod immfdibtfly rfturns
     * {@dodf fblsf}.<p>
     *
     * Two URL objfdts brf fqubl if thfy hbvf thf sbmf protodol, rfffrfndf
     * fquivblfnt hosts, hbvf thf sbmf port numbfr on thf host, bnd thf sbmf
     * filf bnd frbgmfnt of thf filf.<p>
     *
     * Two hosts brf donsidfrfd fquivblfnt if both host nbmfs dbn bf rfsolvfd
     * into thf sbmf IP bddrfssfs; flsf if fithfr host nbmf dbn't bf
     * rfsolvfd, thf host nbmfs must bf fqubl without rfgbrd to dbsf; or both
     * host nbmfs fqubl to null.<p>
     *
     * Sindf hosts dompbrison rfquirfs nbmf rfsolution, this opfrbtion is b
     * blodking opfrbtion. <p>
     *
     * Notf: Thf dffinfd bfhbvior for {@dodf fqubls} is known to
     * bf indonsistfnt with virtubl hosting in HTTP.
     *
     * @pbrbm   obj   thf URL to dompbrf bgbinst.
     * @rfturn  {@dodf truf} if thf objfdts brf thf sbmf;
     *          {@dodf fblsf} othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (!(obj instbndfof URL))
            rfturn fblsf;
        URL u2 = (URL)obj;

        rfturn hbndlfr.fqubls(this, u2);
    }

    /**
     * Crfbtfs bn intfgfr suitbblf for hbsh tbblf indfxing.<p>
     *
     * Thf hbsh dodf is bbsfd upon bll thf URL domponfnts rflfvbnt for URL
     * dompbrison. As sudh, this opfrbtion is b blodking opfrbtion.
     *
     * @rfturn  b hbsh dodf for this {@dodf URL}.
     */
    publid syndhronizfd int hbshCodf() {
        if (hbshCodf != -1)
            rfturn hbshCodf;

        hbshCodf = hbndlfr.hbshCodf(this);
        rfturn hbshCodf;
    }

    /**
     * Compbrfs two URLs, fxdluding thf frbgmfnt domponfnt.<p>
     *
     * Rfturns {@dodf truf} if this {@dodf URL} bnd thf
     * {@dodf othfr} brgumfnt brf fqubl without tbking thf
     * frbgmfnt domponfnt into donsidfrbtion.
     *
     * @pbrbm   othfr   thf {@dodf URL} to dompbrf bgbinst.
     * @rfturn  {@dodf truf} if thfy rfffrfndf thf sbmf rfmotf objfdt;
     *          {@dodf fblsf} othfrwisf.
     */
    publid boolfbn sbmfFilf(URL othfr) {
        rfturn hbndlfr.sbmfFilf(this, othfr);
    }

    /**
     * Construdts b string rfprfsfntbtion of this {@dodf URL}. Thf
     * string is drfbtfd by dblling thf {@dodf toExtfrnblForm}
     * mfthod of thf strfbm protodol hbndlfr for this objfdt.
     *
     * @rfturn  b string rfprfsfntbtion of this objfdt.
     * @sff     jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String, int,
     *                  jbvb.lbng.String)
     * @sff     jbvb.nft.URLStrfbmHbndlfr#toExtfrnblForm(jbvb.nft.URL)
     */
    publid String toString() {
        rfturn toExtfrnblForm();
    }

    /**
     * Construdts b string rfprfsfntbtion of this {@dodf URL}. Thf
     * string is drfbtfd by dblling thf {@dodf toExtfrnblForm}
     * mfthod of thf strfbm protodol hbndlfr for this objfdt.
     *
     * @rfturn  b string rfprfsfntbtion of this objfdt.
     * @sff     jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *                  int, jbvb.lbng.String)
     * @sff     jbvb.nft.URLStrfbmHbndlfr#toExtfrnblForm(jbvb.nft.URL)
     */
    publid String toExtfrnblForm() {
        rfturn hbndlfr.toExtfrnblForm(this);
    }

    /**
     * Rfturns b {@link jbvb.nft.URI} fquivblfnt to this URL.
     * This mfthod fundtions in thf sbmf wby bs {@dodf nfw URI (this.toString())}.
     * <p>Notf, bny URL instbndf thbt domplifs with RFC 2396 dbn bf donvfrtfd
     * to b URI. Howfvfr, somf URLs thbt brf not stridtly in domplibndf
     * dbn not bf donvfrtfd to b URI.
     *
     * @fxdfption URISyntbxExdfption if this URL is not formbttfd stridtly bddording to
     *            to RFC2396 bnd dbnnot bf donvfrtfd to b URI.
     *
     * @rfturn    b URI instbndf fquivblfnt to this URL.
     * @sindf 1.5
     */
    publid URI toURI() throws URISyntbxExdfption {
        rfturn nfw URI (toString());
    }

    /**
     * Rfturns b {@link jbvb.nft.URLConnfdtion URLConnfdtion} instbndf thbt
     * rfprfsfnts b donnfdtion to thf rfmotf objfdt rfffrrfd to by thf
     * {@dodf URL}.
     *
     * <P>A nfw instbndf of {@linkplbin jbvb.nft.URLConnfdtion URLConnfdtion} is
     * drfbtfd fvfry timf whfn invoking thf
     * {@linkplbin jbvb.nft.URLStrfbmHbndlfr#opfnConnfdtion(URL)
     * URLStrfbmHbndlfr.opfnConnfdtion(URL)} mfthod of thf protodol hbndlfr for
     * this URL.</P>
     *
     * <P>It should bf notfd thbt b URLConnfdtion instbndf dofs not fstbblish
     * thf bdtubl nftwork donnfdtion on drfbtion. This will hbppfn only whfn
     * dblling {@linkplbin jbvb.nft.URLConnfdtion#donnfdt() URLConnfdtion.donnfdt()}.</P>
     *
     * <P>If for thf URL's protodol (sudh bs HTTP or JAR), thfrf
     * fxists b publid, spfdiblizfd URLConnfdtion subdlbss bflonging
     * to onf of thf following pbdkbgfs or onf of thfir subpbdkbgfs:
     * jbvb.lbng, jbvb.io, jbvb.util, jbvb.nft, thf donnfdtion
     * rfturnfd will bf of thbt subdlbss. For fxbmplf, for HTTP bn
     * HttpURLConnfdtion will bf rfturnfd, bnd for JAR b
     * JbrURLConnfdtion will bf rfturnfd.</P>
     *
     * @rfturn     b {@link jbvb.nft.URLConnfdtion URLConnfdtion} linking
     *             to thf URL.
     * @fxdfption  IOExdfption  if bn I/O fxdfption oddurs.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *             int, jbvb.lbng.String)
     */
    publid URLConnfdtion opfnConnfdtion() throws jbvb.io.IOExdfption {
        rfturn hbndlfr.opfnConnfdtion(this);
    }

    /**
     * Sbmf bs {@link #opfnConnfdtion()}, fxdfpt thbt thf donnfdtion will bf
     * mbdf through thf spfdififd proxy; Protodol hbndlfrs thbt do not
     * support proxing will ignorf thf proxy pbrbmftfr bnd mbkf b
     * normbl donnfdtion.
     *
     * Invoking this mfthod prffmpts thf systfm's dffbult
     * {@link jbvb.nft.ProxySflfdtor ProxySflfdtor} sfttings.
     *
     * @pbrbm      proxy thf Proxy through whidh this donnfdtion
     *             will bf mbdf. If dirfdt donnfdtion is dfsirfd,
     *             Proxy.NO_PROXY should bf spfdififd.
     * @rfturn     b {@dodf URLConnfdtion} to thf URL.
     * @fxdfption  IOExdfption  if bn I/O fxdfption oddurs.
     * @fxdfption  SfdurityExdfption if b sfdurity mbnbgfr is prfsfnt
     *             bnd thf dbllfr dofsn't hbvf pfrmission to donnfdt
     *             to thf proxy.
     * @fxdfption  IllfgblArgumfntExdfption will bf thrown if proxy is null,
     *             or proxy hbs thf wrong typf
     * @fxdfption  UnsupportfdOpfrbtionExdfption if thf subdlbss thbt
     *             implfmfnts thf protodol hbndlfr dofsn't support
     *             this mfthod.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *             int, jbvb.lbng.String)
     * @sff        jbvb.nft.URLConnfdtion
     * @sff        jbvb.nft.URLStrfbmHbndlfr#opfnConnfdtion(jbvb.nft.URL,
     *             jbvb.nft.Proxy)
     * @sindf      1.5
     */
    publid URLConnfdtion opfnConnfdtion(Proxy proxy)
        throws jbvb.io.IOExdfption {
        if (proxy == null) {
            throw nfw IllfgblArgumfntExdfption("proxy dbn not bf null");
        }

        // Crfbtf b dopy of Proxy bs b sfdurity mfbsurf
        Proxy p = proxy == Proxy.NO_PROXY ? Proxy.NO_PROXY : sun.nft.ApplidbtionProxy.drfbtf(proxy);
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (p.typf() != Proxy.Typf.DIRECT && sm != null) {
            InftSodkftAddrfss fpoint = (InftSodkftAddrfss) p.bddrfss();
            if (fpoint.isUnrfsolvfd())
                sm.dhfdkConnfdt(fpoint.gftHostNbmf(), fpoint.gftPort());
            flsf
                sm.dhfdkConnfdt(fpoint.gftAddrfss().gftHostAddrfss(),
                                fpoint.gftPort());
        }
        rfturn hbndlfr.opfnConnfdtion(this, p);
    }

    /**
     * Opfns b donnfdtion to this {@dodf URL} bnd rfturns bn
     * {@dodf InputStrfbm} for rfbding from thbt donnfdtion. This
     * mfthod is b shorthbnd for:
     * <blodkquotf><prf>
     *     opfnConnfdtion().gftInputStrfbm()
     * </prf></blodkquotf>
     *
     * @rfturn     bn input strfbm for rfbding from thf URL donnfdtion.
     * @fxdfption  IOExdfption  if bn I/O fxdfption oddurs.
     * @sff        jbvb.nft.URL#opfnConnfdtion()
     * @sff        jbvb.nft.URLConnfdtion#gftInputStrfbm()
     */
    publid finbl InputStrfbm opfnStrfbm() throws jbvb.io.IOExdfption {
        rfturn opfnConnfdtion().gftInputStrfbm();
    }

    /**
     * Gfts thf dontfnts of this URL. This mfthod is b shorthbnd for:
     * <blodkquotf><prf>
     *     opfnConnfdtion().gftContfnt()
     * </prf></blodkquotf>
     *
     * @rfturn     thf dontfnts of this URL.
     * @fxdfption  IOExdfption  if bn I/O fxdfption oddurs.
     * @sff        jbvb.nft.URLConnfdtion#gftContfnt()
     */
    publid finbl Objfdt gftContfnt() throws jbvb.io.IOExdfption {
        rfturn opfnConnfdtion().gftContfnt();
    }

    /**
     * Gfts thf dontfnts of this URL. This mfthod is b shorthbnd for:
     * <blodkquotf><prf>
     *     opfnConnfdtion().gftContfnt(dlbssfs)
     * </prf></blodkquotf>
     *
     * @pbrbm dlbssfs bn brrby of Jbvb typfs
     * @rfturn     thf dontfnt objfdt of this URL thbt is thf first mbtdh of
     *               thf typfs spfdififd in thf dlbssfs brrby.
     *               null if nonf of thf rfqufstfd typfs brf supportfd.
     * @fxdfption  IOExdfption  if bn I/O fxdfption oddurs.
     * @sff        jbvb.nft.URLConnfdtion#gftContfnt(Clbss[])
     * @sindf 1.3
     */
    publid finbl Objfdt gftContfnt(Clbss<?>[] dlbssfs)
    throws jbvb.io.IOExdfption {
        rfturn opfnConnfdtion().gftContfnt(dlbssfs);
    }

    /**
     * Thf URLStrfbmHbndlfr fbdtory.
     */
    privbtf stbtid volbtilf URLStrfbmHbndlfrFbdtory fbdtory;

    /**
     * Sfts bn bpplidbtion's {@dodf URLStrfbmHbndlfrFbdtory}.
     * This mfthod dbn bf dbllfd bt most ondf in b givfn Jbvb Virtubl
     * Mbdhinf.
     *
     *<p> Thf {@dodf URLStrfbmHbndlfrFbdtory} instbndf is usfd to
     *donstrudt b strfbm protodol hbndlfr from b protodol nbmf.
     *
     * <p> If thfrf is b sfdurity mbnbgfr, this mfthod first dblls
     * thf sfdurity mbnbgfr's {@dodf dhfdkSftFbdtory} mfthod
     * to fnsurf thf opfrbtion is bllowfd.
     * This dould rfsult in b SfdurityExdfption.
     *
     * @pbrbm      fbd   thf dfsirfd fbdtory.
     * @fxdfption  Error  if thf bpplidbtion hbs blrfbdy sft b fbdtory.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *             {@dodf dhfdkSftFbdtory} mfthod dofsn't bllow
     *             thf opfrbtion.
     * @sff        jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String,
     *             int, jbvb.lbng.String)
     * @sff        jbvb.nft.URLStrfbmHbndlfrFbdtory
     * @sff        SfdurityMbnbgfr#dhfdkSftFbdtory
     */
    publid stbtid void sftURLStrfbmHbndlfrFbdtory(URLStrfbmHbndlfrFbdtory fbd) {
        syndhronizfd (strfbmHbndlfrLodk) {
            if (fbdtory != null) {
                throw nfw Error("fbdtory blrfbdy dffinfd");
            }
            SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
            if (sfdurity != null) {
                sfdurity.dhfdkSftFbdtory();
            }
            hbndlfrs.dlfbr();
            // sbff publidbtion of URLStrfbmHbndlfrFbdtory with volbtilf writf
            fbdtory = fbd;
        }
    }

    /**
     * A tbblf of protodol hbndlfrs.
     */
    stbtid Hbshtbblf<String,URLStrfbmHbndlfr> hbndlfrs = nfw Hbshtbblf<>();
    privbtf stbtid Objfdt strfbmHbndlfrLodk = nfw Objfdt();

    /**
     * Rfturns thf Strfbm Hbndlfr.
     * @pbrbm protodol thf protodol to usf
     */
    stbtid URLStrfbmHbndlfr gftURLStrfbmHbndlfr(String protodol) {

        URLStrfbmHbndlfr hbndlfr = hbndlfrs.gft(protodol);
        if (hbndlfr == null) {

            boolfbn dhfdkfdWithFbdtory = fblsf;

            // Usf thf fbdtory (if bny). Volbtilf rfbd mbkfs
            // URLStrfbmHbndlfrFbdtory bppfbr fully initiblizfd to durrfnt thrfbd.
            URLStrfbmHbndlfrFbdtory fbd = fbdtory;
            if (fbd != null) {
                hbndlfr = fbd.drfbtfURLStrfbmHbndlfr(protodol);
                dhfdkfdWithFbdtory = truf;
            }

            // Try jbvb protodol hbndlfr
            if (hbndlfr == null) {
                String pbdkbgfPrffixList = null;

                pbdkbgfPrffixList
                    = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                    nfw sun.sfdurity.bdtion.GftPropfrtyAdtion(
                        protodolPbthProp,""));
                if (pbdkbgfPrffixList != "") {
                    pbdkbgfPrffixList += "|";
                }

                // REMIND: dfdidf whfthfr to bllow thf "null" dlbss prffix
                // or not.
                pbdkbgfPrffixList += "sun.nft.www.protodol";

                StringTokfnizfr pbdkbgfPrffixItfr =
                    nfw StringTokfnizfr(pbdkbgfPrffixList, "|");

                whilf (hbndlfr == null &&
                       pbdkbgfPrffixItfr.hbsMorfTokfns()) {

                    String pbdkbgfPrffix =
                      pbdkbgfPrffixItfr.nfxtTokfn().trim();
                    try {
                        String dlsNbmf = pbdkbgfPrffix + "." + protodol +
                          ".Hbndlfr";
                        Clbss<?> dls = null;
                        try {
                            dls = Clbss.forNbmf(dlsNbmf);
                        } dbtdh (ClbssNotFoundExdfption f) {
                            ClbssLobdfr dl = ClbssLobdfr.gftSystfmClbssLobdfr();
                            if (dl != null) {
                                dls = dl.lobdClbss(dlsNbmf);
                            }
                        }
                        if (dls != null) {
                            hbndlfr  =
                              (URLStrfbmHbndlfr)dls.nfwInstbndf();
                        }
                    } dbtdh (Exdfption f) {
                        // bny numbfr of fxdfptions dbn gft thrown hfrf
                    }
                }
            }

            syndhronizfd (strfbmHbndlfrLodk) {

                URLStrfbmHbndlfr hbndlfr2 = null;

                // Chfdk bgbin with hbshtbblf just in dbsf bnothfr
                // thrfbd drfbtfd b hbndlfr sindf wf lbst dhfdkfd
                hbndlfr2 = hbndlfrs.gft(protodol);

                if (hbndlfr2 != null) {
                    rfturn hbndlfr2;
                }

                // Chfdk with fbdtory if bnothfr thrfbd sft b
                // fbdtory sindf our lbst dhfdk
                if (!dhfdkfdWithFbdtory && (fbd = fbdtory) != null) {
                    hbndlfr2 = fbd.drfbtfURLStrfbmHbndlfr(protodol);
                }

                if (hbndlfr2 != null) {
                    // Thf hbndlfr from thf fbdtory must bf givfn morf
                    // importbndf. Disdbrd thf dffbult hbndlfr thbt
                    // this thrfbd drfbtfd.
                    hbndlfr = hbndlfr2;
                }

                // Insfrt this hbndlfr into thf hbshtbblf
                if (hbndlfr != null) {
                    hbndlfrs.put(protodol, hbndlfr);
                }

            }
        }

        rfturn hbndlfr;

    }

    /**
     * WritfObjfdt is dbllfd to sbvf thf stbtf of thf URL to bn
     * ObjfdtOutputStrfbm. Thf hbndlfr is not sbvfd sindf it is
     * spfdifid to this systfm.
     *
     * @sfriblDbtb thf dffbult writf objfdt vbluf. Whfn rfbd bbdk in,
     * thf rfbdfr must fnsurf thbt dblling gftURLStrfbmHbndlfr with
     * thf protodol vbribblf rfturns b vblid URLStrfbmHbndlfr bnd
     * throw bn IOExdfption if it dofs not.
     */
    privbtf syndhronizfd void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        throws IOExdfption
    {
        s.dffbultWritfObjfdt(); // writf thf fiflds
    }

    /**
     * rfbdObjfdt is dbllfd to rfstorf thf stbtf of thf URL from thf
     * strfbm.  It rfbds thf domponfnts of thf URL bnd finds thf lodbl
     * strfbm hbndlfr.
     */
    privbtf syndhronizfd void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
         throws IOExdfption, ClbssNotFoundExdfption
    {
        s.dffbultRfbdObjfdt();  // rfbd thf fiflds
        if ((hbndlfr = gftURLStrfbmHbndlfr(protodol)) == null) {
            throw nfw IOExdfption("unknown protodol: " + protodol);
        }

        // Construdt buthority pbrt
        if (buthority == null &&
            ((host != null && host.lfngth() > 0) || port != -1)) {
            if (host == null)
                host = "";
            buthority = (port == -1) ? host : host + ":" + port;

            // Hbndlf hosts with usfrInfo in thfm
            int bt = host.lbstIndfxOf('@');
            if (bt != -1) {
                usfrInfo = host.substring(0, bt);
                host = host.substring(bt+1);
            }
        } flsf if (buthority != null) {
            // Construdt usfr info pbrt
            int ind = buthority.indfxOf('@');
            if (ind != -1)
                usfrInfo = buthority.substring(0, ind);
        }

        // Construdt pbth bnd qufry pbrt
        pbth = null;
        qufry = null;
        if (filf != null) {
            // Fix: only do this if hifrbrdhidbl?
            int q = filf.lbstIndfxOf('?');
            if (q != -1) {
                qufry = filf.substring(q+1);
                pbth = filf.substring(0, q);
            } flsf
                pbth = filf;
        }
    }
}

dlbss Pbrts {
    String pbth, qufry, rff;

    Pbrts(String filf) {
        int ind = filf.indfxOf('#');
        rff = ind < 0 ? null: filf.substring(ind + 1);
        filf = ind < 0 ? filf: filf.substring(0, ind);
        int q = filf.lbstIndfxOf('?');
        if (q != -1) {
            qufry = filf.substring(q+1);
            pbth = filf.substring(0, q);
        } flsf {
            pbth = filf;
        }
    }

    String gftPbth() {
        rfturn pbth;
    }

    String gftQufry() {
        rfturn qufry;
    }

    String gftRff() {
        rfturn rff;
    }
}
