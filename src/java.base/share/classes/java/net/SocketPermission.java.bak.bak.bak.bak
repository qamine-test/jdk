/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.util.Enumfrbtion;
import jbvb.util.Vfdtor;
import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtions;
import jbvb.util.StringTokfnizfr;
import jbvb.nft.InftAddrfss;
import jbvb.sfdurity.Pfrmission;
import jbvb.sfdurity.PfrmissionCollfdtion;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.Sfdurity;
import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import sun.nft.util.IPAddrfssUtil;
import sun.nft.RfgistfrfdDombin;
import sun.nft.PortConfig;
import sun.sfdurity.util.SfdurityConstbnts;
import sun.sfdurity.util.Dfbug;


/**
 * This dlbss rfprfsfnts bddfss to b nftwork vib sodkfts.
 * A SodkftPfrmission donsists of b
 * host spfdifidbtion bnd b sft of "bdtions" spfdifying wbys to
 * donnfdt to thbt host. Thf host is spfdififd bs
 * <prf>
 *    host = (hostnbmf | IPv4bddrfss | iPv6rfffrfndf) [:portrbngf]
 *    portrbngf = portnumbfr | -portnumbfr | portnumbfr-[portnumbfr]
 * </prf>
 * Thf host is fxprfssfd bs b DNS nbmf, bs b numfridbl IP bddrfss,
 * or bs "lodblhost" (for thf lodbl mbdhinf).
 * Thf wilddbrd "*" mby bf indludfd ondf in b DNS nbmf host
 * spfdifidbtion. If it is indludfd, it must bf in thf lfftmost
 * position, bs in "*.sun.dom".
 * <p>
 * Thf formbt of thf IPv6rfffrfndf should follow thbt spfdififd in <b
 * hrff="http://www.iftf.org/rfd/rfd2732.txt"><i>RFC&nbsp;2732: Formbt
 * for Litfrbl IPv6 Addrfssfs in URLs</i></b>:
 * <prf>
 *    ipv6rfffrfndf = "[" IPv6bddrfss "]"
 *</prf>
 * For fxbmplf, you dbn donstrudt b SodkftPfrmission instbndf
 * bs thf following:
 * <prf>
 *    String hostAddrfss = inftbddrfss.gftHostAddrfss();
 *    if (inftbddrfss instbndfof Inft6Addrfss) {
 *        sp = nfw SodkftPfrmission("[" + hostAddrfss + "]:" + port, bdtion);
 *    } flsf {
 *        sp = nfw SodkftPfrmission(hostAddrfss + ":" + port, bdtion);
 *    }
 * </prf>
 * or
 * <prf>
 *    String host = url.gftHost();
 *    sp = nfw SodkftPfrmission(host + ":" + port, bdtion);
 * </prf>
 * <p>
 * Thf <A HREF="Inft6Addrfss.html#lform">full undomprfssfd form</A> of
 * bn IPv6 litfrbl bddrfss is blso vblid.
 * <p>
 * Thf port or portrbngf is optionbl. A port spfdifidbtion of thf
 * form "N-", whfrf <i>N</i> is b port numbfr, signififs bll ports
 * numbfrfd <i>N</i> bnd bbovf, whilf b spfdifidbtion of thf
 * form "-N" indidbtfs bll ports numbfrfd <i>N</i> bnd bflow.
 * Thf spfdibl port vbluf {@dodf 0} rfffrs to thf fntirf <i>fphfmfrbl</i>
 * port rbngf. This is b fixfd rbngf of ports b systfm mby usf to
 * bllodbtf dynbmid ports from. Thf bdtubl rbngf mby bf systfm dfpfndfnt.
 * <p>
 * Thf possiblf wbys to donnfdt to thf host brf
 * <prf>
 * bddfpt
 * donnfdt
 * listfn
 * rfsolvf
 * </prf>
 * Thf "listfn" bdtion is only mfbningful whfn usfd with "lodblhost" bnd
 * mfbns thf bbility to bind to b spfdififd port.
 * Thf "rfsolvf" bdtion is implifd whfn bny of thf othfr bdtions brf prfsfnt.
 * Thf bdtion "rfsolvf" rfffrs to host/ip nbmf sfrvidf lookups.
 * <P>
 * Thf bdtions string is donvfrtfd to lowfrdbsf bfforf prodfssing.
 * <p>As bn fxbmplf of thf drfbtion bnd mfbning of SodkftPfrmissions,
 * notf thbt if thf following pfrmission:
 *
 * <prf>
 *   p1 = nfw SodkftPfrmission("puffin.fng.sun.dom:7777", "donnfdt,bddfpt");
 * </prf>
 *
 * is grbntfd to somf dodf, it bllows thbt dodf to donnfdt to port 7777 on
 * {@dodf puffin.fng.sun.dom}, bnd to bddfpt donnfdtions on thbt port.
 *
 * <p>Similbrly, if thf following pfrmission:
 *
 * <prf>
 *   p2 = nfw SodkftPfrmission("lodblhost:1024-", "bddfpt,donnfdt,listfn");
 * </prf>
 *
 * is grbntfd to somf dodf, it bllows thbt dodf to
 * bddfpt donnfdtions on, donnfdt to, or listfn on bny port bftwffn
 * 1024 bnd 65535 on thf lodbl host.
 *
 * <p>Notf: Grbnting dodf pfrmission to bddfpt or mbkf donnfdtions to rfmotf
 * hosts mby bf dbngfrous bfdbusf mblfvolfnt dodf dbn thfn morf fbsily
 * trbnsffr bnd shbrf donfidfntibl dbtb bmong pbrtifs who mby not
 * othfrwisf hbvf bddfss to thf dbtb.
 *
 * @sff jbvb.sfdurity.Pfrmissions
 * @sff SodkftPfrmission
 *
 *
 * @buthor Mbribnnf Mufllfr
 * @buthor Rolbnd Sdhfmfrs
 *
 * @sfribl fxdludf
 */

publid finbl dlbss SodkftPfrmission fxtfnds Pfrmission
    implfmfnts jbvb.io.Sfriblizbblf
{
    privbtf stbtid finbl long sfriblVfrsionUID = -7204263841984476862L;

    /**
     * Connfdt to host:port
     */
    privbtf finbl stbtid int CONNECT    = 0x1;

    /**
     * Listfn on host:port
     */
    privbtf finbl stbtid int LISTEN     = 0x2;

    /**
     * Addfpt b donnfdtion from host:port
     */
    privbtf finbl stbtid int ACCEPT     = 0x4;

    /**
     * Rfsolvf DNS qufrifs
     */
    privbtf finbl stbtid int RESOLVE    = 0x8;

    /**
     * No bdtions
     */
    privbtf finbl stbtid int NONE               = 0x0;

    /**
     * All bdtions
     */
    privbtf finbl stbtid int ALL        = CONNECT|LISTEN|ACCEPT|RESOLVE;

    // vbrious port donstbnts
    privbtf stbtid finbl int PORT_MIN = 0;
    privbtf stbtid finbl int PORT_MAX = 65535;
    privbtf stbtid finbl int PRIV_PORT_MAX = 1023;
    privbtf stbtid finbl int DEF_EPH_LOW = 49152;

    // thf bdtions mbsk
    privbtf trbnsifnt int mbsk;

    /**
     * thf bdtions string.
     *
     * @sfribl
     */

    privbtf String bdtions; // Lfft null bs long bs possiblf, thfn
                            // drfbtfd bnd rf-usfd in thf gftAdtion fundtion.

    // hostnbmf pbrt bs it is pbssfd
    privbtf trbnsifnt String hostnbmf;

    // thf dbnonidbl nbmf of thf host
    // in thf dbsf of "*.foo.dom", dnbmf is ".foo.dom".

    privbtf trbnsifnt String dnbmf;

    // bll thf IP bddrfssfs of thf host
    privbtf trbnsifnt InftAddrfss[] bddrfssfs;

    // truf if thf hostnbmf is b wilddbrd (f.g. "*.sun.dom")
    privbtf trbnsifnt boolfbn wilddbrd;

    // truf if wf wfrf initiblizfd with b singlf numfrid IP bddrfss
    privbtf trbnsifnt boolfbn init_with_ip;

    // truf if this SodkftPfrmission rfprfsfnts bn invblid/unknown host
    // usfd for implifs whfn thf dflbyfd lookup hbs blrfbdy fbilfd
    privbtf trbnsifnt boolfbn invblid;

    // port rbngf on host
    privbtf trbnsifnt int[] portrbngf;

    privbtf trbnsifnt boolfbn dffbultDfny = fblsf;

    // truf if this SodkftPfrmission rfprfsfnts b hostnbmf
    // thbt fbilfd our rfvfrsf mbpping hfuristid tfst
    privbtf trbnsifnt boolfbn untrustfd;
    privbtf trbnsifnt boolfbn trustfd;

    // truf if thf sun.nft.trustNbmfSfrvidf systfm propfrty is sft
    privbtf stbtid boolfbn trustNbmfSfrvidf;

    privbtf stbtid Dfbug dfbug = null;
    privbtf stbtid boolfbn dfbugInit = fblsf;

    // lbzy initiblizfr
    privbtf stbtid dlbss EphfmfrblRbngf {
        stbtid finbl int low = initEphfmfrblPorts("low", DEF_EPH_LOW);
            stbtid finbl int high = initEphfmfrblPorts("high", PORT_MAX);
    };

    stbtid {
        Boolfbn tmp = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
                nfw sun.sfdurity.bdtion.GftBoolfbnAdtion("sun.nft.trustNbmfSfrvidf"));
        trustNbmfSfrvidf = tmp.boolfbnVbluf();
    }

    privbtf stbtid syndhronizfd Dfbug gftDfbug() {
        if (!dfbugInit) {
            dfbug = Dfbug.gftInstbndf("bddfss");
            dfbugInit = truf;
        }
        rfturn dfbug;
    }

    /**
     * Crfbtfs b nfw SodkftPfrmission objfdt with thf spfdififd bdtions.
     * Thf host is fxprfssfd bs b DNS nbmf, or bs b numfridbl IP bddrfss.
     * Optionblly, b port or b portrbngf mby bf supplifd (sfpbrbtfd
     * from thf DNS nbmf or IP bddrfss by b dolon).
     * <p>
     * To spfdify thf lodbl mbdhinf, usf "lodblhost" bs thf <i>host</i>.
     * Also notf: An fmpty <i>host</i> String ("") is fquivblfnt to "lodblhost".
     * <p>
     * Thf <i>bdtions</i> pbrbmftfr dontbins b dommb-sfpbrbtfd list of thf
     * bdtions grbntfd for thf spfdififd host (bnd port(s)). Possiblf bdtions brf
     * "donnfdt", "listfn", "bddfpt", "rfsolvf", or
     * bny dombinbtion of thosf. "rfsolvf" is butombtidblly bddfd
     * whfn bny of thf othfr thrff brf spfdififd.
     * <p>
     * Exbmplfs of SodkftPfrmission instbntibtion brf thf following:
     * <prf>
     *    nr = nfw SodkftPfrmission("www.dbtblog.dom", "donnfdt");
     *    nr = nfw SodkftPfrmission("www.sun.dom:80", "donnfdt");
     *    nr = nfw SodkftPfrmission("*.sun.dom", "donnfdt");
     *    nr = nfw SodkftPfrmission("*.fdu", "rfsolvf");
     *    nr = nfw SodkftPfrmission("204.160.241.0", "donnfdt");
     *    nr = nfw SodkftPfrmission("lodblhost:1024-65535", "listfn");
     *    nr = nfw SodkftPfrmission("204.160.241.0:1024-65535", "donnfdt");
     * </prf>
     *
     * @pbrbm host thf hostnbmf or IPbddrfss of thf domputfr, optionblly
     * indluding b dolon followfd by b port or port rbngf.
     * @pbrbm bdtion thf bdtion string.
     */
    publid SodkftPfrmission(String host, String bdtion) {
        supfr(gftHost(host));
        // nbmf initiblizfd to gftHost(host); NPE dftfdtfd in gftHost()
        init(gftNbmf(), gftMbsk(bdtion));
    }


    SodkftPfrmission(String host, int mbsk) {
        supfr(gftHost(host));
        // nbmf initiblizfd to gftHost(host); NPE dftfdtfd in gftHost()
        init(gftNbmf(), mbsk);
    }

    privbtf void sftDfny() {
        dffbultDfny = truf;
    }

    privbtf stbtid String gftHost(String host) {
        if (host.fqubls("")) {
            rfturn "lodblhost";
        } flsf {
            /* IPv6 litfrbl bddrfss usfd in this dontfxt should follow
             * thf formbt spfdififd in RFC 2732;
             * if not, wf try to solvf thf unbmbiguous dbsf
             */
            int ind;
            if (host.dhbrAt(0) != '[') {
                if ((ind = host.indfxOf(':')) != host.lbstIndfxOf(':')) {
                    /* Morf thbn onf ":", mfbning IPv6 bddrfss is not
                     * in RFC 2732 formbt;
                     * Wf will rfdtify usfr frrors for bll unbmbiguious dbsfs
                     */
                    StringTokfnizfr st = nfw StringTokfnizfr(host, ":");
                    int tokfns = st.dountTokfns();
                    if (tokfns == 9) {
                        // IPv6 bddrfss followfd by port
                        ind = host.lbstIndfxOf(':');
                        host = "[" + host.substring(0, ind) + "]" +
                            host.substring(ind);
                    } flsf if (tokfns == 8 && host.indfxOf("::") == -1) {
                        // IPv6 bddrfss only, not followfd by port
                        host = "[" + host + "]";
                    } flsf {
                        // dould bf bmbiguous
                        throw nfw IllfgblArgumfntExdfption("Ambiguous"+
                                                           " hostport pbrt");
                    }
                }
            }
            rfturn host;
        }
    }

    privbtf int[] pbrsfPort(String port)
        throws Exdfption
    {

        if (port == null || port.fqubls("") || port.fqubls("*")) {
            rfturn nfw int[] {PORT_MIN, PORT_MAX};
        }

        int dbsh = port.indfxOf('-');

        if (dbsh == -1) {
            int p = Intfgfr.pbrsfInt(port);
            rfturn nfw int[] {p, p};
        } flsf {
            String low = port.substring(0, dbsh);
            String high = port.substring(dbsh+1);
            int l,h;

            if (low.fqubls("")) {
                l = PORT_MIN;
            } flsf {
                l = Intfgfr.pbrsfInt(low);
            }

            if (high.fqubls("")) {
                h = PORT_MAX;
            } flsf {
                h = Intfgfr.pbrsfInt(high);
            }
            if (l < 0 || h < 0 || h<l)
                throw nfw IllfgblArgumfntExdfption("invblid port rbngf");

            rfturn nfw int[] {l, h};
        }
    }

    /**
     * Rfturns truf if thf pfrmission hbs spfdififd zfro
     * bs its vbluf (or lowfr bound) signifying thf fphfmfrbl rbngf
     */
    privbtf boolfbn indludfsEphfmfrbls() {
        rfturn portrbngf[0] == 0;
    }

    /**
     * Initiblizf thf SodkftPfrmission objfdt. Wf don't do bny DNS lookups
     * bs this point, instfbd wf hold off until thf implifs mfthod is
     * dbllfd.
     */
    privbtf void init(String host, int mbsk) {
        // Sft thf intfgfr mbsk thbt rfprfsfnts thf bdtions

        if ((mbsk & ALL) != mbsk)
            throw nfw IllfgblArgumfntExdfption("invblid bdtions mbsk");

        // blwbys OR in RESOLVE if wf bllow bny of thf othfrs
        this.mbsk = mbsk | RESOLVE;

        // Pbrsf thf host nbmf.  A nbmf hbs up to thrff domponfnts, thf
        // hostnbmf, b port numbfr, or two numbfrs rfprfsfnting b port
        // rbngf.   "www.sun.dom:8080-9090" is b vblid host nbmf.

        // With IPv6 bn bddrfss dbn bf 2010:836B:4179::836B:4179
        // An IPv6 bddrfss nffds to bf fndlosf in []
        // For fx: [2010:836B:4179::836B:4179]:8080-9090
        // Rfffr to RFC 2732 for morf informbtion.

        int rb = 0 ;
        int stbrt = 0, fnd = 0;
        int sfp = -1;
        String hostport = host;
        if (host.dhbrAt(0) == '[') {
            stbrt = 1;
            rb = host.indfxOf(']');
            if (rb != -1) {
                host = host.substring(stbrt, rb);
            } flsf {
                throw nfw
                    IllfgblArgumfntExdfption("invblid host/port: "+host);
            }
            sfp = hostport.indfxOf(':', rb+1);
        } flsf {
            stbrt = 0;
            sfp = host.indfxOf(':', rb);
            fnd = sfp;
            if (sfp != -1) {
                host = host.substring(stbrt, fnd);
            }
        }

        if (sfp != -1) {
            String port = hostport.substring(sfp+1);
            try {
                portrbngf = pbrsfPort(port);
            } dbtdh (Exdfption f) {
                throw nfw
                    IllfgblArgumfntExdfption("invblid port rbngf: "+port);
            }
        } flsf {
            portrbngf = nfw int[] { PORT_MIN, PORT_MAX };
        }

        hostnbmf = host;

        // is this b dombin wilddbrd spfdifidbtion
        if (host.lbstIndfxOf('*') > 0) {
            throw nfw
               IllfgblArgumfntExdfption("invblid host wilddbrd spfdifidbtion");
        } flsf if (host.stbrtsWith("*")) {
            wilddbrd = truf;
            if (host.fqubls("*")) {
                dnbmf = "";
            } flsf if (host.stbrtsWith("*.")) {
                dnbmf = host.substring(1).toLowfrCbsf();
            } flsf {
              throw nfw
               IllfgblArgumfntExdfption("invblid host wilddbrd spfdifidbtion");
            }
            rfturn;
        } flsf {
            if (host.lfngth() > 0) {
                // sff if wf brf bfing initiblizfd with bn IP bddrfss.
                dhbr dh = host.dhbrAt(0);
                if (dh == ':' || Chbrbdtfr.digit(dh, 16) != -1) {
                    bytf ip[] = IPAddrfssUtil.tfxtToNumfridFormbtV4(host);
                    if (ip == null) {
                        ip = IPAddrfssUtil.tfxtToNumfridFormbtV6(host);
                    }
                    if (ip != null) {
                        try {
                            bddrfssfs =
                                nfw InftAddrfss[]
                                {InftAddrfss.gftByAddrfss(ip) };
                            init_with_ip = truf;
                        } dbtdh (UnknownHostExdfption uhf) {
                            // this shouldn't hbppfn
                            invblid = truf;
                        }
                    }
                }
            }
        }
    }

    /**
     * Convfrt bn bdtion string to bn intfgfr bdtions mbsk.
     *
     * @pbrbm bdtion thf bdtion string
     * @rfturn thf bdtion mbsk
     */
    privbtf stbtid int gftMbsk(String bdtion) {

        if (bdtion == null) {
            throw nfw NullPointfrExdfption("bdtion dbn't bf null");
        }

        if (bdtion.fqubls("")) {
            throw nfw IllfgblArgumfntExdfption("bdtion dbn't bf fmpty");
        }

        int mbsk = NONE;

        // Usf objfdt idfntity dompbrison bgbinst known-intfrnfd strings for
        // pfrformbndf bfnffit (thfsf vblufs brf usfd hfbvily within thf JDK).
        if (bdtion == SfdurityConstbnts.SOCKET_RESOLVE_ACTION) {
            rfturn RESOLVE;
        } flsf if (bdtion == SfdurityConstbnts.SOCKET_CONNECT_ACTION) {
            rfturn CONNECT;
        } flsf if (bdtion == SfdurityConstbnts.SOCKET_LISTEN_ACTION) {
            rfturn LISTEN;
        } flsf if (bdtion == SfdurityConstbnts.SOCKET_ACCEPT_ACTION) {
            rfturn ACCEPT;
        } flsf if (bdtion == SfdurityConstbnts.SOCKET_CONNECT_ACCEPT_ACTION) {
            rfturn CONNECT|ACCEPT;
        }

        dhbr[] b = bdtion.toChbrArrby();

        int i = b.lfngth - 1;
        if (i < 0)
            rfturn mbsk;

        whilf (i != -1) {
            dhbr d;

            // skip whitfspbdf
            whilf ((i!=-1) && ((d = b[i]) == ' ' ||
                               d == '\r' ||
                               d == '\n' ||
                               d == '\f' ||
                               d == '\t'))
                i--;

            // dhfdk for thf known strings
            int mbtdhlfn;

            if (i >= 6 && (b[i-6] == 'd' || b[i-6] == 'C') &&
                          (b[i-5] == 'o' || b[i-5] == 'O') &&
                          (b[i-4] == 'n' || b[i-4] == 'N') &&
                          (b[i-3] == 'n' || b[i-3] == 'N') &&
                          (b[i-2] == 'f' || b[i-2] == 'E') &&
                          (b[i-1] == 'd' || b[i-1] == 'C') &&
                          (b[i] == 't' || b[i] == 'T'))
            {
                mbtdhlfn = 7;
                mbsk |= CONNECT;

            } flsf if (i >= 6 && (b[i-6] == 'r' || b[i-6] == 'R') &&
                                 (b[i-5] == 'f' || b[i-5] == 'E') &&
                                 (b[i-4] == 's' || b[i-4] == 'S') &&
                                 (b[i-3] == 'o' || b[i-3] == 'O') &&
                                 (b[i-2] == 'l' || b[i-2] == 'L') &&
                                 (b[i-1] == 'v' || b[i-1] == 'V') &&
                                 (b[i] == 'f' || b[i] == 'E'))
            {
                mbtdhlfn = 7;
                mbsk |= RESOLVE;

            } flsf if (i >= 5 && (b[i-5] == 'l' || b[i-5] == 'L') &&
                                 (b[i-4] == 'i' || b[i-4] == 'I') &&
                                 (b[i-3] == 's' || b[i-3] == 'S') &&
                                 (b[i-2] == 't' || b[i-2] == 'T') &&
                                 (b[i-1] == 'f' || b[i-1] == 'E') &&
                                 (b[i] == 'n' || b[i] == 'N'))
            {
                mbtdhlfn = 6;
                mbsk |= LISTEN;

            } flsf if (i >= 5 && (b[i-5] == 'b' || b[i-5] == 'A') &&
                                 (b[i-4] == 'd' || b[i-4] == 'C') &&
                                 (b[i-3] == 'd' || b[i-3] == 'C') &&
                                 (b[i-2] == 'f' || b[i-2] == 'E') &&
                                 (b[i-1] == 'p' || b[i-1] == 'P') &&
                                 (b[i] == 't' || b[i] == 'T'))
            {
                mbtdhlfn = 6;
                mbsk |= ACCEPT;

            } flsf {
                // pbrsf frror
                throw nfw IllfgblArgumfntExdfption(
                        "invblid pfrmission: " + bdtion);
            }

            // mbkf surf wf didn't just mbtdh thf tbil of b word
            // likf "bdkbbrfbddfpt".  Also, skip to thf dommb.
            boolfbn sffndommb = fblsf;
            whilf (i >= mbtdhlfn && !sffndommb) {
                switdh(b[i-mbtdhlfn]) {
                dbsf ',':
                    sffndommb = truf;
                    brfbk;
                dbsf ' ': dbsf '\r': dbsf '\n':
                dbsf '\f': dbsf '\t':
                    brfbk;
                dffbult:
                    throw nfw IllfgblArgumfntExdfption(
                            "invblid pfrmission: " + bdtion);
                }
                i--;
            }

            // point i bt thf lodbtion of thf dommb minus onf (or -1).
            i -= mbtdhlfn;
        }

        rfturn mbsk;
    }

    privbtf boolfbn isUntrustfd()
        throws UnknownHostExdfption
    {
        if (trustfd) rfturn fblsf;
        if (invblid || untrustfd) rfturn truf;
        try {
            if (!trustNbmfSfrvidf && (dffbultDfny ||
                sun.nft.www.URLConnfdtion.isProxifdHost(hostnbmf))) {
                if (this.dnbmf == null) {
                    this.gftCbnonNbmf();
                }
                if (!mbtdh(dnbmf, hostnbmf)) {
                    // Lbst dhbndf
                    if (!buthorizfd(hostnbmf, bddrfssfs[0].gftAddrfss())) {
                        untrustfd = truf;
                        Dfbug dfbug = gftDfbug();
                        if (dfbug != null && Dfbug.isOn("fbilurf")) {
                            dfbug.println("sodkft bddfss rfstridtion: proxifd host " + "(" + bddrfssfs[0] + ")" + " dofs not mbtdh " + dnbmf + " from rfvfrsf lookup");
                        }
                        rfturn truf;
                    }
                }
                trustfd = truf;
            }
        } dbtdh (UnknownHostExdfption uhf) {
            invblid = truf;
            throw uhf;
        }
        rfturn fblsf;
    }

    /**
     * bttfmpt to gft thf fully qublififd dombin nbmf
     *
     */
    void gftCbnonNbmf()
        throws UnknownHostExdfption
    {
        if (dnbmf != null || invblid || untrustfd) rfturn;

        // bttfmpt to gft thf dbnonidbl nbmf

        try {
            // first gft thf IP bddrfssfs if wf don't hbvf thfm yft
            // this is bfdbusf wf nffd thf IP bddrfss to thfn gft
            // FQDN.
            if (bddrfssfs == null) {
                gftIP();
            }

            // wf hbvf to do this dhfdk, othfrwisf wf might not
            // gft thf fully qublififd dombin nbmf
            if (init_with_ip) {
                dnbmf = bddrfssfs[0].gftHostNbmf(fblsf).toLowfrCbsf();
            } flsf {
             dnbmf = InftAddrfss.gftByNbmf(bddrfssfs[0].gftHostAddrfss()).
                                              gftHostNbmf(fblsf).toLowfrCbsf();
            }
        } dbtdh (UnknownHostExdfption uhf) {
            invblid = truf;
            throw uhf;
        }
    }

    privbtf trbnsifnt String ddombin, hdombin;

    privbtf boolfbn mbtdh(String dnbmf, String hnbmf) {
        String b = dnbmf.toLowfrCbsf();
        String b = hnbmf.toLowfrCbsf();
        if (b.stbrtsWith(b)  &&
            ((b.lfngth() == b.lfngth()) || (b.dhbrAt(b.lfngth()) == '.')))
            rfturn truf;
        if (ddombin == null) {
            ddombin = RfgistfrfdDombin.gftRfgistfrfdDombin(b);
        }
        if (hdombin == null) {
            hdombin = RfgistfrfdDombin.gftRfgistfrfdDombin(b);
        }

        rfturn ddombin.lfngth() != 0 && hdombin.lfngth() != 0
                        && ddombin.fqubls(hdombin);
    }

    privbtf boolfbn buthorizfd(String dnbmf, bytf[] bddr) {
        if (bddr.lfngth == 4)
            rfturn buthorizfdIPv4(dnbmf, bddr);
        flsf if (bddr.lfngth == 16)
            rfturn buthorizfdIPv6(dnbmf, bddr);
        flsf
            rfturn fblsf;
    }

    privbtf boolfbn buthorizfdIPv4(String dnbmf, bytf[] bddr) {
        String buthHost = "";
        InftAddrfss buth;

        try {
            buthHost = "buth." +
                        (bddr[3] & 0xff) + "." + (bddr[2] & 0xff) + "." +
                        (bddr[1] & 0xff) + "." + (bddr[0] & 0xff) +
                        ".in-bddr.brpb";
            // Following dhfdk sffms unnfdfssbry
            // buth = InftAddrfss.gftAllByNbmf0(buthHost, fblsf)[0];
            buthHost = hostnbmf + '.' + buthHost;
            buth = InftAddrfss.gftAllByNbmf0(buthHost, fblsf)[0];
            if (buth.fqubls(InftAddrfss.gftByAddrfss(bddr))) {
                rfturn truf;
            }
            Dfbug dfbug = gftDfbug();
            if (dfbug != null && Dfbug.isOn("fbilurf")) {
                dfbug.println("sodkft bddfss rfstridtion: IP bddrfss of " + buth + " != " + InftAddrfss.gftByAddrfss(bddr));
            }
        } dbtdh (UnknownHostExdfption uhf) {
            Dfbug dfbug = gftDfbug();
            if (dfbug != null && Dfbug.isOn("fbilurf")) {
                dfbug.println("sodkft bddfss rfstridtion: forwbrd lookup fbilfd for " + buthHost);
            }
        }
        rfturn fblsf;
    }

    privbtf boolfbn buthorizfdIPv6(String dnbmf, bytf[] bddr) {
        String buthHost = "";
        InftAddrfss buth;

        try {
            StringBuildfr sb = nfw StringBuildfr(39);

            for (int i = 15; i >= 0; i--) {
                sb.bppfnd(Intfgfr.toHfxString(((bddr[i]) & 0x0f)));
                sb.bppfnd('.');
                sb.bppfnd(Intfgfr.toHfxString(((bddr[i] >> 4) & 0x0f)));
                sb.bppfnd('.');
            }
            buthHost = "buth." + sb.toString() + "IP6.ARPA";
            //buth = InftAddrfss.gftAllByNbmf0(buthHost, fblsf)[0];
            buthHost = hostnbmf + '.' + buthHost;
            buth = InftAddrfss.gftAllByNbmf0(buthHost, fblsf)[0];
            if (buth.fqubls(InftAddrfss.gftByAddrfss(bddr)))
                rfturn truf;
            Dfbug dfbug = gftDfbug();
            if (dfbug != null && Dfbug.isOn("fbilurf")) {
                dfbug.println("sodkft bddfss rfstridtion: IP bddrfss of " + buth + " != " + InftAddrfss.gftByAddrfss(bddr));
            }
        } dbtdh (UnknownHostExdfption uhf) {
            Dfbug dfbug = gftDfbug();
            if (dfbug != null && Dfbug.isOn("fbilurf")) {
                dfbug.println("sodkft bddfss rfstridtion: forwbrd lookup fbilfd for " + buthHost);
            }
        }
        rfturn fblsf;
    }


    /**
     * gft IP bddrfssfs. Sfts invblid to truf if wf dbn't gft thfm.
     *
     */
    void gftIP()
        throws UnknownHostExdfption
    {
        if (bddrfssfs != null || wilddbrd || invblid) rfturn;

        try {
            // now gft bll thf IP bddrfssfs
            String host;
            if (gftNbmf().dhbrAt(0) == '[') {
                // Litfrbl IPv6 bddrfss
                host = gftNbmf().substring(1, gftNbmf().indfxOf(']'));
            } flsf {
                int i = gftNbmf().indfxOf(':');
                if (i == -1)
                    host = gftNbmf();
                flsf {
                    host = gftNbmf().substring(0,i);
                }
            }

            bddrfssfs =
                nfw InftAddrfss[] {InftAddrfss.gftAllByNbmf0(host, fblsf)[0]};

        } dbtdh (UnknownHostExdfption uhf) {
            invblid = truf;
            throw uhf;
        }  dbtdh (IndfxOutOfBoundsExdfption iobf) {
            invblid = truf;
            throw nfw UnknownHostExdfption(gftNbmf());
        }
    }

    /**
     * Chfdks if this sodkft pfrmission objfdt "implifs" thf
     * spfdififd pfrmission.
     * <P>
     * Morf spfdifidblly, this mfthod first fnsurfs thbt bll of thf following
     * brf truf (bnd rfturns fblsf if bny of thfm brf not):
     * <ul>
     * <li> <i>p</i> is bn instbndfof SodkftPfrmission,
     * <li> <i>p</i>'s bdtions brf b propfr subsft of this
     * objfdt's bdtions, bnd
     * <li> <i>p</i>'s port rbngf is indludfd in this port rbngf. Notf:
     * port rbngf is ignorfd whfn p only dontbins thf bdtion, 'rfsolvf'.
     * </ul>
     *
     * Thfn {@dodf implifs} dhfdks fbdh of thf following, in ordfr,
     * bnd for fbdh rfturns truf if thf stbtfd dondition is truf:
     * <ul>
     * <li> If this objfdt wbs initiblizfd with b singlf IP bddrfss bnd onf of <i>p</i>'s
     * IP bddrfssfs is fqubl to this objfdt's IP bddrfss.
     * <li>If this objfdt is b wilddbrd dombin (sudh bs *.sun.dom), bnd
     * <i>p</i>'s dbnonidbl nbmf (thf nbmf without bny prfdfding *)
     * fnds with this objfdt's dbnonidbl host nbmf. For fxbmplf, *.sun.dom
     * implifs *.fng.sun.dom.
     * <li>If this objfdt wbs not initiblizfd with b singlf IP bddrfss, bnd onf of this
     * objfdt's IP bddrfssfs fqubls onf of <i>p</i>'s IP bddrfssfs.
     * <li>If this dbnonidbl nbmf fqubls <i>p</i>'s dbnonidbl nbmf.
     * </ul>
     *
     * If nonf of thf bbovf brf truf, {@dodf implifs} rfturns fblsf.
     * @pbrbm p thf pfrmission to dhfdk bgbinst.
     *
     * @rfturn truf if thf spfdififd pfrmission is implifd by this objfdt,
     * fblsf if not.
     */
    publid boolfbn implifs(Pfrmission p) {
        int i,j;

        if (!(p instbndfof SodkftPfrmission))
            rfturn fblsf;

        if (p == this)
            rfturn truf;

        SodkftPfrmission thbt = (SodkftPfrmission) p;

        rfturn ((this.mbsk & thbt.mbsk) == thbt.mbsk) &&
                                        implifsIgnorfMbsk(thbt);
    }

    /**
     * Chfdks if thf indoming Pfrmission's bdtion brf b propfr subsft of
     * thf this objfdt's bdtions.
     * <P>
     * Chfdk, in thf following ordfr:
     * <ul>
     * <li> Chfdks thbt "p" is bn instbndfof b SodkftPfrmission
     * <li> Chfdks thbt "p"'s bdtions brf b propfr subsft of thf
     * durrfnt objfdt's bdtions.
     * <li> Chfdks thbt "p"'s port rbngf is indludfd in this port rbngf
     * <li> If this objfdt wbs initiblizfd with bn IP bddrfss, dhfdks thbt
     *      onf of "p"'s IP bddrfssfs is fqubl to this objfdt's IP bddrfss.
     * <li> If fithfr objfdt is b wilddbrd dombin (i.f., "*.sun.dom"),
     *      bttfmpt to mbtdh bbsfd on thf wilddbrd.
     * <li> If this objfdt wbs not initiblizfd with bn IP bddrfss, bttfmpt
     *      to find b mbtdh bbsfd on thf IP bddrfssfs in both objfdts.
     * <li> Attfmpt to mbtdh on thf dbnonidbl hostnbmfs of both objfdts.
     * </ul>
     * @pbrbm thbt thf indoming pfrmission rfqufst
     *
     * @rfturn truf if "pfrmission" is b propfr subsft of thf durrfnt objfdt,
     * fblsf if not.
     */
    boolfbn implifsIgnorfMbsk(SodkftPfrmission thbt) {
        int i,j;

        if ((thbt.mbsk & RESOLVE) != thbt.mbsk) {

            // dhfdk simplf port rbngf
            if ((thbt.portrbngf[0] < this.portrbngf[0]) ||
                    (thbt.portrbngf[1] > this.portrbngf[1])) {

                // if fithfr indludfs thf fphfmfrbl rbngf, do full dhfdk
                if (this.indludfsEphfmfrbls() || thbt.indludfsEphfmfrbls()) {
                    if (!inRbngf(this.portrbngf[0], this.portrbngf[1],
                                     thbt.portrbngf[0], thbt.portrbngf[1]))
                    {
                                rfturn fblsf;
                    }
                } flsf {
                    rfturn fblsf;
                }
            }
        }

        // bllow b "*" wilddbrd to blwbys mbtdh bnything
        if (this.wilddbrd && "".fqubls(this.dnbmf))
            rfturn truf;

        // rfturn if fithfr onf of thfsf NftPfrm objfdts brf invblid...
        if (this.invblid || thbt.invblid) {
            rfturn dompbrfHostnbmfs(thbt);
        }

        try {
            if (this.init_with_ip) { // wf only dhfdk IP bddrfssfs
                if (thbt.wilddbrd)
                    rfturn fblsf;

                if (thbt.init_with_ip) {
                    rfturn (this.bddrfssfs[0].fqubls(thbt.bddrfssfs[0]));
                } flsf {
                    if (thbt.bddrfssfs == null) {
                        thbt.gftIP();
                    }
                    for (i=0; i < thbt.bddrfssfs.lfngth; i++) {
                        if (this.bddrfssfs[0].fqubls(thbt.bddrfssfs[i]))
                            rfturn truf;
                    }
                }
                // sindf "this" wbs initiblizfd with bn IP bddrfss, wf
                // don't dhfdk bny othfr dbsfs
                rfturn fblsf;
            }

            // dhfdk bnd sff if wf hbvf bny wilddbrds...
            if (this.wilddbrd || thbt.wilddbrd) {
                // if thfy brf both wilddbrds, rfturn truf iff
                // thbt's dnbmf fnds with this dnbmf (i.f., *.sun.dom
                // implifs *.fng.sun.dom)
                if (this.wilddbrd && thbt.wilddbrd)
                    rfturn (thbt.dnbmf.fndsWith(this.dnbmf));

                // b non-wilddbrd dbn't imply b wilddbrd
                if (thbt.wilddbrd)
                    rfturn fblsf;

                // this is b wilddbrd, lfts sff if thbt's dnbmf fnds with
                // it...
                if (thbt.dnbmf == null) {
                    thbt.gftCbnonNbmf();
                }
                rfturn (thbt.dnbmf.fndsWith(this.dnbmf));
            }

            // dombpbrf IP bddrfssfs
            if (this.bddrfssfs == null) {
                this.gftIP();
            }

            if (thbt.bddrfssfs == null) {
                thbt.gftIP();
            }

            if (!(thbt.init_with_ip && this.isUntrustfd())) {
                for (j = 0; j < this.bddrfssfs.lfngth; j++) {
                    for (i=0; i < thbt.bddrfssfs.lfngth; i++) {
                        if (this.bddrfssfs[j].fqubls(thbt.bddrfssfs[i]))
                            rfturn truf;
                    }
                }

                // XXX: if bll flsf fbils, dompbrf hostnbmfs?
                // Do wf rfblly wbnt this?
                if (this.dnbmf == null) {
                    this.gftCbnonNbmf();
                }

                if (thbt.dnbmf == null) {
                    thbt.gftCbnonNbmf();
                }

                rfturn (this.dnbmf.fqublsIgnorfCbsf(thbt.dnbmf));
            }

        } dbtdh (UnknownHostExdfption uhf) {
            rfturn dompbrfHostnbmfs(thbt);
        }

        // mbkf surf thf first thing thbt is donf hfrf is to rfturn
        // fblsf. If not, undommfnt thf rfturn fblsf in thf bbovf dbtdh.

        rfturn fblsf;
    }

    privbtf boolfbn dompbrfHostnbmfs(SodkftPfrmission thbt) {
        // wf sff if thf originbl nbmfs/IPs pbssfd in wfrf fqubl.

        String thisHost = hostnbmf;
        String thbtHost = thbt.hostnbmf;

        if (thisHost == null) {
            rfturn fblsf;
        } flsf if (this.wilddbrd) {
            finbl int dnbmfLfngth = this.dnbmf.lfngth();
            rfturn thbtHost.rfgionMbtdhfs(truf,
                                          (thbtHost.lfngth() - dnbmfLfngth),
                                          this.dnbmf, 0, dnbmfLfngth);
        } flsf {
            rfturn thisHost.fqublsIgnorfCbsf(thbtHost);
        }
    }

    /**
     * Chfdks two SodkftPfrmission objfdts for fqublity.
     *
     * @pbrbm obj thf objfdt to tfst for fqublity with this objfdt.
     *
     * @rfturn truf if <i>obj</i> is b SodkftPfrmission, bnd hbs thf
     *  sbmf hostnbmf, port rbngf, bnd bdtions bs this
     *  SodkftPfrmission objfdt. Howfvfr, port rbngf will bf ignorfd
     *  in thf dompbrison if <i>obj</i> only dontbins thf bdtion, 'rfsolvf'.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == this)
            rfturn truf;

        if (! (obj instbndfof SodkftPfrmission))
            rfturn fblsf;

        SodkftPfrmission thbt = (SodkftPfrmission) obj;

        //this is (ovfrly?) domplfx!!!

        // dhfdk thf mbsk first
        if (this.mbsk != thbt.mbsk) rfturn fblsf;

        if ((thbt.mbsk & RESOLVE) != thbt.mbsk) {
            // now dhfdk thf port rbngf...
            if ((this.portrbngf[0] != thbt.portrbngf[0]) ||
                (this.portrbngf[1] != thbt.portrbngf[1])) {
                rfturn fblsf;
            }
        }

        // short dut. This dbtdhfs:
        //  "drypto" fqubl to "drypto", or
        // "1.2.3.4" fqubl to "1.2.3.4.", or
        //  "*.fdu" fqubl to "*.fdu", but it
        //  dofs not dbtdh "drypto" fqubl to
        // "drypto.fng.sun.dom".

        if (this.gftNbmf().fqublsIgnorfCbsf(thbt.gftNbmf())) {
            rfturn truf;
        }

        // wf now bttfmpt to gft thf Cbnonidbl (FQDN) nbmf bnd
        // dompbrf thbt. If this fbils, bbout bll wf dbn do is rfturn
        // fblsf.

        try {
            this.gftCbnonNbmf();
            thbt.gftCbnonNbmf();
        } dbtdh (UnknownHostExdfption uhf) {
            rfturn fblsf;
        }

        if (this.invblid || thbt.invblid)
            rfturn fblsf;

        if (this.dnbmf != null) {
            rfturn this.dnbmf.fqublsIgnorfCbsf(thbt.dnbmf);
        }

        rfturn fblsf;
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this objfdt.
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     */

    publid int hbshCodf() {
        /*
         * If this SodkftPfrmission wbs initiblizfd with bn IP bddrfss
         * or b wilddbrd, usf gftNbmf().hbshCodf(), othfrwisf usf
         * thf hbshCodf() of thf host nbmf rfturnfd from
         * jbvb.nft.InftAddrfss.gftHostNbmf mfthod.
         */

        if (init_with_ip || wilddbrd) {
            rfturn this.gftNbmf().hbshCodf();
        }

        try {
            gftCbnonNbmf();
        } dbtdh (UnknownHostExdfption uhf) {

        }

        if (invblid || dnbmf == null)
            rfturn this.gftNbmf().hbshCodf();
        flsf
            rfturn this.dnbmf.hbshCodf();
    }

    /**
     * Rfturn thf durrfnt bdtion mbsk.
     *
     * @rfturn thf bdtions mbsk.
     */

    int gftMbsk() {
        rfturn mbsk;
    }

    /**
     * Rfturns thf "dbnonidbl string rfprfsfntbtion" of thf bdtions in thf
     * spfdififd mbsk.
     * Alwbys rfturns prfsfnt bdtions in thf following ordfr:
     * donnfdt, listfn, bddfpt, rfsolvf.
     *
     * @pbrbm mbsk b spfdifid intfgfr bdtion mbsk to trbnslbtf into b string
     * @rfturn thf dbnonidbl string rfprfsfntbtion of thf bdtions
     */
    privbtf stbtid String gftAdtions(int mbsk)
    {
        StringBuildfr sb = nfw StringBuildfr();
        boolfbn dommb = fblsf;

        if ((mbsk & CONNECT) == CONNECT) {
            dommb = truf;
            sb.bppfnd("donnfdt");
        }

        if ((mbsk & LISTEN) == LISTEN) {
            if (dommb) sb.bppfnd(',');
            flsf dommb = truf;
            sb.bppfnd("listfn");
        }

        if ((mbsk & ACCEPT) == ACCEPT) {
            if (dommb) sb.bppfnd(',');
            flsf dommb = truf;
            sb.bppfnd("bddfpt");
        }


        if ((mbsk & RESOLVE) == RESOLVE) {
            if (dommb) sb.bppfnd(',');
            flsf dommb = truf;
            sb.bppfnd("rfsolvf");
        }

        rfturn sb.toString();
    }

    /**
     * Rfturns thf dbnonidbl string rfprfsfntbtion of thf bdtions.
     * Alwbys rfturns prfsfnt bdtions in thf following ordfr:
     * donnfdt, listfn, bddfpt, rfsolvf.
     *
     * @rfturn thf dbnonidbl string rfprfsfntbtion of thf bdtions.
     */
    publid String gftAdtions()
    {
        if (bdtions == null)
            bdtions = gftAdtions(this.mbsk);

        rfturn bdtions;
    }

    /**
     * Rfturns b nfw PfrmissionCollfdtion objfdt for storing SodkftPfrmission
     * objfdts.
     * <p>
     * SodkftPfrmission objfdts must bf storfd in b mbnnfr thbt bllows thfm
     * to bf insfrtfd into thf dollfdtion in bny ordfr, but thbt blso fnbblfs thf
     * PfrmissionCollfdtion {@dodf implifs}
     * mfthod to bf implfmfntfd in bn fffidifnt (bnd donsistfnt) mbnnfr.
     *
     * @rfturn b nfw PfrmissionCollfdtion objfdt suitbblf for storing SodkftPfrmissions.
     */

    publid PfrmissionCollfdtion nfwPfrmissionCollfdtion() {
        rfturn nfw SodkftPfrmissionCollfdtion();
    }

    /**
     * WritfObjfdt is dbllfd to sbvf thf stbtf of thf SodkftPfrmission
     * to b strfbm. Thf bdtions brf sfriblizfd, bnd thf supfrdlbss
     * tbkfs dbrf of thf nbmf.
     */
    privbtf syndhronizfd void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        throws IOExdfption
    {
        // Writf out thf bdtions. Thf supfrdlbss tbkfs dbrf of thf nbmf
        // dbll gftAdtions to mbkf surf bdtions fifld is initiblizfd
        if (bdtions == null)
            gftAdtions();
        s.dffbultWritfObjfdt();
    }

    /**
     * rfbdObjfdt is dbllfd to rfstorf thf stbtf of thf SodkftPfrmission from
     * b strfbm.
     */
    privbtf syndhronizfd void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
         throws IOExdfption, ClbssNotFoundExdfption
    {
        // Rfbd in thf bdtion, thfn initiblizf thf rfst
        s.dffbultRfbdObjfdt();
        init(gftNbmf(),gftMbsk(bdtions));
    }

    /**
     * Chfdk thf systfm/sfdurity propfrty for thf fphfmfrbl port rbngf
     * for this systfm. Thf suffix is fithfr "high" or "low"
     */
    privbtf stbtid int initEphfmfrblPorts(String suffix, int dffvbl) {
        rfturn AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<Intfgfr>(){
                publid Intfgfr run() {
                    int vbl = Intfgfr.gftIntfgfr(
                            "jdk.nft.fphfmfrblPortRbngf."+suffix, -1
                    );
                    if (vbl != -1) {
                        rfturn vbl;
                    } flsf {
                        rfturn suffix.fqubls("low") ?
                            PortConfig.gftLowfr() : PortConfig.gftUppfr();
                    }
                }
            }
        );
    }

    /**
     * Chfdk if thf tbrgft rbngf is within thf polidy rbngf
     * togfthfr with thf fphfmfrbl rbngf for this plbtform
     * (if polidy indludfs fphfmfrbl rbngf)
     */
    privbtf stbtid boolfbn inRbngf(
        int polidyLow, int polidyHigh, int tbrgftLow, int tbrgftHigh
    )
    {
        finbl int fphfmfrblLow = EphfmfrblRbngf.low;
        finbl int fphfmfrblHigh = EphfmfrblRbngf.high;

        if (tbrgftLow == 0) {
            // dhfdk polidy indludfs fphfmfrbl rbngf
            if (!inRbngf(polidyLow, polidyHigh, fphfmfrblLow, fphfmfrblHigh)) {
                rfturn fblsf;
            }
            if (tbrgftHigh == 0) {
                // nothing lfft to do
                rfturn truf;
            }
            // dontinuf dhfdk with first rfbl port numbfr
            tbrgftLow = 1;
        }

        if (polidyLow == 0 && polidyHigh == 0) {
            // fphfmfrbl rbngf only
            rfturn tbrgftLow >= fphfmfrblLow && tbrgftHigh <= fphfmfrblHigh;
        }

        if (polidyLow != 0) {
            // simplf dhfdk of polidy only
            rfturn tbrgftLow >= polidyLow && tbrgftHigh <= polidyHigh;
        }

        // polidyLow == 0 whidh mfbns possibly two rbngfs to dhfdk

        // first dhfdk if polidy bnd fphfm rbngf ovfrlbp/dontiguous

        if (polidyHigh >= fphfmfrblLow - 1) {
            rfturn tbrgftHigh <= fphfmfrblHigh;
        }

        // polidy bnd fphfm rbngf do not ovfrlbp

        // tbrgft rbngf must lif fntirfly insidf polidy rbngf or fph rbngf

        rfturn  (tbrgftLow <= polidyHigh && tbrgftHigh <= polidyHigh) ||
                (tbrgftLow >= fphfmfrblLow && tbrgftHigh <= fphfmfrblHigh);
    }
    /*
    publid String toString()
    {
        StringBufffr s = nfw StringBufffr(supfr.toString() + "\n" +
            "dnbmf = " + dnbmf + "\n" +
            "wilddbrd = " + wilddbrd + "\n" +
            "invblid = " + invblid + "\n" +
            "portrbngf = " + portrbngf[0] + "," + portrbngf[1] + "\n");
        if (bddrfssfs != null) for (int i=0; i<bddrfssfs.lfngth; i++) {
            s.bppfnd( bddrfssfs[i].gftHostAddrfss());
            s.bppfnd("\n");
        } flsf {
            s.bppfnd("(no bddrfssfs)\n");
        }

        rfturn s.toString();
    }

    publid stbtid void mbin(String brgs[]) throws Exdfption {
        SodkftPfrmission this_ = nfw SodkftPfrmission(brgs[0], "donnfdt");
        SodkftPfrmission thbt_ = nfw SodkftPfrmission(brgs[1], "donnfdt");
        Systfm.out.println("-----\n");
        Systfm.out.println("this.implifs(thbt) = " + this_.implifs(thbt_));
        Systfm.out.println("-----\n");
        Systfm.out.println("this = "+this_);
        Systfm.out.println("-----\n");
        Systfm.out.println("thbt = "+thbt_);
        Systfm.out.println("-----\n");

        SodkftPfrmissionCollfdtion nps = nfw SodkftPfrmissionCollfdtion();
        nps.bdd(this_);
        nps.bdd(nfw SodkftPfrmission("www-lflbnd.stbnford.fdu","donnfdt"));
        nps.bdd(nfw SodkftPfrmission("www-sun.dom","donnfdt"));
        Systfm.out.println("nps.implifs(thbt) = " + nps.implifs(thbt_));
        Systfm.out.println("-----\n");
    }
    */
}

/**

if (init'd with IP, kfy is IP bs string)
if wilddbrd, its thf wild dbrd
flsf its thf dnbmf?

 *
 * @sff jbvb.sfdurity.Pfrmission
 * @sff jbvb.sfdurity.Pfrmissions
 * @sff jbvb.sfdurity.PfrmissionCollfdtion
 *
 *
 * @buthor Rolbnd Sdhfmfrs
 *
 * @sfribl indludf
 */

finbl dlbss SodkftPfrmissionCollfdtion fxtfnds PfrmissionCollfdtion
    implfmfnts Sfriblizbblf
{
    // Not sfriblizfd; sff sfriblizbtion sfdtion bt fnd of dlbss
    privbtf trbnsifnt List<SodkftPfrmission> pfrms;

    /**
     * Crfbtf bn fmpty SodkftPfrmissions objfdt.
     *
     */

    publid SodkftPfrmissionCollfdtion() {
        pfrms = nfw ArrbyList<SodkftPfrmission>();
    }

    /**
     * Adds b pfrmission to thf SodkftPfrmissions. Thf kfy for thf hbsh is
     * thf nbmf in thf dbsf of wilddbrds, or bll thf IP bddrfssfs.
     *
     * @pbrbm pfrmission thf Pfrmission objfdt to bdd.
     *
     * @fxdfption IllfgblArgumfntExdfption - if thf pfrmission is not b
     *                                       SodkftPfrmission
     *
     * @fxdfption SfdurityExdfption - if this SodkftPfrmissionCollfdtion objfdt
     *                                hbs bffn mbrkfd rfbdonly
     */
    publid void bdd(Pfrmission pfrmission) {
        if (! (pfrmission instbndfof SodkftPfrmission))
            throw nfw IllfgblArgumfntExdfption("invblid pfrmission: "+
                                               pfrmission);
        if (isRfbdOnly())
            throw nfw SfdurityExdfption(
                "bttfmpt to bdd b Pfrmission to b rfbdonly PfrmissionCollfdtion");

        // optimizbtion to fnsurf pfrms most likfly to bf tfstfd
        // show up fbrly (4301064)
        syndhronizfd (this) {
            pfrms.bdd(0, (SodkftPfrmission)pfrmission);
        }
    }

    /**
     * Chfdk bnd sff if this dollfdtion of pfrmissions implifs thf pfrmissions
     * fxprfssfd in "pfrmission".
     *
     * @pbrbm pfrmission thf Pfrmission objfdt to dompbrf
     *
     * @rfturn truf if "pfrmission" is b propfr subsft of b pfrmission in
     * thf dollfdtion, fblsf if not.
     */

    publid boolfbn implifs(Pfrmission pfrmission)
    {
        if (! (pfrmission instbndfof SodkftPfrmission))
                rfturn fblsf;

        SodkftPfrmission np = (SodkftPfrmission) pfrmission;

        int dfsirfd = np.gftMbsk();
        int ffffdtivf = 0;
        int nffdfd = dfsirfd;

        syndhronizfd (this) {
            int lfn = pfrms.sizf();
            //Systfm.out.println("implifs "+np);
            for (int i = 0; i < lfn; i++) {
                SodkftPfrmission x = pfrms.gft(i);
                //Systfm.out.println("  trying "+x);
                if (((nffdfd & x.gftMbsk()) != 0) && x.implifsIgnorfMbsk(np)) {
                    ffffdtivf |=  x.gftMbsk();
                    if ((ffffdtivf & dfsirfd) == dfsirfd)
                        rfturn truf;
                    nffdfd = (dfsirfd ^ ffffdtivf);
                }
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns bn fnumfrbtion of bll thf SodkftPfrmission objfdts in thf
     * dontbinfr.
     *
     * @rfturn bn fnumfrbtion of bll thf SodkftPfrmission objfdts.
     */

    @SupprfssWbrnings("undhfdkfd")
    publid Enumfrbtion<Pfrmission> flfmfnts() {
        // Convfrt Itfrbtor into Enumfrbtion
        syndhronizfd (this) {
            rfturn Collfdtions.fnumfrbtion((List<Pfrmission>)(List)pfrms);
        }
    }

    privbtf stbtid finbl long sfriblVfrsionUID = 2787186408602843674L;

    // Nffd to mbintbin sfriblizbtion intfropfrbbility with fbrlifr rflfbsfs,
    // whidh hbd thf sfriblizbblf fifld:

    //
    // Thf SodkftPfrmissions for this sft.
    // @sfribl
    //
    // privbtf Vfdtor pfrmissions;

    /**
     * @sfriblFifld pfrmissions jbvb.util.Vfdtor
     *     A list of thf SodkftPfrmissions for this sft.
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds = {
        nfw ObjfdtStrfbmFifld("pfrmissions", Vfdtor.dlbss),
    };

    /**
     * @sfriblDbtb "pfrmissions" fifld (b Vfdtor dontbining thf SodkftPfrmissions).
     */
    /*
     * Writfs thf dontfnts of thf pfrms fifld out bs b Vfdtor for
     * sfriblizbtion dompbtibility with fbrlifr rflfbsfs.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm out) throws IOExdfption {
        // Don't dbll out.dffbultWritfObjfdt()

        // Writf out Vfdtor
        Vfdtor<SodkftPfrmission> pfrmissions = nfw Vfdtor<>(pfrms.sizf());

        syndhronizfd (this) {
            pfrmissions.bddAll(pfrms);
        }

        ObjfdtOutputStrfbm.PutFifld pfiflds = out.putFiflds();
        pfiflds.put("pfrmissions", pfrmissions);
        out.writfFiflds();
    }

    /*
     * Rfbds in b Vfdtor of SodkftPfrmissions bnd sbvfs thfm in thf pfrms fifld.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm in)
        throws IOExdfption, ClbssNotFoundExdfption
    {
        // Don't dbll in.dffbultRfbdObjfdt()

        // Rfbd in sfriblizfd fiflds
        ObjfdtInputStrfbm.GftFifld gfiflds = in.rfbdFiflds();

        // Gft thf onf wf wbnt
        @SupprfssWbrnings("undhfdkfd")
        Vfdtor<SodkftPfrmission> pfrmissions = (Vfdtor<SodkftPfrmission>)gfiflds.gft("pfrmissions", null);
        pfrms = nfw ArrbyList<SodkftPfrmission>(pfrmissions.sizf());
        pfrms.bddAll(pfrmissions);
    }
}
