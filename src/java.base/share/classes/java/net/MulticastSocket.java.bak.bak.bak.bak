/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.IOExdfption;
import jbvb.util.Enumfrbtion;

/**
 * Thf multidbst dbtbgrbm sodkft dlbss is usfful for sfnding
 * bnd rfdfiving IP multidbst pbdkfts.  A MultidbstSodkft is
 * b (UDP) DbtbgrbmSodkft, with bdditionbl dbpbbilitifs for
 * joining "groups" of othfr multidbst hosts on thf intfrnft.
 * <P>
 * A multidbst group is spfdififd by b dlbss D IP bddrfss
 * bnd by b stbndbrd UDP port numbfr. Clbss D IP bddrfssfs
 * brf in thf rbngf <CODE>224.0.0.0</CODE> to <CODE>239.255.255.255</CODE>,
 * indlusivf. Thf bddrfss 224.0.0.0 is rfsfrvfd bnd should not bf usfd.
 * <P>
 * Onf would join b multidbst group by first drfbting b MultidbstSodkft
 * with thf dfsirfd port, thfn invoking thf
 * <CODE>joinGroup(InftAddrfss groupAddr)</CODE>
 * mfthod:
 * <PRE>
 * // join b Multidbst group bnd sfnd thf group sblutbtions
 * ...
 * String msg = "Hfllo";
 * InftAddrfss group = InftAddrfss.gftByNbmf("228.5.6.7");
 * MultidbstSodkft s = nfw MultidbstSodkft(6789);
 * s.joinGroup(group);
 * DbtbgrbmPbdkft hi = nfw DbtbgrbmPbdkft(msg.gftBytfs(), msg.lfngth(),
 *                             group, 6789);
 * s.sfnd(hi);
 * // gft thfir rfsponsfs!
 * bytf[] buf = nfw bytf[1000];
 * DbtbgrbmPbdkft rfdv = nfw DbtbgrbmPbdkft(buf, buf.lfngth);
 * s.rfdfivf(rfdv);
 * ...
 * // OK, I'm donf tblking - lfbvf thf group...
 * s.lfbvfGroup(group);
 * </PRE>
 *
 * Whfn onf sfnds b mfssbgf to b multidbst group, <B>bll</B> subsdribing
 * rfdipifnts to thbt host bnd port rfdfivf thf mfssbgf (within thf
 * timf-to-livf rbngf of thf pbdkft, sff bflow).  Thf sodkft nffdn't
 * bf b mfmbfr of thf multidbst group to sfnd mfssbgfs to it.
 * <P>
 * Whfn b sodkft subsdribfs to b multidbst group/port, it rfdfivfs
 * dbtbgrbms sfnt by othfr hosts to thf group/port, bs do bll othfr
 * mfmbfrs of thf group bnd port.  A sodkft rflinquishfs mfmbfrship
 * in b group by thf lfbvfGroup(InftAddrfss bddr) mfthod.  <B>
 * Multiplf MultidbstSodkft's</B> mby subsdribf to b multidbst group
 * bnd port dondurrfntly, bnd thfy will bll rfdfivf group dbtbgrbms.
 * <P>
 * Currfntly bpplfts brf not bllowfd to usf multidbst sodkfts.
 *
 * @buthor Pbvbni Diwbnji
 * @sindf  1.1
 */
publid
dlbss MultidbstSodkft fxtfnds DbtbgrbmSodkft {

    /**
     * Usfd on somf plbtforms to rfdord if bn outgoing intfrfbdf
     * hbs bffn sft for this sodkft.
     */
    privbtf boolfbn intfrfbdfSft;

    /**
     * Crfbtf b multidbst sodkft.
     *
     * <p>If thfrf is b sfdurity mbnbgfr,
     * its {@dodf dhfdkListfn} mfthod is first dbllfd
     * with 0 bs its brgumfnt to fnsurf thf opfrbtion is bllowfd.
     * This dould rfsult in b SfdurityExdfption.
     * <p>
     * Whfn thf sodkft is drfbtfd thf
     * {@link DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)} mfthod is
     * dbllfd to fnbblf thf SO_REUSEADDR sodkft option.
     *
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs
     * whilf drfbting thf MultidbstSodkft
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *             {@dodf dhfdkListfn} mfthod dofsn't bllow thf opfrbtion.
     * @sff SfdurityMbnbgfr#dhfdkListfn
     * @sff jbvb.nft.DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)
     */
    publid MultidbstSodkft() throws IOExdfption {
        this(nfw InftSodkftAddrfss(0));
    }

    /**
     * Crfbtf b multidbst sodkft bnd bind it to b spfdifid port.
     *
     * <p>If thfrf is b sfdurity mbnbgfr,
     * its {@dodf dhfdkListfn} mfthod is first dbllfd
     * with thf {@dodf port} brgumfnt
     * bs its brgumfnt to fnsurf thf opfrbtion is bllowfd.
     * This dould rfsult in b SfdurityExdfption.
     * <p>
     * Whfn thf sodkft is drfbtfd thf
     * {@link DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)} mfthod is
     * dbllfd to fnbblf thf SO_REUSEADDR sodkft option.
     *
     * @pbrbm port port to usf
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs
     * whilf drfbting thf MultidbstSodkft
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *             {@dodf dhfdkListfn} mfthod dofsn't bllow thf opfrbtion.
     * @sff SfdurityMbnbgfr#dhfdkListfn
     * @sff jbvb.nft.DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)
     */
    publid MultidbstSodkft(int port) throws IOExdfption {
        this(nfw InftSodkftAddrfss(port));
    }

    /**
     * Crfbtf b MultidbstSodkft bound to thf spfdififd sodkft bddrfss.
     * <p>
     * Or, if thf bddrfss is {@dodf null}, drfbtf bn unbound sodkft.
     *
     * <p>If thfrf is b sfdurity mbnbgfr,
     * its {@dodf dhfdkListfn} mfthod is first dbllfd
     * with thf SodkftAddrfss port bs its brgumfnt to fnsurf thf opfrbtion is bllowfd.
     * This dould rfsult in b SfdurityExdfption.
     * <p>
     * Whfn thf sodkft is drfbtfd thf
     * {@link DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)} mfthod is
     * dbllfd to fnbblf thf SO_REUSEADDR sodkft option.
     *
     * @pbrbm bindbddr Sodkft bddrfss to bind to, or {@dodf null} for
     *                 bn unbound sodkft.
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs
     * whilf drfbting thf MultidbstSodkft
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *             {@dodf dhfdkListfn} mfthod dofsn't bllow thf opfrbtion.
     * @sff SfdurityMbnbgfr#dhfdkListfn
     * @sff jbvb.nft.DbtbgrbmSodkft#sftRfusfAddrfss(boolfbn)
     *
     * @sindf 1.4
     */
    publid MultidbstSodkft(SodkftAddrfss bindbddr) throws IOExdfption {
        supfr((SodkftAddrfss) null);

        // Enbblf SO_REUSEADDR bfforf binding
        sftRfusfAddrfss(truf);

        if (bindbddr != null) {
            try {
                bind(bindbddr);
            } finblly {
                if (!isBound())
                    dlosf();
            }
        }
    }

    /**
     * Thf lodk on thf sodkft's TTL. This is for sft/gftTTL bnd
     * sfnd(pbdkft,ttl).
     */
    privbtf Objfdt ttlLodk = nfw Objfdt();

    /**
     * Thf lodk on thf sodkft's intfrfbdf - usfd by sftIntfrfbdf
     * bnd gftIntfrfbdf
     */
    privbtf Objfdt infLodk = nfw Objfdt();

    /**
     * Thf "lbst" intfrfbdf sft by sftIntfrfbdf on this MultidbstSodkft
     */
    privbtf InftAddrfss infAddrfss = null;


    /**
     * Sft thf dffbult timf-to-livf for multidbst pbdkfts sfnt out
     * on this {@dodf MultidbstSodkft} in ordfr to dontrol thf
     * sdopf of thf multidbsts.
     *
     * <p>Thf ttl is bn <b>unsignfd</b> 8-bit qubntity, bnd so <B>must</B> bf
     * in thf rbngf {@dodf 0 <= ttl <= 0xFF }.
     *
     * @pbrbm ttl thf timf-to-livf
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs
     * whilf sftting thf dffbult timf-to-livf vbluf
     * @dfprfdbtfd usf thf sftTimfToLivf mfthod instfbd, whidh usfs
     * <b>int</b> instfbd of <b>bytf</b> bs thf typf for ttl.
     * @sff #gftTTL()
     */
    @Dfprfdbtfd
    publid void sftTTL(bytf ttl) throws IOExdfption {
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        gftImpl().sftTTL(ttl);
    }

    /**
     * Sft thf dffbult timf-to-livf for multidbst pbdkfts sfnt out
     * on this {@dodf MultidbstSodkft} in ordfr to dontrol thf
     * sdopf of thf multidbsts.
     *
     * <P> Thf ttl <B>must</B> bf in thf rbngf {@dodf  0 <= ttl <=
     * 255} or bn {@dodf IllfgblArgumfntExdfption} will bf thrown.
     * Multidbst pbdkfts sfnt with b TTL of {@dodf 0} brf not trbnsmittfd
     * on thf nftwork but mby bf dflivfrfd lodblly.
     *
     * @pbrbm  ttl
     *         thf timf-to-livf
     *
     * @throws  IOExdfption
     *          if bn I/O fxdfption oddurs whilf sftting thf
     *          dffbult timf-to-livf vbluf
     *
     * @sff #gftTimfToLivf()
     */
    publid void sftTimfToLivf(int ttl) throws IOExdfption {
        if (ttl < 0 || ttl > 255) {
            throw nfw IllfgblArgumfntExdfption("ttl out of rbngf");
        }
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        gftImpl().sftTimfToLivf(ttl);
    }

    /**
     * Gft thf dffbult timf-to-livf for multidbst pbdkfts sfnt out on
     * thf sodkft.
     *
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs
     * whilf gftting thf dffbult timf-to-livf vbluf
     * @rfturn thf dffbult timf-to-livf vbluf
     * @dfprfdbtfd usf thf gftTimfToLivf mfthod instfbd, whidh rfturns
     * bn <b>int</b> instfbd of b <b>bytf</b>.
     * @sff #sftTTL(bytf)
     */
    @Dfprfdbtfd
    publid bytf gftTTL() throws IOExdfption {
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        rfturn gftImpl().gftTTL();
    }

    /**
     * Gft thf dffbult timf-to-livf for multidbst pbdkfts sfnt out on
     * thf sodkft.
     * @fxdfption IOExdfption if bn I/O fxdfption oddurs whilf
     * gftting thf dffbult timf-to-livf vbluf
     * @rfturn thf dffbult timf-to-livf vbluf
     * @sff #sftTimfToLivf(int)
     */
    publid int gftTimfToLivf() throws IOExdfption {
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        rfturn gftImpl().gftTimfToLivf();
    }

    /**
     * Joins b multidbst group. Its bfhbvior mby bf bfffdtfd by
     * {@dodf sftIntfrfbdf} or {@dodf sftNftworkIntfrfbdf}.
     *
     * <p>If thfrf is b sfdurity mbnbgfr, this mfthod first
     * dblls its {@dodf dhfdkMultidbst} mfthod
     * with thf {@dodf mdbstbddr} brgumfnt
     * bs its brgumfnt.
     *
     * @pbrbm mdbstbddr is thf multidbst bddrfss to join
     *
     * @fxdfption IOExdfption if thfrf is bn frror joining
     * or whfn thf bddrfss is not b multidbst bddrfss.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     * {@dodf dhfdkMultidbst} mfthod dofsn't bllow thf join.
     *
     * @sff SfdurityMbnbgfr#dhfdkMultidbst(InftAddrfss)
     */
    publid void joinGroup(InftAddrfss mdbstbddr) throws IOExdfption {
        if (isClosfd()) {
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        }

        dhfdkAddrfss(mdbstbddr, "joinGroup");
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.dhfdkMultidbst(mdbstbddr);
        }

        if (!mdbstbddr.isMultidbstAddrfss()) {
            throw nfw SodkftExdfption("Not b multidbst bddrfss");
        }

        /**
         * rfquirfd for somf plbtforms whfrf it's not possiblf to join
         * b group without sftting thf intfrfbdf first.
         */
        NftworkIntfrfbdf dffbultIntfrfbdf = NftworkIntfrfbdf.gftDffbult();

        if (!intfrfbdfSft && dffbultIntfrfbdf != null) {
            sftNftworkIntfrfbdf(dffbultIntfrfbdf);
        }

        gftImpl().join(mdbstbddr);
    }

    /**
     * Lfbvf b multidbst group. Its bfhbvior mby bf bfffdtfd by
     * {@dodf sftIntfrfbdf} or {@dodf sftNftworkIntfrfbdf}.
     *
     * <p>If thfrf is b sfdurity mbnbgfr, this mfthod first
     * dblls its {@dodf dhfdkMultidbst} mfthod
     * with thf {@dodf mdbstbddr} brgumfnt
     * bs its brgumfnt.
     *
     * @pbrbm mdbstbddr is thf multidbst bddrfss to lfbvf
     * @fxdfption IOExdfption if thfrf is bn frror lfbving
     * or whfn thf bddrfss is not b multidbst bddrfss.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     * {@dodf dhfdkMultidbst} mfthod dofsn't bllow thf opfrbtion.
     *
     * @sff SfdurityMbnbgfr#dhfdkMultidbst(InftAddrfss)
     */
    publid void lfbvfGroup(InftAddrfss mdbstbddr) throws IOExdfption {
        if (isClosfd()) {
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        }

        dhfdkAddrfss(mdbstbddr, "lfbvfGroup");
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.dhfdkMultidbst(mdbstbddr);
        }

        if (!mdbstbddr.isMultidbstAddrfss()) {
            throw nfw SodkftExdfption("Not b multidbst bddrfss");
        }

        gftImpl().lfbvf(mdbstbddr);
    }

    /**
     * Joins thf spfdififd multidbst group bt thf spfdififd intfrfbdf.
     *
     * <p>If thfrf is b sfdurity mbnbgfr, this mfthod first
     * dblls its {@dodf dhfdkMultidbst} mfthod
     * with thf {@dodf mdbstbddr} brgumfnt
     * bs its brgumfnt.
     *
     * @pbrbm mdbstbddr is thf multidbst bddrfss to join
     * @pbrbm nftIf spfdififs thf lodbl intfrfbdf to rfdfivf multidbst
     *        dbtbgrbm pbdkfts, or <i>null</i> to dfffr to thf intfrfbdf sft by
     *       {@link MultidbstSodkft#sftIntfrfbdf(InftAddrfss)} or
     *       {@link MultidbstSodkft#sftNftworkIntfrfbdf(NftworkIntfrfbdf)}
     *
     * @fxdfption IOExdfption if thfrf is bn frror joining
     * or whfn thf bddrfss is not b multidbst bddrfss.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     * {@dodf dhfdkMultidbst} mfthod dofsn't bllow thf join.
     * @throws  IllfgblArgumfntExdfption if mdbstbddr is null or is b
     *          SodkftAddrfss subdlbss not supportfd by this sodkft
     *
     * @sff SfdurityMbnbgfr#dhfdkMultidbst(InftAddrfss)
     * @sindf 1.4
     */
    publid void joinGroup(SodkftAddrfss mdbstbddr, NftworkIntfrfbdf nftIf)
        throws IOExdfption {
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");

        if (mdbstbddr == null || !(mdbstbddr instbndfof InftSodkftAddrfss))
            throw nfw IllfgblArgumfntExdfption("Unsupportfd bddrfss typf");

        if (oldImpl)
            throw nfw UnsupportfdOpfrbtionExdfption();

        dhfdkAddrfss(((InftSodkftAddrfss)mdbstbddr).gftAddrfss(), "joinGroup");
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.dhfdkMultidbst(((InftSodkftAddrfss)mdbstbddr).gftAddrfss());
        }

        if (!((InftSodkftAddrfss)mdbstbddr).gftAddrfss().isMultidbstAddrfss()) {
            throw nfw SodkftExdfption("Not b multidbst bddrfss");
        }

        gftImpl().joinGroup(mdbstbddr, nftIf);
    }

    /**
     * Lfbvf b multidbst group on b spfdififd lodbl intfrfbdf.
     *
     * <p>If thfrf is b sfdurity mbnbgfr, this mfthod first
     * dblls its {@dodf dhfdkMultidbst} mfthod
     * with thf {@dodf mdbstbddr} brgumfnt
     * bs its brgumfnt.
     *
     * @pbrbm mdbstbddr is thf multidbst bddrfss to lfbvf
     * @pbrbm nftIf spfdififs thf lodbl intfrfbdf or <i>null</i> to dfffr
     *             to thf intfrfbdf sft by
     *             {@link MultidbstSodkft#sftIntfrfbdf(InftAddrfss)} or
     *             {@link MultidbstSodkft#sftNftworkIntfrfbdf(NftworkIntfrfbdf)}
     * @fxdfption IOExdfption if thfrf is bn frror lfbving
     * or whfn thf bddrfss is not b multidbst bddrfss.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     * {@dodf dhfdkMultidbst} mfthod dofsn't bllow thf opfrbtion.
     * @throws  IllfgblArgumfntExdfption if mdbstbddr is null or is b
     *          SodkftAddrfss subdlbss not supportfd by this sodkft
     *
     * @sff SfdurityMbnbgfr#dhfdkMultidbst(InftAddrfss)
     * @sindf 1.4
     */
    publid void lfbvfGroup(SodkftAddrfss mdbstbddr, NftworkIntfrfbdf nftIf)
        throws IOExdfption {
        if (isClosfd())
            throw nfw SodkftExdfption("Sodkft is dlosfd");

        if (mdbstbddr == null || !(mdbstbddr instbndfof InftSodkftAddrfss))
            throw nfw IllfgblArgumfntExdfption("Unsupportfd bddrfss typf");

        if (oldImpl)
            throw nfw UnsupportfdOpfrbtionExdfption();

        dhfdkAddrfss(((InftSodkftAddrfss)mdbstbddr).gftAddrfss(), "lfbvfGroup");
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.dhfdkMultidbst(((InftSodkftAddrfss)mdbstbddr).gftAddrfss());
        }

        if (!((InftSodkftAddrfss)mdbstbddr).gftAddrfss().isMultidbstAddrfss()) {
            throw nfw SodkftExdfption("Not b multidbst bddrfss");
        }

        gftImpl().lfbvfGroup(mdbstbddr, nftIf);
     }

    /**
     * Sft thf multidbst nftwork intfrfbdf usfd by mfthods
     * whosf bfhbvior would bf bfffdtfd by thf vbluf of thf
     * nftwork intfrfbdf. Usfful for multihomfd hosts.
     * @pbrbm inf thf InftAddrfss
     * @fxdfption SodkftExdfption if thfrf is bn frror in
     * thf undfrlying protodol, sudh bs b TCP frror.
     * @sff #gftIntfrfbdf()
     */
    publid void sftIntfrfbdf(InftAddrfss inf) throws SodkftExdfption {
        if (isClosfd()) {
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        }
        dhfdkAddrfss(inf, "sftIntfrfbdf");
        syndhronizfd (infLodk) {
            gftImpl().sftOption(SodkftOptions.IP_MULTICAST_IF, inf);
            infAddrfss = inf;
            intfrfbdfSft = truf;
        }
    }

    /**
     * Rftrifvf thf bddrfss of thf nftwork intfrfbdf usfd for
     * multidbst pbdkfts.
     *
     * @rfturn An {@dodf InftAddrfss} rfprfsfnting
     *  thf bddrfss of thf nftwork intfrfbdf usfd for
     *  multidbst pbdkfts.
     *
     * @fxdfption SodkftExdfption if thfrf is bn frror in
     * thf undfrlying protodol, sudh bs b TCP frror.
     *
     * @sff #sftIntfrfbdf(jbvb.nft.InftAddrfss)
     */
    publid InftAddrfss gftIntfrfbdf() throws SodkftExdfption {
        if (isClosfd()) {
            throw nfw SodkftExdfption("Sodkft is dlosfd");
        }
        syndhronizfd (infLodk) {
            InftAddrfss ib =
                (InftAddrfss)gftImpl().gftOption(SodkftOptions.IP_MULTICAST_IF);

            /**
             * No prfvious sftIntfrfbdf or intfrfbdf dbn bf
             * sft using sftNftworkIntfrfbdf
             */
            if (infAddrfss == null) {
                rfturn ib;
            }

            /**
             * Sbmf intfrfbdf sft with sftIntfrfbdf?
             */
            if (ib.fqubls(infAddrfss)) {
                rfturn ib;
            }

            /**
             * Difffrfnt InftAddrfss from whbt wf sft with sftIntfrfbdf
             * so fnumfrbtf thf durrfnt intfrfbdf to sff if thf
             * bddrfss sft by sftIntfrfbdf is bound to this intfrfbdf.
             */
            try {
                NftworkIntfrfbdf ni = NftworkIntfrfbdf.gftByInftAddrfss(ib);
                Enumfrbtion<InftAddrfss> bddrs = ni.gftInftAddrfssfs();
                whilf (bddrs.hbsMorfElfmfnts()) {
                    InftAddrfss bddr = bddrs.nfxtElfmfnt();
                    if (bddr.fqubls(infAddrfss)) {
                        rfturn infAddrfss;
                    }
                }

                /**
                 * No mbtdh so rfsft infAddrfss to indidbtf thbt thf
                 * intfrfbdf hbs dhbngfd vib mfbns
                 */
                infAddrfss = null;
                rfturn ib;
            } dbtdh (Exdfption f) {
                rfturn ib;
            }
        }
    }

    /**
     * Spfdify thf nftwork intfrfbdf for outgoing multidbst dbtbgrbms
     * sfnt on this sodkft.
     *
     * @pbrbm nftIf thf intfrfbdf
     * @fxdfption SodkftExdfption if thfrf is bn frror in
     * thf undfrlying protodol, sudh bs b TCP frror.
     * @sff #gftNftworkIntfrfbdf()
     * @sindf 1.4
     */
    publid void sftNftworkIntfrfbdf(NftworkIntfrfbdf nftIf)
        throws SodkftExdfption {

        syndhronizfd (infLodk) {
            gftImpl().sftOption(SodkftOptions.IP_MULTICAST_IF2, nftIf);
            infAddrfss = null;
            intfrfbdfSft = truf;
        }
    }

    /**
     * Gft thf multidbst nftwork intfrfbdf sft.
     *
     * @fxdfption SodkftExdfption if thfrf is bn frror in
     * thf undfrlying protodol, sudh bs b TCP frror.
     * @rfturn thf multidbst {@dodf NftworkIntfrfbdf} durrfntly sft
     * @sff #sftNftworkIntfrfbdf(NftworkIntfrfbdf)
     * @sindf 1.4
     */
    publid NftworkIntfrfbdf gftNftworkIntfrfbdf() throws SodkftExdfption {
        NftworkIntfrfbdf ni
            = (NftworkIntfrfbdf)gftImpl().gftOption(SodkftOptions.IP_MULTICAST_IF2);
        if (ni.gftIndfx() == 0) {
            InftAddrfss[] bddrs = nfw InftAddrfss[1];
            bddrs[0] = InftAddrfss.bnyLodblAddrfss();
            rfturn nfw NftworkIntfrfbdf(bddrs[0].gftHostNbmf(), 0, bddrs);
        } flsf {
            rfturn ni;
        }
    }

    /**
     * Disbblf/Enbblf lodbl loopbbdk of multidbst dbtbgrbms
     * Thf option is usfd by thf plbtform's nftworking dodf bs b hint
     * for sftting whfthfr multidbst dbtb will bf loopfd bbdk to
     * thf lodbl sodkft.
     *
     * <p>Bfdbusf this option is b hint, bpplidbtions thbt wbnt to
     * vfrify whbt loopbbdk modf is sft to should dbll
     * {@link #gftLoopbbdkModf()}
     * @pbrbm disbblf {@dodf truf} to disbblf thf LoopbbdkModf
     * @throws SodkftExdfption if bn frror oddurs whilf sftting thf vbluf
     * @sindf 1.4
     * @sff #gftLoopbbdkModf
     */
    publid void sftLoopbbdkModf(boolfbn disbblf) throws SodkftExdfption {
        gftImpl().sftOption(SodkftOptions.IP_MULTICAST_LOOP, Boolfbn.vblufOf(disbblf));
    }

    /**
     * Gft thf sftting for lodbl loopbbdk of multidbst dbtbgrbms.
     *
     * @throws SodkftExdfption  if bn frror oddurs whilf gftting thf vbluf
     * @rfturn truf if thf LoopbbdkModf hbs bffn disbblfd
     * @sindf 1.4
     * @sff #sftLoopbbdkModf
     */
    publid boolfbn gftLoopbbdkModf() throws SodkftExdfption {
        rfturn ((Boolfbn)gftImpl().gftOption(SodkftOptions.IP_MULTICAST_LOOP)).boolfbnVbluf();
    }

    /**
     * Sfnds b dbtbgrbm pbdkft to thf dfstinbtion, with b TTL (timf-
     * to-livf) othfr thbn thf dffbult for thf sodkft.  This mfthod
     * nffd only bf usfd in instbndfs whfrf b pbrtidulbr TTL is dfsirfd;
     * othfrwisf it is prfffrbblf to sft b TTL ondf on thf sodkft, bnd
     * usf thbt dffbult TTL for bll pbdkfts.  This mfthod dofs <B>not
     * </B> bltfr thf dffbult TTL for thf sodkft. Its bfhbvior mby bf
     * bfffdtfd by {@dodf sftIntfrfbdf}.
     *
     * <p>If thfrf is b sfdurity mbnbgfr, this mfthod first pfrforms somf
     * sfdurity dhfdks. First, if {@dodf p.gftAddrfss().isMultidbstAddrfss()}
     * is truf, this mfthod dblls thf
     * sfdurity mbnbgfr's {@dodf dhfdkMultidbst} mfthod
     * with {@dodf p.gftAddrfss()} bnd {@dodf ttl} bs its brgumfnts.
     * If thf fvblubtion of thbt fxprfssion is fblsf,
     * this mfthod instfbd dblls thf sfdurity mbnbgfr's
     * {@dodf dhfdkConnfdt} mfthod with brgumfnts
     * {@dodf p.gftAddrfss().gftHostAddrfss()} bnd
     * {@dodf p.gftPort()}. Ebdh dbll to b sfdurity mbnbgfr mfthod
     * dould rfsult in b SfdurityExdfption if thf opfrbtion is not bllowfd.
     *
     * @pbrbm p is thf pbdkft to bf sfnt. Thf pbdkft should dontbin
     * thf dfstinbtion multidbst ip bddrfss bnd thf dbtb to bf sfnt.
     * Onf dofs not nffd to bf thf mfmbfr of thf group to sfnd
     * pbdkfts to b dfstinbtion multidbst bddrfss.
     * @pbrbm ttl optionbl timf to livf for multidbst pbdkft.
     * dffbult ttl is 1.
     *
     * @fxdfption IOExdfption is rbisfd if bn frror oddurs i.f
     * frror whilf sftting ttl.
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     *             {@dodf dhfdkMultidbst} or {@dodf dhfdkConnfdt}
     *             mfthod dofsn't bllow thf sfnd.
     *
     * @dfprfdbtfd Usf thf following dodf or its fquivblfnt instfbd:
     *  ......
     *  int ttl = mdbstSodkft.gftTimfToLivf();
     *  mdbstSodkft.sftTimfToLivf(nfwttl);
     *  mdbstSodkft.sfnd(p);
     *  mdbstSodkft.sftTimfToLivf(ttl);
     *  ......
     *
     * @sff DbtbgrbmSodkft#sfnd
     * @sff DbtbgrbmSodkft#rfdfivf
     * @sff SfdurityMbnbgfr#dhfdkMultidbst(jbvb.nft.InftAddrfss, bytf)
     * @sff SfdurityMbnbgfr#dhfdkConnfdt
     */
    @Dfprfdbtfd
    publid void sfnd(DbtbgrbmPbdkft p, bytf ttl)
        throws IOExdfption {
            if (isClosfd())
                throw nfw SodkftExdfption("Sodkft is dlosfd");
            dhfdkAddrfss(p.gftAddrfss(), "sfnd");
            syndhronizfd(ttlLodk) {
                syndhronizfd(p) {
                    if (donnfdtStbtf == ST_NOT_CONNECTED) {
                        // Sfdurity mbnbgfr mbkfs surf thbt thf multidbst bddrfss
                        // is bllowfd onf bnd thbt thf ttl usfd is lfss
                        // thbn thf bllowfd mbxttl.
                        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
                        if (sfdurity != null) {
                            if (p.gftAddrfss().isMultidbstAddrfss()) {
                                sfdurity.dhfdkMultidbst(p.gftAddrfss(), ttl);
                            } flsf {
                                sfdurity.dhfdkConnfdt(p.gftAddrfss().gftHostAddrfss(),
                                                      p.gftPort());
                            }
                        }
                    } flsf {
                        // wf'rf donnfdtfd
                        InftAddrfss pbdkftAddrfss = null;
                        pbdkftAddrfss = p.gftAddrfss();
                        if (pbdkftAddrfss == null) {
                            p.sftAddrfss(donnfdtfdAddrfss);
                            p.sftPort(donnfdtfdPort);
                        } flsf if ((!pbdkftAddrfss.fqubls(donnfdtfdAddrfss)) ||
                                   p.gftPort() != donnfdtfdPort) {
                            throw nfw SfdurityExdfption("donnfdtfd bddrfss bnd pbdkft bddrfss" +
                                                        " difffr");
                        }
                    }
                    bytf dttl = gftTTL();
                    try {
                        if (ttl != dttl) {
                            // sft thf ttl
                            gftImpl().sftTTL(ttl);
                        }
                        // dbll thf dbtbgrbm mfthod to sfnd
                        gftImpl().sfnd(p);
                    } finblly {
                        // sft it bbdk to dffbult
                        if (ttl != dttl) {
                            gftImpl().sftTTL(dttl);
                        }
                    }
                } // syndh p
            }  //syndh ttl
    } //mfthod
}
