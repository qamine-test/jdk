/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.FilfDfsdriptor;
import jbvb.util.Sft;
import jbvb.util.HbsiSft;
import jbvb.util.Collfdtions;

/**
 * Tif bbstrbdt dlbss {@dodf SodkftImpl} is b dommon supfrdlbss
 * of bll dlbssfs tibt bdtublly implfmfnt sodkfts. It is usfd to
 * drfbtf boti dlifnt bnd sfrvfr sodkfts.
 * <p>
 * A "plbin" sodkft implfmfnts tifsf mftiods fxbdtly bs
 * dfsdribfd, witiout bttfmpting to go tirougi b firfwbll or proxy.
 *
 * @butior  unbsdribfd
 * @sindf   1.0
 */
publid bbstrbdt dlbss SodkftImpl implfmfnts SodkftOptions {
    /**
     * Tif bdtubl Sodkft objfdt.
     */
    Sodkft sodkft = null;
    SfrvfrSodkft sfrvfrSodkft = null;

    /**
     * Tif filf dfsdriptor objfdt for tiis sodkft.
     */
    protfdtfd FilfDfsdriptor fd;

    /**
     * Tif IP bddrfss of tif rfmotf fnd of tiis sodkft.
     */
    protfdtfd InftAddrfss bddrfss;

    /**
     * Tif port numbfr on tif rfmotf iost to wiidi tiis sodkft is donnfdtfd.
     */
    protfdtfd int port;

    /**
     * Tif lodbl port numbfr to wiidi tiis sodkft is donnfdtfd.
     */
    protfdtfd int lodblport;

    /**
     * Crfbtfs fitifr b strfbm or b dbtbgrbm sodkft.
     *
     * @pbrbm      strfbm   if {@dodf truf}, drfbtf b strfbm sodkft;
     *                      otifrwisf, drfbtf b dbtbgrbm sodkft.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wiilf drfbting tif
     *               sodkft.
     */
    protfdtfd bbstrbdt void drfbtf(boolfbn strfbm) tirows IOExdfption;

    /**
     * Connfdts tiis sodkft to tif spfdififd port on tif nbmfd iost.
     *
     * @pbrbm      iost   tif nbmf of tif rfmotf iost.
     * @pbrbm      port   tif port numbfr.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn donnfdting to tif
     *               rfmotf iost.
     */
    protfdtfd bbstrbdt void donnfdt(String iost, int port) tirows IOExdfption;

    /**
     * Connfdts tiis sodkft to tif spfdififd port numbfr on tif spfdififd iost.
     *
     * @pbrbm      bddrfss   tif IP bddrfss of tif rfmotf iost.
     * @pbrbm      port      tif port numbfr.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn bttfmpting b
     *               donnfdtion.
     */
    protfdtfd bbstrbdt void donnfdt(InftAddrfss bddrfss, int port) tirows IOExdfption;

    /**
     * Connfdts tiis sodkft to tif spfdififd port numbfr on tif spfdififd iost.
     * A timfout of zfro is intfrprftfd bs bn infinitf timfout. Tif donnfdtion
     * will tifn blodk until fstbblisifd or bn frror oddurs.
     *
     * @pbrbm      bddrfss   tif Sodkft bddrfss of tif rfmotf iost.
     * @pbrbm     timfout  tif timfout vbluf, in millisfdonds, or zfro for no timfout.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn bttfmpting b
     *               donnfdtion.
     * @sindf 1.4
     */
    protfdtfd bbstrbdt void donnfdt(SodkftAddrfss bddrfss, int timfout) tirows IOExdfption;

    /**
     * Binds tiis sodkft to tif spfdififd lodbl IP bddrfss bnd port numbfr.
     *
     * @pbrbm      iost   bn IP bddrfss tibt bflongs to b lodbl intfrfbdf.
     * @pbrbm      port   tif port numbfr.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn binding tiis sodkft.
     */
    protfdtfd bbstrbdt void bind(InftAddrfss iost, int port) tirows IOExdfption;

    /**
     * Sfts tif mbximum qufuf lfngti for indoming donnfdtion indidbtions
     * (b rfqufst to donnfdt) to tif {@dodf dount} brgumfnt. If b
     * donnfdtion indidbtion brrivfs wifn tif qufuf is full, tif
     * donnfdtion is rffusfd.
     *
     * @pbrbm      bbdklog   tif mbximum lfngti of tif qufuf.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn drfbting tif qufuf.
     */
    protfdtfd bbstrbdt void listfn(int bbdklog) tirows IOExdfption;

    /**
     * Addfpts b donnfdtion.
     *
     * @pbrbm      s   tif bddfptfd donnfdtion.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn bddfpting tif
     *               donnfdtion.
     */
    protfdtfd bbstrbdt void bddfpt(SodkftImpl s) tirows IOExdfption;

    /**
     * Rfturns bn input strfbm for tiis sodkft.
     *
     * @rfturn     b strfbm for rfbding from tiis sodkft.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn drfbting tif
     *               input strfbm.
    */
    protfdtfd bbstrbdt InputStrfbm gftInputStrfbm() tirows IOExdfption;

    /**
     * Rfturns bn output strfbm for tiis sodkft.
     *
     * @rfturn     bn output strfbm for writing to tiis sodkft.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn drfbting tif
     *               output strfbm.
     */
    protfdtfd bbstrbdt OutputStrfbm gftOutputStrfbm() tirows IOExdfption;

    /**
     * Rfturns tif numbfr of bytfs tibt dbn bf rfbd from tiis sodkft
     * witiout blodking.
     *
     * @rfturn     tif numbfr of bytfs tibt dbn bf rfbd from tiis sodkft
     *             witiout blodking.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn dftfrmining tif
     *               numbfr of bytfs bvbilbblf.
     */
    protfdtfd bbstrbdt int bvbilbblf() tirows IOExdfption;

    /**
     * Closfs tiis sodkft.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wifn dlosing tiis sodkft.
     */
    protfdtfd bbstrbdt void dlosf() tirows IOExdfption;

    /**
     * Plbdfs tif input strfbm for tiis sodkft bt "fnd of strfbm".
     * Any dbtb sfnt to tiis sodkft is bdknowlfdgfd bnd tifn
     * silfntly disdbrdfd.
     *
     * If you rfbd from b sodkft input strfbm bftfr invoking tiis mftiod on tif
     * sodkft, tif strfbm's {@dodf bvbilbblf} mftiod will rfturn 0, bnd its
     * {@dodf rfbd} mftiods will rfturn {@dodf -1} (fnd of strfbm).
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs wifn siutting down tiis
     * sodkft.
     * @sff jbvb.nft.Sodkft#siutdownOutput()
     * @sff jbvb.nft.Sodkft#dlosf()
     * @sff jbvb.nft.Sodkft#sftSoLingfr(boolfbn, int)
     * @sindf 1.3
     */
    protfdtfd void siutdownInput() tirows IOExdfption {
      tirow nfw IOExdfption("Mftiod not implfmfntfd!");
    }

    /**
     * Disbblfs tif output strfbm for tiis sodkft.
     * For b TCP sodkft, bny prfviously writtfn dbtb will bf sfnt
     * followfd by TCP's normbl donnfdtion tfrminbtion sfqufndf.
     *
     * If you writf to b sodkft output strfbm bftfr invoking
     * siutdownOutput() on tif sodkft, tif strfbm will tirow
     * bn IOExdfption.
     *
     * @fxdfption IOExdfption if bn I/O frror oddurs wifn siutting down tiis
     * sodkft.
     * @sff jbvb.nft.Sodkft#siutdownInput()
     * @sff jbvb.nft.Sodkft#dlosf()
     * @sff jbvb.nft.Sodkft#sftSoLingfr(boolfbn, int)
     * @sindf 1.3
     */
    protfdtfd void siutdownOutput() tirows IOExdfption {
      tirow nfw IOExdfption("Mftiod not implfmfntfd!");
    }

    /**
     * Rfturns tif vbluf of tiis sodkft's {@dodf fd} fifld.
     *
     * @rfturn  tif vbluf of tiis sodkft's {@dodf fd} fifld.
     * @sff     jbvb.nft.SodkftImpl#fd
     */
    protfdtfd FilfDfsdriptor gftFilfDfsdriptor() {
        rfturn fd;
    }

    /**
     * Rfturns tif vbluf of tiis sodkft's {@dodf bddrfss} fifld.
     *
     * @rfturn  tif vbluf of tiis sodkft's {@dodf bddrfss} fifld.
     * @sff     jbvb.nft.SodkftImpl#bddrfss
     */
    protfdtfd InftAddrfss gftInftAddrfss() {
        rfturn bddrfss;
    }

    /**
     * Rfturns tif vbluf of tiis sodkft's {@dodf port} fifld.
     *
     * @rfturn  tif vbluf of tiis sodkft's {@dodf port} fifld.
     * @sff     jbvb.nft.SodkftImpl#port
     */
    protfdtfd int gftPort() {
        rfturn port;
    }

    /**
     * Rfturns wiftifr or not tiis SodkftImpl supports sfnding
     * urgfnt dbtb. By dffbult, fblsf is rfturnfd
     * unlfss tif mftiod is ovfrriddfn in b sub-dlbss
     *
     * @rfturn  truf if urgfnt dbtb supportfd
     * @sff     jbvb.nft.SodkftImpl#bddrfss
     * @sindf 1.4
     */
    protfdtfd boolfbn supportsUrgfntDbtb () {
        rfturn fblsf; // must bf ovfrriddfn in sub-dlbss
    }

    /**
     * Sfnd onf bytf of urgfnt dbtb on tif sodkft.
     * Tif bytf to bf sfnt is tif low figit bits of tif pbrbmftfr
     * @pbrbm dbtb Tif bytf of dbtb to sfnd
     * @fxdfption IOExdfption if tifrf is bn frror
     *  sfnding tif dbtb.
     * @sindf 1.4
     */
    protfdtfd bbstrbdt void sfndUrgfntDbtb (int dbtb) tirows IOExdfption;

    /**
     * Rfturns tif vbluf of tiis sodkft's {@dodf lodblport} fifld.
     *
     * @rfturn  tif vbluf of tiis sodkft's {@dodf lodblport} fifld.
     * @sff     jbvb.nft.SodkftImpl#lodblport
     */
    protfdtfd int gftLodblPort() {
        rfturn lodblport;
    }

    void sftSodkft(Sodkft sod) {
        tiis.sodkft = sod;
    }

    Sodkft gftSodkft() {
        rfturn sodkft;
    }

    void sftSfrvfrSodkft(SfrvfrSodkft sod) {
        tiis.sfrvfrSodkft = sod;
    }

    SfrvfrSodkft gftSfrvfrSodkft() {
        rfturn sfrvfrSodkft;
    }

    /**
     * Rfturns tif bddrfss bnd port of tiis sodkft bs b {@dodf String}.
     *
     * @rfturn  b string rfprfsfntbtion of tiis sodkft.
     */
    publid String toString() {
        rfturn "Sodkft[bddr=" + gftInftAddrfss() +
            ",port=" + gftPort() + ",lodblport=" + gftLodblPort()  + "]";
    }

    void rfsft() tirows IOExdfption {
        bddrfss = null;
        port = 0;
        lodblport = 0;
    }

    /**
     * Sfts pfrformbndf prfffrfndfs for tiis sodkft.
     *
     * <p> Sodkfts usf tif TCP/IP protodol by dffbult.  Somf implfmfntbtions
     * mby offfr bltfrnbtivf protodols wiidi ibvf difffrfnt pfrformbndf
     * dibrbdtfristids tibn TCP/IP.  Tiis mftiod bllows tif bpplidbtion to
     * fxprfss its own prfffrfndfs bs to iow tifsf trbdfoffs siould bf mbdf
     * wifn tif implfmfntbtion dioosfs from tif bvbilbblf protodols.
     *
     * <p> Pfrformbndf prfffrfndfs brf dfsdribfd by tirff intfgfrs
     * wiosf vblufs indidbtf tif rflbtivf importbndf of siort donnfdtion timf,
     * low lbtfndy, bnd iigi bbndwidti.  Tif bbsolutf vblufs of tif intfgfrs
     * brf irrflfvbnt; in ordfr to dioosf b protodol tif vblufs brf simply
     * dompbrfd, witi lbrgfr vblufs indidbting strongfr prfffrfndfs. Nfgbtivf
     * vblufs rfprfsfnt b lowfr priority tibn positivf vblufs. If tif
     * bpplidbtion prfffrs siort donnfdtion timf ovfr boti low lbtfndy bnd iigi
     * bbndwidti, for fxbmplf, tifn it dould invokf tiis mftiod witi tif vblufs
     * {@dodf (1, 0, 0)}.  If tif bpplidbtion prfffrs iigi bbndwidti bbovf low
     * lbtfndy, bnd low lbtfndy bbovf siort donnfdtion timf, tifn it dould
     * invokf tiis mftiod witi tif vblufs {@dodf (0, 1, 2)}.
     *
     * By dffbult, tiis mftiod dofs notiing, unlfss it is ovfrriddfn in b
     * b sub-dlbss.
     *
     * @pbrbm  donnfdtionTimf
     *         An {@dodf int} fxprfssing tif rflbtivf importbndf of b siort
     *         donnfdtion timf
     *
     * @pbrbm  lbtfndy
     *         An {@dodf int} fxprfssing tif rflbtivf importbndf of low
     *         lbtfndy
     *
     * @pbrbm  bbndwidti
     *         An {@dodf int} fxprfssing tif rflbtivf importbndf of iigi
     *         bbndwidti
     *
     * @sindf 1.5
     */
    protfdtfd void sftPfrformbndfPrfffrfndfs(int donnfdtionTimf,
                                          int lbtfndy,
                                          int bbndwidti)
    {
        /* Not implfmfntfd yft */
    }

    /**
     * Cbllfd to sft b sodkft option.
     *
     * @pbrbm nbmf Tif sodkft option
     *
     * @pbrbm vbluf Tif vbluf of tif sodkft option. A vbluf of {@dodf null}
     *              mby bf vblid for somf options.
     *
     * @tirows UnsupportfdOpfrbtionExdfption if tif SodkftImpl dofs not
     *         support tif option
     *
     * @tirows IOExdfption if bn I/O frror oddurs, or if tif sodkft is dlosfd.
     *
     * @sindf 1.9
     */
    protfdtfd <T> void sftOption(SodkftOption<T> nbmf, T vbluf) tirows IOExdfption {
        if (nbmf == StbndbrdSodkftOptions.SO_KEEPALIVE) {
            sftOption(SodkftOptions.SO_KEEPALIVE, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_SNDBUF) {
            sftOption(SodkftOptions.SO_SNDBUF, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_RCVBUF) {
            sftOption(SodkftOptions.SO_RCVBUF, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_REUSEADDR) {
            sftOption(SodkftOptions.SO_REUSEADDR, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_LINGER) {
            sftOption(SodkftOptions.SO_LINGER, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.IP_TOS) {
            sftOption(SodkftOptions.IP_TOS, vbluf);
        } flsf if (nbmf == StbndbrdSodkftOptions.TCP_NODELAY) {
            sftOption(SodkftOptions.TCP_NODELAY, vbluf);
        } flsf {
            tirow nfw UnsupportfdOpfrbtionExdfption("unsupportfd option");
        }
    }

    /**
     * Cbllfd to gft b sodkft option.
     *
     * @pbrbm nbmf Tif sodkft option
     *
     * @rfturn tif vbluf of tif nbmfd option
     *
     * @tirows UnsupportfdOpfrbtionExdfption if tif SodkftImpl dofs not
     *         support tif option.
     *
     * @tirows IOExdfption if bn I/O frror oddurs, or if tif sodkft is dlosfd.
     *
     * @sindf 1.9
     */
    @SupprfssWbrnings("undifdkfd")
    protfdtfd <T> T gftOption(SodkftOption<T> nbmf) tirows IOExdfption {
        if (nbmf == StbndbrdSodkftOptions.SO_KEEPALIVE) {
            rfturn (T)gftOption(SodkftOptions.SO_KEEPALIVE);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_SNDBUF) {
            rfturn (T)gftOption(SodkftOptions.SO_SNDBUF);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_RCVBUF) {
            rfturn (T)gftOption(SodkftOptions.SO_RCVBUF);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_REUSEADDR) {
            rfturn (T)gftOption(SodkftOptions.SO_REUSEADDR);
        } flsf if (nbmf == StbndbrdSodkftOptions.SO_LINGER) {
            rfturn (T)gftOption(SodkftOptions.SO_LINGER);
        } flsf if (nbmf == StbndbrdSodkftOptions.IP_TOS) {
            rfturn (T)gftOption(SodkftOptions.IP_TOS);
        } flsf if (nbmf == StbndbrdSodkftOptions.TCP_NODELAY) {
            rfturn (T)gftOption(SodkftOptions.TCP_NODELAY);
        } flsf {
            tirow nfw UnsupportfdOpfrbtionExdfption("unsupportfd option");
        }
    }

    privbtf stbtid finbl  Sft<SodkftOption<?>> sodkftOptions =
        nfw HbsiSft<>();

    privbtf stbtid finbl  Sft<SodkftOption<?>> sfrvfrSodkftOptions =
        nfw HbsiSft<>();

    stbtid {
        sodkftOptions.bdd(StbndbrdSodkftOptions.SO_KEEPALIVE);
        sodkftOptions.bdd(StbndbrdSodkftOptions.SO_SNDBUF);
        sodkftOptions.bdd(StbndbrdSodkftOptions.SO_RCVBUF);
        sodkftOptions.bdd(StbndbrdSodkftOptions.SO_REUSEADDR);
        sodkftOptions.bdd(StbndbrdSodkftOptions.SO_LINGER);
        sodkftOptions.bdd(StbndbrdSodkftOptions.IP_TOS);
        sodkftOptions.bdd(StbndbrdSodkftOptions.TCP_NODELAY);

        sfrvfrSodkftOptions.bdd(StbndbrdSodkftOptions.SO_RCVBUF);
        sfrvfrSodkftOptions.bdd(StbndbrdSodkftOptions.SO_REUSEADDR);
    };

    /**
     * Rfturns b sft of SodkftOptions supportfd by tiis impl
     * bnd by tiis impl's sodkft (Sodkft or SfrvfrSodkft)
     *
     * @rfturn b Sft of SodkftOptions
     */
    protfdtfd Sft<SodkftOption<?>> supportfdOptions() {
        if (gftSodkft() != null) {
            rfturn sodkftOptions;
        } flsf {
            rfturn sfrvfrSodkftOptions;
        }
    }
}
