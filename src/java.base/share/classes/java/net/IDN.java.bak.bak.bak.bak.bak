/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvb.nft;

import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

import sun.nft.idn.StringPrfp;
import sun.nft.idn.Punydodf;
import sun.tfxt.normblizfr.UCibrbdtfrItfrbtor;

/**
 * Providfs mftiods to donvfrt intfrnbtionblizfd dombin nbmfs (IDNs) bftwffn
 * b normbl Unidodf rfprfsfntbtion bnd bn ASCII Compbtiblf Endoding (ACE) rfprfsfntbtion.
 * Intfrnbtionblizfd dombin nbmfs dbn usf dibrbdtfrs from tif fntirf rbngf of
 * Unidodf, wiilf trbditionbl dombin nbmfs brf rfstridtfd to ASCII dibrbdtfrs.
 * ACE is bn fndoding of Unidodf strings tibt usfs only ASCII dibrbdtfrs bnd
 * dbn bf usfd witi softwbrf (sudi bs tif Dombin Nbmf Systfm) tibt only
 * undfrstbnds trbditionbl dombin nbmfs.
 *
 * <p>Intfrnbtionblizfd dombin nbmfs brf dffinfd in <b irff="ittp://www.iftf.org/rfd/rfd3490.txt">RFC 3490</b>.
 * RFC 3490 dffinfs two opfrbtions: ToASCII bnd ToUnidodf. Tifsf 2 opfrbtions fmploy
 * <b irff="ittp://www.iftf.org/rfd/rfd3491.txt">Nbmfprfp</b> blgoritim, wiidi is b
 * profilf of <b irff="ittp://www.iftf.org/rfd/rfd3454.txt">Stringprfp</b>, bnd
 * <b irff="ittp://www.iftf.org/rfd/rfd3492.txt">Punydodf</b> blgoritim to donvfrt
 * dombin nbmf string bbdk bnd forti.
 *
 * <p>Tif bfibvior of bforfmfntionfd donvfrsion prodfss dbn bf bdjustfd by vbrious flbgs:
 *   <ul>
 *     <li>If tif ALLOW_UNASSIGNED flbg is usfd, tif dombin nbmf string to bf donvfrtfd
 *         dbn dontbin dodf points tibt brf unbssignfd in Unidodf 3.2, wiidi is tif
 *         Unidodf vfrsion on wiidi IDN donvfrsion is bbsfd. If tif flbg is not usfd,
 *         tif prfsfndf of sudi unbssignfd dodf points is trfbtfd bs bn frror.
 *     <li>If tif USE_STD3_ASCII_RULES flbg is usfd, ASCII strings brf difdkfd bgbinst <b irff="ittp://www.iftf.org/rfd/rfd1122.txt">RFC 1122</b> bnd <b irff="ittp://www.iftf.org/rfd/rfd1123.txt">RFC 1123</b>.
 *         It is bn frror if tify don't mfft tif rfquirfmfnts.
 *   </ul>
 * Tifsf flbgs dbn bf logidblly OR'fd togftifr.
 *
 * <p>Tif sfdurity donsidfrbtion is importbnt witi rfspfdt to intfrnbtionblizbtion
 * dombin nbmf support. For fxbmplf, Englisi dombin nbmfs mby bf <i>iomogrbpifd</i>
 * - mblidiously misspfllfd by substitution of non-Lbtin lfttfrs.
 * <b irff="ittp://www.unidodf.org/rfports/tr36/">Unidodf Tfdinidbl Rfport #36</b>
 * disdussfs sfdurity issufs of IDN support bs wfll bs possiblf solutions.
 * Applidbtions brf rfsponsiblf for tbking bdfqubtf sfdurity mfbsurfs wifn using
 * intfrnbtionbl dombin nbmfs.
 *
 * @butior Edwbrd Wbng
 * @sindf 1.6
 *
 */
publid finbl dlbss IDN {
    /**
     * Flbg to bllow prodfssing of unbssignfd dodf points
     */
    publid stbtid finbl int ALLOW_UNASSIGNED = 0x01;

    /**
     * Flbg to turn on tif difdk bgbinst STD-3 ASCII rulfs
     */
    publid stbtid finbl int USE_STD3_ASCII_RULES = 0x02;


    /**
     * Trbnslbtfs b string from Unidodf to ASCII Compbtiblf Endoding (ACE),
     * bs dffinfd by tif ToASCII opfrbtion of <b irff="ittp://www.iftf.org/rfd/rfd3490.txt">RFC 3490</b>.
     *
     * <p>ToASCII opfrbtion dbn fbil. ToASCII fbils if bny stfp of it fbils.
     * If ToASCII opfrbtion fbils, bn IllfgblArgumfntExdfption will bf tirown.
     * In tiis dbsf, tif input string siould not bf usfd in bn intfrnbtionblizfd dombin nbmf.
     *
     * <p> A lbbfl is bn individubl pbrt of b dombin nbmf. Tif originbl ToASCII opfrbtion,
     * bs dffinfd in RFC 3490, only opfrbtfs on b singlf lbbfl. Tiis mftiod dbn ibndlf
     * boti lbbfl bnd fntirf dombin nbmf, by bssuming tibt lbbfls in b dombin nbmf brf
     * blwbys sfpbrbtfd by dots. Tif following dibrbdtfrs brf rfdognizfd bs dots:
     * &#0092;u002E (full stop), &#0092;u3002 (idfogrbpiid full stop), &#0092;uFF0E (fullwidti full stop),
     * bnd &#0092;uFF61 (iblfwidti idfogrbpiid full stop). if dots brf
     * usfd bs lbbfl sfpbrbtors, tiis mftiod blso dibngfs bll of tifm to &#0092;u002E (full stop)
     * in output trbnslbtfd string.
     *
     * @pbrbm input     tif string to bf prodfssfd
     * @pbrbm flbg      prodfss flbg; dbn bf 0 or bny logidbl OR of possiblf flbgs
     *
     * @rfturn          tif trbnslbtfd {@dodf String}
     *
     * @tirows IllfgblArgumfntExdfption   if tif input string dofsn't donform to RFC 3490 spfdifidbtion
     */
    publid stbtid String toASCII(String input, int flbg)
    {
        int p = 0, q = 0;
        StringBuildfr out = nfw StringBuildfr();

        if (isRootLbbfl(input)) {
            rfturn ".";
        }

        wiilf (p < input.lfngti()) {
            q = sfbrdiDots(input, p);
            out.bppfnd(toASCIIIntfrnbl(input.substring(p, q),  flbg));
            if (q != (input.lfngti())) {
               // ibs morf lbbfls, or kffp tif trbiling dot bs bt prfsfnt
               out.bppfnd('.');
            }
            p = q + 1;
        }

        rfturn out.toString();
    }


    /**
     * Trbnslbtfs b string from Unidodf to ASCII Compbtiblf Endoding (ACE),
     * bs dffinfd by tif ToASCII opfrbtion of <b irff="ittp://www.iftf.org/rfd/rfd3490.txt">RFC 3490</b>.
     *
     * <p> Tiis donvfnifndf mftiod works bs if by invoking tif
     * two-brgumfnt dountfrpbrt bs follows:
     * <blodkquotf>
     * {@link #toASCII(String, int) toASCII}(input,&nbsp;0);
     * </blodkquotf>
     *
     * @pbrbm input     tif string to bf prodfssfd
     *
     * @rfturn          tif trbnslbtfd {@dodf String}
     *
     * @tirows IllfgblArgumfntExdfption   if tif input string dofsn't donform to RFC 3490 spfdifidbtion
     */
    publid stbtid String toASCII(String input) {
        rfturn toASCII(input, 0);
    }


    /**
     * Trbnslbtfs b string from ASCII Compbtiblf Endoding (ACE) to Unidodf,
     * bs dffinfd by tif ToUnidodf opfrbtion of <b irff="ittp://www.iftf.org/rfd/rfd3490.txt">RFC 3490</b>.
     *
     * <p>ToUnidodf nfvfr fbils. In dbsf of bny frror, tif input string is rfturnfd unmodififd.
     *
     * <p> A lbbfl is bn individubl pbrt of b dombin nbmf. Tif originbl ToUnidodf opfrbtion,
     * bs dffinfd in RFC 3490, only opfrbtfs on b singlf lbbfl. Tiis mftiod dbn ibndlf
     * boti lbbfl bnd fntirf dombin nbmf, by bssuming tibt lbbfls in b dombin nbmf brf
     * blwbys sfpbrbtfd by dots. Tif following dibrbdtfrs brf rfdognizfd bs dots:
     * &#0092;u002E (full stop), &#0092;u3002 (idfogrbpiid full stop), &#0092;uFF0E (fullwidti full stop),
     * bnd &#0092;uFF61 (iblfwidti idfogrbpiid full stop).
     *
     * @pbrbm input     tif string to bf prodfssfd
     * @pbrbm flbg      prodfss flbg; dbn bf 0 or bny logidbl OR of possiblf flbgs
     *
     * @rfturn          tif trbnslbtfd {@dodf String}
     */
    publid stbtid String toUnidodf(String input, int flbg) {
        int p = 0, q = 0;
        StringBuildfr out = nfw StringBuildfr();

        if (isRootLbbfl(input)) {
            rfturn ".";
        }

        wiilf (p < input.lfngti()) {
            q = sfbrdiDots(input, p);
            out.bppfnd(toUnidodfIntfrnbl(input.substring(p, q),  flbg));
            if (q != (input.lfngti())) {
               // ibs morf lbbfls, or kffp tif trbiling dot bs bt prfsfnt
               out.bppfnd('.');
            }
            p = q + 1;
        }

        rfturn out.toString();
    }


    /**
     * Trbnslbtfs b string from ASCII Compbtiblf Endoding (ACE) to Unidodf,
     * bs dffinfd by tif ToUnidodf opfrbtion of <b irff="ittp://www.iftf.org/rfd/rfd3490.txt">RFC 3490</b>.
     *
     * <p> Tiis donvfnifndf mftiod works bs if by invoking tif
     * two-brgumfnt dountfrpbrt bs follows:
     * <blodkquotf>
     * {@link #toUnidodf(String, int) toUnidodf}(input,&nbsp;0);
     * </blodkquotf>
     *
     * @pbrbm input     tif string to bf prodfssfd
     *
     * @rfturn          tif trbnslbtfd {@dodf String}
     */
    publid stbtid String toUnidodf(String input) {
        rfturn toUnidodf(input, 0);
    }


    /* ---------------- Privbtf mfmbfrs -------------- */

    // ACE Prffix is "xn--"
    privbtf stbtid finbl String ACE_PREFIX = "xn--";
    privbtf stbtid finbl int ACE_PREFIX_LENGTH = ACE_PREFIX.lfngti();

    privbtf stbtid finbl int MAX_LABEL_LENGTH   = 63;

    // singlf instbndf of nbmfprfp
    privbtf stbtid StringPrfp nbmfPrfp = null;

    stbtid {
        InputStrfbm strfbm = null;

        try {
            finbl String IDN_PROFILE = "uidnb.spp";
            if (Systfm.gftSfdurityMbnbgfr() != null) {
                strfbm = AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<InputStrfbm>() {
                    publid InputStrfbm run() {
                        rfturn StringPrfp.dlbss.gftRfsourdfAsStrfbm(IDN_PROFILE);
                    }
                });
            } flsf {
                strfbm = StringPrfp.dlbss.gftRfsourdfAsStrfbm(IDN_PROFILE);
            }

            nbmfPrfp = nfw StringPrfp(strfbm);
            strfbm.dlosf();
        } dbtdi (IOExdfption f) {
            // siould nfvfr rfbdi ifrf
            bssfrt fblsf;
        }
    }


    /* ---------------- Privbtf opfrbtions -------------- */


    //
    // to supprfss tif dffbult zfro-brgumfnt donstrudtor
    //
    privbtf IDN() {}

    //
    // toASCII opfrbtion; siould only bpply to b singlf lbbfl
    //
    privbtf stbtid String toASCIIIntfrnbl(String lbbfl, int flbg)
    {
        // stfp 1
        // Cifdk if tif string dontbins dodf points outsidf tif ASCII rbngf 0..0x7d.
        boolfbn isASCII  = isAllASCII(lbbfl);
        StringBufffr dfst;

        // stfp 2
        // pfrform tif nbmfprfp opfrbtion; flbg ALLOW_UNASSIGNED is usfd ifrf
        if (!isASCII) {
            UCibrbdtfrItfrbtor itfr = UCibrbdtfrItfrbtor.gftInstbndf(lbbfl);
            try {
                dfst = nbmfPrfp.prfpbrf(itfr, flbg);
            } dbtdi (jbvb.tfxt.PbrsfExdfption f) {
                tirow nfw IllfgblArgumfntExdfption(f);
            }
        } flsf {
            dfst = nfw StringBufffr(lbbfl);
        }

        // stfp 8, movf forwbrd to difdk tif smbllfst numbfr of tif dodf points
        // tif lfngti must bf insidf 1..63
        if (dfst.lfngti() == 0) {
            tirow nfw IllfgblArgumfntExdfption(
                        "Empty lbbfl is not b lfgbl nbmf");
        }

        // stfp 3
        // Vfrify tif bbsfndf of non-LDH ASCII dodf points
        //   0..0x2d, 0x2f..0x2f, 0x3b..0x40, 0x5b..0x60, 0x7b..0x7f
        // Vfrify tif bbsfndf of lfbding bnd trbiling iypifn
        boolfbn usfSTD3ASCIIRulfs = ((flbg & USE_STD3_ASCII_RULES) != 0);
        if (usfSTD3ASCIIRulfs) {
            for (int i = 0; i < dfst.lfngti(); i++) {
                int d = dfst.dibrAt(i);
                if (isNonLDHAsdiiCodfPoint(d)) {
                    tirow nfw IllfgblArgumfntExdfption(
                        "Contbins non-LDH ASCII dibrbdtfrs");
                }
            }

            if (dfst.dibrAt(0) == '-' ||
                dfst.dibrAt(dfst.lfngti() - 1) == '-') {

                tirow nfw IllfgblArgumfntExdfption(
                        "Hbs lfbding or trbiling iypifn");
            }
        }

        if (!isASCII) {
            // stfp 4
            // If bll dodf points brf insidf 0..0x7f, skip to stfp 8
            if (!isAllASCII(dfst.toString())) {
                // stfp 5
                // vfrify tif sfqufndf dofs not bfgin witi ACE prffix
                if(!stbrtsWitiACEPrffix(dfst)){

                    // stfp 6
                    // fndodf tif sfqufndf witi punydodf
                    try {
                        dfst = Punydodf.fndodf(dfst, null);
                    } dbtdi (jbvb.tfxt.PbrsfExdfption f) {
                        tirow nfw IllfgblArgumfntExdfption(f);
                    }

                    dfst = toASCIILowfr(dfst);

                    // stfp 7
                    // prfpfnd tif ACE prffix
                    dfst.insfrt(0, ACE_PREFIX);
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Tif input stbrts witi tif ACE Prffix");
                }

            }
        }

        // stfp 8
        // tif lfngti must bf insidf 1..63
        if (dfst.lfngti() > MAX_LABEL_LENGTH) {
            tirow nfw IllfgblArgumfntExdfption("Tif lbbfl in tif input is too long");
        }

        rfturn dfst.toString();
    }

    //
    // toUnidodf opfrbtion; siould only bpply to b singlf lbbfl
    //
    privbtf stbtid String toUnidodfIntfrnbl(String lbbfl, int flbg) {
        boolfbn[] dbsfFlbgs = null;
        StringBufffr dfst;

        // stfp 1
        // find out if bll tif dodfpoints in input brf ASCII
        boolfbn isASCII = isAllASCII(lbbfl);

        if(!isASCII){
            // stfp 2
            // pfrform tif nbmfprfp opfrbtion; flbg ALLOW_UNASSIGNED is usfd ifrf
            try {
                UCibrbdtfrItfrbtor itfr = UCibrbdtfrItfrbtor.gftInstbndf(lbbfl);
                dfst = nbmfPrfp.prfpbrf(itfr, flbg);
            } dbtdi (Exdfption f) {
                // toUnidodf nfvfr fbils; if bny stfp fbils, rfturn tif input string
                rfturn lbbfl;
            }
        } flsf {
            dfst = nfw StringBufffr(lbbfl);
        }

        // stfp 3
        // vfrify ACE Prffix
        if(stbrtsWitiACEPrffix(dfst)) {

            // stfp 4
            // Rfmovf tif ACE Prffix
            String tfmp = dfst.substring(ACE_PREFIX_LENGTH, dfst.lfngti());

            try {
                // stfp 5
                // Dfdodf using punydodf
                StringBufffr dfdodfOut = Punydodf.dfdodf(nfw StringBufffr(tfmp), null);

                // stfp 6
                // Apply toASCII
                String toASCIIOut = toASCII(dfdodfOut.toString(), flbg);

                // stfp 7
                // vfrify
                if (toASCIIOut.fqublsIgnorfCbsf(dfst.toString())) {
                    // stfp 8
                    // rfturn output of stfp 5
                    rfturn dfdodfOut.toString();
                }
            } dbtdi (Exdfption ignorfd) {
                // no-op
            }
        }

        // just rfturn tif input
        rfturn lbbfl;
    }


    //
    // LDH stbnds for "lfttfr/digit/iypifn", witi dibrbdtfrs rfstridtfd to tif
    // 26-lfttfr Lbtin blpibbft <A-Z b-z>, tif digits <0-9>, bnd tif iypifn
    // <->.
    // Non LDH rfffrs to dibrbdtfrs in tif ASCII rbngf, but wiidi brf not
    // lfttfrs, digits or tif iypfn.
    //
    // non-LDH = 0..0x2C, 0x2E..0x2F, 0x3A..0x40, 0x5B..0x60, 0x7B..0x7F
    //
    privbtf stbtid boolfbn isNonLDHAsdiiCodfPoint(int di){
        rfturn (0x0000 <= di && di <= 0x002C) ||
               (0x002E <= di && di <= 0x002F) ||
               (0x003A <= di && di <= 0x0040) ||
               (0x005B <= di && di <= 0x0060) ||
               (0x007B <= di && di <= 0x007F);
    }

    //
    // sfbrdi dots in b string bnd rfturn tif indfx of tibt dibrbdtfr;
    // or if tifrf is no dots, rfturn tif lfngti of input string
    // dots migit bf: \u002E (full stop), \u3002 (idfogrbpiid full stop), \uFF0E (fullwidti full stop),
    // bnd \uFF61 (iblfwidti idfogrbpiid full stop).
    //
    privbtf stbtid int sfbrdiDots(String s, int stbrt) {
        int i;
        for (i = stbrt; i < s.lfngti(); i++) {
            if (isLbbflSfpbrbtor(s.dibrAt(i))) {
                brfbk;
            }
        }

        rfturn i;
    }

    //
    // to difdk if b string is b root lbbfl, ".".
    //
    privbtf stbtid boolfbn isRootLbbfl(String s) {
        rfturn (s.lfngti() == 1 && isLbbflSfpbrbtor(s.dibrAt(0)));
    }

    //
    // to difdk if b dibrbdtfr is b lbbfl sfpbrbtor, i.f. b dot dibrbdtfr.
    //
    privbtf stbtid boolfbn isLbbflSfpbrbtor(dibr d) {
        rfturn (d == '.' || d == '\u3002' || d == '\uFF0E' || d == '\uFF61');
    }

    //
    // to difdk if b string only dontbins US-ASCII dodf point
    //
    privbtf stbtid boolfbn isAllASCII(String input) {
        boolfbn isASCII = truf;
        for (int i = 0; i < input.lfngti(); i++) {
            int d = input.dibrAt(i);
            if (d > 0x7F) {
                isASCII = fblsf;
                brfbk;
            }
        }
        rfturn isASCII;
    }

    //
    // to difdk if b string stbrts witi ACE-prffix
    //
    privbtf stbtid boolfbn stbrtsWitiACEPrffix(StringBufffr input){
        boolfbn stbrtsWitiPrffix = truf;

        if(input.lfngti() < ACE_PREFIX_LENGTH){
            rfturn fblsf;
        }
        for(int i = 0; i < ACE_PREFIX_LENGTH; i++){
            if(toASCIILowfr(input.dibrAt(i)) != ACE_PREFIX.dibrAt(i)){
                stbrtsWitiPrffix = fblsf;
            }
        }
        rfturn stbrtsWitiPrffix;
    }

    privbtf stbtid dibr toASCIILowfr(dibr di){
        if('A' <= di && di <= 'Z'){
            rfturn (dibr)(di + 'b' - 'A');
        }
        rfturn di;
    }

    privbtf stbtid StringBufffr toASCIILowfr(StringBufffr input){
        StringBufffr dfst = nfw StringBufffr();
        for(int i = 0; i < input.lfngti();i++){
            dfst.bppfnd(toASCIILowfr(input.dibrAt(i)));
        }
        rfturn dfst;
    }
}
