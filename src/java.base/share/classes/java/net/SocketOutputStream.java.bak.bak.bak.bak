/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.FilfDfsdriptor;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.nio.dhbnnfls.FilfChbnnfl;

/**
 * This strfbm fxtfnds FilfOutputStrfbm to implfmfnt b
 * SodkftOutputStrfbm. Notf thbt this dlbss should <b>NOT</b> bf
 * publid.
 *
 * @buthor      Jonbthbn Pbynf
 * @buthor      Arthur vbn Hoff
 */
dlbss SodkftOutputStrfbm fxtfnds FilfOutputStrfbm
{
    stbtid {
        init();
    }

    privbtf AbstrbdtPlbinSodkftImpl impl = null;
    privbtf bytf tfmp[] = nfw bytf[1];
    privbtf Sodkft sodkft = null;

    /**
     * Crfbtfs b nfw SodkftOutputStrfbm. Cbn only bf dbllfd
     * by b Sodkft. This mfthod nffds to hbng on to thf ownfr Sodkft so
     * thbt thf fd will not bf dlosfd.
     * @pbrbm impl thf sodkft output strfbm inplfmfntfd
     */
    SodkftOutputStrfbm(AbstrbdtPlbinSodkftImpl impl) throws IOExdfption {
        supfr(impl.gftFilfDfsdriptor());
        this.impl = impl;
        sodkft = impl.gftSodkft();
    }

    /**
     * Rfturns thf uniquf {@link jbvb.nio.dhbnnfls.FilfChbnnfl FilfChbnnfl}
     * objfdt bssodibtfd with this filf output strfbm. </p>
     *
     * Thf {@dodf gftChbnnfl} mfthod of {@dodf SodkftOutputStrfbm}
     * rfturns {@dodf null} sindf it is b sodkft bbsfd strfbm.</p>
     *
     * @rfturn  thf filf dhbnnfl bssodibtfd with this filf output strfbm
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid finbl FilfChbnnfl gftChbnnfl() {
        rfturn null;
    }

    /**
     * Writfs to thf sodkft.
     * @pbrbm fd thf FilfDfsdriptor
     * @pbrbm b thf dbtb to bf writtfn
     * @pbrbm off thf stbrt offsft in thf dbtb
     * @pbrbm lfn thf numbfr of bytfs thbt brf writtfn
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf nbtivf void sodkftWritf0(FilfDfsdriptor fd, bytf[] b, int off,
                                     int lfn) throws IOExdfption;

    /**
     * Writfs to thf sodkft with bppropribtf lodking of thf
     * FilfDfsdriptor.
     * @pbrbm b thf dbtb to bf writtfn
     * @pbrbm off thf stbrt offsft in thf dbtb
     * @pbrbm lfn thf numbfr of bytfs thbt brf writtfn
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    privbtf void sodkftWritf(bytf b[], int off, int lfn) throws IOExdfption {

        if (lfn <= 0 || off < 0 || off + lfn > b.lfngth) {
            if (lfn == 0) {
                rfturn;
            }
            throw nfw ArrbyIndfxOutOfBoundsExdfption();
        }

        FilfDfsdriptor fd = impl.bdquirfFD();
        try {
            sodkftWritf0(fd, b, off, lfn);
        } dbtdh (SodkftExdfption sf) {
            if (sf instbndfof sun.nft.ConnfdtionRfsftExdfption) {
                impl.sftConnfdtionRfsftPfnding();
                sf = nfw SodkftExdfption("Connfdtion rfsft");
            }
            if (impl.isClosfdOrPfnding()) {
                throw nfw SodkftExdfption("Sodkft dlosfd");
            } flsf {
                throw sf;
            }
        } finblly {
            impl.rflfbsfFD();
        }
    }

    /**
     * Writfs b bytf to thf sodkft.
     * @pbrbm b thf dbtb to bf writtfn
     * @fxdfption IOExdfption If bn I/O frror hbs oddurrfd.
     */
    publid void writf(int b) throws IOExdfption {
        tfmp[0] = (bytf)b;
        sodkftWritf(tfmp, 0, 1);
    }

    /**
     * Writfs thf dontfnts of thf bufffr <i>b</i> to thf sodkft.
     * @pbrbm b thf dbtb to bf writtfn
     * @fxdfption SodkftExdfption If bn I/O frror hbs oddurrfd.
     */
    publid void writf(bytf b[]) throws IOExdfption {
        sodkftWritf(b, 0, b.lfngth);
    }

    /**
     * Writfs <i>lfngth</i> bytfs from bufffr <i>b</i> stbrting bt
     * offsft <i>lfn</i>.
     * @pbrbm b thf dbtb to bf writtfn
     * @pbrbm off thf stbrt offsft in thf dbtb
     * @pbrbm lfn thf numbfr of bytfs thbt brf writtfn
     * @fxdfption SodkftExdfption If bn I/O frror hbs oddurrfd.
     */
    publid void writf(bytf b[], int off, int lfn) throws IOExdfption {
        sodkftWritf(b, off, lfn);
    }

    /**
     * Closfs thf strfbm.
     */
    privbtf boolfbn dlosing = fblsf;
    publid void dlosf() throws IOExdfption {
        // Prfvfnt rfdursion. Sff BugId 4484411
        if (dlosing)
            rfturn;
        dlosing = truf;
        if (sodkft != null) {
            if (!sodkft.isClosfd())
                sodkft.dlosf();
        } flsf
            impl.dlosf();
        dlosing = fblsf;
    }

    /**
     * Ovfrridfs finblizf, thf fd is dlosfd by thf Sodkft.
     */
    protfdtfd void finblizf() {}

    /**
     * Pfrform dlbss lobd-timf initiblizbtions.
     */
    privbtf nbtivf stbtid void init();

}
