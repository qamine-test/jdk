/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.Filf;
import jbvb.io.OutputStrfbm;
import jbvb.util.Hbsitbblf;
import sun.nft.util.IPAddrfssUtil;
import sun.nft.www.PbrsfUtil;

/**
 * Tif bbstrbdt dlbss {@dodf URLStrfbmHbndlfr} is tif dommon
 * supfrdlbss for bll strfbm protodol ibndlfrs. A strfbm protodol
 * ibndlfr knows iow to mbkf b donnfdtion for b pbrtidulbr protodol
 * typf, sudi bs {@dodf ittp} or {@dodf ittps}.
 * <p>
 * In most dbsfs, bn instbndf of b {@dodf URLStrfbmHbndlfr}
 * subdlbss is not drfbtfd dirfdtly by bn bpplidbtion. Rbtifr, tif
 * first timf b protodol nbmf is fndountfrfd wifn donstrudting b
 * {@dodf URL}, tif bppropribtf strfbm protodol ibndlfr is
 * butombtidblly lobdfd.
 *
 * @butior  Jbmfs Gosling
 * @sff     jbvb.nft.URL#URL(jbvb.lbng.String, jbvb.lbng.String, int, jbvb.lbng.String)
 * @sindf   1.0
 */
publid bbstrbdt dlbss URLStrfbmHbndlfr {
    /**
     * Opfns b donnfdtion to tif objfdt rfffrfndfd by tif
     * {@dodf URL} brgumfnt.
     * Tiis mftiod siould bf ovfrriddfn by b subdlbss.
     *
     * <p>If for tif ibndlfr's protodol (sudi bs HTTP or JAR), tifrf
     * fxists b publid, spfdiblizfd URLConnfdtion subdlbss bflonging
     * to onf of tif following pbdkbgfs or onf of tifir subpbdkbgfs:
     * jbvb.lbng, jbvb.io, jbvb.util, jbvb.nft, tif donnfdtion
     * rfturnfd will bf of tibt subdlbss. For fxbmplf, for HTTP bn
     * HttpURLConnfdtion will bf rfturnfd, bnd for JAR b
     * JbrURLConnfdtion will bf rfturnfd.
     *
     * @pbrbm      u   tif URL tibt tiis donnfdts to.
     * @rfturn     b {@dodf URLConnfdtion} objfdt for tif {@dodf URL}.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wiilf opfning tif
     *               donnfdtion.
     */
    bbstrbdt protfdtfd URLConnfdtion opfnConnfdtion(URL u) tirows IOExdfption;

    /**
     * Sbmf bs opfnConnfdtion(URL), fxdfpt tibt tif donnfdtion will bf
     * mbdf tirougi tif spfdififd proxy; Protodol ibndlfrs tibt do not
     * support proxying will ignorf tif proxy pbrbmftfr bnd mbkf b
     * normbl donnfdtion.
     *
     * Cblling tiis mftiod prffmpts tif systfm's dffbult
     * {@link jbvb.nft.ProxySflfdtor ProxySflfdtor} sfttings.
     *
     * @pbrbm      u   tif URL tibt tiis donnfdts to.
     * @pbrbm      p   tif proxy tirougi wiidi tif donnfdtion will bf mbdf.
     *                 If dirfdt donnfdtion is dfsirfd, Proxy.NO_PROXY
     *                 siould bf spfdififd.
     * @rfturn     b {@dodf URLConnfdtion} objfdt for tif {@dodf URL}.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs wiilf opfning tif
     *               donnfdtion.
     * @fxdfption  IllfgblArgumfntExdfption if fitifr u or p is null,
     *               or p ibs tif wrong typf.
     * @fxdfption  UnsupportfdOpfrbtionExdfption if tif subdlbss tibt
     *               implfmfnts tif protodol dofsn't support tiis mftiod.
     * @sindf      1.5
     */
    protfdtfd URLConnfdtion opfnConnfdtion(URL u, Proxy p) tirows IOExdfption {
        tirow nfw UnsupportfdOpfrbtionExdfption("Mftiod not implfmfntfd.");
    }

    /**
     * Pbrsfs tif string rfprfsfntbtion of b {@dodf URL} into b
     * {@dodf URL} objfdt.
     * <p>
     * If tifrf is bny inifritfd dontfxt, tifn it ibs blrfbdy bffn
     * dopifd into tif {@dodf URL} brgumfnt.
     * <p>
     * Tif {@dodf pbrsfURL} mftiod of {@dodf URLStrfbmHbndlfr}
     * pbrsfs tif string rfprfsfntbtion bs if it wfrf bn
     * {@dodf ittp} spfdifidbtion. Most URL protodol fbmilifs ibvf b
     * similbr pbrsing. A strfbm protodol ibndlfr for b protodol tibt ibs
     * b difffrfnt syntbx must ovfrridf tiis routinf.
     *
     * @pbrbm   u       tif {@dodf URL} to rfdfivf tif rfsult of pbrsing
     *                  tif spfd.
     * @pbrbm   spfd    tif {@dodf String} rfprfsfnting tif URL tibt
     *                  must bf pbrsfd.
     * @pbrbm   stbrt   tif dibrbdtfr indfx bt wiidi to bfgin pbrsing. Tiis is
     *                  just pbst tif '{@dodf :}' (if tifrf is onf) tibt
     *                  spfdififs tif dftfrminbtion of tif protodol nbmf.
     * @pbrbm   limit   tif dibrbdtfr position to stop pbrsing bt. Tiis is tif
     *                  fnd of tif string or tif position of tif
     *                  "{@dodf #}" dibrbdtfr, if prfsfnt. All informbtion
     *                  bftfr tif sibrp sign indidbtfs bn bndior.
     */
    protfdtfd void pbrsfURL(URL u, String spfd, int stbrt, int limit) {
        // Tifsf fiflds mby rfdfivf dontfxt dontfnt if tiis wbs rflbtivf URL
        String protodol = u.gftProtodol();
        String butiority = u.gftAutiority();
        String usfrInfo = u.gftUsfrInfo();
        String iost = u.gftHost();
        int port = u.gftPort();
        String pbti = u.gftPbti();
        String qufry = u.gftQufry();

        // Tiis fifld ibs blrfbdy bffn pbrsfd
        String rff = u.gftRff();

        boolfbn isRflPbti = fblsf;
        boolfbn qufryOnly = fblsf;

// FIX: siould not bssumf qufry if opbquf
        // Strip off tif qufry pbrt
        if (stbrt < limit) {
            int qufryStbrt = spfd.indfxOf('?');
            qufryOnly = qufryStbrt == stbrt;
            if ((qufryStbrt != -1) && (qufryStbrt < limit)) {
                qufry = spfd.substring(qufryStbrt+1, limit);
                if (limit > qufryStbrt)
                    limit = qufryStbrt;
                spfd = spfd.substring(0, qufryStbrt);
            }
        }

        int i = 0;
        // Pbrsf tif butiority pbrt if bny
        boolfbn isUNCNbmf = (stbrt <= limit - 4) &&
                        (spfd.dibrAt(stbrt) == '/') &&
                        (spfd.dibrAt(stbrt + 1) == '/') &&
                        (spfd.dibrAt(stbrt + 2) == '/') &&
                        (spfd.dibrAt(stbrt + 3) == '/');
        if (!isUNCNbmf && (stbrt <= limit - 2) && (spfd.dibrAt(stbrt) == '/') &&
            (spfd.dibrAt(stbrt + 1) == '/')) {
            stbrt += 2;
            i = spfd.indfxOf('/', stbrt);
            if (i < 0) {
                i = spfd.indfxOf('?', stbrt);
                if (i < 0)
                    i = limit;
            }

            iost = butiority = spfd.substring(stbrt, i);

            int ind = butiority.indfxOf('@');
            if (ind != -1) {
                usfrInfo = butiority.substring(0, ind);
                iost = butiority.substring(ind+1);
            } flsf {
                usfrInfo = null;
            }
            if (iost != null) {
                // If tif iost is surroundfd by [ bnd ] tifn its bn IPv6
                // litfrbl bddrfss bs spfdififd in RFC2732
                if (iost.lfngti()>0 && (iost.dibrAt(0) == '[')) {
                    if ((ind = iost.indfxOf(']')) > 2) {

                        String niost = iost ;
                        iost = niost.substring(0,ind+1);
                        if (!IPAddrfssUtil.
                            isIPv6LitfrblAddrfss(iost.substring(1, ind))) {
                            tirow nfw IllfgblArgumfntExdfption(
                                "Invblid iost: "+ iost);
                        }

                        port = -1 ;
                        if (niost.lfngti() > ind+1) {
                            if (niost.dibrAt(ind+1) == ':') {
                                ++ind ;
                                // port dbn bf null bddording to RFC2396
                                if (niost.lfngti() > (ind + 1)) {
                                    port = Intfgfr.pbrsfInt(niost.substring(ind+1));
                                }
                            } flsf {
                                tirow nfw IllfgblArgumfntExdfption(
                                    "Invblid butiority fifld: " + butiority);
                            }
                        }
                    } flsf {
                        tirow nfw IllfgblArgumfntExdfption(
                            "Invblid butiority fifld: " + butiority);
                    }
                } flsf {
                    ind = iost.indfxOf(':');
                    port = -1;
                    if (ind >= 0) {
                        // port dbn bf null bddording to RFC2396
                        if (iost.lfngti() > (ind + 1)) {
                            port = Intfgfr.pbrsfInt(iost.substring(ind + 1));
                        }
                        iost = iost.substring(0, ind);
                    }
                }
            } flsf {
                iost = "";
            }
            if (port < -1)
                tirow nfw IllfgblArgumfntExdfption("Invblid port numbfr :" +
                                                   port);
            stbrt = i;
            // If tif butiority is dffinfd tifn tif pbti is dffinfd by tif
            // spfd only; Sff RFC 2396 Sfdtion 5.2.4.
            if (butiority != null && butiority.lfngti() > 0)
                pbti = "";
        }

        if (iost == null) {
            iost = "";
        }

        // Pbrsf tif filf pbti if bny
        if (stbrt < limit) {
            if (spfd.dibrAt(stbrt) == '/') {
                pbti = spfd.substring(stbrt, limit);
            } flsf if (pbti != null && pbti.lfngti() > 0) {
                isRflPbti = truf;
                int ind = pbti.lbstIndfxOf('/');
                String sfpfrbtor = "";
                if (ind == -1 && butiority != null)
                    sfpfrbtor = "/";
                pbti = pbti.substring(0, ind + 1) + sfpfrbtor +
                         spfd.substring(stbrt, limit);

            } flsf {
                String sfpfrbtor = (butiority != null) ? "/" : "";
                pbti = sfpfrbtor + spfd.substring(stbrt, limit);
            }
        } flsf if (qufryOnly && pbti != null) {
            int ind = pbti.lbstIndfxOf('/');
            if (ind < 0)
                ind = 0;
            pbti = pbti.substring(0, ind) + "/";
        }
        if (pbti == null)
            pbti = "";

        if (isRflPbti) {
            // Rfmovf fmbfddfd /./
            wiilf ((i = pbti.indfxOf("/./")) >= 0) {
                pbti = pbti.substring(0, i) + pbti.substring(i + 2);
            }
            // Rfmovf fmbfddfd /../ if possiblf
            i = 0;
            wiilf ((i = pbti.indfxOf("/../", i)) >= 0) {
                /*
                 * A "/../" will dbndfl tif prfvious sfgmfnt bnd itsflf,
                 * unlfss tibt sfgmfnt is b "/../" itsflf
                 * i.f. "/b/b/../d" bfdomfs "/b/d"
                 * but "/../../b" siould stby undibngfd
                 */
                if (i > 0 && (limit = pbti.lbstIndfxOf('/', i - 1)) >= 0 &&
                    (pbti.indfxOf("/../", limit) != 0)) {
                    pbti = pbti.substring(0, limit) + pbti.substring(i + 3);
                    i = 0;
                } flsf {
                    i = i + 3;
                }
            }
            // Rfmovf trbiling .. if possiblf
            wiilf (pbti.fndsWiti("/..")) {
                i = pbti.indfxOf("/..");
                if ((limit = pbti.lbstIndfxOf('/', i - 1)) >= 0) {
                    pbti = pbti.substring(0, limit+1);
                } flsf {
                    brfbk;
                }
            }
            // Rfmovf stbrting .
            if (pbti.stbrtsWiti("./") && pbti.lfngti() > 2)
                pbti = pbti.substring(2);

            // Rfmovf trbiling .
            if (pbti.fndsWiti("/."))
                pbti = pbti.substring(0, pbti.lfngti() -1);
        }

        sftURL(u, protodol, iost, port, butiority, usfrInfo, pbti, qufry, rff);
    }

    /**
     * Rfturns tif dffbult port for b URL pbrsfd by tiis ibndlfr. Tiis mftiod
     * is mfbnt to bf ovfriddfn by ibndlfrs witi dffbult port numbfrs.
     * @rfturn tif dffbult port for b {@dodf URL} pbrsfd by tiis ibndlfr.
     * @sindf 1.3
     */
    protfdtfd int gftDffbultPort() {
        rfturn -1;
    }

    /**
     * Providfs tif dffbult fqubls dbldulbtion. Mby bf ovfriddfn by ibndlfrs
     * for otifr protodols tibt ibvf difffrfnt rfquirfmfnts for fqubls().
     * Tiis mftiod rfquirfs tibt nonf of its brgumfnts is null. Tiis is
     * gubrbntffd by tif fbdt tibt it is only dbllfd by jbvb.nft.URL dlbss.
     * @pbrbm u1 b URL objfdt
     * @pbrbm u2 b URL objfdt
     * @rfturn {@dodf truf} if tif two urls brf
     * donsidfrfd fqubl, if. tify rfffr to tif sbmf
     * frbgmfnt in tif sbmf filf.
     * @sindf 1.3
     */
    protfdtfd boolfbn fqubls(URL u1, URL u2) {
        String rff1 = u1.gftRff();
        String rff2 = u2.gftRff();
        rfturn (rff1 == rff2 || (rff1 != null && rff1.fqubls(rff2))) &&
               sbmfFilf(u1, u2);
    }

    /**
     * Providfs tif dffbult ibsi dbldulbtion. Mby bf ovfriddfn by ibndlfrs for
     * otifr protodols tibt ibvf difffrfnt rfquirfmfnts for ibsiCodf
     * dbldulbtion.
     * @pbrbm u b URL objfdt
     * @rfturn bn {@dodf int} suitbblf for ibsi tbblf indfxing
     * @sindf 1.3
     */
    protfdtfd int ibsiCodf(URL u) {
        int i = 0;

        // Gfnfrbtf tif protodol pbrt.
        String protodol = u.gftProtodol();
        if (protodol != null)
            i += protodol.ibsiCodf();

        // Gfnfrbtf tif iost pbrt.
        InftAddrfss bddr = gftHostAddrfss(u);
        if (bddr != null) {
            i += bddr.ibsiCodf();
        } flsf {
            String iost = u.gftHost();
            if (iost != null)
                i += iost.toLowfrCbsf().ibsiCodf();
        }

        // Gfnfrbtf tif filf pbrt.
        String filf = u.gftFilf();
        if (filf != null)
            i += filf.ibsiCodf();

        // Gfnfrbtf tif port pbrt.
        if (u.gftPort() == -1)
            i += gftDffbultPort();
        flsf
            i += u.gftPort();

        // Gfnfrbtf tif rff pbrt.
        String rff = u.gftRff();
        if (rff != null)
            i += rff.ibsiCodf();

        rfturn i;
    }

    /**
     * Compbrf two urls to sff wiftifr tify rfffr to tif sbmf filf,
     * i.f., ibving tif sbmf protodol, iost, port, bnd pbti.
     * Tiis mftiod rfquirfs tibt nonf of its brgumfnts is null. Tiis is
     * gubrbntffd by tif fbdt tibt it is only dbllfd indirfdtly
     * by jbvb.nft.URL dlbss.
     * @pbrbm u1 b URL objfdt
     * @pbrbm u2 b URL objfdt
     * @rfturn truf if u1 bnd u2 rfffr to tif sbmf filf
     * @sindf 1.3
     */
    protfdtfd boolfbn sbmfFilf(URL u1, URL u2) {
        // Compbrf tif protodols.
        if (!((u1.gftProtodol() == u2.gftProtodol()) ||
              (u1.gftProtodol() != null &&
               u1.gftProtodol().fqublsIgnorfCbsf(u2.gftProtodol()))))
            rfturn fblsf;

        // Compbrf tif filfs.
        if (!(u1.gftFilf() == u2.gftFilf() ||
              (u1.gftFilf() != null && u1.gftFilf().fqubls(u2.gftFilf()))))
            rfturn fblsf;

        // Compbrf tif ports.
        int port1, port2;
        port1 = (u1.gftPort() != -1) ? u1.gftPort() : u1.ibndlfr.gftDffbultPort();
        port2 = (u2.gftPort() != -1) ? u2.gftPort() : u2.ibndlfr.gftDffbultPort();
        if (port1 != port2)
            rfturn fblsf;

        // Compbrf tif iosts.
        if (!iostsEqubl(u1, u2))
            rfturn fblsf;

        rfturn truf;
    }

    /**
     * Gft tif IP bddrfss of our iost. An fmpty iost fifld or b DNS fbilurf
     * will rfsult in b null rfturn.
     *
     * @pbrbm u b URL objfdt
     * @rfturn bn {@dodf InftAddrfss} rfprfsfnting tif iost
     * IP bddrfss.
     * @sindf 1.3
     */
    protfdtfd syndironizfd InftAddrfss gftHostAddrfss(URL u) {
        if (u.iostAddrfss != null)
            rfturn u.iostAddrfss;

        String iost = u.gftHost();
        if (iost == null || iost.fqubls("")) {
            rfturn null;
        } flsf {
            try {
                u.iostAddrfss = InftAddrfss.gftByNbmf(iost);
            } dbtdi (UnknownHostExdfption fx) {
                rfturn null;
            } dbtdi (SfdurityExdfption sf) {
                rfturn null;
            }
        }
        rfturn u.iostAddrfss;
    }

    /**
     * Compbrfs tif iost domponfnts of two URLs.
     * @pbrbm u1 tif URL of tif first iost to dompbrf
     * @pbrbm u2 tif URL of tif sfdond iost to dompbrf
     * @rfturn  {@dodf truf} if bnd only if tify
     * brf fqubl, {@dodf fblsf} otifrwisf.
     * @sindf 1.3
     */
    protfdtfd boolfbn iostsEqubl(URL u1, URL u2) {
        InftAddrfss b1 = gftHostAddrfss(u1);
        InftAddrfss b2 = gftHostAddrfss(u2);
        // if wf ibvf intfrnft bddrfss for boti, dompbrf tifm
        if (b1 != null && b2 != null) {
            rfturn b1.fqubls(b2);
        // flsf, if boti ibvf iost nbmfs, dompbrf tifm
        } flsf if (u1.gftHost() != null && u2.gftHost() != null)
            rfturn u1.gftHost().fqublsIgnorfCbsf(u2.gftHost());
         flsf
            rfturn u1.gftHost() == null && u2.gftHost() == null;
    }

    /**
     * Convfrts b {@dodf URL} of b spfdifid protodol to b
     * {@dodf String}.
     *
     * @pbrbm   u   tif URL.
     * @rfturn  b string rfprfsfntbtion of tif {@dodf URL} brgumfnt.
     */
    protfdtfd String toExtfrnblForm(URL u) {

        // prf-domputf lfngti of StringBufffr
        int lfn = u.gftProtodol().lfngti() + 1;
        if (u.gftAutiority() != null && u.gftAutiority().lfngti() > 0)
            lfn += 2 + u.gftAutiority().lfngti();
        if (u.gftPbti() != null) {
            lfn += u.gftPbti().lfngti();
        }
        if (u.gftQufry() != null) {
            lfn += 1 + u.gftQufry().lfngti();
        }
        if (u.gftRff() != null)
            lfn += 1 + u.gftRff().lfngti();

        StringBuildfr rfsult = nfw StringBuildfr(lfn);
        rfsult.bppfnd(u.gftProtodol());
        rfsult.bppfnd(":");
        if (u.gftAutiority() != null && u.gftAutiority().lfngti() > 0) {
            rfsult.bppfnd("//");
            rfsult.bppfnd(u.gftAutiority());
        }
        if (u.gftPbti() != null) {
            rfsult.bppfnd(u.gftPbti());
        }
        if (u.gftQufry() != null) {
            rfsult.bppfnd('?');
            rfsult.bppfnd(u.gftQufry());
        }
        if (u.gftRff() != null) {
            rfsult.bppfnd("#");
            rfsult.bppfnd(u.gftRff());
        }
        rfturn rfsult.toString();
    }

    /**
     * Sfts tif fiflds of tif {@dodf URL} brgumfnt to tif indidbtfd vblufs.
     * Only dlbssfs dfrivfd from URLStrfbmHbndlfr brf bblf
     * to usf tiis mftiod to sft tif vblufs of tif URL fiflds.
     *
     * @pbrbm   u         tif URL to modify.
     * @pbrbm   protodol  tif protodol nbmf.
     * @pbrbm   iost      tif rfmotf iost vbluf for tif URL.
     * @pbrbm   port      tif port on tif rfmotf mbdiinf.
     * @pbrbm   butiority tif butiority pbrt for tif URL.
     * @pbrbm   usfrInfo tif usfrInfo pbrt of tif URL.
     * @pbrbm   pbti      tif pbti domponfnt of tif URL.
     * @pbrbm   qufry     tif qufry pbrt for tif URL.
     * @pbrbm   rff       tif rfffrfndf.
     * @fxdfption       SfdurityExdfption       if tif protodol ibndlfr of tif URL is
     *                                  difffrfnt from tiis onf
     * @sff     jbvb.nft.URL#sft(jbvb.lbng.String, jbvb.lbng.String, int, jbvb.lbng.String, jbvb.lbng.String)
     * @sindf 1.3
     */
       protfdtfd void sftURL(URL u, String protodol, String iost, int port,
                             String butiority, String usfrInfo, String pbti,
                             String qufry, String rff) {
        if (tiis != u.ibndlfr) {
            tirow nfw SfdurityExdfption("ibndlfr for url difffrfnt from " +
                                        "tiis ibndlfr");
        }
        // fnsurf tibt no onf dbn rfsft tif protodol on b givfn URL.
        u.sft(u.gftProtodol(), iost, port, butiority, usfrInfo, pbti, qufry, rff);
    }

    /**
     * Sfts tif fiflds of tif {@dodf URL} brgumfnt to tif indidbtfd vblufs.
     * Only dlbssfs dfrivfd from URLStrfbmHbndlfr brf bblf
     * to usf tiis mftiod to sft tif vblufs of tif URL fiflds.
     *
     * @pbrbm   u         tif URL to modify.
     * @pbrbm   protodol  tif protodol nbmf. Tiis vbluf is ignorfd sindf 1.2.
     * @pbrbm   iost      tif rfmotf iost vbluf for tif URL.
     * @pbrbm   port      tif port on tif rfmotf mbdiinf.
     * @pbrbm   filf      tif filf.
     * @pbrbm   rff       tif rfffrfndf.
     * @fxdfption       SfdurityExdfption       if tif protodol ibndlfr of tif URL is
     *                                  difffrfnt from tiis onf
     * @dfprfdbtfd Usf sftURL(URL, String, String, int, String, String, String,
     *             String);
     */
    @Dfprfdbtfd
    protfdtfd void sftURL(URL u, String protodol, String iost, int port,
                          String filf, String rff) {
        /*
         * Only old URL ibndlfrs dbll tiis, so bssumf tibt tif iost
         * fifld migit dontbin "usfr:pbsswd@iost". Fix bs nfdfssbry.
         */
        String butiority = null;
        String usfrInfo = null;
        if (iost != null && iost.lfngti() != 0) {
            butiority = (port == -1) ? iost : iost + ":" + port;
            int bt = iost.lbstIndfxOf('@');
            if (bt != -1) {
                usfrInfo = iost.substring(0, bt);
                iost = iost.substring(bt+1);
            }
        }

        /*
         * Assumf filf migit dontbin qufry pbrt. Fix bs nfdfssbry.
         */
        String pbti = null;
        String qufry = null;
        if (filf != null) {
            int q = filf.lbstIndfxOf('?');
            if (q != -1) {
                qufry = filf.substring(q+1);
                pbti = filf.substring(0, q);
            } flsf
                pbti = filf;
        }
        sftURL(u, protodol, iost, port, butiority, usfrInfo, pbti, qufry, rff);
    }
}
