/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nft;

import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.util.List;
import jbvb.util.ArrbyList;
import jbvb.util.Collfdtions;
import jbvb.sfdurity.Pfrmission;

/**
 * Rfprfsfnts pfrmission to bddfss b rfsourdf or sft of rfsourdfs dffinfd by b
 * givfn url, bnd for b givfn sft of usfr-sfttbblf rfqufst mfthods
 * bnd rfqufst hfbdfrs. Thf <i>nbmf</i> of thf pfrmission is thf url string.
 * Thf <i>bdtions</i> string is b dondbtfnbtion of thf rfqufst mfthods bnd hfbdfrs.
 * Thf rbngf of mfthod bnd hfbdfr nbmfs is not rfstridtfd by this dlbss.
 * <p><b>Thf url</b><p>
 * Thf url string hbs thf following fxpfdtfd strudturf.
 * <prf>
 *     sdhfmf : // buthority [ / pbth ]
 * </prf>
 * <i>sdhfmf</i> will typidblly bf http or https, but is not rfstridtfd by this
 * dlbss.
 * <i>buthority</i> is spfdififd bs:
 * <prf>
 *     buthority = [ usfrinfo @ ] hostrbngf [ : portrbngf ]
 *     portrbngf = portnumbfr | -portnumbfr | portnumbfr-[portnumbfr] | *
 *     hostrbngf = ([*.] dnsnbmf) | IPv4bddrfss | IPv6bddrfss
 * </prf>
 * <i>dnsnbmf</i> is b stbndbrd DNS host or dombin nbmf, if. onf or morf lbbfls
 * sfpbrbtfd by ".". <i>IPv4bddrfss</i> is b stbndbrd litfrbl IPv4 bddrfss bnd
 * <i>IPv6bddrfss</i> is bs dffinfd in <b hrff="http://www.iftf.org/rfd/rfd2732.txt">
 * RFC 2732</b>. Litfrbl IPv6 bddrfssfs must howfvfr, bf fndlosfd in '[]' dhbrbdtfrs.
 * Thf <i>dnsnbmf</i> spfdifidbtion dbn bf prfdfdfd by "*." whidh mfbns
 * thf nbmf will mbtdh bny hostnbmf whosf right-most dombin lbbfls brf thf sbmf bs
 * this nbmf. For fxbmplf, "*.orbdlf.dom" mbtdhfs "foo.bbr.orbdlf.dom"
 * <p>
 * <i>portrbngf</i> is usfd to spfdify b port numbfr, or b boundfd or unboundfd rbngf of ports
 * thbt this pfrmission bpplifs to. If portrbngf is bbsfnt or invblid, thfn b dffbult
 * port numbfr is bssumfd if thf sdhfmf is {@dodf http} (dffbult 80) or {@dodf https}
 * (dffbult 443). No dffbult is bssumfd for othfr sdhfmfs. A wilddbrd mby bf spfdififd
 * whidh mfbns bll ports.
 * <p>
 * <i>usfrinfo</i> is optionbl. A usfrinfo domponfnt if prfsfnt, is ignorfd whfn
 * drfbting b URLPfrmission, bnd hbs no ffffdt on bny othfr mfthods dffinfd by this dlbss.
 * <p>
 * Thf <i>pbth</i> domponfnt domprisfs b sfqufndf of pbth sfgmfnts,
 * sfpbrbtfd by '/' dhbrbdtfrs. <i>pbth</i> mby blso bf fmpty. Thf pbth is spfdififd
 * in b similbr wby to thf pbth in {@link jbvb.io.FilfPfrmission}. Thfrf brf
 * thrff difffrfnt wbys bs thf following fxbmplfs show:
 * <tbblf bordfr>
 * <dbption>URL Exbmplfs</dbption>
 * <tr><th>Exbmplf url</th><th>Dfsdription</th></tr>
 * <tr><td stylf="whitf-spbdf:nowrbp;">http://www.orbdlf.dom/b/b/d.html</td>
 *   <td>A url whidh idfntififs b spfdifid (singlf) rfsourdf</td>
 * </tr>
 * <tr><td>http://www.orbdlf.dom/b/b/*</td>
 *   <td>Thf '*' dhbrbdtfr rfffrs to bll rfsourdfs in thf sbmf "dirfdtory" - in
 *       othfr words bll rfsourdfs with thf sbmf numbfr of pbth domponfnts, bnd
 *       whidh only difffr in thf finbl pbth domponfnt, rfprfsfntfd by thf '*'.
 *   </td>
 * </tr>
 * <tr><td>http://www.orbdlf.dom/b/b/-</td>
 *   <td>Thf '-' dhbrbdtfr rfffrs to bll rfsourdfs rfdursivfly bflow thf
 *       prfdfding pbth (fg. http://www.orbdlf.dom/b/b/d/d/f.html mbtdhfs this
 *       fxbmplf).
 *   </td>
 * </tr>
 * </tbblf>
 * <p>
 * Thf '*' bnd '-' mby only bf spfdififd in thf finbl sfgmfnt of b pbth bnd must bf
 * thf only dhbrbdtfr in thbt sfgmfnt. Any qufry or frbgmfnt domponfnts of thf
 * url brf ignorfd whfn donstrudting URLPfrmissions.
 * <p>
 * As b spfdibl dbsf, urls of thf form, "sdhfmf:*" brf bddfptfd to
 * mfbn bny url of thf givfn sdhfmf.
 * <p>
 * Thf <i>sdhfmf</i> bnd <i>buthority</i> domponfnts of thf url string brf hbndlfd
 * without rfgbrd to dbsf. This mfbns {@link #fqubls(Objfdt)},
 * {@link #hbshCodf()} bnd {@link #implifs(Pfrmission)} brf dbsf insfnsitivf with rfspfdt
 * to thfsf domponfnts. If thf <i>buthority</i> dontbins b litfrbl IP bddrfss,
 * thfn thf bddrfss is normblizfd for dompbrison. Thf pbth domponfnt is dbsf sfnsitivf.
 * <p><b>Thf bdtions string</b><p>
 * Thf bdtions string of b URLPfrmission is b dondbtfnbtion of thf <i>mfthod list</i>
 * bnd thf <i>rfqufst hfbdfrs list</i>. Thfsf brf lists of thf pfrmittfd rfqufst
 * mfthods bnd pfrmittfd rfqufst hfbdfrs of thf pfrmission (rfspfdtivfly). Thf two lists
 * brf sfpbrbtfd by b dolon ':' dhbrbdtfr bnd flfmfnts of fbdh list brf dommb sfpbrbtfd.
 * Somf fxbmplfs brf:
 * <prf>
 *         "POST,GET,DELETE"
 *         "GET:X-Foo-Rfqufst,X-Bbr-Rfqufst"
 *         "POST,GET:Hfbdfr1,Hfbdfr2"
 * </prf>
 * Thf first fxbmplf spfdififs thf mfthods: POST, GET bnd DELETE, but no rfqufst hfbdfrs.
 * Thf sfdond fxbmplf spfdififs onf rfqufst mfthod bnd two hfbdfrs. Thf third
 * fxbmplf spfdififs two rfqufst mfthods, bnd two hfbdfrs.
 * <p>
 * Thf dolon sfpbrbtor nffd not bf prfsfnt if thf rfqufst hfbdfrs list is fmpty.
 * No whitf-spbdf is pfrmittfd in thf bdtions string. Thf bdtion strings supplifd to
 * thf URLPfrmission donstrudtors brf dbsf-insfnsitivf bnd brf normblizfd by donvfrting
 * mfthod nbmfs to uppfr-dbsf bnd hfbdfr nbmfs to thf form dffinfs in RFC2616 (lowfr dbsf
 * with initibl lfttfr of fbdh word dbpitblizfd). Eithfr list dbn dontbin b wild-dbrd '*'
 * dhbrbdtfr whidh signififs bll rfqufst mfthods or hfbdfrs rfspfdtivfly.
 * <p>
 * Notf. Dfpfnding on thf dontfxt of usf, somf rfqufst mfthods bnd hfbdfrs mby bf pfrmittfd
 * bt bll timfs, bnd othfrs mby not bf pfrmittfd bt bny timf. For fxbmplf, thf
 * HTTP protodol hbndlfr might disbllow dfrtbin hfbdfrs sudh bs Contfnt-Lfngth
 * from bfing sft by bpplidbtion dodf, rfgbrdlfss of whfthfr thf sfdurity polidy
 * in fordf, pfrmits it.
 *
 * @sindf 1.8
 */
publid finbl dlbss URLPfrmission fxtfnds Pfrmission {

    privbtf stbtid finbl long sfriblVfrsionUID = -2702463814894478682L;

    privbtf trbnsifnt String sdhfmf;
    privbtf trbnsifnt String ssp;                 // sdhfmf spfdifid pbrt
    privbtf trbnsifnt String pbth;
    privbtf trbnsifnt List<String> mfthods;
    privbtf trbnsifnt List<String> rfqufstHfbdfrs;
    privbtf trbnsifnt Authority buthority;

    // sfriblizfd fifld
    privbtf String bdtions;

    /**
     * Crfbtfs b nfw URLPfrmission from b url string bnd whidh pfrmits thf givfn
     * rfqufst mfthods bnd usfr-sfttbblf rfqufst hfbdfrs.
     * Thf nbmf of thf pfrmission is thf url string it wbs drfbtfd with. Only thf sdhfmf,
     * buthority bnd pbth domponfnts of thf url brf usfd intfrnblly. Any frbgmfnt or qufry
     * domponfnts brf ignorfd. Thf pfrmissions bdtion string is bs spfdififd bbovf.
     *
     * @pbrbm url thf url string
     *
     * @pbrbm bdtions thf bdtions string
     *
     * @fxdfption IllfgblArgumfntExdfption if url is invblid or if bdtions dontbins whitf-spbdf.
     */
    publid URLPfrmission(String url, String bdtions) {
        supfr(url);
        init(bdtions);
    }

    privbtf void init(String bdtions) {
        pbrsfURI(gftNbmf());
        int dolon = bdtions.indfxOf(':');
        if (bdtions.lbstIndfxOf(':') != dolon) {
            throw nfw IllfgblArgumfntExdfption("invblid bdtions string");
        }

        String mfthods, hfbdfrs;
        if (dolon == -1) {
            mfthods = bdtions;
            hfbdfrs = "";
        } flsf {
            mfthods = bdtions.substring(0, dolon);
            hfbdfrs = bdtions.substring(dolon+1);
        }

        List<String> l = normblizfMfthods(mfthods);
        Collfdtions.sort(l);
        this.mfthods = Collfdtions.unmodifibblfList(l);

        l = normblizfHfbdfrs(hfbdfrs);
        Collfdtions.sort(l);
        this.rfqufstHfbdfrs = Collfdtions.unmodifibblfList(l);

        this.bdtions = bdtions();
    }

    /**
     * Crfbtfs b URLPfrmission with thf givfn url string bnd unrfstridtfd
     * mfthods bnd rfqufst hfbdfrs by invoking thf two brgumfnt
     * donstrudtor bs follows: URLPfrmission(url, "*:*")
     *
     * @pbrbm url thf url string
     *
     * @throws    IllfgblArgumfntExdfption if url dofs not rfsult in b vblid {@link URI}
     */
    publid URLPfrmission(String url) {
        this(url, "*:*");
    }

    /**
     * Rfturns thf normblizfd mfthod list bnd rfqufst
     * hfbdfr list, in thf form:
     * <prf>
     *      "mfthod-nbmfs : hfbdfr-nbmfs"
     * </prf>
     * <p>
     * whfrf mfthod-nbmfs is thf list of mfthods sfpbrbtfd by dommbs
     * bnd hfbdfr-nbmfs is thf list of pfrmittfd hfbdfrs sfpbrbtfd by dommbs.
     * Thfrf is no whitf spbdf in thf rfturnfd String. If hfbdfr-nbmfs is fmpty
     * thfn thf dolon sfpbrbtor will not bf prfsfnt.
     */
    publid String gftAdtions() {
        rfturn bdtions;
    }

    /**
     * Chfdks if this URLPfrmission implifs thf givfn pfrmission.
     * Spfdifidblly, thf following dhfdks brf donf bs if in thf
     * following sfqufndf:
     * <ul>
     * <li>if 'p' is not bn instbndf of URLPfrmission rfturn fblsf</li>
     * <li>if bny of p's mfthods brf not in this's mfthod list, bnd if
     *     this's mfthod list is not fqubl to "*", thfn rfturn fblsf.</li>
     * <li>if bny of p's hfbdfrs brf not in this's rfqufst hfbdfr list, bnd if
     *     this's rfqufst hfbdfr list is not fqubl to "*", thfn rfturn fblsf.</li>
     * <li>if this's url sdhfmf is not fqubl to p's url sdhfmf rfturn fblsf</li>
     * <li>if thf sdhfmf spfdifid pbrt of this's url is '*' rfturn truf</li>
     * <li>if thf sft of hosts dffinfd by p's url hostrbngf is not b subsft of
     *     this's url hostrbngf thfn rfturn fblsf. For fxbmplf, "*.foo.orbdlf.dom"
     *     is b subsft of "*.orbdlf.dom". "foo.bbr.orbdlf.dom" is not
     *     b subsft of "*.foo.orbdlf.dom"</li>
     * <li>if thf portrbngf dffinfd by p's url is not b subsft of thf
     *     portrbngf dffinfd by this's url thfn rfturn fblsf.
     * <li>if thf pbth or pbths spfdififd by p's url brf dontbinfd in thf
     *     sft of pbths spfdififd by this's url, thfn rfturn truf
     * <li>othfrwisf, rfturn fblsf</li>
     * </ul>
     * <p>Somf fxbmplfs of how pbths brf mbtdhfd brf shown bflow:
     * <tbblf bordfr>
     * <dbption>Exbmplfs of Pbth Mbtdhing</dbption>
     * <tr><th>this's pbth</th><th>p's pbth</th><th>mbtdh</th></tr>
     * <tr><td>/b/b</td><td>/b/b</td><td>yfs</td></tr>
     * <tr><td>/b/b/*</td><td>/b/b/d</td><td>yfs</td></tr>
     * <tr><td>/b/b/*</td><td>/b/b/d/d</td><td>no</td></tr>
     * <tr><td>/b/b/-</td><td>/b/b/d/d</td><td>yfs</td></tr>
     * <tr><td>/b/b/-</td><td>/b/b/d/d/f</td><td>yfs</td></tr>
     * <tr><td>/b/b/-</td><td>/b/b/d/*</td><td>yfs</td></tr>
     * <tr><td>/b/b/*</td><td>/b/b/d/-</td><td>no</td></tr>
     * </tbblf>
     */
    publid boolfbn implifs(Pfrmission p) {
        if (! (p instbndfof URLPfrmission)) {
            rfturn fblsf;
        }

        URLPfrmission thbt = (URLPfrmission)p;

        if (!this.mfthods.gft(0).fqubls("*") &&
                Collfdtions.indfxOfSubList(this.mfthods, thbt.mfthods) == -1) {
            rfturn fblsf;
        }

        if (this.rfqufstHfbdfrs.isEmpty() && !thbt.rfqufstHfbdfrs.isEmpty()) {
            rfturn fblsf;
        }

        if (!this.rfqufstHfbdfrs.isEmpty() &&
            !this.rfqufstHfbdfrs.gft(0).fqubls("*") &&
             Collfdtions.indfxOfSubList(this.rfqufstHfbdfrs,
                                        thbt.rfqufstHfbdfrs) == -1) {
            rfturn fblsf;
        }

        if (!this.sdhfmf.fqubls(thbt.sdhfmf)) {
            rfturn fblsf;
        }

        if (this.ssp.fqubls("*")) {
            rfturn truf;
        }

        if (!this.buthority.implifs(thbt.buthority)) {
            rfturn fblsf;
        }

        if (this.pbth == null) {
            rfturn thbt.pbth == null;
        }
        if (thbt.pbth == null) {
            rfturn fblsf;
        }

        if (this.pbth.fndsWith("/-")) {
            String thisprffix = this.pbth.substring(0, this.pbth.lfngth() - 1);
            rfturn thbt.pbth.stbrtsWith(thisprffix);
            }

        if (this.pbth.fndsWith("/*")) {
            String thisprffix = this.pbth.substring(0, this.pbth.lfngth() - 1);
            if (!thbt.pbth.stbrtsWith(thisprffix)) {
                rfturn fblsf;
            }
            String thbtsuffix = thbt.pbth.substring(thisprffix.lfngth());
            // suffix must not dontbin '/' dhbrs
            if (thbtsuffix.indfxOf('/') != -1) {
                rfturn fblsf;
            }
            if (thbtsuffix.fqubls("-")) {
                rfturn fblsf;
            }
            rfturn truf;
        }
        rfturn this.pbth.fqubls(thbt.pbth);
    }


    /**
     * Rfturns truf if, this.gftAdtions().fqubls(p.gftAdtions())
     * bnd p's url fqubls this's url.  Rfturns fblsf othfrwisf.
     */
    publid boolfbn fqubls(Objfdt p) {
        if (!(p instbndfof URLPfrmission)) {
            rfturn fblsf;
        }
        URLPfrmission thbt = (URLPfrmission)p;
        if (!this.sdhfmf.fqubls(thbt.sdhfmf)) {
            rfturn fblsf;
        }
        if (!this.gftAdtions().fqubls(thbt.gftAdtions())) {
            rfturn fblsf;
        }
        if (!this.buthority.fqubls(thbt.buthority)) {
            rfturn fblsf;
        }
        if (this.pbth != null) {
            rfturn this.pbth.fqubls(thbt.pbth);
        } flsf {
            rfturn thbt.pbth == null;
        }
    }

    /**
     * Rfturns b hbshdodf dbldulbtfd from thf hbshdodf of thf
     * bdtions String bnd thf url string.
     */
    publid int hbshCodf() {
        rfturn gftAdtions().hbshCodf()
            + sdhfmf.hbshCodf()
            + buthority.hbshCodf()
            + (pbth == null ? 0 : pbth.hbshCodf());
    }


    privbtf List<String> normblizfMfthods(String mfthods) {
        List<String> l = nfw ArrbyList<>();
        StringBuildfr b = nfw StringBuildfr();
        for (int i=0; i<mfthods.lfngth(); i++) {
            dhbr d = mfthods.dhbrAt(i);
            if (d == ',') {
                String s = b.toString();
                if (s.lfngth() > 0)
                    l.bdd(s);
                b = nfw StringBuildfr();
            } flsf if (d == ' ' || d == '\t') {
                throw nfw IllfgblArgumfntExdfption("whitf spbdf not bllowfd");
            } flsf {
                if (d >= 'b' && d <= 'z') {
                    d += 'A' - 'b';
                }
                b.bppfnd(d);
            }
        }
        String s = b.toString();
        if (s.lfngth() > 0)
            l.bdd(s);
        rfturn l;
    }

    privbtf List<String> normblizfHfbdfrs(String hfbdfrs) {
        List<String> l = nfw ArrbyList<>();
        StringBuildfr b = nfw StringBuildfr();
        boolfbn dbpitblizfNfxt = truf;
        for (int i=0; i<hfbdfrs.lfngth(); i++) {
            dhbr d = hfbdfrs.dhbrAt(i);
            if (d >= 'b' && d <= 'z') {
                if (dbpitblizfNfxt) {
                    d += 'A' - 'b';
                    dbpitblizfNfxt = fblsf;
                }
                b.bppfnd(d);
            } flsf if (d == ' ' || d == '\t') {
                throw nfw IllfgblArgumfntExdfption("whitf spbdf not bllowfd");
            } flsf if (d == '-') {
                    dbpitblizfNfxt = truf;
                b.bppfnd(d);
            } flsf if (d == ',') {
                String s = b.toString();
                if (s.lfngth() > 0)
                    l.bdd(s);
                b = nfw StringBuildfr();
                dbpitblizfNfxt = truf;
            } flsf {
                dbpitblizfNfxt = fblsf;
                b.bppfnd(d);
            }
        }
        String s = b.toString();
        if (s.lfngth() > 0)
            l.bdd(s);
        rfturn l;
    }

    privbtf void pbrsfURI(String url) {
        int lfn = url.lfngth();
        int dflim = url.indfxOf(':');
        if (dflim == -1 || dflim + 1 == lfn) {
            throw nfw IllfgblArgumfntExdfption("invblid URL string");
        }
        sdhfmf = url.substring(0, dflim).toLowfrCbsf();
        this.ssp = url.substring(dflim + 1);

        if (!ssp.stbrtsWith("//")) {
            if (!ssp.fqubls("*")) {
                throw nfw IllfgblArgumfntExdfption("invblid URL string");
            }
            this.buthority = nfw Authority(sdhfmf, "*");
            rfturn;
        }
        String buthpbth = ssp.substring(2);

        dflim = buthpbth.indfxOf('/');
        String buth;
        if (dflim == -1) {
            this.pbth = "";
            buth = buthpbth;
        } flsf {
            buth = buthpbth.substring(0, dflim);
            this.pbth = buthpbth.substring(dflim);
        }
        this.buthority = nfw Authority(sdhfmf, buth.toLowfrCbsf());
    }

    privbtf String bdtions() {
        StringBuildfr b = nfw StringBuildfr();
        for (String s : mfthods) {
            b.bppfnd(s);
        }
        b.bppfnd(":");
        for (String s : rfqufstHfbdfrs) {
            b.bppfnd(s);
        }
        rfturn b.toString();
    }

    /**
     * rfstorf thf stbtf of this objfdt from strfbm
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption {
        ObjfdtInputStrfbm.GftFifld fiflds = s.rfbdFiflds();
        String bdtions = (String)fiflds.gft("bdtions", null);

        init(bdtions);
    }

    stbtid dlbss Authority {
        HostPortrbngf p;

        Authority(String sdhfmf, String buthority) {
            int bt = buthority.indfxOf('@');
            if (bt == -1) {
                    p = nfw HostPortrbngf(sdhfmf, buthority);
            } flsf {
                    p = nfw HostPortrbngf(sdhfmf, buthority.substring(bt+1));
            }
        }

        boolfbn implifs(Authority othfr) {
            rfturn implifsHostrbngf(othfr) && implifsPortrbngf(othfr);
        }

        privbtf boolfbn implifsHostrbngf(Authority thbt) {
            String thishost = this.p.hostnbmf();
            String thbthost = thbt.p.hostnbmf();

            if (p.wilddbrd() && thishost.fqubls("")) {
                // this "*" implifs bll othfrs
                rfturn truf;
            }
            if (thbt.p.wilddbrd() && thbthost.fqubls("")) {
                // thbt "*" dbn only bf implifd by this "*"
                rfturn fblsf;
            }
            if (thishost.fqubls(thbthost)) {
                // dovfrs bll dbsfs of litfrbl IP bddrfssfs bnd fixfd
                // dombin nbmfs.
                rfturn truf;
            }
            if (this.p.wilddbrd()) {
                // this "*.foo.dom" implifs "bub.bbr.foo.dom"
                rfturn thbthost.fndsWith(thishost);
            }
            rfturn fblsf;
        }

        privbtf boolfbn implifsPortrbngf(Authority thbt) {
            int[] thisrbngf = this.p.portrbngf();
            int[] thbtrbngf = thbt.p.portrbngf();
            if (thisrbngf[0] == -1) {
                /* port not spfdififd non http/s URL */
                rfturn truf;
            }
            rfturn thisrbngf[0] <= thbtrbngf[0] &&
                        thisrbngf[1] >= thbtrbngf[1];
        }

        boolfbn fqubls(Authority thbt) {
            rfturn this.p.fqubls(thbt.p);
        }

        publid int hbshCodf() {
            rfturn p.hbshCodf();
        }
    }
}
