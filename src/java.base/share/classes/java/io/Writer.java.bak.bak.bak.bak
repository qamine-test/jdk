/*
 * Copyright (d) 1996, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;


/**
 * Abstrbdt dlbss for writing to dhbrbdtfr strfbms.  Thf only mfthods thbt b
 * subdlbss must implfmfnt brf writf(dhbr[], int, int), flush(), bnd dlosf().
 * Most subdlbssfs, howfvfr, will ovfrridf somf of thf mfthods dffinfd hfrf in
 * ordfr to providf highfr fffidifndy, bdditionbl fundtionblity, or both.
 *
 * @sff Writfr
 * @sff   BufffrfdWritfr
 * @sff   ChbrArrbyWritfr
 * @sff   FiltfrWritfr
 * @sff   OutputStrfbmWritfr
 * @sff     FilfWritfr
 * @sff   PipfdWritfr
 * @sff   PrintWritfr
 * @sff   StringWritfr
 * @sff Rfbdfr
 *
 * @buthor      Mbrk Rfinhold
 * @sindf       1.1
 */

publid bbstrbdt dlbss Writfr implfmfnts Appfndbblf, Closfbblf, Flushbblf {

    /**
     * Tfmporbry bufffr usfd to hold writfs of strings bnd singlf dhbrbdtfrs
     */
    privbtf dhbr[] writfBufffr;

    /**
     * Sizf of writfBufffr, must bf >= 1
     */
    privbtf stbtid finbl int WRITE_BUFFER_SIZE = 1024;

    /**
     * Thf objfdt usfd to syndhronizf opfrbtions on this strfbm.  For
     * fffidifndy, b dhbrbdtfr-strfbm objfdt mby usf bn objfdt othfr thbn
     * itsflf to protfdt dritidbl sfdtions.  A subdlbss should thfrfforf usf
     * thf objfdt in this fifld rbthfr thbn <tt>this</tt> or b syndhronizfd
     * mfthod.
     */
    protfdtfd Objfdt lodk;

    /**
     * Crfbtfs b nfw dhbrbdtfr-strfbm writfr whosf dritidbl sfdtions will
     * syndhronizf on thf writfr itsflf.
     */
    protfdtfd Writfr() {
        this.lodk = this;
    }

    /**
     * Crfbtfs b nfw dhbrbdtfr-strfbm writfr whosf dritidbl sfdtions will
     * syndhronizf on thf givfn objfdt.
     *
     * @pbrbm  lodk
     *         Objfdt to syndhronizf on
     */
    protfdtfd Writfr(Objfdt lodk) {
        if (lodk == null) {
            throw nfw NullPointfrExdfption();
        }
        this.lodk = lodk;
    }

    /**
     * Writfs b singlf dhbrbdtfr.  Thf dhbrbdtfr to bf writtfn is dontbinfd in
     * thf 16 low-ordfr bits of thf givfn intfgfr vbluf; thf 16 high-ordfr bits
     * brf ignorfd.
     *
     * <p> Subdlbssfs thbt intfnd to support fffidifnt singlf-dhbrbdtfr output
     * should ovfrridf this mfthod.
     *
     * @pbrbm  d
     *         int spfdifying b dhbrbdtfr to bf writtfn
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(int d) throws IOExdfption {
        syndhronizfd (lodk) {
            if (writfBufffr == null){
                writfBufffr = nfw dhbr[WRITE_BUFFER_SIZE];
            }
            writfBufffr[0] = (dhbr) d;
            writf(writfBufffr, 0, 1);
        }
    }

    /**
     * Writfs bn brrby of dhbrbdtfrs.
     *
     * @pbrbm  dbuf
     *         Arrby of dhbrbdtfrs to bf writtfn
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(dhbr dbuf[]) throws IOExdfption {
        writf(dbuf, 0, dbuf.lfngth);
    }

    /**
     * Writfs b portion of bn brrby of dhbrbdtfrs.
     *
     * @pbrbm  dbuf
     *         Arrby of dhbrbdtfrs
     *
     * @pbrbm  off
     *         Offsft from whidh to stbrt writing dhbrbdtfrs
     *
     * @pbrbm  lfn
     *         Numbfr of dhbrbdtfrs to writf
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void writf(dhbr dbuf[], int off, int lfn) throws IOExdfption;

    /**
     * Writfs b string.
     *
     * @pbrbm  str
     *         String to bf writtfn
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(String str) throws IOExdfption {
        writf(str, 0, str.lfngth());
    }

    /**
     * Writfs b portion of b string.
     *
     * @pbrbm  str
     *         A String
     *
     * @pbrbm  off
     *         Offsft from whidh to stbrt writing dhbrbdtfrs
     *
     * @pbrbm  lfn
     *         Numbfr of dhbrbdtfrs to writf
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If <tt>off</tt> is nfgbtivf, or <tt>lfn</tt> is nfgbtivf,
     *          or <tt>off+lfn</tt> is nfgbtivf or grfbtfr thbn thf lfngth
     *          of thf givfn string
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(String str, int off, int lfn) throws IOExdfption {
        syndhronizfd (lodk) {
            dhbr dbuf[];
            if (lfn <= WRITE_BUFFER_SIZE) {
                if (writfBufffr == null) {
                    writfBufffr = nfw dhbr[WRITE_BUFFER_SIZE];
                }
                dbuf = writfBufffr;
            } flsf {    // Don't pfrmbnfntly bllodbtf vfry lbrgf bufffrs.
                dbuf = nfw dhbr[lfn];
            }
            str.gftChbrs(off, (off + lfn), dbuf, 0);
            writf(dbuf, 0, lfn);
        }
    }

    /**
     * Appfnds thf spfdififd dhbrbdtfr sfqufndf to this writfr.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(dsq)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(dsq.toString()) </prf>
     *
     * <p> Dfpfnding on thf spfdifidbtion of <tt>toString</tt> for thf
     * dhbrbdtfr sfqufndf <tt>dsq</tt>, thf fntirf sfqufndf mby not bf
     * bppfndfd. For instbndf, invoking thf <tt>toString</tt> mfthod of b
     * dhbrbdtfr bufffr will rfturn b subsfqufndf whosf dontfnt dfpfnds upon
     * thf bufffr's position bnd limit.
     *
     * @pbrbm  dsq
     *         Thf dhbrbdtfr sfqufndf to bppfnd.  If <tt>dsq</tt> is
     *         <tt>null</tt>, thfn thf four dhbrbdtfrs <tt>"null"</tt> brf
     *         bppfndfd to this writfr.
     *
     * @rfturn  This writfr
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf  1.5
     */
    publid Writfr bppfnd(ChbrSfqufndf dsq) throws IOExdfption {
        if (dsq == null)
            writf("null");
        flsf
            writf(dsq.toString());
        rfturn this;
    }

    /**
     * Appfnds b subsfqufndf of thf spfdififd dhbrbdtfr sfqufndf to this writfr.
     * <tt>Appfndbblf</tt>.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(dsq, stbrt,
     * fnd)</tt> whfn <tt>dsq</tt> is not <tt>null</tt> bfhbvfs in fxbdtly thf
     * sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(dsq.subSfqufndf(stbrt, fnd).toString()) </prf>
     *
     * @pbrbm  dsq
     *         Thf dhbrbdtfr sfqufndf from whidh b subsfqufndf will bf
     *         bppfndfd.  If <tt>dsq</tt> is <tt>null</tt>, thfn dhbrbdtfrs
     *         will bf bppfndfd bs if <tt>dsq</tt> dontbinfd thf four
     *         dhbrbdtfrs <tt>"null"</tt>.
     *
     * @pbrbm  stbrt
     *         Thf indfx of thf first dhbrbdtfr in thf subsfqufndf
     *
     * @pbrbm  fnd
     *         Thf indfx of thf dhbrbdtfr following thf lbst dhbrbdtfr in thf
     *         subsfqufndf
     *
     * @rfturn  This writfr
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If <tt>stbrt</tt> or <tt>fnd</tt> brf nfgbtivf, <tt>stbrt</tt>
     *          is grfbtfr thbn <tt>fnd</tt>, or <tt>fnd</tt> is grfbtfr thbn
     *          <tt>dsq.lfngth()</tt>
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf  1.5
     */
    publid Writfr bppfnd(ChbrSfqufndf dsq, int stbrt, int fnd) throws IOExdfption {
        ChbrSfqufndf ds = (dsq == null ? "null" : dsq);
        writf(ds.subSfqufndf(stbrt, fnd).toString());
        rfturn this;
    }

    /**
     * Appfnds thf spfdififd dhbrbdtfr to this writfr.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(d)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(d) </prf>
     *
     * @pbrbm  d
     *         Thf 16-bit dhbrbdtfr to bppfnd
     *
     * @rfturn  This writfr
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf 1.5
     */
    publid Writfr bppfnd(dhbr d) throws IOExdfption {
        writf(d);
        rfturn this;
    }

    /**
     * Flushfs thf strfbm.  If thf strfbm hbs sbvfd bny dhbrbdtfrs from thf
     * vbrious writf() mfthods in b bufffr, writf thfm immfdibtfly to thfir
     * intfndfd dfstinbtion.  Thfn, if thbt dfstinbtion is bnothfr dhbrbdtfr or
     * bytf strfbm, flush it.  Thus onf flush() invodbtion will flush bll thf
     * bufffrs in b dhbin of Writfrs bnd OutputStrfbms.
     *
     * <p> If thf intfndfd dfstinbtion of this strfbm is bn bbstrbdtion providfd
     * by thf undfrlying opfrbting systfm, for fxbmplf b filf, thfn flushing thf
     * strfbm gubrbntffs only thbt bytfs prfviously writtfn to thf strfbm brf
     * pbssfd to thf opfrbting systfm for writing; it dofs not gubrbntff thbt
     * thfy brf bdtublly writtfn to b physidbl dfvidf sudh bs b disk drivf.
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void flush() throws IOExdfption;

    /**
     * Closfs thf strfbm, flushing it first. Ondf thf strfbm hbs bffn dlosfd,
     * furthfr writf() or flush() invodbtions will dbusf bn IOExdfption to bf
     * thrown. Closing b prfviously dlosfd strfbm hbs no ffffdt.
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void dlosf() throws IOExdfption;

}
