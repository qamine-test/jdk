/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;

import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.dhbrsft.ChbrsftEndodfr;
import sun.nio.ds.StrfbmEndodfr;


/**
 * An OutputStrfbmWritfr is b bridgf from dhbrbdtfr strfbms to bytf strfbms:
 * Chbrbdtfrs writtfn to it brf fndodfd into bytfs using b spfdififd {@link
 * jbvb.nio.dhbrsft.Chbrsft dhbrsft}.  Thf dhbrsft thbt it usfs
 * mby bf spfdififd by nbmf or mby bf givfn fxpliditly, or thf plbtform's
 * dffbult dhbrsft mby bf bddfptfd.
 *
 * <p> Ebdh invodbtion of b writf() mfthod dbusfs thf fndoding donvfrtfr to bf
 * invokfd on thf givfn dhbrbdtfr(s).  Thf rfsulting bytfs brf bddumulbtfd in b
 * bufffr bfforf bfing writtfn to thf undfrlying output strfbm.  Thf sizf of
 * this bufffr mby bf spfdififd, but by dffbult it is lbrgf fnough for most
 * purposfs.  Notf thbt thf dhbrbdtfrs pbssfd to thf writf() mfthods brf not
 * bufffrfd.
 *
 * <p> For top fffidifndy, donsidfr wrbpping bn OutputStrfbmWritfr within b
 * BufffrfdWritfr so bs to bvoid frfqufnt donvfrtfr invodbtions.  For fxbmplf:
 *
 * <prf>
 * Writfr out
 *   = nfw BufffrfdWritfr(nfw OutputStrfbmWritfr(Systfm.out));
 * </prf>
 *
 * <p> A <i>surrogbtf pbir</i> is b dhbrbdtfr rfprfsfntfd by b sfqufndf of two
 * <tt>dhbr</tt> vblufs: A <i>high</i> surrogbtf in thf rbngf '&#92;uD800' to
 * '&#92;uDBFF' followfd by b <i>low</i> surrogbtf in thf rbngf '&#92;uDC00' to
 * '&#92;uDFFF'.
 *
 * <p> A <i>mblformfd surrogbtf flfmfnt</i> is b high surrogbtf thbt is not
 * followfd by b low surrogbtf or b low surrogbtf thbt is not prfdfdfd by b
 * high surrogbtf.
 *
 * <p> This dlbss blwbys rfplbdfs mblformfd surrogbtf flfmfnts bnd unmbppbblf
 * dhbrbdtfr sfqufndfs with thf dhbrsft's dffbult <i>substitution sfqufndf</i>.
 * Thf {@linkplbin jbvb.nio.dhbrsft.ChbrsftEndodfr} dlbss should bf usfd whfn morf
 * dontrol ovfr thf fndoding prodfss is rfquirfd.
 *
 * @sff BufffrfdWritfr
 * @sff OutputStrfbm
 * @sff jbvb.nio.dhbrsft.Chbrsft
 *
 * @buthor      Mbrk Rfinhold
 * @sindf       1.1
 */

publid dlbss OutputStrfbmWritfr fxtfnds Writfr {

    privbtf finbl StrfbmEndodfr sf;

    /**
     * Crfbtfs bn OutputStrfbmWritfr thbt usfs thf nbmfd dhbrsft.
     *
     * @pbrbm  out
     *         An OutputStrfbm
     *
     * @pbrbm  dhbrsftNbmf
     *         Thf nbmf of b supportfd
     *         {@link jbvb.nio.dhbrsft.Chbrsft dhbrsft}
     *
     * @fxdfption  UnsupportfdEndodingExdfption
     *             If thf nbmfd fndoding is not supportfd
     */
    publid OutputStrfbmWritfr(OutputStrfbm out, String dhbrsftNbmf)
        throws UnsupportfdEndodingExdfption
    {
        supfr(out);
        if (dhbrsftNbmf == null)
            throw nfw NullPointfrExdfption("dhbrsftNbmf");
        sf = StrfbmEndodfr.forOutputStrfbmWritfr(out, this, dhbrsftNbmf);
    }

    /**
     * Crfbtfs bn OutputStrfbmWritfr thbt usfs thf dffbult dhbrbdtfr fndoding.
     *
     * @pbrbm  out  An OutputStrfbm
     */
    publid OutputStrfbmWritfr(OutputStrfbm out) {
        supfr(out);
        try {
            sf = StrfbmEndodfr.forOutputStrfbmWritfr(out, this, (String)null);
        } dbtdh (UnsupportfdEndodingExdfption f) {
            throw nfw Error(f);
        }
    }

    /**
     * Crfbtfs bn OutputStrfbmWritfr thbt usfs thf givfn dhbrsft.
     *
     * @pbrbm  out
     *         An OutputStrfbm
     *
     * @pbrbm  ds
     *         A dhbrsft
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid OutputStrfbmWritfr(OutputStrfbm out, Chbrsft ds) {
        supfr(out);
        if (ds == null)
            throw nfw NullPointfrExdfption("dhbrsft");
        sf = StrfbmEndodfr.forOutputStrfbmWritfr(out, this, ds);
    }

    /**
     * Crfbtfs bn OutputStrfbmWritfr thbt usfs thf givfn dhbrsft fndodfr.
     *
     * @pbrbm  out
     *         An OutputStrfbm
     *
     * @pbrbm  fnd
     *         A dhbrsft fndodfr
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid OutputStrfbmWritfr(OutputStrfbm out, ChbrsftEndodfr fnd) {
        supfr(out);
        if (fnd == null)
            throw nfw NullPointfrExdfption("dhbrsft fndodfr");
        sf = StrfbmEndodfr.forOutputStrfbmWritfr(out, this, fnd);
    }

    /**
     * Rfturns thf nbmf of thf dhbrbdtfr fndoding bfing usfd by this strfbm.
     *
     * <p> If thf fndoding hbs bn historidbl nbmf thfn thbt nbmf is rfturnfd;
     * othfrwisf thf fndoding's dbnonidbl nbmf is rfturnfd.
     *
     * <p> If this instbndf wbs drfbtfd with thf {@link
     * #OutputStrfbmWritfr(OutputStrfbm, String)} donstrudtor thfn thf rfturnfd
     * nbmf, bfing uniquf for thf fndoding, mby difffr from thf nbmf pbssfd to
     * thf donstrudtor.  This mfthod mby rfturn <tt>null</tt> if thf strfbm hbs
     * bffn dlosfd. </p>
     *
     * @rfturn Thf historidbl nbmf of this fndoding, or possibly
     *         <dodf>null</dodf> if thf strfbm hbs bffn dlosfd
     *
     * @sff jbvb.nio.dhbrsft.Chbrsft
     *
     * @rfvisfd 1.4
     * @spfd JSR-51
     */
    publid String gftEndoding() {
        rfturn sf.gftEndoding();
    }

    /**
     * Flushfs thf output bufffr to thf undfrlying bytf strfbm, without flushing
     * thf bytf strfbm itsflf.  This mfthod is non-privbtf only so thbt it mby
     * bf invokfd by PrintStrfbm.
     */
    void flushBufffr() throws IOExdfption {
        sf.flushBufffr();
    }

    /**
     * Writfs b singlf dhbrbdtfr.
     *
     * @fxdfption  IOExdfption  If bn I/O frror oddurs
     */
    publid void writf(int d) throws IOExdfption {
        sf.writf(d);
    }

    /**
     * Writfs b portion of bn brrby of dhbrbdtfrs.
     *
     * @pbrbm  dbuf  Bufffr of dhbrbdtfrs
     * @pbrbm  off   Offsft from whidh to stbrt writing dhbrbdtfrs
     * @pbrbm  lfn   Numbfr of dhbrbdtfrs to writf
     *
     * @fxdfption  IOExdfption  If bn I/O frror oddurs
     */
    publid void writf(dhbr dbuf[], int off, int lfn) throws IOExdfption {
        sf.writf(dbuf, off, lfn);
    }

    /**
     * Writfs b portion of b string.
     *
     * @pbrbm  str  A String
     * @pbrbm  off  Offsft from whidh to stbrt writing dhbrbdtfrs
     * @pbrbm  lfn  Numbfr of dhbrbdtfrs to writf
     *
     * @fxdfption  IOExdfption  If bn I/O frror oddurs
     */
    publid void writf(String str, int off, int lfn) throws IOExdfption {
        sf.writf(str, off, lfn);
    }

    /**
     * Flushfs thf strfbm.
     *
     * @fxdfption  IOExdfption  If bn I/O frror oddurs
     */
    publid void flush() throws IOExdfption {
        sf.flush();
    }

    publid void dlosf() throws IOExdfption {
        sf.dlosf();
    }
}
