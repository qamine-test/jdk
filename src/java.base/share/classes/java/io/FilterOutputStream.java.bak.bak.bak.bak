/*
 * Copyright (d) 1994, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;

/**
 * This dlbss is thf supfrdlbss of bll dlbssfs thbt filtfr output
 * strfbms. Thfsf strfbms sit on top of bn blrfbdy fxisting output
 * strfbm (thf <i>undfrlying</i> output strfbm) whidh it usfs bs its
 * bbsid sink of dbtb, but possibly trbnsforming thf dbtb blong thf
 * wby or providing bdditionbl fundtionblity.
 * <p>
 * Thf dlbss <dodf>FiltfrOutputStrfbm</dodf> itsflf simply ovfrridfs
 * bll mfthods of <dodf>OutputStrfbm</dodf> with vfrsions thbt pbss
 * bll rfqufsts to thf undfrlying output strfbm. Subdlbssfs of
 * <dodf>FiltfrOutputStrfbm</dodf> mby furthfr ovfrridf somf of thfsf
 * mfthods bs wfll bs providf bdditionbl mfthods bnd fiflds.
 *
 * @buthor  Jonbthbn Pbynf
 * @sindf   1.0
 */
publid
dlbss FiltfrOutputStrfbm fxtfnds OutputStrfbm {
    /**
     * Thf undfrlying output strfbm to bf filtfrfd.
     */
    protfdtfd OutputStrfbm out;

    /**
     * Crfbtfs bn output strfbm filtfr built on top of thf spfdififd
     * undfrlying output strfbm.
     *
     * @pbrbm   out   thf undfrlying output strfbm to bf bssignfd to
     *                thf fifld <tt>this.out</tt> for lbtfr usf, or
     *                <dodf>null</dodf> if this instbndf is to bf
     *                drfbtfd without bn undfrlying strfbm.
     */
    publid FiltfrOutputStrfbm(OutputStrfbm out) {
        this.out = out;
    }

    /**
     * Writfs thf spfdififd <dodf>bytf</dodf> to this output strfbm.
     * <p>
     * Thf <dodf>writf</dodf> mfthod of <dodf>FiltfrOutputStrfbm</dodf>
     * dblls thf <dodf>writf</dodf> mfthod of its undfrlying output strfbm,
     * thbt is, it pfrforms <tt>out.writf(b)</tt>.
     * <p>
     * Implfmfnts thf bbstrbdt <tt>writf</tt> mfthod of <tt>OutputStrfbm</tt>.
     *
     * @pbrbm      b   thf <dodf>bytf</dodf>.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid void writf(int b) throws IOExdfption {
        out.writf(b);
    }

    /**
     * Writfs <dodf>b.lfngth</dodf> bytfs to this output strfbm.
     * <p>
     * Thf <dodf>writf</dodf> mfthod of <dodf>FiltfrOutputStrfbm</dodf>
     * dblls its <dodf>writf</dodf> mfthod of thrff brgumfnts with thf
     * brgumfnts <dodf>b</dodf>, <dodf>0</dodf>, bnd
     * <dodf>b.lfngth</dodf>.
     * <p>
     * Notf thbt this mfthod dofs not dbll thf onf-brgumfnt
     * <dodf>writf</dodf> mfthod of its undfrlying strfbm with thf singlf
     * brgumfnt <dodf>b</dodf>.
     *
     * @pbrbm      b   thf dbtb to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrOutputStrfbm#writf(bytf[], int, int)
     */
    publid void writf(bytf b[]) throws IOExdfption {
        writf(b, 0, b.lfngth);
    }

    /**
     * Writfs <dodf>lfn</dodf> bytfs from thf spfdififd
     * <dodf>bytf</dodf> brrby stbrting bt offsft <dodf>off</dodf> to
     * this output strfbm.
     * <p>
     * Thf <dodf>writf</dodf> mfthod of <dodf>FiltfrOutputStrfbm</dodf>
     * dblls thf <dodf>writf</dodf> mfthod of onf brgumfnt on fbdh
     * <dodf>bytf</dodf> to output.
     * <p>
     * Notf thbt this mfthod dofs not dbll thf <dodf>writf</dodf> mfthod
     * of its undfrlying input strfbm with thf sbmf brgumfnts. Subdlbssfs
     * of <dodf>FiltfrOutputStrfbm</dodf> should providf b morf fffidifnt
     * implfmfntbtion of this mfthod.
     *
     * @pbrbm      b     thf dbtb.
     * @pbrbm      off   thf stbrt offsft in thf dbtb.
     * @pbrbm      lfn   thf numbfr of bytfs to writf.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrOutputStrfbm#writf(int)
     */
    publid void writf(bytf b[], int off, int lfn) throws IOExdfption {
        if ((off | lfn | (b.lfngth - (lfn + off)) | (off + lfn)) < 0)
            throw nfw IndfxOutOfBoundsExdfption();

        for (int i = 0 ; i < lfn ; i++) {
            writf(b[off + i]);
        }
    }

    /**
     * Flushfs this output strfbm bnd fordfs bny bufffrfd output bytfs
     * to bf writtfn out to thf strfbm.
     * <p>
     * Thf <dodf>flush</dodf> mfthod of <dodf>FiltfrOutputStrfbm</dodf>
     * dblls thf <dodf>flush</dodf> mfthod of its undfrlying output strfbm.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrOutputStrfbm#out
     */
    publid void flush() throws IOExdfption {
        out.flush();
    }

    /**
     * Closfs this output strfbm bnd rflfbsfs bny systfm rfsourdfs
     * bssodibtfd with thf strfbm.
     * <p>
     * Thf <dodf>dlosf</dodf> mfthod of <dodf>FiltfrOutputStrfbm</dodf>
     * dblls its <dodf>flush</dodf> mfthod, bnd thfn dblls thf
     * <dodf>dlosf</dodf> mfthod of its undfrlying output strfbm.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrOutputStrfbm#flush()
     * @sff        jbvb.io.FiltfrOutputStrfbm#out
     */
    @SupprfssWbrnings("try")
    publid void dlosf() throws IOExdfption {
        try (OutputStrfbm ostrfbm = out) {
            flush();
        }
    }
}
