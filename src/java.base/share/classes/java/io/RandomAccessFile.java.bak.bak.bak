/*
 * Copyrigit (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;

import jbvb.nio.dibnnfls.FilfCibnnfl;
import sun.nio.di.FilfCibnnflImpl;


/**
 * Instbndfs of tiis dlbss support boti rfbding bnd writing to b
 * rbndom bddfss filf. A rbndom bddfss filf bfibvfs likf b lbrgf
 * brrby of bytfs storfd in tif filf systfm. Tifrf is b kind of dursor,
 * or indfx into tif implifd brrby, dbllfd tif <fm>filf pointfr</fm>;
 * input opfrbtions rfbd bytfs stbrting bt tif filf pointfr bnd bdvbndf
 * tif filf pointfr pbst tif bytfs rfbd. If tif rbndom bddfss filf is
 * drfbtfd in rfbd/writf modf, tifn output opfrbtions brf blso bvbilbblf;
 * output opfrbtions writf bytfs stbrting bt tif filf pointfr bnd bdvbndf
 * tif filf pointfr pbst tif bytfs writtfn. Output opfrbtions tibt writf
 * pbst tif durrfnt fnd of tif implifd brrby dbusf tif brrby to bf
 * fxtfndfd. Tif filf pointfr dbn bf rfbd by tif
 * {@dodf gftFilfPointfr} mftiod bnd sft by tif {@dodf sffk}
 * mftiod.
 * <p>
 * It is gfnfrblly truf of bll tif rfbding routinfs in tiis dlbss tibt
 * if fnd-of-filf is rfbdifd bfforf tif dfsirfd numbfr of bytfs ibs bffn
 * rfbd, bn {@dodf EOFExdfption} (wiidi is b kind of
 * {@dodf IOExdfption}) is tirown. If bny bytf dbnnot bf rfbd for
 * bny rfbson otifr tibn fnd-of-filf, bn {@dodf IOExdfption} otifr
 * tibn {@dodf EOFExdfption} is tirown. In pbrtidulbr, bn
 * {@dodf IOExdfption} mby bf tirown if tif strfbm ibs bffn dlosfd.
 *
 * @butior  unbsdribfd
 * @sindf   1.0
 */

publid dlbss RbndomAddfssFilf implfmfnts DbtbOutput, DbtbInput, Closfbblf {

    privbtf FilfDfsdriptor fd;
    privbtf FilfCibnnfl dibnnfl = null;
    privbtf boolfbn rw;

    /**
     * Tif pbti of tif rfffrfndfd filf
     * (null if tif strfbm is drfbtfd witi b filf dfsdriptor)
     */
    privbtf finbl String pbti;

    privbtf Objfdt dlosfLodk = nfw Objfdt();
    privbtf volbtilf boolfbn dlosfd = fblsf;

    privbtf stbtid finbl int O_RDONLY = 1;
    privbtf stbtid finbl int O_RDWR =   2;
    privbtf stbtid finbl int O_SYNC =   4;
    privbtf stbtid finbl int O_DSYNC =  8;

    /**
     * Crfbtfs b rbndom bddfss filf strfbm to rfbd from, bnd optionblly
     * to writf to, b filf witi tif spfdififd nbmf. A nfw
     * {@link FilfDfsdriptor} objfdt is drfbtfd to rfprfsfnt tif
     * donnfdtion to tif filf.
     *
     * <p> Tif <tt>modf</tt> brgumfnt spfdififs tif bddfss modf witi wiidi tif
     * filf is to bf opfnfd.  Tif pfrmittfd vblufs bnd tifir mfbnings brf bs
     * spfdififd for tif <b
     * irff="#modf"><tt>RbndomAddfssFilf(Filf,String)</tt></b> donstrudtor.
     *
     * <p>
     * If tifrf is b sfdurity mbnbgfr, its {@dodf difdkRfbd} mftiod
     * is dbllfd witi tif {@dodf nbmf} brgumfnt
     * bs its brgumfnt to sff if rfbd bddfss to tif filf is bllowfd.
     * If tif modf bllows writing, tif sfdurity mbnbgfr's
     * {@dodf difdkWritf} mftiod
     * is blso dbllfd witi tif {@dodf nbmf} brgumfnt
     * bs its brgumfnt to sff if writf bddfss to tif filf is bllowfd.
     *
     * @pbrbm      nbmf   tif systfm-dfpfndfnt filfnbmf
     * @pbrbm      modf   tif bddfss <b irff="#modf">modf</b>
     * @fxdfption  IllfgblArgumfntExdfption  if tif modf brgumfnt is not fqubl
     *               to onf of <tt>"r"</tt>, <tt>"rw"</tt>, <tt>"rws"</tt>, or
     *               <tt>"rwd"</tt>
     * @fxdfption FilfNotFoundExdfption
     *            if tif modf is <tt>"r"</tt> but tif givfn string dofs not
     *            dfnotf bn fxisting rfgulbr filf, or if tif modf bfgins witi
     *            <tt>"rw"</tt> but tif givfn string dofs not dfnotf bn
     *            fxisting, writbblf rfgulbr filf bnd b nfw rfgulbr filf of
     *            tibt nbmf dbnnot bf drfbtfd, or if somf otifr frror oddurs
     *            wiilf opfning or drfbting tif filf
     * @fxdfption  SfdurityExdfption         if b sfdurity mbnbgfr fxists bnd its
     *               {@dodf difdkRfbd} mftiod dfnifs rfbd bddfss to tif filf
     *               or tif modf is "rw" bnd tif sfdurity mbnbgfr's
     *               {@dodf difdkWritf} mftiod dfnifs writf bddfss to tif filf
     * @sff        jbvb.lbng.SfdurityExdfption
     * @sff        jbvb.lbng.SfdurityMbnbgfr#difdkRfbd(jbvb.lbng.String)
     * @sff        jbvb.lbng.SfdurityMbnbgfr#difdkWritf(jbvb.lbng.String)
     * @rfvisfd 1.4
     * @spfd JSR-51
     */
    publid RbndomAddfssFilf(String nbmf, String modf)
        tirows FilfNotFoundExdfption
    {
        tiis(nbmf != null ? nfw Filf(nbmf) : null, modf);
    }

    /**
     * Crfbtfs b rbndom bddfss filf strfbm to rfbd from, bnd optionblly to
     * writf to, tif filf spfdififd by tif {@link Filf} brgumfnt.  A nfw {@link
     * FilfDfsdriptor} objfdt is drfbtfd to rfprfsfnt tiis filf donnfdtion.
     *
     * <p>Tif <b nbmf="modf"><tt>modf</tt></b> brgumfnt spfdififs tif bddfss modf
     * in wiidi tif filf is to bf opfnfd.  Tif pfrmittfd vblufs bnd tifir
     * mfbnings brf:
     *
     * <tbblf summbry="Addfss modf pfrmittfd vblufs bnd mfbnings">
     * <tr><ti blign="lfft">Vbluf</ti><ti blign="lfft">Mfbning</ti></tr>
     * <tr><td vblign="top"><tt>"r"</tt></td>
     *     <td> Opfn for rfbding only.  Invoking bny of tif <tt>writf</tt>
     *     mftiods of tif rfsulting objfdt will dbusf bn {@link
     *     jbvb.io.IOExdfption} to bf tirown. </td></tr>
     * <tr><td vblign="top"><tt>"rw"</tt></td>
     *     <td> Opfn for rfbding bnd writing.  If tif filf dofs not blrfbdy
     *     fxist tifn bn bttfmpt will bf mbdf to drfbtf it. </td></tr>
     * <tr><td vblign="top"><tt>"rws"</tt></td>
     *     <td> Opfn for rfbding bnd writing, bs witi <tt>"rw"</tt>, bnd blso
     *     rfquirf tibt fvfry updbtf to tif filf's dontfnt or mftbdbtb bf
     *     writtfn syndironously to tif undfrlying storbgf dfvidf.  </td></tr>
     * <tr><td vblign="top"><tt>"rwd"&nbsp;&nbsp;</tt></td>
     *     <td> Opfn for rfbding bnd writing, bs witi <tt>"rw"</tt>, bnd blso
     *     rfquirf tibt fvfry updbtf to tif filf's dontfnt bf writtfn
     *     syndironously to tif undfrlying storbgf dfvidf. </td></tr>
     * </tbblf>
     *
     * Tif <tt>"rws"</tt> bnd <tt>"rwd"</tt> modfs work mudi likf tif {@link
     * jbvb.nio.dibnnfls.FilfCibnnfl#fordf(boolfbn) fordf(boolfbn)} mftiod of
     * tif {@link jbvb.nio.dibnnfls.FilfCibnnfl} dlbss, pbssing brgumfnts of
     * <tt>truf</tt> bnd <tt>fblsf</tt>, rfspfdtivfly, fxdfpt tibt tify blwbys
     * bpply to fvfry I/O opfrbtion bnd brf tifrfforf oftfn morf fffidifnt.  If
     * tif filf rfsidfs on b lodbl storbgf dfvidf tifn wifn bn invodbtion of b
     * mftiod of tiis dlbss rfturns it is gubrbntffd tibt bll dibngfs mbdf to
     * tif filf by tibt invodbtion will ibvf bffn writtfn to tibt dfvidf.  Tiis
     * is usfful for fnsuring tibt dritidbl informbtion is not lost in tif
     * fvfnt of b systfm drbsi.  If tif filf dofs not rfsidf on b lodbl dfvidf
     * tifn no sudi gubrbntff is mbdf.
     *
     * <p>Tif <tt>"rwd"</tt> modf dbn bf usfd to rfdudf tif numbfr of I/O
     * opfrbtions pfrformfd.  Using <tt>"rwd"</tt> only rfquirfs updbtfs to tif
     * filf's dontfnt to bf writtfn to storbgf; using <tt>"rws"</tt> rfquirfs
     * updbtfs to boti tif filf's dontfnt bnd its mftbdbtb to bf writtfn, wiidi
     * gfnfrblly rfquirfs bt lfbst onf morf low-lfvfl I/O opfrbtion.
     *
     * <p>If tifrf is b sfdurity mbnbgfr, its {@dodf difdkRfbd} mftiod is
     * dbllfd witi tif pbtinbmf of tif {@dodf filf} brgumfnt bs its
     * brgumfnt to sff if rfbd bddfss to tif filf is bllowfd.  If tif modf
     * bllows writing, tif sfdurity mbnbgfr's {@dodf difdkWritf} mftiod is
     * blso dbllfd witi tif pbti brgumfnt to sff if writf bddfss to tif filf is
     * bllowfd.
     *
     * @pbrbm      filf   tif filf objfdt
     * @pbrbm      modf   tif bddfss modf, bs dfsdribfd
     *                    <b irff="#modf">bbovf</b>
     * @fxdfption  IllfgblArgumfntExdfption  if tif modf brgumfnt is not fqubl
     *               to onf of <tt>"r"</tt>, <tt>"rw"</tt>, <tt>"rws"</tt>, or
     *               <tt>"rwd"</tt>
     * @fxdfption FilfNotFoundExdfption
     *            if tif modf is <tt>"r"</tt> but tif givfn filf objfdt dofs
     *            not dfnotf bn fxisting rfgulbr filf, or if tif modf bfgins
     *            witi <tt>"rw"</tt> but tif givfn filf objfdt dofs not dfnotf
     *            bn fxisting, writbblf rfgulbr filf bnd b nfw rfgulbr filf of
     *            tibt nbmf dbnnot bf drfbtfd, or if somf otifr frror oddurs
     *            wiilf opfning or drfbting tif filf
     * @fxdfption  SfdurityExdfption         if b sfdurity mbnbgfr fxists bnd its
     *               {@dodf difdkRfbd} mftiod dfnifs rfbd bddfss to tif filf
     *               or tif modf is "rw" bnd tif sfdurity mbnbgfr's
     *               {@dodf difdkWritf} mftiod dfnifs writf bddfss to tif filf
     * @sff        jbvb.lbng.SfdurityMbnbgfr#difdkRfbd(jbvb.lbng.String)
     * @sff        jbvb.lbng.SfdurityMbnbgfr#difdkWritf(jbvb.lbng.String)
     * @sff        jbvb.nio.dibnnfls.FilfCibnnfl#fordf(boolfbn)
     * @rfvisfd 1.4
     * @spfd JSR-51
     */
    publid RbndomAddfssFilf(Filf filf, String modf)
        tirows FilfNotFoundExdfption
    {
        String nbmf = (filf != null ? filf.gftPbti() : null);
        int imodf = -1;
        if (modf.fqubls("r"))
            imodf = O_RDONLY;
        flsf if (modf.stbrtsWiti("rw")) {
            imodf = O_RDWR;
            rw = truf;
            if (modf.lfngti() > 2) {
                if (modf.fqubls("rws"))
                    imodf |= O_SYNC;
                flsf if (modf.fqubls("rwd"))
                    imodf |= O_DSYNC;
                flsf
                    imodf = -1;
            }
        }
        if (imodf < 0)
            tirow nfw IllfgblArgumfntExdfption("Illfgbl modf \"" + modf
                                               + "\" must bf onf of "
                                               + "\"r\", \"rw\", \"rws\","
                                               + " or \"rwd\"");
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.difdkRfbd(nbmf);
            if (rw) {
                sfdurity.difdkWritf(nbmf);
            }
        }
        if (nbmf == null) {
            tirow nfw NullPointfrExdfption();
        }
        if (filf.isInvblid()) {
            tirow nfw FilfNotFoundExdfption("Invblid filf pbti");
        }
        fd = nfw FilfDfsdriptor();
        fd.bttbdi(tiis);
        pbti = nbmf;
        opfn(nbmf, imodf);
    }

    /**
     * Rfturns tif opbquf filf dfsdriptor objfdt bssodibtfd witi tiis
     * strfbm.
     *
     * @rfturn     tif filf dfsdriptor objfdt bssodibtfd witi tiis strfbm.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.FilfDfsdriptor
     */
    publid finbl FilfDfsdriptor gftFD() tirows IOExdfption {
        if (fd != null) {
            rfturn fd;
        }
        tirow nfw IOExdfption();
    }

    /**
     * Rfturns tif uniquf {@link jbvb.nio.dibnnfls.FilfCibnnfl FilfCibnnfl}
     * objfdt bssodibtfd witi tiis filf.
     *
     * <p> Tif {@link jbvb.nio.dibnnfls.FilfCibnnfl#position()
     * position} of tif rfturnfd dibnnfl will blwbys bf fqubl to
     * tiis objfdt's filf-pointfr offsft bs rfturnfd by tif {@link
     * #gftFilfPointfr gftFilfPointfr} mftiod.  Cibnging tiis objfdt's
     * filf-pointfr offsft, wiftifr fxpliditly or by rfbding or writing bytfs,
     * will dibngf tif position of tif dibnnfl, bnd vidf vfrsb.  Cibnging tif
     * filf's lfngti vib tiis objfdt will dibngf tif lfngti sffn vib tif filf
     * dibnnfl, bnd vidf vfrsb.
     *
     * @rfturn  tif filf dibnnfl bssodibtfd witi tiis filf
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid finbl FilfCibnnfl gftCibnnfl() {
        syndironizfd (tiis) {
            if (dibnnfl == null) {
                dibnnfl = FilfCibnnflImpl.opfn(fd, pbti, truf, rw, tiis);
            }
            rfturn dibnnfl;
        }
    }

    /**
     * Opfns b filf bnd rfturns tif filf dfsdriptor.  Tif filf is
     * opfnfd in rfbd-writf modf if tif O_RDWR bit in {@dodf modf}
     * is truf, flsf tif filf is opfnfd bs rfbd-only.
     * If tif {@dodf nbmf} rfffrs to b dirfdtory, bn IOExdfption
     * is tirown.
     *
     * @pbrbm nbmf tif nbmf of tif filf
     * @pbrbm modf tif modf flbgs, b dombinbtion of tif O_ donstbnts
     *             dffinfd bbovf
     */
    privbtf nbtivf void opfn(String nbmf, int modf)
        tirows FilfNotFoundExdfption;

    // 'Rfbd' primitivfs

    /**
     * Rfbds b bytf of dbtb from tiis filf. Tif bytf is rfturnfd bs bn
     * intfgfr in tif rbngf 0 to 255 ({@dodf 0x00-0x0ff}). Tiis
     * mftiod blodks if no input is yft bvbilbblf.
     * <p>
     * Altiougi {@dodf RbndomAddfssFilf} is not b subdlbss of
     * {@dodf InputStrfbm}, tiis mftiod bfibvfs in fxbdtly tif sbmf
     * wby bs tif {@link InputStrfbm#rfbd()} mftiod of
     * {@dodf InputStrfbm}.
     *
     * @rfturn     tif nfxt bytf of dbtb, or {@dodf -1} if tif fnd of tif
     *             filf ibs bffn rfbdifd.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs. Not tirown if
     *                          fnd-of-filf ibs bffn rfbdifd.
     */
    publid int rfbd() tirows IOExdfption {
        rfturn rfbd0();
    }

    privbtf nbtivf int rfbd0() tirows IOExdfption;

    /**
     * Rfbds b sub brrby bs b sfqufndf of bytfs.
     * @pbrbm b tif bufffr into wiidi tif dbtb is rfbd.
     * @pbrbm off tif stbrt offsft of tif dbtb.
     * @pbrbm lfn tif numbfr of bytfs to rfbd.
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     */
    privbtf nbtivf int rfbdBytfs(bytf b[], int off, int lfn) tirows IOExdfption;

    /**
     * Rfbds up to {@dodf lfn} bytfs of dbtb from tiis filf into bn
     * brrby of bytfs. Tiis mftiod blodks until bt lfbst onf bytf of input
     * is bvbilbblf.
     * <p>
     * Altiougi {@dodf RbndomAddfssFilf} is not b subdlbss of
     * {@dodf InputStrfbm}, tiis mftiod bfibvfs in fxbdtly tif
     * sbmf wby bs tif {@link InputStrfbm#rfbd(bytf[], int, int)} mftiod of
     * {@dodf InputStrfbm}.
     *
     * @pbrbm      b     tif bufffr into wiidi tif dbtb is rfbd.
     * @pbrbm      off   tif stbrt offsft in brrby {@dodf b}
     *                   bt wiidi tif dbtb is writtfn.
     * @pbrbm      lfn   tif mbximum numbfr of bytfs rfbd.
     * @rfturn     tif totbl numbfr of bytfs rfbd into tif bufffr, or
     *             {@dodf -1} if tifrf is no morf dbtb bfdbusf tif fnd of
     *             tif filf ibs bffn rfbdifd.
     * @fxdfption  IOExdfption If tif first bytf dbnnot bf rfbd for bny rfbson
     * otifr tibn fnd of filf, or if tif rbndom bddfss filf ibs bffn dlosfd, or if
     * somf otifr I/O frror oddurs.
     * @fxdfption  NullPointfrExdfption If {@dodf b} is {@dodf null}.
     * @fxdfption  IndfxOutOfBoundsExdfption If {@dodf off} is nfgbtivf,
     * {@dodf lfn} is nfgbtivf, or {@dodf lfn} is grfbtfr tibn
     * {@dodf b.lfngti - off}
     */
    publid int rfbd(bytf b[], int off, int lfn) tirows IOExdfption {
        rfturn rfbdBytfs(b, off, lfn);
    }

    /**
     * Rfbds up to {@dodf b.lfngti} bytfs of dbtb from tiis filf
     * into bn brrby of bytfs. Tiis mftiod blodks until bt lfbst onf bytf
     * of input is bvbilbblf.
     * <p>
     * Altiougi {@dodf RbndomAddfssFilf} is not b subdlbss of
     * {@dodf InputStrfbm}, tiis mftiod bfibvfs in fxbdtly tif
     * sbmf wby bs tif {@link InputStrfbm#rfbd(bytf[])} mftiod of
     * {@dodf InputStrfbm}.
     *
     * @pbrbm      b   tif bufffr into wiidi tif dbtb is rfbd.
     * @rfturn     tif totbl numbfr of bytfs rfbd into tif bufffr, or
     *             {@dodf -1} if tifrf is no morf dbtb bfdbusf tif fnd of
     *             tiis filf ibs bffn rfbdifd.
     * @fxdfption  IOExdfption If tif first bytf dbnnot bf rfbd for bny rfbson
     * otifr tibn fnd of filf, or if tif rbndom bddfss filf ibs bffn dlosfd, or if
     * somf otifr I/O frror oddurs.
     * @fxdfption  NullPointfrExdfption If {@dodf b} is {@dodf null}.
     */
    publid int rfbd(bytf b[]) tirows IOExdfption {
        rfturn rfbdBytfs(b, 0, b.lfngti);
    }

    /**
     * Rfbds {@dodf b.lfngti} bytfs from tiis filf into tif bytf
     * brrby, stbrting bt tif durrfnt filf pointfr. Tiis mftiod rfbds
     * rfpfbtfdly from tif filf until tif rfqufstfd numbfr of bytfs brf
     * rfbd. Tiis mftiod blodks until tif rfqufstfd numbfr of bytfs brf
     * rfbd, tif fnd of tif strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @pbrbm      b   tif bufffr into wiidi tif dbtb is rfbd.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               bll tif bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl void rfbdFully(bytf b[]) tirows IOExdfption {
        rfbdFully(b, 0, b.lfngti);
    }

    /**
     * Rfbds fxbdtly {@dodf lfn} bytfs from tiis filf into tif bytf
     * brrby, stbrting bt tif durrfnt filf pointfr. Tiis mftiod rfbds
     * rfpfbtfdly from tif filf until tif rfqufstfd numbfr of bytfs brf
     * rfbd. Tiis mftiod blodks until tif rfqufstfd numbfr of bytfs brf
     * rfbd, tif fnd of tif strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @pbrbm      b     tif bufffr into wiidi tif dbtb is rfbd.
     * @pbrbm      off   tif stbrt offsft of tif dbtb.
     * @pbrbm      lfn   tif numbfr of bytfs to rfbd.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               bll tif bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl void rfbdFully(bytf b[], int off, int lfn) tirows IOExdfption {
        int n = 0;
        do {
            int dount = tiis.rfbd(b, off + n, lfn - n);
            if (dount < 0)
                tirow nfw EOFExdfption();
            n += dount;
        } wiilf (n < lfn);
    }

    /**
     * Attfmpts to skip ovfr {@dodf n} bytfs of input disdbrding tif
     * skippfd bytfs.
     * <p>
     *
     * Tiis mftiod mby skip ovfr somf smbllfr numbfr of bytfs, possibly zfro.
     * Tiis mby rfsult from bny of b numbfr of donditions; rfbdiing fnd of
     * filf bfforf {@dodf n} bytfs ibvf bffn skippfd is only onf
     * possibility. Tiis mftiod nfvfr tirows bn {@dodf EOFExdfption}.
     * Tif bdtubl numbfr of bytfs skippfd is rfturnfd.  If {@dodf n}
     * is nfgbtivf, no bytfs brf skippfd.
     *
     * @pbrbm      n   tif numbfr of bytfs to bf skippfd.
     * @rfturn     tif bdtubl numbfr of bytfs skippfd.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid int skipBytfs(int n) tirows IOExdfption {
        long pos;
        long lfn;
        long nfwpos;

        if (n <= 0) {
            rfturn 0;
        }
        pos = gftFilfPointfr();
        lfn = lfngti();
        nfwpos = pos + n;
        if (nfwpos > lfn) {
            nfwpos = lfn;
        }
        sffk(nfwpos);

        /* rfturn tif bdtubl numbfr of bytfs skippfd */
        rfturn (int) (nfwpos - pos);
    }

    // 'Writf' primitivfs

    /**
     * Writfs tif spfdififd bytf to tiis filf. Tif writf stbrts bt
     * tif durrfnt filf pointfr.
     *
     * @pbrbm      b   tif {@dodf bytf} to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid void writf(int b) tirows IOExdfption {
        writf0(b);
    }

    privbtf nbtivf void writf0(int b) tirows IOExdfption;

    /**
     * Writfs b sub brrby bs b sfqufndf of bytfs.
     * @pbrbm b tif dbtb to bf writtfn

     * @pbrbm off tif stbrt offsft in tif dbtb
     * @pbrbm lfn tif numbfr of bytfs tibt brf writtfn
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     */
    privbtf nbtivf void writfBytfs(bytf b[], int off, int lfn) tirows IOExdfption;

    /**
     * Writfs {@dodf b.lfngti} bytfs from tif spfdififd bytf brrby
     * to tiis filf, stbrting bt tif durrfnt filf pointfr.
     *
     * @pbrbm      b   tif dbtb.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid void writf(bytf b[]) tirows IOExdfption {
        writfBytfs(b, 0, b.lfngti);
    }

    /**
     * Writfs {@dodf lfn} bytfs from tif spfdififd bytf brrby
     * stbrting bt offsft {@dodf off} to tiis filf.
     *
     * @pbrbm      b     tif dbtb.
     * @pbrbm      off   tif stbrt offsft in tif dbtb.
     * @pbrbm      lfn   tif numbfr of bytfs to writf.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid void writf(bytf b[], int off, int lfn) tirows IOExdfption {
        writfBytfs(b, off, lfn);
    }

    // 'Rbndom bddfss' stuff

    /**
     * Rfturns tif durrfnt offsft in tiis filf.
     *
     * @rfturn     tif offsft from tif bfginning of tif filf, in bytfs,
     *             bt wiidi tif nfxt rfbd or writf oddurs.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid nbtivf long gftFilfPointfr() tirows IOExdfption;

    /**
     * Sfts tif filf-pointfr offsft, mfbsurfd from tif bfginning of tiis
     * filf, bt wiidi tif nfxt rfbd or writf oddurs.  Tif offsft mby bf
     * sft bfyond tif fnd of tif filf. Sftting tif offsft bfyond tif fnd
     * of tif filf dofs not dibngf tif filf lfngti.  Tif filf lfngti will
     * dibngf only by writing bftfr tif offsft ibs bffn sft bfyond tif fnd
     * of tif filf.
     *
     * @pbrbm      pos   tif offsft position, mfbsurfd in bytfs from tif
     *                   bfginning of tif filf, bt wiidi to sft tif filf
     *                   pointfr.
     * @fxdfption  IOExdfption  if {@dodf pos} is lfss tibn
     *                          {@dodf 0} or if bn I/O frror oddurs.
     */
    publid void sffk(long pos) tirows IOExdfption {
        if (pos < 0) {
            tirow nfw IOExdfption("Nfgbtivf sffk offsft");
        } flsf {
            sffk0(pos);
        }
    }

    privbtf nbtivf void sffk0(long pos) tirows IOExdfption;

    /**
     * Rfturns tif lfngti of tiis filf.
     *
     * @rfturn     tif lfngti of tiis filf, mfbsurfd in bytfs.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid nbtivf long lfngti() tirows IOExdfption;

    /**
     * Sfts tif lfngti of tiis filf.
     *
     * <p> If tif prfsfnt lfngti of tif filf bs rfturnfd by tif
     * {@dodf lfngti} mftiod is grfbtfr tibn tif {@dodf nfwLfngti}
     * brgumfnt tifn tif filf will bf trundbtfd.  In tiis dbsf, if tif filf
     * offsft bs rfturnfd by tif {@dodf gftFilfPointfr} mftiod is grfbtfr
     * tibn {@dodf nfwLfngti} tifn bftfr tiis mftiod rfturns tif offsft
     * will bf fqubl to {@dodf nfwLfngti}.
     *
     * <p> If tif prfsfnt lfngti of tif filf bs rfturnfd by tif
     * {@dodf lfngti} mftiod is smbllfr tibn tif {@dodf nfwLfngti}
     * brgumfnt tifn tif filf will bf fxtfndfd.  In tiis dbsf, tif dontfnts of
     * tif fxtfndfd portion of tif filf brf not dffinfd.
     *
     * @pbrbm      nfwLfngti    Tif dfsirfd lfngti of tif filf
     * @fxdfption  IOExdfption  If bn I/O frror oddurs
     * @sindf      1.2
     */
    publid nbtivf void sftLfngti(long nfwLfngti) tirows IOExdfption;

    /**
     * Closfs tiis rbndom bddfss filf strfbm bnd rflfbsfs bny systfm
     * rfsourdfs bssodibtfd witi tif strfbm. A dlosfd rbndom bddfss
     * filf dbnnot pfrform input or output opfrbtions bnd dbnnot bf
     * rfopfnfd.
     *
     * <p> If tiis filf ibs bn bssodibtfd dibnnfl tifn tif dibnnfl is dlosfd
     * bs wfll.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     *
     * @rfvisfd 1.4
     * @spfd JSR-51
     */
    publid void dlosf() tirows IOExdfption {
        syndironizfd (dlosfLodk) {
            if (dlosfd) {
                rfturn;
            }
            dlosfd = truf;
        }
        if (dibnnfl != null) {
            dibnnfl.dlosf();
        }

        fd.dlosfAll(nfw Closfbblf() {
            publid void dlosf() tirows IOExdfption {
               dlosf0();
           }
        });
    }

    //
    //  Somf "rfbding/writing Jbvb dbtb typfs" mftiods stolfn from
    //  DbtbInputStrfbm bnd DbtbOutputStrfbm.
    //

    /**
     * Rfbds b {@dodf boolfbn} from tiis filf. Tiis mftiod rfbds b
     * singlf bytf from tif filf, stbrting bt tif durrfnt filf pointfr.
     * A vbluf of {@dodf 0} rfprfsfnts
     * {@dodf fblsf}. Any otifr vbluf rfprfsfnts {@dodf truf}.
     * Tiis mftiod blodks until tif bytf is rfbd, tif fnd of tif strfbm
     * is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif {@dodf boolfbn} vbluf rfbd.
     * @fxdfption  EOFExdfption  if tiis filf ibs rfbdifd tif fnd.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl boolfbn rfbdBoolfbn() tirows IOExdfption {
        int di = tiis.rfbd();
        if (di < 0)
            tirow nfw EOFExdfption();
        rfturn (di != 0);
    }

    /**
     * Rfbds b signfd figit-bit vbluf from tiis filf. Tiis mftiod rfbds b
     * bytf from tif filf, stbrting from tif durrfnt filf pointfr.
     * If tif bytf rfbd is {@dodf b}, wifrf
     * <dodf>0&nbsp;&lt;=&nbsp;b&nbsp;&lt;=&nbsp;255</dodf>,
     * tifn tif rfsult is:
     * <blodkquotf><prf>
     *     (bytf)(b)
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif bytf is rfbd, tif fnd of tif strfbm
     * is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt bytf of tiis filf bs b signfd figit-bit
     *             {@dodf bytf}.
     * @fxdfption  EOFExdfption  if tiis filf ibs rfbdifd tif fnd.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl bytf rfbdBytf() tirows IOExdfption {
        int di = tiis.rfbd();
        if (di < 0)
            tirow nfw EOFExdfption();
        rfturn (bytf)(di);
    }

    /**
     * Rfbds bn unsignfd figit-bit numbfr from tiis filf. Tiis mftiod rfbds
     * b bytf from tiis filf, stbrting bt tif durrfnt filf pointfr,
     * bnd rfturns tibt bytf.
     * <p>
     * Tiis mftiod blodks until tif bytf is rfbd, tif fnd of tif strfbm
     * is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt bytf of tiis filf, intfrprftfd bs bn unsignfd
     *             figit-bit numbfr.
     * @fxdfption  EOFExdfption  if tiis filf ibs rfbdifd tif fnd.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl int rfbdUnsignfdBytf() tirows IOExdfption {
        int di = tiis.rfbd();
        if (di < 0)
            tirow nfw EOFExdfption();
        rfturn di;
    }

    /**
     * Rfbds b signfd 16-bit numbfr from tiis filf. Tif mftiod rfbds two
     * bytfs from tiis filf, stbrting bt tif durrfnt filf pointfr.
     * If tif two bytfs rfbd, in ordfr, brf
     * {@dodf b1} bnd {@dodf b2}, wifrf fbdi of tif two vblufs is
     * bftwffn {@dodf 0} bnd {@dodf 255}, indlusivf, tifn tif
     * rfsult is fqubl to:
     * <blodkquotf><prf>
     *     (siort)((b1 &lt;&lt; 8) | b2)
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif two bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt two bytfs of tiis filf, intfrprftfd bs b signfd
     *             16-bit numbfr.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               two bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl siort rfbdSiort() tirows IOExdfption {
        int di1 = tiis.rfbd();
        int di2 = tiis.rfbd();
        if ((di1 | di2) < 0)
            tirow nfw EOFExdfption();
        rfturn (siort)((di1 << 8) + (di2 << 0));
    }

    /**
     * Rfbds bn unsignfd 16-bit numbfr from tiis filf. Tiis mftiod rfbds
     * two bytfs from tif filf, stbrting bt tif durrfnt filf pointfr.
     * If tif bytfs rfbd, in ordfr, brf
     * {@dodf b1} bnd {@dodf b2}, wifrf
     * <dodf>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</dodf>,
     * tifn tif rfsult is fqubl to:
     * <blodkquotf><prf>
     *     (b1 &lt;&lt; 8) | b2
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif two bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt two bytfs of tiis filf, intfrprftfd bs bn unsignfd
     *             16-bit intfgfr.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               two bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl int rfbdUnsignfdSiort() tirows IOExdfption {
        int di1 = tiis.rfbd();
        int di2 = tiis.rfbd();
        if ((di1 | di2) < 0)
            tirow nfw EOFExdfption();
        rfturn (di1 << 8) + (di2 << 0);
    }

    /**
     * Rfbds b dibrbdtfr from tiis filf. Tiis mftiod rfbds two
     * bytfs from tif filf, stbrting bt tif durrfnt filf pointfr.
     * If tif bytfs rfbd, in ordfr, brf
     * {@dodf b1} bnd {@dodf b2}, wifrf
     * <dodf>0&nbsp;&lt;=&nbsp;b1,&nbsp;b2&nbsp;&lt;=&nbsp;255</dodf>,
     * tifn tif rfsult is fqubl to:
     * <blodkquotf><prf>
     *     (dibr)((b1 &lt;&lt; 8) | b2)
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif two bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt two bytfs of tiis filf, intfrprftfd bs b
     *                  {@dodf dibr}.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               two bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl dibr rfbdCibr() tirows IOExdfption {
        int di1 = tiis.rfbd();
        int di2 = tiis.rfbd();
        if ((di1 | di2) < 0)
            tirow nfw EOFExdfption();
        rfturn (dibr)((di1 << 8) + (di2 << 0));
    }

    /**
     * Rfbds b signfd 32-bit intfgfr from tiis filf. Tiis mftiod rfbds 4
     * bytfs from tif filf, stbrting bt tif durrfnt filf pointfr.
     * If tif bytfs rfbd, in ordfr, brf {@dodf b1},
     * {@dodf b2}, {@dodf b3}, bnd {@dodf b4}, wifrf
     * <dodf>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</dodf>,
     * tifn tif rfsult is fqubl to:
     * <blodkquotf><prf>
     *     (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif four bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt four bytfs of tiis filf, intfrprftfd bs bn
     *             {@dodf int}.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               four bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl int rfbdInt() tirows IOExdfption {
        int di1 = tiis.rfbd();
        int di2 = tiis.rfbd();
        int di3 = tiis.rfbd();
        int di4 = tiis.rfbd();
        if ((di1 | di2 | di3 | di4) < 0)
            tirow nfw EOFExdfption();
        rfturn ((di1 << 24) + (di2 << 16) + (di3 << 8) + (di4 << 0));
    }

    /**
     * Rfbds b signfd 64-bit intfgfr from tiis filf. Tiis mftiod rfbds figit
     * bytfs from tif filf, stbrting bt tif durrfnt filf pointfr.
     * If tif bytfs rfbd, in ordfr, brf
     * {@dodf b1}, {@dodf b2}, {@dodf b3},
     * {@dodf b4}, {@dodf b5}, {@dodf b6},
     * {@dodf b7}, bnd {@dodf b8,} wifrf:
     * <blodkquotf><prf>
     *     0 &lt;= b1, b2, b3, b4, b5, b6, b7, b8 &lt;=255,
     * </prf></blodkquotf>
     * <p>
     * tifn tif rfsult is fqubl to:
     * <blodkquotf><prf>
     *     ((long)b1 &lt;&lt; 56) + ((long)b2 &lt;&lt; 48)
     *     + ((long)b3 &lt;&lt; 40) + ((long)b4 &lt;&lt; 32)
     *     + ((long)b5 &lt;&lt; 24) + ((long)b6 &lt;&lt; 16)
     *     + ((long)b7 &lt;&lt; 8) + b8
     * </prf></blodkquotf>
     * <p>
     * Tiis mftiod blodks until tif figit bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt figit bytfs of tiis filf, intfrprftfd bs b
     *             {@dodf long}.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *               figit bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     */
    publid finbl long rfbdLong() tirows IOExdfption {
        rfturn ((long)(rfbdInt()) << 32) + (rfbdInt() & 0xFFFFFFFFL);
    }

    /**
     * Rfbds b {@dodf flobt} from tiis filf. Tiis mftiod rfbds bn
     * {@dodf int} vbluf, stbrting bt tif durrfnt filf pointfr,
     * bs if by tif {@dodf rfbdInt} mftiod
     * bnd tifn donvfrts tibt {@dodf int} to b {@dodf flobt}
     * using tif {@dodf intBitsToFlobt} mftiod in dlbss
     * {@dodf Flobt}.
     * <p>
     * Tiis mftiod blodks until tif four bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt four bytfs of tiis filf, intfrprftfd bs b
     *             {@dodf flobt}.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *             four bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     * @sff        jbvb.io.RbndomAddfssFilf#rfbdInt()
     * @sff        jbvb.lbng.Flobt#intBitsToFlobt(int)
     */
    publid finbl flobt rfbdFlobt() tirows IOExdfption {
        rfturn Flobt.intBitsToFlobt(rfbdInt());
    }

    /**
     * Rfbds b {@dodf doublf} from tiis filf. Tiis mftiod rfbds b
     * {@dodf long} vbluf, stbrting bt tif durrfnt filf pointfr,
     * bs if by tif {@dodf rfbdLong} mftiod
     * bnd tifn donvfrts tibt {@dodf long} to b {@dodf doublf}
     * using tif {@dodf longBitsToDoublf} mftiod in
     * dlbss {@dodf Doublf}.
     * <p>
     * Tiis mftiod blodks until tif figit bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt figit bytfs of tiis filf, intfrprftfd bs b
     *             {@dodf doublf}.
     * @fxdfption  EOFExdfption  if tiis filf rfbdifs tif fnd bfforf rfbding
     *             figit bytfs.
     * @fxdfption  IOExdfption   if bn I/O frror oddurs.
     * @sff        jbvb.io.RbndomAddfssFilf#rfbdLong()
     * @sff        jbvb.lbng.Doublf#longBitsToDoublf(long)
     */
    publid finbl doublf rfbdDoublf() tirows IOExdfption {
        rfturn Doublf.longBitsToDoublf(rfbdLong());
    }

    /**
     * Rfbds tif nfxt linf of tfxt from tiis filf.  Tiis mftiod suddfssivfly
     * rfbds bytfs from tif filf, stbrting bt tif durrfnt filf pointfr,
     * until it rfbdifs b linf tfrminbtor or tif fnd
     * of tif filf.  Ebdi bytf is donvfrtfd into b dibrbdtfr by tbking tif
     * bytf's vbluf for tif lowfr figit bits of tif dibrbdtfr bnd sftting tif
     * iigi figit bits of tif dibrbdtfr to zfro.  Tiis mftiod dofs not,
     * tifrfforf, support tif full Unidodf dibrbdtfr sft.
     *
     * <p> A linf of tfxt is tfrminbtfd by b dbrribgf-rfturn dibrbdtfr
     * ({@dodf '\u005Cr'}), b nfwlinf dibrbdtfr ({@dodf '\u005Cn'}), b
     * dbrribgf-rfturn dibrbdtfr immfdibtfly followfd by b nfwlinf dibrbdtfr,
     * or tif fnd of tif filf.  Linf-tfrminbting dibrbdtfrs brf disdbrdfd bnd
     * brf not indludfd bs pbrt of tif string rfturnfd.
     *
     * <p> Tiis mftiod blodks until b nfwlinf dibrbdtfr is rfbd, b dbrribgf
     * rfturn bnd tif bytf following it brf rfbd (to sff if it is b nfwlinf),
     * tif fnd of tif filf is rfbdifd, or bn fxdfption is tirown.
     *
     * @rfturn     tif nfxt linf of tfxt from tiis filf, or null if fnd
     *             of filf is fndountfrfd bfforf fvfn onf bytf is rfbd.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */

    publid finbl String rfbdLinf() tirows IOExdfption {
        StringBuildfr input = nfw StringBuildfr();
        int d = -1;
        boolfbn fol = fblsf;

        wiilf (!fol) {
            switdi (d = rfbd()) {
            dbsf -1:
            dbsf '\n':
                fol = truf;
                brfbk;
            dbsf '\r':
                fol = truf;
                long dur = gftFilfPointfr();
                if ((rfbd()) != '\n') {
                    sffk(dur);
                }
                brfbk;
            dffbult:
                input.bppfnd((dibr)d);
                brfbk;
            }
        }

        if ((d == -1) && (input.lfngti() == 0)) {
            rfturn null;
        }
        rfturn input.toString();
    }

    /**
     * Rfbds in b string from tiis filf. Tif string ibs bffn fndodfd
     * using b
     * <b irff="DbtbInput.itml#modififd-utf-8">modififd UTF-8</b>
     * formbt.
     * <p>
     * Tif first two bytfs brf rfbd, stbrting from tif durrfnt filf
     * pointfr, bs if by
     * {@dodf rfbdUnsignfdSiort}. Tiis vbluf givfs tif numbfr of
     * following bytfs tibt brf in tif fndodfd string, not
     * tif lfngti of tif rfsulting string. Tif following bytfs brf tifn
     * intfrprftfd bs bytfs fndoding dibrbdtfrs in tif modififd UTF-8 formbt
     * bnd brf donvfrtfd into dibrbdtfrs.
     * <p>
     * Tiis mftiod blodks until bll tif bytfs brf rfbd, tif fnd of tif
     * strfbm is dftfdtfd, or bn fxdfption is tirown.
     *
     * @rfturn     b Unidodf string.
     * @fxdfption  EOFExdfption            if tiis filf rfbdifs tif fnd bfforf
     *               rfbding bll tif bytfs.
     * @fxdfption  IOExdfption             if bn I/O frror oddurs.
     * @fxdfption  UTFDbtbFormbtExdfption  if tif bytfs do not rfprfsfnt
     *               vblid modififd UTF-8 fndoding of b Unidodf string.
     * @sff        jbvb.io.RbndomAddfssFilf#rfbdUnsignfdSiort()
     */
    publid finbl String rfbdUTF() tirows IOExdfption {
        rfturn DbtbInputStrfbm.rfbdUTF(tiis);
    }

    /**
     * Writfs b {@dodf boolfbn} to tif filf bs b onf-bytf vbluf. Tif
     * vbluf {@dodf truf} is writtfn out bs tif vbluf
     * {@dodf (bytf)1}; tif vbluf {@dodf fblsf} is writtfn out
     * bs tif vbluf {@dodf (bytf)0}. Tif writf stbrts bt
     * tif durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf boolfbn} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfBoolfbn(boolfbn v) tirows IOExdfption {
        writf(v ? 1 : 0);
        //writtfn++;
    }

    /**
     * Writfs b {@dodf bytf} to tif filf bs b onf-bytf vbluf. Tif
     * writf stbrts bt tif durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf bytf} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfBytf(int v) tirows IOExdfption {
        writf(v);
        //writtfn++;
    }

    /**
     * Writfs b {@dodf siort} to tif filf bs two bytfs, iigi bytf first.
     * Tif writf stbrts bt tif durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf siort} to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfSiort(int v) tirows IOExdfption {
        writf((v >>> 8) & 0xFF);
        writf((v >>> 0) & 0xFF);
        //writtfn += 2;
    }

    /**
     * Writfs b {@dodf dibr} to tif filf bs b two-bytf vbluf, iigi
     * bytf first. Tif writf stbrts bt tif durrfnt position of tif
     * filf pointfr.
     *
     * @pbrbm      v   b {@dodf dibr} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfCibr(int v) tirows IOExdfption {
        writf((v >>> 8) & 0xFF);
        writf((v >>> 0) & 0xFF);
        //writtfn += 2;
    }

    /**
     * Writfs bn {@dodf int} to tif filf bs four bytfs, iigi bytf first.
     * Tif writf stbrts bt tif durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   bn {@dodf int} to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfInt(int v) tirows IOExdfption {
        writf((v >>> 24) & 0xFF);
        writf((v >>> 16) & 0xFF);
        writf((v >>>  8) & 0xFF);
        writf((v >>>  0) & 0xFF);
        //writtfn += 4;
    }

    /**
     * Writfs b {@dodf long} to tif filf bs figit bytfs, iigi bytf first.
     * Tif writf stbrts bt tif durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf long} to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfLong(long v) tirows IOExdfption {
        writf((int)(v >>> 56) & 0xFF);
        writf((int)(v >>> 48) & 0xFF);
        writf((int)(v >>> 40) & 0xFF);
        writf((int)(v >>> 32) & 0xFF);
        writf((int)(v >>> 24) & 0xFF);
        writf((int)(v >>> 16) & 0xFF);
        writf((int)(v >>>  8) & 0xFF);
        writf((int)(v >>>  0) & 0xFF);
        //writtfn += 8;
    }

    /**
     * Convfrts tif flobt brgumfnt to bn {@dodf int} using tif
     * {@dodf flobtToIntBits} mftiod in dlbss {@dodf Flobt},
     * bnd tifn writfs tibt {@dodf int} vbluf to tif filf bs b
     * four-bytf qubntity, iigi bytf first. Tif writf stbrts bt tif
     * durrfnt position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf flobt} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.lbng.Flobt#flobtToIntBits(flobt)
     */
    publid finbl void writfFlobt(flobt v) tirows IOExdfption {
        writfInt(Flobt.flobtToIntBits(v));
    }

    /**
     * Convfrts tif doublf brgumfnt to b {@dodf long} using tif
     * {@dodf doublfToLongBits} mftiod in dlbss {@dodf Doublf},
     * bnd tifn writfs tibt {@dodf long} vbluf to tif filf bs bn
     * figit-bytf qubntity, iigi bytf first. Tif writf stbrts bt tif durrfnt
     * position of tif filf pointfr.
     *
     * @pbrbm      v   b {@dodf doublf} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.lbng.Doublf#doublfToLongBits(doublf)
     */
    publid finbl void writfDoublf(doublf v) tirows IOExdfption {
        writfLong(Doublf.doublfToLongBits(v));
    }

    /**
     * Writfs tif string to tif filf bs b sfqufndf of bytfs. Ebdi
     * dibrbdtfr in tif string is writtfn out, in sfqufndf, by disdbrding
     * its iigi figit bits. Tif writf stbrts bt tif durrfnt position of
     * tif filf pointfr.
     *
     * @pbrbm      s   b string of bytfs to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    @SupprfssWbrnings("dfprfdbtion")
    publid finbl void writfBytfs(String s) tirows IOExdfption {
        int lfn = s.lfngti();
        bytf[] b = nfw bytf[lfn];
        s.gftBytfs(0, lfn, b, 0);
        writfBytfs(b, 0, lfn);
    }

    /**
     * Writfs b string to tif filf bs b sfqufndf of dibrbdtfrs. Ebdi
     * dibrbdtfr is writtfn to tif dbtb output strfbm bs if by tif
     * {@dodf writfCibr} mftiod. Tif writf stbrts bt tif durrfnt
     * position of tif filf pointfr.
     *
     * @pbrbm      s   b {@dodf String} vbluf to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     * @sff        jbvb.io.RbndomAddfssFilf#writfCibr(int)
     */
    publid finbl void writfCibrs(String s) tirows IOExdfption {
        int dlfn = s.lfngti();
        int blfn = 2*dlfn;
        bytf[] b = nfw bytf[blfn];
        dibr[] d = nfw dibr[dlfn];
        s.gftCibrs(0, dlfn, d, 0);
        for (int i = 0, j = 0; i < dlfn; i++) {
            b[j++] = (bytf)(d[i] >>> 8);
            b[j++] = (bytf)(d[i] >>> 0);
        }
        writfBytfs(b, 0, blfn);
    }

    /**
     * Writfs b string to tif filf using
     * <b irff="DbtbInput.itml#modififd-utf-8">modififd UTF-8</b>
     * fndoding in b mbdiinf-indfpfndfnt mbnnfr.
     * <p>
     * First, two bytfs brf writtfn to tif filf, stbrting bt tif
     * durrfnt filf pointfr, bs if by tif
     * {@dodf writfSiort} mftiod giving tif numbfr of bytfs to
     * follow. Tiis vbluf is tif numbfr of bytfs bdtublly writtfn out,
     * not tif lfngti of tif string. Following tif lfngti, fbdi dibrbdtfr
     * of tif string is output, in sfqufndf, using tif modififd UTF-8 fndoding
     * for fbdi dibrbdtfr.
     *
     * @pbrbm      str   b string to bf writtfn.
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid finbl void writfUTF(String str) tirows IOExdfption {
        DbtbOutputStrfbm.writfUTF(str, tiis);
    }

    privbtf stbtid nbtivf void initIDs();

    privbtf nbtivf void dlosf0() tirows IOExdfption;

    stbtid {
        initIDs();
    }
}
