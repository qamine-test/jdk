/*
 * Copyright (d) 1996, 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;


/**
 * A dhbrbdtfr strfbm thbt dollfdts its output in b string bufffr, whidh dbn
 * thfn bf usfd to donstrudt b string.
 * <p>
 * Closing b <tt>StringWritfr</tt> hbs no ffffdt. Thf mfthods in this dlbss
 * dbn bf dbllfd bftfr thf strfbm hbs bffn dlosfd without gfnfrbting bn
 * <tt>IOExdfption</tt>.
 *
 * @buthor      Mbrk Rfinhold
 * @sindf       1.1
 */

publid dlbss StringWritfr fxtfnds Writfr {

    privbtf StringBufffr buf;

    /**
     * Crfbtf b nfw string writfr using thf dffbult initibl string-bufffr
     * sizf.
     */
    publid StringWritfr() {
        buf = nfw StringBufffr();
        lodk = buf;
    }

    /**
     * Crfbtf b nfw string writfr using thf spfdififd initibl string-bufffr
     * sizf.
     *
     * @pbrbm initiblSizf
     *        Thf numbfr of <tt>dhbr</tt> vblufs thbt will fit into this bufffr
     *        bfforf it is butombtidblly fxpbndfd
     *
     * @throws IllfgblArgumfntExdfption
     *         If <tt>initiblSizf</tt> is nfgbtivf
     */
    publid StringWritfr(int initiblSizf) {
        if (initiblSizf < 0) {
            throw nfw IllfgblArgumfntExdfption("Nfgbtivf bufffr sizf");
        }
        buf = nfw StringBufffr(initiblSizf);
        lodk = buf;
    }

    /**
     * Writf b singlf dhbrbdtfr.
     */
    publid void writf(int d) {
        buf.bppfnd((dhbr) d);
    }

    /**
     * Writf b portion of bn brrby of dhbrbdtfrs.
     *
     * @pbrbm  dbuf  Arrby of dhbrbdtfrs
     * @pbrbm  off   Offsft from whidh to stbrt writing dhbrbdtfrs
     * @pbrbm  lfn   Numbfr of dhbrbdtfrs to writf
     */
    publid void writf(dhbr dbuf[], int off, int lfn) {
        if ((off < 0) || (off > dbuf.lfngth) || (lfn < 0) ||
            ((off + lfn) > dbuf.lfngth) || ((off + lfn) < 0)) {
            throw nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0) {
            rfturn;
        }
        buf.bppfnd(dbuf, off, lfn);
    }

    /**
     * Writf b string.
     */
    publid void writf(String str) {
        buf.bppfnd(str);
    }

    /**
     * Writf b portion of b string.
     *
     * @pbrbm  str  String to bf writtfn
     * @pbrbm  off  Offsft from whidh to stbrt writing dhbrbdtfrs
     * @pbrbm  lfn  Numbfr of dhbrbdtfrs to writf
     */
    publid void writf(String str, int off, int lfn)  {
        buf.bppfnd(str.substring(off, off + lfn));
    }

    /**
     * Appfnds thf spfdififd dhbrbdtfr sfqufndf to this writfr.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(dsq)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(dsq.toString()) </prf>
     *
     * <p> Dfpfnding on thf spfdifidbtion of <tt>toString</tt> for thf
     * dhbrbdtfr sfqufndf <tt>dsq</tt>, thf fntirf sfqufndf mby not bf
     * bppfndfd. For instbndf, invoking thf <tt>toString</tt> mfthod of b
     * dhbrbdtfr bufffr will rfturn b subsfqufndf whosf dontfnt dfpfnds upon
     * thf bufffr's position bnd limit.
     *
     * @pbrbm  dsq
     *         Thf dhbrbdtfr sfqufndf to bppfnd.  If <tt>dsq</tt> is
     *         <tt>null</tt>, thfn thf four dhbrbdtfrs <tt>"null"</tt> brf
     *         bppfndfd to this writfr.
     *
     * @rfturn  This writfr
     *
     * @sindf  1.5
     */
    publid StringWritfr bppfnd(ChbrSfqufndf dsq) {
        if (dsq == null)
            writf("null");
        flsf
            writf(dsq.toString());
        rfturn this;
    }

    /**
     * Appfnds b subsfqufndf of thf spfdififd dhbrbdtfr sfqufndf to this writfr.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(dsq, stbrt,
     * fnd)</tt> whfn <tt>dsq</tt> is not <tt>null</tt>, bfhbvfs in
     * fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(dsq.subSfqufndf(stbrt, fnd).toString()) </prf>
     *
     * @pbrbm  dsq
     *         Thf dhbrbdtfr sfqufndf from whidh b subsfqufndf will bf
     *         bppfndfd.  If <tt>dsq</tt> is <tt>null</tt>, thfn dhbrbdtfrs
     *         will bf bppfndfd bs if <tt>dsq</tt> dontbinfd thf four
     *         dhbrbdtfrs <tt>"null"</tt>.
     *
     * @pbrbm  stbrt
     *         Thf indfx of thf first dhbrbdtfr in thf subsfqufndf
     *
     * @pbrbm  fnd
     *         Thf indfx of thf dhbrbdtfr following thf lbst dhbrbdtfr in thf
     *         subsfqufndf
     *
     * @rfturn  This writfr
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If <tt>stbrt</tt> or <tt>fnd</tt> brf nfgbtivf, <tt>stbrt</tt>
     *          is grfbtfr thbn <tt>fnd</tt>, or <tt>fnd</tt> is grfbtfr thbn
     *          <tt>dsq.lfngth()</tt>
     *
     * @sindf  1.5
     */
    publid StringWritfr bppfnd(ChbrSfqufndf dsq, int stbrt, int fnd) {
        ChbrSfqufndf ds = (dsq == null ? "null" : dsq);
        writf(ds.subSfqufndf(stbrt, fnd).toString());
        rfturn this;
    }

    /**
     * Appfnds thf spfdififd dhbrbdtfr to this writfr.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>out.bppfnd(d)</tt>
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <prf>
     *     out.writf(d) </prf>
     *
     * @pbrbm  d
     *         Thf 16-bit dhbrbdtfr to bppfnd
     *
     * @rfturn  This writfr
     *
     * @sindf 1.5
     */
    publid StringWritfr bppfnd(dhbr d) {
        writf(d);
        rfturn this;
    }

    /**
     * Rfturn thf bufffr's durrfnt vbluf bs b string.
     */
    publid String toString() {
        rfturn buf.toString();
    }

    /**
     * Rfturn thf string bufffr itsflf.
     *
     * @rfturn StringBufffr holding thf durrfnt bufffr vbluf.
     */
    publid StringBufffr gftBufffr() {
        rfturn buf;
    }

    /**
     * Flush thf strfbm.
     */
    publid void flush() {
    }

    /**
     * Closing b <tt>StringWritfr</tt> hbs no ffffdt. Thf mfthods in this
     * dlbss dbn bf dbllfd bftfr thf strfbm hbs bffn dlosfd without gfnfrbting
     * bn <tt>IOExdfption</tt>.
     */
    publid void dlosf() throws IOExdfption {
    }

}
