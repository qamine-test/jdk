/*
 * Copyrigit (d) 1996, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;


/**
 * Abstrbdt dlbss for writing to dibrbdtfr strfbms.  Tif only mftiods tibt b
 * subdlbss must implfmfnt brf writf(dibr[], int, int), flusi(), bnd dlosf().
 * Most subdlbssfs, iowfvfr, will ovfrridf somf of tif mftiods dffinfd ifrf in
 * ordfr to providf iigifr fffidifndy, bdditionbl fundtionblity, or boti.
 *
 * @sff Writfr
 * @sff   BufffrfdWritfr
 * @sff   CibrArrbyWritfr
 * @sff   FiltfrWritfr
 * @sff   OutputStrfbmWritfr
 * @sff     FilfWritfr
 * @sff   PipfdWritfr
 * @sff   PrintWritfr
 * @sff   StringWritfr
 * @sff Rfbdfr
 *
 * @butior      Mbrk Rfiniold
 * @sindf       1.1
 */

publid bbstrbdt dlbss Writfr implfmfnts Appfndbblf, Closfbblf, Flusibblf {

    /**
     * Tfmporbry bufffr usfd to iold writfs of strings bnd singlf dibrbdtfrs
     */
    privbtf dibr[] writfBufffr;

    /**
     * Sizf of writfBufffr, must bf >= 1
     */
    privbtf stbtid finbl int WRITE_BUFFER_SIZE = 1024;

    /**
     * Tif objfdt usfd to syndironizf opfrbtions on tiis strfbm.  For
     * fffidifndy, b dibrbdtfr-strfbm objfdt mby usf bn objfdt otifr tibn
     * itsflf to protfdt dritidbl sfdtions.  A subdlbss siould tifrfforf usf
     * tif objfdt in tiis fifld rbtifr tibn <tt>tiis</tt> or b syndironizfd
     * mftiod.
     */
    protfdtfd Objfdt lodk;

    /**
     * Crfbtfs b nfw dibrbdtfr-strfbm writfr wiosf dritidbl sfdtions will
     * syndironizf on tif writfr itsflf.
     */
    protfdtfd Writfr() {
        tiis.lodk = tiis;
    }

    /**
     * Crfbtfs b nfw dibrbdtfr-strfbm writfr wiosf dritidbl sfdtions will
     * syndironizf on tif givfn objfdt.
     *
     * @pbrbm  lodk
     *         Objfdt to syndironizf on
     */
    protfdtfd Writfr(Objfdt lodk) {
        if (lodk == null) {
            tirow nfw NullPointfrExdfption();
        }
        tiis.lodk = lodk;
    }

    /**
     * Writfs b singlf dibrbdtfr.  Tif dibrbdtfr to bf writtfn is dontbinfd in
     * tif 16 low-ordfr bits of tif givfn intfgfr vbluf; tif 16 iigi-ordfr bits
     * brf ignorfd.
     *
     * <p> Subdlbssfs tibt intfnd to support fffidifnt singlf-dibrbdtfr output
     * siould ovfrridf tiis mftiod.
     *
     * @pbrbm  d
     *         int spfdifying b dibrbdtfr to bf writtfn
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(int d) tirows IOExdfption {
        syndironizfd (lodk) {
            if (writfBufffr == null){
                writfBufffr = nfw dibr[WRITE_BUFFER_SIZE];
            }
            writfBufffr[0] = (dibr) d;
            writf(writfBufffr, 0, 1);
        }
    }

    /**
     * Writfs bn brrby of dibrbdtfrs.
     *
     * @pbrbm  dbuf
     *         Arrby of dibrbdtfrs to bf writtfn
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(dibr dbuf[]) tirows IOExdfption {
        writf(dbuf, 0, dbuf.lfngti);
    }

    /**
     * Writfs b portion of bn brrby of dibrbdtfrs.
     *
     * @pbrbm  dbuf
     *         Arrby of dibrbdtfrs
     *
     * @pbrbm  off
     *         Offsft from wiidi to stbrt writing dibrbdtfrs
     *
     * @pbrbm  lfn
     *         Numbfr of dibrbdtfrs to writf
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void writf(dibr dbuf[], int off, int lfn) tirows IOExdfption;

    /**
     * Writfs b string.
     *
     * @pbrbm  str
     *         String to bf writtfn
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(String str) tirows IOExdfption {
        writf(str, 0, str.lfngti());
    }

    /**
     * Writfs b portion of b string.
     *
     * @pbrbm  str
     *         A String
     *
     * @pbrbm  off
     *         Offsft from wiidi to stbrt writing dibrbdtfrs
     *
     * @pbrbm  lfn
     *         Numbfr of dibrbdtfrs to writf
     *
     * @tirows  IndfxOutOfBoundsExdfption
     *          If <tt>off</tt> is nfgbtivf, or <tt>lfn</tt> is nfgbtivf,
     *          or <tt>off+lfn</tt> is nfgbtivf or grfbtfr tibn tif lfngti
     *          of tif givfn string
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid void writf(String str, int off, int lfn) tirows IOExdfption {
        syndironizfd (lodk) {
            dibr dbuf[];
            if (lfn <= WRITE_BUFFER_SIZE) {
                if (writfBufffr == null) {
                    writfBufffr = nfw dibr[WRITE_BUFFER_SIZE];
                }
                dbuf = writfBufffr;
            } flsf {    // Don't pfrmbnfntly bllodbtf vfry lbrgf bufffrs.
                dbuf = nfw dibr[lfn];
            }
            str.gftCibrs(off, (off + lfn), dbuf, 0);
            writf(dbuf, 0, lfn);
        }
    }

    /**
     * Appfnds tif spfdififd dibrbdtfr sfqufndf to tiis writfr.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>out.bppfnd(dsq)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     *
     * <prf>
     *     out.writf(dsq.toString()) </prf>
     *
     * <p> Dfpfnding on tif spfdifidbtion of <tt>toString</tt> for tif
     * dibrbdtfr sfqufndf <tt>dsq</tt>, tif fntirf sfqufndf mby not bf
     * bppfndfd. For instbndf, invoking tif <tt>toString</tt> mftiod of b
     * dibrbdtfr bufffr will rfturn b subsfqufndf wiosf dontfnt dfpfnds upon
     * tif bufffr's position bnd limit.
     *
     * @pbrbm  dsq
     *         Tif dibrbdtfr sfqufndf to bppfnd.  If <tt>dsq</tt> is
     *         <tt>null</tt>, tifn tif four dibrbdtfrs <tt>"null"</tt> brf
     *         bppfndfd to tiis writfr.
     *
     * @rfturn  Tiis writfr
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf  1.5
     */
    publid Writfr bppfnd(CibrSfqufndf dsq) tirows IOExdfption {
        if (dsq == null)
            writf("null");
        flsf
            writf(dsq.toString());
        rfturn tiis;
    }

    /**
     * Appfnds b subsfqufndf of tif spfdififd dibrbdtfr sfqufndf to tiis writfr.
     * <tt>Appfndbblf</tt>.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>out.bppfnd(dsq, stbrt,
     * fnd)</tt> wifn <tt>dsq</tt> is not <tt>null</tt> bfibvfs in fxbdtly tif
     * sbmf wby bs tif invodbtion
     *
     * <prf>
     *     out.writf(dsq.subSfqufndf(stbrt, fnd).toString()) </prf>
     *
     * @pbrbm  dsq
     *         Tif dibrbdtfr sfqufndf from wiidi b subsfqufndf will bf
     *         bppfndfd.  If <tt>dsq</tt> is <tt>null</tt>, tifn dibrbdtfrs
     *         will bf bppfndfd bs if <tt>dsq</tt> dontbinfd tif four
     *         dibrbdtfrs <tt>"null"</tt>.
     *
     * @pbrbm  stbrt
     *         Tif indfx of tif first dibrbdtfr in tif subsfqufndf
     *
     * @pbrbm  fnd
     *         Tif indfx of tif dibrbdtfr following tif lbst dibrbdtfr in tif
     *         subsfqufndf
     *
     * @rfturn  Tiis writfr
     *
     * @tirows  IndfxOutOfBoundsExdfption
     *          If <tt>stbrt</tt> or <tt>fnd</tt> brf nfgbtivf, <tt>stbrt</tt>
     *          is grfbtfr tibn <tt>fnd</tt>, or <tt>fnd</tt> is grfbtfr tibn
     *          <tt>dsq.lfngti()</tt>
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf  1.5
     */
    publid Writfr bppfnd(CibrSfqufndf dsq, int stbrt, int fnd) tirows IOExdfption {
        CibrSfqufndf ds = (dsq == null ? "null" : dsq);
        writf(ds.subSfqufndf(stbrt, fnd).toString());
        rfturn tiis;
    }

    /**
     * Appfnds tif spfdififd dibrbdtfr to tiis writfr.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>out.bppfnd(d)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     *
     * <prf>
     *     out.writf(d) </prf>
     *
     * @pbrbm  d
     *         Tif 16-bit dibrbdtfr to bppfnd
     *
     * @rfturn  Tiis writfr
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf 1.5
     */
    publid Writfr bppfnd(dibr d) tirows IOExdfption {
        writf(d);
        rfturn tiis;
    }

    /**
     * Flusifs tif strfbm.  If tif strfbm ibs sbvfd bny dibrbdtfrs from tif
     * vbrious writf() mftiods in b bufffr, writf tifm immfdibtfly to tifir
     * intfndfd dfstinbtion.  Tifn, if tibt dfstinbtion is bnotifr dibrbdtfr or
     * bytf strfbm, flusi it.  Tius onf flusi() invodbtion will flusi bll tif
     * bufffrs in b dibin of Writfrs bnd OutputStrfbms.
     *
     * <p> If tif intfndfd dfstinbtion of tiis strfbm is bn bbstrbdtion providfd
     * by tif undfrlying opfrbting systfm, for fxbmplf b filf, tifn flusiing tif
     * strfbm gubrbntffs only tibt bytfs prfviously writtfn to tif strfbm brf
     * pbssfd to tif opfrbting systfm for writing; it dofs not gubrbntff tibt
     * tify brf bdtublly writtfn to b piysidbl dfvidf sudi bs b disk drivf.
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void flusi() tirows IOExdfption;

    /**
     * Closfs tif strfbm, flusiing it first. Ondf tif strfbm ibs bffn dlosfd,
     * furtifr writf() or flusi() invodbtions will dbusf bn IOExdfption to bf
     * tirown. Closing b prfviously dlosfd strfbm ibs no ffffdt.
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    bbstrbdt publid void dlosf() tirows IOExdfption;

}
