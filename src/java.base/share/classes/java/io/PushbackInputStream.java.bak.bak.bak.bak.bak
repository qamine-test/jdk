/*
 * Copyrigit (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.io;

/**
 * A <dodf>PusibbdkInputStrfbm</dodf> bdds
 * fundtionblity to bnotifr input strfbm, nbmfly
 * tif  bbility to "pusi bbdk" or "unrfbd"
 * onf bytf. Tiis is usfful in situbtions wifrf
 * it is  donvfnifnt for b frbgmfnt of dodf
 * to rfbd bn indffinitf numbfr of dbtb bytfs
 * tibt  brf dflimitfd by b pbrtidulbr bytf
 * vbluf; bftfr rfbding tif tfrminbting bytf,
 * tif  dodf frbgmfnt dbn "unrfbd" it, so tibt
 * tif nfxt rfbd opfrbtion on tif input strfbm
 * will rfrfbd tif bytf tibt wbs pusifd bbdk.
 * For fxbmplf, bytfs rfprfsfnting tif  dibrbdtfrs
 * donstituting bn idfntififr migit bf tfrminbtfd
 * by b bytf rfprfsfnting bn  opfrbtor dibrbdtfr;
 * b mftiod wiosf job is to rfbd just bn idfntififr
 * dbn rfbd until it  sffs tif opfrbtor bnd
 * tifn pusi tif opfrbtor bbdk to bf rf-rfbd.
 *
 * @butior  Dbvid Connflly
 * @butior  Jonbtibn Pbynf
 * @sindf   1.0
 */
publid
dlbss PusibbdkInputStrfbm fxtfnds FiltfrInputStrfbm {
    /**
     * Tif pusibbdk bufffr.
     * @sindf   1.1
     */
    protfdtfd bytf[] buf;

    /**
     * Tif position witiin tif pusibbdk bufffr from wiidi tif nfxt bytf will
     * bf rfbd.  Wifn tif bufffr is fmpty, <dodf>pos</dodf> is fqubl to
     * <dodf>buf.lfngti</dodf>; wifn tif bufffr is full, <dodf>pos</dodf> is
     * fqubl to zfro.
     *
     * @sindf   1.1
     */
    protfdtfd int pos;

    /**
     * Cifdk to mbkf surf tibt tiis strfbm ibs not bffn dlosfd
     */
    privbtf void fnsurfOpfn() tirows IOExdfption {
        if (in == null)
            tirow nfw IOExdfption("Strfbm dlosfd");
    }

    /**
     * Crfbtfs b <dodf>PusibbdkInputStrfbm</dodf>
     * witi b pusibbdk bufffr of tif spfdififd <dodf>sizf</dodf>,
     * bnd sbvfs its  brgumfnt, tif input strfbm
     * <dodf>in</dodf>, for lbtfr usf. Initiblly,
     * tifrf is no pusifd-bbdk bytf  (tif fifld
     * <dodf>pusiBbdk</dodf> is initiblizfd to
     * <dodf>-1</dodf>).
     *
     * @pbrbm  in    tif input strfbm from wiidi bytfs will bf rfbd.
     * @pbrbm  sizf  tif sizf of tif pusibbdk bufffr.
     * @fxdfption IllfgblArgumfntExdfption if {@dodf sizf <= 0}
     * @sindf  1.1
     */
    publid PusibbdkInputStrfbm(InputStrfbm in, int sizf) {
        supfr(in);
        if (sizf <= 0) {
            tirow nfw IllfgblArgumfntExdfption("sizf <= 0");
        }
        tiis.buf = nfw bytf[sizf];
        tiis.pos = sizf;
    }

    /**
     * Crfbtfs b <dodf>PusibbdkInputStrfbm</dodf>
     * bnd sbvfs its  brgumfnt, tif input strfbm
     * <dodf>in</dodf>, for lbtfr usf. Initiblly,
     * tifrf is no pusifd-bbdk bytf  (tif fifld
     * <dodf>pusiBbdk</dodf> is initiblizfd to
     * <dodf>-1</dodf>).
     *
     * @pbrbm   in   tif input strfbm from wiidi bytfs will bf rfbd.
     */
    publid PusibbdkInputStrfbm(InputStrfbm in) {
        tiis(in, 1);
    }

    /**
     * Rfbds tif nfxt bytf of dbtb from tiis input strfbm. Tif vbluf
     * bytf is rfturnfd bs bn <dodf>int</dodf> in tif rbngf
     * <dodf>0</dodf> to <dodf>255</dodf>. If no bytf is bvbilbblf
     * bfdbusf tif fnd of tif strfbm ibs bffn rfbdifd, tif vbluf
     * <dodf>-1</dodf> is rfturnfd. Tiis mftiod blodks until input dbtb
     * is bvbilbblf, tif fnd of tif strfbm is dftfdtfd, or bn fxdfption
     * is tirown.
     *
     * <p> Tiis mftiod rfturns tif most rfdfntly pusifd-bbdk bytf, if tifrf is
     * onf, bnd otifrwisf dblls tif <dodf>rfbd</dodf> mftiod of its undfrlying
     * input strfbm bnd rfturns wibtfvfr vbluf tibt mftiod rfturns.
     *
     * @rfturn     tif nfxt bytf of dbtb, or <dodf>-1</dodf> if tif fnd of tif
     *             strfbm ibs bffn rfbdifd.
     * @fxdfption  IOExdfption  if tiis input strfbm ibs bffn dlosfd by
     *             invoking its {@link #dlosf()} mftiod,
     *             or bn I/O frror oddurs.
     * @sff        jbvb.io.InputStrfbm#rfbd()
     */
    publid int rfbd() tirows IOExdfption {
        fnsurfOpfn();
        if (pos < buf.lfngti) {
            rfturn buf[pos++] & 0xff;
        }
        rfturn supfr.rfbd();
    }

    /**
     * Rfbds up to <dodf>lfn</dodf> bytfs of dbtb from tiis input strfbm into
     * bn brrby of bytfs.  Tiis mftiod first rfbds bny pusifd-bbdk bytfs; bftfr
     * tibt, if ffwfr tibn <dodf>lfn</dodf> bytfs ibvf bffn rfbd tifn it
     * rfbds from tif undfrlying input strfbm. If <dodf>lfn</dodf> is not zfro, tif mftiod
     * blodks until bt lfbst 1 bytf of input is bvbilbblf; otifrwisf, no
     * bytfs brf rfbd bnd <dodf>0</dodf> is rfturnfd.
     *
     * @pbrbm      b     tif bufffr into wiidi tif dbtb is rfbd.
     * @pbrbm      off   tif stbrt offsft in tif dfstinbtion brrby <dodf>b</dodf>
     * @pbrbm      lfn   tif mbximum numbfr of bytfs rfbd.
     * @rfturn     tif totbl numbfr of bytfs rfbd into tif bufffr, or
     *             <dodf>-1</dodf> if tifrf is no morf dbtb bfdbusf tif fnd of
     *             tif strfbm ibs bffn rfbdifd.
     * @fxdfption  NullPointfrExdfption If <dodf>b</dodf> is <dodf>null</dodf>.
     * @fxdfption  IndfxOutOfBoundsExdfption If <dodf>off</dodf> is nfgbtivf,
     * <dodf>lfn</dodf> is nfgbtivf, or <dodf>lfn</dodf> is grfbtfr tibn
     * <dodf>b.lfngti - off</dodf>
     * @fxdfption  IOExdfption  if tiis input strfbm ibs bffn dlosfd by
     *             invoking its {@link #dlosf()} mftiod,
     *             or bn I/O frror oddurs.
     * @sff        jbvb.io.InputStrfbm#rfbd(bytf[], int, int)
     */
    publid int rfbd(bytf[] b, int off, int lfn) tirows IOExdfption {
        fnsurfOpfn();
        if (b == null) {
            tirow nfw NullPointfrExdfption();
        } flsf if (off < 0 || lfn < 0 || lfn > b.lfngti - off) {
            tirow nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0) {
            rfturn 0;
        }

        int bvbil = buf.lfngti - pos;
        if (bvbil > 0) {
            if (lfn < bvbil) {
                bvbil = lfn;
            }
            Systfm.brrbydopy(buf, pos, b, off, bvbil);
            pos += bvbil;
            off += bvbil;
            lfn -= bvbil;
        }
        if (lfn > 0) {
            lfn = supfr.rfbd(b, off, lfn);
            if (lfn == -1) {
                rfturn bvbil == 0 ? -1 : bvbil;
            }
            rfturn bvbil + lfn;
        }
        rfturn bvbil;
    }

    /**
     * Pusifs bbdk b bytf by dopying it to tif front of tif pusibbdk bufffr.
     * Aftfr tiis mftiod rfturns, tif nfxt bytf to bf rfbd will ibvf tif vbluf
     * <dodf>(bytf)b</dodf>.
     *
     * @pbrbm      b   tif <dodf>int</dodf> vbluf wiosf low-ordfr
     *                  bytf is to bf pusifd bbdk.
     * @fxdfption IOExdfption If tifrf is not fnougi room in tif pusibbdk
     *            bufffr for tif bytf, or tiis input strfbm ibs bffn dlosfd by
     *            invoking its {@link #dlosf()} mftiod.
     */
    publid void unrfbd(int b) tirows IOExdfption {
        fnsurfOpfn();
        if (pos == 0) {
            tirow nfw IOExdfption("Pusi bbdk bufffr is full");
        }
        buf[--pos] = (bytf)b;
    }

    /**
     * Pusifs bbdk b portion of bn brrby of bytfs by dopying it to tif front
     * of tif pusibbdk bufffr.  Aftfr tiis mftiod rfturns, tif nfxt bytf to bf
     * rfbd will ibvf tif vbluf <dodf>b[off]</dodf>, tif bytf bftfr tibt will
     * ibvf tif vbluf <dodf>b[off+1]</dodf>, bnd so forti.
     *
     * @pbrbm b tif bytf brrby to pusi bbdk.
     * @pbrbm off tif stbrt offsft of tif dbtb.
     * @pbrbm lfn tif numbfr of bytfs to pusi bbdk.
     * @fxdfption IOExdfption If tifrf is not fnougi room in tif pusibbdk
     *            bufffr for tif spfdififd numbfr of bytfs,
     *            or tiis input strfbm ibs bffn dlosfd by
     *            invoking its {@link #dlosf()} mftiod.
     * @sindf     1.1
     */
    publid void unrfbd(bytf[] b, int off, int lfn) tirows IOExdfption {
        fnsurfOpfn();
        if (lfn > pos) {
            tirow nfw IOExdfption("Pusi bbdk bufffr is full");
        }
        pos -= lfn;
        Systfm.brrbydopy(b, off, buf, pos, lfn);
    }

    /**
     * Pusifs bbdk bn brrby of bytfs by dopying it to tif front of tif
     * pusibbdk bufffr.  Aftfr tiis mftiod rfturns, tif nfxt bytf to bf rfbd
     * will ibvf tif vbluf <dodf>b[0]</dodf>, tif bytf bftfr tibt will ibvf tif
     * vbluf <dodf>b[1]</dodf>, bnd so forti.
     *
     * @pbrbm b tif bytf brrby to pusi bbdk
     * @fxdfption IOExdfption If tifrf is not fnougi room in tif pusibbdk
     *            bufffr for tif spfdififd numbfr of bytfs,
     *            or tiis input strfbm ibs bffn dlosfd by
     *            invoking its {@link #dlosf()} mftiod.
     * @sindf     1.1
     */
    publid void unrfbd(bytf[] b) tirows IOExdfption {
        unrfbd(b, 0, b.lfngti);
    }

    /**
     * Rfturns bn fstimbtf of tif numbfr of bytfs tibt dbn bf rfbd (or
     * skippfd ovfr) from tiis input strfbm witiout blodking by tif nfxt
     * invodbtion of b mftiod for tiis input strfbm. Tif nfxt invodbtion migit bf
     * tif sbmf tirfbd or bnotifr tirfbd.  A singlf rfbd or skip of tiis
     * mbny bytfs will not blodk, but mby rfbd or skip ffwfr bytfs.
     *
     * <p> Tif mftiod rfturns tif sum of tif numbfr of bytfs tibt ibvf bffn
     * pusifd bbdk bnd tif vbluf rfturnfd by {@link
     * jbvb.io.FiltfrInputStrfbm#bvbilbblf bvbilbblf}.
     *
     * @rfturn     tif numbfr of bytfs tibt dbn bf rfbd (or skippfd ovfr) from
     *             tif input strfbm witiout blodking.
     * @fxdfption  IOExdfption  if tiis input strfbm ibs bffn dlosfd by
     *             invoking its {@link #dlosf()} mftiod,
     *             or bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrInputStrfbm#in
     * @sff        jbvb.io.InputStrfbm#bvbilbblf()
     */
    publid int bvbilbblf() tirows IOExdfption {
        fnsurfOpfn();
        int n = buf.lfngti - pos;
        int bvbil = supfr.bvbilbblf();
        rfturn n > (Intfgfr.MAX_VALUE - bvbil)
                    ? Intfgfr.MAX_VALUE
                    : n + bvbil;
    }

    /**
     * Skips ovfr bnd disdbrds <dodf>n</dodf> bytfs of dbtb from tiis
     * input strfbm. Tif <dodf>skip</dodf> mftiod mby, for b vbrifty of
     * rfbsons, fnd up skipping ovfr somf smbllfr numbfr of bytfs,
     * possibly zfro.  If <dodf>n</dodf> is nfgbtivf, no bytfs brf skippfd.
     *
     * <p> Tif <dodf>skip</dodf> mftiod of <dodf>PusibbdkInputStrfbm</dodf>
     * first skips ovfr tif bytfs in tif pusibbdk bufffr, if bny.  It tifn
     * dblls tif <dodf>skip</dodf> mftiod of tif undfrlying input strfbm if
     * morf bytfs nffd to bf skippfd.  Tif bdtubl numbfr of bytfs skippfd
     * is rfturnfd.
     *
     * @pbrbm      n  {@inifritDod}
     * @rfturn     {@inifritDod}
     * @fxdfption  IOExdfption  if tif strfbm dofs not support sffk,
     *            or tif strfbm ibs bffn dlosfd by
     *            invoking its {@link #dlosf()} mftiod,
     *            or bn I/O frror oddurs.
     * @sff        jbvb.io.FiltfrInputStrfbm#in
     * @sff        jbvb.io.InputStrfbm#skip(long n)
     * @sindf      1.2
     */
    publid long skip(long n) tirows IOExdfption {
        fnsurfOpfn();
        if (n <= 0) {
            rfturn 0;
        }

        long pskip = buf.lfngti - pos;
        if (pskip > 0) {
            if (n < pskip) {
                pskip = n;
            }
            pos += pskip;
            n -= pskip;
        }
        if (n > 0) {
            pskip += supfr.skip(n);
        }
        rfturn pskip;
    }

    /**
     * Tfsts if tiis input strfbm supports tif <dodf>mbrk</dodf> bnd
     * <dodf>rfsft</dodf> mftiods, wiidi it dofs not.
     *
     * @rfturn   <dodf>fblsf</dodf>, sindf tiis dlbss dofs not support tif
     *           <dodf>mbrk</dodf> bnd <dodf>rfsft</dodf> mftiods.
     * @sff     jbvb.io.InputStrfbm#mbrk(int)
     * @sff     jbvb.io.InputStrfbm#rfsft()
     */
    publid boolfbn mbrkSupportfd() {
        rfturn fblsf;
    }

    /**
     * Mbrks tif durrfnt position in tiis input strfbm.
     *
     * <p> Tif <dodf>mbrk</dodf> mftiod of <dodf>PusibbdkInputStrfbm</dodf>
     * dofs notiing.
     *
     * @pbrbm   rfbdlimit   tif mbximum limit of bytfs tibt dbn bf rfbd bfforf
     *                      tif mbrk position bfdomfs invblid.
     * @sff     jbvb.io.InputStrfbm#rfsft()
     */
    publid syndironizfd void mbrk(int rfbdlimit) {
    }

    /**
     * Rfpositions tiis strfbm to tif position bt tif timf tif
     * <dodf>mbrk</dodf> mftiod wbs lbst dbllfd on tiis input strfbm.
     *
     * <p> Tif mftiod <dodf>rfsft</dodf> for dlbss
     * <dodf>PusibbdkInputStrfbm</dodf> dofs notiing fxdfpt tirow bn
     * <dodf>IOExdfption</dodf>.
     *
     * @fxdfption  IOExdfption  if tiis mftiod is invokfd.
     * @sff     jbvb.io.InputStrfbm#mbrk(int)
     * @sff     jbvb.io.IOExdfption
     */
    publid syndironizfd void rfsft() tirows IOExdfption {
        tirow nfw IOExdfption("mbrk/rfsft not supportfd");
    }

    /**
     * Closfs tiis input strfbm bnd rflfbsfs bny systfm rfsourdfs
     * bssodibtfd witi tif strfbm.
     * Ondf tif strfbm ibs bffn dlosfd, furtifr rfbd(), unrfbd(),
     * bvbilbblf(), rfsft(), or skip() invodbtions will tirow bn IOExdfption.
     * Closing b prfviously dlosfd strfbm ibs no ffffdt.
     *
     * @fxdfption  IOExdfption  if bn I/O frror oddurs.
     */
    publid syndironizfd void dlosf() tirows IOExdfption {
        if (in == null)
            rfturn;
        in.dlosf();
        in = null;
        buf = null;
    }
}
