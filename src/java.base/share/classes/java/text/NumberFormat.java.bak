/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * (C) Copyrigit Tbligfnt, Ind. 1996, 1997 - All Rigits Rfsfrvfd
 * (C) Copyrigit IBM Corp. 1996 - 1998 - All Rigits Rfsfrvfd
 *
 *   Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is dopyrigitfd
 * bnd ownfd by Tbligfnt, Ind., b wiolly-ownfd subsidibry of IBM. Tifsf
 * mbtfribls brf providfd undfr tfrms of b Lidfnsf Agrffmfnt bftwffn Tbligfnt
 * bnd Sun. Tiis tfdinology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. Tiis notidf bnd bttribution to Tbligfnt mby not bf rfmovfd.
 *   Tbligfnt is b rfgistfrfd trbdfmbrk of Tbligfnt, Ind.
 *
 */

pbdkbgf jbvb.tfxt;

import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.IOExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.mbti.BigIntfgfr;
import jbvb.mbti.RoundingModf;
import jbvb.tfxt.spi.NumbfrFormbtProvidfr;
import jbvb.util.Currfndy;
import jbvb.util.HbsiMbp;
import jbvb.util.Hbsitbblf;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.RfsourdfBundlf;
import jbvb.util.dondurrfnt.btomid.AtomidIntfgfr;
import jbvb.util.dondurrfnt.btomid.AtomidLong;
import jbvb.util.spi.LodblfSfrvidfProvidfr;
import sun.util.lodblf.providfr.LodblfProvidfrAdbptfr;
import sun.util.lodblf.providfr.LodblfSfrvidfProvidfrPool;

/**
 * <dodf>NumbfrFormbt</dodf> is tif bbstrbdt bbsf dlbss for bll numbfr
 * formbts. Tiis dlbss providfs tif intfrfbdf for formbtting bnd pbrsing
 * numbfrs. <dodf>NumbfrFormbt</dodf> blso providfs mftiods for dftfrmining
 * wiidi lodblfs ibvf numbfr formbts, bnd wibt tifir nbmfs brf.
 *
 * <p>
 * <dodf>NumbfrFormbt</dodf> iflps you to formbt bnd pbrsf numbfrs for bny lodblf.
 * Your dodf dbn bf domplftfly indfpfndfnt of tif lodblf donvfntions for
 * dfdimbl points, tiousbnds-sfpbrbtors, or fvfn tif pbrtidulbr dfdimbl
 * digits usfd, or wiftifr tif numbfr formbt is fvfn dfdimbl.
 *
 * <p>
 * To formbt b numbfr for tif durrfnt Lodblf, usf onf of tif fbdtory
 * dlbss mftiods:
 * <blodkquotf>
 * <prf>{@dodf
 * myString = NumbfrFormbt.gftInstbndf().formbt(myNumbfr);
 * }</prf>
 * </blodkquotf>
 * If you brf formbtting multiplf numbfrs, it is
 * morf fffidifnt to gft tif formbt bnd usf it multiplf timfs so tibt
 * tif systfm dofsn't ibvf to fftdi tif informbtion bbout tif lodbl
 * lbngubgf bnd dountry donvfntions multiplf timfs.
 * <blodkquotf>
 * <prf>{@dodf
 * NumbfrFormbt nf = NumbfrFormbt.gftInstbndf();
 * for (int i = 0; i < myNumbfr.lfngti; ++i) {
 *     output.println(nf.formbt(myNumbfr[i]) + "; ");
 * }
 * }</prf>
 * </blodkquotf>
 * To formbt b numbfr for b difffrfnt Lodblf, spfdify it in tif
 * dbll to <dodf>gftInstbndf</dodf>.
 * <blodkquotf>
 * <prf>{@dodf
 * NumbfrFormbt nf = NumbfrFormbt.gftInstbndf(Lodblf.FRENCH);
 * }</prf>
 * </blodkquotf>
 * You dbn blso usf b <dodf>NumbfrFormbt</dodf> to pbrsf numbfrs:
 * <blodkquotf>
 * <prf>{@dodf
 * myNumbfr = nf.pbrsf(myString);
 * }</prf>
 * </blodkquotf>
 * Usf <dodf>gftInstbndf</dodf> or <dodf>gftNumbfrInstbndf</dodf> to gft tif
 * normbl numbfr formbt. Usf <dodf>gftIntfgfrInstbndf</dodf> to gft bn
 * intfgfr numbfr formbt. Usf <dodf>gftCurrfndyInstbndf</dodf> to gft tif
 * durrfndy numbfr formbt. And usf <dodf>gftPfrdfntInstbndf</dodf> to gft b
 * formbt for displbying pfrdfntbgfs. Witi tiis formbt, b frbdtion likf
 * 0.53 is displbyfd bs 53%.
 *
 * <p>
 * You dbn blso dontrol tif displby of numbfrs witi sudi mftiods bs
 * <dodf>sftMinimumFrbdtionDigits</dodf>.
 * If you wbnt fvfn morf dontrol ovfr tif formbt or pbrsing,
 * or wbnt to givf your usfrs morf dontrol,
 * you dbn try dbsting tif <dodf>NumbfrFormbt</dodf> you gft from tif fbdtory mftiods
 * to b <dodf>DfdimblFormbt</dodf>. Tiis will work for tif vbst mbjority
 * of lodblfs; just rfmfmbfr to put it in b <dodf>try</dodf> blodk in dbsf you
 * fndountfr bn unusubl onf.
 *
 * <p>
 * NumbfrFormbt bnd DfdimblFormbt brf dfsignfd sudi tibt somf dontrols
 * work for formbtting bnd otifrs work for pbrsing.  Tif following is
 * tif dftbilfd dfsdription for fbdi tifsf dontrol mftiods,
 * <p>
 * sftPbrsfIntfgfrOnly : only bfffdts pbrsing, f.g.
 * if truf,  "3456.78" &rbrr; 3456 (bnd lfbvfs tif pbrsf position just bftfr indfx 6)
 * if fblsf, "3456.78" &rbrr; 3456.78 (bnd lfbvfs tif pbrsf position just bftfr indfx 8)
 * Tiis is indfpfndfnt of formbtting.  If you wbnt to not siow b dfdimbl point
 * wifrf tifrf migit bf no digits bftfr tif dfdimbl point, usf
 * sftDfdimblSfpbrbtorAlwbysSiown.
 * <p>
 * sftDfdimblSfpbrbtorAlwbysSiown : only bfffdts formbtting, bnd only wifrf
 * tifrf migit bf no digits bftfr tif dfdimbl point, sudi bs witi b pbttfrn
 * likf "#,##0.##", f.g.,
 * if truf,  3456.00 &rbrr; "3,456."
 * if fblsf, 3456.00 &rbrr; "3456"
 * Tiis is indfpfndfnt of pbrsing.  If you wbnt pbrsing to stop bt tif dfdimbl
 * point, usf sftPbrsfIntfgfrOnly.
 *
 * <p>
 * You dbn blso usf forms of tif <dodf>pbrsf</dodf> bnd <dodf>formbt</dodf>
 * mftiods witi <dodf>PbrsfPosition</dodf> bnd <dodf>FifldPosition</dodf> to
 * bllow you to:
 * <ul>
 * <li> progrfssivfly pbrsf tirougi pifdfs of b string
 * <li> blign tif dfdimbl point bnd otifr brfbs
 * </ul>
 * For fxbmplf, you dbn blign numbfrs in two wbys:
 * <ol>
 * <li> If you brf using b monospbdfd font witi spbding for blignmfnt,
 *      you dbn pbss tif <dodf>FifldPosition</dodf> in your formbt dbll, witi
 *      <dodf>fifld</dodf> = <dodf>INTEGER_FIELD</dodf>. On output,
 *      <dodf>gftEndIndfx</dodf> will bf sft to tif offsft bftwffn tif
 *      lbst dibrbdtfr of tif intfgfr bnd tif dfdimbl. Add
 *      (dfsirfdSpbdfCount - gftEndIndfx) spbdfs bt tif front of tif string.
 *
 * <li> If you brf using proportionbl fonts,
 *      instfbd of pbdding witi spbdfs, mfbsurf tif widti
 *      of tif string in pixfls from tif stbrt to <dodf>gftEndIndfx</dodf>.
 *      Tifn movf tif pfn by
 *      (dfsirfdPixflWidti - widtiToAlignmfntPoint) bfforf drbwing tif tfxt.
 *      It blso works wifrf tifrf is no dfdimbl, but possibly bdditionbl
 *      dibrbdtfrs bt tif fnd, f.g., witi pbrfntifsfs in nfgbtivf
 *      numbfrs: "(12)" for -12.
 * </ol>
 *
 * <i3><b nbmf="syndironizbtion">Syndironizbtion</b></i3>
 *
 * <p>
 * Numbfr formbts brf gfnfrblly not syndironizfd.
 * It is rfdommfndfd to drfbtf sfpbrbtf formbt instbndfs for fbdi tirfbd.
 * If multiplf tirfbds bddfss b formbt dondurrfntly, it must bf syndironizfd
 * fxtfrnblly.
 *
 * @sff          DfdimblFormbt
 * @sff          CioidfFormbt
 * @butior       Mbrk Dbvis
 * @butior       Hflfnb Siii
 */
publid bbstrbdt dlbss NumbfrFormbt fxtfnds Formbt  {

    /**
     * Fifld donstbnt usfd to donstrudt b FifldPosition objfdt. Signififs tibt
     * tif position of tif intfgfr pbrt of b formbttfd numbfr siould bf rfturnfd.
     * @sff jbvb.tfxt.FifldPosition
     */
    publid stbtid finbl int INTEGER_FIELD = 0;

    /**
     * Fifld donstbnt usfd to donstrudt b FifldPosition objfdt. Signififs tibt
     * tif position of tif frbdtion pbrt of b formbttfd numbfr siould bf rfturnfd.
     * @sff jbvb.tfxt.FifldPosition
     */
    publid stbtid finbl int FRACTION_FIELD = 1;

    /**
     * Solf donstrudtor.  (For invodbtion by subdlbss donstrudtors, typidblly
     * implidit.)
     */
    protfdtfd NumbfrFormbt() {
    }

    /**
     * Formbts b numbfr bnd bppfnds tif rfsulting tfxt to tif givfn string
     * bufffr.
     * Tif numbfr dbn bf of bny subdlbss of {@link jbvb.lbng.Numbfr}.
     * <p>
     * Tiis implfmfntbtion fxtrbdts tif numbfr's vbluf using
     * {@link jbvb.lbng.Numbfr#longVbluf()} for bll intfgrbl typf vblufs tibt
     * dbn bf donvfrtfd to <dodf>long</dodf> witiout loss of informbtion,
     * indluding <dodf>BigIntfgfr</dodf> vblufs witi b
     * {@link jbvb.mbti.BigIntfgfr#bitLfngti() bit lfngti} of lfss tibn 64,
     * bnd {@link jbvb.lbng.Numbfr#doublfVbluf()} for bll otifr typfs. It
     * tifn dblls
     * {@link #formbt(long,jbvb.lbng.StringBufffr,jbvb.tfxt.FifldPosition)}
     * or {@link #formbt(doublf,jbvb.lbng.StringBufffr,jbvb.tfxt.FifldPosition)}.
     * Tiis mby rfsult in loss of mbgnitudf informbtion bnd prfdision for
     * <dodf>BigIntfgfr</dodf> bnd <dodf>BigDfdimbl</dodf> vblufs.
     * @pbrbm numbfr     tif numbfr to formbt
     * @pbrbm toAppfndTo tif <dodf>StringBufffr</dodf> to wiidi tif formbttfd
     *                   tfxt is to bf bppfndfd
     * @pbrbm pos        On input: bn blignmfnt fifld, if dfsirfd.
     *                   On output: tif offsfts of tif blignmfnt fifld.
     * @rfturn           tif vbluf pbssfd in bs <dodf>toAppfndTo</dodf>
     * @fxdfption        IllfgblArgumfntExdfption if <dodf>numbfr</dodf> is
     *                   null or not bn instbndf of <dodf>Numbfr</dodf>.
     * @fxdfption        NullPointfrExdfption if <dodf>toAppfndTo</dodf> or
     *                   <dodf>pos</dodf> is null
     * @fxdfption        AritimftidExdfption if rounding is nffdfd witi rounding
     *                   modf bfing sft to RoundingModf.UNNECESSARY
     * @sff              jbvb.tfxt.FifldPosition
     */
    @Ovfrridf
    publid StringBufffr formbt(Objfdt numbfr,
                               StringBufffr toAppfndTo,
                               FifldPosition pos) {
        if (numbfr instbndfof Long || numbfr instbndfof Intfgfr ||
            numbfr instbndfof Siort || numbfr instbndfof Bytf ||
            numbfr instbndfof AtomidIntfgfr || numbfr instbndfof AtomidLong ||
            (numbfr instbndfof BigIntfgfr &&
             ((BigIntfgfr)numbfr).bitLfngti() < 64)) {
            rfturn formbt(((Numbfr)numbfr).longVbluf(), toAppfndTo, pos);
        } flsf if (numbfr instbndfof Numbfr) {
            rfturn formbt(((Numbfr)numbfr).doublfVbluf(), toAppfndTo, pos);
        } flsf {
            tirow nfw IllfgblArgumfntExdfption("Cbnnot formbt givfn Objfdt bs b Numbfr");
        }
    }

    /**
     * Pbrsfs tfxt from b string to produdf b <dodf>Numbfr</dodf>.
     * <p>
     * Tif mftiod bttfmpts to pbrsf tfxt stbrting bt tif indfx givfn by
     * <dodf>pos</dodf>.
     * If pbrsing suddffds, tifn tif indfx of <dodf>pos</dodf> is updbtfd
     * to tif indfx bftfr tif lbst dibrbdtfr usfd (pbrsing dofs not nfdfssbrily
     * usf bll dibrbdtfrs up to tif fnd of tif string), bnd tif pbrsfd
     * numbfr is rfturnfd. Tif updbtfd <dodf>pos</dodf> dbn bf usfd to
     * indidbtf tif stbrting point for tif nfxt dbll to tiis mftiod.
     * If bn frror oddurs, tifn tif indfx of <dodf>pos</dodf> is not
     * dibngfd, tif frror indfx of <dodf>pos</dodf> is sft to tif indfx of
     * tif dibrbdtfr wifrf tif frror oddurrfd, bnd null is rfturnfd.
     * <p>
     * Sff tif {@link #pbrsf(String, PbrsfPosition)} mftiod for morf informbtion
     * on numbfr pbrsing.
     *
     * @pbrbm sourdf A <dodf>String</dodf>, pbrt of wiidi siould bf pbrsfd.
     * @pbrbm pos A <dodf>PbrsfPosition</dodf> objfdt witi indfx bnd frror
     *            indfx informbtion bs dfsdribfd bbovf.
     * @rfturn A <dodf>Numbfr</dodf> pbrsfd from tif string. In dbsf of
     *         frror, rfturns null.
     * @fxdfption NullPointfrExdfption if <dodf>pos</dodf> is null.
     */
    @Ovfrridf
    publid finbl Objfdt pbrsfObjfdt(String sourdf, PbrsfPosition pos) {
        rfturn pbrsf(sourdf, pos);
    }

   /**
     * Spfdiblizbtion of formbt.
     *
     * @pbrbm numbfr tif doublf numbfr to formbt
     * @rfturn tif formbttfd String
     * @fxdfption        AritimftidExdfption if rounding is nffdfd witi rounding
     *                   modf bfing sft to RoundingModf.UNNECESSARY
     * @sff jbvb.tfxt.Formbt#formbt
     */
    publid finbl String formbt(doublf numbfr) {
        // Usf fbst-pbti for doublf rfsult if tibt works
        String rfsult = fbstFormbt(numbfr);
        if (rfsult != null)
            rfturn rfsult;

        rfturn formbt(numbfr, nfw StringBufffr(),
                      DontCbrfFifldPosition.INSTANCE).toString();
    }

    /*
     * fbstFormbt() is supposfd to bf implfmfntfd in dondrftf subdlbssfs only.
     * Dffbult implfm blwbys rfturns null.
     */
    String fbstFormbt(doublf numbfr) { rfturn null; }

   /**
     * Spfdiblizbtion of formbt.
     *
     * @pbrbm numbfr tif long numbfr to formbt
     * @rfturn tif formbttfd String
     * @fxdfption        AritimftidExdfption if rounding is nffdfd witi rounding
     *                   modf bfing sft to RoundingModf.UNNECESSARY
     * @sff jbvb.tfxt.Formbt#formbt
     */
    publid finbl String formbt(long numbfr) {
        rfturn formbt(numbfr, nfw StringBufffr(),
                      DontCbrfFifldPosition.INSTANCE).toString();
    }

   /**
     * Spfdiblizbtion of formbt.
     *
     * @pbrbm numbfr     tif doublf numbfr to formbt
     * @pbrbm toAppfndTo tif StringBufffr to wiidi tif formbttfd tfxt is to bf
     *                   bppfndfd
     * @pbrbm pos        tif fifld position
     * @rfturn tif formbttfd StringBufffr
     * @fxdfption        AritimftidExdfption if rounding is nffdfd witi rounding
     *                   modf bfing sft to RoundingModf.UNNECESSARY
     * @sff jbvb.tfxt.Formbt#formbt
     */
    publid bbstrbdt StringBufffr formbt(doublf numbfr,
                                        StringBufffr toAppfndTo,
                                        FifldPosition pos);

   /**
     * Spfdiblizbtion of formbt.
     *
     * @pbrbm numbfr     tif long numbfr to formbt
     * @pbrbm toAppfndTo tif StringBufffr to wiidi tif formbttfd tfxt is to bf
     *                   bppfndfd
     * @pbrbm pos        tif fifld position
     * @rfturn tif formbttfd StringBufffr
     * @fxdfption        AritimftidExdfption if rounding is nffdfd witi rounding
     *                   modf bfing sft to RoundingModf.UNNECESSARY
     * @sff jbvb.tfxt.Formbt#formbt
     */
    publid bbstrbdt StringBufffr formbt(long numbfr,
                                        StringBufffr toAppfndTo,
                                        FifldPosition pos);

   /**
     * Rfturns b Long if possiblf (f.g., witiin tif rbngf [Long.MIN_VALUE,
     * Long.MAX_VALUE] bnd witi no dfdimbls), otifrwisf b Doublf.
     * If IntfgfrOnly is sft, will stop bt b dfdimbl
     * point (or fquivblfnt; f.g., for rbtionbl numbfrs "1 2/3", will stop
     * bftfr tif 1).
     * Dofs not tirow bn fxdfption; if no objfdt dbn bf pbrsfd, indfx is
     * undibngfd!
     *
     * @pbrbm sourdf tif String to pbrsf
     * @pbrbm pbrsfPosition tif pbrsf position
     * @rfturn tif pbrsfd vbluf
     * @sff jbvb.tfxt.NumbfrFormbt#isPbrsfIntfgfrOnly
     * @sff jbvb.tfxt.Formbt#pbrsfObjfdt
     */
    publid bbstrbdt Numbfr pbrsf(String sourdf, PbrsfPosition pbrsfPosition);

    /**
     * Pbrsfs tfxt from tif bfginning of tif givfn string to produdf b numbfr.
     * Tif mftiod mby not usf tif fntirf tfxt of tif givfn string.
     * <p>
     * Sff tif {@link #pbrsf(String, PbrsfPosition)} mftiod for morf informbtion
     * on numbfr pbrsing.
     *
     * @pbrbm sourdf A <dodf>String</dodf> wiosf bfginning siould bf pbrsfd.
     * @rfturn A <dodf>Numbfr</dodf> pbrsfd from tif string.
     * @fxdfption PbrsfExdfption if tif bfginning of tif spfdififd string
     *            dbnnot bf pbrsfd.
     */
    publid Numbfr pbrsf(String sourdf) tirows PbrsfExdfption {
        PbrsfPosition pbrsfPosition = nfw PbrsfPosition(0);
        Numbfr rfsult = pbrsf(sourdf, pbrsfPosition);
        if (pbrsfPosition.indfx == 0) {
            tirow nfw PbrsfExdfption("Unpbrsfbblf numbfr: \"" + sourdf + "\"",
                                     pbrsfPosition.frrorIndfx);
        }
        rfturn rfsult;
    }

    /**
     * Rfturns truf if tiis formbt will pbrsf numbfrs bs intfgfrs only.
     * For fxbmplf in tif Englisi lodblf, witi PbrsfIntfgfrOnly truf, tif
     * string "1234." would bf pbrsfd bs tif intfgfr vbluf 1234 bnd pbrsing
     * would stop bt tif "." dibrbdtfr.  Of doursf, tif fxbdt formbt bddfptfd
     * by tif pbrsf opfrbtion is lodblf dfpfndbnt bnd dftfrminfd by sub-dlbssfs
     * of NumbfrFormbt.
     *
     * @rfturn {@dodf truf} if numbfrs siould bf pbrsfd bs intfgfrs only;
     *         {@dodf fblsf} otifrwisf
     */
    publid boolfbn isPbrsfIntfgfrOnly() {
        rfturn pbrsfIntfgfrOnly;
    }

    /**
     * Sfts wiftifr or not numbfrs siould bf pbrsfd bs intfgfrs only.
     *
     * @pbrbm vbluf {@dodf truf} if numbfrs siould bf pbrsfd bs intfgfrs only;
     *              {@dodf fblsf} otifrwisf
     * @sff #isPbrsfIntfgfrOnly
     */
    publid void sftPbrsfIntfgfrOnly(boolfbn vbluf) {
        pbrsfIntfgfrOnly = vbluf;
    }

    //============== Lodblf Stuff =====================

    /**
     * Rfturns b gfnfrbl-purposf numbfr formbt for tif durrfnt dffbult
     * {@link jbvb.util.Lodblf.Cbtfgory#FORMAT FORMAT} lodblf.
     * Tiis is tif sbmf bs dblling
     * {@link #gftNumbfrInstbndf() gftNumbfrInstbndf()}.
     *
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for gfnfrbl-purposf numbfr
     * formbtting
     */
    publid finbl stbtid NumbfrFormbt gftInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), NUMBERSTYLE);
    }

    /**
     * Rfturns b gfnfrbl-purposf numbfr formbt for tif spfdififd lodblf.
     * Tiis is tif sbmf bs dblling
     * {@link #gftNumbfrInstbndf(jbvb.util.Lodblf) gftNumbfrInstbndf(inLodblf)}.
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for gfnfrbl-purposf numbfr
     * formbtting
     */
    publid stbtid NumbfrFormbt gftInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, NUMBERSTYLE);
    }

    /**
     * Rfturns b gfnfrbl-purposf numbfr formbt for tif durrfnt dffbult
     * {@link jbvb.util.Lodblf.Cbtfgory#FORMAT FORMAT} lodblf.
     * <p>Tiis is fquivblfnt to dblling
     * {@link #gftNumbfrInstbndf(Lodblf)
     *     gftNumbfrInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT))}.
     *
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for gfnfrbl-purposf numbfr
     * formbtting
     * @sff jbvb.util.Lodblf#gftDffbult(jbvb.util.Lodblf.Cbtfgory)
     * @sff jbvb.util.Lodblf.Cbtfgory#FORMAT
     */
    publid finbl stbtid NumbfrFormbt gftNumbfrInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), NUMBERSTYLE);
    }

    /**
     * Rfturns b gfnfrbl-purposf numbfr formbt for tif spfdififd lodblf.
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for gfnfrbl-purposf numbfr
     * formbtting
     */
    publid stbtid NumbfrFormbt gftNumbfrInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, NUMBERSTYLE);
    }

    /**
     * Rfturns bn intfgfr numbfr formbt for tif durrfnt dffbult
     * {@link jbvb.util.Lodblf.Cbtfgory#FORMAT FORMAT} lodblf. Tif
     * rfturnfd numbfr formbt is donfigurfd to round flobting point numbfrs
     * to tif nfbrfst intfgfr using iblf-fvfn rounding (sff {@link
     * jbvb.mbti.RoundingModf#HALF_EVEN RoundingModf.HALF_EVEN}) for formbtting,
     * bnd to pbrsf only tif intfgfr pbrt of bn input string (sff {@link
     * #isPbrsfIntfgfrOnly isPbrsfIntfgfrOnly}).
     * <p>Tiis is fquivblfnt to dblling
     * {@link #gftIntfgfrInstbndf(Lodblf)
     *     gftIntfgfrInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT))}.
     *
     * @sff #gftRoundingModf()
     * @sff jbvb.util.Lodblf#gftDffbult(jbvb.util.Lodblf.Cbtfgory)
     * @sff jbvb.util.Lodblf.Cbtfgory#FORMAT
     * @rfturn b numbfr formbt for intfgfr vblufs
     * @sindf 1.4
     */
    publid finbl stbtid NumbfrFormbt gftIntfgfrInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), INTEGERSTYLE);
    }

    /**
     * Rfturns bn intfgfr numbfr formbt for tif spfdififd lodblf. Tif
     * rfturnfd numbfr formbt is donfigurfd to round flobting point numbfrs
     * to tif nfbrfst intfgfr using iblf-fvfn rounding (sff {@link
     * jbvb.mbti.RoundingModf#HALF_EVEN RoundingModf.HALF_EVEN}) for formbtting,
     * bnd to pbrsf only tif intfgfr pbrt of bn input string (sff {@link
     * #isPbrsfIntfgfrOnly isPbrsfIntfgfrOnly}).
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     * @sff #gftRoundingModf()
     * @rfturn b numbfr formbt for intfgfr vblufs
     * @sindf 1.4
     */
    publid stbtid NumbfrFormbt gftIntfgfrInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, INTEGERSTYLE);
    }

    /**
     * Rfturns b durrfndy formbt for tif durrfnt dffbult
     * {@link jbvb.util.Lodblf.Cbtfgory#FORMAT FORMAT} lodblf.
     * <p>Tiis is fquivblfnt to dblling
     * {@link #gftCurrfndyInstbndf(Lodblf)
     *     gftCurrfndyInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT))}.
     *
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for durrfndy formbtting
     * @sff jbvb.util.Lodblf#gftDffbult(jbvb.util.Lodblf.Cbtfgory)
     * @sff jbvb.util.Lodblf.Cbtfgory#FORMAT
     */
    publid finbl stbtid NumbfrFormbt gftCurrfndyInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), CURRENCYSTYLE);
    }

    /**
     * Rfturns b durrfndy formbt for tif spfdififd lodblf.
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for durrfndy formbtting
     */
    publid stbtid NumbfrFormbt gftCurrfndyInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, CURRENCYSTYLE);
    }

    /**
     * Rfturns b pfrdfntbgf formbt for tif durrfnt dffbult
     * {@link jbvb.util.Lodblf.Cbtfgory#FORMAT FORMAT} lodblf.
     * <p>Tiis is fquivblfnt to dblling
     * {@link #gftPfrdfntInstbndf(Lodblf)
     *     gftPfrdfntInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT))}.
     *
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for pfrdfntbgf formbtting
     * @sff jbvb.util.Lodblf#gftDffbult(jbvb.util.Lodblf.Cbtfgory)
     * @sff jbvb.util.Lodblf.Cbtfgory#FORMAT
     */
    publid finbl stbtid NumbfrFormbt gftPfrdfntInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), PERCENTSTYLE);
    }

    /**
     * Rfturns b pfrdfntbgf formbt for tif spfdififd lodblf.
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     * @rfturn tif {@dodf NumbfrFormbt} instbndf for pfrdfntbgf formbtting
     */
    publid stbtid NumbfrFormbt gftPfrdfntInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, PERCENTSTYLE);
    }

    /**
     * Rfturns b sdifntifid formbt for tif durrfnt dffbult lodblf.
     */
    /*publid*/ finbl stbtid NumbfrFormbt gftSdifntifidInstbndf() {
        rfturn gftInstbndf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), SCIENTIFICSTYLE);
    }

    /**
     * Rfturns b sdifntifid formbt for tif spfdififd lodblf.
     *
     * @pbrbm inLodblf tif dfsirfd lodblf
     */
    /*publid*/ stbtid NumbfrFormbt gftSdifntifidInstbndf(Lodblf inLodblf) {
        rfturn gftInstbndf(inLodblf, SCIENTIFICSTYLE);
    }

    /**
     * Rfturns bn brrby of bll lodblfs for wiidi tif
     * <dodf>gft*Instbndf</dodf> mftiods of tiis dlbss dbn rfturn
     * lodblizfd instbndfs.
     * Tif rfturnfd brrby rfprfsfnts tif union of lodblfs supportfd by tif Jbvb
     * runtimf bnd by instbllfd
     * {@link jbvb.tfxt.spi.NumbfrFormbtProvidfr NumbfrFormbtProvidfr} implfmfntbtions.
     * It must dontbin bt lfbst b <dodf>Lodblf</dodf> instbndf fqubl to
     * {@link jbvb.util.Lodblf#US Lodblf.US}.
     *
     * @rfturn An brrby of lodblfs for wiidi lodblizfd
     *         <dodf>NumbfrFormbt</dodf> instbndfs brf bvbilbblf.
     */
    publid stbtid Lodblf[] gftAvbilbblfLodblfs() {
        LodblfSfrvidfProvidfrPool pool =
            LodblfSfrvidfProvidfrPool.gftPool(NumbfrFormbtProvidfr.dlbss);
        rfturn pool.gftAvbilbblfLodblfs();
    }

    /**
     * Ovfrridfs ibsiCodf.
     */
    @Ovfrridf
    publid int ibsiCodf() {
        rfturn mbximumIntfgfrDigits * 37 + mbxFrbdtionDigits;
        // just fnougi fiflds for b rfbsonbblf distribution
    }

    /**
     * Ovfrridfs fqubls.
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == null) {
            rfturn fblsf;
        }
        if (tiis == obj) {
            rfturn truf;
        }
        if (gftClbss() != obj.gftClbss()) {
            rfturn fblsf;
        }
        NumbfrFormbt otifr = (NumbfrFormbt) obj;
        rfturn (mbximumIntfgfrDigits == otifr.mbximumIntfgfrDigits
            && minimumIntfgfrDigits == otifr.minimumIntfgfrDigits
            && mbximumFrbdtionDigits == otifr.mbximumFrbdtionDigits
            && minimumFrbdtionDigits == otifr.minimumFrbdtionDigits
            && groupingUsfd == otifr.groupingUsfd
            && pbrsfIntfgfrOnly == otifr.pbrsfIntfgfrOnly);
    }

    /**
     * Ovfrridfs Clonfbblf.
     */
    @Ovfrridf
    publid Objfdt dlonf() {
        NumbfrFormbt otifr = (NumbfrFormbt) supfr.dlonf();
        rfturn otifr;
    }

    /**
     * Rfturns truf if grouping is usfd in tiis formbt. For fxbmplf, in tif
     * Englisi lodblf, witi grouping on, tif numbfr 1234567 migit bf formbttfd
     * bs "1,234,567". Tif grouping sfpbrbtor bs wfll bs tif sizf of fbdi group
     * is lodblf dfpfndbnt bnd is dftfrminfd by sub-dlbssfs of NumbfrFormbt.
     *
     * @rfturn {@dodf truf} if grouping is usfd;
     *         {@dodf fblsf} otifrwisf
     * @sff #sftGroupingUsfd
     */
    publid boolfbn isGroupingUsfd() {
        rfturn groupingUsfd;
    }

    /**
     * Sft wiftifr or not grouping will bf usfd in tiis formbt.
     *
     * @pbrbm nfwVbluf {@dodf truf} if grouping is usfd;
     *                 {@dodf fblsf} otifrwisf
     * @sff #isGroupingUsfd
     */
    publid void sftGroupingUsfd(boolfbn nfwVbluf) {
        groupingUsfd = nfwVbluf;
    }

    /**
     * Rfturns tif mbximum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.
     *
     * @rfturn tif mbximum numbfr of digits
     * @sff #sftMbximumIntfgfrDigits
     */
    publid int gftMbximumIntfgfrDigits() {
        rfturn mbximumIntfgfrDigits;
    }

    /**
     * Sfts tif mbximum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr. mbximumIntfgfrDigits must bf &gf; minimumIntfgfrDigits.  If tif
     * nfw vbluf for mbximumIntfgfrDigits is lfss tibn tif durrfnt vbluf
     * of minimumIntfgfrDigits, tifn minimumIntfgfrDigits will blso bf sft to
     * tif nfw vbluf.
     *
     * @pbrbm nfwVbluf tif mbximum numbfr of intfgfr digits to bf siown; if
     * lfss tibn zfro, tifn zfro is usfd. Tif dondrftf subdlbss mby fnfordf bn
     * uppfr limit to tiis vbluf bppropribtf to tif numfrid typf bfing formbttfd.
     * @sff #gftMbximumIntfgfrDigits
     */
    publid void sftMbximumIntfgfrDigits(int nfwVbluf) {
        mbximumIntfgfrDigits = Mbti.mbx(0,nfwVbluf);
        if (minimumIntfgfrDigits > mbximumIntfgfrDigits) {
            minimumIntfgfrDigits = mbximumIntfgfrDigits;
        }
    }

    /**
     * Rfturns tif minimum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.
     *
     * @rfturn tif minimum numbfr of digits
     * @sff #sftMinimumIntfgfrDigits
     */
    publid int gftMinimumIntfgfrDigits() {
        rfturn minimumIntfgfrDigits;
    }

    /**
     * Sfts tif minimum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr. minimumIntfgfrDigits must bf &lf; mbximumIntfgfrDigits.  If tif
     * nfw vbluf for minimumIntfgfrDigits fxdffds tif durrfnt vbluf
     * of mbximumIntfgfrDigits, tifn mbximumIntfgfrDigits will blso bf sft to
     * tif nfw vbluf
     *
     * @pbrbm nfwVbluf tif minimum numbfr of intfgfr digits to bf siown; if
     * lfss tibn zfro, tifn zfro is usfd. Tif dondrftf subdlbss mby fnfordf bn
     * uppfr limit to tiis vbluf bppropribtf to tif numfrid typf bfing formbttfd.
     * @sff #gftMinimumIntfgfrDigits
     */
    publid void sftMinimumIntfgfrDigits(int nfwVbluf) {
        minimumIntfgfrDigits = Mbti.mbx(0,nfwVbluf);
        if (minimumIntfgfrDigits > mbximumIntfgfrDigits) {
            mbximumIntfgfrDigits = minimumIntfgfrDigits;
        }
    }

    /**
     * Rfturns tif mbximum numbfr of digits bllowfd in tif frbdtion portion of b
     * numbfr.
     *
     * @rfturn tif mbximum numbfr of digits.
     * @sff #sftMbximumFrbdtionDigits
     */
    publid int gftMbximumFrbdtionDigits() {
        rfturn mbximumFrbdtionDigits;
    }

    /**
     * Sfts tif mbximum numbfr of digits bllowfd in tif frbdtion portion of b
     * numbfr. mbximumFrbdtionDigits must bf &gf; minimumFrbdtionDigits.  If tif
     * nfw vbluf for mbximumFrbdtionDigits is lfss tibn tif durrfnt vbluf
     * of minimumFrbdtionDigits, tifn minimumFrbdtionDigits will blso bf sft to
     * tif nfw vbluf.
     *
     * @pbrbm nfwVbluf tif mbximum numbfr of frbdtion digits to bf siown; if
     * lfss tibn zfro, tifn zfro is usfd. Tif dondrftf subdlbss mby fnfordf bn
     * uppfr limit to tiis vbluf bppropribtf to tif numfrid typf bfing formbttfd.
     * @sff #gftMbximumFrbdtionDigits
     */
    publid void sftMbximumFrbdtionDigits(int nfwVbluf) {
        mbximumFrbdtionDigits = Mbti.mbx(0,nfwVbluf);
        if (mbximumFrbdtionDigits < minimumFrbdtionDigits) {
            minimumFrbdtionDigits = mbximumFrbdtionDigits;
        }
    }

    /**
     * Rfturns tif minimum numbfr of digits bllowfd in tif frbdtion portion of b
     * numbfr.
     *
     * @rfturn tif minimum numbfr of digits
     * @sff #sftMinimumFrbdtionDigits
     */
    publid int gftMinimumFrbdtionDigits() {
        rfturn minimumFrbdtionDigits;
    }

    /**
     * Sfts tif minimum numbfr of digits bllowfd in tif frbdtion portion of b
     * numbfr. minimumFrbdtionDigits must bf &lf; mbximumFrbdtionDigits.  If tif
     * nfw vbluf for minimumFrbdtionDigits fxdffds tif durrfnt vbluf
     * of mbximumFrbdtionDigits, tifn mbximumIntfgfrDigits will blso bf sft to
     * tif nfw vbluf
     *
     * @pbrbm nfwVbluf tif minimum numbfr of frbdtion digits to bf siown; if
     * lfss tibn zfro, tifn zfro is usfd. Tif dondrftf subdlbss mby fnfordf bn
     * uppfr limit to tiis vbluf bppropribtf to tif numfrid typf bfing formbttfd.
     * @sff #gftMinimumFrbdtionDigits
     */
    publid void sftMinimumFrbdtionDigits(int nfwVbluf) {
        minimumFrbdtionDigits = Mbti.mbx(0,nfwVbluf);
        if (mbximumFrbdtionDigits < minimumFrbdtionDigits) {
            mbximumFrbdtionDigits = minimumFrbdtionDigits;
        }
    }

    /**
     * Gfts tif durrfndy usfd by tiis numbfr formbt wifn formbtting
     * durrfndy vblufs. Tif initibl vbluf is dfrivfd in b lodblf dfpfndfnt
     * wby. Tif rfturnfd vbluf mby bf null if no vblid
     * durrfndy dould bf dftfrminfd bnd no durrfndy ibs bffn sft using
     * {@link #sftCurrfndy(jbvb.util.Currfndy) sftCurrfndy}.
     * <p>
     * Tif dffbult implfmfntbtion tirows
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf>.
     *
     * @rfturn tif durrfndy usfd by tiis numbfr formbt, or <dodf>null</dodf>
     * @fxdfption UnsupportfdOpfrbtionExdfption if tif numbfr formbt dlbss
     * dofsn't implfmfnt durrfndy formbtting
     * @sindf 1.4
     */
    publid Currfndy gftCurrfndy() {
        tirow nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts tif durrfndy usfd by tiis numbfr formbt wifn formbtting
     * durrfndy vblufs. Tiis dofs not updbtf tif minimum or mbximum
     * numbfr of frbdtion digits usfd by tif numbfr formbt.
     * <p>
     * Tif dffbult implfmfntbtion tirows
     * <dodf>UnsupportfdOpfrbtionExdfption</dodf>.
     *
     * @pbrbm durrfndy tif nfw durrfndy to bf usfd by tiis numbfr formbt
     * @fxdfption UnsupportfdOpfrbtionExdfption if tif numbfr formbt dlbss
     * dofsn't implfmfnt durrfndy formbtting
     * @fxdfption NullPointfrExdfption if <dodf>durrfndy</dodf> is null
     * @sindf 1.4
     */
    publid void sftCurrfndy(Currfndy durrfndy) {
        tirow nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Gfts tif {@link jbvb.mbti.RoundingModf} usfd in tiis NumbfrFormbt.
     * Tif dffbult implfmfntbtion of tiis mftiod in NumbfrFormbt
     * blwbys tirows {@link jbvb.lbng.UnsupportfdOpfrbtionExdfption}.
     * Subdlbssfs wiidi ibndlf difffrfnt rounding modfs siould ovfrridf
     * tiis mftiod.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption Tif dffbult implfmfntbtion
     *     blwbys tirows tiis fxdfption
     * @rfturn Tif <dodf>RoundingModf</dodf> usfd for tiis NumbfrFormbt.
     * @sff #sftRoundingModf(RoundingModf)
     * @sindf 1.6
     */
    publid RoundingModf gftRoundingModf() {
        tirow nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Sfts tif {@link jbvb.mbti.RoundingModf} usfd in tiis NumbfrFormbt.
     * Tif dffbult implfmfntbtion of tiis mftiod in NumbfrFormbt blwbys
     * tirows {@link jbvb.lbng.UnsupportfdOpfrbtionExdfption}.
     * Subdlbssfs wiidi ibndlf difffrfnt rounding modfs siould ovfrridf
     * tiis mftiod.
     *
     * @fxdfption UnsupportfdOpfrbtionExdfption Tif dffbult implfmfntbtion
     *     blwbys tirows tiis fxdfption
     * @fxdfption NullPointfrExdfption if <dodf>roundingModf</dodf> is null
     * @pbrbm roundingModf Tif <dodf>RoundingModf</dodf> to bf usfd
     * @sff #gftRoundingModf()
     * @sindf 1.6
     */
    publid void sftRoundingModf(RoundingModf roundingModf) {
        tirow nfw UnsupportfdOpfrbtionExdfption();
    }

    // =======================privbtfs===============================

    privbtf stbtid NumbfrFormbt gftInstbndf(Lodblf dfsirfdLodblf,
                                           int dioidf) {
        LodblfProvidfrAdbptfr bdbptfr;
        bdbptfr = LodblfProvidfrAdbptfr.gftAdbptfr(NumbfrFormbtProvidfr.dlbss,
                                                   dfsirfdLodblf);
        NumbfrFormbt numbfrFormbt = gftInstbndf(bdbptfr, dfsirfdLodblf, dioidf);
        if (numbfrFormbt == null) {
            numbfrFormbt = gftInstbndf(LodblfProvidfrAdbptfr.forJRE(),
                                       dfsirfdLodblf, dioidf);
        }
        rfturn numbfrFormbt;
    }

    privbtf stbtid NumbfrFormbt gftInstbndf(LodblfProvidfrAdbptfr bdbptfr,
                                            Lodblf lodblf, int dioidf) {
        NumbfrFormbtProvidfr providfr = bdbptfr.gftNumbfrFormbtProvidfr();
        NumbfrFormbt numbfrFormbt = null;
        switdi (dioidf) {
        dbsf NUMBERSTYLE:
            numbfrFormbt = providfr.gftNumbfrInstbndf(lodblf);
            brfbk;
        dbsf PERCENTSTYLE:
            numbfrFormbt = providfr.gftPfrdfntInstbndf(lodblf);
            brfbk;
        dbsf CURRENCYSTYLE:
            numbfrFormbt = providfr.gftCurrfndyInstbndf(lodblf);
            brfbk;
        dbsf INTEGERSTYLE:
            numbfrFormbt = providfr.gftIntfgfrInstbndf(lodblf);
            brfbk;
        }
        rfturn numbfrFormbt;
    }

    /**
     * First, rfbd in tif dffbult sfriblizbblf dbtb.
     *
     * Tifn, if <dodf>sfriblVfrsionOnStrfbm</dodf> is lfss tibn 1, indidbting tibt
     * tif strfbm wbs writtfn by JDK 1.1,
     * sft tif <dodf>int</dodf> fiflds sudi bs <dodf>mbximumIntfgfrDigits</dodf>
     * to bf fqubl to tif <dodf>bytf</dodf> fiflds sudi bs <dodf>mbxIntfgfrDigits</dodf>,
     * sindf tif <dodf>int</dodf> fiflds wfrf not prfsfnt in JDK 1.1.
     * Finblly, sft sfriblVfrsionOnStrfbm bbdk to tif mbximum bllowfd vbluf so tibt
     * dffbult sfriblizbtion will work propfrly if tiis objfdt is strfbmfd out bgbin.
     *
     * <p>If <dodf>minimumIntfgfrDigits</dodf> is grfbtfr tibn
     * <dodf>mbximumIntfgfrDigits</dodf> or <dodf>minimumFrbdtionDigits</dodf>
     * is grfbtfr tibn <dodf>mbximumFrbdtionDigits</dodf>, tifn tif strfbm dbtb
     * is invblid bnd tiis mftiod tirows bn <dodf>InvblidObjfdtExdfption</dodf>.
     * In bddition, if bny of tifsf vblufs is nfgbtivf, tifn tiis mftiod tirows
     * bn <dodf>InvblidObjfdtExdfption</dodf>.
     *
     * @sindf 1.2
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm)
         tirows IOExdfption, ClbssNotFoundExdfption
    {
        strfbm.dffbultRfbdObjfdt();
        if (sfriblVfrsionOnStrfbm < 1) {
            // Didn't ibvf bdditionbl int fiflds, rfbssign to usf tifm.
            mbximumIntfgfrDigits = mbxIntfgfrDigits;
            minimumIntfgfrDigits = minIntfgfrDigits;
            mbximumFrbdtionDigits = mbxFrbdtionDigits;
            minimumFrbdtionDigits = minFrbdtionDigits;
        }
        if (minimumIntfgfrDigits > mbximumIntfgfrDigits ||
            minimumFrbdtionDigits > mbximumFrbdtionDigits ||
            minimumIntfgfrDigits < 0 || minimumFrbdtionDigits < 0) {
            tirow nfw InvblidObjfdtExdfption("Digit dount rbngf invblid");
        }
        sfriblVfrsionOnStrfbm = durrfntSfriblVfrsion;
    }

    /**
     * Writf out tif dffbult sfriblizbblf dbtb, bftfr first sftting
     * tif <dodf>bytf</dodf> fiflds sudi bs <dodf>mbxIntfgfrDigits</dodf> to bf
     * fqubl to tif <dodf>int</dodf> fiflds sudi bs <dodf>mbximumIntfgfrDigits</dodf>
     * (or to <dodf>Bytf.MAX_VALUE</dodf>, wiidifvfr is smbllfr), for dompbtibility
     * witi tif JDK 1.1 vfrsion of tif strfbm formbt.
     *
     * @sindf 1.2
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm strfbm)
         tirows IOExdfption
    {
        mbxIntfgfrDigits = (mbximumIntfgfrDigits > Bytf.MAX_VALUE) ?
                           Bytf.MAX_VALUE : (bytf)mbximumIntfgfrDigits;
        minIntfgfrDigits = (minimumIntfgfrDigits > Bytf.MAX_VALUE) ?
                           Bytf.MAX_VALUE : (bytf)minimumIntfgfrDigits;
        mbxFrbdtionDigits = (mbximumFrbdtionDigits > Bytf.MAX_VALUE) ?
                            Bytf.MAX_VALUE : (bytf)mbximumFrbdtionDigits;
        minFrbdtionDigits = (minimumFrbdtionDigits > Bytf.MAX_VALUE) ?
                            Bytf.MAX_VALUE : (bytf)minimumFrbdtionDigits;
        strfbm.dffbultWritfObjfdt();
    }

    // Constbnts usfd by fbdtory mftiods to spfdify b stylf of formbt.
    privbtf stbtid finbl int NUMBERSTYLE = 0;
    privbtf stbtid finbl int CURRENCYSTYLE = 1;
    privbtf stbtid finbl int PERCENTSTYLE = 2;
    privbtf stbtid finbl int SCIENTIFICSTYLE = 3;
    privbtf stbtid finbl int INTEGERSTYLE = 4;

    /**
     * Truf if tif grouping (i.f. tiousbnds) sfpbrbtor is usfd wifn
     * formbtting bnd pbrsing numbfrs.
     *
     * @sfribl
     * @sff #isGroupingUsfd
     */
    privbtf boolfbn groupingUsfd = truf;

    /**
     * Tif mbximum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.  <dodf>mbxIntfgfrDigits</dodf> must bf grfbtfr tibn or fqubl to
     * <dodf>minIntfgfrDigits</dodf>.
     * <p>
     * <strong>Notf:</strong> Tiis fifld fxists only for sfriblizbtion
     * dompbtibility witi JDK 1.1.  In Jbvb plbtform 2 v1.2 bnd iigifr, tif nfw
     * <dodf>int</dodf> fifld <dodf>mbximumIntfgfrDigits</dodf> is usfd instfbd.
     * Wifn writing to b strfbm, <dodf>mbxIntfgfrDigits</dodf> is sft to
     * <dodf>mbximumIntfgfrDigits</dodf> or <dodf>Bytf.MAX_VALUE</dodf>,
     * wiidifvfr is smbllfr.  Wifn rfbding from b strfbm, tiis fifld is usfd
     * only if <dodf>sfriblVfrsionOnStrfbm</dodf> is lfss tibn 1.
     *
     * @sfribl
     * @sff #gftMbximumIntfgfrDigits
     */
    privbtf bytf    mbxIntfgfrDigits = 40;

    /**
     * Tif minimum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.  <dodf>minimumIntfgfrDigits</dodf> must bf lfss tibn or fqubl to
     * <dodf>mbximumIntfgfrDigits</dodf>.
     * <p>
     * <strong>Notf:</strong> Tiis fifld fxists only for sfriblizbtion
     * dompbtibility witi JDK 1.1.  In Jbvb plbtform 2 v1.2 bnd iigifr, tif nfw
     * <dodf>int</dodf> fifld <dodf>minimumIntfgfrDigits</dodf> is usfd instfbd.
     * Wifn writing to b strfbm, <dodf>minIntfgfrDigits</dodf> is sft to
     * <dodf>minimumIntfgfrDigits</dodf> or <dodf>Bytf.MAX_VALUE</dodf>,
     * wiidifvfr is smbllfr.  Wifn rfbding from b strfbm, tiis fifld is usfd
     * only if <dodf>sfriblVfrsionOnStrfbm</dodf> is lfss tibn 1.
     *
     * @sfribl
     * @sff #gftMinimumIntfgfrDigits
     */
    privbtf bytf    minIntfgfrDigits = 1;

    /**
     * Tif mbximum numbfr of digits bllowfd in tif frbdtionbl portion of b
     * numbfr.  <dodf>mbximumFrbdtionDigits</dodf> must bf grfbtfr tibn or fqubl to
     * <dodf>minimumFrbdtionDigits</dodf>.
     * <p>
     * <strong>Notf:</strong> Tiis fifld fxists only for sfriblizbtion
     * dompbtibility witi JDK 1.1.  In Jbvb plbtform 2 v1.2 bnd iigifr, tif nfw
     * <dodf>int</dodf> fifld <dodf>mbximumFrbdtionDigits</dodf> is usfd instfbd.
     * Wifn writing to b strfbm, <dodf>mbxFrbdtionDigits</dodf> is sft to
     * <dodf>mbximumFrbdtionDigits</dodf> or <dodf>Bytf.MAX_VALUE</dodf>,
     * wiidifvfr is smbllfr.  Wifn rfbding from b strfbm, tiis fifld is usfd
     * only if <dodf>sfriblVfrsionOnStrfbm</dodf> is lfss tibn 1.
     *
     * @sfribl
     * @sff #gftMbximumFrbdtionDigits
     */
    privbtf bytf    mbxFrbdtionDigits = 3;    // invbribnt, >= minFrbdtionDigits

    /**
     * Tif minimum numbfr of digits bllowfd in tif frbdtionbl portion of b
     * numbfr.  <dodf>minimumFrbdtionDigits</dodf> must bf lfss tibn or fqubl to
     * <dodf>mbximumFrbdtionDigits</dodf>.
     * <p>
     * <strong>Notf:</strong> Tiis fifld fxists only for sfriblizbtion
     * dompbtibility witi JDK 1.1.  In Jbvb plbtform 2 v1.2 bnd iigifr, tif nfw
     * <dodf>int</dodf> fifld <dodf>minimumFrbdtionDigits</dodf> is usfd instfbd.
     * Wifn writing to b strfbm, <dodf>minFrbdtionDigits</dodf> is sft to
     * <dodf>minimumFrbdtionDigits</dodf> or <dodf>Bytf.MAX_VALUE</dodf>,
     * wiidifvfr is smbllfr.  Wifn rfbding from b strfbm, tiis fifld is usfd
     * only if <dodf>sfriblVfrsionOnStrfbm</dodf> is lfss tibn 1.
     *
     * @sfribl
     * @sff #gftMinimumFrbdtionDigits
     */
    privbtf bytf    minFrbdtionDigits = 0;

    /**
     * Truf if tiis formbt will pbrsf numbfrs bs intfgfrs only.
     *
     * @sfribl
     * @sff #isPbrsfIntfgfrOnly
     */
    privbtf boolfbn pbrsfIntfgfrOnly = fblsf;

    // nfw fiflds for 1.2.  bytf is too smbll for intfgfr digits.

    /**
     * Tif mbximum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.  <dodf>mbximumIntfgfrDigits</dodf> must bf grfbtfr tibn or fqubl to
     * <dodf>minimumIntfgfrDigits</dodf>.
     *
     * @sfribl
     * @sindf 1.2
     * @sff #gftMbximumIntfgfrDigits
     */
    privbtf int    mbximumIntfgfrDigits = 40;

    /**
     * Tif minimum numbfr of digits bllowfd in tif intfgfr portion of b
     * numbfr.  <dodf>minimumIntfgfrDigits</dodf> must bf lfss tibn or fqubl to
     * <dodf>mbximumIntfgfrDigits</dodf>.
     *
     * @sfribl
     * @sindf 1.2
     * @sff #gftMinimumIntfgfrDigits
     */
    privbtf int    minimumIntfgfrDigits = 1;

    /**
     * Tif mbximum numbfr of digits bllowfd in tif frbdtionbl portion of b
     * numbfr.  <dodf>mbximumFrbdtionDigits</dodf> must bf grfbtfr tibn or fqubl to
     * <dodf>minimumFrbdtionDigits</dodf>.
     *
     * @sfribl
     * @sindf 1.2
     * @sff #gftMbximumFrbdtionDigits
     */
    privbtf int    mbximumFrbdtionDigits = 3;    // invbribnt, >= minFrbdtionDigits

    /**
     * Tif minimum numbfr of digits bllowfd in tif frbdtionbl portion of b
     * numbfr.  <dodf>minimumFrbdtionDigits</dodf> must bf lfss tibn or fqubl to
     * <dodf>mbximumFrbdtionDigits</dodf>.
     *
     * @sfribl
     * @sindf 1.2
     * @sff #gftMinimumFrbdtionDigits
     */
    privbtf int    minimumFrbdtionDigits = 0;

    stbtid finbl int durrfntSfriblVfrsion = 1;

    /**
     * Dfsdribfs tif vfrsion of <dodf>NumbfrFormbt</dodf> prfsfnt on tif strfbm.
     * Possiblf vblufs brf:
     * <ul>
     * <li><b>0</b> (or uninitiblizfd): tif JDK 1.1 vfrsion of tif strfbm formbt.
     *     In tiis vfrsion, tif <dodf>int</dodf> fiflds sudi bs
     *     <dodf>mbximumIntfgfrDigits</dodf> wfrf not prfsfnt, bnd tif <dodf>bytf</dodf>
     *     fiflds sudi bs <dodf>mbxIntfgfrDigits</dodf> brf usfd instfbd.
     *
     * <li><b>1</b>: tif 1.2 vfrsion of tif strfbm formbt.  Tif vblufs of tif
     *     <dodf>bytf</dodf> fiflds sudi bs <dodf>mbxIntfgfrDigits</dodf> brf ignorfd,
     *     bnd tif <dodf>int</dodf> fiflds sudi bs <dodf>mbximumIntfgfrDigits</dodf>
     *     brf usfd instfbd.
     * </ul>
     * Wifn strfbming out b <dodf>NumbfrFormbt</dodf>, tif most rfdfnt formbt
     * (dorrfsponding to tif iigifst bllowbblf <dodf>sfriblVfrsionOnStrfbm</dodf>)
     * is blwbys writtfn.
     *
     * @sfribl
     * @sindf 1.2
     */
    privbtf int sfriblVfrsionOnStrfbm = durrfntSfriblVfrsion;

    // Rfmovfd "implfmfnts Clonfbblf" dlbusf.  Nffds to updbtf sfriblizbtion
    // ID for bbdkwbrd dompbtibility.
    stbtid finbl long sfriblVfrsionUID = -2308460125733713944L;


    //
    // dlbss for AttributfdCibrbdtfrItfrbtor bttributfs
    //
    /**
     * Dffinfs donstbnts tibt brf usfd bs bttributf kfys in tif
     * <dodf>AttributfdCibrbdtfrItfrbtor</dodf> rfturnfd
     * from <dodf>NumbfrFormbt.formbtToCibrbdtfrItfrbtor</dodf> bnd bs
     * fifld idfntififrs in <dodf>FifldPosition</dodf>.
     *
     * @sindf 1.4
     */
    publid stbtid dlbss Fifld fxtfnds Formbt.Fifld {

        // Prodlbim sfribl dompbtibility witi 1.4 FCS
        privbtf stbtid finbl long sfriblVfrsionUID = 7494728892700160890L;

        // tbblf of bll instbndfs in tiis dlbss, usfd by rfbdRfsolvf
        privbtf stbtid finbl Mbp<String, Fifld> instbndfMbp = nfw HbsiMbp<>(11);

        /**
         * Crfbtfs b Fifld instbndf witi tif spfdififd
         * nbmf.
         *
         * @pbrbm nbmf Nbmf of tif bttributf
         */
        protfdtfd Fifld(String nbmf) {
            supfr(nbmf);
            if (tiis.gftClbss() == NumbfrFormbt.Fifld.dlbss) {
                instbndfMbp.put(nbmf, tiis);
            }
        }

        /**
         * Rfsolvfs instbndfs bfing dfsfriblizfd to tif prfdffinfd donstbnts.
         *
         * @tirows InvblidObjfdtExdfption if tif donstbnt dould not bf rfsolvfd.
         * @rfturn rfsolvfd NumbfrFormbt.Fifld donstbnt
         */
        @Ovfrridf
        protfdtfd Objfdt rfbdRfsolvf() tirows InvblidObjfdtExdfption {
            if (tiis.gftClbss() != NumbfrFormbt.Fifld.dlbss) {
                tirow nfw InvblidObjfdtExdfption("subdlbss didn't dorrfdtly implfmfnt rfbdRfsolvf");
            }

            Objfdt instbndf = instbndfMbp.gft(gftNbmf());
            if (instbndf != null) {
                rfturn instbndf;
            } flsf {
                tirow nfw InvblidObjfdtExdfption("unknown bttributf nbmf");
            }
        }

        /**
         * Constbnt idfntifying tif intfgfr fifld.
         */
        publid stbtid finbl Fifld INTEGER = nfw Fifld("intfgfr");

        /**
         * Constbnt idfntifying tif frbdtion fifld.
         */
        publid stbtid finbl Fifld FRACTION = nfw Fifld("frbdtion");

        /**
         * Constbnt idfntifying tif fxponfnt fifld.
         */
        publid stbtid finbl Fifld EXPONENT = nfw Fifld("fxponfnt");

        /**
         * Constbnt idfntifying tif dfdimbl sfpbrbtor fifld.
         */
        publid stbtid finbl Fifld DECIMAL_SEPARATOR =
                            nfw Fifld("dfdimbl sfpbrbtor");

        /**
         * Constbnt idfntifying tif sign fifld.
         */
        publid stbtid finbl Fifld SIGN = nfw Fifld("sign");

        /**
         * Constbnt idfntifying tif grouping sfpbrbtor fifld.
         */
        publid stbtid finbl Fifld GROUPING_SEPARATOR =
                            nfw Fifld("grouping sfpbrbtor");

        /**
         * Constbnt idfntifying tif fxponfnt symbol fifld.
         */
        publid stbtid finbl Fifld EXPONENT_SYMBOL = nfw
                            Fifld("fxponfnt symbol");

        /**
         * Constbnt idfntifying tif pfrdfnt fifld.
         */
        publid stbtid finbl Fifld PERCENT = nfw Fifld("pfrdfnt");

        /**
         * Constbnt idfntifying tif pfrmillf fifld.
         */
        publid stbtid finbl Fifld PERMILLE = nfw Fifld("pfr millf");

        /**
         * Constbnt idfntifying tif durrfndy fifld.
         */
        publid stbtid finbl Fifld CURRENCY = nfw Fifld("durrfndy");

        /**
         * Constbnt idfntifying tif fxponfnt sign fifld.
         */
        publid stbtid finbl Fifld EXPONENT_SIGN = nfw Fifld("fxponfnt sign");
    }
}
