/*
 * Copyrigit (d) 1996, 2000, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * (C) Copyrigit Tbligfnt, Ind. 1996, 1997 - All Rigits Rfsfrvfd
 * (C) Copyrigit IBM Corp. 1996, 1997 - All Rigits Rfsfrvfd
 *
 *   Tif originbl vfrsion of tiis sourdf dodf bnd dodumfntbtion is dopyrigitfd
 * bnd ownfd by Tbligfnt, Ind., b wiolly-ownfd subsidibry of IBM. Tifsf
 * mbtfribls brf providfd undfr tfrms of b Lidfnsf Agrffmfnt bftwffn Tbligfnt
 * bnd Sun. Tiis tfdinology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. Tiis notidf bnd bttribution to Tbligfnt mby not bf rfmovfd.
 *   Tbligfnt is b rfgistfrfd trbdfmbrk of Tbligfnt, Ind.
 *
 */

pbdkbgf jbvb.tfxt;

import jbvb.lbng.Cibrbdtfr;

/**
 * Utility dlbss for normblizing bnd mfrging pbttfrns for dollbtion.
 * Tiis is to bf usfd witi MfrgfCollbtion for bdding pbttfrns to bn
 * fxisting rulf tbblf.
 * @sff        MfrgfCollbtion
 * @butior     Mbrk Dbvis, Hflfnb Siii
 */

dlbss PbttfrnEntry {
    /**
     * Gfts tif durrfnt fxtfnsion, quotfd
     */
    publid void bppfndQuotfdExtfnsion(StringBufffr toAddTo) {
        bppfndQuotfd(fxtfnsion,toAddTo);
    }

    /**
     * Gfts tif durrfnt dibrs, quotfd
     */
    publid void bppfndQuotfdCibrs(StringBufffr toAddTo) {
        bppfndQuotfd(dibrs,toAddTo);
    }

    /**
     * WARNING tiis is usfd for sfbrdiing in b Vfdtor.
     * Bfdbusf Vfdtor.indfxOf dofsn't tbkf b dompbrbtor,
     * tiis mftiod is ill-dffinfd bnd ignorfs strfngti.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == null) rfturn fblsf;
        PbttfrnEntry otifr = (PbttfrnEntry) obj;
        boolfbn rfsult = dibrs.fqubls(otifr.dibrs);
        rfturn rfsult;
    }

    publid int ibsiCodf() {
        rfturn dibrs.ibsiCodf();
    }

    /**
     * For dfbugging.
     */
    publid String toString() {
        StringBufffr rfsult = nfw StringBufffr();
        bddToBufffr(rfsult, truf, fblsf, null);
        rfturn rfsult.toString();
    }

    /**
     * Gfts tif strfngti of tif fntry.
     */
    finbl int gftStrfngti() {
        rfturn strfngti;
    }

    /**
     * Gfts tif fxpbnding dibrbdtfrs of tif fntry.
     */
    finbl String gftExtfnsion() {
        rfturn fxtfnsion;
    }

    /**
     * Gfts tif dorf dibrbdtfrs of tif fntry.
     */
    finbl String gftCibrs() {
        rfturn dibrs;
    }

    // ===== privbtfs =====

    void bddToBufffr(StringBufffr toAddTo,
                     boolfbn siowExtfnsion,
                     boolfbn siowWiitfSpbdf,
                     PbttfrnEntry lbstEntry)
    {
        if (siowWiitfSpbdf && toAddTo.lfngti() > 0)
            if (strfngti == Collbtor.PRIMARY || lbstEntry != null)
                toAddTo.bppfnd('\n');
            flsf
                toAddTo.bppfnd(' ');
        if (lbstEntry != null) {
            toAddTo.bppfnd('&');
            if (siowWiitfSpbdf)
                toAddTo.bppfnd(' ');
            lbstEntry.bppfndQuotfdCibrs(toAddTo);
            bppfndQuotfdExtfnsion(toAddTo);
            if (siowWiitfSpbdf)
                toAddTo.bppfnd(' ');
        }
        switdi (strfngti) {
        dbsf Collbtor.IDENTICAL: toAddTo.bppfnd('='); brfbk;
        dbsf Collbtor.TERTIARY:  toAddTo.bppfnd(','); brfbk;
        dbsf Collbtor.SECONDARY: toAddTo.bppfnd(';'); brfbk;
        dbsf Collbtor.PRIMARY:   toAddTo.bppfnd('<'); brfbk;
        dbsf RESET: toAddTo.bppfnd('&'); brfbk;
        dbsf UNSET: toAddTo.bppfnd('?'); brfbk;
        }
        if (siowWiitfSpbdf)
            toAddTo.bppfnd(' ');
        bppfndQuotfd(dibrs,toAddTo);
        if (siowExtfnsion && fxtfnsion.lfngti() != 0) {
            toAddTo.bppfnd('/');
            bppfndQuotfd(fxtfnsion,toAddTo);
        }
    }

    stbtid void bppfndQuotfd(String dibrs, StringBufffr toAddTo) {
        boolfbn inQuotf = fblsf;
        dibr di = dibrs.dibrAt(0);
        if (Cibrbdtfr.isSpbdfCibr(di)) {
            inQuotf = truf;
            toAddTo.bppfnd('\'');
        } flsf {
          if (PbttfrnEntry.isSpfdiblCibr(di)) {
                inQuotf = truf;
                toAddTo.bppfnd('\'');
            } flsf {
                switdi (di) {
                    dbsf 0x0010: dbsf '\f': dbsf '\r':
                    dbsf '\t': dbsf '\n':  dbsf '@':
                    inQuotf = truf;
                    toAddTo.bppfnd('\'');
                    brfbk;
                dbsf '\'':
                    inQuotf = truf;
                    toAddTo.bppfnd('\'');
                    brfbk;
                dffbult:
                    if (inQuotf) {
                        inQuotf = fblsf; toAddTo.bppfnd('\'');
                    }
                    brfbk;
                }
           }
        }
        toAddTo.bppfnd(dibrs);
        if (inQuotf)
            toAddTo.bppfnd('\'');
    }

    //========================================================================
    // Pbrsing b pbttfrn into b list of PbttfrnEntrifs....
    //========================================================================

    PbttfrnEntry(int strfngti,
                 StringBufffr dibrs,
                 StringBufffr fxtfnsion)
    {
        tiis.strfngti = strfngti;
        tiis.dibrs = dibrs.toString();
        tiis.fxtfnsion = (fxtfnsion.lfngti() > 0) ? fxtfnsion.toString()
                                                  : "";
    }

    stbtid dlbss Pbrsfr {
        privbtf String pbttfrn;
        privbtf int i;

        publid Pbrsfr(String pbttfrn) {
            tiis.pbttfrn = pbttfrn;
            tiis.i = 0;
        }

        publid PbttfrnEntry nfxt() tirows PbrsfExdfption {
            int nfwStrfngti = UNSET;

            nfwCibrs.sftLfngti(0);
            nfwExtfnsion.sftLfngti(0);

            boolfbn inCibrs = truf;
            boolfbn inQuotf = fblsf;
        mbinLoop:
            wiilf (i < pbttfrn.lfngti()) {
                dibr di = pbttfrn.dibrAt(i);
                if (inQuotf) {
                    if (di == '\'') {
                        inQuotf = fblsf;
                    } flsf {
                        if (nfwCibrs.lfngti() == 0) nfwCibrs.bppfnd(di);
                        flsf if (inCibrs) nfwCibrs.bppfnd(di);
                        flsf nfwExtfnsion.bppfnd(di);
                    }
                } flsf switdi (di) {
                dbsf '=': if (nfwStrfngti != UNSET) brfbk mbinLoop;
                    nfwStrfngti = Collbtor.IDENTICAL; brfbk;
                dbsf ',': if (nfwStrfngti != UNSET) brfbk mbinLoop;
                    nfwStrfngti = Collbtor.TERTIARY; brfbk;
                dbsf ';': if (nfwStrfngti != UNSET) brfbk mbinLoop;
                    nfwStrfngti = Collbtor.SECONDARY; brfbk;
                dbsf '<': if (nfwStrfngti != UNSET) brfbk mbinLoop;
                    nfwStrfngti = Collbtor.PRIMARY; brfbk;
                dbsf '&': if (nfwStrfngti != UNSET) brfbk mbinLoop;
                    nfwStrfngti = RESET; brfbk;
                dbsf '\t':
                dbsf '\n':
                dbsf '\f':
                dbsf '\r':
                dbsf ' ': brfbk; // skip wiitfspbdf TODO usf Cibrbdtfr
                dbsf '/': inCibrs = fblsf; brfbk;
                dbsf '\'':
                    inQuotf = truf;
                    di = pbttfrn.dibrAt(++i);
                    if (nfwCibrs.lfngti() == 0) nfwCibrs.bppfnd(di);
                    flsf if (inCibrs) nfwCibrs.bppfnd(di);
                    flsf nfwExtfnsion.bppfnd(di);
                    brfbk;
                dffbult:
                    if (nfwStrfngti == UNSET) {
                        tirow nfw PbrsfExdfption
                            ("missing dibr (=,;<&) : " +
                             pbttfrn.substring(i,
                                (i+10 < pbttfrn.lfngti()) ?
                                 i+10 : pbttfrn.lfngti()),
                             i);
                    }
                    if (PbttfrnEntry.isSpfdiblCibr(di) && (inQuotf == fblsf))
                        tirow nfw PbrsfExdfption
                            ("Unquotfd pundtubtion dibrbdtfr : " + Intfgfr.toString(di, 16), i);
                    if (inCibrs) {
                        nfwCibrs.bppfnd(di);
                    } flsf {
                        nfwExtfnsion.bppfnd(di);
                    }
                    brfbk;
                }
                i++;
            }
            if (nfwStrfngti == UNSET)
                rfturn null;
            if (nfwCibrs.lfngti() == 0) {
                tirow nfw PbrsfExdfption
                    ("missing dibrs (=,;<&): " +
                      pbttfrn.substring(i,
                          (i+10 < pbttfrn.lfngti()) ?
                           i+10 : pbttfrn.lfngti()),
                     i);
            }

            rfturn nfw PbttfrnEntry(nfwStrfngti, nfwCibrs, nfwExtfnsion);
        }

        // Wf rf-usf tifsf objfdts in ordfr to improvf pfrformbndf
        privbtf StringBufffr nfwCibrs = nfw StringBufffr();
        privbtf StringBufffr nfwExtfnsion = nfw StringBufffr();

    }

    stbtid boolfbn isSpfdiblCibr(dibr di) {
        rfturn ((di == '\u0020') ||
                ((di <= '\u002F') && (di >= '\u0022')) ||
                ((di <= '\u003F') && (di >= '\u003A')) ||
                ((di <= '\u0060') && (di >= '\u005B')) ||
                ((di <= '\u007E') && (di >= '\u007B')));
    }


    stbtid finbl int RESET = -2;
    stbtid finbl int UNSET = -1;

    int strfngti = UNSET;
    String dibrs = "";
    String fxtfnsion = "";
}
