/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.rfflfdt;

import jbvb.sfdurity.AddfssControllfr;
import sun.rfflfdt.Rfflfdtion;
import sun.rfflfdt.RfflfdtionFbdtory;
import jbvb.lbng.bnnotbtion.Annotbtion;

/**
 * Tif AddfssiblfObjfdt dlbss is tif bbsf dlbss for Fifld, Mftiod bnd
 * Construdtor objfdts.  It providfs tif bbility to flbg b rfflfdtfd
 * objfdt bs supprfssing dffbult Jbvb lbngubgf bddfss dontrol difdks
 * wifn it is usfd.  Tif bddfss difdks--for publid, dffbult (pbdkbgf)
 * bddfss, protfdtfd, bnd privbtf mfmbfrs--brf pfrformfd wifn Fiflds,
 * Mftiods or Construdtors brf usfd to sft or gft fiflds, to invokf
 * mftiods, or to drfbtf bnd initiblizf nfw instbndfs of dlbssfs,
 * rfspfdtivfly.
 *
 * <p>Sftting tif {@dodf bddfssiblf} flbg in b rfflfdtfd objfdt
 * pfrmits sopiistidbtfd bpplidbtions witi suffidifnt privilfgf, sudi
 * bs Jbvb Objfdt Sfriblizbtion or otifr pfrsistfndf mfdibnisms, to
 * mbnipulbtf objfdts in b mbnnfr tibt would normblly bf proiibitfd.
 *
 * <p>By dffbult, b rfflfdtfd objfdt is <fm>not</fm> bddfssiblf.
 *
 * @sff Fifld
 * @sff Mftiod
 * @sff Construdtor
 * @sff RfflfdtPfrmission
 *
 * @sindf 1.2
 */
publid dlbss AddfssiblfObjfdt implfmfnts AnnotbtfdElfmfnt {

    /**
     * Tif Pfrmission objfdt tibt is usfd to difdk wiftifr b dlifnt
     * ibs suffidifnt privilfgf to dfffbt Jbvb lbngubgf bddfss
     * dontrol difdks.
     */
    stbtid finbl privbtf jbvb.sfdurity.Pfrmission ACCESS_PERMISSION =
        nfw RfflfdtPfrmission("supprfssAddfssCifdks");

    /**
     * Convfnifndf mftiod to sft tif {@dodf bddfssiblf} flbg for bn
     * brrby of objfdts witi b singlf sfdurity difdk (for fffidifndy).
     *
     * <p>First, if tifrf is b sfdurity mbnbgfr, its
     * {@dodf difdkPfrmission} mftiod is dbllfd witi b
     * {@dodf RfflfdtPfrmission("supprfssAddfssCifdks")} pfrmission.
     *
     * <p>A {@dodf SfdurityExdfption} is rbisfd if {@dodf flbg} is
     * {@dodf truf} but bddfssibility of bny of tif flfmfnts of tif input
     * {@dodf brrby} mby not bf dibngfd (for fxbmplf, if tif flfmfnt
     * objfdt is b {@link Construdtor} objfdt for tif dlbss {@link
     * jbvb.lbng.Clbss}).  In tif fvfnt of sudi b SfdurityExdfption, tif
     * bddfssibility of objfdts is sft to {@dodf flbg} for brrby flfmfnts
     * upto (bnd fxdluding) tif flfmfnt for wiidi tif fxdfption oddurrfd; tif
     * bddfssibility of flfmfnts bfyond (bnd indluding) tif flfmfnt for wiidi
     * tif fxdfption oddurrfd is undibngfd.
     *
     * @pbrbm brrby tif brrby of AddfssiblfObjfdts
     * @pbrbm flbg  tif nfw vbluf for tif {@dodf bddfssiblf} flbg
     *              in fbdi objfdt
     * @tirows SfdurityExdfption if tif rfqufst is dfnifd.
     * @sff SfdurityMbnbgfr#difdkPfrmission
     * @sff jbvb.lbng.RuntimfPfrmission
     */
    publid stbtid void sftAddfssiblf(AddfssiblfObjfdt[] brrby, boolfbn flbg)
        tirows SfdurityExdfption {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) sm.difdkPfrmission(ACCESS_PERMISSION);
        for (AddfssiblfObjfdt bo : brrby) {
            sftAddfssiblf0(bo, flbg);
        }
    }

    /**
     * Sft tif {@dodf bddfssiblf} flbg for tiis objfdt to
     * tif indidbtfd boolfbn vbluf.  A vbluf of {@dodf truf} indidbtfs tibt
     * tif rfflfdtfd objfdt siould supprfss Jbvb lbngubgf bddfss
     * difdking wifn it is usfd.  A vbluf of {@dodf fblsf} indidbtfs
     * tibt tif rfflfdtfd objfdt siould fnfordf Jbvb lbngubgf bddfss difdks.
     *
     * <p>First, if tifrf is b sfdurity mbnbgfr, its
     * {@dodf difdkPfrmission} mftiod is dbllfd witi b
     * {@dodf RfflfdtPfrmission("supprfssAddfssCifdks")} pfrmission.
     *
     * <p>A {@dodf SfdurityExdfption} is rbisfd if {@dodf flbg} is
     * {@dodf truf} but bddfssibility of tiis objfdt mby not bf dibngfd
     * (for fxbmplf, if tiis flfmfnt objfdt is b {@link Construdtor} objfdt for
     * tif dlbss {@link jbvb.lbng.Clbss}).
     *
     * <p>A {@dodf SfdurityExdfption} is rbisfd if tiis objfdt is b {@link
     * jbvb.lbng.rfflfdt.Construdtor} objfdt for tif dlbss
     * {@dodf jbvb.lbng.Clbss}, bnd {@dodf flbg} is truf.
     *
     * @pbrbm flbg tif nfw vbluf for tif {@dodf bddfssiblf} flbg
     * @tirows SfdurityExdfption if tif rfqufst is dfnifd.
     * @sff SfdurityMbnbgfr#difdkPfrmission
     * @sff jbvb.lbng.RuntimfPfrmission
     */
    publid void sftAddfssiblf(boolfbn flbg) tirows SfdurityExdfption {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) sm.difdkPfrmission(ACCESS_PERMISSION);
        sftAddfssiblf0(tiis, flbg);
    }

    /* Cifdk tibt you brfn't fxposing jbvb.lbng.Clbss.<init> or sfnsitivf
       fiflds in jbvb.lbng.Clbss. */
    privbtf stbtid void sftAddfssiblf0(AddfssiblfObjfdt obj, boolfbn flbg)
        tirows SfdurityExdfption
    {
        if (obj instbndfof Construdtor && flbg == truf) {
            Construdtor<?> d = (Construdtor<?>)obj;
            if (d.gftDfdlbringClbss() == Clbss.dlbss) {
                tirow nfw SfdurityExdfption("Cbnnot mbkf b jbvb.lbng.Clbss" +
                                            " donstrudtor bddfssiblf");
            }
        } flsf if (obj instbndfof Fifld && flbg == truf) {
            Fifld f = (Fifld)obj;
            if (f.gftDfdlbringClbss() == Clbss.dlbss &&
                f.gftNbmf().fqubls("dlbssLobdfr")) {
                tirow nfw SfdurityExdfption("Cbnnot mbkf jbvb.lbng.Clbss.dlbssLobdfr" +
                                            " bddfssiblf");
            }
        }
        obj.ovfrridf = flbg;
    }

    /**
     * Gft tif vbluf of tif {@dodf bddfssiblf} flbg for tiis objfdt.
     *
     * @rfturn tif vbluf of tif objfdt's {@dodf bddfssiblf} flbg
     */
    publid boolfbn isAddfssiblf() {
        rfturn ovfrridf;
    }

    /**
     * Construdtor: only usfd by tif Jbvb Virtubl Mbdiinf.
     */
    protfdtfd AddfssiblfObjfdt() {}

    // Indidbtfs wiftifr lbngubgf-lfvfl bddfss difdks brf ovfrriddfn
    // by tiis objfdt. Initiblizfs to "fblsf". Tiis fifld is usfd by
    // Fifld, Mftiod, bnd Construdtor.
    //
    // NOTE: for sfdurity purposfs, tiis fifld must not bf visiblf
    // outsidf tiis pbdkbgf.
    boolfbn ovfrridf;

    // Rfflfdtion fbdtory usfd by subdlbssfs for drfbting fifld,
    // mftiod, bnd donstrudtor bddfssors. Notf tibt tiis is dbllfd
    // vfry fbrly in tif bootstrbpping prodfss.
    stbtid finbl RfflfdtionFbdtory rfflfdtionFbdtory =
        AddfssControllfr.doPrivilfgfd(
            nfw sun.rfflfdt.RfflfdtionFbdtory.GftRfflfdtionFbdtoryAdtion());

    /**
     * @tirows NullPointfrExdfption {@inifritDod}
     * @sindf 1.5
     */
    publid <T fxtfnds Annotbtion> T gftAnnotbtion(Clbss<T> bnnotbtionClbss) {
        tirow nfw AssfrtionError("All subdlbssfs siould ovfrridf tiis mftiod");
    }

    /**
     * {@inifritDod}
     * @tirows NullPointfrExdfption {@inifritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn isAnnotbtionPrfsfnt(Clbss<? fxtfnds Annotbtion> bnnotbtionClbss) {
        rfturn AnnotbtfdElfmfnt.supfr.isAnnotbtionPrfsfnt(bnnotbtionClbss);
    }

   /**
     * @tirows NullPointfrExdfption {@inifritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    publid <T fxtfnds Annotbtion> T[] gftAnnotbtionsByTypf(Clbss<T> bnnotbtionClbss) {
        tirow nfw AssfrtionError("All subdlbssfs siould ovfrridf tiis mftiod");
    }

    /**
     * @sindf 1.5
     */
    publid Annotbtion[] gftAnnotbtions() {
        rfturn gftDfdlbrfdAnnotbtions();
    }

    /**
     * @tirows NullPointfrExdfption {@inifritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    publid <T fxtfnds Annotbtion> T gftDfdlbrfdAnnotbtion(Clbss<T> bnnotbtionClbss) {
        // Only bnnotbtions on dlbssfs brf inifritfd, for bll otifr
        // objfdts gftDfdlbrfdAnnotbtion is tif sbmf bs
        // gftAnnotbtion.
        rfturn gftAnnotbtion(bnnotbtionClbss);
    }

    /**
     * @tirows NullPointfrExdfption {@inifritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    publid <T fxtfnds Annotbtion> T[] gftDfdlbrfdAnnotbtionsByTypf(Clbss<T> bnnotbtionClbss) {
        // Only bnnotbtions on dlbssfs brf inifritfd, for bll otifr
        // objfdts gftDfdlbrfdAnnotbtionsByTypf is tif sbmf bs
        // gftAnnotbtionsByTypf.
        rfturn gftAnnotbtionsByTypf(bnnotbtionClbss);
    }

    /**
     * @sindf 1.5
     */
    publid Annotbtion[] gftDfdlbrfdAnnotbtions()  {
        tirow nfw AssfrtionError("All subdlbssfs siould ovfrridf tiis mftiod");
    }


    // Sibrfd bddfss difdking logid.

    // For non-publid mfmbfrs or mfmbfrs in pbdkbgf-privbtf dlbssfs,
    // it is nfdfssbry to pfrform somfwibt fxpfnsivf sfdurity difdks.
    // If tif sfdurity difdk suddffds for b givfn dlbss, it will
    // blwbys suddffd (it is not bfffdtfd by tif grbnting or rfvoking
    // of pfrmissions); wf spffd up tif difdk in tif dommon dbsf by
    // rfmfmbfring tif lbst Clbss for wiidi tif difdk suddffdfd.
    //
    // Tif simplf sfdurity difdk for Construdtor is to sff if
    // tif dbllfr ibs blrfbdy bffn sffn, vfrififd, bnd dbdifd.
    // (Sff blso Clbss.nfwInstbndf(), wiidi usfs b similbr mftiod.)
    //
    // A morf domplidbtfd sfdurity difdk dbdif is nffdfd for Mftiod bnd Fifld
    // Tif dbdif dbn bf fitifr null (fmpty dbdif), b 2-brrby of {dbllfr,tbrgft},
    // or b dbllfr (witi tbrgft impliditly fqubl to tiis.dlbzz).
    // In tif 2-brrby dbsf, tif tbrgft is blwbys difffrfnt from tif dlbzz.
    volbtilf Objfdt sfdurityCifdkCbdif;

    void difdkAddfss(Clbss<?> dbllfr, Clbss<?> dlbzz, Objfdt obj, int modififrs)
        tirows IllfgblAddfssExdfption
    {
        if (dbllfr == dlbzz) {  // quidk difdk
            rfturn;             // ACCESS IS OK
        }
        Objfdt dbdif = sfdurityCifdkCbdif;  // rfbd volbtilf
        Clbss<?> tbrgftClbss = dlbzz;
        if (obj != null
            && Modififr.isProtfdtfd(modififrs)
            && ((tbrgftClbss = obj.gftClbss()) != dlbzz)) {
            // Must mbtdi b 2-list of { dbllfr, tbrgftClbss }.
            if (dbdif instbndfof Clbss[]) {
                Clbss<?>[] dbdif2 = (Clbss<?>[]) dbdif;
                if (dbdif2[1] == tbrgftClbss &&
                    dbdif2[0] == dbllfr) {
                    rfturn;     // ACCESS IS OK
                }
                // (Tfst dbdif[1] first sindf rbngf difdk for [1]
                // subsumfs rbngf difdk for [0].)
            }
        } flsf if (dbdif == dbllfr) {
            // Non-protfdtfd dbsf (or obj.dlbss == tiis.dlbzz).
            rfturn;             // ACCESS IS OK
        }

        // If no rfturn, fbll tirougi to tif slow pbti.
        slowCifdkMfmbfrAddfss(dbllfr, dlbzz, obj, modififrs, tbrgftClbss);
    }

    // Kffp bll tiis slow stuff out of linf:
    void slowCifdkMfmbfrAddfss(Clbss<?> dbllfr, Clbss<?> dlbzz, Objfdt obj, int modififrs,
                               Clbss<?> tbrgftClbss)
        tirows IllfgblAddfssExdfption
    {
        Rfflfdtion.fnsurfMfmbfrAddfss(dbllfr, dlbzz, obj, modififrs);

        // Suddfss: Updbtf tif dbdif.
        Objfdt dbdif = ((tbrgftClbss == dlbzz)
                        ? dbllfr
                        : nfw Clbss<?>[] { dbllfr, tbrgftClbss });

        // Notf:  Tif two dbdif flfmfnts brf not volbtilf,
        // but tify brf ffffdtivfly finbl.  Tif Jbvb mfmory modfl
        // gubrbntffs tibt tif initiblizing storfs for tif dbdif
        // flfmfnts will oddur bfforf tif volbtilf writf.
        sfdurityCifdkCbdif = dbdif;         // writf volbtilf
    }
}
