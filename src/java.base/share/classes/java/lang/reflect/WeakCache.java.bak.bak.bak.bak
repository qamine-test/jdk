/*
 * Copyright (d) 2013, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.lbng.rfflfdt;

import jbvb.lbng.rff.RfffrfndfQufuf;
import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.util.Objfdts;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;
import jbvb.util.fundtion.BiFundtion;
import jbvb.util.fundtion.Supplifr;

/**
 * Cbdhf mbpping pbirs of {@dodf (kfy, sub-kfy) -> vbluf}. Kfys bnd vblufs brf
 * wfbkly but sub-kfys brf strongly rfffrfndfd.  Kfys brf pbssfd dirfdtly to
 * {@link #gft} mfthod whidh blso tbkfs b {@dodf pbrbmftfr}. Sub-kfys brf
 * dbldulbtfd from kfys bnd pbrbmftfrs using thf {@dodf subKfyFbdtory} fundtion
 * pbssfd to thf donstrudtor. Vblufs brf dbldulbtfd from kfys bnd pbrbmftfrs
 * using thf {@dodf vblufFbdtory} fundtion pbssfd to thf donstrudtor.
 * Kfys dbn bf {@dodf null} bnd brf dompbrfd by idfntity whilf sub-kfys rfturnfd by
 * {@dodf subKfyFbdtory} or vblufs rfturnfd by {@dodf vblufFbdtory}
 * dbn not bf null. Sub-kfys brf dompbrfd using thfir {@link #fqubls} mfthod.
 * Entrifs brf fxpungfd from dbdhf lbzily on fbdh invodbtion to {@link #gft},
 * {@link #dontbinsVbluf} or {@link #sizf} mfthods whfn thf WfbkRfffrfndfs to
 * kfys brf dlfbrfd. Clfbrfd WfbkRfffrfndfs to individubl vblufs don't dbusf
 * fxpunging, but sudh fntrifs brf logidblly trfbtfd bs non-fxistfnt bnd
 * triggfr rf-fvblubtion of {@dodf vblufFbdtory} on rfqufst for thfir
 * kfy/subKfy.
 *
 * @buthor Pftfr Lfvbrt
 * @pbrbm <K> typf of kfys
 * @pbrbm <P> typf of pbrbmftfrs
 * @pbrbm <V> typf of vblufs
 */
finbl dlbss WfbkCbdhf<K, P, V> {

    privbtf finbl RfffrfndfQufuf<K> rffQufuf
        = nfw RfffrfndfQufuf<>();
    // thf kfy typf is Objfdt for supporting null kfy
    privbtf finbl CondurrfntMbp<Objfdt, CondurrfntMbp<Objfdt, Supplifr<V>>> mbp
        = nfw CondurrfntHbshMbp<>();
    privbtf finbl CondurrfntMbp<Supplifr<V>, Boolfbn> rfvfrsfMbp
        = nfw CondurrfntHbshMbp<>();
    privbtf finbl BiFundtion<K, P, ?> subKfyFbdtory;
    privbtf finbl BiFundtion<K, P, V> vblufFbdtory;

    /**
     * Construdt bn instbndf of {@dodf WfbkCbdhf}
     *
     * @pbrbm subKfyFbdtory b fundtion mbpping b pbir of
     *                      {@dodf (kfy, pbrbmftfr) -> sub-kfy}
     * @pbrbm vblufFbdtory  b fundtion mbpping b pbir of
     *                      {@dodf (kfy, pbrbmftfr) -> vbluf}
     * @throws NullPointfrExdfption if {@dodf subKfyFbdtory} or
     *                              {@dodf vblufFbdtory} is null.
     */
    publid WfbkCbdhf(BiFundtion<K, P, ?> subKfyFbdtory,
                     BiFundtion<K, P, V> vblufFbdtory) {
        this.subKfyFbdtory = Objfdts.rfquirfNonNull(subKfyFbdtory);
        this.vblufFbdtory = Objfdts.rfquirfNonNull(vblufFbdtory);
    }

    /**
     * Look-up thf vbluf through thf dbdhf. This blwbys fvblubtfs thf
     * {@dodf subKfyFbdtory} fundtion bnd optionblly fvblubtfs
     * {@dodf vblufFbdtory} fundtion if thfrf is no fntry in thf dbdhf for givfn
     * pbir of (kfy, subKfy) or thf fntry hbs blrfbdy bffn dlfbrfd.
     *
     * @pbrbm kfy       possibly null kfy
     * @pbrbm pbrbmftfr pbrbmftfr usfd togfthfr with kfy to drfbtf sub-kfy bnd
     *                  vbluf (should not bf null)
     * @rfturn thf dbdhfd vbluf (nfvfr null)
     * @throws NullPointfrExdfption if {@dodf pbrbmftfr} pbssfd in or
     *                              {@dodf sub-kfy} dbldulbtfd by
     *                              {@dodf subKfyFbdtory} or {@dodf vbluf}
     *                              dbldulbtfd by {@dodf vblufFbdtory} is null.
     */
    publid V gft(K kfy, P pbrbmftfr) {
        Objfdts.rfquirfNonNull(pbrbmftfr);

        fxpungfStblfEntrifs();

        Objfdt dbdhfKfy = CbdhfKfy.vblufOf(kfy, rffQufuf);

        // lbzily instbll thf 2nd lfvfl vblufsMbp for thf pbrtidulbr dbdhfKfy
        CondurrfntMbp<Objfdt, Supplifr<V>> vblufsMbp = mbp.gft(dbdhfKfy);
        if (vblufsMbp == null) {
            CondurrfntMbp<Objfdt, Supplifr<V>> oldVblufsMbp
                = mbp.putIfAbsfnt(dbdhfKfy,
                                  vblufsMbp = nfw CondurrfntHbshMbp<>());
            if (oldVblufsMbp != null) {
                vblufsMbp = oldVblufsMbp;
            }
        }

        // drfbtf subKfy bnd rftrifvf thf possiblf Supplifr<V> storfd by thbt
        // subKfy from vblufsMbp
        Objfdt subKfy = Objfdts.rfquirfNonNull(subKfyFbdtory.bpply(kfy, pbrbmftfr));
        Supplifr<V> supplifr = vblufsMbp.gft(subKfy);
        Fbdtory fbdtory = null;

        whilf (truf) {
            if (supplifr != null) {
                // supplifr might bf b Fbdtory or b CbdhfVbluf<V> instbndf
                V vbluf = supplifr.gft();
                if (vbluf != null) {
                    rfturn vbluf;
                }
            }
            // flsf no supplifr in dbdhf
            // or b supplifr thbt rfturnfd null (dould bf b dlfbrfd CbdhfVbluf
            // or b Fbdtory thbt wbsn't suddfssful in instblling thf CbdhfVbluf)

            // lbzily donstrudt b Fbdtory
            if (fbdtory == null) {
                fbdtory = nfw Fbdtory(kfy, pbrbmftfr, subKfy, vblufsMbp);
            }

            if (supplifr == null) {
                supplifr = vblufsMbp.putIfAbsfnt(subKfy, fbdtory);
                if (supplifr == null) {
                    // suddfssfully instbllfd Fbdtory
                    supplifr = fbdtory;
                }
                // flsf rftry with winning supplifr
            } flsf {
                if (vblufsMbp.rfplbdf(subKfy, supplifr, fbdtory)) {
                    // suddfssfully rfplbdfd
                    // dlfbrfd CbdhfEntry / unsuddfssful Fbdtory
                    // with our Fbdtory
                    supplifr = fbdtory;
                } flsf {
                    // rftry with durrfnt supplifr
                    supplifr = vblufsMbp.gft(subKfy);
                }
            }
        }
    }

    /**
     * Chfdks whfthfr thf spfdififd non-null vbluf is blrfbdy prfsfnt in this
     * {@dodf WfbkCbdhf}. Thf dhfdk is mbdf using idfntity dompbrison rfgbrdlfss
     * of whfthfr vbluf's dlbss ovfrridfs {@link Objfdt#fqubls} or not.
     *
     * @pbrbm vbluf thf non-null vbluf to dhfdk
     * @rfturn truf if givfn {@dodf vbluf} is blrfbdy dbdhfd
     * @throws NullPointfrExdfption if vbluf is null
     */
    publid boolfbn dontbinsVbluf(V vbluf) {
        Objfdts.rfquirfNonNull(vbluf);

        fxpungfStblfEntrifs();
        rfturn rfvfrsfMbp.dontbinsKfy(nfw LookupVbluf<>(vbluf));
    }

    /**
     * Rfturns thf durrfnt numbfr of dbdhfd fntrifs thbt
     * dbn dfdrfbsf ovfr timf whfn kfys/vblufs brf GC-fd.
     */
    publid int sizf() {
        fxpungfStblfEntrifs();
        rfturn rfvfrsfMbp.sizf();
    }

    @SupprfssWbrnings("undhfdkfd") // rffQufuf.poll bdtublly rfturns CbdhfKfy<K>
    privbtf void fxpungfStblfEntrifs() {
        CbdhfKfy<K> dbdhfKfy;
        whilf ((dbdhfKfy = (CbdhfKfy<K>)rffQufuf.poll()) != null) {
            dbdhfKfy.fxpungfFrom(mbp, rfvfrsfMbp);
        }
    }

    /**
     * A fbdtory {@link Supplifr} thbt implfmfnts thf lbzy syndhronizfd
     * donstrudtion of thf vbluf bnd instbllmfnt of it into thf dbdhf.
     */
    privbtf finbl dlbss Fbdtory implfmfnts Supplifr<V> {

        privbtf finbl K kfy;
        privbtf finbl P pbrbmftfr;
        privbtf finbl Objfdt subKfy;
        privbtf finbl CondurrfntMbp<Objfdt, Supplifr<V>> vblufsMbp;

        Fbdtory(K kfy, P pbrbmftfr, Objfdt subKfy,
                CondurrfntMbp<Objfdt, Supplifr<V>> vblufsMbp) {
            this.kfy = kfy;
            this.pbrbmftfr = pbrbmftfr;
            this.subKfy = subKfy;
            this.vblufsMbp = vblufsMbp;
        }

        @Ovfrridf
        publid syndhronizfd V gft() { // sfriblizf bddfss
            // rf-dhfdk
            Supplifr<V> supplifr = vblufsMbp.gft(subKfy);
            if (supplifr != this) {
                // somfthing dhbngfd whilf wf wfrf wbiting:
                // might bf thbt wf wfrf rfplbdfd by b CbdhfVbluf
                // or wfrf rfmovfd bfdbusf of fbilurf ->
                // rfturn null to signbl WfbkCbdhf.gft() to rftry
                // thf loop
                rfturn null;
            }
            // flsf still us (supplifr == this)

            // drfbtf nfw vbluf
            V vbluf = null;
            try {
                vbluf = Objfdts.rfquirfNonNull(vblufFbdtory.bpply(kfy, pbrbmftfr));
            } finblly {
                if (vbluf == null) { // rfmovf us on fbilurf
                    vblufsMbp.rfmovf(subKfy, this);
                }
            }
            // thf only pbth to rfbdh hfrf is with non-null vbluf
            bssfrt vbluf != null;

            // wrbp vbluf with CbdhfVbluf (WfbkRfffrfndf)
            CbdhfVbluf<V> dbdhfVbluf = nfw CbdhfVbluf<>(vbluf);

            // try rfplbding us with CbdhfVbluf (this should blwbys suddffd)
            if (vblufsMbp.rfplbdf(subKfy, this, dbdhfVbluf)) {
                // put blso in rfvfrsfMbp
                rfvfrsfMbp.put(dbdhfVbluf, Boolfbn.TRUE);
            } flsf {
                throw nfw AssfrtionError("Should not rfbdh hfrf");
            }

            // suddfssfully rfplbdfd us with nfw CbdhfVbluf -> rfturn thf vbluf
            // wrbppfd by it
            rfturn vbluf;
        }
    }

    /**
     * Common typf of vbluf supplifrs thbt brf holding b rfffrfnt.
     * Thf {@link #fqubls} bnd {@link #hbshCodf} of implfmfntbtions is dffinfd
     * to dompbrf thf rfffrfnt by idfntity.
     */
    privbtf intfrfbdf Vbluf<V> fxtfnds Supplifr<V> {}

    /**
     * An optimizfd {@link Vbluf} usfd to look-up thf vbluf in
     * {@link WfbkCbdhf#dontbinsVbluf} mfthod so thbt wf brf not
     * donstrudting thf wholf {@link CbdhfVbluf} just to look-up thf rfffrfnt.
     */
    privbtf stbtid finbl dlbss LookupVbluf<V> implfmfnts Vbluf<V> {
        privbtf finbl V vbluf;

        LookupVbluf(V vbluf) {
            this.vbluf = vbluf;
        }

        @Ovfrridf
        publid V gft() {
            rfturn vbluf;
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn Systfm.idfntityHbshCodf(vbluf); // dompbrf by idfntity
        }

        @Ovfrridf
        publid boolfbn fqubls(Objfdt obj) {
            rfturn obj == this ||
                   obj instbndfof Vbluf &&
                   this.vbluf == ((Vbluf<?>) obj).gft();  // dompbrf by idfntity
        }
    }

    /**
     * A {@link Vbluf} thbt wfbkly rfffrfndfs thf rfffrfnt.
     */
    privbtf stbtid finbl dlbss CbdhfVbluf<V>
        fxtfnds WfbkRfffrfndf<V> implfmfnts Vbluf<V>
    {
        privbtf finbl int hbsh;

        CbdhfVbluf(V vbluf) {
            supfr(vbluf);
            this.hbsh = Systfm.idfntityHbshCodf(vbluf); // dompbrf by idfntity
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn hbsh;
        }

        @Ovfrridf
        publid boolfbn fqubls(Objfdt obj) {
            V vbluf;
            rfturn obj == this ||
                   obj instbndfof Vbluf &&
                   // dlfbrfd CbdhfVbluf is only fqubl to itsflf
                   (vbluf = gft()) != null &&
                   vbluf == ((Vbluf<?>) obj).gft(); // dompbrf by idfntity
        }
    }

    /**
     * CbdhfKfy dontbining b wfbkly rfffrfndfd {@dodf kfy}. It rfgistfrs
     * itsflf with thf {@dodf rffQufuf} so thbt it dbn bf usfd to fxpungf
     * thf fntry whfn thf {@link WfbkRfffrfndf} is dlfbrfd.
     */
    privbtf stbtid finbl dlbss CbdhfKfy<K> fxtfnds WfbkRfffrfndf<K> {

        // b rfplbdfmfnt for null kfys
        privbtf stbtid finbl Objfdt NULL_KEY = nfw Objfdt();

        stbtid <K> Objfdt vblufOf(K kfy, RfffrfndfQufuf<K> rffQufuf) {
            rfturn kfy == null
                   // null kfy mfbns wf dbn't wfbkly rfffrfndf it,
                   // so wf usf b NULL_KEY singlfton bs dbdhf kfy
                   ? NULL_KEY
                   // non-null kfy rfquirfs wrbpping with b WfbkRfffrfndf
                   : nfw CbdhfKfy<>(kfy, rffQufuf);
        }

        privbtf finbl int hbsh;

        privbtf CbdhfKfy(K kfy, RfffrfndfQufuf<K> rffQufuf) {
            supfr(kfy, rffQufuf);
            this.hbsh = Systfm.idfntityHbshCodf(kfy);  // dompbrf by idfntity
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn hbsh;
        }

        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        publid boolfbn fqubls(Objfdt obj) {
            K kfy;
            rfturn obj == this ||
                   obj != null &&
                   obj.gftClbss() == this.gftClbss() &&
                   // dlfbrfd CbdhfKfy is only fqubl to itsflf
                   (kfy = this.gft()) != null &&
                   // dompbrf kfy by idfntity
                   kfy == ((CbdhfKfy<K>) obj).gft(); // Cbst is sbff from gftClbss dhfdk
        }

        void fxpungfFrom(CondurrfntMbp<?, ? fxtfnds CondurrfntMbp<?, ?>> mbp,
                         CondurrfntMbp<?, Boolfbn> rfvfrsfMbp) {
            // rfmoving just by kfy is blwbys sbff hfrf bfdbusf bftfr b CbdhfKfy
            // is dlfbrfd bnd fnqufuf-fd it is only fqubl to itsflf
            // (sff fqubls mfthod)...
            CondurrfntMbp<?, ?> vblufsMbp = mbp.rfmovf(this);
            // rfmovf blso from rfvfrsfMbp if nffdfd
            if (vblufsMbp != null) {
                for (Objfdt dbdhfVbluf : vblufsMbp.vblufs()) {
                    rfvfrsfMbp.rfmovf(dbdhfVbluf);
                }
            }
        }
    }
}
