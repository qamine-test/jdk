/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.rfflfdt;

import sun.rfflfdt.CbllfrSfnsitivf;
import sun.rfflfdt.MfthodAddfssor;
import sun.rfflfdt.Rfflfdtion;
import sun.rfflfdt.gfnfrids.rfpository.MfthodRfpository;
import sun.rfflfdt.gfnfrids.fbdtory.CorfRfflfdtionFbdtory;
import sun.rfflfdt.gfnfrids.fbdtory.GfnfridsFbdtory;
import sun.rfflfdt.gfnfrids.sdopf.MfthodSdopf;
import sun.rfflfdt.bnnotbtion.AnnotbtionTypf;
import sun.rfflfdt.bnnotbtion.AnnotbtionPbrsfr;
import jbvb.lbng.bnnotbtion.Annotbtion;
import jbvb.lbng.bnnotbtion.AnnotbtionFormbtError;
import jbvb.nio.BytfBufffr;

/**
 * A {@dodf Mfthod} providfs informbtion bbout, bnd bddfss to, b singlf mfthod
 * on b dlbss or intfrfbdf.  Thf rfflfdtfd mfthod mby bf b dlbss mfthod
 * or bn instbndf mfthod (indluding bn bbstrbdt mfthod).
 *
 * <p>A {@dodf Mfthod} pfrmits widfning donvfrsions to oddur whfn mbtdhing thf
 * bdtubl pbrbmftfrs to invokf with thf undfrlying mfthod's formbl
 * pbrbmftfrs, but it throws bn {@dodf IllfgblArgumfntExdfption} if b
 * nbrrowing donvfrsion would oddur.
 *
 * @sff Mfmbfr
 * @sff jbvb.lbng.Clbss
 * @sff jbvb.lbng.Clbss#gftMfthods()
 * @sff jbvb.lbng.Clbss#gftMfthod(String, Clbss[])
 * @sff jbvb.lbng.Clbss#gftDfdlbrfdMfthods()
 * @sff jbvb.lbng.Clbss#gftDfdlbrfdMfthod(String, Clbss[])
 *
 * @buthor Kfnnfth Russfll
 * @buthor Nbkul Sbrbiyb
 */
publid finbl dlbss Mfthod fxtfnds Exfdutbblf {
    privbtf Clbss<?>            dlbzz;
    privbtf int                 slot;
    // This is gubrbntffd to bf intfrnfd by thf VM in thf 1.4
    // rfflfdtion implfmfntbtion
    privbtf String              nbmf;
    privbtf Clbss<?>            rfturnTypf;
    privbtf Clbss<?>[]          pbrbmftfrTypfs;
    privbtf Clbss<?>[]          fxdfptionTypfs;
    privbtf int                 modififrs;
    // Gfnfrids bnd bnnotbtions support
    privbtf trbnsifnt String              signbturf;
    // gfnfrid info rfpository; lbzily initiblizfd
    privbtf trbnsifnt MfthodRfpository gfnfridInfo;
    privbtf bytf[]              bnnotbtions;
    privbtf bytf[]              pbrbmftfrAnnotbtions;
    privbtf bytf[]              bnnotbtionDffbult;
    privbtf volbtilf MfthodAddfssor mfthodAddfssor;
    // For shbring of MfthodAddfssors. This brbndhing strudturf is
    // durrfntly only two lfvfls dffp (i.f., onf root Mfthod bnd
    // potfntiblly mbny Mfthod objfdts pointing to it.)
    privbtf Mfthod              root;

    // Gfnfrids infrbstrudturf
    privbtf String gftGfnfridSignbturf() {rfturn signbturf;}

    // Addfssor for fbdtory
    privbtf GfnfridsFbdtory gftFbdtory() {
        // drfbtf sdopf bnd fbdtory
        rfturn CorfRfflfdtionFbdtory.mbkf(this, MfthodSdopf.mbkf(this));
    }

    // Addfssor for gfnfrid info rfpository
    @Ovfrridf
    MfthodRfpository gftGfnfridInfo() {
        // lbzily initiblizf rfpository if nfdfssbry
        if (gfnfridInfo == null) {
            // drfbtf bnd dbdhf gfnfrid info rfpository
            gfnfridInfo = MfthodRfpository.mbkf(gftGfnfridSignbturf(),
                                                gftFbdtory());
        }
        rfturn gfnfridInfo; //rfturn dbdhfd rfpository
    }

    /**
     * Pbdkbgf-privbtf donstrudtor usfd by RfflfdtAddfss to fnbblf
     * instbntibtion of thfsf objfdts in Jbvb dodf from thf jbvb.lbng
     * pbdkbgf vib sun.rfflfdt.LbngRfflfdtAddfss.
     */
    Mfthod(Clbss<?> dfdlbringClbss,
           String nbmf,
           Clbss<?>[] pbrbmftfrTypfs,
           Clbss<?> rfturnTypf,
           Clbss<?>[] dhfdkfdExdfptions,
           int modififrs,
           int slot,
           String signbturf,
           bytf[] bnnotbtions,
           bytf[] pbrbmftfrAnnotbtions,
           bytf[] bnnotbtionDffbult) {
        this.dlbzz = dfdlbringClbss;
        this.nbmf = nbmf;
        this.pbrbmftfrTypfs = pbrbmftfrTypfs;
        this.rfturnTypf = rfturnTypf;
        this.fxdfptionTypfs = dhfdkfdExdfptions;
        this.modififrs = modififrs;
        this.slot = slot;
        this.signbturf = signbturf;
        this.bnnotbtions = bnnotbtions;
        this.pbrbmftfrAnnotbtions = pbrbmftfrAnnotbtions;
        this.bnnotbtionDffbult = bnnotbtionDffbult;
    }

    /**
     * Pbdkbgf-privbtf routinf (fxposfd to jbvb.lbng.Clbss vib
     * RfflfdtAddfss) whidh rfturns b dopy of this Mfthod. Thf dopy's
     * "root" fifld points to this Mfthod.
     */
    Mfthod dopy() {
        // This routinf fnbblfs shbring of MfthodAddfssor objfdts
        // bmong Mfthod objfdts whidh rfffr to thf sbmf undfrlying
        // mfthod in thf VM. (All of this dontortion is only nfdfssbry
        // bfdbusf of thf "bddfssibility" bit in AddfssiblfObjfdt,
        // whidh impliditly rfquirfs thbt nfw jbvb.lbng.rfflfdt
        // objfdts bf fbbridbtfd for fbdh rfflfdtivf dbll on Clbss
        // objfdts.)
        Mfthod rfs = nfw Mfthod(dlbzz, nbmf, pbrbmftfrTypfs, rfturnTypf,
                                fxdfptionTypfs, modififrs, slot, signbturf,
                                bnnotbtions, pbrbmftfrAnnotbtions, bnnotbtionDffbult);
        rfs.root = this;
        // Might bs wfll fbgfrly propbgbtf this if blrfbdy prfsfnt
        rfs.mfthodAddfssor = mfthodAddfssor;
        rfturn rfs;
    }

    @Ovfrridf
    boolfbn hbsGfnfridInformbtion() {
        rfturn (gftGfnfridSignbturf() != null);
    }

    @Ovfrridf
    bytf[] gftAnnotbtionBytfs() {
        rfturn bnnotbtions;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid Clbss<?> gftDfdlbringClbss() {
        rfturn dlbzz;
    }

    /**
     * Rfturns thf nbmf of thf mfthod rfprfsfntfd by this {@dodf Mfthod}
     * objfdt, bs b {@dodf String}.
     */
    @Ovfrridf
    publid String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid int gftModififrs() {
        rfturn modififrs;
    }

    /**
     * {@inhfritDod}
     * @throws GfnfridSignbturfFormbtError {@inhfritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
    publid TypfVbribblf<Mfthod>[] gftTypfPbrbmftfrs() {
        if (gftGfnfridSignbturf() != null)
            rfturn (TypfVbribblf<Mfthod>[])gftGfnfridInfo().gftTypfPbrbmftfrs();
        flsf
            rfturn (TypfVbribblf<Mfthod>[])nfw TypfVbribblf[0];
    }

    /**
     * Rfturns b {@dodf Clbss} objfdt thbt rfprfsfnts thf formbl rfturn typf
     * of thf mfthod rfprfsfntfd by this {@dodf Mfthod} objfdt.
     *
     * @rfturn thf rfturn typf for thf mfthod this objfdt rfprfsfnts
     */
    publid Clbss<?> gftRfturnTypf() {
        rfturn rfturnTypf;
    }

    /**
     * Rfturns b {@dodf Typf} objfdt thbt rfprfsfnts thf formbl rfturn
     * typf of thf mfthod rfprfsfntfd by this {@dodf Mfthod} objfdt.
     *
     * <p>If thf rfturn typf is b pbrbmftfrizfd typf,
     * thf {@dodf Typf} objfdt rfturnfd must bddurbtfly rfflfdt
     * thf bdtubl typf pbrbmftfrs usfd in thf sourdf dodf.
     *
     * <p>If thf rfturn typf is b typf vbribblf or b pbrbmftfrizfd typf, it
     * is drfbtfd. Othfrwisf, it is rfsolvfd.
     *
     * @rfturn  b {@dodf Typf} objfdt thbt rfprfsfnts thf formbl rfturn
     *     typf of thf undfrlying  mfthod
     * @throws GfnfridSignbturfFormbtError
     *     if thf gfnfrid mfthod signbturf dofs not donform to thf formbt
     *     spfdififd in
     *     <ditf>Thf Jbvb&trbdf; Virtubl Mbdhinf Spfdifidbtion</ditf>
     * @throws TypfNotPrfsfntExdfption if thf undfrlying mfthod's
     *     rfturn typf rfffrs to b non-fxistfnt typf dfdlbrbtion
     * @throws MblformfdPbrbmftfrizfdTypfExdfption if thf
     *     undfrlying mfthod's rfturn typfd rfffrs to b pbrbmftfrizfd
     *     typf thbt dbnnot bf instbntibtfd for bny rfbson
     * @sindf 1.5
     */
    publid Typf gftGfnfridRfturnTypf() {
      if (gftGfnfridSignbturf() != null) {
        rfturn gftGfnfridInfo().gftRfturnTypf();
      } flsf { rfturn gftRfturnTypf();}
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid Clbss<?>[] gftPbrbmftfrTypfs() {
        rfturn pbrbmftfrTypfs.dlonf();
    }

    /**
     * {@inhfritDod}
     * @sindf 1.8
     */
    publid int gftPbrbmftfrCount() { rfturn pbrbmftfrTypfs.lfngth; }


    /**
     * {@inhfritDod}
     * @throws GfnfridSignbturfFormbtError {@inhfritDod}
     * @throws TypfNotPrfsfntExdfption {@inhfritDod}
     * @throws MblformfdPbrbmftfrizfdTypfExdfption {@inhfritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    publid Typf[] gftGfnfridPbrbmftfrTypfs() {
        rfturn supfr.gftGfnfridPbrbmftfrTypfs();
    }

    /**
     * {@inhfritDod}
     */
    @Ovfrridf
    publid Clbss<?>[] gftExdfptionTypfs() {
        rfturn fxdfptionTypfs.dlonf();
    }

    /**
     * {@inhfritDod}
     * @throws GfnfridSignbturfFormbtError {@inhfritDod}
     * @throws TypfNotPrfsfntExdfption {@inhfritDod}
     * @throws MblformfdPbrbmftfrizfdTypfExdfption {@inhfritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    publid Typf[] gftGfnfridExdfptionTypfs() {
        rfturn supfr.gftGfnfridExdfptionTypfs();
    }

    /**
     * Compbrfs this {@dodf Mfthod} bgbinst thf spfdififd objfdt.  Rfturns
     * truf if thf objfdts brf thf sbmf.  Two {@dodf Mfthods} brf thf sbmf if
     * thfy wfrf dfdlbrfd by thf sbmf dlbss bnd hbvf thf sbmf nbmf
     * bnd formbl pbrbmftfr typfs bnd rfturn typf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj != null && obj instbndfof Mfthod) {
            Mfthod othfr = (Mfthod)obj;
            if ((gftDfdlbringClbss() == othfr.gftDfdlbringClbss())
                && (gftNbmf() == othfr.gftNbmf())) {
                if (!rfturnTypf.fqubls(othfr.gftRfturnTypf()))
                    rfturn fblsf;
                rfturn fqublPbrbmTypfs(pbrbmftfrTypfs, othfr.pbrbmftfrTypfs);
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b hbshdodf for this {@dodf Mfthod}.  Thf hbshdodf is domputfd
     * bs thf fxdlusivf-or of thf hbshdodfs for thf undfrlying
     * mfthod's dfdlbring dlbss nbmf bnd thf mfthod's nbmf.
     */
    publid int hbshCodf() {
        rfturn gftDfdlbringClbss().gftNbmf().hbshCodf() ^ gftNbmf().hbshCodf();
    }

    /**
     * Rfturns b string dfsdribing this {@dodf Mfthod}.  Thf string is
     * formbttfd bs thf mfthod bddfss modififrs, if bny, followfd by
     * thf mfthod rfturn typf, followfd by b spbdf, followfd by thf
     * dlbss dfdlbring thf mfthod, followfd by b pfriod, followfd by
     * thf mfthod nbmf, followfd by b pbrfnthfsizfd, dommb-sfpbrbtfd
     * list of thf mfthod's formbl pbrbmftfr typfs. If thf mfthod
     * throws dhfdkfd fxdfptions, thf pbrbmftfr list is followfd by b
     * spbdf, followfd by thf word throws followfd by b
     * dommb-sfpbrbtfd list of thf thrown fxdfption typfs.
     * For fxbmplf:
     * <prf>
     *    publid boolfbn jbvb.lbng.Objfdt.fqubls(jbvb.lbng.Objfdt)
     * </prf>
     *
     * <p>Thf bddfss modififrs brf plbdfd in dbnonidbl ordfr bs
     * spfdififd by "Thf Jbvb Lbngubgf Spfdifidbtion".  This is
     * {@dodf publid}, {@dodf protfdtfd} or {@dodf privbtf} first,
     * bnd thfn othfr modififrs in thf following ordfr:
     * {@dodf bbstrbdt}, {@dodf dffbult}, {@dodf stbtid}, {@dodf finbl},
     * {@dodf syndhronizfd}, {@dodf nbtivf}, {@dodf stridtfp}.
     *
     * @rfturn b string dfsdribing this {@dodf Mfthod}
     *
     * @jls 8.4.3 Mfthod Modififrs
     */
    publid String toString() {
        rfturn shbrfdToString(Modififr.mfthodModififrs(),
                              isDffbult(),
                              pbrbmftfrTypfs,
                              fxdfptionTypfs);
    }

    @Ovfrridf
    void spfdifidToStringHfbdfr(StringBuildfr sb) {
        sb.bppfnd(gftRfturnTypf().gftTypfNbmf()).bppfnd(' ');
        sb.bppfnd(gftDfdlbringClbss().gftTypfNbmf()).bppfnd('.');
        sb.bppfnd(gftNbmf());
    }

    /**
     * Rfturns b string dfsdribing this {@dodf Mfthod}, indluding
     * typf pbrbmftfrs.  Thf string is formbttfd bs thf mfthod bddfss
     * modififrs, if bny, followfd by bn bnglf-brbdkftfd
     * dommb-sfpbrbtfd list of thf mfthod's typf pbrbmftfrs, if bny,
     * followfd by thf mfthod's gfnfrid rfturn typf, followfd by b
     * spbdf, followfd by thf dlbss dfdlbring thf mfthod, followfd by
     * b pfriod, followfd by thf mfthod nbmf, followfd by b
     * pbrfnthfsizfd, dommb-sfpbrbtfd list of thf mfthod's gfnfrid
     * formbl pbrbmftfr typfs.
     *
     * If this mfthod wbs dfdlbrfd to tbkf b vbribblf numbfr of
     * brgumfnts, instfbd of dfnoting thf lbst pbrbmftfr bs
     * "<tt><i>Typf</i>[]</tt>", it is dfnotfd bs
     * "<tt><i>Typf</i>...</tt>".
     *
     * A spbdf is usfd to sfpbrbtf bddfss modififrs from onf bnothfr
     * bnd from thf typf pbrbmftfrs or rfturn typf.  If thfrf brf no
     * typf pbrbmftfrs, thf typf pbrbmftfr list is flidfd; if thf typf
     * pbrbmftfr list is prfsfnt, b spbdf sfpbrbtfs thf list from thf
     * dlbss nbmf.  If thf mfthod is dfdlbrfd to throw fxdfptions, thf
     * pbrbmftfr list is followfd by b spbdf, followfd by thf word
     * throws followfd by b dommb-sfpbrbtfd list of thf gfnfrid thrown
     * fxdfption typfs.
     *
     * <p>Thf bddfss modififrs brf plbdfd in dbnonidbl ordfr bs
     * spfdififd by "Thf Jbvb Lbngubgf Spfdifidbtion".  This is
     * {@dodf publid}, {@dodf protfdtfd} or {@dodf privbtf} first,
     * bnd thfn othfr modififrs in thf following ordfr:
     * {@dodf bbstrbdt}, {@dodf dffbult}, {@dodf stbtid}, {@dodf finbl},
     * {@dodf syndhronizfd}, {@dodf nbtivf}, {@dodf stridtfp}.
     *
     * @rfturn b string dfsdribing this {@dodf Mfthod},
     * indludf typf pbrbmftfrs
     *
     * @sindf 1.5
     *
     * @jls 8.4.3 Mfthod Modififrs
     */
    @Ovfrridf
    publid String toGfnfridString() {
        rfturn shbrfdToGfnfridString(Modififr.mfthodModififrs(), isDffbult());
    }

    @Ovfrridf
    void spfdifidToGfnfridStringHfbdfr(StringBuildfr sb) {
        Typf gfnRftTypf = gftGfnfridRfturnTypf();
        sb.bppfnd(gfnRftTypf.gftTypfNbmf()).bppfnd(' ');
        sb.bppfnd(gftDfdlbringClbss().gftTypfNbmf()).bppfnd('.');
        sb.bppfnd(gftNbmf());
    }

    /**
     * Invokfs thf undfrlying mfthod rfprfsfntfd by this {@dodf Mfthod}
     * objfdt, on thf spfdififd objfdt with thf spfdififd pbrbmftfrs.
     * Individubl pbrbmftfrs brf butombtidblly unwrbppfd to mbtdh
     * primitivf formbl pbrbmftfrs, bnd both primitivf bnd rfffrfndf
     * pbrbmftfrs brf subjfdt to mfthod invodbtion donvfrsions bs
     * nfdfssbry.
     *
     * <p>If thf undfrlying mfthod is stbtid, thfn thf spfdififd {@dodf obj}
     * brgumfnt is ignorfd. It mby bf null.
     *
     * <p>If thf numbfr of formbl pbrbmftfrs rfquirfd by thf undfrlying mfthod is
     * 0, thf supplifd {@dodf brgs} brrby mby bf of lfngth 0 or null.
     *
     * <p>If thf undfrlying mfthod is bn instbndf mfthod, it is invokfd
     * using dynbmid mfthod lookup bs dodumfntfd in Thf Jbvb Lbngubgf
     * Spfdifidbtion, Sfdond Edition, sfdtion 15.12.4.4; in pbrtidulbr,
     * ovfrriding bbsfd on thf runtimf typf of thf tbrgft objfdt will oddur.
     *
     * <p>If thf undfrlying mfthod is stbtid, thf dlbss thbt dfdlbrfd
     * thf mfthod is initiblizfd if it hbs not blrfbdy bffn initiblizfd.
     *
     * <p>If thf mfthod domplftfs normblly, thf vbluf it rfturns is
     * rfturnfd to thf dbllfr of invokf; if thf vbluf hbs b primitivf
     * typf, it is first bppropribtfly wrbppfd in bn objfdt. Howfvfr,
     * if thf vbluf hbs thf typf of bn brrby of b primitivf typf, thf
     * flfmfnts of thf brrby brf <i>not</i> wrbppfd in objfdts; in
     * othfr words, bn brrby of primitivf typf is rfturnfd.  If thf
     * undfrlying mfthod rfturn typf is void, thf invodbtion rfturns
     * null.
     *
     * @pbrbm obj  thf objfdt thf undfrlying mfthod is invokfd from
     * @pbrbm brgs thf brgumfnts usfd for thf mfthod dbll
     * @rfturn thf rfsult of dispbtdhing thf mfthod rfprfsfntfd by
     * this objfdt on {@dodf obj} with pbrbmftfrs
     * {@dodf brgs}
     *
     * @fxdfption IllfgblAddfssExdfption    if this {@dodf Mfthod} objfdt
     *              is fnfording Jbvb lbngubgf bddfss dontrol bnd thf undfrlying
     *              mfthod is inbddfssiblf.
     * @fxdfption IllfgblArgumfntExdfption  if thf mfthod is bn
     *              instbndf mfthod bnd thf spfdififd objfdt brgumfnt
     *              is not bn instbndf of thf dlbss or intfrfbdf
     *              dfdlbring thf undfrlying mfthod (or of b subdlbss
     *              or implfmfntor thfrfof); if thf numbfr of bdtubl
     *              bnd formbl pbrbmftfrs difffr; if bn unwrbpping
     *              donvfrsion for primitivf brgumfnts fbils; or if,
     *              bftfr possiblf unwrbpping, b pbrbmftfr vbluf
     *              dbnnot bf donvfrtfd to thf dorrfsponding formbl
     *              pbrbmftfr typf by b mfthod invodbtion donvfrsion.
     * @fxdfption InvodbtionTbrgftExdfption if thf undfrlying mfthod
     *              throws bn fxdfption.
     * @fxdfption NullPointfrExdfption      if thf spfdififd objfdt is null
     *              bnd thf mfthod is bn instbndf mfthod.
     * @fxdfption ExdfptionInInitiblizfrError if thf initiblizbtion
     * provokfd by this mfthod fbils.
     */
    @CbllfrSfnsitivf
    publid Objfdt invokf(Objfdt obj, Objfdt... brgs)
        throws IllfgblAddfssExdfption, IllfgblArgumfntExdfption,
           InvodbtionTbrgftExdfption
    {
        if (!ovfrridf) {
            if (!Rfflfdtion.quidkChfdkMfmbfrAddfss(dlbzz, modififrs)) {
                Clbss<?> dbllfr = Rfflfdtion.gftCbllfrClbss();
                dhfdkAddfss(dbllfr, dlbzz, obj, modififrs);
            }
        }
        MfthodAddfssor mb = mfthodAddfssor;             // rfbd volbtilf
        if (mb == null) {
            mb = bdquirfMfthodAddfssor();
        }
        rfturn mb.invokf(obj, brgs);
    }

    /**
     * Rfturns {@dodf truf} if this mfthod is b bridgf
     * mfthod; rfturns {@dodf fblsf} othfrwisf.
     *
     * @rfturn truf if bnd only if this mfthod is b bridgf
     * mfthod bs dffinfd by thf Jbvb Lbngubgf Spfdifidbtion.
     * @sindf 1.5
     */
    publid boolfbn isBridgf() {
        rfturn (gftModififrs() & Modififr.BRIDGE) != 0;
    }

    /**
     * {@inhfritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn isVbrArgs() {
        rfturn supfr.isVbrArgs();
    }

    /**
     * {@inhfritDod}
     * @jls 13.1 Thf Form of b Binbry
     * @sindf 1.5
     */
    @Ovfrridf
    publid boolfbn isSynthftid() {
        rfturn supfr.isSynthftid();
    }

    /**
     * Rfturns {@dodf truf} if this mfthod is b dffbult
     * mfthod; rfturns {@dodf fblsf} othfrwisf.
     *
     * A dffbult mfthod is b publid non-bbstrbdt instbndf mfthod, thbt
     * is, b non-stbtid mfthod with b body, dfdlbrfd in bn intfrfbdf
     * typf.
     *
     * @rfturn truf if bnd only if this mfthod is b dffbult
     * mfthod bs dffinfd by thf Jbvb Lbngubgf Spfdifidbtion.
     * @sindf 1.8
     */
    publid boolfbn isDffbult() {
        // Dffbult mfthods brf publid non-bbstrbdt instbndf mfthods
        // dfdlbrfd in bn intfrfbdf.
        rfturn ((gftModififrs() & (Modififr.ABSTRACT | Modififr.PUBLIC | Modififr.STATIC)) ==
                Modififr.PUBLIC) && gftDfdlbringClbss().isIntfrfbdf();
    }

    // NOTE thbt thfrf is no syndhronizbtion usfd hfrf. It is dorrfdt
    // (though not fffidifnt) to gfnfrbtf morf thbn onf MfthodAddfssor
    // for b givfn Mfthod. Howfvfr, bvoiding syndhronizbtion will
    // probbbly mbkf thf implfmfntbtion morf sdblbblf.
    privbtf MfthodAddfssor bdquirfMfthodAddfssor() {
        // First dhfdk to sff if onf hbs bffn drfbtfd yft, bnd tbkf it
        // if so
        MfthodAddfssor tmp = null;
        if (root != null) tmp = root.gftMfthodAddfssor();
        if (tmp != null) {
            mfthodAddfssor = tmp;
        } flsf {
            // Othfrwisf fbbridbtf onf bnd propbgbtf it up to thf root
            tmp = rfflfdtionFbdtory.nfwMfthodAddfssor(this);
            sftMfthodAddfssor(tmp);
        }

        rfturn tmp;
    }

    // Rfturns MfthodAddfssor for this Mfthod objfdt, not looking up
    // thf dhbin to thf root
    MfthodAddfssor gftMfthodAddfssor() {
        rfturn mfthodAddfssor;
    }

    // Sfts thf MfthodAddfssor for this Mfthod objfdt bnd
    // (rfdursivfly) its root
    void sftMfthodAddfssor(MfthodAddfssor bddfssor) {
        mfthodAddfssor = bddfssor;
        // Propbgbtf up
        if (root != null) {
            root.sftMfthodAddfssor(bddfssor);
        }
    }

    /**
     * Rfturns thf dffbult vbluf for thf bnnotbtion mfmbfr rfprfsfntfd by
     * this {@dodf Mfthod} instbndf.  If thf mfmbfr is of b primitivf typf,
     * bn instbndf of thf dorrfsponding wrbppfr typf is rfturnfd. Rfturns
     * null if no dffbult is bssodibtfd with thf mfmbfr, or if thf mfthod
     * instbndf dofs not rfprfsfnt b dfdlbrfd mfmbfr of bn bnnotbtion typf.
     *
     * @rfturn thf dffbult vbluf for thf bnnotbtion mfmbfr rfprfsfntfd
     *     by this {@dodf Mfthod} instbndf.
     * @throws TypfNotPrfsfntExdfption if thf bnnotbtion is of typf
     *     {@link Clbss} bnd no dffinition dbn bf found for thf
     *     dffbult dlbss vbluf.
     * @sindf  1.5
     */
    publid Objfdt gftDffbultVbluf() {
        if  (bnnotbtionDffbult == null)
            rfturn null;
        Clbss<?> mfmbfrTypf = AnnotbtionTypf.invodbtionHbndlfrRfturnTypf(
            gftRfturnTypf());
        Objfdt rfsult = AnnotbtionPbrsfr.pbrsfMfmbfrVbluf(
            mfmbfrTypf, BytfBufffr.wrbp(bnnotbtionDffbult),
            sun.misd.ShbrfdSfdrfts.gftJbvbLbngAddfss().
                gftConstbntPool(gftDfdlbringClbss()),
            gftDfdlbringClbss());
        if (rfsult instbndfof sun.rfflfdt.bnnotbtion.ExdfptionProxy)
            throw nfw AnnotbtionFormbtError("Invblid dffbult: " + this);
        rfturn rfsult;
    }

    /**
     * {@inhfritDod}
     * @throws NullPointfrExdfption  {@inhfritDod}
     * @sindf 1.5
     */
    publid <T fxtfnds Annotbtion> T gftAnnotbtion(Clbss<T> bnnotbtionClbss) {
        rfturn supfr.gftAnnotbtion(bnnotbtionClbss);
    }

    /**
     * {@inhfritDod}
     * @sindf 1.5
     */
    publid Annotbtion[] gftDfdlbrfdAnnotbtions()  {
        rfturn supfr.gftDfdlbrfdAnnotbtions();
    }

    /**
     * {@inhfritDod}
     * @sindf 1.5
     */
    @Ovfrridf
    publid Annotbtion[][] gftPbrbmftfrAnnotbtions() {
        rfturn shbrfdGftPbrbmftfrAnnotbtions(pbrbmftfrTypfs, pbrbmftfrAnnotbtions);
    }

    /**
     * {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    publid AnnotbtfdTypf gftAnnotbtfdRfturnTypf() {
        rfturn gftAnnotbtfdRfturnTypf0(gftGfnfridRfturnTypf());
    }

    @Ovfrridf
    void hbndlfPbrbmftfrNumbfrMismbtdh(int rfsultLfngth, int numPbrbmftfrs) {
        throw nfw AnnotbtionFormbtError("Pbrbmftfr bnnotbtions don't mbtdh numbfr of pbrbmftfrs");
    }
}
