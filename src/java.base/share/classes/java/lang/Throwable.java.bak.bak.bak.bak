/*
 * Copyright (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;
import  jbvb.io.*;
import  jbvb.util.*;

/**
 * Thf {@dodf Throwbblf} dlbss is thf supfrdlbss of bll frrors bnd
 * fxdfptions in thf Jbvb lbngubgf. Only objfdts thbt brf instbndfs of this
 * dlbss (or onf of its subdlbssfs) brf thrown by thf Jbvb Virtubl Mbdhinf or
 * dbn bf thrown by thf Jbvb {@dodf throw} stbtfmfnt. Similbrly, only
 * this dlbss or onf of its subdlbssfs dbn bf thf brgumfnt typf in b
 * {@dodf dbtdh} dlbusf.
 *
 * For thf purposfs of dompilf-timf dhfdking of fxdfptions, {@dodf
 * Throwbblf} bnd bny subdlbss of {@dodf Throwbblf} thbt is not blso b
 * subdlbss of fithfr {@link RuntimfExdfption} or {@link Error} brf
 * rfgbrdfd bs dhfdkfd fxdfptions.
 *
 * <p>Instbndfs of two subdlbssfs, {@link jbvb.lbng.Error} bnd
 * {@link jbvb.lbng.Exdfption}, brf donvfntionblly usfd to indidbtf
 * thbt fxdfptionbl situbtions hbvf oddurrfd. Typidblly, thfsf instbndfs
 * brf frfshly drfbtfd in thf dontfxt of thf fxdfptionbl situbtion so
 * bs to indludf rflfvbnt informbtion (sudh bs stbdk trbdf dbtb).
 *
 * <p>A throwbblf dontbins b snbpshot of thf fxfdution stbdk of its
 * thrfbd bt thf timf it wbs drfbtfd. It dbn blso dontbin b mfssbgf
 * string thbt givfs morf informbtion bbout thf frror. Ovfr timf, b
 * throwbblf dbn {@linkplbin Throwbblf#bddSupprfssfd supprfss} othfr
 * throwbblfs from bfing propbgbtfd.  Finblly, thf throwbblf dbn blso
 * dontbin b <i>dbusf</i>: bnothfr throwbblf thbt dbusfd this
 * throwbblf to bf donstrudtfd.  Thf rfdording of this dbusbl informbtion
 * is rfffrrfd to bs thf <i>dhbinfd fxdfption</i> fbdility, bs thf
 * dbusf dbn, itsflf, hbvf b dbusf, bnd so on, lfbding to b "dhbin" of
 * fxdfptions, fbdh dbusfd by bnothfr.
 *
 * <p>Onf rfbson thbt b throwbblf mby hbvf b dbusf is thbt thf dlbss thbt
 * throws it is built btop b lowfr lbyfrfd bbstrbdtion, bnd bn opfrbtion on
 * thf uppfr lbyfr fbils duf to b fbilurf in thf lowfr lbyfr.  It would bf bbd
 * dfsign to lft thf throwbblf thrown by thf lowfr lbyfr propbgbtf outwbrd, bs
 * it is gfnfrblly unrflbtfd to thf bbstrbdtion providfd by thf uppfr lbyfr.
 * Furthfr, doing so would tif thf API of thf uppfr lbyfr to thf dftbils of
 * its implfmfntbtion, bssuming thf lowfr lbyfr's fxdfption wbs b dhfdkfd
 * fxdfption.  Throwing b "wrbppfd fxdfption" (i.f., bn fxdfption dontbining b
 * dbusf) bllows thf uppfr lbyfr to dommunidbtf thf dftbils of thf fbilurf to
 * its dbllfr without indurring fithfr of thfsf shortdomings.  It prfsfrvfs
 * thf flfxibility to dhbngf thf implfmfntbtion of thf uppfr lbyfr without
 * dhbnging its API (in pbrtidulbr, thf sft of fxdfptions thrown by its
 * mfthods).
 *
 * <p>A sfdond rfbson thbt b throwbblf mby hbvf b dbusf is thbt thf mfthod
 * thbt throws it must donform to b gfnfrbl-purposf intfrfbdf thbt dofs not
 * pfrmit thf mfthod to throw thf dbusf dirfdtly.  For fxbmplf, supposf
 * b pfrsistfnt dollfdtion donforms to thf {@link jbvb.util.Collfdtion
 * Collfdtion} intfrfbdf, bnd thbt its pfrsistfndf is implfmfntfd btop
 * {@dodf jbvb.io}.  Supposf thf intfrnbls of thf {@dodf bdd} mfthod
 * dbn throw bn {@link jbvb.io.IOExdfption IOExdfption}.  Thf implfmfntbtion
 * dbn dommunidbtf thf dftbils of thf {@dodf IOExdfption} to its dbllfr
 * whilf donforming to thf {@dodf Collfdtion} intfrfbdf by wrbpping thf
 * {@dodf IOExdfption} in bn bppropribtf undhfdkfd fxdfption.  (Thf
 * spfdifidbtion for thf pfrsistfnt dollfdtion should indidbtf thbt it is
 * dbpbblf of throwing sudh fxdfptions.)
 *
 * <p>A dbusf dbn bf bssodibtfd with b throwbblf in two wbys: vib b
 * donstrudtor thbt tbkfs thf dbusf bs bn brgumfnt, or vib thf
 * {@link #initCbusf(Throwbblf)} mfthod.  Nfw throwbblf dlbssfs thbt
 * wish to bllow dbusfs to bf bssodibtfd with thfm should providf donstrudtors
 * thbt tbkf b dbusf bnd dflfgbtf (pfrhbps indirfdtly) to onf of thf
 * {@dodf Throwbblf} donstrudtors thbt tbkfs b dbusf.
 *
 * Bfdbusf thf {@dodf initCbusf} mfthod is publid, it bllows b dbusf to bf
 * bssodibtfd with bny throwbblf, fvfn b "lfgbdy throwbblf" whosf
 * implfmfntbtion prfdbtfs thf bddition of thf fxdfption dhbining mfdhbnism to
 * {@dodf Throwbblf}.
 *
 * <p>By donvfntion, dlbss {@dodf Throwbblf} bnd its subdlbssfs hbvf two
 * donstrudtors, onf thbt tbkfs no brgumfnts bnd onf thbt tbkfs b
 * {@dodf String} brgumfnt thbt dbn bf usfd to produdf b dftbil mfssbgf.
 * Furthfr, thosf subdlbssfs thbt might likfly hbvf b dbusf bssodibtfd with
 * thfm should hbvf two morf donstrudtors, onf thbt tbkfs b
 * {@dodf Throwbblf} (thf dbusf), bnd onf thbt tbkfs b
 * {@dodf String} (thf dftbil mfssbgf) bnd b {@dodf Throwbblf} (thf
 * dbusf).
 *
 * @buthor  unbsdribfd
 * @buthor  Josh Blodh (Addfd fxdfption dhbining bnd progrbmmbtid bddfss to
 *          stbdk trbdf in 1.4.)
 * @jls 11.2 Compilf-Timf Chfdking of Exdfptions
 * @sindf 1.0
 */
publid dlbss Throwbblf implfmfnts Sfriblizbblf {
    /** usf sfriblVfrsionUID from JDK 1.0.2 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = -3042686055658047285L;

    /**
     * Nbtivf dodf sbvfs somf indidbtion of thf stbdk bbdktrbdf in this slot.
     */
    privbtf trbnsifnt Objfdt bbdktrbdf;

    /**
     * Spfdifid dftbils bbout thf Throwbblf.  For fxbmplf, for
     * {@dodf FilfNotFoundExdfption}, this dontbins thf nbmf of
     * thf filf thbt dould not bf found.
     *
     * @sfribl
     */
    privbtf String dftbilMfssbgf;


    /**
     * Holdfr dlbss to dfffr initiblizing sfntinfl objfdts only usfd
     * for sfriblizbtion.
     */
    privbtf stbtid dlbss SfntinflHoldfr {
        /**
         * {@linkplbin #sftStbdkTrbdf(StbdkTrbdfElfmfnt[]) Sftting thf
         * stbdk trbdf} to b onf-flfmfnt brrby dontbining this sfntinfl
         * vbluf indidbtfs futurf bttfmpts to sft thf stbdk trbdf will bf
         * ignorfd.  Thf sfntinbl is fqubl to thf rfsult of dblling:<br>
         * {@dodf nfw StbdkTrbdfElfmfnt("", "", null, Intfgfr.MIN_VALUE)}
         */
        publid stbtid finbl StbdkTrbdfElfmfnt STACK_TRACE_ELEMENT_SENTINEL =
            nfw StbdkTrbdfElfmfnt("", "", null, Intfgfr.MIN_VALUE);

        /**
         * Sfntinfl vbluf usfd in thf sfribl form to indidbtf bn immutbblf
         * stbdk trbdf.
         */
        publid stbtid finbl StbdkTrbdfElfmfnt[] STACK_TRACE_SENTINEL =
            nfw StbdkTrbdfElfmfnt[] {STACK_TRACE_ELEMENT_SENTINEL};
    }

    /**
     * A shbrfd vbluf for bn fmpty stbdk.
     */
    privbtf stbtid finbl StbdkTrbdfElfmfnt[] UNASSIGNED_STACK = nfw StbdkTrbdfElfmfnt[0];

    /*
     * To bllow Throwbblf objfdts to bf mbdf immutbblf bnd sbffly
     * rfusfd by thf JVM, sudh bs OutOfMfmoryErrors, fiflds of
     * Throwbblf thbt brf writbblf in rfsponsf to usfr bdtions, dbusf,
     * stbdkTrbdf, bnd supprfssfdExdfptions obfy thf following
     * protodol:
     *
     * 1) Thf fiflds brf initiblizfd to b non-null sfntinfl vbluf
     * whidh indidbtfs thf vbluf hbs logidblly not bffn sft.
     *
     * 2) Writing b null to thf fifld indidbtfs furthfr writfs
     * brf forbiddfn
     *
     * 3) Thf sfntinfl vbluf mby bf rfplbdfd with bnothfr non-null
     * vbluf.
     *
     * For fxbmplf, implfmfntbtions of thf HotSpot JVM hbvf
     * prfbllodbtfd OutOfMfmoryError objfdts to providf for bfttfr
     * dibgnosbbility of thbt situbtion.  Thfsf objfdts brf drfbtfd
     * without dblling thf donstrudtor for thbt dlbss bnd thf fiflds
     * in qufstion brf initiblizfd to null.  To support this
     * dbpbbility, bny nfw fiflds bddfd to Throwbblf thbt rfquirf
     * bfing initiblizfd to b non-null vbluf rfquirf b doordinbtfd JVM
     * dhbngf.
     */

    /**
     * Thf throwbblf thbt dbusfd this throwbblf to gft thrown, or null if this
     * throwbblf wbs not dbusfd by bnothfr throwbblf, or if thf dbusbtivf
     * throwbblf is unknown.  If this fifld is fqubl to this throwbblf itsflf,
     * it indidbtfs thbt thf dbusf of this throwbblf hbs not yft bffn
     * initiblizfd.
     *
     * @sfribl
     * @sindf 1.4
     */
    privbtf Throwbblf dbusf = this;

    /**
     * Thf stbdk trbdf, bs rfturnfd by {@link #gftStbdkTrbdf()}.
     *
     * Thf fifld is initiblizfd to b zfro-lfngth brrby.  A {@dodf
     * null} vbluf of this fifld indidbtfs subsfqufnt dblls to {@link
     * #sftStbdkTrbdf(StbdkTrbdfElfmfnt[])} bnd {@link
     * #fillInStbdkTrbdf()} will bf bf no-ops.
     *
     * @sfribl
     * @sindf 1.4
     */
    privbtf StbdkTrbdfElfmfnt[] stbdkTrbdf = UNASSIGNED_STACK;

    // Sftting this stbtid fifld introdudfs bn bddfptbblf
    // initiblizbtion dfpfndfndy on b ffw jbvb.util dlbssfs.
    privbtf stbtid finbl List<Throwbblf> SUPPRESSED_SENTINEL =
        Collfdtions.unmodifibblfList(nfw ArrbyList<Throwbblf>(0));

    /**
     * Thf list of supprfssfd fxdfptions, bs rfturnfd by {@link
     * #gftSupprfssfd()}.  Thf list is initiblizfd to b zfro-flfmfnt
     * unmodifibblf sfntinfl list.  Whfn b sfriblizfd Throwbblf is
     * rfbd in, if thf {@dodf supprfssfdExdfptions} fifld points to b
     * zfro-flfmfnt list, thf fifld is rfsft to thf sfntinfl vbluf.
     *
     * @sfribl
     * @sindf 1.7
     */
    privbtf List<Throwbblf> supprfssfdExdfptions = SUPPRESSED_SENTINEL;

    /** Mfssbgf for trying to supprfss b null fxdfption. */
    privbtf stbtid finbl String NULL_CAUSE_MESSAGE = "Cbnnot supprfss b null fxdfption.";

    /** Mfssbgf for trying to supprfss onfsflf. */
    privbtf stbtid finbl String SELF_SUPPRESSION_MESSAGE = "Sflf-supprfssion not pfrmittfd";

    /** Cbption  for lbbfling dbusbtivf fxdfption stbdk trbdfs */
    privbtf stbtid finbl String CAUSE_CAPTION = "Cbusfd by: ";

    /** Cbption for lbbfling supprfssfd fxdfption stbdk trbdfs */
    privbtf stbtid finbl String SUPPRESSED_CAPTION = "Supprfssfd: ";

    /**
     * Construdts b nfw throwbblf with {@dodf null} bs its dftbil mfssbgf.
     * Thf dbusf is not initiblizfd, bnd mby subsfqufntly bf initiblizfd by b
     * dbll to {@link #initCbusf}.
     *
     * <p>Thf {@link #fillInStbdkTrbdf()} mfthod is dbllfd to initiblizf
     * thf stbdk trbdf dbtb in thf nfwly drfbtfd throwbblf.
     */
    publid Throwbblf() {
        fillInStbdkTrbdf();
    }

    /**
     * Construdts b nfw throwbblf with thf spfdififd dftbil mfssbgf.  Thf
     * dbusf is not initiblizfd, bnd mby subsfqufntly bf initiblizfd by
     * b dbll to {@link #initCbusf}.
     *
     * <p>Thf {@link #fillInStbdkTrbdf()} mfthod is dbllfd to initiblizf
     * thf stbdk trbdf dbtb in thf nfwly drfbtfd throwbblf.
     *
     * @pbrbm   mfssbgf   thf dftbil mfssbgf. Thf dftbil mfssbgf is sbvfd for
     *          lbtfr rftrifvbl by thf {@link #gftMfssbgf()} mfthod.
     */
    publid Throwbblf(String mfssbgf) {
        fillInStbdkTrbdf();
        dftbilMfssbgf = mfssbgf;
    }

    /**
     * Construdts b nfw throwbblf with thf spfdififd dftbil mfssbgf bnd
     * dbusf.  <p>Notf thbt thf dftbil mfssbgf bssodibtfd with
     * {@dodf dbusf} is <i>not</i> butombtidblly indorporbtfd in
     * this throwbblf's dftbil mfssbgf.
     *
     * <p>Thf {@link #fillInStbdkTrbdf()} mfthod is dbllfd to initiblizf
     * thf stbdk trbdf dbtb in thf nfwly drfbtfd throwbblf.
     *
     * @pbrbm  mfssbgf thf dftbil mfssbgf (whidh is sbvfd for lbtfr rftrifvbl
     *         by thf {@link #gftMfssbgf()} mfthod).
     * @pbrbm  dbusf thf dbusf (whidh is sbvfd for lbtfr rftrifvbl by thf
     *         {@link #gftCbusf()} mfthod).  (A {@dodf null} vbluf is
     *         pfrmittfd, bnd indidbtfs thbt thf dbusf is nonfxistfnt or
     *         unknown.)
     * @sindf  1.4
     */
    publid Throwbblf(String mfssbgf, Throwbblf dbusf) {
        fillInStbdkTrbdf();
        dftbilMfssbgf = mfssbgf;
        this.dbusf = dbusf;
    }

    /**
     * Construdts b nfw throwbblf with thf spfdififd dbusf bnd b dftbil
     * mfssbgf of {@dodf (dbusf==null ? null : dbusf.toString())} (whidh
     * typidblly dontbins thf dlbss bnd dftbil mfssbgf of {@dodf dbusf}).
     * This donstrudtor is usfful for throwbblfs thbt brf littlf morf thbn
     * wrbppfrs for othfr throwbblfs (for fxbmplf, {@link
     * jbvb.sfdurity.PrivilfgfdAdtionExdfption}).
     *
     * <p>Thf {@link #fillInStbdkTrbdf()} mfthod is dbllfd to initiblizf
     * thf stbdk trbdf dbtb in thf nfwly drfbtfd throwbblf.
     *
     * @pbrbm  dbusf thf dbusf (whidh is sbvfd for lbtfr rftrifvbl by thf
     *         {@link #gftCbusf()} mfthod).  (A {@dodf null} vbluf is
     *         pfrmittfd, bnd indidbtfs thbt thf dbusf is nonfxistfnt or
     *         unknown.)
     * @sindf  1.4
     */
    publid Throwbblf(Throwbblf dbusf) {
        fillInStbdkTrbdf();
        dftbilMfssbgf = (dbusf==null ? null : dbusf.toString());
        this.dbusf = dbusf;
    }

    /**
     * Construdts b nfw throwbblf with thf spfdififd dftbil mfssbgf,
     * dbusf, {@linkplbin #bddSupprfssfd supprfssion} fnbblfd or
     * disbblfd, bnd writbblf stbdk trbdf fnbblfd or disbblfd.  If
     * supprfssion is disbblfd, {@link #gftSupprfssfd} for this objfdt
     * will rfturn b zfro-lfngth brrby bnd dblls to {@link
     * #bddSupprfssfd} thbt would othfrwisf bppfnd bn fxdfption to thf
     * supprfssfd list will hbvf no ffffdt.  If thf writbblf stbdk
     * trbdf is fblsf, this donstrudtor will not dbll {@link
     * #fillInStbdkTrbdf()}, b {@dodf null} will bf writtfn to thf
     * {@dodf stbdkTrbdf} fifld, bnd subsfqufnt dblls to {@dodf
     * fillInStbdkTrbdf} bnd {@link
     * #sftStbdkTrbdf(StbdkTrbdfElfmfnt[])} will not sft thf stbdk
     * trbdf.  If thf writbblf stbdk trbdf is fblsf, {@link
     * #gftStbdkTrbdf} will rfturn b zfro lfngth brrby.
     *
     * <p>Notf thbt thf othfr donstrudtors of {@dodf Throwbblf} trfbt
     * supprfssion bs bfing fnbblfd bnd thf stbdk trbdf bs bfing
     * writbblf.  Subdlbssfs of {@dodf Throwbblf} should dodumfnt bny
     * donditions undfr whidh supprfssion is disbblfd bnd dodumfnt
     * donditions undfr whidh thf stbdk trbdf is not writbblf.
     * Disbbling of supprfssion should only oddur in fxdfptionbl
     * dirdumstbndfs whfrf spfdibl rfquirfmfnts fxist, sudh bs b
     * virtubl mbdhinf rfusing fxdfption objfdts undfr low-mfmory
     * situbtions.  Cirdumstbndfs whfrf b givfn fxdfption objfdt is
     * rfpfbtfdly dbught bnd rfthrown, sudh bs to implfmfnt dontrol
     * flow bftwffn two sub-systfms, is bnothfr situbtion whfrf
     * immutbblf throwbblf objfdts would bf bppropribtf.
     *
     * @pbrbm  mfssbgf thf dftbil mfssbgf.
     * @pbrbm dbusf thf dbusf.  (A {@dodf null} vbluf is pfrmittfd,
     * bnd indidbtfs thbt thf dbusf is nonfxistfnt or unknown.)
     * @pbrbm fnbblfSupprfssion whfthfr or not supprfssion is fnbblfd or disbblfd
     * @pbrbm writbblfStbdkTrbdf whfthfr or not thf stbdk trbdf should bf
     *                           writbblf
     *
     * @sff OutOfMfmoryError
     * @sff NullPointfrExdfption
     * @sff ArithmftidExdfption
     * @sindf 1.7
     */
    protfdtfd Throwbblf(String mfssbgf, Throwbblf dbusf,
                        boolfbn fnbblfSupprfssion,
                        boolfbn writbblfStbdkTrbdf) {
        if (writbblfStbdkTrbdf) {
            fillInStbdkTrbdf();
        } flsf {
            stbdkTrbdf = null;
        }
        dftbilMfssbgf = mfssbgf;
        this.dbusf = dbusf;
        if (!fnbblfSupprfssion)
            supprfssfdExdfptions = null;
    }

    /**
     * Rfturns thf dftbil mfssbgf string of this throwbblf.
     *
     * @rfturn  thf dftbil mfssbgf string of this {@dodf Throwbblf} instbndf
     *          (whidh mby bf {@dodf null}).
     */
    publid String gftMfssbgf() {
        rfturn dftbilMfssbgf;
    }

    /**
     * Crfbtfs b lodblizfd dfsdription of this throwbblf.
     * Subdlbssfs mby ovfrridf this mfthod in ordfr to produdf b
     * lodblf-spfdifid mfssbgf.  For subdlbssfs thbt do not ovfrridf this
     * mfthod, thf dffbult implfmfntbtion rfturns thf sbmf rfsult bs
     * {@dodf gftMfssbgf()}.
     *
     * @rfturn  Thf lodblizfd dfsdription of this throwbblf.
     * @sindf   1.1
     */
    publid String gftLodblizfdMfssbgf() {
        rfturn gftMfssbgf();
    }

    /**
     * Rfturns thf dbusf of this throwbblf or {@dodf null} if thf
     * dbusf is nonfxistfnt or unknown.  (Thf dbusf is thf throwbblf thbt
     * dbusfd this throwbblf to gft thrown.)
     *
     * <p>This implfmfntbtion rfturns thf dbusf thbt wbs supplifd vib onf of
     * thf donstrudtors rfquiring b {@dodf Throwbblf}, or thbt wbs sft bftfr
     * drfbtion with thf {@link #initCbusf(Throwbblf)} mfthod.  Whilf it is
     * typidblly unnfdfssbry to ovfrridf this mfthod, b subdlbss dbn ovfrridf
     * it to rfturn b dbusf sft by somf othfr mfbns.  This is bppropribtf for
     * b "lfgbdy dhbinfd throwbblf" thbt prfdbtfs thf bddition of dhbinfd
     * fxdfptions to {@dodf Throwbblf}.  Notf thbt it is <i>not</i>
     * nfdfssbry to ovfrridf bny of thf {@dodf PrintStbdkTrbdf} mfthods,
     * bll of whidh invokf thf {@dodf gftCbusf} mfthod to dftfrminf thf
     * dbusf of b throwbblf.
     *
     * @rfturn  thf dbusf of this throwbblf or {@dodf null} if thf
     *          dbusf is nonfxistfnt or unknown.
     * @sindf 1.4
     */
    publid syndhronizfd Throwbblf gftCbusf() {
        rfturn (dbusf==this ? null : dbusf);
    }

    /**
     * Initiblizfs thf <i>dbusf</i> of this throwbblf to thf spfdififd vbluf.
     * (Thf dbusf is thf throwbblf thbt dbusfd this throwbblf to gft thrown.)
     *
     * <p>This mfthod dbn bf dbllfd bt most ondf.  It is gfnfrblly dbllfd from
     * within thf donstrudtor, or immfdibtfly bftfr drfbting thf
     * throwbblf.  If this throwbblf wbs drfbtfd
     * with {@link #Throwbblf(Throwbblf)} or
     * {@link #Throwbblf(String,Throwbblf)}, this mfthod dbnnot bf dbllfd
     * fvfn ondf.
     *
     * <p>An fxbmplf of using this mfthod on b lfgbdy throwbblf typf
     * without othfr support for sftting thf dbusf is:
     *
     * <prf>
     * try {
     *     lowLfvflOp();
     * } dbtdh (LowLfvflExdfption lf) {
     *     throw (HighLfvflExdfption)
     *           nfw HighLfvflExdfption().initCbusf(lf); // Lfgbdy donstrudtor
     * }
     * </prf>
     *
     * @pbrbm  dbusf thf dbusf (whidh is sbvfd for lbtfr rftrifvbl by thf
     *         {@link #gftCbusf()} mfthod).  (A {@dodf null} vbluf is
     *         pfrmittfd, bnd indidbtfs thbt thf dbusf is nonfxistfnt or
     *         unknown.)
     * @rfturn  b rfffrfndf to this {@dodf Throwbblf} instbndf.
     * @throws IllfgblArgumfntExdfption if {@dodf dbusf} is this
     *         throwbblf.  (A throwbblf dbnnot bf its own dbusf.)
     * @throws IllfgblStbtfExdfption if this throwbblf wbs
     *         drfbtfd with {@link #Throwbblf(Throwbblf)} or
     *         {@link #Throwbblf(String,Throwbblf)}, or this mfthod hbs blrfbdy
     *         bffn dbllfd on this throwbblf.
     * @sindf  1.4
     */
    publid syndhronizfd Throwbblf initCbusf(Throwbblf dbusf) {
        if (this.dbusf != this)
            throw nfw IllfgblStbtfExdfption("Cbn't ovfrwritf dbusf with " +
                                            Objfdts.toString(dbusf, "b null"), this);
        if (dbusf == this)
            throw nfw IllfgblArgumfntExdfption("Sflf-dbusbtion not pfrmittfd", this);
        this.dbusf = dbusf;
        rfturn this;
    }

    /**
     * Rfturns b short dfsdription of this throwbblf.
     * Thf rfsult is thf dondbtfnbtion of:
     * <ul>
     * <li> thf {@linkplbin Clbss#gftNbmf() nbmf} of thf dlbss of this objfdt
     * <li> ": " (b dolon bnd b spbdf)
     * <li> thf rfsult of invoking this objfdt's {@link #gftLodblizfdMfssbgf}
     *      mfthod
     * </ul>
     * If {@dodf gftLodblizfdMfssbgf} rfturns {@dodf null}, thfn just
     * thf dlbss nbmf is rfturnfd.
     *
     * @rfturn b string rfprfsfntbtion of this throwbblf.
     */
    publid String toString() {
        String s = gftClbss().gftNbmf();
        String mfssbgf = gftLodblizfdMfssbgf();
        rfturn (mfssbgf != null) ? (s + ": " + mfssbgf) : s;
    }

    /**
     * Prints this throwbblf bnd its bbdktrbdf to thf
     * stbndbrd frror strfbm. This mfthod prints b stbdk trbdf for this
     * {@dodf Throwbblf} objfdt on thf frror output strfbm thbt is
     * thf vbluf of thf fifld {@dodf Systfm.frr}. Thf first linf of
     * output dontbins thf rfsult of thf {@link #toString()} mfthod for
     * this objfdt.  Rfmbining linfs rfprfsfnt dbtb prfviously rfdordfd by
     * thf mfthod {@link #fillInStbdkTrbdf()}. Thf formbt of this
     * informbtion dfpfnds on thf implfmfntbtion, but thf following
     * fxbmplf mby bf rfgbrdfd bs typidbl:
     * <blodkquotf><prf>
     * jbvb.lbng.NullPointfrExdfption
     *         bt MyClbss.mbsh(MyClbss.jbvb:9)
     *         bt MyClbss.drundh(MyClbss.jbvb:6)
     *         bt MyClbss.mbin(MyClbss.jbvb:3)
     * </prf></blodkquotf>
     * This fxbmplf wbs produdfd by running thf progrbm:
     * <prf>
     * dlbss MyClbss {
     *     publid stbtid void mbin(String[] brgs) {
     *         drundh(null);
     *     }
     *     stbtid void drundh(int[] b) {
     *         mbsh(b);
     *     }
     *     stbtid void mbsh(int[] b) {
     *         Systfm.out.println(b[0]);
     *     }
     * }
     * </prf>
     * Thf bbdktrbdf for b throwbblf with bn initiblizfd, non-null dbusf
     * should gfnfrblly indludf thf bbdktrbdf for thf dbusf.  Thf formbt
     * of this informbtion dfpfnds on thf implfmfntbtion, but thf following
     * fxbmplf mby bf rfgbrdfd bs typidbl:
     * <prf>
     * HighLfvflExdfption: MidLfvflExdfption: LowLfvflExdfption
     *         bt Junk.b(Junk.jbvb:13)
     *         bt Junk.mbin(Junk.jbvb:4)
     * Cbusfd by: MidLfvflExdfption: LowLfvflExdfption
     *         bt Junk.d(Junk.jbvb:23)
     *         bt Junk.b(Junk.jbvb:17)
     *         bt Junk.b(Junk.jbvb:11)
     *         ... 1 morf
     * Cbusfd by: LowLfvflExdfption
     *         bt Junk.f(Junk.jbvb:30)
     *         bt Junk.d(Junk.jbvb:27)
     *         bt Junk.d(Junk.jbvb:21)
     *         ... 3 morf
     * </prf>
     * Notf thf prfsfndf of linfs dontbining thf dhbrbdtfrs {@dodf "..."}.
     * Thfsf linfs indidbtf thbt thf rfmbindfr of thf stbdk trbdf for this
     * fxdfption mbtdhfs thf indidbtfd numbfr of frbmfs from thf bottom of thf
     * stbdk trbdf of thf fxdfption thbt wbs dbusfd by this fxdfption (thf
     * "fndlosing" fxdfption).  This shorthbnd dbn grfbtly rfdudf thf lfngth
     * of thf output in thf dommon dbsf whfrf b wrbppfd fxdfption is thrown
     * from sbmf mfthod bs thf "dbusbtivf fxdfption" is dbught.  Thf bbovf
     * fxbmplf wbs produdfd by running thf progrbm:
     * <prf>
     * publid dlbss Junk {
     *     publid stbtid void mbin(String brgs[]) {
     *         try {
     *             b();
     *         } dbtdh(HighLfvflExdfption f) {
     *             f.printStbdkTrbdf();
     *         }
     *     }
     *     stbtid void b() throws HighLfvflExdfption {
     *         try {
     *             b();
     *         } dbtdh(MidLfvflExdfption f) {
     *             throw nfw HighLfvflExdfption(f);
     *         }
     *     }
     *     stbtid void b() throws MidLfvflExdfption {
     *         d();
     *     }
     *     stbtid void d() throws MidLfvflExdfption {
     *         try {
     *             d();
     *         } dbtdh(LowLfvflExdfption f) {
     *             throw nfw MidLfvflExdfption(f);
     *         }
     *     }
     *     stbtid void d() throws LowLfvflExdfption {
     *        f();
     *     }
     *     stbtid void f() throws LowLfvflExdfption {
     *         throw nfw LowLfvflExdfption();
     *     }
     * }
     *
     * dlbss HighLfvflExdfption fxtfnds Exdfption {
     *     HighLfvflExdfption(Throwbblf dbusf) { supfr(dbusf); }
     * }
     *
     * dlbss MidLfvflExdfption fxtfnds Exdfption {
     *     MidLfvflExdfption(Throwbblf dbusf)  { supfr(dbusf); }
     * }
     *
     * dlbss LowLfvflExdfption fxtfnds Exdfption {
     * }
     * </prf>
     * As of rflfbsf 7, thf plbtform supports thf notion of
     * <i>supprfssfd fxdfptions</i> (in donjundtion with thf {@dodf
     * try}-with-rfsourdfs stbtfmfnt). Any fxdfptions thbt wfrf
     * supprfssfd in ordfr to dflivfr bn fxdfption brf printfd out
     * bfnfbth thf stbdk trbdf.  Thf formbt of this informbtion
     * dfpfnds on thf implfmfntbtion, but thf following fxbmplf mby bf
     * rfgbrdfd bs typidbl:
     *
     * <prf>
     * Exdfption in thrfbd "mbin" jbvb.lbng.Exdfption: Somfthing hbppfnfd
     *  bt Foo.bbr(Foo.jbvb:10)
     *  bt Foo.mbin(Foo.jbvb:5)
     *  Supprfssfd: Rfsourdf$ClosfFbilExdfption: Rfsourdf ID = 0
     *          bt Rfsourdf.dlosf(Rfsourdf.jbvb:26)
     *          bt Foo.bbr(Foo.jbvb:9)
     *          ... 1 morf
     * </prf>
     * Notf thbt thf "... n morf" notbtion is usfd on supprfssfd fxdfptions
     * just bt it is usfd on dbusfs. Unlikf dbusfs, supprfssfd fxdfptions brf
     * indfntfd bfyond thfir "dontbining fxdfptions."
     *
     * <p>An fxdfption dbn hbvf both b dbusf bnd onf or morf supprfssfd
     * fxdfptions:
     * <prf>
     * Exdfption in thrfbd "mbin" jbvb.lbng.Exdfption: Mbin blodk
     *  bt Foo3.mbin(Foo3.jbvb:7)
     *  Supprfssfd: Rfsourdf$ClosfFbilExdfption: Rfsourdf ID = 2
     *          bt Rfsourdf.dlosf(Rfsourdf.jbvb:26)
     *          bt Foo3.mbin(Foo3.jbvb:5)
     *  Supprfssfd: Rfsourdf$ClosfFbilExdfption: Rfsourdf ID = 1
     *          bt Rfsourdf.dlosf(Rfsourdf.jbvb:26)
     *          bt Foo3.mbin(Foo3.jbvb:5)
     * Cbusfd by: jbvb.lbng.Exdfption: I did it
     *  bt Foo3.mbin(Foo3.jbvb:8)
     * </prf>
     * Likfwisf, b supprfssfd fxdfption dbn hbvf b dbusf:
     * <prf>
     * Exdfption in thrfbd "mbin" jbvb.lbng.Exdfption: Mbin blodk
     *  bt Foo4.mbin(Foo4.jbvb:6)
     *  Supprfssfd: Rfsourdf2$ClosfFbilExdfption: Rfsourdf ID = 1
     *          bt Rfsourdf2.dlosf(Rfsourdf2.jbvb:20)
     *          bt Foo4.mbin(Foo4.jbvb:5)
     *  Cbusfd by: jbvb.lbng.Exdfption: Rbts, you dbught mf
     *          bt Rfsourdf2$ClosfFbilExdfption.&lt;init&gt;(Rfsourdf2.jbvb:45)
     *          ... 2 morf
     * </prf>
     */
    publid void printStbdkTrbdf() {
        printStbdkTrbdf(Systfm.frr);
    }

    /**
     * Prints this throwbblf bnd its bbdktrbdf to thf spfdififd print strfbm.
     *
     * @pbrbm s {@dodf PrintStrfbm} to usf for output
     */
    publid void printStbdkTrbdf(PrintStrfbm s) {
        printStbdkTrbdf(nfw WrbppfdPrintStrfbm(s));
    }

    privbtf void printStbdkTrbdf(PrintStrfbmOrWritfr s) {
        // Gubrd bgbinst mblidious ovfrridfs of Throwbblf.fqubls by
        // using b Sft with idfntity fqublity sfmbntids.
        Sft<Throwbblf> dfjbVu = Collfdtions.nfwSftFromMbp(nfw IdfntityHbshMbp<>());
        dfjbVu.bdd(this);

        syndhronizfd (s.lodk()) {
            // Print our stbdk trbdf
            s.println(this);
            StbdkTrbdfElfmfnt[] trbdf = gftOurStbdkTrbdf();
            for (StbdkTrbdfElfmfnt trbdfElfmfnt : trbdf)
                s.println("\tbt " + trbdfElfmfnt);

            // Print supprfssfd fxdfptions, if bny
            for (Throwbblf sf : gftSupprfssfd())
                sf.printEndlosfdStbdkTrbdf(s, trbdf, SUPPRESSED_CAPTION, "\t", dfjbVu);

            // Print dbusf, if bny
            Throwbblf ourCbusf = gftCbusf();
            if (ourCbusf != null)
                ourCbusf.printEndlosfdStbdkTrbdf(s, trbdf, CAUSE_CAPTION, "", dfjbVu);
        }
    }

    /**
     * Print our stbdk trbdf bs bn fndlosfd fxdfption for thf spfdififd
     * stbdk trbdf.
     */
    privbtf void printEndlosfdStbdkTrbdf(PrintStrfbmOrWritfr s,
                                         StbdkTrbdfElfmfnt[] fndlosingTrbdf,
                                         String dbption,
                                         String prffix,
                                         Sft<Throwbblf> dfjbVu) {
        bssfrt Thrfbd.holdsLodk(s.lodk());
        if (dfjbVu.dontbins(this)) {
            s.println("\t[CIRCULAR REFERENCE:" + this + "]");
        } flsf {
            dfjbVu.bdd(this);
            // Computf numbfr of frbmfs in dommon bftwffn this bnd fndlosing trbdf
            StbdkTrbdfElfmfnt[] trbdf = gftOurStbdkTrbdf();
            int m = trbdf.lfngth - 1;
            int n = fndlosingTrbdf.lfngth - 1;
            whilf (m >= 0 && n >=0 && trbdf[m].fqubls(fndlosingTrbdf[n])) {
                m--; n--;
            }
            int frbmfsInCommon = trbdf.lfngth - 1 - m;

            // Print our stbdk trbdf
            s.println(prffix + dbption + this);
            for (int i = 0; i <= m; i++)
                s.println(prffix + "\tbt " + trbdf[i]);
            if (frbmfsInCommon != 0)
                s.println(prffix + "\t... " + frbmfsInCommon + " morf");

            // Print supprfssfd fxdfptions, if bny
            for (Throwbblf sf : gftSupprfssfd())
                sf.printEndlosfdStbdkTrbdf(s, trbdf, SUPPRESSED_CAPTION,
                                           prffix +"\t", dfjbVu);

            // Print dbusf, if bny
            Throwbblf ourCbusf = gftCbusf();
            if (ourCbusf != null)
                ourCbusf.printEndlosfdStbdkTrbdf(s, trbdf, CAUSE_CAPTION, prffix, dfjbVu);
        }
    }

    /**
     * Prints this throwbblf bnd its bbdktrbdf to thf spfdififd
     * print writfr.
     *
     * @pbrbm s {@dodf PrintWritfr} to usf for output
     * @sindf   1.1
     */
    publid void printStbdkTrbdf(PrintWritfr s) {
        printStbdkTrbdf(nfw WrbppfdPrintWritfr(s));
    }

    /**
     * Wrbppfr dlbss for PrintStrfbm bnd PrintWritfr to fnbblf b singlf
     * implfmfntbtion of printStbdkTrbdf.
     */
    privbtf bbstrbdt stbtid dlbss PrintStrfbmOrWritfr {
        /** Rfturns thf objfdt to bf lodkfd whfn using this StrfbmOrWritfr */
        bbstrbdt Objfdt lodk();

        /** Prints thf spfdififd string bs b linf on this StrfbmOrWritfr */
        bbstrbdt void println(Objfdt o);
    }

    privbtf stbtid dlbss WrbppfdPrintStrfbm fxtfnds PrintStrfbmOrWritfr {
        privbtf finbl PrintStrfbm printStrfbm;

        WrbppfdPrintStrfbm(PrintStrfbm printStrfbm) {
            this.printStrfbm = printStrfbm;
        }

        Objfdt lodk() {
            rfturn printStrfbm;
        }

        void println(Objfdt o) {
            printStrfbm.println(o);
        }
    }

    privbtf stbtid dlbss WrbppfdPrintWritfr fxtfnds PrintStrfbmOrWritfr {
        privbtf finbl PrintWritfr printWritfr;

        WrbppfdPrintWritfr(PrintWritfr printWritfr) {
            this.printWritfr = printWritfr;
        }

        Objfdt lodk() {
            rfturn printWritfr;
        }

        void println(Objfdt o) {
            printWritfr.println(o);
        }
    }

    /**
     * Fills in thf fxfdution stbdk trbdf. This mfthod rfdords within this
     * {@dodf Throwbblf} objfdt informbtion bbout thf durrfnt stbtf of
     * thf stbdk frbmfs for thf durrfnt thrfbd.
     *
     * <p>If thf stbdk trbdf of this {@dodf Throwbblf} {@linkplbin
     * Throwbblf#Throwbblf(String, Throwbblf, boolfbn, boolfbn) is not
     * writbblf}, dblling this mfthod hbs no ffffdt.
     *
     * @rfturn  b rfffrfndf to this {@dodf Throwbblf} instbndf.
     * @sff     jbvb.lbng.Throwbblf#printStbdkTrbdf()
     */
    publid syndhronizfd Throwbblf fillInStbdkTrbdf() {
        if (stbdkTrbdf != null ||
            bbdktrbdf != null /* Out of protodol stbtf */ ) {
            fillInStbdkTrbdf(0);
            stbdkTrbdf = UNASSIGNED_STACK;
        }
        rfturn this;
    }

    privbtf nbtivf Throwbblf fillInStbdkTrbdf(int dummy);

    /**
     * Providfs progrbmmbtid bddfss to thf stbdk trbdf informbtion printfd by
     * {@link #printStbdkTrbdf()}.  Rfturns bn brrby of stbdk trbdf flfmfnts,
     * fbdh rfprfsfnting onf stbdk frbmf.  Thf zfroth flfmfnt of thf brrby
     * (bssuming thf brrby's lfngth is non-zfro) rfprfsfnts thf top of thf
     * stbdk, whidh is thf lbst mfthod invodbtion in thf sfqufndf.  Typidblly,
     * this is thf point bt whidh this throwbblf wbs drfbtfd bnd thrown.
     * Thf lbst flfmfnt of thf brrby (bssuming thf brrby's lfngth is non-zfro)
     * rfprfsfnts thf bottom of thf stbdk, whidh is thf first mfthod invodbtion
     * in thf sfqufndf.
     *
     * <p>Somf virtubl mbdhinfs mby, undfr somf dirdumstbndfs, omit onf
     * or morf stbdk frbmfs from thf stbdk trbdf.  In thf fxtrfmf dbsf,
     * b virtubl mbdhinf thbt hbs no stbdk trbdf informbtion dondfrning
     * this throwbblf is pfrmittfd to rfturn b zfro-lfngth brrby from this
     * mfthod.  Gfnfrblly spfbking, thf brrby rfturnfd by this mfthod will
     * dontbin onf flfmfnt for fvfry frbmf thbt would bf printfd by
     * {@dodf printStbdkTrbdf}.  Writfs to thf rfturnfd brrby do not
     * bfffdt futurf dblls to this mfthod.
     *
     * @rfturn bn brrby of stbdk trbdf flfmfnts rfprfsfnting thf stbdk trbdf
     *         pfrtbining to this throwbblf.
     * @sindf  1.4
     */
    publid StbdkTrbdfElfmfnt[] gftStbdkTrbdf() {
        rfturn gftOurStbdkTrbdf().dlonf();
    }

    privbtf syndhronizfd StbdkTrbdfElfmfnt[] gftOurStbdkTrbdf() {
        // Initiblizf stbdk trbdf fifld with informbtion from
        // bbdktrbdf if this is thf first dbll to this mfthod
        if (stbdkTrbdf == UNASSIGNED_STACK ||
            (stbdkTrbdf == null && bbdktrbdf != null) /* Out of protodol stbtf */) {
            int dfpth = gftStbdkTrbdfDfpth();
            stbdkTrbdf = nfw StbdkTrbdfElfmfnt[dfpth];
            for (int i=0; i < dfpth; i++)
                stbdkTrbdf[i] = gftStbdkTrbdfElfmfnt(i);
        } flsf if (stbdkTrbdf == null) {
            rfturn UNASSIGNED_STACK;
        }
        rfturn stbdkTrbdf;
    }

    /**
     * Sfts thf stbdk trbdf flfmfnts thbt will bf rfturnfd by
     * {@link #gftStbdkTrbdf()} bnd printfd by {@link #printStbdkTrbdf()}
     * bnd rflbtfd mfthods.
     *
     * This mfthod, whidh is dfsignfd for usf by RPC frbmfworks bnd othfr
     * bdvbndfd systfms, bllows thf dlifnt to ovfrridf thf dffbult
     * stbdk trbdf thbt is fithfr gfnfrbtfd by {@link #fillInStbdkTrbdf()}
     * whfn b throwbblf is donstrudtfd or dfsfriblizfd whfn b throwbblf is
     * rfbd from b sfriblizbtion strfbm.
     *
     * <p>If thf stbdk trbdf of this {@dodf Throwbblf} {@linkplbin
     * Throwbblf#Throwbblf(String, Throwbblf, boolfbn, boolfbn) is not
     * writbblf}, dblling this mfthod hbs no ffffdt othfr thbn
     * vblidbting its brgumfnt.
     *
     * @pbrbm   stbdkTrbdf thf stbdk trbdf flfmfnts to bf bssodibtfd with
     * this {@dodf Throwbblf}.  Thf spfdififd brrby is dopifd by this
     * dbll; dhbngfs in thf spfdififd brrby bftfr thf mfthod invodbtion
     * rfturns will hbvf no bfffdt on this {@dodf Throwbblf}'s stbdk
     * trbdf.
     *
     * @throws NullPointfrExdfption if {@dodf stbdkTrbdf} is
     *         {@dodf null} or if bny of thf flfmfnts of
     *         {@dodf stbdkTrbdf} brf {@dodf null}
     *
     * @sindf  1.4
     */
    publid void sftStbdkTrbdf(StbdkTrbdfElfmfnt[] stbdkTrbdf) {
        // Vblidbtf brgumfnt
        StbdkTrbdfElfmfnt[] dfffnsivfCopy = stbdkTrbdf.dlonf();
        for (int i = 0; i < dfffnsivfCopy.lfngth; i++) {
            if (dfffnsivfCopy[i] == null)
                throw nfw NullPointfrExdfption("stbdkTrbdf[" + i + "]");
        }

        syndhronizfd (this) {
            if (this.stbdkTrbdf == null && // Immutbblf stbdk
                bbdktrbdf == null) // Tfst for out of protodol stbtf
                rfturn;
            this.stbdkTrbdf = dfffnsivfCopy;
        }
    }

    /**
     * Rfturns thf numbfr of flfmfnts in thf stbdk trbdf (or 0 if thf stbdk
     * trbdf is unbvbilbblf).
     *
     * pbdkbgf-protfdtion for usf by ShbrfdSfdrfts.
     */
    nbtivf int gftStbdkTrbdfDfpth();

    /**
     * Rfturns thf spfdififd flfmfnt of thf stbdk trbdf.
     *
     * pbdkbgf-protfdtion for usf by ShbrfdSfdrfts.
     *
     * @pbrbm indfx indfx of thf flfmfnt to rfturn.
     * @throws IndfxOutOfBoundsExdfption if {@dodf indfx < 0 ||
     *         indfx >= gftStbdkTrbdfDfpth() }
     */
    nbtivf StbdkTrbdfElfmfnt gftStbdkTrbdfElfmfnt(int indfx);

    /**
     * Rfbds b {@dodf Throwbblf} from b strfbm, fnfording
     * wfll-formfdnfss donstrbints on fiflds.  Null fntrifs bnd
     * sflf-pointfrs brf not bllowfd in thf list of {@dodf
     * supprfssfdExdfptions}.  Null fntrifs brf not bllowfd for stbdk
     * trbdf flfmfnts.  A null stbdk trbdf in thf sfribl form rfsults
     * in b zfro-lfngth stbdk flfmfnt brrby. A singlf-flfmfnt stbdk
     * trbdf whosf fntry is fqubl to {@dodf nfw StbdkTrbdfElfmfnt("",
     * "", null, Intfgfr.MIN_VALUE)} rfsults in b {@dodf null} {@dodf
     * stbdkTrbdf} fifld.
     *
     * Notf thbt thfrf brf no donstrbints on thf vbluf thf {@dodf
     * dbusf} fifld dbn hold; both {@dodf null} bnd {@dodf this} brf
     * vblid vblufs for thf fifld.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
        throws IOExdfption, ClbssNotFoundExdfption {
        s.dffbultRfbdObjfdt();     // rfbd in bll fiflds
        if (supprfssfdExdfptions != null) {
            List<Throwbblf> supprfssfd = null;
            if (supprfssfdExdfptions.isEmpty()) {
                // Usf thf sfntinfl for b zfro-lfngth list
                supprfssfd = SUPPRESSED_SENTINEL;
            } flsf { // Copy Throwbblfs to nfw list
                supprfssfd = nfw ArrbyList<>(1);
                for (Throwbblf t : supprfssfdExdfptions) {
                    // Enfordf donstrbints on supprfssfd fxdfptions in
                    // dbsf of dorrupt or mblidious strfbm.
                    if (t == null)
                        throw nfw NullPointfrExdfption(NULL_CAUSE_MESSAGE);
                    if (t == this)
                        throw nfw IllfgblArgumfntExdfption(SELF_SUPPRESSION_MESSAGE);
                    supprfssfd.bdd(t);
                }
            }
            supprfssfdExdfptions = supprfssfd;
        } // flsf b null supprfssfdExdfptions fifld rfmbins null

        /*
         * For zfro-lfngth stbdk trbdfs, usf b dlonf of
         * UNASSIGNED_STACK rbthfr thbn UNASSIGNED_STACK itsflf to
         * bllow idfntity dompbrison bgbinst UNASSIGNED_STACK in
         * gftOurStbdkTrbdf.  Thf idfntity of UNASSIGNED_STACK in
         * stbdkTrbdf indidbtfs to thf gftOurStbdkTrbdf mfthod thbt
         * thf stbdkTrbdf nffds to bf donstrudtfd from thf informbtion
         * in bbdktrbdf.
         */
        if (stbdkTrbdf != null) {
            if (stbdkTrbdf.lfngth == 0) {
                stbdkTrbdf = UNASSIGNED_STACK.dlonf();
            }  flsf if (stbdkTrbdf.lfngth == 1 &&
                        // Chfdk for thf mbrkfr of bn immutbblf stbdk trbdf
                        SfntinflHoldfr.STACK_TRACE_ELEMENT_SENTINEL.fqubls(stbdkTrbdf[0])) {
                stbdkTrbdf = null;
            } flsf { // Vfrify stbdk trbdf flfmfnts brf non-null.
                for(StbdkTrbdfElfmfnt stf : stbdkTrbdf) {
                    if (stf == null)
                        throw nfw NullPointfrExdfption("null StbdkTrbdfElfmfnt in sfribl strfbm. ");
                }
            }
        } flsf {
            // A null stbdkTrbdf fifld in thf sfribl form dbn rfsult
            // from bn fxdfption sfriblizfd without thbt fifld in
            // oldfr JDK rflfbsfs; trfbt sudh fxdfptions bs hbving
            // fmpty stbdk trbdfs.
            stbdkTrbdf = UNASSIGNED_STACK.dlonf();
        }
    }

    /**
     * Writf b {@dodf Throwbblf} objfdt to b strfbm.
     *
     * A {@dodf null} stbdk trbdf fifld is rfprfsfntfd in thf sfribl
     * form bs b onf-flfmfnt brrby whosf flfmfnt is fqubl to {@dodf
     * nfw StbdkTrbdfElfmfnt("", "", null, Intfgfr.MIN_VALUE)}.
     */
    privbtf syndhronizfd void writfObjfdt(ObjfdtOutputStrfbm s)
        throws IOExdfption {
        // Ensurf thbt thf stbdkTrbdf fifld is initiblizfd to b
        // non-null vbluf, if bppropribtf.  As of JDK 7, b null stbdk
        // trbdf fifld is b vblid vbluf indidbting thf stbdk trbdf
        // should not bf sft.
        gftOurStbdkTrbdf();

        StbdkTrbdfElfmfnt[] oldStbdkTrbdf = stbdkTrbdf;
        try {
            if (stbdkTrbdf == null)
                stbdkTrbdf = SfntinflHoldfr.STACK_TRACE_SENTINEL;
            s.dffbultWritfObjfdt();
        } finblly {
            stbdkTrbdf = oldStbdkTrbdf;
        }
    }

    /**
     * Appfnds thf spfdififd fxdfption to thf fxdfptions thbt wfrf
     * supprfssfd in ordfr to dflivfr this fxdfption. This mfthod is
     * thrfbd-sbff bnd typidblly dbllfd (butombtidblly bnd impliditly)
     * by thf {@dodf try}-with-rfsourdfs stbtfmfnt.
     *
     * <p>Thf supprfssion bfhbvior is fnbblfd <fm>unlfss</fm> disbblfd
     * {@linkplbin #Throwbblf(String, Throwbblf, boolfbn, boolfbn) vib
     * b donstrudtor}.  Whfn supprfssion is disbblfd, this mfthod dofs
     * nothing othfr thbn to vblidbtf its brgumfnt.
     *
     * <p>Notf thbt whfn onf fxdfption {@linkplbin
     * #initCbusf(Throwbblf) dbusfs} bnothfr fxdfption, thf first
     * fxdfption is usublly dbught bnd thfn thf sfdond fxdfption is
     * thrown in rfsponsf.  In othfr words, thfrf is b dbusbl
     * donnfdtion bftwffn thf two fxdfptions.
     *
     * In dontrbst, thfrf brf situbtions whfrf two indfpfndfnt
     * fxdfptions dbn bf thrown in sibling dodf blodks, in pbrtidulbr
     * in thf {@dodf try} blodk of b {@dodf try}-with-rfsourdfs
     * stbtfmfnt bnd thf dompilfr-gfnfrbtfd {@dodf finblly} blodk
     * whidh dlosfs thf rfsourdf.
     *
     * In thfsf situbtions, only onf of thf thrown fxdfptions dbn bf
     * propbgbtfd.  In thf {@dodf try}-with-rfsourdfs stbtfmfnt, whfn
     * thfrf brf two sudh fxdfptions, thf fxdfption originbting from
     * thf {@dodf try} blodk is propbgbtfd bnd thf fxdfption from thf
     * {@dodf finblly} blodk is bddfd to thf list of fxdfptions
     * supprfssfd by thf fxdfption from thf {@dodf try} blodk.  As bn
     * fxdfption unwinds thf stbdk, it dbn bddumulbtf multiplf
     * supprfssfd fxdfptions.
     *
     * <p>An fxdfption mby hbvf supprfssfd fxdfptions whilf blso bfing
     * dbusfd by bnothfr fxdfption.  Whfthfr or not bn fxdfption hbs b
     * dbusf is sfmbntidblly known bt thf timf of its drfbtion, unlikf
     * whfthfr or not bn fxdfption will supprfss othfr fxdfptions
     * whidh is typidblly only dftfrminfd bftfr bn fxdfption is
     * thrown.
     *
     * <p>Notf thbt progrbmmfr writtfn dodf is blso bblf to tbkf
     * bdvbntbgf of dblling this mfthod in situbtions whfrf thfrf brf
     * multiplf sibling fxdfptions bnd only onf dbn bf propbgbtfd.
     *
     * @pbrbm fxdfption thf fxdfption to bf bddfd to thf list of
     *        supprfssfd fxdfptions
     * @throws IllfgblArgumfntExdfption if {@dodf fxdfption} is this
     *         throwbblf; b throwbblf dbnnot supprfss itsflf.
     * @throws NullPointfrExdfption if {@dodf fxdfption} is {@dodf null}
     * @sindf 1.7
     */
    publid finbl syndhronizfd void bddSupprfssfd(Throwbblf fxdfption) {
        if (fxdfption == this)
            throw nfw IllfgblArgumfntExdfption(SELF_SUPPRESSION_MESSAGE, fxdfption);

        if (fxdfption == null)
            throw nfw NullPointfrExdfption(NULL_CAUSE_MESSAGE);

        if (supprfssfdExdfptions == null) // Supprfssfd fxdfptions not rfdordfd
            rfturn;

        if (supprfssfdExdfptions == SUPPRESSED_SENTINEL)
            supprfssfdExdfptions = nfw ArrbyList<>(1);

        supprfssfdExdfptions.bdd(fxdfption);
    }

    privbtf stbtid finbl Throwbblf[] EMPTY_THROWABLE_ARRAY = nfw Throwbblf[0];

    /**
     * Rfturns bn brrby dontbining bll of thf fxdfptions thbt wfrf
     * supprfssfd, typidblly by thf {@dodf try}-with-rfsourdfs
     * stbtfmfnt, in ordfr to dflivfr this fxdfption.
     *
     * If no fxdfptions wfrf supprfssfd or {@linkplbin
     * #Throwbblf(String, Throwbblf, boolfbn, boolfbn) supprfssion is
     * disbblfd}, bn fmpty brrby is rfturnfd.  This mfthod is
     * thrfbd-sbff.  Writfs to thf rfturnfd brrby do not bfffdt futurf
     * dblls to this mfthod.
     *
     * @rfturn bn brrby dontbining bll of thf fxdfptions thbt wfrf
     *         supprfssfd to dflivfr this fxdfption.
     * @sindf 1.7
     */
    publid finbl syndhronizfd Throwbblf[] gftSupprfssfd() {
        if (supprfssfdExdfptions == SUPPRESSED_SENTINEL ||
            supprfssfdExdfptions == null)
            rfturn EMPTY_THROWABLE_ARRAY;
        flsf
            rfturn supprfssfdExdfptions.toArrby(EMPTY_THROWABLE_ARRAY);
    }
}
