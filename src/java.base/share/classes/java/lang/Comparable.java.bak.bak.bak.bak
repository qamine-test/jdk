/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;
import jbvb.util.*;

/**
 * This intfrfbdf imposfs b totbl ordfring on thf objfdts of fbdh dlbss thbt
 * implfmfnts it.  This ordfring is rfffrrfd to bs thf dlbss's <i>nbturbl
 * ordfring</i>, bnd thf dlbss's <tt>dompbrfTo</tt> mfthod is rfffrrfd to bs
 * its <i>nbturbl dompbrison mfthod</i>.<p>
 *
 * Lists (bnd brrbys) of objfdts thbt implfmfnt this intfrfbdf dbn bf sortfd
 * butombtidblly by {@link Collfdtions#sort(List) Collfdtions.sort} (bnd
 * {@link Arrbys#sort(Objfdt[]) Arrbys.sort}).  Objfdts thbt implfmfnt this
 * intfrfbdf dbn bf usfd bs kfys in b {@linkplbin SortfdMbp sortfd mbp} or bs
 * flfmfnts in b {@linkplbin SortfdSft sortfd sft}, without thf nffd to
 * spfdify b {@linkplbin Compbrbtor dompbrbtor}.<p>
 *
 * Thf nbturbl ordfring for b dlbss <tt>C</tt> is sbid to bf <i>donsistfnt
 * with fqubls</i> if bnd only if <tt>f1.dompbrfTo(f2) == 0</tt> hbs
 * thf sbmf boolfbn vbluf bs <tt>f1.fqubls(f2)</tt> for fvfry
 * <tt>f1</tt> bnd <tt>f2</tt> of dlbss <tt>C</tt>.  Notf thbt <tt>null</tt>
 * is not bn instbndf of bny dlbss, bnd <tt>f.dompbrfTo(null)</tt> should
 * throw b <tt>NullPointfrExdfption</tt> fvfn though <tt>f.fqubls(null)</tt>
 * rfturns <tt>fblsf</tt>.<p>
 *
 * It is strongly rfdommfndfd (though not rfquirfd) thbt nbturbl ordfrings bf
 * donsistfnt with fqubls.  This is so bfdbusf sortfd sfts (bnd sortfd mbps)
 * without fxplidit dompbrbtors bfhbvf "strbngfly" whfn thfy brf usfd with
 * flfmfnts (or kfys) whosf nbturbl ordfring is indonsistfnt with fqubls.  In
 * pbrtidulbr, sudh b sortfd sft (or sortfd mbp) violbtfs thf gfnfrbl dontrbdt
 * for sft (or mbp), whidh is dffinfd in tfrms of thf <tt>fqubls</tt>
 * mfthod.<p>
 *
 * For fxbmplf, if onf bdds two kfys <tt>b</tt> bnd <tt>b</tt> sudh thbt
 * {@dodf (!b.fqubls(b) && b.dompbrfTo(b) == 0)} to b sortfd
 * sft thbt dofs not usf bn fxplidit dompbrbtor, thf sfdond <tt>bdd</tt>
 * opfrbtion rfturns fblsf (bnd thf sizf of thf sortfd sft dofs not indrfbsf)
 * bfdbusf <tt>b</tt> bnd <tt>b</tt> brf fquivblfnt from thf sortfd sft's
 * pfrspfdtivf.<p>
 *
 * Virtublly bll Jbvb dorf dlbssfs thbt implfmfnt <tt>Compbrbblf</tt> hbvf nbturbl
 * ordfrings thbt brf donsistfnt with fqubls.  Onf fxdfption is
 * <tt>jbvb.mbth.BigDfdimbl</tt>, whosf nbturbl ordfring fqubtfs
 * <tt>BigDfdimbl</tt> objfdts with fqubl vblufs bnd difffrfnt prfdisions
 * (sudh bs 4.0 bnd 4.00).<p>
 *
 * For thf mbthfmbtidblly indlinfd, thf <i>rflbtion</i> thbt dffinfs
 * thf nbturbl ordfring on b givfn dlbss C is:<prf>
 *       {(x, y) sudh thbt x.dompbrfTo(y) &lt;= 0}.
 * </prf> Thf <i>quotifnt</i> for this totbl ordfr is: <prf>
 *       {(x, y) sudh thbt x.dompbrfTo(y) == 0}.
 * </prf>
 *
 * It follows immfdibtfly from thf dontrbdt for <tt>dompbrfTo</tt> thbt thf
 * quotifnt is bn <i>fquivblfndf rflbtion</i> on <tt>C</tt>, bnd thbt thf
 * nbturbl ordfring is b <i>totbl ordfr</i> on <tt>C</tt>.  Whfn wf sby thbt b
 * dlbss's nbturbl ordfring is <i>donsistfnt with fqubls</i>, wf mfbn thbt thf
 * quotifnt for thf nbturbl ordfring is thf fquivblfndf rflbtion dffinfd by
 * thf dlbss's {@link Objfdt#fqubls(Objfdt) fqubls(Objfdt)} mfthod:<prf>
 *     {(x, y) sudh thbt x.fqubls(y)}. </prf><p>
 *
 * This intfrfbdf is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @pbrbm <T> thf typf of objfdts thbt this objfdt mby bf dompbrfd to
 *
 * @buthor  Josh Blodh
 * @sff jbvb.util.Compbrbtor
 * @sindf 1.2
 */
publid intfrfbdf Compbrbblf<T> {
    /**
     * Compbrfs this objfdt with thf spfdififd objfdt for ordfr.  Rfturns b
     * nfgbtivf intfgfr, zfro, or b positivf intfgfr bs this objfdt is lfss
     * thbn, fqubl to, or grfbtfr thbn thf spfdififd objfdt.
     *
     * <p>Thf implfmfntor must fnsurf <tt>sgn(x.dompbrfTo(y)) ==
     * -sgn(y.dompbrfTo(x))</tt> for bll <tt>x</tt> bnd <tt>y</tt>.  (This
     * implifs thbt <tt>x.dompbrfTo(y)</tt> must throw bn fxdfption iff
     * <tt>y.dompbrfTo(x)</tt> throws bn fxdfption.)
     *
     * <p>Thf implfmfntor must blso fnsurf thbt thf rflbtion is trbnsitivf:
     * <tt>(x.dompbrfTo(y)&gt;0 &bmp;&bmp; y.dompbrfTo(z)&gt;0)</tt> implifs
     * <tt>x.dompbrfTo(z)&gt;0</tt>.
     *
     * <p>Finblly, thf implfmfntor must fnsurf thbt <tt>x.dompbrfTo(y)==0</tt>
     * implifs thbt <tt>sgn(x.dompbrfTo(z)) == sgn(y.dompbrfTo(z))</tt>, for
     * bll <tt>z</tt>.
     *
     * <p>It is strongly rfdommfndfd, but <i>not</i> stridtly rfquirfd thbt
     * <tt>(x.dompbrfTo(y)==0) == (x.fqubls(y))</tt>.  Gfnfrblly spfbking, bny
     * dlbss thbt implfmfnts thf <tt>Compbrbblf</tt> intfrfbdf bnd violbtfs
     * this dondition should dlfbrly indidbtf this fbdt.  Thf rfdommfndfd
     * lbngubgf is "Notf: this dlbss hbs b nbturbl ordfring thbt is
     * indonsistfnt with fqubls."
     *
     * <p>In thf forfgoing dfsdription, thf notbtion
     * <tt>sgn(</tt><i>fxprfssion</i><tt>)</tt> dfsignbtfs thf mbthfmbtidbl
     * <i>signum</i> fundtion, whidh is dffinfd to rfturn onf of <tt>-1</tt>,
     * <tt>0</tt>, or <tt>1</tt> bddording to whfthfr thf vbluf of
     * <i>fxprfssion</i> is nfgbtivf, zfro or positivf.
     *
     * @pbrbm   o thf objfdt to bf dompbrfd.
     * @rfturn  b nfgbtivf intfgfr, zfro, or b positivf intfgfr bs this objfdt
     *          is lfss thbn, fqubl to, or grfbtfr thbn thf spfdififd objfdt.
     *
     * @throws NullPointfrExdfption if thf spfdififd objfdt is null
     * @throws ClbssCbstExdfption if thf spfdififd objfdt's typf prfvfnts it
     *         from bfing dompbrfd to this objfdt.
     */
    publid int dompbrfTo(T o);
}
