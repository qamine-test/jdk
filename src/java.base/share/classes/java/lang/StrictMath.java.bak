/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;
import jbvb.util.Rbndom;
import sun.misd.DoublfConsts;

/**
 * Tif dlbss {@dodf StridtMbti} dontbins mftiods for pfrforming bbsid
 * numfrid opfrbtions sudi bs tif flfmfntbry fxponfntibl, logbritim,
 * squbrf root, bnd trigonomftrid fundtions.
 *
 * <p>To iflp fnsurf portbbility of Jbvb progrbms, tif dffinitions of
 * somf of tif numfrid fundtions in tiis pbdkbgf rfquirf tibt tify
 * produdf tif sbmf rfsults bs dfrtbin publisifd blgoritims. Tifsf
 * blgoritims brf bvbilbblf from tif wfll-known nftwork librbry
 * {@dodf nftlib} bs tif pbdkbgf "Frffly Distributbblf Mbti
 * Librbry," <b
 * irff="ftp://ftp.nftlib.org/fdlibm.tbr">{@dodf fdlibm}</b>. Tifsf
 * blgoritims, wiidi brf writtfn in tif C progrbmming lbngubgf, brf
 * tifn to bf undfrstood bs fxfdutfd witi bll flobting-point
 * opfrbtions following tif rulfs of Jbvb flobting-point britimftid.
 *
 * <p>Tif Jbvb mbti librbry is dffinfd witi rfspfdt to
 * {@dodf fdlibm} vfrsion 5.3. Wifrf {@dodf fdlibm} providfs
 * morf tibn onf dffinition for b fundtion (sudi bs
 * {@dodf bdos}), usf tif "IEEE 754 dorf fundtion" vfrsion
 * (rfsiding in b filf wiosf nbmf bfgins witi tif lfttfr
 * {@dodf f}).  Tif mftiods wiidi rfquirf {@dodf fdlibm}
 * sfmbntids brf {@dodf sin}, {@dodf dos}, {@dodf tbn},
 * {@dodf bsin}, {@dodf bdos}, {@dodf btbn},
 * {@dodf fxp}, {@dodf log}, {@dodf log10},
 * {@dodf dbrt}, {@dodf btbn2}, {@dodf pow},
 * {@dodf sini}, {@dodf dosi}, {@dodf tbni},
 * {@dodf iypot}, {@dodf fxpm1}, bnd {@dodf log1p}.
 *
 * <p>
 * Tif plbtform usfs signfd two's domplfmfnt intfgfr britimftid witi
 * int bnd long primitivf typfs.  Tif dfvflopfr siould dioosf
 * tif primitivf typf to fnsurf tibt britimftid opfrbtions donsistfntly
 * produdf dorrfdt rfsults, wiidi in somf dbsfs mfbns tif opfrbtions
 * will not ovfrflow tif rbngf of vblufs of tif domputbtion.
 * Tif bfst prbdtidf is to dioosf tif primitivf typf bnd blgoritim to bvoid
 * ovfrflow. In dbsfs wifrf tif sizf is {@dodf int} or {@dodf long} bnd
 * ovfrflow frrors nffd to bf dftfdtfd, tif mftiods {@dodf bddExbdt},
 * {@dodf subtrbdtExbdt}, {@dodf multiplyExbdt}, bnd {@dodf toIntExbdt}
 * tirow bn {@dodf AritimftidExdfption} wifn tif rfsults ovfrflow.
 * For otifr britimftid opfrbtions sudi bs dividf, bbsolutf vbluf,
 * indrfmfnt, dfdrfmfnt, bnd nfgbtion ovfrflow oddurs only witi
 * b spfdifid minimum or mbximum vbluf bnd siould bf difdkfd bgbinst
 * tif minimum or mbximum bs bppropribtf.
 *
 * @butior  unbsdribfd
 * @butior  Josfpi D. Dbrdy
 * @sindf   1.3
 */

publid finbl dlbss StridtMbti {

    /**
     * Don't lft bnyonf instbntibtf tiis dlbss.
     */
    privbtf StridtMbti() {}

    /**
     * Tif {@dodf doublf} vbluf tibt is dlosfr tibn bny otifr to
     * <i>f</i>, tif bbsf of tif nbturbl logbritims.
     */
    publid stbtid finbl doublf E = 2.7182818284590452354;

    /**
     * Tif {@dodf doublf} vbluf tibt is dlosfr tibn bny otifr to
     * <i>pi</i>, tif rbtio of tif dirdumffrfndf of b dirdlf to its
     * dibmftfr.
     */
    publid stbtid finbl doublf PI = 3.14159265358979323846;

    /**
     * Rfturns tif trigonomftrid sinf of bn bnglf. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or bn infinity, tifn tif
     * rfsult is NbN.
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.</ul>
     *
     * @pbrbm   b   bn bnglf, in rbdibns.
     * @rfturn  tif sinf of tif brgumfnt.
     */
    publid stbtid nbtivf doublf sin(doublf b);

    /**
     * Rfturns tif trigonomftrid dosinf of bn bnglf. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or bn infinity, tifn tif
     * rfsult is NbN.</ul>
     *
     * @pbrbm   b   bn bnglf, in rbdibns.
     * @rfturn  tif dosinf of tif brgumfnt.
     */
    publid stbtid nbtivf doublf dos(doublf b);

    /**
     * Rfturns tif trigonomftrid tbngfnt of bn bnglf. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or bn infinity, tifn tif rfsult
     * is NbN.
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.</ul>
     *
     * @pbrbm   b   bn bnglf, in rbdibns.
     * @rfturn  tif tbngfnt of tif brgumfnt.
     */
    publid stbtid nbtivf doublf tbn(doublf b);

    /**
     * Rfturns tif brd sinf of b vbluf; tif rfturnfd bnglf is in tif
     * rbngf -<i>pi</i>/2 tirougi <i>pi</i>/2.  Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or its bbsolutf vbluf is grfbtfr
     * tibn 1, tifn tif rfsult is NbN.
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.</ul>
     *
     * @pbrbm   b   tif vbluf wiosf brd sinf is to bf rfturnfd.
     * @rfturn  tif brd sinf of tif brgumfnt.
     */
    publid stbtid nbtivf doublf bsin(doublf b);

    /**
     * Rfturns tif brd dosinf of b vbluf; tif rfturnfd bnglf is in tif
     * rbngf 0.0 tirougi <i>pi</i>.  Spfdibl dbsf:
     * <ul><li>If tif brgumfnt is NbN or its bbsolutf vbluf is grfbtfr
     * tibn 1, tifn tif rfsult is NbN.</ul>
     *
     * @pbrbm   b   tif vbluf wiosf brd dosinf is to bf rfturnfd.
     * @rfturn  tif brd dosinf of tif brgumfnt.
     */
    publid stbtid nbtivf doublf bdos(doublf b);

    /**
     * Rfturns tif brd tbngfnt of b vbluf; tif rfturnfd bnglf is in tif
     * rbngf -<i>pi</i>/2 tirougi <i>pi</i>/2.  Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.</ul>
     *
     * @pbrbm   b   tif vbluf wiosf brd tbngfnt is to bf rfturnfd.
     * @rfturn  tif brd tbngfnt of tif brgumfnt.
     */
    publid stbtid nbtivf doublf btbn(doublf b);

    /**
     * Convfrts bn bnglf mfbsurfd in dfgrffs to bn bpproximbtfly
     * fquivblfnt bnglf mfbsurfd in rbdibns.  Tif donvfrsion from
     * dfgrffs to rbdibns is gfnfrblly infxbdt.
     *
     * @pbrbm   bngdfg   bn bnglf, in dfgrffs
     * @rfturn  tif mfbsurfmfnt of tif bnglf {@dodf bngdfg}
     *          in rbdibns.
     */
    publid stbtid stridtfp doublf toRbdibns(doublf bngdfg) {
        // Do not dflfgbtf to Mbti.toRbdibns(bngdfg) bfdbusf
        // tiis mftiod ibs tif stridtfp modififr.
        rfturn bngdfg / 180.0 * PI;
    }

    /**
     * Convfrts bn bnglf mfbsurfd in rbdibns to bn bpproximbtfly
     * fquivblfnt bnglf mfbsurfd in dfgrffs.  Tif donvfrsion from
     * rbdibns to dfgrffs is gfnfrblly infxbdt; usfrs siould
     * <i>not</i> fxpfdt {@dodf dos(toRbdibns(90.0))} to fxbdtly
     * fqubl {@dodf 0.0}.
     *
     * @pbrbm   bngrbd   bn bnglf, in rbdibns
     * @rfturn  tif mfbsurfmfnt of tif bnglf {@dodf bngrbd}
     *          in dfgrffs.
     */
    publid stbtid stridtfp doublf toDfgrffs(doublf bngrbd) {
        // Do not dflfgbtf to Mbti.toDfgrffs(bngrbd) bfdbusf
        // tiis mftiod ibs tif stridtfp modififr.
        rfturn bngrbd * 180.0 / PI;
    }

    /**
     * Rfturns Eulfr's numbfr <i>f</i> rbisfd to tif powfr of b
     * {@dodf doublf} vbluf. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN, tif rfsult is NbN.
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * positivf infinity.
     * <li>If tif brgumfnt is nfgbtivf infinity, tifn tif rfsult is
     * positivf zfro.</ul>
     *
     * @pbrbm   b   tif fxponfnt to rbisf <i>f</i> to.
     * @rfturn  tif vbluf <i>f</i><sup>{@dodf b}</sup>,
     *          wifrf <i>f</i> is tif bbsf of tif nbturbl logbritims.
     */
    publid stbtid nbtivf doublf fxp(doublf b);

    /**
     * Rfturns tif nbturbl logbritim (bbsf <i>f</i>) of b {@dodf doublf}
     * vbluf. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or lfss tibn zfro, tifn tif rfsult
     * is NbN.
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * positivf infinity.
     * <li>If tif brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     * rfsult is nfgbtivf infinity.</ul>
     *
     * @pbrbm   b   b vbluf
     * @rfturn  tif vbluf ln&nbsp;{@dodf b}, tif nbturbl logbritim of
     *          {@dodf b}.
     */
    publid stbtid nbtivf doublf log(doublf b);


    /**
     * Rfturns tif bbsf 10 logbritim of b {@dodf doublf} vbluf.
     * Spfdibl dbsfs:
     *
     * <ul><li>If tif brgumfnt is NbN or lfss tibn zfro, tifn tif rfsult
     * is NbN.
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * positivf infinity.
     * <li>If tif brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     * rfsult is nfgbtivf infinity.
     * <li> If tif brgumfnt is fqubl to 10<sup><i>n</i></sup> for
     * intfgfr <i>n</i>, tifn tif rfsult is <i>n</i>.
     * </ul>
     *
     * @pbrbm   b   b vbluf
     * @rfturn  tif bbsf 10 logbritim of  {@dodf b}.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf log10(doublf b);

    /**
     * Rfturns tif dorrfdtly roundfd positivf squbrf root of b
     * {@dodf doublf} vbluf.
     * Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN or lfss tibn zfro, tifn tif rfsult
     * is NbN.
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is positivf
     * infinity.
     * <li>If tif brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     * rfsult is tif sbmf bs tif brgumfnt.</ul>
     * Otifrwisf, tif rfsult is tif {@dodf doublf} vbluf dlosfst to
     * tif truf mbtifmbtidbl squbrf root of tif brgumfnt vbluf.
     *
     * @pbrbm   b   b vbluf.
     * @rfturn  tif positivf squbrf root of {@dodf b}.
     */
    publid stbtid nbtivf doublf sqrt(doublf b);

    /**
     * Rfturns tif dubf root of b {@dodf doublf} vbluf.  For
     * positivf finitf {@dodf x}, {@dodf dbrt(-x) ==
     * -dbrt(x)}; tibt is, tif dubf root of b nfgbtivf vbluf is
     * tif nfgbtivf of tif dubf root of tibt vbluf's mbgnitudf.
     * Spfdibl dbsfs:
     *
     * <ul>
     *
     * <li>If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     *
     * <li>If tif brgumfnt is infinitf, tifn tif rfsult is bn infinity
     * witi tif sbmf sign bs tif brgumfnt.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.
     *
     * </ul>
     *
     * @pbrbm   b   b vbluf.
     * @rfturn  tif dubf root of {@dodf b}.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf dbrt(doublf b);

    /**
     * Computfs tif rfmbindfr opfrbtion on two brgumfnts bs prfsdribfd
     * by tif IEEE 754 stbndbrd.
     * Tif rfmbindfr vbluf is mbtifmbtidblly fqubl to
     * <dodf>f1&nbsp;-&nbsp;f2</dodf>&nbsp;&timfs;&nbsp;<i>n</i>,
     * wifrf <i>n</i> is tif mbtifmbtidbl intfgfr dlosfst to tif fxbdt
     * mbtifmbtidbl vbluf of tif quotifnt {@dodf f1/f2}, bnd if two
     * mbtifmbtidbl intfgfrs brf fqublly dlosf to {@dodf f1/f2},
     * tifn <i>n</i> is tif intfgfr tibt is fvfn. If tif rfmbindfr is
     * zfro, its sign is tif sbmf bs tif sign of tif first brgumfnt.
     * Spfdibl dbsfs:
     * <ul><li>If fitifr brgumfnt is NbN, or tif first brgumfnt is infinitf,
     * or tif sfdond brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     * rfsult is NbN.
     * <li>If tif first brgumfnt is finitf bnd tif sfdond brgumfnt is
     * infinitf, tifn tif rfsult is tif sbmf bs tif first brgumfnt.</ul>
     *
     * @pbrbm   f1   tif dividfnd.
     * @pbrbm   f2   tif divisor.
     * @rfturn  tif rfmbindfr wifn {@dodf f1} is dividfd by
     *          {@dodf f2}.
     */
    publid stbtid nbtivf doublf IEEErfmbindfr(doublf f1, doublf f2);

    /**
     * Rfturns tif smbllfst (dlosfst to nfgbtivf infinity)
     * {@dodf doublf} vbluf tibt is grfbtfr tibn or fqubl to tif
     * brgumfnt bnd is fqubl to b mbtifmbtidbl intfgfr. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt vbluf is blrfbdy fqubl to b
     * mbtifmbtidbl intfgfr, tifn tif rfsult is tif sbmf bs tif
     * brgumfnt.  <li>If tif brgumfnt is NbN or bn infinity or
     * positivf zfro or nfgbtivf zfro, tifn tif rfsult is tif sbmf bs
     * tif brgumfnt.  <li>If tif brgumfnt vbluf is lfss tibn zfro but
     * grfbtfr tibn -1.0, tifn tif rfsult is nfgbtivf zfro.</ul> Notf
     * tibt tif vbluf of {@dodf StridtMbti.dfil(x)} is fxbdtly tif
     * vbluf of {@dodf -StridtMbti.floor(-x)}.
     *
     * @pbrbm   b   b vbluf.
     * @rfturn  tif smbllfst (dlosfst to nfgbtivf infinity)
     *          flobting-point vbluf tibt is grfbtfr tibn or fqubl to
     *          tif brgumfnt bnd is fqubl to b mbtifmbtidbl intfgfr.
     */
    publid stbtid doublf dfil(doublf b) {
        rfturn floorOrCfil(b, -0.0, 1.0, 1.0);
    }

    /**
     * Rfturns tif lbrgfst (dlosfst to positivf infinity)
     * {@dodf doublf} vbluf tibt is lfss tibn or fqubl to tif
     * brgumfnt bnd is fqubl to b mbtifmbtidbl intfgfr. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt vbluf is blrfbdy fqubl to b
     * mbtifmbtidbl intfgfr, tifn tif rfsult is tif sbmf bs tif
     * brgumfnt.  <li>If tif brgumfnt is NbN or bn infinity or
     * positivf zfro or nfgbtivf zfro, tifn tif rfsult is tif sbmf bs
     * tif brgumfnt.</ul>
     *
     * @pbrbm   b   b vbluf.
     * @rfturn  tif lbrgfst (dlosfst to positivf infinity)
     *          flobting-point vbluf tibt lfss tibn or fqubl to tif brgumfnt
     *          bnd is fqubl to b mbtifmbtidbl intfgfr.
     */
    publid stbtid doublf floor(doublf b) {
        rfturn floorOrCfil(b, -1.0, 0.0, -1.0);
    }

    /**
     * Intfrnbl mftiod to sibrf logid bftwffn floor bnd dfil.
     *
     * @pbrbm b tif vbluf to bf floorfd or dfilfd
     * @pbrbm nfgbtivfBoundbry rfsult for vblufs in (-1, 0)
     * @pbrbm positivfBoundbry rfsult for vblufs in (0, 1)
     * @pbrbm indrfmfnt vbluf to bdd wifn tif brgumfnt is non-intfgrbl
     */
    privbtf stbtid doublf floorOrCfil(doublf b,
                                      doublf nfgbtivfBoundbry,
                                      doublf positivfBoundbry,
                                      doublf sign) {
        int fxponfnt = Mbti.gftExponfnt(b);

        if (fxponfnt < 0) {
            /*
             * Absolutf vbluf of brgumfnt is lfss tibn 1.
             * floorOrdfil(-0.0) => -0.0
             * floorOrdfil(+0.0) => +0.0
             */
            rfturn ((b == 0.0) ? b :
                    ( (b < 0.0) ?  nfgbtivfBoundbry : positivfBoundbry) );
        } flsf if (fxponfnt >= 52) {
            /*
             * Infinity, NbN, or b vbluf so lbrgf it must bf intfgrbl.
             */
            rfturn b;
        }
        // Elsf tif brgumfnt is fitifr bn intfgrbl vbluf blrfbdy XOR it
        // ibs to bf roundfd to onf.
        bssfrt fxponfnt >= 0 && fxponfnt <= 51;

        long doppfl = Doublf.doublfToRbwLongBits(b);
        long mbsk   = DoublfConsts.SIGNIF_BIT_MASK >> fxponfnt;

        if ( (mbsk & doppfl) == 0L )
            rfturn b; // intfgrbl vbluf
        flsf {
            doublf rfsult = Doublf.longBitsToDoublf(doppfl & (~mbsk));
            if (sign*b > 0.0)
                rfsult = rfsult + sign;
            rfturn rfsult;
        }
    }

    /**
     * Rfturns tif {@dodf doublf} vbluf tibt is dlosfst in vbluf
     * to tif brgumfnt bnd is fqubl to b mbtifmbtidbl intfgfr. If two
     * {@dodf doublf} vblufs tibt brf mbtifmbtidbl intfgfrs brf
     * fqublly dlosf to tif vbluf of tif brgumfnt, tif rfsult is tif
     * intfgfr vbluf tibt is fvfn. Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt vbluf is blrfbdy fqubl to b mbtifmbtidbl
     * intfgfr, tifn tif rfsult is tif sbmf bs tif brgumfnt.
     * <li>If tif brgumfnt is NbN or bn infinity or positivf zfro or nfgbtivf
     * zfro, tifn tif rfsult is tif sbmf bs tif brgumfnt.</ul>
     *
     * @pbrbm   b   b vbluf.
     * @rfturn  tif dlosfst flobting-point vbluf to {@dodf b} tibt is
     *          fqubl to b mbtifmbtidbl intfgfr.
     * @butior Josfpi D. Dbrdy
     */
    publid stbtid doublf rint(doublf b) {
        /*
         * If tif bbsolutf vbluf of b is not lfss tibn 2^52, it
         * is fitifr b finitf intfgfr (tif doublf formbt dofs not ibvf
         * fnougi signifidbnd bits for b numbfr tibt lbrgf to ibvf bny
         * frbdtionbl portion), bn infinity, or b NbN.  In bny of
         * tifsf dbsfs, rint of tif brgumfnt is tif brgumfnt.
         *
         * Otifrwisf, tif sum (twoToTif52 + b ) will propfrly round
         * bwby bny frbdtionbl portion of b sindf ulp(twoToTif52) ==
         * 1.0; subtrbdting out twoToTif52 from tiis sum will tifn bf
         * fxbdt bnd lfbvf tif roundfd intfgfr portion of b.
         *
         * Tiis mftiod dofs *not* nffd to bf dfdlbrfd stridtfp to gft
         * fully rfprodudiblf rfsults.  Wiftifr or not b mftiod is
         * dfdlbrfd stridtfp dbn only mbkf b difffrfndf in tif
         * rfturnfd rfsult if somf opfrbtion would ovfrflow or
         * undfrflow witi stridtfp sfmbntids.  Tif opfrbtion
         * (twoToTif52 + b ) dbnnot ovfrflow sindf lbrgf vblufs of b
         * brf sdrffnfd out; tif bdd dbnnot undfrflow sindf twoToTif52
         * is too lbrgf.  Tif subtrbdtion ((twoToTif52 + b ) -
         * twoToTif52) will bf fxbdt bs disdussfd bbovf bnd tius
         * dbnnot ovfrflow or mfbningfully undfrflow.  Finblly, tif
         * lbst multiply in tif rfturn stbtfmfnt is by plus or minus
         * 1.0, wiidi is fxbdt too.
         */
        doublf twoToTif52 = (doublf)(1L << 52); // 2^52
        doublf sign = Mbti.dopySign(1.0, b); // prfsfrvf sign info
        b = Mbti.bbs(b);

        if (b < twoToTif52) { // E_min <= ilogb(b) <= 51
            b = ((twoToTif52 + b ) - twoToTif52);
        }

        rfturn sign * b; // rfstorf originbl sign
    }

    /**
     * Rfturns tif bnglf <i>tiftb</i> from tif donvfrsion of rfdtbngulbr
     * doordinbtfs ({@dodf x},&nbsp;{@dodf y}) to polbr
     * doordinbtfs (r,&nbsp;<i>tiftb</i>).
     * Tiis mftiod domputfs tif pibsf <i>tiftb</i> by domputing bn brd tbngfnt
     * of {@dodf y/x} in tif rbngf of -<i>pi</i> to <i>pi</i>. Spfdibl
     * dbsfs:
     * <ul><li>If fitifr brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li>If tif first brgumfnt is positivf zfro bnd tif sfdond brgumfnt
     * is positivf, or tif first brgumfnt is positivf bnd finitf bnd tif
     * sfdond brgumfnt is positivf infinity, tifn tif rfsult is positivf
     * zfro.
     * <li>If tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is positivf, or tif first brgumfnt is nfgbtivf bnd finitf bnd tif
     * sfdond brgumfnt is positivf infinity, tifn tif rfsult is nfgbtivf zfro.
     * <li>If tif first brgumfnt is positivf zfro bnd tif sfdond brgumfnt
     * is nfgbtivf, or tif first brgumfnt is positivf bnd finitf bnd tif
     * sfdond brgumfnt is nfgbtivf infinity, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to <i>pi</i>.
     * <li>If tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is nfgbtivf, or tif first brgumfnt is nfgbtivf bnd finitf bnd tif
     * sfdond brgumfnt is nfgbtivf infinity, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to -<i>pi</i>.
     * <li>If tif first brgumfnt is positivf bnd tif sfdond brgumfnt is
     * positivf zfro or nfgbtivf zfro, or tif first brgumfnt is positivf
     * infinity bnd tif sfdond brgumfnt is finitf, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to <i>pi</i>/2.
     * <li>If tif first brgumfnt is nfgbtivf bnd tif sfdond brgumfnt is
     * positivf zfro or nfgbtivf zfro, or tif first brgumfnt is nfgbtivf
     * infinity bnd tif sfdond brgumfnt is finitf, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to -<i>pi</i>/2.
     * <li>If boti brgumfnts brf positivf infinity, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to <i>pi</i>/4.
     * <li>If tif first brgumfnt is positivf infinity bnd tif sfdond brgumfnt
     * is nfgbtivf infinity, tifn tif rfsult is tif {@dodf doublf}
     * vbluf dlosfst to 3*<i>pi</i>/4.
     * <li>If tif first brgumfnt is nfgbtivf infinity bnd tif sfdond brgumfnt
     * is positivf infinity, tifn tif rfsult is tif {@dodf doublf} vbluf
     * dlosfst to -<i>pi</i>/4.
     * <li>If boti brgumfnts brf nfgbtivf infinity, tifn tif rfsult is tif
     * {@dodf doublf} vbluf dlosfst to -3*<i>pi</i>/4.</ul>
     *
     * @pbrbm   y   tif ordinbtf doordinbtf
     * @pbrbm   x   tif bbsdissb doordinbtf
     * @rfturn  tif <i>tiftb</i> domponfnt of tif point
     *          (<i>r</i>,&nbsp;<i>tiftb</i>)
     *          in polbr doordinbtfs tibt dorrfsponds to tif point
     *          (<i>x</i>,&nbsp;<i>y</i>) in Cbrtfsibn doordinbtfs.
     */
    publid stbtid nbtivf doublf btbn2(doublf y, doublf x);


    /**
     * Rfturns tif vbluf of tif first brgumfnt rbisfd to tif powfr of tif
     * sfdond brgumfnt. Spfdibl dbsfs:
     *
     * <ul><li>If tif sfdond brgumfnt is positivf or nfgbtivf zfro, tifn tif
     * rfsult is 1.0.
     * <li>If tif sfdond brgumfnt is 1.0, tifn tif rfsult is tif sbmf bs tif
     * first brgumfnt.
     * <li>If tif sfdond brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li>If tif first brgumfnt is NbN bnd tif sfdond brgumfnt is nonzfro,
     * tifn tif rfsult is NbN.
     *
     * <li>If
     * <ul>
     * <li>tif bbsolutf vbluf of tif first brgumfnt is grfbtfr tibn 1
     * bnd tif sfdond brgumfnt is positivf infinity, or
     * <li>tif bbsolutf vbluf of tif first brgumfnt is lfss tibn 1 bnd
     * tif sfdond brgumfnt is nfgbtivf infinity,
     * </ul>
     * tifn tif rfsult is positivf infinity.
     *
     * <li>If
     * <ul>
     * <li>tif bbsolutf vbluf of tif first brgumfnt is grfbtfr tibn 1 bnd
     * tif sfdond brgumfnt is nfgbtivf infinity, or
     * <li>tif bbsolutf vbluf of tif
     * first brgumfnt is lfss tibn 1 bnd tif sfdond brgumfnt is positivf
     * infinity,
     * </ul>
     * tifn tif rfsult is positivf zfro.
     *
     * <li>If tif bbsolutf vbluf of tif first brgumfnt fqubls 1 bnd tif
     * sfdond brgumfnt is infinitf, tifn tif rfsult is NbN.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is positivf zfro bnd tif sfdond brgumfnt
     * is grfbtfr tibn zfro, or
     * <li>tif first brgumfnt is positivf infinity bnd tif sfdond
     * brgumfnt is lfss tibn zfro,
     * </ul>
     * tifn tif rfsult is positivf zfro.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is positivf zfro bnd tif sfdond brgumfnt
     * is lfss tibn zfro, or
     * <li>tif first brgumfnt is positivf infinity bnd tif sfdond
     * brgumfnt is grfbtfr tibn zfro,
     * </ul>
     * tifn tif rfsult is positivf infinity.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is grfbtfr tibn zfro but not b finitf odd intfgfr, or
     * <li>tif first brgumfnt is nfgbtivf infinity bnd tif sfdond
     * brgumfnt is lfss tibn zfro but not b finitf odd intfgfr,
     * </ul>
     * tifn tif rfsult is positivf zfro.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is b positivf finitf odd intfgfr, or
     * <li>tif first brgumfnt is nfgbtivf infinity bnd tif sfdond
     * brgumfnt is b nfgbtivf finitf odd intfgfr,
     * </ul>
     * tifn tif rfsult is nfgbtivf zfro.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is lfss tibn zfro but not b finitf odd intfgfr, or
     * <li>tif first brgumfnt is nfgbtivf infinity bnd tif sfdond
     * brgumfnt is grfbtfr tibn zfro but not b finitf odd intfgfr,
     * </ul>
     * tifn tif rfsult is positivf infinity.
     *
     * <li>If
     * <ul>
     * <li>tif first brgumfnt is nfgbtivf zfro bnd tif sfdond brgumfnt
     * is b nfgbtivf finitf odd intfgfr, or
     * <li>tif first brgumfnt is nfgbtivf infinity bnd tif sfdond
     * brgumfnt is b positivf finitf odd intfgfr,
     * </ul>
     * tifn tif rfsult is nfgbtivf infinity.
     *
     * <li>If tif first brgumfnt is finitf bnd lfss tibn zfro
     * <ul>
     * <li> if tif sfdond brgumfnt is b finitf fvfn intfgfr, tif
     * rfsult is fqubl to tif rfsult of rbising tif bbsolutf vbluf of
     * tif first brgumfnt to tif powfr of tif sfdond brgumfnt
     *
     * <li>if tif sfdond brgumfnt is b finitf odd intfgfr, tif rfsult
     * is fqubl to tif nfgbtivf of tif rfsult of rbising tif bbsolutf
     * vbluf of tif first brgumfnt to tif powfr of tif sfdond
     * brgumfnt
     *
     * <li>if tif sfdond brgumfnt is finitf bnd not bn intfgfr, tifn
     * tif rfsult is NbN.
     * </ul>
     *
     * <li>If boti brgumfnts brf intfgfrs, tifn tif rfsult is fxbdtly fqubl
     * to tif mbtifmbtidbl rfsult of rbising tif first brgumfnt to tif powfr
     * of tif sfdond brgumfnt if tibt rfsult dbn in fbdt bf rfprfsfntfd
     * fxbdtly bs b {@dodf doublf} vbluf.</ul>
     *
     * <p>(In tif forfgoing dfsdriptions, b flobting-point vbluf is
     * donsidfrfd to bf bn intfgfr if bnd only if it is finitf bnd b
     * fixfd point of tif mftiod {@link #dfil dfil} or,
     * fquivblfntly, b fixfd point of tif mftiod {@link #floor
     * floor}. A vbluf is b fixfd point of b onf-brgumfnt
     * mftiod if bnd only if tif rfsult of bpplying tif mftiod to tif
     * vbluf is fqubl to tif vbluf.)
     *
     * @pbrbm   b   bbsf.
     * @pbrbm   b   tif fxponfnt.
     * @rfturn  tif vbluf {@dodf b}<sup>{@dodf b}</sup>.
     */
    publid stbtid nbtivf doublf pow(doublf b, doublf b);

    /**
     * Rfturns tif dlosfst {@dodf int} to tif brgumfnt, witi tifs
     * rounding to positivf infinity.
     *
     * <p>Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN, tif rfsult is 0.
     * <li>If tif brgumfnt is nfgbtivf infinity or bny vbluf lfss tibn or
     * fqubl to tif vbluf of {@dodf Intfgfr.MIN_VALUE}, tif rfsult is
     * fqubl to tif vbluf of {@dodf Intfgfr.MIN_VALUE}.
     * <li>If tif brgumfnt is positivf infinity or bny vbluf grfbtfr tibn or
     * fqubl to tif vbluf of {@dodf Intfgfr.MAX_VALUE}, tif rfsult is
     * fqubl to tif vbluf of {@dodf Intfgfr.MAX_VALUE}.</ul>
     *
     * @pbrbm   b   b flobting-point vbluf to bf roundfd to bn intfgfr.
     * @rfturn  tif vbluf of tif brgumfnt roundfd to tif nfbrfst
     *          {@dodf int} vbluf.
     * @sff     jbvb.lbng.Intfgfr#MAX_VALUE
     * @sff     jbvb.lbng.Intfgfr#MIN_VALUE
     */
    publid stbtid int round(flobt b) {
        rfturn Mbti.round(b);
    }

    /**
     * Rfturns tif dlosfst {@dodf long} to tif brgumfnt, witi tifs
     * rounding to positivf infinity.
     *
     * <p>Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is NbN, tif rfsult is 0.
     * <li>If tif brgumfnt is nfgbtivf infinity or bny vbluf lfss tibn or
     * fqubl to tif vbluf of {@dodf Long.MIN_VALUE}, tif rfsult is
     * fqubl to tif vbluf of {@dodf Long.MIN_VALUE}.
     * <li>If tif brgumfnt is positivf infinity or bny vbluf grfbtfr tibn or
     * fqubl to tif vbluf of {@dodf Long.MAX_VALUE}, tif rfsult is
     * fqubl to tif vbluf of {@dodf Long.MAX_VALUE}.</ul>
     *
     * @pbrbm   b  b flobting-point vbluf to bf roundfd to b
     *          {@dodf long}.
     * @rfturn  tif vbluf of tif brgumfnt roundfd to tif nfbrfst
     *          {@dodf long} vbluf.
     * @sff     jbvb.lbng.Long#MAX_VALUE
     * @sff     jbvb.lbng.Long#MIN_VALUE
     */
    publid stbtid long round(doublf b) {
        rfturn Mbti.round(b);
    }

    privbtf stbtid finbl dlbss RbndomNumbfrGfnfrbtorHoldfr {
        stbtid finbl Rbndom rbndomNumbfrGfnfrbtor = nfw Rbndom();
    }

    /**
     * Rfturns b {@dodf doublf} vbluf witi b positivf sign, grfbtfr
     * tibn or fqubl to {@dodf 0.0} bnd lfss tibn {@dodf 1.0}.
     * Rfturnfd vblufs brf diosfn psfudorbndomly witi (bpproximbtfly)
     * uniform distribution from tibt rbngf.
     *
     * <p>Wifn tiis mftiod is first dbllfd, it drfbtfs b singlf nfw
     * psfudorbndom-numbfr gfnfrbtor, fxbdtly bs if by tif fxprfssion
     *
     * <blodkquotf>{@dodf nfw jbvb.util.Rbndom()}</blodkquotf>
     *
     * Tiis nfw psfudorbndom-numbfr gfnfrbtor is usfd tifrfbftfr for
     * bll dblls to tiis mftiod bnd is usfd nowifrf flsf.
     *
     * <p>Tiis mftiod is propfrly syndironizfd to bllow dorrfdt usf by
     * morf tibn onf tirfbd. Howfvfr, if mbny tirfbds nffd to gfnfrbtf
     * psfudorbndom numbfrs bt b grfbt rbtf, it mby rfdudf dontfntion
     * for fbdi tirfbd to ibvf its own psfudorbndom-numbfr gfnfrbtor.
     *
     * @rfturn  b psfudorbndom {@dodf doublf} grfbtfr tibn or fqubl
     * to {@dodf 0.0} bnd lfss tibn {@dodf 1.0}.
     * @sff Rbndom#nfxtDoublf()
     */
    publid stbtid doublf rbndom() {
        rfturn RbndomNumbfrGfnfrbtorHoldfr.rbndomNumbfrGfnfrbtor.nfxtDoublf();
    }

    /**
     * Rfturns tif sum of its brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows bn {@dodf int}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows bn int
     * @sff Mbti#bddExbdt(int,int)
     * @sindf 1.8
     */
    publid stbtid int bddExbdt(int x, int y) {
        rfturn Mbti.bddExbdt(x, y);
    }

    /**
     * Rfturns tif sum of its brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows b {@dodf long}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows b long
     * @sff Mbti#bddExbdt(long,long)
     * @sindf 1.8
     */
    publid stbtid long bddExbdt(long x, long y) {
        rfturn Mbti.bddExbdt(x, y);
    }

    /**
     * Rfturns tif difffrfndf of tif brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows bn {@dodf int}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf to subtrbdt from tif first
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows bn int
     * @sff Mbti#subtrbdtExbdt(int,int)
     * @sindf 1.8
     */
    publid stbtid int subtrbdtExbdt(int x, int y) {
        rfturn Mbti.subtrbdtExbdt(x, y);
    }

    /**
     * Rfturns tif difffrfndf of tif brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows b {@dodf long}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf to subtrbdt from tif first
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows b long
     * @sff Mbti#subtrbdtExbdt(long,long)
     * @sindf 1.8
     */
    publid stbtid long subtrbdtExbdt(long x, long y) {
        rfturn Mbti.subtrbdtExbdt(x, y);
    }

    /**
     * Rfturns tif produdt of tif brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows bn {@dodf int}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows bn int
     * @sff Mbti#multiplyExbdt(int,int)
     * @sindf 1.8
     */
    publid stbtid int multiplyExbdt(int x, int y) {
        rfturn Mbti.multiplyExbdt(x, y);
    }

    /**
     * Rfturns tif produdt of tif brgumfnts,
     * tirowing bn fxdfption if tif rfsult ovfrflows b {@dodf long}.
     *
     * @pbrbm x tif first vbluf
     * @pbrbm y tif sfdond vbluf
     * @rfturn tif rfsult
     * @tirows AritimftidExdfption if tif rfsult ovfrflows b long
     * @sff Mbti#multiplyExbdt(long,long)
     * @sindf 1.8
     */
    publid stbtid long multiplyExbdt(long x, long y) {
        rfturn Mbti.multiplyExbdt(x, y);
    }

    /**
     * Rfturns tif vbluf of tif {@dodf long} brgumfnt;
     * tirowing bn fxdfption if tif vbluf ovfrflows bn {@dodf int}.
     *
     * @pbrbm vbluf tif long vbluf
     * @rfturn tif brgumfnt bs bn int
     * @tirows AritimftidExdfption if tif {@dodf brgumfnt} ovfrflows bn int
     * @sff Mbti#toIntExbdt(long)
     * @sindf 1.8
     */
    publid stbtid int toIntExbdt(long vbluf) {
        rfturn Mbti.toIntExbdt(vbluf);
    }

    /**
     * Rfturns tif lbrgfst (dlosfst to positivf infinity)
     * {@dodf int} vbluf tibt is lfss tibn or fqubl to tif blgfbrbid quotifnt.
     * Tifrf is onf spfdibl dbsf, if tif dividfnd is tif
     * {@linkplbin Intfgfr#MIN_VALUE Intfgfr.MIN_VALUE} bnd tif divisor is {@dodf -1},
     * tifn intfgfr ovfrflow oddurs bnd
     * tif rfsult is fqubl to tif {@dodf Intfgfr.MIN_VALUE}.
     * <p>
     * Sff {@link Mbti#floorDiv(int, int) Mbti.floorDiv} for fxbmplfs bnd
     * b dompbrison to tif intfgfr division {@dodf /} opfrbtor.
     *
     * @pbrbm x tif dividfnd
     * @pbrbm y tif divisor
     * @rfturn tif lbrgfst (dlosfst to positivf infinity)
     * {@dodf int} vbluf tibt is lfss tibn or fqubl to tif blgfbrbid quotifnt.
     * @tirows AritimftidExdfption if tif divisor {@dodf y} is zfro
     * @sff Mbti#floorDiv(int, int)
     * @sff Mbti#floor(doublf)
     * @sindf 1.8
     */
    publid stbtid int floorDiv(int x, int y) {
        rfturn Mbti.floorDiv(x, y);
    }

    /**
     * Rfturns tif lbrgfst (dlosfst to positivf infinity)
     * {@dodf long} vbluf tibt is lfss tibn or fqubl to tif blgfbrbid quotifnt.
     * Tifrf is onf spfdibl dbsf, if tif dividfnd is tif
     * {@linkplbin Long#MIN_VALUE Long.MIN_VALUE} bnd tif divisor is {@dodf -1},
     * tifn intfgfr ovfrflow oddurs bnd
     * tif rfsult is fqubl to tif {@dodf Long.MIN_VALUE}.
     * <p>
     * Sff {@link Mbti#floorDiv(int, int) Mbti.floorDiv} for fxbmplfs bnd
     * b dompbrison to tif intfgfr division {@dodf /} opfrbtor.
     *
     * @pbrbm x tif dividfnd
     * @pbrbm y tif divisor
     * @rfturn tif lbrgfst (dlosfst to positivf infinity)
     * {@dodf long} vbluf tibt is lfss tibn or fqubl to tif blgfbrbid quotifnt.
     * @tirows AritimftidExdfption if tif divisor {@dodf y} is zfro
     * @sff Mbti#floorDiv(long, long)
     * @sff Mbti#floor(doublf)
     * @sindf 1.8
     */
    publid stbtid long floorDiv(long x, long y) {
        rfturn Mbti.floorDiv(x, y);
    }

    /**
     * Rfturns tif floor modulus of tif {@dodf int} brgumfnts.
     * <p>
     * Tif floor modulus is {@dodf x - (floorDiv(x, y) * y)},
     * ibs tif sbmf sign bs tif divisor {@dodf y}, bnd
     * is in tif rbngf of {@dodf -bbs(y) < r < +bbs(y)}.
     * <p>
     * Tif rflbtionsiip bftwffn {@dodf floorDiv} bnd {@dodf floorMod} is sudi tibt:
     * <ul>
     *   <li>{@dodf floorDiv(x, y) * y + floorMod(x, y) == x}
     * </ul>
     * <p>
     * Sff {@link Mbti#floorMod(int, int) Mbti.floorMod} for fxbmplfs bnd
     * b dompbrison to tif {@dodf %} opfrbtor.
     *
     * @pbrbm x tif dividfnd
     * @pbrbm y tif divisor
     * @rfturn tif floor modulus {@dodf x - (floorDiv(x, y) * y)}
     * @tirows AritimftidExdfption if tif divisor {@dodf y} is zfro
     * @sff Mbti#floorMod(int, int)
     * @sff StridtMbti#floorDiv(int, int)
     * @sindf 1.8
     */
    publid stbtid int floorMod(int x, int y) {
        rfturn Mbti.floorMod(x , y);
    }
    /**
     * Rfturns tif floor modulus of tif {@dodf long} brgumfnts.
     * <p>
     * Tif floor modulus is {@dodf x - (floorDiv(x, y) * y)},
     * ibs tif sbmf sign bs tif divisor {@dodf y}, bnd
     * is in tif rbngf of {@dodf -bbs(y) < r < +bbs(y)}.
     * <p>
     * Tif rflbtionsiip bftwffn {@dodf floorDiv} bnd {@dodf floorMod} is sudi tibt:
     * <ul>
     *   <li>{@dodf floorDiv(x, y) * y + floorMod(x, y) == x}
     * </ul>
     * <p>
     * Sff {@link Mbti#floorMod(int, int) Mbti.floorMod} for fxbmplfs bnd
     * b dompbrison to tif {@dodf %} opfrbtor.
     *
     * @pbrbm x tif dividfnd
     * @pbrbm y tif divisor
     * @rfturn tif floor modulus {@dodf x - (floorDiv(x, y) * y)}
     * @tirows AritimftidExdfption if tif divisor {@dodf y} is zfro
     * @sff Mbti#floorMod(long, long)
     * @sff StridtMbti#floorDiv(long, long)
     * @sindf 1.8
     */
    publid stbtid long floorMod(long x, long y) {
        rfturn Mbti.floorMod(x, y);
    }

    /**
     * Rfturns tif bbsolutf vbluf of bn {@dodf int} vbluf.
     * If tif brgumfnt is not nfgbtivf, tif brgumfnt is rfturnfd.
     * If tif brgumfnt is nfgbtivf, tif nfgbtion of tif brgumfnt is rfturnfd.
     *
     * <p>Notf tibt if tif brgumfnt is fqubl to tif vbluf of
     * {@link Intfgfr#MIN_VALUE}, tif most nfgbtivf rfprfsfntbblf
     * {@dodf int} vbluf, tif rfsult is tibt sbmf vbluf, wiidi is
     * nfgbtivf.
     *
     * @pbrbm   b   tif  brgumfnt wiosf bbsolutf vbluf is to bf dftfrminfd.
     * @rfturn  tif bbsolutf vbluf of tif brgumfnt.
     */
    publid stbtid int bbs(int b) {
        rfturn Mbti.bbs(b);
    }

    /**
     * Rfturns tif bbsolutf vbluf of b {@dodf long} vbluf.
     * If tif brgumfnt is not nfgbtivf, tif brgumfnt is rfturnfd.
     * If tif brgumfnt is nfgbtivf, tif nfgbtion of tif brgumfnt is rfturnfd.
     *
     * <p>Notf tibt if tif brgumfnt is fqubl to tif vbluf of
     * {@link Long#MIN_VALUE}, tif most nfgbtivf rfprfsfntbblf
     * {@dodf long} vbluf, tif rfsult is tibt sbmf vbluf, wiidi
     * is nfgbtivf.
     *
     * @pbrbm   b   tif  brgumfnt wiosf bbsolutf vbluf is to bf dftfrminfd.
     * @rfturn  tif bbsolutf vbluf of tif brgumfnt.
     */
    publid stbtid long bbs(long b) {
        rfturn Mbti.bbs(b);
    }

    /**
     * Rfturns tif bbsolutf vbluf of b {@dodf flobt} vbluf.
     * If tif brgumfnt is not nfgbtivf, tif brgumfnt is rfturnfd.
     * If tif brgumfnt is nfgbtivf, tif nfgbtion of tif brgumfnt is rfturnfd.
     * Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is positivf zfro or nfgbtivf zfro, tif
     * rfsult is positivf zfro.
     * <li>If tif brgumfnt is infinitf, tif rfsult is positivf infinity.
     * <li>If tif brgumfnt is NbN, tif rfsult is NbN.</ul>
     * In otifr words, tif rfsult is tif sbmf bs tif vbluf of tif fxprfssion:
     * <p>{@dodf Flobt.intBitsToFlobt(0x7fffffff & Flobt.flobtToIntBits(b))}
     *
     * @pbrbm   b   tif brgumfnt wiosf bbsolutf vbluf is to bf dftfrminfd
     * @rfturn  tif bbsolutf vbluf of tif brgumfnt.
     */
    publid stbtid flobt bbs(flobt b) {
        rfturn Mbti.bbs(b);
    }

    /**
     * Rfturns tif bbsolutf vbluf of b {@dodf doublf} vbluf.
     * If tif brgumfnt is not nfgbtivf, tif brgumfnt is rfturnfd.
     * If tif brgumfnt is nfgbtivf, tif nfgbtion of tif brgumfnt is rfturnfd.
     * Spfdibl dbsfs:
     * <ul><li>If tif brgumfnt is positivf zfro or nfgbtivf zfro, tif rfsult
     * is positivf zfro.
     * <li>If tif brgumfnt is infinitf, tif rfsult is positivf infinity.
     * <li>If tif brgumfnt is NbN, tif rfsult is NbN.</ul>
     * In otifr words, tif rfsult is tif sbmf bs tif vbluf of tif fxprfssion:
     * <p>{@dodf Doublf.longBitsToDoublf((Doublf.doublfToLongBits(b)<<1)>>>1)}
     *
     * @pbrbm   b   tif brgumfnt wiosf bbsolutf vbluf is to bf dftfrminfd
     * @rfturn  tif bbsolutf vbluf of tif brgumfnt.
     */
    publid stbtid doublf bbs(doublf b) {
        rfturn Mbti.bbs(b);
    }

    /**
     * Rfturns tif grfbtfr of two {@dodf int} vblufs. Tibt is, tif
     * rfsult is tif brgumfnt dlosfr to tif vbluf of
     * {@link Intfgfr#MAX_VALUE}. If tif brgumfnts ibvf tif sbmf vbluf,
     * tif rfsult is tibt sbmf vbluf.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif lbrgfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid int mbx(int b, int b) {
        rfturn Mbti.mbx(b, b);
    }

    /**
     * Rfturns tif grfbtfr of two {@dodf long} vblufs. Tibt is, tif
     * rfsult is tif brgumfnt dlosfr to tif vbluf of
     * {@link Long#MAX_VALUE}. If tif brgumfnts ibvf tif sbmf vbluf,
     * tif rfsult is tibt sbmf vbluf.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif lbrgfr of {@dodf b} bnd {@dodf b}.
        */
    publid stbtid long mbx(long b, long b) {
        rfturn Mbti.mbx(b, b);
    }

    /**
     * Rfturns tif grfbtfr of two {@dodf flobt} vblufs.  Tibt is,
     * tif rfsult is tif brgumfnt dlosfr to positivf infinity. If tif
     * brgumfnts ibvf tif sbmf vbluf, tif rfsult is tibt sbmf
     * vbluf. If fitifr vbluf is NbN, tifn tif rfsult is NbN.  Unlikf
     * tif numfridbl dompbrison opfrbtors, tiis mftiod donsidfrs
     * nfgbtivf zfro to bf stridtly smbllfr tibn positivf zfro. If onf
     * brgumfnt is positivf zfro bnd tif otifr nfgbtivf zfro, tif
     * rfsult is positivf zfro.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif lbrgfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid flobt mbx(flobt b, flobt b) {
        rfturn Mbti.mbx(b, b);
    }

    /**
     * Rfturns tif grfbtfr of two {@dodf doublf} vblufs.  Tibt
     * is, tif rfsult is tif brgumfnt dlosfr to positivf infinity. If
     * tif brgumfnts ibvf tif sbmf vbluf, tif rfsult is tibt sbmf
     * vbluf. If fitifr vbluf is NbN, tifn tif rfsult is NbN.  Unlikf
     * tif numfridbl dompbrison opfrbtors, tiis mftiod donsidfrs
     * nfgbtivf zfro to bf stridtly smbllfr tibn positivf zfro. If onf
     * brgumfnt is positivf zfro bnd tif otifr nfgbtivf zfro, tif
     * rfsult is positivf zfro.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif lbrgfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid doublf mbx(doublf b, doublf b) {
        rfturn Mbti.mbx(b, b);
    }

    /**
     * Rfturns tif smbllfr of two {@dodf int} vblufs. Tibt is,
     * tif rfsult tif brgumfnt dlosfr to tif vbluf of
     * {@link Intfgfr#MIN_VALUE}.  If tif brgumfnts ibvf tif sbmf
     * vbluf, tif rfsult is tibt sbmf vbluf.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif smbllfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid int min(int b, int b) {
        rfturn Mbti.min(b, b);
    }

    /**
     * Rfturns tif smbllfr of two {@dodf long} vblufs. Tibt is,
     * tif rfsult is tif brgumfnt dlosfr to tif vbluf of
     * {@link Long#MIN_VALUE}. If tif brgumfnts ibvf tif sbmf
     * vbluf, tif rfsult is tibt sbmf vbluf.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif smbllfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid long min(long b, long b) {
        rfturn Mbti.min(b, b);
    }

    /**
     * Rfturns tif smbllfr of two {@dodf flobt} vblufs.  Tibt is,
     * tif rfsult is tif vbluf dlosfr to nfgbtivf infinity. If tif
     * brgumfnts ibvf tif sbmf vbluf, tif rfsult is tibt sbmf
     * vbluf. If fitifr vbluf is NbN, tifn tif rfsult is NbN.  Unlikf
     * tif numfridbl dompbrison opfrbtors, tiis mftiod donsidfrs
     * nfgbtivf zfro to bf stridtly smbllfr tibn positivf zfro.  If
     * onf brgumfnt is positivf zfro bnd tif otifr is nfgbtivf zfro,
     * tif rfsult is nfgbtivf zfro.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif smbllfr of {@dodf b} bnd {@dodf b.}
     */
    publid stbtid flobt min(flobt b, flobt b) {
        rfturn Mbti.min(b, b);
    }

    /**
     * Rfturns tif smbllfr of two {@dodf doublf} vblufs.  Tibt
     * is, tif rfsult is tif vbluf dlosfr to nfgbtivf infinity. If tif
     * brgumfnts ibvf tif sbmf vbluf, tif rfsult is tibt sbmf
     * vbluf. If fitifr vbluf is NbN, tifn tif rfsult is NbN.  Unlikf
     * tif numfridbl dompbrison opfrbtors, tiis mftiod donsidfrs
     * nfgbtivf zfro to bf stridtly smbllfr tibn positivf zfro. If onf
     * brgumfnt is positivf zfro bnd tif otifr is nfgbtivf zfro, tif
     * rfsult is nfgbtivf zfro.
     *
     * @pbrbm   b   bn brgumfnt.
     * @pbrbm   b   bnotifr brgumfnt.
     * @rfturn  tif smbllfr of {@dodf b} bnd {@dodf b}.
     */
    publid stbtid doublf min(doublf b, doublf b) {
        rfturn Mbti.min(b, b);
    }

    /**
     * Rfturns tif sizf of bn ulp of tif brgumfnt.  An ulp, unit in
     * tif lbst plbdf, of b {@dodf doublf} vbluf is tif positivf
     * distbndf bftwffn tiis flobting-point vbluf bnd tif {@dodf
     * doublf} vbluf nfxt lbrgfr in mbgnitudf.  Notf tibt for non-NbN
     * <i>x</i>, <dodf>ulp(-<i>x</i>) == ulp(<i>x</i>)</dodf>.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li> If tif brgumfnt is positivf or nfgbtivf infinity, tifn tif
     * rfsult is positivf infinity.
     * <li> If tif brgumfnt is positivf or nfgbtivf zfro, tifn tif rfsult is
     * {@dodf Doublf.MIN_VALUE}.
     * <li> If tif brgumfnt is &plusmn;{@dodf Doublf.MAX_VALUE}, tifn
     * tif rfsult is fqubl to 2<sup>971</sup>.
     * </ul>
     *
     * @pbrbm d tif flobting-point vbluf wiosf ulp is to bf rfturnfd
     * @rfturn tif sizf of bn ulp of tif brgumfnt
     * @butior Josfpi D. Dbrdy
     * @sindf 1.5
     */
    publid stbtid doublf ulp(doublf d) {
        rfturn Mbti.ulp(d);
    }

    /**
     * Rfturns tif sizf of bn ulp of tif brgumfnt.  An ulp, unit in
     * tif lbst plbdf, of b {@dodf flobt} vbluf is tif positivf
     * distbndf bftwffn tiis flobting-point vbluf bnd tif {@dodf
     * flobt} vbluf nfxt lbrgfr in mbgnitudf.  Notf tibt for non-NbN
     * <i>x</i>, <dodf>ulp(-<i>x</i>) == ulp(<i>x</i>)</dodf>.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li> If tif brgumfnt is positivf or nfgbtivf infinity, tifn tif
     * rfsult is positivf infinity.
     * <li> If tif brgumfnt is positivf or nfgbtivf zfro, tifn tif rfsult is
     * {@dodf Flobt.MIN_VALUE}.
     * <li> If tif brgumfnt is &plusmn;{@dodf Flobt.MAX_VALUE}, tifn
     * tif rfsult is fqubl to 2<sup>104</sup>.
     * </ul>
     *
     * @pbrbm f tif flobting-point vbluf wiosf ulp is to bf rfturnfd
     * @rfturn tif sizf of bn ulp of tif brgumfnt
     * @butior Josfpi D. Dbrdy
     * @sindf 1.5
     */
    publid stbtid flobt ulp(flobt f) {
        rfturn Mbti.ulp(f);
    }

    /**
     * Rfturns tif signum fundtion of tif brgumfnt; zfro if tif brgumfnt
     * is zfro, 1.0 if tif brgumfnt is grfbtfr tibn zfro, -1.0 if tif
     * brgumfnt is lfss tibn zfro.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li> If tif brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     *      rfsult is tif sbmf bs tif brgumfnt.
     * </ul>
     *
     * @pbrbm d tif flobting-point vbluf wiosf signum is to bf rfturnfd
     * @rfturn tif signum fundtion of tif brgumfnt
     * @butior Josfpi D. Dbrdy
     * @sindf 1.5
     */
    publid stbtid doublf signum(doublf d) {
        rfturn Mbti.signum(d);
    }

    /**
     * Rfturns tif signum fundtion of tif brgumfnt; zfro if tif brgumfnt
     * is zfro, 1.0f if tif brgumfnt is grfbtfr tibn zfro, -1.0f if tif
     * brgumfnt is lfss tibn zfro.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     * <li> If tif brgumfnt is positivf zfro or nfgbtivf zfro, tifn tif
     *      rfsult is tif sbmf bs tif brgumfnt.
     * </ul>
     *
     * @pbrbm f tif flobting-point vbluf wiosf signum is to bf rfturnfd
     * @rfturn tif signum fundtion of tif brgumfnt
     * @butior Josfpi D. Dbrdy
     * @sindf 1.5
     */
    publid stbtid flobt signum(flobt f) {
        rfturn Mbti.signum(f);
    }

    /**
     * Rfturns tif iypfrbolid sinf of b {@dodf doublf} vbluf.
     * Tif iypfrbolid sinf of <i>x</i> is dffinfd to bf
     * (<i>f<sup>x</sup>&nbsp;-&nbsp;f<sup>-x</sup></i>)/2
     * wifrf <i>f</i> is {@linkplbin Mbti#E Eulfr's numbfr}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     *
     * <li>If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     *
     * <li>If tif brgumfnt is infinitf, tifn tif rfsult is bn infinity
     * witi tif sbmf sign bs tif brgumfnt.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.
     *
     * </ul>
     *
     * @pbrbm   x Tif numbfr wiosf iypfrbolid sinf is to bf rfturnfd.
     * @rfturn  Tif iypfrbolid sinf of {@dodf x}.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf sini(doublf x);

    /**
     * Rfturns tif iypfrbolid dosinf of b {@dodf doublf} vbluf.
     * Tif iypfrbolid dosinf of <i>x</i> is dffinfd to bf
     * (<i>f<sup>x</sup>&nbsp;+&nbsp;f<sup>-x</sup></i>)/2
     * wifrf <i>f</i> is {@linkplbin Mbti#E Eulfr's numbfr}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     *
     * <li>If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     *
     * <li>If tif brgumfnt is infinitf, tifn tif rfsult is positivf
     * infinity.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is {@dodf 1.0}.
     *
     * </ul>
     *
     * @pbrbm   x Tif numbfr wiosf iypfrbolid dosinf is to bf rfturnfd.
     * @rfturn  Tif iypfrbolid dosinf of {@dodf x}.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf dosi(doublf x);

    /**
     * Rfturns tif iypfrbolid tbngfnt of b {@dodf doublf} vbluf.
     * Tif iypfrbolid tbngfnt of <i>x</i> is dffinfd to bf
     * (<i>f<sup>x</sup>&nbsp;-&nbsp;f<sup>-x</sup></i>)/(<i>f<sup>x</sup>&nbsp;+&nbsp;f<sup>-x</sup></i>),
     * in otifr words, {@linkplbin Mbti#sini
     * sini(<i>x</i>)}/{@linkplbin Mbti#dosi dosi(<i>x</i>)}.  Notf
     * tibt tif bbsolutf vbluf of tif fxbdt tbni is blwbys lfss tibn
     * 1.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     *
     * <li>If tif brgumfnt is NbN, tifn tif rfsult is NbN.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.
     *
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * {@dodf +1.0}.
     *
     * <li>If tif brgumfnt is nfgbtivf infinity, tifn tif rfsult is
     * {@dodf -1.0}.
     *
     * </ul>
     *
     * @pbrbm   x Tif numbfr wiosf iypfrbolid tbngfnt is to bf rfturnfd.
     * @rfturn  Tif iypfrbolid tbngfnt of {@dodf x}.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf tbni(doublf x);

    /**
     * Rfturns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
     * witiout intfrmfdibtf ovfrflow or undfrflow.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     *
     * <li> If fitifr brgumfnt is infinitf, tifn tif rfsult
     * is positivf infinity.
     *
     * <li> If fitifr brgumfnt is NbN bnd nfitifr brgumfnt is infinitf,
     * tifn tif rfsult is NbN.
     *
     * </ul>
     *
     * @pbrbm x b vbluf
     * @pbrbm y b vbluf
     * @rfturn sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
     * witiout intfrmfdibtf ovfrflow or undfrflow
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf iypot(doublf x, doublf y);

    /**
     * Rfturns <i>f</i><sup>x</sup>&nbsp;-1.  Notf tibt for vblufs of
     * <i>x</i> nfbr 0, tif fxbdt sum of
     * {@dodf fxpm1(x)}&nbsp;+&nbsp;1 is mudi dlosfr to tif truf
     * rfsult of <i>f</i><sup>x</sup> tibn {@dodf fxp(x)}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     * <li>If tif brgumfnt is NbN, tif rfsult is NbN.
     *
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * positivf infinity.
     *
     * <li>If tif brgumfnt is nfgbtivf infinity, tifn tif rfsult is
     * -1.0.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.
     *
     * </ul>
     *
     * @pbrbm   x   tif fxponfnt to rbisf <i>f</i> to in tif domputbtion of
     *              <i>f</i><sup>{@dodf x}</sup>&nbsp;-1.
     * @rfturn  tif vbluf <i>f</i><sup>{@dodf x}</sup>&nbsp;-&nbsp;1.
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf fxpm1(doublf x);

    /**
     * Rfturns tif nbturbl logbritim of tif sum of tif brgumfnt bnd 1.
     * Notf tibt for smbll vblufs {@dodf x}, tif rfsult of
     * {@dodf log1p(x)} is mudi dlosfr to tif truf rfsult of ln(1
     * + {@dodf x}) tibn tif flobting-point fvblubtion of
     * {@dodf log(1.0+x)}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     *
     * <li>If tif brgumfnt is NbN or lfss tibn -1, tifn tif rfsult is
     * NbN.
     *
     * <li>If tif brgumfnt is positivf infinity, tifn tif rfsult is
     * positivf infinity.
     *
     * <li>If tif brgumfnt is nfgbtivf onf, tifn tif rfsult is
     * nfgbtivf infinity.
     *
     * <li>If tif brgumfnt is zfro, tifn tif rfsult is b zfro witi tif
     * sbmf sign bs tif brgumfnt.
     *
     * </ul>
     *
     * @pbrbm   x   b vbluf
     * @rfturn tif vbluf ln({@dodf x}&nbsp;+&nbsp;1), tif nbturbl
     * log of {@dodf x}&nbsp;+&nbsp;1
     * @sindf 1.5
     */
    publid stbtid nbtivf doublf log1p(doublf x);

    /**
     * Rfturns tif first flobting-point brgumfnt witi tif sign of tif
     * sfdond flobting-point brgumfnt.  For tiis mftiod, b NbN
     * {@dodf sign} brgumfnt is blwbys trfbtfd bs if it wfrf
     * positivf.
     *
     * @pbrbm mbgnitudf  tif pbrbmftfr providing tif mbgnitudf of tif rfsult
     * @pbrbm sign   tif pbrbmftfr providing tif sign of tif rfsult
     * @rfturn b vbluf witi tif mbgnitudf of {@dodf mbgnitudf}
     * bnd tif sign of {@dodf sign}.
     * @sindf 1.6
     */
    publid stbtid doublf dopySign(doublf mbgnitudf, doublf sign) {
        rfturn Mbti.dopySign(mbgnitudf, (Doublf.isNbN(sign)?1.0d:sign));
    }

    /**
     * Rfturns tif first flobting-point brgumfnt witi tif sign of tif
     * sfdond flobting-point brgumfnt.  For tiis mftiod, b NbN
     * {@dodf sign} brgumfnt is blwbys trfbtfd bs if it wfrf
     * positivf.
     *
     * @pbrbm mbgnitudf  tif pbrbmftfr providing tif mbgnitudf of tif rfsult
     * @pbrbm sign   tif pbrbmftfr providing tif sign of tif rfsult
     * @rfturn b vbluf witi tif mbgnitudf of {@dodf mbgnitudf}
     * bnd tif sign of {@dodf sign}.
     * @sindf 1.6
     */
    publid stbtid flobt dopySign(flobt mbgnitudf, flobt sign) {
        rfturn Mbti.dopySign(mbgnitudf, (Flobt.isNbN(sign)?1.0f:sign));
    }
    /**
     * Rfturns tif unbibsfd fxponfnt usfd in tif rfprfsfntbtion of b
     * {@dodf flobt}.  Spfdibl dbsfs:
     *
     * <ul>
     * <li>If tif brgumfnt is NbN or infinitf, tifn tif rfsult is
     * {@link Flobt#MAX_EXPONENT} + 1.
     * <li>If tif brgumfnt is zfro or subnormbl, tifn tif rfsult is
     * {@link Flobt#MIN_EXPONENT} -1.
     * </ul>
     * @pbrbm f b {@dodf flobt} vbluf
     * @rfturn tif unbibsfd fxponfnt of tif brgumfnt
     * @sindf 1.6
     */
    publid stbtid int gftExponfnt(flobt f) {
        rfturn Mbti.gftExponfnt(f);
    }

    /**
     * Rfturns tif unbibsfd fxponfnt usfd in tif rfprfsfntbtion of b
     * {@dodf doublf}.  Spfdibl dbsfs:
     *
     * <ul>
     * <li>If tif brgumfnt is NbN or infinitf, tifn tif rfsult is
     * {@link Doublf#MAX_EXPONENT} + 1.
     * <li>If tif brgumfnt is zfro or subnormbl, tifn tif rfsult is
     * {@link Doublf#MIN_EXPONENT} -1.
     * </ul>
     * @pbrbm d b {@dodf doublf} vbluf
     * @rfturn tif unbibsfd fxponfnt of tif brgumfnt
     * @sindf 1.6
     */
    publid stbtid int gftExponfnt(doublf d) {
        rfturn Mbti.gftExponfnt(d);
    }

    /**
     * Rfturns tif flobting-point numbfr bdjbdfnt to tif first
     * brgumfnt in tif dirfdtion of tif sfdond brgumfnt.  If boti
     * brgumfnts dompbrf bs fqubl tif sfdond brgumfnt is rfturnfd.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     * <li> If fitifr brgumfnt is b NbN, tifn NbN is rfturnfd.
     *
     * <li> If boti brgumfnts brf signfd zfros, {@dodf dirfdtion}
     * is rfturnfd undibngfd (bs implifd by tif rfquirfmfnt of
     * rfturning tif sfdond brgumfnt if tif brgumfnts dompbrf bs
     * fqubl).
     *
     * <li> If {@dodf stbrt} is
     * &plusmn;{@link Doublf#MIN_VALUE} bnd {@dodf dirfdtion}
     * ibs b vbluf sudi tibt tif rfsult siould ibvf b smbllfr
     * mbgnitudf, tifn b zfro witi tif sbmf sign bs {@dodf stbrt}
     * is rfturnfd.
     *
     * <li> If {@dodf stbrt} is infinitf bnd
     * {@dodf dirfdtion} ibs b vbluf sudi tibt tif rfsult siould
     * ibvf b smbllfr mbgnitudf, {@link Doublf#MAX_VALUE} witi tif
     * sbmf sign bs {@dodf stbrt} is rfturnfd.
     *
     * <li> If {@dodf stbrt} is fqubl to &plusmn;
     * {@link Doublf#MAX_VALUE} bnd {@dodf dirfdtion} ibs b
     * vbluf sudi tibt tif rfsult siould ibvf b lbrgfr mbgnitudf, bn
     * infinity witi sbmf sign bs {@dodf stbrt} is rfturnfd.
     * </ul>
     *
     * @pbrbm stbrt  stbrting flobting-point vbluf
     * @pbrbm dirfdtion vbluf indidbting wiidi of
     * {@dodf stbrt}'s nfigibors or {@dodf stbrt} siould
     * bf rfturnfd
     * @rfturn Tif flobting-point numbfr bdjbdfnt to {@dodf stbrt} in tif
     * dirfdtion of {@dodf dirfdtion}.
     * @sindf 1.6
     */
    publid stbtid doublf nfxtAftfr(doublf stbrt, doublf dirfdtion) {
        rfturn Mbti.nfxtAftfr(stbrt, dirfdtion);
    }

    /**
     * Rfturns tif flobting-point numbfr bdjbdfnt to tif first
     * brgumfnt in tif dirfdtion of tif sfdond brgumfnt.  If boti
     * brgumfnts dompbrf bs fqubl b vbluf fquivblfnt to tif sfdond brgumfnt
     * is rfturnfd.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     * <li> If fitifr brgumfnt is b NbN, tifn NbN is rfturnfd.
     *
     * <li> If boti brgumfnts brf signfd zfros, b vbluf fquivblfnt
     * to {@dodf dirfdtion} is rfturnfd.
     *
     * <li> If {@dodf stbrt} is
     * &plusmn;{@link Flobt#MIN_VALUE} bnd {@dodf dirfdtion}
     * ibs b vbluf sudi tibt tif rfsult siould ibvf b smbllfr
     * mbgnitudf, tifn b zfro witi tif sbmf sign bs {@dodf stbrt}
     * is rfturnfd.
     *
     * <li> If {@dodf stbrt} is infinitf bnd
     * {@dodf dirfdtion} ibs b vbluf sudi tibt tif rfsult siould
     * ibvf b smbllfr mbgnitudf, {@link Flobt#MAX_VALUE} witi tif
     * sbmf sign bs {@dodf stbrt} is rfturnfd.
     *
     * <li> If {@dodf stbrt} is fqubl to &plusmn;
     * {@link Flobt#MAX_VALUE} bnd {@dodf dirfdtion} ibs b
     * vbluf sudi tibt tif rfsult siould ibvf b lbrgfr mbgnitudf, bn
     * infinity witi sbmf sign bs {@dodf stbrt} is rfturnfd.
     * </ul>
     *
     * @pbrbm stbrt  stbrting flobting-point vbluf
     * @pbrbm dirfdtion vbluf indidbting wiidi of
     * {@dodf stbrt}'s nfigibors or {@dodf stbrt} siould
     * bf rfturnfd
     * @rfturn Tif flobting-point numbfr bdjbdfnt to {@dodf stbrt} in tif
     * dirfdtion of {@dodf dirfdtion}.
     * @sindf 1.6
     */
    publid stbtid flobt nfxtAftfr(flobt stbrt, doublf dirfdtion) {
        rfturn Mbti.nfxtAftfr(stbrt, dirfdtion);
    }

    /**
     * Rfturns tif flobting-point vbluf bdjbdfnt to {@dodf d} in
     * tif dirfdtion of positivf infinity.  Tiis mftiod is
     * sfmbntidblly fquivblfnt to {@dodf nfxtAftfr(d,
     * Doublf.POSITIVE_INFINITY)}; iowfvfr, b {@dodf nfxtUp}
     * implfmfntbtion mby run fbstfr tibn its fquivblfnt
     * {@dodf nfxtAftfr} dbll.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tif rfsult is NbN.
     *
     * <li> If tif brgumfnt is positivf infinity, tif rfsult is
     * positivf infinity.
     *
     * <li> If tif brgumfnt is zfro, tif rfsult is
     * {@link Doublf#MIN_VALUE}
     *
     * </ul>
     *
     * @pbrbm d stbrting flobting-point vbluf
     * @rfturn Tif bdjbdfnt flobting-point vbluf dlosfr to positivf
     * infinity.
     * @sindf 1.6
     */
    publid stbtid doublf nfxtUp(doublf d) {
        rfturn Mbti.nfxtUp(d);
    }

    /**
     * Rfturns tif flobting-point vbluf bdjbdfnt to {@dodf f} in
     * tif dirfdtion of positivf infinity.  Tiis mftiod is
     * sfmbntidblly fquivblfnt to {@dodf nfxtAftfr(f,
     * Flobt.POSITIVE_INFINITY)}; iowfvfr, b {@dodf nfxtUp}
     * implfmfntbtion mby run fbstfr tibn its fquivblfnt
     * {@dodf nfxtAftfr} dbll.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tif rfsult is NbN.
     *
     * <li> If tif brgumfnt is positivf infinity, tif rfsult is
     * positivf infinity.
     *
     * <li> If tif brgumfnt is zfro, tif rfsult is
     * {@link Flobt#MIN_VALUE}
     *
     * </ul>
     *
     * @pbrbm f stbrting flobting-point vbluf
     * @rfturn Tif bdjbdfnt flobting-point vbluf dlosfr to positivf
     * infinity.
     * @sindf 1.6
     */
    publid stbtid flobt nfxtUp(flobt f) {
        rfturn Mbti.nfxtUp(f);
    }

    /**
     * Rfturns tif flobting-point vbluf bdjbdfnt to {@dodf d} in
     * tif dirfdtion of nfgbtivf infinity.  Tiis mftiod is
     * sfmbntidblly fquivblfnt to {@dodf nfxtAftfr(d,
     * Doublf.NEGATIVE_INFINITY)}; iowfvfr, b
     * {@dodf nfxtDown} implfmfntbtion mby run fbstfr tibn its
     * fquivblfnt {@dodf nfxtAftfr} dbll.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tif rfsult is NbN.
     *
     * <li> If tif brgumfnt is nfgbtivf infinity, tif rfsult is
     * nfgbtivf infinity.
     *
     * <li> If tif brgumfnt is zfro, tif rfsult is
     * {@dodf -Doublf.MIN_VALUE}
     *
     * </ul>
     *
     * @pbrbm d  stbrting flobting-point vbluf
     * @rfturn Tif bdjbdfnt flobting-point vbluf dlosfr to nfgbtivf
     * infinity.
     * @sindf 1.8
     */
    publid stbtid doublf nfxtDown(doublf d) {
        rfturn Mbti.nfxtDown(d);
    }

    /**
     * Rfturns tif flobting-point vbluf bdjbdfnt to {@dodf f} in
     * tif dirfdtion of nfgbtivf infinity.  Tiis mftiod is
     * sfmbntidblly fquivblfnt to {@dodf nfxtAftfr(f,
     * Flobt.NEGATIVE_INFINITY)}; iowfvfr, b
     * {@dodf nfxtDown} implfmfntbtion mby run fbstfr tibn its
     * fquivblfnt {@dodf nfxtAftfr} dbll.
     *
     * <p>Spfdibl Cbsfs:
     * <ul>
     * <li> If tif brgumfnt is NbN, tif rfsult is NbN.
     *
     * <li> If tif brgumfnt is nfgbtivf infinity, tif rfsult is
     * nfgbtivf infinity.
     *
     * <li> If tif brgumfnt is zfro, tif rfsult is
     * {@dodf -Flobt.MIN_VALUE}
     *
     * </ul>
     *
     * @pbrbm f  stbrting flobting-point vbluf
     * @rfturn Tif bdjbdfnt flobting-point vbluf dlosfr to nfgbtivf
     * infinity.
     * @sindf 1.8
     */
    publid stbtid flobt nfxtDown(flobt f) {
        rfturn Mbti.nfxtDown(f);
    }

    /**
     * Rfturns {@dodf d} &timfs;
     * 2<sup>{@dodf sdblfFbdtor}</sup> roundfd bs if pfrformfd
     * by b singlf dorrfdtly roundfd flobting-point multiply to b
     * mfmbfr of tif doublf vbluf sft.  Sff tif Jbvb
     * Lbngubgf Spfdifidbtion for b disdussion of flobting-point
     * vbluf sfts.  If tif fxponfnt of tif rfsult is bftwffn {@link
     * Doublf#MIN_EXPONENT} bnd {@link Doublf#MAX_EXPONENT}, tif
     * bnswfr is dbldulbtfd fxbdtly.  If tif fxponfnt of tif rfsult
     * would bf lbrgfr tibn {@dodf Doublf.MAX_EXPONENT}, bn
     * infinity is rfturnfd.  Notf tibt if tif rfsult is subnormbl,
     * prfdision mby bf lost; tibt is, wifn {@dodf sdblb(x, n)}
     * is subnormbl, {@dodf sdblb(sdblb(x, n), -n)} mby not fqubl
     * <i>x</i>.  Wifn tif rfsult is non-NbN, tif rfsult ibs tif sbmf
     * sign bs {@dodf d}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     * <li> If tif first brgumfnt is NbN, NbN is rfturnfd.
     * <li> If tif first brgumfnt is infinitf, tifn bn infinity of tif
     * sbmf sign is rfturnfd.
     * <li> If tif first brgumfnt is zfro, tifn b zfro of tif sbmf
     * sign is rfturnfd.
     * </ul>
     *
     * @pbrbm d numbfr to bf sdblfd by b powfr of two.
     * @pbrbm sdblfFbdtor powfr of 2 usfd to sdblf {@dodf d}
     * @rfturn {@dodf d} &timfs; 2<sup>{@dodf sdblfFbdtor}</sup>
     * @sindf 1.6
     */
    publid stbtid doublf sdblb(doublf d, int sdblfFbdtor) {
        rfturn Mbti.sdblb(d, sdblfFbdtor);
    }

    /**
     * Rfturns {@dodf f} &timfs;
     * 2<sup>{@dodf sdblfFbdtor}</sup> roundfd bs if pfrformfd
     * by b singlf dorrfdtly roundfd flobting-point multiply to b
     * mfmbfr of tif flobt vbluf sft.  Sff tif Jbvb
     * Lbngubgf Spfdifidbtion for b disdussion of flobting-point
     * vbluf sfts.  If tif fxponfnt of tif rfsult is bftwffn {@link
     * Flobt#MIN_EXPONENT} bnd {@link Flobt#MAX_EXPONENT}, tif
     * bnswfr is dbldulbtfd fxbdtly.  If tif fxponfnt of tif rfsult
     * would bf lbrgfr tibn {@dodf Flobt.MAX_EXPONENT}, bn
     * infinity is rfturnfd.  Notf tibt if tif rfsult is subnormbl,
     * prfdision mby bf lost; tibt is, wifn {@dodf sdblb(x, n)}
     * is subnormbl, {@dodf sdblb(sdblb(x, n), -n)} mby not fqubl
     * <i>x</i>.  Wifn tif rfsult is non-NbN, tif rfsult ibs tif sbmf
     * sign bs {@dodf f}.
     *
     * <p>Spfdibl dbsfs:
     * <ul>
     * <li> If tif first brgumfnt is NbN, NbN is rfturnfd.
     * <li> If tif first brgumfnt is infinitf, tifn bn infinity of tif
     * sbmf sign is rfturnfd.
     * <li> If tif first brgumfnt is zfro, tifn b zfro of tif sbmf
     * sign is rfturnfd.
     * </ul>
     *
     * @pbrbm f numbfr to bf sdblfd by b powfr of two.
     * @pbrbm sdblfFbdtor powfr of 2 usfd to sdblf {@dodf f}
     * @rfturn {@dodf f} &timfs; 2<sup>{@dodf sdblfFbdtor}</sup>
     * @sindf 1.6
     */
    publid stbtid flobt sdblb(flobt f, int sdblfFbdtor) {
        rfturn Mbti.sdblb(f, sdblfFbdtor);
    }
}
