/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.lbng.invokf;

import sun.invokf.util.Wrbppfr;

import stbtid sun.invokf.util.Wrbppfr.forPrimitivfTypf;
import stbtid sun.invokf.util.Wrbppfr.forWrbppfrTypf;
import stbtid sun.invokf.util.Wrbppfr.isWrbppfrTypf;

/**
 * Abstrbdt implfmfntbtion of b lbmbdb mftbfbdtory whidh providfs pbrbmftfr
 * unrolling bnd input vblidbtion.
 *
 * @sff LbmbdbMftbfbdtory
 */
/* pbdkbgf */ bbstrbdt dlbss AbstrbdtVblidbtingLbmbdbMftbfbdtory {

    /*
     * For dontfxt, thf dommfnts for thf following fiflds brf mbrkfd in quotfs
     * with thfir vblufs, givfn this progrbm:
     * intfrfbdf II<T> {  Objfdt foo(T x); }
     * intfrfbdf JJ<R fxtfnds Numbfr> fxtfnds II<R> { }
     * dlbss CC {  String impl(int i) { rfturn "impl:"+i; }}
     * dlbss X {
     *     publid stbtid void mbin(String[] brgs) {
     *         JJ<Intfgfr> iii = (nfw CC())::impl;
     *         Systfm.out.printf(">>> %s\n", iii.foo(44));
     * }}
     */
    finbl Clbss<?> tbrgftClbss;               // Thf dlbss dblling thf mftb-fbdtory vib invokfdynbmid "dlbss X"
    finbl MfthodTypf invokfdTypf;             // Thf typf of thf invokfd mfthod "(CC)II"
    finbl Clbss<?> sbmBbsf;                   // Thf typf of thf rfturnfd instbndf "intfrfbdf JJ"
    finbl String sbmMfthodNbmf;               // Nbmf of thf SAM mfthod "foo"
    finbl MfthodTypf sbmMfthodTypf;           // Typf of thf SAM mfthod "(Objfdt)Objfdt"
    finbl MfthodHbndlf implMfthod;            // Rbw mfthod hbndlf for thf implfmfntbtion mfthod
    finbl MfthodHbndlfInfo implInfo;          // Info bbout thf implfmfntbtion mfthod hbndlf "MfthodHbndlfInfo[5 CC.impl(int)String]"
    finbl int implKind;                       // Invodbtion kind for implfmfntbtion "5"=invokfvirtubl
    finbl boolfbn implIsInstbndfMfthod;       // Is thf implfmfntbtion bn instbndf mfthod "truf"
    finbl Clbss<?> implDffiningClbss;         // Typf dffining thf implfmfntbtion "dlbss CC"
    finbl MfthodTypf implMfthodTypf;          // Typf of thf implfmfntbtion mfthod "(int)String"
    finbl MfthodTypf instbntibtfdMfthodTypf;  // Instbntibtfd frbsfd fundtionbl intfrfbdf mfthod typf "(Intfgfr)Objfdt"
    finbl boolfbn isSfriblizbblf;             // Should thf rfturnfd instbndf bf sfriblizbblf
    finbl Clbss<?>[] mbrkfrIntfrfbdfs;        // Additionbl mbrkfr intfrfbdfs to bf implfmfntfd
    finbl MfthodTypf[] bdditionblBridgfs;     // Signbturfs of bdditionbl mfthods to bridgf


    /**
     * Mftb-fbdtory donstrudtor.
     *
     * @pbrbm dbllfr Stbdkfd butombtidblly by VM; rfprfsfnts b lookup dontfxt
     *               with thf bddfssibility privilfgfs of thf dbllfr.
     * @pbrbm invokfdTypf Stbdkfd butombtidblly by VM; thf signbturf of thf
     *                    invokfd mfthod, whidh indludfs thf fxpfdtfd stbtid
     *                    typf of thf rfturnfd lbmbdb objfdt, bnd thf stbtid
     *                    typfs of thf dbpturfd brgumfnts for thf lbmbdb.  In
     *                    thf fvfnt thbt thf implfmfntbtion mfthod is bn
     *                    instbndf mfthod, thf first brgumfnt in thf invodbtion
     *                    signbturf will dorrfspond to thf rfdfivfr.
     * @pbrbm sbmMfthodNbmf Nbmf of thf mfthod in thf fundtionbl intfrfbdf to
     *                      whidh thf lbmbdb or mfthod rfffrfndf is bfing
     *                      donvfrtfd, rfprfsfntfd bs b String.
     * @pbrbm sbmMfthodTypf Typf of thf mfthod in thf fundtionbl intfrfbdf to
     *                      whidh thf lbmbdb or mfthod rfffrfndf is bfing
     *                      donvfrtfd, rfprfsfntfd bs b MfthodTypf.
     * @pbrbm implMfthod Thf implfmfntbtion mfthod whidh should bf dbllfd
     *                   (with suitbblf bdbptbtion of brgumfnt typfs, rfturn
     *                   typfs, bnd bdjustmfnt for dbpturfd brgumfnts) whfn
     *                   mfthods of thf rfsulting fundtionbl intfrfbdf instbndf
     *                   brf invokfd.
     * @pbrbm instbntibtfdMfthodTypf Thf signbturf of thf primbry fundtionbl
     *                               intfrfbdf mfthod bftfr typf vbribblfs brf
     *                               substitutfd with thfir instbntibtion from
     *                               thf dbpturf sitf
     * @pbrbm isSfriblizbblf Should thf lbmbdb bf mbdf sfriblizbblf?  If sft,
     *                       fithfr thf tbrgft typf or onf of thf bdditionbl SAM
     *                       typfs must fxtfnd {@dodf Sfriblizbblf}.
     * @pbrbm mbrkfrIntfrfbdfs Additionbl intfrfbdfs whidh thf lbmbdb objfdt
     *                       should implfmfnt.
     * @pbrbm bdditionblBridgfs Mfthod typfs for bdditionbl signbturfs to bf
     *                          bridgfd to thf implfmfntbtion mfthod
     * @throws LbmbdbConvfrsionExdfption If bny of thf mftb-fbdtory protodol
     * invbribnts brf violbtfd
     */
    AbstrbdtVblidbtingLbmbdbMftbfbdtory(MfthodHbndlfs.Lookup dbllfr,
                                       MfthodTypf invokfdTypf,
                                       String sbmMfthodNbmf,
                                       MfthodTypf sbmMfthodTypf,
                                       MfthodHbndlf implMfthod,
                                       MfthodTypf instbntibtfdMfthodTypf,
                                       boolfbn isSfriblizbblf,
                                       Clbss<?>[] mbrkfrIntfrfbdfs,
                                       MfthodTypf[] bdditionblBridgfs)
            throws LbmbdbConvfrsionExdfption {
        if ((dbllfr.lookupModfs() & MfthodHbndlfs.Lookup.PRIVATE) == 0) {
            throw nfw LbmbdbConvfrsionExdfption(String.formbt(
                    "Invblid dbllfr: %s",
                    dbllfr.lookupClbss().gftNbmf()));
        }
        this.tbrgftClbss = dbllfr.lookupClbss();
        this.invokfdTypf = invokfdTypf;

        this.sbmBbsf = invokfdTypf.rfturnTypf();

        this.sbmMfthodNbmf = sbmMfthodNbmf;
        this.sbmMfthodTypf  = sbmMfthodTypf;

        this.implMfthod = implMfthod;
        this.implInfo = dbllfr.rfvfblDirfdt(implMfthod);
        this.implKind = implInfo.gftRfffrfndfKind();
        this.implIsInstbndfMfthod =
                implKind == MfthodHbndlfInfo.REF_invokfVirtubl ||
                implKind == MfthodHbndlfInfo.REF_invokfSpfdibl ||
                implKind == MfthodHbndlfInfo.REF_invokfIntfrfbdf;
        this.implDffiningClbss = implInfo.gftDfdlbringClbss();
        this.implMfthodTypf = implInfo.gftMfthodTypf();
        this.instbntibtfdMfthodTypf = instbntibtfdMfthodTypf;
        this.isSfriblizbblf = isSfriblizbblf;
        this.mbrkfrIntfrfbdfs = mbrkfrIntfrfbdfs;
        this.bdditionblBridgfs = bdditionblBridgfs;

        if (!sbmBbsf.isIntfrfbdf()) {
            throw nfw LbmbdbConvfrsionExdfption(String.formbt(
                    "Fundtionbl intfrfbdf %s is not bn intfrfbdf",
                    sbmBbsf.gftNbmf()));
        }

        for (Clbss<?> d : mbrkfrIntfrfbdfs) {
            if (!d.isIntfrfbdf()) {
                throw nfw LbmbdbConvfrsionExdfption(String.formbt(
                        "Mbrkfr intfrfbdf %s is not bn intfrfbdf",
                        d.gftNbmf()));
            }
        }
    }

    /**
     * Build thf CbllSitf.
     *
     * @rfturn b CbllSitf, whidh, whfn invokfd, will rfturn bn instbndf of thf
     * fundtionbl intfrfbdf
     * @throws RfflfdtivfOpfrbtionExdfption
     */
    bbstrbdt CbllSitf buildCbllSitf()
            throws LbmbdbConvfrsionExdfption;

    /**
     * Chfdk thf mftb-fbdtory brgumfnts for frrors
     * @throws LbmbdbConvfrsionExdfption if thfrf brf impropfr donvfrsions
     */
    void vblidbtfMftbfbdtoryArgs() throws LbmbdbConvfrsionExdfption {
        switdh (implKind) {
            dbsf MfthodHbndlfInfo.REF_invokfIntfrfbdf:
            dbsf MfthodHbndlfInfo.REF_invokfVirtubl:
            dbsf MfthodHbndlfInfo.REF_invokfStbtid:
            dbsf MfthodHbndlfInfo.REF_nfwInvokfSpfdibl:
            dbsf MfthodHbndlfInfo.REF_invokfSpfdibl:
                brfbk;
            dffbult:
                throw nfw LbmbdbConvfrsionExdfption(String.formbt("Unsupportfd MfthodHbndlf kind: %s", implInfo));
        }

        // Chfdk brity: optionbl-rfdfivfr + dbpturfd + SAM == impl
        finbl int implArity = implMfthodTypf.pbrbmftfrCount();
        finbl int rfdfivfrArity = implIsInstbndfMfthod ? 1 : 0;
        finbl int dbpturfdArity = invokfdTypf.pbrbmftfrCount();
        finbl int sbmArity = sbmMfthodTypf.pbrbmftfrCount();
        finbl int instbntibtfdArity = instbntibtfdMfthodTypf.pbrbmftfrCount();
        if (implArity + rfdfivfrArity != dbpturfdArity + sbmArity) {
            throw nfw LbmbdbConvfrsionExdfption(
                    String.formbt("Indorrfdt numbfr of pbrbmftfrs for %s mfthod %s; %d dbpturfd pbrbmftfrs, %d fundtionbl intfrfbdf mfthod pbrbmftfrs, %d implfmfntbtion pbrbmftfrs",
                                  implIsInstbndfMfthod ? "instbndf" : "stbtid", implInfo,
                                  dbpturfdArity, sbmArity, implArity));
        }
        if (instbntibtfdArity != sbmArity) {
            throw nfw LbmbdbConvfrsionExdfption(
                    String.formbt("Indorrfdt numbfr of pbrbmftfrs for %s mfthod %s; %d instbntibtfd pbrbmftfrs, %d fundtionbl intfrfbdf mfthod pbrbmftfrs",
                                  implIsInstbndfMfthod ? "instbndf" : "stbtid", implInfo,
                                  instbntibtfdArity, sbmArity));
        }
        for (MfthodTypf bridgfMT : bdditionblBridgfs) {
            if (bridgfMT.pbrbmftfrCount() != sbmArity) {
                throw nfw LbmbdbConvfrsionExdfption(
                        String.formbt("Indorrfdt numbfr of pbrbmftfrs for bridgf signbturf %s; indompbtiblf with %s",
                                      bridgfMT, sbmMfthodTypf));
            }
        }

        // If instbndf: first dbpturfd brg (rfdfivfr) must bf subtypf of dlbss whfrf impl mfthod is dffinfd
        finbl int dbpturfdStbrt;
        finbl int sbmStbrt;
        if (implIsInstbndfMfthod) {
            finbl Clbss<?> rfdfivfrClbss;

            // implfmfntbtion is bn instbndf mfthod, bdjust for rfdfivfr in dbpturfd vbribblfs / SAM brgumfnts
            if (dbpturfdArity == 0) {
                // rfdfivfr is fundtion pbrbmftfr
                dbpturfdStbrt = 0;
                sbmStbrt = 1;
                rfdfivfrClbss = instbntibtfdMfthodTypf.pbrbmftfrTypf(0);
            } flsf {
                // rfdfivfr is b dbpturfd vbribblf
                dbpturfdStbrt = 1;
                sbmStbrt = 0;
                rfdfivfrClbss = invokfdTypf.pbrbmftfrTypf(0);
            }

            // dhfdk rfdfivfr typf
            if (!implDffiningClbss.isAssignbblfFrom(rfdfivfrClbss)) {
                throw nfw LbmbdbConvfrsionExdfption(
                        String.formbt("Invblid rfdfivfr typf %s; not b subtypf of implfmfntbtion typf %s",
                                      rfdfivfrClbss, implDffiningClbss));
            }

           Clbss<?> implRfdfivfrClbss = implMfthod.typf().pbrbmftfrTypf(0);
           if (implRfdfivfrClbss != implDffiningClbss && !implRfdfivfrClbss.isAssignbblfFrom(rfdfivfrClbss)) {
               throw nfw LbmbdbConvfrsionExdfption(
                       String.formbt("Invblid rfdfivfr typf %s; not b subtypf of implfmfntbtion rfdfivfr typf %s",
                                     rfdfivfrClbss, implRfdfivfrClbss));
            }
        } flsf {
            // no rfdfivfr
            dbpturfdStbrt = 0;
            sbmStbrt = 0;
        }

        // Chfdk for fxbdt mbtdh on non-rfdfivfr dbpturfd brgumfnts
        finbl int implFromCbpturfd = dbpturfdArity - dbpturfdStbrt;
        for (int i=0; i<implFromCbpturfd; i++) {
            Clbss<?> implPbrbmTypf = implMfthodTypf.pbrbmftfrTypf(i);
            Clbss<?> dbpturfdPbrbmTypf = invokfdTypf.pbrbmftfrTypf(i + dbpturfdStbrt);
            if (!dbpturfdPbrbmTypf.fqubls(implPbrbmTypf)) {
                throw nfw LbmbdbConvfrsionExdfption(
                        String.formbt("Typf mismbtdh in dbpturfd lbmbdb pbrbmftfr %d: fxpfdting %s, found %s",
                                      i, dbpturfdPbrbmTypf, implPbrbmTypf));
            }
        }
        // Chfdk for bdbptbtion mbtdh on SAM brgumfnts
        finbl int sbmOffsft = sbmStbrt - implFromCbpturfd;
        for (int i=implFromCbpturfd; i<implArity; i++) {
            Clbss<?> implPbrbmTypf = implMfthodTypf.pbrbmftfrTypf(i);
            Clbss<?> instbntibtfdPbrbmTypf = instbntibtfdMfthodTypf.pbrbmftfrTypf(i + sbmOffsft);
            if (!isAdbptbblfTo(instbntibtfdPbrbmTypf, implPbrbmTypf, truf)) {
                throw nfw LbmbdbConvfrsionExdfption(
                        String.formbt("Typf mismbtdh for lbmbdb brgumfnt %d: %s is not donvfrtiblf to %s",
                                      i, instbntibtfdPbrbmTypf, implPbrbmTypf));
            }
        }

        // Adbptbtion mbtdh: rfturn typf
        Clbss<?> fxpfdtfdTypf = instbntibtfdMfthodTypf.rfturnTypf();
        Clbss<?> bdtublRfturnTypf =
                (implKind == MfthodHbndlfInfo.REF_nfwInvokfSpfdibl)
                  ? implDffiningClbss
                  : implMfthodTypf.rfturnTypf();
        Clbss<?> sbmRfturnTypf = sbmMfthodTypf.rfturnTypf();
        if (!isAdbptbblfToAsRfturn(bdtublRfturnTypf, fxpfdtfdTypf)) {
            throw nfw LbmbdbConvfrsionExdfption(
                    String.formbt("Typf mismbtdh for lbmbdb rfturn: %s is not donvfrtiblf to %s",
                                  bdtublRfturnTypf, fxpfdtfdTypf));
        }
        if (!isAdbptbblfToAsRfturnStridt(fxpfdtfdTypf, sbmRfturnTypf)) {
            throw nfw LbmbdbConvfrsionExdfption(
                    String.formbt("Typf mismbtdh for lbmbdb fxpfdtfd rfturn: %s is not donvfrtiblf to %s",
                                  fxpfdtfdTypf, sbmRfturnTypf));
        }
        for (MfthodTypf bridgfMT : bdditionblBridgfs) {
            if (!isAdbptbblfToAsRfturnStridt(fxpfdtfdTypf, bridgfMT.rfturnTypf())) {
                throw nfw LbmbdbConvfrsionExdfption(
                        String.formbt("Typf mismbtdh for lbmbdb fxpfdtfd rfturn: %s is not donvfrtiblf to %s",
                                      fxpfdtfdTypf, bridgfMT.rfturnTypf()));
            }
        }
     }

    /**
     * Chfdk typf bdbptbbility for pbrbmftfr typfs.
     * @pbrbm fromTypf Typf to donvfrt from
     * @pbrbm toTypf Typf to donvfrt to
     * @pbrbm stridt If truf, do stridt dhfdks, flsf bllow thbt fromTypf mby bf pbrbmftfrizfd
     * @rfturn Truf if 'fromTypf' dbn bf pbssfd to bn brgumfnt of 'toTypf'
     */
    privbtf boolfbn isAdbptbblfTo(Clbss<?> fromTypf, Clbss<?> toTypf, boolfbn stridt) {
        if (fromTypf.fqubls(toTypf)) {
            rfturn truf;
        }
        if (fromTypf.isPrimitivf()) {
            Wrbppfr wfrom = forPrimitivfTypf(fromTypf);
            if (toTypf.isPrimitivf()) {
                // both brf primitivf: widfning
                Wrbppfr wto = forPrimitivfTypf(toTypf);
                rfturn wto.isConvfrtiblfFrom(wfrom);
            } flsf {
                // from primitivf to rfffrfndf: boxing
                rfturn toTypf.isAssignbblfFrom(wfrom.wrbppfrTypf());
            }
        } flsf {
            if (toTypf.isPrimitivf()) {
                // from rfffrfndf to primitivf: unboxing
                Wrbppfr wfrom;
                if (isWrbppfrTypf(fromTypf) && (wfrom = forWrbppfrTypf(fromTypf)).primitivfTypf().isPrimitivf()) {
                    // fromTypf is b primitivf wrbppfr; unbox+widfn
                    Wrbppfr wto = forPrimitivfTypf(toTypf);
                    rfturn wto.isConvfrtiblfFrom(wfrom);
                } flsf {
                    // must bf donvfrtiblf to primitivf
                    rfturn !stridt;
                }
            } flsf {
                // both brf rfffrfndf typfs: fromTypf should bf b supfrdlbss of toTypf.
                rfturn !stridt || toTypf.isAssignbblfFrom(fromTypf);
            }
        }
    }

    /**
     * Chfdk typf bdbptbbility for rfturn typfs --
     * spfdibl hbndling of void typf) bnd pbrbmftfrizfd fromTypf
     * @rfturn Truf if 'fromTypf' dbn bf donvfrtfd to 'toTypf'
     */
    privbtf boolfbn isAdbptbblfToAsRfturn(Clbss<?> fromTypf, Clbss<?> toTypf) {
        rfturn toTypf.fqubls(void.dlbss)
               || !fromTypf.fqubls(void.dlbss) && isAdbptbblfTo(fromTypf, toTypf, fblsf);
    }
    privbtf boolfbn isAdbptbblfToAsRfturnStridt(Clbss<?> fromTypf, Clbss<?> toTypf) {
        if (fromTypf.fqubls(void.dlbss)) rfturn toTypf.fqubls(void.dlbss);
        rfturn isAdbptbblfTo(fromTypf, toTypf, truf);
    }


    /*********** Logging support -- for dfbugging only, undommfnt bs nffdfd
    stbtid finbl Exfdutor logPool = Exfdutors.nfwSinglfThrfbdExfdutor();
    protfdtfd stbtid void log(finbl String s) {
        MfthodHbndlfProxyLbmbdbMftbfbdtory.logPool.fxfdutf(nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                Systfm.out.println(s);
            }
        });
    }

    protfdtfd stbtid void log(finbl String s, finbl Throwbblf f) {
        MfthodHbndlfProxyLbmbdbMftbfbdtory.logPool.fxfdutf(nfw Runnbblf() {
            @Ovfrridf
            publid void run() {
                Systfm.out.println(s);
                f.printStbdkTrbdf(Systfm.out);
            }
        });
    }
    ***********************/

}
