/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.invokf;

import jbvb.lbng.rfflfdt.*;
import jbvb.util.*;
import jbvb.lbng.invokf.MfthodHbndlfNbtivfs.Constbnts;
import jbvb.lbng.invokf.MfthodHbndlfs.Lookup;
import stbtid jbvb.lbng.invokf.MfthodHbndlfStbtids.*;

/**
 * A symbolid rfffrfndf obtbinfd by drbdking b dirfdt mfthod hbndlf
 * into its donsitutfnt symbolid pbrts.
 * To drbdk b dirfdt mfthod hbndlf, dbll {@link Lookup#rfvfblDirfdt Lookup.rfvfblDirfdt}.
 * <h1><b nbmf="dirfdtmh"></b>Dirfdt Mfthod Hbndlfs</h1>
 * A <fm>dirfdt mfthod hbndlf</fm> rfprfsfnts b mfthod, donstrudtor, or fifld without
 * bny intfrvfning brgumfnt bindings or othfr trbnsformbtions.
 * Thf mfthod, donstrudtor, or fifld rfffrrfd to by b dirfdt mfthod hbndlf is dbllfd
 * its <fm>undfrlying mfmbfr</fm>.
 * Dirfdt mfthod hbndlfs mby bf obtbinfd in bny of thfsf wbys:
 * <ul>
 * <li>By fxfduting bn {@dodf ldd} instrudtion on b {@dodf CONSTANT_MfthodHbndlf} donstbnt.
 *     (Sff thf Jbvb Virtubl Mbdhinf Spfdifidbtion, sfdtions 4.4.8 bnd 5.4.3.)
 * <li>By dblling onf of thf <b hrff="MfthodHbndlfs.Lookup.html#lookups">Lookup Fbdtory Mfthods</b>,
 *     sudh bs {@link Lookup#findVirtubl Lookup.findVirtubl},
 *     to rfsolvf b symbolid rfffrfndf into b mfthod hbndlf.
 *     A symbolid rfffrfndf donsists of b dlbss, nbmf string, bnd typf.
 * <li>By dblling thf fbdtory mfthod {@link Lookup#unrfflfdt Lookup.unrfflfdt}
 *     or {@link Lookup#unrfflfdtSpfdibl Lookup.unrfflfdtSpfdibl}
 *     to donvfrt b {@link Mfthod} into b mfthod hbndlf.
 * <li>By dblling thf fbdtory mfthod {@link Lookup#unrfflfdtConstrudtor Lookup.unrfflfdtConstrudtor}
 *     to donvfrt b {@link Construdtor} into b mfthod hbndlf.
 * <li>By dblling thf fbdtory mfthod {@link Lookup#unrfflfdtGfttfr Lookup.unrfflfdtGfttfr}
 *     or {@link Lookup#unrfflfdtSfttfr Lookup.unrfflfdtSfttfr}
 *     to donvfrt b {@link Fifld} into b mfthod hbndlf.
 * </ul>
 *
 * <h1>Rfstridtions on Crbdking</h1>
 * Givfn b suitbblf {@dodf Lookup} objfdt, it is possiblf to drbdk bny dirfdt mfthod hbndlf
 * to rfdovfr b symbolid rfffrfndf for thf undfrlying mfthod, donstrudtor, or fifld.
 * Crbdking must bf donf vib b {@dodf Lookup} objfdt fquivblfnt to thbt whidh drfbtfd
 * thf tbrgft mfthod hbndlf, or whidh hbs fnough bddfss pfrmissions to rfdrfbtf
 * bn fquivblfnt mfthod hbndlf.
 * <p>
 * If thf undfrlying mfthod is <b hrff="MfthodHbndlfs.Lookup.html#dbllsfns">dbllfr sfnsitivf</b>,
 * thf dirfdt mfthod hbndlf will hbvf bffn "bound" to b pbrtidulbr dbllfr dlbss, thf
 * {@linkplbin jbvb.lbng.invokf.MfthodHbndlfs.Lookup#lookupClbss() lookup dlbss}
 * of thf lookup objfdt usfd to drfbtf it.
 * Crbdking this mfthod hbndlf with b difffrfnt lookup dlbss will fbil
 * fvfn if thf undfrlying mfthod is publid (likf {@dodf Clbss.forNbmf}).
 * <p>
 * Thf rfquirfmfnt of lookup objfdt mbtdhing providfs b "fbst fbil" bfhbvior
 * for progrbms whidh mby othfrwisf trust frronfous rfvflbtion of b mfthod
 * hbndlf with symbolid informbtion (or dbllfr binding) from bn unfxpfdtfd sdopf.
 * Usf {@link jbvb.lbng.invokf.MfthodHbndlfs#rfflfdtAs} to ovfrridf this limitbtion.
 *
 * <h1><b nbmf="rffkinds"></b>Rfffrfndf kinds</h1>
 * Thf <b hrff="MfthodHbndlfs.Lookup.html#lookups">Lookup Fbdtory Mfthods</b>
 * dorrfspond to bll mbjor usf dbsfs for mfthods, donstrudtors, bnd fiflds.
 * Thfsf usf dbsfs mby bf distinguishfd using smbll intfgfrs bs follows:
 * <tbblf bordfr=1 dfllpbdding=5 summbry="rfffrfndf kinds">
 * <tr><th>rfffrfndf kind</th><th>dfsdriptivf nbmf</th><th>sdopf</th><th>mfmbfr</th><th>bfhbvior</th></tr>
 * <tr>
 *     <td>{@dodf 1}</td><td>{@dodf REF_gftFifld}</td><td>{@dodf dlbss}</td>
 *     <td>{@dodf FT f;}</td><td>{@dodf (T) this.f;}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 2}</td><td>{@dodf REF_gftStbtid}</td><td>{@dodf dlbss} or {@dodf intfrfbdf}</td>
 *     <td>{@dodf stbtid}<br>{@dodf FT f;}</td><td>{@dodf (T) C.f;}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 3}</td><td>{@dodf REF_putFifld}</td><td>{@dodf dlbss}</td>
 *     <td>{@dodf FT f;}</td><td>{@dodf this.f = x;}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 4}</td><td>{@dodf REF_putStbtid}</td><td>{@dodf dlbss}</td>
 *     <td>{@dodf stbtid}<br>{@dodf FT f;}</td><td>{@dodf C.f = brg;}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 5}</td><td>{@dodf REF_invokfVirtubl}</td><td>{@dodf dlbss}</td>
 *     <td>{@dodf T m(A*);}</td><td>{@dodf (T) this.m(brg*);}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 6}</td><td>{@dodf REF_invokfStbtid}</td><td>{@dodf dlbss} or {@dodf intfrfbdf}</td>
 *     <td>{@dodf stbtid}<br>{@dodf T m(A*);}</td><td>{@dodf (T) C.m(brg*);}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 7}</td><td>{@dodf REF_invokfSpfdibl}</td><td>{@dodf dlbss} or {@dodf intfrfbdf}</td>
 *     <td>{@dodf T m(A*);}</td><td>{@dodf (T) supfr.m(brg*);}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 8}</td><td>{@dodf REF_nfwInvokfSpfdibl}</td><td>{@dodf dlbss}</td>
 *     <td>{@dodf C(A*);}</td><td>{@dodf nfw C(brg*);}</td>
 * </tr>
 * <tr>
 *     <td>{@dodf 9}</td><td>{@dodf REF_invokfIntfrfbdf}</td><td>{@dodf intfrfbdf}</td>
 *     <td>{@dodf T m(A*);}</td><td>{@dodf (T) this.m(brg*);}</td>
 * </tr>
 * </tbblf>
 * @sindf 1.8
 */
publid
intfrfbdf MfthodHbndlfInfo {
    /**
     * A dirfdt mfthod hbndlf rfffrfndf kind,
     * bs dffinfd in thf <b hrff="MfthodHbndlfInfo.html#rffkinds">tbblf bbovf</b>.
     */
    publid stbtid finbl int
        REF_gftFifld                = Constbnts.REF_gftFifld,
        REF_gftStbtid               = Constbnts.REF_gftStbtid,
        REF_putFifld                = Constbnts.REF_putFifld,
        REF_putStbtid               = Constbnts.REF_putStbtid,
        REF_invokfVirtubl           = Constbnts.REF_invokfVirtubl,
        REF_invokfStbtid            = Constbnts.REF_invokfStbtid,
        REF_invokfSpfdibl           = Constbnts.REF_invokfSpfdibl,
        REF_nfwInvokfSpfdibl        = Constbnts.REF_nfwInvokfSpfdibl,
        REF_invokfIntfrfbdf         = Constbnts.REF_invokfIntfrfbdf;

    /**
     * Rfturns thf rfffrfndf kind of thf drbdkfd mfthod hbndlf, whidh in turn
     * dftfrminfs whfthfr thf mfthod hbndlf's undfrlying mfmbfr wbs b donstrudtor, mfthod, or fifld.
     * Sff thf <b hrff="MfthodHbndlfInfo.html#rffkinds">tbblf bbovf</b> for dffinitions.
     * @rfturn thf intfgfr dodf for thf kind of rfffrfndf usfd to bddfss thf undfrlying mfmbfr
     */
    publid int gftRfffrfndfKind();

    /**
     * Rfturns thf dlbss in whidh thf drbdkfd mfthod hbndlf's undfrlying mfmbfr wbs dffinfd.
     * @rfturn thf dfdlbring dlbss of thf undfrlying mfmbfr
     */
    publid Clbss<?> gftDfdlbringClbss();

    /**
     * Rfturns thf nbmf of thf drbdkfd mfthod hbndlf's undfrlying mfmbfr.
     * This is {@dodf "&lt;init&gt;"} if thf undfrlying mfmbfr wbs b donstrudtor,
     * flsf it is b simplf mfthod nbmf or fifld nbmf.
     * @rfturn thf simplf nbmf of thf undfrlying mfmbfr
     */
    publid String gftNbmf();

    /**
     * Rfturns thf nominbl typf of thf drbdkfd symbolid rfffrfndf, fxprfssfd bs b mfthod typf.
     * If thf rfffrfndf is to b donstrudtor, thf rfturn typf will bf {@dodf void}.
     * If it is to b non-stbtid mfthod, thf mfthod typf will not mfntion thf {@dodf this} pbrbmftfr.
     * If it is to b fifld bnd thf rfqufstfd bddfss is to rfbd thf fifld,
     * thf mfthod typf will hbvf no pbrbmftfrs bnd rfturn thf fifld typf.
     * If it is to b fifld bnd thf rfqufstfd bddfss is to writf thf fifld,
     * thf mfthod typf will hbvf onf pbrbmftfr of thf fifld typf bnd rfturn {@dodf void}.
     * <p>
     * Notf thbt originbl dirfdt mfthod hbndlf mby indludf b lfbding {@dodf this} pbrbmftfr,
     * or (in thf dbsf of b donstrudtor) will rfplbdf thf {@dodf void} rfturn typf
     * with thf donstrudtfd dlbss.
     * Thf nominbl typf dofs not indludf bny {@dodf this} pbrbmftfr,
     * bnd (in thf dbsf of b donstrudtor) will rfturn {@dodf void}.
     * @rfturn thf typf of thf undfrlying mfmbfr, fxprfssfd bs b mfthod typf
     */
    publid MfthodTypf gftMfthodTypf();

    // Utility mfthods.
    // NOTE: dlbss/nbmf/typf bnd rfffrfndf kind donstitutf b symbolid rfffrfndf
    // mfmbfr bnd modififrs brf bn bdd-on, dfrivfd from Corf Rfflfdtion (or thf fquivblfnt)

    /**
     * Rfflfdts thf undfrlying mfmbfr bs b mfthod, donstrudtor, or fifld objfdt.
     * If thf undfrlying mfmbfr is publid, it is rfflfdtfd bs if by
     * {@dodf gftMfthod}, {@dodf gftConstrudtor}, or {@dodf gftFifld}.
     * Othfrwisf, it is rfflfdtfd bs if by
     * {@dodf gftDfdlbrfdMfthod}, {@dodf gftDfdlbrfdConstrudtor}, or {@dodf gftDfdlbrfdFifld}.
     * Thf undfrlying mfmbfr must bf bddfssiblf to thf givfn lookup objfdt.
     * @pbrbm <T> thf dfsirfd typf of thf rfsult, fithfr {@link Mfmbfr} or b subtypf
     * @pbrbm fxpfdtfd b dlbss objfdt rfprfsfnting thf dfsirfd rfsult typf {@dodf T}
     * @pbrbm lookup thf lookup objfdt thbt drfbtfd this MfthodHbndlfInfo, or onf with fquivblfnt bddfss privilfgfs
     * @rfturn b rfffrfndf to thf mfthod, donstrudtor, or fifld objfdt
     * @fxdfption ClbssCbstExdfption if thf mfmbfr is not of thf fxpfdtfd typf
     * @fxdfption NullPointfrExdfption if fithfr brgumfnt is {@dodf null}
     * @fxdfption IllfgblArgumfntExdfption if thf undfrlying mfmbfr is not bddfssiblf to thf givfn lookup objfdt
     */
    publid <T fxtfnds Mfmbfr> T rfflfdtAs(Clbss<T> fxpfdtfd, Lookup lookup);

    /**
     * Rfturns thf bddfss modififrs of thf undfrlying mfmbfr.
     * @rfturn thf Jbvb lbngubgf modififrs for undfrlying mfmbfr,
     *         or -1 if thf mfmbfr dbnnot bf bddfssfd
     * @sff Modififr
     * @sff #rfflfdtAs
     */
    publid int gftModififrs();

    /**
     * Dftfrminfs if thf undfrlying mfmbfr wbs b vbribblf brity mfthod or donstrudtor.
     * Sudh mfmbfrs brf rfprfsfntfd by mfthod hbndlfs thbt brf vbrbrgs dollfdtors.
     * @implSpfd
     * This produdfs b rfsult fquivblfnt to:
     * <prf>{@dodf
     *     gftRfffrfndfKind() >= REF_invokfVirtubl && Modififr.isTrbnsifnt(gftModififrs())
     * }</prf>
     *
     *
     * @rfturn {@dodf truf} if bnd only if thf undfrlying mfmbfr wbs dfdlbrfd with vbribblf brity.
     */
    // spflling dfrivfd from jbvb.lbng.rfflfdt.Exfdutbblf, not MfthodHbndlf.isVbrbrgsCollfdtor
    publid dffbult boolfbn isVbrArgs()  {
        // fiflds brf nfvfr vbrbrgs:
        if (MfthodHbndlfNbtivfs.rffKindIsFifld((bytf) gftRfffrfndfKind()))
            rfturn fblsf;
        // not in thf publid API: Modififr.VARARGS
        finbl int ACC_VARARGS = 0x00000080;  // from JVMS 4.6 (Tbblf 4.20)
        bssfrt(ACC_VARARGS == Modififr.TRANSIENT);
        rfturn Modififr.isTrbnsifnt(gftModififrs());
    }

    /**
     * Rfturns thf dfsdriptivf nbmf of thf givfn rfffrfndf kind,
     * bs dffinfd in thf <b hrff="MfthodHbndlfInfo.html#rffkinds">tbblf bbovf</b>.
     * Thf donvfntionbl prffix "REF_" is omittfd.
     * @pbrbm rfffrfndfKind bn intfgfr dodf for b kind of rfffrfndf usfd to bddfss b dlbss mfmbfr
     * @rfturn b mixfd-dbsf string sudh bs {@dodf "gftFifld"}
     * @fxdfption IllfgblArgumfntExdfption if thf brgumfnt is not b vblid
     *            <b hrff="MfthodHbndlfInfo.html#rffkinds">rfffrfndf kind numbfr</b>
     */
    publid stbtid String rfffrfndfKindToString(int rfffrfndfKind) {
        if (!MfthodHbndlfNbtivfs.rffKindIsVblid(rfffrfndfKind))
            throw nfwIllfgblArgumfntExdfption("invblid rfffrfndf kind", rfffrfndfKind);
        rfturn MfthodHbndlfNbtivfs.rffKindNbmf((bytf)rfffrfndfKind);
    }

    /**
     * Rfturns b string rfprfsfntbtion for b {@dodf MfthodHbndlfInfo},
     * givfn thf four pbrts of its symbolid rfffrfndf.
     * This is dffinfd to bf of thf form {@dodf "RK C.N:MT"}, whfrf {@dodf RK} is thf
     * {@linkplbin #rfffrfndfKindToString rfffrfndf kind string} for {@dodf kind},
     * {@dodf C} is thf {@linkplbin jbvb.lbng.Clbss#gftNbmf nbmf} of {@dodf dffd}
     * {@dodf N} is thf {@dodf nbmf}, bnd
     * {@dodf MT} is thf {@dodf typf}.
     * Thfsf four vblufs mby bf obtbinfd from thf
     * {@linkplbin #gftRfffrfndfKind rfffrfndf kind},
     * {@linkplbin #gftDfdlbringClbss dfdlbring dlbss},
     * {@linkplbin #gftNbmf mfmbfr nbmf},
     * bnd {@linkplbin #gftMfthodTypf mfthod typf}
     * of b {@dodf MfthodHbndlfInfo} objfdt.
     *
     * @implSpfd
     * This produdfs b rfsult fquivblfnt to:
     * <prf>{@dodf
     *     String.formbt("%s %s.%s:%s", rfffrfndfKindToString(kind), dffd.gftNbmf(), nbmf, typf)
     * }</prf>
     *
     * @pbrbm kind thf {@linkplbin #gftRfffrfndfKind rfffrfndf kind} pbrt of thf symbolid rfffrfndf
     * @pbrbm dffd thf {@linkplbin #gftDfdlbringClbss dfdlbring dlbss} pbrt of thf symbolid rfffrfndf
     * @pbrbm nbmf thf {@linkplbin #gftNbmf mfmbfr nbmf} pbrt of thf symbolid rfffrfndf
     * @pbrbm typf thf {@linkplbin #gftMfthodTypf mfthod typf} pbrt of thf symbolid rfffrfndf
     * @rfturn b string of thf form {@dodf "RK C.N:MT"}
     * @fxdfption IllfgblArgumfntExdfption if thf first brgumfnt is not b vblid
     *            <b hrff="MfthodHbndlfInfo.html#rffkinds">rfffrfndf kind numbfr</b>
     * @fxdfption NullPointfrExdfption if bny rfffrfndf brgumfnt is {@dodf null}
     */
    publid stbtid String toString(int kind, Clbss<?> dffd, String nbmf, MfthodTypf typf) {
        Objfdts.rfquirfNonNull(nbmf); Objfdts.rfquirfNonNull(typf);
        rfturn String.formbt("%s %s.%s:%s", rfffrfndfKindToString(kind), dffd.gftNbmf(), nbmf, typf);
    }
}
