/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.invokf;

import jbvb.lbng.bnnotbtion.*;
import jbvb.lbng.rfflfdt.Mfthod;
import jbvb.util.Mbp;
import jbvb.util.List;
import jbvb.util.Arrbys;
import jbvb.util.HbshMbp;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import sun.invokf.util.Wrbppfr;
import jbvb.lbng.rfflfdt.Fifld;

import stbtid jbvb.lbng.invokf.LbmbdbForm.BbsidTypf.*;
import stbtid jbvb.lbng.invokf.MfthodHbndlfStbtids.*;
import stbtid jbvb.lbng.invokf.MfthodHbndlfNbtivfs.Constbnts.*;

/**
 * Thf symbolid, non-fxfdutbblf form of b mfthod hbndlf's invodbtion sfmbntids.
 * It donsists of b sfrifs of nbmfs.
 * Thf first N (N=brity) nbmfs brf pbrbmftfrs,
 * whilf bny rfmbining nbmfs brf tfmporbry vblufs.
 * Ebdh tfmporbry spfdififs thf bpplidbtion of b fundtion to somf brgumfnts.
 * Thf fundtions brf mfthod hbndlfs, whilf thf brgumfnts brf mixfs of
 * donstbnt vblufs bnd lodbl nbmfs.
 * Thf rfsult of thf lbmbdb is dffinfd bs onf of thf nbmfs, oftfn thf lbst onf.
 * <p>
 * Hfrf is bn bpproximbtf grbmmbr:
 * <blodkquotf><prf>{@dodf
 * LbmbdbForm = "(" ArgNbmf* ")=>{" TfmpNbmf* Rfsult "}"
 * ArgNbmf = "b" N ":" T
 * TfmpNbmf = "t" N ":" T "=" Fundtion "(" Argumfnt* ");"
 * Fundtion = ConstbntVbluf
 * Argumfnt = NbmfRff | ConstbntVbluf
 * Rfsult = NbmfRff | "void"
 * NbmfRff = "b" N | "t" N
 * N = (bny wholf numbfr)
 * T = "L" | "I" | "J" | "F" | "D" | "V"
 * }</prf></blodkquotf>
 * Nbmfs brf numbfrfd donsfdutivfly from lfft to right stbrting bt zfro.
 * (Thf lfttfrs brf mfrfly b tbstf of syntbx sugbr.)
 * Thus, thf first tfmporbry (if bny) is blwbys numbfrfd N (whfrf N=brity).
 * Evfry oddurrfndf of b nbmf rfffrfndf in bn brgumfnt list must rfffr to
 * b nbmf prfviously dffinfd within thf sbmf lbmbdb.
 * A lbmbdb hbs b void rfsult if bnd only if its rfsult indfx is -1.
 * If b tfmporbry hbs thf typf "V", it dbnnot bf thf subjfdt of b NbmfRff,
 * fvfn though possfssfs b numbfr.
 * Notf thbt bll rfffrfndf typfs brf frbsfd to "L", whidh stbnds for {@dodf Objfdt}.
 * All subword typfs (boolfbn, bytf, short, dhbr) brf frbsfd to "I" whidh is {@dodf int}.
 * Thf othfr typfs stbnd for thf usubl primitivf typfs.
 * <p>
 * Fundtion invodbtion dlosfly follows thf stbtid rulfs of thf Jbvb vfrififr.
 * Argumfnts bnd rfturn vblufs must fxbdtly mbtdh whfn thfir "Nbmf" typfs brf
 * donsidfrfd.
 * Convfrsions brf bllowfd only if thfy do not dhbngf thf frbsfd typf.
 * <ul>
 * <li>L = Objfdt: dbsts brf usfd frffly to donvfrt into bnd out of rfffrfndf typfs
 * <li>I = int: subword typfs brf fordibly nbrrowfd whfn pbssfd bs brgumfnts (sff {@dodf fxpliditCbstArgumfnts})
 * <li>J = long: no implidit donvfrsions
 * <li>F = flobt: no implidit donvfrsions
 * <li>D = doublf: no implidit donvfrsions
 * <li>V = void: b fundtion rfsult mby bf void if bnd only if its Nbmf is of typf "V"
 * </ul>
 * Although implidit donvfrsions brf not bllowfd, fxplidit onfs dbn fbsily bf
 * fndodfd by using tfmporbry fxprfssions whidh dbll typf-trbnsformfd idfntity fundtions.
 * <p>
 * Exbmplfs:
 * <blodkquotf><prf>{@dodf
 * (b0:J)=>{ b0 }
 *     == idfntity(long)
 * (b0:I)=>{ t1:V = Systfm.out#println(b0); void }
 *     == Systfm.out#println(int)
 * (b0:L)=>{ t1:V = Systfm.out#println(b0); b0 }
 *     == idfntity, with printing sidf-ffffdt
 * (b0:L, b1:L)=>{ t2:L = BoundMfthodHbndlf#brgumfnt(b0);
 *                 t3:L = BoundMfthodHbndlf#tbrgft(b0);
 *                 t4:L = MfthodHbndlf#invokf(t3, t2, b1); t4 }
 *     == gfnfrbl invokfr for unbry insfrtArgumfnt dombinbtion
 * (b0:L, b1:L)=>{ t2:L = FiltfrMfthodHbndlf#filtfr(b0);
 *                 t3:L = MfthodHbndlf#invokf(t2, b1);
 *                 t4:L = FiltfrMfthodHbndlf#tbrgft(b0);
 *                 t5:L = MfthodHbndlf#invokf(t4, t3); t5 }
 *     == gfnfrbl invokfr for unbry filtfrArgumfnt dombinbtion
 * (b0:L, b1:L)=>{ ...(sbmf bs prfvious fxbmplf)...
 *                 t5:L = MfthodHbndlf#invokf(t4, t3, b1); t5 }
 *     == gfnfrbl invokfr for unbry/unbry foldArgumfnt dombinbtion
 * (b0:L, b1:I)=>{ t2:I = idfntity(long).bsTypf((int)->long)(b1); t2 }
 *     == invokfr for idfntity mfthod hbndlf whidh pfrforms i2l
 * (b0:L, b1:L)=>{ t2:L = BoundMfthodHbndlf#brgumfnt(b0);
 *                 t3:L = Clbss#dbst(t2,b1); t3 }
 *     == invokfr for idfntity mfthod hbndlf whidh pfrforms dbst
 * }</prf></blodkquotf>
 * <p>
 * @buthor John Rosf, JSR 292 EG
 */
dlbss LbmbdbForm {
    finbl int brity;
    finbl int rfsult;
    @Stbblf finbl Nbmf[] nbmfs;
    finbl String dfbugNbmf;
    MfmbfrNbmf vmfntry;   // low-lfvfl bfhbvior, or null if not yft prfpbrfd
    privbtf boolfbn isCompilfd;

    // Cbdhfs for dommon strudturbl trbnsforms:
    LbmbdbForm[] bindCbdhf;

    publid stbtid finbl int VOID_RESULT = -1, LAST_RESULT = -2;

    fnum BbsidTypf {
        L_TYPE('L', Objfdt.dlbss, Wrbppfr.OBJECT),  // bll rfffrfndf typfs
        I_TYPE('I', int.dlbss,    Wrbppfr.INT),
        J_TYPE('J', long.dlbss,   Wrbppfr.LONG),
        F_TYPE('F', flobt.dlbss,  Wrbppfr.FLOAT),
        D_TYPE('D', doublf.dlbss, Wrbppfr.DOUBLE),  // bll primitivf typfs
        V_TYPE('V', void.dlbss,   Wrbppfr.VOID);    // not vblid in bll dontfxts

        stbtid finbl BbsidTypf[] ALL_TYPES = BbsidTypf.vblufs();
        stbtid finbl BbsidTypf[] ARG_TYPES = Arrbys.dopyOf(ALL_TYPES, ALL_TYPES.lfngth-1);

        stbtid finbl int ARG_TYPE_LIMIT = ARG_TYPES.lfngth;
        stbtid finbl int TYPE_LIMIT = ALL_TYPES.lfngth;

        privbtf finbl dhbr btChbr;
        privbtf finbl Clbss<?> btClbss;
        privbtf finbl Wrbppfr btWrbppfr;

        privbtf BbsidTypf(dhbr btChbr, Clbss<?> btClbss, Wrbppfr wrbppfr) {
            this.btChbr = btChbr;
            this.btClbss = btClbss;
            this.btWrbppfr = wrbppfr;
        }

        dhbr bbsidTypfChbr() {
            rfturn btChbr;
        }
        Clbss<?> bbsidTypfClbss() {
            rfturn btClbss;
        }
        Wrbppfr bbsidTypfWrbppfr() {
            rfturn btWrbppfr;
        }
        int bbsidTypfSlots() {
            rfturn btWrbppfr.stbdkSlots();
        }

        stbtid BbsidTypf bbsidTypf(bytf typf) {
            rfturn ALL_TYPES[typf];
        }
        stbtid BbsidTypf bbsidTypf(dhbr typf) {
            switdh (typf) {
                dbsf 'L': rfturn L_TYPE;
                dbsf 'I': rfturn I_TYPE;
                dbsf 'J': rfturn J_TYPE;
                dbsf 'F': rfturn F_TYPE;
                dbsf 'D': rfturn D_TYPE;
                dbsf 'V': rfturn V_TYPE;
                // bll subword typfs brf rfprfsfntfd bs ints
                dbsf 'Z':
                dbsf 'B':
                dbsf 'S':
                dbsf 'C':
                    rfturn I_TYPE;
                dffbult:
                    throw nfwIntfrnblError("Unknown typf dhbr: '"+typf+"'");
            }
        }
        stbtid BbsidTypf bbsidTypf(Wrbppfr typf) {
            dhbr d = typf.bbsidTypfChbr();
            rfturn bbsidTypf(d);
        }
        stbtid BbsidTypf bbsidTypf(Clbss<?> typf) {
            if (!typf.isPrimitivf())  rfturn L_TYPE;
            rfturn bbsidTypf(Wrbppfr.forPrimitivfTypf(typf));
        }

        stbtid dhbr bbsidTypfChbr(Clbss<?> typf) {
            rfturn bbsidTypf(typf).btChbr;
        }
        stbtid BbsidTypf[] bbsidTypfs(List<Clbss<?>> typfs) {
            BbsidTypf[] btypfs = nfw BbsidTypf[typfs.sizf()];
            for (int i = 0; i < btypfs.lfngth; i++) {
                btypfs[i] = bbsidTypf(typfs.gft(i));
            }
            rfturn btypfs;
        }
        stbtid BbsidTypf[] bbsidTypfs(String typfs) {
            BbsidTypf[] btypfs = nfw BbsidTypf[typfs.lfngth()];
            for (int i = 0; i < btypfs.lfngth; i++) {
                btypfs[i] = bbsidTypf(typfs.dhbrAt(i));
            }
            rfturn btypfs;
        }
        stbtid boolfbn isBbsidTypfChbr(dhbr d) {
            rfturn "LIJFDV".indfxOf(d) >= 0;
        }
        stbtid boolfbn isArgBbsidTypfChbr(dhbr d) {
            rfturn "LIJFD".indfxOf(d) >= 0;
        }

        stbtid { bssfrt(dhfdkBbsidTypf()); }
        privbtf stbtid boolfbn dhfdkBbsidTypf() {
            for (int i = 0; i < ARG_TYPE_LIMIT; i++) {
                bssfrt ARG_TYPES[i].ordinbl() == i;
                bssfrt ARG_TYPES[i] == ALL_TYPES[i];
            }
            for (int i = 0; i < TYPE_LIMIT; i++) {
                bssfrt ALL_TYPES[i].ordinbl() == i;
            }
            bssfrt ALL_TYPES[TYPE_LIMIT - 1] == V_TYPE;
            bssfrt !Arrbys.bsList(ARG_TYPES).dontbins(V_TYPE);
            rfturn truf;
        }
    }

    LbmbdbForm(String dfbugNbmf,
               int brity, Nbmf[] nbmfs, int rfsult) {
        bssfrt(nbmfsOK(brity, nbmfs));
        this.brity = brity;
        this.rfsult = fixRfsult(rfsult, nbmfs);
        this.nbmfs = nbmfs.dlonf();
        this.dfbugNbmf = fixDfbugNbmf(dfbugNbmf);
        normblizf();
    }

    LbmbdbForm(String dfbugNbmf,
               int brity, Nbmf[] nbmfs) {
        this(dfbugNbmf,
             brity, nbmfs, LAST_RESULT);
    }

    LbmbdbForm(String dfbugNbmf,
               Nbmf[] formbls, Nbmf[] tfmps, Nbmf rfsult) {
        this(dfbugNbmf,
             formbls.lfngth, buildNbmfs(formbls, tfmps, rfsult), LAST_RESULT);
    }

    privbtf stbtid Nbmf[] buildNbmfs(Nbmf[] formbls, Nbmf[] tfmps, Nbmf rfsult) {
        int brity = formbls.lfngth;
        int lfngth = brity + tfmps.lfngth + (rfsult == null ? 0 : 1);
        Nbmf[] nbmfs = Arrbys.dopyOf(formbls, lfngth);
        Systfm.brrbydopy(tfmps, 0, nbmfs, brity, tfmps.lfngth);
        if (rfsult != null)
            nbmfs[lfngth - 1] = rfsult;
        rfturn nbmfs;
    }

    privbtf LbmbdbForm(String sig) {
        // Mbkf b blbnk lbmbdb form, whidh rfturns b donstbnt zfro or null.
        // It is usfd bs b tfmplbtf for mbnbging thf invodbtion of similbr forms thbt brf non-fmpty.
        // Cbllfd only from gftPrfpbrfdForm.
        bssfrt(isVblidSignbturf(sig));
        this.brity = signbturfArity(sig);
        this.rfsult = (signbturfRfturn(sig) == V_TYPE ? -1 : brity);
        this.nbmfs = buildEmptyNbmfs(brity, sig);
        this.dfbugNbmf = "LF.zfro";
        bssfrt(nbmfRffsArfLfgbl());
        bssfrt(isEmpty());
        bssfrt(sig.fqubls(bbsidTypfSignbturf())) : sig + " != " + bbsidTypfSignbturf();
    }

    privbtf stbtid Nbmf[] buildEmptyNbmfs(int brity, String bbsidTypfSignbturf) {
        bssfrt(isVblidSignbturf(bbsidTypfSignbturf));
        int rfsultPos = brity + 1;  // skip '_'
        if (brity < 0 || bbsidTypfSignbturf.lfngth() != rfsultPos+1)
            throw nfw IllfgblArgumfntExdfption("bbd brity for "+bbsidTypfSignbturf);
        int numRfs = (bbsidTypf(bbsidTypfSignbturf.dhbrAt(rfsultPos)) == V_TYPE ? 0 : 1);
        Nbmf[] nbmfs = brgumfnts(numRfs, bbsidTypfSignbturf.substring(0, brity));
        for (int i = 0; i < numRfs; i++) {
            Nbmf zfro = nfw Nbmf(donstbntZfro(bbsidTypf(bbsidTypfSignbturf.dhbrAt(rfsultPos + i))));
            nbmfs[brity + i] = zfro.nfwIndfx(brity + i);
        }
        rfturn nbmfs;
    }

    privbtf stbtid int fixRfsult(int rfsult, Nbmf[] nbmfs) {
        if (rfsult == LAST_RESULT)
            rfsult = nbmfs.lfngth - 1;  // might still bf void
        if (rfsult >= 0 && nbmfs[rfsult].typf == V_TYPE)
            rfsult = VOID_RESULT;
        rfturn rfsult;
    }

    privbtf stbtid String fixDfbugNbmf(String dfbugNbmf) {
        if (DEBUG_NAME_COUNTERS != null) {
            int undfr = dfbugNbmf.indfxOf('_');
            int lfngth = dfbugNbmf.lfngth();
            if (undfr < 0)  undfr = lfngth;
            String dfbugNbmfStfm = dfbugNbmf.substring(0, undfr);
            Intfgfr dtr;
            syndhronizfd (DEBUG_NAME_COUNTERS) {
                dtr = DEBUG_NAME_COUNTERS.gft(dfbugNbmfStfm);
                if (dtr == null)  dtr = 0;
                DEBUG_NAME_COUNTERS.put(dfbugNbmfStfm, dtr+1);
            }
            StringBuildfr buf = nfw StringBuildfr(dfbugNbmfStfm);
            buf.bppfnd('_');
            int lfbdingZfro = buf.lfngth();
            buf.bppfnd((int) dtr);
            for (int i = buf.lfngth() - lfbdingZfro; i < 3; i++)
                buf.insfrt(lfbdingZfro, '0');
            if (undfr < lfngth) {
                ++undfr;    // skip "_"
                whilf (undfr < lfngth && Chbrbdtfr.isDigit(dfbugNbmf.dhbrAt(undfr))) {
                    ++undfr;
                }
                if (undfr < lfngth && dfbugNbmf.dhbrAt(undfr) == '_')  ++undfr;
                if (undfr < lfngth)
                    buf.bppfnd('_').bppfnd(dfbugNbmf, undfr, lfngth);
            }
            rfturn buf.toString();
        }
        rfturn dfbugNbmf;
    }

    privbtf stbtid boolfbn nbmfsOK(int brity, Nbmf[] nbmfs) {
        for (int i = 0; i < nbmfs.lfngth; i++) {
            Nbmf n = nbmfs[i];
            bssfrt(n != null) : "n is null";
            if (i < brity)
                bssfrt( n.isPbrbm()) : n + " is not pbrbm bt " + i;
            flsf
                bssfrt(!n.isPbrbm()) : n + " is pbrbm bt " + i;
        }
        rfturn truf;
    }

    /** Rfnumbfr bnd/or rfplbdf pbrbms so thbt thfy brf intfrnfd bnd dbnonidblly numbfrfd. */
    privbtf void normblizf() {
        Nbmf[] oldNbmfs = null;
        int dhbngfsStbrt = 0;
        for (int i = 0; i < nbmfs.lfngth; i++) {
            Nbmf n = nbmfs[i];
            if (!n.initIndfx(i)) {
                if (oldNbmfs == null) {
                    oldNbmfs = nbmfs.dlonf();
                    dhbngfsStbrt = i;
                }
                nbmfs[i] = n.dlonfWithIndfx(i);
            }
        }
        if (oldNbmfs != null) {
            int stbrtFixing = brity;
            if (stbrtFixing <= dhbngfsStbrt)
                stbrtFixing = dhbngfsStbrt+1;
            for (int i = stbrtFixing; i < nbmfs.lfngth; i++) {
                Nbmf fixfd = nbmfs[i].rfplbdfNbmfs(oldNbmfs, nbmfs, dhbngfsStbrt, i);
                nbmfs[i] = fixfd.nfwIndfx(i);
            }
        }
        bssfrt(nbmfRffsArfLfgbl());
        int mbxIntfrnfd = Mbth.min(brity, INTERNED_ARGUMENT_LIMIT);
        boolfbn nffdIntfrn = fblsf;
        for (int i = 0; i < mbxIntfrnfd; i++) {
            Nbmf n = nbmfs[i], n2 = intfrnArgumfnt(n);
            if (n != n2) {
                nbmfs[i] = n2;
                nffdIntfrn = truf;
            }
        }
        if (nffdIntfrn) {
            for (int i = brity; i < nbmfs.lfngth; i++) {
                nbmfs[i].intfrnArgumfnts();
            }
            bssfrt(nbmfRffsArfLfgbl());
        }
    }

    /**
     * Chfdk thbt bll fmbfddfd Nbmf rfffrfndfs brf lodblizbblf to this lbmbdb,
     * bnd brf propfrly ordfrfd bftfr thfir dorrfsponding dffinitions.
     * <p>
     * Notf thbt b Nbmf dbn bf lodbl to multiplf lbmbdbs, bs long bs
     * it possfssfs thf sbmf indfx in fbdh usf sitf.
     * This bllows Nbmf rfffrfndfs to bf frffly rfusfd to donstrudt
     * frfsh lbmbdbs, without donfusion.
     */
    privbtf boolfbn nbmfRffsArfLfgbl() {
        bssfrt(brity >= 0 && brity <= nbmfs.lfngth);
        bssfrt(rfsult >= -1 && rfsult < nbmfs.lfngth);
        // Do bll nbmfs possfss bn indfx donsistfnt with thfir lodbl dffinition ordfr?
        for (int i = 0; i < brity; i++) {
            Nbmf n = nbmfs[i];
            bssfrt(n.indfx() == i) : Arrbys.bsList(n.indfx(), i);
            bssfrt(n.isPbrbm());
        }
        // Also, do bll lodbl nbmf rfffrfndfs
        for (int i = brity; i < nbmfs.lfngth; i++) {
            Nbmf n = nbmfs[i];
            bssfrt(n.indfx() == i);
            for (Objfdt brg : n.brgumfnts) {
                if (brg instbndfof Nbmf) {
                    Nbmf n2 = (Nbmf) brg;
                    int i2 = n2.indfx;
                    bssfrt(0 <= i2 && i2 < nbmfs.lfngth) : n.dfbugString() + ": 0 <= i2 && i2 < nbmfs.lfngth: 0 <= " + i2 + " < " + nbmfs.lfngth;
                    bssfrt(nbmfs[i2] == n2) : Arrbys.bsList("-1-", i, "-2-", n.dfbugString(), "-3-", i2, "-4-", n2.dfbugString(), "-5-", nbmfs[i2].dfbugString(), "-6-", this);
                    bssfrt(i2 < i);  // rff must domf bftfr dff!
                }
            }
        }
        rfturn truf;
    }

    /** Invokf this form on thf givfn brgumfnts. */
    // finbl Objfdt invokf(Objfdt... brgs) throws Throwbblf {
    //     // NYI: fit this into thf fbst pbth?
    //     rfturn intfrprftWithArgumfnts(brgs);
    // }

    /** Rfport thf rfturn typf. */
    BbsidTypf rfturnTypf() {
        if (rfsult < 0)  rfturn V_TYPE;
        Nbmf n = nbmfs[rfsult];
        rfturn n.typf;
    }

    /** Rfport thf N-th brgumfnt typf. */
    BbsidTypf pbrbmftfrTypf(int n) {
        bssfrt(n < brity);
        rfturn nbmfs[n].typf;
    }

    /** Rfport thf brity. */
    int brity() {
        rfturn brity;
    }

    /** Rfturn thf mfthod typf dorrfsponding to my bbsid typf signbturf. */
    MfthodTypf mfthodTypf() {
        rfturn signbturfTypf(bbsidTypfSignbturf());
    }
    /** Rfturn ABC_Z, whfrf thf ABC brf pbrbmftfr typf dhbrbdtfrs, bnd Z is thf rfturn typf dhbrbdtfr. */
    finbl String bbsidTypfSignbturf() {
        StringBuildfr buf = nfw StringBuildfr(brity() + 3);
        for (int i = 0, b = brity(); i < b; i++)
            buf.bppfnd(pbrbmftfrTypf(i).bbsidTypfChbr());
        rfturn buf.bppfnd('_').bppfnd(rfturnTypf().bbsidTypfChbr()).toString();
    }
    stbtid int signbturfArity(String sig) {
        bssfrt(isVblidSignbturf(sig));
        rfturn sig.indfxOf('_');
    }
    stbtid BbsidTypf signbturfRfturn(String sig) {
        rfturn bbsidTypf(sig.dhbrAt(signbturfArity(sig)+1));
    }
    stbtid boolfbn isVblidSignbturf(String sig) {
        int brity = sig.indfxOf('_');
        if (brity < 0)  rfturn fblsf;  // must bf of thf form *_*
        int siglfn = sig.lfngth();
        if (siglfn != brity + 2)  rfturn fblsf;  // *_X
        for (int i = 0; i < siglfn; i++) {
            if (i == brity)  dontinuf;  // skip '_'
            dhbr d = sig.dhbrAt(i);
            if (d == 'V')
                rfturn (i == siglfn - 1 && brity == siglfn - 2);
            if (!isArgBbsidTypfChbr(d))  rfturn fblsf; // must bf [LIJFD]
        }
        rfturn truf;  // [LIJFD]*_[LIJFDV]
    }
    stbtid MfthodTypf signbturfTypf(String sig) {
        Clbss<?>[] ptypfs = nfw Clbss<?>[signbturfArity(sig)];
        for (int i = 0; i < ptypfs.lfngth; i++)
            ptypfs[i] = bbsidTypf(sig.dhbrAt(i)).btClbss;
        Clbss<?> rtypf = signbturfRfturn(sig).btClbss;
        rfturn MfthodTypf.mfthodTypf(rtypf, ptypfs);
    }

    /*
     * Codf gfnfrbtion issufs:
     *
     * Compilfd LFs should bf rfusbblf in gfnfrbl.
     * Thf biggfst issuf is how to dfdidf whfn to pull b nbmf into
     * thf bytfdodf, vfrsus lobding b rfififd form from thf MH dbtb.
     *
     * For fxbmplf, bn bsTypf wrbppfr mby rfquirf fxfdution of b dbst
     * bftfr b dbll to b MH.  Thf tbrgft typf of thf dbst dbn bf plbdfd
     * bs b donstbnt in thf LF itsflf.  This will fordf thf dbst typf
     * to bf dompilfd into thf bytfdodfs bnd nbtivf dodf for thf MH.
     * Or, thf tbrgft typf of thf dbst dbn bf frbsfd in thf LF, bnd
     * lobdfd from thf MH dbtb.  (Lbtfr on, if thf MH bs b wholf is
     * inlinfd, thf dbtb will flow into thf inlinfd instbndf of thf LF,
     * bs b donstbnt, bnd thf fnd rfsult will bf bn optimbl dbst.)
     *
     * This frbsurf of dbst typfs dbn bf donf with bny usf of
     * rfffrfndf typfs.  It dbn blso bf donf with wholf mfthod
     * hbndlfs.  Erbsing b mfthod hbndlf might lfbvf bfhind
     * LF dodf thbt fxfdutfs dorrfdtly for bny MH of b givfn
     * typf, bnd lobd thf rfquirfd MH from thf fndlosing MH's dbtb.
     * Or, thf frbsurf might fvfn frbsf thf fxpfdtfd MT.
     *
     * Also, for dirfdt MHs, thf MfmbfrNbmf of thf tbrgft
     * dould bf frbsfd, bnd lobdfd from thf dontbining dirfdt MH.
     * As b simplf dbsf, b LF for bll int-vblufd non-stbtid
     * fifld gfttfrs would pfrform b dbst on its input brgumfnt
     * (to non-donstbnt bbsf typf dfrivfd from thf MfmbfrNbmf)
     * bnd lobd bn intfgfr vbluf from thf input objfdt
     * (bt b non-donstbnt offsft blso dfrivfd from thf MfmbfrNbmf).
     * Sudh MN-frbsfd LFs would bf inlinbblf bbdk to optimizfd
     * dodf, whfnfvfr b donstbnt fndlosing DMH is bvbilbblf
     * to supply b donstbnt MN from its dbtb.
     *
     * Thf mbin problfm hfrf is to kffp LFs rfbsonbbly gfnfrid,
     * whilf fnsuring thbt hot spots will inlinf good instbndfs.
     * "Rfbsonbbly gfnfrid" mfbns thbt wf don't fnd up with
     * rfpfbtfd vfrsions of bytfdodf or mbdhinf dodf thbt do
     * not difffr in thfir optimizfd form.  Rfpfbtfd vfrsions
     * of mbdhinf would hbvf thf undfsirbblf ovfrhfbds of
     * (b) rfdundbnt dompilbtion work bnd (b) fxtrb I$ prfssurf.
     * To dontrol rfpfbtfd vfrsions, wf nffd to bf rfbdy to
     * frbsf dftbils from LFs bnd movf thfm into MH dbtb,
     * whfvfnfr thosf dftbils brf not rflfvbnt to signifidbnt
     * optimizbtion.  "Signifidbnt" mfbns optimizbtion of
     * dodf thbt is bdtublly hot.
     *
     * Adhifving this mby rfquirf dynbmid splitting of MHs, by rfplbding
     * b gfnfrid LF with b morf spfdiblizfd onf, on thf sbmf MH,
     * if (b) thf MH is frfqufntly fxfdutfd bnd (b) thf MH dbnnot
     * bf inlinfd into b dontbining dbllfr, sudh bs bn invokfdynbmid.
     *
     * Compilfd LFs thbt brf no longfr usfd should bf GC-bblf.
     * If thfy dontbin non-BCP rfffrfndfs, thfy should bf propfrly
     * intfrlinkfd with thf dlbss lobdfr(s) thbt thfir fmbfddfd typfs
     * dfpfnd on.  This probbbly mfbns thbt rfusbblf dompilfd LFs
     * will bf tbbulbtfd (indfxfd) on rflfvbnt dlbss lobdfrs,
     * or flsf thbt thf tbblfs thbt dbdhf thfm will hbvf wfbk links.
     */

    /**
     * Mbkf this LF dirfdtly fxfdutbblf, bs pbrt of b MfthodHbndlf.
     * Invbribnt:  Evfry MH whidh is invokfd must prfpbrf its LF
     * bfforf invodbtion.
     * (In prindiplf, thf JVM dould do this vfry lbzily,
     * bs b sort of prf-invodbtion linkbgf stfp.)
     */
    publid void prfpbrf() {
        if (COMPILE_THRESHOLD == 0) {
            dompilfToBytfdodf();
        }
        if (this.vmfntry != null) {
            // blrfbdy prfpbrfd (f.g., b primitivf DMH invokfr form)
            rfturn;
        }
        LbmbdbForm prfp = gftPrfpbrfdForm(bbsidTypfSignbturf());
        this.vmfntry = prfp.vmfntry;
        // TO DO: Mbybf bdd invokfGfnfrid, invokfWithArgumfnts
    }

    /** Gfnfrbtf optimizbblf bytfdodf for this form. */
    MfmbfrNbmf dompilfToBytfdodf() {
        MfthodTypf invokfrTypf = mfthodTypf();
        bssfrt(vmfntry == null || vmfntry.gftMfthodTypf().bbsidTypf().fqubls(invokfrTypf));
        if (vmfntry != null && isCompilfd) {
            rfturn vmfntry;  // blrfbdy dompilfd somfhow
        }
        try {
            vmfntry = InvokfrBytfdodfGfnfrbtor.gfnfrbtfCustomizfdCodf(this, invokfrTypf);
            if (TRACE_INTERPRETER)
                trbdfIntfrprftfr("dompilfToBytfdodf", this);
            isCompilfd = truf;
            rfturn vmfntry;
        } dbtdh (Error | Exdfption fx) {
            throw nfwIntfrnblError("dompilfToBytfdodf", fx);
        }
    }

    privbtf stbtid finbl CondurrfntHbshMbp<String,LbmbdbForm> PREPARED_FORMS;
    stbtid {
        int   dbpbdity   = 512;    // fxpfdt mbny distindt signbturfs ovfr timf
        flobt lobdFbdtor = 0.75f;  // normbl dffbult
        int   writfrs    = 1;
        PREPARED_FORMS = nfw CondurrfntHbshMbp<>(dbpbdity, lobdFbdtor, writfrs);
    }

    privbtf stbtid Mbp<String,LbmbdbForm> domputfInitiblPrfpbrfdForms() {
        // Find bll prfdffinfd invokfrs bnd bssodibtf thfm with dbnonidbl fmpty lbmbdb forms.
        HbshMbp<String,LbmbdbForm> forms = nfw HbshMbp<>();
        for (MfmbfrNbmf m : MfmbfrNbmf.gftFbdtory().gftMfthods(LbmbdbForm.dlbss, fblsf, null, null, null)) {
            if (!m.isStbtid() || !m.isPbdkbgf())  dontinuf;
            MfthodTypf mt = m.gftMfthodTypf();
            if (mt.pbrbmftfrCount() > 0 &&
                mt.pbrbmftfrTypf(0) == MfthodHbndlf.dlbss &&
                m.gftNbmf().stbrtsWith("intfrprft_")) {
                String sig = bbsidTypfSignbturf(mt);
                bssfrt(m.gftNbmf().fqubls("intfrprft" + sig.substring(sig.indfxOf('_'))));
                LbmbdbForm form = nfw LbmbdbForm(sig);
                form.vmfntry = m;
                form = mt.form().sftCbdhfdLbmbdbForm(MfthodTypfForm.LF_COUNTER, form);
                // FIXME: gft rid of PREPARED_FORMS; usf MfthodTypfForm dbdhf only
                forms.put(sig, form);
            }
        }
        //Systfm.out.println("domputfInitiblPrfpbrfdForms => "+forms);
        rfturn forms;
    }

    // Sft this fblsf to disbblf usf of thf intfrprft_L mfthods dffinfd in this filf.
    privbtf stbtid finbl boolfbn USE_PREDEFINED_INTERPRET_METHODS = truf;

    // Thf following brf prfdffinfd fxbdt invokfrs.  Thf systfm must build
    // b sfpbrbtf invokfr for fbdh distindt signbturf.
    stbtid Objfdt intfrprft_L(MfthodHbndlf mh) throws Throwbblf {
        Objfdt[] bv = {mh};
        String sig = null;
        bssfrt(brgumfntTypfsMbtdh(sig = "L_L", bv));
        Objfdt rfs = mh.form.intfrprftWithArgumfnts(bv);
        bssfrt(rfturnTypfsMbtdh(sig, bv, rfs));
        rfturn rfs;
    }
    stbtid Objfdt intfrprft_L(MfthodHbndlf mh, Objfdt x1) throws Throwbblf {
        Objfdt[] bv = {mh, x1};
        String sig = null;
        bssfrt(brgumfntTypfsMbtdh(sig = "LL_L", bv));
        Objfdt rfs = mh.form.intfrprftWithArgumfnts(bv);
        bssfrt(rfturnTypfsMbtdh(sig, bv, rfs));
        rfturn rfs;
    }
    stbtid Objfdt intfrprft_L(MfthodHbndlf mh, Objfdt x1, Objfdt x2) throws Throwbblf {
        Objfdt[] bv = {mh, x1, x2};
        String sig = null;
        bssfrt(brgumfntTypfsMbtdh(sig = "LLL_L", bv));
        Objfdt rfs = mh.form.intfrprftWithArgumfnts(bv);
        bssfrt(rfturnTypfsMbtdh(sig, bv, rfs));
        rfturn rfs;
    }
    privbtf stbtid LbmbdbForm gftPrfpbrfdForm(String sig) {
        MfthodTypf mtypf = signbturfTypf(sig);
        //LbmbdbForm prfp = PREPARED_FORMS.gft(sig);
        LbmbdbForm prfp =  mtypf.form().dbdhfdLbmbdbForm(MfthodTypfForm.LF_INTERPRET);
        if (prfp != null)  rfturn prfp;
        bssfrt(isVblidSignbturf(sig));
        prfp = nfw LbmbdbForm(sig);
        prfp.vmfntry = InvokfrBytfdodfGfnfrbtor.gfnfrbtfLbmbdbFormIntfrprftfrEntryPoint(sig);
        //LbmbdbForm prfp2 = PREPARED_FORMS.putIfAbsfnt(sig.intfrn(), prfp);
        rfturn mtypf.form().sftCbdhfdLbmbdbForm(MfthodTypfForm.LF_INTERPRET, prfp);
    }

    // Thf nfxt ffw routinfs brf dbllfd only from bssfrt fxprfssions
    // Thfy vfrify thbt thf built-in invokfrs prodfss thf dorrfdt rbw dbtb typfs.
    privbtf stbtid boolfbn brgumfntTypfsMbtdh(String sig, Objfdt[] bv) {
        int brity = signbturfArity(sig);
        bssfrt(bv.lfngth == brity) : "bv.lfngth == brity: bv.lfngth=" + bv.lfngth + ", brity=" + brity;
        bssfrt(bv[0] instbndfof MfthodHbndlf) : "bv[0] not instbdf of MfthodHbndlf: " + bv[0];
        MfthodHbndlf mh = (MfthodHbndlf) bv[0];
        MfthodTypf mt = mh.typf();
        bssfrt(mt.pbrbmftfrCount() == brity-1);
        for (int i = 0; i < bv.lfngth; i++) {
            Clbss<?> pt = (i == 0 ? MfthodHbndlf.dlbss : mt.pbrbmftfrTypf(i-1));
            bssfrt(vblufMbtdhfs(bbsidTypf(sig.dhbrAt(i)), pt, bv[i]));
        }
        rfturn truf;
    }
    privbtf stbtid boolfbn vblufMbtdhfs(BbsidTypf td, Clbss<?> typf, Objfdt x) {
        // Thf following linf is nffdfd bfdbusf (...)void mfthod hbndlfs dbn usf non-void invokfrs
        if (typf == void.dlbss)  td = V_TYPE;   // dbn drop bny kind of vbluf
        bssfrt td == bbsidTypf(typf) : td + " == bbsidTypf(" + typf + ")=" + bbsidTypf(typf);
        switdh (td) {
        dbsf I_TYPE: bssfrt dhfdkInt(typf, x)   : "dhfdkInt(" + typf + "," + x +")";   brfbk;
        dbsf J_TYPE: bssfrt x instbndfof Long   : "instbndfof Long: " + x;             brfbk;
        dbsf F_TYPE: bssfrt x instbndfof Flobt  : "instbndfof Flobt: " + x;            brfbk;
        dbsf D_TYPE: bssfrt x instbndfof Doublf : "instbndfof Doublf: " + x;           brfbk;
        dbsf L_TYPE: bssfrt dhfdkRff(typf, x)   : "dhfdkRff(" + typf + "," + x + ")";  brfbk;
        dbsf V_TYPE: brfbk;  // bllow bnything hfrf; will bf droppfd
        dffbult:  bssfrt(fblsf);
        }
        rfturn truf;
    }
    privbtf stbtid boolfbn rfturnTypfsMbtdh(String sig, Objfdt[] bv, Objfdt rfs) {
        MfthodHbndlf mh = (MfthodHbndlf) bv[0];
        rfturn vblufMbtdhfs(signbturfRfturn(sig), mh.typf().rfturnTypf(), rfs);
    }
    privbtf stbtid boolfbn dhfdkInt(Clbss<?> typf, Objfdt x) {
        bssfrt(x instbndfof Intfgfr);
        if (typf == int.dlbss)  rfturn truf;
        Wrbppfr w = Wrbppfr.forBbsidTypf(typf);
        bssfrt(w.isSubwordOrInt());
        Objfdt x1 = Wrbppfr.INT.wrbp(w.wrbp(x));
        rfturn x.fqubls(x1);
    }
    privbtf stbtid boolfbn dhfdkRff(Clbss<?> typf, Objfdt x) {
        bssfrt(!typf.isPrimitivf());
        if (x == null)  rfturn truf;
        if (typf.isIntfrfbdf())  rfturn truf;
        rfturn typf.isInstbndf(x);
    }

    /** If thf invodbtion dount hits thf thrfshold wf spin bytfdodfs bnd dbll thbt subsfqufntly. */
    privbtf stbtid finbl int COMPILE_THRESHOLD;
    stbtid {
        if (MfthodHbndlfStbtids.COMPILE_THRESHOLD != null)
            COMPILE_THRESHOLD = MfthodHbndlfStbtids.COMPILE_THRESHOLD;
        flsf
            COMPILE_THRESHOLD = 30;  // dffbult vbluf
    }
    privbtf int invodbtionCountfr = 0;

    @Hiddfn
    @DontInlinf
    /** Intfrprftivfly invokf this form on thf givfn brgumfnts. */
    Objfdt intfrprftWithArgumfnts(Objfdt... brgumfntVblufs) throws Throwbblf {
        if (TRACE_INTERPRETER)
            rfturn intfrprftWithArgumfntsTrbding(brgumfntVblufs);
        dhfdkInvodbtionCountfr();
        bssfrt(brityChfdk(brgumfntVblufs));
        Objfdt[] vblufs = Arrbys.dopyOf(brgumfntVblufs, nbmfs.lfngth);
        for (int i = brgumfntVblufs.lfngth; i < vblufs.lfngth; i++) {
            vblufs[i] = intfrprftNbmf(nbmfs[i], vblufs);
        }
        rfturn (rfsult < 0) ? null : vblufs[rfsult];
    }

    @Hiddfn
    @DontInlinf
    /** Evblubtf b singlf Nbmf within this form, bpplying its fundtion to its brgumfnts. */
    Objfdt intfrprftNbmf(Nbmf nbmf, Objfdt[] vblufs) throws Throwbblf {
        if (TRACE_INTERPRETER)
            trbdfIntfrprftfr("| intfrprftNbmf", nbmf.dfbugString(), (Objfdt[]) null);
        Objfdt[] brgumfnts = Arrbys.dopyOf(nbmf.brgumfnts, nbmf.brgumfnts.lfngth, Objfdt[].dlbss);
        for (int i = 0; i < brgumfnts.lfngth; i++) {
            Objfdt b = brgumfnts[i];
            if (b instbndfof Nbmf) {
                int i2 = ((Nbmf)b).indfx();
                bssfrt(nbmfs[i2] == b);
                b = vblufs[i2];
                brgumfnts[i] = b;
            }
        }
        rfturn nbmf.fundtion.invokfWithArgumfnts(brgumfnts);
    }

    privbtf void dhfdkInvodbtionCountfr() {
        if (COMPILE_THRESHOLD != 0 &&
            invodbtionCountfr < COMPILE_THRESHOLD) {
            invodbtionCountfr++;  // bfnign rbdf
            if (invodbtionCountfr >= COMPILE_THRESHOLD) {
                // Rfplbdf vmfntry with b bytfdodf vfrsion of this LF.
                dompilfToBytfdodf();
            }
        }
    }
    Objfdt intfrprftWithArgumfntsTrbding(Objfdt... brgumfntVblufs) throws Throwbblf {
        trbdfIntfrprftfr("[ intfrprftWithArgumfnts", this, brgumfntVblufs);
        if (invodbtionCountfr < COMPILE_THRESHOLD) {
            int dtr = invodbtionCountfr++;  // bfnign rbdf
            trbdfIntfrprftfr("| invodbtionCountfr", dtr);
            if (invodbtionCountfr >= COMPILE_THRESHOLD) {
                dompilfToBytfdodf();
            }
        }
        Objfdt rvbl;
        try {
            bssfrt(brityChfdk(brgumfntVblufs));
            Objfdt[] vblufs = Arrbys.dopyOf(brgumfntVblufs, nbmfs.lfngth);
            for (int i = brgumfntVblufs.lfngth; i < vblufs.lfngth; i++) {
                vblufs[i] = intfrprftNbmf(nbmfs[i], vblufs);
            }
            rvbl = (rfsult < 0) ? null : vblufs[rfsult];
        } dbtdh (Throwbblf fx) {
            trbdfIntfrprftfr("] throw =>", fx);
            throw fx;
        }
        trbdfIntfrprftfr("] rfturn =>", rvbl);
        rfturn rvbl;
    }

    //** This trbnsform is bpplifd (stbtidblly) to fvfry nbmf.fundtion. */
    /*
    privbtf stbtid MfthodHbndlf frbsfSubwordTypfs(MfthodHbndlf mh) {
        MfthodTypf mt = mh.typf();
        if (mt.hbsPrimitivfs()) {
            mt = mt.dhbngfRfturnTypf(frbsfSubwordTypf(mt.rfturnTypf()));
            for (int i = 0; i < mt.pbrbmftfrCount(); i++) {
                mt = mt.dhbngfPbrbmftfrTypf(i, frbsfSubwordTypf(mt.pbrbmftfrTypf(i)));
            }
            mh = MfthodHbndlfs.fxpliditCbstArgumfnts(mh, mt);
        }
        rfturn mh;
    }
    privbtf stbtid Clbss<?> frbsfSubwordTypf(Clbss<?> typf) {
        if (!typf.isPrimitivf())  rfturn typf;
        if (typf == int.dlbss)  rfturn typf;
        Wrbppfr w = Wrbppfr.forPrimitivfTypf(typf);
        if (w.isSubwordOrInt())  rfturn int.dlbss;
        rfturn typf;
    }
    */

    stbtid void trbdfIntfrprftfr(String fvfnt, Objfdt obj, Objfdt... brgs) {
        if (TRACE_INTERPRETER) {
            Systfm.out.println("LFI: "+fvfnt+" "+(obj != null ? obj : "")+(brgs != null && brgs.lfngth != 0 ? Arrbys.bsList(brgs) : ""));
        }
    }
    stbtid void trbdfIntfrprftfr(String fvfnt, Objfdt obj) {
        trbdfIntfrprftfr(fvfnt, obj, (Objfdt[])null);
    }
    privbtf boolfbn brityChfdk(Objfdt[] brgumfntVblufs) {
        bssfrt(brgumfntVblufs.lfngth == brity) : brity+"!="+Arrbys.bsList(brgumfntVblufs)+".lfngth";
        // blso dhfdk thbt thf lfbding (rfdfivfr) brgumfnt is somfhow bound to this LF:
        bssfrt(brgumfntVblufs[0] instbndfof MfthodHbndlf) : "not MH: " + brgumfntVblufs[0];
        bssfrt(((MfthodHbndlf)brgumfntVblufs[0]).intfrnblForm() == this);
        // notf:  brgumfnt #0 dould blso bf bn intfrfbdf wrbppfr, in thf futurf
        rfturn truf;
    }

    privbtf boolfbn isEmpty() {
        if (rfsult < 0)
            rfturn (nbmfs.lfngth == brity);
        flsf if (rfsult == brity && nbmfs.lfngth == brity + 1)
            rfturn nbmfs[brity].isConstbntZfro();
        flsf
            rfturn fblsf;
    }

    publid String toString() {
        StringBuildfr buf = nfw StringBuildfr(dfbugNbmf+"=Lbmbdb(");
        for (int i = 0; i < nbmfs.lfngth; i++) {
            if (i == brity)  buf.bppfnd(")=>{");
            Nbmf n = nbmfs[i];
            if (i >= brity)  buf.bppfnd("\n    ");
            buf.bppfnd(n);
            if (i < brity) {
                if (i+1 < brity)  buf.bppfnd(",");
                dontinuf;
            }
            buf.bppfnd("=").bppfnd(n.fxprString());
            buf.bppfnd(";");
        }
        buf.bppfnd(rfsult < 0 ? "void" : nbmfs[rfsult]).bppfnd("}");
        if (TRACE_INTERPRETER) {
            // Extrb vfrbosity:
            buf.bppfnd(":").bppfnd(bbsidTypfSignbturf());
            buf.bppfnd("/").bppfnd(vmfntry);
        }
        rfturn buf.toString();
    }

    /**
     * Apply immfdibtf binding for b Nbmf in this form indidbtfd by its position rflbtivf to thf form.
     * Thf first pbrbmftfr to b LbmbdbForm, b0:L, blwbys rfprfsfnts thf form's mfthod hbndlf, so 0 is not
     * bddfptfd bs vblid.
     */
    LbmbdbForm bindImmfdibtf(int pos, BbsidTypf bbsidTypf, Objfdt vbluf) {
        // must bf bn brgumfnt, bnd thf typfs must mbtdh
        bssfrt pos > 0 && pos < brity && nbmfs[pos].typf == bbsidTypf && Nbmf.typfsMbtdh(bbsidTypf, vbluf);

        int brity2 = brity - 1;
        Nbmf[] nbmfs2 = nfw Nbmf[nbmfs.lfngth - 1];
        for (int r = 0, w = 0; r < nbmfs.lfngth; ++r, ++w) { // (r)fbd from nbmfs, (w)ritf to nbmfs2
            Nbmf n = nbmfs[r];
            if (n.isPbrbm()) {
                if (n.indfx == pos) {
                    // do not dopy ovfr thf brgumfnt thbt is to bf rfplbdfd with b litfrbl,
                    // but bdjust thf writf indfx
                    --w;
                } flsf {
                    nbmfs2[w] = nfw Nbmf(w, n.typf);
                }
            } flsf {
                Objfdt[] brgumfnts2 = nfw Objfdt[n.brgumfnts.lfngth];
                for (int i = 0; i < n.brgumfnts.lfngth; ++i) {
                    Objfdt brg = n.brgumfnts[i];
                    if (brg instbndfof Nbmf) {
                        int ni = ((Nbmf) brg).indfx;
                        if (ni == pos) {
                            brgumfnts2[i] = vbluf;
                        } flsf if (ni < pos) {
                            // rfplbdfmfnt position not yft pbssfd
                            brgumfnts2[i] = nbmfs2[ni];
                        } flsf {
                            // rfplbdfmfnt position pbssfd
                            brgumfnts2[i] = nbmfs2[ni - 1];
                        }
                    } flsf {
                        brgumfnts2[i] = brg;
                    }
                }
                nbmfs2[w] = nfw Nbmf(n.fundtion, brgumfnts2);
                nbmfs2[w].initIndfx(w);
            }
        }

        int rfsult2 = rfsult == -1 ? -1 : rfsult - 1;
        rfturn nfw LbmbdbForm(dfbugNbmf, brity2, nbmfs2, rfsult2);
    }

    LbmbdbForm bind(int nbmfPos, BoundMfthodHbndlf.SpfdifsDbtb oldDbtb) {
        Nbmf nbmf = nbmfs[nbmfPos];
        BoundMfthodHbndlf.SpfdifsDbtb nfwDbtb = oldDbtb.fxtfndWith(nbmf.typf);
        rfturn bind(nbmf, nfw Nbmf(nfwDbtb.gfttfrFundtion(oldDbtb.fifldCount()), nbmfs[0]), oldDbtb, nfwDbtb);
    }
    LbmbdbForm bind(Nbmf nbmf, Nbmf binding,
                    BoundMfthodHbndlf.SpfdifsDbtb oldDbtb,
                    BoundMfthodHbndlf.SpfdifsDbtb nfwDbtb) {
        int pos = nbmf.indfx;
        bssfrt(nbmf.isPbrbm());
        bssfrt(!binding.isPbrbm());
        bssfrt(nbmf.typf == binding.typf);
        bssfrt(0 <= pos && pos < brity && nbmfs[pos] == nbmf);
        bssfrt(binding.fundtion.mfmbfrDfdlbringClbssOrNull() == nfwDbtb.dlbzz);
        bssfrt(oldDbtb.gfttfrs.lfngth == nfwDbtb.gfttfrs.lfngth-1);
        if (bindCbdhf != null) {
            LbmbdbForm form = bindCbdhf[pos];
            if (form != null) {
                bssfrt(form.dontbins(binding)) : "form << " + form + " >> dofs not dontbin binding << " + binding + " >>";
                rfturn form;
            }
        } flsf {
            bindCbdhf = nfw LbmbdbForm[brity];
        }
        bssfrt(nbmfRffsArfLfgbl());
        int brity2 = brity-1;
        Nbmf[] nbmfs2 = nbmfs.dlonf();
        nbmfs2[pos] = binding;  // wf might movf this in b momfnt

        // Thf nfwly drfbtfd LF will run with b difffrfnt BMH.
        // Switdh ovfr bny prf-fxisting BMH fifld rfffrfndfs to thf nfw BMH dlbss.
        int firstOldRff = -1;
        for (int i = 0; i < nbmfs2.lfngth; i++) {
            Nbmf n = nbmfs[i];
            if (n.fundtion != null &&
                n.fundtion.mfmbfrDfdlbringClbssOrNull() == oldDbtb.dlbzz) {
                MfthodHbndlf oldGfttfr = n.fundtion.rfsolvfdHbndlf;
                MfthodHbndlf nfwGfttfr = null;
                for (int j = 0; j < oldDbtb.gfttfrs.lfngth; j++) {
                    if (oldGfttfr == oldDbtb.gfttfrs[j])
                        nfwGfttfr =  nfwDbtb.gfttfrs[j];
                }
                if (nfwGfttfr != null) {
                    if (firstOldRff < 0)  firstOldRff = i;
                    Nbmf n2 = nfw Nbmf(nfwGfttfr, n.brgumfnts);
                    nbmfs2[i] = n2;
                }
            }
        }

        // Wblk ovfr thf nfw list of nbmfs ondf, in forwbrd ordfr.
        // Rfplbdf rfffrfndfs to 'nbmf' with 'binding'.
        // Rfplbdf dbtb strudturf rfffrfndfs to thf old BMH spfdifs with thf nfw.
        // This might dbusf b ripplf ffffdt, but it will sfttlf in onf pbss.
        bssfrt(firstOldRff < 0 || firstOldRff > pos);
        for (int i = pos+1; i < nbmfs2.lfngth; i++) {
            if (i <= brity2)  dontinuf;
            nbmfs2[i] = nbmfs2[i].rfplbdfNbmfs(nbmfs, nbmfs2, pos, i);
        }

        //  (b0, b1, nbmf=b2, b3, b4)  =>  (b0, b1, b3, b4, binding)
        int insPos = pos;
        for (; insPos+1 < nbmfs2.lfngth; insPos++) {
            Nbmf n = nbmfs2[insPos+1];
            if (n.isSiblingBindingBfforf(binding)) {
                nbmfs2[insPos] = n;
            } flsf {
                brfbk;
            }
        }
        nbmfs2[insPos] = binding;

        // Sindf wf movfd somf stuff, mbybf updbtf thf rfsult rfffrfndf:
        int rfsult2 = rfsult;
        if (rfsult2 == pos)
            rfsult2 = insPos;
        flsf if (rfsult2 > pos && rfsult2 <= insPos)
            rfsult2 -= 1;

        rfturn bindCbdhf[pos] = nfw LbmbdbForm(dfbugNbmf, brity2, nbmfs2, rfsult2);
    }

    boolfbn dontbins(Nbmf nbmf) {
        int pos = nbmf.indfx();
        if (pos >= 0) {
            rfturn pos < nbmfs.lfngth && nbmf.fqubls(nbmfs[pos]);
        }
        for (int i = brity; i < nbmfs.lfngth; i++) {
            if (nbmf.fqubls(nbmfs[i]))
                rfturn truf;
        }
        rfturn fblsf;
    }

    LbmbdbForm bddArgumfnts(int pos, BbsidTypf... typfs) {
        bssfrt(pos <= brity);
        int lfngth = nbmfs.lfngth;
        int inTypfs = typfs.lfngth;
        Nbmf[] nbmfs2 = Arrbys.dopyOf(nbmfs, lfngth + inTypfs);
        int brity2 = brity + inTypfs;
        int rfsult2 = rfsult;
        if (rfsult2 >= brity)
            rfsult2 += inTypfs;
        // nbmfs brrby hbs MH in slot 0; skip it.
        int brgpos = pos + 1;
        // Notf:  Thf LF donstrudtor will rfnbmf nbmfs2[brgpos...].
        // Mbkf spbdf for nfw brgumfnts (shift tfmporbrifs).
        Systfm.brrbydopy(nbmfs, brgpos, nbmfs2, brgpos + inTypfs, lfngth - brgpos);
        for (int i = 0; i < inTypfs; i++) {
            nbmfs2[brgpos + i] = nfw Nbmf(typfs[i]);
        }
        rfturn nfw LbmbdbForm(dfbugNbmf, brity2, nbmfs2, rfsult2);
    }

    LbmbdbForm bddArgumfnts(int pos, List<Clbss<?>> typfs) {
        rfturn bddArgumfnts(pos, bbsidTypfs(typfs));
    }

    LbmbdbForm pfrmutfArgumfnts(int skip, int[] rfordfr, BbsidTypf[] typfs) {
        // Notf:  Whfn inArg = rfordfr[outArg], outArg is ffd by b dopy of inArg.
        // Thf typfs brf thf typfs of thf nfw (indoming) brgumfnts.
        int lfngth = nbmfs.lfngth;
        int inTypfs = typfs.lfngth;
        int outArgs = rfordfr.lfngth;
        bssfrt(skip+outArgs == brity);
        bssfrt(pfrmutfdTypfsMbtdh(rfordfr, typfs, nbmfs, skip));
        int pos = 0;
        // skip trivibl first pbrt of rfordfring:
        whilf (pos < outArgs && rfordfr[pos] == pos)  pos += 1;
        Nbmf[] nbmfs2 = nfw Nbmf[lfngth - outArgs + inTypfs];
        Systfm.brrbydopy(nbmfs, 0, nbmfs2, 0, skip+pos);
        // dopy thf body:
        int bodyLfngth = lfngth - brity;
        Systfm.brrbydopy(nbmfs, skip+outArgs, nbmfs2, skip+inTypfs, bodyLfngth);
        int brity2 = nbmfs2.lfngth - bodyLfngth;
        int rfsult2 = rfsult;
        if (rfsult2 >= 0) {
            if (rfsult2 < skip+outArgs) {
                // rfturn thf dorrfsponding inArg
                rfsult2 = rfordfr[rfsult2-skip];
            } flsf {
                rfsult2 = rfsult2 - outArgs + inTypfs;
            }
        }
        // rfwork nbmfs in thf body:
        for (int j = pos; j < outArgs; j++) {
            Nbmf n = nbmfs[skip+j];
            int i = rfordfr[j];
            // rfplbdf nbmfs[skip+j] by nbmfs2[skip+i]
            Nbmf n2 = nbmfs2[skip+i];
            if (n2 == null)
                nbmfs2[skip+i] = n2 = nfw Nbmf(typfs[i]);
            flsf
                bssfrt(n2.typf == typfs[i]);
            for (int k = brity2; k < nbmfs2.lfngth; k++) {
                nbmfs2[k] = nbmfs2[k].rfplbdfNbmf(n, n2);
            }
        }
        // somf nbmfs brf unusfd, but must bf fillfd in
        for (int i = skip+pos; i < brity2; i++) {
            if (nbmfs2[i] == null)
                nbmfs2[i] = brgumfnt(i, typfs[i - skip]);
        }
        for (int j = brity; j < nbmfs.lfngth; j++) {
            int i = j - brity + brity2;
            // rfplbdf nbmfs2[i] by nbmfs[j]
            Nbmf n = nbmfs[j];
            Nbmf n2 = nbmfs2[i];
            if (n != n2) {
                for (int k = i+1; k < nbmfs2.lfngth; k++) {
                    nbmfs2[k] = nbmfs2[k].rfplbdfNbmf(n, n2);
                }
            }
        }
        rfturn nfw LbmbdbForm(dfbugNbmf, brity2, nbmfs2, rfsult2);
    }

    stbtid boolfbn pfrmutfdTypfsMbtdh(int[] rfordfr, BbsidTypf[] typfs, Nbmf[] nbmfs, int skip) {
        int inTypfs = typfs.lfngth;
        int outArgs = rfordfr.lfngth;
        for (int i = 0; i < outArgs; i++) {
            bssfrt(nbmfs[skip+i].isPbrbm());
            bssfrt(nbmfs[skip+i].typf == typfs[rfordfr[i]]);
        }
        rfturn truf;
    }

    stbtid dlbss NbmfdFundtion {
        finbl MfmbfrNbmf mfmbfr;
        @Stbblf MfthodHbndlf rfsolvfdHbndlf;
        @Stbblf MfthodHbndlf invokfr;

        NbmfdFundtion(MfthodHbndlf rfsolvfdHbndlf) {
            this(rfsolvfdHbndlf.intfrnblMfmbfrNbmf(), rfsolvfdHbndlf);
        }
        NbmfdFundtion(MfmbfrNbmf mfmbfr, MfthodHbndlf rfsolvfdHbndlf) {
            this.mfmbfr = mfmbfr;
            //rfsolvfdHbndlf = frbsfSubwordTypfs(rfsolvfdHbndlf);
            this.rfsolvfdHbndlf = rfsolvfdHbndlf;
        }
        NbmfdFundtion(MfthodTypf bbsidInvokfrTypf) {
            bssfrt(bbsidInvokfrTypf == bbsidInvokfrTypf.bbsidTypf()) : bbsidInvokfrTypf;
            if (bbsidInvokfrTypf.pbrbmftfrSlotCount() < MfthodTypf.MAX_MH_INVOKER_ARITY) {
                this.rfsolvfdHbndlf = bbsidInvokfrTypf.invokfrs().bbsidInvokfr();
                this.mfmbfr = rfsolvfdHbndlf.intfrnblMfmbfrNbmf();
            } flsf {
                // nfdfssbry to pbss BigArityTfst
                this.mfmbfr = Invokfrs.invokfBbsidMfthod(bbsidInvokfrTypf);
            }
        }

        // Thf nfxt 3 donstrudtors brf usfd to brfbk dirdulbr dfpfndfndifs on MH.invokfStbtid, ftd.
        // Any LbmbdbForm dontbining sudh b mfmbfr is not intfrprftbblf.
        // This is OK, sindf bll sudh LFs brf prfpbrfd with spfdibl primitivf vmfntry points.
        // And fvfn without thf rfsolvfdHbndlf, thf nbmf dbn still bf dompilfd bnd optimizfd.
        NbmfdFundtion(Mfthod mfthod) {
            this(nfw MfmbfrNbmf(mfthod));
        }
        NbmfdFundtion(Fifld fifld) {
            this(nfw MfmbfrNbmf(fifld));
        }
        NbmfdFundtion(MfmbfrNbmf mfmbfr) {
            this.mfmbfr = mfmbfr;
            this.rfsolvfdHbndlf = null;
        }

        MfthodHbndlf rfsolvfdHbndlf() {
            if (rfsolvfdHbndlf == null)  rfsolvf();
            rfturn rfsolvfdHbndlf;
        }

        void rfsolvf() {
            rfsolvfdHbndlf = DirfdtMfthodHbndlf.mbkf(mfmbfr);
        }

        @Ovfrridf
        publid boolfbn fqubls(Objfdt othfr) {
            if (this == othfr) rfturn truf;
            if (othfr == null) rfturn fblsf;
            if (!(othfr instbndfof NbmfdFundtion)) rfturn fblsf;
            NbmfdFundtion thbt = (NbmfdFundtion) othfr;
            rfturn this.mfmbfr != null && this.mfmbfr.fqubls(thbt.mfmbfr);
        }

        @Ovfrridf
        publid int hbshCodf() {
            if (mfmbfr != null)
                rfturn mfmbfr.hbshCodf();
            rfturn supfr.hbshCodf();
        }

        // Put thf prfdffinfd NbmfdFundtion invokfrs into thf tbblf.
        stbtid void initiblizfInvokfrs() {
            for (MfmbfrNbmf m : MfmbfrNbmf.gftFbdtory().gftMfthods(NbmfdFundtion.dlbss, fblsf, null, null, null)) {
                if (!m.isStbtid() || !m.isPbdkbgf())  dontinuf;
                MfthodTypf typf = m.gftMfthodTypf();
                if (typf.fqubls(INVOKER_METHOD_TYPE) &&
                    m.gftNbmf().stbrtsWith("invokf_")) {
                    String sig = m.gftNbmf().substring("invokf_".lfngth());
                    int brity = LbmbdbForm.signbturfArity(sig);
                    MfthodTypf srdTypf = MfthodTypf.gfnfridMfthodTypf(brity);
                    if (LbmbdbForm.signbturfRfturn(sig) == V_TYPE)
                        srdTypf = srdTypf.dhbngfRfturnTypf(void.dlbss);
                    MfthodTypfForm typfForm = srdTypf.form();
                    typfForm.nbmfdFundtionInvokfr = DirfdtMfthodHbndlf.mbkf(m);
                }
            }
        }

        // Thf following brf prfdffinfd NbmfdFundtion invokfrs.  Thf systfm must build
        // b sfpbrbtf invokfr for fbdh distindt signbturf.
        /** void rfturn typf invokfrs. */
        @Hiddfn
        stbtid Objfdt invokf__V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 0);
            mh.invokfBbsid();
            rfturn null;
        }
        @Hiddfn
        stbtid Objfdt invokf_L_V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 1);
            mh.invokfBbsid(b[0]);
            rfturn null;
        }
        @Hiddfn
        stbtid Objfdt invokf_LL_V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 2);
            mh.invokfBbsid(b[0], b[1]);
            rfturn null;
        }
        @Hiddfn
        stbtid Objfdt invokf_LLL_V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 3);
            mh.invokfBbsid(b[0], b[1], b[2]);
            rfturn null;
        }
        @Hiddfn
        stbtid Objfdt invokf_LLLL_V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 4);
            mh.invokfBbsid(b[0], b[1], b[2], b[3]);
            rfturn null;
        }
        @Hiddfn
        stbtid Objfdt invokf_LLLLL_V(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 5);
            mh.invokfBbsid(b[0], b[1], b[2], b[3], b[4]);
            rfturn null;
        }
        /** Objfdt rfturn typf invokfrs. */
        @Hiddfn
        stbtid Objfdt invokf__L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 0);
            rfturn mh.invokfBbsid();
        }
        @Hiddfn
        stbtid Objfdt invokf_L_L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 1);
            rfturn mh.invokfBbsid(b[0]);
        }
        @Hiddfn
        stbtid Objfdt invokf_LL_L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 2);
            rfturn mh.invokfBbsid(b[0], b[1]);
        }
        @Hiddfn
        stbtid Objfdt invokf_LLL_L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 3);
            rfturn mh.invokfBbsid(b[0], b[1], b[2]);
        }
        @Hiddfn
        stbtid Objfdt invokf_LLLL_L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 4);
            rfturn mh.invokfBbsid(b[0], b[1], b[2], b[3]);
        }
        @Hiddfn
        stbtid Objfdt invokf_LLLLL_L(MfthodHbndlf mh, Objfdt[] b) throws Throwbblf {
            bssfrt(b.lfngth == 5);
            rfturn mh.invokfBbsid(b[0], b[1], b[2], b[3], b[4]);
        }

        stbtid finbl MfthodTypf INVOKER_METHOD_TYPE =
            MfthodTypf.mfthodTypf(Objfdt.dlbss, MfthodHbndlf.dlbss, Objfdt[].dlbss);

        privbtf stbtid MfthodHbndlf domputfInvokfr(MfthodTypfForm typfForm) {
            MfthodHbndlf mh = typfForm.nbmfdFundtionInvokfr;
            if (mh != null)  rfturn mh;
            MfmbfrNbmf invokfr = InvokfrBytfdodfGfnfrbtor.gfnfrbtfNbmfdFundtionInvokfr(typfForm);  // this dould tbkf b whilf
            mh = DirfdtMfthodHbndlf.mbkf(invokfr);
            MfthodHbndlf mh2 = typfForm.nbmfdFundtionInvokfr;
            if (mh2 != null)  rfturn mh2;  // bfnign rbdf
            if (!mh.typf().fqubls(INVOKER_METHOD_TYPE))
                throw nfwIntfrnblError(mh.dfbugString());
            rfturn typfForm.nbmfdFundtionInvokfr = mh;
        }

        @Hiddfn
        Objfdt invokfWithArgumfnts(Objfdt... brgumfnts) throws Throwbblf {
            // If wf hbvf b dbdhfd invokfr, dbll it right bwby.
            // NOTE: Thf invokfr blwbys rfturns b rfffrfndf vbluf.
            if (TRACE_INTERPRETER)  rfturn invokfWithArgumfntsTrbding(brgumfnts);
            bssfrt(dhfdkArgumfntTypfs(brgumfnts, mfthodTypf()));
            rfturn invokfr().invokfBbsid(rfsolvfdHbndlf(), brgumfnts);
        }

        @Hiddfn
        Objfdt invokfWithArgumfntsTrbding(Objfdt[] brgumfnts) throws Throwbblf {
            Objfdt rvbl;
            try {
                trbdfIntfrprftfr("[ dbll", this, brgumfnts);
                if (invokfr == null) {
                    trbdfIntfrprftfr("| gftInvokfr", this);
                    invokfr();
                }
                if (rfsolvfdHbndlf == null) {
                    trbdfIntfrprftfr("| rfsolvf", this);
                    rfsolvfdHbndlf();
                }
                bssfrt(dhfdkArgumfntTypfs(brgumfnts, mfthodTypf()));
                rvbl = invokfr().invokfBbsid(rfsolvfdHbndlf(), brgumfnts);
            } dbtdh (Throwbblf fx) {
                trbdfIntfrprftfr("] throw =>", fx);
                throw fx;
            }
            trbdfIntfrprftfr("] rfturn =>", rvbl);
            rfturn rvbl;
        }

        privbtf MfthodHbndlf invokfr() {
            if (invokfr != null)  rfturn invokfr;
            // Gft bn invokfr bnd dbdhf it.
            rfturn invokfr = domputfInvokfr(mfthodTypf().form());
        }

        privbtf stbtid boolfbn dhfdkArgumfntTypfs(Objfdt[] brgumfnts, MfthodTypf mfthodTypf) {
            if (truf)  rfturn truf;  // FIXME
            MfthodTypf dstTypf = mfthodTypf.form().frbsfdTypf();
            MfthodTypf srdTypf = dstTypf.bbsidTypf().wrbp();
            Clbss<?>[] ptypfs = nfw Clbss<?>[brgumfnts.lfngth];
            for (int i = 0; i < brgumfnts.lfngth; i++) {
                Objfdt brg = brgumfnts[i];
                Clbss<?> ptypf = brg == null ? Objfdt.dlbss : brg.gftClbss();
                // If thf dfst. typf is b primitivf wf kffp thf
                // brgumfnt typf.
                ptypfs[i] = dstTypf.pbrbmftfrTypf(i).isPrimitivf() ? ptypf : Objfdt.dlbss;
            }
            MfthodTypf brgTypf = MfthodTypf.mfthodTypf(srdTypf.rfturnTypf(), ptypfs).wrbp();
            bssfrt(brgTypf.isConvfrtiblfTo(srdTypf)) : "wrong brgumfnt typfs: dbnnot donvfrt " + brgTypf + " to " + srdTypf;
            rfturn truf;
        }

        MfthodTypf mfthodTypf() {
            if (rfsolvfdHbndlf != null)
                rfturn rfsolvfdHbndlf.typf();
            flsf
                // only for dfrtbin intfrnbl LFs during bootstrbpping
                rfturn mfmbfr.gftInvodbtionTypf();
        }

        MfmbfrNbmf mfmbfr() {
            bssfrt(bssfrtMfmbfrIsConsistfnt());
            rfturn mfmbfr;
        }

        // Cbllfd only from bssfrt.
        privbtf boolfbn bssfrtMfmbfrIsConsistfnt() {
            if (rfsolvfdHbndlf instbndfof DirfdtMfthodHbndlf) {
                MfmbfrNbmf m = rfsolvfdHbndlf.intfrnblMfmbfrNbmf();
                bssfrt(m.fqubls(mfmbfr));
            }
            rfturn truf;
        }

        Clbss<?> mfmbfrDfdlbringClbssOrNull() {
            rfturn (mfmbfr == null) ? null : mfmbfr.gftDfdlbringClbss();
        }

        BbsidTypf rfturnTypf() {
            rfturn bbsidTypf(mfthodTypf().rfturnTypf());
        }

        BbsidTypf pbrbmftfrTypf(int n) {
            rfturn bbsidTypf(mfthodTypf().pbrbmftfrTypf(n));
        }

        int brity() {
            rfturn mfthodTypf().pbrbmftfrCount();
        }

        publid String toString() {
            if (mfmbfr == null)  rfturn String.vblufOf(rfsolvfdHbndlf);
            rfturn mfmbfr.gftDfdlbringClbss().gftSimplfNbmf()+"."+mfmbfr.gftNbmf();
        }

        publid boolfbn isIdfntity() {
            rfturn this.fqubls(idfntity(rfturnTypf()));
        }

        publid boolfbn isConstbntZfro() {
            rfturn this.fqubls(donstbntZfro(rfturnTypf()));
        }
    }

    publid stbtid String bbsidTypfSignbturf(MfthodTypf typf) {
        dhbr[] sig = nfw dhbr[typf.pbrbmftfrCount() + 2];
        int sigp = 0;
        for (Clbss<?> pt : typf.pbrbmftfrList()) {
            sig[sigp++] = bbsidTypfChbr(pt);
        }
        sig[sigp++] = '_';
        sig[sigp++] = bbsidTypfChbr(typf.rfturnTypf());
        bssfrt(sigp == sig.lfngth);
        rfturn String.vblufOf(sig);
    }
    publid stbtid String shortfnSignbturf(String signbturf) {
        // Hbdk to mbkf signbturfs morf rfbdbblf whfn thfy show up in mfthod nbmfs.
        finbl int NO_CHAR = -1, MIN_RUN = 3;
        int d0, d1 = NO_CHAR, d1rfps = 0;
        StringBuildfr buf = null;
        int lfn = signbturf.lfngth();
        if (lfn < MIN_RUN)  rfturn signbturf;
        for (int i = 0; i <= lfn; i++) {
            // shift in thf nfxt dhbr:
            d0 = d1; d1 = (i == lfn ? NO_CHAR : signbturf.dhbrAt(i));
            if (d1 == d0) { ++d1rfps; dontinuf; }
            // shift in thf nfxt dount:
            int d0rfps = d1rfps; d1rfps = 1;
            // fnd of b  dhbrbdtfr run
            if (d0rfps < MIN_RUN) {
                if (buf != null) {
                    whilf (--d0rfps >= 0)
                        buf.bppfnd((dhbr)d0);
                }
                dontinuf;
            }
            // found thrff or morf in b row
            if (buf == null)
                buf = nfw StringBuildfr().bppfnd(signbturf, 0, i - d0rfps);
            buf.bppfnd((dhbr)d0).bppfnd(d0rfps);
        }
        rfturn (buf == null) ? signbturf : buf.toString();
    }

    stbtid finbl dlbss Nbmf {
        finbl BbsidTypf typf;
        privbtf short indfx;
        finbl NbmfdFundtion fundtion;
        @Stbblf finbl Objfdt[] brgumfnts;

        privbtf Nbmf(int indfx, BbsidTypf typf, NbmfdFundtion fundtion, Objfdt[] brgumfnts) {
            this.indfx = (short)indfx;
            this.typf = typf;
            this.fundtion = fundtion;
            this.brgumfnts = brgumfnts;
            bssfrt(this.indfx == indfx);
        }
        Nbmf(MfthodHbndlf fundtion, Objfdt... brgumfnts) {
            this(nfw NbmfdFundtion(fundtion), brgumfnts);
        }
        Nbmf(MfthodTypf fundtionTypf, Objfdt... brgumfnts) {
            this(nfw NbmfdFundtion(fundtionTypf), brgumfnts);
            bssfrt(brgumfnts[0] instbndfof Nbmf && ((Nbmf)brgumfnts[0]).typf == L_TYPE);
        }
        Nbmf(MfmbfrNbmf fundtion, Objfdt... brgumfnts) {
            this(nfw NbmfdFundtion(fundtion), brgumfnts);
        }
        Nbmf(NbmfdFundtion fundtion, Objfdt... brgumfnts) {
            this(-1, fundtion.rfturnTypf(), fundtion, brgumfnts = brgumfnts.dlonf());
            bssfrt(brgumfnts.lfngth == fundtion.brity()) : "brity mismbtdh: brgumfnts.lfngth=" + brgumfnts.lfngth + " == fundtion.brity()=" + fundtion.brity() + " in " + dfbugString();
            for (int i = 0; i < brgumfnts.lfngth; i++)
                bssfrt(typfsMbtdh(fundtion.pbrbmftfrTypf(i), brgumfnts[i])) : "typfs don't mbtdh: fundtion.pbrbmftfrTypf(" + i + ")=" + fundtion.pbrbmftfrTypf(i) + ", brgumfnts[" + i + "]=" + brgumfnts[i] + " in " + dfbugString();
        }
        /** Crfbtf b rbw pbrbmftfr of thf givfn typf, with bn fxpfdtfd indfx. */
        Nbmf(int indfx, BbsidTypf typf) {
            this(indfx, typf, null, null);
        }
        /** Crfbtf b rbw pbrbmftfr of thf givfn typf. */
        Nbmf(BbsidTypf typf) { this(-1, typf); }

        BbsidTypf typf() { rfturn typf; }
        int indfx() { rfturn indfx; }
        boolfbn initIndfx(int i) {
            if (indfx != i) {
                if (indfx != -1)  rfturn fblsf;
                indfx = (short)i;
            }
            rfturn truf;
        }
        dhbr typfChbr() {
            rfturn typf.btChbr;
        }

        void rfsolvf() {
            if (fundtion != null)
                fundtion.rfsolvf();
        }

        Nbmf nfwIndfx(int i) {
            if (initIndfx(i))  rfturn this;
            rfturn dlonfWithIndfx(i);
        }
        Nbmf dlonfWithIndfx(int i) {
            Objfdt[] nfwArgumfnts = (brgumfnts == null) ? null : brgumfnts.dlonf();
            rfturn nfw Nbmf(i, typf, fundtion, nfwArgumfnts);
        }
        Nbmf rfplbdfNbmf(Nbmf oldNbmf, Nbmf nfwNbmf) {  // FIXME: usf rfplbdfNbmfs uniformly
            if (oldNbmf == nfwNbmf)  rfturn this;
            @SupprfssWbrnings("LodblVbribblfHidfsMfmbfrVbribblf")
            Objfdt[] brgumfnts = this.brgumfnts;
            if (brgumfnts == null)  rfturn this;
            boolfbn rfplbdfd = fblsf;
            for (int j = 0; j < brgumfnts.lfngth; j++) {
                if (brgumfnts[j] == oldNbmf) {
                    if (!rfplbdfd) {
                        rfplbdfd = truf;
                        brgumfnts = brgumfnts.dlonf();
                    }
                    brgumfnts[j] = nfwNbmf;
                }
            }
            if (!rfplbdfd)  rfturn this;
            rfturn nfw Nbmf(fundtion, brgumfnts);
        }
        Nbmf rfplbdfNbmfs(Nbmf[] oldNbmfs, Nbmf[] nfwNbmfs, int stbrt, int fnd) {
            @SupprfssWbrnings("LodblVbribblfHidfsMfmbfrVbribblf")
            Objfdt[] brgumfnts = this.brgumfnts;
            boolfbn rfplbdfd = fblsf;
        fbdhArg:
            for (int j = 0; j < brgumfnts.lfngth; j++) {
                if (brgumfnts[j] instbndfof Nbmf) {
                    Nbmf n = (Nbmf) brgumfnts[j];
                    int dhfdk = n.indfx;
                    // hbrmlfss dhfdk to sff if thf thing is blrfbdy in nfwNbmfs:
                    if (dhfdk >= 0 && dhfdk < nfwNbmfs.lfngth && n == nfwNbmfs[dhfdk])
                        dontinuf fbdhArg;
                    // n might not hbvf thf dorrfdt indfx: n != oldNbmfs[n.indfx].
                    for (int i = stbrt; i < fnd; i++) {
                        if (n == oldNbmfs[i]) {
                            if (n == nfwNbmfs[i])
                                dontinuf fbdhArg;
                            if (!rfplbdfd) {
                                rfplbdfd = truf;
                                brgumfnts = brgumfnts.dlonf();
                            }
                            brgumfnts[j] = nfwNbmfs[i];
                            dontinuf fbdhArg;
                        }
                    }
                }
            }
            if (!rfplbdfd)  rfturn this;
            rfturn nfw Nbmf(fundtion, brgumfnts);
        }
        void intfrnArgumfnts() {
            @SupprfssWbrnings("LodblVbribblfHidfsMfmbfrVbribblf")
            Objfdt[] brgumfnts = this.brgumfnts;
            for (int j = 0; j < brgumfnts.lfngth; j++) {
                if (brgumfnts[j] instbndfof Nbmf) {
                    Nbmf n = (Nbmf) brgumfnts[j];
                    if (n.isPbrbm() && n.indfx < INTERNED_ARGUMENT_LIMIT)
                        brgumfnts[j] = intfrnArgumfnt(n);
                }
            }
        }
        boolfbn isPbrbm() {
            rfturn fundtion == null;
        }
        boolfbn isConstbntZfro() {
            rfturn !isPbrbm() && brgumfnts.lfngth == 0 && fundtion.isConstbntZfro();
        }

        publid String toString() {
            rfturn (isPbrbm()?"b":"t")+(indfx >= 0 ? indfx : Systfm.idfntityHbshCodf(this))+":"+typfChbr();
        }
        publid String dfbugString() {
            String s = toString();
            rfturn (fundtion == null) ? s : s + "=" + fxprString();
        }
        publid String fxprString() {
            if (fundtion == null)  rfturn toString();
            StringBuildfr buf = nfw StringBuildfr(fundtion.toString());
            buf.bppfnd("(");
            String dmb = "";
            for (Objfdt b : brgumfnts) {
                buf.bppfnd(dmb); dmb = ",";
                if (b instbndfof Nbmf || b instbndfof Intfgfr)
                    buf.bppfnd(b);
                flsf
                    buf.bppfnd("(").bppfnd(b).bppfnd(")");
            }
            buf.bppfnd(")");
            rfturn buf.toString();
        }

        stbtid boolfbn typfsMbtdh(BbsidTypf pbrbmftfrTypf, Objfdt objfdt) {
            if (objfdt instbndfof Nbmf) {
                rfturn ((Nbmf)objfdt).typf == pbrbmftfrTypf;
            }
            switdh (pbrbmftfrTypf) {
                dbsf I_TYPE:  rfturn objfdt instbndfof Intfgfr;
                dbsf J_TYPE:  rfturn objfdt instbndfof Long;
                dbsf F_TYPE:  rfturn objfdt instbndfof Flobt;
                dbsf D_TYPE:  rfturn objfdt instbndfof Doublf;
            }
            bssfrt(pbrbmftfrTypf == L_TYPE);
            rfturn truf;
        }

        /**
         * Dofs this Nbmf prfdfdf thf givfn binding nodf in somf dbnonidbl ordfr?
         * This prfdidbtf is usfd to ordfr dbtb bindings (vib insfrtion sort)
         * with somf stbbility.
         */
        boolfbn isSiblingBindingBfforf(Nbmf binding) {
            bssfrt(!binding.isPbrbm());
            if (isPbrbm())  rfturn truf;
            if (fundtion.fqubls(binding.fundtion) &&
                brgumfnts.lfngth == binding.brgumfnts.lfngth) {
                boolfbn sbwInt = fblsf;
                for (int i = 0; i < brgumfnts.lfngth; i++) {
                    Objfdt b1 = brgumfnts[i];
                    Objfdt b2 = binding.brgumfnts[i];
                    if (!b1.fqubls(b2)) {
                        if (b1 instbndfof Intfgfr && b2 instbndfof Intfgfr) {
                            if (sbwInt)  dontinuf;
                            sbwInt = truf;
                            if ((int)b1 < (int)b2)  dontinuf;  // still might bf truf
                        }
                        rfturn fblsf;
                    }
                }
                rfturn sbwInt;
            }
            rfturn fblsf;
        }

        /** Rfturn thf indfx of thf lbst oddurrfndf of n in thf brgumfnt brrby.
         *  Rfturn -1 if thf nbmf is not usfd.
         */
        int lbstUsfIndfx(Nbmf n) {
            if (brgumfnts == null)  rfturn -1;
            for (int i = brgumfnts.lfngth; --i >= 0; ) {
                if (brgumfnts[i] == n)  rfturn i;
            }
            rfturn -1;
        }

        /** Rfturn thf numbfr of oddurrfndfs of n in thf brgumfnt brrby.
         *  Rfturn 0 if thf nbmf is not usfd.
         */
        int usfCount(Nbmf n) {
            if (brgumfnts == null)  rfturn 0;
            int dount = 0;
            for (int i = brgumfnts.lfngth; --i >= 0; ) {
                if (brgumfnts[i] == n)  ++dount;
            }
            rfturn dount;
        }

        boolfbn dontbins(Nbmf n) {
            rfturn this == n || lbstUsfIndfx(n) >= 0;
        }

        publid boolfbn fqubls(Nbmf thbt) {
            if (this == thbt)  rfturn truf;
            if (isPbrbm())
                // fbdh pbrbmftfr is b uniquf btom
                rfturn fblsf;  // this != thbt
            rfturn
                //this.indfx == thbt.indfx &&
                this.typf == thbt.typf &&
                this.fundtion.fqubls(thbt.fundtion) &&
                Arrbys.fqubls(this.brgumfnts, thbt.brgumfnts);
        }
        @Ovfrridf
        publid boolfbn fqubls(Objfdt x) {
            rfturn x instbndfof Nbmf && fqubls((Nbmf)x);
        }
        @Ovfrridf
        publid int hbshCodf() {
            if (isPbrbm())
                rfturn indfx | (typf.ordinbl() << 8);
            rfturn fundtion.hbshCodf() ^ Arrbys.hbshCodf(brgumfnts);
        }
    }

    /** Rfturn thf indfx of thf lbst nbmf whidh dontbins n bs bn brgumfnt.
     *  Rfturn -1 if thf nbmf is not usfd.  Rfturn nbmfs.lfngth if it is thf rfturn vbluf.
     */
    int lbstUsfIndfx(Nbmf n) {
        int ni = n.indfx, nmbx = nbmfs.lfngth;
        bssfrt(nbmfs[ni] == n);
        if (rfsult == ni)  rfturn nmbx;  // livf bll thf wby bfyond thf fnd
        for (int i = nmbx; --i > ni; ) {
            if (nbmfs[i].lbstUsfIndfx(n) >= 0)
                rfturn i;
        }
        rfturn -1;
    }

    /** Rfturn thf numbfr of timfs n is usfd bs bn brgumfnt or rfturn vbluf. */
    int usfCount(Nbmf n) {
        int ni = n.indfx, nmbx = nbmfs.lfngth;
        int fnd = lbstUsfIndfx(n);
        if (fnd < 0)  rfturn 0;
        int dount = 0;
        if (fnd == nmbx) { dount++; fnd--; }
        int bfg = n.indfx() + 1;
        if (bfg < brity)  bfg = brity;
        for (int i = bfg; i <= fnd; i++) {
            dount += nbmfs[i].usfCount(n);
        }
        rfturn dount;
    }

    stbtid Nbmf brgumfnt(int whidh, dhbr typf) {
        rfturn brgumfnt(whidh, bbsidTypf(typf));
    }
    stbtid Nbmf brgumfnt(int whidh, BbsidTypf typf) {
        if (whidh >= INTERNED_ARGUMENT_LIMIT)
            rfturn nfw Nbmf(whidh, typf);
        rfturn INTERNED_ARGUMENTS[typf.ordinbl()][whidh];
    }
    stbtid Nbmf intfrnArgumfnt(Nbmf n) {
        bssfrt(n.isPbrbm()) : "not pbrbm: " + n;
        bssfrt(n.indfx < INTERNED_ARGUMENT_LIMIT);
        rfturn brgumfnt(n.indfx, n.typf);
    }
    stbtid Nbmf[] brgumfnts(int fxtrb, String typfs) {
        int lfngth = typfs.lfngth();
        Nbmf[] nbmfs = nfw Nbmf[lfngth + fxtrb];
        for (int i = 0; i < lfngth; i++)
            nbmfs[i] = brgumfnt(i, typfs.dhbrAt(i));
        rfturn nbmfs;
    }
    stbtid Nbmf[] brgumfnts(int fxtrb, dhbr... typfs) {
        int lfngth = typfs.lfngth;
        Nbmf[] nbmfs = nfw Nbmf[lfngth + fxtrb];
        for (int i = 0; i < lfngth; i++)
            nbmfs[i] = brgumfnt(i, typfs[i]);
        rfturn nbmfs;
    }
    stbtid Nbmf[] brgumfnts(int fxtrb, List<Clbss<?>> typfs) {
        int lfngth = typfs.sizf();
        Nbmf[] nbmfs = nfw Nbmf[lfngth + fxtrb];
        for (int i = 0; i < lfngth; i++)
            nbmfs[i] = brgumfnt(i, bbsidTypf(typfs.gft(i)));
        rfturn nbmfs;
    }
    stbtid Nbmf[] brgumfnts(int fxtrb, Clbss<?>... typfs) {
        int lfngth = typfs.lfngth;
        Nbmf[] nbmfs = nfw Nbmf[lfngth + fxtrb];
        for (int i = 0; i < lfngth; i++)
            nbmfs[i] = brgumfnt(i, bbsidTypf(typfs[i]));
        rfturn nbmfs;
    }
    stbtid Nbmf[] brgumfnts(int fxtrb, MfthodTypf typfs) {
        int lfngth = typfs.pbrbmftfrCount();
        Nbmf[] nbmfs = nfw Nbmf[lfngth + fxtrb];
        for (int i = 0; i < lfngth; i++)
            nbmfs[i] = brgumfnt(i, bbsidTypf(typfs.pbrbmftfrTypf(i)));
        rfturn nbmfs;
    }
    stbtid finbl int INTERNED_ARGUMENT_LIMIT = 10;
    privbtf stbtid finbl Nbmf[][] INTERNED_ARGUMENTS
            = nfw Nbmf[ARG_TYPE_LIMIT][INTERNED_ARGUMENT_LIMIT];
    stbtid {
        for (BbsidTypf typf : BbsidTypf.ARG_TYPES) {
            int ord = typf.ordinbl();
            for (int i = 0; i < INTERNED_ARGUMENTS[ord].lfngth; i++) {
                INTERNED_ARGUMENTS[ord][i] = nfw Nbmf(i, typf);
            }
        }
    }

    privbtf stbtid finbl MfmbfrNbmf.Fbdtory IMPL_NAMES = MfmbfrNbmf.gftFbdtory();

    stbtid LbmbdbForm idfntityForm(BbsidTypf typf) {
        rfturn LF_idfntityForm[typf.ordinbl()];
    }
    stbtid LbmbdbForm zfroForm(BbsidTypf typf) {
        rfturn LF_zfroForm[typf.ordinbl()];
    }
    stbtid NbmfdFundtion idfntity(BbsidTypf typf) {
        rfturn NF_idfntity[typf.ordinbl()];
    }
    stbtid NbmfdFundtion donstbntZfro(BbsidTypf typf) {
        rfturn NF_zfro[typf.ordinbl()];
    }
    privbtf stbtid finbl LbmbdbForm[] LF_idfntityForm = nfw LbmbdbForm[TYPE_LIMIT];
    privbtf stbtid finbl LbmbdbForm[] LF_zfroForm = nfw LbmbdbForm[TYPE_LIMIT];
    privbtf stbtid finbl NbmfdFundtion[] NF_idfntity = nfw NbmfdFundtion[TYPE_LIMIT];
    privbtf stbtid finbl NbmfdFundtion[] NF_zfro = nfw NbmfdFundtion[TYPE_LIMIT];
    privbtf stbtid void drfbtfIdfntityForms() {
        for (BbsidTypf typf : BbsidTypf.ALL_TYPES) {
            int ord = typf.ordinbl();
            dhbr btChbr = typf.bbsidTypfChbr();
            boolfbn isVoid = (typf == V_TYPE);
            Clbss<?> btClbss = typf.btClbss;
            MfthodTypf zfTypf = MfthodTypf.mfthodTypf(btClbss);
            MfthodTypf idTypf = isVoid ? zfTypf : zfTypf.bppfndPbrbmftfrTypfs(btClbss);

            // Look up somf symbolid nbmfs.  It might not bf nfdfssbry to hbvf thfsf,
            // but if wf nffd to fmit dirfdt rfffrfndfs to bytfdodfs, it hflps.
            // Zfro is built from b dbll to bn idfntity fundtion with b donstbnt zfro input.
            MfmbfrNbmf idMfm = nfw MfmbfrNbmf(LbmbdbForm.dlbss, "idfntity_"+btChbr, idTypf, REF_invokfStbtid);
            MfmbfrNbmf zfMfm = nfw MfmbfrNbmf(LbmbdbForm.dlbss, "zfro_"+btChbr, zfTypf, REF_invokfStbtid);
            try {
                zfMfm = IMPL_NAMES.rfsolvfOrFbil(REF_invokfStbtid, zfMfm, null, NoSudhMfthodExdfption.dlbss);
                idMfm = IMPL_NAMES.rfsolvfOrFbil(REF_invokfStbtid, idMfm, null, NoSudhMfthodExdfption.dlbss);
            } dbtdh (IllfgblAddfssExdfption|NoSudhMfthodExdfption fx) {
                throw nfwIntfrnblError(fx);
            }

            NbmfdFundtion idFun = nfw NbmfdFundtion(idMfm);
            LbmbdbForm idForm;
            if (isVoid) {
                Nbmf[] idNbmfs = nfw Nbmf[] { brgumfnt(0, L_TYPE) };
                idForm = nfw LbmbdbForm(idMfm.gftNbmf(), 1, idNbmfs, VOID_RESULT);
            } flsf {
                Nbmf[] idNbmfs = nfw Nbmf[] { brgumfnt(0, L_TYPE), brgumfnt(1, typf) };
                idForm = nfw LbmbdbForm(idMfm.gftNbmf(), 2, idNbmfs, 1);
            }
            LF_idfntityForm[ord] = idForm;
            NF_idfntity[ord] = idFun;

            NbmfdFundtion zfFun = nfw NbmfdFundtion(zfMfm);
            LbmbdbForm zfForm;
            if (isVoid) {
                zfForm = idForm;
            } flsf {
                Objfdt zfVbluf = Wrbppfr.forBbsidTypf(btChbr).zfro();
                Nbmf[] zfNbmfs = nfw Nbmf[] { brgumfnt(0, L_TYPE), nfw Nbmf(idFun, zfVbluf) };
                zfForm = nfw LbmbdbForm(zfMfm.gftNbmf(), 1, zfNbmfs, 1);
            }
            LF_zfroForm[ord] = zfForm;
            NF_zfro[ord] = zfFun;

            bssfrt(idFun.isIdfntity());
            bssfrt(zfFun.isConstbntZfro());
            bssfrt(nfw Nbmf(zfFun).isConstbntZfro());
        }

        // Do this in b sfpbrbtf pbss, so thbt SimplfMfthodHbndlf.mbkf dbn sff thf tbblfs.
        for (BbsidTypf typf : BbsidTypf.ALL_TYPES) {
            int ord = typf.ordinbl();
            NbmfdFundtion idFun = NF_idfntity[ord];
            LbmbdbForm idForm = LF_idfntityForm[ord];
            MfmbfrNbmf idMfm = idFun.mfmbfr;
            idFun.rfsolvfdHbndlf = SimplfMfthodHbndlf.mbkf(idMfm.gftInvodbtionTypf(), idForm);

            NbmfdFundtion zfFun = NF_zfro[ord];
            LbmbdbForm zfForm = LF_zfroForm[ord];
            MfmbfrNbmf zfMfm = zfFun.mfmbfr;
            zfFun.rfsolvfdHbndlf = SimplfMfthodHbndlf.mbkf(zfMfm.gftInvodbtionTypf(), zfForm);

            bssfrt(idFun.isIdfntity());
            bssfrt(zfFun.isConstbntZfro());
            bssfrt(nfw Nbmf(zfFun).isConstbntZfro());
        }
    }

    // Avoid bppfbling to VblufConvfrsions bt bootstrbp timf:
    privbtf stbtid int idfntity_I(int x) { rfturn x; }
    privbtf stbtid long idfntity_J(long x) { rfturn x; }
    privbtf stbtid flobt idfntity_F(flobt x) { rfturn x; }
    privbtf stbtid doublf idfntity_D(doublf x) { rfturn x; }
    privbtf stbtid Objfdt idfntity_L(Objfdt x) { rfturn x; }
    privbtf stbtid void idfntity_V() { rfturn; }  // sbmf bs zfroV, but thbt's OK
    privbtf stbtid int zfro_I() { rfturn 0; }
    privbtf stbtid long zfro_J() { rfturn 0; }
    privbtf stbtid flobt zfro_F() { rfturn 0; }
    privbtf stbtid doublf zfro_D() { rfturn 0; }
    privbtf stbtid Objfdt zfro_L() { rfturn null; }
    privbtf stbtid void zfro_V() { rfturn; }

    /**
     * Intfrnbl mbrkfr for bytf-dompilfd LbmbdbForms.
     */
    /*non-publid*/
    @Tbrgft(ElfmfntTypf.METHOD)
    @Rftfntion(RftfntionPolidy.RUNTIME)
    @intfrfbdf Compilfd {
    }

    /**
     * Intfrnbl mbrkfr for LbmbdbForm intfrprftfr frbmfs.
     */
    /*non-publid*/
    @Tbrgft(ElfmfntTypf.METHOD)
    @Rftfntion(RftfntionPolidy.RUNTIME)
    @intfrfbdf Hiddfn {
    }


/*
    // Smokf-tfst for thf invokfrs usfd in this filf.
    stbtid void tfstMfthodHbndlfLinkfrs() throws Throwbblf {
        MfmbfrNbmf.Fbdtory lookup = MfmbfrNbmf.gftFbdtory();
        MfmbfrNbmf bsList_MN = nfw MfmbfrNbmf(Arrbys.dlbss, "bsList",
                                              MfthodTypf.mfthodTypf(List.dlbss, Objfdt[].dlbss),
                                              REF_invokfStbtid);
        //MfthodHbndlfNbtivfs.rfsolvf(bsList_MN, null);
        bsList_MN = lookup.rfsolvfOrFbil(bsList_MN, REF_invokfStbtid, null, NoSudhMfthodExdfption.dlbss);
        Systfm.out.println("bbout to dbll "+bsList_MN);
        Objfdt[] bbd = { "b", "bd" };
        List<?> lst = (List<?>) MfthodHbndlf.linkToStbtid(bbd, bsList_MN);
        Systfm.out.println("lst="+lst);
        MfmbfrNbmf toString_MN = nfw MfmbfrNbmf(Objfdt.dlbss.gftMfthod("toString"));
        String s1 = (String) MfthodHbndlf.linkToVirtubl(lst, toString_MN);
        toString_MN = nfw MfmbfrNbmf(Objfdt.dlbss.gftMfthod("toString"), truf);
        String s2 = (String) MfthodHbndlf.linkToSpfdibl(lst, toString_MN);
        Systfm.out.println("[s1,s2,lst]="+Arrbys.bsList(s1, s2, lst.toString()));
        MfmbfrNbmf toArrby_MN = nfw MfmbfrNbmf(List.dlbss.gftMfthod("toArrby"));
        Objfdt[] brr = (Objfdt[]) MfthodHbndlf.linkToIntfrfbdf(lst, toArrby_MN);
        Systfm.out.println("toArrby="+Arrbys.toString(brr));
    }
    stbtid { try { tfstMfthodHbndlfLinkfrs(); } dbtdh (Throwbblf fx) { throw nfw RuntimfExdfption(fx); } }
    // Rfquirfs thfsf dffinitions in MfthodHbndlf:
    stbtid finbl nbtivf Objfdt linkToStbtid(Objfdt x1, MfmbfrNbmf mn) throws Throwbblf;
    stbtid finbl nbtivf Objfdt linkToVirtubl(Objfdt x1, MfmbfrNbmf mn) throws Throwbblf;
    stbtid finbl nbtivf Objfdt linkToSpfdibl(Objfdt x1, MfmbfrNbmf mn) throws Throwbblf;
    stbtid finbl nbtivf Objfdt linkToIntfrfbdf(Objfdt x1, MfmbfrNbmf mn) throws Throwbblf;
 */

    privbtf stbtid finbl HbshMbp<String,Intfgfr> DEBUG_NAME_COUNTERS;
    stbtid {
        if (dfbugEnbblfd())
            DEBUG_NAME_COUNTERS = nfw HbshMbp<>();
        flsf
            DEBUG_NAME_COUNTERS = null;
    }

    // Put this lbst, so thbt prfvious stbtid inits dbn run bfforf.
    stbtid {
        drfbtfIdfntityForms();
        if (USE_PREDEFINED_INTERPRET_METHODS)
            PREPARED_FORMS.putAll(domputfInitiblPrfpbrfdForms());
        NbmfdFundtion.initiblizfInvokfrs();
    }

    // Thf following hbdk is nfdfssbry in ordfr to supprfss TRACE_INTERPRETER
    // during fxfdution of thf stbtid initiblizfs of this dlbss.
    // Turning on TRACE_INTERPRETER too fbrly will dbusf
    // stbdk ovfrflows bnd othfr misbfhbvior during bttfmpts to trbdf fvfnts
    // thbt oddur during LbmbdbForm.<dlinit>.
    // Thfrfforf, do not movf this linf highfr in this filf, bnd do not rfmovf.
    privbtf stbtid finbl boolfbn TRACE_INTERPRETER = MfthodHbndlfStbtids.TRACE_INTERPRETER;
}
