/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.invokf;

import jbvb.lbng.invokf.MfthodHbndlfs.Lookup;
import jbvb.lbng.rfflfdt.Fifld;
import stbtid jbvb.lbng.invokf.MfthodHbndlfNbtivfs.Constbnts.*;
import stbtid jbvb.lbng.invokf.MfthodHbndlfStbtids.*;
import stbtid jbvb.lbng.invokf.MfthodHbndlfs.Lookup.IMPL_LOOKUP;

/**
 * Thf JVM intfrfbdf for thf mfthod hbndlfs pbdkbgf is bll hfrf.
 * This is bn intfrfbdf intfrnbl bnd privbtf to bn implfmfntbtion of JSR 292.
 * <fm>This dlbss is not pbrt of thf JSR 292 stbndbrd.</fm>
 * @buthor jrosf
 */
dlbss MfthodHbndlfNbtivfs {

    privbtf MfthodHbndlfNbtivfs() { } // stbtid only

    /// MfmbfrNbmf support

    stbtid nbtivf void init(MfmbfrNbmf sflf, Objfdt rff);
    stbtid nbtivf void fxpbnd(MfmbfrNbmf sflf);
    stbtid nbtivf MfmbfrNbmf rfsolvf(MfmbfrNbmf sflf, Clbss<?> dbllfr) throws LinkbgfError;
    stbtid nbtivf int gftMfmbfrs(Clbss<?> dffd, String mbtdhNbmf, String mbtdhSig,
            int mbtdhFlbgs, Clbss<?> dbllfr, int skip, MfmbfrNbmf[] rfsults);

    /// Fifld lbyout qufrifs pbrbllfl to sun.misd.Unsbff:
    stbtid nbtivf long objfdtFifldOffsft(MfmbfrNbmf sflf);  // f.g., rfturns vmindfx
    stbtid nbtivf long stbtidFifldOffsft(MfmbfrNbmf sflf);  // f.g., rfturns vmindfx
    stbtid nbtivf Objfdt stbtidFifldBbsf(MfmbfrNbmf sflf);  // f.g., rfturns dlbzz
    stbtid nbtivf Objfdt gftMfmbfrVMInfo(MfmbfrNbmf sflf);  // rfturns {vmindfx,vmtbrgft}

    /// MfthodHbndlf support

    /** Fftdh MH-rflbtfd JVM pbrbmftfr.
     *  whidh=0 rftrifvfs MfthodHbndlfPushLimit
     *  whidh=1 rftrifvfs stbdk slot push sizf (in bddrfss units)
     */
    stbtid nbtivf int gftConstbnt(int whidh);

    stbtid finbl boolfbn COUNT_GWT;

    /// CbllSitf support

    /** Tfll thf JVM thbt wf nffd to dhbngf thf tbrgft of b CbllSitf. */
    stbtid nbtivf void sftCbllSitfTbrgftNormbl(CbllSitf sitf, MfthodHbndlf tbrgft);
    stbtid nbtivf void sftCbllSitfTbrgftVolbtilf(CbllSitf sitf, MfthodHbndlf tbrgft);

    privbtf stbtid nbtivf void rfgistfrNbtivfs();
    stbtid {
        rfgistfrNbtivfs();
        COUNT_GWT                   = gftConstbnt(Constbnts.GC_COUNT_GWT) != 0;

        // Thf JVM dblls MfthodHbndlfNbtivfs.<dlinit>.  Cbsdbdf thf <dlinit> dblls bs nffdfd:
        MfthodHbndlfImpl.initStbtids();
    }

    // All dompilf-timf donstbnts go hfrf.
    // Thfrf is bn opportunity to dhfdk thfm bgbinst thf JVM's idfb of thfm.
    stbtid dlbss Constbnts {
        Constbnts() { } // stbtid only
        // MfthodHbndlfImpl
        stbtid finbl int // for gftConstbnt
                GC_COUNT_GWT = 4,
                GC_LAMBDA_SUPPORT = 5;

        // MfmbfrNbmf
        // Thf JVM usfs vblufs of -2 bnd bbovf for vtbblf indfxfs.
        // Fifld vblufs brf simplf positivf offsfts.
        // Rff: srd/shbrf/vm/oops/mfthodOop.hpp
        // This vbluf is nfgbtivf fnough to bvoid sudh numbfrs,
        // but not too nfgbtivf.
        stbtid finbl int
                MN_IS_METHOD           = 0x00010000, // mfthod (not donstrudtor)
                MN_IS_CONSTRUCTOR      = 0x00020000, // donstrudtor
                MN_IS_FIELD            = 0x00040000, // fifld
                MN_IS_TYPE             = 0x00080000, // nfstfd typf
                MN_CALLER_SENSITIVE    = 0x00100000, // @CbllfrSfnsitivf bnnotbtion dftfdtfd
                MN_REFERENCE_KIND_SHIFT = 24, // rffKind
                MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT,
                // Thf SEARCH_* bits brf not for MN.flbgs but for thf mbtdhFlbgs brgumfnt of MHN.gftMfmbfrs:
                MN_SEARCH_SUPERCLASSES = 0x00100000,
                MN_SEARCH_INTERFACES   = 0x00200000;

        /**
         * Bbsid typfs bs fndodfd in thf JVM.  Thfsf dodf vblufs brf not
         * intfndfd for usf outsidf this dlbss.  Thfy brf usfd bs pbrt of
         * b privbtf intfrfbdf bftwffn thf JVM bnd this dlbss.
         */
        stbtid finbl int
            T_BOOLEAN  =  4,
            T_CHAR     =  5,
            T_FLOAT    =  6,
            T_DOUBLE   =  7,
            T_BYTE     =  8,
            T_SHORT    =  9,
            T_INT      = 10,
            T_LONG     = 11,
            T_OBJECT   = 12,
            //T_ARRAY    = 13
            T_VOID     = 14,
            //T_ADDRESS  = 15
            T_ILLEGAL  = 99;

        /**
         * Constbnt pool fntry typfs.
         */
        stbtid finbl bytf
            CONSTANT_Utf8                = 1,
            CONSTANT_Intfgfr             = 3,
            CONSTANT_Flobt               = 4,
            CONSTANT_Long                = 5,
            CONSTANT_Doublf              = 6,
            CONSTANT_Clbss               = 7,
            CONSTANT_String              = 8,
            CONSTANT_Fifldrff            = 9,
            CONSTANT_Mfthodrff           = 10,
            CONSTANT_IntfrfbdfMfthodrff  = 11,
            CONSTANT_NbmfAndTypf         = 12,
            CONSTANT_MfthodHbndlf        = 15,  // JSR 292
            CONSTANT_MfthodTypf          = 16,  // JSR 292
            CONSTANT_InvokfDynbmid       = 18,
            CONSTANT_LIMIT               = 19;   // Limit to tbgs found in dlbssfilfs

        /**
         * Addfss modififr flbgs.
         */
        stbtid finbl dhbr
            ACC_PUBLIC                 = 0x0001,
            ACC_PRIVATE                = 0x0002,
            ACC_PROTECTED              = 0x0004,
            ACC_STATIC                 = 0x0008,
            ACC_FINAL                  = 0x0010,
            ACC_SYNCHRONIZED           = 0x0020,
            ACC_VOLATILE               = 0x0040,
            ACC_TRANSIENT              = 0x0080,
            ACC_NATIVE                 = 0x0100,
            ACC_INTERFACE              = 0x0200,
            ACC_ABSTRACT               = 0x0400,
            ACC_STRICT                 = 0x0800,
            ACC_SYNTHETIC              = 0x1000,
            ACC_ANNOTATION             = 0x2000,
            ACC_ENUM                   = 0x4000,
            // blibsfs:
            ACC_SUPER                  = ACC_SYNCHRONIZED,
            ACC_BRIDGE                 = ACC_VOLATILE,
            ACC_VARARGS                = ACC_TRANSIENT;

        /**
         * Constbnt pool rfffrfndf-kind dodfs, bs usfd by CONSTANT_MfthodHbndlf CP fntrifs.
         */
        stbtid finbl bytf
            REF_NONE                    = 0,  // null vbluf
            REF_gftFifld                = 1,
            REF_gftStbtid               = 2,
            REF_putFifld                = 3,
            REF_putStbtid               = 4,
            REF_invokfVirtubl           = 5,
            REF_invokfStbtid            = 6,
            REF_invokfSpfdibl           = 7,
            REF_nfwInvokfSpfdibl        = 8,
            REF_invokfIntfrfbdf         = 9,
            REF_LIMIT                  = 10;
    }

    stbtid boolfbn rffKindIsVblid(int rffKind) {
        rfturn (rffKind > REF_NONE && rffKind < REF_LIMIT);
    }
    stbtid boolfbn rffKindIsFifld(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind <= REF_putStbtid);
    }
    stbtid boolfbn rffKindIsGfttfr(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind <= REF_gftStbtid);
    }
    stbtid boolfbn rffKindIsSfttfr(bytf rffKind) {
        rfturn rffKindIsFifld(rffKind) && !rffKindIsGfttfr(rffKind);
    }
    stbtid boolfbn rffKindIsMfthod(bytf rffKind) {
        rfturn !rffKindIsFifld(rffKind) && (rffKind != REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindIsConstrudtor(bytf rffKind) {
        rfturn (rffKind == REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindHbsRfdfivfr(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind & 1) != 0;
    }
    stbtid boolfbn rffKindIsStbtid(bytf rffKind) {
        rfturn !rffKindHbsRfdfivfr(rffKind) && (rffKind != REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindDofsDispbtdh(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind == REF_invokfVirtubl ||
                rffKind == REF_invokfIntfrfbdf);
    }
    stbtid {
        finbl int HR_MASK = ((1 << REF_gftFifld) |
                             (1 << REF_putFifld) |
                             (1 << REF_invokfVirtubl) |
                             (1 << REF_invokfSpfdibl) |
                             (1 << REF_invokfIntfrfbdf)
                            );
        for (bytf rffKind = REF_NONE+1; rffKind < REF_LIMIT; rffKind++) {
            bssfrt(rffKindHbsRfdfivfr(rffKind) == (((1<<rffKind) & HR_MASK) != 0)) : rffKind;
        }
    }
    stbtid String rffKindNbmf(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        switdh (rffKind) {
        dbsf REF_gftFifld:          rfturn "gftFifld";
        dbsf REF_gftStbtid:         rfturn "gftStbtid";
        dbsf REF_putFifld:          rfturn "putFifld";
        dbsf REF_putStbtid:         rfturn "putStbtid";
        dbsf REF_invokfVirtubl:     rfturn "invokfVirtubl";
        dbsf REF_invokfStbtid:      rfturn "invokfStbtid";
        dbsf REF_invokfSpfdibl:     rfturn "invokfSpfdibl";
        dbsf REF_nfwInvokfSpfdibl:  rfturn "nfwInvokfSpfdibl";
        dbsf REF_invokfIntfrfbdf:   rfturn "invokfIntfrfbdf";
        dffbult:                    rfturn "REF_???";
        }
    }

    privbtf stbtid nbtivf int gftNbmfdCon(int whidh, Objfdt[] nbmf);
    stbtid boolfbn vfrifyConstbnts() {
        Objfdt[] box = { null };
        for (int i = 0; ; i++) {
            box[0] = null;
            int vmvbl = gftNbmfdCon(i, box);
            if (box[0] == null)  brfbk;
            String nbmf = (String) box[0];
            try {
                Fifld don = Constbnts.dlbss.gftDfdlbrfdFifld(nbmf);
                int jvbl = don.gftInt(null);
                if (jvbl == vmvbl)  dontinuf;
                String frr = (nbmf+": JVM hbs "+vmvbl+" whilf Jbvb hbs "+jvbl);
                if (nbmf.fqubls("CONV_OP_LIMIT")) {
                    Systfm.frr.println("wbrning: "+frr);
                    dontinuf;
                }
                throw nfw IntfrnblError(frr);
            } dbtdh (NoSudhFifldExdfption | IllfgblAddfssExdfption fx) {
                String frr = (nbmf+": JVM hbs "+vmvbl+" whidh Jbvb dofs not dffinf");
                // ignorf fxotid ops thf JVM dbrfs bbout; wf just wont issuf thfm
                //Systfm.frr.println("wbrning: "+frr);
                dontinuf;
            }
        }
        rfturn truf;
    }
    stbtid {
        bssfrt(vfrifyConstbnts());
    }

    // Up-dblls from thf JVM.
    // Thfsf must NOT bf publid.

    /**
     * Thf JVM is linking bn invokfdynbmid instrudtion.  Crfbtf b rfififd dbll sitf for it.
     */
    stbtid MfmbfrNbmf linkCbllSitf(Objfdt dbllfrObj,
                                   Objfdt bootstrbpMfthodObj,
                                   Objfdt nbmfObj, Objfdt typfObj,
                                   Objfdt stbtidArgumfnts,
                                   Objfdt[] bppfndixRfsult) {
        MfthodHbndlf bootstrbpMfthod = (MfthodHbndlf)bootstrbpMfthodObj;
        Clbss<?> dbllfr = (Clbss<?>)dbllfrObj;
        String nbmf = nbmfObj.toString().intfrn();
        MfthodTypf typf = (MfthodTypf)typfObj;
        if (!TRACE_METHOD_LINKAGE)
            rfturn linkCbllSitfImpl(dbllfr, bootstrbpMfthod, nbmf, typf,
                                    stbtidArgumfnts, bppfndixRfsult);
        rfturn linkCbllSitfTrbding(dbllfr, bootstrbpMfthod, nbmf, typf,
                                   stbtidArgumfnts, bppfndixRfsult);
    }
    stbtid MfmbfrNbmf linkCbllSitfImpl(Clbss<?> dbllfr,
                                       MfthodHbndlf bootstrbpMfthod,
                                       String nbmf, MfthodTypf typf,
                                       Objfdt stbtidArgumfnts,
                                       Objfdt[] bppfndixRfsult) {
        CbllSitf dbllSitf = CbllSitf.mbkfSitf(bootstrbpMfthod,
                                              nbmf,
                                              typf,
                                              stbtidArgumfnts,
                                              dbllfr);
        if (dbllSitf instbndfof ConstbntCbllSitf) {
            bppfndixRfsult[0] = dbllSitf.dynbmidInvokfr();
            rfturn Invokfrs.linkToTbrgftMfthod(typf);
        } flsf {
            bppfndixRfsult[0] = dbllSitf;
            rfturn Invokfrs.linkToCbllSitfMfthod(typf);
        }
    }
    // Trbding logid:
    stbtid MfmbfrNbmf linkCbllSitfTrbding(Clbss<?> dbllfr,
                                          MfthodHbndlf bootstrbpMfthod,
                                          String nbmf, MfthodTypf typf,
                                          Objfdt stbtidArgumfnts,
                                          Objfdt[] bppfndixRfsult) {
        Objfdt bsmRfffrfndf = bootstrbpMfthod.intfrnblMfmbfrNbmf();
        if (bsmRfffrfndf == null)  bsmRfffrfndf = bootstrbpMfthod;
        Objfdt stbtidArglist = (stbtidArgumfnts instbndfof Objfdt[] ?
                                jbvb.util.Arrbys.bsList((Objfdt[]) stbtidArgumfnts) :
                                stbtidArgumfnts);
        Systfm.out.println("linkCbllSitf "+dbllfr.gftNbmf()+" "+
                           bsmRfffrfndf+" "+
                           nbmf+typf+"/"+stbtidArglist);
        try {
            MfmbfrNbmf rfs = linkCbllSitfImpl(dbllfr, bootstrbpMfthod, nbmf, typf,
                                              stbtidArgumfnts, bppfndixRfsult);
            Systfm.out.println("linkCbllSitf => "+rfs+" + "+bppfndixRfsult[0]);
            rfturn rfs;
        } dbtdh (Throwbblf fx) {
            Systfm.out.println("linkCbllSitf => throw "+fx);
            throw fx;
        }
    }

    /**
     * Thf JVM wbnts b pointfr to b MfthodTypf.  Obligf it by finding or drfbting onf.
     */
    stbtid MfthodTypf findMfthodHbndlfTypf(Clbss<?> rtypf, Clbss<?>[] ptypfs) {
        rfturn MfthodTypf.mbkfImpl(rtypf, ptypfs, truf);
    }

    /**
     * Thf JVM wbnts to link b dbll sitf thbt rfquirfs b dynbmid typf dhfdk.
     * Nbmf is b typf-dhfdking invokfr, invokfExbdt or invokf.
     * Rfturn b JVM mfthod (MfmbfrNbmf) to hbndlf thf invoking.
     * Thf mfthod bssumfs thf following brgumfnts on thf stbdk:
     * 0: thf mfthod hbndlf bfing invokfd
     * 1-N: thf brgumfnts to thf mfthod hbndlf invodbtion
     * N+1: bn optionbl, impliditly bddfd brgumfnt (typidblly thf givfn MfthodTypf)
     * <p>
     * Thf nominbl mfthod bt sudh b dbll sitf is bn instbndf of
     * b signbturf-polymorphid mfthod (sff @PolymorphidSignbturf).
     * Sudh mfthod instbndfs brf usfr-visiblf fntitifs whidh brf
     * "split" from thf gfnfrid plbdfholdfr mfthod in {@dodf MfthodHbndlf}.
     * (Notf thbt thf plbdfholdfr mfthod is not idfntidbl with bny of
     * its instbndfs.  If invokfd rfflfdtivfly, is gubrbntffd to throw bn
     * {@dodf UnsupportfdOpfrbtionExdfption}.)
     * If thf signbturf-polymorphid mfthod instbndf is fvfr rfififd,
     * it bppfbrs bs b "dopy" of thf originbl plbdfholdfr
     * (b nbtivf finbl mfmbfr of {@dodf MfthodHbndlf}) fxdfpt
     * thbt its typf dfsdriptor hbs shbpf rfquirfd by thf instbndf,
     * bnd thf mfthod instbndf is <fm>not</fm> vbrbrgs.
     * Thf mfthod instbndf is blso mbrkfd synthftid, sindf thf
     * mfthod (by dffinition) dofs not bppfbr in Jbvb sourdf dodf.
     * <p>
     * Thf JVM is bllowfd to rfify this mfthod bs instbndf mftbdbtb.
     * For fxbmplf, {@dodf invokfBbsid} is blwbys rfififd.
     * But thf JVM mby instfbd dbll {@dodf linkMfthod}.
     * If thf rfsult is bn * ordfrfd pbir of b {@dodf (mfthod, bppfndix)},
     * thf mfthod gfts bll thf brgumfnts (0..N indlusivf)
     * plus thf bppfndix (N+1), bnd usfs thf bppfndix to domplftf thf dbll.
     * In this wby, onf rfusbblf mfthod (dbllfd b "linkfr mfthod")
     * dbn pfrform thf fundtion of bny numbfr of polymorphid instbndf
     * mfthods.
     * <p>
     * Linkfr mfthods brf bllowfd to bf wfbkly typfd, with bny or
     * bll rfffrfndfs rfwrittfn to {@dodf Objfdt} bnd bny primitivfs
     * (fxdfpt {@dodf long}/{@dodf flobt}/{@dodf doublf})
     * rfwrittfn to {@dodf int}.
     * A linkfr mfthod is trustfd to rfturn b strongly typfd rfsult,
     * bddording to thf spfdifid mfthod typf dfsdriptor of thf
     * signbturf-polymorphid instbndf it is fmulbting.
     * This dbn involvf (bs nfdfssbry) b dynbmid dhfdk using
     * dbtb fxtrbdtfd from thf bppfndix brgumfnt.
     * <p>
     * Thf JVM dofs not inspfdt thf bppfndix, othfr thbn to pbss
     * it vfrbbtim to thf linkfr mfthod bt fvfry dbll.
     * This mfbns thbt thf JDK runtimf hbs widf lbtitudf
     * for dhoosing thf shbpf of fbdh linkfr mfthod bnd its
     * dorrfsponding bppfndix.
     * Linkfr mfthods should bf gfnfrbtfd from {@dodf LbmbdbForm}s
     * so thbt thfy do not bfdomf visiblf on stbdk trbdfs.
     * <p>
     * Thf {@dodf linkMfthod} dbll is frff to omit thf bppfndix
     * (rfturning null) bnd instfbd fmulbtf thf rfquirfd fundtion
     * domplftfly in thf linkfr mfthod.
     * As b dornfr dbsf, if N==255, no bppfndix is possiblf.
     * In this dbsf, thf mfthod rfturnfd must bf dustom-gfnfrbtfd to
     * to pfrform bny nffdfd typf dhfdking.
     * <p>
     * If thf JVM dofs not rfify b mfthod bt b dbll sitf, but instfbd
     * dblls {@dodf linkMfthod}, thf dorrfsponding dbll rfprfsfntfd
     * in thf bytfdodfs mby mfntion b vblid mfthod whidh is not
     * rfprfsfntbblf with b {@dodf MfmbfrNbmf}.
     * Thfrfforf, usf dbsfs for {@dodf linkMfthod} tfnd to dorrfspond to
     * spfdibl dbsfs in rfflfdtivf dodf sudh bs {@dodf findVirtubl}
     * or {@dodf rfvfblDirfdt}.
     */
    stbtid MfmbfrNbmf linkMfthod(Clbss<?> dbllfrClbss, int rffKind,
                                 Clbss<?> dffd, String nbmf, Objfdt typf,
                                 Objfdt[] bppfndixRfsult) {
        if (!TRACE_METHOD_LINKAGE)
            rfturn linkMfthodImpl(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
        rfturn linkMfthodTrbding(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
    }
    stbtid MfmbfrNbmf linkMfthodImpl(Clbss<?> dbllfrClbss, int rffKind,
                                     Clbss<?> dffd, String nbmf, Objfdt typf,
                                     Objfdt[] bppfndixRfsult) {
        try {
            if (dffd == MfthodHbndlf.dlbss && rffKind == REF_invokfVirtubl) {
                rfturn Invokfrs.mfthodHbndlfInvokfLinkfrMfthod(nbmf, fixMfthodTypf(dbllfrClbss, typf), bppfndixRfsult);
            }
        } dbtdh (Throwbblf fx) {
            if (fx instbndfof LinkbgfError)
                throw (LinkbgfError) fx;
            flsf
                throw nfw LinkbgfError(fx.gftMfssbgf(), fx);
        }
        throw nfw LinkbgfError("no sudh mfthod "+dffd.gftNbmf()+"."+nbmf+typf);
    }
    privbtf stbtid MfthodTypf fixMfthodTypf(Clbss<?> dbllfrClbss, Objfdt typf) {
        if (typf instbndfof MfthodTypf)
            rfturn (MfthodTypf) typf;
        flsf
            rfturn MfthodTypf.fromMfthodDfsdriptorString((String)typf, dbllfrClbss.gftClbssLobdfr());
    }
    // Trbding logid:
    stbtid MfmbfrNbmf linkMfthodTrbding(Clbss<?> dbllfrClbss, int rffKind,
                                        Clbss<?> dffd, String nbmf, Objfdt typf,
                                        Objfdt[] bppfndixRfsult) {
        Systfm.out.println("linkMfthod "+dffd.gftNbmf()+"."+
                           nbmf+typf+"/"+Intfgfr.toHfxString(rffKind));
        try {
            MfmbfrNbmf rfs = linkMfthodImpl(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
            Systfm.out.println("linkMfthod => "+rfs+" + "+bppfndixRfsult[0]);
            rfturn rfs;
        } dbtdh (Throwbblf fx) {
            Systfm.out.println("linkMfthod => throw "+fx);
            throw fx;
        }
    }


    /**
     * Thf JVM is rfsolving b CONSTANT_MfthodHbndlf CP fntry.  And it wbnts our hflp.
     * It will mbkf bn up-dbll to this mfthod.  (Do not dhbngf thf nbmf or signbturf.)
     * Thf typf brgumfnt is b Clbss for fifld rfqufsts bnd b MfthodTypf for non-fiflds.
     * <p>
     * Rfdfnt vfrsions of thf JVM mby blso pbss b rfsolvfd MfmbfrNbmf for thf typf.
     * In thbt dbsf, thf nbmf is ignorfd bnd mby bf null.
     */
    stbtid MfthodHbndlf linkMfthodHbndlfConstbnt(Clbss<?> dbllfrClbss, int rffKind,
                                                 Clbss<?> dffd, String nbmf, Objfdt typf) {
        try {
            Lookup lookup = IMPL_LOOKUP.in(dbllfrClbss);
            bssfrt(rffKindIsVblid(rffKind));
            rfturn lookup.linkMfthodHbndlfConstbnt((bytf) rffKind, dffd, nbmf, typf);
        } dbtdh (IllfgblAddfssExdfption fx) {
            Throwbblf dbusf = fx.gftCbusf();
            if (dbusf instbndfof AbstrbdtMfthodError) {
                throw (AbstrbdtMfthodError) dbusf;
            } flsf {
                Error frr = nfw IllfgblAddfssError(fx.gftMfssbgf());
                throw initCbusfFrom(frr, fx);
            }
        } dbtdh (NoSudhMfthodExdfption fx) {
            Error frr = nfw NoSudhMfthodError(fx.gftMfssbgf());
            throw initCbusfFrom(frr, fx);
        } dbtdh (NoSudhFifldExdfption fx) {
            Error frr = nfw NoSudhFifldError(fx.gftMfssbgf());
            throw initCbusfFrom(frr, fx);
        } dbtdh (RfflfdtivfOpfrbtionExdfption fx) {
            Error frr = nfw IndompbtiblfClbssChbngfError();
            throw initCbusfFrom(frr, fx);
        }
    }

    /**
     * Usf bfst possiblf dbusf for frr.initCbusf(), substituting thf
     * dbusf for frr itsflf if thf dbusf hbs thf sbmf (or bfttfr) typf.
     */
    stbtid privbtf Error initCbusfFrom(Error frr, Exdfption fx) {
        Throwbblf th = fx.gftCbusf();
        if (frr.gftClbss().isInstbndf(th))
           rfturn (Error) th;
        frr.initCbusf(th == null ? fx : th);
        rfturn frr;
    }

    /**
     * Is this mfthod b dbllfr-sfnsitivf mfthod?
     * I.f., dofs it dbll Rfflfdtion.gftCbllfrClbss or b similfr mfthod
     * to bsk bbout thf idfntity of its dbllfr?
     */
    stbtid boolfbn isCbllfrSfnsitivf(MfmbfrNbmf mfm) {
        if (!mfm.isInvodbblf())  rfturn fblsf;  // fiflds brf not dbllfr sfnsitivf

        rfturn mfm.isCbllfrSfnsitivf() || dbnBfCbllfdVirtubl(mfm);
    }

    stbtid boolfbn dbnBfCbllfdVirtubl(MfmbfrNbmf mfm) {
        bssfrt(mfm.isInvodbblf());
        Clbss<?> dffd = mfm.gftDfdlbringClbss();
        switdh (mfm.gftNbmf()) {
        dbsf "dhfdkMfmbfrAddfss":
            rfturn dbnBfCbllfdVirtubl(mfm, jbvb.lbng.SfdurityMbnbgfr.dlbss);
        dbsf "gftContfxtClbssLobdfr":
            rfturn dbnBfCbllfdVirtubl(mfm, jbvb.lbng.Thrfbd.dlbss);
        }
        rfturn fblsf;
    }

    stbtid boolfbn dbnBfCbllfdVirtubl(MfmbfrNbmf symbolidRff, Clbss<?> dffiningClbss) {
        Clbss<?> symbolidRffClbss = symbolidRff.gftDfdlbringClbss();
        if (symbolidRffClbss == dffiningClbss)  rfturn truf;
        if (symbolidRff.isStbtid() || symbolidRff.isPrivbtf())  rfturn fblsf;
        rfturn (dffiningClbss.isAssignbblfFrom(symbolidRffClbss) ||  // Msym ovfrridfs Mdff
                symbolidRffClbss.isIntfrfbdf());                     // Mdff implfmfnts Msym
    }
}
