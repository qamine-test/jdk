/*
 * Copyrigit (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/**
 * Tif {@dodf jbvb.lbng.invokf} pbdkbgf dontbins dynbmid lbngubgf support providfd dirfdtly by
 * tif Jbvb dorf dlbss librbrifs bnd virtubl mbdiinf.
 *
 * <p>
 * As dfsdribfd in tif Jbvb Virtubl Mbdiinf Spfdifidbtion,
 * dfrtbin typfs in tiis pbdkbgf ibvf spfdibl rflbtions to dynbmid
 * lbngubgf support in tif virtubl mbdiinf:
 * <ul>
 * <li>Tif dlbss {@link jbvb.lbng.invokf.MftiodHbndlf MftiodHbndlf} dontbins
 * <b irff="MftiodHbndlf.itml#sigpoly">signbturf polymorpiid mftiods</b>
 * wiidi dbn bf linkfd rfgbrdlfss of tifir typf dfsdriptor.
 * Normblly, mftiod linkbgf rfquirfs fxbdt mbtdiing of typf dfsdriptors.
 * </li>
 *
 * <li>Tif JVM bytfdodf formbt supports immfdibtf donstbnts of
 * tif dlbssfs {@link jbvb.lbng.invokf.MftiodHbndlf MftiodHbndlf} bnd {@link jbvb.lbng.invokf.MftiodTypf MftiodTypf}.
 * </li>
 * </ul>
 *
 * <i1><b nbmf="jvm_mods"></b>Summbry of rflfvbnt Jbvb Virtubl Mbdiinf dibngfs</i1>
 * Tif following low-lfvfl informbtion summbrizfs rflfvbnt pbrts of tif
 * Jbvb Virtubl Mbdiinf spfdifidbtion.  For full dftbils, plfbsf sff tif
 * durrfnt vfrsion of tibt spfdifidbtion.
 *
 * Ebdi oddurrfndf of bn {@dodf invokfdynbmid} instrudtion is dbllfd b <fm>dynbmid dbll sitf</fm>.
 * <i2><b nbmf="indyinsn"></b>{@dodf invokfdynbmid} instrudtions</i2>
 * A dynbmid dbll sitf is originblly in bn unlinkfd stbtf.  In tiis stbtf, tifrf is
 * no tbrgft mftiod for tif dbll sitf to invokf.
 * <p>
 * Bfforf tif JVM dbn fxfdutf b dynbmid dbll sitf (bn {@dodf invokfdynbmid} instrudtion),
 * tif dbll sitf must first bf <fm>linkfd</fm>.
 * Linking is bddomplisifd by dblling b <fm>bootstrbp mftiod</fm>
 * wiidi is givfn tif stbtid informbtion dontfnt of tif dbll sitf,
 * bnd wiidi must produdf b {@link jbvb.lbng.invokf.MftiodHbndlf mftiod ibndlf}
 * tibt givfs tif bfibvior of tif dbll sitf.
 * <p>
 * Ebdi {@dodf invokfdynbmid} instrudtion stbtidblly spfdififs its own
 * bootstrbp mftiod bs b donstbnt pool rfffrfndf.
 * Tif donstbnt pool rfffrfndf blso spfdififs tif dbll sitf's nbmf bnd typf dfsdriptor,
 * just likf {@dodf invokfvirtubl} bnd tif otifr invokf instrudtions.
 * <p>
 * Linking stbrts witi rfsolving tif donstbnt pool fntry for tif
 * bootstrbp mftiod, bnd rfsolving b {@link jbvb.lbng.invokf.MftiodTypf MftiodTypf} objfdt for
 * tif typf dfsdriptor of tif dynbmid dbll sitf.
 * Tiis rfsolution prodfss mby triggfr dlbss lobding.
 * It mby tifrfforf tirow bn frror if b dlbss fbils to lobd.
 * Tiis frror bfdomfs tif bbnormbl tfrminbtion of tif dynbmid
 * dbll sitf fxfdution.
 * Linkbgf dofs not triggfr dlbss initiblizbtion.
 * <p>
 * Tif bootstrbp mftiod is invokfd on bt lfbst tirff vblufs:
 * <ul>
 * <li>b {@dodf MftiodHbndlfs.Lookup}, b lookup objfdt on tif <fm>dbllfr dlbss</fm> in wiidi dynbmid dbll sitf oddurs </li>
 * <li>b {@dodf String}, tif mftiod nbmf mfntionfd in tif dbll sitf </li>
 * <li>b {@dodf MftiodTypf}, tif rfsolvfd typf dfsdriptor of tif dbll </li>
 * <li>optionblly, bftwffn 1 bnd 251 bdditionbl stbtid brgumfnts tbkfn from tif donstbnt pool </li>
 * </ul>
 * Invodbtion is bs if by
 * {@link jbvb.lbng.invokf.MftiodHbndlf#invokf MftiodHbndlf.invokf}.
 * Tif rfturnfd rfsult must bf b {@link jbvb.lbng.invokf.CbllSitf CbllSitf} (or b subdlbss).
 * Tif typf of tif dbll sitf's tbrgft must bf fxbdtly fqubl to tif typf
 * dfrivfd from tif dynbmid dbll sitf's typf dfsdriptor bnd pbssfd to
 * tif bootstrbp mftiod.
 * Tif dbll sitf tifn bfdomfs pfrmbnfntly linkfd to tif dynbmid dbll sitf.
 * <p>
 * As dodumfntfd in tif JVM spfdifidbtion, bll fbilurfs brising from
 * tif linkbgf of b dynbmid dbll sitf brf rfportfd
 * by b {@link jbvb.lbng.BootstrbpMftiodError BootstrbpMftiodError},
 * wiidi is tirown bs tif bbnormbl tfrminbtion of tif dynbmid dbll
 * sitf fxfdution.
 * If tiis ibppfns, tif sbmf frror will tif tirown for bll subsfqufnt
 * bttfmpts to fxfdutf tif dynbmid dbll sitf.
 *
 * <i2>timing of linkbgf</i2>
 * A dynbmid dbll sitf is linkfd just bfforf its first fxfdution.
 * Tif bootstrbp mftiod dbll implfmfnting tif linkbgf oddurs witiin
 * b tirfbd tibt is bttfmpting b first fxfdution.
 * <p>
 * If tifrf brf sfvfrbl sudi tirfbds, tif bootstrbp mftiod mby bf
 * invokfd in sfvfrbl tirfbds dondurrfntly.
 * Tifrfforf, bootstrbp mftiods wiidi bddfss globbl bpplidbtion
 * dbtb must tbkf tif usubl prfdbutions bgbinst rbdf donditions.
 * In bny dbsf, fvfry {@dodf invokfdynbmid} instrudtion is fitifr
 * unlinkfd or linkfd to b uniquf {@dodf CbllSitf} objfdt.
 * <p>
 * In bn bpplidbtion wiidi rfquirfs dynbmid dbll sitfs witi individublly
 * mutbblf bfibviors, tifir bootstrbp mftiods siould produdf distindt
 * {@link jbvb.lbng.invokf.CbllSitf CbllSitf} objfdts, onf for fbdi linkbgf rfqufst.
 * Altfrnbtivfly, bn bpplidbtion dbn link b singlf {@dodf CbllSitf} objfdt
 * to sfvfrbl {@dodf invokfdynbmid} instrudtions, in wiidi dbsf
 * b dibngf to tif tbrgft mftiod will bfdomf visiblf bt fbdi of
 * tif instrudtions.
 * <p>
 * If sfvfrbl tirfbds simultbnfously fxfdutf b bootstrbp mftiod for b singlf dynbmid
 * dbll sitf, tif JVM must dioosf onf {@dodf CbllSitf} objfdt bnd instbll it visibly to
 * bll tirfbds.  Any otifr bootstrbp mftiod dblls brf bllowfd to domplftf, but tifir
 * rfsults brf ignorfd, bnd tifir dynbmid dbll sitf invodbtions prodffd witi tif originblly
 * diosfn tbrgft objfdt.

 * <p stylf="font-sizf:smbllfr;">
 * <fm>Disdussion:</fm>
 * Tifsf rulfs do not fnbblf tif JVM to duplidbtf dynbmid dbll sitfs,
 * or to issuf &ldquo;dbusflfss&rdquo; bootstrbp mftiod dblls.
 * Evfry dynbmid dbll sitf trbnsitions bt most ondf from unlinkfd to linkfd,
 * just bfforf its first invodbtion.
 * Tifrf is no wby to undo tif ffffdt of b domplftfd bootstrbp mftiod dbll.
 *
 * <i2>typfs of bootstrbp mftiods</i2>
 * As long bs fbdi bootstrbp mftiod dbn bf dorrfdtly invokfd
 * by {@dodf MftiodHbndlf.invokf}, its dftbilfd typf is brbitrbry.
 * For fxbmplf, tif first brgumfnt dould bf {@dodf Objfdt}
 * instfbd of {@dodf MftiodHbndlfs.Lookup}, bnd tif rfturn typf
 * dould blso bf {@dodf Objfdt} instfbd of {@dodf CbllSitf}.
 * (Notf tibt tif typfs bnd numbfr of tif stbdkfd brgumfnts limit
 * tif lfgbl kinds of bootstrbp mftiods to bppropribtfly typfd
 * stbtid mftiods bnd donstrudtors of {@dodf CbllSitf} subdlbssfs.)
 * <p>
 * If b givfn {@dodf invokfdynbmid} instrudtion spfdififs no stbtid brgumfnts,
 * tif instrudtion's bootstrbp mftiod will bf invokfd on tirff brgumfnts,
 * donvfying tif instrudtion's dbllfr dlbss, nbmf, bnd mftiod typf.
 * If tif {@dodf invokfdynbmid} instrudtion spfdififs onf or morf stbtid brgumfnts,
 * tiosf vblufs will bf pbssfd bs bdditionbl brgumfnts to tif mftiod ibndlf.
 * (Notf tibt bfdbusf tifrf is b limit of 255 brgumfnts to bny mftiod,
 * bt most 251 fxtrb brgumfnts dbn bf supplifd, sindf tif bootstrbp mftiod
 * ibndlf itsflf bnd its first tirff brgumfnts must blso bf stbdkfd.)
 * Tif bootstrbp mftiod will bf invokfd bs if by fitifr {@dodf MftiodHbndlf.invokf}
 * or {@dodf invokfWitiArgumfnts}.  (Tifrf is no wby to tfll tif difffrfndf.)
 * <p>
 * Tif normbl brgumfnt donvfrsion rulfs for {@dodf MftiodHbndlf.invokf} bpply to bll stbdkfd brgumfnts.
 * For fxbmplf, if b pusifd vbluf is b primitivf typf, it mby bf donvfrtfd to b rfffrfndf by boxing donvfrsion.
 * If tif bootstrbp mftiod is b vbribblf brity mftiod (its modififr bit {@dodf 0x0080} is sft),
 * tifn somf or bll of tif brgumfnts spfdififd ifrf mby bf dollfdtfd into b trbiling brrby pbrbmftfr.
 * (Tiis is not b spfdibl rulf, but rbtifr b usfful donsfqufndf of tif intfrbdtion
 * bftwffn {@dodf CONSTANT_MftiodHbndlf} donstbnts, tif modififr bit for vbribblf brity mftiods,
 * bnd tif {@link jbvb.lbng.invokf.MftiodHbndlf#bsVbrbrgsCollfdtor bsVbrbrgsCollfdtor} trbnsformbtion.)
 * <p>
 * Givfn tifsf rulfs, ifrf brf fxbmplfs of lfgbl bootstrbp mftiod dfdlbrbtions,
 * givfn vbrious numbfrs {@dodf N} of fxtrb brgumfnts.
 * Tif first rows (mbrkfd {@dodf *}) will work for bny numbfr of fxtrb brgumfnts.
 * <tbblf bordfr=1 dfllpbdding=5 summbry="Stbtid brgumfnt typfs">
 * <tr><ti>N</ti><ti>sbmplf bootstrbp mftiod</ti></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf, Objfdt... brgs)</dodf></td></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Objfdt... brgs)</dodf></td></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Objfdt dbllfr, Objfdt... nbmfAndTypfWitiArgs)</dodf></td></tr>
 * <tr><td>0</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf)</dodf></td></tr>
 * <tr><td>0</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, Objfdt... nbmfAndTypf)</dodf></td></tr>
 * <tr><td>1</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf, Objfdt brg)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf, Objfdt... brgs)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf, String... brgs)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MftiodTypf typf, String x, int y)</dodf></td></tr>
 * </tbblf>
 * Tif lbst fxbmplf bssumfs tibt tif fxtrb brgumfnts brf of typf
 * {@dodf CONSTANT_String} bnd {@dodf CONSTANT_Intfgfr}, rfspfdtivfly.
 * Tif sfdond-to-lbst fxbmplf bssumfs tibt bll fxtrb brgumfnts brf of typf
 * {@dodf CONSTANT_String}.
 * Tif otifr fxbmplfs work witi bll typfs of fxtrb brgumfnts.
 * <p>
 * As notfd bbovf, tif bdtubl mftiod typf of tif bootstrbp mftiod dbn vbry.
 * For fxbmplf, tif fourti brgumfnt dould bf {@dodf MftiodHbndlf},
 * if tibt is tif typf of tif dorrfsponding donstbnt in
 * tif {@dodf CONSTANT_InvokfDynbmid} fntry.
 * In tibt dbsf, tif {@dodf MftiodHbndlf.invokf} dbll will pbss tif fxtrb mftiod ibndlf
 * donstbnt bs bn {@dodf Objfdt}, but tif typf mbtdiing mbdiinfry of {@dodf MftiodHbndlf.invokf}
 * will dbst tif rfffrfndf bbdk to {@dodf MftiodHbndlf} bfforf invoking tif bootstrbp mftiod.
 * (If b string donstbnt wfrf pbssfd instfbd, by bbdly gfnfrbtfd dodf, tibt dbst would tifn fbil,
 * rfsulting in b {@dodf BootstrbpMftiodError}.)
 * <p>
 * Notf tibt, bs b donsfqufndf of tif bbovf rulfs, tif bootstrbp mftiod mby bddfpt b primitivf
 * brgumfnt, if it dbn bf rfprfsfntfd by b donstbnt pool fntry.
 * Howfvfr, brgumfnts of typf {@dodf boolfbn}, {@dodf bytf}, {@dodf siort}, or {@dodf dibr}
 * dbnnot bf drfbtfd for bootstrbp mftiods, sindf sudi donstbnts dbnnot bf dirfdtly
 * rfprfsfntfd in tif donstbnt pool, bnd tif invodbtion of tif bootstrbp mftiod will
 * not pfrform tif nfdfssbry nbrrowing primitivf donvfrsions.
 * <p>
 * Extrb bootstrbp mftiod brgumfnts brf intfndfd to bllow lbngubgf implfmfntors
 * to sbffly bnd dompbdtly fndodf mftbdbtb.
 * In prindiplf, tif nbmf bnd fxtrb brgumfnts brf rfdundbnt,
 * sindf fbdi dbll sitf dould bf givfn its own uniquf bootstrbp mftiod.
 * Sudi b prbdtidf is likfly to produdf lbrgf dlbss filfs bnd donstbnt pools.
 *
 * @butior Join Rosf, JSR 292 EG
 * @sindf 1.7
 */

pbdkbgf jbvb.lbng.invokf;
