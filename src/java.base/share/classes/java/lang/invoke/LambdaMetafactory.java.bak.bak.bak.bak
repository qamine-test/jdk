/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.invokf;

import jbvb.io.Sfriblizbblf;
import jbvb.util.Arrbys;

/**
 * <p>Mfthods to fbdilitbtf thf drfbtion of simplf "fundtion objfdts" thbt
 * implfmfnt onf or morf intfrfbdfs by dflfgbtion to b providfd {@link MfthodHbndlf},
 * possibly bftfr typf bdbptbtion bnd pbrtibl fvblubtion of brgumfnts.  Thfsf
 * mfthods brf typidblly usfd bs <fm>bootstrbp mfthods</fm> for {@dodf invokfdynbmid}
 * dbll sitfs, to support thf <fm>lbmbdb fxprfssion</fm> bnd <fm>mfthod
 * rfffrfndf fxprfssion</fm> ffbturfs of thf Jbvb Progrbmming Lbngubgf.
 *
 * <p>Indirfdt bddfss to thf bfhbvior spfdififd by thf providfd {@dodf MfthodHbndlf}
 * prodffds in ordfr through thrff phbsfs:
 * <ul>
 *     <li><fm>Linkbgf</fm> oddurs whfn thf mfthods in this dlbss brf invokfd.
 *     Thfy tbkf bs brgumfnts bn intfrfbdf to bf implfmfntfd (typidblly b
 *     <fm>fundtionbl intfrfbdf</fm>, onf with b singlf bbstrbdt mfthod), b
 *     nbmf bnd signbturf of b mfthod from thbt intfrfbdf to bf implfmfntfd, b
 *     mfthod hbndlf dfsdribing thf dfsirfd implfmfntbtion bfhbvior
 *     for thbt mfthod, bnd possibly othfr bdditionbl mftbdbtb, bnd produdf b
 *     {@link CbllSitf} whosf tbrgft dbn bf usfd to drfbtf suitbblf fundtion
 *     objfdts.  Linkbgf mby involvf dynbmidblly lobding b nfw dlbss thbt
 *     implfmfnts thf tbrgft intfrfbdf. Thf {@dodf CbllSitf} dbn bf donsidfrfd b
 *     "fbdtory" for fundtion objfdts bnd so thfsf linkbgf mfthods brf rfffrrfd
 *     to bs "mftbfbdtorifs".</li>
 *
 *     <li><fm>Cbpturf</fm> oddurs whfn thf {@dodf CbllSitf}'s tbrgft is
 *     invokfd, typidblly through bn {@dodf invokfdynbmid} dbll sitf,
 *     produding b fundtion objfdt.  This mby oddur mbny timfs for
 *     b singlf fbdtory {@dodf CbllSitf}.  Cbpturf mby involvf bllodbtion of b
 *     nfw fundtion objfdt, or mby rfturn bn fxisting fundtion objfdt.  Thf
 *     bfhbvior {@dodf MfthodHbndlf} mby hbvf bdditionbl pbrbmftfrs bfyond thosf
 *     of thf spfdififd intfrfbdf mfthod; thfsf brf rfffrrfd to bs <fm>dbpturfd
 *     pbrbmftfrs</fm>, whidh must bf providfd bs brgumfnts to thf
 *     {@dodf CbllSitf} tbrgft, bnd whidh mby bf fbrly-bound to thf bfhbvior
 *     {@dodf MfthodHbndlf}.  Thf numbfr of dbpturfd pbrbmftfrs bnd thfir typfs
 *     brf dftfrminfd during linkbgf.</li>
 *
 *     <li><fm>Invodbtion</fm> oddurs whfn bn implfmfntfd intfrfbdf mfthod
 *     is invokfd on b fundtion objfdt.  This mby oddur mbny timfs for b singlf
 *     fundtion objfdt.  Thf mfthod rfffrfndfd by thf bfhbvior {@dodf MfthodHbndlf}
 *     is invokfd with thf dbpturfd brgumfnts bnd bny bdditionbl brgumfnts
 *     providfd on invodbtion, bs if by {@link MfthodHbndlf#invokf(Objfdt...)}.</li>
 * </ul>
 *
 * <p>It is somftimfs usfful to rfstridt thf sft of inputs or rfsults pfrmittfd
 * bt invodbtion.  For fxbmplf, whfn thf gfnfrid intfrfbdf {@dodf Prfdidbtf<T>}
 * is pbrbmftfrizfd bs {@dodf Prfdidbtf<String>}, thf input must bf b
 * {@dodf String}, fvfn though thf mfthod to implfmfnt bllows bny {@dodf Objfdt}.
 * At linkbgf timf, bn bdditionbl {@link MfthodTypf} pbrbmftfr dfsdribfs thf
 * "instbntibtfd" mfthod typf; on invodbtion, thf brgumfnts bnd fvfntubl rfsult
 * brf dhfdkfd bgbinst this {@dodf MfthodTypf}.
 *
 * <p>This dlbss providfs two forms of linkbgf mfthods: b stbndbrd vfrsion
 * ({@link #mftbfbdtory(MfthodHbndlfs.Lookup, String, MfthodTypf, MfthodTypf, MfthodHbndlf, MfthodTypf)})
 * using bn optimizfd protodol, bnd bn bltfrnbtf vfrsion
 * {@link #bltMftbfbdtory(MfthodHbndlfs.Lookup, String, MfthodTypf, Objfdt...)}).
 * Thf bltfrnbtf vfrsion is b gfnfrblizbtion of thf stbndbrd vfrsion, providing
 * bdditionbl dontrol ovfr thf bfhbvior of thf gfnfrbtfd fundtion objfdts vib
 * flbgs bnd bdditionbl brgumfnts.  Thf bltfrnbtf vfrsion bdds thf bbility to
 * mbnbgf thf following bttributfs of fundtion objfdts:
 *
 * <ul>
 *     <li><fm>Bridging.</fm>  It is somftimfs usfful to implfmfnt multiplf
 *     vbribtions of thf mfthod signbturf, involving brgumfnt or rfturn typf
 *     bdbptbtion.  This oddurs whfn multiplf distindt VM signbturfs for b mfthod
 *     brf logidblly donsidfrfd to bf thf sbmf mfthod by thf lbngubgf.  Thf
 *     flbg {@dodf FLAG_BRIDGES} indidbtfs thbt b list of bdditionbl
 *     {@dodf MfthodTypf}s will bf providfd, fbdh of whidh will bf implfmfntfd
 *     by thf rfsulting fundtion objfdt.  Thfsf mfthods will shbrf thf sbmf
 *     nbmf bnd instbntibtfd typf.</li>
 *
 *     <li><fm>Multiplf intfrfbdfs.</fm>  If nffdfd, morf thbn onf intfrfbdf
 *     dbn bf implfmfntfd by thf fundtion objfdt.  (Thfsf bdditionbl intfrfbdfs
 *     brf typidblly mbrkfr intfrfbdfs with no mfthods.)  Thf flbg {@dodf FLAG_MARKERS}
 *     indidbtfs thbt b list of bdditionbl intfrfbdfs will bf providfd, fbdh of
 *     whidh should bf implfmfntfd by thf rfsulting fundtion objfdt.</li>
 *
 *     <li><fm>Sfriblizbbility.</fm>  Thf gfnfrbtfd fundtion objfdts do not
 *     gfnfrblly support sfriblizbtion.  If dfsirfd, {@dodf FLAG_SERIALIZABLE}
 *     dbn bf usfd to indidbtf thbt thf fundtion objfdts should bf sfriblizbblf.
 *     Sfriblizbblf fundtion objfdts will usf, bs thfir sfriblizfd form,
 *     instbndfs of thf dlbss {@dodf SfriblizfdLbmbdb}, whidh rfquirfs bdditionbl
 *     bssistbndf from thf dbpturing dlbss (thf dlbss dfsdribfd by thf
 *     {@link MfthodHbndlfs.Lookup} pbrbmftfr {@dodf dbllfr}); sff
 *     {@link SfriblizfdLbmbdb} for dftbils.</li>
 * </ul>
 *
 * <p>Assumf thf linkbgf brgumfnts brf bs follows:
 * <ul>
 *      <li>{@dodf invokfdTypf} (dfsdribing thf {@dodf CbllSitf} signbturf) hbs
 *      K pbrbmftfrs of typfs (D1..Dk) bnd rfturn typf Rd;</li>
 *      <li>{@dodf sbmMfthodTypf} (dfsdribing thf implfmfntfd mfthod typf) hbs N
 *      pbrbmftfrs, of typfs (U1..Un) bnd rfturn typf Ru;</li>
 *      <li>{@dodf implMfthod} (thf {@dodf MfthodHbndlf} providing thf
 *      implfmfntbtion hbs M pbrbmftfrs, of typfs (A1..Am) bnd rfturn typf Rb
 *      (if thf mfthod dfsdribfs bn instbndf mfthod, thf mfthod typf of this
 *      mfthod hbndlf blrfbdy indludfs bn fxtrb first brgumfnt dorrfsponding to
 *      thf rfdfivfr);</li>
 *      <li>{@dodf instbntibtfdMfthodTypf} (bllowing rfstridtions on invodbtion)
 *      hbs N pbrbmftfrs, of typfs (T1..Tn) bnd rfturn typf Rt.</li>
 * </ul>
 *
 * <p>Thfn thf following linkbgf invbribnts must hold:
 * <ul>
 *     <li>Rd is bn intfrfbdf</li>
 *     <li>{@dodf implMfthod} is b <fm>dirfdt mfthod hbndlf</fm></li>
 *     <li>{@dodf sbmMfthodTypf} bnd {@dodf instbntibtfdMfthodTypf} hbvf thf sbmf
 *     brity N, bnd for i=1..N, Ti bnd Ui brf thf sbmf typf, or Ti bnd Ui brf
 *     both rfffrfndf typfs bnd Ti is b subtypf of Ui</li>
 *     <li>Eithfr Rt bnd Ru brf thf sbmf typf, or both brf rfffrfndf typfs bnd
 *     Rt is b subtypf of Ru</li>
 *     <li>K + N = M</li>
 *     <li>For i=1..K, Di = Ai</li>
 *     <li>For i=1..N, Ti is bdbptbblf to Aj, whfrf j=i+k</li>
 *     <li>Thf rfturn typf Rt is void, or thf rfturn typf Rb is not void bnd is
 *     bdbptbblf to Rt</li>
 * </ul>
 *
 * <p>Furthfr, bt dbpturf timf, if {@dodf implMfthod} dorrfsponds to bn instbndf
 * mfthod, bnd thfrf brf bny dbpturf brgumfnts ({@dodf K > 0}), thfn thf first
 * dbpturf brgumfnt (dorrfsponding to thf rfdfivfr) must bf non-null.
 *
 * <p>A typf Q is donsidfrfd bdbptbblf to S bs follows:
 * <tbblf summbry="bdbptbblf typfs">
 *     <tr><th>Q</th><th>S</th><th>Link-timf dhfdks</th><th>Invodbtion-timf dhfdks</th></tr>
 *     <tr>
 *         <td>Primitivf</td><td>Primitivf</td>
 *         <td>Q dbn bf donvfrtfd to S vib b primitivf widfning donvfrsion</td>
 *         <td>Nonf</td>
 *     </tr>
 *     <tr>
 *         <td>Primitivf</td><td>Rfffrfndf</td>
 *         <td>S is b supfrtypf of thf Wrbppfr(Q)</td>
 *         <td>Cbst from Wrbppfr(Q) to S</td>
 *     </tr>
 *     <tr>
 *         <td>Rfffrfndf</td><td>Primitivf</td>
 *         <td>for pbrbmftfr typfs: Q is b primitivf wrbppfr bnd Primitivf(Q)
 *         dbn bf widfnfd to S
 *         <br>for rfturn typfs: If Q is b primitivf wrbppfr, dhfdk thbt
 *         Primitivf(Q) dbn bf widfnfd to S</td>
 *         <td>If Q is not b primitivf wrbppfr, dbst Q to thf bbsf Wrbppfr(S);
 *         for fxbmplf Numbfr for numfrid typfs</td>
 *     </tr>
 *     <tr>
 *         <td>Rfffrfndf</td><td>Rfffrfndf</td>
 *         <td>for pbrbmftfr typfs: S is b supfrtypf of Q
 *         <br>for rfturn typfs: nonf</td>
 *         <td>Cbst from Q to S</td>
 *     </tr>
 * </tbblf>
 *
 * @bpiNotf Thfsf linkbgf mfthods brf dfsignfd to support thf fvblubtion
 * of <fm>lbmbdb fxprfssions</fm> bnd <fm>mfthod rfffrfndfs</fm> in thf Jbvb
 * Lbngubgf.  For fvfry lbmbdb fxprfssions or mfthod rfffrfndf in thf sourdf dodf,
 * thfrf is b tbrgft typf whidh is b fundtionbl intfrfbdf.  Evblubting b lbmbdb
 * fxprfssion produdfs bn objfdt of its tbrgft typf. Thf rfdommfndfd mfdhbnism
 * for fvblubting lbmbdb fxprfssions is to dfsugbr thf lbmbdb body to b mfthod,
 * invokf bn invokfdynbmid dbll sitf whosf stbtid brgumfnt list dfsdribfs thf
 * solf mfthod of thf fundtionbl intfrfbdf bnd thf dfsugbrfd implfmfntbtion
 * mfthod, bnd rfturns bn objfdt (thf lbmbdb objfdt) thbt implfmfnts thf tbrgft
 * typf. (For mfthod rfffrfndfs, thf implfmfntbtion mfthod is simply thf
 * rfffrfndfd mfthod; no dfsugbring is nffdfd.)
 *
 * <p>Thf brgumfnt list of thf implfmfntbtion mfthod bnd thf brgumfnt list of
 * thf intfrfbdf mfthod(s) mby difffr in sfvfrbl wbys.  Thf implfmfntbtion
 * mfthods mby hbvf bdditionbl brgumfnts to bddommodbtf brgumfnts dbpturfd by
 * thf lbmbdb fxprfssion; thfrf mby blso bf difffrfndfs rfsulting from pfrmittfd
 * bdbptbtions of brgumfnts, sudh bs dbsting, boxing, unboxing, bnd primitivf
 * widfning. (Vbrbrgs bdbptbtions brf not hbndlfd by thf mftbfbdtorifs; thfsf brf
 * fxpfdtfd to bf hbndlfd by thf dbllfr.)
 *
 * <p>Invokfdynbmid dbll sitfs hbvf two brgumfnt lists: b stbtid brgumfnt list
 * bnd b dynbmid brgumfnt list.  Thf stbtid brgumfnt list is storfd in thf
 * donstbnt pool; thf dynbmid brgumfnt is pushfd on thf opfrbnd stbdk bt dbpturf
 * timf.  Thf bootstrbp mfthod hbs bddfss to thf fntirf stbtid brgumfnt list
 * (whidh in this dbsf, indludfs informbtion dfsdribing thf implfmfntbtion mfthod,
 * thf tbrgft intfrfbdf, bnd thf tbrgft intfrfbdf mfthod(s)), bs wfll bs b
 * mfthod signbturf dfsdribing thf numbfr bnd stbtid typfs (but not thf vblufs)
 * of thf dynbmid brgumfnts bnd thf stbtid rfturn typf of thf invokfdynbmid sitf.
 *
 * @implNotf Thf implfmfntbtion mfthod is dfsdribfd with b mfthod hbndlf. In
 * thfory, bny mfthod hbndlf dould bf usfd. Currfntly supportfd brf dirfdt mfthod
 * hbndlfs rfprfsfnting invodbtion of virtubl, intfrfbdf, donstrudtor bnd stbtid
 * mfthods.
 */
publid dlbss LbmbdbMftbfbdtory {

    /** Flbg for bltfrnbtf mftbfbdtorifs indidbting thf lbmbdb objfdt
     * must bf sfriblizbblf */
    publid stbtid finbl int FLAG_SERIALIZABLE = 1 << 0;

    /**
     * Flbg for bltfrnbtf mftbfbdtorifs indidbting thf lbmbdb objfdt implfmfnts
     * othfr mbrkfr intfrfbdfs
     * bfsidfs Sfriblizbblf
     */
    publid stbtid finbl int FLAG_MARKERS = 1 << 1;

    /**
     * Flbg for bltfrnbtf mftbfbdtorifs indidbting thf lbmbdb objfdt rfquirfs
     * bdditionbl bridgf mfthods
     */
    publid stbtid finbl int FLAG_BRIDGES = 1 << 2;

    privbtf stbtid finbl Clbss<?>[] EMPTY_CLASS_ARRAY = nfw Clbss<?>[0];
    privbtf stbtid finbl MfthodTypf[] EMPTY_MT_ARRAY = nfw MfthodTypf[0];

    /**
     * Fbdilitbtfs thf drfbtion of simplf "fundtion objfdts" thbt implfmfnt onf
     * or morf intfrfbdfs by dflfgbtion to b providfd {@link MfthodHbndlf},
     * bftfr bppropribtf typf bdbptbtion bnd pbrtibl fvblubtion of brgumfnts.
     * Typidblly usfd bs b <fm>bootstrbp mfthod</fm> for {@dodf invokfdynbmid}
     * dbll sitfs, to support thf <fm>lbmbdb fxprfssion</fm> bnd <fm>mfthod
     * rfffrfndf fxprfssion</fm> ffbturfs of thf Jbvb Progrbmming Lbngubgf.
     *
     * <p>This is thf stbndbrd, strfbmlinfd mftbfbdtory; bdditionbl flfxibility
     * is providfd by {@link #bltMftbfbdtory(MfthodHbndlfs.Lookup, String, MfthodTypf, Objfdt...)}.
     * A gfnfrbl dfsdription of thf bfhbvior of this mfthod is providfd
     * {@link LbmbdbMftbfbdtory bbovf}.
     *
     * <p>Whfn thf tbrgft of thf {@dodf CbllSitf} rfturnfd from this mfthod is
     * invokfd, thf rfsulting fundtion objfdts brf instbndfs of b dlbss whidh
     * implfmfnts thf intfrfbdf nbmfd by thf rfturn typf of {@dodf invokfdTypf},
     * dfdlbrfs b mfthod with thf nbmf givfn by {@dodf invokfdNbmf} bnd thf
     * signbturf givfn by {@dodf sbmMfthodTypf}.  It mby blso ovfrridf bdditionbl
     * mfthods from {@dodf Objfdt}.
     *
     * @pbrbm dbllfr Rfprfsfnts b lookup dontfxt with thf bddfssibility
     *               privilfgfs of thf dbllfr.  Whfn usfd with {@dodf invokfdynbmid},
     *               this is stbdkfd butombtidblly by thf VM.
     * @pbrbm invokfdNbmf Thf nbmf of thf mfthod to implfmfnt.  Whfn usfd with
     *                    {@dodf invokfdynbmid}, this is providfd by thf
     *                    {@dodf NbmfAndTypf} of thf {@dodf InvokfDynbmid}
     *                    strudturf bnd is stbdkfd butombtidblly by thf VM.
     * @pbrbm invokfdTypf Thf fxpfdtfd signbturf of thf {@dodf CbllSitf}.  Thf
     *                    pbrbmftfr typfs rfprfsfnt thf typfs of dbpturf vbribblfs;
     *                    thf rfturn typf is thf intfrfbdf to implfmfnt.   Whfn
     *                    usfd with {@dodf invokfdynbmid}, this is providfd by
     *                    thf {@dodf NbmfAndTypf} of thf {@dodf InvokfDynbmid}
     *                    strudturf bnd is stbdkfd butombtidblly by thf VM.
     *                    In thf fvfnt thbt thf implfmfntbtion mfthod is bn
     *                    instbndf mfthod bnd this signbturf hbs bny pbrbmftfrs,
     *                    thf first pbrbmftfr in thf invodbtion signbturf must
     *                    dorrfspond to thf rfdfivfr.
     * @pbrbm sbmMfthodTypf Signbturf bnd rfturn typf of mfthod to bf implfmfntfd
     *                      by thf fundtion objfdt.
     * @pbrbm implMfthod A dirfdt mfthod hbndlf dfsdribing thf implfmfntbtion
     *                   mfthod whidh should bf dbllfd (with suitbblf bdbptbtion
     *                   of brgumfnt typfs, rfturn typfs, bnd with dbpturfd
     *                   brgumfnts prfpfndfd to thf invodbtion brgumfnts) bt
     *                   invodbtion timf.
     * @pbrbm instbntibtfdMfthodTypf Thf signbturf bnd rfturn typf thbt should
     *                               bf fnfordfd dynbmidblly bt invodbtion timf.
     *                               This mby bf thf sbmf bs {@dodf sbmMfthodTypf},
     *                               or mby bf b spfdiblizbtion of it.
     * @rfturn b CbllSitf whosf tbrgft dbn bf usfd to pfrform dbpturf, gfnfrbting
     *         instbndfs of thf intfrfbdf nbmfd by {@dodf invokfdTypf}
     * @throws LbmbdbConvfrsionExdfption If bny of thf linkbgf invbribnts
     *                                   dfsdribfd {@link LbmbdbMftbfbdtory bbovf}
     *                                   brf violbtfd
     */
    publid stbtid CbllSitf mftbfbdtory(MfthodHbndlfs.Lookup dbllfr,
                                       String invokfdNbmf,
                                       MfthodTypf invokfdTypf,
                                       MfthodTypf sbmMfthodTypf,
                                       MfthodHbndlf implMfthod,
                                       MfthodTypf instbntibtfdMfthodTypf)
            throws LbmbdbConvfrsionExdfption {
        AbstrbdtVblidbtingLbmbdbMftbfbdtory mf;
        mf = nfw InnfrClbssLbmbdbMftbfbdtory(dbllfr, invokfdTypf,
                                             invokfdNbmf, sbmMfthodTypf,
                                             implMfthod, instbntibtfdMfthodTypf,
                                             fblsf, EMPTY_CLASS_ARRAY, EMPTY_MT_ARRAY);
        mf.vblidbtfMftbfbdtoryArgs();
        rfturn mf.buildCbllSitf();
    }

    /**
     * Fbdilitbtfs thf drfbtion of simplf "fundtion objfdts" thbt implfmfnt onf
     * or morf intfrfbdfs by dflfgbtion to b providfd {@link MfthodHbndlf},
     * bftfr bppropribtf typf bdbptbtion bnd pbrtibl fvblubtion of brgumfnts.
     * Typidblly usfd bs b <fm>bootstrbp mfthod</fm> for {@dodf invokfdynbmid}
     * dbll sitfs, to support thf <fm>lbmbdb fxprfssion</fm> bnd <fm>mfthod
     * rfffrfndf fxprfssion</fm> ffbturfs of thf Jbvb Progrbmming Lbngubgf.
     *
     * <p>This is thf gfnfrbl, morf flfxiblf mftbfbdtory; b strfbmlinfd vfrsion
     * is providfd by {@link #mftbfbdtory(jbvb.lbng.invokf.MfthodHbndlfs.Lookup,
     * String, MfthodTypf, MfthodTypf, MfthodHbndlf, MfthodTypf)}.
     * A gfnfrbl dfsdription of thf bfhbvior of this mfthod is providfd
     * {@link LbmbdbMftbfbdtory bbovf}.
     *
     * <p>Thf brgumfnt list for this mfthod indludfs thrff fixfd pbrbmftfrs,
     * dorrfsponding to thf pbrbmftfrs butombtidblly stbdkfd by thf VM for thf
     * bootstrbp mfthod in bn {@dodf invokfdynbmid} invodbtion, bnd bn {@dodf Objfdt[]}
     * pbrbmftfr thbt dontbins bdditionbl pbrbmftfrs.  Thf dfdlbrfd brgumfnt
     * list for this mfthod is:
     *
     * <prf>{@dodf
     *  CbllSitf bltMftbfbdtory(MfthodHbndlfs.Lookup dbllfr,
     *                          String invokfdNbmf,
     *                          MfthodTypf invokfdTypf,
     *                          Objfdt... brgs)
     * }</prf>
     *
     * <p>but it bfhbvfs bs if thf brgumfnt list is bs follows:
     *
     * <prf>{@dodf
     *  CbllSitf bltMftbfbdtory(MfthodHbndlfs.Lookup dbllfr,
     *                          String invokfdNbmf,
     *                          MfthodTypf invokfdTypf,
     *                          MfthodTypf sbmMfthodTypf,
     *                          MfthodHbndlf implMfthod,
     *                          MfthodTypf instbntibtfdMfthodTypf,
     *                          int flbgs,
     *                          int mbrkfrIntfrfbdfCount,  // IF flbgs hbs MARKERS sft
     *                          Clbss... mbrkfrIntfrfbdfs, // IF flbgs hbs MARKERS sft
     *                          int bridgfCount,           // IF flbgs hbs BRIDGES sft
     *                          MfthodTypf... bridgfs      // IF flbgs hbs BRIDGES sft
     *                          )
     * }</prf>
     *
     * <p>Argumfnts thbt bppfbr in thf brgumfnt list for
     * {@link #mftbfbdtory(MfthodHbndlfs.Lookup, String, MfthodTypf, MfthodTypf, MfthodHbndlf, MfthodTypf)}
     * hbvf thf sbmf spfdifidbtion bs in thbt mfthod.  Thf bdditionbl brgumfnts
     * brf intfrprftfd bs follows:
     * <ul>
     *     <li>{@dodf flbgs} indidbtfs bdditionbl options; this is b bitwisf
     *     OR of dfsirfd flbgs.  Dffinfd flbgs brf {@link #FLAG_BRIDGES},
     *     {@link #FLAG_MARKERS}, bnd {@link #FLAG_SERIALIZABLE}.</li>
     *     <li>{@dodf mbrkfrIntfrfbdfCount} is thf numbfr of bdditionbl intfrfbdfs
     *     thf fundtion objfdt should implfmfnt, bnd is prfsfnt if bnd only if thf
     *     {@dodf FLAG_MARKERS} flbg is sft.</li>
     *     <li>{@dodf mbrkfrIntfrfbdfs} is b vbribblf-lfngth list of bdditionbl
     *     intfrfbdfs to implfmfnt, whosf lfngth fqubls {@dodf mbrkfrIntfrfbdfCount},
     *     bnd is prfsfnt if bnd only if thf {@dodf FLAG_MARKERS} flbg is sft.</li>
     *     <li>{@dodf bridgfCount} is thf numbfr of bdditionbl mfthod signbturfs
     *     thf fundtion objfdt should implfmfnt, bnd is prfsfnt if bnd only if
     *     thf {@dodf FLAG_BRIDGES} flbg is sft.</li>
     *     <li>{@dodf bridgfs} is b vbribblf-lfngth list of bdditionbl
     *     mfthods signbturfs to implfmfnt, whosf lfngth fqubls {@dodf bridgfCount},
     *     bnd is prfsfnt if bnd only if thf {@dodf FLAG_BRIDGES} flbg is sft.</li>
     * </ul>
     *
     * <p>Ebdh dlbss nbmfd by {@dodf mbrkfrIntfrfbdfs} is subjfdt to thf sbmf
     * rfstridtions bs {@dodf Rd}, thf rfturn typf of {@dodf invokfdTypf},
     * bs dfsdribfd {@link LbmbdbMftbfbdtory bbovf}.  Ebdh {@dodf MfthodTypf}
     * nbmfd by {@dodf bridgfs} is subjfdt to thf sbmf rfstridtions bs
     * {@dodf sbmMfthodTypf}, bs dfsdribfd {@link LbmbdbMftbfbdtory bbovf}.
     *
     * <p>Whfn FLAG_SERIALIZABLE is sft in {@dodf flbgs}, thf fundtion objfdts
     * will implfmfnt {@dodf Sfriblizbblf}, bnd will hbvf b {@dodf writfRfplbdf}
     * mfthod thbt rfturns bn bppropribtf {@link SfriblizfdLbmbdb}.  Thf
     * {@dodf dbllfr} dlbss must hbvf bn bppropribtf {@dodf $dfsfriblizfLbmbdb$}
     * mfthod, bs dfsdribfd in {@link SfriblizfdLbmbdb}.
     *
     * <p>Whfn thf tbrgft of thf {@dodf CbllSitf} rfturnfd from this mfthod is
     * invokfd, thf rfsulting fundtion objfdts brf instbndfs of b dlbss with
     * thf following propfrtifs:
     * <ul>
     *     <li>Thf dlbss implfmfnts thf intfrfbdf nbmfd by thf rfturn typf
     *     of {@dodf invokfdTypf} bnd bny intfrfbdfs nbmfd by {@dodf mbrkfrIntfrfbdfs}</li>
     *     <li>Thf dlbss dfdlbrfs mfthods with thf nbmf givfn by {@dodf invokfdNbmf},
     *     bnd thf signbturf givfn by {@dodf sbmMfthodTypf} bnd bdditionbl signbturfs
     *     givfn by {@dodf bridgfs}</li>
     *     <li>Thf dlbss mby ovfrridf mfthods from {@dodf Objfdt}, bnd mby
     *     implfmfnt mfthods rflbtfd to sfriblizbtion.</li>
     * </ul>
     *
     * @pbrbm dbllfr Rfprfsfnts b lookup dontfxt with thf bddfssibility
     *               privilfgfs of thf dbllfr.  Whfn usfd with {@dodf invokfdynbmid},
     *               this is stbdkfd butombtidblly by thf VM.
     * @pbrbm invokfdNbmf Thf nbmf of thf mfthod to implfmfnt.  Whfn usfd with
     *                    {@dodf invokfdynbmid}, this is providfd by thf
     *                    {@dodf NbmfAndTypf} of thf {@dodf InvokfDynbmid}
     *                    strudturf bnd is stbdkfd butombtidblly by thf VM.
     * @pbrbm invokfdTypf Thf fxpfdtfd signbturf of thf {@dodf CbllSitf}.  Thf
     *                    pbrbmftfr typfs rfprfsfnt thf typfs of dbpturf vbribblfs;
     *                    thf rfturn typf is thf intfrfbdf to implfmfnt.   Whfn
     *                    usfd with {@dodf invokfdynbmid}, this is providfd by
     *                    thf {@dodf NbmfAndTypf} of thf {@dodf InvokfDynbmid}
     *                    strudturf bnd is stbdkfd butombtidblly by thf VM.
     *                    In thf fvfnt thbt thf implfmfntbtion mfthod is bn
     *                    instbndf mfthod bnd this signbturf hbs bny pbrbmftfrs,
     *                    thf first pbrbmftfr in thf invodbtion signbturf must
     *                    dorrfspond to thf rfdfivfr.
     * @pbrbm  brgs       An {@dodf Objfdt[]} brrby dontbining thf rfquirfd
     *                    brgumfnts {@dodf sbmMfthodTypf}, {@dodf implMfthod},
     *                    {@dodf instbntibtfdMfthodTypf}, {@dodf flbgs}, bnd bny
     *                    optionbl brgumfnts, bs dfsdribfd
     *                    {@link #bltMftbfbdtory(MfthodHbndlfs.Lookup, String, MfthodTypf, Objfdt...)} bbovf}
     * @rfturn b CbllSitf whosf tbrgft dbn bf usfd to pfrform dbpturf, gfnfrbting
     *         instbndfs of thf intfrfbdf nbmfd by {@dodf invokfdTypf}
     * @throws LbmbdbConvfrsionExdfption If bny of thf linkbgf invbribnts
     *                                   dfsdribfd {@link LbmbdbMftbfbdtory bbovf}
     *                                   brf violbtfd
     */
    publid stbtid CbllSitf bltMftbfbdtory(MfthodHbndlfs.Lookup dbllfr,
                                          String invokfdNbmf,
                                          MfthodTypf invokfdTypf,
                                          Objfdt... brgs)
            throws LbmbdbConvfrsionExdfption {
        MfthodTypf sbmMfthodTypf = (MfthodTypf)brgs[0];
        MfthodHbndlf implMfthod = (MfthodHbndlf)brgs[1];
        MfthodTypf instbntibtfdMfthodTypf = (MfthodTypf)brgs[2];
        int flbgs = (Intfgfr) brgs[3];
        Clbss<?>[] mbrkfrIntfrfbdfs;
        MfthodTypf[] bridgfs;
        int brgIndfx = 4;
        if ((flbgs & FLAG_MARKERS) != 0) {
            int mbrkfrCount = (Intfgfr) brgs[brgIndfx++];
            mbrkfrIntfrfbdfs = nfw Clbss<?>[mbrkfrCount];
            Systfm.brrbydopy(brgs, brgIndfx, mbrkfrIntfrfbdfs, 0, mbrkfrCount);
            brgIndfx += mbrkfrCount;
        }
        flsf
            mbrkfrIntfrfbdfs = EMPTY_CLASS_ARRAY;
        if ((flbgs & FLAG_BRIDGES) != 0) {
            int bridgfCount = (Intfgfr) brgs[brgIndfx++];
            bridgfs = nfw MfthodTypf[bridgfCount];
            Systfm.brrbydopy(brgs, brgIndfx, bridgfs, 0, bridgfCount);
            brgIndfx += bridgfCount;
        }
        flsf
            bridgfs = EMPTY_MT_ARRAY;

        boolfbn isSfriblizbblf = ((flbgs & FLAG_SERIALIZABLE) != 0);
        if (isSfriblizbblf) {
            boolfbn foundSfriblizbblfSupfrtypf = Sfriblizbblf.dlbss.isAssignbblfFrom(invokfdTypf.rfturnTypf());
            for (Clbss<?> d : mbrkfrIntfrfbdfs)
                foundSfriblizbblfSupfrtypf |= Sfriblizbblf.dlbss.isAssignbblfFrom(d);
            if (!foundSfriblizbblfSupfrtypf) {
                mbrkfrIntfrfbdfs = Arrbys.dopyOf(mbrkfrIntfrfbdfs, mbrkfrIntfrfbdfs.lfngth + 1);
                mbrkfrIntfrfbdfs[mbrkfrIntfrfbdfs.lfngth-1] = Sfriblizbblf.dlbss;
            }
        }

        AbstrbdtVblidbtingLbmbdbMftbfbdtory mf
                = nfw InnfrClbssLbmbdbMftbfbdtory(dbllfr, invokfdTypf,
                                                  invokfdNbmf, sbmMfthodTypf,
                                                  implMfthod,
                                                  instbntibtfdMfthodTypf,
                                                  isSfriblizbblf,
                                                  mbrkfrIntfrfbdfs, bridgfs);
        mf.vblidbtfMftbfbdtoryArgs();
        rfturn mf.buildCbllSitf();
    }
}
