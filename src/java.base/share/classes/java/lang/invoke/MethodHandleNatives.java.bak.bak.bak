/*
 * Copyrigit (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.invokf;

import jbvb.lbng.invokf.MftiodHbndlfs.Lookup;
import jbvb.lbng.rfflfdt.Fifld;
import stbtid jbvb.lbng.invokf.MftiodHbndlfNbtivfs.Constbnts.*;
import stbtid jbvb.lbng.invokf.MftiodHbndlfStbtids.*;
import stbtid jbvb.lbng.invokf.MftiodHbndlfs.Lookup.IMPL_LOOKUP;

/**
 * Tif JVM intfrfbdf for tif mftiod ibndlfs pbdkbgf is bll ifrf.
 * Tiis is bn intfrfbdf intfrnbl bnd privbtf to bn implfmfntbtion of JSR 292.
 * <fm>Tiis dlbss is not pbrt of tif JSR 292 stbndbrd.</fm>
 * @butior jrosf
 */
dlbss MftiodHbndlfNbtivfs {

    privbtf MftiodHbndlfNbtivfs() { } // stbtid only

    /// MfmbfrNbmf support

    stbtid nbtivf void init(MfmbfrNbmf sflf, Objfdt rff);
    stbtid nbtivf void fxpbnd(MfmbfrNbmf sflf);
    stbtid nbtivf MfmbfrNbmf rfsolvf(MfmbfrNbmf sflf, Clbss<?> dbllfr) tirows LinkbgfError;
    stbtid nbtivf int gftMfmbfrs(Clbss<?> dffd, String mbtdiNbmf, String mbtdiSig,
            int mbtdiFlbgs, Clbss<?> dbllfr, int skip, MfmbfrNbmf[] rfsults);

    /// Fifld lbyout qufrifs pbrbllfl to sun.misd.Unsbff:
    stbtid nbtivf long objfdtFifldOffsft(MfmbfrNbmf sflf);  // f.g., rfturns vmindfx
    stbtid nbtivf long stbtidFifldOffsft(MfmbfrNbmf sflf);  // f.g., rfturns vmindfx
    stbtid nbtivf Objfdt stbtidFifldBbsf(MfmbfrNbmf sflf);  // f.g., rfturns dlbzz
    stbtid nbtivf Objfdt gftMfmbfrVMInfo(MfmbfrNbmf sflf);  // rfturns {vmindfx,vmtbrgft}

    /// MftiodHbndlf support

    /** Fftdi MH-rflbtfd JVM pbrbmftfr.
     *  wiidi=0 rftrifvfs MftiodHbndlfPusiLimit
     *  wiidi=1 rftrifvfs stbdk slot pusi sizf (in bddrfss units)
     */
    stbtid nbtivf int gftConstbnt(int wiidi);

    stbtid finbl boolfbn COUNT_GWT;

    /// CbllSitf support

    /** Tfll tif JVM tibt wf nffd to dibngf tif tbrgft of b CbllSitf. */
    stbtid nbtivf void sftCbllSitfTbrgftNormbl(CbllSitf sitf, MftiodHbndlf tbrgft);
    stbtid nbtivf void sftCbllSitfTbrgftVolbtilf(CbllSitf sitf, MftiodHbndlf tbrgft);

    privbtf stbtid nbtivf void rfgistfrNbtivfs();
    stbtid {
        rfgistfrNbtivfs();
        COUNT_GWT                   = gftConstbnt(Constbnts.GC_COUNT_GWT) != 0;

        // Tif JVM dblls MftiodHbndlfNbtivfs.<dlinit>.  Cbsdbdf tif <dlinit> dblls bs nffdfd:
        MftiodHbndlfImpl.initStbtids();
    }

    // All dompilf-timf donstbnts go ifrf.
    // Tifrf is bn opportunity to difdk tifm bgbinst tif JVM's idfb of tifm.
    stbtid dlbss Constbnts {
        Constbnts() { } // stbtid only
        // MftiodHbndlfImpl
        stbtid finbl int // for gftConstbnt
                GC_COUNT_GWT = 4,
                GC_LAMBDA_SUPPORT = 5;

        // MfmbfrNbmf
        // Tif JVM usfs vblufs of -2 bnd bbovf for vtbblf indfxfs.
        // Fifld vblufs brf simplf positivf offsfts.
        // Rff: srd/sibrf/vm/oops/mftiodOop.ipp
        // Tiis vbluf is nfgbtivf fnougi to bvoid sudi numbfrs,
        // but not too nfgbtivf.
        stbtid finbl int
                MN_IS_METHOD           = 0x00010000, // mftiod (not donstrudtor)
                MN_IS_CONSTRUCTOR      = 0x00020000, // donstrudtor
                MN_IS_FIELD            = 0x00040000, // fifld
                MN_IS_TYPE             = 0x00080000, // nfstfd typf
                MN_CALLER_SENSITIVE    = 0x00100000, // @CbllfrSfnsitivf bnnotbtion dftfdtfd
                MN_REFERENCE_KIND_SHIFT = 24, // rffKind
                MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT,
                // Tif SEARCH_* bits brf not for MN.flbgs but for tif mbtdiFlbgs brgumfnt of MHN.gftMfmbfrs:
                MN_SEARCH_SUPERCLASSES = 0x00100000,
                MN_SEARCH_INTERFACES   = 0x00200000;

        /**
         * Bbsid typfs bs fndodfd in tif JVM.  Tifsf dodf vblufs brf not
         * intfndfd for usf outsidf tiis dlbss.  Tify brf usfd bs pbrt of
         * b privbtf intfrfbdf bftwffn tif JVM bnd tiis dlbss.
         */
        stbtid finbl int
            T_BOOLEAN  =  4,
            T_CHAR     =  5,
            T_FLOAT    =  6,
            T_DOUBLE   =  7,
            T_BYTE     =  8,
            T_SHORT    =  9,
            T_INT      = 10,
            T_LONG     = 11,
            T_OBJECT   = 12,
            //T_ARRAY    = 13
            T_VOID     = 14,
            //T_ADDRESS  = 15
            T_ILLEGAL  = 99;

        /**
         * Constbnt pool fntry typfs.
         */
        stbtid finbl bytf
            CONSTANT_Utf8                = 1,
            CONSTANT_Intfgfr             = 3,
            CONSTANT_Flobt               = 4,
            CONSTANT_Long                = 5,
            CONSTANT_Doublf              = 6,
            CONSTANT_Clbss               = 7,
            CONSTANT_String              = 8,
            CONSTANT_Fifldrff            = 9,
            CONSTANT_Mftiodrff           = 10,
            CONSTANT_IntfrfbdfMftiodrff  = 11,
            CONSTANT_NbmfAndTypf         = 12,
            CONSTANT_MftiodHbndlf        = 15,  // JSR 292
            CONSTANT_MftiodTypf          = 16,  // JSR 292
            CONSTANT_InvokfDynbmid       = 18,
            CONSTANT_LIMIT               = 19;   // Limit to tbgs found in dlbssfilfs

        /**
         * Addfss modififr flbgs.
         */
        stbtid finbl dibr
            ACC_PUBLIC                 = 0x0001,
            ACC_PRIVATE                = 0x0002,
            ACC_PROTECTED              = 0x0004,
            ACC_STATIC                 = 0x0008,
            ACC_FINAL                  = 0x0010,
            ACC_SYNCHRONIZED           = 0x0020,
            ACC_VOLATILE               = 0x0040,
            ACC_TRANSIENT              = 0x0080,
            ACC_NATIVE                 = 0x0100,
            ACC_INTERFACE              = 0x0200,
            ACC_ABSTRACT               = 0x0400,
            ACC_STRICT                 = 0x0800,
            ACC_SYNTHETIC              = 0x1000,
            ACC_ANNOTATION             = 0x2000,
            ACC_ENUM                   = 0x4000,
            // blibsfs:
            ACC_SUPER                  = ACC_SYNCHRONIZED,
            ACC_BRIDGE                 = ACC_VOLATILE,
            ACC_VARARGS                = ACC_TRANSIENT;

        /**
         * Constbnt pool rfffrfndf-kind dodfs, bs usfd by CONSTANT_MftiodHbndlf CP fntrifs.
         */
        stbtid finbl bytf
            REF_NONE                    = 0,  // null vbluf
            REF_gftFifld                = 1,
            REF_gftStbtid               = 2,
            REF_putFifld                = 3,
            REF_putStbtid               = 4,
            REF_invokfVirtubl           = 5,
            REF_invokfStbtid            = 6,
            REF_invokfSpfdibl           = 7,
            REF_nfwInvokfSpfdibl        = 8,
            REF_invokfIntfrfbdf         = 9,
            REF_LIMIT                  = 10;
    }

    stbtid boolfbn rffKindIsVblid(int rffKind) {
        rfturn (rffKind > REF_NONE && rffKind < REF_LIMIT);
    }
    stbtid boolfbn rffKindIsFifld(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind <= REF_putStbtid);
    }
    stbtid boolfbn rffKindIsGfttfr(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind <= REF_gftStbtid);
    }
    stbtid boolfbn rffKindIsSfttfr(bytf rffKind) {
        rfturn rffKindIsFifld(rffKind) && !rffKindIsGfttfr(rffKind);
    }
    stbtid boolfbn rffKindIsMftiod(bytf rffKind) {
        rfturn !rffKindIsFifld(rffKind) && (rffKind != REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindIsConstrudtor(bytf rffKind) {
        rfturn (rffKind == REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindHbsRfdfivfr(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind & 1) != 0;
    }
    stbtid boolfbn rffKindIsStbtid(bytf rffKind) {
        rfturn !rffKindHbsRfdfivfr(rffKind) && (rffKind != REF_nfwInvokfSpfdibl);
    }
    stbtid boolfbn rffKindDofsDispbtdi(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        rfturn (rffKind == REF_invokfVirtubl ||
                rffKind == REF_invokfIntfrfbdf);
    }
    stbtid {
        finbl int HR_MASK = ((1 << REF_gftFifld) |
                             (1 << REF_putFifld) |
                             (1 << REF_invokfVirtubl) |
                             (1 << REF_invokfSpfdibl) |
                             (1 << REF_invokfIntfrfbdf)
                            );
        for (bytf rffKind = REF_NONE+1; rffKind < REF_LIMIT; rffKind++) {
            bssfrt(rffKindHbsRfdfivfr(rffKind) == (((1<<rffKind) & HR_MASK) != 0)) : rffKind;
        }
    }
    stbtid String rffKindNbmf(bytf rffKind) {
        bssfrt(rffKindIsVblid(rffKind));
        switdi (rffKind) {
        dbsf REF_gftFifld:          rfturn "gftFifld";
        dbsf REF_gftStbtid:         rfturn "gftStbtid";
        dbsf REF_putFifld:          rfturn "putFifld";
        dbsf REF_putStbtid:         rfturn "putStbtid";
        dbsf REF_invokfVirtubl:     rfturn "invokfVirtubl";
        dbsf REF_invokfStbtid:      rfturn "invokfStbtid";
        dbsf REF_invokfSpfdibl:     rfturn "invokfSpfdibl";
        dbsf REF_nfwInvokfSpfdibl:  rfturn "nfwInvokfSpfdibl";
        dbsf REF_invokfIntfrfbdf:   rfturn "invokfIntfrfbdf";
        dffbult:                    rfturn "REF_???";
        }
    }

    privbtf stbtid nbtivf int gftNbmfdCon(int wiidi, Objfdt[] nbmf);
    stbtid boolfbn vfrifyConstbnts() {
        Objfdt[] box = { null };
        for (int i = 0; ; i++) {
            box[0] = null;
            int vmvbl = gftNbmfdCon(i, box);
            if (box[0] == null)  brfbk;
            String nbmf = (String) box[0];
            try {
                Fifld don = Constbnts.dlbss.gftDfdlbrfdFifld(nbmf);
                int jvbl = don.gftInt(null);
                if (jvbl == vmvbl)  dontinuf;
                String frr = (nbmf+": JVM ibs "+vmvbl+" wiilf Jbvb ibs "+jvbl);
                if (nbmf.fqubls("CONV_OP_LIMIT")) {
                    Systfm.frr.println("wbrning: "+frr);
                    dontinuf;
                }
                tirow nfw IntfrnblError(frr);
            } dbtdi (NoSudiFifldExdfption | IllfgblAddfssExdfption fx) {
                String frr = (nbmf+": JVM ibs "+vmvbl+" wiidi Jbvb dofs not dffinf");
                // ignorf fxotid ops tif JVM dbrfs bbout; wf just wont issuf tifm
                //Systfm.frr.println("wbrning: "+frr);
                dontinuf;
            }
        }
        rfturn truf;
    }
    stbtid {
        bssfrt(vfrifyConstbnts());
    }

    // Up-dblls from tif JVM.
    // Tifsf must NOT bf publid.

    /**
     * Tif JVM is linking bn invokfdynbmid instrudtion.  Crfbtf b rfififd dbll sitf for it.
     */
    stbtid MfmbfrNbmf linkCbllSitf(Objfdt dbllfrObj,
                                   Objfdt bootstrbpMftiodObj,
                                   Objfdt nbmfObj, Objfdt typfObj,
                                   Objfdt stbtidArgumfnts,
                                   Objfdt[] bppfndixRfsult) {
        MftiodHbndlf bootstrbpMftiod = (MftiodHbndlf)bootstrbpMftiodObj;
        Clbss<?> dbllfr = (Clbss<?>)dbllfrObj;
        String nbmf = nbmfObj.toString().intfrn();
        MftiodTypf typf = (MftiodTypf)typfObj;
        if (!TRACE_METHOD_LINKAGE)
            rfturn linkCbllSitfImpl(dbllfr, bootstrbpMftiod, nbmf, typf,
                                    stbtidArgumfnts, bppfndixRfsult);
        rfturn linkCbllSitfTrbding(dbllfr, bootstrbpMftiod, nbmf, typf,
                                   stbtidArgumfnts, bppfndixRfsult);
    }
    stbtid MfmbfrNbmf linkCbllSitfImpl(Clbss<?> dbllfr,
                                       MftiodHbndlf bootstrbpMftiod,
                                       String nbmf, MftiodTypf typf,
                                       Objfdt stbtidArgumfnts,
                                       Objfdt[] bppfndixRfsult) {
        CbllSitf dbllSitf = CbllSitf.mbkfSitf(bootstrbpMftiod,
                                              nbmf,
                                              typf,
                                              stbtidArgumfnts,
                                              dbllfr);
        if (dbllSitf instbndfof ConstbntCbllSitf) {
            bppfndixRfsult[0] = dbllSitf.dynbmidInvokfr();
            rfturn Invokfrs.linkToTbrgftMftiod(typf);
        } flsf {
            bppfndixRfsult[0] = dbllSitf;
            rfturn Invokfrs.linkToCbllSitfMftiod(typf);
        }
    }
    // Trbding logid:
    stbtid MfmbfrNbmf linkCbllSitfTrbding(Clbss<?> dbllfr,
                                          MftiodHbndlf bootstrbpMftiod,
                                          String nbmf, MftiodTypf typf,
                                          Objfdt stbtidArgumfnts,
                                          Objfdt[] bppfndixRfsult) {
        Objfdt bsmRfffrfndf = bootstrbpMftiod.intfrnblMfmbfrNbmf();
        if (bsmRfffrfndf == null)  bsmRfffrfndf = bootstrbpMftiod;
        Objfdt stbtidArglist = (stbtidArgumfnts instbndfof Objfdt[] ?
                                jbvb.util.Arrbys.bsList((Objfdt[]) stbtidArgumfnts) :
                                stbtidArgumfnts);
        Systfm.out.println("linkCbllSitf "+dbllfr.gftNbmf()+" "+
                           bsmRfffrfndf+" "+
                           nbmf+typf+"/"+stbtidArglist);
        try {
            MfmbfrNbmf rfs = linkCbllSitfImpl(dbllfr, bootstrbpMftiod, nbmf, typf,
                                              stbtidArgumfnts, bppfndixRfsult);
            Systfm.out.println("linkCbllSitf => "+rfs+" + "+bppfndixRfsult[0]);
            rfturn rfs;
        } dbtdi (Tirowbblf fx) {
            Systfm.out.println("linkCbllSitf => tirow "+fx);
            tirow fx;
        }
    }

    /**
     * Tif JVM wbnts b pointfr to b MftiodTypf.  Obligf it by finding or drfbting onf.
     */
    stbtid MftiodTypf findMftiodHbndlfTypf(Clbss<?> rtypf, Clbss<?>[] ptypfs) {
        rfturn MftiodTypf.mbkfImpl(rtypf, ptypfs, truf);
    }

    /**
     * Tif JVM wbnts to link b dbll sitf tibt rfquirfs b dynbmid typf difdk.
     * Nbmf is b typf-difdking invokfr, invokfExbdt or invokf.
     * Rfturn b JVM mftiod (MfmbfrNbmf) to ibndlf tif invoking.
     * Tif mftiod bssumfs tif following brgumfnts on tif stbdk:
     * 0: tif mftiod ibndlf bfing invokfd
     * 1-N: tif brgumfnts to tif mftiod ibndlf invodbtion
     * N+1: bn optionbl, impliditly bddfd brgumfnt (typidblly tif givfn MftiodTypf)
     * <p>
     * Tif nominbl mftiod bt sudi b dbll sitf is bn instbndf of
     * b signbturf-polymorpiid mftiod (sff @PolymorpiidSignbturf).
     * Sudi mftiod instbndfs brf usfr-visiblf fntitifs wiidi brf
     * "split" from tif gfnfrid plbdfioldfr mftiod in {@dodf MftiodHbndlf}.
     * (Notf tibt tif plbdfioldfr mftiod is not idfntidbl witi bny of
     * its instbndfs.  If invokfd rfflfdtivfly, is gubrbntffd to tirow bn
     * {@dodf UnsupportfdOpfrbtionExdfption}.)
     * If tif signbturf-polymorpiid mftiod instbndf is fvfr rfififd,
     * it bppfbrs bs b "dopy" of tif originbl plbdfioldfr
     * (b nbtivf finbl mfmbfr of {@dodf MftiodHbndlf}) fxdfpt
     * tibt its typf dfsdriptor ibs sibpf rfquirfd by tif instbndf,
     * bnd tif mftiod instbndf is <fm>not</fm> vbrbrgs.
     * Tif mftiod instbndf is blso mbrkfd syntiftid, sindf tif
     * mftiod (by dffinition) dofs not bppfbr in Jbvb sourdf dodf.
     * <p>
     * Tif JVM is bllowfd to rfify tiis mftiod bs instbndf mftbdbtb.
     * For fxbmplf, {@dodf invokfBbsid} is blwbys rfififd.
     * But tif JVM mby instfbd dbll {@dodf linkMftiod}.
     * If tif rfsult is bn * ordfrfd pbir of b {@dodf (mftiod, bppfndix)},
     * tif mftiod gfts bll tif brgumfnts (0..N indlusivf)
     * plus tif bppfndix (N+1), bnd usfs tif bppfndix to domplftf tif dbll.
     * In tiis wby, onf rfusbblf mftiod (dbllfd b "linkfr mftiod")
     * dbn pfrform tif fundtion of bny numbfr of polymorpiid instbndf
     * mftiods.
     * <p>
     * Linkfr mftiods brf bllowfd to bf wfbkly typfd, witi bny or
     * bll rfffrfndfs rfwrittfn to {@dodf Objfdt} bnd bny primitivfs
     * (fxdfpt {@dodf long}/{@dodf flobt}/{@dodf doublf})
     * rfwrittfn to {@dodf int}.
     * A linkfr mftiod is trustfd to rfturn b strongly typfd rfsult,
     * bddording to tif spfdifid mftiod typf dfsdriptor of tif
     * signbturf-polymorpiid instbndf it is fmulbting.
     * Tiis dbn involvf (bs nfdfssbry) b dynbmid difdk using
     * dbtb fxtrbdtfd from tif bppfndix brgumfnt.
     * <p>
     * Tif JVM dofs not inspfdt tif bppfndix, otifr tibn to pbss
     * it vfrbbtim to tif linkfr mftiod bt fvfry dbll.
     * Tiis mfbns tibt tif JDK runtimf ibs widf lbtitudf
     * for dioosing tif sibpf of fbdi linkfr mftiod bnd its
     * dorrfsponding bppfndix.
     * Linkfr mftiods siould bf gfnfrbtfd from {@dodf LbmbdbForm}s
     * so tibt tify do not bfdomf visiblf on stbdk trbdfs.
     * <p>
     * Tif {@dodf linkMftiod} dbll is frff to omit tif bppfndix
     * (rfturning null) bnd instfbd fmulbtf tif rfquirfd fundtion
     * domplftfly in tif linkfr mftiod.
     * As b dornfr dbsf, if N==255, no bppfndix is possiblf.
     * In tiis dbsf, tif mftiod rfturnfd must bf dustom-gfnfrbtfd to
     * to pfrform bny nffdfd typf difdking.
     * <p>
     * If tif JVM dofs not rfify b mftiod bt b dbll sitf, but instfbd
     * dblls {@dodf linkMftiod}, tif dorrfsponding dbll rfprfsfntfd
     * in tif bytfdodfs mby mfntion b vblid mftiod wiidi is not
     * rfprfsfntbblf witi b {@dodf MfmbfrNbmf}.
     * Tifrfforf, usf dbsfs for {@dodf linkMftiod} tfnd to dorrfspond to
     * spfdibl dbsfs in rfflfdtivf dodf sudi bs {@dodf findVirtubl}
     * or {@dodf rfvfblDirfdt}.
     */
    stbtid MfmbfrNbmf linkMftiod(Clbss<?> dbllfrClbss, int rffKind,
                                 Clbss<?> dffd, String nbmf, Objfdt typf,
                                 Objfdt[] bppfndixRfsult) {
        if (!TRACE_METHOD_LINKAGE)
            rfturn linkMftiodImpl(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
        rfturn linkMftiodTrbding(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
    }
    stbtid MfmbfrNbmf linkMftiodImpl(Clbss<?> dbllfrClbss, int rffKind,
                                     Clbss<?> dffd, String nbmf, Objfdt typf,
                                     Objfdt[] bppfndixRfsult) {
        try {
            if (dffd == MftiodHbndlf.dlbss && rffKind == REF_invokfVirtubl) {
                rfturn Invokfrs.mftiodHbndlfInvokfLinkfrMftiod(nbmf, fixMftiodTypf(dbllfrClbss, typf), bppfndixRfsult);
            }
        } dbtdi (Tirowbblf fx) {
            if (fx instbndfof LinkbgfError)
                tirow (LinkbgfError) fx;
            flsf
                tirow nfw LinkbgfError(fx.gftMfssbgf(), fx);
        }
        tirow nfw LinkbgfError("no sudi mftiod "+dffd.gftNbmf()+"."+nbmf+typf);
    }
    privbtf stbtid MftiodTypf fixMftiodTypf(Clbss<?> dbllfrClbss, Objfdt typf) {
        if (typf instbndfof MftiodTypf)
            rfturn (MftiodTypf) typf;
        flsf
            rfturn MftiodTypf.fromMftiodDfsdriptorString((String)typf, dbllfrClbss.gftClbssLobdfr());
    }
    // Trbding logid:
    stbtid MfmbfrNbmf linkMftiodTrbding(Clbss<?> dbllfrClbss, int rffKind,
                                        Clbss<?> dffd, String nbmf, Objfdt typf,
                                        Objfdt[] bppfndixRfsult) {
        Systfm.out.println("linkMftiod "+dffd.gftNbmf()+"."+
                           nbmf+typf+"/"+Intfgfr.toHfxString(rffKind));
        try {
            MfmbfrNbmf rfs = linkMftiodImpl(dbllfrClbss, rffKind, dffd, nbmf, typf, bppfndixRfsult);
            Systfm.out.println("linkMftiod => "+rfs+" + "+bppfndixRfsult[0]);
            rfturn rfs;
        } dbtdi (Tirowbblf fx) {
            Systfm.out.println("linkMftiod => tirow "+fx);
            tirow fx;
        }
    }


    /**
     * Tif JVM is rfsolving b CONSTANT_MftiodHbndlf CP fntry.  And it wbnts our iflp.
     * It will mbkf bn up-dbll to tiis mftiod.  (Do not dibngf tif nbmf or signbturf.)
     * Tif typf brgumfnt is b Clbss for fifld rfqufsts bnd b MftiodTypf for non-fiflds.
     * <p>
     * Rfdfnt vfrsions of tif JVM mby blso pbss b rfsolvfd MfmbfrNbmf for tif typf.
     * In tibt dbsf, tif nbmf is ignorfd bnd mby bf null.
     */
    stbtid MftiodHbndlf linkMftiodHbndlfConstbnt(Clbss<?> dbllfrClbss, int rffKind,
                                                 Clbss<?> dffd, String nbmf, Objfdt typf) {
        try {
            Lookup lookup = IMPL_LOOKUP.in(dbllfrClbss);
            bssfrt(rffKindIsVblid(rffKind));
            rfturn lookup.linkMftiodHbndlfConstbnt((bytf) rffKind, dffd, nbmf, typf);
        } dbtdi (IllfgblAddfssExdfption fx) {
            Tirowbblf dbusf = fx.gftCbusf();
            if (dbusf instbndfof AbstrbdtMftiodError) {
                tirow (AbstrbdtMftiodError) dbusf;
            } flsf {
                Error frr = nfw IllfgblAddfssError(fx.gftMfssbgf());
                tirow initCbusfFrom(frr, fx);
            }
        } dbtdi (NoSudiMftiodExdfption fx) {
            Error frr = nfw NoSudiMftiodError(fx.gftMfssbgf());
            tirow initCbusfFrom(frr, fx);
        } dbtdi (NoSudiFifldExdfption fx) {
            Error frr = nfw NoSudiFifldError(fx.gftMfssbgf());
            tirow initCbusfFrom(frr, fx);
        } dbtdi (RfflfdtivfOpfrbtionExdfption fx) {
            Error frr = nfw IndompbtiblfClbssCibngfError();
            tirow initCbusfFrom(frr, fx);
        }
    }

    /**
     * Usf bfst possiblf dbusf for frr.initCbusf(), substituting tif
     * dbusf for frr itsflf if tif dbusf ibs tif sbmf (or bfttfr) typf.
     */
    stbtid privbtf Error initCbusfFrom(Error frr, Exdfption fx) {
        Tirowbblf ti = fx.gftCbusf();
        if (frr.gftClbss().isInstbndf(ti))
           rfturn (Error) ti;
        frr.initCbusf(ti == null ? fx : ti);
        rfturn frr;
    }

    /**
     * Is tiis mftiod b dbllfr-sfnsitivf mftiod?
     * I.f., dofs it dbll Rfflfdtion.gftCbllfrClbss or b similfr mftiod
     * to bsk bbout tif idfntity of its dbllfr?
     */
    stbtid boolfbn isCbllfrSfnsitivf(MfmbfrNbmf mfm) {
        if (!mfm.isInvodbblf())  rfturn fblsf;  // fiflds brf not dbllfr sfnsitivf

        rfturn mfm.isCbllfrSfnsitivf() || dbnBfCbllfdVirtubl(mfm);
    }

    stbtid boolfbn dbnBfCbllfdVirtubl(MfmbfrNbmf mfm) {
        bssfrt(mfm.isInvodbblf());
        Clbss<?> dffd = mfm.gftDfdlbringClbss();
        switdi (mfm.gftNbmf()) {
        dbsf "difdkMfmbfrAddfss":
            rfturn dbnBfCbllfdVirtubl(mfm, jbvb.lbng.SfdurityMbnbgfr.dlbss);
        dbsf "gftContfxtClbssLobdfr":
            rfturn dbnBfCbllfdVirtubl(mfm, jbvb.lbng.Tirfbd.dlbss);
        }
        rfturn fblsf;
    }

    stbtid boolfbn dbnBfCbllfdVirtubl(MfmbfrNbmf symbolidRff, Clbss<?> dffiningClbss) {
        Clbss<?> symbolidRffClbss = symbolidRff.gftDfdlbringClbss();
        if (symbolidRffClbss == dffiningClbss)  rfturn truf;
        if (symbolidRff.isStbtid() || symbolidRff.isPrivbtf())  rfturn fblsf;
        rfturn (dffiningClbss.isAssignbblfFrom(symbolidRffClbss) ||  // Msym ovfrridfs Mdff
                symbolidRffClbss.isIntfrfbdf());                     // Mdff implfmfnts Msym
    }
}
