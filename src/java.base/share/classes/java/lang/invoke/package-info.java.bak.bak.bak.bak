/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/**
 * Thf {@dodf jbvb.lbng.invokf} pbdkbgf dontbins dynbmid lbngubgf support providfd dirfdtly by
 * thf Jbvb dorf dlbss librbrifs bnd virtubl mbdhinf.
 *
 * <p>
 * As dfsdribfd in thf Jbvb Virtubl Mbdhinf Spfdifidbtion,
 * dfrtbin typfs in this pbdkbgf hbvf spfdibl rflbtions to dynbmid
 * lbngubgf support in thf virtubl mbdhinf:
 * <ul>
 * <li>Thf dlbss {@link jbvb.lbng.invokf.MfthodHbndlf MfthodHbndlf} dontbins
 * <b hrff="MfthodHbndlf.html#sigpoly">signbturf polymorphid mfthods</b>
 * whidh dbn bf linkfd rfgbrdlfss of thfir typf dfsdriptor.
 * Normblly, mfthod linkbgf rfquirfs fxbdt mbtdhing of typf dfsdriptors.
 * </li>
 *
 * <li>Thf JVM bytfdodf formbt supports immfdibtf donstbnts of
 * thf dlbssfs {@link jbvb.lbng.invokf.MfthodHbndlf MfthodHbndlf} bnd {@link jbvb.lbng.invokf.MfthodTypf MfthodTypf}.
 * </li>
 * </ul>
 *
 * <h1><b nbmf="jvm_mods"></b>Summbry of rflfvbnt Jbvb Virtubl Mbdhinf dhbngfs</h1>
 * Thf following low-lfvfl informbtion summbrizfs rflfvbnt pbrts of thf
 * Jbvb Virtubl Mbdhinf spfdifidbtion.  For full dftbils, plfbsf sff thf
 * durrfnt vfrsion of thbt spfdifidbtion.
 *
 * Ebdh oddurrfndf of bn {@dodf invokfdynbmid} instrudtion is dbllfd b <fm>dynbmid dbll sitf</fm>.
 * <h2><b nbmf="indyinsn"></b>{@dodf invokfdynbmid} instrudtions</h2>
 * A dynbmid dbll sitf is originblly in bn unlinkfd stbtf.  In this stbtf, thfrf is
 * no tbrgft mfthod for thf dbll sitf to invokf.
 * <p>
 * Bfforf thf JVM dbn fxfdutf b dynbmid dbll sitf (bn {@dodf invokfdynbmid} instrudtion),
 * thf dbll sitf must first bf <fm>linkfd</fm>.
 * Linking is bddomplishfd by dblling b <fm>bootstrbp mfthod</fm>
 * whidh is givfn thf stbtid informbtion dontfnt of thf dbll sitf,
 * bnd whidh must produdf b {@link jbvb.lbng.invokf.MfthodHbndlf mfthod hbndlf}
 * thbt givfs thf bfhbvior of thf dbll sitf.
 * <p>
 * Ebdh {@dodf invokfdynbmid} instrudtion stbtidblly spfdififs its own
 * bootstrbp mfthod bs b donstbnt pool rfffrfndf.
 * Thf donstbnt pool rfffrfndf blso spfdififs thf dbll sitf's nbmf bnd typf dfsdriptor,
 * just likf {@dodf invokfvirtubl} bnd thf othfr invokf instrudtions.
 * <p>
 * Linking stbrts with rfsolving thf donstbnt pool fntry for thf
 * bootstrbp mfthod, bnd rfsolving b {@link jbvb.lbng.invokf.MfthodTypf MfthodTypf} objfdt for
 * thf typf dfsdriptor of thf dynbmid dbll sitf.
 * This rfsolution prodfss mby triggfr dlbss lobding.
 * It mby thfrfforf throw bn frror if b dlbss fbils to lobd.
 * This frror bfdomfs thf bbnormbl tfrminbtion of thf dynbmid
 * dbll sitf fxfdution.
 * Linkbgf dofs not triggfr dlbss initiblizbtion.
 * <p>
 * Thf bootstrbp mfthod is invokfd on bt lfbst thrff vblufs:
 * <ul>
 * <li>b {@dodf MfthodHbndlfs.Lookup}, b lookup objfdt on thf <fm>dbllfr dlbss</fm> in whidh dynbmid dbll sitf oddurs </li>
 * <li>b {@dodf String}, thf mfthod nbmf mfntionfd in thf dbll sitf </li>
 * <li>b {@dodf MfthodTypf}, thf rfsolvfd typf dfsdriptor of thf dbll </li>
 * <li>optionblly, bftwffn 1 bnd 251 bdditionbl stbtid brgumfnts tbkfn from thf donstbnt pool </li>
 * </ul>
 * Invodbtion is bs if by
 * {@link jbvb.lbng.invokf.MfthodHbndlf#invokf MfthodHbndlf.invokf}.
 * Thf rfturnfd rfsult must bf b {@link jbvb.lbng.invokf.CbllSitf CbllSitf} (or b subdlbss).
 * Thf typf of thf dbll sitf's tbrgft must bf fxbdtly fqubl to thf typf
 * dfrivfd from thf dynbmid dbll sitf's typf dfsdriptor bnd pbssfd to
 * thf bootstrbp mfthod.
 * Thf dbll sitf thfn bfdomfs pfrmbnfntly linkfd to thf dynbmid dbll sitf.
 * <p>
 * As dodumfntfd in thf JVM spfdifidbtion, bll fbilurfs brising from
 * thf linkbgf of b dynbmid dbll sitf brf rfportfd
 * by b {@link jbvb.lbng.BootstrbpMfthodError BootstrbpMfthodError},
 * whidh is thrown bs thf bbnormbl tfrminbtion of thf dynbmid dbll
 * sitf fxfdution.
 * If this hbppfns, thf sbmf frror will thf thrown for bll subsfqufnt
 * bttfmpts to fxfdutf thf dynbmid dbll sitf.
 *
 * <h2>timing of linkbgf</h2>
 * A dynbmid dbll sitf is linkfd just bfforf its first fxfdution.
 * Thf bootstrbp mfthod dbll implfmfnting thf linkbgf oddurs within
 * b thrfbd thbt is bttfmpting b first fxfdution.
 * <p>
 * If thfrf brf sfvfrbl sudh thrfbds, thf bootstrbp mfthod mby bf
 * invokfd in sfvfrbl thrfbds dondurrfntly.
 * Thfrfforf, bootstrbp mfthods whidh bddfss globbl bpplidbtion
 * dbtb must tbkf thf usubl prfdbutions bgbinst rbdf donditions.
 * In bny dbsf, fvfry {@dodf invokfdynbmid} instrudtion is fithfr
 * unlinkfd or linkfd to b uniquf {@dodf CbllSitf} objfdt.
 * <p>
 * In bn bpplidbtion whidh rfquirfs dynbmid dbll sitfs with individublly
 * mutbblf bfhbviors, thfir bootstrbp mfthods should produdf distindt
 * {@link jbvb.lbng.invokf.CbllSitf CbllSitf} objfdts, onf for fbdh linkbgf rfqufst.
 * Altfrnbtivfly, bn bpplidbtion dbn link b singlf {@dodf CbllSitf} objfdt
 * to sfvfrbl {@dodf invokfdynbmid} instrudtions, in whidh dbsf
 * b dhbngf to thf tbrgft mfthod will bfdomf visiblf bt fbdh of
 * thf instrudtions.
 * <p>
 * If sfvfrbl thrfbds simultbnfously fxfdutf b bootstrbp mfthod for b singlf dynbmid
 * dbll sitf, thf JVM must dhoosf onf {@dodf CbllSitf} objfdt bnd instbll it visibly to
 * bll thrfbds.  Any othfr bootstrbp mfthod dblls brf bllowfd to domplftf, but thfir
 * rfsults brf ignorfd, bnd thfir dynbmid dbll sitf invodbtions prodffd with thf originblly
 * dhosfn tbrgft objfdt.

 * <p stylf="font-sizf:smbllfr;">
 * <fm>Disdussion:</fm>
 * Thfsf rulfs do not fnbblf thf JVM to duplidbtf dynbmid dbll sitfs,
 * or to issuf &ldquo;dbusflfss&rdquo; bootstrbp mfthod dblls.
 * Evfry dynbmid dbll sitf trbnsitions bt most ondf from unlinkfd to linkfd,
 * just bfforf its first invodbtion.
 * Thfrf is no wby to undo thf ffffdt of b domplftfd bootstrbp mfthod dbll.
 *
 * <h2>typfs of bootstrbp mfthods</h2>
 * As long bs fbdh bootstrbp mfthod dbn bf dorrfdtly invokfd
 * by {@dodf MfthodHbndlf.invokf}, its dftbilfd typf is brbitrbry.
 * For fxbmplf, thf first brgumfnt dould bf {@dodf Objfdt}
 * instfbd of {@dodf MfthodHbndlfs.Lookup}, bnd thf rfturn typf
 * dould blso bf {@dodf Objfdt} instfbd of {@dodf CbllSitf}.
 * (Notf thbt thf typfs bnd numbfr of thf stbdkfd brgumfnts limit
 * thf lfgbl kinds of bootstrbp mfthods to bppropribtfly typfd
 * stbtid mfthods bnd donstrudtors of {@dodf CbllSitf} subdlbssfs.)
 * <p>
 * If b givfn {@dodf invokfdynbmid} instrudtion spfdififs no stbtid brgumfnts,
 * thf instrudtion's bootstrbp mfthod will bf invokfd on thrff brgumfnts,
 * donvfying thf instrudtion's dbllfr dlbss, nbmf, bnd mfthod typf.
 * If thf {@dodf invokfdynbmid} instrudtion spfdififs onf or morf stbtid brgumfnts,
 * thosf vblufs will bf pbssfd bs bdditionbl brgumfnts to thf mfthod hbndlf.
 * (Notf thbt bfdbusf thfrf is b limit of 255 brgumfnts to bny mfthod,
 * bt most 251 fxtrb brgumfnts dbn bf supplifd, sindf thf bootstrbp mfthod
 * hbndlf itsflf bnd its first thrff brgumfnts must blso bf stbdkfd.)
 * Thf bootstrbp mfthod will bf invokfd bs if by fithfr {@dodf MfthodHbndlf.invokf}
 * or {@dodf invokfWithArgumfnts}.  (Thfrf is no wby to tfll thf difffrfndf.)
 * <p>
 * Thf normbl brgumfnt donvfrsion rulfs for {@dodf MfthodHbndlf.invokf} bpply to bll stbdkfd brgumfnts.
 * For fxbmplf, if b pushfd vbluf is b primitivf typf, it mby bf donvfrtfd to b rfffrfndf by boxing donvfrsion.
 * If thf bootstrbp mfthod is b vbribblf brity mfthod (its modififr bit {@dodf 0x0080} is sft),
 * thfn somf or bll of thf brgumfnts spfdififd hfrf mby bf dollfdtfd into b trbiling brrby pbrbmftfr.
 * (This is not b spfdibl rulf, but rbthfr b usfful donsfqufndf of thf intfrbdtion
 * bftwffn {@dodf CONSTANT_MfthodHbndlf} donstbnts, thf modififr bit for vbribblf brity mfthods,
 * bnd thf {@link jbvb.lbng.invokf.MfthodHbndlf#bsVbrbrgsCollfdtor bsVbrbrgsCollfdtor} trbnsformbtion.)
 * <p>
 * Givfn thfsf rulfs, hfrf brf fxbmplfs of lfgbl bootstrbp mfthod dfdlbrbtions,
 * givfn vbrious numbfrs {@dodf N} of fxtrb brgumfnts.
 * Thf first rows (mbrkfd {@dodf *}) will work for bny numbfr of fxtrb brgumfnts.
 * <tbblf bordfr=1 dfllpbdding=5 summbry="Stbtid brgumfnt typfs">
 * <tr><th>N</th><th>sbmplf bootstrbp mfthod</th></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf, Objfdt... brgs)</dodf></td></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Objfdt... brgs)</dodf></td></tr>
 * <tr><td>*</td><td><dodf>CbllSitf bootstrbp(Objfdt dbllfr, Objfdt... nbmfAndTypfWithArgs)</dodf></td></tr>
 * <tr><td>0</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf)</dodf></td></tr>
 * <tr><td>0</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, Objfdt... nbmfAndTypf)</dodf></td></tr>
 * <tr><td>1</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf, Objfdt brg)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf, Objfdt... brgs)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf, String... brgs)</dodf></td></tr>
 * <tr><td>2</td><td><dodf>CbllSitf bootstrbp(Lookup dbllfr, String nbmf, MfthodTypf typf, String x, int y)</dodf></td></tr>
 * </tbblf>
 * Thf lbst fxbmplf bssumfs thbt thf fxtrb brgumfnts brf of typf
 * {@dodf CONSTANT_String} bnd {@dodf CONSTANT_Intfgfr}, rfspfdtivfly.
 * Thf sfdond-to-lbst fxbmplf bssumfs thbt bll fxtrb brgumfnts brf of typf
 * {@dodf CONSTANT_String}.
 * Thf othfr fxbmplfs work with bll typfs of fxtrb brgumfnts.
 * <p>
 * As notfd bbovf, thf bdtubl mfthod typf of thf bootstrbp mfthod dbn vbry.
 * For fxbmplf, thf fourth brgumfnt dould bf {@dodf MfthodHbndlf},
 * if thbt is thf typf of thf dorrfsponding donstbnt in
 * thf {@dodf CONSTANT_InvokfDynbmid} fntry.
 * In thbt dbsf, thf {@dodf MfthodHbndlf.invokf} dbll will pbss thf fxtrb mfthod hbndlf
 * donstbnt bs bn {@dodf Objfdt}, but thf typf mbtdhing mbdhinfry of {@dodf MfthodHbndlf.invokf}
 * will dbst thf rfffrfndf bbdk to {@dodf MfthodHbndlf} bfforf invoking thf bootstrbp mfthod.
 * (If b string donstbnt wfrf pbssfd instfbd, by bbdly gfnfrbtfd dodf, thbt dbst would thfn fbil,
 * rfsulting in b {@dodf BootstrbpMfthodError}.)
 * <p>
 * Notf thbt, bs b donsfqufndf of thf bbovf rulfs, thf bootstrbp mfthod mby bddfpt b primitivf
 * brgumfnt, if it dbn bf rfprfsfntfd by b donstbnt pool fntry.
 * Howfvfr, brgumfnts of typf {@dodf boolfbn}, {@dodf bytf}, {@dodf short}, or {@dodf dhbr}
 * dbnnot bf drfbtfd for bootstrbp mfthods, sindf sudh donstbnts dbnnot bf dirfdtly
 * rfprfsfntfd in thf donstbnt pool, bnd thf invodbtion of thf bootstrbp mfthod will
 * not pfrform thf nfdfssbry nbrrowing primitivf donvfrsions.
 * <p>
 * Extrb bootstrbp mfthod brgumfnts brf intfndfd to bllow lbngubgf implfmfntors
 * to sbffly bnd dompbdtly fndodf mftbdbtb.
 * In prindiplf, thf nbmf bnd fxtrb brgumfnts brf rfdundbnt,
 * sindf fbdh dbll sitf dould bf givfn its own uniquf bootstrbp mfthod.
 * Sudh b prbdtidf is likfly to produdf lbrgf dlbss filfs bnd donstbnt pools.
 *
 * @buthor John Rosf, JSR 292 EG
 * @sindf 1.7
 */

pbdkbgf jbvb.lbng.invokf;
