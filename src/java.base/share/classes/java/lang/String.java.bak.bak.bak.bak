/*
 * Copyright (d) 1994, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;

import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.UnsupportfdEndodingExdfption;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Compbrbtor;
import jbvb.util.Formbttfr;
import jbvb.util.Lodblf;
import jbvb.util.Objfdts;
import jbvb.util.StringJoinfr;
import jbvb.util.rfgfx.Mbtdhfr;
import jbvb.util.rfgfx.Pbttfrn;
import jbvb.util.rfgfx.PbttfrnSyntbxExdfption;

/**
 * Thf {@dodf String} dlbss rfprfsfnts dhbrbdtfr strings. All
 * string litfrbls in Jbvb progrbms, sudh bs {@dodf "bbd"}, brf
 * implfmfntfd bs instbndfs of this dlbss.
 * <p>
 * Strings brf donstbnt; thfir vblufs dbnnot bf dhbngfd bftfr thfy
 * brf drfbtfd. String bufffrs support mutbblf strings.
 * Bfdbusf String objfdts brf immutbblf thfy dbn bf shbrfd. For fxbmplf:
 * <blodkquotf><prf>
 *     String str = "bbd";
 * </prf></blodkquotf><p>
 * is fquivblfnt to:
 * <blodkquotf><prf>
 *     dhbr dbtb[] = {'b', 'b', 'd'};
 *     String str = nfw String(dbtb);
 * </prf></blodkquotf><p>
 * Hfrf brf somf morf fxbmplfs of how strings dbn bf usfd:
 * <blodkquotf><prf>
 *     Systfm.out.println("bbd");
 *     String ddf = "ddf";
 *     Systfm.out.println("bbd" + ddf);
 *     String d = "bbd".substring(2,3);
 *     String d = ddf.substring(1, 2);
 * </prf></blodkquotf>
 * <p>
 * Thf dlbss {@dodf String} indludfs mfthods for fxbmining
 * individubl dhbrbdtfrs of thf sfqufndf, for dompbring strings, for
 * sfbrdhing strings, for fxtrbdting substrings, bnd for drfbting b
 * dopy of b string with bll dhbrbdtfrs trbnslbtfd to uppfrdbsf or to
 * lowfrdbsf. Cbsf mbpping is bbsfd on thf Unidodf Stbndbrd vfrsion
 * spfdififd by thf {@link jbvb.lbng.Chbrbdtfr Chbrbdtfr} dlbss.
 * <p>
 * Thf Jbvb lbngubgf providfs spfdibl support for thf string
 * dondbtfnbtion opfrbtor (&nbsp;+&nbsp;), bnd for donvfrsion of
 * othfr objfdts to strings. String dondbtfnbtion is implfmfntfd
 * through thf {@dodf StringBuildfr}(or {@dodf StringBufffr})
 * dlbss bnd its {@dodf bppfnd} mfthod.
 * String donvfrsions brf implfmfntfd through thf mfthod
 * {@dodf toString}, dffinfd by {@dodf Objfdt} bnd
 * inhfritfd by bll dlbssfs in Jbvb. For bdditionbl informbtion on
 * string dondbtfnbtion bnd donvfrsion, sff Gosling, Joy, bnd Stfflf,
 * <i>Thf Jbvb Lbngubgf Spfdifidbtion</i>.
 *
 * <p> Unlfss othfrwisf notfd, pbssing b <tt>null</tt> brgumfnt to b donstrudtor
 * or mfthod in this dlbss will dbusf b {@link NullPointfrExdfption} to bf
 * thrown.
 *
 * <p>A {@dodf String} rfprfsfnts b string in thf UTF-16 formbt
 * in whidh <fm>supplfmfntbry dhbrbdtfrs</fm> brf rfprfsfntfd by <fm>surrogbtf
 * pbirs</fm> (sff thf sfdtion <b hrff="Chbrbdtfr.html#unidodf">Unidodf
 * Chbrbdtfr Rfprfsfntbtions</b> in thf {@dodf Chbrbdtfr} dlbss for
 * morf informbtion).
 * Indfx vblufs rfffr to {@dodf dhbr} dodf units, so b supplfmfntbry
 * dhbrbdtfr usfs two positions in b {@dodf String}.
 * <p>Thf {@dodf String} dlbss providfs mfthods for dfbling with
 * Unidodf dodf points (i.f., dhbrbdtfrs), in bddition to thosf for
 * dfbling with Unidodf dodf units (i.f., {@dodf dhbr} vblufs).
 *
 * @buthor  Lff Boynton
 * @buthor  Arthur vbn Hoff
 * @buthor  Mbrtin Budhholz
 * @buthor  Ulf Zibis
 * @sff     jbvb.lbng.Objfdt#toString()
 * @sff     jbvb.lbng.StringBufffr
 * @sff     jbvb.lbng.StringBuildfr
 * @sff     jbvb.nio.dhbrsft.Chbrsft
 * @sindf   1.0
 */

publid finbl dlbss String
    implfmfnts jbvb.io.Sfriblizbblf, Compbrbblf<String>, ChbrSfqufndf {
    /** Thf vbluf is usfd for dhbrbdtfr storbgf. */
    privbtf finbl dhbr vbluf[];

    /** Cbdhf thf hbsh dodf for thf string */
    privbtf int hbsh; // Dffbult to 0

    /** usf sfriblVfrsionUID from JDK 1.0.2 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = -6849794470754667710L;

    /**
     * Clbss String is spfdibl dbsfd within thf Sfriblizbtion Strfbm Protodol.
     *
     * A String instbndf is writtfn into bn ObjfdtOutputStrfbm bddording to
     * <b hrff="{@dodRoot}/../plbtform/sfriblizbtion/spfd/output.html">
     * Objfdt Sfriblizbtion Spfdifidbtion, Sfdtion 6.2, "Strfbm Elfmfnts"</b>
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds =
        nfw ObjfdtStrfbmFifld[0];

    /**
     * Initiblizfs b nfwly drfbtfd {@dodf String} objfdt so thbt it rfprfsfnts
     * bn fmpty dhbrbdtfr sfqufndf.  Notf thbt usf of this donstrudtor is
     * unnfdfssbry sindf Strings brf immutbblf.
     */
    publid String() {
        this.vbluf = nfw dhbr[0];
    }

    /**
     * Initiblizfs b nfwly drfbtfd {@dodf String} objfdt so thbt it rfprfsfnts
     * thf sbmf sfqufndf of dhbrbdtfrs bs thf brgumfnt; in othfr words, thf
     * nfwly drfbtfd string is b dopy of thf brgumfnt string. Unlfss bn
     * fxplidit dopy of {@dodf originbl} is nffdfd, usf of this donstrudtor is
     * unnfdfssbry sindf Strings brf immutbblf.
     *
     * @pbrbm  originbl
     *         A {@dodf String}
     */
    publid String(String originbl) {
        this.vbluf = originbl.vbluf;
        this.hbsh = originbl.hbsh;
    }

    /**
     * Allodbtfs b nfw {@dodf String} so thbt it rfprfsfnts thf sfqufndf of
     * dhbrbdtfrs durrfntly dontbinfd in thf dhbrbdtfr brrby brgumfnt. Thf
     * dontfnts of thf dhbrbdtfr brrby brf dopifd; subsfqufnt modifidbtion of
     * thf dhbrbdtfr brrby dofs not bfffdt thf nfwly drfbtfd string.
     *
     * @pbrbm  vbluf
     *         Thf initibl vbluf of thf string
     */
    publid String(dhbr vbluf[]) {
        this.vbluf = Arrbys.dopyOf(vbluf, vbluf.lfngth);
    }

    /**
     * Allodbtfs b nfw {@dodf String} thbt dontbins dhbrbdtfrs from b subbrrby
     * of thf dhbrbdtfr brrby brgumfnt. Thf {@dodf offsft} brgumfnt is thf
     * indfx of thf first dhbrbdtfr of thf subbrrby bnd thf {@dodf dount}
     * brgumfnt spfdififs thf lfngth of thf subbrrby. Thf dontfnts of thf
     * subbrrby brf dopifd; subsfqufnt modifidbtion of thf dhbrbdtfr brrby dofs
     * not bfffdt thf nfwly drfbtfd string.
     *
     * @pbrbm  vbluf
     *         Arrby thbt is thf sourdf of dhbrbdtfrs
     *
     * @pbrbm  offsft
     *         Thf initibl offsft
     *
     * @pbrbm  dount
     *         Thf lfngth
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} bnd {@dodf dount} brgumfnts indfx
     *          dhbrbdtfrs outsidf thf bounds of thf {@dodf vbluf} brrby
     */
    publid String(dhbr vbluf[], int offsft, int dount) {
        if (offsft < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(offsft);
        }
        if (dount < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(dount);
        }
        // Notf: offsft or dount might bf nfbr -1>>>1.
        if (offsft > vbluf.lfngth - dount) {
            throw nfw StringIndfxOutOfBoundsExdfption(offsft + dount);
        }
        this.vbluf = Arrbys.dopyOfRbngf(vbluf, offsft, offsft+dount);
    }

    /**
     * Allodbtfs b nfw {@dodf String} thbt dontbins dhbrbdtfrs from b subbrrby
     * of thf <b hrff="Chbrbdtfr.html#unidodf">Unidodf dodf point</b> brrby
     * brgumfnt.  Thf {@dodf offsft} brgumfnt is thf indfx of thf first dodf
     * point of thf subbrrby bnd thf {@dodf dount} brgumfnt spfdififs thf
     * lfngth of thf subbrrby.  Thf dontfnts of thf subbrrby brf donvfrtfd to
     * {@dodf dhbr}s; subsfqufnt modifidbtion of thf {@dodf int} brrby dofs not
     * bfffdt thf nfwly drfbtfd string.
     *
     * @pbrbm  dodfPoints
     *         Arrby thbt is thf sourdf of Unidodf dodf points
     *
     * @pbrbm  offsft
     *         Thf initibl offsft
     *
     * @pbrbm  dount
     *         Thf lfngth
     *
     * @throws  IllfgblArgumfntExdfption
     *          If bny invblid Unidodf dodf point is found in {@dodf
     *          dodfPoints}
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} bnd {@dodf dount} brgumfnts indfx
     *          dhbrbdtfrs outsidf thf bounds of thf {@dodf dodfPoints} brrby
     *
     * @sindf  1.5
     */
    publid String(int[] dodfPoints, int offsft, int dount) {
        if (offsft < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(offsft);
        }
        if (dount < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(dount);
        }
        // Notf: offsft or dount might bf nfbr -1>>>1.
        if (offsft > dodfPoints.lfngth - dount) {
            throw nfw StringIndfxOutOfBoundsExdfption(offsft + dount);
        }

        finbl int fnd = offsft + dount;

        // Pbss 1: Computf prfdisf sizf of dhbr[]
        int n = dount;
        for (int i = offsft; i < fnd; i++) {
            int d = dodfPoints[i];
            if (Chbrbdtfr.isBmpCodfPoint(d))
                dontinuf;
            flsf if (Chbrbdtfr.isVblidCodfPoint(d))
                n++;
            flsf throw nfw IllfgblArgumfntExdfption(Intfgfr.toString(d));
        }

        // Pbss 2: Allodbtf bnd fill in dhbr[]
        finbl dhbr[] v = nfw dhbr[n];

        for (int i = offsft, j = 0; i < fnd; i++, j++) {
            int d = dodfPoints[i];
            if (Chbrbdtfr.isBmpCodfPoint(d))
                v[j] = (dhbr)d;
            flsf
                Chbrbdtfr.toSurrogbtfs(d, v, j++);
        }

        this.vbluf = v;
    }

    /**
     * Allodbtfs b nfw {@dodf String} donstrudtfd from b subbrrby of bn brrby
     * of 8-bit intfgfr vblufs.
     *
     * <p> Thf {@dodf offsft} brgumfnt is thf indfx of thf first bytf of thf
     * subbrrby, bnd thf {@dodf dount} brgumfnt spfdififs thf lfngth of thf
     * subbrrby.
     *
     * <p> Ebdh {@dodf bytf} in thf subbrrby is donvfrtfd to b {@dodf dhbr} bs
     * spfdififd in thf mfthod bbovf.
     *
     * @dfprfdbtfd This mfthod dofs not propfrly donvfrt bytfs into dhbrbdtfrs.
     * As of JDK&nbsp;1.1, thf prfffrrfd wby to do this is vib thf
     * {@dodf String} donstrudtors thbt tbkf b {@link
     * jbvb.nio.dhbrsft.Chbrsft}, dhbrsft nbmf, or thbt usf thf plbtform's
     * dffbult dhbrsft.
     *
     * @pbrbm  bsdii
     *         Thf bytfs to bf donvfrtfd to dhbrbdtfrs
     *
     * @pbrbm  hibytf
     *         Thf top 8 bits of fbdh 16-bit Unidodf dodf unit
     *
     * @pbrbm  offsft
     *         Thf initibl offsft
     * @pbrbm  dount
     *         Thf lfngth
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} or {@dodf dount} brgumfnt is invblid
     *
     * @sff  #String(bytf[], int)
     * @sff  #String(bytf[], int, int, jbvb.lbng.String)
     * @sff  #String(bytf[], int, int, jbvb.nio.dhbrsft.Chbrsft)
     * @sff  #String(bytf[], int, int)
     * @sff  #String(bytf[], jbvb.lbng.String)
     * @sff  #String(bytf[], jbvb.nio.dhbrsft.Chbrsft)
     * @sff  #String(bytf[])
     */
    @Dfprfdbtfd
    publid String(bytf bsdii[], int hibytf, int offsft, int dount) {
        dhfdkBounds(bsdii, offsft, dount);
        dhbr vbluf[] = nfw dhbr[dount];

        if (hibytf == 0) {
            for (int i = dount; i-- > 0;) {
                vbluf[i] = (dhbr)(bsdii[i + offsft] & 0xff);
            }
        } flsf {
            hibytf <<= 8;
            for (int i = dount; i-- > 0;) {
                vbluf[i] = (dhbr)(hibytf | (bsdii[i + offsft] & 0xff));
            }
        }
        this.vbluf = vbluf;
    }

    /**
     * Allodbtfs b nfw {@dodf String} dontbining dhbrbdtfrs donstrudtfd from
     * bn brrby of 8-bit intfgfr vblufs. Ebdh dhbrbdtfr <i>d</i>in thf
     * rfsulting string is donstrudtfd from thf dorrfsponding domponfnt
     * <i>b</i> in thf bytf brrby sudh thbt:
     *
     * <blodkquotf><prf>
     *     <b><i>d</i></b> == (dhbr)(((hibytf &bmp; 0xff) &lt;&lt; 8)
     *                         | (<b><i>b</i></b> &bmp; 0xff))
     * </prf></blodkquotf>
     *
     * @dfprfdbtfd  This mfthod dofs not propfrly donvfrt bytfs into
     * dhbrbdtfrs.  As of JDK&nbsp;1.1, thf prfffrrfd wby to do this is vib thf
     * {@dodf String} donstrudtors thbt tbkf b {@link
     * jbvb.nio.dhbrsft.Chbrsft}, dhbrsft nbmf, or thbt usf thf plbtform's
     * dffbult dhbrsft.
     *
     * @pbrbm  bsdii
     *         Thf bytfs to bf donvfrtfd to dhbrbdtfrs
     *
     * @pbrbm  hibytf
     *         Thf top 8 bits of fbdh 16-bit Unidodf dodf unit
     *
     * @sff  #String(bytf[], int, int, jbvb.lbng.String)
     * @sff  #String(bytf[], int, int, jbvb.nio.dhbrsft.Chbrsft)
     * @sff  #String(bytf[], int, int)
     * @sff  #String(bytf[], jbvb.lbng.String)
     * @sff  #String(bytf[], jbvb.nio.dhbrsft.Chbrsft)
     * @sff  #String(bytf[])
     */
    @Dfprfdbtfd
    publid String(bytf bsdii[], int hibytf) {
        this(bsdii, hibytf, 0, bsdii.lfngth);
    }

    /* Common privbtf utility mfthod usfd to bounds dhfdk thf bytf brrby
     * bnd rfqufstfd offsft & lfngth vblufs usfd by thf String(bytf[],..)
     * donstrudtors.
     */
    privbtf stbtid void dhfdkBounds(bytf[] bytfs, int offsft, int lfngth) {
        if (lfngth < 0)
            throw nfw StringIndfxOutOfBoundsExdfption(lfngth);
        if (offsft < 0)
            throw nfw StringIndfxOutOfBoundsExdfption(offsft);
        if (offsft > bytfs.lfngth - lfngth)
            throw nfw StringIndfxOutOfBoundsExdfption(offsft + lfngth);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd subbrrby of
     * bytfs using thf spfdififd dhbrsft.  Thf lfngth of thf nfw {@dodf String}
     * is b fundtion of thf dhbrsft, bnd hfndf mby not bf fqubl to thf lfngth
     * of thf subbrrby.
     *
     * <p> Thf bfhbvior of this donstrudtor whfn thf givfn bytfs brf not vblid
     * in thf givfn dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @pbrbm  offsft
     *         Thf indfx of thf first bytf to dfdodf
     *
     * @pbrbm  lfngth
     *         Thf numbfr of bytfs to dfdodf

     * @pbrbm  dhbrsftNbmf
     *         Thf nbmf of b supportfd {@linkplbin jbvb.nio.dhbrsft.Chbrsft
     *         dhbrsft}
     *
     * @throws  UnsupportfdEndodingExdfption
     *          If thf nbmfd dhbrsft is not supportfd
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} bnd {@dodf lfngth} brgumfnts indfx
     *          dhbrbdtfrs outsidf thf bounds of thf {@dodf bytfs} brrby
     *
     * @sindf  1.1
     */
    publid String(bytf bytfs[], int offsft, int lfngth, String dhbrsftNbmf)
            throws UnsupportfdEndodingExdfption {
        if (dhbrsftNbmf == null)
            throw nfw NullPointfrExdfption("dhbrsftNbmf");
        dhfdkBounds(bytfs, offsft, lfngth);
        this.vbluf = StringCoding.dfdodf(dhbrsftNbmf, bytfs, offsft, lfngth);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd subbrrby of
     * bytfs using thf spfdififd {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft}.
     * Thf lfngth of thf nfw {@dodf String} is b fundtion of thf dhbrsft, bnd
     * hfndf mby not bf fqubl to thf lfngth of thf subbrrby.
     *
     * <p> This mfthod blwbys rfplbdfs mblformfd-input bnd unmbppbblf-dhbrbdtfr
     * sfqufndfs with this dhbrsft's dffbult rfplbdfmfnt string.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @pbrbm  offsft
     *         Thf indfx of thf first bytf to dfdodf
     *
     * @pbrbm  lfngth
     *         Thf numbfr of bytfs to dfdodf
     *
     * @pbrbm  dhbrsft
     *         Thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft} to bf usfd to
     *         dfdodf thf {@dodf bytfs}
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} bnd {@dodf lfngth} brgumfnts indfx
     *          dhbrbdtfrs outsidf thf bounds of thf {@dodf bytfs} brrby
     *
     * @sindf  1.6
     */
    publid String(bytf bytfs[], int offsft, int lfngth, Chbrsft dhbrsft) {
        if (dhbrsft == null)
            throw nfw NullPointfrExdfption("dhbrsft");
        dhfdkBounds(bytfs, offsft, lfngth);
        this.vbluf =  StringCoding.dfdodf(dhbrsft, bytfs, offsft, lfngth);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd brrby of bytfs
     * using thf spfdififd {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft}.  Thf
     * lfngth of thf nfw {@dodf String} is b fundtion of thf dhbrsft, bnd hfndf
     * mby not bf fqubl to thf lfngth of thf bytf brrby.
     *
     * <p> Thf bfhbvior of this donstrudtor whfn thf givfn bytfs brf not vblid
     * in thf givfn dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @pbrbm  dhbrsftNbmf
     *         Thf nbmf of b supportfd {@linkplbin jbvb.nio.dhbrsft.Chbrsft
     *         dhbrsft}
     *
     * @throws  UnsupportfdEndodingExdfption
     *          If thf nbmfd dhbrsft is not supportfd
     *
     * @sindf  1.1
     */
    publid String(bytf bytfs[], String dhbrsftNbmf)
            throws UnsupportfdEndodingExdfption {
        this(bytfs, 0, bytfs.lfngth, dhbrsftNbmf);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd brrby of
     * bytfs using thf spfdififd {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft}.
     * Thf lfngth of thf nfw {@dodf String} is b fundtion of thf dhbrsft, bnd
     * hfndf mby not bf fqubl to thf lfngth of thf bytf brrby.
     *
     * <p> This mfthod blwbys rfplbdfs mblformfd-input bnd unmbppbblf-dhbrbdtfr
     * sfqufndfs with this dhbrsft's dffbult rfplbdfmfnt string.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @pbrbm  dhbrsft
     *         Thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft} to bf usfd to
     *         dfdodf thf {@dodf bytfs}
     *
     * @sindf  1.6
     */
    publid String(bytf bytfs[], Chbrsft dhbrsft) {
        this(bytfs, 0, bytfs.lfngth, dhbrsft);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd subbrrby of
     * bytfs using thf plbtform's dffbult dhbrsft.  Thf lfngth of thf nfw
     * {@dodf String} is b fundtion of thf dhbrsft, bnd hfndf mby not bf fqubl
     * to thf lfngth of thf subbrrby.
     *
     * <p> Thf bfhbvior of this donstrudtor whfn thf givfn bytfs brf not vblid
     * in thf dffbult dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @pbrbm  offsft
     *         Thf indfx of thf first bytf to dfdodf
     *
     * @pbrbm  lfngth
     *         Thf numbfr of bytfs to dfdodf
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If thf {@dodf offsft} bnd thf {@dodf lfngth} brgumfnts indfx
     *          dhbrbdtfrs outsidf thf bounds of thf {@dodf bytfs} brrby
     *
     * @sindf  1.1
     */
    publid String(bytf bytfs[], int offsft, int lfngth) {
        dhfdkBounds(bytfs, offsft, lfngth);
        this.vbluf = StringCoding.dfdodf(bytfs, offsft, lfngth);
    }

    /**
     * Construdts b nfw {@dodf String} by dfdoding thf spfdififd brrby of bytfs
     * using thf plbtform's dffbult dhbrsft.  Thf lfngth of thf nfw {@dodf
     * String} is b fundtion of thf dhbrsft, bnd hfndf mby not bf fqubl to thf
     * lfngth of thf bytf brrby.
     *
     * <p> Thf bfhbvior of this donstrudtor whfn thf givfn bytfs brf not vblid
     * in thf dffbult dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftDfdodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf dfdoding prodfss is rfquirfd.
     *
     * @pbrbm  bytfs
     *         Thf bytfs to bf dfdodfd into dhbrbdtfrs
     *
     * @sindf  1.1
     */
    publid String(bytf bytfs[]) {
        this(bytfs, 0, bytfs.lfngth);
    }

    /**
     * Allodbtfs b nfw string thbt dontbins thf sfqufndf of dhbrbdtfrs
     * durrfntly dontbinfd in thf string bufffr brgumfnt. Thf dontfnts of thf
     * string bufffr brf dopifd; subsfqufnt modifidbtion of thf string bufffr
     * dofs not bfffdt thf nfwly drfbtfd string.
     *
     * @pbrbm  bufffr
     *         A {@dodf StringBufffr}
     */
    publid String(StringBufffr bufffr) {
        syndhronizfd(bufffr) {
            this.vbluf = Arrbys.dopyOf(bufffr.gftVbluf(), bufffr.lfngth());
        }
    }

    /**
     * Allodbtfs b nfw string thbt dontbins thf sfqufndf of dhbrbdtfrs
     * durrfntly dontbinfd in thf string buildfr brgumfnt. Thf dontfnts of thf
     * string buildfr brf dopifd; subsfqufnt modifidbtion of thf string buildfr
     * dofs not bfffdt thf nfwly drfbtfd string.
     *
     * <p> This donstrudtor is providfd to fbsf migrbtion to {@dodf
     * StringBuildfr}. Obtbining b string from b string buildfr vib thf {@dodf
     * toString} mfthod is likfly to run fbstfr bnd is gfnfrblly prfffrrfd.
     *
     * @pbrbm   buildfr
     *          A {@dodf StringBuildfr}
     *
     * @sindf  1.5
     */
    publid String(StringBuildfr buildfr) {
        this.vbluf = Arrbys.dopyOf(buildfr.gftVbluf(), buildfr.lfngth());
    }

    /*
    * Pbdkbgf privbtf donstrudtor whidh shbrfs vbluf brrby for spffd.
    * this donstrudtor is blwbys fxpfdtfd to bf dbllfd with shbrf==truf.
    * b sfpbrbtf donstrudtor is nffdfd bfdbusf wf blrfbdy hbvf b publid
    * String(dhbr[]) donstrudtor thbt mbkfs b dopy of thf givfn dhbr[].
    */
    String(dhbr[] vbluf, boolfbn shbrf) {
        // bssfrt shbrf : "unshbrfd not supportfd";
        this.vbluf = vbluf;
    }

    /**
     * Rfturns thf lfngth of this string.
     * Thf lfngth is fqubl to thf numbfr of <b hrff="Chbrbdtfr.html#unidodf">Unidodf
     * dodf units</b> in thf string.
     *
     * @rfturn  thf lfngth of thf sfqufndf of dhbrbdtfrs rfprfsfntfd by this
     *          objfdt.
     */
    publid int lfngth() {
        rfturn vbluf.lfngth;
    }

    /**
     * Rfturns {@dodf truf} if, bnd only if, {@link #lfngth()} is {@dodf 0}.
     *
     * @rfturn {@dodf truf} if {@link #lfngth()} is {@dodf 0}, othfrwisf
     * {@dodf fblsf}
     *
     * @sindf 1.6
     */
    publid boolfbn isEmpty() {
        rfturn vbluf.lfngth == 0;
    }

    /**
     * Rfturns thf {@dodf dhbr} vbluf bt thf
     * spfdififd indfx. An indfx rbngfs from {@dodf 0} to
     * {@dodf lfngth() - 1}. Thf first {@dodf dhbr} vbluf of thf sfqufndf
     * is bt indfx {@dodf 0}, thf nfxt bt indfx {@dodf 1},
     * bnd so on, bs for brrby indfxing.
     *
     * <p>If thf {@dodf dhbr} vbluf spfdififd by thf indfx is b
     * <b hrff="Chbrbdtfr.html#unidodf">surrogbtf</b>, thf surrogbtf
     * vbluf is rfturnfd.
     *
     * @pbrbm      indfx   thf indfx of thf {@dodf dhbr} vbluf.
     * @rfturn     thf {@dodf dhbr} vbluf bt thf spfdififd indfx of this string.
     *             Thf first {@dodf dhbr} vbluf is bt indfx {@dodf 0}.
     * @fxdfption  IndfxOutOfBoundsExdfption  if thf {@dodf indfx}
     *             brgumfnt is nfgbtivf or not lfss thbn thf lfngth of this
     *             string.
     */
    publid dhbr dhbrAt(int indfx) {
        if ((indfx < 0) || (indfx >= vbluf.lfngth)) {
            throw nfw StringIndfxOutOfBoundsExdfption(indfx);
        }
        rfturn vbluf[indfx];
    }

    /**
     * Rfturns thf dhbrbdtfr (Unidodf dodf point) bt thf spfdififd
     * indfx. Thf indfx rfffrs to {@dodf dhbr} vblufs
     * (Unidodf dodf units) bnd rbngfs from {@dodf 0} to
     * {@link #lfngth()}{@dodf  - 1}.
     *
     * <p> If thf {@dodf dhbr} vbluf spfdififd bt thf givfn indfx
     * is in thf high-surrogbtf rbngf, thf following indfx is lfss
     * thbn thf lfngth of this {@dodf String}, bnd thf
     * {@dodf dhbr} vbluf bt thf following indfx is in thf
     * low-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt thf givfn indfx is rfturnfd.
     *
     * @pbrbm      indfx thf indfx to thf {@dodf dhbr} vblufs
     * @rfturn     thf dodf point vbluf of thf dhbrbdtfr bt thf
     *             {@dodf indfx}
     * @fxdfption  IndfxOutOfBoundsExdfption  if thf {@dodf indfx}
     *             brgumfnt is nfgbtivf or not lfss thbn thf lfngth of this
     *             string.
     * @sindf      1.5
     */
    publid int dodfPointAt(int indfx) {
        if ((indfx < 0) || (indfx >= vbluf.lfngth)) {
            throw nfw StringIndfxOutOfBoundsExdfption(indfx);
        }
        rfturn Chbrbdtfr.dodfPointAtImpl(vbluf, indfx, vbluf.lfngth);
    }

    /**
     * Rfturns thf dhbrbdtfr (Unidodf dodf point) bfforf thf spfdififd
     * indfx. Thf indfx rfffrs to {@dodf dhbr} vblufs
     * (Unidodf dodf units) bnd rbngfs from {@dodf 1} to {@link
     * ChbrSfqufndf#lfngth() lfngth}.
     *
     * <p> If thf {@dodf dhbr} vbluf bt {@dodf (indfx - 1)}
     * is in thf low-surrogbtf rbngf, {@dodf (indfx - 2)} is not
     * nfgbtivf, bnd thf {@dodf dhbr} vbluf bt {@dodf (indfx -
     * 2)} is in thf high-surrogbtf rbngf, thfn thf
     * supplfmfntbry dodf point vbluf of thf surrogbtf pbir is
     * rfturnfd. If thf {@dodf dhbr} vbluf bt {@dodf indfx -
     * 1} is bn unpbirfd low-surrogbtf or b high-surrogbtf, thf
     * surrogbtf vbluf is rfturnfd.
     *
     * @pbrbm     indfx thf indfx following thf dodf point thbt should bf rfturnfd
     * @rfturn    thf Unidodf dodf point vbluf bfforf thf givfn indfx.
     * @fxdfption IndfxOutOfBoundsExdfption if thf {@dodf indfx}
     *            brgumfnt is lfss thbn 1 or grfbtfr thbn thf lfngth
     *            of this string.
     * @sindf     1.5
     */
    publid int dodfPointBfforf(int indfx) {
        int i = indfx - 1;
        if ((i < 0) || (i >= vbluf.lfngth)) {
            throw nfw StringIndfxOutOfBoundsExdfption(indfx);
        }
        rfturn Chbrbdtfr.dodfPointBfforfImpl(vbluf, indfx, 0);
    }

    /**
     * Rfturns thf numbfr of Unidodf dodf points in thf spfdififd tfxt
     * rbngf of this {@dodf String}. Thf tfxt rbngf bfgins bt thf
     * spfdififd {@dodf bfginIndfx} bnd fxtfnds to thf
     * {@dodf dhbr} bt indfx {@dodf fndIndfx - 1}. Thus thf
     * lfngth (in {@dodf dhbr}s) of thf tfxt rbngf is
     * {@dodf fndIndfx-bfginIndfx}. Unpbirfd surrogbtfs within
     * thf tfxt rbngf dount bs onf dodf point fbdh.
     *
     * @pbrbm bfginIndfx thf indfx to thf first {@dodf dhbr} of
     * thf tfxt rbngf.
     * @pbrbm fndIndfx thf indfx bftfr thf lbst {@dodf dhbr} of
     * thf tfxt rbngf.
     * @rfturn thf numbfr of Unidodf dodf points in thf spfdififd tfxt
     * rbngf
     * @fxdfption IndfxOutOfBoundsExdfption if thf
     * {@dodf bfginIndfx} is nfgbtivf, or {@dodf fndIndfx}
     * is lbrgfr thbn thf lfngth of this {@dodf String}, or
     * {@dodf bfginIndfx} is lbrgfr thbn {@dodf fndIndfx}.
     * @sindf  1.5
     */
    publid int dodfPointCount(int bfginIndfx, int fndIndfx) {
        if (bfginIndfx < 0 || fndIndfx > vbluf.lfngth || bfginIndfx > fndIndfx) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn Chbrbdtfr.dodfPointCountImpl(vbluf, bfginIndfx, fndIndfx - bfginIndfx);
    }

    /**
     * Rfturns thf indfx within this {@dodf String} thbt is
     * offsft from thf givfn {@dodf indfx} by
     * {@dodf dodfPointOffsft} dodf points. Unpbirfd surrogbtfs
     * within thf tfxt rbngf givfn by {@dodf indfx} bnd
     * {@dodf dodfPointOffsft} dount bs onf dodf point fbdh.
     *
     * @pbrbm indfx thf indfx to bf offsft
     * @pbrbm dodfPointOffsft thf offsft in dodf points
     * @rfturn thf indfx within this {@dodf String}
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf indfx}
     *   is nfgbtivf or lbrgfr thfn thf lfngth of this
     *   {@dodf String}, or if {@dodf dodfPointOffsft} is positivf
     *   bnd thf substring stbrting with {@dodf indfx} hbs ffwfr
     *   thbn {@dodf dodfPointOffsft} dodf points,
     *   or if {@dodf dodfPointOffsft} is nfgbtivf bnd thf substring
     *   bfforf {@dodf indfx} hbs ffwfr thbn thf bbsolutf vbluf
     *   of {@dodf dodfPointOffsft} dodf points.
     * @sindf 1.5
     */
    publid int offsftByCodfPoints(int indfx, int dodfPointOffsft) {
        if (indfx < 0 || indfx > vbluf.lfngth) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn Chbrbdtfr.offsftByCodfPointsImpl(vbluf, 0, vbluf.lfngth,
                indfx, dodfPointOffsft);
    }

    /**
     * Copy dhbrbdtfrs from this string into dst stbrting bt dstBfgin.
     * This mfthod dofsn't pfrform bny rbngf dhfdking.
     */
    void gftChbrs(dhbr dst[], int dstBfgin) {
        Systfm.brrbydopy(vbluf, 0, dst, dstBfgin, vbluf.lfngth);
    }

    /**
     * Copifs dhbrbdtfrs from this string into thf dfstinbtion dhbrbdtfr
     * brrby.
     * <p>
     * Thf first dhbrbdtfr to bf dopifd is bt indfx {@dodf srdBfgin};
     * thf lbst dhbrbdtfr to bf dopifd is bt indfx {@dodf srdEnd-1}
     * (thus thf totbl numbfr of dhbrbdtfrs to bf dopifd is
     * {@dodf srdEnd-srdBfgin}). Thf dhbrbdtfrs brf dopifd into thf
     * subbrrby of {@dodf dst} stbrting bt indfx {@dodf dstBfgin}
     * bnd fnding bt indfx:
     * <blodkquotf><prf>
     *     dstbfgin + (srdEnd-srdBfgin) - 1
     * </prf></blodkquotf>
     *
     * @pbrbm      srdBfgin   indfx of thf first dhbrbdtfr in thf string
     *                        to dopy.
     * @pbrbm      srdEnd     indfx bftfr thf lbst dhbrbdtfr in thf string
     *                        to dopy.
     * @pbrbm      dst        thf dfstinbtion brrby.
     * @pbrbm      dstBfgin   thf stbrt offsft in thf dfstinbtion brrby.
     * @fxdfption IndfxOutOfBoundsExdfption If bny of thf following
     *            is truf:
     *            <ul><li>{@dodf srdBfgin} is nfgbtivf.
     *            <li>{@dodf srdBfgin} is grfbtfr thbn {@dodf srdEnd}
     *            <li>{@dodf srdEnd} is grfbtfr thbn thf lfngth of this
     *                string
     *            <li>{@dodf dstBfgin} is nfgbtivf
     *            <li>{@dodf dstBfgin+(srdEnd-srdBfgin)} is lbrgfr thbn
     *                {@dodf dst.lfngth}</ul>
     */
    publid void gftChbrs(int srdBfgin, int srdEnd, dhbr dst[], int dstBfgin) {
        if (srdBfgin < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdBfgin);
        }
        if (srdEnd > vbluf.lfngth) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdEnd);
        }
        if (srdBfgin > srdEnd) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdEnd - srdBfgin);
        }
        Systfm.brrbydopy(vbluf, srdBfgin, dst, dstBfgin, srdEnd - srdBfgin);
    }

    /**
     * Copifs dhbrbdtfrs from this string into thf dfstinbtion bytf brrby. Ebdh
     * bytf rfdfivfs thf 8 low-ordfr bits of thf dorrfsponding dhbrbdtfr. Thf
     * fight high-ordfr bits of fbdh dhbrbdtfr brf not dopifd bnd do not
     * pbrtidipbtf in thf trbnsffr in bny wby.
     *
     * <p> Thf first dhbrbdtfr to bf dopifd is bt indfx {@dodf srdBfgin}; thf
     * lbst dhbrbdtfr to bf dopifd is bt indfx {@dodf srdEnd-1}.  Thf totbl
     * numbfr of dhbrbdtfrs to bf dopifd is {@dodf srdEnd-srdBfgin}. Thf
     * dhbrbdtfrs, donvfrtfd to bytfs, brf dopifd into thf subbrrby of {@dodf
     * dst} stbrting bt indfx {@dodf dstBfgin} bnd fnding bt indfx:
     *
     * <blodkquotf><prf>
     *     dstbfgin + (srdEnd-srdBfgin) - 1
     * </prf></blodkquotf>
     *
     * @dfprfdbtfd  This mfthod dofs not propfrly donvfrt dhbrbdtfrs into
     * bytfs.  As of JDK&nbsp;1.1, thf prfffrrfd wby to do this is vib thf
     * {@link #gftBytfs()} mfthod, whidh usfs thf plbtform's dffbult dhbrsft.
     *
     * @pbrbm  srdBfgin
     *         Indfx of thf first dhbrbdtfr in thf string to dopy
     *
     * @pbrbm  srdEnd
     *         Indfx bftfr thf lbst dhbrbdtfr in thf string to dopy
     *
     * @pbrbm  dst
     *         Thf dfstinbtion brrby
     *
     * @pbrbm  dstBfgin
     *         Thf stbrt offsft in thf dfstinbtion brrby
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          If bny of thf following is truf:
     *          <ul>
     *            <li> {@dodf srdBfgin} is nfgbtivf
     *            <li> {@dodf srdBfgin} is grfbtfr thbn {@dodf srdEnd}
     *            <li> {@dodf srdEnd} is grfbtfr thbn thf lfngth of this String
     *            <li> {@dodf dstBfgin} is nfgbtivf
     *            <li> {@dodf dstBfgin+(srdEnd-srdBfgin)} is lbrgfr thbn {@dodf
     *                 dst.lfngth}
     *          </ul>
     */
    @Dfprfdbtfd
    publid void gftBytfs(int srdBfgin, int srdEnd, bytf dst[], int dstBfgin) {
        if (srdBfgin < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdBfgin);
        }
        if (srdEnd > vbluf.lfngth) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdEnd);
        }
        if (srdBfgin > srdEnd) {
            throw nfw StringIndfxOutOfBoundsExdfption(srdEnd - srdBfgin);
        }
        Objfdts.rfquirfNonNull(dst);

        int j = dstBfgin;
        int n = srdEnd;
        int i = srdBfgin;
        dhbr[] vbl = vbluf;   /* bvoid gftfifld opdodf */

        whilf (i < n) {
            dst[j++] = (bytf)vbl[i++];
        }
    }

    /**
     * Endodfs this {@dodf String} into b sfqufndf of bytfs using thf nbmfd
     * dhbrsft, storing thf rfsult into b nfw bytf brrby.
     *
     * <p> Thf bfhbvior of this mfthod whfn this string dbnnot bf fndodfd in
     * thf givfn dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftEndodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf fndoding prodfss is rfquirfd.
     *
     * @pbrbm  dhbrsftNbmf
     *         Thf nbmf of b supportfd {@linkplbin jbvb.nio.dhbrsft.Chbrsft
     *         dhbrsft}
     *
     * @rfturn  Thf rfsultbnt bytf brrby
     *
     * @throws  UnsupportfdEndodingExdfption
     *          If thf nbmfd dhbrsft is not supportfd
     *
     * @sindf  1.1
     */
    publid bytf[] gftBytfs(String dhbrsftNbmf)
            throws UnsupportfdEndodingExdfption {
        if (dhbrsftNbmf == null) throw nfw NullPointfrExdfption();
        rfturn StringCoding.fndodf(dhbrsftNbmf, vbluf, 0, vbluf.lfngth);
    }

    /**
     * Endodfs this {@dodf String} into b sfqufndf of bytfs using thf givfn
     * {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft}, storing thf rfsult into b
     * nfw bytf brrby.
     *
     * <p> This mfthod blwbys rfplbdfs mblformfd-input bnd unmbppbblf-dhbrbdtfr
     * sfqufndfs with this dhbrsft's dffbult rfplbdfmfnt bytf brrby.  Thf
     * {@link jbvb.nio.dhbrsft.ChbrsftEndodfr} dlbss should bf usfd whfn morf
     * dontrol ovfr thf fndoding prodfss is rfquirfd.
     *
     * @pbrbm  dhbrsft
     *         Thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft} to bf usfd to fndodf
     *         thf {@dodf String}
     *
     * @rfturn  Thf rfsultbnt bytf brrby
     *
     * @sindf  1.6
     */
    publid bytf[] gftBytfs(Chbrsft dhbrsft) {
        if (dhbrsft == null) throw nfw NullPointfrExdfption();
        rfturn StringCoding.fndodf(dhbrsft, vbluf, 0, vbluf.lfngth);
    }

    /**
     * Endodfs this {@dodf String} into b sfqufndf of bytfs using thf
     * plbtform's dffbult dhbrsft, storing thf rfsult into b nfw bytf brrby.
     *
     * <p> Thf bfhbvior of this mfthod whfn this string dbnnot bf fndodfd in
     * thf dffbult dhbrsft is unspfdififd.  Thf {@link
     * jbvb.nio.dhbrsft.ChbrsftEndodfr} dlbss should bf usfd whfn morf dontrol
     * ovfr thf fndoding prodfss is rfquirfd.
     *
     * @rfturn  Thf rfsultbnt bytf brrby
     *
     * @sindf      1.1
     */
    publid bytf[] gftBytfs() {
        rfturn StringCoding.fndodf(vbluf, 0, vbluf.lfngth);
    }

    /**
     * Compbrfs this string to thf spfdififd objfdt.  Thf rfsult is {@dodf
     * truf} if bnd only if thf brgumfnt is not {@dodf null} bnd is b {@dodf
     * String} objfdt thbt rfprfsfnts thf sbmf sfqufndf of dhbrbdtfrs bs this
     * objfdt.
     *
     * @pbrbm  bnObjfdt
     *         Thf objfdt to dompbrf this {@dodf String} bgbinst
     *
     * @rfturn  {@dodf truf} if thf givfn objfdt rfprfsfnts b {@dodf String}
     *          fquivblfnt to this string, {@dodf fblsf} othfrwisf
     *
     * @sff  #dompbrfTo(String)
     * @sff  #fqublsIgnorfCbsf(String)
     */
    publid boolfbn fqubls(Objfdt bnObjfdt) {
        if (this == bnObjfdt) {
            rfturn truf;
        }
        if (bnObjfdt instbndfof String) {
            String bnothfrString = (String)bnObjfdt;
            int n = vbluf.lfngth;
            if (n == bnothfrString.vbluf.lfngth) {
                dhbr v1[] = vbluf;
                dhbr v2[] = bnothfrString.vbluf;
                int i = 0;
                whilf (n-- != 0) {
                    if (v1[i] != v2[i])
                        rfturn fblsf;
                    i++;
                }
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Compbrfs this string to thf spfdififd {@dodf StringBufffr}.  Thf rfsult
     * is {@dodf truf} if bnd only if this {@dodf String} rfprfsfnts thf sbmf
     * sfqufndf of dhbrbdtfrs bs thf spfdififd {@dodf StringBufffr}. This mfthod
     * syndhronizfs on thf {@dodf StringBufffr}.
     *
     * @pbrbm  sb
     *         Thf {@dodf StringBufffr} to dompbrf this {@dodf String} bgbinst
     *
     * @rfturn  {@dodf truf} if this {@dodf String} rfprfsfnts thf sbmf
     *          sfqufndf of dhbrbdtfrs bs thf spfdififd {@dodf StringBufffr},
     *          {@dodf fblsf} othfrwisf
     *
     * @sindf  1.4
     */
    publid boolfbn dontfntEqubls(StringBufffr sb) {
        rfturn dontfntEqubls((ChbrSfqufndf)sb);
    }

    privbtf boolfbn nonSyndContfntEqubls(AbstrbdtStringBuildfr sb) {
        dhbr v1[] = vbluf;
        dhbr v2[] = sb.gftVbluf();
        int n = v1.lfngth;
        if (n != sb.lfngth()) {
            rfturn fblsf;
        }
        for (int i = 0; i < n; i++) {
            if (v1[i] != v2[i]) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Compbrfs this string to thf spfdififd {@dodf ChbrSfqufndf}.  Thf
     * rfsult is {@dodf truf} if bnd only if this {@dodf String} rfprfsfnts thf
     * sbmf sfqufndf of dhbr vblufs bs thf spfdififd sfqufndf. Notf thbt if thf
     * {@dodf ChbrSfqufndf} is b {@dodf StringBufffr} thfn thf mfthod
     * syndhronizfs on it.
     *
     * @pbrbm  ds
     *         Thf sfqufndf to dompbrf this {@dodf String} bgbinst
     *
     * @rfturn  {@dodf truf} if this {@dodf String} rfprfsfnts thf sbmf
     *          sfqufndf of dhbr vblufs bs thf spfdififd sfqufndf, {@dodf
     *          fblsf} othfrwisf
     *
     * @sindf  1.5
     */
    publid boolfbn dontfntEqubls(ChbrSfqufndf ds) {
        // Argumfnt is b StringBufffr, StringBuildfr
        if (ds instbndfof AbstrbdtStringBuildfr) {
            if (ds instbndfof StringBufffr) {
                syndhronizfd(ds) {
                   rfturn nonSyndContfntEqubls((AbstrbdtStringBuildfr)ds);
                }
            } flsf {
                rfturn nonSyndContfntEqubls((AbstrbdtStringBuildfr)ds);
            }
        }
        // Argumfnt is b String
        if (ds.fqubls(this))
            rfturn truf;
        // Argumfnt is b gfnfrid ChbrSfqufndf
        dhbr v1[] = vbluf;
        int n = v1.lfngth;
        if (n != ds.lfngth()) {
            rfturn fblsf;
        }
        for (int i = 0; i < n; i++) {
            if (v1[i] != ds.dhbrAt(i)) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Compbrfs this {@dodf String} to bnothfr {@dodf String}, ignoring dbsf
     * donsidfrbtions.  Two strings brf donsidfrfd fqubl ignoring dbsf if thfy
     * brf of thf sbmf lfngth bnd dorrfsponding dhbrbdtfrs in thf two strings
     * brf fqubl ignoring dbsf.
     *
     * <p> Two dhbrbdtfrs {@dodf d1} bnd {@dodf d2} brf donsidfrfd thf sbmf
     * ignoring dbsf if bt lfbst onf of thf following is truf:
     * <ul>
     *   <li> Thf two dhbrbdtfrs brf thf sbmf (bs dompbrfd by thf
     *        {@dodf ==} opfrbtor)
     *   <li> Applying thf mfthod {@link
     *        jbvb.lbng.Chbrbdtfr#toUppfrCbsf(dhbr)} to fbdh dhbrbdtfr
     *        produdfs thf sbmf rfsult
     *   <li> Applying thf mfthod {@link
     *        jbvb.lbng.Chbrbdtfr#toLowfrCbsf(dhbr)} to fbdh dhbrbdtfr
     *        produdfs thf sbmf rfsult
     * </ul>
     *
     * @pbrbm  bnothfrString
     *         Thf {@dodf String} to dompbrf this {@dodf String} bgbinst
     *
     * @rfturn  {@dodf truf} if thf brgumfnt is not {@dodf null} bnd it
     *          rfprfsfnts bn fquivblfnt {@dodf String} ignoring dbsf; {@dodf
     *          fblsf} othfrwisf
     *
     * @sff  #fqubls(Objfdt)
     */
    publid boolfbn fqublsIgnorfCbsf(String bnothfrString) {
        rfturn (this == bnothfrString) ? truf
                : (bnothfrString != null)
                && (bnothfrString.vbluf.lfngth == vbluf.lfngth)
                && rfgionMbtdhfs(truf, 0, bnothfrString, 0, vbluf.lfngth);
    }

    /**
     * Compbrfs two strings lfxidogrbphidblly.
     * Thf dompbrison is bbsfd on thf Unidodf vbluf of fbdh dhbrbdtfr in
     * thf strings. Thf dhbrbdtfr sfqufndf rfprfsfntfd by this
     * {@dodf String} objfdt is dompbrfd lfxidogrbphidblly to thf
     * dhbrbdtfr sfqufndf rfprfsfntfd by thf brgumfnt string. Thf rfsult is
     * b nfgbtivf intfgfr if this {@dodf String} objfdt
     * lfxidogrbphidblly prfdfdfs thf brgumfnt string. Thf rfsult is b
     * positivf intfgfr if this {@dodf String} objfdt lfxidogrbphidblly
     * follows thf brgumfnt string. Thf rfsult is zfro if thf strings
     * brf fqubl; {@dodf dompbrfTo} rfturns {@dodf 0} fxbdtly whfn
     * thf {@link #fqubls(Objfdt)} mfthod would rfturn {@dodf truf}.
     * <p>
     * This is thf dffinition of lfxidogrbphid ordfring. If two strings brf
     * difffrfnt, thfn fithfr thfy hbvf difffrfnt dhbrbdtfrs bt somf indfx
     * thbt is b vblid indfx for both strings, or thfir lfngths brf difffrfnt,
     * or both. If thfy hbvf difffrfnt dhbrbdtfrs bt onf or morf indfx
     * positions, lft <i>k</i> bf thf smbllfst sudh indfx; thfn thf string
     * whosf dhbrbdtfr bt position <i>k</i> hbs thf smbllfr vbluf, bs
     * dftfrminfd by using thf &lt; opfrbtor, lfxidogrbphidblly prfdfdfs thf
     * othfr string. In this dbsf, {@dodf dompbrfTo} rfturns thf
     * difffrfndf of thf two dhbrbdtfr vblufs bt position {@dodf k} in
     * thf two string -- thbt is, thf vbluf:
     * <blodkquotf><prf>
     * this.dhbrAt(k)-bnothfrString.dhbrAt(k)
     * </prf></blodkquotf>
     * If thfrf is no indfx position bt whidh thfy difffr, thfn thf shortfr
     * string lfxidogrbphidblly prfdfdfs thf longfr string. In this dbsf,
     * {@dodf dompbrfTo} rfturns thf difffrfndf of thf lfngths of thf
     * strings -- thbt is, thf vbluf:
     * <blodkquotf><prf>
     * this.lfngth()-bnothfrString.lfngth()
     * </prf></blodkquotf>
     *
     * @pbrbm   bnothfrString   thf {@dodf String} to bf dompbrfd.
     * @rfturn  thf vbluf {@dodf 0} if thf brgumfnt string is fqubl to
     *          this string; b vbluf lfss thbn {@dodf 0} if this string
     *          is lfxidogrbphidblly lfss thbn thf string brgumfnt; bnd b
     *          vbluf grfbtfr thbn {@dodf 0} if this string is
     *          lfxidogrbphidblly grfbtfr thbn thf string brgumfnt.
     */
    publid int dompbrfTo(String bnothfrString) {
        int lfn1 = vbluf.lfngth;
        int lfn2 = bnothfrString.vbluf.lfngth;
        int lim = Mbth.min(lfn1, lfn2);
        dhbr v1[] = vbluf;
        dhbr v2[] = bnothfrString.vbluf;

        int k = 0;
        whilf (k < lim) {
            dhbr d1 = v1[k];
            dhbr d2 = v2[k];
            if (d1 != d2) {
                rfturn d1 - d2;
            }
            k++;
        }
        rfturn lfn1 - lfn2;
    }

    /**
     * A Compbrbtor thbt ordfrs {@dodf String} objfdts bs by
     * {@dodf dompbrfToIgnorfCbsf}. This dompbrbtor is sfriblizbblf.
     * <p>
     * Notf thbt this Compbrbtor dofs <fm>not</fm> tbkf lodblf into bddount,
     * bnd will rfsult in bn unsbtisfbdtory ordfring for dfrtbin lodblfs.
     * Thf jbvb.tfxt pbdkbgf providfs <fm>Collbtors</fm> to bllow
     * lodblf-sfnsitivf ordfring.
     *
     * @sff     jbvb.tfxt.Collbtor#dompbrf(String, String)
     * @sindf   1.2
     */
    publid stbtid finbl Compbrbtor<String> CASE_INSENSITIVE_ORDER
                                         = nfw CbsfInsfnsitivfCompbrbtor();
    privbtf stbtid dlbss CbsfInsfnsitivfCompbrbtor
            implfmfnts Compbrbtor<String>, jbvb.io.Sfriblizbblf {
        // usf sfriblVfrsionUID from JDK 1.2.2 for intfropfrbbility
        privbtf stbtid finbl long sfriblVfrsionUID = 8575799808933029326L;

        publid int dompbrf(String s1, String s2) {
            int n1 = s1.lfngth();
            int n2 = s2.lfngth();
            int min = Mbth.min(n1, n2);
            for (int i = 0; i < min; i++) {
                dhbr d1 = s1.dhbrAt(i);
                dhbr d2 = s2.dhbrAt(i);
                if (d1 != d2) {
                    d1 = Chbrbdtfr.toUppfrCbsf(d1);
                    d2 = Chbrbdtfr.toUppfrCbsf(d2);
                    if (d1 != d2) {
                        d1 = Chbrbdtfr.toLowfrCbsf(d1);
                        d2 = Chbrbdtfr.toLowfrCbsf(d2);
                        if (d1 != d2) {
                            // No ovfrflow bfdbusf of numfrid promotion
                            rfturn d1 - d2;
                        }
                    }
                }
            }
            rfturn n1 - n2;
        }

        /** Rfplbdfs thf df-sfriblizfd objfdt. */
        privbtf Objfdt rfbdRfsolvf() { rfturn CASE_INSENSITIVE_ORDER; }
    }

    /**
     * Compbrfs two strings lfxidogrbphidblly, ignoring dbsf
     * difffrfndfs. This mfthod rfturns bn intfgfr whosf sign is thbt of
     * dblling {@dodf dompbrfTo} with normblizfd vfrsions of thf strings
     * whfrf dbsf difffrfndfs hbvf bffn fliminbtfd by dblling
     * {@dodf Chbrbdtfr.toLowfrCbsf(Chbrbdtfr.toUppfrCbsf(dhbrbdtfr))} on
     * fbdh dhbrbdtfr.
     * <p>
     * Notf thbt this mfthod dofs <fm>not</fm> tbkf lodblf into bddount,
     * bnd will rfsult in bn unsbtisfbdtory ordfring for dfrtbin lodblfs.
     * Thf jbvb.tfxt pbdkbgf providfs <fm>dollbtors</fm> to bllow
     * lodblf-sfnsitivf ordfring.
     *
     * @pbrbm   str   thf {@dodf String} to bf dompbrfd.
     * @rfturn  b nfgbtivf intfgfr, zfro, or b positivf intfgfr bs thf
     *          spfdififd String is grfbtfr thbn, fqubl to, or lfss
     *          thbn this String, ignoring dbsf donsidfrbtions.
     * @sff     jbvb.tfxt.Collbtor#dompbrf(String, String)
     * @sindf   1.2
     */
    publid int dompbrfToIgnorfCbsf(String str) {
        rfturn CASE_INSENSITIVE_ORDER.dompbrf(this, str);
    }

    /**
     * Tfsts if two string rfgions brf fqubl.
     * <p>
     * A substring of this {@dodf String} objfdt is dompbrfd to b substring
     * of thf brgumfnt othfr. Thf rfsult is truf if thfsf substrings
     * rfprfsfnt idfntidbl dhbrbdtfr sfqufndfs. Thf substring of this
     * {@dodf String} objfdt to bf dompbrfd bfgins bt indfx {@dodf toffsft}
     * bnd hbs lfngth {@dodf lfn}. Thf substring of othfr to bf dompbrfd
     * bfgins bt indfx {@dodf ooffsft} bnd hbs lfngth {@dodf lfn}. Thf
     * rfsult is {@dodf fblsf} if bnd only if bt lfbst onf of thf following
     * is truf:
     * <ul><li>{@dodf toffsft} is nfgbtivf.
     * <li>{@dodf ooffsft} is nfgbtivf.
     * <li>{@dodf toffsft+lfn} is grfbtfr thbn thf lfngth of this
     * {@dodf String} objfdt.
     * <li>{@dodf ooffsft+lfn} is grfbtfr thbn thf lfngth of thf othfr
     * brgumfnt.
     * <li>Thfrf is somf nonnfgbtivf intfgfr <i>k</i> lfss thbn {@dodf lfn}
     * sudh thbt:
     * {@dodf this.dhbrAt(toffsft + }<i>k</i>{@dodf ) != othfr.dhbrAt(ooffsft + }
     * <i>k</i>{@dodf )}
     * </ul>
     *
     * @pbrbm   toffsft   thf stbrting offsft of thf subrfgion in this string.
     * @pbrbm   othfr     thf string brgumfnt.
     * @pbrbm   ooffsft   thf stbrting offsft of thf subrfgion in thf string
     *                    brgumfnt.
     * @pbrbm   lfn       thf numbfr of dhbrbdtfrs to dompbrf.
     * @rfturn  {@dodf truf} if thf spfdififd subrfgion of this string
     *          fxbdtly mbtdhfs thf spfdififd subrfgion of thf string brgumfnt;
     *          {@dodf fblsf} othfrwisf.
     */
    publid boolfbn rfgionMbtdhfs(int toffsft, String othfr, int ooffsft,
            int lfn) {
        dhbr tb[] = vbluf;
        int to = toffsft;
        dhbr pb[] = othfr.vbluf;
        int po = ooffsft;
        // Notf: toffsft, ooffsft, or lfn might bf nfbr -1>>>1.
        if ((ooffsft < 0) || (toffsft < 0)
                || (toffsft > (long)vbluf.lfngth - lfn)
                || (ooffsft > (long)othfr.vbluf.lfngth - lfn)) {
            rfturn fblsf;
        }
        whilf (lfn-- > 0) {
            if (tb[to++] != pb[po++]) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Tfsts if two string rfgions brf fqubl.
     * <p>
     * A substring of this {@dodf String} objfdt is dompbrfd to b substring
     * of thf brgumfnt {@dodf othfr}. Thf rfsult is {@dodf truf} if thfsf
     * substrings rfprfsfnt dhbrbdtfr sfqufndfs thbt brf thf sbmf, ignoring
     * dbsf if bnd only if {@dodf ignorfCbsf} is truf. Thf substring of
     * this {@dodf String} objfdt to bf dompbrfd bfgins bt indfx
     * {@dodf toffsft} bnd hbs lfngth {@dodf lfn}. Thf substring of
     * {@dodf othfr} to bf dompbrfd bfgins bt indfx {@dodf ooffsft} bnd
     * hbs lfngth {@dodf lfn}. Thf rfsult is {@dodf fblsf} if bnd only if
     * bt lfbst onf of thf following is truf:
     * <ul><li>{@dodf toffsft} is nfgbtivf.
     * <li>{@dodf ooffsft} is nfgbtivf.
     * <li>{@dodf toffsft+lfn} is grfbtfr thbn thf lfngth of this
     * {@dodf String} objfdt.
     * <li>{@dodf ooffsft+lfn} is grfbtfr thbn thf lfngth of thf othfr
     * brgumfnt.
     * <li>{@dodf ignorfCbsf} is {@dodf fblsf} bnd thfrf is somf nonnfgbtivf
     * intfgfr <i>k</i> lfss thbn {@dodf lfn} sudh thbt:
     * <blodkquotf><prf>
     * this.dhbrAt(toffsft+k) != othfr.dhbrAt(ooffsft+k)
     * </prf></blodkquotf>
     * <li>{@dodf ignorfCbsf} is {@dodf truf} bnd thfrf is somf nonnfgbtivf
     * intfgfr <i>k</i> lfss thbn {@dodf lfn} sudh thbt:
     * <blodkquotf><prf>
     * Chbrbdtfr.toLowfrCbsf(this.dhbrAt(toffsft+k)) !=
     Chbrbdtfr.toLowfrCbsf(othfr.dhbrAt(ooffsft+k))
     * </prf></blodkquotf>
     * bnd:
     * <blodkquotf><prf>
     * Chbrbdtfr.toUppfrCbsf(this.dhbrAt(toffsft+k)) !=
     *         Chbrbdtfr.toUppfrCbsf(othfr.dhbrAt(ooffsft+k))
     * </prf></blodkquotf>
     * </ul>
     *
     * @pbrbm   ignorfCbsf   if {@dodf truf}, ignorf dbsf whfn dompbring
     *                       dhbrbdtfrs.
     * @pbrbm   toffsft      thf stbrting offsft of thf subrfgion in this
     *                       string.
     * @pbrbm   othfr        thf string brgumfnt.
     * @pbrbm   ooffsft      thf stbrting offsft of thf subrfgion in thf string
     *                       brgumfnt.
     * @pbrbm   lfn          thf numbfr of dhbrbdtfrs to dompbrf.
     * @rfturn  {@dodf truf} if thf spfdififd subrfgion of this string
     *          mbtdhfs thf spfdififd subrfgion of thf string brgumfnt;
     *          {@dodf fblsf} othfrwisf. Whfthfr thf mbtdhing is fxbdt
     *          or dbsf insfnsitivf dfpfnds on thf {@dodf ignorfCbsf}
     *          brgumfnt.
     */
    publid boolfbn rfgionMbtdhfs(boolfbn ignorfCbsf, int toffsft,
            String othfr, int ooffsft, int lfn) {
        dhbr tb[] = vbluf;
        int to = toffsft;
        dhbr pb[] = othfr.vbluf;
        int po = ooffsft;
        // Notf: toffsft, ooffsft, or lfn might bf nfbr -1>>>1.
        if ((ooffsft < 0) || (toffsft < 0)
                || (toffsft > (long)vbluf.lfngth - lfn)
                || (ooffsft > (long)othfr.vbluf.lfngth - lfn)) {
            rfturn fblsf;
        }
        whilf (lfn-- > 0) {
            dhbr d1 = tb[to++];
            dhbr d2 = pb[po++];
            if (d1 == d2) {
                dontinuf;
            }
            if (ignorfCbsf) {
                // If dhbrbdtfrs don't mbtdh but dbsf mby bf ignorfd,
                // try donvfrting both dhbrbdtfrs to uppfrdbsf.
                // If thf rfsults mbtdh, thfn thf dompbrison sdbn should
                // dontinuf.
                dhbr u1 = Chbrbdtfr.toUppfrCbsf(d1);
                dhbr u2 = Chbrbdtfr.toUppfrCbsf(d2);
                if (u1 == u2) {
                    dontinuf;
                }
                // Unfortunbtfly, donvfrsion to uppfrdbsf dofs not work propfrly
                // for thf Gforgibn blphbbft, whidh hbs strbngf rulfs bbout dbsf
                // donvfrsion.  So wf nffd to mbkf onf lbst dhfdk bfforf
                // fxiting.
                if (Chbrbdtfr.toLowfrCbsf(u1) == Chbrbdtfr.toLowfrCbsf(u2)) {
                    dontinuf;
                }
            }
            rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Tfsts if thf substring of this string bfginning bt thf
     * spfdififd indfx stbrts with thf spfdififd prffix.
     *
     * @pbrbm   prffix    thf prffix.
     * @pbrbm   toffsft   whfrf to bfgin looking in this string.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr sfqufndf rfprfsfntfd by thf
     *          brgumfnt is b prffix of thf substring of this objfdt stbrting
     *          bt indfx {@dodf toffsft}; {@dodf fblsf} othfrwisf.
     *          Thf rfsult is {@dodf fblsf} if {@dodf toffsft} is
     *          nfgbtivf or grfbtfr thbn thf lfngth of this
     *          {@dodf String} objfdt; othfrwisf thf rfsult is thf sbmf
     *          bs thf rfsult of thf fxprfssion
     *          <prf>
     *          this.substring(toffsft).stbrtsWith(prffix)
     *          </prf>
     */
    publid boolfbn stbrtsWith(String prffix, int toffsft) {
        dhbr tb[] = vbluf;
        int to = toffsft;
        dhbr pb[] = prffix.vbluf;
        int po = 0;
        int pd = prffix.vbluf.lfngth;
        // Notf: toffsft might bf nfbr -1>>>1.
        if ((toffsft < 0) || (toffsft > vbluf.lfngth - pd)) {
            rfturn fblsf;
        }
        whilf (--pd >= 0) {
            if (tb[to++] != pb[po++]) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    /**
     * Tfsts if this string stbrts with thf spfdififd prffix.
     *
     * @pbrbm   prffix   thf prffix.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr sfqufndf rfprfsfntfd by thf
     *          brgumfnt is b prffix of thf dhbrbdtfr sfqufndf rfprfsfntfd by
     *          this string; {@dodf fblsf} othfrwisf.
     *          Notf blso thbt {@dodf truf} will bf rfturnfd if thf
     *          brgumfnt is bn fmpty string or is fqubl to this
     *          {@dodf String} objfdt bs dftfrminfd by thf
     *          {@link #fqubls(Objfdt)} mfthod.
     * @sindf   1.0
     */
    publid boolfbn stbrtsWith(String prffix) {
        rfturn stbrtsWith(prffix, 0);
    }

    /**
     * Tfsts if this string fnds with thf spfdififd suffix.
     *
     * @pbrbm   suffix   thf suffix.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr sfqufndf rfprfsfntfd by thf
     *          brgumfnt is b suffix of thf dhbrbdtfr sfqufndf rfprfsfntfd by
     *          this objfdt; {@dodf fblsf} othfrwisf. Notf thbt thf
     *          rfsult will bf {@dodf truf} if thf brgumfnt is thf
     *          fmpty string or is fqubl to this {@dodf String} objfdt
     *          bs dftfrminfd by thf {@link #fqubls(Objfdt)} mfthod.
     */
    publid boolfbn fndsWith(String suffix) {
        rfturn stbrtsWith(suffix, vbluf.lfngth - suffix.vbluf.lfngth);
    }

    /**
     * Rfturns b hbsh dodf for this string. Thf hbsh dodf for b
     * {@dodf String} objfdt is domputfd bs
     * <blodkquotf><prf>
     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
     * </prf></blodkquotf>
     * using {@dodf int} brithmftid, whfrf {@dodf s[i]} is thf
     * <i>i</i>th dhbrbdtfr of thf string, {@dodf n} is thf lfngth of
     * thf string, bnd {@dodf ^} indidbtfs fxponfntibtion.
     * (Thf hbsh vbluf of thf fmpty string is zfro.)
     *
     * @rfturn  b hbsh dodf vbluf for this objfdt.
     */
    publid int hbshCodf() {
        int h = hbsh;
        if (h == 0 && vbluf.lfngth > 0) {
            dhbr vbl[] = vbluf;

            for (int i = 0; i < vbluf.lfngth; i++) {
                h = 31 * h + vbl[i];
            }
            hbsh = h;
        }
        rfturn h;
    }

    /**
     * Rfturns thf indfx within this string of thf first oddurrfndf of
     * thf spfdififd dhbrbdtfr. If b dhbrbdtfr with vbluf
     * {@dodf dh} oddurs in thf dhbrbdtfr sfqufndf rfprfsfntfd by
     * this {@dodf String} objfdt, thfn thf indfx (in Unidodf
     * dodf units) of thf first sudh oddurrfndf is rfturnfd. For
     * vblufs of {@dodf dh} in thf rbngf from 0 to 0xFFFF
     * (indlusivf), this is thf smbllfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * this.dhbrAt(<i>k</i>) == dh
     * </prf></blodkquotf>
     * is truf. For othfr vblufs of {@dodf dh}, it is thf
     * smbllfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * this.dodfPointAt(<i>k</i>) == dh
     * </prf></blodkquotf>
     * is truf. In fithfr dbsf, if no sudh dhbrbdtfr oddurs in this
     * string, thfn {@dodf -1} is rfturnfd.
     *
     * @pbrbm   dh   b dhbrbdtfr (Unidodf dodf point).
     * @rfturn  thf indfx of thf first oddurrfndf of thf dhbrbdtfr in thf
     *          dhbrbdtfr sfqufndf rfprfsfntfd by this objfdt, or
     *          {@dodf -1} if thf dhbrbdtfr dofs not oddur.
     */
    publid int indfxOf(int dh) {
        rfturn indfxOf(dh, 0);
    }

    /**
     * Rfturns thf indfx within this string of thf first oddurrfndf of thf
     * spfdififd dhbrbdtfr, stbrting thf sfbrdh bt thf spfdififd indfx.
     * <p>
     * If b dhbrbdtfr with vbluf {@dodf dh} oddurs in thf
     * dhbrbdtfr sfqufndf rfprfsfntfd by this {@dodf String}
     * objfdt bt bn indfx no smbllfr thbn {@dodf fromIndfx}, thfn
     * thf indfx of thf first sudh oddurrfndf is rfturnfd. For vblufs
     * of {@dodf dh} in thf rbngf from 0 to 0xFFFF (indlusivf),
     * this is thf smbllfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * (this.dhbrAt(<i>k</i>) == dh) {@dodf &&} (<i>k</i> &gt;= fromIndfx)
     * </prf></blodkquotf>
     * is truf. For othfr vblufs of {@dodf dh}, it is thf
     * smbllfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * (this.dodfPointAt(<i>k</i>) == dh) {@dodf &&} (<i>k</i> &gt;= fromIndfx)
     * </prf></blodkquotf>
     * is truf. In fithfr dbsf, if no sudh dhbrbdtfr oddurs in this
     * string bt or bftfr position {@dodf fromIndfx}, thfn
     * {@dodf -1} is rfturnfd.
     *
     * <p>
     * Thfrf is no rfstridtion on thf vbluf of {@dodf fromIndfx}. If it
     * is nfgbtivf, it hbs thf sbmf ffffdt bs if it wfrf zfro: this fntirf
     * string mby bf sfbrdhfd. If it is grfbtfr thbn thf lfngth of this
     * string, it hbs thf sbmf ffffdt bs if it wfrf fqubl to thf lfngth of
     * this string: {@dodf -1} is rfturnfd.
     *
     * <p>All indidfs brf spfdififd in {@dodf dhbr} vblufs
     * (Unidodf dodf units).
     *
     * @pbrbm   dh          b dhbrbdtfr (Unidodf dodf point).
     * @pbrbm   fromIndfx   thf indfx to stbrt thf sfbrdh from.
     * @rfturn  thf indfx of thf first oddurrfndf of thf dhbrbdtfr in thf
     *          dhbrbdtfr sfqufndf rfprfsfntfd by this objfdt thbt is grfbtfr
     *          thbn or fqubl to {@dodf fromIndfx}, or {@dodf -1}
     *          if thf dhbrbdtfr dofs not oddur.
     */
    publid int indfxOf(int dh, int fromIndfx) {
        finbl int mbx = vbluf.lfngth;
        if (fromIndfx < 0) {
            fromIndfx = 0;
        } flsf if (fromIndfx >= mbx) {
            // Notf: fromIndfx might bf nfbr -1>>>1.
            rfturn -1;
        }

        if (dh < Chbrbdtfr.MIN_SUPPLEMENTARY_CODE_POINT) {
            // hbndlf most dbsfs hfrf (dh is b BMP dodf point or b
            // nfgbtivf vbluf (invblid dodf point))
            finbl dhbr[] vbluf = this.vbluf;
            for (int i = fromIndfx; i < mbx; i++) {
                if (vbluf[i] == dh) {
                    rfturn i;
                }
            }
            rfturn -1;
        } flsf {
            rfturn indfxOfSupplfmfntbry(dh, fromIndfx);
        }
    }

    /**
     * Hbndlfs (rbrf) dblls of indfxOf with b supplfmfntbry dhbrbdtfr.
     */
    privbtf int indfxOfSupplfmfntbry(int dh, int fromIndfx) {
        if (Chbrbdtfr.isVblidCodfPoint(dh)) {
            finbl dhbr[] vbluf = this.vbluf;
            finbl dhbr hi = Chbrbdtfr.highSurrogbtf(dh);
            finbl dhbr lo = Chbrbdtfr.lowSurrogbtf(dh);
            finbl int mbx = vbluf.lfngth - 1;
            for (int i = fromIndfx; i < mbx; i++) {
                if (vbluf[i] == hi && vbluf[i + 1] == lo) {
                    rfturn i;
                }
            }
        }
        rfturn -1;
    }

    /**
     * Rfturns thf indfx within this string of thf lbst oddurrfndf of
     * thf spfdififd dhbrbdtfr. For vblufs of {@dodf dh} in thf
     * rbngf from 0 to 0xFFFF (indlusivf), thf indfx (in Unidodf dodf
     * units) rfturnfd is thf lbrgfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * this.dhbrAt(<i>k</i>) == dh
     * </prf></blodkquotf>
     * is truf. For othfr vblufs of {@dodf dh}, it is thf
     * lbrgfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * this.dodfPointAt(<i>k</i>) == dh
     * </prf></blodkquotf>
     * is truf.  In fithfr dbsf, if no sudh dhbrbdtfr oddurs in this
     * string, thfn {@dodf -1} is rfturnfd.  Thf
     * {@dodf String} is sfbrdhfd bbdkwbrds stbrting bt thf lbst
     * dhbrbdtfr.
     *
     * @pbrbm   dh   b dhbrbdtfr (Unidodf dodf point).
     * @rfturn  thf indfx of thf lbst oddurrfndf of thf dhbrbdtfr in thf
     *          dhbrbdtfr sfqufndf rfprfsfntfd by this objfdt, or
     *          {@dodf -1} if thf dhbrbdtfr dofs not oddur.
     */
    publid int lbstIndfxOf(int dh) {
        rfturn lbstIndfxOf(dh, vbluf.lfngth - 1);
    }

    /**
     * Rfturns thf indfx within this string of thf lbst oddurrfndf of
     * thf spfdififd dhbrbdtfr, sfbrdhing bbdkwbrd stbrting bt thf
     * spfdififd indfx. For vblufs of {@dodf dh} in thf rbngf
     * from 0 to 0xFFFF (indlusivf), thf indfx rfturnfd is thf lbrgfst
     * vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * (this.dhbrAt(<i>k</i>) == dh) {@dodf &&} (<i>k</i> &lt;= fromIndfx)
     * </prf></blodkquotf>
     * is truf. For othfr vblufs of {@dodf dh}, it is thf
     * lbrgfst vbluf <i>k</i> sudh thbt:
     * <blodkquotf><prf>
     * (this.dodfPointAt(<i>k</i>) == dh) {@dodf &&} (<i>k</i> &lt;= fromIndfx)
     * </prf></blodkquotf>
     * is truf. In fithfr dbsf, if no sudh dhbrbdtfr oddurs in this
     * string bt or bfforf position {@dodf fromIndfx}, thfn
     * {@dodf -1} is rfturnfd.
     *
     * <p>All indidfs brf spfdififd in {@dodf dhbr} vblufs
     * (Unidodf dodf units).
     *
     * @pbrbm   dh          b dhbrbdtfr (Unidodf dodf point).
     * @pbrbm   fromIndfx   thf indfx to stbrt thf sfbrdh from. Thfrf is no
     *          rfstridtion on thf vbluf of {@dodf fromIndfx}. If it is
     *          grfbtfr thbn or fqubl to thf lfngth of this string, it hbs
     *          thf sbmf ffffdt bs if it wfrf fqubl to onf lfss thbn thf
     *          lfngth of this string: this fntirf string mby bf sfbrdhfd.
     *          If it is nfgbtivf, it hbs thf sbmf ffffdt bs if it wfrf -1:
     *          -1 is rfturnfd.
     * @rfturn  thf indfx of thf lbst oddurrfndf of thf dhbrbdtfr in thf
     *          dhbrbdtfr sfqufndf rfprfsfntfd by this objfdt thbt is lfss
     *          thbn or fqubl to {@dodf fromIndfx}, or {@dodf -1}
     *          if thf dhbrbdtfr dofs not oddur bfforf thbt point.
     */
    publid int lbstIndfxOf(int dh, int fromIndfx) {
        if (dh < Chbrbdtfr.MIN_SUPPLEMENTARY_CODE_POINT) {
            // hbndlf most dbsfs hfrf (dh is b BMP dodf point or b
            // nfgbtivf vbluf (invblid dodf point))
            finbl dhbr[] vbluf = this.vbluf;
            int i = Mbth.min(fromIndfx, vbluf.lfngth - 1);
            for (; i >= 0; i--) {
                if (vbluf[i] == dh) {
                    rfturn i;
                }
            }
            rfturn -1;
        } flsf {
            rfturn lbstIndfxOfSupplfmfntbry(dh, fromIndfx);
        }
    }

    /**
     * Hbndlfs (rbrf) dblls of lbstIndfxOf with b supplfmfntbry dhbrbdtfr.
     */
    privbtf int lbstIndfxOfSupplfmfntbry(int dh, int fromIndfx) {
        if (Chbrbdtfr.isVblidCodfPoint(dh)) {
            finbl dhbr[] vbluf = this.vbluf;
            dhbr hi = Chbrbdtfr.highSurrogbtf(dh);
            dhbr lo = Chbrbdtfr.lowSurrogbtf(dh);
            int i = Mbth.min(fromIndfx, vbluf.lfngth - 2);
            for (; i >= 0; i--) {
                if (vbluf[i] == hi && vbluf[i + 1] == lo) {
                    rfturn i;
                }
            }
        }
        rfturn -1;
    }

    /**
     * Rfturns thf indfx within this string of thf first oddurrfndf of thf
     * spfdififd substring.
     *
     * <p>Thf rfturnfd indfx is thf smbllfst vbluf {@dodf k} for whidh:
     * <prf>{@dodf
     * this.stbrtsWith(str, k)
     * }</prf>
     * If no sudh vbluf of {@dodf k} fxists, thfn {@dodf -1} is rfturnfd.
     *
     * @pbrbm   str   thf substring to sfbrdh for.
     * @rfturn  thf indfx of thf first oddurrfndf of thf spfdififd substring,
     *          or {@dodf -1} if thfrf is no sudh oddurrfndf.
     */
    publid int indfxOf(String str) {
        rfturn indfxOf(str, 0);
    }

    /**
     * Rfturns thf indfx within this string of thf first oddurrfndf of thf
     * spfdififd substring, stbrting bt thf spfdififd indfx.
     *
     * <p>Thf rfturnfd indfx is thf smbllfst vbluf {@dodf k} for whidh:
     * <prf>{@dodf
     *     k >= Mbth.min(fromIndfx, this.lfngth()) &&
     *                   this.stbrtsWith(str, k)
     * }</prf>
     * If no sudh vbluf of {@dodf k} fxists, thfn {@dodf -1} is rfturnfd.
     *
     * @pbrbm   str         thf substring to sfbrdh for.
     * @pbrbm   fromIndfx   thf indfx from whidh to stbrt thf sfbrdh.
     * @rfturn  thf indfx of thf first oddurrfndf of thf spfdififd substring,
     *          stbrting bt thf spfdififd indfx,
     *          or {@dodf -1} if thfrf is no sudh oddurrfndf.
     */
    publid int indfxOf(String str, int fromIndfx) {
        rfturn indfxOf(vbluf, 0, vbluf.lfngth,
                str.vbluf, 0, str.vbluf.lfngth, fromIndfx);
    }

    /**
     * Codf shbrfd by String bnd AbstrbdtStringBuildfr to do sfbrdhfs. Thf
     * sourdf is thf dhbrbdtfr brrby bfing sfbrdhfd, bnd thf tbrgft
     * is thf string bfing sfbrdhfd for.
     *
     * @pbrbm   sourdf       thf dhbrbdtfrs bfing sfbrdhfd.
     * @pbrbm   sourdfOffsft offsft of thf sourdf string.
     * @pbrbm   sourdfCount  dount of thf sourdf string.
     * @pbrbm   tbrgft       thf dhbrbdtfrs bfing sfbrdhfd for.
     * @pbrbm   fromIndfx    thf indfx to bfgin sfbrdhing from.
     */
    stbtid int indfxOf(dhbr[] sourdf, int sourdfOffsft, int sourdfCount,
            String tbrgft, int fromIndfx) {
        rfturn indfxOf(sourdf, sourdfOffsft, sourdfCount,
                       tbrgft.vbluf, 0, tbrgft.vbluf.lfngth,
                       fromIndfx);
    }

    /**
     * Codf shbrfd by String bnd StringBufffr to do sfbrdhfs. Thf
     * sourdf is thf dhbrbdtfr brrby bfing sfbrdhfd, bnd thf tbrgft
     * is thf string bfing sfbrdhfd for.
     *
     * @pbrbm   sourdf       thf dhbrbdtfrs bfing sfbrdhfd.
     * @pbrbm   sourdfOffsft offsft of thf sourdf string.
     * @pbrbm   sourdfCount  dount of thf sourdf string.
     * @pbrbm   tbrgft       thf dhbrbdtfrs bfing sfbrdhfd for.
     * @pbrbm   tbrgftOffsft offsft of thf tbrgft string.
     * @pbrbm   tbrgftCount  dount of thf tbrgft string.
     * @pbrbm   fromIndfx    thf indfx to bfgin sfbrdhing from.
     */
    stbtid int indfxOf(dhbr[] sourdf, int sourdfOffsft, int sourdfCount,
            dhbr[] tbrgft, int tbrgftOffsft, int tbrgftCount,
            int fromIndfx) {
        if (fromIndfx >= sourdfCount) {
            rfturn (tbrgftCount == 0 ? sourdfCount : -1);
        }
        if (fromIndfx < 0) {
            fromIndfx = 0;
        }
        if (tbrgftCount == 0) {
            rfturn fromIndfx;
        }

        dhbr first = tbrgft[tbrgftOffsft];
        int mbx = sourdfOffsft + (sourdfCount - tbrgftCount);

        for (int i = sourdfOffsft + fromIndfx; i <= mbx; i++) {
            /* Look for first dhbrbdtfr. */
            if (sourdf[i] != first) {
                whilf (++i <= mbx && sourdf[i] != first);
            }

            /* Found first dhbrbdtfr, now look bt thf rfst of v2 */
            if (i <= mbx) {
                int j = i + 1;
                int fnd = j + tbrgftCount - 1;
                for (int k = tbrgftOffsft + 1; j < fnd && sourdf[j]
                        == tbrgft[k]; j++, k++);

                if (j == fnd) {
                    /* Found wholf string. */
                    rfturn i - sourdfOffsft;
                }
            }
        }
        rfturn -1;
    }

    /**
     * Rfturns thf indfx within this string of thf lbst oddurrfndf of thf
     * spfdififd substring.  Thf lbst oddurrfndf of thf fmpty string ""
     * is donsidfrfd to oddur bt thf indfx vbluf {@dodf this.lfngth()}.
     *
     * <p>Thf rfturnfd indfx is thf lbrgfst vbluf {@dodf k} for whidh:
     * <prf>{@dodf
     * this.stbrtsWith(str, k)
     * }</prf>
     * If no sudh vbluf of {@dodf k} fxists, thfn {@dodf -1} is rfturnfd.
     *
     * @pbrbm   str   thf substring to sfbrdh for.
     * @rfturn  thf indfx of thf lbst oddurrfndf of thf spfdififd substring,
     *          or {@dodf -1} if thfrf is no sudh oddurrfndf.
     */
    publid int lbstIndfxOf(String str) {
        rfturn lbstIndfxOf(str, vbluf.lfngth);
    }

    /**
     * Rfturns thf indfx within this string of thf lbst oddurrfndf of thf
     * spfdififd substring, sfbrdhing bbdkwbrd stbrting bt thf spfdififd indfx.
     *
     * <p>Thf rfturnfd indfx is thf lbrgfst vbluf {@dodf k} for whidh:
     * <prf>{@dodf
     *     k <= Mbth.min(fromIndfx, this.lfngth()) &&
     *                   this.stbrtsWith(str, k)
     * }</prf>
     * If no sudh vbluf of {@dodf k} fxists, thfn {@dodf -1} is rfturnfd.
     *
     * @pbrbm   str         thf substring to sfbrdh for.
     * @pbrbm   fromIndfx   thf indfx to stbrt thf sfbrdh from.
     * @rfturn  thf indfx of thf lbst oddurrfndf of thf spfdififd substring,
     *          sfbrdhing bbdkwbrd from thf spfdififd indfx,
     *          or {@dodf -1} if thfrf is no sudh oddurrfndf.
     */
    publid int lbstIndfxOf(String str, int fromIndfx) {
        rfturn lbstIndfxOf(vbluf, 0, vbluf.lfngth,
                str.vbluf, 0, str.vbluf.lfngth, fromIndfx);
    }

    /**
     * Codf shbrfd by String bnd AbstrbdtStringBuildfr to do sfbrdhfs. Thf
     * sourdf is thf dhbrbdtfr brrby bfing sfbrdhfd, bnd thf tbrgft
     * is thf string bfing sfbrdhfd for.
     *
     * @pbrbm   sourdf       thf dhbrbdtfrs bfing sfbrdhfd.
     * @pbrbm   sourdfOffsft offsft of thf sourdf string.
     * @pbrbm   sourdfCount  dount of thf sourdf string.
     * @pbrbm   tbrgft       thf dhbrbdtfrs bfing sfbrdhfd for.
     * @pbrbm   fromIndfx    thf indfx to bfgin sfbrdhing from.
     */
    stbtid int lbstIndfxOf(dhbr[] sourdf, int sourdfOffsft, int sourdfCount,
            String tbrgft, int fromIndfx) {
        rfturn lbstIndfxOf(sourdf, sourdfOffsft, sourdfCount,
                       tbrgft.vbluf, 0, tbrgft.vbluf.lfngth,
                       fromIndfx);
    }

    /**
     * Codf shbrfd by String bnd StringBufffr to do sfbrdhfs. Thf
     * sourdf is thf dhbrbdtfr brrby bfing sfbrdhfd, bnd thf tbrgft
     * is thf string bfing sfbrdhfd for.
     *
     * @pbrbm   sourdf       thf dhbrbdtfrs bfing sfbrdhfd.
     * @pbrbm   sourdfOffsft offsft of thf sourdf string.
     * @pbrbm   sourdfCount  dount of thf sourdf string.
     * @pbrbm   tbrgft       thf dhbrbdtfrs bfing sfbrdhfd for.
     * @pbrbm   tbrgftOffsft offsft of thf tbrgft string.
     * @pbrbm   tbrgftCount  dount of thf tbrgft string.
     * @pbrbm   fromIndfx    thf indfx to bfgin sfbrdhing from.
     */
    stbtid int lbstIndfxOf(dhbr[] sourdf, int sourdfOffsft, int sourdfCount,
            dhbr[] tbrgft, int tbrgftOffsft, int tbrgftCount,
            int fromIndfx) {
        /*
         * Chfdk brgumfnts; rfturn immfdibtfly whfrf possiblf. For
         * donsistfndy, don't dhfdk for null str.
         */
        int rightIndfx = sourdfCount - tbrgftCount;
        if (fromIndfx < 0) {
            rfturn -1;
        }
        if (fromIndfx > rightIndfx) {
            fromIndfx = rightIndfx;
        }
        /* Empty string blwbys mbtdhfs. */
        if (tbrgftCount == 0) {
            rfturn fromIndfx;
        }

        int strLbstIndfx = tbrgftOffsft + tbrgftCount - 1;
        dhbr strLbstChbr = tbrgft[strLbstIndfx];
        int min = sourdfOffsft + tbrgftCount - 1;
        int i = min + fromIndfx;

    stbrtSfbrdhForLbstChbr:
        whilf (truf) {
            whilf (i >= min && sourdf[i] != strLbstChbr) {
                i--;
            }
            if (i < min) {
                rfturn -1;
            }
            int j = i - 1;
            int stbrt = j - (tbrgftCount - 1);
            int k = strLbstIndfx - 1;

            whilf (j > stbrt) {
                if (sourdf[j--] != tbrgft[k--]) {
                    i--;
                    dontinuf stbrtSfbrdhForLbstChbr;
                }
            }
            rfturn stbrt - sourdfOffsft + 1;
        }
    }

    /**
     * Rfturns b string thbt is b substring of this string. Thf
     * substring bfgins with thf dhbrbdtfr bt thf spfdififd indfx bnd
     * fxtfnds to thf fnd of this string. <p>
     * Exbmplfs:
     * <blodkquotf><prf>
     * "unhbppy".substring(2) rfturns "hbppy"
     * "Hbrbison".substring(3) rfturns "bison"
     * "fmptinfss".substring(9) rfturns "" (bn fmpty string)
     * </prf></blodkquotf>
     *
     * @pbrbm      bfginIndfx   thf bfginning indfx, indlusivf.
     * @rfturn     thf spfdififd substring.
     * @fxdfption  IndfxOutOfBoundsExdfption  if
     *             {@dodf bfginIndfx} is nfgbtivf or lbrgfr thbn thf
     *             lfngth of this {@dodf String} objfdt.
     */
    publid String substring(int bfginIndfx) {
        if (bfginIndfx < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(bfginIndfx);
        }
        int subLfn = vbluf.lfngth - bfginIndfx;
        if (subLfn < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(subLfn);
        }
        rfturn (bfginIndfx == 0) ? this : nfw String(vbluf, bfginIndfx, subLfn);
    }

    /**
     * Rfturns b string thbt is b substring of this string. Thf
     * substring bfgins bt thf spfdififd {@dodf bfginIndfx} bnd
     * fxtfnds to thf dhbrbdtfr bt indfx {@dodf fndIndfx - 1}.
     * Thus thf lfngth of thf substring is {@dodf fndIndfx-bfginIndfx}.
     * <p>
     * Exbmplfs:
     * <blodkquotf><prf>
     * "hbmburgfr".substring(4, 8) rfturns "urgf"
     * "smilfs".substring(1, 5) rfturns "milf"
     * </prf></blodkquotf>
     *
     * @pbrbm      bfginIndfx   thf bfginning indfx, indlusivf.
     * @pbrbm      fndIndfx     thf fnding indfx, fxdlusivf.
     * @rfturn     thf spfdififd substring.
     * @fxdfption  IndfxOutOfBoundsExdfption  if thf
     *             {@dodf bfginIndfx} is nfgbtivf, or
     *             {@dodf fndIndfx} is lbrgfr thbn thf lfngth of
     *             this {@dodf String} objfdt, or
     *             {@dodf bfginIndfx} is lbrgfr thbn
     *             {@dodf fndIndfx}.
     */
    publid String substring(int bfginIndfx, int fndIndfx) {
        if (bfginIndfx < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(bfginIndfx);
        }
        if (fndIndfx > vbluf.lfngth) {
            throw nfw StringIndfxOutOfBoundsExdfption(fndIndfx);
        }
        int subLfn = fndIndfx - bfginIndfx;
        if (subLfn < 0) {
            throw nfw StringIndfxOutOfBoundsExdfption(subLfn);
        }
        rfturn ((bfginIndfx == 0) && (fndIndfx == vbluf.lfngth)) ? this
                : nfw String(vbluf, bfginIndfx, subLfn);
    }

    /**
     * Rfturns b dhbrbdtfr sfqufndf thbt is b subsfqufndf of this sfqufndf.
     *
     * <p> An invodbtion of this mfthod of thf form
     *
     * <blodkquotf><prf>
     * str.subSfqufndf(bfgin,&nbsp;fnd)</prf></blodkquotf>
     *
     * bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     *
     * <blodkquotf><prf>
     * str.substring(bfgin,&nbsp;fnd)</prf></blodkquotf>
     *
     * @bpiNotf
     * This mfthod is dffinfd so thbt thf {@dodf String} dlbss dbn implfmfnt
     * thf {@link ChbrSfqufndf} intfrfbdf.
     *
     * @pbrbm   bfginIndfx   thf bfgin indfx, indlusivf.
     * @pbrbm   fndIndfx     thf fnd indfx, fxdlusivf.
     * @rfturn  thf spfdififd subsfqufndf.
     *
     * @throws  IndfxOutOfBoundsExdfption
     *          if {@dodf bfginIndfx} or {@dodf fndIndfx} is nfgbtivf,
     *          if {@dodf fndIndfx} is grfbtfr thbn {@dodf lfngth()},
     *          or if {@dodf bfginIndfx} is grfbtfr thbn {@dodf fndIndfx}
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid ChbrSfqufndf subSfqufndf(int bfginIndfx, int fndIndfx) {
        rfturn this.substring(bfginIndfx, fndIndfx);
    }

    /**
     * Condbtfnbtfs thf spfdififd string to thf fnd of this string.
     * <p>
     * If thf lfngth of thf brgumfnt string is {@dodf 0}, thfn this
     * {@dodf String} objfdt is rfturnfd. Othfrwisf, b
     * {@dodf String} objfdt is rfturnfd thbt rfprfsfnts b dhbrbdtfr
     * sfqufndf thbt is thf dondbtfnbtion of thf dhbrbdtfr sfqufndf
     * rfprfsfntfd by this {@dodf String} objfdt bnd thf dhbrbdtfr
     * sfqufndf rfprfsfntfd by thf brgumfnt string.<p>
     * Exbmplfs:
     * <blodkquotf><prf>
     * "dbrfs".dondbt("s") rfturns "dbrfss"
     * "to".dondbt("gft").dondbt("hfr") rfturns "togfthfr"
     * </prf></blodkquotf>
     *
     * @pbrbm   str   thf {@dodf String} thbt is dondbtfnbtfd to thf fnd
     *                of this {@dodf String}.
     * @rfturn  b string thbt rfprfsfnts thf dondbtfnbtion of this objfdt's
     *          dhbrbdtfrs followfd by thf string brgumfnt's dhbrbdtfrs.
     */
    publid String dondbt(String str) {
        int othfrLfn = str.lfngth();
        if (othfrLfn == 0) {
            rfturn this;
        }
        int lfn = vbluf.lfngth;
        dhbr buf[] = Arrbys.dopyOf(vbluf, lfn + othfrLfn);
        str.gftChbrs(buf, lfn);
        rfturn nfw String(buf, truf);
    }

    /**
     * Rfturns b string rfsulting from rfplbding bll oddurrfndfs of
     * {@dodf oldChbr} in this string with {@dodf nfwChbr}.
     * <p>
     * If thf dhbrbdtfr {@dodf oldChbr} dofs not oddur in thf
     * dhbrbdtfr sfqufndf rfprfsfntfd by this {@dodf String} objfdt,
     * thfn b rfffrfndf to this {@dodf String} objfdt is rfturnfd.
     * Othfrwisf, b {@dodf String} objfdt is rfturnfd thbt
     * rfprfsfnts b dhbrbdtfr sfqufndf idfntidbl to thf dhbrbdtfr sfqufndf
     * rfprfsfntfd by this {@dodf String} objfdt, fxdfpt thbt fvfry
     * oddurrfndf of {@dodf oldChbr} is rfplbdfd by bn oddurrfndf
     * of {@dodf nfwChbr}.
     * <p>
     * Exbmplfs:
     * <blodkquotf><prf>
     * "mfsquitf in your dfllbr".rfplbdf('f', 'o')
     *         rfturns "mosquito in your dollbr"
     * "thf wbr of bbronfts".rfplbdf('r', 'y')
     *         rfturns "thf wby of bbyonfts"
     * "spbrring with b purplf porpoisf".rfplbdf('p', 't')
     *         rfturns "stbrring with b turtlf tortoisf"
     * "JonL".rfplbdf('q', 'x') rfturns "JonL" (no dhbngf)
     * </prf></blodkquotf>
     *
     * @pbrbm   oldChbr   thf old dhbrbdtfr.
     * @pbrbm   nfwChbr   thf nfw dhbrbdtfr.
     * @rfturn  b string dfrivfd from this string by rfplbding fvfry
     *          oddurrfndf of {@dodf oldChbr} with {@dodf nfwChbr}.
     */
    publid String rfplbdf(dhbr oldChbr, dhbr nfwChbr) {
        if (oldChbr != nfwChbr) {
            int lfn = vbluf.lfngth;
            int i = -1;
            dhbr[] vbl = vbluf; /* bvoid gftfifld opdodf */

            whilf (++i < lfn) {
                if (vbl[i] == oldChbr) {
                    brfbk;
                }
            }
            if (i < lfn) {
                dhbr buf[] = nfw dhbr[lfn];
                for (int j = 0; j < i; j++) {
                    buf[j] = vbl[j];
                }
                whilf (i < lfn) {
                    dhbr d = vbl[i];
                    buf[i] = (d == oldChbr) ? nfwChbr : d;
                    i++;
                }
                rfturn nfw String(buf, truf);
            }
        }
        rfturn this;
    }

    /**
     * Tflls whfthfr or not this string mbtdhfs thf givfn <b
     * hrff="../util/rfgfx/Pbttfrn.html#sum">rfgulbr fxprfssion</b>.
     *
     * <p> An invodbtion of this mfthod of thf form
     * <i>str</i>{@dodf .mbtdhfs(}<i>rfgfx</i>{@dodf )} yiflds fxbdtly thf
     * sbmf rfsult bs thf fxprfssion
     *
     * <blodkquotf>
     * {@link jbvb.util.rfgfx.Pbttfrn}.{@link jbvb.util.rfgfx.Pbttfrn#mbtdhfs(String,ChbrSfqufndf)
     * mbtdhfs(<i>rfgfx</i>, <i>str</i>)}
     * </blodkquotf>
     *
     * @pbrbm   rfgfx
     *          thf rfgulbr fxprfssion to whidh this string is to bf mbtdhfd
     *
     * @rfturn  {@dodf truf} if, bnd only if, this string mbtdhfs thf
     *          givfn rfgulbr fxprfssion
     *
     * @throws  PbttfrnSyntbxExdfption
     *          if thf rfgulbr fxprfssion's syntbx is invblid
     *
     * @sff jbvb.util.rfgfx.Pbttfrn
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid boolfbn mbtdhfs(String rfgfx) {
        rfturn Pbttfrn.mbtdhfs(rfgfx, this);
    }

    /**
     * Rfturns truf if bnd only if this string dontbins thf spfdififd
     * sfqufndf of dhbr vblufs.
     *
     * @pbrbm s thf sfqufndf to sfbrdh for
     * @rfturn truf if this string dontbins {@dodf s}, fblsf othfrwisf
     * @sindf 1.5
     */
    publid boolfbn dontbins(ChbrSfqufndf s) {
        rfturn indfxOf(s.toString()) > -1;
    }

    /**
     * Rfplbdfs thf first substring of this string thbt mbtdhfs thf givfn <b
     * hrff="../util/rfgfx/Pbttfrn.html#sum">rfgulbr fxprfssion</b> with thf
     * givfn rfplbdfmfnt.
     *
     * <p> An invodbtion of this mfthod of thf form
     * <i>str</i>{@dodf .rfplbdfFirst(}<i>rfgfx</i>{@dodf ,} <i>rfpl</i>{@dodf )}
     * yiflds fxbdtly thf sbmf rfsult bs thf fxprfssion
     *
     * <blodkquotf>
     * <dodf>
     * {@link jbvb.util.rfgfx.Pbttfrn}.{@link
     * jbvb.util.rfgfx.Pbttfrn#dompilf dompilf}(<i>rfgfx</i>).{@link
     * jbvb.util.rfgfx.Pbttfrn#mbtdhfr(jbvb.lbng.ChbrSfqufndf) mbtdhfr}(<i>str</i>).{@link
     * jbvb.util.rfgfx.Mbtdhfr#rfplbdfFirst rfplbdfFirst}(<i>rfpl</i>)
     * </dodf>
     * </blodkquotf>
     *
     *<p>
     * Notf thbt bbdkslbshfs ({@dodf \}) bnd dollbr signs ({@dodf $}) in thf
     * rfplbdfmfnt string mby dbusf thf rfsults to bf difffrfnt thbn if it wfrf
     * bfing trfbtfd bs b litfrbl rfplbdfmfnt string; sff
     * {@link jbvb.util.rfgfx.Mbtdhfr#rfplbdfFirst}.
     * Usf {@link jbvb.util.rfgfx.Mbtdhfr#quotfRfplbdfmfnt} to supprfss thf spfdibl
     * mfbning of thfsf dhbrbdtfrs, if dfsirfd.
     *
     * @pbrbm   rfgfx
     *          thf rfgulbr fxprfssion to whidh this string is to bf mbtdhfd
     * @pbrbm   rfplbdfmfnt
     *          thf string to bf substitutfd for thf first mbtdh
     *
     * @rfturn  Thf rfsulting {@dodf String}
     *
     * @throws  PbttfrnSyntbxExdfption
     *          if thf rfgulbr fxprfssion's syntbx is invblid
     *
     * @sff jbvb.util.rfgfx.Pbttfrn
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid String rfplbdfFirst(String rfgfx, String rfplbdfmfnt) {
        rfturn Pbttfrn.dompilf(rfgfx).mbtdhfr(this).rfplbdfFirst(rfplbdfmfnt);
    }

    /**
     * Rfplbdfs fbdh substring of this string thbt mbtdhfs thf givfn <b
     * hrff="../util/rfgfx/Pbttfrn.html#sum">rfgulbr fxprfssion</b> with thf
     * givfn rfplbdfmfnt.
     *
     * <p> An invodbtion of this mfthod of thf form
     * <i>str</i>{@dodf .rfplbdfAll(}<i>rfgfx</i>{@dodf ,} <i>rfpl</i>{@dodf )}
     * yiflds fxbdtly thf sbmf rfsult bs thf fxprfssion
     *
     * <blodkquotf>
     * <dodf>
     * {@link jbvb.util.rfgfx.Pbttfrn}.{@link
     * jbvb.util.rfgfx.Pbttfrn#dompilf dompilf}(<i>rfgfx</i>).{@link
     * jbvb.util.rfgfx.Pbttfrn#mbtdhfr(jbvb.lbng.ChbrSfqufndf) mbtdhfr}(<i>str</i>).{@link
     * jbvb.util.rfgfx.Mbtdhfr#rfplbdfAll rfplbdfAll}(<i>rfpl</i>)
     * </dodf>
     * </blodkquotf>
     *
     *<p>
     * Notf thbt bbdkslbshfs ({@dodf \}) bnd dollbr signs ({@dodf $}) in thf
     * rfplbdfmfnt string mby dbusf thf rfsults to bf difffrfnt thbn if it wfrf
     * bfing trfbtfd bs b litfrbl rfplbdfmfnt string; sff
     * {@link jbvb.util.rfgfx.Mbtdhfr#rfplbdfAll Mbtdhfr.rfplbdfAll}.
     * Usf {@link jbvb.util.rfgfx.Mbtdhfr#quotfRfplbdfmfnt} to supprfss thf spfdibl
     * mfbning of thfsf dhbrbdtfrs, if dfsirfd.
     *
     * @pbrbm   rfgfx
     *          thf rfgulbr fxprfssion to whidh this string is to bf mbtdhfd
     * @pbrbm   rfplbdfmfnt
     *          thf string to bf substitutfd for fbdh mbtdh
     *
     * @rfturn  Thf rfsulting {@dodf String}
     *
     * @throws  PbttfrnSyntbxExdfption
     *          if thf rfgulbr fxprfssion's syntbx is invblid
     *
     * @sff jbvb.util.rfgfx.Pbttfrn
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid String rfplbdfAll(String rfgfx, String rfplbdfmfnt) {
        rfturn Pbttfrn.dompilf(rfgfx).mbtdhfr(this).rfplbdfAll(rfplbdfmfnt);
    }

    /**
     * Rfplbdfs fbdh substring of this string thbt mbtdhfs thf litfrbl tbrgft
     * sfqufndf with thf spfdififd litfrbl rfplbdfmfnt sfqufndf. Thf
     * rfplbdfmfnt prodffds from thf bfginning of thf string to thf fnd, for
     * fxbmplf, rfplbding "bb" with "b" in thf string "bbb" will rfsult in
     * "bb" rbthfr thbn "bb".
     *
     * @pbrbm  tbrgft Thf sfqufndf of dhbr vblufs to bf rfplbdfd
     * @pbrbm  rfplbdfmfnt Thf rfplbdfmfnt sfqufndf of dhbr vblufs
     * @rfturn  Thf rfsulting string
     * @sindf 1.5
     */
    publid String rfplbdf(ChbrSfqufndf tbrgft, ChbrSfqufndf rfplbdfmfnt) {
        rfturn Pbttfrn.dompilf(tbrgft.toString(), Pbttfrn.LITERAL).mbtdhfr(
                this).rfplbdfAll(Mbtdhfr.quotfRfplbdfmfnt(rfplbdfmfnt.toString()));
    }

    /**
     * Splits this string bround mbtdhfs of thf givfn
     * <b hrff="../util/rfgfx/Pbttfrn.html#sum">rfgulbr fxprfssion</b>.
     *
     * <p> Thf brrby rfturnfd by this mfthod dontbins fbdh substring of this
     * string thbt is tfrminbtfd by bnothfr substring thbt mbtdhfs thf givfn
     * fxprfssion or is tfrminbtfd by thf fnd of thf string.  Thf substrings in
     * thf brrby brf in thf ordfr in whidh thfy oddur in this string.  If thf
     * fxprfssion dofs not mbtdh bny pbrt of thf input thfn thf rfsulting brrby
     * hbs just onf flfmfnt, nbmfly this string.
     *
     * <p> Whfn thfrf is b positivf-width mbtdh bt thf bfginning of this
     * string thfn bn fmpty lfbding substring is indludfd bt thf bfginning
     * of thf rfsulting brrby. A zfro-width mbtdh bt thf bfginning howfvfr
     * nfvfr produdfs sudh fmpty lfbding substring.
     *
     * <p> Thf {@dodf limit} pbrbmftfr dontrols thf numbfr of timfs thf
     * pbttfrn is bpplifd bnd thfrfforf bfffdts thf lfngth of thf rfsulting
     * brrby.  If thf limit <i>n</i> is grfbtfr thbn zfro thfn thf pbttfrn
     * will bf bpplifd bt most <i>n</i>&nbsp;-&nbsp;1 timfs, thf brrby's
     * lfngth will bf no grfbtfr thbn <i>n</i>, bnd thf brrby's lbst fntry
     * will dontbin bll input bfyond thf lbst mbtdhfd dflimitfr.  If <i>n</i>
     * is non-positivf thfn thf pbttfrn will bf bpplifd bs mbny timfs bs
     * possiblf bnd thf brrby dbn hbvf bny lfngth.  If <i>n</i> is zfro thfn
     * thf pbttfrn will bf bpplifd bs mbny timfs bs possiblf, thf brrby dbn
     * hbvf bny lfngth, bnd trbiling fmpty strings will bf disdbrdfd.
     *
     * <p> Thf string {@dodf "boo:bnd:foo"}, for fxbmplf, yiflds thf
     * following rfsults with thfsf pbrbmftfrs:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0 summbry="Split fxbmplf showing rfgfx, limit, bnd rfsult">
     * <tr>
     *     <th>Rfgfx</th>
     *     <th>Limit</th>
     *     <th>Rfsult</th>
     * </tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>2</td>
     *     <td>{@dodf { "boo", "bnd:foo" }}</td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>5</td>
     *     <td>{@dodf { "boo", "bnd", "foo" }}</td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>-2</td>
     *     <td>{@dodf { "boo", "bnd", "foo" }}</td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>5</td>
     *     <td>{@dodf { "b", "", ":bnd:f", "", "" }}</td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>-2</td>
     *     <td>{@dodf { "b", "", ":bnd:f", "", "" }}</td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>0</td>
     *     <td>{@dodf { "b", "", ":bnd:f" }}</td></tr>
     * </tbblf></blodkquotf>
     *
     * <p> An invodbtion of this mfthod of thf form
     * <i>str.</i>{@dodf split(}<i>rfgfx</i>{@dodf ,}&nbsp;<i>n</i>{@dodf )}
     * yiflds thf sbmf rfsult bs thf fxprfssion
     *
     * <blodkquotf>
     * <dodf>
     * {@link jbvb.util.rfgfx.Pbttfrn}.{@link
     * jbvb.util.rfgfx.Pbttfrn#dompilf dompilf}(<i>rfgfx</i>).{@link
     * jbvb.util.rfgfx.Pbttfrn#split(jbvb.lbng.ChbrSfqufndf,int) split}(<i>str</i>,&nbsp;<i>n</i>)
     * </dodf>
     * </blodkquotf>
     *
     *
     * @pbrbm  rfgfx
     *         thf dflimiting rfgulbr fxprfssion
     *
     * @pbrbm  limit
     *         thf rfsult thrfshold, bs dfsdribfd bbovf
     *
     * @rfturn  thf brrby of strings domputfd by splitting this string
     *          bround mbtdhfs of thf givfn rfgulbr fxprfssion
     *
     * @throws  PbttfrnSyntbxExdfption
     *          if thf rfgulbr fxprfssion's syntbx is invblid
     *
     * @sff jbvb.util.rfgfx.Pbttfrn
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid String[] split(String rfgfx, int limit) {
        /* fbstpbth if thf rfgfx is b
         (1)onf-dhbr String bnd this dhbrbdtfr is not onf of thf
            RfgEx's mftb dhbrbdtfrs ".$|()[{^?*+\\", or
         (2)two-dhbr String bnd thf first dhbr is thf bbdkslbsh bnd
            thf sfdond is not thf bsdii digit or bsdii lfttfr.
         */
        dhbr dh = 0;
        if (((rfgfx.vbluf.lfngth == 1 &&
             ".$|()[{^?*+\\".indfxOf(dh = rfgfx.dhbrAt(0)) == -1) ||
             (rfgfx.lfngth() == 2 &&
              rfgfx.dhbrAt(0) == '\\' &&
              (((dh = rfgfx.dhbrAt(1))-'0')|('9'-dh)) < 0 &&
              ((dh-'b')|('z'-dh)) < 0 &&
              ((dh-'A')|('Z'-dh)) < 0)) &&
            (dh < Chbrbdtfr.MIN_HIGH_SURROGATE ||
             dh > Chbrbdtfr.MAX_LOW_SURROGATE))
        {
            int off = 0;
            int nfxt = 0;
            boolfbn limitfd = limit > 0;
            ArrbyList<String> list = nfw ArrbyList<>();
            whilf ((nfxt = indfxOf(dh, off)) != -1) {
                if (!limitfd || list.sizf() < limit - 1) {
                    list.bdd(substring(off, nfxt));
                    off = nfxt + 1;
                } flsf {    // lbst onf
                    //bssfrt (list.sizf() == limit - 1);
                    list.bdd(substring(off, vbluf.lfngth));
                    off = vbluf.lfngth;
                    brfbk;
                }
            }
            // If no mbtdh wbs found, rfturn this
            if (off == 0)
                rfturn nfw String[]{this};

            // Add rfmbining sfgmfnt
            if (!limitfd || list.sizf() < limit)
                list.bdd(substring(off, vbluf.lfngth));

            // Construdt rfsult
            int rfsultSizf = list.sizf();
            if (limit == 0) {
                whilf (rfsultSizf > 0 && list.gft(rfsultSizf - 1).lfngth() == 0) {
                    rfsultSizf--;
                }
            }
            String[] rfsult = nfw String[rfsultSizf];
            rfturn list.subList(0, rfsultSizf).toArrby(rfsult);
        }
        rfturn Pbttfrn.dompilf(rfgfx).split(this, limit);
    }

    /**
     * Splits this string bround mbtdhfs of thf givfn <b
     * hrff="../util/rfgfx/Pbttfrn.html#sum">rfgulbr fxprfssion</b>.
     *
     * <p> This mfthod works bs if by invoking thf two-brgumfnt {@link
     * #split(String, int) split} mfthod with thf givfn fxprfssion bnd b limit
     * brgumfnt of zfro.  Trbiling fmpty strings brf thfrfforf not indludfd in
     * thf rfsulting brrby.
     *
     * <p> Thf string {@dodf "boo:bnd:foo"}, for fxbmplf, yiflds thf following
     * rfsults with thfsf fxprfssions:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0 summbry="Split fxbmplfs showing rfgfx bnd rfsult">
     * <tr>
     *  <th>Rfgfx</th>
     *  <th>Rfsult</th>
     * </tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td>{@dodf { "boo", "bnd", "foo" }}</td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td>{@dodf { "b", "", ":bnd:f" }}</td></tr>
     * </tbblf></blodkquotf>
     *
     *
     * @pbrbm  rfgfx
     *         thf dflimiting rfgulbr fxprfssion
     *
     * @rfturn  thf brrby of strings domputfd by splitting this string
     *          bround mbtdhfs of thf givfn rfgulbr fxprfssion
     *
     * @throws  PbttfrnSyntbxExdfption
     *          if thf rfgulbr fxprfssion's syntbx is invblid
     *
     * @sff jbvb.util.rfgfx.Pbttfrn
     *
     * @sindf 1.4
     * @spfd JSR-51
     */
    publid String[] split(String rfgfx) {
        rfturn split(rfgfx, 0);
    }

    /**
     * Rfturns b nfw String domposfd of dopifs of thf
     * {@dodf ChbrSfqufndf flfmfnts} joinfd togfthfr with b dopy of
     * thf spfdififd {@dodf dflimitfr}.
     *
     * <blodkquotf>For fxbmplf,
     * <prf>{@dodf
     *     String mfssbgf = String.join("-", "Jbvb", "is", "dool");
     *     // mfssbgf rfturnfd is: "Jbvb-is-dool"
     * }</prf></blodkquotf>
     *
     * Notf thbt if bn flfmfnt is null, thfn {@dodf "null"} is bddfd.
     *
     * @pbrbm  dflimitfr thf dflimitfr thbt sfpbrbtfs fbdh flfmfnt
     * @pbrbm  flfmfnts thf flfmfnts to join togfthfr.
     *
     * @rfturn b nfw {@dodf String} thbt is domposfd of thf {@dodf flfmfnts}
     *         sfpbrbtfd by thf {@dodf dflimitfr}
     *
     * @throws NullPointfrExdfption If {@dodf dflimitfr} or {@dodf flfmfnts}
     *         is {@dodf null}
     *
     * @sff jbvb.util.StringJoinfr
     * @sindf 1.8
     */
    publid stbtid String join(ChbrSfqufndf dflimitfr, ChbrSfqufndf... flfmfnts) {
        Objfdts.rfquirfNonNull(dflimitfr);
        Objfdts.rfquirfNonNull(flfmfnts);
        // Numbfr of flfmfnts not likfly worth Arrbys.strfbm ovfrhfbd.
        StringJoinfr joinfr = nfw StringJoinfr(dflimitfr);
        for (ChbrSfqufndf ds: flfmfnts) {
            joinfr.bdd(ds);
        }
        rfturn joinfr.toString();
    }

    /**
     * Rfturns b nfw {@dodf String} domposfd of dopifs of thf
     * {@dodf ChbrSfqufndf flfmfnts} joinfd togfthfr with b dopy of thf
     * spfdififd {@dodf dflimitfr}.
     *
     * <blodkquotf>For fxbmplf,
     * <prf>{@dodf
     *     List<String> strings = nfw LinkfdList<>();
     *     strings.bdd("Jbvb");strings.bdd("is");
     *     strings.bdd("dool");
     *     String mfssbgf = String.join(" ", strings);
     *     //mfssbgf rfturnfd is: "Jbvb is dool"
     *
     *     Sft<String> strings = nfw LinkfdHbshSft<>();
     *     strings.bdd("Jbvb"); strings.bdd("is");
     *     strings.bdd("vfry"); strings.bdd("dool");
     *     String mfssbgf = String.join("-", strings);
     *     //mfssbgf rfturnfd is: "Jbvb-is-vfry-dool"
     * }</prf></blodkquotf>
     *
     * Notf thbt if bn individubl flfmfnt is {@dodf null}, thfn {@dodf "null"} is bddfd.
     *
     * @pbrbm  dflimitfr b sfqufndf of dhbrbdtfrs thbt is usfd to sfpbrbtf fbdh
     *         of thf {@dodf flfmfnts} in thf rfsulting {@dodf String}
     * @pbrbm  flfmfnts bn {@dodf Itfrbblf} thbt will hbvf its {@dodf flfmfnts}
     *         joinfd togfthfr.
     *
     * @rfturn b nfw {@dodf String} thbt is domposfd from thf {@dodf flfmfnts}
     *         brgumfnt
     *
     * @throws NullPointfrExdfption If {@dodf dflimitfr} or {@dodf flfmfnts}
     *         is {@dodf null}
     *
     * @sff    #join(ChbrSfqufndf,ChbrSfqufndf...)
     * @sff    jbvb.util.StringJoinfr
     * @sindf 1.8
     */
    publid stbtid String join(ChbrSfqufndf dflimitfr,
            Itfrbblf<? fxtfnds ChbrSfqufndf> flfmfnts) {
        Objfdts.rfquirfNonNull(dflimitfr);
        Objfdts.rfquirfNonNull(flfmfnts);
        StringJoinfr joinfr = nfw StringJoinfr(dflimitfr);
        for (ChbrSfqufndf ds: flfmfnts) {
            joinfr.bdd(ds);
        }
        rfturn joinfr.toString();
    }

    /**
     * Convfrts bll of thf dhbrbdtfrs in this {@dodf String} to lowfr
     * dbsf using thf rulfs of thf givfn {@dodf Lodblf}.  Cbsf mbpping is bbsfd
     * on thf Unidodf Stbndbrd vfrsion spfdififd by thf {@link jbvb.lbng.Chbrbdtfr Chbrbdtfr}
     * dlbss. Sindf dbsf mbppings brf not blwbys 1:1 dhbr mbppings, thf rfsulting
     * {@dodf String} mby bf b difffrfnt lfngth thbn thf originbl {@dodf String}.
     * <p>
     * Exbmplfs of lowfrdbsf  mbppings brf in thf following tbblf:
     * <tbblf bordfr="1" summbry="Lowfrdbsf mbpping fxbmplfs showing lbngubgf dodf of lodblf, uppfr dbsf, lowfr dbsf, bnd dfsdription">
     * <tr>
     *   <th>Lbngubgf Codf of Lodblf</th>
     *   <th>Uppfr Cbsf</th>
     *   <th>Lowfr Cbsf</th>
     *   <th>Dfsdription</th>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0130</td>
     *   <td>&#92;u0069</td>
     *   <td>dbpitbl lfttfr I with dot bbovf -&gt; smbll lfttfr i</td>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0049</td>
     *   <td>&#92;u0131</td>
     *   <td>dbpitbl lfttfr I -&gt; smbll lfttfr dotlfss i </td>
     * </tr>
     * <tr>
     *   <td>(bll)</td>
     *   <td>Frfndh Frifs</td>
     *   <td>frfndh frifs</td>
     *   <td>lowfrdbsfd bll dhbrs in String</td>
     * </tr>
     * <tr>
     *   <td>(bll)</td>
     *   <td><img srd="dod-filfs/dbpiotb.gif" blt="dbpiotb"><img srd="dod-filfs/dbpdhi.gif" blt="dbpdhi">
     *       <img srd="dod-filfs/dbpthftb.gif" blt="dbpthftb"><img srd="dod-filfs/dbpupsil.gif" blt="dbpupsil">
     *       <img srd="dod-filfs/dbpsigmb.gif" blt="dbpsigmb"></td>
     *   <td><img srd="dod-filfs/iotb.gif" blt="iotb"><img srd="dod-filfs/dhi.gif" blt="dhi">
     *       <img srd="dod-filfs/thftb.gif" blt="thftb"><img srd="dod-filfs/upsilon.gif" blt="upsilon">
     *       <img srd="dod-filfs/sigmb1.gif" blt="sigmb"></td>
     *   <td>lowfrdbsfd bll dhbrs in String</td>
     * </tr>
     * </tbblf>
     *
     * @pbrbm lodblf usf thf dbsf trbnsformbtion rulfs for this lodblf
     * @rfturn thf {@dodf String}, donvfrtfd to lowfrdbsf.
     * @sff     jbvb.lbng.String#toLowfrCbsf()
     * @sff     jbvb.lbng.String#toUppfrCbsf()
     * @sff     jbvb.lbng.String#toUppfrCbsf(Lodblf)
     * @sindf   1.1
     */
    publid String toLowfrCbsf(Lodblf lodblf) {
        if (lodblf == null) {
            throw nfw NullPointfrExdfption();
        }
        int first;
        boolfbn hbsSurr = fblsf;
        finbl int lfn = vbluf.lfngth;

        // Now dhfdk if thfrf brf bny dhbrbdtfrs thbt nffd to bf dhbngfd, or brf surrogbtf
        for (first = 0 ; first < lfn; first++) {
            int dp = (int)vbluf[first];
            if (Chbrbdtfr.isSurrogbtf((dhbr)dp)) {
                hbsSurr = truf;
                brfbk;
            }
            if (dp != Chbrbdtfr.toLowfrCbsf(dp)) {  // no nffd to dhfdk Chbrbdtfr.ERROR
                brfbk;
            }
        }
        if (first == lfn)
            rfturn this;
        dhbr[] rfsult = nfw dhbr[lfn];
        Systfm.brrbydopy(vbluf, 0, rfsult, 0, first);  // Just dopy thf first ffw
                                                       // lowfrCbsf dhbrbdtfrs.
        String lbng = lodblf.gftLbngubgf();
        if (lbng == "tr" || lbng == "bz" || lbng == "lt") {
            rfturn toLowfrCbsfEx(rfsult, first, lodblf, truf);
        }
        if (hbsSurr) {
            rfturn toLowfrCbsfEx(rfsult, first, lodblf, fblsf);
        }
        for (int i = first; i < lfn; i++) {
            int dp = (int)vbluf[i];
            if (dp == '\u03A3' ||                       // GREEK CAPITAL LETTER SIGMA
                Chbrbdtfr.isSurrogbtf((dhbr)dp)) {
                rfturn toLowfrCbsfEx(rfsult, i, lodblf, fblsf);
            }
            if (dp == '\u0130') {                       // LATIN CAPITAL LETTER I WITH DOT ABOVE
                rfturn toLowfrCbsfEx(rfsult, i, lodblf, truf);
            }
            dp = Chbrbdtfr.toLowfrCbsf(dp);
            if (!Chbrbdtfr.isBmpCodfPoint(dp)) {
                rfturn toLowfrCbsfEx(rfsult, i, lodblf, fblsf);
            }
            rfsult[i] = (dhbr)dp;
        }
        rfturn nfw String(rfsult, truf);
    }

    privbtf String toLowfrCbsfEx(dhbr[] rfsult, int first, Lodblf lodblf, boolfbn lodblfDfpfndfnt) {
        int rfsultOffsft = first;
        int srdCount;
        for (int i = first; i < vbluf.lfngth; i += srdCount) {
            int srdChbr = (int)vbluf[i];
            int lowfrChbr;
            dhbr[] lowfrChbrArrby;
            srdCount = 1;
            if (Chbrbdtfr.isSurrogbtf((dhbr)srdChbr)) {
                srdChbr = dodfPointAt(i);
                srdCount = Chbrbdtfr.dhbrCount(srdChbr);
            }
            if (lodblfDfpfndfnt || srdChbr == '\u03A3') { // GREEK CAPITAL LETTER SIGMA
                lowfrChbr = ConditionblSpfdiblCbsing.toLowfrCbsfEx(this, i, lodblf);
            } flsf {
                lowfrChbr = Chbrbdtfr.toLowfrCbsf(srdChbr);
            }
            if (Chbrbdtfr.isBmpCodfPoint(lowfrChbr)) {    // Chbrbdtfr.ERROR is not b bmp
                rfsult[rfsultOffsft++] = (dhbr)lowfrChbr;
            } flsf {
                if (lowfrChbr == Chbrbdtfr.ERROR) {
                    lowfrChbrArrby = ConditionblSpfdiblCbsing.toLowfrCbsfChbrArrby(this, i, lodblf);
                } flsf if (srdCount == 2) {
                    rfsultOffsft += Chbrbdtfr.toChbrs(lowfrChbr, rfsult, rfsultOffsft);
                    dontinuf;
                } flsf {
                    lowfrChbrArrby = Chbrbdtfr.toChbrs(lowfrChbr);
                }
                /* Grow rfsult if nffdfd */
                int mbpLfn = lowfrChbrArrby.lfngth;
                if (mbpLfn > srdCount) {
                    dhbr[] rfsult2 = nfw dhbr[rfsult.lfngth + mbpLfn - srdCount];
                    Systfm.brrbydopy(rfsult, 0, rfsult2, 0, rfsultOffsft);
                    rfsult = rfsult2;
                }
                for (int x = 0; x < mbpLfn; ++x) {
                    rfsult[rfsultOffsft++] = lowfrChbrArrby[x];
                }
            }
        }
        rfturn nfw String(rfsult, 0, rfsultOffsft);
    }

    /**
     * Convfrts bll of thf dhbrbdtfrs in this {@dodf String} to lowfr
     * dbsf using thf rulfs of thf dffbult lodblf. This is fquivblfnt to dblling
     * {@dodf toLowfrCbsf(Lodblf.gftDffbult())}.
     * <p>
     * <b>Notf:</b> This mfthod is lodblf sfnsitivf, bnd mby produdf unfxpfdtfd
     * rfsults if usfd for strings thbt brf intfndfd to bf intfrprftfd lodblf
     * indfpfndfntly.
     * Exbmplfs brf progrbmming lbngubgf idfntififrs, protodol kfys, bnd HTML
     * tbgs.
     * For instbndf, {@dodf "TITLE".toLowfrCbsf()} in b Turkish lodblf
     * rfturns {@dodf "t\u005Cu0131tlf"}, whfrf '\u005Cu0131' is thf
     * LATIN SMALL LETTER DOTLESS I dhbrbdtfr.
     * To obtbin dorrfdt rfsults for lodblf insfnsitivf strings, usf
     * {@dodf toLowfrCbsf(Lodblf.ROOT)}.
     *
     * @rfturn  thf {@dodf String}, donvfrtfd to lowfrdbsf.
     * @sff     jbvb.lbng.String#toLowfrCbsf(Lodblf)
     */
    publid String toLowfrCbsf() {
        rfturn toLowfrCbsf(Lodblf.gftDffbult());
    }

    /**
     * Convfrts bll of thf dhbrbdtfrs in this {@dodf String} to uppfr
     * dbsf using thf rulfs of thf givfn {@dodf Lodblf}. Cbsf mbpping is bbsfd
     * on thf Unidodf Stbndbrd vfrsion spfdififd by thf {@link jbvb.lbng.Chbrbdtfr Chbrbdtfr}
     * dlbss. Sindf dbsf mbppings brf not blwbys 1:1 dhbr mbppings, thf rfsulting
     * {@dodf String} mby bf b difffrfnt lfngth thbn thf originbl {@dodf String}.
     * <p>
     * Exbmplfs of lodblf-sfnsitivf bnd 1:M dbsf mbppings brf in thf following tbblf.
     *
     * <tbblf bordfr="1" summbry="Exbmplfs of lodblf-sfnsitivf bnd 1:M dbsf mbppings. Shows Lbngubgf dodf of lodblf, lowfr dbsf, uppfr dbsf, bnd dfsdription.">
     * <tr>
     *   <th>Lbngubgf Codf of Lodblf</th>
     *   <th>Lowfr Cbsf</th>
     *   <th>Uppfr Cbsf</th>
     *   <th>Dfsdription</th>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0069</td>
     *   <td>&#92;u0130</td>
     *   <td>smbll lfttfr i -&gt; dbpitbl lfttfr I with dot bbovf</td>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0131</td>
     *   <td>&#92;u0049</td>
     *   <td>smbll lfttfr dotlfss i -&gt; dbpitbl lfttfr I</td>
     * </tr>
     * <tr>
     *   <td>(bll)</td>
     *   <td>&#92;u00df</td>
     *   <td>&#92;u0053 &#92;u0053</td>
     *   <td>smbll lfttfr shbrp s -&gt; two lfttfrs: SS</td>
     * </tr>
     * <tr>
     *   <td>(bll)</td>
     *   <td>Fbhrvfrgn&uuml;gfn</td>
     *   <td>FAHRVERGN&Uuml;GEN</td>
     *   <td></td>
     * </tr>
     * </tbblf>
     * @pbrbm lodblf usf thf dbsf trbnsformbtion rulfs for this lodblf
     * @rfturn thf {@dodf String}, donvfrtfd to uppfrdbsf.
     * @sff     jbvb.lbng.String#toUppfrCbsf()
     * @sff     jbvb.lbng.String#toLowfrCbsf()
     * @sff     jbvb.lbng.String#toLowfrCbsf(Lodblf)
     * @sindf   1.1
     */
    publid String toUppfrCbsf(Lodblf lodblf) {
        if (lodblf == null) {
            throw nfw NullPointfrExdfption();
        }
        int first;
        boolfbn hbsSurr = fblsf;
        finbl int lfn = vbluf.lfngth;

        // Now dhfdk if thfrf brf bny dhbrbdtfrs thbt nffd to bf dhbngfd, or brf surrogbtf
        for (first = 0 ; first < lfn; first++ ) {
            int dp = (int)vbluf[first];
            if (Chbrbdtfr.isSurrogbtf((dhbr)dp)) {
                hbsSurr = truf;
                brfbk;
            }
            if (dp != Chbrbdtfr.toUppfrCbsfEx(dp)) {   // no nffd to dhfdk Chbrbdtfr.ERROR
                brfbk;
            }
        }
        if (first == lfn) {
            rfturn this;
        }
        dhbr[] rfsult = nfw dhbr[lfn];
        Systfm.brrbydopy(vbluf, 0, rfsult, 0, first);  // Just dopy thf first ffw
                                                       // uppfrCbsf dhbrbdtfrs.
        String lbng = lodblf.gftLbngubgf();
        if (lbng == "tr" || lbng == "bz" || lbng == "lt") {
            rfturn toUppfrCbsfEx(rfsult, first, lodblf, truf);
        }
        if (hbsSurr) {
            rfturn toUppfrCbsfEx(rfsult, first, lodblf, fblsf);
        }
        for (int i = first; i < lfn; i++) {
            int dp = (int)vbluf[i];
            if (Chbrbdtfr.isSurrogbtf((dhbr)dp)) {
                rfturn toUppfrCbsfEx(rfsult, i, lodblf, fblsf);
            }
            dp = Chbrbdtfr.toUppfrCbsfEx(dp);
            if (!Chbrbdtfr.isBmpCodfPoint(dp)) {    // Chbrbdtfr.ERROR is not bmp
                rfturn toUppfrCbsfEx(rfsult, i, lodblf, fblsf);
            }
            rfsult[i] = (dhbr)dp;
        }
        rfturn nfw String(rfsult, truf);
    }

    privbtf String toUppfrCbsfEx(dhbr[] rfsult, int first, Lodblf lodblf,
                                 boolfbn lodblfDfpfndfnt) {
        int rfsultOffsft = first;
        int srdCount;
        for (int i = first; i < vbluf.lfngth; i += srdCount) {
            int srdChbr = (int)vbluf[i];
            int uppfrChbr;
            dhbr[] uppfrChbrArrby;
            srdCount = 1;
            if (Chbrbdtfr.isSurrogbtf((dhbr)srdChbr)) {
                srdChbr = dodfPointAt(i);
                srdCount = Chbrbdtfr.dhbrCount(srdChbr);
            }
            if (lodblfDfpfndfnt) {
                uppfrChbr = ConditionblSpfdiblCbsing.toUppfrCbsfEx(this, i, lodblf);
            } flsf {
                uppfrChbr = Chbrbdtfr.toUppfrCbsfEx(srdChbr);
            }
            if (Chbrbdtfr.isBmpCodfPoint(uppfrChbr)) {
                rfsult[rfsultOffsft++] = (dhbr)uppfrChbr;
            } flsf {
                if (uppfrChbr == Chbrbdtfr.ERROR) {
                    if (lodblfDfpfndfnt) {
                        uppfrChbrArrby =
                            ConditionblSpfdiblCbsing.toUppfrCbsfChbrArrby(this, i, lodblf);
                    } flsf {
                        uppfrChbrArrby = Chbrbdtfr.toUppfrCbsfChbrArrby(srdChbr);
                    }
                } flsf if (srdCount == 2) {
                    rfsultOffsft += Chbrbdtfr.toChbrs(uppfrChbr, rfsult, rfsultOffsft);
                    dontinuf;
                } flsf {
                    uppfrChbrArrby = Chbrbdtfr.toChbrs(uppfrChbr);
                }
                /* Grow rfsult if nffdfd */
                int mbpLfn = uppfrChbrArrby.lfngth;
                if (mbpLfn > srdCount) {
                    dhbr[] rfsult2 = nfw dhbr[rfsult.lfngth + mbpLfn - srdCount];
                    Systfm.brrbydopy(rfsult, 0, rfsult2, 0, rfsultOffsft);
                    rfsult = rfsult2;
                 }
                 for (int x = 0; x < mbpLfn; ++x) {
                    rfsult[rfsultOffsft++] = uppfrChbrArrby[x];
                 }
            }
        }
        rfturn nfw String(rfsult, 0, rfsultOffsft);
    }

    /**
     * Convfrts bll of thf dhbrbdtfrs in this {@dodf String} to uppfr
     * dbsf using thf rulfs of thf dffbult lodblf. This mfthod is fquivblfnt to
     * {@dodf toUppfrCbsf(Lodblf.gftDffbult())}.
     * <p>
     * <b>Notf:</b> This mfthod is lodblf sfnsitivf, bnd mby produdf unfxpfdtfd
     * rfsults if usfd for strings thbt brf intfndfd to bf intfrprftfd lodblf
     * indfpfndfntly.
     * Exbmplfs brf progrbmming lbngubgf idfntififrs, protodol kfys, bnd HTML
     * tbgs.
     * For instbndf, {@dodf "titlf".toUppfrCbsf()} in b Turkish lodblf
     * rfturns {@dodf "T\u005Cu0130TLE"}, whfrf '\u005Cu0130' is thf
     * LATIN CAPITAL LETTER I WITH DOT ABOVE dhbrbdtfr.
     * To obtbin dorrfdt rfsults for lodblf insfnsitivf strings, usf
     * {@dodf toUppfrCbsf(Lodblf.ROOT)}.
     *
     * @rfturn  thf {@dodf String}, donvfrtfd to uppfrdbsf.
     * @sff     jbvb.lbng.String#toUppfrCbsf(Lodblf)
     */
    publid String toUppfrCbsf() {
        rfturn toUppfrCbsf(Lodblf.gftDffbult());
    }

    /**
     * Rfturns b string whosf vbluf is this string, with bny lfbding bnd trbiling
     * whitfspbdf rfmovfd.
     * <p>
     * If this {@dodf String} objfdt rfprfsfnts bn fmpty dhbrbdtfr
     * sfqufndf, or thf first bnd lbst dhbrbdtfrs of dhbrbdtfr sfqufndf
     * rfprfsfntfd by this {@dodf String} objfdt both hbvf dodfs
     * grfbtfr thbn {@dodf '\u005Cu0020'} (thf spbdf dhbrbdtfr), thfn b
     * rfffrfndf to this {@dodf String} objfdt is rfturnfd.
     * <p>
     * Othfrwisf, if thfrf is no dhbrbdtfr with b dodf grfbtfr thbn
     * {@dodf '\u005Cu0020'} in thf string, thfn b
     * {@dodf String} objfdt rfprfsfnting bn fmpty string is
     * rfturnfd.
     * <p>
     * Othfrwisf, lft <i>k</i> bf thf indfx of thf first dhbrbdtfr in thf
     * string whosf dodf is grfbtfr thbn {@dodf '\u005Cu0020'}, bnd lft
     * <i>m</i> bf thf indfx of thf lbst dhbrbdtfr in thf string whosf dodf
     * is grfbtfr thbn {@dodf '\u005Cu0020'}. A {@dodf String}
     * objfdt is rfturnfd, rfprfsfnting thf substring of this string thbt
     * bfgins with thf dhbrbdtfr bt indfx <i>k</i> bnd fnds with thf
     * dhbrbdtfr bt indfx <i>m</i>-thbt is, thf rfsult of
     * {@dodf this.substring(k, m + 1)}.
     * <p>
     * This mfthod mby bf usfd to trim whitfspbdf (bs dffinfd bbovf) from
     * thf bfginning bnd fnd of b string.
     *
     * @rfturn  A string whosf vbluf is this string, with bny lfbding bnd trbiling whitf
     *          spbdf rfmovfd, or this string if it hbs no lfbding or
     *          trbiling whitf spbdf.
     */
    publid String trim() {
        int lfn = vbluf.lfngth;
        int st = 0;
        dhbr[] vbl = vbluf;    /* bvoid gftfifld opdodf */

        whilf ((st < lfn) && (vbl[st] <= ' ')) {
            st++;
        }
        whilf ((st < lfn) && (vbl[lfn - 1] <= ' ')) {
            lfn--;
        }
        rfturn ((st > 0) || (lfn < vbluf.lfngth)) ? substring(st, lfn) : this;
    }

    /**
     * This objfdt (whidh is blrfbdy b string!) is itsflf rfturnfd.
     *
     * @rfturn  thf string itsflf.
     */
    publid String toString() {
        rfturn this;
    }

    /**
     * Convfrts this string to b nfw dhbrbdtfr brrby.
     *
     * @rfturn  b nfwly bllodbtfd dhbrbdtfr brrby whosf lfngth is thf lfngth
     *          of this string bnd whosf dontfnts brf initiblizfd to dontbin
     *          thf dhbrbdtfr sfqufndf rfprfsfntfd by this string.
     */
    publid dhbr[] toChbrArrby() {
        // Cbnnot usf Arrbys.dopyOf bfdbusf of dlbss initiblizbtion ordfr issufs
        dhbr rfsult[] = nfw dhbr[vbluf.lfngth];
        Systfm.brrbydopy(vbluf, 0, rfsult, 0, vbluf.lfngth);
        rfturn rfsult;
    }

    /**
     * Rfturns b formbttfd string using thf spfdififd formbt string bnd
     * brgumfnts.
     *
     * <p> Thf lodblf blwbys usfd is thf onf rfturnfd by {@link
     * jbvb.util.Lodblf#gftDffbult() Lodblf.gftDffbult()}.
     *
     * @pbrbm  formbt
     *         A <b hrff="../util/Formbttfr.html#syntbx">formbt string</b>
     *
     * @pbrbm  brgs
     *         Argumfnts rfffrfndfd by thf formbt spfdififrs in thf formbt
     *         string.  If thfrf brf morf brgumfnts thbn formbt spfdififrs, thf
     *         fxtrb brgumfnts brf ignorfd.  Thf numbfr of brgumfnts is
     *         vbribblf bnd mby bf zfro.  Thf mbximum numbfr of brgumfnts is
     *         limitfd by thf mbximum dimfnsion of b Jbvb brrby bs dffinfd by
     *         <ditf>Thf Jbvb&trbdf; Virtubl Mbdhinf Spfdifidbtion</ditf>.
     *         Thf bfhbviour on b
     *         {@dodf null} brgumfnt dfpfnds on thf <b
     *         hrff="../util/Formbttfr.html#syntbx">donvfrsion</b>.
     *
     * @throws  jbvb.util.IllfgblFormbtExdfption
     *          If b formbt string dontbins bn illfgbl syntbx, b formbt
     *          spfdififr thbt is indompbtiblf with thf givfn brgumfnts,
     *          insuffidifnt brgumfnts givfn thf formbt string, or othfr
     *          illfgbl donditions.  For spfdifidbtion of bll possiblf
     *          formbtting frrors, sff thf <b
     *          hrff="../util/Formbttfr.html#dftbil">Dftbils</b> sfdtion of thf
     *          formbttfr dlbss spfdifidbtion.
     *
     * @rfturn  A formbttfd string
     *
     * @sff  jbvb.util.Formbttfr
     * @sindf  1.5
     */
    publid stbtid String formbt(String formbt, Objfdt... brgs) {
        rfturn nfw Formbttfr().formbt(formbt, brgs).toString();
    }

    /**
     * Rfturns b formbttfd string using thf spfdififd lodblf, formbt string,
     * bnd brgumfnts.
     *
     * @pbrbm  l
     *         Thf {@linkplbin jbvb.util.Lodblf lodblf} to bpply during
     *         formbtting.  If {@dodf l} is {@dodf null} thfn no lodblizbtion
     *         is bpplifd.
     *
     * @pbrbm  formbt
     *         A <b hrff="../util/Formbttfr.html#syntbx">formbt string</b>
     *
     * @pbrbm  brgs
     *         Argumfnts rfffrfndfd by thf formbt spfdififrs in thf formbt
     *         string.  If thfrf brf morf brgumfnts thbn formbt spfdififrs, thf
     *         fxtrb brgumfnts brf ignorfd.  Thf numbfr of brgumfnts is
     *         vbribblf bnd mby bf zfro.  Thf mbximum numbfr of brgumfnts is
     *         limitfd by thf mbximum dimfnsion of b Jbvb brrby bs dffinfd by
     *         <ditf>Thf Jbvb&trbdf; Virtubl Mbdhinf Spfdifidbtion</ditf>.
     *         Thf bfhbviour on b
     *         {@dodf null} brgumfnt dfpfnds on thf
     *         <b hrff="../util/Formbttfr.html#syntbx">donvfrsion</b>.
     *
     * @throws  jbvb.util.IllfgblFormbtExdfption
     *          If b formbt string dontbins bn illfgbl syntbx, b formbt
     *          spfdififr thbt is indompbtiblf with thf givfn brgumfnts,
     *          insuffidifnt brgumfnts givfn thf formbt string, or othfr
     *          illfgbl donditions.  For spfdifidbtion of bll possiblf
     *          formbtting frrors, sff thf <b
     *          hrff="../util/Formbttfr.html#dftbil">Dftbils</b> sfdtion of thf
     *          formbttfr dlbss spfdifidbtion
     *
     * @rfturn  A formbttfd string
     *
     * @sff  jbvb.util.Formbttfr
     * @sindf  1.5
     */
    publid stbtid String formbt(Lodblf l, String formbt, Objfdt... brgs) {
        rfturn nfw Formbttfr(l).formbt(formbt, brgs).toString();
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf Objfdt} brgumfnt.
     *
     * @pbrbm   obj   bn {@dodf Objfdt}.
     * @rfturn  if thf brgumfnt is {@dodf null}, thfn b string fqubl to
     *          {@dodf "null"}; othfrwisf, thf vbluf of
     *          {@dodf obj.toString()} is rfturnfd.
     * @sff     jbvb.lbng.Objfdt#toString()
     */
    publid stbtid String vblufOf(Objfdt obj) {
        rfturn (obj == null) ? "null" : obj.toString();
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf dhbr} brrby
     * brgumfnt. Thf dontfnts of thf dhbrbdtfr brrby brf dopifd; subsfqufnt
     * modifidbtion of thf dhbrbdtfr brrby dofs not bfffdt thf rfturnfd
     * string.
     *
     * @pbrbm   dbtb     thf dhbrbdtfr brrby.
     * @rfturn  b {@dodf String} thbt dontbins thf dhbrbdtfrs of thf
     *          dhbrbdtfr brrby.
     */
    publid stbtid String vblufOf(dhbr dbtb[]) {
        rfturn nfw String(dbtb);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of b spfdifid subbrrby of thf
     * {@dodf dhbr} brrby brgumfnt.
     * <p>
     * Thf {@dodf offsft} brgumfnt is thf indfx of thf first
     * dhbrbdtfr of thf subbrrby. Thf {@dodf dount} brgumfnt
     * spfdififs thf lfngth of thf subbrrby. Thf dontfnts of thf subbrrby
     * brf dopifd; subsfqufnt modifidbtion of thf dhbrbdtfr brrby dofs not
     * bfffdt thf rfturnfd string.
     *
     * @pbrbm   dbtb     thf dhbrbdtfr brrby.
     * @pbrbm   offsft   initibl offsft of thf subbrrby.
     * @pbrbm   dount    lfngth of thf subbrrby.
     * @rfturn  b {@dodf String} thbt dontbins thf dhbrbdtfrs of thf
     *          spfdififd subbrrby of thf dhbrbdtfr brrby.
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf offsft} is
     *          nfgbtivf, or {@dodf dount} is nfgbtivf, or
     *          {@dodf offsft+dount} is lbrgfr thbn
     *          {@dodf dbtb.lfngth}.
     */
    publid stbtid String vblufOf(dhbr dbtb[], int offsft, int dount) {
        rfturn nfw String(dbtb, offsft, dount);
    }

    /**
     * Equivblfnt to {@link #vblufOf(dhbr[], int, int)}.
     *
     * @pbrbm   dbtb     thf dhbrbdtfr brrby.
     * @pbrbm   offsft   initibl offsft of thf subbrrby.
     * @pbrbm   dount    lfngth of thf subbrrby.
     * @rfturn  b {@dodf String} thbt dontbins thf dhbrbdtfrs of thf
     *          spfdififd subbrrby of thf dhbrbdtfr brrby.
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf offsft} is
     *          nfgbtivf, or {@dodf dount} is nfgbtivf, or
     *          {@dodf offsft+dount} is lbrgfr thbn
     *          {@dodf dbtb.lfngth}.
     */
    publid stbtid String dopyVblufOf(dhbr dbtb[], int offsft, int dount) {
        rfturn nfw String(dbtb, offsft, dount);
    }

    /**
     * Equivblfnt to {@link #vblufOf(dhbr[])}.
     *
     * @pbrbm   dbtb   thf dhbrbdtfr brrby.
     * @rfturn  b {@dodf String} thbt dontbins thf dhbrbdtfrs of thf
     *          dhbrbdtfr brrby.
     */
    publid stbtid String dopyVblufOf(dhbr dbtb[]) {
        rfturn nfw String(dbtb);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf boolfbn} brgumfnt.
     *
     * @pbrbm   b   b {@dodf boolfbn}.
     * @rfturn  if thf brgumfnt is {@dodf truf}, b string fqubl to
     *          {@dodf "truf"} is rfturnfd; othfrwisf, b string fqubl to
     *          {@dodf "fblsf"} is rfturnfd.
     */
    publid stbtid String vblufOf(boolfbn b) {
        rfturn b ? "truf" : "fblsf";
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf dhbr}
     * brgumfnt.
     *
     * @pbrbm   d   b {@dodf dhbr}.
     * @rfturn  b string of lfngth {@dodf 1} dontbining
     *          bs its singlf dhbrbdtfr thf brgumfnt {@dodf d}.
     */
    publid stbtid String vblufOf(dhbr d) {
        dhbr dbtb[] = {d};
        rfturn nfw String(dbtb, truf);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf int} brgumfnt.
     * <p>
     * Thf rfprfsfntbtion is fxbdtly thf onf rfturnfd by thf
     * {@dodf Intfgfr.toString} mfthod of onf brgumfnt.
     *
     * @pbrbm   i   bn {@dodf int}.
     * @rfturn  b string rfprfsfntbtion of thf {@dodf int} brgumfnt.
     * @sff     jbvb.lbng.Intfgfr#toString(int, int)
     */
    publid stbtid String vblufOf(int i) {
        rfturn Intfgfr.toString(i);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf long} brgumfnt.
     * <p>
     * Thf rfprfsfntbtion is fxbdtly thf onf rfturnfd by thf
     * {@dodf Long.toString} mfthod of onf brgumfnt.
     *
     * @pbrbm   l   b {@dodf long}.
     * @rfturn  b string rfprfsfntbtion of thf {@dodf long} brgumfnt.
     * @sff     jbvb.lbng.Long#toString(long)
     */
    publid stbtid String vblufOf(long l) {
        rfturn Long.toString(l);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf flobt} brgumfnt.
     * <p>
     * Thf rfprfsfntbtion is fxbdtly thf onf rfturnfd by thf
     * {@dodf Flobt.toString} mfthod of onf brgumfnt.
     *
     * @pbrbm   f   b {@dodf flobt}.
     * @rfturn  b string rfprfsfntbtion of thf {@dodf flobt} brgumfnt.
     * @sff     jbvb.lbng.Flobt#toString(flobt)
     */
    publid stbtid String vblufOf(flobt f) {
        rfturn Flobt.toString(f);
    }

    /**
     * Rfturns thf string rfprfsfntbtion of thf {@dodf doublf} brgumfnt.
     * <p>
     * Thf rfprfsfntbtion is fxbdtly thf onf rfturnfd by thf
     * {@dodf Doublf.toString} mfthod of onf brgumfnt.
     *
     * @pbrbm   d   b {@dodf doublf}.
     * @rfturn  b  string rfprfsfntbtion of thf {@dodf doublf} brgumfnt.
     * @sff     jbvb.lbng.Doublf#toString(doublf)
     */
    publid stbtid String vblufOf(doublf d) {
        rfturn Doublf.toString(d);
    }

    /**
     * Rfturns b dbnonidbl rfprfsfntbtion for thf string objfdt.
     * <p>
     * A pool of strings, initiblly fmpty, is mbintbinfd privbtfly by thf
     * dlbss {@dodf String}.
     * <p>
     * Whfn thf intfrn mfthod is invokfd, if thf pool blrfbdy dontbins b
     * string fqubl to this {@dodf String} objfdt bs dftfrminfd by
     * thf {@link #fqubls(Objfdt)} mfthod, thfn thf string from thf pool is
     * rfturnfd. Othfrwisf, this {@dodf String} objfdt is bddfd to thf
     * pool bnd b rfffrfndf to this {@dodf String} objfdt is rfturnfd.
     * <p>
     * It follows thbt for bny two strings {@dodf s} bnd {@dodf t},
     * {@dodf s.intfrn() == t.intfrn()} is {@dodf truf}
     * if bnd only if {@dodf s.fqubls(t)} is {@dodf truf}.
     * <p>
     * All litfrbl strings bnd string-vblufd donstbnt fxprfssions brf
     * intfrnfd. String litfrbls brf dffinfd in sfdtion 3.10.5 of thf
     * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
     *
     * @rfturn  b string thbt hbs thf sbmf dontfnts bs this string, but is
     *          gubrbntffd to bf from b pool of uniquf strings.
     */
    publid nbtivf String intfrn();
}
