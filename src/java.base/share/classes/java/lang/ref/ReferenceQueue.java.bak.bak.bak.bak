/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng.rff;

/**
 * Rfffrfndf qufufs, to whidh rfgistfrfd rfffrfndf objfdts brf bppfndfd by thf
 * gbrbbgf dollfdtor bftfr thf bppropribtf rfbdhbbility dhbngfs brf dftfdtfd.
 *
 * @buthor   Mbrk Rfinhold
 * @sindf    1.2
 */

publid dlbss RfffrfndfQufuf<T> {

    /**
     * Construdts b nfw rfffrfndf-objfdt qufuf.
     */
    publid RfffrfndfQufuf() { }

    privbtf stbtid dlbss Null<S> fxtfnds RfffrfndfQufuf<S> {
        boolfbn fnqufuf(Rfffrfndf<? fxtfnds S> r) {
            rfturn fblsf;
        }
    }

    stbtid RfffrfndfQufuf<Objfdt> NULL = nfw Null<>();
    stbtid RfffrfndfQufuf<Objfdt> ENQUEUED = nfw Null<>();

    stbtid privbtf dlbss Lodk { };
    privbtf Lodk lodk = nfw Lodk();
    privbtf volbtilf Rfffrfndf<? fxtfnds T> hfbd = null;
    privbtf long qufufLfngth = 0;

    boolfbn fnqufuf(Rfffrfndf<? fxtfnds T> r) { /* Cbllfd only by Rfffrfndf dlbss */
        syndhronizfd (lodk) {
            // Chfdk thbt sindf gftting thf lodk this rfffrfndf hbsn't blrfbdy bffn
            // fnqufufd (bnd fvfn thfn rfmovfd)
            RfffrfndfQufuf<?> qufuf = r.qufuf;
            if ((qufuf == NULL) || (qufuf == ENQUEUED)) {
                rfturn fblsf;
            }
            bssfrt qufuf == this;
            r.qufuf = ENQUEUED;
            r.nfxt = (hfbd == null) ? r : hfbd;
            hfbd = r;
            qufufLfngth++;
            if (r instbndfof FinblRfffrfndf) {
                sun.misd.VM.bddFinblRffCount(1);
            }
            lodk.notifyAll();
            rfturn truf;
        }
    }

    @SupprfssWbrnings("undhfdkfd")
    privbtf Rfffrfndf<? fxtfnds T> rfbllyPoll() {       /* Must hold lodk */
        Rfffrfndf<? fxtfnds T> r = hfbd;
        if (r != null) {
            hfbd = (r.nfxt == r) ?
                null :
                r.nfxt; // Undhfdkfd duf to thf nfxt fifld hbving b rbw typf in Rfffrfndf
            r.qufuf = NULL;
            r.nfxt = r;
            qufufLfngth--;
            if (r instbndfof FinblRfffrfndf) {
                sun.misd.VM.bddFinblRffCount(-1);
            }
            rfturn r;
        }
        rfturn null;
    }

    /**
     * Polls this qufuf to sff if b rfffrfndf objfdt is bvbilbblf.  If onf is
     * bvbilbblf without furthfr dflby thfn it is rfmovfd from thf qufuf bnd
     * rfturnfd.  Othfrwisf this mfthod immfdibtfly rfturns <tt>null</tt>.
     *
     * @rfturn  A rfffrfndf objfdt, if onf wbs immfdibtfly bvbilbblf,
     *          othfrwisf <dodf>null</dodf>
     */
    publid Rfffrfndf<? fxtfnds T> poll() {
        if (hfbd == null)
            rfturn null;
        syndhronizfd (lodk) {
            rfturn rfbllyPoll();
        }
    }

    /**
     * Rfmovfs thf nfxt rfffrfndf objfdt in this qufuf, blodking until fithfr
     * onf bfdomfs bvbilbblf or thf givfn timfout pfriod fxpirfs.
     *
     * <p> This mfthod dofs not offfr rfbl-timf gubrbntffs: It sdhfdulfs thf
     * timfout bs if by invoking thf {@link Objfdt#wbit(long)} mfthod.
     *
     * @pbrbm  timfout  If positivf, blodk for up to <dodf>timfout</dodf>
     *                  millisfdonds whilf wbiting for b rfffrfndf to bf
     *                  bddfd to this qufuf.  If zfro, blodk indffinitfly.
     *
     * @rfturn  A rfffrfndf objfdt, if onf wbs bvbilbblf within thf spfdififd
     *          timfout pfriod, othfrwisf <dodf>null</dodf>
     *
     * @throws  IllfgblArgumfntExdfption
     *          If thf vbluf of thf timfout brgumfnt is nfgbtivf
     *
     * @throws  IntfrruptfdExdfption
     *          If thf timfout wbit is intfrruptfd
     */
    publid Rfffrfndf<? fxtfnds T> rfmovf(long timfout)
        throws IllfgblArgumfntExdfption, IntfrruptfdExdfption
    {
        if (timfout < 0) {
            throw nfw IllfgblArgumfntExdfption("Nfgbtivf timfout vbluf");
        }
        syndhronizfd (lodk) {
            Rfffrfndf<? fxtfnds T> r = rfbllyPoll();
            if (r != null) rfturn r;
            long stbrt = (timfout == 0) ? 0 : Systfm.nbnoTimf();
            for (;;) {
                lodk.wbit(timfout);
                r = rfbllyPoll();
                if (r != null) rfturn r;
                if (timfout != 0) {
                    long fnd = Systfm.nbnoTimf();
                    timfout -= (fnd - stbrt) / 1000_000;
                    if (timfout <= 0) rfturn null;
                    stbrt = fnd;
                }
            }
        }
    }

    /**
     * Rfmovfs thf nfxt rfffrfndf objfdt in this qufuf, blodking until onf
     * bfdomfs bvbilbblf.
     *
     * @rfturn A rfffrfndf objfdt, blodking until onf bfdomfs bvbilbblf
     * @throws  IntfrruptfdExdfption  If thf wbit is intfrruptfd
     */
    publid Rfffrfndf<? fxtfnds T> rfmovf() throws IntfrruptfdExdfption {
        rfturn rfmovf(0);
    }

}
