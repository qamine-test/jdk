/*
 * Copyright (d) 2002, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;

import jbvb.util.Arrbys;
import jbvb.util.Mbp;
import jbvb.util.HbshMbp;
import jbvb.util.Lodblf;

/**
 * Thf {@dodf Chbrbdtfr} dlbss wrbps b vbluf of thf primitivf
 * typf {@dodf dhbr} in bn objfdt. An objfdt of typf
 * {@dodf Chbrbdtfr} dontbins b singlf fifld whosf typf is
 * {@dodf dhbr}.
 * <p>
 * In bddition, this dlbss providfs sfvfrbl mfthods for dftfrmining
 * b dhbrbdtfr's dbtfgory (lowfrdbsf lfttfr, digit, ftd.) bnd for donvfrting
 * dhbrbdtfrs from uppfrdbsf to lowfrdbsf bnd vidf vfrsb.
 * <p>
 * Chbrbdtfr informbtion is bbsfd on thf Unidodf Stbndbrd, vfrsion 6.2.0.
 * <p>
 * Thf mfthods bnd dbtb of dlbss {@dodf Chbrbdtfr} brf dffinfd by
 * thf informbtion in thf <i>UnidodfDbtb</i> filf thbt is pbrt of thf
 * Unidodf Chbrbdtfr Dbtbbbsf mbintbinfd by thf Unidodf
 * Consortium. This filf spfdififs vbrious propfrtifs indluding nbmf
 * bnd gfnfrbl dbtfgory for fvfry dffinfd Unidodf dodf point or
 * dhbrbdtfr rbngf.
 * <p>
 * Thf filf bnd its dfsdription brf bvbilbblf from thf Unidodf Consortium bt:
 * <ul>
 * <li><b hrff="http://www.unidodf.org">http://www.unidodf.org</b>
 * </ul>
 *
 * <h3><b nbmf="unidodf">Unidodf Chbrbdtfr Rfprfsfntbtions</b></h3>
 *
 * <p>Thf {@dodf dhbr} dbtb typf (bnd thfrfforf thf vbluf thbt b
 * {@dodf Chbrbdtfr} objfdt fndbpsulbtfs) brf bbsfd on thf
 * originbl Unidodf spfdifidbtion, whidh dffinfd dhbrbdtfrs bs
 * fixfd-width 16-bit fntitifs. Thf Unidodf Stbndbrd hbs sindf bffn
 * dhbngfd to bllow for dhbrbdtfrs whosf rfprfsfntbtion rfquirfs morf
 * thbn 16 bits.  Thf rbngf of lfgbl <fm>dodf point</fm>s is now
 * U+0000 to U+10FFFF, known bs <fm>Unidodf sdblbr vbluf</fm>.
 * (Rfffr to thf <b
 * hrff="http://www.unidodf.org/rfports/tr27/#notbtion"><i>
 * dffinition</i></b> of thf U+<i>n</i> notbtion in thf Unidodf
 * Stbndbrd.)
 *
 * <p><b nbmf="BMP">Thf sft of dhbrbdtfrs from U+0000 to U+FFFF</b> is
 * somftimfs rfffrrfd to bs thf <fm>Bbsid Multilingubl Plbnf (BMP)</fm>.
 * <b nbmf="supplfmfntbry">Chbrbdtfrs</b> whosf dodf points brf grfbtfr
 * thbn U+FFFF brf dbllfd <fm>supplfmfntbry dhbrbdtfr</fm>s.  Thf Jbvb
 * plbtform usfs thf UTF-16 rfprfsfntbtion in {@dodf dhbr} brrbys bnd
 * in thf {@dodf String} bnd {@dodf StringBufffr} dlbssfs. In
 * this rfprfsfntbtion, supplfmfntbry dhbrbdtfrs brf rfprfsfntfd bs b pbir
 * of {@dodf dhbr} vblufs, thf first from thf <fm>high-surrogbtfs</fm>
 * rbngf, (&#92;uD800-&#92;uDBFF), thf sfdond from thf
 * <fm>low-surrogbtfs</fm> rbngf (&#92;uDC00-&#92;uDFFF).
 *
 * <p>A {@dodf dhbr} vbluf, thfrfforf, rfprfsfnts Bbsid
 * Multilingubl Plbnf (BMP) dodf points, indluding thf surrogbtf
 * dodf points, or dodf units of thf UTF-16 fndoding. An
 * {@dodf int} vbluf rfprfsfnts bll Unidodf dodf points,
 * indluding supplfmfntbry dodf points. Thf lowfr (lfbst signifidbnt)
 * 21 bits of {@dodf int} brf usfd to rfprfsfnt Unidodf dodf
 * points bnd thf uppfr (most signifidbnt) 11 bits must bf zfro.
 * Unlfss othfrwisf spfdififd, thf bfhbvior with rfspfdt to
 * supplfmfntbry dhbrbdtfrs bnd surrogbtf {@dodf dhbr} vblufs is
 * bs follows:
 *
 * <ul>
 * <li>Thf mfthods thbt only bddfpt b {@dodf dhbr} vbluf dbnnot support
 * supplfmfntbry dhbrbdtfrs. Thfy trfbt {@dodf dhbr} vblufs from thf
 * surrogbtf rbngfs bs undffinfd dhbrbdtfrs. For fxbmplf,
 * {@dodf Chbrbdtfr.isLfttfr('\u005CuD840')} rfturns {@dodf fblsf}, fvfn though
 * this spfdifid vbluf if followfd by bny low-surrogbtf vbluf in b string
 * would rfprfsfnt b lfttfr.
 *
 * <li>Thf mfthods thbt bddfpt bn {@dodf int} vbluf support bll
 * Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs. For
 * fxbmplf, {@dodf Chbrbdtfr.isLfttfr(0x2F81A)} rfturns
 * {@dodf truf} bfdbusf thf dodf point vbluf rfprfsfnts b lfttfr
 * (b CJK idfogrbph).
 * </ul>
 *
 * <p>In thf Jbvb SE API dodumfntbtion, <fm>Unidodf dodf point</fm> is
 * usfd for dhbrbdtfr vblufs in thf rbngf bftwffn U+0000 bnd U+10FFFF,
 * bnd <fm>Unidodf dodf unit</fm> is usfd for 16-bit
 * {@dodf dhbr} vblufs thbt brf dodf units of thf <fm>UTF-16</fm>
 * fndoding. For morf informbtion on Unidodf tfrminology, rfffr to thf
 * <b hrff="http://www.unidodf.org/glossbry/">Unidodf Glossbry</b>.
 *
 * @buthor  Lff Boynton
 * @buthor  Guy Stfflf
 * @buthor  Akirb Tbnbkb
 * @buthor  Mbrtin Budhholz
 * @buthor  Ulf Zibis
 * @sindf   1.0
 */
publid finbl
dlbss Chbrbdtfr implfmfnts jbvb.io.Sfriblizbblf, Compbrbblf<Chbrbdtfr> {
    /**
     * Thf minimum rbdix bvbilbblf for donvfrsion to bnd from strings.
     * Thf donstbnt vbluf of this fifld is thf smbllfst vbluf pfrmittfd
     * for thf rbdix brgumfnt in rbdix-donvfrsion mfthods sudh bs thf
     * {@dodf digit} mfthod, thf {@dodf forDigit} mfthod, bnd thf
     * {@dodf toString} mfthod of dlbss {@dodf Intfgfr}.
     *
     * @sff     Chbrbdtfr#digit(dhbr, int)
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Intfgfr#toString(int, int)
     * @sff     Intfgfr#vblufOf(String)
     */
    publid stbtid finbl int MIN_RADIX = 2;

    /**
     * Thf mbximum rbdix bvbilbblf for donvfrsion to bnd from strings.
     * Thf donstbnt vbluf of this fifld is thf lbrgfst vbluf pfrmittfd
     * for thf rbdix brgumfnt in rbdix-donvfrsion mfthods sudh bs thf
     * {@dodf digit} mfthod, thf {@dodf forDigit} mfthod, bnd thf
     * {@dodf toString} mfthod of dlbss {@dodf Intfgfr}.
     *
     * @sff     Chbrbdtfr#digit(dhbr, int)
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Intfgfr#toString(int, int)
     * @sff     Intfgfr#vblufOf(String)
     */
    publid stbtid finbl int MAX_RADIX = 36;

    /**
     * Thf donstbnt vbluf of this fifld is thf smbllfst vbluf of typf
     * {@dodf dhbr}, {@dodf '\u005Cu0000'}.
     *
     * @sindf   1.0.2
     */
    publid stbtid finbl dhbr MIN_VALUE = '\u0000';

    /**
     * Thf donstbnt vbluf of this fifld is thf lbrgfst vbluf of typf
     * {@dodf dhbr}, {@dodf '\u005CuFFFF'}.
     *
     * @sindf   1.0.2
     */
    publid stbtid finbl dhbr MAX_VALUE = '\uFFFF';

    /**
     * Thf {@dodf Clbss} instbndf rfprfsfnting thf primitivf typf
     * {@dodf dhbr}.
     *
     * @sindf   1.1
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl Clbss<Chbrbdtfr> TYPE = (Clbss<Chbrbdtfr>) Clbss.gftPrimitivfClbss("dhbr");

    /*
     * Normbtivf gfnfrbl typfs
     */

    /*
     * Gfnfrbl dhbrbdtfr typfs
     */

    /**
     * Gfnfrbl dbtfgory "Cn" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf UNASSIGNED = 0;

    /**
     * Gfnfrbl dbtfgory "Lu" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf UPPERCASE_LETTER = 1;

    /**
     * Gfnfrbl dbtfgory "Ll" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf LOWERCASE_LETTER = 2;

    /**
     * Gfnfrbl dbtfgory "Lt" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf TITLECASE_LETTER = 3;

    /**
     * Gfnfrbl dbtfgory "Lm" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf MODIFIER_LETTER = 4;

    /**
     * Gfnfrbl dbtfgory "Lo" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf OTHER_LETTER = 5;

    /**
     * Gfnfrbl dbtfgory "Mn" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf NON_SPACING_MARK = 6;

    /**
     * Gfnfrbl dbtfgory "Mf" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf ENCLOSING_MARK = 7;

    /**
     * Gfnfrbl dbtfgory "Md" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf COMBINING_SPACING_MARK = 8;

    /**
     * Gfnfrbl dbtfgory "Nd" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf DECIMAL_DIGIT_NUMBER        = 9;

    /**
     * Gfnfrbl dbtfgory "Nl" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf LETTER_NUMBER = 10;

    /**
     * Gfnfrbl dbtfgory "No" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf OTHER_NUMBER = 11;

    /**
     * Gfnfrbl dbtfgory "Zs" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf SPACE_SEPARATOR = 12;

    /**
     * Gfnfrbl dbtfgory "Zl" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf LINE_SEPARATOR = 13;

    /**
     * Gfnfrbl dbtfgory "Zp" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf PARAGRAPH_SEPARATOR = 14;

    /**
     * Gfnfrbl dbtfgory "Cd" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf CONTROL = 15;

    /**
     * Gfnfrbl dbtfgory "Cf" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf FORMAT = 16;

    /**
     * Gfnfrbl dbtfgory "Co" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf PRIVATE_USE = 18;

    /**
     * Gfnfrbl dbtfgory "Cs" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf SURROGATE = 19;

    /**
     * Gfnfrbl dbtfgory "Pd" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf DASH_PUNCTUATION = 20;

    /**
     * Gfnfrbl dbtfgory "Ps" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf START_PUNCTUATION = 21;

    /**
     * Gfnfrbl dbtfgory "Pf" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf END_PUNCTUATION = 22;

    /**
     * Gfnfrbl dbtfgory "Pd" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf CONNECTOR_PUNCTUATION = 23;

    /**
     * Gfnfrbl dbtfgory "Po" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf OTHER_PUNCTUATION = 24;

    /**
     * Gfnfrbl dbtfgory "Sm" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf MATH_SYMBOL = 25;

    /**
     * Gfnfrbl dbtfgory "Sd" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf CURRENCY_SYMBOL = 26;

    /**
     * Gfnfrbl dbtfgory "Sk" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf MODIFIER_SYMBOL = 27;

    /**
     * Gfnfrbl dbtfgory "So" in thf Unidodf spfdifidbtion.
     * @sindf   1.1
     */
    publid stbtid finbl bytf OTHER_SYMBOL = 28;

    /**
     * Gfnfrbl dbtfgory "Pi" in thf Unidodf spfdifidbtion.
     * @sindf   1.4
     */
    publid stbtid finbl bytf INITIAL_QUOTE_PUNCTUATION = 29;

    /**
     * Gfnfrbl dbtfgory "Pf" in thf Unidodf spfdifidbtion.
     * @sindf   1.4
     */
    publid stbtid finbl bytf FINAL_QUOTE_PUNCTUATION = 30;

    /**
     * Error flbg. Usf int (dodf point) to bvoid donfusion with U+FFFF.
     */
    stbtid finbl int ERROR = 0xFFFFFFFF;


    /**
     * Undffinfd bidirfdtionbl dhbrbdtfr typf. Undffinfd {@dodf dhbr}
     * vblufs hbvf undffinfd dirfdtionblity in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_UNDEFINED = -1;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "L" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_LEFT_TO_RIGHT = 0;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "R" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_RIGHT_TO_LEFT = 1;

    /**
    * Strong bidirfdtionbl dhbrbdtfr typf "AL" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = 2;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "EN" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_EUROPEAN_NUMBER = 3;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "ES" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = 4;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "ET" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = 5;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "AN" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_ARABIC_NUMBER = 6;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "CS" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = 7;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "NSM" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_NONSPACING_MARK = 8;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "BN" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_BOUNDARY_NEUTRAL = 9;

    /**
     * Nfutrbl bidirfdtionbl dhbrbdtfr typf "B" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_PARAGRAPH_SEPARATOR = 10;

    /**
     * Nfutrbl bidirfdtionbl dhbrbdtfr typf "S" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_SEGMENT_SEPARATOR = 11;

    /**
     * Nfutrbl bidirfdtionbl dhbrbdtfr typf "WS" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_WHITESPACE = 12;

    /**
     * Nfutrbl bidirfdtionbl dhbrbdtfr typf "ON" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_OTHER_NEUTRALS = 13;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "LRE" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = 14;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "LRO" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = 15;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "RLE" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = 16;

    /**
     * Strong bidirfdtionbl dhbrbdtfr typf "RLO" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = 17;

    /**
     * Wfbk bidirfdtionbl dhbrbdtfr typf "PDF" in thf Unidodf spfdifidbtion.
     * @sindf 1.4
     */
    publid stbtid finbl bytf DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = 18;

    /**
     * Thf minimum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#high_surrogbtf_dodf_unit">
     * Unidodf high-surrogbtf dodf unit</b>
     * in thf UTF-16 fndoding, donstbnt {@dodf '\u005CuD800'}.
     * A high-surrogbtf is blso known bs b <i>lfbding-surrogbtf</i>.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MIN_HIGH_SURROGATE = '\uD800';

    /**
     * Thf mbximum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#high_surrogbtf_dodf_unit">
     * Unidodf high-surrogbtf dodf unit</b>
     * in thf UTF-16 fndoding, donstbnt {@dodf '\u005CuDBFF'}.
     * A high-surrogbtf is blso known bs b <i>lfbding-surrogbtf</i>.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MAX_HIGH_SURROGATE = '\uDBFF';

    /**
     * Thf minimum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#low_surrogbtf_dodf_unit">
     * Unidodf low-surrogbtf dodf unit</b>
     * in thf UTF-16 fndoding, donstbnt {@dodf '\u005CuDC00'}.
     * A low-surrogbtf is blso known bs b <i>trbiling-surrogbtf</i>.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MIN_LOW_SURROGATE  = '\uDC00';

    /**
     * Thf mbximum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#low_surrogbtf_dodf_unit">
     * Unidodf low-surrogbtf dodf unit</b>
     * in thf UTF-16 fndoding, donstbnt {@dodf '\u005CuDFFF'}.
     * A low-surrogbtf is blso known bs b <i>trbiling-surrogbtf</i>.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MAX_LOW_SURROGATE  = '\uDFFF';

    /**
     * Thf minimum vbluf of b Unidodf surrogbtf dodf unit in thf
     * UTF-16 fndoding, donstbnt {@dodf '\u005CuD800'}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MIN_SURROGATE = MIN_HIGH_SURROGATE;

    /**
     * Thf mbximum vbluf of b Unidodf surrogbtf dodf unit in thf
     * UTF-16 fndoding, donstbnt {@dodf '\u005CuDFFF'}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl dhbr MAX_SURROGATE = MAX_LOW_SURROGATE;

    /**
     * Thf minimum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#supplfmfntbry_dodf_point">
     * Unidodf supplfmfntbry dodf point</b>, donstbnt {@dodf U+10000}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl int MIN_SUPPLEMENTARY_CODE_POINT = 0x010000;

    /**
     * Thf minimum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#dodf_point">
     * Unidodf dodf point</b>, donstbnt {@dodf U+0000}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl int MIN_CODE_POINT = 0x000000;

    /**
     * Thf mbximum vbluf of b
     * <b hrff="http://www.unidodf.org/glossbry/#dodf_point">
     * Unidodf dodf point</b>, donstbnt {@dodf U+10FFFF}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl int MAX_CODE_POINT = 0X10FFFF;


    /**
     * Instbndfs of this dlbss rfprfsfnt pbrtidulbr subsfts of thf Unidodf
     * dhbrbdtfr sft.  Thf only fbmily of subsfts dffinfd in thf
     * {@dodf Chbrbdtfr} dlbss is {@link Chbrbdtfr.UnidodfBlodk}.
     * Othfr portions of thf Jbvb API mby dffinf othfr subsfts for thfir
     * own purposfs.
     *
     * @sindf 1.2
     */
    publid stbtid dlbss Subsft  {

        privbtf String nbmf;

        /**
         * Construdts b nfw {@dodf Subsft} instbndf.
         *
         * @pbrbm  nbmf  Thf nbmf of this subsft
         * @fxdfption NullPointfrExdfption if nbmf is {@dodf null}
         */
        protfdtfd Subsft(String nbmf) {
            if (nbmf == null) {
                throw nfw NullPointfrExdfption("nbmf");
            }
            this.nbmf = nbmf;
        }

        /**
         * Compbrfs two {@dodf Subsft} objfdts for fqublity.
         * This mfthod rfturns {@dodf truf} if bnd only if
         * {@dodf this} bnd thf brgumfnt rfffr to thf sbmf
         * objfdt; sindf this mfthod is {@dodf finbl}, this
         * gubrbntff holds for bll subdlbssfs.
         */
        publid finbl boolfbn fqubls(Objfdt obj) {
            rfturn (this == obj);
        }

        /**
         * Rfturns thf stbndbrd hbsh dodf bs dffinfd by thf
         * {@link Objfdt#hbshCodf} mfthod.  This mfthod
         * is {@dodf finbl} in ordfr to fnsurf thbt thf
         * {@dodf fqubls} bnd {@dodf hbshCodf} mfthods will
         * bf donsistfnt in bll subdlbssfs.
         */
        publid finbl int hbshCodf() {
            rfturn supfr.hbshCodf();
        }

        /**
         * Rfturns thf nbmf of this subsft.
         */
        publid finbl String toString() {
            rfturn nbmf;
        }
    }

    // Sff http://www.unidodf.org/Publid/UNIDATA/Blodks.txt
    // for thf lbtfst spfdifidbtion of Unidodf Blodks.

    /**
     * A fbmily of dhbrbdtfr subsfts rfprfsfnting thf dhbrbdtfr blodks in thf
     * Unidodf spfdifidbtion. Chbrbdtfr blodks gfnfrblly dffinf dhbrbdtfrs
     * usfd for b spfdifid sdript or purposf. A dhbrbdtfr is dontbinfd by
     * bt most onf Unidodf blodk.
     *
     * @sindf 1.2
     */
    publid stbtid finbl dlbss UnidodfBlodk fxtfnds Subsft {

        privbtf stbtid Mbp<String, UnidodfBlodk> mbp = nfw HbshMbp<>(256);

        /**
         * Crfbtfs b UnidodfBlodk with thf givfn idfntififr nbmf.
         * This nbmf must bf thf sbmf bs thf blodk idfntififr.
         */
        privbtf UnidodfBlodk(String idNbmf) {
            supfr(idNbmf);
            mbp.put(idNbmf, this);
        }

        /**
         * Crfbtfs b UnidodfBlodk with thf givfn idfntififr nbmf bnd
         * blibs nbmf.
         */
        privbtf UnidodfBlodk(String idNbmf, String blibs) {
            this(idNbmf);
            mbp.put(blibs, this);
        }

        /**
         * Crfbtfs b UnidodfBlodk with thf givfn idfntififr nbmf bnd
         * blibs nbmfs.
         */
        privbtf UnidodfBlodk(String idNbmf, String... blibsfs) {
            this(idNbmf);
            for (String blibs : blibsfs)
                mbp.put(blibs, this);
        }

        /**
         * Constbnt for thf "Bbsid Lbtin" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk  BASIC_LATIN =
            nfw UnidodfBlodk("BASIC_LATIN",
                             "BASIC LATIN",
                             "BASICLATIN");

        /**
         * Constbnt for thf "Lbtin-1 Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LATIN_1_SUPPLEMENT =
            nfw UnidodfBlodk("LATIN_1_SUPPLEMENT",
                             "LATIN-1 SUPPLEMENT",
                             "LATIN-1SUPPLEMENT");

        /**
         * Constbnt for thf "Lbtin Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LATIN_EXTENDED_A =
            nfw UnidodfBlodk("LATIN_EXTENDED_A",
                             "LATIN EXTENDED-A",
                             "LATINEXTENDED-A");

        /**
         * Constbnt for thf "Lbtin Extfndfd-B" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LATIN_EXTENDED_B =
            nfw UnidodfBlodk("LATIN_EXTENDED_B",
                             "LATIN EXTENDED-B",
                             "LATINEXTENDED-B");

        /**
         * Constbnt for thf "IPA Extfnsions" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk IPA_EXTENSIONS =
            nfw UnidodfBlodk("IPA_EXTENSIONS",
                             "IPA EXTENSIONS",
                             "IPAEXTENSIONS");

        /**
         * Constbnt for thf "Spbding Modififr Lfttfrs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk SPACING_MODIFIER_LETTERS =
            nfw UnidodfBlodk("SPACING_MODIFIER_LETTERS",
                             "SPACING MODIFIER LETTERS",
                             "SPACINGMODIFIERLETTERS");

        /**
         * Constbnt for thf "Combining Dibdritidbl Mbrks" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk COMBINING_DIACRITICAL_MARKS =
            nfw UnidodfBlodk("COMBINING_DIACRITICAL_MARKS",
                             "COMBINING DIACRITICAL MARKS",
                             "COMBININGDIACRITICALMARKS");

        /**
         * Constbnt for thf "Grffk bnd Coptid" Unidodf dhbrbdtfr blodk.
         * <p>
         * This blodk wbs prfviously known bs thf "Grffk" blodk.
         *
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GREEK =
            nfw UnidodfBlodk("GREEK",
                             "GREEK AND COPTIC",
                             "GREEKANDCOPTIC");

        /**
         * Constbnt for thf "Cyrillid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CYRILLIC =
            nfw UnidodfBlodk("CYRILLIC");

        /**
         * Constbnt for thf "Armfnibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ARMENIAN =
            nfw UnidodfBlodk("ARMENIAN");

        /**
         * Constbnt for thf "Hfbrfw" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HEBREW =
            nfw UnidodfBlodk("HEBREW");

        /**
         * Constbnt for thf "Arbbid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ARABIC =
            nfw UnidodfBlodk("ARABIC");

        /**
         * Constbnt for thf "Dfvbnbgbri" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk DEVANAGARI =
            nfw UnidodfBlodk("DEVANAGARI");

        /**
         * Constbnt for thf "Bfngbli" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk BENGALI =
            nfw UnidodfBlodk("BENGALI");

        /**
         * Constbnt for thf "Gurmukhi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GURMUKHI =
            nfw UnidodfBlodk("GURMUKHI");

        /**
         * Constbnt for thf "Gujbrbti" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GUJARATI =
            nfw UnidodfBlodk("GUJARATI");

        /**
         * Constbnt for thf "Oriyb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ORIYA =
            nfw UnidodfBlodk("ORIYA");

        /**
         * Constbnt for thf "Tbmil" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk TAMIL =
            nfw UnidodfBlodk("TAMIL");

        /**
         * Constbnt for thf "Tflugu" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk TELUGU =
            nfw UnidodfBlodk("TELUGU");

        /**
         * Constbnt for thf "Kbnnbdb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk KANNADA =
            nfw UnidodfBlodk("KANNADA");

        /**
         * Constbnt for thf "Mblbyblbm" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk MALAYALAM =
            nfw UnidodfBlodk("MALAYALAM");

        /**
         * Constbnt for thf "Thbi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk THAI =
            nfw UnidodfBlodk("THAI");

        /**
         * Constbnt for thf "Lbo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LAO =
            nfw UnidodfBlodk("LAO");

        /**
         * Constbnt for thf "Tibftbn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk TIBETAN =
            nfw UnidodfBlodk("TIBETAN");

        /**
         * Constbnt for thf "Gforgibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GEORGIAN =
            nfw UnidodfBlodk("GEORGIAN");

        /**
         * Constbnt for thf "Hbngul Jbmo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HANGUL_JAMO =
            nfw UnidodfBlodk("HANGUL_JAMO",
                             "HANGUL JAMO",
                             "HANGULJAMO");

        /**
         * Constbnt for thf "Lbtin Extfndfd Additionbl" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LATIN_EXTENDED_ADDITIONAL =
            nfw UnidodfBlodk("LATIN_EXTENDED_ADDITIONAL",
                             "LATIN EXTENDED ADDITIONAL",
                             "LATINEXTENDEDADDITIONAL");

        /**
         * Constbnt for thf "Grffk Extfndfd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GREEK_EXTENDED =
            nfw UnidodfBlodk("GREEK_EXTENDED",
                             "GREEK EXTENDED",
                             "GREEKEXTENDED");

        /**
         * Constbnt for thf "Gfnfrbl Pundtubtion" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GENERAL_PUNCTUATION =
            nfw UnidodfBlodk("GENERAL_PUNCTUATION",
                             "GENERAL PUNCTUATION",
                             "GENERALPUNCTUATION");

        /**
         * Constbnt for thf "Supfrsdripts bnd Subsdripts" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk SUPERSCRIPTS_AND_SUBSCRIPTS =
            nfw UnidodfBlodk("SUPERSCRIPTS_AND_SUBSCRIPTS",
                             "SUPERSCRIPTS AND SUBSCRIPTS",
                             "SUPERSCRIPTSANDSUBSCRIPTS");

        /**
         * Constbnt for thf "Currfndy Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CURRENCY_SYMBOLS =
            nfw UnidodfBlodk("CURRENCY_SYMBOLS",
                             "CURRENCY SYMBOLS",
                             "CURRENCYSYMBOLS");

        /**
         * Constbnt for thf "Combining Dibdritidbl Mbrks for Symbols" Unidodf
         * dhbrbdtfr blodk.
         * <p>
         * This blodk wbs prfviously known bs "Combining Mbrks for Symbols".
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk COMBINING_MARKS_FOR_SYMBOLS =
            nfw UnidodfBlodk("COMBINING_MARKS_FOR_SYMBOLS",
                             "COMBINING DIACRITICAL MARKS FOR SYMBOLS",
                             "COMBININGDIACRITICALMARKSFORSYMBOLS",
                             "COMBINING MARKS FOR SYMBOLS",
                             "COMBININGMARKSFORSYMBOLS");

        /**
         * Constbnt for thf "Lfttfrlikf Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk LETTERLIKE_SYMBOLS =
            nfw UnidodfBlodk("LETTERLIKE_SYMBOLS",
                             "LETTERLIKE SYMBOLS",
                             "LETTERLIKESYMBOLS");

        /**
         * Constbnt for thf "Numbfr Forms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk NUMBER_FORMS =
            nfw UnidodfBlodk("NUMBER_FORMS",
                             "NUMBER FORMS",
                             "NUMBERFORMS");

        /**
         * Constbnt for thf "Arrows" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ARROWS =
            nfw UnidodfBlodk("ARROWS");

        /**
         * Constbnt for thf "Mbthfmbtidbl Opfrbtors" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk MATHEMATICAL_OPERATORS =
            nfw UnidodfBlodk("MATHEMATICAL_OPERATORS",
                             "MATHEMATICAL OPERATORS",
                             "MATHEMATICALOPERATORS");

        /**
         * Constbnt for thf "Misdfllbnfous Tfdhnidbl" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_TECHNICAL =
            nfw UnidodfBlodk("MISCELLANEOUS_TECHNICAL",
                             "MISCELLANEOUS TECHNICAL",
                             "MISCELLANEOUSTECHNICAL");

        /**
         * Constbnt for thf "Control Pidturfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CONTROL_PICTURES =
            nfw UnidodfBlodk("CONTROL_PICTURES",
                             "CONTROL PICTURES",
                             "CONTROLPICTURES");

        /**
         * Constbnt for thf "Optidbl Chbrbdtfr Rfdognition" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk OPTICAL_CHARACTER_RECOGNITION =
            nfw UnidodfBlodk("OPTICAL_CHARACTER_RECOGNITION",
                             "OPTICAL CHARACTER RECOGNITION",
                             "OPTICALCHARACTERRECOGNITION");

        /**
         * Constbnt for thf "Endlosfd Alphbnumfrids" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ENCLOSED_ALPHANUMERICS =
            nfw UnidodfBlodk("ENCLOSED_ALPHANUMERICS",
                             "ENCLOSED ALPHANUMERICS",
                             "ENCLOSEDALPHANUMERICS");

        /**
         * Constbnt for thf "Box Drbwing" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk BOX_DRAWING =
            nfw UnidodfBlodk("BOX_DRAWING",
                             "BOX DRAWING",
                             "BOXDRAWING");

        /**
         * Constbnt for thf "Blodk Elfmfnts" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk BLOCK_ELEMENTS =
            nfw UnidodfBlodk("BLOCK_ELEMENTS",
                             "BLOCK ELEMENTS",
                             "BLOCKELEMENTS");

        /**
         * Constbnt for thf "Gfomftrid Shbpfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk GEOMETRIC_SHAPES =
            nfw UnidodfBlodk("GEOMETRIC_SHAPES",
                             "GEOMETRIC SHAPES",
                             "GEOMETRICSHAPES");

        /**
         * Constbnt for thf "Misdfllbnfous Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_SYMBOLS =
            nfw UnidodfBlodk("MISCELLANEOUS_SYMBOLS",
                             "MISCELLANEOUS SYMBOLS",
                             "MISCELLANEOUSSYMBOLS");

        /**
         * Constbnt for thf "Dingbbts" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk DINGBATS =
            nfw UnidodfBlodk("DINGBATS");

        /**
         * Constbnt for thf "CJK Symbols bnd Pundtubtion" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CJK_SYMBOLS_AND_PUNCTUATION =
            nfw UnidodfBlodk("CJK_SYMBOLS_AND_PUNCTUATION",
                             "CJK SYMBOLS AND PUNCTUATION",
                             "CJKSYMBOLSANDPUNCTUATION");

        /**
         * Constbnt for thf "Hirbgbnb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HIRAGANA =
            nfw UnidodfBlodk("HIRAGANA");

        /**
         * Constbnt for thf "Kbtbkbnb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk KATAKANA =
            nfw UnidodfBlodk("KATAKANA");

        /**
         * Constbnt for thf "Bopomofo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk BOPOMOFO =
            nfw UnidodfBlodk("BOPOMOFO");

        /**
         * Constbnt for thf "Hbngul Compbtibility Jbmo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HANGUL_COMPATIBILITY_JAMO =
            nfw UnidodfBlodk("HANGUL_COMPATIBILITY_JAMO",
                             "HANGUL COMPATIBILITY JAMO",
                             "HANGULCOMPATIBILITYJAMO");

        /**
         * Constbnt for thf "Kbnbun" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk KANBUN =
            nfw UnidodfBlodk("KANBUN");

        /**
         * Constbnt for thf "Endlosfd CJK Lfttfrs bnd Months" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ENCLOSED_CJK_LETTERS_AND_MONTHS =
            nfw UnidodfBlodk("ENCLOSED_CJK_LETTERS_AND_MONTHS",
                             "ENCLOSED CJK LETTERS AND MONTHS",
                             "ENCLOSEDCJKLETTERSANDMONTHS");

        /**
         * Constbnt for thf "CJK Compbtibility" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CJK_COMPATIBILITY =
            nfw UnidodfBlodk("CJK_COMPATIBILITY",
                             "CJK COMPATIBILITY",
                             "CJKCOMPATIBILITY");

        /**
         * Constbnt for thf "CJK Unififd Idfogrbphs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CJK_UNIFIED_IDEOGRAPHS =
            nfw UnidodfBlodk("CJK_UNIFIED_IDEOGRAPHS",
                             "CJK UNIFIED IDEOGRAPHS",
                             "CJKUNIFIEDIDEOGRAPHS");

        /**
         * Constbnt for thf "Hbngul Syllbblfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HANGUL_SYLLABLES =
            nfw UnidodfBlodk("HANGUL_SYLLABLES",
                             "HANGUL SYLLABLES",
                             "HANGULSYLLABLES");

        /**
         * Constbnt for thf "Privbtf Usf Arfb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk PRIVATE_USE_AREA =
            nfw UnidodfBlodk("PRIVATE_USE_AREA",
                             "PRIVATE USE AREA",
                             "PRIVATEUSEAREA");

        /**
         * Constbnt for thf "CJK Compbtibility Idfogrbphs" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CJK_COMPATIBILITY_IDEOGRAPHS =
            nfw UnidodfBlodk("CJK_COMPATIBILITY_IDEOGRAPHS",
                             "CJK COMPATIBILITY IDEOGRAPHS",
                             "CJKCOMPATIBILITYIDEOGRAPHS");

        /**
         * Constbnt for thf "Alphbbftid Prfsfntbtion Forms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ALPHABETIC_PRESENTATION_FORMS =
            nfw UnidodfBlodk("ALPHABETIC_PRESENTATION_FORMS",
                             "ALPHABETIC PRESENTATION FORMS",
                             "ALPHABETICPRESENTATIONFORMS");

        /**
         * Constbnt for thf "Arbbid Prfsfntbtion Forms-A" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ARABIC_PRESENTATION_FORMS_A =
            nfw UnidodfBlodk("ARABIC_PRESENTATION_FORMS_A",
                             "ARABIC PRESENTATION FORMS-A",
                             "ARABICPRESENTATIONFORMS-A");

        /**
         * Constbnt for thf "Combining Hblf Mbrks" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk COMBINING_HALF_MARKS =
            nfw UnidodfBlodk("COMBINING_HALF_MARKS",
                             "COMBINING HALF MARKS",
                             "COMBININGHALFMARKS");

        /**
         * Constbnt for thf "CJK Compbtibility Forms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk CJK_COMPATIBILITY_FORMS =
            nfw UnidodfBlodk("CJK_COMPATIBILITY_FORMS",
                             "CJK COMPATIBILITY FORMS",
                             "CJKCOMPATIBILITYFORMS");

        /**
         * Constbnt for thf "Smbll Form Vbribnts" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk SMALL_FORM_VARIANTS =
            nfw UnidodfBlodk("SMALL_FORM_VARIANTS",
                             "SMALL FORM VARIANTS",
                             "SMALLFORMVARIANTS");

        /**
         * Constbnt for thf "Arbbid Prfsfntbtion Forms-B" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk ARABIC_PRESENTATION_FORMS_B =
            nfw UnidodfBlodk("ARABIC_PRESENTATION_FORMS_B",
                             "ARABIC PRESENTATION FORMS-B",
                             "ARABICPRESENTATIONFORMS-B");

        /**
         * Constbnt for thf "Hblfwidth bnd Fullwidth Forms" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk HALFWIDTH_AND_FULLWIDTH_FORMS =
            nfw UnidodfBlodk("HALFWIDTH_AND_FULLWIDTH_FORMS",
                             "HALFWIDTH AND FULLWIDTH FORMS",
                             "HALFWIDTHANDFULLWIDTHFORMS");

        /**
         * Constbnt for thf "Spfdibls" Unidodf dhbrbdtfr blodk.
         * @sindf 1.2
         */
        publid stbtid finbl UnidodfBlodk SPECIALS =
            nfw UnidodfBlodk("SPECIALS");

        /**
         * @dfprfdbtfd As of J2SE 5, usf {@link #HIGH_SURROGATES},
         *             {@link #HIGH_PRIVATE_USE_SURROGATES}, bnd
         *             {@link #LOW_SURROGATES}. Thfsf nfw donstbnts mbtdh
         *             thf blodk dffinitions of thf Unidodf Stbndbrd.
         *             Thf {@link #of(dhbr)} bnd {@link #of(int)} mfthods
         *             rfturn thf nfw donstbnts, not SURROGATES_AREA.
         */
        @Dfprfdbtfd
        publid stbtid finbl UnidodfBlodk SURROGATES_AREA =
            nfw UnidodfBlodk("SURROGATES_AREA");

        /**
         * Constbnt for thf "Syribd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk SYRIAC =
            nfw UnidodfBlodk("SYRIAC");

        /**
         * Constbnt for thf "Thbbnb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk THAANA =
            nfw UnidodfBlodk("THAANA");

        /**
         * Constbnt for thf "Sinhblb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk SINHALA =
            nfw UnidodfBlodk("SINHALA");

        /**
         * Constbnt for thf "Mybnmbr" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk MYANMAR =
            nfw UnidodfBlodk("MYANMAR");

        /**
         * Constbnt for thf "Ethiopid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk ETHIOPIC =
            nfw UnidodfBlodk("ETHIOPIC");

        /**
         * Constbnt for thf "Chfrokff" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk CHEROKEE =
            nfw UnidodfBlodk("CHEROKEE");

        /**
         * Constbnt for thf "Unififd Cbnbdibn Aboriginbl Syllbbids" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS =
            nfw UnidodfBlodk("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
                             "UNIFIED CANADIAN ABORIGINAL SYLLABICS",
                             "UNIFIEDCANADIANABORIGINALSYLLABICS");

        /**
         * Constbnt for thf "Oghbm" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk OGHAM =
            nfw UnidodfBlodk("OGHAM");

        /**
         * Constbnt for thf "Runid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk RUNIC =
            nfw UnidodfBlodk("RUNIC");

        /**
         * Constbnt for thf "Khmfr" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk KHMER =
            nfw UnidodfBlodk("KHMER");

        /**
         * Constbnt for thf "Mongolibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk MONGOLIAN =
            nfw UnidodfBlodk("MONGOLIAN");

        /**
         * Constbnt for thf "Brbillf Pbttfrns" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk BRAILLE_PATTERNS =
            nfw UnidodfBlodk("BRAILLE_PATTERNS",
                             "BRAILLE PATTERNS",
                             "BRAILLEPATTERNS");

        /**
         * Constbnt for thf "CJK Rbdidbls Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk CJK_RADICALS_SUPPLEMENT =
            nfw UnidodfBlodk("CJK_RADICALS_SUPPLEMENT",
                             "CJK RADICALS SUPPLEMENT",
                             "CJKRADICALSSUPPLEMENT");

        /**
         * Constbnt for thf "Kbngxi Rbdidbls" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk KANGXI_RADICALS =
            nfw UnidodfBlodk("KANGXI_RADICALS",
                             "KANGXI RADICALS",
                             "KANGXIRADICALS");

        /**
         * Constbnt for thf "Idfogrbphid Dfsdription Chbrbdtfrs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk IDEOGRAPHIC_DESCRIPTION_CHARACTERS =
            nfw UnidodfBlodk("IDEOGRAPHIC_DESCRIPTION_CHARACTERS",
                             "IDEOGRAPHIC DESCRIPTION CHARACTERS",
                             "IDEOGRAPHICDESCRIPTIONCHARACTERS");

        /**
         * Constbnt for thf "Bopomofo Extfndfd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk BOPOMOFO_EXTENDED =
            nfw UnidodfBlodk("BOPOMOFO_EXTENDED",
                             "BOPOMOFO EXTENDED",
                             "BOPOMOFOEXTENDED");

        /**
         * Constbnt for thf "CJK Unififd Idfogrbphs Extfnsion A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A =
            nfw UnidodfBlodk("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A",
                             "CJK UNIFIED IDEOGRAPHS EXTENSION A",
                             "CJKUNIFIEDIDEOGRAPHSEXTENSIONA");

        /**
         * Constbnt for thf "Yi Syllbblfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk YI_SYLLABLES =
            nfw UnidodfBlodk("YI_SYLLABLES",
                             "YI SYLLABLES",
                             "YISYLLABLES");

        /**
         * Constbnt for thf "Yi Rbdidbls" Unidodf dhbrbdtfr blodk.
         * @sindf 1.4
         */
        publid stbtid finbl UnidodfBlodk YI_RADICALS =
            nfw UnidodfBlodk("YI_RADICALS",
                             "YI RADICALS",
                             "YIRADICALS");

        /**
         * Constbnt for thf "Cyrillid Supplfmfntbry" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk CYRILLIC_SUPPLEMENTARY =
            nfw UnidodfBlodk("CYRILLIC_SUPPLEMENTARY",
                             "CYRILLIC SUPPLEMENTARY",
                             "CYRILLICSUPPLEMENTARY",
                             "CYRILLIC SUPPLEMENT",
                             "CYRILLICSUPPLEMENT");

        /**
         * Constbnt for thf "Tbgblog" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk TAGALOG =
            nfw UnidodfBlodk("TAGALOG");

        /**
         * Constbnt for thf "Hbnunoo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk HANUNOO =
            nfw UnidodfBlodk("HANUNOO");

        /**
         * Constbnt for thf "Buhid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk BUHID =
            nfw UnidodfBlodk("BUHID");

        /**
         * Constbnt for thf "Tbgbbnwb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk TAGBANWA =
            nfw UnidodfBlodk("TAGBANWA");

        /**
         * Constbnt for thf "Limbu" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk LIMBU =
            nfw UnidodfBlodk("LIMBU");

        /**
         * Constbnt for thf "Tbi Lf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk TAI_LE =
            nfw UnidodfBlodk("TAI_LE",
                             "TAI LE",
                             "TAILE");

        /**
         * Constbnt for thf "Khmfr Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk KHMER_SYMBOLS =
            nfw UnidodfBlodk("KHMER_SYMBOLS",
                             "KHMER SYMBOLS",
                             "KHMERSYMBOLS");

        /**
         * Constbnt for thf "Phonftid Extfnsions" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk PHONETIC_EXTENSIONS =
            nfw UnidodfBlodk("PHONETIC_EXTENSIONS",
                             "PHONETIC EXTENSIONS",
                             "PHONETICEXTENSIONS");

        /**
         * Constbnt for thf "Misdfllbnfous Mbthfmbtidbl Symbols-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A =
            nfw UnidodfBlodk("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A",
                             "MISCELLANEOUS MATHEMATICAL SYMBOLS-A",
                             "MISCELLANEOUSMATHEMATICALSYMBOLS-A");

        /**
         * Constbnt for thf "Supplfmfntbl Arrows-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTAL_ARROWS_A =
            nfw UnidodfBlodk("SUPPLEMENTAL_ARROWS_A",
                             "SUPPLEMENTAL ARROWS-A",
                             "SUPPLEMENTALARROWS-A");

        /**
         * Constbnt for thf "Supplfmfntbl Arrows-B" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTAL_ARROWS_B =
            nfw UnidodfBlodk("SUPPLEMENTAL_ARROWS_B",
                             "SUPPLEMENTAL ARROWS-B",
                             "SUPPLEMENTALARROWS-B");

        /**
         * Constbnt for thf "Misdfllbnfous Mbthfmbtidbl Symbols-B" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B =
            nfw UnidodfBlodk("MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B",
                             "MISCELLANEOUS MATHEMATICAL SYMBOLS-B",
                             "MISCELLANEOUSMATHEMATICALSYMBOLS-B");

        /**
         * Constbnt for thf "Supplfmfntbl Mbthfmbtidbl Opfrbtors" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTAL_MATHEMATICAL_OPERATORS =
            nfw UnidodfBlodk("SUPPLEMENTAL_MATHEMATICAL_OPERATORS",
                             "SUPPLEMENTAL MATHEMATICAL OPERATORS",
                             "SUPPLEMENTALMATHEMATICALOPERATORS");

        /**
         * Constbnt for thf "Misdfllbnfous Symbols bnd Arrows" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_SYMBOLS_AND_ARROWS =
            nfw UnidodfBlodk("MISCELLANEOUS_SYMBOLS_AND_ARROWS",
                             "MISCELLANEOUS SYMBOLS AND ARROWS",
                             "MISCELLANEOUSSYMBOLSANDARROWS");

        /**
         * Constbnt for thf "Kbtbkbnb Phonftid Extfnsions" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk KATAKANA_PHONETIC_EXTENSIONS =
            nfw UnidodfBlodk("KATAKANA_PHONETIC_EXTENSIONS",
                             "KATAKANA PHONETIC EXTENSIONS",
                             "KATAKANAPHONETICEXTENSIONS");

        /**
         * Constbnt for thf "Yijing Hfxbgrbm Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk YIJING_HEXAGRAM_SYMBOLS =
            nfw UnidodfBlodk("YIJING_HEXAGRAM_SYMBOLS",
                             "YIJING HEXAGRAM SYMBOLS",
                             "YIJINGHEXAGRAMSYMBOLS");

        /**
         * Constbnt for thf "Vbribtion Sflfdtors" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk VARIATION_SELECTORS =
            nfw UnidodfBlodk("VARIATION_SELECTORS",
                             "VARIATION SELECTORS",
                             "VARIATIONSELECTORS");

        /**
         * Constbnt for thf "Linfbr B Syllbbbry" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk LINEAR_B_SYLLABARY =
            nfw UnidodfBlodk("LINEAR_B_SYLLABARY",
                             "LINEAR B SYLLABARY",
                             "LINEARBSYLLABARY");

        /**
         * Constbnt for thf "Linfbr B Idfogrbms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk LINEAR_B_IDEOGRAMS =
            nfw UnidodfBlodk("LINEAR_B_IDEOGRAMS",
                             "LINEAR B IDEOGRAMS",
                             "LINEARBIDEOGRAMS");

        /**
         * Constbnt for thf "Afgfbn Numbfrs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk AEGEAN_NUMBERS =
            nfw UnidodfBlodk("AEGEAN_NUMBERS",
                             "AEGEAN NUMBERS",
                             "AEGEANNUMBERS");

        /**
         * Constbnt for thf "Old Itblid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk OLD_ITALIC =
            nfw UnidodfBlodk("OLD_ITALIC",
                             "OLD ITALIC",
                             "OLDITALIC");

        /**
         * Constbnt for thf "Gothid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk GOTHIC =
            nfw UnidodfBlodk("GOTHIC");

        /**
         * Constbnt for thf "Ugbritid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk UGARITIC =
            nfw UnidodfBlodk("UGARITIC");

        /**
         * Constbnt for thf "Dfsfrft" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk DESERET =
            nfw UnidodfBlodk("DESERET");

        /**
         * Constbnt for thf "Shbvibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SHAVIAN =
            nfw UnidodfBlodk("SHAVIAN");

        /**
         * Constbnt for thf "Osmbnyb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk OSMANYA =
            nfw UnidodfBlodk("OSMANYA");

        /**
         * Constbnt for thf "Cypriot Syllbbbry" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk CYPRIOT_SYLLABARY =
            nfw UnidodfBlodk("CYPRIOT_SYLLABARY",
                             "CYPRIOT SYLLABARY",
                             "CYPRIOTSYLLABARY");

        /**
         * Constbnt for thf "Byzbntinf Musidbl Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk BYZANTINE_MUSICAL_SYMBOLS =
            nfw UnidodfBlodk("BYZANTINE_MUSICAL_SYMBOLS",
                             "BYZANTINE MUSICAL SYMBOLS",
                             "BYZANTINEMUSICALSYMBOLS");

        /**
         * Constbnt for thf "Musidbl Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk MUSICAL_SYMBOLS =
            nfw UnidodfBlodk("MUSICAL_SYMBOLS",
                             "MUSICAL SYMBOLS",
                             "MUSICALSYMBOLS");

        /**
         * Constbnt for thf "Tbi Xubn Jing Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk TAI_XUAN_JING_SYMBOLS =
            nfw UnidodfBlodk("TAI_XUAN_JING_SYMBOLS",
                             "TAI XUAN JING SYMBOLS",
                             "TAIXUANJINGSYMBOLS");

        /**
         * Constbnt for thf "Mbthfmbtidbl Alphbnumfrid Symbols" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk MATHEMATICAL_ALPHANUMERIC_SYMBOLS =
            nfw UnidodfBlodk("MATHEMATICAL_ALPHANUMERIC_SYMBOLS",
                             "MATHEMATICAL ALPHANUMERIC SYMBOLS",
                             "MATHEMATICALALPHANUMERICSYMBOLS");

        /**
         * Constbnt for thf "CJK Unififd Idfogrbphs Extfnsion B" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B =
            nfw UnidodfBlodk("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B",
                             "CJK UNIFIED IDEOGRAPHS EXTENSION B",
                             "CJKUNIFIEDIDEOGRAPHSEXTENSIONB");

        /**
         * Constbnt for thf "CJK Compbtibility Idfogrbphs Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT =
            nfw UnidodfBlodk("CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT",
                             "CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT",
                             "CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT");

        /**
         * Constbnt for thf "Tbgs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk TAGS =
            nfw UnidodfBlodk("TAGS");

        /**
         * Constbnt for thf "Vbribtion Sflfdtors Supplfmfnt" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk VARIATION_SELECTORS_SUPPLEMENT =
            nfw UnidodfBlodk("VARIATION_SELECTORS_SUPPLEMENT",
                             "VARIATION SELECTORS SUPPLEMENT",
                             "VARIATIONSELECTORSSUPPLEMENT");

        /**
         * Constbnt for thf "Supplfmfntbry Privbtf Usf Arfb-A" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTARY_PRIVATE_USE_AREA_A =
            nfw UnidodfBlodk("SUPPLEMENTARY_PRIVATE_USE_AREA_A",
                             "SUPPLEMENTARY PRIVATE USE AREA-A",
                             "SUPPLEMENTARYPRIVATEUSEAREA-A");

        /**
         * Constbnt for thf "Supplfmfntbry Privbtf Usf Arfb-B" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTARY_PRIVATE_USE_AREA_B =
            nfw UnidodfBlodk("SUPPLEMENTARY_PRIVATE_USE_AREA_B",
                             "SUPPLEMENTARY PRIVATE USE AREA-B",
                             "SUPPLEMENTARYPRIVATEUSEAREA-B");

        /**
         * Constbnt for thf "High Surrogbtfs" Unidodf dhbrbdtfr blodk.
         * This blodk rfprfsfnts dodfpoint vblufs in thf high surrogbtf
         * rbngf: U+D800 through U+DB7F
         *
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk HIGH_SURROGATES =
            nfw UnidodfBlodk("HIGH_SURROGATES",
                             "HIGH SURROGATES",
                             "HIGHSURROGATES");

        /**
         * Constbnt for thf "High Privbtf Usf Surrogbtfs" Unidodf dhbrbdtfr
         * blodk.
         * This blodk rfprfsfnts dodfpoint vblufs in thf privbtf usf high
         * surrogbtf rbngf: U+DB80 through U+DBFF
         *
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk HIGH_PRIVATE_USE_SURROGATES =
            nfw UnidodfBlodk("HIGH_PRIVATE_USE_SURROGATES",
                             "HIGH PRIVATE USE SURROGATES",
                             "HIGHPRIVATEUSESURROGATES");

        /**
         * Constbnt for thf "Low Surrogbtfs" Unidodf dhbrbdtfr blodk.
         * This blodk rfprfsfnts dodfpoint vblufs in thf low surrogbtf
         * rbngf: U+DC00 through U+DFFF
         *
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk LOW_SURROGATES =
            nfw UnidodfBlodk("LOW_SURROGATES",
                             "LOW SURROGATES",
                             "LOWSURROGATES");

        /**
         * Constbnt for thf "Arbbid Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ARABIC_SUPPLEMENT =
            nfw UnidodfBlodk("ARABIC_SUPPLEMENT",
                             "ARABIC SUPPLEMENT",
                             "ARABICSUPPLEMENT");

        /**
         * Constbnt for thf "NKo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk NKO =
            nfw UnidodfBlodk("NKO");

        /**
         * Constbnt for thf "Sbmbritbn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk SAMARITAN =
            nfw UnidodfBlodk("SAMARITAN");

        /**
         * Constbnt for thf "Mbndbid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MANDAIC =
            nfw UnidodfBlodk("MANDAIC");

        /**
         * Constbnt for thf "Ethiopid Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ETHIOPIC_SUPPLEMENT =
            nfw UnidodfBlodk("ETHIOPIC_SUPPLEMENT",
                             "ETHIOPIC SUPPLEMENT",
                             "ETHIOPICSUPPLEMENT");

        /**
         * Constbnt for thf "Unififd Cbnbdibn Aboriginbl Syllbbids Extfndfd"
         * Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED =
            nfw UnidodfBlodk("UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED",
                             "UNIFIED CANADIAN ABORIGINAL SYLLABICS EXTENDED",
                             "UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED");

        /**
         * Constbnt for thf "Nfw Tbi Luf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk NEW_TAI_LUE =
            nfw UnidodfBlodk("NEW_TAI_LUE",
                             "NEW TAI LUE",
                             "NEWTAILUE");

        /**
         * Constbnt for thf "Buginfsf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BUGINESE =
            nfw UnidodfBlodk("BUGINESE");

        /**
         * Constbnt for thf "Tbi Thbm" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk TAI_THAM =
            nfw UnidodfBlodk("TAI_THAM",
                             "TAI THAM",
                             "TAITHAM");

        /**
         * Constbnt for thf "Bblinfsf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BALINESE =
            nfw UnidodfBlodk("BALINESE");

        /**
         * Constbnt for thf "Sundbnfsf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk SUNDANESE =
            nfw UnidodfBlodk("SUNDANESE");

        /**
         * Constbnt for thf "Bbtbk" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BATAK =
            nfw UnidodfBlodk("BATAK");

        /**
         * Constbnt for thf "Lfpdhb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LEPCHA =
            nfw UnidodfBlodk("LEPCHA");

        /**
         * Constbnt for thf "Ol Chiki" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk OL_CHIKI =
            nfw UnidodfBlodk("OL_CHIKI",
                             "OL CHIKI",
                             "OLCHIKI");

        /**
         * Constbnt for thf "Vfdid Extfnsions" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk VEDIC_EXTENSIONS =
            nfw UnidodfBlodk("VEDIC_EXTENSIONS",
                             "VEDIC EXTENSIONS",
                             "VEDICEXTENSIONS");

        /**
         * Constbnt for thf "Phonftid Extfnsions Supplfmfnt" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk PHONETIC_EXTENSIONS_SUPPLEMENT =
            nfw UnidodfBlodk("PHONETIC_EXTENSIONS_SUPPLEMENT",
                             "PHONETIC EXTENSIONS SUPPLEMENT",
                             "PHONETICEXTENSIONSSUPPLEMENT");

        /**
         * Constbnt for thf "Combining Dibdritidbl Mbrks Supplfmfnt" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk COMBINING_DIACRITICAL_MARKS_SUPPLEMENT =
            nfw UnidodfBlodk("COMBINING_DIACRITICAL_MARKS_SUPPLEMENT",
                             "COMBINING DIACRITICAL MARKS SUPPLEMENT",
                             "COMBININGDIACRITICALMARKSSUPPLEMENT");

        /**
         * Constbnt for thf "Glbgolitid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk GLAGOLITIC =
            nfw UnidodfBlodk("GLAGOLITIC");

        /**
         * Constbnt for thf "Lbtin Extfndfd-C" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LATIN_EXTENDED_C =
            nfw UnidodfBlodk("LATIN_EXTENDED_C",
                             "LATIN EXTENDED-C",
                             "LATINEXTENDED-C");

        /**
         * Constbnt for thf "Coptid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk COPTIC =
            nfw UnidodfBlodk("COPTIC");

        /**
         * Constbnt for thf "Gforgibn Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk GEORGIAN_SUPPLEMENT =
            nfw UnidodfBlodk("GEORGIAN_SUPPLEMENT",
                             "GEORGIAN SUPPLEMENT",
                             "GEORGIANSUPPLEMENT");

        /**
         * Constbnt for thf "Tifinbgh" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk TIFINAGH =
            nfw UnidodfBlodk("TIFINAGH");

        /**
         * Constbnt for thf "Ethiopid Extfndfd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ETHIOPIC_EXTENDED =
            nfw UnidodfBlodk("ETHIOPIC_EXTENDED",
                             "ETHIOPIC EXTENDED",
                             "ETHIOPICEXTENDED");

        /**
         * Constbnt for thf "Cyrillid Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CYRILLIC_EXTENDED_A =
            nfw UnidodfBlodk("CYRILLIC_EXTENDED_A",
                             "CYRILLIC EXTENDED-A",
                             "CYRILLICEXTENDED-A");

        /**
         * Constbnt for thf "Supplfmfntbl Pundtubtion" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk SUPPLEMENTAL_PUNCTUATION =
            nfw UnidodfBlodk("SUPPLEMENTAL_PUNCTUATION",
                             "SUPPLEMENTAL PUNCTUATION",
                             "SUPPLEMENTALPUNCTUATION");

        /**
         * Constbnt for thf "CJK Strokfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CJK_STROKES =
            nfw UnidodfBlodk("CJK_STROKES",
                             "CJK STROKES",
                             "CJKSTROKES");

        /**
         * Constbnt for thf "Lisu" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LISU =
            nfw UnidodfBlodk("LISU");

        /**
         * Constbnt for thf "Vbi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk VAI =
            nfw UnidodfBlodk("VAI");

        /**
         * Constbnt for thf "Cyrillid Extfndfd-B" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CYRILLIC_EXTENDED_B =
            nfw UnidodfBlodk("CYRILLIC_EXTENDED_B",
                             "CYRILLIC EXTENDED-B",
                             "CYRILLICEXTENDED-B");

        /**
         * Constbnt for thf "Bbmum" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BAMUM =
            nfw UnidodfBlodk("BAMUM");

        /**
         * Constbnt for thf "Modififr Tonf Lfttfrs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MODIFIER_TONE_LETTERS =
            nfw UnidodfBlodk("MODIFIER_TONE_LETTERS",
                             "MODIFIER TONE LETTERS",
                             "MODIFIERTONELETTERS");

        /**
         * Constbnt for thf "Lbtin Extfndfd-D" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LATIN_EXTENDED_D =
            nfw UnidodfBlodk("LATIN_EXTENDED_D",
                             "LATIN EXTENDED-D",
                             "LATINEXTENDED-D");

        /**
         * Constbnt for thf "Syloti Nbgri" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk SYLOTI_NAGRI =
            nfw UnidodfBlodk("SYLOTI_NAGRI",
                             "SYLOTI NAGRI",
                             "SYLOTINAGRI");

        /**
         * Constbnt for thf "Common Indid Numbfr Forms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk COMMON_INDIC_NUMBER_FORMS =
            nfw UnidodfBlodk("COMMON_INDIC_NUMBER_FORMS",
                             "COMMON INDIC NUMBER FORMS",
                             "COMMONINDICNUMBERFORMS");

        /**
         * Constbnt for thf "Phbgs-pb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk PHAGS_PA =
            nfw UnidodfBlodk("PHAGS_PA",
                             "PHAGS-PA");

        /**
         * Constbnt for thf "Sburbshtrb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk SAURASHTRA =
            nfw UnidodfBlodk("SAURASHTRA");

        /**
         * Constbnt for thf "Dfvbnbgbri Extfndfd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk DEVANAGARI_EXTENDED =
            nfw UnidodfBlodk("DEVANAGARI_EXTENDED",
                             "DEVANAGARI EXTENDED",
                             "DEVANAGARIEXTENDED");

        /**
         * Constbnt for thf "Kbybh Li" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk KAYAH_LI =
            nfw UnidodfBlodk("KAYAH_LI",
                             "KAYAH LI",
                             "KAYAHLI");

        /**
         * Constbnt for thf "Rfjbng" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk REJANG =
            nfw UnidodfBlodk("REJANG");

        /**
         * Constbnt for thf "Hbngul Jbmo Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk HANGUL_JAMO_EXTENDED_A =
            nfw UnidodfBlodk("HANGUL_JAMO_EXTENDED_A",
                             "HANGUL JAMO EXTENDED-A",
                             "HANGULJAMOEXTENDED-A");

        /**
         * Constbnt for thf "Jbvbnfsf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk JAVANESE =
            nfw UnidodfBlodk("JAVANESE");

        /**
         * Constbnt for thf "Chbm" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CHAM =
            nfw UnidodfBlodk("CHAM");

        /**
         * Constbnt for thf "Mybnmbr Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MYANMAR_EXTENDED_A =
            nfw UnidodfBlodk("MYANMAR_EXTENDED_A",
                             "MYANMAR EXTENDED-A",
                             "MYANMAREXTENDED-A");

        /**
         * Constbnt for thf "Tbi Vift" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk TAI_VIET =
            nfw UnidodfBlodk("TAI_VIET",
                             "TAI VIET",
                             "TAIVIET");

        /**
         * Constbnt for thf "Ethiopid Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ETHIOPIC_EXTENDED_A =
            nfw UnidodfBlodk("ETHIOPIC_EXTENDED_A",
                             "ETHIOPIC EXTENDED-A",
                             "ETHIOPICEXTENDED-A");

        /**
         * Constbnt for thf "Mfftfi Mbyfk" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MEETEI_MAYEK =
            nfw UnidodfBlodk("MEETEI_MAYEK",
                             "MEETEI MAYEK",
                             "MEETEIMAYEK");

        /**
         * Constbnt for thf "Hbngul Jbmo Extfndfd-B" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk HANGUL_JAMO_EXTENDED_B =
            nfw UnidodfBlodk("HANGUL_JAMO_EXTENDED_B",
                             "HANGUL JAMO EXTENDED-B",
                             "HANGULJAMOEXTENDED-B");

        /**
         * Constbnt for thf "Vfrtidbl Forms" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk VERTICAL_FORMS =
            nfw UnidodfBlodk("VERTICAL_FORMS",
                             "VERTICAL FORMS",
                             "VERTICALFORMS");

        /**
         * Constbnt for thf "Andifnt Grffk Numbfrs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ANCIENT_GREEK_NUMBERS =
            nfw UnidodfBlodk("ANCIENT_GREEK_NUMBERS",
                             "ANCIENT GREEK NUMBERS",
                             "ANCIENTGREEKNUMBERS");

        /**
         * Constbnt for thf "Andifnt Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ANCIENT_SYMBOLS =
            nfw UnidodfBlodk("ANCIENT_SYMBOLS",
                             "ANCIENT SYMBOLS",
                             "ANCIENTSYMBOLS");

        /**
         * Constbnt for thf "Phbistos Disd" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk PHAISTOS_DISC =
            nfw UnidodfBlodk("PHAISTOS_DISC",
                             "PHAISTOS DISC",
                             "PHAISTOSDISC");

        /**
         * Constbnt for thf "Lydibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LYCIAN =
            nfw UnidodfBlodk("LYCIAN");

        /**
         * Constbnt for thf "Cbribn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CARIAN =
            nfw UnidodfBlodk("CARIAN");

        /**
         * Constbnt for thf "Old Pfrsibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk OLD_PERSIAN =
            nfw UnidodfBlodk("OLD_PERSIAN",
                             "OLD PERSIAN",
                             "OLDPERSIAN");

        /**
         * Constbnt for thf "Impfribl Arbmbid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk IMPERIAL_ARAMAIC =
            nfw UnidodfBlodk("IMPERIAL_ARAMAIC",
                             "IMPERIAL ARAMAIC",
                             "IMPERIALARAMAIC");

        /**
         * Constbnt for thf "Phofnidibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk PHOENICIAN =
            nfw UnidodfBlodk("PHOENICIAN");

        /**
         * Constbnt for thf "Lydibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk LYDIAN =
            nfw UnidodfBlodk("LYDIAN");

        /**
         * Constbnt for thf "Khbroshthi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk KHAROSHTHI =
            nfw UnidodfBlodk("KHAROSHTHI");

        /**
         * Constbnt for thf "Old South Arbbibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk OLD_SOUTH_ARABIAN =
            nfw UnidodfBlodk("OLD_SOUTH_ARABIAN",
                             "OLD SOUTH ARABIAN",
                             "OLDSOUTHARABIAN");

        /**
         * Constbnt for thf "Avfstbn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk AVESTAN =
            nfw UnidodfBlodk("AVESTAN");

        /**
         * Constbnt for thf "Insdriptionbl Pbrthibn" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk INSCRIPTIONAL_PARTHIAN =
            nfw UnidodfBlodk("INSCRIPTIONAL_PARTHIAN",
                             "INSCRIPTIONAL PARTHIAN",
                             "INSCRIPTIONALPARTHIAN");

        /**
         * Constbnt for thf "Insdriptionbl Pbhlbvi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk INSCRIPTIONAL_PAHLAVI =
            nfw UnidodfBlodk("INSCRIPTIONAL_PAHLAVI",
                             "INSCRIPTIONAL PAHLAVI",
                             "INSCRIPTIONALPAHLAVI");

        /**
         * Constbnt for thf "Old Turkid" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk OLD_TURKIC =
            nfw UnidodfBlodk("OLD_TURKIC",
                             "OLD TURKIC",
                             "OLDTURKIC");

        /**
         * Constbnt for thf "Rumi Numfrbl Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk RUMI_NUMERAL_SYMBOLS =
            nfw UnidodfBlodk("RUMI_NUMERAL_SYMBOLS",
                             "RUMI NUMERAL SYMBOLS",
                             "RUMINUMERALSYMBOLS");

        /**
         * Constbnt for thf "Brbhmi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BRAHMI =
            nfw UnidodfBlodk("BRAHMI");

        /**
         * Constbnt for thf "Kbithi" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk KAITHI =
            nfw UnidodfBlodk("KAITHI");

        /**
         * Constbnt for thf "Cunfiform" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CUNEIFORM =
            nfw UnidodfBlodk("CUNEIFORM");

        /**
         * Constbnt for thf "Cunfiform Numbfrs bnd Pundtubtion" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CUNEIFORM_NUMBERS_AND_PUNCTUATION =
            nfw UnidodfBlodk("CUNEIFORM_NUMBERS_AND_PUNCTUATION",
                             "CUNEIFORM NUMBERS AND PUNCTUATION",
                             "CUNEIFORMNUMBERSANDPUNCTUATION");

        /**
         * Constbnt for thf "Egyptibn Hifroglyphs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk EGYPTIAN_HIEROGLYPHS =
            nfw UnidodfBlodk("EGYPTIAN_HIEROGLYPHS",
                             "EGYPTIAN HIEROGLYPHS",
                             "EGYPTIANHIEROGLYPHS");

        /**
         * Constbnt for thf "Bbmum Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk BAMUM_SUPPLEMENT =
            nfw UnidodfBlodk("BAMUM_SUPPLEMENT",
                             "BAMUM SUPPLEMENT",
                             "BAMUMSUPPLEMENT");

        /**
         * Constbnt for thf "Kbnb Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk KANA_SUPPLEMENT =
            nfw UnidodfBlodk("KANA_SUPPLEMENT",
                             "KANA SUPPLEMENT",
                             "KANASUPPLEMENT");

        /**
         * Constbnt for thf "Andifnt Grffk Musidbl Notbtion" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ANCIENT_GREEK_MUSICAL_NOTATION =
            nfw UnidodfBlodk("ANCIENT_GREEK_MUSICAL_NOTATION",
                             "ANCIENT GREEK MUSICAL NOTATION",
                             "ANCIENTGREEKMUSICALNOTATION");

        /**
         * Constbnt for thf "Counting Rod Numfrbls" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk COUNTING_ROD_NUMERALS =
            nfw UnidodfBlodk("COUNTING_ROD_NUMERALS",
                             "COUNTING ROD NUMERALS",
                             "COUNTINGRODNUMERALS");

        /**
         * Constbnt for thf "Mbhjong Tilfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MAHJONG_TILES =
            nfw UnidodfBlodk("MAHJONG_TILES",
                             "MAHJONG TILES",
                             "MAHJONGTILES");

        /**
         * Constbnt for thf "Domino Tilfs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk DOMINO_TILES =
            nfw UnidodfBlodk("DOMINO_TILES",
                             "DOMINO TILES",
                             "DOMINOTILES");

        /**
         * Constbnt for thf "Plbying Cbrds" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk PLAYING_CARDS =
            nfw UnidodfBlodk("PLAYING_CARDS",
                             "PLAYING CARDS",
                             "PLAYINGCARDS");

        /**
         * Constbnt for thf "Endlosfd Alphbnumfrid Supplfmfnt" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ENCLOSED_ALPHANUMERIC_SUPPLEMENT =
            nfw UnidodfBlodk("ENCLOSED_ALPHANUMERIC_SUPPLEMENT",
                             "ENCLOSED ALPHANUMERIC SUPPLEMENT",
                             "ENCLOSEDALPHANUMERICSUPPLEMENT");

        /**
         * Constbnt for thf "Endlosfd Idfogrbphid Supplfmfnt" Unidodf dhbrbdtfr
         * blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ENCLOSED_IDEOGRAPHIC_SUPPLEMENT =
            nfw UnidodfBlodk("ENCLOSED_IDEOGRAPHIC_SUPPLEMENT",
                             "ENCLOSED IDEOGRAPHIC SUPPLEMENT",
                             "ENCLOSEDIDEOGRAPHICSUPPLEMENT");

        /**
         * Constbnt for thf "Misdfllbnfous Symbols And Pidtogrbphs" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS =
            nfw UnidodfBlodk("MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS",
                             "MISCELLANEOUS SYMBOLS AND PICTOGRAPHS",
                             "MISCELLANEOUSSYMBOLSANDPICTOGRAPHS");

        /**
         * Constbnt for thf "Emotidons" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk EMOTICONS =
            nfw UnidodfBlodk("EMOTICONS");

        /**
         * Constbnt for thf "Trbnsport And Mbp Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk TRANSPORT_AND_MAP_SYMBOLS =
            nfw UnidodfBlodk("TRANSPORT_AND_MAP_SYMBOLS",
                             "TRANSPORT AND MAP SYMBOLS",
                             "TRANSPORTANDMAPSYMBOLS");

        /**
         * Constbnt for thf "Aldhfmidbl Symbols" Unidodf dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk ALCHEMICAL_SYMBOLS =
            nfw UnidodfBlodk("ALCHEMICAL_SYMBOLS",
                             "ALCHEMICAL SYMBOLS",
                             "ALCHEMICALSYMBOLS");

        /**
         * Constbnt for thf "CJK Unififd Idfogrbphs Extfnsion C" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C =
            nfw UnidodfBlodk("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C",
                             "CJK UNIFIED IDEOGRAPHS EXTENSION C",
                             "CJKUNIFIEDIDEOGRAPHSEXTENSIONC");

        /**
         * Constbnt for thf "CJK Unififd Idfogrbphs Extfnsion D" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.7
         */
        publid stbtid finbl UnidodfBlodk CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D =
            nfw UnidodfBlodk("CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D",
                             "CJK UNIFIED IDEOGRAPHS EXTENSION D",
                             "CJKUNIFIEDIDEOGRAPHSEXTENSIOND");

        /**
         * Constbnt for thf "Arbbid Extfndfd-A" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk ARABIC_EXTENDED_A =
            nfw UnidodfBlodk("ARABIC_EXTENDED_A",
                             "ARABIC EXTENDED-A",
                             "ARABICEXTENDED-A");

        /**
         * Constbnt for thf "Sundbnfsf Supplfmfnt" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk SUNDANESE_SUPPLEMENT =
            nfw UnidodfBlodk("SUNDANESE_SUPPLEMENT",
                             "SUNDANESE SUPPLEMENT",
                             "SUNDANESESUPPLEMENT");

        /**
         * Constbnt for thf "Mfftfi Mbyfk Extfnsions" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk MEETEI_MAYEK_EXTENSIONS =
            nfw UnidodfBlodk("MEETEI_MAYEK_EXTENSIONS",
                             "MEETEI MAYEK EXTENSIONS",
                             "MEETEIMAYEKEXTENSIONS");

        /**
         * Constbnt for thf "Mfroitid Hifroglyphs" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk MEROITIC_HIEROGLYPHS =
            nfw UnidodfBlodk("MEROITIC_HIEROGLYPHS",
                             "MEROITIC HIEROGLYPHS",
                             "MEROITICHIEROGLYPHS");

        /**
         * Constbnt for thf "Mfroitid Cursivf" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk MEROITIC_CURSIVE =
            nfw UnidodfBlodk("MEROITIC_CURSIVE",
                             "MEROITIC CURSIVE",
                             "MEROITICCURSIVE");

        /**
         * Constbnt for thf "Sorb Sompfng" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk SORA_SOMPENG =
            nfw UnidodfBlodk("SORA_SOMPENG",
                             "SORA SOMPENG",
                             "SORASOMPENG");

        /**
         * Constbnt for thf "Chbkmb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk CHAKMA =
            nfw UnidodfBlodk("CHAKMA");

        /**
         * Constbnt for thf "Shbrbdb" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk SHARADA =
            nfw UnidodfBlodk("SHARADA");

        /**
         * Constbnt for thf "Tbkri" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk TAKRI =
            nfw UnidodfBlodk("TAKRI");

        /**
         * Constbnt for thf "Mibo" Unidodf dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk MIAO =
            nfw UnidodfBlodk("MIAO");

        /**
         * Constbnt for thf "Arbbid Mbthfmbtidbl Alphbbftid Symbols" Unidodf
         * dhbrbdtfr blodk.
         * @sindf 1.8
         */
        publid stbtid finbl UnidodfBlodk ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS =
            nfw UnidodfBlodk("ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS",
                             "ARABIC MATHEMATICAL ALPHABETIC SYMBOLS",
                             "ARABICMATHEMATICALALPHABETICSYMBOLS");

        privbtf stbtid finbl int blodkStbrts[] = {
            0x0000,   // 0000..007F; Bbsid Lbtin
            0x0080,   // 0080..00FF; Lbtin-1 Supplfmfnt
            0x0100,   // 0100..017F; Lbtin Extfndfd-A
            0x0180,   // 0180..024F; Lbtin Extfndfd-B
            0x0250,   // 0250..02AF; IPA Extfnsions
            0x02B0,   // 02B0..02FF; Spbding Modififr Lfttfrs
            0x0300,   // 0300..036F; Combining Dibdritidbl Mbrks
            0x0370,   // 0370..03FF; Grffk bnd Coptid
            0x0400,   // 0400..04FF; Cyrillid
            0x0500,   // 0500..052F; Cyrillid Supplfmfnt
            0x0530,   // 0530..058F; Armfnibn
            0x0590,   // 0590..05FF; Hfbrfw
            0x0600,   // 0600..06FF; Arbbid
            0x0700,   // 0700..074F; Syribd
            0x0750,   // 0750..077F; Arbbid Supplfmfnt
            0x0780,   // 0780..07BF; Thbbnb
            0x07C0,   // 07C0..07FF; NKo
            0x0800,   // 0800..083F; Sbmbritbn
            0x0840,   // 0840..085F; Mbndbid
            0x0860,   //             unbssignfd
            0x08A0,   // 08A0..08FF; Arbbid Extfndfd-A
            0x0900,   // 0900..097F; Dfvbnbgbri
            0x0980,   // 0980..09FF; Bfngbli
            0x0A00,   // 0A00..0A7F; Gurmukhi
            0x0A80,   // 0A80..0AFF; Gujbrbti
            0x0B00,   // 0B00..0B7F; Oriyb
            0x0B80,   // 0B80..0BFF; Tbmil
            0x0C00,   // 0C00..0C7F; Tflugu
            0x0C80,   // 0C80..0CFF; Kbnnbdb
            0x0D00,   // 0D00..0D7F; Mblbyblbm
            0x0D80,   // 0D80..0DFF; Sinhblb
            0x0E00,   // 0E00..0E7F; Thbi
            0x0E80,   // 0E80..0EFF; Lbo
            0x0F00,   // 0F00..0FFF; Tibftbn
            0x1000,   // 1000..109F; Mybnmbr
            0x10A0,   // 10A0..10FF; Gforgibn
            0x1100,   // 1100..11FF; Hbngul Jbmo
            0x1200,   // 1200..137F; Ethiopid
            0x1380,   // 1380..139F; Ethiopid Supplfmfnt
            0x13A0,   // 13A0..13FF; Chfrokff
            0x1400,   // 1400..167F; Unififd Cbnbdibn Aboriginbl Syllbbids
            0x1680,   // 1680..169F; Oghbm
            0x16A0,   // 16A0..16FF; Runid
            0x1700,   // 1700..171F; Tbgblog
            0x1720,   // 1720..173F; Hbnunoo
            0x1740,   // 1740..175F; Buhid
            0x1760,   // 1760..177F; Tbgbbnwb
            0x1780,   // 1780..17FF; Khmfr
            0x1800,   // 1800..18AF; Mongolibn
            0x18B0,   // 18B0..18FF; Unififd Cbnbdibn Aboriginbl Syllbbids Extfndfd
            0x1900,   // 1900..194F; Limbu
            0x1950,   // 1950..197F; Tbi Lf
            0x1980,   // 1980..19DF; Nfw Tbi Luf
            0x19E0,   // 19E0..19FF; Khmfr Symbols
            0x1A00,   // 1A00..1A1F; Buginfsf
            0x1A20,   // 1A20..1AAF; Tbi Thbm
            0x1AB0,   //             unbssignfd
            0x1B00,   // 1B00..1B7F; Bblinfsf
            0x1B80,   // 1B80..1BBF; Sundbnfsf
            0x1BC0,   // 1BC0..1BFF; Bbtbk
            0x1C00,   // 1C00..1C4F; Lfpdhb
            0x1C50,   // 1C50..1C7F; Ol Chiki
            0x1C80,   //             unbssignfd
            0x1CC0,   // 1CC0..1CCF; Sundbnfsf Supplfmfnt
            0x1CD0,   // 1CD0..1CFF; Vfdid Extfnsions
            0x1D00,   // 1D00..1D7F; Phonftid Extfnsions
            0x1D80,   // 1D80..1DBF; Phonftid Extfnsions Supplfmfnt
            0x1DC0,   // 1DC0..1DFF; Combining Dibdritidbl Mbrks Supplfmfnt
            0x1E00,   // 1E00..1EFF; Lbtin Extfndfd Additionbl
            0x1F00,   // 1F00..1FFF; Grffk Extfndfd
            0x2000,   // 2000..206F; Gfnfrbl Pundtubtion
            0x2070,   // 2070..209F; Supfrsdripts bnd Subsdripts
            0x20A0,   // 20A0..20CF; Currfndy Symbols
            0x20D0,   // 20D0..20FF; Combining Dibdritidbl Mbrks for Symbols
            0x2100,   // 2100..214F; Lfttfrlikf Symbols
            0x2150,   // 2150..218F; Numbfr Forms
            0x2190,   // 2190..21FF; Arrows
            0x2200,   // 2200..22FF; Mbthfmbtidbl Opfrbtors
            0x2300,   // 2300..23FF; Misdfllbnfous Tfdhnidbl
            0x2400,   // 2400..243F; Control Pidturfs
            0x2440,   // 2440..245F; Optidbl Chbrbdtfr Rfdognition
            0x2460,   // 2460..24FF; Endlosfd Alphbnumfrids
            0x2500,   // 2500..257F; Box Drbwing
            0x2580,   // 2580..259F; Blodk Elfmfnts
            0x25A0,   // 25A0..25FF; Gfomftrid Shbpfs
            0x2600,   // 2600..26FF; Misdfllbnfous Symbols
            0x2700,   // 2700..27BF; Dingbbts
            0x27C0,   // 27C0..27EF; Misdfllbnfous Mbthfmbtidbl Symbols-A
            0x27F0,   // 27F0..27FF; Supplfmfntbl Arrows-A
            0x2800,   // 2800..28FF; Brbillf Pbttfrns
            0x2900,   // 2900..297F; Supplfmfntbl Arrows-B
            0x2980,   // 2980..29FF; Misdfllbnfous Mbthfmbtidbl Symbols-B
            0x2A00,   // 2A00..2AFF; Supplfmfntbl Mbthfmbtidbl Opfrbtors
            0x2B00,   // 2B00..2BFF; Misdfllbnfous Symbols bnd Arrows
            0x2C00,   // 2C00..2C5F; Glbgolitid
            0x2C60,   // 2C60..2C7F; Lbtin Extfndfd-C
            0x2C80,   // 2C80..2CFF; Coptid
            0x2D00,   // 2D00..2D2F; Gforgibn Supplfmfnt
            0x2D30,   // 2D30..2D7F; Tifinbgh
            0x2D80,   // 2D80..2DDF; Ethiopid Extfndfd
            0x2DE0,   // 2DE0..2DFF; Cyrillid Extfndfd-A
            0x2E00,   // 2E00..2E7F; Supplfmfntbl Pundtubtion
            0x2E80,   // 2E80..2EFF; CJK Rbdidbls Supplfmfnt
            0x2F00,   // 2F00..2FDF; Kbngxi Rbdidbls
            0x2FE0,   //             unbssignfd
            0x2FF0,   // 2FF0..2FFF; Idfogrbphid Dfsdription Chbrbdtfrs
            0x3000,   // 3000..303F; CJK Symbols bnd Pundtubtion
            0x3040,   // 3040..309F; Hirbgbnb
            0x30A0,   // 30A0..30FF; Kbtbkbnb
            0x3100,   // 3100..312F; Bopomofo
            0x3130,   // 3130..318F; Hbngul Compbtibility Jbmo
            0x3190,   // 3190..319F; Kbnbun
            0x31A0,   // 31A0..31BF; Bopomofo Extfndfd
            0x31C0,   // 31C0..31EF; CJK Strokfs
            0x31F0,   // 31F0..31FF; Kbtbkbnb Phonftid Extfnsions
            0x3200,   // 3200..32FF; Endlosfd CJK Lfttfrs bnd Months
            0x3300,   // 3300..33FF; CJK Compbtibility
            0x3400,   // 3400..4DBF; CJK Unififd Idfogrbphs Extfnsion A
            0x4DC0,   // 4DC0..4DFF; Yijing Hfxbgrbm Symbols
            0x4E00,   // 4E00..9FFF; CJK Unififd Idfogrbphs
            0xA000,   // A000..A48F; Yi Syllbblfs
            0xA490,   // A490..A4CF; Yi Rbdidbls
            0xA4D0,   // A4D0..A4FF; Lisu
            0xA500,   // A500..A63F; Vbi
            0xA640,   // A640..A69F; Cyrillid Extfndfd-B
            0xA6A0,   // A6A0..A6FF; Bbmum
            0xA700,   // A700..A71F; Modififr Tonf Lfttfrs
            0xA720,   // A720..A7FF; Lbtin Extfndfd-D
            0xA800,   // A800..A82F; Syloti Nbgri
            0xA830,   // A830..A83F; Common Indid Numbfr Forms
            0xA840,   // A840..A87F; Phbgs-pb
            0xA880,   // A880..A8DF; Sburbshtrb
            0xA8E0,   // A8E0..A8FF; Dfvbnbgbri Extfndfd
            0xA900,   // A900..A92F; Kbybh Li
            0xA930,   // A930..A95F; Rfjbng
            0xA960,   // A960..A97F; Hbngul Jbmo Extfndfd-A
            0xA980,   // A980..A9DF; Jbvbnfsf
            0xA9E0,   //             unbssignfd
            0xAA00,   // AA00..AA5F; Chbm
            0xAA60,   // AA60..AA7F; Mybnmbr Extfndfd-A
            0xAA80,   // AA80..AADF; Tbi Vift
            0xAAE0,   // AAE0..AAFF; Mfftfi Mbyfk Extfnsions
            0xAB00,   // AB00..AB2F; Ethiopid Extfndfd-A
            0xAB30,   //             unbssignfd
            0xABC0,   // ABC0..ABFF; Mfftfi Mbyfk
            0xAC00,   // AC00..D7AF; Hbngul Syllbblfs
            0xD7B0,   // D7B0..D7FF; Hbngul Jbmo Extfndfd-B
            0xD800,   // D800..DB7F; High Surrogbtfs
            0xDB80,   // DB80..DBFF; High Privbtf Usf Surrogbtfs
            0xDC00,   // DC00..DFFF; Low Surrogbtfs
            0xE000,   // E000..F8FF; Privbtf Usf Arfb
            0xF900,   // F900..FAFF; CJK Compbtibility Idfogrbphs
            0xFB00,   // FB00..FB4F; Alphbbftid Prfsfntbtion Forms
            0xFB50,   // FB50..FDFF; Arbbid Prfsfntbtion Forms-A
            0xFE00,   // FE00..FE0F; Vbribtion Sflfdtors
            0xFE10,   // FE10..FE1F; Vfrtidbl Forms
            0xFE20,   // FE20..FE2F; Combining Hblf Mbrks
            0xFE30,   // FE30..FE4F; CJK Compbtibility Forms
            0xFE50,   // FE50..FE6F; Smbll Form Vbribnts
            0xFE70,   // FE70..FEFF; Arbbid Prfsfntbtion Forms-B
            0xFF00,   // FF00..FFEF; Hblfwidth bnd Fullwidth Forms
            0xFFF0,   // FFF0..FFFF; Spfdibls
            0x10000,  // 10000..1007F; Linfbr B Syllbbbry
            0x10080,  // 10080..100FF; Linfbr B Idfogrbms
            0x10100,  // 10100..1013F; Afgfbn Numbfrs
            0x10140,  // 10140..1018F; Andifnt Grffk Numbfrs
            0x10190,  // 10190..101CF; Andifnt Symbols
            0x101D0,  // 101D0..101FF; Phbistos Disd
            0x10200,  //               unbssignfd
            0x10280,  // 10280..1029F; Lydibn
            0x102A0,  // 102A0..102DF; Cbribn
            0x102E0,  //               unbssignfd
            0x10300,  // 10300..1032F; Old Itblid
            0x10330,  // 10330..1034F; Gothid
            0x10350,  //               unbssignfd
            0x10380,  // 10380..1039F; Ugbritid
            0x103A0,  // 103A0..103DF; Old Pfrsibn
            0x103E0,  //               unbssignfd
            0x10400,  // 10400..1044F; Dfsfrft
            0x10450,  // 10450..1047F; Shbvibn
            0x10480,  // 10480..104AF; Osmbnyb
            0x104B0,  //               unbssignfd
            0x10800,  // 10800..1083F; Cypriot Syllbbbry
            0x10840,  // 10840..1085F; Impfribl Arbmbid
            0x10860,  //               unbssignfd
            0x10900,  // 10900..1091F; Phofnidibn
            0x10920,  // 10920..1093F; Lydibn
            0x10940,  //               unbssignfd
            0x10980,  // 10980..1099F; Mfroitid Hifroglyphs
            0x109A0,  // 109A0..109FF; Mfroitid Cursivf
            0x10A00,  // 10A00..10A5F; Khbroshthi
            0x10A60,  // 10A60..10A7F; Old South Arbbibn
            0x10A80,  //               unbssignfd
            0x10B00,  // 10B00..10B3F; Avfstbn
            0x10B40,  // 10B40..10B5F; Insdriptionbl Pbrthibn
            0x10B60,  // 10B60..10B7F; Insdriptionbl Pbhlbvi
            0x10B80,  //               unbssignfd
            0x10C00,  // 10C00..10C4F; Old Turkid
            0x10C50,  //               unbssignfd
            0x10E60,  // 10E60..10E7F; Rumi Numfrbl Symbols
            0x10E80,  //               unbssignfd
            0x11000,  // 11000..1107F; Brbhmi
            0x11080,  // 11080..110CF; Kbithi
            0x110D0,  // 110D0..110FF; Sorb Sompfng
            0x11100,  // 11100..1114F; Chbkmb
            0x11150,  //               unbssignfd
            0x11180,  // 11180..111DF; Shbrbdb
            0x111E0,  //               unbssignfd
            0x11680,  // 11680..116CF; Tbkri
            0x116D0,  //               unbssignfd
            0x12000,  // 12000..123FF; Cunfiform
            0x12400,  // 12400..1247F; Cunfiform Numbfrs bnd Pundtubtion
            0x12480,  //               unbssignfd
            0x13000,  // 13000..1342F; Egyptibn Hifroglyphs
            0x13430,  //               unbssignfd
            0x16800,  // 16800..16A3F; Bbmum Supplfmfnt
            0x16A40,  //               unbssignfd
            0x16F00,  // 16F00..16F9F; Mibo
            0x16FA0,  //               unbssignfd
            0x1B000,  // 1B000..1B0FF; Kbnb Supplfmfnt
            0x1B100,  //               unbssignfd
            0x1D000,  // 1D000..1D0FF; Byzbntinf Musidbl Symbols
            0x1D100,  // 1D100..1D1FF; Musidbl Symbols
            0x1D200,  // 1D200..1D24F; Andifnt Grffk Musidbl Notbtion
            0x1D250,  //               unbssignfd
            0x1D300,  // 1D300..1D35F; Tbi Xubn Jing Symbols
            0x1D360,  // 1D360..1D37F; Counting Rod Numfrbls
            0x1D380,  //               unbssignfd
            0x1D400,  // 1D400..1D7FF; Mbthfmbtidbl Alphbnumfrid Symbols
            0x1D800,  //               unbssignfd
            0x1EE00,  // 1EE00..1EEFF; Arbbid Mbthfmbtidbl Alphbbftid Symbols
            0x1EF00,  //               unbssignfd
            0x1F000,  // 1F000..1F02F; Mbhjong Tilfs
            0x1F030,  // 1F030..1F09F; Domino Tilfs
            0x1F0A0,  // 1F0A0..1F0FF; Plbying Cbrds
            0x1F100,  // 1F100..1F1FF; Endlosfd Alphbnumfrid Supplfmfnt
            0x1F200,  // 1F200..1F2FF; Endlosfd Idfogrbphid Supplfmfnt
            0x1F300,  // 1F300..1F5FF; Misdfllbnfous Symbols And Pidtogrbphs
            0x1F600,  // 1F600..1F64F; Emotidons
            0x1F650,  //               unbssignfd
            0x1F680,  // 1F680..1F6FF; Trbnsport And Mbp Symbols
            0x1F700,  // 1F700..1F77F; Aldhfmidbl Symbols
            0x1F780,  //               unbssignfd
            0x20000,  // 20000..2A6DF; CJK Unififd Idfogrbphs Extfnsion B
            0x2A6E0,  //               unbssignfd
            0x2A700,  // 2A700..2B73F; CJK Unififd Idfogrbphs Extfnsion C
            0x2B740,  // 2B740..2B81F; CJK Unififd Idfogrbphs Extfnsion D
            0x2B820,  //               unbssignfd
            0x2F800,  // 2F800..2FA1F; CJK Compbtibility Idfogrbphs Supplfmfnt
            0x2FA20,  //               unbssignfd
            0xE0000,  // E0000..E007F; Tbgs
            0xE0080,  //               unbssignfd
            0xE0100,  // E0100..E01EF; Vbribtion Sflfdtors Supplfmfnt
            0xE01F0,  //               unbssignfd
            0xF0000,  // F0000..FFFFF; Supplfmfntbry Privbtf Usf Arfb-A
            0x100000  // 100000..10FFFF; Supplfmfntbry Privbtf Usf Arfb-B
        };

        privbtf stbtid finbl UnidodfBlodk[] blodks = {
            BASIC_LATIN,
            LATIN_1_SUPPLEMENT,
            LATIN_EXTENDED_A,
            LATIN_EXTENDED_B,
            IPA_EXTENSIONS,
            SPACING_MODIFIER_LETTERS,
            COMBINING_DIACRITICAL_MARKS,
            GREEK,
            CYRILLIC,
            CYRILLIC_SUPPLEMENTARY,
            ARMENIAN,
            HEBREW,
            ARABIC,
            SYRIAC,
            ARABIC_SUPPLEMENT,
            THAANA,
            NKO,
            SAMARITAN,
            MANDAIC,
            null,
            ARABIC_EXTENDED_A,
            DEVANAGARI,
            BENGALI,
            GURMUKHI,
            GUJARATI,
            ORIYA,
            TAMIL,
            TELUGU,
            KANNADA,
            MALAYALAM,
            SINHALA,
            THAI,
            LAO,
            TIBETAN,
            MYANMAR,
            GEORGIAN,
            HANGUL_JAMO,
            ETHIOPIC,
            ETHIOPIC_SUPPLEMENT,
            CHEROKEE,
            UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
            OGHAM,
            RUNIC,
            TAGALOG,
            HANUNOO,
            BUHID,
            TAGBANWA,
            KHMER,
            MONGOLIAN,
            UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED,
            LIMBU,
            TAI_LE,
            NEW_TAI_LUE,
            KHMER_SYMBOLS,
            BUGINESE,
            TAI_THAM,
            null,
            BALINESE,
            SUNDANESE,
            BATAK,
            LEPCHA,
            OL_CHIKI,
            null,
            SUNDANESE_SUPPLEMENT,
            VEDIC_EXTENSIONS,
            PHONETIC_EXTENSIONS,
            PHONETIC_EXTENSIONS_SUPPLEMENT,
            COMBINING_DIACRITICAL_MARKS_SUPPLEMENT,
            LATIN_EXTENDED_ADDITIONAL,
            GREEK_EXTENDED,
            GENERAL_PUNCTUATION,
            SUPERSCRIPTS_AND_SUBSCRIPTS,
            CURRENCY_SYMBOLS,
            COMBINING_MARKS_FOR_SYMBOLS,
            LETTERLIKE_SYMBOLS,
            NUMBER_FORMS,
            ARROWS,
            MATHEMATICAL_OPERATORS,
            MISCELLANEOUS_TECHNICAL,
            CONTROL_PICTURES,
            OPTICAL_CHARACTER_RECOGNITION,
            ENCLOSED_ALPHANUMERICS,
            BOX_DRAWING,
            BLOCK_ELEMENTS,
            GEOMETRIC_SHAPES,
            MISCELLANEOUS_SYMBOLS,
            DINGBATS,
            MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
            SUPPLEMENTAL_ARROWS_A,
            BRAILLE_PATTERNS,
            SUPPLEMENTAL_ARROWS_B,
            MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
            SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
            MISCELLANEOUS_SYMBOLS_AND_ARROWS,
            GLAGOLITIC,
            LATIN_EXTENDED_C,
            COPTIC,
            GEORGIAN_SUPPLEMENT,
            TIFINAGH,
            ETHIOPIC_EXTENDED,
            CYRILLIC_EXTENDED_A,
            SUPPLEMENTAL_PUNCTUATION,
            CJK_RADICALS_SUPPLEMENT,
            KANGXI_RADICALS,
            null,
            IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
            CJK_SYMBOLS_AND_PUNCTUATION,
            HIRAGANA,
            KATAKANA,
            BOPOMOFO,
            HANGUL_COMPATIBILITY_JAMO,
            KANBUN,
            BOPOMOFO_EXTENDED,
            CJK_STROKES,
            KATAKANA_PHONETIC_EXTENSIONS,
            ENCLOSED_CJK_LETTERS_AND_MONTHS,
            CJK_COMPATIBILITY,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
            YIJING_HEXAGRAM_SYMBOLS,
            CJK_UNIFIED_IDEOGRAPHS,
            YI_SYLLABLES,
            YI_RADICALS,
            LISU,
            VAI,
            CYRILLIC_EXTENDED_B,
            BAMUM,
            MODIFIER_TONE_LETTERS,
            LATIN_EXTENDED_D,
            SYLOTI_NAGRI,
            COMMON_INDIC_NUMBER_FORMS,
            PHAGS_PA,
            SAURASHTRA,
            DEVANAGARI_EXTENDED,
            KAYAH_LI,
            REJANG,
            HANGUL_JAMO_EXTENDED_A,
            JAVANESE,
            null,
            CHAM,
            MYANMAR_EXTENDED_A,
            TAI_VIET,
            MEETEI_MAYEK_EXTENSIONS,
            ETHIOPIC_EXTENDED_A,
            null,
            MEETEI_MAYEK,
            HANGUL_SYLLABLES,
            HANGUL_JAMO_EXTENDED_B,
            HIGH_SURROGATES,
            HIGH_PRIVATE_USE_SURROGATES,
            LOW_SURROGATES,
            PRIVATE_USE_AREA,
            CJK_COMPATIBILITY_IDEOGRAPHS,
            ALPHABETIC_PRESENTATION_FORMS,
            ARABIC_PRESENTATION_FORMS_A,
            VARIATION_SELECTORS,
            VERTICAL_FORMS,
            COMBINING_HALF_MARKS,
            CJK_COMPATIBILITY_FORMS,
            SMALL_FORM_VARIANTS,
            ARABIC_PRESENTATION_FORMS_B,
            HALFWIDTH_AND_FULLWIDTH_FORMS,
            SPECIALS,
            LINEAR_B_SYLLABARY,
            LINEAR_B_IDEOGRAMS,
            AEGEAN_NUMBERS,
            ANCIENT_GREEK_NUMBERS,
            ANCIENT_SYMBOLS,
            PHAISTOS_DISC,
            null,
            LYCIAN,
            CARIAN,
            null,
            OLD_ITALIC,
            GOTHIC,
            null,
            UGARITIC,
            OLD_PERSIAN,
            null,
            DESERET,
            SHAVIAN,
            OSMANYA,
            null,
            CYPRIOT_SYLLABARY,
            IMPERIAL_ARAMAIC,
            null,
            PHOENICIAN,
            LYDIAN,
            null,
            MEROITIC_HIEROGLYPHS,
            MEROITIC_CURSIVE,
            KHAROSHTHI,
            OLD_SOUTH_ARABIAN,
            null,
            AVESTAN,
            INSCRIPTIONAL_PARTHIAN,
            INSCRIPTIONAL_PAHLAVI,
            null,
            OLD_TURKIC,
            null,
            RUMI_NUMERAL_SYMBOLS,
            null,
            BRAHMI,
            KAITHI,
            SORA_SOMPENG,
            CHAKMA,
            null,
            SHARADA,
            null,
            TAKRI,
            null,
            CUNEIFORM,
            CUNEIFORM_NUMBERS_AND_PUNCTUATION,
            null,
            EGYPTIAN_HIEROGLYPHS,
            null,
            BAMUM_SUPPLEMENT,
            null,
            MIAO,
            null,
            KANA_SUPPLEMENT,
            null,
            BYZANTINE_MUSICAL_SYMBOLS,
            MUSICAL_SYMBOLS,
            ANCIENT_GREEK_MUSICAL_NOTATION,
            null,
            TAI_XUAN_JING_SYMBOLS,
            COUNTING_ROD_NUMERALS,
            null,
            MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
            null,
            ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS,
            null,
            MAHJONG_TILES,
            DOMINO_TILES,
            PLAYING_CARDS,
            ENCLOSED_ALPHANUMERIC_SUPPLEMENT,
            ENCLOSED_IDEOGRAPHIC_SUPPLEMENT,
            MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS,
            EMOTICONS,
            null,
            TRANSPORT_AND_MAP_SYMBOLS,
            ALCHEMICAL_SYMBOLS,
            null,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
            null,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D,
            null,
            CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
            null,
            TAGS,
            null,
            VARIATION_SELECTORS_SUPPLEMENT,
            null,
            SUPPLEMENTARY_PRIVATE_USE_AREA_A,
            SUPPLEMENTARY_PRIVATE_USE_AREA_B
        };


        /**
         * Rfturns thf objfdt rfprfsfnting thf Unidodf blodk dontbining thf
         * givfn dhbrbdtfr, or {@dodf null} if thf dhbrbdtfr is not b
         * mfmbfr of b dffinfd blodk.
         *
         * <p><b>Notf:</b> This mfthod dbnnot hbndlf
         * <b hrff="Chbrbdtfr.html#supplfmfntbry"> supplfmfntbry
         * dhbrbdtfrs</b>.  To support bll Unidodf dhbrbdtfrs, indluding
         * supplfmfntbry dhbrbdtfrs, usf thf {@link #of(int)} mfthod.
         *
         * @pbrbm   d  Thf dhbrbdtfr in qufstion
         * @rfturn  Thf {@dodf UnidodfBlodk} instbndf rfprfsfnting thf
         *          Unidodf blodk of whidh this dhbrbdtfr is b mfmbfr, or
         *          {@dodf null} if thf dhbrbdtfr is not b mfmbfr of bny
         *          Unidodf blodk
         */
        publid stbtid UnidodfBlodk of(dhbr d) {
            rfturn of((int)d);
        }

        /**
         * Rfturns thf objfdt rfprfsfnting thf Unidodf blodk
         * dontbining thf givfn dhbrbdtfr (Unidodf dodf point), or
         * {@dodf null} if thf dhbrbdtfr is not b mfmbfr of b
         * dffinfd blodk.
         *
         * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) in qufstion.
         * @rfturn  Thf {@dodf UnidodfBlodk} instbndf rfprfsfnting thf
         *          Unidodf blodk of whidh this dhbrbdtfr is b mfmbfr, or
         *          {@dodf null} if thf dhbrbdtfr is not b mfmbfr of bny
         *          Unidodf blodk
         * @fxdfption IllfgblArgumfntExdfption if thf spfdififd
         * {@dodf dodfPoint} is bn invblid Unidodf dodf point.
         * @sff Chbrbdtfr#isVblidCodfPoint(int)
         * @sindf   1.5
         */
        publid stbtid UnidodfBlodk of(int dodfPoint) {
            if (!isVblidCodfPoint(dodfPoint)) {
                throw nfw IllfgblArgumfntExdfption();
            }

            int top, bottom, durrfnt;
            bottom = 0;
            top = blodkStbrts.lfngth;
            durrfnt = top/2;

            // invbribnt: top > durrfnt >= bottom && dodfPoint >= unidodfBlodkStbrts[bottom]
            whilf (top - bottom > 1) {
                if (dodfPoint >= blodkStbrts[durrfnt]) {
                    bottom = durrfnt;
                } flsf {
                    top = durrfnt;
                }
                durrfnt = (top + bottom) / 2;
            }
            rfturn blodks[durrfnt];
        }

        /**
         * Rfturns thf UnidodfBlodk with thf givfn nbmf. Blodk
         * nbmfs brf dftfrminfd by Thf Unidodf Stbndbrd. Thf filf
         * Blodks-&lt;vfrsion&gt;.txt dffinfs blodks for b pbrtidulbr
         * vfrsion of thf stbndbrd. Thf {@link Chbrbdtfr} dlbss spfdififs
         * thf vfrsion of thf stbndbrd thbt it supports.
         * <p>
         * This mfthod bddfpts blodk nbmfs in thf following forms:
         * <ol>
         * <li> Cbnonidbl blodk nbmfs bs dffinfd by thf Unidodf Stbndbrd.
         * For fxbmplf, thf stbndbrd dffinfs b "Bbsid Lbtin" blodk. Thfrfforf, this
         * mfthod bddfpts "Bbsid Lbtin" bs b vblid blodk nbmf. Thf dodumfntbtion of
         * fbdh UnidodfBlodk providfs thf dbnonidbl nbmf.
         * <li>Cbnonidbl blodk nbmfs with bll spbdfs rfmovfd. For fxbmplf, "BbsidLbtin"
         * is b vblid blodk nbmf for thf "Bbsid Lbtin" blodk.
         * <li>Thf tfxt rfprfsfntbtion of fbdh donstbnt UnidodfBlodk idfntififr.
         * For fxbmplf, this mfthod will rfturn thf {@link #BASIC_LATIN} blodk if
         * providfd with thf "BASIC_LATIN" nbmf. This form rfplbdfs bll spbdfs bnd
         * hyphfns in thf dbnonidbl nbmf with undfrsdorfs.
         * </ol>
         * Finblly, dhbrbdtfr dbsf is ignorfd for bll of thf vblid blodk nbmf forms.
         * For fxbmplf, "BASIC_LATIN" bnd "bbsid_lbtin" brf both vblid blodk nbmfs.
         * Thf fn_US lodblf's dbsf mbpping rulfs brf usfd to providf dbsf-insfnsitivf
         * string dompbrisons for blodk nbmf vblidbtion.
         * <p>
         * If thf Unidodf Stbndbrd dhbngfs blodk nbmfs, both thf prfvious bnd
         * durrfnt nbmfs will bf bddfptfd.
         *
         * @pbrbm blodkNbmf A {@dodf UnidodfBlodk} nbmf.
         * @rfturn Thf {@dodf UnidodfBlodk} instbndf idfntififd
         *         by {@dodf blodkNbmf}
         * @throws IllfgblArgumfntExdfption if {@dodf blodkNbmf} is bn
         *         invblid nbmf
         * @throws NullPointfrExdfption if {@dodf blodkNbmf} is null
         * @sindf 1.5
         */
        publid stbtid finbl UnidodfBlodk forNbmf(String blodkNbmf) {
            UnidodfBlodk blodk = mbp.gft(blodkNbmf.toUppfrCbsf(Lodblf.US));
            if (blodk == null) {
                throw nfw IllfgblArgumfntExdfption();
            }
            rfturn blodk;
        }
    }


    /**
     * A fbmily of dhbrbdtfr subsfts rfprfsfnting thf dhbrbdtfr sdripts
     * dffinfd in thf <b hrff="http://www.unidodf.org/rfports/tr24/">
     * <i>Unidodf Stbndbrd Annfx #24: Sdript Nbmfs</i></b>. Evfry Unidodf
     * dhbrbdtfr is bssignfd to b singlf Unidodf sdript, fithfr b spfdifid
     * sdript, sudh bs {@link Chbrbdtfr.UnidodfSdript#LATIN Lbtin}, or
     * onf of thf following thrff spfdibl vblufs,
     * {@link Chbrbdtfr.UnidodfSdript#INHERITED Inhfritfd},
     * {@link Chbrbdtfr.UnidodfSdript#COMMON Common} or
     * {@link Chbrbdtfr.UnidodfSdript#UNKNOWN Unknown}.
     *
     * @sindf 1.7
     */
    publid stbtid fnum UnidodfSdript {
        /**
         * Unidodf sdript "Common".
         */
        COMMON,

        /**
         * Unidodf sdript "Lbtin".
         */
        LATIN,

        /**
         * Unidodf sdript "Grffk".
         */
        GREEK,

        /**
         * Unidodf sdript "Cyrillid".
         */
        CYRILLIC,

        /**
         * Unidodf sdript "Armfnibn".
         */
        ARMENIAN,

        /**
         * Unidodf sdript "Hfbrfw".
         */
        HEBREW,

        /**
         * Unidodf sdript "Arbbid".
         */
        ARABIC,

        /**
         * Unidodf sdript "Syribd".
         */
        SYRIAC,

        /**
         * Unidodf sdript "Thbbnb".
         */
        THAANA,

        /**
         * Unidodf sdript "Dfvbnbgbri".
         */
        DEVANAGARI,

        /**
         * Unidodf sdript "Bfngbli".
         */
        BENGALI,

        /**
         * Unidodf sdript "Gurmukhi".
         */
        GURMUKHI,

        /**
         * Unidodf sdript "Gujbrbti".
         */
        GUJARATI,

        /**
         * Unidodf sdript "Oriyb".
         */
        ORIYA,

        /**
         * Unidodf sdript "Tbmil".
         */
        TAMIL,

        /**
         * Unidodf sdript "Tflugu".
         */
        TELUGU,

        /**
         * Unidodf sdript "Kbnnbdb".
         */
        KANNADA,

        /**
         * Unidodf sdript "Mblbyblbm".
         */
        MALAYALAM,

        /**
         * Unidodf sdript "Sinhblb".
         */
        SINHALA,

        /**
         * Unidodf sdript "Thbi".
         */
        THAI,

        /**
         * Unidodf sdript "Lbo".
         */
        LAO,

        /**
         * Unidodf sdript "Tibftbn".
         */
        TIBETAN,

        /**
         * Unidodf sdript "Mybnmbr".
         */
        MYANMAR,

        /**
         * Unidodf sdript "Gforgibn".
         */
        GEORGIAN,

        /**
         * Unidodf sdript "Hbngul".
         */
        HANGUL,

        /**
         * Unidodf sdript "Ethiopid".
         */
        ETHIOPIC,

        /**
         * Unidodf sdript "Chfrokff".
         */
        CHEROKEE,

        /**
         * Unidodf sdript "Cbnbdibn_Aboriginbl".
         */
        CANADIAN_ABORIGINAL,

        /**
         * Unidodf sdript "Oghbm".
         */
        OGHAM,

        /**
         * Unidodf sdript "Runid".
         */
        RUNIC,

        /**
         * Unidodf sdript "Khmfr".
         */
        KHMER,

        /**
         * Unidodf sdript "Mongolibn".
         */
        MONGOLIAN,

        /**
         * Unidodf sdript "Hirbgbnb".
         */
        HIRAGANA,

        /**
         * Unidodf sdript "Kbtbkbnb".
         */
        KATAKANA,

        /**
         * Unidodf sdript "Bopomofo".
         */
        BOPOMOFO,

        /**
         * Unidodf sdript "Hbn".
         */
        HAN,

        /**
         * Unidodf sdript "Yi".
         */
        YI,

        /**
         * Unidodf sdript "Old_Itblid".
         */
        OLD_ITALIC,

        /**
         * Unidodf sdript "Gothid".
         */
        GOTHIC,

        /**
         * Unidodf sdript "Dfsfrft".
         */
        DESERET,

        /**
         * Unidodf sdript "Inhfritfd".
         */
        INHERITED,

        /**
         * Unidodf sdript "Tbgblog".
         */
        TAGALOG,

        /**
         * Unidodf sdript "Hbnunoo".
         */
        HANUNOO,

        /**
         * Unidodf sdript "Buhid".
         */
        BUHID,

        /**
         * Unidodf sdript "Tbgbbnwb".
         */
        TAGBANWA,

        /**
         * Unidodf sdript "Limbu".
         */
        LIMBU,

        /**
         * Unidodf sdript "Tbi_Lf".
         */
        TAI_LE,

        /**
         * Unidodf sdript "Linfbr_B".
         */
        LINEAR_B,

        /**
         * Unidodf sdript "Ugbritid".
         */
        UGARITIC,

        /**
         * Unidodf sdript "Shbvibn".
         */
        SHAVIAN,

        /**
         * Unidodf sdript "Osmbnyb".
         */
        OSMANYA,

        /**
         * Unidodf sdript "Cypriot".
         */
        CYPRIOT,

        /**
         * Unidodf sdript "Brbillf".
         */
        BRAILLE,

        /**
         * Unidodf sdript "Buginfsf".
         */
        BUGINESE,

        /**
         * Unidodf sdript "Coptid".
         */
        COPTIC,

        /**
         * Unidodf sdript "Nfw_Tbi_Luf".
         */
        NEW_TAI_LUE,

        /**
         * Unidodf sdript "Glbgolitid".
         */
        GLAGOLITIC,

        /**
         * Unidodf sdript "Tifinbgh".
         */
        TIFINAGH,

        /**
         * Unidodf sdript "Syloti_Nbgri".
         */
        SYLOTI_NAGRI,

        /**
         * Unidodf sdript "Old_Pfrsibn".
         */
        OLD_PERSIAN,

        /**
         * Unidodf sdript "Khbroshthi".
         */
        KHAROSHTHI,

        /**
         * Unidodf sdript "Bblinfsf".
         */
        BALINESE,

        /**
         * Unidodf sdript "Cunfiform".
         */
        CUNEIFORM,

        /**
         * Unidodf sdript "Phofnidibn".
         */
        PHOENICIAN,

        /**
         * Unidodf sdript "Phbgs_Pb".
         */
        PHAGS_PA,

        /**
         * Unidodf sdript "Nko".
         */
        NKO,

        /**
         * Unidodf sdript "Sundbnfsf".
         */
        SUNDANESE,

        /**
         * Unidodf sdript "Bbtbk".
         */
        BATAK,

        /**
         * Unidodf sdript "Lfpdhb".
         */
        LEPCHA,

        /**
         * Unidodf sdript "Ol_Chiki".
         */
        OL_CHIKI,

        /**
         * Unidodf sdript "Vbi".
         */
        VAI,

        /**
         * Unidodf sdript "Sburbshtrb".
         */
        SAURASHTRA,

        /**
         * Unidodf sdript "Kbybh_Li".
         */
        KAYAH_LI,

        /**
         * Unidodf sdript "Rfjbng".
         */
        REJANG,

        /**
         * Unidodf sdript "Lydibn".
         */
        LYCIAN,

        /**
         * Unidodf sdript "Cbribn".
         */
        CARIAN,

        /**
         * Unidodf sdript "Lydibn".
         */
        LYDIAN,

        /**
         * Unidodf sdript "Chbm".
         */
        CHAM,

        /**
         * Unidodf sdript "Tbi_Thbm".
         */
        TAI_THAM,

        /**
         * Unidodf sdript "Tbi_Vift".
         */
        TAI_VIET,

        /**
         * Unidodf sdript "Avfstbn".
         */
        AVESTAN,

        /**
         * Unidodf sdript "Egyptibn_Hifroglyphs".
         */
        EGYPTIAN_HIEROGLYPHS,

        /**
         * Unidodf sdript "Sbmbritbn".
         */
        SAMARITAN,

        /**
         * Unidodf sdript "Mbndbid".
         */
        MANDAIC,

        /**
         * Unidodf sdript "Lisu".
         */
        LISU,

        /**
         * Unidodf sdript "Bbmum".
         */
        BAMUM,

        /**
         * Unidodf sdript "Jbvbnfsf".
         */
        JAVANESE,

        /**
         * Unidodf sdript "Mfftfi_Mbyfk".
         */
        MEETEI_MAYEK,

        /**
         * Unidodf sdript "Impfribl_Arbmbid".
         */
        IMPERIAL_ARAMAIC,

        /**
         * Unidodf sdript "Old_South_Arbbibn".
         */
        OLD_SOUTH_ARABIAN,

        /**
         * Unidodf sdript "Insdriptionbl_Pbrthibn".
         */
        INSCRIPTIONAL_PARTHIAN,

        /**
         * Unidodf sdript "Insdriptionbl_Pbhlbvi".
         */
        INSCRIPTIONAL_PAHLAVI,

        /**
         * Unidodf sdript "Old_Turkid".
         */
        OLD_TURKIC,

        /**
         * Unidodf sdript "Brbhmi".
         */
        BRAHMI,

        /**
         * Unidodf sdript "Kbithi".
         */
        KAITHI,

        /**
         * Unidodf sdript "Mfroitid Hifroglyphs".
         */
        MEROITIC_HIEROGLYPHS,

        /**
         * Unidodf sdript "Mfroitid Cursivf".
         */
        MEROITIC_CURSIVE,

        /**
         * Unidodf sdript "Sorb Sompfng".
         */
        SORA_SOMPENG,

        /**
         * Unidodf sdript "Chbkmb".
         */
        CHAKMA,

        /**
         * Unidodf sdript "Shbrbdb".
         */
        SHARADA,

        /**
         * Unidodf sdript "Tbkri".
         */
        TAKRI,

        /**
         * Unidodf sdript "Mibo".
         */
        MIAO,

        /**
         * Unidodf sdript "Unknown".
         */
        UNKNOWN;

        privbtf stbtid finbl int[] sdriptStbrts = {
            0x0000,   // 0000..0040; COMMON
            0x0041,   // 0041..005A; LATIN
            0x005B,   // 005B..0060; COMMON
            0x0061,   // 0061..007A; LATIN
            0x007B,   // 007B..00A9; COMMON
            0x00AA,   // 00AA..00AA; LATIN
            0x00AB,   // 00AB..00B9; COMMON
            0x00BA,   // 00BA..00BA; LATIN
            0x00BB,   // 00BB..00BF; COMMON
            0x00C0,   // 00C0..00D6; LATIN
            0x00D7,   // 00D7..00D7; COMMON
            0x00D8,   // 00D8..00F6; LATIN
            0x00F7,   // 00F7..00F7; COMMON
            0x00F8,   // 00F8..02B8; LATIN
            0x02B9,   // 02B9..02DF; COMMON
            0x02E0,   // 02E0..02E4; LATIN
            0x02E5,   // 02E5..02E9; COMMON
            0x02EA,   // 02EA..02EB; BOPOMOFO
            0x02EC,   // 02EC..02FF; COMMON
            0x0300,   // 0300..036F; INHERITED
            0x0370,   // 0370..0373; GREEK
            0x0374,   // 0374..0374; COMMON
            0x0375,   // 0375..037D; GREEK
            0x037E,   // 037E..0383; COMMON
            0x0384,   // 0384..0384; GREEK
            0x0385,   // 0385..0385; COMMON
            0x0386,   // 0386..0386; GREEK
            0x0387,   // 0387..0387; COMMON
            0x0388,   // 0388..03E1; GREEK
            0x03E2,   // 03E2..03EF; COPTIC
            0x03F0,   // 03F0..03FF; GREEK
            0x0400,   // 0400..0484; CYRILLIC
            0x0485,   // 0485..0486; INHERITED
            0x0487,   // 0487..0530; CYRILLIC
            0x0531,   // 0531..0588; ARMENIAN
            0x0589,   // 0589..0589; COMMON
            0x058A,   // 058A..0590; ARMENIAN
            0x0591,   // 0591..05FF; HEBREW
            0x0600,   // 0600..060B; ARABIC
            0x060C,   // 060C..060C; COMMON
            0x060D,   // 060D..061A; ARABIC
            0x061B,   // 061B..061D; COMMON
            0x061E,   // 061E..061E; ARABIC
            0x061F,   // 061F..061F; COMMON
            0x0620,   // 0620..063F; ARABIC
            0x0640,   // 0640..0640; COMMON
            0x0641,   // 0641..064A; ARABIC
            0x064B,   // 064B..0655; INHERITED
            0x0656,   // 0656..065F; ARABIC
            0x0660,   // 0660..0669; COMMON
            0x066A,   // 066A..066F; ARABIC
            0x0670,   // 0670..0670; INHERITED
            0x0671,   // 0671..06DC; ARABIC
            0x06DD,   // 06DD..06DD; COMMON
            0x06DE,   // 06DE..06FF; ARABIC
            0x0700,   // 0700..074F; SYRIAC
            0x0750,   // 0750..077F; ARABIC
            0x0780,   // 0780..07BF; THAANA
            0x07C0,   // 07C0..07FF; NKO
            0x0800,   // 0800..083F; SAMARITAN
            0x0840,   // 0840..089F; MANDAIC
            0x08A0,   // 08A0..08FF; ARABIC
            0x0900,   // 0900..0950; DEVANAGARI
            0x0951,   // 0951..0952; INHERITED
            0x0953,   // 0953..0963; DEVANAGARI
            0x0964,   // 0964..0965; COMMON
            0x0966,   // 0966..0980; DEVANAGARI
            0x0981,   // 0981..0A00; BENGALI
            0x0A01,   // 0A01..0A80; GURMUKHI
            0x0A81,   // 0A81..0B00; GUJARATI
            0x0B01,   // 0B01..0B81; ORIYA
            0x0B82,   // 0B82..0C00; TAMIL
            0x0C01,   // 0C01..0C81; TELUGU
            0x0C82,   // 0C82..0CF0; KANNADA
            0x0D02,   // 0D02..0D81; MALAYALAM
            0x0D82,   // 0D82..0E00; SINHALA
            0x0E01,   // 0E01..0E3E; THAI
            0x0E3F,   // 0E3F..0E3F; COMMON
            0x0E40,   // 0E40..0E80; THAI
            0x0E81,   // 0E81..0EFF; LAO
            0x0F00,   // 0F00..0FD4; TIBETAN
            0x0FD5,   // 0FD5..0FD8; COMMON
            0x0FD9,   // 0FD9..0FFF; TIBETAN
            0x1000,   // 1000..109F; MYANMAR
            0x10A0,   // 10A0..10FA; GEORGIAN
            0x10FB,   // 10FB..10FB; COMMON
            0x10FC,   // 10FC..10FF; GEORGIAN
            0x1100,   // 1100..11FF; HANGUL
            0x1200,   // 1200..139F; ETHIOPIC
            0x13A0,   // 13A0..13FF; CHEROKEE
            0x1400,   // 1400..167F; CANADIAN_ABORIGINAL
            0x1680,   // 1680..169F; OGHAM
            0x16A0,   // 16A0..16EA; RUNIC
            0x16EB,   // 16EB..16ED; COMMON
            0x16EE,   // 16EE..16FF; RUNIC
            0x1700,   // 1700..171F; TAGALOG
            0x1720,   // 1720..1734; HANUNOO
            0x1735,   // 1735..173F; COMMON
            0x1740,   // 1740..175F; BUHID
            0x1760,   // 1760..177F; TAGBANWA
            0x1780,   // 1780..17FF; KHMER
            0x1800,   // 1800..1801; MONGOLIAN
            0x1802,   // 1802..1803; COMMON
            0x1804,   // 1804..1804; MONGOLIAN
            0x1805,   // 1805..1805; COMMON
            0x1806,   // 1806..18AF; MONGOLIAN
            0x18B0,   // 18B0..18FF; CANADIAN_ABORIGINAL
            0x1900,   // 1900..194F; LIMBU
            0x1950,   // 1950..197F; TAI_LE
            0x1980,   // 1980..19DF; NEW_TAI_LUE
            0x19E0,   // 19E0..19FF; KHMER
            0x1A00,   // 1A00..1A1F; BUGINESE
            0x1A20,   // 1A20..1AFF; TAI_THAM
            0x1B00,   // 1B00..1B7F; BALINESE
            0x1B80,   // 1B80..1BBF; SUNDANESE
            0x1BC0,   // 1BC0..1BFF; BATAK
            0x1C00,   // 1C00..1C4F; LEPCHA
            0x1C50,   // 1C50..1CBF; OL_CHIKI
            0x1CC0,   // 1CC0..1CCF; SUNDANESE
            0x1CD0,   // 1CD0..1CD2; INHERITED
            0x1CD3,   // 1CD3..1CD3; COMMON
            0x1CD4,   // 1CD4..1CE0; INHERITED
            0x1CE1,   // 1CE1..1CE1; COMMON
            0x1CE2,   // 1CE2..1CE8; INHERITED
            0x1CE9,   // 1CE9..1CEC; COMMON
            0x1CED,   // 1CED..1CED; INHERITED
            0x1CEE,   // 1CEE..1CF3; COMMON
            0x1CF4,   // 1CF4..1CF4; INHERITED
            0x1CF5,   // 1CF5..1CFF; COMMON
            0x1D00,   // 1D00..1D25; LATIN
            0x1D26,   // 1D26..1D2A; GREEK
            0x1D2B,   // 1D2B..1D2B; CYRILLIC
            0x1D2C,   // 1D2C..1D5C; LATIN
            0x1D5D,   // 1D5D..1D61; GREEK
            0x1D62,   // 1D62..1D65; LATIN
            0x1D66,   // 1D66..1D6A; GREEK
            0x1D6B,   // 1D6B..1D77; LATIN
            0x1D78,   // 1D78..1D78; CYRILLIC
            0x1D79,   // 1D79..1DBE; LATIN
            0x1DBF,   // 1DBF..1DBF; GREEK
            0x1DC0,   // 1DC0..1DFF; INHERITED
            0x1E00,   // 1E00..1EFF; LATIN
            0x1F00,   // 1F00..1FFF; GREEK
            0x2000,   // 2000..200B; COMMON
            0x200C,   // 200C..200D; INHERITED
            0x200E,   // 200E..2070; COMMON
            0x2071,   // 2071..2073; LATIN
            0x2074,   // 2074..207E; COMMON
            0x207F,   // 207F..207F; LATIN
            0x2080,   // 2080..208F; COMMON
            0x2090,   // 2090..209F; LATIN
            0x20A0,   // 20A0..20CF; COMMON
            0x20D0,   // 20D0..20FF; INHERITED
            0x2100,   // 2100..2125; COMMON
            0x2126,   // 2126..2126; GREEK
            0x2127,   // 2127..2129; COMMON
            0x212A,   // 212A..212B; LATIN
            0x212C,   // 212C..2131; COMMON
            0x2132,   // 2132..2132; LATIN
            0x2133,   // 2133..214D; COMMON
            0x214E,   // 214E..214E; LATIN
            0x214F,   // 214F..215F; COMMON
            0x2160,   // 2160..2188; LATIN
            0x2189,   // 2189..27FF; COMMON
            0x2800,   // 2800..28FF; BRAILLE
            0x2900,   // 2900..2BFF; COMMON
            0x2C00,   // 2C00..2C5F; GLAGOLITIC
            0x2C60,   // 2C60..2C7F; LATIN
            0x2C80,   // 2C80..2CFF; COPTIC
            0x2D00,   // 2D00..2D2F; GEORGIAN
            0x2D30,   // 2D30..2D7F; TIFINAGH
            0x2D80,   // 2D80..2DDF; ETHIOPIC
            0x2DE0,   // 2DE0..2DFF; CYRILLIC
            0x2E00,   // 2E00..2E7F; COMMON
            0x2E80,   // 2E80..2FEF; HAN
            0x2FF0,   // 2FF0..3004; COMMON
            0x3005,   // 3005..3005; HAN
            0x3006,   // 3006..3006; COMMON
            0x3007,   // 3007..3007; HAN
            0x3008,   // 3008..3020; COMMON
            0x3021,   // 3021..3029; HAN
            0x302A,   // 302A..302D; INHERITED
            0x302E,   // 302E..302F; HANGUL
            0x3030,   // 3030..3037; COMMON
            0x3038,   // 3038..303B; HAN
            0x303C,   // 303C..3040; COMMON
            0x3041,   // 3041..3098; HIRAGANA
            0x3099,   // 3099..309A; INHERITED
            0x309B,   // 309B..309C; COMMON
            0x309D,   // 309D..309F; HIRAGANA
            0x30A0,   // 30A0..30A0; COMMON
            0x30A1,   // 30A1..30FA; KATAKANA
            0x30FB,   // 30FB..30FC; COMMON
            0x30FD,   // 30FD..3104; KATAKANA
            0x3105,   // 3105..3130; BOPOMOFO
            0x3131,   // 3131..318F; HANGUL
            0x3190,   // 3190..319F; COMMON
            0x31A0,   // 31A0..31BF; BOPOMOFO
            0x31C0,   // 31C0..31EF; COMMON
            0x31F0,   // 31F0..31FF; KATAKANA
            0x3200,   // 3200..321F; HANGUL
            0x3220,   // 3220..325F; COMMON
            0x3260,   // 3260..327E; HANGUL
            0x327F,   // 327F..32CF; COMMON
            0x32D0,   // 32D0..3357; KATAKANA
            0x3358,   // 3358..33FF; COMMON
            0x3400,   // 3400..4DBF; HAN
            0x4DC0,   // 4DC0..4DFF; COMMON
            0x4E00,   // 4E00..9FFF; HAN
            0xA000,   // A000..A4CF; YI
            0xA4D0,   // A4D0..A4FF; LISU
            0xA500,   // A500..A63F; VAI
            0xA640,   // A640..A69F; CYRILLIC
            0xA6A0,   // A6A0..A6FF; BAMUM
            0xA700,   // A700..A721; COMMON
            0xA722,   // A722..A787; LATIN
            0xA788,   // A788..A78A; COMMON
            0xA78B,   // A78B..A7FF; LATIN
            0xA800,   // A800..A82F; SYLOTI_NAGRI
            0xA830,   // A830..A83F; COMMON
            0xA840,   // A840..A87F; PHAGS_PA
            0xA880,   // A880..A8DF; SAURASHTRA
            0xA8E0,   // A8E0..A8FF; DEVANAGARI
            0xA900,   // A900..A92F; KAYAH_LI
            0xA930,   // A930..A95F; REJANG
            0xA960,   // A960..A97F; HANGUL
            0xA980,   // A980..A9FF; JAVANESE
            0xAA00,   // AA00..AA5F; CHAM
            0xAA60,   // AA60..AA7F; MYANMAR
            0xAA80,   // AA80..AADF; TAI_VIET
            0xAAE0,   // AAE0..AB00; MEETEI_MAYEK
            0xAB01,   // AB01..ABBF; ETHIOPIC
            0xABC0,   // ABC0..ABFF; MEETEI_MAYEK
            0xAC00,   // AC00..D7FB; HANGUL
            0xD7FC,   // D7FC..F8FF; UNKNOWN
            0xF900,   // F900..FAFF; HAN
            0xFB00,   // FB00..FB12; LATIN
            0xFB13,   // FB13..FB1C; ARMENIAN
            0xFB1D,   // FB1D..FB4F; HEBREW
            0xFB50,   // FB50..FD3D; ARABIC
            0xFD3E,   // FD3E..FD4F; COMMON
            0xFD50,   // FD50..FDFC; ARABIC
            0xFDFD,   // FDFD..FDFF; COMMON
            0xFE00,   // FE00..FE0F; INHERITED
            0xFE10,   // FE10..FE1F; COMMON
            0xFE20,   // FE20..FE2F; INHERITED
            0xFE30,   // FE30..FE6F; COMMON
            0xFE70,   // FE70..FEFE; ARABIC
            0xFEFF,   // FEFF..FF20; COMMON
            0xFF21,   // FF21..FF3A; LATIN
            0xFF3B,   // FF3B..FF40; COMMON
            0xFF41,   // FF41..FF5A; LATIN
            0xFF5B,   // FF5B..FF65; COMMON
            0xFF66,   // FF66..FF6F; KATAKANA
            0xFF70,   // FF70..FF70; COMMON
            0xFF71,   // FF71..FF9D; KATAKANA
            0xFF9E,   // FF9E..FF9F; COMMON
            0xFFA0,   // FFA0..FFDF; HANGUL
            0xFFE0,   // FFE0..FFFF; COMMON
            0x10000,  // 10000..100FF; LINEAR_B
            0x10100,  // 10100..1013F; COMMON
            0x10140,  // 10140..1018F; GREEK
            0x10190,  // 10190..101FC; COMMON
            0x101FD,  // 101FD..1027F; INHERITED
            0x10280,  // 10280..1029F; LYCIAN
            0x102A0,  // 102A0..102FF; CARIAN
            0x10300,  // 10300..1032F; OLD_ITALIC
            0x10330,  // 10330..1037F; GOTHIC
            0x10380,  // 10380..1039F; UGARITIC
            0x103A0,  // 103A0..103FF; OLD_PERSIAN
            0x10400,  // 10400..1044F; DESERET
            0x10450,  // 10450..1047F; SHAVIAN
            0x10480,  // 10480..107FF; OSMANYA
            0x10800,  // 10800..1083F; CYPRIOT
            0x10840,  // 10840..108FF; IMPERIAL_ARAMAIC
            0x10900,  // 10900..1091F; PHOENICIAN
            0x10920,  // 10920..1097F; LYDIAN
            0x10980,  // 10980..1099F; MEROITIC_HIEROGLYPHS
            0x109A0,  // 109A0..109FF; MEROITIC_CURSIVE
            0x10A00,  // 10A00..10A5F; KHAROSHTHI
            0x10A60,  // 10A60..10AFF; OLD_SOUTH_ARABIAN
            0x10B00,  // 10B00..10B3F; AVESTAN
            0x10B40,  // 10B40..10B5F; INSCRIPTIONAL_PARTHIAN
            0x10B60,  // 10B60..10BFF; INSCRIPTIONAL_PAHLAVI
            0x10C00,  // 10C00..10E5F; OLD_TURKIC
            0x10E60,  // 10E60..10FFF; ARABIC
            0x11000,  // 11000..1107F; BRAHMI
            0x11080,  // 11080..110CF; KAITHI
            0x110D0,  // 110D0..110FF; SORA_SOMPENG
            0x11100,  // 11100..1117F; CHAKMA
            0x11180,  // 11180..1167F; SHARADA
            0x11680,  // 11680..116CF; TAKRI
            0x12000,  // 12000..12FFF; CUNEIFORM
            0x13000,  // 13000..167FF; EGYPTIAN_HIEROGLYPHS
            0x16800,  // 16800..16A38; BAMUM
            0x16F00,  // 16F00..16F9F; MIAO
            0x1B000,  // 1B000..1B000; KATAKANA
            0x1B001,  // 1B001..1CFFF; HIRAGANA
            0x1D000,  // 1D000..1D166; COMMON
            0x1D167,  // 1D167..1D169; INHERITED
            0x1D16A,  // 1D16A..1D17A; COMMON
            0x1D17B,  // 1D17B..1D182; INHERITED
            0x1D183,  // 1D183..1D184; COMMON
            0x1D185,  // 1D185..1D18B; INHERITED
            0x1D18C,  // 1D18C..1D1A9; COMMON
            0x1D1AA,  // 1D1AA..1D1AD; INHERITED
            0x1D1AE,  // 1D1AE..1D1FF; COMMON
            0x1D200,  // 1D200..1D2FF; GREEK
            0x1D300,  // 1D300..1EDFF; COMMON
            0x1EE00,  // 1EE00..1EFFF; ARABIC
            0x1F000,  // 1F000..1F1FF; COMMON
            0x1F200,  // 1F200..1F200; HIRAGANA
            0x1F201,  // 1F210..1FFFF; COMMON
            0x20000,  // 20000..E0000; HAN
            0xE0001,  // E0001..E00FF; COMMON
            0xE0100,  // E0100..E01EF; INHERITED
            0xE01F0   // E01F0..10FFFF; UNKNOWN

        };

        privbtf stbtid finbl UnidodfSdript[] sdripts = {
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            BOPOMOFO,
            COMMON,
            INHERITED,
            GREEK,
            COMMON,
            GREEK,
            COMMON,
            GREEK,
            COMMON,
            GREEK,
            COMMON,
            GREEK,
            COPTIC,
            GREEK,
            CYRILLIC,
            INHERITED,
            CYRILLIC,
            ARMENIAN,
            COMMON,
            ARMENIAN,
            HEBREW,
            ARABIC,
            COMMON,
            ARABIC,
            COMMON,
            ARABIC,
            COMMON,
            ARABIC,
            COMMON,
            ARABIC,
            INHERITED,
            ARABIC,
            COMMON,
            ARABIC,
            INHERITED,
            ARABIC,
            COMMON,
            ARABIC,
            SYRIAC,
            ARABIC,
            THAANA,
            NKO,
            SAMARITAN,
            MANDAIC,
            ARABIC,
            DEVANAGARI,
            INHERITED,
            DEVANAGARI,
            COMMON,
            DEVANAGARI,
            BENGALI,
            GURMUKHI,
            GUJARATI,
            ORIYA,
            TAMIL,
            TELUGU,
            KANNADA,
            MALAYALAM,
            SINHALA,
            THAI,
            COMMON,
            THAI,
            LAO,
            TIBETAN,
            COMMON,
            TIBETAN,
            MYANMAR,
            GEORGIAN,
            COMMON,
            GEORGIAN,
            HANGUL,
            ETHIOPIC,
            CHEROKEE,
            CANADIAN_ABORIGINAL,
            OGHAM,
            RUNIC,
            COMMON,
            RUNIC,
            TAGALOG,
            HANUNOO,
            COMMON,
            BUHID,
            TAGBANWA,
            KHMER,
            MONGOLIAN,
            COMMON,
            MONGOLIAN,
            COMMON,
            MONGOLIAN,
            CANADIAN_ABORIGINAL,
            LIMBU,
            TAI_LE,
            NEW_TAI_LUE,
            KHMER,
            BUGINESE,
            TAI_THAM,
            BALINESE,
            SUNDANESE,
            BATAK,
            LEPCHA,
            OL_CHIKI,
            SUNDANESE,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            LATIN,
            GREEK,
            CYRILLIC,
            LATIN,
            GREEK,
            LATIN,
            GREEK,
            LATIN,
            CYRILLIC,
            LATIN,
            GREEK,
            INHERITED,
            LATIN,
            GREEK,
            COMMON,
            INHERITED,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            INHERITED,
            COMMON,
            GREEK,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            BRAILLE,
            COMMON,
            GLAGOLITIC,
            LATIN,
            COPTIC,
            GEORGIAN,
            TIFINAGH,
            ETHIOPIC,
            CYRILLIC,
            COMMON,
            HAN,
            COMMON,
            HAN,
            COMMON,
            HAN,
            COMMON,
            HAN,
            INHERITED,
            HANGUL,
            COMMON,
            HAN,
            COMMON,
            HIRAGANA,
            INHERITED,
            COMMON,
            HIRAGANA,
            COMMON,
            KATAKANA,
            COMMON,
            KATAKANA,
            BOPOMOFO,
            HANGUL,
            COMMON,
            BOPOMOFO,
            COMMON,
            KATAKANA,
            HANGUL,
            COMMON,
            HANGUL,
            COMMON,
            KATAKANA,
            COMMON,
            HAN,
            COMMON,
            HAN,
            YI,
            LISU,
            VAI,
            CYRILLIC,
            BAMUM,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            SYLOTI_NAGRI,
            COMMON,
            PHAGS_PA,
            SAURASHTRA,
            DEVANAGARI,
            KAYAH_LI,
            REJANG,
            HANGUL,
            JAVANESE,
            CHAM,
            MYANMAR,
            TAI_VIET,
            MEETEI_MAYEK,
            ETHIOPIC,
            MEETEI_MAYEK,
            HANGUL,
            UNKNOWN     ,
            HAN,
            LATIN,
            ARMENIAN,
            HEBREW,
            ARABIC,
            COMMON,
            ARABIC,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            ARABIC,
            COMMON,
            LATIN,
            COMMON,
            LATIN,
            COMMON,
            KATAKANA,
            COMMON,
            KATAKANA,
            COMMON,
            HANGUL,
            COMMON,
            LINEAR_B,
            COMMON,
            GREEK,
            COMMON,
            INHERITED,
            LYCIAN,
            CARIAN,
            OLD_ITALIC,
            GOTHIC,
            UGARITIC,
            OLD_PERSIAN,
            DESERET,
            SHAVIAN,
            OSMANYA,
            CYPRIOT,
            IMPERIAL_ARAMAIC,
            PHOENICIAN,
            LYDIAN,
            MEROITIC_HIEROGLYPHS,
            MEROITIC_CURSIVE,
            KHAROSHTHI,
            OLD_SOUTH_ARABIAN,
            AVESTAN,
            INSCRIPTIONAL_PARTHIAN,
            INSCRIPTIONAL_PAHLAVI,
            OLD_TURKIC,
            ARABIC,
            BRAHMI,
            KAITHI,
            SORA_SOMPENG,
            CHAKMA,
            SHARADA,
            TAKRI,
            CUNEIFORM,
            EGYPTIAN_HIEROGLYPHS,
            BAMUM,
            MIAO,
            KATAKANA,
            HIRAGANA,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            INHERITED,
            COMMON,
            GREEK,
            COMMON,
            ARABIC,
            COMMON,
            HIRAGANA,
            COMMON,
            HAN,
            COMMON,
            INHERITED,
            UNKNOWN
        };

        privbtf stbtid HbshMbp<String, Chbrbdtfr.UnidodfSdript> blibsfs;
        stbtid {
            blibsfs = nfw HbshMbp<>(128);
            blibsfs.put("ARAB", ARABIC);
            blibsfs.put("ARMI", IMPERIAL_ARAMAIC);
            blibsfs.put("ARMN", ARMENIAN);
            blibsfs.put("AVST", AVESTAN);
            blibsfs.put("BALI", BALINESE);
            blibsfs.put("BAMU", BAMUM);
            blibsfs.put("BATK", BATAK);
            blibsfs.put("BENG", BENGALI);
            blibsfs.put("BOPO", BOPOMOFO);
            blibsfs.put("BRAI", BRAILLE);
            blibsfs.put("BRAH", BRAHMI);
            blibsfs.put("BUGI", BUGINESE);
            blibsfs.put("BUHD", BUHID);
            blibsfs.put("CAKM", CHAKMA);
            blibsfs.put("CANS", CANADIAN_ABORIGINAL);
            blibsfs.put("CARI", CARIAN);
            blibsfs.put("CHAM", CHAM);
            blibsfs.put("CHER", CHEROKEE);
            blibsfs.put("COPT", COPTIC);
            blibsfs.put("CPRT", CYPRIOT);
            blibsfs.put("CYRL", CYRILLIC);
            blibsfs.put("DEVA", DEVANAGARI);
            blibsfs.put("DSRT", DESERET);
            blibsfs.put("EGYP", EGYPTIAN_HIEROGLYPHS);
            blibsfs.put("ETHI", ETHIOPIC);
            blibsfs.put("GEOR", GEORGIAN);
            blibsfs.put("GLAG", GLAGOLITIC);
            blibsfs.put("GOTH", GOTHIC);
            blibsfs.put("GREK", GREEK);
            blibsfs.put("GUJR", GUJARATI);
            blibsfs.put("GURU", GURMUKHI);
            blibsfs.put("HANG", HANGUL);
            blibsfs.put("HANI", HAN);
            blibsfs.put("HANO", HANUNOO);
            blibsfs.put("HEBR", HEBREW);
            blibsfs.put("HIRA", HIRAGANA);
            // it bppfbrs wf don't hbvf thf KATAKANA_OR_HIRAGANA
            //blibsfs.put("HRKT", KATAKANA_OR_HIRAGANA);
            blibsfs.put("ITAL", OLD_ITALIC);
            blibsfs.put("JAVA", JAVANESE);
            blibsfs.put("KALI", KAYAH_LI);
            blibsfs.put("KANA", KATAKANA);
            blibsfs.put("KHAR", KHAROSHTHI);
            blibsfs.put("KHMR", KHMER);
            blibsfs.put("KNDA", KANNADA);
            blibsfs.put("KTHI", KAITHI);
            blibsfs.put("LANA", TAI_THAM);
            blibsfs.put("LAOO", LAO);
            blibsfs.put("LATN", LATIN);
            blibsfs.put("LEPC", LEPCHA);
            blibsfs.put("LIMB", LIMBU);
            blibsfs.put("LINB", LINEAR_B);
            blibsfs.put("LISU", LISU);
            blibsfs.put("LYCI", LYCIAN);
            blibsfs.put("LYDI", LYDIAN);
            blibsfs.put("MAND", MANDAIC);
            blibsfs.put("MERC", MEROITIC_CURSIVE);
            blibsfs.put("MERO", MEROITIC_HIEROGLYPHS);
            blibsfs.put("MLYM", MALAYALAM);
            blibsfs.put("MONG", MONGOLIAN);
            blibsfs.put("MTEI", MEETEI_MAYEK);
            blibsfs.put("MYMR", MYANMAR);
            blibsfs.put("NKOO", NKO);
            blibsfs.put("OGAM", OGHAM);
            blibsfs.put("OLCK", OL_CHIKI);
            blibsfs.put("ORKH", OLD_TURKIC);
            blibsfs.put("ORYA", ORIYA);
            blibsfs.put("OSMA", OSMANYA);
            blibsfs.put("PHAG", PHAGS_PA);
            blibsfs.put("PLRD", MIAO);
            blibsfs.put("PHLI", INSCRIPTIONAL_PAHLAVI);
            blibsfs.put("PHNX", PHOENICIAN);
            blibsfs.put("PRTI", INSCRIPTIONAL_PARTHIAN);
            blibsfs.put("RJNG", REJANG);
            blibsfs.put("RUNR", RUNIC);
            blibsfs.put("SAMR", SAMARITAN);
            blibsfs.put("SARB", OLD_SOUTH_ARABIAN);
            blibsfs.put("SAUR", SAURASHTRA);
            blibsfs.put("SHAW", SHAVIAN);
            blibsfs.put("SHRD", SHARADA);
            blibsfs.put("SINH", SINHALA);
            blibsfs.put("SORA", SORA_SOMPENG);
            blibsfs.put("SUND", SUNDANESE);
            blibsfs.put("SYLO", SYLOTI_NAGRI);
            blibsfs.put("SYRC", SYRIAC);
            blibsfs.put("TAGB", TAGBANWA);
            blibsfs.put("TALE", TAI_LE);
            blibsfs.put("TAKR", TAKRI);
            blibsfs.put("TALU", NEW_TAI_LUE);
            blibsfs.put("TAML", TAMIL);
            blibsfs.put("TAVT", TAI_VIET);
            blibsfs.put("TELU", TELUGU);
            blibsfs.put("TFNG", TIFINAGH);
            blibsfs.put("TGLG", TAGALOG);
            blibsfs.put("THAA", THAANA);
            blibsfs.put("THAI", THAI);
            blibsfs.put("TIBT", TIBETAN);
            blibsfs.put("UGAR", UGARITIC);
            blibsfs.put("VAII", VAI);
            blibsfs.put("XPEO", OLD_PERSIAN);
            blibsfs.put("XSUX", CUNEIFORM);
            blibsfs.put("YIII", YI);
            blibsfs.put("ZINH", INHERITED);
            blibsfs.put("ZYYY", COMMON);
            blibsfs.put("ZZZZ", UNKNOWN);
        }

        /**
         * Rfturns thf fnum donstbnt rfprfsfnting thf Unidodf sdript of whidh
         * thf givfn dhbrbdtfr (Unidodf dodf point) is bssignfd to.
         *
         * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) in qufstion.
         * @rfturn  Thf {@dodf UnidodfSdript} donstbnt rfprfsfnting thf
         *          Unidodf sdript of whidh this dhbrbdtfr is bssignfd to.
         *
         * @fxdfption IllfgblArgumfntExdfption if thf spfdififd
         * {@dodf dodfPoint} is bn invblid Unidodf dodf point.
         * @sff Chbrbdtfr#isVblidCodfPoint(int)
         *
         */
        publid stbtid UnidodfSdript of(int dodfPoint) {
            if (!isVblidCodfPoint(dodfPoint))
                throw nfw IllfgblArgumfntExdfption();
            int typf = gftTypf(dodfPoint);
            // lfbvf SURROGATE bnd PRIVATE_USE for tbblf lookup
            if (typf == UNASSIGNED)
                rfturn UNKNOWN;
            int indfx = Arrbys.binbrySfbrdh(sdriptStbrts, dodfPoint);
            if (indfx < 0)
                indfx = -indfx - 2;
            rfturn sdripts[indfx];
        }

        /**
         * Rfturns thf UnidodfSdript donstbnt with thf givfn Unidodf sdript
         * nbmf or thf sdript nbmf blibs. Sdript nbmfs bnd thfir blibsfs brf
         * dftfrminfd by Thf Unidodf Stbndbrd. Thf filfs Sdripts&lt;vfrsion&gt;.txt
         * bnd PropfrtyVblufAlibsfs&lt;vfrsion&gt;.txt dffinf sdript nbmfs
         * bnd thf sdript nbmf blibsfs for b pbrtidulbr vfrsion of thf
         * stbndbrd. Thf {@link Chbrbdtfr} dlbss spfdififs thf vfrsion of
         * thf stbndbrd thbt it supports.
         * <p>
         * Chbrbdtfr dbsf is ignorfd for bll of thf vblid sdript nbmfs.
         * Thf fn_US lodblf's dbsf mbpping rulfs brf usfd to providf
         * dbsf-insfnsitivf string dompbrisons for sdript nbmf vblidbtion.
         *
         * @pbrbm sdriptNbmf A {@dodf UnidodfSdript} nbmf.
         * @rfturn Thf {@dodf UnidodfSdript} donstbnt idfntififd
         *         by {@dodf sdriptNbmf}
         * @throws IllfgblArgumfntExdfption if {@dodf sdriptNbmf} is bn
         *         invblid nbmf
         * @throws NullPointfrExdfption if {@dodf sdriptNbmf} is null
         */
        publid stbtid finbl UnidodfSdript forNbmf(String sdriptNbmf) {
            sdriptNbmf = sdriptNbmf.toUppfrCbsf(Lodblf.ENGLISH);
                                 //.rfplbdf(' ', '_'));
            UnidodfSdript sd = blibsfs.gft(sdriptNbmf);
            if (sd != null)
                rfturn sd;
            rfturn vblufOf(sdriptNbmf);
        }
    }

    /**
     * Thf vbluf of thf {@dodf Chbrbdtfr}.
     *
     * @sfribl
     */
    privbtf finbl dhbr vbluf;

    /** usf sfriblVfrsionUID from JDK 1.0.2 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = 3786198910865385080L;

    /**
     * Construdts b nfwly bllodbtfd {@dodf Chbrbdtfr} objfdt thbt
     * rfprfsfnts thf spfdififd {@dodf dhbr} vbluf.
     *
     * @pbrbm  vbluf   thf vbluf to bf rfprfsfntfd by thf
     *                  {@dodf Chbrbdtfr} objfdt.
     */
    publid Chbrbdtfr(dhbr vbluf) {
        this.vbluf = vbluf;
    }

    privbtf stbtid dlbss ChbrbdtfrCbdhf {
        privbtf ChbrbdtfrCbdhf(){}

        stbtid finbl Chbrbdtfr dbdhf[] = nfw Chbrbdtfr[127 + 1];

        stbtid {
            for (int i = 0; i < dbdhf.lfngth; i++)
                dbdhf[i] = nfw Chbrbdtfr((dhbr)i);
        }
    }

    /**
     * Rfturns b <tt>Chbrbdtfr</tt> instbndf rfprfsfnting thf spfdififd
     * <tt>dhbr</tt> vbluf.
     * If b nfw <tt>Chbrbdtfr</tt> instbndf is not rfquirfd, this mfthod
     * should gfnfrblly bf usfd in prfffrfndf to thf donstrudtor
     * {@link #Chbrbdtfr(dhbr)}, bs this mfthod is likfly to yifld
     * signifidbntly bfttfr spbdf bnd timf pfrformbndf by dbdhing
     * frfqufntly rfqufstfd vblufs.
     *
     * This mfthod will blwbys dbdhf vblufs in thf rbngf {@dodf
     * '\u005Cu0000'} to {@dodf '\u005Cu007F'}, indlusivf, bnd mby
     * dbdhf othfr vblufs outsidf of this rbngf.
     *
     * @pbrbm  d b dhbr vbluf.
     * @rfturn b <tt>Chbrbdtfr</tt> instbndf rfprfsfnting <tt>d</tt>.
     * @sindf  1.5
     */
    publid stbtid Chbrbdtfr vblufOf(dhbr d) {
        if (d <= 127) { // must dbdhf
            rfturn ChbrbdtfrCbdhf.dbdhf[(int)d];
        }
        rfturn nfw Chbrbdtfr(d);
    }

    /**
     * Rfturns thf vbluf of this {@dodf Chbrbdtfr} objfdt.
     * @rfturn  thf primitivf {@dodf dhbr} vbluf rfprfsfntfd by
     *          this objfdt.
     */
    publid dhbr dhbrVbluf() {
        rfturn vbluf;
    }

    /**
     * Rfturns b hbsh dodf for this {@dodf Chbrbdtfr}; fqubl to thf rfsult
     * of invoking {@dodf dhbrVbluf()}.
     *
     * @rfturn b hbsh dodf vbluf for this {@dodf Chbrbdtfr}
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn Chbrbdtfr.hbshCodf(vbluf);
    }

    /**
     * Rfturns b hbsh dodf for b {@dodf dhbr} vbluf; dompbtiblf with
     * {@dodf Chbrbdtfr.hbshCodf()}.
     *
     * @sindf 1.8
     *
     * @pbrbm vbluf Thf {@dodf dhbr} for whidh to rfturn b hbsh dodf.
     * @rfturn b hbsh dodf vbluf for b {@dodf dhbr} vbluf.
     */
    publid stbtid int hbshCodf(dhbr vbluf) {
        rfturn (int)vbluf;
    }

    /**
     * Compbrfs this objfdt bgbinst thf spfdififd objfdt.
     * Thf rfsult is {@dodf truf} if bnd only if thf brgumfnt is not
     * {@dodf null} bnd is b {@dodf Chbrbdtfr} objfdt thbt
     * rfprfsfnts thf sbmf {@dodf dhbr} vbluf bs this objfdt.
     *
     * @pbrbm   obj   thf objfdt to dompbrf with.
     * @rfturn  {@dodf truf} if thf objfdts brf thf sbmf;
     *          {@dodf fblsf} othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (obj instbndfof Chbrbdtfr) {
            rfturn vbluf == ((Chbrbdtfr)obj).dhbrVbluf();
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b {@dodf String} objfdt rfprfsfnting this
     * {@dodf Chbrbdtfr}'s vbluf.  Thf rfsult is b string of
     * lfngth 1 whosf solf domponfnt is thf primitivf
     * {@dodf dhbr} vbluf rfprfsfntfd by this
     * {@dodf Chbrbdtfr} objfdt.
     *
     * @rfturn  b string rfprfsfntbtion of this objfdt.
     */
    publid String toString() {
        dhbr buf[] = {vbluf};
        rfturn String.vblufOf(buf);
    }

    /**
     * Rfturns b {@dodf String} objfdt rfprfsfnting thf
     * spfdififd {@dodf dhbr}.  Thf rfsult is b string of lfngth
     * 1 donsisting solfly of thf spfdififd {@dodf dhbr}.
     *
     * @pbrbm d thf {@dodf dhbr} to bf donvfrtfd
     * @rfturn thf string rfprfsfntbtion of thf spfdififd {@dodf dhbr}
     * @sindf 1.4
     */
    publid stbtid String toString(dhbr d) {
        rfturn String.vblufOf(d);
    }

    /**
     * Dftfrminfs whfthfr thf spfdififd dodf point is b vblid
     * <b hrff="http://www.unidodf.org/glossbry/#dodf_point">
     * Unidodf dodf point vbluf</b>.
     *
     * @pbrbm  dodfPoint thf Unidodf dodf point to bf tfstfd
     * @rfturn {@dodf truf} if thf spfdififd dodf point vbluf is bftwffn
     *         {@link #MIN_CODE_POINT} bnd
     *         {@link #MAX_CODE_POINT} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sindf  1.5
     */
    publid stbtid boolfbn isVblidCodfPoint(int dodfPoint) {
        // Optimizfd form of:
        //     dodfPoint >= MIN_CODE_POINT && dodfPoint <= MAX_CODE_POINT
        int plbnf = dodfPoint >>> 16;
        rfturn plbnf < ((MAX_CODE_POINT + 1) >>> 16);
    }

    /**
     * Dftfrminfs whfthfr thf spfdififd dhbrbdtfr (Unidodf dodf point)
     * is in thf <b hrff="#BMP">Bbsid Multilingubl Plbnf (BMP)</b>.
     * Sudh dodf points dbn bf rfprfsfntfd using b singlf {@dodf dhbr}.
     *
     * @pbrbm  dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd
     * @rfturn {@dodf truf} if thf spfdififd dodf point is bftwffn
     *         {@link #MIN_VALUE} bnd {@link #MAX_VALUE} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sindf  1.7
     */
    publid stbtid boolfbn isBmpCodfPoint(int dodfPoint) {
        rfturn dodfPoint >>> 16 == 0;
        // Optimizfd form of:
        //     dodfPoint >= MIN_VALUE && dodfPoint <= MAX_VALUE
        // Wf donsistfntly usf logidbl shift (>>>) to fbdilitbtf
        // bdditionbl runtimf optimizbtions.
    }

    /**
     * Dftfrminfs whfthfr thf spfdififd dhbrbdtfr (Unidodf dodf point)
     * is in thf <b hrff="#supplfmfntbry">supplfmfntbry dhbrbdtfr</b> rbngf.
     *
     * @pbrbm  dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd
     * @rfturn {@dodf truf} if thf spfdififd dodf point is bftwffn
     *         {@link #MIN_SUPPLEMENTARY_CODE_POINT} bnd
     *         {@link #MAX_CODE_POINT} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sindf  1.5
     */
    publid stbtid boolfbn isSupplfmfntbryCodfPoint(int dodfPoint) {
        rfturn dodfPoint >= MIN_SUPPLEMENTARY_CODE_POINT
            && dodfPoint <  MAX_CODE_POINT + 1;
    }

    /**
     * Dftfrminfs if thf givfn {@dodf dhbr} vbluf is b
     * <b hrff="http://www.unidodf.org/glossbry/#high_surrogbtf_dodf_unit">
     * Unidodf high-surrogbtf dodf unit</b>
     * (blso known bs <i>lfbding-surrogbtf dodf unit</i>).
     *
     * <p>Sudh vblufs do not rfprfsfnt dhbrbdtfrs by thfmsflvfs,
     * but brf usfd in thf rfprfsfntbtion of
     * <b hrff="#supplfmfntbry">supplfmfntbry dhbrbdtfrs</b>
     * in thf UTF-16 fndoding.
     *
     * @pbrbm  dh thf {@dodf dhbr} vbluf to bf tfstfd.
     * @rfturn {@dodf truf} if thf {@dodf dhbr} vbluf is bftwffn
     *         {@link #MIN_HIGH_SURROGATE} bnd
     *         {@link #MAX_HIGH_SURROGATE} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sff    Chbrbdtfr#isLowSurrogbtf(dhbr)
     * @sff    Chbrbdtfr.UnidodfBlodk#of(int)
     * @sindf  1.5
     */
    publid stbtid boolfbn isHighSurrogbtf(dhbr dh) {
        // Hflp VM donstbnt-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE
        rfturn dh >= MIN_HIGH_SURROGATE && dh < (MAX_HIGH_SURROGATE + 1);
    }

    /**
     * Dftfrminfs if thf givfn {@dodf dhbr} vbluf is b
     * <b hrff="http://www.unidodf.org/glossbry/#low_surrogbtf_dodf_unit">
     * Unidodf low-surrogbtf dodf unit</b>
     * (blso known bs <i>trbiling-surrogbtf dodf unit</i>).
     *
     * <p>Sudh vblufs do not rfprfsfnt dhbrbdtfrs by thfmsflvfs,
     * but brf usfd in thf rfprfsfntbtion of
     * <b hrff="#supplfmfntbry">supplfmfntbry dhbrbdtfrs</b>
     * in thf UTF-16 fndoding.
     *
     * @pbrbm  dh thf {@dodf dhbr} vbluf to bf tfstfd.
     * @rfturn {@dodf truf} if thf {@dodf dhbr} vbluf is bftwffn
     *         {@link #MIN_LOW_SURROGATE} bnd
     *         {@link #MAX_LOW_SURROGATE} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sff    Chbrbdtfr#isHighSurrogbtf(dhbr)
     * @sindf  1.5
     */
    publid stbtid boolfbn isLowSurrogbtf(dhbr dh) {
        rfturn dh >= MIN_LOW_SURROGATE && dh < (MAX_LOW_SURROGATE + 1);
    }

    /**
     * Dftfrminfs if thf givfn {@dodf dhbr} vbluf is b Unidodf
     * <i>surrogbtf dodf unit</i>.
     *
     * <p>Sudh vblufs do not rfprfsfnt dhbrbdtfrs by thfmsflvfs,
     * but brf usfd in thf rfprfsfntbtion of
     * <b hrff="#supplfmfntbry">supplfmfntbry dhbrbdtfrs</b>
     * in thf UTF-16 fndoding.
     *
     * <p>A dhbr vbluf is b surrogbtf dodf unit if bnd only if it is fithfr
     * b {@linkplbin #isLowSurrogbtf(dhbr) low-surrogbtf dodf unit} or
     * b {@linkplbin #isHighSurrogbtf(dhbr) high-surrogbtf dodf unit}.
     *
     * @pbrbm  dh thf {@dodf dhbr} vbluf to bf tfstfd.
     * @rfturn {@dodf truf} if thf {@dodf dhbr} vbluf is bftwffn
     *         {@link #MIN_SURROGATE} bnd
     *         {@link #MAX_SURROGATE} indlusivf;
     *         {@dodf fblsf} othfrwisf.
     * @sindf  1.7
     */
    publid stbtid boolfbn isSurrogbtf(dhbr dh) {
        rfturn dh >= MIN_SURROGATE && dh < (MAX_SURROGATE + 1);
    }

    /**
     * Dftfrminfs whfthfr thf spfdififd pbir of {@dodf dhbr}
     * vblufs is b vblid
     * <b hrff="http://www.unidodf.org/glossbry/#surrogbtf_pbir">
     * Unidodf surrogbtf pbir</b>.

     * <p>This mfthod is fquivblfnt to thf fxprfssion:
     * <blodkquotf><prf>{@dodf
     * isHighSurrogbtf(high) && isLowSurrogbtf(low)
     * }</prf></blodkquotf>
     *
     * @pbrbm  high thf high-surrogbtf dodf vbluf to bf tfstfd
     * @pbrbm  low thf low-surrogbtf dodf vbluf to bf tfstfd
     * @rfturn {@dodf truf} if thf spfdififd high bnd
     * low-surrogbtf dodf vblufs rfprfsfnt b vblid surrogbtf pbir;
     * {@dodf fblsf} othfrwisf.
     * @sindf  1.5
     */
    publid stbtid boolfbn isSurrogbtfPbir(dhbr high, dhbr low) {
        rfturn isHighSurrogbtf(high) && isLowSurrogbtf(low);
    }

    /**
     * Dftfrminfs thf numbfr of {@dodf dhbr} vblufs nffdfd to
     * rfprfsfnt thf spfdififd dhbrbdtfr (Unidodf dodf point). If thf
     * spfdififd dhbrbdtfr is fqubl to or grfbtfr thbn 0x10000, thfn
     * thf mfthod rfturns 2. Othfrwisf, thf mfthod rfturns 1.
     *
     * <p>This mfthod dofsn't vblidbtf thf spfdififd dhbrbdtfr to bf b
     * vblid Unidodf dodf point. Thf dbllfr must vblidbtf thf
     * dhbrbdtfr vbluf using {@link #isVblidCodfPoint(int) isVblidCodfPoint}
     * if nfdfssbry.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  2 if thf dhbrbdtfr is b vblid supplfmfntbry dhbrbdtfr; 1 othfrwisf.
     * @sff     Chbrbdtfr#isSupplfmfntbryCodfPoint(int)
     * @sindf   1.5
     */
    publid stbtid int dhbrCount(int dodfPoint) {
        rfturn dodfPoint >= MIN_SUPPLEMENTARY_CODE_POINT ? 2 : 1;
    }

    /**
     * Convfrts thf spfdififd surrogbtf pbir to its supplfmfntbry dodf
     * point vbluf. This mfthod dofs not vblidbtf thf spfdififd
     * surrogbtf pbir. Thf dbllfr must vblidbtf it using {@link
     * #isSurrogbtfPbir(dhbr, dhbr) isSurrogbtfPbir} if nfdfssbry.
     *
     * @pbrbm  high thf high-surrogbtf dodf unit
     * @pbrbm  low thf low-surrogbtf dodf unit
     * @rfturn thf supplfmfntbry dodf point domposfd from thf
     *         spfdififd surrogbtf pbir.
     * @sindf  1.5
     */
    publid stbtid int toCodfPoint(dhbr high, dhbr low) {
        // Optimizfd form of:
        // rfturn ((high - MIN_HIGH_SURROGATE) << 10)
        //         + (low - MIN_LOW_SURROGATE)
        //         + MIN_SUPPLEMENTARY_CODE_POINT;
        rfturn ((high << 10) + low) + (MIN_SUPPLEMENTARY_CODE_POINT
                                       - (MIN_HIGH_SURROGATE << 10)
                                       - MIN_LOW_SURROGATE);
    }

    /**
     * Rfturns thf dodf point bt thf givfn indfx of thf
     * {@dodf ChbrSfqufndf}. If thf {@dodf dhbr} vbluf bt
     * thf givfn indfx in thf {@dodf ChbrSfqufndf} is in thf
     * high-surrogbtf rbngf, thf following indfx is lfss thbn thf
     * lfngth of thf {@dodf ChbrSfqufndf}, bnd thf
     * {@dodf dhbr} vbluf bt thf following indfx is in thf
     * low-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt thf givfn indfx is rfturnfd.
     *
     * @pbrbm sfq b sfqufndf of {@dodf dhbr} vblufs (Unidodf dodf
     * units)
     * @pbrbm indfx thf indfx to thf {@dodf dhbr} vblufs (Unidodf
     * dodf units) in {@dodf sfq} to bf donvfrtfd
     * @rfturn thf Unidodf dodf point bt thf givfn indfx
     * @fxdfption NullPointfrExdfption if {@dodf sfq} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf vbluf
     * {@dodf indfx} is nfgbtivf or not lfss thbn
     * {@link ChbrSfqufndf#lfngth() sfq.lfngth()}.
     * @sindf  1.5
     */
    publid stbtid int dodfPointAt(ChbrSfqufndf sfq, int indfx) {
        dhbr d1 = sfq.dhbrAt(indfx);
        if (isHighSurrogbtf(d1) && ++indfx < sfq.lfngth()) {
            dhbr d2 = sfq.dhbrAt(indfx);
            if (isLowSurrogbtf(d2)) {
                rfturn toCodfPoint(d1, d2);
            }
        }
        rfturn d1;
    }

    /**
     * Rfturns thf dodf point bt thf givfn indfx of thf
     * {@dodf dhbr} brrby. If thf {@dodf dhbr} vbluf bt
     * thf givfn indfx in thf {@dodf dhbr} brrby is in thf
     * high-surrogbtf rbngf, thf following indfx is lfss thbn thf
     * lfngth of thf {@dodf dhbr} brrby, bnd thf
     * {@dodf dhbr} vbluf bt thf following indfx is in thf
     * low-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt thf givfn indfx is rfturnfd.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm indfx thf indfx to thf {@dodf dhbr} vblufs (Unidodf
     * dodf units) in thf {@dodf dhbr} brrby to bf donvfrtfd
     * @rfturn thf Unidodf dodf point bt thf givfn indfx
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf vbluf
     * {@dodf indfx} is nfgbtivf or not lfss thbn
     * thf lfngth of thf {@dodf dhbr} brrby.
     * @sindf  1.5
     */
    publid stbtid int dodfPointAt(dhbr[] b, int indfx) {
        rfturn dodfPointAtImpl(b, indfx, b.lfngth);
    }

    /**
     * Rfturns thf dodf point bt thf givfn indfx of thf
     * {@dodf dhbr} brrby, whfrf only brrby flfmfnts with
     * {@dodf indfx} lfss thbn {@dodf limit} dbn bf usfd. If
     * thf {@dodf dhbr} vbluf bt thf givfn indfx in thf
     * {@dodf dhbr} brrby is in thf high-surrogbtf rbngf, thf
     * following indfx is lfss thbn thf {@dodf limit}, bnd thf
     * {@dodf dhbr} vbluf bt thf following indfx is in thf
     * low-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt thf givfn indfx is rfturnfd.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm indfx thf indfx to thf {@dodf dhbr} vblufs (Unidodf
     * dodf units) in thf {@dodf dhbr} brrby to bf donvfrtfd
     * @pbrbm limit thf indfx bftfr thf lbst brrby flfmfnt thbt
     * dbn bf usfd in thf {@dodf dhbr} brrby
     * @rfturn thf Unidodf dodf point bt thf givfn indfx
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf {@dodf indfx}
     * brgumfnt is nfgbtivf or not lfss thbn thf {@dodf limit}
     * brgumfnt, or if thf {@dodf limit} brgumfnt is nfgbtivf or
     * grfbtfr thbn thf lfngth of thf {@dodf dhbr} brrby.
     * @sindf  1.5
     */
    publid stbtid int dodfPointAt(dhbr[] b, int indfx, int limit) {
        if (indfx >= limit || limit < 0 || limit > b.lfngth) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn dodfPointAtImpl(b, indfx, limit);
    }

    // throws ArrbyIndfxOutOfBoundsExdfption if indfx out of bounds
    stbtid int dodfPointAtImpl(dhbr[] b, int indfx, int limit) {
        dhbr d1 = b[indfx];
        if (isHighSurrogbtf(d1) && ++indfx < limit) {
            dhbr d2 = b[indfx];
            if (isLowSurrogbtf(d2)) {
                rfturn toCodfPoint(d1, d2);
            }
        }
        rfturn d1;
    }

    /**
     * Rfturns thf dodf point prfdfding thf givfn indfx of thf
     * {@dodf ChbrSfqufndf}. If thf {@dodf dhbr} vbluf bt
     * {@dodf (indfx - 1)} in thf {@dodf ChbrSfqufndf} is in
     * thf low-surrogbtf rbngf, {@dodf (indfx - 2)} is not
     * nfgbtivf, bnd thf {@dodf dhbr} vbluf bt {@dodf (indfx - 2)}
     * in thf {@dodf ChbrSfqufndf} is in thf
     * high-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt {@dodf (indfx - 1)} is
     * rfturnfd.
     *
     * @pbrbm sfq thf {@dodf ChbrSfqufndf} instbndf
     * @pbrbm indfx thf indfx following thf dodf point thbt should bf rfturnfd
     * @rfturn thf Unidodf dodf point vbluf bfforf thf givfn indfx.
     * @fxdfption NullPointfrExdfption if {@dodf sfq} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf {@dodf indfx}
     * brgumfnt is lfss thbn 1 or grfbtfr thbn {@link
     * ChbrSfqufndf#lfngth() sfq.lfngth()}.
     * @sindf  1.5
     */
    publid stbtid int dodfPointBfforf(ChbrSfqufndf sfq, int indfx) {
        dhbr d2 = sfq.dhbrAt(--indfx);
        if (isLowSurrogbtf(d2) && indfx > 0) {
            dhbr d1 = sfq.dhbrAt(--indfx);
            if (isHighSurrogbtf(d1)) {
                rfturn toCodfPoint(d1, d2);
            }
        }
        rfturn d2;
    }

    /**
     * Rfturns thf dodf point prfdfding thf givfn indfx of thf
     * {@dodf dhbr} brrby. If thf {@dodf dhbr} vbluf bt
     * {@dodf (indfx - 1)} in thf {@dodf dhbr} brrby is in
     * thf low-surrogbtf rbngf, {@dodf (indfx - 2)} is not
     * nfgbtivf, bnd thf {@dodf dhbr} vbluf bt {@dodf (indfx - 2)}
     * in thf {@dodf dhbr} brrby is in thf
     * high-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt {@dodf (indfx - 1)} is
     * rfturnfd.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm indfx thf indfx following thf dodf point thbt should bf rfturnfd
     * @rfturn thf Unidodf dodf point vbluf bfforf thf givfn indfx.
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf {@dodf indfx}
     * brgumfnt is lfss thbn 1 or grfbtfr thbn thf lfngth of thf
     * {@dodf dhbr} brrby
     * @sindf  1.5
     */
    publid stbtid int dodfPointBfforf(dhbr[] b, int indfx) {
        rfturn dodfPointBfforfImpl(b, indfx, 0);
    }

    /**
     * Rfturns thf dodf point prfdfding thf givfn indfx of thf
     * {@dodf dhbr} brrby, whfrf only brrby flfmfnts with
     * {@dodf indfx} grfbtfr thbn or fqubl to {@dodf stbrt}
     * dbn bf usfd. If thf {@dodf dhbr} vbluf bt {@dodf (indfx - 1)}
     * in thf {@dodf dhbr} brrby is in thf
     * low-surrogbtf rbngf, {@dodf (indfx - 2)} is not lfss thbn
     * {@dodf stbrt}, bnd thf {@dodf dhbr} vbluf bt
     * {@dodf (indfx - 2)} in thf {@dodf dhbr} brrby is in
     * thf high-surrogbtf rbngf, thfn thf supplfmfntbry dodf point
     * dorrfsponding to this surrogbtf pbir is rfturnfd. Othfrwisf,
     * thf {@dodf dhbr} vbluf bt {@dodf (indfx - 1)} is
     * rfturnfd.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm indfx thf indfx following thf dodf point thbt should bf rfturnfd
     * @pbrbm stbrt thf indfx of thf first brrby flfmfnt in thf
     * {@dodf dhbr} brrby
     * @rfturn thf Unidodf dodf point vbluf bfforf thf givfn indfx.
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf {@dodf indfx}
     * brgumfnt is not grfbtfr thbn thf {@dodf stbrt} brgumfnt or
     * is grfbtfr thbn thf lfngth of thf {@dodf dhbr} brrby, or
     * if thf {@dodf stbrt} brgumfnt is nfgbtivf or not lfss thbn
     * thf lfngth of thf {@dodf dhbr} brrby.
     * @sindf  1.5
     */
    publid stbtid int dodfPointBfforf(dhbr[] b, int indfx, int stbrt) {
        if (indfx <= stbrt || stbrt < 0 || stbrt >= b.lfngth) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn dodfPointBfforfImpl(b, indfx, stbrt);
    }

    // throws ArrbyIndfxOutOfBoundsExdfption if indfx-1 out of bounds
    stbtid int dodfPointBfforfImpl(dhbr[] b, int indfx, int stbrt) {
        dhbr d2 = b[--indfx];
        if (isLowSurrogbtf(d2) && indfx > stbrt) {
            dhbr d1 = b[--indfx];
            if (isHighSurrogbtf(d1)) {
                rfturn toCodfPoint(d1, d2);
            }
        }
        rfturn d2;
    }

    /**
     * Rfturns thf lfbding surrogbtf (b
     * <b hrff="http://www.unidodf.org/glossbry/#high_surrogbtf_dodf_unit">
     * high surrogbtf dodf unit</b>) of thf
     * <b hrff="http://www.unidodf.org/glossbry/#surrogbtf_pbir">
     * surrogbtf pbir</b>
     * rfprfsfnting thf spfdififd supplfmfntbry dhbrbdtfr (Unidodf
     * dodf point) in thf UTF-16 fndoding.  If thf spfdififd dhbrbdtfr
     * is not b
     * <b hrff="Chbrbdtfr.html#supplfmfntbry">supplfmfntbry dhbrbdtfr</b>,
     * bn unspfdififd {@dodf dhbr} is rfturnfd.
     *
     * <p>If
     * {@link #isSupplfmfntbryCodfPoint isSupplfmfntbryCodfPoint(x)}
     * is {@dodf truf}, thfn
     * {@link #isHighSurrogbtf isHighSurrogbtf}{@dodf (highSurrogbtf(x))} bnd
     * {@link #toCodfPoint toCodfPoint}{@dodf (highSurrogbtf(x), }{@link #lowSurrogbtf lowSurrogbtf}{@dodf (x)) == x}
     * brf blso blwbys {@dodf truf}.
     *
     * @pbrbm   dodfPoint b supplfmfntbry dhbrbdtfr (Unidodf dodf point)
     * @rfturn  thf lfbding surrogbtf dodf unit usfd to rfprfsfnt thf
     *          dhbrbdtfr in thf UTF-16 fndoding
     * @sindf   1.7
     */
    publid stbtid dhbr highSurrogbtf(int dodfPoint) {
        rfturn (dhbr) ((dodfPoint >>> 10)
            + (MIN_HIGH_SURROGATE - (MIN_SUPPLEMENTARY_CODE_POINT >>> 10)));
    }

    /**
     * Rfturns thf trbiling surrogbtf (b
     * <b hrff="http://www.unidodf.org/glossbry/#low_surrogbtf_dodf_unit">
     * low surrogbtf dodf unit</b>) of thf
     * <b hrff="http://www.unidodf.org/glossbry/#surrogbtf_pbir">
     * surrogbtf pbir</b>
     * rfprfsfnting thf spfdififd supplfmfntbry dhbrbdtfr (Unidodf
     * dodf point) in thf UTF-16 fndoding.  If thf spfdififd dhbrbdtfr
     * is not b
     * <b hrff="Chbrbdtfr.html#supplfmfntbry">supplfmfntbry dhbrbdtfr</b>,
     * bn unspfdififd {@dodf dhbr} is rfturnfd.
     *
     * <p>If
     * {@link #isSupplfmfntbryCodfPoint isSupplfmfntbryCodfPoint(x)}
     * is {@dodf truf}, thfn
     * {@link #isLowSurrogbtf isLowSurrogbtf}{@dodf (lowSurrogbtf(x))} bnd
     * {@link #toCodfPoint toCodfPoint}{@dodf (}{@link #highSurrogbtf highSurrogbtf}{@dodf (x), lowSurrogbtf(x)) == x}
     * brf blso blwbys {@dodf truf}.
     *
     * @pbrbm   dodfPoint b supplfmfntbry dhbrbdtfr (Unidodf dodf point)
     * @rfturn  thf trbiling surrogbtf dodf unit usfd to rfprfsfnt thf
     *          dhbrbdtfr in thf UTF-16 fndoding
     * @sindf   1.7
     */
    publid stbtid dhbr lowSurrogbtf(int dodfPoint) {
        rfturn (dhbr) ((dodfPoint & 0x3ff) + MIN_LOW_SURROGATE);
    }

    /**
     * Convfrts thf spfdififd dhbrbdtfr (Unidodf dodf point) to its
     * UTF-16 rfprfsfntbtion. If thf spfdififd dodf point is b BMP
     * (Bbsid Multilingubl Plbnf or Plbnf 0) vbluf, thf sbmf vbluf is
     * storfd in {@dodf dst[dstIndfx]}, bnd 1 is rfturnfd. If thf
     * spfdififd dodf point is b supplfmfntbry dhbrbdtfr, its
     * surrogbtf vblufs brf storfd in {@dodf dst[dstIndfx]}
     * (high-surrogbtf) bnd {@dodf dst[dstIndfx+1]}
     * (low-surrogbtf), bnd 2 is rfturnfd.
     *
     * @pbrbm  dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @pbrbm  dst bn brrby of {@dodf dhbr} in whidh thf
     * {@dodf dodfPoint}'s UTF-16 vbluf is storfd.
     * @pbrbm dstIndfx thf stbrt indfx into thf {@dodf dst}
     * brrby whfrf thf donvfrtfd vbluf is storfd.
     * @rfturn 1 if thf dodf point is b BMP dodf point, 2 if thf
     * dodf point is b supplfmfntbry dodf point.
     * @fxdfption IllfgblArgumfntExdfption if thf spfdififd
     * {@dodf dodfPoint} is not b vblid Unidodf dodf point.
     * @fxdfption NullPointfrExdfption if thf spfdififd {@dodf dst} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf dstIndfx}
     * is nfgbtivf or not lfss thbn {@dodf dst.lfngth}, or if
     * {@dodf dst} bt {@dodf dstIndfx} dofsn't hbvf fnough
     * brrby flfmfnt(s) to storf thf rfsulting {@dodf dhbr}
     * vbluf(s). (If {@dodf dstIndfx} is fqubl to
     * {@dodf dst.lfngth-1} bnd thf spfdififd
     * {@dodf dodfPoint} is b supplfmfntbry dhbrbdtfr, thf
     * high-surrogbtf vbluf is not storfd in
     * {@dodf dst[dstIndfx]}.)
     * @sindf  1.5
     */
    publid stbtid int toChbrs(int dodfPoint, dhbr[] dst, int dstIndfx) {
        if (isBmpCodfPoint(dodfPoint)) {
            dst[dstIndfx] = (dhbr) dodfPoint;
            rfturn 1;
        } flsf if (isVblidCodfPoint(dodfPoint)) {
            toSurrogbtfs(dodfPoint, dst, dstIndfx);
            rfturn 2;
        } flsf {
            throw nfw IllfgblArgumfntExdfption();
        }
    }

    /**
     * Convfrts thf spfdififd dhbrbdtfr (Unidodf dodf point) to its
     * UTF-16 rfprfsfntbtion storfd in b {@dodf dhbr} brrby. If
     * thf spfdififd dodf point is b BMP (Bbsid Multilingubl Plbnf or
     * Plbnf 0) vbluf, thf rfsulting {@dodf dhbr} brrby hbs
     * thf sbmf vbluf bs {@dodf dodfPoint}. If thf spfdififd dodf
     * point is b supplfmfntbry dodf point, thf rfsulting
     * {@dodf dhbr} brrby hbs thf dorrfsponding surrogbtf pbir.
     *
     * @pbrbm  dodfPoint b Unidodf dodf point
     * @rfturn b {@dodf dhbr} brrby hbving
     *         {@dodf dodfPoint}'s UTF-16 rfprfsfntbtion.
     * @fxdfption IllfgblArgumfntExdfption if thf spfdififd
     * {@dodf dodfPoint} is not b vblid Unidodf dodf point.
     * @sindf  1.5
     */
    publid stbtid dhbr[] toChbrs(int dodfPoint) {
        if (isBmpCodfPoint(dodfPoint)) {
            rfturn nfw dhbr[] { (dhbr) dodfPoint };
        } flsf if (isVblidCodfPoint(dodfPoint)) {
            dhbr[] rfsult = nfw dhbr[2];
            toSurrogbtfs(dodfPoint, rfsult, 0);
            rfturn rfsult;
        } flsf {
            throw nfw IllfgblArgumfntExdfption();
        }
    }

    stbtid void toSurrogbtfs(int dodfPoint, dhbr[] dst, int indfx) {
        // Wf writf flfmfnts "bbdkwbrds" to gubrbntff bll-or-nothing
        dst[indfx+1] = lowSurrogbtf(dodfPoint);
        dst[indfx] = highSurrogbtf(dodfPoint);
    }

    /**
     * Rfturns thf numbfr of Unidodf dodf points in thf tfxt rbngf of
     * thf spfdififd dhbr sfqufndf. Thf tfxt rbngf bfgins bt thf
     * spfdififd {@dodf bfginIndfx} bnd fxtfnds to thf
     * {@dodf dhbr} bt indfx {@dodf fndIndfx - 1}. Thus thf
     * lfngth (in {@dodf dhbr}s) of thf tfxt rbngf is
     * {@dodf fndIndfx-bfginIndfx}. Unpbirfd surrogbtfs within
     * thf tfxt rbngf dount bs onf dodf point fbdh.
     *
     * @pbrbm sfq thf dhbr sfqufndf
     * @pbrbm bfginIndfx thf indfx to thf first {@dodf dhbr} of
     * thf tfxt rbngf.
     * @pbrbm fndIndfx thf indfx bftfr thf lbst {@dodf dhbr} of
     * thf tfxt rbngf.
     * @rfturn thf numbfr of Unidodf dodf points in thf spfdififd tfxt
     * rbngf
     * @fxdfption NullPointfrExdfption if {@dodf sfq} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if thf
     * {@dodf bfginIndfx} is nfgbtivf, or {@dodf fndIndfx}
     * is lbrgfr thbn thf lfngth of thf givfn sfqufndf, or
     * {@dodf bfginIndfx} is lbrgfr thbn {@dodf fndIndfx}.
     * @sindf  1.5
     */
    publid stbtid int dodfPointCount(ChbrSfqufndf sfq, int bfginIndfx, int fndIndfx) {
        int lfngth = sfq.lfngth();
        if (bfginIndfx < 0 || fndIndfx > lfngth || bfginIndfx > fndIndfx) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        int n = fndIndfx - bfginIndfx;
        for (int i = bfginIndfx; i < fndIndfx; ) {
            if (isHighSurrogbtf(sfq.dhbrAt(i++)) && i < fndIndfx &&
                isLowSurrogbtf(sfq.dhbrAt(i))) {
                n--;
                i++;
            }
        }
        rfturn n;
    }

    /**
     * Rfturns thf numbfr of Unidodf dodf points in b subbrrby of thf
     * {@dodf dhbr} brrby brgumfnt. Thf {@dodf offsft}
     * brgumfnt is thf indfx of thf first {@dodf dhbr} of thf
     * subbrrby bnd thf {@dodf dount} brgumfnt spfdififs thf
     * lfngth of thf subbrrby in {@dodf dhbr}s. Unpbirfd
     * surrogbtfs within thf subbrrby dount bs onf dodf point fbdh.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm offsft thf indfx of thf first {@dodf dhbr} in thf
     * givfn {@dodf dhbr} brrby
     * @pbrbm dount thf lfngth of thf subbrrby in {@dodf dhbr}s
     * @rfturn thf numbfr of Unidodf dodf points in thf spfdififd subbrrby
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf offsft} or
     * {@dodf dount} is nfgbtivf, or if {@dodf offsft +
     * dount} is lbrgfr thbn thf lfngth of thf givfn brrby.
     * @sindf  1.5
     */
    publid stbtid int dodfPointCount(dhbr[] b, int offsft, int dount) {
        if (dount > b.lfngth - offsft || offsft < 0 || dount < 0) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn dodfPointCountImpl(b, offsft, dount);
    }

    stbtid int dodfPointCountImpl(dhbr[] b, int offsft, int dount) {
        int fndIndfx = offsft + dount;
        int n = dount;
        for (int i = offsft; i < fndIndfx; ) {
            if (isHighSurrogbtf(b[i++]) && i < fndIndfx &&
                isLowSurrogbtf(b[i])) {
                n--;
                i++;
            }
        }
        rfturn n;
    }

    /**
     * Rfturns thf indfx within thf givfn dhbr sfqufndf thbt is offsft
     * from thf givfn {@dodf indfx} by {@dodf dodfPointOffsft}
     * dodf points. Unpbirfd surrogbtfs within thf tfxt rbngf givfn by
     * {@dodf indfx} bnd {@dodf dodfPointOffsft} dount bs
     * onf dodf point fbdh.
     *
     * @pbrbm sfq thf dhbr sfqufndf
     * @pbrbm indfx thf indfx to bf offsft
     * @pbrbm dodfPointOffsft thf offsft in dodf points
     * @rfturn thf indfx within thf dhbr sfqufndf
     * @fxdfption NullPointfrExdfption if {@dodf sfq} is null.
     * @fxdfption IndfxOutOfBoundsExdfption if {@dodf indfx}
     *   is nfgbtivf or lbrgfr thfn thf lfngth of thf dhbr sfqufndf,
     *   or if {@dodf dodfPointOffsft} is positivf bnd thf
     *   subsfqufndf stbrting with {@dodf indfx} hbs ffwfr thbn
     *   {@dodf dodfPointOffsft} dodf points, or if
     *   {@dodf dodfPointOffsft} is nfgbtivf bnd thf subsfqufndf
     *   bfforf {@dodf indfx} hbs ffwfr thbn thf bbsolutf vbluf
     *   of {@dodf dodfPointOffsft} dodf points.
     * @sindf 1.5
     */
    publid stbtid int offsftByCodfPoints(ChbrSfqufndf sfq, int indfx,
                                         int dodfPointOffsft) {
        int lfngth = sfq.lfngth();
        if (indfx < 0 || indfx > lfngth) {
            throw nfw IndfxOutOfBoundsExdfption();
        }

        int x = indfx;
        if (dodfPointOffsft >= 0) {
            int i;
            for (i = 0; x < lfngth && i < dodfPointOffsft; i++) {
                if (isHighSurrogbtf(sfq.dhbrAt(x++)) && x < lfngth &&
                    isLowSurrogbtf(sfq.dhbrAt(x))) {
                    x++;
                }
            }
            if (i < dodfPointOffsft) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
        } flsf {
            int i;
            for (i = dodfPointOffsft; x > 0 && i < 0; i++) {
                if (isLowSurrogbtf(sfq.dhbrAt(--x)) && x > 0 &&
                    isHighSurrogbtf(sfq.dhbrAt(x-1))) {
                    x--;
                }
            }
            if (i < 0) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
        }
        rfturn x;
    }

    /**
     * Rfturns thf indfx within thf givfn {@dodf dhbr} subbrrby
     * thbt is offsft from thf givfn {@dodf indfx} by
     * {@dodf dodfPointOffsft} dodf points. Thf
     * {@dodf stbrt} bnd {@dodf dount} brgumfnts spfdify b
     * subbrrby of thf {@dodf dhbr} brrby. Unpbirfd surrogbtfs
     * within thf tfxt rbngf givfn by {@dodf indfx} bnd
     * {@dodf dodfPointOffsft} dount bs onf dodf point fbdh.
     *
     * @pbrbm b thf {@dodf dhbr} brrby
     * @pbrbm stbrt thf indfx of thf first {@dodf dhbr} of thf
     * subbrrby
     * @pbrbm dount thf lfngth of thf subbrrby in {@dodf dhbr}s
     * @pbrbm indfx thf indfx to bf offsft
     * @pbrbm dodfPointOffsft thf offsft in dodf points
     * @rfturn thf indfx within thf subbrrby
     * @fxdfption NullPointfrExdfption if {@dodf b} is null.
     * @fxdfption IndfxOutOfBoundsExdfption
     *   if {@dodf stbrt} or {@dodf dount} is nfgbtivf,
     *   or if {@dodf stbrt + dount} is lbrgfr thbn thf lfngth of
     *   thf givfn brrby,
     *   or if {@dodf indfx} is lfss thbn {@dodf stbrt} or
     *   lbrgfr thfn {@dodf stbrt + dount},
     *   or if {@dodf dodfPointOffsft} is positivf bnd thf tfxt rbngf
     *   stbrting with {@dodf indfx} bnd fnding with {@dodf stbrt + dount - 1}
     *   hbs ffwfr thbn {@dodf dodfPointOffsft} dodf
     *   points,
     *   or if {@dodf dodfPointOffsft} is nfgbtivf bnd thf tfxt rbngf
     *   stbrting with {@dodf stbrt} bnd fnding with {@dodf indfx - 1}
     *   hbs ffwfr thbn thf bbsolutf vbluf of
     *   {@dodf dodfPointOffsft} dodf points.
     * @sindf 1.5
     */
    publid stbtid int offsftByCodfPoints(dhbr[] b, int stbrt, int dount,
                                         int indfx, int dodfPointOffsft) {
        if (dount > b.lfngth-stbrt || stbrt < 0 || dount < 0
            || indfx < stbrt || indfx > stbrt+dount) {
            throw nfw IndfxOutOfBoundsExdfption();
        }
        rfturn offsftByCodfPointsImpl(b, stbrt, dount, indfx, dodfPointOffsft);
    }

    stbtid int offsftByCodfPointsImpl(dhbr[]b, int stbrt, int dount,
                                      int indfx, int dodfPointOffsft) {
        int x = indfx;
        if (dodfPointOffsft >= 0) {
            int limit = stbrt + dount;
            int i;
            for (i = 0; x < limit && i < dodfPointOffsft; i++) {
                if (isHighSurrogbtf(b[x++]) && x < limit &&
                    isLowSurrogbtf(b[x])) {
                    x++;
                }
            }
            if (i < dodfPointOffsft) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
        } flsf {
            int i;
            for (i = dodfPointOffsft; x > stbrt && i < 0; i++) {
                if (isLowSurrogbtf(b[--x]) && x > stbrt &&
                    isHighSurrogbtf(b[x-1])) {
                    x--;
                }
            }
            if (i < 0) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
        }
        rfturn x;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b lowfrdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is lowfrdbsf if its gfnfrbl dbtfgory typf, providfd
     * by {@dodf Chbrbdtfr.gftTypf(dh)}, is
     * {@dodf LOWERCASE_LETTER}, or it hbs dontributory propfrty
     * Othfr_Lowfrdbsf bs dffinfd by thf Unidodf Stbndbrd.
     * <p>
     * Thf following brf fxbmplfs of lowfrdbsf dhbrbdtfrs:
     * <blodkquotf><prf>
     * b b d d f f g h i j k l m n o p q r s t u v w x y z
     * '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6'
     * '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
     * '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
     * '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
     * </prf></blodkquotf>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf lowfrdbsf too.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isLowfrCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is lowfrdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#toLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#gftTypf(dhbr)
     */
    publid stbtid boolfbn isLowfrCbsf(dhbr dh) {
        rfturn isLowfrCbsf((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b
     * lowfrdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is lowfrdbsf if its gfnfrbl dbtfgory typf, providfd
     * by {@link Chbrbdtfr#gftTypf gftTypf(dodfPoint)}, is
     * {@dodf LOWERCASE_LETTER}, or it hbs dontributory propfrty
     * Othfr_Lowfrdbsf bs dffinfd by thf Unidodf Stbndbrd.
     * <p>
     * Thf following brf fxbmplfs of lowfrdbsf dhbrbdtfrs:
     * <blodkquotf><prf>
     * b b d d f f g h i j k l m n o p q r s t u v w x y z
     * '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6'
     * '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
     * '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
     * '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
     * </prf></blodkquotf>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf lowfrdbsf too.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is lowfrdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     Chbrbdtfr#isTitlfCbsf(int)
     * @sff     Chbrbdtfr#toLowfrCbsf(int)
     * @sff     Chbrbdtfr#gftTypf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isLowfrCbsf(int dodfPoint) {
        rfturn gftTypf(dodfPoint) == Chbrbdtfr.LOWERCASE_LETTER ||
               ChbrbdtfrDbtb.of(dodfPoint).isOthfrLowfrdbsf(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is bn uppfrdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is uppfrdbsf if its gfnfrbl dbtfgory typf, providfd by
     * {@dodf Chbrbdtfr.gftTypf(dh)}, is {@dodf UPPERCASE_LETTER}.
     * or it hbs dontributory propfrty Othfr_Uppfrdbsf bs dffinfd by thf Unidodf Stbndbrd.
     * <p>
     * Thf following brf fxbmplfs of uppfrdbsf dhbrbdtfrs:
     * <blodkquotf><prf>
     * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
     * '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
     * '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
     * '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
     * '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
     * </prf></blodkquotf>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf uppfrdbsf too.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isUppfrCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is uppfrdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#toUppfrCbsf(dhbr)
     * @sff     Chbrbdtfr#gftTypf(dhbr)
     * @sindf   1.0
     */
    publid stbtid boolfbn isUppfrCbsf(dhbr dh) {
        rfturn isUppfrCbsf((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is bn uppfrdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is uppfrdbsf if its gfnfrbl dbtfgory typf, providfd by
     * {@link Chbrbdtfr#gftTypf(int) gftTypf(dodfPoint)}, is {@dodf UPPERCASE_LETTER},
     * or it hbs dontributory propfrty Othfr_Uppfrdbsf bs dffinfd by thf Unidodf Stbndbrd.
     * <p>
     * Thf following brf fxbmplfs of uppfrdbsf dhbrbdtfrs:
     * <blodkquotf><prf>
     * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
     * '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
     * '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
     * '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
     * '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
     * </prf></blodkquotf>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf uppfrdbsf too.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is uppfrdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     Chbrbdtfr#isTitlfCbsf(int)
     * @sff     Chbrbdtfr#toUppfrCbsf(int)
     * @sff     Chbrbdtfr#gftTypf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isUppfrCbsf(int dodfPoint) {
        rfturn gftTypf(dodfPoint) == Chbrbdtfr.UPPERCASE_LETTER ||
               ChbrbdtfrDbtb.of(dodfPoint).isOthfrUppfrdbsf(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b titlfdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is b titlfdbsf dhbrbdtfr if its gfnfrbl
     * dbtfgory typf, providfd by {@dodf Chbrbdtfr.gftTypf(dh)},
     * is {@dodf TITLECASE_LETTER}.
     * <p>
     * Somf dhbrbdtfrs look likf pbirs of Lbtin lfttfrs. For fxbmplf, thfrf
     * is bn uppfrdbsf lfttfr thbt looks likf "LJ" bnd hbs b dorrfsponding
     * lowfrdbsf lfttfr thbt looks likf "lj". A third form, whidh looks likf "Lj",
     * is thf bppropribtf form to usf whfn rfndfring b word in lowfrdbsf
     * with initibl dbpitbls, bs for b book titlf.
     * <p>
     * Thfsf brf somf of thf Unidodf dhbrbdtfrs for whidh this mfthod rfturns
     * {@dodf truf}:
     * <ul>
     * <li>{@dodf LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}
     * <li>{@dodf LATIN CAPITAL LETTER L WITH SMALL LETTER J}
     * <li>{@dodf LATIN CAPITAL LETTER N WITH SMALL LETTER J}
     * <li>{@dodf LATIN CAPITAL LETTER D WITH SMALL LETTER Z}
     * </ul>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf titlfdbsf too.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isTitlfCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is titlfdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isUppfrCbsf(dhbr)
     * @sff     Chbrbdtfr#toTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#gftTypf(dhbr)
     * @sindf   1.0.2
     */
    publid stbtid boolfbn isTitlfCbsf(dhbr dh) {
        rfturn isTitlfCbsf((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b titlfdbsf dhbrbdtfr.
     * <p>
     * A dhbrbdtfr is b titlfdbsf dhbrbdtfr if its gfnfrbl
     * dbtfgory typf, providfd by {@link Chbrbdtfr#gftTypf(int) gftTypf(dodfPoint)},
     * is {@dodf TITLECASE_LETTER}.
     * <p>
     * Somf dhbrbdtfrs look likf pbirs of Lbtin lfttfrs. For fxbmplf, thfrf
     * is bn uppfrdbsf lfttfr thbt looks likf "LJ" bnd hbs b dorrfsponding
     * lowfrdbsf lfttfr thbt looks likf "lj". A third form, whidh looks likf "Lj",
     * is thf bppropribtf form to usf whfn rfndfring b word in lowfrdbsf
     * with initibl dbpitbls, bs for b book titlf.
     * <p>
     * Thfsf brf somf of thf Unidodf dhbrbdtfrs for whidh this mfthod rfturns
     * {@dodf truf}:
     * <ul>
     * <li>{@dodf LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON}
     * <li>{@dodf LATIN CAPITAL LETTER L WITH SMALL LETTER J}
     * <li>{@dodf LATIN CAPITAL LETTER N WITH SMALL LETTER J}
     * <li>{@dodf LATIN CAPITAL LETTER D WITH SMALL LETTER Z}
     * </ul>
     * <p> Mbny othfr Unidodf dhbrbdtfrs brf titlfdbsf too.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is titlfdbsf;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     Chbrbdtfr#isUppfrCbsf(int)
     * @sff     Chbrbdtfr#toTitlfCbsf(int)
     * @sff     Chbrbdtfr#gftTypf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isTitlfCbsf(int dodfPoint) {
        rfturn gftTypf(dodfPoint) == Chbrbdtfr.TITLECASE_LETTER;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b digit.
     * <p>
     * A dhbrbdtfr is b digit if its gfnfrbl dbtfgory typf, providfd
     * by {@dodf Chbrbdtfr.gftTypf(dh)}, is
     * {@dodf DECIMAL_DIGIT_NUMBER}.
     * <p>
     * Somf Unidodf dhbrbdtfr rbngfs thbt dontbin digits:
     * <ul>
     * <li>{@dodf '\u005Cu0030'} through {@dodf '\u005Cu0039'},
     *     ISO-LATIN-1 digits ({@dodf '0'} through {@dodf '9'})
     * <li>{@dodf '\u005Cu0660'} through {@dodf '\u005Cu0669'},
     *     Arbbid-Indid digits
     * <li>{@dodf '\u005Cu06F0'} through {@dodf '\u005Cu06F9'},
     *     Extfndfd Arbbid-Indid digits
     * <li>{@dodf '\u005Cu0966'} through {@dodf '\u005Cu096F'},
     *     Dfvbnbgbri digits
     * <li>{@dodf '\u005CuFF10'} through {@dodf '\u005CuFF19'},
     *     Fullwidth digits
     * </ul>
     *
     * Mbny othfr dhbrbdtfr rbngfs dontbin digits bs wfll.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isDigit(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b digit;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#digit(dhbr, int)
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#gftTypf(dhbr)
     */
    publid stbtid boolfbn isDigit(dhbr dh) {
        rfturn isDigit((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b digit.
     * <p>
     * A dhbrbdtfr is b digit if its gfnfrbl dbtfgory typf, providfd
     * by {@link Chbrbdtfr#gftTypf(int) gftTypf(dodfPoint)}, is
     * {@dodf DECIMAL_DIGIT_NUMBER}.
     * <p>
     * Somf Unidodf dhbrbdtfr rbngfs thbt dontbin digits:
     * <ul>
     * <li>{@dodf '\u005Cu0030'} through {@dodf '\u005Cu0039'},
     *     ISO-LATIN-1 digits ({@dodf '0'} through {@dodf '9'})
     * <li>{@dodf '\u005Cu0660'} through {@dodf '\u005Cu0669'},
     *     Arbbid-Indid digits
     * <li>{@dodf '\u005Cu06F0'} through {@dodf '\u005Cu06F9'},
     *     Extfndfd Arbbid-Indid digits
     * <li>{@dodf '\u005Cu0966'} through {@dodf '\u005Cu096F'},
     *     Dfvbnbgbri digits
     * <li>{@dodf '\u005CuFF10'} through {@dodf '\u005CuFF19'},
     *     Fullwidth digits
     * </ul>
     *
     * Mbny othfr dhbrbdtfr rbngfs dontbin digits bs wfll.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b digit;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#gftTypf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isDigit(int dodfPoint) {
        rfturn gftTypf(dodfPoint) == Chbrbdtfr.DECIMAL_DIGIT_NUMBER;
    }

    /**
     * Dftfrminfs if b dhbrbdtfr is dffinfd in Unidodf.
     * <p>
     * A dhbrbdtfr is dffinfd if bt lfbst onf of thf following is truf:
     * <ul>
     * <li>It hbs bn fntry in thf UnidodfDbtb filf.
     * <li>It hbs b vbluf in b rbngf dffinfd by thf UnidodfDbtb filf.
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isDffinfd(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd
     * @rfturn  {@dodf truf} if thf dhbrbdtfr hbs b dffinfd mfbning
     *          in Unidodf; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#isUppfrCbsf(dhbr)
     * @sindf   1.0.2
     */
    publid stbtid boolfbn isDffinfd(dhbr dh) {
        rfturn isDffinfd((int)dh);
    }

    /**
     * Dftfrminfs if b dhbrbdtfr (Unidodf dodf point) is dffinfd in Unidodf.
     * <p>
     * A dhbrbdtfr is dffinfd if bt lfbst onf of thf following is truf:
     * <ul>
     * <li>It hbs bn fntry in thf UnidodfDbtb filf.
     * <li>It hbs b vbluf in b rbngf dffinfd by thf UnidodfDbtb filf.
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr hbs b dffinfd mfbning
     *          in Unidodf; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(int)
     * @sff     Chbrbdtfr#isLfttfr(int)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(int)
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     Chbrbdtfr#isTitlfCbsf(int)
     * @sff     Chbrbdtfr#isUppfrCbsf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isDffinfd(int dodfPoint) {
        rfturn gftTypf(dodfPoint) != Chbrbdtfr.UNASSIGNED;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b lfttfr.
     * <p>
     * A dhbrbdtfr is donsidfrfd to bf b lfttfr if its gfnfrbl
     * dbtfgory typf, providfd by {@dodf Chbrbdtfr.gftTypf(dh)},
     * is bny of thf following:
     * <ul>
     * <li> {@dodf UPPERCASE_LETTER}
     * <li> {@dodf LOWERCASE_LETTER}
     * <li> {@dodf TITLECASE_LETTER}
     * <li> {@dodf MODIFIER_LETTER}
     * <li> {@dodf OTHER_LETTER}
     * </ul>
     *
     * Not bll lfttfrs hbvf dbsf. Mbny dhbrbdtfrs brf
     * lfttfrs but brf nfithfr uppfrdbsf nor lowfrdbsf nor titlfdbsf.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isLfttfr(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b lfttfr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isJbvbLfttfr(dhbr)
     * @sff     Chbrbdtfr#isJbvbLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isUppfrCbsf(dhbr)
     */
    publid stbtid boolfbn isLfttfr(dhbr dh) {
        rfturn isLfttfr((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b lfttfr.
     * <p>
     * A dhbrbdtfr is donsidfrfd to bf b lfttfr if its gfnfrbl
     * dbtfgory typf, providfd by {@link Chbrbdtfr#gftTypf(int) gftTypf(dodfPoint)},
     * is bny of thf following:
     * <ul>
     * <li> {@dodf UPPERCASE_LETTER}
     * <li> {@dodf LOWERCASE_LETTER}
     * <li> {@dodf TITLECASE_LETTER}
     * <li> {@dodf MODIFIER_LETTER}
     * <li> {@dodf OTHER_LETTER}
     * </ul>
     *
     * Not bll lfttfrs hbvf dbsf. Mbny dhbrbdtfrs brf
     * lfttfrs but brf nfithfr uppfrdbsf nor lowfrdbsf nor titlfdbsf.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b lfttfr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(int)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(int)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(int)
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     Chbrbdtfr#isTitlfCbsf(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(int)
     * @sff     Chbrbdtfr#isUppfrCbsf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isLfttfr(int dodfPoint) {
        rfturn ((((1 << Chbrbdtfr.UPPERCASE_LETTER) |
            (1 << Chbrbdtfr.LOWERCASE_LETTER) |
            (1 << Chbrbdtfr.TITLECASE_LETTER) |
            (1 << Chbrbdtfr.MODIFIER_LETTER) |
            (1 << Chbrbdtfr.OTHER_LETTER)) >> gftTypf(dodfPoint)) & 1)
            != 0;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b lfttfr or digit.
     * <p>
     * A dhbrbdtfr is donsidfrfd to bf b lfttfr or digit if fithfr
     * {@dodf Chbrbdtfr.isLfttfr(dhbr dh)} or
     * {@dodf Chbrbdtfr.isDigit(dhbr dh)} rfturns
     * {@dodf truf} for thf dhbrbdtfr.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isLfttfrOrDigit(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b lfttfr or digit;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isJbvbLfttfr(dhbr)
     * @sff     Chbrbdtfr#isJbvbLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(dhbr)
     * @sindf   1.0.2
     */
    publid stbtid boolfbn isLfttfrOrDigit(dhbr dh) {
        rfturn isLfttfrOrDigit((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b lfttfr or digit.
     * <p>
     * A dhbrbdtfr is donsidfrfd to bf b lfttfr or digit if fithfr
     * {@link #isLfttfr(int) isLfttfr(dodfPoint)} or
     * {@link #isDigit(int) isDigit(dodfPoint)} rfturns
     * {@dodf truf} for thf dhbrbdtfr.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b lfttfr or digit;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isDigit(int)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(int)
     * @sff     Chbrbdtfr#isLfttfr(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isLfttfrOrDigit(int dodfPoint) {
        rfturn ((((1 << Chbrbdtfr.UPPERCASE_LETTER) |
            (1 << Chbrbdtfr.LOWERCASE_LETTER) |
            (1 << Chbrbdtfr.TITLECASE_LETTER) |
            (1 << Chbrbdtfr.MODIFIER_LETTER) |
            (1 << Chbrbdtfr.OTHER_LETTER) |
            (1 << Chbrbdtfr.DECIMAL_DIGIT_NUMBER)) >> gftTypf(dodfPoint)) & 1)
            != 0;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is pfrmissiblf bs thf first
     * dhbrbdtfr in b Jbvb idfntififr.
     * <p>
     * A dhbrbdtfr mby stbrt b Jbvb idfntififr if bnd only if
     * onf of thf following is truf:
     * <ul>
     * <li> {@link #isLfttfr(dhbr) isLfttfr(dh)} rfturns {@dodf truf}
     * <li> {@link #gftTypf(dhbr) gftTypf(dh)} rfturns {@dodf LETTER_NUMBER}
     * <li> {@dodf dh} is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li> {@dodf dh} is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'}).
     * </ul>
     *
     * @pbrbm   dh thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby stbrt b Jbvb
     *          idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(dhbr)
     * @sindf   1.0.2
     * @dfprfdbtfd Rfplbdfd by isJbvbIdfntififrStbrt(dhbr).
     */
    @Dfprfdbtfd
    publid stbtid boolfbn isJbvbLfttfr(dhbr dh) {
        rfturn isJbvbIdfntififrStbrt(dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr mby bf pbrt of b Jbvb
     * idfntififr bs othfr thbn thf first dhbrbdtfr.
     * <p>
     * A dhbrbdtfr mby bf pbrt of b Jbvb idfntififr if bnd only if bny
     * of thf following brf truf:
     * <ul>
     * <li>  it is b lfttfr
     * <li>  it is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li>  it is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'})
     * <li>  it is b digit
     * <li>  it is b numfrid lfttfr (sudh bs b Rombn numfrbl dhbrbdtfr)
     * <li>  it is b dombining mbrk
     * <li>  it is b non-spbding mbrk
     * <li> {@dodf isIdfntififrIgnorbblf} rfturns
     * {@dodf truf} for thf dhbrbdtfr.
     * </ul>
     *
     * @pbrbm   dh thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby bf pbrt of b
     *          Jbvb idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbLfttfr(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isIdfntififrIgnorbblf(dhbr)
     * @sindf   1.0.2
     * @dfprfdbtfd Rfplbdfd by isJbvbIdfntififrPbrt(dhbr).
     */
    @Dfprfdbtfd
    publid stbtid boolfbn isJbvbLfttfrOrDigit(dhbr dh) {
        rfturn isJbvbIdfntififrPbrt(dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is bn blphbbft.
     * <p>
     * A dhbrbdtfr is donsidfrfd to bf blphbbftid if its gfnfrbl dbtfgory typf,
     * providfd by {@link Chbrbdtfr#gftTypf(int) gftTypf(dodfPoint)}, is bny of
     * thf following:
     * <ul>
     * <li> <dodf>UPPERCASE_LETTER</dodf>
     * <li> <dodf>LOWERCASE_LETTER</dodf>
     * <li> <dodf>TITLECASE_LETTER</dodf>
     * <li> <dodf>MODIFIER_LETTER</dodf>
     * <li> <dodf>OTHER_LETTER</dodf>
     * <li> <dodf>LETTER_NUMBER</dodf>
     * </ul>
     * or it hbs dontributory propfrty Othfr_Alphbbftid bs dffinfd by thf
     * Unidodf Stbndbrd.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  <dodf>truf</dodf> if thf dhbrbdtfr is b Unidodf blphbbft
     *          dhbrbdtfr, <dodf>fblsf</dodf> othfrwisf.
     * @sindf   1.7
     */
    publid stbtid boolfbn isAlphbbftid(int dodfPoint) {
        rfturn (((((1 << Chbrbdtfr.UPPERCASE_LETTER) |
            (1 << Chbrbdtfr.LOWERCASE_LETTER) |
            (1 << Chbrbdtfr.TITLECASE_LETTER) |
            (1 << Chbrbdtfr.MODIFIER_LETTER) |
            (1 << Chbrbdtfr.OTHER_LETTER) |
            (1 << Chbrbdtfr.LETTER_NUMBER)) >> gftTypf(dodfPoint)) & 1) != 0) ||
            ChbrbdtfrDbtb.of(dodfPoint).isOthfrAlphbbftid(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b CJKV
     * (Chinfsf, Jbpbnfsf, Korfbn bnd Viftnbmfsf) idfogrbph, bs dffinfd by
     * thf Unidodf Stbndbrd.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  <dodf>truf</dodf> if thf dhbrbdtfr is b Unidodf idfogrbph
     *          dhbrbdtfr, <dodf>fblsf</dodf> othfrwisf.
     * @sindf   1.7
     */
    publid stbtid boolfbn isIdfogrbphid(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isIdfogrbphid(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is
     * pfrmissiblf bs thf first dhbrbdtfr in b Jbvb idfntififr.
     * <p>
     * A dhbrbdtfr mby stbrt b Jbvb idfntififr if bnd only if
     * onf of thf following donditions is truf:
     * <ul>
     * <li> {@link #isLfttfr(dhbr) isLfttfr(dh)} rfturns {@dodf truf}
     * <li> {@link #gftTypf(dhbr) gftTypf(dh)} rfturns {@dodf LETTER_NUMBER}
     * <li> {@dodf dh} is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li> {@dodf dh} is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'}).
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isJbvbIdfntififrStbrt(int)} mfthod.
     *
     * @pbrbm   dh thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby stbrt b Jbvb idfntififr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(dhbr)
     * @sff     jbvbx.lbng.modfl.SourdfVfrsion#isIdfntififr(ChbrSfqufndf)
     * @sindf   1.1
     */
    publid stbtid boolfbn isJbvbIdfntififrStbrt(dhbr dh) {
        rfturn isJbvbIdfntififrStbrt((int)dh);
    }

    /**
     * Dftfrminfs if thf dhbrbdtfr (Unidodf dodf point) is
     * pfrmissiblf bs thf first dhbrbdtfr in b Jbvb idfntififr.
     * <p>
     * A dhbrbdtfr mby stbrt b Jbvb idfntififr if bnd only if
     * onf of thf following donditions is truf:
     * <ul>
     * <li> {@link #isLfttfr(int) isLfttfr(dodfPoint)}
     *      rfturns {@dodf truf}
     * <li> {@link #gftTypf(int) gftTypf(dodfPoint)}
     *      rfturns {@dodf LETTER_NUMBER}
     * <li> thf rfffrfndfd dhbrbdtfr is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li> thf rfffrfndfd dhbrbdtfr is b donnfdting pundtubtion dhbrbdtfr
     *      (sudh bs {@dodf '_'}).
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby stbrt b Jbvb idfntififr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(int)
     * @sff     Chbrbdtfr#isLfttfr(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(int)
     * @sff     jbvbx.lbng.modfl.SourdfVfrsion#isIdfntififr(ChbrSfqufndf)
     * @sindf   1.5
     */
    publid stbtid boolfbn isJbvbIdfntififrStbrt(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isJbvbIdfntififrStbrt(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr mby bf pbrt of b Jbvb
     * idfntififr bs othfr thbn thf first dhbrbdtfr.
     * <p>
     * A dhbrbdtfr mby bf pbrt of b Jbvb idfntififr if bny of thf following
     * brf truf:
     * <ul>
     * <li>  it is b lfttfr
     * <li>  it is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li>  it is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'})
     * <li>  it is b digit
     * <li>  it is b numfrid lfttfr (sudh bs b Rombn numfrbl dhbrbdtfr)
     * <li>  it is b dombining mbrk
     * <li>  it is b non-spbding mbrk
     * <li> {@dodf isIdfntififrIgnorbblf} rfturns
     * {@dodf truf} for thf dhbrbdtfr
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isJbvbIdfntififrPbrt(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn {@dodf truf} if thf dhbrbdtfr mby bf pbrt of b
     *          Jbvb idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isIdfntififrIgnorbblf(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(dhbr)
     * @sff     jbvbx.lbng.modfl.SourdfVfrsion#isIdfntififr(ChbrSfqufndf)
     * @sindf   1.1
     */
    publid stbtid boolfbn isJbvbIdfntififrPbrt(dhbr dh) {
        rfturn isJbvbIdfntififrPbrt((int)dh);
    }

    /**
     * Dftfrminfs if thf dhbrbdtfr (Unidodf dodf point) mby bf pbrt of b Jbvb
     * idfntififr bs othfr thbn thf first dhbrbdtfr.
     * <p>
     * A dhbrbdtfr mby bf pbrt of b Jbvb idfntififr if bny of thf following
     * brf truf:
     * <ul>
     * <li>  it is b lfttfr
     * <li>  it is b durrfndy symbol (sudh bs {@dodf '$'})
     * <li>  it is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'})
     * <li>  it is b digit
     * <li>  it is b numfrid lfttfr (sudh bs b Rombn numfrbl dhbrbdtfr)
     * <li>  it is b dombining mbrk
     * <li>  it is b non-spbding mbrk
     * <li> {@link #isIdfntififrIgnorbblf(int)
     * isIdfntififrIgnorbblf(dodfPoint)} rfturns {@dodf truf} for
     * thf dhbrbdtfr
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn {@dodf truf} if thf dhbrbdtfr mby bf pbrt of b
     *          Jbvb idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isIdfntififrIgnorbblf(int)
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(int)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(int)
     * @sff     jbvbx.lbng.modfl.SourdfVfrsion#isIdfntififr(ChbrSfqufndf)
     * @sindf   1.5
     */
    publid stbtid boolfbn isJbvbIdfntififrPbrt(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isJbvbIdfntififrPbrt(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is pfrmissiblf bs thf
     * first dhbrbdtfr in b Unidodf idfntififr.
     * <p>
     * A dhbrbdtfr mby stbrt b Unidodf idfntififr if bnd only if
     * onf of thf following donditions is truf:
     * <ul>
     * <li> {@link #isLfttfr(dhbr) isLfttfr(dh)} rfturns {@dodf truf}
     * <li> {@link #gftTypf(dhbr) gftTypf(dh)} rfturns
     *      {@dodf LETTER_NUMBER}.
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isUnidodfIdfntififrStbrt(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby stbrt b Unidodf
     *          idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfr(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isUnidodfIdfntififrStbrt(dhbr dh) {
        rfturn isUnidodfIdfntififrStbrt((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is pfrmissiblf bs thf
     * first dhbrbdtfr in b Unidodf idfntififr.
     * <p>
     * A dhbrbdtfr mby stbrt b Unidodf idfntififr if bnd only if
     * onf of thf following donditions is truf:
     * <ul>
     * <li> {@link #isLfttfr(int) isLfttfr(dodfPoint)}
     *      rfturns {@dodf truf}
     * <li> {@link #gftTypf(int) gftTypf(dodfPoint)}
     *      rfturns {@dodf LETTER_NUMBER}.
     * </ul>
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby stbrt b Unidodf
     *          idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrStbrt(int)
     * @sff     Chbrbdtfr#isLfttfr(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isUnidodfIdfntififrStbrt(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isUnidodfIdfntififrStbrt(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr mby bf pbrt of b Unidodf
     * idfntififr bs othfr thbn thf first dhbrbdtfr.
     * <p>
     * A dhbrbdtfr mby bf pbrt of b Unidodf idfntififr if bnd only if
     * onf of thf following stbtfmfnts is truf:
     * <ul>
     * <li>  it is b lfttfr
     * <li>  it is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'})
     * <li>  it is b digit
     * <li>  it is b numfrid lfttfr (sudh bs b Rombn numfrbl dhbrbdtfr)
     * <li>  it is b dombining mbrk
     * <li>  it is b non-spbding mbrk
     * <li> {@dodf isIdfntififrIgnorbblf} rfturns
     * {@dodf truf} for this dhbrbdtfr.
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isUnidodfIdfntififrPbrt(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby bf pbrt of b
     *          Unidodf idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isIdfntififrIgnorbblf(dhbr)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isUnidodfIdfntififrPbrt(dhbr dh) {
        rfturn isUnidodfIdfntififrPbrt((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) mby bf pbrt of b Unidodf
     * idfntififr bs othfr thbn thf first dhbrbdtfr.
     * <p>
     * A dhbrbdtfr mby bf pbrt of b Unidodf idfntififr if bnd only if
     * onf of thf following stbtfmfnts is truf:
     * <ul>
     * <li>  it is b lfttfr
     * <li>  it is b donnfdting pundtubtion dhbrbdtfr (sudh bs {@dodf '_'})
     * <li>  it is b digit
     * <li>  it is b numfrid lfttfr (sudh bs b Rombn numfrbl dhbrbdtfr)
     * <li>  it is b dombining mbrk
     * <li>  it is b non-spbding mbrk
     * <li> {@dodf isIdfntififrIgnorbblf} rfturns
     * {@dodf truf} for this dhbrbdtfr.
     * </ul>
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr mby bf pbrt of b
     *          Unidodf idfntififr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isIdfntififrIgnorbblf(int)
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(int)
     * @sff     Chbrbdtfr#isLfttfrOrDigit(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrStbrt(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isUnidodfIdfntififrPbrt(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isUnidodfIdfntififrPbrt(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr should bf rfgbrdfd bs
     * bn ignorbblf dhbrbdtfr in b Jbvb idfntififr or b Unidodf idfntififr.
     * <p>
     * Thf following Unidodf dhbrbdtfrs brf ignorbblf in b Jbvb idfntififr
     * or b Unidodf idfntififr:
     * <ul>
     * <li>ISO dontrol dhbrbdtfrs thbt brf not whitfspbdf
     * <ul>
     * <li>{@dodf '\u005Cu0000'} through {@dodf '\u005Cu0008'}
     * <li>{@dodf '\u005Cu000E'} through {@dodf '\u005Cu001B'}
     * <li>{@dodf '\u005Cu007F'} through {@dodf '\u005Cu009F'}
     * </ul>
     *
     * <li>bll dhbrbdtfrs thbt hbvf thf {@dodf FORMAT} gfnfrbl
     * dbtfgory vbluf
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isIdfntififrIgnorbblf(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is bn ignorbblf dontrol
     *          dhbrbdtfr thbt mby bf pbrt of b Jbvb or Unidodf idfntififr;
     *           {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(dhbr)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isIdfntififrIgnorbblf(dhbr dh) {
        rfturn isIdfntififrIgnorbblf((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) should bf rfgbrdfd bs
     * bn ignorbblf dhbrbdtfr in b Jbvb idfntififr or b Unidodf idfntififr.
     * <p>
     * Thf following Unidodf dhbrbdtfrs brf ignorbblf in b Jbvb idfntififr
     * or b Unidodf idfntififr:
     * <ul>
     * <li>ISO dontrol dhbrbdtfrs thbt brf not whitfspbdf
     * <ul>
     * <li>{@dodf '\u005Cu0000'} through {@dodf '\u005Cu0008'}
     * <li>{@dodf '\u005Cu000E'} through {@dodf '\u005Cu001B'}
     * <li>{@dodf '\u005Cu007F'} through {@dodf '\u005Cu009F'}
     * </ul>
     *
     * <li>bll dhbrbdtfrs thbt hbvf thf {@dodf FORMAT} gfnfrbl
     * dbtfgory vbluf
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is bn ignorbblf dontrol
     *          dhbrbdtfr thbt mby bf pbrt of b Jbvb or Unidodf idfntififr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isJbvbIdfntififrPbrt(int)
     * @sff     Chbrbdtfr#isUnidodfIdfntififrPbrt(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isIdfntififrIgnorbblf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isIdfntififrIgnorbblf(dodfPoint);
    }

    /**
     * Convfrts thf dhbrbdtfr brgumfnt to lowfrdbsf using dbsf
     * mbpping informbtion from thf UnidodfDbtb filf.
     * <p>
     * Notf thbt
     * {@dodf Chbrbdtfr.isLowfrCbsf(Chbrbdtfr.toLowfrCbsf(dh))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs, pbrtidulbrly thosf thbt brf symbols or idfogrbphs.
     *
     * <p>In gfnfrbl, {@link String#toLowfrCbsf()} should bf usfd to mbp
     * dhbrbdtfrs to lowfrdbsf. {@dodf String} dbsf mbpping mfthods
     * hbvf sfvfrbl bfnffits ovfr {@dodf Chbrbdtfr} dbsf mbpping mfthods.
     * {@dodf String} dbsf mbpping mfthods dbn pfrform lodblf-sfnsitivf
     * mbppings, dontfxt-sfnsitivf mbppings, bnd 1:M dhbrbdtfr mbppings, whfrfbs
     * thf {@dodf Chbrbdtfr} dbsf mbpping mfthods dbnnot.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #toLowfrCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf donvfrtfd.
     * @rfturn  thf lowfrdbsf fquivblfnt of thf dhbrbdtfr, if bny;
     *          othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     String#toLowfrCbsf()
     */
    publid stbtid dhbr toLowfrCbsf(dhbr dh) {
        rfturn (dhbr)toLowfrCbsf((int)dh);
    }

    /**
     * Convfrts thf dhbrbdtfr (Unidodf dodf point) brgumfnt to
     * lowfrdbsf using dbsf mbpping informbtion from thf UnidodfDbtb
     * filf.
     *
     * <p> Notf thbt
     * {@dodf Chbrbdtfr.isLowfrCbsf(Chbrbdtfr.toLowfrCbsf(dodfPoint))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs, pbrtidulbrly thosf thbt brf symbols or idfogrbphs.
     *
     * <p>In gfnfrbl, {@link String#toLowfrCbsf()} should bf usfd to mbp
     * dhbrbdtfrs to lowfrdbsf. {@dodf String} dbsf mbpping mfthods
     * hbvf sfvfrbl bfnffits ovfr {@dodf Chbrbdtfr} dbsf mbpping mfthods.
     * {@dodf String} dbsf mbpping mfthods dbn pfrform lodblf-sfnsitivf
     * mbppings, dontfxt-sfnsitivf mbppings, bnd 1:M dhbrbdtfr mbppings, whfrfbs
     * thf {@dodf Chbrbdtfr} dbsf mbpping mfthods dbnnot.
     *
     * @pbrbm   dodfPoint   thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn  thf lowfrdbsf fquivblfnt of thf dhbrbdtfr (Unidodf dodf
     *          point), if bny; othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isLowfrCbsf(int)
     * @sff     String#toLowfrCbsf()
     *
     * @sindf   1.5
     */
    publid stbtid int toLowfrCbsf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).toLowfrCbsf(dodfPoint);
    }

    /**
     * Convfrts thf dhbrbdtfr brgumfnt to uppfrdbsf using dbsf mbpping
     * informbtion from thf UnidodfDbtb filf.
     * <p>
     * Notf thbt
     * {@dodf Chbrbdtfr.isUppfrCbsf(Chbrbdtfr.toUppfrCbsf(dh))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs, pbrtidulbrly thosf thbt brf symbols or idfogrbphs.
     *
     * <p>In gfnfrbl, {@link String#toUppfrCbsf()} should bf usfd to mbp
     * dhbrbdtfrs to uppfrdbsf. {@dodf String} dbsf mbpping mfthods
     * hbvf sfvfrbl bfnffits ovfr {@dodf Chbrbdtfr} dbsf mbpping mfthods.
     * {@dodf String} dbsf mbpping mfthods dbn pfrform lodblf-sfnsitivf
     * mbppings, dontfxt-sfnsitivf mbppings, bnd 1:M dhbrbdtfr mbppings, whfrfbs
     * thf {@dodf Chbrbdtfr} dbsf mbpping mfthods dbnnot.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #toUppfrCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf donvfrtfd.
     * @rfturn  thf uppfrdbsf fquivblfnt of thf dhbrbdtfr, if bny;
     *          othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isUppfrCbsf(dhbr)
     * @sff     String#toUppfrCbsf()
     */
    publid stbtid dhbr toUppfrCbsf(dhbr dh) {
        rfturn (dhbr)toUppfrCbsf((int)dh);
    }

    /**
     * Convfrts thf dhbrbdtfr (Unidodf dodf point) brgumfnt to
     * uppfrdbsf using dbsf mbpping informbtion from thf UnidodfDbtb
     * filf.
     *
     * <p>Notf thbt
     * {@dodf Chbrbdtfr.isUppfrCbsf(Chbrbdtfr.toUppfrCbsf(dodfPoint))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs, pbrtidulbrly thosf thbt brf symbols or idfogrbphs.
     *
     * <p>In gfnfrbl, {@link String#toUppfrCbsf()} should bf usfd to mbp
     * dhbrbdtfrs to uppfrdbsf. {@dodf String} dbsf mbpping mfthods
     * hbvf sfvfrbl bfnffits ovfr {@dodf Chbrbdtfr} dbsf mbpping mfthods.
     * {@dodf String} dbsf mbpping mfthods dbn pfrform lodblf-sfnsitivf
     * mbppings, dontfxt-sfnsitivf mbppings, bnd 1:M dhbrbdtfr mbppings, whfrfbs
     * thf {@dodf Chbrbdtfr} dbsf mbpping mfthods dbnnot.
     *
     * @pbrbm   dodfPoint   thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn  thf uppfrdbsf fquivblfnt of thf dhbrbdtfr, if bny;
     *          othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isUppfrCbsf(int)
     * @sff     String#toUppfrCbsf()
     *
     * @sindf   1.5
     */
    publid stbtid int toUppfrCbsf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).toUppfrCbsf(dodfPoint);
    }

    /**
     * Convfrts thf dhbrbdtfr brgumfnt to titlfdbsf using dbsf mbpping
     * informbtion from thf UnidodfDbtb filf. If b dhbrbdtfr hbs no
     * fxplidit titlfdbsf mbpping bnd is not itsflf b titlfdbsf dhbr
     * bddording to UnidodfDbtb, thfn thf uppfrdbsf mbpping is
     * rfturnfd bs bn fquivblfnt titlfdbsf mbpping. If thf
     * {@dodf dhbr} brgumfnt is blrfbdy b titlfdbsf
     * {@dodf dhbr}, thf sbmf {@dodf dhbr} vbluf will bf
     * rfturnfd.
     * <p>
     * Notf thbt
     * {@dodf Chbrbdtfr.isTitlfCbsf(Chbrbdtfr.toTitlfCbsf(dh))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #toTitlfCbsf(int)} mfthod.
     *
     * @pbrbm   dh   thf dhbrbdtfr to bf donvfrtfd.
     * @rfturn  thf titlfdbsf fquivblfnt of thf dhbrbdtfr, if bny;
     *          othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isTitlfCbsf(dhbr)
     * @sff     Chbrbdtfr#toLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#toUppfrCbsf(dhbr)
     * @sindf   1.0.2
     */
    publid stbtid dhbr toTitlfCbsf(dhbr dh) {
        rfturn (dhbr)toTitlfCbsf((int)dh);
    }

    /**
     * Convfrts thf dhbrbdtfr (Unidodf dodf point) brgumfnt to titlfdbsf using dbsf mbpping
     * informbtion from thf UnidodfDbtb filf. If b dhbrbdtfr hbs no
     * fxplidit titlfdbsf mbpping bnd is not itsflf b titlfdbsf dhbr
     * bddording to UnidodfDbtb, thfn thf uppfrdbsf mbpping is
     * rfturnfd bs bn fquivblfnt titlfdbsf mbpping. If thf
     * dhbrbdtfr brgumfnt is blrfbdy b titlfdbsf
     * dhbrbdtfr, thf sbmf dhbrbdtfr vbluf will bf
     * rfturnfd.
     *
     * <p>Notf thbt
     * {@dodf Chbrbdtfr.isTitlfCbsf(Chbrbdtfr.toTitlfCbsf(dodfPoint))}
     * dofs not blwbys rfturn {@dodf truf} for somf rbngfs of
     * dhbrbdtfrs.
     *
     * @pbrbm   dodfPoint   thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn  thf titlfdbsf fquivblfnt of thf dhbrbdtfr, if bny;
     *          othfrwisf, thf dhbrbdtfr itsflf.
     * @sff     Chbrbdtfr#isTitlfCbsf(int)
     * @sff     Chbrbdtfr#toLowfrCbsf(int)
     * @sff     Chbrbdtfr#toUppfrCbsf(int)
     * @sindf   1.5
     */
    publid stbtid int toTitlfCbsf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).toTitlfCbsf(dodfPoint);
    }

    /**
     * Rfturns thf numfrid vbluf of thf dhbrbdtfr {@dodf dh} in thf
     * spfdififd rbdix.
     * <p>
     * If thf rbdix is not in thf rbngf {@dodf MIN_RADIX} &lf;
     * {@dodf rbdix} &lf; {@dodf MAX_RADIX} or if thf
     * vbluf of {@dodf dh} is not b vblid digit in thf spfdififd
     * rbdix, {@dodf -1} is rfturnfd. A dhbrbdtfr is b vblid digit
     * if bt lfbst onf of thf following is truf:
     * <ul>
     * <li>Thf mfthod {@dodf isDigit} is {@dodf truf} of thf dhbrbdtfr
     *     bnd thf Unidodf dfdimbl digit vbluf of thf dhbrbdtfr (or its
     *     singlf-dhbrbdtfr dfdomposition) is lfss thbn thf spfdififd rbdix.
     *     In this dbsf thf dfdimbl digit vbluf is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf uppfrdbsf Lbtin lfttfrs
     *     {@dodf 'A'} through {@dodf 'Z'} bnd its dodf is lfss thbn
     *     {@dodf rbdix + 'A' - 10}.
     *     In this dbsf, {@dodf dh - 'A' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf lowfrdbsf Lbtin lfttfrs
     *     {@dodf 'b'} through {@dodf 'z'} bnd its dodf is lfss thbn
     *     {@dodf rbdix + 'b' - 10}.
     *     In this dbsf, {@dodf dh - 'b' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf fullwidth uppfrdbsf Lbtin lfttfrs A
     *     ({@dodf '\u005CuFF21'}) through Z ({@dodf '\u005CuFF3A'})
     *     bnd its dodf is lfss thbn
     *     {@dodf rbdix + '\u005CuFF21' - 10}.
     *     In this dbsf, {@dodf dh - '\u005CuFF21' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf fullwidth lowfrdbsf Lbtin lfttfrs b
     *     ({@dodf '\u005CuFF41'}) through z ({@dodf '\u005CuFF5A'})
     *     bnd its dodf is lfss thbn
     *     {@dodf rbdix + '\u005CuFF41' - 10}.
     *     In this dbsf, {@dodf dh - '\u005CuFF41' + 10}
     *     is rfturnfd.
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #digit(int, int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf donvfrtfd.
     * @pbrbm   rbdix   thf rbdix.
     * @rfturn  thf numfrid vbluf rfprfsfntfd by thf dhbrbdtfr in thf
     *          spfdififd rbdix.
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#isDigit(dhbr)
     */
    publid stbtid int digit(dhbr dh, int rbdix) {
        rfturn digit((int)dh, rbdix);
    }

    /**
     * Rfturns thf numfrid vbluf of thf spfdififd dhbrbdtfr (Unidodf
     * dodf point) in thf spfdififd rbdix.
     *
     * <p>If thf rbdix is not in thf rbngf {@dodf MIN_RADIX} &lf;
     * {@dodf rbdix} &lf; {@dodf MAX_RADIX} or if thf
     * dhbrbdtfr is not b vblid digit in thf spfdififd
     * rbdix, {@dodf -1} is rfturnfd. A dhbrbdtfr is b vblid digit
     * if bt lfbst onf of thf following is truf:
     * <ul>
     * <li>Thf mfthod {@link #isDigit(int) isDigit(dodfPoint)} is {@dodf truf} of thf dhbrbdtfr
     *     bnd thf Unidodf dfdimbl digit vbluf of thf dhbrbdtfr (or its
     *     singlf-dhbrbdtfr dfdomposition) is lfss thbn thf spfdififd rbdix.
     *     In this dbsf thf dfdimbl digit vbluf is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf uppfrdbsf Lbtin lfttfrs
     *     {@dodf 'A'} through {@dodf 'Z'} bnd its dodf is lfss thbn
     *     {@dodf rbdix + 'A' - 10}.
     *     In this dbsf, {@dodf dodfPoint - 'A' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf lowfrdbsf Lbtin lfttfrs
     *     {@dodf 'b'} through {@dodf 'z'} bnd its dodf is lfss thbn
     *     {@dodf rbdix + 'b' - 10}.
     *     In this dbsf, {@dodf dodfPoint - 'b' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf fullwidth uppfrdbsf Lbtin lfttfrs A
     *     ({@dodf '\u005CuFF21'}) through Z ({@dodf '\u005CuFF3A'})
     *     bnd its dodf is lfss thbn
     *     {@dodf rbdix + '\u005CuFF21' - 10}.
     *     In this dbsf,
     *     {@dodf dodfPoint - '\u005CuFF21' + 10}
     *     is rfturnfd.
     * <li>Thf dhbrbdtfr is onf of thf fullwidth lowfrdbsf Lbtin lfttfrs b
     *     ({@dodf '\u005CuFF41'}) through z ({@dodf '\u005CuFF5A'})
     *     bnd its dodf is lfss thbn
     *     {@dodf rbdix + '\u005CuFF41'- 10}.
     *     In this dbsf,
     *     {@dodf dodfPoint - '\u005CuFF41' + 10}
     *     is rfturnfd.
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @pbrbm   rbdix   thf rbdix.
     * @rfturn  thf numfrid vbluf rfprfsfntfd by thf dhbrbdtfr in thf
     *          spfdififd rbdix.
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#isDigit(int)
     * @sindf   1.5
     */
    publid stbtid int digit(int dodfPoint, int rbdix) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).digit(dodfPoint, rbdix);
    }

    /**
     * Rfturns thf {@dodf int} vbluf thbt thf spfdififd Unidodf
     * dhbrbdtfr rfprfsfnts. For fxbmplf, thf dhbrbdtfr
     * {@dodf '\u005Cu216C'} (thf rombn numfrbl fifty) will rfturn
     * bn int with b vbluf of 50.
     * <p>
     * Thf lfttfrs A-Z in thfir uppfrdbsf ({@dodf '\u005Cu0041'} through
     * {@dodf '\u005Cu005A'}), lowfrdbsf
     * ({@dodf '\u005Cu0061'} through {@dodf '\u005Cu007A'}), bnd
     * full width vbribnt ({@dodf '\u005CuFF21'} through
     * {@dodf '\u005CuFF3A'} bnd {@dodf '\u005CuFF41'} through
     * {@dodf '\u005CuFF5A'}) forms hbvf numfrid vblufs from 10
     * through 35. This is indfpfndfnt of thf Unidodf spfdifidbtion,
     * whidh dofs not bssign numfrid vblufs to thfsf {@dodf dhbr}
     * vblufs.
     * <p>
     * If thf dhbrbdtfr dofs not hbvf b numfrid vbluf, thfn -1 is rfturnfd.
     * If thf dhbrbdtfr hbs b numfrid vbluf thbt dbnnot bf rfprfsfntfd bs b
     * nonnfgbtivf intfgfr (for fxbmplf, b frbdtionbl vbluf), thfn -2
     * is rfturnfd.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #gftNumfridVbluf(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf donvfrtfd.
     * @rfturn  thf numfrid vbluf of thf dhbrbdtfr, bs b nonnfgbtivf {@dodf int}
     *           vbluf; -2 if thf dhbrbdtfr hbs b numfrid vbluf thbt is not b
     *          nonnfgbtivf intfgfr; -1 if thf dhbrbdtfr hbs no numfrid vbluf.
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#isDigit(dhbr)
     * @sindf   1.1
     */
    publid stbtid int gftNumfridVbluf(dhbr dh) {
        rfturn gftNumfridVbluf((int)dh);
    }

    /**
     * Rfturns thf {@dodf int} vbluf thbt thf spfdififd
     * dhbrbdtfr (Unidodf dodf point) rfprfsfnts. For fxbmplf, thf dhbrbdtfr
     * {@dodf '\u005Cu216C'} (thf Rombn numfrbl fifty) will rfturn
     * bn {@dodf int} with b vbluf of 50.
     * <p>
     * Thf lfttfrs A-Z in thfir uppfrdbsf ({@dodf '\u005Cu0041'} through
     * {@dodf '\u005Cu005A'}), lowfrdbsf
     * ({@dodf '\u005Cu0061'} through {@dodf '\u005Cu007A'}), bnd
     * full width vbribnt ({@dodf '\u005CuFF21'} through
     * {@dodf '\u005CuFF3A'} bnd {@dodf '\u005CuFF41'} through
     * {@dodf '\u005CuFF5A'}) forms hbvf numfrid vblufs from 10
     * through 35. This is indfpfndfnt of thf Unidodf spfdifidbtion,
     * whidh dofs not bssign numfrid vblufs to thfsf {@dodf dhbr}
     * vblufs.
     * <p>
     * If thf dhbrbdtfr dofs not hbvf b numfrid vbluf, thfn -1 is rfturnfd.
     * If thf dhbrbdtfr hbs b numfrid vbluf thbt dbnnot bf rfprfsfntfd bs b
     * nonnfgbtivf intfgfr (for fxbmplf, b frbdtionbl vbluf), thfn -2
     * is rfturnfd.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn  thf numfrid vbluf of thf dhbrbdtfr, bs b nonnfgbtivf {@dodf int}
     *          vbluf; -2 if thf dhbrbdtfr hbs b numfrid vbluf thbt is not b
     *          nonnfgbtivf intfgfr; -1 if thf dhbrbdtfr hbs no numfrid vbluf.
     * @sff     Chbrbdtfr#forDigit(int, int)
     * @sff     Chbrbdtfr#isDigit(int)
     * @sindf   1.5
     */
    publid stbtid int gftNumfridVbluf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).gftNumfridVbluf(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is ISO-LATIN-1 whitf spbdf.
     * This mfthod rfturns {@dodf truf} for thf following fivf
     * dhbrbdtfrs only:
     * <tbblf summbry="trufdhbrs">
     * <tr><td>{@dodf '\t'}</td>            <td>{@dodf U+0009}</td>
     *     <td>{@dodf HORIZONTAL TABULATION}</td></tr>
     * <tr><td>{@dodf '\n'}</td>            <td>{@dodf U+000A}</td>
     *     <td>{@dodf NEW LINE}</td></tr>
     * <tr><td>{@dodf '\f'}</td>            <td>{@dodf U+000C}</td>
     *     <td>{@dodf FORM FEED}</td></tr>
     * <tr><td>{@dodf '\r'}</td>            <td>{@dodf U+000D}</td>
     *     <td>{@dodf CARRIAGE RETURN}</td></tr>
     * <tr><td>{@dodf '&nbsp;'}</td>  <td>{@dodf U+0020}</td>
     *     <td>{@dodf SPACE}</td></tr>
     * </tbblf>
     *
     * @pbrbm      dh   thf dhbrbdtfr to bf tfstfd.
     * @rfturn     {@dodf truf} if thf dhbrbdtfr is ISO-LATIN-1 whitf
     *             spbdf; {@dodf fblsf} othfrwisf.
     * @sff        Chbrbdtfr#isSpbdfChbr(dhbr)
     * @sff        Chbrbdtfr#isWhitfspbdf(dhbr)
     * @dfprfdbtfd Rfplbdfd by isWhitfspbdf(dhbr).
     */
    @Dfprfdbtfd
    publid stbtid boolfbn isSpbdf(dhbr dh) {
        rfturn (dh <= 0x0020) &&
            (((((1L << 0x0009) |
            (1L << 0x000A) |
            (1L << 0x000C) |
            (1L << 0x000D) |
            (1L << 0x0020)) >> dh) & 1L) != 0);
    }


    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is b Unidodf spbdf dhbrbdtfr.
     * A dhbrbdtfr is donsidfrfd to bf b spbdf dhbrbdtfr if bnd only if
     * it is spfdififd to bf b spbdf dhbrbdtfr by thf Unidodf Stbndbrd. This
     * mfthod rfturns truf if thf dhbrbdtfr's gfnfrbl dbtfgory typf is bny of
     * thf following:
     * <ul>
     * <li> {@dodf SPACE_SEPARATOR}
     * <li> {@dodf LINE_SEPARATOR}
     * <li> {@dodf PARAGRAPH_SEPARATOR}
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isSpbdfChbr(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b spbdf dhbrbdtfr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isWhitfspbdf(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isSpbdfChbr(dhbr dh) {
        rfturn isSpbdfChbr((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is b
     * Unidodf spbdf dhbrbdtfr.  A dhbrbdtfr is donsidfrfd to bf b
     * spbdf dhbrbdtfr if bnd only if it is spfdififd to bf b spbdf
     * dhbrbdtfr by thf Unidodf Stbndbrd. This mfthod rfturns truf if
     * thf dhbrbdtfr's gfnfrbl dbtfgory typf is bny of thf following:
     *
     * <ul>
     * <li> {@link #SPACE_SEPARATOR}
     * <li> {@link #LINE_SEPARATOR}
     * <li> {@link #PARAGRAPH_SEPARATOR}
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b spbdf dhbrbdtfr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isWhitfspbdf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isSpbdfChbr(int dodfPoint) {
        rfturn ((((1 << Chbrbdtfr.SPACE_SEPARATOR) |
                  (1 << Chbrbdtfr.LINE_SEPARATOR) |
                  (1 << Chbrbdtfr.PARAGRAPH_SEPARATOR)) >> gftTypf(dodfPoint)) & 1)
            != 0;
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is whitf spbdf bddording to Jbvb.
     * A dhbrbdtfr is b Jbvb whitfspbdf dhbrbdtfr if bnd only if it sbtisfifs
     * onf of thf following dritfrib:
     * <ul>
     * <li> It is b Unidodf spbdf dhbrbdtfr ({@dodf SPACE_SEPARATOR},
     *      {@dodf LINE_SEPARATOR}, or {@dodf PARAGRAPH_SEPARATOR})
     *      but is not blso b non-brfbking spbdf ({@dodf '\u005Cu00A0'},
     *      {@dodf '\u005Cu2007'}, {@dodf '\u005Cu202F'}).
     * <li> It is {@dodf '\u005Ct'}, U+0009 HORIZONTAL TABULATION.
     * <li> It is {@dodf '\u005Cn'}, U+000A LINE FEED.
     * <li> It is {@dodf '\u005Cu000B'}, U+000B VERTICAL TABULATION.
     * <li> It is {@dodf '\u005Cf'}, U+000C FORM FEED.
     * <li> It is {@dodf '\u005Cr'}, U+000D CARRIAGE RETURN.
     * <li> It is {@dodf '\u005Cu001C'}, U+001C FILE SEPARATOR.
     * <li> It is {@dodf '\u005Cu001D'}, U+001D GROUP SEPARATOR.
     * <li> It is {@dodf '\u005Cu001E'}, U+001E RECORD SEPARATOR.
     * <li> It is {@dodf '\u005Cu001F'}, U+001F UNIT SEPARATOR.
     * </ul>
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isWhitfspbdf(int)} mfthod.
     *
     * @pbrbm   dh thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b Jbvb whitfspbdf
     *          dhbrbdtfr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isSpbdfChbr(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isWhitfspbdf(dhbr dh) {
        rfturn isWhitfspbdf((int)dh);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr (Unidodf dodf point) is
     * whitf spbdf bddording to Jbvb.  A dhbrbdtfr is b Jbvb
     * whitfspbdf dhbrbdtfr if bnd only if it sbtisfifs onf of thf
     * following dritfrib:
     * <ul>
     * <li> It is b Unidodf spbdf dhbrbdtfr ({@link #SPACE_SEPARATOR},
     *      {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR})
     *      but is not blso b non-brfbking spbdf ({@dodf '\u005Cu00A0'},
     *      {@dodf '\u005Cu2007'}, {@dodf '\u005Cu202F'}).
     * <li> It is {@dodf '\u005Ct'}, U+0009 HORIZONTAL TABULATION.
     * <li> It is {@dodf '\u005Cn'}, U+000A LINE FEED.
     * <li> It is {@dodf '\u005Cu000B'}, U+000B VERTICAL TABULATION.
     * <li> It is {@dodf '\u005Cf'}, U+000C FORM FEED.
     * <li> It is {@dodf '\u005Cr'}, U+000D CARRIAGE RETURN.
     * <li> It is {@dodf '\u005Cu001C'}, U+001C FILE SEPARATOR.
     * <li> It is {@dodf '\u005Cu001D'}, U+001D GROUP SEPARATOR.
     * <li> It is {@dodf '\u005Cu001E'}, U+001E RECORD SEPARATOR.
     * <li> It is {@dodf '\u005Cu001F'}, U+001F UNIT SEPARATOR.
     * </ul>
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is b Jbvb whitfspbdf
     *          dhbrbdtfr; {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isSpbdfChbr(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isWhitfspbdf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isWhitfspbdf(dodfPoint);
    }

    /**
     * Dftfrminfs if thf spfdififd dhbrbdtfr is bn ISO dontrol
     * dhbrbdtfr.  A dhbrbdtfr is donsidfrfd to bf bn ISO dontrol
     * dhbrbdtfr if its dodf is in thf rbngf {@dodf '\u005Cu0000'}
     * through {@dodf '\u005Cu001F'} or in thf rbngf
     * {@dodf '\u005Cu007F'} through {@dodf '\u005Cu009F'}.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isISOControl(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is bn ISO dontrol dhbrbdtfr;
     *          {@dodf fblsf} othfrwisf.
     *
     * @sff     Chbrbdtfr#isSpbdfChbr(dhbr)
     * @sff     Chbrbdtfr#isWhitfspbdf(dhbr)
     * @sindf   1.1
     */
    publid stbtid boolfbn isISOControl(dhbr dh) {
        rfturn isISOControl((int)dh);
    }

    /**
     * Dftfrminfs if thf rfffrfndfd dhbrbdtfr (Unidodf dodf point) is bn ISO dontrol
     * dhbrbdtfr.  A dhbrbdtfr is donsidfrfd to bf bn ISO dontrol
     * dhbrbdtfr if its dodf is in thf rbngf {@dodf '\u005Cu0000'}
     * through {@dodf '\u005Cu001F'} or in thf rbngf
     * {@dodf '\u005Cu007F'} through {@dodf '\u005Cu009F'}.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is bn ISO dontrol dhbrbdtfr;
     *          {@dodf fblsf} othfrwisf.
     * @sff     Chbrbdtfr#isSpbdfChbr(int)
     * @sff     Chbrbdtfr#isWhitfspbdf(int)
     * @sindf   1.5
     */
    publid stbtid boolfbn isISOControl(int dodfPoint) {
        // Optimizfd form of:
        //     (dodfPoint >= 0x00 && dodfPoint <= 0x1F) ||
        //     (dodfPoint >= 0x7F && dodfPoint <= 0x9F);
        rfturn dodfPoint <= 0x9F &&
            (dodfPoint >= 0x7F || (dodfPoint >>> 5 == 0));
    }

    /**
     * Rfturns b vbluf indidbting b dhbrbdtfr's gfnfrbl dbtfgory.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #gftTypf(int)} mfthod.
     *
     * @pbrbm   dh      thf dhbrbdtfr to bf tfstfd.
     * @rfturn  b vbluf of typf {@dodf int} rfprfsfnting thf
     *          dhbrbdtfr's gfnfrbl dbtfgory.
     * @sff     Chbrbdtfr#COMBINING_SPACING_MARK
     * @sff     Chbrbdtfr#CONNECTOR_PUNCTUATION
     * @sff     Chbrbdtfr#CONTROL
     * @sff     Chbrbdtfr#CURRENCY_SYMBOL
     * @sff     Chbrbdtfr#DASH_PUNCTUATION
     * @sff     Chbrbdtfr#DECIMAL_DIGIT_NUMBER
     * @sff     Chbrbdtfr#ENCLOSING_MARK
     * @sff     Chbrbdtfr#END_PUNCTUATION
     * @sff     Chbrbdtfr#FINAL_QUOTE_PUNCTUATION
     * @sff     Chbrbdtfr#FORMAT
     * @sff     Chbrbdtfr#INITIAL_QUOTE_PUNCTUATION
     * @sff     Chbrbdtfr#LETTER_NUMBER
     * @sff     Chbrbdtfr#LINE_SEPARATOR
     * @sff     Chbrbdtfr#LOWERCASE_LETTER
     * @sff     Chbrbdtfr#MATH_SYMBOL
     * @sff     Chbrbdtfr#MODIFIER_LETTER
     * @sff     Chbrbdtfr#MODIFIER_SYMBOL
     * @sff     Chbrbdtfr#NON_SPACING_MARK
     * @sff     Chbrbdtfr#OTHER_LETTER
     * @sff     Chbrbdtfr#OTHER_NUMBER
     * @sff     Chbrbdtfr#OTHER_PUNCTUATION
     * @sff     Chbrbdtfr#OTHER_SYMBOL
     * @sff     Chbrbdtfr#PARAGRAPH_SEPARATOR
     * @sff     Chbrbdtfr#PRIVATE_USE
     * @sff     Chbrbdtfr#SPACE_SEPARATOR
     * @sff     Chbrbdtfr#START_PUNCTUATION
     * @sff     Chbrbdtfr#SURROGATE
     * @sff     Chbrbdtfr#TITLECASE_LETTER
     * @sff     Chbrbdtfr#UNASSIGNED
     * @sff     Chbrbdtfr#UPPERCASE_LETTER
     * @sindf   1.1
     */
    publid stbtid int gftTypf(dhbr dh) {
        rfturn gftTypf((int)dh);
    }

    /**
     * Rfturns b vbluf indidbting b dhbrbdtfr's gfnfrbl dbtfgory.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  b vbluf of typf {@dodf int} rfprfsfnting thf
     *          dhbrbdtfr's gfnfrbl dbtfgory.
     * @sff     Chbrbdtfr#COMBINING_SPACING_MARK COMBINING_SPACING_MARK
     * @sff     Chbrbdtfr#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION
     * @sff     Chbrbdtfr#CONTROL CONTROL
     * @sff     Chbrbdtfr#CURRENCY_SYMBOL CURRENCY_SYMBOL
     * @sff     Chbrbdtfr#DASH_PUNCTUATION DASH_PUNCTUATION
     * @sff     Chbrbdtfr#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER
     * @sff     Chbrbdtfr#ENCLOSING_MARK ENCLOSING_MARK
     * @sff     Chbrbdtfr#END_PUNCTUATION END_PUNCTUATION
     * @sff     Chbrbdtfr#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION
     * @sff     Chbrbdtfr#FORMAT FORMAT
     * @sff     Chbrbdtfr#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION
     * @sff     Chbrbdtfr#LETTER_NUMBER LETTER_NUMBER
     * @sff     Chbrbdtfr#LINE_SEPARATOR LINE_SEPARATOR
     * @sff     Chbrbdtfr#LOWERCASE_LETTER LOWERCASE_LETTER
     * @sff     Chbrbdtfr#MATH_SYMBOL MATH_SYMBOL
     * @sff     Chbrbdtfr#MODIFIER_LETTER MODIFIER_LETTER
     * @sff     Chbrbdtfr#MODIFIER_SYMBOL MODIFIER_SYMBOL
     * @sff     Chbrbdtfr#NON_SPACING_MARK NON_SPACING_MARK
     * @sff     Chbrbdtfr#OTHER_LETTER OTHER_LETTER
     * @sff     Chbrbdtfr#OTHER_NUMBER OTHER_NUMBER
     * @sff     Chbrbdtfr#OTHER_PUNCTUATION OTHER_PUNCTUATION
     * @sff     Chbrbdtfr#OTHER_SYMBOL OTHER_SYMBOL
     * @sff     Chbrbdtfr#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR
     * @sff     Chbrbdtfr#PRIVATE_USE PRIVATE_USE
     * @sff     Chbrbdtfr#SPACE_SEPARATOR SPACE_SEPARATOR
     * @sff     Chbrbdtfr#START_PUNCTUATION START_PUNCTUATION
     * @sff     Chbrbdtfr#SURROGATE SURROGATE
     * @sff     Chbrbdtfr#TITLECASE_LETTER TITLECASE_LETTER
     * @sff     Chbrbdtfr#UNASSIGNED UNASSIGNED
     * @sff     Chbrbdtfr#UPPERCASE_LETTER UPPERCASE_LETTER
     * @sindf   1.5
     */
    publid stbtid int gftTypf(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).gftTypf(dodfPoint);
    }

    /**
     * Dftfrminfs thf dhbrbdtfr rfprfsfntbtion for b spfdifid digit in
     * thf spfdififd rbdix. If thf vbluf of {@dodf rbdix} is not b
     * vblid rbdix, or thf vbluf of {@dodf digit} is not b vblid
     * digit in thf spfdififd rbdix, thf null dhbrbdtfr
     * ({@dodf '\u005Cu0000'}) is rfturnfd.
     * <p>
     * Thf {@dodf rbdix} brgumfnt is vblid if it is grfbtfr thbn or
     * fqubl to {@dodf MIN_RADIX} bnd lfss thbn or fqubl to
     * {@dodf MAX_RADIX}. Thf {@dodf digit} brgumfnt is vblid if
     * {@dodf 0 <= digit < rbdix}.
     * <p>
     * If thf digit is lfss thbn 10, thfn
     * {@dodf '0' + digit} is rfturnfd. Othfrwisf, thf vbluf
     * {@dodf 'b' + digit - 10} is rfturnfd.
     *
     * @pbrbm   digit   thf numbfr to donvfrt to b dhbrbdtfr.
     * @pbrbm   rbdix   thf rbdix.
     * @rfturn  thf {@dodf dhbr} rfprfsfntbtion of thf spfdififd digit
     *          in thf spfdififd rbdix.
     * @sff     Chbrbdtfr#MIN_RADIX
     * @sff     Chbrbdtfr#MAX_RADIX
     * @sff     Chbrbdtfr#digit(dhbr, int)
     */
    publid stbtid dhbr forDigit(int digit, int rbdix) {
        if ((digit >= rbdix) || (digit < 0)) {
            rfturn '\0';
        }
        if ((rbdix < Chbrbdtfr.MIN_RADIX) || (rbdix > Chbrbdtfr.MAX_RADIX)) {
            rfturn '\0';
        }
        if (digit < 10) {
            rfturn (dhbr)('0' + digit);
        }
        rfturn (dhbr)('b' - 10 + digit);
    }

    /**
     * Rfturns thf Unidodf dirfdtionblity propfrty for thf givfn
     * dhbrbdtfr.  Chbrbdtfr dirfdtionblity is usfd to dbldulbtf thf
     * visubl ordfring of tfxt. Thf dirfdtionblity vbluf of undffinfd
     * {@dodf dhbr} vblufs is {@dodf DIRECTIONALITY_UNDEFINED}.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #gftDirfdtionblity(int)} mfthod.
     *
     * @pbrbm  dh {@dodf dhbr} for whidh thf dirfdtionblity propfrty
     *            is rfqufstfd.
     * @rfturn thf dirfdtionblity propfrty of thf {@dodf dhbr} vbluf.
     *
     * @sff Chbrbdtfr#DIRECTIONALITY_UNDEFINED
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_ARABIC_NUMBER
     * @sff Chbrbdtfr#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_NONSPACING_MARK
     * @sff Chbrbdtfr#DIRECTIONALITY_BOUNDARY_NEUTRAL
     * @sff Chbrbdtfr#DIRECTIONALITY_PARAGRAPH_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_SEGMENT_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_WHITESPACE
     * @sff Chbrbdtfr#DIRECTIONALITY_OTHER_NEUTRALS
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
     * @sff Chbrbdtfr#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
     * @sindf 1.4
     */
    publid stbtid bytf gftDirfdtionblity(dhbr dh) {
        rfturn gftDirfdtionblity((int)dh);
    }

    /**
     * Rfturns thf Unidodf dirfdtionblity propfrty for thf givfn
     * dhbrbdtfr (Unidodf dodf point).  Chbrbdtfr dirfdtionblity is
     * usfd to dbldulbtf thf visubl ordfring of tfxt. Thf
     * dirfdtionblity vbluf of undffinfd dhbrbdtfr is {@link
     * #DIRECTIONALITY_UNDEFINED}.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) for whidh
     *          thf dirfdtionblity propfrty is rfqufstfd.
     * @rfturn thf dirfdtionblity propfrty of thf dhbrbdtfr.
     *
     * @sff Chbrbdtfr#DIRECTIONALITY_UNDEFINED DIRECTIONALITY_UNDEFINED
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT DIRECTIONALITY_LEFT_TO_RIGHT
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT DIRECTIONALITY_RIGHT_TO_LEFT
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER DIRECTIONALITY_EUROPEAN_NUMBER
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_ARABIC_NUMBER DIRECTIONALITY_ARABIC_NUMBER
     * @sff Chbrbdtfr#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_NONSPACING_MARK DIRECTIONALITY_NONSPACING_MARK
     * @sff Chbrbdtfr#DIRECTIONALITY_BOUNDARY_NEUTRAL DIRECTIONALITY_BOUNDARY_NEUTRAL
     * @sff Chbrbdtfr#DIRECTIONALITY_PARAGRAPH_SEPARATOR DIRECTIONALITY_PARAGRAPH_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_SEGMENT_SEPARATOR DIRECTIONALITY_SEGMENT_SEPARATOR
     * @sff Chbrbdtfr#DIRECTIONALITY_WHITESPACE DIRECTIONALITY_WHITESPACE
     * @sff Chbrbdtfr#DIRECTIONALITY_OTHER_NEUTRALS DIRECTIONALITY_OTHER_NEUTRALS
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
     * @sff Chbrbdtfr#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
     * @sff Chbrbdtfr#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
     * @sff Chbrbdtfr#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
     * @sindf    1.5
     */
    publid stbtid bytf gftDirfdtionblity(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).gftDirfdtionblity(dodfPoint);
    }

    /**
     * Dftfrminfs whfthfr thf dhbrbdtfr is mirrorfd bddording to thf
     * Unidodf spfdifidbtion.  Mirrorfd dhbrbdtfrs should hbvf thfir
     * glyphs horizontblly mirrorfd whfn displbyfd in tfxt thbt is
     * right-to-lfft.  For fxbmplf, {@dodf '\u005Cu0028'} LEFT
     * PARENTHESIS is sfmbntidblly dffinfd to bf bn <i>opfning
     * pbrfnthfsis</i>.  This will bppfbr bs b "(" in tfxt thbt is
     * lfft-to-right but bs b ")" in tfxt thbt is right-to-lfft.
     *
     * <p><b>Notf:</b> This mfthod dbnnot hbndlf <b
     * hrff="#supplfmfntbry"> supplfmfntbry dhbrbdtfrs</b>. To support
     * bll Unidodf dhbrbdtfrs, indluding supplfmfntbry dhbrbdtfrs, usf
     * thf {@link #isMirrorfd(int)} mfthod.
     *
     * @pbrbm  dh {@dodf dhbr} for whidh thf mirrorfd propfrty is rfqufstfd
     * @rfturn {@dodf truf} if thf dhbr is mirrorfd, {@dodf fblsf}
     *         if thf {@dodf dhbr} is not mirrorfd or is not dffinfd.
     * @sindf 1.4
     */
    publid stbtid boolfbn isMirrorfd(dhbr dh) {
        rfturn isMirrorfd((int)dh);
    }

    /**
     * Dftfrminfs whfthfr thf spfdififd dhbrbdtfr (Unidodf dodf point)
     * is mirrorfd bddording to thf Unidodf spfdifidbtion.  Mirrorfd
     * dhbrbdtfrs should hbvf thfir glyphs horizontblly mirrorfd whfn
     * displbyfd in tfxt thbt is right-to-lfft.  For fxbmplf,
     * {@dodf '\u005Cu0028'} LEFT PARENTHESIS is sfmbntidblly
     * dffinfd to bf bn <i>opfning pbrfnthfsis</i>.  This will bppfbr
     * bs b "(" in tfxt thbt is lfft-to-right but bs b ")" in tfxt
     * thbt is right-to-lfft.
     *
     * @pbrbm   dodfPoint thf dhbrbdtfr (Unidodf dodf point) to bf tfstfd.
     * @rfturn  {@dodf truf} if thf dhbrbdtfr is mirrorfd, {@dodf fblsf}
     *          if thf dhbrbdtfr is not mirrorfd or is not dffinfd.
     * @sindf   1.5
     */
    publid stbtid boolfbn isMirrorfd(int dodfPoint) {
        rfturn ChbrbdtfrDbtb.of(dodfPoint).isMirrorfd(dodfPoint);
    }

    /**
     * Compbrfs two {@dodf Chbrbdtfr} objfdts numfridblly.
     *
     * @pbrbm   bnothfrChbrbdtfr   thf {@dodf Chbrbdtfr} to bf dompbrfd.

     * @rfturn  thf vbluf {@dodf 0} if thf brgumfnt {@dodf Chbrbdtfr}
     *          is fqubl to this {@dodf Chbrbdtfr}; b vbluf lfss thbn
     *          {@dodf 0} if this {@dodf Chbrbdtfr} is numfridblly lfss
     *          thbn thf {@dodf Chbrbdtfr} brgumfnt; bnd b vbluf grfbtfr thbn
     *          {@dodf 0} if this {@dodf Chbrbdtfr} is numfridblly grfbtfr
     *          thbn thf {@dodf Chbrbdtfr} brgumfnt (unsignfd dompbrison).
     *          Notf thbt this is stridtly b numfridbl dompbrison; it is not
     *          lodblf-dfpfndfnt.
     * @sindf   1.2
     */
    publid int dompbrfTo(Chbrbdtfr bnothfrChbrbdtfr) {
        rfturn dompbrf(this.vbluf, bnothfrChbrbdtfr.vbluf);
    }

    /**
     * Compbrfs two {@dodf dhbr} vblufs numfridblly.
     * Thf vbluf rfturnfd is idfntidbl to whbt would bf rfturnfd by:
     * <prf>
     *    Chbrbdtfr.vblufOf(x).dompbrfTo(Chbrbdtfr.vblufOf(y))
     * </prf>
     *
     * @pbrbm  x thf first {@dodf dhbr} to dompbrf
     * @pbrbm  y thf sfdond {@dodf dhbr} to dompbrf
     * @rfturn thf vbluf {@dodf 0} if {@dodf x == y};
     *         b vbluf lfss thbn {@dodf 0} if {@dodf x < y}; bnd
     *         b vbluf grfbtfr thbn {@dodf 0} if {@dodf x > y}
     * @sindf 1.7
     */
    publid stbtid int dompbrf(dhbr x, dhbr y) {
        rfturn x - y;
    }

    /**
     * Convfrts thf dhbrbdtfr (Unidodf dodf point) brgumfnt to uppfrdbsf using
     * informbtion from thf UnidodfDbtb filf.
     *
     * @pbrbm   dodfPoint   thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn  fithfr thf uppfrdbsf fquivblfnt of thf dhbrbdtfr, if
     *          bny, or bn frror flbg ({@dodf Chbrbdtfr.ERROR})
     *          thbt indidbtfs thbt b 1:M {@dodf dhbr} mbpping fxists.
     * @sff     Chbrbdtfr#isLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#isUppfrCbsf(dhbr)
     * @sff     Chbrbdtfr#toLowfrCbsf(dhbr)
     * @sff     Chbrbdtfr#toTitlfCbsf(dhbr)
     * @sindf 1.4
     */
    stbtid int toUppfrCbsfEx(int dodfPoint) {
        bssfrt isVblidCodfPoint(dodfPoint);
        rfturn ChbrbdtfrDbtb.of(dodfPoint).toUppfrCbsfEx(dodfPoint);
    }

    /**
     * Convfrts thf dhbrbdtfr (Unidodf dodf point) brgumfnt to uppfrdbsf using dbsf
     * mbpping informbtion from thf SpfdiblCbsing filf in thf Unidodf
     * spfdifidbtion. If b dhbrbdtfr hbs no fxplidit uppfrdbsf
     * mbpping, thfn thf {@dodf dhbr} itsflf is rfturnfd in thf
     * {@dodf dhbr[]}.
     *
     * @pbrbm   dodfPoint   thf dhbrbdtfr (Unidodf dodf point) to bf donvfrtfd.
     * @rfturn b {@dodf dhbr[]} with thf uppfrdbsfd dhbrbdtfr.
     * @sindf 1.4
     */
    stbtid dhbr[] toUppfrCbsfChbrArrby(int dodfPoint) {
        // As of Unidodf 6.0, 1:M uppfrdbsings only hbppfn in thf BMP.
        bssfrt isBmpCodfPoint(dodfPoint);
        rfturn ChbrbdtfrDbtb.of(dodfPoint).toUppfrCbsfChbrArrby(dodfPoint);
    }

    /**
     * Thf numbfr of bits usfd to rfprfsfnt b <tt>dhbr</tt> vbluf in unsignfd
     * binbry form, donstbnt {@dodf 16}.
     *
     * @sindf 1.5
     */
    publid stbtid finbl int SIZE = 16;

    /**
     * Thf numbfr of bytfs usfd to rfprfsfnt b {@dodf dhbr} vbluf in unsignfd
     * binbry form.
     *
     * @sindf 1.8
     */
    publid stbtid finbl int BYTES = SIZE / Bytf.SIZE;

    /**
     * Rfturns thf vbluf obtbinfd by rfvfrsing thf ordfr of thf bytfs in thf
     * spfdififd <tt>dhbr</tt> vbluf.
     *
     * @pbrbm dh Thf {@dodf dhbr} of whidh to rfvfrsf thf bytf ordfr.
     * @rfturn thf vbluf obtbinfd by rfvfrsing (or, fquivblfntly, swbpping)
     *     thf bytfs in thf spfdififd <tt>dhbr</tt> vbluf.
     * @sindf 1.5
     */
    publid stbtid dhbr rfvfrsfBytfs(dhbr dh) {
        rfturn (dhbr) (((dh & 0xFF00) >> 8) | (dh << 8));
    }

    /**
     * Rfturns thf Unidodf nbmf of thf spfdififd dhbrbdtfr
     * {@dodf dodfPoint}, or null if thf dodf point is
     * {@link #UNASSIGNED unbssignfd}.
     * <p>
     * Notf: if thf spfdififd dhbrbdtfr is not bssignfd b nbmf by
     * thf <i>UnidodfDbtb</i> filf (pbrt of thf Unidodf Chbrbdtfr
     * Dbtbbbsf mbintbinfd by thf Unidodf Consortium), thf rfturnfd
     * nbmf is thf sbmf bs thf rfsult of fxprfssion.
     *
     * <blodkquotf>{@dodf
     *     Chbrbdtfr.UnidodfBlodk.of(dodfPoint).toString().rfplbdf('_', ' ')
     *     + " "
     *     + Intfgfr.toHfxString(dodfPoint).toUppfrCbsf(Lodblf.ENGLISH);
     *
     * }</blodkquotf>
     *
     * @pbrbm  dodfPoint thf dhbrbdtfr (Unidodf dodf point)
     *
     * @rfturn thf Unidodf nbmf of thf spfdififd dhbrbdtfr, or null if
     *         thf dodf point is unbssignfd.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf spfdififd
     *            {@dodf dodfPoint} is not b vblid Unidodf
     *            dodf point.
     *
     * @sindf 1.7
     */
    publid stbtid String gftNbmf(int dodfPoint) {
        if (!isVblidCodfPoint(dodfPoint)) {
            throw nfw IllfgblArgumfntExdfption();
        }
        String nbmf = ChbrbdtfrNbmf.gft(dodfPoint);
        if (nbmf != null)
            rfturn nbmf;
        if (gftTypf(dodfPoint) == UNASSIGNED)
            rfturn null;
        UnidodfBlodk blodk = UnidodfBlodk.of(dodfPoint);
        if (blodk != null)
            rfturn blodk.toString().rfplbdf('_', ' ') + " "
                   + Intfgfr.toHfxString(dodfPoint).toUppfrCbsf(Lodblf.ENGLISH);
        // should nfvfr domf hfrf
        rfturn Intfgfr.toHfxString(dodfPoint).toUppfrCbsf(Lodblf.ENGLISH);
    }
}
