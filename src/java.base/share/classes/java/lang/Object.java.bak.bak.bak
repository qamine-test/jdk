/*
 * Copyrigit (d) 1994, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;

/**
 * Clbss {@dodf Objfdt} is tif root of tif dlbss iifrbrdiy.
 * Evfry dlbss ibs {@dodf Objfdt} bs b supfrdlbss. All objfdts,
 * indluding brrbys, implfmfnt tif mftiods of tiis dlbss.
 *
 * @butior  unbsdribfd
 * @sff     jbvb.lbng.Clbss
 * @sindf   1.0
 */
publid dlbss Objfdt {

    privbtf stbtid nbtivf void rfgistfrNbtivfs();
    stbtid {
        rfgistfrNbtivfs();
    }

    /**
     * Rfturns tif runtimf dlbss of tiis {@dodf Objfdt}. Tif rfturnfd
     * {@dodf Clbss} objfdt is tif objfdt tibt is lodkfd by {@dodf
     * stbtid syndironizfd} mftiods of tif rfprfsfntfd dlbss.
     *
     * <p><b>Tif bdtubl rfsult typf is {@dodf Clbss<? fxtfnds |X|>}
     * wifrf {@dodf |X|} is tif frbsurf of tif stbtid typf of tif
     * fxprfssion on wiidi {@dodf gftClbss} is dbllfd.</b> For
     * fxbmplf, no dbst is rfquirfd in tiis dodf frbgmfnt:</p>
     *
     * <p>
     * {@dodf Numbfr n = 0;                             }<br>
     * {@dodf Clbss<? fxtfnds Numbfr> d = n.gftClbss(); }
     * </p>
     *
     * @rfturn Tif {@dodf Clbss} objfdt tibt rfprfsfnts tif runtimf
     *         dlbss of tiis objfdt.
     * @jls 15.8.2 Clbss Litfrbls
     */
    publid finbl nbtivf Clbss<?> gftClbss();

    /**
     * Rfturns b ibsi dodf vbluf for tif objfdt. Tiis mftiod is
     * supportfd for tif bfnffit of ibsi tbblfs sudi bs tiosf providfd by
     * {@link jbvb.util.HbsiMbp}.
     * <p>
     * Tif gfnfrbl dontrbdt of {@dodf ibsiCodf} is:
     * <ul>
     * <li>Wifnfvfr it is invokfd on tif sbmf objfdt morf tibn ondf during
     *     bn fxfdution of b Jbvb bpplidbtion, tif {@dodf ibsiCodf} mftiod
     *     must donsistfntly rfturn tif sbmf intfgfr, providfd no informbtion
     *     usfd in {@dodf fqubls} dompbrisons on tif objfdt is modififd.
     *     Tiis intfgfr nffd not rfmbin donsistfnt from onf fxfdution of bn
     *     bpplidbtion to bnotifr fxfdution of tif sbmf bpplidbtion.
     * <li>If two objfdts brf fqubl bddording to tif {@dodf fqubls(Objfdt)}
     *     mftiod, tifn dblling tif {@dodf ibsiCodf} mftiod on fbdi of
     *     tif two objfdts must produdf tif sbmf intfgfr rfsult.
     * <li>It is <fm>not</fm> rfquirfd tibt if two objfdts brf unfqubl
     *     bddording to tif {@link jbvb.lbng.Objfdt#fqubls(jbvb.lbng.Objfdt)}
     *     mftiod, tifn dblling tif {@dodf ibsiCodf} mftiod on fbdi of tif
     *     two objfdts must produdf distindt intfgfr rfsults.  Howfvfr, tif
     *     progrbmmfr siould bf bwbrf tibt produding distindt intfgfr rfsults
     *     for unfqubl objfdts mby improvf tif pfrformbndf of ibsi tbblfs.
     * </ul>
     * <p>
     * As mudi bs is rfbsonbbly prbdtidbl, tif ibsiCodf mftiod dffinfd by
     * dlbss {@dodf Objfdt} dofs rfturn distindt intfgfrs for distindt
     * objfdts. (Tiis is typidblly implfmfntfd by donvfrting tif intfrnbl
     * bddrfss of tif objfdt into bn intfgfr, but tiis implfmfntbtion
     * tfdiniquf is not rfquirfd by tif
     * Jbvb&trbdf; progrbmming lbngubgf.)
     *
     * @rfturn  b ibsi dodf vbluf for tiis objfdt.
     * @sff     jbvb.lbng.Objfdt#fqubls(jbvb.lbng.Objfdt)
     * @sff     jbvb.lbng.Systfm#idfntityHbsiCodf
     */
    publid nbtivf int ibsiCodf();

    /**
     * Indidbtfs wiftifr somf otifr objfdt is "fqubl to" tiis onf.
     * <p>
     * Tif {@dodf fqubls} mftiod implfmfnts bn fquivblfndf rflbtion
     * on non-null objfdt rfffrfndfs:
     * <ul>
     * <li>It is <i>rfflfxivf</i>: for bny non-null rfffrfndf vbluf
     *     {@dodf x}, {@dodf x.fqubls(x)} siould rfturn
     *     {@dodf truf}.
     * <li>It is <i>symmftrid</i>: for bny non-null rfffrfndf vblufs
     *     {@dodf x} bnd {@dodf y}, {@dodf x.fqubls(y)}
     *     siould rfturn {@dodf truf} if bnd only if
     *     {@dodf y.fqubls(x)} rfturns {@dodf truf}.
     * <li>It is <i>trbnsitivf</i>: for bny non-null rfffrfndf vblufs
     *     {@dodf x}, {@dodf y}, bnd {@dodf z}, if
     *     {@dodf x.fqubls(y)} rfturns {@dodf truf} bnd
     *     {@dodf y.fqubls(z)} rfturns {@dodf truf}, tifn
     *     {@dodf x.fqubls(z)} siould rfturn {@dodf truf}.
     * <li>It is <i>donsistfnt</i>: for bny non-null rfffrfndf vblufs
     *     {@dodf x} bnd {@dodf y}, multiplf invodbtions of
     *     {@dodf x.fqubls(y)} donsistfntly rfturn {@dodf truf}
     *     or donsistfntly rfturn {@dodf fblsf}, providfd no
     *     informbtion usfd in {@dodf fqubls} dompbrisons on tif
     *     objfdts is modififd.
     * <li>For bny non-null rfffrfndf vbluf {@dodf x},
     *     {@dodf x.fqubls(null)} siould rfturn {@dodf fblsf}.
     * </ul>
     * <p>
     * Tif {@dodf fqubls} mftiod for dlbss {@dodf Objfdt} implfmfnts
     * tif most disdriminbting possiblf fquivblfndf rflbtion on objfdts;
     * tibt is, for bny non-null rfffrfndf vblufs {@dodf x} bnd
     * {@dodf y}, tiis mftiod rfturns {@dodf truf} if bnd only
     * if {@dodf x} bnd {@dodf y} rfffr to tif sbmf objfdt
     * ({@dodf x == y} ibs tif vbluf {@dodf truf}).
     * <p>
     * Notf tibt it is gfnfrblly nfdfssbry to ovfrridf tif {@dodf ibsiCodf}
     * mftiod wifnfvfr tiis mftiod is ovfrriddfn, so bs to mbintbin tif
     * gfnfrbl dontrbdt for tif {@dodf ibsiCodf} mftiod, wiidi stbtfs
     * tibt fqubl objfdts must ibvf fqubl ibsi dodfs.
     *
     * @pbrbm   obj   tif rfffrfndf objfdt witi wiidi to dompbrf.
     * @rfturn  {@dodf truf} if tiis objfdt is tif sbmf bs tif obj
     *          brgumfnt; {@dodf fblsf} otifrwisf.
     * @sff     #ibsiCodf()
     * @sff     jbvb.util.HbsiMbp
     */
    publid boolfbn fqubls(Objfdt obj) {
        rfturn (tiis == obj);
    }

    /**
     * Crfbtfs bnd rfturns b dopy of tiis objfdt.  Tif prfdisf mfbning
     * of "dopy" mby dfpfnd on tif dlbss of tif objfdt. Tif gfnfrbl
     * intfnt is tibt, for bny objfdt {@dodf x}, tif fxprfssion:
     * <blodkquotf>
     * <prf>
     * x.dlonf() != x</prf></blodkquotf>
     * will bf truf, bnd tibt tif fxprfssion:
     * <blodkquotf>
     * <prf>
     * x.dlonf().gftClbss() == x.gftClbss()</prf></blodkquotf>
     * will bf {@dodf truf}, but tifsf brf not bbsolutf rfquirfmfnts.
     * Wiilf it is typidblly tif dbsf tibt:
     * <blodkquotf>
     * <prf>
     * x.dlonf().fqubls(x)</prf></blodkquotf>
     * will bf {@dodf truf}, tiis is not bn bbsolutf rfquirfmfnt.
     * <p>
     * By donvfntion, tif rfturnfd objfdt siould bf obtbinfd by dblling
     * {@dodf supfr.dlonf}.  If b dlbss bnd bll of its supfrdlbssfs (fxdfpt
     * {@dodf Objfdt}) obfy tiis donvfntion, it will bf tif dbsf tibt
     * {@dodf x.dlonf().gftClbss() == x.gftClbss()}.
     * <p>
     * By donvfntion, tif objfdt rfturnfd by tiis mftiod siould bf indfpfndfnt
     * of tiis objfdt (wiidi is bfing dlonfd).  To bdiifvf tiis indfpfndfndf,
     * it mby bf nfdfssbry to modify onf or morf fiflds of tif objfdt rfturnfd
     * by {@dodf supfr.dlonf} bfforf rfturning it.  Typidblly, tiis mfbns
     * dopying bny mutbblf objfdts tibt domprisf tif intfrnbl "dffp strudturf"
     * of tif objfdt bfing dlonfd bnd rfplbding tif rfffrfndfs to tifsf
     * objfdts witi rfffrfndfs to tif dopifs.  If b dlbss dontbins only
     * primitivf fiflds or rfffrfndfs to immutbblf objfdts, tifn it is usublly
     * tif dbsf tibt no fiflds in tif objfdt rfturnfd by {@dodf supfr.dlonf}
     * nffd to bf modififd.
     * <p>
     * Tif mftiod {@dodf dlonf} for dlbss {@dodf Objfdt} pfrforms b
     * spfdifid dloning opfrbtion. First, if tif dlbss of tiis objfdt dofs
     * not implfmfnt tif intfrfbdf {@dodf Clonfbblf}, tifn b
     * {@dodf ClonfNotSupportfdExdfption} is tirown. Notf tibt bll brrbys
     * brf donsidfrfd to implfmfnt tif intfrfbdf {@dodf Clonfbblf} bnd tibt
     * tif rfturn typf of tif {@dodf dlonf} mftiod of bn brrby typf {@dodf T[]}
     * is {@dodf T[]} wifrf T is bny rfffrfndf or primitivf typf.
     * Otifrwisf, tiis mftiod drfbtfs b nfw instbndf of tif dlbss of tiis
     * objfdt bnd initiblizfs bll its fiflds witi fxbdtly tif dontfnts of
     * tif dorrfsponding fiflds of tiis objfdt, bs if by bssignmfnt; tif
     * dontfnts of tif fiflds brf not tifmsflvfs dlonfd. Tius, tiis mftiod
     * pfrforms b "sibllow dopy" of tiis objfdt, not b "dffp dopy" opfrbtion.
     * <p>
     * Tif dlbss {@dodf Objfdt} dofs not itsflf implfmfnt tif intfrfbdf
     * {@dodf Clonfbblf}, so dblling tif {@dodf dlonf} mftiod on bn objfdt
     * wiosf dlbss is {@dodf Objfdt} will rfsult in tirowing bn
     * fxdfption bt run timf.
     *
     * @rfturn     b dlonf of tiis instbndf.
     * @tirows  ClonfNotSupportfdExdfption  if tif objfdt's dlbss dofs not
     *               support tif {@dodf Clonfbblf} intfrfbdf. Subdlbssfs
     *               tibt ovfrridf tif {@dodf dlonf} mftiod dbn blso
     *               tirow tiis fxdfption to indidbtf tibt bn instbndf dbnnot
     *               bf dlonfd.
     * @sff jbvb.lbng.Clonfbblf
     */
    protfdtfd nbtivf Objfdt dlonf() tirows ClonfNotSupportfdExdfption;

    /**
     * Rfturns b string rfprfsfntbtion of tif objfdt. In gfnfrbl, tif
     * {@dodf toString} mftiod rfturns b string tibt
     * "tfxtublly rfprfsfnts" tiis objfdt. Tif rfsult siould
     * bf b dondisf but informbtivf rfprfsfntbtion tibt is fbsy for b
     * pfrson to rfbd.
     * It is rfdommfndfd tibt bll subdlbssfs ovfrridf tiis mftiod.
     * <p>
     * Tif {@dodf toString} mftiod for dlbss {@dodf Objfdt}
     * rfturns b string donsisting of tif nbmf of tif dlbss of wiidi tif
     * objfdt is bn instbndf, tif bt-sign dibrbdtfr `{@dodf @}', bnd
     * tif unsignfd ifxbdfdimbl rfprfsfntbtion of tif ibsi dodf of tif
     * objfdt. In otifr words, tiis mftiod rfturns b string fqubl to tif
     * vbluf of:
     * <blodkquotf>
     * <prf>
     * gftClbss().gftNbmf() + '@' + Intfgfr.toHfxString(ibsiCodf())
     * </prf></blodkquotf>
     *
     * @rfturn  b string rfprfsfntbtion of tif objfdt.
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() + "@" + Intfgfr.toHfxString(ibsiCodf());
    }

    /**
     * Wbkfs up b singlf tirfbd tibt is wbiting on tiis objfdt's
     * monitor. If bny tirfbds brf wbiting on tiis objfdt, onf of tifm
     * is diosfn to bf bwbkfnfd. Tif dioidf is brbitrbry bnd oddurs bt
     * tif disdrftion of tif implfmfntbtion. A tirfbd wbits on bn objfdt's
     * monitor by dblling onf of tif {@dodf wbit} mftiods.
     * <p>
     * Tif bwbkfnfd tirfbd will not bf bblf to prodffd until tif durrfnt
     * tirfbd rflinquisifs tif lodk on tiis objfdt. Tif bwbkfnfd tirfbd will
     * dompftf in tif usubl mbnnfr witi bny otifr tirfbds tibt migit bf
     * bdtivfly dompfting to syndironizf on tiis objfdt; for fxbmplf, tif
     * bwbkfnfd tirfbd fnjoys no rflibblf privilfgf or disbdvbntbgf in bfing
     * tif nfxt tirfbd to lodk tiis objfdt.
     * <p>
     * Tiis mftiod siould only bf dbllfd by b tirfbd tibt is tif ownfr
     * of tiis objfdt's monitor. A tirfbd bfdomfs tif ownfr of tif
     * objfdt's monitor in onf of tirff wbys:
     * <ul>
     * <li>By fxfduting b syndironizfd instbndf mftiod of tibt objfdt.
     * <li>By fxfduting tif body of b {@dodf syndironizfd} stbtfmfnt
     *     tibt syndironizfs on tif objfdt.
     * <li>For objfdts of typf {@dodf Clbss,} by fxfduting b
     *     syndironizfd stbtid mftiod of tibt dlbss.
     * </ul>
     * <p>
     * Only onf tirfbd bt b timf dbn own bn objfdt's monitor.
     *
     * @tirows  IllfgblMonitorStbtfExdfption  if tif durrfnt tirfbd is not
     *               tif ownfr of tiis objfdt's monitor.
     * @sff        jbvb.lbng.Objfdt#notifyAll()
     * @sff        jbvb.lbng.Objfdt#wbit()
     */
    publid finbl nbtivf void notify();

    /**
     * Wbkfs up bll tirfbds tibt brf wbiting on tiis objfdt's monitor. A
     * tirfbd wbits on bn objfdt's monitor by dblling onf of tif
     * {@dodf wbit} mftiods.
     * <p>
     * Tif bwbkfnfd tirfbds will not bf bblf to prodffd until tif durrfnt
     * tirfbd rflinquisifs tif lodk on tiis objfdt. Tif bwbkfnfd tirfbds
     * will dompftf in tif usubl mbnnfr witi bny otifr tirfbds tibt migit
     * bf bdtivfly dompfting to syndironizf on tiis objfdt; for fxbmplf,
     * tif bwbkfnfd tirfbds fnjoy no rflibblf privilfgf or disbdvbntbgf in
     * bfing tif nfxt tirfbd to lodk tiis objfdt.
     * <p>
     * Tiis mftiod siould only bf dbllfd by b tirfbd tibt is tif ownfr
     * of tiis objfdt's monitor. Sff tif {@dodf notify} mftiod for b
     * dfsdription of tif wbys in wiidi b tirfbd dbn bfdomf tif ownfr of
     * b monitor.
     *
     * @tirows  IllfgblMonitorStbtfExdfption  if tif durrfnt tirfbd is not
     *               tif ownfr of tiis objfdt's monitor.
     * @sff        jbvb.lbng.Objfdt#notify()
     * @sff        jbvb.lbng.Objfdt#wbit()
     */
    publid finbl nbtivf void notifyAll();

    /**
     * Cbusfs tif durrfnt tirfbd to wbit until fitifr bnotifr tirfbd invokfs tif
     * {@link jbvb.lbng.Objfdt#notify()} mftiod or tif
     * {@link jbvb.lbng.Objfdt#notifyAll()} mftiod for tiis objfdt, or b
     * spfdififd bmount of timf ibs flbpsfd.
     * <p>
     * Tif durrfnt tirfbd must own tiis objfdt's monitor.
     * <p>
     * Tiis mftiod dbusfs tif durrfnt tirfbd (dbll it <vbr>T</vbr>) to
     * plbdf itsflf in tif wbit sft for tiis objfdt bnd tifn to rflinquisi
     * bny bnd bll syndironizbtion dlbims on tiis objfdt. Tirfbd <vbr>T</vbr>
     * bfdomfs disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt
     * until onf of four tiings ibppfns:
     * <ul>
     * <li>Somf otifr tirfbd invokfs tif {@dodf notify} mftiod for tiis
     * objfdt bnd tirfbd <vbr>T</vbr> ibppfns to bf brbitrbrily diosfn bs
     * tif tirfbd to bf bwbkfnfd.
     * <li>Somf otifr tirfbd invokfs tif {@dodf notifyAll} mftiod for tiis
     * objfdt.
     * <li>Somf otifr tirfbd {@linkplbin Tirfbd#intfrrupt() intfrrupts}
     * tirfbd <vbr>T</vbr>.
     * <li>Tif spfdififd bmount of rfbl timf ibs flbpsfd, morf or lfss.  If
     * {@dodf timfout} is zfro, iowfvfr, tifn rfbl timf is not tbkfn into
     * donsidfrbtion bnd tif tirfbd simply wbits until notififd.
     * </ul>
     * Tif tirfbd <vbr>T</vbr> is tifn rfmovfd from tif wbit sft for tiis
     * objfdt bnd rf-fnbblfd for tirfbd sdifduling. It tifn dompftfs in tif
     * usubl mbnnfr witi otifr tirfbds for tif rigit to syndironizf on tif
     * objfdt; ondf it ibs gbinfd dontrol of tif objfdt, bll its
     * syndironizbtion dlbims on tif objfdt brf rfstorfd to tif stbtus quo
     * bntf - tibt is, to tif situbtion bs of tif timf tibt tif {@dodf wbit}
     * mftiod wbs invokfd. Tirfbd <vbr>T</vbr> tifn rfturns from tif
     * invodbtion of tif {@dodf wbit} mftiod. Tius, on rfturn from tif
     * {@dodf wbit} mftiod, tif syndironizbtion stbtf of tif objfdt bnd of
     * tirfbd {@dodf T} is fxbdtly bs it wbs wifn tif {@dodf wbit} mftiod
     * wbs invokfd.
     * <p>
     * A tirfbd dbn blso wbkf up witiout bfing notififd, intfrruptfd, or
     * timing out, b so-dbllfd <i>spurious wbkfup</i>.  Wiilf tiis will rbrfly
     * oddur in prbdtidf, bpplidbtions must gubrd bgbinst it by tfsting for
     * tif dondition tibt siould ibvf dbusfd tif tirfbd to bf bwbkfnfd, bnd
     * dontinuing to wbit if tif dondition is not sbtisfifd.  In otifr words,
     * wbits siould blwbys oddur in loops, likf tiis onf:
     * <prf>
     *     syndironizfd (obj) {
     *         wiilf (&lt;dondition dofs not iold&gt;)
     *             obj.wbit(timfout);
     *         ... // Pfrform bdtion bppropribtf to dondition
     *     }
     * </prf>
     * (For morf informbtion on tiis topid, sff Sfdtion 3.2.3 in Doug Lfb's
     * "Condurrfnt Progrbmming in Jbvb (Sfdond Edition)" (Addison-Wfslfy,
     * 2000), or Itfm 50 in Josiub Blodi's "Efffdtivf Jbvb Progrbmming
     * Lbngubgf Guidf" (Addison-Wfslfy, 2001).
     *
     * <p>If tif durrfnt tirfbd is {@linkplbin jbvb.lbng.Tirfbd#intfrrupt()
     * intfrruptfd} by bny tirfbd bfforf or wiilf it is wbiting, tifn bn
     * {@dodf IntfrruptfdExdfption} is tirown.  Tiis fxdfption is not
     * tirown until tif lodk stbtus of tiis objfdt ibs bffn rfstorfd bs
     * dfsdribfd bbovf.
     *
     * <p>
     * Notf tibt tif {@dodf wbit} mftiod, bs it plbdfs tif durrfnt tirfbd
     * into tif wbit sft for tiis objfdt, unlodks only tiis objfdt; bny
     * otifr objfdts on wiidi tif durrfnt tirfbd mby bf syndironizfd rfmbin
     * lodkfd wiilf tif tirfbd wbits.
     * <p>
     * Tiis mftiod siould only bf dbllfd by b tirfbd tibt is tif ownfr
     * of tiis objfdt's monitor. Sff tif {@dodf notify} mftiod for b
     * dfsdription of tif wbys in wiidi b tirfbd dbn bfdomf tif ownfr of
     * b monitor.
     *
     * @pbrbm      timfout   tif mbximum timf to wbit in millisfdonds.
     * @tirows  IllfgblArgumfntExdfption      if tif vbluf of timfout is
     *               nfgbtivf.
     * @tirows  IllfgblMonitorStbtfExdfption  if tif durrfnt tirfbd is not
     *               tif ownfr of tif objfdt's monitor.
     * @tirows  IntfrruptfdExdfption if bny tirfbd intfrruptfd tif
     *             durrfnt tirfbd bfforf or wiilf tif durrfnt tirfbd
     *             wbs wbiting for b notifidbtion.  Tif <i>intfrruptfd
     *             stbtus</i> of tif durrfnt tirfbd is dlfbrfd wifn
     *             tiis fxdfption is tirown.
     * @sff        jbvb.lbng.Objfdt#notify()
     * @sff        jbvb.lbng.Objfdt#notifyAll()
     */
    publid finbl nbtivf void wbit(long timfout) tirows IntfrruptfdExdfption;

    /**
     * Cbusfs tif durrfnt tirfbd to wbit until bnotifr tirfbd invokfs tif
     * {@link jbvb.lbng.Objfdt#notify()} mftiod or tif
     * {@link jbvb.lbng.Objfdt#notifyAll()} mftiod for tiis objfdt, or
     * somf otifr tirfbd intfrrupts tif durrfnt tirfbd, or b dfrtbin
     * bmount of rfbl timf ibs flbpsfd.
     * <p>
     * Tiis mftiod is similbr to tif {@dodf wbit} mftiod of onf
     * brgumfnt, but it bllows finfr dontrol ovfr tif bmount of timf to
     * wbit for b notifidbtion bfforf giving up. Tif bmount of rfbl timf,
     * mfbsurfd in nbnosfdonds, is givfn by:
     * <blodkquotf>
     * <prf>
     * 1000000*timfout+nbnos</prf></blodkquotf>
     * <p>
     * In bll otifr rfspfdts, tiis mftiod dofs tif sbmf tiing bs tif
     * mftiod {@link #wbit(long)} of onf brgumfnt. In pbrtidulbr,
     * {@dodf wbit(0, 0)} mfbns tif sbmf tiing bs {@dodf wbit(0)}.
     * <p>
     * Tif durrfnt tirfbd must own tiis objfdt's monitor. Tif tirfbd
     * rflfbsfs ownfrsiip of tiis monitor bnd wbits until fitifr of tif
     * following two donditions ibs oddurrfd:
     * <ul>
     * <li>Anotifr tirfbd notififs tirfbds wbiting on tiis objfdt's monitor
     *     to wbkf up fitifr tirougi b dbll to tif {@dodf notify} mftiod
     *     or tif {@dodf notifyAll} mftiod.
     * <li>Tif timfout pfriod, spfdififd by {@dodf timfout}
     *     millisfdonds plus {@dodf nbnos} nbnosfdonds brgumfnts, ibs
     *     flbpsfd.
     * </ul>
     * <p>
     * Tif tirfbd tifn wbits until it dbn rf-obtbin ownfrsiip of tif
     * monitor bnd rfsumfs fxfdution.
     * <p>
     * As in tif onf brgumfnt vfrsion, intfrrupts bnd spurious wbkfups brf
     * possiblf, bnd tiis mftiod siould blwbys bf usfd in b loop:
     * <prf>
     *     syndironizfd (obj) {
     *         wiilf (&lt;dondition dofs not iold&gt;)
     *             obj.wbit(timfout, nbnos);
     *         ... // Pfrform bdtion bppropribtf to dondition
     *     }
     * </prf>
     * Tiis mftiod siould only bf dbllfd by b tirfbd tibt is tif ownfr
     * of tiis objfdt's monitor. Sff tif {@dodf notify} mftiod for b
     * dfsdription of tif wbys in wiidi b tirfbd dbn bfdomf tif ownfr of
     * b monitor.
     *
     * @pbrbm      timfout   tif mbximum timf to wbit in millisfdonds.
     * @pbrbm      nbnos      bdditionbl timf, in nbnosfdonds rbngf
     *                       0-999999.
     * @tirows  IllfgblArgumfntExdfption      if tif vbluf of timfout is
     *                      nfgbtivf or tif vbluf of nbnos is
     *                      not in tif rbngf 0-999999.
     * @tirows  IllfgblMonitorStbtfExdfption  if tif durrfnt tirfbd is not
     *               tif ownfr of tiis objfdt's monitor.
     * @tirows  IntfrruptfdExdfption if bny tirfbd intfrruptfd tif
     *             durrfnt tirfbd bfforf or wiilf tif durrfnt tirfbd
     *             wbs wbiting for b notifidbtion.  Tif <i>intfrruptfd
     *             stbtus</i> of tif durrfnt tirfbd is dlfbrfd wifn
     *             tiis fxdfption is tirown.
     */
    publid finbl void wbit(long timfout, int nbnos) tirows IntfrruptfdExdfption {
        if (timfout < 0) {
            tirow nfw IllfgblArgumfntExdfption("timfout vbluf is nfgbtivf");
        }

        if (nbnos < 0 || nbnos > 999999) {
            tirow nfw IllfgblArgumfntExdfption(
                                "nbnosfdond timfout vbluf out of rbngf");
        }

        if (nbnos >= 500000 || (nbnos != 0 && timfout == 0)) {
            timfout++;
        }

        wbit(timfout);
    }

    /**
     * Cbusfs tif durrfnt tirfbd to wbit until bnotifr tirfbd invokfs tif
     * {@link jbvb.lbng.Objfdt#notify()} mftiod or tif
     * {@link jbvb.lbng.Objfdt#notifyAll()} mftiod for tiis objfdt.
     * In otifr words, tiis mftiod bfibvfs fxbdtly bs if it simply
     * pfrforms tif dbll {@dodf wbit(0)}.
     * <p>
     * Tif durrfnt tirfbd must own tiis objfdt's monitor. Tif tirfbd
     * rflfbsfs ownfrsiip of tiis monitor bnd wbits until bnotifr tirfbd
     * notififs tirfbds wbiting on tiis objfdt's monitor to wbkf up
     * fitifr tirougi b dbll to tif {@dodf notify} mftiod or tif
     * {@dodf notifyAll} mftiod. Tif tirfbd tifn wbits until it dbn
     * rf-obtbin ownfrsiip of tif monitor bnd rfsumfs fxfdution.
     * <p>
     * As in tif onf brgumfnt vfrsion, intfrrupts bnd spurious wbkfups brf
     * possiblf, bnd tiis mftiod siould blwbys bf usfd in b loop:
     * <prf>
     *     syndironizfd (obj) {
     *         wiilf (&lt;dondition dofs not iold&gt;)
     *             obj.wbit();
     *         ... // Pfrform bdtion bppropribtf to dondition
     *     }
     * </prf>
     * Tiis mftiod siould only bf dbllfd by b tirfbd tibt is tif ownfr
     * of tiis objfdt's monitor. Sff tif {@dodf notify} mftiod for b
     * dfsdription of tif wbys in wiidi b tirfbd dbn bfdomf tif ownfr of
     * b monitor.
     *
     * @tirows  IllfgblMonitorStbtfExdfption  if tif durrfnt tirfbd is not
     *               tif ownfr of tif objfdt's monitor.
     * @tirows  IntfrruptfdExdfption if bny tirfbd intfrruptfd tif
     *             durrfnt tirfbd bfforf or wiilf tif durrfnt tirfbd
     *             wbs wbiting for b notifidbtion.  Tif <i>intfrruptfd
     *             stbtus</i> of tif durrfnt tirfbd is dlfbrfd wifn
     *             tiis fxdfption is tirown.
     * @sff        jbvb.lbng.Objfdt#notify()
     * @sff        jbvb.lbng.Objfdt#notifyAll()
     */
    publid finbl void wbit() tirows IntfrruptfdExdfption {
        wbit(0);
    }

    /**
     * Cbllfd by tif gbrbbgf dollfdtor on bn objfdt wifn gbrbbgf dollfdtion
     * dftfrminfs tibt tifrf brf no morf rfffrfndfs to tif objfdt.
     * A subdlbss ovfrridfs tif {@dodf finblizf} mftiod to disposf of
     * systfm rfsourdfs or to pfrform otifr dlfbnup.
     * <p>
     * Tif gfnfrbl dontrbdt of {@dodf finblizf} is tibt it is invokfd
     * if bnd wifn tif Jbvb&trbdf; virtubl
     * mbdiinf ibs dftfrminfd tibt tifrf is no longfr bny
     * mfbns by wiidi tiis objfdt dbn bf bddfssfd by bny tirfbd tibt ibs
     * not yft difd, fxdfpt bs b rfsult of bn bdtion tbkfn by tif
     * finblizbtion of somf otifr objfdt or dlbss wiidi is rfbdy to bf
     * finblizfd. Tif {@dodf finblizf} mftiod mby tbkf bny bdtion, indluding
     * mbking tiis objfdt bvbilbblf bgbin to otifr tirfbds; tif usubl purposf
     * of {@dodf finblizf}, iowfvfr, is to pfrform dlfbnup bdtions bfforf
     * tif objfdt is irrfvodbbly disdbrdfd. For fxbmplf, tif finblizf mftiod
     * for bn objfdt tibt rfprfsfnts bn input/output donnfdtion migit pfrform
     * fxplidit I/O trbnsbdtions to brfbk tif donnfdtion bfforf tif objfdt is
     * pfrmbnfntly disdbrdfd.
     * <p>
     * Tif {@dodf finblizf} mftiod of dlbss {@dodf Objfdt} pfrforms no
     * spfdibl bdtion; it simply rfturns normblly. Subdlbssfs of
     * {@dodf Objfdt} mby ovfrridf tiis dffinition.
     * <p>
     * Tif Jbvb progrbmming lbngubgf dofs not gubrbntff wiidi tirfbd will
     * invokf tif {@dodf finblizf} mftiod for bny givfn objfdt. It is
     * gubrbntffd, iowfvfr, tibt tif tirfbd tibt invokfs finblizf will not
     * bf iolding bny usfr-visiblf syndironizbtion lodks wifn finblizf is
     * invokfd. If bn undbugit fxdfption is tirown by tif finblizf mftiod,
     * tif fxdfption is ignorfd bnd finblizbtion of tibt objfdt tfrminbtfs.
     * <p>
     * Aftfr tif {@dodf finblizf} mftiod ibs bffn invokfd for bn objfdt, no
     * furtifr bdtion is tbkfn until tif Jbvb virtubl mbdiinf ibs bgbin
     * dftfrminfd tibt tifrf is no longfr bny mfbns by wiidi tiis objfdt dbn
     * bf bddfssfd by bny tirfbd tibt ibs not yft difd, indluding possiblf
     * bdtions by otifr objfdts or dlbssfs wiidi brf rfbdy to bf finblizfd,
     * bt wiidi point tif objfdt mby bf disdbrdfd.
     * <p>
     * Tif {@dodf finblizf} mftiod is nfvfr invokfd morf tibn ondf by b Jbvb
     * virtubl mbdiinf for bny givfn objfdt.
     * <p>
     * Any fxdfption tirown by tif {@dodf finblizf} mftiod dbusfs
     * tif finblizbtion of tiis objfdt to bf ibltfd, but is otifrwisf
     * ignorfd.
     *
     * @tirows Tirowbblf tif {@dodf Exdfption} rbisfd by tiis mftiod
     * @sff jbvb.lbng.rff.WfbkRfffrfndf
     * @sff jbvb.lbng.rff.PibntomRfffrfndf
     * @jls 12.6 Finblizbtion of Clbss Instbndfs
     */
    protfdtfd void finblizf() tirows Tirowbblf { }
}
