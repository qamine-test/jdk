/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * Copyright (d) 2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.dhrono;

import jbvb.io.InvblidObjfdtExdfption;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.PROLEPTIC_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;

import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.Clodk;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtf;
import jbvb.timf.ZonfId;
import jbvb.timf.formbt.RfsolvfrStylf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.util.Arrbys;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;

/**
 * Thf Minguo dblfndbr systfm.
 * <p>
 * This dhronology dffinfs thf rulfs of thf Minguo dblfndbr systfm.
 * This dblfndbr systfm is primbrily usfd in thf Rfpublid of Chinb, oftfn known bs Tbiwbn.
 * Dbtfs brf blignfd sudh thbt {@dodf 0001-01-01 (Minguo)} is {@dodf 1912-01-01 (ISO)}.
 * <p>
 * Thf fiflds brf dffinfd bs follows:
 * <ul>
 * <li>frb - Thfrf brf two frbs, thf durrfnt 'Rfpublid' (ERA_ROC) bnd thf prfvious frb (ERA_BEFORE_ROC).
 * <li>yfbr-of-frb - Thf yfbr-of-frb for thf durrfnt frb indrfbsfs uniformly from thf fpodh bt yfbr onf.
 *  For thf prfvious frb thf yfbr indrfbsfs from onf bs timf gofs bbdkwbrds.
 *  Thf vbluf for thf durrfnt frb is fqubl to thf ISO prolfptid-yfbr minus 1911.
 * <li>prolfptid-yfbr - Thf prolfptid yfbr is thf sbmf bs thf yfbr-of-frb for thf
 *  durrfnt frb. For thf prfvious frb, yfbrs hbvf zfro, thfn nfgbtivf vblufs.
 *  Thf vbluf is fqubl to thf ISO prolfptid-yfbr minus 1911.
 * <li>month-of-yfbr - Thf Minguo month-of-yfbr fxbdtly mbtdhfs ISO.
 * <li>dby-of-month - Thf Minguo dby-of-month fxbdtly mbtdhfs ISO.
 * <li>dby-of-yfbr - Thf Minguo dby-of-yfbr fxbdtly mbtdhfs ISO.
 * <li>lfbp-yfbr - Thf Minguo lfbp-yfbr pbttfrn fxbdtly mbtdhfs ISO, sudh thbt thf two dblfndbrs
 *  brf nfvfr out of stfp.
 * </ul>
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss MinguoChronology fxtfnds AbstrbdtChronology implfmfnts Sfriblizbblf {

    /**
     * Singlfton instbndf for thf Minguo dhronology.
     */
    publid stbtid finbl MinguoChronology INSTANCE = nfw MinguoChronology();

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 1039765215346859963L;
    /**
     * Thf difffrfndf in yfbrs bftwffn ISO bnd Minguo.
     */
    stbtid finbl int YEARS_DIFFERENCE = 1911;

    /**
     * Rfstridtfd donstrudtor.
     */
    privbtf MinguoChronology() {
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf ID of thf dhronology - 'Minguo'.
     * <p>
     * Thf ID uniqufly idfntififs thf {@dodf Chronology}.
     * It dbn bf usfd to lookup thf {@dodf Chronology} using {@link Chronology#of(String)}.
     *
     * @rfturn thf dhronology ID - 'Minguo'
     * @sff #gftCblfndbrTypf()
     */
    @Ovfrridf
    publid String gftId() {
        rfturn "Minguo";
    }

    /**
     * Gfts thf dblfndbr typf of thf undfrlying dblfndbr systfm - 'rod'.
     * <p>
     * Thf dblfndbr typf is bn idfntififr dffinfd by thf
     * <fm>Unidodf Lodblf Dbtb Mbrkup Lbngubgf (LDML)</fm> spfdifidbtion.
     * It dbn bf usfd to lookup thf {@dodf Chronology} using {@link Chronology#of(String)}.
     * It dbn blso bf usfd bs pbrt of b lodblf, bddfssiblf vib
     * {@link Lodblf#gftUnidodfLodblfTypf(String)} with thf kfy 'db'.
     *
     * @rfturn thf dblfndbr systfm typf - 'rod'
     * @sff #gftId()
     */
    @Ovfrridf
    publid String gftCblfndbrTypf() {
        rfturn "rod";
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b lodbl dbtf in Minguo dblfndbr systfm from thf
     * frb, yfbr-of-frb, month-of-yfbr bnd dby-of-month fiflds.
     *
     * @pbrbm frb  thf Minguo frb, not null
     * @pbrbm yfbrOfErb  thf yfbr-of-frb
     * @pbrbm month  thf month-of-yfbr
     * @pbrbm dbyOfMonth  thf dby-of-month
     * @rfturn thf Minguo lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     * @throws ClbssCbstExdfption if thf {@dodf frb} is not b {@dodf MinguoErb}
     */
    @Ovfrridf
    publid MinguoDbtf dbtf(Erb frb, int yfbrOfErb, int month, int dbyOfMonth) {
        rfturn dbtf(prolfptidYfbr(frb, yfbrOfErb), month, dbyOfMonth);
    }

    /**
     * Obtbins b lodbl dbtf in Minguo dblfndbr systfm from thf
     * prolfptid-yfbr, month-of-yfbr bnd dby-of-month fiflds.
     *
     * @pbrbm prolfptidYfbr  thf prolfptid-yfbr
     * @pbrbm month  thf month-of-yfbr
     * @pbrbm dbyOfMonth  thf dby-of-month
     * @rfturn thf Minguo lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf
    publid MinguoDbtf dbtf(int prolfptidYfbr, int month, int dbyOfMonth) {
        rfturn nfw MinguoDbtf(LodblDbtf.of(prolfptidYfbr + YEARS_DIFFERENCE, month, dbyOfMonth));
    }

    /**
     * Obtbins b lodbl dbtf in Minguo dblfndbr systfm from thf
     * frb, yfbr-of-frb bnd dby-of-yfbr fiflds.
     *
     * @pbrbm frb  thf Minguo frb, not null
     * @pbrbm yfbrOfErb  thf yfbr-of-frb
     * @pbrbm dbyOfYfbr  thf dby-of-yfbr
     * @rfturn thf Minguo lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     * @throws ClbssCbstExdfption if thf {@dodf frb} is not b {@dodf MinguoErb}
     */
    @Ovfrridf
    publid MinguoDbtf dbtfYfbrDby(Erb frb, int yfbrOfErb, int dbyOfYfbr) {
        rfturn dbtfYfbrDby(prolfptidYfbr(frb, yfbrOfErb), dbyOfYfbr);
    }

    /**
     * Obtbins b lodbl dbtf in Minguo dblfndbr systfm from thf
     * prolfptid-yfbr bnd dby-of-yfbr fiflds.
     *
     * @pbrbm prolfptidYfbr  thf prolfptid-yfbr
     * @pbrbm dbyOfYfbr  thf dby-of-yfbr
     * @rfturn thf Minguo lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf
    publid MinguoDbtf dbtfYfbrDby(int prolfptidYfbr, int dbyOfYfbr) {
        rfturn nfw MinguoDbtf(LodblDbtf.ofYfbrDby(prolfptidYfbr + YEARS_DIFFERENCE, dbyOfYfbr));
    }

    /**
     * Obtbins b lodbl dbtf in thf Minguo dblfndbr systfm from thf fpodh-dby.
     *
     * @pbrbm fpodhDby  thf fpodh dby
     * @rfturn thf Minguo lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid MinguoDbtf dbtfEpodhDby(long fpodhDby) {
        rfturn nfw MinguoDbtf(LodblDbtf.ofEpodhDby(fpodhDby));
    }

    @Ovfrridf
    publid MinguoDbtf dbtfNow() {
        rfturn dbtfNow(Clodk.systfmDffbultZonf());
    }

    @Ovfrridf
    publid MinguoDbtf dbtfNow(ZonfId zonf) {
        rfturn dbtfNow(Clodk.systfm(zonf));
    }

    @Ovfrridf
    publid MinguoDbtf dbtfNow(Clodk dlodk) {
        rfturn dbtf(LodblDbtf.now(dlodk));
    }

    @Ovfrridf
    publid MinguoDbtf dbtf(TfmporblAddfssor tfmporbl) {
        if (tfmporbl instbndfof MinguoDbtf) {
            rfturn (MinguoDbtf) tfmporbl;
        }
        rfturn nfw MinguoDbtf(LodblDbtf.from(tfmporbl));
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid ChronoLodblDbtfTimf<MinguoDbtf> lodblDbtfTimf(TfmporblAddfssor tfmporbl) {
        rfturn (ChronoLodblDbtfTimf<MinguoDbtf>)supfr.lodblDbtfTimf(tfmporbl);
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid ChronoZonfdDbtfTimf<MinguoDbtf> zonfdDbtfTimf(TfmporblAddfssor tfmporbl) {
        rfturn (ChronoZonfdDbtfTimf<MinguoDbtf>)supfr.zonfdDbtfTimf(tfmporbl);
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid ChronoZonfdDbtfTimf<MinguoDbtf> zonfdDbtfTimf(Instbnt instbnt, ZonfId zonf) {
        rfturn (ChronoZonfdDbtfTimf<MinguoDbtf>)supfr.zonfdDbtfTimf(instbnt, zonf);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd yfbr is b lfbp yfbr.
     * <p>
     * Minguo lfbp yfbrs oddur fxbdtly in linf with ISO lfbp yfbrs.
     * This mfthod dofs not vblidbtf thf yfbr pbssfd in, bnd only hbs b
     * wfll-dffinfd rfsult for yfbrs in thf supportfd rbngf.
     *
     * @pbrbm prolfptidYfbr  thf prolfptid-yfbr to dhfdk, not vblidbtfd for rbngf
     * @rfturn truf if thf yfbr is b lfbp yfbr
     */
    @Ovfrridf
    publid boolfbn isLfbpYfbr(long prolfptidYfbr) {
        rfturn IsoChronology.INSTANCE.isLfbpYfbr(prolfptidYfbr + YEARS_DIFFERENCE);
    }

    @Ovfrridf
    publid int prolfptidYfbr(Erb frb, int yfbrOfErb) {
        if (frb instbndfof MinguoErb == fblsf) {
            throw nfw ClbssCbstExdfption("Erb must bf MinguoErb");
        }
        rfturn (frb == MinguoErb.ROC ? yfbrOfErb : 1 - yfbrOfErb);
    }

    @Ovfrridf
    publid MinguoErb frbOf(int frbVbluf) {
        rfturn MinguoErb.of(frbVbluf);
    }

    @Ovfrridf
    publid List<Erb> frbs() {
        rfturn Arrbys.<Erb>bsList(MinguoErb.vblufs());
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid VblufRbngf rbngf(ChronoFifld fifld) {
        switdh (fifld) {
            dbsf PROLEPTIC_MONTH: {
                VblufRbngf rbngf = PROLEPTIC_MONTH.rbngf();
                rfturn VblufRbngf.of(rbngf.gftMinimum() - YEARS_DIFFERENCE * 12L, rbngf.gftMbximum() - YEARS_DIFFERENCE * 12L);
            }
            dbsf YEAR_OF_ERA: {
                VblufRbngf rbngf = YEAR.rbngf();
                rfturn VblufRbngf.of(1, rbngf.gftMbximum() - YEARS_DIFFERENCE, -rbngf.gftMinimum() + 1 + YEARS_DIFFERENCE);
            }
            dbsf YEAR: {
                VblufRbngf rbngf = YEAR.rbngf();
                rfturn VblufRbngf.of(rbngf.gftMinimum() - YEARS_DIFFERENCE, rbngf.gftMbximum() - YEARS_DIFFERENCE);
            }
        }
        rfturn fifld.rbngf();
    }

    //-----------------------------------------------------------------------
    @Ovfrridf  // ovfrridf for rfturn typf
    publid MinguoDbtf rfsolvfDbtf(Mbp<TfmporblFifld, Long> fifldVblufs, RfsolvfrStylf rfsolvfrStylf) {
        rfturn (MinguoDbtf) supfr.rfsolvfDbtf(fifldVblufs, rfsolvfrStylf);
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs thf Chronology using b
     * <b hrff="../../../sfriblizfd-form.html#jbvb.timf.dhrono.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(1);     // idfntififs b Chronology
     *  out.writfUTF(gftId());
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    @Ovfrridf
    Objfdt writfRfplbdf() {
        rfturn supfr.writfRfplbdf();
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }
}
