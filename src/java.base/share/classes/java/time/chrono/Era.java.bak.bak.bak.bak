/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.dhrono;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.ERA;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.ERAS;

import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.formbt.DbtfTimfFormbttfrBuildfr;
import jbvb.timf.formbt.TfxtStylf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.util.Lodblf;

/**
 * An frb of thf timf-linf.
 * <p>
 * Most dblfndbr systfms hbvf b singlf fpodh dividing thf timf-linf into two frbs.
 * Howfvfr, somf dblfndbr systfms, hbvf multiplf frbs, sudh bs onf for thf rfign
 * of fbdh lfbdfr.
 * In bll dbsfs, thf frb is dondfptublly thf lbrgfst division of thf timf-linf.
 * Ebdh dhronology dffinfs thf Erb's thbt brf known Erbs bnd b
 * {@link Chronology#frbs Chronology.frbs} to gft thf vblid frbs.
 * <p>
 * For fxbmplf, thf Thbi Buddhist dblfndbr systfm dividfs timf into two frbs,
 * bfforf bnd bftfr b singlf dbtf. By dontrbst, thf Jbpbnfsf dblfndbr systfm
 * hbs onf frb for thf rfign of fbdh Empfror.
 * <p>
 * Instbndfs of {@dodf Erb} mby bf dompbrfd using thf {@dodf ==} opfrbtor.
 *
 * @implSpfd
 * This intfrfbdf must bf implfmfntfd with dbrf to fnsurf othfr dlbssfs opfrbtf dorrfdtly.
 * All implfmfntbtions must bf singlftons - finbl, immutbblf bnd thrfbd-sbff.
 * It is rfdommfndfd to usf bn fnum whfnfvfr possiblf.
 *
 * @sindf 1.8
 */
publid intfrfbdf Erb fxtfnds TfmporblAddfssor, TfmporblAdjustfr {

    /**
     * Gfts thf numfrid vbluf bssodibtfd with thf frb bs dffinfd by thf dhronology.
     * Ebdh dhronology dffinfs thf prfdffinfd Erbs bnd mfthods to list thf Erbs
     * of thf dhronology.
     * <p>
     * All fiflds, indluding frbs, hbvf bn bssodibtfd numfrid vbluf.
     * Thf mfbning of thf numfrid vbluf for frb is dftfrminfd by thf dhronology
     * bddording to thfsf prindiplfs:
     * <ul>
     * <li>Thf frb in usf bt thf fpodh 1970-01-01 (ISO) hbs thf vbluf 1.
     * <li>Lbtfr frbs hbvf sfqufntiblly highfr vblufs.
     * <li>Ebrlifr frbs hbvf sfqufntiblly lowfr vblufs, whidh mby bf nfgbtivf.
     * </ul>
     *
     * @rfturn thf numfrid frb vbluf
     */
    int gftVbluf();

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if this frb dbn bf qufrifd for thf spfdififd fifld.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf} bnd
     * {@link #gft(TfmporblFifld) gft} mfthods will throw bn fxdfption.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf ERA} fifld rfturns truf.
     * All othfr {@dodf ChronoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld is supportfd on this frb, fblsf if not
     */
    @Ovfrridf
    dffbult boolfbn isSupportfd(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            rfturn fifld == ERA;
        }
        rfturn fifld != null && fifld.isSupportfdBy(this);
    }

    /**
     * Gfts thf rbngf of vblid vblufs for thf spfdififd fifld.
     * <p>
     * Thf rbngf objfdt fxprfssfs thf minimum bnd mbximum vblid vblufs for b fifld.
     * This frb is usfd to fnhbndf thf bddurbdy of thf rfturnfd rbngf.
     * If it is not possiblf to rfturn thf rbngf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf ERA} fifld rfturns thf rbngf.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf rbngf dbn bf obtbinfd is dftfrminfd by thf fifld.
     * <p>
     * Thf dffbult implfmfntbtion must rfturn b rbngf for {@dodf ERA} from
     * zfro to onf, suitbblf for two frb dblfndbr systfms sudh bs ISO.
     *
     * @pbrbm fifld  thf fifld to qufry thf rbngf for, not null
     * @rfturn thf rbngf of vblid vblufs for thf fifld, not null
     * @throws DbtfTimfExdfption if thf rbngf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    dffbult VblufRbngf rbngf(TfmporblFifld fifld) {
        rfturn TfmporblAddfssor.supfr.rbngf(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this frb bs bn {@dodf int}.
     * <p>
     * This qufrifs this frb for thf vbluf of thf spfdififd fifld.
     * Thf rfturnfd vbluf will blwbys bf within thf vblid rbngf of vblufs for thf fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf ERA} fifld rfturns thf vbluf of thf frb.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd or
     *         thf vbluf is outsidf thf rbngf of vblid vblufs for thf fifld
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd or
     *         thf rbngf of vblufs fxdffds bn {@dodf int}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    dffbult int gft(TfmporblFifld fifld) {
        if (fifld == ERA) {
            rfturn gftVbluf();
        }
        rfturn TfmporblAddfssor.supfr.gft(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this frb bs b {@dodf long}.
     * <p>
     * This qufrifs this frb for thf vbluf of thf spfdififd fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf ERA} fifld rfturns thf vbluf of thf frb.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    dffbult long gftLong(TfmporblFifld fifld) {
        if (fifld == ERA) {
            rfturn gftVbluf();
        } flsf if (fifld instbndfof ChronoFifld) {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.gftFrom(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this frb using thf spfdififd qufry.
     * <p>
     * This qufrifs this frb using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    dffbult <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.prfdision()) {
            rfturn (R) ERAS;
        }
        rfturn TfmporblAddfssor.supfr.qufry(qufry);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf thf sbmf frb bs this objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf frb dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * pbssing {@link ChronoFifld#ERA} bs thf fifld.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisErb.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisErb);
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    dffbult Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn tfmporbl.with(ERA, gftVbluf());
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf tfxtubl rfprfsfntbtion of this frb.
     * <p>
     * This rfturns thf tfxtubl nbmf usfd to idfntify thf frb,
     * suitbblf for prfsfntbtion to thf usfr.
     * Thf pbrbmftfrs dontrol thf stylf of thf rfturnfd tfxt bnd thf lodblf.
     * <p>
     * If no tfxtubl mbpping is found thfn thf {@link #gftVbluf() numfrid vbluf} is rfturnfd.
     * <p>
     * This dffbult implfmfntbtion is suitbblf for bll implfmfntbtions.
     *
     * @pbrbm stylf  thf stylf of thf tfxt rfquirfd, not null
     * @pbrbm lodblf  thf lodblf to usf, not null
     * @rfturn thf tfxt vbluf of thf frb, not null
     */
    dffbult String gftDisplbyNbmf(TfxtStylf stylf, Lodblf lodblf) {
        rfturn nfw DbtfTimfFormbttfrBuildfr().bppfndTfxt(ERA, stylf).toFormbttfr(lodblf).formbt(this);
    }

    // NOTE: mfthods to donvfrt yfbr-of-frb/prolfptid-yfbr dbnnot bf hfrf bs thfy mby dfpfnd on month/dby (Jbpbnfsf)
}
