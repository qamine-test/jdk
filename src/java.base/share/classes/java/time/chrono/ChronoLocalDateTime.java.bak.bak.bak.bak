/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.dhrono;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.EPOCH_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.NANO_OF_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.FOREVER;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.NANOS;

import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.LodblTimf;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.formbt.DbtfTimfFormbttfr;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.ChronoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.zonf.ZonfRulfs;
import jbvb.util.Compbrbtor;
import jbvb.util.Objfdts;

/**
 * A dbtf-timf without b timf-zonf in bn brbitrbry dhronology, intfndfd
 * for bdvbndfd globblizbtion usf dbsfs.
 * <p>
 * <b>Most bpplidbtions should dfdlbrf mfthod signbturfs, fiflds bnd vbribblfs
 * bs {@link LodblDbtfTimf}, not this intfrfbdf.</b>
 * <p>
 * A {@dodf ChronoLodblDbtfTimf} is thf bbstrbdt rfprfsfntbtion of b lodbl dbtf-timf
 * whfrf thf {@dodf Chronology dhronology}, or dblfndbr systfm, is pluggbblf.
 * Thf dbtf-timf is dffinfd in tfrms of fiflds fxprfssfd by {@link TfmporblFifld},
 * whfrf most dommon implfmfntbtions brf dffinfd in {@link ChronoFifld}.
 * Thf dhronology dffinfs how thf dblfndbr systfm opfrbtfs bnd thf mfbning of
 * thf stbndbrd fiflds.
 *
 * <h3>Whfn to usf this intfrfbdf</h3>
 * Thf dfsign of thf API fndourbgfs thf usf of {@dodf LodblDbtfTimf} rbthfr thbn this
 * intfrfbdf, fvfn in thf dbsf whfrf thf bpplidbtion nffds to dfbl with multiplf
 * dblfndbr systfms. Thf rbtionblf for this is fxplorfd in dftbil in {@link ChronoLodblDbtf}.
 * <p>
 * Ensurf thbt thf disdussion in {@dodf ChronoLodblDbtf} hbs bffn rfbd bnd undfrstood
 * bfforf using this intfrfbdf.
 *
 * @implSpfd
 * This intfrfbdf must bf implfmfntfd with dbrf to fnsurf othfr dlbssfs opfrbtf dorrfdtly.
 * All implfmfntbtions thbt dbn bf instbntibtfd must bf finbl, immutbblf bnd thrfbd-sbff.
 * Subdlbssfs should bf Sfriblizbblf whfrfvfr possiblf.
 *
 * @pbrbm <D> thf dondrftf typf for thf dbtf of this dbtf-timf
 * @sindf 1.8
 */
publid intfrfbdf ChronoLodblDbtfTimf<D fxtfnds ChronoLodblDbtf>
        fxtfnds Tfmporbl, TfmporblAdjustfr, Compbrbblf<ChronoLodblDbtfTimf<?>> {

    /**
     * Gfts b dompbrbtor thbt dompbrfs {@dodf ChronoLodblDbtfTimf} in
     * timf-linf ordfr ignoring thf dhronology.
     * <p>
     * This dompbrbtor difffrs from thf dompbrison in {@link #dompbrfTo} in thbt it
     * only dompbrfs thf undfrlying dbtf-timf bnd not thf dhronology.
     * This bllows dbtfs in difffrfnt dblfndbr systfms to bf dompbrfd bbsfd
     * on thf position of thf dbtf-timf on thf lodbl timf-linf.
     * Thf undfrlying dompbrison is fquivblfnt to dompbring thf fpodh-dby bnd nbno-of-dby.
     *
     * @rfturn b dompbrbtor thbt dompbrfs in timf-linf ordfr ignoring thf dhronology
     * @sff #isAftfr
     * @sff #isBfforf
     * @sff #isEqubl
     */
    stbtid Compbrbtor<ChronoLodblDbtfTimf<?>> timfLinfOrdfr() {
        rfturn AbstrbdtChronology.DATE_TIME_ORDER;
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf ChronoLodblDbtfTimf} from b tfmporbl objfdt.
     * <p>
     * This obtbins b lodbl dbtf-timf bbsfd on thf spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * whidh this fbdtory donvfrts to bn instbndf of {@dodf ChronoLodblDbtfTimf}.
     * <p>
     * Thf donvfrsion fxtrbdts bnd dombinfs thf dhronology bnd thf dbtf-timf
     * from thf tfmporbl objfdt. Thf bfhbvior is fquivblfnt to using
     * {@link Chronology#lodblDbtfTimf(TfmporblAddfssor)} with thf fxtrbdtfd dhronology.
     * Implfmfntbtions brf pfrmittfd to pfrform optimizbtions sudh bs bddfssing
     * thosf fiflds thbt brf fquivblfnt to thf rflfvbnt objfdts.
     * <p>
     * This mfthod mbtdhfs thf signbturf of thf fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mfthod rfffrfndf, {@dodf ChronoLodblDbtfTimf::from}.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to donvfrt, not null
     * @rfturn thf dbtf-timf, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to b {@dodf ChronoLodblDbtfTimf}
     * @sff Chronology#lodblDbtfTimf(TfmporblAddfssor)
     */
    stbtid ChronoLodblDbtfTimf<?> from(TfmporblAddfssor tfmporbl) {
        if (tfmporbl instbndfof ChronoLodblDbtfTimf) {
            rfturn (ChronoLodblDbtfTimf<?>) tfmporbl;
        }
        Objfdts.rfquirfNonNull(tfmporbl, "tfmporbl");
        Chronology dhrono = tfmporbl.qufry(TfmporblQufrifs.dhronology());
        if (dhrono == null) {
            throw nfw DbtfTimfExdfption("Unbblf to obtbin ChronoLodblDbtfTimf from TfmporblAddfssor: " + tfmporbl.gftClbss());
        }
        rfturn dhrono.lodblDbtfTimf(tfmporbl);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf dhronology of this dbtf-timf.
     * <p>
     * Thf {@dodf Chronology} rfprfsfnts thf dblfndbr systfm in usf.
     * Thf frb bnd othfr fiflds in {@link ChronoFifld} brf dffinfd by thf dhronology.
     *
     * @rfturn thf dhronology, not null
     */
    dffbult Chronology gftChronology() {
        rfturn toLodblDbtf().gftChronology();
    }

    /**
     * Gfts thf lodbl dbtf pbrt of this dbtf-timf.
     * <p>
     * This rfturns b lodbl dbtf with thf sbmf yfbr, month bnd dby
     * bs this dbtf-timf.
     *
     * @rfturn thf dbtf pbrt of this dbtf-timf, not null
     */
    D toLodblDbtf() ;

    /**
     * Gfts thf lodbl timf pbrt of this dbtf-timf.
     * <p>
     * This rfturns b lodbl timf with thf sbmf hour, minutf, sfdond bnd
     * nbnosfdond bs this dbtf-timf.
     *
     * @rfturn thf timf pbrt of this dbtf-timf, not null
     */
    LodblTimf toLodblTimf();

    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if thf spfdififd fifld dbn bf qufrifd on this dbtf-timf.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf},
     * {@link #gft(TfmporblFifld) gft} bnd {@link #with(TfmporblFifld, long)}
     * mfthods will throw bn fxdfption.
     * <p>
     * Thf sft of supportfd fiflds is dffinfd by thf dhronology bnd normblly indludfs
     * bll {@dodf ChronoFifld} dbtf bnd timf fiflds.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld dbn bf qufrifd, fblsf if not
     */
    @Ovfrridf
    boolfbn isSupportfd(TfmporblFifld fifld);

    /**
     * Chfdks if thf spfdififd unit is supportfd.
     * <p>
     * This dhfdks if thf spfdififd unit dbn bf bddfd to or subtrbdtfd from this dbtf-timf.
     * If fblsf, thfn dblling thf {@link #plus(long, TfmporblUnit)} bnd
     * {@link #minus(long, TfmporblUnit) minus} mfthods will throw bn fxdfption.
     * <p>
     * Thf sft of supportfd units is dffinfd by thf dhronology bnd normblly indludfs
     * bll {@dodf ChronoUnit} units fxdfpt {@dodf FOREVER}.
     * <p>
     * If thf unit is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.isSupportfdBy(Tfmporbl)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf unit is supportfd is dftfrminfd by thf unit.
     *
     * @pbrbm unit  thf unit to dhfdk, null rfturns fblsf
     * @rfturn truf if thf unit dbn bf bddfd/subtrbdtfd, fblsf if not
     */
    @Ovfrridf
    dffbult boolfbn isSupportfd(TfmporblUnit unit) {
        if (unit instbndfof ChronoUnit) {
            rfturn unit != FOREVER;
        }
        rfturn unit != null && unit.isSupportfdBy(this);
    }

    //-----------------------------------------------------------------------
    // ovfrridf for dovbribnt rfturn typf
    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    dffbult ChronoLodblDbtfTimf<D> with(TfmporblAdjustfr bdjustfr) {
        rfturn ChronoLodblDbtfTimfImpl.fnsurfVblid(gftChronology(), Tfmporbl.supfr.with(bdjustfr));
    }

    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    ChronoLodblDbtfTimf<D> with(TfmporblFifld fifld, long nfwVbluf);

    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    dffbult ChronoLodblDbtfTimf<D> plus(TfmporblAmount bmount) {
        rfturn ChronoLodblDbtfTimfImpl.fnsurfVblid(gftChronology(), Tfmporbl.supfr.plus(bmount));
    }

    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    ChronoLodblDbtfTimf<D> plus(long bmountToAdd, TfmporblUnit unit);

    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    dffbult ChronoLodblDbtfTimf<D> minus(TfmporblAmount bmount) {
        rfturn ChronoLodblDbtfTimfImpl.fnsurfVblid(gftChronology(), Tfmporbl.supfr.minus(bmount));
    }

    /**
     * {@inhfritDod}
     * @throws DbtfTimfExdfption {@inhfritDod}
     * @throws ArithmftidExdfption {@inhfritDod}
     */
    @Ovfrridf
    dffbult ChronoLodblDbtfTimf<D> minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn ChronoLodblDbtfTimfImpl.fnsurfVblid(gftChronology(), Tfmporbl.supfr.minus(bmountToSubtrbdt, unit));
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this dbtf-timf using thf spfdififd qufry.
     * <p>
     * This qufrifs this dbtf-timf using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    dffbult <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.zonfId() || qufry == TfmporblQufrifs.zonf() || qufry == TfmporblQufrifs.offsft()) {
            rfturn null;
        } flsf if (qufry == TfmporblQufrifs.lodblTimf()) {
            rfturn (R) toLodblTimf();
        } flsf if (qufry == TfmporblQufrifs.dhronology()) {
            rfturn (R) gftChronology();
        } flsf if (qufry == TfmporblQufrifs.prfdision()) {
            rfturn (R) NANOS;
        }
        // inlinf TfmporblAddfssor.supfr.qufry(qufry) bs bn optimizbtion
        // non-JDK dlbssfs brf not pfrmittfd to mbkf this optimizbtion
        rfturn qufry.qufryFrom(this);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf thf sbmf dbtf bnd timf bs this objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf dbtf bnd timf dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * twidf, pbssing {@link ChronoFifld#EPOCH_DAY} bnd
     * {@link ChronoFifld#NANO_OF_DAY} bs thf fiflds.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisLodblDbtfTimf.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisLodblDbtfTimf);
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    dffbult Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn tfmporbl
                .with(EPOCH_DAY, toLodblDbtf().toEpodhDby())
                .with(NANO_OF_DAY, toLodblTimf().toNbnoOfDby());
    }

    /**
     * Formbts this dbtf-timf using thf spfdififd formbttfr.
     * <p>
     * This dbtf-timf will bf pbssfd to thf formbttfr to produdf b string.
     * <p>
     * Thf dffbult implfmfntbtion must bfhbvf bs follows:
     * <prf>
     *  rfturn formbttfr.formbt(this);
     * </prf>
     *
     * @pbrbm formbttfr  thf formbttfr to usf, not null
     * @rfturn thf formbttfd dbtf-timf string, not null
     * @throws DbtfTimfExdfption if bn frror oddurs during printing
     */
    dffbult String formbt(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.formbt(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Combinfs this timf with b timf-zonf to drfbtf b {@dodf ChronoZonfdDbtfTimf}.
     * <p>
     * This rfturns b {@dodf ChronoZonfdDbtfTimf} formfd from this dbtf-timf bt thf
     * spfdififd timf-zonf. Thf rfsult will mbtdh this dbtf-timf bs dlosfly bs possiblf.
     * Timf-zonf rulfs, sudh bs dbylight sbvings, mfbn thbt not fvfry lodbl dbtf-timf
     * is vblid for thf spfdififd zonf, thus thf lodbl dbtf-timf mby bf bdjustfd.
     * <p>
     * Thf lodbl dbtf-timf is rfsolvfd to b singlf instbnt on thf timf-linf.
     * This is bdhifvfd by finding b vblid offsft from UTC/Grffnwidh for thf lodbl
     * dbtf-timf bs dffinfd by thf {@link ZonfRulfs rulfs} of thf zonf ID.
     *<p>
     * In most dbsfs, thfrf is only onf vblid offsft for b lodbl dbtf-timf.
     * In thf dbsf of bn ovfrlbp, whfrf dlodks brf sft bbdk, thfrf brf two vblid offsfts.
     * This mfthod usfs thf fbrlifr offsft typidblly dorrfsponding to "summfr".
     * <p>
     * In thf dbsf of b gbp, whfrf dlodks jump forwbrd, thfrf is no vblid offsft.
     * Instfbd, thf lodbl dbtf-timf is bdjustfd to bf lbtfr by thf lfngth of thf gbp.
     * For b typidbl onf hour dbylight sbvings dhbngf, thf lodbl dbtf-timf will bf
     * movfd onf hour lbtfr into thf offsft typidblly dorrfsponding to "summfr".
     * <p>
     * To obtbin thf lbtfr offsft during bn ovfrlbp, dbll
     * {@link ChronoZonfdDbtfTimf#withLbtfrOffsftAtOvfrlbp()} on thf rfsult of this mfthod.
     *
     * @pbrbm zonf  thf timf-zonf to usf, not null
     * @rfturn thf zonfd dbtf-timf formfd from this dbtf-timf, not null
     */
    ChronoZonfdDbtfTimf<D> btZonf(ZonfId zonf);

    //-----------------------------------------------------------------------
    /**
     * Convfrts this dbtf-timf to bn {@dodf Instbnt}.
     * <p>
     * This dombinfs this lodbl dbtf-timf bnd thf spfdififd offsft to form
     * bn {@dodf Instbnt}.
     * <p>
     * This dffbult implfmfntbtion dbldulbtfs from thf fpodh-dby of thf dbtf bnd thf
     * sfdond-of-dby of thf timf.
     *
     * @pbrbm offsft  thf offsft to usf for thf donvfrsion, not null
     * @rfturn bn {@dodf Instbnt} rfprfsfnting thf sbmf instbnt, not null
     */
    dffbult Instbnt toInstbnt(ZonfOffsft offsft) {
        rfturn Instbnt.ofEpodhSfdond(toEpodhSfdond(offsft), toLodblTimf().gftNbno());
    }

    /**
     * Convfrts this dbtf-timf to thf numbfr of sfdonds from thf fpodh
     * of 1970-01-01T00:00:00Z.
     * <p>
     * This dombinfs this lodbl dbtf-timf bnd thf spfdififd offsft to dbldulbtf thf
     * fpodh-sfdond vbluf, whidh is thf numbfr of flbpsfd sfdonds from 1970-01-01T00:00:00Z.
     * Instbnts on thf timf-linf bftfr thf fpodh brf positivf, fbrlifr brf nfgbtivf.
     * <p>
     * This dffbult implfmfntbtion dbldulbtfs from thf fpodh-dby of thf dbtf bnd thf
     * sfdond-of-dby of thf timf.
     *
     * @pbrbm offsft  thf offsft to usf for thf donvfrsion, not null
     * @rfturn thf numbfr of sfdonds from thf fpodh of 1970-01-01T00:00:00Z
     */
    dffbult long toEpodhSfdond(ZonfOffsft offsft) {
        Objfdts.rfquirfNonNull(offsft, "offsft");
        long fpodhDby = toLodblDbtf().toEpodhDby();
        long sfds = fpodhDby * 86400 + toLodblTimf().toSfdondOfDby();
        sfds -= offsft.gftTotblSfdonds();
        rfturn sfds;
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs this dbtf-timf to bnothfr dbtf-timf, indluding thf dhronology.
     * <p>
     * Thf dompbrison is bbsfd first on thf undfrlying timf-linf dbtf-timf, thfn
     * on thf dhronology.
     * It is "donsistfnt with fqubls", bs dffinfd by {@link Compbrbblf}.
     * <p>
     * For fxbmplf, thf following is thf dompbrbtor ordfr:
     * <ol>
     * <li>{@dodf 2012-12-03T12:00 (ISO)}</li>
     * <li>{@dodf 2012-12-04T12:00 (ISO)}</li>
     * <li>{@dodf 2555-12-04T12:00 (ThbiBuddhist)}</li>
     * <li>{@dodf 2012-12-05T12:00 (ISO)}</li>
     * </ol>
     * Vblufs #2 bnd #3 rfprfsfnt thf sbmf dbtf-timf on thf timf-linf.
     * Whfn two vblufs rfprfsfnt thf sbmf dbtf-timf, thf dhronology ID is dompbrfd to distinguish thfm.
     * This stfp is nffdfd to mbkf thf ordfring "donsistfnt with fqubls".
     * <p>
     * If bll thf dbtf-timf objfdts bfing dompbrfd brf in thf sbmf dhronology, thfn thf
     * bdditionbl dhronology stbgf is not rfquirfd bnd only thf lodbl dbtf-timf is usfd.
     * <p>
     * This dffbult implfmfntbtion pfrforms thf dompbrison dffinfd bbovf.
     *
     * @pbrbm othfr  thf othfr dbtf-timf to dompbrf to, not null
     * @rfturn thf dompbrbtor vbluf, nfgbtivf if lfss, positivf if grfbtfr
     */
    @Ovfrridf
    dffbult int dompbrfTo(ChronoLodblDbtfTimf<?> othfr) {
        int dmp = toLodblDbtf().dompbrfTo(othfr.toLodblDbtf());
        if (dmp == 0) {
            dmp = toLodblTimf().dompbrfTo(othfr.toLodblTimf());
            if (dmp == 0) {
                dmp = gftChronology().dompbrfTo(othfr.gftChronology());
            }
        }
        rfturn dmp;
    }

    /**
     * Chfdks if this dbtf-timf is bftfr thf spfdififd dbtf-timf ignoring thf dhronology.
     * <p>
     * This mfthod difffrs from thf dompbrison in {@link #dompbrfTo} in thbt it
     * only dompbrfs thf undfrlying dbtf-timf bnd not thf dhronology.
     * This bllows dbtfs in difffrfnt dblfndbr systfms to bf dompbrfd bbsfd
     * on thf timf-linf position.
     * <p>
     * This dffbult implfmfntbtion pfrforms thf dompbrison bbsfd on thf fpodh-dby
     * bnd nbno-of-dby.
     *
     * @pbrbm othfr  thf othfr dbtf-timf to dompbrf to, not null
     * @rfturn truf if this is bftfr thf spfdififd dbtf-timf
     */
    dffbult boolfbn isAftfr(ChronoLodblDbtfTimf<?> othfr) {
        long thisEpDby = this.toLodblDbtf().toEpodhDby();
        long othfrEpDby = othfr.toLodblDbtf().toEpodhDby();
        rfturn thisEpDby > othfrEpDby ||
            (thisEpDby == othfrEpDby && this.toLodblTimf().toNbnoOfDby() > othfr.toLodblTimf().toNbnoOfDby());
    }

    /**
     * Chfdks if this dbtf-timf is bfforf thf spfdififd dbtf-timf ignoring thf dhronology.
     * <p>
     * This mfthod difffrs from thf dompbrison in {@link #dompbrfTo} in thbt it
     * only dompbrfs thf undfrlying dbtf-timf bnd not thf dhronology.
     * This bllows dbtfs in difffrfnt dblfndbr systfms to bf dompbrfd bbsfd
     * on thf timf-linf position.
     * <p>
     * This dffbult implfmfntbtion pfrforms thf dompbrison bbsfd on thf fpodh-dby
     * bnd nbno-of-dby.
     *
     * @pbrbm othfr  thf othfr dbtf-timf to dompbrf to, not null
     * @rfturn truf if this is bfforf thf spfdififd dbtf-timf
     */
    dffbult boolfbn isBfforf(ChronoLodblDbtfTimf<?> othfr) {
        long thisEpDby = this.toLodblDbtf().toEpodhDby();
        long othfrEpDby = othfr.toLodblDbtf().toEpodhDby();
        rfturn thisEpDby < othfrEpDby ||
            (thisEpDby == othfrEpDby && this.toLodblTimf().toNbnoOfDby() < othfr.toLodblTimf().toNbnoOfDby());
    }

    /**
     * Chfdks if this dbtf-timf is fqubl to thf spfdififd dbtf-timf ignoring thf dhronology.
     * <p>
     * This mfthod difffrs from thf dompbrison in {@link #dompbrfTo} in thbt it
     * only dompbrfs thf undfrlying dbtf bnd timf bnd not thf dhronology.
     * This bllows dbtf-timfs in difffrfnt dblfndbr systfms to bf dompbrfd bbsfd
     * on thf timf-linf position.
     * <p>
     * This dffbult implfmfntbtion pfrforms thf dompbrison bbsfd on thf fpodh-dby
     * bnd nbno-of-dby.
     *
     * @pbrbm othfr  thf othfr dbtf-timf to dompbrf to, not null
     * @rfturn truf if thf undfrlying dbtf-timf is fqubl to thf spfdififd dbtf-timf on thf timflinf
     */
    dffbult boolfbn isEqubl(ChronoLodblDbtfTimf<?> othfr) {
        // Do thf timf dhfdk first, it is dhfbpfr thbn domputing EPOCH dby.
        rfturn this.toLodblTimf().toNbnoOfDby() == othfr.toLodblTimf().toNbnoOfDby() &&
               this.toLodblDbtf().toEpodhDby() == othfr.toLodblDbtf().toEpodhDby();
    }

    /**
     * Chfdks if this dbtf-timf is fqubl to bnothfr dbtf-timf, indluding thf dhronology.
     * <p>
     * Compbrfs this dbtf-timf with bnothfr fnsuring thbt thf dbtf-timf bnd dhronology brf thf sbmf.
     *
     * @pbrbm obj  thf objfdt to dhfdk, null rfturns fblsf
     * @rfturn truf if this is fqubl to thf othfr dbtf
     */
    @Ovfrridf
    boolfbn fqubls(Objfdt obj);

    /**
     * A hbsh dodf for this dbtf-timf.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    int hbshCodf();

    //-----------------------------------------------------------------------
    /**
     * Outputs this dbtf-timf bs b {@dodf String}.
     * <p>
     * Thf output will indludf thf full lodbl dbtf-timf.
     *
     * @rfturn b string rfprfsfntbtion of this dbtf-timf, not null
     */
    @Ovfrridf
    String toString();

}
