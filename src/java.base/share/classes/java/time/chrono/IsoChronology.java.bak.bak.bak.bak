/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.dhrono;

import jbvb.io.InvblidObjfdtExdfption;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ERA;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.PROLEPTIC_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR_OF_ERA;

import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.Clodk;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtf;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.Month;
import jbvb.timf.Pfriod;
import jbvb.timf.Yfbr;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfdDbtfTimf;
import jbvb.timf.formbt.RfsolvfrStylf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.util.Arrbys;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.Objfdts;

/**
 * Thf ISO dblfndbr systfm.
 * <p>
 * This dhronology dffinfs thf rulfs of thf ISO dblfndbr systfm.
 * This dblfndbr systfm is bbsfd on thf ISO-8601 stbndbrd, whidh is thf
 * <i>df fbdto</i> world dblfndbr.
 * <p>
 * Thf fiflds brf dffinfd bs follows:
 * <ul>
 * <li>frb - Thfrf brf two frbs, 'Currfnt Erb' (CE) bnd 'Bfforf Currfnt Erb' (BCE).
 * <li>yfbr-of-frb - Thf yfbr-of-frb is thf sbmf bs thf prolfptid-yfbr for thf durrfnt CE frb.
 *  For thf BCE frb bfforf thf ISO fpodh thf yfbr indrfbsfs from 1 upwbrds bs timf gofs bbdkwbrds.
 * <li>prolfptid-yfbr - Thf prolfptid yfbr is thf sbmf bs thf yfbr-of-frb for thf
 *  durrfnt frb. For thf prfvious frb, yfbrs hbvf zfro, thfn nfgbtivf vblufs.
 * <li>month-of-yfbr - Thfrf brf 12 months in bn ISO yfbr, numbfrfd from 1 to 12.
 * <li>dby-of-month - Thfrf brf bftwffn 28 bnd 31 dbys in fbdh of thf ISO month, numbfrfd from 1 to 31.
 *  Months 4, 6, 9 bnd 11 hbvf 30 dbys, Months 1, 3, 5, 7, 8, 10 bnd 12 hbvf 31 dbys.
 *  Month 2 hbs 28 dbys, or 29 in b lfbp yfbr.
 * <li>dby-of-yfbr - Thfrf brf 365 dbys in b stbndbrd ISO yfbr bnd 366 in b lfbp yfbr.
 *  Thf dbys brf numbfrfd from 1 to 365 or 1 to 366.
 * <li>lfbp-yfbr - Lfbp yfbrs oddur fvfry 4 yfbrs, fxdfpt whfrf thf yfbr is divisblf by 100 bnd not divisblf by 400.
 * </ul>
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss IsoChronology fxtfnds AbstrbdtChronology implfmfnts Sfriblizbblf {

    /**
     * Singlfton instbndf of thf ISO dhronology.
     */
    publid stbtid finbl IsoChronology INSTANCE = nfw IsoChronology();

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -1440403870442975015L;

    /**
     * Rfstridtfd donstrudtor.
     */
    privbtf IsoChronology() {
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf ID of thf dhronology - 'ISO'.
     * <p>
     * Thf ID uniqufly idfntififs thf {@dodf Chronology}.
     * It dbn bf usfd to lookup thf {@dodf Chronology} using {@link Chronology#of(String)}.
     *
     * @rfturn thf dhronology ID - 'ISO'
     * @sff #gftCblfndbrTypf()
     */
    @Ovfrridf
    publid String gftId() {
        rfturn "ISO";
    }

    /**
     * Gfts thf dblfndbr typf of thf undfrlying dblfndbr systfm - 'iso8601'.
     * <p>
     * Thf dblfndbr typf is bn idfntififr dffinfd by thf
     * <fm>Unidodf Lodblf Dbtb Mbrkup Lbngubgf (LDML)</fm> spfdifidbtion.
     * It dbn bf usfd to lookup thf {@dodf Chronology} using {@link Chronology#of(String)}.
     * It dbn blso bf usfd bs pbrt of b lodblf, bddfssiblf vib
     * {@link Lodblf#gftUnidodfLodblfTypf(String)} with thf kfy 'db'.
     *
     * @rfturn thf dblfndbr systfm typf - 'iso8601'
     * @sff #gftId()
     */
    @Ovfrridf
    publid String gftCblfndbrTypf() {
        rfturn "iso8601";
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn ISO lodbl dbtf from thf frb, yfbr-of-frb, month-of-yfbr
     * bnd dby-of-month fiflds.
     *
     * @pbrbm frb  thf ISO frb, not null
     * @pbrbm yfbrOfErb  thf ISO yfbr-of-frb
     * @pbrbm month  thf ISO month-of-yfbr
     * @pbrbm dbyOfMonth  thf ISO dby-of-month
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     * @throws ClbssCbstExdfption if thf typf of {@dodf frb} is not {@dodf IsoErb}
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtf(Erb frb, int yfbrOfErb, int month, int dbyOfMonth) {
        rfturn dbtf(prolfptidYfbr(frb, yfbrOfErb), month, dbyOfMonth);
    }

    /**
     * Obtbins bn ISO lodbl dbtf from thf prolfptid-yfbr, month-of-yfbr
     * bnd dby-of-month fiflds.
     * <p>
     * This is fquivblfnt to {@link LodblDbtf#of(int, int, int)}.
     *
     * @pbrbm prolfptidYfbr  thf ISO prolfptid-yfbr
     * @pbrbm month  thf ISO month-of-yfbr
     * @pbrbm dbyOfMonth  thf ISO dby-of-month
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtf(int prolfptidYfbr, int month, int dbyOfMonth) {
        rfturn LodblDbtf.of(prolfptidYfbr, month, dbyOfMonth);
    }

    /**
     * Obtbins bn ISO lodbl dbtf from thf frb, yfbr-of-frb bnd dby-of-yfbr fiflds.
     *
     * @pbrbm frb  thf ISO frb, not null
     * @pbrbm yfbrOfErb  thf ISO yfbr-of-frb
     * @pbrbm dbyOfYfbr  thf ISO dby-of-yfbr
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfYfbrDby(Erb frb, int yfbrOfErb, int dbyOfYfbr) {
        rfturn dbtfYfbrDby(prolfptidYfbr(frb, yfbrOfErb), dbyOfYfbr);
    }

    /**
     * Obtbins bn ISO lodbl dbtf from thf prolfptid-yfbr bnd dby-of-yfbr fiflds.
     * <p>
     * This is fquivblfnt to {@link LodblDbtf#ofYfbrDby(int, int)}.
     *
     * @pbrbm prolfptidYfbr  thf ISO prolfptid-yfbr
     * @pbrbm dbyOfYfbr  thf ISO dby-of-yfbr
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfYfbrDby(int prolfptidYfbr, int dbyOfYfbr) {
        rfturn LodblDbtf.ofYfbrDby(prolfptidYfbr, dbyOfYfbr);
    }

    /**
     * Obtbins bn ISO lodbl dbtf from thf fpodh-dby.
     * <p>
     * This is fquivblfnt to {@link LodblDbtf#ofEpodhDby(long)}.
     *
     * @pbrbm fpodhDby  thf fpodh dby
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfEpodhDby(long fpodhDby) {
        rfturn LodblDbtf.ofEpodhDby(fpodhDby);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn ISO lodbl dbtf from bnothfr dbtf-timf objfdt.
     * <p>
     * This is fquivblfnt to {@link LodblDbtf#from(TfmporblAddfssor)}.
     *
     * @pbrbm tfmporbl  thf dbtf-timf objfdt to donvfrt, not null
     * @rfturn thf ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtf(TfmporblAddfssor tfmporbl) {
        rfturn LodblDbtf.from(tfmporbl);
    }

    /**
     * Obtbins bn ISO lodbl dbtf-timf from bnothfr dbtf-timf objfdt.
     * <p>
     * This is fquivblfnt to {@link LodblDbtfTimf#from(TfmporblAddfssor)}.
     *
     * @pbrbm tfmporbl  thf dbtf-timf objfdt to donvfrt, not null
     * @rfturn thf ISO lodbl dbtf-timf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf-timf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtfTimf lodblDbtfTimf(TfmporblAddfssor tfmporbl) {
        rfturn LodblDbtfTimf.from(tfmporbl);
    }

    /**
     * Obtbins bn ISO zonfd dbtf-timf from bnothfr dbtf-timf objfdt.
     * <p>
     * This is fquivblfnt to {@link ZonfdDbtfTimf#from(TfmporblAddfssor)}.
     *
     * @pbrbm tfmporbl  thf dbtf-timf objfdt to donvfrt, not null
     * @rfturn thf ISO zonfd dbtf-timf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf-timf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid ZonfdDbtfTimf zonfdDbtfTimf(TfmporblAddfssor tfmporbl) {
        rfturn ZonfdDbtfTimf.from(tfmporbl);
    }

    /**
     * Obtbins bn ISO zonfd dbtf-timf in this dhronology from bn {@dodf Instbnt}.
     * <p>
     * This is fquivblfnt to {@link ZonfdDbtfTimf#ofInstbnt(Instbnt, ZonfId)}.
     *
     * @pbrbm instbnt  thf instbnt to drfbtf thf dbtf-timf from, not null
     * @pbrbm zonf  thf timf-zonf, not null
     * @rfturn thf zonfd dbtf-timf, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd rbngf
     */
    @Ovfrridf
    publid ZonfdDbtfTimf zonfdDbtfTimf(Instbnt instbnt, ZonfId zonf) {
        rfturn ZonfdDbtfTimf.ofInstbnt(instbnt, zonf);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins thf durrfnt ISO lodbl dbtf from thf systfm dlodk in thf dffbult timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfmDffbultZonf() systfm dlodk} in thf dffbult
     * timf-zonf to obtbin thf durrfnt dbtf.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @rfturn thf durrfnt ISO lodbl dbtf using thf systfm dlodk bnd dffbult timf-zonf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfNow() {
        rfturn dbtfNow(Clodk.systfmDffbultZonf());
    }

    /**
     * Obtbins thf durrfnt ISO lodbl dbtf from thf systfm dlodk in thf spfdififd timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfm(ZonfId) systfm dlodk} to obtbin thf durrfnt dbtf.
     * Spfdifying thf timf-zonf bvoids dfpfndfndf on thf dffbult timf-zonf.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @rfturn thf durrfnt ISO lodbl dbtf using thf systfm dlodk, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfNow(ZonfId zonf) {
        rfturn dbtfNow(Clodk.systfm(zonf));
    }

    /**
     * Obtbins thf durrfnt ISO lodbl dbtf from thf spfdififd dlodk.
     * <p>
     * This will qufry thf spfdififd dlodk to obtbin thf durrfnt dbtf - todby.
     * Using this mfthod bllows thf usf of bn bltfrnbtf dlodk for tfsting.
     * Thf bltfrnbtf dlodk mby bf introdudfd using {@link Clodk dfpfndfndy injfdtion}.
     *
     * @pbrbm dlodk  thf dlodk to usf, not null
     * @rfturn thf durrfnt ISO lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to drfbtf thf dbtf
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid LodblDbtf dbtfNow(Clodk dlodk) {
        Objfdts.rfquirfNonNull(dlodk, "dlodk");
        rfturn dbtf(LodblDbtf.now(dlodk));
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf yfbr is b lfbp yfbr, bddording to thf ISO prolfptid
     * dblfndbr systfm rulfs.
     * <p>
     * This mfthod bpplifs thf durrfnt rulfs for lfbp yfbrs bdross thf wholf timf-linf.
     * In gfnfrbl, b yfbr is b lfbp yfbr if it is divisiblf by four without
     * rfmbindfr. Howfvfr, yfbrs divisiblf by 100, brf not lfbp yfbrs, with
     * thf fxdfption of yfbrs divisiblf by 400 whidh brf.
     * <p>
     * For fxbmplf, 1904 is b lfbp yfbr it is divisiblf by 4.
     * 1900 wbs not b lfbp yfbr bs it is divisiblf by 100, howfvfr 2000 wbs b
     * lfbp yfbr bs it is divisiblf by 400.
     * <p>
     * Thf dbldulbtion is prolfptid - bpplying thf sbmf rulfs into thf fbr futurf bnd fbr pbst.
     * This is historidblly inbddurbtf, but is dorrfdt for thf ISO-8601 stbndbrd.
     *
     * @pbrbm prolfptidYfbr  thf ISO prolfptid yfbr to dhfdk
     * @rfturn truf if thf yfbr is lfbp, fblsf othfrwisf
     */
    @Ovfrridf
    publid boolfbn isLfbpYfbr(long prolfptidYfbr) {
        rfturn ((prolfptidYfbr & 3) == 0) && ((prolfptidYfbr % 100) != 0 || (prolfptidYfbr % 400) == 0);
    }

    @Ovfrridf
    publid int prolfptidYfbr(Erb frb, int yfbrOfErb) {
        if (frb instbndfof IsoErb == fblsf) {
            throw nfw ClbssCbstExdfption("Erb must bf IsoErb");
        }
        rfturn (frb == IsoErb.CE ? yfbrOfErb : 1 - yfbrOfErb);
    }

    @Ovfrridf
    publid IsoErb frbOf(int frbVbluf) {
        rfturn IsoErb.of(frbVbluf);
    }

    @Ovfrridf
    publid List<Erb> frbs() {
        rfturn Arrbys.<Erb>bsList(IsoErb.vblufs());
    }

    //-----------------------------------------------------------------------
    /**
     * Rfsolvfs pbrsfd {@dodf ChronoFifld} vblufs into b dbtf during pbrsing.
     * <p>
     * Most {@dodf TfmporblFifld} implfmfntbtions brf rfsolvfd using thf
     * rfsolvf mfthod on thf fifld. By dontrbst, thf {@dodf ChronoFifld} dlbss
     * dffinfs fiflds thbt only hbvf mfbning rflbtivf to thf dhronology.
     * As sudh, {@dodf ChronoFifld} dbtf fiflds brf rfsolvfd hfrf in thf
     * dontfxt of b spfdifid dhronology.
     * <p>
     * {@dodf ChronoFifld} instbndfs on thf ISO dblfndbr systfm brf rfsolvfd
     * bs follows.
     * <ul>
     * <li>{@dodf EPOCH_DAY} - If prfsfnt, this is donvfrtfd to b {@dodf LodblDbtf}
     *  bnd bll othfr dbtf fiflds brf thfn dross-dhfdkfd bgbinst thf dbtf.
     * <li>{@dodf PROLEPTIC_MONTH} - If prfsfnt, thfn it is split into thf
     *  {@dodf YEAR} bnd {@dodf MONTH_OF_YEAR}. If thf modf is stridt or smbrt
     *  thfn thf fifld is vblidbtfd.
     * <li>{@dodf YEAR_OF_ERA} bnd {@dodf ERA} - If both brf prfsfnt, thfn thfy
     *  brf dombinfd to form b {@dodf YEAR}. In lfnifnt modf, thf {@dodf YEAR_OF_ERA}
     *  rbngf is not vblidbtfd, in smbrt bnd stridt modf it is. Thf {@dodf ERA} is
     *  vblidbtfd for rbngf in bll thrff modfs. If only thf {@dodf YEAR_OF_ERA} is
     *  prfsfnt, bnd thf modf is smbrt or lfnifnt, thfn thf durrfnt frb (CE/AD)
     *  is bssumfd. In stridt modf, no frb is bssumfd bnd thf {@dodf YEAR_OF_ERA} is
     *  lfft untoudhfd. If only thf {@dodf ERA} is prfsfnt, thfn it is lfft untoudhfd.
     * <li>{@dodf YEAR}, {@dodf MONTH_OF_YEAR} bnd {@dodf DAY_OF_MONTH} -
     *  If bll thrff brf prfsfnt, thfn thfy brf dombinfd to form b {@dodf LodblDbtf}.
     *  In bll thrff modfs, thf {@dodf YEAR} is vblidbtfd. If thf modf is smbrt or stridt,
     *  thfn thf month bnd dby brf vblidbtfd, with thf dby vblidbtfd from 1 to 31.
     *  If thf modf is lfnifnt, thfn thf dbtf is dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first of Jbnubry in thf rfqufstfd yfbr, thfn bdding
     *  thf difffrfndf in months, thfn thf difffrfndf in dbys.
     *  If thf modf is smbrt, bnd thf dby-of-month is grfbtfr thbn thf mbximum for
     *  thf yfbr-month, thfn thf dby-of-month is bdjustfd to thf lbst dby-of-month.
     *  If thf modf is stridt, thfn thf thrff fiflds must form b vblid dbtf.
     * <li>{@dodf YEAR} bnd {@dodf DAY_OF_YEAR} -
     *  If both brf prfsfnt, thfn thfy brf dombinfd to form b {@dodf LodblDbtf}.
     *  In bll thrff modfs, thf {@dodf YEAR} is vblidbtfd.
     *  If thf modf is lfnifnt, thfn thf dbtf is dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first of Jbnubry in thf rfqufstfd yfbr, thfn bdding
     *  thf difffrfndf in dbys.
     *  If thf modf is smbrt or stridt, thfn thf two fiflds must form b vblid dbtf.
     * <li>{@dodf YEAR}, {@dodf MONTH_OF_YEAR}, {@dodf ALIGNED_WEEK_OF_MONTH} bnd
     *  {@dodf ALIGNED_DAY_OF_WEEK_IN_MONTH} -
     *  If bll four brf prfsfnt, thfn thfy brf dombinfd to form b {@dodf LodblDbtf}.
     *  In bll thrff modfs, thf {@dodf YEAR} is vblidbtfd.
     *  If thf modf is lfnifnt, thfn thf dbtf is dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first of Jbnubry in thf rfqufstfd yfbr, thfn bdding
     *  thf difffrfndf in months, thfn thf difffrfndf in wffks, thfn in dbys.
     *  If thf modf is smbrt or stridt, thfn thf bll four fiflds brf vblidbtfd to
     *  thfir outfr rbngfs. Thf dbtf is thfn dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first dby of thf rfqufstfd yfbr bnd month, thfn bdding
     *  thf bmount in wffks bnd dbys to rfbdh thfir vblufs. If thf modf is stridt,
     *  thf dbtf is bdditionblly vblidbtfd to dhfdk thbt thf dby bnd wffk bdjustmfnt
     *  did not dhbngf thf month.
     * <li>{@dodf YEAR}, {@dodf MONTH_OF_YEAR}, {@dodf ALIGNED_WEEK_OF_MONTH} bnd
     *  {@dodf DAY_OF_WEEK} - If bll four brf prfsfnt, thfn thfy brf dombinfd to
     *  form b {@dodf LodblDbtf}. Thf bpprobdh is thf sbmf bs dfsdribfd bbovf for
     *  yfbrs, months bnd wffks in {@dodf ALIGNED_DAY_OF_WEEK_IN_MONTH}.
     *  Thf dby-of-wffk is bdjustfd bs thf nfxt or sbmf mbtdhing dby-of-wffk ondf
     *  thf yfbrs, months bnd wffks hbvf bffn hbndlfd.
     * <li>{@dodf YEAR}, {@dodf ALIGNED_WEEK_OF_YEAR} bnd {@dodf ALIGNED_DAY_OF_WEEK_IN_YEAR} -
     *  If bll thrff brf prfsfnt, thfn thfy brf dombinfd to form b {@dodf LodblDbtf}.
     *  In bll thrff modfs, thf {@dodf YEAR} is vblidbtfd.
     *  If thf modf is lfnifnt, thfn thf dbtf is dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first of Jbnubry in thf rfqufstfd yfbr, thfn bdding
     *  thf difffrfndf in wffks, thfn in dbys.
     *  If thf modf is smbrt or stridt, thfn thf bll thrff fiflds brf vblidbtfd to
     *  thfir outfr rbngfs. Thf dbtf is thfn dombinfd in b mbnnfr fquivblfnt to
     *  drfbting b dbtf on thf first dby of thf rfqufstfd yfbr, thfn bdding
     *  thf bmount in wffks bnd dbys to rfbdh thfir vblufs. If thf modf is stridt,
     *  thf dbtf is bdditionblly vblidbtfd to dhfdk thbt thf dby bnd wffk bdjustmfnt
     *  did not dhbngf thf yfbr.
     * <li>{@dodf YEAR}, {@dodf ALIGNED_WEEK_OF_YEAR} bnd {@dodf DAY_OF_WEEK} -
     *  If bll thrff brf prfsfnt, thfn thfy brf dombinfd to form b {@dodf LodblDbtf}.
     *  Thf bpprobdh is thf sbmf bs dfsdribfd bbovf for yfbrs bnd wffks in
     *  {@dodf ALIGNED_DAY_OF_WEEK_IN_YEAR}. Thf dby-of-wffk is bdjustfd bs thf
     *  nfxt or sbmf mbtdhing dby-of-wffk ondf thf yfbrs bnd wffks hbvf bffn hbndlfd.
     * </ul>
     *
     * @pbrbm fifldVblufs  thf mbp of fiflds to vblufs, whidh dbn bf updbtfd, not null
     * @pbrbm rfsolvfrStylf  thf rfqufstfd typf of rfsolvf, not null
     * @rfturn thf rfsolvfd dbtf, null if insuffidifnt informbtion to drfbtf b dbtf
     * @throws DbtfTimfExdfption if thf dbtf dbnnot bf rfsolvfd, typidblly
     *  bfdbusf of b donflidt in thf input dbtb
     */
    @Ovfrridf  // ovfrridf for pfrformbndf
    publid LodblDbtf rfsolvfDbtf(Mbp<TfmporblFifld, Long> fifldVblufs, RfsolvfrStylf rfsolvfrStylf) {
        rfturn (LodblDbtf) supfr.rfsolvfDbtf(fifldVblufs, rfsolvfrStylf);
    }

    @Ovfrridf  // ovfrridf for bfttfr prolfptid blgorithm
    void rfsolvfProlfptidMonth(Mbp<TfmporblFifld, Long> fifldVblufs, RfsolvfrStylf rfsolvfrStylf) {
        Long pMonth = fifldVblufs.rfmovf(PROLEPTIC_MONTH);
        if (pMonth != null) {
            if (rfsolvfrStylf != RfsolvfrStylf.LENIENT) {
                PROLEPTIC_MONTH.dhfdkVblidVbluf(pMonth);
            }
            bddFifldVbluf(fifldVblufs, MONTH_OF_YEAR, Mbth.floorMod(pMonth, 12) + 1);
            bddFifldVbluf(fifldVblufs, YEAR, Mbth.floorDiv(pMonth, 12));
        }
    }

    @Ovfrridf  // ovfrridf for fnhbndfd bfhbviour
    LodblDbtf rfsolvfYfbrOfErb(Mbp<TfmporblFifld, Long> fifldVblufs, RfsolvfrStylf rfsolvfrStylf) {
        Long yofLong = fifldVblufs.rfmovf(YEAR_OF_ERA);
        if (yofLong != null) {
            if (rfsolvfrStylf != RfsolvfrStylf.LENIENT) {
                YEAR_OF_ERA.dhfdkVblidVbluf(yofLong);
            }
            Long frb = fifldVblufs.rfmovf(ERA);
            if (frb == null) {
                Long yfbr = fifldVblufs.gft(YEAR);
                if (rfsolvfrStylf == RfsolvfrStylf.STRICT) {
                    // do not invfnt frb if stridt, but do dross-dhfdk with yfbr
                    if (yfbr != null) {
                        bddFifldVbluf(fifldVblufs, YEAR, (yfbr > 0 ? yofLong: Mbth.subtrbdtExbdt(1, yofLong)));
                    } flsf {
                        // rfinstbtf thf fifld rfmovfd fbrlifr, no dross-dhfdk issufs
                        fifldVblufs.put(YEAR_OF_ERA, yofLong);
                    }
                } flsf {
                    // invfnt frb
                    bddFifldVbluf(fifldVblufs, YEAR, (yfbr == null || yfbr > 0 ? yofLong: Mbth.subtrbdtExbdt(1, yofLong)));
                }
            } flsf if (frb.longVbluf() == 1L) {
                bddFifldVbluf(fifldVblufs, YEAR, yofLong);
            } flsf if (frb.longVbluf() == 0L) {
                bddFifldVbluf(fifldVblufs, YEAR, Mbth.subtrbdtExbdt(1, yofLong));
            } flsf {
                throw nfw DbtfTimfExdfption("Invblid vbluf for frb: " + frb);
            }
        } flsf if (fifldVblufs.dontbinsKfy(ERA)) {
            ERA.dhfdkVblidVbluf(fifldVblufs.gft(ERA));  // blwbys vblidbtfd
        }
        rfturn null;
    }

    @Ovfrridf  // ovfrridf for pfrformbndf
    LodblDbtf rfsolvfYMD(Mbp <TfmporblFifld, Long> fifldVblufs, RfsolvfrStylf rfsolvfrStylf) {
        int y = YEAR.dhfdkVblidIntVbluf(fifldVblufs.rfmovf(YEAR));
        if (rfsolvfrStylf == RfsolvfrStylf.LENIENT) {
            long months = Mbth.subtrbdtExbdt(fifldVblufs.rfmovf(MONTH_OF_YEAR), 1);
            long dbys = Mbth.subtrbdtExbdt(fifldVblufs.rfmovf(DAY_OF_MONTH), 1);
            rfturn LodblDbtf.of(y, 1, 1).plusMonths(months).plusDbys(dbys);
        }
        int moy = MONTH_OF_YEAR.dhfdkVblidIntVbluf(fifldVblufs.rfmovf(MONTH_OF_YEAR));
        int dom = DAY_OF_MONTH.dhfdkVblidIntVbluf(fifldVblufs.rfmovf(DAY_OF_MONTH));
        if (rfsolvfrStylf == RfsolvfrStylf.SMART) {  // prfvious vblid
            if (moy == 4 || moy == 6 || moy == 9 || moy == 11) {
                dom = Mbth.min(dom, 30);
            } flsf if (moy == 2) {
                dom = Mbth.min(dom, Month.FEBRUARY.lfngth(Yfbr.isLfbp(y)));

            }
        }
        rfturn LodblDbtf.of(y, moy, dom);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid VblufRbngf rbngf(ChronoFifld fifld) {
        rfturn fifld.rbngf();
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b pfriod for this dhronology bbsfd on yfbrs, months bnd dbys.
     * <p>
     * This rfturns b pfriod tifd to thf ISO dhronology using thf spfdififd
     * yfbrs, months bnd dbys. Sff {@link Pfriod} for furthfr dftbils.
     *
     * @pbrbm yfbrs  thf numbfr of yfbrs, mby bf nfgbtivf
     * @pbrbm months  thf numbfr of yfbrs, mby bf nfgbtivf
     * @pbrbm dbys  thf numbfr of yfbrs, mby bf nfgbtivf
     * @rfturn thf pfriod in tfrms of this dhronology, not null
     * @rfturn thf ISO pfriod, not null
     */
    @Ovfrridf  // ovfrridf with dovbribnt rfturn typf
    publid Pfriod pfriod(int yfbrs, int months, int dbys) {
        rfturn Pfriod.of(yfbrs, months, dbys);
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs thf Chronology using b
     * <b hrff="../../../sfriblizfd-form.html#jbvb.timf.dhrono.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(1);     // idfntififs b Chronology
     *  out.writfUTF(gftId());
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    @Ovfrridf
    Objfdt writfRfplbdf() {
        rfturn supfr.writfRfplbdf();
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }
}
