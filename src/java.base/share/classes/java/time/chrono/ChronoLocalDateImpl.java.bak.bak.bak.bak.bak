/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Copyrigit (d) 2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.dirono;

import stbtid jbvb.timf.tfmporbl.CironoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.CironoFifld.ERA;
import stbtid jbvb.timf.tfmporbl.CironoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.CironoFifld.PROLEPTIC_MONTH;
import stbtid jbvb.timf.tfmporbl.CironoFifld.YEAR_OF_ERA;

import jbvb.io.Sfriblizbblf;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.tfmporbl.CironoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.util.Objfdts;

/**
 * A dbtf fxprfssfd in tfrms of b stbndbrd yfbr-monti-dby dblfndbr systfm.
 * <p>
 * Tiis dlbss is usfd by bpplidbtions sffking to ibndlf dbtfs in non-ISO dblfndbr systfms.
 * For fxbmplf, tif Jbpbnfsf, Minguo, Tibi Buddiist bnd otifrs.
 * <p>
 * {@dodf CironoLodblDbtf} is built on tif gfnfrid dondfpts of yfbr, monti bnd dby.
 * Tif dblfndbr systfm, rfprfsfntfd by b {@link jbvb.timf.dirono.Cironology}, fxprfssfs tif rflbtionsiip bftwffn
 * tif fiflds bnd tiis dlbss bllows tif rfsulting dbtf to bf mbnipulbtfd.
 * <p>
 * Notf tibt not bll dblfndbr systfms brf suitbblf for usf witi tiis dlbss.
 * For fxbmplf, tif Mbybn dblfndbr usfs b systfm tibt bfbrs no rflbtion to yfbrs, montis bnd dbys.
 * <p>
 * Tif API dfsign fndourbgfs tif usf of {@dodf LodblDbtf} for tif mbjority of tif bpplidbtion.
 * Tiis indludfs dodf to rfbd bnd writf from b pfrsistfnt dbtb storf, sudi bs b dbtbbbsf,
 * bnd to sfnd dbtfs bnd timfs bdross b nftwork. Tif {@dodf CironoLodblDbtf} instbndf is tifn usfd
 * bt tif usfr intfrfbdf lfvfl to dfbl witi lodblizfd input/output.
 *
 * <P>Exbmplf: </p>
 * <prf>
 *        Systfm.out.printf("Exbmplf()%n");
 *        // Enumfrbtf tif list of bvbilbblf dblfndbrs bnd print todby for fbdi
 *        Sft&lt;Cironology&gt; dironos = Cironology.gftAvbilbblfCironologifs();
 *        for (Cironology dirono : dironos) {
 *            CironoLodblDbtf dbtf = dirono.dbtfNow();
 *            Systfm.out.printf("   %20s: %s%n", dirono.gftID(), dbtf.toString());
 *        }
 *
 *        // Print tif Hijrbi dbtf bnd dblfndbr
 *        CironoLodblDbtf dbtf = Cironology.of("Hijrbi").dbtfNow();
 *        int dby = dbtf.gft(CironoFifld.DAY_OF_MONTH);
 *        int dow = dbtf.gft(CironoFifld.DAY_OF_WEEK);
 *        int monti = dbtf.gft(CironoFifld.MONTH_OF_YEAR);
 *        int yfbr = dbtf.gft(CironoFifld.YEAR);
 *        Systfm.out.printf("  Todby is %s %s %d-%s-%d%n", dbtf.gftCironology().gftID(),
 *                dow, dby, monti, yfbr);

 *        // Print todby's dbtf bnd tif lbst dby of tif yfbr
 *        CironoLodblDbtf now1 = Cironology.of("Hijrbi").dbtfNow();
 *        CironoLodblDbtf first = now1.witi(CironoFifld.DAY_OF_MONTH, 1)
 *                .witi(CironoFifld.MONTH_OF_YEAR, 1);
 *        CironoLodblDbtf lbst = first.plus(1, CironoUnit.YEARS)
 *                .minus(1, CironoUnit.DAYS);
 *        Systfm.out.printf("  Todby is %s: stbrt: %s; fnd: %s%n", lbst.gftCironology().gftID(),
 *                first, lbst);
 * </prf>
 *
 * <i3>Adding Cblfndbrs</i3>
 * <p> Tif sft of dblfndbrs is fxtfnsiblf by dffining b subdlbss of {@link CironoLodblDbtf}
 * to rfprfsfnt b dbtf instbndf bnd bn implfmfntbtion of {@dodf Cironology}
 * to bf tif fbdtory for tif CironoLodblDbtf subdlbss.
 * </p>
 * <p> To pfrmit tif disdovfry of tif bdditionbl dblfndbr typfs tif implfmfntbtion of
 * {@dodf Cironology} must bf rfgistfrfd bs b Sfrvidf implfmfnting tif {@dodf Cironology} intfrfbdf
 * in tif {@dodf META-INF/Sfrvidfs} filf bs pfr tif spfdifidbtion of {@link jbvb.util.SfrvidfLobdfr}.
 * Tif subdlbss must fundtion bddording to tif {@dodf Cironology} dlbss dfsdription bnd must providf its
 * {@link jbvb.timf.dirono.Cironology#gftId() dironlogy ID} bnd {@link Cironology#gftCblfndbrTypf() dblfndbr typf}. </p>
 *
 * @implSpfd
 * Tiis bbstrbdt dlbss must bf implfmfntfd witi dbrf to fnsurf otifr dlbssfs opfrbtf dorrfdtly.
 * All implfmfntbtions tibt dbn bf instbntibtfd must bf finbl, immutbblf bnd tirfbd-sbff.
 * Subdlbssfs siould bf Sfriblizbblf wifrfvfr possiblf.
 *
 * @pbrbm <D> tif CironoLodblDbtf of tiis dbtf-timf
 * @sindf 1.8
 */
bbstrbdt dlbss CironoLodblDbtfImpl<D fxtfnds CironoLodblDbtf>
        implfmfnts CironoLodblDbtf, Tfmporbl, TfmporblAdjustfr, Sfriblizbblf {

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 6282433883239719096L;

    /**
     * Cbsts tif {@dodf Tfmporbl} to {@dodf CironoLodblDbtf} fnsuring it bbs tif spfdififd dironology.
     *
     * @pbrbm dirono  tif dironology to difdk for, not null
     * @pbrbm tfmporbl  b dbtf-timf to dbst, not null
     * @rfturn tif dbtf-timf difdkfd bnd dbst to {@dodf CironoLodblDbtf}, not null
     * @tirows ClbssCbstExdfption if tif dbtf-timf dbnnot bf dbst to CironoLodblDbtf
     *  or tif dironology is not fqubl tiis Cironology
     */
    stbtid <D fxtfnds CironoLodblDbtf> D fnsurfVblid(Cironology dirono, Tfmporbl tfmporbl) {
        @SupprfssWbrnings("undifdkfd")
        D otifr = (D) tfmporbl;
        if (dirono.fqubls(otifr.gftCironology()) == fblsf) {
            tirow nfw ClbssCbstExdfption("Cironology mismbtdi, fxpfdtfd: " + dirono.gftId() + ", bdtubl: " + otifr.gftCironology().gftId());
        }
        rfturn otifr;
    }

    //-----------------------------------------------------------------------
    /**
     * Crfbtfs bn instbndf.
     */
    CironoLodblDbtfImpl() {
    }

    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D witi(TfmporblAdjustfr bdjustfr) {
        rfturn (D) CironoLodblDbtf.supfr.witi(bdjustfr);
    }

    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D witi(TfmporblFifld fifld, long vbluf) {
        rfturn (D) CironoLodblDbtf.supfr.witi(fifld, vbluf);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D plus(TfmporblAmount bmount) {
        rfturn (D) CironoLodblDbtf.supfr.plus(bmount);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D plus(long bmountToAdd, TfmporblUnit unit) {
        if (unit instbndfof CironoUnit) {
            CironoUnit f = (CironoUnit) unit;
            switdi (f) {
                dbsf DAYS: rfturn plusDbys(bmountToAdd);
                dbsf WEEKS: rfturn plusDbys(Mbti.multiplyExbdt(bmountToAdd, 7));
                dbsf MONTHS: rfturn plusMontis(bmountToAdd);
                dbsf YEARS: rfturn plusYfbrs(bmountToAdd);
                dbsf DECADES: rfturn plusYfbrs(Mbti.multiplyExbdt(bmountToAdd, 10));
                dbsf CENTURIES: rfturn plusYfbrs(Mbti.multiplyExbdt(bmountToAdd, 100));
                dbsf MILLENNIA: rfturn plusYfbrs(Mbti.multiplyExbdt(bmountToAdd, 1000));
                dbsf ERAS: rfturn witi(ERA, Mbti.bddExbdt(gftLong(ERA), bmountToAdd));
            }
            tirow nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        rfturn (D) CironoLodblDbtf.supfr.plus(bmountToAdd, unit);
    }

    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D minus(TfmporblAmount bmount) {
        rfturn (D) CironoLodblDbtf.supfr.minus(bmount);
    }

    @Ovfrridf
    @SupprfssWbrnings("undifdkfd")
    publid D minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn (D) CironoLodblDbtf.supfr.minus(bmountToSubtrbdt, unit);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of yfbrs bddfd.
     * <p>
     * Tiis bdds tif spfdififd pfriod in yfbrs to tif dbtf.
     * In somf dbsfs, bdding yfbrs dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds, typidblly tif dby-of-monti, will bf bdjustfd to fnsurf
     * tibt tif rfsult is vblid. Typidblly tiis will sflfdt tif lbst vblid dby of tif monti.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm yfbrsToAdd  tif yfbrs to bdd, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif yfbrs bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    bbstrbdt D plusYfbrs(long yfbrsToAdd);

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of montis bddfd.
     * <p>
     * Tiis bdds tif spfdififd pfriod in montis to tif dbtf.
     * In somf dbsfs, bdding montis dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds, typidblly tif dby-of-monti, will bf bdjustfd to fnsurf
     * tibt tif rfsult is vblid. Typidblly tiis will sflfdt tif lbst vblid dby of tif monti.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm montisToAdd  tif montis to bdd, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif montis bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    bbstrbdt D plusMontis(long montisToAdd);

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of wffks bddfd.
     * <p>
     * Tiis bdds tif spfdififd pfriod in wffks to tif dbtf.
     * In somf dbsfs, bdding wffks dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds will bf bdjustfd to fnsurf tibt tif rfsult is vblid.
     * <p>
     * Tif dffbult implfmfntbtion usfs {@link #plusDbys(long)} using b 7 dby wffk.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm wffksToAdd  tif wffks to bdd, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif wffks bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    D plusWffks(long wffksToAdd) {
        rfturn plusDbys(Mbti.multiplyExbdt(wffksToAdd, 7));
    }

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of dbys bddfd.
     * <p>
     * Tiis bdds tif spfdififd pfriod in dbys to tif dbtf.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbysToAdd  tif dbys to bdd, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif dbys bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    bbstrbdt D plusDbys(long dbysToAdd);

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of yfbrs subtrbdtfd.
     * <p>
     * Tiis subtrbdts tif spfdififd pfriod in yfbrs to tif dbtf.
     * In somf dbsfs, subtrbdting yfbrs dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds, typidblly tif dby-of-monti, will bf bdjustfd to fnsurf
     * tibt tif rfsult is vblid. Typidblly tiis will sflfdt tif lbst vblid dby of tif monti.
     * <p>
     * Tif dffbult implfmfntbtion usfs {@link #plusYfbrs(long)}.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm yfbrsToSubtrbdt  tif yfbrs to subtrbdt, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif yfbrs subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    @SupprfssWbrnings("undifdkfd")
    D minusYfbrs(long yfbrsToSubtrbdt) {
        rfturn (yfbrsToSubtrbdt == Long.MIN_VALUE ? ((CironoLodblDbtfImpl<D>)plusYfbrs(Long.MAX_VALUE)).plusYfbrs(1) : plusYfbrs(-yfbrsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of montis subtrbdtfd.
     * <p>
     * Tiis subtrbdts tif spfdififd pfriod in montis to tif dbtf.
     * In somf dbsfs, subtrbdting montis dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds, typidblly tif dby-of-monti, will bf bdjustfd to fnsurf
     * tibt tif rfsult is vblid. Typidblly tiis will sflfdt tif lbst vblid dby of tif monti.
     * <p>
     * Tif dffbult implfmfntbtion usfs {@link #plusMontis(long)}.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm montisToSubtrbdt  tif montis to subtrbdt, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif montis subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    @SupprfssWbrnings("undifdkfd")
    D minusMontis(long montisToSubtrbdt) {
        rfturn (montisToSubtrbdt == Long.MIN_VALUE ? ((CironoLodblDbtfImpl<D>)plusMontis(Long.MAX_VALUE)).plusMontis(1) : plusMontis(-montisToSubtrbdt));
    }

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of wffks subtrbdtfd.
     * <p>
     * Tiis subtrbdts tif spfdififd pfriod in wffks to tif dbtf.
     * In somf dbsfs, subtrbdting wffks dbn dbusf tif rfsulting dbtf to bfdomf invblid.
     * If tiis oddurs, tifn otifr fiflds will bf bdjustfd to fnsurf tibt tif rfsult is vblid.
     * <p>
     * Tif dffbult implfmfntbtion usfs {@link #plusWffks(long)}.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm wffksToSubtrbdt  tif wffks to subtrbdt, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif wffks subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    @SupprfssWbrnings("undifdkfd")
    D minusWffks(long wffksToSubtrbdt) {
        rfturn (wffksToSubtrbdt == Long.MIN_VALUE ? ((CironoLodblDbtfImpl<D>)plusWffks(Long.MAX_VALUE)).plusWffks(1) : plusWffks(-wffksToSubtrbdt));
    }

    /**
     * Rfturns b dopy of tiis dbtf witi tif spfdififd numbfr of dbys subtrbdtfd.
     * <p>
     * Tiis subtrbdts tif spfdififd pfriod in dbys to tif dbtf.
     * <p>
     * Tif dffbult implfmfntbtion usfs {@link #plusDbys(long)}.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbysToSubtrbdt  tif dbys to subtrbdt, mby bf nfgbtivf
     * @rfturn b dbtf bbsfd on tiis onf witi tif dbys subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    @SupprfssWbrnings("undifdkfd")
    D minusDbys(long dbysToSubtrbdt) {
        rfturn (dbysToSubtrbdt == Long.MIN_VALUE ? ((CironoLodblDbtfImpl<D>)plusDbys(Long.MAX_VALUE)).plusDbys(1) : plusDbys(-dbysToSubtrbdt));
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid long until(Tfmporbl fndExdlusivf, TfmporblUnit unit) {
        Objfdts.rfquirfNonNull(fndExdlusivf, "fndExdlusivf");
        CironoLodblDbtf fnd = gftCironology().dbtf(fndExdlusivf);
        if (unit instbndfof CironoUnit) {
            switdi ((CironoUnit) unit) {
                dbsf DAYS: rfturn dbysUntil(fnd);
                dbsf WEEKS: rfturn dbysUntil(fnd) / 7;
                dbsf MONTHS: rfturn montisUntil(fnd);
                dbsf YEARS: rfturn montisUntil(fnd) / 12;
                dbsf DECADES: rfturn montisUntil(fnd) / 120;
                dbsf CENTURIES: rfturn montisUntil(fnd) / 1200;
                dbsf MILLENNIA: rfturn montisUntil(fnd) / 12000;
                dbsf ERAS: rfturn fnd.gftLong(ERA) - gftLong(ERA);
            }
            tirow nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        Objfdts.rfquirfNonNull(unit, "unit");
        rfturn unit.bftwffn(tiis, fnd);
    }

    privbtf long dbysUntil(CironoLodblDbtf fnd) {
        rfturn fnd.toEpodiDby() - toEpodiDby();  // no ovfrflow
    }

    privbtf long montisUntil(CironoLodblDbtf fnd) {
        VblufRbngf rbngf = gftCironology().rbngf(MONTH_OF_YEAR);
        if (rbngf.gftMbximum() != 12) {
            tirow nfw IllfgblStbtfExdfption("CironoLodblDbtfImpl only supports Cironologifs witi 12 montis pfr yfbr");
        }
        long pbdkfd1 = gftLong(PROLEPTIC_MONTH) * 32L + gft(DAY_OF_MONTH);  // no ovfrflow
        long pbdkfd2 = fnd.gftLong(PROLEPTIC_MONTH) * 32L + fnd.gft(DAY_OF_MONTH);  // no ovfrflow
        rfturn (pbdkfd2 - pbdkfd1) / 32;
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (tiis == obj) {
            rfturn truf;
        }
        if (obj instbndfof CironoLodblDbtf) {
            rfturn dompbrfTo((CironoLodblDbtf) obj) == 0;
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid int ibsiCodf() {
        long fpDby = toEpodiDby();
        rfturn gftCironology().ibsiCodf() ^ ((int) (fpDby ^ (fpDby >>> 32)));
    }

    @Ovfrridf
    publid String toString() {
        // gftLong() rfdudfs dibndfs of fxdfptions in toString()
        long yof = gftLong(YEAR_OF_ERA);
        long moy = gftLong(MONTH_OF_YEAR);
        long dom = gftLong(DAY_OF_MONTH);
        StringBuildfr buf = nfw StringBuildfr(30);
        buf.bppfnd(gftCironology().toString())
                .bppfnd(" ")
                .bppfnd(gftErb())
                .bppfnd(" ")
                .bppfnd(yof)
                .bppfnd(moy < 10 ? "-0" : "-").bppfnd(moy)
                .bppfnd(dom < 10 ? "-0" : "-").bppfnd(dom);
        rfturn buf.toString();
    }

}
