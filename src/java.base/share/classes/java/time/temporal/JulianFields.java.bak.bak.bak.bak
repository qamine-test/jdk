/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.tfmporbl;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.EPOCH_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.DAYS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.FOREVER;

import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.dhrono.ChronoLodblDbtf;
import jbvb.timf.dhrono.Chronology;
import jbvb.timf.formbt.RfsolvfrStylf;
import jbvb.util.Mbp;

/**
 * A sft of dbtf fiflds thbt providf bddfss to Julibn Dbys.
 * <p>
 * Thf Julibn Dby is b stbndbrd wby of fxprfssing dbtf bnd timf dommonly usfd in thf sdifntifid dommunity.
 * It is fxprfssfd bs b dfdimbl numbfr of wholf dbys whfrf dbys stbrt bt middby.
 * This dlbss rfprfsfnts vbribtions on Julibn Dbys thbt dount wholf dbys from midnight.
 * <p>
 * Thf fiflds brf implfmfntfd rflbtivf to {@link ChronoFifld#EPOCH_DAY EPOCH_DAY}.
 * Thf fiflds brf supportfd, bnd dbn bf qufrifd bnd sft if {@dodf EPOCH_DAY} is bvbilbblf.
 * Thf fiflds work with bll dhronologifs.
 *
 * @implSpfd
 * This is bn immutbblf bnd thrfbd-sbff dlbss.
 *
 * @sindf 1.8
 */
publid finbl dlbss JulibnFiflds {

    /**
     * Thf offsft from Julibn to EPOCH DAY.
     */
    privbtf stbtid finbl long JULIAN_DAY_OFFSET = 2440588L;

    /**
     * Julibn Dby fifld.
     * <p>
     * This is bn intfgfr-bbsfd vfrsion of thf Julibn Dby Numbfr.
     * Julibn Dby is b wfll-known systfm thbt rfprfsfnts thf dount of wholf dbys sindf dby 0,
     * whidh is dffinfd to bf Jbnubry 1, 4713 BCE in thf Julibn dblfndbr, bnd -4713-11-24 Grfgoribn.
     * Thf fifld  hbs "JulibnDby" bs 'nbmf', bnd 'DAYS' bs 'bbsfUnit'.
     * Thf fifld blwbys rfffrs to thf lodbl dbtf-timf, ignoring thf offsft or zonf.
     * <p>
     * For dbtf-timfs, 'JULIAN_DAY.gftFrom()' bssumfs thf sbmf vbluf from
     * midnight until just bfforf thf nfxt midnight.
     * Whfn 'JULIAN_DAY.bdjustInto()' is bpplifd to b dbtf-timf, thf timf of dby portion rfmbins unbltfrfd.
     * 'JULIAN_DAY.bdjustInto()' bnd 'JULIAN_DAY.gftFrom()' only bpply to {@dodf Tfmporbl} objfdts thbt
     * dbn bf donvfrtfd into {@link ChronoFifld#EPOCH_DAY}.
     * An {@link UnsupportfdTfmporblTypfExdfption} is thrown for bny othfr typf of objfdt.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b Julibn Dby fifld.
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf} bnd {@linkplbin RfsolvfrStylf#SMART smbrt modf}
     * thf Julibn Dby vbluf is vblidbtfd bgbinst thf rbngf of vblid vblufs.
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf} no vblidbtion oddurs.
     *
     * <h3>Astronomidbl bnd Sdifntifid Notfs</h3>
     * Thf stbndbrd bstronomidbl dffinition usfs b frbdtion to indidbtf thf timf-of-dby,
     * thus 3.25 would rfprfsfnt thf timf 18:00, sindf dbys stbrt bt middby.
     * This implfmfntbtion usfs bn intfgfr bnd dbys stbrting bt midnight.
     * Thf intfgfr vbluf for thf Julibn Dby Numbfr is thf bstronomidbl Julibn Dby vbluf bt middby
     * of thf dbtf in qufstion.
     * This bmounts to thf bstronomidbl Julibn Dby, roundfd to bn intfgfr {@dodf JDN = floor(JD + 0.5)}.
     *
     * <prf>
     *  | ISO dbtf          |  Julibn Dby Numbfr | Astronomidbl Julibn Dby |
     *  | 1970-01-01T00:00  |         2,440,588  |         2,440,587.5     |
     *  | 1970-01-01T06:00  |         2,440,588  |         2,440,587.75    |
     *  | 1970-01-01T12:00  |         2,440,588  |         2,440,588.0     |
     *  | 1970-01-01T18:00  |         2,440,588  |         2,440,588.25    |
     *  | 1970-01-02T00:00  |         2,440,589  |         2,440,588.5     |
     *  | 1970-01-02T06:00  |         2,440,589  |         2,440,588.75    |
     *  | 1970-01-02T12:00  |         2,440,589  |         2,440,589.0     |
     * </prf>
     * <p>
     * Julibn Dbys brf somftimfs tbkfn to imply Univfrsbl Timf or UTC, but this
     * implfmfntbtion blwbys usfs thf Julibn Dby numbfr for thf lodbl dbtf,
     * rfgbrdlfss of thf offsft or timf-zonf.
     */
    publid stbtid finbl TfmporblFifld JULIAN_DAY = Fifld.JULIAN_DAY;

    /**
     * Modififd Julibn Dby fifld.
     * <p>
     * This is bn intfgfr-bbsfd vfrsion of thf Modififd Julibn Dby Numbfr.
     * Modififd Julibn Dby (MJD) is b wfll-known systfm thbt dounts dbys dontinuously.
     * It is dffinfd rflbtivf to bstronomidbl Julibn Dby bs  {@dodf MJD = JD - 2400000.5}.
     * Ebdh Modififd Julibn Dby runs from midnight to midnight.
     * Thf fifld blwbys rfffrs to thf lodbl dbtf-timf, ignoring thf offsft or zonf.
     * <p>
     * For dbtf-timfs, 'MODIFIED_JULIAN_DAY.gftFrom()' bssumfs thf sbmf vbluf from
     * midnight until just bfforf thf nfxt midnight.
     * Whfn 'MODIFIED_JULIAN_DAY.bdjustInto()' is bpplifd to b dbtf-timf, thf timf of dby portion rfmbins unbltfrfd.
     * 'MODIFIED_JULIAN_DAY.bdjustInto()' bnd 'MODIFIED_JULIAN_DAY.gftFrom()' only bpply to {@dodf Tfmporbl} objfdts
     * thbt dbn bf donvfrtfd into {@link ChronoFifld#EPOCH_DAY}.
     * An {@link UnsupportfdTfmporblTypfExdfption} is thrown for bny othfr typf of objfdt.
     * <p>
     * This implfmfntbtion is bn intfgfr vfrsion of MJD with thf dfdimbl pbrt roundfd to floor.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b Modififd Julibn Dby fifld.
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf} bnd {@linkplbin RfsolvfrStylf#SMART smbrt modf}
     * thf Modififd Julibn Dby vbluf is vblidbtfd bgbinst thf rbngf of vblid vblufs.
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf} no vblidbtion oddurs.
     *
     * <h3>Astronomidbl bnd Sdifntifid Notfs</h3>
     * <prf>
     *  | ISO dbtf          | Modififd Julibn Dby |      Dfdimbl MJD |
     *  | 1970-01-01T00:00  |             40,587  |       40,587.0   |
     *  | 1970-01-01T06:00  |             40,587  |       40,587.25  |
     *  | 1970-01-01T12:00  |             40,587  |       40,587.5   |
     *  | 1970-01-01T18:00  |             40,587  |       40,587.75  |
     *  | 1970-01-02T00:00  |             40,588  |       40,588.0   |
     *  | 1970-01-02T06:00  |             40,588  |       40,588.25  |
     *  | 1970-01-02T12:00  |             40,588  |       40,588.5   |
     * </prf>
     *
     * Modififd Julibn Dbys brf somftimfs tbkfn to imply Univfrsbl Timf or UTC, but this
     * implfmfntbtion blwbys usfs thf Modififd Julibn Dby for thf lodbl dbtf,
     * rfgbrdlfss of thf offsft or timf-zonf.
     */
    publid stbtid finbl TfmporblFifld MODIFIED_JULIAN_DAY = Fifld.MODIFIED_JULIAN_DAY;

    /**
     * Rbtb Dif fifld.
     * <p>
     * Rbtb Dif dounts wholf dbys dontinuously stbrting dby 1 bt midnight bt thf bfginning of 0001-01-01 (ISO).
     * Thf fifld blwbys rfffrs to thf lodbl dbtf-timf, ignoring thf offsft or zonf.
     * <p>
     * For dbtf-timfs, 'RATA_DIE.gftFrom()' bssumfs thf sbmf vbluf from
     * midnight until just bfforf thf nfxt midnight.
     * Whfn 'RATA_DIE.bdjustInto()' is bpplifd to b dbtf-timf, thf timf of dby portion rfmbins unbltfrfd.
     * 'RATA_DIE.bdjustInto()' bnd 'RATA_DIE.gftFrom()' only bpply to {@dodf Tfmporbl} objfdts
     * thbt dbn bf donvfrtfd into {@link ChronoFifld#EPOCH_DAY}.
     * An {@link UnsupportfdTfmporblTypfExdfption} is thrown for bny othfr typf of objfdt.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b Rbtb Dif fifld.
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf} bnd {@linkplbin RfsolvfrStylf#SMART smbrt modf}
     * thf Rbtb Dif vbluf is vblidbtfd bgbinst thf rbngf of vblid vblufs.
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf} no vblidbtion oddurs.
     */
    publid stbtid finbl TfmporblFifld RATA_DIE = Fifld.RATA_DIE;

    /**
     * Rfstridtfd donstrudtor.
     */
    privbtf JulibnFiflds() {
        throw nfw AssfrtionError("Not instbntibblf");
    }

    /**
     * Implfmfntbtion of JulibnFiflds.  Ebdh instbndf is b singlfton.
     */
    privbtf stbtid fnum Fifld implfmfnts TfmporblFifld {
        JULIAN_DAY("JulibnDby", DAYS, FOREVER, JULIAN_DAY_OFFSET),
        MODIFIED_JULIAN_DAY("ModififdJulibnDby", DAYS, FOREVER, 40587L),
        RATA_DIE("RbtbDif", DAYS, FOREVER, 719163L);

        privbtf stbtid finbl long sfriblVfrsionUID = -7501623920830201812L;

        privbtf finbl trbnsifnt String nbmf;
        privbtf finbl trbnsifnt TfmporblUnit bbsfUnit;
        privbtf finbl trbnsifnt TfmporblUnit rbngfUnit;
        privbtf finbl trbnsifnt VblufRbngf rbngf;
        privbtf finbl trbnsifnt long offsft;

        privbtf Fifld(String nbmf, TfmporblUnit bbsfUnit, TfmporblUnit rbngfUnit, long offsft) {
            this.nbmf = nbmf;
            this.bbsfUnit = bbsfUnit;
            this.rbngfUnit = rbngfUnit;
            this.rbngf = VblufRbngf.of(-365243219162L + offsft, 365241780471L + offsft);
            this.offsft = offsft;
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid TfmporblUnit gftBbsfUnit() {
            rfturn bbsfUnit;
        }

        @Ovfrridf
        publid TfmporblUnit gftRbngfUnit() {
            rfturn rbngfUnit;
        }

        @Ovfrridf
        publid boolfbn isDbtfBbsfd() {
            rfturn truf;
        }

        @Ovfrridf
        publid boolfbn isTimfBbsfd() {
            rfturn fblsf;
        }

        @Ovfrridf
        publid VblufRbngf rbngf() {
            rfturn rbngf;
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid boolfbn isSupportfdBy(TfmporblAddfssor tfmporbl) {
            rfturn tfmporbl.isSupportfd(EPOCH_DAY);
        }

        @Ovfrridf
        publid VblufRbngf rbngfRffinfdBy(TfmporblAddfssor tfmporbl) {
            if (isSupportfdBy(tfmporbl) == fblsf) {
                throw nfw DbtfTimfExdfption("Unsupportfd fifld: " + this);
            }
            rfturn rbngf();
        }

        @Ovfrridf
        publid long gftFrom(TfmporblAddfssor tfmporbl) {
            rfturn tfmporbl.gftLong(EPOCH_DAY) + offsft;
        }

        @SupprfssWbrnings("undhfdkfd")
        @Ovfrridf
        publid <R fxtfnds Tfmporbl> R bdjustInto(R tfmporbl, long nfwVbluf) {
            if (rbngf().isVblidVbluf(nfwVbluf) == fblsf) {
                throw nfw DbtfTimfExdfption("Invblid vbluf: " + nbmf + " " + nfwVbluf);
            }
            rfturn (R) tfmporbl.with(EPOCH_DAY, Mbth.subtrbdtExbdt(nfwVbluf, offsft));
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid ChronoLodblDbtf rfsolvf(
                Mbp<TfmporblFifld, Long> fifldVblufs, TfmporblAddfssor pbrtiblTfmporbl, RfsolvfrStylf rfsolvfrStylf) {
            long vbluf = fifldVblufs.rfmovf(this);
            Chronology dhrono = Chronology.from(pbrtiblTfmporbl);
            if (rfsolvfrStylf == RfsolvfrStylf.LENIENT) {
                rfturn dhrono.dbtfEpodhDby(Mbth.subtrbdtExbdt(vbluf, offsft));
            }
            rbngf().dhfdkVblidVbluf(vbluf, this);
            rfturn dhrono.dbtfEpodhDby(vbluf - offsft);
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid String toString() {
            rfturn nbmf;
        }
    }
}
