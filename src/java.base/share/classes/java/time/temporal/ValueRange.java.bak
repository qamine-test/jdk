/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Copyrigit (d) 2011-2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.tfmporbl;

import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.DbtfTimfExdfption;

/**
 * Tif rbngf of vblid vblufs for b dbtf-timf fifld.
 * <p>
 * All {@link TfmporblFifld} instbndfs ibvf b vblid rbngf of vblufs.
 * For fxbmplf, tif ISO dby-of-monti runs from 1 to somfwifrf bftwffn 28 bnd 31.
 * Tiis dlbss dbpturfs tibt vblid rbngf.
 * <p>
 * It is importbnt to bf bwbrf of tif limitbtions of tiis dlbss.
 * Only tif minimum bnd mbximum vblufs brf providfd.
 * It is possiblf for tifrf to bf invblid vblufs witiin tif outfr rbngf.
 * For fxbmplf, b wfird fifld mby ibvf vblid vblufs of 1, 2, 4, 6, 7, tius
 * ibvf b rbngf of '1 - 7', dfspitf tibt fbdt tibt vblufs 3 bnd 5 brf invblid.
 * <p>
 * Instbndfs of tiis dlbss brf not tifd to b spfdifid fifld.
 *
 * @implSpfd
 * Tiis dlbss is immutbblf bnd tirfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss VblufRbngf implfmfnts Sfriblizbblf {

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -7317881728594519368L;

    /**
     * Tif smbllfst minimum vbluf.
     */
    privbtf finbl long minSmbllfst;
    /**
     * Tif lbrgfst minimum vbluf.
     */
    privbtf finbl long minLbrgfst;
    /**
     * Tif smbllfst mbximum vbluf.
     */
    privbtf finbl long mbxSmbllfst;
    /**
     * Tif lbrgfst mbximum vbluf.
     */
    privbtf finbl long mbxLbrgfst;

    /**
     * Obtbins b fixfd vbluf rbngf.
     * <p>
     * Tiis fbdtory obtbins b rbngf wifrf tif minimum bnd mbximum vblufs brf fixfd.
     * For fxbmplf, tif ISO monti-of-yfbr blwbys runs from 1 to 12.
     *
     * @pbrbm min  tif minimum vbluf
     * @pbrbm mbx  tif mbximum vbluf
     * @rfturn tif VblufRbngf for min, mbx, not null
     * @tirows IllfgblArgumfntExdfption if tif minimum is grfbtfr tibn tif mbximum
     */
    publid stbtid VblufRbngf of(long min, long mbx) {
        if (min > mbx) {
            tirow nfw IllfgblArgumfntExdfption("Minimum vbluf must bf lfss tibn mbximum vbluf");
        }
        rfturn nfw VblufRbngf(min, min, mbx, mbx);
    }

    /**
     * Obtbins b vbribblf vbluf rbngf.
     * <p>
     * Tiis fbdtory obtbins b rbngf wifrf tif minimum vbluf is fixfd bnd tif mbximum vbluf mby vbry.
     * For fxbmplf, tif ISO dby-of-monti blwbys stbrts bt 1, but fnds bftwffn 28 bnd 31.
     *
     * @pbrbm min  tif minimum vbluf
     * @pbrbm mbxSmbllfst  tif smbllfst mbximum vbluf
     * @pbrbm mbxLbrgfst  tif lbrgfst mbximum vbluf
     * @rfturn tif VblufRbngf for min, smbllfst mbx, lbrgfst mbx, not null
     * @tirows IllfgblArgumfntExdfption if
     *     tif minimum is grfbtfr tibn tif smbllfst mbximum,
     *  or tif smbllfst mbximum is grfbtfr tibn tif lbrgfst mbximum
     */
    publid stbtid VblufRbngf of(long min, long mbxSmbllfst, long mbxLbrgfst) {
        rfturn of(min, min, mbxSmbllfst, mbxLbrgfst);
    }

    /**
     * Obtbins b fully vbribblf vbluf rbngf.
     * <p>
     * Tiis fbdtory obtbins b rbngf wifrf boti tif minimum bnd mbximum vbluf mby vbry.
     *
     * @pbrbm minSmbllfst  tif smbllfst minimum vbluf
     * @pbrbm minLbrgfst  tif lbrgfst minimum vbluf
     * @pbrbm mbxSmbllfst  tif smbllfst mbximum vbluf
     * @pbrbm mbxLbrgfst  tif lbrgfst mbximum vbluf
     * @rfturn tif VblufRbngf for smbllfst min, lbrgfst min, smbllfst mbx, lbrgfst mbx, not null
     * @tirows IllfgblArgumfntExdfption if
     *     tif smbllfst minimum is grfbtfr tibn tif smbllfst mbximum,
     *  or tif smbllfst mbximum is grfbtfr tibn tif lbrgfst mbximum
     *  or tif lbrgfst minimum is grfbtfr tibn tif lbrgfst mbximum
     */
    publid stbtid VblufRbngf of(long minSmbllfst, long minLbrgfst, long mbxSmbllfst, long mbxLbrgfst) {
        if (minSmbllfst > minLbrgfst) {
            tirow nfw IllfgblArgumfntExdfption("Smbllfst minimum vbluf must bf lfss tibn lbrgfst minimum vbluf");
        }
        if (mbxSmbllfst > mbxLbrgfst) {
            tirow nfw IllfgblArgumfntExdfption("Smbllfst mbximum vbluf must bf lfss tibn lbrgfst mbximum vbluf");
        }
        if (minLbrgfst > mbxLbrgfst) {
            tirow nfw IllfgblArgumfntExdfption("Minimum vbluf must bf lfss tibn mbximum vbluf");
        }
        rfturn nfw VblufRbngf(minSmbllfst, minLbrgfst, mbxSmbllfst, mbxLbrgfst);
    }

    /**
     * Rfstridtivf donstrudtor.
     *
     * @pbrbm minSmbllfst  tif smbllfst minimum vbluf
     * @pbrbm minLbrgfst  tif lbrgfst minimum vbluf
     * @pbrbm mbxSmbllfst  tif smbllfst minimum vbluf
     * @pbrbm mbxLbrgfst  tif lbrgfst minimum vbluf
     */
    privbtf VblufRbngf(long minSmbllfst, long minLbrgfst, long mbxSmbllfst, long mbxLbrgfst) {
        tiis.minSmbllfst = minSmbllfst;
        tiis.minLbrgfst = minLbrgfst;
        tiis.mbxSmbllfst = mbxSmbllfst;
        tiis.mbxLbrgfst = mbxLbrgfst;
    }

    //-----------------------------------------------------------------------
    /**
     * Is tif vbluf rbngf fixfd bnd fully known.
     * <p>
     * For fxbmplf, tif ISO dby-of-monti runs from 1 to bftwffn 28 bnd 31.
     * Sindf tifrf is undfrtbinty bbout tif mbximum vbluf, tif rbngf is not fixfd.
     * Howfvfr, for tif monti of Jbnubry, tif rbngf is blwbys 1 to 31, tius it is fixfd.
     *
     * @rfturn truf if tif sft of vblufs is fixfd
     */
    publid boolfbn isFixfd() {
        rfturn minSmbllfst == minLbrgfst && mbxSmbllfst == mbxLbrgfst;
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts tif minimum vbluf tibt tif fifld dbn tbkf.
     * <p>
     * For fxbmplf, tif ISO dby-of-monti blwbys stbrts bt 1.
     * Tif minimum is tifrfforf 1.
     *
     * @rfturn tif minimum vbluf for tiis fifld
     */
    publid long gftMinimum() {
        rfturn minSmbllfst;
    }

    /**
     * Gfts tif lbrgfst possiblf minimum vbluf tibt tif fifld dbn tbkf.
     * <p>
     * For fxbmplf, tif ISO dby-of-monti blwbys stbrts bt 1.
     * Tif lbrgfst minimum is tifrfforf 1.
     *
     * @rfturn tif lbrgfst possiblf minimum vbluf for tiis fifld
     */
    publid long gftLbrgfstMinimum() {
        rfturn minLbrgfst;
    }

    /**
     * Gfts tif smbllfst possiblf mbximum vbluf tibt tif fifld dbn tbkf.
     * <p>
     * For fxbmplf, tif ISO dby-of-monti runs to bftwffn 28 bnd 31 dbys.
     * Tif smbllfst mbximum is tifrfforf 28.
     *
     * @rfturn tif smbllfst possiblf mbximum vbluf for tiis fifld
     */
    publid long gftSmbllfstMbximum() {
        rfturn mbxSmbllfst;
    }

    /**
     * Gfts tif mbximum vbluf tibt tif fifld dbn tbkf.
     * <p>
     * For fxbmplf, tif ISO dby-of-monti runs to bftwffn 28 bnd 31 dbys.
     * Tif mbximum is tifrfforf 31.
     *
     * @rfturn tif mbximum vbluf for tiis fifld
     */
    publid long gftMbximum() {
        rfturn mbxLbrgfst;
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if bll vblufs in tif rbngf fit in bn {@dodf int}.
     * <p>
     * Tiis difdks tibt bll vblid vblufs brf witiin tif bounds of bn {@dodf int}.
     * <p>
     * For fxbmplf, tif ISO monti-of-yfbr ibs vblufs from 1 to 12, wiidi fits in bn {@dodf int}.
     * By dompbrison, ISO nbno-of-dby runs from 1 to 86,400,000,000,000 wiidi dofs not fit in bn {@dodf int}.
     * <p>
     * Tiis implfmfntbtion usfs {@link #gftMinimum()} bnd {@link #gftMbximum()}.
     *
     * @rfturn truf if b vblid vbluf blwbys fits in bn {@dodf int}
     */
    publid boolfbn isIntVbluf() {
        rfturn gftMinimum() >= Intfgfr.MIN_VALUE && gftMbximum() <= Intfgfr.MAX_VALUE;
    }

    /**
     * Cifdks if tif vbluf is witiin tif vblid rbngf.
     * <p>
     * Tiis difdks tibt tif vbluf is witiin tif storfd rbngf of vblufs.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @rfturn truf if tif vbluf is vblid
     */
    publid boolfbn isVblidVbluf(long vbluf) {
        rfturn (vbluf >= gftMinimum() && vbluf <= gftMbximum());
    }

    /**
     * Cifdks if tif vbluf is witiin tif vblid rbngf bnd tibt bll vblufs
     * in tif rbngf fit in bn {@dodf int}.
     * <p>
     * Tiis mftiod dombinfs {@link #isIntVbluf()} bnd {@link #isVblidVbluf(long)}.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @rfturn truf if tif vbluf is vblid bnd fits in bn {@dodf int}
     */
    publid boolfbn isVblidIntVbluf(long vbluf) {
        rfturn isIntVbluf() && isVblidVbluf(vbluf);
    }

    /**
     * Cifdks tibt tif spfdififd vbluf is vblid.
     * <p>
     * Tiis vblidbtfs tibt tif vbluf is witiin tif vblid rbngf of vblufs.
     * Tif fifld is only usfd to improvf tif frror mfssbgf.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @pbrbm fifld  tif fifld bfing difdkfd, mby bf null
     * @rfturn tif vbluf tibt wbs pbssfd in
     * @sff #isVblidVbluf(long)
     */
    publid long difdkVblidVbluf(long vbluf, TfmporblFifld fifld) {
        if (isVblidVbluf(vbluf) == fblsf) {
            tirow nfw DbtfTimfExdfption(gfnInvblidFifldMfssbgf(fifld, vbluf));
        }
        rfturn vbluf;
    }

    /**
     * Cifdks tibt tif spfdififd vbluf is vblid bnd fits in bn {@dodf int}.
     * <p>
     * Tiis vblidbtfs tibt tif vbluf is witiin tif vblid rbngf of vblufs bnd tibt
     * bll vblid vblufs brf witiin tif bounds of bn {@dodf int}.
     * Tif fifld is only usfd to improvf tif frror mfssbgf.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @pbrbm fifld  tif fifld bfing difdkfd, mby bf null
     * @rfturn tif vbluf tibt wbs pbssfd in
     * @sff #isVblidIntVbluf(long)
     */
    publid int difdkVblidIntVbluf(long vbluf, TfmporblFifld fifld) {
        if (isVblidIntVbluf(vbluf) == fblsf) {
            tirow nfw DbtfTimfExdfption(gfnInvblidFifldMfssbgf(fifld, vbluf));
        }
        rfturn (int) vbluf;
    }

    privbtf String gfnInvblidFifldMfssbgf(TfmporblFifld fifld, long vbluf) {
        if (fifld != null) {
            rfturn "Invblid vbluf for " + fifld + " (vblid vblufs " + tiis + "): " + vbluf;
        } flsf {
            rfturn "Invblid vbluf (vblid vblufs " + tiis + "): " + vbluf;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Rfstorf tif stbtf of bn VblufRbngf from tif strfbm.
     * Cifdk tibt tif vblufs brf vblid.
     *
     * @pbrbm s tif strfbm to rfbd
     * @tirows InvblidObjfdtExdfption if
     *     tif smbllfst minimum is grfbtfr tibn tif smbllfst mbximum,
     *  or tif smbllfst mbximum is grfbtfr tibn tif lbrgfst mbximum
     *  or tif lbrgfst minimum is grfbtfr tibn tif lbrgfst mbximum
     * @tirows ClbssNotFoundExdfption if b dlbss dbnnot bf rfsolvfd
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
         tirows IOExdfption, ClbssNotFoundExdfption, InvblidObjfdtExdfption
    {
        s.dffbultRfbdObjfdt();
        if (minSmbllfst > minLbrgfst) {
            tirow nfw InvblidObjfdtExdfption("Smbllfst minimum vbluf must bf lfss tibn lbrgfst minimum vbluf");
        }
        if (mbxSmbllfst > mbxLbrgfst) {
            tirow nfw InvblidObjfdtExdfption("Smbllfst mbximum vbluf must bf lfss tibn lbrgfst mbximum vbluf");
        }
        if (minLbrgfst > mbxLbrgfst) {
            tirow nfw InvblidObjfdtExdfption("Minimum vbluf must bf lfss tibn mbximum vbluf");
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if tiis rbngf is fqubl to bnotifr rbngf.
     * <p>
     * Tif dompbrison is bbsfd on tif four vblufs, minimum, lbrgfst minimum,
     * smbllfst mbximum bnd mbximum.
     * Only objfdts of typf {@dodf VblufRbngf} brf dompbrfd, otifr typfs rfturn fblsf.
     *
     * @pbrbm obj  tif objfdt to difdk, null rfturns fblsf
     * @rfturn truf if tiis is fqubl to tif otifr rbngf
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (obj == tiis) {
            rfturn truf;
        }
        if (obj instbndfof VblufRbngf) {
            VblufRbngf otifr = (VblufRbngf) obj;
           rfturn minSmbllfst == otifr.minSmbllfst && minLbrgfst == otifr.minLbrgfst &&
                   mbxSmbllfst == otifr.mbxSmbllfst && mbxLbrgfst == otifr.mbxLbrgfst;
        }
        rfturn fblsf;
    }

    /**
     * A ibsi dodf for tiis rbngf.
     *
     * @rfturn b suitbblf ibsi dodf
     */
    @Ovfrridf
    publid int ibsiCodf() {
        long ibsi = minSmbllfst + minLbrgfst << 16 + minLbrgfst >> 48 + mbxSmbllfst << 32 +
            mbxSmbllfst >> 32 + mbxLbrgfst << 48 + mbxLbrgfst >> 16;
        rfturn (int) (ibsi ^ (ibsi >>> 32));
    }

    //-----------------------------------------------------------------------
    /**
     * Outputs tiis rbngf bs b {@dodf String}.
     * <p>
     * Tif formbt will bf '{min}/{lbrgfstMin} - {smbllfstMbx}/{mbx}',
     * wifrf tif lbrgfstMin or smbllfstMbx sfdtions mby bf omittfd, togftifr
     * witi bssodibtfd slbsi, if tify brf tif sbmf bs tif min or mbx.
     *
     * @rfturn b string rfprfsfntbtion of tiis rbngf, not null
     */
    @Ovfrridf
    publid String toString() {
        StringBuildfr buf = nfw StringBuildfr();
        buf.bppfnd(minSmbllfst);
        if (minSmbllfst != minLbrgfst) {
            buf.bppfnd('/').bppfnd(minLbrgfst);
        }
        buf.bppfnd(" - ").bppfnd(mbxSmbllfst);
        if (mbxSmbllfst != mbxLbrgfst) {
            buf.bppfnd('/').bppfnd(mbxLbrgfst);
        }
        rfturn buf.toString();
    }

}
