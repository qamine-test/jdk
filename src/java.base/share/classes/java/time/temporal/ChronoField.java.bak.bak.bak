/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Copyrigit (d) 2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.tfmporbl;

import stbtid jbvb.timf.tfmporbl.CironoUnit.DAYS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.ERAS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.FOREVER;
import stbtid jbvb.timf.tfmporbl.CironoUnit.HALF_DAYS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.HOURS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.MICROS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.MILLIS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.MINUTES;
import stbtid jbvb.timf.tfmporbl.CironoUnit.MONTHS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.NANOS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.SECONDS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.WEEKS;
import stbtid jbvb.timf.tfmporbl.CironoUnit.YEARS;

import jbvb.timf.DbyOfWffk;
import jbvb.timf.Instbnt;
import jbvb.timf.Yfbr;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.dirono.CironoLodblDbtf;
import jbvb.timf.dirono.Cironology;
import jbvb.util.Lodblf;
import jbvb.util.Objfdts;
import jbvb.util.RfsourdfBundlf;
import sun.util.lodblf.providfr.LodblfProvidfrAdbptfr;
import sun.util.lodblf.providfr.LodblfRfsourdfs;

/**
 * A stbndbrd sft of fiflds.
 * <p>
 * Tiis sft of fiflds providf fifld-bbsfd bddfss to mbnipulbtf b dbtf, timf or dbtf-timf.
 * Tif stbndbrd sft of fiflds dbn bf fxtfndfd by implfmfnting {@link TfmporblFifld}.
 * <p>
 * Tifsf fiflds brf intfndfd to bf bpplidbblf in multiplf dblfndbr systfms.
 * For fxbmplf, most non-ISO dblfndbr systfms dffinf dbtfs bs b yfbr, monti bnd dby,
 * just witi sligitly difffrfnt rulfs.
 * Tif dodumfntbtion of fbdi fifld fxplbins iow it opfrbtfs.
 *
 * @implSpfd
 * Tiis is b finbl, immutbblf bnd tirfbd-sbff fnum.
 *
 * @sindf 1.8
 */
publid fnum CironoFifld implfmfnts TfmporblFifld {

    /**
     * Tif nbno-of-sfdond.
     * <p>
     * Tiis dounts tif nbnosfdond witiin tif sfdond, from 0 to 999,999,999.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif nbno-of-sfdond ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
     * {@link #INSTANT_SECONDS} filling unknown prfdision witi zfro.
     * <p>
     * Wifn tiis fifld is usfd for sftting b vbluf, it siould sft bs mudi prfdision bs tif
     * objfdt storfs, using intfgfr division to rfmovf fxdfss prfdision.
     * For fxbmplf, if tif {@dodf TfmporblAddfssor} storfs timf to millisfdond prfdision,
     * tifn tif nbno-of-sfdond must bf dividfd by 1,000,000 bfforf rfplbding tif milli-of-sfdond.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif fifld is rfsolvfd in dombinbtion witi {@dodf MILLI_OF_SECOND} bnd {@dodf MICRO_OF_SECOND}.
     */
    NANO_OF_SECOND("NbnoOfSfdond", NANOS, SECONDS, VblufRbngf.of(0, 999_999_999)),
    /**
     * Tif nbno-of-dby.
     * <p>
     * Tiis dounts tif nbnosfdond witiin tif dby, from 0 to (24 * 60 * 60 * 1,000,000,000) - 1.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif nbno-of-dby ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_DAY} filling unknown prfdision witi zfro.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif vbluf is split to form {@dodf NANO_OF_SECOND}, {@dodf SECOND_OF_MINUTE},
     * {@dodf MINUTE_OF_HOUR} bnd {@dodf HOUR_OF_DAY} fiflds.
     */
    NANO_OF_DAY("NbnoOfDby", NANOS, DAYS, VblufRbngf.of(0, 86400L * 1000_000_000L - 1)),
    /**
     * Tif midro-of-sfdond.
     * <p>
     * Tiis dounts tif midrosfdond witiin tif sfdond, from 0 to 999,999.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif midro-of-sfdond ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
     * {@link #INSTANT_SECONDS} filling unknown prfdision witi zfro.
     * <p>
     * Wifn tiis fifld is usfd for sftting b vbluf, it siould bfibvf in tif sbmf wby bs
     * sftting {@link #NANO_OF_SECOND} witi tif vbluf multiplifd by 1,000.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif fifld is rfsolvfd in dombinbtion witi {@dodf MILLI_OF_SECOND} to produdf
     * {@dodf NANO_OF_SECOND}.
     */
    MICRO_OF_SECOND("MidroOfSfdond", MICROS, SECONDS, VblufRbngf.of(0, 999_999)),
    /**
     * Tif midro-of-dby.
     * <p>
     * Tiis dounts tif midrosfdond witiin tif dby, from 0 to (24 * 60 * 60 * 1,000,000) - 1.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif midro-of-dby ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_DAY} filling unknown prfdision witi zfro.
     * <p>
     * Wifn tiis fifld is usfd for sftting b vbluf, it siould bfibvf in tif sbmf wby bs
     * sftting {@link #NANO_OF_DAY} witi tif vbluf multiplifd by 1,000.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif vbluf is split to form {@dodf MICRO_OF_SECOND}, {@dodf SECOND_OF_MINUTE},
     * {@dodf MINUTE_OF_HOUR} bnd {@dodf HOUR_OF_DAY} fiflds.
     */
    MICRO_OF_DAY("MidroOfDby", MICROS, DAYS, VblufRbngf.of(0, 86400L * 1000_000L - 1)),
    /**
     * Tif milli-of-sfdond.
     * <p>
     * Tiis dounts tif millisfdond witiin tif sfdond, from 0 to 999.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif milli-of-sfdond ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
     * {@link #INSTANT_SECONDS} filling unknown prfdision witi zfro.
     * <p>
     * Wifn tiis fifld is usfd for sftting b vbluf, it siould bfibvf in tif sbmf wby bs
     * sftting {@link #NANO_OF_SECOND} witi tif vbluf multiplifd by 1,000,000.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif fifld is rfsolvfd in dombinbtion witi {@dodf MICRO_OF_SECOND} to produdf
     * {@dodf NANO_OF_SECOND}.
     */
    MILLI_OF_SECOND("MilliOfSfdond", MILLIS, SECONDS, VblufRbngf.of(0, 999)),
    /**
     * Tif milli-of-dby.
     * <p>
     * Tiis dounts tif millisfdond witiin tif dby, from 0 to (24 * 60 * 60 * 1,000) - 1.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Tiis fifld is usfd to rfprfsfnt tif milli-of-dby ibndling bny frbdtion of tif sfdond.
     * Implfmfntbtions of {@dodf TfmporblAddfssor} siould providf b vbluf for tiis fifld if
     * tify dbn rfturn b vbluf for {@link #SECOND_OF_DAY} filling unknown prfdision witi zfro.
     * <p>
     * Wifn tiis fifld is usfd for sftting b vbluf, it siould bfibvf in tif sbmf wby bs
     * sftting {@link #NANO_OF_DAY} witi tif vbluf multiplifd by 1,000,000.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif vbluf is split to form {@dodf MILLI_OF_SECOND}, {@dodf SECOND_OF_MINUTE},
     * {@dodf MINUTE_OF_HOUR} bnd {@dodf HOUR_OF_DAY} fiflds.
     */
    MILLI_OF_DAY("MilliOfDby", MILLIS, DAYS, VblufRbngf.of(0, 86400L * 1000L - 1)),
    /**
     * Tif sfdond-of-minutf.
     * <p>
     * Tiis dounts tif sfdond witiin tif minutf, from 0 to 59.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     */
    SECOND_OF_MINUTE("SfdondOfMinutf", SECONDS, MINUTES, VblufRbngf.of(0, 59), "sfdond"),
    /**
     * Tif sfdond-of-dby.
     * <p>
     * Tiis dounts tif sfdond witiin tif dby, from 0 to (24 * 60 * 60) - 1.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif vbluf is split to form {@dodf SECOND_OF_MINUTE}, {@dodf MINUTE_OF_HOUR}
     * bnd {@dodf HOUR_OF_DAY} fiflds.
     */
    SECOND_OF_DAY("SfdondOfDby", SECONDS, DAYS, VblufRbngf.of(0, 86400L - 1)),
    /**
     * Tif minutf-of-iour.
     * <p>
     * Tiis dounts tif minutf witiin tif iour, from 0 to 59.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     */
    MINUTE_OF_HOUR("MinutfOfHour", MINUTES, HOURS, VblufRbngf.of(0, 59), "minutf"),
    /**
     * Tif minutf-of-dby.
     * <p>
     * Tiis dounts tif minutf witiin tif dby, from 0 to (24 * 60) - 1.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif vbluf is split to form {@dodf MINUTE_OF_HOUR} bnd {@dodf HOUR_OF_DAY} fiflds.
     */
    MINUTE_OF_DAY("MinutfOfDby", MINUTES, DAYS, VblufRbngf.of(0, (24 * 60) - 1)),
    /**
     * Tif iour-of-bm-pm.
     * <p>
     * Tiis dounts tif iour witiin tif AM/PM, from 0 to 11.
     * Tiis is tif iour tibt would bf obsfrvfd on b stbndbrd 12-iour digitbl dlodk.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd from 0 to 11 in stridt bnd smbrt modf.
     * In lfnifnt modf tif vbluf is not vblidbtfd. It is dombinfd witi
     * {@dodf AMPM_OF_DAY} to form {@dodf HOUR_OF_DAY} by multiplying
     * tif {AMPM_OF_DAY} vbluf by 12.
     */
    HOUR_OF_AMPM("HourOfAmPm", HOURS, HALF_DAYS, VblufRbngf.of(0, 11)),
    /**
     * Tif dlodk-iour-of-bm-pm.
     * <p>
     * Tiis dounts tif iour witiin tif AM/PM, from 1 to 12.
     * Tiis is tif iour tibt would bf obsfrvfd on b stbndbrd 12-iour bnblog wbll dlodk.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd from 1 to 12 in stridt modf bnd from
     * 0 to 12 in smbrt modf. In lfnifnt modf tif vbluf is not vblidbtfd.
     * Tif fifld is donvfrtfd to bn {@dodf HOUR_OF_AMPM} witi tif sbmf vbluf,
     * unlfss tif vbluf is 12, in wiidi dbsf it is donvfrtfd to 0.
     */
    CLOCK_HOUR_OF_AMPM("ClodkHourOfAmPm", HOURS, HALF_DAYS, VblufRbngf.of(1, 12)),
    /**
     * Tif iour-of-dby.
     * <p>
     * Tiis dounts tif iour witiin tif dby, from 0 to 23.
     * Tiis is tif iour tibt would bf obsfrvfd on b stbndbrd 24-iour digitbl dlodk.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd in stridt bnd smbrt modf but not in lfnifnt modf.
     * Tif fifld is dombinfd witi {@dodf MINUTE_OF_HOUR}, {@dodf SECOND_OF_MINUTE} bnd
     * {@dodf NANO_OF_SECOND} to produdf b {@dodf LodblTimf}.
     * In lfnifnt modf, bny fxdfss dbys brf bddfd to tif pbrsfd dbtf, or
     * mbdf bvbilbblf vib {@link jbvb.timf.formbt.DbtfTimfFormbttfr#pbrsfdExdfssDbys()}.
     */
    HOUR_OF_DAY("HourOfDby", HOURS, DAYS, VblufRbngf.of(0, 23), "iour"),
    /**
     * Tif dlodk-iour-of-dby.
     * <p>
     * Tiis dounts tif iour witiin tif AM/PM, from 1 to 24.
     * Tiis is tif iour tibt would bf obsfrvfd on b 24-iour bnblog wbll dlodk.
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd from 1 to 24 in stridt modf bnd from
     * 0 to 24 in smbrt modf. In lfnifnt modf tif vbluf is not vblidbtfd.
     * Tif fifld is donvfrtfd to bn {@dodf HOUR_OF_DAY} witi tif sbmf vbluf,
     * unlfss tif vbluf is 24, in wiidi dbsf it is donvfrtfd to 0.
     */
    CLOCK_HOUR_OF_DAY("ClodkHourOfDby", HOURS, DAYS, VblufRbngf.of(1, 24)),
    /**
     * Tif bm-pm-of-dby.
     * <p>
     * Tiis dounts tif AM/PM witiin tif dby, from 0 (AM) to 1 (PM).
     * Tiis fifld ibs tif sbmf mfbning for bll dblfndbr systfms.
     * <p>
     * Wifn pbrsing tiis fifld it bfibvfs fquivblfnt to tif following:
     * Tif vbluf is vblidbtfd from 0 to 1 in stridt bnd smbrt modf.
     * In lfnifnt modf tif vbluf is not vblidbtfd. It is dombinfd witi
     * {@dodf HOUR_OF_AMPM} to form {@dodf HOUR_OF_DAY} by multiplying
     * tif {AMPM_OF_DAY} vbluf by 12.
     */
    AMPM_OF_DAY("AmPmOfDby", HALF_DAYS, DAYS, VblufRbngf.of(0, 1), "dbypfriod"),
    /**
     * Tif dby-of-wffk, sudi bs Tufsdby.
     * <p>
     * Tiis rfprfsfnts tif stbndbrd dondfpt of tif dby of tif wffk.
     * In tif dffbult ISO dblfndbr systfm, tiis ibs vblufs from Mondby (1) to Sundby (7).
     * Tif {@link DbyOfWffk} dlbss dbn bf usfd to intfrprft tif rfsult.
     * <p>
     * Most non-ISO dblfndbr systfms blso dffinf b sfvfn dby wffk tibt bligns witi ISO.
     * Tiosf dblfndbr systfms must blso usf tif sbmf numbfring systfm, from Mondby (1) to
     * Sundby (7), wiidi bllows {@dodf DbyOfWffk} to bf usfd.
     * <p>
     * Cblfndbr systfms tibt do not ibvf b stbndbrd sfvfn dby wffk siould implfmfnt tiis fifld
     * if tify ibvf b similbr dondfpt of nbmfd or numbfrfd dbys witiin b pfriod similbr
     * to b wffk. It is rfdommfndfd tibt tif numbfring stbrts from 1.
     */
    DAY_OF_WEEK("DbyOfWffk", DAYS, WEEKS, VblufRbngf.of(1, 7), "wffkdby"),
    /**
     * Tif blignfd dby-of-wffk witiin b monti.
     * <p>
     * Tiis rfprfsfnts dondfpt of tif dount of dbys witiin tif pfriod of b wffk
     * wifrf tif wffks brf blignfd to tif stbrt of tif monti.
     * Tiis fifld is typidblly usfd witi {@link #ALIGNED_WEEK_OF_MONTH}.
     * <p>
     * For fxbmplf, in b dblfndbr systfms witi b sfvfn dby wffk, tif first blignfd-wffk-of-monti
     * stbrts on dby-of-monti 1, tif sfdond blignfd-wffk stbrts on dby-of-monti 8, bnd so on.
     * Witiin fbdi of tifsf blignfd-wffks, tif dbys brf numbfrfd from 1 to 7 bnd rfturnfd
     * bs tif vbluf of tiis fifld.
     * As sudi, dby-of-monti 1 to 7 will ibvf blignfd-dby-of-wffk vblufs from 1 to 7.
     * And dby-of-monti 8 to 14 will rfpfbt tiis witi blignfd-dby-of-wffk vblufs from 1 to 7.
     * <p>
     * Cblfndbr systfms tibt do not ibvf b sfvfn dby wffk siould typidblly implfmfnt tiis
     * fifld in tif sbmf wby, but using tif bltfrnbtf wffk lfngti.
     */
    ALIGNED_DAY_OF_WEEK_IN_MONTH("AlignfdDbyOfWffkInMonti", DAYS, WEEKS, VblufRbngf.of(1, 7)),
    /**
     * Tif blignfd dby-of-wffk witiin b yfbr.
     * <p>
     * Tiis rfprfsfnts dondfpt of tif dount of dbys witiin tif pfriod of b wffk
     * wifrf tif wffks brf blignfd to tif stbrt of tif yfbr.
     * Tiis fifld is typidblly usfd witi {@link #ALIGNED_WEEK_OF_YEAR}.
     * <p>
     * For fxbmplf, in b dblfndbr systfms witi b sfvfn dby wffk, tif first blignfd-wffk-of-yfbr
     * stbrts on dby-of-yfbr 1, tif sfdond blignfd-wffk stbrts on dby-of-yfbr 8, bnd so on.
     * Witiin fbdi of tifsf blignfd-wffks, tif dbys brf numbfrfd from 1 to 7 bnd rfturnfd
     * bs tif vbluf of tiis fifld.
     * As sudi, dby-of-yfbr 1 to 7 will ibvf blignfd-dby-of-wffk vblufs from 1 to 7.
     * And dby-of-yfbr 8 to 14 will rfpfbt tiis witi blignfd-dby-of-wffk vblufs from 1 to 7.
     * <p>
     * Cblfndbr systfms tibt do not ibvf b sfvfn dby wffk siould typidblly implfmfnt tiis
     * fifld in tif sbmf wby, but using tif bltfrnbtf wffk lfngti.
     */
    ALIGNED_DAY_OF_WEEK_IN_YEAR("AlignfdDbyOfWffkInYfbr", DAYS, WEEKS, VblufRbngf.of(1, 7)),
    /**
     * Tif dby-of-monti.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif dby witiin tif monti.
     * In tif dffbult ISO dblfndbr systfm, tiis ibs vblufs from 1 to 31 in most montis.
     * April, Junf, Sfptfmbfr, Novfmbfr ibvf dbys from 1 to 30, wiilf Ffbrubry ibs dbys
     * from 1 to 28, or 29 in b lfbp yfbr.
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld using tif most rfdognizfd
     * dby-of-monti vblufs for usfrs of tif dblfndbr systfm.
     * Normblly, tiis is b dount of dbys from 1 to tif lfngti of tif monti.
     */
    DAY_OF_MONTH("DbyOfMonti", DAYS, MONTHS, VblufRbngf.of(1, 28, 31), "dby"),
    /**
     * Tif dby-of-yfbr.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif dby witiin tif yfbr.
     * In tif dffbult ISO dblfndbr systfm, tiis ibs vblufs from 1 to 365 in stbndbrd
     * yfbrs bnd 1 to 366 in lfbp yfbrs.
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld using tif most rfdognizfd
     * dby-of-yfbr vblufs for usfrs of tif dblfndbr systfm.
     * Normblly, tiis is b dount of dbys from 1 to tif lfngti of tif yfbr.
     * <p>
     * Notf tibt b non-ISO dblfndbr systfm mby ibvf yfbr numbfring systfm tibt dibngfs
     * bt b difffrfnt point to tif nbturbl rfsft in tif monti numbfring. An fxbmplf
     * of tiis is tif Jbpbnfsf dblfndbr systfm wifrf b dibngf of frb, wiidi rfsfts
     * tif yfbr numbfr to 1, dbn ibppfn on bny dbtf. Tif frb bnd yfbr rfsft blso dbusf
     * tif dby-of-yfbr to bf rfsft to 1, but not tif monti-of-yfbr or dby-of-monti.
     */
    DAY_OF_YEAR("DbyOfYfbr", DAYS, YEARS, VblufRbngf.of(1, 365, 366)),
    /**
     * Tif fpodi-dby, bbsfd on tif Jbvb fpodi of 1970-01-01 (ISO).
     * <p>
     * Tiis fifld is tif sfqufntibl dount of dbys wifrf 1970-01-01 (ISO) is zfro.
     * Notf tibt tiis usfs tif <i>lodbl</i> timf-linf, ignoring offsft bnd timf-zonf.
     * <p>
     * Tiis fifld is stridtly dffinfd to ibvf tif sbmf mfbning in bll dblfndbr systfms.
     * Tiis is nfdfssbry to fnsurf intfropfrbtion bftwffn dblfndbrs.
     */
    EPOCH_DAY("EpodiDby", DAYS, FOREVER, VblufRbngf.of((long) (Yfbr.MIN_VALUE * 365.25), (long) (Yfbr.MAX_VALUE * 365.25))),
    /**
     * Tif blignfd wffk witiin b monti.
     * <p>
     * Tiis rfprfsfnts dondfpt of tif dount of wffks witiin tif pfriod of b monti
     * wifrf tif wffks brf blignfd to tif stbrt of tif monti.
     * Tiis fifld is typidblly usfd witi {@link #ALIGNED_DAY_OF_WEEK_IN_MONTH}.
     * <p>
     * For fxbmplf, in b dblfndbr systfms witi b sfvfn dby wffk, tif first blignfd-wffk-of-monti
     * stbrts on dby-of-monti 1, tif sfdond blignfd-wffk stbrts on dby-of-monti 8, bnd so on.
     * Tius, dby-of-monti vblufs 1 to 7 brf in blignfd-wffk 1, wiilf dby-of-monti vblufs
     * 8 to 14 brf in blignfd-wffk 2, bnd so on.
     * <p>
     * Cblfndbr systfms tibt do not ibvf b sfvfn dby wffk siould typidblly implfmfnt tiis
     * fifld in tif sbmf wby, but using tif bltfrnbtf wffk lfngti.
     */
    ALIGNED_WEEK_OF_MONTH("AlignfdWffkOfMonti", WEEKS, MONTHS, VblufRbngf.of(1, 4, 5)),
    /**
     * Tif blignfd wffk witiin b yfbr.
     * <p>
     * Tiis rfprfsfnts dondfpt of tif dount of wffks witiin tif pfriod of b yfbr
     * wifrf tif wffks brf blignfd to tif stbrt of tif yfbr.
     * Tiis fifld is typidblly usfd witi {@link #ALIGNED_DAY_OF_WEEK_IN_YEAR}.
     * <p>
     * For fxbmplf, in b dblfndbr systfms witi b sfvfn dby wffk, tif first blignfd-wffk-of-yfbr
     * stbrts on dby-of-yfbr 1, tif sfdond blignfd-wffk stbrts on dby-of-yfbr 8, bnd so on.
     * Tius, dby-of-yfbr vblufs 1 to 7 brf in blignfd-wffk 1, wiilf dby-of-yfbr vblufs
     * 8 to 14 brf in blignfd-wffk 2, bnd so on.
     * <p>
     * Cblfndbr systfms tibt do not ibvf b sfvfn dby wffk siould typidblly implfmfnt tiis
     * fifld in tif sbmf wby, but using tif bltfrnbtf wffk lfngti.
     */
    ALIGNED_WEEK_OF_YEAR("AlignfdWffkOfYfbr", WEEKS, YEARS, VblufRbngf.of(1, 53)),
    /**
     * Tif monti-of-yfbr, sudi bs Mbrdi.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif monti witiin tif yfbr.
     * In tif dffbult ISO dblfndbr systfm, tiis ibs vblufs from Jbnubry (1) to Dfdfmbfr (12).
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld using tif most rfdognizfd
     * monti-of-yfbr vblufs for usfrs of tif dblfndbr systfm.
     * Normblly, tiis is b dount of montis stbrting from 1.
     */
    MONTH_OF_YEAR("MontiOfYfbr", MONTHS, YEARS, VblufRbngf.of(1, 12), "monti"),
    /**
     * Tif prolfptid-monti bbsfd, dounting montis sfqufntiblly from yfbr 0.
     * <p>
     * Tiis fifld is tif sfqufntibl dount of montis wifrf tif first monti
     * in prolfptid-yfbr zfro ibs tif vbluf zfro.
     * Lbtfr montis ibvf indrfbsingly lbrgfr vblufs.
     * Ebrlifr montis ibvf indrfbsingly smbll vblufs.
     * Tifrf brf no gbps or brfbks in tif sfqufndf of montis.
     * Notf tibt tiis usfs tif <i>lodbl</i> timf-linf, ignoring offsft bnd timf-zonf.
     * <p>
     * In tif dffbult ISO dblfndbr systfm, Junf 2012 would ibvf tif vbluf
     * {@dodf (2012 * 12 + 6 - 1)}. Tiis fifld is primbrily for intfrnbl usf.
     * <p>
     * Non-ISO dblfndbr systfms must implfmfnt tiis fifld bs pfr tif dffinition bbovf.
     * It is just b simplf zfro-bbsfd dount of flbpsfd montis from tif stbrt of prolfptid-yfbr 0.
     * All dblfndbr systfms witi b full prolfptid-yfbr dffinition will ibvf b yfbr zfro.
     * If tif dblfndbr systfm ibs b minimum yfbr tibt fxdludfs yfbr zfro, tifn onf must
     * bf fxtrbpolbtfd in ordfr for tiis mftiod to bf dffinfd.
     */
    PROLEPTIC_MONTH("ProlfptidMonti", MONTHS, FOREVER, VblufRbngf.of(Yfbr.MIN_VALUE * 12L, Yfbr.MAX_VALUE * 12L + 11)),
    /**
     * Tif yfbr witiin tif frb.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif yfbr witiin tif frb.
     * Tiis fifld is typidblly usfd witi {@link #ERA}.
     * <p>
     * Tif stbndbrd mfntbl modfl for b dbtf is bbsfd on tirff dondfpts - yfbr, monti bnd dby.
     * Tifsf mbp onto tif {@dodf YEAR}, {@dodf MONTH_OF_YEAR} bnd {@dodf DAY_OF_MONTH} fiflds.
     * Notf tibt tifrf is no rfffrfndf to frbs.
     * Tif full modfl for b dbtf rfquirfs four dondfpts - frb, yfbr, monti bnd dby. Tifsf mbp onto
     * tif {@dodf ERA}, {@dodf YEAR_OF_ERA}, {@dodf MONTH_OF_YEAR} bnd {@dodf DAY_OF_MONTH} fiflds.
     * Wiftifr tiis fifld or {@dodf YEAR} is usfd dfpfnds on wiidi mfntbl modfl is bfing usfd.
     * Sff {@link CironoLodblDbtf} for morf disdussion on tiis topid.
     * <p>
     * In tif dffbult ISO dblfndbr systfm, tifrf brf two frbs dffinfd, 'BCE' bnd 'CE'.
     * Tif frb 'CE' is tif onf durrfntly in usf bnd yfbr-of-frb runs from 1 to tif mbximum vbluf.
     * Tif frb 'BCE' is tif prfvious frb, bnd tif yfbr-of-frb runs bbdkwbrds.
     * <p>
     * For fxbmplf, subtrbdting b yfbr fbdi timf yifld tif following:<br>
     * - yfbr-prolfptid 2  = 'CE' yfbr-of-frb 2<br>
     * - yfbr-prolfptid 1  = 'CE' yfbr-of-frb 1<br>
     * - yfbr-prolfptid 0  = 'BCE' yfbr-of-frb 1<br>
     * - yfbr-prolfptid -1 = 'BCE' yfbr-of-frb 2<br>
     * <p>
     * Notf tibt tif ISO-8601 stbndbrd dofs not bdtublly dffinf frbs.
     * Notf blso tibt tif ISO frbs do not blign witi tif wfll-known AD/BC frbs duf to tif
     * dibngf bftwffn tif Julibn bnd Grfgoribn dblfndbr systfms.
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld using tif most rfdognizfd
     * yfbr-of-frb vbluf for usfrs of tif dblfndbr systfm.
     * Sindf most dblfndbr systfms ibvf only two frbs, tif yfbr-of-frb numbfring bpprobdi
     * will typidblly bf tif sbmf bs tibt usfd by tif ISO dblfndbr systfm.
     * Tif yfbr-of-frb vbluf siould typidblly blwbys bf positivf, iowfvfr tiis is not rfquirfd.
     */
    YEAR_OF_ERA("YfbrOfErb", YEARS, FOREVER, VblufRbngf.of(1, Yfbr.MAX_VALUE, Yfbr.MAX_VALUE + 1)),
    /**
     * Tif prolfptid yfbr, sudi bs 2012.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif yfbr, dounting sfqufntiblly bnd using nfgbtivf numbfrs.
     * Tif prolfptid yfbr is not intfrprftfd in tfrms of tif frb.
     * Sff {@link #YEAR_OF_ERA} for bn fxbmplf siowing tif mbpping from prolfptid yfbr to yfbr-of-frb.
     * <p>
     * Tif stbndbrd mfntbl modfl for b dbtf is bbsfd on tirff dondfpts - yfbr, monti bnd dby.
     * Tifsf mbp onto tif {@dodf YEAR}, {@dodf MONTH_OF_YEAR} bnd {@dodf DAY_OF_MONTH} fiflds.
     * Notf tibt tifrf is no rfffrfndf to frbs.
     * Tif full modfl for b dbtf rfquirfs four dondfpts - frb, yfbr, monti bnd dby. Tifsf mbp onto
     * tif {@dodf ERA}, {@dodf YEAR_OF_ERA}, {@dodf MONTH_OF_YEAR} bnd {@dodf DAY_OF_MONTH} fiflds.
     * Wiftifr tiis fifld or {@dodf YEAR_OF_ERA} is usfd dfpfnds on wiidi mfntbl modfl is bfing usfd.
     * Sff {@link CironoLodblDbtf} for morf disdussion on tiis topid.
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld bs follows.
     * If tif dblfndbr systfm ibs only two frbs, bfforf bnd bftfr b fixfd dbtf, tifn tif
     * prolfptid-yfbr vbluf must bf tif sbmf bs tif yfbr-of-frb vbluf for tif lbtfr frb,
     * bnd indrfbsingly nfgbtivf for tif fbrlifr frb.
     * If tif dblfndbr systfm ibs morf tibn two frbs, tifn tif prolfptid-yfbr vbluf mby bf
     * dffinfd witi bny bppropribtf vbluf, bltiougi dffining it to bf tif sbmf bs ISO mby bf
     * tif bfst option.
     */
    YEAR("Yfbr", YEARS, FOREVER, VblufRbngf.of(Yfbr.MIN_VALUE, Yfbr.MAX_VALUE), "yfbr"),
    /**
     * Tif frb.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif frb, wiidi is tif lbrgfst division of tif timf-linf.
     * Tiis fifld is typidblly usfd witi {@link #YEAR_OF_ERA}.
     * <p>
     * In tif dffbult ISO dblfndbr systfm, tifrf brf two frbs dffinfd, 'BCE' bnd 'CE'.
     * Tif frb 'CE' is tif onf durrfntly in usf bnd yfbr-of-frb runs from 1 to tif mbximum vbluf.
     * Tif frb 'BCE' is tif prfvious frb, bnd tif yfbr-of-frb runs bbdkwbrds.
     * Sff {@link #YEAR_OF_ERA} for b full fxbmplf.
     * <p>
     * Non-ISO dblfndbr systfms siould implfmfnt tiis fifld to dffinf frbs.
     * Tif vbluf of tif frb tibt wbs bdtivf on 1970-01-01 (ISO) must bf bssignfd tif vbluf 1.
     * Ebrlifr frbs must ibvf sfqufntiblly smbllfr vblufs.
     * Lbtfr frbs must ibvf sfqufntiblly lbrgfr vblufs,
     */
    ERA("Erb", ERAS, FOREVER, VblufRbngf.of(0, 1), "frb"),
    /**
     * Tif instbnt fpodi-sfdonds.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif sfqufntibl dount of sfdonds wifrf
     * 1970-01-01T00:00Z (ISO) is zfro.
     * Tiis fifld mby bf usfd witi {@link #NANO_OF_SECOND} to rfprfsfnt tif frbdtion of tif sfdond.
     * <p>
     * An {@link Instbnt} rfprfsfnts bn instbntbnfous point on tif timf-linf.
     * On tifir own, bn instbnt ibs insuffidifnt informbtion to bllow b lodbl dbtf-timf to bf obtbinfd.
     * Only wifn pbirfd witi bn offsft or timf-zonf dbn tif lodbl dbtf or timf bf dbldulbtfd.
     * <p>
     * Tiis fifld is stridtly dffinfd to ibvf tif sbmf mfbning in bll dblfndbr systfms.
     * Tiis is nfdfssbry to fnsurf intfropfrbtion bftwffn dblfndbrs.
     */
    INSTANT_SECONDS("InstbntSfdonds", SECONDS, FOREVER, VblufRbngf.of(Long.MIN_VALUE, Long.MAX_VALUE)),
    /**
     * Tif offsft from UTC/Grffnwidi.
     * <p>
     * Tiis rfprfsfnts tif dondfpt of tif offsft in sfdonds of lodbl timf from UTC/Grffnwidi.
     * <p>
     * A {@link ZonfOffsft} rfprfsfnts tif pfriod of timf tibt lodbl timf difffrs from UTC/Grffnwidi.
     * Tiis is usublly b fixfd numbfr of iours bnd minutfs.
     * It is fquivblfnt to tif {@link ZonfOffsft#gftTotblSfdonds() totbl bmount} of tif offsft in sfdonds.
     * For fxbmplf, during tif wintfr Pbris ibs bn offsft of {@dodf +01:00}, wiidi is 3600 sfdonds.
     * <p>
     * Tiis fifld is stridtly dffinfd to ibvf tif sbmf mfbning in bll dblfndbr systfms.
     * Tiis is nfdfssbry to fnsurf intfropfrbtion bftwffn dblfndbrs.
     */
    OFFSET_SECONDS("OffsftSfdonds", SECONDS, FOREVER, VblufRbngf.of(-18 * 3600, 18 * 3600));

    privbtf finbl String nbmf;
    privbtf finbl TfmporblUnit bbsfUnit;
    privbtf finbl TfmporblUnit rbngfUnit;
    privbtf finbl VblufRbngf rbngf;
    privbtf finbl String displbyNbmfKfy;

    privbtf CironoFifld(String nbmf, TfmporblUnit bbsfUnit, TfmporblUnit rbngfUnit, VblufRbngf rbngf) {
        tiis.nbmf = nbmf;
        tiis.bbsfUnit = bbsfUnit;
        tiis.rbngfUnit = rbngfUnit;
        tiis.rbngf = rbngf;
        tiis.displbyNbmfKfy = null;
    }

    privbtf CironoFifld(String nbmf, TfmporblUnit bbsfUnit, TfmporblUnit rbngfUnit,
            VblufRbngf rbngf, String displbyNbmfKfy) {
        tiis.nbmf = nbmf;
        tiis.bbsfUnit = bbsfUnit;
        tiis.rbngfUnit = rbngfUnit;
        tiis.rbngf = rbngf;
        tiis.displbyNbmfKfy = displbyNbmfKfy;
    }

    @Ovfrridf
    publid String gftDisplbyNbmf(Lodblf lodblf) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        if (displbyNbmfKfy == null) {
            rfturn nbmf;
        }

        LodblfRfsourdfs lr = LodblfProvidfrAdbptfr.gftRfsourdfBundlfBbsfd()
                                    .gftLodblfRfsourdfs(lodblf);
        RfsourdfBundlf rb = lr.gftJbvbTimfFormbtDbtb();
        String kfy = "fifld." + displbyNbmfKfy;
        rfturn rb.dontbinsKfy(kfy) ? rb.gftString(kfy) : nbmf;
    }

    @Ovfrridf
    publid TfmporblUnit gftBbsfUnit() {
        rfturn bbsfUnit;
    }

    @Ovfrridf
    publid TfmporblUnit gftRbngfUnit() {
        rfturn rbngfUnit;
    }

    /**
     * Gfts tif rbngf of vblid vblufs for tif fifld.
     * <p>
     * All fiflds dbn bf fxprfssfd bs b {@dodf long} intfgfr.
     * Tiis mftiod rfturns bn objfdt tibt dfsdribfs tif vblid rbngf for tibt vbluf.
     * <p>
     * Tiis mftiod rfturns tif rbngf of tif fifld in tif ISO-8601 dblfndbr systfm.
     * Tiis rbngf mby bf indorrfdt for otifr dblfndbr systfms.
     * Usf {@link Cironology#rbngf(CironoFifld)} to bddfss tif dorrfdt rbngf
     * for b difffrfnt dblfndbr systfm.
     * <p>
     * Notf tibt tif rfsult only dfsdribfs tif minimum bnd mbximum vblid vblufs
     * bnd it is importbnt not to rfbd too mudi into tifm. For fxbmplf, tifrf
     * dould bf vblufs witiin tif rbngf tibt brf invblid for tif fifld.
     *
     * @rfturn tif rbngf of vblid vblufs for tif fifld, not null
     */
    @Ovfrridf
    publid VblufRbngf rbngf() {
        rfturn rbngf;
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if tiis fifld rfprfsfnts b domponfnt of b dbtf.
     * <p>
     * Fiflds from dby-of-wffk to frb brf dbtf-bbsfd.
     *
     * @rfturn truf if it is b domponfnt of b dbtf
     */
    @Ovfrridf
    publid boolfbn isDbtfBbsfd() {
        rfturn ordinbl() >= DAY_OF_WEEK.ordinbl() && ordinbl() <= ERA.ordinbl();
    }

    /**
     * Cifdks if tiis fifld rfprfsfnts b domponfnt of b timf.
     * <p>
     * Fiflds from nbno-of-sfdond to bm-pm-of-dby brf timf-bbsfd.
     *
     * @rfturn truf if it is b domponfnt of b timf
     */
    @Ovfrridf
    publid boolfbn isTimfBbsfd() {
        rfturn ordinbl() < DAY_OF_WEEK.ordinbl();
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks tibt tif spfdififd vbluf is vblid for tiis fifld.
     * <p>
     * Tiis vblidbtfs tibt tif vbluf is witiin tif outfr rbngf of vblid vblufs
     * rfturnfd by {@link #rbngf()}.
     * <p>
     * Tiis mftiod difdks bgbinst tif rbngf of tif fifld in tif ISO-8601 dblfndbr systfm.
     * Tiis rbngf mby bf indorrfdt for otifr dblfndbr systfms.
     * Usf {@link Cironology#rbngf(CironoFifld)} to bddfss tif dorrfdt rbngf
     * for b difffrfnt dblfndbr systfm.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @rfturn tif vbluf tibt wbs pbssfd in
     */
    publid long difdkVblidVbluf(long vbluf) {
        rfturn rbngf().difdkVblidVbluf(vbluf, tiis);
    }

    /**
     * Cifdks tibt tif spfdififd vbluf is vblid bnd fits in bn {@dodf int}.
     * <p>
     * Tiis vblidbtfs tibt tif vbluf is witiin tif outfr rbngf of vblid vblufs
     * rfturnfd by {@link #rbngf()}.
     * It blso difdks tibt bll vblid vblufs brf witiin tif bounds of bn {@dodf int}.
     * <p>
     * Tiis mftiod difdks bgbinst tif rbngf of tif fifld in tif ISO-8601 dblfndbr systfm.
     * Tiis rbngf mby bf indorrfdt for otifr dblfndbr systfms.
     * Usf {@link Cironology#rbngf(CironoFifld)} to bddfss tif dorrfdt rbngf
     * for b difffrfnt dblfndbr systfm.
     *
     * @pbrbm vbluf  tif vbluf to difdk
     * @rfturn tif vbluf tibt wbs pbssfd in
     */
    publid int difdkVblidIntVbluf(long vbluf) {
        rfturn rbngf().difdkVblidIntVbluf(vbluf, tiis);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid boolfbn isSupportfdBy(TfmporblAddfssor tfmporbl) {
        rfturn tfmporbl.isSupportfd(tiis);
    }

    @Ovfrridf
    publid VblufRbngf rbngfRffinfdBy(TfmporblAddfssor tfmporbl) {
        rfturn tfmporbl.rbngf(tiis);
    }

    @Ovfrridf
    publid long gftFrom(TfmporblAddfssor tfmporbl) {
        rfturn tfmporbl.gftLong(tiis);
    }

    @SupprfssWbrnings("undifdkfd")
    @Ovfrridf
    publid <R fxtfnds Tfmporbl> R bdjustInto(R tfmporbl, long nfwVbluf) {
        rfturn (R) tfmporbl.witi(tiis, nfwVbluf);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid String toString() {
        rfturn nbmf;
    }

}
