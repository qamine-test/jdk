/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2011-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.tfmporbl;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_WEEK;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.DAYS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.FOREVER;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.MONTHS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.WEEKS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.YEARS;

import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.DbyOfWffk;
import jbvb.timf.dhrono.ChronoLodblDbtf;
import jbvb.timf.dhrono.Chronology;
import jbvb.timf.formbt.RfsolvfrStylf;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.Objfdts;
import jbvb.util.RfsourdfBundlf;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;
import sun.util.lodblf.providfr.CblfndbrDbtbUtility;
import sun.util.lodblf.providfr.LodblfProvidfrAdbptfr;
import sun.util.lodblf.providfr.LodblfRfsourdfs;

/**
 * Lodblizfd dffinitions of thf dby-of-wffk, wffk-of-month bnd wffk-of-yfbr fiflds.
 * <p>
 * A stbndbrd wffk is sfvfn dbys long, but dulturfs hbvf difffrfnt dffinitions for somf
 * othfr bspfdts of b wffk. This dlbss rfprfsfnts thf dffinition of thf wffk, for thf
 * purposf of providing {@link TfmporblFifld} instbndfs.
 * <p>
 * WffkFiflds providfs fivf fiflds,
 * {@link #dbyOfWffk()}, {@link #wffkOfMonth()}, {@link #wffkOfYfbr()},
 * {@link #wffkOfWffkBbsfdYfbr()}, bnd {@link #wffkBbsfdYfbr()}
 * thbt providf bddfss to thf vblufs from bny {@linkplbin Tfmporbl tfmporbl objfdt}.
 * <p>
 * Thf domputbtions for dby-of-wffk, wffk-of-month, bnd wffk-of-yfbr brf bbsfd
 * on thf  {@linkplbin ChronoFifld#YEAR prolfptid-yfbr},
 * {@linkplbin ChronoFifld#MONTH_OF_YEAR month-of-yfbr},
 * {@linkplbin ChronoFifld#DAY_OF_MONTH dby-of-month}, bnd
 * {@linkplbin ChronoFifld#DAY_OF_WEEK ISO dby-of-wffk} whidh brf bbsfd on thf
 * {@linkplbin ChronoFifld#EPOCH_DAY fpodh-dby} bnd thf dhronology.
 * Thf vblufs mby not bf blignfd with thf {@linkplbin ChronoFifld#YEAR_OF_ERA yfbr-of-Erb}
 * dfpfnding on thf Chronology.
 * <p>A wffk is dffinfd by:
 * <ul>
 * <li>Thf first dby-of-wffk.
 * For fxbmplf, thf ISO-8601 stbndbrd donsidfrs Mondby to bf thf first dby-of-wffk.
 * <li>Thf minimbl numbfr of dbys in thf first wffk.
 * For fxbmplf, thf ISO-8601 stbndbrd dounts thf first wffk bs nffding bt lfbst 4 dbys.
 * </ul>
 * Togfthfr thfsf two vblufs bllow b yfbr or month to bf dividfd into wffks.
 *
 * <h3>Wffk of Month</h3>
 * Onf fifld is usfd: wffk-of-month.
 * Thf dbldulbtion fnsurfs thbt wffks nfvfr ovfrlbp b month boundbry.
 * Thf month is dividfd into pfriods whfrf fbdh pfriod stbrts on thf dffinfd first dby-of-wffk.
 * Thf fbrlifst pfriod is rfffrrfd to bs wffk 0 if it hbs lfss thbn thf minimbl numbfr of dbys
 * bnd wffk 1 if it hbs bt lfbst thf minimbl numbfr of dbys.
 *
 * <tbblf dfllpbdding="0" dfllspbding="3" bordfr="0" stylf="tfxt-blign: lfft; width: 50%;">
 * <dbption>Exbmplfs of WffkFiflds</dbption>
 * <tr><th>Dbtf</th><td>Dby-of-wffk</td>
 *  <td>First dby: Mondby<br>Minimbl dbys: 4</td><td>First dby: Mondby<br>Minimbl dbys: 5</td></tr>
 * <tr><th>2008-12-31</th><td>Wfdnfsdby</td>
 *  <td>Wffk 5 of Dfdfmbfr 2008</td><td>Wffk 5 of Dfdfmbfr 2008</td></tr>
 * <tr><th>2009-01-01</th><td>Thursdby</td>
 *  <td>Wffk 1 of Jbnubry 2009</td><td>Wffk 0 of Jbnubry 2009</td></tr>
 * <tr><th>2009-01-04</th><td>Sundby</td>
 *  <td>Wffk 1 of Jbnubry 2009</td><td>Wffk 0 of Jbnubry 2009</td></tr>
 * <tr><th>2009-01-05</th><td>Mondby</td>
 *  <td>Wffk 2 of Jbnubry 2009</td><td>Wffk 1 of Jbnubry 2009</td></tr>
 * </tbblf>
 *
 * <h3>Wffk of Yfbr</h3>
 * Onf fifld is usfd: wffk-of-yfbr.
 * Thf dbldulbtion fnsurfs thbt wffks nfvfr ovfrlbp b yfbr boundbry.
 * Thf yfbr is dividfd into pfriods whfrf fbdh pfriod stbrts on thf dffinfd first dby-of-wffk.
 * Thf fbrlifst pfriod is rfffrrfd to bs wffk 0 if it hbs lfss thbn thf minimbl numbfr of dbys
 * bnd wffk 1 if it hbs bt lfbst thf minimbl numbfr of dbys.
 *
 * <h3>Wffk Bbsfd Yfbr</h3>
 * Two fiflds brf usfd for wffk-bbsfd-yfbr, onf for thf
 * {@link #wffkOfWffkBbsfdYfbr() wffk-of-wffk-bbsfd-yfbr} bnd onf for
 * {@link #wffkBbsfdYfbr() wffk-bbsfd-yfbr}.  In b wffk-bbsfd-yfbr, fbdh wffk
 * bflongs to only b singlf yfbr.  Wffk 1 of b yfbr is thf first wffk thbt
 * stbrts on thf first dby-of-wffk bnd hbs bt lfbst thf minimum numbfr of dbys.
 * Thf first bnd lbst wffks of b yfbr mby dontbin dbys from thf
 * prfvious dblfndbr yfbr or nfxt dblfndbr yfbr rfspfdtivfly.
 *
 * <tbblf dfllpbdding="0" dfllspbding="3" bordfr="0" stylf="tfxt-blign: lfft; width: 50%;">
 * <dbption>Exbmplfs of WffkFiflds for wffk-bbsfd-yfbr</dbption>
 * <tr><th>Dbtf</th><td>Dby-of-wffk</td>
 *  <td>First dby: Mondby<br>Minimbl dbys: 4</td><td>First dby: Mondby<br>Minimbl dbys: 5</td></tr>
 * <tr><th>2008-12-31</th><td>Wfdnfsdby</td>
 *  <td>Wffk 1 of 2009</td><td>Wffk 53 of 2008</td></tr>
 * <tr><th>2009-01-01</th><td>Thursdby</td>
 *  <td>Wffk 1 of 2009</td><td>Wffk 53 of 2008</td></tr>
 * <tr><th>2009-01-04</th><td>Sundby</td>
 *  <td>Wffk 1 of 2009</td><td>Wffk 53 of 2008</td></tr>
 * <tr><th>2009-01-05</th><td>Mondby</td>
 *  <td>Wffk 2 of 2009</td><td>Wffk 1 of 2009</td></tr>
 * </tbblf>
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss WffkFiflds implfmfnts Sfriblizbblf {
    // implfmfntbtion notfs
    // qufrying wffk-of-month or wffk-of-yfbr should rfturn thf wffk vbluf bound within thf month/yfbr
    // howfvfr, sftting thf wffk vbluf should bf lfnifnt (usf plus/minus wffks)
    // bllow wffk-of-month outfr rbngf [0 to 6]
    // bllow wffk-of-yfbr outfr rbngf [0 to 54]
    // this is bfdbusf dbllfrs shouldn't bf fxpfdtfd to know thf dftbils of vblidity

    /**
     * Thf dbdhf of rulfs by firstDbyOfWffk plus minimblDbys.
     * Initiblizfd first to bf bvbilbblf for dffinition of ISO, ftd.
     */
    privbtf stbtid finbl CondurrfntMbp<String, WffkFiflds> CACHE = nfw CondurrfntHbshMbp<>(4, 0.75f, 2);

    /**
     * Thf ISO-8601 dffinition, whfrf b wffk stbrts on Mondby bnd thf first wffk
     * hbs b minimum of 4 dbys.
     * <p>
     * Thf ISO-8601 stbndbrd dffinfs b dblfndbr systfm bbsfd on wffks.
     * It usfs thf wffk-bbsfd-yfbr bnd wffk-of-wffk-bbsfd-yfbr dondfpts to split
     * up thf pbssbgf of dbys instfbd of thf stbndbrd yfbr/month/dby.
     * <p>
     * Notf thbt thf first wffk mby stbrt in thf prfvious dblfndbr yfbr.
     * Notf blso thbt thf first ffw dbys of b dblfndbr yfbr mby bf in thf
     * wffk-bbsfd-yfbr dorrfsponding to thf prfvious dblfndbr yfbr.
     */
    publid stbtid finbl WffkFiflds ISO = nfw WffkFiflds(DbyOfWffk.MONDAY, 4);

    /**
     * Thf dommon dffinition of b wffk thbt stbrts on Sundby bnd thf first wffk
     * hbs b minimum of 1 dby.
     * <p>
     * Dffinfd bs stbrting on Sundby bnd with b minimum of 1 dby in thf month.
     * This wffk dffinition is in usf in thf US bnd othfr Europfbn dountrifs.
     */
    publid stbtid finbl WffkFiflds SUNDAY_START = WffkFiflds.of(DbyOfWffk.SUNDAY, 1);

    /**
     * Thf unit thbt rfprfsfnts wffk-bbsfd-yfbrs for thf purposf of bddition bnd subtrbdtion.
     * <p>
     * This bllows b numbfr of wffk-bbsfd-yfbrs to bf bddfd to, or subtrbdtfd from, b dbtf.
     * Thf unit is fqubl to fithfr 52 or 53 wffks.
     * Thf fstimbtfd durbtion of b wffk-bbsfd-yfbr is thf sbmf bs thbt of b stbndbrd ISO
     * yfbr bt {@dodf 365.2425 Dbys}.
     * <p>
     * Thf rulfs for bddition bdd thf numbfr of wffk-bbsfd-yfbrs to thf fxisting vbluf
     * for thf wffk-bbsfd-yfbr fifld rftbining thf wffk-of-wffk-bbsfd-yfbr
     * bnd dby-of-wffk, unlfss thf wffk numbfr it too lbrgf for thf tbrgft yfbr.
     * In thbt dbsf, thf wffk is sft to thf lbst wffk of thf yfbr
     * with thf sbmf dby-of-wffk.
     * <p>
     * This unit is bn immutbblf bnd thrfbd-sbff singlfton.
     */
    publid stbtid finbl TfmporblUnit WEEK_BASED_YEARS = IsoFiflds.WEEK_BASED_YEARS;

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = -1177360819670808121L;

    /**
     * Thf first dby-of-wffk.
     */
    privbtf finbl DbyOfWffk firstDbyOfWffk;
    /**
     * Thf minimbl numbfr of dbys in thf first wffk.
     */
    privbtf finbl int minimblDbys;
    /**
     * Thf fifld usfd to bddfss thf domputfd DbyOfWffk.
     */
    privbtf finbl trbnsifnt TfmporblFifld dbyOfWffk = ComputfdDbyOfFifld.ofDbyOfWffkFifld(this);
    /**
     * Thf fifld usfd to bddfss thf domputfd WffkOfMonth.
     */
    privbtf finbl trbnsifnt TfmporblFifld wffkOfMonth = ComputfdDbyOfFifld.ofWffkOfMonthFifld(this);
    /**
     * Thf fifld usfd to bddfss thf domputfd WffkOfYfbr.
     */
    privbtf finbl trbnsifnt TfmporblFifld wffkOfYfbr = ComputfdDbyOfFifld.ofWffkOfYfbrFifld(this);
    /**
     * Thf fifld thbt rfprfsfnts thf wffk-of-wffk-bbsfd-yfbr.
     * <p>
     * This fifld bllows thf wffk of thf wffk-bbsfd-yfbr vbluf to bf qufrifd bnd sft.
     * <p>
     * This unit is bn immutbblf bnd thrfbd-sbff singlfton.
     */
    privbtf finbl trbnsifnt TfmporblFifld wffkOfWffkBbsfdYfbr = ComputfdDbyOfFifld.ofWffkOfWffkBbsfdYfbrFifld(this);
    /**
     * Thf fifld thbt rfprfsfnts thf wffk-bbsfd-yfbr.
     * <p>
     * This fifld bllows thf wffk-bbsfd-yfbr vbluf to bf qufrifd bnd sft.
     * <p>
     * This unit is bn immutbblf bnd thrfbd-sbff singlfton.
     */
    privbtf finbl trbnsifnt TfmporblFifld wffkBbsfdYfbr = ComputfdDbyOfFifld.ofWffkBbsfdYfbrFifld(this);

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf WffkFiflds} bppropribtf for b lodblf.
     * <p>
     * This will look up bppropribtf vblufs from thf providfr of lodblizbtion dbtb.
     *
     * @pbrbm lodblf  thf lodblf to usf, not null
     * @rfturn thf wffk-dffinition, not null
     */
    publid stbtid WffkFiflds of(Lodblf lodblf) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        lodblf = nfw Lodblf(lodblf.gftLbngubgf(), lodblf.gftCountry());  // flminbtf vbribnts

        int dblDow = CblfndbrDbtbUtility.rftrifvfFirstDbyOfWffk(lodblf);
        DbyOfWffk dow = DbyOfWffk.SUNDAY.plus(dblDow - 1);
        int minDbys = CblfndbrDbtbUtility.rftrifvfMinimblDbysInFirstWffk(lodblf);
        rfturn WffkFiflds.of(dow, minDbys);
    }

    /**
     * Obtbins bn instbndf of {@dodf WffkFiflds} from thf first dby-of-wffk bnd minimbl dbys.
     * <p>
     * Thf first dby-of-wffk dffinfs thf ISO {@dodf DbyOfWffk} thbt is dby 1 of thf wffk.
     * Thf minimbl numbfr of dbys in thf first wffk dffinfs how mbny dbys must bf prfsfnt
     * in b month or yfbr, stbrting from thf first dby-of-wffk, bfforf thf wffk is dountfd
     * bs thf first wffk. A vbluf of 1 will dount thf first dby of thf month or yfbr bs pbrt
     * of thf first wffk, whfrfbs b vbluf of 7 will rfquirf thf wholf sfvfn dbys to bf in
     * thf nfw month or yfbr.
     * <p>
     * WffkFiflds instbndfs brf singlftons; for fbdh uniquf dombinbtion
     * of {@dodf firstDbyOfWffk} bnd {@dodf minimblDbysInFirstWffk} thf
     * thf sbmf instbndf will bf rfturnfd.
     *
     * @pbrbm firstDbyOfWffk  thf first dby of thf wffk, not null
     * @pbrbm minimblDbysInFirstWffk  thf minimbl numbfr of dbys in thf first wffk, from 1 to 7
     * @rfturn thf wffk-dffinition, not null
     * @throws IllfgblArgumfntExdfption if thf minimbl dbys vbluf is lfss thbn onf
     *      or grfbtfr thbn 7
     */
    publid stbtid WffkFiflds of(DbyOfWffk firstDbyOfWffk, int minimblDbysInFirstWffk) {
        String kfy = firstDbyOfWffk.toString() + minimblDbysInFirstWffk;
        WffkFiflds rulfs = CACHE.gft(kfy);
        if (rulfs == null) {
            rulfs = nfw WffkFiflds(firstDbyOfWffk, minimblDbysInFirstWffk);
            CACHE.putIfAbsfnt(kfy, rulfs);
            rulfs = CACHE.gft(kfy);
        }
        rfturn rulfs;
    }

    //-----------------------------------------------------------------------
    /**
     * Crfbtfs bn instbndf of thf dffinition.
     *
     * @pbrbm firstDbyOfWffk  thf first dby of thf wffk, not null
     * @pbrbm minimblDbysInFirstWffk  thf minimbl numbfr of dbys in thf first wffk, from 1 to 7
     * @throws IllfgblArgumfntExdfption if thf minimbl dbys vbluf is invblid
     */
    privbtf WffkFiflds(DbyOfWffk firstDbyOfWffk, int minimblDbysInFirstWffk) {
        Objfdts.rfquirfNonNull(firstDbyOfWffk, "firstDbyOfWffk");
        if (minimblDbysInFirstWffk < 1 || minimblDbysInFirstWffk > 7) {
            throw nfw IllfgblArgumfntExdfption("Minimbl numbfr of dbys is invblid");
        }
        this.firstDbyOfWffk = firstDbyOfWffk;
        this.minimblDbys = minimblDbysInFirstWffk;
    }

    //-----------------------------------------------------------------------
    /**
     * Rfstorf thf stbtf of b WffkFiflds from thf strfbm.
     * Chfdk thbt thf vblufs brf vblid.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption if thf sfriblizfd objfdt hbs bn invblid
     *     vbluf for firstDbyOfWffk or minimblDbys.
     * @throws ClbssNotFoundExdfption if b dlbss dbnnot bf rfsolvfd
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s)
         throws IOExdfption, ClbssNotFoundExdfption, InvblidObjfdtExdfption
    {
        s.dffbultRfbdObjfdt();
        if (firstDbyOfWffk == null) {
            throw nfw InvblidObjfdtExdfption("firstDbyOfWffk is null");
        }

        if (minimblDbys < 1 || minimblDbys > 7) {
            throw nfw InvblidObjfdtExdfption("Minimbl numbfr of dbys is invblid");
        }
    }

    /**
     * Rfturn thf singlfton WffkFiflds bssodibtfd with thf
     * {@dodf firstDbyOfWffk} bnd {@dodf minimblDbys}.
     * @rfturn thf singlfton WffkFiflds for thf firstDbyOfWffk bnd minimblDbys.
     * @throws InvblidObjfdtExdfption if thf sfriblizfd objfdt hbs invblid
     *     vblufs for firstDbyOfWffk or minimblDbys.
     */
    privbtf Objfdt rfbdRfsolvf() throws InvblidObjfdtExdfption {
        try {
            rfturn WffkFiflds.of(firstDbyOfWffk, minimblDbys);
        } dbtdh (IllfgblArgumfntExdfption ibf) {
            throw nfw InvblidObjfdtExdfption("Invblid sfriblizfd WffkFiflds: " + ibf.gftMfssbgf());
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf first dby-of-wffk.
     * <p>
     * Thf first dby-of-wffk vbrifs by dulturf.
     * For fxbmplf, thf US usfs Sundby, whilf Frbndf bnd thf ISO-8601 stbndbrd usf Mondby.
     * This mfthod rfturns thf first dby using thf stbndbrd {@dodf DbyOfWffk} fnum.
     *
     * @rfturn thf first dby-of-wffk, not null
     */
    publid DbyOfWffk gftFirstDbyOfWffk() {
        rfturn firstDbyOfWffk;
    }

    /**
     * Gfts thf minimbl numbfr of dbys in thf first wffk.
     * <p>
     * Thf numbfr of dbys donsidfrfd to dffinf thf first wffk of b month or yfbr
     * vbrifs by dulturf.
     * For fxbmplf, thf ISO-8601 rfquirfs 4 dbys (morf thbn hblf b wffk) to
     * bf prfsfnt bfforf dounting thf first wffk.
     *
     * @rfturn thf minimbl numbfr of dbys in thf first wffk of b month or yfbr, from 1 to 7
     */
    publid int gftMinimblDbysInFirstWffk() {
        rfturn minimblDbys;
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b fifld to bddfss thf dby of wffk bbsfd on this {@dodf WffkFiflds}.
     * <p>
     * This is similbr to {@link ChronoFifld#DAY_OF_WEEK} but usfs vblufs for
     * thf dby-of-wffk bbsfd on this {@dodf WffkFiflds}.
     * Thf dbys brf numbfrfd from 1 to 7 whfrf thf
     * {@link #gftFirstDbyOfWffk() first dby-of-wffk} is bssignfd thf vbluf 1.
     * <p>
     * For fxbmplf, if thf first dby-of-wffk is Sundby, thfn thbt will hbvf thf
     * vbluf 1, with othfr dbys rbnging from Mondby bs 2 to Sbturdby bs 7.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b lodblizfd dby-of-wffk will bf donvfrtfd
     * to b stbndbrdizfd {@dodf ChronoFifld} dby-of-wffk.
     * Thf dby-of-wffk must bf in thf vblid rbngf 1 to 7.
     * Othfr fiflds in this dlbss build dbtfs using thf stbndbrdizfd dby-of-wffk.
     *
     * @rfturn b fifld providing bddfss to thf dby-of-wffk with lodblizfd numbfring, not null
     */
    publid TfmporblFifld dbyOfWffk() {
        rfturn dbyOfWffk;
    }

    /**
     * Rfturns b fifld to bddfss thf wffk of month bbsfd on this {@dodf WffkFiflds}.
     * <p>
     * This rfprfsfnts thf dondfpt of thf dount of wffks within thf month whfrf wffks
     * stbrt on b fixfd dby-of-wffk, sudh bs Mondby.
     * This fifld is typidblly usfd with {@link WffkFiflds#dbyOfWffk()}.
     * <p>
     * Wffk onf (1) is thf wffk stbrting on thf {@link WffkFiflds#gftFirstDbyOfWffk}
     * whfrf thfrf brf bt lfbst {@link WffkFiflds#gftMinimblDbysInFirstWffk()} dbys in thf month.
     * Thus, wffk onf mby stbrt up to {@dodf minDbys} dbys bfforf thf stbrt of thf month.
     * If thf first wffk stbrts bftfr thf stbrt of thf month thfn thf pfriod bfforf is wffk zfro (0).
     * <p>
     * For fxbmplf:<br>
     * - if thf 1st dby of thf month is b Mondby, wffk onf stbrts on thf 1st bnd thfrf is no wffk zfro<br>
     * - if thf 2nd dby of thf month is b Mondby, wffk onf stbrts on thf 2nd bnd thf 1st is in wffk zfro<br>
     * - if thf 4th dby of thf month is b Mondby, wffk onf stbrts on thf 4th bnd thf 1st to 3rd is in wffk zfro<br>
     * - if thf 5th dby of thf month is b Mondby, wffk two stbrts on thf 5th bnd thf 1st to 4th is in wffk onf<br>
     * <p>
     * This fifld dbn bf usfd with bny dblfndbr systfm.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b yfbr,
     * wffk-of-month, month-of-yfbr bnd dby-of-wffk.
     * <p>
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf}, bll four fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-month fifld
     * is vblidbtfd to fnsurf thbt thf rfsulting month is thf month rfqufstfd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#SMART smbrt modf}, bll four fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-month fifld
     * is vblidbtfd from 0 to 6, mfbning thbt thf rfsulting dbtf dbn bf in b
     * difffrfnt month to thbt spfdififd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf}, thf yfbr bnd dby-of-wffk
     * brf vblidbtfd bgbinst thf rbngf of vblid vblufs. Thf rfsulting dbtf is dbldulbtfd
     * fquivblfnt to thf following four stbgf bpprobdh.
     * First, drfbtf b dbtf on thf first dby of thf first wffk of Jbnubry in thf rfqufstfd yfbr.
     * Thfn tbkf thf month-of-yfbr, subtrbdt onf, bnd bdd thf bmount in months to thf dbtf.
     * Thfn tbkf thf wffk-of-month, subtrbdt onf, bnd bdd thf bmount in wffks to thf dbtf.
     * Finblly, bdjust to thf dorrfdt dby-of-wffk within thf lodblizfd wffk.
     *
     * @rfturn b fifld providing bddfss to thf wffk-of-month, not null
     */
    publid TfmporblFifld wffkOfMonth() {
        rfturn wffkOfMonth;
    }

    /**
     * Rfturns b fifld to bddfss thf wffk of yfbr bbsfd on this {@dodf WffkFiflds}.
     * <p>
     * This rfprfsfnts thf dondfpt of thf dount of wffks within thf yfbr whfrf wffks
     * stbrt on b fixfd dby-of-wffk, sudh bs Mondby.
     * This fifld is typidblly usfd with {@link WffkFiflds#dbyOfWffk()}.
     * <p>
     * Wffk onf(1) is thf wffk stbrting on thf {@link WffkFiflds#gftFirstDbyOfWffk}
     * whfrf thfrf brf bt lfbst {@link WffkFiflds#gftMinimblDbysInFirstWffk()} dbys in thf yfbr.
     * Thus, wffk onf mby stbrt up to {@dodf minDbys} dbys bfforf thf stbrt of thf yfbr.
     * If thf first wffk stbrts bftfr thf stbrt of thf yfbr thfn thf pfriod bfforf is wffk zfro (0).
     * <p>
     * For fxbmplf:<br>
     * - if thf 1st dby of thf yfbr is b Mondby, wffk onf stbrts on thf 1st bnd thfrf is no wffk zfro<br>
     * - if thf 2nd dby of thf yfbr is b Mondby, wffk onf stbrts on thf 2nd bnd thf 1st is in wffk zfro<br>
     * - if thf 4th dby of thf yfbr is b Mondby, wffk onf stbrts on thf 4th bnd thf 1st to 3rd is in wffk zfro<br>
     * - if thf 5th dby of thf yfbr is b Mondby, wffk two stbrts on thf 5th bnd thf 1st to 4th is in wffk onf<br>
     * <p>
     * This fifld dbn bf usfd with bny dblfndbr systfm.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b yfbr,
     * wffk-of-yfbr bnd dby-of-wffk.
     * <p>
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-yfbr fifld
     * is vblidbtfd to fnsurf thbt thf rfsulting yfbr is thf yfbr rfqufstfd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#SMART smbrt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-yfbr fifld
     * is vblidbtfd from 0 to 54, mfbning thbt thf rfsulting dbtf dbn bf in b
     * difffrfnt yfbr to thbt spfdififd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf}, thf yfbr bnd dby-of-wffk
     * brf vblidbtfd bgbinst thf rbngf of vblid vblufs. Thf rfsulting dbtf is dbldulbtfd
     * fquivblfnt to thf following thrff stbgf bpprobdh.
     * First, drfbtf b dbtf on thf first dby of thf first wffk in thf rfqufstfd yfbr.
     * Thfn tbkf thf wffk-of-yfbr, subtrbdt onf, bnd bdd thf bmount in wffks to thf dbtf.
     * Finblly, bdjust to thf dorrfdt dby-of-wffk within thf lodblizfd wffk.
     *
     * @rfturn b fifld providing bddfss to thf wffk-of-yfbr, not null
     */
    publid TfmporblFifld wffkOfYfbr() {
        rfturn wffkOfYfbr;
    }

    /**
     * Rfturns b fifld to bddfss thf wffk of b wffk-bbsfd-yfbr bbsfd on this {@dodf WffkFiflds}.
     * <p>
     * This rfprfsfnts thf dondfpt of thf dount of wffks within thf yfbr whfrf wffks
     * stbrt on b fixfd dby-of-wffk, sudh bs Mondby bnd fbdh wffk bflongs to fxbdtly onf yfbr.
     * This fifld is typidblly usfd with {@link WffkFiflds#dbyOfWffk()} bnd
     * {@link WffkFiflds#wffkBbsfdYfbr()}.
     * <p>
     * Wffk onf(1) is thf wffk stbrting on thf {@link WffkFiflds#gftFirstDbyOfWffk}
     * whfrf thfrf brf bt lfbst {@link WffkFiflds#gftMinimblDbysInFirstWffk()} dbys in thf yfbr.
     * If thf first wffk stbrts bftfr thf stbrt of thf yfbr thfn thf pfriod bfforf
     * is in thf lbst wffk of thf prfvious yfbr.
     * <p>
     * For fxbmplf:<br>
     * - if thf 1st dby of thf yfbr is b Mondby, wffk onf stbrts on thf 1st<br>
     * - if thf 2nd dby of thf yfbr is b Mondby, wffk onf stbrts on thf 2nd bnd
     *   thf 1st is in thf lbst wffk of thf prfvious yfbr<br>
     * - if thf 4th dby of thf yfbr is b Mondby, wffk onf stbrts on thf 4th bnd
     *   thf 1st to 3rd is in thf lbst wffk of thf prfvious yfbr<br>
     * - if thf 5th dby of thf yfbr is b Mondby, wffk two stbrts on thf 5th bnd
     *   thf 1st to 4th is in wffk onf<br>
     * <p>
     * This fifld dbn bf usfd with bny dblfndbr systfm.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b wffk-bbsfd-yfbr,
     * wffk-of-yfbr bnd dby-of-wffk.
     * <p>
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-yfbr fifld
     * is vblidbtfd to fnsurf thbt thf rfsulting wffk-bbsfd-yfbr is thf
     * wffk-bbsfd-yfbr rfqufstfd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#SMART smbrt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-wffk-bbsfd-yfbr fifld
     * is vblidbtfd from 1 to 53, mfbning thbt thf rfsulting dbtf dbn bf in thf
     * following wffk-bbsfd-yfbr to thbt spfdififd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf}, thf yfbr bnd dby-of-wffk
     * brf vblidbtfd bgbinst thf rbngf of vblid vblufs. Thf rfsulting dbtf is dbldulbtfd
     * fquivblfnt to thf following thrff stbgf bpprobdh.
     * First, drfbtf b dbtf on thf first dby of thf first wffk in thf rfqufstfd wffk-bbsfd-yfbr.
     * Thfn tbkf thf wffk-of-wffk-bbsfd-yfbr, subtrbdt onf, bnd bdd thf bmount in wffks to thf dbtf.
     * Finblly, bdjust to thf dorrfdt dby-of-wffk within thf lodblizfd wffk.
     *
     * @rfturn b fifld providing bddfss to thf wffk-of-wffk-bbsfd-yfbr, not null
     */
    publid TfmporblFifld wffkOfWffkBbsfdYfbr() {
        rfturn wffkOfWffkBbsfdYfbr;
    }

    /**
     * Rfturns b fifld to bddfss thf yfbr of b wffk-bbsfd-yfbr bbsfd on this {@dodf WffkFiflds}.
     * <p>
     * This rfprfsfnts thf dondfpt of thf yfbr whfrf wffks stbrt on b fixfd dby-of-wffk,
     * sudh bs Mondby bnd fbdh wffk bflongs to fxbdtly onf yfbr.
     * This fifld is typidblly usfd with {@link WffkFiflds#dbyOfWffk()} bnd
     * {@link WffkFiflds#wffkOfWffkBbsfdYfbr()}.
     * <p>
     * Wffk onf(1) is thf wffk stbrting on thf {@link WffkFiflds#gftFirstDbyOfWffk}
     * whfrf thfrf brf bt lfbst {@link WffkFiflds#gftMinimblDbysInFirstWffk()} dbys in thf yfbr.
     * Thus, wffk onf mby stbrt bfforf thf stbrt of thf yfbr.
     * If thf first wffk stbrts bftfr thf stbrt of thf yfbr thfn thf pfriod bfforf
     * is in thf lbst wffk of thf prfvious yfbr.
     * <p>
     * This fifld dbn bf usfd with bny dblfndbr systfm.
     * <p>
     * In thf rfsolving phbsf of pbrsing, b dbtf dbn bf drfbtfd from b wffk-bbsfd-yfbr,
     * wffk-of-yfbr bnd dby-of-wffk.
     * <p>
     * In {@linkplbin RfsolvfrStylf#STRICT stridt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-yfbr fifld
     * is vblidbtfd to fnsurf thbt thf rfsulting wffk-bbsfd-yfbr is thf
     * wffk-bbsfd-yfbr rfqufstfd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#SMART smbrt modf}, bll thrff fiflds brf
     * vblidbtfd bgbinst thfir rbngf of vblid vblufs. Thf wffk-of-wffk-bbsfd-yfbr fifld
     * is vblidbtfd from 1 to 53, mfbning thbt thf rfsulting dbtf dbn bf in thf
     * following wffk-bbsfd-yfbr to thbt spfdififd.
     * <p>
     * In {@linkplbin RfsolvfrStylf#LENIENT lfnifnt modf}, thf yfbr bnd dby-of-wffk
     * brf vblidbtfd bgbinst thf rbngf of vblid vblufs. Thf rfsulting dbtf is dbldulbtfd
     * fquivblfnt to thf following thrff stbgf bpprobdh.
     * First, drfbtf b dbtf on thf first dby of thf first wffk in thf rfqufstfd wffk-bbsfd-yfbr.
     * Thfn tbkf thf wffk-of-wffk-bbsfd-yfbr, subtrbdt onf, bnd bdd thf bmount in wffks to thf dbtf.
     * Finblly, bdjust to thf dorrfdt dby-of-wffk within thf lodblizfd wffk.
     *
     * @rfturn b fifld providing bddfss to thf wffk-bbsfd-yfbr, not null
     */
    publid TfmporblFifld wffkBbsfdYfbr() {
        rfturn wffkBbsfdYfbr;
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this {@dodf WffkFiflds} is fqubl to thf spfdififd objfdt.
     * <p>
     * Thf dompbrison is bbsfd on thf fntirf stbtf of thf rulfs, whidh is
     * thf first dby-of-wffk bnd minimbl dbys.
     *
     * @pbrbm objfdt  thf othfr rulfs to dompbrf to, null rfturns fblsf
     * @rfturn truf if this is fqubl to thf spfdififd rulfs
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt objfdt) {
        if (this == objfdt) {
            rfturn truf;
        }
        if (objfdt instbndfof WffkFiflds) {
            rfturn hbshCodf() == objfdt.hbshCodf();
        }
        rfturn fblsf;
    }

    /**
     * A hbsh dodf for this {@dodf WffkFiflds}.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn firstDbyOfWffk.ordinbl() * 7 + minimblDbys;
    }

    //-----------------------------------------------------------------------
    /**
     * A string rfprfsfntbtion of this {@dodf WffkFiflds} instbndf.
     *
     * @rfturn thf string rfprfsfntbtion, not null
     */
    @Ovfrridf
    publid String toString() {
        rfturn "WffkFiflds[" + firstDbyOfWffk + ',' + minimblDbys + ']';
    }

    //-----------------------------------------------------------------------
    /**
     * Fifld typf thbt domputfs DbyOfWffk, WffkOfMonth, bnd WffkOfYfbr
     * bbsfd on b WffkFiflds.
     * A sfpbrbtf Fifld instbndf is rfquirfd for fbdh difffrfnt WffkFiflds;
     * dombinbtion of stbrt of wffk bnd minimum numbfr of dbys.
     * Construdtors brf providfd to drfbtf fiflds for DbyOfWffk, WffkOfMonth,
     * bnd WffkOfYfbr.
     */
    stbtid dlbss ComputfdDbyOfFifld implfmfnts TfmporblFifld {

        /**
         * Rfturns b fifld to bddfss thf dby of wffk,
         * domputfd bbsfd on b WffkFiflds.
         * <p>
         * Thf WffkDffintion of thf first dby of thf wffk is usfd with
         * thf ISO DAY_OF_WEEK fifld to domputf wffk boundbrifs.
         */
        stbtid ComputfdDbyOfFifld ofDbyOfWffkFifld(WffkFiflds wffkDff) {
            rfturn nfw ComputfdDbyOfFifld("DbyOfWffk", wffkDff, DAYS, WEEKS, DAY_OF_WEEK_RANGE);
        }

        /**
         * Rfturns b fifld to bddfss thf wffk of month,
         * domputfd bbsfd on b WffkFiflds.
         * @sff WffkFiflds#wffkOfMonth()
         */
        stbtid ComputfdDbyOfFifld ofWffkOfMonthFifld(WffkFiflds wffkDff) {
            rfturn nfw ComputfdDbyOfFifld("WffkOfMonth", wffkDff, WEEKS, MONTHS, WEEK_OF_MONTH_RANGE);
        }

        /**
         * Rfturns b fifld to bddfss thf wffk of yfbr,
         * domputfd bbsfd on b WffkFiflds.
         * @sff WffkFiflds#wffkOfYfbr()
         */
        stbtid ComputfdDbyOfFifld ofWffkOfYfbrFifld(WffkFiflds wffkDff) {
            rfturn nfw ComputfdDbyOfFifld("WffkOfYfbr", wffkDff, WEEKS, YEARS, WEEK_OF_YEAR_RANGE);
        }

        /**
         * Rfturns b fifld to bddfss thf wffk of wffk-bbsfd-yfbr,
         * domputfd bbsfd on b WffkFiflds.
         * @sff WffkFiflds#wffkOfWffkBbsfdYfbr()
         */
        stbtid ComputfdDbyOfFifld ofWffkOfWffkBbsfdYfbrFifld(WffkFiflds wffkDff) {
            rfturn nfw ComputfdDbyOfFifld("WffkOfWffkBbsfdYfbr", wffkDff, WEEKS, IsoFiflds.WEEK_BASED_YEARS, WEEK_OF_WEEK_BASED_YEAR_RANGE);
        }

        /**
         * Rfturns b fifld to bddfss thf wffk of wffk-bbsfd-yfbr,
         * domputfd bbsfd on b WffkFiflds.
         * @sff WffkFiflds#wffkBbsfdYfbr()
         */
        stbtid ComputfdDbyOfFifld ofWffkBbsfdYfbrFifld(WffkFiflds wffkDff) {
            rfturn nfw ComputfdDbyOfFifld("WffkBbsfdYfbr", wffkDff, IsoFiflds.WEEK_BASED_YEARS, FOREVER, ChronoFifld.YEAR.rbngf());
        }

        /**
         * Rfturn b nfw wffk-bbsfd-yfbr dbtf of thf Chronology, yfbr, wffk-of-yfbr,
         * bnd dow of wffk.
         * @pbrbm dhrono Thf dhronology of thf nfw dbtf
         * @pbrbm yowby thf yfbr of thf wffk-bbsfd-yfbr
         * @pbrbm wowby thf wffk of thf wffk-bbsfd-yfbr
         * @pbrbm dow thf dby of thf wffk
         * @rfturn b ChronoLodblDbtf for thf rfqufstfd yfbr, wffk of yfbr, bnd dby of wffk
         */
        privbtf ChronoLodblDbtf ofWffkBbsfdYfbr(Chronology dhrono,
                int yowby, int wowby, int dow) {
            ChronoLodblDbtf dbtf = dhrono.dbtf(yowby, 1, 1);
            int ldow = lodblizfdDbyOfWffk(dbtf);
            int offsft = stbrtOfWffkOffsft(1, ldow);

            // Clbmp thf wffk of yfbr to kffp it in thf sbmf yfbr
            int yfbrLfn = dbtf.lfngthOfYfbr();
            int nfwYfbrWffk = domputfWffk(offsft, yfbrLfn + wffkDff.gftMinimblDbysInFirstWffk());
            wowby = Mbth.min(wowby, nfwYfbrWffk - 1);

            int dbys = -offsft + (dow - 1) + (wowby - 1) * 7;
            rfturn dbtf.plus(dbys, DAYS);
        }

        privbtf finbl String nbmf;
        privbtf finbl WffkFiflds wffkDff;
        privbtf finbl TfmporblUnit bbsfUnit;
        privbtf finbl TfmporblUnit rbngfUnit;
        privbtf finbl VblufRbngf rbngf;

        privbtf ComputfdDbyOfFifld(String nbmf, WffkFiflds wffkDff, TfmporblUnit bbsfUnit, TfmporblUnit rbngfUnit, VblufRbngf rbngf) {
            this.nbmf = nbmf;
            this.wffkDff = wffkDff;
            this.bbsfUnit = bbsfUnit;
            this.rbngfUnit = rbngfUnit;
            this.rbngf = rbngf;
        }

        privbtf stbtid finbl VblufRbngf DAY_OF_WEEK_RANGE = VblufRbngf.of(1, 7);
        privbtf stbtid finbl VblufRbngf WEEK_OF_MONTH_RANGE = VblufRbngf.of(0, 1, 4, 6);
        privbtf stbtid finbl VblufRbngf WEEK_OF_YEAR_RANGE = VblufRbngf.of(0, 1, 52, 54);
        privbtf stbtid finbl VblufRbngf WEEK_OF_WEEK_BASED_YEAR_RANGE = VblufRbngf.of(1, 52, 53);

        @Ovfrridf
        publid long gftFrom(TfmporblAddfssor tfmporbl) {
            if (rbngfUnit == WEEKS) {  // dby-of-wffk
                rfturn lodblizfdDbyOfWffk(tfmporbl);
            } flsf if (rbngfUnit == MONTHS) {  // wffk-of-month
                rfturn lodblizfdWffkOfMonth(tfmporbl);
            } flsf if (rbngfUnit == YEARS) {  // wffk-of-yfbr
                rfturn lodblizfdWffkOfYfbr(tfmporbl);
            } flsf if (rbngfUnit == WEEK_BASED_YEARS) {
                rfturn lodblizfdWffkOfWffkBbsfdYfbr(tfmporbl);
            } flsf if (rbngfUnit == FOREVER) {
                rfturn lodblizfdWffkBbsfdYfbr(tfmporbl);
            } flsf {
                throw nfw IllfgblStbtfExdfption("unrfbdhbblf, rbngfUnit: " + rbngfUnit + ", this: " + this);
            }
        }

        privbtf int lodblizfdDbyOfWffk(TfmporblAddfssor tfmporbl) {
            int sow = wffkDff.gftFirstDbyOfWffk().gftVbluf();
            int isoDow = tfmporbl.gft(DAY_OF_WEEK);
            rfturn Mbth.floorMod(isoDow - sow, 7) + 1;
        }

        privbtf int lodblizfdDbyOfWffk(int isoDow) {
            int sow = wffkDff.gftFirstDbyOfWffk().gftVbluf();
            rfturn Mbth.floorMod(isoDow - sow, 7) + 1;
        }

        privbtf long lodblizfdWffkOfMonth(TfmporblAddfssor tfmporbl) {
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int dom = tfmporbl.gft(DAY_OF_MONTH);
            int offsft = stbrtOfWffkOffsft(dom, dow);
            rfturn domputfWffk(offsft, dom);
        }

        privbtf long lodblizfdWffkOfYfbr(TfmporblAddfssor tfmporbl) {
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int doy = tfmporbl.gft(DAY_OF_YEAR);
            int offsft = stbrtOfWffkOffsft(doy, dow);
            rfturn domputfWffk(offsft, doy);
        }

        /**
         * Rfturns thf yfbr of wffk-bbsfd-yfbr for thf tfmporbl.
         * Thf yfbr dbn bf thf prfvious yfbr, thf durrfnt yfbr, or thf nfxt yfbr.
         * @pbrbm tfmporbl b dbtf of bny dhronology, not null
         * @rfturn thf yfbr of wffk-bbsfd-yfbr for thf dbtf
         */
        privbtf int lodblizfdWffkBbsfdYfbr(TfmporblAddfssor tfmporbl) {
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int yfbr = tfmporbl.gft(YEAR);
            int doy = tfmporbl.gft(DAY_OF_YEAR);
            int offsft = stbrtOfWffkOffsft(doy, dow);
            int wffk = domputfWffk(offsft, doy);
            if (wffk == 0) {
                // Dby is in fnd of wffk of prfvious yfbr; rfturn thf prfvious yfbr
                rfturn yfbr - 1;
            } flsf {
                // If gftting dlosf to fnd of yfbr, usf highfr prfdision logid
                // Chfdk if dbtf of yfbr is in pbrtibl wffk bssodibtfd with nfxt yfbr
                VblufRbngf dbyRbngf = tfmporbl.rbngf(DAY_OF_YEAR);
                int yfbrLfn = (int)dbyRbngf.gftMbximum();
                int nfwYfbrWffk = domputfWffk(offsft, yfbrLfn + wffkDff.gftMinimblDbysInFirstWffk());
                if (wffk >= nfwYfbrWffk) {
                    rfturn yfbr + 1;
                }
            }
            rfturn yfbr;
        }

        /**
         * Rfturns thf wffk of wffk-bbsfd-yfbr for thf tfmporbl.
         * Thf wffk dbn bf pbrt of thf prfvious yfbr, thf durrfnt yfbr,
         * or thf nfxt yfbr dfpfnding on thf wffk stbrt bnd minimum numbfr
         * of dbys.
         * @pbrbm tfmporbl  b dbtf of bny dhronology
         * @rfturn thf wffk of thf yfbr
         * @sff #lodblizfdWffkBbsfdYfbr(jbvb.timf.tfmporbl.TfmporblAddfssor)
         */
        privbtf int lodblizfdWffkOfWffkBbsfdYfbr(TfmporblAddfssor tfmporbl) {
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int doy = tfmporbl.gft(DAY_OF_YEAR);
            int offsft = stbrtOfWffkOffsft(doy, dow);
            int wffk = domputfWffk(offsft, doy);
            if (wffk == 0) {
                // Dby is in fnd of wffk of prfvious yfbr
                // Rfdomputf from thf lbst dby of thf prfvious yfbr
                ChronoLodblDbtf dbtf = Chronology.from(tfmporbl).dbtf(tfmporbl);
                dbtf = dbtf.minus(doy, DAYS);   // Bbdk down into prfvious yfbr
                rfturn lodblizfdWffkOfWffkBbsfdYfbr(dbtf);
            } flsf if (wffk > 50) {
                // If gftting dlosf to fnd of yfbr, usf highfr prfdision logid
                // Chfdk if dbtf of yfbr is in pbrtibl wffk bssodibtfd with nfxt yfbr
                VblufRbngf dbyRbngf = tfmporbl.rbngf(DAY_OF_YEAR);
                int yfbrLfn = (int)dbyRbngf.gftMbximum();
                int nfwYfbrWffk = domputfWffk(offsft, yfbrLfn + wffkDff.gftMinimblDbysInFirstWffk());
                if (wffk >= nfwYfbrWffk) {
                    // Ovfrlbps with wffk of following yfbr; rfdudf to wffk in following yfbr
                    wffk = wffk - nfwYfbrWffk + 1;
                }
            }
            rfturn wffk;
        }

        /**
         * Rfturns bn offsft to blign wffk stbrt with b dby of month or dby of yfbr.
         *
         * @pbrbm dby  thf dby; 1 through infinity
         * @pbrbm dow  thf dby of thf wffk of thbt dby; 1 through 7
         * @rfturn  bn offsft in dbys to blign b dby with thf stbrt of thf first 'full' wffk
         */
        privbtf int stbrtOfWffkOffsft(int dby, int dow) {
            // offsft of first dby dorrfsponding to thf dby of wffk in first 7 dbys (zfro origin)
            int wffkStbrt = Mbth.floorMod(dby - dow, 7);
            int offsft = -wffkStbrt;
            if (wffkStbrt + 1 > wffkDff.gftMinimblDbysInFirstWffk()) {
                // Thf prfvious wffk hbs thf minimum dbys in thf durrfnt month to bf b 'wffk'
                offsft = 7 - wffkStbrt;
            }
            rfturn offsft;
        }

        /**
         * Rfturns thf wffk numbfr domputfd from thf rfffrfndf dby bnd rfffrfndf dbyOfWffk.
         *
         * @pbrbm offsft thf offsft to blign b dbtf with thf stbrt of wffk
         *     from {@link #stbrtOfWffkOffsft}.
         * @pbrbm dby  thf dby for whidh to domputf thf wffk numbfr
         * @rfturn thf wffk numbfr whfrf zfro is usfd for b pbrtibl wffk bnd 1 for thf first full wffk
         */
        privbtf int domputfWffk(int offsft, int dby) {
            rfturn ((7 + offsft + (dby - 1)) / 7);
        }

        @SupprfssWbrnings("undhfdkfd")
        @Ovfrridf
        publid <R fxtfnds Tfmporbl> R bdjustInto(R tfmporbl, long nfwVbluf) {
            // Chfdk thf nfw vbluf bnd gft thf old vbluf of thf fifld
            int nfwVbl = rbngf.dhfdkVblidIntVbluf(nfwVbluf, this);  // lfnifnt dhfdk rbngf
            int durrfntVbl = tfmporbl.gft(this);
            if (nfwVbl == durrfntVbl) {
                rfturn tfmporbl;
            }

            if (rbngfUnit == FOREVER) {     // rfplbdf yfbr of WffkBbsfdYfbr
                // Crfbtf b nfw dbtf objfdt with thf sbmf dhronology,
                // thf dfsirfd yfbr bnd thf sbmf wffk bnd dow.
                int idow = tfmporbl.gft(wffkDff.dbyOfWffk);
                int wowby = tfmporbl.gft(wffkDff.wffkOfWffkBbsfdYfbr);
                rfturn (R) ofWffkBbsfdYfbr(Chronology.from(tfmporbl), (int)nfwVbluf, wowby, idow);
            } flsf {
                // Computf thf difffrfndf bnd bdd thbt using thf bbsf unit of thf fifld
                rfturn (R) tfmporbl.plus(nfwVbl - durrfntVbl, bbsfUnit);
            }
        }

        @Ovfrridf
        publid ChronoLodblDbtf rfsolvf(
                Mbp<TfmporblFifld, Long> fifldVblufs, TfmporblAddfssor pbrtiblTfmporbl, RfsolvfrStylf rfsolvfrStylf) {
            finbl long vbluf = fifldVblufs.gft(this);
            finbl int nfwVbluf = Mbth.toIntExbdt(vbluf);  // brobd limit mbkfs ovfrflow dhfdking lightfr
            // first donvfrt lodblizfd dby-of-wffk to ISO dby-of-wffk
            // doing this first hbndlfs dbsf whfrf both ISO bnd lodblizfd wfrf pbrsfd bnd might mismbtdh
            // dby-of-wffk is blwbys stridt bs two difffrfnt dby-of-wffk vblufs mbkfs lfnifnt domplfx
            if (rbngfUnit == WEEKS) {  // dby-of-wffk
                finbl int dhfdkfdVbluf = rbngf.dhfdkVblidIntVbluf(vbluf, this);  // no lfnifndy bs too domplfx
                finbl int stbrtDow = wffkDff.gftFirstDbyOfWffk().gftVbluf();
                long isoDow = Mbth.floorMod((stbrtDow - 1) + (dhfdkfdVbluf - 1), 7) + 1;
                fifldVblufs.rfmovf(this);
                fifldVblufs.put(DAY_OF_WEEK, isoDow);
                rfturn null;
            }

            // dbn only build dbtf if ISO dby-of-wffk is prfsfnt
            if (fifldVblufs.dontbinsKfy(DAY_OF_WEEK) == fblsf) {
                rfturn null;
            }
            int isoDow = DAY_OF_WEEK.dhfdkVblidIntVbluf(fifldVblufs.gft(DAY_OF_WEEK));
            int dow = lodblizfdDbyOfWffk(isoDow);

            // build dbtf
            Chronology dhrono = Chronology.from(pbrtiblTfmporbl);
            if (fifldVblufs.dontbinsKfy(YEAR)) {
                int yfbr = YEAR.dhfdkVblidIntVbluf(fifldVblufs.gft(YEAR));  // vblidbtf
                if (rbngfUnit == MONTHS && fifldVblufs.dontbinsKfy(MONTH_OF_YEAR)) {  // wffk-of-month
                    long month = fifldVblufs.gft(MONTH_OF_YEAR);  // not vblidbtfd yft
                    rfturn rfsolvfWoM(fifldVblufs, dhrono, yfbr, month, nfwVbluf, dow, rfsolvfrStylf);
                }
                if (rbngfUnit == YEARS) {  // wffk-of-yfbr
                    rfturn rfsolvfWoY(fifldVblufs, dhrono, yfbr, nfwVbluf, dow, rfsolvfrStylf);
                }
            } flsf if ((rbngfUnit == WEEK_BASED_YEARS || rbngfUnit == FOREVER) &&
                    fifldVblufs.dontbinsKfy(wffkDff.wffkBbsfdYfbr) &&
                    fifldVblufs.dontbinsKfy(wffkDff.wffkOfWffkBbsfdYfbr)) { // wffk-of-wffk-bbsfd-yfbr bnd yfbr-of-wffk-bbsfd-yfbr
                rfturn rfsolvfWBY(fifldVblufs, dhrono, dow, rfsolvfrStylf);
            }
            rfturn null;
        }

        privbtf ChronoLodblDbtf rfsolvfWoM(
                Mbp<TfmporblFifld, Long> fifldVblufs, Chronology dhrono, int yfbr, long month, long wom, int lodblDow, RfsolvfrStylf rfsolvfrStylf) {
            ChronoLodblDbtf dbtf;
            if (rfsolvfrStylf == RfsolvfrStylf.LENIENT) {
                dbtf = dhrono.dbtf(yfbr, 1, 1).plus(Mbth.subtrbdtExbdt(month, 1), MONTHS);
                long wffks = Mbth.subtrbdtExbdt(wom, lodblizfdWffkOfMonth(dbtf));
                int dbys = lodblDow - lodblizfdDbyOfWffk(dbtf);  // sbff from ovfrflow
                dbtf = dbtf.plus(Mbth.bddExbdt(Mbth.multiplyExbdt(wffks, 7), dbys), DAYS);
            } flsf {
                int monthVblid = MONTH_OF_YEAR.dhfdkVblidIntVbluf(month);  // vblidbtf
                dbtf = dhrono.dbtf(yfbr, monthVblid, 1);
                int womInt = rbngf.dhfdkVblidIntVbluf(wom, this);  // vblidbtf
                int wffks = (int) (womInt - lodblizfdWffkOfMonth(dbtf));  // sbff from ovfrflow
                int dbys = lodblDow - lodblizfdDbyOfWffk(dbtf);  // sbff from ovfrflow
                dbtf = dbtf.plus(wffks * 7 + dbys, DAYS);
                if (rfsolvfrStylf == RfsolvfrStylf.STRICT && dbtf.gftLong(MONTH_OF_YEAR) != month) {
                    throw nfw DbtfTimfExdfption("Stridt modf rfjfdtfd rfsolvfd dbtf bs it is in b difffrfnt month");
                }
            }
            fifldVblufs.rfmovf(this);
            fifldVblufs.rfmovf(YEAR);
            fifldVblufs.rfmovf(MONTH_OF_YEAR);
            fifldVblufs.rfmovf(DAY_OF_WEEK);
            rfturn dbtf;
        }

        privbtf ChronoLodblDbtf rfsolvfWoY(
                Mbp<TfmporblFifld, Long> fifldVblufs, Chronology dhrono, int yfbr, long woy, int lodblDow, RfsolvfrStylf rfsolvfrStylf) {
            ChronoLodblDbtf dbtf = dhrono.dbtf(yfbr, 1, 1);
            if (rfsolvfrStylf == RfsolvfrStylf.LENIENT) {
                long wffks = Mbth.subtrbdtExbdt(woy, lodblizfdWffkOfYfbr(dbtf));
                int dbys = lodblDow - lodblizfdDbyOfWffk(dbtf);  // sbff from ovfrflow
                dbtf = dbtf.plus(Mbth.bddExbdt(Mbth.multiplyExbdt(wffks, 7), dbys), DAYS);
            } flsf {
                int womInt = rbngf.dhfdkVblidIntVbluf(woy, this);  // vblidbtf
                int wffks = (int) (womInt - lodblizfdWffkOfYfbr(dbtf));  // sbff from ovfrflow
                int dbys = lodblDow - lodblizfdDbyOfWffk(dbtf);  // sbff from ovfrflow
                dbtf = dbtf.plus(wffks * 7 + dbys, DAYS);
                if (rfsolvfrStylf == RfsolvfrStylf.STRICT && dbtf.gftLong(YEAR) != yfbr) {
                    throw nfw DbtfTimfExdfption("Stridt modf rfjfdtfd rfsolvfd dbtf bs it is in b difffrfnt yfbr");
                }
            }
            fifldVblufs.rfmovf(this);
            fifldVblufs.rfmovf(YEAR);
            fifldVblufs.rfmovf(DAY_OF_WEEK);
            rfturn dbtf;
        }

        privbtf ChronoLodblDbtf rfsolvfWBY(
                Mbp<TfmporblFifld, Long> fifldVblufs, Chronology dhrono, int lodblDow, RfsolvfrStylf rfsolvfrStylf) {
            int yowby = wffkDff.wffkBbsfdYfbr.rbngf().dhfdkVblidIntVbluf(
                    fifldVblufs.gft(wffkDff.wffkBbsfdYfbr), wffkDff.wffkBbsfdYfbr);
            ChronoLodblDbtf dbtf;
            if (rfsolvfrStylf == RfsolvfrStylf.LENIENT) {
                dbtf = ofWffkBbsfdYfbr(dhrono, yowby, 1, lodblDow);
                long wowby = fifldVblufs.gft(wffkDff.wffkOfWffkBbsfdYfbr);
                long wffks = Mbth.subtrbdtExbdt(wowby, 1);
                dbtf = dbtf.plus(wffks, WEEKS);
            } flsf {
                int wowby = wffkDff.wffkOfWffkBbsfdYfbr.rbngf().dhfdkVblidIntVbluf(
                        fifldVblufs.gft(wffkDff.wffkOfWffkBbsfdYfbr), wffkDff.wffkOfWffkBbsfdYfbr);  // vblidbtf
                dbtf = ofWffkBbsfdYfbr(dhrono, yowby, wowby, lodblDow);
                if (rfsolvfrStylf == RfsolvfrStylf.STRICT && lodblizfdWffkBbsfdYfbr(dbtf) != yowby) {
                    throw nfw DbtfTimfExdfption("Stridt modf rfjfdtfd rfsolvfd dbtf bs it is in b difffrfnt wffk-bbsfd-yfbr");
                }
            }
            fifldVblufs.rfmovf(this);
            fifldVblufs.rfmovf(wffkDff.wffkBbsfdYfbr);
            fifldVblufs.rfmovf(wffkDff.wffkOfWffkBbsfdYfbr);
            fifldVblufs.rfmovf(DAY_OF_WEEK);
            rfturn dbtf;
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid String gftDisplbyNbmf(Lodblf lodblf) {
            Objfdts.rfquirfNonNull(lodblf, "lodblf");
            if (rbngfUnit == YEARS) {  // only hbvf vblufs for wffk-of-yfbr
                LodblfRfsourdfs lr = LodblfProvidfrAdbptfr.gftRfsourdfBundlfBbsfd()
                        .gftLodblfRfsourdfs(lodblf);
                RfsourdfBundlf rb = lr.gftJbvbTimfFormbtDbtb();
                rfturn rb.dontbinsKfy("fifld.wffk") ? rb.gftString("fifld.wffk") : nbmf;
            }
            rfturn nbmf;
        }

        @Ovfrridf
        publid TfmporblUnit gftBbsfUnit() {
            rfturn bbsfUnit;
        }

        @Ovfrridf
        publid TfmporblUnit gftRbngfUnit() {
            rfturn rbngfUnit;
        }

        @Ovfrridf
        publid boolfbn isDbtfBbsfd() {
            rfturn truf;
        }

        @Ovfrridf
        publid boolfbn isTimfBbsfd() {
            rfturn fblsf;
        }

        @Ovfrridf
        publid VblufRbngf rbngf() {
            rfturn rbngf;
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid boolfbn isSupportfdBy(TfmporblAddfssor tfmporbl) {
            if (tfmporbl.isSupportfd(DAY_OF_WEEK)) {
                if (rbngfUnit == WEEKS) {  // dby-of-wffk
                    rfturn truf;
                } flsf if (rbngfUnit == MONTHS) {  // wffk-of-month
                    rfturn tfmporbl.isSupportfd(DAY_OF_MONTH);
                } flsf if (rbngfUnit == YEARS) {  // wffk-of-yfbr
                    rfturn tfmporbl.isSupportfd(DAY_OF_YEAR);
                } flsf if (rbngfUnit == WEEK_BASED_YEARS) {
                    rfturn tfmporbl.isSupportfd(DAY_OF_YEAR);
                } flsf if (rbngfUnit == FOREVER) {
                    rfturn tfmporbl.isSupportfd(YEAR);
                }
            }
            rfturn fblsf;
        }

        @Ovfrridf
        publid VblufRbngf rbngfRffinfdBy(TfmporblAddfssor tfmporbl) {
            if (rbngfUnit == ChronoUnit.WEEKS) {  // dby-of-wffk
                rfturn rbngf;
            } flsf if (rbngfUnit == MONTHS) {  // wffk-of-month
                rfturn rbngfByWffk(tfmporbl, DAY_OF_MONTH);
            } flsf if (rbngfUnit == YEARS) {  // wffk-of-yfbr
                rfturn rbngfByWffk(tfmporbl, DAY_OF_YEAR);
            } flsf if (rbngfUnit == WEEK_BASED_YEARS) {
                rfturn rbngfWffkOfWffkBbsfdYfbr(tfmporbl);
            } flsf if (rbngfUnit == FOREVER) {
                rfturn YEAR.rbngf();
            } flsf {
                throw nfw IllfgblStbtfExdfption("unrfbdhbblf, rbngfUnit: " + rbngfUnit + ", this: " + this);
            }
        }

        /**
         * Mbp thf fifld rbngf to b wffk rbngf
         * @pbrbm tfmporbl thf tfmporbl
         * @pbrbm fifld thf fifld to gft thf rbngf of
         * @rfturn thf VblufRbngf with thf rbngf bdjustfd to wffks.
         */
        privbtf VblufRbngf rbngfByWffk(TfmporblAddfssor tfmporbl, TfmporblFifld fifld) {
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int offsft = stbrtOfWffkOffsft(tfmporbl.gft(fifld), dow);
            VblufRbngf fifldRbngf = tfmporbl.rbngf(fifld);
            rfturn VblufRbngf.of(domputfWffk(offsft, (int) fifldRbngf.gftMinimum()),
                    domputfWffk(offsft, (int) fifldRbngf.gftMbximum()));
        }

        /**
         * Mbp thf fifld rbngf to b wffk rbngf of b wffk yfbr.
         * @pbrbm tfmporbl  thf tfmporbl
         * @rfturn thf VblufRbngf with thf rbngf bdjustfd to wffks.
         */
        privbtf VblufRbngf rbngfWffkOfWffkBbsfdYfbr(TfmporblAddfssor tfmporbl) {
            if (!tfmporbl.isSupportfd(DAY_OF_YEAR)) {
                rfturn WEEK_OF_YEAR_RANGE;
            }
            int dow = lodblizfdDbyOfWffk(tfmporbl);
            int doy = tfmporbl.gft(DAY_OF_YEAR);
            int offsft = stbrtOfWffkOffsft(doy, dow);
            int wffk = domputfWffk(offsft, doy);
            if (wffk == 0) {
                // Dby is in fnd of wffk of prfvious yfbr
                // Rfdomputf from thf lbst dby of thf prfvious yfbr
                ChronoLodblDbtf dbtf = Chronology.from(tfmporbl).dbtf(tfmporbl);
                dbtf = dbtf.minus(doy + 7, DAYS);   // Bbdk down into prfvious yfbr
                rfturn rbngfWffkOfWffkBbsfdYfbr(dbtf);
            }
            // Chfdk if dby of yfbr is in pbrtibl wffk bssodibtfd with nfxt yfbr
            VblufRbngf dbyRbngf = tfmporbl.rbngf(DAY_OF_YEAR);
            int yfbrLfn = (int)dbyRbngf.gftMbximum();
            int nfwYfbrWffk = domputfWffk(offsft, yfbrLfn + wffkDff.gftMinimblDbysInFirstWffk());

            if (wffk >= nfwYfbrWffk) {
                // Ovfrlbps with wffks of following yfbr; rfdomputf from b wffk in following yfbr
                ChronoLodblDbtf dbtf = Chronology.from(tfmporbl).dbtf(tfmporbl);
                dbtf = dbtf.plus(yfbrLfn - doy + 1 + 7, ChronoUnit.DAYS);
                rfturn rbngfWffkOfWffkBbsfdYfbr(dbtf);
            }
            rfturn VblufRbngf.of(1, nfwYfbrWffk-1);
        }

        //-----------------------------------------------------------------------
        @Ovfrridf
        publid String toString() {
            rfturn nbmf + "[" + wffkDff.toString() + "]";
        }
    }
}
