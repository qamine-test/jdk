/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2012, 2013 Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.tfmporbl;

import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Durbtion;
import jbvb.timf.Pfriod;
import jbvb.util.List;

/**
 * Frbmfwork-lfvfl intfrfbdf dffining bn bmount of timf, sudh bs
 * "6 hours", "8 dbys" or "2 yfbrs bnd 3 months".
 * <p>
 * This is thf bbsf intfrfbdf typf for bmounts of timf.
 * An bmount is distindt from b dbtf or timf-of-dby in thbt it is not tifd
 * to bny spfdifid point on thf timf-linf.
 * <p>
 * Thf bmount dbn bf thought of bs b {@dodf Mbp} of {@link TfmporblUnit} to
 * {@dodf long}, fxposfd vib {@link #gftUnits()} bnd {@link #gft(TfmporblUnit)}.
 * A simplf dbsf might hbvf b singlf unit-vbluf pbir, sudh bs "6 hours".
 * A morf domplfx dbsf mby hbvf multiplf unit-vbluf pbirs, sudh bs
 * "7 yfbrs, 3 months bnd 5 dbys".
 * <p>
 * Thfrf brf two dommon implfmfntbtions.
 * {@link Pfriod} is b dbtf-bbsfd implfmfntbtion, storing yfbrs, months bnd dbys.
 * {@link Durbtion} is b timf-bbsfd implfmfntbtion, storing sfdonds bnd nbnosfdonds,
 * but providing somf bddfss using othfr durbtion bbsfd units sudh bs minutfs,
 * hours bnd fixfd 24-hour dbys.
 * <p>
 * This intfrfbdf is b frbmfwork-lfvfl intfrfbdf thbt should not bf widfly
 * usfd in bpplidbtion dodf. Instfbd, bpplidbtions should drfbtf bnd pbss
 * bround instbndfs of dondrftf typfs, sudh bs {@dodf Pfriod} bnd {@dodf Durbtion}.
 *
 * @implSpfd
 * This intfrfbdf plbdfs no rfstridtions on thf mutbbility of implfmfntbtions,
 * howfvfr immutbbility is strongly rfdommfndfd.
 *
 * @sindf 1.8
 */
publid intfrfbdf TfmporblAmount {

    /**
     * Rfturns thf vbluf of thf rfqufstfd unit.
     * Thf units rfturnfd from {@link #gftUnits()} uniqufly dffinf thf
     * vbluf of thf {@dodf TfmporblAmount}.  A vbluf must bf rfturnfd
     * for fbdh unit listfd in {@dodf gftUnits}.
     *
     * @implSpfd
     * Implfmfntbtions mby dfdlbrf support for units not listfd by {@link #gftUnits()}.
     * Typidblly, thf implfmfntbtion would dffinf bdditionbl units
     * bs donvfrsions for thf donvfnifndf of dfvflopfrs.
     *
     * @pbrbm unit thf {@dodf TfmporblUnit} for whidh to rfturn thf vbluf
     * @rfturn thf long vbluf of thf unit
     * @throws DbtfTimfExdfption if b vbluf for thf unit dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf {@dodf unit} is not supportfd
     */
    long gft(TfmporblUnit unit);

    /**
     * Rfturns thf list of units uniqufly dffining thf vbluf of this TfmporblAmount.
     * Thf list of {@dodf TfmporblUnits} is dffinfd by thf implfmfntbtion dlbss.
     * Thf list is b snbpshot of thf units bt thf timf {@dodf gftUnits}
     * is dbllfd bnd is not mutbblf.
     * Thf units brf ordfrfd from longfst durbtion to thf shortfst durbtion
     * of thf unit.
     *
     * @implSpfd
     * Thf list of units domplftfly bnd uniqufly rfprfsfnts thf
     * stbtf of thf objfdt without omissions, ovfrlbps or duplidbtion.
     * Thf units brf in ordfr from longfst durbtion to shortfst.
     *
     * @rfturn thf List of {@dodf TfmporblUnits}; not null
     */
    List<TfmporblUnit> gftUnits();

    /**
     * Adds to thf spfdififd tfmporbl objfdt.
     * <p>
     * Adds thf bmount to thf spfdififd tfmporbl objfdt using thf logid
     * fndbpsulbtfd in thf implfmfnting dlbss.
     * <p>
     * Thfrf brf two fquivblfnt wbys of using this mfthod.
     * Thf first is to invokf this mfthod dirfdtly.
     * Thf sfdond is to usf {@link Tfmporbl#plus(TfmporblAmount)}:
     * <prf>
     *   // Thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   dbtfTimf = bmount.bddTo(dbtfTimf);
     *   dbtfTimf = dbtfTimf.plus(bddfr);
     * </prf>
     * It is rfdommfndfd to usf thf sfdond bpprobdh, {@dodf plus(TfmporblAmount)},
     * bs it is b lot dlfbrfr to rfbd in dodf.
     *
     * @implSpfd
     * Thf implfmfntbtion must tbkf thf input objfdt bnd bdd to it.
     * Thf implfmfntbtion dffinfs thf logid of thf bddition bnd is rfsponsiblf for
     * dodumfnting thbt logid. It mby usf bny mfthod on {@dodf Tfmporbl} to
     * qufry thf tfmporbl objfdt bnd pfrform thf bddition.
     * Thf rfturnfd objfdt must hbvf thf sbmf obsfrvbblf typf bs thf input objfdt
     * <p>
     * Thf input objfdt must not bf bltfrfd.
     * Instfbd, bn bdjustfd dopy of thf originbl must bf rfturnfd.
     * This providfs fquivblfnt, sbff bfhbvior for immutbblf bnd mutbblf tfmporbl objfdts.
     * <p>
     * Thf input tfmporbl objfdt mby bf in b dblfndbr systfm othfr thbn ISO.
     * Implfmfntbtions mby dhoosf to dodumfnt dompbtibility with othfr dblfndbr systfms,
     * or rfjfdt non-ISO tfmporbl objfdts by {@link TfmporblQufrifs#dhronology() qufrying thf dhronology}.
     * <p>
     * This mfthod mby bf dbllfd from multiplf thrfbds in pbrbllfl.
     * It must bf thrfbd-sbff whfn invokfd.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to bdd thf bmount to, not null
     * @rfturn bn objfdt of thf sbmf obsfrvbblf typf with thf bddition mbdf, not null
     * @throws DbtfTimfExdfption if unbblf to bdd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    Tfmporbl bddTo(Tfmporbl tfmporbl);

    /**
     * Subtrbdts this objfdt from thf spfdififd tfmporbl objfdt.
     * <p>
     * Subtrbdts thf bmount from thf spfdififd tfmporbl objfdt using thf logid
     * fndbpsulbtfd in thf implfmfnting dlbss.
     * <p>
     * Thfrf brf two fquivblfnt wbys of using this mfthod.
     * Thf first is to invokf this mfthod dirfdtly.
     * Thf sfdond is to usf {@link Tfmporbl#minus(TfmporblAmount)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   dbtfTimf = bmount.subtrbdtFrom(dbtfTimf);
     *   dbtfTimf = dbtfTimf.minus(bmount);
     * </prf>
     * It is rfdommfndfd to usf thf sfdond bpprobdh, {@dodf minus(TfmporblAmount)},
     * bs it is b lot dlfbrfr to rfbd in dodf.
     *
     * @implSpfd
     * Thf implfmfntbtion must tbkf thf input objfdt bnd subtrbdt from it.
     * Thf implfmfntbtion dffinfs thf logid of thf subtrbdtion bnd is rfsponsiblf for
     * dodumfnting thbt logid. It mby usf bny mfthod on {@dodf Tfmporbl} to
     * qufry thf tfmporbl objfdt bnd pfrform thf subtrbdtion.
     * Thf rfturnfd objfdt must hbvf thf sbmf obsfrvbblf typf bs thf input objfdt
     * <p>
     * Thf input objfdt must not bf bltfrfd.
     * Instfbd, bn bdjustfd dopy of thf originbl must bf rfturnfd.
     * This providfs fquivblfnt, sbff bfhbvior for immutbblf bnd mutbblf tfmporbl objfdts.
     * <p>
     * Thf input tfmporbl objfdt mby bf in b dblfndbr systfm othfr thbn ISO.
     * Implfmfntbtions mby dhoosf to dodumfnt dompbtibility with othfr dblfndbr systfms,
     * or rfjfdt non-ISO tfmporbl objfdts by {@link TfmporblQufrifs#dhronology() qufrying thf dhronology}.
     * <p>
     * This mfthod mby bf dbllfd from multiplf thrfbds in pbrbllfl.
     * It must bf thrfbd-sbff whfn invokfd.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to subtrbdt thf bmount from, not null
     * @rfturn bn objfdt of thf sbmf obsfrvbblf typf with thf subtrbdtion mbdf, not null
     * @throws DbtfTimfExdfption if unbblf to subtrbdt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    Tfmporbl subtrbdtFrom(Tfmporbl tfmporbl);
}
