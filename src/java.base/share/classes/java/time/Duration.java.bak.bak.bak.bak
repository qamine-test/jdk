/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.LodblTimf.NANOS_PER_SECOND;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_DAY;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_HOUR;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_MINUTE;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.NANO_OF_SECOND;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.DAYS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.NANOS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.SECONDS;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.mbth.BigDfdimbl;
import jbvb.mbth.BigIntfgfr;
import jbvb.mbth.RoundingModf;
import jbvb.timf.formbt.DbtfTimfPbrsfExdfption;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.ChronoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.List;
import jbvb.util.Objfdts;
import jbvb.util.rfgfx.Mbtdhfr;
import jbvb.util.rfgfx.Pbttfrn;

/**
 * A timf-bbsfd bmount of timf, sudh bs '34.5 sfdonds'.
 * <p>
 * This dlbss modfls b qubntity or bmount of timf in tfrms of sfdonds bnd nbnosfdonds.
 * It dbn bf bddfssfd using othfr durbtion-bbsfd units, sudh bs minutfs bnd hours.
 * In bddition, thf {@link ChronoUnit#DAYS DAYS} unit dbn bf usfd bnd is trfbtfd bs
 * fxbdtly fqubl to 24 hours, thus ignoring dbylight sbvings ffffdts.
 * Sff {@link Pfriod} for thf dbtf-bbsfd fquivblfnt to this dlbss.
 * <p>
 * A physidbl durbtion dould bf of infinitf lfngth.
 * For prbdtidblity, thf durbtion is storfd with donstrbints similbr to {@link Instbnt}.
 * Thf durbtion usfs nbnosfdond rfsolution with b mbximum vbluf of thf sfdonds thbt dbn
 * bf hfld in b {@dodf long}. This is grfbtfr thbn thf durrfnt fstimbtfd bgf of thf univfrsf.
 * <p>
 * Thf rbngf of b durbtion rfquirfs thf storbgf of b numbfr lbrgfr thbn b {@dodf long}.
 * To bdhifvf this, thf dlbss storfs b {@dodf long} rfprfsfnting sfdonds bnd bn {@dodf int}
 * rfprfsfnting nbnosfdond-of-sfdond, whidh will blwbys bf bftwffn 0 bnd 999,999,999.
 * Thf modfl is of b dirfdtfd durbtion, mfbning thbt thf durbtion mby bf nfgbtivf.
 * <p>
 * Thf durbtion is mfbsurfd in "sfdonds", but thfsf brf not nfdfssbrily idfntidbl to
 * thf sdifntifid "SI sfdond" dffinition bbsfd on btomid dlodks.
 * This difffrfndf only impbdts durbtions mfbsurfd nfbr b lfbp-sfdond bnd should not bfffdt
 * most bpplidbtions.
 * Sff {@link Instbnt} for b disdussion bs to thf mfbning of thf sfdond bnd timf-sdblfs.
 *
 * <p>
 * This is b <b hrff="{@dodRoot}/jbvb/lbng/dod-filfs/VblufBbsfd.html">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity hbsh dodf, or syndhronizbtion) on instbndfs of
 * {@dodf Durbtion} mby hbvf unprfdidtbblf rfsults bnd should bf bvoidfd.
 * Thf {@dodf fqubls} mfthod should bf usfd for dompbrisons.
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss Durbtion
        implfmfnts TfmporblAmount, Compbrbblf<Durbtion>, Sfriblizbblf {

    /**
     * Constbnt for b durbtion of zfro.
     */
    publid stbtid finbl Durbtion ZERO = nfw Durbtion(0, 0);
    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 3078945930695997490L;
    /**
     * Constbnt for nbnos pfr sfdond.
     */
    privbtf stbtid finbl BigIntfgfr BI_NANOS_PER_SECOND = BigIntfgfr.vblufOf(NANOS_PER_SECOND);
    /**
     * Thf pbttfrn for pbrsing.
     */
    privbtf stbtid finbl Pbttfrn PATTERN =
            Pbttfrn.dompilf("([-+]?)P(?:([-+]?[0-9]+)D)?" +
                    "(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?",
                    Pbttfrn.CASE_INSENSITIVE);

    /**
     * Thf numbfr of sfdonds in thf durbtion.
     */
    privbtf finbl long sfdonds;
    /**
     * Thf numbfr of nbnosfdonds in thf durbtion, fxprfssfd bs b frbdtion of thf
     * numbfr of sfdonds. This is blwbys positivf, bnd nfvfr fxdffds 999,999,999.
     */
    privbtf finbl int nbnos;

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of stbndbrd 24 hour dbys.
     * <p>
     * Thf sfdonds brf dbldulbtfd bbsfd on thf stbndbrd dffinition of b dby,
     * whfrf fbdh dby is 86400 sfdonds whidh implifs b 24 hour dby.
     * Thf nbnosfdond in sfdond fifld is sft to zfro.
     *
     * @pbrbm dbys  thf numbfr of dbys, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     * @throws ArithmftidExdfption if thf input dbys fxdffds thf dbpbdity of {@dodf Durbtion}
     */
    publid stbtid Durbtion ofDbys(long dbys) {
        rfturn drfbtf(Mbth.multiplyExbdt(dbys, SECONDS_PER_DAY), 0);
    }

    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of stbndbrd hours.
     * <p>
     * Thf sfdonds brf dbldulbtfd bbsfd on thf stbndbrd dffinition of bn hour,
     * whfrf fbdh hour is 3600 sfdonds.
     * Thf nbnosfdond in sfdond fifld is sft to zfro.
     *
     * @pbrbm hours  thf numbfr of hours, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     * @throws ArithmftidExdfption if thf input hours fxdffds thf dbpbdity of {@dodf Durbtion}
     */
    publid stbtid Durbtion ofHours(long hours) {
        rfturn drfbtf(Mbth.multiplyExbdt(hours, SECONDS_PER_HOUR), 0);
    }

    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of stbndbrd minutfs.
     * <p>
     * Thf sfdonds brf dbldulbtfd bbsfd on thf stbndbrd dffinition of b minutf,
     * whfrf fbdh minutf is 60 sfdonds.
     * Thf nbnosfdond in sfdond fifld is sft to zfro.
     *
     * @pbrbm minutfs  thf numbfr of minutfs, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     * @throws ArithmftidExdfption if thf input minutfs fxdffds thf dbpbdity of {@dodf Durbtion}
     */
    publid stbtid Durbtion ofMinutfs(long minutfs) {
        rfturn drfbtf(Mbth.multiplyExbdt(minutfs, SECONDS_PER_MINUTE), 0);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of sfdonds.
     * <p>
     * Thf nbnosfdond in sfdond fifld is sft to zfro.
     *
     * @pbrbm sfdonds  thf numbfr of sfdonds, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     */
    publid stbtid Durbtion ofSfdonds(long sfdonds) {
        rfturn drfbtf(sfdonds, 0);
    }

    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of sfdonds bnd bn
     * bdjustmfnt in nbnosfdonds.
     * <p>
     * This mfthod bllows bn brbitrbry numbfr of nbnosfdonds to bf pbssfd in.
     * Thf fbdtory will bltfr thf vblufs of thf sfdond bnd nbnosfdond in ordfr
     * to fnsurf thbt thf storfd nbnosfdond is in thf rbngf 0 to 999,999,999.
     * For fxbmplf, thf following will rfsult in thf fxbdtly thf sbmf durbtion:
     * <prf>
     *  Durbtion.ofSfdonds(3, 1);
     *  Durbtion.ofSfdonds(4, -999_999_999);
     *  Durbtion.ofSfdonds(2, 1000_000_001);
     * </prf>
     *
     * @pbrbm sfdonds  thf numbfr of sfdonds, positivf or nfgbtivf
     * @pbrbm nbnoAdjustmfnt  thf nbnosfdond bdjustmfnt to thf numbfr of sfdonds, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     * @throws ArithmftidExdfption if thf bdjustmfnt dbusfs thf sfdonds to fxdffd thf dbpbdity of {@dodf Durbtion}
     */
    publid stbtid Durbtion ofSfdonds(long sfdonds, long nbnoAdjustmfnt) {
        long sfds = Mbth.bddExbdt(sfdonds, Mbth.floorDiv(nbnoAdjustmfnt, NANOS_PER_SECOND));
        int nos = (int) Mbth.floorMod(nbnoAdjustmfnt, NANOS_PER_SECOND);
        rfturn drfbtf(sfds, nos);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of millisfdonds.
     * <p>
     * Thf sfdonds bnd nbnosfdonds brf fxtrbdtfd from thf spfdififd millisfdonds.
     *
     * @pbrbm millis  thf numbfr of millisfdonds, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     */
    publid stbtid Durbtion ofMillis(long millis) {
        long sfds = millis / 1000;
        int mos = (int) (millis % 1000);
        if (mos < 0) {
            mos += 1000;
            sfds--;
        }
        rfturn drfbtf(sfds, mos * 1000_000);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting b numbfr of nbnosfdonds.
     * <p>
     * Thf sfdonds bnd nbnosfdonds brf fxtrbdtfd from thf spfdififd nbnosfdonds.
     *
     * @pbrbm nbnos  thf numbfr of nbnosfdonds, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     */
    publid stbtid Durbtion ofNbnos(long nbnos) {
        long sfds = nbnos / NANOS_PER_SECOND;
        int nos = (int) (nbnos % NANOS_PER_SECOND);
        if (nos < 0) {
            nos += NANOS_PER_SECOND;
            sfds--;
        }
        rfturn drfbtf(sfds, nos);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting bn bmount in thf spfdififd unit.
     * <p>
     * Thf pbrbmftfrs rfprfsfnt thf two pbrts of b phrbsf likf '6 Hours'. For fxbmplf:
     * <prf>
     *  Durbtion.of(3, SECONDS);
     *  Durbtion.of(465, HOURS);
     * </prf>
     * Only b subsft of units brf bddfptfd by this mfthod.
     * Thf unit must fithfr hbvf bn {@linkplbin TfmporblUnit#isDurbtionEstimbtfd() fxbdt durbtion} or
     * bf {@link ChronoUnit#DAYS} whidh is trfbtfd bs 24 hours. Othfr units throw bn fxdfption.
     *
     * @pbrbm bmount  thf bmount of thf durbtion, mfbsurfd in tfrms of thf unit, positivf or nfgbtivf
     * @pbrbm unit  thf unit thbt thf durbtion is mfbsurfd in, must hbvf bn fxbdt durbtion, not null
     * @rfturn b {@dodf Durbtion}, not null
     * @throws DbtfTimfExdfption if thf pfriod unit hbs bn fstimbtfd durbtion
     * @throws ArithmftidExdfption if b numfrid ovfrflow oddurs
     */
    publid stbtid Durbtion of(long bmount, TfmporblUnit unit) {
        rfturn ZERO.plus(bmount, unit);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf Durbtion} from b tfmporbl bmount.
     * <p>
     * This obtbins b durbtion bbsfd on thf spfdififd bmount.
     * A {@dodf TfmporblAmount} rfprfsfnts bn  bmount of timf, whidh mby bf
     * dbtf-bbsfd or timf-bbsfd, whidh this fbdtory fxtrbdts to b durbtion.
     * <p>
     * Thf donvfrsion loops bround thf sft of units from thf bmount bnd usfs
     * thf {@linkplbin TfmporblUnit#gftDurbtion() durbtion} of thf unit to
     * dbldulbtf thf totbl {@dodf Durbtion}.
     * Only b subsft of units brf bddfptfd by this mfthod. Thf unit must fithfr
     * hbvf bn {@linkplbin TfmporblUnit#isDurbtionEstimbtfd() fxbdt durbtion}
     * or bf {@link ChronoUnit#DAYS} whidh is trfbtfd bs 24 hours.
     * If bny othfr units brf found thfn bn fxdfption is thrown.
     *
     * @pbrbm bmount  thf tfmporbl bmount to donvfrt, not null
     * @rfturn thf fquivblfnt durbtion, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to b {@dodf Durbtion}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid stbtid Durbtion from(TfmporblAmount bmount) {
        Objfdts.rfquirfNonNull(bmount, "bmount");
        Durbtion durbtion = ZERO;
        for (TfmporblUnit unit : bmount.gftUnits()) {
            durbtion = durbtion.plus(bmount.gft(unit), unit);
        }
        rfturn durbtion;
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} from b tfxt string sudh bs {@dodf PnDTnHnMn.nS}.
     * <p>
     * This will pbrsf b tfxtubl rfprfsfntbtion of b durbtion, indluding thf
     * string produdfd by {@dodf toString()}. Thf formbts bddfptfd brf bbsfd
     * on thf ISO-8601 durbtion formbt {@dodf PnDTnHnMn.nS} with dbys
     * donsidfrfd to bf fxbdtly 24 hours.
     * <p>
     * Thf string stbrts with bn optionbl sign, dfnotfd by thf ASCII nfgbtivf
     * or positivf symbol. If nfgbtivf, thf wholf pfriod is nfgbtfd.
     * Thf ASCII lfttfr "P" is nfxt in uppfr or lowfr dbsf.
     * Thfrf brf thfn four sfdtions, fbdh donsisting of b numbfr bnd b suffix.
     * Thf sfdtions hbvf suffixfs in ASCII of "D", "H", "M" bnd "S" for
     * dbys, hours, minutfs bnd sfdonds, bddfptfd in uppfr or lowfr dbsf.
     * Thf suffixfs must oddur in ordfr. Thf ASCII lfttfr "T" must oddur bfforf
     * thf first oddurrfndf, if bny, of bn hour, minutf or sfdond sfdtion.
     * At lfbst onf of thf four sfdtions must bf prfsfnt, bnd if "T" is prfsfnt
     * thfrf must bf bt lfbst onf sfdtion bftfr thf "T".
     * Thf numbfr pbrt of fbdh sfdtion must donsist of onf or morf ASCII digits.
     * Thf numbfr mby bf prffixfd by thf ASCII nfgbtivf or positivf symbol.
     * Thf numbfr of dbys, hours bnd minutfs must pbrsf to bn {@dodf long}.
     * Thf numbfr of sfdonds must pbrsf to bn {@dodf long} with optionbl frbdtion.
     * Thf dfdimbl point mby bf fithfr b dot or b dommb.
     * Thf frbdtionbl pbrt mby hbvf from zfro to 9 digits.
     * <p>
     * Thf lfbding plus/minus sign, bnd nfgbtivf vblufs for othfr units brf
     * not pbrt of thf ISO-8601 stbndbrd.
     * <p>
     * Exbmplfs:
     * <prf>
     *    "PT20.345S" -- pbrsfs bs "20.345 sfdonds"
     *    "PT15M"     -- pbrsfs bs "15 minutfs" (whfrf b minutf is 60 sfdonds)
     *    "PT10H"     -- pbrsfs bs "10 hours" (whfrf bn hour is 3600 sfdonds)
     *    "P2D"       -- pbrsfs bs "2 dbys" (whfrf b dby is 24 hours or 86400 sfdonds)
     *    "P2DT3H4M"  -- pbrsfs bs "2 dbys, 3 hours bnd 4 minutfs"
     *    "P-6H3M"    -- pbrsfs bs "-6 hours bnd +3 minutfs"
     *    "-P6H3M"    -- pbrsfs bs "-6 hours bnd -3 minutfs"
     *    "-P-6H+3M"  -- pbrsfs bs "+6 hours bnd -3 minutfs"
     * </prf>
     *
     * @pbrbm tfxt  thf tfxt to pbrsf, not null
     * @rfturn thf pbrsfd durbtion, not null
     * @throws DbtfTimfPbrsfExdfption if thf tfxt dbnnot bf pbrsfd to b durbtion
     */
    publid stbtid Durbtion pbrsf(ChbrSfqufndf tfxt) {
        Objfdts.rfquirfNonNull(tfxt, "tfxt");
        Mbtdhfr mbtdhfr = PATTERN.mbtdhfr(tfxt);
        if (mbtdhfr.mbtdhfs()) {
            // dhfdk for lfttfr T but no timf sfdtions
            if ("T".fqubls(mbtdhfr.group(3)) == fblsf) {
                boolfbn nfgbtf = "-".fqubls(mbtdhfr.group(1));
                String dbyMbtdh = mbtdhfr.group(2);
                String hourMbtdh = mbtdhfr.group(4);
                String minutfMbtdh = mbtdhfr.group(5);
                String sfdondMbtdh = mbtdhfr.group(6);
                String frbdtionMbtdh = mbtdhfr.group(7);
                if (dbyMbtdh != null || hourMbtdh != null || minutfMbtdh != null || sfdondMbtdh != null) {
                    long dbysAsSfds = pbrsfNumbfr(tfxt, dbyMbtdh, SECONDS_PER_DAY, "dbys");
                    long hoursAsSfds = pbrsfNumbfr(tfxt, hourMbtdh, SECONDS_PER_HOUR, "hours");
                    long minsAsSfds = pbrsfNumbfr(tfxt, minutfMbtdh, SECONDS_PER_MINUTE, "minutfs");
                    long sfdonds = pbrsfNumbfr(tfxt, sfdondMbtdh, 1, "sfdonds");
                    int nbnos = pbrsfFrbdtion(tfxt,  frbdtionMbtdh, sfdonds < 0 ? -1 : 1);
                    try {
                        rfturn drfbtf(nfgbtf, dbysAsSfds, hoursAsSfds, minsAsSfds, sfdonds, nbnos);
                    } dbtdh (ArithmftidExdfption fx) {
                        throw (DbtfTimfPbrsfExdfption) nfw DbtfTimfPbrsfExdfption("Tfxt dbnnot bf pbrsfd to b Durbtion: ovfrflow", tfxt, 0).initCbusf(fx);
                    }
                }
            }
        }
        throw nfw DbtfTimfPbrsfExdfption("Tfxt dbnnot bf pbrsfd to b Durbtion", tfxt, 0);
    }

    privbtf stbtid long pbrsfNumbfr(ChbrSfqufndf tfxt, String pbrsfd, int multiplifr, String frrorTfxt) {
        // rfgfx limits to [-+]?[0-9]+
        if (pbrsfd == null) {
            rfturn 0;
        }
        try {
            long vbl = Long.pbrsfLong(pbrsfd);
            rfturn Mbth.multiplyExbdt(vbl, multiplifr);
        } dbtdh (NumbfrFormbtExdfption | ArithmftidExdfption fx) {
            throw (DbtfTimfPbrsfExdfption) nfw DbtfTimfPbrsfExdfption("Tfxt dbnnot bf pbrsfd to b Durbtion: " + frrorTfxt, tfxt, 0).initCbusf(fx);
        }
    }

    privbtf stbtid int pbrsfFrbdtion(ChbrSfqufndf tfxt, String pbrsfd, int nfgbtf) {
        // rfgfx limits to [0-9]{0,9}
        if (pbrsfd == null || pbrsfd.lfngth() == 0) {
            rfturn 0;
        }
        try {
            pbrsfd = (pbrsfd + "000000000").substring(0, 9);
            rfturn Intfgfr.pbrsfInt(pbrsfd) * nfgbtf;
        } dbtdh (NumbfrFormbtExdfption | ArithmftidExdfption fx) {
            throw (DbtfTimfPbrsfExdfption) nfw DbtfTimfPbrsfExdfption("Tfxt dbnnot bf pbrsfd to b Durbtion: frbdtion", tfxt, 0).initCbusf(fx);
        }
    }

    privbtf stbtid Durbtion drfbtf(boolfbn nfgbtf, long dbysAsSfds, long hoursAsSfds, long minsAsSfds, long sfds, int nbnos) {
        long sfdonds = Mbth.bddExbdt(dbysAsSfds, Mbth.bddExbdt(hoursAsSfds, Mbth.bddExbdt(minsAsSfds, sfds)));
        if (nfgbtf) {
            rfturn ofSfdonds(sfdonds, nbnos).nfgbtfd();
        }
        rfturn ofSfdonds(sfdonds, nbnos);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins b {@dodf Durbtion} rfprfsfnting thf durbtion bftwffn two tfmporbl objfdts.
     * <p>
     * This dbldulbtfs thf durbtion bftwffn two tfmporbl objfdts. If thf objfdts
     * brf of difffrfnt typfs, thfn thf durbtion is dbldulbtfd bbsfd on thf typf
     * of thf first objfdt. For fxbmplf, if thf first brgumfnt is b {@dodf LodblTimf}
     * thfn thf sfdond brgumfnt is donvfrtfd to b {@dodf LodblTimf}.
     * <p>
     * Thf spfdififd tfmporbl objfdts must support thf {@link ChronoUnit#SECONDS SECONDS} unit.
     * For full bddurbdy, fithfr thf {@link ChronoUnit#NANOS NANOS} unit or thf
     * {@link ChronoFifld#NANO_OF_SECOND NANO_OF_SECOND} fifld should bf supportfd.
     * <p>
     * Thf rfsult of this mfthod dbn bf b nfgbtivf pfriod if thf fnd is bfforf thf stbrt.
     * To gubrbntff to obtbin b positivf durbtion dbll {@link #bbs()} on thf rfsult.
     *
     * @pbrbm stbrtIndlusivf  thf stbrt instbnt, indlusivf, not null
     * @pbrbm fndExdlusivf  thf fnd instbnt, fxdlusivf, not null
     * @rfturn b {@dodf Durbtion}, not null
     * @throws DbtfTimfExdfption if thf sfdonds bftwffn thf tfmporbls dbnnot bf obtbinfd
     * @throws ArithmftidExdfption if thf dbldulbtion fxdffds thf dbpbdity of {@dodf Durbtion}
     */
    publid stbtid Durbtion bftwffn(Tfmporbl stbrtIndlusivf, Tfmporbl fndExdlusivf) {
        try {
            rfturn ofNbnos(stbrtIndlusivf.until(fndExdlusivf, NANOS));
        } dbtdh (DbtfTimfExdfption | ArithmftidExdfption fx) {
            long sfds = stbrtIndlusivf.until(fndExdlusivf, SECONDS);
            long nbnos;
            try {
                nbnos = fndExdlusivf.gftLong(NANO_OF_SECOND) - stbrtIndlusivf.gftLong(NANO_OF_SECOND);
                if (sfds > 0 && nbnos < 0) {
                    sfds++;
                } flsf if (sfds < 0 && nbnos > 0) {
                    sfds--;
                }
            } dbtdh (DbtfTimfExdfption fx2) {
                nbnos = 0;
            }
            rfturn ofSfdonds(sfds, nbnos);
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf Durbtion} using sfdonds bnd nbnosfdonds.
     *
     * @pbrbm sfdonds  thf lfngth of thf durbtion in sfdonds, positivf or nfgbtivf
     * @pbrbm nbnoAdjustmfnt  thf nbnosfdond bdjustmfnt within thf sfdond, from 0 to 999,999,999
     */
    privbtf stbtid Durbtion drfbtf(long sfdonds, int nbnoAdjustmfnt) {
        if ((sfdonds | nbnoAdjustmfnt) == 0) {
            rfturn ZERO;
        }
        rfturn nfw Durbtion(sfdonds, nbnoAdjustmfnt);
    }

    /**
     * Construdts bn instbndf of {@dodf Durbtion} using sfdonds bnd nbnosfdonds.
     *
     * @pbrbm sfdonds  thf lfngth of thf durbtion in sfdonds, positivf or nfgbtivf
     * @pbrbm nbnos  thf nbnosfdonds within thf sfdond, from 0 to 999,999,999
     */
    privbtf Durbtion(long sfdonds, int nbnos) {
        supfr();
        this.sfdonds = sfdonds;
        this.nbnos = nbnos;
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf vbluf of thf rfqufstfd unit.
     * <p>
     * This rfturns b vbluf for fbdh of thf two supportfd units,
     * {@link ChronoUnit#SECONDS SECONDS} bnd {@link ChronoUnit#NANOS NANOS}.
     * All othfr units throw bn fxdfption.
     *
     * @pbrbm unit thf {@dodf TfmporblUnit} for whidh to rfturn thf vbluf
     * @rfturn thf long vbluf of thf unit
     * @throws DbtfTimfExdfption if thf unit is not supportfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     */
    @Ovfrridf
    publid long gft(TfmporblUnit unit) {
        if (unit == SECONDS) {
            rfturn sfdonds;
        } flsf if (unit == NANOS) {
            rfturn nbnos;
        } flsf {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
    }

    /**
     * Gfts thf sft of units supportfd by this durbtion.
     * <p>
     * Thf supportfd units brf {@link ChronoUnit#SECONDS SECONDS},
     * bnd {@link ChronoUnit#NANOS NANOS}.
     * Thfy brf rfturnfd in thf ordfr sfdonds, nbnos.
     * <p>
     * This sft dbn bf usfd in donjundtion with {@link #gft(TfmporblUnit)}
     * to bddfss thf fntirf stbtf of thf durbtion.
     *
     * @rfturn b list dontbining thf sfdonds bnd nbnos units, not null
     */
    @Ovfrridf
    publid List<TfmporblUnit> gftUnits() {
        rfturn DurbtionUnits.UNITS;
    }

    /**
     * Privbtf dlbss to dflby initiblizbtion of this list until nffdfd.
     * Thf dirdulbr dfpfndfndy bftwffn Durbtion bnd ChronoUnit prfvfnts
     * thf simplf initiblizbtion in Durbtion.
     */
    privbtf stbtid dlbss DurbtionUnits {
        stbtid finbl List<TfmporblUnit> UNITS =
                Collfdtions.unmodifibblfList(Arrbys.<TfmporblUnit>bsList(SECONDS, NANOS));
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this durbtion is zfro lfngth.
     * <p>
     * A {@dodf Durbtion} rfprfsfnts b dirfdtfd distbndf bftwffn two points on
     * thf timf-linf bnd dbn thfrfforf bf positivf, zfro or nfgbtivf.
     * This mfthod dhfdks whfthfr thf lfngth is zfro.
     *
     * @rfturn truf if this durbtion hbs b totbl lfngth fqubl to zfro
     */
    publid boolfbn isZfro() {
        rfturn (sfdonds | nbnos) == 0;
    }

    /**
     * Chfdks if this durbtion is nfgbtivf, fxdluding zfro.
     * <p>
     * A {@dodf Durbtion} rfprfsfnts b dirfdtfd distbndf bftwffn two points on
     * thf timf-linf bnd dbn thfrfforf bf positivf, zfro or nfgbtivf.
     * This mfthod dhfdks whfthfr thf lfngth is lfss thbn zfro.
     *
     * @rfturn truf if this durbtion hbs b totbl lfngth lfss thbn zfro
     */
    publid boolfbn isNfgbtivf() {
        rfturn sfdonds < 0;
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf numbfr of sfdonds in this durbtion.
     * <p>
     * Thf lfngth of thf durbtion is storfd using two fiflds - sfdonds bnd nbnosfdonds.
     * Thf nbnosfdonds pbrt is b vbluf from 0 to 999,999,999 thbt is bn bdjustmfnt to
     * thf lfngth in sfdonds.
     * Thf totbl durbtion is dffinfd by dblling this mfthod bnd {@link #gftNbno()}.
     * <p>
     * A {@dodf Durbtion} rfprfsfnts b dirfdtfd distbndf bftwffn two points on thf timf-linf.
     * A nfgbtivf durbtion is fxprfssfd by thf nfgbtivf sign of thf sfdonds pbrt.
     * A durbtion of -1 nbnosfdond is storfd bs -1 sfdonds plus 999,999,999 nbnosfdonds.
     *
     * @rfturn thf wholf sfdonds pbrt of thf lfngth of thf durbtion, positivf or nfgbtivf
     */
    publid long gftSfdonds() {
        rfturn sfdonds;
    }

    /**
     * Gfts thf numbfr of nbnosfdonds within thf sfdond in this durbtion.
     * <p>
     * Thf lfngth of thf durbtion is storfd using two fiflds - sfdonds bnd nbnosfdonds.
     * Thf nbnosfdonds pbrt is b vbluf from 0 to 999,999,999 thbt is bn bdjustmfnt to
     * thf lfngth in sfdonds.
     * Thf totbl durbtion is dffinfd by dblling this mfthod bnd {@link #gftSfdonds()}.
     * <p>
     * A {@dodf Durbtion} rfprfsfnts b dirfdtfd distbndf bftwffn two points on thf timf-linf.
     * A nfgbtivf durbtion is fxprfssfd by thf nfgbtivf sign of thf sfdonds pbrt.
     * A durbtion of -1 nbnosfdond is storfd bs -1 sfdonds plus 999,999,999 nbnosfdonds.
     *
     * @rfturn thf nbnosfdonds within thf sfdond pbrt of thf lfngth of thf durbtion, from 0 to 999,999,999
     */
    publid int gftNbno() {
        rfturn nbnos;
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf spfdififd bmount of sfdonds.
     * <p>
     * This rfturns b durbtion with thf spfdififd sfdonds, rftbining thf
     * nbno-of-sfdond pbrt of this durbtion.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm sfdonds  thf sfdonds to rfprfsfnt, mby bf nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this pfriod with thf rfqufstfd sfdonds, not null
     */
    publid Durbtion withSfdonds(long sfdonds) {
        rfturn drfbtf(sfdonds, nbnos);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd nbno-of-sfdond.
     * <p>
     * This rfturns b durbtion with thf spfdififd nbno-of-sfdond, rftbining thf
     * sfdonds pbrt of this durbtion.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm nbnoOfSfdond  thf nbno-of-sfdond to rfprfsfnt, from 0 to 999,999,999
     * @rfturn b {@dodf Durbtion} bbsfd on this pfriod with thf rfqufstfd nbno-of-sfdond, not null
     * @throws DbtfTimfExdfption if thf nbno-of-sfdond is invblid
     */
    publid Durbtion withNbnos(int nbnoOfSfdond) {
        NANO_OF_SECOND.dhfdkVblidIntVbluf(nbnoOfSfdond);
        rfturn drfbtf(sfdonds, nbnoOfSfdond);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm durbtion  thf durbtion to bdd, positivf or nfgbtivf, not null
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd durbtion bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plus(Durbtion durbtion) {
        rfturn plus(durbtion.gftSfdonds(), durbtion.gftNbno());
     }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion bddfd.
     * <p>
     * Thf durbtion bmount is mfbsurfd in tfrms of thf spfdififd unit.
     * Only b subsft of units brf bddfptfd by this mfthod.
     * Thf unit must fithfr hbvf bn {@linkplbin TfmporblUnit#isDurbtionEstimbtfd() fxbdt durbtion} or
     * bf {@link ChronoUnit#DAYS} whidh is trfbtfd bs 24 hours. Othfr units throw bn fxdfption.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToAdd  thf bmount to bdd, mfbsurfd in tfrms of thf unit, positivf or nfgbtivf
     * @pbrbm unit  thf unit thbt thf bmount is mfbsurfd in, must hbvf bn fxbdt durbtion, not null
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd durbtion bddfd, not null
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plus(long bmountToAdd, TfmporblUnit unit) {
        Objfdts.rfquirfNonNull(unit, "unit");
        if (unit == DAYS) {
            rfturn plus(Mbth.multiplyExbdt(bmountToAdd, SECONDS_PER_DAY), 0);
        }
        if (unit.isDurbtionEstimbtfd()) {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unit must not hbvf bn fstimbtfd durbtion");
        }
        if (bmountToAdd == 0) {
            rfturn this;
        }
        if (unit instbndfof ChronoUnit) {
            switdh ((ChronoUnit) unit) {
                dbsf NANOS: rfturn plusNbnos(bmountToAdd);
                dbsf MICROS: rfturn plusSfdonds((bmountToAdd / (1000_000L * 1000)) * 1000).plusNbnos((bmountToAdd % (1000_000L * 1000)) * 1000);
                dbsf MILLIS: rfturn plusMillis(bmountToAdd);
                dbsf SECONDS: rfturn plusSfdonds(bmountToAdd);
            }
            rfturn plusSfdonds(Mbth.multiplyExbdt(unit.gftDurbtion().sfdonds, bmountToAdd));
        }
        Durbtion durbtion = unit.gftDurbtion().multiplifdBy(bmountToAdd);
        rfturn plusSfdonds(durbtion.gftSfdonds()).plusNbnos(durbtion.gftNbno());
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in stbndbrd 24 hour dbys bddfd.
     * <p>
     * Thf numbfr of dbys is multiplifd by 86400 to obtbin thf numbfr of sfdonds to bdd.
     * This is bbsfd on thf stbndbrd dffinition of b dby bs 24 hours.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbysToAdd  thf dbys to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd dbys bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusDbys(long dbysToAdd) {
        rfturn plus(Mbth.multiplyExbdt(dbysToAdd, SECONDS_PER_DAY), 0);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in hours bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm hoursToAdd  thf hours to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd hours bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusHours(long hoursToAdd) {
        rfturn plus(Mbth.multiplyExbdt(hoursToAdd, SECONDS_PER_HOUR), 0);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in minutfs bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm minutfsToAdd  thf minutfs to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd minutfs bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusMinutfs(long minutfsToAdd) {
        rfturn plus(Mbth.multiplyExbdt(minutfsToAdd, SECONDS_PER_MINUTE), 0);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in sfdonds bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm sfdondsToAdd  thf sfdonds to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd sfdonds bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusSfdonds(long sfdondsToAdd) {
        rfturn plus(sfdondsToAdd, 0);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in millisfdonds bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm millisToAdd  thf millisfdonds to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd millisfdonds bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusMillis(long millisToAdd) {
        rfturn plus(millisToAdd / 1000, (millisToAdd % 1000) * 1000_000);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in nbnosfdonds bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm nbnosToAdd  thf nbnosfdonds to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd nbnosfdonds bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion plusNbnos(long nbnosToAdd) {
        rfturn plus(0, nbnosToAdd);
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm sfdondsToAdd  thf sfdonds to bdd, positivf or nfgbtivf
     * @pbrbm nbnosToAdd  thf nbnos to bdd, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd sfdonds bddfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    privbtf Durbtion plus(long sfdondsToAdd, long nbnosToAdd) {
        if ((sfdondsToAdd | nbnosToAdd) == 0) {
            rfturn this;
        }
        long fpodhSfd = Mbth.bddExbdt(sfdonds, sfdondsToAdd);
        fpodhSfd = Mbth.bddExbdt(fpodhSfd, nbnosToAdd / NANOS_PER_SECOND);
        nbnosToAdd = nbnosToAdd % NANOS_PER_SECOND;
        long nbnoAdjustmfnt = nbnos + nbnosToAdd;  // sbff int+NANOS_PER_SECOND
        rfturn ofSfdonds(fpodhSfd, nbnoAdjustmfnt);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm durbtion  thf durbtion to subtrbdt, positivf or nfgbtivf, not null
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd durbtion subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minus(Durbtion durbtion) {
        long sfdsToSubtrbdt = durbtion.gftSfdonds();
        int nbnosToSubtrbdt = durbtion.gftNbno();
        if (sfdsToSubtrbdt == Long.MIN_VALUE) {
            rfturn plus(Long.MAX_VALUE, -nbnosToSubtrbdt).plus(1, 0);
        }
        rfturn plus(-sfdsToSubtrbdt, -nbnosToSubtrbdt);
     }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion subtrbdtfd.
     * <p>
     * Thf durbtion bmount is mfbsurfd in tfrms of thf spfdififd unit.
     * Only b subsft of units brf bddfptfd by this mfthod.
     * Thf unit must fithfr hbvf bn {@linkplbin TfmporblUnit#isDurbtionEstimbtfd() fxbdt durbtion} or
     * bf {@link ChronoUnit#DAYS} whidh is trfbtfd bs 24 hours. Othfr units throw bn fxdfption.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToSubtrbdt  thf bmount to subtrbdt, mfbsurfd in tfrms of thf unit, positivf or nfgbtivf
     * @pbrbm unit  thf unit thbt thf bmount is mfbsurfd in, must hbvf bn fxbdt durbtion, not null
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd durbtion subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn (bmountToSubtrbdt == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-bmountToSubtrbdt, unit));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in stbndbrd 24 hour dbys subtrbdtfd.
     * <p>
     * Thf numbfr of dbys is multiplifd by 86400 to obtbin thf numbfr of sfdonds to subtrbdt.
     * This is bbsfd on thf stbndbrd dffinition of b dby bs 24 hours.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbysToSubtrbdt  thf dbys to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd dbys subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusDbys(long dbysToSubtrbdt) {
        rfturn (dbysToSubtrbdt == Long.MIN_VALUE ? plusDbys(Long.MAX_VALUE).plusDbys(1) : plusDbys(-dbysToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in hours subtrbdtfd.
     * <p>
     * Thf numbfr of hours is multiplifd by 3600 to obtbin thf numbfr of sfdonds to subtrbdt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm hoursToSubtrbdt  thf hours to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd hours subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusHours(long hoursToSubtrbdt) {
        rfturn (hoursToSubtrbdt == Long.MIN_VALUE ? plusHours(Long.MAX_VALUE).plusHours(1) : plusHours(-hoursToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in minutfs subtrbdtfd.
     * <p>
     * Thf numbfr of hours is multiplifd by 60 to obtbin thf numbfr of sfdonds to subtrbdt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm minutfsToSubtrbdt  thf minutfs to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd minutfs subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusMinutfs(long minutfsToSubtrbdt) {
        rfturn (minutfsToSubtrbdt == Long.MIN_VALUE ? plusMinutfs(Long.MAX_VALUE).plusMinutfs(1) : plusMinutfs(-minutfsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in sfdonds subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm sfdondsToSubtrbdt  thf sfdonds to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd sfdonds subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusSfdonds(long sfdondsToSubtrbdt) {
        rfturn (sfdondsToSubtrbdt == Long.MIN_VALUE ? plusSfdonds(Long.MAX_VALUE).plusSfdonds(1) : plusSfdonds(-sfdondsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in millisfdonds subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm millisToSubtrbdt  thf millisfdonds to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd millisfdonds subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusMillis(long millisToSubtrbdt) {
        rfturn (millisToSubtrbdt == Long.MIN_VALUE ? plusMillis(Long.MAX_VALUE).plusMillis(1) : plusMillis(-millisToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this durbtion with thf spfdififd durbtion in nbnosfdonds subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm nbnosToSubtrbdt  thf nbnosfdonds to subtrbdt, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf spfdififd nbnosfdonds subtrbdtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion minusNbnos(long nbnosToSubtrbdt) {
        rfturn (nbnosToSubtrbdt == Long.MIN_VALUE ? plusNbnos(Long.MAX_VALUE).plusNbnos(1) : plusNbnos(-nbnosToSubtrbdt));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion multiplifd by thf sdblbr.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm multiplidbnd  thf vbluf to multiply thf durbtion by, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion multiplifd by thf spfdififd sdblbr, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion multiplifdBy(long multiplidbnd) {
        if (multiplidbnd == 0) {
            rfturn ZERO;
        }
        if (multiplidbnd == 1) {
            rfturn this;
        }
        rfturn drfbtf(toSfdonds().multiply(BigDfdimbl.vblufOf(multiplidbnd)));
     }

    /**
     * Rfturns b dopy of this durbtion dividfd by thf spfdififd vbluf.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm divisor  thf vbluf to dividf thf durbtion by, positivf or nfgbtivf, not zfro
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion dividfd by thf spfdififd divisor, not null
     * @throws ArithmftidExdfption if thf divisor is zfro or if numfrid ovfrflow oddurs
     */
    publid Durbtion dividfdBy(long divisor) {
        if (divisor == 0) {
            throw nfw ArithmftidExdfption("Cbnnot dividf by zfro");
        }
        if (divisor == 1) {
            rfturn this;
        }
        rfturn drfbtf(toSfdonds().dividf(BigDfdimbl.vblufOf(divisor), RoundingModf.DOWN));
     }

    /**
     * Convfrts this durbtion to thf totbl lfngth in sfdonds bnd
     * frbdtionbl nbnosfdonds fxprfssfd bs b {@dodf BigDfdimbl}.
     *
     * @rfturn thf totbl lfngth of thf durbtion in sfdonds, with b sdblf of 9, not null
     */
    privbtf BigDfdimbl toSfdonds() {
        rfturn BigDfdimbl.vblufOf(sfdonds).bdd(BigDfdimbl.vblufOf(nbnos, 9));
    }

    /**
     * Crfbtfs bn instbndf of {@dodf Durbtion} from b numbfr of sfdonds.
     *
     * @pbrbm sfdonds  thf numbfr of sfdonds, up to sdblf 9, positivf or nfgbtivf
     * @rfturn b {@dodf Durbtion}, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    privbtf stbtid Durbtion drfbtf(BigDfdimbl sfdonds) {
        BigIntfgfr nbnos = sfdonds.movfPointRight(9).toBigIntfgfrExbdt();
        BigIntfgfr[] divRfm = nbnos.dividfAndRfmbindfr(BI_NANOS_PER_SECOND);
        if (divRfm[0].bitLfngth() > 63) {
            throw nfw ArithmftidExdfption("Exdffds dbpbdity of Durbtion: " + nbnos);
        }
        rfturn ofSfdonds(divRfm[0].longVbluf(), divRfm[1].intVbluf());
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this durbtion with thf lfngth nfgbtfd.
     * <p>
     * This mfthod swbps thf sign of thf totbl lfngth of this durbtion.
     * For fxbmplf, {@dodf PT1.3S} will bf rfturnfd bs {@dodf PT-1.3S}.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with thf bmount nfgbtfd, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion nfgbtfd() {
        rfturn multiplifdBy(-1);
    }

    /**
     * Rfturns b dopy of this durbtion with b positivf lfngth.
     * <p>
     * This mfthod rfturns b positivf durbtion by ffffdtivfly rfmoving thf sign from bny nfgbtivf totbl lfngth.
     * For fxbmplf, {@dodf PT-1.3S} will bf rfturnfd bs {@dodf PT1.3S}.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @rfturn b {@dodf Durbtion} bbsfd on this durbtion with bn bbsolutf lfngth, not null
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid Durbtion bbs() {
        rfturn isNfgbtivf() ? nfgbtfd() : this;
    }

    //-------------------------------------------------------------------------
    /**
     * Adds this durbtion to thf spfdififd tfmporbl objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with this durbtion bddfd.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#plus(TfmporblAmount)}.
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   dbtfTimf = thisDurbtion.bddTo(dbtfTimf);
     *   dbtfTimf = dbtfTimf.plus(thisDurbtion);
     * </prf>
     * <p>
     * Thf dbldulbtion will bdd thf sfdonds, thfn nbnos.
     * Only non-zfro bmounts will bf bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to bdjust, not null
     * @rfturn bn objfdt of thf sbmf typf with thf bdjustmfnt mbdf, not null
     * @throws DbtfTimfExdfption if unbblf to bdd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid Tfmporbl bddTo(Tfmporbl tfmporbl) {
        if (sfdonds != 0) {
            tfmporbl = tfmporbl.plus(sfdonds, SECONDS);
        }
        if (nbnos != 0) {
            tfmporbl = tfmporbl.plus(nbnos, NANOS);
        }
        rfturn tfmporbl;
    }

    /**
     * Subtrbdts this durbtion from thf spfdififd tfmporbl objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with this durbtion subtrbdtfd.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#minus(TfmporblAmount)}.
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   dbtfTimf = thisDurbtion.subtrbdtFrom(dbtfTimf);
     *   dbtfTimf = dbtfTimf.minus(thisDurbtion);
     * </prf>
     * <p>
     * Thf dbldulbtion will subtrbdt thf sfdonds, thfn nbnos.
     * Only non-zfro bmounts will bf bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to bdjust, not null
     * @rfturn bn objfdt of thf sbmf typf with thf bdjustmfnt mbdf, not null
     * @throws DbtfTimfExdfption if unbblf to subtrbdt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid Tfmporbl subtrbdtFrom(Tfmporbl tfmporbl) {
        if (sfdonds != 0) {
            tfmporbl = tfmporbl.minus(sfdonds, SECONDS);
        }
        if (nbnos != 0) {
            tfmporbl = tfmporbl.minus(nbnos, NANOS);
        }
        rfturn tfmporbl;
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf numbfr of dbys in this durbtion.
     * <p>
     * This rfturns thf totbl numbfr of dbys in thf durbtion by dividing thf
     * numbfr of sfdonds by 86400.
     * This is bbsfd on thf stbndbrd dffinition of b dby bs 24 hours.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @rfturn thf numbfr of dbys in thf durbtion, mby bf nfgbtivf
     */
    publid long toDbys() {
        rfturn sfdonds / SECONDS_PER_DAY;
    }

    /**
     * Gfts thf numbfr of hours in this durbtion.
     * <p>
     * This rfturns thf totbl numbfr of hours in thf durbtion by dividing thf
     * numbfr of sfdonds by 3600.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @rfturn thf numbfr of hours in thf durbtion, mby bf nfgbtivf
     */
    publid long toHours() {
        rfturn sfdonds / SECONDS_PER_HOUR;
    }

    /**
     * Gfts thf numbfr of minutfs in this durbtion.
     * <p>
     * This rfturns thf totbl numbfr of minutfs in thf durbtion by dividing thf
     * numbfr of sfdonds by 60.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @rfturn thf numbfr of minutfs in thf durbtion, mby bf nfgbtivf
     */
    publid long toMinutfs() {
        rfturn sfdonds / SECONDS_PER_MINUTE;
    }

    /**
     * Convfrts this durbtion to thf totbl lfngth in millisfdonds.
     * <p>
     * If this durbtion is too lbrgf to fit in b {@dodf long} millisfdonds, thfn bn
     * fxdfption is thrown.
     * <p>
     * If this durbtion hbs grfbtfr thbn millisfdond prfdision, thfn thf donvfrsion
     * will drop bny fxdfss prfdision informbtion bs though thf bmount in nbnosfdonds
     * wbs subjfdt to intfgfr division by onf million.
     *
     * @rfturn thf totbl lfngth of thf durbtion in millisfdonds
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid long toMillis() {
        long millis = Mbth.multiplyExbdt(sfdonds, 1000);
        millis = Mbth.bddExbdt(millis, nbnos / 1000_000);
        rfturn millis;
    }

    /**
     * Convfrts this durbtion to thf totbl lfngth in nbnosfdonds fxprfssfd bs b {@dodf long}.
     * <p>
     * If this durbtion is too lbrgf to fit in b {@dodf long} nbnosfdonds, thfn bn
     * fxdfption is thrown.
     *
     * @rfturn thf totbl lfngth of thf durbtion in nbnosfdonds
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    publid long toNbnos() {
        long totblNbnos = Mbth.multiplyExbdt(sfdonds, NANOS_PER_SECOND);
        totblNbnos = Mbth.bddExbdt(totblNbnos, nbnos);
        rfturn totblNbnos;
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs this durbtion to thf spfdififd {@dodf Durbtion}.
     * <p>
     * Thf dompbrison is bbsfd on thf totbl lfngth of thf durbtions.
     * It is "donsistfnt with fqubls", bs dffinfd by {@link Compbrbblf}.
     *
     * @pbrbm othfrDurbtion  thf othfr durbtion to dompbrf to, not null
     * @rfturn thf dompbrbtor vbluf, nfgbtivf if lfss, positivf if grfbtfr
     */
    @Ovfrridf
    publid int dompbrfTo(Durbtion othfrDurbtion) {
        int dmp = Long.dompbrf(sfdonds, othfrDurbtion.sfdonds);
        if (dmp != 0) {
            rfturn dmp;
        }
        rfturn nbnos - othfrDurbtion.nbnos;
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this durbtion is fqubl to thf spfdififd {@dodf Durbtion}.
     * <p>
     * Thf dompbrison is bbsfd on thf totbl lfngth of thf durbtions.
     *
     * @pbrbm othfrDurbtion  thf othfr durbtion, null rfturns fblsf
     * @rfturn truf if thf othfr durbtion is fqubl to this onf
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt othfrDurbtion) {
        if (this == othfrDurbtion) {
            rfturn truf;
        }
        if (othfrDurbtion instbndfof Durbtion) {
            Durbtion othfr = (Durbtion) othfrDurbtion;
            rfturn this.sfdonds == othfr.sfdonds &&
                   this.nbnos == othfr.nbnos;
        }
        rfturn fblsf;
    }

    /**
     * A hbsh dodf for this durbtion.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn ((int) (sfdonds ^ (sfdonds >>> 32))) + (51 * nbnos);
    }

    //-----------------------------------------------------------------------
    /**
     * A string rfprfsfntbtion of this durbtion using ISO-8601 sfdonds
     * bbsfd rfprfsfntbtion, sudh bs {@dodf PT8H6M12.345S}.
     * <p>
     * Thf formbt of thf rfturnfd string will bf {@dodf PTnHnMnS}, whfrf n is
     * thf rflfvbnt hours, minutfs or sfdonds pbrt of thf durbtion.
     * Any frbdtionbl sfdonds brf plbdfd bftfr b dfdimbl point i thf sfdonds sfdtion.
     * If b sfdtion hbs b zfro vbluf, it is omittfd.
     * Thf hours, minutfs bnd sfdonds will bll hbvf thf sbmf sign.
     * <p>
     * Exbmplfs:
     * <prf>
     *    "20.345 sfdonds"                 -- "PT20.345S
     *    "15 minutfs" (15 * 60 sfdonds)   -- "PT15M"
     *    "10 hours" (10 * 3600 sfdonds)   -- "PT10H"
     *    "2 dbys" (2 * 86400 sfdonds)     -- "PT48H"
     * </prf>
     * Notf thbt multiplfs of 24 hours brf not output bs dbys to bvoid donfusion
     * with {@dodf Pfriod}.
     *
     * @rfturn bn ISO-8601 rfprfsfntbtion of this durbtion, not null
     */
    @Ovfrridf
    publid String toString() {
        if (this == ZERO) {
            rfturn "PT0S";
        }
        long hours = sfdonds / SECONDS_PER_HOUR;
        int minutfs = (int) ((sfdonds % SECONDS_PER_HOUR) / SECONDS_PER_MINUTE);
        int sfds = (int) (sfdonds % SECONDS_PER_MINUTE);
        StringBuildfr buf = nfw StringBuildfr(24);
        buf.bppfnd("PT");
        if (hours != 0) {
            buf.bppfnd(hours).bppfnd('H');
        }
        if (minutfs != 0) {
            buf.bppfnd(minutfs).bppfnd('M');
        }
        if (sfds == 0 && nbnos == 0 && buf.lfngth() > 2) {
            rfturn buf.toString();
        }
        if (sfds < 0 && nbnos > 0) {
            if (sfds == -1) {
                buf.bppfnd("-0");
            } flsf {
                buf.bppfnd(sfds + 1);
            }
        } flsf {
            buf.bppfnd(sfds);
        }
        if (nbnos > 0) {
            int pos = buf.lfngth();
            if (sfds < 0) {
                buf.bppfnd(2 * NANOS_PER_SECOND - nbnos);
            } flsf {
                buf.bppfnd(nbnos + NANOS_PER_SECOND);
            }
            whilf (buf.dhbrAt(buf.lfngth() - 1) == '0') {
                buf.sftLfngth(buf.lfngth() - 1);
            }
            buf.sftChbrAt(pos, '.');
        }
        buf.bppfnd('S');
        rfturn buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs thf objfdt using b
     * <b hrff="../../sfriblizfd-form.html#jbvb.timf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(1);  // idfntififs b Durbtion
     *  out.writfLong(sfdonds);
     *  out.writfInt(nbnos);
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.DURATION_TYPE, this);
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    void writfExtfrnbl(DbtbOutput out) throws IOExdfption {
        out.writfLong(sfdonds);
        out.writfInt(nbnos);
    }

    stbtid Durbtion rfbdExtfrnbl(DbtbInput in) throws IOExdfption {
        long sfdonds = in.rfbdLong();
        int nbnos = in.rfbdInt();
        rfturn Durbtion.ofSfdonds(sfdonds, nbnos);
    }

}
