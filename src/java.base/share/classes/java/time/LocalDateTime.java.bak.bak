/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Copyrigit (d) 2007-2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.LodblTimf.HOURS_PER_DAY;
import stbtid jbvb.timf.LodblTimf.MICROS_PER_DAY;
import stbtid jbvb.timf.LodblTimf.MILLIS_PER_DAY;
import stbtid jbvb.timf.LodblTimf.MINUTES_PER_DAY;
import stbtid jbvb.timf.LodblTimf.NANOS_PER_DAY;
import stbtid jbvb.timf.LodblTimf.NANOS_PER_HOUR;
import stbtid jbvb.timf.LodblTimf.NANOS_PER_MINUTE;
import stbtid jbvb.timf.LodblTimf.NANOS_PER_SECOND;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_DAY;
import stbtid jbvb.timf.tfmporbl.CironoFifld.NANO_OF_SECOND;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.dirono.CironoLodblDbtfTimf;
import jbvb.timf.formbt.DbtfTimfFormbttfr;
import jbvb.timf.formbt.DbtfTimfPbrsfExdfption;
import jbvb.timf.tfmporbl.CironoFifld;
import jbvb.timf.tfmporbl.CironoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.zonf.ZonfRulfs;
import jbvb.util.Objfdts;

/**
 * A dbtf-timf witiout b timf-zonf in tif ISO-8601 dblfndbr systfm,
 * sudi bs {@dodf 2007-12-03T10:15:30}.
 * <p>
 * {@dodf LodblDbtfTimf} is bn immutbblf dbtf-timf objfdt tibt rfprfsfnts b dbtf-timf,
 * oftfn vifwfd bs yfbr-monti-dby-iour-minutf-sfdond. Otifr dbtf bnd timf fiflds,
 * sudi bs dby-of-yfbr, dby-of-wffk bnd wffk-of-yfbr, dbn blso bf bddfssfd.
 * Timf is rfprfsfntfd to nbnosfdond prfdision.
 * For fxbmplf, tif vbluf "2nd Odtobfr 2007 bt 13:45.30.123456789" dbn bf
 * storfd in b {@dodf LodblDbtfTimf}.
 * <p>
 * Tiis dlbss dofs not storf or rfprfsfnt b timf-zonf.
 * Instfbd, it is b dfsdription of tif dbtf, bs usfd for birtidbys, dombinfd witi
 * tif lodbl timf bs sffn on b wbll dlodk.
 * It dbnnot rfprfsfnt bn instbnt on tif timf-linf witiout bdditionbl informbtion
 * sudi bs bn offsft or timf-zonf.
 * <p>
 * Tif ISO-8601 dblfndbr systfm is tif modfrn divil dblfndbr systfm usfd todby
 * in most of tif world. It is fquivblfnt to tif prolfptid Grfgoribn dblfndbr
 * systfm, in wiidi todby's rulfs for lfbp yfbrs brf bpplifd for bll timf.
 * For most bpplidbtions writtfn todby, tif ISO-8601 rulfs brf fntirfly suitbblf.
 * Howfvfr, bny bpplidbtion tibt mbkfs usf of iistoridbl dbtfs, bnd rfquirfs tifm
 * to bf bddurbtf will find tif ISO-8601 bpprobdi unsuitbblf.
 *
 * <p>
 * Tiis is b <b irff="{@dodRoot}/jbvb/lbng/dod-filfs/VblufBbsfd.itml">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity ibsi dodf, or syndironizbtion) on instbndfs of
 * {@dodf LodblDbtfTimf} mby ibvf unprfdidtbblf rfsults bnd siould bf bvoidfd.
 * Tif {@dodf fqubls} mftiod siould bf usfd for dompbrisons.
 *
 * @implSpfd
 * Tiis dlbss is immutbblf bnd tirfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss LodblDbtfTimf
        implfmfnts Tfmporbl, TfmporblAdjustfr, CironoLodblDbtfTimf<LodblDbtf>, Sfriblizbblf {

    /**
     * Tif minimum supportfd {@dodf LodblDbtfTimf}, '-999999999-01-01T00:00:00'.
     * Tiis is tif lodbl dbtf-timf of midnigit bt tif stbrt of tif minimum dbtf.
     * Tiis dombinfs {@link LodblDbtf#MIN} bnd {@link LodblTimf#MIN}.
     * Tiis dould bf usfd by bn bpplidbtion bs b "fbr pbst" dbtf-timf.
     */
    publid stbtid finbl LodblDbtfTimf MIN = LodblDbtfTimf.of(LodblDbtf.MIN, LodblTimf.MIN);
    /**
     * Tif mbximum supportfd {@dodf LodblDbtfTimf}, '+999999999-12-31T23:59:59.999999999'.
     * Tiis is tif lodbl dbtf-timf just bfforf midnigit bt tif fnd of tif mbximum dbtf.
     * Tiis dombinfs {@link LodblDbtf#MAX} bnd {@link LodblTimf#MAX}.
     * Tiis dould bf usfd by bn bpplidbtion bs b "fbr futurf" dbtf-timf.
     */
    publid stbtid finbl LodblDbtfTimf MAX = LodblDbtfTimf.of(LodblDbtf.MAX, LodblTimf.MAX);

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 6207766400415563566L;

    /**
     * Tif dbtf pbrt.
     */
    privbtf finbl LodblDbtf dbtf;
    /**
     * Tif timf pbrt.
     */
    privbtf finbl LodblTimf timf;

    //-----------------------------------------------------------------------
    /**
     * Obtbins tif durrfnt dbtf-timf from tif systfm dlodk in tif dffbult timf-zonf.
     * <p>
     * Tiis will qufry tif {@link Clodk#systfmDffbultZonf() systfm dlodk} in tif dffbult
     * timf-zonf to obtbin tif durrfnt dbtf-timf.
     * <p>
     * Using tiis mftiod will prfvfnt tif bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf tif dlodk is ibrd-dodfd.
     *
     * @rfturn tif durrfnt dbtf-timf using tif systfm dlodk bnd dffbult timf-zonf, not null
     */
    publid stbtid LodblDbtfTimf now() {
        rfturn now(Clodk.systfmDffbultZonf());
    }

    /**
     * Obtbins tif durrfnt dbtf-timf from tif systfm dlodk in tif spfdififd timf-zonf.
     * <p>
     * Tiis will qufry tif {@link Clodk#systfm(ZonfId) systfm dlodk} to obtbin tif durrfnt dbtf-timf.
     * Spfdifying tif timf-zonf bvoids dfpfndfndf on tif dffbult timf-zonf.
     * <p>
     * Using tiis mftiod will prfvfnt tif bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf tif dlodk is ibrd-dodfd.
     *
     * @pbrbm zonf  tif zonf ID to usf, not null
     * @rfturn tif durrfnt dbtf-timf using tif systfm dlodk, not null
     */
    publid stbtid LodblDbtfTimf now(ZonfId zonf) {
        rfturn now(Clodk.systfm(zonf));
    }

    /**
     * Obtbins tif durrfnt dbtf-timf from tif spfdififd dlodk.
     * <p>
     * Tiis will qufry tif spfdififd dlodk to obtbin tif durrfnt dbtf-timf.
     * Using tiis mftiod bllows tif usf of bn bltfrnbtf dlodk for tfsting.
     * Tif bltfrnbtf dlodk mby bf introdudfd using {@link Clodk dfpfndfndy injfdtion}.
     *
     * @pbrbm dlodk  tif dlodk to usf, not null
     * @rfturn tif durrfnt dbtf-timf, not null
     */
    publid stbtid LodblDbtfTimf now(Clodk dlodk) {
        Objfdts.rfquirfNonNull(dlodk, "dlodk");
        finbl Instbnt now = dlodk.instbnt();  // dbllfd ondf
        ZonfOffsft offsft = dlodk.gftZonf().gftRulfs().gftOffsft(now);
        rfturn ofEpodiSfdond(now.gftEpodiSfdond(), now.gftNbno(), offsft);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour bnd minutf, sftting tif sfdond bnd nbnosfdond to zfro.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour bnd minutf.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     * Tif sfdond bnd nbnosfdond fiflds will bf sft to zfro.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, not null
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, Monti monti, int dbyOfMonti, int iour, int minutf) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour, minutf bnd sfdond, sftting tif nbnosfdond to zfro.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour, minutf bnd sfdond.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     * Tif nbnosfdond fifld will bf sft to zfro.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, not null
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @pbrbm sfdond  tif sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, Monti monti, int dbyOfMonti, int iour, int minutf, int sfdond) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf, sfdond);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour, minutf, sfdond bnd nbnosfdond.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour, minutf, sfdond bnd nbnosfdond.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, not null
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @pbrbm sfdond  tif sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @pbrbm nbnoOfSfdond  tif nbno-of-sfdond to rfprfsfnt, from 0 to 999,999,999
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, Monti monti, int dbyOfMonti, int iour, int minutf, int sfdond, int nbnoOfSfdond) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf, sfdond, nbnoOfSfdond);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour bnd minutf, sftting tif sfdond bnd nbnosfdond to zfro.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour bnd minutf.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     * Tif sfdond bnd nbnosfdond fiflds will bf sft to zfro.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, int monti, int dbyOfMonti, int iour, int minutf) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour, minutf bnd sfdond, sftting tif nbnosfdond to zfro.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour, minutf bnd sfdond.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     * Tif nbnosfdond fifld will bf sft to zfro.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @pbrbm sfdond  tif sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, int monti, int dbyOfMonti, int iour, int minutf, int sfdond) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf, sfdond);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from yfbr, monti,
     * dby, iour, minutf, sfdond bnd nbnosfdond.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf} witi tif spfdififd yfbr, monti,
     * dby-of-monti, iour, minutf, sfdond bnd nbnosfdond.
     * Tif dby must bf vblid for tif yfbr bnd monti, otifrwisf bn fxdfption will bf tirown.
     *
     * @pbrbm yfbr  tif yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm monti  tif monti-of-yfbr to rfprfsfnt, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @pbrbm dbyOfMonti  tif dby-of-monti to rfprfsfnt, from 1 to 31
     * @pbrbm iour  tif iour-of-dby to rfprfsfnt, from 0 to 23
     * @pbrbm minutf  tif minutf-of-iour to rfprfsfnt, from 0 to 59
     * @pbrbm sfdond  tif sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @pbrbm nbnoOfSfdond  tif nbno-of-sfdond to rfprfsfnt, from 0 to 999,999,999
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif vbluf of bny fifld is out of rbngf,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid stbtid LodblDbtfTimf of(int yfbr, int monti, int dbyOfMonti, int iour, int minutf, int sfdond, int nbnoOfSfdond) {
        LodblDbtf dbtf = LodblDbtf.of(yfbr, monti, dbyOfMonti);
        LodblTimf timf = LodblTimf.of(iour, minutf, sfdond, nbnoOfSfdond);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from b dbtf bnd timf.
     *
     * @pbrbm dbtf  tif lodbl dbtf, not null
     * @pbrbm timf  tif lodbl timf, not null
     * @rfturn tif lodbl dbtf-timf, not null
     */
    publid stbtid LodblDbtfTimf of(LodblDbtf dbtf, LodblTimf timf) {
        Objfdts.rfquirfNonNull(dbtf, "dbtf");
        Objfdts.rfquirfNonNull(timf, "timf");
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    //-------------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from bn {@dodf Instbnt} bnd zonf ID.
     * <p>
     * Tiis drfbtfs b lodbl dbtf-timf bbsfd on tif spfdififd instbnt.
     * First, tif offsft from UTC/Grffnwidi is obtbinfd using tif zonf ID bnd instbnt,
     * wiidi is simplf bs tifrf is only onf vblid offsft for fbdi instbnt.
     * Tifn, tif instbnt bnd offsft brf usfd to dbldulbtf tif lodbl dbtf-timf.
     *
     * @pbrbm instbnt  tif instbnt to drfbtf tif dbtf-timf from, not null
     * @pbrbm zonf  tif timf-zonf, wiidi mby bf bn offsft, not null
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd rbngf
     */
    publid stbtid LodblDbtfTimf ofInstbnt(Instbnt instbnt, ZonfId zonf) {
        Objfdts.rfquirfNonNull(instbnt, "instbnt");
        Objfdts.rfquirfNonNull(zonf, "zonf");
        ZonfRulfs rulfs = zonf.gftRulfs();
        ZonfOffsft offsft = rulfs.gftOffsft(instbnt);
        rfturn ofEpodiSfdond(instbnt.gftEpodiSfdond(), instbnt.gftNbno(), offsft);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} using sfdonds from tif
     * fpodi of 1970-01-01T00:00:00Z.
     * <p>
     * Tiis bllows tif {@link CironoFifld#INSTANT_SECONDS fpodi-sfdond} fifld
     * to bf donvfrtfd to b lodbl dbtf-timf. Tiis is primbrily intfndfd for
     * low-lfvfl donvfrsions rbtifr tibn gfnfrbl bpplidbtion usbgf.
     *
     * @pbrbm fpodiSfdond  tif numbfr of sfdonds from tif fpodi of 1970-01-01T00:00:00Z
     * @pbrbm nbnoOfSfdond  tif nbnosfdond witiin tif sfdond, from 0 to 999,999,999
     * @pbrbm offsft  tif zonf offsft, not null
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd rbngf,
     *  or if tif nbno-of-sfdond is invblid
     */
    publid stbtid LodblDbtfTimf ofEpodiSfdond(long fpodiSfdond, int nbnoOfSfdond, ZonfOffsft offsft) {
        Objfdts.rfquirfNonNull(offsft, "offsft");
        NANO_OF_SECOND.difdkVblidVbluf(nbnoOfSfdond);
        long lodblSfdond = fpodiSfdond + offsft.gftTotblSfdonds();  // ovfrflow dbugit lbtfr
        long lodblEpodiDby = Mbti.floorDiv(lodblSfdond, SECONDS_PER_DAY);
        int sfdsOfDby = (int)Mbti.floorMod(lodblSfdond, SECONDS_PER_DAY);
        LodblDbtf dbtf = LodblDbtf.ofEpodiDby(lodblEpodiDby);
        LodblTimf timf = LodblTimf.ofNbnoOfDby(sfdsOfDby * NANOS_PER_SECOND + nbnoOfSfdond);
        rfturn nfw LodblDbtfTimf(dbtf, timf);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from b tfmporbl objfdt.
     * <p>
     * Tiis obtbins b lodbl dbtf-timf bbsfd on tif spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * wiidi tiis fbdtory donvfrts to bn instbndf of {@dodf LodblDbtfTimf}.
     * <p>
     * Tif donvfrsion fxtrbdts bnd dombinfs tif {@dodf LodblDbtf} bnd tif
     * {@dodf LodblTimf} from tif tfmporbl objfdt.
     * Implfmfntbtions brf pfrmittfd to pfrform optimizbtions sudi bs bddfssing
     * tiosf fiflds tibt brf fquivblfnt to tif rflfvbnt objfdts.
     * <p>
     * Tiis mftiod mbtdifs tif signbturf of tif fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mftiod rfffrfndf, {@dodf LodblDbtfTimf::from}.
     *
     * @pbrbm tfmporbl  tif tfmporbl objfdt to donvfrt, not null
     * @rfturn tif lodbl dbtf-timf, not null
     * @tirows DbtfTimfExdfption if unbblf to donvfrt to b {@dodf LodblDbtfTimf}
     */
    publid stbtid LodblDbtfTimf from(TfmporblAddfssor tfmporbl) {
        if (tfmporbl instbndfof LodblDbtfTimf) {
            rfturn (LodblDbtfTimf) tfmporbl;
        } flsf if (tfmporbl instbndfof ZonfdDbtfTimf) {
            rfturn ((ZonfdDbtfTimf) tfmporbl).toLodblDbtfTimf();
        } flsf if (tfmporbl instbndfof OffsftDbtfTimf) {
            rfturn ((OffsftDbtfTimf) tfmporbl).toLodblDbtfTimf();
        }
        try {
            LodblDbtf dbtf = LodblDbtf.from(tfmporbl);
            LodblTimf timf = LodblTimf.from(tfmporbl);
            rfturn nfw LodblDbtfTimf(dbtf, timf);
        } dbtdi (DbtfTimfExdfption fx) {
            tirow nfw DbtfTimfExdfption("Unbblf to obtbin LodblDbtfTimf from TfmporblAddfssor: " +
                    tfmporbl + " of typf " + tfmporbl.gftClbss().gftNbmf(), fx);
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from b tfxt string sudi bs {@dodf 2007-12-03T10:15:30}.
     * <p>
     * Tif string must rfprfsfnt b vblid dbtf-timf bnd is pbrsfd using
     * {@link jbvb.timf.formbt.DbtfTimfFormbttfr#ISO_LOCAL_DATE_TIME}.
     *
     * @pbrbm tfxt  tif tfxt to pbrsf sudi bs "2007-12-03T10:15:30", not null
     * @rfturn tif pbrsfd lodbl dbtf-timf, not null
     * @tirows DbtfTimfPbrsfExdfption if tif tfxt dbnnot bf pbrsfd
     */
    publid stbtid LodblDbtfTimf pbrsf(CibrSfqufndf tfxt) {
        rfturn pbrsf(tfxt, DbtfTimfFormbttfr.ISO_LOCAL_DATE_TIME);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtfTimf} from b tfxt string using b spfdifid formbttfr.
     * <p>
     * Tif tfxt is pbrsfd using tif formbttfr, rfturning b dbtf-timf.
     *
     * @pbrbm tfxt  tif tfxt to pbrsf, not null
     * @pbrbm formbttfr  tif formbttfr to usf, not null
     * @rfturn tif pbrsfd lodbl dbtf-timf, not null
     * @tirows DbtfTimfPbrsfExdfption if tif tfxt dbnnot bf pbrsfd
     */
    publid stbtid LodblDbtfTimf pbrsf(CibrSfqufndf tfxt, DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.pbrsf(tfxt, LodblDbtfTimf::from);
    }

    //-----------------------------------------------------------------------
    /**
     * Construdtor.
     *
     * @pbrbm dbtf  tif dbtf pbrt of tif dbtf-timf, vblidbtfd not null
     * @pbrbm timf  tif timf pbrt of tif dbtf-timf, vblidbtfd not null
     */
    privbtf LodblDbtfTimf(LodblDbtf dbtf, LodblTimf timf) {
        tiis.dbtf = dbtf;
        tiis.timf = timf;
    }

    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif nfw dbtf bnd timf, difdking
     * to sff if b nfw objfdt is in fbdt rfquirfd.
     *
     * @pbrbm nfwDbtf  tif dbtf of tif nfw dbtf-timf, not null
     * @pbrbm nfwTimf  tif timf of tif nfw dbtf-timf, not null
     * @rfturn tif dbtf-timf, not null
     */
    privbtf LodblDbtfTimf witi(LodblDbtf nfwDbtf, LodblTimf nfwTimf) {
        if (dbtf == nfwDbtf && timf == nfwTimf) {
            rfturn tiis;
        }
        rfturn nfw LodblDbtfTimf(nfwDbtf, nfwTimf);
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if tif spfdififd fifld is supportfd.
     * <p>
     * Tiis difdks if tiis dbtf-timf dbn bf qufrifd for tif spfdififd fifld.
     * If fblsf, tifn dblling tif {@link #rbngf(TfmporblFifld) rbngf},
     * {@link #gft(TfmporblFifld) gft} bnd {@link #witi(TfmporblFifld, long)}
     * mftiods will tirow bn fxdfption.
     * <p>
     * If tif fifld is b {@link CironoFifld} tifn tif qufry is implfmfntfd ifrf.
     * Tif supportfd fiflds brf:
     * <ul>
     * <li>{@dodf NANO_OF_SECOND}
     * <li>{@dodf NANO_OF_DAY}
     * <li>{@dodf MICRO_OF_SECOND}
     * <li>{@dodf MICRO_OF_DAY}
     * <li>{@dodf MILLI_OF_SECOND}
     * <li>{@dodf MILLI_OF_DAY}
     * <li>{@dodf SECOND_OF_MINUTE}
     * <li>{@dodf SECOND_OF_DAY}
     * <li>{@dodf MINUTE_OF_HOUR}
     * <li>{@dodf MINUTE_OF_DAY}
     * <li>{@dodf HOUR_OF_AMPM}
     * <li>{@dodf CLOCK_HOUR_OF_AMPM}
     * <li>{@dodf HOUR_OF_DAY}
     * <li>{@dodf CLOCK_HOUR_OF_DAY}
     * <li>{@dodf AMPM_OF_DAY}
     * <li>{@dodf DAY_OF_WEEK}
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_MONTH}
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_YEAR}
     * <li>{@dodf DAY_OF_MONTH}
     * <li>{@dodf DAY_OF_YEAR}
     * <li>{@dodf EPOCH_DAY}
     * <li>{@dodf ALIGNED_WEEK_OF_MONTH}
     * <li>{@dodf ALIGNED_WEEK_OF_YEAR}
     * <li>{@dodf MONTH_OF_YEAR}
     * <li>{@dodf PROLEPTIC_MONTH}
     * <li>{@dodf YEAR_OF_ERA}
     * <li>{@dodf YEAR}
     * <li>{@dodf ERA}
     * </ul>
     * All otifr {@dodf CironoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If tif fifld is not b {@dodf CironoFifld}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf tiis} bs tif brgumfnt.
     * Wiftifr tif fifld is supportfd is dftfrminfd by tif fifld.
     *
     * @pbrbm fifld  tif fifld to difdk, null rfturns fblsf
     * @rfturn truf if tif fifld is supportfd on tiis dbtf-timf, fblsf if not
     */
    @Ovfrridf
    publid boolfbn isSupportfd(TfmporblFifld fifld) {
        if (fifld instbndfof CironoFifld) {
            CironoFifld f = (CironoFifld) fifld;
            rfturn f.isDbtfBbsfd() || f.isTimfBbsfd();
        }
        rfturn fifld != null && fifld.isSupportfdBy(tiis);
    }

    /**
     * Cifdks if tif spfdififd unit is supportfd.
     * <p>
     * Tiis difdks if tif spfdififd unit dbn bf bddfd to, or subtrbdtfd from, tiis dbtf-timf.
     * If fblsf, tifn dblling tif {@link #plus(long, TfmporblUnit)} bnd
     * {@link #minus(long, TfmporblUnit) minus} mftiods will tirow bn fxdfption.
     * <p>
     * If tif unit is b {@link CironoUnit} tifn tif qufry is implfmfntfd ifrf.
     * Tif supportfd units brf:
     * <ul>
     * <li>{@dodf NANOS}
     * <li>{@dodf MICROS}
     * <li>{@dodf MILLIS}
     * <li>{@dodf SECONDS}
     * <li>{@dodf MINUTES}
     * <li>{@dodf HOURS}
     * <li>{@dodf HALF_DAYS}
     * <li>{@dodf DAYS}
     * <li>{@dodf WEEKS}
     * <li>{@dodf MONTHS}
     * <li>{@dodf YEARS}
     * <li>{@dodf DECADES}
     * <li>{@dodf CENTURIES}
     * <li>{@dodf MILLENNIA}
     * <li>{@dodf ERAS}
     * </ul>
     * All otifr {@dodf CironoUnit} instbndfs will rfturn fblsf.
     * <p>
     * If tif unit is not b {@dodf CironoUnit}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblUnit.isSupportfdBy(Tfmporbl)}
     * pbssing {@dodf tiis} bs tif brgumfnt.
     * Wiftifr tif unit is supportfd is dftfrminfd by tif unit.
     *
     * @pbrbm unit  tif unit to difdk, null rfturns fblsf
     * @rfturn truf if tif unit dbn bf bddfd/subtrbdtfd, fblsf if not
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid boolfbn isSupportfd(TfmporblUnit unit) {
        rfturn CironoLodblDbtfTimf.supfr.isSupportfd(unit);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts tif rbngf of vblid vblufs for tif spfdififd fifld.
     * <p>
     * Tif rbngf objfdt fxprfssfs tif minimum bnd mbximum vblid vblufs for b fifld.
     * Tiis dbtf-timf is usfd to fnibndf tif bddurbdy of tif rfturnfd rbngf.
     * If it is not possiblf to rfturn tif rbngf, bfdbusf tif fifld is not supportfd
     * or for somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * If tif fifld is b {@link CironoFifld} tifn tif qufry is implfmfntfd ifrf.
     * Tif {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn
     * bppropribtf rbngf instbndfs.
     * All otifr {@dodf CironoFifld} instbndfs will tirow bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If tif fifld is not b {@dodf CironoFifld}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf tiis} bs tif brgumfnt.
     * Wiftifr tif rbngf dbn bf obtbinfd is dftfrminfd by tif fifld.
     *
     * @pbrbm fifld  tif fifld to qufry tif rbngf for, not null
     * @rfturn tif rbngf of vblid vblufs for tif fifld, not null
     * @tirows DbtfTimfExdfption if tif rbngf for tif fifld dbnnot bf obtbinfd
     * @tirows UnsupportfdTfmporblTypfExdfption if tif fifld is not supportfd
     */
    @Ovfrridf
    publid VblufRbngf rbngf(TfmporblFifld fifld) {
        if (fifld instbndfof CironoFifld) {
            CironoFifld f = (CironoFifld) fifld;
            rfturn (f.isTimfBbsfd() ? timf.rbngf(fifld) : dbtf.rbngf(fifld));
        }
        rfturn fifld.rbngfRffinfdBy(tiis);
    }

    /**
     * Gfts tif vbluf of tif spfdififd fifld from tiis dbtf-timf bs bn {@dodf int}.
     * <p>
     * Tiis qufrifs tiis dbtf-timf for tif vbluf of tif spfdififd fifld.
     * Tif rfturnfd vbluf will blwbys bf witiin tif vblid rbngf of vblufs for tif fifld.
     * If it is not possiblf to rfturn tif vbluf, bfdbusf tif fifld is not supportfd
     * or for somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * If tif fifld is b {@link CironoFifld} tifn tif qufry is implfmfntfd ifrf.
     * Tif {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on tiis dbtf-timf, fxdfpt {@dodf NANO_OF_DAY}, {@dodf MICRO_OF_DAY},
     * {@dodf EPOCH_DAY} bnd {@dodf PROLEPTIC_MONTH} wiidi brf too lbrgf to fit in
     * bn {@dodf int} bnd tirow b {@dodf UnsupportfdTfmporblTypfExdfption}.
     * All otifr {@dodf CironoFifld} instbndfs will tirow bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If tif fifld is not b {@dodf CironoFifld}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf tiis} bs tif brgumfnt. Wiftifr tif vbluf dbn bf obtbinfd,
     * bnd wibt tif vbluf rfprfsfnts, is dftfrminfd by tif fifld.
     *
     * @pbrbm fifld  tif fifld to gft, not null
     * @rfturn tif vbluf for tif fifld
     * @tirows DbtfTimfExdfption if b vbluf for tif fifld dbnnot bf obtbinfd or
     *         tif vbluf is outsidf tif rbngf of vblid vblufs for tif fifld
     * @tirows UnsupportfdTfmporblTypfExdfption if tif fifld is not supportfd or
     *         tif rbngf of vblufs fxdffds bn {@dodf int}
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid int gft(TfmporblFifld fifld) {
        if (fifld instbndfof CironoFifld) {
            CironoFifld f = (CironoFifld) fifld;
            rfturn (f.isTimfBbsfd() ? timf.gft(fifld) : dbtf.gft(fifld));
        }
        rfturn CironoLodblDbtfTimf.supfr.gft(fifld);
    }

    /**
     * Gfts tif vbluf of tif spfdififd fifld from tiis dbtf-timf bs b {@dodf long}.
     * <p>
     * Tiis qufrifs tiis dbtf-timf for tif vbluf of tif spfdififd fifld.
     * If it is not possiblf to rfturn tif vbluf, bfdbusf tif fifld is not supportfd
     * or for somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * If tif fifld is b {@link CironoFifld} tifn tif qufry is implfmfntfd ifrf.
     * Tif {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on tiis dbtf-timf.
     * All otifr {@dodf CironoFifld} instbndfs will tirow bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If tif fifld is not b {@dodf CironoFifld}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf tiis} bs tif brgumfnt. Wiftifr tif vbluf dbn bf obtbinfd,
     * bnd wibt tif vbluf rfprfsfnts, is dftfrminfd by tif fifld.
     *
     * @pbrbm fifld  tif fifld to gft, not null
     * @rfturn tif vbluf for tif fifld
     * @tirows DbtfTimfExdfption if b vbluf for tif fifld dbnnot bf obtbinfd
     * @tirows UnsupportfdTfmporblTypfExdfption if tif fifld is not supportfd
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long gftLong(TfmporblFifld fifld) {
        if (fifld instbndfof CironoFifld) {
            CironoFifld f = (CironoFifld) fifld;
            rfturn (f.isTimfBbsfd() ? timf.gftLong(fifld) : dbtf.gftLong(fifld));
        }
        rfturn fifld.gftFrom(tiis);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts tif {@dodf LodblDbtf} pbrt of tiis dbtf-timf.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtf} witi tif sbmf yfbr, monti bnd dby
     * bs tiis dbtf-timf.
     *
     * @rfturn tif dbtf pbrt of tiis dbtf-timf, not null
     */
    @Ovfrridf
    publid LodblDbtf toLodblDbtf() {
        rfturn dbtf;
    }

    /**
     * Gfts tif yfbr fifld.
     * <p>
     * Tiis mftiod rfturns tif primitivf {@dodf int} vbluf for tif yfbr.
     * <p>
     * Tif yfbr rfturnfd by tiis mftiod is prolfptid bs pfr {@dodf gft(YEAR)}.
     * To obtbin tif yfbr-of-frb, usf {@dodf gft(YEAR_OF_ERA)}.
     *
     * @rfturn tif yfbr, from MIN_YEAR to MAX_YEAR
     */
    publid int gftYfbr() {
        rfturn dbtf.gftYfbr();
    }

    /**
     * Gfts tif monti-of-yfbr fifld from 1 to 12.
     * <p>
     * Tiis mftiod rfturns tif monti bs bn {@dodf int} from 1 to 12.
     * Applidbtion dodf is frfqufntly dlfbrfr if tif fnum {@link Monti}
     * is usfd by dblling {@link #gftMonti()}.
     *
     * @rfturn tif monti-of-yfbr, from 1 to 12
     * @sff #gftMonti()
     */
    publid int gftMontiVbluf() {
        rfturn dbtf.gftMontiVbluf();
    }

    /**
     * Gfts tif monti-of-yfbr fifld using tif {@dodf Monti} fnum.
     * <p>
     * Tiis mftiod rfturns tif fnum {@link Monti} for tif monti.
     * Tiis bvoids donfusion bs to wibt {@dodf int} vblufs mfbn.
     * If you nffd bddfss to tif primitivf {@dodf int} vbluf tifn tif fnum
     * providfs tif {@link Monti#gftVbluf() int vbluf}.
     *
     * @rfturn tif monti-of-yfbr, not null
     * @sff #gftMontiVbluf()
     */
    publid Monti gftMonti() {
        rfturn dbtf.gftMonti();
    }

    /**
     * Gfts tif dby-of-monti fifld.
     * <p>
     * Tiis mftiod rfturns tif primitivf {@dodf int} vbluf for tif dby-of-monti.
     *
     * @rfturn tif dby-of-monti, from 1 to 31
     */
    publid int gftDbyOfMonti() {
        rfturn dbtf.gftDbyOfMonti();
    }

    /**
     * Gfts tif dby-of-yfbr fifld.
     * <p>
     * Tiis mftiod rfturns tif primitivf {@dodf int} vbluf for tif dby-of-yfbr.
     *
     * @rfturn tif dby-of-yfbr, from 1 to 365, or 366 in b lfbp yfbr
     */
    publid int gftDbyOfYfbr() {
        rfturn dbtf.gftDbyOfYfbr();
    }

    /**
     * Gfts tif dby-of-wffk fifld, wiidi is bn fnum {@dodf DbyOfWffk}.
     * <p>
     * Tiis mftiod rfturns tif fnum {@link DbyOfWffk} for tif dby-of-wffk.
     * Tiis bvoids donfusion bs to wibt {@dodf int} vblufs mfbn.
     * If you nffd bddfss to tif primitivf {@dodf int} vbluf tifn tif fnum
     * providfs tif {@link DbyOfWffk#gftVbluf() int vbluf}.
     * <p>
     * Additionbl informbtion dbn bf obtbinfd from tif {@dodf DbyOfWffk}.
     * Tiis indludfs tfxtubl nbmfs of tif vblufs.
     *
     * @rfturn tif dby-of-wffk, not null
     */
    publid DbyOfWffk gftDbyOfWffk() {
        rfturn dbtf.gftDbyOfWffk();
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts tif {@dodf LodblTimf} pbrt of tiis dbtf-timf.
     * <p>
     * Tiis rfturns b {@dodf LodblTimf} witi tif sbmf iour, minutf, sfdond bnd
     * nbnosfdond bs tiis dbtf-timf.
     *
     * @rfturn tif timf pbrt of tiis dbtf-timf, not null
     */
    @Ovfrridf
    publid LodblTimf toLodblTimf() {
        rfturn timf;
    }

    /**
     * Gfts tif iour-of-dby fifld.
     *
     * @rfturn tif iour-of-dby, from 0 to 23
     */
    publid int gftHour() {
        rfturn timf.gftHour();
    }

    /**
     * Gfts tif minutf-of-iour fifld.
     *
     * @rfturn tif minutf-of-iour, from 0 to 59
     */
    publid int gftMinutf() {
        rfturn timf.gftMinutf();
    }

    /**
     * Gfts tif sfdond-of-minutf fifld.
     *
     * @rfturn tif sfdond-of-minutf, from 0 to 59
     */
    publid int gftSfdond() {
        rfturn timf.gftSfdond();
    }

    /**
     * Gfts tif nbno-of-sfdond fifld.
     *
     * @rfturn tif nbno-of-sfdond, from 0 to 999,999,999
     */
    publid int gftNbno() {
        rfturn timf.gftNbno();
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns bn bdjustfd dopy of tiis dbtf-timf.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif dbtf-timf bdjustfd.
     * Tif bdjustmfnt tbkfs plbdf using tif spfdififd bdjustfr strbtfgy objfdt.
     * Rfbd tif dodumfntbtion of tif bdjustfr to undfrstbnd wibt bdjustmfnt will bf mbdf.
     * <p>
     * A simplf bdjustfr migit simply sft tif onf of tif fiflds, sudi bs tif yfbr fifld.
     * A morf domplfx bdjustfr migit sft tif dbtf to tif lbst dby of tif monti.
     * <p>
     * A sflfdtion of dommon bdjustmfnts is providfd in
     * {@link jbvb.timf.tfmporbl.TfmporblAdjustfrs TfmporblAdjustfrs}.
     * Tifsf indludf finding tif "lbst dby of tif monti" bnd "nfxt Wfdnfsdby".
     * Kfy dbtf-timf dlbssfs blso implfmfnt tif {@dodf TfmporblAdjustfr} intfrfbdf,
     * sudi bs {@link Monti} bnd {@link jbvb.timf.MontiDby MontiDby}.
     * Tif bdjustfr is rfsponsiblf for ibndling spfdibl dbsfs, sudi bs tif vbrying
     * lfngtis of monti bnd lfbp yfbrs.
     * <p>
     * For fxbmplf tiis dodf rfturns b dbtf on tif lbst dby of July:
     * <prf>
     *  import stbtid jbvb.timf.Monti.*;
     *  import stbtid jbvb.timf.tfmporbl.TfmporblAdjustfrs.*;
     *
     *  rfsult = lodblDbtfTimf.witi(JULY).witi(lbstDbyOfMonti());
     * </prf>
     * <p>
     * Tif dlbssfs {@link LodblDbtf} bnd {@link LodblTimf} implfmfnt {@dodf TfmporblAdjustfr},
     * tius tiis mftiod dbn bf usfd to dibngf tif dbtf, timf or offsft:
     * <prf>
     *  rfsult = lodblDbtfTimf.witi(dbtf);
     *  rfsult = lodblDbtfTimf.witi(timf);
     * </prf>
     * <p>
     * Tif rfsult of tiis mftiod is obtbinfd by invoking tif
     * {@link TfmporblAdjustfr#bdjustInto(Tfmporbl)} mftiod on tif
     * spfdififd bdjustfr pbssing {@dodf tiis} bs tif brgumfnt.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm bdjustfr tif bdjustfr to usf, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on {@dodf tiis} witi tif bdjustmfnt mbdf, not null
     * @tirows DbtfTimfExdfption if tif bdjustmfnt dbnnot bf mbdf
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf witi(TfmporblAdjustfr bdjustfr) {
        // optimizbtions
        if (bdjustfr instbndfof LodblDbtf) {
            rfturn witi((LodblDbtf) bdjustfr, timf);
        } flsf if (bdjustfr instbndfof LodblTimf) {
            rfturn witi(dbtf, (LodblTimf) bdjustfr);
        } flsf if (bdjustfr instbndfof LodblDbtfTimf) {
            rfturn (LodblDbtfTimf) bdjustfr;
        }
        rfturn (LodblDbtfTimf) bdjustfr.bdjustInto(tiis);
    }

    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif spfdififd fifld sft to b nfw vbluf.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif vbluf
     * for tif spfdififd fifld dibngfd.
     * Tiis dbn bf usfd to dibngf bny supportfd fifld, sudi bs tif yfbr, monti or dby-of-monti.
     * If it is not possiblf to sft tif vbluf, bfdbusf tif fifld is not supportfd or for
     * somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * In somf dbsfs, dibnging tif spfdififd fifld dbn dbusf tif rfsulting dbtf-timf to bfdomf invblid,
     * sudi bs dibnging tif monti from 31st Jbnubry to Ffbrubry would mbkf tif dby-of-monti invblid.
     * In dbsfs likf tiis, tif fifld is rfsponsiblf for rfsolving tif dbtf. Typidblly it will dioosf
     * tif prfvious vblid dbtf, wiidi would bf tif lbst vblid dby of Ffbrubry in tiis fxbmplf.
     * <p>
     * If tif fifld is b {@link CironoFifld} tifn tif bdjustmfnt is implfmfntfd ifrf.
     * Tif {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will bfibvf bs pfr
     * tif mbtdiing mftiod on {@link LodblDbtf#witi(TfmporblFifld, long) LodblDbtf}
     * or {@link LodblTimf#witi(TfmporblFifld, long) LodblTimf}.
     * All otifr {@dodf CironoFifld} instbndfs will tirow bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If tif fifld is not b {@dodf CironoFifld}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblFifld.bdjustInto(Tfmporbl, long)}
     * pbssing {@dodf tiis} bs tif brgumfnt. In tiis dbsf, tif fifld dftfrminfs
     * wiftifr bnd iow to bdjust tif instbnt.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm fifld  tif fifld to sft in tif rfsult, not null
     * @pbrbm nfwVbluf  tif nfw vbluf of tif fifld in tif rfsult
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on {@dodf tiis} witi tif spfdififd fifld sft, not null
     * @tirows DbtfTimfExdfption if tif fifld dbnnot bf sft
     * @tirows UnsupportfdTfmporblTypfExdfption if tif fifld is not supportfd
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf witi(TfmporblFifld fifld, long nfwVbluf) {
        if (fifld instbndfof CironoFifld) {
            CironoFifld f = (CironoFifld) fifld;
            if (f.isTimfBbsfd()) {
                rfturn witi(dbtf, timf.witi(fifld, nfwVbluf));
            } flsf {
                rfturn witi(dbtf.witi(fifld, nfwVbluf), timf);
            }
        }
        rfturn fifld.bdjustInto(tiis, nfwVbluf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif yfbr bltfrfd.
     * <p>
     * Tif timf dofs not bfffdt tif dbldulbtion bnd will bf tif sbmf in tif rfsult.
     * If tif dby-of-monti is invblid for tif yfbr, it will bf dibngfd to tif lbst vblid dby of tif monti.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm yfbr  tif yfbr to sft in tif rfsult, from MIN_YEAR to MAX_YEAR
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd yfbr, not null
     * @tirows DbtfTimfExdfption if tif yfbr vbluf is invblid
     */
    publid LodblDbtfTimf witiYfbr(int yfbr) {
        rfturn witi(dbtf.witiYfbr(yfbr), timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif monti-of-yfbr bltfrfd.
     * <p>
     * Tif timf dofs not bfffdt tif dbldulbtion bnd will bf tif sbmf in tif rfsult.
     * If tif dby-of-monti is invblid for tif yfbr, it will bf dibngfd to tif lbst vblid dby of tif monti.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm monti  tif monti-of-yfbr to sft in tif rfsult, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd monti, not null
     * @tirows DbtfTimfExdfption if tif monti-of-yfbr vbluf is invblid
     */
    publid LodblDbtfTimf witiMonti(int monti) {
        rfturn witi(dbtf.witiMonti(monti), timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif dby-of-monti bltfrfd.
     * <p>
     * If tif rfsulting dbtf-timf is invblid, bn fxdfption is tirown.
     * Tif timf dofs not bfffdt tif dbldulbtion bnd will bf tif sbmf in tif rfsult.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbyOfMonti  tif dby-of-monti to sft in tif rfsult, from 1 to 28-31
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd dby, not null
     * @tirows DbtfTimfExdfption if tif dby-of-monti vbluf is invblid,
     *  or if tif dby-of-monti is invblid for tif monti-yfbr
     */
    publid LodblDbtfTimf witiDbyOfMonti(int dbyOfMonti) {
        rfturn witi(dbtf.witiDbyOfMonti(dbyOfMonti), timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif dby-of-yfbr bltfrfd.
     * <p>
     * If tif rfsulting dbtf-timf is invblid, bn fxdfption is tirown.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbyOfYfbr  tif dby-of-yfbr to sft in tif rfsult, from 1 to 365-366
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf witi tif rfqufstfd dby, not null
     * @tirows DbtfTimfExdfption if tif dby-of-yfbr vbluf is invblid,
     *  or if tif dby-of-yfbr is invblid for tif yfbr
     */
    publid LodblDbtfTimf witiDbyOfYfbr(int dbyOfYfbr) {
        rfturn witi(dbtf.witiDbyOfYfbr(dbyOfYfbr), timf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif iour-of-dby bltfrfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm iour  tif iour-of-dby to sft in tif rfsult, from 0 to 23
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd iour, not null
     * @tirows DbtfTimfExdfption if tif iour vbluf is invblid
     */
    publid LodblDbtfTimf witiHour(int iour) {
        LodblTimf nfwTimf = timf.witiHour(iour);
        rfturn witi(dbtf, nfwTimf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif minutf-of-iour bltfrfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm minutf  tif minutf-of-iour to sft in tif rfsult, from 0 to 59
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd minutf, not null
     * @tirows DbtfTimfExdfption if tif minutf vbluf is invblid
     */
    publid LodblDbtfTimf witiMinutf(int minutf) {
        LodblTimf nfwTimf = timf.witiMinutf(minutf);
        rfturn witi(dbtf, nfwTimf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif sfdond-of-minutf bltfrfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm sfdond  tif sfdond-of-minutf to sft in tif rfsult, from 0 to 59
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd sfdond, not null
     * @tirows DbtfTimfExdfption if tif sfdond vbluf is invblid
     */
    publid LodblDbtfTimf witiSfdond(int sfdond) {
        LodblTimf nfwTimf = timf.witiSfdond(sfdond);
        rfturn witi(dbtf, nfwTimf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif nbno-of-sfdond bltfrfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm nbnoOfSfdond  tif nbno-of-sfdond to sft in tif rfsult, from 0 to 999,999,999
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif rfqufstfd nbnosfdond, not null
     * @tirows DbtfTimfExdfption if tif nbno vbluf is invblid
     */
    publid LodblDbtfTimf witiNbno(int nbnoOfSfdond) {
        LodblTimf nfwTimf = timf.witiNbno(nbnoOfSfdond);
        rfturn witi(dbtf, nfwTimf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif timf trundbtfd.
     * <p>
     * Trundbtion rfturns b dopy of tif originbl dbtf-timf witi fiflds
     * smbllfr tibn tif spfdififd unit sft to zfro.
     * For fxbmplf, trundbting witi tif {@link CironoUnit#MINUTES minutfs} unit
     * will sft tif sfdond-of-minutf bnd nbno-of-sfdond fifld to zfro.
     * <p>
     * Tif unit must ibvf b {@linkplbin TfmporblUnit#gftDurbtion() durbtion}
     * tibt dividfs into tif lfngti of b stbndbrd dby witiout rfmbindfr.
     * Tiis indludfs bll supplifd timf units on {@link CironoUnit} bnd
     * {@link CironoUnit#DAYS DAYS}. Otifr units tirow bn fxdfption.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm unit  tif unit to trundbtf to, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif timf trundbtfd, not null
     * @tirows DbtfTimfExdfption if unbblf to trundbtf
     * @tirows UnsupportfdTfmporblTypfExdfption if tif unit is not supportfd
     */
    publid LodblDbtfTimf trundbtfdTo(TfmporblUnit unit) {
        rfturn witi(dbtf, timf.trundbtfdTo(unit));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif spfdififd bmount bddfd.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif spfdififd bmount bddfd.
     * Tif bmount is typidblly {@link Pfriod} or {@link Durbtion} but mby bf
     * bny otifr typf implfmfnting tif {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Tif dbldulbtion is dflfgbtfd to tif bmount objfdt by dblling
     * {@link TfmporblAmount#bddTo(Tfmporbl)}. Tif bmount implfmfntbtion is frff
     * to implfmfnt tif bddition in bny wby it wisifs, iowfvfr it typidblly
     * dblls bbdk to {@link #plus(long, TfmporblUnit)}. Consult tif dodumfntbtion
     * of tif bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm bmountToAdd  tif bmount to bdd, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif bddition mbdf, not null
     * @tirows DbtfTimfExdfption if tif bddition dbnnot bf mbdf
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf plus(TfmporblAmount bmountToAdd) {
        if (bmountToAdd instbndfof Pfriod) {
            Pfriod pfriodToAdd = (Pfriod) bmountToAdd;
            rfturn witi(dbtf.plus(pfriodToAdd), timf);
        }
        Objfdts.rfquirfNonNull(bmountToAdd, "bmountToAdd");
        rfturn (LodblDbtfTimf) bmountToAdd.bddTo(tiis);
    }

    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif spfdififd bmount bddfd.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif bmount
     * in tfrms of tif unit bddfd. If it is not possiblf to bdd tif bmount, bfdbusf tif
     * unit is not supportfd or for somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * If tif fifld is b {@link CironoUnit} tifn tif bddition is implfmfntfd ifrf.
     * Dbtf units brf bddfd bs pfr {@link LodblDbtf#plus(long, TfmporblUnit)}.
     * Timf units brf bddfd bs pfr {@link LodblTimf#plus(long, TfmporblUnit)} witi
     * bny ovfrflow in dbys bddfd fquivblfnt to using {@link #plusDbys(long)}.
     * <p>
     * If tif fifld is not b {@dodf CironoUnit}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bddTo(Tfmporbl, long)}
     * pbssing {@dodf tiis} bs tif brgumfnt. In tiis dbsf, tif unit dftfrminfs
     * wiftifr bnd iow to pfrform tif bddition.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm bmountToAdd  tif bmount of tif unit to bdd to tif rfsult, mby bf nfgbtivf
     * @pbrbm unit  tif unit of tif bmount to bdd, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif spfdififd bmount bddfd, not null
     * @tirows DbtfTimfExdfption if tif bddition dbnnot bf mbdf
     * @tirows UnsupportfdTfmporblTypfExdfption if tif unit is not supportfd
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf plus(long bmountToAdd, TfmporblUnit unit) {
        if (unit instbndfof CironoUnit) {
            CironoUnit f = (CironoUnit) unit;
            switdi (f) {
                dbsf NANOS: rfturn plusNbnos(bmountToAdd);
                dbsf MICROS: rfturn plusDbys(bmountToAdd / MICROS_PER_DAY).plusNbnos((bmountToAdd % MICROS_PER_DAY) * 1000);
                dbsf MILLIS: rfturn plusDbys(bmountToAdd / MILLIS_PER_DAY).plusNbnos((bmountToAdd % MILLIS_PER_DAY) * 1000_000);
                dbsf SECONDS: rfturn plusSfdonds(bmountToAdd);
                dbsf MINUTES: rfturn plusMinutfs(bmountToAdd);
                dbsf HOURS: rfturn plusHours(bmountToAdd);
                dbsf HALF_DAYS: rfturn plusDbys(bmountToAdd / 256).plusHours((bmountToAdd % 256) * 12);  // no ovfrflow (256 is multiplf of 2)
            }
            rfturn witi(dbtf.plus(bmountToAdd, unit), timf);
        }
        rfturn unit.bddTo(tiis, bmountToAdd);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of yfbrs bddfd.
     * <p>
     * Tiis mftiod bdds tif spfdififd bmount to tif yfbrs fifld in tirff stfps:
     * <ol>
     * <li>Add tif input yfbrs to tif yfbr fifld</li>
     * <li>Cifdk if tif rfsulting dbtf would bf invblid</li>
     * <li>Adjust tif dby-of-monti to tif lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2008-02-29 (lfbp yfbr) plus onf yfbr would rfsult in tif
     * invblid dbtf 2009-02-29 (stbndbrd yfbr). Instfbd of rfturning bn invblid
     * rfsult, tif lbst vblid dby of tif monti, 2009-02-28, is sflfdtfd instfbd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm yfbrs  tif yfbrs to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif yfbrs bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusYfbrs(long yfbrs) {
        LodblDbtf nfwDbtf = dbtf.plusYfbrs(yfbrs);
        rfturn witi(nfwDbtf, timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of montis bddfd.
     * <p>
     * Tiis mftiod bdds tif spfdififd bmount to tif montis fifld in tirff stfps:
     * <ol>
     * <li>Add tif input montis to tif monti-of-yfbr fifld</li>
     * <li>Cifdk if tif rfsulting dbtf would bf invblid</li>
     * <li>Adjust tif dby-of-monti to tif lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2007-03-31 plus onf monti would rfsult in tif invblid dbtf
     * 2007-04-31. Instfbd of rfturning bn invblid rfsult, tif lbst vblid dby
     * of tif monti, 2007-04-30, is sflfdtfd instfbd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm montis  tif montis to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif montis bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusMontis(long montis) {
        LodblDbtf nfwDbtf = dbtf.plusMontis(montis);
        rfturn witi(nfwDbtf, timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of wffks bddfd.
     * <p>
     * Tiis mftiod bdds tif spfdififd bmount in wffks to tif dbys fifld indrfmfnting
     * tif monti bnd yfbr fiflds bs nfdfssbry to fnsurf tif rfsult rfmbins vblid.
     * Tif rfsult is only invblid if tif mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2008-12-31 plus onf wffk would rfsult in 2009-01-07.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm wffks  tif wffks to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif wffks bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusWffks(long wffks) {
        LodblDbtf nfwDbtf = dbtf.plusWffks(wffks);
        rfturn witi(nfwDbtf, timf);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of dbys bddfd.
     * <p>
     * Tiis mftiod bdds tif spfdififd bmount to tif dbys fifld indrfmfnting tif
     * monti bnd yfbr fiflds bs nfdfssbry to fnsurf tif rfsult rfmbins vblid.
     * Tif rfsult is only invblid if tif mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2008-12-31 plus onf dby would rfsult in 2009-01-01.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbys  tif dbys to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif dbys bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusDbys(long dbys) {
        LodblDbtf nfwDbtf = dbtf.plusDbys(dbys);
        rfturn witi(nfwDbtf, timf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of iours bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm iours  tif iours to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif iours bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusHours(long iours) {
        rfturn plusWitiOvfrflow(dbtf, iours, 0, 0, 0, 1);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of minutfs bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm minutfs  tif minutfs to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif minutfs bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusMinutfs(long minutfs) {
        rfturn plusWitiOvfrflow(dbtf, 0, minutfs, 0, 0, 1);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of sfdonds bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm sfdonds  tif sfdonds to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif sfdonds bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusSfdonds(long sfdonds) {
        rfturn plusWitiOvfrflow(dbtf, 0, 0, sfdonds, 0, 1);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of nbnosfdonds bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm nbnos  tif nbnos to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif nbnosfdonds bddfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf plusNbnos(long nbnos) {
        rfturn plusWitiOvfrflow(dbtf, 0, 0, 0, nbnos, 1);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif spfdififd bmount subtrbdtfd.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif spfdififd bmount subtrbdtfd.
     * Tif bmount is typidblly {@link Pfriod} or {@link Durbtion} but mby bf
     * bny otifr typf implfmfnting tif {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Tif dbldulbtion is dflfgbtfd to tif bmount objfdt by dblling
     * {@link TfmporblAmount#subtrbdtFrom(Tfmporbl)}. Tif bmount implfmfntbtion is frff
     * to implfmfnt tif subtrbdtion in bny wby it wisifs, iowfvfr it typidblly
     * dblls bbdk to {@link #minus(long, TfmporblUnit)}. Consult tif dodumfntbtion
     * of tif bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully subtrbdtfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm bmountToSubtrbdt  tif bmount to subtrbdt, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif subtrbdtion mbdf, not null
     * @tirows DbtfTimfExdfption if tif subtrbdtion dbnnot bf mbdf
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf minus(TfmporblAmount bmountToSubtrbdt) {
        if (bmountToSubtrbdt instbndfof Pfriod) {
            Pfriod pfriodToSubtrbdt = (Pfriod) bmountToSubtrbdt;
            rfturn witi(dbtf.minus(pfriodToSubtrbdt), timf);
        }
        Objfdts.rfquirfNonNull(bmountToSubtrbdt, "bmountToSubtrbdt");
        rfturn (LodblDbtfTimf) bmountToSubtrbdt.subtrbdtFrom(tiis);
    }

    /**
     * Rfturns b dopy of tiis dbtf-timf witi tif spfdififd bmount subtrbdtfd.
     * <p>
     * Tiis rfturns b {@dodf LodblDbtfTimf}, bbsfd on tiis onf, witi tif bmount
     * in tfrms of tif unit subtrbdtfd. If it is not possiblf to subtrbdt tif bmount,
     * bfdbusf tif unit is not supportfd or for somf otifr rfbson, bn fxdfption is tirown.
     * <p>
     * Tiis mftiod is fquivblfnt to {@link #plus(long, TfmporblUnit)} witi tif bmount nfgbtfd.
     * Sff tibt mftiod for b full dfsdription of iow bddition, bnd tius subtrbdtion, works.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm bmountToSubtrbdt  tif bmount of tif unit to subtrbdt from tif rfsult, mby bf nfgbtivf
     * @pbrbm unit  tif unit of tif bmount to subtrbdt, not null
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif spfdififd bmount subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif subtrbdtion dbnnot bf mbdf
     * @tirows UnsupportfdTfmporblTypfExdfption if tif unit is not supportfd
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtfTimf minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn (bmountToSubtrbdt == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-bmountToSubtrbdt, unit));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of yfbrs subtrbdtfd.
     * <p>
     * Tiis mftiod subtrbdts tif spfdififd bmount from tif yfbrs fifld in tirff stfps:
     * <ol>
     * <li>Subtrbdt tif input yfbrs from tif yfbr fifld</li>
     * <li>Cifdk if tif rfsulting dbtf would bf invblid</li>
     * <li>Adjust tif dby-of-monti to tif lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2008-02-29 (lfbp yfbr) minus onf yfbr would rfsult in tif
     * invblid dbtf 2009-02-29 (stbndbrd yfbr). Instfbd of rfturning bn invblid
     * rfsult, tif lbst vblid dby of tif monti, 2009-02-28, is sflfdtfd instfbd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm yfbrs  tif yfbrs to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif yfbrs subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusYfbrs(long yfbrs) {
        rfturn (yfbrs == Long.MIN_VALUE ? plusYfbrs(Long.MAX_VALUE).plusYfbrs(1) : plusYfbrs(-yfbrs));
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of montis subtrbdtfd.
     * <p>
     * Tiis mftiod subtrbdts tif spfdififd bmount from tif montis fifld in tirff stfps:
     * <ol>
     * <li>Subtrbdt tif input montis from tif monti-of-yfbr fifld</li>
     * <li>Cifdk if tif rfsulting dbtf would bf invblid</li>
     * <li>Adjust tif dby-of-monti to tif lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2007-03-31 minus onf monti would rfsult in tif invblid dbtf
     * 2007-04-31. Instfbd of rfturning bn invblid rfsult, tif lbst vblid dby
     * of tif monti, 2007-04-30, is sflfdtfd instfbd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm montis  tif montis to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif montis subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusMontis(long montis) {
        rfturn (montis == Long.MIN_VALUE ? plusMontis(Long.MAX_VALUE).plusMontis(1) : plusMontis(-montis));
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of wffks subtrbdtfd.
     * <p>
     * Tiis mftiod subtrbdts tif spfdififd bmount in wffks from tif dbys fifld dfdrfmfnting
     * tif monti bnd yfbr fiflds bs nfdfssbry to fnsurf tif rfsult rfmbins vblid.
     * Tif rfsult is only invblid if tif mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2009-01-07 minus onf wffk would rfsult in 2008-12-31.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm wffks  tif wffks to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif wffks subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusWffks(long wffks) {
        rfturn (wffks == Long.MIN_VALUE ? plusWffks(Long.MAX_VALUE).plusWffks(1) : plusWffks(-wffks));
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of dbys subtrbdtfd.
     * <p>
     * Tiis mftiod subtrbdts tif spfdififd bmount from tif dbys fifld dfdrfmfnting tif
     * monti bnd yfbr fiflds bs nfdfssbry to fnsurf tif rfsult rfmbins vblid.
     * Tif rfsult is only invblid if tif mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2009-01-01 minus onf dby would rfsult in 2008-12-31.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm dbys  tif dbys to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif dbys subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusDbys(long dbys) {
        rfturn (dbys == Long.MIN_VALUE ? plusDbys(Long.MAX_VALUE).plusDbys(1) : plusDbys(-dbys));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of iours subtrbdtfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm iours  tif iours to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif iours subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusHours(long iours) {
        rfturn plusWitiOvfrflow(dbtf, iours, 0, 0, 0, -1);
   }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of minutfs subtrbdtfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm minutfs  tif minutfs to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif minutfs subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusMinutfs(long minutfs) {
        rfturn plusWitiOvfrflow(dbtf, 0, minutfs, 0, 0, -1);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of sfdonds subtrbdtfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm sfdonds  tif sfdonds to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif sfdonds subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusSfdonds(long sfdonds) {
        rfturn plusWitiOvfrflow(dbtf, 0, 0, sfdonds, 0, -1);
    }

    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd numbfr of nbnosfdonds subtrbdtfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm nbnos  tif nbnos to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtfTimf} bbsfd on tiis dbtf-timf witi tif nbnosfdonds subtrbdtfd, not null
     * @tirows DbtfTimfExdfption if tif rfsult fxdffds tif supportfd dbtf rbngf
     */
    publid LodblDbtfTimf minusNbnos(long nbnos) {
        rfturn plusWitiOvfrflow(dbtf, 0, 0, 0, nbnos, -1);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of tiis {@dodf LodblDbtfTimf} witi tif spfdififd pfriod bddfd.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm nfwDbtf  tif nfw dbtf to bbsf tif dbldulbtion on, not null
     * @pbrbm iours  tif iours to bdd, mby bf nfgbtivf
     * @pbrbm minutfs tif minutfs to bdd, mby bf nfgbtivf
     * @pbrbm sfdonds tif sfdonds to bdd, mby bf nfgbtivf
     * @pbrbm nbnos tif nbnos to bdd, mby bf nfgbtivf
     * @pbrbm sign  tif sign to dftfrminf bdd or subtrbdt
     * @rfturn tif dombinfd rfsult, not null
     */
    privbtf LodblDbtfTimf plusWitiOvfrflow(LodblDbtf nfwDbtf, long iours, long minutfs, long sfdonds, long nbnos, int sign) {
        // 9223372036854775808 long, 2147483648 int
        if ((iours | minutfs | sfdonds | nbnos) == 0) {
            rfturn witi(nfwDbtf, timf);
        }
        long totDbys = nbnos / NANOS_PER_DAY +             //   mbx/24*60*60*1B
                sfdonds / SECONDS_PER_DAY +                //   mbx/24*60*60
                minutfs / MINUTES_PER_DAY +                //   mbx/24*60
                iours / HOURS_PER_DAY;                     //   mbx/24
        totDbys *= sign;                                   // totbl mbx*0.4237...
        long totNbnos = nbnos % NANOS_PER_DAY +                    //   mbx  86400000000000
                (sfdonds % SECONDS_PER_DAY) * NANOS_PER_SECOND +   //   mbx  86400000000000
                (minutfs % MINUTES_PER_DAY) * NANOS_PER_MINUTE +   //   mbx  86400000000000
                (iours % HOURS_PER_DAY) * NANOS_PER_HOUR;          //   mbx  86400000000000
        long durNoD = timf.toNbnoOfDby();                       //   mbx  86400000000000
        totNbnos = totNbnos * sign + durNoD;                    // totbl 432000000000000
        totDbys += Mbti.floorDiv(totNbnos, NANOS_PER_DAY);
        long nfwNoD = Mbti.floorMod(totNbnos, NANOS_PER_DAY);
        LodblTimf nfwTimf = (nfwNoD == durNoD ? timf : LodblTimf.ofNbnoOfDby(nfwNoD));
        rfturn witi(nfwDbtf.plusDbys(totDbys), nfwTimf);
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs tiis dbtf-timf using tif spfdififd qufry.
     * <p>
     * Tiis qufrifs tiis dbtf-timf using tif spfdififd qufry strbtfgy objfdt.
     * Tif {@dodf TfmporblQufry} objfdt dffinfs tif logid to bf usfd to
     * obtbin tif rfsult. Rfbd tif dodumfntbtion of tif qufry to undfrstbnd
     * wibt tif rfsult of tiis mftiod will bf.
     * <p>
     * Tif rfsult of tiis mftiod is obtbinfd by invoking tif
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mftiod on tif
     * spfdififd qufry pbssing {@dodf tiis} bs tif brgumfnt.
     *
     * @pbrbm <R> tif typf of tif rfsult
     * @pbrbm qufry  tif qufry to invokf, not null
     * @rfturn tif qufry rfsult, null mby bf rfturnfd (dffinfd by tif qufry)
     * @tirows DbtfTimfExdfption if unbblf to qufry (dffinfd by tif qufry)
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs (dffinfd by tif qufry)
     */
    @SupprfssWbrnings("undifdkfd")
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.lodblDbtf()) {
            rfturn (R) dbtf;
        }
        rfturn CironoLodblDbtfTimf.supfr.qufry(qufry);
    }

    /**
     * Adjusts tif spfdififd tfmporbl objfdt to ibvf tif sbmf dbtf bnd timf bs tiis objfdt.
     * <p>
     * Tiis rfturns b tfmporbl objfdt of tif sbmf obsfrvbblf typf bs tif input
     * witi tif dbtf bnd timf dibngfd to bf tif sbmf bs tiis.
     * <p>
     * Tif bdjustmfnt is fquivblfnt to using {@link Tfmporbl#witi(TfmporblFifld, long)}
     * twidf, pbssing {@link CironoFifld#EPOCH_DAY} bnd
     * {@link CironoFifld#NANO_OF_DAY} bs tif fiflds.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf tif dblling pbttfrn by using
     * {@link Tfmporbl#witi(TfmporblAdjustfr)}:
     * <prf>
     *   // tifsf two linfs brf fquivblfnt, but tif sfdond bpprobdi is rfdommfndfd
     *   tfmporbl = tiisLodblDbtfTimf.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.witi(tiisLodblDbtfTimf);
     * </prf>
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm tfmporbl  tif tbrgft objfdt to bf bdjustfd, not null
     * @rfturn tif bdjustfd objfdt, not null
     * @tirows DbtfTimfExdfption if unbblf to mbkf tif bdjustmfnt
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn CironoLodblDbtfTimf.supfr.bdjustInto(tfmporbl);
    }

    /**
     * Cbldulbtfs tif bmount of timf until bnotifr dbtf-timf in tfrms of tif spfdififd unit.
     * <p>
     * Tiis dbldulbtfs tif bmount of timf bftwffn two {@dodf LodblDbtfTimf}
     * objfdts in tfrms of b singlf {@dodf TfmporblUnit}.
     * Tif stbrt bnd fnd points brf {@dodf tiis} bnd tif spfdififd dbtf-timf.
     * Tif rfsult will bf nfgbtivf if tif fnd is bfforf tif stbrt.
     * Tif {@dodf Tfmporbl} pbssfd to tiis mftiod is donvfrtfd to b
     * {@dodf LodblDbtfTimf} using {@link #from(TfmporblAddfssor)}.
     * For fxbmplf, tif bmount in dbys bftwffn two dbtf-timfs dbn bf dbldulbtfd
     * using {@dodf stbrtDbtfTimf.until(fndDbtfTimf, DAYS)}.
     * <p>
     * Tif dbldulbtion rfturns b wiolf numbfr, rfprfsfnting tif numbfr of
     * domplftf units bftwffn tif two dbtf-timfs.
     * For fxbmplf, tif bmount in montis bftwffn 2012-06-15T00:00 bnd 2012-08-14T23:59
     * will only bf onf monti bs it is onf minutf siort of two montis.
     * <p>
     * Tifrf brf two fquivblfnt wbys of using tiis mftiod.
     * Tif first is to invokf tiis mftiod.
     * Tif sfdond is to usf {@link TfmporblUnit#bftwffn(Tfmporbl, Tfmporbl)}:
     * <prf>
     *   // tifsf two linfs brf fquivblfnt
     *   bmount = stbrt.until(fnd, MONTHS);
     *   bmount = MONTHS.bftwffn(stbrt, fnd);
     * </prf>
     * Tif dioidf siould bf mbdf bbsfd on wiidi mbkfs tif dodf morf rfbdbblf.
     * <p>
     * Tif dbldulbtion is implfmfntfd in tiis mftiod for {@link CironoUnit}.
     * Tif units {@dodf NANOS}, {@dodf MICROS}, {@dodf MILLIS}, {@dodf SECONDS},
     * {@dodf MINUTES}, {@dodf HOURS} bnd {@dodf HALF_DAYS}, {@dodf DAYS},
     * {@dodf WEEKS}, {@dodf MONTHS}, {@dodf YEARS}, {@dodf DECADES},
     * {@dodf CENTURIES}, {@dodf MILLENNIA} bnd {@dodf ERAS} brf supportfd.
     * Otifr {@dodf CironoUnit} vblufs will tirow bn fxdfption.
     * <p>
     * If tif unit is not b {@dodf CironoUnit}, tifn tif rfsult of tiis mftiod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bftwffn(Tfmporbl, Tfmporbl)}
     * pbssing {@dodf tiis} bs tif first brgumfnt bnd tif donvfrtfd input tfmporbl
     * bs tif sfdond brgumfnt.
     * <p>
     * Tiis instbndf is immutbblf bnd unbfffdtfd by tiis mftiod dbll.
     *
     * @pbrbm fndExdlusivf  tif fnd dbtf, fxdlusivf, wiidi is donvfrtfd to b {@dodf LodblDbtfTimf}, not null
     * @pbrbm unit  tif unit to mfbsurf tif bmount in, not null
     * @rfturn tif bmount of timf bftwffn tiis dbtf-timf bnd tif fnd dbtf-timf
     * @tirows DbtfTimfExdfption if tif bmount dbnnot bf dbldulbtfd, or tif fnd
     *  tfmporbl dbnnot bf donvfrtfd to b {@dodf LodblDbtfTimf}
     * @tirows UnsupportfdTfmporblTypfExdfption if tif unit is not supportfd
     * @tirows AritimftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long until(Tfmporbl fndExdlusivf, TfmporblUnit unit) {
        LodblDbtfTimf fnd = LodblDbtfTimf.from(fndExdlusivf);
        if (unit instbndfof CironoUnit) {
            if (unit.isTimfBbsfd()) {
                long bmount = dbtf.dbysUntil(fnd.dbtf);
                if (bmount == 0) {
                    rfturn timf.until(fnd.timf, unit);
                }
                long timfPbrt = fnd.timf.toNbnoOfDby() - timf.toNbnoOfDby();
                if (bmount > 0) {
                    bmount--;  // sbff
                    timfPbrt += NANOS_PER_DAY;  // sbff
                } flsf {
                    bmount++;  // sbff
                    timfPbrt -= NANOS_PER_DAY;  // sbff
                }
                switdi ((CironoUnit) unit) {
                    dbsf NANOS:
                        bmount = Mbti.multiplyExbdt(bmount, NANOS_PER_DAY);
                        brfbk;
                    dbsf MICROS:
                        bmount = Mbti.multiplyExbdt(bmount, MICROS_PER_DAY);
                        timfPbrt = timfPbrt / 1000;
                        brfbk;
                    dbsf MILLIS:
                        bmount = Mbti.multiplyExbdt(bmount, MILLIS_PER_DAY);
                        timfPbrt = timfPbrt / 1_000_000;
                        brfbk;
                    dbsf SECONDS:
                        bmount = Mbti.multiplyExbdt(bmount, SECONDS_PER_DAY);
                        timfPbrt = timfPbrt / NANOS_PER_SECOND;
                        brfbk;
                    dbsf MINUTES:
                        bmount = Mbti.multiplyExbdt(bmount, MINUTES_PER_DAY);
                        timfPbrt = timfPbrt / NANOS_PER_MINUTE;
                        brfbk;
                    dbsf HOURS:
                        bmount = Mbti.multiplyExbdt(bmount, HOURS_PER_DAY);
                        timfPbrt = timfPbrt / NANOS_PER_HOUR;
                        brfbk;
                    dbsf HALF_DAYS:
                        bmount = Mbti.multiplyExbdt(bmount, 2);
                        timfPbrt = timfPbrt / (NANOS_PER_HOUR * 12);
                        brfbk;
                }
                rfturn Mbti.bddExbdt(bmount, timfPbrt);
            }
            LodblDbtf fndDbtf = fnd.dbtf;
            if (fndDbtf.isAftfr(dbtf) && fnd.timf.isBfforf(timf)) {
                fndDbtf = fndDbtf.minusDbys(1);
            } flsf if (fndDbtf.isBfforf(dbtf) && fnd.timf.isAftfr(timf)) {
                fndDbtf = fndDbtf.plusDbys(1);
            }
            rfturn dbtf.until(fndDbtf, unit);
        }
        rfturn unit.bftwffn(tiis, fnd);
    }

    /**
     * Formbts tiis dbtf-timf using tif spfdififd formbttfr.
     * <p>
     * Tiis dbtf-timf will bf pbssfd to tif formbttfr to produdf b string.
     *
     * @pbrbm formbttfr  tif formbttfr to usf, not null
     * @rfturn tif formbttfd dbtf-timf string, not null
     * @tirows DbtfTimfExdfption if bn frror oddurs during printing
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid String formbt(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.formbt(tiis);
    }

    //-----------------------------------------------------------------------
    /**
     * Combinfs tiis dbtf-timf witi bn offsft to drfbtf bn {@dodf OffsftDbtfTimf}.
     * <p>
     * Tiis rfturns bn {@dodf OffsftDbtfTimf} formfd from tiis dbtf-timf bt tif spfdififd offsft.
     * All possiblf dombinbtions of dbtf-timf bnd offsft brf vblid.
     *
     * @pbrbm offsft  tif offsft to dombinf witi, not null
     * @rfturn tif offsft dbtf-timf formfd from tiis dbtf-timf bnd tif spfdififd offsft, not null
     */
    publid OffsftDbtfTimf btOffsft(ZonfOffsft offsft) {
        rfturn OffsftDbtfTimf.of(tiis, offsft);
    }

    /**
     * Combinfs tiis dbtf-timf witi b timf-zonf to drfbtf b {@dodf ZonfdDbtfTimf}.
     * <p>
     * Tiis rfturns b {@dodf ZonfdDbtfTimf} formfd from tiis dbtf-timf bt tif
     * spfdififd timf-zonf. Tif rfsult will mbtdi tiis dbtf-timf bs dlosfly bs possiblf.
     * Timf-zonf rulfs, sudi bs dbyligit sbvings, mfbn tibt not fvfry lodbl dbtf-timf
     * is vblid for tif spfdififd zonf, tius tif lodbl dbtf-timf mby bf bdjustfd.
     * <p>
     * Tif lodbl dbtf-timf is rfsolvfd to b singlf instbnt on tif timf-linf.
     * Tiis is bdiifvfd by finding b vblid offsft from UTC/Grffnwidi for tif lodbl
     * dbtf-timf bs dffinfd by tif {@link ZonfRulfs rulfs} of tif zonf ID.
     *<p>
     * In most dbsfs, tifrf is only onf vblid offsft for b lodbl dbtf-timf.
     * In tif dbsf of bn ovfrlbp, wifrf dlodks brf sft bbdk, tifrf brf two vblid offsfts.
     * Tiis mftiod usfs tif fbrlifr offsft typidblly dorrfsponding to "summfr".
     * <p>
     * In tif dbsf of b gbp, wifrf dlodks jump forwbrd, tifrf is no vblid offsft.
     * Instfbd, tif lodbl dbtf-timf is bdjustfd to bf lbtfr by tif lfngti of tif gbp.
     * For b typidbl onf iour dbyligit sbvings dibngf, tif lodbl dbtf-timf will bf
     * movfd onf iour lbtfr into tif offsft typidblly dorrfsponding to "summfr".
     * <p>
     * To obtbin tif lbtfr offsft during bn ovfrlbp, dbll
     * {@link ZonfdDbtfTimf#witiLbtfrOffsftAtOvfrlbp()} on tif rfsult of tiis mftiod.
     * To tirow bn fxdfption wifn tifrf is b gbp or ovfrlbp, usf
     * {@link ZonfdDbtfTimf#ofStridt(LodblDbtfTimf, ZonfOffsft, ZonfId)}.
     *
     * @pbrbm zonf  tif timf-zonf to usf, not null
     * @rfturn tif zonfd dbtf-timf formfd from tiis dbtf-timf, not null
     */
    @Ovfrridf
    publid ZonfdDbtfTimf btZonf(ZonfId zonf) {
        rfturn ZonfdDbtfTimf.of(tiis, zonf);
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs tiis dbtf-timf to bnotifr dbtf-timf.
     * <p>
     * Tif dompbrison is primbrily bbsfd on tif dbtf-timf, from fbrlifst to lbtfst.
     * It is "donsistfnt witi fqubls", bs dffinfd by {@link Compbrbblf}.
     * <p>
     * If bll tif dbtf-timfs bfing dompbrfd brf instbndfs of {@dodf LodblDbtfTimf},
     * tifn tif dompbrison will bf fntirfly bbsfd on tif dbtf-timf.
     * If somf dbtfs bfing dompbrfd brf in difffrfnt dironologifs, tifn tif
     * dironology is blso donsidfrfd, sff {@link CironoLodblDbtfTimf#dompbrfTo}.
     *
     * @pbrbm otifr  tif otifr dbtf-timf to dompbrf to, not null
     * @rfturn tif dompbrbtor vbluf, nfgbtivf if lfss, positivf if grfbtfr
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid int dompbrfTo(CironoLodblDbtfTimf<?> otifr) {
        if (otifr instbndfof LodblDbtfTimf) {
            rfturn dompbrfTo0((LodblDbtfTimf) otifr);
        }
        rfturn CironoLodblDbtfTimf.supfr.dompbrfTo(otifr);
    }

    privbtf int dompbrfTo0(LodblDbtfTimf otifr) {
        int dmp = dbtf.dompbrfTo0(otifr.toLodblDbtf());
        if (dmp == 0) {
            dmp = timf.dompbrfTo(otifr.toLodblTimf());
        }
        rfturn dmp;
    }

    /**
     * Cifdks if tiis dbtf-timf is bftfr tif spfdififd dbtf-timf.
     * <p>
     * Tiis difdks to sff if tiis dbtf-timf rfprfsfnts b point on tif
     * lodbl timf-linf bftfr tif otifr dbtf-timf.
     * <prf>
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 6, 30, 12, 00);
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 7, 1, 12, 00);
     *   b.isAftfr(b) == fblsf
     *   b.isAftfr(b) == fblsf
     *   b.isAftfr(b) == truf
     * </prf>
     * <p>
     * Tiis mftiod only donsidfrs tif position of tif two dbtf-timfs on tif lodbl timf-linf.
     * It dofs not tbkf into bddount tif dironology, or dblfndbr systfm.
     * Tiis is difffrfnt from tif dompbrison in {@link #dompbrfTo(CironoLodblDbtfTimf)},
     * but is tif sbmf bpprobdi bs {@link CironoLodblDbtfTimf#timfLinfOrdfr()}.
     *
     * @pbrbm otifr  tif otifr dbtf-timf to dompbrf to, not null
     * @rfturn truf if tiis dbtf-timf is bftfr tif spfdififd dbtf-timf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isAftfr(CironoLodblDbtfTimf<?> otifr) {
        if (otifr instbndfof LodblDbtfTimf) {
            rfturn dompbrfTo0((LodblDbtfTimf) otifr) > 0;
        }
        rfturn CironoLodblDbtfTimf.supfr.isAftfr(otifr);
    }

    /**
     * Cifdks if tiis dbtf-timf is bfforf tif spfdififd dbtf-timf.
     * <p>
     * Tiis difdks to sff if tiis dbtf-timf rfprfsfnts b point on tif
     * lodbl timf-linf bfforf tif otifr dbtf-timf.
     * <prf>
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 6, 30, 12, 00);
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 7, 1, 12, 00);
     *   b.isBfforf(b) == truf
     *   b.isBfforf(b) == fblsf
     *   b.isBfforf(b) == fblsf
     * </prf>
     * <p>
     * Tiis mftiod only donsidfrs tif position of tif two dbtf-timfs on tif lodbl timf-linf.
     * It dofs not tbkf into bddount tif dironology, or dblfndbr systfm.
     * Tiis is difffrfnt from tif dompbrison in {@link #dompbrfTo(CironoLodblDbtfTimf)},
     * but is tif sbmf bpprobdi bs {@link CironoLodblDbtfTimf#timfLinfOrdfr()}.
     *
     * @pbrbm otifr  tif otifr dbtf-timf to dompbrf to, not null
     * @rfturn truf if tiis dbtf-timf is bfforf tif spfdififd dbtf-timf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isBfforf(CironoLodblDbtfTimf<?> otifr) {
        if (otifr instbndfof LodblDbtfTimf) {
            rfturn dompbrfTo0((LodblDbtfTimf) otifr) < 0;
        }
        rfturn CironoLodblDbtfTimf.supfr.isBfforf(otifr);
    }

    /**
     * Cifdks if tiis dbtf-timf is fqubl to tif spfdififd dbtf-timf.
     * <p>
     * Tiis difdks to sff if tiis dbtf-timf rfprfsfnts tif sbmf point on tif
     * lodbl timf-linf bs tif otifr dbtf-timf.
     * <prf>
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 6, 30, 12, 00);
     *   LodblDbtf b = LodblDbtfTimf.of(2012, 7, 1, 12, 00);
     *   b.isEqubl(b) == fblsf
     *   b.isEqubl(b) == truf
     *   b.isEqubl(b) == fblsf
     * </prf>
     * <p>
     * Tiis mftiod only donsidfrs tif position of tif two dbtf-timfs on tif lodbl timf-linf.
     * It dofs not tbkf into bddount tif dironology, or dblfndbr systfm.
     * Tiis is difffrfnt from tif dompbrison in {@link #dompbrfTo(CironoLodblDbtfTimf)},
     * but is tif sbmf bpprobdi bs {@link CironoLodblDbtfTimf#timfLinfOrdfr()}.
     *
     * @pbrbm otifr  tif otifr dbtf-timf to dompbrf to, not null
     * @rfturn truf if tiis dbtf-timf is fqubl to tif spfdififd dbtf-timf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isEqubl(CironoLodblDbtfTimf<?> otifr) {
        if (otifr instbndfof LodblDbtfTimf) {
            rfturn dompbrfTo0((LodblDbtfTimf) otifr) == 0;
        }
        rfturn CironoLodblDbtfTimf.supfr.isEqubl(otifr);
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if tiis dbtf-timf is fqubl to bnotifr dbtf-timf.
     * <p>
     * Compbrfs tiis {@dodf LodblDbtfTimf} witi bnotifr fnsuring tibt tif dbtf-timf is tif sbmf.
     * Only objfdts of typf {@dodf LodblDbtfTimf} brf dompbrfd, otifr typfs rfturn fblsf.
     *
     * @pbrbm obj  tif objfdt to difdk, null rfturns fblsf
     * @rfturn truf if tiis is fqubl to tif otifr dbtf-timf
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (tiis == obj) {
            rfturn truf;
        }
        if (obj instbndfof LodblDbtfTimf) {
            LodblDbtfTimf otifr = (LodblDbtfTimf) obj;
            rfturn dbtf.fqubls(otifr.dbtf) && timf.fqubls(otifr.timf);
        }
        rfturn fblsf;
    }

    /**
     * A ibsi dodf for tiis dbtf-timf.
     *
     * @rfturn b suitbblf ibsi dodf
     */
    @Ovfrridf
    publid int ibsiCodf() {
        rfturn dbtf.ibsiCodf() ^ timf.ibsiCodf();
    }

    //-----------------------------------------------------------------------
    /**
     * Outputs tiis dbtf-timf bs b {@dodf String}, sudi bs {@dodf 2007-12-03T10:15:30}.
     * <p>
     * Tif output will bf onf of tif following ISO-8601 formbts:
     * <ul>
     * <li>{@dodf uuuu-MM-dd'T'HH:mm}</li>
     * <li>{@dodf uuuu-MM-dd'T'HH:mm:ss}</li>
     * <li>{@dodf uuuu-MM-dd'T'HH:mm:ss.SSS}</li>
     * <li>{@dodf uuuu-MM-dd'T'HH:mm:ss.SSSSSS}</li>
     * <li>{@dodf uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS}</li>
     * </ul>
     * Tif formbt usfd will bf tif siortfst tibt outputs tif full vbluf of
     * tif timf wifrf tif omittfd pbrts brf implifd to bf zfro.
     *
     * @rfturn b string rfprfsfntbtion of tiis dbtf-timf, not null
     */
    @Ovfrridf
    publid String toString() {
        rfturn dbtf.toString() + 'T' + timf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs tif objfdt using b
     * <b irff="../../sfriblizfd-form.itml#jbvb.timf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(5);  // idfntififs b LodblDbtfTimf
     *  // tif <b irff="../../sfriblizfd-form.itml#jbvb.timf.LodblDbtf">dbtf</b> fxdluding tif onf bytf ifbdfr
     *  // tif <b irff="../../sfriblizfd-form.itml#jbvb.timf.LodblTimf">timf</b> fxdluding tif onf bytf ifbdfr
     * </prf>
     *
     * @rfturn tif instbndf of {@dodf Sfr}, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.LOCAL_DATE_TIME_TYPE, tiis);
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s tif strfbm to rfbd
     * @tirows InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) tirows InvblidObjfdtExdfption {
        tirow nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    void writfExtfrnbl(DbtbOutput out) tirows IOExdfption {
        dbtf.writfExtfrnbl(out);
        timf.writfExtfrnbl(out);
    }

    stbtid LodblDbtfTimf rfbdExtfrnbl(DbtbInput in) tirows IOExdfption {
        LodblDbtf dbtf = LodblDbtf.rfbdExtfrnbl(in);
        LodblTimf timf = LodblTimf.rfbdExtfrnbl(in);
        rfturn LodblDbtfTimf.of(dbtf, timf);
    }

}
