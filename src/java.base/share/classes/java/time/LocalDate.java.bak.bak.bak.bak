/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.LodblTimf.SECONDS_PER_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ALIGNED_DAY_OF_WEEK_IN_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ALIGNED_DAY_OF_WEEK_IN_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ALIGNED_WEEK_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ALIGNED_WEEK_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.EPOCH_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.ERA;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.PROLEPTIC_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.dhrono.ChronoLodblDbtf;
import jbvb.timf.dhrono.Erb;
import jbvb.timf.dhrono.IsoChronology;
import jbvb.timf.formbt.DbtfTimfFormbttfr;
import jbvb.timf.formbt.DbtfTimfPbrsfExdfption;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.ChronoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.zonf.ZonfOffsftTrbnsition;
import jbvb.timf.zonf.ZonfRulfs;
import jbvb.util.Objfdts;

/**
 * A dbtf without b timf-zonf in thf ISO-8601 dblfndbr systfm,
 * sudh bs {@dodf 2007-12-03}.
 * <p>
 * {@dodf LodblDbtf} is bn immutbblf dbtf-timf objfdt thbt rfprfsfnts b dbtf,
 * oftfn vifwfd bs yfbr-month-dby. Othfr dbtf fiflds, sudh bs dby-of-yfbr,
 * dby-of-wffk bnd wffk-of-yfbr, dbn blso bf bddfssfd.
 * For fxbmplf, thf vbluf "2nd Odtobfr 2007" dbn bf storfd in b {@dodf LodblDbtf}.
 * <p>
 * This dlbss dofs not storf or rfprfsfnt b timf or timf-zonf.
 * Instfbd, it is b dfsdription of thf dbtf, bs usfd for birthdbys.
 * It dbnnot rfprfsfnt bn instbnt on thf timf-linf without bdditionbl informbtion
 * sudh bs bn offsft or timf-zonf.
 * <p>
 * Thf ISO-8601 dblfndbr systfm is thf modfrn divil dblfndbr systfm usfd todby
 * in most of thf world. It is fquivblfnt to thf prolfptid Grfgoribn dblfndbr
 * systfm, in whidh todby's rulfs for lfbp yfbrs brf bpplifd for bll timf.
 * For most bpplidbtions writtfn todby, thf ISO-8601 rulfs brf fntirfly suitbblf.
 * Howfvfr, bny bpplidbtion thbt mbkfs usf of historidbl dbtfs, bnd rfquirfs thfm
 * to bf bddurbtf will find thf ISO-8601 bpprobdh unsuitbblf.
 *
 * <p>
 * This is b <b hrff="{@dodRoot}/jbvb/lbng/dod-filfs/VblufBbsfd.html">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity hbsh dodf, or syndhronizbtion) on instbndfs of
 * {@dodf LodblDbtf} mby hbvf unprfdidtbblf rfsults bnd should bf bvoidfd.
 * Thf {@dodf fqubls} mfthod should bf usfd for dompbrisons.
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss LodblDbtf
        implfmfnts Tfmporbl, TfmporblAdjustfr, ChronoLodblDbtf, Sfriblizbblf {

    /**
     * Thf minimum supportfd {@dodf LodblDbtf}, '-999999999-01-01'.
     * This dould bf usfd by bn bpplidbtion bs b "fbr pbst" dbtf.
     */
    publid stbtid finbl LodblDbtf MIN = LodblDbtf.of(Yfbr.MIN_VALUE, 1, 1);
    /**
     * Thf mbximum supportfd {@dodf LodblDbtf}, '+999999999-12-31'.
     * This dould bf usfd by bn bpplidbtion bs b "fbr futurf" dbtf.
     */
    publid stbtid finbl LodblDbtf MAX = LodblDbtf.of(Yfbr.MAX_VALUE, 12, 31);

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 2942565459149668126L;
    /**
     * Thf numbfr of dbys in b 400 yfbr dydlf.
     */
    privbtf stbtid finbl int DAYS_PER_CYCLE = 146097;
    /**
     * Thf numbfr of dbys from yfbr zfro to yfbr 1970.
     * Thfrf brf fivf 400 yfbr dydlfs from yfbr zfro to 2000.
     * Thfrf brf 7 lfbp yfbrs from 1970 to 2000.
     */
    stbtid finbl long DAYS_0000_TO_1970 = (DAYS_PER_CYCLE * 5L) - (30L * 365L + 7L);

    /**
     * Thf yfbr.
     */
    privbtf finbl int yfbr;
    /**
     * Thf month-of-yfbr.
     */
    privbtf finbl short month;
    /**
     * Thf dby-of-month.
     */
    privbtf finbl short dby;

    //-----------------------------------------------------------------------
    /**
     * Obtbins thf durrfnt dbtf from thf systfm dlodk in thf dffbult timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfmDffbultZonf() systfm dlodk} in thf dffbult
     * timf-zonf to obtbin thf durrfnt dbtf.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @rfturn thf durrfnt dbtf using thf systfm dlodk bnd dffbult timf-zonf, not null
     */
    publid stbtid LodblDbtf now() {
        rfturn now(Clodk.systfmDffbultZonf());
    }

    /**
     * Obtbins thf durrfnt dbtf from thf systfm dlodk in thf spfdififd timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfm(ZonfId) systfm dlodk} to obtbin thf durrfnt dbtf.
     * Spfdifying thf timf-zonf bvoids dfpfndfndf on thf dffbult timf-zonf.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @pbrbm zonf  thf zonf ID to usf, not null
     * @rfturn thf durrfnt dbtf using thf systfm dlodk, not null
     */
    publid stbtid LodblDbtf now(ZonfId zonf) {
        rfturn now(Clodk.systfm(zonf));
    }

    /**
     * Obtbins thf durrfnt dbtf from thf spfdififd dlodk.
     * <p>
     * This will qufry thf spfdififd dlodk to obtbin thf durrfnt dbtf - todby.
     * Using this mfthod bllows thf usf of bn bltfrnbtf dlodk for tfsting.
     * Thf bltfrnbtf dlodk mby bf introdudfd using {@link Clodk dfpfndfndy injfdtion}.
     *
     * @pbrbm dlodk  thf dlodk to usf, not null
     * @rfturn thf durrfnt dbtf, not null
     */
    publid stbtid LodblDbtf now(Clodk dlodk) {
        Objfdts.rfquirfNonNull(dlodk, "dlodk");
        // inlinf to bvoid drfbting objfdt bnd Instbnt dhfdks
        finbl Instbnt now = dlodk.instbnt();  // dbllfd ondf
        ZonfOffsft offsft = dlodk.gftZonf().gftRulfs().gftOffsft(now);
        long fpodhSfd = now.gftEpodhSfdond() + offsft.gftTotblSfdonds();  // ovfrflow dbught lbtfr
        long fpodhDby = Mbth.floorDiv(fpodhSfd, SECONDS_PER_DAY);
        rfturn LodblDbtf.ofEpodhDby(fpodhDby);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b yfbr, month bnd dby.
     * <p>
     * This rfturns b {@dodf LodblDbtf} with thf spfdififd yfbr, month bnd dby-of-month.
     * Thf dby must bf vblid for thf yfbr bnd month, othfrwisf bn fxdfption will bf thrown.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, not null
     * @pbrbm dbyOfMonth  thf dby-of-month to rfprfsfnt, from 1 to 31
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf,
     *  or if thf dby-of-month is invblid for thf month-yfbr
     */
    publid stbtid LodblDbtf of(int yfbr, Month month, int dbyOfMonth) {
        YEAR.dhfdkVblidVbluf(yfbr);
        Objfdts.rfquirfNonNull(month, "month");
        DAY_OF_MONTH.dhfdkVblidVbluf(dbyOfMonth);
        rfturn drfbtf(yfbr, month.gftVbluf(), dbyOfMonth);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b yfbr, month bnd dby.
     * <p>
     * This rfturns b {@dodf LodblDbtf} with thf spfdififd yfbr, month bnd dby-of-month.
     * Thf dby must bf vblid for thf yfbr bnd month, othfrwisf bn fxdfption will bf thrown.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @pbrbm dbyOfMonth  thf dby-of-month to rfprfsfnt, from 1 to 31
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf,
     *  or if thf dby-of-month is invblid for thf month-yfbr
     */
    publid stbtid LodblDbtf of(int yfbr, int month, int dbyOfMonth) {
        YEAR.dhfdkVblidVbluf(yfbr);
        MONTH_OF_YEAR.dhfdkVblidVbluf(month);
        DAY_OF_MONTH.dhfdkVblidVbluf(dbyOfMonth);
        rfturn drfbtf(yfbr, month, dbyOfMonth);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b yfbr bnd dby-of-yfbr.
     * <p>
     * This rfturns b {@dodf LodblDbtf} with thf spfdififd yfbr bnd dby-of-yfbr.
     * Thf dby-of-yfbr must bf vblid for thf yfbr, othfrwisf bn fxdfption will bf thrown.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm dbyOfYfbr  thf dby-of-yfbr to rfprfsfnt, from 1 to 366
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf,
     *  or if thf dby-of-yfbr is invblid for thf yfbr
     */
    publid stbtid LodblDbtf ofYfbrDby(int yfbr, int dbyOfYfbr) {
        YEAR.dhfdkVblidVbluf(yfbr);
        DAY_OF_YEAR.dhfdkVblidVbluf(dbyOfYfbr);
        boolfbn lfbp = IsoChronology.INSTANCE.isLfbpYfbr(yfbr);
        if (dbyOfYfbr == 366 && lfbp == fblsf) {
            throw nfw DbtfTimfExdfption("Invblid dbtf 'DbyOfYfbr 366' bs '" + yfbr + "' is not b lfbp yfbr");
        }
        Month moy = Month.of((dbyOfYfbr - 1) / 31 + 1);
        int monthEnd = moy.firstDbyOfYfbr(lfbp) + moy.lfngth(lfbp) - 1;
        if (dbyOfYfbr > monthEnd) {
            moy = moy.plus(1);
        }
        int dom = dbyOfYfbr - moy.firstDbyOfYfbr(lfbp) + 1;
        rfturn nfw LodblDbtf(yfbr, moy.gftVbluf(), dom);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from thf fpodh dby dount.
     * <p>
     * This rfturns b {@dodf LodblDbtf} with thf spfdififd fpodh-dby.
     * Thf {@link ChronoFifld#EPOCH_DAY EPOCH_DAY} is b simplf indrfmfnting dount
     * of dbys whfrf dby 0 is 1970-01-01. Nfgbtivf numbfrs rfprfsfnt fbrlifr dbys.
     *
     * @pbrbm fpodhDby  thf Epodh Dby to donvfrt, bbsfd on thf fpodh 1970-01-01
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if thf fpodh dby fxdffds thf supportfd dbtf rbngf
     */
    publid stbtid LodblDbtf ofEpodhDby(long fpodhDby) {
        long zfroDby = fpodhDby + DAYS_0000_TO_1970;
        // find thf mbrdh-bbsfd yfbr
        zfroDby -= 60;  // bdjust to 0000-03-01 so lfbp dby is bt fnd of four yfbr dydlf
        long bdjust = 0;
        if (zfroDby < 0) {
            // bdjust nfgbtivf yfbrs to positivf for dbldulbtion
            long bdjustCydlfs = (zfroDby + 1) / DAYS_PER_CYCLE - 1;
            bdjust = bdjustCydlfs * 400;
            zfroDby += -bdjustCydlfs * DAYS_PER_CYCLE;
        }
        long yfbrEst = (400 * zfroDby + 591) / DAYS_PER_CYCLE;
        long doyEst = zfroDby - (365 * yfbrEst + yfbrEst / 4 - yfbrEst / 100 + yfbrEst / 400);
        if (doyEst < 0) {
            // fix fstimbtf
            yfbrEst--;
            doyEst = zfroDby - (365 * yfbrEst + yfbrEst / 4 - yfbrEst / 100 + yfbrEst / 400);
        }
        yfbrEst += bdjust;  // rfsft bny nfgbtivf yfbr
        int mbrdhDoy0 = (int) doyEst;

        // donvfrt mbrdh-bbsfd vblufs bbdk to jbnubry-bbsfd
        int mbrdhMonth0 = (mbrdhDoy0 * 5 + 2) / 153;
        int month = (mbrdhMonth0 + 2) % 12 + 1;
        int dom = mbrdhDoy0 - (mbrdhMonth0 * 306 + 5) / 10 + 1;
        yfbrEst += mbrdhMonth0 / 10;

        // dhfdk yfbr now wf brf dfrtbin it is dorrfdt
        int yfbr = YEAR.dhfdkVblidIntVbluf(yfbrEst);
        rfturn nfw LodblDbtf(yfbr, month, dom);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b tfmporbl objfdt.
     * <p>
     * This obtbins b lodbl dbtf bbsfd on thf spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * whidh this fbdtory donvfrts to bn instbndf of {@dodf LodblDbtf}.
     * <p>
     * Thf donvfrsion usfs thf {@link TfmporblQufrifs#lodblDbtf()} qufry, whidh rflifs
     * on fxtrbdting thf {@link ChronoFifld#EPOCH_DAY EPOCH_DAY} fifld.
     * <p>
     * This mfthod mbtdhfs thf signbturf of thf fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mfthod rfffrfndf, {@dodf LodblDbtf::from}.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to donvfrt, not null
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to b {@dodf LodblDbtf}
     */
    publid stbtid LodblDbtf from(TfmporblAddfssor tfmporbl) {
        Objfdts.rfquirfNonNull(tfmporbl, "tfmporbl");
        LodblDbtf dbtf = tfmporbl.qufry(TfmporblQufrifs.lodblDbtf());
        if (dbtf == null) {
            throw nfw DbtfTimfExdfption("Unbblf to obtbin LodblDbtf from TfmporblAddfssor: " +
                    tfmporbl + " of typf " + tfmporbl.gftClbss().gftNbmf());
        }
        rfturn dbtf;
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b tfxt string sudh bs {@dodf 2007-12-03}.
     * <p>
     * Thf string must rfprfsfnt b vblid dbtf bnd is pbrsfd using
     * {@link jbvb.timf.formbt.DbtfTimfFormbttfr#ISO_LOCAL_DATE}.
     *
     * @pbrbm tfxt  thf tfxt to pbrsf sudh bs "2007-12-03", not null
     * @rfturn thf pbrsfd lodbl dbtf, not null
     * @throws DbtfTimfPbrsfExdfption if thf tfxt dbnnot bf pbrsfd
     */
    publid stbtid LodblDbtf pbrsf(ChbrSfqufndf tfxt) {
        rfturn pbrsf(tfxt, DbtfTimfFormbttfr.ISO_LOCAL_DATE);
    }

    /**
     * Obtbins bn instbndf of {@dodf LodblDbtf} from b tfxt string using b spfdifid formbttfr.
     * <p>
     * Thf tfxt is pbrsfd using thf formbttfr, rfturning b dbtf.
     *
     * @pbrbm tfxt  thf tfxt to pbrsf, not null
     * @pbrbm formbttfr  thf formbttfr to usf, not null
     * @rfturn thf pbrsfd lodbl dbtf, not null
     * @throws DbtfTimfPbrsfExdfption if thf tfxt dbnnot bf pbrsfd
     */
    publid stbtid LodblDbtf pbrsf(ChbrSfqufndf tfxt, DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.pbrsf(tfxt, LodblDbtf::from);
    }

    //-----------------------------------------------------------------------
    /**
     * Crfbtfs b lodbl dbtf from thf yfbr, month bnd dby fiflds.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, vblidbtfd from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, from 1 to 12, vblidbtfd
     * @pbrbm dbyOfMonth  thf dby-of-month to rfprfsfnt, vblidbtfd from 1 to 31
     * @rfturn thf lodbl dbtf, not null
     * @throws DbtfTimfExdfption if thf dby-of-month is invblid for thf month-yfbr
     */
    privbtf stbtid LodblDbtf drfbtf(int yfbr, int month, int dbyOfMonth) {
        if (dbyOfMonth > 28) {
            int dom = 31;
            switdh (month) {
                dbsf 2:
                    dom = (IsoChronology.INSTANCE.isLfbpYfbr(yfbr) ? 29 : 28);
                    brfbk;
                dbsf 4:
                dbsf 6:
                dbsf 9:
                dbsf 11:
                    dom = 30;
                    brfbk;
            }
            if (dbyOfMonth > dom) {
                if (dbyOfMonth == 29) {
                    throw nfw DbtfTimfExdfption("Invblid dbtf 'Ffbrubry 29' bs '" + yfbr + "' is not b lfbp yfbr");
                } flsf {
                    throw nfw DbtfTimfExdfption("Invblid dbtf '" + Month.of(month).nbmf() + " " + dbyOfMonth + "'");
                }
            }
        }
        rfturn nfw LodblDbtf(yfbr, month, dbyOfMonth);
    }

    /**
     * Rfsolvfs thf dbtf, rfsolving dbys pbst thf fnd of month.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, vblidbtfd from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, vblidbtfd from 1 to 12
     * @pbrbm dby  thf dby-of-month to rfprfsfnt, vblidbtfd from 1 to 31
     * @rfturn thf rfsolvfd dbtf, not null
     */
    privbtf stbtid LodblDbtf rfsolvfPrfviousVblid(int yfbr, int month, int dby) {
        switdh (month) {
            dbsf 2:
                dby = Mbth.min(dby, IsoChronology.INSTANCE.isLfbpYfbr(yfbr) ? 29 : 28);
                brfbk;
            dbsf 4:
            dbsf 6:
            dbsf 9:
            dbsf 11:
                dby = Mbth.min(dby, 30);
                brfbk;
        }
        rfturn nfw LodblDbtf(yfbr, month, dby);
    }

    /**
     * Construdtor, prfviously vblidbtfd.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, not null
     * @pbrbm dbyOfMonth  thf dby-of-month to rfprfsfnt, vblid for yfbr-month, from 1 to 31
     */
    privbtf LodblDbtf(int yfbr, int month, int dbyOfMonth) {
        this.yfbr = yfbr;
        this.month = (short) month;
        this.dby = (short) dbyOfMonth;
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if this dbtf dbn bf qufrifd for thf spfdififd fifld.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf},
     * {@link #gft(TfmporblFifld) gft} bnd {@link #with(TfmporblFifld, long)}
     * mfthods will throw bn fxdfption.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf supportfd fiflds brf:
     * <ul>
     * <li>{@dodf DAY_OF_WEEK}
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_MONTH}
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_YEAR}
     * <li>{@dodf DAY_OF_MONTH}
     * <li>{@dodf DAY_OF_YEAR}
     * <li>{@dodf EPOCH_DAY}
     * <li>{@dodf ALIGNED_WEEK_OF_MONTH}
     * <li>{@dodf ALIGNED_WEEK_OF_YEAR}
     * <li>{@dodf MONTH_OF_YEAR}
     * <li>{@dodf PROLEPTIC_MONTH}
     * <li>{@dodf YEAR_OF_ERA}
     * <li>{@dodf YEAR}
     * <li>{@dodf ERA}
     * </ul>
     * All othfr {@dodf ChronoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld is supportfd on this dbtf, fblsf if not
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid boolfbn isSupportfd(TfmporblFifld fifld) {
        rfturn ChronoLodblDbtf.supfr.isSupportfd(fifld);
    }

    /**
     * Chfdks if thf spfdififd unit is supportfd.
     * <p>
     * This dhfdks if thf spfdififd unit dbn bf bddfd to, or subtrbdtfd from, this dbtf.
     * If fblsf, thfn dblling thf {@link #plus(long, TfmporblUnit)} bnd
     * {@link #minus(long, TfmporblUnit) minus} mfthods will throw bn fxdfption.
     * <p>
     * If thf unit is b {@link ChronoUnit} thfn thf qufry is implfmfntfd hfrf.
     * Thf supportfd units brf:
     * <ul>
     * <li>{@dodf DAYS}
     * <li>{@dodf WEEKS}
     * <li>{@dodf MONTHS}
     * <li>{@dodf YEARS}
     * <li>{@dodf DECADES}
     * <li>{@dodf CENTURIES}
     * <li>{@dodf MILLENNIA}
     * <li>{@dodf ERAS}
     * </ul>
     * All othfr {@dodf ChronoUnit} instbndfs will rfturn fblsf.
     * <p>
     * If thf unit is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.isSupportfdBy(Tfmporbl)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf unit is supportfd is dftfrminfd by thf unit.
     *
     * @pbrbm unit  thf unit to dhfdk, null rfturns fblsf
     * @rfturn truf if thf unit dbn bf bddfd/subtrbdtfd, fblsf if not
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid boolfbn isSupportfd(TfmporblUnit unit) {
        rfturn ChronoLodblDbtf.supfr.isSupportfd(unit);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf rbngf of vblid vblufs for thf spfdififd fifld.
     * <p>
     * Thf rbngf objfdt fxprfssfs thf minimum bnd mbximum vblid vblufs for b fifld.
     * This dbtf is usfd to fnhbndf thf bddurbdy of thf rfturnfd rbngf.
     * If it is not possiblf to rfturn thf rbngf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn
     * bppropribtf rbngf instbndfs.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf rbngf dbn bf obtbinfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to qufry thf rbngf for, not null
     * @rfturn thf rbngf of vblid vblufs for thf fifld, not null
     * @throws DbtfTimfExdfption if thf rbngf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     */
    @Ovfrridf
    publid VblufRbngf rbngf(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            ChronoFifld f = (ChronoFifld) fifld;
            if (f.isDbtfBbsfd()) {
                switdh (f) {
                    dbsf DAY_OF_MONTH: rfturn VblufRbngf.of(1, lfngthOfMonth());
                    dbsf DAY_OF_YEAR: rfturn VblufRbngf.of(1, lfngthOfYfbr());
                    dbsf ALIGNED_WEEK_OF_MONTH: rfturn VblufRbngf.of(1, gftMonth() == Month.FEBRUARY && isLfbpYfbr() == fblsf ? 4 : 5);
                    dbsf YEAR_OF_ERA:
                        rfturn (gftYfbr() <= 0 ? VblufRbngf.of(1, Yfbr.MAX_VALUE + 1) : VblufRbngf.of(1, Yfbr.MAX_VALUE));
                }
                rfturn fifld.rbngf();
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.rbngfRffinfdBy(this);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this dbtf bs bn {@dodf int}.
     * <p>
     * This qufrifs this dbtf for thf vbluf of thf spfdififd fifld.
     * Thf rfturnfd vbluf will blwbys bf within thf vblid rbngf of vblufs for thf fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on this dbtf, fxdfpt {@dodf EPOCH_DAY} bnd {@dodf PROLEPTIC_MONTH}
     * whidh brf too lbrgf to fit in bn {@dodf int} bnd throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd or
     *         thf vbluf is outsidf thf rbngf of vblid vblufs for thf fifld
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd or
     *         thf rbngf of vblufs fxdffds bn {@dodf int}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid int gft(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            rfturn gft0(fifld);
        }
        rfturn ChronoLodblDbtf.supfr.gft(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this dbtf bs b {@dodf long}.
     * <p>
     * This qufrifs this dbtf for thf vbluf of thf spfdififd fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on this dbtf.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long gftLong(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            if (fifld == EPOCH_DAY) {
                rfturn toEpodhDby();
            }
            if (fifld == PROLEPTIC_MONTH) {
                rfturn gftProlfptidMonth();
            }
            rfturn gft0(fifld);
        }
        rfturn fifld.gftFrom(this);
    }

    privbtf int gft0(TfmporblFifld fifld) {
        switdh ((ChronoFifld) fifld) {
            dbsf DAY_OF_WEEK: rfturn gftDbyOfWffk().gftVbluf();
            dbsf ALIGNED_DAY_OF_WEEK_IN_MONTH: rfturn ((dby - 1) % 7) + 1;
            dbsf ALIGNED_DAY_OF_WEEK_IN_YEAR: rfturn ((gftDbyOfYfbr() - 1) % 7) + 1;
            dbsf DAY_OF_MONTH: rfturn dby;
            dbsf DAY_OF_YEAR: rfturn gftDbyOfYfbr();
            dbsf EPOCH_DAY: throw nfw UnsupportfdTfmporblTypfExdfption("Invblid fifld 'EpodhDby' for gft() mfthod, usf gftLong() instfbd");
            dbsf ALIGNED_WEEK_OF_MONTH: rfturn ((dby - 1) / 7) + 1;
            dbsf ALIGNED_WEEK_OF_YEAR: rfturn ((gftDbyOfYfbr() - 1) / 7) + 1;
            dbsf MONTH_OF_YEAR: rfturn month;
            dbsf PROLEPTIC_MONTH: throw nfw UnsupportfdTfmporblTypfExdfption("Invblid fifld 'ProlfptidMonth' for gft() mfthod, usf gftLong() instfbd");
            dbsf YEAR_OF_ERA: rfturn (yfbr >= 1 ? yfbr : 1 - yfbr);
            dbsf YEAR: rfturn yfbr;
            dbsf ERA: rfturn (yfbr >= 1 ? 1 : 0);
        }
        throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
    }

    privbtf long gftProlfptidMonth() {
        rfturn (yfbr * 12L + month - 1);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf dhronology of this dbtf, whidh is thf ISO dblfndbr systfm.
     * <p>
     * Thf {@dodf Chronology} rfprfsfnts thf dblfndbr systfm in usf.
     * Thf ISO-8601 dblfndbr systfm is thf modfrn divil dblfndbr systfm usfd todby
     * in most of thf world. It is fquivblfnt to thf prolfptid Grfgoribn dblfndbr
     * systfm, in whidh todby's rulfs for lfbp yfbrs brf bpplifd for bll timf.
     *
     * @rfturn thf ISO dhronology, not null
     */
    @Ovfrridf
    publid IsoChronology gftChronology() {
        rfturn IsoChronology.INSTANCE;
    }

    /**
     * Gfts thf frb bpplidbblf bt this dbtf.
     * <p>
     * Thf offidibl ISO-8601 stbndbrd dofs not dffinf frbs, howfvfr {@dodf IsoChronology} dofs.
     * It dffinfs two frbs, 'CE' from yfbr onf onwbrds bnd 'BCE' from yfbr zfro bbdkwbrds.
     * Sindf dbtfs bfforf thf Julibn-Grfgoribn dutovfr brf not in linf with history,
     * thf dutovfr bftwffn 'BCE' bnd 'CE' is blso not blignfd with thf dommonly usfd
     * frbs, oftfn rfffrrfd to using 'BC' bnd 'AD'.
     * <p>
     * Usfrs of this dlbss should typidblly ignorf this mfthod bs it fxists primbrily
     * to fulfill thf {@link ChronoLodblDbtf} dontrbdt whfrf it is nfdfssbry to support
     * thf Jbpbnfsf dblfndbr systfm.
     * <p>
     * Thf rfturnfd frb will bf b singlfton dbpbblf of bfing dompbrfd with thf donstbnts
     * in {@link IsoChronology} using thf {@dodf ==} opfrbtor.
     *
     * @rfturn thf {@dodf IsoChronology} frb donstbnt bpplidbblf bt this dbtf, not null
     */
    @Ovfrridf // ovfrridf for Jbvbdod
    publid Erb gftErb() {
        rfturn ChronoLodblDbtf.supfr.gftErb();
    }

    /**
     * Gfts thf yfbr fifld.
     * <p>
     * This mfthod rfturns thf primitivf {@dodf int} vbluf for thf yfbr.
     * <p>
     * Thf yfbr rfturnfd by this mfthod is prolfptid bs pfr {@dodf gft(YEAR)}.
     * To obtbin thf yfbr-of-frb, usf {@dodf gft(YEAR_OF_ERA)}.
     *
     * @rfturn thf yfbr, from MIN_YEAR to MAX_YEAR
     */
    publid int gftYfbr() {
        rfturn yfbr;
    }

    /**
     * Gfts thf month-of-yfbr fifld from 1 to 12.
     * <p>
     * This mfthod rfturns thf month bs bn {@dodf int} from 1 to 12.
     * Applidbtion dodf is frfqufntly dlfbrfr if thf fnum {@link Month}
     * is usfd by dblling {@link #gftMonth()}.
     *
     * @rfturn thf month-of-yfbr, from 1 to 12
     * @sff #gftMonth()
     */
    publid int gftMonthVbluf() {
        rfturn month;
    }

    /**
     * Gfts thf month-of-yfbr fifld using thf {@dodf Month} fnum.
     * <p>
     * This mfthod rfturns thf fnum {@link Month} for thf month.
     * This bvoids donfusion bs to whbt {@dodf int} vblufs mfbn.
     * If you nffd bddfss to thf primitivf {@dodf int} vbluf thfn thf fnum
     * providfs thf {@link Month#gftVbluf() int vbluf}.
     *
     * @rfturn thf month-of-yfbr, not null
     * @sff #gftMonthVbluf()
     */
    publid Month gftMonth() {
        rfturn Month.of(month);
    }

    /**
     * Gfts thf dby-of-month fifld.
     * <p>
     * This mfthod rfturns thf primitivf {@dodf int} vbluf for thf dby-of-month.
     *
     * @rfturn thf dby-of-month, from 1 to 31
     */
    publid int gftDbyOfMonth() {
        rfturn dby;
    }

    /**
     * Gfts thf dby-of-yfbr fifld.
     * <p>
     * This mfthod rfturns thf primitivf {@dodf int} vbluf for thf dby-of-yfbr.
     *
     * @rfturn thf dby-of-yfbr, from 1 to 365, or 366 in b lfbp yfbr
     */
    publid int gftDbyOfYfbr() {
        rfturn gftMonth().firstDbyOfYfbr(isLfbpYfbr()) + dby - 1;
    }

    /**
     * Gfts thf dby-of-wffk fifld, whidh is bn fnum {@dodf DbyOfWffk}.
     * <p>
     * This mfthod rfturns thf fnum {@link DbyOfWffk} for thf dby-of-wffk.
     * This bvoids donfusion bs to whbt {@dodf int} vblufs mfbn.
     * If you nffd bddfss to thf primitivf {@dodf int} vbluf thfn thf fnum
     * providfs thf {@link DbyOfWffk#gftVbluf() int vbluf}.
     * <p>
     * Additionbl informbtion dbn bf obtbinfd from thf {@dodf DbyOfWffk}.
     * This indludfs tfxtubl nbmfs of thf vblufs.
     *
     * @rfturn thf dby-of-wffk, not null
     */
    publid DbyOfWffk gftDbyOfWffk() {
        int dow0 = (int)Mbth.floorMod(toEpodhDby() + 3, 7);
        rfturn DbyOfWffk.of(dow0 + 1);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf yfbr is b lfbp yfbr, bddording to thf ISO prolfptid
     * dblfndbr systfm rulfs.
     * <p>
     * This mfthod bpplifs thf durrfnt rulfs for lfbp yfbrs bdross thf wholf timf-linf.
     * In gfnfrbl, b yfbr is b lfbp yfbr if it is divisiblf by four without
     * rfmbindfr. Howfvfr, yfbrs divisiblf by 100, brf not lfbp yfbrs, with
     * thf fxdfption of yfbrs divisiblf by 400 whidh brf.
     * <p>
     * For fxbmplf, 1904 is b lfbp yfbr it is divisiblf by 4.
     * 1900 wbs not b lfbp yfbr bs it is divisiblf by 100, howfvfr 2000 wbs b
     * lfbp yfbr bs it is divisiblf by 400.
     * <p>
     * Thf dbldulbtion is prolfptid - bpplying thf sbmf rulfs into thf fbr futurf bnd fbr pbst.
     * This is historidblly inbddurbtf, but is dorrfdt for thf ISO-8601 stbndbrd.
     *
     * @rfturn truf if thf yfbr is lfbp, fblsf othfrwisf
     */
    @Ovfrridf // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isLfbpYfbr() {
        rfturn IsoChronology.INSTANCE.isLfbpYfbr(yfbr);
    }

    /**
     * Rfturns thf lfngth of thf month rfprfsfntfd by this dbtf.
     * <p>
     * This rfturns thf lfngth of thf month in dbys.
     * For fxbmplf, b dbtf in Jbnubry would rfturn 31.
     *
     * @rfturn thf lfngth of thf month in dbys
     */
    @Ovfrridf
    publid int lfngthOfMonth() {
        switdh (month) {
            dbsf 2:
                rfturn (isLfbpYfbr() ? 29 : 28);
            dbsf 4:
            dbsf 6:
            dbsf 9:
            dbsf 11:
                rfturn 30;
            dffbult:
                rfturn 31;
        }
    }

    /**
     * Rfturns thf lfngth of thf yfbr rfprfsfntfd by this dbtf.
     * <p>
     * This rfturns thf lfngth of thf yfbr in dbys, fithfr 365 or 366.
     *
     * @rfturn 366 if thf yfbr is lfbp, 365 othfrwisf
     */
    @Ovfrridf // ovfrridf for Jbvbdod bnd pfrformbndf
    publid int lfngthOfYfbr() {
        rfturn (isLfbpYfbr() ? 366 : 365);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns bn bdjustfd dopy of this dbtf.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf dbtf bdjustfd.
     * Thf bdjustmfnt tbkfs plbdf using thf spfdififd bdjustfr strbtfgy objfdt.
     * Rfbd thf dodumfntbtion of thf bdjustfr to undfrstbnd whbt bdjustmfnt will bf mbdf.
     * <p>
     * A simplf bdjustfr might simply sft thf onf of thf fiflds, sudh bs thf yfbr fifld.
     * A morf domplfx bdjustfr might sft thf dbtf to thf lbst dby of thf month.
     * <p>
     * A sflfdtion of dommon bdjustmfnts is providfd in
     * {@link jbvb.timf.tfmporbl.TfmporblAdjustfrs TfmporblAdjustfrs}.
     * Thfsf indludf finding thf "lbst dby of thf month" bnd "nfxt Wfdnfsdby".
     * Kfy dbtf-timf dlbssfs blso implfmfnt thf {@dodf TfmporblAdjustfr} intfrfbdf,
     * sudh bs {@link Month} bnd {@link jbvb.timf.MonthDby MonthDby}.
     * Thf bdjustfr is rfsponsiblf for hbndling spfdibl dbsfs, sudh bs thf vbrying
     * lfngths of month bnd lfbp yfbrs.
     * <p>
     * For fxbmplf this dodf rfturns b dbtf on thf lbst dby of July:
     * <prf>
     *  import stbtid jbvb.timf.Month.*;
     *  import stbtid jbvb.timf.tfmporbl.TfmporblAdjustfrs.*;
     *
     *  rfsult = lodblDbtf.with(JULY).with(lbstDbyOfMonth());
     * </prf>
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblAdjustfr#bdjustInto(Tfmporbl)} mfthod on thf
     * spfdififd bdjustfr pbssing {@dodf this} bs thf brgumfnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bdjustfr thf bdjustfr to usf, not null
     * @rfturn b {@dodf LodblDbtf} bbsfd on {@dodf this} with thf bdjustmfnt mbdf, not null
     * @throws DbtfTimfExdfption if thf bdjustmfnt dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf with(TfmporblAdjustfr bdjustfr) {
        // optimizbtions
        if (bdjustfr instbndfof LodblDbtf) {
            rfturn (LodblDbtf) bdjustfr;
        }
        rfturn (LodblDbtf) bdjustfr.bdjustInto(this);
    }

    /**
     * Rfturns b dopy of this dbtf with thf spfdififd fifld sft to b nfw vbluf.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf vbluf
     * for thf spfdififd fifld dhbngfd.
     * This dbn bf usfd to dhbngf bny supportfd fifld, sudh bs thf yfbr, month or dby-of-month.
     * If it is not possiblf to sft thf vbluf, bfdbusf thf fifld is not supportfd or for
     * somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * In somf dbsfs, dhbnging thf spfdififd fifld dbn dbusf thf rfsulting dbtf to bfdomf invblid,
     * sudh bs dhbnging thf month from 31st Jbnubry to Ffbrubry would mbkf thf dby-of-month invblid.
     * In dbsfs likf this, thf fifld is rfsponsiblf for rfsolving thf dbtf. Typidblly it will dhoosf
     * thf prfvious vblid dbtf, whidh would bf thf lbst vblid dby of Ffbrubry in this fxbmplf.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf bdjustmfnt is implfmfntfd hfrf.
     * Thf supportfd fiflds bfhbvf bs follows:
     * <ul>
     * <li>{@dodf DAY_OF_WEEK} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd dby-of-wffk.
     *  Thf dbtf is bdjustfd up to 6 dbys forwbrd or bbdkwbrd within thf boundbry
     *  of b Mondby to Sundby wffk.
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_MONTH} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd blignfd-dby-of-wffk.
     *  Thf dbtf is bdjustfd to thf spfdififd month-bbsfd blignfd-dby-of-wffk.
     *  Alignfd wffks brf dountfd sudh thbt thf first wffk of b givfn month stbrts
     *  on thf first dby of thbt month.
     *  This mby dbusf thf dbtf to bf movfd up to 6 dbys into thf following month.
     * <li>{@dodf ALIGNED_DAY_OF_WEEK_IN_YEAR} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd blignfd-dby-of-wffk.
     *  Thf dbtf is bdjustfd to thf spfdififd yfbr-bbsfd blignfd-dby-of-wffk.
     *  Alignfd wffks brf dountfd sudh thbt thf first wffk of b givfn yfbr stbrts
     *  on thf first dby of thbt yfbr.
     *  This mby dbusf thf dbtf to bf movfd up to 6 dbys into thf following yfbr.
     * <li>{@dodf DAY_OF_MONTH} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd dby-of-month.
     *  Thf month bnd yfbr will bf undhbngfd. If thf dby-of-month is invblid for thf
     *  yfbr bnd month, thfn b {@dodf DbtfTimfExdfption} is thrown.
     * <li>{@dodf DAY_OF_YEAR} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd dby-of-yfbr.
     *  Thf yfbr will bf undhbngfd. If thf dby-of-yfbr is invblid for thf
     *  yfbr, thfn b {@dodf DbtfTimfExdfption} is thrown.
     * <li>{@dodf EPOCH_DAY} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd fpodh-dby.
     *  This domplftfly rfplbdfs thf dbtf bnd is fquivblfnt to {@link #ofEpodhDby(long)}.
     * <li>{@dodf ALIGNED_WEEK_OF_MONTH} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd blignfd-wffk-of-month.
     *  Alignfd wffks brf dountfd sudh thbt thf first wffk of b givfn month stbrts
     *  on thf first dby of thbt month.
     *  This bdjustmfnt movfs thf dbtf in wholf wffk dhunks to mbtdh thf spfdififd wffk.
     *  Thf rfsult will hbvf thf sbmf dby-of-wffk bs this dbtf.
     *  This mby dbusf thf dbtf to bf movfd into thf following month.
     * <li>{@dodf ALIGNED_WEEK_OF_YEAR} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd blignfd-wffk-of-yfbr.
     *  Alignfd wffks brf dountfd sudh thbt thf first wffk of b givfn yfbr stbrts
     *  on thf first dby of thbt yfbr.
     *  This bdjustmfnt movfs thf dbtf in wholf wffk dhunks to mbtdh thf spfdififd wffk.
     *  Thf rfsult will hbvf thf sbmf dby-of-wffk bs this dbtf.
     *  This mby dbusf thf dbtf to bf movfd into thf following yfbr.
     * <li>{@dodf MONTH_OF_YEAR} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd month-of-yfbr.
     *  Thf yfbr will bf undhbngfd. Thf dby-of-month will blso bf undhbngfd,
     *  unlfss it would bf invblid for thf nfw month bnd yfbr. In thbt dbsf, thf
     *  dby-of-month is bdjustfd to thf mbximum vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf PROLEPTIC_MONTH} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd prolfptid-month.
     *  Thf dby-of-month will bf undhbngfd, unlfss it would bf invblid for thf nfw month
     *  bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum vblid vbluf
     *  for thf nfw month bnd yfbr.
     * <li>{@dodf YEAR_OF_ERA} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd yfbr-of-frb.
     *  Thf frb bnd month will bf undhbngfd. Thf dby-of-month will blso bf undhbngfd,
     *  unlfss it would bf invblid for thf nfw month bnd yfbr. In thbt dbsf, thf
     *  dby-of-month is bdjustfd to thf mbximum vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf YEAR} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd yfbr.
     *  Thf month will bf undhbngfd. Thf dby-of-month will blso bf undhbngfd,
     *  unlfss it would bf invblid for thf nfw month bnd yfbr. In thbt dbsf, thf
     *  dby-of-month is bdjustfd to thf mbximum vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf ERA} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd frb.
     *  Thf yfbr-of-frb bnd month will bf undhbngfd. Thf dby-of-month will blso bf undhbngfd,
     *  unlfss it would bf invblid for thf nfw month bnd yfbr. In thbt dbsf, thf
     *  dby-of-month is bdjustfd to thf mbximum vblid vbluf for thf nfw month bnd yfbr.
     * </ul>
     * <p>
     * In bll dbsfs, if thf nfw vbluf is outsidf thf vblid rbngf of vblufs for thf fifld
     * thfn b {@dodf DbtfTimfExdfption} will bf thrown.
     * <p>
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.bdjustInto(Tfmporbl, long)}
     * pbssing {@dodf this} bs thf brgumfnt. In this dbsf, thf fifld dftfrminfs
     * whfthfr bnd how to bdjust thf instbnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm fifld  thf fifld to sft in thf rfsult, not null
     * @pbrbm nfwVbluf  thf nfw vbluf of thf fifld in thf rfsult
     * @rfturn b {@dodf LodblDbtf} bbsfd on {@dodf this} with thf spfdififd fifld sft, not null
     * @throws DbtfTimfExdfption if thf fifld dbnnot bf sft
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf with(TfmporblFifld fifld, long nfwVbluf) {
        if (fifld instbndfof ChronoFifld) {
            ChronoFifld f = (ChronoFifld) fifld;
            f.dhfdkVblidVbluf(nfwVbluf);
            switdh (f) {
                dbsf DAY_OF_WEEK: rfturn plusDbys(nfwVbluf - gftDbyOfWffk().gftVbluf());
                dbsf ALIGNED_DAY_OF_WEEK_IN_MONTH: rfturn plusDbys(nfwVbluf - gftLong(ALIGNED_DAY_OF_WEEK_IN_MONTH));
                dbsf ALIGNED_DAY_OF_WEEK_IN_YEAR: rfturn plusDbys(nfwVbluf - gftLong(ALIGNED_DAY_OF_WEEK_IN_YEAR));
                dbsf DAY_OF_MONTH: rfturn withDbyOfMonth((int) nfwVbluf);
                dbsf DAY_OF_YEAR: rfturn withDbyOfYfbr((int) nfwVbluf);
                dbsf EPOCH_DAY: rfturn LodblDbtf.ofEpodhDby(nfwVbluf);
                dbsf ALIGNED_WEEK_OF_MONTH: rfturn plusWffks(nfwVbluf - gftLong(ALIGNED_WEEK_OF_MONTH));
                dbsf ALIGNED_WEEK_OF_YEAR: rfturn plusWffks(nfwVbluf - gftLong(ALIGNED_WEEK_OF_YEAR));
                dbsf MONTH_OF_YEAR: rfturn withMonth((int) nfwVbluf);
                dbsf PROLEPTIC_MONTH: rfturn plusMonths(nfwVbluf - gftProlfptidMonth());
                dbsf YEAR_OF_ERA: rfturn withYfbr((int) (yfbr >= 1 ? nfwVbluf : 1 - nfwVbluf));
                dbsf YEAR: rfturn withYfbr((int) nfwVbluf);
                dbsf ERA: rfturn (gftLong(ERA) == nfwVbluf ? this : withYfbr(1 - yfbr));
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.bdjustInto(this, nfwVbluf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf yfbr bltfrfd.
     * <p>
     * If thf dby-of-month is invblid for thf yfbr, it will bf dhbngfd to thf lbst vblid dby of thf month.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbr  thf yfbr to sft in thf rfsult, from MIN_YEAR to MAX_YEAR
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf rfqufstfd yfbr, not null
     * @throws DbtfTimfExdfption if thf yfbr vbluf is invblid
     */
    publid LodblDbtf withYfbr(int yfbr) {
        if (this.yfbr == yfbr) {
            rfturn this;
        }
        YEAR.dhfdkVblidVbluf(yfbr);
        rfturn rfsolvfPrfviousVblid(yfbr, month, dby);
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf month-of-yfbr bltfrfd.
     * <p>
     * If thf dby-of-month is invblid for thf yfbr, it will bf dhbngfd to thf lbst vblid dby of thf month.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm month  thf month-of-yfbr to sft in thf rfsult, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf rfqufstfd month, not null
     * @throws DbtfTimfExdfption if thf month-of-yfbr vbluf is invblid
     */
    publid LodblDbtf withMonth(int month) {
        if (this.month == month) {
            rfturn this;
        }
        MONTH_OF_YEAR.dhfdkVblidVbluf(month);
        rfturn rfsolvfPrfviousVblid(yfbr, month, dby);
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf dby-of-month bltfrfd.
     * <p>
     * If thf rfsulting dbtf is invblid, bn fxdfption is thrown.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbyOfMonth  thf dby-of-month to sft in thf rfsult, from 1 to 28-31
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf rfqufstfd dby, not null
     * @throws DbtfTimfExdfption if thf dby-of-month vbluf is invblid,
     *  or if thf dby-of-month is invblid for thf month-yfbr
     */
    publid LodblDbtf withDbyOfMonth(int dbyOfMonth) {
        if (this.dby == dbyOfMonth) {
            rfturn this;
        }
        rfturn of(yfbr, month, dbyOfMonth);
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf dby-of-yfbr bltfrfd.
     * <p>
     * If thf rfsulting dbtf is invblid, bn fxdfption is thrown.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbyOfYfbr  thf dby-of-yfbr to sft in thf rfsult, from 1 to 365-366
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf rfqufstfd dby, not null
     * @throws DbtfTimfExdfption if thf dby-of-yfbr vbluf is invblid,
     *  or if thf dby-of-yfbr is invblid for thf yfbr
     */
    publid LodblDbtf withDbyOfYfbr(int dbyOfYfbr) {
        if (this.gftDbyOfYfbr() == dbyOfYfbr) {
            rfturn this;
        }
        rfturn ofYfbrDby(yfbr, dbyOfYfbr);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this dbtf with thf spfdififd bmount bddfd.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf spfdififd bmount bddfd.
     * Thf bmount is typidblly {@link Pfriod} but mby bf bny othfr typf implfmfnting
     * thf {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Thf dbldulbtion is dflfgbtfd to thf bmount objfdt by dblling
     * {@link TfmporblAmount#bddTo(Tfmporbl)}. Thf bmount implfmfntbtion is frff
     * to implfmfnt thf bddition in bny wby it wishfs, howfvfr it typidblly
     * dblls bbdk to {@link #plus(long, TfmporblUnit)}. Consult thf dodumfntbtion
     * of thf bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToAdd  thf bmount to bdd, not null
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf bddition mbdf, not null
     * @throws DbtfTimfExdfption if thf bddition dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf plus(TfmporblAmount bmountToAdd) {
        if (bmountToAdd instbndfof Pfriod) {
            Pfriod pfriodToAdd = (Pfriod) bmountToAdd;
            rfturn plusMonths(pfriodToAdd.toTotblMonths()).plusDbys(pfriodToAdd.gftDbys());
        }
        Objfdts.rfquirfNonNull(bmountToAdd, "bmountToAdd");
        rfturn (LodblDbtf) bmountToAdd.bddTo(this);
    }

    /**
     * Rfturns b dopy of this dbtf with thf spfdififd bmount bddfd.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf bmount
     * in tfrms of thf unit bddfd. If it is not possiblf to bdd thf bmount, bfdbusf thf
     * unit is not supportfd or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * In somf dbsfs, bdding thf bmount dbn dbusf thf rfsulting dbtf to bfdomf invblid.
     * For fxbmplf, bdding onf month to 31st Jbnubry would rfsult in 31st Ffbrubry.
     * In dbsfs likf this, thf unit is rfsponsiblf for rfsolving thf dbtf.
     * Typidblly it will dhoosf thf prfvious vblid dbtf, whidh would bf thf lbst vblid
     * dby of Ffbrubry in this fxbmplf.
     * <p>
     * If thf fifld is b {@link ChronoUnit} thfn thf bddition is implfmfntfd hfrf.
     * Thf supportfd fiflds bfhbvf bs follows:
     * <ul>
     * <li>{@dodf DAYS} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of dbys bddfd.
     *  This is fquivblfnt to {@link #plusDbys(long)}.
     * <li>{@dodf WEEKS} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of wffks bddfd.
     *  This is fquivblfnt to {@link #plusWffks(long)} bnd usfs b 7 dby wffk.
     * <li>{@dodf MONTHS} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of months bddfd.
     *  This is fquivblfnt to {@link #plusMonths(long)}.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf YEARS} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of yfbrs bddfd.
     *  This is fquivblfnt to {@link #plusYfbrs(long)}.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf DECADES} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of dfdbdfs bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 10.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf CENTURIES} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of dfnturifs bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 100.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf MILLENNIA} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of millfnnib bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 1,000.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * <li>{@dodf ERAS} -
     *  Rfturns b {@dodf LodblDbtf} with thf spfdififd numbfr of frbs bddfd.
     *  Only two frbs brf supportfd so thf bmount must bf onf, zfro or minus onf.
     *  If thf bmount is non-zfro thfn thf yfbr is dhbngfd sudh thbt thf yfbr-of-frb
     *  is undhbngfd.
     *  Thf dby-of-month will bf undhbngfd unlfss it would bf invblid for thf nfw
     *  month bnd yfbr. In thbt dbsf, thf dby-of-month is bdjustfd to thf mbximum
     *  vblid vbluf for thf nfw month bnd yfbr.
     * </ul>
     * <p>
     * All othfr {@dodf ChronoUnit} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bddTo(Tfmporbl, long)}
     * pbssing {@dodf this} bs thf brgumfnt. In this dbsf, thf unit dftfrminfs
     * whfthfr bnd how to pfrform thf bddition.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToAdd  thf bmount of thf unit to bdd to thf rfsult, mby bf nfgbtivf
     * @pbrbm unit  thf unit of thf bmount to bdd, not null
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf spfdififd bmount bddfd, not null
     * @throws DbtfTimfExdfption if thf bddition dbnnot bf mbdf
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf plus(long bmountToAdd, TfmporblUnit unit) {
        if (unit instbndfof ChronoUnit) {
            ChronoUnit f = (ChronoUnit) unit;
            switdh (f) {
                dbsf DAYS: rfturn plusDbys(bmountToAdd);
                dbsf WEEKS: rfturn plusWffks(bmountToAdd);
                dbsf MONTHS: rfturn plusMonths(bmountToAdd);
                dbsf YEARS: rfturn plusYfbrs(bmountToAdd);
                dbsf DECADES: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 10));
                dbsf CENTURIES: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 100));
                dbsf MILLENNIA: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 1000));
                dbsf ERAS: rfturn with(ERA, Mbth.bddExbdt(gftLong(ERA), bmountToAdd));
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        rfturn unit.bddTo(this, bmountToAdd);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of yfbrs bddfd.
     * <p>
     * This mfthod bdds thf spfdififd bmount to thf yfbrs fifld in thrff stfps:
     * <ol>
     * <li>Add thf input yfbrs to thf yfbr fifld</li>
     * <li>Chfdk if thf rfsulting dbtf would bf invblid</li>
     * <li>Adjust thf dby-of-month to thf lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2008-02-29 (lfbp yfbr) plus onf yfbr would rfsult in thf
     * invblid dbtf 2009-02-29 (stbndbrd yfbr). Instfbd of rfturning bn invblid
     * rfsult, thf lbst vblid dby of thf month, 2009-02-28, is sflfdtfd instfbd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbrsToAdd  thf yfbrs to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf yfbrs bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf plusYfbrs(long yfbrsToAdd) {
        if (yfbrsToAdd == 0) {
            rfturn this;
        }
        int nfwYfbr = YEAR.dhfdkVblidIntVbluf(yfbr + yfbrsToAdd);  // sbff ovfrflow
        rfturn rfsolvfPrfviousVblid(nfwYfbr, month, dby);
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of months bddfd.
     * <p>
     * This mfthod bdds thf spfdififd bmount to thf months fifld in thrff stfps:
     * <ol>
     * <li>Add thf input months to thf month-of-yfbr fifld</li>
     * <li>Chfdk if thf rfsulting dbtf would bf invblid</li>
     * <li>Adjust thf dby-of-month to thf lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2007-03-31 plus onf month would rfsult in thf invblid dbtf
     * 2007-04-31. Instfbd of rfturning bn invblid rfsult, thf lbst vblid dby
     * of thf month, 2007-04-30, is sflfdtfd instfbd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm monthsToAdd  thf months to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf months bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf plusMonths(long monthsToAdd) {
        if (monthsToAdd == 0) {
            rfturn this;
        }
        long monthCount = yfbr * 12L + (month - 1);
        long dbldMonths = monthCount + monthsToAdd;  // sbff ovfrflow
        int nfwYfbr = YEAR.dhfdkVblidIntVbluf(Mbth.floorDiv(dbldMonths, 12));
        int nfwMonth = (int)Mbth.floorMod(dbldMonths, 12) + 1;
        rfturn rfsolvfPrfviousVblid(nfwYfbr, nfwMonth, dby);
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of wffks bddfd.
     * <p>
     * This mfthod bdds thf spfdififd bmount in wffks to thf dbys fifld indrfmfnting
     * thf month bnd yfbr fiflds bs nfdfssbry to fnsurf thf rfsult rfmbins vblid.
     * Thf rfsult is only invblid if thf mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2008-12-31 plus onf wffk would rfsult in 2009-01-07.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm wffksToAdd  thf wffks to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf wffks bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf plusWffks(long wffksToAdd) {
        rfturn plusDbys(Mbth.multiplyExbdt(wffksToAdd, 7));
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of dbys bddfd.
     * <p>
     * This mfthod bdds thf spfdififd bmount to thf dbys fifld indrfmfnting thf
     * month bnd yfbr fiflds bs nfdfssbry to fnsurf thf rfsult rfmbins vblid.
     * Thf rfsult is only invblid if thf mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2008-12-31 plus onf dby would rfsult in 2009-01-01.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbysToAdd  thf dbys to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf dbys bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf plusDbys(long dbysToAdd) {
        if (dbysToAdd == 0) {
            rfturn this;
        }
        long mjDby = Mbth.bddExbdt(toEpodhDby(), dbysToAdd);
        rfturn LodblDbtf.ofEpodhDby(mjDby);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this dbtf with thf spfdififd bmount subtrbdtfd.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf spfdififd bmount subtrbdtfd.
     * Thf bmount is typidblly {@link Pfriod} but mby bf bny othfr typf implfmfnting
     * thf {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Thf dbldulbtion is dflfgbtfd to thf bmount objfdt by dblling
     * {@link TfmporblAmount#subtrbdtFrom(Tfmporbl)}. Thf bmount implfmfntbtion is frff
     * to implfmfnt thf subtrbdtion in bny wby it wishfs, howfvfr it typidblly
     * dblls bbdk to {@link #minus(long, TfmporblUnit)}. Consult thf dodumfntbtion
     * of thf bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToSubtrbdt  thf bmount to subtrbdt, not null
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf subtrbdtion mbdf, not null
     * @throws DbtfTimfExdfption if thf subtrbdtion dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf minus(TfmporblAmount bmountToSubtrbdt) {
        if (bmountToSubtrbdt instbndfof Pfriod) {
            Pfriod pfriodToSubtrbdt = (Pfriod) bmountToSubtrbdt;
            rfturn minusMonths(pfriodToSubtrbdt.toTotblMonths()).minusDbys(pfriodToSubtrbdt.gftDbys());
        }
        Objfdts.rfquirfNonNull(bmountToSubtrbdt, "bmountToSubtrbdt");
        rfturn (LodblDbtf) bmountToSubtrbdt.subtrbdtFrom(this);
    }

    /**
     * Rfturns b dopy of this dbtf with thf spfdififd bmount subtrbdtfd.
     * <p>
     * This rfturns b {@dodf LodblDbtf}, bbsfd on this onf, with thf bmount
     * in tfrms of thf unit subtrbdtfd. If it is not possiblf to subtrbdt thf bmount,
     * bfdbusf thf unit is not supportfd or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * This mfthod is fquivblfnt to {@link #plus(long, TfmporblUnit)} with thf bmount nfgbtfd.
     * Sff thbt mfthod for b full dfsdription of how bddition, bnd thus subtrbdtion, works.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToSubtrbdt  thf bmount of thf unit to subtrbdt from thf rfsult, mby bf nfgbtivf
     * @pbrbm unit  thf unit of thf bmount to subtrbdt, not null
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf spfdififd bmount subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf subtrbdtion dbnnot bf mbdf
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid LodblDbtf minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn (bmountToSubtrbdt == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-bmountToSubtrbdt, unit));
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of yfbrs subtrbdtfd.
     * <p>
     * This mfthod subtrbdts thf spfdififd bmount from thf yfbrs fifld in thrff stfps:
     * <ol>
     * <li>Subtrbdt thf input yfbrs from thf yfbr fifld</li>
     * <li>Chfdk if thf rfsulting dbtf would bf invblid</li>
     * <li>Adjust thf dby-of-month to thf lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2008-02-29 (lfbp yfbr) minus onf yfbr would rfsult in thf
     * invblid dbtf 2007-02-29 (stbndbrd yfbr). Instfbd of rfturning bn invblid
     * rfsult, thf lbst vblid dby of thf month, 2007-02-28, is sflfdtfd instfbd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbrsToSubtrbdt  thf yfbrs to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf yfbrs subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf minusYfbrs(long yfbrsToSubtrbdt) {
        rfturn (yfbrsToSubtrbdt == Long.MIN_VALUE ? plusYfbrs(Long.MAX_VALUE).plusYfbrs(1) : plusYfbrs(-yfbrsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of months subtrbdtfd.
     * <p>
     * This mfthod subtrbdts thf spfdififd bmount from thf months fifld in thrff stfps:
     * <ol>
     * <li>Subtrbdt thf input months from thf month-of-yfbr fifld</li>
     * <li>Chfdk if thf rfsulting dbtf would bf invblid</li>
     * <li>Adjust thf dby-of-month to thf lbst vblid dby if nfdfssbry</li>
     * </ol>
     * <p>
     * For fxbmplf, 2007-03-31 minus onf month would rfsult in thf invblid dbtf
     * 2007-02-31. Instfbd of rfturning bn invblid rfsult, thf lbst vblid dby
     * of thf month, 2007-02-28, is sflfdtfd instfbd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm monthsToSubtrbdt  thf months to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf months subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf minusMonths(long monthsToSubtrbdt) {
        rfturn (monthsToSubtrbdt == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of wffks subtrbdtfd.
     * <p>
     * This mfthod subtrbdts thf spfdififd bmount in wffks from thf dbys fifld dfdrfmfnting
     * thf month bnd yfbr fiflds bs nfdfssbry to fnsurf thf rfsult rfmbins vblid.
     * Thf rfsult is only invblid if thf mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2009-01-07 minus onf wffk would rfsult in 2008-12-31.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm wffksToSubtrbdt  thf wffks to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf wffks subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf minusWffks(long wffksToSubtrbdt) {
        rfturn (wffksToSubtrbdt == Long.MIN_VALUE ? plusWffks(Long.MAX_VALUE).plusWffks(1) : plusWffks(-wffksToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this {@dodf LodblDbtf} with thf spfdififd numbfr of dbys subtrbdtfd.
     * <p>
     * This mfthod subtrbdts thf spfdififd bmount from thf dbys fifld dfdrfmfnting thf
     * month bnd yfbr fiflds bs nfdfssbry to fnsurf thf rfsult rfmbins vblid.
     * Thf rfsult is only invblid if thf mbximum/minimum yfbr is fxdffdfd.
     * <p>
     * For fxbmplf, 2009-01-01 minus onf dby would rfsult in 2008-12-31.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbysToSubtrbdt  thf dbys to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf LodblDbtf} bbsfd on this dbtf with thf dbys subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd dbtf rbngf
     */
    publid LodblDbtf minusDbys(long dbysToSubtrbdt) {
        rfturn (dbysToSubtrbdt == Long.MIN_VALUE ? plusDbys(Long.MAX_VALUE).plusDbys(1) : plusDbys(-dbysToSubtrbdt));
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this dbtf using thf spfdififd qufry.
     * <p>
     * This qufrifs this dbtf using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    publid <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.lodblDbtf()) {
            rfturn (R) this;
        }
        rfturn ChronoLodblDbtf.supfr.qufry(qufry);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf thf sbmf dbtf bs this objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf dbtf dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * pbssing {@link ChronoFifld#EPOCH_DAY} bs thf fifld.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisLodblDbtf.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisLodblDbtf);
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn ChronoLodblDbtf.supfr.bdjustInto(tfmporbl);
    }

    /**
     * Cbldulbtfs thf bmount of timf until bnothfr dbtf in tfrms of thf spfdififd unit.
     * <p>
     * This dbldulbtfs thf bmount of timf bftwffn two {@dodf LodblDbtf}
     * objfdts in tfrms of b singlf {@dodf TfmporblUnit}.
     * Thf stbrt bnd fnd points brf {@dodf this} bnd thf spfdififd dbtf.
     * Thf rfsult will bf nfgbtivf if thf fnd is bfforf thf stbrt.
     * Thf {@dodf Tfmporbl} pbssfd to this mfthod is donvfrtfd to b
     * {@dodf LodblDbtf} using {@link #from(TfmporblAddfssor)}.
     * For fxbmplf, thf bmount in dbys bftwffn two dbtfs dbn bf dbldulbtfd
     * using {@dodf stbrtDbtf.until(fndDbtf, DAYS)}.
     * <p>
     * Thf dbldulbtion rfturns b wholf numbfr, rfprfsfnting thf numbfr of
     * domplftf units bftwffn thf two dbtfs.
     * For fxbmplf, thf bmount in months bftwffn 2012-06-15 bnd 2012-08-14
     * will only bf onf month bs it is onf dby short of two months.
     * <p>
     * Thfrf brf two fquivblfnt wbys of using this mfthod.
     * Thf first is to invokf this mfthod.
     * Thf sfdond is to usf {@link TfmporblUnit#bftwffn(Tfmporbl, Tfmporbl)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt
     *   bmount = stbrt.until(fnd, MONTHS);
     *   bmount = MONTHS.bftwffn(stbrt, fnd);
     * </prf>
     * Thf dhoidf should bf mbdf bbsfd on whidh mbkfs thf dodf morf rfbdbblf.
     * <p>
     * Thf dbldulbtion is implfmfntfd in this mfthod for {@link ChronoUnit}.
     * Thf units {@dodf DAYS}, {@dodf WEEKS}, {@dodf MONTHS}, {@dodf YEARS},
     * {@dodf DECADES}, {@dodf CENTURIES}, {@dodf MILLENNIA} bnd {@dodf ERAS}
     * brf supportfd. Othfr {@dodf ChronoUnit} vblufs will throw bn fxdfption.
     * <p>
     * If thf unit is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bftwffn(Tfmporbl, Tfmporbl)}
     * pbssing {@dodf this} bs thf first brgumfnt bnd thf donvfrtfd input tfmporbl
     * bs thf sfdond brgumfnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm fndExdlusivf  thf fnd dbtf, fxdlusivf, whidh is donvfrtfd to b {@dodf LodblDbtf}, not null
     * @pbrbm unit  thf unit to mfbsurf thf bmount in, not null
     * @rfturn thf bmount of timf bftwffn this dbtf bnd thf fnd dbtf
     * @throws DbtfTimfExdfption if thf bmount dbnnot bf dbldulbtfd, or thf fnd
     *  tfmporbl dbnnot bf donvfrtfd to b {@dodf LodblDbtf}
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long until(Tfmporbl fndExdlusivf, TfmporblUnit unit) {
        LodblDbtf fnd = LodblDbtf.from(fndExdlusivf);
        if (unit instbndfof ChronoUnit) {
            switdh ((ChronoUnit) unit) {
                dbsf DAYS: rfturn dbysUntil(fnd);
                dbsf WEEKS: rfturn dbysUntil(fnd) / 7;
                dbsf MONTHS: rfturn monthsUntil(fnd);
                dbsf YEARS: rfturn monthsUntil(fnd) / 12;
                dbsf DECADES: rfturn monthsUntil(fnd) / 120;
                dbsf CENTURIES: rfturn monthsUntil(fnd) / 1200;
                dbsf MILLENNIA: rfturn monthsUntil(fnd) / 12000;
                dbsf ERAS: rfturn fnd.gftLong(ERA) - gftLong(ERA);
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        rfturn unit.bftwffn(this, fnd);
    }

    long dbysUntil(LodblDbtf fnd) {
        rfturn fnd.toEpodhDby() - toEpodhDby();  // no ovfrflow
    }

    privbtf long monthsUntil(LodblDbtf fnd) {
        long pbdkfd1 = gftProlfptidMonth() * 32L + gftDbyOfMonth();  // no ovfrflow
        long pbdkfd2 = fnd.gftProlfptidMonth() * 32L + fnd.gftDbyOfMonth();  // no ovfrflow
        rfturn (pbdkfd2 - pbdkfd1) / 32;
    }

    /**
     * Cbldulbtfs thf pfriod bftwffn this dbtf bnd bnothfr dbtf bs b {@dodf Pfriod}.
     * <p>
     * This dbldulbtfs thf pfriod bftwffn two dbtfs in tfrms of yfbrs, months bnd dbys.
     * Thf stbrt bnd fnd points brf {@dodf this} bnd thf spfdififd dbtf.
     * Thf rfsult will bf nfgbtivf if thf fnd is bfforf thf stbrt.
     * Thf nfgbtivf sign will bf thf sbmf in fbdh of yfbr, month bnd dby.
     * <p>
     * Thf dbldulbtion is pfrformfd using thf ISO dblfndbr systfm.
     * If nfdfssbry, thf input dbtf will bf donvfrtfd to ISO.
     * <p>
     * Thf stbrt dbtf is indludfd, but thf fnd dbtf is not.
     * Thf pfriod is dbldulbtfd by rfmoving domplftf months, thfn dbldulbting
     * thf rfmbining numbfr of dbys, bdjusting to fnsurf thbt both hbvf thf sbmf sign.
     * Thf numbfr of months is thfn normblizfd into yfbrs bnd months bbsfd on b 12 month yfbr.
     * A month is donsidfrfd to bf domplftf if thf fnd dby-of-month is grfbtfr
     * thbn or fqubl to thf stbrt dby-of-month.
     * For fxbmplf, from {@dodf 2010-01-15} to {@dodf 2011-03-18} is "1 yfbr, 2 months bnd 3 dbys".
     * <p>
     * Thfrf brf two fquivblfnt wbys of using this mfthod.
     * Thf first is to invokf this mfthod.
     * Thf sfdond is to usf {@link Pfriod#bftwffn(LodblDbtf, LodblDbtf)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt
     *   pfriod = stbrt.until(fnd);
     *   pfriod = Pfriod.bftwffn(stbrt, fnd);
     * </prf>
     * Thf dhoidf should bf mbdf bbsfd on whidh mbkfs thf dodf morf rfbdbblf.
     *
     * @pbrbm fndDbtfExdlusivf  thf fnd dbtf, fxdlusivf, whidh mby bf in bny dhronology, not null
     * @rfturn thf pfriod bftwffn this dbtf bnd thf fnd dbtf, not null
     */
    @Ovfrridf
    publid Pfriod until(ChronoLodblDbtf fndDbtfExdlusivf) {
        LodblDbtf fnd = LodblDbtf.from(fndDbtfExdlusivf);
        long totblMonths = fnd.gftProlfptidMonth() - this.gftProlfptidMonth();  // sbff
        int dbys = fnd.dby - this.dby;
        if (totblMonths > 0 && dbys < 0) {
            totblMonths--;
            LodblDbtf dbldDbtf = this.plusMonths(totblMonths);
            dbys = (int) (fnd.toEpodhDby() - dbldDbtf.toEpodhDby());  // sbff
        } flsf if (totblMonths < 0 && dbys > 0) {
            totblMonths++;
            dbys -= fnd.lfngthOfMonth();
        }
        long yfbrs = totblMonths / 12;  // sbff
        int months = (int) (totblMonths % 12);  // sbff
        rfturn Pfriod.of(Mbth.toIntExbdt(yfbrs), months, dbys);
    }

    /**
     * Formbts this dbtf using thf spfdififd formbttfr.
     * <p>
     * This dbtf will bf pbssfd to thf formbttfr to produdf b string.
     *
     * @pbrbm formbttfr  thf formbttfr to usf, not null
     * @rfturn thf formbttfd dbtf string, not null
     * @throws DbtfTimfExdfption if bn frror oddurs during printing
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid String formbt(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.formbt(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Combinfs this dbtf with b timf to drfbtf b {@dodf LodblDbtfTimf}.
     * <p>
     * This rfturns b {@dodf LodblDbtfTimf} formfd from this dbtf bt thf spfdififd timf.
     * All possiblf dombinbtions of dbtf bnd timf brf vblid.
     *
     * @pbrbm timf  thf timf to dombinf with, not null
     * @rfturn thf lodbl dbtf-timf formfd from this dbtf bnd thf spfdififd timf, not null
     */
    @Ovfrridf
    publid LodblDbtfTimf btTimf(LodblTimf timf) {
        rfturn LodblDbtfTimf.of(this, timf);
    }

    /**
     * Combinfs this dbtf with b timf to drfbtf b {@dodf LodblDbtfTimf}.
     * <p>
     * This rfturns b {@dodf LodblDbtfTimf} formfd from this dbtf bt thf
     * spfdififd hour bnd minutf.
     * Thf sfdonds bnd nbnosfdond fiflds will bf sft to zfro.
     * Thf individubl timf fiflds must bf within thfir vblid rbngf.
     * All possiblf dombinbtions of dbtf bnd timf brf vblid.
     *
     * @pbrbm hour  thf hour-of-dby to usf, from 0 to 23
     * @pbrbm minutf  thf minutf-of-hour to usf, from 0 to 59
     * @rfturn thf lodbl dbtf-timf formfd from this dbtf bnd thf spfdififd timf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf
     */
    publid LodblDbtfTimf btTimf(int hour, int minutf) {
        rfturn btTimf(LodblTimf.of(hour, minutf));
    }

    /**
     * Combinfs this dbtf with b timf to drfbtf b {@dodf LodblDbtfTimf}.
     * <p>
     * This rfturns b {@dodf LodblDbtfTimf} formfd from this dbtf bt thf
     * spfdififd hour, minutf bnd sfdond.
     * Thf nbnosfdond fifld will bf sft to zfro.
     * Thf individubl timf fiflds must bf within thfir vblid rbngf.
     * All possiblf dombinbtions of dbtf bnd timf brf vblid.
     *
     * @pbrbm hour  thf hour-of-dby to usf, from 0 to 23
     * @pbrbm minutf  thf minutf-of-hour to usf, from 0 to 59
     * @pbrbm sfdond  thf sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @rfturn thf lodbl dbtf-timf formfd from this dbtf bnd thf spfdififd timf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf
     */
    publid LodblDbtfTimf btTimf(int hour, int minutf, int sfdond) {
        rfturn btTimf(LodblTimf.of(hour, minutf, sfdond));
    }

    /**
     * Combinfs this dbtf with b timf to drfbtf b {@dodf LodblDbtfTimf}.
     * <p>
     * This rfturns b {@dodf LodblDbtfTimf} formfd from this dbtf bt thf
     * spfdififd hour, minutf, sfdond bnd nbnosfdond.
     * Thf individubl timf fiflds must bf within thfir vblid rbngf.
     * All possiblf dombinbtions of dbtf bnd timf brf vblid.
     *
     * @pbrbm hour  thf hour-of-dby to usf, from 0 to 23
     * @pbrbm minutf  thf minutf-of-hour to usf, from 0 to 59
     * @pbrbm sfdond  thf sfdond-of-minutf to rfprfsfnt, from 0 to 59
     * @pbrbm nbnoOfSfdond  thf nbno-of-sfdond to rfprfsfnt, from 0 to 999,999,999
     * @rfturn thf lodbl dbtf-timf formfd from this dbtf bnd thf spfdififd timf, not null
     * @throws DbtfTimfExdfption if thf vbluf of bny fifld is out of rbngf
     */
    publid LodblDbtfTimf btTimf(int hour, int minutf, int sfdond, int nbnoOfSfdond) {
        rfturn btTimf(LodblTimf.of(hour, minutf, sfdond, nbnoOfSfdond));
    }

    /**
     * Combinfs this dbtf with bn offsft timf to drfbtf bn {@dodf OffsftDbtfTimf}.
     * <p>
     * This rfturns bn {@dodf OffsftDbtfTimf} formfd from this dbtf bt thf spfdififd timf.
     * All possiblf dombinbtions of dbtf bnd timf brf vblid.
     *
     * @pbrbm timf  thf timf to dombinf with, not null
     * @rfturn thf offsft dbtf-timf formfd from this dbtf bnd thf spfdififd timf, not null
     */
    publid OffsftDbtfTimf btTimf(OffsftTimf timf) {
        rfturn OffsftDbtfTimf.of(LodblDbtfTimf.of(this, timf.toLodblTimf()), timf.gftOffsft());
    }

    /**
     * Combinfs this dbtf with thf timf of midnight to drfbtf b {@dodf LodblDbtfTimf}
     * bt thf stbrt of this dbtf.
     * <p>
     * This rfturns b {@dodf LodblDbtfTimf} formfd from this dbtf bt thf timf of
     * midnight, 00:00, bt thf stbrt of this dbtf.
     *
     * @rfturn thf lodbl dbtf-timf of midnight bt thf stbrt of this dbtf, not null
     */
    publid LodblDbtfTimf btStbrtOfDby() {
        rfturn LodblDbtfTimf.of(this, LodblTimf.MIDNIGHT);
    }

    /**
     * Rfturns b zonfd dbtf-timf from this dbtf bt thf fbrlifst vblid timf bddording
     * to thf rulfs in thf timf-zonf.
     * <p>
     * Timf-zonf rulfs, sudh bs dbylight sbvings, mfbn thbt not fvfry lodbl dbtf-timf
     * is vblid for thf spfdififd zonf, thus thf lodbl dbtf-timf mby not bf midnight.
     * <p>
     * In most dbsfs, thfrf is only onf vblid offsft for b lodbl dbtf-timf.
     * In thf dbsf of bn ovfrlbp, thfrf brf two vblid offsfts, bnd thf fbrlifr onf is usfd,
     * dorrfsponding to thf first oddurrfndf of midnight on thf dbtf.
     * In thf dbsf of b gbp, thf zonfd dbtf-timf will rfprfsfnt thf instbnt just bftfr thf gbp.
     * <p>
     * If thf zonf ID is b {@link ZonfOffsft}, thfn thf rfsult blwbys hbs b timf of midnight.
     * <p>
     * To donvfrt to b spfdifid timf in b givfn timf-zonf dbll {@link #btTimf(LodblTimf)}
     * followfd by {@link LodblDbtfTimf#btZonf(ZonfId)}.
     *
     * @pbrbm zonf  thf zonf ID to usf, not null
     * @rfturn thf zonfd dbtf-timf formfd from this dbtf bnd thf fbrlifst vblid timf for thf zonf, not null
     */
    publid ZonfdDbtfTimf btStbrtOfDby(ZonfId zonf) {
        Objfdts.rfquirfNonNull(zonf, "zonf");
        // nffd to hbndlf dbsf whfrf thfrf is b gbp from 11:30 to 00:30
        // stbndbrd ZDT fbdtory would rfsult in 01:00 rbthfr thbn 00:30
        LodblDbtfTimf ldt = btTimf(LodblTimf.MIDNIGHT);
        if (zonf instbndfof ZonfOffsft == fblsf) {
            ZonfRulfs rulfs = zonf.gftRulfs();
            ZonfOffsftTrbnsition trbns = rulfs.gftTrbnsition(ldt);
            if (trbns != null && trbns.isGbp()) {
                ldt = trbns.gftDbtfTimfAftfr();
            }
        }
        rfturn ZonfdDbtfTimf.of(ldt, zonf);
    }

    //-----------------------------------------------------------------------
    @Ovfrridf
    publid long toEpodhDby() {
        long y = yfbr;
        long m = month;
        long totbl = 0;
        totbl += 365 * y;
        if (y >= 0) {
            totbl += (y + 3) / 4 - (y + 99) / 100 + (y + 399) / 400;
        } flsf {
            totbl -= y / -4 - y / -100 + y / -400;
        }
        totbl += ((367 * m - 362) / 12);
        totbl += dby - 1;
        if (m > 2) {
            totbl--;
            if (isLfbpYfbr() == fblsf) {
                totbl--;
            }
        }
        rfturn totbl - DAYS_0000_TO_1970;
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs this dbtf to bnothfr dbtf.
     * <p>
     * Thf dompbrison is primbrily bbsfd on thf dbtf, from fbrlifst to lbtfst.
     * It is "donsistfnt with fqubls", bs dffinfd by {@link Compbrbblf}.
     * <p>
     * If bll thf dbtfs bfing dompbrfd brf instbndfs of {@dodf LodblDbtf},
     * thfn thf dompbrison will bf fntirfly bbsfd on thf dbtf.
     * If somf dbtfs bfing dompbrfd brf in difffrfnt dhronologifs, thfn thf
     * dhronology is blso donsidfrfd, sff {@link jbvb.timf.dhrono.ChronoLodblDbtf#dompbrfTo}.
     *
     * @pbrbm othfr  thf othfr dbtf to dompbrf to, not null
     * @rfturn thf dompbrbtor vbluf, nfgbtivf if lfss, positivf if grfbtfr
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid int dompbrfTo(ChronoLodblDbtf othfr) {
        if (othfr instbndfof LodblDbtf) {
            rfturn dompbrfTo0((LodblDbtf) othfr);
        }
        rfturn ChronoLodblDbtf.supfr.dompbrfTo(othfr);
    }

    int dompbrfTo0(LodblDbtf othfrDbtf) {
        int dmp = (yfbr - othfrDbtf.yfbr);
        if (dmp == 0) {
            dmp = (month - othfrDbtf.month);
            if (dmp == 0) {
                dmp = (dby - othfrDbtf.dby);
            }
        }
        rfturn dmp;
    }

    /**
     * Chfdks if this dbtf is bftfr thf spfdififd dbtf.
     * <p>
     * This dhfdks to sff if this dbtf rfprfsfnts b point on thf
     * lodbl timf-linf bftfr thf othfr dbtf.
     * <prf>
     *   LodblDbtf b = LodblDbtf.of(2012, 6, 30);
     *   LodblDbtf b = LodblDbtf.of(2012, 7, 1);
     *   b.isAftfr(b) == fblsf
     *   b.isAftfr(b) == fblsf
     *   b.isAftfr(b) == truf
     * </prf>
     * <p>
     * This mfthod only donsidfrs thf position of thf two dbtfs on thf lodbl timf-linf.
     * It dofs not tbkf into bddount thf dhronology, or dblfndbr systfm.
     * This is difffrfnt from thf dompbrison in {@link #dompbrfTo(ChronoLodblDbtf)},
     * but is thf sbmf bpprobdh bs {@link ChronoLodblDbtf#timfLinfOrdfr()}.
     *
     * @pbrbm othfr  thf othfr dbtf to dompbrf to, not null
     * @rfturn truf if this dbtf is bftfr thf spfdififd dbtf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isAftfr(ChronoLodblDbtf othfr) {
        if (othfr instbndfof LodblDbtf) {
            rfturn dompbrfTo0((LodblDbtf) othfr) > 0;
        }
        rfturn ChronoLodblDbtf.supfr.isAftfr(othfr);
    }

    /**
     * Chfdks if this dbtf is bfforf thf spfdififd dbtf.
     * <p>
     * This dhfdks to sff if this dbtf rfprfsfnts b point on thf
     * lodbl timf-linf bfforf thf othfr dbtf.
     * <prf>
     *   LodblDbtf b = LodblDbtf.of(2012, 6, 30);
     *   LodblDbtf b = LodblDbtf.of(2012, 7, 1);
     *   b.isBfforf(b) == truf
     *   b.isBfforf(b) == fblsf
     *   b.isBfforf(b) == fblsf
     * </prf>
     * <p>
     * This mfthod only donsidfrs thf position of thf two dbtfs on thf lodbl timf-linf.
     * It dofs not tbkf into bddount thf dhronology, or dblfndbr systfm.
     * This is difffrfnt from thf dompbrison in {@link #dompbrfTo(ChronoLodblDbtf)},
     * but is thf sbmf bpprobdh bs {@link ChronoLodblDbtf#timfLinfOrdfr()}.
     *
     * @pbrbm othfr  thf othfr dbtf to dompbrf to, not null
     * @rfturn truf if this dbtf is bfforf thf spfdififd dbtf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isBfforf(ChronoLodblDbtf othfr) {
        if (othfr instbndfof LodblDbtf) {
            rfturn dompbrfTo0((LodblDbtf) othfr) < 0;
        }
        rfturn ChronoLodblDbtf.supfr.isBfforf(othfr);
    }

    /**
     * Chfdks if this dbtf is fqubl to thf spfdififd dbtf.
     * <p>
     * This dhfdks to sff if this dbtf rfprfsfnts thf sbmf point on thf
     * lodbl timf-linf bs thf othfr dbtf.
     * <prf>
     *   LodblDbtf b = LodblDbtf.of(2012, 6, 30);
     *   LodblDbtf b = LodblDbtf.of(2012, 7, 1);
     *   b.isEqubl(b) == fblsf
     *   b.isEqubl(b) == truf
     *   b.isEqubl(b) == fblsf
     * </prf>
     * <p>
     * This mfthod only donsidfrs thf position of thf two dbtfs on thf lodbl timf-linf.
     * It dofs not tbkf into bddount thf dhronology, or dblfndbr systfm.
     * This is difffrfnt from thf dompbrison in {@link #dompbrfTo(ChronoLodblDbtf)}
     * but is thf sbmf bpprobdh bs {@link ChronoLodblDbtf#timfLinfOrdfr()}.
     *
     * @pbrbm othfr  thf othfr dbtf to dompbrf to, not null
     * @rfturn truf if this dbtf is fqubl to thf spfdififd dbtf
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid boolfbn isEqubl(ChronoLodblDbtf othfr) {
        if (othfr instbndfof LodblDbtf) {
            rfturn dompbrfTo0((LodblDbtf) othfr) == 0;
        }
        rfturn ChronoLodblDbtf.supfr.isEqubl(othfr);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this dbtf is fqubl to bnothfr dbtf.
     * <p>
     * Compbrfs this {@dodf LodblDbtf} with bnothfr fnsuring thbt thf dbtf is thf sbmf.
     * <p>
     * Only objfdts of typf {@dodf LodblDbtf} brf dompbrfd, othfr typfs rfturn fblsf.
     * To dompbrf thf dbtfs of two {@dodf TfmporblAddfssor} instbndfs, indluding dbtfs
     * in two difffrfnt dhronologifs, usf {@link ChronoFifld#EPOCH_DAY} bs b dompbrbtor.
     *
     * @pbrbm obj  thf objfdt to dhfdk, null rfturns fblsf
     * @rfturn truf if this is fqubl to thf othfr dbtf
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }
        if (obj instbndfof LodblDbtf) {
            rfturn dompbrfTo0((LodblDbtf) obj) == 0;
        }
        rfturn fblsf;
    }

    /**
     * A hbsh dodf for this dbtf.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        int yfbrVbluf = yfbr;
        int monthVbluf = month;
        int dbyVbluf = dby;
        rfturn (yfbrVbluf & 0xFFFFF800) ^ ((yfbrVbluf << 11) + (monthVbluf << 6) + (dbyVbluf));
    }

    //-----------------------------------------------------------------------
    /**
     * Outputs this dbtf bs b {@dodf String}, sudh bs {@dodf 2007-12-03}.
     * <p>
     * Thf output will bf in thf ISO-8601 formbt {@dodf uuuu-MM-dd}.
     *
     * @rfturn b string rfprfsfntbtion of this dbtf, not null
     */
    @Ovfrridf
    publid String toString() {
        int yfbrVbluf = yfbr;
        int monthVbluf = month;
        int dbyVbluf = dby;
        int bbsYfbr = Mbth.bbs(yfbrVbluf);
        StringBuildfr buf = nfw StringBuildfr(10);
        if (bbsYfbr < 1000) {
            if (yfbrVbluf < 0) {
                buf.bppfnd(yfbrVbluf - 10000).dflftfChbrAt(1);
            } flsf {
                buf.bppfnd(yfbrVbluf + 10000).dflftfChbrAt(0);
            }
        } flsf {
            if (yfbrVbluf > 9999) {
                buf.bppfnd('+');
            }
            buf.bppfnd(yfbrVbluf);
        }
        rfturn buf.bppfnd(monthVbluf < 10 ? "-0" : "-")
            .bppfnd(monthVbluf)
            .bppfnd(dbyVbluf < 10 ? "-0" : "-")
            .bppfnd(dbyVbluf)
            .toString();
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs thf objfdt using b
     * <b hrff="../../sfriblizfd-form.html#jbvb.timf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(3);  // idfntififs b LodblDbtf
     *  out.writfInt(yfbr);
     *  out.writfBytf(month);
     *  out.writfBytf(dby);
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.LOCAL_DATE_TYPE, this);
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    void writfExtfrnbl(DbtbOutput out) throws IOExdfption {
        out.writfInt(yfbr);
        out.writfBytf(month);
        out.writfBytf(dby);
    }

    stbtid LodblDbtf rfbdExtfrnbl(DbtbInput in) throws IOExdfption {
        int yfbr = in.rfbdInt();
        int month = in.rfbdBytf();
        int dbyOfMonth = in.rfbdBytf();
        rfturn LodblDbtf.of(yfbr, month, dbyOfMonth);
    }

}
