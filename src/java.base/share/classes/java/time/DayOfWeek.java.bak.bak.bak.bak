/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_WEEK;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.DAYS;

import jbvb.timf.formbt.DbtfTimfFormbttfrBuildfr;
import jbvb.timf.formbt.TfxtStylf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.tfmporbl.WffkFiflds;
import jbvb.util.Lodblf;

/**
 * A dby-of-wffk, sudh bs 'Tufsdby'.
 * <p>
 * {@dodf DbyOfWffk} is bn fnum rfprfsfnting thf 7 dbys of thf wffk -
 * Mondby, Tufsdby, Wfdnfsdby, Thursdby, Fridby, Sbturdby bnd Sundby.
 * <p>
 * In bddition to thf tfxtubl fnum nbmf, fbdh dby-of-wffk hbs bn {@dodf int} vbluf.
 * Thf {@dodf int} vbluf follows thf ISO-8601 stbndbrd, from 1 (Mondby) to 7 (Sundby).
 * It is rfdommfndfd thbt bpplidbtions usf thf fnum rbthfr thbn thf {@dodf int} vbluf
 * to fnsurf dodf dlbrity.
 * <p>
 * This fnum providfs bddfss to thf lodblizfd tfxtubl form of thf dby-of-wffk.
 * Somf lodblfs blso bssign difffrfnt numfrid vblufs to thf dbys, dfdlbring
 * Sundby to hbvf thf vbluf 1, howfvfr this dlbss providfs no support for this.
 * Sff {@link WffkFiflds} for lodblizfd wffk-numbfring.
 * <p>
 * <b>Do not usf {@dodf ordinbl()} to obtbin thf numfrid rfprfsfntbtion of {@dodf DbyOfWffk}.
 * Usf {@dodf gftVbluf()} instfbd.</b>
 * <p>
 * This fnum rfprfsfnts b dommon dondfpt thbt is found in mbny dblfndbr systfms.
 * As sudh, this fnum mby bf usfd by bny dblfndbr systfm thbt hbs thf dby-of-wffk
 * dondfpt dffinfd fxbdtly fquivblfnt to thf ISO dblfndbr systfm.
 *
 * @implSpfd
 * This is bn immutbblf bnd thrfbd-sbff fnum.
 *
 * @sindf 1.8
 */
publid fnum DbyOfWffk implfmfnts TfmporblAddfssor, TfmporblAdjustfr {

    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Mondby.
     * This hbs thf numfrid vbluf of {@dodf 1}.
     */
    MONDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Tufsdby.
     * This hbs thf numfrid vbluf of {@dodf 2}.
     */
    TUESDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Wfdnfsdby.
     * This hbs thf numfrid vbluf of {@dodf 3}.
     */
    WEDNESDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Thursdby.
     * This hbs thf numfrid vbluf of {@dodf 4}.
     */
    THURSDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Fridby.
     * This hbs thf numfrid vbluf of {@dodf 5}.
     */
    FRIDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Sbturdby.
     * This hbs thf numfrid vbluf of {@dodf 6}.
     */
    SATURDAY,
    /**
     * Thf singlfton instbndf for thf dby-of-wffk of Sundby.
     * This hbs thf numfrid vbluf of {@dodf 7}.
     */
    SUNDAY;
    /**
     * Privbtf dbdhf of bll thf donstbnts.
     */
    privbtf stbtid finbl DbyOfWffk[] ENUMS = DbyOfWffk.vblufs();

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf DbyOfWffk} from bn {@dodf int} vbluf.
     * <p>
     * {@dodf DbyOfWffk} is bn fnum rfprfsfnting thf 7 dbys of thf wffk.
     * This fbdtory bllows thf fnum to bf obtbinfd from thf {@dodf int} vbluf.
     * Thf {@dodf int} vbluf follows thf ISO-8601 stbndbrd, from 1 (Mondby) to 7 (Sundby).
     *
     * @pbrbm dbyOfWffk  thf dby-of-wffk to rfprfsfnt, from 1 (Mondby) to 7 (Sundby)
     * @rfturn thf dby-of-wffk singlfton, not null
     * @throws DbtfTimfExdfption if thf dby-of-wffk is invblid
     */
    publid stbtid DbyOfWffk of(int dbyOfWffk) {
        if (dbyOfWffk < 1 || dbyOfWffk > 7) {
            throw nfw DbtfTimfExdfption("Invblid vbluf for DbyOfWffk: " + dbyOfWffk);
        }
        rfturn ENUMS[dbyOfWffk - 1];
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf DbyOfWffk} from b tfmporbl objfdt.
     * <p>
     * This obtbins b dby-of-wffk bbsfd on thf spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * whidh this fbdtory donvfrts to bn instbndf of {@dodf DbyOfWffk}.
     * <p>
     * Thf donvfrsion fxtrbdts thf {@link ChronoFifld#DAY_OF_WEEK DAY_OF_WEEK} fifld.
     * <p>
     * This mfthod mbtdhfs thf signbturf of thf fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mfthod rfffrfndf, {@dodf DbyOfWffk::from}.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to donvfrt, not null
     * @rfturn thf dby-of-wffk, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to b {@dodf DbyOfWffk}
     */
    publid stbtid DbyOfWffk from(TfmporblAddfssor tfmporbl) {
        if (tfmporbl instbndfof DbyOfWffk) {
            rfturn (DbyOfWffk) tfmporbl;
        }
        try {
            rfturn of(tfmporbl.gft(DAY_OF_WEEK));
        } dbtdh (DbtfTimfExdfption fx) {
            throw nfw DbtfTimfExdfption("Unbblf to obtbin DbyOfWffk from TfmporblAddfssor: " +
                    tfmporbl + " of typf " + tfmporbl.gftClbss().gftNbmf(), fx);
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf dby-of-wffk {@dodf int} vbluf.
     * <p>
     * Thf vblufs brf numbfrfd following thf ISO-8601 stbndbrd, from 1 (Mondby) to 7 (Sundby).
     * Sff {@link jbvb.timf.tfmporbl.WffkFiflds#dbyOfWffk()} for lodblizfd wffk-numbfring.
     *
     * @rfturn thf dby-of-wffk, from 1 (Mondby) to 7 (Sundby)
     */
    publid int gftVbluf() {
        rfturn ordinbl() + 1;
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf tfxtubl rfprfsfntbtion, sudh bs 'Mon' or 'Fridby'.
     * <p>
     * This rfturns thf tfxtubl nbmf usfd to idfntify thf dby-of-wffk,
     * suitbblf for prfsfntbtion to thf usfr.
     * Thf pbrbmftfrs dontrol thf stylf of thf rfturnfd tfxt bnd thf lodblf.
     * <p>
     * If no tfxtubl mbpping is found thfn thf {@link #gftVbluf() numfrid vbluf} is rfturnfd.
     *
     * @pbrbm stylf  thf lfngth of thf tfxt rfquirfd, not null
     * @pbrbm lodblf  thf lodblf to usf, not null
     * @rfturn thf tfxt vbluf of thf dby-of-wffk, not null
     */
    publid String gftDisplbyNbmf(TfxtStylf stylf, Lodblf lodblf) {
        rfturn nfw DbtfTimfFormbttfrBuildfr().bppfndTfxt(DAY_OF_WEEK, stylf).toFormbttfr(lodblf).formbt(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if this dby-of-wffk dbn bf qufrifd for thf spfdififd fifld.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf} bnd
     * {@link #gft(TfmporblFifld) gft} mfthods will throw bn fxdfption.
     * <p>
     * If thf fifld is {@link ChronoFifld#DAY_OF_WEEK DAY_OF_WEEK} thfn
     * this mfthod rfturns truf.
     * All othfr {@dodf ChronoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld is supportfd on this dby-of-wffk, fblsf if not
     */
    @Ovfrridf
    publid boolfbn isSupportfd(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            rfturn fifld == DAY_OF_WEEK;
        }
        rfturn fifld != null && fifld.isSupportfdBy(this);
    }

    /**
     * Gfts thf rbngf of vblid vblufs for thf spfdififd fifld.
     * <p>
     * Thf rbngf objfdt fxprfssfs thf minimum bnd mbximum vblid vblufs for b fifld.
     * This dby-of-wffk is usfd to fnhbndf thf bddurbdy of thf rfturnfd rbngf.
     * If it is not possiblf to rfturn thf rbngf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is {@link ChronoFifld#DAY_OF_WEEK DAY_OF_WEEK} thfn thf
     * rbngf of thf dby-of-wffk, from 1 to 7, will bf rfturnfd.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf rbngf dbn bf obtbinfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to qufry thf rbngf for, not null
     * @rfturn thf rbngf of vblid vblufs for thf fifld, not null
     * @throws DbtfTimfExdfption if thf rbngf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     */
    @Ovfrridf
    publid VblufRbngf rbngf(TfmporblFifld fifld) {
        if (fifld == DAY_OF_WEEK) {
            rfturn fifld.rbngf();
        }
        rfturn TfmporblAddfssor.supfr.rbngf(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this dby-of-wffk bs bn {@dodf int}.
     * <p>
     * This qufrifs this dby-of-wffk for thf vbluf of thf spfdififd fifld.
     * Thf rfturnfd vbluf will blwbys bf within thf vblid rbngf of vblufs for thf fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is {@link ChronoFifld#DAY_OF_WEEK DAY_OF_WEEK} thfn thf
     * vbluf of thf dby-of-wffk, from 1 to 7, will bf rfturnfd.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld, within thf vblid rbngf of vblufs
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd or
     *         thf vbluf is outsidf thf rbngf of vblid vblufs for thf fifld
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd or
     *         thf rbngf of vblufs fxdffds bn {@dodf int}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid int gft(TfmporblFifld fifld) {
        if (fifld == DAY_OF_WEEK) {
            rfturn gftVbluf();
        }
        rfturn TfmporblAddfssor.supfr.gft(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this dby-of-wffk bs b {@dodf long}.
     * <p>
     * This qufrifs this dby-of-wffk for thf vbluf of thf spfdififd fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is {@link ChronoFifld#DAY_OF_WEEK DAY_OF_WEEK} thfn thf
     * vbluf of thf dby-of-wffk, from 1 to 7, will bf rfturnfd.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long gftLong(TfmporblFifld fifld) {
        if (fifld == DAY_OF_WEEK) {
            rfturn gftVbluf();
        } flsf if (fifld instbndfof ChronoFifld) {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.gftFrom(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns thf dby-of-wffk thbt is thf spfdififd numbfr of dbys bftfr this onf.
     * <p>
     * Thf dbldulbtion rolls bround thf fnd of thf wffk from Sundby to Mondby.
     * Thf spfdififd pfriod mby bf nfgbtivf.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbys  thf dbys to bdd, positivf or nfgbtivf
     * @rfturn thf rfsulting dby-of-wffk, not null
     */
    publid DbyOfWffk plus(long dbys) {
        int bmount = (int) (dbys % 7);
        rfturn ENUMS[(ordinbl() + (bmount + 7)) % 7];
    }

    /**
     * Rfturns thf dby-of-wffk thbt is thf spfdififd numbfr of dbys bfforf this onf.
     * <p>
     * Thf dbldulbtion rolls bround thf stbrt of thf yfbr from Mondby to Sundby.
     * Thf spfdififd pfriod mby bf nfgbtivf.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm dbys  thf dbys to subtrbdt, positivf or nfgbtivf
     * @rfturn thf rfsulting dby-of-wffk, not null
     */
    publid DbyOfWffk minus(long dbys) {
        rfturn plus(-(dbys % 7));
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this dby-of-wffk using thf spfdififd qufry.
     * <p>
     * This qufrifs this dby-of-wffk using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    publid <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.prfdision()) {
            rfturn (R) DAYS;
        }
        rfturn TfmporblAddfssor.supfr.qufry(qufry);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf this dby-of-wffk.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf dby-of-wffk dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * pbssing {@link ChronoFifld#DAY_OF_WEEK} bs thf fifld.
     * Notf thbt this bdjusts forwbrds or bbdkwbrds within b Mondby to Sundby wffk.
     * Sff {@link jbvb.timf.tfmporbl.WffkFiflds#dbyOfWffk()} for lodblizfd wffk stbrt dbys.
     * Sff {@dodf TfmporblAdjustfr} for othfr bdjustfrs with morf dontrol,
     * sudh bs {@dodf nfxt(MONDAY)}.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisDbyOfWffk.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisDbyOfWffk);
     * </prf>
     * <p>
     * For fxbmplf, givfn b dbtf thbt is b Wfdnfsdby, thf following brf output:
     * <prf>
     *   dbtfOnWfd.with(MONDAY);     // two dbys fbrlifr
     *   dbtfOnWfd.with(TUESDAY);    // onf dby fbrlifr
     *   dbtfOnWfd.with(WEDNESDAY);  // sbmf dbtf
     *   dbtfOnWfd.with(THURSDAY);   // onf dby lbtfr
     *   dbtfOnWfd.with(FRIDAY);     // two dbys lbtfr
     *   dbtfOnWfd.with(SATURDAY);   // thrff dbys lbtfr
     *   dbtfOnWfd.with(SUNDAY);     // four dbys lbtfr
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn tfmporbl.with(DAY_OF_WEEK, gftVbluf());
    }

}
