/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.LodblTimf.MINUTES_PER_HOUR;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_HOUR;
import stbtid jbvb.timf.LodblTimf.SECONDS_PER_MINUTE;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.OFFSET_SECONDS;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.zonf.ZonfRulfs;
import jbvb.util.Objfdts;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;

/**
 * A timf-zonf offsft from Grffnwidh/UTC, sudh bs {@dodf +02:00}.
 * <p>
 * A timf-zonf offsft is thf bmount of timf thbt b timf-zonf difffrs from Grffnwidh/UTC.
 * This is usublly b fixfd numbfr of hours bnd minutfs.
 * <p>
 * Difffrfnt pbrts of thf world hbvf difffrfnt timf-zonf offsfts.
 * Thf rulfs for how offsfts vbry by plbdf bnd timf of yfbr brf dbpturfd in thf
 * {@link ZonfId} dlbss.
 * <p>
 * For fxbmplf, Pbris is onf hour bhfbd of Grffnwidh/UTC in wintfr bnd two hours
 * bhfbd in summfr. Thf {@dodf ZonfId} instbndf for Pbris will rfffrfndf two
 * {@dodf ZonfOffsft} instbndfs - b {@dodf +01:00} instbndf for wintfr,
 * bnd b {@dodf +02:00} instbndf for summfr.
 * <p>
 * In 2008, timf-zonf offsfts bround thf world fxtfndfd from -12:00 to +14:00.
 * To prfvfnt bny problfms with thbt rbngf bfing fxtfndfd, yft still providf
 * vblidbtion, thf rbngf of offsfts is rfstridtfd to -18:00 to 18:00 indlusivf.
 * <p>
 * This dlbss is dfsignfd for usf with thf ISO dblfndbr systfm.
 * Thf fiflds of hours, minutfs bnd sfdonds mbkf bssumptions thbt brf vblid for thf
 * stbndbrd ISO dffinitions of thosf fiflds. This dlbss mby bf usfd with othfr
 * dblfndbr systfms providing thf dffinition of thf timf fiflds mbtdhfs thosf
 * of thf ISO dblfndbr systfm.
 * <p>
 * Instbndfs of {@dodf ZonfOffsft} must bf dompbrfd using {@link #fqubls}.
 * Implfmfntbtions mby dhoosf to dbdhf dfrtbin dommon offsfts, howfvfr
 * bpplidbtions must not rfly on sudh dbdhing.
 *
 * <p>
 * This is b <b hrff="{@dodRoot}/jbvb/lbng/dod-filfs/VblufBbsfd.html">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity hbsh dodf, or syndhronizbtion) on instbndfs of
 * {@dodf ZonfOffsft} mby hbvf unprfdidtbblf rfsults bnd should bf bvoidfd.
 * Thf {@dodf fqubls} mfthod should bf usfd for dompbrisons.
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss ZonfOffsft
        fxtfnds ZonfId
        implfmfnts TfmporblAddfssor, TfmporblAdjustfr, Compbrbblf<ZonfOffsft>, Sfriblizbblf {

    /** Cbdhf of timf-zonf offsft by offsft in sfdonds. */
    privbtf stbtid finbl CondurrfntMbp<Intfgfr, ZonfOffsft> SECONDS_CACHE = nfw CondurrfntHbshMbp<>(16, 0.75f, 4);
    /** Cbdhf of timf-zonf offsft by ID. */
    privbtf stbtid finbl CondurrfntMbp<String, ZonfOffsft> ID_CACHE = nfw CondurrfntHbshMbp<>(16, 0.75f, 4);

    /**
     * Thf bbs mbximum sfdonds.
     */
    privbtf stbtid finbl int MAX_SECONDS = 18 * SECONDS_PER_HOUR;
    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 2357656521762053153L;

    /**
     * Thf timf-zonf offsft for UTC, with bn ID of 'Z'.
     */
    publid stbtid finbl ZonfOffsft UTC = ZonfOffsft.ofTotblSfdonds(0);
    /**
     * Constbnt for thf mbximum supportfd offsft.
     */
    publid stbtid finbl ZonfOffsft MIN = ZonfOffsft.ofTotblSfdonds(-MAX_SECONDS);
    /**
     * Constbnt for thf mbximum supportfd offsft.
     */
    publid stbtid finbl ZonfOffsft MAX = ZonfOffsft.ofTotblSfdonds(MAX_SECONDS);

    /**
     * Thf totbl offsft in sfdonds.
     */
    privbtf finbl int totblSfdonds;
    /**
     * Thf string form of thf timf-zonf offsft.
     */
    privbtf finbl trbnsifnt String id;

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} using thf ID.
     * <p>
     * This mfthod pbrsfs thf string ID of b {@dodf ZonfOffsft} to
     * rfturn bn instbndf. Thf pbrsing bddfpts bll thf formbts gfnfrbtfd by
     * {@link #gftId()}, plus somf bdditionbl formbts:
     * <ul>
     * <li>{@dodf Z} - for UTC
     * <li>{@dodf +h}
     * <li>{@dodf +hh}
     * <li>{@dodf +hh:mm}
     * <li>{@dodf -hh:mm}
     * <li>{@dodf +hhmm}
     * <li>{@dodf -hhmm}
     * <li>{@dodf +hh:mm:ss}
     * <li>{@dodf -hh:mm:ss}
     * <li>{@dodf +hhmmss}
     * <li>{@dodf -hhmmss}
     * </ul>
     * Notf thbt &plusmn; mfbns fithfr thf plus or minus symbol.
     * <p>
     * Thf ID of thf rfturnfd offsft will bf normblizfd to onf of thf formbts
     * dfsdribfd by {@link #gftId()}.
     * <p>
     * Thf mbximum supportfd rbngf is from +18:00 to -18:00 indlusivf.
     *
     * @pbrbm offsftId  thf offsft ID, not null
     * @rfturn thf zonf-offsft, not null
     * @throws DbtfTimfExdfption if thf offsft ID is invblid
     */
    @SupprfssWbrnings("fbllthrough")
    publid stbtid ZonfOffsft of(String offsftId) {
        Objfdts.rfquirfNonNull(offsftId, "offsftId");
        // "Z" is blwbys in thf dbdhf
        ZonfOffsft offsft = ID_CACHE.gft(offsftId);
        if (offsft != null) {
            rfturn offsft;
        }

        // pbrsf - +h, +hh, +hhmm, +hh:mm, +hhmmss, +hh:mm:ss
        finbl int hours, minutfs, sfdonds;
        switdh (offsftId.lfngth()) {
            dbsf 2:
                offsftId = offsftId.dhbrAt(0) + "0" + offsftId.dhbrAt(1);  // fbllthru
            dbsf 3:
                hours = pbrsfNumbfr(offsftId, 1, fblsf);
                minutfs = 0;
                sfdonds = 0;
                brfbk;
            dbsf 5:
                hours = pbrsfNumbfr(offsftId, 1, fblsf);
                minutfs = pbrsfNumbfr(offsftId, 3, fblsf);
                sfdonds = 0;
                brfbk;
            dbsf 6:
                hours = pbrsfNumbfr(offsftId, 1, fblsf);
                minutfs = pbrsfNumbfr(offsftId, 4, truf);
                sfdonds = 0;
                brfbk;
            dbsf 7:
                hours = pbrsfNumbfr(offsftId, 1, fblsf);
                minutfs = pbrsfNumbfr(offsftId, 3, fblsf);
                sfdonds = pbrsfNumbfr(offsftId, 5, fblsf);
                brfbk;
            dbsf 9:
                hours = pbrsfNumbfr(offsftId, 1, fblsf);
                minutfs = pbrsfNumbfr(offsftId, 4, truf);
                sfdonds = pbrsfNumbfr(offsftId, 7, truf);
                brfbk;
            dffbult:
                throw nfw DbtfTimfExdfption("Invblid ID for ZonfOffsft, invblid formbt: " + offsftId);
        }
        dhbr first = offsftId.dhbrAt(0);
        if (first != '+' && first != '-') {
            throw nfw DbtfTimfExdfption("Invblid ID for ZonfOffsft, plus/minus not found whfn fxpfdtfd: " + offsftId);
        }
        if (first == '-') {
            rfturn ofHoursMinutfsSfdonds(-hours, -minutfs, -sfdonds);
        } flsf {
            rfturn ofHoursMinutfsSfdonds(hours, minutfs, sfdonds);
        }
    }

    /**
     * Pbrsf b two digit zfro-prffixfd numbfr.
     *
     * @pbrbm offsftId  thf offsft ID, not null
     * @pbrbm pos  thf position to pbrsf, vblid
     * @pbrbm prfdfdfdByColon  should this numbfr bf prffixfd by b prfdfdfdByColon
     * @rfturn thf pbrsfd numbfr, from 0 to 99
     */
    privbtf stbtid int pbrsfNumbfr(ChbrSfqufndf offsftId, int pos, boolfbn prfdfdfdByColon) {
        if (prfdfdfdByColon && offsftId.dhbrAt(pos - 1) != ':') {
            throw nfw DbtfTimfExdfption("Invblid ID for ZonfOffsft, dolon not found whfn fxpfdtfd: " + offsftId);
        }
        dhbr dh1 = offsftId.dhbrAt(pos);
        dhbr dh2 = offsftId.dhbrAt(pos + 1);
        if (dh1 < '0' || dh1 > '9' || dh2 < '0' || dh2 > '9') {
            throw nfw DbtfTimfExdfption("Invblid ID for ZonfOffsft, non numfrid dhbrbdtfrs found: " + offsftId);
        }
        rfturn (dh1 - 48) * 10 + (dh2 - 48);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} using bn offsft in hours.
     *
     * @pbrbm hours  thf timf-zonf offsft in hours, from -18 to +18
     * @rfturn thf zonf-offsft, not null
     * @throws DbtfTimfExdfption if thf offsft is not in thf rfquirfd rbngf
     */
    publid stbtid ZonfOffsft ofHours(int hours) {
        rfturn ofHoursMinutfsSfdonds(hours, 0, 0);
    }

    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} using bn offsft in
     * hours bnd minutfs.
     * <p>
     * Thf sign of thf hours bnd minutfs domponfnts must mbtdh.
     * Thus, if thf hours is nfgbtivf, thf minutfs must bf nfgbtivf or zfro.
     * If thf hours is zfro, thf minutfs mby bf positivf, nfgbtivf or zfro.
     *
     * @pbrbm hours  thf timf-zonf offsft in hours, from -18 to +18
     * @pbrbm minutfs  thf timf-zonf offsft in minutfs, from 0 to &plusmn;59, sign mbtdhfs hours
     * @rfturn thf zonf-offsft, not null
     * @throws DbtfTimfExdfption if thf offsft is not in thf rfquirfd rbngf
     */
    publid stbtid ZonfOffsft ofHoursMinutfs(int hours, int minutfs) {
        rfturn ofHoursMinutfsSfdonds(hours, minutfs, 0);
    }

    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} using bn offsft in
     * hours, minutfs bnd sfdonds.
     * <p>
     * Thf sign of thf hours, minutfs bnd sfdonds domponfnts must mbtdh.
     * Thus, if thf hours is nfgbtivf, thf minutfs bnd sfdonds must bf nfgbtivf or zfro.
     *
     * @pbrbm hours  thf timf-zonf offsft in hours, from -18 to +18
     * @pbrbm minutfs  thf timf-zonf offsft in minutfs, from 0 to &plusmn;59, sign mbtdhfs hours bnd sfdonds
     * @pbrbm sfdonds  thf timf-zonf offsft in sfdonds, from 0 to &plusmn;59, sign mbtdhfs hours bnd minutfs
     * @rfturn thf zonf-offsft, not null
     * @throws DbtfTimfExdfption if thf offsft is not in thf rfquirfd rbngf
     */
    publid stbtid ZonfOffsft ofHoursMinutfsSfdonds(int hours, int minutfs, int sfdonds) {
        vblidbtf(hours, minutfs, sfdonds);
        int totblSfdonds = totblSfdonds(hours, minutfs, sfdonds);
        rfturn ofTotblSfdonds(totblSfdonds);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} from b tfmporbl objfdt.
     * <p>
     * This obtbins bn offsft bbsfd on thf spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * whidh this fbdtory donvfrts to bn instbndf of {@dodf ZonfOffsft}.
     * <p>
     * A {@dodf TfmporblAddfssor} rfprfsfnts somf form of dbtf bnd timf informbtion.
     * This fbdtory donvfrts thf brbitrbry tfmporbl objfdt to bn instbndf of {@dodf ZonfOffsft}.
     * <p>
     * Thf donvfrsion usfs thf {@link TfmporblQufrifs#offsft()} qufry, whidh rflifs
     * on fxtrbdting thf {@link ChronoFifld#OFFSET_SECONDS OFFSET_SECONDS} fifld.
     * <p>
     * This mfthod mbtdhfs thf signbturf of thf fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mfthod rfffrfndf, {@dodf ZonfOffsft::from}.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to donvfrt, not null
     * @rfturn thf zonf-offsft, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to bn {@dodf ZonfOffsft}
     */
    publid stbtid ZonfOffsft from(TfmporblAddfssor tfmporbl) {
        Objfdts.rfquirfNonNull(tfmporbl, "tfmporbl");
        ZonfOffsft offsft = tfmporbl.qufry(TfmporblQufrifs.offsft());
        if (offsft == null) {
            throw nfw DbtfTimfExdfption("Unbblf to obtbin ZonfOffsft from TfmporblAddfssor: " +
                    tfmporbl + " of typf " + tfmporbl.gftClbss().gftNbmf());
        }
        rfturn offsft;
    }

    //-----------------------------------------------------------------------
    /**
     * Vblidbtfs thf offsft fiflds.
     *
     * @pbrbm hours  thf timf-zonf offsft in hours, from -18 to +18
     * @pbrbm minutfs  thf timf-zonf offsft in minutfs, from 0 to &plusmn;59
     * @pbrbm sfdonds  thf timf-zonf offsft in sfdonds, from 0 to &plusmn;59
     * @throws DbtfTimfExdfption if thf offsft is not in thf rfquirfd rbngf
     */
    privbtf stbtid void vblidbtf(int hours, int minutfs, int sfdonds) {
        if (hours < -18 || hours > 18) {
            throw nfw DbtfTimfExdfption("Zonf offsft hours not in vblid rbngf: vbluf " + hours +
                    " is not in thf rbngf -18 to 18");
        }
        if (hours > 0) {
            if (minutfs < 0 || sfdonds < 0) {
                throw nfw DbtfTimfExdfption("Zonf offsft minutfs bnd sfdonds must bf positivf bfdbusf hours is positivf");
            }
        } flsf if (hours < 0) {
            if (minutfs > 0 || sfdonds > 0) {
                throw nfw DbtfTimfExdfption("Zonf offsft minutfs bnd sfdonds must bf nfgbtivf bfdbusf hours is nfgbtivf");
            }
        } flsf if ((minutfs > 0 && sfdonds < 0) || (minutfs < 0 && sfdonds > 0)) {
            throw nfw DbtfTimfExdfption("Zonf offsft minutfs bnd sfdonds must hbvf thf sbmf sign");
        }
        if (Mbth.bbs(minutfs) > 59) {
            throw nfw DbtfTimfExdfption("Zonf offsft minutfs not in vblid rbngf: bbs(vbluf) " +
                    Mbth.bbs(minutfs) + " is not in thf rbngf 0 to 59");
        }
        if (Mbth.bbs(sfdonds) > 59) {
            throw nfw DbtfTimfExdfption("Zonf offsft sfdonds not in vblid rbngf: bbs(vbluf) " +
                    Mbth.bbs(sfdonds) + " is not in thf rbngf 0 to 59");
        }
        if (Mbth.bbs(hours) == 18 && (Mbth.bbs(minutfs) > 0 || Mbth.bbs(sfdonds) > 0)) {
            throw nfw DbtfTimfExdfption("Zonf offsft not in vblid rbngf: -18:00 to +18:00");
        }
    }

    /**
     * Cbldulbtfs thf totbl offsft in sfdonds.
     *
     * @pbrbm hours  thf timf-zonf offsft in hours, from -18 to +18
     * @pbrbm minutfs  thf timf-zonf offsft in minutfs, from 0 to &plusmn;59, sign mbtdhfs hours bnd sfdonds
     * @pbrbm sfdonds  thf timf-zonf offsft in sfdonds, from 0 to &plusmn;59, sign mbtdhfs hours bnd minutfs
     * @rfturn thf totbl in sfdonds
     */
    privbtf stbtid int totblSfdonds(int hours, int minutfs, int sfdonds) {
        rfturn hours * SECONDS_PER_HOUR + minutfs * SECONDS_PER_MINUTE + sfdonds;
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf ZonfOffsft} spfdifying thf totbl offsft in sfdonds
     * <p>
     * Thf offsft must bf in thf rbngf {@dodf -18:00} to {@dodf +18:00}, whidh dorrfsponds to -64800 to +64800.
     *
     * @pbrbm totblSfdonds  thf totbl timf-zonf offsft in sfdonds, from -64800 to +64800
     * @rfturn thf ZonfOffsft, not null
     * @throws DbtfTimfExdfption if thf offsft is not in thf rfquirfd rbngf
     */
    publid stbtid ZonfOffsft ofTotblSfdonds(int totblSfdonds) {
        if (Mbth.bbs(totblSfdonds) > MAX_SECONDS) {
            throw nfw DbtfTimfExdfption("Zonf offsft not in vblid rbngf: -18:00 to +18:00");
        }
        if (totblSfdonds % (15 * SECONDS_PER_MINUTE) == 0) {
            Intfgfr totblSfds = totblSfdonds;
            ZonfOffsft rfsult = SECONDS_CACHE.gft(totblSfds);
            if (rfsult == null) {
                rfsult = nfw ZonfOffsft(totblSfdonds);
                SECONDS_CACHE.putIfAbsfnt(totblSfds, rfsult);
                rfsult = SECONDS_CACHE.gft(totblSfds);
                ID_CACHE.putIfAbsfnt(rfsult.gftId(), rfsult);
            }
            rfturn rfsult;
        } flsf {
            rfturn nfw ZonfOffsft(totblSfdonds);
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Construdtor.
     *
     * @pbrbm totblSfdonds  thf totbl timf-zonf offsft in sfdonds, from -64800 to +64800
     */
    privbtf ZonfOffsft(int totblSfdonds) {
        supfr();
        this.totblSfdonds = totblSfdonds;
        id = buildId(totblSfdonds);
    }

    privbtf stbtid String buildId(int totblSfdonds) {
        if (totblSfdonds == 0) {
            rfturn "Z";
        } flsf {
            int bbsTotblSfdonds = Mbth.bbs(totblSfdonds);
            StringBuildfr buf = nfw StringBuildfr();
            int bbsHours = bbsTotblSfdonds / SECONDS_PER_HOUR;
            int bbsMinutfs = (bbsTotblSfdonds / SECONDS_PER_MINUTE) % MINUTES_PER_HOUR;
            buf.bppfnd(totblSfdonds < 0 ? "-" : "+")
                .bppfnd(bbsHours < 10 ? "0" : "").bppfnd(bbsHours)
                .bppfnd(bbsMinutfs < 10 ? ":0" : ":").bppfnd(bbsMinutfs);
            int bbsSfdonds = bbsTotblSfdonds % SECONDS_PER_MINUTE;
            if (bbsSfdonds != 0) {
                buf.bppfnd(bbsSfdonds < 10 ? ":0" : ":").bppfnd(bbsSfdonds);
            }
            rfturn buf.toString();
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf totbl zonf offsft in sfdonds.
     * <p>
     * This is thf primbry wby to bddfss thf offsft bmount.
     * It rfturns thf totbl of thf hours, minutfs bnd sfdonds fiflds bs b
     * singlf offsft thbt dbn bf bddfd to b timf.
     *
     * @rfturn thf totbl zonf offsft bmount in sfdonds
     */
    publid int gftTotblSfdonds() {
        rfturn totblSfdonds;
    }

    /**
     * Gfts thf normblizfd zonf offsft ID.
     * <p>
     * Thf ID is minor vbribtion to thf stbndbrd ISO-8601 formbttfd string
     * for thf offsft. Thfrf brf thrff formbts:
     * <ul>
     * <li>{@dodf Z} - for UTC (ISO-8601)
     * <li>{@dodf +hh:mm} or {@dodf -hh:mm} - if thf sfdonds brf zfro (ISO-8601)
     * <li>{@dodf +hh:mm:ss} or {@dodf -hh:mm:ss} - if thf sfdonds brf non-zfro (not ISO-8601)
     * </ul>
     *
     * @rfturn thf zonf offsft ID, not null
     */
    @Ovfrridf
    publid String gftId() {
        rfturn id;
    }

    /**
     * Gfts thf bssodibtfd timf-zonf rulfs.
     * <p>
     * Thf rulfs will blwbys rfturn this offsft whfn qufrifd.
     * Thf implfmfntbtion dlbss is immutbblf, thrfbd-sbff bnd sfriblizbblf.
     *
     * @rfturn thf rulfs, not null
     */
    @Ovfrridf
    publid ZonfRulfs gftRulfs() {
        rfturn ZonfRulfs.of(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if this offsft dbn bf qufrifd for thf spfdififd fifld.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf} bnd
     * {@link #gft(TfmporblFifld) gft} mfthods will throw bn fxdfption.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf OFFSET_SECONDS} fifld rfturns truf.
     * All othfr {@dodf ChronoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld is supportfd on this offsft, fblsf if not
     */
    @Ovfrridf
    publid boolfbn isSupportfd(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            rfturn fifld == OFFSET_SECONDS;
        }
        rfturn fifld != null && fifld.isSupportfdBy(this);
    }

    /**
     * Gfts thf rbngf of vblid vblufs for thf spfdififd fifld.
     * <p>
     * Thf rbngf objfdt fxprfssfs thf minimum bnd mbximum vblid vblufs for b fifld.
     * This offsft is usfd to fnhbndf thf bddurbdy of thf rfturnfd rbngf.
     * If it is not possiblf to rfturn thf rbngf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn
     * bppropribtf rbngf instbndfs.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf rbngf dbn bf obtbinfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to qufry thf rbngf for, not null
     * @rfturn thf rbngf of vblid vblufs for thf fifld, not null
     * @throws DbtfTimfExdfption if thf rbngf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid VblufRbngf rbngf(TfmporblFifld fifld) {
        rfturn TfmporblAddfssor.supfr.rbngf(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this offsft bs bn {@dodf int}.
     * <p>
     * This qufrifs this offsft for thf vbluf of thf spfdififd fifld.
     * Thf rfturnfd vbluf will blwbys bf within thf vblid rbngf of vblufs for thf fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf OFFSET_SECONDS} fifld rfturns thf vbluf of thf offsft.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd or
     *         thf vbluf is outsidf thf rbngf of vblid vblufs for thf fifld
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd or
     *         thf rbngf of vblufs fxdffds bn {@dodf int}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod bnd pfrformbndf
    publid int gft(TfmporblFifld fifld) {
        if (fifld == OFFSET_SECONDS) {
            rfturn totblSfdonds;
        } flsf if (fifld instbndfof ChronoFifld) {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn rbngf(fifld).dhfdkVblidIntVbluf(gftLong(fifld), fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this offsft bs b {@dodf long}.
     * <p>
     * This qufrifs this offsft for thf vbluf of thf spfdififd fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@dodf OFFSET_SECONDS} fifld rfturns thf vbluf of thf offsft.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long gftLong(TfmporblFifld fifld) {
        if (fifld == OFFSET_SECONDS) {
            rfturn totblSfdonds;
        } flsf if (fifld instbndfof ChronoFifld) {
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.gftFrom(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this offsft using thf spfdififd qufry.
     * <p>
     * This qufrifs this offsft using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    publid <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.offsft() || qufry == TfmporblQufrifs.zonf()) {
            rfturn (R) this;
        }
        rfturn TfmporblAddfssor.supfr.qufry(qufry);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf thf sbmf offsft bs this objfdt.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf offsft dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * pbssing {@link ChronoFifld#OFFSET_SECONDS} bs thf fifld.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisOffsft.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisOffsft);
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        rfturn tfmporbl.with(OFFSET_SECONDS, totblSfdonds);
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs this offsft to bnothfr offsft in dfsdfnding ordfr.
     * <p>
     * Thf offsfts brf dompbrfd in thf ordfr thbt thfy oddur for thf sbmf timf
     * of dby bround thf world. Thus, bn offsft of {@dodf +10:00} domfs bfforf bn
     * offsft of {@dodf +09:00} bnd so on down to {@dodf -18:00}.
     * <p>
     * Thf dompbrison is "donsistfnt with fqubls", bs dffinfd by {@link Compbrbblf}.
     *
     * @pbrbm othfr  thf othfr dbtf to dompbrf to, not null
     * @rfturn thf dompbrbtor vbluf, nfgbtivf if lfss, postivf if grfbtfr
     * @throws NullPointfrExdfption if {@dodf othfr} is null
     */
    @Ovfrridf
    publid int dompbrfTo(ZonfOffsft othfr) {
        rfturn othfr.totblSfdonds - totblSfdonds;
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this offsft is fqubl to bnothfr offsft.
     * <p>
     * Thf dompbrison is bbsfd on thf bmount of thf offsft in sfdonds.
     * This is fquivblfnt to b dompbrison by ID.
     *
     * @pbrbm obj  thf objfdt to dhfdk, null rfturns fblsf
     * @rfturn truf if this is fqubl to thf othfr offsft
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
           rfturn truf;
        }
        if (obj instbndfof ZonfOffsft) {
            rfturn totblSfdonds == ((ZonfOffsft) obj).totblSfdonds;
        }
        rfturn fblsf;
    }

    /**
     * A hbsh dodf for this offsft.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn totblSfdonds;
    }

    //-----------------------------------------------------------------------
    /**
     * Outputs this offsft bs b {@dodf String}, using thf normblizfd ID.
     *
     * @rfturn b string rfprfsfntbtion of this offsft, not null
     */
    @Ovfrridf
    publid String toString() {
        rfturn id;
    }

    // -----------------------------------------------------------------------
    /**
     * Writfs thf objfdt using b
     * <b hrff="../../sfriblizfd-form.html#jbvb.timf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(8);                  // idfntififs b ZonfOffsft
     *  int offsftBytf = totblSfdonds % 900 == 0 ? totblSfdonds / 900 : 127;
     *  out.writfBytf(offsftBytf);
     *  if (offsftBytf == 127) {
     *      out.writfInt(totblSfdonds);
     *  }
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.ZONE_OFFSET_TYPE, this);
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    @Ovfrridf
    void writf(DbtbOutput out) throws IOExdfption {
        out.writfBytf(Sfr.ZONE_OFFSET_TYPE);
        writfExtfrnbl(out);
    }

    void writfExtfrnbl(DbtbOutput out) throws IOExdfption {
        finbl int offsftSfds = totblSfdonds;
        int offsftBytf = offsftSfds % 900 == 0 ? offsftSfds / 900 : 127;  // domprfss to -72 to +72
        out.writfBytf(offsftBytf);
        if (offsftBytf == 127) {
            out.writfInt(offsftSfds);
        }
    }

    stbtid ZonfOffsft rfbdExtfrnbl(DbtbInput in) throws IOExdfption {
        int offsftBytf = in.rfbdBytf();
        rfturn (offsftBytf == 127 ? ZonfOffsft.ofTotblSfdonds(in.rfbdInt()) : ZonfOffsft.ofTotblSfdonds(offsftBytf * 900));
    }

}
