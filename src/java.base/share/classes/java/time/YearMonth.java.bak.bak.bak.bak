/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2007-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.ERA;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.PROLEPTIC_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR_OF_ERA;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.CENTURIES;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.DECADES;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.ERAS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.MILLENNIA;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.MONTHS;
import stbtid jbvb.timf.tfmporbl.ChronoUnit.YEARS;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.dhrono.Chronology;
import jbvb.timf.dhrono.IsoChronology;
import jbvb.timf.formbt.DbtfTimfFormbttfr;
import jbvb.timf.formbt.DbtfTimfFormbttfrBuildfr;
import jbvb.timf.formbt.DbtfTimfPbrsfExdfption;
import jbvb.timf.formbt.SignStylf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.ChronoUnit;
import jbvb.timf.tfmporbl.Tfmporbl;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblAdjustfr;
import jbvb.timf.tfmporbl.TfmporblAmount;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.TfmporblUnit;
import jbvb.timf.tfmporbl.UnsupportfdTfmporblTypfExdfption;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.util.Objfdts;

/**
 * A yfbr-month in thf ISO-8601 dblfndbr systfm, sudh bs {@dodf 2007-12}.
 * <p>
 * {@dodf YfbrMonth} is bn immutbblf dbtf-timf objfdt thbt rfprfsfnts thf dombinbtion
 * of b yfbr bnd month. Any fifld thbt dbn bf dfrivfd from b yfbr bnd month, sudh bs
 * qubrtfr-of-yfbr, dbn bf obtbinfd.
 * <p>
 * This dlbss dofs not storf or rfprfsfnt b dby, timf or timf-zonf.
 * For fxbmplf, thf vbluf "Odtobfr 2007" dbn bf storfd in b {@dodf YfbrMonth}.
 * <p>
 * Thf ISO-8601 dblfndbr systfm is thf modfrn divil dblfndbr systfm usfd todby
 * in most of thf world. It is fquivblfnt to thf prolfptid Grfgoribn dblfndbr
 * systfm, in whidh todby's rulfs for lfbp yfbrs brf bpplifd for bll timf.
 * For most bpplidbtions writtfn todby, thf ISO-8601 rulfs brf fntirfly suitbblf.
 * Howfvfr, bny bpplidbtion thbt mbkfs usf of historidbl dbtfs, bnd rfquirfs thfm
 * to bf bddurbtf will find thf ISO-8601 bpprobdh unsuitbblf.
 *
 * <p>
 * This is b <b hrff="{@dodRoot}/jbvb/lbng/dod-filfs/VblufBbsfd.html">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity hbsh dodf, or syndhronizbtion) on instbndfs of
 * {@dodf YfbrMonth} mby hbvf unprfdidtbblf rfsults bnd should bf bvoidfd.
 * Thf {@dodf fqubls} mfthod should bf usfd for dompbrisons.
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss YfbrMonth
        implfmfnts Tfmporbl, TfmporblAdjustfr, Compbrbblf<YfbrMonth>, Sfriblizbblf {

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 4183400860270640070L;
    /**
     * Pbrsfr.
     */
    privbtf stbtid finbl DbtfTimfFormbttfr PARSER = nfw DbtfTimfFormbttfrBuildfr()
        .bppfndVbluf(YEAR, 4, 10, SignStylf.EXCEEDS_PAD)
        .bppfndLitfrbl('-')
        .bppfndVbluf(MONTH_OF_YEAR, 2)
        .toFormbttfr();

    /**
     * Thf yfbr.
     */
    privbtf finbl int yfbr;
    /**
     * Thf month-of-yfbr, not null.
     */
    privbtf finbl int month;

    //-----------------------------------------------------------------------
    /**
     * Obtbins thf durrfnt yfbr-month from thf systfm dlodk in thf dffbult timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfmDffbultZonf() systfm dlodk} in thf dffbult
     * timf-zonf to obtbin thf durrfnt yfbr-month.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @rfturn thf durrfnt yfbr-month using thf systfm dlodk bnd dffbult timf-zonf, not null
     */
    publid stbtid YfbrMonth now() {
        rfturn now(Clodk.systfmDffbultZonf());
    }

    /**
     * Obtbins thf durrfnt yfbr-month from thf systfm dlodk in thf spfdififd timf-zonf.
     * <p>
     * This will qufry thf {@link Clodk#systfm(ZonfId) systfm dlodk} to obtbin thf durrfnt yfbr-month.
     * Spfdifying thf timf-zonf bvoids dfpfndfndf on thf dffbult timf-zonf.
     * <p>
     * Using this mfthod will prfvfnt thf bbility to usf bn bltfrnbtf dlodk for tfsting
     * bfdbusf thf dlodk is hbrd-dodfd.
     *
     * @pbrbm zonf  thf zonf ID to usf, not null
     * @rfturn thf durrfnt yfbr-month using thf systfm dlodk, not null
     */
    publid stbtid YfbrMonth now(ZonfId zonf) {
        rfturn now(Clodk.systfm(zonf));
    }

    /**
     * Obtbins thf durrfnt yfbr-month from thf spfdififd dlodk.
     * <p>
     * This will qufry thf spfdififd dlodk to obtbin thf durrfnt yfbr-month.
     * Using this mfthod bllows thf usf of bn bltfrnbtf dlodk for tfsting.
     * Thf bltfrnbtf dlodk mby bf introdudfd using {@link Clodk dfpfndfndy injfdtion}.
     *
     * @pbrbm dlodk  thf dlodk to usf, not null
     * @rfturn thf durrfnt yfbr-month, not null
     */
    publid stbtid YfbrMonth now(Clodk dlodk) {
        finbl LodblDbtf now = LodblDbtf.now(dlodk);  // dbllfd ondf
        rfturn YfbrMonth.of(now.gftYfbr(), now.gftMonth());
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf YfbrMonth} from b yfbr bnd month.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, not null
     * @rfturn thf yfbr-month, not null
     * @throws DbtfTimfExdfption if thf yfbr vbluf is invblid
     */
    publid stbtid YfbrMonth of(int yfbr, Month month) {
        Objfdts.rfquirfNonNull(month, "month");
        rfturn of(yfbr, month.gftVbluf());
    }

    /**
     * Obtbins bn instbndf of {@dodf YfbrMonth} from b yfbr bnd month.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @rfturn thf yfbr-month, not null
     * @throws DbtfTimfExdfption if fithfr fifld vbluf is invblid
     */
    publid stbtid YfbrMonth of(int yfbr, int month) {
        YEAR.dhfdkVblidVbluf(yfbr);
        MONTH_OF_YEAR.dhfdkVblidVbluf(month);
        rfturn nfw YfbrMonth(yfbr, month);
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf YfbrMonth} from b tfmporbl objfdt.
     * <p>
     * This obtbins b yfbr-month bbsfd on thf spfdififd tfmporbl.
     * A {@dodf TfmporblAddfssor} rfprfsfnts bn brbitrbry sft of dbtf bnd timf informbtion,
     * whidh this fbdtory donvfrts to bn instbndf of {@dodf YfbrMonth}.
     * <p>
     * Thf donvfrsion fxtrbdts thf {@link ChronoFifld#YEAR YEAR} bnd
     * {@link ChronoFifld#MONTH_OF_YEAR MONTH_OF_YEAR} fiflds.
     * Thf fxtrbdtion is only pfrmittfd if thf tfmporbl objfdt hbs bn ISO
     * dhronology, or dbn bf donvfrtfd to b {@dodf LodblDbtf}.
     * <p>
     * This mfthod mbtdhfs thf signbturf of thf fundtionbl intfrfbdf {@link TfmporblQufry}
     * bllowing it to bf usfd bs b qufry vib mfthod rfffrfndf, {@dodf YfbrMonth::from}.
     *
     * @pbrbm tfmporbl  thf tfmporbl objfdt to donvfrt, not null
     * @rfturn thf yfbr-month, not null
     * @throws DbtfTimfExdfption if unbblf to donvfrt to b {@dodf YfbrMonth}
     */
    publid stbtid YfbrMonth from(TfmporblAddfssor tfmporbl) {
        if (tfmporbl instbndfof YfbrMonth) {
            rfturn (YfbrMonth) tfmporbl;
        }
        Objfdts.rfquirfNonNull(tfmporbl, "tfmporbl");
        try {
            if (IsoChronology.INSTANCE.fqubls(Chronology.from(tfmporbl)) == fblsf) {
                tfmporbl = LodblDbtf.from(tfmporbl);
            }
            rfturn of(tfmporbl.gft(YEAR), tfmporbl.gft(MONTH_OF_YEAR));
        } dbtdh (DbtfTimfExdfption fx) {
            throw nfw DbtfTimfExdfption("Unbblf to obtbin YfbrMonth from TfmporblAddfssor: " +
                    tfmporbl + " of typf " + tfmporbl.gftClbss().gftNbmf(), fx);
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Obtbins bn instbndf of {@dodf YfbrMonth} from b tfxt string sudh bs {@dodf 2007-12}.
     * <p>
     * Thf string must rfprfsfnt b vblid yfbr-month.
     * Thf formbt must bf {@dodf uuuu-MM}.
     * Yfbrs outsidf thf rbngf 0000 to 9999 must bf prffixfd by thf plus or minus symbol.
     *
     * @pbrbm tfxt  thf tfxt to pbrsf sudh bs "2007-12", not null
     * @rfturn thf pbrsfd yfbr-month, not null
     * @throws DbtfTimfPbrsfExdfption if thf tfxt dbnnot bf pbrsfd
     */
    publid stbtid YfbrMonth pbrsf(ChbrSfqufndf tfxt) {
        rfturn pbrsf(tfxt, PARSER);
    }

    /**
     * Obtbins bn instbndf of {@dodf YfbrMonth} from b tfxt string using b spfdifid formbttfr.
     * <p>
     * Thf tfxt is pbrsfd using thf formbttfr, rfturning b yfbr-month.
     *
     * @pbrbm tfxt  thf tfxt to pbrsf, not null
     * @pbrbm formbttfr  thf formbttfr to usf, not null
     * @rfturn thf pbrsfd yfbr-month, not null
     * @throws DbtfTimfPbrsfExdfption if thf tfxt dbnnot bf pbrsfd
     */
    publid stbtid YfbrMonth pbrsf(ChbrSfqufndf tfxt, DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.pbrsf(tfxt, YfbrMonth::from);
    }

    //-----------------------------------------------------------------------
    /**
     * Construdtor.
     *
     * @pbrbm yfbr  thf yfbr to rfprfsfnt, vblidbtfd from MIN_YEAR to MAX_YEAR
     * @pbrbm month  thf month-of-yfbr to rfprfsfnt, vblidbtfd from 1 (Jbnubry) to 12 (Dfdfmbfr)
     */
    privbtf YfbrMonth(int yfbr, int month) {
        this.yfbr = yfbr;
        this.month = month;
    }

    /**
     * Rfturns b dopy of this yfbr-month with thf nfw yfbr bnd month, dhfdking
     * to sff if b nfw objfdt is in fbdt rfquirfd.
     *
     * @pbrbm nfwYfbr  thf yfbr to rfprfsfnt, vblidbtfd from MIN_YEAR to MAX_YEAR
     * @pbrbm nfwMonth  thf month-of-yfbr to rfprfsfnt, vblidbtfd not null
     * @rfturn thf yfbr-month, not null
     */
    privbtf YfbrMonth with(int nfwYfbr, int nfwMonth) {
        if (yfbr == nfwYfbr && month == nfwMonth) {
            rfturn this;
        }
        rfturn nfw YfbrMonth(nfwYfbr, nfwMonth);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf spfdififd fifld is supportfd.
     * <p>
     * This dhfdks if this yfbr-month dbn bf qufrifd for thf spfdififd fifld.
     * If fblsf, thfn dblling thf {@link #rbngf(TfmporblFifld) rbngf},
     * {@link #gft(TfmporblFifld) gft} bnd {@link #with(TfmporblFifld, long)}
     * mfthods will throw bn fxdfption.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf supportfd fiflds brf:
     * <ul>
     * <li>{@dodf MONTH_OF_YEAR}
     * <li>{@dodf PROLEPTIC_MONTH}
     * <li>{@dodf YEAR_OF_ERA}
     * <li>{@dodf YEAR}
     * <li>{@dodf ERA}
     * </ul>
     * All othfr {@dodf ChronoFifld} instbndfs will rfturn fblsf.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.isSupportfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf fifld is supportfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to dhfdk, null rfturns fblsf
     * @rfturn truf if thf fifld is supportfd on this yfbr-month, fblsf if not
     */
    @Ovfrridf
    publid boolfbn isSupportfd(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            rfturn fifld == YEAR || fifld == MONTH_OF_YEAR ||
                    fifld == PROLEPTIC_MONTH || fifld == YEAR_OF_ERA || fifld == ERA;
        }
        rfturn fifld != null && fifld.isSupportfdBy(this);
    }

    /**
     * Chfdks if thf spfdififd unit is supportfd.
     * <p>
     * This dhfdks if thf spfdififd unit dbn bf bddfd to, or subtrbdtfd from, this yfbr-month.
     * If fblsf, thfn dblling thf {@link #plus(long, TfmporblUnit)} bnd
     * {@link #minus(long, TfmporblUnit) minus} mfthods will throw bn fxdfption.
     * <p>
     * If thf unit is b {@link ChronoUnit} thfn thf qufry is implfmfntfd hfrf.
     * Thf supportfd units brf:
     * <ul>
     * <li>{@dodf MONTHS}
     * <li>{@dodf YEARS}
     * <li>{@dodf DECADES}
     * <li>{@dodf CENTURIES}
     * <li>{@dodf MILLENNIA}
     * <li>{@dodf ERAS}
     * </ul>
     * All othfr {@dodf ChronoUnit} instbndfs will rfturn fblsf.
     * <p>
     * If thf unit is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.isSupportfdBy(Tfmporbl)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf unit is supportfd is dftfrminfd by thf unit.
     *
     * @pbrbm unit  thf unit to dhfdk, null rfturns fblsf
     * @rfturn truf if thf unit dbn bf bddfd/subtrbdtfd, fblsf if not
     */
    @Ovfrridf
    publid boolfbn isSupportfd(TfmporblUnit unit) {
        if (unit instbndfof ChronoUnit) {
            rfturn unit == MONTHS || unit == YEARS || unit == DECADES || unit == CENTURIES || unit == MILLENNIA || unit == ERAS;
        }
        rfturn unit != null && unit.isSupportfdBy(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf rbngf of vblid vblufs for thf spfdififd fifld.
     * <p>
     * Thf rbngf objfdt fxprfssfs thf minimum bnd mbximum vblid vblufs for b fifld.
     * This yfbr-month is usfd to fnhbndf thf bddurbdy of thf rfturnfd rbngf.
     * If it is not possiblf to rfturn thf rbngf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn
     * bppropribtf rbngf instbndfs.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.rbngfRffinfdBy(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt.
     * Whfthfr thf rbngf dbn bf obtbinfd is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to qufry thf rbngf for, not null
     * @rfturn thf rbngf of vblid vblufs for thf fifld, not null
     * @throws DbtfTimfExdfption if thf rbngf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     */
    @Ovfrridf
    publid VblufRbngf rbngf(TfmporblFifld fifld) {
        if (fifld == YEAR_OF_ERA) {
            rfturn (gftYfbr() <= 0 ? VblufRbngf.of(1, Yfbr.MAX_VALUE + 1) : VblufRbngf.of(1, Yfbr.MAX_VALUE));
        }
        rfturn Tfmporbl.supfr.rbngf(fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this yfbr-month bs bn {@dodf int}.
     * <p>
     * This qufrifs this yfbr-month for thf vbluf of thf spfdififd fifld.
     * Thf rfturnfd vbluf will blwbys bf within thf vblid rbngf of vblufs for thf fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on this yfbr-month, fxdfpt {@dodf PROLEPTIC_MONTH} whidh is too
     * lbrgf to fit in bn {@dodf int} bnd throw b {@dodf DbtfTimfExdfption}.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd or
     *         thf vbluf is outsidf thf rbngf of vblid vblufs for thf fifld
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd or
     *         thf rbngf of vblufs fxdffds bn {@dodf int}
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf  // ovfrridf for Jbvbdod
    publid int gft(TfmporblFifld fifld) {
        rfturn rbngf(fifld).dhfdkVblidIntVbluf(gftLong(fifld), fifld);
    }

    /**
     * Gfts thf vbluf of thf spfdififd fifld from this yfbr-month bs b {@dodf long}.
     * <p>
     * This qufrifs this yfbr-month for thf vbluf of thf spfdififd fifld.
     * If it is not possiblf to rfturn thf vbluf, bfdbusf thf fifld is not supportfd
     * or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf qufry is implfmfntfd hfrf.
     * Thf {@link #isSupportfd(TfmporblFifld) supportfd fiflds} will rfturn vblid
     * vblufs bbsfd on this yfbr-month.
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.gftFrom(TfmporblAddfssor)}
     * pbssing {@dodf this} bs thf brgumfnt. Whfthfr thf vbluf dbn bf obtbinfd,
     * bnd whbt thf vbluf rfprfsfnts, is dftfrminfd by thf fifld.
     *
     * @pbrbm fifld  thf fifld to gft, not null
     * @rfturn thf vbluf for thf fifld
     * @throws DbtfTimfExdfption if b vbluf for thf fifld dbnnot bf obtbinfd
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long gftLong(TfmporblFifld fifld) {
        if (fifld instbndfof ChronoFifld) {
            switdh ((ChronoFifld) fifld) {
                dbsf MONTH_OF_YEAR: rfturn month;
                dbsf PROLEPTIC_MONTH: rfturn gftProlfptidMonth();
                dbsf YEAR_OF_ERA: rfturn (yfbr < 1 ? 1 - yfbr : yfbr);
                dbsf YEAR: rfturn yfbr;
                dbsf ERA: rfturn (yfbr < 1 ? 0 : 1);
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.gftFrom(this);
    }

    privbtf long gftProlfptidMonth() {
        rfturn (yfbr * 12L + month - 1);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts thf yfbr fifld.
     * <p>
     * This mfthod rfturns thf primitivf {@dodf int} vbluf for thf yfbr.
     * <p>
     * Thf yfbr rfturnfd by this mfthod is prolfptid bs pfr {@dodf gft(YEAR)}.
     *
     * @rfturn thf yfbr, from MIN_YEAR to MAX_YEAR
     */
    publid int gftYfbr() {
        rfturn yfbr;
    }

    /**
     * Gfts thf month-of-yfbr fifld from 1 to 12.
     * <p>
     * This mfthod rfturns thf month bs bn {@dodf int} from 1 to 12.
     * Applidbtion dodf is frfqufntly dlfbrfr if thf fnum {@link Month}
     * is usfd by dblling {@link #gftMonth()}.
     *
     * @rfturn thf month-of-yfbr, from 1 to 12
     * @sff #gftMonth()
     */
    publid int gftMonthVbluf() {
        rfturn month;
    }

    /**
     * Gfts thf month-of-yfbr fifld using thf {@dodf Month} fnum.
     * <p>
     * This mfthod rfturns thf fnum {@link Month} for thf month.
     * This bvoids donfusion bs to whbt {@dodf int} vblufs mfbn.
     * If you nffd bddfss to thf primitivf {@dodf int} vbluf thfn thf fnum
     * providfs thf {@link Month#gftVbluf() int vbluf}.
     *
     * @rfturn thf month-of-yfbr, not null
     * @sff #gftMonthVbluf()
     */
    publid Month gftMonth() {
        rfturn Month.of(month);
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if thf yfbr is b lfbp yfbr, bddording to thf ISO prolfptid
     * dblfndbr systfm rulfs.
     * <p>
     * This mfthod bpplifs thf durrfnt rulfs for lfbp yfbrs bdross thf wholf timf-linf.
     * In gfnfrbl, b yfbr is b lfbp yfbr if it is divisiblf by four without
     * rfmbindfr. Howfvfr, yfbrs divisiblf by 100, brf not lfbp yfbrs, with
     * thf fxdfption of yfbrs divisiblf by 400 whidh brf.
     * <p>
     * For fxbmplf, 1904 is b lfbp yfbr it is divisiblf by 4.
     * 1900 wbs not b lfbp yfbr bs it is divisiblf by 100, howfvfr 2000 wbs b
     * lfbp yfbr bs it is divisiblf by 400.
     * <p>
     * Thf dbldulbtion is prolfptid - bpplying thf sbmf rulfs into thf fbr futurf bnd fbr pbst.
     * This is historidblly inbddurbtf, but is dorrfdt for thf ISO-8601 stbndbrd.
     *
     * @rfturn truf if thf yfbr is lfbp, fblsf othfrwisf
     */
    publid boolfbn isLfbpYfbr() {
        rfturn IsoChronology.INSTANCE.isLfbpYfbr(yfbr);
    }

    /**
     * Chfdks if thf dby-of-month is vblid for this yfbr-month.
     * <p>
     * This mfthod dhfdks whfthfr this yfbr bnd month bnd thf input dby form
     * b vblid dbtf.
     *
     * @pbrbm dbyOfMonth  thf dby-of-month to vblidbtf, from 1 to 31, invblid vbluf rfturns fblsf
     * @rfturn truf if thf dby is vblid for this yfbr-month
     */
    publid boolfbn isVblidDby(int dbyOfMonth) {
        rfturn dbyOfMonth >= 1 && dbyOfMonth <= lfngthOfMonth();
    }

    /**
     * Rfturns thf lfngth of thf month, tbking bddount of thf yfbr.
     * <p>
     * This rfturns thf lfngth of thf month in dbys.
     * For fxbmplf, b dbtf in Jbnubry would rfturn 31.
     *
     * @rfturn thf lfngth of thf month in dbys, from 28 to 31
     */
    publid int lfngthOfMonth() {
        rfturn gftMonth().lfngth(isLfbpYfbr());
    }

    /**
     * Rfturns thf lfngth of thf yfbr.
     * <p>
     * This rfturns thf lfngth of thf yfbr in dbys, fithfr 365 or 366.
     *
     * @rfturn 366 if thf yfbr is lfbp, 365 othfrwisf
     */
    publid int lfngthOfYfbr() {
        rfturn (isLfbpYfbr() ? 366 : 365);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns bn bdjustfd dopy of this yfbr-month.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf yfbr-month bdjustfd.
     * Thf bdjustmfnt tbkfs plbdf using thf spfdififd bdjustfr strbtfgy objfdt.
     * Rfbd thf dodumfntbtion of thf bdjustfr to undfrstbnd whbt bdjustmfnt will bf mbdf.
     * <p>
     * A simplf bdjustfr might simply sft thf onf of thf fiflds, sudh bs thf yfbr fifld.
     * A morf domplfx bdjustfr might sft thf yfbr-month to thf nfxt month thbt
     * Hbllfy's domft will pbss thf Ebrth.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblAdjustfr#bdjustInto(Tfmporbl)} mfthod on thf
     * spfdififd bdjustfr pbssing {@dodf this} bs thf brgumfnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bdjustfr thf bdjustfr to usf, not null
     * @rfturn b {@dodf YfbrMonth} bbsfd on {@dodf this} with thf bdjustmfnt mbdf, not null
     * @throws DbtfTimfExdfption if thf bdjustmfnt dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth with(TfmporblAdjustfr bdjustfr) {
        rfturn (YfbrMonth) bdjustfr.bdjustInto(this);
    }

    /**
     * Rfturns b dopy of this yfbr-month with thf spfdififd fifld sft to b nfw vbluf.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf vbluf
     * for thf spfdififd fifld dhbngfd.
     * This dbn bf usfd to dhbngf bny supportfd fifld, sudh bs thf yfbr or month.
     * If it is not possiblf to sft thf vbluf, bfdbusf thf fifld is not supportfd or for
     * somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoFifld} thfn thf bdjustmfnt is implfmfntfd hfrf.
     * Thf supportfd fiflds bfhbvf bs follows:
     * <ul>
     * <li>{@dodf MONTH_OF_YEAR} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd month-of-yfbr.
     *  Thf yfbr will bf undhbngfd.
     * <li>{@dodf PROLEPTIC_MONTH} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd prolfptid-month.
     *  This domplftfly rfplbdfs thf yfbr bnd month of this objfdt.
     * <li>{@dodf YEAR_OF_ERA} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd yfbr-of-frb
     *  Thf month bnd frb will bf undhbngfd.
     * <li>{@dodf YEAR} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd yfbr.
     *  Thf month will bf undhbngfd.
     * <li>{@dodf ERA} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd frb.
     *  Thf month bnd yfbr-of-frb will bf undhbngfd.
     * </ul>
     * <p>
     * In bll dbsfs, if thf nfw vbluf is outsidf thf vblid rbngf of vblufs for thf fifld
     * thfn b {@dodf DbtfTimfExdfption} will bf thrown.
     * <p>
     * All othfr {@dodf ChronoFifld} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoFifld}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblFifld.bdjustInto(Tfmporbl, long)}
     * pbssing {@dodf this} bs thf brgumfnt. In this dbsf, thf fifld dftfrminfs
     * whfthfr bnd how to bdjust thf instbnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm fifld  thf fifld to sft in thf rfsult, not null
     * @pbrbm nfwVbluf  thf nfw vbluf of thf fifld in thf rfsult
     * @rfturn b {@dodf YfbrMonth} bbsfd on {@dodf this} with thf spfdififd fifld sft, not null
     * @throws DbtfTimfExdfption if thf fifld dbnnot bf sft
     * @throws UnsupportfdTfmporblTypfExdfption if thf fifld is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth with(TfmporblFifld fifld, long nfwVbluf) {
        if (fifld instbndfof ChronoFifld) {
            ChronoFifld f = (ChronoFifld) fifld;
            f.dhfdkVblidVbluf(nfwVbluf);
            switdh (f) {
                dbsf MONTH_OF_YEAR: rfturn withMonth((int) nfwVbluf);
                dbsf PROLEPTIC_MONTH: rfturn plusMonths(nfwVbluf - gftProlfptidMonth());
                dbsf YEAR_OF_ERA: rfturn withYfbr((int) (yfbr < 1 ? 1 - nfwVbluf : nfwVbluf));
                dbsf YEAR: rfturn withYfbr((int) nfwVbluf);
                dbsf ERA: rfturn (gftLong(ERA) == nfwVbluf ? this : withYfbr(1 - yfbr));
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd fifld: " + fifld);
        }
        rfturn fifld.bdjustInto(this, nfwVbluf);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf yfbr bltfrfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbr  thf yfbr to sft in thf rfturnfd yfbr-month, from MIN_YEAR to MAX_YEAR
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf rfqufstfd yfbr, not null
     * @throws DbtfTimfExdfption if thf yfbr vbluf is invblid
     */
    publid YfbrMonth withYfbr(int yfbr) {
        YEAR.dhfdkVblidVbluf(yfbr);
        rfturn with(yfbr, month);
    }

    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf month-of-yfbr bltfrfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm month  thf month-of-yfbr to sft in thf rfturnfd yfbr-month, from 1 (Jbnubry) to 12 (Dfdfmbfr)
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf rfqufstfd month, not null
     * @throws DbtfTimfExdfption if thf month-of-yfbr vbluf is invblid
     */
    publid YfbrMonth withMonth(int month) {
        MONTH_OF_YEAR.dhfdkVblidVbluf(month);
        rfturn with(yfbr, month);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this yfbr-month with thf spfdififd bmount bddfd.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf spfdififd bmount bddfd.
     * Thf bmount is typidblly {@link Pfriod} but mby bf bny othfr typf implfmfnting
     * thf {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Thf dbldulbtion is dflfgbtfd to thf bmount objfdt by dblling
     * {@link TfmporblAmount#bddTo(Tfmporbl)}. Thf bmount implfmfntbtion is frff
     * to implfmfnt thf bddition in bny wby it wishfs, howfvfr it typidblly
     * dblls bbdk to {@link #plus(long, TfmporblUnit)}. Consult thf dodumfntbtion
     * of thf bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToAdd  thf bmount to bdd, not null
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf bddition mbdf, not null
     * @throws DbtfTimfExdfption if thf bddition dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth plus(TfmporblAmount bmountToAdd) {
        rfturn (YfbrMonth) bmountToAdd.bddTo(this);
    }

    /**
     * Rfturns b dopy of this yfbr-month with thf spfdififd bmount bddfd.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf bmount
     * in tfrms of thf unit bddfd. If it is not possiblf to bdd thf bmount, bfdbusf thf
     * unit is not supportfd or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * If thf fifld is b {@link ChronoUnit} thfn thf bddition is implfmfntfd hfrf.
     * Thf supportfd fiflds bfhbvf bs follows:
     * <ul>
     * <li>{@dodf MONTHS} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of months bddfd.
     *  This is fquivblfnt to {@link #plusMonths(long)}.
     * <li>{@dodf YEARS} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of yfbrs bddfd.
     *  This is fquivblfnt to {@link #plusYfbrs(long)}.
     * <li>{@dodf DECADES} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of dfdbdfs bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 10.
     * <li>{@dodf CENTURIES} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of dfnturifs bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 100.
     * <li>{@dodf MILLENNIA} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of millfnnib bddfd.
     *  This is fquivblfnt to dblling {@link #plusYfbrs(long)} with thf bmount
     *  multiplifd by 1,000.
     * <li>{@dodf ERAS} -
     *  Rfturns b {@dodf YfbrMonth} with thf spfdififd numbfr of frbs bddfd.
     *  Only two frbs brf supportfd so thf bmount must bf onf, zfro or minus onf.
     *  If thf bmount is non-zfro thfn thf yfbr is dhbngfd sudh thbt thf yfbr-of-frb
     *  is undhbngfd.
     * </ul>
     * <p>
     * All othfr {@dodf ChronoUnit} instbndfs will throw bn {@dodf UnsupportfdTfmporblTypfExdfption}.
     * <p>
     * If thf fifld is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bddTo(Tfmporbl, long)}
     * pbssing {@dodf this} bs thf brgumfnt. In this dbsf, thf unit dftfrminfs
     * whfthfr bnd how to pfrform thf bddition.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToAdd  thf bmount of thf unit to bdd to thf rfsult, mby bf nfgbtivf
     * @pbrbm unit  thf unit of thf bmount to bdd, not null
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf spfdififd bmount bddfd, not null
     * @throws DbtfTimfExdfption if thf bddition dbnnot bf mbdf
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth plus(long bmountToAdd, TfmporblUnit unit) {
        if (unit instbndfof ChronoUnit) {
            switdh ((ChronoUnit) unit) {
                dbsf MONTHS: rfturn plusMonths(bmountToAdd);
                dbsf YEARS: rfturn plusYfbrs(bmountToAdd);
                dbsf DECADES: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 10));
                dbsf CENTURIES: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 100));
                dbsf MILLENNIA: rfturn plusYfbrs(Mbth.multiplyExbdt(bmountToAdd, 1000));
                dbsf ERAS: rfturn with(ERA, Mbth.bddExbdt(gftLong(ERA), bmountToAdd));
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        rfturn unit.bddTo(this, bmountToAdd);
    }

    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf spfdififd numbfr of yfbrs bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbrsToAdd  thf yfbrs to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf yfbrs bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd rbngf
     */
    publid YfbrMonth plusYfbrs(long yfbrsToAdd) {
        if (yfbrsToAdd == 0) {
            rfturn this;
        }
        int nfwYfbr = YEAR.dhfdkVblidIntVbluf(yfbr + yfbrsToAdd);  // sbff ovfrflow
        rfturn with(nfwYfbr, month);
    }

    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf spfdififd numbfr of months bddfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm monthsToAdd  thf months to bdd, mby bf nfgbtivf
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf months bddfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd rbngf
     */
    publid YfbrMonth plusMonths(long monthsToAdd) {
        if (monthsToAdd == 0) {
            rfturn this;
        }
        long monthCount = yfbr * 12L + (month - 1);
        long dbldMonths = monthCount + monthsToAdd;  // sbff ovfrflow
        int nfwYfbr = YEAR.dhfdkVblidIntVbluf(Mbth.floorDiv(dbldMonths, 12));
        int nfwMonth = (int)Mbth.floorMod(dbldMonths, 12) + 1;
        rfturn with(nfwYfbr, nfwMonth);
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b dopy of this yfbr-month with thf spfdififd bmount subtrbdtfd.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf spfdififd bmount subtrbdtfd.
     * Thf bmount is typidblly {@link Pfriod} but mby bf bny othfr typf implfmfnting
     * thf {@link TfmporblAmount} intfrfbdf.
     * <p>
     * Thf dbldulbtion is dflfgbtfd to thf bmount objfdt by dblling
     * {@link TfmporblAmount#subtrbdtFrom(Tfmporbl)}. Thf bmount implfmfntbtion is frff
     * to implfmfnt thf subtrbdtion in bny wby it wishfs, howfvfr it typidblly
     * dblls bbdk to {@link #minus(long, TfmporblUnit)}. Consult thf dodumfntbtion
     * of thf bmount implfmfntbtion to dftfrminf if it dbn bf suddfssfully subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToSubtrbdt  thf bmount to subtrbdt, not null
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf subtrbdtion mbdf, not null
     * @throws DbtfTimfExdfption if thf subtrbdtion dbnnot bf mbdf
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth minus(TfmporblAmount bmountToSubtrbdt) {
        rfturn (YfbrMonth) bmountToSubtrbdt.subtrbdtFrom(this);
    }

    /**
     * Rfturns b dopy of this yfbr-month with thf spfdififd bmount subtrbdtfd.
     * <p>
     * This rfturns b {@dodf YfbrMonth}, bbsfd on this onf, with thf bmount
     * in tfrms of thf unit subtrbdtfd. If it is not possiblf to subtrbdt thf bmount,
     * bfdbusf thf unit is not supportfd or for somf othfr rfbson, bn fxdfption is thrown.
     * <p>
     * This mfthod is fquivblfnt to {@link #plus(long, TfmporblUnit)} with thf bmount nfgbtfd.
     * Sff thbt mfthod for b full dfsdription of how bddition, bnd thus subtrbdtion, works.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm bmountToSubtrbdt  thf bmount of thf unit to subtrbdt from thf rfsult, mby bf nfgbtivf
     * @pbrbm unit  thf unit of thf bmount to subtrbdt, not null
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf spfdififd bmount subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf subtrbdtion dbnnot bf mbdf
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid YfbrMonth minus(long bmountToSubtrbdt, TfmporblUnit unit) {
        rfturn (bmountToSubtrbdt == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-bmountToSubtrbdt, unit));
    }

    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf spfdififd numbfr of yfbrs subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm yfbrsToSubtrbdt  thf yfbrs to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf yfbrs subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd rbngf
     */
    publid YfbrMonth minusYfbrs(long yfbrsToSubtrbdt) {
        rfturn (yfbrsToSubtrbdt == Long.MIN_VALUE ? plusYfbrs(Long.MAX_VALUE).plusYfbrs(1) : plusYfbrs(-yfbrsToSubtrbdt));
    }

    /**
     * Rfturns b dopy of this {@dodf YfbrMonth} with thf spfdififd numbfr of months subtrbdtfd.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm monthsToSubtrbdt  thf months to subtrbdt, mby bf nfgbtivf
     * @rfturn b {@dodf YfbrMonth} bbsfd on this yfbr-month with thf months subtrbdtfd, not null
     * @throws DbtfTimfExdfption if thf rfsult fxdffds thf supportfd rbngf
     */
    publid YfbrMonth minusMonths(long monthsToSubtrbdt) {
        rfturn (monthsToSubtrbdt == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-monthsToSubtrbdt));
    }

    //-----------------------------------------------------------------------
    /**
     * Qufrifs this yfbr-month using thf spfdififd qufry.
     * <p>
     * This qufrifs this yfbr-month using thf spfdififd qufry strbtfgy objfdt.
     * Thf {@dodf TfmporblQufry} objfdt dffinfs thf logid to bf usfd to
     * obtbin thf rfsult. Rfbd thf dodumfntbtion of thf qufry to undfrstbnd
     * whbt thf rfsult of this mfthod will bf.
     * <p>
     * Thf rfsult of this mfthod is obtbinfd by invoking thf
     * {@link TfmporblQufry#qufryFrom(TfmporblAddfssor)} mfthod on thf
     * spfdififd qufry pbssing {@dodf this} bs thf brgumfnt.
     *
     * @pbrbm <R> thf typf of thf rfsult
     * @pbrbm qufry  thf qufry to invokf, not null
     * @rfturn thf qufry rfsult, null mby bf rfturnfd (dffinfd by thf qufry)
     * @throws DbtfTimfExdfption if unbblf to qufry (dffinfd by thf qufry)
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs (dffinfd by thf qufry)
     */
    @SupprfssWbrnings("undhfdkfd")
    @Ovfrridf
    publid <R> R qufry(TfmporblQufry<R> qufry) {
        if (qufry == TfmporblQufrifs.dhronology()) {
            rfturn (R) IsoChronology.INSTANCE;
        } flsf if (qufry == TfmporblQufrifs.prfdision()) {
            rfturn (R) MONTHS;
        }
        rfturn Tfmporbl.supfr.qufry(qufry);
    }

    /**
     * Adjusts thf spfdififd tfmporbl objfdt to hbvf this yfbr-month.
     * <p>
     * This rfturns b tfmporbl objfdt of thf sbmf obsfrvbblf typf bs thf input
     * with thf yfbr bnd month dhbngfd to bf thf sbmf bs this.
     * <p>
     * Thf bdjustmfnt is fquivblfnt to using {@link Tfmporbl#with(TfmporblFifld, long)}
     * pbssing {@link ChronoFifld#PROLEPTIC_MONTH} bs thf fifld.
     * If thf spfdififd tfmporbl objfdt dofs not usf thf ISO dblfndbr systfm thfn
     * b {@dodf DbtfTimfExdfption} is thrown.
     * <p>
     * In most dbsfs, it is dlfbrfr to rfvfrsf thf dblling pbttfrn by using
     * {@link Tfmporbl#with(TfmporblAdjustfr)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt, but thf sfdond bpprobdh is rfdommfndfd
     *   tfmporbl = thisYfbrMonth.bdjustInto(tfmporbl);
     *   tfmporbl = tfmporbl.with(thisYfbrMonth);
     * </prf>
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm tfmporbl  thf tbrgft objfdt to bf bdjustfd, not null
     * @rfturn thf bdjustfd objfdt, not null
     * @throws DbtfTimfExdfption if unbblf to mbkf thf bdjustmfnt
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid Tfmporbl bdjustInto(Tfmporbl tfmporbl) {
        if (Chronology.from(tfmporbl).fqubls(IsoChronology.INSTANCE) == fblsf) {
            throw nfw DbtfTimfExdfption("Adjustmfnt only supportfd on ISO dbtf-timf");
        }
        rfturn tfmporbl.with(PROLEPTIC_MONTH, gftProlfptidMonth());
    }

    /**
     * Cbldulbtfs thf bmount of timf until bnothfr yfbr-month in tfrms of thf spfdififd unit.
     * <p>
     * This dbldulbtfs thf bmount of timf bftwffn two {@dodf YfbrMonth}
     * objfdts in tfrms of b singlf {@dodf TfmporblUnit}.
     * Thf stbrt bnd fnd points brf {@dodf this} bnd thf spfdififd yfbr-month.
     * Thf rfsult will bf nfgbtivf if thf fnd is bfforf thf stbrt.
     * Thf {@dodf Tfmporbl} pbssfd to this mfthod is donvfrtfd to b
     * {@dodf YfbrMonth} using {@link #from(TfmporblAddfssor)}.
     * For fxbmplf, thf bmount in yfbrs bftwffn two yfbr-months dbn bf dbldulbtfd
     * using {@dodf stbrtYfbrMonth.until(fndYfbrMonth, YEARS)}.
     * <p>
     * Thf dbldulbtion rfturns b wholf numbfr, rfprfsfnting thf numbfr of
     * domplftf units bftwffn thf two yfbr-months.
     * For fxbmplf, thf bmount in dfdbdfs bftwffn 2012-06 bnd 2032-05
     * will only bf onf dfdbdf bs it is onf month short of two dfdbdfs.
     * <p>
     * Thfrf brf two fquivblfnt wbys of using this mfthod.
     * Thf first is to invokf this mfthod.
     * Thf sfdond is to usf {@link TfmporblUnit#bftwffn(Tfmporbl, Tfmporbl)}:
     * <prf>
     *   // thfsf two linfs brf fquivblfnt
     *   bmount = stbrt.until(fnd, MONTHS);
     *   bmount = MONTHS.bftwffn(stbrt, fnd);
     * </prf>
     * Thf dhoidf should bf mbdf bbsfd on whidh mbkfs thf dodf morf rfbdbblf.
     * <p>
     * Thf dbldulbtion is implfmfntfd in this mfthod for {@link ChronoUnit}.
     * Thf units {@dodf MONTHS}, {@dodf YEARS}, {@dodf DECADES},
     * {@dodf CENTURIES}, {@dodf MILLENNIA} bnd {@dodf ERAS} brf supportfd.
     * Othfr {@dodf ChronoUnit} vblufs will throw bn fxdfption.
     * <p>
     * If thf unit is not b {@dodf ChronoUnit}, thfn thf rfsult of this mfthod
     * is obtbinfd by invoking {@dodf TfmporblUnit.bftwffn(Tfmporbl, Tfmporbl)}
     * pbssing {@dodf this} bs thf first brgumfnt bnd thf donvfrtfd input tfmporbl
     * bs thf sfdond brgumfnt.
     * <p>
     * This instbndf is immutbblf bnd unbfffdtfd by this mfthod dbll.
     *
     * @pbrbm fndExdlusivf  thf fnd dbtf, fxdlusivf, whidh is donvfrtfd to b {@dodf YfbrMonth}, not null
     * @pbrbm unit  thf unit to mfbsurf thf bmount in, not null
     * @rfturn thf bmount of timf bftwffn this yfbr-month bnd thf fnd yfbr-month
     * @throws DbtfTimfExdfption if thf bmount dbnnot bf dbldulbtfd, or thf fnd
     *  tfmporbl dbnnot bf donvfrtfd to b {@dodf YfbrMonth}
     * @throws UnsupportfdTfmporblTypfExdfption if thf unit is not supportfd
     * @throws ArithmftidExdfption if numfrid ovfrflow oddurs
     */
    @Ovfrridf
    publid long until(Tfmporbl fndExdlusivf, TfmporblUnit unit) {
        YfbrMonth fnd = YfbrMonth.from(fndExdlusivf);
        if (unit instbndfof ChronoUnit) {
            long monthsUntil = fnd.gftProlfptidMonth() - gftProlfptidMonth();  // no ovfrflow
            switdh ((ChronoUnit) unit) {
                dbsf MONTHS: rfturn monthsUntil;
                dbsf YEARS: rfturn monthsUntil / 12;
                dbsf DECADES: rfturn monthsUntil / 120;
                dbsf CENTURIES: rfturn monthsUntil / 1200;
                dbsf MILLENNIA: rfturn monthsUntil / 12000;
                dbsf ERAS: rfturn fnd.gftLong(ERA) - gftLong(ERA);
            }
            throw nfw UnsupportfdTfmporblTypfExdfption("Unsupportfd unit: " + unit);
        }
        rfturn unit.bftwffn(this, fnd);
    }

    /**
     * Formbts this yfbr-month using thf spfdififd formbttfr.
     * <p>
     * This yfbr-month will bf pbssfd to thf formbttfr to produdf b string.
     *
     * @pbrbm formbttfr  thf formbttfr to usf, not null
     * @rfturn thf formbttfd yfbr-month string, not null
     * @throws DbtfTimfExdfption if bn frror oddurs during printing
     */
    publid String formbt(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        rfturn formbttfr.formbt(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Combinfs this yfbr-month with b dby-of-month to drfbtf b {@dodf LodblDbtf}.
     * <p>
     * This rfturns b {@dodf LodblDbtf} formfd from this yfbr-month bnd thf spfdififd dby-of-month.
     * <p>
     * Thf dby-of-month vbluf must bf vblid for thf yfbr-month.
     * <p>
     * This mfthod dbn bf usfd bs pbrt of b dhbin to produdf b dbtf:
     * <prf>
     *  LodblDbtf dbtf = yfbr.btMonth(month).btDby(dby);
     * </prf>
     *
     * @pbrbm dbyOfMonth  thf dby-of-month to usf, from 1 to 31
     * @rfturn thf dbtf formfd from this yfbr-month bnd thf spfdififd dby, not null
     * @throws DbtfTimfExdfption if thf dby is invblid for thf yfbr-month
     * @sff #isVblidDby(int)
     */
    publid LodblDbtf btDby(int dbyOfMonth) {
        rfturn LodblDbtf.of(yfbr, month, dbyOfMonth);
    }

    /**
     * Rfturns b {@dodf LodblDbtf} bt thf fnd of thf month.
     * <p>
     * This rfturns b {@dodf LodblDbtf} bbsfd on this yfbr-month.
     * Thf dby-of-month is sft to thf lbst vblid dby of thf month, tbking
     * into bddount lfbp yfbrs.
     * <p>
     * This mfthod dbn bf usfd bs pbrt of b dhbin to produdf b dbtf:
     * <prf>
     *  LodblDbtf dbtf = yfbr.btMonth(month).btEndOfMonth();
     * </prf>
     *
     * @rfturn thf lbst vblid dbtf of this yfbr-month, not null
     */
    publid LodblDbtf btEndOfMonth() {
        rfturn LodblDbtf.of(yfbr, month, lfngthOfMonth());
    }

    //-----------------------------------------------------------------------
    /**
     * Compbrfs this yfbr-month to bnothfr yfbr-month.
     * <p>
     * Thf dompbrison is bbsfd first on thf vbluf of thf yfbr, thfn on thf vbluf of thf month.
     * It is "donsistfnt with fqubls", bs dffinfd by {@link Compbrbblf}.
     *
     * @pbrbm othfr  thf othfr yfbr-month to dompbrf to, not null
     * @rfturn thf dompbrbtor vbluf, nfgbtivf if lfss, positivf if grfbtfr
     */
    @Ovfrridf
    publid int dompbrfTo(YfbrMonth othfr) {
        int dmp = (yfbr - othfr.yfbr);
        if (dmp == 0) {
            dmp = (month - othfr.month);
        }
        rfturn dmp;
    }

    /**
     * Chfdks if this yfbr-month is bftfr thf spfdififd yfbr-month.
     *
     * @pbrbm othfr  thf othfr yfbr-month to dompbrf to, not null
     * @rfturn truf if this is bftfr thf spfdififd yfbr-month
     */
    publid boolfbn isAftfr(YfbrMonth othfr) {
        rfturn dompbrfTo(othfr) > 0;
    }

    /**
     * Chfdks if this yfbr-month is bfforf thf spfdififd yfbr-month.
     *
     * @pbrbm othfr  thf othfr yfbr-month to dompbrf to, not null
     * @rfturn truf if this point is bfforf thf spfdififd yfbr-month
     */
    publid boolfbn isBfforf(YfbrMonth othfr) {
        rfturn dompbrfTo(othfr) < 0;
    }

    //-----------------------------------------------------------------------
    /**
     * Chfdks if this yfbr-month is fqubl to bnothfr yfbr-month.
     * <p>
     * Thf dompbrison is bbsfd on thf timf-linf position of thf yfbr-months.
     *
     * @pbrbm obj  thf objfdt to dhfdk, null rfturns fblsf
     * @rfturn truf if this is fqubl to thf othfr yfbr-month
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }
        if (obj instbndfof YfbrMonth) {
            YfbrMonth othfr = (YfbrMonth) obj;
            rfturn yfbr == othfr.yfbr && month == othfr.month;
        }
        rfturn fblsf;
    }

    /**
     * A hbsh dodf for this yfbr-month.
     *
     * @rfturn b suitbblf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn yfbr ^ (month << 27);
    }

    //-----------------------------------------------------------------------
    /**
     * Outputs this yfbr-month bs b {@dodf String}, sudh bs {@dodf 2007-12}.
     * <p>
     * Thf output will bf in thf formbt {@dodf uuuu-MM}:
     *
     * @rfturn b string rfprfsfntbtion of this yfbr-month, not null
     */
    @Ovfrridf
    publid String toString() {
        int bbsYfbr = Mbth.bbs(yfbr);
        StringBuildfr buf = nfw StringBuildfr(9);
        if (bbsYfbr < 1000) {
            if (yfbr < 0) {
                buf.bppfnd(yfbr - 10000).dflftfChbrAt(1);
            } flsf {
                buf.bppfnd(yfbr + 10000).dflftfChbrAt(0);
            }
        } flsf {
            buf.bppfnd(yfbr);
        }
        rfturn buf.bppfnd(month < 10 ? "-0" : "-")
            .bppfnd(month)
            .toString();
    }

    //-----------------------------------------------------------------------
    /**
     * Writfs thf objfdt using b
     * <b hrff="../../sfriblizfd-form.html#jbvb.timf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf>
     *  out.writfBytf(12);  // idfntififs b YfbrMonth
     *  out.writfInt(yfbr);
     *  out.writfBytf(month);
     * </prf>
     *
     * @rfturn thf instbndf of {@dodf Sfr}, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.YEAR_MONTH_TYPE, this);
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    void writfExtfrnbl(DbtbOutput out) throws IOExdfption {
        out.writfInt(yfbr);
        out.writfBytf(month);
    }

    stbtid YfbrMonth rfbdExtfrnbl(DbtbInput in) throws IOExdfption {
        int yfbr = in.rfbdInt();
        bytf month = in.rfbdBytf();
        rfturn YfbrMonth.of(yfbr, month);
    }

}
