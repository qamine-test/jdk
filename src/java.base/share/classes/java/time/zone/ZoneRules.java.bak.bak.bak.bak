/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2009-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.zonf;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.Durbtion;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtf;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.Yfbr;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.List;
import jbvb.util.Objfdts;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;

/**
 * Thf rulfs dffining how thf zonf offsft vbrifs for b singlf timf-zonf.
 * <p>
 * Thf rulfs modfl bll thf historid bnd futurf trbnsitions for b timf-zonf.
 * {@link ZonfOffsftTrbnsition} is usfd for known trbnsitions, typidblly historid.
 * {@link ZonfOffsftTrbnsitionRulf} is usfd for futurf trbnsitions thbt brf bbsfd
 * on thf rfsult of bn blgorithm.
 * <p>
 * Thf rulfs brf lobdfd vib {@link ZonfRulfsProvidfr} using b {@link ZonfId}.
 * Thf sbmf rulfs mby bf shbrfd intfrnblly bftwffn multiplf zonf IDs.
 * <p>
 * Sfriblizing bn instbndf of {@dodf ZonfRulfs} will storf thf fntirf sft of rulfs.
 * It dofs not storf thf zonf ID bs it is not pbrt of thf stbtf of this objfdt.
 * <p>
 * A rulf implfmfntbtion mby or mby not storf full informbtion bbout historid
 * bnd futurf trbnsitions, bnd thf informbtion storfd is only bs bddurbtf bs
 * thbt supplifd to thf implfmfntbtion by thf rulfs providfr.
 * Applidbtions should trfbt thf dbtb providfd bs rfprfsfnting thf bfst informbtion
 * bvbilbblf to thf implfmfntbtion of this rulf.
 *
 * @implSpfd
 * This dlbss is immutbblf bnd thrfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss ZonfRulfs implfmfnts Sfriblizbblf {

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 3044319355680032515L;
    /**
     * Thf lbst yfbr to hbvf its trbnsitions dbdhfd.
     */
    privbtf stbtid finbl int LAST_CACHED_YEAR = 2100;

    /**
     * Thf trbnsitions bftwffn stbndbrd offsfts (fpodh sfdonds), sortfd.
     */
    privbtf finbl long[] stbndbrdTrbnsitions;
    /**
     * Thf stbndbrd offsfts.
     */
    privbtf finbl ZonfOffsft[] stbndbrdOffsfts;
    /**
     * Thf trbnsitions bftwffn instbnts (fpodh sfdonds), sortfd.
     */
    privbtf finbl long[] sbvingsInstbntTrbnsitions;
    /**
     * Thf trbnsitions bftwffn lodbl dbtf-timfs, sortfd.
     * This is b pbirfd brrby, whfrf thf first fntry is thf stbrt of thf trbnsition
     * bnd thf sfdond fntry is thf fnd of thf trbnsition.
     */
    privbtf finbl LodblDbtfTimf[] sbvingsLodblTrbnsitions;
    /**
     * Thf wbll offsfts.
     */
    privbtf finbl ZonfOffsft[] wbllOffsfts;
    /**
     * Thf lbst rulf.
     */
    privbtf finbl ZonfOffsftTrbnsitionRulf[] lbstRulfs;
    /**
     * Thf mbp of rfdfnt trbnsitions.
     */
    privbtf finbl trbnsifnt CondurrfntMbp<Intfgfr, ZonfOffsftTrbnsition[]> lbstRulfsCbdhf =
                nfw CondurrfntHbshMbp<Intfgfr, ZonfOffsftTrbnsition[]>();
    /**
     * Thf zfro-lfngth long brrby.
     */
    privbtf stbtid finbl long[] EMPTY_LONG_ARRAY = nfw long[0];
    /**
     * Thf zfro-lfngth lbstrulfs brrby.
     */
    privbtf stbtid finbl ZonfOffsftTrbnsitionRulf[] EMPTY_LASTRULES =
        nfw ZonfOffsftTrbnsitionRulf[0];
    /**
     * Thf zfro-lfngth ldt brrby.
     */
    privbtf stbtid finbl LodblDbtfTimf[] EMPTY_LDT_ARRAY = nfw LodblDbtfTimf[0];

    /**
     * Obtbins bn instbndf of b ZonfRulfs.
     *
     * @pbrbm bbsfStbndbrdOffsft  thf stbndbrd offsft to usf bfforf lfgbl rulfs wfrf sft, not null
     * @pbrbm bbsfWbllOffsft  thf wbll offsft to usf bfforf lfgbl rulfs wfrf sft, not null
     * @pbrbm stbndbrdOffsftTrbnsitionList  thf list of dhbngfs to thf stbndbrd offsft, not null
     * @pbrbm trbnsitionList  thf list of trbnsitions, not null
     * @pbrbm lbstRulfs  thf rfdurring lbst rulfs, sizf 16 or lfss, not null
     * @rfturn thf zonf rulfs, not null
     */
    publid stbtid ZonfRulfs of(ZonfOffsft bbsfStbndbrdOffsft,
                               ZonfOffsft bbsfWbllOffsft,
                               List<ZonfOffsftTrbnsition> stbndbrdOffsftTrbnsitionList,
                               List<ZonfOffsftTrbnsition> trbnsitionList,
                               List<ZonfOffsftTrbnsitionRulf> lbstRulfs) {
        Objfdts.rfquirfNonNull(bbsfStbndbrdOffsft, "bbsfStbndbrdOffsft");
        Objfdts.rfquirfNonNull(bbsfWbllOffsft, "bbsfWbllOffsft");
        Objfdts.rfquirfNonNull(stbndbrdOffsftTrbnsitionList, "stbndbrdOffsftTrbnsitionList");
        Objfdts.rfquirfNonNull(trbnsitionList, "trbnsitionList");
        Objfdts.rfquirfNonNull(lbstRulfs, "lbstRulfs");
        rfturn nfw ZonfRulfs(bbsfStbndbrdOffsft, bbsfWbllOffsft,
                             stbndbrdOffsftTrbnsitionList, trbnsitionList, lbstRulfs);
    }

    /**
     * Obtbins bn instbndf of ZonfRulfs thbt hbs fixfd zonf rulfs.
     *
     * @pbrbm offsft  thf offsft this fixfd zonf rulfs is bbsfd on, not null
     * @rfturn thf zonf rulfs, not null
     * @sff #isFixfdOffsft()
     */
    publid stbtid ZonfRulfs of(ZonfOffsft offsft) {
        Objfdts.rfquirfNonNull(offsft, "offsft");
        rfturn nfw ZonfRulfs(offsft);
    }

    /**
     * Crfbtfs bn instbndf.
     *
     * @pbrbm bbsfStbndbrdOffsft  thf stbndbrd offsft to usf bfforf lfgbl rulfs wfrf sft, not null
     * @pbrbm bbsfWbllOffsft  thf wbll offsft to usf bfforf lfgbl rulfs wfrf sft, not null
     * @pbrbm stbndbrdOffsftTrbnsitionList  thf list of dhbngfs to thf stbndbrd offsft, not null
     * @pbrbm trbnsitionList  thf list of trbnsitions, not null
     * @pbrbm lbstRulfs  thf rfdurring lbst rulfs, sizf 16 or lfss, not null
     */
    ZonfRulfs(ZonfOffsft bbsfStbndbrdOffsft,
              ZonfOffsft bbsfWbllOffsft,
              List<ZonfOffsftTrbnsition> stbndbrdOffsftTrbnsitionList,
              List<ZonfOffsftTrbnsition> trbnsitionList,
              List<ZonfOffsftTrbnsitionRulf> lbstRulfs) {
        supfr();

        // donvfrt stbndbrd trbnsitions

        this.stbndbrdTrbnsitions = nfw long[stbndbrdOffsftTrbnsitionList.sizf()];

        this.stbndbrdOffsfts = nfw ZonfOffsft[stbndbrdOffsftTrbnsitionList.sizf() + 1];
        this.stbndbrdOffsfts[0] = bbsfStbndbrdOffsft;
        for (int i = 0; i < stbndbrdOffsftTrbnsitionList.sizf(); i++) {
            this.stbndbrdTrbnsitions[i] = stbndbrdOffsftTrbnsitionList.gft(i).toEpodhSfdond();
            this.stbndbrdOffsfts[i + 1] = stbndbrdOffsftTrbnsitionList.gft(i).gftOffsftAftfr();
        }

        // donvfrt sbvings trbnsitions to lodbls
        List<LodblDbtfTimf> lodblTrbnsitionList = nfw ArrbyList<>();
        List<ZonfOffsft> lodblTrbnsitionOffsftList = nfw ArrbyList<>();
        lodblTrbnsitionOffsftList.bdd(bbsfWbllOffsft);
        for (ZonfOffsftTrbnsition trbns : trbnsitionList) {
            if (trbns.isGbp()) {
                lodblTrbnsitionList.bdd(trbns.gftDbtfTimfBfforf());
                lodblTrbnsitionList.bdd(trbns.gftDbtfTimfAftfr());
            } flsf {
                lodblTrbnsitionList.bdd(trbns.gftDbtfTimfAftfr());
                lodblTrbnsitionList.bdd(trbns.gftDbtfTimfBfforf());
            }
            lodblTrbnsitionOffsftList.bdd(trbns.gftOffsftAftfr());
        }
        this.sbvingsLodblTrbnsitions = lodblTrbnsitionList.toArrby(nfw LodblDbtfTimf[lodblTrbnsitionList.sizf()]);
        this.wbllOffsfts = lodblTrbnsitionOffsftList.toArrby(nfw ZonfOffsft[lodblTrbnsitionOffsftList.sizf()]);

        // donvfrt sbvings trbnsitions to instbnts
        this.sbvingsInstbntTrbnsitions = nfw long[trbnsitionList.sizf()];
        for (int i = 0; i < trbnsitionList.sizf(); i++) {
            this.sbvingsInstbntTrbnsitions[i] = trbnsitionList.gft(i).toEpodhSfdond();
        }

        // lbst rulfs
        if (lbstRulfs.sizf() > 16) {
            throw nfw IllfgblArgumfntExdfption("Too mbny trbnsition rulfs");
        }
        this.lbstRulfs = lbstRulfs.toArrby(nfw ZonfOffsftTrbnsitionRulf[lbstRulfs.sizf()]);
    }

    /**
     * Construdtor.
     *
     * @pbrbm stbndbrdTrbnsitions  thf stbndbrd trbnsitions, not null
     * @pbrbm stbndbrdOffsfts  thf stbndbrd offsfts, not null
     * @pbrbm sbvingsInstbntTrbnsitions  thf stbndbrd trbnsitions, not null
     * @pbrbm wbllOffsfts  thf wbll offsfts, not null
     * @pbrbm lbstRulfs  thf rfdurring lbst rulfs, sizf 15 or lfss, not null
     */
    privbtf ZonfRulfs(long[] stbndbrdTrbnsitions,
                      ZonfOffsft[] stbndbrdOffsfts,
                      long[] sbvingsInstbntTrbnsitions,
                      ZonfOffsft[] wbllOffsfts,
                      ZonfOffsftTrbnsitionRulf[] lbstRulfs) {
        supfr();

        this.stbndbrdTrbnsitions = stbndbrdTrbnsitions;
        this.stbndbrdOffsfts = stbndbrdOffsfts;
        this.sbvingsInstbntTrbnsitions = sbvingsInstbntTrbnsitions;
        this.wbllOffsfts = wbllOffsfts;
        this.lbstRulfs = lbstRulfs;

        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            this.sbvingsLodblTrbnsitions = EMPTY_LDT_ARRAY;
        } flsf {
            // donvfrt sbvings trbnsitions to lodbls
            List<LodblDbtfTimf> lodblTrbnsitionList = nfw ArrbyList<>();
            for (int i = 0; i < sbvingsInstbntTrbnsitions.lfngth; i++) {
                ZonfOffsft bfforf = wbllOffsfts[i];
                ZonfOffsft bftfr = wbllOffsfts[i + 1];
                ZonfOffsftTrbnsition trbns = nfw ZonfOffsftTrbnsition(sbvingsInstbntTrbnsitions[i], bfforf, bftfr);
                if (trbns.isGbp()) {
                    lodblTrbnsitionList.bdd(trbns.gftDbtfTimfBfforf());
                    lodblTrbnsitionList.bdd(trbns.gftDbtfTimfAftfr());
                } flsf {
                    lodblTrbnsitionList.bdd(trbns.gftDbtfTimfAftfr());
                    lodblTrbnsitionList.bdd(trbns.gftDbtfTimfBfforf());
               }
            }
            this.sbvingsLodblTrbnsitions = lodblTrbnsitionList.toArrby(nfw LodblDbtfTimf[lodblTrbnsitionList.sizf()]);
        }
    }

    /**
     * Crfbtfs bn instbndf of ZonfRulfs thbt hbs fixfd zonf rulfs.
     *
     * @pbrbm offsft  thf offsft this fixfd zonf rulfs is bbsfd on, not null
     * @rfturn thf zonf rulfs, not null
     * @sff #isFixfdOffsft()
     */
    privbtf ZonfRulfs(ZonfOffsft offsft) {
        this.stbndbrdOffsfts = nfw ZonfOffsft[1];
        this.stbndbrdOffsfts[0] = offsft;
        this.stbndbrdTrbnsitions = EMPTY_LONG_ARRAY;
        this.sbvingsInstbntTrbnsitions = EMPTY_LONG_ARRAY;
        this.sbvingsLodblTrbnsitions = EMPTY_LDT_ARRAY;
        this.wbllOffsfts = stbndbrdOffsfts;
        this.lbstRulfs = EMPTY_LASTRULES;
    }

    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s thf strfbm to rfbd
     * @throws InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) throws InvblidObjfdtExdfption {
        throw nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    /**
     * Writfs thf objfdt using b
     * <b hrff="../../../sfriblizfd-form.html#jbvb.timf.zonf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * <prf stylf="font-sizf:1.0fm">{@dodf
     *
     *   out.writfBytf(1);  // idfntififs b ZonfRulfs
     *   out.writfInt(stbndbrdTrbnsitions.lfngth);
     *   for (long trbns : stbndbrdTrbnsitions) {
     *       Sfr.writfEpodhSfd(trbns, out);
     *   }
     *   for (ZonfOffsft offsft : stbndbrdOffsfts) {
     *       Sfr.writfOffsft(offsft, out);
     *   }
     *   out.writfInt(sbvingsInstbntTrbnsitions.lfngth);
     *   for (long trbns : sbvingsInstbntTrbnsitions) {
     *       Sfr.writfEpodhSfd(trbns, out);
     *   }
     *   for (ZonfOffsft offsft : wbllOffsfts) {
     *       Sfr.writfOffsft(offsft, out);
     *   }
     *   out.writfBytf(lbstRulfs.lfngth);
     *   for (ZonfOffsftTrbnsitionRulf rulf : lbstRulfs) {
     *       rulf.writfExtfrnbl(out);
     *   }
     * }
     * </prf>
     * <p>
     * Epodh sfdond vblufs usfd for offsfts brf fndodfd in b vbribblf
     * lfngth form to mbkf thf dommon dbsfs put ffwfr bytfs in thf strfbm.
     * <prf stylf="font-sizf:1.0fm">{@dodf
     *
     *  stbtid void writfEpodhSfd(long fpodhSfd, DbtbOutput out) throws IOExdfption {
     *     if (fpodhSfd >= -4575744000L && fpodhSfd < 10413792000L && fpodhSfd % 900 == 0) {  // qubrtfr hours bftwffn 1825 bnd 2300
     *         int storf = (int) ((fpodhSfd + 4575744000L) / 900);
     *         out.writfBytf((storf >>> 16) & 255);
     *         out.writfBytf((storf >>> 8) & 255);
     *         out.writfBytf(storf & 255);
     *      } flsf {
     *          out.writfBytf(255);
     *          out.writfLong(fpodhSfd);
     *      }
     *  }
     * }
     * </prf>
     * <p>
     * ZonfOffsft vblufs brf fndodfd in b vbribblf lfngth form so thf
     * dommon dbsfs put ffwfr bytfs in thf strfbm.
     * <prf stylf="font-sizf:1.0fm">{@dodf
     *
     *  stbtid void writfOffsft(ZonfOffsft offsft, DbtbOutput out) throws IOExdfption {
     *     finbl int offsftSfds = offsft.gftTotblSfdonds();
     *     int offsftBytf = offsftSfds % 900 == 0 ? offsftSfds / 900 : 127;  // domprfss to -72 to +72
     *     out.writfBytf(offsftBytf);
     *     if (offsftBytf == 127) {
     *         out.writfInt(offsftSfds);
     *     }
     * }
     *}
     * </prf>
     * @rfturn thf rfplbding objfdt, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.ZRULES, this);
    }

    /**
     * Writfs thf stbtf to thf strfbm.
     *
     * @pbrbm out  thf output strfbm, not null
     * @throws IOExdfption if bn frror oddurs
     */
    void writfExtfrnbl(DbtbOutput out) throws IOExdfption {
        out.writfInt(stbndbrdTrbnsitions.lfngth);
        for (long trbns : stbndbrdTrbnsitions) {
            Sfr.writfEpodhSfd(trbns, out);
        }
        for (ZonfOffsft offsft : stbndbrdOffsfts) {
            Sfr.writfOffsft(offsft, out);
        }
        out.writfInt(sbvingsInstbntTrbnsitions.lfngth);
        for (long trbns : sbvingsInstbntTrbnsitions) {
            Sfr.writfEpodhSfd(trbns, out);
        }
        for (ZonfOffsft offsft : wbllOffsfts) {
            Sfr.writfOffsft(offsft, out);
        }
        out.writfBytf(lbstRulfs.lfngth);
        for (ZonfOffsftTrbnsitionRulf rulf : lbstRulfs) {
            rulf.writfExtfrnbl(out);
        }
    }

    /**
     * Rfbds thf stbtf from thf strfbm.
     *
     * @pbrbm in  thf input strfbm, not null
     * @rfturn thf drfbtfd objfdt, not null
     * @throws IOExdfption if bn frror oddurs
     */
    stbtid ZonfRulfs rfbdExtfrnbl(DbtbInput in) throws IOExdfption, ClbssNotFoundExdfption {
        int stdSizf = in.rfbdInt();
        long[] stdTrbns = (stdSizf == 0) ? EMPTY_LONG_ARRAY
                                         : nfw long[stdSizf];
        for (int i = 0; i < stdSizf; i++) {
            stdTrbns[i] = Sfr.rfbdEpodhSfd(in);
        }
        ZonfOffsft[] stdOffsfts = nfw ZonfOffsft[stdSizf + 1];
        for (int i = 0; i < stdOffsfts.lfngth; i++) {
            stdOffsfts[i] = Sfr.rfbdOffsft(in);
        }
        int sbvSizf = in.rfbdInt();
        long[] sbvTrbns = (sbvSizf == 0) ? EMPTY_LONG_ARRAY
                                         : nfw long[sbvSizf];
        for (int i = 0; i < sbvSizf; i++) {
            sbvTrbns[i] = Sfr.rfbdEpodhSfd(in);
        }
        ZonfOffsft[] sbvOffsfts = nfw ZonfOffsft[sbvSizf + 1];
        for (int i = 0; i < sbvOffsfts.lfngth; i++) {
            sbvOffsfts[i] = Sfr.rfbdOffsft(in);
        }
        int rulfSizf = in.rfbdBytf();
        ZonfOffsftTrbnsitionRulf[] rulfs = (rulfSizf == 0) ?
            EMPTY_LASTRULES : nfw ZonfOffsftTrbnsitionRulf[rulfSizf];
        for (int i = 0; i < rulfSizf; i++) {
            rulfs[i] = ZonfOffsftTrbnsitionRulf.rfbdExtfrnbl(in);
        }
        rfturn nfw ZonfRulfs(stdTrbns, stdOffsfts, sbvTrbns, sbvOffsfts, rulfs);
    }

    /**
     * Chfdks of thf zonf rulfs brf fixfd, sudh thbt thf offsft nfvfr vbrifs.
     *
     * @rfturn truf if thf timf-zonf is fixfd bnd thf offsft nfvfr dhbngfs
     */
    publid boolfbn isFixfdOffsft() {
        rfturn sbvingsInstbntTrbnsitions.lfngth == 0;
    }

    /**
     * Gfts thf offsft bpplidbblf bt thf spfdififd instbnt in thfsf rulfs.
     * <p>
     * Thf mbpping from bn instbnt to bn offsft is simplf, thfrf is only
     * onf vblid offsft for fbdh instbnt.
     * This mfthod rfturns thbt offsft.
     *
     * @pbrbm instbnt  thf instbnt to find thf offsft for, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf offsft, not null
     */
    publid ZonfOffsft gftOffsft(Instbnt instbnt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn stbndbrdOffsfts[0];
        }
        long fpodhSfd = instbnt.gftEpodhSfdond();
        // dhfdk if using lbst rulfs
        if (lbstRulfs.lfngth > 0 &&
                fpodhSfd > sbvingsInstbntTrbnsitions[sbvingsInstbntTrbnsitions.lfngth - 1]) {
            int yfbr = findYfbr(fpodhSfd, wbllOffsfts[wbllOffsfts.lfngth - 1]);
            ZonfOffsftTrbnsition[] trbnsArrby = findTrbnsitionArrby(yfbr);
            ZonfOffsftTrbnsition trbns = null;
            for (int i = 0; i < trbnsArrby.lfngth; i++) {
                trbns = trbnsArrby[i];
                if (fpodhSfd < trbns.toEpodhSfdond()) {
                    rfturn trbns.gftOffsftBfforf();
                }
            }
            rfturn trbns.gftOffsftAftfr();
        }

        // using historid rulfs
        int indfx  = Arrbys.binbrySfbrdh(sbvingsInstbntTrbnsitions, fpodhSfd);
        if (indfx < 0) {
            // switdh nfgbtivf insfrt position to stbrt of mbtdhfd rbngf
            indfx = -indfx - 2;
        }
        rfturn wbllOffsfts[indfx + 1];
    }

    /**
     * Gfts b suitbblf offsft for thf spfdififd lodbl dbtf-timf in thfsf rulfs.
     * <p>
     * Thf mbpping from b lodbl dbtf-timf to bn offsft is not strbightforwbrd.
     * Thfrf brf thrff dbsfs:
     * <ul>
     * <li>Normbl, with onf vblid offsft. For thf vbst mbjority of thf yfbr, thf normbl
     *  dbsf bpplifs, whfrf thfrf is b singlf vblid offsft for thf lodbl dbtf-timf.</li>
     * <li>Gbp, with zfro vblid offsfts. This is whfn dlodks jump forwbrd typidblly
     *  duf to thf spring dbylight sbvings dhbngf from "wintfr" to "summfr".
     *  In b gbp thfrf brf lodbl dbtf-timf vblufs with no vblid offsft.</li>
     * <li>Ovfrlbp, with two vblid offsfts. This is whfn dlodks brf sft bbdk typidblly
     *  duf to thf butumn dbylight sbvings dhbngf from "summfr" to "wintfr".
     *  In bn ovfrlbp thfrf brf lodbl dbtf-timf vblufs with two vblid offsfts.</li>
     * </ul>
     * Thus, for bny givfn lodbl dbtf-timf thfrf dbn bf zfro, onf or two vblid offsfts.
     * This mfthod rfturns thf singlf offsft in thf Normbl dbsf, bnd in thf Gbp or Ovfrlbp
     * dbsf it rfturns thf offsft bfforf thf trbnsition.
     * <p>
     * Sindf, in thf dbsf of Gbp bnd Ovfrlbp, thf offsft rfturnfd is b "bfst" vbluf, rbthfr
     * thbn thf "dorrfdt" vbluf, it should bf trfbtfd with dbrf. Applidbtions thbt dbrf
     * bbout thf dorrfdt offsft should usf b dombinbtion of this mfthod,
     * {@link #gftVblidOffsfts(LodblDbtfTimf)} bnd {@link #gftTrbnsition(LodblDbtfTimf)}.
     *
     * @pbrbm lodblDbtfTimf  thf lodbl dbtf-timf to qufry, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf bfst bvbilbblf offsft for thf lodbl dbtf-timf, not null
     */
    publid ZonfOffsft gftOffsft(LodblDbtfTimf lodblDbtfTimf) {
        Objfdt info = gftOffsftInfo(lodblDbtfTimf);
        if (info instbndfof ZonfOffsftTrbnsition) {
            rfturn ((ZonfOffsftTrbnsition) info).gftOffsftBfforf();
        }
        rfturn (ZonfOffsft) info;
    }

    /**
     * Gfts thf offsft bpplidbblf bt thf spfdififd lodbl dbtf-timf in thfsf rulfs.
     * <p>
     * Thf mbpping from b lodbl dbtf-timf to bn offsft is not strbightforwbrd.
     * Thfrf brf thrff dbsfs:
     * <ul>
     * <li>Normbl, with onf vblid offsft. For thf vbst mbjority of thf yfbr, thf normbl
     *  dbsf bpplifs, whfrf thfrf is b singlf vblid offsft for thf lodbl dbtf-timf.</li>
     * <li>Gbp, with zfro vblid offsfts. This is whfn dlodks jump forwbrd typidblly
     *  duf to thf spring dbylight sbvings dhbngf from "wintfr" to "summfr".
     *  In b gbp thfrf brf lodbl dbtf-timf vblufs with no vblid offsft.</li>
     * <li>Ovfrlbp, with two vblid offsfts. This is whfn dlodks brf sft bbdk typidblly
     *  duf to thf butumn dbylight sbvings dhbngf from "summfr" to "wintfr".
     *  In bn ovfrlbp thfrf brf lodbl dbtf-timf vblufs with two vblid offsfts.</li>
     * </ul>
     * Thus, for bny givfn lodbl dbtf-timf thfrf dbn bf zfro, onf or two vblid offsfts.
     * This mfthod rfturns thbt list of vblid offsfts, whidh is b list of sizf 0, 1 or 2.
     * In thf dbsf whfrf thfrf brf two offsfts, thf fbrlifr offsft is rfturnfd bt indfx 0
     * bnd thf lbtfr offsft bt indfx 1.
     * <p>
     * Thfrf brf vbrious wbys to hbndlf thf donvfrsion from b {@dodf LodblDbtfTimf}.
     * Onf tfdhniquf, using this mfthod, would bf:
     * <prf>
     *  List&lt;ZonfOffsft&gt; vblidOffsfts = rulfs.gftOffsft(lodblDT);
     *  if (vblidOffsfts.sizf() == 1) {
     *    // Normbl dbsf: only onf vblid offsft
     *    zonfOffsft = vblidOffsfts.gft(0);
     *  } flsf {
     *    // Gbp or Ovfrlbp: dftfrminf whbt to do from trbnsition (whidh will bf non-null)
     *    ZonfOffsftTrbnsition trbns = rulfs.gftTrbnsition(lodblDT);
     *  }
     * </prf>
     * <p>
     * In thfory, it is possiblf for thfrf to bf morf thbn two vblid offsfts.
     * This would hbppfn if dlodks to bf put bbdk morf thbn ondf in quidk suddfssion.
     * This hbs nfvfr hbppfnfd in thf history of timf-zonfs bnd thus hbs no spfdibl hbndling.
     * Howfvfr, if it wfrf to hbppfn, thfn thf list would rfturn morf thbn 2 fntrifs.
     *
     * @pbrbm lodblDbtfTimf  thf lodbl dbtf-timf to qufry for vblid offsfts, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf list of vblid offsfts, mby bf immutbblf, not null
     */
    publid List<ZonfOffsft> gftVblidOffsfts(LodblDbtfTimf lodblDbtfTimf) {
        // should probbbly bf optimizfd
        Objfdt info = gftOffsftInfo(lodblDbtfTimf);
        if (info instbndfof ZonfOffsftTrbnsition) {
            rfturn ((ZonfOffsftTrbnsition) info).gftVblidOffsfts();
        }
        rfturn Collfdtions.singlftonList((ZonfOffsft) info);
    }

    /**
     * Gfts thf offsft trbnsition bpplidbblf bt thf spfdififd lodbl dbtf-timf in thfsf rulfs.
     * <p>
     * Thf mbpping from b lodbl dbtf-timf to bn offsft is not strbightforwbrd.
     * Thfrf brf thrff dbsfs:
     * <ul>
     * <li>Normbl, with onf vblid offsft. For thf vbst mbjority of thf yfbr, thf normbl
     *  dbsf bpplifs, whfrf thfrf is b singlf vblid offsft for thf lodbl dbtf-timf.</li>
     * <li>Gbp, with zfro vblid offsfts. This is whfn dlodks jump forwbrd typidblly
     *  duf to thf spring dbylight sbvings dhbngf from "wintfr" to "summfr".
     *  In b gbp thfrf brf lodbl dbtf-timf vblufs with no vblid offsft.</li>
     * <li>Ovfrlbp, with two vblid offsfts. This is whfn dlodks brf sft bbdk typidblly
     *  duf to thf butumn dbylight sbvings dhbngf from "summfr" to "wintfr".
     *  In bn ovfrlbp thfrf brf lodbl dbtf-timf vblufs with two vblid offsfts.</li>
     * </ul>
     * A trbnsition is usfd to modfl thf dbsfs of b Gbp or Ovfrlbp.
     * Thf Normbl dbsf will rfturn null.
     * <p>
     * Thfrf brf vbrious wbys to hbndlf thf donvfrsion from b {@dodf LodblDbtfTimf}.
     * Onf tfdhniquf, using this mfthod, would bf:
     * <prf>
     *  ZonfOffsftTrbnsition trbns = rulfs.gftTrbnsition(lodblDT);
     *  if (trbns == null) {
     *    // Gbp or Ovfrlbp: dftfrminf whbt to do from trbnsition
     *  } flsf {
     *    // Normbl dbsf: only onf vblid offsft
     *    zonfOffsft = rulf.gftOffsft(lodblDT);
     *  }
     * </prf>
     *
     * @pbrbm lodblDbtfTimf  thf lodbl dbtf-timf to qufry for offsft trbnsition, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf offsft trbnsition, null if thf lodbl dbtf-timf is not in trbnsition
     */
    publid ZonfOffsftTrbnsition gftTrbnsition(LodblDbtfTimf lodblDbtfTimf) {
        Objfdt info = gftOffsftInfo(lodblDbtfTimf);
        rfturn (info instbndfof ZonfOffsftTrbnsition ? (ZonfOffsftTrbnsition) info : null);
    }

    privbtf Objfdt gftOffsftInfo(LodblDbtfTimf dt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn stbndbrdOffsfts[0];
        }
        // dhfdk if using lbst rulfs
        if (lbstRulfs.lfngth > 0 &&
                dt.isAftfr(sbvingsLodblTrbnsitions[sbvingsLodblTrbnsitions.lfngth - 1])) {
            ZonfOffsftTrbnsition[] trbnsArrby = findTrbnsitionArrby(dt.gftYfbr());
            Objfdt info = null;
            for (ZonfOffsftTrbnsition trbns : trbnsArrby) {
                info = findOffsftInfo(dt, trbns);
                if (info instbndfof ZonfOffsftTrbnsition || info.fqubls(trbns.gftOffsftBfforf())) {
                    rfturn info;
                }
            }
            rfturn info;
        }

        // using historid rulfs
        int indfx  = Arrbys.binbrySfbrdh(sbvingsLodblTrbnsitions, dt);
        if (indfx == -1) {
            // bfforf first trbnsition
            rfturn wbllOffsfts[0];
        }
        if (indfx < 0) {
            // switdh nfgbtivf insfrt position to stbrt of mbtdhfd rbngf
            indfx = -indfx - 2;
        } flsf if (indfx < sbvingsLodblTrbnsitions.lfngth - 1 &&
                sbvingsLodblTrbnsitions[indfx].fqubls(sbvingsLodblTrbnsitions[indfx + 1])) {
            // hbndlf ovfrlbp immfdibtfly following gbp
            indfx++;
        }
        if ((indfx & 1) == 0) {
            // gbp or ovfrlbp
            LodblDbtfTimf dtBfforf = sbvingsLodblTrbnsitions[indfx];
            LodblDbtfTimf dtAftfr = sbvingsLodblTrbnsitions[indfx + 1];
            ZonfOffsft offsftBfforf = wbllOffsfts[indfx / 2];
            ZonfOffsft offsftAftfr = wbllOffsfts[indfx / 2 + 1];
            if (offsftAftfr.gftTotblSfdonds() > offsftBfforf.gftTotblSfdonds()) {
                // gbp
                rfturn nfw ZonfOffsftTrbnsition(dtBfforf, offsftBfforf, offsftAftfr);
            } flsf {
                // ovfrlbp
                rfturn nfw ZonfOffsftTrbnsition(dtAftfr, offsftBfforf, offsftAftfr);
            }
        } flsf {
            // normbl (nfithfr gbp or ovfrlbp)
            rfturn wbllOffsfts[indfx / 2 + 1];
        }
    }

    /**
     * Finds thf offsft info for b lodbl dbtf-timf bnd trbnsition.
     *
     * @pbrbm dt  thf dbtf-timf, not null
     * @pbrbm trbns  thf trbnsition, not null
     * @rfturn thf offsft info, not null
     */
    privbtf Objfdt findOffsftInfo(LodblDbtfTimf dt, ZonfOffsftTrbnsition trbns) {
        LodblDbtfTimf lodblTrbnsition = trbns.gftDbtfTimfBfforf();
        if (trbns.isGbp()) {
            if (dt.isBfforf(lodblTrbnsition)) {
                rfturn trbns.gftOffsftBfforf();
            }
            if (dt.isBfforf(trbns.gftDbtfTimfAftfr())) {
                rfturn trbns;
            } flsf {
                rfturn trbns.gftOffsftAftfr();
            }
        } flsf {
            if (dt.isBfforf(lodblTrbnsition) == fblsf) {
                rfturn trbns.gftOffsftAftfr();
            }
            if (dt.isBfforf(trbns.gftDbtfTimfAftfr())) {
                rfturn trbns.gftOffsftBfforf();
            } flsf {
                rfturn trbns;
            }
        }
    }

    /**
     * Finds thf bppropribtf trbnsition brrby for thf givfn yfbr.
     *
     * @pbrbm yfbr  thf yfbr, not null
     * @rfturn thf trbnsition brrby, not null
     */
    privbtf ZonfOffsftTrbnsition[] findTrbnsitionArrby(int yfbr) {
        Intfgfr yfbrObj = yfbr;  // should usf Yfbr dlbss, but this sbvfs b dlbss lobd
        ZonfOffsftTrbnsition[] trbnsArrby = lbstRulfsCbdhf.gft(yfbrObj);
        if (trbnsArrby != null) {
            rfturn trbnsArrby;
        }
        ZonfOffsftTrbnsitionRulf[] rulfArrby = lbstRulfs;
        trbnsArrby  = nfw ZonfOffsftTrbnsition[rulfArrby.lfngth];
        for (int i = 0; i < rulfArrby.lfngth; i++) {
            trbnsArrby[i] = rulfArrby[i].drfbtfTrbnsition(yfbr);
        }
        if (yfbr < LAST_CACHED_YEAR) {
            lbstRulfsCbdhf.putIfAbsfnt(yfbrObj, trbnsArrby);
        }
        rfturn trbnsArrby;
    }

    /**
     * Gfts thf stbndbrd offsft for thf spfdififd instbnt in this zonf.
     * <p>
     * This providfs bddfss to historid informbtion on how thf stbndbrd offsft
     * hbs dhbngfd ovfr timf.
     * Thf stbndbrd offsft is thf offsft bfforf bny dbylight sbving timf is bpplifd.
     * This is typidblly thf offsft bpplidbblf during wintfr.
     *
     * @pbrbm instbnt  thf instbnt to find thf offsft informbtion for, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf stbndbrd offsft, not null
     */
    publid ZonfOffsft gftStbndbrdOffsft(Instbnt instbnt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn stbndbrdOffsfts[0];
        }
        long fpodhSfd = instbnt.gftEpodhSfdond();
        int indfx  = Arrbys.binbrySfbrdh(stbndbrdTrbnsitions, fpodhSfd);
        if (indfx < 0) {
            // switdh nfgbtivf insfrt position to stbrt of mbtdhfd rbngf
            indfx = -indfx - 2;
        }
        rfturn stbndbrdOffsfts[indfx + 1];
    }

    /**
     * Gfts thf bmount of dbylight sbvings in usf for thf spfdififd instbnt in this zonf.
     * <p>
     * This providfs bddfss to historid informbtion on how thf bmount of dbylight
     * sbvings hbs dhbngfd ovfr timf.
     * This is thf difffrfndf bftwffn thf stbndbrd offsft bnd thf bdtubl offsft.
     * Typidblly thf bmount is zfro during wintfr bnd onf hour during summfr.
     * Timf-zonfs brf sfdond-bbsfd, so thf nbnosfdond pbrt of thf durbtion will bf zfro.
     * <p>
     * This dffbult implfmfntbtion dbldulbtfs thf durbtion from thf
     * {@link #gftOffsft(jbvb.timf.Instbnt) bdtubl} bnd
     * {@link #gftStbndbrdOffsft(jbvb.timf.Instbnt) stbndbrd} offsfts.
     *
     * @pbrbm instbnt  thf instbnt to find thf dbylight sbvings for, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf difffrfndf bftwffn thf stbndbrd bnd bdtubl offsft, not null
     */
    publid Durbtion gftDbylightSbvings(Instbnt instbnt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn Durbtion.ZERO;
        }
        ZonfOffsft stbndbrdOffsft = gftStbndbrdOffsft(instbnt);
        ZonfOffsft bdtublOffsft = gftOffsft(instbnt);
        rfturn Durbtion.ofSfdonds(bdtublOffsft.gftTotblSfdonds() - stbndbrdOffsft.gftTotblSfdonds());
    }

    /**
     * Chfdks if thf spfdififd instbnt is in dbylight sbvings.
     * <p>
     * This dhfdks if thf stbndbrd offsft bnd thf bdtubl offsft brf thf sbmf
     * for thf spfdififd instbnt.
     * If thfy brf not, it is bssumfd thbt dbylight sbvings is in opfrbtion.
     * <p>
     * This dffbult implfmfntbtion dompbrfs thf {@link #gftOffsft(jbvb.timf.Instbnt) bdtubl}
     * bnd {@link #gftStbndbrdOffsft(jbvb.timf.Instbnt) stbndbrd} offsfts.
     *
     * @pbrbm instbnt  thf instbnt to find thf offsft informbtion for, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf stbndbrd offsft, not null
     */
    publid boolfbn isDbylightSbvings(Instbnt instbnt) {
        rfturn (gftStbndbrdOffsft(instbnt).fqubls(gftOffsft(instbnt)) == fblsf);
    }

    /**
     * Chfdks if thf offsft dbtf-timf is vblid for thfsf rulfs.
     * <p>
     * To bf vblid, thf lodbl dbtf-timf must not bf in b gbp bnd thf offsft
     * must mbtdh onf of thf vblid offsfts.
     * <p>
     * This dffbult implfmfntbtion dhfdks if {@link #gftVblidOffsfts(jbvb.timf.LodblDbtfTimf)}
     * dontbins thf spfdififd offsft.
     *
     * @pbrbm lodblDbtfTimf  thf dbtf-timf to dhfdk, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @pbrbm offsft  thf offsft to dhfdk, null rfturns fblsf
     * @rfturn truf if thf offsft dbtf-timf is vblid for thfsf rulfs
     */
    publid boolfbn isVblidOffsft(LodblDbtfTimf lodblDbtfTimf, ZonfOffsft offsft) {
        rfturn gftVblidOffsfts(lodblDbtfTimf).dontbins(offsft);
    }

    /**
     * Gfts thf nfxt trbnsition bftfr thf spfdififd instbnt.
     * <p>
     * This rfturns dftbils of thf nfxt trbnsition bftfr thf spfdififd instbnt.
     * For fxbmplf, if thf instbnt rfprfsfnts b point whfrf "Summfr" dbylight sbvings timf
     * bpplifs, thfn thf mfthod will rfturn thf trbnsition to thf nfxt "Wintfr" timf.
     *
     * @pbrbm instbnt  thf instbnt to gft thf nfxt trbnsition bftfr, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf nfxt trbnsition bftfr thf spfdififd instbnt, null if this is bftfr thf lbst trbnsition
     */
    publid ZonfOffsftTrbnsition nfxtTrbnsition(Instbnt instbnt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn null;
        }
        long fpodhSfd = instbnt.gftEpodhSfdond();
        // dhfdk if using lbst rulfs
        if (fpodhSfd >= sbvingsInstbntTrbnsitions[sbvingsInstbntTrbnsitions.lfngth - 1]) {
            if (lbstRulfs.lfngth == 0) {
                rfturn null;
            }
            // sfbrdh yfbr thf instbnt is in
            int yfbr = findYfbr(fpodhSfd, wbllOffsfts[wbllOffsfts.lfngth - 1]);
            ZonfOffsftTrbnsition[] trbnsArrby = findTrbnsitionArrby(yfbr);
            for (ZonfOffsftTrbnsition trbns : trbnsArrby) {
                if (fpodhSfd < trbns.toEpodhSfdond()) {
                    rfturn trbns;
                }
            }
            // usf first from following yfbr
            if (yfbr < Yfbr.MAX_VALUE) {
                trbnsArrby = findTrbnsitionArrby(yfbr + 1);
                rfturn trbnsArrby[0];
            }
            rfturn null;
        }

        // using historid rulfs
        int indfx  = Arrbys.binbrySfbrdh(sbvingsInstbntTrbnsitions, fpodhSfd);
        if (indfx < 0) {
            indfx = -indfx - 1;  // switdhfd vbluf is thf nfxt trbnsition
        } flsf {
            indfx += 1;  // fxbdt mbtdh, so nffd to bdd onf to gft thf nfxt
        }
        rfturn nfw ZonfOffsftTrbnsition(sbvingsInstbntTrbnsitions[indfx], wbllOffsfts[indfx], wbllOffsfts[indfx + 1]);
    }

    /**
     * Gfts thf prfvious trbnsition bfforf thf spfdififd instbnt.
     * <p>
     * This rfturns dftbils of thf prfvious trbnsition bftfr thf spfdififd instbnt.
     * For fxbmplf, if thf instbnt rfprfsfnts b point whfrf "summfr" dbylight sbving timf
     * bpplifs, thfn thf mfthod will rfturn thf trbnsition from thf prfvious "wintfr" timf.
     *
     * @pbrbm instbnt  thf instbnt to gft thf prfvious trbnsition bftfr, not null, but null
     *  mby bf ignorfd if thf rulfs hbvf b singlf offsft for bll instbnts
     * @rfturn thf prfvious trbnsition bftfr thf spfdififd instbnt, null if this is bfforf thf first trbnsition
     */
    publid ZonfOffsftTrbnsition prfviousTrbnsition(Instbnt instbnt) {
        if (sbvingsInstbntTrbnsitions.lfngth == 0) {
            rfturn null;
        }
        long fpodhSfd = instbnt.gftEpodhSfdond();
        if (instbnt.gftNbno() > 0 && fpodhSfd < Long.MAX_VALUE) {
            fpodhSfd += 1;  // bllow rfst of mfthod to only usf sfdonds
        }

        // dhfdk if using lbst rulfs
        long lbstHistorid = sbvingsInstbntTrbnsitions[sbvingsInstbntTrbnsitions.lfngth - 1];
        if (lbstRulfs.lfngth > 0 && fpodhSfd > lbstHistorid) {
            // sfbrdh yfbr thf instbnt is in
            ZonfOffsft lbstHistoridOffsft = wbllOffsfts[wbllOffsfts.lfngth - 1];
            int yfbr = findYfbr(fpodhSfd, lbstHistoridOffsft);
            ZonfOffsftTrbnsition[] trbnsArrby = findTrbnsitionArrby(yfbr);
            for (int i = trbnsArrby.lfngth - 1; i >= 0; i--) {
                if (fpodhSfd > trbnsArrby[i].toEpodhSfdond()) {
                    rfturn trbnsArrby[i];
                }
            }
            // usf lbst from prfdfding yfbr
            int lbstHistoridYfbr = findYfbr(lbstHistorid, lbstHistoridOffsft);
            if (--yfbr > lbstHistoridYfbr) {
                trbnsArrby = findTrbnsitionArrby(yfbr);
                rfturn trbnsArrby[trbnsArrby.lfngth - 1];
            }
            // drop through
        }

        // using historid rulfs
        int indfx  = Arrbys.binbrySfbrdh(sbvingsInstbntTrbnsitions, fpodhSfd);
        if (indfx < 0) {
            indfx = -indfx - 1;
        }
        if (indfx <= 0) {
            rfturn null;
        }
        rfturn nfw ZonfOffsftTrbnsition(sbvingsInstbntTrbnsitions[indfx - 1], wbllOffsfts[indfx - 1], wbllOffsfts[indfx]);
    }

    privbtf int findYfbr(long fpodhSfdond, ZonfOffsft offsft) {
        // inlinf for pfrformbndf
        long lodblSfdond = fpodhSfdond + offsft.gftTotblSfdonds();
        long lodblEpodhDby = Mbth.floorDiv(lodblSfdond, 86400);
        rfturn LodblDbtf.ofEpodhDby(lodblEpodhDby).gftYfbr();
    }

    /**
     * Gfts thf domplftf list of fully dffinfd trbnsitions.
     * <p>
     * Thf domplftf sft of trbnsitions for this rulfs instbndf is dffinfd by this mfthod
     * bnd {@link #gftTrbnsitionRulfs()}. This mfthod rfturns thosf trbnsitions thbt hbvf
     * bffn fully dffinfd. Thfsf brf typidblly historidbl, but mby bf in thf futurf.
     * <p>
     * Thf list will bf fmpty for fixfd offsft rulfs bnd for bny timf-zonf whfrf thfrf hbs
     * only fvfr bffn b singlf offsft. Thf list will blso bf fmpty if thf trbnsition rulfs brf unknown.
     *
     * @rfturn bn immutbblf list of fully dffinfd trbnsitions, not null
     */
    publid List<ZonfOffsftTrbnsition> gftTrbnsitions() {
        List<ZonfOffsftTrbnsition> list = nfw ArrbyList<>();
        for (int i = 0; i < sbvingsInstbntTrbnsitions.lfngth; i++) {
            list.bdd(nfw ZonfOffsftTrbnsition(sbvingsInstbntTrbnsitions[i], wbllOffsfts[i], wbllOffsfts[i + 1]));
        }
        rfturn Collfdtions.unmodifibblfList(list);
    }

    /**
     * Gfts thf list of trbnsition rulfs for yfbrs bfyond thosf dffinfd in thf trbnsition list.
     * <p>
     * Thf domplftf sft of trbnsitions for this rulfs instbndf is dffinfd by this mfthod
     * bnd {@link #gftTrbnsitions()}. This mfthod rfturns instbndfs of {@link ZonfOffsftTrbnsitionRulf}
     * thbt dffinf bn blgorithm for whfn trbnsitions will oddur.
     * <p>
     * For bny givfn {@dodf ZonfRulfs}, this list dontbins thf trbnsition rulfs for yfbrs
     * bfyond thosf yfbrs thbt hbvf bffn fully dffinfd. Thfsf rulfs typidblly rfffr to futurf
     * dbylight sbving timf rulf dhbngfs.
     * <p>
     * If thf zonf dffinfs dbylight sbvings into thf futurf, thfn thf list will normblly
     * bf of sizf two bnd hold informbtion bbout fntfring bnd fxiting dbylight sbvings.
     * If thf zonf dofs not hbvf dbylight sbvings, or informbtion bbout futurf dhbngfs
     * is undfrtbin, thfn thf list will bf fmpty.
     * <p>
     * Thf list will bf fmpty for fixfd offsft rulfs bnd for bny timf-zonf whfrf thfrf is no
     * dbylight sbving timf. Thf list will blso bf fmpty if thf trbnsition rulfs brf unknown.
     *
     * @rfturn bn immutbblf list of trbnsition rulfs, not null
     */
    publid List<ZonfOffsftTrbnsitionRulf> gftTrbnsitionRulfs() {
        rfturn Collfdtions.unmodifibblfList(Arrbys.bsList(lbstRulfs));
    }

    /**
     * Chfdks if this sft of rulfs fqubls bnothfr.
     * <p>
     * Two rulf sfts brf fqubl if thfy will blwbys rfsult in thf sbmf output
     * for bny givfn input instbnt or lodbl dbtf-timf.
     * Rulfs from two difffrfnt groups mby rfturn fblsf fvfn if thfy brf in fbdt thf sbmf.
     * <p>
     * This dffinition should rfsult in implfmfntbtions dompbring thfir fntirf stbtf.
     *
     * @pbrbm othfrRulfs  thf othfr rulfs, null rfturns fblsf
     * @rfturn truf if this rulfs is thf sbmf bs thbt spfdififd
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt othfrRulfs) {
        if (this == othfrRulfs) {
           rfturn truf;
        }
        if (othfrRulfs instbndfof ZonfRulfs) {
            ZonfRulfs othfr = (ZonfRulfs) othfrRulfs;
            rfturn Arrbys.fqubls(stbndbrdTrbnsitions, othfr.stbndbrdTrbnsitions) &&
                    Arrbys.fqubls(stbndbrdOffsfts, othfr.stbndbrdOffsfts) &&
                    Arrbys.fqubls(sbvingsInstbntTrbnsitions, othfr.sbvingsInstbntTrbnsitions) &&
                    Arrbys.fqubls(wbllOffsfts, othfr.wbllOffsfts) &&
                    Arrbys.fqubls(lbstRulfs, othfr.lbstRulfs);
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b suitbblf hbsh dodf givfn thf dffinition of {@dodf #fqubls}.
     *
     * @rfturn thf hbsh dodf
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn Arrbys.hbshCodf(stbndbrdTrbnsitions) ^
                Arrbys.hbshCodf(stbndbrdOffsfts) ^
                Arrbys.hbshCodf(sbvingsInstbntTrbnsitions) ^
                Arrbys.hbshCodf(wbllOffsfts) ^
                Arrbys.hbshCodf(lbstRulfs);
    }

    /**
     * Rfturns b string dfsdribing this objfdt.
     *
     * @rfturn b string for dfbugging, not null
     */
    @Ovfrridf
    publid String toString() {
        rfturn "ZonfRulfs[durrfntStbndbrdOffsft=" + stbndbrdOffsfts[stbndbrdOffsfts.lfngth - 1] + "]";
    }

}
