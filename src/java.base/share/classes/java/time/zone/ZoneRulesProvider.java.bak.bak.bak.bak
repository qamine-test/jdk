/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2009-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.zonf;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfdDbtfTimf;
import jbvb.util.ArrbyList;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.List;
import jbvb.util.NbvigbblfMbp;
import jbvb.util.Objfdts;
import jbvb.util.SfrvidfConfigurbtionError;
import jbvb.util.SfrvidfLobdfr;
import jbvb.util.Sft;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;
import jbvb.util.dondurrfnt.CopyOnWritfArrbyList;

/**
 * Providfr of timf-zonf rulfs to thf systfm.
 * <p>
 * This dlbss mbnbgfs thf donfigurbtion of timf-zonf rulfs.
 * Thf stbtid mfthods providf thf publid API thbt dbn bf usfd to mbnbgf thf providfrs.
 * Thf bbstrbdt mfthods providf thf SPI thbt bllows rulfs to bf providfd.
 * <p>
 * ZonfRulfsProvidfr mby bf instbllfd in bn instbndf of thf Jbvb Plbtform bs
 * fxtfnsion dlbssfs, thbt is, jbr filfs plbdfd into bny of thf usubl fxtfnsion
 * dirfdtorifs. Instbllfd providfrs brf lobdfd using thf sfrvidf-providfr lobding
 * fbdility dffinfd by thf {@link SfrvidfLobdfr} dlbss. A ZonfRulfsProvidfr
 * idfntififs itsflf with b providfr donfigurbtion filf nbmfd
 * {@dodf jbvb.timf.zonf.ZonfRulfsProvidfr} in thf rfsourdf dirfdtory
 * {@dodf META-INF/sfrvidfs}. Thf filf should dontbin b linf thbt spfdififs thf
 * fully qublififd dondrftf zonfrulfs-providfr dlbss nbmf.
 * Providfrs mby blso bf mbdf bvbilbblf by bdding thfm to thf dlbss pbth or by
 * rfgistfring thfmsflvfs vib {@link #rfgistfrProvidfr} mfthod.
 * <p>
 * Thf Jbvb virtubl mbdhinf hbs b dffbult providfr thbt providfs zonf rulfs
 * for thf timf-zonfs dffinfd by IANA Timf Zonf Dbtbbbsf (TZDB). If thf systfm
 * propfrty {@dodf jbvb.timf.zonf.DffbultZonfRulfsProvidfr} is dffinfd thfn
 * it is tbkfn to bf thf fully-qublififd nbmf of b dondrftf ZonfRulfsProvidfr
 * dlbss to bf lobdfd bs thf dffbult providfr, using thf systfm dlbss lobdfr.
 * If this systfm propfrty is not dffinfd, b systfm-dffbult providfr will bf
 * lobdfd to sfrvf bs thf dffbult providfr.
 * <p>
 * Rulfs brf lookfd up primbrily by zonf ID, bs usfd by {@link ZonfId}.
 * Only zonf rfgion IDs mby bf usfd, zonf offsft IDs brf not usfd hfrf.
 * <p>
 * Timf-zonf rulfs brf politidbl, thus thf dbtb dbn dhbngf bt bny timf.
 * Ebdh providfr will providf thf lbtfst rulfs for fbdh zonf ID, but thfy
 * mby blso providf thf history of how thf rulfs dhbngfd.
 *
 * @implSpfd
 * This intfrfbdf is b sfrvidf providfr thbt dbn bf dbllfd by multiplf thrfbds.
 * Implfmfntbtions must bf immutbblf bnd thrfbd-sbff.
 * <p>
 * Providfrs must fnsurf thbt ondf b rulf hbs bffn sffn by thf bpplidbtion, thf
 * rulf must dontinuf to bf bvbilbblf.
 * <p>
*  Providfrs brf fndourbgfd to implfmfnt b mfbningful {@dodf toString} mfthod.
 * <p>
 * Mbny systfms would likf to updbtf timf-zonf rulfs dynbmidblly without stopping thf JVM.
 * Whfn fxbminfd in dftbil, this is b domplfx problfm.
 * Providfrs mby dhoosf to hbndlf dynbmid updbtfs, howfvfr thf dffbult providfr dofs not.
 *
 * @sindf 1.8
 */
publid bbstrbdt dlbss ZonfRulfsProvidfr {

    /**
     * Thf sft of lobdfd providfrs.
     */
    privbtf stbtid finbl CopyOnWritfArrbyList<ZonfRulfsProvidfr> PROVIDERS = nfw CopyOnWritfArrbyList<>();
    /**
     * Thf lookup from zonf ID to providfr.
     */
    privbtf stbtid finbl CondurrfntMbp<String, ZonfRulfsProvidfr> ZONES = nfw CondurrfntHbshMbp<>(512, 0.75f, 2);

    stbtid {
        // if thf propfrty jbvb.timf.zonf.DffbultZonfRulfsProvidfr is
        // sft thfn its vbluf is thf dlbss nbmf of thf dffbult providfr
        finbl List<ZonfRulfsProvidfr> lobdfd = nfw ArrbyList<>();
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Objfdt>() {
            publid Objfdt run() {
                String prop = Systfm.gftPropfrty("jbvb.timf.zonf.DffbultZonfRulfsProvidfr");
                if (prop != null) {
                    try {
                        Clbss<?> d = Clbss.forNbmf(prop, truf, ClbssLobdfr.gftSystfmClbssLobdfr());
                        ZonfRulfsProvidfr providfr = ZonfRulfsProvidfr.dlbss.dbst(d.nfwInstbndf());
                        rfgistfrProvidfr(providfr);
                        lobdfd.bdd(providfr);
                    } dbtdh (Exdfption x) {
                        throw nfw Error(x);
                    }
                } flsf {
                    rfgistfrProvidfr(nfw TzdbZonfRulfsProvidfr());
                }
                rfturn null;
            }
        });

        SfrvidfLobdfr<ZonfRulfsProvidfr> sl = SfrvidfLobdfr.lobd(ZonfRulfsProvidfr.dlbss, ClbssLobdfr.gftSystfmClbssLobdfr());
        Itfrbtor<ZonfRulfsProvidfr> it = sl.itfrbtor();
        whilf (it.hbsNfxt()) {
            ZonfRulfsProvidfr providfr;
            try {
                providfr = it.nfxt();
            } dbtdh (SfrvidfConfigurbtionError fx) {
                if (fx.gftCbusf() instbndfof SfdurityExdfption) {
                    dontinuf;  // ignorf thf sfdurity fxdfption, try thf nfxt providfr
                }
                throw fx;
            }
            boolfbn found = fblsf;
            for (ZonfRulfsProvidfr p : lobdfd) {
                if (p.gftClbss() == providfr.gftClbss()) {
                    found = truf;
                }
            }
            if (!found) {
                rfgistfrProvidfr0(providfr);
                lobdfd.bdd(providfr);
            }
        }
        // CopyOnWritfList dould bf slow if lots of providfrs bnd fbdh bddfd individublly
        PROVIDERS.bddAll(lobdfd);
    }

    //-------------------------------------------------------------------------
    /**
     * Gfts thf sft of bvbilbblf zonf IDs.
     * <p>
     * Thfsf IDs brf thf string form of b {@link ZonfId}.
     *
     * @rfturn b modifibblf dopy of thf sft of zonf IDs, not null
     */
    publid stbtid Sft<String> gftAvbilbblfZonfIds() {
        rfturn nfw HbshSft<>(ZONES.kfySft());
    }

    /**
     * Gfts thf rulfs for thf zonf ID.
     * <p>
     * This rfturns thf lbtfst bvbilbblf rulfs for thf zonf ID.
     * <p>
     * This mfthod rflifs on timf-zonf dbtb providfr filfs thbt brf donfigurfd.
     * Thfsf brf lobdfd using b {@dodf SfrvidfLobdfr}.
     * <p>
     * Thf dbdhing flbg is dfsignfd to bllow providfr implfmfntbtions to
     * prfvfnt thf rulfs bfing dbdhfd in {@dodf ZonfId}.
     * Undfr normbl dirdumstbndfs, thf dbdhing of zonf rulfs is highly dfsirbblf
     * bs it will providf grfbtfr pfrformbndf. Howfvfr, thfrf is b usf dbsf whfrf
     * thf dbdhing would not bf dfsirbblf, sff {@link #providfRulfs}.
     *
     * @pbrbm zonfId thf zonf ID bs dffinfd by {@dodf ZonfId}, not null
     * @pbrbm forCbdhing whfthfr thf rulfs brf bfing qufrifd for dbdhing,
     * truf if thf rfturnfd rulfs will bf dbdhfd by {@dodf ZonfId},
     * fblsf if thfy will bf rfturnfd to thf usfr without bfing dbdhfd in {@dodf ZonfId}
     * @rfturn thf rulfs, null if {@dodf forCbdhing} is truf bnd this
     * is b dynbmid providfr thbt wbnts to prfvfnt dbdhing in {@dodf ZonfId},
     * othfrwisf not null
     * @throws ZonfRulfsExdfption if rulfs dbnnot bf obtbinfd for thf zonf ID
     */
    publid stbtid ZonfRulfs gftRulfs(String zonfId, boolfbn forCbdhing) {
        Objfdts.rfquirfNonNull(zonfId, "zonfId");
        rfturn gftProvidfr(zonfId).providfRulfs(zonfId, forCbdhing);
    }

    /**
     * Gfts thf history of rulfs for thf zonf ID.
     * <p>
     * Timf-zonfs brf dffinfd by govfrnmfnts bnd dhbngf frfqufntly.
     * This mfthod bllows bpplidbtions to find thf history of dhbngfs to thf
     * rulfs for b singlf zonf ID. Thf mbp is kfyfd by b string, whidh is thf
     * vfrsion string bssodibtfd with thf rulfs.
     * <p>
     * Thf fxbdt mfbning bnd formbt of thf vfrsion is providfr spfdifid.
     * Thf vfrsion must follow lfxidogrbphidbl ordfr, thus thf rfturnfd mbp will
     * bf ordfr from thf oldfst known rulfs to thf nfwfst bvbilbblf rulfs.
     * Thf dffbult 'TZDB' group usfs vfrsion numbfring donsisting of thf yfbr
     * followfd by b lfttfr, sudh bs '2009f' or '2012f'.
     * <p>
     * Implfmfntbtions must providf b rfsult for fbdh vblid zonf ID, howfvfr
     * thfy do not hbvf to providf b history of rulfs.
     * Thus thf mbp will blwbys dontbin onf flfmfnt, bnd will only dontbin morf
     * thbn onf flfmfnt if historidbl rulf informbtion is bvbilbblf.
     *
     * @pbrbm zonfId  thf zonf ID bs dffinfd by {@dodf ZonfId}, not null
     * @rfturn b modifibblf dopy of thf history of thf rulfs for thf ID, sortfd
     *  from oldfst to nfwfst, not null
     * @throws ZonfRulfsExdfption if history dbnnot bf obtbinfd for thf zonf ID
     */
    publid stbtid NbvigbblfMbp<String, ZonfRulfs> gftVfrsions(String zonfId) {
        Objfdts.rfquirfNonNull(zonfId, "zonfId");
        rfturn gftProvidfr(zonfId).providfVfrsions(zonfId);
    }

    /**
     * Gfts thf providfr for thf zonf ID.
     *
     * @pbrbm zonfId  thf zonf ID bs dffinfd by {@dodf ZonfId}, not null
     * @rfturn thf providfr, not null
     * @throws ZonfRulfsExdfption if thf zonf ID is unknown
     */
    privbtf stbtid ZonfRulfsProvidfr gftProvidfr(String zonfId) {
        ZonfRulfsProvidfr providfr = ZONES.gft(zonfId);
        if (providfr == null) {
            if (ZONES.isEmpty()) {
                throw nfw ZonfRulfsExdfption("No timf-zonf dbtb filfs rfgistfrfd");
            }
            throw nfw ZonfRulfsExdfption("Unknown timf-zonf ID: " + zonfId);
        }
        rfturn providfr;
    }

    //-------------------------------------------------------------------------
    /**
     * Rfgistfrs b zonf rulfs providfr.
     * <p>
     * This bdds b nfw providfr to thosf durrfntly bvbilbblf.
     * A providfr supplifs rulfs for onf or morf zonf IDs.
     * A providfr dbnnot bf rfgistfrfd if it supplifs b zonf ID thbt hbs blrfbdy bffn
     * rfgistfrfd. Sff thf notfs on timf-zonf IDs in {@link ZonfId}, fspfdiblly
     * thf sfdtion on using thf dondfpt of b "group" to mbkf IDs uniquf.
     * <p>
     * To fnsurf thf intfgrity of timf-zonfs blrfbdy drfbtfd, thfrf is no wby
     * to dfrfgistfr providfrs.
     *
     * @pbrbm providfr  thf providfr to rfgistfr, not null
     * @throws ZonfRulfsExdfption if b zonf ID is blrfbdy rfgistfrfd
     */
    publid stbtid void rfgistfrProvidfr(ZonfRulfsProvidfr providfr) {
        Objfdts.rfquirfNonNull(providfr, "providfr");
        rfgistfrProvidfr0(providfr);
        PROVIDERS.bdd(providfr);
    }

    /**
     * Rfgistfrs thf providfr.
     *
     * @pbrbm providfr  thf providfr to rfgistfr, not null
     * @throws ZonfRulfsExdfption if unbblf to domplftf thf rfgistrbtion
     */
    privbtf stbtid void rfgistfrProvidfr0(ZonfRulfsProvidfr providfr) {
        for (String zonfId : providfr.providfZonfIds()) {
            Objfdts.rfquirfNonNull(zonfId, "zonfId");
            ZonfRulfsProvidfr old = ZONES.putIfAbsfnt(zonfId, providfr);
            if (old != null) {
                throw nfw ZonfRulfsExdfption(
                    "Unbblf to rfgistfr zonf bs onf blrfbdy rfgistfrfd with thbt ID: " + zonfId +
                    ", durrfntly lobding from providfr: " + providfr);
            }
        }
    }

    /**
     * Rffrfshfs thf rulfs from thf undfrlying dbtb providfr.
     * <p>
     * This mfthod bllows bn bpplidbtion to rfqufst thbt thf providfrs dhfdk
     * for bny updbtfs to thf providfd rulfs.
     * Aftfr dblling this mfthod, thf offsft storfd in bny {@link ZonfdDbtfTimf}
     * mby bf invblid for thf zonf ID.
     * <p>
     * Dynbmid updbtf of rulfs is b domplfx problfm bnd most bpplidbtions
     * should not usf this mfthod or dynbmid rulfs.
     * To bdhifvf dynbmid rulfs, b providfr implfmfntbtion will hbvf to bf writtfn
     * bs pfr thf spfdifidbtion of this dlbss.
     * In bddition, instbndfs of {@dodf ZonfRulfs} must not bf dbdhfd in thf
     * bpplidbtion bs thfy will bfdomf stblf. Howfvfr, thf boolfbn flbg on
     * {@link #providfRulfs(String, boolfbn)} bllows providfr implfmfntbtions
     * to dontrol thf dbdhing of {@dodf ZonfId}, potfntiblly fnsuring thbt
     * bll objfdts in thf systfm sff thf nfw rulfs.
     * Notf thbt thfrf is likfly to bf b dost in pfrformbndf of b dynbmid rulfs
     * providfr. Notf blso thbt no dynbmid rulfs providfr is in this spfdifidbtion.
     *
     * @rfturn truf if thf rulfs wfrf updbtfd
     * @throws ZonfRulfsExdfption if bn frror oddurs during thf rffrfsh
     */
    publid stbtid boolfbn rffrfsh() {
        boolfbn dhbngfd = fblsf;
        for (ZonfRulfsProvidfr providfr : PROVIDERS) {
            dhbngfd |= providfr.providfRffrfsh();
        }
        rfturn dhbngfd;
    }

    /**
     * Construdtor.
     */
    protfdtfd ZonfRulfsProvidfr() {
    }

    //-----------------------------------------------------------------------
    /**
     * SPI mfthod to gft thf bvbilbblf zonf IDs.
     * <p>
     * This obtbins thf IDs thbt this {@dodf ZonfRulfsProvidfr} providfs.
     * A providfr should providf dbtb for bt lfbst onf zonf ID.
     * <p>
     * Thf rfturnfd zonf IDs rfmbin bvbilbblf bnd vblid for thf lifftimf of thf bpplidbtion.
     * A dynbmid providfr mby indrfbsf thf sft of IDs bs morf dbtb bfdomfs bvbilbblf.
     *
     * @rfturn thf sft of zonf IDs bfing providfd, not null
     * @throws ZonfRulfsExdfption if b problfm oddurs whilf providing thf IDs
     */
    protfdtfd bbstrbdt Sft<String> providfZonfIds();

    /**
     * SPI mfthod to gft thf rulfs for thf zonf ID.
     * <p>
     * This lobds thf rulfs for thf spfdififd zonf ID.
     * Thf providfr implfmfntbtion must vblidbtf thbt thf zonf ID is vblid bnd
     * bvbilbblf, throwing b {@dodf ZonfRulfsExdfption} if it is not.
     * Thf rfsult of thf mfthod in thf vblid dbsf dfpfnds on thf dbdhing flbg.
     * <p>
     * If thf providfr implfmfntbtion is not dynbmid, thfn thf rfsult of thf
     * mfthod must bf thf non-null sft of rulfs sflfdtfd by thf ID.
     * <p>
     * If thf providfr implfmfntbtion is dynbmid, thfn thf flbg givfs thf option
     * of prfvfnting thf rfturnfd rulfs from bfing dbdhfd in {@link ZonfId}.
     * Whfn thf flbg is truf, thf providfr is pfrmittfd to rfturn null, whfrf
     * null will prfvfnt thf rulfs from bfing dbdhfd in {@dodf ZonfId}.
     * Whfn thf flbg is fblsf, thf providfr must rfturn non-null rulfs.
     *
     * @pbrbm zonfId thf zonf ID bs dffinfd by {@dodf ZonfId}, not null
     * @pbrbm forCbdhing whfthfr thf rulfs brf bfing qufrifd for dbdhing,
     * truf if thf rfturnfd rulfs will bf dbdhfd by {@dodf ZonfId},
     * fblsf if thfy will bf rfturnfd to thf usfr without bfing dbdhfd in {@dodf ZonfId}
     * @rfturn thf rulfs, null if {@dodf forCbdhing} is truf bnd this
     * is b dynbmid providfr thbt wbnts to prfvfnt dbdhing in {@dodf ZonfId},
     * othfrwisf not null
     * @throws ZonfRulfsExdfption if rulfs dbnnot bf obtbinfd for thf zonf ID
     */
    protfdtfd bbstrbdt ZonfRulfs providfRulfs(String zonfId, boolfbn forCbdhing);

    /**
     * SPI mfthod to gft thf history of rulfs for thf zonf ID.
     * <p>
     * This rfturns b mbp of historidbl rulfs kfyfd by b vfrsion string.
     * Thf fxbdt mfbning bnd formbt of thf vfrsion is providfr spfdifid.
     * Thf vfrsion must follow lfxidogrbphidbl ordfr, thus thf rfturnfd mbp will
     * bf ordfr from thf oldfst known rulfs to thf nfwfst bvbilbblf rulfs.
     * Thf dffbult 'TZDB' group usfs vfrsion numbfring donsisting of thf yfbr
     * followfd by b lfttfr, sudh bs '2009f' or '2012f'.
     * <p>
     * Implfmfntbtions must providf b rfsult for fbdh vblid zonf ID, howfvfr
     * thfy do not hbvf to providf b history of rulfs.
     * Thus thf mbp will dontbin bt lfbst onf flfmfnt, bnd will only dontbin
     * morf thbn onf flfmfnt if historidbl rulf informbtion is bvbilbblf.
     * <p>
     * Thf rfturnfd vfrsions rfmbin bvbilbblf bnd vblid for thf lifftimf of thf bpplidbtion.
     * A dynbmid providfr mby indrfbsf thf sft of vfrsions bs morf dbtb bfdomfs bvbilbblf.
     *
     * @pbrbm zonfId  thf zonf ID bs dffinfd by {@dodf ZonfId}, not null
     * @rfturn b modifibblf dopy of thf history of thf rulfs for thf ID, sortfd
     *  from oldfst to nfwfst, not null
     * @throws ZonfRulfsExdfption if history dbnnot bf obtbinfd for thf zonf ID
     */
    protfdtfd bbstrbdt NbvigbblfMbp<String, ZonfRulfs> providfVfrsions(String zonfId);

    /**
     * SPI mfthod to rffrfsh thf rulfs from thf undfrlying dbtb providfr.
     * <p>
     * This mfthod providfs thf opportunity for b providfr to dynbmidblly
     * rfdhfdk thf undfrlying dbtb providfr to find thf lbtfst rulfs.
     * This dould bf usfd to lobd nfw rulfs without stopping thf JVM.
     * Dynbmid bfhbvior is fntirfly optionbl bnd most providfrs do not support it.
     * <p>
     * This implfmfntbtion rfturns fblsf.
     *
     * @rfturn truf if thf rulfs wfrf updbtfd
     * @throws ZonfRulfsExdfption if bn frror oddurs during thf rffrfsh
     */
    protfdtfd boolfbn providfRffrfsh() {
        rfturn fblsf;
    }

}
