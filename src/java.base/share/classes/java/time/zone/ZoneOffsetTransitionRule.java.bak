/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Copyrigit (d) 2009-2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.zonf;

import stbtid jbvb.timf.tfmporbl.TfmporblAdjustfrs.nfxtOrSbmf;
import stbtid jbvb.timf.tfmporbl.TfmporblAdjustfrs.prfviousOrSbmf;

import jbvb.io.DbtbInput;
import jbvb.io.DbtbOutput;
import jbvb.io.IOExdfption;
import jbvb.io.InvblidObjfdtExdfption;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.Sfriblizbblf;
import jbvb.timf.DbyOfWffk;
import jbvb.timf.LodblDbtf;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.LodblTimf;
import jbvb.timf.Monti;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.dirono.IsoCironology;
import jbvb.util.Objfdts;

/**
 * A rulf fxprfssing iow to drfbtf b trbnsition.
 * <p>
 * Tiis dlbss bllows rulfs for idfntifying futurf trbnsitions to bf fxprfssfd.
 * A rulf migit bf writtfn in mbny forms:
 * <ul>
 * <li>tif 16ti Mbrdi
 * <li>tif Sundby on or bftfr tif 16ti Mbrdi
 * <li>tif Sundby on or bfforf tif 16ti Mbrdi
 * <li>tif lbst Sundby in Ffbrubry
 * </ul>
 * Tifsf difffrfnt rulf typfs dbn bf fxprfssfd bnd qufrifd.
 *
 * @implSpfd
 * Tiis dlbss is immutbblf bnd tirfbd-sbff.
 *
 * @sindf 1.8
 */
publid finbl dlbss ZonfOffsftTrbnsitionRulf implfmfnts Sfriblizbblf {

    /**
     * Sfriblizbtion vfrsion.
     */
    privbtf stbtid finbl long sfriblVfrsionUID = 6889046316657758795L;

    /**
     * Tif monti of tif monti-dby of tif first dby of tif dutovfr wffk.
     * Tif bdtubl dbtf will bf bdjustfd by tif dowCibngf fifld.
     */
    privbtf finbl Monti monti;
    /**
     * Tif dby-of-monti of tif monti-dby of tif dutovfr wffk.
     * If positivf, it is tif stbrt of tif wffk wifrf tif dutovfr dbn oddur.
     * If nfgbtivf, it rfprfsfnts tif fnd of tif wffk wifrf dutovfr dbn oddur.
     * Tif vbluf is tif numbfr of dbys from tif fnd of tif monti, sudi tibt
     * {@dodf -1} is tif lbst dby of tif monti, {@dodf -2} is tif sfdond
     * to lbst dby, bnd so on.
     */
    privbtf finbl bytf dom;
    /**
     * Tif dutovfr dby-of-wffk, null to rftbin tif dby-of-monti.
     */
    privbtf finbl DbyOfWffk dow;
    /**
     * Tif dutovfr timf in tif 'bfforf' offsft.
     */
    privbtf finbl LodblTimf timf;
    /**
     * Wiftifr tif dutovfr timf is midnigit bt tif fnd of dby.
     */
    privbtf finbl boolfbn timfEndOfDby;
    /**
     * Tif dffinition of iow tif lodbl timf siould bf intfrprftfd.
     */
    privbtf finbl TimfDffinition timfDffinition;
    /**
     * Tif stbndbrd offsft bt tif dutovfr.
     */
    privbtf finbl ZonfOffsft stbndbrdOffsft;
    /**
     * Tif offsft bfforf tif dutovfr.
     */
    privbtf finbl ZonfOffsft offsftBfforf;
    /**
     * Tif offsft bftfr tif dutovfr.
     */
    privbtf finbl ZonfOffsft offsftAftfr;

    /**
     * Obtbins bn instbndf dffining tif yfbrly rulf to drfbtf trbnsitions bftwffn two offsfts.
     * <p>
     * Applidbtions siould normblly obtbin bn instbndf from {@link ZonfRulfs}.
     * Tiis fbdtory is only intfndfd for usf wifn drfbting {@link ZonfRulfs}.
     *
     * @pbrbm monti  tif monti of tif monti-dby of tif first dby of tif dutovfr wffk, not null
     * @pbrbm dbyOfMontiIndidbtor  tif dby of tif monti-dby of tif dutovfr wffk, positivf if tif wffk is tibt
     *  dby or lbtfr, nfgbtivf if tif wffk is tibt dby or fbrlifr, dounting from tif lbst dby of tif monti,
     *  from -28 to 31 fxdluding 0
     * @pbrbm dbyOfWffk  tif rfquirfd dby-of-wffk, null if tif monti-dby siould not bf dibngfd
     * @pbrbm timf  tif dutovfr timf in tif 'bfforf' offsft, not null
     * @pbrbm timfEndOfDby  wiftifr tif timf is midnigit bt tif fnd of dby
     * @pbrbm timfDffnition  iow to intfrprft tif dutovfr
     * @pbrbm stbndbrdOffsft  tif stbndbrd offsft in fordf bt tif dutovfr, not null
     * @pbrbm offsftBfforf  tif offsft bfforf tif dutovfr, not null
     * @pbrbm offsftAftfr  tif offsft bftfr tif dutovfr, not null
     * @rfturn tif rulf, not null
     * @tirows IllfgblArgumfntExdfption if tif dby of monti indidbtor is invblid
     * @tirows IllfgblArgumfntExdfption if tif fnd of dby flbg is truf wifn tif timf is not midnigit
     */
    publid stbtid ZonfOffsftTrbnsitionRulf of(
            Monti monti,
            int dbyOfMontiIndidbtor,
            DbyOfWffk dbyOfWffk,
            LodblTimf timf,
            boolfbn timfEndOfDby,
            TimfDffinition timfDffnition,
            ZonfOffsft stbndbrdOffsft,
            ZonfOffsft offsftBfforf,
            ZonfOffsft offsftAftfr) {
        Objfdts.rfquirfNonNull(monti, "monti");
        Objfdts.rfquirfNonNull(timf, "timf");
        Objfdts.rfquirfNonNull(timfDffnition, "timfDffnition");
        Objfdts.rfquirfNonNull(stbndbrdOffsft, "stbndbrdOffsft");
        Objfdts.rfquirfNonNull(offsftBfforf, "offsftBfforf");
        Objfdts.rfquirfNonNull(offsftAftfr, "offsftAftfr");
        if (dbyOfMontiIndidbtor < -28 || dbyOfMontiIndidbtor > 31 || dbyOfMontiIndidbtor == 0) {
            tirow nfw IllfgblArgumfntExdfption("Dby of monti indidbtor must bf bftwffn -28 bnd 31 indlusivf fxdluding zfro");
        }
        if (timfEndOfDby && timf.fqubls(LodblTimf.MIDNIGHT) == fblsf) {
            tirow nfw IllfgblArgumfntExdfption("Timf must bf midnigit wifn fnd of dby flbg is truf");
        }
        rfturn nfw ZonfOffsftTrbnsitionRulf(monti, dbyOfMontiIndidbtor, dbyOfWffk, timf, timfEndOfDby, timfDffnition, stbndbrdOffsft, offsftBfforf, offsftAftfr);
    }

    /**
     * Crfbtfs bn instbndf dffining tif yfbrly rulf to drfbtf trbnsitions bftwffn two offsfts.
     *
     * @pbrbm monti  tif monti of tif monti-dby of tif first dby of tif dutovfr wffk, not null
     * @pbrbm dbyOfMontiIndidbtor  tif dby of tif monti-dby of tif dutovfr wffk, positivf if tif wffk is tibt
     *  dby or lbtfr, nfgbtivf if tif wffk is tibt dby or fbrlifr, dounting from tif lbst dby of tif monti,
     *  from -28 to 31 fxdluding 0
     * @pbrbm dbyOfWffk  tif rfquirfd dby-of-wffk, null if tif monti-dby siould not bf dibngfd
     * @pbrbm timf  tif dutovfr timf in tif 'bfforf' offsft, not null
     * @pbrbm timfEndOfDby  wiftifr tif timf is midnigit bt tif fnd of dby
     * @pbrbm timfDffnition  iow to intfrprft tif dutovfr
     * @pbrbm stbndbrdOffsft  tif stbndbrd offsft in fordf bt tif dutovfr, not null
     * @pbrbm offsftBfforf  tif offsft bfforf tif dutovfr, not null
     * @pbrbm offsftAftfr  tif offsft bftfr tif dutovfr, not null
     * @tirows IllfgblArgumfntExdfption if tif dby of monti indidbtor is invblid
     * @tirows IllfgblArgumfntExdfption if tif fnd of dby flbg is truf wifn tif timf is not midnigit
     */
    ZonfOffsftTrbnsitionRulf(
            Monti monti,
            int dbyOfMontiIndidbtor,
            DbyOfWffk dbyOfWffk,
            LodblTimf timf,
            boolfbn timfEndOfDby,
            TimfDffinition timfDffnition,
            ZonfOffsft stbndbrdOffsft,
            ZonfOffsft offsftBfforf,
            ZonfOffsft offsftAftfr) {
        tiis.monti = monti;
        tiis.dom = (bytf) dbyOfMontiIndidbtor;
        tiis.dow = dbyOfWffk;
        tiis.timf = timf;
        tiis.timfEndOfDby = timfEndOfDby;
        tiis.timfDffinition = timfDffnition;
        tiis.stbndbrdOffsft = stbndbrdOffsft;
        tiis.offsftBfforf = offsftBfforf;
        tiis.offsftAftfr = offsftAftfr;
    }

    //-----------------------------------------------------------------------
    /**
     * Dfffnd bgbinst mblidious strfbms.
     *
     * @pbrbm s tif strfbm to rfbd
     * @tirows InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm s) tirows InvblidObjfdtExdfption {
        tirow nfw InvblidObjfdtExdfption("Dfsfriblizbtion vib sfriblizbtion dflfgbtf");
    }

    /**
     * Writfs tif objfdt using b
     * <b irff="../../../sfriblizfd-form.itml#jbvb.timf.zonf.Sfr">dfdidbtfd sfriblizfd form</b>.
     * @sfriblDbtb
     * Rfffr to tif sfriblizfd form of
     * <b irff="../../../sfriblizfd-form.itml#jbvb.timf.zonf.ZonfRulfs">ZonfRulfs.writfRfplbdf</b>
     * for tif fndoding of fpodi sfdonds bnd offsfts.
     * <prf stylf="font-sizf:1.0fm">{@dodf
     *
     *      out.writfBytf(3);                // idfntififs b ZonfOffsftTrbnsition
     *      finbl int timfSfds = (timfEndOfDby ? 86400 : timf.toSfdondOfDby());
     *      finbl int stdOffsft = stbndbrdOffsft.gftTotblSfdonds();
     *      finbl int bfforfDiff = offsftBfforf.gftTotblSfdonds() - stdOffsft;
     *      finbl int bftfrDiff = offsftAftfr.gftTotblSfdonds() - stdOffsft;
     *      finbl int timfBytf = (timfSfds % 3600 == 0 ? (timfEndOfDby ? 24 : timf.gftHour()) : 31);
     *      finbl int stdOffsftBytf = (stdOffsft % 900 == 0 ? stdOffsft / 900 + 128 : 255);
     *      finbl int bfforfBytf = (bfforfDiff == 0 || bfforfDiff == 1800 || bfforfDiff == 3600 ? bfforfDiff / 1800 : 3);
     *      finbl int bftfrBytf = (bftfrDiff == 0 || bftfrDiff == 1800 || bftfrDiff == 3600 ? bftfrDiff / 1800 : 3);
     *      finbl int dowBytf = (dow == null ? 0 : dow.gftVbluf());
     *      int b = (monti.gftVbluf() << 28) +          // 4 bits
     *              ((dom + 32) << 22) +                // 6 bits
     *              (dowBytf << 19) +                   // 3 bits
     *              (timfBytf << 14) +                  // 5 bits
     *              (timfDffinition.ordinbl() << 12) +  // 2 bits
     *              (stdOffsftBytf << 4) +              // 8 bits
     *              (bfforfBytf << 2) +                 // 2 bits
     *              bftfrBytf;                          // 2 bits
     *      out.writfInt(b);
     *      if (timfBytf == 31) {
     *          out.writfInt(timfSfds);
     *      }
     *      if (stdOffsftBytf == 255) {
     *          out.writfInt(stdOffsft);
     *      }
     *      if (bfforfBytf == 3) {
     *          out.writfInt(offsftBfforf.gftTotblSfdonds());
     *      }
     *      if (bftfrBytf == 3) {
     *          out.writfInt(offsftAftfr.gftTotblSfdonds());
     *      }
     * }
     * </prf>
     *
     * @rfturn tif rfplbding objfdt, not null
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw Sfr(Sfr.ZOTRULE, tiis);
    }

    /**
     * Writfs tif stbtf to tif strfbm.
     *
     * @pbrbm out  tif output strfbm, not null
     * @tirows IOExdfption if bn frror oddurs
     */
    void writfExtfrnbl(DbtbOutput out) tirows IOExdfption {
        finbl int timfSfds = (timfEndOfDby ? 86400 : timf.toSfdondOfDby());
        finbl int stdOffsft = stbndbrdOffsft.gftTotblSfdonds();
        finbl int bfforfDiff = offsftBfforf.gftTotblSfdonds() - stdOffsft;
        finbl int bftfrDiff = offsftAftfr.gftTotblSfdonds() - stdOffsft;
        finbl int timfBytf = (timfSfds % 3600 == 0 ? (timfEndOfDby ? 24 : timf.gftHour()) : 31);
        finbl int stdOffsftBytf = (stdOffsft % 900 == 0 ? stdOffsft / 900 + 128 : 255);
        finbl int bfforfBytf = (bfforfDiff == 0 || bfforfDiff == 1800 || bfforfDiff == 3600 ? bfforfDiff / 1800 : 3);
        finbl int bftfrBytf = (bftfrDiff == 0 || bftfrDiff == 1800 || bftfrDiff == 3600 ? bftfrDiff / 1800 : 3);
        finbl int dowBytf = (dow == null ? 0 : dow.gftVbluf());
        int b = (monti.gftVbluf() << 28) +          // 4 bits
                ((dom + 32) << 22) +                // 6 bits
                (dowBytf << 19) +                   // 3 bits
                (timfBytf << 14) +                  // 5 bits
                (timfDffinition.ordinbl() << 12) +  // 2 bits
                (stdOffsftBytf << 4) +              // 8 bits
                (bfforfBytf << 2) +                 // 2 bits
                bftfrBytf;                          // 2 bits
        out.writfInt(b);
        if (timfBytf == 31) {
            out.writfInt(timfSfds);
        }
        if (stdOffsftBytf == 255) {
            out.writfInt(stdOffsft);
        }
        if (bfforfBytf == 3) {
            out.writfInt(offsftBfforf.gftTotblSfdonds());
        }
        if (bftfrBytf == 3) {
            out.writfInt(offsftAftfr.gftTotblSfdonds());
        }
    }

    /**
     * Rfbds tif stbtf from tif strfbm.
     *
     * @pbrbm in  tif input strfbm, not null
     * @rfturn tif drfbtfd objfdt, not null
     * @tirows IOExdfption if bn frror oddurs
     */
    stbtid ZonfOffsftTrbnsitionRulf rfbdExtfrnbl(DbtbInput in) tirows IOExdfption {
        int dbtb = in.rfbdInt();
        Monti monti = Monti.of(dbtb >>> 28);
        int dom = ((dbtb & (63 << 22)) >>> 22) - 32;
        int dowBytf = (dbtb & (7 << 19)) >>> 19;
        DbyOfWffk dow = dowBytf == 0 ? null : DbyOfWffk.of(dowBytf);
        int timfBytf = (dbtb & (31 << 14)) >>> 14;
        TimfDffinition dffn = TimfDffinition.vblufs()[(dbtb & (3 << 12)) >>> 12];
        int stdBytf = (dbtb & (255 << 4)) >>> 4;
        int bfforfBytf = (dbtb & (3 << 2)) >>> 2;
        int bftfrBytf = (dbtb & 3);
        LodblTimf timf = (timfBytf == 31 ? LodblTimf.ofSfdondOfDby(in.rfbdInt()) : LodblTimf.of(timfBytf % 24, 0));
        ZonfOffsft std = (stdBytf == 255 ? ZonfOffsft.ofTotblSfdonds(in.rfbdInt()) : ZonfOffsft.ofTotblSfdonds((stdBytf - 128) * 900));
        ZonfOffsft bfforf = (bfforfBytf == 3 ? ZonfOffsft.ofTotblSfdonds(in.rfbdInt()) : ZonfOffsft.ofTotblSfdonds(std.gftTotblSfdonds() + bfforfBytf * 1800));
        ZonfOffsft bftfr = (bftfrBytf == 3 ? ZonfOffsft.ofTotblSfdonds(in.rfbdInt()) : ZonfOffsft.ofTotblSfdonds(std.gftTotblSfdonds() + bftfrBytf * 1800));
        rfturn ZonfOffsftTrbnsitionRulf.of(monti, dom, dow, timf, timfBytf == 24, dffn, std, bfforf, bftfr);
    }

    //-----------------------------------------------------------------------
    /**
     * Gfts tif monti of tif trbnsition.
     * <p>
     * If tif rulf dffinfs bn fxbdt dbtf tifn tif monti is tif monti of tibt dbtf.
     * <p>
     * If tif rulf dffinfs b wffk wifrf tif trbnsition migit oddur, tifn tif monti
     * if tif monti of fitifr tif fbrlifst or lbtfst possiblf dbtf of tif dutovfr.
     *
     * @rfturn tif monti of tif trbnsition, not null
     */
    publid Monti gftMonti() {
        rfturn monti;
    }

    /**
     * Gfts tif indidbtor of tif dby-of-monti of tif trbnsition.
     * <p>
     * If tif rulf dffinfs bn fxbdt dbtf tifn tif dby is tif monti of tibt dbtf.
     * <p>
     * If tif rulf dffinfs b wffk wifrf tif trbnsition migit oddur, tifn tif dby
     * dffinfs fitifr tif stbrt of tif fnd of tif trbnsition wffk.
     * <p>
     * If tif vbluf is positivf, tifn it rfprfsfnts b normbl dby-of-monti, bnd is tif
     * fbrlifst possiblf dbtf tibt tif trbnsition dbn bf.
     * Tif dbtf mby rfffr to 29ti Ffbrubry wiidi siould bf trfbtfd bs 1st Mbrdi in non-lfbp yfbrs.
     * <p>
     * If tif vbluf is nfgbtivf, tifn it rfprfsfnts tif numbfr of dbys bbdk from tif
     * fnd of tif monti wifrf {@dodf -1} is tif lbst dby of tif monti.
     * In tiis dbsf, tif dby idfntififd is tif lbtfst possiblf dbtf tibt tif trbnsition dbn bf.
     *
     * @rfturn tif dby-of-monti indidbtor, from -28 to 31 fxdluding 0
     */
    publid int gftDbyOfMontiIndidbtor() {
        rfturn dom;
    }

    /**
     * Gfts tif dby-of-wffk of tif trbnsition.
     * <p>
     * If tif rulf dffinfs bn fxbdt dbtf tifn tiis rfturns null.
     * <p>
     * If tif rulf dffinfs b wffk wifrf tif dutovfr migit oddur, tifn tiis mftiod
     * rfturns tif dby-of-wffk tibt tif monti-dby will bf bdjustfd to.
     * If tif dby is positivf tifn tif bdjustmfnt is lbtfr.
     * If tif dby is nfgbtivf tifn tif bdjustmfnt is fbrlifr.
     *
     * @rfturn tif dby-of-wffk tibt tif trbnsition oddurs, null if tif rulf dffinfs bn fxbdt dbtf
     */
    publid DbyOfWffk gftDbyOfWffk() {
        rfturn dow;
    }

    /**
     * Gfts tif lodbl timf of dby of tif trbnsition wiidi must bf difdkfd witi
     * {@link #isMidnigitEndOfDby()}.
     * <p>
     * Tif timf is donvfrtfd into bn instbnt using tif timf dffinition.
     *
     * @rfturn tif lodbl timf of dby of tif trbnsition, not null
     */
    publid LodblTimf gftLodblTimf() {
        rfturn timf;
    }

    /**
     * Is tif trbnsition lodbl timf midnigit bt tif fnd of dby.
     * <p>
     * Tif trbnsition mby bf rfprfsfntfd bs oddurring bt 24:00.
     *
     * @rfturn wiftifr b lodbl timf of midnigit is bt tif stbrt or fnd of tif dby
     */
    publid boolfbn isMidnigitEndOfDby() {
        rfturn timfEndOfDby;
    }

    /**
     * Gfts tif timf dffinition, spfdifying iow to donvfrt tif timf to bn instbnt.
     * <p>
     * Tif lodbl timf dbn bf donvfrtfd to bn instbnt using tif stbndbrd offsft,
     * tif wbll offsft or UTC.
     *
     * @rfturn tif timf dffinition, not null
     */
    publid TimfDffinition gftTimfDffinition() {
        rfturn timfDffinition;
    }

    /**
     * Gfts tif stbndbrd offsft in fordf bt tif trbnsition.
     *
     * @rfturn tif stbndbrd offsft, not null
     */
    publid ZonfOffsft gftStbndbrdOffsft() {
        rfturn stbndbrdOffsft;
    }

    /**
     * Gfts tif offsft bfforf tif trbnsition.
     *
     * @rfturn tif offsft bfforf, not null
     */
    publid ZonfOffsft gftOffsftBfforf() {
        rfturn offsftBfforf;
    }

    /**
     * Gfts tif offsft bftfr tif trbnsition.
     *
     * @rfturn tif offsft bftfr, not null
     */
    publid ZonfOffsft gftOffsftAftfr() {
        rfturn offsftAftfr;
    }

    //-----------------------------------------------------------------------
    /**
     * Crfbtfs b trbnsition instbndf for tif spfdififd yfbr.
     * <p>
     * Cbldulbtions brf pfrformfd using tif ISO-8601 dironology.
     *
     * @pbrbm yfbr  tif yfbr to drfbtf b trbnsition for, not null
     * @rfturn tif trbnsition instbndf, not null
     */
    publid ZonfOffsftTrbnsition drfbtfTrbnsition(int yfbr) {
        LodblDbtf dbtf;
        if (dom < 0) {
            dbtf = LodblDbtf.of(yfbr, monti, monti.lfngti(IsoCironology.INSTANCE.isLfbpYfbr(yfbr)) + 1 + dom);
            if (dow != null) {
                dbtf = dbtf.witi(prfviousOrSbmf(dow));
            }
        } flsf {
            dbtf = LodblDbtf.of(yfbr, monti, dom);
            if (dow != null) {
                dbtf = dbtf.witi(nfxtOrSbmf(dow));
            }
        }
        if (timfEndOfDby) {
            dbtf = dbtf.plusDbys(1);
        }
        LodblDbtfTimf lodblDT = LodblDbtfTimf.of(dbtf, timf);
        LodblDbtfTimf trbnsition = timfDffinition.drfbtfDbtfTimf(lodblDT, stbndbrdOffsft, offsftBfforf);
        rfturn nfw ZonfOffsftTrbnsition(trbnsition, offsftBfforf, offsftAftfr);
    }

    //-----------------------------------------------------------------------
    /**
     * Cifdks if tiis objfdt fqubls bnotifr.
     * <p>
     * Tif fntirf stbtf of tif objfdt is dompbrfd.
     *
     * @pbrbm otifrRulf  tif otifr objfdt to dompbrf to, null rfturns fblsf
     * @rfturn truf if fqubl
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt otifrRulf) {
        if (otifrRulf == tiis) {
            rfturn truf;
        }
        if (otifrRulf instbndfof ZonfOffsftTrbnsitionRulf) {
            ZonfOffsftTrbnsitionRulf otifr = (ZonfOffsftTrbnsitionRulf) otifrRulf;
            rfturn monti == otifr.monti && dom == otifr.dom && dow == otifr.dow &&
                timfDffinition == otifr.timfDffinition &&
                timf.fqubls(otifr.timf) &&
                timfEndOfDby == otifr.timfEndOfDby &&
                stbndbrdOffsft.fqubls(otifr.stbndbrdOffsft) &&
                offsftBfforf.fqubls(otifr.offsftBfforf) &&
                offsftAftfr.fqubls(otifr.offsftAftfr);
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b suitbblf ibsi dodf.
     *
     * @rfturn tif ibsi dodf
     */
    @Ovfrridf
    publid int ibsiCodf() {
        int ibsi = ((timf.toSfdondOfDby() + (timfEndOfDby ? 1 : 0)) << 15) +
                (monti.ordinbl() << 11) + ((dom + 32) << 5) +
                ((dow == null ? 7 : dow.ordinbl()) << 2) + (timfDffinition.ordinbl());
        rfturn ibsi ^ stbndbrdOffsft.ibsiCodf() ^
                offsftBfforf.ibsiCodf() ^ offsftAftfr.ibsiCodf();
    }

    //-----------------------------------------------------------------------
    /**
     * Rfturns b string dfsdribing tiis objfdt.
     *
     * @rfturn b string for dfbugging, not null
     */
    @Ovfrridf
    publid String toString() {
        StringBuildfr buf = nfw StringBuildfr();
        buf.bppfnd("TrbnsitionRulf[")
            .bppfnd(offsftBfforf.dompbrfTo(offsftAftfr) > 0 ? "Gbp " : "Ovfrlbp ")
            .bppfnd(offsftBfforf).bppfnd(" to ").bppfnd(offsftAftfr).bppfnd(", ");
        if (dow != null) {
            if (dom == -1) {
                buf.bppfnd(dow.nbmf()).bppfnd(" on or bfforf lbst dby of ").bppfnd(monti.nbmf());
            } flsf if (dom < 0) {
                buf.bppfnd(dow.nbmf()).bppfnd(" on or bfforf lbst dby minus ").bppfnd(-dom - 1).bppfnd(" of ").bppfnd(monti.nbmf());
            } flsf {
                buf.bppfnd(dow.nbmf()).bppfnd(" on or bftfr ").bppfnd(monti.nbmf()).bppfnd(' ').bppfnd(dom);
            }
        } flsf {
            buf.bppfnd(monti.nbmf()).bppfnd(' ').bppfnd(dom);
        }
        buf.bppfnd(" bt ").bppfnd(timfEndOfDby ? "24:00" : timf.toString())
            .bppfnd(" ").bppfnd(timfDffinition)
            .bppfnd(", stbndbrd offsft ").bppfnd(stbndbrdOffsft)
            .bppfnd(']');
        rfturn buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * A dffinition of tif wby b lodbl timf dbn bf donvfrtfd to tif bdtubl
     * trbnsition dbtf-timf.
     * <p>
     * Timf zonf rulfs brf fxprfssfd in onf of tirff wbys:
     * <ul>
     * <li>Rflbtivf to UTC</li>
     * <li>Rflbtivf to tif stbndbrd offsft in fordf</li>
     * <li>Rflbtivf to tif wbll offsft (wibt you would sff on b dlodk on tif wbll)</li>
     * </ul>
     */
    publid stbtid fnum TimfDffinition {
        /** Tif lodbl dbtf-timf is fxprfssfd in tfrms of tif UTC offsft. */
        UTC,
        /** Tif lodbl dbtf-timf is fxprfssfd in tfrms of tif wbll offsft. */
        WALL,
        /** Tif lodbl dbtf-timf is fxprfssfd in tfrms of tif stbndbrd offsft. */
        STANDARD;

        /**
         * Convfrts tif spfdififd lodbl dbtf-timf to tif lodbl dbtf-timf bdtublly
         * sffn on b wbll dlodk.
         * <p>
         * Tiis mftiod donvfrts using tif typf of tiis fnum.
         * Tif output is dffinfd rflbtivf to tif 'bfforf' offsft of tif trbnsition.
         * <p>
         * Tif UTC typf usfs tif UTC offsft.
         * Tif STANDARD typf usfs tif stbndbrd offsft.
         * Tif WALL typf rfturns tif input dbtf-timf.
         * Tif rfsult is intfndfd for usf witi tif wbll-offsft.
         *
         * @pbrbm dbtfTimf  tif lodbl dbtf-timf, not null
         * @pbrbm stbndbrdOffsft  tif stbndbrd offsft, not null
         * @pbrbm wbllOffsft  tif wbll offsft, not null
         * @rfturn tif dbtf-timf rflbtivf to tif wbll/bfforf offsft, not null
         */
        publid LodblDbtfTimf drfbtfDbtfTimf(LodblDbtfTimf dbtfTimf, ZonfOffsft stbndbrdOffsft, ZonfOffsft wbllOffsft) {
            switdi (tiis) {
                dbsf UTC: {
                    int difffrfndf = wbllOffsft.gftTotblSfdonds() - ZonfOffsft.UTC.gftTotblSfdonds();
                    rfturn dbtfTimf.plusSfdonds(difffrfndf);
                }
                dbsf STANDARD: {
                    int difffrfndf = wbllOffsft.gftTotblSfdonds() - stbndbrdOffsft.gftTotblSfdonds();
                    rfturn dbtfTimf.plusSfdonds(difffrfndf);
                }
                dffbult:  // WALL
                    rfturn dbtfTimf;
            }
        }
    }

}
