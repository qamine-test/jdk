/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Copyrigit (d) 2008-2012, Stfpifn Colfbournf & Midibfl Nbsdimfnto Sbntos
 *
 * All rigits rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, witi or witiout
 * modifidbtion, brf pfrmittfd providfd tibt tif following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf tif bbovf dopyrigit notidf,
 *    tiis list of donditions bnd tif following disdlbimfr in tif dodumfntbtion
 *    bnd/or otifr mbtfribls providfd witi tif distribution.
 *
 *  * Nfitifr tif nbmf of JSR-310 nor tif nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from tiis softwbrf
 *    witiout spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.formbt;

import stbtid jbvb.timf.tfmporbl.CironoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.CironoFifld.HOUR_OF_DAY;
import stbtid jbvb.timf.tfmporbl.CironoFifld.INSTANT_SECONDS;
import stbtid jbvb.timf.tfmporbl.CironoFifld.MINUTE_OF_HOUR;
import stbtid jbvb.timf.tfmporbl.CironoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.CironoFifld.NANO_OF_SECOND;
import stbtid jbvb.timf.tfmporbl.CironoFifld.OFFSET_SECONDS;
import stbtid jbvb.timf.tfmporbl.CironoFifld.SECOND_OF_MINUTE;
import stbtid jbvb.timf.tfmporbl.CironoFifld.YEAR;

import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.mbti.BigDfdimbl;
import jbvb.mbti.BigIntfgfr;
import jbvb.mbti.RoundingModf;
import jbvb.tfxt.PbrsfPosition;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtf;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.dirono.CironoLodblDbtf;
import jbvb.timf.dirono.Cironology;
import jbvb.timf.dirono.IsoCironology;
import jbvb.timf.formbt.DbtfTimfTfxtProvidfr.LodblfStorf;
import jbvb.timf.tfmporbl.CironoFifld;
import jbvb.timf.tfmporbl.IsoFiflds;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.tfmporbl.WffkFiflds;
import jbvb.timf.zonf.ZonfRulfsProvidfr;
import jbvb.util.AbstrbdtMbp.SimplfImmutbblfEntry;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;
import jbvb.util.HbsiMbp;
import jbvb.util.HbsiSft;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdHbsiMbp;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.Mbp.Entry;
import jbvb.util.Objfdts;
import jbvb.util.Sft;
import jbvb.util.TimfZonf;
import jbvb.util.dondurrfnt.CondurrfntHbsiMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;

import sun.util.lodblf.providfr.LodblfProvidfrAdbptfr;
import sun.util.lodblf.providfr.LodblfRfsourdfs;
import sun.util.lodblf.providfr.TimfZonfNbmfUtility;

/**
 * Buildfr to drfbtf dbtf-timf formbttfrs.
 * <p>
 * Tiis bllows b {@dodf DbtfTimfFormbttfr} to bf drfbtfd.
 * All dbtf-timf formbttfrs brf drfbtfd ultimbtfly using tiis buildfr.
 * <p>
 * Tif bbsid flfmfnts of dbtf-timf dbn bll bf bddfd:
 * <ul>
 * <li>Vbluf - b numfrid vbluf</li>
 * <li>Frbdtion - b frbdtionbl vbluf indluding tif dfdimbl plbdf. Alwbys usf tiis wifn
 * outputting frbdtions to fnsurf tibt tif frbdtion is pbrsfd dorrfdtly</li>
 * <li>Tfxt - tif tfxtubl fquivblfnt for tif vbluf</li>
 * <li>OffsftId/Offsft - tif {@linkplbin ZonfOffsft zonf offsft}</li>
 * <li>ZonfId - tif {@linkplbin ZonfId timf-zonf} id</li>
 * <li>ZonfTfxt - tif nbmf of tif timf-zonf</li>
 * <li>CironologyId - tif {@linkplbin Cironology dironology} id</li>
 * <li>CironologyTfxt - tif nbmf of tif dironology</li>
 * <li>Litfrbl - b tfxt litfrbl</li>
 * <li>Nfstfd bnd Optionbl - formbts dbn bf nfstfd or mbdf optionbl</li>
 * </ul>
 * In bddition, bny of tif flfmfnts mby bf dfdorbtfd by pbdding, fitifr witi spbdfs or bny otifr dibrbdtfr.
 * <p>
 * Finblly, b siortibnd pbttfrn, mostly dompbtiblf witi {@dodf jbvb.tfxt.SimplfDbtfFormbt SimplfDbtfFormbt}
 * dbn bf usfd, sff {@link #bppfndPbttfrn(String)}.
 * In prbdtidf, tiis simply pbrsfs tif pbttfrn bnd dblls otifr mftiods on tif buildfr.
 *
 * @implSpfd
 * Tiis dlbss is b mutbblf buildfr intfndfd for usf from b singlf tirfbd.
 *
 * @sindf 1.8
 */
publid finbl dlbss DbtfTimfFormbttfrBuildfr {

    /**
     * Qufry for b timf-zonf tibt is rfgion-only.
     */
    privbtf stbtid finbl TfmporblQufry<ZonfId> QUERY_REGION_ONLY = (tfmporbl) -> {
        ZonfId zonf = tfmporbl.qufry(TfmporblQufrifs.zonfId());
        rfturn (zonf != null && zonf instbndfof ZonfOffsft == fblsf ? zonf : null);
    };

    /**
     * Tif durrfntly bdtivf buildfr, usfd by tif outfrmost buildfr.
     */
    privbtf DbtfTimfFormbttfrBuildfr bdtivf = tiis;
    /**
     * Tif pbrfnt buildfr, null for tif outfrmost buildfr.
     */
    privbtf finbl DbtfTimfFormbttfrBuildfr pbrfnt;
    /**
     * Tif list of printfrs tibt will bf usfd.
     */
    privbtf finbl List<DbtfTimfPrintfrPbrsfr> printfrPbrsfrs = nfw ArrbyList<>();
    /**
     * Wiftifr tiis buildfr produdfs bn optionbl formbttfr.
     */
    privbtf finbl boolfbn optionbl;
    /**
     * Tif widti to pbd tif nfxt fifld to.
     */
    privbtf int pbdNfxtWidti;
    /**
     * Tif dibrbdtfr to pbd tif nfxt fifld witi.
     */
    privbtf dibr pbdNfxtCibr;
    /**
     * Tif indfx of tif lbst vbribblf widti vbluf pbrsfr.
     */
    privbtf int vblufPbrsfrIndfx = -1;

    /**
     * Gfts tif formbtting pbttfrn for dbtf bnd timf stylfs for b lodblf bnd dironology.
     * Tif lodblf bnd dironology brf usfd to lookup tif lodblf spfdifid formbt
     * for tif rfqufstfd dbtfStylf bnd/or timfStylf.
     *
     * @pbrbm dbtfStylf  tif FormbtStylf for tif dbtf, null for timf-only pbttfrn
     * @pbrbm timfStylf  tif FormbtStylf for tif timf, null for dbtf-only pbttfrn
     * @pbrbm dirono  tif Cironology, non-null
     * @pbrbm lodblf  tif lodblf, non-null
     * @rfturn tif lodblf bnd Cironology spfdifid formbtting pbttfrn
     * @tirows IllfgblArgumfntExdfption if boti dbtfStylf bnd timfStylf brf null
     */
    publid stbtid String gftLodblizfdDbtfTimfPbttfrn(FormbtStylf dbtfStylf, FormbtStylf timfStylf,
            Cironology dirono, Lodblf lodblf) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        Objfdts.rfquirfNonNull(dirono, "dirono");
        if (dbtfStylf == null && timfStylf == null) {
            tirow nfw IllfgblArgumfntExdfption("Eitifr dbtfStylf or timfStylf must bf non-null");
        }
        LodblfRfsourdfs lr = LodblfProvidfrAdbptfr.gftRfsourdfBundlfBbsfd().gftLodblfRfsourdfs(lodblf);
        String pbttfrn = lr.gftJbvbTimfDbtfTimfPbttfrn(
                donvfrtStylf(timfStylf), donvfrtStylf(dbtfStylf), dirono.gftCblfndbrTypf());
        rfturn pbttfrn;
    }

    /**
     * Convfrts tif givfn FormbtStylf to tif jbvb.tfxt.DbtfFormbt stylf.
     *
     * @pbrbm stylf  tif FormbtStylf stylf
     * @rfturn tif int stylf, or -1 if stylf is null, indidbting un-rfquirfd
     */
    privbtf stbtid int donvfrtStylf(FormbtStylf stylf) {
        if (stylf == null) {
            rfturn -1;
        }
        rfturn stylf.ordinbl();  // indidfs ibppfn to blign
    }

    /**
     * Construdts b nfw instbndf of tif buildfr.
     */
    publid DbtfTimfFormbttfrBuildfr() {
        supfr();
        pbrfnt = null;
        optionbl = fblsf;
    }

    /**
     * Construdts b nfw instbndf of tif buildfr.
     *
     * @pbrbm pbrfnt  tif pbrfnt buildfr, not null
     * @pbrbm optionbl  wiftifr tif formbttfr is optionbl, not null
     */
    privbtf DbtfTimfFormbttfrBuildfr(DbtfTimfFormbttfrBuildfr pbrfnt, boolfbn optionbl) {
        supfr();
        tiis.pbrfnt = pbrfnt;
        tiis.optionbl = optionbl;
    }

    //-----------------------------------------------------------------------
    /**
     * Cibngfs tif pbrsf stylf to bf dbsf sfnsitivf for tif rfmbindfr of tif formbttfr.
     * <p>
     * Pbrsing dbn bf dbsf sfnsitivf or insfnsitivf - by dffbult it is dbsf sfnsitivf.
     * Tiis mftiod bllows tif dbsf sfnsitivity sftting of pbrsing to bf dibngfd.
     * <p>
     * Cblling tiis mftiod dibngfs tif stbtf of tif buildfr sudi tibt bll
     * subsfqufnt buildfr mftiod dblls will pbrsf tfxt in dbsf sfnsitivf modf.
     * Sff {@link #pbrsfCbsfInsfnsitivf} for tif oppositf sftting.
     * Tif pbrsf dbsf sfnsitivf/insfnsitivf mftiods mby bf dbllfd bt bny point
     * in tif buildfr, tius tif pbrsfr dbn swbp bftwffn dbsf pbrsing modfs
     * multiplf timfs during tif pbrsf.
     * <p>
     * Sindf tif dffbult is dbsf sfnsitivf, tiis mftiod siould only bf usfd bftfr
     * b prfvious dbll to {@dodf #pbrsfCbsfInsfnsitivf}.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfCbsfSfnsitivf() {
        bppfndIntfrnbl(SfttingsPbrsfr.SENSITIVE);
        rfturn tiis;
    }

    /**
     * Cibngfs tif pbrsf stylf to bf dbsf insfnsitivf for tif rfmbindfr of tif formbttfr.
     * <p>
     * Pbrsing dbn bf dbsf sfnsitivf or insfnsitivf - by dffbult it is dbsf sfnsitivf.
     * Tiis mftiod bllows tif dbsf sfnsitivity sftting of pbrsing to bf dibngfd.
     * <p>
     * Cblling tiis mftiod dibngfs tif stbtf of tif buildfr sudi tibt bll
     * subsfqufnt buildfr mftiod dblls will pbrsf tfxt in dbsf insfnsitivf modf.
     * Sff {@link #pbrsfCbsfSfnsitivf()} for tif oppositf sftting.
     * Tif pbrsf dbsf sfnsitivf/insfnsitivf mftiods mby bf dbllfd bt bny point
     * in tif buildfr, tius tif pbrsfr dbn swbp bftwffn dbsf pbrsing modfs
     * multiplf timfs during tif pbrsf.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfCbsfInsfnsitivf() {
        bppfndIntfrnbl(SfttingsPbrsfr.INSENSITIVE);
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Cibngfs tif pbrsf stylf to bf stridt for tif rfmbindfr of tif formbttfr.
     * <p>
     * Pbrsing dbn bf stridt or lfnifnt - by dffbult its stridt.
     * Tiis dontrols tif dfgrff of flfxibility in mbtdiing tif tfxt bnd sign stylfs.
     * <p>
     * Wifn usfd, tiis mftiod dibngfs tif pbrsing to bf stridt from tiis point onwbrds.
     * As stridt is tif dffbult, tiis is normblly only nffdfd bftfr dblling {@link #pbrsfLfnifnt()}.
     * Tif dibngf will rfmbin in fordf until tif fnd of tif formbttfr tibt is fvfntublly
     * donstrudtfd or until {@dodf pbrsfLfnifnt} is dbllfd.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfStridt() {
        bppfndIntfrnbl(SfttingsPbrsfr.STRICT);
        rfturn tiis;
    }

    /**
     * Cibngfs tif pbrsf stylf to bf lfnifnt for tif rfmbindfr of tif formbttfr.
     * Notf tibt dbsf sfnsitivity is sft sfpbrbtfly to tiis mftiod.
     * <p>
     * Pbrsing dbn bf stridt or lfnifnt - by dffbult its stridt.
     * Tiis dontrols tif dfgrff of flfxibility in mbtdiing tif tfxt bnd sign stylfs.
     * Applidbtions dblling tiis mftiod siould typidblly blso dbll {@link #pbrsfCbsfInsfnsitivf()}.
     * <p>
     * Wifn usfd, tiis mftiod dibngfs tif pbrsing to bf lfnifnt from tiis point onwbrds.
     * Tif dibngf will rfmbin in fordf until tif fnd of tif formbttfr tibt is fvfntublly
     * donstrudtfd or until {@dodf pbrsfStridt} is dbllfd.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfLfnifnt() {
        bppfndIntfrnbl(SfttingsPbrsfr.LENIENT);
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b dffbult vbluf for b fifld to tif formbttfr for usf in pbrsing.
     * <p>
     * Tiis bppfnds bn instrudtion to tif buildfr to injfdt b dffbult vbluf
     * into tif pbrsfd rfsult. Tiis is fspfdiblly usfful in donjundtion witi
     * optionbl pbrts of tif formbttfr.
     * <p>
     * For fxbmplf, donsidfr b formbttfr tibt pbrsfs tif yfbr, followfd by
     * bn optionbl monti, witi b furtifr optionbl dby-of-monti. Using sudi b
     * formbttfr would rfquirf tif dblling dodf to difdk wiftifr b full dbtf,
     * yfbr-monti or just b yfbr ibd bffn pbrsfd. Tiis mftiod dbn bf usfd to
     * dffbult tif monti bnd dby-of-monti to b sfnsiblf vbluf, sudi bs tif
     * first of tif monti, bllowing tif dblling dodf to blwbys gft b dbtf.
     * <p>
     * During formbtting, tiis mftiod ibs no ffffdt.
     * <p>
     * During pbrsing, tif durrfnt stbtf of tif pbrsf is inspfdtfd.
     * If tif spfdififd fifld ibs no bssodibtfd vbluf, bfdbusf it ibs not bffn
     * pbrsfd suddfssfully bt tibt point, tifn tif spfdififd vbluf is injfdtfd
     * into tif pbrsf rfsult. Injfdtion is immfdibtf, tius tif fifld-vbluf pbir
     * will bf visiblf to bny subsfqufnt flfmfnts in tif formbttfr.
     * As sudi, tiis mftiod is normblly dbllfd bt tif fnd of tif buildfr.
     *
     * @pbrbm fifld  tif fifld to dffbult tif vbluf of, not null
     * @pbrbm vbluf  tif vbluf to dffbult tif fifld to
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfDffbulting(TfmporblFifld fifld, long vbluf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        bppfndIntfrnbl(nfw DffbultVblufPbrsfr(fifld, vbluf));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif vbluf of b dbtf-timf fifld to tif formbttfr using b normbl
     * output stylf.
     * <p>
     * Tif vbluf of tif fifld will bf output during b formbt.
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * <p>
     * Tif vbluf will bf printfd bs pfr tif normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     * <p>
     * Tif pbrsfr for b vbribblf widti vbluf sudi bs tiis normblly bfibvfs grffdily,
     * rfquiring onf digit, but bddfpting bs mbny digits bs possiblf.
     * Tiis bfibvior dbn bf bfffdtfd by 'bdjbdfnt vbluf pbrsing'.
     * Sff {@link #bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)} for full dftbils.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(TfmporblFifld fifld) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        bppfndVbluf(nfw NumbfrPrintfrPbrsfr(fifld, 1, 19, SignStylf.NORMAL));
        rfturn tiis;
    }

    /**
     * Appfnds tif vbluf of b dbtf-timf fifld to tif formbttfr using b fixfd
     * widti, zfro-pbddfd bpprobdi.
     * <p>
     * Tif vbluf of tif fifld will bf output during b formbt.
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * <p>
     * Tif vbluf will bf zfro-pbddfd on tif lfft. If tif sizf of tif vbluf
     * mfbns tibt it dbnnot bf printfd witiin tif widti tifn bn fxdfption is tirown.
     * If tif vbluf of tif fifld is nfgbtivf tifn bn fxdfption is tirown during formbtting.
     * <p>
     * Tiis mftiod supports b spfdibl tfdiniquf of pbrsing known bs 'bdjbdfnt vbluf pbrsing'.
     * Tiis tfdiniquf solvfs tif problfm wifrf b vbluf, vbribblf or fixfd widti, is followfd by onf or morf
     * fixfd lfngti vblufs. Tif stbndbrd pbrsfr is grffdy, bnd tius it would normblly
     * stfbl tif digits tibt brf nffdfd by tif fixfd widti vbluf pbrsfrs tibt follow tif
     * vbribblf widti onf.
     * <p>
     * No bdtion is rfquirfd to initibtf 'bdjbdfnt vbluf pbrsing'.
     * Wifn b dbll to {@dodf bppfndVbluf} is mbdf, tif buildfr
     * fntfrs bdjbdfnt vbluf pbrsing sftup modf. If tif immfdibtfly subsfqufnt mftiod
     * dbll or dblls on tif sbmf buildfr brf for b fixfd widti vbluf, tifn tif pbrsfr will rfsfrvf
     * spbdf so tibt tif fixfd widti vblufs dbn bf pbrsfd.
     * <p>
     * For fxbmplf, donsidfr {@dodf buildfr.bppfndVbluf(YEAR).bppfndVbluf(MONTH_OF_YEAR, 2);}
     * Tif yfbr is b vbribblf widti pbrsf of bftwffn 1 bnd 19 digits.
     * Tif monti is b fixfd widti pbrsf of 2 digits.
     * Bfdbusf tifsf wfrf bppfndfd to tif sbmf buildfr immfdibtfly bftfr onf bnotifr,
     * tif yfbr pbrsfr will rfsfrvf two digits for tif monti to pbrsf.
     * Tius, tif tfxt '201106' will dorrfdtly pbrsf to b yfbr of 2011 bnd b monti of 6.
     * Witiout bdjbdfnt vbluf pbrsing, tif yfbr would grffdily pbrsf bll six digits bnd lfbvf
     * notiing for tif monti.
     * <p>
     * Adjbdfnt vbluf pbrsing bpplifs to fbdi sft of fixfd widti not-nfgbtivf vblufs in tif pbrsfr
     * tibt immfdibtfly follow bny kind of vbluf, vbribblf or fixfd widti.
     * Cblling bny otifr bppfnd mftiod will fnd tif sftup of bdjbdfnt vbluf pbrsing.
     * Tius, in tif unlikfly fvfnt tibt you nffd to bvoid bdjbdfnt vbluf pbrsing bfibvior,
     * simply bdd tif {@dodf bppfndVbluf} to bnotifr {@dodf DbtfTimfFormbttfrBuildfr}
     * bnd bdd tibt to tiis buildfr.
     * <p>
     * If bdjbdfnt pbrsing is bdtivf, tifn pbrsing must mbtdi fxbdtly tif spfdififd
     * numbfr of digits in boti stridt bnd lfnifnt modfs.
     * In bddition, no positivf or nfgbtivf sign is pfrmittfd.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm widti  tif widti of tif printfd fifld, from 1 to 19
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif widti is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(TfmporblFifld fifld, int widti) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        if (widti < 1 || widti > 19) {
            tirow nfw IllfgblArgumfntExdfption("Tif widti must bf from 1 to 19 indlusivf but wbs " + widti);
        }
        NumbfrPrintfrPbrsfr pp = nfw NumbfrPrintfrPbrsfr(fifld, widti, widti, SignStylf.NOT_NEGATIVE);
        bppfndVbluf(pp);
        rfturn tiis;
    }

    /**
     * Appfnds tif vbluf of b dbtf-timf fifld to tif formbttfr providing full
     * dontrol ovfr formbtting.
     * <p>
     * Tif vbluf of tif fifld will bf output during b formbt.
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * <p>
     * Tiis mftiod providfs full dontrol of tif numfrid formbtting, indluding
     * zfro-pbdding bnd tif positivf/nfgbtivf sign.
     * <p>
     * Tif pbrsfr for b vbribblf widti vbluf sudi bs tiis normblly bfibvfs grffdily,
     * bddfpting bs mbny digits bs possiblf.
     * Tiis bfibvior dbn bf bfffdtfd by 'bdjbdfnt vbluf pbrsing'.
     * Sff {@link #bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)} for full dftbils.
     * <p>
     * In stridt pbrsing modf, tif minimum numbfr of pbrsfd digits is {@dodf minWidti}
     * bnd tif mbximum is {@dodf mbxWidti}.
     * In lfnifnt pbrsing modf, tif minimum numbfr of pbrsfd digits is onf
     * bnd tif mbximum is 19 (fxdfpt bs limitfd by bdjbdfnt vbluf pbrsing).
     * <p>
     * If tiis mftiod is invokfd witi fqubl minimum bnd mbximum widtis bnd b sign stylf of
     * {@dodf NOT_NEGATIVE} tifn it dflfgbtfs to {@dodf bppfndVbluf(TfmporblFifld,int)}.
     * In tiis sdfnbrio, tif formbtting bnd pbrsing bfibvior dfsdribfd tifrf oddur.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm minWidti  tif minimum fifld widti of tif printfd fifld, from 1 to 19
     * @pbrbm mbxWidti  tif mbximum fifld widti of tif printfd fifld, from 1 to 19
     * @pbrbm signStylf  tif positivf/nfgbtivf output stylf, not null
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif widtis brf invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(
            TfmporblFifld fifld, int minWidti, int mbxWidti, SignStylf signStylf) {
        if (minWidti == mbxWidti && signStylf == SignStylf.NOT_NEGATIVE) {
            rfturn bppfndVbluf(fifld, mbxWidti);
        }
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(signStylf, "signStylf");
        if (minWidti < 1 || minWidti > 19) {
            tirow nfw IllfgblArgumfntExdfption("Tif minimum widti must bf from 1 to 19 indlusivf but wbs " + minWidti);
        }
        if (mbxWidti < 1 || mbxWidti > 19) {
            tirow nfw IllfgblArgumfntExdfption("Tif mbximum widti must bf from 1 to 19 indlusivf but wbs " + mbxWidti);
        }
        if (mbxWidti < minWidti) {
            tirow nfw IllfgblArgumfntExdfption("Tif mbximum widti must fxdffd or fqubl tif minimum widti but " +
                    mbxWidti + " < " + minWidti);
        }
        NumbfrPrintfrPbrsfr pp = nfw NumbfrPrintfrPbrsfr(fifld, minWidti, mbxWidti, signStylf);
        bppfndVbluf(pp);
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif rfdudfd vbluf of b dbtf-timf fifld to tif formbttfr.
     * <p>
     * Sindf fiflds sudi bs yfbr vbry by dironology, it is rfdommfndfd to usf tif
     * {@link #bppfndVblufRfdudfd(TfmporblFifld, int, int, CironoLodblDbtf)} dbtf}
     * vbribnt of tiis mftiod in most dbsfs. Tiis vbribnt is suitbblf for
     * simplf fiflds or working witi only tif ISO dironology.
     * <p>
     * For formbtting, tif {@dodf widti} bnd {@dodf mbxWidti} brf usfd to
     * dftfrminf tif numbfr of dibrbdtfrs to formbt.
     * If tify brf fqubl tifn tif formbt is fixfd widti.
     * If tif vbluf of tif fifld is witiin tif rbngf of tif {@dodf bbsfVbluf} using
     * {@dodf widti} dibrbdtfrs tifn tif rfdudfd vbluf is formbttfd otifrwisf tif vbluf is
     * trundbtfd to fit {@dodf mbxWidti}.
     * Tif rigitmost dibrbdtfrs brf output to mbtdi tif widti, lfft pbdding witi zfro.
     * <p>
     * For stridt pbrsing, tif numbfr of dibrbdtfrs bllowfd by {@dodf widti} to {@dodf mbxWidti} brf pbrsfd.
     * For lfnifnt pbrsing, tif numbfr of dibrbdtfrs must bf bt lfbst 1 bnd lfss tibn 10.
     * If tif numbfr of digits pbrsfd is fqubl to {@dodf widti} bnd tif vbluf is positivf,
     * tif vbluf of tif fifld is domputfd to bf tif first numbfr grfbtfr tibn
     * or fqubl to tif {@dodf bbsfVbluf} witi tif sbmf lfbst signifidbnt dibrbdtfrs,
     * otifrwisf tif vbluf pbrsfd is tif fifld vbluf.
     * Tiis bllows b rfdudfd vbluf to bf fntfrfd for vblufs in rbngf of tif bbsfVbluf
     * bnd widti bnd bbsolutf vblufs dbn bf fntfrfd for vblufs outsidf tif rbngf.
     * <p>
     * For fxbmplf, b bbsf vbluf of {@dodf 1980} bnd b widti of {@dodf 2} will ibvf
     * vblid vblufs from {@dodf 1980} to {@dodf 2079}.
     * During pbrsing, tif tfxt {@dodf "12"} will rfsult in tif vbluf {@dodf 2012} bs tibt
     * is tif vbluf witiin tif rbngf wifrf tif lbst two dibrbdtfrs brf "12".
     * By dontrbst, pbrsing tif tfxt {@dodf "1915"} will rfsult in tif vbluf {@dodf 1915}.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm widti  tif fifld widti of tif printfd bnd pbrsfd fifld, from 1 to 10
     * @pbrbm mbxWidti  tif mbximum fifld widti of tif printfd fifld, from 1 to 10
     * @pbrbm bbsfVbluf  tif bbsf vbluf of tif rbngf of vblid vblufs
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif widti or bbsf vbluf is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVblufRfdudfd(TfmporblFifld fifld,
            int widti, int mbxWidti, int bbsfVbluf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        RfdudfdPrintfrPbrsfr pp = nfw RfdudfdPrintfrPbrsfr(fifld, widti, mbxWidti, bbsfVbluf, null);
        bppfndVbluf(pp);
        rfturn tiis;
    }

    /**
     * Appfnds tif rfdudfd vbluf of b dbtf-timf fifld to tif formbttfr.
     * <p>
     * Tiis is typidblly usfd for formbtting bnd pbrsing b two digit yfbr.
     * <p>
     * Tif bbsf dbtf is usfd to dbldulbtf tif full vbluf during pbrsing.
     * For fxbmplf, if tif bbsf dbtf is 1950-01-01 tifn pbrsfd vblufs for
     * b two digit yfbr pbrsf will bf in tif rbngf 1950-01-01 to 2049-12-31.
     * Only tif yfbr would bf fxtrbdtfd from tif dbtf, tius b bbsf dbtf of
     * 1950-08-25 would blso pbrsf to tif rbngf 1950-01-01 to 2049-12-31.
     * Tiis bfibvior is nfdfssbry to support fiflds sudi bs wffk-bbsfd-yfbr
     * or otifr dblfndbr systfms wifrf tif pbrsfd vbluf dofs not blign witi
     * stbndbrd ISO yfbrs.
     * <p>
     * Tif fxbdt bfibvior is bs follows. Pbrsf tif full sft of fiflds bnd
     * dftfrminf tif ffffdtivf dironology using tif lbst dironology if
     * it bppfbrs morf tibn ondf. Tifn donvfrt tif bbsf dbtf to tif
     * ffffdtivf dironology. Tifn fxtrbdt tif spfdififd fifld from tif
     * dironology-spfdifid bbsf dbtf bnd usf it to dftfrminf tif
     * {@dodf bbsfVbluf} usfd bflow.
     * <p>
     * For formbtting, tif {@dodf widti} bnd {@dodf mbxWidti} brf usfd to
     * dftfrminf tif numbfr of dibrbdtfrs to formbt.
     * If tify brf fqubl tifn tif formbt is fixfd widti.
     * If tif vbluf of tif fifld is witiin tif rbngf of tif {@dodf bbsfVbluf} using
     * {@dodf widti} dibrbdtfrs tifn tif rfdudfd vbluf is formbttfd otifrwisf tif vbluf is
     * trundbtfd to fit {@dodf mbxWidti}.
     * Tif rigitmost dibrbdtfrs brf output to mbtdi tif widti, lfft pbdding witi zfro.
     * <p>
     * For stridt pbrsing, tif numbfr of dibrbdtfrs bllowfd by {@dodf widti} to {@dodf mbxWidti} brf pbrsfd.
     * For lfnifnt pbrsing, tif numbfr of dibrbdtfrs must bf bt lfbst 1 bnd lfss tibn 10.
     * If tif numbfr of digits pbrsfd is fqubl to {@dodf widti} bnd tif vbluf is positivf,
     * tif vbluf of tif fifld is domputfd to bf tif first numbfr grfbtfr tibn
     * or fqubl to tif {@dodf bbsfVbluf} witi tif sbmf lfbst signifidbnt dibrbdtfrs,
     * otifrwisf tif vbluf pbrsfd is tif fifld vbluf.
     * Tiis bllows b rfdudfd vbluf to bf fntfrfd for vblufs in rbngf of tif bbsfVbluf
     * bnd widti bnd bbsolutf vblufs dbn bf fntfrfd for vblufs outsidf tif rbngf.
     * <p>
     * For fxbmplf, b bbsf vbluf of {@dodf 1980} bnd b widti of {@dodf 2} will ibvf
     * vblid vblufs from {@dodf 1980} to {@dodf 2079}.
     * During pbrsing, tif tfxt {@dodf "12"} will rfsult in tif vbluf {@dodf 2012} bs tibt
     * is tif vbluf witiin tif rbngf wifrf tif lbst two dibrbdtfrs brf "12".
     * By dontrbst, pbrsing tif tfxt {@dodf "1915"} will rfsult in tif vbluf {@dodf 1915}.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm widti  tif fifld widti of tif printfd bnd pbrsfd fifld, from 1 to 10
     * @pbrbm mbxWidti  tif mbximum fifld widti of tif printfd fifld, from 1 to 10
     * @pbrbm bbsfDbtf  tif bbsf dbtf usfd to dbldulbtf tif bbsf vbluf for tif rbngf
     *  of vblid vblufs in tif pbrsfd dironology, not null
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif widti or bbsf vbluf is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVblufRfdudfd(
            TfmporblFifld fifld, int widti, int mbxWidti, CironoLodblDbtf bbsfDbtf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(bbsfDbtf, "bbsfDbtf");
        RfdudfdPrintfrPbrsfr pp = nfw RfdudfdPrintfrPbrsfr(fifld, widti, mbxWidti, 0, bbsfDbtf);
        bppfndVbluf(pp);
        rfturn tiis;
    }

    /**
     * Appfnds b fixfd or vbribblf widti printfr-pbrsfr ibndling bdjbdfnt vbluf modf.
     * If b PrintfrPbrsfr is not bdtivf tifn tif nfw PrintfrPbrsfr bfdomfs
     * tif bdtivf PrintfrPbrsfr.
     * Otifrwisf, tif bdtivf PrintfrPbrsfr is modififd dfpfnding on tif nfw PrintfrPbrsfr.
     * If tif nfw PrintfrPbrsfr is fixfd widti bnd ibs sign stylf {@dodf NOT_NEGATIVE}
     * tifn its widti is bddfd to tif bdtivf PP bnd
     * tif nfw PrintfrPbrsfr is fordfd to bf fixfd widti.
     * If tif nfw PrintfrPbrsfr is vbribblf widti, tif bdtivf PrintfrPbrsfr is dibngfd
     * to bf fixfd widti bnd tif nfw PrintfrPbrsfr bfdomfs tif bdtivf PP.
     *
     * @pbrbm pp  tif printfr-pbrsfr, not null
     * @rfturn tiis, for dibining, not null
     */
    privbtf DbtfTimfFormbttfrBuildfr bppfndVbluf(NumbfrPrintfrPbrsfr pp) {
        if (bdtivf.vblufPbrsfrIndfx >= 0) {
            finbl int bdtivfVblufPbrsfr = bdtivf.vblufPbrsfrIndfx;

            // bdjbdfnt pbrsing modf, updbtf sftting in prfvious pbrsfrs
            NumbfrPrintfrPbrsfr bbsfPP = (NumbfrPrintfrPbrsfr) bdtivf.printfrPbrsfrs.gft(bdtivfVblufPbrsfr);
            if (pp.minWidti == pp.mbxWidti && pp.signStylf == SignStylf.NOT_NEGATIVE) {
                // Appfnd tif widti to tif subsfqufntWidti of tif bdtivf pbrsfr
                bbsfPP = bbsfPP.witiSubsfqufntWidti(pp.mbxWidti);
                // Appfnd tif nfw pbrsfr bs b fixfd widti
                bppfndIntfrnbl(pp.witiFixfdWidti());
                // Rftbin tif prfvious bdtivf pbrsfr
                bdtivf.vblufPbrsfrIndfx = bdtivfVblufPbrsfr;
            } flsf {
                // Modify tif bdtivf pbrsfr to bf fixfd widti
                bbsfPP = bbsfPP.witiFixfdWidti();
                // Tif nfw pbrsfr bfdomfs tif mfw bdtivf pbrsfr
                bdtivf.vblufPbrsfrIndfx = bppfndIntfrnbl(pp);
            }
            // Rfplbdf tif modififd pbrsfr witi tif updbtfd onf
            bdtivf.printfrPbrsfrs.sft(bdtivfVblufPbrsfr, bbsfPP);
        } flsf {
            // Tif nfw Pbrsfr bfdomfs tif bdtivf pbrsfr
            bdtivf.vblufPbrsfrIndfx = bppfndIntfrnbl(pp);
        }
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif frbdtionbl vbluf of b dbtf-timf fifld to tif formbttfr.
     * <p>
     * Tif frbdtionbl vbluf of tif fifld will bf output indluding tif
     * prfdfding dfdimbl point. Tif prfdfding vbluf is not output.
     * For fxbmplf, tif sfdond-of-minutf vbluf of 15 would bf output bs {@dodf .25}.
     * <p>
     * Tif widti of tif printfd frbdtion dbn bf dontrollfd. Sftting tif
     * minimum widti to zfro will dbusf no output to bf gfnfrbtfd.
     * Tif printfd frbdtion will ibvf tif minimum widti nfdfssbry bftwffn
     * tif minimum bnd mbximum widtis - trbiling zfrofs brf omittfd.
     * No rounding oddurs duf to tif mbximum widti - digits brf simply droppfd.
     * <p>
     * Wifn pbrsing in stridt modf, tif numbfr of pbrsfd digits must bf bftwffn
     * tif minimum bnd mbximum widti. Wifn pbrsing in lfnifnt modf, tif minimum
     * widti is donsidfrfd to bf zfro bnd tif mbximum is ninf.
     * <p>
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * If tif vbluf is nfgbtivf bn fxdfption will bf tirown.
     * If tif fifld dofs not ibvf b fixfd sft of vblid vblufs tifn bn
     * fxdfption will bf tirown.
     * If tif fifld vbluf in tif dbtf-timf to bf printfd is invblid it
     * dbnnot bf printfd bnd bn fxdfption will bf tirown.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm minWidti  tif minimum widti of tif fifld fxdluding tif dfdimbl point, from 0 to 9
     * @pbrbm mbxWidti  tif mbximum widti of tif fifld fxdluding tif dfdimbl point, from 1 to 9
     * @pbrbm dfdimblPoint  wiftifr to output tif lodblizfd dfdimbl point symbol
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif fifld ibs b vbribblf sft of vblid vblufs or
     *  fitifr widti is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndFrbdtion(
            TfmporblFifld fifld, int minWidti, int mbxWidti, boolfbn dfdimblPoint) {
        bppfndIntfrnbl(nfw FrbdtionPrintfrPbrsfr(fifld, minWidti, mbxWidti, dfdimblPoint));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif tfxt of b dbtf-timf fifld to tif formbttfr using tif full
     * tfxt stylf.
     * <p>
     * Tif tfxt of tif fifld will bf output during b formbt.
     * Tif vbluf must bf witiin tif vblid rbngf of tif fifld.
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * If tif fifld ibs no tfxtubl rfprfsfntbtion, tifn tif numfrid vbluf will bf usfd.
     * <p>
     * Tif vbluf will bf printfd bs pfr tif normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld) {
        rfturn bppfndTfxt(fifld, TfxtStylf.FULL);
    }

    /**
     * Appfnds tif tfxt of b dbtf-timf fifld to tif formbttfr.
     * <p>
     * Tif tfxt of tif fifld will bf output during b formbt.
     * Tif vbluf must bf witiin tif vblid rbngf of tif fifld.
     * If tif vbluf dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     * If tif fifld ibs no tfxtubl rfprfsfntbtion, tifn tif numfrid vbluf will bf usfd.
     * <p>
     * Tif vbluf will bf printfd bs pfr tif normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm tfxtStylf  tif tfxt stylf to usf, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld, TfxtStylf tfxtStylf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
        bppfndIntfrnbl(nfw TfxtPrintfrPbrsfr(fifld, tfxtStylf, DbtfTimfTfxtProvidfr.gftInstbndf()));
        rfturn tiis;
    }

    /**
     * Appfnds tif tfxt of b dbtf-timf fifld to tif formbttfr using tif spfdififd
     * mbp to supply tif tfxt.
     * <p>
     * Tif stbndbrd tfxt outputting mftiods usf tif lodblizfd tfxt in tif JDK.
     * Tiis mftiod bllows tibt tfxt to bf spfdififd dirfdtly.
     * Tif supplifd mbp is not vblidbtfd by tif buildfr to fnsurf tibt formbtting or
     * pbrsing is possiblf, tius bn invblid mbp mby tirow bn frror during lbtfr usf.
     * <p>
     * Supplying tif mbp of tfxt providfs donsidfrbblf flfxibility in formbtting bnd pbrsing.
     * For fxbmplf, b lfgbdy bpplidbtion migit rfquirf or supply tif montis of tif
     * yfbr bs "JNY", "FBY", "MCH" ftd. Tifsf do not mbtdi tif stbndbrd sft of tfxt
     * for lodblizfd monti nbmfs. Using tiis mftiod, b mbp dbn bf drfbtfd wiidi
     * dffinfs tif donnfdtion bftwffn fbdi vbluf bnd tif tfxt:
     * <prf>
     * Mbp&lt;Long, String&gt; mbp = nfw HbsiMbp&lt;&gt;();
     * mbp.put(1L, "JNY");
     * mbp.put(2L, "FBY");
     * mbp.put(3L, "MCH");
     * ...
     * buildfr.bppfndTfxt(MONTH_OF_YEAR, mbp);
     * </prf>
     * <p>
     * Otifr usfs migit bf to output tif vbluf witi b suffix, sudi bs "1st", "2nd", "3rd",
     * or bs Rombn numfrbls "I", "II", "III", "IV".
     * <p>
     * During formbtting, tif vbluf is obtbinfd bnd difdkfd tibt it is in tif vblid rbngf.
     * If tfxt is not bvbilbblf for tif vbluf tifn it is output bs b numbfr.
     * During pbrsing, tif pbrsfr will mbtdi bgbinst tif mbp of tfxt bnd numfrid vblufs.
     *
     * @pbrbm fifld  tif fifld to bppfnd, not null
     * @pbrbm tfxtLookup  tif mbp from tif vbluf to tif tfxt
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld, Mbp<Long, String> tfxtLookup) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(tfxtLookup, "tfxtLookup");
        Mbp<Long, String> dopy = nfw LinkfdHbsiMbp<>(tfxtLookup);
        Mbp<TfxtStylf, Mbp<Long, String>> mbp = Collfdtions.singlftonMbp(TfxtStylf.FULL, dopy);
        finbl LodblfStorf storf = nfw LodblfStorf(mbp);
        DbtfTimfTfxtProvidfr providfr = nfw DbtfTimfTfxtProvidfr() {
            @Ovfrridf
            publid String gftTfxt(TfmporblFifld fifld, long vbluf, TfxtStylf stylf, Lodblf lodblf) {
                rfturn storf.gftTfxt(vbluf, stylf);
            }
            @Ovfrridf
            publid Itfrbtor<Entry<String, Long>> gftTfxtItfrbtor(TfmporblFifld fifld, TfxtStylf stylf, Lodblf lodblf) {
                rfturn storf.gftTfxtItfrbtor(stylf);
            }
        };
        bppfndIntfrnbl(nfw TfxtPrintfrPbrsfr(fifld, TfxtStylf.FULL, providfr));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds bn instbnt using ISO-8601 to tif formbttfr, formbtting frbdtionbl
     * digits in groups of tirff.
     * <p>
     * Instbnts ibvf b fixfd output formbt.
     * Tify brf donvfrtfd to b dbtf-timf witi b zonf-offsft of UTC bnd formbttfd
     * using tif stbndbrd ISO-8601 formbt.
     * Witi tiis mftiod, formbtting nbno-of-sfdond outputs zfro, tirff, six
     * or ninf digits digits bs nfdfssbry.
     * Tif lodblizfd dfdimbl stylf is not usfd.
     * <p>
     * Tif instbnt is obtbinfd using {@link CironoFifld#INSTANT_SECONDS INSTANT_SECONDS}
     * bnd optionblly (@dodf NANO_OF_SECOND). Tif vbluf of {@dodf INSTANT_SECONDS}
     * mby bf outsidf tif mbximum rbngf of {@dodf LodblDbtfTimf}.
     * <p>
     * Tif {@linkplbin RfsolvfrStylf rfsolvfr stylf} ibs no ffffdt on instbnt pbrsing.
     * Tif fnd-of-dby timf of '24:00' is ibndlfd bs midnigit bt tif stbrt of tif following dby.
     * Tif lfbp-sfdond timf of '23:59:59' is ibndlfd to somf dfgrff, sff
     * {@link DbtfTimfFormbttfr#pbrsfdLfbpSfdond()} for full dftbils.
     * <p>
     * An bltfrnbtivf to tiis mftiod is to formbt/pbrsf tif instbnt bs b singlf
     * fpodi-sfdonds vbluf. Tibt is bdiifvfd using {@dodf bppfndVbluf(INSTANT_SECONDS)}.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndInstbnt() {
        bppfndIntfrnbl(nfw InstbntPrintfrPbrsfr(-2));
        rfturn tiis;
    }

    /**
     * Appfnds bn instbnt using ISO-8601 to tif formbttfr witi dontrol ovfr
     * tif numbfr of frbdtionbl digits.
     * <p>
     * Instbnts ibvf b fixfd output formbt, bltiougi tiis mftiod providfs somf
     * dontrol ovfr tif frbdtionbl digits. Tify brf donvfrtfd to b dbtf-timf
     * witi b zonf-offsft of UTC bnd printfd using tif stbndbrd ISO-8601 formbt.
     * Tif lodblizfd dfdimbl stylf is not usfd.
     * <p>
     * Tif {@dodf frbdtionblDigits} pbrbmftfr bllows tif output of tif frbdtionbl
     * sfdond to bf dontrollfd. Spfdifying zfro will dbusf no frbdtionbl digits
     * to bf output. From 1 to 9 will output bn indrfbsing numbfr of digits, using
     * zfro rigit-pbdding if nfdfssbry. Tif spfdibl vbluf -1 is usfd to output bs
     * mbny digits bs nfdfssbry to bvoid bny trbiling zfrofs.
     * <p>
     * Wifn pbrsing in stridt modf, tif numbfr of pbrsfd digits must mbtdi tif
     * frbdtionbl digits. Wifn pbrsing in lfnifnt modf, bny numbfr of frbdtionbl
     * digits from zfro to ninf brf bddfptfd.
     * <p>
     * Tif instbnt is obtbinfd using {@link CironoFifld#INSTANT_SECONDS INSTANT_SECONDS}
     * bnd optionblly (@dodf NANO_OF_SECOND). Tif vbluf of {@dodf INSTANT_SECONDS}
     * mby bf outsidf tif mbximum rbngf of {@dodf LodblDbtfTimf}.
     * <p>
     * Tif {@linkplbin RfsolvfrStylf rfsolvfr stylf} ibs no ffffdt on instbnt pbrsing.
     * Tif fnd-of-dby timf of '24:00' is ibndlfd bs midnigit bt tif stbrt of tif following dby.
     * Tif lfbp-sfdond timf of '23:59:60' is ibndlfd to somf dfgrff, sff
     * {@link DbtfTimfFormbttfr#pbrsfdLfbpSfdond()} for full dftbils.
     * <p>
     * An bltfrnbtivf to tiis mftiod is to formbt/pbrsf tif instbnt bs b singlf
     * fpodi-sfdonds vbluf. Tibt is bdiifvfd using {@dodf bppfndVbluf(INSTANT_SECONDS)}.
     *
     * @pbrbm frbdtionblDigits  tif numbfr of frbdtionbl sfdond digits to formbt witi,
     *  from 0 to 9, or -1 to usf bs mbny digits bs nfdfssbry
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndInstbnt(int frbdtionblDigits) {
        if (frbdtionblDigits < -1 || frbdtionblDigits > 9) {
            tirow nfw IllfgblArgumfntExdfption("Tif frbdtionbl digits must bf from -1 to 9 indlusivf but wbs " + frbdtionblDigits);
        }
        bppfndIntfrnbl(nfw InstbntPrintfrPbrsfr(frbdtionblDigits));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif zonf offsft, sudi bs '+01:00', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif offsft ID to tif buildfr.
     * Tiis is fquivblfnt to dblling {@dodf bppfndOffsft("+HH:MM:ss", "Z")}.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOffsftId() {
        bppfndIntfrnbl(OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z);
        rfturn tiis;
    }

    /**
     * Appfnds tif zonf offsft, sudi bs '+01:00', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif offsft ID to tif buildfr.
     * <p>
     * During formbtting, tif offsft is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#offsft()}.
     * It will bf printfd using tif formbt dffinfd bflow.
     * If tif offsft dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, tif offsft is pbrsfd using tif formbt dffinfd bflow.
     * If tif offsft dbnnot bf pbrsfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * Tif formbt of tif offsft is dontrollfd by b pbttfrn wiidi must bf onf
     * of tif following:
     * <ul>
     * <li>{@dodf +HH} - iour only, ignoring minutf bnd sfdond
     * <li>{@dodf +HHmm} - iour, witi minutf if non-zfro, ignoring sfdond, no dolon
     * <li>{@dodf +HH:mm} - iour, witi minutf if non-zfro, ignoring sfdond, witi dolon
     * <li>{@dodf +HHMM} - iour bnd minutf, ignoring sfdond, no dolon
     * <li>{@dodf +HH:MM} - iour bnd minutf, ignoring sfdond, witi dolon
     * <li>{@dodf +HHMMss} - iour bnd minutf, witi sfdond if non-zfro, no dolon
     * <li>{@dodf +HH:MM:ss} - iour bnd minutf, witi sfdond if non-zfro, witi dolon
     * <li>{@dodf +HHMMSS} - iour, minutf bnd sfdond, no dolon
     * <li>{@dodf +HH:MM:SS} - iour, minutf bnd sfdond, witi dolon
     * </ul>
     * Tif "no offsft" tfxt dontrols wibt tfxt is printfd wifn tif totbl bmount of
     * tif offsft fiflds to bf output is zfro.
     * Exbmplf vblufs would bf 'Z', '+00:00', 'UTC' or 'GMT'.
     * Tirff formbts brf bddfptfd for pbrsing UTC - tif "no offsft" tfxt, bnd tif
     * plus bnd minus vfrsions of zfro dffinfd by tif pbttfrn.
     *
     * @pbrbm pbttfrn  tif pbttfrn to usf, not null
     * @pbrbm noOffsftTfxt  tif tfxt to usf wifn tif offsft is zfro, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOffsft(String pbttfrn, String noOffsftTfxt) {
        bppfndIntfrnbl(nfw OffsftIdPrintfrPbrsfr(pbttfrn, noOffsftTfxt));
        rfturn tiis;
    }

    /**
     * Appfnds tif lodblizfd zonf offsft, sudi bs 'GMT+01:00', to tif formbttfr.
     * <p>
     * Tiis bppfnds b lodblizfd zonf offsft to tif buildfr, tif formbt of tif
     * lodblizfd offsft is dontrollfd by tif spfdififd {@link FormbtStylf stylf}
     * to tiis mftiod:
     * <ul>
     * <li>{@link TfxtStylf#FULL full} - formbts witi lodblizfd offsft tfxt, sudi
     * bs 'GMT, 2-digit iour bnd minutf fifld, optionbl sfdond fifld if non-zfro,
     * bnd dolon.
     * <li>{@link TfxtStylf#SHORT siort} - formbts witi lodblizfd offsft tfxt,
     * sudi bs 'GMT, iour witiout lfbding zfro, optionbl 2-digit minutf bnd
     * sfdond if non-zfro, bnd dolon.
     * </ul>
     * <p>
     * During formbtting, tif offsft is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#offsft()}.
     * If tif offsft dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, tif offsft is pbrsfd using tif formbt dffinfd bbovf.
     * If tif offsft dbnnot bf pbrsfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     *
     * @pbrbm stylf  tif formbt stylf to usf, not null
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if stylf is nfitifr {@link TfxtStylf#FULL
     * full} nor {@link TfxtStylf#SHORT siort}
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLodblizfdOffsft(TfxtStylf stylf) {
        Objfdts.rfquirfNonNull(stylf, "stylf");
        if (stylf != TfxtStylf.FULL && stylf != TfxtStylf.SHORT) {
            tirow nfw IllfgblArgumfntExdfption("Stylf must bf fitifr full or siort");
        }
        bppfndIntfrnbl(nfw LodblizfdOffsftIdPrintfrPbrsfr(stylf));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif timf-zonf ID, sudi bs 'Europf/Pbris' or '+02:00', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif zonf ID to tif buildfr.
     * Tif zonf ID is obtbinfd in b stridt mbnnfr suitbblf for {@dodf ZonfdDbtfTimf}.
     * By dontrbst, {@dodf OffsftDbtfTimf} dofs not ibvf b zonf ID suitbblf
     * for usf witi tiis mftiod, sff {@link #bppfndZonfOrOffsftId()}.
     * <p>
     * During formbtting, tif zonf is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#zonfId()}.
     * It will bf printfd using tif rfsult of {@link ZonfId#gftId()}.
     * If tif zonf dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, tif tfxt must mbtdi b known zonf or offsft.
     * Tifrf brf two typfs of zonf ID, offsft-bbsfd, sudi bs '+01:30' bnd
     * rfgion-bbsfd, sudi bs 'Europf/London'. Tifsf brf pbrsfd difffrfntly.
     * If tif pbrsf stbrts witi '+', '-', 'UT', 'UTC' or 'GMT', tifn tif pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdi rfgion-bbsfd zonfs.
     * Tif offsft ID, sudi bs '+02:30', mby bf bt tif stbrt of tif pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Tif offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using tif
     * brgumfnts 'HH:MM:ss' bnd tif no offsft string '0'.
     * If tif pbrsf stbrts witi 'UT', 'UTC' or 'GMT', bnd tif pbrsfr dbnnot
     * mbtdi b following offsft ID, tifn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll otifr dbsfs, tif list of known rfgion-bbsfd zonfs is usfd to
     * find tif longfst bvbilbblf mbtdi. If no mbtdi is found, bnd tif pbrsf
     * stbrts witi 'Z', tifn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Tif pbrsfr usfs tif {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, tif following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("+01:30")
     * </prf>
     *
     * @rfturn tiis, for dibining, not null
     * @sff #bppfndZonfRfgionId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(TfmporblQufrifs.zonfId(), "ZonfId()"));
        rfturn tiis;
    }

    /**
     * Appfnds tif timf-zonf rfgion ID, sudi bs 'Europf/Pbris', to tif formbttfr,
     * rfjfdting tif zonf ID if it is b {@dodf ZonfOffsft}.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif zonf ID to tif buildfr
     * only if it is b rfgion-bbsfd ID.
     * <p>
     * During formbtting, tif zonf is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#zonfId()}.
     * If tif zonf is b {@dodf ZonfOffsft} or it dbnnot bf obtbinfd tifn
     * bn fxdfption is tirown unlfss tif sfdtion of tif formbttfr is optionbl.
     * If tif zonf is not bn offsft, tifn tif zonf will bf printfd using
     * tif zonf ID from {@link ZonfId#gftId()}.
     * <p>
     * During pbrsing, tif tfxt must mbtdi b known zonf or offsft.
     * Tifrf brf two typfs of zonf ID, offsft-bbsfd, sudi bs '+01:30' bnd
     * rfgion-bbsfd, sudi bs 'Europf/London'. Tifsf brf pbrsfd difffrfntly.
     * If tif pbrsf stbrts witi '+', '-', 'UT', 'UTC' or 'GMT', tifn tif pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdi rfgion-bbsfd zonfs.
     * Tif offsft ID, sudi bs '+02:30', mby bf bt tif stbrt of tif pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Tif offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using tif
     * brgumfnts 'HH:MM:ss' bnd tif no offsft string '0'.
     * If tif pbrsf stbrts witi 'UT', 'UTC' or 'GMT', bnd tif pbrsfr dbnnot
     * mbtdi b following offsft ID, tifn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll otifr dbsfs, tif list of known rfgion-bbsfd zonfs is usfd to
     * find tif longfst bvbilbblf mbtdi. If no mbtdi is found, bnd tif pbrsf
     * stbrts witi 'Z', tifn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Tif pbrsfr usfs tif {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, tif following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("+01:30")
     * </prf>
     * <p>
     * Notf tibt tiis mftiod is idfntidbl to {@dodf bppfndZonfId()} fxdfpt
     * in tif mfdibnism usfd to obtbin tif zonf.
     * Notf blso tibt pbrsing bddfpts offsfts, wifrfbs formbtting will nfvfr
     * produdf onf.
     *
     * @rfturn tiis, for dibining, not null
     * @sff #bppfndZonfId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfRfgionId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(QUERY_REGION_ONLY, "ZonfRfgionId()"));
        rfturn tiis;
    }

    /**
     * Appfnds tif timf-zonf ID, sudi bs 'Europf/Pbris' or '+02:00', to
     * tif formbttfr, using tif bfst bvbilbblf zonf ID.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif bfst bvbilbblf
     * zonf or offsft ID to tif buildfr.
     * Tif zonf ID is obtbinfd in b lfnifnt mbnnfr tibt first bttfmpts to
     * find b truf zonf ID, sudi bs tibt on {@dodf ZonfdDbtfTimf}, bnd
     * tifn bttfmpts to find bn offsft, sudi bs tibt on {@dodf OffsftDbtfTimf}.
     * <p>
     * During formbtting, tif zonf is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#zonf()}.
     * It will bf printfd using tif rfsult of {@link ZonfId#gftId()}.
     * If tif zonf dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, tif tfxt must mbtdi b known zonf or offsft.
     * Tifrf brf two typfs of zonf ID, offsft-bbsfd, sudi bs '+01:30' bnd
     * rfgion-bbsfd, sudi bs 'Europf/London'. Tifsf brf pbrsfd difffrfntly.
     * If tif pbrsf stbrts witi '+', '-', 'UT', 'UTC' or 'GMT', tifn tif pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdi rfgion-bbsfd zonfs.
     * Tif offsft ID, sudi bs '+02:30', mby bf bt tif stbrt of tif pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Tif offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using tif
     * brgumfnts 'HH:MM:ss' bnd tif no offsft string '0'.
     * If tif pbrsf stbrts witi 'UT', 'UTC' or 'GMT', bnd tif pbrsfr dbnnot
     * mbtdi b following offsft ID, tifn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll otifr dbsfs, tif list of known rfgion-bbsfd zonfs is usfd to
     * find tif longfst bvbilbblf mbtdi. If no mbtdi is found, bnd tif pbrsf
     * stbrts witi 'Z', tifn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Tif pbrsfr usfs tif {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, tif following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("UT+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("UTC+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("GMT+01:30")
     * </prf>
     * <p>
     * Notf tibt tiis mftiod is idfntidbl to {@dodf bppfndZonfId()} fxdfpt
     * in tif mfdibnism usfd to obtbin tif zonf.
     *
     * @rfturn tiis, for dibining, not null
     * @sff #bppfndZonfId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfOrOffsftId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(TfmporblQufrifs.zonf(), "ZonfOrOffsftId()"));
        rfturn tiis;
    }

    /**
     * Appfnds tif timf-zonf nbmf, sudi bs 'Britisi Summfr Timf', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif tfxtubl nbmf of tif zonf to
     * tif buildfr.
     * <p>
     * During formbtting, tif zonf is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#zonfId()}.
     * If tif zonf is b {@dodf ZonfOffsft} it will bf printfd using tif
     * rfsult of {@link ZonfOffsft#gftId()}.
     * If tif zonf is not bn offsft, tif tfxtubl nbmf will bf lookfd up
     * for tif lodblf sft in tif {@link DbtfTimfFormbttfr}.
     * If tif tfmporbl objfdt bfing printfd rfprfsfnts bn instbnt, tifn tif tfxt
     * will bf tif summfr or wintfr timf tfxt bs bppropribtf.
     * If tif lookup for tfxt dofs not find bny suitbblf rfsult, tifn tif
     * {@link ZonfId#gftId() ID} will bf printfd instfbd.
     * If tif zonf dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, fitifr tif tfxtubl zonf nbmf, tif zonf ID or tif offsft
     * is bddfptfd. Mbny tfxtubl zonf nbmfs brf not uniquf, sudi bs CST dbn bf
     * for boti "Cfntrbl Stbndbrd Timf" bnd "Ciinb Stbndbrd Timf". In tiis
     * situbtion, tif zonf id will bf dftfrminfd by tif rfgion informbtion from
     * formbttfr's  {@link DbtfTimfFormbttfr#gftLodblf() lodblf} bnd tif stbndbrd
     * zonf id for tibt brfb, for fxbmplf, Amfridb/Nfw_York for tif Amfridb Ebstfrn
     * zonf. Tif {@link #bppfndZonfTfxt(TfxtStylf, Sft)} mby bf usfd
     * to spfdify b sft of prfffrrfd {@link ZonfId} in tiis situbtion.
     *
     * @pbrbm tfxtStylf  tif tfxt stylf to usf, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfTfxt(TfxtStylf tfxtStylf) {
        bppfndIntfrnbl(nfw ZonfTfxtPrintfrPbrsfr(tfxtStylf, null));
        rfturn tiis;
    }

    /**
     * Appfnds tif timf-zonf nbmf, sudi bs 'Britisi Summfr Timf', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif tfxtubl nbmf of tif zonf to
     * tif buildfr.
     * <p>
     * During formbtting, tif zonf is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#zonfId()}.
     * If tif zonf is b {@dodf ZonfOffsft} it will bf printfd using tif
     * rfsult of {@link ZonfOffsft#gftId()}.
     * If tif zonf is not bn offsft, tif tfxtubl nbmf will bf lookfd up
     * for tif lodblf sft in tif {@link DbtfTimfFormbttfr}.
     * If tif tfmporbl objfdt bfing printfd rfprfsfnts bn instbnt, tifn tif tfxt
     * will bf tif summfr or wintfr timf tfxt bs bppropribtf.
     * If tif lookup for tfxt dofs not find bny suitbblf rfsult, tifn tif
     * {@link ZonfId#gftId() ID} will bf printfd instfbd.
     * If tif zonf dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, fitifr tif tfxtubl zonf nbmf, tif zonf ID or tif offsft
     * is bddfptfd. Mbny tfxtubl zonf nbmfs brf not uniquf, sudi bs CST dbn bf
     * for boti "Cfntrbl Stbndbrd Timf" bnd "Ciinb Stbndbrd Timf". In tiis
     * situbtion, tif zonf id will bf dftfrminfd by tif rfgion informbtion from
     * formbttfr's  {@link DbtfTimfFormbttfr#gftLodblf() lodblf} bnd tif stbndbrd
     * zonf id for tibt brfb, for fxbmplf, Amfridb/Nfw_York for tif Amfridb Ebstfrn
     * zonf. Tiis mftiod blso bllows b sft of prfffrrfd {@link ZonfId} to bf
     * spfdififd for pbrsing. Tif mbtdifd prfffrrfd zonf id will bf usfd if tif
     * tfxturbl zonf nbmf bfing pbrsfd is not uniquf.
     * <p>
     * If tif zonf dbnnot bf pbrsfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     *
     * @pbrbm tfxtStylf  tif tfxt stylf to usf, not null
     * @pbrbm prfffrrfdZonfs  tif sft of prfffrrfd zonf ids, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfTfxt(TfxtStylf tfxtStylf,
                                                   Sft<ZonfId> prfffrrfdZonfs) {
        Objfdts.rfquirfNonNull(prfffrrfdZonfs, "prfffrrfdZonfs");
        bppfndIntfrnbl(nfw ZonfTfxtPrintfrPbrsfr(tfxtStylf, prfffrrfdZonfs));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif dironology ID, sudi bs 'ISO' or 'TibiBuddiist', to tif formbttfr.
     * <p>
     * Tiis bppfnds bn instrudtion to formbt/pbrsf tif dironology ID to tif buildfr.
     * <p>
     * During formbtting, tif dironology is obtbinfd using b mfdibnism fquivblfnt
     * to qufrying tif tfmporbl witi {@link TfmporblQufrifs#dironology()}.
     * It will bf printfd using tif rfsult of {@link Cironology#gftId()}.
     * If tif dironology dbnnot bf obtbinfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * <p>
     * During pbrsing, tif dironology is pbrsfd bnd must mbtdi onf of tif dironologifs
     * in {@link Cironology#gftAvbilbblfCironologifs()}.
     * If tif dironology dbnnot bf pbrsfd tifn bn fxdfption is tirown unlfss tif
     * sfdtion of tif formbttfr is optionbl.
     * Tif pbrsfr usfs tif {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndCironologyId() {
        bppfndIntfrnbl(nfw CironoPrintfrPbrsfr(null));
        rfturn tiis;
    }

    /**
     * Appfnds tif dironology nbmf to tif formbttfr.
     * <p>
     * Tif dblfndbr systfm nbmf will bf output during b formbt.
     * If tif dironology dbnnot bf obtbinfd tifn bn fxdfption will bf tirown.
     *
     * @pbrbm tfxtStylf  tif tfxt stylf to usf, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndCironologyTfxt(TfxtStylf tfxtStylf) {
        Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
        bppfndIntfrnbl(nfw CironoPrintfrPbrsfr(tfxtStylf));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b lodblizfd dbtf-timf pbttfrn to tif formbttfr.
     * <p>
     * Tiis bppfnds b lodblizfd sfdtion to tif buildfr, suitbblf for outputting
     * b dbtf, timf or dbtf-timf dombinbtion. Tif formbt of tif lodblizfd
     * sfdtion is lbzily lookfd up bbsfd on four itfms:
     * <ul>
     * <li>tif {@dodf dbtfStylf} spfdififd to tiis mftiod
     * <li>tif {@dodf timfStylf} spfdififd to tiis mftiod
     * <li>tif {@dodf Lodblf} of tif {@dodf DbtfTimfFormbttfr}
     * <li>tif {@dodf Cironology}, sflfdting tif bfst bvbilbblf
     * </ul>
     * During formbtting, tif dironology is obtbinfd from tif tfmporbl objfdt
     * bfing formbttfd, wiidi mby ibvf bffn ovfrriddfn by
     * {@link DbtfTimfFormbttfr#witiCironology(Cironology)}.
     * <p>
     * During pbrsing, if b dironology ibs blrfbdy bffn pbrsfd, tifn it is usfd.
     * Otifrwisf tif dffbult from {@dodf DbtfTimfFormbttfr.witiCironology(Cironology)}
     * is usfd, witi {@dodf IsoCironology} bs tif fbllbbdk.
     * <p>
     * Notf tibt tiis mftiod providfs similbr fundtionblity to mftiods on
     * {@dodf DbtfFormbt} sudi bs {@link jbvb.tfxt.DbtfFormbt#gftDbtfTimfInstbndf(int, int)}.
     *
     * @pbrbm dbtfStylf  tif dbtf stylf to usf, null mfbns no dbtf rfquirfd
     * @pbrbm timfStylf  tif timf stylf to usf, null mfbns no timf rfquirfd
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if boti tif dbtf bnd timf stylfs brf null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLodblizfd(FormbtStylf dbtfStylf, FormbtStylf timfStylf) {
        if (dbtfStylf == null && timfStylf == null) {
            tirow nfw IllfgblArgumfntExdfption("Eitifr tif dbtf or timf stylf must bf non-null");
        }
        bppfndIntfrnbl(nfw LodblizfdPrintfrPbrsfr(dbtfStylf, timfStylf));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b dibrbdtfr litfrbl to tif formbttfr.
     * <p>
     * Tiis dibrbdtfr will bf output during b formbt.
     *
     * @pbrbm litfrbl  tif litfrbl to bppfnd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLitfrbl(dibr litfrbl) {
        bppfndIntfrnbl(nfw CibrLitfrblPrintfrPbrsfr(litfrbl));
        rfturn tiis;
    }

    /**
     * Appfnds b string litfrbl to tif formbttfr.
     * <p>
     * Tiis string will bf output during b formbt.
     * <p>
     * If tif litfrbl is fmpty, notiing is bddfd to tif formbttfr.
     *
     * @pbrbm litfrbl  tif litfrbl to bppfnd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLitfrbl(String litfrbl) {
        Objfdts.rfquirfNonNull(litfrbl, "litfrbl");
        if (litfrbl.lfngti() > 0) {
            if (litfrbl.lfngti() == 1) {
                bppfndIntfrnbl(nfw CibrLitfrblPrintfrPbrsfr(litfrbl.dibrAt(0)));
            } flsf {
                bppfndIntfrnbl(nfw StringLitfrblPrintfrPbrsfr(litfrbl));
            }
        }
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds bll tif flfmfnts of b formbttfr to tif buildfr.
     * <p>
     * Tiis mftiod ibs tif sbmf ffffdt bs bppfnding fbdi of tif donstitufnt
     * pbrts of tif formbttfr dirfdtly to tiis buildfr.
     *
     * @pbrbm formbttfr  tif formbttfr to bdd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfnd(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        bppfndIntfrnbl(formbttfr.toPrintfrPbrsfr(fblsf));
        rfturn tiis;
    }

    /**
     * Appfnds b formbttfr to tif buildfr wiidi will optionblly formbt/pbrsf.
     * <p>
     * Tiis mftiod ibs tif sbmf ffffdt bs bppfnding fbdi of tif donstitufnt
     * pbrts dirfdtly to tiis buildfr surroundfd by bn {@link #optionblStbrt()} bnd
     * {@link #optionblEnd()}.
     * <p>
     * Tif formbttfr will formbt if dbtb is bvbilbblf for bll tif fiflds dontbinfd witiin it.
     * Tif formbttfr will pbrsf if tif string mbtdifs, otifrwisf no frror is rfturnfd.
     *
     * @pbrbm formbttfr  tif formbttfr to bdd, not null
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOptionbl(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        bppfndIntfrnbl(formbttfr.toPrintfrPbrsfr(truf));
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds tif flfmfnts dffinfd by tif spfdififd pbttfrn to tif buildfr.
     * <p>
     * All lfttfrs 'A' to 'Z' bnd 'b' to 'z' brf rfsfrvfd bs pbttfrn lfttfrs.
     * Tif dibrbdtfrs '#', '{' bnd '}' brf rfsfrvfd for futurf usf.
     * Tif dibrbdtfrs '[' bnd ']' indidbtf optionbl pbttfrns.
     * Tif following pbttfrn lfttfrs brf dffinfd:
     * <prf>
     *  Symbol  Mfbning                     Prfsfntbtion      Exbmplfs
     *  ------  -------                     ------------      -------
     *   G       frb                         tfxt              AD; Anno Domini; A
     *   u       yfbr                        yfbr              2004; 04
     *   y       yfbr-of-frb                 yfbr              2004; 04
     *   D       dby-of-yfbr                 numbfr            189
     *   M/L     monti-of-yfbr               numbfr/tfxt       7; 07; Jul; July; J
     *   d       dby-of-monti                numbfr            10
     *
     *   Q/q     qubrtfr-of-yfbr             numbfr/tfxt       3; 03; Q3; 3rd qubrtfr
     *   Y       wffk-bbsfd-yfbr             yfbr              1996; 96
     *   w       wffk-of-wffk-bbsfd-yfbr     numbfr            27
     *   W       wffk-of-monti               numbfr            4
     *   E       dby-of-wffk                 tfxt              Tuf; Tufsdby; T
     *   f/d     lodblizfd dby-of-wffk       numbfr/tfxt       2; 02; Tuf; Tufsdby; T
     *   F       wffk-of-monti               numbfr            3
     *
     *   b       bm-pm-of-dby                tfxt              PM
     *   i       dlodk-iour-of-bm-pm (1-12)  numbfr            12
     *   K       iour-of-bm-pm (0-11)        numbfr            0
     *   k       dlodk-iour-of-bm-pm (1-24)  numbfr            0
     *
     *   H       iour-of-dby (0-23)          numbfr            0
     *   m       minutf-of-iour              numbfr            30
     *   s       sfdond-of-minutf            numbfr            55
     *   S       frbdtion-of-sfdond          frbdtion          978
     *   A       milli-of-dby                numbfr            1234
     *   n       nbno-of-sfdond              numbfr            987654321
     *   N       nbno-of-dby                 numbfr            1234000000
     *
     *   V       timf-zonf ID                zonf-id           Amfridb/Los_Angflfs; Z; -08:30
     *   z       timf-zonf nbmf              zonf-nbmf         Pbdifid Stbndbrd Timf; PST
     *   O       lodblizfd zonf-offsft       offsft-O          GMT+8; GMT+08:00; UTC-08:00;
     *   X       zonf-offsft 'Z' for zfro    offsft-X          Z; -08; -0830; -08:30; -083015; -08:30:15;
     *   x       zonf-offsft                 offsft-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;
     *   Z       zonf-offsft                 offsft-Z          +0000; -0800; -08:00;
     *
     *   p       pbd nfxt                    pbd modififr      1
     *
     *   '       fsdbpf for tfxt             dflimitfr
     *   ''      singlf quotf                litfrbl           '
     *   [       optionbl sfdtion stbrt
     *   ]       optionbl sfdtion fnd
     *   #       rfsfrvfd for futurf usf
     *   {       rfsfrvfd for futurf usf
     *   }       rfsfrvfd for futurf usf
     * </prf>
     * <p>
     * Tif dount of pbttfrn lfttfrs dftfrminf tif formbt.
     * Sff <b irff="DbtfTimfFormbttfr.itml#pbttfrns">DbtfTimfFormbttfr</b> for b usfr-fodusfd dfsdription of tif pbttfrns.
     * Tif following tbblfs dffinf iow tif pbttfrn lfttfrs mbp to tif buildfr.
     * <p>
     * <b>Dbtf fiflds</b>: Pbttfrn lfttfrs to output b dbtf.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mftiods
     *  -------  -----  --------------------------
     *    G       1      bppfndTfxt(CironoFifld.ERA, TfxtStylf.SHORT)
     *    GG      2      bppfndTfxt(CironoFifld.ERA, TfxtStylf.SHORT)
     *    GGG     3      bppfndTfxt(CironoFifld.ERA, TfxtStylf.SHORT)
     *    GGGG    4      bppfndTfxt(CironoFifld.ERA, TfxtStylf.FULL)
     *    GGGGG   5      bppfndTfxt(CironoFifld.ERA, TfxtStylf.NARROW)
     *
     *    u       1      bppfndVbluf(CironoFifld.YEAR, 1, 19, SignStylf.NORMAL);
     *    uu      2      bppfndVblufRfdudfd(CironoFifld.YEAR, 2, 2000);
     *    uuu     3      bppfndVbluf(CironoFifld.YEAR, 3, 19, SignStylf.NORMAL);
     *    u..u    4..n   bppfndVbluf(CironoFifld.YEAR, n, 19, SignStylf.EXCEEDS_PAD);
     *    y       1      bppfndVbluf(CironoFifld.YEAR_OF_ERA, 1, 19, SignStylf.NORMAL);
     *    yy      2      bppfndVblufRfdudfd(CironoFifld.YEAR_OF_ERA, 2, 2000);
     *    yyy     3      bppfndVbluf(CironoFifld.YEAR_OF_ERA, 3, 19, SignStylf.NORMAL);
     *    y..y    4..n   bppfndVbluf(CironoFifld.YEAR_OF_ERA, n, 19, SignStylf.EXCEEDS_PAD);
     *    Y       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr
     *    YY      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for rfdudfd numfrid wffk-bbsfd-yfbr 2 digits;
     *    YYY     3      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr (3, 19, SignStylf.NORMAL);
     *    Y..Y    4..n   bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr (n, 19, SignStylf.EXCEEDS_PAD);
     *
     *    Q       1      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR);
     *    QQ      2      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR, 2);
     *    QQQ     3      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.SHORT)
     *    QQQQ    4      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.FULL)
     *    QQQQQ   5      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.NARROW)
     *    q       1      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR);
     *    qq      2      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR, 2);
     *    qqq     3      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.SHORT_STANDALONE)
     *    qqqq    4      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.FULL_STANDALONE)
     *    qqqqq   5      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.NARROW_STANDALONE)
     *
     *    M       1      bppfndVbluf(CironoFifld.MONTH_OF_YEAR);
     *    MM      2      bppfndVbluf(CironoFifld.MONTH_OF_YEAR, 2);
     *    MMM     3      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.SHORT)
     *    MMMM    4      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.FULL)
     *    MMMMM   5      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.NARROW)
     *    L       1      bppfndVbluf(CironoFifld.MONTH_OF_YEAR);
     *    LL      2      bppfndVbluf(CironoFifld.MONTH_OF_YEAR, 2);
     *    LLL     3      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.SHORT_STANDALONE)
     *    LLLL    4      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.FULL_STANDALONE)
     *    LLLLL   5      bppfndTfxt(CironoFifld.MONTH_OF_YEAR, TfxtStylf.NARROW_STANDALONE)
     *
     *    w       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-yfbr
     *    ww      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-yfbr, zfro-pbddfd
     *    W       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-monti
     *    d       1      bppfndVbluf(CironoFifld.DAY_OF_MONTH)
     *    dd      2      bppfndVbluf(CironoFifld.DAY_OF_MONTH, 2)
     *    D       1      bppfndVbluf(CironoFifld.DAY_OF_YEAR)
     *    DD      2      bppfndVbluf(CironoFifld.DAY_OF_YEAR, 2)
     *    DDD     3      bppfndVbluf(CironoFifld.DAY_OF_YEAR, 3)
     *    F       1      bppfndVbluf(CironoFifld.ALIGNED_DAY_OF_WEEK_IN_MONTH)
     *    E       1      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EE      2      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EEE     3      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EEEE    4      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.FULL)
     *    EEEEE   5      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.NARROW)
     *    f       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk
     *    ff      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk, zfro-pbddfd
     *    fff     3      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    ffff    4      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.FULL)
     *    fffff   5      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.NARROW)
     *    d       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk
     *    ddd     3      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.SHORT_STANDALONE)
     *    dddd    4      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.FULL_STANDALONE)
     *    ddddd   5      bppfndTfxt(CironoFifld.DAY_OF_WEEK, TfxtStylf.NARROW_STANDALONE)
     * </prf>
     * <p>
     * <b>Timf fiflds</b>: Pbttfrn lfttfrs to output b timf.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mftiods
     *  -------  -----  --------------------------
     *    b       1      bppfndTfxt(CironoFifld.AMPM_OF_DAY, TfxtStylf.SHORT)
     *    i       1      bppfndVbluf(CironoFifld.CLOCK_HOUR_OF_AMPM)
     *    ii      2      bppfndVbluf(CironoFifld.CLOCK_HOUR_OF_AMPM, 2)
     *    H       1      bppfndVbluf(CironoFifld.HOUR_OF_DAY)
     *    HH      2      bppfndVbluf(CironoFifld.HOUR_OF_DAY, 2)
     *    k       1      bppfndVbluf(CironoFifld.CLOCK_HOUR_OF_DAY)
     *    kk      2      bppfndVbluf(CironoFifld.CLOCK_HOUR_OF_DAY, 2)
     *    K       1      bppfndVbluf(CironoFifld.HOUR_OF_AMPM)
     *    KK      2      bppfndVbluf(CironoFifld.HOUR_OF_AMPM, 2)
     *    m       1      bppfndVbluf(CironoFifld.MINUTE_OF_HOUR)
     *    mm      2      bppfndVbluf(CironoFifld.MINUTE_OF_HOUR, 2)
     *    s       1      bppfndVbluf(CironoFifld.SECOND_OF_MINUTE)
     *    ss      2      bppfndVbluf(CironoFifld.SECOND_OF_MINUTE, 2)
     *
     *    S..S    1..n   bppfndFrbdtion(CironoFifld.NANO_OF_SECOND, n, n, fblsf)
     *    A       1      bppfndVbluf(CironoFifld.MILLI_OF_DAY)
     *    A..A    2..n   bppfndVbluf(CironoFifld.MILLI_OF_DAY, n)
     *    n       1      bppfndVbluf(CironoFifld.NANO_OF_SECOND)
     *    n..n    2..n   bppfndVbluf(CironoFifld.NANO_OF_SECOND, n)
     *    N       1      bppfndVbluf(CironoFifld.NANO_OF_DAY)
     *    N..N    2..n   bppfndVbluf(CironoFifld.NANO_OF_DAY, n)
     * </prf>
     * <p>
     * <b>Zonf ID</b>: Pbttfrn lfttfrs to output {@dodf ZonfId}.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mftiods
     *  -------  -----  --------------------------
     *    VV      2      bppfndZonfId()
     *    z       1      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zz      2      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zzz     3      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zzzz    4      bppfndZonfTfxt(TfxtStylf.FULL)
     * </prf>
     * <p>
     * <b>Zonf offsft</b>: Pbttfrn lfttfrs to output {@dodf ZonfOffsft}.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mftiods
     *  -------  -----  --------------------------
     *    O       1      bppfndLodblizfdOffsftPrffixfd(TfxtStylf.SHORT);
     *    OOOO    4      bppfndLodblizfdOffsftPrffixfd(TfxtStylf.FULL);
     *    X       1      bppfndOffsft("+HHmm","Z")
     *    XX      2      bppfndOffsft("+HHMM","Z")
     *    XXX     3      bppfndOffsft("+HH:MM","Z")
     *    XXXX    4      bppfndOffsft("+HHMMss","Z")
     *    XXXXX   5      bppfndOffsft("+HH:MM:ss","Z")
     *    x       1      bppfndOffsft("+HHmm","+00")
     *    xx      2      bppfndOffsft("+HHMM","+0000")
     *    xxx     3      bppfndOffsft("+HH:MM","+00:00")
     *    xxxx    4      bppfndOffsft("+HHMMss","+0000")
     *    xxxxx   5      bppfndOffsft("+HH:MM:ss","+00:00")
     *    Z       1      bppfndOffsft("+HHMM","+0000")
     *    ZZ      2      bppfndOffsft("+HHMM","+0000")
     *    ZZZ     3      bppfndOffsft("+HHMM","+0000")
     *    ZZZZ    4      bppfndLodblizfdOffsft(TfxtStylf.FULL);
     *    ZZZZZ   5      bppfndOffsft("+HH:MM:ss","Z")
     * </prf>
     * <p>
     * <b>Modififrs</b>: Pbttfrn lfttfrs tibt modify tif rfst of tif pbttfrn:
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mftiods
     *  -------  -----  --------------------------
     *    [       1      optionblStbrt()
     *    ]       1      optionblEnd()
     *    p..p    1..n   pbdNfxt(n)
     * </prf>
     * <p>
     * Any sfqufndf of lfttfrs not spfdififd bbovf, unrfdognizfd lfttfr or
     * rfsfrvfd dibrbdtfr will tirow bn fxdfption.
     * Futurf vfrsions mby bdd to tif sft of pbttfrns.
     * It is rfdommfndfd to usf singlf quotfs bround bll dibrbdtfrs tibt you wbnt
     * to output dirfdtly to fnsurf tibt futurf dibngfs do not brfbk your bpplidbtion.
     * <p>
     * Notf tibt tif pbttfrn string is similbr, but not idfntidbl, to
     * {@link jbvb.tfxt.SimplfDbtfFormbt SimplfDbtfFormbt}.
     * Tif pbttfrn string is blso similbr, but not idfntidbl, to tibt dffinfd by tif
     * Unidodf Common Lodblf Dbtb Rfpository (CLDR/LDML).
     * Pbttfrn lfttfrs 'X' bnd 'u' brf blignfd witi Unidodf CLDR/LDML.
     * By dontrbst, {@dodf SimplfDbtfFormbt} usfs 'u' for tif numfrid dby of wffk.
     * Pbttfrn lfttfrs 'y' bnd 'Y' pbrsf yfbrs of two digits bnd morf tibn 4 digits difffrfntly.
     * Pbttfrn lfttfrs 'n', 'A', 'N', bnd 'p' brf bddfd.
     * Numbfr typfs will rfjfdt lbrgf numbfrs.
     *
     * @pbrbm pbttfrn  tif pbttfrn to bdd, not null
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if tif pbttfrn is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndPbttfrn(String pbttfrn) {
        Objfdts.rfquirfNonNull(pbttfrn, "pbttfrn");
        pbrsfPbttfrn(pbttfrn);
        rfturn tiis;
    }

    privbtf void pbrsfPbttfrn(String pbttfrn) {
        for (int pos = 0; pos < pbttfrn.lfngti(); pos++) {
            dibr dur = pbttfrn.dibrAt(pos);
            if ((dur >= 'A' && dur <= 'Z') || (dur >= 'b' && dur <= 'z')) {
                int stbrt = pos++;
                for ( ; pos < pbttfrn.lfngti() && pbttfrn.dibrAt(pos) == dur; pos++);  // siort loop
                int dount = pos - stbrt;
                // pbdding
                if (dur == 'p') {
                    int pbd = 0;
                    if (pos < pbttfrn.lfngti()) {
                        dur = pbttfrn.dibrAt(pos);
                        if ((dur >= 'A' && dur <= 'Z') || (dur >= 'b' && dur <= 'z')) {
                            pbd = dount;
                            stbrt = pos++;
                            for ( ; pos < pbttfrn.lfngti() && pbttfrn.dibrAt(pos) == dur; pos++);  // siort loop
                            dount = pos - stbrt;
                        }
                    }
                    if (pbd == 0) {
                        tirow nfw IllfgblArgumfntExdfption(
                                "Pbd lfttfr 'p' must bf followfd by vblid pbd pbttfrn: " + pbttfrn);
                    }
                    pbdNfxt(pbd); // pbd bnd dontinuf pbrsing
                }
                // mbin rulfs
                TfmporblFifld fifld = FIELD_MAP.gft(dur);
                if (fifld != null) {
                    pbrsfFifld(dur, dount, fifld);
                } flsf if (dur == 'z') {
                    if (dount > 4) {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    } flsf if (dount == 4) {
                        bppfndZonfTfxt(TfxtStylf.FULL);
                    } flsf {
                        bppfndZonfTfxt(TfxtStylf.SHORT);
                    }
                } flsf if (dur == 'V') {
                    if (dount != 2) {
                        tirow nfw IllfgblArgumfntExdfption("Pbttfrn lfttfr dount must bf 2: " + dur);
                    }
                    bppfndZonfId();
                } flsf if (dur == 'Z') {
                    if (dount < 4) {
                        bppfndOffsft("+HHMM", "+0000");
                    } flsf if (dount == 4) {
                        bppfndLodblizfdOffsft(TfxtStylf.FULL);
                    } flsf if (dount == 5) {
                        bppfndOffsft("+HH:MM:ss","Z");
                    } flsf {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                } flsf if (dur == 'O') {
                    if (dount == 1) {
                        bppfndLodblizfdOffsft(TfxtStylf.SHORT);
                    } flsf if (dount == 4) {
                        bppfndLodblizfdOffsft(TfxtStylf.FULL);
                    } flsf {
                        tirow nfw IllfgblArgumfntExdfption("Pbttfrn lfttfr dount must bf 1 or 4: " + dur);
                    }
                } flsf if (dur == 'X') {
                    if (dount > 5) {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndOffsft(OffsftIdPrintfrPbrsfr.PATTERNS[dount + (dount == 1 ? 0 : 1)], "Z");
                } flsf if (dur == 'x') {
                    if (dount > 5) {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    String zfro = (dount == 1 ? "+00" : (dount % 2 == 0 ? "+0000" : "+00:00"));
                    bppfndOffsft(OffsftIdPrintfrPbrsfr.PATTERNS[dount + (dount == 1 ? 0 : 1)], zfro);
                } flsf if (dur == 'W') {
                    // Fiflds dffinfd by Lodblf
                    if (dount > 1) {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf if (dur == 'w') {
                    // Fiflds dffinfd by Lodblf
                    if (dount > 2) {
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf if (dur == 'Y') {
                    // Fiflds dffinfd by Lodblf
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Unknown pbttfrn lfttfr: " + dur);
                }
                pos--;

            } flsf if (dur == '\'') {
                // pbrsf litfrbls
                int stbrt = pos++;
                for ( ; pos < pbttfrn.lfngti(); pos++) {
                    if (pbttfrn.dibrAt(pos) == '\'') {
                        if (pos + 1 < pbttfrn.lfngti() && pbttfrn.dibrAt(pos + 1) == '\'') {
                            pos++;
                        } flsf {
                            brfbk;  // fnd of litfrbl
                        }
                    }
                }
                if (pos >= pbttfrn.lfngti()) {
                    tirow nfw IllfgblArgumfntExdfption("Pbttfrn fnds witi bn indomplftf string litfrbl: " + pbttfrn);
                }
                String str = pbttfrn.substring(stbrt + 1, pos);
                if (str.lfngti() == 0) {
                    bppfndLitfrbl('\'');
                } flsf {
                    bppfndLitfrbl(str.rfplbdf("''", "'"));
                }

            } flsf if (dur == '[') {
                optionblStbrt();

            } flsf if (dur == ']') {
                if (bdtivf.pbrfnt == null) {
                    tirow nfw IllfgblArgumfntExdfption("Pbttfrn invblid bs it dontbins ] witiout prfvious [");
                }
                optionblEnd();

            } flsf if (dur == '{' || dur == '}' || dur == '#') {
                tirow nfw IllfgblArgumfntExdfption("Pbttfrn indludfs rfsfrvfd dibrbdtfr: '" + dur + "'");
            } flsf {
                bppfndLitfrbl(dur);
            }
        }
    }

    @SupprfssWbrnings("fblltirougi")
    privbtf void pbrsfFifld(dibr dur, int dount, TfmporblFifld fifld) {
        boolfbn stbndblonf = fblsf;
        switdi (dur) {
            dbsf 'u':
            dbsf 'y':
                if (dount == 2) {
                    bppfndVblufRfdudfd(fifld, 2, 2, RfdudfdPrintfrPbrsfr.BASE_DATE);
                } flsf if (dount < 4) {
                    bppfndVbluf(fifld, dount, 19, SignStylf.NORMAL);
                } flsf {
                    bppfndVbluf(fifld, dount, 19, SignStylf.EXCEEDS_PAD);
                }
                brfbk;
            dbsf 'd':
                if (dount == 2) {
                    tirow nfw IllfgblArgumfntExdfption("Invblid pbttfrn \"dd\"");
                }
                /*fblltirougi*/
            dbsf 'L':
            dbsf 'q':
                stbndblonf = truf;
                /*fblltirougi*/
            dbsf 'M':
            dbsf 'Q':
            dbsf 'E':
            dbsf 'f':
                switdi (dount) {
                    dbsf 1:
                    dbsf 2:
                        if (dur == 'd' || dur == 'f') {
                            bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                        } flsf if (dur == 'E') {
                            bppfndTfxt(fifld, TfxtStylf.SHORT);
                        } flsf {
                            if (dount == 1) {
                                bppfndVbluf(fifld);
                            } flsf {
                                bppfndVbluf(fifld, 2);
                            }
                        }
                        brfbk;
                    dbsf 3:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.SHORT_STANDALONE : TfxtStylf.SHORT);
                        brfbk;
                    dbsf 4:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.FULL_STANDALONE : TfxtStylf.FULL);
                        brfbk;
                    dbsf 5:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.NARROW_STANDALONE : TfxtStylf.NARROW);
                        brfbk;
                    dffbult:
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'b':
                if (dount == 1) {
                    bppfndTfxt(fifld, TfxtStylf.SHORT);
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'G':
                switdi (dount) {
                    dbsf 1:
                    dbsf 2:
                    dbsf 3:
                        bppfndTfxt(fifld, TfxtStylf.SHORT);
                        brfbk;
                    dbsf 4:
                        bppfndTfxt(fifld, TfxtStylf.FULL);
                        brfbk;
                    dbsf 5:
                        bppfndTfxt(fifld, TfxtStylf.NARROW);
                        brfbk;
                    dffbult:
                        tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'S':
                bppfndFrbdtion(NANO_OF_SECOND, dount, dount, fblsf);
                brfbk;
            dbsf 'F':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'd':
            dbsf 'i':
            dbsf 'H':
            dbsf 'k':
            dbsf 'K':
            dbsf 'm':
            dbsf 's':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf if (dount == 2) {
                    bppfndVbluf(fifld, dount);
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'D':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf if (dount <= 3) {
                    bppfndVbluf(fifld, dount);
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dffbult:
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf {
                    bppfndVbluf(fifld, dount);
                }
                brfbk;
        }
    }

    /** Mbp of lfttfrs to fiflds. */
    privbtf stbtid finbl Mbp<Cibrbdtfr, TfmporblFifld> FIELD_MAP = nfw HbsiMbp<>();
    stbtid {
        // SDF = SimplfDbtfFormbt
        FIELD_MAP.put('G', CironoFifld.ERA);                       // SDF, LDML (difffrfnt to boti for 1/2 dibrs)
        FIELD_MAP.put('y', CironoFifld.YEAR_OF_ERA);               // SDF, LDML
        FIELD_MAP.put('u', CironoFifld.YEAR);                      // LDML (difffrfnt in SDF)
        FIELD_MAP.put('Q', IsoFiflds.QUARTER_OF_YEAR);             // LDML (rfmovfd qubrtfr from 310)
        FIELD_MAP.put('q', IsoFiflds.QUARTER_OF_YEAR);             // LDML (stbnd-blonf)
        FIELD_MAP.put('M', CironoFifld.MONTH_OF_YEAR);             // SDF, LDML
        FIELD_MAP.put('L', CironoFifld.MONTH_OF_YEAR);             // SDF, LDML (stbnd-blonf)
        FIELD_MAP.put('D', CironoFifld.DAY_OF_YEAR);               // SDF, LDML
        FIELD_MAP.put('d', CironoFifld.DAY_OF_MONTH);              // SDF, LDML
        FIELD_MAP.put('F', CironoFifld.ALIGNED_DAY_OF_WEEK_IN_MONTH);  // SDF, LDML
        FIELD_MAP.put('E', CironoFifld.DAY_OF_WEEK);               // SDF, LDML (difffrfnt to boti for 1/2 dibrs)
        FIELD_MAP.put('d', CironoFifld.DAY_OF_WEEK);               // LDML (stbnd-blonf)
        FIELD_MAP.put('f', CironoFifld.DAY_OF_WEEK);               // LDML (nffds lodblizfd wffk numbfr)
        FIELD_MAP.put('b', CironoFifld.AMPM_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('H', CironoFifld.HOUR_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('k', CironoFifld.CLOCK_HOUR_OF_DAY);         // SDF, LDML
        FIELD_MAP.put('K', CironoFifld.HOUR_OF_AMPM);              // SDF, LDML
        FIELD_MAP.put('i', CironoFifld.CLOCK_HOUR_OF_AMPM);        // SDF, LDML
        FIELD_MAP.put('m', CironoFifld.MINUTE_OF_HOUR);            // SDF, LDML
        FIELD_MAP.put('s', CironoFifld.SECOND_OF_MINUTE);          // SDF, LDML
        FIELD_MAP.put('S', CironoFifld.NANO_OF_SECOND);            // LDML (SDF usfs milli-of-sfdond numbfr)
        FIELD_MAP.put('A', CironoFifld.MILLI_OF_DAY);              // LDML
        FIELD_MAP.put('n', CironoFifld.NANO_OF_SECOND);            // 310 (proposfd for LDML)
        FIELD_MAP.put('N', CironoFifld.NANO_OF_DAY);               // 310 (proposfd for LDML)
        // 310 - z - timf-zonf nbmfs, mbtdifs LDML bnd SimplfDbtfFormbt 1 to 4
        // 310 - Z - mbtdifs SimplfDbtfFormbt bnd LDML
        // 310 - V - timf-zonf id, mbtdifs LDML
        // 310 - p - prffix for pbdding
        // 310 - X - mbtdifs LDML, blmost mbtdifs SDF for 1, fxbdt mbtdi 2&3, fxtfndfd 4&5
        // 310 - x - mbtdifs LDML
        // 310 - w, W, bnd Y brf lodblizfd forms mbtdiing LDML
        // LDML - U - dydlf yfbr nbmf, not supportfd by 310 yft
        // LDML - l - dfprfdbtfd
        // LDML - j - not rflfvbnt
        // LDML - g - modififd-julibn-dby
        // LDML - v,V - fxtfndfd timf-zonf nbmfs
    }

    //-----------------------------------------------------------------------
    /**
     * Cbusfs tif nfxt bddfd printfr/pbrsfr to pbd to b fixfd widti using b spbdf.
     * <p>
     * Tiis pbdding will pbd to b fixfd widti using spbdfs.
     * <p>
     * During formbtting, tif dfdorbtfd flfmfnt will bf output bnd tifn pbddfd
     * to tif spfdififd widti. An fxdfption will bf tirown during formbtting if
     * tif pbd widti is fxdffdfd.
     * <p>
     * During pbrsing, tif pbdding bnd dfdorbtfd flfmfnt brf pbrsfd.
     * If pbrsing is lfnifnt, tifn tif pbd widti is trfbtfd bs b mbximum.
     * Tif pbdding is pbrsfd grffdily. Tius, if tif dfdorbtfd flfmfnt stbrts witi
     * tif pbd dibrbdtfr, it will not bf pbrsfd.
     *
     * @pbrbm pbdWidti  tif pbd widti, 1 or grfbtfr
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if pbd widti is too smbll
     */
    publid DbtfTimfFormbttfrBuildfr pbdNfxt(int pbdWidti) {
        rfturn pbdNfxt(pbdWidti, ' ');
    }

    /**
     * Cbusfs tif nfxt bddfd printfr/pbrsfr to pbd to b fixfd widti.
     * <p>
     * Tiis pbdding is intfndfd for pbdding otifr tibn zfro-pbdding.
     * Zfro-pbdding siould bf bdiifvfd using tif bppfndVbluf mftiods.
     * <p>
     * During formbtting, tif dfdorbtfd flfmfnt will bf output bnd tifn pbddfd
     * to tif spfdififd widti. An fxdfption will bf tirown during formbtting if
     * tif pbd widti is fxdffdfd.
     * <p>
     * During pbrsing, tif pbdding bnd dfdorbtfd flfmfnt brf pbrsfd.
     * If pbrsing is lfnifnt, tifn tif pbd widti is trfbtfd bs b mbximum.
     * If pbrsing is dbsf insfnsitivf, tifn tif pbd dibrbdtfr is mbtdifd ignoring dbsf.
     * Tif pbdding is pbrsfd grffdily. Tius, if tif dfdorbtfd flfmfnt stbrts witi
     * tif pbd dibrbdtfr, it will not bf pbrsfd.
     *
     * @pbrbm pbdWidti  tif pbd widti, 1 or grfbtfr
     * @pbrbm pbdCibr  tif pbd dibrbdtfr
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblArgumfntExdfption if pbd widti is too smbll
     */
    publid DbtfTimfFormbttfrBuildfr pbdNfxt(int pbdWidti, dibr pbdCibr) {
        if (pbdWidti < 1) {
            tirow nfw IllfgblArgumfntExdfption("Tif pbd widti must bf bt lfbst onf but wbs " + pbdWidti);
        }
        bdtivf.pbdNfxtWidti = pbdWidti;
        bdtivf.pbdNfxtCibr = pbdCibr;
        bdtivf.vblufPbrsfrIndfx = -1;
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Mbrk tif stbrt of bn optionbl sfdtion.
     * <p>
     * Tif output of formbtting dbn indludf optionbl sfdtions, wiidi mby bf nfstfd.
     * An optionbl sfdtion is stbrtfd by dblling tiis mftiod bnd fndfd by dblling
     * {@link #optionblEnd()} or by fnding tif build prodfss.
     * <p>
     * All flfmfnts in tif optionbl sfdtion brf trfbtfd bs optionbl.
     * During formbtting, tif sfdtion is only output if dbtb is bvbilbblf in tif
     * {@dodf TfmporblAddfssor} for bll tif flfmfnts in tif sfdtion.
     * During pbrsing, tif wiolf sfdtion mby bf missing from tif pbrsfd string.
     * <p>
     * For fxbmplf, donsidfr b buildfr sftup bs
     * {@dodf buildfr.bppfndVbluf(HOUR_OF_DAY,2).optionblStbrt().bppfndVbluf(MINUTE_OF_HOUR,2)}.
     * Tif optionbl sfdtion fnds butombtidblly bt tif fnd of tif buildfr.
     * During formbtting, tif minutf will only bf output if its vbluf dbn bf obtbinfd from tif dbtf-timf.
     * During pbrsing, tif input will bf suddfssfully pbrsfd wiftifr tif minutf is prfsfnt or not.
     *
     * @rfturn tiis, for dibining, not null
     */
    publid DbtfTimfFormbttfrBuildfr optionblStbrt() {
        bdtivf.vblufPbrsfrIndfx = -1;
        bdtivf = nfw DbtfTimfFormbttfrBuildfr(bdtivf, truf);
        rfturn tiis;
    }

    /**
     * Ends bn optionbl sfdtion.
     * <p>
     * Tif output of formbtting dbn indludf optionbl sfdtions, wiidi mby bf nfstfd.
     * An optionbl sfdtion is stbrtfd by dblling {@link #optionblStbrt()} bnd fndfd
     * using tiis mftiod (or bt tif fnd of tif buildfr).
     * <p>
     * Cblling tiis mftiod witiout ibving prfviously dbllfd {@dodf optionblStbrt}
     * will tirow bn fxdfption.
     * Cblling tiis mftiod immfdibtfly bftfr dblling {@dodf optionblStbrt} ibs no ffffdt
     * on tif formbttfr otifr tibn fnding tif (fmpty) optionbl sfdtion.
     * <p>
     * All flfmfnts in tif optionbl sfdtion brf trfbtfd bs optionbl.
     * During formbtting, tif sfdtion is only output if dbtb is bvbilbblf in tif
     * {@dodf TfmporblAddfssor} for bll tif flfmfnts in tif sfdtion.
     * During pbrsing, tif wiolf sfdtion mby bf missing from tif pbrsfd string.
     * <p>
     * For fxbmplf, donsidfr b buildfr sftup bs
     * {@dodf buildfr.bppfndVbluf(HOUR_OF_DAY,2).optionblStbrt().bppfndVbluf(MINUTE_OF_HOUR,2).optionblEnd()}.
     * During formbtting, tif minutf will only bf output if its vbluf dbn bf obtbinfd from tif dbtf-timf.
     * During pbrsing, tif input will bf suddfssfully pbrsfd wiftifr tif minutf is prfsfnt or not.
     *
     * @rfturn tiis, for dibining, not null
     * @tirows IllfgblStbtfExdfption if tifrf wbs no prfvious dbll to {@dodf optionblStbrt}
     */
    publid DbtfTimfFormbttfrBuildfr optionblEnd() {
        if (bdtivf.pbrfnt == null) {
            tirow nfw IllfgblStbtfExdfption("Cbnnot dbll optionblEnd() bs tifrf wbs no prfvious dbll to optionblStbrt()");
        }
        if (bdtivf.printfrPbrsfrs.sizf() > 0) {
            CompositfPrintfrPbrsfr dpp = nfw CompositfPrintfrPbrsfr(bdtivf.printfrPbrsfrs, bdtivf.optionbl);
            bdtivf = bdtivf.pbrfnt;
            bppfndIntfrnbl(dpp);
        } flsf {
            bdtivf = bdtivf.pbrfnt;
        }
        rfturn tiis;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b printfr bnd/or pbrsfr to tif intfrnbl list ibndling pbdding.
     *
     * @pbrbm pp  tif printfr-pbrsfr to bdd, not null
     * @rfturn tif indfx into tif bdtivf pbrsfrs list
     */
    privbtf int bppfndIntfrnbl(DbtfTimfPrintfrPbrsfr pp) {
        Objfdts.rfquirfNonNull(pp, "pp");
        if (bdtivf.pbdNfxtWidti > 0) {
            if (pp != null) {
                pp = nfw PbdPrintfrPbrsfrDfdorbtor(pp, bdtivf.pbdNfxtWidti, bdtivf.pbdNfxtCibr);
            }
            bdtivf.pbdNfxtWidti = 0;
            bdtivf.pbdNfxtCibr = 0;
        }
        bdtivf.printfrPbrsfrs.bdd(pp);
        bdtivf.vblufPbrsfrIndfx = -1;
        rfturn bdtivf.printfrPbrsfrs.sizf() - 1;
    }

    //-----------------------------------------------------------------------
    /**
     * Complftfs tiis buildfr by drfbting tif {@dodf DbtfTimfFormbttfr}
     * using tif dffbult lodblf.
     * <p>
     * Tiis will drfbtf b formbttfr witi tif {@linkplbin Lodblf#gftDffbult(Lodblf.Cbtfgory) dffbult FORMAT lodblf}.
     * Numbfrs will bf printfd bnd pbrsfd using tif stbndbrd DfdimblStylf.
     * Tif rfsolvfr stylf will bf {@link RfsolvfrStylf#SMART SMART}.
     * <p>
     * Cblling tiis mftiod will fnd bny opfn optionbl sfdtions by rfpfbtfdly
     * dblling {@link #optionblEnd()} bfforf drfbting tif formbttfr.
     * <p>
     * Tiis buildfr dbn still bf usfd bftfr drfbting tif formbttfr if dfsirfd,
     * bltiougi tif stbtf mby ibvf bffn dibngfd by dblls to {@dodf optionblEnd}.
     *
     * @rfturn tif drfbtfd formbttfr, not null
     */
    publid DbtfTimfFormbttfr toFormbttfr() {
        rfturn toFormbttfr(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT));
    }

    /**
     * Complftfs tiis buildfr by drfbting tif {@dodf DbtfTimfFormbttfr}
     * using tif spfdififd lodblf.
     * <p>
     * Tiis will drfbtf b formbttfr witi tif spfdififd lodblf.
     * Numbfrs will bf printfd bnd pbrsfd using tif stbndbrd DfdimblStylf.
     * Tif rfsolvfr stylf will bf {@link RfsolvfrStylf#SMART SMART}.
     * <p>
     * Cblling tiis mftiod will fnd bny opfn optionbl sfdtions by rfpfbtfdly
     * dblling {@link #optionblEnd()} bfforf drfbting tif formbttfr.
     * <p>
     * Tiis buildfr dbn still bf usfd bftfr drfbting tif formbttfr if dfsirfd,
     * bltiougi tif stbtf mby ibvf bffn dibngfd by dblls to {@dodf optionblEnd}.
     *
     * @pbrbm lodblf  tif lodblf to usf for formbtting, not null
     * @rfturn tif drfbtfd formbttfr, not null
     */
    publid DbtfTimfFormbttfr toFormbttfr(Lodblf lodblf) {
        rfturn toFormbttfr(lodblf, RfsolvfrStylf.SMART, null);
    }

    /**
     * Complftfs tiis buildfr by drfbting tif formbttfr.
     * Tiis usfs tif dffbult lodblf.
     *
     * @pbrbm rfsolvfrStylf  tif rfsolvfr stylf to usf, not null
     * @rfturn tif drfbtfd formbttfr, not null
     */
    DbtfTimfFormbttfr toFormbttfr(RfsolvfrStylf rfsolvfrStylf, Cironology dirono) {
        rfturn toFormbttfr(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), rfsolvfrStylf, dirono);
    }

    /**
     * Complftfs tiis buildfr by drfbting tif formbttfr.
     *
     * @pbrbm lodblf  tif lodblf to usf for formbtting, not null
     * @pbrbm dirono  tif dironology to usf, mby bf null
     * @rfturn tif drfbtfd formbttfr, not null
     */
    privbtf DbtfTimfFormbttfr toFormbttfr(Lodblf lodblf, RfsolvfrStylf rfsolvfrStylf, Cironology dirono) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        wiilf (bdtivf.pbrfnt != null) {
            optionblEnd();
        }
        CompositfPrintfrPbrsfr pp = nfw CompositfPrintfrPbrsfr(printfrPbrsfrs, fblsf);
        rfturn nfw DbtfTimfFormbttfr(pp, lodblf, DfdimblStylf.STANDARD,
                rfsolvfrStylf, null, dirono, null);
    }

    //-----------------------------------------------------------------------
    /**
     * Strbtfgy for formbtting/pbrsing dbtf-timf informbtion.
     * <p>
     * Tif printfr mby formbt bny pbrt, or tif wiolf, of tif input dbtf-timf objfdt.
     * Typidblly, b domplftf formbt is donstrudtfd from b numbfr of smbllfr
     * units, fbdi outputting b singlf fifld.
     * <p>
     * Tif pbrsfr mby pbrsf bny pifdf of tfxt from tif input, storing tif rfsult
     * in tif dontfxt. Typidblly, fbdi individubl pbrsfr will just pbrsf onf
     * fifld, sudi bs tif dby-of-monti, storing tif vbluf in tif dontfxt.
     * Ondf tif pbrsf is domplftf, tif dbllfr will tifn rfsolvf tif pbrsfd vblufs
     * to drfbtf tif dfsirfd objfdt, sudi bs b {@dodf LodblDbtf}.
     * <p>
     * Tif pbrsf position will bf updbtfd during tif pbrsf. Pbrsing will stbrt bt
     * tif spfdififd indfx bnd tif rfturn vbluf spfdififs tif nfw pbrsf position
     * for tif nfxt pbrsfr. If bn frror oddurs, tif rfturnfd indfx will bf nfgbtivf
     * bnd will ibvf tif frror position fndodfd using tif domplfmfnt opfrbtor.
     *
     * @implSpfd
     * Tiis intfrfbdf must bf implfmfntfd witi dbrf to fnsurf otifr dlbssfs opfrbtf dorrfdtly.
     * All implfmfntbtions tibt dbn bf instbntibtfd must bf finbl, immutbblf bnd tirfbd-sbff.
     * <p>
     * Tif dontfxt is not b tirfbd-sbff objfdt bnd b nfw instbndf will bf drfbtfd
     * for fbdi formbt tibt oddurs. Tif dontfxt must not bf storfd in bn instbndf
     * vbribblf or sibrfd witi bny otifr tirfbds.
     */
    intfrfbdf DbtfTimfPrintfrPbrsfr {

        /**
         * Prints tif dbtf-timf objfdt to tif bufffr.
         * <p>
         * Tif dontfxt iolds informbtion to usf during tif formbt.
         * It blso dontbins tif dbtf-timf informbtion to bf printfd.
         * <p>
         * Tif bufffr must not bf mutbtfd bfyond tif dontfnt dontrollfd by tif implfmfntbtion.
         *
         * @pbrbm dontfxt  tif dontfxt to formbt using, not null
         * @pbrbm buf  tif bufffr to bppfnd to, not null
         * @rfturn fblsf if unbblf to qufry tif vbluf from tif dbtf-timf, truf otifrwisf
         * @tirows DbtfTimfExdfption if tif dbtf-timf dbnnot bf printfd suddfssfully
         */
        boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf);

        /**
         * Pbrsfs tfxt into dbtf-timf informbtion.
         * <p>
         * Tif dontfxt iolds informbtion to usf during tif pbrsf.
         * It is blso usfd to storf tif pbrsfd dbtf-timf informbtion.
         *
         * @pbrbm dontfxt  tif dontfxt to usf bnd pbrsf into, not null
         * @pbrbm tfxt  tif input tfxt to pbrsf, not null
         * @pbrbm position  tif position to stbrt pbrsing bt, from 0 to tif tfxt lfngti
         * @rfturn tif nfw pbrsf position, wifrf nfgbtivf mfbns bn frror witi tif
         *  frror position fndodfd using tif domplfmfnt ~ opfrbtor
         * @tirows NullPointfrExdfption if tif dontfxt or tfxt is null
         * @tirows IndfxOutOfBoundsExdfption if tif position is invblid
         */
        int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position);
    }

    //-----------------------------------------------------------------------
    /**
     * Compositf printfr bnd pbrsfr.
     */
    stbtid finbl dlbss CompositfPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl DbtfTimfPrintfrPbrsfr[] printfrPbrsfrs;
        privbtf finbl boolfbn optionbl;

        CompositfPrintfrPbrsfr(List<DbtfTimfPrintfrPbrsfr> printfrPbrsfrs, boolfbn optionbl) {
            tiis(printfrPbrsfrs.toArrby(nfw DbtfTimfPrintfrPbrsfr[printfrPbrsfrs.sizf()]), optionbl);
        }

        CompositfPrintfrPbrsfr(DbtfTimfPrintfrPbrsfr[] printfrPbrsfrs, boolfbn optionbl) {
            tiis.printfrPbrsfrs = printfrPbrsfrs;
            tiis.optionbl = optionbl;
        }

        /**
         * Rfturns b dopy of tiis printfr-pbrsfr witi tif optionbl flbg dibngfd.
         *
         * @pbrbm optionbl  tif optionbl flbg to sft in tif dopy
         * @rfturn tif nfw printfr-pbrsfr, not null
         */
        publid CompositfPrintfrPbrsfr witiOptionbl(boolfbn optionbl) {
            if (optionbl == tiis.optionbl) {
                rfturn tiis;
            }
            rfturn nfw CompositfPrintfrPbrsfr(printfrPbrsfrs, optionbl);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            int lfngti = buf.lfngti();
            if (optionbl) {
                dontfxt.stbrtOptionbl();
            }
            try {
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    if (pp.formbt(dontfxt, buf) == fblsf) {
                        buf.sftLfngti(lfngti);  // rfsft bufffr
                        rfturn truf;
                    }
                }
            } finblly {
                if (optionbl) {
                    dontfxt.fndOptionbl();
                }
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            if (optionbl) {
                dontfxt.stbrtOptionbl();
                int pos = position;
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    pos = pp.pbrsf(dontfxt, tfxt, pos);
                    if (pos < 0) {
                        dontfxt.fndOptionbl(fblsf);
                        rfturn position;  // rfturn originbl position
                    }
                }
                dontfxt.fndOptionbl(truf);
                rfturn pos;
            } flsf {
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    position = pp.pbrsf(dontfxt, tfxt, position);
                    if (position < 0) {
                        brfbk;
                    }
                }
                rfturn position;
            }
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr buf = nfw StringBuildfr();
            if (printfrPbrsfrs != null) {
                buf.bppfnd(optionbl ? "[" : "(");
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    buf.bppfnd(pp);
                }
                buf.bppfnd(optionbl ? "]" : ")");
            }
            rfturn buf.toString();
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Pbds tif output to b fixfd widti.
     */
    stbtid finbl dlbss PbdPrintfrPbrsfrDfdorbtor implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl DbtfTimfPrintfrPbrsfr printfrPbrsfr;
        privbtf finbl int pbdWidti;
        privbtf finbl dibr pbdCibr;

        /**
         * Construdtor.
         *
         * @pbrbm printfrPbrsfr  tif printfr, not null
         * @pbrbm pbdWidti  tif widti to pbd to, 1 or grfbtfr
         * @pbrbm pbdCibr  tif pbd dibrbdtfr
         */
        PbdPrintfrPbrsfrDfdorbtor(DbtfTimfPrintfrPbrsfr printfrPbrsfr, int pbdWidti, dibr pbdCibr) {
            // input difdkfd by DbtfTimfFormbttfrBuildfr
            tiis.printfrPbrsfr = printfrPbrsfr;
            tiis.pbdWidti = pbdWidti;
            tiis.pbdCibr = pbdCibr;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            int prfLfn = buf.lfngti();
            if (printfrPbrsfr.formbt(dontfxt, buf) == fblsf) {
                rfturn fblsf;
            }
            int lfn = buf.lfngti() - prfLfn;
            if (lfn > pbdWidti) {
                tirow nfw DbtfTimfExdfption(
                    "Cbnnot print bs output of " + lfn + " dibrbdtfrs fxdffds pbd widti of " + pbdWidti);
            }
            for (int i = 0; i < pbdWidti - lfn; i++) {
                buf.insfrt(prfLfn, pbdCibr);
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            // dbdif dontfxt bfforf dibngfd by dfdorbtfd pbrsfr
            finbl boolfbn stridt = dontfxt.isStridt();
            // pbrsf
            if (position > tfxt.lfngti()) {
                tirow nfw IndfxOutOfBoundsExdfption();
            }
            if (position == tfxt.lfngti()) {
                rfturn ~position;  // no morf dibrbdtfrs in tif string
            }
            int fndPos = position + pbdWidti;
            if (fndPos > tfxt.lfngti()) {
                if (stridt) {
                    rfturn ~position;  // not fnougi dibrbdtfrs in tif string to mfft tif pbrsf widti
                }
                fndPos = tfxt.lfngti();
            }
            int pos = position;
            wiilf (pos < fndPos && dontfxt.dibrEqubls(tfxt.dibrAt(pos), pbdCibr)) {
                pos++;
            }
            tfxt = tfxt.subSfqufndf(0, fndPos);
            int rfsultPos = printfrPbrsfr.pbrsf(dontfxt, tfxt, pos);
            if (rfsultPos != fndPos && stridt) {
                rfturn ~(position + pos);  // pbrsf of dfdorbtfd fifld didn't pbrsf to tif fnd
            }
            rfturn rfsultPos;
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Pbd(" + printfrPbrsfr + "," + pbdWidti + (pbdCibr == ' ' ? ")" : ",'" + pbdCibr + "')");
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Enumfrbtion to bpply simplf pbrsf sfttings.
     */
    stbtid fnum SfttingsPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        SENSITIVE,
        INSENSITIVE,
        STRICT,
        LENIENT;

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn truf;  // notiing to do ifrf
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            // using ordinbls to bvoid jbvbd syntiftid innfr dlbss
            switdi (ordinbl()) {
                dbsf 0: dontfxt.sftCbsfSfnsitivf(truf); brfbk;
                dbsf 1: dontfxt.sftCbsfSfnsitivf(fblsf); brfbk;
                dbsf 2: dontfxt.sftStridt(truf); brfbk;
                dbsf 3: dontfxt.sftStridt(fblsf); brfbk;
            }
            rfturn position;
        }

        @Ovfrridf
        publid String toString() {
            // using ordinbls to bvoid jbvbd syntiftid innfr dlbss
            switdi (ordinbl()) {
                dbsf 0: rfturn "PbrsfCbsfSfnsitivf(truf)";
                dbsf 1: rfturn "PbrsfCbsfSfnsitivf(fblsf)";
                dbsf 2: rfturn "PbrsfStridt(truf)";
                dbsf 3: rfturn "PbrsfStridt(fblsf)";
            }
            tirow nfw IllfgblStbtfExdfption("Unrfbdibblf");
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Dffbults b vbluf into tif pbrsf if not durrfntly prfsfnt.
     */
    stbtid dlbss DffbultVblufPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl long vbluf;

        DffbultVblufPbrsfr(TfmporblFifld fifld, long vbluf) {
            tiis.fifld = fifld;
            tiis.vbluf = vbluf;
        }

        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn truf;
        }

        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            if (dontfxt.gftPbrsfd(fifld) == null) {
                dontfxt.sftPbrsfdFifld(fifld, vbluf, position, position);
            }
            rfturn position;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b dibrbdtfr litfrbl.
     */
    stbtid finbl dlbss CibrLitfrblPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl dibr litfrbl;

        CibrLitfrblPrintfrPbrsfr(dibr litfrbl) {
            tiis.litfrbl = litfrbl;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            buf.bppfnd(litfrbl);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int lfngti = tfxt.lfngti();
            if (position == lfngti) {
                rfturn ~position;
            }
            dibr di = tfxt.dibrAt(position);
            if (di != litfrbl) {
                if (dontfxt.isCbsfSfnsitivf() ||
                        (Cibrbdtfr.toUppfrCbsf(di) != Cibrbdtfr.toUppfrCbsf(litfrbl) &&
                         Cibrbdtfr.toLowfrCbsf(di) != Cibrbdtfr.toLowfrCbsf(litfrbl))) {
                    rfturn ~position;
                }
            }
            rfturn position + 1;
        }

        @Ovfrridf
        publid String toString() {
            if (litfrbl == '\'') {
                rfturn "''";
            }
            rfturn "'" + litfrbl + "'";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b string litfrbl.
     */
    stbtid finbl dlbss StringLitfrblPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl String litfrbl;

        StringLitfrblPrintfrPbrsfr(String litfrbl) {
            tiis.litfrbl = litfrbl;  // vblidbtfd by dbllfr
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            buf.bppfnd(litfrbl);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int lfngti = tfxt.lfngti();
            if (position > lfngti || position < 0) {
                tirow nfw IndfxOutOfBoundsExdfption();
            }
            if (dontfxt.subSfqufndfEqubls(tfxt, position, litfrbl, 0, litfrbl.lfngti()) == fblsf) {
                rfturn ~position;
            }
            rfturn position + litfrbl.lfngti();
        }

        @Ovfrridf
        publid String toString() {
            String donvfrtfd = litfrbl.rfplbdf("'", "''");
            rfturn "'" + donvfrtfd + "'";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b numfrid dbtf-timf fifld witi optionbl pbdding.
     */
    stbtid dlbss NumbfrPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {

        /**
         * Arrby of 10 to tif powfr of n.
         */
        stbtid finbl long[] EXCEED_POINTS = nfw long[] {
            0L,
            10L,
            100L,
            1000L,
            10000L,
            100000L,
            1000000L,
            10000000L,
            100000000L,
            1000000000L,
            10000000000L,
        };

        finbl TfmporblFifld fifld;
        finbl int minWidti;
        finbl int mbxWidti;
        privbtf finbl SignStylf signStylf;
        finbl int subsfqufntWidti;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  tif fifld to formbt, not null
         * @pbrbm minWidti  tif minimum fifld widti, from 1 to 19
         * @pbrbm mbxWidti  tif mbximum fifld widti, from minWidti to 19
         * @pbrbm signStylf  tif positivf/nfgbtivf sign stylf, not null
         */
        NumbfrPrintfrPbrsfr(TfmporblFifld fifld, int minWidti, int mbxWidti, SignStylf signStylf) {
            // vblidbtfd by dbllfr
            tiis.fifld = fifld;
            tiis.minWidti = minWidti;
            tiis.mbxWidti = mbxWidti;
            tiis.signStylf = signStylf;
            tiis.subsfqufntWidti = 0;
        }

        /**
         * Construdtor.
         *
         * @pbrbm fifld  tif fifld to formbt, not null
         * @pbrbm minWidti  tif minimum fifld widti, from 1 to 19
         * @pbrbm mbxWidti  tif mbximum fifld widti, from minWidti to 19
         * @pbrbm signStylf  tif positivf/nfgbtivf sign stylf, not null
         * @pbrbm subsfqufntWidti  tif widti of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr,
         *  -1 if fixfd widti duf to bdtivf bdjbdfnt pbrsing
         */
        protfdtfd NumbfrPrintfrPbrsfr(TfmporblFifld fifld, int minWidti, int mbxWidti, SignStylf signStylf, int subsfqufntWidti) {
            // vblidbtfd by dbllfr
            tiis.fifld = fifld;
            tiis.minWidti = minWidti;
            tiis.mbxWidti = mbxWidti;
            tiis.signStylf = signStylf;
            tiis.subsfqufntWidti = subsfqufntWidti;
        }

        /**
         * Rfturns b nfw instbndf witi fixfd widti flbg sft.
         *
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        NumbfrPrintfrPbrsfr witiFixfdWidti() {
            if (subsfqufntWidti == -1) {
                rfturn tiis;
            }
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, minWidti, mbxWidti, signStylf, -1);
        }

        /**
         * Rfturns b nfw instbndf witi bn updbtfd subsfqufnt widti.
         *
         * @pbrbm subsfqufntWidti  tif widti of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        NumbfrPrintfrPbrsfr witiSubsfqufntWidti(int subsfqufntWidti) {
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, minWidti, mbxWidti, signStylf, tiis.subsfqufntWidti + subsfqufntWidti);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vblufLong = dontfxt.gftVbluf(fifld);
            if (vblufLong == null) {
                rfturn fblsf;
            }
            long vbluf = gftVbluf(dontfxt, vblufLong);
            DfdimblStylf dfdimblStylf = dontfxt.gftDfdimblStylf();
            String str = (vbluf == Long.MIN_VALUE ? "9223372036854775808" : Long.toString(Mbti.bbs(vbluf)));
            if (str.lfngti() > mbxWidti) {
                tirow nfw DbtfTimfExdfption("Fifld " + fifld +
                    " dbnnot bf printfd bs tif vbluf " + vbluf +
                    " fxdffds tif mbximum print widti of " + mbxWidti);
            }
            str = dfdimblStylf.donvfrtNumbfrToI18N(str);

            if (vbluf >= 0) {
                switdi (signStylf) {
                    dbsf EXCEEDS_PAD:
                        if (minWidti < 19 && vbluf >= EXCEED_POINTS[minWidti]) {
                            buf.bppfnd(dfdimblStylf.gftPositivfSign());
                        }
                        brfbk;
                    dbsf ALWAYS:
                        buf.bppfnd(dfdimblStylf.gftPositivfSign());
                        brfbk;
                }
            } flsf {
                switdi (signStylf) {
                    dbsf NORMAL:
                    dbsf EXCEEDS_PAD:
                    dbsf ALWAYS:
                        buf.bppfnd(dfdimblStylf.gftNfgbtivfSign());
                        brfbk;
                    dbsf NOT_NEGATIVE:
                        tirow nfw DbtfTimfExdfption("Fifld " + fifld +
                            " dbnnot bf printfd bs tif vbluf " + vbluf +
                            " dbnnot bf nfgbtivf bddording to tif SignStylf");
                }
            }
            for (int i = 0; i < minWidti - str.lfngti(); i++) {
                buf.bppfnd(dfdimblStylf.gftZfroDigit());
            }
            buf.bppfnd(str);
            rfturn truf;
        }

        /**
         * Gfts tif vbluf to output.
         *
         * @pbrbm dontfxt  tif dontfxt
         * @pbrbm vbluf  tif vbluf of tif fifld, not null
         * @rfturn tif vbluf
         */
        long gftVbluf(DbtfTimfPrintContfxt dontfxt, long vbluf) {
            rfturn vbluf;
        }

        /**
         * For NumbfrPrintfrPbrsfr, tif widti is fixfd dfpfnding on tif
         * minWidti, mbxWidti, signStylf bnd wiftifr subsfqufnt fiflds brf fixfd.
         * @pbrbm dontfxt tif dontfxt
         * @rfturn truf if tif fifld is fixfd widti
         * @sff DbtfTimfFormbttfrBuildfr#bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)
         */
        boolfbn isFixfdWidti(DbtfTimfPbrsfContfxt dontfxt) {
            rfturn subsfqufntWidti == -1 ||
                (subsfqufntWidti > 0 && minWidti == mbxWidti && signStylf == SignStylf.NOT_NEGATIVE);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int lfngti = tfxt.lfngti();
            if (position == lfngti) {
                rfturn ~position;
            }
            dibr sign = tfxt.dibrAt(position);  // IOOBE if invblid position
            boolfbn nfgbtivf = fblsf;
            boolfbn positivf = fblsf;
            if (sign == dontfxt.gftDfdimblStylf().gftPositivfSign()) {
                if (signStylf.pbrsf(truf, dontfxt.isStridt(), minWidti == mbxWidti) == fblsf) {
                    rfturn ~position;
                }
                positivf = truf;
                position++;
            } flsf if (sign == dontfxt.gftDfdimblStylf().gftNfgbtivfSign()) {
                if (signStylf.pbrsf(fblsf, dontfxt.isStridt(), minWidti == mbxWidti) == fblsf) {
                    rfturn ~position;
                }
                nfgbtivf = truf;
                position++;
            } flsf {
                if (signStylf == SignStylf.ALWAYS && dontfxt.isStridt()) {
                    rfturn ~position;
                }
            }
            int fffMinWidti = (dontfxt.isStridt() || isFixfdWidti(dontfxt) ? minWidti : 1);
            int minEndPos = position + fffMinWidti;
            if (minEndPos > lfngti) {
                rfturn ~position;
            }
            int fffMbxWidti = (dontfxt.isStridt() || isFixfdWidti(dontfxt) ? mbxWidti : 9) + Mbti.mbx(subsfqufntWidti, 0);
            long totbl = 0;
            BigIntfgfr totblBig = null;
            int pos = position;
            for (int pbss = 0; pbss < 2; pbss++) {
                int mbxEndPos = Mbti.min(pos + fffMbxWidti, lfngti);
                wiilf (pos < mbxEndPos) {
                    dibr di = tfxt.dibrAt(pos++);
                    int digit = dontfxt.gftDfdimblStylf().donvfrtToDigit(di);
                    if (digit < 0) {
                        pos--;
                        if (pos < minEndPos) {
                            rfturn ~position;  // nffd bt lfbst min widti digits
                        }
                        brfbk;
                    }
                    if ((pos - position) > 18) {
                        if (totblBig == null) {
                            totblBig = BigIntfgfr.vblufOf(totbl);
                        }
                        totblBig = totblBig.multiply(BigIntfgfr.TEN).bdd(BigIntfgfr.vblufOf(digit));
                    } flsf {
                        totbl = totbl * 10 + digit;
                    }
                }
                if (subsfqufntWidti > 0 && pbss == 0) {
                    // rf-pbrsf now wf know tif dorrfdt widti
                    int pbrsfLfn = pos - position;
                    fffMbxWidti = Mbti.mbx(fffMinWidti, pbrsfLfn - subsfqufntWidti);
                    pos = position;
                    totbl = 0;
                    totblBig = null;
                } flsf {
                    brfbk;
                }
            }
            if (nfgbtivf) {
                if (totblBig != null) {
                    if (totblBig.fqubls(BigIntfgfr.ZERO) && dontfxt.isStridt()) {
                        rfturn ~(position - 1);  // minus zfro not bllowfd
                    }
                    totblBig = totblBig.nfgbtf();
                } flsf {
                    if (totbl == 0 && dontfxt.isStridt()) {
                        rfturn ~(position - 1);  // minus zfro not bllowfd
                    }
                    totbl = -totbl;
                }
            } flsf if (signStylf == SignStylf.EXCEEDS_PAD && dontfxt.isStridt()) {
                int pbrsfLfn = pos - position;
                if (positivf) {
                    if (pbrsfLfn <= minWidti) {
                        rfturn ~(position - 1);  // '+' only pbrsfd if minWidti fxdffdfd
                    }
                } flsf {
                    if (pbrsfLfn > minWidti) {
                        rfturn ~position;  // '+' must bf pbrsfd if minWidti fxdffdfd
                    }
                }
            }
            if (totblBig != null) {
                if (totblBig.bitLfngti() > 63) {
                    // ovfrflow, pbrsf 1 lfss digit
                    totblBig = totblBig.dividf(BigIntfgfr.TEN);
                    pos--;
                }
                rfturn sftVbluf(dontfxt, totblBig.longVbluf(), position, pos);
            }
            rfturn sftVbluf(dontfxt, totbl, position, pos);
        }

        /**
         * Storfs tif vbluf.
         *
         * @pbrbm dontfxt  tif dontfxt to storf into, not null
         * @pbrbm vbluf  tif vbluf
         * @pbrbm frrorPos  tif position of tif fifld bfing pbrsfd
         * @pbrbm suddfssPos  tif position bftfr tif fifld bfing pbrsfd
         * @rfturn tif nfw position
         */
        int sftVbluf(DbtfTimfPbrsfContfxt dontfxt, long vbluf, int frrorPos, int suddfssPos) {
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, frrorPos, suddfssPos);
        }

        @Ovfrridf
        publid String toString() {
            if (minWidti == 1 && mbxWidti == 19 && signStylf == SignStylf.NORMAL) {
                rfturn "Vbluf(" + fifld + ")";
            }
            if (minWidti == mbxWidti && signStylf == SignStylf.NOT_NEGATIVE) {
                rfturn "Vbluf(" + fifld + "," + minWidti + ")";
            }
            rfturn "Vbluf(" + fifld + "," + minWidti + "," + mbxWidti + "," + signStylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b rfdudfd numfrid dbtf-timf fifld.
     */
    stbtid finbl dlbss RfdudfdPrintfrPbrsfr fxtfnds NumbfrPrintfrPbrsfr {
        /**
         * Tif bbsf dbtf for rfdudfd vbluf pbrsing.
         */
        stbtid finbl LodblDbtf BASE_DATE = LodblDbtf.of(2000, 1, 1);

        privbtf finbl int bbsfVbluf;
        privbtf finbl CironoLodblDbtf bbsfDbtf;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  tif fifld to formbt, vblidbtfd not null
         * @pbrbm minWidti  tif minimum fifld widti, from 1 to 10
         * @pbrbm mbxWidti  tif mbximum fifld widti, from 1 to 10
         * @pbrbm bbsfVbluf  tif bbsf vbluf
         * @pbrbm bbsfDbtf  tif bbsf dbtf
         */
        RfdudfdPrintfrPbrsfr(TfmporblFifld fifld, int minWidti, int mbxWidti,
                int bbsfVbluf, CironoLodblDbtf bbsfDbtf) {
            tiis(fifld, minWidti, mbxWidti, bbsfVbluf, bbsfDbtf, 0);
            if (minWidti < 1 || minWidti > 10) {
                tirow nfw IllfgblArgumfntExdfption("Tif minWidti must bf from 1 to 10 indlusivf but wbs " + minWidti);
            }
            if (mbxWidti < 1 || mbxWidti > 10) {
                tirow nfw IllfgblArgumfntExdfption("Tif mbxWidti must bf from 1 to 10 indlusivf but wbs " + minWidti);
            }
            if (mbxWidti < minWidti) {
                tirow nfw IllfgblArgumfntExdfption("Mbximum widti must fxdffd or fqubl tif minimum widti but " +
                        mbxWidti + " < " + minWidti);
            }
            if (bbsfDbtf == null) {
                if (fifld.rbngf().isVblidVbluf(bbsfVbluf) == fblsf) {
                    tirow nfw IllfgblArgumfntExdfption("Tif bbsf vbluf must bf witiin tif rbngf of tif fifld");
                }
                if ((((long) bbsfVbluf) + EXCEED_POINTS[mbxWidti]) > Intfgfr.MAX_VALUE) {
                    tirow nfw DbtfTimfExdfption("Unbblf to bdd printfr-pbrsfr bs tif rbngf fxdffds tif dbpbdity of bn int");
                }
            }
        }

        /**
         * Construdtor.
         * Tif brgumfnts ibvf blrfbdy bffn difdkfd.
         *
         * @pbrbm fifld  tif fifld to formbt, vblidbtfd not null
         * @pbrbm minWidti  tif minimum fifld widti, from 1 to 10
         * @pbrbm mbxWidti  tif mbximum fifld widti, from 1 to 10
         * @pbrbm bbsfVbluf  tif bbsf vbluf
         * @pbrbm bbsfDbtf  tif bbsf dbtf
         * @pbrbm subsfqufntWidti tif subsfqufntWidti for tiis instbndf
         */
        privbtf RfdudfdPrintfrPbrsfr(TfmporblFifld fifld, int minWidti, int mbxWidti,
                int bbsfVbluf, CironoLodblDbtf bbsfDbtf, int subsfqufntWidti) {
            supfr(fifld, minWidti, mbxWidti, SignStylf.NOT_NEGATIVE, subsfqufntWidti);
            tiis.bbsfVbluf = bbsfVbluf;
            tiis.bbsfDbtf = bbsfDbtf;
        }

        @Ovfrridf
        long gftVbluf(DbtfTimfPrintContfxt dontfxt, long vbluf) {
            long bbsVbluf = Mbti.bbs(vbluf);
            int bbsfVbluf = tiis.bbsfVbluf;
            if (bbsfDbtf != null) {
                Cironology dirono = Cironology.from(dontfxt.gftTfmporbl());
                bbsfVbluf = dirono.dbtf(bbsfDbtf).gft(fifld);
            }
            if (vbluf >= bbsfVbluf && vbluf < bbsfVbluf + EXCEED_POINTS[minWidti]) {
                // Usf tif rfdudfd vbluf if it fits in minWidti
                rfturn bbsVbluf % EXCEED_POINTS[minWidti];
            }
            // Otifrwisf trundbtf to fit in mbxWidti
            rfturn bbsVbluf % EXCEED_POINTS[mbxWidti];
        }

        @Ovfrridf
        int sftVbluf(DbtfTimfPbrsfContfxt dontfxt, long vbluf, int frrorPos, int suddfssPos) {
            int bbsfVbluf = tiis.bbsfVbluf;
            if (bbsfDbtf != null) {
                Cironology dirono = dontfxt.gftEfffdtivfCironology();
                bbsfVbluf = dirono.dbtf(bbsfDbtf).gft(fifld);

                // In dbsf tif Cironology is dibngfd lbtfr, bdd b dbllbbdk wifn/if it dibngfs
                finbl long initiblVbluf = vbluf;
                dontfxt.bddCironoCibngfdListfnfr(
                        (_unusfd) ->  {
                            /* Rfpfbt tif sft of tif fifld using tif durrfnt Cironology
                             * Tif suddfss/frror position is ignorfd bfdbusf tif vbluf is
                             * intfntionblly bfing ovfrwrittfn.
                             */
                            sftVbluf(dontfxt, initiblVbluf, frrorPos, suddfssPos);
                        });
            }
            int pbrsfLfn = suddfssPos - frrorPos;
            if (pbrsfLfn == minWidti && vbluf >= 0) {
                long rbngf = EXCEED_POINTS[minWidti];
                long lbstPbrt = bbsfVbluf % rbngf;
                long bbsfPbrt = bbsfVbluf - lbstPbrt;
                if (bbsfVbluf > 0) {
                    vbluf = bbsfPbrt + vbluf;
                } flsf {
                    vbluf = bbsfPbrt - vbluf;
                }
                if (vbluf < bbsfVbluf) {
                    vbluf += rbngf;
                }
            }
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, frrorPos, suddfssPos);
        }

        /**
         * Rfturns b nfw instbndf witi fixfd widti flbg sft.
         *
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        @Ovfrridf
        RfdudfdPrintfrPbrsfr witiFixfdWidti() {
            if (subsfqufntWidti == -1) {
                rfturn tiis;
            }
            rfturn nfw RfdudfdPrintfrPbrsfr(fifld, minWidti, mbxWidti, bbsfVbluf, bbsfDbtf, -1);
        }

        /**
         * Rfturns b nfw instbndf witi bn updbtfd subsfqufnt widti.
         *
         * @pbrbm subsfqufntWidti  tif widti of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        @Ovfrridf
        RfdudfdPrintfrPbrsfr witiSubsfqufntWidti(int subsfqufntWidti) {
            rfturn nfw RfdudfdPrintfrPbrsfr(fifld, minWidti, mbxWidti, bbsfVbluf, bbsfDbtf,
                    tiis.subsfqufntWidti + subsfqufntWidti);
        }

        /**
         * For b RfdudfdPrintfrPbrsfr, fixfd widti is fblsf if tif modf is stridt,
         * otifrwisf it is sft bs for NumbfrPrintfrPbrsfr.
         * @pbrbm dontfxt tif dontfxt
         * @rfturn if tif fifld is fixfd widti
         * @sff DbtfTimfFormbttfrBuildfr#bppfndVblufRfdudfd(jbvb.timf.tfmporbl.TfmporblFifld, int, int, int)
         */
        @Ovfrridf
        boolfbn isFixfdWidti(DbtfTimfPbrsfContfxt dontfxt) {
           if (dontfxt.isStridt() == fblsf) {
               rfturn fblsf;
           }
           rfturn supfr.isFixfdWidti(dontfxt);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "RfdudfdVbluf(" + fifld + "," + minWidti + "," + mbxWidti + "," + (bbsfDbtf != null ? bbsfDbtf : bbsfVbluf) + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b numfrid dbtf-timf fifld witi optionbl pbdding.
     */
    stbtid finbl dlbss FrbdtionPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl int minWidti;
        privbtf finbl int mbxWidti;
        privbtf finbl boolfbn dfdimblPoint;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  tif fifld to output, not null
         * @pbrbm minWidti  tif minimum widti to output, from 0 to 9
         * @pbrbm mbxWidti  tif mbximum widti to output, from 0 to 9
         * @pbrbm dfdimblPoint  wiftifr to output tif lodblizfd dfdimbl point symbol
         */
        FrbdtionPrintfrPbrsfr(TfmporblFifld fifld, int minWidti, int mbxWidti, boolfbn dfdimblPoint) {
            Objfdts.rfquirfNonNull(fifld, "fifld");
            if (fifld.rbngf().isFixfd() == fblsf) {
                tirow nfw IllfgblArgumfntExdfption("Fifld must ibvf b fixfd sft of vblufs: " + fifld);
            }
            if (minWidti < 0 || minWidti > 9) {
                tirow nfw IllfgblArgumfntExdfption("Minimum widti must bf from 0 to 9 indlusivf but wbs " + minWidti);
            }
            if (mbxWidti < 1 || mbxWidti > 9) {
                tirow nfw IllfgblArgumfntExdfption("Mbximum widti must bf from 1 to 9 indlusivf but wbs " + mbxWidti);
            }
            if (mbxWidti < minWidti) {
                tirow nfw IllfgblArgumfntExdfption("Mbximum widti must fxdffd or fqubl tif minimum widti but " +
                        mbxWidti + " < " + minWidti);
            }
            tiis.fifld = fifld;
            tiis.minWidti = minWidti;
            tiis.mbxWidti = mbxWidti;
            tiis.dfdimblPoint = dfdimblPoint;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vbluf = dontfxt.gftVbluf(fifld);
            if (vbluf == null) {
                rfturn fblsf;
            }
            DfdimblStylf dfdimblStylf = dontfxt.gftDfdimblStylf();
            BigDfdimbl frbdtion = donvfrtToFrbdtion(vbluf);
            if (frbdtion.sdblf() == 0) {  // sdblf is zfro if vbluf is zfro
                if (minWidti > 0) {
                    if (dfdimblPoint) {
                        buf.bppfnd(dfdimblStylf.gftDfdimblSfpbrbtor());
                    }
                    for (int i = 0; i < minWidti; i++) {
                        buf.bppfnd(dfdimblStylf.gftZfroDigit());
                    }
                }
            } flsf {
                int outputSdblf = Mbti.min(Mbti.mbx(frbdtion.sdblf(), minWidti), mbxWidti);
                frbdtion = frbdtion.sftSdblf(outputSdblf, RoundingModf.FLOOR);
                String str = frbdtion.toPlbinString().substring(2);
                str = dfdimblStylf.donvfrtNumbfrToI18N(str);
                if (dfdimblPoint) {
                    buf.bppfnd(dfdimblStylf.gftDfdimblSfpbrbtor());
                }
                buf.bppfnd(str);
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int ffffdtivfMin = (dontfxt.isStridt() ? minWidti : 0);
            int ffffdtivfMbx = (dontfxt.isStridt() ? mbxWidti : 9);
            int lfngti = tfxt.lfngti();
            if (position == lfngti) {
                // vblid if wiolf fifld is optionbl, invblid if minimum widti
                rfturn (ffffdtivfMin > 0 ? ~position : position);
            }
            if (dfdimblPoint) {
                if (tfxt.dibrAt(position) != dontfxt.gftDfdimblStylf().gftDfdimblSfpbrbtor()) {
                    // vblid if wiolf fifld is optionbl, invblid if minimum widti
                    rfturn (ffffdtivfMin > 0 ? ~position : position);
                }
                position++;
            }
            int minEndPos = position + ffffdtivfMin;
            if (minEndPos > lfngti) {
                rfturn ~position;  // nffd bt lfbst min widti digits
            }
            int mbxEndPos = Mbti.min(position + ffffdtivfMbx, lfngti);
            int totbl = 0;  // dbn usf int bfdbusf wf brf only pbrsing up to 9 digits
            int pos = position;
            wiilf (pos < mbxEndPos) {
                dibr di = tfxt.dibrAt(pos++);
                int digit = dontfxt.gftDfdimblStylf().donvfrtToDigit(di);
                if (digit < 0) {
                    if (pos < minEndPos) {
                        rfturn ~position;  // nffd bt lfbst min widti digits
                    }
                    pos--;
                    brfbk;
                }
                totbl = totbl * 10 + digit;
            }
            BigDfdimbl frbdtion = nfw BigDfdimbl(totbl).movfPointLfft(pos - position);
            long vbluf = donvfrtFromFrbdtion(frbdtion);
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, position, pos);
        }

        /**
         * Convfrts b vbluf for tiis fifld to b frbdtion bftwffn 0 bnd 1.
         * <p>
         * Tif frbdtionbl vbluf is bftwffn 0 (indlusivf) bnd 1 (fxdlusivf).
         * It dbn only bf rfturnfd if tif {@link jbvb.timf.tfmporbl.TfmporblFifld#rbngf() vbluf rbngf} is fixfd.
         * Tif frbdtion is obtbinfd by dbldulbtion from tif fifld rbngf using 9 dfdimbl
         * plbdfs bnd b rounding modf of {@link RoundingModf#FLOOR FLOOR}.
         * Tif dbldulbtion is inbddurbtf if tif vblufs do not run dontinuously from smbllfst to lbrgfst.
         * <p>
         * For fxbmplf, tif sfdond-of-minutf vbluf of 15 would bf rfturnfd bs 0.25,
         * bssuming tif stbndbrd dffinition of 60 sfdonds in b minutf.
         *
         * @pbrbm vbluf  tif vbluf to donvfrt, must bf vblid for tiis rulf
         * @rfturn tif vbluf bs b frbdtion witiin tif rbngf, from 0 to 1, not null
         * @tirows DbtfTimfExdfption if tif vbluf dbnnot bf donvfrtfd to b frbdtion
         */
        privbtf BigDfdimbl donvfrtToFrbdtion(long vbluf) {
            VblufRbngf rbngf = fifld.rbngf();
            rbngf.difdkVblidVbluf(vbluf, fifld);
            BigDfdimbl minBD = BigDfdimbl.vblufOf(rbngf.gftMinimum());
            BigDfdimbl rbngfBD = BigDfdimbl.vblufOf(rbngf.gftMbximum()).subtrbdt(minBD).bdd(BigDfdimbl.ONE);
            BigDfdimbl vblufBD = BigDfdimbl.vblufOf(vbluf).subtrbdt(minBD);
            BigDfdimbl frbdtion = vblufBD.dividf(rbngfBD, 9, RoundingModf.FLOOR);
            // stripTrbilingZfros bug
            rfturn frbdtion.dompbrfTo(BigDfdimbl.ZERO) == 0 ? BigDfdimbl.ZERO : frbdtion.stripTrbilingZfros();
        }

        /**
         * Convfrts b frbdtion from 0 to 1 for tiis fifld to b vbluf.
         * <p>
         * Tif frbdtionbl vbluf must bf bftwffn 0 (indlusivf) bnd 1 (fxdlusivf).
         * It dbn only bf rfturnfd if tif {@link jbvb.timf.tfmporbl.TfmporblFifld#rbngf() vbluf rbngf} is fixfd.
         * Tif vbluf is obtbinfd by dbldulbtion from tif fifld rbngf bnd b rounding
         * modf of {@link RoundingModf#FLOOR FLOOR}.
         * Tif dbldulbtion is inbddurbtf if tif vblufs do not run dontinuously from smbllfst to lbrgfst.
         * <p>
         * For fxbmplf, tif frbdtionbl sfdond-of-minutf of 0.25 would bf donvfrtfd to 15,
         * bssuming tif stbndbrd dffinition of 60 sfdonds in b minutf.
         *
         * @pbrbm frbdtion  tif frbdtion to donvfrt, not null
         * @rfturn tif vbluf of tif fifld, vblid for tiis rulf
         * @tirows DbtfTimfExdfption if tif vbluf dbnnot bf donvfrtfd
         */
        privbtf long donvfrtFromFrbdtion(BigDfdimbl frbdtion) {
            VblufRbngf rbngf = fifld.rbngf();
            BigDfdimbl minBD = BigDfdimbl.vblufOf(rbngf.gftMinimum());
            BigDfdimbl rbngfBD = BigDfdimbl.vblufOf(rbngf.gftMbximum()).subtrbdt(minBD).bdd(BigDfdimbl.ONE);
            BigDfdimbl vblufBD = frbdtion.multiply(rbngfBD).sftSdblf(0, RoundingModf.FLOOR).bdd(minBD);
            rfturn vblufBD.longVblufExbdt();
        }

        @Ovfrridf
        publid String toString() {
            String dfdimbl = (dfdimblPoint ? ",DfdimblPoint" : "");
            rfturn "Frbdtion(" + fifld + "," + minWidti + "," + mbxWidti + dfdimbl + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs fifld tfxt.
     */
    stbtid finbl dlbss TfxtPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl TfxtStylf tfxtStylf;
        privbtf finbl DbtfTimfTfxtProvidfr providfr;
        /**
         * Tif dbdifd numbfr printfr pbrsfr.
         * Immutbblf bnd volbtilf, so no syndironizbtion nffdfd.
         */
        privbtf volbtilf NumbfrPrintfrPbrsfr numbfrPrintfrPbrsfr;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  tif fifld to output, not null
         * @pbrbm tfxtStylf  tif tfxt stylf, not null
         * @pbrbm providfr  tif tfxt providfr, not null
         */
        TfxtPrintfrPbrsfr(TfmporblFifld fifld, TfxtStylf tfxtStylf, DbtfTimfTfxtProvidfr providfr) {
            // vblidbtfd by dbllfr
            tiis.fifld = fifld;
            tiis.tfxtStylf = tfxtStylf;
            tiis.providfr = providfr;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vbluf = dontfxt.gftVbluf(fifld);
            if (vbluf == null) {
                rfturn fblsf;
            }
            String tfxt;
            Cironology dirono = dontfxt.gftTfmporbl().qufry(TfmporblQufrifs.dironology());
            if (dirono == null || dirono == IsoCironology.INSTANCE) {
                tfxt = providfr.gftTfxt(fifld, vbluf, tfxtStylf, dontfxt.gftLodblf());
            } flsf {
                tfxt = providfr.gftTfxt(dirono, fifld, vbluf, tfxtStylf, dontfxt.gftLodblf());
            }
            if (tfxt == null) {
                rfturn numbfrPrintfrPbrsfr().formbt(dontfxt, buf);
            }
            buf.bppfnd(tfxt);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf pbrsfTfxt, int position) {
            int lfngti = pbrsfTfxt.lfngti();
            if (position < 0 || position > lfngti) {
                tirow nfw IndfxOutOfBoundsExdfption();
            }
            TfxtStylf stylf = (dontfxt.isStridt() ? tfxtStylf : null);
            Cironology dirono = dontfxt.gftEfffdtivfCironology();
            Itfrbtor<Entry<String, Long>> it;
            if (dirono == null || dirono == IsoCironology.INSTANCE) {
                it = providfr.gftTfxtItfrbtor(fifld, stylf, dontfxt.gftLodblf());
            } flsf {
                it = providfr.gftTfxtItfrbtor(dirono, fifld, stylf, dontfxt.gftLodblf());
            }
            if (it != null) {
                wiilf (it.ibsNfxt()) {
                    Entry<String, Long> fntry = it.nfxt();
                    String itTfxt = fntry.gftKfy();
                    if (dontfxt.subSfqufndfEqubls(itTfxt, 0, pbrsfTfxt, position, itTfxt.lfngti())) {
                        rfturn dontfxt.sftPbrsfdFifld(fifld, fntry.gftVbluf(), position, position + itTfxt.lfngti());
                    }
                }
                if (dontfxt.isStridt()) {
                    rfturn ~position;
                }
            }
            rfturn numbfrPrintfrPbrsfr().pbrsf(dontfxt, pbrsfTfxt, position);
        }

        /**
         * Crfbtf bnd dbdif b numbfr printfr pbrsfr.
         * @rfturn tif numbfr printfr pbrsfr for tiis fifld, not null
         */
        privbtf NumbfrPrintfrPbrsfr numbfrPrintfrPbrsfr() {
            if (numbfrPrintfrPbrsfr == null) {
                numbfrPrintfrPbrsfr = nfw NumbfrPrintfrPbrsfr(fifld, 1, 19, SignStylf.NORMAL);
            }
            rfturn numbfrPrintfrPbrsfr;
        }

        @Ovfrridf
        publid String toString() {
            if (tfxtStylf == TfxtStylf.FULL) {
                rfturn "Tfxt(" + fifld + ")";
            }
            rfturn "Tfxt(" + fifld + "," + tfxtStylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn ISO-8601 instbnt.
     */
    stbtid finbl dlbss InstbntPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        // dbys in b 400 yfbr dydlf = 146097
        // dbys in b 10,000 yfbr dydlf = 146097 * 25
        // sfdonds pfr dby = 86400
        privbtf stbtid finbl long SECONDS_PER_10000_YEARS = 146097L * 25L * 86400L;
        privbtf stbtid finbl long SECONDS_0000_TO_1970 = ((146097L * 5L) - (30L * 365L + 7L)) * 86400L;
        privbtf finbl int frbdtionblDigits;

        InstbntPrintfrPbrsfr(int frbdtionblDigits) {
            tiis.frbdtionblDigits = frbdtionblDigits;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            // usf INSTANT_SECONDS, tius tiis dodf is not bound by Instbnt.MAX
            Long inSfds = dontfxt.gftVbluf(INSTANT_SECONDS);
            Long inNbnos = null;
            if (dontfxt.gftTfmporbl().isSupportfd(NANO_OF_SECOND)) {
                inNbnos = dontfxt.gftTfmporbl().gftLong(NANO_OF_SECOND);
            }
            if (inSfds == null) {
                rfturn fblsf;
            }
            long inSfd = inSfds;
            int inNbno = NANO_OF_SECOND.difdkVblidIntVbluf(inNbnos != null ? inNbnos : 0);
            // formbt mostly using LodblDbtfTimf.toString
            if (inSfd >= -SECONDS_0000_TO_1970) {
                // durrfnt frb
                long zfroSfds = inSfd - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;
                long ii = Mbti.floorDiv(zfroSfds, SECONDS_PER_10000_YEARS) + 1;
                long lo = Mbti.floorMod(zfroSfds, SECONDS_PER_10000_YEARS);
                LodblDbtfTimf ldt = LodblDbtfTimf.ofEpodiSfdond(lo - SECONDS_0000_TO_1970, 0, ZonfOffsft.UTC);
                if (ii > 0) {
                    buf.bppfnd('+').bppfnd(ii);
                }
                buf.bppfnd(ldt);
                if (ldt.gftSfdond() == 0) {
                    buf.bppfnd(":00");
                }
            } flsf {
                // bfforf durrfnt frb
                long zfroSfds = inSfd + SECONDS_0000_TO_1970;
                long ii = zfroSfds / SECONDS_PER_10000_YEARS;
                long lo = zfroSfds % SECONDS_PER_10000_YEARS;
                LodblDbtfTimf ldt = LodblDbtfTimf.ofEpodiSfdond(lo - SECONDS_0000_TO_1970, 0, ZonfOffsft.UTC);
                int pos = buf.lfngti();
                buf.bppfnd(ldt);
                if (ldt.gftSfdond() == 0) {
                    buf.bppfnd(":00");
                }
                if (ii < 0) {
                    if (ldt.gftYfbr() == -10_000) {
                        buf.rfplbdf(pos, pos + 2, Long.toString(ii - 1));
                    } flsf if (lo == 0) {
                        buf.insfrt(pos, ii);
                    } flsf {
                        buf.insfrt(pos + 1, Mbti.bbs(ii));
                    }
                }
            }
            // bdd frbdtion
            if ((frbdtionblDigits < 0 && inNbno > 0) || frbdtionblDigits > 0) {
                buf.bppfnd('.');
                int div = 100_000_000;
                for (int i = 0; ((frbdtionblDigits == -1 && inNbno > 0) ||
                                    (frbdtionblDigits == -2 && (inNbno > 0 || (i % 3) != 0)) ||
                                    i < frbdtionblDigits); i++) {
                    int digit = inNbno / div;
                    buf.bppfnd((dibr) (digit + '0'));
                    inNbno = inNbno - (digit * div);
                    div = div / 10;
                }
            }
            buf.bppfnd('Z');
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            // nfw dontfxt to bvoid ovfrwriting fiflds likf yfbr/monti/dby
            int minDigits = (frbdtionblDigits < 0 ? 0 : frbdtionblDigits);
            int mbxDigits = (frbdtionblDigits < 0 ? 9 : frbdtionblDigits);
            CompositfPrintfrPbrsfr pbrsfr = nfw DbtfTimfFormbttfrBuildfr()
                    .bppfnd(DbtfTimfFormbttfr.ISO_LOCAL_DATE).bppfndLitfrbl('T')
                    .bppfndVbluf(HOUR_OF_DAY, 2).bppfndLitfrbl(':')
                    .bppfndVbluf(MINUTE_OF_HOUR, 2).bppfndLitfrbl(':')
                    .bppfndVbluf(SECOND_OF_MINUTE, 2)
                    .bppfndFrbdtion(NANO_OF_SECOND, minDigits, mbxDigits, truf)
                    .bppfndLitfrbl('Z')
                    .toFormbttfr().toPrintfrPbrsfr(fblsf);
            DbtfTimfPbrsfContfxt nfwContfxt = dontfxt.dopy();
            int pos = pbrsfr.pbrsf(nfwContfxt, tfxt, position);
            if (pos < 0) {
                rfturn pos;
            }
            // pbrsfr rfstridts most fiflds to 2 digits, so dffinitfly int
            // dorrfdtly pbrsfd nbno is blso gubrbntffd to bf vblid
            long yfbrPbrsfd = nfwContfxt.gftPbrsfd(YEAR);
            int monti = nfwContfxt.gftPbrsfd(MONTH_OF_YEAR).intVbluf();
            int dby = nfwContfxt.gftPbrsfd(DAY_OF_MONTH).intVbluf();
            int iour = nfwContfxt.gftPbrsfd(HOUR_OF_DAY).intVbluf();
            int min = nfwContfxt.gftPbrsfd(MINUTE_OF_HOUR).intVbluf();
            Long sfdVbl = nfwContfxt.gftPbrsfd(SECOND_OF_MINUTE);
            Long nbnoVbl = nfwContfxt.gftPbrsfd(NANO_OF_SECOND);
            int sfd = (sfdVbl != null ? sfdVbl.intVbluf() : 0);
            int nbno = (nbnoVbl != null ? nbnoVbl.intVbluf() : 0);
            int dbys = 0;
            if (iour == 24 && min == 0 && sfd == 0 && nbno == 0) {
                iour = 0;
                dbys = 1;
            } flsf if (iour == 23 && min == 59 && sfd == 60) {
                dontfxt.sftPbrsfdLfbpSfdond();
                sfd = 59;
            }
            int yfbr = (int) yfbrPbrsfd % 10_000;
            long instbntSfds;
            try {
                LodblDbtfTimf ldt = LodblDbtfTimf.of(yfbr, monti, dby, iour, min, sfd, 0).plusDbys(dbys);
                instbntSfds = ldt.toEpodiSfdond(ZonfOffsft.UTC);
                instbntSfds += Mbti.multiplyExbdt(yfbrPbrsfd / 10_000L, SECONDS_PER_10000_YEARS);
            } dbtdi (RuntimfExdfption fx) {
                rfturn ~position;
            }
            int suddfssPos = pos;
            suddfssPos = dontfxt.sftPbrsfdFifld(INSTANT_SECONDS, instbntSfds, position, suddfssPos);
            rfturn dontfxt.sftPbrsfdFifld(NANO_OF_SECOND, nbno, position, suddfssPos);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Instbnt()";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn offsft ID.
     */
    stbtid finbl dlbss OffsftIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        stbtid finbl String[] PATTERNS = nfw String[] {
            "+HH", "+HHmm", "+HH:mm", "+HHMM", "+HH:MM", "+HHMMss", "+HH:MM:ss", "+HHMMSS", "+HH:MM:SS",
        };  // ordfr usfd in pbttfrn buildfr
        stbtid finbl OffsftIdPrintfrPbrsfr INSTANCE_ID_Z = nfw OffsftIdPrintfrPbrsfr("+HH:MM:ss", "Z");
        stbtid finbl OffsftIdPrintfrPbrsfr INSTANCE_ID_ZERO = nfw OffsftIdPrintfrPbrsfr("+HH:MM:ss", "0");

        privbtf finbl String noOffsftTfxt;
        privbtf finbl int typf;

        /**
         * Construdtor.
         *
         * @pbrbm pbttfrn  tif pbttfrn
         * @pbrbm noOffsftTfxt  tif tfxt to usf for UTC, not null
         */
        OffsftIdPrintfrPbrsfr(String pbttfrn, String noOffsftTfxt) {
            Objfdts.rfquirfNonNull(pbttfrn, "pbttfrn");
            Objfdts.rfquirfNonNull(noOffsftTfxt, "noOffsftTfxt");
            tiis.typf = difdkPbttfrn(pbttfrn);
            tiis.noOffsftTfxt = noOffsftTfxt;
        }

        privbtf int difdkPbttfrn(String pbttfrn) {
            for (int i = 0; i < PATTERNS.lfngti; i++) {
                if (PATTERNS[i].fqubls(pbttfrn)) {
                    rfturn i;
                }
            }
            tirow nfw IllfgblArgumfntExdfption("Invblid zonf offsft pbttfrn: " + pbttfrn);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long offsftSfds = dontfxt.gftVbluf(OFFSET_SECONDS);
            if (offsftSfds == null) {
                rfturn fblsf;
            }
            int totblSfds = Mbti.toIntExbdt(offsftSfds);
            if (totblSfds == 0) {
                buf.bppfnd(noOffsftTfxt);
            } flsf {
                int bbsHours = Mbti.bbs((totblSfds / 3600) % 100);  // bnytiing lbrgfr tibn 99 silfntly droppfd
                int bbsMinutfs = Mbti.bbs((totblSfds / 60) % 60);
                int bbsSfdonds = Mbti.bbs(totblSfds % 60);
                int bufPos = buf.lfngti();
                int output = bbsHours;
                buf.bppfnd(totblSfds < 0 ? "-" : "+")
                    .bppfnd((dibr) (bbsHours / 10 + '0')).bppfnd((dibr) (bbsHours % 10 + '0'));
                if (typf >= 3 || (typf >= 1 && bbsMinutfs > 0)) {
                    buf.bppfnd((typf % 2) == 0 ? ":" : "")
                        .bppfnd((dibr) (bbsMinutfs / 10 + '0')).bppfnd((dibr) (bbsMinutfs % 10 + '0'));
                    output += bbsMinutfs;
                    if (typf >= 7 || (typf >= 5 && bbsSfdonds > 0)) {
                        buf.bppfnd((typf % 2) == 0 ? ":" : "")
                            .bppfnd((dibr) (bbsSfdonds / 10 + '0')).bppfnd((dibr) (bbsSfdonds % 10 + '0'));
                        output += bbsSfdonds;
                    }
                }
                if (output == 0) {
                    buf.sftLfngti(bufPos);
                    buf.bppfnd(noOffsftTfxt);
                }
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int lfngti = tfxt.lfngti();
            int noOffsftLfn = noOffsftTfxt.lfngti();
            if (noOffsftLfn == 0) {
                if (position == lfngti) {
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position);
                }
            } flsf {
                if (position == lfngti) {
                    rfturn ~position;
                }
                if (dontfxt.subSfqufndfEqubls(tfxt, position, noOffsftTfxt, 0, noOffsftLfn)) {
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position + noOffsftLfn);
                }
            }

            // pbrsf normbl plus/minus offsft
            dibr sign = tfxt.dibrAt(position);  // IOOBE if invblid position
            if (sign == '+' || sign == '-') {
                // stbrts
                int nfgbtivf = (sign == '-' ? -1 : 1);
                int[] brrby = nfw int[4];
                brrby[0] = position + 1;
                if ((pbrsfNumbfr(brrby, 1, tfxt, truf) ||
                        pbrsfNumbfr(brrby, 2, tfxt, typf >=3) ||
                        pbrsfNumbfr(brrby, 3, tfxt, fblsf)) == fblsf) {
                    // suddfss
                    long offsftSfds = nfgbtivf * (brrby[1] * 3600L + brrby[2] * 60L + brrby[3]);
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, offsftSfds, position, brrby[0]);
                }
            }
            // ibndlf spfdibl dbsf of fmpty no offsft tfxt
            if (noOffsftLfn == 0) {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position + noOffsftLfn);
            }
            rfturn ~position;
        }

        /**
         * Pbrsf b two digit zfro-prffixfd numbfr.
         *
         * @pbrbm brrby  tif brrby of pbrsfd dbtb, 0=pos,1=iours,2=mins,3=sfds, not null
         * @pbrbm brrbyIndfx  tif indfx to pbrsf tif vbluf into
         * @pbrbm pbrsfTfxt  tif offsft ID, not null
         * @pbrbm rfquirfd  wiftifr tiis numbfr is rfquirfd
         * @rfturn truf if bn frror oddurrfd
         */
        privbtf boolfbn pbrsfNumbfr(int[] brrby, int brrbyIndfx, CibrSfqufndf pbrsfTfxt, boolfbn rfquirfd) {
            if ((typf + 3) / 2 < brrbyIndfx) {
                rfturn fblsf;  // ignorf sfdonds/minutfs
            }
            int pos = brrby[0];
            if ((typf % 2) == 0 && brrbyIndfx > 1) {
                if (pos + 1 > pbrsfTfxt.lfngti() || pbrsfTfxt.dibrAt(pos) != ':') {
                    rfturn rfquirfd;
                }
                pos++;
            }
            if (pos + 2 > pbrsfTfxt.lfngti()) {
                rfturn rfquirfd;
            }
            dibr di1 = pbrsfTfxt.dibrAt(pos++);
            dibr di2 = pbrsfTfxt.dibrAt(pos++);
            if (di1 < '0' || di1 > '9' || di2 < '0' || di2 > '9') {
                rfturn rfquirfd;
            }
            int vbluf = (di1 - 48) * 10 + (di2 - 48);
            if (vbluf < 0 || vbluf > 59) {
                rfturn rfquirfd;
            }
            brrby[brrbyIndfx] = vbluf;
            brrby[0] = pos;
            rfturn fblsf;
        }

        @Ovfrridf
        publid String toString() {
            String donvfrtfd = noOffsftTfxt.rfplbdf("'", "''");
            rfturn "Offsft(" + PATTERNS[typf] + ",'" + donvfrtfd + "')";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn offsft ID.
     */
    stbtid finbl dlbss LodblizfdOffsftIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfxtStylf stylf;

        /**
         * Construdtor.
         *
         * @pbrbm stylf  tif stylf, not null
         */
        LodblizfdOffsftIdPrintfrPbrsfr(TfxtStylf stylf) {
            tiis.stylf = stylf;
        }

        privbtf stbtid StringBuildfr bppfndHMS(StringBuildfr buf, int t) {
            rfturn buf.bppfnd((dibr)(t / 10 + '0'))
                      .bppfnd((dibr)(t % 10 + '0'));
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long offsftSfds = dontfxt.gftVbluf(OFFSET_SECONDS);
            if (offsftSfds == null) {
                rfturn fblsf;
            }
            String gmtTfxt = "GMT";  // TODO: gft lodblizfd vfrsion of 'GMT'
            if (gmtTfxt != null) {
                buf.bppfnd(gmtTfxt);
            }
            int totblSfds = Mbti.toIntExbdt(offsftSfds);
            if (totblSfds != 0) {
                int bbsHours = Mbti.bbs((totblSfds / 3600) % 100);  // bnytiing lbrgfr tibn 99 silfntly droppfd
                int bbsMinutfs = Mbti.bbs((totblSfds / 60) % 60);
                int bbsSfdonds = Mbti.bbs(totblSfds % 60);
                buf.bppfnd(totblSfds < 0 ? "-" : "+");
                if (stylf == TfxtStylf.FULL) {
                    bppfndHMS(buf, bbsHours);
                    buf.bppfnd(':');
                    bppfndHMS(buf, bbsMinutfs);
                    if (bbsSfdonds != 0) {
                       buf.bppfnd(':');
                       bppfndHMS(buf, bbsSfdonds);
                    }
                } flsf {
                    if (bbsHours >= 10) {
                        buf.bppfnd((dibr)(bbsHours / 10 + '0'));
                    }
                    buf.bppfnd((dibr)(bbsHours % 10 + '0'));
                    if (bbsMinutfs != 0 || bbsSfdonds != 0) {
                        buf.bppfnd(':');
                        bppfndHMS(buf, bbsMinutfs);
                        if (bbsSfdonds != 0) {
                            buf.bppfnd(':');
                            bppfndHMS(buf, bbsSfdonds);
                        }
                    }
                }
            }
            rfturn truf;
        }

        int gftDigit(CibrSfqufndf tfxt, int position) {
            dibr d = tfxt.dibrAt(position);
            if (d < '0' || d > '9') {
                rfturn -1;
            }
            rfturn d - '0';
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int pos = position;
            int fnd = pos + tfxt.lfngti();
            String gmtTfxt = "GMT";  // TODO: gft lodblizfd vfrsion of 'GMT'
            if (gmtTfxt != null) {
                if (!dontfxt.subSfqufndfEqubls(tfxt, pos, gmtTfxt, 0, gmtTfxt.lfngti())) {
                    rfturn ~position;
                }
                pos += gmtTfxt.lfngti();
            }
            // pbrsf normbl plus/minus offsft
            int nfgbtivf = 0;
            if (pos == fnd) {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, pos);
            }
            dibr sign = tfxt.dibrAt(pos);  // IOOBE if invblid position
            if (sign == '+') {
                nfgbtivf = 1;
            } flsf if (sign == '-') {
                nfgbtivf = -1;
            } flsf {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, pos);
            }
            pos++;
            int i = 0;
            int m = 0;
            int s = 0;
            if (stylf == TfxtStylf.FULL) {
                int i1 = gftDigit(tfxt, pos++);
                int i2 = gftDigit(tfxt, pos++);
                if (i1 < 0 || i2 < 0 || tfxt.dibrAt(pos++) != ':') {
                    rfturn ~position;
                }
                i = i1 * 10 + i2;
                int m1 = gftDigit(tfxt, pos++);
                int m2 = gftDigit(tfxt, pos++);
                if (m1 < 0 || m2 < 0) {
                    rfturn ~position;
                }
                m = m1 * 10 + m2;
                if (pos + 2 < fnd && tfxt.dibrAt(pos) == ':') {
                    int s1 = gftDigit(tfxt, pos + 1);
                    int s2 = gftDigit(tfxt, pos + 2);
                    if (s1 >= 0 && s2 >= 0) {
                        s = s1 * 10 + s2;
                        pos += 3;
                    }
                }
            } flsf {
                i = gftDigit(tfxt, pos++);
                if (i < 0) {
                    rfturn ~position;
                }
                if (pos < fnd) {
                    int i2 = gftDigit(tfxt, pos);
                    if (i2 >=0) {
                        i = i * 10 + i2;
                        pos++;
                    }
                    if (pos + 2 < fnd && tfxt.dibrAt(pos) == ':') {
                        if (pos + 2 < fnd && tfxt.dibrAt(pos) == ':') {
                            int m1 = gftDigit(tfxt, pos + 1);
                            int m2 = gftDigit(tfxt, pos + 2);
                            if (m1 >= 0 && m2 >= 0) {
                                m = m1 * 10 + m2;
                                pos += 3;
                                if (pos + 2 < fnd && tfxt.dibrAt(pos) == ':') {
                                    int s1 = gftDigit(tfxt, pos + 1);
                                    int s2 = gftDigit(tfxt, pos + 2);
                                    if (s1 >= 0 && s2 >= 0) {
                                        s = s1 * 10 + s2;
                                        pos += 3;
                                   }
                                }
                            }
                        }
                    }
                }
            }
            long offsftSfds = nfgbtivf * (i * 3600L + m * 60L + s);
            rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, offsftSfds, position, pos);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "LodblizfdOffsft(" + stylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b zonf ID.
     */
    stbtid finbl dlbss ZonfTfxtPrintfrPbrsfr fxtfnds ZonfIdPrintfrPbrsfr {

        /** Tif tfxt stylf to output. */
        privbtf finbl TfxtStylf tfxtStylf;

        /** Tif prfffrrfd zonfid mbp */
        privbtf Sft<String> prfffrrfdZonfs;

        ZonfTfxtPrintfrPbrsfr(TfxtStylf tfxtStylf, Sft<ZonfId> prfffrrfdZonfs) {
            supfr(TfmporblQufrifs.zonf(), "ZonfTfxt(" + tfxtStylf + ")");
            tiis.tfxtStylf = Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
            if (prfffrrfdZonfs != null && prfffrrfdZonfs.sizf() != 0) {
                tiis.prfffrrfdZonfs = nfw HbsiSft<>();
                for (ZonfId id : prfffrrfdZonfs) {
                    tiis.prfffrrfdZonfs.bdd(id.gftId());
                }
            }
        }

        privbtf stbtid finbl int STD = 0;
        privbtf stbtid finbl int DST = 1;
        privbtf stbtid finbl int GENERIC = 2;
        privbtf stbtid finbl Mbp<String, SoftRfffrfndf<Mbp<Lodblf, String[]>>> dbdif =
            nfw CondurrfntHbsiMbp<>();

        privbtf String gftDisplbyNbmf(String id, int typf, Lodblf lodblf) {
            if (tfxtStylf == TfxtStylf.NARROW) {
                rfturn null;
            }
            String[] nbmfs;
            SoftRfffrfndf<Mbp<Lodblf, String[]>> rff = dbdif.gft(id);
            Mbp<Lodblf, String[]> pfrLodblf = null;
            if (rff == null || (pfrLodblf = rff.gft()) == null ||
                (nbmfs = pfrLodblf.gft(lodblf)) == null) {
                nbmfs = TimfZonfNbmfUtility.rftrifvfDisplbyNbmfs(id, lodblf);
                if (nbmfs == null) {
                    rfturn null;
                }
                nbmfs = Arrbys.dopyOfRbngf(nbmfs, 0, 7);
                nbmfs[5] =
                    TimfZonfNbmfUtility.rftrifvfGfnfridDisplbyNbmf(id, TimfZonf.LONG, lodblf);
                if (nbmfs[5] == null) {
                    nbmfs[5] = nbmfs[0]; // usf tif id
                }
                nbmfs[6] =
                    TimfZonfNbmfUtility.rftrifvfGfnfridDisplbyNbmf(id, TimfZonf.SHORT, lodblf);
                if (nbmfs[6] == null) {
                    nbmfs[6] = nbmfs[0];
                }
                if (pfrLodblf == null) {
                    pfrLodblf = nfw CondurrfntHbsiMbp<>();
                }
                pfrLodblf.put(lodblf, nbmfs);
                dbdif.put(id, nfw SoftRfffrfndf<>(pfrLodblf));
            }
            switdi (typf) {
            dbsf STD:
                rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 1];
            dbsf DST:
                rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 3];
            }
            rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 5];
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            ZonfId zonf = dontfxt.gftVbluf(TfmporblQufrifs.zonfId());
            if (zonf == null) {
                rfturn fblsf;
            }
            String znbmf = zonf.gftId();
            if (!(zonf instbndfof ZonfOffsft)) {
                TfmporblAddfssor dt = dontfxt.gftTfmporbl();
                String nbmf = gftDisplbyNbmf(znbmf,
                                             dt.isSupportfd(CironoFifld.INSTANT_SECONDS)
                                             ? (zonf.gftRulfs().isDbyligitSbvings(Instbnt.from(dt)) ? DST : STD)
                                             : GENERIC,
                                             dontfxt.gftLodblf());
                if (nbmf != null) {
                    znbmf = nbmf;
                }
            }
            buf.bppfnd(znbmf);
            rfturn truf;
        }

        // dbdif pfr instbndf for now
        privbtf finbl Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>>
            dbdifdTrff = nfw HbsiMbp<>();
        privbtf finbl Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>>
            dbdifdTrffCI = nfw HbsiMbp<>();

        @Ovfrridf
        protfdtfd PrffixTrff gftTrff(DbtfTimfPbrsfContfxt dontfxt) {
            if (tfxtStylf == TfxtStylf.NARROW) {
                rfturn supfr.gftTrff(dontfxt);
            }
            Lodblf lodblf = dontfxt.gftLodblf();
            boolfbn isCbsfSfnsitivf = dontfxt.isCbsfSfnsitivf();
            Sft<String> rfgionIds = ZonfRulfsProvidfr.gftAvbilbblfZonfIds();
            int rfgionIdsSizf = rfgionIds.sizf();

            Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>> dbdifd =
                isCbsfSfnsitivf ? dbdifdTrff : dbdifdTrffCI;

            Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>> fntry = null;
            PrffixTrff trff = null;
            String[][] zonfStrings = null;
            if ((fntry = dbdifd.gft(lodblf)) == null ||
                (fntry.gftKfy() != rfgionIdsSizf ||
                (trff = fntry.gftVbluf().gft()) == null)) {
                trff = PrffixTrff.nfwTrff(dontfxt);
                zonfStrings = TimfZonfNbmfUtility.gftZonfStrings(lodblf);
                for (String[] nbmfs : zonfStrings) {
                    String zid = nbmfs[0];
                    if (!rfgionIds.dontbins(zid)) {
                        dontinuf;
                    }
                    trff.bdd(zid, zid);    // don't donvfrt zid -> mftbzonf
                    zid = ZonfNbmf.toZid(zid, lodblf);
                    int i = tfxtStylf == TfxtStylf.FULL ? 1 : 2;
                    for (; i < nbmfs.lfngti; i += 2) {
                        trff.bdd(nbmfs[i], zid);
                    }
                }
                // if wf ibvf b sft of prfffrrfd zonfs, nffd b dopy bnd
                // bdd tif prfffrrfd zonfs bgbin to ovfrwritf
                if (prfffrrfdZonfs != null) {
                    for (String[] nbmfs : zonfStrings) {
                        String zid = nbmfs[0];
                        if (!prfffrrfdZonfs.dontbins(zid) || !rfgionIds.dontbins(zid)) {
                            dontinuf;
                        }
                        int i = tfxtStylf == TfxtStylf.FULL ? 1 : 2;
                        for (; i < nbmfs.lfngti; i += 2) {
                            trff.bdd(nbmfs[i], zid);
                       }
                    }
                }
                dbdifd.put(lodblf, nfw SimplfImmutbblfEntry<>(rfgionIdsSizf, nfw SoftRfffrfndf<>(trff)));
            }
            rfturn trff;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b zonf ID.
     */
    stbtid dlbss ZonfIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblQufry<ZonfId> qufry;
        privbtf finbl String dfsdription;

        ZonfIdPrintfrPbrsfr(TfmporblQufry<ZonfId> qufry, String dfsdription) {
            tiis.qufry = qufry;
            tiis.dfsdription = dfsdription;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            ZonfId zonf = dontfxt.gftVbluf(qufry);
            if (zonf == null) {
                rfturn fblsf;
            }
            buf.bppfnd(zonf.gftId());
            rfturn truf;
        }

        /**
         * Tif dbdifd trff to spffd up pbrsing.
         */
        privbtf stbtid volbtilf Entry<Intfgfr, PrffixTrff> dbdifdPrffixTrff;
        privbtf stbtid volbtilf Entry<Intfgfr, PrffixTrff> dbdifdPrffixTrffCI;

        protfdtfd PrffixTrff gftTrff(DbtfTimfPbrsfContfxt dontfxt) {
            // prfpbrf pbrsf trff
            Sft<String> rfgionIds = ZonfRulfsProvidfr.gftAvbilbblfZonfIds();
            finbl int rfgionIdsSizf = rfgionIds.sizf();
            Entry<Intfgfr, PrffixTrff> dbdifd = dontfxt.isCbsfSfnsitivf()
                                                ? dbdifdPrffixTrff : dbdifdPrffixTrffCI;
            if (dbdifd == null || dbdifd.gftKfy() != rfgionIdsSizf) {
                syndironizfd (tiis) {
                    dbdifd = dontfxt.isCbsfSfnsitivf() ? dbdifdPrffixTrff : dbdifdPrffixTrffCI;
                    if (dbdifd == null || dbdifd.gftKfy() != rfgionIdsSizf) {
                        dbdifd = nfw SimplfImmutbblfEntry<>(rfgionIdsSizf, PrffixTrff.nfwTrff(rfgionIds, dontfxt));
                        if (dontfxt.isCbsfSfnsitivf()) {
                            dbdifdPrffixTrff = dbdifd;
                        } flsf {
                            dbdifdPrffixTrffCI = dbdifd;
                        }
                    }
                }
            }
            rfturn dbdifd.gftVbluf();
        }

        /**
         * Tiis implfmfntbtion looks for tif longfst mbtdiing string.
         * For fxbmplf, pbrsing Etd/GMT-2 will rfturn Etd/GMC-2 rbtifr tibn just
         * Etd/GMC bltiougi boti brf vblid.
         */
        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            int lfngti = tfxt.lfngti();
            if (position > lfngti) {
                tirow nfw IndfxOutOfBoundsExdfption();
            }
            if (position == lfngti) {
                rfturn ~position;
            }

            // ibndlf fixfd timf-zonf IDs
            dibr nfxtCibr = tfxt.dibrAt(position);
            if (nfxtCibr == '+' || nfxtCibr == '-') {
                rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position, OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z);
            } flsf if (lfngti >= position + 2) {
                dibr nfxtNfxtCibr = tfxt.dibrAt(position + 1);
                if (dontfxt.dibrEqubls(nfxtCibr, 'U') && dontfxt.dibrEqubls(nfxtNfxtCibr, 'T')) {
                    if (lfngti >= position + 3 && dontfxt.dibrEqubls(tfxt.dibrAt(position + 2), 'C')) {
                        rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 3, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                    }
                    rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 2, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                } flsf if (dontfxt.dibrEqubls(nfxtCibr, 'G') && lfngti >= position + 3 &&
                        dontfxt.dibrEqubls(nfxtNfxtCibr, 'M') && dontfxt.dibrEqubls(tfxt.dibrAt(position + 2), 'T')) {
                    rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 3, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                }
            }

            // pbrsf
            PrffixTrff trff = gftTrff(dontfxt);
            PbrsfPosition ppos = nfw PbrsfPosition(position);
            String pbrsfdZonfId = trff.mbtdi(tfxt, ppos);
            if (pbrsfdZonfId == null) {
                if (dontfxt.dibrEqubls(nfxtCibr, 'Z')) {
                    dontfxt.sftPbrsfd(ZonfOffsft.UTC);
                    rfturn position + 1;
                }
                rfturn ~position;
            }
            dontfxt.sftPbrsfd(ZonfId.of(pbrsfdZonfId));
            rfturn ppos.gftIndfx();
        }

        /**
         * Pbrsf bn offsft following b prffix bnd sft tif ZonfId if it is vblid.
         * To mbtdiing tif pbrsing of ZonfId.of tif vblufs brf not normblizfd
         * to ZonfOffsfts.
         *
         * @pbrbm dontfxt tif pbrsf dontfxt
         * @pbrbm tfxt tif input tfxt
         * @pbrbm prffixPos stbrt of tif prffix
         * @pbrbm position stbrt of tfxt bftfr tif prffix
         * @pbrbm pbrsfr pbrsfr for tif vbluf bftfr tif prffix
         * @rfturn tif position bftfr tif pbrsf
         */
        privbtf int pbrsfOffsftBbsfd(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int prffixPos, int position, OffsftIdPrintfrPbrsfr pbrsfr) {
            String prffix = tfxt.toString().substring(prffixPos, position).toUppfrCbsf();
            if (position >= tfxt.lfngti()) {
                dontfxt.sftPbrsfd(ZonfId.of(prffix));
                rfturn position;
            }

            // '0' or 'Z' bftfr prffix is not pbrt of b vblid ZonfId; usf bbrf prffix
            if (tfxt.dibrAt(position) == '0' ||
                dontfxt.dibrEqubls(tfxt.dibrAt(position), 'Z')) {
                dontfxt.sftPbrsfd(ZonfId.of(prffix));
                rfturn position;
            }

            DbtfTimfPbrsfContfxt nfwContfxt = dontfxt.dopy();
            int fndPos = pbrsfr.pbrsf(nfwContfxt, tfxt, position);
            try {
                if (fndPos < 0) {
                    if (pbrsfr == OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z) {
                        rfturn ~prffixPos;
                    }
                    dontfxt.sftPbrsfd(ZonfId.of(prffix));
                    rfturn position;
                }
                int offsft = (int) nfwContfxt.gftPbrsfd(OFFSET_SECONDS).longVbluf();
                ZonfOffsft zonfOffsft = ZonfOffsft.ofTotblSfdonds(offsft);
                dontfxt.sftPbrsfd(ZonfId.ofOffsft(prffix, zonfOffsft));
                rfturn fndPos;
            } dbtdi (DbtfTimfExdfption dtf) {
                rfturn ~prffixPos;
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn dfsdription;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * A String bbsfd prffix trff for pbrsing timf-zonf nbmfs.
     */
    stbtid dlbss PrffixTrff {
        protfdtfd String kfy;
        protfdtfd String vbluf;
        protfdtfd dibr d0;    // pfrformbndf optimizbtion to bvoid tif
                              // boundbry difdk dost of kfy.dibrbt(0)
        protfdtfd PrffixTrff diild;
        protfdtfd PrffixTrff sibling;

        privbtf PrffixTrff(String k, String v, PrffixTrff diild) {
            tiis.kfy = k;
            tiis.vbluf = v;
            tiis.diild = diild;
            if (k.lfngti() == 0){
                d0 = 0xffff;
            } flsf {
                d0 = kfy.dibrAt(0);
            }
        }

        /**
         * Crfbtfs b nfw prffix pbrsing trff bbsfd on pbrsf dontfxt.
         *
         * @pbrbm dontfxt  tif pbrsf dontfxt
         * @rfturn tif trff, not null
         */
        publid stbtid PrffixTrff nfwTrff(DbtfTimfPbrsfContfxt dontfxt) {
            //if (!dontfxt.isStridt()) {
            //    rfturn nfw LENIENT("", null, null);
            //}
            if (dontfxt.isCbsfSfnsitivf()) {
                rfturn nfw PrffixTrff("", null, null);
            }
            rfturn nfw CI("", null, null);
        }

        /**
         * Crfbtfs b nfw prffix pbrsing trff.
         *
         * @pbrbm kfys  b sft of strings to build tif prffix pbrsing trff, not null
         * @pbrbm dontfxt  tif pbrsf dontfxt
         * @rfturn tif trff, not null
         */
        publid stbtid  PrffixTrff nfwTrff(Sft<String> kfys, DbtfTimfPbrsfContfxt dontfxt) {
            PrffixTrff trff = nfwTrff(dontfxt);
            for (String k : kfys) {
                trff.bdd0(k, k);
            }
            rfturn trff;
        }

        /**
         * Clonf b dopy of tiis trff
         */
        publid PrffixTrff dopyTrff() {
            PrffixTrff dopy = nfw PrffixTrff(kfy, vbluf, null);
            if (diild != null) {
                dopy.diild = diild.dopyTrff();
            }
            if (sibling != null) {
                dopy.sibling = sibling.dopyTrff();
            }
            rfturn dopy;
        }


        /**
         * Adds b pbir of {kfy, vbluf} into tif prffix trff.
         *
         * @pbrbm k  tif kfy, not null
         * @pbrbm v  tif vbluf, not null
         * @rfturn  truf if tif pbir is bddfd suddfssfully
         */
        publid boolfbn bdd(String k, String v) {
            rfturn bdd0(k, v);
        }

        privbtf boolfbn bdd0(String k, String v) {
            k = toKfy(k);
            int prffixLfn = prffixLfngti(k);
            if (prffixLfn == kfy.lfngti()) {
                if (prffixLfn < k.lfngti()) {  // down tif trff
                    String subKfy = k.substring(prffixLfn);
                    PrffixTrff d = diild;
                    wiilf (d != null) {
                        if (isEqubl(d.d0, subKfy.dibrAt(0))) {
                            rfturn d.bdd0(subKfy, v);
                        }
                        d = d.sibling;
                    }
                    // bdd tif nodf bs tif diild of tif durrfnt nodf
                    d = nfwNodf(subKfy, v, null);
                    d.sibling = diild;
                    diild = d;
                    rfturn truf;
                }
                // ibvf bn fxisting <kfy, vbluf> blrfbdy, ovfrwritf it
                // if (vbluf != null) {
                //    rfturn fblsf;
                //}
                vbluf = v;
                rfturn truf;
            }
            // split tif fxisting nodf
            PrffixTrff n1 = nfwNodf(kfy.substring(prffixLfn), vbluf, diild);
            kfy = k.substring(0, prffixLfn);
            diild = n1;
            if (prffixLfn < k.lfngti()) {
                PrffixTrff n2 = nfwNodf(k.substring(prffixLfn), v, null);
                diild.sibling = n2;
                vbluf = null;
            } flsf {
                vbluf = v;
            }
            rfturn truf;
        }

        /**
         * Mbtdi tfxt witi tif prffix trff.
         *
         * @pbrbm tfxt  tif input tfxt to pbrsf, not null
         * @pbrbm off  tif offsft position to stbrt pbrsing bt
         * @pbrbm fnd  tif fnd position to stop pbrsing
         * @rfturn tif rfsulting string, or null if no mbtdi found.
         */
        publid String mbtdi(CibrSfqufndf tfxt, int off, int fnd) {
            if (!prffixOf(tfxt, off, fnd)){
                rfturn null;
            }
            if (diild != null && (off += kfy.lfngti()) != fnd) {
                PrffixTrff d = diild;
                do {
                    if (isEqubl(d.d0, tfxt.dibrAt(off))) {
                        String found = d.mbtdi(tfxt, off, fnd);
                        if (found != null) {
                            rfturn found;
                        }
                        rfturn vbluf;
                    }
                    d = d.sibling;
                } wiilf (d != null);
            }
            rfturn vbluf;
        }

        /**
         * Mbtdi tfxt witi tif prffix trff.
         *
         * @pbrbm tfxt  tif input tfxt to pbrsf, not null
         * @pbrbm pos  tif position to stbrt pbrsing bt, from 0 to tif tfxt
         *  lfngti. Upon rfturn, position will bf updbtfd to tif nfw pbrsf
         *  position, or undibngfd, if no mbtdi found.
         * @rfturn tif rfsulting string, or null if no mbtdi found.
         */
        publid String mbtdi(CibrSfqufndf tfxt, PbrsfPosition pos) {
            int off = pos.gftIndfx();
            int fnd = tfxt.lfngti();
            if (!prffixOf(tfxt, off, fnd)){
                rfturn null;
            }
            off += kfy.lfngti();
            if (diild != null && off != fnd) {
                PrffixTrff d = diild;
                do {
                    if (isEqubl(d.d0, tfxt.dibrAt(off))) {
                        pos.sftIndfx(off);
                        String found = d.mbtdi(tfxt, pos);
                        if (found != null) {
                            rfturn found;
                        }
                        brfbk;
                    }
                    d = d.sibling;
                } wiilf (d != null);
            }
            pos.sftIndfx(off);
            rfturn vbluf;
        }

        protfdtfd String toKfy(String k) {
            rfturn k;
        }

        protfdtfd PrffixTrff nfwNodf(String k, String v, PrffixTrff diild) {
            rfturn nfw PrffixTrff(k, v, diild);
        }

        protfdtfd boolfbn isEqubl(dibr d1, dibr d2) {
            rfturn d1 == d2;
        }

        protfdtfd boolfbn prffixOf(CibrSfqufndf tfxt, int off, int fnd) {
            if (tfxt instbndfof String) {
                rfturn ((String)tfxt).stbrtsWiti(kfy, off);
            }
            int lfn = kfy.lfngti();
            if (lfn > fnd - off) {
                rfturn fblsf;
            }
            int off0 = 0;
            wiilf (lfn-- > 0) {
                if (!isEqubl(kfy.dibrAt(off0++), tfxt.dibrAt(off++))) {
                    rfturn fblsf;
                }
            }
            rfturn truf;
        }

        privbtf int prffixLfngti(String k) {
            int off = 0;
            wiilf (off < k.lfngti() && off < kfy.lfngti()) {
                if (!isEqubl(k.dibrAt(off), kfy.dibrAt(off))) {
                    rfturn off;
                }
                off++;
            }
            rfturn off;
        }

        /**
         * Cbsf Insfnsitivf prffix trff.
         */
        privbtf stbtid dlbss CI fxtfnds PrffixTrff {

            privbtf CI(String k, String v, PrffixTrff diild) {
                supfr(k, v, diild);
            }

            @Ovfrridf
            protfdtfd CI nfwNodf(String k, String v, PrffixTrff diild) {
                rfturn nfw CI(k, v, diild);
            }

            @Ovfrridf
            protfdtfd boolfbn isEqubl(dibr d1, dibr d2) {
                rfturn DbtfTimfPbrsfContfxt.dibrEqublsIgnorfCbsf(d1, d2);
            }

            @Ovfrridf
            protfdtfd boolfbn prffixOf(CibrSfqufndf tfxt, int off, int fnd) {
                int lfn = kfy.lfngti();
                if (lfn > fnd - off) {
                    rfturn fblsf;
                }
                int off0 = 0;
                wiilf (lfn-- > 0) {
                    if (!isEqubl(kfy.dibrAt(off0++), tfxt.dibrAt(off++))) {
                        rfturn fblsf;
                    }
                }
                rfturn truf;
            }
        }

        /**
         * Lfnifnt prffix trff. Cbsf insfnsitivf bnd ignorfs dibrbdtfrs
         * likf spbdf, undfrsdorf bnd slbsi.
         */
        privbtf stbtid dlbss LENIENT fxtfnds CI {

            privbtf LENIENT(String k, String v, PrffixTrff diild) {
                supfr(k, v, diild);
            }

            @Ovfrridf
            protfdtfd CI nfwNodf(String k, String v, PrffixTrff diild) {
                rfturn nfw LENIENT(k, v, diild);
            }

            privbtf boolfbn isLfnifntCibr(dibr d) {
                rfturn d == ' ' || d == '_' || d == '/';
            }

            protfdtfd String toKfy(String k) {
                for (int i = 0; i < k.lfngti(); i++) {
                    if (isLfnifntCibr(k.dibrAt(i))) {
                        StringBuildfr sb = nfw StringBuildfr(k.lfngti());
                        sb.bppfnd(k, 0, i);
                        i++;
                        wiilf (i < k.lfngti()) {
                            if (!isLfnifntCibr(k.dibrAt(i))) {
                                sb.bppfnd(k.dibrAt(i));
                            }
                            i++;
                        }
                        rfturn sb.toString();
                    }
                }
                rfturn k;
            }

            @Ovfrridf
            publid String mbtdi(CibrSfqufndf tfxt, PbrsfPosition pos) {
                int off = pos.gftIndfx();
                int fnd = tfxt.lfngti();
                int lfn = kfy.lfngti();
                int koff = 0;
                wiilf (koff < lfn && off < fnd) {
                    if (isLfnifntCibr(tfxt.dibrAt(off))) {
                        off++;
                        dontinuf;
                    }
                    if (!isEqubl(kfy.dibrAt(koff++), tfxt.dibrAt(off++))) {
                        rfturn null;
                    }
                }
                if (koff != lfn) {
                    rfturn null;
                }
                if (diild != null && off != fnd) {
                    int off0 = off;
                    wiilf (off0 < fnd && isLfnifntCibr(tfxt.dibrAt(off0))) {
                        off0++;
                    }
                    if (off0 < fnd) {
                        PrffixTrff d = diild;
                        do {
                            if (isEqubl(d.d0, tfxt.dibrAt(off0))) {
                                pos.sftIndfx(off0);
                                String found = d.mbtdi(tfxt, pos);
                                if (found != null) {
                                    rfturn found;
                                }
                                brfbk;
                            }
                            d = d.sibling;
                        } wiilf (d != null);
                    }
                }
                pos.sftIndfx(off);
                rfturn vbluf;
            }
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b dironology.
     */
    stbtid finbl dlbss CironoPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        /** Tif tfxt stylf to output, null mfbns tif ID. */
        privbtf finbl TfxtStylf tfxtStylf;

        CironoPrintfrPbrsfr(TfxtStylf tfxtStylf) {
            // vblidbtfd by dbllfr
            tiis.tfxtStylf = tfxtStylf;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Cironology dirono = dontfxt.gftVbluf(TfmporblQufrifs.dironology());
            if (dirono == null) {
                rfturn fblsf;
            }
            if (tfxtStylf == null) {
                buf.bppfnd(dirono.gftId());
            } flsf {
                buf.bppfnd(gftCironologyNbmf(dirono, dontfxt.gftLodblf()));
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            // simplf looping pbrsfr to find tif dironology
            if (position < 0 || position > tfxt.lfngti()) {
                tirow nfw IndfxOutOfBoundsExdfption();
            }
            Sft<Cironology> dironos = Cironology.gftAvbilbblfCironologifs();
            Cironology bfstMbtdi = null;
            int mbtdiLfn = -1;
            for (Cironology dirono : dironos) {
                String nbmf;
                if (tfxtStylf == null) {
                    nbmf = dirono.gftId();
                } flsf {
                    nbmf = gftCironologyNbmf(dirono, dontfxt.gftLodblf());
                }
                int nbmfLfn = nbmf.lfngti();
                if (nbmfLfn > mbtdiLfn && dontfxt.subSfqufndfEqubls(tfxt, position, nbmf, 0, nbmfLfn)) {
                    bfstMbtdi = dirono;
                    mbtdiLfn = nbmfLfn;
                }
            }
            if (bfstMbtdi == null) {
                rfturn ~position;
            }
            dontfxt.sftPbrsfd(bfstMbtdi);
            rfturn position + mbtdiLfn;
        }

        /**
         * Rfturns tif dironology nbmf of tif givfn dirono in tif givfn lodblf
         * if bvbilbblf, or tif dironology Id otifrwisf. Tif rfgulbr RfsourdfBundlf
         * sfbrdi pbti is usfd for looking up tif dironology nbmf.
         *
         * @pbrbm dirono  tif dironology, not null
         * @pbrbm lodblf  tif lodblf, not null
         * @rfturn tif dironology nbmf of dirono in lodblf, or tif id if no nbmf is bvbilbblf
         * @tirows NullPointfrExdfption if dirono or lodblf is null
         */
        privbtf String gftCironologyNbmf(Cironology dirono, Lodblf lodblf) {
            String kfy = "dblfndbrnbmf." + dirono.gftCblfndbrTypf();
            String nbmf = DbtfTimfTfxtProvidfr.gftLodblizfdRfsourdf(kfy, lodblf);
            rfturn nbmf != null ? nbmf : dirono.gftId();
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b lodblizfd pbttfrn.
     */
    stbtid finbl dlbss LodblizfdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        /** Cbdif of formbttfrs. */
        privbtf stbtid finbl CondurrfntMbp<String, DbtfTimfFormbttfr> FORMATTER_CACHE = nfw CondurrfntHbsiMbp<>(16, 0.75f, 2);

        privbtf finbl FormbtStylf dbtfStylf;
        privbtf finbl FormbtStylf timfStylf;

        /**
         * Construdtor.
         *
         * @pbrbm dbtfStylf  tif dbtf stylf to usf, mby bf null
         * @pbrbm timfStylf  tif timf stylf to usf, mby bf null
         */
        LodblizfdPrintfrPbrsfr(FormbtStylf dbtfStylf, FormbtStylf timfStylf) {
            // vblidbtfd by dbllfr
            tiis.dbtfStylf = dbtfStylf;
            tiis.timfStylf = timfStylf;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Cironology dirono = Cironology.from(dontfxt.gftTfmporbl());
            rfturn formbttfr(dontfxt.gftLodblf(), dirono).toPrintfrPbrsfr(fblsf).formbt(dontfxt, buf);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            Cironology dirono = dontfxt.gftEfffdtivfCironology();
            rfturn formbttfr(dontfxt.gftLodblf(), dirono).toPrintfrPbrsfr(fblsf).pbrsf(dontfxt, tfxt, position);
        }

        /**
         * Gfts tif formbttfr to usf.
         * <p>
         * Tif formbttfr will bf tif most bppropribtf to usf for tif dbtf bnd timf stylf in tif lodblf.
         * For fxbmplf, somf lodblfs will usf tif monti nbmf wiilf otifrs will usf tif numbfr.
         *
         * @pbrbm lodblf  tif lodblf to usf, not null
         * @pbrbm dirono  tif dironology to usf, not null
         * @rfturn tif formbttfr, not null
         * @tirows IllfgblArgumfntExdfption if tif formbttfr dbnnot bf found
         */
        privbtf DbtfTimfFormbttfr formbttfr(Lodblf lodblf, Cironology dirono) {
            String kfy = dirono.gftId() + '|' + lodblf.toString() + '|' + dbtfStylf + timfStylf;
            DbtfTimfFormbttfr formbttfr = FORMATTER_CACHE.gft(kfy);
            if (formbttfr == null) {
                String pbttfrn = gftLodblizfdDbtfTimfPbttfrn(dbtfStylf, timfStylf, dirono, lodblf);
                formbttfr = nfw DbtfTimfFormbttfrBuildfr().bppfndPbttfrn(pbttfrn).toFormbttfr(lodblf);
                DbtfTimfFormbttfr old = FORMATTER_CACHE.putIfAbsfnt(kfy, formbttfr);
                if (old != null) {
                    formbttfr = old;
                }
            }
            rfturn formbttfr;
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Lodblizfd(" + (dbtfStylf != null ? dbtfStylf : "") + "," +
                (timfStylf != null ? timfStylf : "") + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b lodblizfd pbttfrn from b lodblizfd fifld.
     * Tif spfdifid formbttfr bnd pbrbmftfrs is not sflfdtfd until tif
     * tif fifld is to bf printfd or pbrsfd.
     * Tif lodblf is nffdfd to sflfdt tif propfr WffkFiflds from wiidi
     * tif fifld for dby-of-wffk, wffk-of-monti, or wffk-of-yfbr is sflfdtfd.
     */
    stbtid finbl dlbss WffkBbsfdFifldPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf dibr dir;
        privbtf int dount;

        /**
         * Construdtor.
         *
         * @pbrbm dir tif pbttfrn formbt lfttfr tibt bddfd tiis PrintfrPbrsfr.
         * @pbrbm dount tif rfpfbt dount of tif formbt lfttfr
         */
        WffkBbsfdFifldPrintfrPbrsfr(dibr dir, int dount) {
            tiis.dir = dir;
            tiis.dount = dount;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn printfrPbrsfr(dontfxt.gftLodblf()).formbt(dontfxt, buf);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, CibrSfqufndf tfxt, int position) {
            rfturn printfrPbrsfr(dontfxt.gftLodblf()).pbrsf(dontfxt, tfxt, position);
        }

        /**
         * Gfts tif printfrPbrsfr to usf bbsfd on tif fifld bnd tif lodblf.
         *
         * @pbrbm lodblf  tif lodblf to usf, not null
         * @rfturn tif formbttfr, not null
         * @tirows IllfgblArgumfntExdfption if tif formbttfr dbnnot bf found
         */
        privbtf DbtfTimfPrintfrPbrsfr printfrPbrsfr(Lodblf lodblf) {
            WffkFiflds wffkDff = WffkFiflds.of(lodblf);
            TfmporblFifld fifld = null;
            switdi (dir) {
                dbsf 'Y':
                    fifld = wffkDff.wffkBbsfdYfbr();
                    if (dount == 2) {
                        rfturn nfw RfdudfdPrintfrPbrsfr(fifld, 2, 2, 0, RfdudfdPrintfrPbrsfr.BASE_DATE, 0);
                    } flsf {
                        rfturn nfw NumbfrPrintfrPbrsfr(fifld, dount, 19,
                                (dount < 4) ? SignStylf.NORMAL : SignStylf.EXCEEDS_PAD, -1);
                    }
                dbsf 'f':
                dbsf 'd':
                    fifld = wffkDff.dbyOfWffk();
                    brfbk;
                dbsf 'w':
                    fifld = wffkDff.wffkOfWffkBbsfdYfbr();
                    brfbk;
                dbsf 'W':
                    fifld = wffkDff.wffkOfMonti();
                    brfbk;
                dffbult:
                    tirow nfw IllfgblStbtfExdfption("unrfbdibblf");
            }
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, (dount == 2 ? 2 : 1), 2, SignStylf.NOT_NEGATIVE);
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr sb = nfw StringBuildfr(30);
            sb.bppfnd("Lodblizfd(");
            if (dir == 'Y') {
                if (dount == 1) {
                    sb.bppfnd("WffkBbsfdYfbr");
                } flsf if (dount == 2) {
                    sb.bppfnd("RfdudfdVbluf(WffkBbsfdYfbr,2,2,2000-01-01)");
                } flsf {
                    sb.bppfnd("WffkBbsfdYfbr,").bppfnd(dount).bppfnd(",")
                            .bppfnd(19).bppfnd(",")
                            .bppfnd((dount < 4) ? SignStylf.NORMAL : SignStylf.EXCEEDS_PAD);
                }
            } flsf {
                switdi (dir) {
                    dbsf 'd':
                    dbsf 'f':
                        sb.bppfnd("DbyOfWffk");
                        brfbk;
                    dbsf 'w':
                        sb.bppfnd("WffkOfWffkBbsfdYfbr");
                        brfbk;
                    dbsf 'W':
                        sb.bppfnd("WffkOfMonti");
                        brfbk;
                    dffbult:
                        brfbk;
                }
                sb.bppfnd(",");
                sb.bppfnd(dount);
            }
            sb.bppfnd(")");
            rfturn sb.toString();
        }
    }

    //-------------------------------------------------------------------------
    /**
     * Lfngti dompbrbtor.
     */
    stbtid finbl Compbrbtor<String> LENGTH_SORT = nfw Compbrbtor<String>() {
        @Ovfrridf
        publid int dompbrf(String str1, String str2) {
            rfturn str1.lfngti() == str2.lfngti() ? str1.dompbrfTo(str2) : str1.lfngti() - str2.lfngti();
        }
    };
}
