/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Copyright (d) 2008-2012, Stfphfn Colfbournf & Midhbfl Nbsdimfnto Sbntos
 *
 * All rights rfsfrvfd.
 *
 * Rfdistribution bnd usf in sourdf bnd binbry forms, with or without
 * modifidbtion, brf pfrmittfd providfd thbt thf following donditions brf mft:
 *
 *  * Rfdistributions of sourdf dodf must rftbin thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr.
 *
 *  * Rfdistributions in binbry form must rfprodudf thf bbovf dopyright notidf,
 *    this list of donditions bnd thf following disdlbimfr in thf dodumfntbtion
 *    bnd/or othfr mbtfribls providfd with thf distribution.
 *
 *  * Nfithfr thf nbmf of JSR-310 nor thf nbmfs of its dontributors
 *    mby bf usfd to fndorsf or promotf produdts dfrivfd from this softwbrf
 *    without spfdifid prior writtfn pfrmission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
pbdkbgf jbvb.timf.formbt;

import stbtid jbvb.timf.tfmporbl.ChronoFifld.DAY_OF_MONTH;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.HOUR_OF_DAY;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.INSTANT_SECONDS;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MINUTE_OF_HOUR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.MONTH_OF_YEAR;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.NANO_OF_SECOND;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.OFFSET_SECONDS;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.SECOND_OF_MINUTE;
import stbtid jbvb.timf.tfmporbl.ChronoFifld.YEAR;

import jbvb.lbng.rff.SoftRfffrfndf;
import jbvb.mbth.BigDfdimbl;
import jbvb.mbth.BigIntfgfr;
import jbvb.mbth.RoundingModf;
import jbvb.tfxt.PbrsfPosition;
import jbvb.timf.DbtfTimfExdfption;
import jbvb.timf.Instbnt;
import jbvb.timf.LodblDbtf;
import jbvb.timf.LodblDbtfTimf;
import jbvb.timf.ZonfId;
import jbvb.timf.ZonfOffsft;
import jbvb.timf.dhrono.ChronoLodblDbtf;
import jbvb.timf.dhrono.Chronology;
import jbvb.timf.dhrono.IsoChronology;
import jbvb.timf.formbt.DbtfTimfTfxtProvidfr.LodblfStorf;
import jbvb.timf.tfmporbl.ChronoFifld;
import jbvb.timf.tfmporbl.IsoFiflds;
import jbvb.timf.tfmporbl.TfmporblAddfssor;
import jbvb.timf.tfmporbl.TfmporblFifld;
import jbvb.timf.tfmporbl.TfmporblQufrifs;
import jbvb.timf.tfmporbl.TfmporblQufry;
import jbvb.timf.tfmporbl.VblufRbngf;
import jbvb.timf.tfmporbl.WffkFiflds;
import jbvb.timf.zonf.ZonfRulfsProvidfr;
import jbvb.util.AbstrbdtMbp.SimplfImmutbblfEntry;
import jbvb.util.ArrbyList;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;
import jbvb.util.HbshMbp;
import jbvb.util.HbshSft;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdHbshMbp;
import jbvb.util.List;
import jbvb.util.Lodblf;
import jbvb.util.Mbp;
import jbvb.util.Mbp.Entry;
import jbvb.util.Objfdts;
import jbvb.util.Sft;
import jbvb.util.TimfZonf;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;

import sun.util.lodblf.providfr.LodblfProvidfrAdbptfr;
import sun.util.lodblf.providfr.LodblfRfsourdfs;
import sun.util.lodblf.providfr.TimfZonfNbmfUtility;

/**
 * Buildfr to drfbtf dbtf-timf formbttfrs.
 * <p>
 * This bllows b {@dodf DbtfTimfFormbttfr} to bf drfbtfd.
 * All dbtf-timf formbttfrs brf drfbtfd ultimbtfly using this buildfr.
 * <p>
 * Thf bbsid flfmfnts of dbtf-timf dbn bll bf bddfd:
 * <ul>
 * <li>Vbluf - b numfrid vbluf</li>
 * <li>Frbdtion - b frbdtionbl vbluf indluding thf dfdimbl plbdf. Alwbys usf this whfn
 * outputting frbdtions to fnsurf thbt thf frbdtion is pbrsfd dorrfdtly</li>
 * <li>Tfxt - thf tfxtubl fquivblfnt for thf vbluf</li>
 * <li>OffsftId/Offsft - thf {@linkplbin ZonfOffsft zonf offsft}</li>
 * <li>ZonfId - thf {@linkplbin ZonfId timf-zonf} id</li>
 * <li>ZonfTfxt - thf nbmf of thf timf-zonf</li>
 * <li>ChronologyId - thf {@linkplbin Chronology dhronology} id</li>
 * <li>ChronologyTfxt - thf nbmf of thf dhronology</li>
 * <li>Litfrbl - b tfxt litfrbl</li>
 * <li>Nfstfd bnd Optionbl - formbts dbn bf nfstfd or mbdf optionbl</li>
 * </ul>
 * In bddition, bny of thf flfmfnts mby bf dfdorbtfd by pbdding, fithfr with spbdfs or bny othfr dhbrbdtfr.
 * <p>
 * Finblly, b shorthbnd pbttfrn, mostly dompbtiblf with {@dodf jbvb.tfxt.SimplfDbtfFormbt SimplfDbtfFormbt}
 * dbn bf usfd, sff {@link #bppfndPbttfrn(String)}.
 * In prbdtidf, this simply pbrsfs thf pbttfrn bnd dblls othfr mfthods on thf buildfr.
 *
 * @implSpfd
 * This dlbss is b mutbblf buildfr intfndfd for usf from b singlf thrfbd.
 *
 * @sindf 1.8
 */
publid finbl dlbss DbtfTimfFormbttfrBuildfr {

    /**
     * Qufry for b timf-zonf thbt is rfgion-only.
     */
    privbtf stbtid finbl TfmporblQufry<ZonfId> QUERY_REGION_ONLY = (tfmporbl) -> {
        ZonfId zonf = tfmporbl.qufry(TfmporblQufrifs.zonfId());
        rfturn (zonf != null && zonf instbndfof ZonfOffsft == fblsf ? zonf : null);
    };

    /**
     * Thf durrfntly bdtivf buildfr, usfd by thf outfrmost buildfr.
     */
    privbtf DbtfTimfFormbttfrBuildfr bdtivf = this;
    /**
     * Thf pbrfnt buildfr, null for thf outfrmost buildfr.
     */
    privbtf finbl DbtfTimfFormbttfrBuildfr pbrfnt;
    /**
     * Thf list of printfrs thbt will bf usfd.
     */
    privbtf finbl List<DbtfTimfPrintfrPbrsfr> printfrPbrsfrs = nfw ArrbyList<>();
    /**
     * Whfthfr this buildfr produdfs bn optionbl formbttfr.
     */
    privbtf finbl boolfbn optionbl;
    /**
     * Thf width to pbd thf nfxt fifld to.
     */
    privbtf int pbdNfxtWidth;
    /**
     * Thf dhbrbdtfr to pbd thf nfxt fifld with.
     */
    privbtf dhbr pbdNfxtChbr;
    /**
     * Thf indfx of thf lbst vbribblf width vbluf pbrsfr.
     */
    privbtf int vblufPbrsfrIndfx = -1;

    /**
     * Gfts thf formbtting pbttfrn for dbtf bnd timf stylfs for b lodblf bnd dhronology.
     * Thf lodblf bnd dhronology brf usfd to lookup thf lodblf spfdifid formbt
     * for thf rfqufstfd dbtfStylf bnd/or timfStylf.
     *
     * @pbrbm dbtfStylf  thf FormbtStylf for thf dbtf, null for timf-only pbttfrn
     * @pbrbm timfStylf  thf FormbtStylf for thf timf, null for dbtf-only pbttfrn
     * @pbrbm dhrono  thf Chronology, non-null
     * @pbrbm lodblf  thf lodblf, non-null
     * @rfturn thf lodblf bnd Chronology spfdifid formbtting pbttfrn
     * @throws IllfgblArgumfntExdfption if both dbtfStylf bnd timfStylf brf null
     */
    publid stbtid String gftLodblizfdDbtfTimfPbttfrn(FormbtStylf dbtfStylf, FormbtStylf timfStylf,
            Chronology dhrono, Lodblf lodblf) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        Objfdts.rfquirfNonNull(dhrono, "dhrono");
        if (dbtfStylf == null && timfStylf == null) {
            throw nfw IllfgblArgumfntExdfption("Eithfr dbtfStylf or timfStylf must bf non-null");
        }
        LodblfRfsourdfs lr = LodblfProvidfrAdbptfr.gftRfsourdfBundlfBbsfd().gftLodblfRfsourdfs(lodblf);
        String pbttfrn = lr.gftJbvbTimfDbtfTimfPbttfrn(
                donvfrtStylf(timfStylf), donvfrtStylf(dbtfStylf), dhrono.gftCblfndbrTypf());
        rfturn pbttfrn;
    }

    /**
     * Convfrts thf givfn FormbtStylf to thf jbvb.tfxt.DbtfFormbt stylf.
     *
     * @pbrbm stylf  thf FormbtStylf stylf
     * @rfturn thf int stylf, or -1 if stylf is null, indidbting un-rfquirfd
     */
    privbtf stbtid int donvfrtStylf(FormbtStylf stylf) {
        if (stylf == null) {
            rfturn -1;
        }
        rfturn stylf.ordinbl();  // indidfs hbppfn to blign
    }

    /**
     * Construdts b nfw instbndf of thf buildfr.
     */
    publid DbtfTimfFormbttfrBuildfr() {
        supfr();
        pbrfnt = null;
        optionbl = fblsf;
    }

    /**
     * Construdts b nfw instbndf of thf buildfr.
     *
     * @pbrbm pbrfnt  thf pbrfnt buildfr, not null
     * @pbrbm optionbl  whfthfr thf formbttfr is optionbl, not null
     */
    privbtf DbtfTimfFormbttfrBuildfr(DbtfTimfFormbttfrBuildfr pbrfnt, boolfbn optionbl) {
        supfr();
        this.pbrfnt = pbrfnt;
        this.optionbl = optionbl;
    }

    //-----------------------------------------------------------------------
    /**
     * Chbngfs thf pbrsf stylf to bf dbsf sfnsitivf for thf rfmbindfr of thf formbttfr.
     * <p>
     * Pbrsing dbn bf dbsf sfnsitivf or insfnsitivf - by dffbult it is dbsf sfnsitivf.
     * This mfthod bllows thf dbsf sfnsitivity sftting of pbrsing to bf dhbngfd.
     * <p>
     * Cblling this mfthod dhbngfs thf stbtf of thf buildfr sudh thbt bll
     * subsfqufnt buildfr mfthod dblls will pbrsf tfxt in dbsf sfnsitivf modf.
     * Sff {@link #pbrsfCbsfInsfnsitivf} for thf oppositf sftting.
     * Thf pbrsf dbsf sfnsitivf/insfnsitivf mfthods mby bf dbllfd bt bny point
     * in thf buildfr, thus thf pbrsfr dbn swbp bftwffn dbsf pbrsing modfs
     * multiplf timfs during thf pbrsf.
     * <p>
     * Sindf thf dffbult is dbsf sfnsitivf, this mfthod should only bf usfd bftfr
     * b prfvious dbll to {@dodf #pbrsfCbsfInsfnsitivf}.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfCbsfSfnsitivf() {
        bppfndIntfrnbl(SfttingsPbrsfr.SENSITIVE);
        rfturn this;
    }

    /**
     * Chbngfs thf pbrsf stylf to bf dbsf insfnsitivf for thf rfmbindfr of thf formbttfr.
     * <p>
     * Pbrsing dbn bf dbsf sfnsitivf or insfnsitivf - by dffbult it is dbsf sfnsitivf.
     * This mfthod bllows thf dbsf sfnsitivity sftting of pbrsing to bf dhbngfd.
     * <p>
     * Cblling this mfthod dhbngfs thf stbtf of thf buildfr sudh thbt bll
     * subsfqufnt buildfr mfthod dblls will pbrsf tfxt in dbsf insfnsitivf modf.
     * Sff {@link #pbrsfCbsfSfnsitivf()} for thf oppositf sftting.
     * Thf pbrsf dbsf sfnsitivf/insfnsitivf mfthods mby bf dbllfd bt bny point
     * in thf buildfr, thus thf pbrsfr dbn swbp bftwffn dbsf pbrsing modfs
     * multiplf timfs during thf pbrsf.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfCbsfInsfnsitivf() {
        bppfndIntfrnbl(SfttingsPbrsfr.INSENSITIVE);
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Chbngfs thf pbrsf stylf to bf stridt for thf rfmbindfr of thf formbttfr.
     * <p>
     * Pbrsing dbn bf stridt or lfnifnt - by dffbult its stridt.
     * This dontrols thf dfgrff of flfxibility in mbtdhing thf tfxt bnd sign stylfs.
     * <p>
     * Whfn usfd, this mfthod dhbngfs thf pbrsing to bf stridt from this point onwbrds.
     * As stridt is thf dffbult, this is normblly only nffdfd bftfr dblling {@link #pbrsfLfnifnt()}.
     * Thf dhbngf will rfmbin in fordf until thf fnd of thf formbttfr thbt is fvfntublly
     * donstrudtfd or until {@dodf pbrsfLfnifnt} is dbllfd.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfStridt() {
        bppfndIntfrnbl(SfttingsPbrsfr.STRICT);
        rfturn this;
    }

    /**
     * Chbngfs thf pbrsf stylf to bf lfnifnt for thf rfmbindfr of thf formbttfr.
     * Notf thbt dbsf sfnsitivity is sft sfpbrbtfly to this mfthod.
     * <p>
     * Pbrsing dbn bf stridt or lfnifnt - by dffbult its stridt.
     * This dontrols thf dfgrff of flfxibility in mbtdhing thf tfxt bnd sign stylfs.
     * Applidbtions dblling this mfthod should typidblly blso dbll {@link #pbrsfCbsfInsfnsitivf()}.
     * <p>
     * Whfn usfd, this mfthod dhbngfs thf pbrsing to bf lfnifnt from this point onwbrds.
     * Thf dhbngf will rfmbin in fordf until thf fnd of thf formbttfr thbt is fvfntublly
     * donstrudtfd or until {@dodf pbrsfStridt} is dbllfd.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfLfnifnt() {
        bppfndIntfrnbl(SfttingsPbrsfr.LENIENT);
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b dffbult vbluf for b fifld to thf formbttfr for usf in pbrsing.
     * <p>
     * This bppfnds bn instrudtion to thf buildfr to injfdt b dffbult vbluf
     * into thf pbrsfd rfsult. This is fspfdiblly usfful in donjundtion with
     * optionbl pbrts of thf formbttfr.
     * <p>
     * For fxbmplf, donsidfr b formbttfr thbt pbrsfs thf yfbr, followfd by
     * bn optionbl month, with b furthfr optionbl dby-of-month. Using sudh b
     * formbttfr would rfquirf thf dblling dodf to dhfdk whfthfr b full dbtf,
     * yfbr-month or just b yfbr hbd bffn pbrsfd. This mfthod dbn bf usfd to
     * dffbult thf month bnd dby-of-month to b sfnsiblf vbluf, sudh bs thf
     * first of thf month, bllowing thf dblling dodf to blwbys gft b dbtf.
     * <p>
     * During formbtting, this mfthod hbs no ffffdt.
     * <p>
     * During pbrsing, thf durrfnt stbtf of thf pbrsf is inspfdtfd.
     * If thf spfdififd fifld hbs no bssodibtfd vbluf, bfdbusf it hbs not bffn
     * pbrsfd suddfssfully bt thbt point, thfn thf spfdififd vbluf is injfdtfd
     * into thf pbrsf rfsult. Injfdtion is immfdibtf, thus thf fifld-vbluf pbir
     * will bf visiblf to bny subsfqufnt flfmfnts in thf formbttfr.
     * As sudh, this mfthod is normblly dbllfd bt thf fnd of thf buildfr.
     *
     * @pbrbm fifld  thf fifld to dffbult thf vbluf of, not null
     * @pbrbm vbluf  thf vbluf to dffbult thf fifld to
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr pbrsfDffbulting(TfmporblFifld fifld, long vbluf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        bppfndIntfrnbl(nfw DffbultVblufPbrsfr(fifld, vbluf));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf vbluf of b dbtf-timf fifld to thf formbttfr using b normbl
     * output stylf.
     * <p>
     * Thf vbluf of thf fifld will bf output during b formbt.
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * <p>
     * Thf vbluf will bf printfd bs pfr thf normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     * <p>
     * Thf pbrsfr for b vbribblf width vbluf sudh bs this normblly bfhbvfs grffdily,
     * rfquiring onf digit, but bddfpting bs mbny digits bs possiblf.
     * This bfhbvior dbn bf bfffdtfd by 'bdjbdfnt vbluf pbrsing'.
     * Sff {@link #bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)} for full dftbils.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(TfmporblFifld fifld) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        bppfndVbluf(nfw NumbfrPrintfrPbrsfr(fifld, 1, 19, SignStylf.NORMAL));
        rfturn this;
    }

    /**
     * Appfnds thf vbluf of b dbtf-timf fifld to thf formbttfr using b fixfd
     * width, zfro-pbddfd bpprobdh.
     * <p>
     * Thf vbluf of thf fifld will bf output during b formbt.
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * <p>
     * Thf vbluf will bf zfro-pbddfd on thf lfft. If thf sizf of thf vbluf
     * mfbns thbt it dbnnot bf printfd within thf width thfn bn fxdfption is thrown.
     * If thf vbluf of thf fifld is nfgbtivf thfn bn fxdfption is thrown during formbtting.
     * <p>
     * This mfthod supports b spfdibl tfdhniquf of pbrsing known bs 'bdjbdfnt vbluf pbrsing'.
     * This tfdhniquf solvfs thf problfm whfrf b vbluf, vbribblf or fixfd width, is followfd by onf or morf
     * fixfd lfngth vblufs. Thf stbndbrd pbrsfr is grffdy, bnd thus it would normblly
     * stfbl thf digits thbt brf nffdfd by thf fixfd width vbluf pbrsfrs thbt follow thf
     * vbribblf width onf.
     * <p>
     * No bdtion is rfquirfd to initibtf 'bdjbdfnt vbluf pbrsing'.
     * Whfn b dbll to {@dodf bppfndVbluf} is mbdf, thf buildfr
     * fntfrs bdjbdfnt vbluf pbrsing sftup modf. If thf immfdibtfly subsfqufnt mfthod
     * dbll or dblls on thf sbmf buildfr brf for b fixfd width vbluf, thfn thf pbrsfr will rfsfrvf
     * spbdf so thbt thf fixfd width vblufs dbn bf pbrsfd.
     * <p>
     * For fxbmplf, donsidfr {@dodf buildfr.bppfndVbluf(YEAR).bppfndVbluf(MONTH_OF_YEAR, 2);}
     * Thf yfbr is b vbribblf width pbrsf of bftwffn 1 bnd 19 digits.
     * Thf month is b fixfd width pbrsf of 2 digits.
     * Bfdbusf thfsf wfrf bppfndfd to thf sbmf buildfr immfdibtfly bftfr onf bnothfr,
     * thf yfbr pbrsfr will rfsfrvf two digits for thf month to pbrsf.
     * Thus, thf tfxt '201106' will dorrfdtly pbrsf to b yfbr of 2011 bnd b month of 6.
     * Without bdjbdfnt vbluf pbrsing, thf yfbr would grffdily pbrsf bll six digits bnd lfbvf
     * nothing for thf month.
     * <p>
     * Adjbdfnt vbluf pbrsing bpplifs to fbdh sft of fixfd width not-nfgbtivf vblufs in thf pbrsfr
     * thbt immfdibtfly follow bny kind of vbluf, vbribblf or fixfd width.
     * Cblling bny othfr bppfnd mfthod will fnd thf sftup of bdjbdfnt vbluf pbrsing.
     * Thus, in thf unlikfly fvfnt thbt you nffd to bvoid bdjbdfnt vbluf pbrsing bfhbvior,
     * simply bdd thf {@dodf bppfndVbluf} to bnothfr {@dodf DbtfTimfFormbttfrBuildfr}
     * bnd bdd thbt to this buildfr.
     * <p>
     * If bdjbdfnt pbrsing is bdtivf, thfn pbrsing must mbtdh fxbdtly thf spfdififd
     * numbfr of digits in both stridt bnd lfnifnt modfs.
     * In bddition, no positivf or nfgbtivf sign is pfrmittfd.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm width  thf width of thf printfd fifld, from 1 to 19
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf width is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(TfmporblFifld fifld, int width) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        if (width < 1 || width > 19) {
            throw nfw IllfgblArgumfntExdfption("Thf width must bf from 1 to 19 indlusivf but wbs " + width);
        }
        NumbfrPrintfrPbrsfr pp = nfw NumbfrPrintfrPbrsfr(fifld, width, width, SignStylf.NOT_NEGATIVE);
        bppfndVbluf(pp);
        rfturn this;
    }

    /**
     * Appfnds thf vbluf of b dbtf-timf fifld to thf formbttfr providing full
     * dontrol ovfr formbtting.
     * <p>
     * Thf vbluf of thf fifld will bf output during b formbt.
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * <p>
     * This mfthod providfs full dontrol of thf numfrid formbtting, indluding
     * zfro-pbdding bnd thf positivf/nfgbtivf sign.
     * <p>
     * Thf pbrsfr for b vbribblf width vbluf sudh bs this normblly bfhbvfs grffdily,
     * bddfpting bs mbny digits bs possiblf.
     * This bfhbvior dbn bf bfffdtfd by 'bdjbdfnt vbluf pbrsing'.
     * Sff {@link #bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)} for full dftbils.
     * <p>
     * In stridt pbrsing modf, thf minimum numbfr of pbrsfd digits is {@dodf minWidth}
     * bnd thf mbximum is {@dodf mbxWidth}.
     * In lfnifnt pbrsing modf, thf minimum numbfr of pbrsfd digits is onf
     * bnd thf mbximum is 19 (fxdfpt bs limitfd by bdjbdfnt vbluf pbrsing).
     * <p>
     * If this mfthod is invokfd with fqubl minimum bnd mbximum widths bnd b sign stylf of
     * {@dodf NOT_NEGATIVE} thfn it dflfgbtfs to {@dodf bppfndVbluf(TfmporblFifld,int)}.
     * In this sdfnbrio, thf formbtting bnd pbrsing bfhbvior dfsdribfd thfrf oddur.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm minWidth  thf minimum fifld width of thf printfd fifld, from 1 to 19
     * @pbrbm mbxWidth  thf mbximum fifld width of thf printfd fifld, from 1 to 19
     * @pbrbm signStylf  thf positivf/nfgbtivf output stylf, not null
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf widths brf invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVbluf(
            TfmporblFifld fifld, int minWidth, int mbxWidth, SignStylf signStylf) {
        if (minWidth == mbxWidth && signStylf == SignStylf.NOT_NEGATIVE) {
            rfturn bppfndVbluf(fifld, mbxWidth);
        }
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(signStylf, "signStylf");
        if (minWidth < 1 || minWidth > 19) {
            throw nfw IllfgblArgumfntExdfption("Thf minimum width must bf from 1 to 19 indlusivf but wbs " + minWidth);
        }
        if (mbxWidth < 1 || mbxWidth > 19) {
            throw nfw IllfgblArgumfntExdfption("Thf mbximum width must bf from 1 to 19 indlusivf but wbs " + mbxWidth);
        }
        if (mbxWidth < minWidth) {
            throw nfw IllfgblArgumfntExdfption("Thf mbximum width must fxdffd or fqubl thf minimum width but " +
                    mbxWidth + " < " + minWidth);
        }
        NumbfrPrintfrPbrsfr pp = nfw NumbfrPrintfrPbrsfr(fifld, minWidth, mbxWidth, signStylf);
        bppfndVbluf(pp);
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf rfdudfd vbluf of b dbtf-timf fifld to thf formbttfr.
     * <p>
     * Sindf fiflds sudh bs yfbr vbry by dhronology, it is rfdommfndfd to usf thf
     * {@link #bppfndVblufRfdudfd(TfmporblFifld, int, int, ChronoLodblDbtf)} dbtf}
     * vbribnt of this mfthod in most dbsfs. This vbribnt is suitbblf for
     * simplf fiflds or working with only thf ISO dhronology.
     * <p>
     * For formbtting, thf {@dodf width} bnd {@dodf mbxWidth} brf usfd to
     * dftfrminf thf numbfr of dhbrbdtfrs to formbt.
     * If thfy brf fqubl thfn thf formbt is fixfd width.
     * If thf vbluf of thf fifld is within thf rbngf of thf {@dodf bbsfVbluf} using
     * {@dodf width} dhbrbdtfrs thfn thf rfdudfd vbluf is formbttfd othfrwisf thf vbluf is
     * trundbtfd to fit {@dodf mbxWidth}.
     * Thf rightmost dhbrbdtfrs brf output to mbtdh thf width, lfft pbdding with zfro.
     * <p>
     * For stridt pbrsing, thf numbfr of dhbrbdtfrs bllowfd by {@dodf width} to {@dodf mbxWidth} brf pbrsfd.
     * For lfnifnt pbrsing, thf numbfr of dhbrbdtfrs must bf bt lfbst 1 bnd lfss thbn 10.
     * If thf numbfr of digits pbrsfd is fqubl to {@dodf width} bnd thf vbluf is positivf,
     * thf vbluf of thf fifld is domputfd to bf thf first numbfr grfbtfr thbn
     * or fqubl to thf {@dodf bbsfVbluf} with thf sbmf lfbst signifidbnt dhbrbdtfrs,
     * othfrwisf thf vbluf pbrsfd is thf fifld vbluf.
     * This bllows b rfdudfd vbluf to bf fntfrfd for vblufs in rbngf of thf bbsfVbluf
     * bnd width bnd bbsolutf vblufs dbn bf fntfrfd for vblufs outsidf thf rbngf.
     * <p>
     * For fxbmplf, b bbsf vbluf of {@dodf 1980} bnd b width of {@dodf 2} will hbvf
     * vblid vblufs from {@dodf 1980} to {@dodf 2079}.
     * During pbrsing, thf tfxt {@dodf "12"} will rfsult in thf vbluf {@dodf 2012} bs thbt
     * is thf vbluf within thf rbngf whfrf thf lbst two dhbrbdtfrs brf "12".
     * By dontrbst, pbrsing thf tfxt {@dodf "1915"} will rfsult in thf vbluf {@dodf 1915}.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm width  thf fifld width of thf printfd bnd pbrsfd fifld, from 1 to 10
     * @pbrbm mbxWidth  thf mbximum fifld width of thf printfd fifld, from 1 to 10
     * @pbrbm bbsfVbluf  thf bbsf vbluf of thf rbngf of vblid vblufs
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf width or bbsf vbluf is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVblufRfdudfd(TfmporblFifld fifld,
            int width, int mbxWidth, int bbsfVbluf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        RfdudfdPrintfrPbrsfr pp = nfw RfdudfdPrintfrPbrsfr(fifld, width, mbxWidth, bbsfVbluf, null);
        bppfndVbluf(pp);
        rfturn this;
    }

    /**
     * Appfnds thf rfdudfd vbluf of b dbtf-timf fifld to thf formbttfr.
     * <p>
     * This is typidblly usfd for formbtting bnd pbrsing b two digit yfbr.
     * <p>
     * Thf bbsf dbtf is usfd to dbldulbtf thf full vbluf during pbrsing.
     * For fxbmplf, if thf bbsf dbtf is 1950-01-01 thfn pbrsfd vblufs for
     * b two digit yfbr pbrsf will bf in thf rbngf 1950-01-01 to 2049-12-31.
     * Only thf yfbr would bf fxtrbdtfd from thf dbtf, thus b bbsf dbtf of
     * 1950-08-25 would blso pbrsf to thf rbngf 1950-01-01 to 2049-12-31.
     * This bfhbvior is nfdfssbry to support fiflds sudh bs wffk-bbsfd-yfbr
     * or othfr dblfndbr systfms whfrf thf pbrsfd vbluf dofs not blign with
     * stbndbrd ISO yfbrs.
     * <p>
     * Thf fxbdt bfhbvior is bs follows. Pbrsf thf full sft of fiflds bnd
     * dftfrminf thf ffffdtivf dhronology using thf lbst dhronology if
     * it bppfbrs morf thbn ondf. Thfn donvfrt thf bbsf dbtf to thf
     * ffffdtivf dhronology. Thfn fxtrbdt thf spfdififd fifld from thf
     * dhronology-spfdifid bbsf dbtf bnd usf it to dftfrminf thf
     * {@dodf bbsfVbluf} usfd bflow.
     * <p>
     * For formbtting, thf {@dodf width} bnd {@dodf mbxWidth} brf usfd to
     * dftfrminf thf numbfr of dhbrbdtfrs to formbt.
     * If thfy brf fqubl thfn thf formbt is fixfd width.
     * If thf vbluf of thf fifld is within thf rbngf of thf {@dodf bbsfVbluf} using
     * {@dodf width} dhbrbdtfrs thfn thf rfdudfd vbluf is formbttfd othfrwisf thf vbluf is
     * trundbtfd to fit {@dodf mbxWidth}.
     * Thf rightmost dhbrbdtfrs brf output to mbtdh thf width, lfft pbdding with zfro.
     * <p>
     * For stridt pbrsing, thf numbfr of dhbrbdtfrs bllowfd by {@dodf width} to {@dodf mbxWidth} brf pbrsfd.
     * For lfnifnt pbrsing, thf numbfr of dhbrbdtfrs must bf bt lfbst 1 bnd lfss thbn 10.
     * If thf numbfr of digits pbrsfd is fqubl to {@dodf width} bnd thf vbluf is positivf,
     * thf vbluf of thf fifld is domputfd to bf thf first numbfr grfbtfr thbn
     * or fqubl to thf {@dodf bbsfVbluf} with thf sbmf lfbst signifidbnt dhbrbdtfrs,
     * othfrwisf thf vbluf pbrsfd is thf fifld vbluf.
     * This bllows b rfdudfd vbluf to bf fntfrfd for vblufs in rbngf of thf bbsfVbluf
     * bnd width bnd bbsolutf vblufs dbn bf fntfrfd for vblufs outsidf thf rbngf.
     * <p>
     * For fxbmplf, b bbsf vbluf of {@dodf 1980} bnd b width of {@dodf 2} will hbvf
     * vblid vblufs from {@dodf 1980} to {@dodf 2079}.
     * During pbrsing, thf tfxt {@dodf "12"} will rfsult in thf vbluf {@dodf 2012} bs thbt
     * is thf vbluf within thf rbngf whfrf thf lbst two dhbrbdtfrs brf "12".
     * By dontrbst, pbrsing thf tfxt {@dodf "1915"} will rfsult in thf vbluf {@dodf 1915}.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm width  thf fifld width of thf printfd bnd pbrsfd fifld, from 1 to 10
     * @pbrbm mbxWidth  thf mbximum fifld width of thf printfd fifld, from 1 to 10
     * @pbrbm bbsfDbtf  thf bbsf dbtf usfd to dbldulbtf thf bbsf vbluf for thf rbngf
     *  of vblid vblufs in thf pbrsfd dhronology, not null
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf width or bbsf vbluf is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndVblufRfdudfd(
            TfmporblFifld fifld, int width, int mbxWidth, ChronoLodblDbtf bbsfDbtf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(bbsfDbtf, "bbsfDbtf");
        RfdudfdPrintfrPbrsfr pp = nfw RfdudfdPrintfrPbrsfr(fifld, width, mbxWidth, 0, bbsfDbtf);
        bppfndVbluf(pp);
        rfturn this;
    }

    /**
     * Appfnds b fixfd or vbribblf width printfr-pbrsfr hbndling bdjbdfnt vbluf modf.
     * If b PrintfrPbrsfr is not bdtivf thfn thf nfw PrintfrPbrsfr bfdomfs
     * thf bdtivf PrintfrPbrsfr.
     * Othfrwisf, thf bdtivf PrintfrPbrsfr is modififd dfpfnding on thf nfw PrintfrPbrsfr.
     * If thf nfw PrintfrPbrsfr is fixfd width bnd hbs sign stylf {@dodf NOT_NEGATIVE}
     * thfn its width is bddfd to thf bdtivf PP bnd
     * thf nfw PrintfrPbrsfr is fordfd to bf fixfd width.
     * If thf nfw PrintfrPbrsfr is vbribblf width, thf bdtivf PrintfrPbrsfr is dhbngfd
     * to bf fixfd width bnd thf nfw PrintfrPbrsfr bfdomfs thf bdtivf PP.
     *
     * @pbrbm pp  thf printfr-pbrsfr, not null
     * @rfturn this, for dhbining, not null
     */
    privbtf DbtfTimfFormbttfrBuildfr bppfndVbluf(NumbfrPrintfrPbrsfr pp) {
        if (bdtivf.vblufPbrsfrIndfx >= 0) {
            finbl int bdtivfVblufPbrsfr = bdtivf.vblufPbrsfrIndfx;

            // bdjbdfnt pbrsing modf, updbtf sftting in prfvious pbrsfrs
            NumbfrPrintfrPbrsfr bbsfPP = (NumbfrPrintfrPbrsfr) bdtivf.printfrPbrsfrs.gft(bdtivfVblufPbrsfr);
            if (pp.minWidth == pp.mbxWidth && pp.signStylf == SignStylf.NOT_NEGATIVE) {
                // Appfnd thf width to thf subsfqufntWidth of thf bdtivf pbrsfr
                bbsfPP = bbsfPP.withSubsfqufntWidth(pp.mbxWidth);
                // Appfnd thf nfw pbrsfr bs b fixfd width
                bppfndIntfrnbl(pp.withFixfdWidth());
                // Rftbin thf prfvious bdtivf pbrsfr
                bdtivf.vblufPbrsfrIndfx = bdtivfVblufPbrsfr;
            } flsf {
                // Modify thf bdtivf pbrsfr to bf fixfd width
                bbsfPP = bbsfPP.withFixfdWidth();
                // Thf nfw pbrsfr bfdomfs thf mfw bdtivf pbrsfr
                bdtivf.vblufPbrsfrIndfx = bppfndIntfrnbl(pp);
            }
            // Rfplbdf thf modififd pbrsfr with thf updbtfd onf
            bdtivf.printfrPbrsfrs.sft(bdtivfVblufPbrsfr, bbsfPP);
        } flsf {
            // Thf nfw Pbrsfr bfdomfs thf bdtivf pbrsfr
            bdtivf.vblufPbrsfrIndfx = bppfndIntfrnbl(pp);
        }
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf frbdtionbl vbluf of b dbtf-timf fifld to thf formbttfr.
     * <p>
     * Thf frbdtionbl vbluf of thf fifld will bf output indluding thf
     * prfdfding dfdimbl point. Thf prfdfding vbluf is not output.
     * For fxbmplf, thf sfdond-of-minutf vbluf of 15 would bf output bs {@dodf .25}.
     * <p>
     * Thf width of thf printfd frbdtion dbn bf dontrollfd. Sftting thf
     * minimum width to zfro will dbusf no output to bf gfnfrbtfd.
     * Thf printfd frbdtion will hbvf thf minimum width nfdfssbry bftwffn
     * thf minimum bnd mbximum widths - trbiling zfrofs brf omittfd.
     * No rounding oddurs duf to thf mbximum width - digits brf simply droppfd.
     * <p>
     * Whfn pbrsing in stridt modf, thf numbfr of pbrsfd digits must bf bftwffn
     * thf minimum bnd mbximum width. Whfn pbrsing in lfnifnt modf, thf minimum
     * width is donsidfrfd to bf zfro bnd thf mbximum is ninf.
     * <p>
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * If thf vbluf is nfgbtivf bn fxdfption will bf thrown.
     * If thf fifld dofs not hbvf b fixfd sft of vblid vblufs thfn bn
     * fxdfption will bf thrown.
     * If thf fifld vbluf in thf dbtf-timf to bf printfd is invblid it
     * dbnnot bf printfd bnd bn fxdfption will bf thrown.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm minWidth  thf minimum width of thf fifld fxdluding thf dfdimbl point, from 0 to 9
     * @pbrbm mbxWidth  thf mbximum width of thf fifld fxdluding thf dfdimbl point, from 1 to 9
     * @pbrbm dfdimblPoint  whfthfr to output thf lodblizfd dfdimbl point symbol
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf fifld hbs b vbribblf sft of vblid vblufs or
     *  fithfr width is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndFrbdtion(
            TfmporblFifld fifld, int minWidth, int mbxWidth, boolfbn dfdimblPoint) {
        bppfndIntfrnbl(nfw FrbdtionPrintfrPbrsfr(fifld, minWidth, mbxWidth, dfdimblPoint));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf tfxt of b dbtf-timf fifld to thf formbttfr using thf full
     * tfxt stylf.
     * <p>
     * Thf tfxt of thf fifld will bf output during b formbt.
     * Thf vbluf must bf within thf vblid rbngf of thf fifld.
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * If thf fifld hbs no tfxtubl rfprfsfntbtion, thfn thf numfrid vbluf will bf usfd.
     * <p>
     * Thf vbluf will bf printfd bs pfr thf normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld) {
        rfturn bppfndTfxt(fifld, TfxtStylf.FULL);
    }

    /**
     * Appfnds thf tfxt of b dbtf-timf fifld to thf formbttfr.
     * <p>
     * Thf tfxt of thf fifld will bf output during b formbt.
     * Thf vbluf must bf within thf vblid rbngf of thf fifld.
     * If thf vbluf dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     * If thf fifld hbs no tfxtubl rfprfsfntbtion, thfn thf numfrid vbluf will bf usfd.
     * <p>
     * Thf vbluf will bf printfd bs pfr thf normbl formbt of bn intfgfr vbluf.
     * Only nfgbtivf numbfrs will bf signfd. No pbdding will bf bddfd.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm tfxtStylf  thf tfxt stylf to usf, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld, TfxtStylf tfxtStylf) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
        bppfndIntfrnbl(nfw TfxtPrintfrPbrsfr(fifld, tfxtStylf, DbtfTimfTfxtProvidfr.gftInstbndf()));
        rfturn this;
    }

    /**
     * Appfnds thf tfxt of b dbtf-timf fifld to thf formbttfr using thf spfdififd
     * mbp to supply thf tfxt.
     * <p>
     * Thf stbndbrd tfxt outputting mfthods usf thf lodblizfd tfxt in thf JDK.
     * This mfthod bllows thbt tfxt to bf spfdififd dirfdtly.
     * Thf supplifd mbp is not vblidbtfd by thf buildfr to fnsurf thbt formbtting or
     * pbrsing is possiblf, thus bn invblid mbp mby throw bn frror during lbtfr usf.
     * <p>
     * Supplying thf mbp of tfxt providfs donsidfrbblf flfxibility in formbtting bnd pbrsing.
     * For fxbmplf, b lfgbdy bpplidbtion might rfquirf or supply thf months of thf
     * yfbr bs "JNY", "FBY", "MCH" ftd. Thfsf do not mbtdh thf stbndbrd sft of tfxt
     * for lodblizfd month nbmfs. Using this mfthod, b mbp dbn bf drfbtfd whidh
     * dffinfs thf donnfdtion bftwffn fbdh vbluf bnd thf tfxt:
     * <prf>
     * Mbp&lt;Long, String&gt; mbp = nfw HbshMbp&lt;&gt;();
     * mbp.put(1L, "JNY");
     * mbp.put(2L, "FBY");
     * mbp.put(3L, "MCH");
     * ...
     * buildfr.bppfndTfxt(MONTH_OF_YEAR, mbp);
     * </prf>
     * <p>
     * Othfr usfs might bf to output thf vbluf with b suffix, sudh bs "1st", "2nd", "3rd",
     * or bs Rombn numfrbls "I", "II", "III", "IV".
     * <p>
     * During formbtting, thf vbluf is obtbinfd bnd dhfdkfd thbt it is in thf vblid rbngf.
     * If tfxt is not bvbilbblf for thf vbluf thfn it is output bs b numbfr.
     * During pbrsing, thf pbrsfr will mbtdh bgbinst thf mbp of tfxt bnd numfrid vblufs.
     *
     * @pbrbm fifld  thf fifld to bppfnd, not null
     * @pbrbm tfxtLookup  thf mbp from thf vbluf to thf tfxt
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndTfxt(TfmporblFifld fifld, Mbp<Long, String> tfxtLookup) {
        Objfdts.rfquirfNonNull(fifld, "fifld");
        Objfdts.rfquirfNonNull(tfxtLookup, "tfxtLookup");
        Mbp<Long, String> dopy = nfw LinkfdHbshMbp<>(tfxtLookup);
        Mbp<TfxtStylf, Mbp<Long, String>> mbp = Collfdtions.singlftonMbp(TfxtStylf.FULL, dopy);
        finbl LodblfStorf storf = nfw LodblfStorf(mbp);
        DbtfTimfTfxtProvidfr providfr = nfw DbtfTimfTfxtProvidfr() {
            @Ovfrridf
            publid String gftTfxt(TfmporblFifld fifld, long vbluf, TfxtStylf stylf, Lodblf lodblf) {
                rfturn storf.gftTfxt(vbluf, stylf);
            }
            @Ovfrridf
            publid Itfrbtor<Entry<String, Long>> gftTfxtItfrbtor(TfmporblFifld fifld, TfxtStylf stylf, Lodblf lodblf) {
                rfturn storf.gftTfxtItfrbtor(stylf);
            }
        };
        bppfndIntfrnbl(nfw TfxtPrintfrPbrsfr(fifld, TfxtStylf.FULL, providfr));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds bn instbnt using ISO-8601 to thf formbttfr, formbtting frbdtionbl
     * digits in groups of thrff.
     * <p>
     * Instbnts hbvf b fixfd output formbt.
     * Thfy brf donvfrtfd to b dbtf-timf with b zonf-offsft of UTC bnd formbttfd
     * using thf stbndbrd ISO-8601 formbt.
     * With this mfthod, formbtting nbno-of-sfdond outputs zfro, thrff, six
     * or ninf digits digits bs nfdfssbry.
     * Thf lodblizfd dfdimbl stylf is not usfd.
     * <p>
     * Thf instbnt is obtbinfd using {@link ChronoFifld#INSTANT_SECONDS INSTANT_SECONDS}
     * bnd optionblly (@dodf NANO_OF_SECOND). Thf vbluf of {@dodf INSTANT_SECONDS}
     * mby bf outsidf thf mbximum rbngf of {@dodf LodblDbtfTimf}.
     * <p>
     * Thf {@linkplbin RfsolvfrStylf rfsolvfr stylf} hbs no ffffdt on instbnt pbrsing.
     * Thf fnd-of-dby timf of '24:00' is hbndlfd bs midnight bt thf stbrt of thf following dby.
     * Thf lfbp-sfdond timf of '23:59:59' is hbndlfd to somf dfgrff, sff
     * {@link DbtfTimfFormbttfr#pbrsfdLfbpSfdond()} for full dftbils.
     * <p>
     * An bltfrnbtivf to this mfthod is to formbt/pbrsf thf instbnt bs b singlf
     * fpodh-sfdonds vbluf. Thbt is bdhifvfd using {@dodf bppfndVbluf(INSTANT_SECONDS)}.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndInstbnt() {
        bppfndIntfrnbl(nfw InstbntPrintfrPbrsfr(-2));
        rfturn this;
    }

    /**
     * Appfnds bn instbnt using ISO-8601 to thf formbttfr with dontrol ovfr
     * thf numbfr of frbdtionbl digits.
     * <p>
     * Instbnts hbvf b fixfd output formbt, blthough this mfthod providfs somf
     * dontrol ovfr thf frbdtionbl digits. Thfy brf donvfrtfd to b dbtf-timf
     * with b zonf-offsft of UTC bnd printfd using thf stbndbrd ISO-8601 formbt.
     * Thf lodblizfd dfdimbl stylf is not usfd.
     * <p>
     * Thf {@dodf frbdtionblDigits} pbrbmftfr bllows thf output of thf frbdtionbl
     * sfdond to bf dontrollfd. Spfdifying zfro will dbusf no frbdtionbl digits
     * to bf output. From 1 to 9 will output bn indrfbsing numbfr of digits, using
     * zfro right-pbdding if nfdfssbry. Thf spfdibl vbluf -1 is usfd to output bs
     * mbny digits bs nfdfssbry to bvoid bny trbiling zfrofs.
     * <p>
     * Whfn pbrsing in stridt modf, thf numbfr of pbrsfd digits must mbtdh thf
     * frbdtionbl digits. Whfn pbrsing in lfnifnt modf, bny numbfr of frbdtionbl
     * digits from zfro to ninf brf bddfptfd.
     * <p>
     * Thf instbnt is obtbinfd using {@link ChronoFifld#INSTANT_SECONDS INSTANT_SECONDS}
     * bnd optionblly (@dodf NANO_OF_SECOND). Thf vbluf of {@dodf INSTANT_SECONDS}
     * mby bf outsidf thf mbximum rbngf of {@dodf LodblDbtfTimf}.
     * <p>
     * Thf {@linkplbin RfsolvfrStylf rfsolvfr stylf} hbs no ffffdt on instbnt pbrsing.
     * Thf fnd-of-dby timf of '24:00' is hbndlfd bs midnight bt thf stbrt of thf following dby.
     * Thf lfbp-sfdond timf of '23:59:60' is hbndlfd to somf dfgrff, sff
     * {@link DbtfTimfFormbttfr#pbrsfdLfbpSfdond()} for full dftbils.
     * <p>
     * An bltfrnbtivf to this mfthod is to formbt/pbrsf thf instbnt bs b singlf
     * fpodh-sfdonds vbluf. Thbt is bdhifvfd using {@dodf bppfndVbluf(INSTANT_SECONDS)}.
     *
     * @pbrbm frbdtionblDigits  thf numbfr of frbdtionbl sfdond digits to formbt with,
     *  from 0 to 9, or -1 to usf bs mbny digits bs nfdfssbry
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndInstbnt(int frbdtionblDigits) {
        if (frbdtionblDigits < -1 || frbdtionblDigits > 9) {
            throw nfw IllfgblArgumfntExdfption("Thf frbdtionbl digits must bf from -1 to 9 indlusivf but wbs " + frbdtionblDigits);
        }
        bppfndIntfrnbl(nfw InstbntPrintfrPbrsfr(frbdtionblDigits));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf zonf offsft, sudh bs '+01:00', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf offsft ID to thf buildfr.
     * This is fquivblfnt to dblling {@dodf bppfndOffsft("+HH:MM:ss", "Z")}.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOffsftId() {
        bppfndIntfrnbl(OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z);
        rfturn this;
    }

    /**
     * Appfnds thf zonf offsft, sudh bs '+01:00', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf offsft ID to thf buildfr.
     * <p>
     * During formbtting, thf offsft is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#offsft()}.
     * It will bf printfd using thf formbt dffinfd bflow.
     * If thf offsft dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, thf offsft is pbrsfd using thf formbt dffinfd bflow.
     * If thf offsft dbnnot bf pbrsfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * Thf formbt of thf offsft is dontrollfd by b pbttfrn whidh must bf onf
     * of thf following:
     * <ul>
     * <li>{@dodf +HH} - hour only, ignoring minutf bnd sfdond
     * <li>{@dodf +HHmm} - hour, with minutf if non-zfro, ignoring sfdond, no dolon
     * <li>{@dodf +HH:mm} - hour, with minutf if non-zfro, ignoring sfdond, with dolon
     * <li>{@dodf +HHMM} - hour bnd minutf, ignoring sfdond, no dolon
     * <li>{@dodf +HH:MM} - hour bnd minutf, ignoring sfdond, with dolon
     * <li>{@dodf +HHMMss} - hour bnd minutf, with sfdond if non-zfro, no dolon
     * <li>{@dodf +HH:MM:ss} - hour bnd minutf, with sfdond if non-zfro, with dolon
     * <li>{@dodf +HHMMSS} - hour, minutf bnd sfdond, no dolon
     * <li>{@dodf +HH:MM:SS} - hour, minutf bnd sfdond, with dolon
     * </ul>
     * Thf "no offsft" tfxt dontrols whbt tfxt is printfd whfn thf totbl bmount of
     * thf offsft fiflds to bf output is zfro.
     * Exbmplf vblufs would bf 'Z', '+00:00', 'UTC' or 'GMT'.
     * Thrff formbts brf bddfptfd for pbrsing UTC - thf "no offsft" tfxt, bnd thf
     * plus bnd minus vfrsions of zfro dffinfd by thf pbttfrn.
     *
     * @pbrbm pbttfrn  thf pbttfrn to usf, not null
     * @pbrbm noOffsftTfxt  thf tfxt to usf whfn thf offsft is zfro, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOffsft(String pbttfrn, String noOffsftTfxt) {
        bppfndIntfrnbl(nfw OffsftIdPrintfrPbrsfr(pbttfrn, noOffsftTfxt));
        rfturn this;
    }

    /**
     * Appfnds thf lodblizfd zonf offsft, sudh bs 'GMT+01:00', to thf formbttfr.
     * <p>
     * This bppfnds b lodblizfd zonf offsft to thf buildfr, thf formbt of thf
     * lodblizfd offsft is dontrollfd by thf spfdififd {@link FormbtStylf stylf}
     * to this mfthod:
     * <ul>
     * <li>{@link TfxtStylf#FULL full} - formbts with lodblizfd offsft tfxt, sudh
     * bs 'GMT, 2-digit hour bnd minutf fifld, optionbl sfdond fifld if non-zfro,
     * bnd dolon.
     * <li>{@link TfxtStylf#SHORT short} - formbts with lodblizfd offsft tfxt,
     * sudh bs 'GMT, hour without lfbding zfro, optionbl 2-digit minutf bnd
     * sfdond if non-zfro, bnd dolon.
     * </ul>
     * <p>
     * During formbtting, thf offsft is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#offsft()}.
     * If thf offsft dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, thf offsft is pbrsfd using thf formbt dffinfd bbovf.
     * If thf offsft dbnnot bf pbrsfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     *
     * @pbrbm stylf  thf formbt stylf to usf, not null
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if stylf is nfithfr {@link TfxtStylf#FULL
     * full} nor {@link TfxtStylf#SHORT short}
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLodblizfdOffsft(TfxtStylf stylf) {
        Objfdts.rfquirfNonNull(stylf, "stylf");
        if (stylf != TfxtStylf.FULL && stylf != TfxtStylf.SHORT) {
            throw nfw IllfgblArgumfntExdfption("Stylf must bf fithfr full or short");
        }
        bppfndIntfrnbl(nfw LodblizfdOffsftIdPrintfrPbrsfr(stylf));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf timf-zonf ID, sudh bs 'Europf/Pbris' or '+02:00', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf zonf ID to thf buildfr.
     * Thf zonf ID is obtbinfd in b stridt mbnnfr suitbblf for {@dodf ZonfdDbtfTimf}.
     * By dontrbst, {@dodf OffsftDbtfTimf} dofs not hbvf b zonf ID suitbblf
     * for usf with this mfthod, sff {@link #bppfndZonfOrOffsftId()}.
     * <p>
     * During formbtting, thf zonf is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#zonfId()}.
     * It will bf printfd using thf rfsult of {@link ZonfId#gftId()}.
     * If thf zonf dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, thf tfxt must mbtdh b known zonf or offsft.
     * Thfrf brf two typfs of zonf ID, offsft-bbsfd, sudh bs '+01:30' bnd
     * rfgion-bbsfd, sudh bs 'Europf/London'. Thfsf brf pbrsfd difffrfntly.
     * If thf pbrsf stbrts with '+', '-', 'UT', 'UTC' or 'GMT', thfn thf pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdh rfgion-bbsfd zonfs.
     * Thf offsft ID, sudh bs '+02:30', mby bf bt thf stbrt of thf pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Thf offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using thf
     * brgumfnts 'HH:MM:ss' bnd thf no offsft string '0'.
     * If thf pbrsf stbrts with 'UT', 'UTC' or 'GMT', bnd thf pbrsfr dbnnot
     * mbtdh b following offsft ID, thfn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll othfr dbsfs, thf list of known rfgion-bbsfd zonfs is usfd to
     * find thf longfst bvbilbblf mbtdh. If no mbtdh is found, bnd thf pbrsf
     * stbrts with 'Z', thfn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Thf pbrsfr usfs thf {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, thf following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("+01:30")
     * </prf>
     *
     * @rfturn this, for dhbining, not null
     * @sff #bppfndZonfRfgionId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(TfmporblQufrifs.zonfId(), "ZonfId()"));
        rfturn this;
    }

    /**
     * Appfnds thf timf-zonf rfgion ID, sudh bs 'Europf/Pbris', to thf formbttfr,
     * rfjfdting thf zonf ID if it is b {@dodf ZonfOffsft}.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf zonf ID to thf buildfr
     * only if it is b rfgion-bbsfd ID.
     * <p>
     * During formbtting, thf zonf is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#zonfId()}.
     * If thf zonf is b {@dodf ZonfOffsft} or it dbnnot bf obtbinfd thfn
     * bn fxdfption is thrown unlfss thf sfdtion of thf formbttfr is optionbl.
     * If thf zonf is not bn offsft, thfn thf zonf will bf printfd using
     * thf zonf ID from {@link ZonfId#gftId()}.
     * <p>
     * During pbrsing, thf tfxt must mbtdh b known zonf or offsft.
     * Thfrf brf two typfs of zonf ID, offsft-bbsfd, sudh bs '+01:30' bnd
     * rfgion-bbsfd, sudh bs 'Europf/London'. Thfsf brf pbrsfd difffrfntly.
     * If thf pbrsf stbrts with '+', '-', 'UT', 'UTC' or 'GMT', thfn thf pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdh rfgion-bbsfd zonfs.
     * Thf offsft ID, sudh bs '+02:30', mby bf bt thf stbrt of thf pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Thf offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using thf
     * brgumfnts 'HH:MM:ss' bnd thf no offsft string '0'.
     * If thf pbrsf stbrts with 'UT', 'UTC' or 'GMT', bnd thf pbrsfr dbnnot
     * mbtdh b following offsft ID, thfn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll othfr dbsfs, thf list of known rfgion-bbsfd zonfs is usfd to
     * find thf longfst bvbilbblf mbtdh. If no mbtdh is found, bnd thf pbrsf
     * stbrts with 'Z', thfn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Thf pbrsfr usfs thf {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, thf following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("+01:30")
     * </prf>
     * <p>
     * Notf thbt this mfthod is idfntidbl to {@dodf bppfndZonfId()} fxdfpt
     * in thf mfdhbnism usfd to obtbin thf zonf.
     * Notf blso thbt pbrsing bddfpts offsfts, whfrfbs formbtting will nfvfr
     * produdf onf.
     *
     * @rfturn this, for dhbining, not null
     * @sff #bppfndZonfId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfRfgionId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(QUERY_REGION_ONLY, "ZonfRfgionId()"));
        rfturn this;
    }

    /**
     * Appfnds thf timf-zonf ID, sudh bs 'Europf/Pbris' or '+02:00', to
     * thf formbttfr, using thf bfst bvbilbblf zonf ID.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf bfst bvbilbblf
     * zonf or offsft ID to thf buildfr.
     * Thf zonf ID is obtbinfd in b lfnifnt mbnnfr thbt first bttfmpts to
     * find b truf zonf ID, sudh bs thbt on {@dodf ZonfdDbtfTimf}, bnd
     * thfn bttfmpts to find bn offsft, sudh bs thbt on {@dodf OffsftDbtfTimf}.
     * <p>
     * During formbtting, thf zonf is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#zonf()}.
     * It will bf printfd using thf rfsult of {@link ZonfId#gftId()}.
     * If thf zonf dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, thf tfxt must mbtdh b known zonf or offsft.
     * Thfrf brf two typfs of zonf ID, offsft-bbsfd, sudh bs '+01:30' bnd
     * rfgion-bbsfd, sudh bs 'Europf/London'. Thfsf brf pbrsfd difffrfntly.
     * If thf pbrsf stbrts with '+', '-', 'UT', 'UTC' or 'GMT', thfn thf pbrsfr
     * fxpfdts bn offsft-bbsfd zonf bnd will not mbtdh rfgion-bbsfd zonfs.
     * Thf offsft ID, sudh bs '+02:30', mby bf bt thf stbrt of thf pbrsf,
     * or prffixfd by  'UT', 'UTC' or 'GMT'. Thf offsft ID pbrsing is
     * fquivblfnt to using {@link #bppfndOffsft(String, String)} using thf
     * brgumfnts 'HH:MM:ss' bnd thf no offsft string '0'.
     * If thf pbrsf stbrts with 'UT', 'UTC' or 'GMT', bnd thf pbrsfr dbnnot
     * mbtdh b following offsft ID, thfn {@link ZonfOffsft#UTC} is sflfdtfd.
     * In bll othfr dbsfs, thf list of known rfgion-bbsfd zonfs is usfd to
     * find thf longfst bvbilbblf mbtdh. If no mbtdh is found, bnd thf pbrsf
     * stbrts with 'Z', thfn {@dodf ZonfOffsft.UTC} is sflfdtfd.
     * Thf pbrsfr usfs thf {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     * <p>
     * For fxbmplf, thf following will pbrsf:
     * <prf>
     *   "Europf/London"           -- ZonfId.of("Europf/London")
     *   "Z"                       -- ZonfOffsft.UTC
     *   "UT"                      -- ZonfId.of("UT")
     *   "UTC"                     -- ZonfId.of("UTC")
     *   "GMT"                     -- ZonfId.of("GMT")
     *   "+01:30"                  -- ZonfOffsft.of("+01:30")
     *   "UT+01:30"                -- ZonfOffsft.of("UT+01:30")
     *   "UTC+01:30"               -- ZonfOffsft.of("UTC+01:30")
     *   "GMT+01:30"               -- ZonfOffsft.of("GMT+01:30")
     * </prf>
     * <p>
     * Notf thbt this mfthod is idfntidbl to {@dodf bppfndZonfId()} fxdfpt
     * in thf mfdhbnism usfd to obtbin thf zonf.
     *
     * @rfturn this, for dhbining, not null
     * @sff #bppfndZonfId()
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfOrOffsftId() {
        bppfndIntfrnbl(nfw ZonfIdPrintfrPbrsfr(TfmporblQufrifs.zonf(), "ZonfOrOffsftId()"));
        rfturn this;
    }

    /**
     * Appfnds thf timf-zonf nbmf, sudh bs 'British Summfr Timf', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf tfxtubl nbmf of thf zonf to
     * thf buildfr.
     * <p>
     * During formbtting, thf zonf is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#zonfId()}.
     * If thf zonf is b {@dodf ZonfOffsft} it will bf printfd using thf
     * rfsult of {@link ZonfOffsft#gftId()}.
     * If thf zonf is not bn offsft, thf tfxtubl nbmf will bf lookfd up
     * for thf lodblf sft in thf {@link DbtfTimfFormbttfr}.
     * If thf tfmporbl objfdt bfing printfd rfprfsfnts bn instbnt, thfn thf tfxt
     * will bf thf summfr or wintfr timf tfxt bs bppropribtf.
     * If thf lookup for tfxt dofs not find bny suitbblf rfsult, thfn thf
     * {@link ZonfId#gftId() ID} will bf printfd instfbd.
     * If thf zonf dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, fithfr thf tfxtubl zonf nbmf, thf zonf ID or thf offsft
     * is bddfptfd. Mbny tfxtubl zonf nbmfs brf not uniquf, sudh bs CST dbn bf
     * for both "Cfntrbl Stbndbrd Timf" bnd "Chinb Stbndbrd Timf". In this
     * situbtion, thf zonf id will bf dftfrminfd by thf rfgion informbtion from
     * formbttfr's  {@link DbtfTimfFormbttfr#gftLodblf() lodblf} bnd thf stbndbrd
     * zonf id for thbt brfb, for fxbmplf, Amfridb/Nfw_York for thf Amfridb Ebstfrn
     * zonf. Thf {@link #bppfndZonfTfxt(TfxtStylf, Sft)} mby bf usfd
     * to spfdify b sft of prfffrrfd {@link ZonfId} in this situbtion.
     *
     * @pbrbm tfxtStylf  thf tfxt stylf to usf, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfTfxt(TfxtStylf tfxtStylf) {
        bppfndIntfrnbl(nfw ZonfTfxtPrintfrPbrsfr(tfxtStylf, null));
        rfturn this;
    }

    /**
     * Appfnds thf timf-zonf nbmf, sudh bs 'British Summfr Timf', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf tfxtubl nbmf of thf zonf to
     * thf buildfr.
     * <p>
     * During formbtting, thf zonf is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#zonfId()}.
     * If thf zonf is b {@dodf ZonfOffsft} it will bf printfd using thf
     * rfsult of {@link ZonfOffsft#gftId()}.
     * If thf zonf is not bn offsft, thf tfxtubl nbmf will bf lookfd up
     * for thf lodblf sft in thf {@link DbtfTimfFormbttfr}.
     * If thf tfmporbl objfdt bfing printfd rfprfsfnts bn instbnt, thfn thf tfxt
     * will bf thf summfr or wintfr timf tfxt bs bppropribtf.
     * If thf lookup for tfxt dofs not find bny suitbblf rfsult, thfn thf
     * {@link ZonfId#gftId() ID} will bf printfd instfbd.
     * If thf zonf dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, fithfr thf tfxtubl zonf nbmf, thf zonf ID or thf offsft
     * is bddfptfd. Mbny tfxtubl zonf nbmfs brf not uniquf, sudh bs CST dbn bf
     * for both "Cfntrbl Stbndbrd Timf" bnd "Chinb Stbndbrd Timf". In this
     * situbtion, thf zonf id will bf dftfrminfd by thf rfgion informbtion from
     * formbttfr's  {@link DbtfTimfFormbttfr#gftLodblf() lodblf} bnd thf stbndbrd
     * zonf id for thbt brfb, for fxbmplf, Amfridb/Nfw_York for thf Amfridb Ebstfrn
     * zonf. This mfthod blso bllows b sft of prfffrrfd {@link ZonfId} to bf
     * spfdififd for pbrsing. Thf mbtdhfd prfffrrfd zonf id will bf usfd if thf
     * tfxturbl zonf nbmf bfing pbrsfd is not uniquf.
     * <p>
     * If thf zonf dbnnot bf pbrsfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     *
     * @pbrbm tfxtStylf  thf tfxt stylf to usf, not null
     * @pbrbm prfffrrfdZonfs  thf sft of prfffrrfd zonf ids, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndZonfTfxt(TfxtStylf tfxtStylf,
                                                   Sft<ZonfId> prfffrrfdZonfs) {
        Objfdts.rfquirfNonNull(prfffrrfdZonfs, "prfffrrfdZonfs");
        bppfndIntfrnbl(nfw ZonfTfxtPrintfrPbrsfr(tfxtStylf, prfffrrfdZonfs));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf dhronology ID, sudh bs 'ISO' or 'ThbiBuddhist', to thf formbttfr.
     * <p>
     * This bppfnds bn instrudtion to formbt/pbrsf thf dhronology ID to thf buildfr.
     * <p>
     * During formbtting, thf dhronology is obtbinfd using b mfdhbnism fquivblfnt
     * to qufrying thf tfmporbl with {@link TfmporblQufrifs#dhronology()}.
     * It will bf printfd using thf rfsult of {@link Chronology#gftId()}.
     * If thf dhronology dbnnot bf obtbinfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * <p>
     * During pbrsing, thf dhronology is pbrsfd bnd must mbtdh onf of thf dhronologifs
     * in {@link Chronology#gftAvbilbblfChronologifs()}.
     * If thf dhronology dbnnot bf pbrsfd thfn bn fxdfption is thrown unlfss thf
     * sfdtion of thf formbttfr is optionbl.
     * Thf pbrsfr usfs thf {@linkplbin #pbrsfCbsfInsfnsitivf() dbsf sfnsitivf} sftting.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndChronologyId() {
        bppfndIntfrnbl(nfw ChronoPrintfrPbrsfr(null));
        rfturn this;
    }

    /**
     * Appfnds thf dhronology nbmf to thf formbttfr.
     * <p>
     * Thf dblfndbr systfm nbmf will bf output during b formbt.
     * If thf dhronology dbnnot bf obtbinfd thfn bn fxdfption will bf thrown.
     *
     * @pbrbm tfxtStylf  thf tfxt stylf to usf, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndChronologyTfxt(TfxtStylf tfxtStylf) {
        Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
        bppfndIntfrnbl(nfw ChronoPrintfrPbrsfr(tfxtStylf));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b lodblizfd dbtf-timf pbttfrn to thf formbttfr.
     * <p>
     * This bppfnds b lodblizfd sfdtion to thf buildfr, suitbblf for outputting
     * b dbtf, timf or dbtf-timf dombinbtion. Thf formbt of thf lodblizfd
     * sfdtion is lbzily lookfd up bbsfd on four itfms:
     * <ul>
     * <li>thf {@dodf dbtfStylf} spfdififd to this mfthod
     * <li>thf {@dodf timfStylf} spfdififd to this mfthod
     * <li>thf {@dodf Lodblf} of thf {@dodf DbtfTimfFormbttfr}
     * <li>thf {@dodf Chronology}, sflfdting thf bfst bvbilbblf
     * </ul>
     * During formbtting, thf dhronology is obtbinfd from thf tfmporbl objfdt
     * bfing formbttfd, whidh mby hbvf bffn ovfrriddfn by
     * {@link DbtfTimfFormbttfr#withChronology(Chronology)}.
     * <p>
     * During pbrsing, if b dhronology hbs blrfbdy bffn pbrsfd, thfn it is usfd.
     * Othfrwisf thf dffbult from {@dodf DbtfTimfFormbttfr.withChronology(Chronology)}
     * is usfd, with {@dodf IsoChronology} bs thf fbllbbdk.
     * <p>
     * Notf thbt this mfthod providfs similbr fundtionblity to mfthods on
     * {@dodf DbtfFormbt} sudh bs {@link jbvb.tfxt.DbtfFormbt#gftDbtfTimfInstbndf(int, int)}.
     *
     * @pbrbm dbtfStylf  thf dbtf stylf to usf, null mfbns no dbtf rfquirfd
     * @pbrbm timfStylf  thf timf stylf to usf, null mfbns no timf rfquirfd
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if both thf dbtf bnd timf stylfs brf null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLodblizfd(FormbtStylf dbtfStylf, FormbtStylf timfStylf) {
        if (dbtfStylf == null && timfStylf == null) {
            throw nfw IllfgblArgumfntExdfption("Eithfr thf dbtf or timf stylf must bf non-null");
        }
        bppfndIntfrnbl(nfw LodblizfdPrintfrPbrsfr(dbtfStylf, timfStylf));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b dhbrbdtfr litfrbl to thf formbttfr.
     * <p>
     * This dhbrbdtfr will bf output during b formbt.
     *
     * @pbrbm litfrbl  thf litfrbl to bppfnd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLitfrbl(dhbr litfrbl) {
        bppfndIntfrnbl(nfw ChbrLitfrblPrintfrPbrsfr(litfrbl));
        rfturn this;
    }

    /**
     * Appfnds b string litfrbl to thf formbttfr.
     * <p>
     * This string will bf output during b formbt.
     * <p>
     * If thf litfrbl is fmpty, nothing is bddfd to thf formbttfr.
     *
     * @pbrbm litfrbl  thf litfrbl to bppfnd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndLitfrbl(String litfrbl) {
        Objfdts.rfquirfNonNull(litfrbl, "litfrbl");
        if (litfrbl.lfngth() > 0) {
            if (litfrbl.lfngth() == 1) {
                bppfndIntfrnbl(nfw ChbrLitfrblPrintfrPbrsfr(litfrbl.dhbrAt(0)));
            } flsf {
                bppfndIntfrnbl(nfw StringLitfrblPrintfrPbrsfr(litfrbl));
            }
        }
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds bll thf flfmfnts of b formbttfr to thf buildfr.
     * <p>
     * This mfthod hbs thf sbmf ffffdt bs bppfnding fbdh of thf donstitufnt
     * pbrts of thf formbttfr dirfdtly to this buildfr.
     *
     * @pbrbm formbttfr  thf formbttfr to bdd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfnd(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        bppfndIntfrnbl(formbttfr.toPrintfrPbrsfr(fblsf));
        rfturn this;
    }

    /**
     * Appfnds b formbttfr to thf buildfr whidh will optionblly formbt/pbrsf.
     * <p>
     * This mfthod hbs thf sbmf ffffdt bs bppfnding fbdh of thf donstitufnt
     * pbrts dirfdtly to this buildfr surroundfd by bn {@link #optionblStbrt()} bnd
     * {@link #optionblEnd()}.
     * <p>
     * Thf formbttfr will formbt if dbtb is bvbilbblf for bll thf fiflds dontbinfd within it.
     * Thf formbttfr will pbrsf if thf string mbtdhfs, othfrwisf no frror is rfturnfd.
     *
     * @pbrbm formbttfr  thf formbttfr to bdd, not null
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr bppfndOptionbl(DbtfTimfFormbttfr formbttfr) {
        Objfdts.rfquirfNonNull(formbttfr, "formbttfr");
        bppfndIntfrnbl(formbttfr.toPrintfrPbrsfr(truf));
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds thf flfmfnts dffinfd by thf spfdififd pbttfrn to thf buildfr.
     * <p>
     * All lfttfrs 'A' to 'Z' bnd 'b' to 'z' brf rfsfrvfd bs pbttfrn lfttfrs.
     * Thf dhbrbdtfrs '#', '{' bnd '}' brf rfsfrvfd for futurf usf.
     * Thf dhbrbdtfrs '[' bnd ']' indidbtf optionbl pbttfrns.
     * Thf following pbttfrn lfttfrs brf dffinfd:
     * <prf>
     *  Symbol  Mfbning                     Prfsfntbtion      Exbmplfs
     *  ------  -------                     ------------      -------
     *   G       frb                         tfxt              AD; Anno Domini; A
     *   u       yfbr                        yfbr              2004; 04
     *   y       yfbr-of-frb                 yfbr              2004; 04
     *   D       dby-of-yfbr                 numbfr            189
     *   M/L     month-of-yfbr               numbfr/tfxt       7; 07; Jul; July; J
     *   d       dby-of-month                numbfr            10
     *
     *   Q/q     qubrtfr-of-yfbr             numbfr/tfxt       3; 03; Q3; 3rd qubrtfr
     *   Y       wffk-bbsfd-yfbr             yfbr              1996; 96
     *   w       wffk-of-wffk-bbsfd-yfbr     numbfr            27
     *   W       wffk-of-month               numbfr            4
     *   E       dby-of-wffk                 tfxt              Tuf; Tufsdby; T
     *   f/d     lodblizfd dby-of-wffk       numbfr/tfxt       2; 02; Tuf; Tufsdby; T
     *   F       wffk-of-month               numbfr            3
     *
     *   b       bm-pm-of-dby                tfxt              PM
     *   h       dlodk-hour-of-bm-pm (1-12)  numbfr            12
     *   K       hour-of-bm-pm (0-11)        numbfr            0
     *   k       dlodk-hour-of-bm-pm (1-24)  numbfr            0
     *
     *   H       hour-of-dby (0-23)          numbfr            0
     *   m       minutf-of-hour              numbfr            30
     *   s       sfdond-of-minutf            numbfr            55
     *   S       frbdtion-of-sfdond          frbdtion          978
     *   A       milli-of-dby                numbfr            1234
     *   n       nbno-of-sfdond              numbfr            987654321
     *   N       nbno-of-dby                 numbfr            1234000000
     *
     *   V       timf-zonf ID                zonf-id           Amfridb/Los_Angflfs; Z; -08:30
     *   z       timf-zonf nbmf              zonf-nbmf         Pbdifid Stbndbrd Timf; PST
     *   O       lodblizfd zonf-offsft       offsft-O          GMT+8; GMT+08:00; UTC-08:00;
     *   X       zonf-offsft 'Z' for zfro    offsft-X          Z; -08; -0830; -08:30; -083015; -08:30:15;
     *   x       zonf-offsft                 offsft-x          +0000; -08; -0830; -08:30; -083015; -08:30:15;
     *   Z       zonf-offsft                 offsft-Z          +0000; -0800; -08:00;
     *
     *   p       pbd nfxt                    pbd modififr      1
     *
     *   '       fsdbpf for tfxt             dflimitfr
     *   ''      singlf quotf                litfrbl           '
     *   [       optionbl sfdtion stbrt
     *   ]       optionbl sfdtion fnd
     *   #       rfsfrvfd for futurf usf
     *   {       rfsfrvfd for futurf usf
     *   }       rfsfrvfd for futurf usf
     * </prf>
     * <p>
     * Thf dount of pbttfrn lfttfrs dftfrminf thf formbt.
     * Sff <b hrff="DbtfTimfFormbttfr.html#pbttfrns">DbtfTimfFormbttfr</b> for b usfr-fodusfd dfsdription of thf pbttfrns.
     * Thf following tbblfs dffinf how thf pbttfrn lfttfrs mbp to thf buildfr.
     * <p>
     * <b>Dbtf fiflds</b>: Pbttfrn lfttfrs to output b dbtf.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mfthods
     *  -------  -----  --------------------------
     *    G       1      bppfndTfxt(ChronoFifld.ERA, TfxtStylf.SHORT)
     *    GG      2      bppfndTfxt(ChronoFifld.ERA, TfxtStylf.SHORT)
     *    GGG     3      bppfndTfxt(ChronoFifld.ERA, TfxtStylf.SHORT)
     *    GGGG    4      bppfndTfxt(ChronoFifld.ERA, TfxtStylf.FULL)
     *    GGGGG   5      bppfndTfxt(ChronoFifld.ERA, TfxtStylf.NARROW)
     *
     *    u       1      bppfndVbluf(ChronoFifld.YEAR, 1, 19, SignStylf.NORMAL);
     *    uu      2      bppfndVblufRfdudfd(ChronoFifld.YEAR, 2, 2000);
     *    uuu     3      bppfndVbluf(ChronoFifld.YEAR, 3, 19, SignStylf.NORMAL);
     *    u..u    4..n   bppfndVbluf(ChronoFifld.YEAR, n, 19, SignStylf.EXCEEDS_PAD);
     *    y       1      bppfndVbluf(ChronoFifld.YEAR_OF_ERA, 1, 19, SignStylf.NORMAL);
     *    yy      2      bppfndVblufRfdudfd(ChronoFifld.YEAR_OF_ERA, 2, 2000);
     *    yyy     3      bppfndVbluf(ChronoFifld.YEAR_OF_ERA, 3, 19, SignStylf.NORMAL);
     *    y..y    4..n   bppfndVbluf(ChronoFifld.YEAR_OF_ERA, n, 19, SignStylf.EXCEEDS_PAD);
     *    Y       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr
     *    YY      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for rfdudfd numfrid wffk-bbsfd-yfbr 2 digits;
     *    YYY     3      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr (3, 19, SignStylf.NORMAL);
     *    Y..Y    4..n   bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-bbsfd-yfbr (n, 19, SignStylf.EXCEEDS_PAD);
     *
     *    Q       1      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR);
     *    QQ      2      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR, 2);
     *    QQQ     3      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.SHORT)
     *    QQQQ    4      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.FULL)
     *    QQQQQ   5      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.NARROW)
     *    q       1      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR);
     *    qq      2      bppfndVbluf(IsoFiflds.QUARTER_OF_YEAR, 2);
     *    qqq     3      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.SHORT_STANDALONE)
     *    qqqq    4      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.FULL_STANDALONE)
     *    qqqqq   5      bppfndTfxt(IsoFiflds.QUARTER_OF_YEAR, TfxtStylf.NARROW_STANDALONE)
     *
     *    M       1      bppfndVbluf(ChronoFifld.MONTH_OF_YEAR);
     *    MM      2      bppfndVbluf(ChronoFifld.MONTH_OF_YEAR, 2);
     *    MMM     3      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.SHORT)
     *    MMMM    4      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.FULL)
     *    MMMMM   5      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.NARROW)
     *    L       1      bppfndVbluf(ChronoFifld.MONTH_OF_YEAR);
     *    LL      2      bppfndVbluf(ChronoFifld.MONTH_OF_YEAR, 2);
     *    LLL     3      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.SHORT_STANDALONE)
     *    LLLL    4      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.FULL_STANDALONE)
     *    LLLLL   5      bppfndTfxt(ChronoFifld.MONTH_OF_YEAR, TfxtStylf.NARROW_STANDALONE)
     *
     *    w       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-yfbr
     *    ww      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-yfbr, zfro-pbddfd
     *    W       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid wffk-of-month
     *    d       1      bppfndVbluf(ChronoFifld.DAY_OF_MONTH)
     *    dd      2      bppfndVbluf(ChronoFifld.DAY_OF_MONTH, 2)
     *    D       1      bppfndVbluf(ChronoFifld.DAY_OF_YEAR)
     *    DD      2      bppfndVbluf(ChronoFifld.DAY_OF_YEAR, 2)
     *    DDD     3      bppfndVbluf(ChronoFifld.DAY_OF_YEAR, 3)
     *    F       1      bppfndVbluf(ChronoFifld.ALIGNED_DAY_OF_WEEK_IN_MONTH)
     *    E       1      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EE      2      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EEE     3      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    EEEE    4      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.FULL)
     *    EEEEE   5      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.NARROW)
     *    f       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk
     *    ff      2      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk, zfro-pbddfd
     *    fff     3      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.SHORT)
     *    ffff    4      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.FULL)
     *    fffff   5      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.NARROW)
     *    d       1      bppfnd spfdibl lodblizfd WffkFiflds flfmfnt for numfrid dby-of-wffk
     *    ddd     3      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.SHORT_STANDALONE)
     *    dddd    4      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.FULL_STANDALONE)
     *    ddddd   5      bppfndTfxt(ChronoFifld.DAY_OF_WEEK, TfxtStylf.NARROW_STANDALONE)
     * </prf>
     * <p>
     * <b>Timf fiflds</b>: Pbttfrn lfttfrs to output b timf.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mfthods
     *  -------  -----  --------------------------
     *    b       1      bppfndTfxt(ChronoFifld.AMPM_OF_DAY, TfxtStylf.SHORT)
     *    h       1      bppfndVbluf(ChronoFifld.CLOCK_HOUR_OF_AMPM)
     *    hh      2      bppfndVbluf(ChronoFifld.CLOCK_HOUR_OF_AMPM, 2)
     *    H       1      bppfndVbluf(ChronoFifld.HOUR_OF_DAY)
     *    HH      2      bppfndVbluf(ChronoFifld.HOUR_OF_DAY, 2)
     *    k       1      bppfndVbluf(ChronoFifld.CLOCK_HOUR_OF_DAY)
     *    kk      2      bppfndVbluf(ChronoFifld.CLOCK_HOUR_OF_DAY, 2)
     *    K       1      bppfndVbluf(ChronoFifld.HOUR_OF_AMPM)
     *    KK      2      bppfndVbluf(ChronoFifld.HOUR_OF_AMPM, 2)
     *    m       1      bppfndVbluf(ChronoFifld.MINUTE_OF_HOUR)
     *    mm      2      bppfndVbluf(ChronoFifld.MINUTE_OF_HOUR, 2)
     *    s       1      bppfndVbluf(ChronoFifld.SECOND_OF_MINUTE)
     *    ss      2      bppfndVbluf(ChronoFifld.SECOND_OF_MINUTE, 2)
     *
     *    S..S    1..n   bppfndFrbdtion(ChronoFifld.NANO_OF_SECOND, n, n, fblsf)
     *    A       1      bppfndVbluf(ChronoFifld.MILLI_OF_DAY)
     *    A..A    2..n   bppfndVbluf(ChronoFifld.MILLI_OF_DAY, n)
     *    n       1      bppfndVbluf(ChronoFifld.NANO_OF_SECOND)
     *    n..n    2..n   bppfndVbluf(ChronoFifld.NANO_OF_SECOND, n)
     *    N       1      bppfndVbluf(ChronoFifld.NANO_OF_DAY)
     *    N..N    2..n   bppfndVbluf(ChronoFifld.NANO_OF_DAY, n)
     * </prf>
     * <p>
     * <b>Zonf ID</b>: Pbttfrn lfttfrs to output {@dodf ZonfId}.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mfthods
     *  -------  -----  --------------------------
     *    VV      2      bppfndZonfId()
     *    z       1      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zz      2      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zzz     3      bppfndZonfTfxt(TfxtStylf.SHORT)
     *    zzzz    4      bppfndZonfTfxt(TfxtStylf.FULL)
     * </prf>
     * <p>
     * <b>Zonf offsft</b>: Pbttfrn lfttfrs to output {@dodf ZonfOffsft}.
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mfthods
     *  -------  -----  --------------------------
     *    O       1      bppfndLodblizfdOffsftPrffixfd(TfxtStylf.SHORT);
     *    OOOO    4      bppfndLodblizfdOffsftPrffixfd(TfxtStylf.FULL);
     *    X       1      bppfndOffsft("+HHmm","Z")
     *    XX      2      bppfndOffsft("+HHMM","Z")
     *    XXX     3      bppfndOffsft("+HH:MM","Z")
     *    XXXX    4      bppfndOffsft("+HHMMss","Z")
     *    XXXXX   5      bppfndOffsft("+HH:MM:ss","Z")
     *    x       1      bppfndOffsft("+HHmm","+00")
     *    xx      2      bppfndOffsft("+HHMM","+0000")
     *    xxx     3      bppfndOffsft("+HH:MM","+00:00")
     *    xxxx    4      bppfndOffsft("+HHMMss","+0000")
     *    xxxxx   5      bppfndOffsft("+HH:MM:ss","+00:00")
     *    Z       1      bppfndOffsft("+HHMM","+0000")
     *    ZZ      2      bppfndOffsft("+HHMM","+0000")
     *    ZZZ     3      bppfndOffsft("+HHMM","+0000")
     *    ZZZZ    4      bppfndLodblizfdOffsft(TfxtStylf.FULL);
     *    ZZZZZ   5      bppfndOffsft("+HH:MM:ss","Z")
     * </prf>
     * <p>
     * <b>Modififrs</b>: Pbttfrn lfttfrs thbt modify thf rfst of thf pbttfrn:
     * <prf>
     *  Pbttfrn  Count  Equivblfnt buildfr mfthods
     *  -------  -----  --------------------------
     *    [       1      optionblStbrt()
     *    ]       1      optionblEnd()
     *    p..p    1..n   pbdNfxt(n)
     * </prf>
     * <p>
     * Any sfqufndf of lfttfrs not spfdififd bbovf, unrfdognizfd lfttfr or
     * rfsfrvfd dhbrbdtfr will throw bn fxdfption.
     * Futurf vfrsions mby bdd to thf sft of pbttfrns.
     * It is rfdommfndfd to usf singlf quotfs bround bll dhbrbdtfrs thbt you wbnt
     * to output dirfdtly to fnsurf thbt futurf dhbngfs do not brfbk your bpplidbtion.
     * <p>
     * Notf thbt thf pbttfrn string is similbr, but not idfntidbl, to
     * {@link jbvb.tfxt.SimplfDbtfFormbt SimplfDbtfFormbt}.
     * Thf pbttfrn string is blso similbr, but not idfntidbl, to thbt dffinfd by thf
     * Unidodf Common Lodblf Dbtb Rfpository (CLDR/LDML).
     * Pbttfrn lfttfrs 'X' bnd 'u' brf blignfd with Unidodf CLDR/LDML.
     * By dontrbst, {@dodf SimplfDbtfFormbt} usfs 'u' for thf numfrid dby of wffk.
     * Pbttfrn lfttfrs 'y' bnd 'Y' pbrsf yfbrs of two digits bnd morf thbn 4 digits difffrfntly.
     * Pbttfrn lfttfrs 'n', 'A', 'N', bnd 'p' brf bddfd.
     * Numbfr typfs will rfjfdt lbrgf numbfrs.
     *
     * @pbrbm pbttfrn  thf pbttfrn to bdd, not null
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if thf pbttfrn is invblid
     */
    publid DbtfTimfFormbttfrBuildfr bppfndPbttfrn(String pbttfrn) {
        Objfdts.rfquirfNonNull(pbttfrn, "pbttfrn");
        pbrsfPbttfrn(pbttfrn);
        rfturn this;
    }

    privbtf void pbrsfPbttfrn(String pbttfrn) {
        for (int pos = 0; pos < pbttfrn.lfngth(); pos++) {
            dhbr dur = pbttfrn.dhbrAt(pos);
            if ((dur >= 'A' && dur <= 'Z') || (dur >= 'b' && dur <= 'z')) {
                int stbrt = pos++;
                for ( ; pos < pbttfrn.lfngth() && pbttfrn.dhbrAt(pos) == dur; pos++);  // short loop
                int dount = pos - stbrt;
                // pbdding
                if (dur == 'p') {
                    int pbd = 0;
                    if (pos < pbttfrn.lfngth()) {
                        dur = pbttfrn.dhbrAt(pos);
                        if ((dur >= 'A' && dur <= 'Z') || (dur >= 'b' && dur <= 'z')) {
                            pbd = dount;
                            stbrt = pos++;
                            for ( ; pos < pbttfrn.lfngth() && pbttfrn.dhbrAt(pos) == dur; pos++);  // short loop
                            dount = pos - stbrt;
                        }
                    }
                    if (pbd == 0) {
                        throw nfw IllfgblArgumfntExdfption(
                                "Pbd lfttfr 'p' must bf followfd by vblid pbd pbttfrn: " + pbttfrn);
                    }
                    pbdNfxt(pbd); // pbd bnd dontinuf pbrsing
                }
                // mbin rulfs
                TfmporblFifld fifld = FIELD_MAP.gft(dur);
                if (fifld != null) {
                    pbrsfFifld(dur, dount, fifld);
                } flsf if (dur == 'z') {
                    if (dount > 4) {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    } flsf if (dount == 4) {
                        bppfndZonfTfxt(TfxtStylf.FULL);
                    } flsf {
                        bppfndZonfTfxt(TfxtStylf.SHORT);
                    }
                } flsf if (dur == 'V') {
                    if (dount != 2) {
                        throw nfw IllfgblArgumfntExdfption("Pbttfrn lfttfr dount must bf 2: " + dur);
                    }
                    bppfndZonfId();
                } flsf if (dur == 'Z') {
                    if (dount < 4) {
                        bppfndOffsft("+HHMM", "+0000");
                    } flsf if (dount == 4) {
                        bppfndLodblizfdOffsft(TfxtStylf.FULL);
                    } flsf if (dount == 5) {
                        bppfndOffsft("+HH:MM:ss","Z");
                    } flsf {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                } flsf if (dur == 'O') {
                    if (dount == 1) {
                        bppfndLodblizfdOffsft(TfxtStylf.SHORT);
                    } flsf if (dount == 4) {
                        bppfndLodblizfdOffsft(TfxtStylf.FULL);
                    } flsf {
                        throw nfw IllfgblArgumfntExdfption("Pbttfrn lfttfr dount must bf 1 or 4: " + dur);
                    }
                } flsf if (dur == 'X') {
                    if (dount > 5) {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndOffsft(OffsftIdPrintfrPbrsfr.PATTERNS[dount + (dount == 1 ? 0 : 1)], "Z");
                } flsf if (dur == 'x') {
                    if (dount > 5) {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    String zfro = (dount == 1 ? "+00" : (dount % 2 == 0 ? "+0000" : "+00:00"));
                    bppfndOffsft(OffsftIdPrintfrPbrsfr.PATTERNS[dount + (dount == 1 ? 0 : 1)], zfro);
                } flsf if (dur == 'W') {
                    // Fiflds dffinfd by Lodblf
                    if (dount > 1) {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf if (dur == 'w') {
                    // Fiflds dffinfd by Lodblf
                    if (dount > 2) {
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                    }
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf if (dur == 'Y') {
                    // Fiflds dffinfd by Lodblf
                    bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Unknown pbttfrn lfttfr: " + dur);
                }
                pos--;

            } flsf if (dur == '\'') {
                // pbrsf litfrbls
                int stbrt = pos++;
                for ( ; pos < pbttfrn.lfngth(); pos++) {
                    if (pbttfrn.dhbrAt(pos) == '\'') {
                        if (pos + 1 < pbttfrn.lfngth() && pbttfrn.dhbrAt(pos + 1) == '\'') {
                            pos++;
                        } flsf {
                            brfbk;  // fnd of litfrbl
                        }
                    }
                }
                if (pos >= pbttfrn.lfngth()) {
                    throw nfw IllfgblArgumfntExdfption("Pbttfrn fnds with bn indomplftf string litfrbl: " + pbttfrn);
                }
                String str = pbttfrn.substring(stbrt + 1, pos);
                if (str.lfngth() == 0) {
                    bppfndLitfrbl('\'');
                } flsf {
                    bppfndLitfrbl(str.rfplbdf("''", "'"));
                }

            } flsf if (dur == '[') {
                optionblStbrt();

            } flsf if (dur == ']') {
                if (bdtivf.pbrfnt == null) {
                    throw nfw IllfgblArgumfntExdfption("Pbttfrn invblid bs it dontbins ] without prfvious [");
                }
                optionblEnd();

            } flsf if (dur == '{' || dur == '}' || dur == '#') {
                throw nfw IllfgblArgumfntExdfption("Pbttfrn indludfs rfsfrvfd dhbrbdtfr: '" + dur + "'");
            } flsf {
                bppfndLitfrbl(dur);
            }
        }
    }

    @SupprfssWbrnings("fbllthrough")
    privbtf void pbrsfFifld(dhbr dur, int dount, TfmporblFifld fifld) {
        boolfbn stbndblonf = fblsf;
        switdh (dur) {
            dbsf 'u':
            dbsf 'y':
                if (dount == 2) {
                    bppfndVblufRfdudfd(fifld, 2, 2, RfdudfdPrintfrPbrsfr.BASE_DATE);
                } flsf if (dount < 4) {
                    bppfndVbluf(fifld, dount, 19, SignStylf.NORMAL);
                } flsf {
                    bppfndVbluf(fifld, dount, 19, SignStylf.EXCEEDS_PAD);
                }
                brfbk;
            dbsf 'd':
                if (dount == 2) {
                    throw nfw IllfgblArgumfntExdfption("Invblid pbttfrn \"dd\"");
                }
                /*fbllthrough*/
            dbsf 'L':
            dbsf 'q':
                stbndblonf = truf;
                /*fbllthrough*/
            dbsf 'M':
            dbsf 'Q':
            dbsf 'E':
            dbsf 'f':
                switdh (dount) {
                    dbsf 1:
                    dbsf 2:
                        if (dur == 'd' || dur == 'f') {
                            bppfndIntfrnbl(nfw WffkBbsfdFifldPrintfrPbrsfr(dur, dount));
                        } flsf if (dur == 'E') {
                            bppfndTfxt(fifld, TfxtStylf.SHORT);
                        } flsf {
                            if (dount == 1) {
                                bppfndVbluf(fifld);
                            } flsf {
                                bppfndVbluf(fifld, 2);
                            }
                        }
                        brfbk;
                    dbsf 3:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.SHORT_STANDALONE : TfxtStylf.SHORT);
                        brfbk;
                    dbsf 4:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.FULL_STANDALONE : TfxtStylf.FULL);
                        brfbk;
                    dbsf 5:
                        bppfndTfxt(fifld, stbndblonf ? TfxtStylf.NARROW_STANDALONE : TfxtStylf.NARROW);
                        brfbk;
                    dffbult:
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'b':
                if (dount == 1) {
                    bppfndTfxt(fifld, TfxtStylf.SHORT);
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'G':
                switdh (dount) {
                    dbsf 1:
                    dbsf 2:
                    dbsf 3:
                        bppfndTfxt(fifld, TfxtStylf.SHORT);
                        brfbk;
                    dbsf 4:
                        bppfndTfxt(fifld, TfxtStylf.FULL);
                        brfbk;
                    dbsf 5:
                        bppfndTfxt(fifld, TfxtStylf.NARROW);
                        brfbk;
                    dffbult:
                        throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'S':
                bppfndFrbdtion(NANO_OF_SECOND, dount, dount, fblsf);
                brfbk;
            dbsf 'F':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'd':
            dbsf 'h':
            dbsf 'H':
            dbsf 'k':
            dbsf 'K':
            dbsf 'm':
            dbsf 's':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf if (dount == 2) {
                    bppfndVbluf(fifld, dount);
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dbsf 'D':
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf if (dount <= 3) {
                    bppfndVbluf(fifld, dount);
                } flsf {
                    throw nfw IllfgblArgumfntExdfption("Too mbny pbttfrn lfttfrs: " + dur);
                }
                brfbk;
            dffbult:
                if (dount == 1) {
                    bppfndVbluf(fifld);
                } flsf {
                    bppfndVbluf(fifld, dount);
                }
                brfbk;
        }
    }

    /** Mbp of lfttfrs to fiflds. */
    privbtf stbtid finbl Mbp<Chbrbdtfr, TfmporblFifld> FIELD_MAP = nfw HbshMbp<>();
    stbtid {
        // SDF = SimplfDbtfFormbt
        FIELD_MAP.put('G', ChronoFifld.ERA);                       // SDF, LDML (difffrfnt to both for 1/2 dhbrs)
        FIELD_MAP.put('y', ChronoFifld.YEAR_OF_ERA);               // SDF, LDML
        FIELD_MAP.put('u', ChronoFifld.YEAR);                      // LDML (difffrfnt in SDF)
        FIELD_MAP.put('Q', IsoFiflds.QUARTER_OF_YEAR);             // LDML (rfmovfd qubrtfr from 310)
        FIELD_MAP.put('q', IsoFiflds.QUARTER_OF_YEAR);             // LDML (stbnd-blonf)
        FIELD_MAP.put('M', ChronoFifld.MONTH_OF_YEAR);             // SDF, LDML
        FIELD_MAP.put('L', ChronoFifld.MONTH_OF_YEAR);             // SDF, LDML (stbnd-blonf)
        FIELD_MAP.put('D', ChronoFifld.DAY_OF_YEAR);               // SDF, LDML
        FIELD_MAP.put('d', ChronoFifld.DAY_OF_MONTH);              // SDF, LDML
        FIELD_MAP.put('F', ChronoFifld.ALIGNED_DAY_OF_WEEK_IN_MONTH);  // SDF, LDML
        FIELD_MAP.put('E', ChronoFifld.DAY_OF_WEEK);               // SDF, LDML (difffrfnt to both for 1/2 dhbrs)
        FIELD_MAP.put('d', ChronoFifld.DAY_OF_WEEK);               // LDML (stbnd-blonf)
        FIELD_MAP.put('f', ChronoFifld.DAY_OF_WEEK);               // LDML (nffds lodblizfd wffk numbfr)
        FIELD_MAP.put('b', ChronoFifld.AMPM_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('H', ChronoFifld.HOUR_OF_DAY);               // SDF, LDML
        FIELD_MAP.put('k', ChronoFifld.CLOCK_HOUR_OF_DAY);         // SDF, LDML
        FIELD_MAP.put('K', ChronoFifld.HOUR_OF_AMPM);              // SDF, LDML
        FIELD_MAP.put('h', ChronoFifld.CLOCK_HOUR_OF_AMPM);        // SDF, LDML
        FIELD_MAP.put('m', ChronoFifld.MINUTE_OF_HOUR);            // SDF, LDML
        FIELD_MAP.put('s', ChronoFifld.SECOND_OF_MINUTE);          // SDF, LDML
        FIELD_MAP.put('S', ChronoFifld.NANO_OF_SECOND);            // LDML (SDF usfs milli-of-sfdond numbfr)
        FIELD_MAP.put('A', ChronoFifld.MILLI_OF_DAY);              // LDML
        FIELD_MAP.put('n', ChronoFifld.NANO_OF_SECOND);            // 310 (proposfd for LDML)
        FIELD_MAP.put('N', ChronoFifld.NANO_OF_DAY);               // 310 (proposfd for LDML)
        // 310 - z - timf-zonf nbmfs, mbtdhfs LDML bnd SimplfDbtfFormbt 1 to 4
        // 310 - Z - mbtdhfs SimplfDbtfFormbt bnd LDML
        // 310 - V - timf-zonf id, mbtdhfs LDML
        // 310 - p - prffix for pbdding
        // 310 - X - mbtdhfs LDML, blmost mbtdhfs SDF for 1, fxbdt mbtdh 2&3, fxtfndfd 4&5
        // 310 - x - mbtdhfs LDML
        // 310 - w, W, bnd Y brf lodblizfd forms mbtdhing LDML
        // LDML - U - dydlf yfbr nbmf, not supportfd by 310 yft
        // LDML - l - dfprfdbtfd
        // LDML - j - not rflfvbnt
        // LDML - g - modififd-julibn-dby
        // LDML - v,V - fxtfndfd timf-zonf nbmfs
    }

    //-----------------------------------------------------------------------
    /**
     * Cbusfs thf nfxt bddfd printfr/pbrsfr to pbd to b fixfd width using b spbdf.
     * <p>
     * This pbdding will pbd to b fixfd width using spbdfs.
     * <p>
     * During formbtting, thf dfdorbtfd flfmfnt will bf output bnd thfn pbddfd
     * to thf spfdififd width. An fxdfption will bf thrown during formbtting if
     * thf pbd width is fxdffdfd.
     * <p>
     * During pbrsing, thf pbdding bnd dfdorbtfd flfmfnt brf pbrsfd.
     * If pbrsing is lfnifnt, thfn thf pbd width is trfbtfd bs b mbximum.
     * Thf pbdding is pbrsfd grffdily. Thus, if thf dfdorbtfd flfmfnt stbrts with
     * thf pbd dhbrbdtfr, it will not bf pbrsfd.
     *
     * @pbrbm pbdWidth  thf pbd width, 1 or grfbtfr
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if pbd width is too smbll
     */
    publid DbtfTimfFormbttfrBuildfr pbdNfxt(int pbdWidth) {
        rfturn pbdNfxt(pbdWidth, ' ');
    }

    /**
     * Cbusfs thf nfxt bddfd printfr/pbrsfr to pbd to b fixfd width.
     * <p>
     * This pbdding is intfndfd for pbdding othfr thbn zfro-pbdding.
     * Zfro-pbdding should bf bdhifvfd using thf bppfndVbluf mfthods.
     * <p>
     * During formbtting, thf dfdorbtfd flfmfnt will bf output bnd thfn pbddfd
     * to thf spfdififd width. An fxdfption will bf thrown during formbtting if
     * thf pbd width is fxdffdfd.
     * <p>
     * During pbrsing, thf pbdding bnd dfdorbtfd flfmfnt brf pbrsfd.
     * If pbrsing is lfnifnt, thfn thf pbd width is trfbtfd bs b mbximum.
     * If pbrsing is dbsf insfnsitivf, thfn thf pbd dhbrbdtfr is mbtdhfd ignoring dbsf.
     * Thf pbdding is pbrsfd grffdily. Thus, if thf dfdorbtfd flfmfnt stbrts with
     * thf pbd dhbrbdtfr, it will not bf pbrsfd.
     *
     * @pbrbm pbdWidth  thf pbd width, 1 or grfbtfr
     * @pbrbm pbdChbr  thf pbd dhbrbdtfr
     * @rfturn this, for dhbining, not null
     * @throws IllfgblArgumfntExdfption if pbd width is too smbll
     */
    publid DbtfTimfFormbttfrBuildfr pbdNfxt(int pbdWidth, dhbr pbdChbr) {
        if (pbdWidth < 1) {
            throw nfw IllfgblArgumfntExdfption("Thf pbd width must bf bt lfbst onf but wbs " + pbdWidth);
        }
        bdtivf.pbdNfxtWidth = pbdWidth;
        bdtivf.pbdNfxtChbr = pbdChbr;
        bdtivf.vblufPbrsfrIndfx = -1;
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Mbrk thf stbrt of bn optionbl sfdtion.
     * <p>
     * Thf output of formbtting dbn indludf optionbl sfdtions, whidh mby bf nfstfd.
     * An optionbl sfdtion is stbrtfd by dblling this mfthod bnd fndfd by dblling
     * {@link #optionblEnd()} or by fnding thf build prodfss.
     * <p>
     * All flfmfnts in thf optionbl sfdtion brf trfbtfd bs optionbl.
     * During formbtting, thf sfdtion is only output if dbtb is bvbilbblf in thf
     * {@dodf TfmporblAddfssor} for bll thf flfmfnts in thf sfdtion.
     * During pbrsing, thf wholf sfdtion mby bf missing from thf pbrsfd string.
     * <p>
     * For fxbmplf, donsidfr b buildfr sftup bs
     * {@dodf buildfr.bppfndVbluf(HOUR_OF_DAY,2).optionblStbrt().bppfndVbluf(MINUTE_OF_HOUR,2)}.
     * Thf optionbl sfdtion fnds butombtidblly bt thf fnd of thf buildfr.
     * During formbtting, thf minutf will only bf output if its vbluf dbn bf obtbinfd from thf dbtf-timf.
     * During pbrsing, thf input will bf suddfssfully pbrsfd whfthfr thf minutf is prfsfnt or not.
     *
     * @rfturn this, for dhbining, not null
     */
    publid DbtfTimfFormbttfrBuildfr optionblStbrt() {
        bdtivf.vblufPbrsfrIndfx = -1;
        bdtivf = nfw DbtfTimfFormbttfrBuildfr(bdtivf, truf);
        rfturn this;
    }

    /**
     * Ends bn optionbl sfdtion.
     * <p>
     * Thf output of formbtting dbn indludf optionbl sfdtions, whidh mby bf nfstfd.
     * An optionbl sfdtion is stbrtfd by dblling {@link #optionblStbrt()} bnd fndfd
     * using this mfthod (or bt thf fnd of thf buildfr).
     * <p>
     * Cblling this mfthod without hbving prfviously dbllfd {@dodf optionblStbrt}
     * will throw bn fxdfption.
     * Cblling this mfthod immfdibtfly bftfr dblling {@dodf optionblStbrt} hbs no ffffdt
     * on thf formbttfr othfr thbn fnding thf (fmpty) optionbl sfdtion.
     * <p>
     * All flfmfnts in thf optionbl sfdtion brf trfbtfd bs optionbl.
     * During formbtting, thf sfdtion is only output if dbtb is bvbilbblf in thf
     * {@dodf TfmporblAddfssor} for bll thf flfmfnts in thf sfdtion.
     * During pbrsing, thf wholf sfdtion mby bf missing from thf pbrsfd string.
     * <p>
     * For fxbmplf, donsidfr b buildfr sftup bs
     * {@dodf buildfr.bppfndVbluf(HOUR_OF_DAY,2).optionblStbrt().bppfndVbluf(MINUTE_OF_HOUR,2).optionblEnd()}.
     * During formbtting, thf minutf will only bf output if its vbluf dbn bf obtbinfd from thf dbtf-timf.
     * During pbrsing, thf input will bf suddfssfully pbrsfd whfthfr thf minutf is prfsfnt or not.
     *
     * @rfturn this, for dhbining, not null
     * @throws IllfgblStbtfExdfption if thfrf wbs no prfvious dbll to {@dodf optionblStbrt}
     */
    publid DbtfTimfFormbttfrBuildfr optionblEnd() {
        if (bdtivf.pbrfnt == null) {
            throw nfw IllfgblStbtfExdfption("Cbnnot dbll optionblEnd() bs thfrf wbs no prfvious dbll to optionblStbrt()");
        }
        if (bdtivf.printfrPbrsfrs.sizf() > 0) {
            CompositfPrintfrPbrsfr dpp = nfw CompositfPrintfrPbrsfr(bdtivf.printfrPbrsfrs, bdtivf.optionbl);
            bdtivf = bdtivf.pbrfnt;
            bppfndIntfrnbl(dpp);
        } flsf {
            bdtivf = bdtivf.pbrfnt;
        }
        rfturn this;
    }

    //-----------------------------------------------------------------------
    /**
     * Appfnds b printfr bnd/or pbrsfr to thf intfrnbl list hbndling pbdding.
     *
     * @pbrbm pp  thf printfr-pbrsfr to bdd, not null
     * @rfturn thf indfx into thf bdtivf pbrsfrs list
     */
    privbtf int bppfndIntfrnbl(DbtfTimfPrintfrPbrsfr pp) {
        Objfdts.rfquirfNonNull(pp, "pp");
        if (bdtivf.pbdNfxtWidth > 0) {
            if (pp != null) {
                pp = nfw PbdPrintfrPbrsfrDfdorbtor(pp, bdtivf.pbdNfxtWidth, bdtivf.pbdNfxtChbr);
            }
            bdtivf.pbdNfxtWidth = 0;
            bdtivf.pbdNfxtChbr = 0;
        }
        bdtivf.printfrPbrsfrs.bdd(pp);
        bdtivf.vblufPbrsfrIndfx = -1;
        rfturn bdtivf.printfrPbrsfrs.sizf() - 1;
    }

    //-----------------------------------------------------------------------
    /**
     * Complftfs this buildfr by drfbting thf {@dodf DbtfTimfFormbttfr}
     * using thf dffbult lodblf.
     * <p>
     * This will drfbtf b formbttfr with thf {@linkplbin Lodblf#gftDffbult(Lodblf.Cbtfgory) dffbult FORMAT lodblf}.
     * Numbfrs will bf printfd bnd pbrsfd using thf stbndbrd DfdimblStylf.
     * Thf rfsolvfr stylf will bf {@link RfsolvfrStylf#SMART SMART}.
     * <p>
     * Cblling this mfthod will fnd bny opfn optionbl sfdtions by rfpfbtfdly
     * dblling {@link #optionblEnd()} bfforf drfbting thf formbttfr.
     * <p>
     * This buildfr dbn still bf usfd bftfr drfbting thf formbttfr if dfsirfd,
     * blthough thf stbtf mby hbvf bffn dhbngfd by dblls to {@dodf optionblEnd}.
     *
     * @rfturn thf drfbtfd formbttfr, not null
     */
    publid DbtfTimfFormbttfr toFormbttfr() {
        rfturn toFormbttfr(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT));
    }

    /**
     * Complftfs this buildfr by drfbting thf {@dodf DbtfTimfFormbttfr}
     * using thf spfdififd lodblf.
     * <p>
     * This will drfbtf b formbttfr with thf spfdififd lodblf.
     * Numbfrs will bf printfd bnd pbrsfd using thf stbndbrd DfdimblStylf.
     * Thf rfsolvfr stylf will bf {@link RfsolvfrStylf#SMART SMART}.
     * <p>
     * Cblling this mfthod will fnd bny opfn optionbl sfdtions by rfpfbtfdly
     * dblling {@link #optionblEnd()} bfforf drfbting thf formbttfr.
     * <p>
     * This buildfr dbn still bf usfd bftfr drfbting thf formbttfr if dfsirfd,
     * blthough thf stbtf mby hbvf bffn dhbngfd by dblls to {@dodf optionblEnd}.
     *
     * @pbrbm lodblf  thf lodblf to usf for formbtting, not null
     * @rfturn thf drfbtfd formbttfr, not null
     */
    publid DbtfTimfFormbttfr toFormbttfr(Lodblf lodblf) {
        rfturn toFormbttfr(lodblf, RfsolvfrStylf.SMART, null);
    }

    /**
     * Complftfs this buildfr by drfbting thf formbttfr.
     * This usfs thf dffbult lodblf.
     *
     * @pbrbm rfsolvfrStylf  thf rfsolvfr stylf to usf, not null
     * @rfturn thf drfbtfd formbttfr, not null
     */
    DbtfTimfFormbttfr toFormbttfr(RfsolvfrStylf rfsolvfrStylf, Chronology dhrono) {
        rfturn toFormbttfr(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT), rfsolvfrStylf, dhrono);
    }

    /**
     * Complftfs this buildfr by drfbting thf formbttfr.
     *
     * @pbrbm lodblf  thf lodblf to usf for formbtting, not null
     * @pbrbm dhrono  thf dhronology to usf, mby bf null
     * @rfturn thf drfbtfd formbttfr, not null
     */
    privbtf DbtfTimfFormbttfr toFormbttfr(Lodblf lodblf, RfsolvfrStylf rfsolvfrStylf, Chronology dhrono) {
        Objfdts.rfquirfNonNull(lodblf, "lodblf");
        whilf (bdtivf.pbrfnt != null) {
            optionblEnd();
        }
        CompositfPrintfrPbrsfr pp = nfw CompositfPrintfrPbrsfr(printfrPbrsfrs, fblsf);
        rfturn nfw DbtfTimfFormbttfr(pp, lodblf, DfdimblStylf.STANDARD,
                rfsolvfrStylf, null, dhrono, null);
    }

    //-----------------------------------------------------------------------
    /**
     * Strbtfgy for formbtting/pbrsing dbtf-timf informbtion.
     * <p>
     * Thf printfr mby formbt bny pbrt, or thf wholf, of thf input dbtf-timf objfdt.
     * Typidblly, b domplftf formbt is donstrudtfd from b numbfr of smbllfr
     * units, fbdh outputting b singlf fifld.
     * <p>
     * Thf pbrsfr mby pbrsf bny pifdf of tfxt from thf input, storing thf rfsult
     * in thf dontfxt. Typidblly, fbdh individubl pbrsfr will just pbrsf onf
     * fifld, sudh bs thf dby-of-month, storing thf vbluf in thf dontfxt.
     * Ondf thf pbrsf is domplftf, thf dbllfr will thfn rfsolvf thf pbrsfd vblufs
     * to drfbtf thf dfsirfd objfdt, sudh bs b {@dodf LodblDbtf}.
     * <p>
     * Thf pbrsf position will bf updbtfd during thf pbrsf. Pbrsing will stbrt bt
     * thf spfdififd indfx bnd thf rfturn vbluf spfdififs thf nfw pbrsf position
     * for thf nfxt pbrsfr. If bn frror oddurs, thf rfturnfd indfx will bf nfgbtivf
     * bnd will hbvf thf frror position fndodfd using thf domplfmfnt opfrbtor.
     *
     * @implSpfd
     * This intfrfbdf must bf implfmfntfd with dbrf to fnsurf othfr dlbssfs opfrbtf dorrfdtly.
     * All implfmfntbtions thbt dbn bf instbntibtfd must bf finbl, immutbblf bnd thrfbd-sbff.
     * <p>
     * Thf dontfxt is not b thrfbd-sbff objfdt bnd b nfw instbndf will bf drfbtfd
     * for fbdh formbt thbt oddurs. Thf dontfxt must not bf storfd in bn instbndf
     * vbribblf or shbrfd with bny othfr thrfbds.
     */
    intfrfbdf DbtfTimfPrintfrPbrsfr {

        /**
         * Prints thf dbtf-timf objfdt to thf bufffr.
         * <p>
         * Thf dontfxt holds informbtion to usf during thf formbt.
         * It blso dontbins thf dbtf-timf informbtion to bf printfd.
         * <p>
         * Thf bufffr must not bf mutbtfd bfyond thf dontfnt dontrollfd by thf implfmfntbtion.
         *
         * @pbrbm dontfxt  thf dontfxt to formbt using, not null
         * @pbrbm buf  thf bufffr to bppfnd to, not null
         * @rfturn fblsf if unbblf to qufry thf vbluf from thf dbtf-timf, truf othfrwisf
         * @throws DbtfTimfExdfption if thf dbtf-timf dbnnot bf printfd suddfssfully
         */
        boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf);

        /**
         * Pbrsfs tfxt into dbtf-timf informbtion.
         * <p>
         * Thf dontfxt holds informbtion to usf during thf pbrsf.
         * It is blso usfd to storf thf pbrsfd dbtf-timf informbtion.
         *
         * @pbrbm dontfxt  thf dontfxt to usf bnd pbrsf into, not null
         * @pbrbm tfxt  thf input tfxt to pbrsf, not null
         * @pbrbm position  thf position to stbrt pbrsing bt, from 0 to thf tfxt lfngth
         * @rfturn thf nfw pbrsf position, whfrf nfgbtivf mfbns bn frror with thf
         *  frror position fndodfd using thf domplfmfnt ~ opfrbtor
         * @throws NullPointfrExdfption if thf dontfxt or tfxt is null
         * @throws IndfxOutOfBoundsExdfption if thf position is invblid
         */
        int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position);
    }

    //-----------------------------------------------------------------------
    /**
     * Compositf printfr bnd pbrsfr.
     */
    stbtid finbl dlbss CompositfPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl DbtfTimfPrintfrPbrsfr[] printfrPbrsfrs;
        privbtf finbl boolfbn optionbl;

        CompositfPrintfrPbrsfr(List<DbtfTimfPrintfrPbrsfr> printfrPbrsfrs, boolfbn optionbl) {
            this(printfrPbrsfrs.toArrby(nfw DbtfTimfPrintfrPbrsfr[printfrPbrsfrs.sizf()]), optionbl);
        }

        CompositfPrintfrPbrsfr(DbtfTimfPrintfrPbrsfr[] printfrPbrsfrs, boolfbn optionbl) {
            this.printfrPbrsfrs = printfrPbrsfrs;
            this.optionbl = optionbl;
        }

        /**
         * Rfturns b dopy of this printfr-pbrsfr with thf optionbl flbg dhbngfd.
         *
         * @pbrbm optionbl  thf optionbl flbg to sft in thf dopy
         * @rfturn thf nfw printfr-pbrsfr, not null
         */
        publid CompositfPrintfrPbrsfr withOptionbl(boolfbn optionbl) {
            if (optionbl == this.optionbl) {
                rfturn this;
            }
            rfturn nfw CompositfPrintfrPbrsfr(printfrPbrsfrs, optionbl);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            int lfngth = buf.lfngth();
            if (optionbl) {
                dontfxt.stbrtOptionbl();
            }
            try {
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    if (pp.formbt(dontfxt, buf) == fblsf) {
                        buf.sftLfngth(lfngth);  // rfsft bufffr
                        rfturn truf;
                    }
                }
            } finblly {
                if (optionbl) {
                    dontfxt.fndOptionbl();
                }
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            if (optionbl) {
                dontfxt.stbrtOptionbl();
                int pos = position;
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    pos = pp.pbrsf(dontfxt, tfxt, pos);
                    if (pos < 0) {
                        dontfxt.fndOptionbl(fblsf);
                        rfturn position;  // rfturn originbl position
                    }
                }
                dontfxt.fndOptionbl(truf);
                rfturn pos;
            } flsf {
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    position = pp.pbrsf(dontfxt, tfxt, position);
                    if (position < 0) {
                        brfbk;
                    }
                }
                rfturn position;
            }
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr buf = nfw StringBuildfr();
            if (printfrPbrsfrs != null) {
                buf.bppfnd(optionbl ? "[" : "(");
                for (DbtfTimfPrintfrPbrsfr pp : printfrPbrsfrs) {
                    buf.bppfnd(pp);
                }
                buf.bppfnd(optionbl ? "]" : ")");
            }
            rfturn buf.toString();
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Pbds thf output to b fixfd width.
     */
    stbtid finbl dlbss PbdPrintfrPbrsfrDfdorbtor implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl DbtfTimfPrintfrPbrsfr printfrPbrsfr;
        privbtf finbl int pbdWidth;
        privbtf finbl dhbr pbdChbr;

        /**
         * Construdtor.
         *
         * @pbrbm printfrPbrsfr  thf printfr, not null
         * @pbrbm pbdWidth  thf width to pbd to, 1 or grfbtfr
         * @pbrbm pbdChbr  thf pbd dhbrbdtfr
         */
        PbdPrintfrPbrsfrDfdorbtor(DbtfTimfPrintfrPbrsfr printfrPbrsfr, int pbdWidth, dhbr pbdChbr) {
            // input dhfdkfd by DbtfTimfFormbttfrBuildfr
            this.printfrPbrsfr = printfrPbrsfr;
            this.pbdWidth = pbdWidth;
            this.pbdChbr = pbdChbr;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            int prfLfn = buf.lfngth();
            if (printfrPbrsfr.formbt(dontfxt, buf) == fblsf) {
                rfturn fblsf;
            }
            int lfn = buf.lfngth() - prfLfn;
            if (lfn > pbdWidth) {
                throw nfw DbtfTimfExdfption(
                    "Cbnnot print bs output of " + lfn + " dhbrbdtfrs fxdffds pbd width of " + pbdWidth);
            }
            for (int i = 0; i < pbdWidth - lfn; i++) {
                buf.insfrt(prfLfn, pbdChbr);
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            // dbdhf dontfxt bfforf dhbngfd by dfdorbtfd pbrsfr
            finbl boolfbn stridt = dontfxt.isStridt();
            // pbrsf
            if (position > tfxt.lfngth()) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
            if (position == tfxt.lfngth()) {
                rfturn ~position;  // no morf dhbrbdtfrs in thf string
            }
            int fndPos = position + pbdWidth;
            if (fndPos > tfxt.lfngth()) {
                if (stridt) {
                    rfturn ~position;  // not fnough dhbrbdtfrs in thf string to mfft thf pbrsf width
                }
                fndPos = tfxt.lfngth();
            }
            int pos = position;
            whilf (pos < fndPos && dontfxt.dhbrEqubls(tfxt.dhbrAt(pos), pbdChbr)) {
                pos++;
            }
            tfxt = tfxt.subSfqufndf(0, fndPos);
            int rfsultPos = printfrPbrsfr.pbrsf(dontfxt, tfxt, pos);
            if (rfsultPos != fndPos && stridt) {
                rfturn ~(position + pos);  // pbrsf of dfdorbtfd fifld didn't pbrsf to thf fnd
            }
            rfturn rfsultPos;
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Pbd(" + printfrPbrsfr + "," + pbdWidth + (pbdChbr == ' ' ? ")" : ",'" + pbdChbr + "')");
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Enumfrbtion to bpply simplf pbrsf sfttings.
     */
    stbtid fnum SfttingsPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        SENSITIVE,
        INSENSITIVE,
        STRICT,
        LENIENT;

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn truf;  // nothing to do hfrf
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            // using ordinbls to bvoid jbvbd synthftid innfr dlbss
            switdh (ordinbl()) {
                dbsf 0: dontfxt.sftCbsfSfnsitivf(truf); brfbk;
                dbsf 1: dontfxt.sftCbsfSfnsitivf(fblsf); brfbk;
                dbsf 2: dontfxt.sftStridt(truf); brfbk;
                dbsf 3: dontfxt.sftStridt(fblsf); brfbk;
            }
            rfturn position;
        }

        @Ovfrridf
        publid String toString() {
            // using ordinbls to bvoid jbvbd synthftid innfr dlbss
            switdh (ordinbl()) {
                dbsf 0: rfturn "PbrsfCbsfSfnsitivf(truf)";
                dbsf 1: rfturn "PbrsfCbsfSfnsitivf(fblsf)";
                dbsf 2: rfturn "PbrsfStridt(truf)";
                dbsf 3: rfturn "PbrsfStridt(fblsf)";
            }
            throw nfw IllfgblStbtfExdfption("Unrfbdhbblf");
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Dffbults b vbluf into thf pbrsf if not durrfntly prfsfnt.
     */
    stbtid dlbss DffbultVblufPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl long vbluf;

        DffbultVblufPbrsfr(TfmporblFifld fifld, long vbluf) {
            this.fifld = fifld;
            this.vbluf = vbluf;
        }

        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn truf;
        }

        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            if (dontfxt.gftPbrsfd(fifld) == null) {
                dontfxt.sftPbrsfdFifld(fifld, vbluf, position, position);
            }
            rfturn position;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b dhbrbdtfr litfrbl.
     */
    stbtid finbl dlbss ChbrLitfrblPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl dhbr litfrbl;

        ChbrLitfrblPrintfrPbrsfr(dhbr litfrbl) {
            this.litfrbl = litfrbl;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            buf.bppfnd(litfrbl);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int lfngth = tfxt.lfngth();
            if (position == lfngth) {
                rfturn ~position;
            }
            dhbr dh = tfxt.dhbrAt(position);
            if (dh != litfrbl) {
                if (dontfxt.isCbsfSfnsitivf() ||
                        (Chbrbdtfr.toUppfrCbsf(dh) != Chbrbdtfr.toUppfrCbsf(litfrbl) &&
                         Chbrbdtfr.toLowfrCbsf(dh) != Chbrbdtfr.toLowfrCbsf(litfrbl))) {
                    rfturn ~position;
                }
            }
            rfturn position + 1;
        }

        @Ovfrridf
        publid String toString() {
            if (litfrbl == '\'') {
                rfturn "''";
            }
            rfturn "'" + litfrbl + "'";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b string litfrbl.
     */
    stbtid finbl dlbss StringLitfrblPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl String litfrbl;

        StringLitfrblPrintfrPbrsfr(String litfrbl) {
            this.litfrbl = litfrbl;  // vblidbtfd by dbllfr
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            buf.bppfnd(litfrbl);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int lfngth = tfxt.lfngth();
            if (position > lfngth || position < 0) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
            if (dontfxt.subSfqufndfEqubls(tfxt, position, litfrbl, 0, litfrbl.lfngth()) == fblsf) {
                rfturn ~position;
            }
            rfturn position + litfrbl.lfngth();
        }

        @Ovfrridf
        publid String toString() {
            String donvfrtfd = litfrbl.rfplbdf("'", "''");
            rfturn "'" + donvfrtfd + "'";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b numfrid dbtf-timf fifld with optionbl pbdding.
     */
    stbtid dlbss NumbfrPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {

        /**
         * Arrby of 10 to thf powfr of n.
         */
        stbtid finbl long[] EXCEED_POINTS = nfw long[] {
            0L,
            10L,
            100L,
            1000L,
            10000L,
            100000L,
            1000000L,
            10000000L,
            100000000L,
            1000000000L,
            10000000000L,
        };

        finbl TfmporblFifld fifld;
        finbl int minWidth;
        finbl int mbxWidth;
        privbtf finbl SignStylf signStylf;
        finbl int subsfqufntWidth;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  thf fifld to formbt, not null
         * @pbrbm minWidth  thf minimum fifld width, from 1 to 19
         * @pbrbm mbxWidth  thf mbximum fifld width, from minWidth to 19
         * @pbrbm signStylf  thf positivf/nfgbtivf sign stylf, not null
         */
        NumbfrPrintfrPbrsfr(TfmporblFifld fifld, int minWidth, int mbxWidth, SignStylf signStylf) {
            // vblidbtfd by dbllfr
            this.fifld = fifld;
            this.minWidth = minWidth;
            this.mbxWidth = mbxWidth;
            this.signStylf = signStylf;
            this.subsfqufntWidth = 0;
        }

        /**
         * Construdtor.
         *
         * @pbrbm fifld  thf fifld to formbt, not null
         * @pbrbm minWidth  thf minimum fifld width, from 1 to 19
         * @pbrbm mbxWidth  thf mbximum fifld width, from minWidth to 19
         * @pbrbm signStylf  thf positivf/nfgbtivf sign stylf, not null
         * @pbrbm subsfqufntWidth  thf width of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr,
         *  -1 if fixfd width duf to bdtivf bdjbdfnt pbrsing
         */
        protfdtfd NumbfrPrintfrPbrsfr(TfmporblFifld fifld, int minWidth, int mbxWidth, SignStylf signStylf, int subsfqufntWidth) {
            // vblidbtfd by dbllfr
            this.fifld = fifld;
            this.minWidth = minWidth;
            this.mbxWidth = mbxWidth;
            this.signStylf = signStylf;
            this.subsfqufntWidth = subsfqufntWidth;
        }

        /**
         * Rfturns b nfw instbndf with fixfd width flbg sft.
         *
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        NumbfrPrintfrPbrsfr withFixfdWidth() {
            if (subsfqufntWidth == -1) {
                rfturn this;
            }
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, minWidth, mbxWidth, signStylf, -1);
        }

        /**
         * Rfturns b nfw instbndf with bn updbtfd subsfqufnt width.
         *
         * @pbrbm subsfqufntWidth  thf width of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        NumbfrPrintfrPbrsfr withSubsfqufntWidth(int subsfqufntWidth) {
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, minWidth, mbxWidth, signStylf, this.subsfqufntWidth + subsfqufntWidth);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vblufLong = dontfxt.gftVbluf(fifld);
            if (vblufLong == null) {
                rfturn fblsf;
            }
            long vbluf = gftVbluf(dontfxt, vblufLong);
            DfdimblStylf dfdimblStylf = dontfxt.gftDfdimblStylf();
            String str = (vbluf == Long.MIN_VALUE ? "9223372036854775808" : Long.toString(Mbth.bbs(vbluf)));
            if (str.lfngth() > mbxWidth) {
                throw nfw DbtfTimfExdfption("Fifld " + fifld +
                    " dbnnot bf printfd bs thf vbluf " + vbluf +
                    " fxdffds thf mbximum print width of " + mbxWidth);
            }
            str = dfdimblStylf.donvfrtNumbfrToI18N(str);

            if (vbluf >= 0) {
                switdh (signStylf) {
                    dbsf EXCEEDS_PAD:
                        if (minWidth < 19 && vbluf >= EXCEED_POINTS[minWidth]) {
                            buf.bppfnd(dfdimblStylf.gftPositivfSign());
                        }
                        brfbk;
                    dbsf ALWAYS:
                        buf.bppfnd(dfdimblStylf.gftPositivfSign());
                        brfbk;
                }
            } flsf {
                switdh (signStylf) {
                    dbsf NORMAL:
                    dbsf EXCEEDS_PAD:
                    dbsf ALWAYS:
                        buf.bppfnd(dfdimblStylf.gftNfgbtivfSign());
                        brfbk;
                    dbsf NOT_NEGATIVE:
                        throw nfw DbtfTimfExdfption("Fifld " + fifld +
                            " dbnnot bf printfd bs thf vbluf " + vbluf +
                            " dbnnot bf nfgbtivf bddording to thf SignStylf");
                }
            }
            for (int i = 0; i < minWidth - str.lfngth(); i++) {
                buf.bppfnd(dfdimblStylf.gftZfroDigit());
            }
            buf.bppfnd(str);
            rfturn truf;
        }

        /**
         * Gfts thf vbluf to output.
         *
         * @pbrbm dontfxt  thf dontfxt
         * @pbrbm vbluf  thf vbluf of thf fifld, not null
         * @rfturn thf vbluf
         */
        long gftVbluf(DbtfTimfPrintContfxt dontfxt, long vbluf) {
            rfturn vbluf;
        }

        /**
         * For NumbfrPrintfrPbrsfr, thf width is fixfd dfpfnding on thf
         * minWidth, mbxWidth, signStylf bnd whfthfr subsfqufnt fiflds brf fixfd.
         * @pbrbm dontfxt thf dontfxt
         * @rfturn truf if thf fifld is fixfd width
         * @sff DbtfTimfFormbttfrBuildfr#bppfndVbluf(jbvb.timf.tfmporbl.TfmporblFifld, int)
         */
        boolfbn isFixfdWidth(DbtfTimfPbrsfContfxt dontfxt) {
            rfturn subsfqufntWidth == -1 ||
                (subsfqufntWidth > 0 && minWidth == mbxWidth && signStylf == SignStylf.NOT_NEGATIVE);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int lfngth = tfxt.lfngth();
            if (position == lfngth) {
                rfturn ~position;
            }
            dhbr sign = tfxt.dhbrAt(position);  // IOOBE if invblid position
            boolfbn nfgbtivf = fblsf;
            boolfbn positivf = fblsf;
            if (sign == dontfxt.gftDfdimblStylf().gftPositivfSign()) {
                if (signStylf.pbrsf(truf, dontfxt.isStridt(), minWidth == mbxWidth) == fblsf) {
                    rfturn ~position;
                }
                positivf = truf;
                position++;
            } flsf if (sign == dontfxt.gftDfdimblStylf().gftNfgbtivfSign()) {
                if (signStylf.pbrsf(fblsf, dontfxt.isStridt(), minWidth == mbxWidth) == fblsf) {
                    rfturn ~position;
                }
                nfgbtivf = truf;
                position++;
            } flsf {
                if (signStylf == SignStylf.ALWAYS && dontfxt.isStridt()) {
                    rfturn ~position;
                }
            }
            int fffMinWidth = (dontfxt.isStridt() || isFixfdWidth(dontfxt) ? minWidth : 1);
            int minEndPos = position + fffMinWidth;
            if (minEndPos > lfngth) {
                rfturn ~position;
            }
            int fffMbxWidth = (dontfxt.isStridt() || isFixfdWidth(dontfxt) ? mbxWidth : 9) + Mbth.mbx(subsfqufntWidth, 0);
            long totbl = 0;
            BigIntfgfr totblBig = null;
            int pos = position;
            for (int pbss = 0; pbss < 2; pbss++) {
                int mbxEndPos = Mbth.min(pos + fffMbxWidth, lfngth);
                whilf (pos < mbxEndPos) {
                    dhbr dh = tfxt.dhbrAt(pos++);
                    int digit = dontfxt.gftDfdimblStylf().donvfrtToDigit(dh);
                    if (digit < 0) {
                        pos--;
                        if (pos < minEndPos) {
                            rfturn ~position;  // nffd bt lfbst min width digits
                        }
                        brfbk;
                    }
                    if ((pos - position) > 18) {
                        if (totblBig == null) {
                            totblBig = BigIntfgfr.vblufOf(totbl);
                        }
                        totblBig = totblBig.multiply(BigIntfgfr.TEN).bdd(BigIntfgfr.vblufOf(digit));
                    } flsf {
                        totbl = totbl * 10 + digit;
                    }
                }
                if (subsfqufntWidth > 0 && pbss == 0) {
                    // rf-pbrsf now wf know thf dorrfdt width
                    int pbrsfLfn = pos - position;
                    fffMbxWidth = Mbth.mbx(fffMinWidth, pbrsfLfn - subsfqufntWidth);
                    pos = position;
                    totbl = 0;
                    totblBig = null;
                } flsf {
                    brfbk;
                }
            }
            if (nfgbtivf) {
                if (totblBig != null) {
                    if (totblBig.fqubls(BigIntfgfr.ZERO) && dontfxt.isStridt()) {
                        rfturn ~(position - 1);  // minus zfro not bllowfd
                    }
                    totblBig = totblBig.nfgbtf();
                } flsf {
                    if (totbl == 0 && dontfxt.isStridt()) {
                        rfturn ~(position - 1);  // minus zfro not bllowfd
                    }
                    totbl = -totbl;
                }
            } flsf if (signStylf == SignStylf.EXCEEDS_PAD && dontfxt.isStridt()) {
                int pbrsfLfn = pos - position;
                if (positivf) {
                    if (pbrsfLfn <= minWidth) {
                        rfturn ~(position - 1);  // '+' only pbrsfd if minWidth fxdffdfd
                    }
                } flsf {
                    if (pbrsfLfn > minWidth) {
                        rfturn ~position;  // '+' must bf pbrsfd if minWidth fxdffdfd
                    }
                }
            }
            if (totblBig != null) {
                if (totblBig.bitLfngth() > 63) {
                    // ovfrflow, pbrsf 1 lfss digit
                    totblBig = totblBig.dividf(BigIntfgfr.TEN);
                    pos--;
                }
                rfturn sftVbluf(dontfxt, totblBig.longVbluf(), position, pos);
            }
            rfturn sftVbluf(dontfxt, totbl, position, pos);
        }

        /**
         * Storfs thf vbluf.
         *
         * @pbrbm dontfxt  thf dontfxt to storf into, not null
         * @pbrbm vbluf  thf vbluf
         * @pbrbm frrorPos  thf position of thf fifld bfing pbrsfd
         * @pbrbm suddfssPos  thf position bftfr thf fifld bfing pbrsfd
         * @rfturn thf nfw position
         */
        int sftVbluf(DbtfTimfPbrsfContfxt dontfxt, long vbluf, int frrorPos, int suddfssPos) {
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, frrorPos, suddfssPos);
        }

        @Ovfrridf
        publid String toString() {
            if (minWidth == 1 && mbxWidth == 19 && signStylf == SignStylf.NORMAL) {
                rfturn "Vbluf(" + fifld + ")";
            }
            if (minWidth == mbxWidth && signStylf == SignStylf.NOT_NEGATIVE) {
                rfturn "Vbluf(" + fifld + "," + minWidth + ")";
            }
            rfturn "Vbluf(" + fifld + "," + minWidth + "," + mbxWidth + "," + signStylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b rfdudfd numfrid dbtf-timf fifld.
     */
    stbtid finbl dlbss RfdudfdPrintfrPbrsfr fxtfnds NumbfrPrintfrPbrsfr {
        /**
         * Thf bbsf dbtf for rfdudfd vbluf pbrsing.
         */
        stbtid finbl LodblDbtf BASE_DATE = LodblDbtf.of(2000, 1, 1);

        privbtf finbl int bbsfVbluf;
        privbtf finbl ChronoLodblDbtf bbsfDbtf;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  thf fifld to formbt, vblidbtfd not null
         * @pbrbm minWidth  thf minimum fifld width, from 1 to 10
         * @pbrbm mbxWidth  thf mbximum fifld width, from 1 to 10
         * @pbrbm bbsfVbluf  thf bbsf vbluf
         * @pbrbm bbsfDbtf  thf bbsf dbtf
         */
        RfdudfdPrintfrPbrsfr(TfmporblFifld fifld, int minWidth, int mbxWidth,
                int bbsfVbluf, ChronoLodblDbtf bbsfDbtf) {
            this(fifld, minWidth, mbxWidth, bbsfVbluf, bbsfDbtf, 0);
            if (minWidth < 1 || minWidth > 10) {
                throw nfw IllfgblArgumfntExdfption("Thf minWidth must bf from 1 to 10 indlusivf but wbs " + minWidth);
            }
            if (mbxWidth < 1 || mbxWidth > 10) {
                throw nfw IllfgblArgumfntExdfption("Thf mbxWidth must bf from 1 to 10 indlusivf but wbs " + minWidth);
            }
            if (mbxWidth < minWidth) {
                throw nfw IllfgblArgumfntExdfption("Mbximum width must fxdffd or fqubl thf minimum width but " +
                        mbxWidth + " < " + minWidth);
            }
            if (bbsfDbtf == null) {
                if (fifld.rbngf().isVblidVbluf(bbsfVbluf) == fblsf) {
                    throw nfw IllfgblArgumfntExdfption("Thf bbsf vbluf must bf within thf rbngf of thf fifld");
                }
                if ((((long) bbsfVbluf) + EXCEED_POINTS[mbxWidth]) > Intfgfr.MAX_VALUE) {
                    throw nfw DbtfTimfExdfption("Unbblf to bdd printfr-pbrsfr bs thf rbngf fxdffds thf dbpbdity of bn int");
                }
            }
        }

        /**
         * Construdtor.
         * Thf brgumfnts hbvf blrfbdy bffn dhfdkfd.
         *
         * @pbrbm fifld  thf fifld to formbt, vblidbtfd not null
         * @pbrbm minWidth  thf minimum fifld width, from 1 to 10
         * @pbrbm mbxWidth  thf mbximum fifld width, from 1 to 10
         * @pbrbm bbsfVbluf  thf bbsf vbluf
         * @pbrbm bbsfDbtf  thf bbsf dbtf
         * @pbrbm subsfqufntWidth thf subsfqufntWidth for this instbndf
         */
        privbtf RfdudfdPrintfrPbrsfr(TfmporblFifld fifld, int minWidth, int mbxWidth,
                int bbsfVbluf, ChronoLodblDbtf bbsfDbtf, int subsfqufntWidth) {
            supfr(fifld, minWidth, mbxWidth, SignStylf.NOT_NEGATIVE, subsfqufntWidth);
            this.bbsfVbluf = bbsfVbluf;
            this.bbsfDbtf = bbsfDbtf;
        }

        @Ovfrridf
        long gftVbluf(DbtfTimfPrintContfxt dontfxt, long vbluf) {
            long bbsVbluf = Mbth.bbs(vbluf);
            int bbsfVbluf = this.bbsfVbluf;
            if (bbsfDbtf != null) {
                Chronology dhrono = Chronology.from(dontfxt.gftTfmporbl());
                bbsfVbluf = dhrono.dbtf(bbsfDbtf).gft(fifld);
            }
            if (vbluf >= bbsfVbluf && vbluf < bbsfVbluf + EXCEED_POINTS[minWidth]) {
                // Usf thf rfdudfd vbluf if it fits in minWidth
                rfturn bbsVbluf % EXCEED_POINTS[minWidth];
            }
            // Othfrwisf trundbtf to fit in mbxWidth
            rfturn bbsVbluf % EXCEED_POINTS[mbxWidth];
        }

        @Ovfrridf
        int sftVbluf(DbtfTimfPbrsfContfxt dontfxt, long vbluf, int frrorPos, int suddfssPos) {
            int bbsfVbluf = this.bbsfVbluf;
            if (bbsfDbtf != null) {
                Chronology dhrono = dontfxt.gftEfffdtivfChronology();
                bbsfVbluf = dhrono.dbtf(bbsfDbtf).gft(fifld);

                // In dbsf thf Chronology is dhbngfd lbtfr, bdd b dbllbbdk whfn/if it dhbngfs
                finbl long initiblVbluf = vbluf;
                dontfxt.bddChronoChbngfdListfnfr(
                        (_unusfd) ->  {
                            /* Rfpfbt thf sft of thf fifld using thf durrfnt Chronology
                             * Thf suddfss/frror position is ignorfd bfdbusf thf vbluf is
                             * intfntionblly bfing ovfrwrittfn.
                             */
                            sftVbluf(dontfxt, initiblVbluf, frrorPos, suddfssPos);
                        });
            }
            int pbrsfLfn = suddfssPos - frrorPos;
            if (pbrsfLfn == minWidth && vbluf >= 0) {
                long rbngf = EXCEED_POINTS[minWidth];
                long lbstPbrt = bbsfVbluf % rbngf;
                long bbsfPbrt = bbsfVbluf - lbstPbrt;
                if (bbsfVbluf > 0) {
                    vbluf = bbsfPbrt + vbluf;
                } flsf {
                    vbluf = bbsfPbrt - vbluf;
                }
                if (vbluf < bbsfVbluf) {
                    vbluf += rbngf;
                }
            }
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, frrorPos, suddfssPos);
        }

        /**
         * Rfturns b nfw instbndf with fixfd width flbg sft.
         *
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        @Ovfrridf
        RfdudfdPrintfrPbrsfr withFixfdWidth() {
            if (subsfqufntWidth == -1) {
                rfturn this;
            }
            rfturn nfw RfdudfdPrintfrPbrsfr(fifld, minWidth, mbxWidth, bbsfVbluf, bbsfDbtf, -1);
        }

        /**
         * Rfturns b nfw instbndf with bn updbtfd subsfqufnt width.
         *
         * @pbrbm subsfqufntWidth  thf width of subsfqufnt non-nfgbtivf numbfrs, 0 or grfbtfr
         * @rfturn b nfw updbtfd printfr-pbrsfr, not null
         */
        @Ovfrridf
        RfdudfdPrintfrPbrsfr withSubsfqufntWidth(int subsfqufntWidth) {
            rfturn nfw RfdudfdPrintfrPbrsfr(fifld, minWidth, mbxWidth, bbsfVbluf, bbsfDbtf,
                    this.subsfqufntWidth + subsfqufntWidth);
        }

        /**
         * For b RfdudfdPrintfrPbrsfr, fixfd width is fblsf if thf modf is stridt,
         * othfrwisf it is sft bs for NumbfrPrintfrPbrsfr.
         * @pbrbm dontfxt thf dontfxt
         * @rfturn if thf fifld is fixfd width
         * @sff DbtfTimfFormbttfrBuildfr#bppfndVblufRfdudfd(jbvb.timf.tfmporbl.TfmporblFifld, int, int, int)
         */
        @Ovfrridf
        boolfbn isFixfdWidth(DbtfTimfPbrsfContfxt dontfxt) {
           if (dontfxt.isStridt() == fblsf) {
               rfturn fblsf;
           }
           rfturn supfr.isFixfdWidth(dontfxt);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "RfdudfdVbluf(" + fifld + "," + minWidth + "," + mbxWidth + "," + (bbsfDbtf != null ? bbsfDbtf : bbsfVbluf) + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints bnd pbrsfs b numfrid dbtf-timf fifld with optionbl pbdding.
     */
    stbtid finbl dlbss FrbdtionPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl int minWidth;
        privbtf finbl int mbxWidth;
        privbtf finbl boolfbn dfdimblPoint;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  thf fifld to output, not null
         * @pbrbm minWidth  thf minimum width to output, from 0 to 9
         * @pbrbm mbxWidth  thf mbximum width to output, from 0 to 9
         * @pbrbm dfdimblPoint  whfthfr to output thf lodblizfd dfdimbl point symbol
         */
        FrbdtionPrintfrPbrsfr(TfmporblFifld fifld, int minWidth, int mbxWidth, boolfbn dfdimblPoint) {
            Objfdts.rfquirfNonNull(fifld, "fifld");
            if (fifld.rbngf().isFixfd() == fblsf) {
                throw nfw IllfgblArgumfntExdfption("Fifld must hbvf b fixfd sft of vblufs: " + fifld);
            }
            if (minWidth < 0 || minWidth > 9) {
                throw nfw IllfgblArgumfntExdfption("Minimum width must bf from 0 to 9 indlusivf but wbs " + minWidth);
            }
            if (mbxWidth < 1 || mbxWidth > 9) {
                throw nfw IllfgblArgumfntExdfption("Mbximum width must bf from 1 to 9 indlusivf but wbs " + mbxWidth);
            }
            if (mbxWidth < minWidth) {
                throw nfw IllfgblArgumfntExdfption("Mbximum width must fxdffd or fqubl thf minimum width but " +
                        mbxWidth + " < " + minWidth);
            }
            this.fifld = fifld;
            this.minWidth = minWidth;
            this.mbxWidth = mbxWidth;
            this.dfdimblPoint = dfdimblPoint;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vbluf = dontfxt.gftVbluf(fifld);
            if (vbluf == null) {
                rfturn fblsf;
            }
            DfdimblStylf dfdimblStylf = dontfxt.gftDfdimblStylf();
            BigDfdimbl frbdtion = donvfrtToFrbdtion(vbluf);
            if (frbdtion.sdblf() == 0) {  // sdblf is zfro if vbluf is zfro
                if (minWidth > 0) {
                    if (dfdimblPoint) {
                        buf.bppfnd(dfdimblStylf.gftDfdimblSfpbrbtor());
                    }
                    for (int i = 0; i < minWidth; i++) {
                        buf.bppfnd(dfdimblStylf.gftZfroDigit());
                    }
                }
            } flsf {
                int outputSdblf = Mbth.min(Mbth.mbx(frbdtion.sdblf(), minWidth), mbxWidth);
                frbdtion = frbdtion.sftSdblf(outputSdblf, RoundingModf.FLOOR);
                String str = frbdtion.toPlbinString().substring(2);
                str = dfdimblStylf.donvfrtNumbfrToI18N(str);
                if (dfdimblPoint) {
                    buf.bppfnd(dfdimblStylf.gftDfdimblSfpbrbtor());
                }
                buf.bppfnd(str);
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int ffffdtivfMin = (dontfxt.isStridt() ? minWidth : 0);
            int ffffdtivfMbx = (dontfxt.isStridt() ? mbxWidth : 9);
            int lfngth = tfxt.lfngth();
            if (position == lfngth) {
                // vblid if wholf fifld is optionbl, invblid if minimum width
                rfturn (ffffdtivfMin > 0 ? ~position : position);
            }
            if (dfdimblPoint) {
                if (tfxt.dhbrAt(position) != dontfxt.gftDfdimblStylf().gftDfdimblSfpbrbtor()) {
                    // vblid if wholf fifld is optionbl, invblid if minimum width
                    rfturn (ffffdtivfMin > 0 ? ~position : position);
                }
                position++;
            }
            int minEndPos = position + ffffdtivfMin;
            if (minEndPos > lfngth) {
                rfturn ~position;  // nffd bt lfbst min width digits
            }
            int mbxEndPos = Mbth.min(position + ffffdtivfMbx, lfngth);
            int totbl = 0;  // dbn usf int bfdbusf wf brf only pbrsing up to 9 digits
            int pos = position;
            whilf (pos < mbxEndPos) {
                dhbr dh = tfxt.dhbrAt(pos++);
                int digit = dontfxt.gftDfdimblStylf().donvfrtToDigit(dh);
                if (digit < 0) {
                    if (pos < minEndPos) {
                        rfturn ~position;  // nffd bt lfbst min width digits
                    }
                    pos--;
                    brfbk;
                }
                totbl = totbl * 10 + digit;
            }
            BigDfdimbl frbdtion = nfw BigDfdimbl(totbl).movfPointLfft(pos - position);
            long vbluf = donvfrtFromFrbdtion(frbdtion);
            rfturn dontfxt.sftPbrsfdFifld(fifld, vbluf, position, pos);
        }

        /**
         * Convfrts b vbluf for this fifld to b frbdtion bftwffn 0 bnd 1.
         * <p>
         * Thf frbdtionbl vbluf is bftwffn 0 (indlusivf) bnd 1 (fxdlusivf).
         * It dbn only bf rfturnfd if thf {@link jbvb.timf.tfmporbl.TfmporblFifld#rbngf() vbluf rbngf} is fixfd.
         * Thf frbdtion is obtbinfd by dbldulbtion from thf fifld rbngf using 9 dfdimbl
         * plbdfs bnd b rounding modf of {@link RoundingModf#FLOOR FLOOR}.
         * Thf dbldulbtion is inbddurbtf if thf vblufs do not run dontinuously from smbllfst to lbrgfst.
         * <p>
         * For fxbmplf, thf sfdond-of-minutf vbluf of 15 would bf rfturnfd bs 0.25,
         * bssuming thf stbndbrd dffinition of 60 sfdonds in b minutf.
         *
         * @pbrbm vbluf  thf vbluf to donvfrt, must bf vblid for this rulf
         * @rfturn thf vbluf bs b frbdtion within thf rbngf, from 0 to 1, not null
         * @throws DbtfTimfExdfption if thf vbluf dbnnot bf donvfrtfd to b frbdtion
         */
        privbtf BigDfdimbl donvfrtToFrbdtion(long vbluf) {
            VblufRbngf rbngf = fifld.rbngf();
            rbngf.dhfdkVblidVbluf(vbluf, fifld);
            BigDfdimbl minBD = BigDfdimbl.vblufOf(rbngf.gftMinimum());
            BigDfdimbl rbngfBD = BigDfdimbl.vblufOf(rbngf.gftMbximum()).subtrbdt(minBD).bdd(BigDfdimbl.ONE);
            BigDfdimbl vblufBD = BigDfdimbl.vblufOf(vbluf).subtrbdt(minBD);
            BigDfdimbl frbdtion = vblufBD.dividf(rbngfBD, 9, RoundingModf.FLOOR);
            // stripTrbilingZfros bug
            rfturn frbdtion.dompbrfTo(BigDfdimbl.ZERO) == 0 ? BigDfdimbl.ZERO : frbdtion.stripTrbilingZfros();
        }

        /**
         * Convfrts b frbdtion from 0 to 1 for this fifld to b vbluf.
         * <p>
         * Thf frbdtionbl vbluf must bf bftwffn 0 (indlusivf) bnd 1 (fxdlusivf).
         * It dbn only bf rfturnfd if thf {@link jbvb.timf.tfmporbl.TfmporblFifld#rbngf() vbluf rbngf} is fixfd.
         * Thf vbluf is obtbinfd by dbldulbtion from thf fifld rbngf bnd b rounding
         * modf of {@link RoundingModf#FLOOR FLOOR}.
         * Thf dbldulbtion is inbddurbtf if thf vblufs do not run dontinuously from smbllfst to lbrgfst.
         * <p>
         * For fxbmplf, thf frbdtionbl sfdond-of-minutf of 0.25 would bf donvfrtfd to 15,
         * bssuming thf stbndbrd dffinition of 60 sfdonds in b minutf.
         *
         * @pbrbm frbdtion  thf frbdtion to donvfrt, not null
         * @rfturn thf vbluf of thf fifld, vblid for this rulf
         * @throws DbtfTimfExdfption if thf vbluf dbnnot bf donvfrtfd
         */
        privbtf long donvfrtFromFrbdtion(BigDfdimbl frbdtion) {
            VblufRbngf rbngf = fifld.rbngf();
            BigDfdimbl minBD = BigDfdimbl.vblufOf(rbngf.gftMinimum());
            BigDfdimbl rbngfBD = BigDfdimbl.vblufOf(rbngf.gftMbximum()).subtrbdt(minBD).bdd(BigDfdimbl.ONE);
            BigDfdimbl vblufBD = frbdtion.multiply(rbngfBD).sftSdblf(0, RoundingModf.FLOOR).bdd(minBD);
            rfturn vblufBD.longVblufExbdt();
        }

        @Ovfrridf
        publid String toString() {
            String dfdimbl = (dfdimblPoint ? ",DfdimblPoint" : "");
            rfturn "Frbdtion(" + fifld + "," + minWidth + "," + mbxWidth + dfdimbl + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs fifld tfxt.
     */
    stbtid finbl dlbss TfxtPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblFifld fifld;
        privbtf finbl TfxtStylf tfxtStylf;
        privbtf finbl DbtfTimfTfxtProvidfr providfr;
        /**
         * Thf dbdhfd numbfr printfr pbrsfr.
         * Immutbblf bnd volbtilf, so no syndhronizbtion nffdfd.
         */
        privbtf volbtilf NumbfrPrintfrPbrsfr numbfrPrintfrPbrsfr;

        /**
         * Construdtor.
         *
         * @pbrbm fifld  thf fifld to output, not null
         * @pbrbm tfxtStylf  thf tfxt stylf, not null
         * @pbrbm providfr  thf tfxt providfr, not null
         */
        TfxtPrintfrPbrsfr(TfmporblFifld fifld, TfxtStylf tfxtStylf, DbtfTimfTfxtProvidfr providfr) {
            // vblidbtfd by dbllfr
            this.fifld = fifld;
            this.tfxtStylf = tfxtStylf;
            this.providfr = providfr;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long vbluf = dontfxt.gftVbluf(fifld);
            if (vbluf == null) {
                rfturn fblsf;
            }
            String tfxt;
            Chronology dhrono = dontfxt.gftTfmporbl().qufry(TfmporblQufrifs.dhronology());
            if (dhrono == null || dhrono == IsoChronology.INSTANCE) {
                tfxt = providfr.gftTfxt(fifld, vbluf, tfxtStylf, dontfxt.gftLodblf());
            } flsf {
                tfxt = providfr.gftTfxt(dhrono, fifld, vbluf, tfxtStylf, dontfxt.gftLodblf());
            }
            if (tfxt == null) {
                rfturn numbfrPrintfrPbrsfr().formbt(dontfxt, buf);
            }
            buf.bppfnd(tfxt);
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf pbrsfTfxt, int position) {
            int lfngth = pbrsfTfxt.lfngth();
            if (position < 0 || position > lfngth) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
            TfxtStylf stylf = (dontfxt.isStridt() ? tfxtStylf : null);
            Chronology dhrono = dontfxt.gftEfffdtivfChronology();
            Itfrbtor<Entry<String, Long>> it;
            if (dhrono == null || dhrono == IsoChronology.INSTANCE) {
                it = providfr.gftTfxtItfrbtor(fifld, stylf, dontfxt.gftLodblf());
            } flsf {
                it = providfr.gftTfxtItfrbtor(dhrono, fifld, stylf, dontfxt.gftLodblf());
            }
            if (it != null) {
                whilf (it.hbsNfxt()) {
                    Entry<String, Long> fntry = it.nfxt();
                    String itTfxt = fntry.gftKfy();
                    if (dontfxt.subSfqufndfEqubls(itTfxt, 0, pbrsfTfxt, position, itTfxt.lfngth())) {
                        rfturn dontfxt.sftPbrsfdFifld(fifld, fntry.gftVbluf(), position, position + itTfxt.lfngth());
                    }
                }
                if (dontfxt.isStridt()) {
                    rfturn ~position;
                }
            }
            rfturn numbfrPrintfrPbrsfr().pbrsf(dontfxt, pbrsfTfxt, position);
        }

        /**
         * Crfbtf bnd dbdhf b numbfr printfr pbrsfr.
         * @rfturn thf numbfr printfr pbrsfr for this fifld, not null
         */
        privbtf NumbfrPrintfrPbrsfr numbfrPrintfrPbrsfr() {
            if (numbfrPrintfrPbrsfr == null) {
                numbfrPrintfrPbrsfr = nfw NumbfrPrintfrPbrsfr(fifld, 1, 19, SignStylf.NORMAL);
            }
            rfturn numbfrPrintfrPbrsfr;
        }

        @Ovfrridf
        publid String toString() {
            if (tfxtStylf == TfxtStylf.FULL) {
                rfturn "Tfxt(" + fifld + ")";
            }
            rfturn "Tfxt(" + fifld + "," + tfxtStylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn ISO-8601 instbnt.
     */
    stbtid finbl dlbss InstbntPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        // dbys in b 400 yfbr dydlf = 146097
        // dbys in b 10,000 yfbr dydlf = 146097 * 25
        // sfdonds pfr dby = 86400
        privbtf stbtid finbl long SECONDS_PER_10000_YEARS = 146097L * 25L * 86400L;
        privbtf stbtid finbl long SECONDS_0000_TO_1970 = ((146097L * 5L) - (30L * 365L + 7L)) * 86400L;
        privbtf finbl int frbdtionblDigits;

        InstbntPrintfrPbrsfr(int frbdtionblDigits) {
            this.frbdtionblDigits = frbdtionblDigits;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            // usf INSTANT_SECONDS, thus this dodf is not bound by Instbnt.MAX
            Long inSfds = dontfxt.gftVbluf(INSTANT_SECONDS);
            Long inNbnos = null;
            if (dontfxt.gftTfmporbl().isSupportfd(NANO_OF_SECOND)) {
                inNbnos = dontfxt.gftTfmporbl().gftLong(NANO_OF_SECOND);
            }
            if (inSfds == null) {
                rfturn fblsf;
            }
            long inSfd = inSfds;
            int inNbno = NANO_OF_SECOND.dhfdkVblidIntVbluf(inNbnos != null ? inNbnos : 0);
            // formbt mostly using LodblDbtfTimf.toString
            if (inSfd >= -SECONDS_0000_TO_1970) {
                // durrfnt frb
                long zfroSfds = inSfd - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;
                long hi = Mbth.floorDiv(zfroSfds, SECONDS_PER_10000_YEARS) + 1;
                long lo = Mbth.floorMod(zfroSfds, SECONDS_PER_10000_YEARS);
                LodblDbtfTimf ldt = LodblDbtfTimf.ofEpodhSfdond(lo - SECONDS_0000_TO_1970, 0, ZonfOffsft.UTC);
                if (hi > 0) {
                    buf.bppfnd('+').bppfnd(hi);
                }
                buf.bppfnd(ldt);
                if (ldt.gftSfdond() == 0) {
                    buf.bppfnd(":00");
                }
            } flsf {
                // bfforf durrfnt frb
                long zfroSfds = inSfd + SECONDS_0000_TO_1970;
                long hi = zfroSfds / SECONDS_PER_10000_YEARS;
                long lo = zfroSfds % SECONDS_PER_10000_YEARS;
                LodblDbtfTimf ldt = LodblDbtfTimf.ofEpodhSfdond(lo - SECONDS_0000_TO_1970, 0, ZonfOffsft.UTC);
                int pos = buf.lfngth();
                buf.bppfnd(ldt);
                if (ldt.gftSfdond() == 0) {
                    buf.bppfnd(":00");
                }
                if (hi < 0) {
                    if (ldt.gftYfbr() == -10_000) {
                        buf.rfplbdf(pos, pos + 2, Long.toString(hi - 1));
                    } flsf if (lo == 0) {
                        buf.insfrt(pos, hi);
                    } flsf {
                        buf.insfrt(pos + 1, Mbth.bbs(hi));
                    }
                }
            }
            // bdd frbdtion
            if ((frbdtionblDigits < 0 && inNbno > 0) || frbdtionblDigits > 0) {
                buf.bppfnd('.');
                int div = 100_000_000;
                for (int i = 0; ((frbdtionblDigits == -1 && inNbno > 0) ||
                                    (frbdtionblDigits == -2 && (inNbno > 0 || (i % 3) != 0)) ||
                                    i < frbdtionblDigits); i++) {
                    int digit = inNbno / div;
                    buf.bppfnd((dhbr) (digit + '0'));
                    inNbno = inNbno - (digit * div);
                    div = div / 10;
                }
            }
            buf.bppfnd('Z');
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            // nfw dontfxt to bvoid ovfrwriting fiflds likf yfbr/month/dby
            int minDigits = (frbdtionblDigits < 0 ? 0 : frbdtionblDigits);
            int mbxDigits = (frbdtionblDigits < 0 ? 9 : frbdtionblDigits);
            CompositfPrintfrPbrsfr pbrsfr = nfw DbtfTimfFormbttfrBuildfr()
                    .bppfnd(DbtfTimfFormbttfr.ISO_LOCAL_DATE).bppfndLitfrbl('T')
                    .bppfndVbluf(HOUR_OF_DAY, 2).bppfndLitfrbl(':')
                    .bppfndVbluf(MINUTE_OF_HOUR, 2).bppfndLitfrbl(':')
                    .bppfndVbluf(SECOND_OF_MINUTE, 2)
                    .bppfndFrbdtion(NANO_OF_SECOND, minDigits, mbxDigits, truf)
                    .bppfndLitfrbl('Z')
                    .toFormbttfr().toPrintfrPbrsfr(fblsf);
            DbtfTimfPbrsfContfxt nfwContfxt = dontfxt.dopy();
            int pos = pbrsfr.pbrsf(nfwContfxt, tfxt, position);
            if (pos < 0) {
                rfturn pos;
            }
            // pbrsfr rfstridts most fiflds to 2 digits, so dffinitfly int
            // dorrfdtly pbrsfd nbno is blso gubrbntffd to bf vblid
            long yfbrPbrsfd = nfwContfxt.gftPbrsfd(YEAR);
            int month = nfwContfxt.gftPbrsfd(MONTH_OF_YEAR).intVbluf();
            int dby = nfwContfxt.gftPbrsfd(DAY_OF_MONTH).intVbluf();
            int hour = nfwContfxt.gftPbrsfd(HOUR_OF_DAY).intVbluf();
            int min = nfwContfxt.gftPbrsfd(MINUTE_OF_HOUR).intVbluf();
            Long sfdVbl = nfwContfxt.gftPbrsfd(SECOND_OF_MINUTE);
            Long nbnoVbl = nfwContfxt.gftPbrsfd(NANO_OF_SECOND);
            int sfd = (sfdVbl != null ? sfdVbl.intVbluf() : 0);
            int nbno = (nbnoVbl != null ? nbnoVbl.intVbluf() : 0);
            int dbys = 0;
            if (hour == 24 && min == 0 && sfd == 0 && nbno == 0) {
                hour = 0;
                dbys = 1;
            } flsf if (hour == 23 && min == 59 && sfd == 60) {
                dontfxt.sftPbrsfdLfbpSfdond();
                sfd = 59;
            }
            int yfbr = (int) yfbrPbrsfd % 10_000;
            long instbntSfds;
            try {
                LodblDbtfTimf ldt = LodblDbtfTimf.of(yfbr, month, dby, hour, min, sfd, 0).plusDbys(dbys);
                instbntSfds = ldt.toEpodhSfdond(ZonfOffsft.UTC);
                instbntSfds += Mbth.multiplyExbdt(yfbrPbrsfd / 10_000L, SECONDS_PER_10000_YEARS);
            } dbtdh (RuntimfExdfption fx) {
                rfturn ~position;
            }
            int suddfssPos = pos;
            suddfssPos = dontfxt.sftPbrsfdFifld(INSTANT_SECONDS, instbntSfds, position, suddfssPos);
            rfturn dontfxt.sftPbrsfdFifld(NANO_OF_SECOND, nbno, position, suddfssPos);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Instbnt()";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn offsft ID.
     */
    stbtid finbl dlbss OffsftIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        stbtid finbl String[] PATTERNS = nfw String[] {
            "+HH", "+HHmm", "+HH:mm", "+HHMM", "+HH:MM", "+HHMMss", "+HH:MM:ss", "+HHMMSS", "+HH:MM:SS",
        };  // ordfr usfd in pbttfrn buildfr
        stbtid finbl OffsftIdPrintfrPbrsfr INSTANCE_ID_Z = nfw OffsftIdPrintfrPbrsfr("+HH:MM:ss", "Z");
        stbtid finbl OffsftIdPrintfrPbrsfr INSTANCE_ID_ZERO = nfw OffsftIdPrintfrPbrsfr("+HH:MM:ss", "0");

        privbtf finbl String noOffsftTfxt;
        privbtf finbl int typf;

        /**
         * Construdtor.
         *
         * @pbrbm pbttfrn  thf pbttfrn
         * @pbrbm noOffsftTfxt  thf tfxt to usf for UTC, not null
         */
        OffsftIdPrintfrPbrsfr(String pbttfrn, String noOffsftTfxt) {
            Objfdts.rfquirfNonNull(pbttfrn, "pbttfrn");
            Objfdts.rfquirfNonNull(noOffsftTfxt, "noOffsftTfxt");
            this.typf = dhfdkPbttfrn(pbttfrn);
            this.noOffsftTfxt = noOffsftTfxt;
        }

        privbtf int dhfdkPbttfrn(String pbttfrn) {
            for (int i = 0; i < PATTERNS.lfngth; i++) {
                if (PATTERNS[i].fqubls(pbttfrn)) {
                    rfturn i;
                }
            }
            throw nfw IllfgblArgumfntExdfption("Invblid zonf offsft pbttfrn: " + pbttfrn);
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long offsftSfds = dontfxt.gftVbluf(OFFSET_SECONDS);
            if (offsftSfds == null) {
                rfturn fblsf;
            }
            int totblSfds = Mbth.toIntExbdt(offsftSfds);
            if (totblSfds == 0) {
                buf.bppfnd(noOffsftTfxt);
            } flsf {
                int bbsHours = Mbth.bbs((totblSfds / 3600) % 100);  // bnything lbrgfr thbn 99 silfntly droppfd
                int bbsMinutfs = Mbth.bbs((totblSfds / 60) % 60);
                int bbsSfdonds = Mbth.bbs(totblSfds % 60);
                int bufPos = buf.lfngth();
                int output = bbsHours;
                buf.bppfnd(totblSfds < 0 ? "-" : "+")
                    .bppfnd((dhbr) (bbsHours / 10 + '0')).bppfnd((dhbr) (bbsHours % 10 + '0'));
                if (typf >= 3 || (typf >= 1 && bbsMinutfs > 0)) {
                    buf.bppfnd((typf % 2) == 0 ? ":" : "")
                        .bppfnd((dhbr) (bbsMinutfs / 10 + '0')).bppfnd((dhbr) (bbsMinutfs % 10 + '0'));
                    output += bbsMinutfs;
                    if (typf >= 7 || (typf >= 5 && bbsSfdonds > 0)) {
                        buf.bppfnd((typf % 2) == 0 ? ":" : "")
                            .bppfnd((dhbr) (bbsSfdonds / 10 + '0')).bppfnd((dhbr) (bbsSfdonds % 10 + '0'));
                        output += bbsSfdonds;
                    }
                }
                if (output == 0) {
                    buf.sftLfngth(bufPos);
                    buf.bppfnd(noOffsftTfxt);
                }
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int lfngth = tfxt.lfngth();
            int noOffsftLfn = noOffsftTfxt.lfngth();
            if (noOffsftLfn == 0) {
                if (position == lfngth) {
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position);
                }
            } flsf {
                if (position == lfngth) {
                    rfturn ~position;
                }
                if (dontfxt.subSfqufndfEqubls(tfxt, position, noOffsftTfxt, 0, noOffsftLfn)) {
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position + noOffsftLfn);
                }
            }

            // pbrsf normbl plus/minus offsft
            dhbr sign = tfxt.dhbrAt(position);  // IOOBE if invblid position
            if (sign == '+' || sign == '-') {
                // stbrts
                int nfgbtivf = (sign == '-' ? -1 : 1);
                int[] brrby = nfw int[4];
                brrby[0] = position + 1;
                if ((pbrsfNumbfr(brrby, 1, tfxt, truf) ||
                        pbrsfNumbfr(brrby, 2, tfxt, typf >=3) ||
                        pbrsfNumbfr(brrby, 3, tfxt, fblsf)) == fblsf) {
                    // suddfss
                    long offsftSfds = nfgbtivf * (brrby[1] * 3600L + brrby[2] * 60L + brrby[3]);
                    rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, offsftSfds, position, brrby[0]);
                }
            }
            // hbndlf spfdibl dbsf of fmpty no offsft tfxt
            if (noOffsftLfn == 0) {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, position + noOffsftLfn);
            }
            rfturn ~position;
        }

        /**
         * Pbrsf b two digit zfro-prffixfd numbfr.
         *
         * @pbrbm brrby  thf brrby of pbrsfd dbtb, 0=pos,1=hours,2=mins,3=sfds, not null
         * @pbrbm brrbyIndfx  thf indfx to pbrsf thf vbluf into
         * @pbrbm pbrsfTfxt  thf offsft ID, not null
         * @pbrbm rfquirfd  whfthfr this numbfr is rfquirfd
         * @rfturn truf if bn frror oddurrfd
         */
        privbtf boolfbn pbrsfNumbfr(int[] brrby, int brrbyIndfx, ChbrSfqufndf pbrsfTfxt, boolfbn rfquirfd) {
            if ((typf + 3) / 2 < brrbyIndfx) {
                rfturn fblsf;  // ignorf sfdonds/minutfs
            }
            int pos = brrby[0];
            if ((typf % 2) == 0 && brrbyIndfx > 1) {
                if (pos + 1 > pbrsfTfxt.lfngth() || pbrsfTfxt.dhbrAt(pos) != ':') {
                    rfturn rfquirfd;
                }
                pos++;
            }
            if (pos + 2 > pbrsfTfxt.lfngth()) {
                rfturn rfquirfd;
            }
            dhbr dh1 = pbrsfTfxt.dhbrAt(pos++);
            dhbr dh2 = pbrsfTfxt.dhbrAt(pos++);
            if (dh1 < '0' || dh1 > '9' || dh2 < '0' || dh2 > '9') {
                rfturn rfquirfd;
            }
            int vbluf = (dh1 - 48) * 10 + (dh2 - 48);
            if (vbluf < 0 || vbluf > 59) {
                rfturn rfquirfd;
            }
            brrby[brrbyIndfx] = vbluf;
            brrby[0] = pos;
            rfturn fblsf;
        }

        @Ovfrridf
        publid String toString() {
            String donvfrtfd = noOffsftTfxt.rfplbdf("'", "''");
            rfturn "Offsft(" + PATTERNS[typf] + ",'" + donvfrtfd + "')";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs bn offsft ID.
     */
    stbtid finbl dlbss LodblizfdOffsftIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfxtStylf stylf;

        /**
         * Construdtor.
         *
         * @pbrbm stylf  thf stylf, not null
         */
        LodblizfdOffsftIdPrintfrPbrsfr(TfxtStylf stylf) {
            this.stylf = stylf;
        }

        privbtf stbtid StringBuildfr bppfndHMS(StringBuildfr buf, int t) {
            rfturn buf.bppfnd((dhbr)(t / 10 + '0'))
                      .bppfnd((dhbr)(t % 10 + '0'));
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Long offsftSfds = dontfxt.gftVbluf(OFFSET_SECONDS);
            if (offsftSfds == null) {
                rfturn fblsf;
            }
            String gmtTfxt = "GMT";  // TODO: gft lodblizfd vfrsion of 'GMT'
            if (gmtTfxt != null) {
                buf.bppfnd(gmtTfxt);
            }
            int totblSfds = Mbth.toIntExbdt(offsftSfds);
            if (totblSfds != 0) {
                int bbsHours = Mbth.bbs((totblSfds / 3600) % 100);  // bnything lbrgfr thbn 99 silfntly droppfd
                int bbsMinutfs = Mbth.bbs((totblSfds / 60) % 60);
                int bbsSfdonds = Mbth.bbs(totblSfds % 60);
                buf.bppfnd(totblSfds < 0 ? "-" : "+");
                if (stylf == TfxtStylf.FULL) {
                    bppfndHMS(buf, bbsHours);
                    buf.bppfnd(':');
                    bppfndHMS(buf, bbsMinutfs);
                    if (bbsSfdonds != 0) {
                       buf.bppfnd(':');
                       bppfndHMS(buf, bbsSfdonds);
                    }
                } flsf {
                    if (bbsHours >= 10) {
                        buf.bppfnd((dhbr)(bbsHours / 10 + '0'));
                    }
                    buf.bppfnd((dhbr)(bbsHours % 10 + '0'));
                    if (bbsMinutfs != 0 || bbsSfdonds != 0) {
                        buf.bppfnd(':');
                        bppfndHMS(buf, bbsMinutfs);
                        if (bbsSfdonds != 0) {
                            buf.bppfnd(':');
                            bppfndHMS(buf, bbsSfdonds);
                        }
                    }
                }
            }
            rfturn truf;
        }

        int gftDigit(ChbrSfqufndf tfxt, int position) {
            dhbr d = tfxt.dhbrAt(position);
            if (d < '0' || d > '9') {
                rfturn -1;
            }
            rfturn d - '0';
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int pos = position;
            int fnd = pos + tfxt.lfngth();
            String gmtTfxt = "GMT";  // TODO: gft lodblizfd vfrsion of 'GMT'
            if (gmtTfxt != null) {
                if (!dontfxt.subSfqufndfEqubls(tfxt, pos, gmtTfxt, 0, gmtTfxt.lfngth())) {
                    rfturn ~position;
                }
                pos += gmtTfxt.lfngth();
            }
            // pbrsf normbl plus/minus offsft
            int nfgbtivf = 0;
            if (pos == fnd) {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, pos);
            }
            dhbr sign = tfxt.dhbrAt(pos);  // IOOBE if invblid position
            if (sign == '+') {
                nfgbtivf = 1;
            } flsf if (sign == '-') {
                nfgbtivf = -1;
            } flsf {
                rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, 0, position, pos);
            }
            pos++;
            int h = 0;
            int m = 0;
            int s = 0;
            if (stylf == TfxtStylf.FULL) {
                int h1 = gftDigit(tfxt, pos++);
                int h2 = gftDigit(tfxt, pos++);
                if (h1 < 0 || h2 < 0 || tfxt.dhbrAt(pos++) != ':') {
                    rfturn ~position;
                }
                h = h1 * 10 + h2;
                int m1 = gftDigit(tfxt, pos++);
                int m2 = gftDigit(tfxt, pos++);
                if (m1 < 0 || m2 < 0) {
                    rfturn ~position;
                }
                m = m1 * 10 + m2;
                if (pos + 2 < fnd && tfxt.dhbrAt(pos) == ':') {
                    int s1 = gftDigit(tfxt, pos + 1);
                    int s2 = gftDigit(tfxt, pos + 2);
                    if (s1 >= 0 && s2 >= 0) {
                        s = s1 * 10 + s2;
                        pos += 3;
                    }
                }
            } flsf {
                h = gftDigit(tfxt, pos++);
                if (h < 0) {
                    rfturn ~position;
                }
                if (pos < fnd) {
                    int h2 = gftDigit(tfxt, pos);
                    if (h2 >=0) {
                        h = h * 10 + h2;
                        pos++;
                    }
                    if (pos + 2 < fnd && tfxt.dhbrAt(pos) == ':') {
                        if (pos + 2 < fnd && tfxt.dhbrAt(pos) == ':') {
                            int m1 = gftDigit(tfxt, pos + 1);
                            int m2 = gftDigit(tfxt, pos + 2);
                            if (m1 >= 0 && m2 >= 0) {
                                m = m1 * 10 + m2;
                                pos += 3;
                                if (pos + 2 < fnd && tfxt.dhbrAt(pos) == ':') {
                                    int s1 = gftDigit(tfxt, pos + 1);
                                    int s2 = gftDigit(tfxt, pos + 2);
                                    if (s1 >= 0 && s2 >= 0) {
                                        s = s1 * 10 + s2;
                                        pos += 3;
                                   }
                                }
                            }
                        }
                    }
                }
            }
            long offsftSfds = nfgbtivf * (h * 3600L + m * 60L + s);
            rfturn dontfxt.sftPbrsfdFifld(OFFSET_SECONDS, offsftSfds, position, pos);
        }

        @Ovfrridf
        publid String toString() {
            rfturn "LodblizfdOffsft(" + stylf + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b zonf ID.
     */
    stbtid finbl dlbss ZonfTfxtPrintfrPbrsfr fxtfnds ZonfIdPrintfrPbrsfr {

        /** Thf tfxt stylf to output. */
        privbtf finbl TfxtStylf tfxtStylf;

        /** Thf prfffrrfd zonfid mbp */
        privbtf Sft<String> prfffrrfdZonfs;

        ZonfTfxtPrintfrPbrsfr(TfxtStylf tfxtStylf, Sft<ZonfId> prfffrrfdZonfs) {
            supfr(TfmporblQufrifs.zonf(), "ZonfTfxt(" + tfxtStylf + ")");
            this.tfxtStylf = Objfdts.rfquirfNonNull(tfxtStylf, "tfxtStylf");
            if (prfffrrfdZonfs != null && prfffrrfdZonfs.sizf() != 0) {
                this.prfffrrfdZonfs = nfw HbshSft<>();
                for (ZonfId id : prfffrrfdZonfs) {
                    this.prfffrrfdZonfs.bdd(id.gftId());
                }
            }
        }

        privbtf stbtid finbl int STD = 0;
        privbtf stbtid finbl int DST = 1;
        privbtf stbtid finbl int GENERIC = 2;
        privbtf stbtid finbl Mbp<String, SoftRfffrfndf<Mbp<Lodblf, String[]>>> dbdhf =
            nfw CondurrfntHbshMbp<>();

        privbtf String gftDisplbyNbmf(String id, int typf, Lodblf lodblf) {
            if (tfxtStylf == TfxtStylf.NARROW) {
                rfturn null;
            }
            String[] nbmfs;
            SoftRfffrfndf<Mbp<Lodblf, String[]>> rff = dbdhf.gft(id);
            Mbp<Lodblf, String[]> pfrLodblf = null;
            if (rff == null || (pfrLodblf = rff.gft()) == null ||
                (nbmfs = pfrLodblf.gft(lodblf)) == null) {
                nbmfs = TimfZonfNbmfUtility.rftrifvfDisplbyNbmfs(id, lodblf);
                if (nbmfs == null) {
                    rfturn null;
                }
                nbmfs = Arrbys.dopyOfRbngf(nbmfs, 0, 7);
                nbmfs[5] =
                    TimfZonfNbmfUtility.rftrifvfGfnfridDisplbyNbmf(id, TimfZonf.LONG, lodblf);
                if (nbmfs[5] == null) {
                    nbmfs[5] = nbmfs[0]; // usf thf id
                }
                nbmfs[6] =
                    TimfZonfNbmfUtility.rftrifvfGfnfridDisplbyNbmf(id, TimfZonf.SHORT, lodblf);
                if (nbmfs[6] == null) {
                    nbmfs[6] = nbmfs[0];
                }
                if (pfrLodblf == null) {
                    pfrLodblf = nfw CondurrfntHbshMbp<>();
                }
                pfrLodblf.put(lodblf, nbmfs);
                dbdhf.put(id, nfw SoftRfffrfndf<>(pfrLodblf));
            }
            switdh (typf) {
            dbsf STD:
                rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 1];
            dbsf DST:
                rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 3];
            }
            rfturn nbmfs[tfxtStylf.zonfNbmfStylfIndfx() + 5];
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            ZonfId zonf = dontfxt.gftVbluf(TfmporblQufrifs.zonfId());
            if (zonf == null) {
                rfturn fblsf;
            }
            String znbmf = zonf.gftId();
            if (!(zonf instbndfof ZonfOffsft)) {
                TfmporblAddfssor dt = dontfxt.gftTfmporbl();
                String nbmf = gftDisplbyNbmf(znbmf,
                                             dt.isSupportfd(ChronoFifld.INSTANT_SECONDS)
                                             ? (zonf.gftRulfs().isDbylightSbvings(Instbnt.from(dt)) ? DST : STD)
                                             : GENERIC,
                                             dontfxt.gftLodblf());
                if (nbmf != null) {
                    znbmf = nbmf;
                }
            }
            buf.bppfnd(znbmf);
            rfturn truf;
        }

        // dbdhf pfr instbndf for now
        privbtf finbl Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>>
            dbdhfdTrff = nfw HbshMbp<>();
        privbtf finbl Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>>
            dbdhfdTrffCI = nfw HbshMbp<>();

        @Ovfrridf
        protfdtfd PrffixTrff gftTrff(DbtfTimfPbrsfContfxt dontfxt) {
            if (tfxtStylf == TfxtStylf.NARROW) {
                rfturn supfr.gftTrff(dontfxt);
            }
            Lodblf lodblf = dontfxt.gftLodblf();
            boolfbn isCbsfSfnsitivf = dontfxt.isCbsfSfnsitivf();
            Sft<String> rfgionIds = ZonfRulfsProvidfr.gftAvbilbblfZonfIds();
            int rfgionIdsSizf = rfgionIds.sizf();

            Mbp<Lodblf, Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>>> dbdhfd =
                isCbsfSfnsitivf ? dbdhfdTrff : dbdhfdTrffCI;

            Entry<Intfgfr, SoftRfffrfndf<PrffixTrff>> fntry = null;
            PrffixTrff trff = null;
            String[][] zonfStrings = null;
            if ((fntry = dbdhfd.gft(lodblf)) == null ||
                (fntry.gftKfy() != rfgionIdsSizf ||
                (trff = fntry.gftVbluf().gft()) == null)) {
                trff = PrffixTrff.nfwTrff(dontfxt);
                zonfStrings = TimfZonfNbmfUtility.gftZonfStrings(lodblf);
                for (String[] nbmfs : zonfStrings) {
                    String zid = nbmfs[0];
                    if (!rfgionIds.dontbins(zid)) {
                        dontinuf;
                    }
                    trff.bdd(zid, zid);    // don't donvfrt zid -> mftbzonf
                    zid = ZonfNbmf.toZid(zid, lodblf);
                    int i = tfxtStylf == TfxtStylf.FULL ? 1 : 2;
                    for (; i < nbmfs.lfngth; i += 2) {
                        trff.bdd(nbmfs[i], zid);
                    }
                }
                // if wf hbvf b sft of prfffrrfd zonfs, nffd b dopy bnd
                // bdd thf prfffrrfd zonfs bgbin to ovfrwritf
                if (prfffrrfdZonfs != null) {
                    for (String[] nbmfs : zonfStrings) {
                        String zid = nbmfs[0];
                        if (!prfffrrfdZonfs.dontbins(zid) || !rfgionIds.dontbins(zid)) {
                            dontinuf;
                        }
                        int i = tfxtStylf == TfxtStylf.FULL ? 1 : 2;
                        for (; i < nbmfs.lfngth; i += 2) {
                            trff.bdd(nbmfs[i], zid);
                       }
                    }
                }
                dbdhfd.put(lodblf, nfw SimplfImmutbblfEntry<>(rfgionIdsSizf, nfw SoftRfffrfndf<>(trff)));
            }
            rfturn trff;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b zonf ID.
     */
    stbtid dlbss ZonfIdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf finbl TfmporblQufry<ZonfId> qufry;
        privbtf finbl String dfsdription;

        ZonfIdPrintfrPbrsfr(TfmporblQufry<ZonfId> qufry, String dfsdription) {
            this.qufry = qufry;
            this.dfsdription = dfsdription;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            ZonfId zonf = dontfxt.gftVbluf(qufry);
            if (zonf == null) {
                rfturn fblsf;
            }
            buf.bppfnd(zonf.gftId());
            rfturn truf;
        }

        /**
         * Thf dbdhfd trff to spffd up pbrsing.
         */
        privbtf stbtid volbtilf Entry<Intfgfr, PrffixTrff> dbdhfdPrffixTrff;
        privbtf stbtid volbtilf Entry<Intfgfr, PrffixTrff> dbdhfdPrffixTrffCI;

        protfdtfd PrffixTrff gftTrff(DbtfTimfPbrsfContfxt dontfxt) {
            // prfpbrf pbrsf trff
            Sft<String> rfgionIds = ZonfRulfsProvidfr.gftAvbilbblfZonfIds();
            finbl int rfgionIdsSizf = rfgionIds.sizf();
            Entry<Intfgfr, PrffixTrff> dbdhfd = dontfxt.isCbsfSfnsitivf()
                                                ? dbdhfdPrffixTrff : dbdhfdPrffixTrffCI;
            if (dbdhfd == null || dbdhfd.gftKfy() != rfgionIdsSizf) {
                syndhronizfd (this) {
                    dbdhfd = dontfxt.isCbsfSfnsitivf() ? dbdhfdPrffixTrff : dbdhfdPrffixTrffCI;
                    if (dbdhfd == null || dbdhfd.gftKfy() != rfgionIdsSizf) {
                        dbdhfd = nfw SimplfImmutbblfEntry<>(rfgionIdsSizf, PrffixTrff.nfwTrff(rfgionIds, dontfxt));
                        if (dontfxt.isCbsfSfnsitivf()) {
                            dbdhfdPrffixTrff = dbdhfd;
                        } flsf {
                            dbdhfdPrffixTrffCI = dbdhfd;
                        }
                    }
                }
            }
            rfturn dbdhfd.gftVbluf();
        }

        /**
         * This implfmfntbtion looks for thf longfst mbtdhing string.
         * For fxbmplf, pbrsing Etd/GMT-2 will rfturn Etd/GMC-2 rbthfr thbn just
         * Etd/GMC blthough both brf vblid.
         */
        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            int lfngth = tfxt.lfngth();
            if (position > lfngth) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
            if (position == lfngth) {
                rfturn ~position;
            }

            // hbndlf fixfd timf-zonf IDs
            dhbr nfxtChbr = tfxt.dhbrAt(position);
            if (nfxtChbr == '+' || nfxtChbr == '-') {
                rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position, OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z);
            } flsf if (lfngth >= position + 2) {
                dhbr nfxtNfxtChbr = tfxt.dhbrAt(position + 1);
                if (dontfxt.dhbrEqubls(nfxtChbr, 'U') && dontfxt.dhbrEqubls(nfxtNfxtChbr, 'T')) {
                    if (lfngth >= position + 3 && dontfxt.dhbrEqubls(tfxt.dhbrAt(position + 2), 'C')) {
                        rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 3, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                    }
                    rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 2, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                } flsf if (dontfxt.dhbrEqubls(nfxtChbr, 'G') && lfngth >= position + 3 &&
                        dontfxt.dhbrEqubls(nfxtNfxtChbr, 'M') && dontfxt.dhbrEqubls(tfxt.dhbrAt(position + 2), 'T')) {
                    rfturn pbrsfOffsftBbsfd(dontfxt, tfxt, position, position + 3, OffsftIdPrintfrPbrsfr.INSTANCE_ID_ZERO);
                }
            }

            // pbrsf
            PrffixTrff trff = gftTrff(dontfxt);
            PbrsfPosition ppos = nfw PbrsfPosition(position);
            String pbrsfdZonfId = trff.mbtdh(tfxt, ppos);
            if (pbrsfdZonfId == null) {
                if (dontfxt.dhbrEqubls(nfxtChbr, 'Z')) {
                    dontfxt.sftPbrsfd(ZonfOffsft.UTC);
                    rfturn position + 1;
                }
                rfturn ~position;
            }
            dontfxt.sftPbrsfd(ZonfId.of(pbrsfdZonfId));
            rfturn ppos.gftIndfx();
        }

        /**
         * Pbrsf bn offsft following b prffix bnd sft thf ZonfId if it is vblid.
         * To mbtdhing thf pbrsing of ZonfId.of thf vblufs brf not normblizfd
         * to ZonfOffsfts.
         *
         * @pbrbm dontfxt thf pbrsf dontfxt
         * @pbrbm tfxt thf input tfxt
         * @pbrbm prffixPos stbrt of thf prffix
         * @pbrbm position stbrt of tfxt bftfr thf prffix
         * @pbrbm pbrsfr pbrsfr for thf vbluf bftfr thf prffix
         * @rfturn thf position bftfr thf pbrsf
         */
        privbtf int pbrsfOffsftBbsfd(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int prffixPos, int position, OffsftIdPrintfrPbrsfr pbrsfr) {
            String prffix = tfxt.toString().substring(prffixPos, position).toUppfrCbsf();
            if (position >= tfxt.lfngth()) {
                dontfxt.sftPbrsfd(ZonfId.of(prffix));
                rfturn position;
            }

            // '0' or 'Z' bftfr prffix is not pbrt of b vblid ZonfId; usf bbrf prffix
            if (tfxt.dhbrAt(position) == '0' ||
                dontfxt.dhbrEqubls(tfxt.dhbrAt(position), 'Z')) {
                dontfxt.sftPbrsfd(ZonfId.of(prffix));
                rfturn position;
            }

            DbtfTimfPbrsfContfxt nfwContfxt = dontfxt.dopy();
            int fndPos = pbrsfr.pbrsf(nfwContfxt, tfxt, position);
            try {
                if (fndPos < 0) {
                    if (pbrsfr == OffsftIdPrintfrPbrsfr.INSTANCE_ID_Z) {
                        rfturn ~prffixPos;
                    }
                    dontfxt.sftPbrsfd(ZonfId.of(prffix));
                    rfturn position;
                }
                int offsft = (int) nfwContfxt.gftPbrsfd(OFFSET_SECONDS).longVbluf();
                ZonfOffsft zonfOffsft = ZonfOffsft.ofTotblSfdonds(offsft);
                dontfxt.sftPbrsfd(ZonfId.ofOffsft(prffix, zonfOffsft));
                rfturn fndPos;
            } dbtdh (DbtfTimfExdfption dtf) {
                rfturn ~prffixPos;
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn dfsdription;
        }
    }

    //-----------------------------------------------------------------------
    /**
     * A String bbsfd prffix trff for pbrsing timf-zonf nbmfs.
     */
    stbtid dlbss PrffixTrff {
        protfdtfd String kfy;
        protfdtfd String vbluf;
        protfdtfd dhbr d0;    // pfrformbndf optimizbtion to bvoid thf
                              // boundbry dhfdk dost of kfy.dhbrbt(0)
        protfdtfd PrffixTrff dhild;
        protfdtfd PrffixTrff sibling;

        privbtf PrffixTrff(String k, String v, PrffixTrff dhild) {
            this.kfy = k;
            this.vbluf = v;
            this.dhild = dhild;
            if (k.lfngth() == 0){
                d0 = 0xffff;
            } flsf {
                d0 = kfy.dhbrAt(0);
            }
        }

        /**
         * Crfbtfs b nfw prffix pbrsing trff bbsfd on pbrsf dontfxt.
         *
         * @pbrbm dontfxt  thf pbrsf dontfxt
         * @rfturn thf trff, not null
         */
        publid stbtid PrffixTrff nfwTrff(DbtfTimfPbrsfContfxt dontfxt) {
            //if (!dontfxt.isStridt()) {
            //    rfturn nfw LENIENT("", null, null);
            //}
            if (dontfxt.isCbsfSfnsitivf()) {
                rfturn nfw PrffixTrff("", null, null);
            }
            rfturn nfw CI("", null, null);
        }

        /**
         * Crfbtfs b nfw prffix pbrsing trff.
         *
         * @pbrbm kfys  b sft of strings to build thf prffix pbrsing trff, not null
         * @pbrbm dontfxt  thf pbrsf dontfxt
         * @rfturn thf trff, not null
         */
        publid stbtid  PrffixTrff nfwTrff(Sft<String> kfys, DbtfTimfPbrsfContfxt dontfxt) {
            PrffixTrff trff = nfwTrff(dontfxt);
            for (String k : kfys) {
                trff.bdd0(k, k);
            }
            rfturn trff;
        }

        /**
         * Clonf b dopy of this trff
         */
        publid PrffixTrff dopyTrff() {
            PrffixTrff dopy = nfw PrffixTrff(kfy, vbluf, null);
            if (dhild != null) {
                dopy.dhild = dhild.dopyTrff();
            }
            if (sibling != null) {
                dopy.sibling = sibling.dopyTrff();
            }
            rfturn dopy;
        }


        /**
         * Adds b pbir of {kfy, vbluf} into thf prffix trff.
         *
         * @pbrbm k  thf kfy, not null
         * @pbrbm v  thf vbluf, not null
         * @rfturn  truf if thf pbir is bddfd suddfssfully
         */
        publid boolfbn bdd(String k, String v) {
            rfturn bdd0(k, v);
        }

        privbtf boolfbn bdd0(String k, String v) {
            k = toKfy(k);
            int prffixLfn = prffixLfngth(k);
            if (prffixLfn == kfy.lfngth()) {
                if (prffixLfn < k.lfngth()) {  // down thf trff
                    String subKfy = k.substring(prffixLfn);
                    PrffixTrff d = dhild;
                    whilf (d != null) {
                        if (isEqubl(d.d0, subKfy.dhbrAt(0))) {
                            rfturn d.bdd0(subKfy, v);
                        }
                        d = d.sibling;
                    }
                    // bdd thf nodf bs thf dhild of thf durrfnt nodf
                    d = nfwNodf(subKfy, v, null);
                    d.sibling = dhild;
                    dhild = d;
                    rfturn truf;
                }
                // hbvf bn fxisting <kfy, vbluf> blrfbdy, ovfrwritf it
                // if (vbluf != null) {
                //    rfturn fblsf;
                //}
                vbluf = v;
                rfturn truf;
            }
            // split thf fxisting nodf
            PrffixTrff n1 = nfwNodf(kfy.substring(prffixLfn), vbluf, dhild);
            kfy = k.substring(0, prffixLfn);
            dhild = n1;
            if (prffixLfn < k.lfngth()) {
                PrffixTrff n2 = nfwNodf(k.substring(prffixLfn), v, null);
                dhild.sibling = n2;
                vbluf = null;
            } flsf {
                vbluf = v;
            }
            rfturn truf;
        }

        /**
         * Mbtdh tfxt with thf prffix trff.
         *
         * @pbrbm tfxt  thf input tfxt to pbrsf, not null
         * @pbrbm off  thf offsft position to stbrt pbrsing bt
         * @pbrbm fnd  thf fnd position to stop pbrsing
         * @rfturn thf rfsulting string, or null if no mbtdh found.
         */
        publid String mbtdh(ChbrSfqufndf tfxt, int off, int fnd) {
            if (!prffixOf(tfxt, off, fnd)){
                rfturn null;
            }
            if (dhild != null && (off += kfy.lfngth()) != fnd) {
                PrffixTrff d = dhild;
                do {
                    if (isEqubl(d.d0, tfxt.dhbrAt(off))) {
                        String found = d.mbtdh(tfxt, off, fnd);
                        if (found != null) {
                            rfturn found;
                        }
                        rfturn vbluf;
                    }
                    d = d.sibling;
                } whilf (d != null);
            }
            rfturn vbluf;
        }

        /**
         * Mbtdh tfxt with thf prffix trff.
         *
         * @pbrbm tfxt  thf input tfxt to pbrsf, not null
         * @pbrbm pos  thf position to stbrt pbrsing bt, from 0 to thf tfxt
         *  lfngth. Upon rfturn, position will bf updbtfd to thf nfw pbrsf
         *  position, or undhbngfd, if no mbtdh found.
         * @rfturn thf rfsulting string, or null if no mbtdh found.
         */
        publid String mbtdh(ChbrSfqufndf tfxt, PbrsfPosition pos) {
            int off = pos.gftIndfx();
            int fnd = tfxt.lfngth();
            if (!prffixOf(tfxt, off, fnd)){
                rfturn null;
            }
            off += kfy.lfngth();
            if (dhild != null && off != fnd) {
                PrffixTrff d = dhild;
                do {
                    if (isEqubl(d.d0, tfxt.dhbrAt(off))) {
                        pos.sftIndfx(off);
                        String found = d.mbtdh(tfxt, pos);
                        if (found != null) {
                            rfturn found;
                        }
                        brfbk;
                    }
                    d = d.sibling;
                } whilf (d != null);
            }
            pos.sftIndfx(off);
            rfturn vbluf;
        }

        protfdtfd String toKfy(String k) {
            rfturn k;
        }

        protfdtfd PrffixTrff nfwNodf(String k, String v, PrffixTrff dhild) {
            rfturn nfw PrffixTrff(k, v, dhild);
        }

        protfdtfd boolfbn isEqubl(dhbr d1, dhbr d2) {
            rfturn d1 == d2;
        }

        protfdtfd boolfbn prffixOf(ChbrSfqufndf tfxt, int off, int fnd) {
            if (tfxt instbndfof String) {
                rfturn ((String)tfxt).stbrtsWith(kfy, off);
            }
            int lfn = kfy.lfngth();
            if (lfn > fnd - off) {
                rfturn fblsf;
            }
            int off0 = 0;
            whilf (lfn-- > 0) {
                if (!isEqubl(kfy.dhbrAt(off0++), tfxt.dhbrAt(off++))) {
                    rfturn fblsf;
                }
            }
            rfturn truf;
        }

        privbtf int prffixLfngth(String k) {
            int off = 0;
            whilf (off < k.lfngth() && off < kfy.lfngth()) {
                if (!isEqubl(k.dhbrAt(off), kfy.dhbrAt(off))) {
                    rfturn off;
                }
                off++;
            }
            rfturn off;
        }

        /**
         * Cbsf Insfnsitivf prffix trff.
         */
        privbtf stbtid dlbss CI fxtfnds PrffixTrff {

            privbtf CI(String k, String v, PrffixTrff dhild) {
                supfr(k, v, dhild);
            }

            @Ovfrridf
            protfdtfd CI nfwNodf(String k, String v, PrffixTrff dhild) {
                rfturn nfw CI(k, v, dhild);
            }

            @Ovfrridf
            protfdtfd boolfbn isEqubl(dhbr d1, dhbr d2) {
                rfturn DbtfTimfPbrsfContfxt.dhbrEqublsIgnorfCbsf(d1, d2);
            }

            @Ovfrridf
            protfdtfd boolfbn prffixOf(ChbrSfqufndf tfxt, int off, int fnd) {
                int lfn = kfy.lfngth();
                if (lfn > fnd - off) {
                    rfturn fblsf;
                }
                int off0 = 0;
                whilf (lfn-- > 0) {
                    if (!isEqubl(kfy.dhbrAt(off0++), tfxt.dhbrAt(off++))) {
                        rfturn fblsf;
                    }
                }
                rfturn truf;
            }
        }

        /**
         * Lfnifnt prffix trff. Cbsf insfnsitivf bnd ignorfs dhbrbdtfrs
         * likf spbdf, undfrsdorf bnd slbsh.
         */
        privbtf stbtid dlbss LENIENT fxtfnds CI {

            privbtf LENIENT(String k, String v, PrffixTrff dhild) {
                supfr(k, v, dhild);
            }

            @Ovfrridf
            protfdtfd CI nfwNodf(String k, String v, PrffixTrff dhild) {
                rfturn nfw LENIENT(k, v, dhild);
            }

            privbtf boolfbn isLfnifntChbr(dhbr d) {
                rfturn d == ' ' || d == '_' || d == '/';
            }

            protfdtfd String toKfy(String k) {
                for (int i = 0; i < k.lfngth(); i++) {
                    if (isLfnifntChbr(k.dhbrAt(i))) {
                        StringBuildfr sb = nfw StringBuildfr(k.lfngth());
                        sb.bppfnd(k, 0, i);
                        i++;
                        whilf (i < k.lfngth()) {
                            if (!isLfnifntChbr(k.dhbrAt(i))) {
                                sb.bppfnd(k.dhbrAt(i));
                            }
                            i++;
                        }
                        rfturn sb.toString();
                    }
                }
                rfturn k;
            }

            @Ovfrridf
            publid String mbtdh(ChbrSfqufndf tfxt, PbrsfPosition pos) {
                int off = pos.gftIndfx();
                int fnd = tfxt.lfngth();
                int lfn = kfy.lfngth();
                int koff = 0;
                whilf (koff < lfn && off < fnd) {
                    if (isLfnifntChbr(tfxt.dhbrAt(off))) {
                        off++;
                        dontinuf;
                    }
                    if (!isEqubl(kfy.dhbrAt(koff++), tfxt.dhbrAt(off++))) {
                        rfturn null;
                    }
                }
                if (koff != lfn) {
                    rfturn null;
                }
                if (dhild != null && off != fnd) {
                    int off0 = off;
                    whilf (off0 < fnd && isLfnifntChbr(tfxt.dhbrAt(off0))) {
                        off0++;
                    }
                    if (off0 < fnd) {
                        PrffixTrff d = dhild;
                        do {
                            if (isEqubl(d.d0, tfxt.dhbrAt(off0))) {
                                pos.sftIndfx(off0);
                                String found = d.mbtdh(tfxt, pos);
                                if (found != null) {
                                    rfturn found;
                                }
                                brfbk;
                            }
                            d = d.sibling;
                        } whilf (d != null);
                    }
                }
                pos.sftIndfx(off);
                rfturn vbluf;
            }
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b dhronology.
     */
    stbtid finbl dlbss ChronoPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        /** Thf tfxt stylf to output, null mfbns thf ID. */
        privbtf finbl TfxtStylf tfxtStylf;

        ChronoPrintfrPbrsfr(TfxtStylf tfxtStylf) {
            // vblidbtfd by dbllfr
            this.tfxtStylf = tfxtStylf;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Chronology dhrono = dontfxt.gftVbluf(TfmporblQufrifs.dhronology());
            if (dhrono == null) {
                rfturn fblsf;
            }
            if (tfxtStylf == null) {
                buf.bppfnd(dhrono.gftId());
            } flsf {
                buf.bppfnd(gftChronologyNbmf(dhrono, dontfxt.gftLodblf()));
            }
            rfturn truf;
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            // simplf looping pbrsfr to find thf dhronology
            if (position < 0 || position > tfxt.lfngth()) {
                throw nfw IndfxOutOfBoundsExdfption();
            }
            Sft<Chronology> dhronos = Chronology.gftAvbilbblfChronologifs();
            Chronology bfstMbtdh = null;
            int mbtdhLfn = -1;
            for (Chronology dhrono : dhronos) {
                String nbmf;
                if (tfxtStylf == null) {
                    nbmf = dhrono.gftId();
                } flsf {
                    nbmf = gftChronologyNbmf(dhrono, dontfxt.gftLodblf());
                }
                int nbmfLfn = nbmf.lfngth();
                if (nbmfLfn > mbtdhLfn && dontfxt.subSfqufndfEqubls(tfxt, position, nbmf, 0, nbmfLfn)) {
                    bfstMbtdh = dhrono;
                    mbtdhLfn = nbmfLfn;
                }
            }
            if (bfstMbtdh == null) {
                rfturn ~position;
            }
            dontfxt.sftPbrsfd(bfstMbtdh);
            rfturn position + mbtdhLfn;
        }

        /**
         * Rfturns thf dhronology nbmf of thf givfn dhrono in thf givfn lodblf
         * if bvbilbblf, or thf dhronology Id othfrwisf. Thf rfgulbr RfsourdfBundlf
         * sfbrdh pbth is usfd for looking up thf dhronology nbmf.
         *
         * @pbrbm dhrono  thf dhronology, not null
         * @pbrbm lodblf  thf lodblf, not null
         * @rfturn thf dhronology nbmf of dhrono in lodblf, or thf id if no nbmf is bvbilbblf
         * @throws NullPointfrExdfption if dhrono or lodblf is null
         */
        privbtf String gftChronologyNbmf(Chronology dhrono, Lodblf lodblf) {
            String kfy = "dblfndbrnbmf." + dhrono.gftCblfndbrTypf();
            String nbmf = DbtfTimfTfxtProvidfr.gftLodblizfdRfsourdf(kfy, lodblf);
            rfturn nbmf != null ? nbmf : dhrono.gftId();
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b lodblizfd pbttfrn.
     */
    stbtid finbl dlbss LodblizfdPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        /** Cbdhf of formbttfrs. */
        privbtf stbtid finbl CondurrfntMbp<String, DbtfTimfFormbttfr> FORMATTER_CACHE = nfw CondurrfntHbshMbp<>(16, 0.75f, 2);

        privbtf finbl FormbtStylf dbtfStylf;
        privbtf finbl FormbtStylf timfStylf;

        /**
         * Construdtor.
         *
         * @pbrbm dbtfStylf  thf dbtf stylf to usf, mby bf null
         * @pbrbm timfStylf  thf timf stylf to usf, mby bf null
         */
        LodblizfdPrintfrPbrsfr(FormbtStylf dbtfStylf, FormbtStylf timfStylf) {
            // vblidbtfd by dbllfr
            this.dbtfStylf = dbtfStylf;
            this.timfStylf = timfStylf;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            Chronology dhrono = Chronology.from(dontfxt.gftTfmporbl());
            rfturn formbttfr(dontfxt.gftLodblf(), dhrono).toPrintfrPbrsfr(fblsf).formbt(dontfxt, buf);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            Chronology dhrono = dontfxt.gftEfffdtivfChronology();
            rfturn formbttfr(dontfxt.gftLodblf(), dhrono).toPrintfrPbrsfr(fblsf).pbrsf(dontfxt, tfxt, position);
        }

        /**
         * Gfts thf formbttfr to usf.
         * <p>
         * Thf formbttfr will bf thf most bppropribtf to usf for thf dbtf bnd timf stylf in thf lodblf.
         * For fxbmplf, somf lodblfs will usf thf month nbmf whilf othfrs will usf thf numbfr.
         *
         * @pbrbm lodblf  thf lodblf to usf, not null
         * @pbrbm dhrono  thf dhronology to usf, not null
         * @rfturn thf formbttfr, not null
         * @throws IllfgblArgumfntExdfption if thf formbttfr dbnnot bf found
         */
        privbtf DbtfTimfFormbttfr formbttfr(Lodblf lodblf, Chronology dhrono) {
            String kfy = dhrono.gftId() + '|' + lodblf.toString() + '|' + dbtfStylf + timfStylf;
            DbtfTimfFormbttfr formbttfr = FORMATTER_CACHE.gft(kfy);
            if (formbttfr == null) {
                String pbttfrn = gftLodblizfdDbtfTimfPbttfrn(dbtfStylf, timfStylf, dhrono, lodblf);
                formbttfr = nfw DbtfTimfFormbttfrBuildfr().bppfndPbttfrn(pbttfrn).toFormbttfr(lodblf);
                DbtfTimfFormbttfr old = FORMATTER_CACHE.putIfAbsfnt(kfy, formbttfr);
                if (old != null) {
                    formbttfr = old;
                }
            }
            rfturn formbttfr;
        }

        @Ovfrridf
        publid String toString() {
            rfturn "Lodblizfd(" + (dbtfStylf != null ? dbtfStylf : "") + "," +
                (timfStylf != null ? timfStylf : "") + ")";
        }
    }

    //-----------------------------------------------------------------------
    /**
     * Prints or pbrsfs b lodblizfd pbttfrn from b lodblizfd fifld.
     * Thf spfdifid formbttfr bnd pbrbmftfrs is not sflfdtfd until thf
     * thf fifld is to bf printfd or pbrsfd.
     * Thf lodblf is nffdfd to sflfdt thf propfr WffkFiflds from whidh
     * thf fifld for dby-of-wffk, wffk-of-month, or wffk-of-yfbr is sflfdtfd.
     */
    stbtid finbl dlbss WffkBbsfdFifldPrintfrPbrsfr implfmfnts DbtfTimfPrintfrPbrsfr {
        privbtf dhbr dhr;
        privbtf int dount;

        /**
         * Construdtor.
         *
         * @pbrbm dhr thf pbttfrn formbt lfttfr thbt bddfd this PrintfrPbrsfr.
         * @pbrbm dount thf rfpfbt dount of thf formbt lfttfr
         */
        WffkBbsfdFifldPrintfrPbrsfr(dhbr dhr, int dount) {
            this.dhr = dhr;
            this.dount = dount;
        }

        @Ovfrridf
        publid boolfbn formbt(DbtfTimfPrintContfxt dontfxt, StringBuildfr buf) {
            rfturn printfrPbrsfr(dontfxt.gftLodblf()).formbt(dontfxt, buf);
        }

        @Ovfrridf
        publid int pbrsf(DbtfTimfPbrsfContfxt dontfxt, ChbrSfqufndf tfxt, int position) {
            rfturn printfrPbrsfr(dontfxt.gftLodblf()).pbrsf(dontfxt, tfxt, position);
        }

        /**
         * Gfts thf printfrPbrsfr to usf bbsfd on thf fifld bnd thf lodblf.
         *
         * @pbrbm lodblf  thf lodblf to usf, not null
         * @rfturn thf formbttfr, not null
         * @throws IllfgblArgumfntExdfption if thf formbttfr dbnnot bf found
         */
        privbtf DbtfTimfPrintfrPbrsfr printfrPbrsfr(Lodblf lodblf) {
            WffkFiflds wffkDff = WffkFiflds.of(lodblf);
            TfmporblFifld fifld = null;
            switdh (dhr) {
                dbsf 'Y':
                    fifld = wffkDff.wffkBbsfdYfbr();
                    if (dount == 2) {
                        rfturn nfw RfdudfdPrintfrPbrsfr(fifld, 2, 2, 0, RfdudfdPrintfrPbrsfr.BASE_DATE, 0);
                    } flsf {
                        rfturn nfw NumbfrPrintfrPbrsfr(fifld, dount, 19,
                                (dount < 4) ? SignStylf.NORMAL : SignStylf.EXCEEDS_PAD, -1);
                    }
                dbsf 'f':
                dbsf 'd':
                    fifld = wffkDff.dbyOfWffk();
                    brfbk;
                dbsf 'w':
                    fifld = wffkDff.wffkOfWffkBbsfdYfbr();
                    brfbk;
                dbsf 'W':
                    fifld = wffkDff.wffkOfMonth();
                    brfbk;
                dffbult:
                    throw nfw IllfgblStbtfExdfption("unrfbdhbblf");
            }
            rfturn nfw NumbfrPrintfrPbrsfr(fifld, (dount == 2 ? 2 : 1), 2, SignStylf.NOT_NEGATIVE);
        }

        @Ovfrridf
        publid String toString() {
            StringBuildfr sb = nfw StringBuildfr(30);
            sb.bppfnd("Lodblizfd(");
            if (dhr == 'Y') {
                if (dount == 1) {
                    sb.bppfnd("WffkBbsfdYfbr");
                } flsf if (dount == 2) {
                    sb.bppfnd("RfdudfdVbluf(WffkBbsfdYfbr,2,2,2000-01-01)");
                } flsf {
                    sb.bppfnd("WffkBbsfdYfbr,").bppfnd(dount).bppfnd(",")
                            .bppfnd(19).bppfnd(",")
                            .bppfnd((dount < 4) ? SignStylf.NORMAL : SignStylf.EXCEEDS_PAD);
                }
            } flsf {
                switdh (dhr) {
                    dbsf 'd':
                    dbsf 'f':
                        sb.bppfnd("DbyOfWffk");
                        brfbk;
                    dbsf 'w':
                        sb.bppfnd("WffkOfWffkBbsfdYfbr");
                        brfbk;
                    dbsf 'W':
                        sb.bppfnd("WffkOfMonth");
                        brfbk;
                    dffbult:
                        brfbk;
                }
                sb.bppfnd(",");
                sb.bppfnd(dount);
            }
            sb.bppfnd(")");
            rfturn sb.toString();
        }
    }

    //-------------------------------------------------------------------------
    /**
     * Lfngth dompbrbtor.
     */
    stbtid finbl Compbrbtor<String> LENGTH_SORT = nfw Compbrbtor<String>() {
        @Ovfrridf
        publid int dompbrf(String str1, String str2) {
            rfturn str1.lfngth() == str2.lfngth() ? str1.dompbrfTo(str2) : str1.lfngth() - str2.lfngth();
        }
    };
}
