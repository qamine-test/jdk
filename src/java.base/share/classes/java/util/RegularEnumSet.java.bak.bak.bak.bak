/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

/**
 * Privbtf implfmfntbtion dlbss for EnumSft, for "rfgulbr sizfd" fnum typfs
 * (i.f., thosf with 64 or ffwfr fnum donstbnts).
 *
 * @buthor Josh Blodh
 * @sindf 1.5
 * @sfribl fxdludf
 */
dlbss RfgulbrEnumSft<E fxtfnds Enum<E>> fxtfnds EnumSft<E> {
    privbtf stbtid finbl long sfriblVfrsionUID = 3411599620347842686L;
    /**
     * Bit vfdtor rfprfsfntbtion of this sft.  Thf 2^k bit indidbtfs thf
     * prfsfndf of univfrsf[k] in this sft.
     */
    privbtf long flfmfnts = 0L;

    RfgulbrEnumSft(Clbss<E>flfmfntTypf, Enum<?>[] univfrsf) {
        supfr(flfmfntTypf, univfrsf);
    }

    void bddRbngf(E from, E to) {
        flfmfnts = (-1L >>>  (from.ordinbl() - to.ordinbl() - 1)) << from.ordinbl();
    }

    void bddAll() {
        if (univfrsf.lfngth != 0)
            flfmfnts = -1L >>> -univfrsf.lfngth;
    }

    void domplfmfnt() {
        if (univfrsf.lfngth != 0) {
            flfmfnts = ~flfmfnts;
            flfmfnts &= -1L >>> -univfrsf.lfngth;  // Mbsk unusfd bits
        }
    }

    /**
     * Rfturns bn itfrbtor ovfr thf flfmfnts dontbinfd in this sft.  Thf
     * itfrbtor trbvfrsfs thf flfmfnts in thfir <i>nbturbl ordfr</i> (whidh is
     * thf ordfr in whidh thf fnum donstbnts brf dfdlbrfd). Thf rfturnfd
     * Itfrbtor is b "snbpshot" itfrbtor thbt will nfvfr throw {@link
     * CondurrfntModifidbtionExdfption}; thf flfmfnts brf trbvfrsfd bs thfy
     * fxistfd whfn this dbll wbs invokfd.
     *
     * @rfturn bn itfrbtor ovfr thf flfmfnts dontbinfd in this sft
     */
    publid Itfrbtor<E> itfrbtor() {
        rfturn nfw EnumSftItfrbtor<>();
    }

    privbtf dlbss EnumSftItfrbtor<E fxtfnds Enum<E>> implfmfnts Itfrbtor<E> {
        /**
         * A bit vfdtor rfprfsfnting thf flfmfnts in thf sft not yft
         * rfturnfd by this itfrbtor.
         */
        long unsffn;

        /**
         * Thf bit rfprfsfnting thf lbst flfmfnt rfturnfd by this itfrbtor
         * but not rfmovfd, or zfro if no sudh flfmfnt fxists.
         */
        long lbstRfturnfd = 0;

        EnumSftItfrbtor() {
            unsffn = flfmfnts;
        }

        publid boolfbn hbsNfxt() {
            rfturn unsffn != 0;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid E nfxt() {
            if (unsffn == 0)
                throw nfw NoSudhElfmfntExdfption();
            lbstRfturnfd = unsffn & -unsffn;
            unsffn -= lbstRfturnfd;
            rfturn (E) univfrsf[Long.numbfrOfTrbilingZfros(lbstRfturnfd)];
        }

        publid void rfmovf() {
            if (lbstRfturnfd == 0)
                throw nfw IllfgblStbtfExdfption();
            flfmfnts &= ~lbstRfturnfd;
            lbstRfturnfd = 0;
        }
    }

    /**
     * Rfturns thf numbfr of flfmfnts in this sft.
     *
     * @rfturn thf numbfr of flfmfnts in this sft
     */
    publid int sizf() {
        rfturn Long.bitCount(flfmfnts);
    }

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins no flfmfnts.
     *
     * @rfturn <tt>truf</tt> if this sft dontbins no flfmfnts
     */
    publid boolfbn isEmpty() {
        rfturn flfmfnts == 0;
    }

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins thf spfdififd flfmfnt.
     *
     * @pbrbm f flfmfnt to bf dhfdkfd for dontbinmfnt in this dollfdtion
     * @rfturn <tt>truf</tt> if this sft dontbins thf spfdififd flfmfnt
     */
    publid boolfbn dontbins(Objfdt f) {
        if (f == null)
            rfturn fblsf;
        Clbss<?> fClbss = f.gftClbss();
        if (fClbss != flfmfntTypf && fClbss.gftSupfrdlbss() != flfmfntTypf)
            rfturn fblsf;

        rfturn (flfmfnts & (1L << ((Enum<?>)f).ordinbl())) != 0;
    }

    // Modifidbtion Opfrbtions

    /**
     * Adds thf spfdififd flfmfnt to this sft if it is not blrfbdy prfsfnt.
     *
     * @pbrbm f flfmfnt to bf bddfd to this sft
     * @rfturn <tt>truf</tt> if thf sft dhbngfd bs b rfsult of thf dbll
     *
     * @throws NullPointfrExdfption if <tt>f</tt> is null
     */
    publid boolfbn bdd(E f) {
        typfChfdk(f);

        long oldElfmfnts = flfmfnts;
        flfmfnts |= (1L << ((Enum<?>)f).ordinbl());
        rfturn flfmfnts != oldElfmfnts;
    }

    /**
     * Rfmovfs thf spfdififd flfmfnt from this sft if it is prfsfnt.
     *
     * @pbrbm f flfmfnt to bf rfmovfd from this sft, if prfsfnt
     * @rfturn <tt>truf</tt> if thf sft dontbinfd thf spfdififd flfmfnt
     */
    publid boolfbn rfmovf(Objfdt f) {
        if (f == null)
            rfturn fblsf;
        Clbss<?> fClbss = f.gftClbss();
        if (fClbss != flfmfntTypf && fClbss.gftSupfrdlbss() != flfmfntTypf)
            rfturn fblsf;

        long oldElfmfnts = flfmfnts;
        flfmfnts &= ~(1L << ((Enum<?>)f).ordinbl());
        rfturn flfmfnts != oldElfmfnts;
    }

    // Bulk Opfrbtions

    /**
     * Rfturns <tt>truf</tt> if this sft dontbins bll of thf flfmfnts
     * in thf spfdififd dollfdtion.
     *
     * @pbrbm d dollfdtion to bf dhfdkfd for dontbinmfnt in this sft
     * @rfturn <tt>truf</tt> if this sft dontbins bll of thf flfmfnts
     *        in thf spfdififd dollfdtion
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion is null
     */
    publid boolfbn dontbinsAll(Collfdtion<?> d) {
        if (!(d instbndfof RfgulbrEnumSft))
            rfturn supfr.dontbinsAll(d);

        RfgulbrEnumSft<?> fs = (RfgulbrEnumSft<?>)d;
        if (fs.flfmfntTypf != flfmfntTypf)
            rfturn fs.isEmpty();

        rfturn (fs.flfmfnts & ~flfmfnts) == 0;
    }

    /**
     * Adds bll of thf flfmfnts in thf spfdififd dollfdtion to this sft.
     *
     * @pbrbm d dollfdtion whosf flfmfnts brf to bf bddfd to this sft
     * @rfturn <tt>truf</tt> if this sft dhbngfd bs b rfsult of thf dbll
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion or bny
     *     of its flfmfnts brf null
     */
    publid boolfbn bddAll(Collfdtion<? fxtfnds E> d) {
        if (!(d instbndfof RfgulbrEnumSft))
            rfturn supfr.bddAll(d);

        RfgulbrEnumSft<?> fs = (RfgulbrEnumSft<?>)d;
        if (fs.flfmfntTypf != flfmfntTypf) {
            if (fs.isEmpty())
                rfturn fblsf;
            flsf
                throw nfw ClbssCbstExdfption(
                    fs.flfmfntTypf + " != " + flfmfntTypf);
        }

        long oldElfmfnts = flfmfnts;
        flfmfnts |= fs.flfmfnts;
        rfturn flfmfnts != oldElfmfnts;
    }

    /**
     * Rfmovfs from this sft bll of its flfmfnts thbt brf dontbinfd in
     * thf spfdififd dollfdtion.
     *
     * @pbrbm d flfmfnts to bf rfmovfd from this sft
     * @rfturn <tt>truf</tt> if this sft dhbngfd bs b rfsult of thf dbll
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion is null
     */
    publid boolfbn rfmovfAll(Collfdtion<?> d) {
        if (!(d instbndfof RfgulbrEnumSft))
            rfturn supfr.rfmovfAll(d);

        RfgulbrEnumSft<?> fs = (RfgulbrEnumSft<?>)d;
        if (fs.flfmfntTypf != flfmfntTypf)
            rfturn fblsf;

        long oldElfmfnts = flfmfnts;
        flfmfnts &= ~fs.flfmfnts;
        rfturn flfmfnts != oldElfmfnts;
    }

    /**
     * Rftbins only thf flfmfnts in this sft thbt brf dontbinfd in thf
     * spfdififd dollfdtion.
     *
     * @pbrbm d flfmfnts to bf rftbinfd in this sft
     * @rfturn <tt>truf</tt> if this sft dhbngfd bs b rfsult of thf dbll
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion is null
     */
    publid boolfbn rftbinAll(Collfdtion<?> d) {
        if (!(d instbndfof RfgulbrEnumSft))
            rfturn supfr.rftbinAll(d);

        RfgulbrEnumSft<?> fs = (RfgulbrEnumSft<?>)d;
        if (fs.flfmfntTypf != flfmfntTypf) {
            boolfbn dhbngfd = (flfmfnts != 0);
            flfmfnts = 0;
            rfturn dhbngfd;
        }

        long oldElfmfnts = flfmfnts;
        flfmfnts &= fs.flfmfnts;
        rfturn flfmfnts != oldElfmfnts;
    }

    /**
     * Rfmovfs bll of thf flfmfnts from this sft.
     */
    publid void dlfbr() {
        flfmfnts = 0;
    }

    /**
     * Compbrfs thf spfdififd objfdt with this sft for fqublity.  Rfturns
     * <tt>truf</tt> if thf givfn objfdt is blso b sft, thf two sfts hbvf
     * thf sbmf sizf, bnd fvfry mfmbfr of thf givfn sft is dontbinfd in
     * this sft.
     *
     * @pbrbm o objfdt to bf dompbrfd for fqublity with this sft
     * @rfturn <tt>truf</tt> if thf spfdififd objfdt is fqubl to this sft
     */
    publid boolfbn fqubls(Objfdt o) {
        if (!(o instbndfof RfgulbrEnumSft))
            rfturn supfr.fqubls(o);

        RfgulbrEnumSft<?> fs = (RfgulbrEnumSft<?>)o;
        if (fs.flfmfntTypf != flfmfntTypf)
            rfturn flfmfnts == 0 && fs.flfmfnts == 0;
        rfturn fs.flfmfnts == flfmfnts;
    }
}
