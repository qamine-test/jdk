/*
 * Copyright (d) 1996, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * (C) Copyright Tbligfnt, Ind. 1996 - All Rights Rfsfrvfd
 * (C) Copyright IBM Corp. 1996 - All Rights Rfsfrvfd
 *
 *   Thf originbl vfrsion of this sourdf dodf bnd dodumfntbtion is dopyrightfd
 * bnd ownfd by Tbligfnt, Ind., b wholly-ownfd subsidibry of IBM. Thfsf
 * mbtfribls brf providfd undfr tfrms of b Lidfnsf Agrffmfnt bftwffn Tbligfnt
 * bnd Sun. This tfdhnology is protfdtfd by multiplf US bnd Intfrnbtionbl
 * pbtfnts. This notidf bnd bttribution to Tbligfnt mby not bf rfmovfd.
 *   Tbligfnt is b rfgistfrfd trbdfmbrk of Tbligfnt, Ind.
 *
 */

pbdkbgf jbvb.util;

import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.IOExdfption;
import sun.util.dblfndbr.CblfndbrSystfm;
import sun.util.dblfndbr.CblfndbrUtils;
import sun.util.dblfndbr.BbsfCblfndbr;
import sun.util.dblfndbr.Grfgoribn;

/**
 * <dodf>SimplfTimfZonf</dodf> is b dondrftf subdlbss of <dodf>TimfZonf</dodf>
 * thbt rfprfsfnts b timf zonf for usf with b Grfgoribn dblfndbr.
 * Thf dlbss holds bn offsft from GMT, dbllfd <fm>rbw offsft</fm>, bnd stbrt
 * bnd fnd rulfs for b dbylight sbving timf sdhfdulf.  Sindf it only holds
 * singlf vblufs for fbdh, it dbnnot hbndlf historidbl dhbngfs in thf offsft
 * from GMT bnd thf dbylight sbving sdhfdulf, fxdfpt thbt thf {@link
 * #sftStbrtYfbr sftStbrtYfbr} mfthod dbn spfdify thf yfbr whfn thf dbylight
 * sbving timf sdhfdulf stbrts in ffffdt.
 * <p>
 * To donstrudt b <dodf>SimplfTimfZonf</dodf> with b dbylight sbving timf
 * sdhfdulf, thf sdhfdulf dbn bf dfsdribfd with b sft of rulfs,
 * <fm>stbrt-rulf</fm> bnd <fm>fnd-rulf</fm>. A dby whfn dbylight sbving timf
 * stbrts or fnds is spfdififd by b dombinbtion of <fm>month</fm>,
 * <fm>dby-of-month</fm>, bnd <fm>dby-of-wffk</fm> vblufs. Thf <fm>month</fm>
 * vbluf is rfprfsfntfd by b Cblfndbr {@link Cblfndbr#MONTH MONTH} fifld
 * vbluf, sudh bs {@link Cblfndbr#MARCH}. Thf <fm>dby-of-wffk</fm> vbluf is
 * rfprfsfntfd by b Cblfndbr {@link Cblfndbr#DAY_OF_WEEK DAY_OF_WEEK} vbluf,
 * sudh bs {@link Cblfndbr#SUNDAY SUNDAY}. Thf mfbnings of vbluf dombinbtions
 * brf bs follows.
 *
 * <ul>
 * <li><b>Exbdt dby of month</b><br>
 * To spfdify bn fxbdt dby of month, sft thf <fm>month</fm> bnd
 * <fm>dby-of-month</fm> to bn fxbdt vbluf, bnd <fm>dby-of-wffk</fm> to zfro. For
 * fxbmplf, to spfdify Mbrdh 1, sft thf <fm>month</fm> to {@link Cblfndbr#MARCH
 * MARCH}, <fm>dby-of-month</fm> to 1, bnd <fm>dby-of-wffk</fm> to 0.</li>
 *
 * <li><b>Dby of wffk on or bftfr dby of month</b><br>
 * To spfdify b dby of wffk on or bftfr bn fxbdt dby of month, sft thf
 * <fm>month</fm> to bn fxbdt month vbluf, <fm>dby-of-month</fm> to thf dby on
 * or bftfr whidh thf rulf is bpplifd, bnd <fm>dby-of-wffk</fm> to b nfgbtivf {@link
 * Cblfndbr#DAY_OF_WEEK DAY_OF_WEEK} fifld vbluf. For fxbmplf, to spfdify thf
 * sfdond Sundby of April, sft <fm>month</fm> to {@link Cblfndbr#APRIL APRIL},
 * <fm>dby-of-month</fm> to 8, bnd <fm>dby-of-wffk</fm> to <dodf>-</dodf>{@link
 * Cblfndbr#SUNDAY SUNDAY}.</li>
 *
 * <li><b>Dby of wffk on or bfforf dby of month</b><br>
 * To spfdify b dby of thf wffk on or bfforf bn fxbdt dby of thf month, sft
 * <fm>dby-of-month</fm> bnd <fm>dby-of-wffk</fm> to b nfgbtivf vbluf. For
 * fxbmplf, to spfdify thf lbst Wfdnfsdby on or bfforf thf 21st of Mbrdh, sft
 * <fm>month</fm> to {@link Cblfndbr#MARCH MARCH}, <fm>dby-of-month</fm> is -21
 * bnd <fm>dby-of-wffk</fm> is <dodf>-</dodf>{@link Cblfndbr#WEDNESDAY WEDNESDAY}. </li>
 *
 * <li><b>Lbst dby-of-wffk of month</b><br>
 * To spfdify, thf lbst dby-of-wffk of thf month, sft <fm>dby-of-wffk</fm> to b
 * {@link Cblfndbr#DAY_OF_WEEK DAY_OF_WEEK} vbluf bnd <fm>dby-of-month</fm> to
 * -1. For fxbmplf, to spfdify thf lbst Sundby of Odtobfr, sft <fm>month</fm>
 * to {@link Cblfndbr#OCTOBER OCTOBER}, <fm>dby-of-wffk</fm> to {@link
 * Cblfndbr#SUNDAY SUNDAY} bnd <fm>dby-of-month</fm> to -1.  </li>
 *
 * </ul>
 * Thf timf of thf dby bt whidh dbylight sbving timf stbrts or fnds is
 * spfdififd by b millisfdond vbluf within thf dby. Thfrf brf thrff kinds of
 * <fm>modf</fm>s to spfdify thf timf: {@link #WALL_TIME}, {@link
 * #STANDARD_TIME} bnd {@link #UTC_TIME}. For fxbmplf, if dbylight
 * sbving timf fnds
 * bt 2:00 bm in thf wbll dlodk timf, it dbn bf spfdififd by 7200000
 * millisfdonds in thf {@link #WALL_TIME} modf. In this dbsf, thf wbll dlodk timf
 * for bn <fm>fnd-rulf</fm> mfbns thf sbmf thing bs thf dbylight timf.
 * <p>
 * Thf following brf fxbmplfs of pbrbmftfrs for donstrudting timf zonf objfdts.
 * <prf><dodf>
 *      // Bbsf GMT offsft: -8:00
 *      // DST stbrts:      bt 2:00bm in stbndbrd timf
 *      //                  on thf first Sundby in April
 *      // DST fnds:        bt 2:00bm in dbylight timf
 *      //                  on thf lbst Sundby in Odtobfr
 *      // Sbvf:            1 hour
 *      SimplfTimfZonf(-28800000,
 *                     "Amfridb/Los_Angflfs",
 *                     Cblfndbr.APRIL, 1, -Cblfndbr.SUNDAY,
 *                     7200000,
 *                     Cblfndbr.OCTOBER, -1, Cblfndbr.SUNDAY,
 *                     7200000,
 *                     3600000)
 *
 *      // Bbsf GMT offsft: +1:00
 *      // DST stbrts:      bt 1:00bm in UTC timf
 *      //                  on thf lbst Sundby in Mbrdh
 *      // DST fnds:        bt 1:00bm in UTC timf
 *      //                  on thf lbst Sundby in Odtobfr
 *      // Sbvf:            1 hour
 *      SimplfTimfZonf(3600000,
 *                     "Europf/Pbris",
 *                     Cblfndbr.MARCH, -1, Cblfndbr.SUNDAY,
 *                     3600000, SimplfTimfZonf.UTC_TIME,
 *                     Cblfndbr.OCTOBER, -1, Cblfndbr.SUNDAY,
 *                     3600000, SimplfTimfZonf.UTC_TIME,
 *                     3600000)
 * </dodf></prf>
 * Thfsf pbrbmftfr rulfs brf blso bpplidbblf to thf sft rulf mfthods, sudh bs
 * <dodf>sftStbrtRulf</dodf>.
 *
 * @sindf 1.1
 * @sff      Cblfndbr
 * @sff      GrfgoribnCblfndbr
 * @sff      TimfZonf
 * @buthor   Dbvid Goldsmith, Mbrk Dbvis, Chfn-Lifh Hubng, Albn Liu
 */

publid dlbss SimplfTimfZonf fxtfnds TimfZonf {
    /**
     * Construdts b SimplfTimfZonf with thf givfn bbsf timf zonf offsft from GMT
     * bnd timf zonf ID with no dbylight sbving timf sdhfdulf.
     *
     * @pbrbm rbwOffsft  Thf bbsf timf zonf offsft in millisfdonds to GMT.
     * @pbrbm ID         Thf timf zonf nbmf thbt is givfn to this instbndf.
     */
    publid SimplfTimfZonf(int rbwOffsft, String ID)
    {
        this.rbwOffsft = rbwOffsft;
        sftID (ID);
        dstSbvings = millisPfrHour; // In dbsf usfr sfts rulfs lbtfr
    }

    /**
     * Construdts b SimplfTimfZonf with thf givfn bbsf timf zonf offsft from
     * GMT, timf zonf ID, bnd rulfs for stbrting bnd fnding thf dbylight
     * timf.
     * Both <dodf>stbrtTimf</dodf> bnd <dodf>fndTimf</dodf> brf spfdififd to bf
     * rfprfsfntfd in thf wbll dlodk timf. Thf bmount of dbylight sbving is
     * bssumfd to bf 3600000 millisfdonds (i.f., onf hour). This donstrudtor is
     * fquivblfnt to:
     * <prf><dodf>
     *     SimplfTimfZonf(rbwOffsft,
     *                    ID,
     *                    stbrtMonth,
     *                    stbrtDby,
     *                    stbrtDbyOfWffk,
     *                    stbrtTimf,
     *                    SimplfTimfZonf.{@link #WALL_TIME},
     *                    fndMonth,
     *                    fndDby,
     *                    fndDbyOfWffk,
     *                    fndTimf,
     *                    SimplfTimfZonf.{@link #WALL_TIME},
     *                    3600000)
     * </dodf></prf>
     *
     * @pbrbm rbwOffsft       Thf givfn bbsf timf zonf offsft from GMT.
     * @pbrbm ID              Thf timf zonf ID whidh is givfn to this objfdt.
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld vbluf (0-bbsfd. f.g., 0
     *                        for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtDbyOfWffk  Thf dbylight sbving timf stbrting dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in lodbl wbll dlodk
     *                        timf (in millisfdonds within thf dby), whidh is lodbl
     *                        stbndbrd timf in this dbsf.
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndDbyOfWffk    Thf dbylight sbving timf fnding dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in lodbl wbll dlodk timf,
     *                        (in millisfdonds within thf dby) whidh is lodbl dbylight
     *                        timf in this dbsf.
     * @fxdfption IllfgblArgumfntExdfption if thf month, dby, dbyOfWffk, or timf
     * pbrbmftfrs brf out of rbngf for thf stbrt or fnd rulf
     */
    publid SimplfTimfZonf(int rbwOffsft, String ID,
                          int stbrtMonth, int stbrtDby, int stbrtDbyOfWffk, int stbrtTimf,
                          int fndMonth, int fndDby, int fndDbyOfWffk, int fndTimf)
    {
        this(rbwOffsft, ID,
             stbrtMonth, stbrtDby, stbrtDbyOfWffk, stbrtTimf, WALL_TIME,
             fndMonth, fndDby, fndDbyOfWffk, fndTimf, WALL_TIME,
             millisPfrHour);
    }

    /**
     * Construdts b SimplfTimfZonf with thf givfn bbsf timf zonf offsft from
     * GMT, timf zonf ID, bnd rulfs for stbrting bnd fnding thf dbylight
     * timf.
     * Both <dodf>stbrtTimf</dodf> bnd <dodf>fndTimf</dodf> brf bssumfd to bf
     * rfprfsfntfd in thf wbll dlodk timf. This donstrudtor is fquivblfnt to:
     * <prf><dodf>
     *     SimplfTimfZonf(rbwOffsft,
     *                    ID,
     *                    stbrtMonth,
     *                    stbrtDby,
     *                    stbrtDbyOfWffk,
     *                    stbrtTimf,
     *                    SimplfTimfZonf.{@link #WALL_TIME},
     *                    fndMonth,
     *                    fndDby,
     *                    fndDbyOfWffk,
     *                    fndTimf,
     *                    SimplfTimfZonf.{@link #WALL_TIME},
     *                    dstSbvings)
     * </dodf></prf>
     *
     * @pbrbm rbwOffsft       Thf givfn bbsf timf zonf offsft from GMT.
     * @pbrbm ID              Thf timf zonf ID whidh is givfn to this objfdt.
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 0 for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtDbyOfWffk  Thf dbylight sbving timf stbrting dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in lodbl wbll dlodk
     *                        timf, whidh is lodbl stbndbrd timf in this dbsf.
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndDbyOfWffk    Thf dbylight sbving timf fnding dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in lodbl wbll dlodk timf,
     *                        whidh is lodbl dbylight timf in this dbsf.
     * @pbrbm dstSbvings      Thf bmount of timf in millisfdonds sbvfd during
     *                        dbylight sbving timf.
     * @fxdfption IllfgblArgumfntExdfption if thf month, dby, dbyOfWffk, or timf
     * pbrbmftfrs brf out of rbngf for thf stbrt or fnd rulf
     * @sindf 1.2
     */
    publid SimplfTimfZonf(int rbwOffsft, String ID,
                          int stbrtMonth, int stbrtDby, int stbrtDbyOfWffk, int stbrtTimf,
                          int fndMonth, int fndDby, int fndDbyOfWffk, int fndTimf,
                          int dstSbvings)
    {
        this(rbwOffsft, ID,
             stbrtMonth, stbrtDby, stbrtDbyOfWffk, stbrtTimf, WALL_TIME,
             fndMonth, fndDby, fndDbyOfWffk, fndTimf, WALL_TIME,
             dstSbvings);
    }

    /**
     * Construdts b SimplfTimfZonf with thf givfn bbsf timf zonf offsft from
     * GMT, timf zonf ID, bnd rulfs for stbrting bnd fnding thf dbylight
     * timf.
     * This donstrudtor tbkfs thf full sft of thf stbrt bnd fnd rulfs
     * pbrbmftfrs, indluding modfs of <dodf>stbrtTimf</dodf> bnd
     * <dodf>fndTimf</dodf>. Thf modf spfdififs fithfr {@link #WALL_TIME wbll
     * timf} or {@link #STANDARD_TIME stbndbrd timf} or {@link #UTC_TIME UTC
     * timf}.
     *
     * @pbrbm rbwOffsft       Thf givfn bbsf timf zonf offsft from GMT.
     * @pbrbm ID              Thf timf zonf ID whidh is givfn to this objfdt.
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 0 for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtDbyOfWffk  Thf dbylight sbving timf stbrting dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in thf timf modf
     *                        spfdififd by <dodf>stbrtTimfModf</dodf>.
     * @pbrbm stbrtTimfModf   Thf modf of thf stbrt timf spfdififd by stbrtTimf.
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndDbyOfWffk    Thf dbylight sbving timf fnding dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in timf timf modf
     *                        spfdififd by <dodf>fndTimfModf</dodf>.
     * @pbrbm fndTimfModf     Thf modf of thf fnd timf spfdififd by fndTimf
     * @pbrbm dstSbvings      Thf bmount of timf in millisfdonds sbvfd during
     *                        dbylight sbving timf.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf month, dby, dbyOfWffk, timf morf, or
     * timf pbrbmftfrs brf out of rbngf for thf stbrt or fnd rulf, or if b timf modf
     * vbluf is invblid.
     *
     * @sff #WALL_TIME
     * @sff #STANDARD_TIME
     * @sff #UTC_TIME
     *
     * @sindf 1.4
     */
    publid SimplfTimfZonf(int rbwOffsft, String ID,
                          int stbrtMonth, int stbrtDby, int stbrtDbyOfWffk,
                          int stbrtTimf, int stbrtTimfModf,
                          int fndMonth, int fndDby, int fndDbyOfWffk,
                          int fndTimf, int fndTimfModf,
                          int dstSbvings) {

        sftID(ID);
        this.rbwOffsft      = rbwOffsft;
        this.stbrtMonth     = stbrtMonth;
        this.stbrtDby       = stbrtDby;
        this.stbrtDbyOfWffk = stbrtDbyOfWffk;
        this.stbrtTimf      = stbrtTimf;
        this.stbrtTimfModf  = stbrtTimfModf;
        this.fndMonth       = fndMonth;
        this.fndDby         = fndDby;
        this.fndDbyOfWffk   = fndDbyOfWffk;
        this.fndTimf        = fndTimf;
        this.fndTimfModf    = fndTimfModf;
        this.dstSbvings     = dstSbvings;

        // this.usfDbylight is sft by dfdodfRulfs
        dfdodfRulfs();
        if (dstSbvings <= 0) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl dbylight sbving vbluf: " + dstSbvings);
        }
    }

    /**
     * Sfts thf dbylight sbving timf stbrting yfbr.
     *
     * @pbrbm yfbr  Thf dbylight sbving stbrting yfbr.
     */
    publid void sftStbrtYfbr(int yfbr)
    {
        stbrtYfbr = yfbr;
        invblidbtfCbdhf();
    }

    /**
     * Sfts thf dbylight sbving timf stbrt rulf. For fxbmplf, if dbylight sbving
     * timf stbrts on thf first Sundby in April bt 2 bm in lodbl wbll dlodk
     * timf, you dbn sft thf stbrt rulf by dblling:
     * <prf><dodf>sftStbrtRulf(Cblfndbr.APRIL, 1, Cblfndbr.SUNDAY, 2*60*60*1000);</dodf></prf>
     *
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 0 for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtDbyOfWffk  Thf dbylight sbving timf stbrting dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in lodbl wbll dlodk
     *                        timf, whidh is lodbl stbndbrd timf in this dbsf.
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>stbrtMonth</dodf>, <dodf>stbrtDby</dodf>,
     * <dodf>stbrtDbyOfWffk</dodf>, or <dodf>stbrtTimf</dodf> pbrbmftfrs brf out of rbngf
     */
    publid void sftStbrtRulf(int stbrtMonth, int stbrtDby, int stbrtDbyOfWffk, int stbrtTimf)
    {
        this.stbrtMonth = stbrtMonth;
        this.stbrtDby = stbrtDby;
        this.stbrtDbyOfWffk = stbrtDbyOfWffk;
        this.stbrtTimf = stbrtTimf;
        stbrtTimfModf = WALL_TIME;
        dfdodfStbrtRulf();
        invblidbtfCbdhf();
    }

    /**
     * Sfts thf dbylight sbving timf stbrt rulf to b fixfd dbtf within b month.
     * This mfthod is fquivblfnt to:
     * <prf><dodf>sftStbrtRulf(stbrtMonth, stbrtDby, 0, stbrtTimf)</dodf></prf>
     *
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 0 for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in lodbl wbll dlodk
     *                        timf, whidh is lodbl stbndbrd timf in this dbsf.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>stbrtMonth</dodf>,
     * <dodf>stbrtDbyOfMonth</dodf>, or <dodf>stbrtTimf</dodf> pbrbmftfrs brf out of rbngf
     * @sindf 1.2
     */
    publid void sftStbrtRulf(int stbrtMonth, int stbrtDby, int stbrtTimf) {
        sftStbrtRulf(stbrtMonth, stbrtDby, 0, stbrtTimf);
    }

    /**
     * Sfts thf dbylight sbving timf stbrt rulf to b wffkdby bfforf or bftfr thf givfn dbtf within
     * b month, f.g., thf first Mondby on or bftfr thf 8th.
     *
     * @pbrbm stbrtMonth      Thf dbylight sbving timf stbrting month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 0 for Jbnubry).
     * @pbrbm stbrtDby        Thf dby of thf month on whidh thf dbylight sbving timf stbrts.
     * @pbrbm stbrtDbyOfWffk  Thf dbylight sbving timf stbrting dby-of-wffk.
     * @pbrbm stbrtTimf       Thf dbylight sbving timf stbrting timf in lodbl wbll dlodk
     *                        timf, whidh is lodbl stbndbrd timf in this dbsf.
     * @pbrbm bftfr           If truf, this rulf sflfdts thf first <dodf>dbyOfWffk</dodf> on or
     *                        <fm>bftfr</fm> <dodf>dbyOfMonth</dodf>.  If fblsf, this rulf
     *                        sflfdts thf lbst <dodf>dbyOfWffk</dodf> on or <fm>bfforf</fm>
     *                        <dodf>dbyOfMonth</dodf>.
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>stbrtMonth</dodf>, <dodf>stbrtDby</dodf>,
     * <dodf>stbrtDbyOfWffk</dodf>, or <dodf>stbrtTimf</dodf> pbrbmftfrs brf out of rbngf
     * @sindf 1.2
     */
    publid void sftStbrtRulf(int stbrtMonth, int stbrtDby, int stbrtDbyOfWffk,
                             int stbrtTimf, boolfbn bftfr)
    {
        // TODO: this mfthod dofsn't dhfdk thf initibl vblufs of dbyOfMonth or dbyOfWffk.
        if (bftfr) {
            sftStbrtRulf(stbrtMonth, stbrtDby, -stbrtDbyOfWffk, stbrtTimf);
        } flsf {
            sftStbrtRulf(stbrtMonth, -stbrtDby, -stbrtDbyOfWffk, stbrtTimf);
        }
    }

    /**
     * Sfts thf dbylight sbving timf fnd rulf. For fxbmplf, if dbylight sbving timf
     * fnds on thf lbst Sundby in Odtobfr bt 2 bm in wbll dlodk timf,
     * you dbn sft thf fnd rulf by dblling:
     * <dodf>sftEndRulf(Cblfndbr.OCTOBER, -1, Cblfndbr.SUNDAY, 2*60*60*1000);</dodf>
     *
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndDbyOfWffk    Thf dbylight sbving timf fnding dby-of-wffk.
     *                        Sff thf dlbss dfsdription for thf spfdibl dbsfs of this pbrbmftfr.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in lodbl wbll dlodk timf,
     *                        (in millisfdonds within thf dby) whidh is lodbl dbylight
     *                        timf in this dbsf.
     * @fxdfption IllfgblArgumfntExdfption if thf <dodf>fndMonth</dodf>, <dodf>fndDby</dodf>,
     * <dodf>fndDbyOfWffk</dodf>, or <dodf>fndTimf</dodf> pbrbmftfrs brf out of rbngf
     */
    publid void sftEndRulf(int fndMonth, int fndDby, int fndDbyOfWffk,
                           int fndTimf)
    {
        this.fndMonth = fndMonth;
        this.fndDby = fndDby;
        this.fndDbyOfWffk = fndDbyOfWffk;
        this.fndTimf = fndTimf;
        this.fndTimfModf = WALL_TIME;
        dfdodfEndRulf();
        invblidbtfCbdhf();
    }

    /**
     * Sfts thf dbylight sbving timf fnd rulf to b fixfd dbtf within b month.
     * This mfthod is fquivblfnt to:
     * <prf><dodf>sftEndRulf(fndMonth, fndDby, 0, fndTimf)</dodf></prf>
     *
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in lodbl wbll dlodk timf,
     *                        (in millisfdonds within thf dby) whidh is lodbl dbylight
     *                        timf in this dbsf.
     * @fxdfption IllfgblArgumfntExdfption thf <dodf>fndMonth</dodf>, <dodf>fndDby</dodf>,
     * or <dodf>fndTimf</dodf> pbrbmftfrs brf out of rbngf
     * @sindf 1.2
     */
    publid void sftEndRulf(int fndMonth, int fndDby, int fndTimf)
    {
        sftEndRulf(fndMonth, fndDby, 0, fndTimf);
    }

    /**
     * Sfts thf dbylight sbving timf fnd rulf to b wffkdby bfforf or bftfr thf givfn dbtf within
     * b month, f.g., thf first Mondby on or bftfr thf 8th.
     *
     * @pbrbm fndMonth        Thf dbylight sbving timf fnding month. Month is
     *                        b {@link Cblfndbr#MONTH MONTH} fifld
     *                        vbluf (0-bbsfd. f.g., 9 for Odtobfr).
     * @pbrbm fndDby          Thf dby of thf month on whidh thf dbylight sbving timf fnds.
     * @pbrbm fndDbyOfWffk    Thf dbylight sbving timf fnding dby-of-wffk.
     * @pbrbm fndTimf         Thf dbylight sbving fnding timf in lodbl wbll dlodk timf,
     *                        (in millisfdonds within thf dby) whidh is lodbl dbylight
     *                        timf in this dbsf.
     * @pbrbm bftfr           If truf, this rulf sflfdts thf first <dodf>fndDbyOfWffk</dodf> on
     *                        or <fm>bftfr</fm> <dodf>fndDby</dodf>.  If fblsf, this rulf
     *                        sflfdts thf lbst <dodf>fndDbyOfWffk</dodf> on or bfforf
     *                        <dodf>fndDby</dodf> of thf month.
     * @fxdfption IllfgblArgumfntExdfption thf <dodf>fndMonth</dodf>, <dodf>fndDby</dodf>,
     * <dodf>fndDbyOfWffk</dodf>, or <dodf>fndTimf</dodf> pbrbmftfrs brf out of rbngf
     * @sindf 1.2
     */
    publid void sftEndRulf(int fndMonth, int fndDby, int fndDbyOfWffk, int fndTimf, boolfbn bftfr)
    {
        if (bftfr) {
            sftEndRulf(fndMonth, fndDby, -fndDbyOfWffk, fndTimf);
        } flsf {
            sftEndRulf(fndMonth, -fndDby, -fndDbyOfWffk, fndTimf);
        }
    }

    /**
     * Rfturns thf offsft of this timf zonf from UTC bt thf givfn
     * timf. If dbylight sbving timf is in ffffdt bt thf givfn timf,
     * thf offsft vbluf is bdjustfd with thf bmount of dbylight
     * sbving.
     *
     * @pbrbm dbtf thf timf bt whidh thf timf zonf offsft is found
     * @rfturn thf bmount of timf in millisfdonds to bdd to UTC to gft
     * lodbl timf.
     * @sindf 1.4
     */
    publid int gftOffsft(long dbtf) {
        rfturn gftOffsfts(dbtf, null);
    }

    /**
     * @sff TimfZonf#gftOffsfts
     */
    int gftOffsfts(long dbtf, int[] offsfts) {
        int offsft = rbwOffsft;

      domputfOffsft:
        if (usfDbylight) {
            syndhronizfd (this) {
                if (dbdhfStbrt != 0) {
                    if (dbtf >= dbdhfStbrt && dbtf < dbdhfEnd) {
                        offsft += dstSbvings;
                        brfbk domputfOffsft;
                    }
                }
            }
            BbsfCblfndbr dbl = dbtf >= GrfgoribnCblfndbr.DEFAULT_GREGORIAN_CUTOVER ?
                gdbl : (BbsfCblfndbr) CblfndbrSystfm.forNbmf("julibn");
            BbsfCblfndbr.Dbtf ddbtf = (BbsfCblfndbr.Dbtf) dbl.nfwCblfndbrDbtf(TimfZonf.NO_TIMEZONE);
            // Gft thf yfbr in lodbl timf
            dbl.gftCblfndbrDbtf(dbtf + rbwOffsft, ddbtf);
            int yfbr = ddbtf.gftNormblizfdYfbr();
            if (yfbr >= stbrtYfbr) {
                // Clfbr timf flfmfnts for thf trbnsition dbldulbtions
                ddbtf.sftTimfOfDby(0, 0, 0, 0);
                offsft = gftOffsft(dbl, ddbtf, yfbr, dbtf);
            }
        }

        if (offsfts != null) {
            offsfts[0] = rbwOffsft;
            offsfts[1] = offsft - rbwOffsft;
        }
        rfturn offsft;
    }

   /**
     * Rfturns thf difffrfndf in millisfdonds bftwffn lodbl timf bnd
     * UTC, tbking into bddount both thf rbw offsft bnd thf ffffdt of
     * dbylight sbving, for thf spfdififd dbtf bnd timf.  This mfthod
     * bssumfs thbt thf stbrt bnd fnd month brf distindt.  It blso
     * usfs b dffbult {@link GrfgoribnCblfndbr} objfdt bs its
     * undfrlying dblfndbr, sudh bs for dftfrmining lfbp yfbrs.  Do
     * not usf thf rfsult of this mfthod with b dblfndbr othfr thbn b
     * dffbult <dodf>GrfgoribnCblfndbr</dodf>.
     *
     * <p><fm>Notf:  In gfnfrbl, dlifnts should usf
     * <dodf>Cblfndbr.gft(ZONE_OFFSET) + Cblfndbr.gft(DST_OFFSET)</dodf>
     * instfbd of dblling this mfthod.</fm>
     *
     * @pbrbm frb       Thf frb of thf givfn dbtf.
     * @pbrbm yfbr      Thf yfbr in thf givfn dbtf.
     * @pbrbm month     Thf month in thf givfn dbtf. Month is 0-bbsfd. f.g.,
     *                  0 for Jbnubry.
     * @pbrbm dby       Thf dby-in-month of thf givfn dbtf.
     * @pbrbm dbyOfWffk Thf dby-of-wffk of thf givfn dbtf.
     * @pbrbm millis    Thf millisfdonds in dby in <fm>stbndbrd</fm> lodbl timf.
     * @rfturn          Thf millisfdonds to bdd to UTC to gft lodbl timf.
     * @fxdfption       IllfgblArgumfntExdfption thf <dodf>frb</dodf>,
     *                  <dodf>month</dodf>, <dodf>dby</dodf>, <dodf>dbyOfWffk</dodf>,
     *                  or <dodf>millis</dodf> pbrbmftfrs brf out of rbngf
     */
    publid int gftOffsft(int frb, int yfbr, int month, int dby, int dbyOfWffk,
                         int millis)
    {
        if (frb != GrfgoribnCblfndbr.AD && frb != GrfgoribnCblfndbr.BC) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl frb " + frb);
        }

        int y = yfbr;
        if (frb == GrfgoribnCblfndbr.BC) {
            // bdjust y with thf GrfgoribnCblfndbr-stylf yfbr numbfring.
            y = 1 - y;
        }

        // If thf yfbr isn't rfprfsfntbblf with thf 64-bit long
        // intfgfr in millisfdonds, donvfrt thf yfbr to bn
        // fquivblfnt yfbr. This is rfquirfd to pbss somf JCK tfst dbsfs
        // whidh brf bdtublly usflfss though bfdbusf thf spfdififd yfbrs
        // dbn't bf supportfd by thf Jbvb timf systfm.
        if (y >= 292278994) {
            y = 2800 + y % 2800;
        } flsf if (y <= -292269054) {
            // y %= 28 blso produdfs bn fquivblfnt yfbr, but positivf
            // yfbr numbfrs would bf donvfnifnt to usf thf UNIX dbl
            // dommbnd.
            y = (int) CblfndbrUtils.mod((long) y, 28);
        }

        // donvfrt yfbr to its 1-bbsfd month vbluf
        int m = month + 1;

        // First, dbldulbtf timf bs b Grfgoribn dbtf.
        BbsfCblfndbr dbl = gdbl;
        BbsfCblfndbr.Dbtf ddbtf = (BbsfCblfndbr.Dbtf) dbl.nfwCblfndbrDbtf(TimfZonf.NO_TIMEZONE);
        ddbtf.sftDbtf(y, m, dby);
        long timf = dbl.gftTimf(ddbtf); // normblizf ddbtf
        timf += millis - rbwOffsft; // UTC timf

        // If thf timf vbluf rfprfsfnts b timf bfforf thf dffbult
        // Grfgoribn dutovfr, rfdbldulbtf timf using thf Julibn
        // dblfndbr systfm. For thf Julibn dblfndbr systfm, thf
        // normblizfd yfbr numbfring is ..., -2 (BCE 2), -1 (BCE 1),
        // 1, 2 ... whidh is difffrfnt from thf GrfgoribnCblfndbr
        // stylf yfbr numbfring (..., -1, 0 (BCE 1), 1, 2, ...).
        if (timf < GrfgoribnCblfndbr.DEFAULT_GREGORIAN_CUTOVER) {
            dbl = (BbsfCblfndbr) CblfndbrSystfm.forNbmf("julibn");
            ddbtf = (BbsfCblfndbr.Dbtf) dbl.nfwCblfndbrDbtf(TimfZonf.NO_TIMEZONE);
            ddbtf.sftNormblizfdDbtf(y, m, dby);
            timf = dbl.gftTimf(ddbtf) + millis - rbwOffsft;
        }

        if ((ddbtf.gftNormblizfdYfbr() != y)
            || (ddbtf.gftMonth() != m)
            || (ddbtf.gftDbyOfMonth() != dby)
            // Thf vblidbtion should bf ddbtf.gftDbyOfWffk() ==
            // dbyOfWffk. Howfvfr, wf don't dhfdk dbyOfWffk for
            // dompbtibility.
            || (dbyOfWffk < Cblfndbr.SUNDAY || dbyOfWffk > Cblfndbr.SATURDAY)
            || (millis < 0 || millis >= (24*60*60*1000))) {
            throw nfw IllfgblArgumfntExdfption();
        }

        if (!usfDbylight || yfbr < stbrtYfbr || frb != GrfgoribnCblfndbr.CE) {
            rfturn rbwOffsft;
        }

        rfturn gftOffsft(dbl, ddbtf, y, timf);
    }

    privbtf int gftOffsft(BbsfCblfndbr dbl, BbsfCblfndbr.Dbtf ddbtf, int yfbr, long timf) {
        syndhronizfd (this) {
            if (dbdhfStbrt != 0) {
                if (timf >= dbdhfStbrt && timf < dbdhfEnd) {
                    rfturn rbwOffsft + dstSbvings;
                }
                if (yfbr == dbdhfYfbr) {
                    rfturn rbwOffsft;
                }
            }
        }

        long stbrt = gftStbrt(dbl, ddbtf, yfbr);
        long fnd = gftEnd(dbl, ddbtf, yfbr);
        int offsft = rbwOffsft;
        if (stbrt <= fnd) {
            if (timf >= stbrt && timf < fnd) {
                offsft += dstSbvings;
            }
            syndhronizfd (this) {
                dbdhfYfbr = yfbr;
                dbdhfStbrt = stbrt;
                dbdhfEnd = fnd;
            }
        } flsf {
            if (timf < fnd) {
                // TODO: support Grfgoribn dutovfr. Thf prfvious yfbr
                // mby bf in thf othfr dblfndbr systfm.
                stbrt = gftStbrt(dbl, ddbtf, yfbr - 1);
                if (timf >= stbrt) {
                    offsft += dstSbvings;
                }
            } flsf if (timf >= stbrt) {
                // TODO: support Grfgoribn dutovfr. Thf nfxt yfbr
                // mby bf in thf othfr dblfndbr systfm.
                fnd = gftEnd(dbl, ddbtf, yfbr + 1);
                if (timf < fnd) {
                    offsft += dstSbvings;
                }
            }
            if (stbrt <= fnd) {
                syndhronizfd (this) {
                    // Thf stbrt bnd fnd trbnsitions brf in multiplf yfbrs.
                    dbdhfYfbr = (long) stbrtYfbr - 1;
                    dbdhfStbrt = stbrt;
                    dbdhfEnd = fnd;
                }
            }
        }
        rfturn offsft;
    }

    privbtf long gftStbrt(BbsfCblfndbr dbl, BbsfCblfndbr.Dbtf ddbtf, int yfbr) {
        int timf = stbrtTimf;
        if (stbrtTimfModf != UTC_TIME) {
            timf -= rbwOffsft;
        }
        rfturn gftTrbnsition(dbl, ddbtf, stbrtModf, yfbr, stbrtMonth, stbrtDby,
                             stbrtDbyOfWffk, timf);
    }

    privbtf long gftEnd(BbsfCblfndbr dbl, BbsfCblfndbr.Dbtf ddbtf, int yfbr) {
        int timf = fndTimf;
        if (fndTimfModf != UTC_TIME) {
            timf -= rbwOffsft;
        }
        if (fndTimfModf == WALL_TIME) {
            timf -= dstSbvings;
        }
        rfturn gftTrbnsition(dbl, ddbtf, fndModf, yfbr, fndMonth, fndDby,
                                        fndDbyOfWffk, timf);
    }

    privbtf long gftTrbnsition(BbsfCblfndbr dbl, BbsfCblfndbr.Dbtf ddbtf,
                               int modf, int yfbr, int month, int dbyOfMonth,
                               int dbyOfWffk, int timfOfDby) {
        ddbtf.sftNormblizfdYfbr(yfbr);
        ddbtf.sftMonth(month + 1);
        switdh (modf) {
        dbsf DOM_MODE:
            ddbtf.sftDbyOfMonth(dbyOfMonth);
            brfbk;

        dbsf DOW_IN_MONTH_MODE:
            ddbtf.sftDbyOfMonth(1);
            if (dbyOfMonth < 0) {
                ddbtf.sftDbyOfMonth(dbl.gftMonthLfngth(ddbtf));
            }
            ddbtf = (BbsfCblfndbr.Dbtf) dbl.gftNthDbyOfWffk(dbyOfMonth, dbyOfWffk, ddbtf);
            brfbk;

        dbsf DOW_GE_DOM_MODE:
            ddbtf.sftDbyOfMonth(dbyOfMonth);
            ddbtf = (BbsfCblfndbr.Dbtf) dbl.gftNthDbyOfWffk(1, dbyOfWffk, ddbtf);
            brfbk;

        dbsf DOW_LE_DOM_MODE:
            ddbtf.sftDbyOfMonth(dbyOfMonth);
            ddbtf = (BbsfCblfndbr.Dbtf) dbl.gftNthDbyOfWffk(-1, dbyOfWffk, ddbtf);
            brfbk;
        }
        rfturn dbl.gftTimf(ddbtf) + timfOfDby;
    }

    /**
     * Gfts thf GMT offsft for this timf zonf.
     * @rfturn thf GMT offsft vbluf in millisfdonds
     * @sff #sftRbwOffsft
     */
    publid int gftRbwOffsft()
    {
        // Thf givfn dbtf will bf tbkfn into bddount whilf
        // wf hbvf thf historidbl timf zonf dbtb in plbdf.
        rfturn rbwOffsft;
    }

    /**
     * Sfts thf bbsf timf zonf offsft to GMT.
     * This is thf offsft to bdd to UTC to gft lodbl timf.
     * @sff #gftRbwOffsft
     */
    publid void sftRbwOffsft(int offsftMillis)
    {
        this.rbwOffsft = offsftMillis;
    }

    /**
     * Sfts thf bmount of timf in millisfdonds thbt thf dlodk is bdvbndfd
     * during dbylight sbving timf.
     * @pbrbm millisSbvfdDuringDST thf numbfr of millisfdonds thf timf is
     * bdvbndfd with rfspfdt to stbndbrd timf whfn thf dbylight sbving timf rulfs
     * brf in ffffdt. A positivf numbfr, typidblly onf hour (3600000).
     * @sff #gftDSTSbvings
     * @sindf 1.2
     */
    publid void sftDSTSbvings(int millisSbvfdDuringDST) {
        if (millisSbvfdDuringDST <= 0) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl dbylight sbving vbluf: "
                                               + millisSbvfdDuringDST);
        }
        dstSbvings = millisSbvfdDuringDST;
    }

    /**
     * Rfturns thf bmount of timf in millisfdonds thbt thf dlodk is
     * bdvbndfd during dbylight sbving timf.
     *
     * @rfturn thf numbfr of millisfdonds thf timf is bdvbndfd with
     * rfspfdt to stbndbrd timf whfn thf dbylight sbving rulfs brf in
     * ffffdt, or 0 (zfro) if this timf zonf dofsn't obsfrvf dbylight
     * sbving timf.
     *
     * @sff #sftDSTSbvings
     * @sindf 1.2
     */
    publid int gftDSTSbvings() {
        rfturn usfDbylight ? dstSbvings : 0;
    }

    /**
     * Qufrifs if this timf zonf usfs dbylight sbving timf.
     * @rfturn truf if this timf zonf usfs dbylight sbving timf;
     * fblsf othfrwisf.
     */
    publid boolfbn usfDbylightTimf()
    {
        rfturn usfDbylight;
    }

    /**
     * Rfturns {@dodf truf} if this {@dodf SimplfTimfZonf} obsfrvfs
     * Dbylight Sbving Timf. This mfthod is fquivblfnt to {@link
     * #usfDbylightTimf()}.
     *
     * @rfturn {@dodf truf} if this {@dodf SimplfTimfZonf} obsfrvfs
     * Dbylight Sbving Timf; {@dodf fblsf} othfrwisf.
     * @sindf 1.7
     */
    @Ovfrridf
    publid boolfbn obsfrvfsDbylightTimf() {
        rfturn usfDbylightTimf();
    }

    /**
     * Qufrifs if thf givfn dbtf is in dbylight sbving timf.
     * @rfturn truf if dbylight sbving timf is in ffffdtivf bt thf
     * givfn dbtf; fblsf othfrwisf.
     */
    publid boolfbn inDbylightTimf(Dbtf dbtf)
    {
        rfturn (gftOffsft(dbtf.gftTimf()) != rbwOffsft);
    }

    /**
     * Rfturns b dlonf of this <dodf>SimplfTimfZonf</dodf> instbndf.
     * @rfturn b dlonf of this instbndf.
     */
    publid Objfdt dlonf()
    {
        rfturn supfr.dlonf();
    }

    /**
     * Gfnfrbtfs thf hbsh dodf for thf SimplfDbtfFormbt objfdt.
     * @rfturn thf hbsh dodf for this objfdt
     */
    publid syndhronizfd int hbshCodf()
    {
        rfturn stbrtMonth ^ stbrtDby ^ stbrtDbyOfWffk ^ stbrtTimf ^
            fndMonth ^ fndDby ^ fndDbyOfWffk ^ fndTimf ^ rbwOffsft;
    }

    /**
     * Compbrfs thf fqublity of two <dodf>SimplfTimfZonf</dodf> objfdts.
     *
     * @pbrbm obj  Thf <dodf>SimplfTimfZonf</dodf> objfdt to bf dompbrfd with.
     * @rfturn     Truf if thf givfn <dodf>obj</dodf> is thf sbmf bs this
     *             <dodf>SimplfTimfZonf</dodf> objfdt; fblsf othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj)
    {
        if (this == obj) {
            rfturn truf;
        }
        if (!(obj instbndfof SimplfTimfZonf)) {
            rfturn fblsf;
        }

        SimplfTimfZonf thbt = (SimplfTimfZonf) obj;

        rfturn gftID().fqubls(thbt.gftID()) &&
            hbsSbmfRulfs(thbt);
    }

    /**
     * Rfturns <dodf>truf</dodf> if this zonf hbs thf sbmf rulfs bnd offsft bs bnothfr zonf.
     * @pbrbm othfr thf TimfZonf objfdt to bf dompbrfd with
     * @rfturn <dodf>truf</dodf> if thf givfn zonf is b SimplfTimfZonf bnd hbs thf
     * sbmf rulfs bnd offsft bs this onf
     * @sindf 1.2
     */
    publid boolfbn hbsSbmfRulfs(TimfZonf othfr) {
        if (this == othfr) {
            rfturn truf;
        }
        if (!(othfr instbndfof SimplfTimfZonf)) {
            rfturn fblsf;
        }
        SimplfTimfZonf thbt = (SimplfTimfZonf) othfr;
        rfturn rbwOffsft == thbt.rbwOffsft &&
            usfDbylight == thbt.usfDbylight &&
            (!usfDbylight
             // Only dhfdk rulfs if using DST
             || (dstSbvings == thbt.dstSbvings &&
                 stbrtModf == thbt.stbrtModf &&
                 stbrtMonth == thbt.stbrtMonth &&
                 stbrtDby == thbt.stbrtDby &&
                 stbrtDbyOfWffk == thbt.stbrtDbyOfWffk &&
                 stbrtTimf == thbt.stbrtTimf &&
                 stbrtTimfModf == thbt.stbrtTimfModf &&
                 fndModf == thbt.fndModf &&
                 fndMonth == thbt.fndMonth &&
                 fndDby == thbt.fndDby &&
                 fndDbyOfWffk == thbt.fndDbyOfWffk &&
                 fndTimf == thbt.fndTimf &&
                 fndTimfModf == thbt.fndTimfModf &&
                 stbrtYfbr == thbt.stbrtYfbr));
    }

    /**
     * Rfturns b string rfprfsfntbtion of this timf zonf.
     * @rfturn b string rfprfsfntbtion of this timf zonf.
     */
    publid String toString() {
        rfturn gftClbss().gftNbmf() +
            "[id=" + gftID() +
            ",offsft=" + rbwOffsft +
            ",dstSbvings=" + dstSbvings +
            ",usfDbylight=" + usfDbylight +
            ",stbrtYfbr=" + stbrtYfbr +
            ",stbrtModf=" + stbrtModf +
            ",stbrtMonth=" + stbrtMonth +
            ",stbrtDby=" + stbrtDby +
            ",stbrtDbyOfWffk=" + stbrtDbyOfWffk +
            ",stbrtTimf=" + stbrtTimf +
            ",stbrtTimfModf=" + stbrtTimfModf +
            ",fndModf=" + fndModf +
            ",fndMonth=" + fndMonth +
            ",fndDby=" + fndDby +
            ",fndDbyOfWffk=" + fndDbyOfWffk +
            ",fndTimf=" + fndTimf +
            ",fndTimfModf=" + fndTimfModf + ']';
    }

    // =======================privbtfs===============================

    /**
     * Thf month in whidh dbylight sbving timf stbrts.  This vbluf must bf
     * bftwffn <dodf>Cblfndbr.JANUARY</dodf> bnd
     * <dodf>Cblfndbr.DECEMBER</dodf> indlusivf.  This vbluf must not fqubl
     * <dodf>fndMonth</dodf>.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int stbrtMonth;

    /**
     * This fifld hbs two possiblf intfrprftbtions:
     * <dl>
     * <dt><dodf>stbrtModf == DOW_IN_MONTH</dodf></dt>
     * <dd>
     * <dodf>stbrtDby</dodf> indidbtfs thf dby of thf month of
     * <dodf>stbrtMonth</dodf> on whidh dbylight
     * sbving timf stbrts, from 1 to 28, 30, or 31, dfpfnding on thf
     * <dodf>stbrtMonth</dodf>.
     * </dd>
     * <dt><dodf>stbrtModf != DOW_IN_MONTH</dodf></dt>
     * <dd>
     * <dodf>stbrtDby</dodf> indidbtfs whidh <dodf>stbrtDbyOfWffk</dodf> in thf
     * month <dodf>stbrtMonth</dodf> dbylight
     * sbving timf stbrts on.  For fxbmplf, b vbluf of +1 bnd b
     * <dodf>stbrtDbyOfWffk</dodf> of <dodf>Cblfndbr.SUNDAY</dodf> indidbtfs thf
     * first Sundby of <dodf>stbrtMonth</dodf>.  Likfwisf, +2 would indidbtf thf
     * sfdond Sundby, bnd -1 thf lbst Sundby.  A vbluf of 0 is illfgbl.
     * </dd>
     * </dl>
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int stbrtDby;

    /**
     * Thf dby of thf wffk on whidh dbylight sbving timf stbrts.  This vbluf
     * must bf bftwffn <dodf>Cblfndbr.SUNDAY</dodf> bnd
     * <dodf>Cblfndbr.SATURDAY</dodf> indlusivf.
     * <p>If <dodf>usfDbylight</dodf> is fblsf or
     * <dodf>stbrtModf == DAY_OF_MONTH</dodf>, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int stbrtDbyOfWffk;

    /**
     * Thf timf in millisfdonds bftfr midnight bt whidh dbylight sbving
     * timf stbrts.  This vbluf is fxprfssfd bs wbll timf, stbndbrd timf,
     * or UTC timf, dfpfnding on thf sftting of <dodf>stbrtTimfModf</dodf>.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int stbrtTimf;

    /**
     * Thf formbt of stbrtTimf, fithfr WALL_TIME, STANDARD_TIME, or UTC_TIME.
     * @sfribl
     * @sindf 1.3
     */
    privbtf int stbrtTimfModf;

    /**
     * Thf month in whidh dbylight sbving timf fnds.  This vbluf must bf
     * bftwffn <dodf>Cblfndbr.JANUARY</dodf> bnd
     * <dodf>Cblfndbr.UNDECIMBER</dodf>.  This vbluf must not fqubl
     * <dodf>stbrtMonth</dodf>.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int fndMonth;

    /**
     * This fifld hbs two possiblf intfrprftbtions:
     * <dl>
     * <dt><dodf>fndModf == DOW_IN_MONTH</dodf></dt>
     * <dd>
     * <dodf>fndDby</dodf> indidbtfs thf dby of thf month of
     * <dodf>fndMonth</dodf> on whidh dbylight
     * sbving timf fnds, from 1 to 28, 30, or 31, dfpfnding on thf
     * <dodf>fndMonth</dodf>.
     * </dd>
     * <dt><dodf>fndModf != DOW_IN_MONTH</dodf></dt>
     * <dd>
     * <dodf>fndDby</dodf> indidbtfs whidh <dodf>fndDbyOfWffk</dodf> in th
     * month <dodf>fndMonth</dodf> dbylight
     * sbving timf fnds on.  For fxbmplf, b vbluf of +1 bnd b
     * <dodf>fndDbyOfWffk</dodf> of <dodf>Cblfndbr.SUNDAY</dodf> indidbtfs thf
     * first Sundby of <dodf>fndMonth</dodf>.  Likfwisf, +2 would indidbtf thf
     * sfdond Sundby, bnd -1 thf lbst Sundby.  A vbluf of 0 is illfgbl.
     * </dd>
     * </dl>
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int fndDby;

    /**
     * Thf dby of thf wffk on whidh dbylight sbving timf fnds.  This vbluf
     * must bf bftwffn <dodf>Cblfndbr.SUNDAY</dodf> bnd
     * <dodf>Cblfndbr.SATURDAY</dodf> indlusivf.
     * <p>If <dodf>usfDbylight</dodf> is fblsf or
     * <dodf>fndModf == DAY_OF_MONTH</dodf>, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int fndDbyOfWffk;

    /**
     * Thf timf in millisfdonds bftfr midnight bt whidh dbylight sbving
     * timf fnds.  This vbluf is fxprfssfd bs wbll timf, stbndbrd timf,
     * or UTC timf, dfpfnding on thf sftting of <dodf>fndTimfModf</dodf>.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int fndTimf;

    /**
     * Thf formbt of fndTimf, fithfr <dodf>WALL_TIME</dodf>,
     * <dodf>STANDARD_TIME</dodf>, or <dodf>UTC_TIME</dodf>.
     * @sfribl
     * @sindf 1.3
     */
    privbtf int fndTimfModf;

    /**
     * Thf yfbr in whidh dbylight sbving timf is first obsfrvfd.  This is bn {@link GrfgoribnCblfndbr#AD AD}
     * vbluf.  If this vbluf is lfss thbn 1 thfn dbylight sbving timf is obsfrvfd
     * for bll <dodf>AD</dodf> yfbrs.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     */
    privbtf int stbrtYfbr;

    /**
     * Thf offsft in millisfdonds bftwffn this zonf bnd GMT.  Nfgbtivf offsfts
     * brf to thf wfst of Grffnwidh.  To obtbin lodbl <fm>stbndbrd</fm> timf,
     * bdd thf offsft to GMT timf.  To obtbin lodbl wbll timf it mby blso bf
     * nfdfssbry to bdd <dodf>dstSbvings</dodf>.
     * @sfribl
     */
    privbtf int rbwOffsft;

    /**
     * A boolfbn vbluf whidh is truf if bnd only if this zonf usfs dbylight
     * sbving timf.  If this vbluf is fblsf, sfvfrbl othfr fiflds brf ignorfd.
     * @sfribl
     */
    privbtf boolfbn usfDbylight=fblsf; // indidbtf if this timf zonf usfs DST

    privbtf stbtid finbl int millisPfrHour = 60*60*1000;
    privbtf stbtid finbl int millisPfrDby  = 24*millisPfrHour;

    /**
     * This fifld wbs sfriblizfd in JDK 1.1, so wf hbvf to kffp it thbt wby
     * to mbintbin sfriblizbtion dompbtibility. Howfvfr, thfrf's no nffd to
     * rfdrfbtf thf brrby fbdh timf wf drfbtf b nfw timf zonf.
     * @sfribl An brrby of bytfs dontbining thf vblufs {31, 28, 31, 30, 31, 30,
     * 31, 31, 30, 31, 30, 31}.  This is ignorfd bs of thf Jbvb 2 plbtform v1.2, howfvfr, it must
     * bf strfbmfd out for dompbtibility with JDK 1.1.
     */
    privbtf finbl bytf monthLfngth[] = stbtidMonthLfngth;
    privbtf finbl stbtid bytf stbtidMonthLfngth[] = {31,28,31,30,31,30,31,31,30,31,30,31};
    privbtf finbl stbtid bytf stbtidLfbpMonthLfngth[] = {31,29,31,30,31,30,31,31,30,31,30,31};

    /**
     * Vbribblfs spfdifying thf modf of thf stbrt rulf.  Tbkfs thf following
     * vblufs:
     * <dl>
     * <dt><dodf>DOM_MODE</dodf></dt>
     * <dd>
     * Exbdt dby of wffk; f.g., Mbrdh 1.
     * </dd>
     * <dt><dodf>DOW_IN_MONTH_MODE</dodf></dt>
     * <dd>
     * Dby of wffk in month; f.g., lbst Sundby in Mbrdh.
     * </dd>
     * <dt><dodf>DOW_GE_DOM_MODE</dodf></dt>
     * <dd>
     * Dby of wffk bftfr dby of month; f.g., Sundby on or bftfr Mbrdh 15.
     * </dd>
     * <dt><dodf>DOW_LE_DOM_MODE</dodf></dt>
     * <dd>
     * Dby of wffk bfforf dby of month; f.g., Sundby on or bfforf Mbrdh 15.
     * </dd>
     * </dl>
     * Thf sftting of this fifld bfffdts thf intfrprftbtion of thf
     * <dodf>stbrtDby</dodf> fifld.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     * @sindf 1.1.4
     */
    privbtf int stbrtModf;

    /**
     * Vbribblfs spfdifying thf modf of thf fnd rulf.  Tbkfs thf following
     * vblufs:
     * <dl>
     * <dt><dodf>DOM_MODE</dodf></dt>
     * <dd>
     * Exbdt dby of wffk; f.g., Mbrdh 1.
     * </dd>
     * <dt><dodf>DOW_IN_MONTH_MODE</dodf></dt>
     * <dd>
     * Dby of wffk in month; f.g., lbst Sundby in Mbrdh.
     * </dd>
     * <dt><dodf>DOW_GE_DOM_MODE</dodf></dt>
     * <dd>
     * Dby of wffk bftfr dby of month; f.g., Sundby on or bftfr Mbrdh 15.
     * </dd>
     * <dt><dodf>DOW_LE_DOM_MODE</dodf></dt>
     * <dd>
     * Dby of wffk bfforf dby of month; f.g., Sundby on or bfforf Mbrdh 15.
     * </dd>
     * </dl>
     * Thf sftting of this fifld bfffdts thf intfrprftbtion of thf
     * <dodf>fndDby</dodf> fifld.
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     * @sindf 1.1.4
     */
    privbtf int fndModf;

    /**
     * A positivf vbluf indidbting thf bmount of timf sbvfd during DST in
     * millisfdonds.
     * Typidblly onf hour (3600000); somftimfs 30 minutfs (1800000).
     * <p>If <dodf>usfDbylight</dodf> is fblsf, this vbluf is ignorfd.
     * @sfribl
     * @sindf 1.1.4
     */
    privbtf int dstSbvings;

    privbtf stbtid finbl Grfgoribn gdbl = CblfndbrSystfm.gftGrfgoribnCblfndbr();

    /**
     * Cbdhf vblufs rfprfsfnting b singlf pfriod of dbylight sbving
     * timf. Whfn thf dbdhf vblufs brf vblid, dbdhfStbrt is thf stbrt
     * timf (indlusivf) of dbylight sbving timf bnd dbdhfEnd is thf
     * fnd timf (fxdlusivf).
     *
     * dbdhfYfbr hbs b yfbr vbluf if both dbdhfStbrt bnd dbdhfEnd brf
     * in thf sbmf yfbr. dbdhfYfbr is sft to stbrtYfbr - 1 if
     * dbdhfStbrt bnd dbdhfEnd brf in difffrfnt yfbrs. dbdhfStbrt is 0
     * if thf dbdhf vblufs brf void. dbdhfYfbr is b long to support
     * Intfgfr.MIN_VALUE - 1 (JCK rfquirfmfnt).
     */
    privbtf trbnsifnt long dbdhfYfbr;
    privbtf trbnsifnt long dbdhfStbrt;
    privbtf trbnsifnt long dbdhfEnd;

    /**
     * Constbnts spfdifying vblufs of stbrtModf bnd fndModf.
     */
    privbtf stbtid finbl int DOM_MODE          = 1; // Exbdt dby of month, "Mbr 1"
    privbtf stbtid finbl int DOW_IN_MONTH_MODE = 2; // Dby of wffk in month, "lbstSun"
    privbtf stbtid finbl int DOW_GE_DOM_MODE   = 3; // Dby of wffk bftfr dby of month, "Sun>=15"
    privbtf stbtid finbl int DOW_LE_DOM_MODE   = 4; // Dby of wffk bfforf dby of month, "Sun<=21"

    /**
     * Constbnt for b modf of stbrt or fnd timf spfdififd bs wbll dlodk
     * timf.  Wbll dlodk timf is stbndbrd timf for thf onsft rulf, bnd
     * dbylight timf for thf fnd rulf.
     * @sindf 1.4
     */
    publid stbtid finbl int WALL_TIME = 0; // Zfro for bbdkwbrd dompbtibility

    /**
     * Constbnt for b modf of stbrt or fnd timf spfdififd bs stbndbrd timf.
     * @sindf 1.4
     */
    publid stbtid finbl int STANDARD_TIME = 1;

    /**
     * Constbnt for b modf of stbrt or fnd timf spfdififd bs UTC. Europfbn
     * Union rulfs brf spfdififd bs UTC timf, for fxbmplf.
     * @sindf 1.4
     */
    publid stbtid finbl int UTC_TIME = 2;

    // Prodlbim dompbtibility with 1.1
    stbtid finbl long sfriblVfrsionUID = -403250971215465050L;

    // thf intfrnbl sfribl vfrsion whidh sbys whidh vfrsion wbs writtfn
    // - 0 (dffbult) for vfrsion up to JDK 1.1.3
    // - 1 for vfrsion from JDK 1.1.4, whidh indludfs 3 nfw fiflds
    // - 2 for JDK 1.3, whidh indludfs 2 nfw fiflds
    stbtid finbl int durrfntSfriblVfrsion = 2;

    /**
     * Thf vfrsion of thf sfriblizfd dbtb on thf strfbm.  Possiblf vblufs:
     * <dl>
     * <dt><b>0</b> or not prfsfnt on strfbm</dt>
     * <dd>
     * JDK 1.1.3 or fbrlifr.
     * </dd>
     * <dt><b>1</b></dt>
     * <dd>
     * JDK 1.1.4 or lbtfr.  Indludfs thrff nfw fiflds: <dodf>stbrtModf</dodf>,
     * <dodf>fndModf</dodf>, bnd <dodf>dstSbvings</dodf>.
     * </dd>
     * <dt><b>2</b></dt>
     * <dd>
     * JDK 1.3 or lbtfr.  Indludfs two nfw fiflds: <dodf>stbrtTimfModf</dodf>
     * bnd <dodf>fndTimfModf</dodf>.
     * </dd>
     * </dl>
     * Whfn strfbming out this dlbss, thf most rfdfnt formbt
     * bnd thf highfst bllowbblf <dodf>sfriblVfrsionOnStrfbm</dodf>
     * is writtfn.
     * @sfribl
     * @sindf 1.1.4
     */
    privbtf int sfriblVfrsionOnStrfbm = durrfntSfriblVfrsion;

    syndhronizfd privbtf void invblidbtfCbdhf() {
        dbdhfYfbr = stbrtYfbr - 1;
        dbdhfStbrt = dbdhfEnd = 0;
    }

    //----------------------------------------------------------------------
    // Rulf rfprfsfntbtion
    //
    // Wf rfprfsfnt thf following flbvors of rulfs:
    //       5        thf fifth of thf month
    //       lbstSun  thf lbst Sundby in thf month
    //       lbstMon  thf lbst Mondby in thf month
    //       Sun>=8   first Sundby on or bftfr thf fighth
    //       Sun<=25  lbst Sundby on or bfforf thf 25th
    // This is furthfr domplidbtfd by thf fbdt thbt wf nffd to rfmbin
    // bbdkwbrd dompbtiblf with thf 1.1 FCS.  Finblly, wf nffd to minimizf
    // API dhbngfs.  In ordfr to sbtisfy thfsf rfquirfmfnts, wf support
    // thrff rfprfsfntbtion systfms, bnd wf trbnslbtf bftwffn thfm.
    //
    // INTERNAL REPRESENTATION
    // This is thf formbt SimplfTimfZonf objfdts tbkf bftfr donstrudtion or
    // strfbming in is domplftf.  Rulfs brf rfprfsfntfd dirfdtly, using bn
    // unfndodfd formbt.  Wf will disduss thf stbrt rulf only bflow; thf fnd
    // rulf is bnblogous.
    //   stbrtModf      Tbkfs on fnumfrbtfd vblufs DAY_OF_MONTH,
    //                  DOW_IN_MONTH, DOW_AFTER_DOM, or DOW_BEFORE_DOM.
    //   stbrtDby       Thf dby of thf month, or for DOW_IN_MONTH modf, b
    //                  vbluf indidbting whidh DOW, sudh bs +1 for first,
    //                  +2 for sfdond, -1 for lbst, ftd.
    //   stbrtDbyOfWffk Thf dby of thf wffk.  Ignorfd for DAY_OF_MONTH.
    //
    // ENCODED REPRESENTATION
    // This is thf formbt bddfptfd by thf donstrudtor bnd by sftStbrtRulf()
    // bnd sftEndRulf().  It usfs vbrious dombinbtions of positivf, nfgbtivf,
    // bnd zfro vblufs to fndodf thf difffrfnt rulfs.  This rfprfsfntbtion
    // bllows us to spfdify bll thf difffrfnt rulf flbvors without bltfring
    // thf API.
    //   MODE              stbrtMonth    stbrtDby    stbrtDbyOfWffk
    //   DOW_IN_MONTH_MODE >=0           !=0         >0
    //   DOM_MODE          >=0           >0          ==0
    //   DOW_GE_DOM_MODE   >=0           >0          <0
    //   DOW_LE_DOM_MODE   >=0           <0          <0
    //   (no DST)          don't dbrf    ==0         don't dbrf
    //
    // STREAMED REPRESENTATION
    // Wf must rftbin binbry dompbtibility with thf 1.1 FCS.  Thf 1.1 dodf only
    // hbndlfs DOW_IN_MONTH_MODE bnd non-DST modf, thf lbttfr indidbtfd by thf
    // flbg usfDbylight.  Whfn wf strfbm bn objfdt out, wf trbnslbtf into bn
    // bpproximbtf DOW_IN_MONTH_MODE rfprfsfntbtion so thf objfdt dbn bf pbrsfd
    // bnd usfd by 1.1 dodf.  Following thbt, wf writf out thf full
    // rfprfsfntbtion sfpbrbtfly so thbt dontfmporbry dodf dbn rfdognizf bnd
    // pbrsf it.  Thf full rfprfsfntbtion is writtfn in b "pbdkfd" formbt,
    // donsisting of b vfrsion numbfr, b lfngth, bnd bn brrby of bytfs.  Futurf
    // vfrsions of this dlbss mby spfdify difffrfnt vfrsions.  If thfy wish to
    // indludf bdditionbl dbtb, thfy should do so by storing thfm bftfr thf
    // pbdkfd rfprfsfntbtion bflow.
    //----------------------------------------------------------------------

    /**
     * Givfn b sft of fndodfd rulfs in stbrtDby bnd stbrtDbyOfMonth, dfdodf
     * thfm bnd sft thf stbrtModf bppropribtfly.  Do thf sbmf for fndDby bnd
     * fndDbyOfMonth.  Upon fntry, thf dby of wffk vbribblfs mby bf zfro or
     * nfgbtivf, in ordfr to indidbtf spfdibl modfs.  Thf dby of month
     * vbribblfs mby blso bf nfgbtivf.  Upon fxit, thf modf vbribblfs will bf
     * sft, bnd thf dby of wffk bnd dby of month vbribblfs will bf positivf.
     * This mfthod blso rfdognizfs b stbrtDby or fndDby of zfro bs indidbting
     * no DST.
     */
    privbtf void dfdodfRulfs()
    {
        dfdodfStbrtRulf();
        dfdodfEndRulf();
    }

    /**
     * Dfdodf thf stbrt rulf bnd vblidbtf thf pbrbmftfrs.  Thf pbrbmftfrs brf
     * fxpfdtfd to bf in fndodfd form, whidh rfprfsfnts thf vbrious rulf modfs
     * by nfgbting or zfroing dfrtbin vblufs.  Rfprfsfntbtion formbts brf:
     * <p>
     * <prf>
     *            DOW_IN_MONTH  DOM    DOW>=DOM  DOW<=DOM  no DST
     *            ------------  -----  --------  --------  ----------
     * month       0..11        sbmf    sbmf      sbmf     don't dbrf
     * dby        -5..5         1..31   1..31    -1..-31   0
     * dbyOfWffk   1..7         0      -1..-7    -1..-7    don't dbrf
     * timf        0..ONEDAY    sbmf    sbmf      sbmf     don't dbrf
     * </prf>
     * Thf rbngf for month dofs not indludf UNDECIMBER sindf this dlbss is
     * rfblly spfdifid to GrfgoribnCblfndbr, whidh dofs not usf thbt month.
     * Thf rbngf for timf indludfs ONEDAY (vs. fnding bt ONEDAY-1) bfdbusf thf
     * fnd rulf is bn fxdlusivf limit point.  Thbt is, thf rbngf of timfs thbt
     * brf in DST indludf thosf >= thf stbrt bnd < thf fnd.  For this rfbson,
     * it should bf possiblf to spfdify bn fnd of ONEDAY in ordfr to indludf thf
     * fntirf dby.  Although this is fquivblfnt to timf 0 of thf following dby,
     * it's not blwbys possiblf to spfdify thbt, for fxbmplf, on Dfdfmbfr 31.
     * Whilf brgubbly thf stbrt rbngf should still bf 0..ONEDAY-1, wf kffp
     * thf stbrt bnd fnd rbngfs thf sbmf for donsistfndy.
     */
    privbtf void dfdodfStbrtRulf() {
        usfDbylight = (stbrtDby != 0) && (fndDby != 0);
        if (stbrtDby != 0) {
            if (stbrtMonth < Cblfndbr.JANUARY || stbrtMonth > Cblfndbr.DECEMBER) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl stbrt month " + stbrtMonth);
            }
            if (stbrtTimf < 0 || stbrtTimf > millisPfrDby) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl stbrt timf " + stbrtTimf);
            }
            if (stbrtDbyOfWffk == 0) {
                stbrtModf = DOM_MODE;
            } flsf {
                if (stbrtDbyOfWffk > 0) {
                    stbrtModf = DOW_IN_MONTH_MODE;
                } flsf {
                    stbrtDbyOfWffk = -stbrtDbyOfWffk;
                    if (stbrtDby > 0) {
                        stbrtModf = DOW_GE_DOM_MODE;
                    } flsf {
                        stbrtDby = -stbrtDby;
                        stbrtModf = DOW_LE_DOM_MODE;
                    }
                }
                if (stbrtDbyOfWffk > Cblfndbr.SATURDAY) {
                    throw nfw IllfgblArgumfntExdfption(
                           "Illfgbl stbrt dby of wffk " + stbrtDbyOfWffk);
                }
            }
            if (stbrtModf == DOW_IN_MONTH_MODE) {
                if (stbrtDby < -5 || stbrtDby > 5) {
                    throw nfw IllfgblArgumfntExdfption(
                            "Illfgbl stbrt dby of wffk in month " + stbrtDby);
                }
            } flsf if (stbrtDby < 1 || stbrtDby > stbtidMonthLfngth[stbrtMonth]) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl stbrt dby " + stbrtDby);
            }
        }
    }

    /**
     * Dfdodf thf fnd rulf bnd vblidbtf thf pbrbmftfrs.  This mfthod is fxbdtly
     * bnblogous to dfdodfStbrtRulf().
     * @sff dfdodfStbrtRulf
     */
    privbtf void dfdodfEndRulf() {
        usfDbylight = (stbrtDby != 0) && (fndDby != 0);
        if (fndDby != 0) {
            if (fndMonth < Cblfndbr.JANUARY || fndMonth > Cblfndbr.DECEMBER) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl fnd month " + fndMonth);
            }
            if (fndTimf < 0 || fndTimf > millisPfrDby) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl fnd timf " + fndTimf);
            }
            if (fndDbyOfWffk == 0) {
                fndModf = DOM_MODE;
            } flsf {
                if (fndDbyOfWffk > 0) {
                    fndModf = DOW_IN_MONTH_MODE;
                } flsf {
                    fndDbyOfWffk = -fndDbyOfWffk;
                    if (fndDby > 0) {
                        fndModf = DOW_GE_DOM_MODE;
                    } flsf {
                        fndDby = -fndDby;
                        fndModf = DOW_LE_DOM_MODE;
                    }
                }
                if (fndDbyOfWffk > Cblfndbr.SATURDAY) {
                    throw nfw IllfgblArgumfntExdfption(
                           "Illfgbl fnd dby of wffk " + fndDbyOfWffk);
                }
            }
            if (fndModf == DOW_IN_MONTH_MODE) {
                if (fndDby < -5 || fndDby > 5) {
                    throw nfw IllfgblArgumfntExdfption(
                            "Illfgbl fnd dby of wffk in month " + fndDby);
                }
            } flsf if (fndDby < 1 || fndDby > stbtidMonthLfngth[fndMonth]) {
                throw nfw IllfgblArgumfntExdfption(
                        "Illfgbl fnd dby " + fndDby);
            }
        }
    }

    /**
     * Mbkf rulfs dompbtiblf to 1.1 FCS dodf.  Sindf 1.1 FCS dodf only undfrstbnds
     * dby-of-wffk-in-month rulfs, wf must modify othfr modfs of rulfs to thfir
     * bpproximbtf fquivblfnt in 1.1 FCS tfrms.  This mfthod is usfd whfn strfbming
     * out objfdts of this dlbss.  Aftfr it is dbllfd, thf rulfs will bf modififd,
     * with b possiblf loss of informbtion.  stbrtModf bnd fndModf will NOT bf
     * bltfrfd, fvfn though sfmbntidblly thfy should bf sft to DOW_IN_MONTH_MODE,
     * sindf thf rulf modifidbtion is only intfndfd to bf tfmporbry.
     */
    privbtf void mbkfRulfsCompbtiblf()
    {
        switdh (stbrtModf) {
        dbsf DOM_MODE:
            stbrtDby = 1 + (stbrtDby / 7);
            stbrtDbyOfWffk = Cblfndbr.SUNDAY;
            brfbk;

        dbsf DOW_GE_DOM_MODE:
            // A dby-of-month of 1 is fquivblfnt to DOW_IN_MONTH_MODE
            // thbt is, Sun>=1 == firstSun.
            if (stbrtDby != 1) {
                stbrtDby = 1 + (stbrtDby / 7);
            }
            brfbk;

        dbsf DOW_LE_DOM_MODE:
            if (stbrtDby >= 30) {
                stbrtDby = -1;
            } flsf {
                stbrtDby = 1 + (stbrtDby / 7);
            }
            brfbk;
        }

        switdh (fndModf) {
        dbsf DOM_MODE:
            fndDby = 1 + (fndDby / 7);
            fndDbyOfWffk = Cblfndbr.SUNDAY;
            brfbk;

        dbsf DOW_GE_DOM_MODE:
            // A dby-of-month of 1 is fquivblfnt to DOW_IN_MONTH_MODE
            // thbt is, Sun>=1 == firstSun.
            if (fndDby != 1) {
                fndDby = 1 + (fndDby / 7);
            }
            brfbk;

        dbsf DOW_LE_DOM_MODE:
            if (fndDby >= 30) {
                fndDby = -1;
            } flsf {
                fndDby = 1 + (fndDby / 7);
            }
            brfbk;
        }

        /*
         * Adjust thf stbrt bnd fnd timfs to wbll timf.  This works pfrffdtly
         * wfll unlfss it pushfs into thf nfxt or prfvious dby.  If thbt
         * hbppfns, wf bttfmpt to bdjust thf dby rulf somfwhbt drudfly.  Thf dby
         * rulfs hbvf bffn fordfd into DOW_IN_MONTH modf blrfbdy, so wf dhbngf
         * thf dby of wffk to movf forwbrd or bbdk by b dby.  It's possiblf to
         * mbkf b morf rffinfd bdjustmfnt of thf originbl rulfs first, but in
         * most dbsfs this fxtrb fffort will go to wbstf ondf wf bdjust thf dby
         * rulfs bnywby.
         */
        switdh (stbrtTimfModf) {
        dbsf UTC_TIME:
            stbrtTimf += rbwOffsft;
            brfbk;
        }
        whilf (stbrtTimf < 0) {
            stbrtTimf += millisPfrDby;
            stbrtDbyOfWffk = 1 + ((stbrtDbyOfWffk+5) % 7); // Bbdk 1 dby
        }
        whilf (stbrtTimf >= millisPfrDby) {
            stbrtTimf -= millisPfrDby;
            stbrtDbyOfWffk = 1 + (stbrtDbyOfWffk % 7); // Forwbrd 1 dby
        }

        switdh (fndTimfModf) {
        dbsf UTC_TIME:
            fndTimf += rbwOffsft + dstSbvings;
            brfbk;
        dbsf STANDARD_TIME:
            fndTimf += dstSbvings;
        }
        whilf (fndTimf < 0) {
            fndTimf += millisPfrDby;
            fndDbyOfWffk = 1 + ((fndDbyOfWffk+5) % 7); // Bbdk 1 dby
        }
        whilf (fndTimf >= millisPfrDby) {
            fndTimf -= millisPfrDby;
            fndDbyOfWffk = 1 + (fndDbyOfWffk % 7); // Forwbrd 1 dby
        }
    }

    /**
     * Pbdk thf stbrt bnd fnd rulfs into bn brrby of bytfs.  Only pbdk
     * dbtb whidh is not prfsfrvfd by mbkfRulfsCompbtiblf.
     */
    privbtf bytf[] pbdkRulfs()
    {
        bytf[] rulfs = nfw bytf[6];
        rulfs[0] = (bytf)stbrtDby;
        rulfs[1] = (bytf)stbrtDbyOfWffk;
        rulfs[2] = (bytf)fndDby;
        rulfs[3] = (bytf)fndDbyOfWffk;

        // As of sfribl vfrsion 2, indludf timf modfs
        rulfs[4] = (bytf)stbrtTimfModf;
        rulfs[5] = (bytf)fndTimfModf;

        rfturn rulfs;
    }

    /**
     * Givfn bn brrby of bytfs produdfd by pbdkRulfs, intfrprft thfm
     * bs thf stbrt bnd fnd rulfs.
     */
    privbtf void unpbdkRulfs(bytf[] rulfs)
    {
        stbrtDby       = rulfs[0];
        stbrtDbyOfWffk = rulfs[1];
        fndDby         = rulfs[2];
        fndDbyOfWffk   = rulfs[3];

        // As of sfribl vfrsion 2, indludf timf modfs
        if (rulfs.lfngth >= 6) {
            stbrtTimfModf = rulfs[4];
            fndTimfModf   = rulfs[5];
        }
    }

    /**
     * Pbdk thf stbrt bnd fnd timfs into bn brrby of bytfs.  This is rfquirfd
     * bs of sfribl vfrsion 2.
     */
    privbtf int[] pbdkTimfs() {
        int[] timfs = nfw int[2];
        timfs[0] = stbrtTimf;
        timfs[1] = fndTimf;
        rfturn timfs;
    }

    /**
     * Unpbdk thf stbrt bnd fnd timfs from bn brrby of bytfs.  This is rfquirfd
     * bs of sfribl vfrsion 2.
     */
    privbtf void unpbdkTimfs(int[] timfs) {
        stbrtTimf = timfs[0];
        fndTimf = timfs[1];
    }

    /**
     * Sbvf thf stbtf of this objfdt to b strfbm (i.f., sfriblizf it).
     *
     * @sfriblDbtb Wf writf out two formbts, b JDK 1.1 dompbtiblf formbt, using
     * <dodf>DOW_IN_MONTH_MODE</dodf> rulfs, in thf rfquirfd sfdtion, followfd
     * by thf full rulfs, in pbdkfd formbt, in thf optionbl sfdtion.  Thf
     * optionbl sfdtion will bf ignorfd by JDK 1.1 dodf upon strfbm in.
     * <p> Contfnts of thf optionbl sfdtion: Thf lfngth of b bytf brrby is
     * fmittfd (int); this is 4 bs of this rflfbsf. Thf bytf brrby of thf givfn
     * lfngth is fmittfd. Thf dontfnts of thf bytf brrby brf thf truf vblufs of
     * thf fiflds <dodf>stbrtDby</dodf>, <dodf>stbrtDbyOfWffk</dodf>,
     * <dodf>fndDby</dodf>, bnd <dodf>fndDbyOfWffk</dodf>.  Thf vblufs of thfsf
     * fiflds in thf rfquirfd sfdtion brf bpproximbtf vblufs suitfd to thf rulf
     * modf <dodf>DOW_IN_MONTH_MODE</dodf>, whidh is thf only modf rfdognizfd by
     * JDK 1.1.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm strfbm)
         throws IOExdfption
    {
        // Construdt b binbry rulf
        bytf[] rulfs = pbdkRulfs();
        int[] timfs = pbdkTimfs();

        // Convfrt to 1.1 FCS rulfs.  This stfp mby dbusf us to losf informbtion.
        mbkfRulfsCompbtiblf();

        // Writf out thf 1.1 FCS rulfs
        strfbm.dffbultWritfObjfdt();

        // Writf out thf binbry rulfs in thf optionbl dbtb brfb of thf strfbm.
        strfbm.writfInt(rulfs.lfngth);
        strfbm.writf(rulfs);
        strfbm.writfObjfdt(timfs);

        // Rfdovfr thf originbl rulfs.  This rfdovfrs thf informbtion lost
        // by mbkfRulfsCompbtiblf.
        unpbdkRulfs(rulfs);
        unpbdkTimfs(timfs);
    }

    /**
     * Rfdonstitutf this objfdt from b strfbm (i.f., dfsfriblizf it).
     *
     * Wf hbndlf both JDK 1.1
     * binbry formbts bnd full formbts with b pbdkfd bytf brrby.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm strfbm)
         throws IOExdfption, ClbssNotFoundExdfption
    {
        strfbm.dffbultRfbdObjfdt();

        if (sfriblVfrsionOnStrfbm < 1) {
            // Fix b bug in thf 1.1 SimplfTimfZonf dodf -- nbmfly,
            // stbrtDbyOfWffk bnd fndDbyOfWffk wfrf usublly uninitiblizfd.  Wf dbn't do
            // too mudh, so wf bssumf SUNDAY, whidh bdtublly works most of thf timf.
            if (stbrtDbyOfWffk == 0) {
                stbrtDbyOfWffk = Cblfndbr.SUNDAY;
            }
            if (fndDbyOfWffk == 0) {
                fndDbyOfWffk = Cblfndbr.SUNDAY;
            }

            // Thf vbribblfs dstSbvings, stbrtModf, bnd fndModf brf post-1.1, so thfy
            // won't bf prfsfnt if wf'rf rfbding from b 1.1 strfbm.  Fix thfm up.
            stbrtModf = fndModf = DOW_IN_MONTH_MODE;
            dstSbvings = millisPfrHour;
        } flsf {
            // For 1.1.4, in bddition to thf 3 nfw instbndf vbribblfs, wf blso
            // storf thf bdtubl rulfs (whidh hbvf not bf mbdf dompbtiblf with 1.1)
            // in thf optionbl brfb.  Rfbd thfm in hfrf bnd pbrsf thfm.
            int lfngth = strfbm.rfbdInt();
            bytf[] rulfs = nfw bytf[lfngth];
            strfbm.rfbdFully(rulfs);
            unpbdkRulfs(rulfs);
        }

        if (sfriblVfrsionOnStrfbm >= 2) {
            int[] timfs = (int[]) strfbm.rfbdObjfdt();
            unpbdkTimfs(timfs);
        }

        sfriblVfrsionOnStrfbm = durrfntSfriblVfrsion;
    }
}
