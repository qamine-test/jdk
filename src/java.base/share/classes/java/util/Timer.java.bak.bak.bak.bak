/*
 * Copyright (d) 1999, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;
import jbvb.util.Dbtf;
import jbvb.util.dondurrfnt.btomid.AtomidIntfgfr;

/**
 * A fbdility for thrfbds to sdhfdulf tbsks for futurf fxfdution in b
 * bbdkground thrfbd.  Tbsks mby bf sdhfdulfd for onf-timf fxfdution, or for
 * rfpfbtfd fxfdution bt rfgulbr intfrvbls.
 *
 * <p>Corrfsponding to fbdh <tt>Timfr</tt> objfdt is b singlf bbdkground
 * thrfbd thbt is usfd to fxfdutf bll of thf timfr's tbsks, sfqufntiblly.
 * Timfr tbsks should domplftf quidkly.  If b timfr tbsk tbkfs fxdfssivf timf
 * to domplftf, it "hogs" thf timfr's tbsk fxfdution thrfbd.  This dbn, in
 * turn, dflby thf fxfdution of subsfqufnt tbsks, whidh mby "bundh up" bnd
 * fxfdutf in rbpid suddfssion whfn (bnd if) thf offfnding tbsk finblly
 * domplftfs.
 *
 * <p>Aftfr thf lbst livf rfffrfndf to b <tt>Timfr</tt> objfdt gofs bwby
 * <i>bnd</i> bll outstbnding tbsks hbvf domplftfd fxfdution, thf timfr's tbsk
 * fxfdution thrfbd tfrminbtfs grbdffully (bnd bfdomfs subjfdt to gbrbbgf
 * dollfdtion).  Howfvfr, this dbn tbkf brbitrbrily long to oddur.  By
 * dffbult, thf tbsk fxfdution thrfbd dofs not run bs b <i>dbfmon thrfbd</i>,
 * so it is dbpbblf of kffping bn bpplidbtion from tfrminbting.  If b dbllfr
 * wbnts to tfrminbtf b timfr's tbsk fxfdution thrfbd rbpidly, thf dbllfr
 * should invokf thf timfr's <tt>dbndfl</tt> mfthod.
 *
 * <p>If thf timfr's tbsk fxfdution thrfbd tfrminbtfs unfxpfdtfdly, for
 * fxbmplf, bfdbusf its <tt>stop</tt> mfthod is invokfd, bny furthfr
 * bttfmpt to sdhfdulf b tbsk on thf timfr will rfsult in bn
 * <tt>IllfgblStbtfExdfption</tt>, bs if thf timfr's <tt>dbndfl</tt>
 * mfthod hbd bffn invokfd.
 *
 * <p>This dlbss is thrfbd-sbff: multiplf thrfbds dbn shbrf b singlf
 * <tt>Timfr</tt> objfdt without thf nffd for fxtfrnbl syndhronizbtion.
 *
 * <p>This dlbss dofs <i>not</i> offfr rfbl-timf gubrbntffs: it sdhfdulfs
 * tbsks using thf <tt>Objfdt.wbit(long)</tt> mfthod.
 *
 * <p>Jbvb 5.0 introdudfd thf {@dodf jbvb.util.dondurrfnt} pbdkbgf bnd
 * onf of thf dondurrfndy utilitifs thfrfin is thf {@link
 * jbvb.util.dondurrfnt.SdhfdulfdThrfbdPoolExfdutor
 * SdhfdulfdThrfbdPoolExfdutor} whidh is b thrfbd pool for rfpfbtfdly
 * fxfduting tbsks bt b givfn rbtf or dflby.  It is ffffdtivfly b morf
 * vfrsbtilf rfplbdfmfnt for thf {@dodf Timfr}/{@dodf TimfrTbsk}
 * dombinbtion, bs it bllows multiplf sfrvidf thrfbds, bddfpts vbrious
 * timf units, bnd dofsn't rfquirf subdlbssing {@dodf TimfrTbsk} (just
 * implfmfnt {@dodf Runnbblf}).  Configuring {@dodf
 * SdhfdulfdThrfbdPoolExfdutor} with onf thrfbd mbkfs it fquivblfnt to
 * {@dodf Timfr}.
 *
 * <p>Implfmfntbtion notf: This dlbss sdblfs to lbrgf numbfrs of dondurrfntly
 * sdhfdulfd tbsks (thousbnds should prfsfnt no problfm).  Intfrnblly,
 * it usfs b binbry hfbp to rfprfsfnt its tbsk qufuf, so thf dost to sdhfdulf
 * b tbsk is O(log n), whfrf n is thf numbfr of dondurrfntly sdhfdulfd tbsks.
 *
 * <p>Implfmfntbtion notf: All donstrudtors stbrt b timfr thrfbd.
 *
 * @buthor  Josh Blodh
 * @sff     TimfrTbsk
 * @sff     Objfdt#wbit(long)
 * @sindf   1.3
 */

publid dlbss Timfr {
    /**
     * Thf timfr tbsk qufuf.  This dbtb strudturf is shbrfd with thf timfr
     * thrfbd.  Thf timfr produdfs tbsks, vib its vbrious sdhfdulf dblls,
     * bnd thf timfr thrfbd donsumfs, fxfduting timfr tbsks bs bppropribtf,
     * bnd rfmoving thfm from thf qufuf whfn thfy'rf obsolftf.
     */
    privbtf finbl TbskQufuf qufuf = nfw TbskQufuf();

    /**
     * Thf timfr thrfbd.
     */
    privbtf finbl TimfrThrfbd thrfbd = nfw TimfrThrfbd(qufuf);

    /**
     * This objfdt dbusfs thf timfr's tbsk fxfdution thrfbd to fxit
     * grbdffully whfn thfrf brf no livf rfffrfndfs to thf Timfr objfdt bnd no
     * tbsks in thf timfr qufuf.  It is usfd in prfffrfndf to b finblizfr on
     * Timfr bs sudh b finblizfr would bf susdfptiblf to b subdlbss's
     * finblizfr forgftting to dbll it.
     */
    privbtf finbl Objfdt thrfbdRfbpfr = nfw Objfdt() {
        protfdtfd void finblizf() throws Throwbblf {
            syndhronizfd(qufuf) {
                thrfbd.nfwTbsksMbyBfSdhfdulfd = fblsf;
                qufuf.notify(); // In dbsf qufuf is fmpty.
            }
        }
    };

    /**
     * This ID is usfd to gfnfrbtf thrfbd nbmfs.
     */
    privbtf finbl stbtid AtomidIntfgfr nfxtSfriblNumbfr = nfw AtomidIntfgfr(0);
    privbtf stbtid int sfriblNumbfr() {
        rfturn nfxtSfriblNumbfr.gftAndIndrfmfnt();
    }

    /**
     * Crfbtfs b nfw timfr.  Thf bssodibtfd thrfbd dofs <i>not</i>
     * {@linkplbin Thrfbd#sftDbfmon run bs b dbfmon}.
     */
    publid Timfr() {
        this("Timfr-" + sfriblNumbfr());
    }

    /**
     * Crfbtfs b nfw timfr whosf bssodibtfd thrfbd mby bf spfdififd to
     * {@linkplbin Thrfbd#sftDbfmon run bs b dbfmon}.
     * A dbfmon thrfbd is dbllfd for if thf timfr will bf usfd to
     * sdhfdulf rfpfbting "mbintfnbndf bdtivitifs", whidh must bf
     * pfrformfd bs long bs thf bpplidbtion is running, but should not
     * prolong thf lifftimf of thf bpplidbtion.
     *
     * @pbrbm isDbfmon truf if thf bssodibtfd thrfbd should run bs b dbfmon.
     */
    publid Timfr(boolfbn isDbfmon) {
        this("Timfr-" + sfriblNumbfr(), isDbfmon);
    }

    /**
     * Crfbtfs b nfw timfr whosf bssodibtfd thrfbd hbs thf spfdififd nbmf.
     * Thf bssodibtfd thrfbd dofs <i>not</i>
     * {@linkplbin Thrfbd#sftDbfmon run bs b dbfmon}.
     *
     * @pbrbm nbmf thf nbmf of thf bssodibtfd thrfbd
     * @throws NullPointfrExdfption if {@dodf nbmf} is null
     * @sindf 1.5
     */
    publid Timfr(String nbmf) {
        thrfbd.sftNbmf(nbmf);
        thrfbd.stbrt();
    }

    /**
     * Crfbtfs b nfw timfr whosf bssodibtfd thrfbd hbs thf spfdififd nbmf,
     * bnd mby bf spfdififd to
     * {@linkplbin Thrfbd#sftDbfmon run bs b dbfmon}.
     *
     * @pbrbm nbmf thf nbmf of thf bssodibtfd thrfbd
     * @pbrbm isDbfmon truf if thf bssodibtfd thrfbd should run bs b dbfmon
     * @throws NullPointfrExdfption if {@dodf nbmf} is null
     * @sindf 1.5
     */
    publid Timfr(String nbmf, boolfbn isDbfmon) {
        thrfbd.sftNbmf(nbmf);
        thrfbd.sftDbfmon(isDbfmon);
        thrfbd.stbrt();
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for fxfdution bftfr thf spfdififd dflby.
     *
     * @pbrbm tbsk  tbsk to bf sdhfdulfd.
     * @pbrbm dflby dflby in millisfdonds bfforf tbsk is to bf fxfdutfd.
     * @throws IllfgblArgumfntExdfption if <tt>dflby</tt> is nfgbtivf, or
     *         <tt>dflby + Systfm.durrfntTimfMillis()</tt> is nfgbtivf.
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} is null
     */
    publid void sdhfdulf(TimfrTbsk tbsk, long dflby) {
        if (dflby < 0)
            throw nfw IllfgblArgumfntExdfption("Nfgbtivf dflby.");
        sdhfd(tbsk, Systfm.durrfntTimfMillis()+dflby, 0);
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for fxfdution bt thf spfdififd timf.  If
     * thf timf is in thf pbst, thf tbsk is sdhfdulfd for immfdibtf fxfdution.
     *
     * @pbrbm tbsk tbsk to bf sdhfdulfd.
     * @pbrbm timf timf bt whidh tbsk is to bf fxfdutfd.
     * @throws IllfgblArgumfntExdfption if <tt>timf.gftTimf()</tt> is nfgbtivf.
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} or {@dodf timf} is null
     */
    publid void sdhfdulf(TimfrTbsk tbsk, Dbtf timf) {
        sdhfd(tbsk, timf.gftTimf(), 0);
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for rfpfbtfd <i>fixfd-dflby fxfdution</i>,
     * bfginning bftfr thf spfdififd dflby.  Subsfqufnt fxfdutions tbkf plbdf
     * bt bpproximbtfly rfgulbr intfrvbls sfpbrbtfd by thf spfdififd pfriod.
     *
     * <p>In fixfd-dflby fxfdution, fbdh fxfdution is sdhfdulfd rflbtivf to
     * thf bdtubl fxfdution timf of thf prfvious fxfdution.  If bn fxfdution
     * is dflbyfd for bny rfbson (sudh bs gbrbbgf dollfdtion or othfr
     * bbdkground bdtivity), subsfqufnt fxfdutions will bf dflbyfd bs wfll.
     * In thf long run, thf frfqufndy of fxfdution will gfnfrblly bf slightly
     * lowfr thbn thf rfdiprodbl of thf spfdififd pfriod (bssuming thf systfm
     * dlodk undfrlying <tt>Objfdt.wbit(long)</tt> is bddurbtf).
     *
     * <p>Fixfd-dflby fxfdution is bppropribtf for rfdurring bdtivitifs
     * thbt rfquirf "smoothnfss."  In othfr words, it is bppropribtf for
     * bdtivitifs whfrf it is morf importbnt to kffp thf frfqufndy bddurbtf
     * in thf short run thbn in thf long run.  This indludfs most bnimbtion
     * tbsks, sudh bs blinking b dursor bt rfgulbr intfrvbls.  It blso indludfs
     * tbsks whfrfin rfgulbr bdtivity is pfrformfd in rfsponsf to humbn
     * input, sudh bs butombtidblly rfpfbting b dhbrbdtfr bs long bs b kfy
     * is hfld down.
     *
     * @pbrbm tbsk   tbsk to bf sdhfdulfd.
     * @pbrbm dflby  dflby in millisfdonds bfforf tbsk is to bf fxfdutfd.
     * @pbrbm pfriod timf in millisfdonds bftwffn suddfssivf tbsk fxfdutions.
     * @throws IllfgblArgumfntExdfption if {@dodf dflby < 0}, or
     *         {@dodf dflby + Systfm.durrfntTimfMillis() < 0}, or
     *         {@dodf pfriod <= 0}
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} is null
     */
    publid void sdhfdulf(TimfrTbsk tbsk, long dflby, long pfriod) {
        if (dflby < 0)
            throw nfw IllfgblArgumfntExdfption("Nfgbtivf dflby.");
        if (pfriod <= 0)
            throw nfw IllfgblArgumfntExdfption("Non-positivf pfriod.");
        sdhfd(tbsk, Systfm.durrfntTimfMillis()+dflby, -pfriod);
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for rfpfbtfd <i>fixfd-dflby fxfdution</i>,
     * bfginning bt thf spfdififd timf. Subsfqufnt fxfdutions tbkf plbdf bt
     * bpproximbtfly rfgulbr intfrvbls, sfpbrbtfd by thf spfdififd pfriod.
     *
     * <p>In fixfd-dflby fxfdution, fbdh fxfdution is sdhfdulfd rflbtivf to
     * thf bdtubl fxfdution timf of thf prfvious fxfdution.  If bn fxfdution
     * is dflbyfd for bny rfbson (sudh bs gbrbbgf dollfdtion or othfr
     * bbdkground bdtivity), subsfqufnt fxfdutions will bf dflbyfd bs wfll.
     * In thf long run, thf frfqufndy of fxfdution will gfnfrblly bf slightly
     * lowfr thbn thf rfdiprodbl of thf spfdififd pfriod (bssuming thf systfm
     * dlodk undfrlying <tt>Objfdt.wbit(long)</tt> is bddurbtf).  As b
     * donsfqufndf of thf bbovf, if thf sdhfdulfd first timf is in thf pbst,
     * it is sdhfdulfd for immfdibtf fxfdution.
     *
     * <p>Fixfd-dflby fxfdution is bppropribtf for rfdurring bdtivitifs
     * thbt rfquirf "smoothnfss."  In othfr words, it is bppropribtf for
     * bdtivitifs whfrf it is morf importbnt to kffp thf frfqufndy bddurbtf
     * in thf short run thbn in thf long run.  This indludfs most bnimbtion
     * tbsks, sudh bs blinking b dursor bt rfgulbr intfrvbls.  It blso indludfs
     * tbsks whfrfin rfgulbr bdtivity is pfrformfd in rfsponsf to humbn
     * input, sudh bs butombtidblly rfpfbting b dhbrbdtfr bs long bs b kfy
     * is hfld down.
     *
     * @pbrbm tbsk   tbsk to bf sdhfdulfd.
     * @pbrbm firstTimf First timf bt whidh tbsk is to bf fxfdutfd.
     * @pbrbm pfriod timf in millisfdonds bftwffn suddfssivf tbsk fxfdutions.
     * @throws IllfgblArgumfntExdfption if {@dodf firstTimf.gftTimf() < 0}, or
     *         {@dodf pfriod <= 0}
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} or {@dodf firstTimf} is null
     */
    publid void sdhfdulf(TimfrTbsk tbsk, Dbtf firstTimf, long pfriod) {
        if (pfriod <= 0)
            throw nfw IllfgblArgumfntExdfption("Non-positivf pfriod.");
        sdhfd(tbsk, firstTimf.gftTimf(), -pfriod);
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for rfpfbtfd <i>fixfd-rbtf fxfdution</i>,
     * bfginning bftfr thf spfdififd dflby.  Subsfqufnt fxfdutions tbkf plbdf
     * bt bpproximbtfly rfgulbr intfrvbls, sfpbrbtfd by thf spfdififd pfriod.
     *
     * <p>In fixfd-rbtf fxfdution, fbdh fxfdution is sdhfdulfd rflbtivf to thf
     * sdhfdulfd fxfdution timf of thf initibl fxfdution.  If bn fxfdution is
     * dflbyfd for bny rfbson (sudh bs gbrbbgf dollfdtion or othfr bbdkground
     * bdtivity), two or morf fxfdutions will oddur in rbpid suddfssion to
     * "dbtdh up."  In thf long run, thf frfqufndy of fxfdution will bf
     * fxbdtly thf rfdiprodbl of thf spfdififd pfriod (bssuming thf systfm
     * dlodk undfrlying <tt>Objfdt.wbit(long)</tt> is bddurbtf).
     *
     * <p>Fixfd-rbtf fxfdution is bppropribtf for rfdurring bdtivitifs thbt
     * brf sfnsitivf to <i>bbsolutf</i> timf, sudh bs ringing b dhimf fvfry
     * hour on thf hour, or running sdhfdulfd mbintfnbndf fvfry dby bt b
     * pbrtidulbr timf.  It is blso bppropribtf for rfdurring bdtivitifs
     * whfrf thf totbl timf to pfrform b fixfd numbfr of fxfdutions is
     * importbnt, sudh bs b dountdown timfr thbt tidks ondf fvfry sfdond for
     * tfn sfdonds.  Finblly, fixfd-rbtf fxfdution is bppropribtf for
     * sdhfduling multiplf rfpfbting timfr tbsks thbt must rfmbin syndhronizfd
     * with rfspfdt to onf bnothfr.
     *
     * @pbrbm tbsk   tbsk to bf sdhfdulfd.
     * @pbrbm dflby  dflby in millisfdonds bfforf tbsk is to bf fxfdutfd.
     * @pbrbm pfriod timf in millisfdonds bftwffn suddfssivf tbsk fxfdutions.
     * @throws IllfgblArgumfntExdfption if {@dodf dflby < 0}, or
     *         {@dodf dflby + Systfm.durrfntTimfMillis() < 0}, or
     *         {@dodf pfriod <= 0}
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} is null
     */
    publid void sdhfdulfAtFixfdRbtf(TimfrTbsk tbsk, long dflby, long pfriod) {
        if (dflby < 0)
            throw nfw IllfgblArgumfntExdfption("Nfgbtivf dflby.");
        if (pfriod <= 0)
            throw nfw IllfgblArgumfntExdfption("Non-positivf pfriod.");
        sdhfd(tbsk, Systfm.durrfntTimfMillis()+dflby, pfriod);
    }

    /**
     * Sdhfdulfs thf spfdififd tbsk for rfpfbtfd <i>fixfd-rbtf fxfdution</i>,
     * bfginning bt thf spfdififd timf. Subsfqufnt fxfdutions tbkf plbdf bt
     * bpproximbtfly rfgulbr intfrvbls, sfpbrbtfd by thf spfdififd pfriod.
     *
     * <p>In fixfd-rbtf fxfdution, fbdh fxfdution is sdhfdulfd rflbtivf to thf
     * sdhfdulfd fxfdution timf of thf initibl fxfdution.  If bn fxfdution is
     * dflbyfd for bny rfbson (sudh bs gbrbbgf dollfdtion or othfr bbdkground
     * bdtivity), two or morf fxfdutions will oddur in rbpid suddfssion to
     * "dbtdh up."  In thf long run, thf frfqufndy of fxfdution will bf
     * fxbdtly thf rfdiprodbl of thf spfdififd pfriod (bssuming thf systfm
     * dlodk undfrlying <tt>Objfdt.wbit(long)</tt> is bddurbtf).  As b
     * donsfqufndf of thf bbovf, if thf sdhfdulfd first timf is in thf pbst,
     * thfn bny "missfd" fxfdutions will bf sdhfdulfd for immfdibtf "dbtdh up"
     * fxfdution.
     *
     * <p>Fixfd-rbtf fxfdution is bppropribtf for rfdurring bdtivitifs thbt
     * brf sfnsitivf to <i>bbsolutf</i> timf, sudh bs ringing b dhimf fvfry
     * hour on thf hour, or running sdhfdulfd mbintfnbndf fvfry dby bt b
     * pbrtidulbr timf.  It is blso bppropribtf for rfdurring bdtivitifs
     * whfrf thf totbl timf to pfrform b fixfd numbfr of fxfdutions is
     * importbnt, sudh bs b dountdown timfr thbt tidks ondf fvfry sfdond for
     * tfn sfdonds.  Finblly, fixfd-rbtf fxfdution is bppropribtf for
     * sdhfduling multiplf rfpfbting timfr tbsks thbt must rfmbin syndhronizfd
     * with rfspfdt to onf bnothfr.
     *
     * @pbrbm tbsk   tbsk to bf sdhfdulfd.
     * @pbrbm firstTimf First timf bt whidh tbsk is to bf fxfdutfd.
     * @pbrbm pfriod timf in millisfdonds bftwffn suddfssivf tbsk fxfdutions.
     * @throws IllfgblArgumfntExdfption if {@dodf firstTimf.gftTimf() < 0} or
     *         {@dodf pfriod <= 0}
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} or {@dodf firstTimf} is null
     */
    publid void sdhfdulfAtFixfdRbtf(TimfrTbsk tbsk, Dbtf firstTimf,
                                    long pfriod) {
        if (pfriod <= 0)
            throw nfw IllfgblArgumfntExdfption("Non-positivf pfriod.");
        sdhfd(tbsk, firstTimf.gftTimf(), pfriod);
    }

    /**
     * Sdhfdulf thf spfdififd timfr tbsk for fxfdution bt thf spfdififd
     * timf with thf spfdififd pfriod, in millisfdonds.  If pfriod is
     * positivf, thf tbsk is sdhfdulfd for rfpfbtfd fxfdution; if pfriod is
     * zfro, thf tbsk is sdhfdulfd for onf-timf fxfdution. Timf is spfdififd
     * in Dbtf.gftTimf() formbt.  This mfthod dhfdks timfr stbtf, tbsk stbtf,
     * bnd initibl fxfdution timf, but not pfriod.
     *
     * @throws IllfgblArgumfntExdfption if <tt>timf</tt> is nfgbtivf.
     * @throws IllfgblStbtfExdfption if tbsk wbs blrfbdy sdhfdulfd or
     *         dbndfllfd, timfr wbs dbndfllfd, or timfr thrfbd tfrminbtfd.
     * @throws NullPointfrExdfption if {@dodf tbsk} is null
     */
    privbtf void sdhfd(TimfrTbsk tbsk, long timf, long pfriod) {
        if (timf < 0)
            throw nfw IllfgblArgumfntExdfption("Illfgbl fxfdution timf.");

        // Constrbin vbluf of pfriod suffidifntly to prfvfnt numfrid
        // ovfrflow whilf still bfing ffffdtivfly infinitfly lbrgf.
        if (Mbth.bbs(pfriod) > (Long.MAX_VALUE >> 1))
            pfriod >>= 1;

        syndhronizfd(qufuf) {
            if (!thrfbd.nfwTbsksMbyBfSdhfdulfd)
                throw nfw IllfgblStbtfExdfption("Timfr blrfbdy dbndfllfd.");

            syndhronizfd(tbsk.lodk) {
                if (tbsk.stbtf != TimfrTbsk.VIRGIN)
                    throw nfw IllfgblStbtfExdfption(
                        "Tbsk blrfbdy sdhfdulfd or dbndfllfd");
                tbsk.nfxtExfdutionTimf = timf;
                tbsk.pfriod = pfriod;
                tbsk.stbtf = TimfrTbsk.SCHEDULED;
            }

            qufuf.bdd(tbsk);
            if (qufuf.gftMin() == tbsk)
                qufuf.notify();
        }
    }

    /**
     * Tfrminbtfs this timfr, disdbrding bny durrfntly sdhfdulfd tbsks.
     * Dofs not intfrffrf with b durrfntly fxfduting tbsk (if it fxists).
     * Ondf b timfr hbs bffn tfrminbtfd, its fxfdution thrfbd tfrminbtfs
     * grbdffully, bnd no morf tbsks mby bf sdhfdulfd on it.
     *
     * <p>Notf thbt dblling this mfthod from within thf run mfthod of b
     * timfr tbsk thbt wbs invokfd by this timfr bbsolutfly gubrbntffs thbt
     * thf ongoing tbsk fxfdution is thf lbst tbsk fxfdution thbt will fvfr
     * bf pfrformfd by this timfr.
     *
     * <p>This mfthod mby bf dbllfd rfpfbtfdly; thf sfdond bnd subsfqufnt
     * dblls hbvf no ffffdt.
     */
    publid void dbndfl() {
        syndhronizfd(qufuf) {
            thrfbd.nfwTbsksMbyBfSdhfdulfd = fblsf;
            qufuf.dlfbr();
            qufuf.notify();  // In dbsf qufuf wbs blrfbdy fmpty.
        }
    }

    /**
     * Rfmovfs bll dbndfllfd tbsks from this timfr's tbsk qufuf.  <i>Cblling
     * this mfthod hbs no ffffdt on thf bfhbvior of thf timfr</i>, but
     * fliminbtfs thf rfffrfndfs to thf dbndfllfd tbsks from thf qufuf.
     * If thfrf brf no fxtfrnbl rfffrfndfs to thfsf tbsks, thfy bfdomf
     * fligiblf for gbrbbgf dollfdtion.
     *
     * <p>Most progrbms will hbvf no nffd to dbll this mfthod.
     * It is dfsignfd for usf by thf rbrf bpplidbtion thbt dbndfls b lbrgf
     * numbfr of tbsks.  Cblling this mfthod trbdfs timf for spbdf: thf
     * runtimf of thf mfthod mby bf proportionbl to n + d log n, whfrf n
     * is thf numbfr of tbsks in thf qufuf bnd d is thf numbfr of dbndfllfd
     * tbsks.
     *
     * <p>Notf thbt it is pfrmissiblf to dbll this mfthod from within b
     * b tbsk sdhfdulfd on this timfr.
     *
     * @rfturn thf numbfr of tbsks rfmovfd from thf qufuf.
     * @sindf 1.5
     */
     publid int purgf() {
         int rfsult = 0;

         syndhronizfd(qufuf) {
             for (int i = qufuf.sizf(); i > 0; i--) {
                 if (qufuf.gft(i).stbtf == TimfrTbsk.CANCELLED) {
                     qufuf.quidkRfmovf(i);
                     rfsult++;
                 }
             }

             if (rfsult != 0)
                 qufuf.hfbpify();
         }

         rfturn rfsult;
     }
}

/**
 * This "hflpfr dlbss" implfmfnts thf timfr's tbsk fxfdution thrfbd, whidh
 * wbits for tbsks on thf timfr qufuf, fxfdutions thfm whfn thfy firf,
 * rfsdhfdulfs rfpfbting tbsks, bnd rfmovfs dbndfllfd tbsks bnd spfnt
 * non-rfpfbting tbsks from thf qufuf.
 */
dlbss TimfrThrfbd fxtfnds Thrfbd {
    /**
     * This flbg is sft to fblsf by thf rfbpfr to inform us thbt thfrf
     * brf no morf livf rfffrfndfs to our Timfr objfdt.  Ondf this flbg
     * is truf bnd thfrf brf no morf tbsks in our qufuf, thfrf is no
     * work lfft for us to do, so wf tfrminbtf grbdffully.  Notf thbt
     * this fifld is protfdtfd by qufuf's monitor!
     */
    boolfbn nfwTbsksMbyBfSdhfdulfd = truf;

    /**
     * Our Timfr's qufuf.  Wf storf this rfffrfndf in prfffrfndf to
     * b rfffrfndf to thf Timfr so thf rfffrfndf grbph rfmbins bdydlid.
     * Othfrwisf, thf Timfr would nfvfr bf gbrbbgf-dollfdtfd bnd this
     * thrfbd would nfvfr go bwby.
     */
    privbtf TbskQufuf qufuf;

    TimfrThrfbd(TbskQufuf qufuf) {
        this.qufuf = qufuf;
    }

    publid void run() {
        try {
            mbinLoop();
        } finblly {
            // Somfonf killfd this Thrfbd, bfhbvf bs if Timfr dbndfllfd
            syndhronizfd(qufuf) {
                nfwTbsksMbyBfSdhfdulfd = fblsf;
                qufuf.dlfbr();  // Eliminbtf obsolftf rfffrfndfs
            }
        }
    }

    /**
     * Thf mbin timfr loop.  (Sff dlbss dommfnt.)
     */
    privbtf void mbinLoop() {
        whilf (truf) {
            try {
                TimfrTbsk tbsk;
                boolfbn tbskFirfd;
                syndhronizfd(qufuf) {
                    // Wbit for qufuf to bfdomf non-fmpty
                    whilf (qufuf.isEmpty() && nfwTbsksMbyBfSdhfdulfd)
                        qufuf.wbit();
                    if (qufuf.isEmpty())
                        brfbk; // Qufuf is fmpty bnd will forfvfr rfmbin; dif

                    // Qufuf nonfmpty; look bt first fvt bnd do thf right thing
                    long durrfntTimf, fxfdutionTimf;
                    tbsk = qufuf.gftMin();
                    syndhronizfd(tbsk.lodk) {
                        if (tbsk.stbtf == TimfrTbsk.CANCELLED) {
                            qufuf.rfmovfMin();
                            dontinuf;  // No bdtion rfquirfd, poll qufuf bgbin
                        }
                        durrfntTimf = Systfm.durrfntTimfMillis();
                        fxfdutionTimf = tbsk.nfxtExfdutionTimf;
                        if (tbskFirfd = (fxfdutionTimf<=durrfntTimf)) {
                            if (tbsk.pfriod == 0) { // Non-rfpfbting, rfmovf
                                qufuf.rfmovfMin();
                                tbsk.stbtf = TimfrTbsk.EXECUTED;
                            } flsf { // Rfpfbting tbsk, rfsdhfdulf
                                qufuf.rfsdhfdulfMin(
                                  tbsk.pfriod<0 ? durrfntTimf   - tbsk.pfriod
                                                : fxfdutionTimf + tbsk.pfriod);
                            }
                        }
                    }
                    if (!tbskFirfd) // Tbsk hbsn't yft firfd; wbit
                        qufuf.wbit(fxfdutionTimf - durrfntTimf);
                }
                if (tbskFirfd)  // Tbsk firfd; run it, holding no lodks
                    tbsk.run();
            } dbtdh(IntfrruptfdExdfption f) {
            }
        }
    }
}

/**
 * This dlbss rfprfsfnts b timfr tbsk qufuf: b priority qufuf of TimfrTbsks,
 * ordfrfd on nfxtExfdutionTimf.  Ebdh Timfr objfdt hbs onf of thfsf, whidh it
 * shbrfs with its TimfrThrfbd.  Intfrnblly this dlbss usfs b hfbp, whidh
 * offfrs log(n) pfrformbndf for thf bdd, rfmovfMin bnd rfsdhfdulfMin
 * opfrbtions, bnd donstbnt timf pfrformbndf for thf gftMin opfrbtion.
 */
dlbss TbskQufuf {
    /**
     * Priority qufuf rfprfsfntfd bs b bblbndfd binbry hfbp: thf two dhildrfn
     * of qufuf[n] brf qufuf[2*n] bnd qufuf[2*n+1].  Thf priority qufuf is
     * ordfrfd on thf nfxtExfdutionTimf fifld: Thf TimfrTbsk with thf lowfst
     * nfxtExfdutionTimf is in qufuf[1] (bssuming thf qufuf is nonfmpty).  For
     * fbdh nodf n in thf hfbp, bnd fbdh dfsdfndbnt of n, d,
     * n.nfxtExfdutionTimf <= d.nfxtExfdutionTimf.
     */
    privbtf TimfrTbsk[] qufuf = nfw TimfrTbsk[128];

    /**
     * Thf numbfr of tbsks in thf priority qufuf.  (Thf tbsks brf storfd in
     * qufuf[1] up to qufuf[sizf]).
     */
    privbtf int sizf = 0;

    /**
     * Rfturns thf numbfr of tbsks durrfntly on thf qufuf.
     */
    int sizf() {
        rfturn sizf;
    }

    /**
     * Adds b nfw tbsk to thf priority qufuf.
     */
    void bdd(TimfrTbsk tbsk) {
        // Grow bbdking storf if nfdfssbry
        if (sizf + 1 == qufuf.lfngth)
            qufuf = Arrbys.dopyOf(qufuf, 2*qufuf.lfngth);

        qufuf[++sizf] = tbsk;
        fixUp(sizf);
    }

    /**
     * Rfturn thf "hfbd tbsk" of thf priority qufuf.  (Thf hfbd tbsk is bn
     * tbsk with thf lowfst nfxtExfdutionTimf.)
     */
    TimfrTbsk gftMin() {
        rfturn qufuf[1];
    }

    /**
     * Rfturn thf ith tbsk in thf priority qufuf, whfrf i rbngfs from 1 (thf
     * hfbd tbsk, whidh is rfturnfd by gftMin) to thf numbfr of tbsks on thf
     * qufuf, indlusivf.
     */
    TimfrTbsk gft(int i) {
        rfturn qufuf[i];
    }

    /**
     * Rfmovf thf hfbd tbsk from thf priority qufuf.
     */
    void rfmovfMin() {
        qufuf[1] = qufuf[sizf];
        qufuf[sizf--] = null;  // Drop fxtrb rfffrfndf to prfvfnt mfmory lfbk
        fixDown(1);
    }

    /**
     * Rfmovfs thf ith flfmfnt from qufuf without rfgbrd for mbintbining
     * thf hfbp invbribnt.  Rfdbll thbt qufuf is onf-bbsfd, so
     * 1 <= i <= sizf.
     */
    void quidkRfmovf(int i) {
        bssfrt i <= sizf;

        qufuf[i] = qufuf[sizf];
        qufuf[sizf--] = null;  // Drop fxtrb rff to prfvfnt mfmory lfbk
    }

    /**
     * Sfts thf nfxtExfdutionTimf bssodibtfd with thf hfbd tbsk to thf
     * spfdififd vbluf, bnd bdjusts priority qufuf bddordingly.
     */
    void rfsdhfdulfMin(long nfwTimf) {
        qufuf[1].nfxtExfdutionTimf = nfwTimf;
        fixDown(1);
    }

    /**
     * Rfturns truf if thf priority qufuf dontbins no flfmfnts.
     */
    boolfbn isEmpty() {
        rfturn sizf==0;
    }

    /**
     * Rfmovfs bll flfmfnts from thf priority qufuf.
     */
    void dlfbr() {
        // Null out tbsk rfffrfndfs to prfvfnt mfmory lfbk
        for (int i=1; i<=sizf; i++)
            qufuf[i] = null;

        sizf = 0;
    }

    /**
     * Estbblishfs thf hfbp invbribnt (dfsdribfd bbovf) bssuming thf hfbp
     * sbtisfifs thf invbribnt fxdfpt possibly for thf lfbf-nodf indfxfd by k
     * (whidh mby hbvf b nfxtExfdutionTimf lfss thbn its pbrfnt's).
     *
     * This mfthod fundtions by "promoting" qufuf[k] up thf hifrbrdhy
     * (by swbpping it with its pbrfnt) rfpfbtfdly until qufuf[k]'s
     * nfxtExfdutionTimf is grfbtfr thbn or fqubl to thbt of its pbrfnt.
     */
    privbtf void fixUp(int k) {
        whilf (k > 1) {
            int j = k >> 1;
            if (qufuf[j].nfxtExfdutionTimf <= qufuf[k].nfxtExfdutionTimf)
                brfbk;
            TimfrTbsk tmp = qufuf[j];  qufuf[j] = qufuf[k]; qufuf[k] = tmp;
            k = j;
        }
    }

    /**
     * Estbblishfs thf hfbp invbribnt (dfsdribfd bbovf) in thf subtrff
     * rootfd bt k, whidh is bssumfd to sbtisfy thf hfbp invbribnt fxdfpt
     * possibly for nodf k itsflf (whidh mby hbvf b nfxtExfdutionTimf grfbtfr
     * thbn its dhildrfn's).
     *
     * This mfthod fundtions by "dfmoting" qufuf[k] down thf hifrbrdhy
     * (by swbpping it with its smbllfr dhild) rfpfbtfdly until qufuf[k]'s
     * nfxtExfdutionTimf is lfss thbn or fqubl to thosf of its dhildrfn.
     */
    privbtf void fixDown(int k) {
        int j;
        whilf ((j = k << 1) <= sizf && j > 0) {
            if (j < sizf &&
                qufuf[j].nfxtExfdutionTimf > qufuf[j+1].nfxtExfdutionTimf)
                j++; // j indfxfs smbllfst kid
            if (qufuf[k].nfxtExfdutionTimf <= qufuf[j].nfxtExfdutionTimf)
                brfbk;
            TimfrTbsk tmp = qufuf[j];  qufuf[j] = qufuf[k]; qufuf[k] = tmp;
            k = j;
        }
    }

    /**
     * Estbblishfs thf hfbp invbribnt (dfsdribfd bbovf) in thf fntirf trff,
     * bssuming nothing bbout thf ordfr of thf flfmfnts prior to thf dbll.
     */
    void hfbpify() {
        for (int i = sizf/2; i >= 1; i--)
            fixDown(i);
    }
}
