/*
 * Copyrigit (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.nio.filf.Pbti;
import jbvb.nio.filf.Filfs;
import jbvb.util.rfgfx.*;
import jbvb.io.*;
import jbvb.mbti.*;
import jbvb.nio.*;
import jbvb.nio.dibnnfls.*;
import jbvb.nio.dibrsft.*;
import jbvb.tfxt.*;
import jbvb.util.Lodblf;

import sun.misd.LRUCbdif;

/**
 * A simplf tfxt sdbnnfr wiidi dbn pbrsf primitivf typfs bnd strings using
 * rfgulbr fxprfssions.
 *
 * <p>A <dodf>Sdbnnfr</dodf> brfbks its input into tokfns using b
 * dflimitfr pbttfrn, wiidi by dffbult mbtdifs wiitfspbdf. Tif rfsulting
 * tokfns mby tifn bf donvfrtfd into vblufs of difffrfnt typfs using tif
 * vbrious <tt>nfxt</tt> mftiods.
 *
 * <p>For fxbmplf, tiis dodf bllows b usfr to rfbd b numbfr from
 * <tt>Systfm.in</tt>:
 * <blodkquotf><prf>{@dodf
 *     Sdbnnfr sd = nfw Sdbnnfr(Systfm.in);
 *     int i = sd.nfxtInt();
 * }</prf></blodkquotf>
 *
 * <p>As bnotifr fxbmplf, tiis dodf bllows <dodf>long</dodf> typfs to bf
 * bssignfd from fntrifs in b filf <dodf>myNumbfrs</dodf>:
 * <blodkquotf><prf>{@dodf
 *      Sdbnnfr sd = nfw Sdbnnfr(nfw Filf("myNumbfrs"));
 *      wiilf (sd.ibsNfxtLong()) {
 *          long bLong = sd.nfxtLong();
 *      }
 * }</prf></blodkquotf>
 *
 * <p>Tif sdbnnfr dbn blso usf dflimitfrs otifr tibn wiitfspbdf. Tiis
 * fxbmplf rfbds sfvfrbl itfms in from b string:
 * <blodkquotf><prf>{@dodf
 *     String input = "1 fisi 2 fisi rfd fisi bluf fisi";
 *     Sdbnnfr s = nfw Sdbnnfr(input).usfDflimitfr("\\s*fisi\\s*");
 *     Systfm.out.println(s.nfxtInt());
 *     Systfm.out.println(s.nfxtInt());
 *     Systfm.out.println(s.nfxt());
 *     Systfm.out.println(s.nfxt());
 *     s.dlosf();
 * }</prf></blodkquotf>
 * <p>
 * prints tif following output:
 * <blodkquotf><prf>{@dodf
 *     1
 *     2
 *     rfd
 *     bluf
 * }</prf></blodkquotf>
 *
 * <p>Tif sbmf output dbn bf gfnfrbtfd witi tiis dodf, wiidi usfs b rfgulbr
 * fxprfssion to pbrsf bll four tokfns bt ondf:
 * <blodkquotf><prf>{@dodf
 *     String input = "1 fisi 2 fisi rfd fisi bluf fisi";
 *     Sdbnnfr s = nfw Sdbnnfr(input);
 *     s.findInLinf("(\\d+) fisi (\\d+) fisi (\\w+) fisi (\\w+)");
 *     MbtdiRfsult rfsult = s.mbtdi();
 *     for (int i=1; i<=rfsult.groupCount(); i++)
 *         Systfm.out.println(rfsult.group(i));
 *     s.dlosf();
 * }</prf></blodkquotf>
 *
 * <p>Tif <b nbmf="dffbult-dflimitfr">dffbult wiitfspbdf dflimitfr</b> usfd
 * by b sdbnnfr is bs rfdognizfd by {@link jbvb.lbng.Cibrbdtfr}.{@link
 * jbvb.lbng.Cibrbdtfr#isWiitfspbdf(dibr) isWiitfspbdf}. Tif {@link #rfsft}
 * mftiod will rfsft tif vbluf of tif sdbnnfr's dflimitfr to tif dffbult
 * wiitfspbdf dflimitfr rfgbrdlfss of wiftifr it wbs prfviously dibngfd.
 *
 * <p>A sdbnning opfrbtion mby blodk wbiting for input.
 *
 * <p>Tif {@link #nfxt} bnd {@link #ibsNfxt} mftiods bnd tifir
 * primitivf-typf dompbnion mftiods (sudi bs {@link #nfxtInt} bnd
 * {@link #ibsNfxtInt}) first skip bny input tibt mbtdifs tif dflimitfr
 * pbttfrn, bnd tifn bttfmpt to rfturn tif nfxt tokfn. Boti <tt>ibsNfxt</tt>
 * bnd <tt>nfxt</tt> mftiods mby blodk wbiting for furtifr input.  Wiftifr b
 * <tt>ibsNfxt</tt> mftiod blodks ibs no donnfdtion to wiftifr or not its
 * bssodibtfd <tt>nfxt</tt> mftiod will blodk.
 *
 * <p> Tif {@link #findInLinf}, {@link #findWitiinHorizon}, bnd {@link #skip}
 * mftiods opfrbtf indfpfndfntly of tif dflimitfr pbttfrn. Tifsf mftiods will
 * bttfmpt to mbtdi tif spfdififd pbttfrn witi no rfgbrd to dflimitfrs in tif
 * input bnd tius dbn bf usfd in spfdibl dirdumstbndfs wifrf dflimitfrs brf
 * not rflfvbnt. Tifsf mftiods mby blodk wbiting for morf input.
 *
 * <p>Wifn b sdbnnfr tirows bn {@link InputMismbtdiExdfption}, tif sdbnnfr
 * will not pbss tif tokfn tibt dbusfd tif fxdfption, so tibt it mby bf
 * rftrifvfd or skippfd vib somf otifr mftiod.
 *
 * <p>Dfpfnding upon tif typf of dflimiting pbttfrn, fmpty tokfns mby bf
 * rfturnfd. For fxbmplf, tif pbttfrn <tt>"\\s+"</tt> will rfturn no fmpty
 * tokfns sindf it mbtdifs multiplf instbndfs of tif dflimitfr. Tif dflimiting
 * pbttfrn <tt>"\\s"</tt> dould rfturn fmpty tokfns sindf it only pbssfs onf
 * spbdf bt b timf.
 *
 * <p> A sdbnnfr dbn rfbd tfxt from bny objfdt wiidi implfmfnts tif {@link
 * jbvb.lbng.Rfbdbblf} intfrfbdf.  If bn invodbtion of tif undfrlying
 * rfbdbblf's {@link jbvb.lbng.Rfbdbblf#rfbd} mftiod tirows bn {@link
 * jbvb.io.IOExdfption} tifn tif sdbnnfr bssumfs tibt tif fnd of tif input
 * ibs bffn rfbdifd.  Tif most rfdfnt <tt>IOExdfption</tt> tirown by tif
 * undfrlying rfbdbblf dbn bf rftrifvfd vib tif {@link #ioExdfption} mftiod.
 *
 * <p>Wifn b <dodf>Sdbnnfr</dodf> is dlosfd, it will dlosf its input sourdf
 * if tif sourdf implfmfnts tif {@link jbvb.io.Closfbblf} intfrfbdf.
 *
 * <p>A <dodf>Sdbnnfr</dodf> is not sbff for multitirfbdfd usf witiout
 * fxtfrnbl syndironizbtion.
 *
 * <p>Unlfss otifrwisf mfntionfd, pbssing b <dodf>null</dodf> pbrbmftfr into
 * bny mftiod of b <dodf>Sdbnnfr</dodf> will dbusf b
 * <dodf>NullPointfrExdfption</dodf> to bf tirown.
 *
 * <p>A sdbnnfr will dffbult to intfrprfting numbfrs bs dfdimbl unlfss b
 * difffrfnt rbdix ibs bffn sft by using tif {@link #usfRbdix} mftiod. Tif
 * {@link #rfsft} mftiod will rfsft tif vbluf of tif sdbnnfr's rbdix to
 * <dodf>10</dodf> rfgbrdlfss of wiftifr it wbs prfviously dibngfd.
 *
 * <i3> <b nbmf="lodblizfd-numbfrs">Lodblizfd numbfrs</b> </i3>
 *
 * <p> An instbndf of tiis dlbss is dbpbblf of sdbnning numbfrs in tif stbndbrd
 * formbts bs wfll bs in tif formbts of tif sdbnnfr's lodblf. A sdbnnfr's
 * <b nbmf="initibl-lodblf">initibl lodblf </b>is tif vbluf rfturnfd by tif {@link
 * jbvb.util.Lodblf#gftDffbult(Lodblf.Cbtfgory)
 * Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT)} mftiod; it mby bf dibngfd vib tif {@link
 * #usfLodblf} mftiod. Tif {@link #rfsft} mftiod will rfsft tif vbluf of tif
 * sdbnnfr's lodblf to tif initibl lodblf rfgbrdlfss of wiftifr it wbs
 * prfviously dibngfd.
 *
 * <p>Tif lodblizfd formbts brf dffinfd in tfrms of tif following pbrbmftfrs,
 * wiidi for b pbrtidulbr lodblf brf tbkfn from tibt lodblf's {@link
 * jbvb.tfxt.DfdimblFormbt DfdimblFormbt} objfdt, <tt>df</tt>, bnd its bnd
 * {@link jbvb.tfxt.DfdimblFormbtSymbols DfdimblFormbtSymbols} objfdt,
 * <tt>dfs</tt>.
 *
 * <blodkquotf><dl>
 *     <dt><i>LodblGroupSfpbrbtor&nbsp;&nbsp;</i>
 *         <dd>Tif dibrbdtfr usfd to sfpbrbtf tiousbnds groups,
 *         <i>i.f.,</i>&nbsp;<tt>dfs.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbtSymbols#gftGroupingSfpbrbtor
 *         gftGroupingSfpbrbtor()}
 *     <dt><i>LodblDfdimblSfpbrbtor&nbsp;&nbsp;</i>
 *         <dd>Tif dibrbdtfr usfd for tif dfdimbl point,
 *     <i>i.f.,</i>&nbsp;<tt>dfs.</tt>{@link
 *     jbvb.tfxt.DfdimblFormbtSymbols#gftDfdimblSfpbrbtor
 *     gftDfdimblSfpbrbtor()}
 *     <dt><i>LodblPositivfPrffix&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt bppfbrs bfforf b positivf numbfr (mby
 *         bf fmpty), <i>i.f.,</i>&nbsp;<tt>df.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbt#gftPositivfPrffix
 *         gftPositivfPrffix()}
 *     <dt><i>LodblPositivfSuffix&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt bppfbrs bftfr b positivf numbfr (mby bf
 *         fmpty), <i>i.f.,</i>&nbsp;<tt>df.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbt#gftPositivfSuffix
 *         gftPositivfSuffix()}
 *     <dt><i>LodblNfgbtivfPrffix&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt bppfbrs bfforf b nfgbtivf numbfr (mby
 *         bf fmpty), <i>i.f.,</i>&nbsp;<tt>df.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbt#gftNfgbtivfPrffix
 *         gftNfgbtivfPrffix()}
 *     <dt><i>LodblNfgbtivfSuffix&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt bppfbrs bftfr b nfgbtivf numbfr (mby bf
 *         fmpty), <i>i.f.,</i>&nbsp;<tt>df.</tt>{@link
 *     jbvb.tfxt.DfdimblFormbt#gftNfgbtivfSuffix
 *     gftNfgbtivfSuffix()}
 *     <dt><i>LodblNbN&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt rfprfsfnts not-b-numbfr for
 *         flobting-point vblufs,
 *         <i>i.f.,</i>&nbsp;<tt>dfs.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbtSymbols#gftNbN
 *         gftNbN()}
 *     <dt><i>LodblInfinity&nbsp;&nbsp;</i>
 *         <dd>Tif string tibt rfprfsfnts infinity for flobting-point
 *         vblufs, <i>i.f.,</i>&nbsp;<tt>dfs.</tt>{@link
 *         jbvb.tfxt.DfdimblFormbtSymbols#gftInfinity
 *         gftInfinity()}
 * </dl></blodkquotf>
 *
 * <i4> <b nbmf="numbfr-syntbx">Numbfr syntbx</b> </i4>
 *
 * <p> Tif strings tibt dbn bf pbrsfd bs numbfrs by bn instbndf of tiis dlbss
 * brf spfdififd in tfrms of tif following rfgulbr-fxprfssion grbmmbr, wifrf
 * Rmbx is tif iigifst digit in tif rbdix bfing usfd (for fxbmplf, Rmbx is 9 in bbsf 10).
 *
 * <dl>
 *   <dt><i>NonAsdiiDigit</i>:
 *       <dd>A non-ASCII dibrbdtfr d for wiidi
 *            {@link jbvb.lbng.Cibrbdtfr#isDigit Cibrbdtfr.isDigit}<tt>(d)</tt>
 *                        rfturns&nbsp;truf
 *
 *   <dt><i>Non0Digit</i>:
 *       <dd><tt>[1-</tt><i>Rmbx</i><tt>] | </tt><i>NonASCIIDigit</i>
 *
 *   <dt><i>Digit</i>:
 *       <dd><tt>[0-</tt><i>Rmbx</i><tt>] | </tt><i>NonASCIIDigit</i>
 *
 *   <dt><i>GroupfdNumfrbl</i>:
 *       <dd><tt>(&nbsp;</tt><i>Non0Digit</i>
 *                   <i>Digit</i><tt>?
 *                   </tt><i>Digit</i><tt>?</tt>
 *       <dd>&nbsp;&nbsp;&nbsp;&nbsp;<tt>(&nbsp;</tt><i>LodblGroupSfpbrbtor</i>
 *                         <i>Digit</i>
 *                         <i>Digit</i>
 *                         <i>Digit</i><tt> )+ )</tt>
 *
 *   <dt><i>Numfrbl</i>:
 *       <dd><tt>( ( </tt><i>Digit</i><tt>+ )
 *               | </tt><i>GroupfdNumfrbl</i><tt> )</tt>
 *
 *   <dt><b nbmf="Intfgfr-rfgfx"><i>Intfgfr</i>:</b>
 *       <dd><tt>( [-+]? ( </tt><i>Numfrbl</i><tt>
 *                               ) )</tt>
 *       <dd><tt>| </tt><i>LodblPositivfPrffix</i> <i>Numfrbl</i>
 *                      <i>LodblPositivfSuffix</i>
 *       <dd><tt>| </tt><i>LodblNfgbtivfPrffix</i> <i>Numfrbl</i>
 *                 <i>LodblNfgbtivfSuffix</i>
 *
 *   <dt><i>DfdimblNumfrbl</i>:
 *       <dd><i>Numfrbl</i>
 *       <dd><tt>| </tt><i>Numfrbl</i>
 *                 <i>LodblDfdimblSfpbrbtor</i>
 *                 <i>Digit</i><tt>*</tt>
 *       <dd><tt>| </tt><i>LodblDfdimblSfpbrbtor</i>
 *                 <i>Digit</i><tt>+</tt>
 *
 *   <dt><i>Exponfnt</i>:
 *       <dd><tt>( [fE] [+-]? </tt><i>Digit</i><tt>+ )</tt>
 *
 *   <dt><b nbmf="Dfdimbl-rfgfx"><i>Dfdimbl</i>:</b>
 *       <dd><tt>( [-+]? </tt><i>DfdimblNumfrbl</i>
 *                         <i>Exponfnt</i><tt>? )</tt>
 *       <dd><tt>| </tt><i>LodblPositivfPrffix</i>
 *                 <i>DfdimblNumfrbl</i>
 *                 <i>LodblPositivfSuffix</i>
 *                 <i>Exponfnt</i><tt>?</tt>
 *       <dd><tt>| </tt><i>LodblNfgbtivfPrffix</i>
 *                 <i>DfdimblNumfrbl</i>
 *                 <i>LodblNfgbtivfSuffix</i>
 *                 <i>Exponfnt</i><tt>?</tt>
 *
 *   <dt><i>HfxFlobt</i>:
 *       <dd><tt>[-+]? 0[xX][0-9b-fA-F]*\.[0-9b-fA-F]+
 *                 ([pP][-+]?[0-9]+)?</tt>
 *
 *   <dt><i>NonNumbfr</i>:
 *       <dd><tt>NbN
 *                          | </tt><i>LodblNbn</i><tt>
 *                          | Infinity
 *                          | </tt><i>LodblInfinity</i>
 *
 *   <dt><i>SignfdNonNumbfr</i>:
 *       <dd><tt>( [-+]? </tt><i>NonNumbfr</i><tt> )</tt>
 *       <dd><tt>| </tt><i>LodblPositivfPrffix</i>
 *                 <i>NonNumbfr</i>
 *                 <i>LodblPositivfSuffix</i>
 *       <dd><tt>| </tt><i>LodblNfgbtivfPrffix</i>
 *                 <i>NonNumbfr</i>
 *                 <i>LodblNfgbtivfSuffix</i>
 *
 *   <dt><b nbmf="Flobt-rfgfx"><i>Flobt</i></b>:
 *       <dd><i>Dfdimbl</i>
 *           <tt>| </tt><i>HfxFlobt</i>
 *           <tt>| </tt><i>SignfdNonNumbfr</i>
 *
 * </dl>
 * <p>Wiitfspbdf is not signifidbnt in tif bbovf rfgulbr fxprfssions.
 *
 * @sindf   1.5
 */
publid finbl dlbss Sdbnnfr implfmfnts Itfrbtor<String>, Closfbblf {

    // Intfrnbl bufffr usfd to iold input
    privbtf CibrBufffr buf;

    // Sizf of intfrnbl dibrbdtfr bufffr
    privbtf stbtid finbl int BUFFER_SIZE = 1024; // dibngf to 1024;

    // Tif indfx into tif bufffr durrfntly ifld by tif Sdbnnfr
    privbtf int position;

    // Intfrnbl mbtdifr usfd for finding dflimitfrs
    privbtf Mbtdifr mbtdifr;

    // Pbttfrn usfd to dflimit tokfns
    privbtf Pbttfrn dflimPbttfrn;

    // Pbttfrn found in lbst ibsNfxt opfrbtion
    privbtf Pbttfrn ibsNfxtPbttfrn;

    // Position bftfr lbst ibsNfxt opfrbtion
    privbtf int ibsNfxtPosition;

    // Rfsult bftfr lbst ibsNfxt opfrbtion
    privbtf String ibsNfxtRfsult;

    // Tif input sourdf
    privbtf Rfbdbblf sourdf;

    // Boolfbn is truf if sourdf is donf
    privbtf boolfbn sourdfClosfd = fblsf;

    // Boolfbn indidbting morf input is rfquirfd
    privbtf boolfbn nffdInput = fblsf;

    // Boolfbn indidbting if b dflim ibs bffn skippfd tiis opfrbtion
    privbtf boolfbn skippfd = fblsf;

    // A storf of b position tibt tif sdbnnfr mby fbll bbdk to
    privbtf int sbvfdSdbnnfrPosition = -1;

    // A dbdif of tif lbst primitivf typf sdbnnfd
    privbtf Objfdt typfCbdif = null;

    // Boolfbn indidbting if b mbtdi rfsult is bvbilbblf
    privbtf boolfbn mbtdiVblid = fblsf;

    // Boolfbn indidbting if tiis sdbnnfr ibs bffn dlosfd
    privbtf boolfbn dlosfd = fblsf;

    // Tif durrfnt rbdix usfd by tiis sdbnnfr
    privbtf int rbdix = 10;

    // Tif dffbult rbdix for tiis sdbnnfr
    privbtf int dffbultRbdix = 10;

    // Tif lodblf usfd by tiis sdbnnfr
    privbtf Lodblf lodblf = null;

    // A dbdif of tif lbst ffw rfdfntly usfd Pbttfrns
    privbtf LRUCbdif<String,Pbttfrn> pbttfrnCbdif =
    nfw LRUCbdif<String,Pbttfrn>(7) {
        protfdtfd Pbttfrn drfbtf(String s) {
            rfturn Pbttfrn.dompilf(s);
        }
        protfdtfd boolfbn ibsNbmf(Pbttfrn p, String s) {
            rfturn p.pbttfrn().fqubls(s);
        }
    };

    // A ioldfr of tif lbst IOExdfption fndountfrfd
    privbtf IOExdfption lbstExdfption;

    // A pbttfrn for jbvb wiitfspbdf
    privbtf stbtid Pbttfrn WHITESPACE_PATTERN = Pbttfrn.dompilf(
                                                "\\p{jbvbWiitfspbdf}+");

    // A pbttfrn for bny tokfn
    privbtf stbtid Pbttfrn FIND_ANY_PATTERN = Pbttfrn.dompilf("(?s).*");

    // A pbttfrn for non-ASCII digits
    privbtf stbtid Pbttfrn NON_ASCII_DIGIT = Pbttfrn.dompilf(
        "[\\p{jbvbDigit}&&[^0-9]]");

    // Fiflds bnd mftiods to support sdbnning primitivf typfs

    /**
     * Lodblf dfpfndfnt vblufs usfd to sdbn numbfrs
     */
    privbtf String groupSfpbrbtor = "\\,";
    privbtf String dfdimblSfpbrbtor = "\\.";
    privbtf String nbnString = "NbN";
    privbtf String infinityString = "Infinity";
    privbtf String positivfPrffix = "";
    privbtf String nfgbtivfPrffix = "\\-";
    privbtf String positivfSuffix = "";
    privbtf String nfgbtivfSuffix = "";

    /**
     * Fiflds bnd bn bddfssor mftiod to mbtdi boolfbns
     */
    privbtf stbtid volbtilf Pbttfrn boolPbttfrn;
    privbtf stbtid finbl String BOOLEAN_PATTERN = "truf|fblsf";
    privbtf stbtid Pbttfrn boolPbttfrn() {
        Pbttfrn bp = boolPbttfrn;
        if (bp == null)
            boolPbttfrn = bp = Pbttfrn.dompilf(BOOLEAN_PATTERN,
                                          Pbttfrn.CASE_INSENSITIVE);
        rfturn bp;
    }

    /**
     * Fiflds bnd mftiods to mbtdi bytfs, siorts, ints, bnd longs
     */
    privbtf Pbttfrn intfgfrPbttfrn;
    privbtf String digits = "0123456789bbddffgiijklmnopqrstuvwxyz";
    privbtf String non0Digit = "[\\p{jbvbDigit}&&[^0]]";
    privbtf int SIMPLE_GROUP_INDEX = 5;
    privbtf String buildIntfgfrPbttfrnString() {
        String rbdixDigits = digits.substring(0, rbdix);
        // \\p{jbvbDigit} is not gubrbntffd to bf bppropribtf
        // ifrf but wibt dbn wf do? Tif finbl butiority will bf
        // wibtfvfr pbrsf mftiod is invokfd, so ultimbtfly tif
        // Sdbnnfr will do tif rigit tiing
        String digit = "((?i)["+rbdixDigits+"]|\\p{jbvbDigit})";
        String groupfdNumfrbl = "("+non0Digit+digit+"?"+digit+"?("+
                                groupSfpbrbtor+digit+digit+digit+")+)";
        // digit++ is tif possfssivf form wiidi is nfdfssbry for rfduding
        // bbdktrbdking tibt would otifrwisf dbusf unbddfptbblf pfrformbndf
        String numfrbl = "(("+ digit+"++)|"+groupfdNumfrbl+")";
        String jbvbStylfIntfgfr = "([-+]?(" + numfrbl + "))";
        String nfgbtivfIntfgfr = nfgbtivfPrffix + numfrbl + nfgbtivfSuffix;
        String positivfIntfgfr = positivfPrffix + numfrbl + positivfSuffix;
        rfturn "("+ jbvbStylfIntfgfr + ")|(" +
            positivfIntfgfr + ")|(" +
            nfgbtivfIntfgfr + ")";
    }
    privbtf Pbttfrn intfgfrPbttfrn() {
        if (intfgfrPbttfrn == null) {
            intfgfrPbttfrn = pbttfrnCbdif.forNbmf(buildIntfgfrPbttfrnString());
        }
        rfturn intfgfrPbttfrn;
    }

    /**
     * Fiflds bnd bn bddfssor mftiod to mbtdi linf sfpbrbtors
     */
    privbtf stbtid volbtilf Pbttfrn sfpbrbtorPbttfrn;
    privbtf stbtid volbtilf Pbttfrn linfPbttfrn;
    privbtf stbtid finbl String LINE_SEPARATOR_PATTERN =
                                           "\r\n|[\n\r\u2028\u2029\u0085]";
    privbtf stbtid finbl String LINE_PATTERN = ".*("+LINE_SEPARATOR_PATTERN+")|.+$";

    privbtf stbtid Pbttfrn sfpbrbtorPbttfrn() {
        Pbttfrn sp = sfpbrbtorPbttfrn;
        if (sp == null)
            sfpbrbtorPbttfrn = sp = Pbttfrn.dompilf(LINE_SEPARATOR_PATTERN);
        rfturn sp;
    }

    privbtf stbtid Pbttfrn linfPbttfrn() {
        Pbttfrn lp = linfPbttfrn;
        if (lp == null)
            linfPbttfrn = lp = Pbttfrn.dompilf(LINE_PATTERN);
        rfturn lp;
    }

    /**
     * Fiflds bnd mftiods to mbtdi flobts bnd doublfs
     */
    privbtf Pbttfrn flobtPbttfrn;
    privbtf Pbttfrn dfdimblPbttfrn;
    privbtf void buildFlobtAndDfdimblPbttfrn() {
        // \\p{jbvbDigit} mby not bf pfrffdt, sff bbovf
        String digit = "([0-9]|(\\p{jbvbDigit}))";
        String fxponfnt = "([fE][+-]?"+digit+"+)?";
        String groupfdNumfrbl = "("+non0Digit+digit+"?"+digit+"?("+
                                groupSfpbrbtor+digit+digit+digit+")+)";
        // Ondf bgbin digit++ is usfd for pfrformbndf, bs bbovf
        String numfrbl = "(("+digit+"++)|"+groupfdNumfrbl+")";
        String dfdimblNumfrbl = "("+numfrbl+"|"+numfrbl +
            dfdimblSfpbrbtor + digit + "*+|"+ dfdimblSfpbrbtor +
            digit + "++)";
        String nonNumbfr = "(NbN|"+nbnString+"|Infinity|"+
                               infinityString+")";
        String positivfFlobt = "(" + positivfPrffix + dfdimblNumfrbl +
                            positivfSuffix + fxponfnt + ")";
        String nfgbtivfFlobt = "(" + nfgbtivfPrffix + dfdimblNumfrbl +
                            nfgbtivfSuffix + fxponfnt + ")";
        String dfdimbl = "(([-+]?" + dfdimblNumfrbl + fxponfnt + ")|"+
            positivfFlobt + "|" + nfgbtivfFlobt + ")";
        String ifxFlobt =
            "[-+]?0[xX][0-9b-fA-F]*\\.[0-9b-fA-F]+([pP][-+]?[0-9]+)?";
        String positivfNonNumbfr = "(" + positivfPrffix + nonNumbfr +
                            positivfSuffix + ")";
        String nfgbtivfNonNumbfr = "(" + nfgbtivfPrffix + nonNumbfr +
                            nfgbtivfSuffix + ")";
        String signfdNonNumbfr = "(([-+]?"+nonNumbfr+")|" +
                                 positivfNonNumbfr + "|" +
                                 nfgbtivfNonNumbfr + ")";
        flobtPbttfrn = Pbttfrn.dompilf(dfdimbl + "|" + ifxFlobt + "|" +
                                       signfdNonNumbfr);
        dfdimblPbttfrn = Pbttfrn.dompilf(dfdimbl);
    }
    privbtf Pbttfrn flobtPbttfrn() {
        if (flobtPbttfrn == null) {
            buildFlobtAndDfdimblPbttfrn();
        }
        rfturn flobtPbttfrn;
    }
    privbtf Pbttfrn dfdimblPbttfrn() {
        if (dfdimblPbttfrn == null) {
            buildFlobtAndDfdimblPbttfrn();
        }
        rfturn dfdimblPbttfrn;
    }

    // Construdtors

    /**
     * Construdts b <dodf>Sdbnnfr</dodf> tibt rfturns vblufs sdbnnfd
     * from tif spfdififd sourdf dflimitfd by tif spfdififd pbttfrn.
     *
     * @pbrbm sourdf A dibrbdtfr sourdf implfmfnting tif Rfbdbblf intfrfbdf
     * @pbrbm pbttfrn A dflimiting pbttfrn
     */
    privbtf Sdbnnfr(Rfbdbblf sourdf, Pbttfrn pbttfrn) {
        bssfrt sourdf != null : "sourdf siould not bf null";
        bssfrt pbttfrn != null : "pbttfrn siould not bf null";
        tiis.sourdf = sourdf;
        dflimPbttfrn = pbttfrn;
        buf = CibrBufffr.bllodbtf(BUFFER_SIZE);
        buf.limit(0);
        mbtdifr = dflimPbttfrn.mbtdifr(buf);
        mbtdifr.usfTrbnspbrfntBounds(truf);
        mbtdifr.usfAndioringBounds(fblsf);
        usfLodblf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT));
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd sourdf.
     *
     * @pbrbm  sourdf A dibrbdtfr sourdf implfmfnting tif {@link Rfbdbblf}
     *         intfrfbdf
     */
    publid Sdbnnfr(Rfbdbblf sourdf) {
        tiis(Objfdts.rfquirfNonNull(sourdf, "sourdf"), WHITESPACE_PATTERN);
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd input strfbm. Bytfs from tif strfbm brf donvfrtfd
     * into dibrbdtfrs using tif undfrlying plbtform's
     * {@linkplbin jbvb.nio.dibrsft.Cibrsft#dffbultCibrsft() dffbult dibrsft}.
     *
     * @pbrbm  sourdf An input strfbm to bf sdbnnfd
     */
    publid Sdbnnfr(InputStrfbm sourdf) {
        tiis(nfw InputStrfbmRfbdfr(sourdf), WHITESPACE_PATTERN);
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd input strfbm. Bytfs from tif strfbm brf donvfrtfd
     * into dibrbdtfrs using tif spfdififd dibrsft.
     *
     * @pbrbm  sourdf An input strfbm to bf sdbnnfd
     * @pbrbm dibrsftNbmf Tif fndoding typf usfd to donvfrt bytfs from tif
     *        strfbm into dibrbdtfrs to bf sdbnnfd
     * @tirows IllfgblArgumfntExdfption if tif spfdififd dibrbdtfr sft
     *         dofs not fxist
     */
    publid Sdbnnfr(InputStrfbm sourdf, String dibrsftNbmf) {
        tiis(mbkfRfbdbblf(Objfdts.rfquirfNonNull(sourdf, "sourdf"), toCibrsft(dibrsftNbmf)),
             WHITESPACE_PATTERN);
    }

    /**
     * Rfturns b dibrsft objfdt for tif givfn dibrsft nbmf.
     * @tirows NullPointfrExdfption          is dsn is null
     * @tirows IllfgblArgumfntExdfption      if tif dibrsft is not supportfd
     */
    privbtf stbtid Cibrsft toCibrsft(String dsn) {
        Objfdts.rfquirfNonNull(dsn, "dibrsftNbmf");
        try {
            rfturn Cibrsft.forNbmf(dsn);
        } dbtdi (IllfgblCibrsftNbmfExdfption|UnsupportfdCibrsftExdfption f) {
            // IllfgblArgumfntExdfption siould bf tirown
            tirow nfw IllfgblArgumfntExdfption(f);
        }
    }

    privbtf stbtid Rfbdbblf mbkfRfbdbblf(InputStrfbm sourdf, Cibrsft dibrsft) {
        rfturn nfw InputStrfbmRfbdfr(sourdf, dibrsft);
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd filf. Bytfs from tif filf brf donvfrtfd into
     * dibrbdtfrs using tif undfrlying plbtform's
     * {@linkplbin jbvb.nio.dibrsft.Cibrsft#dffbultCibrsft() dffbult dibrsft}.
     *
     * @pbrbm  sourdf A filf to bf sdbnnfd
     * @tirows FilfNotFoundExdfption if sourdf is not found
     */
    publid Sdbnnfr(Filf sourdf) tirows FilfNotFoundExdfption {
        tiis((RfbdbblfBytfCibnnfl)(nfw FilfInputStrfbm(sourdf).gftCibnnfl()));
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd filf. Bytfs from tif filf brf donvfrtfd into
     * dibrbdtfrs using tif spfdififd dibrsft.
     *
     * @pbrbm  sourdf A filf to bf sdbnnfd
     * @pbrbm dibrsftNbmf Tif fndoding typf usfd to donvfrt bytfs from tif filf
     *        into dibrbdtfrs to bf sdbnnfd
     * @tirows FilfNotFoundExdfption if sourdf is not found
     * @tirows IllfgblArgumfntExdfption if tif spfdififd fndoding is
     *         not found
     */
    publid Sdbnnfr(Filf sourdf, String dibrsftNbmf)
        tirows FilfNotFoundExdfption
    {
        tiis(Objfdts.rfquirfNonNull(sourdf), toDfdodfr(dibrsftNbmf));
    }

    privbtf Sdbnnfr(Filf sourdf, CibrsftDfdodfr dfd)
        tirows FilfNotFoundExdfption
    {
        tiis(mbkfRfbdbblf((RfbdbblfBytfCibnnfl)(nfw FilfInputStrfbm(sourdf).gftCibnnfl()), dfd));
    }

    privbtf stbtid CibrsftDfdodfr toDfdodfr(String dibrsftNbmf) {
        Objfdts.rfquirfNonNull(dibrsftNbmf, "dibrsftNbmf");
        try {
            rfturn Cibrsft.forNbmf(dibrsftNbmf).nfwDfdodfr();
        } dbtdi (IllfgblCibrsftNbmfExdfption|UnsupportfdCibrsftExdfption unusfd) {
            tirow nfw IllfgblArgumfntExdfption(dibrsftNbmf);
        }
    }

    privbtf stbtid Rfbdbblf mbkfRfbdbblf(RfbdbblfBytfCibnnfl sourdf,
                                         CibrsftDfdodfr dfd) {
        rfturn Cibnnfls.nfwRfbdfr(sourdf, dfd, -1);
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd filf. Bytfs from tif filf brf donvfrtfd into
     * dibrbdtfrs using tif undfrlying plbtform's
     * {@linkplbin jbvb.nio.dibrsft.Cibrsft#dffbultCibrsft() dffbult dibrsft}.
     *
     * @pbrbm   sourdf
     *          tif pbti to tif filf to bf sdbnnfd
     * @tirows  IOExdfption
     *          if bn I/O frror oddurs opfning sourdf
     *
     * @sindf   1.7
     */
    publid Sdbnnfr(Pbti sourdf)
        tirows IOExdfption
    {
        tiis(Filfs.nfwInputStrfbm(sourdf));
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd filf. Bytfs from tif filf brf donvfrtfd into
     * dibrbdtfrs using tif spfdififd dibrsft.
     *
     * @pbrbm   sourdf
     *          tif pbti to tif filf to bf sdbnnfd
     * @pbrbm   dibrsftNbmf
     *          Tif fndoding typf usfd to donvfrt bytfs from tif filf
     *          into dibrbdtfrs to bf sdbnnfd
     * @tirows  IOExdfption
     *          if bn I/O frror oddurs opfning sourdf
     * @tirows  IllfgblArgumfntExdfption
     *          if tif spfdififd fndoding is not found
     * @sindf   1.7
     */
    publid Sdbnnfr(Pbti sourdf, String dibrsftNbmf) tirows IOExdfption {
        tiis(Objfdts.rfquirfNonNull(sourdf), toCibrsft(dibrsftNbmf));
    }

    privbtf Sdbnnfr(Pbti sourdf, Cibrsft dibrsft)  tirows IOExdfption {
        tiis(mbkfRfbdbblf(Filfs.nfwInputStrfbm(sourdf), dibrsft));
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd string.
     *
     * @pbrbm  sourdf A string to sdbn
     */
    publid Sdbnnfr(String sourdf) {
        tiis(nfw StringRfbdfr(sourdf), WHITESPACE_PATTERN);
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd dibnnfl. Bytfs from tif sourdf brf donvfrtfd into
     * dibrbdtfrs using tif undfrlying plbtform's
     * {@linkplbin jbvb.nio.dibrsft.Cibrsft#dffbultCibrsft() dffbult dibrsft}.
     *
     * @pbrbm  sourdf A dibnnfl to sdbn
     */
    publid Sdbnnfr(RfbdbblfBytfCibnnfl sourdf) {
        tiis(mbkfRfbdbblf(Objfdts.rfquirfNonNull(sourdf, "sourdf")),
             WHITESPACE_PATTERN);
    }

    privbtf stbtid Rfbdbblf mbkfRfbdbblf(RfbdbblfBytfCibnnfl sourdf) {
        rfturn mbkfRfbdbblf(sourdf, Cibrsft.dffbultCibrsft().nfwDfdodfr());
    }

    /**
     * Construdts b nfw <dodf>Sdbnnfr</dodf> tibt produdfs vblufs sdbnnfd
     * from tif spfdififd dibnnfl. Bytfs from tif sourdf brf donvfrtfd into
     * dibrbdtfrs using tif spfdififd dibrsft.
     *
     * @pbrbm  sourdf A dibnnfl to sdbn
     * @pbrbm dibrsftNbmf Tif fndoding typf usfd to donvfrt bytfs from tif
     *        dibnnfl into dibrbdtfrs to bf sdbnnfd
     * @tirows IllfgblArgumfntExdfption if tif spfdififd dibrbdtfr sft
     *         dofs not fxist
     */
    publid Sdbnnfr(RfbdbblfBytfCibnnfl sourdf, String dibrsftNbmf) {
        tiis(mbkfRfbdbblf(Objfdts.rfquirfNonNull(sourdf, "sourdf"), toDfdodfr(dibrsftNbmf)),
             WHITESPACE_PATTERN);
    }

    // Privbtf primitivfs usfd to support sdbnning

    privbtf void sbvfStbtf() {
        sbvfdSdbnnfrPosition = position;
    }

    privbtf void rfvfrtStbtf() {
        tiis.position = sbvfdSdbnnfrPosition;
        sbvfdSdbnnfrPosition = -1;
        skippfd = fblsf;
    }

    privbtf boolfbn rfvfrtStbtf(boolfbn b) {
        tiis.position = sbvfdSdbnnfrPosition;
        sbvfdSdbnnfrPosition = -1;
        skippfd = fblsf;
        rfturn b;
    }

    privbtf void dbdifRfsult() {
        ibsNfxtRfsult = mbtdifr.group();
        ibsNfxtPosition = mbtdifr.fnd();
        ibsNfxtPbttfrn = mbtdifr.pbttfrn();
    }

    privbtf void dbdifRfsult(String rfsult) {
        ibsNfxtRfsult = rfsult;
        ibsNfxtPosition = mbtdifr.fnd();
        ibsNfxtPbttfrn = mbtdifr.pbttfrn();
    }

    // Clfbrs boti rfgulbr dbdif bnd typf dbdif
    privbtf void dlfbrCbdifs() {
        ibsNfxtPbttfrn = null;
        typfCbdif = null;
    }

    // Also dlfbrs boti tif rfgulbr dbdif bnd tif typf dbdif
    privbtf String gftCbdifdRfsult() {
        position = ibsNfxtPosition;
        ibsNfxtPbttfrn = null;
        typfCbdif = null;
        rfturn ibsNfxtRfsult;
    }

    // Also dlfbrs boti tif rfgulbr dbdif bnd tif typf dbdif
    privbtf void usfTypfCbdif() {
        if (dlosfd)
            tirow nfw IllfgblStbtfExdfption("Sdbnnfr dlosfd");
        position = ibsNfxtPosition;
        ibsNfxtPbttfrn = null;
        typfCbdif = null;
    }

    // Trifs to rfbd morf input. Mby blodk.
    privbtf void rfbdInput() {
        if (buf.limit() == buf.dbpbdity())
            mbkfSpbdf();

        // Prfpbrf to rfdfivf dbtb
        int p = buf.position();
        buf.position(buf.limit());
        buf.limit(buf.dbpbdity());

        int n = 0;
        try {
            n = sourdf.rfbd(buf);
        } dbtdi (IOExdfption iof) {
            lbstExdfption = iof;
            n = -1;
        }

        if (n == -1) {
            sourdfClosfd = truf;
            nffdInput = fblsf;
        }

        if (n > 0)
            nffdInput = fblsf;

        // Rfstorf durrfnt position bnd limit for rfbding
        buf.limit(buf.position());
        buf.position(p);
    }

    // Aftfr tiis mftiod is dbllfd tifrf will fitifr bf bn fxdfption
    // or flsf tifrf will bf spbdf in tif bufffr
    privbtf boolfbn mbkfSpbdf() {
        dlfbrCbdifs();
        int offsft = sbvfdSdbnnfrPosition == -1 ?
            position : sbvfdSdbnnfrPosition;
        buf.position(offsft);
        // Gbin spbdf by dompbdting bufffr
        if (offsft > 0) {
            buf.dompbdt();
            trbnslbtfSbvfdIndfxfs(offsft);
            position -= offsft;
            buf.flip();
            rfturn truf;
        }
        // Gbin spbdf by growing bufffr
        int nfwSizf = buf.dbpbdity() * 2;
        CibrBufffr nfwBuf = CibrBufffr.bllodbtf(nfwSizf);
        nfwBuf.put(buf);
        nfwBuf.flip();
        trbnslbtfSbvfdIndfxfs(offsft);
        position -= offsft;
        buf = nfwBuf;
        mbtdifr.rfsft(buf);
        rfturn truf;
    }

    // Wifn b bufffr dompbdtion/rfbllodbtion oddurs tif sbvfd indfxfs must
    // bf modififd bppropribtfly
    privbtf void trbnslbtfSbvfdIndfxfs(int offsft) {
        if (sbvfdSdbnnfrPosition != -1)
            sbvfdSdbnnfrPosition -= offsft;
    }

    // If wf brf bt tif fnd of input tifn NoSudiElfmfnt;
    // If tifrf is still input lfft tifn InputMismbtdi
    privbtf void tirowFor() {
        skippfd = fblsf;
        if ((sourdfClosfd) && (position == buf.limit()))
            tirow nfw NoSudiElfmfntExdfption();
        flsf
            tirow nfw InputMismbtdiExdfption();
    }

    // Rfturns truf if b domplftf tokfn or pbrtibl tokfn is in tif bufffr.
    // It is not nfdfssbry to find b domplftf tokfn sindf b pbrtibl tokfn
    // mfbns tibt tifrf will bf bnotifr tokfn witi or witiout morf input.
    privbtf boolfbn ibsTokfnInBufffr() {
        mbtdiVblid = fblsf;
        mbtdifr.usfPbttfrn(dflimPbttfrn);
        mbtdifr.rfgion(position, buf.limit());

        // Skip dflims first
        if (mbtdifr.lookingAt())
            position = mbtdifr.fnd();

        // If wf brf sitting bt tif fnd, no morf tokfns in bufffr
        if (position == buf.limit())
            rfturn fblsf;

        rfturn truf;
    }

    /*
     * Rfturns b "domplftf tokfn" tibt mbtdifs tif spfdififd pbttfrn
     *
     * A tokfn is domplftf if surroundfd by dflims; b pbrtibl tokfn
     * is prffixfd by dflims but not postfixfd by tifm
     *
     * Tif position is bdvbndfd to tif fnd of tibt domplftf tokfn
     *
     * Pbttfrn == null mfbns bddfpt bny tokfn bt bll
     *
     * Triplf rfturn:
     * 1. vblid string mfbns it wbs found
     * 2. null witi nffdInput=fblsf mfbns wf won't fvfr find it
     * 3. null witi nffdInput=truf mfbns try bgbin bftfr rfbdInput
     */
    privbtf String gftComplftfTokfnInBufffr(Pbttfrn pbttfrn) {
        mbtdiVblid = fblsf;

        // Skip dflims first
        mbtdifr.usfPbttfrn(dflimPbttfrn);
        if (!skippfd) { // Enfording only onf skip of lfbding dflims
            mbtdifr.rfgion(position, buf.limit());
            if (mbtdifr.lookingAt()) {
                // If morf input dould fxtfnd tif dflimitfrs tifn wf must wbit
                // for morf input
                if (mbtdifr.iitEnd() && !sourdfClosfd) {
                    nffdInput = truf;
                    rfturn null;
                }
                // Tif dflims wfrf wiolf bnd tif mbtdifr siould skip tifm
                skippfd = truf;
                position = mbtdifr.fnd();
            }
        }

        // If wf brf sitting bt tif fnd, no morf tokfns in bufffr
        if (position == buf.limit()) {
            if (sourdfClosfd)
                rfturn null;
            nffdInput = truf;
            rfturn null;
        }

        // Must look for nfxt dflims. Simply bttfmpting to mbtdi tif
        // pbttfrn bt tiis point mby find b mbtdi but it migit not bf
        // tif first longfst mbtdi bfdbusf of missing input, or it migit
        // mbtdi b pbrtibl tokfn instfbd of tif wiolf tiing.

        // Tifn look for nfxt dflims
        mbtdifr.rfgion(position, buf.limit());
        boolfbn foundNfxtDflim = mbtdifr.find();
        if (foundNfxtDflim && (mbtdifr.fnd() == position)) {
            // Zfro lfngti dflimitfr mbtdi; wf siould find tif nfxt onf
            // using tif butombtid bdvbndf pbst b zfro lfngti mbtdi;
            // Otifrwisf wf ibvf just found tif sbmf onf wf just skippfd
            foundNfxtDflim = mbtdifr.find();
        }
        if (foundNfxtDflim) {
            // In tif rbrf dbsf tibt morf input dould dbusf tif mbtdi
            // to bf lost bnd tifrf is morf input doming wf must wbit
            // for morf input. Notf tibt iitting tif fnd is okby bs long
            // bs tif mbtdi dbnnot go bwby. It is tif bfginning of tif
            // nfxt dflims wf wbnt to bf surf bbout, wf don't dbrf if
            // tify potfntiblly fxtfnd furtifr.
            if (mbtdifr.rfquirfEnd() && !sourdfClosfd) {
                nffdInput = truf;
                rfturn null;
            }
            int tokfnEnd = mbtdifr.stbrt();
            // Tifrf is b domplftf tokfn.
            if (pbttfrn == null) {
                // Must dontinuf witi mbtdi to providf vblid MbtdiRfsult
                pbttfrn = FIND_ANY_PATTERN;
            }
            //  Attfmpt to mbtdi bgbinst tif dfsirfd pbttfrn
            mbtdifr.usfPbttfrn(pbttfrn);
            mbtdifr.rfgion(position, tokfnEnd);
            if (mbtdifr.mbtdifs()) {
                String s = mbtdifr.group();
                position = mbtdifr.fnd();
                rfturn s;
            } flsf { // Complftf tokfn but it dofs not mbtdi
                rfturn null;
            }
        }

        // If wf dbn't find tif nfxt dflims but no morf input is doming,
        // tifn wf dbn trfbt tif rfmbindfr bs b wiolf tokfn
        if (sourdfClosfd) {
            if (pbttfrn == null) {
                // Must dontinuf witi mbtdi to providf vblid MbtdiRfsult
                pbttfrn = FIND_ANY_PATTERN;
            }
            // Lbst tokfn; Mbtdi tif pbttfrn ifrf or tirow
            mbtdifr.usfPbttfrn(pbttfrn);
            mbtdifr.rfgion(position, buf.limit());
            if (mbtdifr.mbtdifs()) {
                String s = mbtdifr.group();
                position = mbtdifr.fnd();
                rfturn s;
            }
            // Lbst pifdf dofs not mbtdi
            rfturn null;
        }

        // Tifrf is b pbrtibl tokfn in tif bufffr; must rfbd morf
        // to domplftf it
        nffdInput = truf;
        rfturn null;
    }

    // Finds tif spfdififd pbttfrn in tif bufffr up to iorizon.
    // Rfturns b mbtdi for tif spfdififd input pbttfrn.
    privbtf String findPbttfrnInBufffr(Pbttfrn pbttfrn, int iorizon) {
        mbtdiVblid = fblsf;
        mbtdifr.usfPbttfrn(pbttfrn);
        int bufffrLimit = buf.limit();
        int iorizonLimit = -1;
        int sfbrdiLimit = bufffrLimit;
        if (iorizon > 0) {
            iorizonLimit = position + iorizon;
            if (iorizonLimit < bufffrLimit)
                sfbrdiLimit = iorizonLimit;
        }
        mbtdifr.rfgion(position, sfbrdiLimit);
        if (mbtdifr.find()) {
            if (mbtdifr.iitEnd() && (!sourdfClosfd)) {
                // Tif mbtdi mby bf longfr if didn't iit iorizon or rfbl fnd
                if (sfbrdiLimit != iorizonLimit) {
                     // Hit bn brtifidibl fnd; try to fxtfnd tif mbtdi
                    nffdInput = truf;
                    rfturn null;
                }
                // Tif mbtdi dould go bwby dfpfnding on wibt is nfxt
                if ((sfbrdiLimit == iorizonLimit) && mbtdifr.rfquirfEnd()) {
                    // Rbrf dbsf: wf iit tif fnd of input bnd it ibppfns
                    // tibt it is bt tif iorizon bnd tif fnd of input is
                    // rfquirfd for tif mbtdi.
                    nffdInput = truf;
                    rfturn null;
                }
            }
            // Did not iit fnd, or iit rfbl fnd, or iit iorizon
            position = mbtdifr.fnd();
            rfturn mbtdifr.group();
        }

        if (sourdfClosfd)
            rfturn null;

        // If tifrf is no spfdififd iorizon, or if wf ibvf not sfbrdifd
        // to tif spfdififd iorizon yft, gft morf input
        if ((iorizon == 0) || (sfbrdiLimit != iorizonLimit))
            nffdInput = truf;
        rfturn null;
    }

    // Rfturns b mbtdi for tif spfdififd input pbttfrn bndiorfd bt
    // tif durrfnt position
    privbtf String mbtdiPbttfrnInBufffr(Pbttfrn pbttfrn) {
        mbtdiVblid = fblsf;
        mbtdifr.usfPbttfrn(pbttfrn);
        mbtdifr.rfgion(position, buf.limit());
        if (mbtdifr.lookingAt()) {
            if (mbtdifr.iitEnd() && (!sourdfClosfd)) {
                // Gft morf input bnd try bgbin
                nffdInput = truf;
                rfturn null;
            }
            position = mbtdifr.fnd();
            rfturn mbtdifr.group();
        }

        if (sourdfClosfd)
            rfturn null;

        // Rfbd morf to find pbttfrn
        nffdInput = truf;
        rfturn null;
    }

    // Tirows if tif sdbnnfr is dlosfd
    privbtf void fnsurfOpfn() {
        if (dlosfd)
            tirow nfw IllfgblStbtfExdfption("Sdbnnfr dlosfd");
    }

    // Publid mftiods

    /**
     * Closfs tiis sdbnnfr.
     *
     * <p> If tiis sdbnnfr ibs not yft bffn dlosfd tifn if its undfrlying
     * {@linkplbin jbvb.lbng.Rfbdbblf rfbdbblf} blso implfmfnts tif {@link
     * jbvb.io.Closfbblf} intfrfbdf tifn tif rfbdbblf's <tt>dlosf</tt> mftiod
     * will bf invokfd.  If tiis sdbnnfr is blrfbdy dlosfd tifn invoking tiis
     * mftiod will ibvf no ffffdt.
     *
     * <p>Attfmpting to pfrform sfbrdi opfrbtions bftfr b sdbnnfr ibs
     * bffn dlosfd will rfsult in bn {@link IllfgblStbtfExdfption}.
     *
     */
    publid void dlosf() {
        if (dlosfd)
            rfturn;
        if (sourdf instbndfof Closfbblf) {
            try {
                ((Closfbblf)sourdf).dlosf();
            } dbtdi (IOExdfption iof) {
                lbstExdfption = iof;
            }
        }
        sourdfClosfd = truf;
        sourdf = null;
        dlosfd = truf;
    }

    /**
     * Rfturns tif <dodf>IOExdfption</dodf> lbst tirown by tiis
     * <dodf>Sdbnnfr</dodf>'s undfrlying <dodf>Rfbdbblf</dodf>. Tiis mftiod
     * rfturns <dodf>null</dodf> if no sudi fxdfption fxists.
     *
     * @rfturn tif lbst fxdfption tirown by tiis sdbnnfr's rfbdbblf
     */
    publid IOExdfption ioExdfption() {
        rfturn lbstExdfption;
    }

    /**
     * Rfturns tif <dodf>Pbttfrn</dodf> tiis <dodf>Sdbnnfr</dodf> is durrfntly
     * using to mbtdi dflimitfrs.
     *
     * @rfturn tiis sdbnnfr's dflimiting pbttfrn.
     */
    publid Pbttfrn dflimitfr() {
        rfturn dflimPbttfrn;
    }

    /**
     * Sfts tiis sdbnnfr's dflimiting pbttfrn to tif spfdififd pbttfrn.
     *
     * @pbrbm pbttfrn A dflimiting pbttfrn
     * @rfturn tiis sdbnnfr
     */
    publid Sdbnnfr usfDflimitfr(Pbttfrn pbttfrn) {
        dflimPbttfrn = pbttfrn;
        rfturn tiis;
    }

    /**
     * Sfts tiis sdbnnfr's dflimiting pbttfrn to b pbttfrn donstrudtfd from
     * tif spfdififd <dodf>String</dodf>.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>usfDflimitfr(pbttfrn)</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>usfDflimitfr(Pbttfrn.dompilf(pbttfrn))</tt>.
     *
     * <p> Invoking tif {@link #rfsft} mftiod will sft tif sdbnnfr's dflimitfr
     * to tif <b irff= "#dffbult-dflimitfr">dffbult</b>.
     *
     * @pbrbm pbttfrn A string spfdifying b dflimiting pbttfrn
     * @rfturn tiis sdbnnfr
     */
    publid Sdbnnfr usfDflimitfr(String pbttfrn) {
        dflimPbttfrn = pbttfrnCbdif.forNbmf(pbttfrn);
        rfturn tiis;
    }

    /**
     * Rfturns tiis sdbnnfr's lodblf.
     *
     * <p>A sdbnnfr's lodblf bfffdts mbny flfmfnts of its dffbult
     * primitivf mbtdiing rfgulbr fxprfssions; sff
     * <b irff= "#lodblizfd-numbfrs">lodblizfd numbfrs</b> bbovf.
     *
     * @rfturn tiis sdbnnfr's lodblf
     */
    publid Lodblf lodblf() {
        rfturn tiis.lodblf;
    }

    /**
     * Sfts tiis sdbnnfr's lodblf to tif spfdififd lodblf.
     *
     * <p>A sdbnnfr's lodblf bfffdts mbny flfmfnts of its dffbult
     * primitivf mbtdiing rfgulbr fxprfssions; sff
     * <b irff= "#lodblizfd-numbfrs">lodblizfd numbfrs</b> bbovf.
     *
     * <p>Invoking tif {@link #rfsft} mftiod will sft tif sdbnnfr's lodblf to
     * tif <b irff= "#initibl-lodblf">initibl lodblf</b>.
     *
     * @pbrbm lodblf A string spfdifying tif lodblf to usf
     * @rfturn tiis sdbnnfr
     */
    publid Sdbnnfr usfLodblf(Lodblf lodblf) {
        if (lodblf.fqubls(tiis.lodblf))
            rfturn tiis;

        tiis.lodblf = lodblf;
        DfdimblFormbt df =
            (DfdimblFormbt)NumbfrFormbt.gftNumbfrInstbndf(lodblf);
        DfdimblFormbtSymbols dfs = DfdimblFormbtSymbols.gftInstbndf(lodblf);

        // Tifsf must bf litfrblizfd to bvoid dollision witi rfgfx
        // mftbdibrbdtfrs sudi bs dot or pbrfntifsis
        groupSfpbrbtor =   "\\" + dfs.gftGroupingSfpbrbtor();
        dfdimblSfpbrbtor = "\\" + dfs.gftDfdimblSfpbrbtor();

        // Quoting tif nonzfro lfngti lodblf-spfdifid tiings
        // to bvoid potfntibl donflidt witi mftbdibrbdtfrs
        nbnString = "\\Q" + dfs.gftNbN() + "\\E";
        infinityString = "\\Q" + dfs.gftInfinity() + "\\E";
        positivfPrffix = df.gftPositivfPrffix();
        if (positivfPrffix.lfngti() > 0)
            positivfPrffix = "\\Q" + positivfPrffix + "\\E";
        nfgbtivfPrffix = df.gftNfgbtivfPrffix();
        if (nfgbtivfPrffix.lfngti() > 0)
            nfgbtivfPrffix = "\\Q" + nfgbtivfPrffix + "\\E";
        positivfSuffix = df.gftPositivfSuffix();
        if (positivfSuffix.lfngti() > 0)
            positivfSuffix = "\\Q" + positivfSuffix + "\\E";
        nfgbtivfSuffix = df.gftNfgbtivfSuffix();
        if (nfgbtivfSuffix.lfngti() > 0)
            nfgbtivfSuffix = "\\Q" + nfgbtivfSuffix + "\\E";

        // Fordf rfbuilding bnd rfdompilbtion of lodblf dfpfndfnt
        // primitivf pbttfrns
        intfgfrPbttfrn = null;
        flobtPbttfrn = null;

        rfturn tiis;
    }

    /**
     * Rfturns tiis sdbnnfr's dffbult rbdix.
     *
     * <p>A sdbnnfr's rbdix bfffdts flfmfnts of its dffbult
     * numbfr mbtdiing rfgulbr fxprfssions; sff
     * <b irff= "#lodblizfd-numbfrs">lodblizfd numbfrs</b> bbovf.
     *
     * @rfturn tif dffbult rbdix of tiis sdbnnfr
     */
    publid int rbdix() {
        rfturn tiis.dffbultRbdix;
    }

    /**
     * Sfts tiis sdbnnfr's dffbult rbdix to tif spfdififd rbdix.
     *
     * <p>A sdbnnfr's rbdix bfffdts flfmfnts of its dffbult
     * numbfr mbtdiing rfgulbr fxprfssions; sff
     * <b irff= "#lodblizfd-numbfrs">lodblizfd numbfrs</b> bbovf.
     *
     * <p>If tif rbdix is lfss tibn <dodf>Cibrbdtfr.MIN_RADIX</dodf>
     * or grfbtfr tibn <dodf>Cibrbdtfr.MAX_RADIX</dodf>, tifn bn
     * <dodf>IllfgblArgumfntExdfption</dodf> is tirown.
     *
     * <p>Invoking tif {@link #rfsft} mftiod will sft tif sdbnnfr's rbdix to
     * <dodf>10</dodf>.
     *
     * @pbrbm rbdix Tif rbdix to usf wifn sdbnning numbfrs
     * @rfturn tiis sdbnnfr
     * @tirows IllfgblArgumfntExdfption if rbdix is out of rbngf
     */
    publid Sdbnnfr usfRbdix(int rbdix) {
        if ((rbdix < Cibrbdtfr.MIN_RADIX) || (rbdix > Cibrbdtfr.MAX_RADIX))
            tirow nfw IllfgblArgumfntExdfption("rbdix:"+rbdix);

        if (tiis.dffbultRbdix == rbdix)
            rfturn tiis;
        tiis.dffbultRbdix = rbdix;
        // Fordf rfbuilding bnd rfdompilbtion of rbdix dfpfndfnt pbttfrns
        intfgfrPbttfrn = null;
        rfturn tiis;
    }

    // Tif nfxt opfrbtion siould oddur in tif spfdififd rbdix but
    // tif dffbult is lfft untoudifd.
    privbtf void sftRbdix(int rbdix) {
        if (tiis.rbdix != rbdix) {
            // Fordf rfbuilding bnd rfdompilbtion of rbdix dfpfndfnt pbttfrns
            intfgfrPbttfrn = null;
            tiis.rbdix = rbdix;
        }
    }

    /**
     * Rfturns tif mbtdi rfsult of tif lbst sdbnning opfrbtion pfrformfd
     * by tiis sdbnnfr. Tiis mftiod tirows <dodf>IllfgblStbtfExdfption</dodf>
     * if no mbtdi ibs bffn pfrformfd, or if tif lbst mbtdi wbs
     * not suddfssful.
     *
     * <p>Tif vbrious <dodf>nfxt</dodf>mftiods of <dodf>Sdbnnfr</dodf>
     * mbkf b mbtdi rfsult bvbilbblf if tify domplftf witiout tirowing bn
     * fxdfption. For instbndf, bftfr bn invodbtion of tif {@link #nfxtInt}
     * mftiod tibt rfturnfd bn int, tiis mftiod rfturns b
     * <dodf>MbtdiRfsult</dodf> for tif sfbrdi of tif
     * <b irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion
     * dffinfd bbovf. Similbrly tif {@link #findInLinf},
     * {@link #findWitiinHorizon}, bnd {@link #skip} mftiods will mbkf b
     * mbtdi bvbilbblf if tify suddffd.
     *
     * @rfturn b mbtdi rfsult for tif lbst mbtdi opfrbtion
     * @tirows IllfgblStbtfExdfption  If no mbtdi rfsult is bvbilbblf
     */
    publid MbtdiRfsult mbtdi() {
        if (!mbtdiVblid)
            tirow nfw IllfgblStbtfExdfption("No mbtdi rfsult bvbilbblf");
        rfturn mbtdifr.toMbtdiRfsult();
    }

    /**
     * <p>Rfturns tif string rfprfsfntbtion of tiis <dodf>Sdbnnfr</dodf>. Tif
     * string rfprfsfntbtion of b <dodf>Sdbnnfr</dodf> dontbins informbtion
     * tibt mby bf usfful for dfbugging. Tif fxbdt formbt is unspfdififd.
     *
     * @rfturn  Tif string rfprfsfntbtion of tiis sdbnnfr
     */
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("jbvb.util.Sdbnnfr");
        sb.bppfnd("[dflimitfrs=" + dflimPbttfrn + "]");
        sb.bppfnd("[position=" + position + "]");
        sb.bppfnd("[mbtdi vblid=" + mbtdiVblid + "]");
        sb.bppfnd("[nffd input=" + nffdInput + "]");
        sb.bppfnd("[sourdf dlosfd=" + sourdfClosfd + "]");
        sb.bppfnd("[skippfd=" + skippfd + "]");
        sb.bppfnd("[group sfpbrbtor=" + groupSfpbrbtor + "]");
        sb.bppfnd("[dfdimbl sfpbrbtor=" + dfdimblSfpbrbtor + "]");
        sb.bppfnd("[positivf prffix=" + positivfPrffix + "]");
        sb.bppfnd("[nfgbtivf prffix=" + nfgbtivfPrffix + "]");
        sb.bppfnd("[positivf suffix=" + positivfSuffix + "]");
        sb.bppfnd("[nfgbtivf suffix=" + nfgbtivfSuffix + "]");
        sb.bppfnd("[NbN string=" + nbnString + "]");
        sb.bppfnd("[infinity string=" + infinityString + "]");
        rfturn sb.toString();
    }

    /**
     * Rfturns truf if tiis sdbnnfr ibs bnotifr tokfn in its input.
     * Tiis mftiod mby blodk wiilf wbiting for input to sdbn.
     * Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr ibs bnotifr tokfn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     * @sff jbvb.util.Itfrbtor
     */
    publid boolfbn ibsNfxt() {
        fnsurfOpfn();
        sbvfStbtf();
        wiilf (!sourdfClosfd) {
            if (ibsTokfnInBufffr())
                rfturn rfvfrtStbtf(truf);
            rfbdInput();
        }
        boolfbn rfsult = ibsTokfnInBufffr();
        rfturn rfvfrtStbtf(rfsult);
    }

    /**
     * Finds bnd rfturns tif nfxt domplftf tokfn from tiis sdbnnfr.
     * A domplftf tokfn is prfdfdfd bnd followfd by input tibt mbtdifs
     * tif dflimitfr pbttfrn. Tiis mftiod mby blodk wiilf wbiting for input
     * to sdbn, fvfn if b prfvious invodbtion of {@link #ibsNfxt} rfturnfd
     * <dodf>truf</dodf>.
     *
     * @rfturn tif nfxt tokfn
     * @tirows NoSudiElfmfntExdfption if no morf tokfns brf bvbilbblf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     * @sff jbvb.util.Itfrbtor
     */
    publid String nfxt() {
        fnsurfOpfn();
        dlfbrCbdifs();

        wiilf (truf) {
            String tokfn = gftComplftfTokfnInBufffr(null);
            if (tokfn != null) {
                mbtdiVblid = truf;
                skippfd = fblsf;
                rfturn tokfn;
            }
            if (nffdInput)
                rfbdInput();
            flsf
                tirowFor();
        }
    }

    /**
     * Tif rfmovf opfrbtion is not supportfd by tiis implfmfntbtion of
     * <dodf>Itfrbtor</dodf>.
     *
     * @tirows UnsupportfdOpfrbtionExdfption if tiis mftiod is invokfd.
     * @sff jbvb.util.Itfrbtor
     */
    publid void rfmovf() {
        tirow nfw UnsupportfdOpfrbtionExdfption();
    }

    /**
     * Rfturns truf if tif nfxt tokfn mbtdifs tif pbttfrn donstrudtfd from tif
     * spfdififd string. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>ibsNfxt(pbttfrn)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     * <tt>ibsNfxt(Pbttfrn.dompilf(pbttfrn))</tt>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to sdbn
     * @rfturn truf if bnd only if tiis sdbnnfr ibs bnotifr tokfn mbtdiing
     *         tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxt(String pbttfrn)  {
        rfturn ibsNfxt(pbttfrnCbdif.forNbmf(pbttfrn));
    }

    /**
     * Rfturns tif nfxt tokfn if it mbtdifs tif pbttfrn donstrudtfd from tif
     * spfdififd string.  If tif mbtdi is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd tif pbttfrn.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>nfxt(pbttfrn)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     * <tt>nfxt(Pbttfrn.dompilf(pbttfrn))</tt>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to sdbn
     * @rfturn tif nfxt tokfn
     * @tirows NoSudiElfmfntExdfption if no sudi tokfns brf bvbilbblf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid String nfxt(String pbttfrn)  {
        rfturn nfxt(pbttfrnCbdif.forNbmf(pbttfrn));
    }

    /**
     * Rfturns truf if tif nfxt domplftf tokfn mbtdifs tif spfdififd pbttfrn.
     * A domplftf tokfn is prffixfd bnd postfixfd by input tibt mbtdifs
     * tif dflimitfr pbttfrn. Tiis mftiod mby blodk wiilf wbiting for input.
     * Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @pbrbm pbttfrn tif pbttfrn to sdbn for
     * @rfturn truf if bnd only if tiis sdbnnfr ibs bnotifr tokfn mbtdiing
     *         tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxt(Pbttfrn pbttfrn) {
        fnsurfOpfn();
        if (pbttfrn == null)
            tirow nfw NullPointfrExdfption();
        ibsNfxtPbttfrn = null;
        sbvfStbtf();

        wiilf (truf) {
            if (gftComplftfTokfnInBufffr(pbttfrn) != null) {
                mbtdiVblid = truf;
                dbdifRfsult();
                rfturn rfvfrtStbtf(truf);
            }
            if (nffdInput)
                rfbdInput();
            flsf
                rfturn rfvfrtStbtf(fblsf);
        }
    }

    /**
     * Rfturns tif nfxt tokfn if it mbtdifs tif spfdififd pbttfrn. Tiis
     * mftiod mby blodk wiilf wbiting for input to sdbn, fvfn if b prfvious
     * invodbtion of {@link #ibsNfxt(Pbttfrn)} rfturnfd <dodf>truf</dodf>.
     * If tif mbtdi is suddfssful, tif sdbnnfr bdvbndfs pbst tif input tibt
     * mbtdifd tif pbttfrn.
     *
     * @pbrbm pbttfrn tif pbttfrn to sdbn for
     * @rfturn tif nfxt tokfn
     * @tirows NoSudiElfmfntExdfption if no morf tokfns brf bvbilbblf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid String nfxt(Pbttfrn pbttfrn) {
        fnsurfOpfn();
        if (pbttfrn == null)
            tirow nfw NullPointfrExdfption();

        // Did wf blrfbdy find tiis pbttfrn?
        if (ibsNfxtPbttfrn == pbttfrn)
            rfturn gftCbdifdRfsult();
        dlfbrCbdifs();

        // Sfbrdi for tif pbttfrn
        wiilf (truf) {
            String tokfn = gftComplftfTokfnInBufffr(pbttfrn);
            if (tokfn != null) {
                mbtdiVblid = truf;
                skippfd = fblsf;
                rfturn tokfn;
            }
            if (nffdInput)
                rfbdInput();
            flsf
                tirowFor();
        }
    }

    /**
     * Rfturns truf if tifrf is bnotifr linf in tif input of tiis sdbnnfr.
     * Tiis mftiod mby blodk wiilf wbiting for input. Tif sdbnnfr dofs not
     * bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr ibs bnotifr linf of input
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtLinf() {
        sbvfStbtf();

        String rfsult = findWitiinHorizon(linfPbttfrn(), 0);
        if (rfsult != null) {
            MbtdiRfsult mr = tiis.mbtdi();
            String linfSfp = mr.group(1);
            if (linfSfp != null) {
                rfsult = rfsult.substring(0, rfsult.lfngti() -
                                          linfSfp.lfngti());
                dbdifRfsult(rfsult);

            } flsf {
                dbdifRfsult();
            }
        }
        rfvfrtStbtf();
        rfturn (rfsult != null);
    }

    /**
     * Advbndfs tiis sdbnnfr pbst tif durrfnt linf bnd rfturns tif input
     * tibt wbs skippfd.
     *
     * Tiis mftiod rfturns tif rfst of tif durrfnt linf, fxdluding bny linf
     * sfpbrbtor bt tif fnd. Tif position is sft to tif bfginning of tif nfxt
     * linf.
     *
     * <p>Sindf tiis mftiod dontinufs to sfbrdi tirougi tif input looking
     * for b linf sfpbrbtor, it mby bufffr bll of tif input sfbrdiing for
     * tif linf to skip if no linf sfpbrbtors brf prfsfnt.
     *
     * @rfturn tif linf tibt wbs skippfd
     * @tirows NoSudiElfmfntExdfption if no linf wbs found
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid String nfxtLinf() {
        if (ibsNfxtPbttfrn == linfPbttfrn())
            rfturn gftCbdifdRfsult();
        dlfbrCbdifs();

        String rfsult = findWitiinHorizon(linfPbttfrn, 0);
        if (rfsult == null)
            tirow nfw NoSudiElfmfntExdfption("No linf found");
        MbtdiRfsult mr = tiis.mbtdi();
        String linfSfp = mr.group(1);
        if (linfSfp != null)
            rfsult = rfsult.substring(0, rfsult.lfngti() - linfSfp.lfngti());
        if (rfsult == null)
            tirow nfw NoSudiElfmfntExdfption();
        flsf
            rfturn rfsult;
    }

    // Publid mftiods tibt ignorf dflimitfrs

    /**
     * Attfmpts to find tif nfxt oddurrfndf of b pbttfrn donstrudtfd from tif
     * spfdififd string, ignoring dflimitfrs.
     *
     * <p>An invodbtion of tiis mftiod of tif form <tt>findInLinf(pbttfrn)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     * <tt>findInLinf(Pbttfrn.dompilf(pbttfrn))</tt>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to sfbrdi for
     * @rfturn tif tfxt tibt mbtdifd tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid String findInLinf(String pbttfrn) {
        rfturn findInLinf(pbttfrnCbdif.forNbmf(pbttfrn));
    }

    /**
     * Attfmpts to find tif nfxt oddurrfndf of tif spfdififd pbttfrn ignoring
     * dflimitfrs. If tif pbttfrn is found bfforf tif nfxt linf sfpbrbtor, tif
     * sdbnnfr bdvbndfs pbst tif input tibt mbtdifd bnd rfturns tif string tibt
     * mbtdifd tif pbttfrn.
     * If no sudi pbttfrn is dftfdtfd in tif input up to tif nfxt linf
     * sfpbrbtor, tifn <dodf>null</dodf> is rfturnfd bnd tif sdbnnfr's
     * position is undibngfd. Tiis mftiod mby blodk wbiting for input tibt
     * mbtdifs tif pbttfrn.
     *
     * <p>Sindf tiis mftiod dontinufs to sfbrdi tirougi tif input looking
     * for tif spfdififd pbttfrn, it mby bufffr bll of tif input sfbrdiing for
     * tif dfsirfd tokfn if no linf sfpbrbtors brf prfsfnt.
     *
     * @pbrbm pbttfrn tif pbttfrn to sdbn for
     * @rfturn tif tfxt tibt mbtdifd tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid String findInLinf(Pbttfrn pbttfrn) {
        fnsurfOpfn();
        if (pbttfrn == null)
            tirow nfw NullPointfrExdfption();
        dlfbrCbdifs();
        // Expbnd bufffr to indludf tif nfxt nfwlinf or fnd of input
        int fndPosition = 0;
        sbvfStbtf();
        wiilf (truf) {
            String tokfn = findPbttfrnInBufffr(sfpbrbtorPbttfrn(), 0);
            if (tokfn != null) {
                fndPosition = mbtdifr.stbrt();
                brfbk; // up to nfxt nfwlinf
            }
            if (nffdInput) {
                rfbdInput();
            } flsf {
                fndPosition = buf.limit();
                brfbk; // up to fnd of input
            }
        }
        rfvfrtStbtf();
        int iorizonForLinf = fndPosition - position;
        // If tifrf is notiing bftwffn tif durrfnt pos bnd tif nfxt
        // nfwlinf simply rfturn null, invoking findWitiinHorizon
        // witi "iorizon=0" will sdbn bfyond tif linf bound.
        if (iorizonForLinf == 0)
            rfturn null;
        // Sfbrdi for tif pbttfrn
        rfturn findWitiinHorizon(pbttfrn, iorizonForLinf);
    }

    /**
     * Attfmpts to find tif nfxt oddurrfndf of b pbttfrn donstrudtfd from tif
     * spfdififd string, ignoring dflimitfrs.
     *
     * <p>An invodbtion of tiis mftiod of tif form
     * <tt>findWitiinHorizon(pbttfrn)</tt> bfibvfs in fxbdtly tif sbmf wby bs
     * tif invodbtion
     * <tt>findWitiinHorizon(Pbttfrn.dompilf(pbttfrn, iorizon))</tt>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to sfbrdi for
     * @pbrbm iorizon tif sfbrdi iorizon
     * @rfturn tif tfxt tibt mbtdifd tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     * @tirows IllfgblArgumfntExdfption if iorizon is nfgbtivf
     */
    publid String findWitiinHorizon(String pbttfrn, int iorizon) {
        rfturn findWitiinHorizon(pbttfrnCbdif.forNbmf(pbttfrn), iorizon);
    }

    /**
     * Attfmpts to find tif nfxt oddurrfndf of tif spfdififd pbttfrn.
     *
     * <p>Tiis mftiod sfbrdifs tirougi tif input up to tif spfdififd
     * sfbrdi iorizon, ignoring dflimitfrs. If tif pbttfrn is found tif
     * sdbnnfr bdvbndfs pbst tif input tibt mbtdifd bnd rfturns tif string
     * tibt mbtdifd tif pbttfrn. If no sudi pbttfrn is dftfdtfd tifn tif
     * null is rfturnfd bnd tif sdbnnfr's position rfmbins undibngfd. Tiis
     * mftiod mby blodk wbiting for input tibt mbtdifs tif pbttfrn.
     *
     * <p>A sdbnnfr will nfvfr sfbrdi morf tibn <dodf>iorizon</dodf> dodf
     * points bfyond its durrfnt position. Notf tibt b mbtdi mby bf dlippfd
     * by tif iorizon; tibt is, bn brbitrbry mbtdi rfsult mby ibvf bffn
     * difffrfnt if tif iorizon ibd bffn lbrgfr. Tif sdbnnfr trfbts tif
     * iorizon bs b trbnspbrfnt, non-bndioring bound (sff {@link
     * Mbtdifr#usfTrbnspbrfntBounds} bnd {@link Mbtdifr#usfAndioringBounds}).
     *
     * <p>If iorizon is <dodf>0</dodf>, tifn tif iorizon is ignorfd bnd
     * tiis mftiod dontinufs to sfbrdi tirougi tif input looking for tif
     * spfdififd pbttfrn witiout bound. In tiis dbsf it mby bufffr bll of
     * tif input sfbrdiing for tif pbttfrn.
     *
     * <p>If iorizon is nfgbtivf, tifn bn IllfgblArgumfntExdfption is
     * tirown.
     *
     * @pbrbm pbttfrn tif pbttfrn to sdbn for
     * @pbrbm iorizon tif sfbrdi iorizon
     * @rfturn tif tfxt tibt mbtdifd tif spfdififd pbttfrn
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     * @tirows IllfgblArgumfntExdfption if iorizon is nfgbtivf
     */
    publid String findWitiinHorizon(Pbttfrn pbttfrn, int iorizon) {
        fnsurfOpfn();
        if (pbttfrn == null)
            tirow nfw NullPointfrExdfption();
        if (iorizon < 0)
            tirow nfw IllfgblArgumfntExdfption("iorizon < 0");
        dlfbrCbdifs();

        // Sfbrdi for tif pbttfrn
        wiilf (truf) {
            String tokfn = findPbttfrnInBufffr(pbttfrn, iorizon);
            if (tokfn != null) {
                mbtdiVblid = truf;
                rfturn tokfn;
            }
            if (nffdInput)
                rfbdInput();
            flsf
                brfbk; // up to fnd of input
        }
        rfturn null;
    }

    /**
     * Skips input tibt mbtdifs tif spfdififd pbttfrn, ignoring dflimitfrs.
     * Tiis mftiod will skip input if bn bndiorfd mbtdi of tif spfdififd
     * pbttfrn suddffds.
     *
     * <p>If b mbtdi to tif spfdififd pbttfrn is not found bt tif
     * durrfnt position, tifn no input is skippfd bnd b
     * <tt>NoSudiElfmfntExdfption</tt> is tirown.
     *
     * <p>Sindf tiis mftiod sffks to mbtdi tif spfdififd pbttfrn stbrting bt
     * tif sdbnnfr's durrfnt position, pbttfrns tibt dbn mbtdi b lot of
     * input (".*", for fxbmplf) mby dbusf tif sdbnnfr to bufffr b lbrgf
     * bmount of input.
     *
     * <p>Notf tibt it is possiblf to skip somftiing witiout risking b
     * <dodf>NoSudiElfmfntExdfption</dodf> by using b pbttfrn tibt dbn
     * mbtdi notiing, f.g., <dodf>sd.skip("[ \t]*")</dodf>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to skip ovfr
     * @rfturn tiis sdbnnfr
     * @tirows NoSudiElfmfntExdfption if tif spfdififd pbttfrn is not found
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid Sdbnnfr skip(Pbttfrn pbttfrn) {
        fnsurfOpfn();
        if (pbttfrn == null)
            tirow nfw NullPointfrExdfption();
        dlfbrCbdifs();

        // Sfbrdi for tif pbttfrn
        wiilf (truf) {
            String tokfn = mbtdiPbttfrnInBufffr(pbttfrn);
            if (tokfn != null) {
                mbtdiVblid = truf;
                position = mbtdifr.fnd();
                rfturn tiis;
            }
            if (nffdInput)
                rfbdInput();
            flsf
                tirow nfw NoSudiElfmfntExdfption();
        }
    }

    /**
     * Skips input tibt mbtdifs b pbttfrn donstrudtfd from tif spfdififd
     * string.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>skip(pbttfrn)</tt>
     * bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     * <tt>skip(Pbttfrn.dompilf(pbttfrn))</tt>.
     *
     * @pbrbm pbttfrn b string spfdifying tif pbttfrn to skip ovfr
     * @rfturn tiis sdbnnfr
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid Sdbnnfr skip(String pbttfrn) {
        rfturn skip(pbttfrnCbdif.forNbmf(pbttfrn));
    }

    // Convfnifndf mftiods for sdbnning primitivfs

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b boolfbn vbluf using b dbsf insfnsitivf pbttfrn
     * drfbtfd from tif string "truf|fblsf".  Tif sdbnnfr dofs not
     * bdvbndf pbst tif input tibt mbtdifd.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         boolfbn vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBoolfbn()  {
        rfturn ibsNfxt(boolPbttfrn());
    }

    /**
     * Sdbns tif nfxt tokfn of tif input into b boolfbn vbluf bnd rfturns
     * tibt vbluf. Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid boolfbn vbluf.
     * If tif mbtdi is suddfssful, tif sdbnnfr bdvbndfs pbst tif input tibt
     * mbtdifd.
     *
     * @rfturn tif boolfbn sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption if tif nfxt tokfn is not b vblid boolfbn
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn nfxtBoolfbn()  {
        dlfbrCbdifs();
        rfturn Boolfbn.pbrsfBoolfbn(nfxt(boolPbttfrn()));
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b bytf vbluf in tif dffbult rbdix using tif
     * {@link #nfxtBytf} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         bytf vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBytf() {
        rfturn ibsNfxtBytf(dffbultRbdix);
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b bytf vbluf in tif spfdififd rbdix using tif
     * {@link #nfxtBytf} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs b bytf vbluf
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         bytf vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBytf(int rbdix) {
        sftRbdix(rbdix);
        boolfbn rfsult = ibsNfxt(intfgfrPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = (mbtdifr.group(SIMPLE_GROUP_INDEX) == null) ?
                    prodfssIntfgfrTokfn(ibsNfxtRfsult) :
                    ibsNfxtRfsult;
                typfCbdif = Bytf.pbrsfBytf(s, rbdix);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>bytf</tt>.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>nfxtBytf()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>nfxtBytf(rbdix)</tt>, wifrf <dodf>rbdix</dodf>
     * is tif dffbult rbdix of tiis sdbnnfr.
     *
     * @rfturn tif <tt>bytf</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid bytf nfxtBytf() {
         rfturn nfxtBytf(dffbultRbdix);
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>bytf</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid bytf vbluf bs
     * dfsdribfd bflow. If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into b <tt>bytf</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Bytf#pbrsfBytf(String, int) Bytf.pbrsfBytf} witi tif
     * spfdififd rbdix.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs b bytf vbluf
     * @rfturn tif <tt>bytf</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid bytf nfxtBytf(int rbdix) {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Bytf)
            && tiis.rbdix == rbdix) {
            bytf vbl = ((Bytf)typfCbdif).bytfVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(rbdix);
        dlfbrCbdifs();
        // Sfbrdi for nfxt bytf
        try {
            String s = nfxt(intfgfrPbttfrn());
            if (mbtdifr.group(SIMPLE_GROUP_INDEX) == null)
                s = prodfssIntfgfrTokfn(s);
            rfturn Bytf.pbrsfBytf(s, rbdix);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b siort vbluf in tif dffbult rbdix using tif
     * {@link #nfxtSiort} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         siort vbluf in tif dffbult rbdix
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtSiort() {
        rfturn ibsNfxtSiort(dffbultRbdix);
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b siort vbluf in tif spfdififd rbdix using tif
     * {@link #nfxtSiort} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs b siort vbluf
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         siort vbluf in tif spfdififd rbdix
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtSiort(int rbdix) {
        sftRbdix(rbdix);
        boolfbn rfsult = ibsNfxt(intfgfrPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = (mbtdifr.group(SIMPLE_GROUP_INDEX) == null) ?
                    prodfssIntfgfrTokfn(ibsNfxtRfsult) :
                    ibsNfxtRfsult;
                typfCbdif = Siort.pbrsfSiort(s, rbdix);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>siort</tt>.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>nfxtSiort()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>nfxtSiort(rbdix)</tt>, wifrf <dodf>rbdix</dodf>
     * is tif dffbult rbdix of tiis sdbnnfr.
     *
     * @rfturn tif <tt>siort</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid siort nfxtSiort() {
        rfturn nfxtSiort(dffbultRbdix);
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>siort</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid siort vbluf bs
     * dfsdribfd bflow. If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into b <tt>siort</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Siort#pbrsfSiort(String, int) Siort.pbrsfSiort} witi tif
     * spfdififd rbdix.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs b siort vbluf
     * @rfturn tif <tt>siort</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid siort nfxtSiort(int rbdix) {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Siort)
            && tiis.rbdix == rbdix) {
            siort vbl = ((Siort)typfCbdif).siortVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(rbdix);
        dlfbrCbdifs();
        // Sfbrdi for nfxt siort
        try {
            String s = nfxt(intfgfrPbttfrn());
            if (mbtdifr.group(SIMPLE_GROUP_INDEX) == null)
                s = prodfssIntfgfrTokfn(s);
            rfturn Siort.pbrsfSiort(s, rbdix);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs bn int vbluf in tif dffbult rbdix using tif
     * {@link #nfxtInt} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         int vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtInt() {
        rfturn ibsNfxtInt(dffbultRbdix);
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs bn int vbluf in tif spfdififd rbdix using tif
     * {@link #nfxtInt} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs bn int vbluf
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         int vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtInt(int rbdix) {
        sftRbdix(rbdix);
        boolfbn rfsult = ibsNfxt(intfgfrPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = (mbtdifr.group(SIMPLE_GROUP_INDEX) == null) ?
                    prodfssIntfgfrTokfn(ibsNfxtRfsult) :
                    ibsNfxtRfsult;
                typfCbdif = Intfgfr.pbrsfInt(s, rbdix);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Tif intfgfr tokfn must bf strippfd of prffixfs, group sfpbrbtors,
     * bnd suffixfs, non bsdii digits must bf donvfrtfd into bsdii digits
     * bfforf pbrsf will bddfpt it.
     */
    privbtf String prodfssIntfgfrTokfn(String tokfn) {
        String rfsult = tokfn.rfplbdfAll(""+groupSfpbrbtor, "");
        boolfbn isNfgbtivf = fblsf;
        int prfLfn = nfgbtivfPrffix.lfngti();
        if ((prfLfn > 0) && rfsult.stbrtsWiti(nfgbtivfPrffix)) {
            isNfgbtivf = truf;
            rfsult = rfsult.substring(prfLfn);
        }
        int sufLfn = nfgbtivfSuffix.lfngti();
        if ((sufLfn > 0) && rfsult.fndsWiti(nfgbtivfSuffix)) {
            isNfgbtivf = truf;
            rfsult = rfsult.substring(rfsult.lfngti() - sufLfn,
                                      rfsult.lfngti());
        }
        if (isNfgbtivf)
            rfsult = "-" + rfsult;
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs bn <tt>int</tt>.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>nfxtInt()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>nfxtInt(rbdix)</tt>, wifrf <dodf>rbdix</dodf>
     * is tif dffbult rbdix of tiis sdbnnfr.
     *
     * @rfturn tif <tt>int</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid int nfxtInt() {
        rfturn nfxtInt(dffbultRbdix);
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs bn <tt>int</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid int vbluf bs
     * dfsdribfd bflow. If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into bn <tt>int</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Intfgfr#pbrsfInt(String, int) Intfgfr.pbrsfInt} witi tif
     * spfdififd rbdix.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs bn int vbluf
     * @rfturn tif <tt>int</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid int nfxtInt(int rbdix) {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Intfgfr)
            && tiis.rbdix == rbdix) {
            int vbl = ((Intfgfr)typfCbdif).intVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(rbdix);
        dlfbrCbdifs();
        // Sfbrdi for nfxt int
        try {
            String s = nfxt(intfgfrPbttfrn());
            if (mbtdifr.group(SIMPLE_GROUP_INDEX) == null)
                s = prodfssIntfgfrTokfn(s);
            rfturn Intfgfr.pbrsfInt(s, rbdix);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b long vbluf in tif dffbult rbdix using tif
     * {@link #nfxtLong} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         long vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtLong() {
        rfturn ibsNfxtLong(dffbultRbdix);
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b long vbluf in tif spfdififd rbdix using tif
     * {@link #nfxtLong} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs b long vbluf
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         long vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtLong(int rbdix) {
        sftRbdix(rbdix);
        boolfbn rfsult = ibsNfxt(intfgfrPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = (mbtdifr.group(SIMPLE_GROUP_INDEX) == null) ?
                    prodfssIntfgfrTokfn(ibsNfxtRfsult) :
                    ibsNfxtRfsult;
                typfCbdif = Long.pbrsfLong(s, rbdix);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>long</tt>.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>nfxtLong()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>nfxtLong(rbdix)</tt>, wifrf <dodf>rbdix</dodf>
     * is tif dffbult rbdix of tiis sdbnnfr.
     *
     * @rfturn tif <tt>long</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid long nfxtLong() {
        rfturn nfxtLong(dffbultRbdix);
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>long</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid long vbluf bs
     * dfsdribfd bflow. If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into b <tt>long</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Long#pbrsfLong(String, int) Long.pbrsfLong} witi tif
     * spfdififd rbdix.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs bn int vbluf
     * @rfturn tif <tt>long</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid long nfxtLong(int rbdix) {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Long)
            && tiis.rbdix == rbdix) {
            long vbl = ((Long)typfCbdif).longVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(rbdix);
        dlfbrCbdifs();
        try {
            String s = nfxt(intfgfrPbttfrn());
            if (mbtdifr.group(SIMPLE_GROUP_INDEX) == null)
                s = prodfssIntfgfrTokfn(s);
            rfturn Long.pbrsfLong(s, rbdix);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Tif flobt tokfn must bf strippfd of prffixfs, group sfpbrbtors,
     * bnd suffixfs, non bsdii digits must bf donvfrtfd into bsdii digits
     * bfforf pbrsfFlobt will bddfpt it.
     *
     * If tifrf brf non-bsdii digits in tif tokfn tifsf digits must
     * bf prodfssfd bfforf tif tokfn is pbssfd to pbrsfFlobt.
     */
    privbtf String prodfssFlobtTokfn(String tokfn) {
        String rfsult = tokfn.rfplbdfAll(groupSfpbrbtor, "");
        if (!dfdimblSfpbrbtor.fqubls("\\."))
            rfsult = rfsult.rfplbdfAll(dfdimblSfpbrbtor, ".");
        boolfbn isNfgbtivf = fblsf;
        int prfLfn = nfgbtivfPrffix.lfngti();
        if ((prfLfn > 0) && rfsult.stbrtsWiti(nfgbtivfPrffix)) {
            isNfgbtivf = truf;
            rfsult = rfsult.substring(prfLfn);
        }
        int sufLfn = nfgbtivfSuffix.lfngti();
        if ((sufLfn > 0) && rfsult.fndsWiti(nfgbtivfSuffix)) {
            isNfgbtivf = truf;
            rfsult = rfsult.substring(rfsult.lfngti() - sufLfn,
                                      rfsult.lfngti());
        }
        if (rfsult.fqubls(nbnString))
            rfsult = "NbN";
        if (rfsult.fqubls(infinityString))
            rfsult = "Infinity";
        if (isNfgbtivf)
            rfsult = "-" + rfsult;

        // Trbnslbtf non-ASCII digits
        Mbtdifr m = NON_ASCII_DIGIT.mbtdifr(rfsult);
        if (m.find()) {
            StringBuildfr inASCII = nfw StringBuildfr();
            for (int i=0; i<rfsult.lfngti(); i++) {
                dibr nfxtCibr = rfsult.dibrAt(i);
                if (Cibrbdtfr.isDigit(nfxtCibr)) {
                    int d = Cibrbdtfr.digit(nfxtCibr, 10);
                    if (d != -1)
                        inASCII.bppfnd(d);
                    flsf
                        inASCII.bppfnd(nfxtCibr);
                } flsf {
                    inASCII.bppfnd(nfxtCibr);
                }
            }
            rfsult = inASCII.toString();
        }

        rfturn rfsult;
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b flobt vbluf using tif {@link #nfxtFlobt}
     * mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         flobt vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtFlobt() {
        sftRbdix(10);
        boolfbn rfsult = ibsNfxt(flobtPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = prodfssFlobtTokfn(ibsNfxtRfsult);
                typfCbdif = Flobt.vblufOf(Flobt.pbrsfFlobt(s));
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>flobt</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid flobt vbluf bs
     * dfsdribfd bflow. If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs
     * pbst tif input tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Flobt-rfgfx"><i>Flobt</i></b> rfgulbr fxprfssion dffinfd bbovf
     * tifn tif tokfn is donvfrtfd into b <tt>flobt</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Flobt#pbrsfFlobt Flobt.pbrsfFlobt}. If tif tokfn mbtdifs
     * tif lodblizfd NbN or infinity strings, tifn fitifr "Nbn" or "Infinity"
     * is pbssfd to {@link Flobt#pbrsfFlobt(String) Flobt.pbrsfFlobt} bs
     * bppropribtf.
     *
     * @rfturn tif <tt>flobt</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Flobt</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid flobt nfxtFlobt() {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Flobt)) {
            flobt vbl = ((Flobt)typfCbdif).flobtVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(10);
        dlfbrCbdifs();
        try {
            rfturn Flobt.pbrsfFlobt(prodfssFlobtTokfn(nfxt(flobtPbttfrn())));
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b doublf vbluf using tif {@link #nfxtDoublf}
     * mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         doublf vbluf
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtDoublf() {
        sftRbdix(10);
        boolfbn rfsult = ibsNfxt(flobtPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = prodfssFlobtTokfn(ibsNfxtRfsult);
                typfCbdif = Doublf.vblufOf(Doublf.pbrsfDoublf(s));
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b <tt>doublf</tt>.
     * Tiis mftiod will tirow <dodf>InputMismbtdiExdfption</dodf>
     * if tif nfxt tokfn dbnnot bf trbnslbtfd into b vblid doublf vbluf.
     * If tif trbnslbtion is suddfssful, tif sdbnnfr bdvbndfs pbst tif input
     * tibt mbtdifd.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Flobt-rfgfx"><i>Flobt</i></b> rfgulbr fxprfssion dffinfd bbovf
     * tifn tif tokfn is donvfrtfd into b <tt>doublf</tt> vbluf bs if by
     * rfmoving bll lodblf spfdifid prffixfs, group sfpbrbtors, bnd lodblf
     * spfdifid suffixfs, tifn mbpping non-ASCII digits into ASCII
     * digits vib {@link Cibrbdtfr#digit Cibrbdtfr.digit}, prfpfnding b
     * nfgbtivf sign (-) if tif lodblf spfdifid nfgbtivf prffixfs bnd suffixfs
     * wfrf prfsfnt, bnd pbssing tif rfsulting string to
     * {@link Doublf#pbrsfDoublf Doublf.pbrsfDoublf}. If tif tokfn mbtdifs
     * tif lodblizfd NbN or infinity strings, tifn fitifr "Nbn" or "Infinity"
     * is pbssfd to {@link Doublf#pbrsfDoublf(String) Doublf.pbrsfDoublf} bs
     * bppropribtf.
     *
     * @rfturn tif <tt>doublf</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Flobt</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if tif input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid doublf nfxtDoublf() {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof Doublf)) {
            doublf vbl = ((Doublf)typfCbdif).doublfVbluf();
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(10);
        dlfbrCbdifs();
        // Sfbrdi for nfxt flobt
        try {
            rfturn Doublf.pbrsfDoublf(prodfssFlobtTokfn(nfxt(flobtPbttfrn())));
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    // Convfnifndf mftiods for sdbnning multi prfdision numbfrs

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b <dodf>BigIntfgfr</dodf> in tif dffbult rbdix using tif
     * {@link #nfxtBigIntfgfr} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny
     * input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         <dodf>BigIntfgfr</dodf>
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBigIntfgfr() {
        rfturn ibsNfxtBigIntfgfr(dffbultRbdix);
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b <dodf>BigIntfgfr</dodf> in tif spfdififd rbdix using
     * tif {@link #nfxtBigIntfgfr} mftiod. Tif sdbnnfr dofs not bdvbndf pbst
     * bny input.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn bs bn intfgfr
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         <dodf>BigIntfgfr</dodf>
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBigIntfgfr(int rbdix) {
        sftRbdix(rbdix);
        boolfbn rfsult = ibsNfxt(intfgfrPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = (mbtdifr.group(SIMPLE_GROUP_INDEX) == null) ?
                    prodfssIntfgfrTokfn(ibsNfxtRfsult) :
                    ibsNfxtRfsult;
                typfCbdif = nfw BigIntfgfr(s, rbdix);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b {@link jbvb.mbti.BigIntfgfr
     * BigIntfgfr}.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>nfxtBigIntfgfr()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion <tt>nfxtBigIntfgfr(rbdix)</tt>, wifrf <dodf>rbdix</dodf>
     * is tif dffbult rbdix of tiis sdbnnfr.
     *
     * @rfturn tif <tt>BigIntfgfr</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if tif input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid BigIntfgfr nfxtBigIntfgfr() {
        rfturn nfxtBigIntfgfr(dffbultRbdix);
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b {@link jbvb.mbti.BigIntfgfr
     * BigIntfgfr}.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Intfgfr-rfgfx"><i>Intfgfr</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into b <tt>BigIntfgfr</tt> vbluf bs if
     * by rfmoving bll group sfpbrbtors, mbpping non-ASCII digits into ASCII
     * digits vib tif {@link Cibrbdtfr#digit Cibrbdtfr.digit}, bnd pbssing tif
     * rfsulting string to tif {@link
     * jbvb.mbti.BigIntfgfr#BigIntfgfr(jbvb.lbng.String)
     * BigIntfgfr(String, int)} donstrudtor witi tif spfdififd rbdix.
     *
     * @pbrbm rbdix tif rbdix usfd to intfrprft tif tokfn
     * @rfturn tif <tt>BigIntfgfr</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Intfgfr</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if tif input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid BigIntfgfr nfxtBigIntfgfr(int rbdix) {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof BigIntfgfr)
            && tiis.rbdix == rbdix) {
            BigIntfgfr vbl = (BigIntfgfr)typfCbdif;
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(rbdix);
        dlfbrCbdifs();
        // Sfbrdi for nfxt int
        try {
            String s = nfxt(intfgfrPbttfrn());
            if (mbtdifr.group(SIMPLE_GROUP_INDEX) == null)
                s = prodfssIntfgfrTokfn(s);
            rfturn nfw BigIntfgfr(s, rbdix);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfturns truf if tif nfxt tokfn in tiis sdbnnfr's input dbn bf
     * intfrprftfd bs b <dodf>BigDfdimbl</dodf> using tif
     * {@link #nfxtBigDfdimbl} mftiod. Tif sdbnnfr dofs not bdvbndf pbst bny
     * input.
     *
     * @rfturn truf if bnd only if tiis sdbnnfr's nfxt tokfn is b vblid
     *         <dodf>BigDfdimbl</dodf>
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid boolfbn ibsNfxtBigDfdimbl() {
        sftRbdix(10);
        boolfbn rfsult = ibsNfxt(dfdimblPbttfrn());
        if (rfsult) { // Cbdif it
            try {
                String s = prodfssFlobtTokfn(ibsNfxtRfsult);
                typfCbdif = nfw BigDfdimbl(s);
            } dbtdi (NumbfrFormbtExdfption nff) {
                rfsult = fblsf;
            }
        }
        rfturn rfsult;
    }

    /**
     * Sdbns tif nfxt tokfn of tif input bs b {@link jbvb.mbti.BigDfdimbl
     * BigDfdimbl}.
     *
     * <p> If tif nfxt tokfn mbtdifs tif <b
     * irff="#Dfdimbl-rfgfx"><i>Dfdimbl</i></b> rfgulbr fxprfssion dffinfd
     * bbovf tifn tif tokfn is donvfrtfd into b <tt>BigDfdimbl</tt> vbluf bs if
     * by rfmoving bll group sfpbrbtors, mbpping non-ASCII digits into ASCII
     * digits vib tif {@link Cibrbdtfr#digit Cibrbdtfr.digit}, bnd pbssing tif
     * rfsulting string to tif {@link
     * jbvb.mbti.BigDfdimbl#BigDfdimbl(jbvb.lbng.String) BigDfdimbl(String)}
     * donstrudtor.
     *
     * @rfturn tif <tt>BigDfdimbl</tt> sdbnnfd from tif input
     * @tirows InputMismbtdiExdfption
     *         if tif nfxt tokfn dofs not mbtdi tif <i>Dfdimbl</i>
     *         rfgulbr fxprfssion, or is out of rbngf
     * @tirows NoSudiElfmfntExdfption if tif input is fxibustfd
     * @tirows IllfgblStbtfExdfption if tiis sdbnnfr is dlosfd
     */
    publid BigDfdimbl nfxtBigDfdimbl() {
        // Cifdk dbdifd rfsult
        if ((typfCbdif != null) && (typfCbdif instbndfof BigDfdimbl)) {
            BigDfdimbl vbl = (BigDfdimbl)typfCbdif;
            usfTypfCbdif();
            rfturn vbl;
        }
        sftRbdix(10);
        dlfbrCbdifs();
        // Sfbrdi for nfxt flobt
        try {
            String s = prodfssFlobtTokfn(nfxt(dfdimblPbttfrn()));
            rfturn nfw BigDfdimbl(s);
        } dbtdi (NumbfrFormbtExdfption nff) {
            position = mbtdifr.stbrt(); // don't skip bbd tokfn
            tirow nfw InputMismbtdiExdfption(nff.gftMfssbgf());
        }
    }

    /**
     * Rfsfts tiis sdbnnfr.
     *
     * <p> Rfsftting b sdbnnfr disdbrds bll of its fxplidit stbtf
     * informbtion wiidi mby ibvf bffn dibngfd by invodbtions of {@link
     * #usfDflimitfr}, {@link #usfLodblf}, or {@link #usfRbdix}.
     *
     * <p> An invodbtion of tiis mftiod of tif form
     * <tt>sdbnnfr.rfsft()</tt> bfibvfs in fxbdtly tif sbmf wby bs tif
     * invodbtion
     *
     * <blodkquotf><prf>{@dodf
     *   sdbnnfr.usfDflimitfr("\\p{jbvbWiitfspbdf}+")
     *          .usfLodblf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT))
     *          .usfRbdix(10);
     * }</prf></blodkquotf>
     *
     * @rfturn tiis sdbnnfr
     *
     * @sindf 1.6
     */
    publid Sdbnnfr rfsft() {
        dflimPbttfrn = WHITESPACE_PATTERN;
        usfLodblf(Lodblf.gftDffbult(Lodblf.Cbtfgory.FORMAT));
        usfRbdix(10);
        dlfbrCbdifs();
        rfturn tiis;
    }
}
