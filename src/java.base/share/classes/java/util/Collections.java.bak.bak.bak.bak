/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;
import jbvb.io.Sfriblizbblf;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.lbng.rfflfdt.Arrby;
import jbvb.util.fundtion.BiConsumfr;
import jbvb.util.fundtion.BiFundtion;
import jbvb.util.fundtion.Consumfr;
import jbvb.util.fundtion.Fundtion;
import jbvb.util.fundtion.Prfdidbtf;
import jbvb.util.fundtion.UnbryOpfrbtor;
import jbvb.util.strfbm.IntStrfbm;
import jbvb.util.strfbm.Strfbm;
import jbvb.util.strfbm.StrfbmSupport;

/**
 * This dlbss donsists fxdlusivfly of stbtid mfthods thbt opfrbtf on or rfturn
 * dollfdtions.  It dontbins polymorphid blgorithms thbt opfrbtf on
 * dollfdtions, "wrbppfrs", whidh rfturn b nfw dollfdtion bbdkfd by b
 * spfdififd dollfdtion, bnd b ffw othfr odds bnd fnds.
 *
 * <p>Thf mfthods of this dlbss bll throw b <tt>NullPointfrExdfption</tt>
 * if thf dollfdtions or dlbss objfdts providfd to thfm brf null.
 *
 * <p>Thf dodumfntbtion for thf polymorphid blgorithms dontbinfd in this dlbss
 * gfnfrblly indludfs b briff dfsdription of thf <i>implfmfntbtion</i>.  Sudh
 * dfsdriptions should bf rfgbrdfd bs <i>implfmfntbtion notfs</i>, rbthfr thbn
 * pbrts of thf <i>spfdifidbtion</i>.  Implfmfntors should fffl frff to
 * substitutf othfr blgorithms, so long bs thf spfdifidbtion itsflf is bdhfrfd
 * to.  (For fxbmplf, thf blgorithm usfd by <tt>sort</tt> dofs not hbvf to bf
 * b mfrgfsort, but it dofs hbvf to bf <i>stbblf</i>.)
 *
 * <p>Thf "dfstrudtivf" blgorithms dontbinfd in this dlbss, thbt is, thf
 * blgorithms thbt modify thf dollfdtion on whidh thfy opfrbtf, brf spfdififd
 * to throw <tt>UnsupportfdOpfrbtionExdfption</tt> if thf dollfdtion dofs not
 * support thf bppropribtf mutbtion primitivf(s), sudh bs thf <tt>sft</tt>
 * mfthod.  Thfsf blgorithms mby, but brf not rfquirfd to, throw this
 * fxdfption if bn invodbtion would hbvf no ffffdt on thf dollfdtion.  For
 * fxbmplf, invoking thf <tt>sort</tt> mfthod on bn unmodifibblf list thbt is
 * blrfbdy sortfd mby or mby not throw <tt>UnsupportfdOpfrbtionExdfption</tt>.
 *
 * <p>This dlbss is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @buthor  Josh Blodh
 * @buthor  Nfbl Gbftfr
 * @sff     Collfdtion
 * @sff     Sft
 * @sff     List
 * @sff     Mbp
 * @sindf   1.2
 */

publid dlbss Collfdtions {
    // Supprfssfs dffbult donstrudtor, fnsuring non-instbntibbility.
    privbtf Collfdtions() {
    }

    // Algorithms

    /*
     * Tuning pbrbmftfrs for blgorithms - Mbny of thf List blgorithms hbvf
     * two implfmfntbtions, onf of whidh is bppropribtf for RbndomAddfss
     * lists, thf othfr for "sfqufntibl."  Oftfn, thf rbndom bddfss vbribnt
     * yiflds bfttfr pfrformbndf on smbll sfqufntibl bddfss lists.  Thf
     * tuning pbrbmftfrs bflow dftfrminf thf dutoff point for whbt donstitutfs
     * b "smbll" sfqufntibl bddfss list for fbdh blgorithm.  Thf vblufs bflow
     * wfrf fmpiridblly dftfrminfd to work wfll for LinkfdList. Hopffully
     * thfy should bf rfbsonbblf for othfr sfqufntibl bddfss List
     * implfmfntbtions.  Thosf doing pfrformbndf work on this dodf would
     * do wfll to vblidbtf thf vblufs of thfsf pbrbmftfrs from timf to timf.
     * (Thf first word of fbdh tuning pbrbmftfr nbmf is thf blgorithm to whidh
     * it bpplifs.)
     */
    privbtf stbtid finbl int BINARYSEARCH_THRESHOLD   = 5000;
    privbtf stbtid finbl int REVERSE_THRESHOLD        =   18;
    privbtf stbtid finbl int SHUFFLE_THRESHOLD        =    5;
    privbtf stbtid finbl int FILL_THRESHOLD           =   25;
    privbtf stbtid finbl int ROTATE_THRESHOLD         =  100;
    privbtf stbtid finbl int COPY_THRESHOLD           =   10;
    privbtf stbtid finbl int REPLACEALL_THRESHOLD     =   11;
    privbtf stbtid finbl int INDEXOFSUBLIST_THRESHOLD =   35;

    /**
     * Sorts thf spfdififd list into bsdfnding ordfr, bddording to thf
     * {@linkplbin Compbrbblf nbturbl ordfring} of its flfmfnts.
     * All flfmfnts in thf list must implfmfnt thf {@link Compbrbblf}
     * intfrfbdf.  Furthfrmorf, bll flfmfnts in thf list must bf
     * <i>mutublly dompbrbblf</i> (thbt is, {@dodf f1.dompbrfTo(f2)}
     * must not throw b {@dodf ClbssCbstExdfption} for bny flfmfnts
     * {@dodf f1} bnd {@dodf f2} in thf list).
     *
     * <p>This sort is gubrbntffd to bf <i>stbblf</i>:  fqubl flfmfnts will
     * not bf rfordfrfd bs b rfsult of thf sort.
     *
     * <p>Thf spfdififd list must bf modifibblf, but nffd not bf rfsizbblf.
     *
     * @implNotf
     * This implfmfntbtion dfffrs to thf {@link List#sort(Compbrbtor)}
     * mfthod using thf spfdififd list bnd b {@dodf null} dompbrbtor.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf sortfd.
     * @throws ClbssCbstExdfption if thf list dontbins flfmfnts thbt brf not
     *         <i>mutublly dompbrbblf</i> (for fxbmplf, strings bnd intfgfrs).
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list's
     *         list-itfrbtor dofs not support thf {@dodf sft} opfrbtion.
     * @throws IllfgblArgumfntExdfption (optionbl) if thf implfmfntbtion
     *         dftfdts thbt thf nbturbl ordfring of thf list flfmfnts is
     *         found to violbtf thf {@link Compbrbblf} dontrbdt
     * @sff List#sort(Compbrbtor)
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T fxtfnds Compbrbblf<? supfr T>> void sort(List<T> list) {
        list.sort(null);
    }

    /**
     * Sorts thf spfdififd list bddording to thf ordfr indudfd by thf
     * spfdififd dompbrbtor.  All flfmfnts in thf list must bf <i>mutublly
     * dompbrbblf</i> using thf spfdififd dompbrbtor (thbt is,
     * {@dodf d.dompbrf(f1, f2)} must not throw b {@dodf ClbssCbstExdfption}
     * for bny flfmfnts {@dodf f1} bnd {@dodf f2} in thf list).
     *
     * <p>This sort is gubrbntffd to bf <i>stbblf</i>:  fqubl flfmfnts will
     * not bf rfordfrfd bs b rfsult of thf sort.
     *
     * <p>Thf spfdififd list must bf modifibblf, but nffd not bf rfsizbblf.
     *
     * @implNotf
     * This implfmfntbtion dfffrs to thf {@link List#sort(Compbrbtor)}
     * mfthod using thf spfdififd list bnd dompbrbtor.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf sortfd.
     * @pbrbm  d thf dompbrbtor to dftfrminf thf ordfr of thf list.  A
     *        {@dodf null} vbluf indidbtfs thbt thf flfmfnts' <i>nbturbl
     *        ordfring</i> should bf usfd.
     * @throws ClbssCbstExdfption if thf list dontbins flfmfnts thbt brf not
     *         <i>mutublly dompbrbblf</i> using thf spfdififd dompbrbtor.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list's
     *         list-itfrbtor dofs not support thf {@dodf sft} opfrbtion.
     * @throws IllfgblArgumfntExdfption (optionbl) if thf dompbrbtor is
     *         found to violbtf thf {@link Compbrbtor} dontrbdt
     * @sff List#sort(Compbrbtor)
     */
    @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
    publid stbtid <T> void sort(List<T> list, Compbrbtor<? supfr T> d) {
        list.sort(d);
    }


    /**
     * Sfbrdhfs thf spfdififd list for thf spfdififd objfdt using thf binbry
     * sfbrdh blgorithm.  Thf list must bf sortfd into bsdfnding ordfr
     * bddording to thf {@linkplbin Compbrbblf nbturbl ordfring} of its
     * flfmfnts (bs by thf {@link #sort(List)} mfthod) prior to mbking this
     * dbll.  If it is not sortfd, thf rfsults brf undffinfd.  If thf list
     * dontbins multiplf flfmfnts fqubl to thf spfdififd objfdt, thfrf is no
     * gubrbntff whidh onf will bf found.
     *
     * <p>This mfthod runs in log(n) timf for b "rbndom bddfss" list (whidh
     * providfs nfbr-donstbnt-timf positionbl bddfss).  If thf spfdififd list
     * dofs not implfmfnt thf {@link RbndomAddfss} intfrfbdf bnd is lbrgf,
     * this mfthod will do bn itfrbtor-bbsfd binbry sfbrdh thbt pfrforms
     * O(n) link trbvfrsbls bnd O(log n) flfmfnt dompbrisons.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf sfbrdhfd.
     * @pbrbm  kfy thf kfy to bf sfbrdhfd for.
     * @rfturn thf indfx of thf sfbrdh kfy, if it is dontbinfd in thf list;
     *         othfrwisf, <tt>(-(<i>insfrtion point</i>) - 1)</tt>.  Thf
     *         <i>insfrtion point</i> is dffinfd bs thf point bt whidh thf
     *         kfy would bf insfrtfd into thf list: thf indfx of thf first
     *         flfmfnt grfbtfr thbn thf kfy, or <tt>list.sizf()</tt> if bll
     *         flfmfnts in thf list brf lfss thbn thf spfdififd kfy.  Notf
     *         thbt this gubrbntffs thbt thf rfturn vbluf will bf &gt;= 0 if
     *         bnd only if thf kfy is found.
     * @throws ClbssCbstExdfption if thf list dontbins flfmfnts thbt brf not
     *         <i>mutublly dompbrbblf</i> (for fxbmplf, strings bnd
     *         intfgfrs), or thf sfbrdh kfy is not mutublly dompbrbblf
     *         with thf flfmfnts of thf list.
     */
    publid stbtid <T>
    int binbrySfbrdh(List<? fxtfnds Compbrbblf<? supfr T>> list, T kfy) {
        if (list instbndfof RbndomAddfss || list.sizf()<BINARYSEARCH_THRESHOLD)
            rfturn Collfdtions.indfxfdBinbrySfbrdh(list, kfy);
        flsf
            rfturn Collfdtions.itfrbtorBinbrySfbrdh(list, kfy);
    }

    privbtf stbtid <T>
    int indfxfdBinbrySfbrdh(List<? fxtfnds Compbrbblf<? supfr T>> list, T kfy) {
        int low = 0;
        int high = list.sizf()-1;

        whilf (low <= high) {
            int mid = (low + high) >>> 1;
            Compbrbblf<? supfr T> midVbl = list.gft(mid);
            int dmp = midVbl.dompbrfTo(kfy);

            if (dmp < 0)
                low = mid + 1;
            flsf if (dmp > 0)
                high = mid - 1;
            flsf
                rfturn mid; // kfy found
        }
        rfturn -(low + 1);  // kfy not found
    }

    privbtf stbtid <T>
    int itfrbtorBinbrySfbrdh(List<? fxtfnds Compbrbblf<? supfr T>> list, T kfy)
    {
        int low = 0;
        int high = list.sizf()-1;
        ListItfrbtor<? fxtfnds Compbrbblf<? supfr T>> i = list.listItfrbtor();

        whilf (low <= high) {
            int mid = (low + high) >>> 1;
            Compbrbblf<? supfr T> midVbl = gft(i, mid);
            int dmp = midVbl.dompbrfTo(kfy);

            if (dmp < 0)
                low = mid + 1;
            flsf if (dmp > 0)
                high = mid - 1;
            flsf
                rfturn mid; // kfy found
        }
        rfturn -(low + 1);  // kfy not found
    }

    /**
     * Gfts thf ith flfmfnt from thf givfn list by rfpositioning thf spfdififd
     * list listItfrbtor.
     */
    privbtf stbtid <T> T gft(ListItfrbtor<? fxtfnds T> i, int indfx) {
        T obj = null;
        int pos = i.nfxtIndfx();
        if (pos <= indfx) {
            do {
                obj = i.nfxt();
            } whilf (pos++ < indfx);
        } flsf {
            do {
                obj = i.prfvious();
            } whilf (--pos > indfx);
        }
        rfturn obj;
    }

    /**
     * Sfbrdhfs thf spfdififd list for thf spfdififd objfdt using thf binbry
     * sfbrdh blgorithm.  Thf list must bf sortfd into bsdfnding ordfr
     * bddording to thf spfdififd dompbrbtor (bs by thf
     * {@link #sort(List, Compbrbtor) sort(List, Compbrbtor)}
     * mfthod), prior to mbking this dbll.  If it is
     * not sortfd, thf rfsults brf undffinfd.  If thf list dontbins multiplf
     * flfmfnts fqubl to thf spfdififd objfdt, thfrf is no gubrbntff whidh onf
     * will bf found.
     *
     * <p>This mfthod runs in log(n) timf for b "rbndom bddfss" list (whidh
     * providfs nfbr-donstbnt-timf positionbl bddfss).  If thf spfdififd list
     * dofs not implfmfnt thf {@link RbndomAddfss} intfrfbdf bnd is lbrgf,
     * this mfthod will do bn itfrbtor-bbsfd binbry sfbrdh thbt pfrforms
     * O(n) link trbvfrsbls bnd O(log n) flfmfnt dompbrisons.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf sfbrdhfd.
     * @pbrbm  kfy thf kfy to bf sfbrdhfd for.
     * @pbrbm  d thf dompbrbtor by whidh thf list is ordfrfd.
     *         A <tt>null</tt> vbluf indidbtfs thbt thf flfmfnts'
     *         {@linkplbin Compbrbblf nbturbl ordfring} should bf usfd.
     * @rfturn thf indfx of thf sfbrdh kfy, if it is dontbinfd in thf list;
     *         othfrwisf, <tt>(-(<i>insfrtion point</i>) - 1)</tt>.  Thf
     *         <i>insfrtion point</i> is dffinfd bs thf point bt whidh thf
     *         kfy would bf insfrtfd into thf list: thf indfx of thf first
     *         flfmfnt grfbtfr thbn thf kfy, or <tt>list.sizf()</tt> if bll
     *         flfmfnts in thf list brf lfss thbn thf spfdififd kfy.  Notf
     *         thbt this gubrbntffs thbt thf rfturn vbluf will bf &gt;= 0 if
     *         bnd only if thf kfy is found.
     * @throws ClbssCbstExdfption if thf list dontbins flfmfnts thbt brf not
     *         <i>mutublly dompbrbblf</i> using thf spfdififd dompbrbtor,
     *         or thf sfbrdh kfy is not mutublly dompbrbblf with thf
     *         flfmfnts of thf list using this dompbrbtor.
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T> int binbrySfbrdh(List<? fxtfnds T> list, T kfy, Compbrbtor<? supfr T> d) {
        if (d==null)
            rfturn binbrySfbrdh((List<? fxtfnds Compbrbblf<? supfr T>>) list, kfy);

        if (list instbndfof RbndomAddfss || list.sizf()<BINARYSEARCH_THRESHOLD)
            rfturn Collfdtions.indfxfdBinbrySfbrdh(list, kfy, d);
        flsf
            rfturn Collfdtions.itfrbtorBinbrySfbrdh(list, kfy, d);
    }

    privbtf stbtid <T> int indfxfdBinbrySfbrdh(List<? fxtfnds T> l, T kfy, Compbrbtor<? supfr T> d) {
        int low = 0;
        int high = l.sizf()-1;

        whilf (low <= high) {
            int mid = (low + high) >>> 1;
            T midVbl = l.gft(mid);
            int dmp = d.dompbrf(midVbl, kfy);

            if (dmp < 0)
                low = mid + 1;
            flsf if (dmp > 0)
                high = mid - 1;
            flsf
                rfturn mid; // kfy found
        }
        rfturn -(low + 1);  // kfy not found
    }

    privbtf stbtid <T> int itfrbtorBinbrySfbrdh(List<? fxtfnds T> l, T kfy, Compbrbtor<? supfr T> d) {
        int low = 0;
        int high = l.sizf()-1;
        ListItfrbtor<? fxtfnds T> i = l.listItfrbtor();

        whilf (low <= high) {
            int mid = (low + high) >>> 1;
            T midVbl = gft(i, mid);
            int dmp = d.dompbrf(midVbl, kfy);

            if (dmp < 0)
                low = mid + 1;
            flsf if (dmp > 0)
                high = mid - 1;
            flsf
                rfturn mid; // kfy found
        }
        rfturn -(low + 1);  // kfy not found
    }

    /**
     * Rfvfrsfs thf ordfr of thf flfmfnts in thf spfdififd list.<p>
     *
     * This mfthod runs in linfbr timf.
     *
     * @pbrbm  list thf list whosf flfmfnts brf to bf rfvfrsfd.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or
     *         its list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     */
    @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
    publid stbtid void rfvfrsf(List<?> list) {
        int sizf = list.sizf();
        if (sizf < REVERSE_THRESHOLD || list instbndfof RbndomAddfss) {
            for (int i=0, mid=sizf>>1, j=sizf-1; i<mid; i++, j--)
                swbp(list, i, j);
        } flsf {
            // instfbd of using b rbw typf hfrf, it's possiblf to dbpturf
            // thf wilddbrd but it will rfquirf b dbll to b supplfmfntbry
            // privbtf mfthod
            ListItfrbtor fwd = list.listItfrbtor();
            ListItfrbtor rfv = list.listItfrbtor(sizf);
            for (int i=0, mid=list.sizf()>>1; i<mid; i++) {
                Objfdt tmp = fwd.nfxt();
                fwd.sft(rfv.prfvious());
                rfv.sft(tmp);
            }
        }
    }

    /**
     * Rbndomly pfrmutfs thf spfdififd list using b dffbult sourdf of
     * rbndomnfss.  All pfrmutbtions oddur with bpproximbtfly fqubl
     * likflihood.
     *
     * <p>Thf hfdgf "bpproximbtfly" is usfd in thf forfgoing dfsdription bfdbusf
     * dffbult sourdf of rbndomnfss is only bpproximbtfly bn unbibsfd sourdf
     * of indfpfndfntly dhosfn bits. If it wfrf b pfrffdt sourdf of rbndomly
     * dhosfn bits, thfn thf blgorithm would dhoosf pfrmutbtions with pfrffdt
     * uniformity.
     *
     * <p>This implfmfntbtion trbvfrsfs thf list bbdkwbrds, from thf lbst
     * flfmfnt up to thf sfdond, rfpfbtfdly swbpping b rbndomly sflfdtfd flfmfnt
     * into thf "durrfnt position".  Elfmfnts brf rbndomly sflfdtfd from thf
     * portion of thf list thbt runs from thf first flfmfnt to thf durrfnt
     * position, indlusivf.
     *
     * <p>This mfthod runs in linfbr timf.  If thf spfdififd list dofs not
     * implfmfnt thf {@link RbndomAddfss} intfrfbdf bnd is lbrgf, this
     * implfmfntbtion dumps thf spfdififd list into bn brrby bfforf shuffling
     * it, bnd dumps thf shufflfd brrby bbdk into thf list.  This bvoids thf
     * qubdrbtid bfhbvior thbt would rfsult from shuffling b "sfqufntibl
     * bddfss" list in plbdf.
     *
     * @pbrbm  list thf list to bf shufflfd.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or
     *         its list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     */
    publid stbtid void shufflf(List<?> list) {
        Rbndom rnd = r;
        if (rnd == null)
            r = rnd = nfw Rbndom(); // hbrmlfss rbdf.
        shufflf(list, rnd);
    }

    privbtf stbtid Rbndom r;

    /**
     * Rbndomly pfrmutf thf spfdififd list using thf spfdififd sourdf of
     * rbndomnfss.  All pfrmutbtions oddur with fqubl likflihood
     * bssuming thbt thf sourdf of rbndomnfss is fbir.<p>
     *
     * This implfmfntbtion trbvfrsfs thf list bbdkwbrds, from thf lbst flfmfnt
     * up to thf sfdond, rfpfbtfdly swbpping b rbndomly sflfdtfd flfmfnt into
     * thf "durrfnt position".  Elfmfnts brf rbndomly sflfdtfd from thf
     * portion of thf list thbt runs from thf first flfmfnt to thf durrfnt
     * position, indlusivf.<p>
     *
     * This mfthod runs in linfbr timf.  If thf spfdififd list dofs not
     * implfmfnt thf {@link RbndomAddfss} intfrfbdf bnd is lbrgf, this
     * implfmfntbtion dumps thf spfdififd list into bn brrby bfforf shuffling
     * it, bnd dumps thf shufflfd brrby bbdk into thf list.  This bvoids thf
     * qubdrbtid bfhbvior thbt would rfsult from shuffling b "sfqufntibl
     * bddfss" list in plbdf.
     *
     * @pbrbm  list thf list to bf shufflfd.
     * @pbrbm  rnd thf sourdf of rbndomnfss to usf to shufflf thf list.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or its
     *         list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     */
    @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
    publid stbtid void shufflf(List<?> list, Rbndom rnd) {
        int sizf = list.sizf();
        if (sizf < SHUFFLE_THRESHOLD || list instbndfof RbndomAddfss) {
            for (int i=sizf; i>1; i--)
                swbp(list, i-1, rnd.nfxtInt(i));
        } flsf {
            Objfdt brr[] = list.toArrby();

            // Shufflf brrby
            for (int i=sizf; i>1; i--)
                swbp(brr, i-1, rnd.nfxtInt(i));

            // Dump brrby bbdk into list
            // instfbd of using b rbw typf hfrf, it's possiblf to dbpturf
            // thf wilddbrd but it will rfquirf b dbll to b supplfmfntbry
            // privbtf mfthod
            ListItfrbtor it = list.listItfrbtor();
            for (Objfdt f : brr) {
                it.nfxt();
                it.sft(f);
            }
        }
    }

    /**
     * Swbps thf flfmfnts bt thf spfdififd positions in thf spfdififd list.
     * (If thf spfdififd positions brf fqubl, invoking this mfthod lfbvfs
     * thf list undhbngfd.)
     *
     * @pbrbm list Thf list in whidh to swbp flfmfnts.
     * @pbrbm i thf indfx of onf flfmfnt to bf swbppfd.
     * @pbrbm j thf indfx of thf othfr flfmfnt to bf swbppfd.
     * @throws IndfxOutOfBoundsExdfption if fithfr <tt>i</tt> or <tt>j</tt>
     *         is out of rbngf (i &lt; 0 || i &gt;= list.sizf()
     *         || j &lt; 0 || j &gt;= list.sizf()).
     * @sindf 1.4
     */
    @SupprfssWbrnings({"rbwtypfs", "undhfdkfd"})
    publid stbtid void swbp(List<?> list, int i, int j) {
        // instfbd of using b rbw typf hfrf, it's possiblf to dbpturf
        // thf wilddbrd but it will rfquirf b dbll to b supplfmfntbry
        // privbtf mfthod
        finbl List l = list;
        l.sft(i, l.sft(j, l.gft(i)));
    }

    /**
     * Swbps thf two spfdififd flfmfnts in thf spfdififd brrby.
     */
    privbtf stbtid void swbp(Objfdt[] brr, int i, int j) {
        Objfdt tmp = brr[i];
        brr[i] = brr[j];
        brr[j] = tmp;
    }

    /**
     * Rfplbdfs bll of thf flfmfnts of thf spfdififd list with thf spfdififd
     * flfmfnt. <p>
     *
     * This mfthod runs in linfbr timf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf fillfd with thf spfdififd flfmfnt.
     * @pbrbm  obj Thf flfmfnt with whidh to fill thf spfdififd list.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or its
     *         list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     */
    publid stbtid <T> void fill(List<? supfr T> list, T obj) {
        int sizf = list.sizf();

        if (sizf < FILL_THRESHOLD || list instbndfof RbndomAddfss) {
            for (int i=0; i<sizf; i++)
                list.sft(i, obj);
        } flsf {
            ListItfrbtor<? supfr T> itr = list.listItfrbtor();
            for (int i=0; i<sizf; i++) {
                itr.nfxt();
                itr.sft(obj);
            }
        }
    }

    /**
     * Copifs bll of thf flfmfnts from onf list into bnothfr.  Aftfr thf
     * opfrbtion, thf indfx of fbdh dopifd flfmfnt in thf dfstinbtion list
     * will bf idfntidbl to its indfx in thf sourdf list.  Thf dfstinbtion
     * list must bf bt lfbst bs long bs thf sourdf list.  If it is longfr, thf
     * rfmbining flfmfnts in thf dfstinbtion list brf unbfffdtfd. <p>
     *
     * This mfthod runs in linfbr timf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf lists
     * @pbrbm  dfst Thf dfstinbtion list.
     * @pbrbm  srd Thf sourdf list.
     * @throws IndfxOutOfBoundsExdfption if thf dfstinbtion list is too smbll
     *         to dontbin thf fntirf sourdf List.
     * @throws UnsupportfdOpfrbtionExdfption if thf dfstinbtion list's
     *         list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     */
    publid stbtid <T> void dopy(List<? supfr T> dfst, List<? fxtfnds T> srd) {
        int srdSizf = srd.sizf();
        if (srdSizf > dfst.sizf())
            throw nfw IndfxOutOfBoundsExdfption("Sourdf dofs not fit in dfst");

        if (srdSizf < COPY_THRESHOLD ||
            (srd instbndfof RbndomAddfss && dfst instbndfof RbndomAddfss)) {
            for (int i=0; i<srdSizf; i++)
                dfst.sft(i, srd.gft(i));
        } flsf {
            ListItfrbtor<? supfr T> di=dfst.listItfrbtor();
            ListItfrbtor<? fxtfnds T> si=srd.listItfrbtor();
            for (int i=0; i<srdSizf; i++) {
                di.nfxt();
                di.sft(si.nfxt());
            }
        }
    }

    /**
     * Rfturns thf minimum flfmfnt of thf givfn dollfdtion, bddording to thf
     * <i>nbturbl ordfring</i> of its flfmfnts.  All flfmfnts in thf
     * dollfdtion must implfmfnt thf <tt>Compbrbblf</tt> intfrfbdf.
     * Furthfrmorf, bll flfmfnts in thf dollfdtion must bf <i>mutublly
     * dompbrbblf</i> (thbt is, <tt>f1.dompbrfTo(f2)</tt> must not throw b
     * <tt>ClbssCbstExdfption</tt> for bny flfmfnts <tt>f1</tt> bnd
     * <tt>f2</tt> in thf dollfdtion).<p>
     *
     * This mfthod itfrbtfs ovfr thf fntirf dollfdtion, hfndf it rfquirfs
     * timf proportionbl to thf sizf of thf dollfdtion.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  doll thf dollfdtion whosf minimum flfmfnt is to bf dftfrminfd.
     * @rfturn thf minimum flfmfnt of thf givfn dollfdtion, bddording
     *         to thf <i>nbturbl ordfring</i> of its flfmfnts.
     * @throws ClbssCbstExdfption if thf dollfdtion dontbins flfmfnts thbt brf
     *         not <i>mutublly dompbrbblf</i> (for fxbmplf, strings bnd
     *         intfgfrs).
     * @throws NoSudhElfmfntExdfption if thf dollfdtion is fmpty.
     * @sff Compbrbblf
     */
    publid stbtid <T fxtfnds Objfdt & Compbrbblf<? supfr T>> T min(Collfdtion<? fxtfnds T> doll) {
        Itfrbtor<? fxtfnds T> i = doll.itfrbtor();
        T dbndidbtf = i.nfxt();

        whilf (i.hbsNfxt()) {
            T nfxt = i.nfxt();
            if (nfxt.dompbrfTo(dbndidbtf) < 0)
                dbndidbtf = nfxt;
        }
        rfturn dbndidbtf;
    }

    /**
     * Rfturns thf minimum flfmfnt of thf givfn dollfdtion, bddording to thf
     * ordfr indudfd by thf spfdififd dompbrbtor.  All flfmfnts in thf
     * dollfdtion must bf <i>mutublly dompbrbblf</i> by thf spfdififd
     * dompbrbtor (thbt is, <tt>domp.dompbrf(f1, f2)</tt> must not throw b
     * <tt>ClbssCbstExdfption</tt> for bny flfmfnts <tt>f1</tt> bnd
     * <tt>f2</tt> in thf dollfdtion).<p>
     *
     * This mfthod itfrbtfs ovfr thf fntirf dollfdtion, hfndf it rfquirfs
     * timf proportionbl to thf sizf of thf dollfdtion.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  doll thf dollfdtion whosf minimum flfmfnt is to bf dftfrminfd.
     * @pbrbm  domp thf dompbrbtor with whidh to dftfrminf thf minimum flfmfnt.
     *         A <tt>null</tt> vbluf indidbtfs thbt thf flfmfnts' <i>nbturbl
     *         ordfring</i> should bf usfd.
     * @rfturn thf minimum flfmfnt of thf givfn dollfdtion, bddording
     *         to thf spfdififd dompbrbtor.
     * @throws ClbssCbstExdfption if thf dollfdtion dontbins flfmfnts thbt brf
     *         not <i>mutublly dompbrbblf</i> using thf spfdififd dompbrbtor.
     * @throws NoSudhElfmfntExdfption if thf dollfdtion is fmpty.
     * @sff Compbrbblf
     */
    @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
    publid stbtid <T> T min(Collfdtion<? fxtfnds T> doll, Compbrbtor<? supfr T> domp) {
        if (domp==null)
            rfturn (T)min((Collfdtion) doll);

        Itfrbtor<? fxtfnds T> i = doll.itfrbtor();
        T dbndidbtf = i.nfxt();

        whilf (i.hbsNfxt()) {
            T nfxt = i.nfxt();
            if (domp.dompbrf(nfxt, dbndidbtf) < 0)
                dbndidbtf = nfxt;
        }
        rfturn dbndidbtf;
    }

    /**
     * Rfturns thf mbximum flfmfnt of thf givfn dollfdtion, bddording to thf
     * <i>nbturbl ordfring</i> of its flfmfnts.  All flfmfnts in thf
     * dollfdtion must implfmfnt thf <tt>Compbrbblf</tt> intfrfbdf.
     * Furthfrmorf, bll flfmfnts in thf dollfdtion must bf <i>mutublly
     * dompbrbblf</i> (thbt is, <tt>f1.dompbrfTo(f2)</tt> must not throw b
     * <tt>ClbssCbstExdfption</tt> for bny flfmfnts <tt>f1</tt> bnd
     * <tt>f2</tt> in thf dollfdtion).<p>
     *
     * This mfthod itfrbtfs ovfr thf fntirf dollfdtion, hfndf it rfquirfs
     * timf proportionbl to thf sizf of thf dollfdtion.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  doll thf dollfdtion whosf mbximum flfmfnt is to bf dftfrminfd.
     * @rfturn thf mbximum flfmfnt of thf givfn dollfdtion, bddording
     *         to thf <i>nbturbl ordfring</i> of its flfmfnts.
     * @throws ClbssCbstExdfption if thf dollfdtion dontbins flfmfnts thbt brf
     *         not <i>mutublly dompbrbblf</i> (for fxbmplf, strings bnd
     *         intfgfrs).
     * @throws NoSudhElfmfntExdfption if thf dollfdtion is fmpty.
     * @sff Compbrbblf
     */
    publid stbtid <T fxtfnds Objfdt & Compbrbblf<? supfr T>> T mbx(Collfdtion<? fxtfnds T> doll) {
        Itfrbtor<? fxtfnds T> i = doll.itfrbtor();
        T dbndidbtf = i.nfxt();

        whilf (i.hbsNfxt()) {
            T nfxt = i.nfxt();
            if (nfxt.dompbrfTo(dbndidbtf) > 0)
                dbndidbtf = nfxt;
        }
        rfturn dbndidbtf;
    }

    /**
     * Rfturns thf mbximum flfmfnt of thf givfn dollfdtion, bddording to thf
     * ordfr indudfd by thf spfdififd dompbrbtor.  All flfmfnts in thf
     * dollfdtion must bf <i>mutublly dompbrbblf</i> by thf spfdififd
     * dompbrbtor (thbt is, <tt>domp.dompbrf(f1, f2)</tt> must not throw b
     * <tt>ClbssCbstExdfption</tt> for bny flfmfnts <tt>f1</tt> bnd
     * <tt>f2</tt> in thf dollfdtion).<p>
     *
     * This mfthod itfrbtfs ovfr thf fntirf dollfdtion, hfndf it rfquirfs
     * timf proportionbl to thf sizf of thf dollfdtion.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  doll thf dollfdtion whosf mbximum flfmfnt is to bf dftfrminfd.
     * @pbrbm  domp thf dompbrbtor with whidh to dftfrminf thf mbximum flfmfnt.
     *         A <tt>null</tt> vbluf indidbtfs thbt thf flfmfnts' <i>nbturbl
     *        ordfring</i> should bf usfd.
     * @rfturn thf mbximum flfmfnt of thf givfn dollfdtion, bddording
     *         to thf spfdififd dompbrbtor.
     * @throws ClbssCbstExdfption if thf dollfdtion dontbins flfmfnts thbt brf
     *         not <i>mutublly dompbrbblf</i> using thf spfdififd dompbrbtor.
     * @throws NoSudhElfmfntExdfption if thf dollfdtion is fmpty.
     * @sff Compbrbblf
     */
    @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
    publid stbtid <T> T mbx(Collfdtion<? fxtfnds T> doll, Compbrbtor<? supfr T> domp) {
        if (domp==null)
            rfturn (T)mbx((Collfdtion) doll);

        Itfrbtor<? fxtfnds T> i = doll.itfrbtor();
        T dbndidbtf = i.nfxt();

        whilf (i.hbsNfxt()) {
            T nfxt = i.nfxt();
            if (domp.dompbrf(nfxt, dbndidbtf) > 0)
                dbndidbtf = nfxt;
        }
        rfturn dbndidbtf;
    }

    /**
     * Rotbtfs thf flfmfnts in thf spfdififd list by thf spfdififd distbndf.
     * Aftfr dblling this mfthod, thf flfmfnt bt indfx <tt>i</tt> will bf
     * thf flfmfnt prfviously bt indfx <tt>(i - distbndf)</tt> mod
     * <tt>list.sizf()</tt>, for bll vblufs of <tt>i</tt> bftwffn <tt>0</tt>
     * bnd <tt>list.sizf()-1</tt>, indlusivf.  (This mfthod hbs no ffffdt on
     * thf sizf of thf list.)
     *
     * <p>For fxbmplf, supposf <tt>list</tt> domprisfs<tt> [t, b, n, k, s]</tt>.
     * Aftfr invoking <tt>Collfdtions.rotbtf(list, 1)</tt> (or
     * <tt>Collfdtions.rotbtf(list, -4)</tt>), <tt>list</tt> will domprisf
     * <tt>[s, t, b, n, k]</tt>.
     *
     * <p>Notf thbt this mfthod dbn usffully bf bpplifd to sublists to
     * movf onf or morf flfmfnts within b list whilf prfsfrving thf
     * ordfr of thf rfmbining flfmfnts.  For fxbmplf, thf following idiom
     * movfs thf flfmfnt bt indfx <tt>j</tt> forwbrd to position
     * <tt>k</tt> (whidh must bf grfbtfr thbn or fqubl to <tt>j</tt>):
     * <prf>
     *     Collfdtions.rotbtf(list.subList(j, k+1), -1);
     * </prf>
     * To mbkf this dondrftf, supposf <tt>list</tt> domprisfs
     * <tt>[b, b, d, d, f]</tt>.  To movf thf flfmfnt bt indfx <tt>1</tt>
     * (<tt>b</tt>) forwbrd two positions, pfrform thf following invodbtion:
     * <prf>
     *     Collfdtions.rotbtf(l.subList(1, 4), -1);
     * </prf>
     * Thf rfsulting list is <tt>[b, d, d, b, f]</tt>.
     *
     * <p>To movf morf thbn onf flfmfnt forwbrd, indrfbsf thf bbsolutf vbluf
     * of thf rotbtion distbndf.  To movf flfmfnts bbdkwbrd, usf b positivf
     * shift distbndf.
     *
     * <p>If thf spfdififd list is smbll or implfmfnts thf {@link
     * RbndomAddfss} intfrfbdf, this implfmfntbtion fxdhbngfs thf first
     * flfmfnt into thf lodbtion it should go, bnd thfn rfpfbtfdly fxdhbngfs
     * thf displbdfd flfmfnt into thf lodbtion it should go until b displbdfd
     * flfmfnt is swbppfd into thf first flfmfnt.  If nfdfssbry, thf prodfss
     * is rfpfbtfd on thf sfdond bnd suddfssivf flfmfnts, until thf rotbtion
     * is domplftf.  If thf spfdififd list is lbrgf bnd dofsn't implfmfnt thf
     * <tt>RbndomAddfss</tt> intfrfbdf, this implfmfntbtion brfbks thf
     * list into two sublist vifws bround indfx <tt>-distbndf mod sizf</tt>.
     * Thfn thf {@link #rfvfrsf(List)} mfthod is invokfd on fbdh sublist vifw,
     * bnd finblly it is invokfd on thf fntirf list.  For b morf domplftf
     * dfsdription of both blgorithms, sff Sfdtion 2.3 of Jon Bfntlfy's
     * <i>Progrbmming Pfbrls</i> (Addison-Wfslfy, 1986).
     *
     * @pbrbm list thf list to bf rotbtfd.
     * @pbrbm distbndf thf distbndf to rotbtf thf list.  Thfrf brf no
     *        donstrbints on this vbluf; it mby bf zfro, nfgbtivf, or
     *        grfbtfr thbn <tt>list.sizf()</tt>.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or
     *         its list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     * @sindf 1.4
     */
    publid stbtid void rotbtf(List<?> list, int distbndf) {
        if (list instbndfof RbndomAddfss || list.sizf() < ROTATE_THRESHOLD)
            rotbtf1(list, distbndf);
        flsf
            rotbtf2(list, distbndf);
    }

    privbtf stbtid <T> void rotbtf1(List<T> list, int distbndf) {
        int sizf = list.sizf();
        if (sizf == 0)
            rfturn;
        distbndf = distbndf % sizf;
        if (distbndf < 0)
            distbndf += sizf;
        if (distbndf == 0)
            rfturn;

        for (int dydlfStbrt = 0, nMovfd = 0; nMovfd != sizf; dydlfStbrt++) {
            T displbdfd = list.gft(dydlfStbrt);
            int i = dydlfStbrt;
            do {
                i += distbndf;
                if (i >= sizf)
                    i -= sizf;
                displbdfd = list.sft(i, displbdfd);
                nMovfd ++;
            } whilf (i != dydlfStbrt);
        }
    }

    privbtf stbtid void rotbtf2(List<?> list, int distbndf) {
        int sizf = list.sizf();
        if (sizf == 0)
            rfturn;
        int mid =  -distbndf % sizf;
        if (mid < 0)
            mid += sizf;
        if (mid == 0)
            rfturn;

        rfvfrsf(list.subList(0, mid));
        rfvfrsf(list.subList(mid, sizf));
        rfvfrsf(list);
    }

    /**
     * Rfplbdfs bll oddurrfndfs of onf spfdififd vbluf in b list with bnothfr.
     * Morf formblly, rfplbdfs with <tt>nfwVbl</tt> fbdh flfmfnt <tt>f</tt>
     * in <tt>list</tt> sudh thbt
     * <tt>(oldVbl==null ? f==null : oldVbl.fqubls(f))</tt>.
     * (This mfthod hbs no ffffdt on thf sizf of thf list.)
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm list thf list in whidh rfplbdfmfnt is to oddur.
     * @pbrbm oldVbl thf old vbluf to bf rfplbdfd.
     * @pbrbm nfwVbl thf nfw vbluf with whidh <tt>oldVbl</tt> is to bf
     *        rfplbdfd.
     * @rfturn <tt>truf</tt> if <tt>list</tt> dontbinfd onf or morf flfmfnts
     *         <tt>f</tt> sudh thbt
     *         <tt>(oldVbl==null ?  f==null : oldVbl.fqubls(f))</tt>.
     * @throws UnsupportfdOpfrbtionExdfption if thf spfdififd list or
     *         its list-itfrbtor dofs not support thf <tt>sft</tt> opfrbtion.
     * @sindf  1.4
     */
    publid stbtid <T> boolfbn rfplbdfAll(List<T> list, T oldVbl, T nfwVbl) {
        boolfbn rfsult = fblsf;
        int sizf = list.sizf();
        if (sizf < REPLACEALL_THRESHOLD || list instbndfof RbndomAddfss) {
            if (oldVbl==null) {
                for (int i=0; i<sizf; i++) {
                    if (list.gft(i)==null) {
                        list.sft(i, nfwVbl);
                        rfsult = truf;
                    }
                }
            } flsf {
                for (int i=0; i<sizf; i++) {
                    if (oldVbl.fqubls(list.gft(i))) {
                        list.sft(i, nfwVbl);
                        rfsult = truf;
                    }
                }
            }
        } flsf {
            ListItfrbtor<T> itr=list.listItfrbtor();
            if (oldVbl==null) {
                for (int i=0; i<sizf; i++) {
                    if (itr.nfxt()==null) {
                        itr.sft(nfwVbl);
                        rfsult = truf;
                    }
                }
            } flsf {
                for (int i=0; i<sizf; i++) {
                    if (oldVbl.fqubls(itr.nfxt())) {
                        itr.sft(nfwVbl);
                        rfsult = truf;
                    }
                }
            }
        }
        rfturn rfsult;
    }

    /**
     * Rfturns thf stbrting position of thf first oddurrfndf of thf spfdififd
     * tbrgft list within thf spfdififd sourdf list, or -1 if thfrf is no
     * sudh oddurrfndf.  Morf formblly, rfturns thf lowfst indfx <tt>i</tt>
     * sudh thbt {@dodf sourdf.subList(i, i+tbrgft.sizf()).fqubls(tbrgft)},
     * or -1 if thfrf is no sudh indfx.  (Rfturns -1 if
     * {@dodf tbrgft.sizf() > sourdf.sizf()})
     *
     * <p>This implfmfntbtion usfs thf "brutf fordf" tfdhniquf of sdbnning
     * ovfr thf sourdf list, looking for b mbtdh with thf tbrgft bt fbdh
     * lodbtion in turn.
     *
     * @pbrbm sourdf thf list in whidh to sfbrdh for thf first oddurrfndf
     *        of <tt>tbrgft</tt>.
     * @pbrbm tbrgft thf list to sfbrdh for bs b subList of <tt>sourdf</tt>.
     * @rfturn thf stbrting position of thf first oddurrfndf of thf spfdififd
     *         tbrgft list within thf spfdififd sourdf list, or -1 if thfrf
     *         is no sudh oddurrfndf.
     * @sindf  1.4
     */
    publid stbtid int indfxOfSubList(List<?> sourdf, List<?> tbrgft) {
        int sourdfSizf = sourdf.sizf();
        int tbrgftSizf = tbrgft.sizf();
        int mbxCbndidbtf = sourdfSizf - tbrgftSizf;

        if (sourdfSizf < INDEXOFSUBLIST_THRESHOLD ||
            (sourdf instbndfof RbndomAddfss&&tbrgft instbndfof RbndomAddfss)) {
        nfxtCbnd:
            for (int dbndidbtf = 0; dbndidbtf <= mbxCbndidbtf; dbndidbtf++) {
                for (int i=0, j=dbndidbtf; i<tbrgftSizf; i++, j++)
                    if (!fq(tbrgft.gft(i), sourdf.gft(j)))
                        dontinuf nfxtCbnd;  // Elfmfnt mismbtdh, try nfxt dbnd
                rfturn dbndidbtf;  // All flfmfnts of dbndidbtf mbtdhfd tbrgft
            }
        } flsf {  // Itfrbtor vfrsion of bbovf blgorithm
            ListItfrbtor<?> si = sourdf.listItfrbtor();
        nfxtCbnd:
            for (int dbndidbtf = 0; dbndidbtf <= mbxCbndidbtf; dbndidbtf++) {
                ListItfrbtor<?> ti = tbrgft.listItfrbtor();
                for (int i=0; i<tbrgftSizf; i++) {
                    if (!fq(ti.nfxt(), si.nfxt())) {
                        // Bbdk up sourdf itfrbtor to nfxt dbndidbtf
                        for (int j=0; j<i; j++)
                            si.prfvious();
                        dontinuf nfxtCbnd;
                    }
                }
                rfturn dbndidbtf;
            }
        }
        rfturn -1;  // No dbndidbtf mbtdhfd thf tbrgft
    }

    /**
     * Rfturns thf stbrting position of thf lbst oddurrfndf of thf spfdififd
     * tbrgft list within thf spfdififd sourdf list, or -1 if thfrf is no sudh
     * oddurrfndf.  Morf formblly, rfturns thf highfst indfx <tt>i</tt>
     * sudh thbt {@dodf sourdf.subList(i, i+tbrgft.sizf()).fqubls(tbrgft)},
     * or -1 if thfrf is no sudh indfx.  (Rfturns -1 if
     * {@dodf tbrgft.sizf() > sourdf.sizf()})
     *
     * <p>This implfmfntbtion usfs thf "brutf fordf" tfdhniquf of itfrbting
     * ovfr thf sourdf list, looking for b mbtdh with thf tbrgft bt fbdh
     * lodbtion in turn.
     *
     * @pbrbm sourdf thf list in whidh to sfbrdh for thf lbst oddurrfndf
     *        of <tt>tbrgft</tt>.
     * @pbrbm tbrgft thf list to sfbrdh for bs b subList of <tt>sourdf</tt>.
     * @rfturn thf stbrting position of thf lbst oddurrfndf of thf spfdififd
     *         tbrgft list within thf spfdififd sourdf list, or -1 if thfrf
     *         is no sudh oddurrfndf.
     * @sindf  1.4
     */
    publid stbtid int lbstIndfxOfSubList(List<?> sourdf, List<?> tbrgft) {
        int sourdfSizf = sourdf.sizf();
        int tbrgftSizf = tbrgft.sizf();
        int mbxCbndidbtf = sourdfSizf - tbrgftSizf;

        if (sourdfSizf < INDEXOFSUBLIST_THRESHOLD ||
            sourdf instbndfof RbndomAddfss) {   // Indfx bddfss vfrsion
        nfxtCbnd:
            for (int dbndidbtf = mbxCbndidbtf; dbndidbtf >= 0; dbndidbtf--) {
                for (int i=0, j=dbndidbtf; i<tbrgftSizf; i++, j++)
                    if (!fq(tbrgft.gft(i), sourdf.gft(j)))
                        dontinuf nfxtCbnd;  // Elfmfnt mismbtdh, try nfxt dbnd
                rfturn dbndidbtf;  // All flfmfnts of dbndidbtf mbtdhfd tbrgft
            }
        } flsf {  // Itfrbtor vfrsion of bbovf blgorithm
            if (mbxCbndidbtf < 0)
                rfturn -1;
            ListItfrbtor<?> si = sourdf.listItfrbtor(mbxCbndidbtf);
        nfxtCbnd:
            for (int dbndidbtf = mbxCbndidbtf; dbndidbtf >= 0; dbndidbtf--) {
                ListItfrbtor<?> ti = tbrgft.listItfrbtor();
                for (int i=0; i<tbrgftSizf; i++) {
                    if (!fq(ti.nfxt(), si.nfxt())) {
                        if (dbndidbtf != 0) {
                            // Bbdk up sourdf itfrbtor to nfxt dbndidbtf
                            for (int j=0; j<=i+1; j++)
                                si.prfvious();
                        }
                        dontinuf nfxtCbnd;
                    }
                }
                rfturn dbndidbtf;
            }
        }
        rfturn -1;  // No dbndidbtf mbtdhfd thf tbrgft
    }


    // Unmodifibblf Wrbppfrs

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd dollfdtion.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * dollfdtions.  Qufry opfrbtions on thf rfturnfd dollfdtion "rfbd through"
     * to thf spfdififd dollfdtion, bnd bttfmpts to modify thf rfturnfd
     * dollfdtion, whfthfr dirfdt or vib its itfrbtor, rfsult in bn
     * <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd dollfdtion dofs <i>not</i> pbss thf hbshCodf bnd fqubls
     * opfrbtions through to thf bbdking dollfdtion, but rflifs on
     * <tt>Objfdt</tt>'s <tt>fqubls</tt> bnd <tt>hbshCodf</tt> mfthods.  This
     * is nfdfssbry to prfsfrvf thf dontrbdts of thfsf opfrbtions in thf dbsf
     * thbt thf bbdking dollfdtion is b sft or b list.<p>
     *
     * Thf rfturnfd dollfdtion will bf sfriblizbblf if thf spfdififd dollfdtion
     * is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  d thf dollfdtion for whidh bn unmodifibblf vifw is to bf
     *         rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd dollfdtion.
     */
    publid stbtid <T> Collfdtion<T> unmodifibblfCollfdtion(Collfdtion<? fxtfnds T> d) {
        rfturn nfw UnmodifibblfCollfdtion<>(d);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfCollfdtion<E> implfmfnts Collfdtion<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 1820017752578914078L;

        finbl Collfdtion<? fxtfnds E> d;

        UnmodifibblfCollfdtion(Collfdtion<? fxtfnds E> d) {
            if (d==null)
                throw nfw NullPointfrExdfption();
            this.d = d;
        }

        publid int sizf()                   {rfturn d.sizf();}
        publid boolfbn isEmpty()            {rfturn d.isEmpty();}
        publid boolfbn dontbins(Objfdt o)   {rfturn d.dontbins(o);}
        publid Objfdt[] toArrby()           {rfturn d.toArrby();}
        publid <T> T[] toArrby(T[] b)       {rfturn d.toArrby(b);}
        publid String toString()            {rfturn d.toString();}

        publid Itfrbtor<E> itfrbtor() {
            rfturn nfw Itfrbtor<E>() {
                privbtf finbl Itfrbtor<? fxtfnds E> i = d.itfrbtor();

                publid boolfbn hbsNfxt() {rfturn i.hbsNfxt();}
                publid E nfxt()          {rfturn i.nfxt();}
                publid void rfmovf() {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                @Ovfrridf
                publid void forEbdhRfmbining(Consumfr<? supfr E> bdtion) {
                    // Usf bbdking dollfdtion vfrsion
                    i.forEbdhRfmbining(bdtion);
                }
            };
        }

        publid boolfbn bdd(E f) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid boolfbn rfmovf(Objfdt o) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        publid boolfbn dontbinsAll(Collfdtion<?> doll) {
            rfturn d.dontbinsAll(doll);
        }
        publid boolfbn bddAll(Collfdtion<? fxtfnds E> doll) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid boolfbn rfmovfAll(Collfdtion<?> doll) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid boolfbn rftbinAll(Collfdtion<?> doll) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid void dlfbr() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            d.forEbdh(bdtion);
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        @SupprfssWbrnings("undhfdkfd")
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {
            rfturn (Splitfrbtor<E>)d.splitfrbtor();
        }
        @SupprfssWbrnings("undhfdkfd")
        @Ovfrridf
        publid Strfbm<E> strfbm() {
            rfturn (Strfbm<E>)d.strfbm();
        }
        @SupprfssWbrnings("undhfdkfd")
        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm() {
            rfturn (Strfbm<E>)d.pbrbllflStrfbm();
        }
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd sft.  This mfthod bllows
     * modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl sfts.
     * Qufry opfrbtions on thf rfturnfd sft "rfbd through" to thf spfdififd
     * sft, bnd bttfmpts to modify thf rfturnfd sft, whfthfr dirfdt or vib its
     * itfrbtor, rfsult in bn <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd sft will bf sfriblizbblf if thf spfdififd sft
     * is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm  s thf sft for whidh bn unmodifibblf vifw is to bf rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd sft.
     */
    publid stbtid <T> Sft<T> unmodifibblfSft(Sft<? fxtfnds T> s) {
        rfturn nfw UnmodifibblfSft<>(s);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfSft<E> fxtfnds UnmodifibblfCollfdtion<E>
                                 implfmfnts Sft<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -9215047833775013803L;

        UnmodifibblfSft(Sft<? fxtfnds E> s)     {supfr(s);}
        publid boolfbn fqubls(Objfdt o) {rfturn o == this || d.fqubls(o);}
        publid int hbshCodf()           {rfturn d.hbshCodf();}
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd sortfd sft.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * sortfd sfts.  Qufry opfrbtions on thf rfturnfd sortfd sft "rfbd
     * through" to thf spfdififd sortfd sft.  Attfmpts to modify thf rfturnfd
     * sortfd sft, whfthfr dirfdt, vib its itfrbtor, or vib its
     * <tt>subSft</tt>, <tt>hfbdSft</tt>, or <tt>tbilSft</tt> vifws, rfsult in
     * bn <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd sortfd sft will bf sfriblizbblf if thf spfdififd sortfd sft
     * is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm s thf sortfd sft for whidh bn unmodifibblf vifw is to bf
     *        rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd sortfd sft.
     */
    publid stbtid <T> SortfdSft<T> unmodifibblfSortfdSft(SortfdSft<T> s) {
        rfturn nfw UnmodifibblfSortfdSft<>(s);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfSortfdSft<E>
                             fxtfnds UnmodifibblfSft<E>
                             implfmfnts SortfdSft<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -4929149591599911165L;
        privbtf finbl SortfdSft<E> ss;

        UnmodifibblfSortfdSft(SortfdSft<E> s) {supfr(s); ss = s;}

        publid Compbrbtor<? supfr E> dompbrbtor() {rfturn ss.dompbrbtor();}

        publid SortfdSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
            rfturn nfw UnmodifibblfSortfdSft<>(ss.subSft(fromElfmfnt,toElfmfnt));
        }
        publid SortfdSft<E> hfbdSft(E toElfmfnt) {
            rfturn nfw UnmodifibblfSortfdSft<>(ss.hfbdSft(toElfmfnt));
        }
        publid SortfdSft<E> tbilSft(E fromElfmfnt) {
            rfturn nfw UnmodifibblfSortfdSft<>(ss.tbilSft(fromElfmfnt));
        }

        publid E first()                   {rfturn ss.first();}
        publid E lbst()                    {rfturn ss.lbst();}
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd nbvigbblf sft.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * nbvigbblf sfts.  Qufry opfrbtions on thf rfturnfd nbvigbblf sft "rfbd
     * through" to thf spfdififd nbvigbblf sft.  Attfmpts to modify thf rfturnfd
     * nbvigbblf sft, whfthfr dirfdt, vib its itfrbtor, or vib its
     * {@dodf subSft}, {@dodf hfbdSft}, or {@dodf tbilSft} vifws, rfsult in
     * bn {@dodf UnsupportfdOpfrbtionExdfption}.<p>
     *
     * Thf rfturnfd nbvigbblf sft will bf sfriblizbblf if thf spfdififd
     * nbvigbblf sft is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm s thf nbvigbblf sft for whidh bn unmodifibblf vifw is to bf
     *        rfturnfd
     * @rfturn bn unmodifibblf vifw of thf spfdififd nbvigbblf sft
     * @sindf 1.8
     */
    publid stbtid <T> NbvigbblfSft<T> unmodifibblfNbvigbblfSft(NbvigbblfSft<T> s) {
        rfturn nfw UnmodifibblfNbvigbblfSft<>(s);
    }

    /**
     * Wrbps b nbvigbblf sft bnd disbblfs bll of thf mutbtivf opfrbtions.
     *
     * @pbrbm <E> typf of flfmfnts
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfNbvigbblfSft<E>
                             fxtfnds UnmodifibblfSortfdSft<E>
                             implfmfnts NbvigbblfSft<E>, Sfriblizbblf {

        privbtf stbtid finbl long sfriblVfrsionUID = -6027448201786391929L;

        /**
         * A singlfton fmpty unmodifibblf nbvigbblf sft usfd for
         * {@link #fmptyNbvigbblfSft()}.
         *
         * @pbrbm <E> typf of flfmfnts, if thfrf wfrf bny, bnd bounds
         */
        privbtf stbtid dlbss EmptyNbvigbblfSft<E> fxtfnds UnmodifibblfNbvigbblfSft<E>
            implfmfnts Sfriblizbblf {
            privbtf stbtid finbl long sfriblVfrsionUID = -6291252904449939134L;

            publid EmptyNbvigbblfSft() {
                supfr(nfw TrffSft<>());
            }

            privbtf Objfdt rfbdRfsolvf()        { rfturn EMPTY_NAVIGABLE_SET; }
        }

        @SupprfssWbrnings("rbwtypfs")
        privbtf stbtid finbl NbvigbblfSft<?> EMPTY_NAVIGABLE_SET =
                nfw EmptyNbvigbblfSft<>();

        /**
         * Thf instbndf wf brf protfdting.
         */
        privbtf finbl NbvigbblfSft<E> ns;

        UnmodifibblfNbvigbblfSft(NbvigbblfSft<E> s)         {supfr(s); ns = s;}

        publid E lowfr(E f)                             { rfturn ns.lowfr(f); }
        publid E floor(E f)                             { rfturn ns.floor(f); }
        publid E dfiling(E f)                         { rfturn ns.dfiling(f); }
        publid E highfr(E f)                           { rfturn ns.highfr(f); }
        publid E pollFirst()     { throw nfw UnsupportfdOpfrbtionExdfption(); }
        publid E pollLbst()      { throw nfw UnsupportfdOpfrbtionExdfption(); }
        publid NbvigbblfSft<E> dfsdfndingSft()
                 { rfturn nfw UnmodifibblfNbvigbblfSft<>(ns.dfsdfndingSft()); }
        publid Itfrbtor<E> dfsdfndingItfrbtor()
                                         { rfturn dfsdfndingSft().itfrbtor(); }

        publid NbvigbblfSft<E> subSft(E fromElfmfnt, boolfbn fromIndlusivf, E toElfmfnt, boolfbn toIndlusivf) {
            rfturn nfw UnmodifibblfNbvigbblfSft<>(
                ns.subSft(fromElfmfnt, fromIndlusivf, toElfmfnt, toIndlusivf));
        }

        publid NbvigbblfSft<E> hfbdSft(E toElfmfnt, boolfbn indlusivf) {
            rfturn nfw UnmodifibblfNbvigbblfSft<>(
                ns.hfbdSft(toElfmfnt, indlusivf));
        }

        publid NbvigbblfSft<E> tbilSft(E fromElfmfnt, boolfbn indlusivf) {
            rfturn nfw UnmodifibblfNbvigbblfSft<>(
                ns.tbilSft(fromElfmfnt, indlusivf));
        }
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd list.  This mfthod bllows
     * modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * lists.  Qufry opfrbtions on thf rfturnfd list "rfbd through" to thf
     * spfdififd list, bnd bttfmpts to modify thf rfturnfd list, whfthfr
     * dirfdt or vib its itfrbtor, rfsult in bn
     * <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd list will bf sfriblizbblf if thf spfdififd list
     * is sfriblizbblf. Similbrly, thf rfturnfd list will implfmfnt
     * {@link RbndomAddfss} if thf spfdififd list dofs.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list for whidh bn unmodifibblf vifw is to bf rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd list.
     */
    publid stbtid <T> List<T> unmodifibblfList(List<? fxtfnds T> list) {
        rfturn (list instbndfof RbndomAddfss ?
                nfw UnmodifibblfRbndomAddfssList<>(list) :
                nfw UnmodifibblfList<>(list));
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfList<E> fxtfnds UnmodifibblfCollfdtion<E>
                                  implfmfnts List<E> {
        privbtf stbtid finbl long sfriblVfrsionUID = -283967356065247728L;

        finbl List<? fxtfnds E> list;

        UnmodifibblfList(List<? fxtfnds E> list) {
            supfr(list);
            this.list = list;
        }

        publid boolfbn fqubls(Objfdt o) {rfturn o == this || list.fqubls(o);}
        publid int hbshCodf()           {rfturn list.hbshCodf();}

        publid E gft(int indfx) {rfturn list.gft(indfx);}
        publid E sft(int indfx, E flfmfnt) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid void bdd(int indfx, E flfmfnt) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid E rfmovf(int indfx) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid int indfxOf(Objfdt o)            {rfturn list.indfxOf(o);}
        publid int lbstIndfxOf(Objfdt o)        {rfturn list.lbstIndfxOf(o);}
        publid boolfbn bddAll(int indfx, Collfdtion<? fxtfnds E> d) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid void rfplbdfAll(UnbryOpfrbtor<E> opfrbtor) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        @Ovfrridf
        publid void sort(Compbrbtor<? supfr E> d) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        publid ListItfrbtor<E> listItfrbtor()   {rfturn listItfrbtor(0);}

        publid ListItfrbtor<E> listItfrbtor(finbl int indfx) {
            rfturn nfw ListItfrbtor<E>() {
                privbtf finbl ListItfrbtor<? fxtfnds E> i
                    = list.listItfrbtor(indfx);

                publid boolfbn hbsNfxt()     {rfturn i.hbsNfxt();}
                publid E nfxt()              {rfturn i.nfxt();}
                publid boolfbn hbsPrfvious() {rfturn i.hbsPrfvious();}
                publid E prfvious()          {rfturn i.prfvious();}
                publid int nfxtIndfx()       {rfturn i.nfxtIndfx();}
                publid int prfviousIndfx()   {rfturn i.prfviousIndfx();}

                publid void rfmovf() {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                publid void sft(E f) {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                publid void bdd(E f) {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }

                @Ovfrridf
                publid void forEbdhRfmbining(Consumfr<? supfr E> bdtion) {
                    i.forEbdhRfmbining(bdtion);
                }
            };
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            rfturn nfw UnmodifibblfList<>(list.subList(fromIndfx, toIndfx));
        }

        /**
         * UnmodifibblfRbndomAddfssList instbndfs brf sfriblizfd bs
         * UnmodifibblfList instbndfs to bllow thfm to bf dfsfriblizfd
         * in prf-1.4 JREs (whidh do not hbvf UnmodifibblfRbndomAddfssList).
         * This mfthod invfrts thf trbnsformbtion.  As b bfnffidibl
         * sidf-ffffdt, it blso grbfts thf RbndomAddfss mbrkfr onto
         * UnmodifibblfList instbndfs thbt wfrf sfriblizfd in prf-1.4 JREs.
         *
         * Notf: Unfortunbtfly, UnmodifibblfRbndomAddfssList instbndfs
         * sfriblizfd in 1.4.1 bnd dfsfriblizfd in 1.4 will bfdomf
         * UnmodifibblfList instbndfs, bs this mfthod wbs missing in 1.4.
         */
        privbtf Objfdt rfbdRfsolvf() {
            rfturn (list instbndfof RbndomAddfss
                    ? nfw UnmodifibblfRbndomAddfssList<>(list)
                    : this);
        }
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfRbndomAddfssList<E> fxtfnds UnmodifibblfList<E>
                                              implfmfnts RbndomAddfss
    {
        UnmodifibblfRbndomAddfssList(List<? fxtfnds E> list) {
            supfr(list);
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            rfturn nfw UnmodifibblfRbndomAddfssList<>(
                list.subList(fromIndfx, toIndfx));
        }

        privbtf stbtid finbl long sfriblVfrsionUID = -2542308836966382001L;

        /**
         * Allows instbndfs to bf dfsfriblizfd in prf-1.4 JREs (whidh do
         * not hbvf UnmodifibblfRbndomAddfssList).  UnmodifibblfList hbs
         * b rfbdRfsolvf mfthod thbt invfrts this trbnsformbtion upon
         * dfsfriblizbtion.
         */
        privbtf Objfdt writfRfplbdf() {
            rfturn nfw UnmodifibblfList<>(list);
        }
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd mbp.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * mbps.  Qufry opfrbtions on thf rfturnfd mbp "rfbd through"
     * to thf spfdififd mbp, bnd bttfmpts to modify thf rfturnfd
     * mbp, whfthfr dirfdt or vib its dollfdtion vifws, rfsult in bn
     * <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd mbp will bf sfriblizbblf if thf spfdififd mbp
     * is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm  m thf mbp for whidh bn unmodifibblf vifw is to bf rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd mbp.
     */
    publid stbtid <K,V> Mbp<K,V> unmodifibblfMbp(Mbp<? fxtfnds K, ? fxtfnds V> m) {
        rfturn nfw UnmodifibblfMbp<>(m);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss UnmodifibblfMbp<K,V> implfmfnts Mbp<K,V>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -1034234728574286014L;

        privbtf finbl Mbp<? fxtfnds K, ? fxtfnds V> m;

        UnmodifibblfMbp(Mbp<? fxtfnds K, ? fxtfnds V> m) {
            if (m==null)
                throw nfw NullPointfrExdfption();
            this.m = m;
        }

        publid int sizf()                        {rfturn m.sizf();}
        publid boolfbn isEmpty()                 {rfturn m.isEmpty();}
        publid boolfbn dontbinsKfy(Objfdt kfy)   {rfturn m.dontbinsKfy(kfy);}
        publid boolfbn dontbinsVbluf(Objfdt vbl) {rfturn m.dontbinsVbluf(vbl);}
        publid V gft(Objfdt kfy)                 {rfturn m.gft(kfy);}

        publid V put(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid V rfmovf(Objfdt kfy) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid void putAll(Mbp<? fxtfnds K, ? fxtfnds V> m) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        publid void dlfbr() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        privbtf trbnsifnt Sft<K> kfySft;
        privbtf trbnsifnt Sft<Mbp.Entry<K,V>> fntrySft;
        privbtf trbnsifnt Collfdtion<V> vblufs;

        publid Sft<K> kfySft() {
            if (kfySft==null)
                kfySft = unmodifibblfSft(m.kfySft());
            rfturn kfySft;
        }

        publid Sft<Mbp.Entry<K,V>> fntrySft() {
            if (fntrySft==null)
                fntrySft = nfw UnmodifibblfEntrySft<>(m.fntrySft());
            rfturn fntrySft;
        }

        publid Collfdtion<V> vblufs() {
            if (vblufs==null)
                vblufs = unmodifibblfCollfdtion(m.vblufs());
            rfturn vblufs;
        }

        publid boolfbn fqubls(Objfdt o) {rfturn o == this || m.fqubls(o);}
        publid int hbshCodf()           {rfturn m.hbshCodf();}
        publid String toString()        {rfturn m.toString();}

        // Ovfrridf dffbult mfthods in Mbp
        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        publid V gftOrDffbult(Objfdt k, V dffbultVbluf) {
            // Sbff dbst bs wf don't dhbngf thf vbluf
            rfturn ((Mbp<K, V>)m).gftOrDffbult(k, dffbultVbluf);
        }

        @Ovfrridf
        publid void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
            m.forEbdh(bdtion);
        }

        @Ovfrridf
        publid void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V putIfAbsfnt(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V rfplbdf(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfAbsfnt(K kfy, Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfPrfsfnt(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputf(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V mfrgf(K kfy, V vbluf,
                BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        /**
         * Wf nffd this dlbss in bddition to UnmodifibblfSft bs
         * Mbp.Entrifs thfmsflvfs pfrmit modifidbtion of thf bbdking Mbp
         * vib thfir sftVbluf opfrbtion.  This dlbss is subtlf: thfrf brf
         * mbny possiblf bttbdks thbt must bf thwbrtfd.
         *
         * @sfribl indludf
         */
        stbtid dlbss UnmodifibblfEntrySft<K,V>
            fxtfnds UnmodifibblfSft<Mbp.Entry<K,V>> {
            privbtf stbtid finbl long sfriblVfrsionUID = 7854390611657943733L;

            @SupprfssWbrnings({"undhfdkfd", "rbwtypfs"})
            UnmodifibblfEntrySft(Sft<? fxtfnds Mbp.Entry<? fxtfnds K, ? fxtfnds V>> s) {
                // Nffd to dbst to rbw in ordfr to work bround b limitbtion in thf typf systfm
                supfr((Sft)s);
            }

            stbtid <K, V> Consumfr<Mbp.Entry<K, V>> fntryConsumfr(Consumfr<? supfr Entry<K, V>> bdtion) {
                rfturn f -> bdtion.bddfpt(nfw UnmodifibblfEntry<>(f));
            }

            publid void forEbdh(Consumfr<? supfr Entry<K, V>> bdtion) {
                Objfdts.rfquirfNonNull(bdtion);
                d.forEbdh(fntryConsumfr(bdtion));
            }

            stbtid finbl dlbss UnmodifibblfEntrySftSplitfrbtor<K, V>
                    implfmfnts Splitfrbtor<Entry<K,V>> {
                finbl Splitfrbtor<Mbp.Entry<K, V>> s;

                UnmodifibblfEntrySftSplitfrbtor(Splitfrbtor<Entry<K, V>> s) {
                    this.s = s;
                }

                @Ovfrridf
                publid boolfbn tryAdvbndf(Consumfr<? supfr Entry<K, V>> bdtion) {
                    Objfdts.rfquirfNonNull(bdtion);
                    rfturn s.tryAdvbndf(fntryConsumfr(bdtion));
                }

                @Ovfrridf
                publid void forEbdhRfmbining(Consumfr<? supfr Entry<K, V>> bdtion) {
                    Objfdts.rfquirfNonNull(bdtion);
                    s.forEbdhRfmbining(fntryConsumfr(bdtion));
                }

                @Ovfrridf
                publid Splitfrbtor<Entry<K, V>> trySplit() {
                    Splitfrbtor<Entry<K, V>> split = s.trySplit();
                    rfturn split == null
                           ? null
                           : nfw UnmodifibblfEntrySftSplitfrbtor<>(split);
                }

                @Ovfrridf
                publid long fstimbtfSizf() {
                    rfturn s.fstimbtfSizf();
                }

                @Ovfrridf
                publid long gftExbdtSizfIfKnown() {
                    rfturn s.gftExbdtSizfIfKnown();
                }

                @Ovfrridf
                publid int dhbrbdtfristids() {
                    rfturn s.dhbrbdtfristids();
                }

                @Ovfrridf
                publid boolfbn hbsChbrbdtfristids(int dhbrbdtfristids) {
                    rfturn s.hbsChbrbdtfristids(dhbrbdtfristids);
                }

                @Ovfrridf
                publid Compbrbtor<? supfr Entry<K, V>> gftCompbrbtor() {
                    rfturn s.gftCompbrbtor();
                }
            }

            @SupprfssWbrnings("undhfdkfd")
            publid Splitfrbtor<Entry<K,V>> splitfrbtor() {
                rfturn nfw UnmodifibblfEntrySftSplitfrbtor<>(
                        (Splitfrbtor<Mbp.Entry<K, V>>) d.splitfrbtor());
            }

            @Ovfrridf
            publid Strfbm<Entry<K,V>> strfbm() {
                rfturn StrfbmSupport.strfbm(splitfrbtor(), fblsf);
            }

            @Ovfrridf
            publid Strfbm<Entry<K,V>> pbrbllflStrfbm() {
                rfturn StrfbmSupport.strfbm(splitfrbtor(), truf);
            }

            publid Itfrbtor<Mbp.Entry<K,V>> itfrbtor() {
                rfturn nfw Itfrbtor<Mbp.Entry<K,V>>() {
                    privbtf finbl Itfrbtor<? fxtfnds Mbp.Entry<? fxtfnds K, ? fxtfnds V>> i = d.itfrbtor();

                    publid boolfbn hbsNfxt() {
                        rfturn i.hbsNfxt();
                    }
                    publid Mbp.Entry<K,V> nfxt() {
                        rfturn nfw UnmodifibblfEntry<>(i.nfxt());
                    }
                    publid void rfmovf() {
                        throw nfw UnsupportfdOpfrbtionExdfption();
                    }
                };
            }

            @SupprfssWbrnings("undhfdkfd")
            publid Objfdt[] toArrby() {
                Objfdt[] b = d.toArrby();
                for (int i=0; i<b.lfngth; i++)
                    b[i] = nfw UnmodifibblfEntry<>((Mbp.Entry<? fxtfnds K, ? fxtfnds V>)b[i]);
                rfturn b;
            }

            @SupprfssWbrnings("undhfdkfd")
            publid <T> T[] toArrby(T[] b) {
                // Wf don't pbss b to d.toArrby, to bvoid window of
                // vulnfrbbility whfrfin bn unsdrupulous multithrfbdfd dlifnt
                // dould gft his hbnds on rbw (unwrbppfd) Entrifs from d.
                Objfdt[] brr = d.toArrby(b.lfngth==0 ? b : Arrbys.dopyOf(b, 0));

                for (int i=0; i<brr.lfngth; i++)
                    brr[i] = nfw UnmodifibblfEntry<>((Mbp.Entry<? fxtfnds K, ? fxtfnds V>)brr[i]);

                if (brr.lfngth > b.lfngth)
                    rfturn (T[])brr;

                Systfm.brrbydopy(brr, 0, b, 0, brr.lfngth);
                if (b.lfngth > brr.lfngth)
                    b[brr.lfngth] = null;
                rfturn b;
            }

            /**
             * This mfthod is ovfrriddfn to protfdt thf bbdking sft bgbinst
             * bn objfdt with b nffbrious fqubls fundtion thbt sfnsfs
             * thbt thf fqublity-dbndidbtf is Mbp.Entry bnd dblls its
             * sftVbluf mfthod.
             */
            publid boolfbn dontbins(Objfdt o) {
                if (!(o instbndfof Mbp.Entry))
                    rfturn fblsf;
                rfturn d.dontbins(
                    nfw UnmodifibblfEntry<>((Mbp.Entry<?,?>) o));
            }

            /**
             * Thf nfxt two mfthods brf ovfrriddfn to protfdt bgbinst
             * bn unsdrupulous List whosf dontbins(Objfdt o) mfthod sfnsfs
             * whfn o is b Mbp.Entry, bnd dblls o.sftVbluf.
             */
            publid boolfbn dontbinsAll(Collfdtion<?> doll) {
                for (Objfdt f : doll) {
                    if (!dontbins(f)) // Invokfs sbff dontbins() bbovf
                        rfturn fblsf;
                }
                rfturn truf;
            }
            publid boolfbn fqubls(Objfdt o) {
                if (o == this)
                    rfturn truf;

                if (!(o instbndfof Sft))
                    rfturn fblsf;
                Sft<?> s = (Sft<?>) o;
                if (s.sizf() != d.sizf())
                    rfturn fblsf;
                rfturn dontbinsAll(s); // Invokfs sbff dontbinsAll() bbovf
            }

            /**
             * This "wrbppfr dlbss" sfrvfs two purposfs: it prfvfnts
             * thf dlifnt from modifying thf bbdking Mbp, by short-dirduiting
             * thf sftVbluf mfthod, bnd it protfdts thf bbdking Mbp bgbinst
             * bn ill-bfhbvfd Mbp.Entry thbt bttfmpts to modify bnothfr
             * Mbp Entry whfn bskfd to pfrform bn fqublity dhfdk.
             */
            privbtf stbtid dlbss UnmodifibblfEntry<K,V> implfmfnts Mbp.Entry<K,V> {
                privbtf Mbp.Entry<? fxtfnds K, ? fxtfnds V> f;

                UnmodifibblfEntry(Mbp.Entry<? fxtfnds K, ? fxtfnds V> f)
                        {this.f = Objfdts.rfquirfNonNull(f);}

                publid K gftKfy()        {rfturn f.gftKfy();}
                publid V gftVbluf()      {rfturn f.gftVbluf();}
                publid V sftVbluf(V vbluf) {
                    throw nfw UnsupportfdOpfrbtionExdfption();
                }
                publid int hbshCodf()    {rfturn f.hbshCodf();}
                publid boolfbn fqubls(Objfdt o) {
                    if (this == o)
                        rfturn truf;
                    if (!(o instbndfof Mbp.Entry))
                        rfturn fblsf;
                    Mbp.Entry<?,?> t = (Mbp.Entry<?,?>)o;
                    rfturn fq(f.gftKfy(),   t.gftKfy()) &&
                           fq(f.gftVbluf(), t.gftVbluf());
                }
                publid String toString() {rfturn f.toString();}
            }
        }
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd sortfd mbp.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * sortfd mbps.  Qufry opfrbtions on thf rfturnfd sortfd mbp "rfbd through"
     * to thf spfdififd sortfd mbp.  Attfmpts to modify thf rfturnfd
     * sortfd mbp, whfthfr dirfdt, vib its dollfdtion vifws, or vib its
     * <tt>subMbp</tt>, <tt>hfbdMbp</tt>, or <tt>tbilMbp</tt> vifws, rfsult in
     * bn <tt>UnsupportfdOpfrbtionExdfption</tt>.<p>
     *
     * Thf rfturnfd sortfd mbp will bf sfriblizbblf if thf spfdififd sortfd mbp
     * is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm m thf sortfd mbp for whidh bn unmodifibblf vifw is to bf
     *        rfturnfd.
     * @rfturn bn unmodifibblf vifw of thf spfdififd sortfd mbp.
     */
    publid stbtid <K,V> SortfdMbp<K,V> unmodifibblfSortfdMbp(SortfdMbp<K, ? fxtfnds V> m) {
        rfturn nfw UnmodifibblfSortfdMbp<>(m);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfSortfdMbp<K,V>
          fxtfnds UnmodifibblfMbp<K,V>
          implfmfnts SortfdMbp<K,V>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -8806743815996713206L;

        privbtf finbl SortfdMbp<K, ? fxtfnds V> sm;

        UnmodifibblfSortfdMbp(SortfdMbp<K, ? fxtfnds V> m) {supfr(m); sm = m; }
        publid Compbrbtor<? supfr K> dompbrbtor()   { rfturn sm.dompbrbtor(); }
        publid SortfdMbp<K,V> subMbp(K fromKfy, K toKfy)
             { rfturn nfw UnmodifibblfSortfdMbp<>(sm.subMbp(fromKfy, toKfy)); }
        publid SortfdMbp<K,V> hfbdMbp(K toKfy)
                     { rfturn nfw UnmodifibblfSortfdMbp<>(sm.hfbdMbp(toKfy)); }
        publid SortfdMbp<K,V> tbilMbp(K fromKfy)
                   { rfturn nfw UnmodifibblfSortfdMbp<>(sm.tbilMbp(fromKfy)); }
        publid K firstKfy()                           { rfturn sm.firstKfy(); }
        publid K lbstKfy()                             { rfturn sm.lbstKfy(); }
    }

    /**
     * Rfturns bn unmodifibblf vifw of thf spfdififd nbvigbblf mbp.  This mfthod
     * bllows modulfs to providf usfrs with "rfbd-only" bddfss to intfrnbl
     * nbvigbblf mbps.  Qufry opfrbtions on thf rfturnfd nbvigbblf mbp "rfbd
     * through" to thf spfdififd nbvigbblf mbp.  Attfmpts to modify thf rfturnfd
     * nbvigbblf mbp, whfthfr dirfdt, vib its dollfdtion vifws, or vib its
     * {@dodf subMbp}, {@dodf hfbdMbp}, or {@dodf tbilMbp} vifws, rfsult in
     * bn {@dodf UnsupportfdOpfrbtionExdfption}.<p>
     *
     * Thf rfturnfd nbvigbblf mbp will bf sfriblizbblf if thf spfdififd
     * nbvigbblf mbp is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm m thf nbvigbblf mbp for whidh bn unmodifibblf vifw is to bf
     *        rfturnfd
     * @rfturn bn unmodifibblf vifw of thf spfdififd nbvigbblf mbp
     * @sindf 1.8
     */
    publid stbtid <K,V> NbvigbblfMbp<K,V> unmodifibblfNbvigbblfMbp(NbvigbblfMbp<K, ? fxtfnds V> m) {
        rfturn nfw UnmodifibblfNbvigbblfMbp<>(m);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss UnmodifibblfNbvigbblfMbp<K,V>
          fxtfnds UnmodifibblfSortfdMbp<K,V>
          implfmfnts NbvigbblfMbp<K,V>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -4858195264774772197L;

        /**
         * A dlbss for thf {@link EMPTY_NAVIGABLE_MAP} whidh nffds rfbdRfsolvf
         * to prfsfrvf singlfton propfrty.
         *
         * @pbrbm <K> typf of kfys, if thfrf wfrf bny, bnd of bounds
         * @pbrbm <V> typf of vblufs, if thfrf wfrf bny
         */
        privbtf stbtid dlbss EmptyNbvigbblfMbp<K,V> fxtfnds UnmodifibblfNbvigbblfMbp<K,V>
            implfmfnts Sfriblizbblf {

            privbtf stbtid finbl long sfriblVfrsionUID = -2239321462712562324L;

            EmptyNbvigbblfMbp()                       { supfr(nfw TrffMbp<>()); }

            @Ovfrridf
            publid NbvigbblfSft<K> nbvigbblfKfySft()
                                                { rfturn fmptyNbvigbblfSft(); }

            privbtf Objfdt rfbdRfsolvf()        { rfturn EMPTY_NAVIGABLE_MAP; }
        }

        /**
         * Singlfton for {@link fmptyNbvigbblfMbp()} whidh is blso immutbblf.
         */
        privbtf stbtid finbl EmptyNbvigbblfMbp<?,?> EMPTY_NAVIGABLE_MAP =
            nfw EmptyNbvigbblfMbp<>();

        /**
         * Thf instbndf wf wrbp bnd protfdt.
         */
        privbtf finbl NbvigbblfMbp<K, ? fxtfnds V> nm;

        UnmodifibblfNbvigbblfMbp(NbvigbblfMbp<K, ? fxtfnds V> m)
                                                            {supfr(m); nm = m;}

        publid K lowfrKfy(K kfy)                   { rfturn nm.lowfrKfy(kfy); }
        publid K floorKfy(K kfy)                   { rfturn nm.floorKfy(kfy); }
        publid K dfilingKfy(K kfy)               { rfturn nm.dfilingKfy(kfy); }
        publid K highfrKfy(K kfy)                 { rfturn nm.highfrKfy(kfy); }

        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> lowfrEntry(K kfy) {
            Entry<K,V> lowfr = (Entry<K, V>) nm.lowfrEntry(kfy);
            rfturn (null != lowfr)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(lowfr)
                : null;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> floorEntry(K kfy) {
            Entry<K,V> floor = (Entry<K, V>) nm.floorEntry(kfy);
            rfturn (null != floor)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(floor)
                : null;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> dfilingEntry(K kfy) {
            Entry<K,V> dfiling = (Entry<K, V>) nm.dfilingEntry(kfy);
            rfturn (null != dfiling)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(dfiling)
                : null;
        }


        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> highfrEntry(K kfy) {
            Entry<K,V> highfr = (Entry<K, V>) nm.highfrEntry(kfy);
            rfturn (null != highfr)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(highfr)
                : null;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> firstEntry() {
            Entry<K,V> first = (Entry<K, V>) nm.firstEntry();
            rfturn (null != first)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(first)
                : null;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid Entry<K, V> lbstEntry() {
            Entry<K,V> lbst = (Entry<K, V>) nm.lbstEntry();
            rfturn (null != lbst)
                ? nfw UnmodifibblfEntrySft.UnmodifibblfEntry<>(lbst)
                : null;
        }

        publid Entry<K, V> pollFirstEntry()
                                 { throw nfw UnsupportfdOpfrbtionExdfption(); }
        publid Entry<K, V> pollLbstEntry()
                                 { throw nfw UnsupportfdOpfrbtionExdfption(); }
        publid NbvigbblfMbp<K, V> dfsdfndingMbp()
                       { rfturn unmodifibblfNbvigbblfMbp(nm.dfsdfndingMbp()); }
        publid NbvigbblfSft<K> nbvigbblfKfySft()
                     { rfturn unmodifibblfNbvigbblfSft(nm.nbvigbblfKfySft()); }
        publid NbvigbblfSft<K> dfsdfndingKfySft()
                    { rfturn unmodifibblfNbvigbblfSft(nm.dfsdfndingKfySft()); }

        publid NbvigbblfMbp<K, V> subMbp(K fromKfy, boolfbn fromIndlusivf, K toKfy, boolfbn toIndlusivf) {
            rfturn unmodifibblfNbvigbblfMbp(
                nm.subMbp(fromKfy, fromIndlusivf, toKfy, toIndlusivf));
        }

        publid NbvigbblfMbp<K, V> hfbdMbp(K toKfy, boolfbn indlusivf)
             { rfturn unmodifibblfNbvigbblfMbp(nm.hfbdMbp(toKfy, indlusivf)); }
        publid NbvigbblfMbp<K, V> tbilMbp(K fromKfy, boolfbn indlusivf)
           { rfturn unmodifibblfNbvigbblfMbp(nm.tbilMbp(fromKfy, indlusivf)); }
    }

    // Syndh Wrbppfrs

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) dollfdtion bbdkfd by thf spfdififd
     * dollfdtion.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking dollfdtion is bddomplishfd
     * through thf rfturnfd dollfdtion.<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * dollfdtion whfn trbvfrsing it vib {@link Itfrbtor}, {@link Splitfrbtor}
     * or {@link Strfbm}:
     * <prf>
     *  Collfdtion d = Collfdtions.syndhronizfdCollfdtion(myCollfdtion);
     *     ...
     *  syndhronizfd (d) {
     *      Itfrbtor i = d.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *         foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd dollfdtion dofs <i>not</i> pbss thf {@dodf hbshCodf}
     * bnd {@dodf fqubls} opfrbtions through to thf bbdking dollfdtion, but
     * rflifs on {@dodf Objfdt}'s fqubls bnd hbshCodf mfthods.  This is
     * nfdfssbry to prfsfrvf thf dontrbdts of thfsf opfrbtions in thf dbsf
     * thbt thf bbdking dollfdtion is b sft or b list.<p>
     *
     * Thf rfturnfd dollfdtion will bf sfriblizbblf if thf spfdififd dollfdtion
     * is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm  d thf dollfdtion to bf "wrbppfd" in b syndhronizfd dollfdtion.
     * @rfturn b syndhronizfd vifw of thf spfdififd dollfdtion.
     */
    publid stbtid <T> Collfdtion<T> syndhronizfdCollfdtion(Collfdtion<T> d) {
        rfturn nfw SyndhronizfdCollfdtion<>(d);
    }

    stbtid <T> Collfdtion<T> syndhronizfdCollfdtion(Collfdtion<T> d, Objfdt mutfx) {
        rfturn nfw SyndhronizfdCollfdtion<>(d, mutfx);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdCollfdtion<E> implfmfnts Collfdtion<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 3053995032091335093L;

        finbl Collfdtion<E> d;  // Bbdking Collfdtion
        finbl Objfdt mutfx;     // Objfdt on whidh to syndhronizf

        SyndhronizfdCollfdtion(Collfdtion<E> d) {
            this.d = Objfdts.rfquirfNonNull(d);
            mutfx = this;
        }

        SyndhronizfdCollfdtion(Collfdtion<E> d, Objfdt mutfx) {
            this.d = Objfdts.rfquirfNonNull(d);
            this.mutfx = Objfdts.rfquirfNonNull(mutfx);
        }

        publid int sizf() {
            syndhronizfd (mutfx) {rfturn d.sizf();}
        }
        publid boolfbn isEmpty() {
            syndhronizfd (mutfx) {rfturn d.isEmpty();}
        }
        publid boolfbn dontbins(Objfdt o) {
            syndhronizfd (mutfx) {rfturn d.dontbins(o);}
        }
        publid Objfdt[] toArrby() {
            syndhronizfd (mutfx) {rfturn d.toArrby();}
        }
        publid <T> T[] toArrby(T[] b) {
            syndhronizfd (mutfx) {rfturn d.toArrby(b);}
        }

        publid Itfrbtor<E> itfrbtor() {
            rfturn d.itfrbtor(); // Must bf mbnublly syndhfd by usfr!
        }

        publid boolfbn bdd(E f) {
            syndhronizfd (mutfx) {rfturn d.bdd(f);}
        }
        publid boolfbn rfmovf(Objfdt o) {
            syndhronizfd (mutfx) {rfturn d.rfmovf(o);}
        }

        publid boolfbn dontbinsAll(Collfdtion<?> doll) {
            syndhronizfd (mutfx) {rfturn d.dontbinsAll(doll);}
        }
        publid boolfbn bddAll(Collfdtion<? fxtfnds E> doll) {
            syndhronizfd (mutfx) {rfturn d.bddAll(doll);}
        }
        publid boolfbn rfmovfAll(Collfdtion<?> doll) {
            syndhronizfd (mutfx) {rfturn d.rfmovfAll(doll);}
        }
        publid boolfbn rftbinAll(Collfdtion<?> doll) {
            syndhronizfd (mutfx) {rfturn d.rftbinAll(doll);}
        }
        publid void dlfbr() {
            syndhronizfd (mutfx) {d.dlfbr();}
        }
        publid String toString() {
            syndhronizfd (mutfx) {rfturn d.toString();}
        }
        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> donsumfr) {
            syndhronizfd (mutfx) {d.forEbdh(donsumfr);}
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            syndhronizfd (mutfx) {rfturn d.rfmovfIf(filtfr);}
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {
            rfturn d.splitfrbtor(); // Must bf mbnublly syndhfd by usfr!
        }
        @Ovfrridf
        publid Strfbm<E> strfbm() {
            rfturn d.strfbm(); // Must bf mbnublly syndhfd by usfr!
        }
        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm() {
            rfturn d.pbrbllflStrfbm(); // Must bf mbnublly syndhfd by usfr!
        }
        privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
            syndhronizfd (mutfx) {s.dffbultWritfObjfdt();}
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) sft bbdkfd by thf spfdififd
     * sft.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking sft is bddomplishfd
     * through thf rfturnfd sft.<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * sft whfn itfrbting ovfr it:
     * <prf>
     *  Sft s = Collfdtions.syndhronizfdSft(nfw HbshSft());
     *      ...
     *  syndhronizfd (s) {
     *      Itfrbtor i = s.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd sft will bf sfriblizbblf if thf spfdififd sft is
     * sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm  s thf sft to bf "wrbppfd" in b syndhronizfd sft.
     * @rfturn b syndhronizfd vifw of thf spfdififd sft.
     */
    publid stbtid <T> Sft<T> syndhronizfdSft(Sft<T> s) {
        rfturn nfw SyndhronizfdSft<>(s);
    }

    stbtid <T> Sft<T> syndhronizfdSft(Sft<T> s, Objfdt mutfx) {
        rfturn nfw SyndhronizfdSft<>(s, mutfx);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdSft<E>
          fxtfnds SyndhronizfdCollfdtion<E>
          implfmfnts Sft<E> {
        privbtf stbtid finbl long sfriblVfrsionUID = 487447009682186044L;

        SyndhronizfdSft(Sft<E> s) {
            supfr(s);
        }
        SyndhronizfdSft(Sft<E> s, Objfdt mutfx) {
            supfr(s, mutfx);
        }

        publid boolfbn fqubls(Objfdt o) {
            if (this == o)
                rfturn truf;
            syndhronizfd (mutfx) {rfturn d.fqubls(o);}
        }
        publid int hbshCodf() {
            syndhronizfd (mutfx) {rfturn d.hbshCodf();}
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) sortfd sft bbdkfd by thf spfdififd
     * sortfd sft.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking sortfd sft is bddomplishfd
     * through thf rfturnfd sortfd sft (or its vifws).<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * sortfd sft whfn itfrbting ovfr it or bny of its <tt>subSft</tt>,
     * <tt>hfbdSft</tt>, or <tt>tbilSft</tt> vifws.
     * <prf>
     *  SortfdSft s = Collfdtions.syndhronizfdSortfdSft(nfw TrffSft());
     *      ...
     *  syndhronizfd (s) {
     *      Itfrbtor i = s.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * or:
     * <prf>
     *  SortfdSft s = Collfdtions.syndhronizfdSortfdSft(nfw TrffSft());
     *  SortfdSft s2 = s.hfbdSft(foo);
     *      ...
     *  syndhronizfd (s) {  // Notf: s, not s2!!!
     *      Itfrbtor i = s2.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd sortfd sft will bf sfriblizbblf if thf spfdififd
     * sortfd sft is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm  s thf sortfd sft to bf "wrbppfd" in b syndhronizfd sortfd sft.
     * @rfturn b syndhronizfd vifw of thf spfdififd sortfd sft.
     */
    publid stbtid <T> SortfdSft<T> syndhronizfdSortfdSft(SortfdSft<T> s) {
        rfturn nfw SyndhronizfdSortfdSft<>(s);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdSortfdSft<E>
        fxtfnds SyndhronizfdSft<E>
        implfmfnts SortfdSft<E>
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 8695801310862127406L;

        privbtf finbl SortfdSft<E> ss;

        SyndhronizfdSortfdSft(SortfdSft<E> s) {
            supfr(s);
            ss = s;
        }
        SyndhronizfdSortfdSft(SortfdSft<E> s, Objfdt mutfx) {
            supfr(s, mutfx);
            ss = s;
        }

        publid Compbrbtor<? supfr E> dompbrbtor() {
            syndhronizfd (mutfx) {rfturn ss.dompbrbtor();}
        }

        publid SortfdSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdSortfdSft<>(
                    ss.subSft(fromElfmfnt, toElfmfnt), mutfx);
            }
        }
        publid SortfdSft<E> hfbdSft(E toElfmfnt) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdSortfdSft<>(ss.hfbdSft(toElfmfnt), mutfx);
            }
        }
        publid SortfdSft<E> tbilSft(E fromElfmfnt) {
            syndhronizfd (mutfx) {
               rfturn nfw SyndhronizfdSortfdSft<>(ss.tbilSft(fromElfmfnt),mutfx);
            }
        }

        publid E first() {
            syndhronizfd (mutfx) {rfturn ss.first();}
        }
        publid E lbst() {
            syndhronizfd (mutfx) {rfturn ss.lbst();}
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) nbvigbblf sft bbdkfd by thf
     * spfdififd nbvigbblf sft.  In ordfr to gubrbntff sfribl bddfss, it is
     * dritidbl thbt <strong>bll</strong> bddfss to thf bbdking nbvigbblf sft is
     * bddomplishfd through thf rfturnfd nbvigbblf sft (or its vifws).<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * nbvigbblf sft whfn itfrbting ovfr it or bny of its {@dodf subSft},
     * {@dodf hfbdSft}, or {@dodf tbilSft} vifws.
     * <prf>
     *  NbvigbblfSft s = Collfdtions.syndhronizfdNbvigbblfSft(nfw TrffSft());
     *      ...
     *  syndhronizfd (s) {
     *      Itfrbtor i = s.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * or:
     * <prf>
     *  NbvigbblfSft s = Collfdtions.syndhronizfdNbvigbblfSft(nfw TrffSft());
     *  NbvigbblfSft s2 = s.hfbdSft(foo, truf);
     *      ...
     *  syndhronizfd (s) {  // Notf: s, not s2!!!
     *      Itfrbtor i = s2.itfrbtor(); // Must bf in thf syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd nbvigbblf sft will bf sfriblizbblf if thf spfdififd
     * nbvigbblf sft is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm  s thf nbvigbblf sft to bf "wrbppfd" in b syndhronizfd nbvigbblf
     * sft
     * @rfturn b syndhronizfd vifw of thf spfdififd nbvigbblf sft
     * @sindf 1.8
     */
    publid stbtid <T> NbvigbblfSft<T> syndhronizfdNbvigbblfSft(NbvigbblfSft<T> s) {
        rfturn nfw SyndhronizfdNbvigbblfSft<>(s);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdNbvigbblfSft<E>
        fxtfnds SyndhronizfdSortfdSft<E>
        implfmfnts NbvigbblfSft<E>
    {
        privbtf stbtid finbl long sfriblVfrsionUID = -5505529816273629798L;

        privbtf finbl NbvigbblfSft<E> ns;

        SyndhronizfdNbvigbblfSft(NbvigbblfSft<E> s) {
            supfr(s);
            ns = s;
        }

        SyndhronizfdNbvigbblfSft(NbvigbblfSft<E> s, Objfdt mutfx) {
            supfr(s, mutfx);
            ns = s;
        }
        publid E lowfr(E f)      { syndhronizfd (mutfx) {rfturn ns.lowfr(f);} }
        publid E floor(E f)      { syndhronizfd (mutfx) {rfturn ns.floor(f);} }
        publid E dfiling(E f)  { syndhronizfd (mutfx) {rfturn ns.dfiling(f);} }
        publid E highfr(E f)    { syndhronizfd (mutfx) {rfturn ns.highfr(f);} }
        publid E pollFirst()  { syndhronizfd (mutfx) {rfturn ns.pollFirst();} }
        publid E pollLbst()    { syndhronizfd (mutfx) {rfturn ns.pollLbst();} }

        publid NbvigbblfSft<E> dfsdfndingSft() {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.dfsdfndingSft(), mutfx);
            }
        }

        publid Itfrbtor<E> dfsdfndingItfrbtor()
                 { syndhronizfd (mutfx) { rfturn dfsdfndingSft().itfrbtor(); } }

        publid NbvigbblfSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.subSft(fromElfmfnt, truf, toElfmfnt, fblsf), mutfx);
            }
        }
        publid NbvigbblfSft<E> hfbdSft(E toElfmfnt) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.hfbdSft(toElfmfnt, fblsf), mutfx);
            }
        }
        publid NbvigbblfSft<E> tbilSft(E fromElfmfnt) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.tbilSft(fromElfmfnt, truf), mutfx);
            }
        }

        publid NbvigbblfSft<E> subSft(E fromElfmfnt, boolfbn fromIndlusivf, E toElfmfnt, boolfbn toIndlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.subSft(fromElfmfnt, fromIndlusivf, toElfmfnt, toIndlusivf), mutfx);
            }
        }

        publid NbvigbblfSft<E> hfbdSft(E toElfmfnt, boolfbn indlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.hfbdSft(toElfmfnt, indlusivf), mutfx);
            }
        }

        publid NbvigbblfSft<E> tbilSft(E fromElfmfnt, boolfbn indlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(ns.tbilSft(fromElfmfnt, indlusivf), mutfx);
            }
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) list bbdkfd by thf spfdififd
     * list.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking list is bddomplishfd
     * through thf rfturnfd list.<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * list whfn itfrbting ovfr it:
     * <prf>
     *  List list = Collfdtions.syndhronizfdList(nfw ArrbyList());
     *      ...
     *  syndhronizfd (list) {
     *      Itfrbtor i = list.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd list will bf sfriblizbblf if thf spfdififd list is
     * sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm  list thf list to bf "wrbppfd" in b syndhronizfd list.
     * @rfturn b syndhronizfd vifw of thf spfdififd list.
     */
    publid stbtid <T> List<T> syndhronizfdList(List<T> list) {
        rfturn (list instbndfof RbndomAddfss ?
                nfw SyndhronizfdRbndomAddfssList<>(list) :
                nfw SyndhronizfdList<>(list));
    }

    stbtid <T> List<T> syndhronizfdList(List<T> list, Objfdt mutfx) {
        rfturn (list instbndfof RbndomAddfss ?
                nfw SyndhronizfdRbndomAddfssList<>(list, mutfx) :
                nfw SyndhronizfdList<>(list, mutfx));
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdList<E>
        fxtfnds SyndhronizfdCollfdtion<E>
        implfmfnts List<E> {
        privbtf stbtid finbl long sfriblVfrsionUID = -7754090372962971524L;

        finbl List<E> list;

        SyndhronizfdList(List<E> list) {
            supfr(list);
            this.list = list;
        }
        SyndhronizfdList(List<E> list, Objfdt mutfx) {
            supfr(list, mutfx);
            this.list = list;
        }

        publid boolfbn fqubls(Objfdt o) {
            if (this == o)
                rfturn truf;
            syndhronizfd (mutfx) {rfturn list.fqubls(o);}
        }
        publid int hbshCodf() {
            syndhronizfd (mutfx) {rfturn list.hbshCodf();}
        }

        publid E gft(int indfx) {
            syndhronizfd (mutfx) {rfturn list.gft(indfx);}
        }
        publid E sft(int indfx, E flfmfnt) {
            syndhronizfd (mutfx) {rfturn list.sft(indfx, flfmfnt);}
        }
        publid void bdd(int indfx, E flfmfnt) {
            syndhronizfd (mutfx) {list.bdd(indfx, flfmfnt);}
        }
        publid E rfmovf(int indfx) {
            syndhronizfd (mutfx) {rfturn list.rfmovf(indfx);}
        }

        publid int indfxOf(Objfdt o) {
            syndhronizfd (mutfx) {rfturn list.indfxOf(o);}
        }
        publid int lbstIndfxOf(Objfdt o) {
            syndhronizfd (mutfx) {rfturn list.lbstIndfxOf(o);}
        }

        publid boolfbn bddAll(int indfx, Collfdtion<? fxtfnds E> d) {
            syndhronizfd (mutfx) {rfturn list.bddAll(indfx, d);}
        }

        publid ListItfrbtor<E> listItfrbtor() {
            rfturn list.listItfrbtor(); // Must bf mbnublly syndhfd by usfr
        }

        publid ListItfrbtor<E> listItfrbtor(int indfx) {
            rfturn list.listItfrbtor(indfx); // Must bf mbnublly syndhfd by usfr
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdList<>(list.subList(fromIndfx, toIndfx),
                                            mutfx);
            }
        }

        @Ovfrridf
        publid void rfplbdfAll(UnbryOpfrbtor<E> opfrbtor) {
            syndhronizfd (mutfx) {list.rfplbdfAll(opfrbtor);}
        }
        @Ovfrridf
        publid void sort(Compbrbtor<? supfr E> d) {
            syndhronizfd (mutfx) {list.sort(d);}
        }

        /**
         * SyndhronizfdRbndomAddfssList instbndfs brf sfriblizfd bs
         * SyndhronizfdList instbndfs to bllow thfm to bf dfsfriblizfd
         * in prf-1.4 JREs (whidh do not hbvf SyndhronizfdRbndomAddfssList).
         * This mfthod invfrts thf trbnsformbtion.  As b bfnffidibl
         * sidf-ffffdt, it blso grbfts thf RbndomAddfss mbrkfr onto
         * SyndhronizfdList instbndfs thbt wfrf sfriblizfd in prf-1.4 JREs.
         *
         * Notf: Unfortunbtfly, SyndhronizfdRbndomAddfssList instbndfs
         * sfriblizfd in 1.4.1 bnd dfsfriblizfd in 1.4 will bfdomf
         * SyndhronizfdList instbndfs, bs this mfthod wbs missing in 1.4.
         */
        privbtf Objfdt rfbdRfsolvf() {
            rfturn (list instbndfof RbndomAddfss
                    ? nfw SyndhronizfdRbndomAddfssList<>(list)
                    : this);
        }
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdRbndomAddfssList<E>
        fxtfnds SyndhronizfdList<E>
        implfmfnts RbndomAddfss {

        SyndhronizfdRbndomAddfssList(List<E> list) {
            supfr(list);
        }

        SyndhronizfdRbndomAddfssList(List<E> list, Objfdt mutfx) {
            supfr(list, mutfx);
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdRbndomAddfssList<>(
                    list.subList(fromIndfx, toIndfx), mutfx);
            }
        }

        privbtf stbtid finbl long sfriblVfrsionUID = 1530674583602358482L;

        /**
         * Allows instbndfs to bf dfsfriblizfd in prf-1.4 JREs (whidh do
         * not hbvf SyndhronizfdRbndomAddfssList).  SyndhronizfdList hbs
         * b rfbdRfsolvf mfthod thbt invfrts this trbnsformbtion upon
         * dfsfriblizbtion.
         */
        privbtf Objfdt writfRfplbdf() {
            rfturn nfw SyndhronizfdList<>(list);
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) mbp bbdkfd by thf spfdififd
     * mbp.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking mbp is bddomplishfd
     * through thf rfturnfd mbp.<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * mbp whfn itfrbting ovfr bny of its dollfdtion vifws:
     * <prf>
     *  Mbp m = Collfdtions.syndhronizfdMbp(nfw HbshMbp());
     *      ...
     *  Sft s = m.kfySft();  // Nffdn't bf in syndhronizfd blodk
     *      ...
     *  syndhronizfd (m) {  // Syndhronizing on m, not s!
     *      Itfrbtor i = s.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd mbp will bf sfriblizbblf if thf spfdififd mbp is
     * sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm  m thf mbp to bf "wrbppfd" in b syndhronizfd mbp.
     * @rfturn b syndhronizfd vifw of thf spfdififd mbp.
     */
    publid stbtid <K,V> Mbp<K,V> syndhronizfdMbp(Mbp<K,V> m) {
        rfturn nfw SyndhronizfdMbp<>(m);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss SyndhronizfdMbp<K,V>
        implfmfnts Mbp<K,V>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 1978198479659022715L;

        privbtf finbl Mbp<K,V> m;     // Bbdking Mbp
        finbl Objfdt      mutfx;        // Objfdt on whidh to syndhronizf

        SyndhronizfdMbp(Mbp<K,V> m) {
            this.m = Objfdts.rfquirfNonNull(m);
            mutfx = this;
        }

        SyndhronizfdMbp(Mbp<K,V> m, Objfdt mutfx) {
            this.m = m;
            this.mutfx = mutfx;
        }

        publid int sizf() {
            syndhronizfd (mutfx) {rfturn m.sizf();}
        }
        publid boolfbn isEmpty() {
            syndhronizfd (mutfx) {rfturn m.isEmpty();}
        }
        publid boolfbn dontbinsKfy(Objfdt kfy) {
            syndhronizfd (mutfx) {rfturn m.dontbinsKfy(kfy);}
        }
        publid boolfbn dontbinsVbluf(Objfdt vbluf) {
            syndhronizfd (mutfx) {rfturn m.dontbinsVbluf(vbluf);}
        }
        publid V gft(Objfdt kfy) {
            syndhronizfd (mutfx) {rfturn m.gft(kfy);}
        }

        publid V put(K kfy, V vbluf) {
            syndhronizfd (mutfx) {rfturn m.put(kfy, vbluf);}
        }
        publid V rfmovf(Objfdt kfy) {
            syndhronizfd (mutfx) {rfturn m.rfmovf(kfy);}
        }
        publid void putAll(Mbp<? fxtfnds K, ? fxtfnds V> mbp) {
            syndhronizfd (mutfx) {m.putAll(mbp);}
        }
        publid void dlfbr() {
            syndhronizfd (mutfx) {m.dlfbr();}
        }

        privbtf trbnsifnt Sft<K> kfySft;
        privbtf trbnsifnt Sft<Mbp.Entry<K,V>> fntrySft;
        privbtf trbnsifnt Collfdtion<V> vblufs;

        publid Sft<K> kfySft() {
            syndhronizfd (mutfx) {
                if (kfySft==null)
                    kfySft = nfw SyndhronizfdSft<>(m.kfySft(), mutfx);
                rfturn kfySft;
            }
        }

        publid Sft<Mbp.Entry<K,V>> fntrySft() {
            syndhronizfd (mutfx) {
                if (fntrySft==null)
                    fntrySft = nfw SyndhronizfdSft<>(m.fntrySft(), mutfx);
                rfturn fntrySft;
            }
        }

        publid Collfdtion<V> vblufs() {
            syndhronizfd (mutfx) {
                if (vblufs==null)
                    vblufs = nfw SyndhronizfdCollfdtion<>(m.vblufs(), mutfx);
                rfturn vblufs;
            }
        }

        publid boolfbn fqubls(Objfdt o) {
            if (this == o)
                rfturn truf;
            syndhronizfd (mutfx) {rfturn m.fqubls(o);}
        }
        publid int hbshCodf() {
            syndhronizfd (mutfx) {rfturn m.hbshCodf();}
        }
        publid String toString() {
            syndhronizfd (mutfx) {rfturn m.toString();}
        }

        // Ovfrridf dffbult mfthods in Mbp
        @Ovfrridf
        publid V gftOrDffbult(Objfdt k, V dffbultVbluf) {
            syndhronizfd (mutfx) {rfturn m.gftOrDffbult(k, dffbultVbluf);}
        }
        @Ovfrridf
        publid void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
            syndhronizfd (mutfx) {m.forEbdh(bdtion);}
        }
        @Ovfrridf
        publid void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
            syndhronizfd (mutfx) {m.rfplbdfAll(fundtion);}
        }
        @Ovfrridf
        publid V putIfAbsfnt(K kfy, V vbluf) {
            syndhronizfd (mutfx) {rfturn m.putIfAbsfnt(kfy, vbluf);}
        }
        @Ovfrridf
        publid boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
            syndhronizfd (mutfx) {rfturn m.rfmovf(kfy, vbluf);}
        }
        @Ovfrridf
        publid boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
            syndhronizfd (mutfx) {rfturn m.rfplbdf(kfy, oldVbluf, nfwVbluf);}
        }
        @Ovfrridf
        publid V rfplbdf(K kfy, V vbluf) {
            syndhronizfd (mutfx) {rfturn m.rfplbdf(kfy, vbluf);}
        }
        @Ovfrridf
        publid V domputfIfAbsfnt(K kfy,
                Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
            syndhronizfd (mutfx) {rfturn m.domputfIfAbsfnt(kfy, mbppingFundtion);}
        }
        @Ovfrridf
        publid V domputfIfPrfsfnt(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            syndhronizfd (mutfx) {rfturn m.domputfIfPrfsfnt(kfy, rfmbppingFundtion);}
        }
        @Ovfrridf
        publid V domputf(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            syndhronizfd (mutfx) {rfturn m.domputf(kfy, rfmbppingFundtion);}
        }
        @Ovfrridf
        publid V mfrgf(K kfy, V vbluf,
                BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            syndhronizfd (mutfx) {rfturn m.mfrgf(kfy, vbluf, rfmbppingFundtion);}
        }

        privbtf void writfObjfdt(ObjfdtOutputStrfbm s) throws IOExdfption {
            syndhronizfd (mutfx) {s.dffbultWritfObjfdt();}
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) sortfd mbp bbdkfd by thf spfdififd
     * sortfd mbp.  In ordfr to gubrbntff sfribl bddfss, it is dritidbl thbt
     * <strong>bll</strong> bddfss to thf bbdking sortfd mbp is bddomplishfd
     * through thf rfturnfd sortfd mbp (or its vifws).<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * sortfd mbp whfn itfrbting ovfr bny of its dollfdtion vifws, or thf
     * dollfdtions vifws of bny of its <tt>subMbp</tt>, <tt>hfbdMbp</tt> or
     * <tt>tbilMbp</tt> vifws.
     * <prf>
     *  SortfdMbp m = Collfdtions.syndhronizfdSortfdMbp(nfw TrffMbp());
     *      ...
     *  Sft s = m.kfySft();  // Nffdn't bf in syndhronizfd blodk
     *      ...
     *  syndhronizfd (m) {  // Syndhronizing on m, not s!
     *      Itfrbtor i = s.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * or:
     * <prf>
     *  SortfdMbp m = Collfdtions.syndhronizfdSortfdMbp(nfw TrffMbp());
     *  SortfdMbp m2 = m.subMbp(foo, bbr);
     *      ...
     *  Sft s2 = m2.kfySft();  // Nffdn't bf in syndhronizfd blodk
     *      ...
     *  syndhronizfd (m) {  // Syndhronizing on m, not m2 or s2!
     *      Itfrbtor i = s.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd sortfd mbp will bf sfriblizbblf if thf spfdififd
     * sortfd mbp is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm  m thf sortfd mbp to bf "wrbppfd" in b syndhronizfd sortfd mbp.
     * @rfturn b syndhronizfd vifw of thf spfdififd sortfd mbp.
     */
    publid stbtid <K,V> SortfdMbp<K,V> syndhronizfdSortfdMbp(SortfdMbp<K,V> m) {
        rfturn nfw SyndhronizfdSortfdMbp<>(m);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdSortfdMbp<K,V>
        fxtfnds SyndhronizfdMbp<K,V>
        implfmfnts SortfdMbp<K,V>
    {
        privbtf stbtid finbl long sfriblVfrsionUID = -8798146769416483793L;

        privbtf finbl SortfdMbp<K,V> sm;

        SyndhronizfdSortfdMbp(SortfdMbp<K,V> m) {
            supfr(m);
            sm = m;
        }
        SyndhronizfdSortfdMbp(SortfdMbp<K,V> m, Objfdt mutfx) {
            supfr(m, mutfx);
            sm = m;
        }

        publid Compbrbtor<? supfr K> dompbrbtor() {
            syndhronizfd (mutfx) {rfturn sm.dompbrbtor();}
        }

        publid SortfdMbp<K,V> subMbp(K fromKfy, K toKfy) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdSortfdMbp<>(
                    sm.subMbp(fromKfy, toKfy), mutfx);
            }
        }
        publid SortfdMbp<K,V> hfbdMbp(K toKfy) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdSortfdMbp<>(sm.hfbdMbp(toKfy), mutfx);
            }
        }
        publid SortfdMbp<K,V> tbilMbp(K fromKfy) {
            syndhronizfd (mutfx) {
               rfturn nfw SyndhronizfdSortfdMbp<>(sm.tbilMbp(fromKfy),mutfx);
            }
        }

        publid K firstKfy() {
            syndhronizfd (mutfx) {rfturn sm.firstKfy();}
        }
        publid K lbstKfy() {
            syndhronizfd (mutfx) {rfturn sm.lbstKfy();}
        }
    }

    /**
     * Rfturns b syndhronizfd (thrfbd-sbff) nbvigbblf mbp bbdkfd by thf
     * spfdififd nbvigbblf mbp.  In ordfr to gubrbntff sfribl bddfss, it is
     * dritidbl thbt <strong>bll</strong> bddfss to thf bbdking nbvigbblf mbp is
     * bddomplishfd through thf rfturnfd nbvigbblf mbp (or its vifws).<p>
     *
     * It is impfrbtivf thbt thf usfr mbnublly syndhronizf on thf rfturnfd
     * nbvigbblf mbp whfn itfrbting ovfr bny of its dollfdtion vifws, or thf
     * dollfdtions vifws of bny of its {@dodf subMbp}, {@dodf hfbdMbp} or
     * {@dodf tbilMbp} vifws.
     * <prf>
     *  NbvigbblfMbp m = Collfdtions.syndhronizfdNbvigbblfMbp(nfw TrffMbp());
     *      ...
     *  Sft s = m.kfySft();  // Nffdn't bf in syndhronizfd blodk
     *      ...
     *  syndhronizfd (m) {  // Syndhronizing on m, not s!
     *      Itfrbtor i = s.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * or:
     * <prf>
     *  NbvigbblfMbp m = Collfdtions.syndhronizfdNbvigbblfMbp(nfw TrffMbp());
     *  NbvigbblfMbp m2 = m.subMbp(foo, truf, bbr, fblsf);
     *      ...
     *  Sft s2 = m2.kfySft();  // Nffdn't bf in syndhronizfd blodk
     *      ...
     *  syndhronizfd (m) {  // Syndhronizing on m, not m2 or s2!
     *      Itfrbtor i = s.itfrbtor(); // Must bf in syndhronizfd blodk
     *      whilf (i.hbsNfxt())
     *          foo(i.nfxt());
     *  }
     * </prf>
     * Fbilurf to follow this bdvidf mby rfsult in non-dftfrministid bfhbvior.
     *
     * <p>Thf rfturnfd nbvigbblf mbp will bf sfriblizbblf if thf spfdififd
     * nbvigbblf mbp is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm  m thf nbvigbblf mbp to bf "wrbppfd" in b syndhronizfd nbvigbblf
     *              mbp
     * @rfturn b syndhronizfd vifw of thf spfdififd nbvigbblf mbp.
     * @sindf 1.8
     */
    publid stbtid <K,V> NbvigbblfMbp<K,V> syndhronizfdNbvigbblfMbp(NbvigbblfMbp<K,V> m) {
        rfturn nfw SyndhronizfdNbvigbblfMbp<>(m);
    }

    /**
     * A syndhronizfd NbvigbblfMbp.
     *
     * @sfribl indludf
     */
    stbtid dlbss SyndhronizfdNbvigbblfMbp<K,V>
        fxtfnds SyndhronizfdSortfdMbp<K,V>
        implfmfnts NbvigbblfMbp<K,V>
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 699392247599746807L;

        privbtf finbl NbvigbblfMbp<K,V> nm;

        SyndhronizfdNbvigbblfMbp(NbvigbblfMbp<K,V> m) {
            supfr(m);
            nm = m;
        }
        SyndhronizfdNbvigbblfMbp(NbvigbblfMbp<K,V> m, Objfdt mutfx) {
            supfr(m, mutfx);
            nm = m;
        }

        publid Entry<K, V> lowfrEntry(K kfy)
                        { syndhronizfd (mutfx) { rfturn nm.lowfrEntry(kfy); } }
        publid K lowfrKfy(K kfy)
                          { syndhronizfd (mutfx) { rfturn nm.lowfrKfy(kfy); } }
        publid Entry<K, V> floorEntry(K kfy)
                        { syndhronizfd (mutfx) { rfturn nm.floorEntry(kfy); } }
        publid K floorKfy(K kfy)
                          { syndhronizfd (mutfx) { rfturn nm.floorKfy(kfy); } }
        publid Entry<K, V> dfilingEntry(K kfy)
                      { syndhronizfd (mutfx) { rfturn nm.dfilingEntry(kfy); } }
        publid K dfilingKfy(K kfy)
                        { syndhronizfd (mutfx) { rfturn nm.dfilingKfy(kfy); } }
        publid Entry<K, V> highfrEntry(K kfy)
                       { syndhronizfd (mutfx) { rfturn nm.highfrEntry(kfy); } }
        publid K highfrKfy(K kfy)
                         { syndhronizfd (mutfx) { rfturn nm.highfrKfy(kfy); } }
        publid Entry<K, V> firstEntry()
                           { syndhronizfd (mutfx) { rfturn nm.firstEntry(); } }
        publid Entry<K, V> lbstEntry()
                            { syndhronizfd (mutfx) { rfturn nm.lbstEntry(); } }
        publid Entry<K, V> pollFirstEntry()
                       { syndhronizfd (mutfx) { rfturn nm.pollFirstEntry(); } }
        publid Entry<K, V> pollLbstEntry()
                        { syndhronizfd (mutfx) { rfturn nm.pollLbstEntry(); } }

        publid NbvigbblfMbp<K, V> dfsdfndingMbp() {
            syndhronizfd (mutfx) {
                rfturn
                    nfw SyndhronizfdNbvigbblfMbp<>(nm.dfsdfndingMbp(), mutfx);
            }
        }

        publid NbvigbblfSft<K> kfySft() {
            rfturn nbvigbblfKfySft();
        }

        publid NbvigbblfSft<K> nbvigbblfKfySft() {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(nm.nbvigbblfKfySft(), mutfx);
            }
        }

        publid NbvigbblfSft<K> dfsdfndingKfySft() {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfSft<>(nm.dfsdfndingKfySft(), mutfx);
            }
        }


        publid SortfdMbp<K,V> subMbp(K fromKfy, K toKfy) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfMbp<>(
                    nm.subMbp(fromKfy, truf, toKfy, fblsf), mutfx);
            }
        }
        publid SortfdMbp<K,V> hfbdMbp(K toKfy) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfMbp<>(nm.hfbdMbp(toKfy, fblsf), mutfx);
            }
        }
        publid SortfdMbp<K,V> tbilMbp(K fromKfy) {
            syndhronizfd (mutfx) {
        rfturn nfw SyndhronizfdNbvigbblfMbp<>(nm.tbilMbp(fromKfy, truf),mutfx);
            }
        }

        publid NbvigbblfMbp<K, V> subMbp(K fromKfy, boolfbn fromIndlusivf, K toKfy, boolfbn toIndlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfMbp<>(
                    nm.subMbp(fromKfy, fromIndlusivf, toKfy, toIndlusivf), mutfx);
            }
        }

        publid NbvigbblfMbp<K, V> hfbdMbp(K toKfy, boolfbn indlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfMbp<>(
                        nm.hfbdMbp(toKfy, indlusivf), mutfx);
            }
        }

        publid NbvigbblfMbp<K, V> tbilMbp(K fromKfy, boolfbn indlusivf) {
            syndhronizfd (mutfx) {
                rfturn nfw SyndhronizfdNbvigbblfMbp<>(
                    nm.tbilMbp(fromKfy, indlusivf), mutfx);
            }
        }
    }

    // Dynbmidblly typfsbff dollfdtion wrbppfrs

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd dollfdtion.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in bn
     * immfdibtf {@link ClbssCbstExdfption}.  Assuming b dollfdtion
     * dontbins no indorrfdtly typfd flfmfnts prior to thf timf b
     * dynbmidblly typfsbff vifw is gfnfrbtfd, bnd thbt bll subsfqufnt
     * bddfss to thf dollfdtion tbkfs plbdf through thf vifw, it is
     * <i>gubrbntffd</i> thbt thf dollfdtion dbnnot dontbin bn indorrfdtly
     * typfd flfmfnt.
     *
     * <p>Thf gfnfrids mfdhbnism in thf lbngubgf providfs dompilf-timf
     * (stbtid) typf dhfdking, but it is possiblf to dfffbt this mfdhbnism
     * with undhfdkfd dbsts.  Usublly this is not b problfm, bs thf dompilfr
     * issufs wbrnings on bll sudh undhfdkfd opfrbtions.  Thfrf brf, howfvfr,
     * timfs whfn stbtid typf dhfdking blonf is not suffidifnt.  For fxbmplf,
     * supposf b dollfdtion is pbssfd to b third-pbrty librbry bnd it is
     * impfrbtivf thbt thf librbry dodf not dorrupt thf dollfdtion by
     * insfrting bn flfmfnt of thf wrong typf.
     *
     * <p>Anothfr usf of dynbmidblly typfsbff vifws is dfbugging.  Supposf b
     * progrbm fbils with b {@dodf ClbssCbstExdfption}, indidbting thbt bn
     * indorrfdtly typfd flfmfnt wbs put into b pbrbmftfrizfd dollfdtion.
     * Unfortunbtfly, thf fxdfption dbn oddur bt bny timf bftfr thf frronfous
     * flfmfnt is insfrtfd, so it typidblly providfs littlf or no informbtion
     * bs to thf rfbl sourdf of thf problfm.  If thf problfm is rfprodudiblf,
     * onf dbn quidkly dftfrminf its sourdf by tfmporbrily modifying thf
     * progrbm to wrbp thf dollfdtion with b dynbmidblly typfsbff vifw.
     * For fxbmplf, this dfdlbrbtion:
     *  <prf> {@dodf
     *     Collfdtion<String> d = nfw HbshSft<>();
     * }</prf>
     * mby bf rfplbdfd tfmporbrily by this onf:
     *  <prf> {@dodf
     *     Collfdtion<String> d = Collfdtions.dhfdkfdCollfdtion(
     *         nfw HbshSft<>(), String.dlbss);
     * }</prf>
     * Running thf progrbm bgbin will dbusf it to fbil bt thf point whfrf
     * bn indorrfdtly typfd flfmfnt is insfrtfd into thf dollfdtion, dlfbrly
     * idfntifying thf sourdf of thf problfm.  Ondf thf problfm is fixfd, thf
     * modififd dfdlbrbtion mby bf rfvfrtfd bbdk to thf originbl.
     *
     * <p>Thf rfturnfd dollfdtion dofs <i>not</i> pbss thf hbshCodf bnd fqubls
     * opfrbtions through to thf bbdking dollfdtion, but rflifs on
     * {@dodf Objfdt}'s {@dodf fqubls} bnd {@dodf hbshCodf} mfthods.  This
     * is nfdfssbry to prfsfrvf thf dontrbdts of thfsf opfrbtions in thf dbsf
     * thbt thf bbdking dollfdtion is b sft or b list.
     *
     * <p>Thf rfturnfd dollfdtion will bf sfriblizbblf if thf spfdififd
     * dollfdtion is sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd dollfdtion pfrmits insfrtion of null flfmfnts
     * whfnfvfr thf bbdking dollfdtion dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm d thf dollfdtion for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf d} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd dollfdtion
     * @sindf 1.5
     */
    publid stbtid <E> Collfdtion<E> dhfdkfdCollfdtion(Collfdtion<E> d,
                                                      Clbss<E> typf) {
        rfturn nfw ChfdkfdCollfdtion<>(d, typf);
    }

    @SupprfssWbrnings("undhfdkfd")
    stbtid <T> T[] zfroLfngthArrby(Clbss<T> typf) {
        rfturn (T[]) Arrby.nfwInstbndf(typf, 0);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdCollfdtion<E> implfmfnts Collfdtion<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 1578914078182001775L;

        finbl Collfdtion<E> d;
        finbl Clbss<E> typf;

        @SupprfssWbrnings("undhfdkfd")
        E typfChfdk(Objfdt o) {
            if (o != null && !typf.isInstbndf(o))
                throw nfw ClbssCbstExdfption(bbdElfmfntMsg(o));
            rfturn (E) o;
        }

        privbtf String bbdElfmfntMsg(Objfdt o) {
            rfturn "Attfmpt to insfrt " + o.gftClbss() +
                " flfmfnt into dollfdtion with flfmfnt typf " + typf;
        }

        ChfdkfdCollfdtion(Collfdtion<E> d, Clbss<E> typf) {
            this.d = Objfdts.rfquirfNonNull(d, "d");
            this.typf = Objfdts.rfquirfNonNull(typf, "typf");
        }

        publid int sizf()                 { rfturn d.sizf(); }
        publid boolfbn isEmpty()          { rfturn d.isEmpty(); }
        publid boolfbn dontbins(Objfdt o) { rfturn d.dontbins(o); }
        publid Objfdt[] toArrby()         { rfturn d.toArrby(); }
        publid <T> T[] toArrby(T[] b)     { rfturn d.toArrby(b); }
        publid String toString()          { rfturn d.toString(); }
        publid boolfbn rfmovf(Objfdt o)   { rfturn d.rfmovf(o); }
        publid void dlfbr()               {        d.dlfbr(); }

        publid boolfbn dontbinsAll(Collfdtion<?> doll) {
            rfturn d.dontbinsAll(doll);
        }
        publid boolfbn rfmovfAll(Collfdtion<?> doll) {
            rfturn d.rfmovfAll(doll);
        }
        publid boolfbn rftbinAll(Collfdtion<?> doll) {
            rfturn d.rftbinAll(doll);
        }

        publid Itfrbtor<E> itfrbtor() {
            // JDK-6363904 - unwrbppfd itfrbtor dould bf typfdbst to
            // ListItfrbtor with unsbff sft()
            finbl Itfrbtor<E> it = d.itfrbtor();
            rfturn nfw Itfrbtor<E>() {
                publid boolfbn hbsNfxt() { rfturn it.hbsNfxt(); }
                publid E nfxt()          { rfturn it.nfxt(); }
                publid void rfmovf()     {        it.rfmovf(); }};
        }

        publid boolfbn bdd(E f)          { rfturn d.bdd(typfChfdk(f)); }

        privbtf E[] zfroLfngthElfmfntArrby; // Lbzily initiblizfd

        privbtf E[] zfroLfngthElfmfntArrby() {
            rfturn zfroLfngthElfmfntArrby != null ? zfroLfngthElfmfntArrby :
                (zfroLfngthElfmfntArrby = zfroLfngthArrby(typf));
        }

        @SupprfssWbrnings("undhfdkfd")
        Collfdtion<E> dhfdkfdCopyOf(Collfdtion<? fxtfnds E> doll) {
            Objfdt[] b;
            try {
                E[] z = zfroLfngthElfmfntArrby();
                b = doll.toArrby(z);
                // Dfffnd bgbinst doll violbting thf toArrby dontrbdt
                if (b.gftClbss() != z.gftClbss())
                    b = Arrbys.dopyOf(b, b.lfngth, z.gftClbss());
            } dbtdh (ArrbyStorfExdfption ignorf) {
                // To gft bfttfr bnd donsistfnt dibgnostids,
                // wf dbll typfChfdk fxpliditly on fbdh flfmfnt.
                // Wf dbll dlonf() to dfffnd bgbinst doll rftbining b
                // rfffrfndf to thf rfturnfd brrby bnd storing b bbd
                // flfmfnt into it bftfr it hbs bffn typf dhfdkfd.
                b = doll.toArrby().dlonf();
                for (Objfdt o : b)
                    typfChfdk(o);
            }
            // A slight bbusf of thf typf systfm, but sbff hfrf.
            rfturn (Collfdtion<E>) Arrbys.bsList(b);
        }

        publid boolfbn bddAll(Collfdtion<? fxtfnds E> doll) {
            // Doing things this wby insulbtfs us from dondurrfnt dhbngfs
            // in thf dontfnts of doll bnd providfs bll-or-nothing
            // sfmbntids (whidh wf wouldn't gft if wf typf-dhfdkfd fbdh
            // flfmfnt bs wf bddfd it)
            rfturn d.bddAll(dhfdkfdCopyOf(doll));
        }

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {d.forEbdh(bdtion);}
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            rfturn d.rfmovfIf(filtfr);
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {rfturn d.splitfrbtor();}
        @Ovfrridf
        publid Strfbm<E> strfbm()           {rfturn d.strfbm();}
        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm()   {rfturn d.pbrbllflStrfbm();}
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd qufuf.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in
     * bn immfdibtf {@link ClbssCbstExdfption}.  Assuming b qufuf dontbins
     * no indorrfdtly typfd flfmfnts prior to thf timf b dynbmidblly typfsbff
     * vifw is gfnfrbtfd, bnd thbt bll subsfqufnt bddfss to thf qufuf
     * tbkfs plbdf through thf vifw, it is <i>gubrbntffd</i> thbt thf
     * qufuf dbnnot dontbin bn indorrfdtly typfd flfmfnt.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd qufuf will bf sfriblizbblf if thf spfdififd qufuf
     * is sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd qufuf pfrmits insfrtion of {@dodf null} flfmfnts
     * whfnfvfr thf bbdking qufuf dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf qufuf
     * @pbrbm qufuf thf qufuf for whidh b dynbmidblly typfsbff vifw is to bf
     *             rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf qufuf} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd qufuf
     * @sindf 1.8
     */
    publid stbtid <E> Qufuf<E> dhfdkfdQufuf(Qufuf<E> qufuf, Clbss<E> typf) {
        rfturn nfw ChfdkfdQufuf<>(qufuf, typf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdQufuf<E>
        fxtfnds ChfdkfdCollfdtion<E>
        implfmfnts Qufuf<E>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 1433151992604707767L;
        finbl Qufuf<E> qufuf;

        ChfdkfdQufuf(Qufuf<E> qufuf, Clbss<E> flfmfntTypf) {
            supfr(qufuf, flfmfntTypf);
            this.qufuf = qufuf;
        }

        publid E flfmfnt()              {rfturn qufuf.flfmfnt();}
        publid boolfbn fqubls(Objfdt o) {rfturn o == this || d.fqubls(o);}
        publid int hbshCodf()           {rfturn d.hbshCodf();}
        publid E pffk()                 {rfturn qufuf.pffk();}
        publid E poll()                 {rfturn qufuf.poll();}
        publid E rfmovf()               {rfturn qufuf.rfmovf();}
        publid boolfbn offfr(E f)       {rfturn qufuf.offfr(typfChfdk(f));}
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd sft.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in
     * bn immfdibtf {@link ClbssCbstExdfption}.  Assuming b sft dontbins
     * no indorrfdtly typfd flfmfnts prior to thf timf b dynbmidblly typfsbff
     * vifw is gfnfrbtfd, bnd thbt bll subsfqufnt bddfss to thf sft
     * tbkfs plbdf through thf vifw, it is <i>gubrbntffd</i> thbt thf
     * sft dbnnot dontbin bn indorrfdtly typfd flfmfnt.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd sft will bf sfriblizbblf if thf spfdififd sft is
     * sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd sft pfrmits insfrtion of null flfmfnts whfnfvfr
     * thf bbdking sft dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf sft
     * @pbrbm s thf sft for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf s} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd sft
     * @sindf 1.5
     */
    publid stbtid <E> Sft<E> dhfdkfdSft(Sft<E> s, Clbss<E> typf) {
        rfturn nfw ChfdkfdSft<>(s, typf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdSft<E> fxtfnds ChfdkfdCollfdtion<E>
                                 implfmfnts Sft<E>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 4694047833775013803L;

        ChfdkfdSft(Sft<E> s, Clbss<E> flfmfntTypf) { supfr(s, flfmfntTypf); }

        publid boolfbn fqubls(Objfdt o) { rfturn o == this || d.fqubls(o); }
        publid int hbshCodf()           { rfturn d.hbshCodf(); }
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd sortfd sft.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in bn
     * immfdibtf {@link ClbssCbstExdfption}.  Assuming b sortfd sft
     * dontbins no indorrfdtly typfd flfmfnts prior to thf timf b
     * dynbmidblly typfsbff vifw is gfnfrbtfd, bnd thbt bll subsfqufnt
     * bddfss to thf sortfd sft tbkfs plbdf through thf vifw, it is
     * <i>gubrbntffd</i> thbt thf sortfd sft dbnnot dontbin bn indorrfdtly
     * typfd flfmfnt.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd sortfd sft will bf sfriblizbblf if thf spfdififd sortfd
     * sft is sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd sortfd sft pfrmits insfrtion of null flfmfnts
     * whfnfvfr thf bbdking sortfd sft dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf sft
     * @pbrbm s thf sortfd sft for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf s} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd sortfd sft
     * @sindf 1.5
     */
    publid stbtid <E> SortfdSft<E> dhfdkfdSortfdSft(SortfdSft<E> s,
                                                    Clbss<E> typf) {
        rfturn nfw ChfdkfdSortfdSft<>(s, typf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdSortfdSft<E> fxtfnds ChfdkfdSft<E>
        implfmfnts SortfdSft<E>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 1599911165492914959L;

        privbtf finbl SortfdSft<E> ss;

        ChfdkfdSortfdSft(SortfdSft<E> s, Clbss<E> typf) {
            supfr(s, typf);
            ss = s;
        }

        publid Compbrbtor<? supfr E> dompbrbtor() { rfturn ss.dompbrbtor(); }
        publid E first()                   { rfturn ss.first(); }
        publid E lbst()                    { rfturn ss.lbst(); }

        publid SortfdSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
            rfturn dhfdkfdSortfdSft(ss.subSft(fromElfmfnt,toElfmfnt), typf);
        }
        publid SortfdSft<E> hfbdSft(E toElfmfnt) {
            rfturn dhfdkfdSortfdSft(ss.hfbdSft(toElfmfnt), typf);
        }
        publid SortfdSft<E> tbilSft(E fromElfmfnt) {
            rfturn dhfdkfdSortfdSft(ss.tbilSft(fromElfmfnt), typf);
        }
    }

/**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd nbvigbblf sft.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in bn
     * immfdibtf {@link ClbssCbstExdfption}.  Assuming b nbvigbblf sft
     * dontbins no indorrfdtly typfd flfmfnts prior to thf timf b
     * dynbmidblly typfsbff vifw is gfnfrbtfd, bnd thbt bll subsfqufnt
     * bddfss to thf nbvigbblf sft tbkfs plbdf through thf vifw, it is
     * <fm>gubrbntffd</fm> thbt thf nbvigbblf sft dbnnot dontbin bn indorrfdtly
     * typfd flfmfnt.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd nbvigbblf sft will bf sfriblizbblf if thf spfdififd
     * nbvigbblf sft is sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd nbvigbblf sft pfrmits insfrtion of null flfmfnts
     * whfnfvfr thf bbdking sortfd sft dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf sft
     * @pbrbm s thf nbvigbblf sft for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf s} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd nbvigbblf sft
     * @sindf 1.8
     */
    publid stbtid <E> NbvigbblfSft<E> dhfdkfdNbvigbblfSft(NbvigbblfSft<E> s,
                                                    Clbss<E> typf) {
        rfturn nfw ChfdkfdNbvigbblfSft<>(s, typf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdNbvigbblfSft<E> fxtfnds ChfdkfdSortfdSft<E>
        implfmfnts NbvigbblfSft<E>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = -5429120189805438922L;

        privbtf finbl NbvigbblfSft<E> ns;

        ChfdkfdNbvigbblfSft(NbvigbblfSft<E> s, Clbss<E> typf) {
            supfr(s, typf);
            ns = s;
        }

        publid E lowfr(E f)                             { rfturn ns.lowfr(f); }
        publid E floor(E f)                             { rfturn ns.floor(f); }
        publid E dfiling(E f)                         { rfturn ns.dfiling(f); }
        publid E highfr(E f)                           { rfturn ns.highfr(f); }
        publid E pollFirst()                         { rfturn ns.pollFirst(); }
        publid E pollLbst()                            {rfturn ns.pollLbst(); }
        publid NbvigbblfSft<E> dfsdfndingSft()
                      { rfturn dhfdkfdNbvigbblfSft(ns.dfsdfndingSft(), typf); }
        publid Itfrbtor<E> dfsdfndingItfrbtor()
            {rfturn dhfdkfdNbvigbblfSft(ns.dfsdfndingSft(), typf).itfrbtor(); }

        publid NbvigbblfSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
            rfturn dhfdkfdNbvigbblfSft(ns.subSft(fromElfmfnt, truf, toElfmfnt, fblsf), typf);
        }
        publid NbvigbblfSft<E> hfbdSft(E toElfmfnt) {
            rfturn dhfdkfdNbvigbblfSft(ns.hfbdSft(toElfmfnt, fblsf), typf);
        }
        publid NbvigbblfSft<E> tbilSft(E fromElfmfnt) {
            rfturn dhfdkfdNbvigbblfSft(ns.tbilSft(fromElfmfnt, truf), typf);
        }

        publid NbvigbblfSft<E> subSft(E fromElfmfnt, boolfbn fromIndlusivf, E toElfmfnt, boolfbn toIndlusivf) {
            rfturn dhfdkfdNbvigbblfSft(ns.subSft(fromElfmfnt, fromIndlusivf, toElfmfnt, toIndlusivf), typf);
        }

        publid NbvigbblfSft<E> hfbdSft(E toElfmfnt, boolfbn indlusivf) {
            rfturn dhfdkfdNbvigbblfSft(ns.hfbdSft(toElfmfnt, indlusivf), typf);
        }

        publid NbvigbblfSft<E> tbilSft(E fromElfmfnt, boolfbn indlusivf) {
            rfturn dhfdkfdNbvigbblfSft(ns.tbilSft(fromElfmfnt, indlusivf), typf);
        }
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd list.
     * Any bttfmpt to insfrt bn flfmfnt of thf wrong typf will rfsult in
     * bn immfdibtf {@link ClbssCbstExdfption}.  Assuming b list dontbins
     * no indorrfdtly typfd flfmfnts prior to thf timf b dynbmidblly typfsbff
     * vifw is gfnfrbtfd, bnd thbt bll subsfqufnt bddfss to thf list
     * tbkfs plbdf through thf vifw, it is <i>gubrbntffd</i> thbt thf
     * list dbnnot dontbin bn indorrfdtly typfd flfmfnt.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd list will bf sfriblizbblf if thf spfdififd list
     * is sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd list pfrmits insfrtion of null flfmfnts whfnfvfr
     * thf bbdking list dofs.
     *
     * @pbrbm <E> thf dlbss of thf objfdts in thf list
     * @pbrbm list thf list for whidh b dynbmidblly typfsbff vifw is to bf
     *             rfturnfd
     * @pbrbm typf thf typf of flfmfnt thbt {@dodf list} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd list
     * @sindf 1.5
     */
    publid stbtid <E> List<E> dhfdkfdList(List<E> list, Clbss<E> typf) {
        rfturn (list instbndfof RbndomAddfss ?
                nfw ChfdkfdRbndomAddfssList<>(list, typf) :
                nfw ChfdkfdList<>(list, typf));
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdList<E>
        fxtfnds ChfdkfdCollfdtion<E>
        implfmfnts List<E>
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 65247728283967356L;
        finbl List<E> list;

        ChfdkfdList(List<E> list, Clbss<E> typf) {
            supfr(list, typf);
            this.list = list;
        }

        publid boolfbn fqubls(Objfdt o)  { rfturn o == this || list.fqubls(o); }
        publid int hbshCodf()            { rfturn list.hbshCodf(); }
        publid E gft(int indfx)          { rfturn list.gft(indfx); }
        publid E rfmovf(int indfx)       { rfturn list.rfmovf(indfx); }
        publid int indfxOf(Objfdt o)     { rfturn list.indfxOf(o); }
        publid int lbstIndfxOf(Objfdt o) { rfturn list.lbstIndfxOf(o); }

        publid E sft(int indfx, E flfmfnt) {
            rfturn list.sft(indfx, typfChfdk(flfmfnt));
        }

        publid void bdd(int indfx, E flfmfnt) {
            list.bdd(indfx, typfChfdk(flfmfnt));
        }

        publid boolfbn bddAll(int indfx, Collfdtion<? fxtfnds E> d) {
            rfturn list.bddAll(indfx, dhfdkfdCopyOf(d));
        }
        publid ListItfrbtor<E> listItfrbtor()   { rfturn listItfrbtor(0); }

        publid ListItfrbtor<E> listItfrbtor(finbl int indfx) {
            finbl ListItfrbtor<E> i = list.listItfrbtor(indfx);

            rfturn nfw ListItfrbtor<E>() {
                publid boolfbn hbsNfxt()     { rfturn i.hbsNfxt(); }
                publid E nfxt()              { rfturn i.nfxt(); }
                publid boolfbn hbsPrfvious() { rfturn i.hbsPrfvious(); }
                publid E prfvious()          { rfturn i.prfvious(); }
                publid int nfxtIndfx()       { rfturn i.nfxtIndfx(); }
                publid int prfviousIndfx()   { rfturn i.prfviousIndfx(); }
                publid void rfmovf()         {        i.rfmovf(); }

                publid void sft(E f) {
                    i.sft(typfChfdk(f));
                }

                publid void bdd(E f) {
                    i.bdd(typfChfdk(f));
                }

                @Ovfrridf
                publid void forEbdhRfmbining(Consumfr<? supfr E> bdtion) {
                    i.forEbdhRfmbining(bdtion);
                }
            };
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            rfturn nfw ChfdkfdList<>(list.subList(fromIndfx, toIndfx), typf);
        }

        /**
         * {@inhfritDod}
         *
         * @throws ClbssCbstExdfption if thf dlbss of bn flfmfnt rfturnfd by thf
         *         opfrbtor prfvfnts it from bfing bddfd to this dollfdtion. Thf
         *         fxdfption mby bf thrown bftfr somf flfmfnts of thf list hbvf
         *         blrfbdy bffn rfplbdfd.
         */
        @Ovfrridf
        publid void rfplbdfAll(UnbryOpfrbtor<E> opfrbtor) {
            Objfdts.rfquirfNonNull(opfrbtor);
            list.rfplbdfAll(f -> typfChfdk(opfrbtor.bpply(f)));
        }

        @Ovfrridf
        publid void sort(Compbrbtor<? supfr E> d) {
            list.sort(d);
        }
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdRbndomAddfssList<E> fxtfnds ChfdkfdList<E>
                                            implfmfnts RbndomAddfss
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 1638200125423088369L;

        ChfdkfdRbndomAddfssList(List<E> list, Clbss<E> typf) {
            supfr(list, typf);
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            rfturn nfw ChfdkfdRbndomAddfssList<>(
                    list.subList(fromIndfx, toIndfx), typf);
        }
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd mbp.
     * Any bttfmpt to insfrt b mbpping whosf kfy or vbluf hbvf thf wrong
     * typf will rfsult in bn immfdibtf {@link ClbssCbstExdfption}.
     * Similbrly, bny bttfmpt to modify thf vbluf durrfntly bssodibtfd with
     * b kfy will rfsult in bn immfdibtf {@link ClbssCbstExdfption},
     * whfthfr thf modifidbtion is bttfmptfd dirfdtly through thf mbp
     * itsflf, or through b {@link Mbp.Entry} instbndf obtbinfd from thf
     * mbp's {@link Mbp#fntrySft() fntry sft} vifw.
     *
     * <p>Assuming b mbp dontbins no indorrfdtly typfd kfys or vblufs
     * prior to thf timf b dynbmidblly typfsbff vifw is gfnfrbtfd, bnd
     * thbt bll subsfqufnt bddfss to thf mbp tbkfs plbdf through thf vifw
     * (or onf of its dollfdtion vifws), it is <i>gubrbntffd</i> thbt thf
     * mbp dbnnot dontbin bn indorrfdtly typfd kfy or vbluf.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd mbp will bf sfriblizbblf if thf spfdififd mbp is
     * sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd mbp pfrmits insfrtion of null kfys or vblufs
     * whfnfvfr thf bbdking mbp dofs.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm m thf mbp for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm kfyTypf thf typf of kfy thbt {@dodf m} is pfrmittfd to hold
     * @pbrbm vblufTypf thf typf of vbluf thbt {@dodf m} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd mbp
     * @sindf 1.5
     */
    publid stbtid <K, V> Mbp<K, V> dhfdkfdMbp(Mbp<K, V> m,
                                              Clbss<K> kfyTypf,
                                              Clbss<V> vblufTypf) {
        rfturn nfw ChfdkfdMbp<>(m, kfyTypf, vblufTypf);
    }


    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss ChfdkfdMbp<K,V>
        implfmfnts Mbp<K,V>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 5742860141034234728L;

        privbtf finbl Mbp<K, V> m;
        finbl Clbss<K> kfyTypf;
        finbl Clbss<V> vblufTypf;

        privbtf void typfChfdk(Objfdt kfy, Objfdt vbluf) {
            if (kfy != null && !kfyTypf.isInstbndf(kfy))
                throw nfw ClbssCbstExdfption(bbdKfyMsg(kfy));

            if (vbluf != null && !vblufTypf.isInstbndf(vbluf))
                throw nfw ClbssCbstExdfption(bbdVblufMsg(vbluf));
        }

        privbtf BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> typfChfdk(
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fund) {
            Objfdts.rfquirfNonNull(fund);
            rfturn (k, v) -> {
                V nfwVbluf = fund.bpply(k, v);
                typfChfdk(k, nfwVbluf);
                rfturn nfwVbluf;
            };
        }

        privbtf String bbdKfyMsg(Objfdt kfy) {
            rfturn "Attfmpt to insfrt " + kfy.gftClbss() +
                    " kfy into mbp with kfy typf " + kfyTypf;
        }

        privbtf String bbdVblufMsg(Objfdt vbluf) {
            rfturn "Attfmpt to insfrt " + vbluf.gftClbss() +
                    " vbluf into mbp with vbluf typf " + vblufTypf;
        }

        ChfdkfdMbp(Mbp<K, V> m, Clbss<K> kfyTypf, Clbss<V> vblufTypf) {
            this.m = Objfdts.rfquirfNonNull(m);
            this.kfyTypf = Objfdts.rfquirfNonNull(kfyTypf);
            this.vblufTypf = Objfdts.rfquirfNonNull(vblufTypf);
        }

        publid int sizf()                      { rfturn m.sizf(); }
        publid boolfbn isEmpty()               { rfturn m.isEmpty(); }
        publid boolfbn dontbinsKfy(Objfdt kfy) { rfturn m.dontbinsKfy(kfy); }
        publid boolfbn dontbinsVbluf(Objfdt v) { rfturn m.dontbinsVbluf(v); }
        publid V gft(Objfdt kfy)               { rfturn m.gft(kfy); }
        publid V rfmovf(Objfdt kfy)            { rfturn m.rfmovf(kfy); }
        publid void dlfbr()                    { m.dlfbr(); }
        publid Sft<K> kfySft()                 { rfturn m.kfySft(); }
        publid Collfdtion<V> vblufs()          { rfturn m.vblufs(); }
        publid boolfbn fqubls(Objfdt o)        { rfturn o == this || m.fqubls(o); }
        publid int hbshCodf()                  { rfturn m.hbshCodf(); }
        publid String toString()               { rfturn m.toString(); }

        publid V put(K kfy, V vbluf) {
            typfChfdk(kfy, vbluf);
            rfturn m.put(kfy, vbluf);
        }

        @SupprfssWbrnings("undhfdkfd")
        publid void putAll(Mbp<? fxtfnds K, ? fxtfnds V> t) {
            // Sbtisfy thf following gobls:
            // - good dibgnostids in dbsf of typf mismbtdh
            // - bll-or-nothing sfmbntids
            // - protfdtion from mblidious t
            // - dorrfdt bfhbvior if t is b dondurrfnt mbp
            Objfdt[] fntrifs = t.fntrySft().toArrby();
            List<Mbp.Entry<K,V>> dhfdkfd = nfw ArrbyList<>(fntrifs.lfngth);
            for (Objfdt o : fntrifs) {
                Mbp.Entry<?,?> f = (Mbp.Entry<?,?>) o;
                Objfdt k = f.gftKfy();
                Objfdt v = f.gftVbluf();
                typfChfdk(k, v);
                dhfdkfd.bdd(
                        nfw AbstrbdtMbp.SimplfImmutbblfEntry<>((K)k, (V)v));
            }
            for (Mbp.Entry<K,V> f : dhfdkfd)
                m.put(f.gftKfy(), f.gftVbluf());
        }

        privbtf trbnsifnt Sft<Mbp.Entry<K,V>> fntrySft;

        publid Sft<Mbp.Entry<K,V>> fntrySft() {
            if (fntrySft==null)
                fntrySft = nfw ChfdkfdEntrySft<>(m.fntrySft(), vblufTypf);
            rfturn fntrySft;
        }

        // Ovfrridf dffbult mfthods in Mbp
        @Ovfrridf
        publid void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
            m.forEbdh(bdtion);
        }

        @Ovfrridf
        publid void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
            m.rfplbdfAll(typfChfdk(fundtion));
        }

        @Ovfrridf
        publid V putIfAbsfnt(K kfy, V vbluf) {
            typfChfdk(kfy, vbluf);
            rfturn m.putIfAbsfnt(kfy, vbluf);
        }

        @Ovfrridf
        publid boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
            rfturn m.rfmovf(kfy, vbluf);
        }

        @Ovfrridf
        publid boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
            typfChfdk(kfy, nfwVbluf);
            rfturn m.rfplbdf(kfy, oldVbluf, nfwVbluf);
        }

        @Ovfrridf
        publid V rfplbdf(K kfy, V vbluf) {
            typfChfdk(kfy, vbluf);
            rfturn m.rfplbdf(kfy, vbluf);
        }

        @Ovfrridf
        publid V domputfIfAbsfnt(K kfy,
                Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
            Objfdts.rfquirfNonNull(mbppingFundtion);
            rfturn m.domputfIfAbsfnt(kfy, k -> {
                V vbluf = mbppingFundtion.bpply(k);
                typfChfdk(k, vbluf);
                rfturn vbluf;
            });
        }

        @Ovfrridf
        publid V domputfIfPrfsfnt(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            rfturn m.domputfIfPrfsfnt(kfy, typfChfdk(rfmbppingFundtion));
        }

        @Ovfrridf
        publid V domputf(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            rfturn m.domputf(kfy, typfChfdk(rfmbppingFundtion));
        }

        @Ovfrridf
        publid V mfrgf(K kfy, V vbluf,
                BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            Objfdts.rfquirfNonNull(rfmbppingFundtion);
            rfturn m.mfrgf(kfy, vbluf, (v1, v2) -> {
                V nfwVbluf = rfmbppingFundtion.bpply(v1, v2);
                typfChfdk(null, nfwVbluf);
                rfturn nfwVbluf;
            });
        }

        /**
         * Wf nffd this dlbss in bddition to ChfdkfdSft bs Mbp.Entry pfrmits
         * modifidbtion of thf bbdking Mbp vib thf sftVbluf opfrbtion.  This
         * dlbss is subtlf: thfrf brf mbny possiblf bttbdks thbt must bf
         * thwbrtfd.
         *
         * @sfribl fxdludf
         */
        stbtid dlbss ChfdkfdEntrySft<K,V> implfmfnts Sft<Mbp.Entry<K,V>> {
            privbtf finbl Sft<Mbp.Entry<K,V>> s;
            privbtf finbl Clbss<V> vblufTypf;

            ChfdkfdEntrySft(Sft<Mbp.Entry<K, V>> s, Clbss<V> vblufTypf) {
                this.s = s;
                this.vblufTypf = vblufTypf;
            }

            publid int sizf()        { rfturn s.sizf(); }
            publid boolfbn isEmpty() { rfturn s.isEmpty(); }
            publid String toString() { rfturn s.toString(); }
            publid int hbshCodf()    { rfturn s.hbshCodf(); }
            publid void dlfbr()      {        s.dlfbr(); }

            publid boolfbn bdd(Mbp.Entry<K, V> f) {
                throw nfw UnsupportfdOpfrbtionExdfption();
            }
            publid boolfbn bddAll(Collfdtion<? fxtfnds Mbp.Entry<K, V>> doll) {
                throw nfw UnsupportfdOpfrbtionExdfption();
            }

            publid Itfrbtor<Mbp.Entry<K,V>> itfrbtor() {
                finbl Itfrbtor<Mbp.Entry<K, V>> i = s.itfrbtor();
                finbl Clbss<V> vblufTypf = this.vblufTypf;

                rfturn nfw Itfrbtor<Mbp.Entry<K,V>>() {
                    publid boolfbn hbsNfxt() { rfturn i.hbsNfxt(); }
                    publid void rfmovf()     { i.rfmovf(); }

                    publid Mbp.Entry<K,V> nfxt() {
                        rfturn dhfdkfdEntry(i.nfxt(), vblufTypf);
                    }
                };
            }

            @SupprfssWbrnings("undhfdkfd")
            publid Objfdt[] toArrby() {
                Objfdt[] sourdf = s.toArrby();

                /*
                 * Ensurf thbt wf don't gft bn ArrbyStorfExdfption fvfn if
                 * s.toArrby rfturns bn brrby of somfthing othfr thbn Objfdt
                 */
                Objfdt[] dfst = (ChfdkfdEntry.dlbss.isInstbndf(
                    sourdf.gftClbss().gftComponfntTypf()) ? sourdf :
                                 nfw Objfdt[sourdf.lfngth]);

                for (int i = 0; i < sourdf.lfngth; i++)
                    dfst[i] = dhfdkfdEntry((Mbp.Entry<K,V>)sourdf[i],
                                           vblufTypf);
                rfturn dfst;
            }

            @SupprfssWbrnings("undhfdkfd")
            publid <T> T[] toArrby(T[] b) {
                // Wf don't pbss b to s.toArrby, to bvoid window of
                // vulnfrbbility whfrfin bn unsdrupulous multithrfbdfd dlifnt
                // dould gft his hbnds on rbw (unwrbppfd) Entrifs from s.
                T[] brr = s.toArrby(b.lfngth==0 ? b : Arrbys.dopyOf(b, 0));

                for (int i=0; i<brr.lfngth; i++)
                    brr[i] = (T) dhfdkfdEntry((Mbp.Entry<K,V>)brr[i],
                                              vblufTypf);
                if (brr.lfngth > b.lfngth)
                    rfturn brr;

                Systfm.brrbydopy(brr, 0, b, 0, brr.lfngth);
                if (b.lfngth > brr.lfngth)
                    b[brr.lfngth] = null;
                rfturn b;
            }

            /**
             * This mfthod is ovfrriddfn to protfdt thf bbdking sft bgbinst
             * bn objfdt with b nffbrious fqubls fundtion thbt sfnsfs
             * thbt thf fqublity-dbndidbtf is Mbp.Entry bnd dblls its
             * sftVbluf mfthod.
             */
            publid boolfbn dontbins(Objfdt o) {
                if (!(o instbndfof Mbp.Entry))
                    rfturn fblsf;
                Mbp.Entry<?,?> f = (Mbp.Entry<?,?>) o;
                rfturn s.dontbins(
                    (f instbndfof ChfdkfdEntry) ? f : dhfdkfdEntry(f, vblufTypf));
            }

            /**
             * Thf bulk dollfdtion mfthods brf ovfrriddfn to protfdt
             * bgbinst bn unsdrupulous dollfdtion whosf dontbins(Objfdt o)
             * mfthod sfnsfs whfn o is b Mbp.Entry, bnd dblls o.sftVbluf.
             */
            publid boolfbn dontbinsAll(Collfdtion<?> d) {
                for (Objfdt o : d)
                    if (!dontbins(o)) // Invokfs sbff dontbins() bbovf
                        rfturn fblsf;
                rfturn truf;
            }

            publid boolfbn rfmovf(Objfdt o) {
                if (!(o instbndfof Mbp.Entry))
                    rfturn fblsf;
                rfturn s.rfmovf(nfw AbstrbdtMbp.SimplfImmutbblfEntry
                                <>((Mbp.Entry<?,?>)o));
            }

            publid boolfbn rfmovfAll(Collfdtion<?> d) {
                rfturn bbtdhRfmovf(d, fblsf);
            }
            publid boolfbn rftbinAll(Collfdtion<?> d) {
                rfturn bbtdhRfmovf(d, truf);
            }
            privbtf boolfbn bbtdhRfmovf(Collfdtion<?> d, boolfbn domplfmfnt) {
                Objfdts.rfquirfNonNull(d);
                boolfbn modififd = fblsf;
                Itfrbtor<Mbp.Entry<K,V>> it = itfrbtor();
                whilf (it.hbsNfxt()) {
                    if (d.dontbins(it.nfxt()) != domplfmfnt) {
                        it.rfmovf();
                        modififd = truf;
                    }
                }
                rfturn modififd;
            }

            publid boolfbn fqubls(Objfdt o) {
                if (o == this)
                    rfturn truf;
                if (!(o instbndfof Sft))
                    rfturn fblsf;
                Sft<?> thbt = (Sft<?>) o;
                rfturn thbt.sizf() == s.sizf()
                    && dontbinsAll(thbt); // Invokfs sbff dontbinsAll() bbovf
            }

            stbtid <K,V,T> ChfdkfdEntry<K,V,T> dhfdkfdEntry(Mbp.Entry<K,V> f,
                                                            Clbss<T> vblufTypf) {
                rfturn nfw ChfdkfdEntry<>(f, vblufTypf);
            }

            /**
             * This "wrbppfr dlbss" sfrvfs two purposfs: it prfvfnts
             * thf dlifnt from modifying thf bbdking Mbp, by short-dirduiting
             * thf sftVbluf mfthod, bnd it protfdts thf bbdking Mbp bgbinst
             * bn ill-bfhbvfd Mbp.Entry thbt bttfmpts to modify bnothfr
             * Mbp.Entry whfn bskfd to pfrform bn fqublity dhfdk.
             */
            privbtf stbtid dlbss ChfdkfdEntry<K,V,T> implfmfnts Mbp.Entry<K,V> {
                privbtf finbl Mbp.Entry<K, V> f;
                privbtf finbl Clbss<T> vblufTypf;

                ChfdkfdEntry(Mbp.Entry<K, V> f, Clbss<T> vblufTypf) {
                    this.f = Objfdts.rfquirfNonNull(f);
                    this.vblufTypf = Objfdts.rfquirfNonNull(vblufTypf);
                }

                publid K gftKfy()        { rfturn f.gftKfy(); }
                publid V gftVbluf()      { rfturn f.gftVbluf(); }
                publid int hbshCodf()    { rfturn f.hbshCodf(); }
                publid String toString() { rfturn f.toString(); }

                publid V sftVbluf(V vbluf) {
                    if (vbluf != null && !vblufTypf.isInstbndf(vbluf))
                        throw nfw ClbssCbstExdfption(bbdVblufMsg(vbluf));
                    rfturn f.sftVbluf(vbluf);
                }

                privbtf String bbdVblufMsg(Objfdt vbluf) {
                    rfturn "Attfmpt to insfrt " + vbluf.gftClbss() +
                        " vbluf into mbp with vbluf typf " + vblufTypf;
                }

                publid boolfbn fqubls(Objfdt o) {
                    if (o == this)
                        rfturn truf;
                    if (!(o instbndfof Mbp.Entry))
                        rfturn fblsf;
                    rfturn f.fqubls(nfw AbstrbdtMbp.SimplfImmutbblfEntry
                                    <>((Mbp.Entry<?,?>)o));
                }
            }
        }
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd sortfd mbp.
     * Any bttfmpt to insfrt b mbpping whosf kfy or vbluf hbvf thf wrong
     * typf will rfsult in bn immfdibtf {@link ClbssCbstExdfption}.
     * Similbrly, bny bttfmpt to modify thf vbluf durrfntly bssodibtfd with
     * b kfy will rfsult in bn immfdibtf {@link ClbssCbstExdfption},
     * whfthfr thf modifidbtion is bttfmptfd dirfdtly through thf mbp
     * itsflf, or through b {@link Mbp.Entry} instbndf obtbinfd from thf
     * mbp's {@link Mbp#fntrySft() fntry sft} vifw.
     *
     * <p>Assuming b mbp dontbins no indorrfdtly typfd kfys or vblufs
     * prior to thf timf b dynbmidblly typfsbff vifw is gfnfrbtfd, bnd
     * thbt bll subsfqufnt bddfss to thf mbp tbkfs plbdf through thf vifw
     * (or onf of its dollfdtion vifws), it is <i>gubrbntffd</i> thbt thf
     * mbp dbnnot dontbin bn indorrfdtly typfd kfy or vbluf.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd mbp will bf sfriblizbblf if thf spfdififd mbp is
     * sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd mbp pfrmits insfrtion of null kfys or vblufs
     * whfnfvfr thf bbdking mbp dofs.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm m thf mbp for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm kfyTypf thf typf of kfy thbt {@dodf m} is pfrmittfd to hold
     * @pbrbm vblufTypf thf typf of vbluf thbt {@dodf m} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd mbp
     * @sindf 1.5
     */
    publid stbtid <K,V> SortfdMbp<K,V> dhfdkfdSortfdMbp(SortfdMbp<K, V> m,
                                                        Clbss<K> kfyTypf,
                                                        Clbss<V> vblufTypf) {
        rfturn nfw ChfdkfdSortfdMbp<>(m, kfyTypf, vblufTypf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdSortfdMbp<K,V> fxtfnds ChfdkfdMbp<K,V>
        implfmfnts SortfdMbp<K,V>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 1599671320688067438L;

        privbtf finbl SortfdMbp<K, V> sm;

        ChfdkfdSortfdMbp(SortfdMbp<K, V> m,
                         Clbss<K> kfyTypf, Clbss<V> vblufTypf) {
            supfr(m, kfyTypf, vblufTypf);
            sm = m;
        }

        publid Compbrbtor<? supfr K> dompbrbtor() { rfturn sm.dompbrbtor(); }
        publid K firstKfy()                       { rfturn sm.firstKfy(); }
        publid K lbstKfy()                        { rfturn sm.lbstKfy(); }

        publid SortfdMbp<K,V> subMbp(K fromKfy, K toKfy) {
            rfturn dhfdkfdSortfdMbp(sm.subMbp(fromKfy, toKfy),
                                    kfyTypf, vblufTypf);
        }
        publid SortfdMbp<K,V> hfbdMbp(K toKfy) {
            rfturn dhfdkfdSortfdMbp(sm.hfbdMbp(toKfy), kfyTypf, vblufTypf);
        }
        publid SortfdMbp<K,V> tbilMbp(K fromKfy) {
            rfturn dhfdkfdSortfdMbp(sm.tbilMbp(fromKfy), kfyTypf, vblufTypf);
        }
    }

    /**
     * Rfturns b dynbmidblly typfsbff vifw of thf spfdififd nbvigbblf mbp.
     * Any bttfmpt to insfrt b mbpping whosf kfy or vbluf hbvf thf wrong
     * typf will rfsult in bn immfdibtf {@link ClbssCbstExdfption}.
     * Similbrly, bny bttfmpt to modify thf vbluf durrfntly bssodibtfd with
     * b kfy will rfsult in bn immfdibtf {@link ClbssCbstExdfption},
     * whfthfr thf modifidbtion is bttfmptfd dirfdtly through thf mbp
     * itsflf, or through b {@link Mbp.Entry} instbndf obtbinfd from thf
     * mbp's {@link Mbp#fntrySft() fntry sft} vifw.
     *
     * <p>Assuming b mbp dontbins no indorrfdtly typfd kfys or vblufs
     * prior to thf timf b dynbmidblly typfsbff vifw is gfnfrbtfd, bnd
     * thbt bll subsfqufnt bddfss to thf mbp tbkfs plbdf through thf vifw
     * (or onf of its dollfdtion vifws), it is <fm>gubrbntffd</fm> thbt thf
     * mbp dbnnot dontbin bn indorrfdtly typfd kfy or vbluf.
     *
     * <p>A disdussion of thf usf of dynbmidblly typfsbff vifws mby bf
     * found in thf dodumfntbtion for thf {@link #dhfdkfdCollfdtion
     * dhfdkfdCollfdtion} mfthod.
     *
     * <p>Thf rfturnfd mbp will bf sfriblizbblf if thf spfdififd mbp is
     * sfriblizbblf.
     *
     * <p>Sindf {@dodf null} is donsidfrfd to bf b vbluf of bny rfffrfndf
     * typf, thf rfturnfd mbp pfrmits insfrtion of null kfys or vblufs
     * whfnfvfr thf bbdking mbp dofs.
     *
     * @pbrbm <K> typf of mbp kfys
     * @pbrbm <V> typf of mbp vblufs
     * @pbrbm m thf mbp for whidh b dynbmidblly typfsbff vifw is to bf
     *          rfturnfd
     * @pbrbm kfyTypf thf typf of kfy thbt {@dodf m} is pfrmittfd to hold
     * @pbrbm vblufTypf thf typf of vbluf thbt {@dodf m} is pfrmittfd to hold
     * @rfturn b dynbmidblly typfsbff vifw of thf spfdififd mbp
     * @sindf 1.8
     */
    publid stbtid <K,V> NbvigbblfMbp<K,V> dhfdkfdNbvigbblfMbp(NbvigbblfMbp<K, V> m,
                                                        Clbss<K> kfyTypf,
                                                        Clbss<V> vblufTypf) {
        rfturn nfw ChfdkfdNbvigbblfMbp<>(m, kfyTypf, vblufTypf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss ChfdkfdNbvigbblfMbp<K,V> fxtfnds ChfdkfdSortfdMbp<K,V>
        implfmfnts NbvigbblfMbp<K,V>, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = -4852462692372534096L;

        privbtf finbl NbvigbblfMbp<K, V> nm;

        ChfdkfdNbvigbblfMbp(NbvigbblfMbp<K, V> m,
                         Clbss<K> kfyTypf, Clbss<V> vblufTypf) {
            supfr(m, kfyTypf, vblufTypf);
            nm = m;
        }

        publid Compbrbtor<? supfr K> dompbrbtor()   { rfturn nm.dompbrbtor(); }
        publid K firstKfy()                           { rfturn nm.firstKfy(); }
        publid K lbstKfy()                             { rfturn nm.lbstKfy(); }

        publid Entry<K, V> lowfrEntry(K kfy) {
            Entry<K,V> lowfr = nm.lowfrEntry(kfy);
            rfturn (null != lowfr)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(lowfr, vblufTypf)
                : null;
        }

        publid K lowfrKfy(K kfy)                   { rfturn nm.lowfrKfy(kfy); }

        publid Entry<K, V> floorEntry(K kfy) {
            Entry<K,V> floor = nm.floorEntry(kfy);
            rfturn (null != floor)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(floor, vblufTypf)
                : null;
        }

        publid K floorKfy(K kfy)                   { rfturn nm.floorKfy(kfy); }

        publid Entry<K, V> dfilingEntry(K kfy) {
            Entry<K,V> dfiling = nm.dfilingEntry(kfy);
            rfturn (null != dfiling)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(dfiling, vblufTypf)
                : null;
        }

        publid K dfilingKfy(K kfy)               { rfturn nm.dfilingKfy(kfy); }

        publid Entry<K, V> highfrEntry(K kfy) {
            Entry<K,V> highfr = nm.highfrEntry(kfy);
            rfturn (null != highfr)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(highfr, vblufTypf)
                : null;
        }

        publid K highfrKfy(K kfy)                 { rfturn nm.highfrKfy(kfy); }

        publid Entry<K, V> firstEntry() {
            Entry<K,V> first = nm.firstEntry();
            rfturn (null != first)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(first, vblufTypf)
                : null;
        }

        publid Entry<K, V> lbstEntry() {
            Entry<K,V> lbst = nm.lbstEntry();
            rfturn (null != lbst)
                ? nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(lbst, vblufTypf)
                : null;
        }

        publid Entry<K, V> pollFirstEntry() {
            Entry<K,V> fntry = nm.pollFirstEntry();
            rfturn (null == fntry)
                ? null
                : nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(fntry, vblufTypf);
        }

        publid Entry<K, V> pollLbstEntry() {
            Entry<K,V> fntry = nm.pollLbstEntry();
            rfturn (null == fntry)
                ? null
                : nfw ChfdkfdMbp.ChfdkfdEntrySft.ChfdkfdEntry<>(fntry, vblufTypf);
        }

        publid NbvigbblfMbp<K, V> dfsdfndingMbp() {
            rfturn dhfdkfdNbvigbblfMbp(nm.dfsdfndingMbp(), kfyTypf, vblufTypf);
        }

        publid NbvigbblfSft<K> kfySft() {
            rfturn nbvigbblfKfySft();
        }

        publid NbvigbblfSft<K> nbvigbblfKfySft() {
            rfturn dhfdkfdNbvigbblfSft(nm.nbvigbblfKfySft(), kfyTypf);
        }

        publid NbvigbblfSft<K> dfsdfndingKfySft() {
            rfturn dhfdkfdNbvigbblfSft(nm.dfsdfndingKfySft(), kfyTypf);
        }

        @Ovfrridf
        publid NbvigbblfMbp<K,V> subMbp(K fromKfy, K toKfy) {
            rfturn dhfdkfdNbvigbblfMbp(nm.subMbp(fromKfy, truf, toKfy, fblsf),
                                    kfyTypf, vblufTypf);
        }

        @Ovfrridf
        publid NbvigbblfMbp<K,V> hfbdMbp(K toKfy) {
            rfturn dhfdkfdNbvigbblfMbp(nm.hfbdMbp(toKfy, fblsf), kfyTypf, vblufTypf);
        }

        @Ovfrridf
        publid NbvigbblfMbp<K,V> tbilMbp(K fromKfy) {
            rfturn dhfdkfdNbvigbblfMbp(nm.tbilMbp(fromKfy, truf), kfyTypf, vblufTypf);
        }

        publid NbvigbblfMbp<K, V> subMbp(K fromKfy, boolfbn fromIndlusivf, K toKfy, boolfbn toIndlusivf) {
            rfturn dhfdkfdNbvigbblfMbp(nm.subMbp(fromKfy, fromIndlusivf, toKfy, toIndlusivf), kfyTypf, vblufTypf);
        }

        publid NbvigbblfMbp<K, V> hfbdMbp(K toKfy, boolfbn indlusivf) {
            rfturn dhfdkfdNbvigbblfMbp(nm.hfbdMbp(toKfy, indlusivf), kfyTypf, vblufTypf);
        }

        publid NbvigbblfMbp<K, V> tbilMbp(K fromKfy, boolfbn indlusivf) {
            rfturn dhfdkfdNbvigbblfMbp(nm.tbilMbp(fromKfy, indlusivf), kfyTypf, vblufTypf);
        }
    }

    // Empty dollfdtions

    /**
     * Rfturns bn itfrbtor thbt hbs no flfmfnts.  Morf prfdisfly,
     *
     * <ul>
     * <li>{@link Itfrbtor#hbsNfxt hbsNfxt} blwbys rfturns {@dodf
     * fblsf}.</li>
     * <li>{@link Itfrbtor#nfxt nfxt} blwbys throws {@link
     * NoSudhElfmfntExdfption}.</li>
     * <li>{@link Itfrbtor#rfmovf rfmovf} blwbys throws {@link
     * IllfgblStbtfExdfption}.</li>
     * </ul>
     *
     * <p>Implfmfntbtions of this mfthod brf pfrmittfd, but not
     * rfquirfd, to rfturn thf sbmf objfdt from multiplf invodbtions.
     *
     * @pbrbm <T> typf of flfmfnts, if thfrf wfrf bny, in thf itfrbtor
     * @rfturn bn fmpty itfrbtor
     * @sindf 1.7
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T> Itfrbtor<T> fmptyItfrbtor() {
        rfturn (Itfrbtor<T>) EmptyItfrbtor.EMPTY_ITERATOR;
    }

    privbtf stbtid dlbss EmptyItfrbtor<E> implfmfnts Itfrbtor<E> {
        stbtid finbl EmptyItfrbtor<Objfdt> EMPTY_ITERATOR
            = nfw EmptyItfrbtor<>();

        publid boolfbn hbsNfxt() { rfturn fblsf; }
        publid E nfxt() { throw nfw NoSudhElfmfntExdfption(); }
        publid void rfmovf() { throw nfw IllfgblStbtfExdfption(); }
        @Ovfrridf
        publid void forEbdhRfmbining(Consumfr<? supfr E> bdtion) {
            Objfdts.rfquirfNonNull(bdtion);
        }
    }

    /**
     * Rfturns b list itfrbtor thbt hbs no flfmfnts.  Morf prfdisfly,
     *
     * <ul>
     * <li>{@link Itfrbtor#hbsNfxt hbsNfxt} bnd {@link
     * ListItfrbtor#hbsPrfvious hbsPrfvious} blwbys rfturn {@dodf
     * fblsf}.</li>
     * <li>{@link Itfrbtor#nfxt nfxt} bnd {@link ListItfrbtor#prfvious
     * prfvious} blwbys throw {@link NoSudhElfmfntExdfption}.</li>
     * <li>{@link Itfrbtor#rfmovf rfmovf} bnd {@link ListItfrbtor#sft
     * sft} blwbys throw {@link IllfgblStbtfExdfption}.</li>
     * <li>{@link ListItfrbtor#bdd bdd} blwbys throws {@link
     * UnsupportfdOpfrbtionExdfption}.</li>
     * <li>{@link ListItfrbtor#nfxtIndfx nfxtIndfx} blwbys rfturns
     * {@dodf 0}.</li>
     * <li>{@link ListItfrbtor#prfviousIndfx prfviousIndfx} blwbys
     * rfturns {@dodf -1}.</li>
     * </ul>
     *
     * <p>Implfmfntbtions of this mfthod brf pfrmittfd, but not
     * rfquirfd, to rfturn thf sbmf objfdt from multiplf invodbtions.
     *
     * @pbrbm <T> typf of flfmfnts, if thfrf wfrf bny, in thf itfrbtor
     * @rfturn bn fmpty list itfrbtor
     * @sindf 1.7
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T> ListItfrbtor<T> fmptyListItfrbtor() {
        rfturn (ListItfrbtor<T>) EmptyListItfrbtor.EMPTY_ITERATOR;
    }

    privbtf stbtid dlbss EmptyListItfrbtor<E>
        fxtfnds EmptyItfrbtor<E>
        implfmfnts ListItfrbtor<E>
    {
        stbtid finbl EmptyListItfrbtor<Objfdt> EMPTY_ITERATOR
            = nfw EmptyListItfrbtor<>();

        publid boolfbn hbsPrfvious() { rfturn fblsf; }
        publid E prfvious() { throw nfw NoSudhElfmfntExdfption(); }
        publid int nfxtIndfx()     { rfturn 0; }
        publid int prfviousIndfx() { rfturn -1; }
        publid void sft(E f) { throw nfw IllfgblStbtfExdfption(); }
        publid void bdd(E f) { throw nfw UnsupportfdOpfrbtionExdfption(); }
    }

    /**
     * Rfturns bn fnumfrbtion thbt hbs no flfmfnts.  Morf prfdisfly,
     *
     * <ul>
     * <li>{@link Enumfrbtion#hbsMorfElfmfnts hbsMorfElfmfnts} blwbys
     * rfturns {@dodf fblsf}.</li>
     * <li> {@link Enumfrbtion#nfxtElfmfnt nfxtElfmfnt} blwbys throws
     * {@link NoSudhElfmfntExdfption}.</li>
     * </ul>
     *
     * <p>Implfmfntbtions of this mfthod brf pfrmittfd, but not
     * rfquirfd, to rfturn thf sbmf objfdt from multiplf invodbtions.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf fnumfrbtion
     * @rfturn bn fmpty fnumfrbtion
     * @sindf 1.7
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T> Enumfrbtion<T> fmptyEnumfrbtion() {
        rfturn (Enumfrbtion<T>) EmptyEnumfrbtion.EMPTY_ENUMERATION;
    }

    privbtf stbtid dlbss EmptyEnumfrbtion<E> implfmfnts Enumfrbtion<E> {
        stbtid finbl EmptyEnumfrbtion<Objfdt> EMPTY_ENUMERATION
            = nfw EmptyEnumfrbtion<>();

        publid boolfbn hbsMorfElfmfnts() { rfturn fblsf; }
        publid E nfxtElfmfnt() { throw nfw NoSudhElfmfntExdfption(); }
    }

    /**
     * Thf fmpty sft (immutbblf).  This sft is sfriblizbblf.
     *
     * @sff #fmptySft()
     */
    @SupprfssWbrnings("rbwtypfs")
    publid stbtid finbl Sft EMPTY_SET = nfw EmptySft<>();

    /**
     * Rfturns bn fmpty sft (immutbblf).  This sft is sfriblizbblf.
     * Unlikf thf likf-nbmfd fifld, this mfthod is pbrbmftfrizfd.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty sft:
     * <prf>
     *     Sft&lt;String&gt; s = Collfdtions.fmptySft();
     * </prf>
     * @implNotf Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf
     * {@dodf Sft} objfdt for fbdh dbll.  Using this mfthod is likfly to hbvf
     * dompbrbblf dost to using thf likf-nbmfd fifld.  (Unlikf this mfthod, thf
     * fifld dofs not providf typf sbffty.)
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @rfturn thf fmpty sft
     *
     * @sff #EMPTY_SET
     * @sindf 1.5
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl <T> Sft<T> fmptySft() {
        rfturn (Sft<T>) EMPTY_SET;
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss EmptySft<E>
        fxtfnds AbstrbdtSft<E>
        implfmfnts Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 1582296315990362920L;

        publid Itfrbtor<E> itfrbtor() { rfturn fmptyItfrbtor(); }

        publid int sizf() {rfturn 0;}
        publid boolfbn isEmpty() {rfturn truf;}

        publid boolfbn dontbins(Objfdt obj) {rfturn fblsf;}
        publid boolfbn dontbinsAll(Collfdtion<?> d) { rfturn d.isEmpty(); }

        publid Objfdt[] toArrby() { rfturn nfw Objfdt[0]; }

        publid <T> T[] toArrby(T[] b) {
            if (b.lfngth > 0)
                b[0] = null;
            rfturn b;
        }

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            Objfdts.rfquirfNonNull(bdtion);
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            Objfdts.rfquirfNonNull(filtfr);
            rfturn fblsf;
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() { rfturn Splitfrbtors.fmptySplitfrbtor(); }

        // Prfsfrvfs singlfton propfrty
        privbtf Objfdt rfbdRfsolvf() {
            rfturn EMPTY_SET;
        }
    }

    /**
     * Rfturns bn fmpty sortfd sft (immutbblf).  This sft is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty
     * sortfd sft:
     * <prf> {@dodf
     *     SortfdSft<String> s = Collfdtions.fmptySortfdSft();
     * }</prf>
     *
     * @implNotf Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf
     * {@dodf SortfdSft} objfdt for fbdh dbll.
     *
     * @pbrbm <E> typf of flfmfnts, if thfrf wfrf bny, in thf sft
     * @rfturn thf fmpty sortfd sft
     * @sindf 1.8
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <E> SortfdSft<E> fmptySortfdSft() {
        rfturn (SortfdSft<E>) UnmodifibblfNbvigbblfSft.EMPTY_NAVIGABLE_SET;
    }

    /**
     * Rfturns bn fmpty nbvigbblf sft (immutbblf).  This sft is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty
     * nbvigbblf sft:
     * <prf> {@dodf
     *     NbvigbblfSft<String> s = Collfdtions.fmptyNbvigbblfSft();
     * }</prf>
     *
     * @implNotf Implfmfntbtions of this mfthod nffd not
     * drfbtf b sfpbrbtf {@dodf NbvigbblfSft} objfdt for fbdh dbll.
     *
     * @pbrbm <E> typf of flfmfnts, if thfrf wfrf bny, in thf sft
     * @rfturn thf fmpty nbvigbblf sft
     * @sindf 1.8
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <E> NbvigbblfSft<E> fmptyNbvigbblfSft() {
        rfturn (NbvigbblfSft<E>) UnmodifibblfNbvigbblfSft.EMPTY_NAVIGABLE_SET;
    }

    /**
     * Thf fmpty list (immutbblf).  This list is sfriblizbblf.
     *
     * @sff #fmptyList()
     */
    @SupprfssWbrnings("rbwtypfs")
    publid stbtid finbl List EMPTY_LIST = nfw EmptyList<>();

    /**
     * Rfturns bn fmpty list (immutbblf).  This list is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty list:
     * <prf>
     *     List&lt;String&gt; s = Collfdtions.fmptyList();
     * </prf>
     *
     * @implNotf
     * Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf <tt>List</tt>
     * objfdt for fbdh dbll.   Using this mfthod is likfly to hbvf dompbrbblf
     * dost to using thf likf-nbmfd fifld.  (Unlikf this mfthod, thf fifld dofs
     * not providf typf sbffty.)
     *
     * @pbrbm <T> typf of flfmfnts, if thfrf wfrf bny, in thf list
     * @rfturn bn fmpty immutbblf list
     *
     * @sff #EMPTY_LIST
     * @sindf 1.5
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl <T> List<T> fmptyList() {
        rfturn (List<T>) EMPTY_LIST;
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss EmptyList<E>
        fxtfnds AbstrbdtList<E>
        implfmfnts RbndomAddfss, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 8842843931221139166L;

        publid Itfrbtor<E> itfrbtor() {
            rfturn fmptyItfrbtor();
        }
        publid ListItfrbtor<E> listItfrbtor() {
            rfturn fmptyListItfrbtor();
        }

        publid int sizf() {rfturn 0;}
        publid boolfbn isEmpty() {rfturn truf;}

        publid boolfbn dontbins(Objfdt obj) {rfturn fblsf;}
        publid boolfbn dontbinsAll(Collfdtion<?> d) { rfturn d.isEmpty(); }

        publid Objfdt[] toArrby() { rfturn nfw Objfdt[0]; }

        publid <T> T[] toArrby(T[] b) {
            if (b.lfngth > 0)
                b[0] = null;
            rfturn b;
        }

        publid E gft(int indfx) {
            throw nfw IndfxOutOfBoundsExdfption("Indfx: "+indfx);
        }

        publid boolfbn fqubls(Objfdt o) {
            rfturn (o instbndfof List) && ((List<?>)o).isEmpty();
        }

        publid int hbshCodf() { rfturn 1; }

        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            Objfdts.rfquirfNonNull(filtfr);
            rfturn fblsf;
        }
        @Ovfrridf
        publid void rfplbdfAll(UnbryOpfrbtor<E> opfrbtor) {
            Objfdts.rfquirfNonNull(opfrbtor);
        }
        @Ovfrridf
        publid void sort(Compbrbtor<? supfr E> d) {
        }

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            Objfdts.rfquirfNonNull(bdtion);
        }

        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() { rfturn Splitfrbtors.fmptySplitfrbtor(); }

        // Prfsfrvfs singlfton propfrty
        privbtf Objfdt rfbdRfsolvf() {
            rfturn EMPTY_LIST;
        }
    }

    /**
     * Thf fmpty mbp (immutbblf).  This mbp is sfriblizbblf.
     *
     * @sff #fmptyMbp()
     * @sindf 1.3
     */
    @SupprfssWbrnings("rbwtypfs")
    publid stbtid finbl Mbp EMPTY_MAP = nfw EmptyMbp<>();

    /**
     * Rfturns bn fmpty mbp (immutbblf).  This mbp is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty mbp:
     * <prf>
     *     Mbp&lt;String, Dbtf&gt; s = Collfdtions.fmptyMbp();
     * </prf>
     * @implNotf Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf
     * {@dodf Mbp} objfdt for fbdh dbll.  Using this mfthod is likfly to hbvf
     * dompbrbblf dost to using thf likf-nbmfd fifld.  (Unlikf this mfthod, thf
     * fifld dofs not providf typf sbffty.)
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @rfturn bn fmpty mbp
     * @sff #EMPTY_MAP
     * @sindf 1.5
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl <K,V> Mbp<K,V> fmptyMbp() {
        rfturn (Mbp<K,V>) EMPTY_MAP;
    }

    /**
     * Rfturns bn fmpty sortfd mbp (immutbblf).  This mbp is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty mbp:
     * <prf> {@dodf
     *     SortfdMbp<String, Dbtf> s = Collfdtions.fmptySortfdMbp();
     * }</prf>
     *
     * @implNotf Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf
     * {@dodf SortfdMbp} objfdt for fbdh dbll.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @rfturn bn fmpty sortfd mbp
     * @sindf 1.8
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl <K,V> SortfdMbp<K,V> fmptySortfdMbp() {
        rfturn (SortfdMbp<K,V>) UnmodifibblfNbvigbblfMbp.EMPTY_NAVIGABLE_MAP;
    }

    /**
     * Rfturns bn fmpty nbvigbblf mbp (immutbblf).  This mbp is sfriblizbblf.
     *
     * <p>This fxbmplf illustrbtfs thf typf-sbff wby to obtbin bn fmpty mbp:
     * <prf> {@dodf
     *     NbvigbblfMbp<String, Dbtf> s = Collfdtions.fmptyNbvigbblfMbp();
     * }</prf>
     *
     * @implNotf Implfmfntbtions of this mfthod nffd not drfbtf b sfpbrbtf
     * {@dodf NbvigbblfMbp} objfdt for fbdh dbll.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @rfturn bn fmpty nbvigbblf mbp
     * @sindf 1.8
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid finbl <K,V> NbvigbblfMbp<K,V> fmptyNbvigbblfMbp() {
        rfturn (NbvigbblfMbp<K,V>) UnmodifibblfNbvigbblfMbp.EMPTY_NAVIGABLE_MAP;
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss EmptyMbp<K,V>
        fxtfnds AbstrbdtMbp<K,V>
        implfmfnts Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 6428348081105594320L;

        publid int sizf()                          {rfturn 0;}
        publid boolfbn isEmpty()                   {rfturn truf;}
        publid boolfbn dontbinsKfy(Objfdt kfy)     {rfturn fblsf;}
        publid boolfbn dontbinsVbluf(Objfdt vbluf) {rfturn fblsf;}
        publid V gft(Objfdt kfy)                   {rfturn null;}
        publid Sft<K> kfySft()                     {rfturn fmptySft();}
        publid Collfdtion<V> vblufs()              {rfturn fmptySft();}
        publid Sft<Mbp.Entry<K,V>> fntrySft()      {rfturn fmptySft();}

        publid boolfbn fqubls(Objfdt o) {
            rfturn (o instbndfof Mbp) && ((Mbp<?,?>)o).isEmpty();
        }

        publid int hbshCodf()                      {rfturn 0;}

        // Ovfrridf dffbult mfthods in Mbp
        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        publid V gftOrDffbult(Objfdt k, V dffbultVbluf) {
            rfturn dffbultVbluf;
        }

        @Ovfrridf
        publid void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
            Objfdts.rfquirfNonNull(bdtion);
        }

        @Ovfrridf
        publid void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
            Objfdts.rfquirfNonNull(fundtion);
        }

        @Ovfrridf
        publid V putIfAbsfnt(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V rfplbdf(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfAbsfnt(K kfy,
                Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfPrfsfnt(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputf(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V mfrgf(K kfy, V vbluf,
                BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        // Prfsfrvfs singlfton propfrty
        privbtf Objfdt rfbdRfsolvf() {
            rfturn EMPTY_MAP;
        }
    }

    // Singlfton dollfdtions

    /**
     * Rfturns bn immutbblf sft dontbining only thf spfdififd objfdt.
     * Thf rfturnfd sft is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf sft
     * @pbrbm o thf solf objfdt to bf storfd in thf rfturnfd sft.
     * @rfturn bn immutbblf sft dontbining only thf spfdififd objfdt.
     */
    publid stbtid <T> Sft<T> singlfton(T o) {
        rfturn nfw SinglftonSft<>(o);
    }

    stbtid <E> Itfrbtor<E> singlftonItfrbtor(finbl E f) {
        rfturn nfw Itfrbtor<E>() {
            privbtf boolfbn hbsNfxt = truf;
            publid boolfbn hbsNfxt() {
                rfturn hbsNfxt;
            }
            publid E nfxt() {
                if (hbsNfxt) {
                    hbsNfxt = fblsf;
                    rfturn f;
                }
                throw nfw NoSudhElfmfntExdfption();
            }
            publid void rfmovf() {
                throw nfw UnsupportfdOpfrbtionExdfption();
            }
            @Ovfrridf
            publid void forEbdhRfmbining(Consumfr<? supfr E> bdtion) {
                Objfdts.rfquirfNonNull(bdtion);
                if (hbsNfxt) {
                    bdtion.bddfpt(f);
                    hbsNfxt = fblsf;
                }
            }
        };
    }

    /**
     * Crfbtfs b {@dodf Splitfrbtor} with only thf spfdififd flfmfnt
     *
     * @pbrbm <T> Typf of flfmfnts
     * @rfturn A singlfton {@dodf Splitfrbtor}
     */
    stbtid <T> Splitfrbtor<T> singlftonSplitfrbtor(finbl T flfmfnt) {
        rfturn nfw Splitfrbtor<T>() {
            long fst = 1;

            @Ovfrridf
            publid Splitfrbtor<T> trySplit() {
                rfturn null;
            }

            @Ovfrridf
            publid boolfbn tryAdvbndf(Consumfr<? supfr T> donsumfr) {
                Objfdts.rfquirfNonNull(donsumfr);
                if (fst > 0) {
                    fst--;
                    donsumfr.bddfpt(flfmfnt);
                    rfturn truf;
                }
                rfturn fblsf;
            }

            @Ovfrridf
            publid void forEbdhRfmbining(Consumfr<? supfr T> donsumfr) {
                tryAdvbndf(donsumfr);
            }

            @Ovfrridf
            publid long fstimbtfSizf() {
                rfturn fst;
            }

            @Ovfrridf
            publid int dhbrbdtfristids() {
                int vbluf = (flfmfnt != null) ? Splitfrbtor.NONNULL : 0;

                rfturn vbluf | Splitfrbtor.SIZED | Splitfrbtor.SUBSIZED | Splitfrbtor.IMMUTABLE |
                       Splitfrbtor.DISTINCT | Splitfrbtor.ORDERED;
            }
        };
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss SinglftonSft<E>
        fxtfnds AbstrbdtSft<E>
        implfmfnts Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 3193687207550431679L;

        privbtf finbl E flfmfnt;

        SinglftonSft(E f) {flfmfnt = f;}

        publid Itfrbtor<E> itfrbtor() {
            rfturn singlftonItfrbtor(flfmfnt);
        }

        publid int sizf() {rfturn 1;}

        publid boolfbn dontbins(Objfdt o) {rfturn fq(o, flfmfnt);}

        // Ovfrridf dffbult mfthods for Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            bdtion.bddfpt(flfmfnt);
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {
            rfturn singlftonSplitfrbtor(flfmfnt);
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
    }

    /**
     * Rfturns bn immutbblf list dontbining only thf spfdififd objfdt.
     * Thf rfturnfd list is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf list
     * @pbrbm o thf solf objfdt to bf storfd in thf rfturnfd list.
     * @rfturn bn immutbblf list dontbining only thf spfdififd objfdt.
     * @sindf 1.3
     */
    publid stbtid <T> List<T> singlftonList(T o) {
        rfturn nfw SinglftonList<>(o);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss SinglftonList<E>
        fxtfnds AbstrbdtList<E>
        implfmfnts RbndomAddfss, Sfriblizbblf {

        privbtf stbtid finbl long sfriblVfrsionUID = 3093736618740652951L;

        privbtf finbl E flfmfnt;

        SinglftonList(E obj)                {flfmfnt = obj;}

        publid Itfrbtor<E> itfrbtor() {
            rfturn singlftonItfrbtor(flfmfnt);
        }

        publid int sizf()                   {rfturn 1;}

        publid boolfbn dontbins(Objfdt obj) {rfturn fq(obj, flfmfnt);}

        publid E gft(int indfx) {
            if (indfx != 0)
              throw nfw IndfxOutOfBoundsExdfption("Indfx: "+indfx+", Sizf: 1");
            rfturn flfmfnt;
        }

        // Ovfrridf dffbult mfthods for Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            bdtion.bddfpt(flfmfnt);
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        @Ovfrridf
        publid void rfplbdfAll(UnbryOpfrbtor<E> opfrbtor) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
        @Ovfrridf
        publid void sort(Compbrbtor<? supfr E> d) {
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {
            rfturn singlftonSplitfrbtor(flfmfnt);
        }
    }

    /**
     * Rfturns bn immutbblf mbp, mbpping only thf spfdififd kfy to thf
     * spfdififd vbluf.  Thf rfturnfd mbp is sfriblizbblf.
     *
     * @pbrbm <K> thf dlbss of thf mbp kfys
     * @pbrbm <V> thf dlbss of thf mbp vblufs
     * @pbrbm kfy thf solf kfy to bf storfd in thf rfturnfd mbp.
     * @pbrbm vbluf thf vbluf to whidh thf rfturnfd mbp mbps <tt>kfy</tt>.
     * @rfturn bn immutbblf mbp dontbining only thf spfdififd kfy-vbluf
     *         mbpping.
     * @sindf 1.3
     */
    publid stbtid <K,V> Mbp<K,V> singlftonMbp(K kfy, V vbluf) {
        rfturn nfw SinglftonMbp<>(kfy, vbluf);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss SinglftonMbp<K,V>
          fxtfnds AbstrbdtMbp<K,V>
          implfmfnts Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = -6979724477215052911L;

        privbtf finbl K k;
        privbtf finbl V v;

        SinglftonMbp(K kfy, V vbluf) {
            k = kfy;
            v = vbluf;
        }

        publid int sizf()                                           {rfturn 1;}
        publid boolfbn isEmpty()                                {rfturn fblsf;}
        publid boolfbn dontbinsKfy(Objfdt kfy)             {rfturn fq(kfy, k);}
        publid boolfbn dontbinsVbluf(Objfdt vbluf)       {rfturn fq(vbluf, v);}
        publid V gft(Objfdt kfy)              {rfturn (fq(kfy, k) ? v : null);}

        privbtf trbnsifnt Sft<K> kfySft;
        privbtf trbnsifnt Sft<Mbp.Entry<K,V>> fntrySft;
        privbtf trbnsifnt Collfdtion<V> vblufs;

        publid Sft<K> kfySft() {
            if (kfySft==null)
                kfySft = singlfton(k);
            rfturn kfySft;
        }

        publid Sft<Mbp.Entry<K,V>> fntrySft() {
            if (fntrySft==null)
                fntrySft = Collfdtions.<Mbp.Entry<K,V>>singlfton(
                    nfw SimplfImmutbblfEntry<>(k, v));
            rfturn fntrySft;
        }

        publid Collfdtion<V> vblufs() {
            if (vblufs==null)
                vblufs = singlfton(v);
            rfturn vblufs;
        }

        // Ovfrridf dffbult mfthods in Mbp
        @Ovfrridf
        publid V gftOrDffbult(Objfdt kfy, V dffbultVbluf) {
            rfturn fq(kfy, k) ? v : dffbultVbluf;
        }

        @Ovfrridf
        publid void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
            bdtion.bddfpt(k, v);
        }

        @Ovfrridf
        publid void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V putIfAbsfnt(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V rfplbdf(K kfy, V vbluf) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfAbsfnt(K kfy,
                Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputfIfPrfsfnt(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V domputf(K kfy,
                BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        publid V mfrgf(K kfy, V vbluf,
                BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }
    }

    // Misdfllbnfous

    /**
     * Rfturns bn immutbblf list donsisting of <tt>n</tt> dopifs of thf
     * spfdififd objfdt.  Thf nfwly bllodbtfd dbtb objfdt is tiny (it dontbins
     * b singlf rfffrfndf to thf dbtb objfdt).  This mfthod is usfful in
     * dombinbtion with thf <tt>List.bddAll</tt> mfthod to grow lists.
     * Thf rfturnfd list is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdt to dopy bnd of thf objfdts
     *         in thf rfturnfd list.
     * @pbrbm  n thf numbfr of flfmfnts in thf rfturnfd list.
     * @pbrbm  o thf flfmfnt to bppfbr rfpfbtfdly in thf rfturnfd list.
     * @rfturn bn immutbblf list donsisting of <tt>n</tt> dopifs of thf
     *         spfdififd objfdt.
     * @throws IllfgblArgumfntExdfption if {@dodf n < 0}
     * @sff    List#bddAll(Collfdtion)
     * @sff    List#bddAll(int, Collfdtion)
     */
    publid stbtid <T> List<T> nCopifs(int n, T o) {
        if (n < 0)
            throw nfw IllfgblArgumfntExdfption("List lfngth = " + n);
        rfturn nfw CopifsList<>(n, o);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss CopifsList<E>
        fxtfnds AbstrbdtList<E>
        implfmfnts RbndomAddfss, Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 2739099268398711800L;

        finbl int n;
        finbl E flfmfnt;

        CopifsList(int n, E f) {
            bssfrt n >= 0;
            this.n = n;
            flfmfnt = f;
        }

        publid int sizf() {
            rfturn n;
        }

        publid boolfbn dontbins(Objfdt obj) {
            rfturn n != 0 && fq(obj, flfmfnt);
        }

        publid int indfxOf(Objfdt o) {
            rfturn dontbins(o) ? 0 : -1;
        }

        publid int lbstIndfxOf(Objfdt o) {
            rfturn dontbins(o) ? n - 1 : -1;
        }

        publid E gft(int indfx) {
            if (indfx < 0 || indfx >= n)
                throw nfw IndfxOutOfBoundsExdfption("Indfx: "+indfx+
                                                    ", Sizf: "+n);
            rfturn flfmfnt;
        }

        publid Objfdt[] toArrby() {
            finbl Objfdt[] b = nfw Objfdt[n];
            if (flfmfnt != null)
                Arrbys.fill(b, 0, n, flfmfnt);
            rfturn b;
        }

        @SupprfssWbrnings("undhfdkfd")
        publid <T> T[] toArrby(T[] b) {
            finbl int n = this.n;
            if (b.lfngth < n) {
                b = (T[])jbvb.lbng.rfflfdt.Arrby
                    .nfwInstbndf(b.gftClbss().gftComponfntTypf(), n);
                if (flfmfnt != null)
                    Arrbys.fill(b, 0, n, flfmfnt);
            } flsf {
                Arrbys.fill(b, 0, n, flfmfnt);
                if (b.lfngth > n)
                    b[n] = null;
            }
            rfturn b;
        }

        publid List<E> subList(int fromIndfx, int toIndfx) {
            if (fromIndfx < 0)
                throw nfw IndfxOutOfBoundsExdfption("fromIndfx = " + fromIndfx);
            if (toIndfx > n)
                throw nfw IndfxOutOfBoundsExdfption("toIndfx = " + toIndfx);
            if (fromIndfx > toIndfx)
                throw nfw IllfgblArgumfntExdfption("fromIndfx(" + fromIndfx +
                                                   ") > toIndfx(" + toIndfx + ")");
            rfturn nfw CopifsList<>(toIndfx - fromIndfx, flfmfnt);
        }

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid Strfbm<E> strfbm() {
            rfturn IntStrfbm.rbngf(0, n).mbpToObj(i -> flfmfnt);
        }

        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm() {
            rfturn IntStrfbm.rbngf(0, n).pbrbllfl().mbpToObj(i -> flfmfnt);
        }

        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {
            rfturn strfbm().splitfrbtor();
        }
    }

    /**
     * Rfturns b dompbrbtor thbt imposfs thf rfvfrsf of thf <fm>nbturbl
     * ordfring</fm> on b dollfdtion of objfdts thbt implfmfnt thf
     * {@dodf Compbrbblf} intfrfbdf.  (Thf nbturbl ordfring is thf ordfring
     * imposfd by thf objfdts' own {@dodf dompbrfTo} mfthod.)  This fnbblfs b
     * simplf idiom for sorting (or mbintbining) dollfdtions (or brrbys) of
     * objfdts thbt implfmfnt thf {@dodf Compbrbblf} intfrfbdf in
     * rfvfrsf-nbturbl-ordfr.  For fxbmplf, supposf {@dodf b} is bn brrby of
     * strings. Thfn: <prf>
     *          Arrbys.sort(b, Collfdtions.rfvfrsfOrdfr());
     * </prf> sorts thf brrby in rfvfrsf-lfxidogrbphid (blphbbftidbl) ordfr.<p>
     *
     * Thf rfturnfd dompbrbtor is sfriblizbblf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts dompbrfd by thf dompbrbtor
     * @rfturn A dompbrbtor thbt imposfs thf rfvfrsf of thf <i>nbturbl
     *         ordfring</i> on b dollfdtion of objfdts thbt implfmfnt
     *         thf <tt>Compbrbblf</tt> intfrfbdf.
     * @sff Compbrbblf
     */
    @SupprfssWbrnings("undhfdkfd")
    publid stbtid <T> Compbrbtor<T> rfvfrsfOrdfr() {
        rfturn (Compbrbtor<T>) RfvfrsfCompbrbtor.REVERSE_ORDER;
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss RfvfrsfCompbrbtor
        implfmfnts Compbrbtor<Compbrbblf<Objfdt>>, Sfriblizbblf {

        privbtf stbtid finbl long sfriblVfrsionUID = 7207038068494060240L;

        stbtid finbl RfvfrsfCompbrbtor REVERSE_ORDER
            = nfw RfvfrsfCompbrbtor();

        publid int dompbrf(Compbrbblf<Objfdt> d1, Compbrbblf<Objfdt> d2) {
            rfturn d2.dompbrfTo(d1);
        }

        privbtf Objfdt rfbdRfsolvf() { rfturn Collfdtions.rfvfrsfOrdfr(); }

        @Ovfrridf
        publid Compbrbtor<Compbrbblf<Objfdt>> rfvfrsfd() {
            rfturn Compbrbtor.nbturblOrdfr();
        }
    }

    /**
     * Rfturns b dompbrbtor thbt imposfs thf rfvfrsf ordfring of thf spfdififd
     * dompbrbtor.  If thf spfdififd dompbrbtor is {@dodf null}, this mfthod is
     * fquivblfnt to {@link #rfvfrsfOrdfr()} (in othfr words, it rfturns b
     * dompbrbtor thbt imposfs thf rfvfrsf of thf <fm>nbturbl ordfring</fm> on
     * b dollfdtion of objfdts thbt implfmfnt thf Compbrbblf intfrfbdf).
     *
     * <p>Thf rfturnfd dompbrbtor is sfriblizbblf (bssuming thf spfdififd
     * dompbrbtor is blso sfriblizbblf or {@dodf null}).
     *
     * @pbrbm <T> thf dlbss of thf objfdts dompbrfd by thf dompbrbtor
     * @pbrbm dmp b dompbrbtor who's ordfring is to bf rfvfrsfd by thf rfturnfd
     * dompbrbtor or {@dodf null}
     * @rfturn A dompbrbtor thbt imposfs thf rfvfrsf ordfring of thf
     *         spfdififd dompbrbtor.
     * @sindf 1.5
     */
    publid stbtid <T> Compbrbtor<T> rfvfrsfOrdfr(Compbrbtor<T> dmp) {
        if (dmp == null)
            rfturn rfvfrsfOrdfr();

        if (dmp instbndfof RfvfrsfCompbrbtor2)
            rfturn ((RfvfrsfCompbrbtor2<T>)dmp).dmp;

        rfturn nfw RfvfrsfCompbrbtor2<>(dmp);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss RfvfrsfCompbrbtor2<T> implfmfnts Compbrbtor<T>,
        Sfriblizbblf
    {
        privbtf stbtid finbl long sfriblVfrsionUID = 4374092139857L;

        /**
         * Thf dompbrbtor spfdififd in thf stbtid fbdtory.  This will nfvfr
         * bf null, bs thf stbtid fbdtory rfturns b RfvfrsfCompbrbtor
         * instbndf if its brgumfnt is null.
         *
         * @sfribl
         */
        finbl Compbrbtor<T> dmp;

        RfvfrsfCompbrbtor2(Compbrbtor<T> dmp) {
            bssfrt dmp != null;
            this.dmp = dmp;
        }

        publid int dompbrf(T t1, T t2) {
            rfturn dmp.dompbrf(t2, t1);
        }

        publid boolfbn fqubls(Objfdt o) {
            rfturn (o == this) ||
                (o instbndfof RfvfrsfCompbrbtor2 &&
                 dmp.fqubls(((RfvfrsfCompbrbtor2)o).dmp));
        }

        publid int hbshCodf() {
            rfturn dmp.hbshCodf() ^ Intfgfr.MIN_VALUE;
        }

        @Ovfrridf
        publid Compbrbtor<T> rfvfrsfd() {
            rfturn dmp;
        }
    }

    /**
     * Rfturns bn fnumfrbtion ovfr thf spfdififd dollfdtion.  This providfs
     * intfropfrbbility with lfgbdy APIs thbt rfquirf bn fnumfrbtion
     * bs input.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dollfdtion
     * @pbrbm d thf dollfdtion for whidh bn fnumfrbtion is to bf rfturnfd.
     * @rfturn bn fnumfrbtion ovfr thf spfdififd dollfdtion.
     * @sff Enumfrbtion
     */
    publid stbtid <T> Enumfrbtion<T> fnumfrbtion(finbl Collfdtion<T> d) {
        rfturn nfw Enumfrbtion<T>() {
            privbtf finbl Itfrbtor<T> i = d.itfrbtor();

            publid boolfbn hbsMorfElfmfnts() {
                rfturn i.hbsNfxt();
            }

            publid T nfxtElfmfnt() {
                rfturn i.nfxt();
            }
        };
    }

    /**
     * Rfturns bn brrby list dontbining thf flfmfnts rfturnfd by thf
     * spfdififd fnumfrbtion in thf ordfr thfy brf rfturnfd by thf
     * fnumfrbtion.  This mfthod providfs intfropfrbbility bftwffn
     * lfgbdy APIs thbt rfturn fnumfrbtions bnd nfw APIs thbt rfquirf
     * dollfdtions.
     *
     * @pbrbm <T> thf dlbss of thf objfdts rfturnfd by thf fnumfrbtion
     * @pbrbm f fnumfrbtion providing flfmfnts for thf rfturnfd
     *          brrby list
     * @rfturn bn brrby list dontbining thf flfmfnts rfturnfd
     *         by thf spfdififd fnumfrbtion.
     * @sindf 1.4
     * @sff Enumfrbtion
     * @sff ArrbyList
     */
    publid stbtid <T> ArrbyList<T> list(Enumfrbtion<T> f) {
        ArrbyList<T> l = nfw ArrbyList<>();
        whilf (f.hbsMorfElfmfnts())
            l.bdd(f.nfxtElfmfnt());
        rfturn l;
    }

    /**
     * Rfturns truf if thf spfdififd brgumfnts brf fqubl, or both null.
     *
     * NB: Do not rfplbdf with Objfdt.fqubls until JDK-8015417 is rfsolvfd.
     */
    stbtid boolfbn fq(Objfdt o1, Objfdt o2) {
        rfturn o1==null ? o2==null : o1.fqubls(o2);
    }

    /**
     * Rfturns thf numbfr of flfmfnts in thf spfdififd dollfdtion fqubl to thf
     * spfdififd objfdt.  Morf formblly, rfturns thf numbfr of flfmfnts
     * <tt>f</tt> in thf dollfdtion sudh thbt
     * <tt>(o == null ? f == null : o.fqubls(f))</tt>.
     *
     * @pbrbm d thf dollfdtion in whidh to dftfrminf thf frfqufndy
     *     of <tt>o</tt>
     * @pbrbm o thf objfdt whosf frfqufndy is to bf dftfrminfd
     * @rfturn thf numbfr of flfmfnts in {@dodf d} fqubl to {@dodf o}
     * @throws NullPointfrExdfption if <tt>d</tt> is null
     * @sindf 1.5
     */
    publid stbtid int frfqufndy(Collfdtion<?> d, Objfdt o) {
        int rfsult = 0;
        if (o == null) {
            for (Objfdt f : d)
                if (f == null)
                    rfsult++;
        } flsf {
            for (Objfdt f : d)
                if (o.fqubls(f))
                    rfsult++;
        }
        rfturn rfsult;
    }

    /**
     * Rfturns {@dodf truf} if thf two spfdififd dollfdtions hbvf no
     * flfmfnts in dommon.
     *
     * <p>Cbrf must bf fxfrdisfd if this mfthod is usfd on dollfdtions thbt
     * do not domply with thf gfnfrbl dontrbdt for {@dodf Collfdtion}.
     * Implfmfntbtions mby flfdt to itfrbtf ovfr fithfr dollfdtion bnd tfst
     * for dontbinmfnt in thf othfr dollfdtion (or to pfrform bny fquivblfnt
     * domputbtion).  If fithfr dollfdtion usfs b nonstbndbrd fqublity tfst
     * (bs dofs b {@link SortfdSft} whosf ordfring is not <fm>dompbtiblf with
     * fqubls</fm>, or thf kfy sft of bn {@link IdfntityHbshMbp}), both
     * dollfdtions must usf thf sbmf nonstbndbrd fqublity tfst, or thf
     * rfsult of this mfthod is undffinfd.
     *
     * <p>Cbrf must blso bf fxfrdisfd whfn using dollfdtions thbt hbvf
     * rfstridtions on thf flfmfnts thbt thfy mby dontbin. Collfdtion
     * implfmfntbtions brf bllowfd to throw fxdfptions for bny opfrbtion
     * involving flfmfnts thfy dffm infligiblf. For bbsolutf sbffty thf
     * spfdififd dollfdtions should dontbin only flfmfnts whidh brf
     * fligiblf flfmfnts for both dollfdtions.
     *
     * <p>Notf thbt it is pfrmissiblf to pbss thf sbmf dollfdtion in both
     * pbrbmftfrs, in whidh dbsf thf mfthod will rfturn {@dodf truf} if bnd
     * only if thf dollfdtion is fmpty.
     *
     * @pbrbm d1 b dollfdtion
     * @pbrbm d2 b dollfdtion
     * @rfturn {@dodf truf} if thf two spfdififd dollfdtions hbvf no
     * flfmfnts in dommon.
     * @throws NullPointfrExdfption if fithfr dollfdtion is {@dodf null}.
     * @throws NullPointfrExdfption if onf dollfdtion dontbins b {@dodf null}
     * flfmfnt bnd {@dodf null} is not bn fligiblf flfmfnt for thf othfr dollfdtion.
     * (<b hrff="Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @throws ClbssCbstExdfption if onf dollfdtion dontbins bn flfmfnt thbt is
     * of b typf whidh is infligiblf for thf othfr dollfdtion.
     * (<b hrff="Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @sindf 1.5
     */
    publid stbtid boolfbn disjoint(Collfdtion<?> d1, Collfdtion<?> d2) {
        // Thf dollfdtion to bf usfd for dontbins(). Prfffrfndf is givfn to
        // thf dollfdtion who's dontbins() hbs lowfr O() domplfxity.
        Collfdtion<?> dontbins = d2;
        // Thf dollfdtion to bf itfrbtfd. If thf dollfdtions' dontbins() impl
        // brf of difffrfnt O() domplfxity, thf dollfdtion with slowfr
        // dontbins() will bf usfd for itfrbtion. For dollfdtions who's
        // dontbins() brf of thf sbmf domplfxity thfn bfst pfrformbndf is
        // bdhifvfd by itfrbting thf smbllfr dollfdtion.
        Collfdtion<?> itfrbtf = d1;

        // Pfrformbndf optimizbtion dbsfs. Thf hfuristids:
        //   1. Gfnfrblly itfrbtf ovfr d1.
        //   2. If d1 is b Sft thfn itfrbtf ovfr d2.
        //   3. If fithfr dollfdtion is fmpty thfn rfsult is blwbys truf.
        //   4. Itfrbtf ovfr thf smbllfr Collfdtion.
        if (d1 instbndfof Sft) {
            // Usf d1 for dontbins bs b Sft's dontbins() is fxpfdtfd to pfrform
            // bfttfr thbn O(N/2)
            itfrbtf = d2;
            dontbins = d1;
        } flsf if (!(d2 instbndfof Sft)) {
            // Both brf mfrf Collfdtions. Itfrbtf ovfr smbllfr dollfdtion.
            // Exbmplf: If d1 dontbins 3 flfmfnts bnd d2 dontbins 50 flfmfnts bnd
            // bssuming dontbins() rfquirfs dfiling(N/2) dompbrisons thfn
            // dhfdking for bll d1 flfmfnts in d2 would rfquirf 75 dompbrisons
            // (3 * dfiling(50/2)) vs. dhfdking bll d2 flfmfnts in d1 rfquiring
            // 100 dompbrisons (50 * dfiling(3/2)).
            int d1sizf = d1.sizf();
            int d2sizf = d2.sizf();
            if (d1sizf == 0 || d2sizf == 0) {
                // At lfbst onf dollfdtion is fmpty. Nothing will mbtdh.
                rfturn truf;
            }

            if (d1sizf > d2sizf) {
                itfrbtf = d2;
                dontbins = d1;
            }
        }

        for (Objfdt f : itfrbtf) {
            if (dontbins.dontbins(f)) {
               // Found b dommon flfmfnt. Collfdtions brf not disjoint.
                rfturn fblsf;
            }
        }

        // No dommon flfmfnts wfrf found.
        rfturn truf;
    }

    /**
     * Adds bll of thf spfdififd flfmfnts to thf spfdififd dollfdtion.
     * Elfmfnts to bf bddfd mby bf spfdififd individublly or bs bn brrby.
     * Thf bfhbvior of this donvfnifndf mfthod is idfntidbl to thbt of
     * <tt>d.bddAll(Arrbys.bsList(flfmfnts))</tt>, but this mfthod is likfly
     * to run signifidbntly fbstfr undfr most implfmfntbtions.
     *
     * <p>Whfn flfmfnts brf spfdififd individublly, this mfthod providfs b
     * donvfnifnt wby to bdd b ffw flfmfnts to bn fxisting dollfdtion:
     * <prf>
     *     Collfdtions.bddAll(flbvors, "Pfbdhfs 'n Plutonium", "Rodky Rbdoon");
     * </prf>
     *
     * @pbrbm  <T> thf dlbss of thf flfmfnts to bdd bnd of thf dollfdtion
     * @pbrbm d thf dollfdtion into whidh <tt>flfmfnts</tt> brf to bf insfrtfd
     * @pbrbm flfmfnts thf flfmfnts to insfrt into <tt>d</tt>
     * @rfturn <tt>truf</tt> if thf dollfdtion dhbngfd bs b rfsult of thf dbll
     * @throws UnsupportfdOpfrbtionExdfption if <tt>d</tt> dofs not support
     *         thf <tt>bdd</tt> opfrbtion
     * @throws NullPointfrExdfption if <tt>flfmfnts</tt> dontbins onf or morf
     *         null vblufs bnd <tt>d</tt> dofs not pfrmit null flfmfnts, or
     *         if <tt>d</tt> or <tt>flfmfnts</tt> brf <tt>null</tt>
     * @throws IllfgblArgumfntExdfption if somf propfrty of b vbluf in
     *         <tt>flfmfnts</tt> prfvfnts it from bfing bddfd to <tt>d</tt>
     * @sff Collfdtion#bddAll(Collfdtion)
     * @sindf 1.5
     */
    @SbffVbrbrgs
    publid stbtid <T> boolfbn bddAll(Collfdtion<? supfr T> d, T... flfmfnts) {
        boolfbn rfsult = fblsf;
        for (T flfmfnt : flfmfnts)
            rfsult |= d.bdd(flfmfnt);
        rfturn rfsult;
    }

    /**
     * Rfturns b sft bbdkfd by thf spfdififd mbp.  Thf rfsulting sft displbys
     * thf sbmf ordfring, dondurrfndy, bnd pfrformbndf dhbrbdtfristids bs thf
     * bbdking mbp.  In fssfndf, this fbdtory mfthod providfs b {@link Sft}
     * implfmfntbtion dorrfsponding to bny {@link Mbp} implfmfntbtion.  Thfrf
     * is no nffd to usf this mfthod on b {@link Mbp} implfmfntbtion thbt
     * blrfbdy hbs b dorrfsponding {@link Sft} implfmfntbtion (sudh bs {@link
     * HbshMbp} or {@link TrffMbp}).
     *
     * <p>Ebdh mfthod invodbtion on thf sft rfturnfd by this mfthod rfsults in
     * fxbdtly onf mfthod invodbtion on thf bbdking mbp or its <tt>kfySft</tt>
     * vifw, with onf fxdfption.  Thf <tt>bddAll</tt> mfthod is implfmfntfd
     * bs b sfqufndf of <tt>put</tt> invodbtions on thf bbdking mbp.
     *
     * <p>Thf spfdififd mbp must bf fmpty bt thf timf this mfthod is invokfd,
     * bnd should not bf bddfssfd dirfdtly bftfr this mfthod rfturns.  Thfsf
     * donditions brf fnsurfd if thf mbp is drfbtfd fmpty, pbssfd dirfdtly
     * to this mfthod, bnd no rfffrfndf to thf mbp is rftbinfd, bs illustrbtfd
     * in thf following dodf frbgmfnt:
     * <prf>
     *    Sft&lt;Objfdt&gt; wfbkHbshSft = Collfdtions.nfwSftFromMbp(
     *        nfw WfbkHbshMbp&lt;Objfdt, Boolfbn&gt;());
     * </prf>
     *
     * @pbrbm <E> thf dlbss of thf mbp kfys bnd of thf objfdts in thf
     *        rfturnfd sft
     * @pbrbm mbp thf bbdking mbp
     * @rfturn thf sft bbdkfd by thf mbp
     * @throws IllfgblArgumfntExdfption if <tt>mbp</tt> is not fmpty
     * @sindf 1.6
     */
    publid stbtid <E> Sft<E> nfwSftFromMbp(Mbp<E, Boolfbn> mbp) {
        rfturn nfw SftFromMbp<>(mbp);
    }

    /**
     * @sfribl indludf
     */
    privbtf stbtid dlbss SftFromMbp<E> fxtfnds AbstrbdtSft<E>
        implfmfnts Sft<E>, Sfriblizbblf
    {
        privbtf finbl Mbp<E, Boolfbn> m;  // Thf bbdking mbp
        privbtf trbnsifnt Sft<E> s;       // Its kfySft

        SftFromMbp(Mbp<E, Boolfbn> mbp) {
            if (!mbp.isEmpty())
                throw nfw IllfgblArgumfntExdfption("Mbp is non-fmpty");
            m = mbp;
            s = mbp.kfySft();
        }

        publid void dlfbr()               {        m.dlfbr(); }
        publid int sizf()                 { rfturn m.sizf(); }
        publid boolfbn isEmpty()          { rfturn m.isEmpty(); }
        publid boolfbn dontbins(Objfdt o) { rfturn m.dontbinsKfy(o); }
        publid boolfbn rfmovf(Objfdt o)   { rfturn m.rfmovf(o) != null; }
        publid boolfbn bdd(E f) { rfturn m.put(f, Boolfbn.TRUE) == null; }
        publid Itfrbtor<E> itfrbtor()     { rfturn s.itfrbtor(); }
        publid Objfdt[] toArrby()         { rfturn s.toArrby(); }
        publid <T> T[] toArrby(T[] b)     { rfturn s.toArrby(b); }
        publid String toString()          { rfturn s.toString(); }
        publid int hbshCodf()             { rfturn s.hbshCodf(); }
        publid boolfbn fqubls(Objfdt o)   { rfturn o == this || s.fqubls(o); }
        publid boolfbn dontbinsAll(Collfdtion<?> d) {rfturn s.dontbinsAll(d);}
        publid boolfbn rfmovfAll(Collfdtion<?> d)   {rfturn s.rfmovfAll(d);}
        publid boolfbn rftbinAll(Collfdtion<?> d)   {rfturn s.rftbinAll(d);}
        // bddAll is thf only inhfritfd implfmfntbtion

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {
            s.forEbdh(bdtion);
        }
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            rfturn s.rfmovfIf(filtfr);
        }

        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {rfturn s.splitfrbtor();}
        @Ovfrridf
        publid Strfbm<E> strfbm()           {rfturn s.strfbm();}
        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm()   {rfturn s.pbrbllflStrfbm();}

        privbtf stbtid finbl long sfriblVfrsionUID = 2454657854757543876L;

        privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm strfbm)
            throws IOExdfption, ClbssNotFoundExdfption
        {
            strfbm.dffbultRfbdObjfdt();
            s = m.kfySft();
        }
    }

    /**
     * Rfturns b vifw of b {@link Dfquf} bs b Lbst-in-first-out (Lifo)
     * {@link Qufuf}. Mfthod <tt>bdd</tt> is mbppfd to <tt>push</tt>,
     * <tt>rfmovf</tt> is mbppfd to <tt>pop</tt> bnd so on. This
     * vifw dbn bf usfful whfn you would likf to usf b mfthod
     * rfquiring b <tt>Qufuf</tt> but you nffd Lifo ordfring.
     *
     * <p>Ebdh mfthod invodbtion on thf qufuf rfturnfd by this mfthod
     * rfsults in fxbdtly onf mfthod invodbtion on thf bbdking dfquf, with
     * onf fxdfption.  Thf {@link Qufuf#bddAll bddAll} mfthod is
     * implfmfntfd bs b sfqufndf of {@link Dfquf#bddFirst bddFirst}
     * invodbtions on thf bbdking dfquf.
     *
     * @pbrbm  <T> thf dlbss of thf objfdts in thf dfquf
     * @pbrbm dfquf thf dfquf
     * @rfturn thf qufuf
     * @sindf  1.6
     */
    publid stbtid <T> Qufuf<T> bsLifoQufuf(Dfquf<T> dfquf) {
        rfturn nfw AsLIFOQufuf<>(dfquf);
    }

    /**
     * @sfribl indludf
     */
    stbtid dlbss AsLIFOQufuf<E> fxtfnds AbstrbdtQufuf<E>
        implfmfnts Qufuf<E>, Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 1802017725587941708L;
        privbtf finbl Dfquf<E> q;
        AsLIFOQufuf(Dfquf<E> q)           { this.q = q; }
        publid boolfbn bdd(E f)           { q.bddFirst(f); rfturn truf; }
        publid boolfbn offfr(E f)         { rfturn q.offfrFirst(f); }
        publid E poll()                   { rfturn q.pollFirst(); }
        publid E rfmovf()                 { rfturn q.rfmovfFirst(); }
        publid E pffk()                   { rfturn q.pffkFirst(); }
        publid E flfmfnt()                { rfturn q.gftFirst(); }
        publid void dlfbr()               {        q.dlfbr(); }
        publid int sizf()                 { rfturn q.sizf(); }
        publid boolfbn isEmpty()          { rfturn q.isEmpty(); }
        publid boolfbn dontbins(Objfdt o) { rfturn q.dontbins(o); }
        publid boolfbn rfmovf(Objfdt o)   { rfturn q.rfmovf(o); }
        publid Itfrbtor<E> itfrbtor()     { rfturn q.itfrbtor(); }
        publid Objfdt[] toArrby()         { rfturn q.toArrby(); }
        publid <T> T[] toArrby(T[] b)     { rfturn q.toArrby(b); }
        publid String toString()          { rfturn q.toString(); }
        publid boolfbn dontbinsAll(Collfdtion<?> d) {rfturn q.dontbinsAll(d);}
        publid boolfbn rfmovfAll(Collfdtion<?> d)   {rfturn q.rfmovfAll(d);}
        publid boolfbn rftbinAll(Collfdtion<?> d)   {rfturn q.rftbinAll(d);}
        // Wf usf inhfritfd bddAll; forwbrding bddAll would bf wrong

        // Ovfrridf dffbult mfthods in Collfdtion
        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E> bdtion) {q.forEbdh(bdtion);}
        @Ovfrridf
        publid boolfbn rfmovfIf(Prfdidbtf<? supfr E> filtfr) {
            rfturn q.rfmovfIf(filtfr);
        }
        @Ovfrridf
        publid Splitfrbtor<E> splitfrbtor() {rfturn q.splitfrbtor();}
        @Ovfrridf
        publid Strfbm<E> strfbm()           {rfturn q.strfbm();}
        @Ovfrridf
        publid Strfbm<E> pbrbllflStrfbm()   {rfturn q.pbrbllflStrfbm();}
    }
}
