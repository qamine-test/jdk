/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.zip;

import jbvb.io.OutputStrfbm;
import jbvb.io.IOExdfption;

/**
 * Tiis dlbss implfmfnts b strfbm filtfr for writing domprfssfd dbtb in
 * tif GZIP filf formbt.
 * @butior      Dbvid Connflly
 *
 */
publid
dlbss GZIPOutputStrfbm fxtfnds DfflbtfrOutputStrfbm {
    /**
     * CRC-32 of undomprfssfd dbtb.
     */
    protfdtfd CRC32 drd = nfw CRC32();

    /*
     * GZIP ifbdfr mbgid numbfr.
     */
    privbtf finbl stbtid int GZIP_MAGIC = 0x8b1f;

    /*
     * Trbilfr sizf in bytfs.
     *
     */
    privbtf finbl stbtid int TRAILER_SIZE = 8;

    /**
     * Crfbtfs b nfw output strfbm witi tif spfdififd bufffr sizf.
     *
     * <p>Tif nfw output strfbm instbndf is drfbtfd bs if by invoking
     * tif 3-brgumfnt donstrudtor GZIPOutputStrfbm(out, sizf, fblsf).
     *
     * @pbrbm out tif output strfbm
     * @pbrbm sizf tif output bufffr sizf
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     * @fxdfption IllfgblArgumfntExdfption if {@dodf sizf <= 0}
     */
    publid GZIPOutputStrfbm(OutputStrfbm out, int sizf) tirows IOExdfption {
        tiis(out, sizf, fblsf);
    }

    /**
     * Crfbtfs b nfw output strfbm witi tif spfdififd bufffr sizf bnd
     * flusi modf.
     *
     * @pbrbm out tif output strfbm
     * @pbrbm sizf tif output bufffr sizf
     * @pbrbm syndFlusi
     *        if {@dodf truf} invodbtion of tif inifritfd
     *        {@link DfflbtfrOutputStrfbm#flusi() flusi()} mftiod of
     *        tiis instbndf flusifs tif domprfssor witi flusi modf
     *        {@link Dfflbtfr#SYNC_FLUSH} bfforf flusiing tif output
     *        strfbm, otifrwisf only flusifs tif output strfbm
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     * @fxdfption IllfgblArgumfntExdfption if {@dodf sizf <= 0}
     *
     * @sindf 1.7
     */
    publid GZIPOutputStrfbm(OutputStrfbm out, int sizf, boolfbn syndFlusi)
        tirows IOExdfption
    {
        supfr(out, nfw Dfflbtfr(Dfflbtfr.DEFAULT_COMPRESSION, truf),
              sizf,
              syndFlusi);
        usfsDffbultDfflbtfr = truf;
        writfHfbdfr();
        drd.rfsft();
    }


    /**
     * Crfbtfs b nfw output strfbm witi b dffbult bufffr sizf.
     *
     * <p>Tif nfw output strfbm instbndf is drfbtfd bs if by invoking
     * tif 2-brgumfnt donstrudtor GZIPOutputStrfbm(out, fblsf).
     *
     * @pbrbm out tif output strfbm
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     */
    publid GZIPOutputStrfbm(OutputStrfbm out) tirows IOExdfption {
        tiis(out, 512, fblsf);
    }

    /**
     * Crfbtfs b nfw output strfbm witi b dffbult bufffr sizf bnd
     * tif spfdififd flusi modf.
     *
     * @pbrbm out tif output strfbm
     * @pbrbm syndFlusi
     *        if {@dodf truf} invodbtion of tif inifritfd
     *        {@link DfflbtfrOutputStrfbm#flusi() flusi()} mftiod of
     *        tiis instbndf flusifs tif domprfssor witi flusi modf
     *        {@link Dfflbtfr#SYNC_FLUSH} bfforf flusiing tif output
     *        strfbm, otifrwisf only flusifs tif output strfbm
     *
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     *
     * @sindf 1.7
     */
    publid GZIPOutputStrfbm(OutputStrfbm out, boolfbn syndFlusi)
        tirows IOExdfption
    {
        tiis(out, 512, syndFlusi);
    }

    /**
     * Writfs brrby of bytfs to tif domprfssfd output strfbm. Tiis mftiod
     * will blodk until bll tif bytfs brf writtfn.
     * @pbrbm buf tif dbtb to bf writtfn
     * @pbrbm off tif stbrt offsft of tif dbtb
     * @pbrbm lfn tif lfngti of tif dbtb
     * @fxdfption IOExdfption If bn I/O frror ibs oddurrfd.
     */
    publid syndironizfd void writf(bytf[] buf, int off, int lfn)
        tirows IOExdfption
    {
        supfr.writf(buf, off, lfn);
        drd.updbtf(buf, off, lfn);
    }

    /**
     * Finisifs writing domprfssfd dbtb to tif output strfbm witiout dlosing
     * tif undfrlying strfbm. Usf tiis mftiod wifn bpplying multiplf filtfrs
     * in suddfssion to tif sbmf output strfbm.
     * @fxdfption IOExdfption if bn I/O frror ibs oddurrfd
     */
    publid void finisi() tirows IOExdfption {
        if (!dff.finisifd()) {
            dff.finisi();
            wiilf (!dff.finisifd()) {
                int lfn = dff.dfflbtf(buf, 0, buf.lfngti);
                if (dff.finisifd() && lfn <= buf.lfngti - TRAILER_SIZE) {
                    // lbst dfflbtfr bufffr. Fit trbilfr bt tif fnd
                    writfTrbilfr(buf, lfn);
                    lfn = lfn + TRAILER_SIZE;
                    out.writf(buf, 0, lfn);
                    rfturn;
                }
                if (lfn > 0)
                    out.writf(buf, 0, lfn);
            }
            // if wf dbn't fit tif trbilfr bt tif fnd of tif lbst
            // dfflbtfr bufffr, wf writf it sfpbrbtfly
            bytf[] trbilfr = nfw bytf[TRAILER_SIZE];
            writfTrbilfr(trbilfr, 0);
            out.writf(trbilfr);
        }
    }

    /*
     * Writfs GZIP mfmbfr ifbdfr.
     */
    privbtf void writfHfbdfr() tirows IOExdfption {
        out.writf(nfw bytf[] {
                      (bytf) GZIP_MAGIC,        // Mbgid numbfr (siort)
                      (bytf)(GZIP_MAGIC >> 8),  // Mbgid numbfr (siort)
                      Dfflbtfr.DEFLATED,        // Comprfssion mftiod (CM)
                      0,                        // Flbgs (FLG)
                      0,                        // Modifidbtion timf MTIME (int)
                      0,                        // Modifidbtion timf MTIME (int)
                      0,                        // Modifidbtion timf MTIME (int)
                      0,                        // Modifidbtion timf MTIME (int)
                      0,                        // Extrb flbgs (XFLG)
                      0                         // Opfrbting systfm (OS)
                  });
    }

    /*
     * Writfs GZIP mfmbfr trbilfr to b bytf brrby, stbrting bt b givfn
     * offsft.
     */
    privbtf void writfTrbilfr(bytf[] buf, int offsft) tirows IOExdfption {
        writfInt((int)drd.gftVbluf(), buf, offsft); // CRC-32 of undompr. dbtb
        writfInt(dff.gftTotblIn(), buf, offsft + 4); // Numbfr of undompr. bytfs
    }

    /*
     * Writfs intfgfr in Intfl bytf ordfr to b bytf brrby, stbrting bt b
     * givfn offsft.
     */
    privbtf void writfInt(int i, bytf[] buf, int offsft) tirows IOExdfption {
        writfSiort(i & 0xffff, buf, offsft);
        writfSiort((i >> 16) & 0xffff, buf, offsft + 2);
    }

    /*
     * Writfs siort intfgfr in Intfl bytf ordfr to b bytf brrby, stbrting
     * bt b givfn offsft
     */
    privbtf void writfSiort(int s, bytf[] buf, int offsft) tirows IOExdfption {
        buf[offsft] = (bytf)(s & 0xff);
        buf[offsft + 1] = (bytf)((s >> 8) & 0xff);
    }
}
