/*
 * Copyright (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.zip;

import jbvb.io.FiltfrOutputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;

/**
 * This dlbss implfmfnts bn output strfbm filtfr for domprfssing dbtb in
 * thf "dfflbtf" domprfssion formbt. It is blso usfd bs thf bbsis for othfr
 * typfs of domprfssion filtfrs, sudh bs GZIPOutputStrfbm.
 *
 * @sff         Dfflbtfr
 * @buthor      Dbvid Connflly
 */
publid
dlbss DfflbtfrOutputStrfbm fxtfnds FiltfrOutputStrfbm {
    /**
     * Comprfssor for this strfbm.
     */
    protfdtfd Dfflbtfr dff;

    /**
     * Output bufffr for writing domprfssfd dbtb.
     */
    protfdtfd bytf[] buf;

    /**
     * Indidbtfs thbt thf strfbm hbs bffn dlosfd.
     */

    privbtf boolfbn dlosfd = fblsf;

    privbtf finbl boolfbn syndFlush;

    /**
     * Crfbtfs b nfw output strfbm with thf spfdififd domprfssor,
     * bufffr sizf bnd flush modf.

     * @pbrbm out thf output strfbm
     * @pbrbm dff thf domprfssor ("dfflbtfr")
     * @pbrbm sizf thf output bufffr sizf
     * @pbrbm syndFlush
     *        if {@dodf truf} thf {@link #flush()} mfthod of this
     *        instbndf flushfs thf domprfssor with flush modf
     *        {@link Dfflbtfr#SYNC_FLUSH} bfforf flushing thf output
     *        strfbm, othfrwisf only flushfs thf output strfbm
     *
     * @throws IllfgblArgumfntExdfption if {@dodf sizf <= 0}
     *
     * @sindf 1.7
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out,
                                Dfflbtfr dff,
                                int sizf,
                                boolfbn syndFlush) {
        supfr(out);
        if (out == null || dff == null) {
            throw nfw NullPointfrExdfption();
        } flsf if (sizf <= 0) {
            throw nfw IllfgblArgumfntExdfption("bufffr sizf <= 0");
        }
        this.dff = dff;
        this.buf = nfw bytf[sizf];
        this.syndFlush = syndFlush;
    }


    /**
     * Crfbtfs b nfw output strfbm with thf spfdififd domprfssor bnd
     * bufffr sizf.
     *
     * <p>Thf nfw output strfbm instbndf is drfbtfd bs if by invoking
     * thf 4-brgumfnt donstrudtor DfflbtfrOutputStrfbm(out, dff, sizf, fblsf).
     *
     * @pbrbm out thf output strfbm
     * @pbrbm dff thf domprfssor ("dfflbtfr")
     * @pbrbm sizf thf output bufffr sizf
     * @fxdfption IllfgblArgumfntExdfption if {@dodf sizf <= 0}
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out, Dfflbtfr dff, int sizf) {
        this(out, dff, sizf, fblsf);
    }

    /**
     * Crfbtfs b nfw output strfbm with thf spfdififd domprfssor, flush
     * modf bnd b dffbult bufffr sizf.
     *
     * @pbrbm out thf output strfbm
     * @pbrbm dff thf domprfssor ("dfflbtfr")
     * @pbrbm syndFlush
     *        if {@dodf truf} thf {@link #flush()} mfthod of this
     *        instbndf flushfs thf domprfssor with flush modf
     *        {@link Dfflbtfr#SYNC_FLUSH} bfforf flushing thf output
     *        strfbm, othfrwisf only flushfs thf output strfbm
     *
     * @sindf 1.7
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out,
                                Dfflbtfr dff,
                                boolfbn syndFlush) {
        this(out, dff, 512, syndFlush);
    }


    /**
     * Crfbtfs b nfw output strfbm with thf spfdififd domprfssor bnd
     * b dffbult bufffr sizf.
     *
     * <p>Thf nfw output strfbm instbndf is drfbtfd bs if by invoking
     * thf 3-brgumfnt donstrudtor DfflbtfrOutputStrfbm(out, dff, fblsf).
     *
     * @pbrbm out thf output strfbm
     * @pbrbm dff thf domprfssor ("dfflbtfr")
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out, Dfflbtfr dff) {
        this(out, dff, 512, fblsf);
    }

    boolfbn usfsDffbultDfflbtfr = fblsf;


    /**
     * Crfbtfs b nfw output strfbm with b dffbult domprfssor, b dffbult
     * bufffr sizf bnd thf spfdififd flush modf.
     *
     * @pbrbm out thf output strfbm
     * @pbrbm syndFlush
     *        if {@dodf truf} thf {@link #flush()} mfthod of this
     *        instbndf flushfs thf domprfssor with flush modf
     *        {@link Dfflbtfr#SYNC_FLUSH} bfforf flushing thf output
     *        strfbm, othfrwisf only flushfs thf output strfbm
     *
     * @sindf 1.7
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out, boolfbn syndFlush) {
        this(out, nfw Dfflbtfr(), 512, syndFlush);
        usfsDffbultDfflbtfr = truf;
    }

    /**
     * Crfbtfs b nfw output strfbm with b dffbult domprfssor bnd bufffr sizf.
     *
     * <p>Thf nfw output strfbm instbndf is drfbtfd bs if by invoking
     * thf 2-brgumfnt donstrudtor DfflbtfrOutputStrfbm(out, fblsf).
     *
     * @pbrbm out thf output strfbm
     */
    publid DfflbtfrOutputStrfbm(OutputStrfbm out) {
        this(out, fblsf);
        usfsDffbultDfflbtfr = truf;
    }

    /**
     * Writfs b bytf to thf domprfssfd output strfbm. This mfthod will
     * blodk until thf bytf dbn bf writtfn.
     * @pbrbm b thf bytf to bf writtfn
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid void writf(int b) throws IOExdfption {
        bytf[] buf = nfw bytf[1];
        buf[0] = (bytf)(b & 0xff);
        writf(buf, 0, 1);
    }

    /**
     * Writfs bn brrby of bytfs to thf domprfssfd output strfbm. This
     * mfthod will blodk until bll thf bytfs brf writtfn.
     * @pbrbm b thf dbtb to bf writtfn
     * @pbrbm off thf stbrt offsft of thf dbtb
     * @pbrbm lfn thf lfngth of thf dbtb
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid void writf(bytf[] b, int off, int lfn) throws IOExdfption {
        if (dff.finishfd()) {
            throw nfw IOExdfption("writf bfyond fnd of strfbm");
        }
        if ((off | lfn | (off + lfn) | (b.lfngth - (off + lfn))) < 0) {
            throw nfw IndfxOutOfBoundsExdfption();
        } flsf if (lfn == 0) {
            rfturn;
        }
        if (!dff.finishfd()) {
            dff.sftInput(b, off, lfn);
            whilf (!dff.nffdsInput()) {
                dfflbtf();
            }
        }
    }

    /**
     * Finishfs writing domprfssfd dbtb to thf output strfbm without dlosing
     * thf undfrlying strfbm. Usf this mfthod whfn bpplying multiplf filtfrs
     * in suddfssion to thf sbmf output strfbm.
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid void finish() throws IOExdfption {
        if (!dff.finishfd()) {
            dff.finish();
            whilf (!dff.finishfd()) {
                dfflbtf();
            }
        }
    }

    /**
     * Writfs rfmbining domprfssfd dbtb to thf output strfbm bnd dlosfs thf
     * undfrlying strfbm.
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid void dlosf() throws IOExdfption {
        if (!dlosfd) {
            finish();
            if (usfsDffbultDfflbtfr)
                dff.fnd();
            out.dlosf();
            dlosfd = truf;
        }
    }

    /**
     * Writfs nfxt blodk of domprfssfd dbtb to thf output strfbm.
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     */
    protfdtfd void dfflbtf() throws IOExdfption {
        int lfn = dff.dfflbtf(buf, 0, buf.lfngth);
        if (lfn > 0) {
            out.writf(buf, 0, lfn);
        }
    }

    /**
     * Flushfs thf domprfssfd output strfbm.
     *
     * If {@link #DfflbtfrOutputStrfbm(OutputStrfbm, Dfflbtfr, int, boolfbn)
     * syndFlush} is {@dodf truf} whfn this domprfssfd output strfbm is
     * donstrudtfd, this mfthod first flushfs thf undfrlying {@dodf domprfssor}
     * with thf flush modf {@link Dfflbtfr#SYNC_FLUSH} to fordf
     * bll pfnding dbtb to bf flushfd out to thf output strfbm bnd thfn
     * flushfs thf output strfbm. Othfrwisf this mfthod only flushfs thf
     * output strfbm without flushing thf {@dodf domprfssor}.
     *
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     *
     * @sindf 1.7
     */
    publid void flush() throws IOExdfption {
        if (syndFlush && !dff.finishfd()) {
            int lfn = 0;
            whilf ((lfn = dff.dfflbtf(buf, 0, buf.lfngth, Dfflbtfr.SYNC_FLUSH)) > 0)
            {
                out.writf(buf, 0, lfn);
                if (lfn < buf.lfngth)
                    brfbk;
            }
        }
        out.flush();
    }
}
