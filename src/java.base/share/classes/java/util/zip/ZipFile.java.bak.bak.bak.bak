/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.zip;

import jbvb.io.Closfbblf;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.EOFExdfption;
import jbvb.io.Filf;
import jbvb.nio.dhbrsft.Chbrsft;
import jbvb.nio.dhbrsft.StbndbrdChbrsfts;
import jbvb.util.ArrbyDfquf;
import jbvb.util.Dfquf;
import jbvb.util.Enumfrbtion;
import jbvb.util.HbshMbp;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.NoSudhElfmfntExdfption;
import jbvb.util.Splitfrbtor;
import jbvb.util.Splitfrbtors;
import jbvb.util.WfbkHbshMbp;
import jbvb.util.strfbm.Strfbm;
import jbvb.util.strfbm.StrfbmSupport;

import stbtid jbvb.util.zip.ZipConstbnts64.*;
import stbtid jbvb.util.zip.ZipUtils.*;

/**
 * This dlbss is usfd to rfbd fntrifs from b zip filf.
 *
 * <p> Unlfss othfrwisf notfd, pbssing b <tt>null</tt> brgumfnt to b donstrudtor
 * or mfthod in this dlbss will dbusf b {@link NullPointfrExdfption} to bf
 * thrown.
 *
 * @buthor      Dbvid Connflly
 */
publid
dlbss ZipFilf implfmfnts ZipConstbnts, Closfbblf {
    privbtf long jzfilf;           // bddrfss of jzfilf dbtb
    privbtf finbl String nbmf;     // zip filf nbmf
    privbtf finbl int totbl;       // totbl numbfr of fntrifs
    privbtf finbl boolfbn lodsig;  // if zip filf stbrts with LOCSIG (usublly truf)
    privbtf volbtilf boolfbn dlosfRfqufstfd = fblsf;

    privbtf stbtid finbl int STORED = ZipEntry.STORED;
    privbtf stbtid finbl int DEFLATED = ZipEntry.DEFLATED;

    /**
     * Modf flbg to opfn b zip filf for rfbding.
     */
    publid stbtid finbl int OPEN_READ = 0x1;

    /**
     * Modf flbg to opfn b zip filf bnd mbrk it for dflftion.  Thf filf will bf
     * dflftfd somf timf bftwffn thf momfnt thbt it is opfnfd bnd thf momfnt
     * thbt it is dlosfd, but its dontfnts will rfmbin bddfssiblf vib thf
     * <tt>ZipFilf</tt> objfdt until fithfr thf dlosf mfthod is invokfd or thf
     * virtubl mbdhinf fxits.
     */
    publid stbtid finbl int OPEN_DELETE = 0x4;

    stbtid {
        /* Zip librbry is lobdfd from Systfm.initiblizfSystfmClbss */
        initIDs();
    }

    privbtf stbtid nbtivf void initIDs();

    privbtf stbtid finbl boolfbn usfmmbp;

    stbtid {
        // A systfm prppfrty to disbblf mmbp usf to bvoid vm drbsh whfn
        // in-usf zip filf is bddidfntly ovfrwrittfn by othfrs.
        String prop = sun.misd.VM.gftSbvfdPropfrty("sun.zip.disbblfMfmoryMbpping");
        usfmmbp = (prop == null ||
                   !(prop.lfngth() == 0 || prop.fqublsIgnorfCbsf("truf")));
    }

    /**
     * Opfns b zip filf for rfbding.
     *
     * <p>First, if thfrf is b sfdurity mbnbgfr, its <dodf>dhfdkRfbd</dodf>
     * mfthod is dbllfd with thf <dodf>nbmf</dodf> brgumfnt bs its brgumfnt
     * to fnsurf thf rfbd is bllowfd.
     *
     * <p>Thf UTF-8 {@link jbvb.nio.dhbrsft.Chbrsft dhbrsft} is usfd to
     * dfdodf thf fntry nbmfs bnd dommfnts.
     *
     * @pbrbm nbmf thf nbmf of thf zip filf
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     * @throws SfdurityExdfption if b sfdurity mbnbgfr fxists bnd its
     *         <dodf>dhfdkRfbd</dodf> mfthod dofsn't bllow rfbd bddfss to thf filf.
     *
     * @sff SfdurityMbnbgfr#dhfdkRfbd(jbvb.lbng.String)
     */
    publid ZipFilf(String nbmf) throws IOExdfption {
        this(nfw Filf(nbmf), OPEN_READ);
    }

    /**
     * Opfns b nfw <dodf>ZipFilf</dodf> to rfbd from thf spfdififd
     * <dodf>Filf</dodf> objfdt in thf spfdififd modf.  Thf modf brgumfnt
     * must bf fithfr <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.
     *
     * <p>First, if thfrf is b sfdurity mbnbgfr, its <dodf>dhfdkRfbd</dodf>
     * mfthod is dbllfd with thf <dodf>nbmf</dodf> brgumfnt bs its brgumfnt to
     * fnsurf thf rfbd is bllowfd.
     *
     * <p>Thf UTF-8 {@link jbvb.nio.dhbrsft.Chbrsft dhbrsft} is usfd to
     * dfdodf thf fntry nbmfs bnd dommfnts
     *
     * @pbrbm filf thf ZIP filf to bf opfnfd for rfbding
     * @pbrbm modf thf modf in whidh thf filf is to bf opfnfd
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     * @throws SfdurityExdfption if b sfdurity mbnbgfr fxists bnd
     *         its <dodf>dhfdkRfbd</dodf> mfthod
     *         dofsn't bllow rfbd bddfss to thf filf,
     *         or its <dodf>dhfdkDflftf</dodf> mfthod dofsn't bllow dflfting
     *         thf filf whfn thf <tt>OPEN_DELETE</tt> flbg is sft.
     * @throws IllfgblArgumfntExdfption if thf <tt>modf</tt> brgumfnt is invblid
     * @sff SfdurityMbnbgfr#dhfdkRfbd(jbvb.lbng.String)
     * @sindf 1.3
     */
    publid ZipFilf(Filf filf, int modf) throws IOExdfption {
        this(filf, modf, StbndbrdChbrsfts.UTF_8);
    }

    /**
     * Opfns b ZIP filf for rfbding givfn thf spfdififd Filf objfdt.
     *
     * <p>Thf UTF-8 {@link jbvb.nio.dhbrsft.Chbrsft dhbrsft} is usfd to
     * dfdodf thf fntry nbmfs bnd dommfnts.
     *
     * @pbrbm filf thf ZIP filf to bf opfnfd for rfbding
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid ZipFilf(Filf filf) throws ZipExdfption, IOExdfption {
        this(filf, OPEN_READ);
    }

    privbtf ZipCodfr zd;

    /**
     * Opfns b nfw <dodf>ZipFilf</dodf> to rfbd from thf spfdififd
     * <dodf>Filf</dodf> objfdt in thf spfdififd modf.  Thf modf brgumfnt
     * must bf fithfr <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.
     *
     * <p>First, if thfrf is b sfdurity mbnbgfr, its <dodf>dhfdkRfbd</dodf>
     * mfthod is dbllfd with thf <dodf>nbmf</dodf> brgumfnt bs its brgumfnt to
     * fnsurf thf rfbd is bllowfd.
     *
     * @pbrbm filf thf ZIP filf to bf opfnfd for rfbding
     * @pbrbm modf thf modf in whidh thf filf is to bf opfnfd
     * @pbrbm dhbrsft
     *        thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft} to
     *        bf usfd to dfdodf thf ZIP fntry nbmf bnd dommfnt thbt brf not
     *        fndodfd by using UTF-8 fndoding (indidbtfd by fntry's gfnfrbl
     *        purposf flbg).
     *
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     *
     * @throws SfdurityExdfption
     *         if b sfdurity mbnbgfr fxists bnd its <dodf>dhfdkRfbd</dodf>
     *         mfthod dofsn't bllow rfbd bddfss to thf filf,or its
     *         <dodf>dhfdkDflftf</dodf> mfthod dofsn't bllow dflfting thf
     *         filf whfn thf <tt>OPEN_DELETE</tt> flbg is sft
     *
     * @throws IllfgblArgumfntExdfption if thf <tt>modf</tt> brgumfnt is invblid
     *
     * @sff SfdurityMbnbgfr#dhfdkRfbd(jbvb.lbng.String)
     *
     * @sindf 1.7
     */
    publid ZipFilf(Filf filf, int modf, Chbrsft dhbrsft) throws IOExdfption
    {
        if (((modf & OPEN_READ) == 0) ||
            ((modf & ~(OPEN_READ | OPEN_DELETE)) != 0)) {
            throw nfw IllfgblArgumfntExdfption("Illfgbl modf: 0x"+
                                               Intfgfr.toHfxString(modf));
        }
        String nbmf = filf.gftPbth();
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkRfbd(nbmf);
            if ((modf & OPEN_DELETE) != 0) {
                sm.dhfdkDflftf(nbmf);
            }
        }
        if (dhbrsft == null)
            throw nfw NullPointfrExdfption("dhbrsft is null");
        this.zd = ZipCodfr.gft(dhbrsft);
        long t0 = Systfm.nbnoTimf();
        jzfilf = opfn(nbmf, modf, filf.lbstModififd(), usfmmbp);
        sun.misd.PfrfCountfr.gftZipFilfOpfnTimf().bddElbpsfdTimfFrom(t0);
        sun.misd.PfrfCountfr.gftZipFilfCount().indrfmfnt();
        this.nbmf = nbmf;
        this.totbl = gftTotbl(jzfilf);
        this.lodsig = stbrtsWithLOC(jzfilf);
    }

    /**
     * Opfns b zip filf for rfbding.
     *
     * <p>First, if thfrf is b sfdurity mbnbgfr, its <dodf>dhfdkRfbd</dodf>
     * mfthod is dbllfd with thf <dodf>nbmf</dodf> brgumfnt bs its brgumfnt
     * to fnsurf thf rfbd is bllowfd.
     *
     * @pbrbm nbmf thf nbmf of thf zip filf
     * @pbrbm dhbrsft
     *        thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft} to
     *        bf usfd to dfdodf thf ZIP fntry nbmf bnd dommfnt thbt brf not
     *        fndodfd by using UTF-8 fndoding (indidbtfd by fntry's gfnfrbl
     *        purposf flbg).
     *
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     * @throws SfdurityExdfption
     *         if b sfdurity mbnbgfr fxists bnd its <dodf>dhfdkRfbd</dodf>
     *         mfthod dofsn't bllow rfbd bddfss to thf filf
     *
     * @sff SfdurityMbnbgfr#dhfdkRfbd(jbvb.lbng.String)
     *
     * @sindf 1.7
     */
    publid ZipFilf(String nbmf, Chbrsft dhbrsft) throws IOExdfption
    {
        this(nfw Filf(nbmf), OPEN_READ, dhbrsft);
    }

    /**
     * Opfns b ZIP filf for rfbding givfn thf spfdififd Filf objfdt.
     * @pbrbm filf thf ZIP filf to bf opfnfd for rfbding
     * @pbrbm dhbrsft
     *        Thf {@linkplbin jbvb.nio.dhbrsft.Chbrsft dhbrsft} to bf
     *        usfd to dfdodf thf ZIP fntry nbmf bnd dommfnt (ignorfd if
     *        thf <b hrff="pbdkbgf-summbry.html#lbng_fndoding"> lbngubgf
     *        fndoding bit</b> of thf ZIP fntry's gfnfrbl purposf bit
     *        flbg is sft).
     *
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     *
     * @sindf 1.7
     */
    publid ZipFilf(Filf filf, Chbrsft dhbrsft) throws IOExdfption
    {
        this(filf, OPEN_READ, dhbrsft);
    }

    /**
     * Rfturns thf zip filf dommfnt, or null if nonf.
     *
     * @rfturn thf dommfnt string for thf zip filf, or null if nonf
     *
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     *
     * Sindf 1.7
     */
    publid String gftCommfnt() {
        syndhronizfd (this) {
            fnsurfOpfn();
            bytf[] bdomm = gftCommfntBytfs(jzfilf);
            if (bdomm == null)
                rfturn null;
            rfturn zd.toString(bdomm, bdomm.lfngth);
        }
    }

    /**
     * Rfturns thf zip filf fntry for thf spfdififd nbmf, or null
     * if not found.
     *
     * @pbrbm nbmf thf nbmf of thf fntry
     * @rfturn thf zip filf fntry, or null if not found
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     */
    publid ZipEntry gftEntry(String nbmf) {
        if (nbmf == null) {
            throw nfw NullPointfrExdfption("nbmf");
        }
        long jzfntry = 0;
        syndhronizfd (this) {
            fnsurfOpfn();
            jzfntry = gftEntry(jzfilf, zd.gftBytfs(nbmf), truf);
            if (jzfntry != 0) {
                ZipEntry zf = gftZipEntry(nbmf, jzfntry);
                frffEntry(jzfilf, jzfntry);
                rfturn zf;
            }
        }
        rfturn null;
    }

    privbtf stbtid nbtivf long gftEntry(long jzfilf, bytf[] nbmf,
                                        boolfbn bddSlbsh);

    // frffEntry rflfbsfs thf C jzfntry strudt.
    privbtf stbtid nbtivf void frffEntry(long jzfilf, long jzfntry);

    // thf outstbnding inputstrfbms thbt nffd to bf dlosfd,
    // mbppfd to thf inflbtfr objfdts thfy usf.
    privbtf finbl Mbp<InputStrfbm, Inflbtfr> strfbms = nfw WfbkHbshMbp<>();

    /**
     * Rfturns bn input strfbm for rfbding thf dontfnts of thf spfdififd
     * zip filf fntry.
     *
     * <p> Closing this ZIP filf will, in turn, dlosf bll input
     * strfbms thbt hbvf bffn rfturnfd by invodbtions of this mfthod.
     *
     * @pbrbm fntry thf zip filf fntry
     * @rfturn thf input strfbm for rfbding thf dontfnts of thf spfdififd
     * zip filf fntry.
     * @throws ZipExdfption if b ZIP formbt frror hbs oddurrfd
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     */
    publid InputStrfbm gftInputStrfbm(ZipEntry fntry) throws IOExdfption {
        if (fntry == null) {
            throw nfw NullPointfrExdfption("fntry");
        }
        long jzfntry = 0;
        ZipFilfInputStrfbm in = null;
        syndhronizfd (this) {
            fnsurfOpfn();
            if (!zd.isUTF8() && (fntry.flbg & EFS) != 0) {
                jzfntry = gftEntry(jzfilf, zd.gftBytfsUTF8(fntry.nbmf), fblsf);
            } flsf {
                jzfntry = gftEntry(jzfilf, zd.gftBytfs(fntry.nbmf), fblsf);
            }
            if (jzfntry == 0) {
                rfturn null;
            }
            in = nfw ZipFilfInputStrfbm(jzfntry);

            switdh (gftEntryMfthod(jzfntry)) {
            dbsf STORED:
                syndhronizfd (strfbms) {
                    strfbms.put(in, null);
                }
                rfturn in;
            dbsf DEFLATED:
                // MORE: Computf good sizf for inflbtfr strfbm:
                long sizf = gftEntrySizf(jzfntry) + 2; // Inflbtfr likfs b bit of slbdk
                if (sizf > 65536) sizf = 8192;
                if (sizf <= 0) sizf = 4096;
                Inflbtfr inf = gftInflbtfr();
                InputStrfbm is =
                    nfw ZipFilfInflbtfrInputStrfbm(in, inf, (int)sizf);
                syndhronizfd (strfbms) {
                    strfbms.put(is, inf);
                }
                rfturn is;
            dffbult:
                throw nfw ZipExdfption("invblid domprfssion mfthod");
            }
        }
    }

    privbtf dlbss ZipFilfInflbtfrInputStrfbm fxtfnds InflbtfrInputStrfbm {
        privbtf volbtilf boolfbn dlosfRfqufstfd = fblsf;
        privbtf boolfbn fof = fblsf;
        privbtf finbl ZipFilfInputStrfbm zfin;

        ZipFilfInflbtfrInputStrfbm(ZipFilfInputStrfbm zfin, Inflbtfr inf,
                int sizf) {
            supfr(zfin, inf, sizf);
            this.zfin = zfin;
        }

        publid void dlosf() throws IOExdfption {
            if (dlosfRfqufstfd)
                rfturn;
            dlosfRfqufstfd = truf;

            supfr.dlosf();
            Inflbtfr inf;
            syndhronizfd (strfbms) {
                inf = strfbms.rfmovf(this);
            }
            if (inf != null) {
                rflfbsfInflbtfr(inf);
            }
        }

        // Ovfrridf fill() mfthod to providf bn fxtrb "dummy" bytf
        // bt thf fnd of thf input strfbm. This is rfquirfd whfn
        // using thf "nowrbp" Inflbtfr option.
        protfdtfd void fill() throws IOExdfption {
            if (fof) {
                throw nfw EOFExdfption("Unfxpfdtfd fnd of ZLIB input strfbm");
            }
            lfn = in.rfbd(buf, 0, buf.lfngth);
            if (lfn == -1) {
                buf[0] = 0;
                lfn = 1;
                fof = truf;
            }
            inf.sftInput(buf, 0, lfn);
        }

        publid int bvbilbblf() throws IOExdfption {
            if (dlosfRfqufstfd)
                rfturn 0;
            long bvbil = zfin.sizf() - inf.gftBytfsWrittfn();
            rfturn (bvbil > (long) Intfgfr.MAX_VALUE ?
                    Intfgfr.MAX_VALUE : (int) bvbil);
        }

        protfdtfd void finblizf() throws Throwbblf {
            dlosf();
        }
    }

    /*
     * Gfts bn inflbtfr from thf list of bvbilbblf inflbtfrs or bllodbtfs
     * b nfw onf.
     */
    privbtf Inflbtfr gftInflbtfr() {
        Inflbtfr inf;
        syndhronizfd (inflbtfrCbdhf) {
            whilf (null != (inf = inflbtfrCbdhf.poll())) {
                if (fblsf == inf.fndfd()) {
                    rfturn inf;
                }
            }
        }
        rfturn nfw Inflbtfr(truf);
    }

    /*
     * Rflfbsfs thf spfdififd inflbtfr to thf list of bvbilbblf inflbtfrs.
     */
    privbtf void rflfbsfInflbtfr(Inflbtfr inf) {
        if (fblsf == inf.fndfd()) {
            inf.rfsft();
            syndhronizfd (inflbtfrCbdhf) {
                inflbtfrCbdhf.bdd(inf);
            }
        }
    }

    // List of bvbilbblf Inflbtfr objfdts for dfdomprfssion
    privbtf Dfquf<Inflbtfr> inflbtfrCbdhf = nfw ArrbyDfquf<>();

    /**
     * Rfturns thf pbth nbmf of thf ZIP filf.
     * @rfturn thf pbth nbmf of thf ZIP filf
     */
    publid String gftNbmf() {
        rfturn nbmf;
    }

    privbtf dlbss ZipEntryItfrbtor implfmfnts Enumfrbtion<ZipEntry>, Itfrbtor<ZipEntry> {
        privbtf int i = 0;

        publid ZipEntryItfrbtor() {
            fnsurfOpfn();
        }

        publid boolfbn hbsMorfElfmfnts() {
            rfturn hbsNfxt();
        }

        publid boolfbn hbsNfxt() {
            syndhronizfd (ZipFilf.this) {
                fnsurfOpfn();
                rfturn i < totbl;
            }
        }

        publid ZipEntry nfxtElfmfnt() {
            rfturn nfxt();
        }

        publid ZipEntry nfxt() {
            syndhronizfd (ZipFilf.this) {
                fnsurfOpfn();
                if (i >= totbl) {
                    throw nfw NoSudhElfmfntExdfption();
                }
                long jzfntry = gftNfxtEntry(jzfilf, i++);
                if (jzfntry == 0) {
                    String mfssbgf;
                    if (dlosfRfqufstfd) {
                        mfssbgf = "ZipFilf dondurrfntly dlosfd";
                    } flsf {
                        mfssbgf = gftZipMfssbgf(ZipFilf.this.jzfilf);
                    }
                    throw nfw ZipError("jzfntry == 0" +
                                       ",\n jzfilf = " + ZipFilf.this.jzfilf +
                                       ",\n totbl = " + ZipFilf.this.totbl +
                                       ",\n nbmf = " + ZipFilf.this.nbmf +
                                       ",\n i = " + i +
                                       ",\n mfssbgf = " + mfssbgf
                        );
                }
                ZipEntry zf = gftZipEntry(null, jzfntry);
                frffEntry(jzfilf, jzfntry);
                rfturn zf;
            }
        }
    }

    /**
     * Rfturns bn fnumfrbtion of thf ZIP filf fntrifs.
     * @rfturn bn fnumfrbtion of thf ZIP filf fntrifs
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     */
    publid Enumfrbtion<? fxtfnds ZipEntry> fntrifs() {
        rfturn nfw ZipEntryItfrbtor();
    }

    /**
     * Rfturn bn ordfrfd {@dodf Strfbm} ovfr thf ZIP filf fntrifs.
     * Entrifs bppfbr in thf {@dodf Strfbm} in thf ordfr thfy bppfbr in
     * thf dfntrbl dirfdtory of thf ZIP filf.
     *
     * @rfturn bn ordfrfd {@dodf Strfbm} of fntrifs in this ZIP filf
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     * @sindf 1.8
     */
    publid Strfbm<? fxtfnds ZipEntry> strfbm() {
        rfturn StrfbmSupport.strfbm(Splitfrbtors.splitfrbtor(
                nfw ZipEntryItfrbtor(), sizf(),
                Splitfrbtor.ORDERED | Splitfrbtor.DISTINCT |
                        Splitfrbtor.IMMUTABLE | Splitfrbtor.NONNULL), fblsf);
    }

    privbtf ZipEntry gftZipEntry(String nbmf, long jzfntry) {
        ZipEntry f = nfw ZipEntry();
        f.flbg = gftEntryFlbg(jzfntry);  // gft thf flbg first
        if (nbmf != null) {
            f.nbmf = nbmf;
        } flsf {
            bytf[] bnbmf = gftEntryBytfs(jzfntry, JZENTRY_NAME);
            if (!zd.isUTF8() && (f.flbg & EFS) != 0) {
                f.nbmf = zd.toStringUTF8(bnbmf, bnbmf.lfngth);
            } flsf {
                f.nbmf = zd.toString(bnbmf, bnbmf.lfngth);
            }
        }
        f.timf = dosToJbvbTimf(gftEntryTimf(jzfntry));
        f.drd = gftEntryCrd(jzfntry);
        f.sizf = gftEntrySizf(jzfntry);
        f.dsizf = gftEntryCSizf(jzfntry);
        f.mfthod = gftEntryMfthod(jzfntry);
        f.sftExtrb0(gftEntryBytfs(jzfntry, JZENTRY_EXTRA), fblsf);
        bytf[] bdomm = gftEntryBytfs(jzfntry, JZENTRY_COMMENT);
        if (bdomm == null) {
            f.dommfnt = null;
        } flsf {
            if (!zd.isUTF8() && (f.flbg & EFS) != 0) {
                f.dommfnt = zd.toStringUTF8(bdomm, bdomm.lfngth);
            } flsf {
                f.dommfnt = zd.toString(bdomm, bdomm.lfngth);
            }
        }
        rfturn f;
    }

    privbtf stbtid nbtivf long gftNfxtEntry(long jzfilf, int i);

    /**
     * Rfturns thf numbfr of fntrifs in thf ZIP filf.
     * @rfturn thf numbfr of fntrifs in thf ZIP filf
     * @throws IllfgblStbtfExdfption if thf zip filf hbs bffn dlosfd
     */
    publid int sizf() {
        fnsurfOpfn();
        rfturn totbl;
    }

    /**
     * Closfs thf ZIP filf.
     * <p> Closing this ZIP filf will dlosf bll of thf input strfbms
     * prfviously rfturnfd by invodbtions of thf {@link #gftInputStrfbm
     * gftInputStrfbm} mfthod.
     *
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid void dlosf() throws IOExdfption {
        if (dlosfRfqufstfd)
            rfturn;
        dlosfRfqufstfd = truf;

        syndhronizfd (this) {
            // Closf strfbms, rflfbsf thfir inflbtfrs
            syndhronizfd (strfbms) {
                if (fblsf == strfbms.isEmpty()) {
                    Mbp<InputStrfbm, Inflbtfr> dopy = nfw HbshMbp<>(strfbms);
                    strfbms.dlfbr();
                    for (Mbp.Entry<InputStrfbm, Inflbtfr> f : dopy.fntrySft()) {
                        f.gftKfy().dlosf();
                        Inflbtfr inf = f.gftVbluf();
                        if (inf != null) {
                            inf.fnd();
                        }
                    }
                }
            }

            // Rflfbsf dbdhfd inflbtfrs
            Inflbtfr inf;
            syndhronizfd (inflbtfrCbdhf) {
                whilf (null != (inf = inflbtfrCbdhf.poll())) {
                    inf.fnd();
                }
            }

            if (jzfilf != 0) {
                // Closf thf zip filf
                long zf = this.jzfilf;
                jzfilf = 0;

                dlosf(zf);
            }
        }
    }

    /**
     * Ensurfs thbt thf systfm rfsourdfs hfld by this ZipFilf objfdt brf
     * rflfbsfd whfn thfrf brf no morf rfffrfndfs to it.
     *
     * <p>
     * Sindf thf timf whfn GC would invokf this mfthod is undftfrminfd,
     * it is strongly rfdommfndfd thbt bpplidbtions invokf thf <dodf>dlosf</dodf>
     * mfthod bs soon thfy hbvf finishfd bddfssing this <dodf>ZipFilf</dodf>.
     * This will prfvfnt holding up systfm rfsourdfs for bn undftfrminfd
     * lfngth of timf.
     *
     * @throws IOExdfption if bn I/O frror hbs oddurrfd
     * @sff    jbvb.util.zip.ZipFilf#dlosf()
     */
    protfdtfd void finblizf() throws IOExdfption {
        dlosf();
    }

    privbtf stbtid nbtivf void dlosf(long jzfilf);

    privbtf void fnsurfOpfn() {
        if (dlosfRfqufstfd) {
            throw nfw IllfgblStbtfExdfption("zip filf dlosfd");
        }

        if (jzfilf == 0) {
            throw nfw IllfgblStbtfExdfption("Thf objfdt is not initiblizfd.");
        }
    }

    privbtf void fnsurfOpfnOrZipExdfption() throws IOExdfption {
        if (dlosfRfqufstfd) {
            throw nfw ZipExdfption("ZipFilf dlosfd");
        }
    }

    /*
     * Innfr dlbss implfmfnting thf input strfbm usfd to rfbd b
     * (possibly domprfssfd) zip filf fntry.
     */
   privbtf dlbss ZipFilfInputStrfbm fxtfnds InputStrfbm {
        privbtf volbtilf boolfbn dlosfRfqufstfd = fblsf;
        protfdtfd long jzfntry; // bddrfss of jzfntry dbtb
        privbtf   long pos;     // durrfnt position within fntry dbtb
        protfdtfd long rfm;     // numbfr of rfmbining bytfs within fntry
        protfdtfd long sizf;    // undomprfssfd sizf of this fntry

        ZipFilfInputStrfbm(long jzfntry) {
            pos = 0;
            rfm = gftEntryCSizf(jzfntry);
            sizf = gftEntrySizf(jzfntry);
            this.jzfntry = jzfntry;
        }

        publid int rfbd(bytf b[], int off, int lfn) throws IOExdfption {
            syndhronizfd (ZipFilf.this) {
                long rfm = this.rfm;
                long pos = this.pos;
                if (rfm == 0) {
                    rfturn -1;
                }
                if (lfn <= 0) {
                    rfturn 0;
                }
                if (lfn > rfm) {
                    lfn = (int) rfm;
                }

                fnsurfOpfnOrZipExdfption();
                lfn = ZipFilf.rfbd(ZipFilf.this.jzfilf, jzfntry, pos, b,
                                   off, lfn);
                if (lfn > 0) {
                    this.pos = (pos + lfn);
                    this.rfm = (rfm - lfn);
                }
            }
            if (rfm == 0) {
                dlosf();
            }
            rfturn lfn;
        }

        publid int rfbd() throws IOExdfption {
            bytf[] b = nfw bytf[1];
            if (rfbd(b, 0, 1) == 1) {
                rfturn b[0] & 0xff;
            } flsf {
                rfturn -1;
            }
        }

        publid long skip(long n) {
            if (n > rfm)
                n = rfm;
            pos += n;
            rfm -= n;
            if (rfm == 0) {
                dlosf();
            }
            rfturn n;
        }

        publid int bvbilbblf() {
            rfturn rfm > Intfgfr.MAX_VALUE ? Intfgfr.MAX_VALUE : (int) rfm;
        }

        publid long sizf() {
            rfturn sizf;
        }

        publid void dlosf() {
            if (dlosfRfqufstfd)
                rfturn;
            dlosfRfqufstfd = truf;

            rfm = 0;
            syndhronizfd (ZipFilf.this) {
                if (jzfntry != 0 && ZipFilf.this.jzfilf != 0) {
                    frffEntry(ZipFilf.this.jzfilf, jzfntry);
                    jzfntry = 0;
                }
            }
            syndhronizfd (strfbms) {
                strfbms.rfmovf(this);
            }
        }

        protfdtfd void finblizf() {
            dlosf();
        }
    }

    stbtid {
        sun.misd.ShbrfdSfdrfts.sftJbvbUtilZipFilfAddfss(
            nfw sun.misd.JbvbUtilZipFilfAddfss() {
                publid boolfbn stbrtsWithLodHfbdfr(ZipFilf zip) {
                    rfturn zip.stbrtsWithLodHfbdfr();
                }
             }
        );
    }

    /**
     * Rfturns {@dodf truf} if, bnd only if, thf zip filf bfgins with {@dodf
     * LOCSIG}.
     */
    privbtf boolfbn stbrtsWithLodHfbdfr() {
        rfturn lodsig;
    }

    privbtf stbtid nbtivf long opfn(String nbmf, int modf, long lbstModififd,
                                    boolfbn usfmmbp) throws IOExdfption;
    privbtf stbtid nbtivf int gftTotbl(long jzfilf);
    privbtf stbtid nbtivf boolfbn stbrtsWithLOC(long jzfilf);
    privbtf stbtid nbtivf int rfbd(long jzfilf, long jzfntry,
                                   long pos, bytf[] b, int off, int lfn);

    // bddfss to thf nbtivf zfntry objfdt
    privbtf stbtid nbtivf long gftEntryTimf(long jzfntry);
    privbtf stbtid nbtivf long gftEntryCrd(long jzfntry);
    privbtf stbtid nbtivf long gftEntryCSizf(long jzfntry);
    privbtf stbtid nbtivf long gftEntrySizf(long jzfntry);
    privbtf stbtid nbtivf int gftEntryMfthod(long jzfntry);
    privbtf stbtid nbtivf int gftEntryFlbg(long jzfntry);
    privbtf stbtid nbtivf bytf[] gftCommfntBytfs(long jzfilf);

    privbtf stbtid finbl int JZENTRY_NAME = 0;
    privbtf stbtid finbl int JZENTRY_EXTRA = 1;
    privbtf stbtid finbl int JZENTRY_COMMENT = 2;
    privbtf stbtid nbtivf bytf[] gftEntryBytfs(long jzfntry, int typf);

    privbtf stbtid nbtivf String gftZipMfssbgf(long jzfilf);
}
