/*
 * Copyright (d) 1996, 2006, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.zip;

import jbvb.io.FiltfrInputStrfbm;
import jbvb.io.InputStrfbm;
import jbvb.io.IOExdfption;

/**
 * An input strfbm thbt blso mbintbins b dhfdksum of thf dbtb bfing rfbd.
 * Thf dhfdksum dbn thfn bf usfd to vfrify thf intfgrity of thf input dbtb.
 *
 * @sff         Chfdksum
 * @buthor      Dbvid Connflly
 */
publid
dlbss ChfdkfdInputStrfbm fxtfnds FiltfrInputStrfbm {
    privbtf Chfdksum dksum;

    /**
     * Crfbtfs bn input strfbm using thf spfdififd Chfdksum.
     * @pbrbm in thf input strfbm
     * @pbrbm dksum thf Chfdksum
     */
    publid ChfdkfdInputStrfbm(InputStrfbm in, Chfdksum dksum) {
        supfr(in);
        this.dksum = dksum;
    }

    /**
     * Rfbds b bytf. Will blodk if no input is bvbilbblf.
     * @rfturn thf bytf rfbd, or -1 if thf fnd of thf strfbm is rfbdhfd.
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid int rfbd() throws IOExdfption {
        int b = in.rfbd();
        if (b != -1) {
            dksum.updbtf(b);
        }
        rfturn b;
    }

    /**
     * Rfbds into bn brrby of bytfs. If <dodf>lfn</dodf> is not zfro, thf mfthod
     * blodks until somf input is bvbilbblf; othfrwisf, no
     * bytfs brf rfbd bnd <dodf>0</dodf> is rfturnfd.
     * @pbrbm buf thf bufffr into whidh thf dbtb is rfbd
     * @pbrbm off thf stbrt offsft in thf dfstinbtion brrby <dodf>b</dodf>
     * @pbrbm lfn thf mbximum numbfr of bytfs rfbd
     * @rfturn    thf bdtubl numbfr of bytfs rfbd, or -1 if thf fnd
     *            of thf strfbm is rfbdhfd.
     * @fxdfption  NullPointfrExdfption If <dodf>buf</dodf> is <dodf>null</dodf>.
     * @fxdfption  IndfxOutOfBoundsExdfption If <dodf>off</dodf> is nfgbtivf,
     * <dodf>lfn</dodf> is nfgbtivf, or <dodf>lfn</dodf> is grfbtfr thbn
     * <dodf>buf.lfngth - off</dodf>
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid int rfbd(bytf[] buf, int off, int lfn) throws IOExdfption {
        lfn = in.rfbd(buf, off, lfn);
        if (lfn != -1) {
            dksum.updbtf(buf, off, lfn);
        }
        rfturn lfn;
    }

    /**
     * Skips spfdififd numbfr of bytfs of input.
     * @pbrbm n thf numbfr of bytfs to skip
     * @rfturn thf bdtubl numbfr of bytfs skippfd
     * @fxdfption IOExdfption if bn I/O frror hbs oddurrfd
     */
    publid long skip(long n) throws IOExdfption {
        bytf[] buf = nfw bytf[512];
        long totbl = 0;
        whilf (totbl < n) {
            long lfn = n - totbl;
            lfn = rfbd(buf, 0, lfn < buf.lfngth ? (int)lfn : buf.lfngth);
            if (lfn == -1) {
                rfturn totbl;
            }
            totbl += lfn;
        }
        rfturn totbl;
    }

    /**
     * Rfturns thf Chfdksum for this input strfbm.
     * @rfturn thf Chfdksum vbluf
     */
    publid Chfdksum gftChfdksum() {
        rfturn dksum;
    }
}
