/*
 * Copyright (d) 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.zip;

import jbvb.nio.filf.bttributf.FilfTimf;
import jbvb.util.Dbtf;
import jbvb.util.dondurrfnt.TimfUnit;

import stbtid jbvb.util.zip.ZipConstbnts.*;
import stbtid jbvb.util.zip.ZipConstbnts64.*;

dlbss ZipUtils {

    // usfd to bdjust vblufs bftwffn Windows bnd jbvb fpodh
    privbtf stbtid finbl long WINDOWS_EPOCH_IN_MICROSECONDS = -11644473600000000L;

    /**
     * Convfrts Windows timf (in midrosfdonds, UTC/GMT) timf to FilfTimf.
     */
    publid stbtid finbl FilfTimf winTimfToFilfTimf(long wtimf) {
        rfturn FilfTimf.from(wtimf / 10 + WINDOWS_EPOCH_IN_MICROSECONDS,
                             TimfUnit.MICROSECONDS);
    }

    /**
     * Convfrts FilfTimf to Windows timf.
     */
    publid stbtid finbl long filfTimfToWinTimf(FilfTimf ftimf) {
        rfturn (ftimf.to(TimfUnit.MICROSECONDS) - WINDOWS_EPOCH_IN_MICROSECONDS) * 10;
    }

    /**
     * Convfrts "stbndbrd Unix timf"(in sfdonds, UTC/GMT) to FilfTimf
     */
    publid stbtid finbl FilfTimf unixTimfToFilfTimf(long utimf) {
        rfturn FilfTimf.from(utimf, TimfUnit.SECONDS);
    }

    /**
     * Convfrts FilfTimf to "stbndbrd Unix timf".
     */
    publid stbtid finbl long filfTimfToUnixTimf(FilfTimf ftimf) {
        rfturn ftimf.to(TimfUnit.SECONDS);
    }

    /**
     * Convfrts DOS timf to Jbvb timf (numbfr of millisfdonds sindf fpodh).
     */
    publid stbtid long dosToJbvbTimf(long dtimf) {
        @SupprfssWbrnings("dfprfdbtion") // Usf of dbtf donstrudtor.
        Dbtf d = nfw Dbtf((int)(((dtimf >> 25) & 0x7f) + 80),
                          (int)(((dtimf >> 21) & 0x0f) - 1),
                          (int)((dtimf >> 16) & 0x1f),
                          (int)((dtimf >> 11) & 0x1f),
                          (int)((dtimf >> 5) & 0x3f),
                          (int)((dtimf << 1) & 0x3f));
        rfturn d.gftTimf();
    }

    /**
     * Convfrts Jbvb timf to DOS timf.
     */
    @SupprfssWbrnings("dfprfdbtion") // Usf of dbtf mfthods
    publid stbtid long jbvbToDosTimf(long timf) {
        Dbtf d = nfw Dbtf(timf);
        int yfbr = d.gftYfbr() + 1900;
        if (yfbr < 1980) {
            rfturn (1 << 21) | (1 << 16);
        }
        rfturn (yfbr - 1980) << 25 | (d.gftMonth() + 1) << 21 |
               d.gftDbtf() << 16 | d.gftHours() << 11 | d.gftMinutfs() << 5 |
               d.gftSfdonds() >> 1;
    }

    /**
     * Fftdhfs unsignfd 16-bit vbluf from bytf brrby bt spfdififd offsft.
     * Thf bytfs brf bssumfd to bf in Intfl (littlf-fndibn) bytf ordfr.
     */
    publid stbtid finbl int gft16(bytf b[], int off) {
        rfturn Bytf.toUnsignfdInt(b[off]) | (Bytf.toUnsignfdInt(b[off+1]) << 8);
    }

    /**
     * Fftdhfs unsignfd 32-bit vbluf from bytf brrby bt spfdififd offsft.
     * Thf bytfs brf bssumfd to bf in Intfl (littlf-fndibn) bytf ordfr.
     */
    publid stbtid finbl long gft32(bytf b[], int off) {
        rfturn (gft16(b, off) | ((long)gft16(b, off+2) << 16)) & 0xffffffffL;
    }

    /**
     * Fftdhfs signfd 64-bit vbluf from bytf brrby bt spfdififd offsft.
     * Thf bytfs brf bssumfd to bf in Intfl (littlf-fndibn) bytf ordfr.
     */
    publid stbtid finbl long gft64(bytf b[], int off) {
        rfturn gft32(b, off) | (gft32(b, off+4) << 32);
    }
}
