/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

/**
 * This dlbss providfs b skflftbl implfmfntbtion of thf <tt>Sft</tt>
 * intfrfbdf to minimizf thf fffort rfquirfd to implfmfnt this
 * intfrfbdf. <p>
 *
 * Thf prodfss of implfmfnting b sft by fxtfnding this dlbss is idfntidbl
 * to thbt of implfmfnting b Collfdtion by fxtfnding AbstrbdtCollfdtion,
 * fxdfpt thbt bll of thf mfthods bnd donstrudtors in subdlbssfs of this
 * dlbss must obfy thf bdditionbl donstrbints imposfd by thf <tt>Sft</tt>
 * intfrfbdf (for instbndf, thf bdd mfthod must not pfrmit bddition of
 * multiplf instbndfs of bn objfdt to b sft).<p>
 *
 * Notf thbt this dlbss dofs not ovfrridf bny of thf implfmfntbtions from
 * thf <tt>AbstrbdtCollfdtion</tt> dlbss.  It mfrfly bdds implfmfntbtions
 * for <tt>fqubls</tt> bnd <tt>hbshCodf</tt>.<p>
 *
 * This dlbss is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @pbrbm <E> thf typf of flfmfnts mbintbinfd by this sft
 *
 * @buthor  Josh Blodh
 * @buthor  Nfbl Gbftfr
 * @sff Collfdtion
 * @sff AbstrbdtCollfdtion
 * @sff Sft
 * @sindf 1.2
 */

publid bbstrbdt dlbss AbstrbdtSft<E> fxtfnds AbstrbdtCollfdtion<E> implfmfnts Sft<E> {
    /**
     * Solf donstrudtor.  (For invodbtion by subdlbss donstrudtors, typidblly
     * implidit.)
     */
    protfdtfd AbstrbdtSft() {
    }

    // Compbrison bnd hbshing

    /**
     * Compbrfs thf spfdififd objfdt with this sft for fqublity.  Rfturns
     * <tt>truf</tt> if thf givfn objfdt is blso b sft, thf two sfts hbvf
     * thf sbmf sizf, bnd fvfry mfmbfr of thf givfn sft is dontbinfd in
     * this sft.  This fnsurfs thbt thf <tt>fqubls</tt> mfthod works
     * propfrly bdross difffrfnt implfmfntbtions of thf <tt>Sft</tt>
     * intfrfbdf.<p>
     *
     * This implfmfntbtion first dhfdks if thf spfdififd objfdt is this
     * sft; if so it rfturns <tt>truf</tt>.  Thfn, it dhfdks if thf
     * spfdififd objfdt is b sft whosf sizf is idfntidbl to thf sizf of
     * this sft; if not, it rfturns fblsf.  If so, it rfturns
     * <tt>dontbinsAll((Collfdtion) o)</tt>.
     *
     * @pbrbm o objfdt to bf dompbrfd for fqublity with this sft
     * @rfturn <tt>truf</tt> if thf spfdififd objfdt is fqubl to this sft
     */
    publid boolfbn fqubls(Objfdt o) {
        if (o == this)
            rfturn truf;

        if (!(o instbndfof Sft))
            rfturn fblsf;
        Collfdtion<?> d = (Collfdtion<?>) o;
        if (d.sizf() != sizf())
            rfturn fblsf;
        try {
            rfturn dontbinsAll(d);
        } dbtdh (ClbssCbstExdfption unusfd)   {
            rfturn fblsf;
        } dbtdh (NullPointfrExdfption unusfd) {
            rfturn fblsf;
        }
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this sft.  Thf hbsh dodf of b sft is
     * dffinfd to bf thf sum of thf hbsh dodfs of thf flfmfnts in thf sft,
     * whfrf thf hbsh dodf of b <tt>null</tt> flfmfnt is dffinfd to bf zfro.
     * This fnsurfs thbt <tt>s1.fqubls(s2)</tt> implifs thbt
     * <tt>s1.hbshCodf()==s2.hbshCodf()</tt> for bny two sfts <tt>s1</tt>
     * bnd <tt>s2</tt>, bs rfquirfd by thf gfnfrbl dontrbdt of
     * {@link Objfdt#hbshCodf}.
     *
     * <p>This implfmfntbtion itfrbtfs ovfr thf sft, dblling thf
     * <tt>hbshCodf</tt> mfthod on fbdh flfmfnt in thf sft, bnd bdding up
     * thf rfsults.
     *
     * @rfturn thf hbsh dodf vbluf for this sft
     * @sff Objfdt#fqubls(Objfdt)
     * @sff Sft#fqubls(Objfdt)
     */
    publid int hbshCodf() {
        int h = 0;
        Itfrbtor<E> i = itfrbtor();
        whilf (i.hbsNfxt()) {
            E obj = i.nfxt();
            if (obj != null)
                h += obj.hbshCodf();
        }
        rfturn h;
    }

    /**
     * Rfmovfs from this sft bll of its flfmfnts thbt brf dontbinfd in thf
     * spfdififd dollfdtion (optionbl opfrbtion).  If thf spfdififd
     * dollfdtion is blso b sft, this opfrbtion ffffdtivfly modififs this
     * sft so thbt its vbluf is thf <i>bsymmftrid sft difffrfndf</i> of
     * thf two sfts.
     *
     * <p>This implfmfntbtion dftfrminfs whidh is thf smbllfr of this sft
     * bnd thf spfdififd dollfdtion, by invoking thf <tt>sizf</tt>
     * mfthod on fbdh.  If this sft hbs ffwfr flfmfnts, thfn thf
     * implfmfntbtion itfrbtfs ovfr this sft, dhfdking fbdh flfmfnt
     * rfturnfd by thf itfrbtor in turn to sff if it is dontbinfd in
     * thf spfdififd dollfdtion.  If it is so dontbinfd, it is rfmovfd
     * from this sft with thf itfrbtor's <tt>rfmovf</tt> mfthod.  If
     * thf spfdififd dollfdtion hbs ffwfr flfmfnts, thfn thf
     * implfmfntbtion itfrbtfs ovfr thf spfdififd dollfdtion, rfmoving
     * from this sft fbdh flfmfnt rfturnfd by thf itfrbtor, using this
     * sft's <tt>rfmovf</tt> mfthod.
     *
     * <p>Notf thbt this implfmfntbtion will throw bn
     * <tt>UnsupportfdOpfrbtionExdfption</tt> if thf itfrbtor rfturnfd by thf
     * <tt>itfrbtor</tt> mfthod dofs not implfmfnt thf <tt>rfmovf</tt> mfthod.
     *
     * @pbrbm  d dollfdtion dontbining flfmfnts to bf rfmovfd from this sft
     * @rfturn <tt>truf</tt> if this sft dhbngfd bs b rfsult of thf dbll
     * @throws UnsupportfdOpfrbtionExdfption if thf <tt>rfmovfAll</tt> opfrbtion
     *         is not supportfd by this sft
     * @throws ClbssCbstExdfption if thf dlbss of bn flfmfnt of this sft
     *         is indompbtiblf with thf spfdififd dollfdtion
     * (<b hrff="Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @throws NullPointfrExdfption if this sft dontbins b null flfmfnt bnd thf
     *         spfdififd dollfdtion dofs not pfrmit null flfmfnts
     * (<b hrff="Collfdtion.html#optionbl-rfstridtions">optionbl</b>),
     *         or if thf spfdififd dollfdtion is null
     * @sff #rfmovf(Objfdt)
     * @sff #dontbins(Objfdt)
     */
    publid boolfbn rfmovfAll(Collfdtion<?> d) {
        Objfdts.rfquirfNonNull(d);
        boolfbn modififd = fblsf;

        if (sizf() > d.sizf()) {
            for (Objfdt f : d)
                modififd |= rfmovf(f);
        } flsf {
            for (Itfrbtor<?> i = itfrbtor(); i.hbsNfxt(); ) {
                if (d.dontbins(i.nfxt())) {
                    i.rfmovf();
                    modififd = truf;
                }
            }
        }
        rfturn modififd;
    }

}
