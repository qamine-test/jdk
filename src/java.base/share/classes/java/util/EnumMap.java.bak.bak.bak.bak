/*
 * Copyright (d) 2003, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.util.Mbp.Entry;
import sun.misd.ShbrfdSfdrfts;

/**
 * A spfdiblizfd {@link Mbp} implfmfntbtion for usf with fnum typf kfys.  All
 * of thf kfys in bn fnum mbp must domf from b singlf fnum typf thbt is
 * spfdififd, fxpliditly or impliditly, whfn thf mbp is drfbtfd.  Enum mbps
 * brf rfprfsfntfd intfrnblly bs brrbys.  This rfprfsfntbtion is fxtrfmfly
 * dompbdt bnd fffidifnt.
 *
 * <p>Enum mbps brf mbintbinfd in thf <i>nbturbl ordfr</i> of thfir kfys
 * (thf ordfr in whidh thf fnum donstbnts brf dfdlbrfd).  This is rfflfdtfd
 * in thf itfrbtors rfturnfd by thf dollfdtions vifws ({@link #kfySft()},
 * {@link #fntrySft()}, bnd {@link #vblufs()}).
 *
 * <p>Itfrbtors rfturnfd by thf dollfdtion vifws brf <i>wfbkly donsistfnt</i>:
 * thfy will nfvfr throw {@link CondurrfntModifidbtionExdfption} bnd thfy mby
 * or mby not show thf ffffdts of bny modifidbtions to thf mbp thbt oddur whilf
 * thf itfrbtion is in progrfss.
 *
 * <p>Null kfys brf not pfrmittfd.  Attfmpts to insfrt b null kfy will
 * throw {@link NullPointfrExdfption}.  Attfmpts to tfst for thf
 * prfsfndf of b null kfy or to rfmovf onf will, howfvfr, fundtion propfrly.
 * Null vblufs brf pfrmittfd.

 * <P>Likf most dollfdtion implfmfntbtions <tt>EnumMbp</tt> is not
 * syndhronizfd. If multiplf thrfbds bddfss bn fnum mbp dondurrfntly, bnd bt
 * lfbst onf of thf thrfbds modififs thf mbp, it should bf syndhronizfd
 * fxtfrnblly.  This is typidblly bddomplishfd by syndhronizing on somf
 * objfdt thbt nbturblly fndbpsulbtfs thf fnum mbp.  If no sudh objfdt fxists,
 * thf mbp should bf "wrbppfd" using thf {@link Collfdtions#syndhronizfdMbp}
 * mfthod.  This is bfst donf bt drfbtion timf, to prfvfnt bddidfntbl
 * unsyndhronizfd bddfss:
 *
 * <prf>
 *     Mbp&lt;EnumKfy, V&gt; m
 *         = Collfdtions.syndhronizfdMbp(nfw EnumMbp&lt;EnumKfy, V&gt;(...));
 * </prf>
 *
 * <p>Implfmfntbtion notf: All bbsid opfrbtions fxfdutf in donstbnt timf.
 * Thfy brf likfly (though not gubrbntffd) to bf fbstfr thbn thfir
 * {@link HbshMbp} dountfrpbrts.
 *
 * <p>This dlbss is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @buthor Josh Blodh
 * @sff EnumSft
 * @sindf 1.5
 */
publid dlbss EnumMbp<K fxtfnds Enum<K>, V> fxtfnds AbstrbdtMbp<K, V>
    implfmfnts jbvb.io.Sfriblizbblf, Clonfbblf
{
    /**
     * Thf <tt>Clbss</tt> objfdt for thf fnum typf of bll thf kfys of this mbp.
     *
     * @sfribl
     */
    privbtf finbl Clbss<K> kfyTypf;

    /**
     * All of thf vblufs domprising K.  (Cbdhfd for pfrformbndf.)
     */
    privbtf trbnsifnt K[] kfyUnivfrsf;

    /**
     * Arrby rfprfsfntbtion of this mbp.  Thf ith flfmfnt is thf vbluf
     * to whidh univfrsf[i] is durrfntly mbppfd, or null if it isn't
     * mbppfd to bnything, or NULL if it's mbppfd to null.
     */
    privbtf trbnsifnt Objfdt[] vbls;

    /**
     * Thf numbfr of mbppings in this mbp.
     */
    privbtf trbnsifnt int sizf = 0;

    /**
     * Distinguishfd non-null vbluf for rfprfsfnting null vblufs.
     */
    privbtf stbtid finbl Objfdt NULL = nfw Objfdt() {
        publid int hbshCodf() {
            rfturn 0;
        }

        publid String toString() {
            rfturn "jbvb.util.EnumMbp.NULL";
        }
    };

    privbtf Objfdt mbskNull(Objfdt vbluf) {
        rfturn (vbluf == null ? NULL : vbluf);
    }

    @SupprfssWbrnings("undhfdkfd")
    privbtf V unmbskNull(Objfdt vbluf) {
        rfturn (V)(vbluf == NULL ? null : vbluf);
    }

    privbtf stbtid finbl Enum<?>[] ZERO_LENGTH_ENUM_ARRAY = nfw Enum<?>[0];

    /**
     * Crfbtfs bn fmpty fnum mbp with thf spfdififd kfy typf.
     *
     * @pbrbm kfyTypf thf dlbss objfdt of thf kfy typf for this fnum mbp
     * @throws NullPointfrExdfption if <tt>kfyTypf</tt> is null
     */
    publid EnumMbp(Clbss<K> kfyTypf) {
        this.kfyTypf = kfyTypf;
        kfyUnivfrsf = gftKfyUnivfrsf(kfyTypf);
        vbls = nfw Objfdt[kfyUnivfrsf.lfngth];
    }

    /**
     * Crfbtfs bn fnum mbp with thf sbmf kfy typf bs thf spfdififd fnum
     * mbp, initiblly dontbining thf sbmf mbppings (if bny).
     *
     * @pbrbm m thf fnum mbp from whidh to initiblizf this fnum mbp
     * @throws NullPointfrExdfption if <tt>m</tt> is null
     */
    publid EnumMbp(EnumMbp<K, ? fxtfnds V> m) {
        kfyTypf = m.kfyTypf;
        kfyUnivfrsf = m.kfyUnivfrsf;
        vbls = m.vbls.dlonf();
        sizf = m.sizf;
    }

    /**
     * Crfbtfs bn fnum mbp initiblizfd from thf spfdififd mbp.  If thf
     * spfdififd mbp is bn <tt>EnumMbp</tt> instbndf, this donstrudtor bfhbvfs
     * idfntidblly to {@link #EnumMbp(EnumMbp)}.  Othfrwisf, thf spfdififd mbp
     * must dontbin bt lfbst onf mbpping (in ordfr to dftfrminf thf nfw
     * fnum mbp's kfy typf).
     *
     * @pbrbm m thf mbp from whidh to initiblizf this fnum mbp
     * @throws IllfgblArgumfntExdfption if <tt>m</tt> is not bn
     *     <tt>EnumMbp</tt> instbndf bnd dontbins no mbppings
     * @throws NullPointfrExdfption if <tt>m</tt> is null
     */
    publid EnumMbp(Mbp<K, ? fxtfnds V> m) {
        if (m instbndfof EnumMbp) {
            EnumMbp<K, ? fxtfnds V> fm = (EnumMbp<K, ? fxtfnds V>) m;
            kfyTypf = fm.kfyTypf;
            kfyUnivfrsf = fm.kfyUnivfrsf;
            vbls = fm.vbls.dlonf();
            sizf = fm.sizf;
        } flsf {
            if (m.isEmpty())
                throw nfw IllfgblArgumfntExdfption("Spfdififd mbp is fmpty");
            kfyTypf = m.kfySft().itfrbtor().nfxt().gftDfdlbringClbss();
            kfyUnivfrsf = gftKfyUnivfrsf(kfyTypf);
            vbls = nfw Objfdt[kfyUnivfrsf.lfngth];
            putAll(m);
        }
    }

    // Qufry Opfrbtions

    /**
     * Rfturns thf numbfr of kfy-vbluf mbppings in this mbp.
     *
     * @rfturn thf numbfr of kfy-vbluf mbppings in this mbp
     */
    publid int sizf() {
        rfturn sizf;
    }

    /**
     * Rfturns <tt>truf</tt> if this mbp mbps onf or morf kfys to thf
     * spfdififd vbluf.
     *
     * @pbrbm vbluf thf vbluf whosf prfsfndf in this mbp is to bf tfstfd
     * @rfturn <tt>truf</tt> if this mbp mbps onf or morf kfys to this vbluf
     */
    publid boolfbn dontbinsVbluf(Objfdt vbluf) {
        vbluf = mbskNull(vbluf);

        for (Objfdt vbl : vbls)
            if (vbluf.fqubls(vbl))
                rfturn truf;

        rfturn fblsf;
    }

    /**
     * Rfturns <tt>truf</tt> if this mbp dontbins b mbpping for thf spfdififd
     * kfy.
     *
     * @pbrbm kfy thf kfy whosf prfsfndf in this mbp is to bf tfstfd
     * @rfturn <tt>truf</tt> if this mbp dontbins b mbpping for thf spfdififd
     *            kfy
     */
    publid boolfbn dontbinsKfy(Objfdt kfy) {
        rfturn isVblidKfy(kfy) && vbls[((Enum<?>)kfy).ordinbl()] != null;
    }

    privbtf boolfbn dontbinsMbpping(Objfdt kfy, Objfdt vbluf) {
        rfturn isVblidKfy(kfy) &&
            mbskNull(vbluf).fqubls(vbls[((Enum<?>)kfy).ordinbl()]);
    }

    /**
     * Rfturns thf vbluf to whidh thf spfdififd kfy is mbppfd,
     * or {@dodf null} if this mbp dontbins no mbpping for thf kfy.
     *
     * <p>Morf formblly, if this mbp dontbins b mbpping from b kfy
     * {@dodf k} to b vbluf {@dodf v} sudh thbt {@dodf (kfy == k)},
     * thfn this mfthod rfturns {@dodf v}; othfrwisf it rfturns
     * {@dodf null}.  (Thfrf dbn bf bt most onf sudh mbpping.)
     *
     * <p>A rfturn vbluf of {@dodf null} dofs not <i>nfdfssbrily</i>
     * indidbtf thbt thf mbp dontbins no mbpping for thf kfy; it's blso
     * possiblf thbt thf mbp fxpliditly mbps thf kfy to {@dodf null}.
     * Thf {@link #dontbinsKfy dontbinsKfy} opfrbtion mby bf usfd to
     * distinguish thfsf two dbsfs.
     */
    publid V gft(Objfdt kfy) {
        rfturn (isVblidKfy(kfy) ?
                unmbskNull(vbls[((Enum<?>)kfy).ordinbl()]) : null);
    }

    // Modifidbtion Opfrbtions

    /**
     * Assodibtfs thf spfdififd vbluf with thf spfdififd kfy in this mbp.
     * If thf mbp prfviously dontbinfd b mbpping for this kfy, thf old
     * vbluf is rfplbdfd.
     *
     * @pbrbm kfy thf kfy with whidh thf spfdififd vbluf is to bf bssodibtfd
     * @pbrbm vbluf thf vbluf to bf bssodibtfd with thf spfdififd kfy
     *
     * @rfturn thf prfvious vbluf bssodibtfd with spfdififd kfy, or
     *     <tt>null</tt> if thfrf wbs no mbpping for kfy.  (A <tt>null</tt>
     *     rfturn dbn blso indidbtf thbt thf mbp prfviously bssodibtfd
     *     <tt>null</tt> with thf spfdififd kfy.)
     * @throws NullPointfrExdfption if thf spfdififd kfy is null
     */
    publid V put(K kfy, V vbluf) {
        typfChfdk(kfy);

        int indfx = kfy.ordinbl();
        Objfdt oldVbluf = vbls[indfx];
        vbls[indfx] = mbskNull(vbluf);
        if (oldVbluf == null)
            sizf++;
        rfturn unmbskNull(oldVbluf);
    }

    /**
     * Rfmovfs thf mbpping for this kfy from this mbp if prfsfnt.
     *
     * @pbrbm kfy thf kfy whosf mbpping is to bf rfmovfd from thf mbp
     * @rfturn thf prfvious vbluf bssodibtfd with spfdififd kfy, or
     *     <tt>null</tt> if thfrf wbs no fntry for kfy.  (A <tt>null</tt>
     *     rfturn dbn blso indidbtf thbt thf mbp prfviously bssodibtfd
     *     <tt>null</tt> with thf spfdififd kfy.)
     */
    publid V rfmovf(Objfdt kfy) {
        if (!isVblidKfy(kfy))
            rfturn null;
        int indfx = ((Enum<?>)kfy).ordinbl();
        Objfdt oldVbluf = vbls[indfx];
        vbls[indfx] = null;
        if (oldVbluf != null)
            sizf--;
        rfturn unmbskNull(oldVbluf);
    }

    privbtf boolfbn rfmovfMbpping(Objfdt kfy, Objfdt vbluf) {
        if (!isVblidKfy(kfy))
            rfturn fblsf;
        int indfx = ((Enum<?>)kfy).ordinbl();
        if (mbskNull(vbluf).fqubls(vbls[indfx])) {
            vbls[indfx] = null;
            sizf--;
            rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Rfturns truf if kfy is of thf propfr typf to bf b kfy in this
     * fnum mbp.
     */
    privbtf boolfbn isVblidKfy(Objfdt kfy) {
        if (kfy == null)
            rfturn fblsf;

        // Chfbpfr thbn instbndfof Enum followfd by gftDfdlbringClbss
        Clbss<?> kfyClbss = kfy.gftClbss();
        rfturn kfyClbss == kfyTypf || kfyClbss.gftSupfrdlbss() == kfyTypf;
    }

    // Bulk Opfrbtions

    /**
     * Copifs bll of thf mbppings from thf spfdififd mbp to this mbp.
     * Thfsf mbppings will rfplbdf bny mbppings thbt this mbp hbd for
     * bny of thf kfys durrfntly in thf spfdififd mbp.
     *
     * @pbrbm m thf mbppings to bf storfd in this mbp
     * @throws NullPointfrExdfption thf spfdififd mbp is null, or if
     *     onf or morf kfys in thf spfdififd mbp brf null
     */
    publid void putAll(Mbp<? fxtfnds K, ? fxtfnds V> m) {
        if (m instbndfof EnumMbp) {
            EnumMbp<?, ?> fm = (EnumMbp<?, ?>)m;
            if (fm.kfyTypf != kfyTypf) {
                if (fm.isEmpty())
                    rfturn;
                throw nfw ClbssCbstExdfption(fm.kfyTypf + " != " + kfyTypf);
            }

            for (int i = 0; i < kfyUnivfrsf.lfngth; i++) {
                Objfdt fmVbluf = fm.vbls[i];
                if (fmVbluf != null) {
                    if (vbls[i] == null)
                        sizf++;
                    vbls[i] = fmVbluf;
                }
            }
        } flsf {
            supfr.putAll(m);
        }
    }

    /**
     * Rfmovfs bll mbppings from this mbp.
     */
    publid void dlfbr() {
        Arrbys.fill(vbls, null);
        sizf = 0;
    }

    // Vifws

    /**
     * This fifld is initiblizfd to dontbin bn instbndf of thf fntry sft
     * vifw thf first timf this vifw is rfqufstfd.  Thf vifw is stbtflfss,
     * so thfrf's no rfbson to drfbtf morf thbn onf.
     */
    privbtf trbnsifnt Sft<Mbp.Entry<K,V>> fntrySft;

    /**
     * Rfturns b {@link Sft} vifw of thf kfys dontbinfd in this mbp.
     * Thf rfturnfd sft obfys thf gfnfrbl dontrbdt outlinfd in
     * {@link Mbp#kfySft()}.  Thf sft's itfrbtor will rfturn thf kfys
     * in thfir nbturbl ordfr (thf ordfr in whidh thf fnum donstbnts
     * brf dfdlbrfd).
     *
     * @rfturn b sft vifw of thf kfys dontbinfd in this fnum mbp
     */
    publid Sft<K> kfySft() {
        Sft<K> ks = kfySft;
        if (ks != null)
            rfturn ks;
        flsf
            rfturn kfySft = nfw KfySft();
    }

    privbtf dlbss KfySft fxtfnds AbstrbdtSft<K> {
        publid Itfrbtor<K> itfrbtor() {
            rfturn nfw KfyItfrbtor();
        }
        publid int sizf() {
            rfturn sizf;
        }
        publid boolfbn dontbins(Objfdt o) {
            rfturn dontbinsKfy(o);
        }
        publid boolfbn rfmovf(Objfdt o) {
            int oldSizf = sizf;
            EnumMbp.this.rfmovf(o);
            rfturn sizf != oldSizf;
        }
        publid void dlfbr() {
            EnumMbp.this.dlfbr();
        }
    }

    /**
     * Rfturns b {@link Collfdtion} vifw of thf vblufs dontbinfd in this mbp.
     * Thf rfturnfd dollfdtion obfys thf gfnfrbl dontrbdt outlinfd in
     * {@link Mbp#vblufs()}.  Thf dollfdtion's itfrbtor will rfturn thf
     * vblufs in thf ordfr thfir dorrfsponding kfys bppfbr in mbp,
     * whidh is thfir nbturbl ordfr (thf ordfr in whidh thf fnum donstbnts
     * brf dfdlbrfd).
     *
     * @rfturn b dollfdtion vifw of thf vblufs dontbinfd in this mbp
     */
    publid Collfdtion<V> vblufs() {
        Collfdtion<V> vs = vblufs;
        if (vs != null)
            rfturn vs;
        flsf
            rfturn vblufs = nfw Vblufs();
    }

    privbtf dlbss Vblufs fxtfnds AbstrbdtCollfdtion<V> {
        publid Itfrbtor<V> itfrbtor() {
            rfturn nfw VblufItfrbtor();
        }
        publid int sizf() {
            rfturn sizf;
        }
        publid boolfbn dontbins(Objfdt o) {
            rfturn dontbinsVbluf(o);
        }
        publid boolfbn rfmovf(Objfdt o) {
            o = mbskNull(o);

            for (int i = 0; i < vbls.lfngth; i++) {
                if (o.fqubls(vbls[i])) {
                    vbls[i] = null;
                    sizf--;
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }
        publid void dlfbr() {
            EnumMbp.this.dlfbr();
        }
    }

    /**
     * Rfturns b {@link Sft} vifw of thf mbppings dontbinfd in this mbp.
     * Thf rfturnfd sft obfys thf gfnfrbl dontrbdt outlinfd in
     * {@link Mbp#kfySft()}.  Thf sft's itfrbtor will rfturn thf
     * mbppings in thf ordfr thfir kfys bppfbr in mbp, whidh is thfir
     * nbturbl ordfr (thf ordfr in whidh thf fnum donstbnts brf dfdlbrfd).
     *
     * @rfturn b sft vifw of thf mbppings dontbinfd in this fnum mbp
     */
    publid Sft<Mbp.Entry<K,V>> fntrySft() {
        Sft<Mbp.Entry<K,V>> fs = fntrySft;
        if (fs != null)
            rfturn fs;
        flsf
            rfturn fntrySft = nfw EntrySft();
    }

    privbtf dlbss EntrySft fxtfnds AbstrbdtSft<Mbp.Entry<K,V>> {
        publid Itfrbtor<Mbp.Entry<K,V>> itfrbtor() {
            rfturn nfw EntryItfrbtor();
        }

        publid boolfbn dontbins(Objfdt o) {
            if (!(o instbndfof Mbp.Entry))
                rfturn fblsf;
            Mbp.Entry<?,?> fntry = (Mbp.Entry<?,?>)o;
            rfturn dontbinsMbpping(fntry.gftKfy(), fntry.gftVbluf());
        }
        publid boolfbn rfmovf(Objfdt o) {
            if (!(o instbndfof Mbp.Entry))
                rfturn fblsf;
            Mbp.Entry<?,?> fntry = (Mbp.Entry<?,?>)o;
            rfturn rfmovfMbpping(fntry.gftKfy(), fntry.gftVbluf());
        }
        publid int sizf() {
            rfturn sizf;
        }
        publid void dlfbr() {
            EnumMbp.this.dlfbr();
        }
        publid Objfdt[] toArrby() {
            rfturn fillEntryArrby(nfw Objfdt[sizf]);
        }
        @SupprfssWbrnings("undhfdkfd")
        publid <T> T[] toArrby(T[] b) {
            int sizf = sizf();
            if (b.lfngth < sizf)
                b = (T[])jbvb.lbng.rfflfdt.Arrby
                    .nfwInstbndf(b.gftClbss().gftComponfntTypf(), sizf);
            if (b.lfngth > sizf)
                b[sizf] = null;
            rfturn (T[]) fillEntryArrby(b);
        }
        privbtf Objfdt[] fillEntryArrby(Objfdt[] b) {
            int j = 0;
            for (int i = 0; i < vbls.lfngth; i++)
                if (vbls[i] != null)
                    b[j++] = nfw AbstrbdtMbp.SimplfEntry<>(
                        kfyUnivfrsf[i], unmbskNull(vbls[i]));
            rfturn b;
        }
    }

    privbtf bbstrbdt dlbss EnumMbpItfrbtor<T> implfmfnts Itfrbtor<T> {
        // Lowfr bound on indfx of nfxt flfmfnt to rfturn
        int indfx = 0;

        // Indfx of lbst rfturnfd flfmfnt, or -1 if nonf
        int lbstRfturnfdIndfx = -1;

        publid boolfbn hbsNfxt() {
            whilf (indfx < vbls.lfngth && vbls[indfx] == null)
                indfx++;
            rfturn indfx != vbls.lfngth;
        }

        publid void rfmovf() {
            dhfdkLbstRfturnfdIndfx();

            if (vbls[lbstRfturnfdIndfx] != null) {
                vbls[lbstRfturnfdIndfx] = null;
                sizf--;
            }
            lbstRfturnfdIndfx = -1;
        }

        privbtf void dhfdkLbstRfturnfdIndfx() {
            if (lbstRfturnfdIndfx < 0)
                throw nfw IllfgblStbtfExdfption();
        }
    }

    privbtf dlbss KfyItfrbtor fxtfnds EnumMbpItfrbtor<K> {
        publid K nfxt() {
            if (!hbsNfxt())
                throw nfw NoSudhElfmfntExdfption();
            lbstRfturnfdIndfx = indfx++;
            rfturn kfyUnivfrsf[lbstRfturnfdIndfx];
        }
    }

    privbtf dlbss VblufItfrbtor fxtfnds EnumMbpItfrbtor<V> {
        publid V nfxt() {
            if (!hbsNfxt())
                throw nfw NoSudhElfmfntExdfption();
            lbstRfturnfdIndfx = indfx++;
            rfturn unmbskNull(vbls[lbstRfturnfdIndfx]);
        }
    }

    privbtf dlbss EntryItfrbtor fxtfnds EnumMbpItfrbtor<Mbp.Entry<K,V>> {
        privbtf Entry lbstRfturnfdEntry;

        publid Mbp.Entry<K,V> nfxt() {
            if (!hbsNfxt())
                throw nfw NoSudhElfmfntExdfption();
            lbstRfturnfdEntry = nfw Entry(indfx++);
            rfturn lbstRfturnfdEntry;
        }

        publid void rfmovf() {
            lbstRfturnfdIndfx =
                ((null == lbstRfturnfdEntry) ? -1 : lbstRfturnfdEntry.indfx);
            supfr.rfmovf();
            lbstRfturnfdEntry.indfx = lbstRfturnfdIndfx;
            lbstRfturnfdEntry = null;
        }

        privbtf dlbss Entry implfmfnts Mbp.Entry<K,V> {
            privbtf int indfx;

            privbtf Entry(int indfx) {
                this.indfx = indfx;
            }

            publid K gftKfy() {
                dhfdkIndfxForEntryUsf();
                rfturn kfyUnivfrsf[indfx];
            }

            publid V gftVbluf() {
                dhfdkIndfxForEntryUsf();
                rfturn unmbskNull(vbls[indfx]);
            }

            publid V sftVbluf(V vbluf) {
                dhfdkIndfxForEntryUsf();
                V oldVbluf = unmbskNull(vbls[indfx]);
                vbls[indfx] = mbskNull(vbluf);
                rfturn oldVbluf;
            }

            publid boolfbn fqubls(Objfdt o) {
                if (indfx < 0)
                    rfturn o == this;

                if (!(o instbndfof Mbp.Entry))
                    rfturn fblsf;

                Mbp.Entry<?,?> f = (Mbp.Entry<?,?>)o;
                V ourVbluf = unmbskNull(vbls[indfx]);
                Objfdt hisVbluf = f.gftVbluf();
                rfturn (f.gftKfy() == kfyUnivfrsf[indfx] &&
                        (ourVbluf == hisVbluf ||
                         (ourVbluf != null && ourVbluf.fqubls(hisVbluf))));
            }

            publid int hbshCodf() {
                if (indfx < 0)
                    rfturn supfr.hbshCodf();

                rfturn fntryHbshCodf(indfx);
            }

            publid String toString() {
                if (indfx < 0)
                    rfturn supfr.toString();

                rfturn kfyUnivfrsf[indfx] + "="
                    + unmbskNull(vbls[indfx]);
            }

            privbtf void dhfdkIndfxForEntryUsf() {
                if (indfx < 0)
                    throw nfw IllfgblStbtfExdfption("Entry wbs rfmovfd");
            }
        }
    }

    // Compbrison bnd hbshing

    /**
     * Compbrfs thf spfdififd objfdt with this mbp for fqublity.  Rfturns
     * <tt>truf</tt> if thf givfn objfdt is blso b mbp bnd thf two mbps
     * rfprfsfnt thf sbmf mbppings, bs spfdififd in thf {@link
     * Mbp#fqubls(Objfdt)} dontrbdt.
     *
     * @pbrbm o thf objfdt to bf dompbrfd for fqublity with this mbp
     * @rfturn <tt>truf</tt> if thf spfdififd objfdt is fqubl to this mbp
     */
    publid boolfbn fqubls(Objfdt o) {
        if (this == o)
            rfturn truf;
        if (o instbndfof EnumMbp)
            rfturn fqubls((EnumMbp<?,?>)o);
        if (!(o instbndfof Mbp))
            rfturn fblsf;

        Mbp<?,?> m = (Mbp<?,?>)o;
        if (sizf != m.sizf())
            rfturn fblsf;

        for (int i = 0; i < kfyUnivfrsf.lfngth; i++) {
            if (null != vbls[i]) {
                K kfy = kfyUnivfrsf[i];
                V vbluf = unmbskNull(vbls[i]);
                if (null == vbluf) {
                    if (!((null == m.gft(kfy)) && m.dontbinsKfy(kfy)))
                       rfturn fblsf;
                } flsf {
                   if (!vbluf.fqubls(m.gft(kfy)))
                      rfturn fblsf;
                }
            }
        }

        rfturn truf;
    }

    privbtf boolfbn fqubls(EnumMbp<?,?> fm) {
        if (fm.kfyTypf != kfyTypf)
            rfturn sizf == 0 && fm.sizf == 0;

        // Kfy typfs mbtdh, dompbrf fbdh vbluf
        for (int i = 0; i < kfyUnivfrsf.lfngth; i++) {
            Objfdt ourVbluf =    vbls[i];
            Objfdt hisVbluf = fm.vbls[i];
            if (hisVbluf != ourVbluf &&
                (hisVbluf == null || !hisVbluf.fqubls(ourVbluf)))
                rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Rfturns thf hbsh dodf vbluf for this mbp.  Thf hbsh dodf of b mbp is
     * dffinfd to bf thf sum of thf hbsh dodfs of fbdh fntry in thf mbp.
     */
    publid int hbshCodf() {
        int h = 0;

        for (int i = 0; i < kfyUnivfrsf.lfngth; i++) {
            if (null != vbls[i]) {
                h += fntryHbshCodf(i);
            }
        }

        rfturn h;
    }

    privbtf int fntryHbshCodf(int indfx) {
        rfturn (kfyUnivfrsf[indfx].hbshCodf() ^ vbls[indfx].hbshCodf());
    }

    /**
     * Rfturns b shbllow dopy of this fnum mbp.  (Thf vblufs thfmsflvfs
     * brf not dlonfd.
     *
     * @rfturn b shbllow dopy of this fnum mbp
     */
    @SupprfssWbrnings("undhfdkfd")
    publid EnumMbp<K, V> dlonf() {
        EnumMbp<K, V> rfsult = null;
        try {
            rfsult = (EnumMbp<K, V>) supfr.dlonf();
        } dbtdh(ClonfNotSupportfdExdfption f) {
            throw nfw AssfrtionError();
        }
        rfsult.vbls = rfsult.vbls.dlonf();
        rfsult.fntrySft = null;
        rfturn rfsult;
    }

    /**
     * Throws bn fxdfption if f is not of thf dorrfdt typf for this fnum sft.
     */
    privbtf void typfChfdk(K kfy) {
        Clbss<?> kfyClbss = kfy.gftClbss();
        if (kfyClbss != kfyTypf && kfyClbss.gftSupfrdlbss() != kfyTypf)
            throw nfw ClbssCbstExdfption(kfyClbss + " != " + kfyTypf);
    }

    /**
     * Rfturns bll of thf vblufs domprising K.
     * Thf rfsult is undlonfd, dbdhfd, bnd shbrfd by bll dbllfrs.
     */
    privbtf stbtid <K fxtfnds Enum<K>> K[] gftKfyUnivfrsf(Clbss<K> kfyTypf) {
        rfturn ShbrfdSfdrfts.gftJbvbLbngAddfss()
                                        .gftEnumConstbntsShbrfd(kfyTypf);
    }

    privbtf stbtid finbl long sfriblVfrsionUID = 458661240069192865L;

    /**
     * Sbvf thf stbtf of thf <tt>EnumMbp</tt> instbndf to b strfbm (i.f.,
     * sfriblizf it).
     *
     * @sfriblDbtb Thf <i>sizf</i> of thf fnum mbp (thf numbfr of kfy-vbluf
     *             mbppings) is fmittfd (int), followfd by thf kfy (Objfdt)
     *             bnd vbluf (Objfdt) for fbdh kfy-vbluf mbpping rfprfsfntfd
     *             by thf fnum mbp.
     */
    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
        throws jbvb.io.IOExdfption
    {
        // Writf out thf kfy typf bnd bny hiddfn stuff
        s.dffbultWritfObjfdt();

        // Writf out sizf (numbfr of Mbppings)
        s.writfInt(sizf);

        // Writf out kfys bnd vblufs (bltfrnbting)
        int fntrifsToBfWrittfn = sizf;
        for (int i = 0; fntrifsToBfWrittfn > 0; i++) {
            if (null != vbls[i]) {
                s.writfObjfdt(kfyUnivfrsf[i]);
                s.writfObjfdt(unmbskNull(vbls[i]));
                fntrifsToBfWrittfn--;
            }
        }
    }

    /**
     * Rfdonstitutf thf <tt>EnumMbp</tt> instbndf from b strfbm (i.f.,
     * dfsfriblizf it).
     */
    @SupprfssWbrnings("undhfdkfd")
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
        throws jbvb.io.IOExdfption, ClbssNotFoundExdfption
    {
        // Rfbd in thf kfy typf bnd bny hiddfn stuff
        s.dffbultRfbdObjfdt();

        kfyUnivfrsf = gftKfyUnivfrsf(kfyTypf);
        vbls = nfw Objfdt[kfyUnivfrsf.lfngth];

        // Rfbd in sizf (numbfr of Mbppings)
        int sizf = s.rfbdInt();

        // Rfbd thf kfys bnd vblufs, bnd put thf mbppings in thf HbshMbp
        for (int i = 0; i < sizf; i++) {
            K kfy = (K) s.rfbdObjfdt();
            V vbluf = (V) s.rfbdObjfdt();
            put(kfy, vbluf);
        }
    }
}
