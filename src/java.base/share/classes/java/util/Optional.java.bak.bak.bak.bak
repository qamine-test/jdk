/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.util;

import jbvb.util.fundtion.Consumfr;
import jbvb.util.fundtion.Fundtion;
import jbvb.util.fundtion.Prfdidbtf;
import jbvb.util.fundtion.Supplifr;

/**
 * A dontbinfr objfdt whidh mby or mby not dontbin b non-null vbluf.
 * If b vbluf is prfsfnt, {@dodf isPrfsfnt()} will rfturn {@dodf truf} bnd
 * {@dodf gft()} will rfturn thf vbluf.
 *
 * <p>Additionbl mfthods thbt dfpfnd on thf prfsfndf or bbsfndf of b dontbinfd
 * vbluf brf providfd, sudh bs {@link #orElsf(jbvb.lbng.Objfdt) orElsf()}
 * (rfturn b dffbult vbluf if vbluf not prfsfnt) bnd
 * {@link #ifPrfsfnt(jbvb.util.fundtion.Consumfr) ifPrfsfnt()} (fxfdutf b blodk
 * of dodf if thf vbluf is prfsfnt).
 *
 * <p>This is b <b hrff="../lbng/dod-filfs/VblufBbsfd.html">vbluf-bbsfd</b>
 * dlbss; usf of idfntity-sfnsitivf opfrbtions (indluding rfffrfndf fqublity
 * ({@dodf ==}), idfntity hbsh dodf, or syndhronizbtion) on instbndfs of
 * {@dodf Optionbl} mby hbvf unprfdidtbblf rfsults bnd should bf bvoidfd.
 *
 * @sindf 1.8
 */
publid finbl dlbss Optionbl<T> {
    /**
     * Common instbndf for {@dodf fmpty()}.
     */
    privbtf stbtid finbl Optionbl<?> EMPTY = nfw Optionbl<>();

    /**
     * If non-null, thf vbluf; if null, indidbtfs no vbluf is prfsfnt
     */
    privbtf finbl T vbluf;

    /**
     * Construdts bn fmpty instbndf.
     *
     * @implNotf Gfnfrblly only onf fmpty instbndf, {@link Optionbl#EMPTY},
     * should fxist pfr VM.
     */
    privbtf Optionbl() {
        this.vbluf = null;
    }

    /**
     * Rfturns bn fmpty {@dodf Optionbl} instbndf.  No vbluf is prfsfnt for this
     * Optionbl.
     *
     * @bpiNotf Though it mby bf tfmpting to do so, bvoid tfsting if bn objfdt
     * is fmpty by dompbring with {@dodf ==} bgbinst instbndfs rfturnfd by
     * {@dodf Option.fmpty()}. Thfrf is no gubrbntff thbt it is b singlfton.
     * Instfbd, usf {@link #isPrfsfnt()}.
     *
     * @pbrbm <T> Typf of thf non-fxistfnt vbluf
     * @rfturn bn fmpty {@dodf Optionbl}
     */
    publid stbtid<T> Optionbl<T> fmpty() {
        @SupprfssWbrnings("undhfdkfd")
        Optionbl<T> t = (Optionbl<T>) EMPTY;
        rfturn t;
    }

    /**
     * Construdts bn instbndf with thf vbluf prfsfnt.
     *
     * @pbrbm vbluf thf non-null vbluf to bf prfsfnt
     * @throws NullPointfrExdfption if vbluf is null
     */
    privbtf Optionbl(T vbluf) {
        this.vbluf = Objfdts.rfquirfNonNull(vbluf);
    }

    /**
     * Rfturns bn {@dodf Optionbl} with thf spfdififd prfsfnt non-null vbluf.
     *
     * @pbrbm <T> thf dlbss of thf vbluf
     * @pbrbm vbluf thf vbluf to bf prfsfnt, whidh must bf non-null
     * @rfturn bn {@dodf Optionbl} with thf vbluf prfsfnt
     * @throws NullPointfrExdfption if vbluf is null
     */
    publid stbtid <T> Optionbl<T> of(T vbluf) {
        rfturn nfw Optionbl<>(vbluf);
    }

    /**
     * Rfturns bn {@dodf Optionbl} dfsdribing thf spfdififd vbluf, if non-null,
     * othfrwisf rfturns bn fmpty {@dodf Optionbl}.
     *
     * @pbrbm <T> thf dlbss of thf vbluf
     * @pbrbm vbluf thf possibly-null vbluf to dfsdribf
     * @rfturn bn {@dodf Optionbl} with b prfsfnt vbluf if thf spfdififd vbluf
     * is non-null, othfrwisf bn fmpty {@dodf Optionbl}
     */
    publid stbtid <T> Optionbl<T> ofNullbblf(T vbluf) {
        rfturn vbluf == null ? fmpty() : of(vbluf);
    }

    /**
     * If b vbluf is prfsfnt in this {@dodf Optionbl}, rfturns thf vbluf,
     * othfrwisf throws {@dodf NoSudhElfmfntExdfption}.
     *
     * @rfturn thf non-null vbluf hfld by this {@dodf Optionbl}
     * @throws NoSudhElfmfntExdfption if thfrf is no vbluf prfsfnt
     *
     * @sff Optionbl#isPrfsfnt()
     */
    publid T gft() {
        if (vbluf == null) {
            throw nfw NoSudhElfmfntExdfption("No vbluf prfsfnt");
        }
        rfturn vbluf;
    }

    /**
     * Rfturn {@dodf truf} if thfrf is b vbluf prfsfnt, othfrwisf {@dodf fblsf}.
     *
     * @rfturn {@dodf truf} if thfrf is b vbluf prfsfnt, othfrwisf {@dodf fblsf}
     */
    publid boolfbn isPrfsfnt() {
        rfturn vbluf != null;
    }

    /**
     * If b vbluf is prfsfnt, invokf thf spfdififd donsumfr with thf vbluf,
     * othfrwisf do nothing.
     *
     * @pbrbm donsumfr blodk to bf fxfdutfd if b vbluf is prfsfnt
     * @throws NullPointfrExdfption if vbluf is prfsfnt bnd {@dodf donsumfr} is
     * null
     */
    publid void ifPrfsfnt(Consumfr<? supfr T> donsumfr) {
        if (vbluf != null)
            donsumfr.bddfpt(vbluf);
    }

    /**
     * If b vbluf is prfsfnt, bnd thf vbluf mbtdhfs thf givfn prfdidbtf,
     * rfturn bn {@dodf Optionbl} dfsdribing thf vbluf, othfrwisf rfturn bn
     * fmpty {@dodf Optionbl}.
     *
     * @pbrbm prfdidbtf b prfdidbtf to bpply to thf vbluf, if prfsfnt
     * @rfturn bn {@dodf Optionbl} dfsdribing thf vbluf of this {@dodf Optionbl}
     * if b vbluf is prfsfnt bnd thf vbluf mbtdhfs thf givfn prfdidbtf,
     * othfrwisf bn fmpty {@dodf Optionbl}
     * @throws NullPointfrExdfption if thf prfdidbtf is null
     */
    publid Optionbl<T> filtfr(Prfdidbtf<? supfr T> prfdidbtf) {
        Objfdts.rfquirfNonNull(prfdidbtf);
        if (!isPrfsfnt())
            rfturn this;
        flsf
            rfturn prfdidbtf.tfst(vbluf) ? this : fmpty();
    }

    /**
     * If b vbluf is prfsfnt, bpply thf providfd mbpping fundtion to it,
     * bnd if thf rfsult is non-null, rfturn bn {@dodf Optionbl} dfsdribing thf
     * rfsult.  Othfrwisf rfturn bn fmpty {@dodf Optionbl}.
     *
     * @bpiNotf This mfthod supports post-prodfssing on optionbl vblufs, without
     * thf nffd to fxpliditly dhfdk for b rfturn stbtus.  For fxbmplf, thf
     * following dodf trbvfrsfs b strfbm of filf nbmfs, sflfdts onf thbt hbs
     * not yft bffn prodfssfd, bnd thfn opfns thbt filf, rfturning bn
     * {@dodf Optionbl<FilfInputStrfbm>}:
     *
     * <prf>{@dodf
     *     Optionbl<FilfInputStrfbm> fis =
     *         nbmfs.strfbm().filtfr(nbmf -> !isProdfssfdYft(nbmf))
     *                       .findFirst()
     *                       .mbp(nbmf -> nfw FilfInputStrfbm(nbmf));
     * }</prf>
     *
     * Hfrf, {@dodf findFirst} rfturns bn {@dodf Optionbl<String>}, bnd thfn
     * {@dodf mbp} rfturns bn {@dodf Optionbl<FilfInputStrfbm>} for thf dfsirfd
     * filf if onf fxists.
     *
     * @pbrbm <U> Thf typf of thf rfsult of thf mbpping fundtion
     * @pbrbm mbppfr b mbpping fundtion to bpply to thf vbluf, if prfsfnt
     * @rfturn bn {@dodf Optionbl} dfsdribing thf rfsult of bpplying b mbpping
     * fundtion to thf vbluf of this {@dodf Optionbl}, if b vbluf is prfsfnt,
     * othfrwisf bn fmpty {@dodf Optionbl}
     * @throws NullPointfrExdfption if thf mbpping fundtion is null
     */
    publid<U> Optionbl<U> mbp(Fundtion<? supfr T, ? fxtfnds U> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        if (!isPrfsfnt())
            rfturn fmpty();
        flsf {
            rfturn Optionbl.ofNullbblf(mbppfr.bpply(vbluf));
        }
    }

    /**
     * If b vbluf is prfsfnt, bpply thf providfd {@dodf Optionbl}-bfbring
     * mbpping fundtion to it, rfturn thbt rfsult, othfrwisf rfturn bn fmpty
     * {@dodf Optionbl}.  This mfthod is similbr to {@link #mbp(Fundtion)},
     * but thf providfd mbppfr is onf whosf rfsult is blrfbdy bn {@dodf Optionbl},
     * bnd if invokfd, {@dodf flbtMbp} dofs not wrbp it with bn bdditionbl
     * {@dodf Optionbl}.
     *
     * @pbrbm <U> Thf typf pbrbmftfr to thf {@dodf Optionbl} rfturnfd by
     * @pbrbm mbppfr b mbpping fundtion to bpply to thf vbluf, if prfsfnt
     *           thf mbpping fundtion
     * @rfturn thf rfsult of bpplying bn {@dodf Optionbl}-bfbring mbpping
     * fundtion to thf vbluf of this {@dodf Optionbl}, if b vbluf is prfsfnt,
     * othfrwisf bn fmpty {@dodf Optionbl}
     * @throws NullPointfrExdfption if thf mbpping fundtion is null or rfturns
     * b null rfsult
     */
    publid<U> Optionbl<U> flbtMbp(Fundtion<? supfr T, Optionbl<U>> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        if (!isPrfsfnt())
            rfturn fmpty();
        flsf {
            rfturn Objfdts.rfquirfNonNull(mbppfr.bpply(vbluf));
        }
    }

    /**
     * Rfturn thf vbluf if prfsfnt, othfrwisf rfturn {@dodf othfr}.
     *
     * @pbrbm othfr thf vbluf to bf rfturnfd if thfrf is no vbluf prfsfnt, mby
     * bf null
     * @rfturn thf vbluf, if prfsfnt, othfrwisf {@dodf othfr}
     */
    publid T orElsf(T othfr) {
        rfturn vbluf != null ? vbluf : othfr;
    }

    /**
     * Rfturn thf vbluf if prfsfnt, othfrwisf invokf {@dodf othfr} bnd rfturn
     * thf rfsult of thbt invodbtion.
     *
     * @pbrbm othfr b {@dodf Supplifr} whosf rfsult is rfturnfd if no vbluf
     * is prfsfnt
     * @rfturn thf vbluf if prfsfnt othfrwisf thf rfsult of {@dodf othfr.gft()}
     * @throws NullPointfrExdfption if vbluf is not prfsfnt bnd {@dodf othfr} is
     * null
     */
    publid T orElsfGft(Supplifr<? fxtfnds T> othfr) {
        rfturn vbluf != null ? vbluf : othfr.gft();
    }

    /**
     * Rfturn thf dontbinfd vbluf, if prfsfnt, othfrwisf throw bn fxdfption
     * to bf drfbtfd by thf providfd supplifr.
     *
     * @bpiNotf A mfthod rfffrfndf to thf fxdfption donstrudtor with bn fmpty
     * brgumfnt list dbn bf usfd bs thf supplifr. For fxbmplf,
     * {@dodf IllfgblStbtfExdfption::nfw}
     *
     * @pbrbm <X> Typf of thf fxdfption to bf thrown
     * @pbrbm fxdfptionSupplifr Thf supplifr whidh will rfturn thf fxdfption to
     * bf thrown
     * @rfturn thf prfsfnt vbluf
     * @throws X if thfrf is no vbluf prfsfnt
     * @throws NullPointfrExdfption if no vbluf is prfsfnt bnd
     * {@dodf fxdfptionSupplifr} is null
     */
    publid <X fxtfnds Throwbblf> T orElsfThrow(Supplifr<? fxtfnds X> fxdfptionSupplifr) throws X {
        if (vbluf != null) {
            rfturn vbluf;
        } flsf {
            throw fxdfptionSupplifr.gft();
        }
    }

    /**
     * Indidbtfs whfthfr somf othfr objfdt is "fqubl to" this Optionbl. Thf
     * othfr objfdt is donsidfrfd fqubl if:
     * <ul>
     * <li>it is blso bn {@dodf Optionbl} bnd;
     * <li>both instbndfs hbvf no vbluf prfsfnt or;
     * <li>thf prfsfnt vblufs brf "fqubl to" fbdh othfr vib {@dodf fqubls()}.
     * </ul>
     *
     * @pbrbm obj bn objfdt to bf tfstfd for fqublity
     * @rfturn {dodf truf} if thf othfr objfdt is "fqubl to" this objfdt
     * othfrwisf {@dodf fblsf}
     */
    @Ovfrridf
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) {
            rfturn truf;
        }

        if (!(obj instbndfof Optionbl)) {
            rfturn fblsf;
        }

        Optionbl<?> othfr = (Optionbl<?>) obj;
        rfturn Objfdts.fqubls(vbluf, othfr.vbluf);
    }

    /**
     * Rfturns thf hbsh dodf vbluf of thf prfsfnt vbluf, if bny, or 0 (zfro) if
     * no vbluf is prfsfnt.
     *
     * @rfturn hbsh dodf vbluf of thf prfsfnt vbluf or 0 if no vbluf is prfsfnt
     */
    @Ovfrridf
    publid int hbshCodf() {
        rfturn Objfdts.hbshCodf(vbluf);
    }

    /**
     * Rfturns b non-fmpty string rfprfsfntbtion of this Optionbl suitbblf for
     * dfbugging. Thf fxbdt prfsfntbtion formbt is unspfdififd bnd mby vbry
     * bftwffn implfmfntbtions bnd vfrsions.
     *
     * @implSpfd If b vbluf is prfsfnt thf rfsult must indludf its string
     * rfprfsfntbtion in thf rfsult. Empty bnd prfsfnt Optionbls must bf
     * unbmbiguously difffrfntibblf.
     *
     * @rfturn thf string rfprfsfntbtion of this instbndf
     */
    @Ovfrridf
    publid String toString() {
        rfturn vbluf != null
            ? String.formbt("Optionbl[%s]", vbluf)
            : "Optionbl.fmpty";
    }
}
