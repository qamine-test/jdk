/*
 * Copyright (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.rfgfx;

import jbvb.tfxt.Normblizfr;
import jbvb.util.Lodblf;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.ArrbyList;
import jbvb.util.HbshMbp;
import jbvb.util.Arrbys;
import jbvb.util.NoSudhElfmfntExdfption;
import jbvb.util.Splitfrbtor;
import jbvb.util.Splitfrbtors;
import jbvb.util.fundtion.Prfdidbtf;
import jbvb.util.strfbm.Strfbm;
import jbvb.util.strfbm.StrfbmSupport;


/**
 * A dompilfd rfprfsfntbtion of b rfgulbr fxprfssion.
 *
 * <p> A rfgulbr fxprfssion, spfdififd bs b string, must first bf dompilfd into
 * bn instbndf of this dlbss.  Thf rfsulting pbttfrn dbn thfn bf usfd to drfbtf
 * b {@link Mbtdhfr} objfdt thbt dbn mbtdh brbitrbry {@linkplbin
 * jbvb.lbng.ChbrSfqufndf dhbrbdtfr sfqufndfs} bgbinst thf rfgulbr
 * fxprfssion.  All of thf stbtf involvfd in pfrforming b mbtdh rfsidfs in thf
 * mbtdhfr, so mbny mbtdhfrs dbn shbrf thf sbmf pbttfrn.
 *
 * <p> A typidbl invodbtion sfqufndf is thus
 *
 * <blodkquotf><prf>
 * Pbttfrn p = Pbttfrn.{@link #dompilf dompilf}("b*b");
 * Mbtdhfr m = p.{@link #mbtdhfr mbtdhfr}("bbbbbb");
 * boolfbn b = m.{@link Mbtdhfr#mbtdhfs mbtdhfs}();</prf></blodkquotf>
 *
 * <p> A {@link #mbtdhfs mbtdhfs} mfthod is dffinfd by this dlbss bs b
 * donvfnifndf for whfn b rfgulbr fxprfssion is usfd just ondf.  This mfthod
 * dompilfs bn fxprfssion bnd mbtdhfs bn input sfqufndf bgbinst it in b singlf
 * invodbtion.  Thf stbtfmfnt
 *
 * <blodkquotf><prf>
 * boolfbn b = Pbttfrn.mbtdhfs("b*b", "bbbbbb");</prf></blodkquotf>
 *
 * is fquivblfnt to thf thrff stbtfmfnts bbovf, though for rfpfbtfd mbtdhfs it
 * is lfss fffidifnt sindf it dofs not bllow thf dompilfd pbttfrn to bf rfusfd.
 *
 * <p> Instbndfs of this dlbss brf immutbblf bnd brf sbff for usf by multiplf
 * dondurrfnt thrfbds.  Instbndfs of thf {@link Mbtdhfr} dlbss brf not sbff for
 * sudh usf.
 *
 *
 * <h3><b nbmf="sum">Summbry of rfgulbr-fxprfssion donstrudts</b></h3>
 *
 * <tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *  summbry="Rfgulbr fxprfssion donstrudts, bnd whbt thfy mbtdh">
 *
 * <tr blign="lfft">
 * <th blign="lfft" id="donstrudt">Construdt</th>
 * <th blign="lfft" id="mbtdhfs">Mbtdhfs</th>
 * </tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="dhbrbdtfrs">Chbrbdtfrs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><i>x</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr <i>x</i></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\\</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf bbdkslbsh dhbrbdtfr</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\0</tt><i>n</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with odtbl vbluf <tt>0</tt><i>n</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\0</tt><i>nn</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with odtbl vbluf <tt>0</tt><i>nn</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\0</tt><i>mnn</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with odtbl vbluf <tt>0</tt><i>mnn</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>m</i>&nbsp;<tt>&lt;=</tt>&nbsp;3,
 *         0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\x</tt><i>hh</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with hfxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>hh</i></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>&#92;u</tt><i>hhhh</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with hfxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>hhhh</i></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>&#92;x</tt><i>{h...h}</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dhbrbdtfr with hfxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>h...h</i>
 *         ({@link jbvb.lbng.Chbrbdtfr#MIN_CODE_POINT Chbrbdtfr.MIN_CODE_POINT}
 *         &nbsp;&lt;=&nbsp;<tt>0x</tt><i>h...h</i>&nbsp;&lt;=&nbsp;
 *          {@link jbvb.lbng.Chbrbdtfr#MAX_CODE_POINT Chbrbdtfr.MAX_CODE_POINT})</td></tr>
 * <tr><td vblign="top" hfbdfrs="mbtdhfs"><tt>\t</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf tbb dhbrbdtfr (<tt>'&#92;u0009'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\n</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf nfwlinf (linf fffd) dhbrbdtfr (<tt>'&#92;u000A'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\r</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf dbrribgf-rfturn dhbrbdtfr (<tt>'&#92;u000D'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\f</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf form-fffd dhbrbdtfr (<tt>'&#92;u000C'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\b</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf blfrt (bfll) dhbrbdtfr (<tt>'&#92;u0007'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\f</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf fsdbpf dhbrbdtfr (<tt>'&#92;u001B'</tt>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dhbrbdtfrs"><tt>\d</tt><i>x</i></td>
 *     <td hfbdfrs="mbtdhfs">Thf dontrol dhbrbdtfr dorrfsponding to <i>x</i></td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="dlbssfs">Chbrbdtfr dlbssfs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [bbd]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf b}, {@dodf b}, or {@dodf d} (simplf dlbss)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [^bbd]}</td>
 *     <td hfbdfrs="mbtdhfs">Any dhbrbdtfr fxdfpt {@dodf b}, {@dodf b}, or {@dodf d} (nfgbtion)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [b-zA-Z]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf b} through {@dodf z}
 *         or {@dodf A} through {@dodf Z}, indlusivf (rbngf)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [b-d[m-p]]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf b} through {@dodf d},
 *      or {@dodf m} through {@dodf p}: {@dodf [b-dm-p]} (union)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[dff]]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf d}, {@dodf f}, or {@dodf f} (intfrsfdtion)</tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[^bd]]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf b} through {@dodf z},
 *         fxdfpt for {@dodf b} bnd {@dodf d}: {@dodf [bd-z]} (subtrbdtion)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[^m-p]]}</td>
 *     <td hfbdfrs="mbtdhfs">{@dodf b} through {@dodf z},
 *          bnd not {@dodf m} through {@dodf p}: {@dodf [b-lq-z]}(subtrbdtion)</td></tr>
 * <tr><th>&nbsp;</th></tr>
 *
 * <tr blign="lfft"><th dolspbn="2" id="prfdff">Prfdffinfd dhbrbdtfr dlbssfs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>.</tt></td>
 *     <td hfbdfrs="mbtdhfs">Any dhbrbdtfr (mby or mby not mbtdh <b hrff="#lt">linf tfrminbtors</b>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\d</tt></td>
 *     <td hfbdfrs="mbtdhfs">A digit: <tt>[0-9]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\D</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-digit: <tt>[^0-9]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\h</tt></td>
 *     <td hfbdfrs="mbtdhfs">A horizontbl whitfspbdf dhbrbdtfr:
 *     <tt>[ \t\xA0&#92;u1680&#92;u180f&#92;u2000-&#92;u200b&#92;u202f&#92;u205f&#92;u3000]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\H</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-horizontbl whitfspbdf dhbrbdtfr: <tt>[^\h]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\s</tt></td>
 *     <td hfbdfrs="mbtdhfs">A whitfspbdf dhbrbdtfr: <tt>[ \t\n\x0B\f\r]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\S</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-whitfspbdf dhbrbdtfr: <tt>[^\s]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\v</tt></td>
 *     <td hfbdfrs="mbtdhfs">A vfrtidbl whitfspbdf dhbrbdtfr: <tt>[\n\x0B\f\r\x85&#92;u2028&#92;u2029]</tt>
 *     </td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\V</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-vfrtidbl whitfspbdf dhbrbdtfr: <tt>[^\v]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\w</tt></td>
 *     <td hfbdfrs="mbtdhfs">A word dhbrbdtfr: <tt>[b-zA-Z_0-9]</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt prfdff"><tt>\W</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-word dhbrbdtfr: <tt>[^\w]</tt></td></tr>
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="posix"><b>POSIX dhbrbdtfr dlbssfs (US-ASCII only)</b></th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Lowfr}}</td>
 *     <td hfbdfrs="mbtdhfs">A lowfr-dbsf blphbbftid dhbrbdtfr: {@dodf [b-z]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Uppfr}}</td>
 *     <td hfbdfrs="mbtdhfs">An uppfr-dbsf blphbbftid dhbrbdtfr:{@dodf [A-Z]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{ASCII}}</td>
 *     <td hfbdfrs="mbtdhfs">All ASCII:{@dodf [\x00-\x7F]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Alphb}}</td>
 *     <td hfbdfrs="mbtdhfs">An blphbbftid dhbrbdtfr:{@dodf [\p{Lowfr}\p{Uppfr}]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Digit}}</td>
 *     <td hfbdfrs="mbtdhfs">A dfdimbl digit: {@dodf [0-9]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Alnum}}</td>
 *     <td hfbdfrs="mbtdhfs">An blphbnumfrid dhbrbdtfr:{@dodf [\p{Alphb}\p{Digit}]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Pundt}}</td>
 *     <td hfbdfrs="mbtdhfs">Pundtubtion: Onf of {@dodf !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~}</td></tr>
 *     <!-- {@dodf [\!"#\$%&'\(\)\*\+,\-\./:;\<=\>\?@\[\\\]\^_`\{\|\}~]}
 *          {@dodf [\X21-\X2F\X31-\X40\X5B-\X60\X7B-\X7E]} -->
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Grbph}}</td>
 *     <td hfbdfrs="mbtdhfs">A visiblf dhbrbdtfr: {@dodf [\p{Alnum}\p{Pundt}]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Print}}</td>
 *     <td hfbdfrs="mbtdhfs">A printbblf dhbrbdtfr: {@dodf [\p{Grbph}\x20]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Blbnk}}</td>
 *     <td hfbdfrs="mbtdhfs">A spbdf or b tbb: {@dodf [ \t]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Cntrl}}</td>
 *     <td hfbdfrs="mbtdhfs">A dontrol dhbrbdtfr: {@dodf [\x00-\x1F\x7F]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{XDigit}}</td>
 *     <td hfbdfrs="mbtdhfs">A hfxbdfdimbl digit: {@dodf [0-9b-fA-F]}</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt posix">{@dodf \p{Spbdf}}</td>
 *     <td hfbdfrs="mbtdhfs">A whitfspbdf dhbrbdtfr: {@dodf [ \t\n\x0B\f\r]}</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2">jbvb.lbng.Chbrbdtfr dlbssfs (simplf <b hrff="#jdd">jbvb dhbrbdtfr typf</b>)</th></tr>
 *
 * <tr><td vblign="top"><tt>\p{jbvbLowfrCbsf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Chbrbdtfr.isLowfrCbsf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbUppfrCbsf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Chbrbdtfr.isUppfrCbsf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbWhitfspbdf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Chbrbdtfr.isWhitfspbdf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbMirrorfd}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Chbrbdtfr.isMirrorfd()</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="unidodf">Clbssfs for Unidodf sdripts, blodks, dbtfgorifs bnd binbry propfrtifs</th></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \p{IsLbtin}}</td>
 *     <td hfbdfrs="mbtdhfs">A Lbtin&nbsp;sdript dhbrbdtfr (<b hrff="#usd">sdript</b>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \p{InGrffk}}</td>
 *     <td hfbdfrs="mbtdhfs">A dhbrbdtfr in thf Grffk&nbsp;blodk (<b hrff="#ubd">blodk</b>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \p{Lu}}</td>
 *     <td hfbdfrs="mbtdhfs">An uppfrdbsf lfttfr (<b hrff="#udd">dbtfgory</b>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \p{IsAlphbbftid}}</td>
 *     <td hfbdfrs="mbtdhfs">An blphbbftid dhbrbdtfr (<b hrff="#ubpd">binbry propfrty</b>)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \p{Sd}}</td>
 *     <td hfbdfrs="mbtdhfs">A durrfndy symbol</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf \P{InGrffk}}</td>
 *     <td hfbdfrs="mbtdhfs">Any dhbrbdtfr fxdfpt onf in thf Grffk blodk (nfgbtion)</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt unidodf">{@dodf [\p{L}&&[^\p{Lu}]]}</td>
 *     <td hfbdfrs="mbtdhfs">Any lfttfr fxdfpt bn uppfrdbsf lfttfr (subtrbdtion)</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="bounds">Boundbry mbtdhfrs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>^</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf bfginning of b linf</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>$</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf fnd of b linf</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\b</tt></td>
 *     <td hfbdfrs="mbtdhfs">A word boundbry</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\B</tt></td>
 *     <td hfbdfrs="mbtdhfs">A non-word boundbry</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\A</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf bfginning of thf input</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\G</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf fnd of thf prfvious mbtdh</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\Z</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf fnd of thf input but for thf finbl
 *         <b hrff="#lt">tfrminbtor</b>, if&nbsp;bny</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt bounds"><tt>\z</tt></td>
 *     <td hfbdfrs="mbtdhfs">Thf fnd of thf input</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="linffnding">Linfbrfbk mbtdhfr</th></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt linffnding"><tt>\R</tt></td>
 *     <td hfbdfrs="mbtdhfs">Any Unidodf linfbrfbk sfqufndf, is fquivblfnt to
 *     <tt>&#92;u000D&#92;u000A|[&#92;u000A&#92;u000B&#92;u000C&#92;u000D&#92;u0085&#92;u2028&#92;u2029]
 *     </tt></td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="grffdy">Grffdy qubntififrs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>*</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>}</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>,}</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> but not morf thbn <i>m</i> timfs</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="rflud">Rfludtbnt qubntififrs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>??</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>*?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>+?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>}?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>,}?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}?</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> but not morf thbn <i>m</i> timfs</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="poss">Possfssivf qubntififrs</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>?+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>*+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>++</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>}+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>,}+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}+</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bt lfbst <i>n</i> but not morf thbn <i>m</i> timfs</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="logidbl">Logidbl opfrbtors</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt logidbl"><i>XY</i></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i> followfd by <i>Y</i></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt logidbl"><i>X</i><tt>|</tt><i>Y</i></td>
 *     <td hfbdfrs="mbtdhfs">Eithfr <i>X</i> or <i>Y</i></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt logidbl"><tt>(</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs">X, bs b <b hrff="#dg">dbpturing group</b></td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="bbdkrff">Bbdk rfffrfndfs</th></tr>
 *
 * <tr><td vblign="bottom" hfbdfrs="donstrudt bbdkrff"><tt>\</tt><i>n</i></td>
 *     <td vblign="bottom" hfbdfrs="mbtdhfs">Whbtfvfr thf <i>n</i><sup>th</sup>
 *     <b hrff="#dg">dbpturing group</b> mbtdhfd</td></tr>
 *
 * <tr><td vblign="bottom" hfbdfrs="donstrudt bbdkrff"><tt>\</tt><i>k</i>&lt;<i>nbmf</i>&gt;</td>
 *     <td vblign="bottom" hfbdfrs="mbtdhfs">Whbtfvfr thf
 *     <b hrff="#groupnbmf">nbmfd-dbpturing group</b> "nbmf" mbtdhfd</td></tr>
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="quot">Quotbtion</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt quot"><tt>\</tt></td>
 *     <td hfbdfrs="mbtdhfs">Nothing, but quotfs thf following dhbrbdtfr</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt quot"><tt>\Q</tt></td>
 *     <td hfbdfrs="mbtdhfs">Nothing, but quotfs bll dhbrbdtfrs until <tt>\E</tt></td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt quot"><tt>\E</tt></td>
 *     <td hfbdfrs="mbtdhfs">Nothing, but fnds quoting stbrtfd by <tt>\Q</tt></td></tr>
 *     <!-- Mftbdhbrs: !$()*+.<>?[\]^{|} -->
 *
 * <tr><th>&nbsp;</th></tr>
 * <tr blign="lfft"><th dolspbn="2" id="spfdibl">Spfdibl donstrudts (nbmfd-dbpturing bnd non-dbpturing)</th></tr>
 *
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?&lt;<b hrff="#groupnbmf">nbmf</b>&gt;</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bs b nbmfd-dbpturing group</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?:</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bs b non-dbpturing group</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?idmsuxU-idmsuxU)&nbsp;</tt></td>
 *     <td hfbdfrs="mbtdhfs">Nothing, but turns mbtdh flbgs <b hrff="#CASE_INSENSITIVE">i</b>
 * <b hrff="#UNIX_LINES">d</b> <b hrff="#MULTILINE">m</b> <b hrff="#DOTALL">s</b>
 * <b hrff="#UNICODE_CASE">u</b> <b hrff="#COMMENTS">x</b> <b hrff="#UNICODE_CHARACTER_CLASS">U</b>
 * on - off</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?idmsux-idmsux:</tt><i>X</i><tt>)</tt>&nbsp;&nbsp;</td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bs b <b hrff="#dg">non-dbpturing group</b> with thf
 *         givfn flbgs <b hrff="#CASE_INSENSITIVE">i</b> <b hrff="#UNIX_LINES">d</b>
 * <b hrff="#MULTILINE">m</b> <b hrff="#DOTALL">s</b> <b hrff="#UNICODE_CASE">u</b >
 * <b hrff="#COMMENTS">x</b> on - off</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?=</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, vib zfro-width positivf lookbhfbd</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?!</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, vib zfro-width nfgbtivf lookbhfbd</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?&lt;=</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, vib zfro-width positivf lookbfhind</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?&lt;!</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, vib zfro-width nfgbtivf lookbfhind</td></tr>
 * <tr><td vblign="top" hfbdfrs="donstrudt spfdibl"><tt>(?&gt;</tt><i>X</i><tt>)</tt></td>
 *     <td hfbdfrs="mbtdhfs"><i>X</i>, bs bn indfpfndfnt, non-dbpturing group</td></tr>
 *
 * </tbblf>
 *
 * <hr>
 *
 *
 * <h3><b nbmf="bs">Bbdkslbshfs, fsdbpfs, bnd quoting</b></h3>
 *
 * <p> Thf bbdkslbsh dhbrbdtfr (<tt>'\'</tt>) sfrvfs to introdudf fsdbpfd
 * donstrudts, bs dffinfd in thf tbblf bbovf, bs wfll bs to quotf dhbrbdtfrs
 * thbt othfrwisf would bf intfrprftfd bs unfsdbpfd donstrudts.  Thus thf
 * fxprfssion <tt>\\</tt> mbtdhfs b singlf bbdkslbsh bnd <tt>\{</tt> mbtdhfs b
 * lfft brbdf.
 *
 * <p> It is bn frror to usf b bbdkslbsh prior to bny blphbbftid dhbrbdtfr thbt
 * dofs not dfnotf bn fsdbpfd donstrudt; thfsf brf rfsfrvfd for futurf
 * fxtfnsions to thf rfgulbr-fxprfssion lbngubgf.  A bbdkslbsh mby bf usfd
 * prior to b non-blphbbftid dhbrbdtfr rfgbrdlfss of whfthfr thbt dhbrbdtfr is
 * pbrt of bn unfsdbpfd donstrudt.
 *
 * <p> Bbdkslbshfs within string litfrbls in Jbvb sourdf dodf brf intfrprftfd
 * bs rfquirfd by
 * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>
 * bs fithfr Unidodf fsdbpfs (sfdtion 3.3) or othfr dhbrbdtfr fsdbpfs (sfdtion 3.10.6)
 * It is thfrfforf nfdfssbry to doublf bbdkslbshfs in string
 * litfrbls thbt rfprfsfnt rfgulbr fxprfssions to protfdt thfm from
 * intfrprftbtion by thf Jbvb bytfdodf dompilfr.  Thf string litfrbl
 * <tt>"&#92;b"</tt>, for fxbmplf, mbtdhfs b singlf bbdkspbdf dhbrbdtfr whfn
 * intfrprftfd bs b rfgulbr fxprfssion, whilf <tt>"&#92;&#92;b"</tt> mbtdhfs b
 * word boundbry.  Thf string litfrbl <tt>"&#92;(hfllo&#92;)"</tt> is illfgbl
 * bnd lfbds to b dompilf-timf frror; in ordfr to mbtdh thf string
 * <tt>(hfllo)</tt> thf string litfrbl <tt>"&#92;&#92;(hfllo&#92;&#92;)"</tt>
 * must bf usfd.
 *
 * <h3><b nbmf="dd">Chbrbdtfr Clbssfs</b></h3>
 *
 *    <p> Chbrbdtfr dlbssfs mby bppfbr within othfr dhbrbdtfr dlbssfs, bnd
 *    mby bf domposfd by thf union opfrbtor (implidit) bnd thf intfrsfdtion
 *    opfrbtor (<tt>&bmp;&bmp;</tt>).
 *    Thf union opfrbtor dfnotfs b dlbss thbt dontbins fvfry dhbrbdtfr thbt is
 *    in bt lfbst onf of its opfrbnd dlbssfs.  Thf intfrsfdtion opfrbtor
 *    dfnotfs b dlbss thbt dontbins fvfry dhbrbdtfr thbt is in both of its
 *    opfrbnd dlbssfs.
 *
 *    <p> Thf prfdfdfndf of dhbrbdtfr-dlbss opfrbtors is bs follows, from
 *    highfst to lowfst:
 *
 *    <blodkquotf><tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *                 summbry="Prfdfdfndf of dhbrbdtfr dlbss opfrbtors.">
 *      <tr><th>1&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *        <td>Litfrbl fsdbpf&nbsp;&nbsp;&nbsp;&nbsp;</td>
 *        <td><tt>\x</tt></td></tr>
 *     <tr><th>2&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *        <td>Grouping</td>
 *        <td><tt>[...]</tt></td></tr>
 *     <tr><th>3&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *        <td>Rbngf</td>
 *        <td><tt>b-z</tt></td></tr>
 *      <tr><th>4&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *        <td>Union</td>
 *        <td><tt>[b-f][i-u]</tt></td></tr>
 *      <tr><th>5&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *        <td>Intfrsfdtion</td>
 *        <td>{@dodf [b-z&&[bfiou]]}</td></tr>
 *    </tbblf></blodkquotf>
 *
 *    <p> Notf thbt b difffrfnt sft of mftbdhbrbdtfrs brf in ffffdt insidf
 *    b dhbrbdtfr dlbss thbn outsidf b dhbrbdtfr dlbss. For instbndf, thf
 *    rfgulbr fxprfssion <tt>.</tt> losfs its spfdibl mfbning insidf b
 *    dhbrbdtfr dlbss, whilf thf fxprfssion <tt>-</tt> bfdomfs b rbngf
 *    forming mftbdhbrbdtfr.
 *
 * <h3><b nbmf="lt">Linf tfrminbtors</b></h3>
 *
 * <p> A <i>linf tfrminbtor</i> is b onf- or two-dhbrbdtfr sfqufndf thbt mbrks
 * thf fnd of b linf of thf input dhbrbdtfr sfqufndf.  Thf following brf
 * rfdognizfd bs linf tfrminbtors:
 *
 * <ul>
 *
 *   <li> A nfwlinf (linf fffd) dhbrbdtfr&nbsp;(<tt>'\n'</tt>),
 *
 *   <li> A dbrribgf-rfturn dhbrbdtfr followfd immfdibtfly by b nfwlinf
 *   dhbrbdtfr&nbsp;(<tt>"\r\n"</tt>),
 *
 *   <li> A stbndblonf dbrribgf-rfturn dhbrbdtfr&nbsp;(<tt>'\r'</tt>),
 *
 *   <li> A nfxt-linf dhbrbdtfr&nbsp;(<tt>'&#92;u0085'</tt>),
 *
 *   <li> A linf-sfpbrbtor dhbrbdtfr&nbsp;(<tt>'&#92;u2028'</tt>), or
 *
 *   <li> A pbrbgrbph-sfpbrbtor dhbrbdtfr&nbsp;(<tt>'&#92;u2029</tt>).
 *
 * </ul>
 * <p>If {@link #UNIX_LINES} modf is bdtivbtfd, thfn thf only linf tfrminbtors
 * rfdognizfd brf nfwlinf dhbrbdtfrs.
 *
 * <p> Thf rfgulbr fxprfssion <tt>.</tt> mbtdhfs bny dhbrbdtfr fxdfpt b linf
 * tfrminbtor unlfss thf {@link #DOTALL} flbg is spfdififd.
 *
 * <p> By dffbult, thf rfgulbr fxprfssions <tt>^</tt> bnd <tt>$</tt> ignorf
 * linf tfrminbtors bnd only mbtdh bt thf bfginning bnd thf fnd, rfspfdtivfly,
 * of thf fntirf input sfqufndf. If {@link #MULTILINE} modf is bdtivbtfd thfn
 * <tt>^</tt> mbtdhfs bt thf bfginning of input bnd bftfr bny linf tfrminbtor
 * fxdfpt bt thf fnd of input. Whfn in {@link #MULTILINE} modf <tt>$</tt>
 * mbtdhfs just bfforf b linf tfrminbtor or thf fnd of thf input sfqufndf.
 *
 * <h3><b nbmf="dg">Groups bnd dbpturing</b></h3>
 *
 * <h4><b nbmf="gnumbfr">Group numbfr</b></h4>
 * <p> Cbpturing groups brf numbfrfd by dounting thfir opfning pbrfnthfsfs from
 * lfft to right.  In thf fxprfssion <tt>((A)(B(C)))</tt>, for fxbmplf, thfrf
 * brf four sudh groups: </p>
 *
 * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0 summbry="Cbpturing group numbfrings">
 * <tr><th>1&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *     <td><tt>((A)(B(C)))</tt></td></tr>
 * <tr><th>2&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *     <td><tt>(A)</tt></td></tr>
 * <tr><th>3&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *     <td><tt>(B(C))</tt></td></tr>
 * <tr><th>4&nbsp;&nbsp;&nbsp;&nbsp;</th>
 *     <td><tt>(C)</tt></td></tr>
 * </tbblf></blodkquotf>
 *
 * <p> Group zfro blwbys stbnds for thf fntirf fxprfssion.
 *
 * <p> Cbpturing groups brf so nbmfd bfdbusf, during b mbtdh, fbdh subsfqufndf
 * of thf input sfqufndf thbt mbtdhfs sudh b group is sbvfd.  Thf dbpturfd
 * subsfqufndf mby bf usfd lbtfr in thf fxprfssion, vib b bbdk rfffrfndf, bnd
 * mby blso bf rftrifvfd from thf mbtdhfr ondf thf mbtdh opfrbtion is domplftf.
 *
 * <h4><b nbmf="groupnbmf">Group nbmf</b></h4>
 * <p>A dbpturing group dbn blso bf bssignfd b "nbmf", b <tt>nbmfd-dbpturing group</tt>,
 * bnd thfn bf bbdk-rfffrfndfd lbtfr by thf "nbmf". Group nbmfs brf domposfd of
 * thf following dhbrbdtfrs. Thf first dhbrbdtfr must bf b <tt>lfttfr</tt>.
 *
 * <ul>
 *   <li> Thf uppfrdbsf lfttfrs <tt>'A'</tt> through <tt>'Z'</tt>
 *        (<tt>'&#92;u0041'</tt>&nbsp;through&nbsp;<tt>'&#92;u005b'</tt>),
 *   <li> Thf lowfrdbsf lfttfrs <tt>'b'</tt> through <tt>'z'</tt>
 *        (<tt>'&#92;u0061'</tt>&nbsp;through&nbsp;<tt>'&#92;u007b'</tt>),
 *   <li> Thf digits <tt>'0'</tt> through <tt>'9'</tt>
 *        (<tt>'&#92;u0030'</tt>&nbsp;through&nbsp;<tt>'&#92;u0039'</tt>),
 * </ul>
 *
 * <p> A <tt>nbmfd-dbpturing group</tt> is still numbfrfd bs dfsdribfd in
 * <b hrff="#gnumbfr">Group numbfr</b>.
 *
 * <p> Thf dbpturfd input bssodibtfd with b group is blwbys thf subsfqufndf
 * thbt thf group most rfdfntly mbtdhfd.  If b group is fvblubtfd b sfdond timf
 * bfdbusf of qubntifidbtion thfn its prfviously-dbpturfd vbluf, if bny, will
 * bf rftbinfd if thf sfdond fvblubtion fbils.  Mbtdhing thf string
 * <tt>"bbb"</tt> bgbinst thf fxprfssion <tt>(b(b)?)+</tt>, for fxbmplf, lfbvfs
 * group two sft to <tt>"b"</tt>.  All dbpturfd input is disdbrdfd bt thf
 * bfginning of fbdh mbtdh.
 *
 * <p> Groups bfginning with <tt>(?</tt> brf fithfr purf, <i>non-dbpturing</i> groups
 * thbt do not dbpturf tfxt bnd do not dount towbrds thf group totbl, or
 * <i>nbmfd-dbpturing</i> group.
 *
 * <h3> Unidodf support </h3>
 *
 * <p> This dlbss is in donformbndf with Lfvfl 1 of <b
 * hrff="http://www.unidodf.org/rfports/tr18/"><i>Unidodf Tfdhnidbl
 * Stbndbrd #18: Unidodf Rfgulbr Exprfssion</i></b>, plus RL2.1
 * Cbnonidbl Equivblfnts.
 * <p>
 * <b>Unidodf fsdbpf sfqufndfs</b> sudh bs <tt>&#92;u2014</tt> in Jbvb sourdf dodf
 * brf prodfssfd bs dfsdribfd in sfdtion 3.3 of
 * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
 * Sudh fsdbpf sfqufndfs brf blso implfmfntfd dirfdtly by thf rfgulbr-fxprfssion
 * pbrsfr so thbt Unidodf fsdbpfs dbn bf usfd in fxprfssions thbt brf rfbd from
 * filfs or from thf kfybobrd.  Thus thf strings <tt>"&#92;u2014"</tt> bnd
 * <tt>"\\u2014"</tt>, whilf not fqubl, dompilf into thf sbmf pbttfrn, whidh
 * mbtdhfs thf dhbrbdtfr with hfxbdfdimbl vbluf <tt>0x2014</tt>.
 * <p>
 * A Unidodf dhbrbdtfr dbn blso bf rfprfsfntfd in b rfgulbr-fxprfssion by
 * using its <b>Hfx notbtion</b>(hfxbdfdimbl dodf point vbluf) dirfdtly bs dfsdribfd in donstrudt
 * <tt>&#92;x{...}</tt>, for fxbmplf b supplfmfntbry dhbrbdtfr U+2011F
 * dbn bf spfdififd bs <tt>&#92;x{2011F}</tt>, instfbd of two donsfdutivf
 * Unidodf fsdbpf sfqufndfs of thf surrogbtf pbir
 * <tt>&#92;uD840</tt><tt>&#92;uDD1F</tt>.
 * <p>
 * Unidodf sdripts, blodks, dbtfgorifs bnd binbry propfrtifs brf writtfn with
 * thf <tt>\p</tt> bnd <tt>\P</tt> donstrudts bs in Pfrl.
 * <tt>\p{</tt><i>prop</i><tt>}</tt> mbtdhfs if
 * thf input hbs thf propfrty <i>prop</i>, whilf <tt>\P{</tt><i>prop</i><tt>}</tt>
 * dofs not mbtdh if thf input hbs thbt propfrty.
 * <p>
 * Sdripts, blodks, dbtfgorifs bnd binbry propfrtifs dbn bf usfd both insidf
 * bnd outsidf of b dhbrbdtfr dlbss.
 *
 * <p>
 * <b><b nbmf="usd">Sdripts</b></b> brf spfdififd fithfr with thf prffix {@dodf Is}, bs in
 * {@dodf IsHirbgbnb}, or by using  thf {@dodf sdript} kfyword (or its short
 * form {@dodf sd})bs in {@dodf sdript=Hirbgbnb} or {@dodf sd=Hirbgbnb}.
 * <p>
 * Thf sdript nbmfs supportfd by <dodf>Pbttfrn</dodf> brf thf vblid sdript nbmfs
 * bddfptfd bnd dffinfd by
 * {@link jbvb.lbng.Chbrbdtfr.UnidodfSdript#forNbmf(String) UnidodfSdript.forNbmf}.
 *
 * <p>
 * <b><b nbmf="ubd">Blodks</b></b> brf spfdififd with thf prffix {@dodf In}, bs in
 * {@dodf InMongolibn}, or by using thf kfyword {@dodf blodk} (or its short
 * form {@dodf blk}) bs in {@dodf blodk=Mongolibn} or {@dodf blk=Mongolibn}.
 * <p>
 * Thf blodk nbmfs supportfd by <dodf>Pbttfrn</dodf> brf thf vblid blodk nbmfs
 * bddfptfd bnd dffinfd by
 * {@link jbvb.lbng.Chbrbdtfr.UnidodfBlodk#forNbmf(String) UnidodfBlodk.forNbmf}.
 * <p>
 *
 * <b><b nbmf="udd">Cbtfgorifs</b></b> mby bf spfdififd with thf optionbl prffix {@dodf Is}:
 * Both {@dodf \p{L}} bnd {@dodf \p{IsL}} dfnotf thf dbtfgory of Unidodf
 * lfttfrs. Sbmf bs sdripts bnd blodks, dbtfgorifs dbn blso bf spfdififd
 * by using thf kfyword {@dodf gfnfrbl_dbtfgory} (or its short form
 * {@dodf gd}) bs in {@dodf gfnfrbl_dbtfgory=Lu} or {@dodf gd=Lu}.
 * <p>
 * Thf supportfd dbtfgorifs brf thosf of
 * <b hrff="http://www.unidodf.org/unidodf/stbndbrd/stbndbrd.html">
 * <i>Thf Unidodf Stbndbrd</i></b> in thf vfrsion spfdififd by thf
 * {@link jbvb.lbng.Chbrbdtfr Chbrbdtfr} dlbss. Thf dbtfgory nbmfs brf thosf
 * dffinfd in thf Stbndbrd, both normbtivf bnd informbtivf.
 * <p>
 *
 * <b><b nbmf="ubpd">Binbry propfrtifs</b></b> brf spfdififd with thf prffix {@dodf Is}, bs in
 * {@dodf IsAlphbbftid}. Thf supportfd binbry propfrtifs by <dodf>Pbttfrn</dodf>
 * brf
 * <ul>
 *   <li> Alphbbftid
 *   <li> Idfogrbphid
 *   <li> Lfttfr
 *   <li> Lowfrdbsf
 *   <li> Uppfrdbsf
 *   <li> Titlfdbsf
 *   <li> Pundtubtion
 *   <Li> Control
 *   <li> Whitf_Spbdf
 *   <li> Digit
 *   <li> Hfx_Digit
 *   <li> Join_Control
 *   <li> Nondhbrbdtfr_Codf_Point
 *   <li> Assignfd
 * </ul>
 * <p>
 * Thf following <b>Prfdffinfd Chbrbdtfr dlbssfs</b> bnd <b>POSIX dhbrbdtfr dlbssfs</b>
 * brf in donformbndf with thf rfdommfndbtion of <i>Annfx C: Compbtibility Propfrtifs</i>
 * of <b hrff="http://www.unidodf.org/rfports/tr18/"><i>Unidodf Rfgulbr Exprfssion
 * </i></b>, whfn {@link #UNICODE_CHARACTER_CLASS} flbg is spfdififd.
 *
 * <tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *  summbry="prfdffinfd bnd posix dhbrbdtfr dlbssfs in Unidodf modf">
 * <tr blign="lfft">
 * <th blign="lfft" id="prfdff_dlbssfs">Clbssfs</th>
 * <th blign="lfft" id="prfdff_mbtdhfs">Mbtdhfs</th>
 *</tr>
 * <tr><td><tt>\p{Lowfr}</tt></td>
 *     <td>A lowfrdbsf dhbrbdtfr:<tt>\p{IsLowfrdbsf}</tt></td></tr>
 * <tr><td><tt>\p{Uppfr}</tt></td>
 *     <td>An uppfrdbsf dhbrbdtfr:<tt>\p{IsUppfrdbsf}</tt></td></tr>
 * <tr><td><tt>\p{ASCII}</tt></td>
 *     <td>All ASCII:<tt>[\x00-\x7F]</tt></td></tr>
 * <tr><td><tt>\p{Alphb}</tt></td>
 *     <td>An blphbbftid dhbrbdtfr:<tt>\p{IsAlphbbftid}</tt></td></tr>
 * <tr><td><tt>\p{Digit}</tt></td>
 *     <td>A dfdimbl digit dhbrbdtfr:<tt>p{IsDigit}</tt></td></tr>
 * <tr><td><tt>\p{Alnum}</tt></td>
 *     <td>An blphbnumfrid dhbrbdtfr:<tt>[\p{IsAlphbbftid}\p{IsDigit}]</tt></td></tr>
 * <tr><td><tt>\p{Pundt}</tt></td>
 *     <td>A pundtubtion dhbrbdtfr:<tt>p{IsPundtubtion}</tt></td></tr>
 * <tr><td><tt>\p{Grbph}</tt></td>
 *     <td>A visiblf dhbrbdtfr: <tt>[^\p{IsWhitf_Spbdf}\p{gd=Cd}\p{gd=Cs}\p{gd=Cn}]</tt></td></tr>
 * <tr><td><tt>\p{Print}</tt></td>
 *     <td>A printbblf dhbrbdtfr: {@dodf [\p{Grbph}\p{Blbnk}&&[^\p{Cntrl}]]}</td></tr>
 * <tr><td><tt>\p{Blbnk}</tt></td>
 *     <td>A spbdf or b tbb: {@dodf [\p{IsWhitf_Spbdf}&&[^\p{gd=Zl}\p{gd=Zp}\x0b\x0b\x0d\x0d\x85]]}</td></tr>
 * <tr><td><tt>\p{Cntrl}</tt></td>
 *     <td>A dontrol dhbrbdtfr: <tt>\p{gd=Cd}</tt></td></tr>
 * <tr><td><tt>\p{XDigit}</tt></td>
 *     <td>A hfxbdfdimbl digit: <tt>[\p{gd=Nd}\p{IsHfx_Digit}]</tt></td></tr>
 * <tr><td><tt>\p{Spbdf}</tt></td>
 *     <td>A whitfspbdf dhbrbdtfr:<tt>\p{IsWhitf_Spbdf}</tt></td></tr>
 * <tr><td><tt>\d</tt></td>
 *     <td>A digit: <tt>\p{IsDigit}</tt></td></tr>
 * <tr><td><tt>\D</tt></td>
 *     <td>A non-digit: <tt>[^\d]</tt></td></tr>
 * <tr><td><tt>\s</tt></td>
 *     <td>A whitfspbdf dhbrbdtfr: <tt>\p{IsWhitf_Spbdf}</tt></td></tr>
 * <tr><td><tt>\S</tt></td>
 *     <td>A non-whitfspbdf dhbrbdtfr: <tt>[^\s]</tt></td></tr>
 * <tr><td><tt>\w</tt></td>
 *     <td>A word dhbrbdtfr: <tt>[\p{Alphb}\p{gd=Mn}\p{gd=Mf}\p{gd=Md}\p{Digit}\p{gd=Pd}\p{IsJoin_Control}]</tt></td></tr>
 * <tr><td><tt>\W</tt></td>
 *     <td>A non-word dhbrbdtfr: <tt>[^\w]</tt></td></tr>
 * </tbblf>
 * <p>
 * <b nbmf="jdd">
 * Cbtfgorifs thbt bfhbvf likf thf jbvb.lbng.Chbrbdtfr
 * boolfbn is<i>mfthodnbmf</i> mfthods (fxdfpt for thf dfprfdbtfd onfs) brf
 * bvbilbblf through thf sbmf <tt>\p{</tt><i>prop</i><tt>}</tt> syntbx whfrf
 * thf spfdififd propfrty hbs thf nbmf <tt>jbvb<i>mfthodnbmf</i></tt></b>.
 *
 * <h3> Compbrison to Pfrl 5 </h3>
 *
 * <p>Thf <dodf>Pbttfrn</dodf> fnginf pfrforms trbditionbl NFA-bbsfd mbtdhing
 * with ordfrfd bltfrnbtion bs oddurs in Pfrl 5.
 *
 * <p> Pfrl donstrudts not supportfd by this dlbss: </p>
 *
 * <ul>
 *    <li><p> Prfdffinfd dhbrbdtfr dlbssfs (Unidodf dhbrbdtfr)
 *    <p><tt>\X&nbsp;&nbsp;&nbsp;&nbsp;</tt>Mbtdh Unidodf
 *    <b hrff="http://www.unidodf.org/rfports/tr18/#Dffbult_Grbphfmf_Clustfrs">
 *    <i>fxtfndfd grbphfmf dlustfr</i></b>
 *    </p></li>
 *
 *    <li><p> Thf bbdkrfffrfndf donstrudts, <tt>\g{</tt><i>n</i><tt>}</tt> for
 *    thf <i>n</i><sup>th</sup><b hrff="#dg">dbpturing group</b> bnd
 *    <tt>\g{</tt><i>nbmf</i><tt>}</tt> for
 *    <b hrff="#groupnbmf">nbmfd-dbpturing group</b>.
 *    </p></li>
 *
 *    <li><p> Thf nbmfd dhbrbdtfr donstrudt, <tt>\N{</tt><i>nbmf</i><tt>}</tt>
 *    for b Unidodf dhbrbdtfr by its nbmf.
 *    </p></li>
 *
 *    <li><p> Thf donditionbl donstrudts
 *    <tt>(?(</tt><i>dondition</i><tt>)</tt><i>X</i><tt>)</tt> bnd
 *    <tt>(?(</tt><i>dondition</i><tt>)</tt><i>X</i><tt>|</tt><i>Y</i><tt>)</tt>,
 *    </p></li>
 *
 *    <li><p> Thf fmbfddfd dodf donstrudts <tt>(?{</tt><i>dodf</i><tt>})</tt>
 *    bnd <tt>(??{</tt><i>dodf</i><tt>})</tt>,</p></li>
 *
 *    <li><p> Thf fmbfddfd dommfnt syntbx <tt>(?#dommfnt)</tt>, bnd </p></li>
 *
 *    <li><p> Thf prfprodfssing opfrbtions <tt>\l</tt> <tt>&#92;u</tt>,
 *    <tt>\L</tt>, bnd <tt>\U</tt>.  </p></li>
 *
 * </ul>
 *
 * <p> Construdts supportfd by this dlbss but not by Pfrl: </p>
 *
 * <ul>
 *
 *    <li><p> Chbrbdtfr-dlbss union bnd intfrsfdtion bs dfsdribfd
 *    <b hrff="#dd">bbovf</b>.</p></li>
 *
 * </ul>
 *
 * <p> Notbblf difffrfndfs from Pfrl: </p>
 *
 * <ul>
 *
 *    <li><p> In Pfrl, <tt>\1</tt> through <tt>\9</tt> brf blwbys intfrprftfd
 *    bs bbdk rfffrfndfs; b bbdkslbsh-fsdbpfd numbfr grfbtfr thbn <tt>9</tt> is
 *    trfbtfd bs b bbdk rfffrfndf if bt lfbst thbt mbny subfxprfssions fxist,
 *    othfrwisf it is intfrprftfd, if possiblf, bs bn odtbl fsdbpf.  In this
 *    dlbss odtbl fsdbpfs must blwbys bfgin with b zfro. In this dlbss,
 *    <tt>\1</tt> through <tt>\9</tt> brf blwbys intfrprftfd bs bbdk
 *    rfffrfndfs, bnd b lbrgfr numbfr is bddfptfd bs b bbdk rfffrfndf if bt
 *    lfbst thbt mbny subfxprfssions fxist bt thbt point in thf rfgulbr
 *    fxprfssion, othfrwisf thf pbrsfr will drop digits until thf numbfr is
 *    smbllfr or fqubl to thf fxisting numbfr of groups or it is onf digit.
 *    </p></li>
 *
 *    <li><p> Pfrl usfs thf <tt>g</tt> flbg to rfqufst b mbtdh thbt rfsumfs
 *    whfrf thf lbst mbtdh lfft off.  This fundtionblity is providfd impliditly
 *    by thf {@link Mbtdhfr} dlbss: Rfpfbtfd invodbtions of thf {@link
 *    Mbtdhfr#find find} mfthod will rfsumf whfrf thf lbst mbtdh lfft off,
 *    unlfss thf mbtdhfr is rfsft.  </p></li>
 *
 *    <li><p> In Pfrl, fmbfddfd flbgs bt thf top lfvfl of bn fxprfssion bfffdt
 *    thf wholf fxprfssion.  In this dlbss, fmbfddfd flbgs blwbys tbkf ffffdt
 *    bt thf point bt whidh thfy bppfbr, whfthfr thfy brf bt thf top lfvfl or
 *    within b group; in thf lbttfr dbsf, flbgs brf rfstorfd bt thf fnd of thf
 *    group just bs in Pfrl.  </p></li>
 *
 * </ul>
 *
 *
 * <p> For b morf prfdisf dfsdription of thf bfhbvior of rfgulbr fxprfssion
 * donstrudts, plfbsf sff <b hrff="http://www.orfilly.dom/dbtblog/rfgfx3/">
 * <i>Mbstfring Rfgulbr Exprfssions, 3nd Edition</i>, Jfffrfy E. F. Frifdl,
 * O'Rfilly bnd Assodibtfs, 2006.</b>
 * </p>
 *
 * @sff jbvb.lbng.String#split(String, int)
 * @sff jbvb.lbng.String#split(String)
 *
 * @buthor      Mikf MdCloskfy
 * @buthor      Mbrk Rfinhold
 * @buthor      JSR-51 Expfrt Group
 * @sindf       1.4
 * @spfd        JSR-51
 */

publid finbl dlbss Pbttfrn
    implfmfnts jbvb.io.Sfriblizbblf
{

    /**
     * Rfgulbr fxprfssion modififr vblufs.  Instfbd of bfing pbssfd bs
     * brgumfnts, thfy dbn blso bf pbssfd bs inlinf modififrs.
     * For fxbmplf, thf following stbtfmfnts hbvf thf sbmf ffffdt.
     * <prf>
     * RfgExp r1 = RfgExp.dompilf("bbd", Pbttfrn.I|Pbttfrn.M);
     * RfgExp r2 = RfgExp.dompilf("(?im)bbd", 0);
     * </prf>
     *
     * Thf flbgs brf duplidbtfd so thbt thf fbmilibr Pfrl mbtdh flbg
     * nbmfs brf bvbilbblf.
     */

    /**
     * Enbblfs Unix linfs modf.
     *
     * <p> In this modf, only thf <tt>'\n'</tt> linf tfrminbtor is rfdognizfd
     * in thf bfhbvior of <tt>.</tt>, <tt>^</tt>, bnd <tt>$</tt>.
     *
     * <p> Unix linfs modf dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?d)</tt>.
     */
    publid stbtid finbl int UNIX_LINES = 0x01;

    /**
     * Enbblfs dbsf-insfnsitivf mbtdhing.
     *
     * <p> By dffbult, dbsf-insfnsitivf mbtdhing bssumfs thbt only dhbrbdtfrs
     * in thf US-ASCII dhbrsft brf bfing mbtdhfd.  Unidodf-bwbrf
     * dbsf-insfnsitivf mbtdhing dbn bf fnbblfd by spfdifying thf {@link
     * #UNICODE_CASE} flbg in donjundtion with this flbg.
     *
     * <p> Cbsf-insfnsitivf mbtdhing dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?i)</tt>.
     *
     * <p> Spfdifying this flbg mby imposf b slight pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int CASE_INSENSITIVE = 0x02;

    /**
     * Pfrmits whitfspbdf bnd dommfnts in pbttfrn.
     *
     * <p> In this modf, whitfspbdf is ignorfd, bnd fmbfddfd dommfnts stbrting
     * with <tt>#</tt> brf ignorfd until thf fnd of b linf.
     *
     * <p> Commfnts modf dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?x)</tt>.
     */
    publid stbtid finbl int COMMENTS = 0x04;

    /**
     * Enbblfs multilinf modf.
     *
     * <p> In multilinf modf thf fxprfssions <tt>^</tt> bnd <tt>$</tt> mbtdh
     * just bftfr or just bfforf, rfspfdtivfly, b linf tfrminbtor or thf fnd of
     * thf input sfqufndf.  By dffbult thfsf fxprfssions only mbtdh bt thf
     * bfginning bnd thf fnd of thf fntirf input sfqufndf.
     *
     * <p> Multilinf modf dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?m)</tt>.  </p>
     */
    publid stbtid finbl int MULTILINE = 0x08;

    /**
     * Enbblfs litfrbl pbrsing of thf pbttfrn.
     *
     * <p> Whfn this flbg is spfdififd thfn thf input string thbt spfdififs
     * thf pbttfrn is trfbtfd bs b sfqufndf of litfrbl dhbrbdtfrs.
     * Mftbdhbrbdtfrs or fsdbpf sfqufndfs in thf input sfqufndf will bf
     * givfn no spfdibl mfbning.
     *
     * <p>Thf flbgs CASE_INSENSITIVE bnd UNICODE_CASE rftbin thfir impbdt on
     * mbtdhing whfn usfd in donjundtion with this flbg. Thf othfr flbgs
     * bfdomf supfrfluous.
     *
     * <p> Thfrf is no fmbfddfd flbg dhbrbdtfr for fnbbling litfrbl pbrsing.
     * @sindf 1.5
     */
    publid stbtid finbl int LITERAL = 0x10;

    /**
     * Enbblfs dotbll modf.
     *
     * <p> In dotbll modf, thf fxprfssion <tt>.</tt> mbtdhfs bny dhbrbdtfr,
     * indluding b linf tfrminbtor.  By dffbult this fxprfssion dofs not mbtdh
     * linf tfrminbtors.
     *
     * <p> Dotbll modf dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?s)</tt>.  (Thf <tt>s</tt> is b mnfmonid for
     * "singlf-linf" modf, whidh is whbt this is dbllfd in Pfrl.)  </p>
     */
    publid stbtid finbl int DOTALL = 0x20;

    /**
     * Enbblfs Unidodf-bwbrf dbsf folding.
     *
     * <p> Whfn this flbg is spfdififd thfn dbsf-insfnsitivf mbtdhing, whfn
     * fnbblfd by thf {@link #CASE_INSENSITIVE} flbg, is donf in b mbnnfr
     * donsistfnt with thf Unidodf Stbndbrd.  By dffbult, dbsf-insfnsitivf
     * mbtdhing bssumfs thbt only dhbrbdtfrs in thf US-ASCII dhbrsft brf bfing
     * mbtdhfd.
     *
     * <p> Unidodf-bwbrf dbsf folding dbn blso bf fnbblfd vib thf fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?u)</tt>.
     *
     * <p> Spfdifying this flbg mby imposf b pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int UNICODE_CASE = 0x40;

    /**
     * Enbblfs dbnonidbl fquivblfndf.
     *
     * <p> Whfn this flbg is spfdififd thfn two dhbrbdtfrs will bf donsidfrfd
     * to mbtdh if, bnd only if, thfir full dbnonidbl dfdompositions mbtdh.
     * Thf fxprfssion <tt>"b&#92;u030A"</tt>, for fxbmplf, will mbtdh thf
     * string <tt>"&#92;u00E5"</tt> whfn this flbg is spfdififd.  By dffbult,
     * mbtdhing dofs not tbkf dbnonidbl fquivblfndf into bddount.
     *
     * <p> Thfrf is no fmbfddfd flbg dhbrbdtfr for fnbbling dbnonidbl
     * fquivblfndf.
     *
     * <p> Spfdifying this flbg mby imposf b pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int CANON_EQ = 0x80;

    /**
     * Enbblfs thf Unidodf vfrsion of <i>Prfdffinfd dhbrbdtfr dlbssfs</i> bnd
     * <i>POSIX dhbrbdtfr dlbssfs</i>.
     *
     * <p> Whfn this flbg is spfdififd thfn thf (US-ASCII only)
     * <i>Prfdffinfd dhbrbdtfr dlbssfs</i> bnd <i>POSIX dhbrbdtfr dlbssfs</i>
     * brf in donformbndf with
     * <b hrff="http://www.unidodf.org/rfports/tr18/"><i>Unidodf Tfdhnidbl
     * Stbndbrd #18: Unidodf Rfgulbr Exprfssion</i></b>
     * <i>Annfx C: Compbtibility Propfrtifs</i>.
     * <p>
     * Thf UNICODE_CHARACTER_CLASS modf dbn blso bf fnbblfd vib thf fmbfddfd
     * flbg fxprfssion&nbsp;<tt>(?U)</tt>.
     * <p>
     * Thf flbg implifs UNICODE_CASE, thbt is, it fnbblfs Unidodf-bwbrf dbsf
     * folding.
     * <p>
     * Spfdifying this flbg mby imposf b pfrformbndf pfnblty.  </p>
     * @sindf 1.7
     */
    publid stbtid finbl int UNICODE_CHARACTER_CLASS = 0x100;

    /**
     * Contbins bll possiblf flbgs for dompilf(rfgfx, flbgs).
     */
    privbtf stbtid finbl int ALL_FLAGS = CASE_INSENSITIVE | MULTILINE |
            DOTALL | UNICODE_CASE | CANON_EQ | UNIX_LINES | LITERAL |
            UNICODE_CHARACTER_CLASS | COMMENTS;

    /* Pbttfrn hbs only two sfriblizfd domponfnts: Thf pbttfrn string
     * bnd thf flbgs, whidh brf bll thbt is nffdfd to rfdompilf thf pbttfrn
     * whfn it is dfsfriblizfd.
     */

    /** usf sfriblVfrsionUID from Mfrlin b59 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = 5073258162644648461L;

    /**
     * Thf originbl rfgulbr-fxprfssion pbttfrn string.
     *
     * @sfribl
     */
    privbtf String pbttfrn;

    /**
     * Thf originbl pbttfrn flbgs.
     *
     * @sfribl
     */
    privbtf int flbgs;

    /**
     * Boolfbn indidbting this Pbttfrn is dompilfd; this is nfdfssbry in ordfr
     * to lbzily dompilf dfsfriblizfd Pbttfrns.
     */
    privbtf trbnsifnt volbtilf boolfbn dompilfd = fblsf;

    /**
     * Thf normblizfd pbttfrn string.
     */
    privbtf trbnsifnt String normblizfdPbttfrn;

    /**
     * Thf stbrting point of stbtf mbdhinf for thf find opfrbtion.  This bllows
     * b mbtdh to stbrt bnywhfrf in thf input.
     */
    trbnsifnt Nodf root;

    /**
     * Thf root of objfdt trff for b mbtdh opfrbtion.  Thf pbttfrn is mbtdhfd
     * bt thf bfginning.  This mby indludf b find thbt usfs BnM or b First
     * nodf.
     */
    trbnsifnt Nodf mbtdhRoot;

    /**
     * Tfmporbry storbgf usfd by pbrsing pbttfrn slidf.
     */
    trbnsifnt int[] bufffr;

    /**
     * Mbp thf "nbmf" of thf "nbmfd dbpturing group" to its group id
     * nodf.
     */
    trbnsifnt volbtilf Mbp<String, Intfgfr> nbmfdGroups;

    /**
     * Tfmporbry storbgf usfd whilf pbrsing group rfffrfndfs.
     */
    trbnsifnt GroupHfbd[] groupNodfs;

    /**
     * Tfmporbry null tfrminbtfd dodf point brrby usfd by pbttfrn dompiling.
     */
    privbtf trbnsifnt int[] tfmp;

    /**
     * Thf numbfr of dbpturing groups in this Pbttfrn. Usfd by mbtdhfrs to
     * bllodbtf storbgf nffdfd to pfrform b mbtdh.
     */
    trbnsifnt int dbpturingGroupCount;

    /**
     * Thf lodbl vbribblf dount usfd by pbrsing trff. Usfd by mbtdhfrs to
     * bllodbtf storbgf nffdfd to pfrform b mbtdh.
     */
    trbnsifnt int lodblCount;

    /**
     * Indfx into thf pbttfrn string thbt kffps trbdk of how mudh hbs bffn
     * pbrsfd.
     */
    privbtf trbnsifnt int dursor;

    /**
     * Holds thf lfngth of thf pbttfrn string.
     */
    privbtf trbnsifnt int pbttfrnLfngth;

    /**
     * If thf Stbrt nodf might possibly mbtdh supplfmfntbry dhbrbdtfrs.
     * It is sft to truf during dompiling if
     * (1) Thfrf is supplfmfntbry dhbr in pbttfrn, or
     * (2) Thfrf is domplfmfnt nodf of Cbtfgory or Blodk
     */
    privbtf trbnsifnt boolfbn hbsSupplfmfntbry;

    /**
     * Compilfs thf givfn rfgulbr fxprfssion into b pbttfrn.
     *
     * @pbrbm  rfgfx
     *         Thf fxprfssion to bf dompilfd
     * @rfturn thf givfn rfgulbr fxprfssion dompilfd into b pbttfrn
     * @throws  PbttfrnSyntbxExdfption
     *          If thf fxprfssion's syntbx is invblid
     */
    publid stbtid Pbttfrn dompilf(String rfgfx) {
        rfturn nfw Pbttfrn(rfgfx, 0);
    }

    /**
     * Compilfs thf givfn rfgulbr fxprfssion into b pbttfrn with thf givfn
     * flbgs.
     *
     * @pbrbm  rfgfx
     *         Thf fxprfssion to bf dompilfd
     *
     * @pbrbm  flbgs
     *         Mbtdh flbgs, b bit mbsk thbt mby indludf
     *         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},
     *         {@link #UNICODE_CASE}, {@link #CANON_EQ}, {@link #UNIX_LINES},
     *         {@link #LITERAL}, {@link #UNICODE_CHARACTER_CLASS}
     *         bnd {@link #COMMENTS}
     *
     * @rfturn thf givfn rfgulbr fxprfssion dompilfd into b pbttfrn with thf givfn flbgs
     * @throws  IllfgblArgumfntExdfption
     *          If bit vblufs othfr thbn thosf dorrfsponding to thf dffinfd
     *          mbtdh flbgs brf sft in <tt>flbgs</tt>
     *
     * @throws  PbttfrnSyntbxExdfption
     *          If thf fxprfssion's syntbx is invblid
     */
    publid stbtid Pbttfrn dompilf(String rfgfx, int flbgs) {
        rfturn nfw Pbttfrn(rfgfx, flbgs);
    }

    /**
     * Rfturns thf rfgulbr fxprfssion from whidh this pbttfrn wbs dompilfd.
     *
     * @rfturn  Thf sourdf of this pbttfrn
     */
    publid String pbttfrn() {
        rfturn pbttfrn;
    }

    /**
     * <p>Rfturns thf string rfprfsfntbtion of this pbttfrn. This
     * is thf rfgulbr fxprfssion from whidh this pbttfrn wbs
     * dompilfd.</p>
     *
     * @rfturn  Thf string rfprfsfntbtion of this pbttfrn
     * @sindf 1.5
     */
    publid String toString() {
        rfturn pbttfrn;
    }

    /**
     * Crfbtfs b mbtdhfr thbt will mbtdh thf givfn input bgbinst this pbttfrn.
     *
     * @pbrbm  input
     *         Thf dhbrbdtfr sfqufndf to bf mbtdhfd
     *
     * @rfturn  A nfw mbtdhfr for this pbttfrn
     */
    publid Mbtdhfr mbtdhfr(ChbrSfqufndf input) {
        if (!dompilfd) {
            syndhronizfd(this) {
                if (!dompilfd)
                    dompilf();
            }
        }
        Mbtdhfr m = nfw Mbtdhfr(this, input);
        rfturn m;
    }

    /**
     * Rfturns this pbttfrn's mbtdh flbgs.
     *
     * @rfturn  Thf mbtdh flbgs spfdififd whfn this pbttfrn wbs dompilfd
     */
    publid int flbgs() {
        rfturn flbgs;
    }

    /**
     * Compilfs thf givfn rfgulbr fxprfssion bnd bttfmpts to mbtdh thf givfn
     * input bgbinst it.
     *
     * <p> An invodbtion of this donvfnifndf mfthod of thf form
     *
     * <blodkquotf><prf>
     * Pbttfrn.mbtdhfs(rfgfx, input);</prf></blodkquotf>
     *
     * bfhbvfs in fxbdtly thf sbmf wby bs thf fxprfssion
     *
     * <blodkquotf><prf>
     * Pbttfrn.dompilf(rfgfx).mbtdhfr(input).mbtdhfs()</prf></blodkquotf>
     *
     * <p> If b pbttfrn is to bf usfd multiplf timfs, dompiling it ondf bnd rfusing
     * it will bf morf fffidifnt thbn invoking this mfthod fbdh timf.  </p>
     *
     * @pbrbm  rfgfx
     *         Thf fxprfssion to bf dompilfd
     *
     * @pbrbm  input
     *         Thf dhbrbdtfr sfqufndf to bf mbtdhfd
     * @rfturn whfthfr or not thf rfgulbr fxprfssion mbtdhfs on thf input
     * @throws  PbttfrnSyntbxExdfption
     *          If thf fxprfssion's syntbx is invblid
     */
    publid stbtid boolfbn mbtdhfs(String rfgfx, ChbrSfqufndf input) {
        Pbttfrn p = Pbttfrn.dompilf(rfgfx);
        Mbtdhfr m = p.mbtdhfr(input);
        rfturn m.mbtdhfs();
    }

    /**
     * Splits thf givfn input sfqufndf bround mbtdhfs of this pbttfrn.
     *
     * <p> Thf brrby rfturnfd by this mfthod dontbins fbdh substring of thf
     * input sfqufndf thbt is tfrminbtfd by bnothfr subsfqufndf thbt mbtdhfs
     * this pbttfrn or is tfrminbtfd by thf fnd of thf input sfqufndf.  Thf
     * substrings in thf brrby brf in thf ordfr in whidh thfy oddur in thf
     * input. If this pbttfrn dofs not mbtdh bny subsfqufndf of thf input thfn
     * thf rfsulting brrby hbs just onf flfmfnt, nbmfly thf input sfqufndf in
     * string form.
     *
     * <p> Whfn thfrf is b positivf-width mbtdh bt thf bfginning of thf input
     * sfqufndf thfn bn fmpty lfbding substring is indludfd bt thf bfginning
     * of thf rfsulting brrby. A zfro-width mbtdh bt thf bfginning howfvfr
     * nfvfr produdfs sudh fmpty lfbding substring.
     *
     * <p> Thf <tt>limit</tt> pbrbmftfr dontrols thf numbfr of timfs thf
     * pbttfrn is bpplifd bnd thfrfforf bfffdts thf lfngth of thf rfsulting
     * brrby.  If thf limit <i>n</i> is grfbtfr thbn zfro thfn thf pbttfrn
     * will bf bpplifd bt most <i>n</i>&nbsp;-&nbsp;1 timfs, thf brrby's
     * lfngth will bf no grfbtfr thbn <i>n</i>, bnd thf brrby's lbst fntry
     * will dontbin bll input bfyond thf lbst mbtdhfd dflimitfr.  If <i>n</i>
     * is non-positivf thfn thf pbttfrn will bf bpplifd bs mbny timfs bs
     * possiblf bnd thf brrby dbn hbvf bny lfngth.  If <i>n</i> is zfro thfn
     * thf pbttfrn will bf bpplifd bs mbny timfs bs possiblf, thf brrby dbn
     * hbvf bny lfngth, bnd trbiling fmpty strings will bf disdbrdfd.
     *
     * <p> Thf input <tt>"boo:bnd:foo"</tt>, for fxbmplf, yiflds thf following
     * rfsults with thfsf pbrbmftfrs:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0
     *              summbry="Split fxbmplfs showing rfgfx, limit, bnd rfsult">
     * <tr><th blign="lfft"><i>Rfgfx&nbsp;&nbsp;&nbsp;&nbsp;</i></th>
     *     <th blign="lfft"><i>Limit&nbsp;&nbsp;&nbsp;&nbsp;</i></th>
     *     <th blign="lfft"><i>Rfsult&nbsp;&nbsp;&nbsp;&nbsp;</i></th></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>2</td>
     *     <td><tt>{ "boo", "bnd:foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>5</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>-2</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>5</td>
     *     <td><tt>{ "b", "", ":bnd:f", "", "" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>-2</td>
     *     <td><tt>{ "b", "", ":bnd:f", "", "" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>0</td>
     *     <td><tt>{ "b", "", ":bnd:f" }</tt></td></tr>
     * </tbblf></blodkquotf>
     *
     * @pbrbm  input
     *         Thf dhbrbdtfr sfqufndf to bf split
     *
     * @pbrbm  limit
     *         Thf rfsult thrfshold, bs dfsdribfd bbovf
     *
     * @rfturn  Thf brrby of strings domputfd by splitting thf input
     *          bround mbtdhfs of this pbttfrn
     */
    publid String[] split(ChbrSfqufndf input, int limit) {
        int indfx = 0;
        boolfbn mbtdhLimitfd = limit > 0;
        ArrbyList<String> mbtdhList = nfw ArrbyList<>();
        Mbtdhfr m = mbtdhfr(input);

        // Add sfgmfnts bfforf fbdh mbtdh found
        whilf(m.find()) {
            if (!mbtdhLimitfd || mbtdhList.sizf() < limit - 1) {
                if (indfx == 0 && indfx == m.stbrt() && m.stbrt() == m.fnd()) {
                    // no fmpty lfbding substring indludfd for zfro-width mbtdh
                    // bt thf bfginning of thf input dhbr sfqufndf.
                    dontinuf;
                }
                String mbtdh = input.subSfqufndf(indfx, m.stbrt()).toString();
                mbtdhList.bdd(mbtdh);
                indfx = m.fnd();
            } flsf if (mbtdhList.sizf() == limit - 1) { // lbst onf
                String mbtdh = input.subSfqufndf(indfx,
                                                 input.lfngth()).toString();
                mbtdhList.bdd(mbtdh);
                indfx = m.fnd();
            }
        }

        // If no mbtdh wbs found, rfturn this
        if (indfx == 0)
            rfturn nfw String[] {input.toString()};

        // Add rfmbining sfgmfnt
        if (!mbtdhLimitfd || mbtdhList.sizf() < limit)
            mbtdhList.bdd(input.subSfqufndf(indfx, input.lfngth()).toString());

        // Construdt rfsult
        int rfsultSizf = mbtdhList.sizf();
        if (limit == 0)
            whilf (rfsultSizf > 0 && mbtdhList.gft(rfsultSizf-1).fqubls(""))
                rfsultSizf--;
        String[] rfsult = nfw String[rfsultSizf];
        rfturn mbtdhList.subList(0, rfsultSizf).toArrby(rfsult);
    }

    /**
     * Splits thf givfn input sfqufndf bround mbtdhfs of this pbttfrn.
     *
     * <p> This mfthod works bs if by invoking thf two-brgumfnt {@link
     * #split(jbvb.lbng.ChbrSfqufndf, int) split} mfthod with thf givfn input
     * sfqufndf bnd b limit brgumfnt of zfro.  Trbiling fmpty strings brf
     * thfrfforf not indludfd in thf rfsulting brrby. </p>
     *
     * <p> Thf input <tt>"boo:bnd:foo"</tt>, for fxbmplf, yiflds thf following
     * rfsults with thfsf fxprfssions:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0
     *              summbry="Split fxbmplfs showing rfgfx bnd rfsult">
     * <tr><th blign="lfft"><i>Rfgfx&nbsp;&nbsp;&nbsp;&nbsp;</i></th>
     *     <th blign="lfft"><i>Rfsult</i></th></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td><tt>{ "b", "", ":bnd:f" }</tt></td></tr>
     * </tbblf></blodkquotf>
     *
     *
     * @pbrbm  input
     *         Thf dhbrbdtfr sfqufndf to bf split
     *
     * @rfturn  Thf brrby of strings domputfd by splitting thf input
     *          bround mbtdhfs of this pbttfrn
     */
    publid String[] split(ChbrSfqufndf input) {
        rfturn split(input, 0);
    }

    /**
     * Rfturns b litfrbl pbttfrn <dodf>String</dodf> for thf spfdififd
     * <dodf>String</dodf>.
     *
     * <p>This mfthod produdfs b <dodf>String</dodf> thbt dbn bf usfd to
     * drfbtf b <dodf>Pbttfrn</dodf> thbt would mbtdh thf string
     * <dodf>s</dodf> bs if it wfrf b litfrbl pbttfrn.</p> Mftbdhbrbdtfrs
     * or fsdbpf sfqufndfs in thf input sfqufndf will bf givfn no spfdibl
     * mfbning.
     *
     * @pbrbm  s Thf string to bf litfrblizfd
     * @rfturn  A litfrbl string rfplbdfmfnt
     * @sindf 1.5
     */
    publid stbtid String quotf(String s) {
        int slbshEIndfx = s.indfxOf("\\E");
        if (slbshEIndfx == -1)
            rfturn "\\Q" + s + "\\E";

        StringBuildfr sb = nfw StringBuildfr(s.lfngth() * 2);
        sb.bppfnd("\\Q");
        slbshEIndfx = 0;
        int durrfnt = 0;
        whilf ((slbshEIndfx = s.indfxOf("\\E", durrfnt)) != -1) {
            sb.bppfnd(s.substring(durrfnt, slbshEIndfx));
            durrfnt = slbshEIndfx + 2;
            sb.bppfnd("\\E\\\\E\\Q");
        }
        sb.bppfnd(s.substring(durrfnt, s.lfngth()));
        sb.bppfnd("\\E");
        rfturn sb.toString();
    }

    /**
     * Rfdompilf thf Pbttfrn instbndf from b strfbm.  Thf originbl pbttfrn
     * string is rfbd in bnd thf objfdt trff is rfdompilfd from it.
     */
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
        throws jbvb.io.IOExdfption, ClbssNotFoundExdfption {

        // Rfbd in bll fiflds
        s.dffbultRfbdObjfdt();

        // Initiblizf dounts
        dbpturingGroupCount = 1;
        lodblCount = 0;

        // if lfngth > 0, thf Pbttfrn is lbzily dompilfd
        dompilfd = fblsf;
        if (pbttfrn.lfngth() == 0) {
            root = nfw Stbrt(lbstAddfpt);
            mbtdhRoot = lbstAddfpt;
            dompilfd = truf;
        }
    }

    /**
     * This privbtf donstrudtor is usfd to drfbtf bll Pbttfrns. Thf pbttfrn
     * string bnd mbtdh flbgs brf bll thbt is nffdfd to domplftfly dfsdribf
     * b Pbttfrn. An fmpty pbttfrn string rfsults in bn objfdt trff with
     * only b Stbrt nodf bnd b LbstNodf nodf.
     */
    privbtf Pbttfrn(String p, int f) {
        if ((f & ~ALL_FLAGS) != 0) {
            throw nfw IllfgblArgumfntExdfption("Unknown flbg 0x"
                                               + Intfgfr.toHfxString(f));
        }
        pbttfrn = p;
        flbgs = f;

        // to usf UNICODE_CASE if UNICODE_CHARACTER_CLASS prfsfnt
        if ((flbgs & UNICODE_CHARACTER_CLASS) != 0)
            flbgs |= UNICODE_CASE;

        // Rfsft group indfx dount
        dbpturingGroupCount = 1;
        lodblCount = 0;

        if (pbttfrn.lfngth() > 0) {
            dompilf();
        } flsf {
            root = nfw Stbrt(lbstAddfpt);
            mbtdhRoot = lbstAddfpt;
        }
    }

    /**
     * Thf pbttfrn is donvfrtfd to normblizfdD form bnd thfn b purf group
     * is donstrudtfd to mbtdh dbnonidbl fquivblfndfs of thf dhbrbdtfrs.
     */
    privbtf void normblizf() {
        boolfbn inChbrClbss = fblsf;
        int lbstCodfPoint = -1;

        // Convfrt pbttfrn into normblizfdD form
        normblizfdPbttfrn = Normblizfr.normblizf(pbttfrn, Normblizfr.Form.NFD);
        pbttfrnLfngth = normblizfdPbttfrn.lfngth();

        // Modify pbttfrn to mbtdh dbnonidbl fquivblfndfs
        StringBuildfr nfwPbttfrn = nfw StringBuildfr(pbttfrnLfngth);
        for(int i=0; i<pbttfrnLfngth; ) {
            int d = normblizfdPbttfrn.dodfPointAt(i);
            StringBuildfr sfqufndfBufffr;
            if ((Chbrbdtfr.gftTypf(d) == Chbrbdtfr.NON_SPACING_MARK)
                && (lbstCodfPoint != -1)) {
                sfqufndfBufffr = nfw StringBuildfr();
                sfqufndfBufffr.bppfndCodfPoint(lbstCodfPoint);
                sfqufndfBufffr.bppfndCodfPoint(d);
                whilf(Chbrbdtfr.gftTypf(d) == Chbrbdtfr.NON_SPACING_MARK) {
                    i += Chbrbdtfr.dhbrCount(d);
                    if (i >= pbttfrnLfngth)
                        brfbk;
                    d = normblizfdPbttfrn.dodfPointAt(i);
                    sfqufndfBufffr.bppfndCodfPoint(d);
                }
                String fb = produdfEquivblfntAltfrnbtion(
                                               sfqufndfBufffr.toString());
                nfwPbttfrn.sftLfngth(nfwPbttfrn.lfngth()-Chbrbdtfr.dhbrCount(lbstCodfPoint));
                nfwPbttfrn.bppfnd("(?:").bppfnd(fb).bppfnd(")");
            } flsf if (d == '[' && lbstCodfPoint != '\\') {
                i = normblizfChbrClbss(nfwPbttfrn, i);
            } flsf {
                nfwPbttfrn.bppfndCodfPoint(d);
            }
            lbstCodfPoint = d;
            i += Chbrbdtfr.dhbrCount(d);
        }
        normblizfdPbttfrn = nfwPbttfrn.toString();
    }

    /**
     * Complftf thf dhbrbdtfr dlbss bfing pbrsfd bnd bdd b sft
     * of bltfrnbtions to it thbt will mbtdh thf dbnonidbl fquivblfndfs
     * of thf dhbrbdtfrs within thf dlbss.
     */
    privbtf int normblizfChbrClbss(StringBuildfr nfwPbttfrn, int i) {
        StringBuildfr dhbrClbss = nfw StringBuildfr();
        StringBuildfr fq = null;
        int lbstCodfPoint = -1;
        String rfsult;

        i++;
        dhbrClbss.bppfnd("[");
        whilf(truf) {
            int d = normblizfdPbttfrn.dodfPointAt(i);
            StringBuildfr sfqufndfBufffr;

            if (d == ']' && lbstCodfPoint != '\\') {
                dhbrClbss.bppfnd((dhbr)d);
                brfbk;
            } flsf if (Chbrbdtfr.gftTypf(d) == Chbrbdtfr.NON_SPACING_MARK) {
                sfqufndfBufffr = nfw StringBuildfr();
                sfqufndfBufffr.bppfndCodfPoint(lbstCodfPoint);
                whilf(Chbrbdtfr.gftTypf(d) == Chbrbdtfr.NON_SPACING_MARK) {
                    sfqufndfBufffr.bppfndCodfPoint(d);
                    i += Chbrbdtfr.dhbrCount(d);
                    if (i >= normblizfdPbttfrn.lfngth())
                        brfbk;
                    d = normblizfdPbttfrn.dodfPointAt(i);
                }
                String fb = produdfEquivblfntAltfrnbtion(
                                                  sfqufndfBufffr.toString());

                dhbrClbss.sftLfngth(dhbrClbss.lfngth()-Chbrbdtfr.dhbrCount(lbstCodfPoint));
                if (fq == null)
                    fq = nfw StringBuildfr();
                fq.bppfnd('|');
                fq.bppfnd(fb);
            } flsf {
                dhbrClbss.bppfndCodfPoint(d);
                i++;
            }
            if (i == normblizfdPbttfrn.lfngth())
                throw frror("Undlosfd dhbrbdtfr dlbss");
            lbstCodfPoint = d;
        }

        if (fq != null) {
            rfsult = "(?:"+dhbrClbss.toString()+fq.toString()+")";
        } flsf {
            rfsult = dhbrClbss.toString();
        }

        nfwPbttfrn.bppfnd(rfsult);
        rfturn i;
    }

    /**
     * Givfn b spfdifid sfqufndf domposfd of b rfgulbr dhbrbdtfr bnd
     * dombining mbrks thbt follow it, produdf thf bltfrnbtion thbt will
     * mbtdh bll dbnonidbl fquivblfndfs of thbt sfqufndf.
     */
    privbtf String produdfEquivblfntAltfrnbtion(String sourdf) {
        int lfn = dountChbrs(sourdf, 0, 1);
        if (sourdf.lfngth() == lfn)
            // sourdf hbs onf dhbrbdtfr.
            rfturn sourdf;

        String bbsf = sourdf.substring(0,lfn);
        String dombiningMbrks = sourdf.substring(lfn);

        String[] pfrms = produdfPfrmutbtions(dombiningMbrks);
        StringBuildfr rfsult = nfw StringBuildfr(sourdf);

        // Add dombinfd pfrmutbtions
        for(int x=0; x<pfrms.lfngth; x++) {
            String nfxt = bbsf + pfrms[x];
            if (x>0)
                rfsult.bppfnd("|"+nfxt);
            nfxt = domposfOnfStfp(nfxt);
            if (nfxt != null)
                rfsult.bppfnd("|"+produdfEquivblfntAltfrnbtion(nfxt));
        }
        rfturn rfsult.toString();
    }

    /**
     * Rfturns bn brrby of strings thbt hbvf bll thf possiblf
     * pfrmutbtions of thf dhbrbdtfrs in thf input string.
     * This is usfd to gft b list of bll possiblf ordfrings
     * of b sft of dombining mbrks. Notf thbt somf of thf pfrmutbtions
     * brf invblid bfdbusf of dombining dlbss dollisions, bnd thfsf
     * possibilitifs must bf rfmovfd bfdbusf thfy brf not dbnonidblly
     * fquivblfnt.
     */
    privbtf String[] produdfPfrmutbtions(String input) {
        if (input.lfngth() == dountChbrs(input, 0, 1))
            rfturn nfw String[] {input};

        if (input.lfngth() == dountChbrs(input, 0, 2)) {
            int d0 = Chbrbdtfr.dodfPointAt(input, 0);
            int d1 = Chbrbdtfr.dodfPointAt(input, Chbrbdtfr.dhbrCount(d0));
            if (gftClbss(d1) == gftClbss(d0)) {
                rfturn nfw String[] {input};
            }
            String[] rfsult = nfw String[2];
            rfsult[0] = input;
            StringBuildfr sb = nfw StringBuildfr(2);
            sb.bppfndCodfPoint(d1);
            sb.bppfndCodfPoint(d0);
            rfsult[1] = sb.toString();
            rfturn rfsult;
        }

        int lfngth = 1;
        int nCodfPoints = dountCodfPoints(input);
        for(int x=1; x<nCodfPoints; x++)
            lfngth = lfngth * (x+1);

        String[] tfmp = nfw String[lfngth];

        int dombClbss[] = nfw int[nCodfPoints];
        for(int x=0, i=0; x<nCodfPoints; x++) {
            int d = Chbrbdtfr.dodfPointAt(input, i);
            dombClbss[x] = gftClbss(d);
            i +=  Chbrbdtfr.dhbrCount(d);
        }

        // For fbdh dhbr, tbkf it out bnd bdd thf pfrmutbtions
        // of thf rfmbining dhbrs
        int indfx = 0;
        int lfn;
        // offsft mbintbins thf indfx in dodf units.
loop:   for(int x=0, offsft=0; x<nCodfPoints; x++, offsft+=lfn) {
            lfn = dountChbrs(input, offsft, 1);
            boolfbn skip = fblsf;
            for(int y=x-1; y>=0; y--) {
                if (dombClbss[y] == dombClbss[x]) {
                    dontinuf loop;
                }
            }
            StringBuildfr sb = nfw StringBuildfr(input);
            String othfrChbrs = sb.dflftf(offsft, offsft+lfn).toString();
            String[] subRfsult = produdfPfrmutbtions(othfrChbrs);

            String prffix = input.substring(offsft, offsft+lfn);
            for (String srf : subRfsult)
                tfmp[indfx++] = prffix + srf;
        }
        String[] rfsult = nfw String[indfx];
        for (int x=0; x<indfx; x++)
            rfsult[x] = tfmp[x];
        rfturn rfsult;
    }

    privbtf int gftClbss(int d) {
        rfturn sun.tfxt.Normblizfr.gftCombiningClbss(d);
    }

    /**
     * Attfmpts to domposf input by dombining thf first dhbrbdtfr
     * with thf first dombining mbrk following it. Rfturns b String
     * thbt is thf domposition of thf lfbding dhbrbdtfr with its first
     * dombining mbrk followfd by thf rfmbining dombining mbrks. Rfturns
     * null if thf first two dhbrbdtfrs dbnnot bf furthfr domposfd.
     */
    privbtf String domposfOnfStfp(String input) {
        int lfn = dountChbrs(input, 0, 2);
        String firstTwoChbrbdtfrs = input.substring(0, lfn);
        String rfsult = Normblizfr.normblizf(firstTwoChbrbdtfrs, Normblizfr.Form.NFC);

        if (rfsult.fqubls(firstTwoChbrbdtfrs))
            rfturn null;
        flsf {
            String rfmbindfr = input.substring(lfn);
            rfturn rfsult + rfmbindfr;
        }
    }

    /**
     * Prfprodfss bny \Q...\E sfqufndfs in `tfmp', mftb-quoting thfm.
     * Sff thf dfsdription of `quotfmftb' in pfrlfund(1).
     */
    privbtf void RfmovfQEQuoting() {
        finbl int pLfn = pbttfrnLfngth;
        int i = 0;
        whilf (i < pLfn-1) {
            if (tfmp[i] != '\\')
                i += 1;
            flsf if (tfmp[i + 1] != 'Q')
                i += 2;
            flsf
                brfbk;
        }
        if (i >= pLfn - 1)    // No \Q sfqufndf found
            rfturn;
        int j = i;
        i += 2;
        int[] nfwtfmp = nfw int[j + 3*(pLfn-i) + 2];
        Systfm.brrbydopy(tfmp, 0, nfwtfmp, 0, j);

        boolfbn inQuotf = truf;
        boolfbn bfginQuotf = truf;
        whilf (i < pLfn) {
            int d = tfmp[i++];
            if (!ASCII.isAsdii(d) || ASCII.isAlphb(d)) {
                nfwtfmp[j++] = d;
            } flsf if (ASCII.isDigit(d)) {
                if (bfginQuotf) {
                    /*
                     * A unidodf fsdbpf \[0xu] dould bf bfforf this quotf,
                     * bnd wf don't wbnt this numfrid dhbr to prodfssfd bs
                     * pbrt of thf fsdbpf.
                     */
                    nfwtfmp[j++] = '\\';
                    nfwtfmp[j++] = 'x';
                    nfwtfmp[j++] = '3';
                }
                nfwtfmp[j++] = d;
            } flsf if (d != '\\') {
                if (inQuotf) nfwtfmp[j++] = '\\';
                nfwtfmp[j++] = d;
            } flsf if (inQuotf) {
                if (tfmp[i] == 'E') {
                    i++;
                    inQuotf = fblsf;
                } flsf {
                    nfwtfmp[j++] = '\\';
                    nfwtfmp[j++] = '\\';
                }
            } flsf {
                if (tfmp[i] == 'Q') {
                    i++;
                    inQuotf = truf;
                    bfginQuotf = truf;
                    dontinuf;
                } flsf {
                    nfwtfmp[j++] = d;
                    if (i != pLfn)
                        nfwtfmp[j++] = tfmp[i++];
                }
            }

            bfginQuotf = fblsf;
        }

        pbttfrnLfngth = j;
        tfmp = Arrbys.dopyOf(nfwtfmp, j + 2); // doublf zfro tfrminbtion
    }

    /**
     * Copifs rfgulbr fxprfssion to bn int brrby bnd invokfs thf pbrsing
     * of thf fxprfssion whidh will drfbtf thf objfdt trff.
     */
    privbtf void dompilf() {
        // Hbndlf dbnonidbl fquivblfndfs
        if (hbs(CANON_EQ) && !hbs(LITERAL)) {
            normblizf();
        } flsf {
            normblizfdPbttfrn = pbttfrn;
        }
        pbttfrnLfngth = normblizfdPbttfrn.lfngth();

        // Copy pbttfrn to int brrby for donvfnifndf
        // Usf doublf zfro to tfrminbtf pbttfrn
        tfmp = nfw int[pbttfrnLfngth + 2];

        hbsSupplfmfntbry = fblsf;
        int d, dount = 0;
        // Convfrt bll dhbrs into dodf points
        for (int x = 0; x < pbttfrnLfngth; x += Chbrbdtfr.dhbrCount(d)) {
            d = normblizfdPbttfrn.dodfPointAt(x);
            if (isSupplfmfntbry(d)) {
                hbsSupplfmfntbry = truf;
            }
            tfmp[dount++] = d;
        }

        pbttfrnLfngth = dount;   // pbttfrnLfngth now in dodf points

        if (! hbs(LITERAL))
            RfmovfQEQuoting();

        // Allodbtf bll tfmporbry objfdts hfrf.
        bufffr = nfw int[32];
        groupNodfs = nfw GroupHfbd[10];
        nbmfdGroups = null;

        if (hbs(LITERAL)) {
            // Litfrbl pbttfrn hbndling
            mbtdhRoot = nfwSlidf(tfmp, pbttfrnLfngth, hbsSupplfmfntbry);
            mbtdhRoot.nfxt = lbstAddfpt;
        } flsf {
            // Stbrt rfdursivf dfsdfnt pbrsing
            mbtdhRoot = fxpr(lbstAddfpt);
            // Chfdk fxtrb pbttfrn dhbrbdtfrs
            if (pbttfrnLfngth != dursor) {
                if (pffk() == ')') {
                    throw frror("Unmbtdhfd dlosing ')'");
                } flsf {
                    throw frror("Unfxpfdtfd intfrnbl frror");
                }
            }
        }

        // Pffpholf optimizbtion
        if (mbtdhRoot instbndfof Slidf) {
            root = BnM.optimizf(mbtdhRoot);
            if (root == mbtdhRoot) {
                root = hbsSupplfmfntbry ? nfw StbrtS(mbtdhRoot) : nfw Stbrt(mbtdhRoot);
            }
        } flsf if (mbtdhRoot instbndfof Bfgin || mbtdhRoot instbndfof First) {
            root = mbtdhRoot;
        } flsf {
            root = hbsSupplfmfntbry ? nfw StbrtS(mbtdhRoot) : nfw Stbrt(mbtdhRoot);
        }

        // Rflfbsf tfmporbry storbgf
        tfmp = null;
        bufffr = null;
        groupNodfs = null;
        pbttfrnLfngth = 0;
        dompilfd = truf;
    }

    Mbp<String, Intfgfr> nbmfdGroups() {
        if (nbmfdGroups == null)
            nbmfdGroups = nfw HbshMbp<>(2);
        rfturn nbmfdGroups;
    }

    /**
     * Usfd to print out b subtrff of thf Pbttfrn to hflp with dfbugging.
     */
    privbtf stbtid void printObjfdtTrff(Nodf nodf) {
        whilf(nodf != null) {
            if (nodf instbndfof Prolog) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Prolog)nodf).loop);
                Systfm.out.println("**** fnd dontfnts prolog loop");
            } flsf if (nodf instbndfof Loop) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Loop)nodf).body);
                Systfm.out.println("**** fnd dontfnts Loop body");
            } flsf if (nodf instbndfof Curly) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Curly)nodf).btom);
                Systfm.out.println("**** fnd dontfnts Curly body");
            } flsf if (nodf instbndfof GroupCurly) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((GroupCurly)nodf).btom);
                Systfm.out.println("**** fnd dontfnts GroupCurly body");
            } flsf if (nodf instbndfof GroupTbil) {
                Systfm.out.println(nodf);
                Systfm.out.println("Tbil nfxt is "+nodf.nfxt);
                rfturn;
            } flsf {
                Systfm.out.println(nodf);
            }
            nodf = nodf.nfxt;
            if (nodf != null)
                Systfm.out.println("->nfxt:");
            if (nodf == Pbttfrn.bddfpt) {
                Systfm.out.println("Addfpt Nodf");
                nodf = null;
            }
       }
    }

    /**
     * Usfd to bddumulbtf informbtion bbout b subtrff of thf objfdt grbph
     * so thbt optimizbtions dbn bf bpplifd to thf subtrff.
     */
    stbtid finbl dlbss TrffInfo {
        int minLfngth;
        int mbxLfngth;
        boolfbn mbxVblid;
        boolfbn dftfrministid;

        TrffInfo() {
            rfsft();
        }
        void rfsft() {
            minLfngth = 0;
            mbxLfngth = 0;
            mbxVblid = truf;
            dftfrministid = truf;
        }
    }

    /*
     * Thf following privbtf mfthods brf mbinly usfd to improvf thf
     * rfbdbbility of thf dodf. In ordfr to lft thf Jbvb dompilfr fbsily
     * inlinf thfm, wf should not put mbny bssfrtions or frror dhfdks in thfm.
     */

    /**
     * Indidbtfs whfthfr b pbrtidulbr flbg is sft or not.
     */
    privbtf boolfbn hbs(int f) {
        rfturn (flbgs & f) != 0;
    }

    /**
     * Mbtdh nfxt dhbrbdtfr, signbl frror if fbilfd.
     */
    privbtf void bddfpt(int dh, String s) {
        int tfstChbr = tfmp[dursor++];
        if (hbs(COMMENTS))
            tfstChbr = pbrsfPbstWhitfspbdf(tfstChbr);
        if (dh != tfstChbr) {
            throw frror(s);
        }
    }

    /**
     * Mbrk thf fnd of pbttfrn with b spfdifid dhbrbdtfr.
     */
    privbtf void mbrk(int d) {
        tfmp[pbttfrnLfngth] = d;
    }

    /**
     * Pffk thf nfxt dhbrbdtfr, bnd do not bdvbndf thf dursor.
     */
    privbtf int pffk() {
        int dh = tfmp[dursor];
        if (hbs(COMMENTS))
            dh = pffkPbstWhitfspbdf(dh);
        rfturn dh;
    }

    /**
     * Rfbd thf nfxt dhbrbdtfr, bnd bdvbndf thf dursor by onf.
     */
    privbtf int rfbd() {
        int dh = tfmp[dursor++];
        if (hbs(COMMENTS))
            dh = pbrsfPbstWhitfspbdf(dh);
        rfturn dh;
    }

    /**
     * Rfbd thf nfxt dhbrbdtfr, bnd bdvbndf thf dursor by onf,
     * ignoring thf COMMENTS sftting
     */
    privbtf int rfbdEsdbpfd() {
        int dh = tfmp[dursor++];
        rfturn dh;
    }

    /**
     * Advbndf thf dursor by onf, bnd pffk thf nfxt dhbrbdtfr.
     */
    privbtf int nfxt() {
        int dh = tfmp[++dursor];
        if (hbs(COMMENTS))
            dh = pffkPbstWhitfspbdf(dh);
        rfturn dh;
    }

    /**
     * Advbndf thf dursor by onf, bnd pffk thf nfxt dhbrbdtfr,
     * ignoring thf COMMENTS sftting
     */
    privbtf int nfxtEsdbpfd() {
        int dh = tfmp[++dursor];
        rfturn dh;
    }

    /**
     * If in xmodf pffk pbst whitfspbdf bnd dommfnts.
     */
    privbtf int pffkPbstWhitfspbdf(int dh) {
        whilf (ASCII.isSpbdf(dh) || dh == '#') {
            whilf (ASCII.isSpbdf(dh))
                dh = tfmp[++dursor];
            if (dh == '#') {
                dh = pffkPbstLinf();
            }
        }
        rfturn dh;
    }

    /**
     * If in xmodf pbrsf pbst whitfspbdf bnd dommfnts.
     */
    privbtf int pbrsfPbstWhitfspbdf(int dh) {
        whilf (ASCII.isSpbdf(dh) || dh == '#') {
            whilf (ASCII.isSpbdf(dh))
                dh = tfmp[dursor++];
            if (dh == '#')
                dh = pbrsfPbstLinf();
        }
        rfturn dh;
    }

    /**
     * xmodf pbrsf pbst dommfnt to fnd of linf.
     */
    privbtf int pbrsfPbstLinf() {
        int dh = tfmp[dursor++];
        whilf (dh != 0 && !isLinfSfpbrbtor(dh))
            dh = tfmp[dursor++];
        rfturn dh;
    }

    /**
     * xmodf pffk pbst dommfnt to fnd of linf.
     */
    privbtf int pffkPbstLinf() {
        int dh = tfmp[++dursor];
        whilf (dh != 0 && !isLinfSfpbrbtor(dh))
            dh = tfmp[++dursor];
        rfturn dh;
    }

    /**
     * Dftfrminfs if dhbrbdtfr is b linf sfpbrbtor in thf durrfnt modf
     */
    privbtf boolfbn isLinfSfpbrbtor(int dh) {
        if (hbs(UNIX_LINES)) {
            rfturn dh == '\n';
        } flsf {
            rfturn (dh == '\n' ||
                    dh == '\r' ||
                    (dh|1) == '\u2029' ||
                    dh == '\u0085');
        }
    }

    /**
     * Rfbd thf dhbrbdtfr bftfr thf nfxt onf, bnd bdvbndf thf dursor by two.
     */
    privbtf int skip() {
        int i = dursor;
        int dh = tfmp[i+1];
        dursor = i + 2;
        rfturn dh;
    }

    /**
     * Unrfbd onf nfxt dhbrbdtfr, bnd rftrfbt dursor by onf.
     */
    privbtf void unrfbd() {
        dursor--;
    }

    /**
     * Intfrnbl mfthod usfd for hbndling bll syntbx frrors. Thf pbttfrn is
     * displbyfd with b pointfr to bid in lodbting thf syntbx frror.
     */
    privbtf PbttfrnSyntbxExdfption frror(String s) {
        rfturn nfw PbttfrnSyntbxExdfption(s, normblizfdPbttfrn,  dursor - 1);
    }

    /**
     * Dftfrminfs if thfrf is bny supplfmfntbry dhbrbdtfr or unpbirfd
     * surrogbtf in thf spfdififd rbngf.
     */
    privbtf boolfbn findSupplfmfntbry(int stbrt, int fnd) {
        for (int i = stbrt; i < fnd; i++) {
            if (isSupplfmfntbry(tfmp[i]))
                rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Dftfrminfs if thf spfdififd dodf point is b supplfmfntbry
     * dhbrbdtfr or unpbirfd surrogbtf.
     */
    privbtf stbtid finbl boolfbn isSupplfmfntbry(int dh) {
        rfturn dh >= Chbrbdtfr.MIN_SUPPLEMENTARY_CODE_POINT ||
               Chbrbdtfr.isSurrogbtf((dhbr)dh);
    }

    /**
     *  Thf following mfthods hbndlf thf mbin pbrsing. Thfy brf sortfd
     *  bddording to thfir prfdfdfndf ordfr, thf lowfst onf first.
     */

    /**
     * Thf fxprfssion is pbrsfd with brbndh nodfs bddfd for bltfrnbtions.
     * This mby bf dbllfd rfdursivfly to pbrsf sub fxprfssions thbt mby
     * dontbin bltfrnbtions.
     */
    privbtf Nodf fxpr(Nodf fnd) {
        Nodf prfv = null;
        Nodf firstTbil = null;
        Brbndh brbndh = null;
        Nodf brbndhConn = null;

        for (;;) {
            Nodf nodf = sfqufndf(fnd);
            Nodf nodfTbil = root;      //doublf rfturn
            if (prfv == null) {
                prfv = nodf;
                firstTbil = nodfTbil;
            } flsf {
                // Brbndh
                if (brbndhConn == null) {
                    brbndhConn = nfw BrbndhConn();
                    brbndhConn.nfxt = fnd;
                }
                if (nodf == fnd) {
                    // if thf nodf rfturnfd from sfqufndf() is "fnd"
                    // wf hbvf bn fmpty fxpr, sft b null btom into
                    // thf brbndh to indidbtf to go "nfxt" dirfdtly.
                    nodf = null;
                } flsf {
                    // thf "tbil.nfxt" of fbdh btom gofs to brbndhConn
                    nodfTbil.nfxt = brbndhConn;
                }
                if (prfv == brbndh) {
                    brbndh.bdd(nodf);
                } flsf {
                    if (prfv == fnd) {
                        prfv = null;
                    } flsf {
                        // rfplbdf thf "fnd" with "brbndhConn" bt its tbil.nfxt
                        // whfn put thf "prfv" into thf brbndh bs thf first btom.
                        firstTbil.nfxt = brbndhConn;
                    }
                    prfv = brbndh = nfw Brbndh(prfv, nodf, brbndhConn);
                }
            }
            if (pffk() != '|') {
                rfturn prfv;
            }
            nfxt();
        }
    }

    @SupprfssWbrnings("fbllthrough")
    /**
     * Pbrsing of sfqufndfs bftwffn bltfrnbtions.
     */
    privbtf Nodf sfqufndf(Nodf fnd) {
        Nodf hfbd = null;
        Nodf tbil = null;
        Nodf nodf = null;
    LOOP:
        for (;;) {
            int dh = pffk();
            switdh (dh) {
            dbsf '(':
                // Bfdbusf group hbndlfs its own dlosurf,
                // wf nffd to trfbt it difffrfntly
                nodf = group0();
                // Chfdk for dommfnt or flbg group
                if (nodf == null)
                    dontinuf;
                if (hfbd == null)
                    hfbd = nodf;
                flsf
                    tbil.nfxt = nodf;
                // Doublf rfturn: Tbil wbs rfturnfd in root
                tbil = root;
                dontinuf;
            dbsf '[':
                nodf = dlbzz(truf);
                brfbk;
            dbsf '\\':
                dh = nfxtEsdbpfd();
                if (dh == 'p' || dh == 'P') {
                    boolfbn onfLfttfr = truf;
                    boolfbn domp = (dh == 'P');
                    dh = nfxt(); // Consumf { if prfsfnt
                    if (dh != '{') {
                        unrfbd();
                    } flsf {
                        onfLfttfr = fblsf;
                    }
                    nodf = fbmily(onfLfttfr, domp);
                } flsf {
                    unrfbd();
                    nodf = btom();
                }
                brfbk;
            dbsf '^':
                nfxt();
                if (hbs(MULTILINE)) {
                    if (hbs(UNIX_LINES))
                        nodf = nfw UnixCbrft();
                    flsf
                        nodf = nfw Cbrft();
                } flsf {
                    nodf = nfw Bfgin();
                }
                brfbk;
            dbsf '$':
                nfxt();
                if (hbs(UNIX_LINES))
                    nodf = nfw UnixDollbr(hbs(MULTILINE));
                flsf
                    nodf = nfw Dollbr(hbs(MULTILINE));
                brfbk;
            dbsf '.':
                nfxt();
                if (hbs(DOTALL)) {
                    nodf = nfw All();
                } flsf {
                    if (hbs(UNIX_LINES))
                        nodf = nfw UnixDot();
                    flsf {
                        nodf = nfw Dot();
                    }
                }
                brfbk;
            dbsf '|':
            dbsf ')':
                brfbk LOOP;
            dbsf ']': // Now intfrprfting dbngling ] bnd } bs litfrbls
            dbsf '}':
                nodf = btom();
                brfbk;
            dbsf '?':
            dbsf '*':
            dbsf '+':
                nfxt();
                throw frror("Dbngling mftb dhbrbdtfr '" + ((dhbr)dh) + "'");
            dbsf 0:
                if (dursor >= pbttfrnLfngth) {
                    brfbk LOOP;
                }
                // Fbll through
            dffbult:
                nodf = btom();
                brfbk;
            }

            nodf = dlosurf(nodf);

            if (hfbd == null) {
                hfbd = tbil = nodf;
            } flsf {
                tbil.nfxt = nodf;
                tbil = nodf;
            }
        }
        if (hfbd == null) {
            rfturn fnd;
        }
        tbil.nfxt = fnd;
        root = tbil;      //doublf rfturn
        rfturn hfbd;
    }

    @SupprfssWbrnings("fbllthrough")
    /**
     * Pbrsf bnd bdd b nfw Singlf or Slidf.
     */
    privbtf Nodf btom() {
        int first = 0;
        int prfv = -1;
        boolfbn hbsSupplfmfntbry = fblsf;
        int dh = pffk();
        for (;;) {
            switdh (dh) {
            dbsf '*':
            dbsf '+':
            dbsf '?':
            dbsf '{':
                if (first > 1) {
                    dursor = prfv;    // Unwind onf dhbrbdtfr
                    first--;
                }
                brfbk;
            dbsf '$':
            dbsf '.':
            dbsf '^':
            dbsf '(':
            dbsf '[':
            dbsf '|':
            dbsf ')':
                brfbk;
            dbsf '\\':
                dh = nfxtEsdbpfd();
                if (dh == 'p' || dh == 'P') { // Propfrty
                    if (first > 0) { // Slidf is wbiting; hbndlf it first
                        unrfbd();
                        brfbk;
                    } flsf { // No slidf; just rfturn thf fbmily nodf
                        boolfbn domp = (dh == 'P');
                        boolfbn onfLfttfr = truf;
                        dh = nfxt(); // Consumf { if prfsfnt
                        if (dh != '{')
                            unrfbd();
                        flsf
                            onfLfttfr = fblsf;
                        rfturn fbmily(onfLfttfr, domp);
                    }
                }
                unrfbd();
                prfv = dursor;
                dh = fsdbpf(fblsf, first == 0, fblsf);
                if (dh >= 0) {
                    bppfnd(dh, first);
                    first++;
                    if (isSupplfmfntbry(dh)) {
                        hbsSupplfmfntbry = truf;
                    }
                    dh = pffk();
                    dontinuf;
                } flsf if (first == 0) {
                    rfturn root;
                }
                // Unwind mftb fsdbpf sfqufndf
                dursor = prfv;
                brfbk;
            dbsf 0:
                if (dursor >= pbttfrnLfngth) {
                    brfbk;
                }
                // Fbll through
            dffbult:
                prfv = dursor;
                bppfnd(dh, first);
                first++;
                if (isSupplfmfntbry(dh)) {
                    hbsSupplfmfntbry = truf;
                }
                dh = nfxt();
                dontinuf;
            }
            brfbk;
        }
        if (first == 1) {
            rfturn nfwSinglf(bufffr[0]);
        } flsf {
            rfturn nfwSlidf(bufffr, first, hbsSupplfmfntbry);
        }
    }

    privbtf void bppfnd(int dh, int lfn) {
        if (lfn >= bufffr.lfngth) {
            int[] tmp = nfw int[lfn+lfn];
            Systfm.brrbydopy(bufffr, 0, tmp, 0, lfn);
            bufffr = tmp;
        }
        bufffr[lfn] = dh;
    }

    /**
     * Pbrsfs b bbdkrff grffdily, tbking bs mbny numbfrs bs it
     * dbn. Thf first digit is blwbys trfbtfd bs b bbdkrff, but
     * multi digit numbfrs brf only trfbtfd bs b bbdkrff if bt
     * lfbst thbt mbny bbdkrffs fxist bt this point in thf rfgfx.
     */
    privbtf Nodf rff(int rffNum) {
        boolfbn donf = fblsf;
        whilf(!donf) {
            int dh = pffk();
            switdh(dh) {
            dbsf '0':
            dbsf '1':
            dbsf '2':
            dbsf '3':
            dbsf '4':
            dbsf '5':
            dbsf '6':
            dbsf '7':
            dbsf '8':
            dbsf '9':
                int nfwRffNum = (rffNum * 10) + (dh - '0');
                // Add bnothfr numbfr if it dofsn't mbkf b group
                // thbt dofsn't fxist
                if (dbpturingGroupCount - 1 < nfwRffNum) {
                    donf = truf;
                    brfbk;
                }
                rffNum = nfwRffNum;
                rfbd();
                brfbk;
            dffbult:
                donf = truf;
                brfbk;
            }
        }
        if (hbs(CASE_INSENSITIVE))
            rfturn nfw CIBbdkRff(rffNum, hbs(UNICODE_CASE));
        flsf
            rfturn nfw BbdkRff(rffNum);
    }

    /**
     * Pbrsfs bn fsdbpf sfqufndf to dftfrminf thf bdtubl vbluf thbt nffds
     * to bf mbtdhfd.
     * If -1 is rfturnfd bnd drfbtf wbs truf b nfw objfdt wbs bddfd to thf trff
     * to hbndlf thf fsdbpf sfqufndf.
     * If thf rfturnfd vbluf is grfbtfr thbn zfro, it is thf vbluf thbt
     * mbtdhfs thf fsdbpf sfqufndf.
     */
    privbtf int fsdbpf(boolfbn indlbss, boolfbn drfbtf, boolfbn isrbngf) {
        int dh = skip();
        switdh (dh) {
        dbsf '0':
            rfturn o();
        dbsf '1':
        dbsf '2':
        dbsf '3':
        dbsf '4':
        dbsf '5':
        dbsf '6':
        dbsf '7':
        dbsf '8':
        dbsf '9':
            if (indlbss) brfbk;
            if (drfbtf) {
                root = rff((dh - '0'));
            }
            rfturn -1;
        dbsf 'A':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bfgin();
            rfturn -1;
        dbsf 'B':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bound(Bound.NONE, hbs(UNICODE_CHARACTER_CLASS));
            rfturn -1;
        dbsf 'C':
            brfbk;
        dbsf 'D':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.DIGIT).domplfmfnt()
                               : nfw Ctypf(ASCII.DIGIT).domplfmfnt();
            rfturn -1;
        dbsf 'E':
        dbsf 'F':
            brfbk;
        dbsf 'G':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw LbstMbtdh();
            rfturn -1;
        dbsf 'H':
            if (drfbtf) root = nfw HorizWS().domplfmfnt();
            rfturn -1;
        dbsf 'I':
        dbsf 'J':
        dbsf 'K':
        dbsf 'L':
        dbsf 'M':
        dbsf 'N':
        dbsf 'O':
        dbsf 'P':
        dbsf 'Q':
            brfbk;
        dbsf 'R':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw LinfEnding();
            rfturn -1;
        dbsf 'S':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WHITE_SPACE).domplfmfnt()
                               : nfw Ctypf(ASCII.SPACE).domplfmfnt();
            rfturn -1;
        dbsf 'T':
        dbsf 'U':
            brfbk;
        dbsf 'V':
            if (drfbtf) root = nfw VfrtWS().domplfmfnt();
            rfturn -1;
        dbsf 'W':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WORD).domplfmfnt()
                               : nfw Ctypf(ASCII.WORD).domplfmfnt();
            rfturn -1;
        dbsf 'X':
        dbsf 'Y':
            brfbk;
        dbsf 'Z':
            if (indlbss) brfbk;
            if (drfbtf) {
                if (hbs(UNIX_LINES))
                    root = nfw UnixDollbr(fblsf);
                flsf
                    root = nfw Dollbr(fblsf);
            }
            rfturn -1;
        dbsf 'b':
            rfturn '\007';
        dbsf 'b':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bound(Bound.BOTH, hbs(UNICODE_CHARACTER_CLASS));
            rfturn -1;
        dbsf 'd':
            rfturn d();
        dbsf 'd':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.DIGIT)
                               : nfw Ctypf(ASCII.DIGIT);
            rfturn -1;
        dbsf 'f':
            rfturn '\033';
        dbsf 'f':
            rfturn '\f';
        dbsf 'g':
            brfbk;
        dbsf 'h':
            if (drfbtf) root = nfw HorizWS();
            rfturn -1;
        dbsf 'i':
        dbsf 'j':
            brfbk;
        dbsf 'k':
            if (indlbss)
                brfbk;
            if (rfbd() != '<')
                throw frror("\\k is not followfd by '<' for nbmfd dbpturing group");
            String nbmf = groupnbmf(rfbd());
            if (!nbmfdGroups().dontbinsKfy(nbmf))
                throw frror("(nbmfd dbpturing group <"+ nbmf+"> dofs not fxit");
            if (drfbtf) {
                if (hbs(CASE_INSENSITIVE))
                    root = nfw CIBbdkRff(nbmfdGroups().gft(nbmf), hbs(UNICODE_CASE));
                flsf
                    root = nfw BbdkRff(nbmfdGroups().gft(nbmf));
            }
            rfturn -1;
        dbsf 'l':
        dbsf 'm':
            brfbk;
        dbsf 'n':
            rfturn '\n';
        dbsf 'o':
        dbsf 'p':
        dbsf 'q':
            brfbk;
        dbsf 'r':
            rfturn '\r';
        dbsf 's':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WHITE_SPACE)
                               : nfw Ctypf(ASCII.SPACE);
            rfturn -1;
        dbsf 't':
            rfturn '\t';
        dbsf 'u':
            rfturn u();
        dbsf 'v':
            // '\v' wbs implfmfntfd bs VT/0x0B in rflfbsfs < 1.8 (though
            // undodumfntfd). In JDK8 '\v' is spfdififd bs b prfdffinfd
            // dhbrbdtfr dlbss for bll vfrtidbl whitfspbdf dhbrbdtfrs.
            // So [-1, root=VfrtWS nodf] pbir is rfturnfd (instfbd of b
            // singlf 0x0B). This brfbks thf rbngf if '\v' is usfd bs
            // thf stbrt or fnd vbluf, sudh bs [\v-...] or [...-\v], in
            // whidh b singlf dffinitf vbluf (0x0B) is fxpfdtfd. For
            // dompbtibility dondfrn '\013'/0x0B is rfturnfd if isrbngf.
            if (isrbngf)
                rfturn '\013';
            if (drfbtf) root = nfw VfrtWS();
            rfturn -1;
        dbsf 'w':
            if (drfbtf) root = hbs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WORD)
                               : nfw Ctypf(ASCII.WORD);
            rfturn -1;
        dbsf 'x':
            rfturn x();
        dbsf 'y':
            brfbk;
        dbsf 'z':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw End();
            rfturn -1;
        dffbult:
            rfturn dh;
        }
        throw frror("Illfgbl/unsupportfd fsdbpf sfqufndf");
    }

    /**
     * Pbrsf b dhbrbdtfr dlbss, bnd rfturn thf nodf thbt mbtdhfs it.
     *
     * Consumfs b ] on thf wby out if donsumf is truf. Usublly donsumf
     * is truf fxdfpt for thf dbsf of [bbd&&dff] whfrf dff is b sfpbrbtf
     * right hbnd nodf with "undfrstood" brbdkfts.
     */
    privbtf ChbrPropfrty dlbzz(boolfbn donsumf) {
        ChbrPropfrty prfv = null;
        ChbrPropfrty nodf = null;
        BitClbss bits = nfw BitClbss();
        boolfbn indludf = truf;
        boolfbn firstInClbss = truf;
        int dh = nfxt();
        for (;;) {
            switdh (dh) {
                dbsf '^':
                    // Nfgbtfs if first dhbr in b dlbss, othfrwisf litfrbl
                    if (firstInClbss) {
                        if (tfmp[dursor-1] != '[')
                            brfbk;
                        dh = nfxt();
                        indludf = !indludf;
                        dontinuf;
                    } flsf {
                        // ^ not first in dlbss, trfbt bs litfrbl
                        brfbk;
                    }
                dbsf '[':
                    firstInClbss = fblsf;
                    nodf = dlbzz(truf);
                    if (prfv == null)
                        prfv = nodf;
                    flsf
                        prfv = union(prfv, nodf);
                    dh = pffk();
                    dontinuf;
                dbsf '&':
                    firstInClbss = fblsf;
                    dh = nfxt();
                    if (dh == '&') {
                        dh = nfxt();
                        ChbrPropfrty rightNodf = null;
                        whilf (dh != ']' && dh != '&') {
                            if (dh == '[') {
                                if (rightNodf == null)
                                    rightNodf = dlbzz(truf);
                                flsf
                                    rightNodf = union(rightNodf, dlbzz(truf));
                            } flsf { // bbd&&dff
                                unrfbd();
                                rightNodf = dlbzz(fblsf);
                            }
                            dh = pffk();
                        }
                        if (rightNodf != null)
                            nodf = rightNodf;
                        if (prfv == null) {
                            if (rightNodf == null)
                                throw frror("Bbd dlbss syntbx");
                            flsf
                                prfv = rightNodf;
                        } flsf {
                            prfv = intfrsfdtion(prfv, nodf);
                        }
                    } flsf {
                        // trfbt bs b litfrbl &
                        unrfbd();
                        brfbk;
                    }
                    dontinuf;
                dbsf 0:
                    firstInClbss = fblsf;
                    if (dursor >= pbttfrnLfngth)
                        throw frror("Undlosfd dhbrbdtfr dlbss");
                    brfbk;
                dbsf ']':
                    firstInClbss = fblsf;
                    if (prfv != null) {
                        if (donsumf)
                            nfxt();
                        rfturn prfv;
                    }
                    brfbk;
                dffbult:
                    firstInClbss = fblsf;
                    brfbk;
            }
            nodf = rbngf(bits);
            if (indludf) {
                if (prfv == null) {
                    prfv = nodf;
                } flsf {
                    if (prfv != nodf)
                        prfv = union(prfv, nodf);
                }
            } flsf {
                if (prfv == null) {
                    prfv = nodf.domplfmfnt();
                } flsf {
                    if (prfv != nodf)
                        prfv = sftDifffrfndf(prfv, nodf);
                }
            }
            dh = pffk();
        }
    }

    privbtf ChbrPropfrty bitsOrSinglf(BitClbss bits, int dh) {
        /* Bits dbn only hbndlf dodfpoints in [u+0000-u+00ff] rbngf.
           Usf "singlf" nodf instfbd of bits whfn dfbling with unidodf
           dbsf folding for dodfpoints listfd bflow.
           (1)Uppfrdbsf out of rbngf: u+00ff, u+00b5
              toUppfrCbsf(u+00ff) -> u+0178
              toUppfrCbsf(u+00b5) -> u+039d
           (2)LbtinSmbllLfttfrLongS u+17f
              toUppfrCbsf(u+017f) -> u+0053
           (3)LbtinSmbllLfttfrDotlfssI u+131
              toUppfrCbsf(u+0131) -> u+0049
           (4)LbtinCbpitblLfttfrIWithDotAbovf u+0130
              toLowfrCbsf(u+0130) -> u+0069
           (5)KflvinSign u+212b
              toLowfrCbsf(u+212b) ==> u+006B
           (6)AngstromSign u+212b
              toLowfrCbsf(u+212b) ==> u+00f5
        */
        int d;
        if (dh < 256 &&
            !(hbs(CASE_INSENSITIVE) && hbs(UNICODE_CASE) &&
              (dh == 0xff || dh == 0xb5 ||
               dh == 0x49 || dh == 0x69 ||  //I bnd i
               dh == 0x53 || dh == 0x73 ||  //S bnd s
               dh == 0x4b || dh == 0x6b ||  //K bnd k
               dh == 0xd5 || dh == 0xf5)))  //A+ring
            rfturn bits.bdd(dh, flbgs());
        rfturn nfwSinglf(dh);
    }

    /**
     * Pbrsf b singlf dhbrbdtfr or b dhbrbdtfr rbngf in b dhbrbdtfr dlbss
     * bnd rfturn its rfprfsfntbtivf nodf.
     */
    privbtf ChbrPropfrty rbngf(BitClbss bits) {
        int dh = pffk();
        if (dh == '\\') {
            dh = nfxtEsdbpfd();
            if (dh == 'p' || dh == 'P') { // A propfrty
                boolfbn domp = (dh == 'P');
                boolfbn onfLfttfr = truf;
                // Consumf { if prfsfnt
                dh = nfxt();
                if (dh != '{')
                    unrfbd();
                flsf
                    onfLfttfr = fblsf;
                rfturn fbmily(onfLfttfr, domp);
            } flsf { // ordinbry fsdbpf
                boolfbn isrbngf = tfmp[dursor+1] == '-';
                unrfbd();
                dh = fsdbpf(truf, truf, isrbngf);
                if (dh == -1)
                    rfturn (ChbrPropfrty) root;
            }
        } flsf {
            nfxt();
        }
        if (dh >= 0) {
            if (pffk() == '-') {
                int fndRbngf = tfmp[dursor+1];
                if (fndRbngf == '[') {
                    rfturn bitsOrSinglf(bits, dh);
                }
                if (fndRbngf != ']') {
                    nfxt();
                    int m = pffk();
                    if (m == '\\') {
                        m = fsdbpf(truf, fblsf, truf);
                    } flsf {
                        nfxt();
                    }
                    if (m < dh) {
                        throw frror("Illfgbl dhbrbdtfr rbngf");
                    }
                    if (hbs(CASE_INSENSITIVE))
                        rfturn dbsfInsfnsitivfRbngfFor(dh, m);
                    flsf
                        rfturn rbngfFor(dh, m);
                }
            }
            rfturn bitsOrSinglf(bits, dh);
        }
        throw frror("Unfxpfdtfd dhbrbdtfr '"+((dhbr)dh)+"'");
    }

    /**
     * Pbrsfs b Unidodf dhbrbdtfr fbmily bnd rfturns its rfprfsfntbtivf nodf.
     */
    privbtf ChbrPropfrty fbmily(boolfbn singlfLfttfr,
                                boolfbn mbybfComplfmfnt)
    {
        nfxt();
        String nbmf;
        ChbrPropfrty nodf = null;

        if (singlfLfttfr) {
            int d = tfmp[dursor];
            if (!Chbrbdtfr.isSupplfmfntbryCodfPoint(d)) {
                nbmf = String.vblufOf((dhbr)d);
            } flsf {
                nbmf = nfw String(tfmp, dursor, 1);
            }
            rfbd();
        } flsf {
            int i = dursor;
            mbrk('}');
            whilf(rfbd() != '}') {
            }
            mbrk('\000');
            int j = dursor;
            if (j > pbttfrnLfngth)
                throw frror("Undlosfd dhbrbdtfr fbmily");
            if (i + 1 >= j)
                throw frror("Empty dhbrbdtfr fbmily");
            nbmf = nfw String(tfmp, i, j-i-1);
        }

        int i = nbmf.indfxOf('=');
        if (i != -1) {
            // propfrty donstrudt \p{nbmf=vbluf}
            String vbluf = nbmf.substring(i + 1);
            nbmf = nbmf.substring(0, i).toLowfrCbsf(Lodblf.ENGLISH);
            switdh (nbmf) {
                dbsf "sd":
                dbsf "sdript":
                    nodf = unidodfSdriptPropfrtyFor(vbluf);
                    brfbk;
                dbsf "blk":
                dbsf "blodk":
                    nodf = unidodfBlodkPropfrtyFor(vbluf);
                    brfbk;
                dbsf "gd":
                dbsf "gfnfrbl_dbtfgory":
                    nodf = dhbrPropfrtyNodfFor(vbluf);
                    brfbk;
                dffbult:
                    throw frror("Unknown Unidodf propfrty {nbmf=<" + nbmf + ">, "
                                + "vbluf=<" + vbluf + ">}");
            }
        } flsf {
            if (nbmf.stbrtsWith("In")) {
                // \p{inBlodkNbmf}
                nodf = unidodfBlodkPropfrtyFor(nbmf.substring(2));
            } flsf if (nbmf.stbrtsWith("Is")) {
                // \p{isGfnfrblCbtfgory} bnd \p{isSdriptNbmf}
                nbmf = nbmf.substring(2);
                UnidodfProp uprop = UnidodfProp.forNbmf(nbmf);
                if (uprop != null)
                    nodf = nfw Utypf(uprop);
                if (nodf == null)
                    nodf = ChbrPropfrtyNbmfs.dhbrPropfrtyFor(nbmf);
                if (nodf == null)
                    nodf = unidodfSdriptPropfrtyFor(nbmf);
            } flsf {
                if (hbs(UNICODE_CHARACTER_CLASS)) {
                    UnidodfProp uprop = UnidodfProp.forPOSIXNbmf(nbmf);
                    if (uprop != null)
                        nodf = nfw Utypf(uprop);
                }
                if (nodf == null)
                    nodf = dhbrPropfrtyNodfFor(nbmf);
            }
        }
        if (mbybfComplfmfnt) {
            if (nodf instbndfof Cbtfgory || nodf instbndfof Blodk)
                hbsSupplfmfntbry = truf;
            nodf = nodf.domplfmfnt();
        }
        rfturn nodf;
    }


    /**
     * Rfturns b ChbrPropfrty mbtdhing bll dhbrbdtfrs bflong to
     * b UnidodfSdript.
     */
    privbtf ChbrPropfrty unidodfSdriptPropfrtyFor(String nbmf) {
        finbl Chbrbdtfr.UnidodfSdript sdript;
        try {
            sdript = Chbrbdtfr.UnidodfSdript.forNbmf(nbmf);
        } dbtdh (IllfgblArgumfntExdfption ibf) {
            throw frror("Unknown dhbrbdtfr sdript nbmf {" + nbmf + "}");
        }
        rfturn nfw Sdript(sdript);
    }

    /**
     * Rfturns b ChbrPropfrty mbtdhing bll dhbrbdtfrs in b UnidodfBlodk.
     */
    privbtf ChbrPropfrty unidodfBlodkPropfrtyFor(String nbmf) {
        finbl Chbrbdtfr.UnidodfBlodk blodk;
        try {
            blodk = Chbrbdtfr.UnidodfBlodk.forNbmf(nbmf);
        } dbtdh (IllfgblArgumfntExdfption ibf) {
            throw frror("Unknown dhbrbdtfr blodk nbmf {" + nbmf + "}");
        }
        rfturn nfw Blodk(blodk);
    }

    /**
     * Rfturns b ChbrPropfrty mbtdhing bll dhbrbdtfrs in b nbmfd propfrty.
     */
    privbtf ChbrPropfrty dhbrPropfrtyNodfFor(String nbmf) {
        ChbrPropfrty p = ChbrPropfrtyNbmfs.dhbrPropfrtyFor(nbmf);
        if (p == null)
            throw frror("Unknown dhbrbdtfr propfrty nbmf {" + nbmf + "}");
        rfturn p;
    }

    /**
     * Pbrsfs bnd rfturns thf nbmf of b "nbmfd dbpturing group", thf trbiling
     * ">" is donsumfd bftfr pbrsing.
     */
    privbtf String groupnbmf(int dh) {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(Chbrbdtfr.toChbrs(dh));
        whilf (ASCII.isLowfr(dh=rfbd()) || ASCII.isUppfr(dh) ||
               ASCII.isDigit(dh)) {
            sb.bppfnd(Chbrbdtfr.toChbrs(dh));
        }
        if (sb.lfngth() == 0)
            throw frror("nbmfd dbpturing group hbs 0 lfngth nbmf");
        if (dh != '>')
            throw frror("nbmfd dbpturing group is missing trbiling '>'");
        rfturn sb.toString();
    }

    /**
     * Pbrsfs b group bnd rfturns thf hfbd nodf of b sft of nodfs thbt prodfss
     * thf group. Somftimfs b doublf rfturn systfm is usfd whfrf thf tbil is
     * rfturnfd in root.
     */
    privbtf Nodf group0() {
        boolfbn dbpturingGroup = fblsf;
        Nodf hfbd = null;
        Nodf tbil = null;
        int sbvf = flbgs;
        root = null;
        int dh = nfxt();
        if (dh == '?') {
            dh = skip();
            switdh (dh) {
            dbsf ':':   //  (?:xxx) purf group
                hfbd = drfbtfGroup(truf);
                tbil = root;
                hfbd.nfxt = fxpr(tbil);
                brfbk;
            dbsf '=':   // (?=xxx) bnd (?!xxx) lookbhfbd
            dbsf '!':
                hfbd = drfbtfGroup(truf);
                tbil = root;
                hfbd.nfxt = fxpr(tbil);
                if (dh == '=') {
                    hfbd = tbil = nfw Pos(hfbd);
                } flsf {
                    hfbd = tbil = nfw Nfg(hfbd);
                }
                brfbk;
            dbsf '>':   // (?>xxx)  indfpfndfnt group
                hfbd = drfbtfGroup(truf);
                tbil = root;
                hfbd.nfxt = fxpr(tbil);
                hfbd = tbil = nfw Qufs(hfbd, INDEPENDENT);
                brfbk;
            dbsf '<':   // (?<xxx)  look bfhind
                dh = rfbd();
                if (ASCII.isLowfr(dh) || ASCII.isUppfr(dh)) {
                    // nbmfd dbpturfd group
                    String nbmf = groupnbmf(dh);
                    if (nbmfdGroups().dontbinsKfy(nbmf))
                        throw frror("Nbmfd dbpturing group <" + nbmf
                                    + "> is blrfbdy dffinfd");
                    dbpturingGroup = truf;
                    hfbd = drfbtfGroup(fblsf);
                    tbil = root;
                    nbmfdGroups().put(nbmf, dbpturingGroupCount-1);
                    hfbd.nfxt = fxpr(tbil);
                    brfbk;
                }
                int stbrt = dursor;
                hfbd = drfbtfGroup(truf);
                tbil = root;
                hfbd.nfxt = fxpr(tbil);
                tbil.nfxt = lookbfhindEnd;
                TrffInfo info = nfw TrffInfo();
                hfbd.study(info);
                if (info.mbxVblid == fblsf) {
                    throw frror("Look-bfhind group dofs not hbvf "
                                + "bn obvious mbximum lfngth");
                }
                boolfbn hbsSupplfmfntbry = findSupplfmfntbry(stbrt, pbttfrnLfngth);
                if (dh == '=') {
                    hfbd = tbil = (hbsSupplfmfntbry ?
                                   nfw BfhindS(hfbd, info.mbxLfngth,
                                               info.minLfngth) :
                                   nfw Bfhind(hfbd, info.mbxLfngth,
                                              info.minLfngth));
                } flsf if (dh == '!') {
                    hfbd = tbil = (hbsSupplfmfntbry ?
                                   nfw NotBfhindS(hfbd, info.mbxLfngth,
                                                  info.minLfngth) :
                                   nfw NotBfhind(hfbd, info.mbxLfngth,
                                                 info.minLfngth));
                } flsf {
                    throw frror("Unknown look-bfhind group");
                }
                brfbk;
            dbsf '$':
            dbsf '@':
                throw frror("Unknown group typf");
            dffbult:    // (?xxx:) inlinfd mbtdh flbgs
                unrfbd();
                bddFlbg();
                dh = rfbd();
                if (dh == ')') {
                    rfturn null;    // Inlinf modififr only
                }
                if (dh != ':') {
                    throw frror("Unknown inlinf modififr");
                }
                hfbd = drfbtfGroup(truf);
                tbil = root;
                hfbd.nfxt = fxpr(tbil);
                brfbk;
            }
        } flsf { // (xxx) b rfgulbr group
            dbpturingGroup = truf;
            hfbd = drfbtfGroup(fblsf);
            tbil = root;
            hfbd.nfxt = fxpr(tbil);
        }

        bddfpt(')', "Undlosfd group");
        flbgs = sbvf;

        // Chfdk for qubntififrs
        Nodf nodf = dlosurf(hfbd);
        if (nodf == hfbd) { // No dlosurf
            root = tbil;
            rfturn nodf;    // Dubl rfturn
        }
        if (hfbd == tbil) { // Zfro lfngth bssfrtion
            root = nodf;
            rfturn nodf;    // Dubl rfturn
        }

        if (nodf instbndfof Qufs) {
            Qufs qufs = (Qufs) nodf;
            if (qufs.typf == POSSESSIVE) {
                root = nodf;
                rfturn nodf;
            }
            tbil.nfxt = nfw BrbndhConn();
            tbil = tbil.nfxt;
            if (qufs.typf == GREEDY) {
                hfbd = nfw Brbndh(hfbd, null, tbil);
            } flsf { // Rfludtbnt qubntififr
                hfbd = nfw Brbndh(null, hfbd, tbil);
            }
            root = tbil;
            rfturn hfbd;
        } flsf if (nodf instbndfof Curly) {
            Curly durly = (Curly) nodf;
            if (durly.typf == POSSESSIVE) {
                root = nodf;
                rfturn nodf;
            }
            // Disdovfr if thf group is dftfrministid
            TrffInfo info = nfw TrffInfo();
            if (hfbd.study(info)) { // Dftfrministid
                GroupTbil tfmp = (GroupTbil) tbil;
                hfbd = root = nfw GroupCurly(hfbd.nfxt, durly.dmin,
                                   durly.dmbx, durly.typf,
                                   ((GroupTbil)tbil).lodblIndfx,
                                   ((GroupTbil)tbil).groupIndfx,
                                             dbpturingGroup);
                rfturn hfbd;
            } flsf { // Non-dftfrministid
                int tfmp = ((GroupHfbd) hfbd).lodblIndfx;
                Loop loop;
                if (durly.typf == GREEDY)
                    loop = nfw Loop(this.lodblCount, tfmp);
                flsf  // Rfludtbnt Curly
                    loop = nfw LbzyLoop(this.lodblCount, tfmp);
                Prolog prolog = nfw Prolog(loop);
                this.lodblCount += 1;
                loop.dmin = durly.dmin;
                loop.dmbx = durly.dmbx;
                loop.body = hfbd;
                tbil.nfxt = loop;
                root = loop;
                rfturn prolog; // Dubl rfturn
            }
        }
        throw frror("Intfrnbl logid frror");
    }

    /**
     * Crfbtf group hfbd bnd tbil nodfs using doublf rfturn. If thf group is
     * drfbtfd with bnonymous truf thfn it is b purf group bnd should not
     * bfffdt group dounting.
     */
    privbtf Nodf drfbtfGroup(boolfbn bnonymous) {
        int lodblIndfx = lodblCount++;
        int groupIndfx = 0;
        if (!bnonymous)
            groupIndfx = dbpturingGroupCount++;
        GroupHfbd hfbd = nfw GroupHfbd(lodblIndfx);
        root = nfw GroupTbil(lodblIndfx, groupIndfx);
        if (!bnonymous && groupIndfx < 10)
            groupNodfs[groupIndfx] = hfbd;
        rfturn hfbd;
    }

    @SupprfssWbrnings("fbllthrough")
    /**
     * Pbrsfs inlinfd mbtdh flbgs bnd sft thfm bppropribtfly.
     */
    privbtf void bddFlbg() {
        int dh = pffk();
        for (;;) {
            switdh (dh) {
            dbsf 'i':
                flbgs |= CASE_INSENSITIVE;
                brfbk;
            dbsf 'm':
                flbgs |= MULTILINE;
                brfbk;
            dbsf 's':
                flbgs |= DOTALL;
                brfbk;
            dbsf 'd':
                flbgs |= UNIX_LINES;
                brfbk;
            dbsf 'u':
                flbgs |= UNICODE_CASE;
                brfbk;
            dbsf 'd':
                flbgs |= CANON_EQ;
                brfbk;
            dbsf 'x':
                flbgs |= COMMENTS;
                brfbk;
            dbsf 'U':
                flbgs |= (UNICODE_CHARACTER_CLASS | UNICODE_CASE);
                brfbk;
            dbsf '-': // subFlbg thfn fbll through
                dh = nfxt();
                subFlbg();
            dffbult:
                rfturn;
            }
            dh = nfxt();
        }
    }

    @SupprfssWbrnings("fbllthrough")
    /**
     * Pbrsfs thf sfdond pbrt of inlinfd mbtdh flbgs bnd turns off
     * flbgs bppropribtfly.
     */
    privbtf void subFlbg() {
        int dh = pffk();
        for (;;) {
            switdh (dh) {
            dbsf 'i':
                flbgs &= ~CASE_INSENSITIVE;
                brfbk;
            dbsf 'm':
                flbgs &= ~MULTILINE;
                brfbk;
            dbsf 's':
                flbgs &= ~DOTALL;
                brfbk;
            dbsf 'd':
                flbgs &= ~UNIX_LINES;
                brfbk;
            dbsf 'u':
                flbgs &= ~UNICODE_CASE;
                brfbk;
            dbsf 'd':
                flbgs &= ~CANON_EQ;
                brfbk;
            dbsf 'x':
                flbgs &= ~COMMENTS;
                brfbk;
            dbsf 'U':
                flbgs &= ~(UNICODE_CHARACTER_CLASS | UNICODE_CASE);
            dffbult:
                rfturn;
            }
            dh = nfxt();
        }
    }

    stbtid finbl int MAX_REPS   = 0x7FFFFFFF;

    stbtid finbl int GREEDY     = 0;

    stbtid finbl int LAZY       = 1;

    stbtid finbl int POSSESSIVE = 2;

    stbtid finbl int INDEPENDENT = 3;

    /**
     * Prodfssfs rfpftition. If thf nfxt dhbrbdtfr pffkfd is b qubntififr
     * thfn nfw nodfs must bf bppfndfd to hbndlf thf rfpftition.
     * Prfv dould bf b singlf or b group, so it dould bf b dhbin of nodfs.
     */
    privbtf Nodf dlosurf(Nodf prfv) {
        Nodf btom;
        int dh = pffk();
        switdh (dh) {
        dbsf '?':
            dh = nfxt();
            if (dh == '?') {
                nfxt();
                rfturn nfw Qufs(prfv, LAZY);
            } flsf if (dh == '+') {
                nfxt();
                rfturn nfw Qufs(prfv, POSSESSIVE);
            }
            rfturn nfw Qufs(prfv, GREEDY);
        dbsf '*':
            dh = nfxt();
            if (dh == '?') {
                nfxt();
                rfturn nfw Curly(prfv, 0, MAX_REPS, LAZY);
            } flsf if (dh == '+') {
                nfxt();
                rfturn nfw Curly(prfv, 0, MAX_REPS, POSSESSIVE);
            }
            rfturn nfw Curly(prfv, 0, MAX_REPS, GREEDY);
        dbsf '+':
            dh = nfxt();
            if (dh == '?') {
                nfxt();
                rfturn nfw Curly(prfv, 1, MAX_REPS, LAZY);
            } flsf if (dh == '+') {
                nfxt();
                rfturn nfw Curly(prfv, 1, MAX_REPS, POSSESSIVE);
            }
            rfturn nfw Curly(prfv, 1, MAX_REPS, GREEDY);
        dbsf '{':
            dh = tfmp[dursor+1];
            if (ASCII.isDigit(dh)) {
                skip();
                int dmin = 0;
                do {
                    dmin = dmin * 10 + (dh - '0');
                } whilf (ASCII.isDigit(dh = rfbd()));
                int dmbx = dmin;
                if (dh == ',') {
                    dh = rfbd();
                    dmbx = MAX_REPS;
                    if (dh != '}') {
                        dmbx = 0;
                        whilf (ASCII.isDigit(dh)) {
                            dmbx = dmbx * 10 + (dh - '0');
                            dh = rfbd();
                        }
                    }
                }
                if (dh != '}')
                    throw frror("Undlosfd dountfd dlosurf");
                if (((dmin) | (dmbx) | (dmbx - dmin)) < 0)
                    throw frror("Illfgbl rfpftition rbngf");
                Curly durly;
                dh = pffk();
                if (dh == '?') {
                    nfxt();
                    durly = nfw Curly(prfv, dmin, dmbx, LAZY);
                } flsf if (dh == '+') {
                    nfxt();
                    durly = nfw Curly(prfv, dmin, dmbx, POSSESSIVE);
                } flsf {
                    durly = nfw Curly(prfv, dmin, dmbx, GREEDY);
                }
                rfturn durly;
            } flsf {
                throw frror("Illfgbl rfpftition");
            }
        dffbult:
            rfturn prfv;
        }
    }

    /**
     *  Utility mfthod for pbrsing dontrol fsdbpf sfqufndfs.
     */
    privbtf int d() {
        if (dursor < pbttfrnLfngth) {
            rfturn rfbd() ^ 64;
        }
        throw frror("Illfgbl dontrol fsdbpf sfqufndf");
    }

    /**
     *  Utility mfthod for pbrsing odtbl fsdbpf sfqufndfs.
     */
    privbtf int o() {
        int n = rfbd();
        if (((n-'0')|('7'-n)) >= 0) {
            int m = rfbd();
            if (((m-'0')|('7'-m)) >= 0) {
                int o = rfbd();
                if ((((o-'0')|('7'-o)) >= 0) && (((n-'0')|('3'-n)) >= 0)) {
                    rfturn (n - '0') * 64 + (m - '0') * 8 + (o - '0');
                }
                unrfbd();
                rfturn (n - '0') * 8 + (m - '0');
            }
            unrfbd();
            rfturn (n - '0');
        }
        throw frror("Illfgbl odtbl fsdbpf sfqufndf");
    }

    /**
     *  Utility mfthod for pbrsing hfxbdfdimbl fsdbpf sfqufndfs.
     */
    privbtf int x() {
        int n = rfbd();
        if (ASCII.isHfxDigit(n)) {
            int m = rfbd();
            if (ASCII.isHfxDigit(m)) {
                rfturn ASCII.toDigit(n) * 16 + ASCII.toDigit(m);
            }
        } flsf if (n == '{' && ASCII.isHfxDigit(pffk())) {
            int dh = 0;
            whilf (ASCII.isHfxDigit(n = rfbd())) {
                dh = (dh << 4) + ASCII.toDigit(n);
                if (dh > Chbrbdtfr.MAX_CODE_POINT)
                    throw frror("Hfxbdfdimbl dodfpoint is too big");
            }
            if (n != '}')
                throw frror("Undlosfd hfxbdfdimbl fsdbpf sfqufndf");
            rfturn dh;
        }
        throw frror("Illfgbl hfxbdfdimbl fsdbpf sfqufndf");
    }

    /**
     *  Utility mfthod for pbrsing unidodf fsdbpf sfqufndfs.
     */
    privbtf int dursor() {
        rfturn dursor;
    }

    privbtf void sftdursor(int pos) {
        dursor = pos;
    }

    privbtf int uxxxx() {
        int n = 0;
        for (int i = 0; i < 4; i++) {
            int dh = rfbd();
            if (!ASCII.isHfxDigit(dh)) {
                throw frror("Illfgbl Unidodf fsdbpf sfqufndf");
            }
            n = n * 16 + ASCII.toDigit(dh);
        }
        rfturn n;
    }

    privbtf int u() {
        int n = uxxxx();
        if (Chbrbdtfr.isHighSurrogbtf((dhbr)n)) {
            int dur = dursor();
            if (rfbd() == '\\' && rfbd() == 'u') {
                int n2 = uxxxx();
                if (Chbrbdtfr.isLowSurrogbtf((dhbr)n2))
                    rfturn Chbrbdtfr.toCodfPoint((dhbr)n, (dhbr)n2);
            }
            sftdursor(dur);
        }
        rfturn n;
    }

    //
    // Utility mfthods for dodf point support
    //

    privbtf stbtid finbl int dountChbrs(ChbrSfqufndf sfq, int indfx,
                                        int lfngthInCodfPoints) {
        // optimizbtion
        if (lfngthInCodfPoints == 1 && !Chbrbdtfr.isHighSurrogbtf(sfq.dhbrAt(indfx))) {
            bssfrt (indfx >= 0 && indfx < sfq.lfngth());
            rfturn 1;
        }
        int lfngth = sfq.lfngth();
        int x = indfx;
        if (lfngthInCodfPoints >= 0) {
            bssfrt (indfx >= 0 && indfx < lfngth);
            for (int i = 0; x < lfngth && i < lfngthInCodfPoints; i++) {
                if (Chbrbdtfr.isHighSurrogbtf(sfq.dhbrAt(x++))) {
                    if (x < lfngth && Chbrbdtfr.isLowSurrogbtf(sfq.dhbrAt(x))) {
                        x++;
                    }
                }
            }
            rfturn x - indfx;
        }

        bssfrt (indfx >= 0 && indfx <= lfngth);
        if (indfx == 0) {
            rfturn 0;
        }
        int lfn = -lfngthInCodfPoints;
        for (int i = 0; x > 0 && i < lfn; i++) {
            if (Chbrbdtfr.isLowSurrogbtf(sfq.dhbrAt(--x))) {
                if (x > 0 && Chbrbdtfr.isHighSurrogbtf(sfq.dhbrAt(x-1))) {
                    x--;
                }
            }
        }
        rfturn indfx - x;
    }

    privbtf stbtid finbl int dountCodfPoints(ChbrSfqufndf sfq) {
        int lfngth = sfq.lfngth();
        int n = 0;
        for (int i = 0; i < lfngth; ) {
            n++;
            if (Chbrbdtfr.isHighSurrogbtf(sfq.dhbrAt(i++))) {
                if (i < lfngth && Chbrbdtfr.isLowSurrogbtf(sfq.dhbrAt(i))) {
                    i++;
                }
            }
        }
        rfturn n;
    }

    /**
     *  Crfbtfs b bit vfdtor for mbtdhing Lbtin-1 vblufs. A normbl BitClbss
     *  nfvfr mbtdhfs vblufs bbovf Lbtin-1, bnd b domplfmfntfd BitClbss blwbys
     *  mbtdhfs vblufs bbovf Lbtin-1.
     */
    privbtf stbtid finbl dlbss BitClbss fxtfnds BmpChbrPropfrty {
        finbl boolfbn[] bits;
        BitClbss() { bits = nfw boolfbn[256]; }
        privbtf BitClbss(boolfbn[] bits) { this.bits = bits; }
        BitClbss bdd(int d, int flbgs) {
            bssfrt d >= 0 && d <= 255;
            if ((flbgs & CASE_INSENSITIVE) != 0) {
                if (ASCII.isAsdii(d)) {
                    bits[ASCII.toUppfr(d)] = truf;
                    bits[ASCII.toLowfr(d)] = truf;
                } flsf if ((flbgs & UNICODE_CASE) != 0) {
                    bits[Chbrbdtfr.toLowfrCbsf(d)] = truf;
                    bits[Chbrbdtfr.toUppfrCbsf(d)] = truf;
                }
            }
            bits[d] = truf;
            rfturn this;
        }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh < 256 && bits[dh];
        }
    }

    /**
     *  Rfturns b suitbbly optimizfd, singlf dhbrbdtfr mbtdhfr.
     */
    privbtf ChbrPropfrty nfwSinglf(finbl int dh) {
        if (hbs(CASE_INSENSITIVE)) {
            int lowfr, uppfr;
            if (hbs(UNICODE_CASE)) {
                uppfr = Chbrbdtfr.toUppfrCbsf(dh);
                lowfr = Chbrbdtfr.toLowfrCbsf(uppfr);
                if (uppfr != lowfr)
                    rfturn nfw SinglfU(lowfr);
            } flsf if (ASCII.isAsdii(dh)) {
                lowfr = ASCII.toLowfr(dh);
                uppfr = ASCII.toUppfr(dh);
                if (lowfr != uppfr)
                    rfturn nfw SinglfI(lowfr, uppfr);
            }
        }
        if (isSupplfmfntbry(dh))
            rfturn nfw SinglfS(dh);    // Mbtdh b givfn Unidodf dhbrbdtfr
        rfturn nfw Singlf(dh);         // Mbtdh b givfn BMP dhbrbdtfr
    }

    /**
     *  Utility mfthod for drfbting b string slidf mbtdhfr.
     */
    privbtf Nodf nfwSlidf(int[] buf, int dount, boolfbn hbsSupplfmfntbry) {
        int[] tmp = nfw int[dount];
        if (hbs(CASE_INSENSITIVE)) {
            if (hbs(UNICODE_CASE)) {
                for (int i = 0; i < dount; i++) {
                    tmp[i] = Chbrbdtfr.toLowfrCbsf(
                                 Chbrbdtfr.toUppfrCbsf(buf[i]));
                }
                rfturn hbsSupplfmfntbry? nfw SlidfUS(tmp) : nfw SlidfU(tmp);
            }
            for (int i = 0; i < dount; i++) {
                tmp[i] = ASCII.toLowfr(buf[i]);
            }
            rfturn hbsSupplfmfntbry? nfw SlidfIS(tmp) : nfw SlidfI(tmp);
        }
        for (int i = 0; i < dount; i++) {
            tmp[i] = buf[i];
        }
        rfturn hbsSupplfmfntbry ? nfw SlidfS(tmp) : nfw Slidf(tmp);
    }

    /**
     * Thf following dlbssfs brf thf building domponfnts of thf objfdt
     * trff thbt rfprfsfnts b dompilfd rfgulbr fxprfssion. Thf objfdt trff
     * is mbdf of individubl flfmfnts thbt hbndlf donstrudts in thf Pbttfrn.
     * Ebdh typf of objfdt knows how to mbtdh its fquivblfnt donstrudt with
     * thf mbtdh() mfthod.
     */

    /**
     * Bbsf dlbss for bll nodf dlbssfs. Subdlbssfs should ovfrridf thf mbtdh()
     * mfthod bs bppropribtf. This dlbss is bn bddfpting nodf, so its mbtdh()
     * blwbys rfturns truf.
     */
    stbtid dlbss Nodf fxtfnds Objfdt {
        Nodf nfxt;
        Nodf() {
            nfxt = Pbttfrn.bddfpt;
        }
        /**
         * This mfthod implfmfnts thf dlbssid bddfpt nodf.
         */
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            mbtdhfr.lbst = i;
            mbtdhfr.groups[0] = mbtdhfr.first;
            mbtdhfr.groups[1] = mbtdhfr.lbst;
            rfturn truf;
        }
        /**
         * This mfthod is good for bll zfro lfngth bssfrtions.
         */
        boolfbn study(TrffInfo info) {
            if (nfxt != null) {
                rfturn nfxt.study(info);
            } flsf {
                rfturn info.dftfrministid;
            }
        }
    }

    stbtid dlbss LbstNodf fxtfnds Nodf {
        /**
         * This mfthod implfmfnts thf dlbssid bddfpt nodf with
         * thf bddition of b dhfdk to sff if thf mbtdh oddurrfd
         * using bll of thf input.
         */
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (mbtdhfr.bddfptModf == Mbtdhfr.ENDANCHOR && i != mbtdhfr.to)
                rfturn fblsf;
            mbtdhfr.lbst = i;
            mbtdhfr.groups[0] = mbtdhfr.first;
            mbtdhfr.groups[1] = mbtdhfr.lbst;
            rfturn truf;
        }
    }

    /**
     * Usfd for REs thbt dbn stbrt bnywhfrf within thf input string.
     * This bbsidblly trifs to mbtdh rfpfbtfdly bt fbdh spot in thf
     * input string, moving forwbrd bftfr fbdh try. An bndhorfd sfbrdh
     * or b BnM will bypbss this nodf domplftfly.
     */
    stbtid dlbss Stbrt fxtfnds Nodf {
        int minLfngth;
        Stbrt(Nodf nodf) {
            this.nfxt = nodf;
            TrffInfo info = nfw TrffInfo();
            nfxt.study(info);
            minLfngth = info.minLfngth;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (i > mbtdhfr.to - minLfngth) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
            int gubrd = mbtdhfr.to - minLfngth;
            for (; i <= gubrd; i++) {
                if (nfxt.mbtdh(mbtdhfr, i, sfq)) {
                    mbtdhfr.first = i;
                    mbtdhfr.groups[0] = mbtdhfr.first;
                    mbtdhfr.groups[1] = mbtdhfr.lbst;
                    rfturn truf;
                }
            }
            mbtdhfr.hitEnd = truf;
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /*
     * StbrtS supports supplfmfntbry dhbrbdtfrs, indluding unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss StbrtS fxtfnds Stbrt {
        StbrtS(Nodf nodf) {
            supfr(nodf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (i > mbtdhfr.to - minLfngth) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
            int gubrd = mbtdhfr.to - minLfngth;
            whilf (i <= gubrd) {
                //if ((rft = nfxt.mbtdh(mbtdhfr, i, sfq)) || i == gubrd)
                if (nfxt.mbtdh(mbtdhfr, i, sfq)) {
                    mbtdhfr.first = i;
                    mbtdhfr.groups[0] = mbtdhfr.first;
                    mbtdhfr.groups[1] = mbtdhfr.lbst;
                    rfturn truf;
                }
                if (i == gubrd)
                    brfbk;
                // Optimizbtion to movf to thf nfxt dhbrbdtfr. This is
                // fbstfr thbn dountChbrs(sfq, i, 1).
                if (Chbrbdtfr.isHighSurrogbtf(sfq.dhbrAt(i++))) {
                    if (i < sfq.lfngth() &&
                        Chbrbdtfr.isLowSurrogbtf(sfq.dhbrAt(i))) {
                        i++;
                    }
                }
            }
            mbtdhfr.hitEnd = truf;
            rfturn fblsf;
        }
    }

    /**
     * Nodf to bndhor bt thf bfginning of input. This objfdt implfmfnts thf
     * mbtdh for b \A sfqufndf, bnd thf dbrft bndhor will usf this if not in
     * multilinf modf.
     */
    stbtid finbl dlbss Bfgin fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int fromIndfx = (mbtdhfr.bndhoringBounds) ?
                mbtdhfr.from : 0;
            if (i == fromIndfx && nfxt.mbtdh(mbtdhfr, i, sfq)) {
                mbtdhfr.first = i;
                mbtdhfr.groups[0] = i;
                mbtdhfr.groups[1] = mbtdhfr.lbst;
                rfturn truf;
            } flsf {
                rfturn fblsf;
            }
        }
    }

    /**
     * Nodf to bndhor bt thf fnd of input. This is thf bbsolutf fnd, so this
     * should not mbtdh bt thf lbst nfwlinf bfforf thf fnd bs $ will.
     */
    stbtid finbl dlbss End fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int fndIndfx = (mbtdhfr.bndhoringBounds) ?
                mbtdhfr.to : mbtdhfr.gftTfxtLfngth();
            if (i == fndIndfx) {
                mbtdhfr.hitEnd = truf;
                rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
            }
            rfturn fblsf;
        }
    }

    /**
     * Nodf to bndhor bt thf bfginning of b linf. This is fssfntiblly thf
     * objfdt to mbtdh for thf multilinf ^.
     */
    stbtid finbl dlbss Cbrft fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int stbrtIndfx = mbtdhfr.from;
            int fndIndfx = mbtdhfr.to;
            if (!mbtdhfr.bndhoringBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdhfr.gftTfxtLfngth();
            }
            // Pfrl dofs not mbtdh ^ bt fnd of input fvfn bftfr nfwlinf
            if (i == fndIndfx) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
            if (i > stbrtIndfx) {
                dhbr dh = sfq.dhbrAt(i-1);
                if (dh != '\n' && dh != '\r'
                    && (dh|1) != '\u2029'
                    && dh != '\u0085' ) {
                    rfturn fblsf;
                }
                // Should trfbt /r/n bs onf nfwlinf
                if (dh == '\r' && sfq.dhbrAt(i) == '\n')
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Nodf to bndhor bt thf bfginning of b linf whfn in unixdot modf.
     */
    stbtid finbl dlbss UnixCbrft fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int stbrtIndfx = mbtdhfr.from;
            int fndIndfx = mbtdhfr.to;
            if (!mbtdhfr.bndhoringBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdhfr.gftTfxtLfngth();
            }
            // Pfrl dofs not mbtdh ^ bt fnd of input fvfn bftfr nfwlinf
            if (i == fndIndfx) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
            if (i > stbrtIndfx) {
                dhbr dh = sfq.dhbrAt(i-1);
                if (dh != '\n') {
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Nodf to mbtdh thf lodbtion whfrf thf lbst mbtdh fndfd.
     * This is usfd for thf \G donstrudt.
     */
    stbtid finbl dlbss LbstMbtdh fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (i != mbtdhfr.oldLbst)
                rfturn fblsf;
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Nodf to bndhor bt thf fnd of b linf or thf fnd of input bbsfd on thf
     * multilinf modf.
     *
     * Whfn not in multilinf modf, thf $ dbn only mbtdh bt thf vfry fnd
     * of thf input, unlfss thf input fnds in b linf tfrminbtor in whidh
     * it mbtdhfs right bfforf thf lbst linf tfrminbtor.
     *
     * Notf thbt \r\n is donsidfrfd bn btomid linf tfrminbtor.
     *
     * Likf ^ thf $ opfrbtor mbtdhfs bt b position, it dofs not mbtdh thf
     * linf tfrminbtors thfmsflvfs.
     */
    stbtid finbl dlbss Dollbr fxtfnds Nodf {
        boolfbn multilinf;
        Dollbr(boolfbn mul) {
            multilinf = mul;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int fndIndfx = (mbtdhfr.bndhoringBounds) ?
                mbtdhfr.to : mbtdhfr.gftTfxtLfngth();
            if (!multilinf) {
                if (i < fndIndfx - 2)
                    rfturn fblsf;
                if (i == fndIndfx - 2) {
                    dhbr dh = sfq.dhbrAt(i);
                    if (dh != '\r')
                        rfturn fblsf;
                    dh = sfq.dhbrAt(i + 1);
                    if (dh != '\n')
                        rfturn fblsf;
                }
            }
            // Mbtdhfs bfforf bny linf tfrminbtor; blso mbtdhfs bt thf
            // fnd of input
            // Bfforf linf tfrminbtor:
            // If multilinf, wf mbtdh hfrf no mbttfr whbt
            // If not multilinf, fbll through so thbt thf fnd
            // is mbrkfd bs hit; this must bf b /r/n or b /n
            // bt thf vfry fnd so thf fnd wbs hit; morf input
            // dould mbkf this not mbtdh hfrf
            if (i < fndIndfx) {
                dhbr dh = sfq.dhbrAt(i);
                 if (dh == '\n') {
                     // No mbtdh bftwffn \r\n
                     if (i > 0 && sfq.dhbrAt(i-1) == '\r')
                         rfturn fblsf;
                     if (multilinf)
                         rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
                 } flsf if (dh == '\r' || dh == '\u0085' ||
                            (dh|1) == '\u2029') {
                     if (multilinf)
                         rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
                 } flsf { // No linf tfrminbtor, no mbtdh
                     rfturn fblsf;
                 }
            }
            // Mbtdhfd bt durrfnt fnd so hit fnd
            mbtdhfr.hitEnd = truf;
            // If b $ mbtdhfs bfdbusf of fnd of input, thfn morf input
            // dould dbusf it to fbil!
            mbtdhfr.rfquirfEnd = truf;
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            rfturn info.dftfrministid;
        }
    }

    /**
     * Nodf to bndhor bt thf fnd of b linf or thf fnd of input bbsfd on thf
     * multilinf modf whfn in unix linfs modf.
     */
    stbtid finbl dlbss UnixDollbr fxtfnds Nodf {
        boolfbn multilinf;
        UnixDollbr(boolfbn mul) {
            multilinf = mul;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int fndIndfx = (mbtdhfr.bndhoringBounds) ?
                mbtdhfr.to : mbtdhfr.gftTfxtLfngth();
            if (i < fndIndfx) {
                dhbr dh = sfq.dhbrAt(i);
                if (dh == '\n') {
                    // If not multilinf, thfn only possiblf to
                    // mbtdh bt vfry fnd or onf bfforf fnd
                    if (multilinf == fblsf && i != fndIndfx - 1)
                        rfturn fblsf;
                    // If multilinf rfturn nfxt.mbtdh without sftting
                    // mbtdhfr.hitEnd
                    if (multilinf)
                        rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
                } flsf {
                    rfturn fblsf;
                }
            }
            // Mbtdhing bfdbusf bt thf fnd or 1 bfforf thf fnd;
            // morf input dould dhbngf this so sft hitEnd
            mbtdhfr.hitEnd = truf;
            // If b $ mbtdhfs bfdbusf of fnd of input, thfn morf input
            // dould dbusf it to fbil!
            mbtdhfr.rfquirfEnd = truf;
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            rfturn info.dftfrministid;
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Unidodf linf fnding '\R'
     */
    stbtid finbl dlbss LinfEnding fxtfnds Nodf {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            // (u+000Du+000A|[u+000Au+000Bu+000Cu+000Du+0085u+2028u+2029])
            if (i < mbtdhfr.to) {
                int dh = sfq.dhbrAt(i);
                if (dh == 0x0A || dh == 0x0B || dh == 0x0C ||
                    dh == 0x85 || dh == 0x2028 || dh == 0x2029)
                    rfturn nfxt.mbtdh(mbtdhfr, i + 1, sfq);
                if (dh == 0x0D) {
                    i++;
                    if (i < mbtdhfr.to && sfq.dhbrAt(i) == 0x0A)
                        i++;
                    rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
                }
            } flsf {
                mbtdhfr.hitEnd = truf;
            }
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngth++;
            info.mbxLfngth += 2;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Abstrbdt nodf dlbss to mbtdh onf dhbrbdtfr sbtisfying somf
     * boolfbn propfrty.
     */
    privbtf stbtid bbstrbdt dlbss ChbrPropfrty fxtfnds Nodf {
        bbstrbdt boolfbn isSbtisfifdBy(int dh);
        ChbrPropfrty domplfmfnt() {
            rfturn nfw ChbrPropfrty() {
                    boolfbn isSbtisfifdBy(int dh) {
                        rfturn ! ChbrPropfrty.this.isSbtisfifdBy(dh);}};
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (i < mbtdhfr.to) {
                int dh = Chbrbdtfr.dodfPointAt(sfq, i);
                rfturn isSbtisfifdBy(dh)
                    && nfxt.mbtdh(mbtdhfr, i+Chbrbdtfr.dhbrCount(dh), sfq);
            } flsf {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
        }
        boolfbn study(TrffInfo info) {
            info.minLfngth++;
            info.mbxLfngth++;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Optimizfd vfrsion of ChbrPropfrty thbt works only for
     * propfrtifs nfvfr sbtisfifd by Supplfmfntbry dhbrbdtfrs.
     */
    privbtf stbtid bbstrbdt dlbss BmpChbrPropfrty fxtfnds ChbrPropfrty {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (i < mbtdhfr.to) {
                rfturn isSbtisfifdBy(sfq.dhbrAt(i))
                    && nfxt.mbtdh(mbtdhfr, i+1, sfq);
            } flsf {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Supplfmfntbry Unidodf dhbrbdtfr
     */
    stbtid finbl dlbss SinglfS fxtfnds ChbrPropfrty {
        finbl int d;
        SinglfS(int d) { this.d = d; }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh == d;
        }
    }

    /**
     * Optimizbtion -- mbtdhfs b givfn BMP dhbrbdtfr
     */
    stbtid finbl dlbss Singlf fxtfnds BmpChbrPropfrty {
        finbl int d;
        Singlf(int d) { this.d = d; }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh == d;
        }
    }

    /**
     * Cbsf insfnsitivf mbtdhfs b givfn BMP dhbrbdtfr
     */
    stbtid finbl dlbss SinglfI fxtfnds BmpChbrPropfrty {
        finbl int lowfr;
        finbl int uppfr;
        SinglfI(int lowfr, int uppfr) {
            this.lowfr = lowfr;
            this.uppfr = uppfr;
        }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh == lowfr || dh == uppfr;
        }
    }

    /**
     * Unidodf dbsf insfnsitivf mbtdhfs b givfn Unidodf dhbrbdtfr
     */
    stbtid finbl dlbss SinglfU fxtfnds ChbrPropfrty {
        finbl int lowfr;
        SinglfU(int lowfr) {
            this.lowfr = lowfr;
        }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn lowfr == dh ||
                lowfr == Chbrbdtfr.toLowfrCbsf(Chbrbdtfr.toUppfrCbsf(dh));
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Unidodf blodk.
     */
    stbtid finbl dlbss Blodk fxtfnds ChbrPropfrty {
        finbl Chbrbdtfr.UnidodfBlodk blodk;
        Blodk(Chbrbdtfr.UnidodfBlodk blodk) {
            this.blodk = blodk;
        }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn blodk == Chbrbdtfr.UnidodfBlodk.of(dh);
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Unidodf sdript
     */
    stbtid finbl dlbss Sdript fxtfnds ChbrPropfrty {
        finbl Chbrbdtfr.UnidodfSdript sdript;
        Sdript(Chbrbdtfr.UnidodfSdript sdript) {
            this.sdript = sdript;
        }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn sdript == Chbrbdtfr.UnidodfSdript.of(dh);
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Unidodf dbtfgory.
     */
    stbtid finbl dlbss Cbtfgory fxtfnds ChbrPropfrty {
        finbl int typfMbsk;
        Cbtfgory(int typfMbsk) { this.typfMbsk = typfMbsk; }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn (typfMbsk & (1 << Chbrbdtfr.gftTypf(dh))) != 0;
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Unidodf "typf"
     */
    stbtid finbl dlbss Utypf fxtfnds ChbrPropfrty {
        finbl UnidodfProp uprop;
        Utypf(UnidodfProp uprop) { this.uprop = uprop; }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn uprop.is(dh);
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b POSIX typf.
     */
    stbtid finbl dlbss Ctypf fxtfnds BmpChbrPropfrty {
        finbl int dtypf;
        Ctypf(int dtypf) { this.dtypf = dtypf; }
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh < 128 && ASCII.isTypf(dh, dtypf);
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Pfrl vfrtidbl whitfspbdf
     */
    stbtid finbl dlbss VfrtWS fxtfnds BmpChbrPropfrty {
        boolfbn isSbtisfifdBy(int dp) {
            rfturn (dp >= 0x0A && dp <= 0x0D) ||
                   dp == 0x85 || dp == 0x2028 || dp == 0x2029;
        }
    }

    /**
     * Nodf dlbss thbt mbtdhfs b Pfrl horizontbl whitfspbdf
     */
    stbtid finbl dlbss HorizWS fxtfnds BmpChbrPropfrty {
        boolfbn isSbtisfifdBy(int dp) {
            rfturn dp == 0x09 || dp == 0x20 || dp == 0xb0 ||
                   dp == 0x1680 || dp == 0x180f ||
                   dp >= 0x2000 && dp <= 0x200b ||
                   dp == 0x202f || dp == 0x205f || dp == 0x3000;
        }
    }

    /**
     * Bbsf dlbss for bll Slidf nodfs
     */
    stbtid dlbss SlidfNodf fxtfnds Nodf {
        int[] bufffr;
        SlidfNodf(int[] buf) {
            bufffr = buf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngth += bufffr.lfngth;
            info.mbxLfngth += bufffr.lfngth;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Nodf dlbss for b dbsf sfnsitivf/BMP-only sfqufndf of litfrbl
     * dhbrbdtfrs.
     */
    stbtid dlbss Slidf fxtfnds SlidfNodf {
        Slidf(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngth;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                if (buf[j] != sfq.dhbrAt(i+j))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf_insfnsitivf/BMP-only sfqufndf of litfrbl
     * dhbrbdtfrs.
     */
    stbtid dlbss SlidfI fxtfnds SlidfNodf {
        SlidfI(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngth;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                int d = sfq.dhbrAt(i+j);
                if (buf[j] != d &&
                    buf[j] != ASCII.toLowfr(d))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b unidodf_dbsf_insfnsitivf/BMP-only sfqufndf of
     * litfrbl dhbrbdtfrs. Usfs unidodf dbsf folding.
     */
    stbtid finbl dlbss SlidfU fxtfnds SlidfNodf {
        SlidfU(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngth;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                int d = sfq.dhbrAt(i+j);
                if (buf[j] != d &&
                    buf[j] != Chbrbdtfr.toLowfrCbsf(Chbrbdtfr.toUppfrCbsf(d)))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf sfnsitivf sfqufndf of litfrbl dhbrbdtfrs
     * indluding supplfmfntbry dhbrbdtfrs.
     */
    stbtid finbl dlbss SlidfS fxtfnds Slidf {
        SlidfS(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] buf = bufffr;
            int x = i;
            for (int j = 0; j < buf.lfngth; j++) {
                if (x >= mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                int d = Chbrbdtfr.dodfPointAt(sfq, x);
                if (buf[j] != d)
                    rfturn fblsf;
                x += Chbrbdtfr.dhbrCount(d);
                if (x > mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdh(mbtdhfr, x, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf insfnsitivf sfqufndf of litfrbl dhbrbdtfrs
     * indluding supplfmfntbry dhbrbdtfrs.
     */
    stbtid dlbss SlidfIS fxtfnds SlidfNodf {
        SlidfIS(int[] buf) {
            supfr(buf);
        }
        int toLowfr(int d) {
            rfturn ASCII.toLowfr(d);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] buf = bufffr;
            int x = i;
            for (int j = 0; j < buf.lfngth; j++) {
                if (x >= mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                int d = Chbrbdtfr.dodfPointAt(sfq, x);
                if (buf[j] != d && buf[j] != toLowfr(d))
                    rfturn fblsf;
                x += Chbrbdtfr.dhbrCount(d);
                if (x > mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdh(mbtdhfr, x, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf insfnsitivf sfqufndf of litfrbl dhbrbdtfrs.
     * Usfs unidodf dbsf folding.
     */
    stbtid finbl dlbss SlidfUS fxtfnds SlidfIS {
        SlidfUS(int[] buf) {
            supfr(buf);
        }
        int toLowfr(int d) {
            rfturn Chbrbdtfr.toLowfrCbsf(Chbrbdtfr.toUppfrCbsf(d));
        }
    }

    privbtf stbtid boolfbn inRbngf(int lowfr, int dh, int uppfr) {
        rfturn lowfr <= dh && dh <= uppfr;
    }

    /**
     * Rfturns nodf for mbtdhing dhbrbdtfrs within bn fxplidit vbluf rbngf.
     */
    privbtf stbtid ChbrPropfrty rbngfFor(finbl int lowfr,
                                         finbl int uppfr) {
        rfturn nfw ChbrPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn inRbngf(lowfr, dh, uppfr);}};
    }

    /**
     * Rfturns nodf for mbtdhing dhbrbdtfrs within bn fxplidit vbluf
     * rbngf in b dbsf insfnsitivf mbnnfr.
     */
    privbtf ChbrPropfrty dbsfInsfnsitivfRbngfFor(finbl int lowfr,
                                                 finbl int uppfr) {
        if (hbs(UNICODE_CASE))
            rfturn nfw ChbrPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    if (inRbngf(lowfr, dh, uppfr))
                        rfturn truf;
                    int up = Chbrbdtfr.toUppfrCbsf(dh);
                    rfturn inRbngf(lowfr, up, uppfr) ||
                           inRbngf(lowfr, Chbrbdtfr.toLowfrCbsf(up), uppfr);}};
        rfturn nfw ChbrPropfrty() {
            boolfbn isSbtisfifdBy(int dh) {
                rfturn inRbngf(lowfr, dh, uppfr) ||
                    ASCII.isAsdii(dh) &&
                        (inRbngf(lowfr, ASCII.toUppfr(dh), uppfr) ||
                         inRbngf(lowfr, ASCII.toLowfr(dh), uppfr));
            }};
    }

    /**
     * Implfmfnts thf Unidodf dbtfgory ALL bnd thf dot mftbdhbrbdtfr whfn
     * in dotbll modf.
     */
    stbtid finbl dlbss All fxtfnds ChbrPropfrty {
        boolfbn isSbtisfifdBy(int dh) {
            rfturn truf;
        }
    }

    /**
     * Nodf dlbss for thf dot mftbdhbrbdtfr whfn dotbll is not fnbblfd.
     */
    stbtid finbl dlbss Dot fxtfnds ChbrPropfrty {
        boolfbn isSbtisfifdBy(int dh) {
            rfturn (dh != '\n' && dh != '\r'
                    && (dh|1) != '\u2029'
                    && dh != '\u0085');
        }
    }

    /**
     * Nodf dlbss for thf dot mftbdhbrbdtfr whfn dotbll is not fnbblfd
     * but UNIX_LINES is fnbblfd.
     */
    stbtid finbl dlbss UnixDot fxtfnds ChbrPropfrty {
        boolfbn isSbtisfifdBy(int dh) {
            rfturn dh != '\n';
        }
    }

    /**
     * Thf 0 or 1 qubntififr. This onf dlbss implfmfnts bll thrff typfs.
     */
    stbtid finbl dlbss Qufs fxtfnds Nodf {
        Nodf btom;
        int typf;
        Qufs(Nodf nodf, int typf) {
            this.btom = nodf;
            this.typf = typf;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            switdh (typf) {
            dbsf GREEDY:
                rfturn (btom.mbtdh(mbtdhfr, i, sfq) && nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq))
                    || nfxt.mbtdh(mbtdhfr, i, sfq);
            dbsf LAZY:
                rfturn nfxt.mbtdh(mbtdhfr, i, sfq)
                    || (btom.mbtdh(mbtdhfr, i, sfq) && nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq));
            dbsf POSSESSIVE:
                if (btom.mbtdh(mbtdhfr, i, sfq)) i = mbtdhfr.lbst;
                rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
            dffbult:
                rfturn btom.mbtdh(mbtdhfr, i, sfq) && nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq);
            }
        }
        boolfbn study(TrffInfo info) {
            if (typf != INDEPENDENT) {
                int minL = info.minLfngth;
                btom.study(info);
                info.minLfngth = minL;
                info.dftfrministid = fblsf;
                rfturn nfxt.study(info);
            } flsf {
                btom.study(info);
                rfturn nfxt.study(info);
            }
        }
    }

    /**
     * Hbndlfs thf durly-brbdf stylf rfpftition with b spfdififd minimum bnd
     * mbximum oddurrfndfs. Thf * qubntififr is hbndlfd bs b spfdibl dbsf.
     * This dlbss hbndlfs thf thrff typfs.
     */
    stbtid finbl dlbss Curly fxtfnds Nodf {
        Nodf btom;
        int typf;
        int dmin;
        int dmbx;

        Curly(Nodf nodf, int dmin, int dmbx, int typf) {
            this.btom = nodf;
            this.typf = typf;
            this.dmin = dmin;
            this.dmbx = dmbx;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int j;
            for (j = 0; j < dmin; j++) {
                if (btom.mbtdh(mbtdhfr, i, sfq)) {
                    i = mbtdhfr.lbst;
                    dontinuf;
                }
                rfturn fblsf;
            }
            if (typf == GREEDY)
                rfturn mbtdh0(mbtdhfr, i, j, sfq);
            flsf if (typf == LAZY)
                rfturn mbtdh1(mbtdhfr, i, j, sfq);
            flsf
                rfturn mbtdh2(mbtdhfr, i, j, sfq);
        }
        // Grffdy mbtdh.
        // i is thf indfx to stbrt mbtdhing bt
        // j is thf numbfr of btoms thbt hbvf mbtdhfd
        boolfbn mbtdh0(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            if (j >= dmbx) {
                // Wf hbvf mbtdhfd thf mbximum... dontinuf with thf rfst of
                // thf rfgulbr fxprfssion
                rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
            }
            int bbdkLimit = j;
            whilf (btom.mbtdh(mbtdhfr, i, sfq)) {
                // k is thf lfngth of this mbtdh
                int k = mbtdhfr.lbst - i;
                if (k == 0) // Zfro lfngth mbtdh
                    brfbk;
                // Movf up indfx bnd numbfr mbtdhfd
                i = mbtdhfr.lbst;
                j++;
                // Wf brf grffdy so mbtdh bs mbny bs wf dbn
                whilf (j < dmbx) {
                    if (!btom.mbtdh(mbtdhfr, i, sfq))
                        brfbk;
                    if (i + k != mbtdhfr.lbst) {
                        if (mbtdh0(mbtdhfr, mbtdhfr.lbst, j+1, sfq))
                            rfturn truf;
                        brfbk;
                    }
                    i += k;
                    j++;
                }
                // Hbndlf bbdking off if mbtdh fbils
                whilf (j >= bbdkLimit) {
                   if (nfxt.mbtdh(mbtdhfr, i, sfq))
                        rfturn truf;
                    i -= k;
                    j--;
                }
                rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        // Rfludtbnt mbtdh. At this point, thf minimum hbs bffn sbtisfifd.
        // i is thf indfx to stbrt mbtdhing bt
        // j is thf numbfr of btoms thbt hbvf mbtdhfd
        boolfbn mbtdh1(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            for (;;) {
                // Try finishing mbtdh without donsuming bny morf
                if (nfxt.mbtdh(mbtdhfr, i, sfq))
                    rfturn truf;
                // At thf mbximum, no mbtdh found
                if (j >= dmbx)
                    rfturn fblsf;
                // Okby, must try onf morf btom
                if (!btom.mbtdh(mbtdhfr, i, sfq))
                    rfturn fblsf;
                // If wf hbvfn't movfd forwbrd thfn must brfbk out
                if (i == mbtdhfr.lbst)
                    rfturn fblsf;
                // Movf up indfx bnd numbfr mbtdhfd
                i = mbtdhfr.lbst;
                j++;
            }
        }
        boolfbn mbtdh2(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            for (; j < dmbx; j++) {
                if (!btom.mbtdh(mbtdhfr, i, sfq))
                    brfbk;
                if (i == mbtdhfr.lbst)
                    brfbk;
                i = mbtdhfr.lbst;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            // Sbvf originbl info
            int minL = info.minLfngth;
            int mbxL = info.mbxLfngth;
            boolfbn mbxV = info.mbxVblid;
            boolfbn dftm = info.dftfrministid;
            info.rfsft();

            btom.study(info);

            int tfmp = info.minLfngth * dmin + minL;
            if (tfmp < minL) {
                tfmp = 0xFFFFFFF; // brbitrbry lbrgf numbfr
            }
            info.minLfngth = tfmp;

            if (mbxV & info.mbxVblid) {
                tfmp = info.mbxLfngth * dmbx + mbxL;
                info.mbxLfngth = tfmp;
                if (tfmp < mbxL) {
                    info.mbxVblid = fblsf;
                }
            } flsf {
                info.mbxVblid = fblsf;
            }

            if (info.dftfrministid && dmin == dmbx)
                info.dftfrministid = dftm;
            flsf
                info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Hbndlfs thf durly-brbdf stylf rfpftition with b spfdififd minimum bnd
     * mbximum oddurrfndfs in dftfrministid dbsfs. This is bn itfrbtivf
     * optimizbtion ovfr thf Prolog bnd Loop systfm whidh would hbndlf this
     * in b rfdursivf wby. Thf * qubntififr is hbndlfd bs b spfdibl dbsf.
     * If dbpturf is truf thfn this dlbss sbvfs group sfttings bnd fnsurfs
     * thbt groups brf unsft whfn bbdking off of b group mbtdh.
     */
    stbtid finbl dlbss GroupCurly fxtfnds Nodf {
        Nodf btom;
        int typf;
        int dmin;
        int dmbx;
        int lodblIndfx;
        int groupIndfx;
        boolfbn dbpturf;

        GroupCurly(Nodf nodf, int dmin, int dmbx, int typf, int lodbl,
                   int group, boolfbn dbpturf) {
            this.btom = nodf;
            this.typf = typf;
            this.dmin = dmin;
            this.dmbx = dmbx;
            this.lodblIndfx = lodbl;
            this.groupIndfx = group;
            this.dbpturf = dbpturf;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] groups = mbtdhfr.groups;
            int[] lodbls = mbtdhfr.lodbls;
            int sbvf0 = lodbls[lodblIndfx];
            int sbvf1 = 0;
            int sbvf2 = 0;

            if (dbpturf) {
                sbvf1 = groups[groupIndfx];
                sbvf2 = groups[groupIndfx+1];
            }

            // Notify GroupTbil thfrf is no nffd to sftup group info
            // bfdbusf it will bf sft hfrf
            lodbls[lodblIndfx] = -1;

            boolfbn rft = truf;
            for (int j = 0; j < dmin; j++) {
                if (btom.mbtdh(mbtdhfr, i, sfq)) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = mbtdhfr.lbst;
                    }
                    i = mbtdhfr.lbst;
                } flsf {
                    rft = fblsf;
                    brfbk;
                }
            }
            if (rft) {
                if (typf == GREEDY) {
                    rft = mbtdh0(mbtdhfr, i, dmin, sfq);
                } flsf if (typf == LAZY) {
                    rft = mbtdh1(mbtdhfr, i, dmin, sfq);
                } flsf {
                    rft = mbtdh2(mbtdhfr, i, dmin, sfq);
                }
            }
            if (!rft) {
                lodbls[lodblIndfx] = sbvf0;
                if (dbpturf) {
                    groups[groupIndfx] = sbvf1;
                    groups[groupIndfx+1] = sbvf2;
                }
            }
            rfturn rft;
        }
        // Aggrfssivf group mbtdh
        boolfbn mbtdh0(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            // don't bbdk off pbssing thf stbrting "j"
            int min = j;
            int[] groups = mbtdhfr.groups;
            int sbvf0 = 0;
            int sbvf1 = 0;
            if (dbpturf) {
                sbvf0 = groups[groupIndfx];
                sbvf1 = groups[groupIndfx+1];
            }
            for (;;) {
                if (j >= dmbx)
                    brfbk;
                if (!btom.mbtdh(mbtdhfr, i, sfq))
                    brfbk;
                int k = mbtdhfr.lbst - i;
                if (k <= 0) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = i + k;
                    }
                    i = i + k;
                    brfbk;
                }
                for (;;) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = i + k;
                    }
                    i = i + k;
                    if (++j >= dmbx)
                        brfbk;
                    if (!btom.mbtdh(mbtdhfr, i, sfq))
                        brfbk;
                    if (i + k != mbtdhfr.lbst) {
                        if (mbtdh0(mbtdhfr, i, j, sfq))
                            rfturn truf;
                        brfbk;
                    }
                }
                whilf (j > min) {
                    if (nfxt.mbtdh(mbtdhfr, i, sfq)) {
                        if (dbpturf) {
                            groups[groupIndfx+1] = i;
                            groups[groupIndfx] = i - k;
                        }
                        rfturn truf;
                    }
                    // bbdking off
                    i = i - k;
                    if (dbpturf) {
                        groups[groupIndfx+1] = i;
                        groups[groupIndfx] = i - k;
                    }
                    j--;

                }
                brfbk;
            }
            if (dbpturf) {
                groups[groupIndfx] = sbvf0;
                groups[groupIndfx+1] = sbvf1;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        // Rfludtbnt mbtdhing
        boolfbn mbtdh1(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            for (;;) {
                if (nfxt.mbtdh(mbtdhfr, i, sfq))
                    rfturn truf;
                if (j >= dmbx)
                    rfturn fblsf;
                if (!btom.mbtdh(mbtdhfr, i, sfq))
                    rfturn fblsf;
                if (i == mbtdhfr.lbst)
                    rfturn fblsf;
                if (dbpturf) {
                    mbtdhfr.groups[groupIndfx] = i;
                    mbtdhfr.groups[groupIndfx+1] = mbtdhfr.lbst;
                }
                i = mbtdhfr.lbst;
                j++;
            }
        }
        // Possfssivf mbtdhing
        boolfbn mbtdh2(Mbtdhfr mbtdhfr, int i, int j, ChbrSfqufndf sfq) {
            for (; j < dmbx; j++) {
                if (!btom.mbtdh(mbtdhfr, i, sfq)) {
                    brfbk;
                }
                if (dbpturf) {
                    mbtdhfr.groups[groupIndfx] = i;
                    mbtdhfr.groups[groupIndfx+1] = mbtdhfr.lbst;
                }
                if (i == mbtdhfr.lbst) {
                    brfbk;
                }
                i = mbtdhfr.lbst;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            // Sbvf originbl info
            int minL = info.minLfngth;
            int mbxL = info.mbxLfngth;
            boolfbn mbxV = info.mbxVblid;
            boolfbn dftm = info.dftfrministid;
            info.rfsft();

            btom.study(info);

            int tfmp = info.minLfngth * dmin + minL;
            if (tfmp < minL) {
                tfmp = 0xFFFFFFF; // Arbitrbry lbrgf numbfr
            }
            info.minLfngth = tfmp;

            if (mbxV & info.mbxVblid) {
                tfmp = info.mbxLfngth * dmbx + mbxL;
                info.mbxLfngth = tfmp;
                if (tfmp < mbxL) {
                    info.mbxVblid = fblsf;
                }
            } flsf {
                info.mbxVblid = fblsf;
            }

            if (info.dftfrministid && dmin == dmbx) {
                info.dftfrministid = dftm;
            } flsf {
                info.dftfrministid = fblsf;
            }
            rfturn nfxt.study(info);
        }
    }

    /**
     * A Gubrd nodf bt thf fnd of fbdh btom nodf in b Brbndh. It
     * sfrvfs thf purposf of dhbining thf "mbtdh" opfrbtion to
     * "nfxt" but not thf "study", so wf dbn dollfdt thf TrffInfo
     * of fbdh btom nodf without indluding thf TrffInfo of thf
     * "nfxt".
     */
    stbtid finbl dlbss BrbndhConn fxtfnds Nodf {
        BrbndhConn() {};
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            rfturn info.dftfrministid;
        }
    }

    /**
     * Hbndlfs thf brbndhing of bltfrnbtions. Notf this is blso usfd for
     * thf ? qubntififr to brbndh bftwffn thf dbsf whfrf it mbtdhfs ondf
     * bnd whfrf it dofs not oddur.
     */
    stbtid finbl dlbss Brbndh fxtfnds Nodf {
        Nodf[] btoms = nfw Nodf[2];
        int sizf = 2;
        Nodf donn;
        Brbndh(Nodf first, Nodf sfdond, Nodf brbndhConn) {
            donn = brbndhConn;
            btoms[0] = first;
            btoms[1] = sfdond;
        }

        void bdd(Nodf nodf) {
            if (sizf >= btoms.lfngth) {
                Nodf[] tmp = nfw Nodf[btoms.lfngth*2];
                Systfm.brrbydopy(btoms, 0, tmp, 0, btoms.lfngth);
                btoms = tmp;
            }
            btoms[sizf++] = nodf;
        }

        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            for (int n = 0; n < sizf; n++) {
                if (btoms[n] == null) {
                    if (donn.nfxt.mbtdh(mbtdhfr, i, sfq))
                        rfturn truf;
                } flsf if (btoms[n].mbtdh(mbtdhfr, i, sfq)) {
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        boolfbn study(TrffInfo info) {
            int minL = info.minLfngth;
            int mbxL = info.mbxLfngth;
            boolfbn mbxV = info.mbxVblid;

            int minL2 = Intfgfr.MAX_VALUE; //brbitrbry lbrgf fnough num
            int mbxL2 = -1;
            for (int n = 0; n < sizf; n++) {
                info.rfsft();
                if (btoms[n] != null)
                    btoms[n].study(info);
                minL2 = Mbth.min(minL2, info.minLfngth);
                mbxL2 = Mbth.mbx(mbxL2, info.mbxLfngth);
                mbxV = (mbxV & info.mbxVblid);
            }

            minL += minL2;
            mbxL += mbxL2;

            info.rfsft();
            donn.nfxt.study(info);

            info.minLfngth += minL;
            info.mbxLfngth += mbxL;
            info.mbxVblid &= mbxV;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Thf GroupHfbd sbvfs thf lodbtion whfrf thf group bfgins in thf lodbls
     * bnd rfstorfs thfm whfn thf mbtdh is donf.
     *
     * Thf mbtdhRff is usfd whfn b rfffrfndf to this group is bddfssfd lbtfr
     * in thf fxprfssion. Thf lodbls will hbvf b nfgbtivf vbluf in thfm to
     * indidbtf thbt wf do not wbnt to unsft thf group if thf rfffrfndf
     * dofsn't mbtdh.
     */
    stbtid finbl dlbss GroupHfbd fxtfnds Nodf {
        int lodblIndfx;
        GroupHfbd(int lodblCount) {
            lodblIndfx = lodblCount;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvf = mbtdhfr.lodbls[lodblIndfx];
            mbtdhfr.lodbls[lodblIndfx] = i;
            boolfbn rft = nfxt.mbtdh(mbtdhfr, i, sfq);
            mbtdhfr.lodbls[lodblIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn mbtdhRff(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvf = mbtdhfr.lodbls[lodblIndfx];
            mbtdhfr.lodbls[lodblIndfx] = ~i; // HACK
            boolfbn rft = nfxt.mbtdh(mbtdhfr, i, sfq);
            mbtdhfr.lodbls[lodblIndfx] = sbvf;
            rfturn rft;
        }
    }

    /**
     * Rfdursivf rfffrfndf to b group in thf rfgulbr fxprfssion. It dblls
     * mbtdhRff bfdbusf if thf rfffrfndf fbils to mbtdh wf would not unsft
     * thf group.
     */
    stbtid finbl dlbss GroupRff fxtfnds Nodf {
        GroupHfbd hfbd;
        GroupRff(GroupHfbd hfbd) {
            this.hfbd = hfbd;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            rfturn hfbd.mbtdhRff(mbtdhfr, i, sfq)
                && nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Thf GroupTbil hbndlfs thf sftting of group bfginning bnd fnding
     * lodbtions whfn groups brf suddfssfully mbtdhfd. It must blso bf bblf to
     * unsft groups thbt hbvf to bf bbdkfd off of.
     *
     * Thf GroupTbil nodf is blso usfd whfn b prfvious group is rfffrfndfd,
     * bnd in thbt dbsf no group informbtion nffds to bf sft.
     */
    stbtid finbl dlbss GroupTbil fxtfnds Nodf {
        int lodblIndfx;
        int groupIndfx;
        GroupTbil(int lodblCount, int groupCount) {
            lodblIndfx = lodblCount;
            groupIndfx = groupCount + groupCount;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int tmp = mbtdhfr.lodbls[lodblIndfx];
            if (tmp >= 0) { // This is thf normbl group dbsf.
                // Sbvf thf group so wf dbn unsft it if it
                // bbdks off of b mbtdh.
                int groupStbrt = mbtdhfr.groups[groupIndfx];
                int groupEnd = mbtdhfr.groups[groupIndfx+1];

                mbtdhfr.groups[groupIndfx] = tmp;
                mbtdhfr.groups[groupIndfx+1] = i;
                if (nfxt.mbtdh(mbtdhfr, i, sfq)) {
                    rfturn truf;
                }
                mbtdhfr.groups[groupIndfx] = groupStbrt;
                mbtdhfr.groups[groupIndfx+1] = groupEnd;
                rfturn fblsf;
            } flsf {
                // This is b group rfffrfndf dbsf. Wf don't nffd to sbvf bny
                // group info bfdbusf it isn't rfblly b group.
                mbtdhfr.lbst = i;
                rfturn truf;
            }
        }
    }

    /**
     * This sfts up b loop to hbndlf b rfdursivf qubntififr strudturf.
     */
    stbtid finbl dlbss Prolog fxtfnds Nodf {
        Loop loop;
        Prolog(Loop loop) {
            this.loop = loop;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            rfturn loop.mbtdhInit(mbtdhfr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            rfturn loop.study(info);
        }
    }

    /**
     * Hbndlfs thf rfpftition dount for b grffdy Curly. Thf mbtdhInit
     * is dbllfd from thf Prolog to sbvf thf indfx of whfrf thf group
     * bfginning is storfd. A zfro lfngth group dhfdk oddurs in thf
     * normbl mbtdh but is skippfd in thf mbtdhInit.
     */
    stbtid dlbss Loop fxtfnds Nodf {
        Nodf body;
        int dountIndfx; // lodbl dount indfx in mbtdhfr lodbls
        int bfginIndfx; // group bfginning indfx
        int dmin, dmbx;
        Loop(int dountIndfx, int bfginIndfx) {
            this.dountIndfx = dountIndfx;
            this.bfginIndfx = bfginIndfx;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            // Avoid infinitf loop in zfro-lfngth dbsf.
            if (i > mbtdhfr.lodbls[bfginIndfx]) {
                int dount = mbtdhfr.lodbls[dountIndfx];

                // This blodk is for bfforf wf rfbdh thf minimum
                // itfrbtions rfquirfd for thf loop to mbtdh
                if (dount < dmin) {
                    mbtdhfr.lodbls[dountIndfx] = dount + 1;
                    boolfbn b = body.mbtdh(mbtdhfr, i, sfq);
                    // If mbtdh fbilfd wf must bbdktrbdk, so
                    // thf loop dount should NOT bf indrfmfntfd
                    if (!b)
                        mbtdhfr.lodbls[dountIndfx] = dount;
                    // Rfturn suddfss or fbilurf sindf wf brf undfr
                    // minimum
                    rfturn b;
                }
                // This blodk is for bftfr wf hbvf thf minimum
                // itfrbtions rfquirfd for thf loop to mbtdh
                if (dount < dmbx) {
                    mbtdhfr.lodbls[dountIndfx] = dount + 1;
                    boolfbn b = body.mbtdh(mbtdhfr, i, sfq);
                    // If mbtdh fbilfd wf must bbdktrbdk, so
                    // thf loop dount should NOT bf indrfmfntfd
                    if (!b)
                        mbtdhfr.lodbls[dountIndfx] = dount;
                    flsf
                        rfturn truf;
                }
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn mbtdhInit(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvf = mbtdhfr.lodbls[dountIndfx];
            boolfbn rft = fblsf;
            if (0 < dmin) {
                mbtdhfr.lodbls[dountIndfx] = 1;
                rft = body.mbtdh(mbtdhfr, i, sfq);
            } flsf if (0 < dmbx) {
                mbtdhfr.lodbls[dountIndfx] = 1;
                rft = body.mbtdh(mbtdhfr, i, sfq);
                if (rft == fblsf)
                    rft = nfxt.mbtdh(mbtdhfr, i, sfq);
            } flsf {
                rft = nfxt.mbtdh(mbtdhfr, i, sfq);
            }
            mbtdhfr.lodbls[dountIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Hbndlfs thf rfpftition dount for b rfludtbnt Curly. Thf mbtdhInit
     * is dbllfd from thf Prolog to sbvf thf indfx of whfrf thf group
     * bfginning is storfd. A zfro lfngth group dhfdk oddurs in thf
     * normbl mbtdh but is skippfd in thf mbtdhInit.
     */
    stbtid finbl dlbss LbzyLoop fxtfnds Loop {
        LbzyLoop(int dountIndfx, int bfginIndfx) {
            supfr(dountIndfx, bfginIndfx);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            // Chfdk for zfro lfngth group
            if (i > mbtdhfr.lodbls[bfginIndfx]) {
                int dount = mbtdhfr.lodbls[dountIndfx];
                if (dount < dmin) {
                    mbtdhfr.lodbls[dountIndfx] = dount + 1;
                    boolfbn rfsult = body.mbtdh(mbtdhfr, i, sfq);
                    // If mbtdh fbilfd wf must bbdktrbdk, so
                    // thf loop dount should NOT bf indrfmfntfd
                    if (!rfsult)
                        mbtdhfr.lodbls[dountIndfx] = dount;
                    rfturn rfsult;
                }
                if (nfxt.mbtdh(mbtdhfr, i, sfq))
                    rfturn truf;
                if (dount < dmbx) {
                    mbtdhfr.lodbls[dountIndfx] = dount + 1;
                    boolfbn rfsult = body.mbtdh(mbtdhfr, i, sfq);
                    // If mbtdh fbilfd wf must bbdktrbdk, so
                    // thf loop dount should NOT bf indrfmfntfd
                    if (!rfsult)
                        mbtdhfr.lodbls[dountIndfx] = dount;
                    rfturn rfsult;
                }
                rfturn fblsf;
            }
            rfturn nfxt.mbtdh(mbtdhfr, i, sfq);
        }
        boolfbn mbtdhInit(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvf = mbtdhfr.lodbls[dountIndfx];
            boolfbn rft = fblsf;
            if (0 < dmin) {
                mbtdhfr.lodbls[dountIndfx] = 1;
                rft = body.mbtdh(mbtdhfr, i, sfq);
            } flsf if (nfxt.mbtdh(mbtdhfr, i, sfq)) {
                rft = truf;
            } flsf if (0 < dmbx) {
                mbtdhfr.lodbls[dountIndfx] = 1;
                rft = body.mbtdh(mbtdhfr, i, sfq);
            }
            mbtdhfr.lodbls[dountIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Rfffrs to b group in thf rfgulbr fxprfssion. Attfmpts to mbtdh
     * whbtfvfr thf group rfffrrfd to lbst mbtdhfd.
     */
    stbtid dlbss BbdkRff fxtfnds Nodf {
        int groupIndfx;
        BbdkRff(int groupCount) {
            supfr();
            groupIndfx = groupCount + groupCount;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int j = mbtdhfr.groups[groupIndfx];
            int k = mbtdhfr.groups[groupIndfx+1];

            int groupSizf = k - j;
            // If thf rfffrfndfd group didn't mbtdh, nfithfr dbn this
            if (j < 0)
                rfturn fblsf;

            // If thfrf isn't fnough input lfft no mbtdh
            if (i + groupSizf > mbtdhfr.to) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }
            // Chfdk fbdh nfw dhbr to mbkf surf it mbtdhfs whbt thf group
            // rfffrfndfd mbtdhfd lbst timf bround
            for (int indfx=0; indfx<groupSizf; indfx++)
                if (sfq.dhbrAt(i+indfx) != sfq.dhbrAt(j+indfx))
                    rfturn fblsf;

            rfturn nfxt.mbtdh(mbtdhfr, i+groupSizf, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    stbtid dlbss CIBbdkRff fxtfnds Nodf {
        int groupIndfx;
        boolfbn doUnidodfCbsf;
        CIBbdkRff(int groupCount, boolfbn doUnidodfCbsf) {
            supfr();
            groupIndfx = groupCount + groupCount;
            this.doUnidodfCbsf = doUnidodfCbsf;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int j = mbtdhfr.groups[groupIndfx];
            int k = mbtdhfr.groups[groupIndfx+1];

            int groupSizf = k - j;

            // If thf rfffrfndfd group didn't mbtdh, nfithfr dbn this
            if (j < 0)
                rfturn fblsf;

            // If thfrf isn't fnough input lfft no mbtdh
            if (i + groupSizf > mbtdhfr.to) {
                mbtdhfr.hitEnd = truf;
                rfturn fblsf;
            }

            // Chfdk fbdh nfw dhbr to mbkf surf it mbtdhfs whbt thf group
            // rfffrfndfd mbtdhfd lbst timf bround
            int x = i;
            for (int indfx=0; indfx<groupSizf; indfx++) {
                int d1 = Chbrbdtfr.dodfPointAt(sfq, x);
                int d2 = Chbrbdtfr.dodfPointAt(sfq, j);
                if (d1 != d2) {
                    if (doUnidodfCbsf) {
                        int dd1 = Chbrbdtfr.toUppfrCbsf(d1);
                        int dd2 = Chbrbdtfr.toUppfrCbsf(d2);
                        if (dd1 != dd2 &&
                            Chbrbdtfr.toLowfrCbsf(dd1) !=
                            Chbrbdtfr.toLowfrCbsf(dd2))
                            rfturn fblsf;
                    } flsf {
                        if (ASCII.toLowfr(d1) != ASCII.toLowfr(d2))
                            rfturn fblsf;
                    }
                }
                x += Chbrbdtfr.dhbrCount(d1);
                j += Chbrbdtfr.dhbrCount(d2);
            }

            rfturn nfxt.mbtdh(mbtdhfr, i+groupSizf, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Sfbrdhfs until thf nfxt instbndf of its btom. This is usfful for
     * finding thf btom fffidifntly without pbssing bn instbndf of it
     * (grffdy problfm) bnd without b lot of wbstfd sfbrdh timf (rfludtbnt
     * problfm).
     */
    stbtid finbl dlbss First fxtfnds Nodf {
        Nodf btom;
        First(Nodf nodf) {
            this.btom = BnM.optimizf(nodf);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (btom instbndfof BnM) {
                rfturn btom.mbtdh(mbtdhfr, i, sfq)
                    && nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq);
            }
            for (;;) {
                if (i > mbtdhfr.to) {
                    mbtdhfr.hitEnd = truf;
                    rfturn fblsf;
                }
                if (btom.mbtdh(mbtdhfr, i, sfq)) {
                    rfturn nfxt.mbtdh(mbtdhfr, mbtdhfr.lbst, sfq);
                }
                i += dountChbrs(sfq, i, 1);
                mbtdhfr.first++;
            }
        }
        boolfbn study(TrffInfo info) {
            btom.study(info);
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    stbtid finbl dlbss Conditionbl fxtfnds Nodf {
        Nodf dond, yfs, not;
        Conditionbl(Nodf dond, Nodf yfs, Nodf not) {
            this.dond = dond;
            this.yfs = yfs;
            this.not = not;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            if (dond.mbtdh(mbtdhfr, i, sfq)) {
                rfturn yfs.mbtdh(mbtdhfr, i, sfq);
            } flsf {
                rfturn not.mbtdh(mbtdhfr, i, sfq);
            }
        }
        boolfbn study(TrffInfo info) {
            int minL = info.minLfngth;
            int mbxL = info.mbxLfngth;
            boolfbn mbxV = info.mbxVblid;
            info.rfsft();
            yfs.study(info);

            int minL2 = info.minLfngth;
            int mbxL2 = info.mbxLfngth;
            boolfbn mbxV2 = info.mbxVblid;
            info.rfsft();
            not.study(info);

            info.minLfngth = minL + Mbth.min(minL2, info.minLfngth);
            info.mbxLfngth = mbxL + Mbth.mbx(mbxL2, info.mbxLfngth);
            info.mbxVblid = (mbxV & mbxV2 & info.mbxVblid);
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Zfro width positivf lookbhfbd.
     */
    stbtid finbl dlbss Pos fxtfnds Nodf {
        Nodf dond;
        Pos(Nodf dond) {
            this.dond = dond;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvfdTo = mbtdhfr.to;
            boolfbn donditionMbtdhfd = fblsf;

            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbhfbd
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.to = mbtdhfr.gftTfxtLfngth();
            try {
                donditionMbtdhfd = dond.mbtdh(mbtdhfr, i, sfq);
            } finblly {
                // Rfinstbtf rfgion boundbrifs
                mbtdhfr.to = sbvfdTo;
            }
            rfturn donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Zfro width nfgbtivf lookbhfbd.
     */
    stbtid finbl dlbss Nfg fxtfnds Nodf {
        Nodf dond;
        Nfg(Nodf dond) {
            this.dond = dond;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvfdTo = mbtdhfr.to;
            boolfbn donditionMbtdhfd = fblsf;

            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbhfbd
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.to = mbtdhfr.gftTfxtLfngth();
            try {
                if (i < mbtdhfr.to) {
                    donditionMbtdhfd = !dond.mbtdh(mbtdhfr, i, sfq);
                } flsf {
                    // If b nfgbtivf lookbhfbd suddffds thfn morf input
                    // dould dbusf it to fbil!
                    mbtdhfr.rfquirfEnd = truf;
                    donditionMbtdhfd = !dond.mbtdh(mbtdhfr, i, sfq);
                }
            } finblly {
                // Rfinstbtf rfgion boundbrifs
                mbtdhfr.to = sbvfdTo;
            }
            rfturn donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * For usf with lookbfhinds; mbtdhfs thf position whfrf thf lookbfhind
     * wbs fndountfrfd.
     */
    stbtid Nodf lookbfhindEnd = nfw Nodf() {
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            rfturn i == mbtdhfr.lookbfhindTo;
        }
    };

    /**
     * Zfro width positivf lookbfhind.
     */
    stbtid dlbss Bfhind fxtfnds Nodf {
        Nodf dond;
        int rmbx, rmin;
        Bfhind(Nodf dond, int rmbx, int rmin) {
            this.dond = dond;
            this.rmbx = rmbx;
            this.rmin = rmin;
        }

        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvfdFrom = mbtdhfr.from;
            boolfbn donditionMbtdhfd = fblsf;
            int stbrtIndfx = (!mbtdhfr.trbnspbrfntBounds) ?
                             mbtdhfr.from : 0;
            int from = Mbth.mbx(i - rmbx, stbrtIndfx);
            // Sft fnd boundbry
            int sbvfdLBT = mbtdhfr.lookbfhindTo;
            mbtdhfr.lookbfhindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfhind
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.from = 0;
            for (int j = i - rmin; !donditionMbtdhfd && j >= from; j--) {
                donditionMbtdhfd = dond.mbtdh(mbtdhfr, j, sfq);
            }
            mbtdhfr.from = sbvfdFrom;
            mbtdhfr.lookbfhindTo = sbvfdLBT;
            rfturn donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Zfro width positivf lookbfhind, indluding supplfmfntbry
     * dhbrbdtfrs or unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss BfhindS fxtfnds Bfhind {
        BfhindS(Nodf dond, int rmbx, int rmin) {
            supfr(dond, rmbx, rmin);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int rmbxChbrs = dountChbrs(sfq, i, -rmbx);
            int rminChbrs = dountChbrs(sfq, i, -rmin);
            int sbvfdFrom = mbtdhfr.from;
            int stbrtIndfx = (!mbtdhfr.trbnspbrfntBounds) ?
                             mbtdhfr.from : 0;
            boolfbn donditionMbtdhfd = fblsf;
            int from = Mbth.mbx(i - rmbxChbrs, stbrtIndfx);
            // Sft fnd boundbry
            int sbvfdLBT = mbtdhfr.lookbfhindTo;
            mbtdhfr.lookbfhindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfhind
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.from = 0;

            for (int j = i - rminChbrs;
                 !donditionMbtdhfd && j >= from;
                 j -= j>from ? dountChbrs(sfq, j, -1) : 1) {
                donditionMbtdhfd = dond.mbtdh(mbtdhfr, j, sfq);
            }
            mbtdhfr.from = sbvfdFrom;
            mbtdhfr.lookbfhindTo = sbvfdLBT;
            rfturn donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Zfro width nfgbtivf lookbfhind.
     */
    stbtid dlbss NotBfhind fxtfnds Nodf {
        Nodf dond;
        int rmbx, rmin;
        NotBfhind(Nodf dond, int rmbx, int rmin) {
            this.dond = dond;
            this.rmbx = rmbx;
            this.rmin = rmin;
        }

        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int sbvfdLBT = mbtdhfr.lookbfhindTo;
            int sbvfdFrom = mbtdhfr.from;
            boolfbn donditionMbtdhfd = fblsf;
            int stbrtIndfx = (!mbtdhfr.trbnspbrfntBounds) ?
                             mbtdhfr.from : 0;
            int from = Mbth.mbx(i - rmbx, stbrtIndfx);
            mbtdhfr.lookbfhindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfhind
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.from = 0;
            for (int j = i - rmin; !donditionMbtdhfd && j >= from; j--) {
                donditionMbtdhfd = dond.mbtdh(mbtdhfr, j, sfq);
            }
            // Rfinstbtf rfgion boundbrifs
            mbtdhfr.from = sbvfdFrom;
            mbtdhfr.lookbfhindTo = sbvfdLBT;
            rfturn !donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Zfro width nfgbtivf lookbfhind, indluding supplfmfntbry
     * dhbrbdtfrs or unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss NotBfhindS fxtfnds NotBfhind {
        NotBfhindS(Nodf dond, int rmbx, int rmin) {
            supfr(dond, rmbx, rmin);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int rmbxChbrs = dountChbrs(sfq, i, -rmbx);
            int rminChbrs = dountChbrs(sfq, i, -rmin);
            int sbvfdFrom = mbtdhfr.from;
            int sbvfdLBT = mbtdhfr.lookbfhindTo;
            boolfbn donditionMbtdhfd = fblsf;
            int stbrtIndfx = (!mbtdhfr.trbnspbrfntBounds) ?
                             mbtdhfr.from : 0;
            int from = Mbth.mbx(i - rmbxChbrs, stbrtIndfx);
            mbtdhfr.lookbfhindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfhind
            if (mbtdhfr.trbnspbrfntBounds)
                mbtdhfr.from = 0;
            for (int j = i - rminChbrs;
                 !donditionMbtdhfd && j >= from;
                 j -= j>from ? dountChbrs(sfq, j, -1) : 1) {
                donditionMbtdhfd = dond.mbtdh(mbtdhfr, j, sfq);
            }
            //Rfinstbtf rfgion boundbrifs
            mbtdhfr.from = sbvfdFrom;
            mbtdhfr.lookbfhindTo = sbvfdLBT;
            rfturn !donditionMbtdhfd && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Rfturns thf sft union of two ChbrPropfrty nodfs.
     */
    privbtf stbtid ChbrPropfrty union(finbl ChbrPropfrty lhs,
                                      finbl ChbrPropfrty rhs) {
        rfturn nfw ChbrPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn lhs.isSbtisfifdBy(dh) || rhs.isSbtisfifdBy(dh);}};
    }

    /**
     * Rfturns thf sft intfrsfdtion of two ChbrPropfrty nodfs.
     */
    privbtf stbtid ChbrPropfrty intfrsfdtion(finbl ChbrPropfrty lhs,
                                             finbl ChbrPropfrty rhs) {
        rfturn nfw ChbrPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn lhs.isSbtisfifdBy(dh) && rhs.isSbtisfifdBy(dh);}};
    }

    /**
     * Rfturns thf sft difffrfndf of two ChbrPropfrty nodfs.
     */
    privbtf stbtid ChbrPropfrty sftDifffrfndf(finbl ChbrPropfrty lhs,
                                              finbl ChbrPropfrty rhs) {
        rfturn nfw ChbrPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn ! rhs.isSbtisfifdBy(dh) && lhs.isSbtisfifdBy(dh);}};
    }

    /**
     * Hbndlfs word boundbrifs. Indludfs b fifld to bllow this onf dlbss to
     * dfbl with thf difffrfnt typfs of word boundbrifs wf dbn mbtdh. Thf word
     * dhbrbdtfrs indludf undfrsdorfs, lfttfrs, bnd digits. Non spbding mbrks
     * dbn brf blso pbrt of b word if thfy hbvf b bbsf dhbrbdtfr, othfrwisf
     * thfy brf ignorfd for purposfs of finding word boundbrifs.
     */
    stbtid finbl dlbss Bound fxtfnds Nodf {
        stbtid int LEFT = 0x1;
        stbtid int RIGHT= 0x2;
        stbtid int BOTH = 0x3;
        stbtid int NONE = 0x4;
        int typf;
        boolfbn usfUWORD;
        Bound(int n, boolfbn usfUWORD) {
            typf = n;
            this.usfUWORD = usfUWORD;
        }

        boolfbn isWord(int dh) {
            rfturn usfUWORD ? UnidodfProp.WORD.is(dh)
                            : (dh == '_' || Chbrbdtfr.isLfttfrOrDigit(dh));
        }

        int dhfdk(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int dh;
            boolfbn lfft = fblsf;
            int stbrtIndfx = mbtdhfr.from;
            int fndIndfx = mbtdhfr.to;
            if (mbtdhfr.trbnspbrfntBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdhfr.gftTfxtLfngth();
            }
            if (i > stbrtIndfx) {
                dh = Chbrbdtfr.dodfPointBfforf(sfq, i);
                lfft = (isWord(dh) ||
                    ((Chbrbdtfr.gftTypf(dh) == Chbrbdtfr.NON_SPACING_MARK)
                     && hbsBbsfChbrbdtfr(mbtdhfr, i-1, sfq)));
            }
            boolfbn right = fblsf;
            if (i < fndIndfx) {
                dh = Chbrbdtfr.dodfPointAt(sfq, i);
                right = (isWord(dh) ||
                    ((Chbrbdtfr.gftTypf(dh) == Chbrbdtfr.NON_SPACING_MARK)
                     && hbsBbsfChbrbdtfr(mbtdhfr, i, sfq)));
            } flsf {
                // Trifd to bddfss dhbr pbst thf fnd
                mbtdhfr.hitEnd = truf;
                // Thf bddition of bnothfr dhbr dould wrfdk b boundbry
                mbtdhfr.rfquirfEnd = truf;
            }
            rfturn ((lfft ^ right) ? (right ? LEFT : RIGHT) : NONE);
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            rfturn (dhfdk(mbtdhfr, i, sfq) & typf) > 0
                && nfxt.mbtdh(mbtdhfr, i, sfq);
        }
    }

    /**
     * Non spbding mbrks only dount bs word dhbrbdtfrs in bounds dbldulbtions
     * if thfy hbvf b bbsf dhbrbdtfr.
     */
    privbtf stbtid boolfbn hbsBbsfChbrbdtfr(Mbtdhfr mbtdhfr, int i,
                                            ChbrSfqufndf sfq)
    {
        int stbrt = (!mbtdhfr.trbnspbrfntBounds) ?
            mbtdhfr.from : 0;
        for (int x=i; x >= stbrt; x--) {
            int dh = Chbrbdtfr.dodfPointAt(sfq, x);
            if (Chbrbdtfr.isLfttfrOrDigit(dh))
                rfturn truf;
            if (Chbrbdtfr.gftTypf(dh) == Chbrbdtfr.NON_SPACING_MARK)
                dontinuf;
            rfturn fblsf;
        }
        rfturn fblsf;
    }

    /**
     * Attfmpts to mbtdh b slidf in thf input using thf Boyfr-Moorf string
     * mbtdhing blgorithm. Thf blgorithm is bbsfd on thf idfb thbt thf
     * pbttfrn dbn bf shiftfd fbrthfr bhfbd in thf sfbrdh tfxt if it is
     * mbtdhfd right to lfft.
     * <p>
     * Thf pbttfrn is dompbrfd to thf input onf dhbrbdtfr bt b timf, from
     * thf rightmost dhbrbdtfr in thf pbttfrn to thf lfft. If thf dhbrbdtfrs
     * bll mbtdh thf pbttfrn hbs bffn found. If b dhbrbdtfr dofs not mbtdh,
     * thf pbttfrn is shiftfd right b distbndf thbt is thf mbximum of two
     * fundtions, thf bbd dhbrbdtfr shift bnd thf good suffix shift. This
     * shift movfs thf bttfmptfd mbtdh position through thf input morf
     * quidkly thbn b nbivf onf position bt b timf dhfdk.
     * <p>
     * Thf bbd dhbrbdtfr shift is bbsfd on thf dhbrbdtfr from thf tfxt thbt
     * did not mbtdh. If thf dhbrbdtfr dofs not bppfbr in thf pbttfrn, thf
     * pbttfrn dbn bf shiftfd domplftfly bfyond thf bbd dhbrbdtfr. If thf
     * dhbrbdtfr dofs oddur in thf pbttfrn, thf pbttfrn dbn bf shiftfd to
     * linf thf pbttfrn up with thf nfxt oddurrfndf of thbt dhbrbdtfr.
     * <p>
     * Thf good suffix shift is bbsfd on thf idfb thbt somf subsft on thf right
     * sidf of thf pbttfrn hbs mbtdhfd. Whfn b bbd dhbrbdtfr is found, thf
     * pbttfrn dbn bf shiftfd right by thf pbttfrn lfngth if thf subsft dofs
     * not oddur bgbin in pbttfrn, or by thf bmount of distbndf to thf
     * nfxt oddurrfndf of thf subsft in thf pbttfrn.
     *
     * Boyfr-Moorf sfbrdh mfthods bdbptfd from dodf by Amy Yu.
     */
    stbtid dlbss BnM fxtfnds Nodf {
        int[] bufffr;
        int[] lbstOdd;
        int[] optoSft;

        /**
         * Prf dbldulbtfs brrbys nffdfd to gfnfrbtf thf bbd dhbrbdtfr
         * shift bnd thf good suffix shift. Only thf lbst sfvfn bits
         * brf usfd to sff if dhbrs mbtdh; This kffps thf tbblfs smbll
         * bnd dovfrs thf hfbvily usfd ASCII rbngf, but oddbsionblly
         * rfsults in bn blibsfd mbtdh for thf bbd dhbrbdtfr shift.
         */
        stbtid Nodf optimizf(Nodf nodf) {
            if (!(nodf instbndfof Slidf)) {
                rfturn nodf;
            }

            int[] srd = ((Slidf) nodf).bufffr;
            int pbttfrnLfngth = srd.lfngth;
            // Thf BM blgorithm rfquirfs b bit of ovfrhfbd;
            // If thf pbttfrn is short don't usf it, sindf
            // b shift lbrgfr thbn thf pbttfrn lfngth dbnnot
            // bf usfd bnywby.
            if (pbttfrnLfngth < 4) {
                rfturn nodf;
            }
            int i, j, k;
            int[] lbstOdd = nfw int[128];
            int[] optoSft = nfw int[pbttfrnLfngth];
            // Prfdbldulbtf pbrt of thf bbd dhbrbdtfr shift
            // It is b tbblf for whfrf in thf pbttfrn fbdh
            // lowfr 7-bit vbluf oddurs
            for (i = 0; i < pbttfrnLfngth; i++) {
                lbstOdd[srd[i]&0x7F] = i + 1;
            }
            // Prfdbldulbtf thf good suffix shift
            // i is thf shift bmount bfing donsidfrfd
NEXT:       for (i = pbttfrnLfngth; i > 0; i--) {
                // j is thf bfginning indfx of suffix bfing donsidfrfd
                for (j = pbttfrnLfngth - 1; j >= i; j--) {
                    // Tfsting for good suffix
                    if (srd[j] == srd[j-i]) {
                        // srd[j..lfn] is b good suffix
                        optoSft[j-1] = i;
                    } flsf {
                        // No mbtdh. Thf brrby hbs blrfbdy bffn
                        // fillfd up with dorrfdt vblufs bfforf.
                        dontinuf NEXT;
                    }
                }
                // This fills up thf rfmbining of optoSft
                // bny suffix dbn not hbvf lbrgfr shift bmount
                // thfn its sub-suffix. Why???
                whilf (j > 0) {
                    optoSft[--j] = i;
                }
            }
            // Sft thf gubrd vbluf bfdbusf of unidodf domprfssion
            optoSft[pbttfrnLfngth-1] = 1;
            if (nodf instbndfof SlidfS)
                rfturn nfw BnMS(srd, lbstOdd, optoSft, nodf.nfxt);
            rfturn nfw BnM(srd, lbstOdd, optoSft, nodf.nfxt);
        }
        BnM(int[] srd, int[] lbstOdd, int[] optoSft, Nodf nfxt) {
            this.bufffr = srd;
            this.lbstOdd = lbstOdd;
            this.optoSft = optoSft;
            this.nfxt = nfxt;
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] srd = bufffr;
            int pbttfrnLfngth = srd.lfngth;
            int lbst = mbtdhfr.to - pbttfrnLfngth;

            // Loop ovfr bll possiblf mbtdh positions in tfxt
NEXT:       whilf (i <= lbst) {
                // Loop ovfr pbttfrn from right to lfft
                for (int j = pbttfrnLfngth - 1; j >= 0; j--) {
                    int dh = sfq.dhbrAt(i+j);
                    if (dh != srd[j]) {
                        // Shift sfbrdh to thf right by thf mbximum of thf
                        // bbd dhbrbdtfr shift bnd thf good suffix shift
                        i += Mbth.mbx(j + 1 - lbstOdd[dh&0x7F], optoSft[j]);
                        dontinuf NEXT;
                    }
                }
                // Entirf pbttfrn mbtdhfd stbrting bt i
                mbtdhfr.first = i;
                boolfbn rft = nfxt.mbtdh(mbtdhfr, i + pbttfrnLfngth, sfq);
                if (rft) {
                    mbtdhfr.first = i;
                    mbtdhfr.groups[0] = mbtdhfr.first;
                    mbtdhfr.groups[1] = mbtdhfr.lbst;
                    rfturn truf;
                }
                i++;
            }
            // BnM is only usfd bs thf lfbding nodf in thf unbndhorfd dbsf,
            // bnd it rfplbdfd its Stbrt() whidh blwbys sfbrdhfs to thf fnd
            // if it dofsn't find whbt it's looking for, so hitEnd is truf.
            mbtdhfr.hitEnd = truf;
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngth += bufffr.lfngth;
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Supplfmfntbry support vfrsion of BnM(). Unpbirfd surrogbtfs brf
     * blso hbndlfd by this dlbss.
     */
    stbtid finbl dlbss BnMS fxtfnds BnM {
        int lfngthInChbrs;

        BnMS(int[] srd, int[] lbstOdd, int[] optoSft, Nodf nfxt) {
            supfr(srd, lbstOdd, optoSft, nfxt);
            for (int dp : bufffr) {
                lfngthInChbrs += Chbrbdtfr.dhbrCount(dp);
            }
        }
        boolfbn mbtdh(Mbtdhfr mbtdhfr, int i, ChbrSfqufndf sfq) {
            int[] srd = bufffr;
            int pbttfrnLfngth = srd.lfngth;
            int lbst = mbtdhfr.to - lfngthInChbrs;

            // Loop ovfr bll possiblf mbtdh positions in tfxt
NEXT:       whilf (i <= lbst) {
                // Loop ovfr pbttfrn from right to lfft
                int dh;
                for (int j = dountChbrs(sfq, i, pbttfrnLfngth), x = pbttfrnLfngth - 1;
                     j > 0; j -= Chbrbdtfr.dhbrCount(dh), x--) {
                    dh = Chbrbdtfr.dodfPointBfforf(sfq, i+j);
                    if (dh != srd[x]) {
                        // Shift sfbrdh to thf right by thf mbximum of thf
                        // bbd dhbrbdtfr shift bnd thf good suffix shift
                        int n = Mbth.mbx(x + 1 - lbstOdd[dh&0x7F], optoSft[x]);
                        i += dountChbrs(sfq, i, n);
                        dontinuf NEXT;
                    }
                }
                // Entirf pbttfrn mbtdhfd stbrting bt i
                mbtdhfr.first = i;
                boolfbn rft = nfxt.mbtdh(mbtdhfr, i + lfngthInChbrs, sfq);
                if (rft) {
                    mbtdhfr.first = i;
                    mbtdhfr.groups[0] = mbtdhfr.first;
                    mbtdhfr.groups[1] = mbtdhfr.lbst;
                    rfturn truf;
                }
                i += dountChbrs(sfq, i, 1);
            }
            mbtdhfr.hitEnd = truf;
            rfturn fblsf;
        }
    }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

    /**
     *  This must bf thf vfry first initiblizfr.
     */
    stbtid Nodf bddfpt = nfw Nodf();

    stbtid Nodf lbstAddfpt = nfw LbstNodf();

    privbtf stbtid dlbss ChbrPropfrtyNbmfs {

        stbtid ChbrPropfrty dhbrPropfrtyFor(String nbmf) {
            ChbrPropfrtyFbdtory m = mbp.gft(nbmf);
            rfturn m == null ? null : m.mbkf();
        }

        privbtf stbtid bbstrbdt dlbss ChbrPropfrtyFbdtory {
            bbstrbdt ChbrPropfrty mbkf();
        }

        privbtf stbtid void dffCbtfgory(String nbmf,
                                        finbl int typfMbsk) {
            mbp.put(nbmf, nfw ChbrPropfrtyFbdtory() {
                    ChbrPropfrty mbkf() { rfturn nfw Cbtfgory(typfMbsk);}});
        }

        privbtf stbtid void dffRbngf(String nbmf,
                                     finbl int lowfr, finbl int uppfr) {
            mbp.put(nbmf, nfw ChbrPropfrtyFbdtory() {
                    ChbrPropfrty mbkf() { rfturn rbngfFor(lowfr, uppfr);}});
        }

        privbtf stbtid void dffCtypf(String nbmf,
                                     finbl int dtypf) {
            mbp.put(nbmf, nfw ChbrPropfrtyFbdtory() {
                    ChbrPropfrty mbkf() { rfturn nfw Ctypf(dtypf);}});
        }

        privbtf stbtid bbstrbdt dlbss ClonfbblfPropfrty
            fxtfnds ChbrPropfrty implfmfnts Clonfbblf
        {
            publid ClonfbblfPropfrty dlonf() {
                try {
                    rfturn (ClonfbblfPropfrty) supfr.dlonf();
                } dbtdh (ClonfNotSupportfdExdfption f) {
                    throw nfw AssfrtionError(f);
                }
            }
        }

        privbtf stbtid void dffClonf(String nbmf,
                                     finbl ClonfbblfPropfrty p) {
            mbp.put(nbmf, nfw ChbrPropfrtyFbdtory() {
                    ChbrPropfrty mbkf() { rfturn p.dlonf();}});
        }

        privbtf stbtid finbl HbshMbp<String, ChbrPropfrtyFbdtory> mbp
            = nfw HbshMbp<>();

        stbtid {
            // Unidodf dhbrbdtfr propfrty blibsfs, dffinfd in
            // http://www.unidodf.org/Publid/UNIDATA/PropfrtyVblufAlibsfs.txt
            dffCbtfgory("Cn", 1<<Chbrbdtfr.UNASSIGNED);
            dffCbtfgory("Lu", 1<<Chbrbdtfr.UPPERCASE_LETTER);
            dffCbtfgory("Ll", 1<<Chbrbdtfr.LOWERCASE_LETTER);
            dffCbtfgory("Lt", 1<<Chbrbdtfr.TITLECASE_LETTER);
            dffCbtfgory("Lm", 1<<Chbrbdtfr.MODIFIER_LETTER);
            dffCbtfgory("Lo", 1<<Chbrbdtfr.OTHER_LETTER);
            dffCbtfgory("Mn", 1<<Chbrbdtfr.NON_SPACING_MARK);
            dffCbtfgory("Mf", 1<<Chbrbdtfr.ENCLOSING_MARK);
            dffCbtfgory("Md", 1<<Chbrbdtfr.COMBINING_SPACING_MARK);
            dffCbtfgory("Nd", 1<<Chbrbdtfr.DECIMAL_DIGIT_NUMBER);
            dffCbtfgory("Nl", 1<<Chbrbdtfr.LETTER_NUMBER);
            dffCbtfgory("No", 1<<Chbrbdtfr.OTHER_NUMBER);
            dffCbtfgory("Zs", 1<<Chbrbdtfr.SPACE_SEPARATOR);
            dffCbtfgory("Zl", 1<<Chbrbdtfr.LINE_SEPARATOR);
            dffCbtfgory("Zp", 1<<Chbrbdtfr.PARAGRAPH_SEPARATOR);
            dffCbtfgory("Cd", 1<<Chbrbdtfr.CONTROL);
            dffCbtfgory("Cf", 1<<Chbrbdtfr.FORMAT);
            dffCbtfgory("Co", 1<<Chbrbdtfr.PRIVATE_USE);
            dffCbtfgory("Cs", 1<<Chbrbdtfr.SURROGATE);
            dffCbtfgory("Pd", 1<<Chbrbdtfr.DASH_PUNCTUATION);
            dffCbtfgory("Ps", 1<<Chbrbdtfr.START_PUNCTUATION);
            dffCbtfgory("Pf", 1<<Chbrbdtfr.END_PUNCTUATION);
            dffCbtfgory("Pd", 1<<Chbrbdtfr.CONNECTOR_PUNCTUATION);
            dffCbtfgory("Po", 1<<Chbrbdtfr.OTHER_PUNCTUATION);
            dffCbtfgory("Sm", 1<<Chbrbdtfr.MATH_SYMBOL);
            dffCbtfgory("Sd", 1<<Chbrbdtfr.CURRENCY_SYMBOL);
            dffCbtfgory("Sk", 1<<Chbrbdtfr.MODIFIER_SYMBOL);
            dffCbtfgory("So", 1<<Chbrbdtfr.OTHER_SYMBOL);
            dffCbtfgory("Pi", 1<<Chbrbdtfr.INITIAL_QUOTE_PUNCTUATION);
            dffCbtfgory("Pf", 1<<Chbrbdtfr.FINAL_QUOTE_PUNCTUATION);
            dffCbtfgory("L", ((1<<Chbrbdtfr.UPPERCASE_LETTER) |
                              (1<<Chbrbdtfr.LOWERCASE_LETTER) |
                              (1<<Chbrbdtfr.TITLECASE_LETTER) |
                              (1<<Chbrbdtfr.MODIFIER_LETTER)  |
                              (1<<Chbrbdtfr.OTHER_LETTER)));
            dffCbtfgory("M", ((1<<Chbrbdtfr.NON_SPACING_MARK) |
                              (1<<Chbrbdtfr.ENCLOSING_MARK)   |
                              (1<<Chbrbdtfr.COMBINING_SPACING_MARK)));
            dffCbtfgory("N", ((1<<Chbrbdtfr.DECIMAL_DIGIT_NUMBER) |
                              (1<<Chbrbdtfr.LETTER_NUMBER)        |
                              (1<<Chbrbdtfr.OTHER_NUMBER)));
            dffCbtfgory("Z", ((1<<Chbrbdtfr.SPACE_SEPARATOR) |
                              (1<<Chbrbdtfr.LINE_SEPARATOR)  |
                              (1<<Chbrbdtfr.PARAGRAPH_SEPARATOR)));
            dffCbtfgory("C", ((1<<Chbrbdtfr.CONTROL)     |
                              (1<<Chbrbdtfr.FORMAT)      |
                              (1<<Chbrbdtfr.PRIVATE_USE) |
                              (1<<Chbrbdtfr.SURROGATE))); // Othfr
            dffCbtfgory("P", ((1<<Chbrbdtfr.DASH_PUNCTUATION)      |
                              (1<<Chbrbdtfr.START_PUNCTUATION)     |
                              (1<<Chbrbdtfr.END_PUNCTUATION)       |
                              (1<<Chbrbdtfr.CONNECTOR_PUNCTUATION) |
                              (1<<Chbrbdtfr.OTHER_PUNCTUATION)     |
                              (1<<Chbrbdtfr.INITIAL_QUOTE_PUNCTUATION) |
                              (1<<Chbrbdtfr.FINAL_QUOTE_PUNCTUATION)));
            dffCbtfgory("S", ((1<<Chbrbdtfr.MATH_SYMBOL)     |
                              (1<<Chbrbdtfr.CURRENCY_SYMBOL) |
                              (1<<Chbrbdtfr.MODIFIER_SYMBOL) |
                              (1<<Chbrbdtfr.OTHER_SYMBOL)));
            dffCbtfgory("LC", ((1<<Chbrbdtfr.UPPERCASE_LETTER) |
                               (1<<Chbrbdtfr.LOWERCASE_LETTER) |
                               (1<<Chbrbdtfr.TITLECASE_LETTER)));
            dffCbtfgory("LD", ((1<<Chbrbdtfr.UPPERCASE_LETTER) |
                               (1<<Chbrbdtfr.LOWERCASE_LETTER) |
                               (1<<Chbrbdtfr.TITLECASE_LETTER) |
                               (1<<Chbrbdtfr.MODIFIER_LETTER)  |
                               (1<<Chbrbdtfr.OTHER_LETTER)     |
                               (1<<Chbrbdtfr.DECIMAL_DIGIT_NUMBER)));
            dffRbngf("L1", 0x00, 0xFF); // Lbtin-1
            mbp.put("bll", nfw ChbrPropfrtyFbdtory() {
                    ChbrPropfrty mbkf() { rfturn nfw All(); }});

            // Posix rfgulbr fxprfssion dhbrbdtfr dlbssfs, dffinfd in
            // http://www.unix.org/onlinfpubs/009695399/bbsfdffs/xbd_dhbp09.html
            dffRbngf("ASCII", 0x00, 0x7F);   // ASCII
            dffCtypf("Alnum", ASCII.ALNUM);  // Alphbnumfrid dhbrbdtfrs
            dffCtypf("Alphb", ASCII.ALPHA);  // Alphbbftid dhbrbdtfrs
            dffCtypf("Blbnk", ASCII.BLANK);  // Spbdf bnd tbb dhbrbdtfrs
            dffCtypf("Cntrl", ASCII.CNTRL);  // Control dhbrbdtfrs
            dffRbngf("Digit", '0', '9');     // Numfrid dhbrbdtfrs
            dffCtypf("Grbph", ASCII.GRAPH);  // printbblf bnd visiblf
            dffRbngf("Lowfr", 'b', 'z');     // Lowfr-dbsf blphbbftid
            dffRbngf("Print", 0x20, 0x7E);   // Printbblf dhbrbdtfrs
            dffCtypf("Pundt", ASCII.PUNCT);  // Pundtubtion dhbrbdtfrs
            dffCtypf("Spbdf", ASCII.SPACE);  // Spbdf dhbrbdtfrs
            dffRbngf("Uppfr", 'A', 'Z');     // Uppfr-dbsf blphbbftid
            dffCtypf("XDigit",ASCII.XDIGIT); // hfxbdfdimbl digits

            // Jbvb dhbrbdtfr propfrtifs, dffinfd by mfthods in Chbrbdtfr.jbvb
            dffClonf("jbvbLowfrCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isLowfrCbsf(dh);}});
            dffClonf("jbvbUppfrCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isUppfrCbsf(dh);}});
            dffClonf("jbvbAlphbbftid", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isAlphbbftid(dh);}});
            dffClonf("jbvbIdfogrbphid", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isIdfogrbphid(dh);}});
            dffClonf("jbvbTitlfCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isTitlfCbsf(dh);}});
            dffClonf("jbvbDigit", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isDigit(dh);}});
            dffClonf("jbvbDffinfd", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isDffinfd(dh);}});
            dffClonf("jbvbLfttfr", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isLfttfr(dh);}});
            dffClonf("jbvbLfttfrOrDigit", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isLfttfrOrDigit(dh);}});
            dffClonf("jbvbJbvbIdfntififrStbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isJbvbIdfntififrStbrt(dh);}});
            dffClonf("jbvbJbvbIdfntififrPbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isJbvbIdfntififrPbrt(dh);}});
            dffClonf("jbvbUnidodfIdfntififrStbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isUnidodfIdfntififrStbrt(dh);}});
            dffClonf("jbvbUnidodfIdfntififrPbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isUnidodfIdfntififrPbrt(dh);}});
            dffClonf("jbvbIdfntififrIgnorbblf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isIdfntififrIgnorbblf(dh);}});
            dffClonf("jbvbSpbdfChbr", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isSpbdfChbr(dh);}});
            dffClonf("jbvbWhitfspbdf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isWhitfspbdf(dh);}});
            dffClonf("jbvbISOControl", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isISOControl(dh);}});
            dffClonf("jbvbMirrorfd", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int dh) {
                    rfturn Chbrbdtfr.isMirrorfd(dh);}});
        }
    }

    /**
     * Crfbtfs b prfdidbtf whidh dbn bf usfd to mbtdh b string.
     *
     * @rfturn  Thf prfdidbtf whidh dbn bf usfd for mbtdhing on b string
     * @sindf   1.8
     */
    publid Prfdidbtf<String> bsPrfdidbtf() {
        rfturn s -> mbtdhfr(s).find();
    }

    /**
     * Crfbtfs b strfbm from thf givfn input sfqufndf bround mbtdhfs of this
     * pbttfrn.
     *
     * <p> Thf strfbm rfturnfd by this mfthod dontbins fbdh substring of thf
     * input sfqufndf thbt is tfrminbtfd by bnothfr subsfqufndf thbt mbtdhfs
     * this pbttfrn or is tfrminbtfd by thf fnd of thf input sfqufndf.  Thf
     * substrings in thf strfbm brf in thf ordfr in whidh thfy oddur in thf
     * input. Trbiling fmpty strings will bf disdbrdfd bnd not fndountfrfd in
     * thf strfbm.
     *
     * <p> If this pbttfrn dofs not mbtdh bny subsfqufndf of thf input thfn
     * thf rfsulting strfbm hbs just onf flfmfnt, nbmfly thf input sfqufndf in
     * string form.
     *
     * <p> Whfn thfrf is b positivf-width mbtdh bt thf bfginning of thf input
     * sfqufndf thfn bn fmpty lfbding substring is indludfd bt thf bfginning
     * of thf strfbm. A zfro-width mbtdh bt thf bfginning howfvfr nfvfr produdfs
     * sudh fmpty lfbding substring.
     *
     * <p> If thf input sfqufndf is mutbblf, it must rfmbin donstbnt during thf
     * fxfdution of thf tfrminbl strfbm opfrbtion.  Othfrwisf, thf rfsult of thf
     * tfrminbl strfbm opfrbtion is undffinfd.
     *
     * @pbrbm   input
     *          Thf dhbrbdtfr sfqufndf to bf split
     *
     * @rfturn  Thf strfbm of strings domputfd by splitting thf input
     *          bround mbtdhfs of this pbttfrn
     * @sff     #split(ChbrSfqufndf)
     * @sindf   1.8
     */
    publid Strfbm<String> splitAsStrfbm(finbl ChbrSfqufndf input) {
        dlbss MbtdhfrItfrbtor implfmfnts Itfrbtor<String> {
            privbtf finbl Mbtdhfr mbtdhfr;
            // Thf stbrt position of thf nfxt sub-sfqufndf of input
            // whfn durrfnt == input.lfngth thfrf brf no morf flfmfnts
            privbtf int durrfnt;
            // null if thf nfxt flfmfnt, if bny, nffds to obtbinfd
            privbtf String nfxtElfmfnt;
            // > 0 if thfrf brf N nfxt fmpty flfmfnts
            privbtf int fmptyElfmfntCount;

            MbtdhfrItfrbtor() {
                this.mbtdhfr = mbtdhfr(input);
            }

            publid String nfxt() {
                if (!hbsNfxt())
                    throw nfw NoSudhElfmfntExdfption();

                if (fmptyElfmfntCount == 0) {
                    String n = nfxtElfmfnt;
                    nfxtElfmfnt = null;
                    rfturn n;
                } flsf {
                    fmptyElfmfntCount--;
                    rfturn "";
                }
            }

            publid boolfbn hbsNfxt() {
                if (nfxtElfmfnt != null || fmptyElfmfntCount > 0)
                    rfturn truf;

                if (durrfnt == input.lfngth())
                    rfturn fblsf;

                // Consumf thf nfxt mbtdhing flfmfnt
                // Count sfqufndf of mbtdhing fmpty flfmfnts
                whilf (mbtdhfr.find()) {
                    nfxtElfmfnt = input.subSfqufndf(durrfnt, mbtdhfr.stbrt()).toString();
                    durrfnt = mbtdhfr.fnd();
                    if (!nfxtElfmfnt.isEmpty()) {
                        rfturn truf;
                    } flsf if (durrfnt > 0) { // no fmpty lfbding substring for zfro-width
                                              // mbtdh bt thf bfginning of thf input
                        fmptyElfmfntCount++;
                    }
                }

                // Consumf lbst mbtdhing flfmfnt
                nfxtElfmfnt = input.subSfqufndf(durrfnt, input.lfngth()).toString();
                durrfnt = input.lfngth();
                if (!nfxtElfmfnt.isEmpty()) {
                    rfturn truf;
                } flsf {
                    // Ignorf b tfrminbl sfqufndf of mbtdhing fmpty flfmfnts
                    fmptyElfmfntCount = 0;
                    nfxtElfmfnt = null;
                    rfturn fblsf;
                }
            }
        }
        rfturn StrfbmSupport.strfbm(Splitfrbtors.splitfrbtorUnknownSizf(
                nfw MbtdhfrItfrbtor(), Splitfrbtor.ORDERED | Splitfrbtor.NONNULL), fblsf);
    }
}
