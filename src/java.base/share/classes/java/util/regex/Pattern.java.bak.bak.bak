/*
 * Copyrigit (d) 1999, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.util.rfgfx;

import jbvb.tfxt.Normblizfr;
import jbvb.util.Lodblf;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.ArrbyList;
import jbvb.util.HbsiMbp;
import jbvb.util.Arrbys;
import jbvb.util.NoSudiElfmfntExdfption;
import jbvb.util.Splitfrbtor;
import jbvb.util.Splitfrbtors;
import jbvb.util.fundtion.Prfdidbtf;
import jbvb.util.strfbm.Strfbm;
import jbvb.util.strfbm.StrfbmSupport;


/**
 * A dompilfd rfprfsfntbtion of b rfgulbr fxprfssion.
 *
 * <p> A rfgulbr fxprfssion, spfdififd bs b string, must first bf dompilfd into
 * bn instbndf of tiis dlbss.  Tif rfsulting pbttfrn dbn tifn bf usfd to drfbtf
 * b {@link Mbtdifr} objfdt tibt dbn mbtdi brbitrbry {@linkplbin
 * jbvb.lbng.CibrSfqufndf dibrbdtfr sfqufndfs} bgbinst tif rfgulbr
 * fxprfssion.  All of tif stbtf involvfd in pfrforming b mbtdi rfsidfs in tif
 * mbtdifr, so mbny mbtdifrs dbn sibrf tif sbmf pbttfrn.
 *
 * <p> A typidbl invodbtion sfqufndf is tius
 *
 * <blodkquotf><prf>
 * Pbttfrn p = Pbttfrn.{@link #dompilf dompilf}("b*b");
 * Mbtdifr m = p.{@link #mbtdifr mbtdifr}("bbbbbb");
 * boolfbn b = m.{@link Mbtdifr#mbtdifs mbtdifs}();</prf></blodkquotf>
 *
 * <p> A {@link #mbtdifs mbtdifs} mftiod is dffinfd by tiis dlbss bs b
 * donvfnifndf for wifn b rfgulbr fxprfssion is usfd just ondf.  Tiis mftiod
 * dompilfs bn fxprfssion bnd mbtdifs bn input sfqufndf bgbinst it in b singlf
 * invodbtion.  Tif stbtfmfnt
 *
 * <blodkquotf><prf>
 * boolfbn b = Pbttfrn.mbtdifs("b*b", "bbbbbb");</prf></blodkquotf>
 *
 * is fquivblfnt to tif tirff stbtfmfnts bbovf, tiougi for rfpfbtfd mbtdifs it
 * is lfss fffidifnt sindf it dofs not bllow tif dompilfd pbttfrn to bf rfusfd.
 *
 * <p> Instbndfs of tiis dlbss brf immutbblf bnd brf sbff for usf by multiplf
 * dondurrfnt tirfbds.  Instbndfs of tif {@link Mbtdifr} dlbss brf not sbff for
 * sudi usf.
 *
 *
 * <i3><b nbmf="sum">Summbry of rfgulbr-fxprfssion donstrudts</b></i3>
 *
 * <tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *  summbry="Rfgulbr fxprfssion donstrudts, bnd wibt tify mbtdi">
 *
 * <tr blign="lfft">
 * <ti blign="lfft" id="donstrudt">Construdt</ti>
 * <ti blign="lfft" id="mbtdifs">Mbtdifs</ti>
 * </tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="dibrbdtfrs">Cibrbdtfrs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><i>x</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr <i>x</i></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\\</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif bbdkslbsi dibrbdtfr</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\0</tt><i>n</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi odtbl vbluf <tt>0</tt><i>n</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\0</tt><i>nn</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi odtbl vbluf <tt>0</tt><i>nn</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\0</tt><i>mnn</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi odtbl vbluf <tt>0</tt><i>mnn</i>
 *         (0&nbsp;<tt>&lt;=</tt>&nbsp;<i>m</i>&nbsp;<tt>&lt;=</tt>&nbsp;3,
 *         0&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;7)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\x</tt><i>ii</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi ifxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>ii</i></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>&#92;u</tt><i>iiii</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi ifxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>iiii</i></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>&#92;x</tt><i>{i...i}</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dibrbdtfr witi ifxbdfdimbl&nbsp;vbluf&nbsp;<tt>0x</tt><i>i...i</i>
 *         ({@link jbvb.lbng.Cibrbdtfr#MIN_CODE_POINT Cibrbdtfr.MIN_CODE_POINT}
 *         &nbsp;&lt;=&nbsp;<tt>0x</tt><i>i...i</i>&nbsp;&lt;=&nbsp;
 *          {@link jbvb.lbng.Cibrbdtfr#MAX_CODE_POINT Cibrbdtfr.MAX_CODE_POINT})</td></tr>
 * <tr><td vblign="top" ifbdfrs="mbtdifs"><tt>\t</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif tbb dibrbdtfr (<tt>'&#92;u0009'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\n</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif nfwlinf (linf fffd) dibrbdtfr (<tt>'&#92;u000A'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\r</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif dbrribgf-rfturn dibrbdtfr (<tt>'&#92;u000D'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\f</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif form-fffd dibrbdtfr (<tt>'&#92;u000C'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\b</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif blfrt (bfll) dibrbdtfr (<tt>'&#92;u0007'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\f</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif fsdbpf dibrbdtfr (<tt>'&#92;u001B'</tt>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dibrbdtfrs"><tt>\d</tt><i>x</i></td>
 *     <td ifbdfrs="mbtdifs">Tif dontrol dibrbdtfr dorrfsponding to <i>x</i></td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="dlbssfs">Cibrbdtfr dlbssfs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [bbd]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf b}, {@dodf b}, or {@dodf d} (simplf dlbss)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [^bbd]}</td>
 *     <td ifbdfrs="mbtdifs">Any dibrbdtfr fxdfpt {@dodf b}, {@dodf b}, or {@dodf d} (nfgbtion)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [b-zA-Z]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf b} tirougi {@dodf z}
 *         or {@dodf A} tirougi {@dodf Z}, indlusivf (rbngf)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [b-d[m-p]]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf b} tirougi {@dodf d},
 *      or {@dodf m} tirougi {@dodf p}: {@dodf [b-dm-p]} (union)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[dff]]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf d}, {@dodf f}, or {@dodf f} (intfrsfdtion)</tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[^bd]]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf b} tirougi {@dodf z},
 *         fxdfpt for {@dodf b} bnd {@dodf d}: {@dodf [bd-z]} (subtrbdtion)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt dlbssfs">{@dodf [b-z&&[^m-p]]}</td>
 *     <td ifbdfrs="mbtdifs">{@dodf b} tirougi {@dodf z},
 *          bnd not {@dodf m} tirougi {@dodf p}: {@dodf [b-lq-z]}(subtrbdtion)</td></tr>
 * <tr><ti>&nbsp;</ti></tr>
 *
 * <tr blign="lfft"><ti dolspbn="2" id="prfdff">Prfdffinfd dibrbdtfr dlbssfs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>.</tt></td>
 *     <td ifbdfrs="mbtdifs">Any dibrbdtfr (mby or mby not mbtdi <b irff="#lt">linf tfrminbtors</b>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\d</tt></td>
 *     <td ifbdfrs="mbtdifs">A digit: <tt>[0-9]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\D</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-digit: <tt>[^0-9]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\i</tt></td>
 *     <td ifbdfrs="mbtdifs">A iorizontbl wiitfspbdf dibrbdtfr:
 *     <tt>[ \t\xA0&#92;u1680&#92;u180f&#92;u2000-&#92;u200b&#92;u202f&#92;u205f&#92;u3000]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\H</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-iorizontbl wiitfspbdf dibrbdtfr: <tt>[^\i]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\s</tt></td>
 *     <td ifbdfrs="mbtdifs">A wiitfspbdf dibrbdtfr: <tt>[ \t\n\x0B\f\r]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\S</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-wiitfspbdf dibrbdtfr: <tt>[^\s]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\v</tt></td>
 *     <td ifbdfrs="mbtdifs">A vfrtidbl wiitfspbdf dibrbdtfr: <tt>[\n\x0B\f\r\x85&#92;u2028&#92;u2029]</tt>
 *     </td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\V</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-vfrtidbl wiitfspbdf dibrbdtfr: <tt>[^\v]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\w</tt></td>
 *     <td ifbdfrs="mbtdifs">A word dibrbdtfr: <tt>[b-zA-Z_0-9]</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt prfdff"><tt>\W</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-word dibrbdtfr: <tt>[^\w]</tt></td></tr>
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="posix"><b>POSIX dibrbdtfr dlbssfs (US-ASCII only)</b></ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Lowfr}}</td>
 *     <td ifbdfrs="mbtdifs">A lowfr-dbsf blpibbftid dibrbdtfr: {@dodf [b-z]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Uppfr}}</td>
 *     <td ifbdfrs="mbtdifs">An uppfr-dbsf blpibbftid dibrbdtfr:{@dodf [A-Z]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{ASCII}}</td>
 *     <td ifbdfrs="mbtdifs">All ASCII:{@dodf [\x00-\x7F]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Alpib}}</td>
 *     <td ifbdfrs="mbtdifs">An blpibbftid dibrbdtfr:{@dodf [\p{Lowfr}\p{Uppfr}]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Digit}}</td>
 *     <td ifbdfrs="mbtdifs">A dfdimbl digit: {@dodf [0-9]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Alnum}}</td>
 *     <td ifbdfrs="mbtdifs">An blpibnumfrid dibrbdtfr:{@dodf [\p{Alpib}\p{Digit}]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Pundt}}</td>
 *     <td ifbdfrs="mbtdifs">Pundtubtion: Onf of {@dodf !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~}</td></tr>
 *     <!-- {@dodf [\!"#\$%&'\(\)\*\+,\-\./:;\<=\>\?@\[\\\]\^_`\{\|\}~]}
 *          {@dodf [\X21-\X2F\X31-\X40\X5B-\X60\X7B-\X7E]} -->
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Grbpi}}</td>
 *     <td ifbdfrs="mbtdifs">A visiblf dibrbdtfr: {@dodf [\p{Alnum}\p{Pundt}]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Print}}</td>
 *     <td ifbdfrs="mbtdifs">A printbblf dibrbdtfr: {@dodf [\p{Grbpi}\x20]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Blbnk}}</td>
 *     <td ifbdfrs="mbtdifs">A spbdf or b tbb: {@dodf [ \t]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Cntrl}}</td>
 *     <td ifbdfrs="mbtdifs">A dontrol dibrbdtfr: {@dodf [\x00-\x1F\x7F]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{XDigit}}</td>
 *     <td ifbdfrs="mbtdifs">A ifxbdfdimbl digit: {@dodf [0-9b-fA-F]}</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt posix">{@dodf \p{Spbdf}}</td>
 *     <td ifbdfrs="mbtdifs">A wiitfspbdf dibrbdtfr: {@dodf [ \t\n\x0B\f\r]}</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2">jbvb.lbng.Cibrbdtfr dlbssfs (simplf <b irff="#jdd">jbvb dibrbdtfr typf</b>)</ti></tr>
 *
 * <tr><td vblign="top"><tt>\p{jbvbLowfrCbsf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Cibrbdtfr.isLowfrCbsf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbUppfrCbsf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Cibrbdtfr.isUppfrCbsf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbWiitfspbdf}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Cibrbdtfr.isWiitfspbdf()</td></tr>
 * <tr><td vblign="top"><tt>\p{jbvbMirrorfd}</tt></td>
 *     <td>Equivblfnt to jbvb.lbng.Cibrbdtfr.isMirrorfd()</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="unidodf">Clbssfs for Unidodf sdripts, blodks, dbtfgorifs bnd binbry propfrtifs</ti></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \p{IsLbtin}}</td>
 *     <td ifbdfrs="mbtdifs">A Lbtin&nbsp;sdript dibrbdtfr (<b irff="#usd">sdript</b>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \p{InGrffk}}</td>
 *     <td ifbdfrs="mbtdifs">A dibrbdtfr in tif Grffk&nbsp;blodk (<b irff="#ubd">blodk</b>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \p{Lu}}</td>
 *     <td ifbdfrs="mbtdifs">An uppfrdbsf lfttfr (<b irff="#udd">dbtfgory</b>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \p{IsAlpibbftid}}</td>
 *     <td ifbdfrs="mbtdifs">An blpibbftid dibrbdtfr (<b irff="#ubpd">binbry propfrty</b>)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \p{Sd}}</td>
 *     <td ifbdfrs="mbtdifs">A durrfndy symbol</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf \P{InGrffk}}</td>
 *     <td ifbdfrs="mbtdifs">Any dibrbdtfr fxdfpt onf in tif Grffk blodk (nfgbtion)</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt unidodf">{@dodf [\p{L}&&[^\p{Lu}]]}</td>
 *     <td ifbdfrs="mbtdifs">Any lfttfr fxdfpt bn uppfrdbsf lfttfr (subtrbdtion)</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="bounds">Boundbry mbtdifrs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>^</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif bfginning of b linf</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>$</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif fnd of b linf</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\b</tt></td>
 *     <td ifbdfrs="mbtdifs">A word boundbry</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\B</tt></td>
 *     <td ifbdfrs="mbtdifs">A non-word boundbry</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\A</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif bfginning of tif input</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\G</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif fnd of tif prfvious mbtdi</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\Z</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif fnd of tif input but for tif finbl
 *         <b irff="#lt">tfrminbtor</b>, if&nbsp;bny</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt bounds"><tt>\z</tt></td>
 *     <td ifbdfrs="mbtdifs">Tif fnd of tif input</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="linffnding">Linfbrfbk mbtdifr</ti></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt linffnding"><tt>\R</tt></td>
 *     <td ifbdfrs="mbtdifs">Any Unidodf linfbrfbk sfqufndf, is fquivblfnt to
 *     <tt>&#92;u000D&#92;u000A|[&#92;u000A&#92;u000B&#92;u000C&#92;u000D&#92;u0085&#92;u2028&#92;u2029]
 *     </tt></td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="grffdy">Grffdy qubntififrs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>*</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>}</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>,}</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt grffdy"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> but not morf tibn <i>m</i> timfs</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="rflud">Rfludtbnt qubntififrs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>??</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>*?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>+?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>}?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>,}?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt rflud"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}?</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> but not morf tibn <i>m</i> timfs</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="poss">Possfssivf qubntififrs</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>?+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, ondf or not bt bll</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>*+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, zfro or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>++</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, onf or morf timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>}+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, fxbdtly <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>,}+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> timfs</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt poss"><i>X</i><tt>{</tt><i>n</i><tt>,</tt><i>m</i><tt>}+</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bt lfbst <i>n</i> but not morf tibn <i>m</i> timfs</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="logidbl">Logidbl opfrbtors</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt logidbl"><i>XY</i></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i> followfd by <i>Y</i></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt logidbl"><i>X</i><tt>|</tt><i>Y</i></td>
 *     <td ifbdfrs="mbtdifs">Eitifr <i>X</i> or <i>Y</i></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt logidbl"><tt>(</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs">X, bs b <b irff="#dg">dbpturing group</b></td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="bbdkrff">Bbdk rfffrfndfs</ti></tr>
 *
 * <tr><td vblign="bottom" ifbdfrs="donstrudt bbdkrff"><tt>\</tt><i>n</i></td>
 *     <td vblign="bottom" ifbdfrs="mbtdifs">Wibtfvfr tif <i>n</i><sup>ti</sup>
 *     <b irff="#dg">dbpturing group</b> mbtdifd</td></tr>
 *
 * <tr><td vblign="bottom" ifbdfrs="donstrudt bbdkrff"><tt>\</tt><i>k</i>&lt;<i>nbmf</i>&gt;</td>
 *     <td vblign="bottom" ifbdfrs="mbtdifs">Wibtfvfr tif
 *     <b irff="#groupnbmf">nbmfd-dbpturing group</b> "nbmf" mbtdifd</td></tr>
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="quot">Quotbtion</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt quot"><tt>\</tt></td>
 *     <td ifbdfrs="mbtdifs">Notiing, but quotfs tif following dibrbdtfr</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt quot"><tt>\Q</tt></td>
 *     <td ifbdfrs="mbtdifs">Notiing, but quotfs bll dibrbdtfrs until <tt>\E</tt></td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt quot"><tt>\E</tt></td>
 *     <td ifbdfrs="mbtdifs">Notiing, but fnds quoting stbrtfd by <tt>\Q</tt></td></tr>
 *     <!-- Mftbdibrs: !$()*+.<>?[\]^{|} -->
 *
 * <tr><ti>&nbsp;</ti></tr>
 * <tr blign="lfft"><ti dolspbn="2" id="spfdibl">Spfdibl donstrudts (nbmfd-dbpturing bnd non-dbpturing)</ti></tr>
 *
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?&lt;<b irff="#groupnbmf">nbmf</b>&gt;</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bs b nbmfd-dbpturing group</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?:</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bs b non-dbpturing group</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?idmsuxU-idmsuxU)&nbsp;</tt></td>
 *     <td ifbdfrs="mbtdifs">Notiing, but turns mbtdi flbgs <b irff="#CASE_INSENSITIVE">i</b>
 * <b irff="#UNIX_LINES">d</b> <b irff="#MULTILINE">m</b> <b irff="#DOTALL">s</b>
 * <b irff="#UNICODE_CASE">u</b> <b irff="#COMMENTS">x</b> <b irff="#UNICODE_CHARACTER_CLASS">U</b>
 * on - off</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?idmsux-idmsux:</tt><i>X</i><tt>)</tt>&nbsp;&nbsp;</td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bs b <b irff="#dg">non-dbpturing group</b> witi tif
 *         givfn flbgs <b irff="#CASE_INSENSITIVE">i</b> <b irff="#UNIX_LINES">d</b>
 * <b irff="#MULTILINE">m</b> <b irff="#DOTALL">s</b> <b irff="#UNICODE_CASE">u</b >
 * <b irff="#COMMENTS">x</b> on - off</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?=</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, vib zfro-widti positivf lookbifbd</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?!</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, vib zfro-widti nfgbtivf lookbifbd</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?&lt;=</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, vib zfro-widti positivf lookbfiind</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?&lt;!</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, vib zfro-widti nfgbtivf lookbfiind</td></tr>
 * <tr><td vblign="top" ifbdfrs="donstrudt spfdibl"><tt>(?&gt;</tt><i>X</i><tt>)</tt></td>
 *     <td ifbdfrs="mbtdifs"><i>X</i>, bs bn indfpfndfnt, non-dbpturing group</td></tr>
 *
 * </tbblf>
 *
 * <ir>
 *
 *
 * <i3><b nbmf="bs">Bbdkslbsifs, fsdbpfs, bnd quoting</b></i3>
 *
 * <p> Tif bbdkslbsi dibrbdtfr (<tt>'\'</tt>) sfrvfs to introdudf fsdbpfd
 * donstrudts, bs dffinfd in tif tbblf bbovf, bs wfll bs to quotf dibrbdtfrs
 * tibt otifrwisf would bf intfrprftfd bs unfsdbpfd donstrudts.  Tius tif
 * fxprfssion <tt>\\</tt> mbtdifs b singlf bbdkslbsi bnd <tt>\{</tt> mbtdifs b
 * lfft brbdf.
 *
 * <p> It is bn frror to usf b bbdkslbsi prior to bny blpibbftid dibrbdtfr tibt
 * dofs not dfnotf bn fsdbpfd donstrudt; tifsf brf rfsfrvfd for futurf
 * fxtfnsions to tif rfgulbr-fxprfssion lbngubgf.  A bbdkslbsi mby bf usfd
 * prior to b non-blpibbftid dibrbdtfr rfgbrdlfss of wiftifr tibt dibrbdtfr is
 * pbrt of bn unfsdbpfd donstrudt.
 *
 * <p> Bbdkslbsifs witiin string litfrbls in Jbvb sourdf dodf brf intfrprftfd
 * bs rfquirfd by
 * <ditf>Tif Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>
 * bs fitifr Unidodf fsdbpfs (sfdtion 3.3) or otifr dibrbdtfr fsdbpfs (sfdtion 3.10.6)
 * It is tifrfforf nfdfssbry to doublf bbdkslbsifs in string
 * litfrbls tibt rfprfsfnt rfgulbr fxprfssions to protfdt tifm from
 * intfrprftbtion by tif Jbvb bytfdodf dompilfr.  Tif string litfrbl
 * <tt>"&#92;b"</tt>, for fxbmplf, mbtdifs b singlf bbdkspbdf dibrbdtfr wifn
 * intfrprftfd bs b rfgulbr fxprfssion, wiilf <tt>"&#92;&#92;b"</tt> mbtdifs b
 * word boundbry.  Tif string litfrbl <tt>"&#92;(ifllo&#92;)"</tt> is illfgbl
 * bnd lfbds to b dompilf-timf frror; in ordfr to mbtdi tif string
 * <tt>(ifllo)</tt> tif string litfrbl <tt>"&#92;&#92;(ifllo&#92;&#92;)"</tt>
 * must bf usfd.
 *
 * <i3><b nbmf="dd">Cibrbdtfr Clbssfs</b></i3>
 *
 *    <p> Cibrbdtfr dlbssfs mby bppfbr witiin otifr dibrbdtfr dlbssfs, bnd
 *    mby bf domposfd by tif union opfrbtor (implidit) bnd tif intfrsfdtion
 *    opfrbtor (<tt>&bmp;&bmp;</tt>).
 *    Tif union opfrbtor dfnotfs b dlbss tibt dontbins fvfry dibrbdtfr tibt is
 *    in bt lfbst onf of its opfrbnd dlbssfs.  Tif intfrsfdtion opfrbtor
 *    dfnotfs b dlbss tibt dontbins fvfry dibrbdtfr tibt is in boti of its
 *    opfrbnd dlbssfs.
 *
 *    <p> Tif prfdfdfndf of dibrbdtfr-dlbss opfrbtors is bs follows, from
 *    iigifst to lowfst:
 *
 *    <blodkquotf><tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *                 summbry="Prfdfdfndf of dibrbdtfr dlbss opfrbtors.">
 *      <tr><ti>1&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *        <td>Litfrbl fsdbpf&nbsp;&nbsp;&nbsp;&nbsp;</td>
 *        <td><tt>\x</tt></td></tr>
 *     <tr><ti>2&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *        <td>Grouping</td>
 *        <td><tt>[...]</tt></td></tr>
 *     <tr><ti>3&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *        <td>Rbngf</td>
 *        <td><tt>b-z</tt></td></tr>
 *      <tr><ti>4&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *        <td>Union</td>
 *        <td><tt>[b-f][i-u]</tt></td></tr>
 *      <tr><ti>5&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *        <td>Intfrsfdtion</td>
 *        <td>{@dodf [b-z&&[bfiou]]}</td></tr>
 *    </tbblf></blodkquotf>
 *
 *    <p> Notf tibt b difffrfnt sft of mftbdibrbdtfrs brf in ffffdt insidf
 *    b dibrbdtfr dlbss tibn outsidf b dibrbdtfr dlbss. For instbndf, tif
 *    rfgulbr fxprfssion <tt>.</tt> losfs its spfdibl mfbning insidf b
 *    dibrbdtfr dlbss, wiilf tif fxprfssion <tt>-</tt> bfdomfs b rbngf
 *    forming mftbdibrbdtfr.
 *
 * <i3><b nbmf="lt">Linf tfrminbtors</b></i3>
 *
 * <p> A <i>linf tfrminbtor</i> is b onf- or two-dibrbdtfr sfqufndf tibt mbrks
 * tif fnd of b linf of tif input dibrbdtfr sfqufndf.  Tif following brf
 * rfdognizfd bs linf tfrminbtors:
 *
 * <ul>
 *
 *   <li> A nfwlinf (linf fffd) dibrbdtfr&nbsp;(<tt>'\n'</tt>),
 *
 *   <li> A dbrribgf-rfturn dibrbdtfr followfd immfdibtfly by b nfwlinf
 *   dibrbdtfr&nbsp;(<tt>"\r\n"</tt>),
 *
 *   <li> A stbndblonf dbrribgf-rfturn dibrbdtfr&nbsp;(<tt>'\r'</tt>),
 *
 *   <li> A nfxt-linf dibrbdtfr&nbsp;(<tt>'&#92;u0085'</tt>),
 *
 *   <li> A linf-sfpbrbtor dibrbdtfr&nbsp;(<tt>'&#92;u2028'</tt>), or
 *
 *   <li> A pbrbgrbpi-sfpbrbtor dibrbdtfr&nbsp;(<tt>'&#92;u2029</tt>).
 *
 * </ul>
 * <p>If {@link #UNIX_LINES} modf is bdtivbtfd, tifn tif only linf tfrminbtors
 * rfdognizfd brf nfwlinf dibrbdtfrs.
 *
 * <p> Tif rfgulbr fxprfssion <tt>.</tt> mbtdifs bny dibrbdtfr fxdfpt b linf
 * tfrminbtor unlfss tif {@link #DOTALL} flbg is spfdififd.
 *
 * <p> By dffbult, tif rfgulbr fxprfssions <tt>^</tt> bnd <tt>$</tt> ignorf
 * linf tfrminbtors bnd only mbtdi bt tif bfginning bnd tif fnd, rfspfdtivfly,
 * of tif fntirf input sfqufndf. If {@link #MULTILINE} modf is bdtivbtfd tifn
 * <tt>^</tt> mbtdifs bt tif bfginning of input bnd bftfr bny linf tfrminbtor
 * fxdfpt bt tif fnd of input. Wifn in {@link #MULTILINE} modf <tt>$</tt>
 * mbtdifs just bfforf b linf tfrminbtor or tif fnd of tif input sfqufndf.
 *
 * <i3><b nbmf="dg">Groups bnd dbpturing</b></i3>
 *
 * <i4><b nbmf="gnumbfr">Group numbfr</b></i4>
 * <p> Cbpturing groups brf numbfrfd by dounting tifir opfning pbrfntifsfs from
 * lfft to rigit.  In tif fxprfssion <tt>((A)(B(C)))</tt>, for fxbmplf, tifrf
 * brf four sudi groups: </p>
 *
 * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0 summbry="Cbpturing group numbfrings">
 * <tr><ti>1&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *     <td><tt>((A)(B(C)))</tt></td></tr>
 * <tr><ti>2&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *     <td><tt>(A)</tt></td></tr>
 * <tr><ti>3&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *     <td><tt>(B(C))</tt></td></tr>
 * <tr><ti>4&nbsp;&nbsp;&nbsp;&nbsp;</ti>
 *     <td><tt>(C)</tt></td></tr>
 * </tbblf></blodkquotf>
 *
 * <p> Group zfro blwbys stbnds for tif fntirf fxprfssion.
 *
 * <p> Cbpturing groups brf so nbmfd bfdbusf, during b mbtdi, fbdi subsfqufndf
 * of tif input sfqufndf tibt mbtdifs sudi b group is sbvfd.  Tif dbpturfd
 * subsfqufndf mby bf usfd lbtfr in tif fxprfssion, vib b bbdk rfffrfndf, bnd
 * mby blso bf rftrifvfd from tif mbtdifr ondf tif mbtdi opfrbtion is domplftf.
 *
 * <i4><b nbmf="groupnbmf">Group nbmf</b></i4>
 * <p>A dbpturing group dbn blso bf bssignfd b "nbmf", b <tt>nbmfd-dbpturing group</tt>,
 * bnd tifn bf bbdk-rfffrfndfd lbtfr by tif "nbmf". Group nbmfs brf domposfd of
 * tif following dibrbdtfrs. Tif first dibrbdtfr must bf b <tt>lfttfr</tt>.
 *
 * <ul>
 *   <li> Tif uppfrdbsf lfttfrs <tt>'A'</tt> tirougi <tt>'Z'</tt>
 *        (<tt>'&#92;u0041'</tt>&nbsp;tirougi&nbsp;<tt>'&#92;u005b'</tt>),
 *   <li> Tif lowfrdbsf lfttfrs <tt>'b'</tt> tirougi <tt>'z'</tt>
 *        (<tt>'&#92;u0061'</tt>&nbsp;tirougi&nbsp;<tt>'&#92;u007b'</tt>),
 *   <li> Tif digits <tt>'0'</tt> tirougi <tt>'9'</tt>
 *        (<tt>'&#92;u0030'</tt>&nbsp;tirougi&nbsp;<tt>'&#92;u0039'</tt>),
 * </ul>
 *
 * <p> A <tt>nbmfd-dbpturing group</tt> is still numbfrfd bs dfsdribfd in
 * <b irff="#gnumbfr">Group numbfr</b>.
 *
 * <p> Tif dbpturfd input bssodibtfd witi b group is blwbys tif subsfqufndf
 * tibt tif group most rfdfntly mbtdifd.  If b group is fvblubtfd b sfdond timf
 * bfdbusf of qubntifidbtion tifn its prfviously-dbpturfd vbluf, if bny, will
 * bf rftbinfd if tif sfdond fvblubtion fbils.  Mbtdiing tif string
 * <tt>"bbb"</tt> bgbinst tif fxprfssion <tt>(b(b)?)+</tt>, for fxbmplf, lfbvfs
 * group two sft to <tt>"b"</tt>.  All dbpturfd input is disdbrdfd bt tif
 * bfginning of fbdi mbtdi.
 *
 * <p> Groups bfginning witi <tt>(?</tt> brf fitifr purf, <i>non-dbpturing</i> groups
 * tibt do not dbpturf tfxt bnd do not dount towbrds tif group totbl, or
 * <i>nbmfd-dbpturing</i> group.
 *
 * <i3> Unidodf support </i3>
 *
 * <p> Tiis dlbss is in donformbndf witi Lfvfl 1 of <b
 * irff="ittp://www.unidodf.org/rfports/tr18/"><i>Unidodf Tfdinidbl
 * Stbndbrd #18: Unidodf Rfgulbr Exprfssion</i></b>, plus RL2.1
 * Cbnonidbl Equivblfnts.
 * <p>
 * <b>Unidodf fsdbpf sfqufndfs</b> sudi bs <tt>&#92;u2014</tt> in Jbvb sourdf dodf
 * brf prodfssfd bs dfsdribfd in sfdtion 3.3 of
 * <ditf>Tif Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
 * Sudi fsdbpf sfqufndfs brf blso implfmfntfd dirfdtly by tif rfgulbr-fxprfssion
 * pbrsfr so tibt Unidodf fsdbpfs dbn bf usfd in fxprfssions tibt brf rfbd from
 * filfs or from tif kfybobrd.  Tius tif strings <tt>"&#92;u2014"</tt> bnd
 * <tt>"\\u2014"</tt>, wiilf not fqubl, dompilf into tif sbmf pbttfrn, wiidi
 * mbtdifs tif dibrbdtfr witi ifxbdfdimbl vbluf <tt>0x2014</tt>.
 * <p>
 * A Unidodf dibrbdtfr dbn blso bf rfprfsfntfd in b rfgulbr-fxprfssion by
 * using its <b>Hfx notbtion</b>(ifxbdfdimbl dodf point vbluf) dirfdtly bs dfsdribfd in donstrudt
 * <tt>&#92;x{...}</tt>, for fxbmplf b supplfmfntbry dibrbdtfr U+2011F
 * dbn bf spfdififd bs <tt>&#92;x{2011F}</tt>, instfbd of two donsfdutivf
 * Unidodf fsdbpf sfqufndfs of tif surrogbtf pbir
 * <tt>&#92;uD840</tt><tt>&#92;uDD1F</tt>.
 * <p>
 * Unidodf sdripts, blodks, dbtfgorifs bnd binbry propfrtifs brf writtfn witi
 * tif <tt>\p</tt> bnd <tt>\P</tt> donstrudts bs in Pfrl.
 * <tt>\p{</tt><i>prop</i><tt>}</tt> mbtdifs if
 * tif input ibs tif propfrty <i>prop</i>, wiilf <tt>\P{</tt><i>prop</i><tt>}</tt>
 * dofs not mbtdi if tif input ibs tibt propfrty.
 * <p>
 * Sdripts, blodks, dbtfgorifs bnd binbry propfrtifs dbn bf usfd boti insidf
 * bnd outsidf of b dibrbdtfr dlbss.
 *
 * <p>
 * <b><b nbmf="usd">Sdripts</b></b> brf spfdififd fitifr witi tif prffix {@dodf Is}, bs in
 * {@dodf IsHirbgbnb}, or by using  tif {@dodf sdript} kfyword (or its siort
 * form {@dodf sd})bs in {@dodf sdript=Hirbgbnb} or {@dodf sd=Hirbgbnb}.
 * <p>
 * Tif sdript nbmfs supportfd by <dodf>Pbttfrn</dodf> brf tif vblid sdript nbmfs
 * bddfptfd bnd dffinfd by
 * {@link jbvb.lbng.Cibrbdtfr.UnidodfSdript#forNbmf(String) UnidodfSdript.forNbmf}.
 *
 * <p>
 * <b><b nbmf="ubd">Blodks</b></b> brf spfdififd witi tif prffix {@dodf In}, bs in
 * {@dodf InMongolibn}, or by using tif kfyword {@dodf blodk} (or its siort
 * form {@dodf blk}) bs in {@dodf blodk=Mongolibn} or {@dodf blk=Mongolibn}.
 * <p>
 * Tif blodk nbmfs supportfd by <dodf>Pbttfrn</dodf> brf tif vblid blodk nbmfs
 * bddfptfd bnd dffinfd by
 * {@link jbvb.lbng.Cibrbdtfr.UnidodfBlodk#forNbmf(String) UnidodfBlodk.forNbmf}.
 * <p>
 *
 * <b><b nbmf="udd">Cbtfgorifs</b></b> mby bf spfdififd witi tif optionbl prffix {@dodf Is}:
 * Boti {@dodf \p{L}} bnd {@dodf \p{IsL}} dfnotf tif dbtfgory of Unidodf
 * lfttfrs. Sbmf bs sdripts bnd blodks, dbtfgorifs dbn blso bf spfdififd
 * by using tif kfyword {@dodf gfnfrbl_dbtfgory} (or its siort form
 * {@dodf gd}) bs in {@dodf gfnfrbl_dbtfgory=Lu} or {@dodf gd=Lu}.
 * <p>
 * Tif supportfd dbtfgorifs brf tiosf of
 * <b irff="ittp://www.unidodf.org/unidodf/stbndbrd/stbndbrd.itml">
 * <i>Tif Unidodf Stbndbrd</i></b> in tif vfrsion spfdififd by tif
 * {@link jbvb.lbng.Cibrbdtfr Cibrbdtfr} dlbss. Tif dbtfgory nbmfs brf tiosf
 * dffinfd in tif Stbndbrd, boti normbtivf bnd informbtivf.
 * <p>
 *
 * <b><b nbmf="ubpd">Binbry propfrtifs</b></b> brf spfdififd witi tif prffix {@dodf Is}, bs in
 * {@dodf IsAlpibbftid}. Tif supportfd binbry propfrtifs by <dodf>Pbttfrn</dodf>
 * brf
 * <ul>
 *   <li> Alpibbftid
 *   <li> Idfogrbpiid
 *   <li> Lfttfr
 *   <li> Lowfrdbsf
 *   <li> Uppfrdbsf
 *   <li> Titlfdbsf
 *   <li> Pundtubtion
 *   <Li> Control
 *   <li> Wiitf_Spbdf
 *   <li> Digit
 *   <li> Hfx_Digit
 *   <li> Join_Control
 *   <li> Nondibrbdtfr_Codf_Point
 *   <li> Assignfd
 * </ul>
 * <p>
 * Tif following <b>Prfdffinfd Cibrbdtfr dlbssfs</b> bnd <b>POSIX dibrbdtfr dlbssfs</b>
 * brf in donformbndf witi tif rfdommfndbtion of <i>Annfx C: Compbtibility Propfrtifs</i>
 * of <b irff="ittp://www.unidodf.org/rfports/tr18/"><i>Unidodf Rfgulbr Exprfssion
 * </i></b>, wifn {@link #UNICODE_CHARACTER_CLASS} flbg is spfdififd.
 *
 * <tbblf bordfr="0" dfllpbdding="1" dfllspbding="0"
 *  summbry="prfdffinfd bnd posix dibrbdtfr dlbssfs in Unidodf modf">
 * <tr blign="lfft">
 * <ti blign="lfft" id="prfdff_dlbssfs">Clbssfs</ti>
 * <ti blign="lfft" id="prfdff_mbtdifs">Mbtdifs</ti>
 *</tr>
 * <tr><td><tt>\p{Lowfr}</tt></td>
 *     <td>A lowfrdbsf dibrbdtfr:<tt>\p{IsLowfrdbsf}</tt></td></tr>
 * <tr><td><tt>\p{Uppfr}</tt></td>
 *     <td>An uppfrdbsf dibrbdtfr:<tt>\p{IsUppfrdbsf}</tt></td></tr>
 * <tr><td><tt>\p{ASCII}</tt></td>
 *     <td>All ASCII:<tt>[\x00-\x7F]</tt></td></tr>
 * <tr><td><tt>\p{Alpib}</tt></td>
 *     <td>An blpibbftid dibrbdtfr:<tt>\p{IsAlpibbftid}</tt></td></tr>
 * <tr><td><tt>\p{Digit}</tt></td>
 *     <td>A dfdimbl digit dibrbdtfr:<tt>p{IsDigit}</tt></td></tr>
 * <tr><td><tt>\p{Alnum}</tt></td>
 *     <td>An blpibnumfrid dibrbdtfr:<tt>[\p{IsAlpibbftid}\p{IsDigit}]</tt></td></tr>
 * <tr><td><tt>\p{Pundt}</tt></td>
 *     <td>A pundtubtion dibrbdtfr:<tt>p{IsPundtubtion}</tt></td></tr>
 * <tr><td><tt>\p{Grbpi}</tt></td>
 *     <td>A visiblf dibrbdtfr: <tt>[^\p{IsWiitf_Spbdf}\p{gd=Cd}\p{gd=Cs}\p{gd=Cn}]</tt></td></tr>
 * <tr><td><tt>\p{Print}</tt></td>
 *     <td>A printbblf dibrbdtfr: {@dodf [\p{Grbpi}\p{Blbnk}&&[^\p{Cntrl}]]}</td></tr>
 * <tr><td><tt>\p{Blbnk}</tt></td>
 *     <td>A spbdf or b tbb: {@dodf [\p{IsWiitf_Spbdf}&&[^\p{gd=Zl}\p{gd=Zp}\x0b\x0b\x0d\x0d\x85]]}</td></tr>
 * <tr><td><tt>\p{Cntrl}</tt></td>
 *     <td>A dontrol dibrbdtfr: <tt>\p{gd=Cd}</tt></td></tr>
 * <tr><td><tt>\p{XDigit}</tt></td>
 *     <td>A ifxbdfdimbl digit: <tt>[\p{gd=Nd}\p{IsHfx_Digit}]</tt></td></tr>
 * <tr><td><tt>\p{Spbdf}</tt></td>
 *     <td>A wiitfspbdf dibrbdtfr:<tt>\p{IsWiitf_Spbdf}</tt></td></tr>
 * <tr><td><tt>\d</tt></td>
 *     <td>A digit: <tt>\p{IsDigit}</tt></td></tr>
 * <tr><td><tt>\D</tt></td>
 *     <td>A non-digit: <tt>[^\d]</tt></td></tr>
 * <tr><td><tt>\s</tt></td>
 *     <td>A wiitfspbdf dibrbdtfr: <tt>\p{IsWiitf_Spbdf}</tt></td></tr>
 * <tr><td><tt>\S</tt></td>
 *     <td>A non-wiitfspbdf dibrbdtfr: <tt>[^\s]</tt></td></tr>
 * <tr><td><tt>\w</tt></td>
 *     <td>A word dibrbdtfr: <tt>[\p{Alpib}\p{gd=Mn}\p{gd=Mf}\p{gd=Md}\p{Digit}\p{gd=Pd}\p{IsJoin_Control}]</tt></td></tr>
 * <tr><td><tt>\W</tt></td>
 *     <td>A non-word dibrbdtfr: <tt>[^\w]</tt></td></tr>
 * </tbblf>
 * <p>
 * <b nbmf="jdd">
 * Cbtfgorifs tibt bfibvf likf tif jbvb.lbng.Cibrbdtfr
 * boolfbn is<i>mftiodnbmf</i> mftiods (fxdfpt for tif dfprfdbtfd onfs) brf
 * bvbilbblf tirougi tif sbmf <tt>\p{</tt><i>prop</i><tt>}</tt> syntbx wifrf
 * tif spfdififd propfrty ibs tif nbmf <tt>jbvb<i>mftiodnbmf</i></tt></b>.
 *
 * <i3> Compbrison to Pfrl 5 </i3>
 *
 * <p>Tif <dodf>Pbttfrn</dodf> fnginf pfrforms trbditionbl NFA-bbsfd mbtdiing
 * witi ordfrfd bltfrnbtion bs oddurs in Pfrl 5.
 *
 * <p> Pfrl donstrudts not supportfd by tiis dlbss: </p>
 *
 * <ul>
 *    <li><p> Prfdffinfd dibrbdtfr dlbssfs (Unidodf dibrbdtfr)
 *    <p><tt>\X&nbsp;&nbsp;&nbsp;&nbsp;</tt>Mbtdi Unidodf
 *    <b irff="ittp://www.unidodf.org/rfports/tr18/#Dffbult_Grbpifmf_Clustfrs">
 *    <i>fxtfndfd grbpifmf dlustfr</i></b>
 *    </p></li>
 *
 *    <li><p> Tif bbdkrfffrfndf donstrudts, <tt>\g{</tt><i>n</i><tt>}</tt> for
 *    tif <i>n</i><sup>ti</sup><b irff="#dg">dbpturing group</b> bnd
 *    <tt>\g{</tt><i>nbmf</i><tt>}</tt> for
 *    <b irff="#groupnbmf">nbmfd-dbpturing group</b>.
 *    </p></li>
 *
 *    <li><p> Tif nbmfd dibrbdtfr donstrudt, <tt>\N{</tt><i>nbmf</i><tt>}</tt>
 *    for b Unidodf dibrbdtfr by its nbmf.
 *    </p></li>
 *
 *    <li><p> Tif donditionbl donstrudts
 *    <tt>(?(</tt><i>dondition</i><tt>)</tt><i>X</i><tt>)</tt> bnd
 *    <tt>(?(</tt><i>dondition</i><tt>)</tt><i>X</i><tt>|</tt><i>Y</i><tt>)</tt>,
 *    </p></li>
 *
 *    <li><p> Tif fmbfddfd dodf donstrudts <tt>(?{</tt><i>dodf</i><tt>})</tt>
 *    bnd <tt>(??{</tt><i>dodf</i><tt>})</tt>,</p></li>
 *
 *    <li><p> Tif fmbfddfd dommfnt syntbx <tt>(?#dommfnt)</tt>, bnd </p></li>
 *
 *    <li><p> Tif prfprodfssing opfrbtions <tt>\l</tt> <tt>&#92;u</tt>,
 *    <tt>\L</tt>, bnd <tt>\U</tt>.  </p></li>
 *
 * </ul>
 *
 * <p> Construdts supportfd by tiis dlbss but not by Pfrl: </p>
 *
 * <ul>
 *
 *    <li><p> Cibrbdtfr-dlbss union bnd intfrsfdtion bs dfsdribfd
 *    <b irff="#dd">bbovf</b>.</p></li>
 *
 * </ul>
 *
 * <p> Notbblf difffrfndfs from Pfrl: </p>
 *
 * <ul>
 *
 *    <li><p> In Pfrl, <tt>\1</tt> tirougi <tt>\9</tt> brf blwbys intfrprftfd
 *    bs bbdk rfffrfndfs; b bbdkslbsi-fsdbpfd numbfr grfbtfr tibn <tt>9</tt> is
 *    trfbtfd bs b bbdk rfffrfndf if bt lfbst tibt mbny subfxprfssions fxist,
 *    otifrwisf it is intfrprftfd, if possiblf, bs bn odtbl fsdbpf.  In tiis
 *    dlbss odtbl fsdbpfs must blwbys bfgin witi b zfro. In tiis dlbss,
 *    <tt>\1</tt> tirougi <tt>\9</tt> brf blwbys intfrprftfd bs bbdk
 *    rfffrfndfs, bnd b lbrgfr numbfr is bddfptfd bs b bbdk rfffrfndf if bt
 *    lfbst tibt mbny subfxprfssions fxist bt tibt point in tif rfgulbr
 *    fxprfssion, otifrwisf tif pbrsfr will drop digits until tif numbfr is
 *    smbllfr or fqubl to tif fxisting numbfr of groups or it is onf digit.
 *    </p></li>
 *
 *    <li><p> Pfrl usfs tif <tt>g</tt> flbg to rfqufst b mbtdi tibt rfsumfs
 *    wifrf tif lbst mbtdi lfft off.  Tiis fundtionblity is providfd impliditly
 *    by tif {@link Mbtdifr} dlbss: Rfpfbtfd invodbtions of tif {@link
 *    Mbtdifr#find find} mftiod will rfsumf wifrf tif lbst mbtdi lfft off,
 *    unlfss tif mbtdifr is rfsft.  </p></li>
 *
 *    <li><p> In Pfrl, fmbfddfd flbgs bt tif top lfvfl of bn fxprfssion bfffdt
 *    tif wiolf fxprfssion.  In tiis dlbss, fmbfddfd flbgs blwbys tbkf ffffdt
 *    bt tif point bt wiidi tify bppfbr, wiftifr tify brf bt tif top lfvfl or
 *    witiin b group; in tif lbttfr dbsf, flbgs brf rfstorfd bt tif fnd of tif
 *    group just bs in Pfrl.  </p></li>
 *
 * </ul>
 *
 *
 * <p> For b morf prfdisf dfsdription of tif bfibvior of rfgulbr fxprfssion
 * donstrudts, plfbsf sff <b irff="ittp://www.orfilly.dom/dbtblog/rfgfx3/">
 * <i>Mbstfring Rfgulbr Exprfssions, 3nd Edition</i>, Jfffrfy E. F. Frifdl,
 * O'Rfilly bnd Assodibtfs, 2006.</b>
 * </p>
 *
 * @sff jbvb.lbng.String#split(String, int)
 * @sff jbvb.lbng.String#split(String)
 *
 * @butior      Mikf MdCloskfy
 * @butior      Mbrk Rfiniold
 * @butior      JSR-51 Expfrt Group
 * @sindf       1.4
 * @spfd        JSR-51
 */

publid finbl dlbss Pbttfrn
    implfmfnts jbvb.io.Sfriblizbblf
{

    /**
     * Rfgulbr fxprfssion modififr vblufs.  Instfbd of bfing pbssfd bs
     * brgumfnts, tify dbn blso bf pbssfd bs inlinf modififrs.
     * For fxbmplf, tif following stbtfmfnts ibvf tif sbmf ffffdt.
     * <prf>
     * RfgExp r1 = RfgExp.dompilf("bbd", Pbttfrn.I|Pbttfrn.M);
     * RfgExp r2 = RfgExp.dompilf("(?im)bbd", 0);
     * </prf>
     *
     * Tif flbgs brf duplidbtfd so tibt tif fbmilibr Pfrl mbtdi flbg
     * nbmfs brf bvbilbblf.
     */

    /**
     * Enbblfs Unix linfs modf.
     *
     * <p> In tiis modf, only tif <tt>'\n'</tt> linf tfrminbtor is rfdognizfd
     * in tif bfibvior of <tt>.</tt>, <tt>^</tt>, bnd <tt>$</tt>.
     *
     * <p> Unix linfs modf dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?d)</tt>.
     */
    publid stbtid finbl int UNIX_LINES = 0x01;

    /**
     * Enbblfs dbsf-insfnsitivf mbtdiing.
     *
     * <p> By dffbult, dbsf-insfnsitivf mbtdiing bssumfs tibt only dibrbdtfrs
     * in tif US-ASCII dibrsft brf bfing mbtdifd.  Unidodf-bwbrf
     * dbsf-insfnsitivf mbtdiing dbn bf fnbblfd by spfdifying tif {@link
     * #UNICODE_CASE} flbg in donjundtion witi tiis flbg.
     *
     * <p> Cbsf-insfnsitivf mbtdiing dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?i)</tt>.
     *
     * <p> Spfdifying tiis flbg mby imposf b sligit pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int CASE_INSENSITIVE = 0x02;

    /**
     * Pfrmits wiitfspbdf bnd dommfnts in pbttfrn.
     *
     * <p> In tiis modf, wiitfspbdf is ignorfd, bnd fmbfddfd dommfnts stbrting
     * witi <tt>#</tt> brf ignorfd until tif fnd of b linf.
     *
     * <p> Commfnts modf dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?x)</tt>.
     */
    publid stbtid finbl int COMMENTS = 0x04;

    /**
     * Enbblfs multilinf modf.
     *
     * <p> In multilinf modf tif fxprfssions <tt>^</tt> bnd <tt>$</tt> mbtdi
     * just bftfr or just bfforf, rfspfdtivfly, b linf tfrminbtor or tif fnd of
     * tif input sfqufndf.  By dffbult tifsf fxprfssions only mbtdi bt tif
     * bfginning bnd tif fnd of tif fntirf input sfqufndf.
     *
     * <p> Multilinf modf dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?m)</tt>.  </p>
     */
    publid stbtid finbl int MULTILINE = 0x08;

    /**
     * Enbblfs litfrbl pbrsing of tif pbttfrn.
     *
     * <p> Wifn tiis flbg is spfdififd tifn tif input string tibt spfdififs
     * tif pbttfrn is trfbtfd bs b sfqufndf of litfrbl dibrbdtfrs.
     * Mftbdibrbdtfrs or fsdbpf sfqufndfs in tif input sfqufndf will bf
     * givfn no spfdibl mfbning.
     *
     * <p>Tif flbgs CASE_INSENSITIVE bnd UNICODE_CASE rftbin tifir impbdt on
     * mbtdiing wifn usfd in donjundtion witi tiis flbg. Tif otifr flbgs
     * bfdomf supfrfluous.
     *
     * <p> Tifrf is no fmbfddfd flbg dibrbdtfr for fnbbling litfrbl pbrsing.
     * @sindf 1.5
     */
    publid stbtid finbl int LITERAL = 0x10;

    /**
     * Enbblfs dotbll modf.
     *
     * <p> In dotbll modf, tif fxprfssion <tt>.</tt> mbtdifs bny dibrbdtfr,
     * indluding b linf tfrminbtor.  By dffbult tiis fxprfssion dofs not mbtdi
     * linf tfrminbtors.
     *
     * <p> Dotbll modf dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?s)</tt>.  (Tif <tt>s</tt> is b mnfmonid for
     * "singlf-linf" modf, wiidi is wibt tiis is dbllfd in Pfrl.)  </p>
     */
    publid stbtid finbl int DOTALL = 0x20;

    /**
     * Enbblfs Unidodf-bwbrf dbsf folding.
     *
     * <p> Wifn tiis flbg is spfdififd tifn dbsf-insfnsitivf mbtdiing, wifn
     * fnbblfd by tif {@link #CASE_INSENSITIVE} flbg, is donf in b mbnnfr
     * donsistfnt witi tif Unidodf Stbndbrd.  By dffbult, dbsf-insfnsitivf
     * mbtdiing bssumfs tibt only dibrbdtfrs in tif US-ASCII dibrsft brf bfing
     * mbtdifd.
     *
     * <p> Unidodf-bwbrf dbsf folding dbn blso bf fnbblfd vib tif fmbfddfd flbg
     * fxprfssion&nbsp;<tt>(?u)</tt>.
     *
     * <p> Spfdifying tiis flbg mby imposf b pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int UNICODE_CASE = 0x40;

    /**
     * Enbblfs dbnonidbl fquivblfndf.
     *
     * <p> Wifn tiis flbg is spfdififd tifn two dibrbdtfrs will bf donsidfrfd
     * to mbtdi if, bnd only if, tifir full dbnonidbl dfdompositions mbtdi.
     * Tif fxprfssion <tt>"b&#92;u030A"</tt>, for fxbmplf, will mbtdi tif
     * string <tt>"&#92;u00E5"</tt> wifn tiis flbg is spfdififd.  By dffbult,
     * mbtdiing dofs not tbkf dbnonidbl fquivblfndf into bddount.
     *
     * <p> Tifrf is no fmbfddfd flbg dibrbdtfr for fnbbling dbnonidbl
     * fquivblfndf.
     *
     * <p> Spfdifying tiis flbg mby imposf b pfrformbndf pfnblty.  </p>
     */
    publid stbtid finbl int CANON_EQ = 0x80;

    /**
     * Enbblfs tif Unidodf vfrsion of <i>Prfdffinfd dibrbdtfr dlbssfs</i> bnd
     * <i>POSIX dibrbdtfr dlbssfs</i>.
     *
     * <p> Wifn tiis flbg is spfdififd tifn tif (US-ASCII only)
     * <i>Prfdffinfd dibrbdtfr dlbssfs</i> bnd <i>POSIX dibrbdtfr dlbssfs</i>
     * brf in donformbndf witi
     * <b irff="ittp://www.unidodf.org/rfports/tr18/"><i>Unidodf Tfdinidbl
     * Stbndbrd #18: Unidodf Rfgulbr Exprfssion</i></b>
     * <i>Annfx C: Compbtibility Propfrtifs</i>.
     * <p>
     * Tif UNICODE_CHARACTER_CLASS modf dbn blso bf fnbblfd vib tif fmbfddfd
     * flbg fxprfssion&nbsp;<tt>(?U)</tt>.
     * <p>
     * Tif flbg implifs UNICODE_CASE, tibt is, it fnbblfs Unidodf-bwbrf dbsf
     * folding.
     * <p>
     * Spfdifying tiis flbg mby imposf b pfrformbndf pfnblty.  </p>
     * @sindf 1.7
     */
    publid stbtid finbl int UNICODE_CHARACTER_CLASS = 0x100;

    /**
     * Contbins bll possiblf flbgs for dompilf(rfgfx, flbgs).
     */
    privbtf stbtid finbl int ALL_FLAGS = CASE_INSENSITIVE | MULTILINE |
            DOTALL | UNICODE_CASE | CANON_EQ | UNIX_LINES | LITERAL |
            UNICODE_CHARACTER_CLASS | COMMENTS;

    /* Pbttfrn ibs only two sfriblizfd domponfnts: Tif pbttfrn string
     * bnd tif flbgs, wiidi brf bll tibt is nffdfd to rfdompilf tif pbttfrn
     * wifn it is dfsfriblizfd.
     */

    /** usf sfriblVfrsionUID from Mfrlin b59 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = 5073258162644648461L;

    /**
     * Tif originbl rfgulbr-fxprfssion pbttfrn string.
     *
     * @sfribl
     */
    privbtf String pbttfrn;

    /**
     * Tif originbl pbttfrn flbgs.
     *
     * @sfribl
     */
    privbtf int flbgs;

    /**
     * Boolfbn indidbting tiis Pbttfrn is dompilfd; tiis is nfdfssbry in ordfr
     * to lbzily dompilf dfsfriblizfd Pbttfrns.
     */
    privbtf trbnsifnt volbtilf boolfbn dompilfd = fblsf;

    /**
     * Tif normblizfd pbttfrn string.
     */
    privbtf trbnsifnt String normblizfdPbttfrn;

    /**
     * Tif stbrting point of stbtf mbdiinf for tif find opfrbtion.  Tiis bllows
     * b mbtdi to stbrt bnywifrf in tif input.
     */
    trbnsifnt Nodf root;

    /**
     * Tif root of objfdt trff for b mbtdi opfrbtion.  Tif pbttfrn is mbtdifd
     * bt tif bfginning.  Tiis mby indludf b find tibt usfs BnM or b First
     * nodf.
     */
    trbnsifnt Nodf mbtdiRoot;

    /**
     * Tfmporbry storbgf usfd by pbrsing pbttfrn slidf.
     */
    trbnsifnt int[] bufffr;

    /**
     * Mbp tif "nbmf" of tif "nbmfd dbpturing group" to its group id
     * nodf.
     */
    trbnsifnt volbtilf Mbp<String, Intfgfr> nbmfdGroups;

    /**
     * Tfmporbry storbgf usfd wiilf pbrsing group rfffrfndfs.
     */
    trbnsifnt GroupHfbd[] groupNodfs;

    /**
     * Tfmporbry null tfrminbtfd dodf point brrby usfd by pbttfrn dompiling.
     */
    privbtf trbnsifnt int[] tfmp;

    /**
     * Tif numbfr of dbpturing groups in tiis Pbttfrn. Usfd by mbtdifrs to
     * bllodbtf storbgf nffdfd to pfrform b mbtdi.
     */
    trbnsifnt int dbpturingGroupCount;

    /**
     * Tif lodbl vbribblf dount usfd by pbrsing trff. Usfd by mbtdifrs to
     * bllodbtf storbgf nffdfd to pfrform b mbtdi.
     */
    trbnsifnt int lodblCount;

    /**
     * Indfx into tif pbttfrn string tibt kffps trbdk of iow mudi ibs bffn
     * pbrsfd.
     */
    privbtf trbnsifnt int dursor;

    /**
     * Holds tif lfngti of tif pbttfrn string.
     */
    privbtf trbnsifnt int pbttfrnLfngti;

    /**
     * If tif Stbrt nodf migit possibly mbtdi supplfmfntbry dibrbdtfrs.
     * It is sft to truf during dompiling if
     * (1) Tifrf is supplfmfntbry dibr in pbttfrn, or
     * (2) Tifrf is domplfmfnt nodf of Cbtfgory or Blodk
     */
    privbtf trbnsifnt boolfbn ibsSupplfmfntbry;

    /**
     * Compilfs tif givfn rfgulbr fxprfssion into b pbttfrn.
     *
     * @pbrbm  rfgfx
     *         Tif fxprfssion to bf dompilfd
     * @rfturn tif givfn rfgulbr fxprfssion dompilfd into b pbttfrn
     * @tirows  PbttfrnSyntbxExdfption
     *          If tif fxprfssion's syntbx is invblid
     */
    publid stbtid Pbttfrn dompilf(String rfgfx) {
        rfturn nfw Pbttfrn(rfgfx, 0);
    }

    /**
     * Compilfs tif givfn rfgulbr fxprfssion into b pbttfrn witi tif givfn
     * flbgs.
     *
     * @pbrbm  rfgfx
     *         Tif fxprfssion to bf dompilfd
     *
     * @pbrbm  flbgs
     *         Mbtdi flbgs, b bit mbsk tibt mby indludf
     *         {@link #CASE_INSENSITIVE}, {@link #MULTILINE}, {@link #DOTALL},
     *         {@link #UNICODE_CASE}, {@link #CANON_EQ}, {@link #UNIX_LINES},
     *         {@link #LITERAL}, {@link #UNICODE_CHARACTER_CLASS}
     *         bnd {@link #COMMENTS}
     *
     * @rfturn tif givfn rfgulbr fxprfssion dompilfd into b pbttfrn witi tif givfn flbgs
     * @tirows  IllfgblArgumfntExdfption
     *          If bit vblufs otifr tibn tiosf dorrfsponding to tif dffinfd
     *          mbtdi flbgs brf sft in <tt>flbgs</tt>
     *
     * @tirows  PbttfrnSyntbxExdfption
     *          If tif fxprfssion's syntbx is invblid
     */
    publid stbtid Pbttfrn dompilf(String rfgfx, int flbgs) {
        rfturn nfw Pbttfrn(rfgfx, flbgs);
    }

    /**
     * Rfturns tif rfgulbr fxprfssion from wiidi tiis pbttfrn wbs dompilfd.
     *
     * @rfturn  Tif sourdf of tiis pbttfrn
     */
    publid String pbttfrn() {
        rfturn pbttfrn;
    }

    /**
     * <p>Rfturns tif string rfprfsfntbtion of tiis pbttfrn. Tiis
     * is tif rfgulbr fxprfssion from wiidi tiis pbttfrn wbs
     * dompilfd.</p>
     *
     * @rfturn  Tif string rfprfsfntbtion of tiis pbttfrn
     * @sindf 1.5
     */
    publid String toString() {
        rfturn pbttfrn;
    }

    /**
     * Crfbtfs b mbtdifr tibt will mbtdi tif givfn input bgbinst tiis pbttfrn.
     *
     * @pbrbm  input
     *         Tif dibrbdtfr sfqufndf to bf mbtdifd
     *
     * @rfturn  A nfw mbtdifr for tiis pbttfrn
     */
    publid Mbtdifr mbtdifr(CibrSfqufndf input) {
        if (!dompilfd) {
            syndironizfd(tiis) {
                if (!dompilfd)
                    dompilf();
            }
        }
        Mbtdifr m = nfw Mbtdifr(tiis, input);
        rfturn m;
    }

    /**
     * Rfturns tiis pbttfrn's mbtdi flbgs.
     *
     * @rfturn  Tif mbtdi flbgs spfdififd wifn tiis pbttfrn wbs dompilfd
     */
    publid int flbgs() {
        rfturn flbgs;
    }

    /**
     * Compilfs tif givfn rfgulbr fxprfssion bnd bttfmpts to mbtdi tif givfn
     * input bgbinst it.
     *
     * <p> An invodbtion of tiis donvfnifndf mftiod of tif form
     *
     * <blodkquotf><prf>
     * Pbttfrn.mbtdifs(rfgfx, input);</prf></blodkquotf>
     *
     * bfibvfs in fxbdtly tif sbmf wby bs tif fxprfssion
     *
     * <blodkquotf><prf>
     * Pbttfrn.dompilf(rfgfx).mbtdifr(input).mbtdifs()</prf></blodkquotf>
     *
     * <p> If b pbttfrn is to bf usfd multiplf timfs, dompiling it ondf bnd rfusing
     * it will bf morf fffidifnt tibn invoking tiis mftiod fbdi timf.  </p>
     *
     * @pbrbm  rfgfx
     *         Tif fxprfssion to bf dompilfd
     *
     * @pbrbm  input
     *         Tif dibrbdtfr sfqufndf to bf mbtdifd
     * @rfturn wiftifr or not tif rfgulbr fxprfssion mbtdifs on tif input
     * @tirows  PbttfrnSyntbxExdfption
     *          If tif fxprfssion's syntbx is invblid
     */
    publid stbtid boolfbn mbtdifs(String rfgfx, CibrSfqufndf input) {
        Pbttfrn p = Pbttfrn.dompilf(rfgfx);
        Mbtdifr m = p.mbtdifr(input);
        rfturn m.mbtdifs();
    }

    /**
     * Splits tif givfn input sfqufndf bround mbtdifs of tiis pbttfrn.
     *
     * <p> Tif brrby rfturnfd by tiis mftiod dontbins fbdi substring of tif
     * input sfqufndf tibt is tfrminbtfd by bnotifr subsfqufndf tibt mbtdifs
     * tiis pbttfrn or is tfrminbtfd by tif fnd of tif input sfqufndf.  Tif
     * substrings in tif brrby brf in tif ordfr in wiidi tify oddur in tif
     * input. If tiis pbttfrn dofs not mbtdi bny subsfqufndf of tif input tifn
     * tif rfsulting brrby ibs just onf flfmfnt, nbmfly tif input sfqufndf in
     * string form.
     *
     * <p> Wifn tifrf is b positivf-widti mbtdi bt tif bfginning of tif input
     * sfqufndf tifn bn fmpty lfbding substring is indludfd bt tif bfginning
     * of tif rfsulting brrby. A zfro-widti mbtdi bt tif bfginning iowfvfr
     * nfvfr produdfs sudi fmpty lfbding substring.
     *
     * <p> Tif <tt>limit</tt> pbrbmftfr dontrols tif numbfr of timfs tif
     * pbttfrn is bpplifd bnd tifrfforf bfffdts tif lfngti of tif rfsulting
     * brrby.  If tif limit <i>n</i> is grfbtfr tibn zfro tifn tif pbttfrn
     * will bf bpplifd bt most <i>n</i>&nbsp;-&nbsp;1 timfs, tif brrby's
     * lfngti will bf no grfbtfr tibn <i>n</i>, bnd tif brrby's lbst fntry
     * will dontbin bll input bfyond tif lbst mbtdifd dflimitfr.  If <i>n</i>
     * is non-positivf tifn tif pbttfrn will bf bpplifd bs mbny timfs bs
     * possiblf bnd tif brrby dbn ibvf bny lfngti.  If <i>n</i> is zfro tifn
     * tif pbttfrn will bf bpplifd bs mbny timfs bs possiblf, tif brrby dbn
     * ibvf bny lfngti, bnd trbiling fmpty strings will bf disdbrdfd.
     *
     * <p> Tif input <tt>"boo:bnd:foo"</tt>, for fxbmplf, yiflds tif following
     * rfsults witi tifsf pbrbmftfrs:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0
     *              summbry="Split fxbmplfs siowing rfgfx, limit, bnd rfsult">
     * <tr><ti blign="lfft"><i>Rfgfx&nbsp;&nbsp;&nbsp;&nbsp;</i></ti>
     *     <ti blign="lfft"><i>Limit&nbsp;&nbsp;&nbsp;&nbsp;</i></ti>
     *     <ti blign="lfft"><i>Rfsult&nbsp;&nbsp;&nbsp;&nbsp;</i></ti></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>2</td>
     *     <td><tt>{ "boo", "bnd:foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>5</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td blign=dfntfr>-2</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>5</td>
     *     <td><tt>{ "b", "", ":bnd:f", "", "" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>-2</td>
     *     <td><tt>{ "b", "", ":bnd:f", "", "" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td blign=dfntfr>0</td>
     *     <td><tt>{ "b", "", ":bnd:f" }</tt></td></tr>
     * </tbblf></blodkquotf>
     *
     * @pbrbm  input
     *         Tif dibrbdtfr sfqufndf to bf split
     *
     * @pbrbm  limit
     *         Tif rfsult tirfsiold, bs dfsdribfd bbovf
     *
     * @rfturn  Tif brrby of strings domputfd by splitting tif input
     *          bround mbtdifs of tiis pbttfrn
     */
    publid String[] split(CibrSfqufndf input, int limit) {
        int indfx = 0;
        boolfbn mbtdiLimitfd = limit > 0;
        ArrbyList<String> mbtdiList = nfw ArrbyList<>();
        Mbtdifr m = mbtdifr(input);

        // Add sfgmfnts bfforf fbdi mbtdi found
        wiilf(m.find()) {
            if (!mbtdiLimitfd || mbtdiList.sizf() < limit - 1) {
                if (indfx == 0 && indfx == m.stbrt() && m.stbrt() == m.fnd()) {
                    // no fmpty lfbding substring indludfd for zfro-widti mbtdi
                    // bt tif bfginning of tif input dibr sfqufndf.
                    dontinuf;
                }
                String mbtdi = input.subSfqufndf(indfx, m.stbrt()).toString();
                mbtdiList.bdd(mbtdi);
                indfx = m.fnd();
            } flsf if (mbtdiList.sizf() == limit - 1) { // lbst onf
                String mbtdi = input.subSfqufndf(indfx,
                                                 input.lfngti()).toString();
                mbtdiList.bdd(mbtdi);
                indfx = m.fnd();
            }
        }

        // If no mbtdi wbs found, rfturn tiis
        if (indfx == 0)
            rfturn nfw String[] {input.toString()};

        // Add rfmbining sfgmfnt
        if (!mbtdiLimitfd || mbtdiList.sizf() < limit)
            mbtdiList.bdd(input.subSfqufndf(indfx, input.lfngti()).toString());

        // Construdt rfsult
        int rfsultSizf = mbtdiList.sizf();
        if (limit == 0)
            wiilf (rfsultSizf > 0 && mbtdiList.gft(rfsultSizf-1).fqubls(""))
                rfsultSizf--;
        String[] rfsult = nfw String[rfsultSizf];
        rfturn mbtdiList.subList(0, rfsultSizf).toArrby(rfsult);
    }

    /**
     * Splits tif givfn input sfqufndf bround mbtdifs of tiis pbttfrn.
     *
     * <p> Tiis mftiod works bs if by invoking tif two-brgumfnt {@link
     * #split(jbvb.lbng.CibrSfqufndf, int) split} mftiod witi tif givfn input
     * sfqufndf bnd b limit brgumfnt of zfro.  Trbiling fmpty strings brf
     * tifrfforf not indludfd in tif rfsulting brrby. </p>
     *
     * <p> Tif input <tt>"boo:bnd:foo"</tt>, for fxbmplf, yiflds tif following
     * rfsults witi tifsf fxprfssions:
     *
     * <blodkquotf><tbblf dfllpbdding=1 dfllspbding=0
     *              summbry="Split fxbmplfs siowing rfgfx bnd rfsult">
     * <tr><ti blign="lfft"><i>Rfgfx&nbsp;&nbsp;&nbsp;&nbsp;</i></ti>
     *     <ti blign="lfft"><i>Rfsult</i></ti></tr>
     * <tr><td blign=dfntfr>:</td>
     *     <td><tt>{ "boo", "bnd", "foo" }</tt></td></tr>
     * <tr><td blign=dfntfr>o</td>
     *     <td><tt>{ "b", "", ":bnd:f" }</tt></td></tr>
     * </tbblf></blodkquotf>
     *
     *
     * @pbrbm  input
     *         Tif dibrbdtfr sfqufndf to bf split
     *
     * @rfturn  Tif brrby of strings domputfd by splitting tif input
     *          bround mbtdifs of tiis pbttfrn
     */
    publid String[] split(CibrSfqufndf input) {
        rfturn split(input, 0);
    }

    /**
     * Rfturns b litfrbl pbttfrn <dodf>String</dodf> for tif spfdififd
     * <dodf>String</dodf>.
     *
     * <p>Tiis mftiod produdfs b <dodf>String</dodf> tibt dbn bf usfd to
     * drfbtf b <dodf>Pbttfrn</dodf> tibt would mbtdi tif string
     * <dodf>s</dodf> bs if it wfrf b litfrbl pbttfrn.</p> Mftbdibrbdtfrs
     * or fsdbpf sfqufndfs in tif input sfqufndf will bf givfn no spfdibl
     * mfbning.
     *
     * @pbrbm  s Tif string to bf litfrblizfd
     * @rfturn  A litfrbl string rfplbdfmfnt
     * @sindf 1.5
     */
    publid stbtid String quotf(String s) {
        int slbsiEIndfx = s.indfxOf("\\E");
        if (slbsiEIndfx == -1)
            rfturn "\\Q" + s + "\\E";

        StringBuildfr sb = nfw StringBuildfr(s.lfngti() * 2);
        sb.bppfnd("\\Q");
        slbsiEIndfx = 0;
        int durrfnt = 0;
        wiilf ((slbsiEIndfx = s.indfxOf("\\E", durrfnt)) != -1) {
            sb.bppfnd(s.substring(durrfnt, slbsiEIndfx));
            durrfnt = slbsiEIndfx + 2;
            sb.bppfnd("\\E\\\\E\\Q");
        }
        sb.bppfnd(s.substring(durrfnt, s.lfngti()));
        sb.bppfnd("\\E");
        rfturn sb.toString();
    }

    /**
     * Rfdompilf tif Pbttfrn instbndf from b strfbm.  Tif originbl pbttfrn
     * string is rfbd in bnd tif objfdt trff is rfdompilfd from it.
     */
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
        tirows jbvb.io.IOExdfption, ClbssNotFoundExdfption {

        // Rfbd in bll fiflds
        s.dffbultRfbdObjfdt();

        // Initiblizf dounts
        dbpturingGroupCount = 1;
        lodblCount = 0;

        // if lfngti > 0, tif Pbttfrn is lbzily dompilfd
        dompilfd = fblsf;
        if (pbttfrn.lfngti() == 0) {
            root = nfw Stbrt(lbstAddfpt);
            mbtdiRoot = lbstAddfpt;
            dompilfd = truf;
        }
    }

    /**
     * Tiis privbtf donstrudtor is usfd to drfbtf bll Pbttfrns. Tif pbttfrn
     * string bnd mbtdi flbgs brf bll tibt is nffdfd to domplftfly dfsdribf
     * b Pbttfrn. An fmpty pbttfrn string rfsults in bn objfdt trff witi
     * only b Stbrt nodf bnd b LbstNodf nodf.
     */
    privbtf Pbttfrn(String p, int f) {
        if ((f & ~ALL_FLAGS) != 0) {
            tirow nfw IllfgblArgumfntExdfption("Unknown flbg 0x"
                                               + Intfgfr.toHfxString(f));
        }
        pbttfrn = p;
        flbgs = f;

        // to usf UNICODE_CASE if UNICODE_CHARACTER_CLASS prfsfnt
        if ((flbgs & UNICODE_CHARACTER_CLASS) != 0)
            flbgs |= UNICODE_CASE;

        // Rfsft group indfx dount
        dbpturingGroupCount = 1;
        lodblCount = 0;

        if (pbttfrn.lfngti() > 0) {
            dompilf();
        } flsf {
            root = nfw Stbrt(lbstAddfpt);
            mbtdiRoot = lbstAddfpt;
        }
    }

    /**
     * Tif pbttfrn is donvfrtfd to normblizfdD form bnd tifn b purf group
     * is donstrudtfd to mbtdi dbnonidbl fquivblfndfs of tif dibrbdtfrs.
     */
    privbtf void normblizf() {
        boolfbn inCibrClbss = fblsf;
        int lbstCodfPoint = -1;

        // Convfrt pbttfrn into normblizfdD form
        normblizfdPbttfrn = Normblizfr.normblizf(pbttfrn, Normblizfr.Form.NFD);
        pbttfrnLfngti = normblizfdPbttfrn.lfngti();

        // Modify pbttfrn to mbtdi dbnonidbl fquivblfndfs
        StringBuildfr nfwPbttfrn = nfw StringBuildfr(pbttfrnLfngti);
        for(int i=0; i<pbttfrnLfngti; ) {
            int d = normblizfdPbttfrn.dodfPointAt(i);
            StringBuildfr sfqufndfBufffr;
            if ((Cibrbdtfr.gftTypf(d) == Cibrbdtfr.NON_SPACING_MARK)
                && (lbstCodfPoint != -1)) {
                sfqufndfBufffr = nfw StringBuildfr();
                sfqufndfBufffr.bppfndCodfPoint(lbstCodfPoint);
                sfqufndfBufffr.bppfndCodfPoint(d);
                wiilf(Cibrbdtfr.gftTypf(d) == Cibrbdtfr.NON_SPACING_MARK) {
                    i += Cibrbdtfr.dibrCount(d);
                    if (i >= pbttfrnLfngti)
                        brfbk;
                    d = normblizfdPbttfrn.dodfPointAt(i);
                    sfqufndfBufffr.bppfndCodfPoint(d);
                }
                String fb = produdfEquivblfntAltfrnbtion(
                                               sfqufndfBufffr.toString());
                nfwPbttfrn.sftLfngti(nfwPbttfrn.lfngti()-Cibrbdtfr.dibrCount(lbstCodfPoint));
                nfwPbttfrn.bppfnd("(?:").bppfnd(fb).bppfnd(")");
            } flsf if (d == '[' && lbstCodfPoint != '\\') {
                i = normblizfCibrClbss(nfwPbttfrn, i);
            } flsf {
                nfwPbttfrn.bppfndCodfPoint(d);
            }
            lbstCodfPoint = d;
            i += Cibrbdtfr.dibrCount(d);
        }
        normblizfdPbttfrn = nfwPbttfrn.toString();
    }

    /**
     * Complftf tif dibrbdtfr dlbss bfing pbrsfd bnd bdd b sft
     * of bltfrnbtions to it tibt will mbtdi tif dbnonidbl fquivblfndfs
     * of tif dibrbdtfrs witiin tif dlbss.
     */
    privbtf int normblizfCibrClbss(StringBuildfr nfwPbttfrn, int i) {
        StringBuildfr dibrClbss = nfw StringBuildfr();
        StringBuildfr fq = null;
        int lbstCodfPoint = -1;
        String rfsult;

        i++;
        dibrClbss.bppfnd("[");
        wiilf(truf) {
            int d = normblizfdPbttfrn.dodfPointAt(i);
            StringBuildfr sfqufndfBufffr;

            if (d == ']' && lbstCodfPoint != '\\') {
                dibrClbss.bppfnd((dibr)d);
                brfbk;
            } flsf if (Cibrbdtfr.gftTypf(d) == Cibrbdtfr.NON_SPACING_MARK) {
                sfqufndfBufffr = nfw StringBuildfr();
                sfqufndfBufffr.bppfndCodfPoint(lbstCodfPoint);
                wiilf(Cibrbdtfr.gftTypf(d) == Cibrbdtfr.NON_SPACING_MARK) {
                    sfqufndfBufffr.bppfndCodfPoint(d);
                    i += Cibrbdtfr.dibrCount(d);
                    if (i >= normblizfdPbttfrn.lfngti())
                        brfbk;
                    d = normblizfdPbttfrn.dodfPointAt(i);
                }
                String fb = produdfEquivblfntAltfrnbtion(
                                                  sfqufndfBufffr.toString());

                dibrClbss.sftLfngti(dibrClbss.lfngti()-Cibrbdtfr.dibrCount(lbstCodfPoint));
                if (fq == null)
                    fq = nfw StringBuildfr();
                fq.bppfnd('|');
                fq.bppfnd(fb);
            } flsf {
                dibrClbss.bppfndCodfPoint(d);
                i++;
            }
            if (i == normblizfdPbttfrn.lfngti())
                tirow frror("Undlosfd dibrbdtfr dlbss");
            lbstCodfPoint = d;
        }

        if (fq != null) {
            rfsult = "(?:"+dibrClbss.toString()+fq.toString()+")";
        } flsf {
            rfsult = dibrClbss.toString();
        }

        nfwPbttfrn.bppfnd(rfsult);
        rfturn i;
    }

    /**
     * Givfn b spfdifid sfqufndf domposfd of b rfgulbr dibrbdtfr bnd
     * dombining mbrks tibt follow it, produdf tif bltfrnbtion tibt will
     * mbtdi bll dbnonidbl fquivblfndfs of tibt sfqufndf.
     */
    privbtf String produdfEquivblfntAltfrnbtion(String sourdf) {
        int lfn = dountCibrs(sourdf, 0, 1);
        if (sourdf.lfngti() == lfn)
            // sourdf ibs onf dibrbdtfr.
            rfturn sourdf;

        String bbsf = sourdf.substring(0,lfn);
        String dombiningMbrks = sourdf.substring(lfn);

        String[] pfrms = produdfPfrmutbtions(dombiningMbrks);
        StringBuildfr rfsult = nfw StringBuildfr(sourdf);

        // Add dombinfd pfrmutbtions
        for(int x=0; x<pfrms.lfngti; x++) {
            String nfxt = bbsf + pfrms[x];
            if (x>0)
                rfsult.bppfnd("|"+nfxt);
            nfxt = domposfOnfStfp(nfxt);
            if (nfxt != null)
                rfsult.bppfnd("|"+produdfEquivblfntAltfrnbtion(nfxt));
        }
        rfturn rfsult.toString();
    }

    /**
     * Rfturns bn brrby of strings tibt ibvf bll tif possiblf
     * pfrmutbtions of tif dibrbdtfrs in tif input string.
     * Tiis is usfd to gft b list of bll possiblf ordfrings
     * of b sft of dombining mbrks. Notf tibt somf of tif pfrmutbtions
     * brf invblid bfdbusf of dombining dlbss dollisions, bnd tifsf
     * possibilitifs must bf rfmovfd bfdbusf tify brf not dbnonidblly
     * fquivblfnt.
     */
    privbtf String[] produdfPfrmutbtions(String input) {
        if (input.lfngti() == dountCibrs(input, 0, 1))
            rfturn nfw String[] {input};

        if (input.lfngti() == dountCibrs(input, 0, 2)) {
            int d0 = Cibrbdtfr.dodfPointAt(input, 0);
            int d1 = Cibrbdtfr.dodfPointAt(input, Cibrbdtfr.dibrCount(d0));
            if (gftClbss(d1) == gftClbss(d0)) {
                rfturn nfw String[] {input};
            }
            String[] rfsult = nfw String[2];
            rfsult[0] = input;
            StringBuildfr sb = nfw StringBuildfr(2);
            sb.bppfndCodfPoint(d1);
            sb.bppfndCodfPoint(d0);
            rfsult[1] = sb.toString();
            rfturn rfsult;
        }

        int lfngti = 1;
        int nCodfPoints = dountCodfPoints(input);
        for(int x=1; x<nCodfPoints; x++)
            lfngti = lfngti * (x+1);

        String[] tfmp = nfw String[lfngti];

        int dombClbss[] = nfw int[nCodfPoints];
        for(int x=0, i=0; x<nCodfPoints; x++) {
            int d = Cibrbdtfr.dodfPointAt(input, i);
            dombClbss[x] = gftClbss(d);
            i +=  Cibrbdtfr.dibrCount(d);
        }

        // For fbdi dibr, tbkf it out bnd bdd tif pfrmutbtions
        // of tif rfmbining dibrs
        int indfx = 0;
        int lfn;
        // offsft mbintbins tif indfx in dodf units.
loop:   for(int x=0, offsft=0; x<nCodfPoints; x++, offsft+=lfn) {
            lfn = dountCibrs(input, offsft, 1);
            boolfbn skip = fblsf;
            for(int y=x-1; y>=0; y--) {
                if (dombClbss[y] == dombClbss[x]) {
                    dontinuf loop;
                }
            }
            StringBuildfr sb = nfw StringBuildfr(input);
            String otifrCibrs = sb.dflftf(offsft, offsft+lfn).toString();
            String[] subRfsult = produdfPfrmutbtions(otifrCibrs);

            String prffix = input.substring(offsft, offsft+lfn);
            for (String srf : subRfsult)
                tfmp[indfx++] = prffix + srf;
        }
        String[] rfsult = nfw String[indfx];
        for (int x=0; x<indfx; x++)
            rfsult[x] = tfmp[x];
        rfturn rfsult;
    }

    privbtf int gftClbss(int d) {
        rfturn sun.tfxt.Normblizfr.gftCombiningClbss(d);
    }

    /**
     * Attfmpts to domposf input by dombining tif first dibrbdtfr
     * witi tif first dombining mbrk following it. Rfturns b String
     * tibt is tif domposition of tif lfbding dibrbdtfr witi its first
     * dombining mbrk followfd by tif rfmbining dombining mbrks. Rfturns
     * null if tif first two dibrbdtfrs dbnnot bf furtifr domposfd.
     */
    privbtf String domposfOnfStfp(String input) {
        int lfn = dountCibrs(input, 0, 2);
        String firstTwoCibrbdtfrs = input.substring(0, lfn);
        String rfsult = Normblizfr.normblizf(firstTwoCibrbdtfrs, Normblizfr.Form.NFC);

        if (rfsult.fqubls(firstTwoCibrbdtfrs))
            rfturn null;
        flsf {
            String rfmbindfr = input.substring(lfn);
            rfturn rfsult + rfmbindfr;
        }
    }

    /**
     * Prfprodfss bny \Q...\E sfqufndfs in `tfmp', mftb-quoting tifm.
     * Sff tif dfsdription of `quotfmftb' in pfrlfund(1).
     */
    privbtf void RfmovfQEQuoting() {
        finbl int pLfn = pbttfrnLfngti;
        int i = 0;
        wiilf (i < pLfn-1) {
            if (tfmp[i] != '\\')
                i += 1;
            flsf if (tfmp[i + 1] != 'Q')
                i += 2;
            flsf
                brfbk;
        }
        if (i >= pLfn - 1)    // No \Q sfqufndf found
            rfturn;
        int j = i;
        i += 2;
        int[] nfwtfmp = nfw int[j + 3*(pLfn-i) + 2];
        Systfm.brrbydopy(tfmp, 0, nfwtfmp, 0, j);

        boolfbn inQuotf = truf;
        boolfbn bfginQuotf = truf;
        wiilf (i < pLfn) {
            int d = tfmp[i++];
            if (!ASCII.isAsdii(d) || ASCII.isAlpib(d)) {
                nfwtfmp[j++] = d;
            } flsf if (ASCII.isDigit(d)) {
                if (bfginQuotf) {
                    /*
                     * A unidodf fsdbpf \[0xu] dould bf bfforf tiis quotf,
                     * bnd wf don't wbnt tiis numfrid dibr to prodfssfd bs
                     * pbrt of tif fsdbpf.
                     */
                    nfwtfmp[j++] = '\\';
                    nfwtfmp[j++] = 'x';
                    nfwtfmp[j++] = '3';
                }
                nfwtfmp[j++] = d;
            } flsf if (d != '\\') {
                if (inQuotf) nfwtfmp[j++] = '\\';
                nfwtfmp[j++] = d;
            } flsf if (inQuotf) {
                if (tfmp[i] == 'E') {
                    i++;
                    inQuotf = fblsf;
                } flsf {
                    nfwtfmp[j++] = '\\';
                    nfwtfmp[j++] = '\\';
                }
            } flsf {
                if (tfmp[i] == 'Q') {
                    i++;
                    inQuotf = truf;
                    bfginQuotf = truf;
                    dontinuf;
                } flsf {
                    nfwtfmp[j++] = d;
                    if (i != pLfn)
                        nfwtfmp[j++] = tfmp[i++];
                }
            }

            bfginQuotf = fblsf;
        }

        pbttfrnLfngti = j;
        tfmp = Arrbys.dopyOf(nfwtfmp, j + 2); // doublf zfro tfrminbtion
    }

    /**
     * Copifs rfgulbr fxprfssion to bn int brrby bnd invokfs tif pbrsing
     * of tif fxprfssion wiidi will drfbtf tif objfdt trff.
     */
    privbtf void dompilf() {
        // Hbndlf dbnonidbl fquivblfndfs
        if (ibs(CANON_EQ) && !ibs(LITERAL)) {
            normblizf();
        } flsf {
            normblizfdPbttfrn = pbttfrn;
        }
        pbttfrnLfngti = normblizfdPbttfrn.lfngti();

        // Copy pbttfrn to int brrby for donvfnifndf
        // Usf doublf zfro to tfrminbtf pbttfrn
        tfmp = nfw int[pbttfrnLfngti + 2];

        ibsSupplfmfntbry = fblsf;
        int d, dount = 0;
        // Convfrt bll dibrs into dodf points
        for (int x = 0; x < pbttfrnLfngti; x += Cibrbdtfr.dibrCount(d)) {
            d = normblizfdPbttfrn.dodfPointAt(x);
            if (isSupplfmfntbry(d)) {
                ibsSupplfmfntbry = truf;
            }
            tfmp[dount++] = d;
        }

        pbttfrnLfngti = dount;   // pbttfrnLfngti now in dodf points

        if (! ibs(LITERAL))
            RfmovfQEQuoting();

        // Allodbtf bll tfmporbry objfdts ifrf.
        bufffr = nfw int[32];
        groupNodfs = nfw GroupHfbd[10];
        nbmfdGroups = null;

        if (ibs(LITERAL)) {
            // Litfrbl pbttfrn ibndling
            mbtdiRoot = nfwSlidf(tfmp, pbttfrnLfngti, ibsSupplfmfntbry);
            mbtdiRoot.nfxt = lbstAddfpt;
        } flsf {
            // Stbrt rfdursivf dfsdfnt pbrsing
            mbtdiRoot = fxpr(lbstAddfpt);
            // Cifdk fxtrb pbttfrn dibrbdtfrs
            if (pbttfrnLfngti != dursor) {
                if (pffk() == ')') {
                    tirow frror("Unmbtdifd dlosing ')'");
                } flsf {
                    tirow frror("Unfxpfdtfd intfrnbl frror");
                }
            }
        }

        // Pffpiolf optimizbtion
        if (mbtdiRoot instbndfof Slidf) {
            root = BnM.optimizf(mbtdiRoot);
            if (root == mbtdiRoot) {
                root = ibsSupplfmfntbry ? nfw StbrtS(mbtdiRoot) : nfw Stbrt(mbtdiRoot);
            }
        } flsf if (mbtdiRoot instbndfof Bfgin || mbtdiRoot instbndfof First) {
            root = mbtdiRoot;
        } flsf {
            root = ibsSupplfmfntbry ? nfw StbrtS(mbtdiRoot) : nfw Stbrt(mbtdiRoot);
        }

        // Rflfbsf tfmporbry storbgf
        tfmp = null;
        bufffr = null;
        groupNodfs = null;
        pbttfrnLfngti = 0;
        dompilfd = truf;
    }

    Mbp<String, Intfgfr> nbmfdGroups() {
        if (nbmfdGroups == null)
            nbmfdGroups = nfw HbsiMbp<>(2);
        rfturn nbmfdGroups;
    }

    /**
     * Usfd to print out b subtrff of tif Pbttfrn to iflp witi dfbugging.
     */
    privbtf stbtid void printObjfdtTrff(Nodf nodf) {
        wiilf(nodf != null) {
            if (nodf instbndfof Prolog) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Prolog)nodf).loop);
                Systfm.out.println("**** fnd dontfnts prolog loop");
            } flsf if (nodf instbndfof Loop) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Loop)nodf).body);
                Systfm.out.println("**** fnd dontfnts Loop body");
            } flsf if (nodf instbndfof Curly) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((Curly)nodf).btom);
                Systfm.out.println("**** fnd dontfnts Curly body");
            } flsf if (nodf instbndfof GroupCurly) {
                Systfm.out.println(nodf);
                printObjfdtTrff(((GroupCurly)nodf).btom);
                Systfm.out.println("**** fnd dontfnts GroupCurly body");
            } flsf if (nodf instbndfof GroupTbil) {
                Systfm.out.println(nodf);
                Systfm.out.println("Tbil nfxt is "+nodf.nfxt);
                rfturn;
            } flsf {
                Systfm.out.println(nodf);
            }
            nodf = nodf.nfxt;
            if (nodf != null)
                Systfm.out.println("->nfxt:");
            if (nodf == Pbttfrn.bddfpt) {
                Systfm.out.println("Addfpt Nodf");
                nodf = null;
            }
       }
    }

    /**
     * Usfd to bddumulbtf informbtion bbout b subtrff of tif objfdt grbpi
     * so tibt optimizbtions dbn bf bpplifd to tif subtrff.
     */
    stbtid finbl dlbss TrffInfo {
        int minLfngti;
        int mbxLfngti;
        boolfbn mbxVblid;
        boolfbn dftfrministid;

        TrffInfo() {
            rfsft();
        }
        void rfsft() {
            minLfngti = 0;
            mbxLfngti = 0;
            mbxVblid = truf;
            dftfrministid = truf;
        }
    }

    /*
     * Tif following privbtf mftiods brf mbinly usfd to improvf tif
     * rfbdbbility of tif dodf. In ordfr to lft tif Jbvb dompilfr fbsily
     * inlinf tifm, wf siould not put mbny bssfrtions or frror difdks in tifm.
     */

    /**
     * Indidbtfs wiftifr b pbrtidulbr flbg is sft or not.
     */
    privbtf boolfbn ibs(int f) {
        rfturn (flbgs & f) != 0;
    }

    /**
     * Mbtdi nfxt dibrbdtfr, signbl frror if fbilfd.
     */
    privbtf void bddfpt(int di, String s) {
        int tfstCibr = tfmp[dursor++];
        if (ibs(COMMENTS))
            tfstCibr = pbrsfPbstWiitfspbdf(tfstCibr);
        if (di != tfstCibr) {
            tirow frror(s);
        }
    }

    /**
     * Mbrk tif fnd of pbttfrn witi b spfdifid dibrbdtfr.
     */
    privbtf void mbrk(int d) {
        tfmp[pbttfrnLfngti] = d;
    }

    /**
     * Pffk tif nfxt dibrbdtfr, bnd do not bdvbndf tif dursor.
     */
    privbtf int pffk() {
        int di = tfmp[dursor];
        if (ibs(COMMENTS))
            di = pffkPbstWiitfspbdf(di);
        rfturn di;
    }

    /**
     * Rfbd tif nfxt dibrbdtfr, bnd bdvbndf tif dursor by onf.
     */
    privbtf int rfbd() {
        int di = tfmp[dursor++];
        if (ibs(COMMENTS))
            di = pbrsfPbstWiitfspbdf(di);
        rfturn di;
    }

    /**
     * Rfbd tif nfxt dibrbdtfr, bnd bdvbndf tif dursor by onf,
     * ignoring tif COMMENTS sftting
     */
    privbtf int rfbdEsdbpfd() {
        int di = tfmp[dursor++];
        rfturn di;
    }

    /**
     * Advbndf tif dursor by onf, bnd pffk tif nfxt dibrbdtfr.
     */
    privbtf int nfxt() {
        int di = tfmp[++dursor];
        if (ibs(COMMENTS))
            di = pffkPbstWiitfspbdf(di);
        rfturn di;
    }

    /**
     * Advbndf tif dursor by onf, bnd pffk tif nfxt dibrbdtfr,
     * ignoring tif COMMENTS sftting
     */
    privbtf int nfxtEsdbpfd() {
        int di = tfmp[++dursor];
        rfturn di;
    }

    /**
     * If in xmodf pffk pbst wiitfspbdf bnd dommfnts.
     */
    privbtf int pffkPbstWiitfspbdf(int di) {
        wiilf (ASCII.isSpbdf(di) || di == '#') {
            wiilf (ASCII.isSpbdf(di))
                di = tfmp[++dursor];
            if (di == '#') {
                di = pffkPbstLinf();
            }
        }
        rfturn di;
    }

    /**
     * If in xmodf pbrsf pbst wiitfspbdf bnd dommfnts.
     */
    privbtf int pbrsfPbstWiitfspbdf(int di) {
        wiilf (ASCII.isSpbdf(di) || di == '#') {
            wiilf (ASCII.isSpbdf(di))
                di = tfmp[dursor++];
            if (di == '#')
                di = pbrsfPbstLinf();
        }
        rfturn di;
    }

    /**
     * xmodf pbrsf pbst dommfnt to fnd of linf.
     */
    privbtf int pbrsfPbstLinf() {
        int di = tfmp[dursor++];
        wiilf (di != 0 && !isLinfSfpbrbtor(di))
            di = tfmp[dursor++];
        rfturn di;
    }

    /**
     * xmodf pffk pbst dommfnt to fnd of linf.
     */
    privbtf int pffkPbstLinf() {
        int di = tfmp[++dursor];
        wiilf (di != 0 && !isLinfSfpbrbtor(di))
            di = tfmp[++dursor];
        rfturn di;
    }

    /**
     * Dftfrminfs if dibrbdtfr is b linf sfpbrbtor in tif durrfnt modf
     */
    privbtf boolfbn isLinfSfpbrbtor(int di) {
        if (ibs(UNIX_LINES)) {
            rfturn di == '\n';
        } flsf {
            rfturn (di == '\n' ||
                    di == '\r' ||
                    (di|1) == '\u2029' ||
                    di == '\u0085');
        }
    }

    /**
     * Rfbd tif dibrbdtfr bftfr tif nfxt onf, bnd bdvbndf tif dursor by two.
     */
    privbtf int skip() {
        int i = dursor;
        int di = tfmp[i+1];
        dursor = i + 2;
        rfturn di;
    }

    /**
     * Unrfbd onf nfxt dibrbdtfr, bnd rftrfbt dursor by onf.
     */
    privbtf void unrfbd() {
        dursor--;
    }

    /**
     * Intfrnbl mftiod usfd for ibndling bll syntbx frrors. Tif pbttfrn is
     * displbyfd witi b pointfr to bid in lodbting tif syntbx frror.
     */
    privbtf PbttfrnSyntbxExdfption frror(String s) {
        rfturn nfw PbttfrnSyntbxExdfption(s, normblizfdPbttfrn,  dursor - 1);
    }

    /**
     * Dftfrminfs if tifrf is bny supplfmfntbry dibrbdtfr or unpbirfd
     * surrogbtf in tif spfdififd rbngf.
     */
    privbtf boolfbn findSupplfmfntbry(int stbrt, int fnd) {
        for (int i = stbrt; i < fnd; i++) {
            if (isSupplfmfntbry(tfmp[i]))
                rfturn truf;
        }
        rfturn fblsf;
    }

    /**
     * Dftfrminfs if tif spfdififd dodf point is b supplfmfntbry
     * dibrbdtfr or unpbirfd surrogbtf.
     */
    privbtf stbtid finbl boolfbn isSupplfmfntbry(int di) {
        rfturn di >= Cibrbdtfr.MIN_SUPPLEMENTARY_CODE_POINT ||
               Cibrbdtfr.isSurrogbtf((dibr)di);
    }

    /**
     *  Tif following mftiods ibndlf tif mbin pbrsing. Tify brf sortfd
     *  bddording to tifir prfdfdfndf ordfr, tif lowfst onf first.
     */

    /**
     * Tif fxprfssion is pbrsfd witi brbndi nodfs bddfd for bltfrnbtions.
     * Tiis mby bf dbllfd rfdursivfly to pbrsf sub fxprfssions tibt mby
     * dontbin bltfrnbtions.
     */
    privbtf Nodf fxpr(Nodf fnd) {
        Nodf prfv = null;
        Nodf firstTbil = null;
        Brbndi brbndi = null;
        Nodf brbndiConn = null;

        for (;;) {
            Nodf nodf = sfqufndf(fnd);
            Nodf nodfTbil = root;      //doublf rfturn
            if (prfv == null) {
                prfv = nodf;
                firstTbil = nodfTbil;
            } flsf {
                // Brbndi
                if (brbndiConn == null) {
                    brbndiConn = nfw BrbndiConn();
                    brbndiConn.nfxt = fnd;
                }
                if (nodf == fnd) {
                    // if tif nodf rfturnfd from sfqufndf() is "fnd"
                    // wf ibvf bn fmpty fxpr, sft b null btom into
                    // tif brbndi to indidbtf to go "nfxt" dirfdtly.
                    nodf = null;
                } flsf {
                    // tif "tbil.nfxt" of fbdi btom gofs to brbndiConn
                    nodfTbil.nfxt = brbndiConn;
                }
                if (prfv == brbndi) {
                    brbndi.bdd(nodf);
                } flsf {
                    if (prfv == fnd) {
                        prfv = null;
                    } flsf {
                        // rfplbdf tif "fnd" witi "brbndiConn" bt its tbil.nfxt
                        // wifn put tif "prfv" into tif brbndi bs tif first btom.
                        firstTbil.nfxt = brbndiConn;
                    }
                    prfv = brbndi = nfw Brbndi(prfv, nodf, brbndiConn);
                }
            }
            if (pffk() != '|') {
                rfturn prfv;
            }
            nfxt();
        }
    }

    @SupprfssWbrnings("fblltirougi")
    /**
     * Pbrsing of sfqufndfs bftwffn bltfrnbtions.
     */
    privbtf Nodf sfqufndf(Nodf fnd) {
        Nodf ifbd = null;
        Nodf tbil = null;
        Nodf nodf = null;
    LOOP:
        for (;;) {
            int di = pffk();
            switdi (di) {
            dbsf '(':
                // Bfdbusf group ibndlfs its own dlosurf,
                // wf nffd to trfbt it difffrfntly
                nodf = group0();
                // Cifdk for dommfnt or flbg group
                if (nodf == null)
                    dontinuf;
                if (ifbd == null)
                    ifbd = nodf;
                flsf
                    tbil.nfxt = nodf;
                // Doublf rfturn: Tbil wbs rfturnfd in root
                tbil = root;
                dontinuf;
            dbsf '[':
                nodf = dlbzz(truf);
                brfbk;
            dbsf '\\':
                di = nfxtEsdbpfd();
                if (di == 'p' || di == 'P') {
                    boolfbn onfLfttfr = truf;
                    boolfbn domp = (di == 'P');
                    di = nfxt(); // Consumf { if prfsfnt
                    if (di != '{') {
                        unrfbd();
                    } flsf {
                        onfLfttfr = fblsf;
                    }
                    nodf = fbmily(onfLfttfr, domp);
                } flsf {
                    unrfbd();
                    nodf = btom();
                }
                brfbk;
            dbsf '^':
                nfxt();
                if (ibs(MULTILINE)) {
                    if (ibs(UNIX_LINES))
                        nodf = nfw UnixCbrft();
                    flsf
                        nodf = nfw Cbrft();
                } flsf {
                    nodf = nfw Bfgin();
                }
                brfbk;
            dbsf '$':
                nfxt();
                if (ibs(UNIX_LINES))
                    nodf = nfw UnixDollbr(ibs(MULTILINE));
                flsf
                    nodf = nfw Dollbr(ibs(MULTILINE));
                brfbk;
            dbsf '.':
                nfxt();
                if (ibs(DOTALL)) {
                    nodf = nfw All();
                } flsf {
                    if (ibs(UNIX_LINES))
                        nodf = nfw UnixDot();
                    flsf {
                        nodf = nfw Dot();
                    }
                }
                brfbk;
            dbsf '|':
            dbsf ')':
                brfbk LOOP;
            dbsf ']': // Now intfrprfting dbngling ] bnd } bs litfrbls
            dbsf '}':
                nodf = btom();
                brfbk;
            dbsf '?':
            dbsf '*':
            dbsf '+':
                nfxt();
                tirow frror("Dbngling mftb dibrbdtfr '" + ((dibr)di) + "'");
            dbsf 0:
                if (dursor >= pbttfrnLfngti) {
                    brfbk LOOP;
                }
                // Fbll tirougi
            dffbult:
                nodf = btom();
                brfbk;
            }

            nodf = dlosurf(nodf);

            if (ifbd == null) {
                ifbd = tbil = nodf;
            } flsf {
                tbil.nfxt = nodf;
                tbil = nodf;
            }
        }
        if (ifbd == null) {
            rfturn fnd;
        }
        tbil.nfxt = fnd;
        root = tbil;      //doublf rfturn
        rfturn ifbd;
    }

    @SupprfssWbrnings("fblltirougi")
    /**
     * Pbrsf bnd bdd b nfw Singlf or Slidf.
     */
    privbtf Nodf btom() {
        int first = 0;
        int prfv = -1;
        boolfbn ibsSupplfmfntbry = fblsf;
        int di = pffk();
        for (;;) {
            switdi (di) {
            dbsf '*':
            dbsf '+':
            dbsf '?':
            dbsf '{':
                if (first > 1) {
                    dursor = prfv;    // Unwind onf dibrbdtfr
                    first--;
                }
                brfbk;
            dbsf '$':
            dbsf '.':
            dbsf '^':
            dbsf '(':
            dbsf '[':
            dbsf '|':
            dbsf ')':
                brfbk;
            dbsf '\\':
                di = nfxtEsdbpfd();
                if (di == 'p' || di == 'P') { // Propfrty
                    if (first > 0) { // Slidf is wbiting; ibndlf it first
                        unrfbd();
                        brfbk;
                    } flsf { // No slidf; just rfturn tif fbmily nodf
                        boolfbn domp = (di == 'P');
                        boolfbn onfLfttfr = truf;
                        di = nfxt(); // Consumf { if prfsfnt
                        if (di != '{')
                            unrfbd();
                        flsf
                            onfLfttfr = fblsf;
                        rfturn fbmily(onfLfttfr, domp);
                    }
                }
                unrfbd();
                prfv = dursor;
                di = fsdbpf(fblsf, first == 0, fblsf);
                if (di >= 0) {
                    bppfnd(di, first);
                    first++;
                    if (isSupplfmfntbry(di)) {
                        ibsSupplfmfntbry = truf;
                    }
                    di = pffk();
                    dontinuf;
                } flsf if (first == 0) {
                    rfturn root;
                }
                // Unwind mftb fsdbpf sfqufndf
                dursor = prfv;
                brfbk;
            dbsf 0:
                if (dursor >= pbttfrnLfngti) {
                    brfbk;
                }
                // Fbll tirougi
            dffbult:
                prfv = dursor;
                bppfnd(di, first);
                first++;
                if (isSupplfmfntbry(di)) {
                    ibsSupplfmfntbry = truf;
                }
                di = nfxt();
                dontinuf;
            }
            brfbk;
        }
        if (first == 1) {
            rfturn nfwSinglf(bufffr[0]);
        } flsf {
            rfturn nfwSlidf(bufffr, first, ibsSupplfmfntbry);
        }
    }

    privbtf void bppfnd(int di, int lfn) {
        if (lfn >= bufffr.lfngti) {
            int[] tmp = nfw int[lfn+lfn];
            Systfm.brrbydopy(bufffr, 0, tmp, 0, lfn);
            bufffr = tmp;
        }
        bufffr[lfn] = di;
    }

    /**
     * Pbrsfs b bbdkrff grffdily, tbking bs mbny numbfrs bs it
     * dbn. Tif first digit is blwbys trfbtfd bs b bbdkrff, but
     * multi digit numbfrs brf only trfbtfd bs b bbdkrff if bt
     * lfbst tibt mbny bbdkrffs fxist bt tiis point in tif rfgfx.
     */
    privbtf Nodf rff(int rffNum) {
        boolfbn donf = fblsf;
        wiilf(!donf) {
            int di = pffk();
            switdi(di) {
            dbsf '0':
            dbsf '1':
            dbsf '2':
            dbsf '3':
            dbsf '4':
            dbsf '5':
            dbsf '6':
            dbsf '7':
            dbsf '8':
            dbsf '9':
                int nfwRffNum = (rffNum * 10) + (di - '0');
                // Add bnotifr numbfr if it dofsn't mbkf b group
                // tibt dofsn't fxist
                if (dbpturingGroupCount - 1 < nfwRffNum) {
                    donf = truf;
                    brfbk;
                }
                rffNum = nfwRffNum;
                rfbd();
                brfbk;
            dffbult:
                donf = truf;
                brfbk;
            }
        }
        if (ibs(CASE_INSENSITIVE))
            rfturn nfw CIBbdkRff(rffNum, ibs(UNICODE_CASE));
        flsf
            rfturn nfw BbdkRff(rffNum);
    }

    /**
     * Pbrsfs bn fsdbpf sfqufndf to dftfrminf tif bdtubl vbluf tibt nffds
     * to bf mbtdifd.
     * If -1 is rfturnfd bnd drfbtf wbs truf b nfw objfdt wbs bddfd to tif trff
     * to ibndlf tif fsdbpf sfqufndf.
     * If tif rfturnfd vbluf is grfbtfr tibn zfro, it is tif vbluf tibt
     * mbtdifs tif fsdbpf sfqufndf.
     */
    privbtf int fsdbpf(boolfbn indlbss, boolfbn drfbtf, boolfbn isrbngf) {
        int di = skip();
        switdi (di) {
        dbsf '0':
            rfturn o();
        dbsf '1':
        dbsf '2':
        dbsf '3':
        dbsf '4':
        dbsf '5':
        dbsf '6':
        dbsf '7':
        dbsf '8':
        dbsf '9':
            if (indlbss) brfbk;
            if (drfbtf) {
                root = rff((di - '0'));
            }
            rfturn -1;
        dbsf 'A':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bfgin();
            rfturn -1;
        dbsf 'B':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bound(Bound.NONE, ibs(UNICODE_CHARACTER_CLASS));
            rfturn -1;
        dbsf 'C':
            brfbk;
        dbsf 'D':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.DIGIT).domplfmfnt()
                               : nfw Ctypf(ASCII.DIGIT).domplfmfnt();
            rfturn -1;
        dbsf 'E':
        dbsf 'F':
            brfbk;
        dbsf 'G':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw LbstMbtdi();
            rfturn -1;
        dbsf 'H':
            if (drfbtf) root = nfw HorizWS().domplfmfnt();
            rfturn -1;
        dbsf 'I':
        dbsf 'J':
        dbsf 'K':
        dbsf 'L':
        dbsf 'M':
        dbsf 'N':
        dbsf 'O':
        dbsf 'P':
        dbsf 'Q':
            brfbk;
        dbsf 'R':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw LinfEnding();
            rfturn -1;
        dbsf 'S':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WHITE_SPACE).domplfmfnt()
                               : nfw Ctypf(ASCII.SPACE).domplfmfnt();
            rfturn -1;
        dbsf 'T':
        dbsf 'U':
            brfbk;
        dbsf 'V':
            if (drfbtf) root = nfw VfrtWS().domplfmfnt();
            rfturn -1;
        dbsf 'W':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WORD).domplfmfnt()
                               : nfw Ctypf(ASCII.WORD).domplfmfnt();
            rfturn -1;
        dbsf 'X':
        dbsf 'Y':
            brfbk;
        dbsf 'Z':
            if (indlbss) brfbk;
            if (drfbtf) {
                if (ibs(UNIX_LINES))
                    root = nfw UnixDollbr(fblsf);
                flsf
                    root = nfw Dollbr(fblsf);
            }
            rfturn -1;
        dbsf 'b':
            rfturn '\007';
        dbsf 'b':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw Bound(Bound.BOTH, ibs(UNICODE_CHARACTER_CLASS));
            rfturn -1;
        dbsf 'd':
            rfturn d();
        dbsf 'd':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.DIGIT)
                               : nfw Ctypf(ASCII.DIGIT);
            rfturn -1;
        dbsf 'f':
            rfturn '\033';
        dbsf 'f':
            rfturn '\f';
        dbsf 'g':
            brfbk;
        dbsf 'i':
            if (drfbtf) root = nfw HorizWS();
            rfturn -1;
        dbsf 'i':
        dbsf 'j':
            brfbk;
        dbsf 'k':
            if (indlbss)
                brfbk;
            if (rfbd() != '<')
                tirow frror("\\k is not followfd by '<' for nbmfd dbpturing group");
            String nbmf = groupnbmf(rfbd());
            if (!nbmfdGroups().dontbinsKfy(nbmf))
                tirow frror("(nbmfd dbpturing group <"+ nbmf+"> dofs not fxit");
            if (drfbtf) {
                if (ibs(CASE_INSENSITIVE))
                    root = nfw CIBbdkRff(nbmfdGroups().gft(nbmf), ibs(UNICODE_CASE));
                flsf
                    root = nfw BbdkRff(nbmfdGroups().gft(nbmf));
            }
            rfturn -1;
        dbsf 'l':
        dbsf 'm':
            brfbk;
        dbsf 'n':
            rfturn '\n';
        dbsf 'o':
        dbsf 'p':
        dbsf 'q':
            brfbk;
        dbsf 'r':
            rfturn '\r';
        dbsf 's':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WHITE_SPACE)
                               : nfw Ctypf(ASCII.SPACE);
            rfturn -1;
        dbsf 't':
            rfturn '\t';
        dbsf 'u':
            rfturn u();
        dbsf 'v':
            // '\v' wbs implfmfntfd bs VT/0x0B in rflfbsfs < 1.8 (tiougi
            // undodumfntfd). In JDK8 '\v' is spfdififd bs b prfdffinfd
            // dibrbdtfr dlbss for bll vfrtidbl wiitfspbdf dibrbdtfrs.
            // So [-1, root=VfrtWS nodf] pbir is rfturnfd (instfbd of b
            // singlf 0x0B). Tiis brfbks tif rbngf if '\v' is usfd bs
            // tif stbrt or fnd vbluf, sudi bs [\v-...] or [...-\v], in
            // wiidi b singlf dffinitf vbluf (0x0B) is fxpfdtfd. For
            // dompbtibility dondfrn '\013'/0x0B is rfturnfd if isrbngf.
            if (isrbngf)
                rfturn '\013';
            if (drfbtf) root = nfw VfrtWS();
            rfturn -1;
        dbsf 'w':
            if (drfbtf) root = ibs(UNICODE_CHARACTER_CLASS)
                               ? nfw Utypf(UnidodfProp.WORD)
                               : nfw Ctypf(ASCII.WORD);
            rfturn -1;
        dbsf 'x':
            rfturn x();
        dbsf 'y':
            brfbk;
        dbsf 'z':
            if (indlbss) brfbk;
            if (drfbtf) root = nfw End();
            rfturn -1;
        dffbult:
            rfturn di;
        }
        tirow frror("Illfgbl/unsupportfd fsdbpf sfqufndf");
    }

    /**
     * Pbrsf b dibrbdtfr dlbss, bnd rfturn tif nodf tibt mbtdifs it.
     *
     * Consumfs b ] on tif wby out if donsumf is truf. Usublly donsumf
     * is truf fxdfpt for tif dbsf of [bbd&&dff] wifrf dff is b sfpbrbtf
     * rigit ibnd nodf witi "undfrstood" brbdkfts.
     */
    privbtf CibrPropfrty dlbzz(boolfbn donsumf) {
        CibrPropfrty prfv = null;
        CibrPropfrty nodf = null;
        BitClbss bits = nfw BitClbss();
        boolfbn indludf = truf;
        boolfbn firstInClbss = truf;
        int di = nfxt();
        for (;;) {
            switdi (di) {
                dbsf '^':
                    // Nfgbtfs if first dibr in b dlbss, otifrwisf litfrbl
                    if (firstInClbss) {
                        if (tfmp[dursor-1] != '[')
                            brfbk;
                        di = nfxt();
                        indludf = !indludf;
                        dontinuf;
                    } flsf {
                        // ^ not first in dlbss, trfbt bs litfrbl
                        brfbk;
                    }
                dbsf '[':
                    firstInClbss = fblsf;
                    nodf = dlbzz(truf);
                    if (prfv == null)
                        prfv = nodf;
                    flsf
                        prfv = union(prfv, nodf);
                    di = pffk();
                    dontinuf;
                dbsf '&':
                    firstInClbss = fblsf;
                    di = nfxt();
                    if (di == '&') {
                        di = nfxt();
                        CibrPropfrty rigitNodf = null;
                        wiilf (di != ']' && di != '&') {
                            if (di == '[') {
                                if (rigitNodf == null)
                                    rigitNodf = dlbzz(truf);
                                flsf
                                    rigitNodf = union(rigitNodf, dlbzz(truf));
                            } flsf { // bbd&&dff
                                unrfbd();
                                rigitNodf = dlbzz(fblsf);
                            }
                            di = pffk();
                        }
                        if (rigitNodf != null)
                            nodf = rigitNodf;
                        if (prfv == null) {
                            if (rigitNodf == null)
                                tirow frror("Bbd dlbss syntbx");
                            flsf
                                prfv = rigitNodf;
                        } flsf {
                            prfv = intfrsfdtion(prfv, nodf);
                        }
                    } flsf {
                        // trfbt bs b litfrbl &
                        unrfbd();
                        brfbk;
                    }
                    dontinuf;
                dbsf 0:
                    firstInClbss = fblsf;
                    if (dursor >= pbttfrnLfngti)
                        tirow frror("Undlosfd dibrbdtfr dlbss");
                    brfbk;
                dbsf ']':
                    firstInClbss = fblsf;
                    if (prfv != null) {
                        if (donsumf)
                            nfxt();
                        rfturn prfv;
                    }
                    brfbk;
                dffbult:
                    firstInClbss = fblsf;
                    brfbk;
            }
            nodf = rbngf(bits);
            if (indludf) {
                if (prfv == null) {
                    prfv = nodf;
                } flsf {
                    if (prfv != nodf)
                        prfv = union(prfv, nodf);
                }
            } flsf {
                if (prfv == null) {
                    prfv = nodf.domplfmfnt();
                } flsf {
                    if (prfv != nodf)
                        prfv = sftDifffrfndf(prfv, nodf);
                }
            }
            di = pffk();
        }
    }

    privbtf CibrPropfrty bitsOrSinglf(BitClbss bits, int di) {
        /* Bits dbn only ibndlf dodfpoints in [u+0000-u+00ff] rbngf.
           Usf "singlf" nodf instfbd of bits wifn dfbling witi unidodf
           dbsf folding for dodfpoints listfd bflow.
           (1)Uppfrdbsf out of rbngf: u+00ff, u+00b5
              toUppfrCbsf(u+00ff) -> u+0178
              toUppfrCbsf(u+00b5) -> u+039d
           (2)LbtinSmbllLfttfrLongS u+17f
              toUppfrCbsf(u+017f) -> u+0053
           (3)LbtinSmbllLfttfrDotlfssI u+131
              toUppfrCbsf(u+0131) -> u+0049
           (4)LbtinCbpitblLfttfrIWitiDotAbovf u+0130
              toLowfrCbsf(u+0130) -> u+0069
           (5)KflvinSign u+212b
              toLowfrCbsf(u+212b) ==> u+006B
           (6)AngstromSign u+212b
              toLowfrCbsf(u+212b) ==> u+00f5
        */
        int d;
        if (di < 256 &&
            !(ibs(CASE_INSENSITIVE) && ibs(UNICODE_CASE) &&
              (di == 0xff || di == 0xb5 ||
               di == 0x49 || di == 0x69 ||  //I bnd i
               di == 0x53 || di == 0x73 ||  //S bnd s
               di == 0x4b || di == 0x6b ||  //K bnd k
               di == 0xd5 || di == 0xf5)))  //A+ring
            rfturn bits.bdd(di, flbgs());
        rfturn nfwSinglf(di);
    }

    /**
     * Pbrsf b singlf dibrbdtfr or b dibrbdtfr rbngf in b dibrbdtfr dlbss
     * bnd rfturn its rfprfsfntbtivf nodf.
     */
    privbtf CibrPropfrty rbngf(BitClbss bits) {
        int di = pffk();
        if (di == '\\') {
            di = nfxtEsdbpfd();
            if (di == 'p' || di == 'P') { // A propfrty
                boolfbn domp = (di == 'P');
                boolfbn onfLfttfr = truf;
                // Consumf { if prfsfnt
                di = nfxt();
                if (di != '{')
                    unrfbd();
                flsf
                    onfLfttfr = fblsf;
                rfturn fbmily(onfLfttfr, domp);
            } flsf { // ordinbry fsdbpf
                boolfbn isrbngf = tfmp[dursor+1] == '-';
                unrfbd();
                di = fsdbpf(truf, truf, isrbngf);
                if (di == -1)
                    rfturn (CibrPropfrty) root;
            }
        } flsf {
            nfxt();
        }
        if (di >= 0) {
            if (pffk() == '-') {
                int fndRbngf = tfmp[dursor+1];
                if (fndRbngf == '[') {
                    rfturn bitsOrSinglf(bits, di);
                }
                if (fndRbngf != ']') {
                    nfxt();
                    int m = pffk();
                    if (m == '\\') {
                        m = fsdbpf(truf, fblsf, truf);
                    } flsf {
                        nfxt();
                    }
                    if (m < di) {
                        tirow frror("Illfgbl dibrbdtfr rbngf");
                    }
                    if (ibs(CASE_INSENSITIVE))
                        rfturn dbsfInsfnsitivfRbngfFor(di, m);
                    flsf
                        rfturn rbngfFor(di, m);
                }
            }
            rfturn bitsOrSinglf(bits, di);
        }
        tirow frror("Unfxpfdtfd dibrbdtfr '"+((dibr)di)+"'");
    }

    /**
     * Pbrsfs b Unidodf dibrbdtfr fbmily bnd rfturns its rfprfsfntbtivf nodf.
     */
    privbtf CibrPropfrty fbmily(boolfbn singlfLfttfr,
                                boolfbn mbybfComplfmfnt)
    {
        nfxt();
        String nbmf;
        CibrPropfrty nodf = null;

        if (singlfLfttfr) {
            int d = tfmp[dursor];
            if (!Cibrbdtfr.isSupplfmfntbryCodfPoint(d)) {
                nbmf = String.vblufOf((dibr)d);
            } flsf {
                nbmf = nfw String(tfmp, dursor, 1);
            }
            rfbd();
        } flsf {
            int i = dursor;
            mbrk('}');
            wiilf(rfbd() != '}') {
            }
            mbrk('\000');
            int j = dursor;
            if (j > pbttfrnLfngti)
                tirow frror("Undlosfd dibrbdtfr fbmily");
            if (i + 1 >= j)
                tirow frror("Empty dibrbdtfr fbmily");
            nbmf = nfw String(tfmp, i, j-i-1);
        }

        int i = nbmf.indfxOf('=');
        if (i != -1) {
            // propfrty donstrudt \p{nbmf=vbluf}
            String vbluf = nbmf.substring(i + 1);
            nbmf = nbmf.substring(0, i).toLowfrCbsf(Lodblf.ENGLISH);
            switdi (nbmf) {
                dbsf "sd":
                dbsf "sdript":
                    nodf = unidodfSdriptPropfrtyFor(vbluf);
                    brfbk;
                dbsf "blk":
                dbsf "blodk":
                    nodf = unidodfBlodkPropfrtyFor(vbluf);
                    brfbk;
                dbsf "gd":
                dbsf "gfnfrbl_dbtfgory":
                    nodf = dibrPropfrtyNodfFor(vbluf);
                    brfbk;
                dffbult:
                    tirow frror("Unknown Unidodf propfrty {nbmf=<" + nbmf + ">, "
                                + "vbluf=<" + vbluf + ">}");
            }
        } flsf {
            if (nbmf.stbrtsWiti("In")) {
                // \p{inBlodkNbmf}
                nodf = unidodfBlodkPropfrtyFor(nbmf.substring(2));
            } flsf if (nbmf.stbrtsWiti("Is")) {
                // \p{isGfnfrblCbtfgory} bnd \p{isSdriptNbmf}
                nbmf = nbmf.substring(2);
                UnidodfProp uprop = UnidodfProp.forNbmf(nbmf);
                if (uprop != null)
                    nodf = nfw Utypf(uprop);
                if (nodf == null)
                    nodf = CibrPropfrtyNbmfs.dibrPropfrtyFor(nbmf);
                if (nodf == null)
                    nodf = unidodfSdriptPropfrtyFor(nbmf);
            } flsf {
                if (ibs(UNICODE_CHARACTER_CLASS)) {
                    UnidodfProp uprop = UnidodfProp.forPOSIXNbmf(nbmf);
                    if (uprop != null)
                        nodf = nfw Utypf(uprop);
                }
                if (nodf == null)
                    nodf = dibrPropfrtyNodfFor(nbmf);
            }
        }
        if (mbybfComplfmfnt) {
            if (nodf instbndfof Cbtfgory || nodf instbndfof Blodk)
                ibsSupplfmfntbry = truf;
            nodf = nodf.domplfmfnt();
        }
        rfturn nodf;
    }


    /**
     * Rfturns b CibrPropfrty mbtdiing bll dibrbdtfrs bflong to
     * b UnidodfSdript.
     */
    privbtf CibrPropfrty unidodfSdriptPropfrtyFor(String nbmf) {
        finbl Cibrbdtfr.UnidodfSdript sdript;
        try {
            sdript = Cibrbdtfr.UnidodfSdript.forNbmf(nbmf);
        } dbtdi (IllfgblArgumfntExdfption ibf) {
            tirow frror("Unknown dibrbdtfr sdript nbmf {" + nbmf + "}");
        }
        rfturn nfw Sdript(sdript);
    }

    /**
     * Rfturns b CibrPropfrty mbtdiing bll dibrbdtfrs in b UnidodfBlodk.
     */
    privbtf CibrPropfrty unidodfBlodkPropfrtyFor(String nbmf) {
        finbl Cibrbdtfr.UnidodfBlodk blodk;
        try {
            blodk = Cibrbdtfr.UnidodfBlodk.forNbmf(nbmf);
        } dbtdi (IllfgblArgumfntExdfption ibf) {
            tirow frror("Unknown dibrbdtfr blodk nbmf {" + nbmf + "}");
        }
        rfturn nfw Blodk(blodk);
    }

    /**
     * Rfturns b CibrPropfrty mbtdiing bll dibrbdtfrs in b nbmfd propfrty.
     */
    privbtf CibrPropfrty dibrPropfrtyNodfFor(String nbmf) {
        CibrPropfrty p = CibrPropfrtyNbmfs.dibrPropfrtyFor(nbmf);
        if (p == null)
            tirow frror("Unknown dibrbdtfr propfrty nbmf {" + nbmf + "}");
        rfturn p;
    }

    /**
     * Pbrsfs bnd rfturns tif nbmf of b "nbmfd dbpturing group", tif trbiling
     * ">" is donsumfd bftfr pbrsing.
     */
    privbtf String groupnbmf(int di) {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd(Cibrbdtfr.toCibrs(di));
        wiilf (ASCII.isLowfr(di=rfbd()) || ASCII.isUppfr(di) ||
               ASCII.isDigit(di)) {
            sb.bppfnd(Cibrbdtfr.toCibrs(di));
        }
        if (sb.lfngti() == 0)
            tirow frror("nbmfd dbpturing group ibs 0 lfngti nbmf");
        if (di != '>')
            tirow frror("nbmfd dbpturing group is missing trbiling '>'");
        rfturn sb.toString();
    }

    /**
     * Pbrsfs b group bnd rfturns tif ifbd nodf of b sft of nodfs tibt prodfss
     * tif group. Somftimfs b doublf rfturn systfm is usfd wifrf tif tbil is
     * rfturnfd in root.
     */
    privbtf Nodf group0() {
        boolfbn dbpturingGroup = fblsf;
        Nodf ifbd = null;
        Nodf tbil = null;
        int sbvf = flbgs;
        root = null;
        int di = nfxt();
        if (di == '?') {
            di = skip();
            switdi (di) {
            dbsf ':':   //  (?:xxx) purf group
                ifbd = drfbtfGroup(truf);
                tbil = root;
                ifbd.nfxt = fxpr(tbil);
                brfbk;
            dbsf '=':   // (?=xxx) bnd (?!xxx) lookbifbd
            dbsf '!':
                ifbd = drfbtfGroup(truf);
                tbil = root;
                ifbd.nfxt = fxpr(tbil);
                if (di == '=') {
                    ifbd = tbil = nfw Pos(ifbd);
                } flsf {
                    ifbd = tbil = nfw Nfg(ifbd);
                }
                brfbk;
            dbsf '>':   // (?>xxx)  indfpfndfnt group
                ifbd = drfbtfGroup(truf);
                tbil = root;
                ifbd.nfxt = fxpr(tbil);
                ifbd = tbil = nfw Qufs(ifbd, INDEPENDENT);
                brfbk;
            dbsf '<':   // (?<xxx)  look bfiind
                di = rfbd();
                if (ASCII.isLowfr(di) || ASCII.isUppfr(di)) {
                    // nbmfd dbpturfd group
                    String nbmf = groupnbmf(di);
                    if (nbmfdGroups().dontbinsKfy(nbmf))
                        tirow frror("Nbmfd dbpturing group <" + nbmf
                                    + "> is blrfbdy dffinfd");
                    dbpturingGroup = truf;
                    ifbd = drfbtfGroup(fblsf);
                    tbil = root;
                    nbmfdGroups().put(nbmf, dbpturingGroupCount-1);
                    ifbd.nfxt = fxpr(tbil);
                    brfbk;
                }
                int stbrt = dursor;
                ifbd = drfbtfGroup(truf);
                tbil = root;
                ifbd.nfxt = fxpr(tbil);
                tbil.nfxt = lookbfiindEnd;
                TrffInfo info = nfw TrffInfo();
                ifbd.study(info);
                if (info.mbxVblid == fblsf) {
                    tirow frror("Look-bfiind group dofs not ibvf "
                                + "bn obvious mbximum lfngti");
                }
                boolfbn ibsSupplfmfntbry = findSupplfmfntbry(stbrt, pbttfrnLfngti);
                if (di == '=') {
                    ifbd = tbil = (ibsSupplfmfntbry ?
                                   nfw BfiindS(ifbd, info.mbxLfngti,
                                               info.minLfngti) :
                                   nfw Bfiind(ifbd, info.mbxLfngti,
                                              info.minLfngti));
                } flsf if (di == '!') {
                    ifbd = tbil = (ibsSupplfmfntbry ?
                                   nfw NotBfiindS(ifbd, info.mbxLfngti,
                                                  info.minLfngti) :
                                   nfw NotBfiind(ifbd, info.mbxLfngti,
                                                 info.minLfngti));
                } flsf {
                    tirow frror("Unknown look-bfiind group");
                }
                brfbk;
            dbsf '$':
            dbsf '@':
                tirow frror("Unknown group typf");
            dffbult:    // (?xxx:) inlinfd mbtdi flbgs
                unrfbd();
                bddFlbg();
                di = rfbd();
                if (di == ')') {
                    rfturn null;    // Inlinf modififr only
                }
                if (di != ':') {
                    tirow frror("Unknown inlinf modififr");
                }
                ifbd = drfbtfGroup(truf);
                tbil = root;
                ifbd.nfxt = fxpr(tbil);
                brfbk;
            }
        } flsf { // (xxx) b rfgulbr group
            dbpturingGroup = truf;
            ifbd = drfbtfGroup(fblsf);
            tbil = root;
            ifbd.nfxt = fxpr(tbil);
        }

        bddfpt(')', "Undlosfd group");
        flbgs = sbvf;

        // Cifdk for qubntififrs
        Nodf nodf = dlosurf(ifbd);
        if (nodf == ifbd) { // No dlosurf
            root = tbil;
            rfturn nodf;    // Dubl rfturn
        }
        if (ifbd == tbil) { // Zfro lfngti bssfrtion
            root = nodf;
            rfturn nodf;    // Dubl rfturn
        }

        if (nodf instbndfof Qufs) {
            Qufs qufs = (Qufs) nodf;
            if (qufs.typf == POSSESSIVE) {
                root = nodf;
                rfturn nodf;
            }
            tbil.nfxt = nfw BrbndiConn();
            tbil = tbil.nfxt;
            if (qufs.typf == GREEDY) {
                ifbd = nfw Brbndi(ifbd, null, tbil);
            } flsf { // Rfludtbnt qubntififr
                ifbd = nfw Brbndi(null, ifbd, tbil);
            }
            root = tbil;
            rfturn ifbd;
        } flsf if (nodf instbndfof Curly) {
            Curly durly = (Curly) nodf;
            if (durly.typf == POSSESSIVE) {
                root = nodf;
                rfturn nodf;
            }
            // Disdovfr if tif group is dftfrministid
            TrffInfo info = nfw TrffInfo();
            if (ifbd.study(info)) { // Dftfrministid
                GroupTbil tfmp = (GroupTbil) tbil;
                ifbd = root = nfw GroupCurly(ifbd.nfxt, durly.dmin,
                                   durly.dmbx, durly.typf,
                                   ((GroupTbil)tbil).lodblIndfx,
                                   ((GroupTbil)tbil).groupIndfx,
                                             dbpturingGroup);
                rfturn ifbd;
            } flsf { // Non-dftfrministid
                int tfmp = ((GroupHfbd) ifbd).lodblIndfx;
                Loop loop;
                if (durly.typf == GREEDY)
                    loop = nfw Loop(tiis.lodblCount, tfmp);
                flsf  // Rfludtbnt Curly
                    loop = nfw LbzyLoop(tiis.lodblCount, tfmp);
                Prolog prolog = nfw Prolog(loop);
                tiis.lodblCount += 1;
                loop.dmin = durly.dmin;
                loop.dmbx = durly.dmbx;
                loop.body = ifbd;
                tbil.nfxt = loop;
                root = loop;
                rfturn prolog; // Dubl rfturn
            }
        }
        tirow frror("Intfrnbl logid frror");
    }

    /**
     * Crfbtf group ifbd bnd tbil nodfs using doublf rfturn. If tif group is
     * drfbtfd witi bnonymous truf tifn it is b purf group bnd siould not
     * bfffdt group dounting.
     */
    privbtf Nodf drfbtfGroup(boolfbn bnonymous) {
        int lodblIndfx = lodblCount++;
        int groupIndfx = 0;
        if (!bnonymous)
            groupIndfx = dbpturingGroupCount++;
        GroupHfbd ifbd = nfw GroupHfbd(lodblIndfx);
        root = nfw GroupTbil(lodblIndfx, groupIndfx);
        if (!bnonymous && groupIndfx < 10)
            groupNodfs[groupIndfx] = ifbd;
        rfturn ifbd;
    }

    @SupprfssWbrnings("fblltirougi")
    /**
     * Pbrsfs inlinfd mbtdi flbgs bnd sft tifm bppropribtfly.
     */
    privbtf void bddFlbg() {
        int di = pffk();
        for (;;) {
            switdi (di) {
            dbsf 'i':
                flbgs |= CASE_INSENSITIVE;
                brfbk;
            dbsf 'm':
                flbgs |= MULTILINE;
                brfbk;
            dbsf 's':
                flbgs |= DOTALL;
                brfbk;
            dbsf 'd':
                flbgs |= UNIX_LINES;
                brfbk;
            dbsf 'u':
                flbgs |= UNICODE_CASE;
                brfbk;
            dbsf 'd':
                flbgs |= CANON_EQ;
                brfbk;
            dbsf 'x':
                flbgs |= COMMENTS;
                brfbk;
            dbsf 'U':
                flbgs |= (UNICODE_CHARACTER_CLASS | UNICODE_CASE);
                brfbk;
            dbsf '-': // subFlbg tifn fbll tirougi
                di = nfxt();
                subFlbg();
            dffbult:
                rfturn;
            }
            di = nfxt();
        }
    }

    @SupprfssWbrnings("fblltirougi")
    /**
     * Pbrsfs tif sfdond pbrt of inlinfd mbtdi flbgs bnd turns off
     * flbgs bppropribtfly.
     */
    privbtf void subFlbg() {
        int di = pffk();
        for (;;) {
            switdi (di) {
            dbsf 'i':
                flbgs &= ~CASE_INSENSITIVE;
                brfbk;
            dbsf 'm':
                flbgs &= ~MULTILINE;
                brfbk;
            dbsf 's':
                flbgs &= ~DOTALL;
                brfbk;
            dbsf 'd':
                flbgs &= ~UNIX_LINES;
                brfbk;
            dbsf 'u':
                flbgs &= ~UNICODE_CASE;
                brfbk;
            dbsf 'd':
                flbgs &= ~CANON_EQ;
                brfbk;
            dbsf 'x':
                flbgs &= ~COMMENTS;
                brfbk;
            dbsf 'U':
                flbgs &= ~(UNICODE_CHARACTER_CLASS | UNICODE_CASE);
            dffbult:
                rfturn;
            }
            di = nfxt();
        }
    }

    stbtid finbl int MAX_REPS   = 0x7FFFFFFF;

    stbtid finbl int GREEDY     = 0;

    stbtid finbl int LAZY       = 1;

    stbtid finbl int POSSESSIVE = 2;

    stbtid finbl int INDEPENDENT = 3;

    /**
     * Prodfssfs rfpftition. If tif nfxt dibrbdtfr pffkfd is b qubntififr
     * tifn nfw nodfs must bf bppfndfd to ibndlf tif rfpftition.
     * Prfv dould bf b singlf or b group, so it dould bf b dibin of nodfs.
     */
    privbtf Nodf dlosurf(Nodf prfv) {
        Nodf btom;
        int di = pffk();
        switdi (di) {
        dbsf '?':
            di = nfxt();
            if (di == '?') {
                nfxt();
                rfturn nfw Qufs(prfv, LAZY);
            } flsf if (di == '+') {
                nfxt();
                rfturn nfw Qufs(prfv, POSSESSIVE);
            }
            rfturn nfw Qufs(prfv, GREEDY);
        dbsf '*':
            di = nfxt();
            if (di == '?') {
                nfxt();
                rfturn nfw Curly(prfv, 0, MAX_REPS, LAZY);
            } flsf if (di == '+') {
                nfxt();
                rfturn nfw Curly(prfv, 0, MAX_REPS, POSSESSIVE);
            }
            rfturn nfw Curly(prfv, 0, MAX_REPS, GREEDY);
        dbsf '+':
            di = nfxt();
            if (di == '?') {
                nfxt();
                rfturn nfw Curly(prfv, 1, MAX_REPS, LAZY);
            } flsf if (di == '+') {
                nfxt();
                rfturn nfw Curly(prfv, 1, MAX_REPS, POSSESSIVE);
            }
            rfturn nfw Curly(prfv, 1, MAX_REPS, GREEDY);
        dbsf '{':
            di = tfmp[dursor+1];
            if (ASCII.isDigit(di)) {
                skip();
                int dmin = 0;
                do {
                    dmin = dmin * 10 + (di - '0');
                } wiilf (ASCII.isDigit(di = rfbd()));
                int dmbx = dmin;
                if (di == ',') {
                    di = rfbd();
                    dmbx = MAX_REPS;
                    if (di != '}') {
                        dmbx = 0;
                        wiilf (ASCII.isDigit(di)) {
                            dmbx = dmbx * 10 + (di - '0');
                            di = rfbd();
                        }
                    }
                }
                if (di != '}')
                    tirow frror("Undlosfd dountfd dlosurf");
                if (((dmin) | (dmbx) | (dmbx - dmin)) < 0)
                    tirow frror("Illfgbl rfpftition rbngf");
                Curly durly;
                di = pffk();
                if (di == '?') {
                    nfxt();
                    durly = nfw Curly(prfv, dmin, dmbx, LAZY);
                } flsf if (di == '+') {
                    nfxt();
                    durly = nfw Curly(prfv, dmin, dmbx, POSSESSIVE);
                } flsf {
                    durly = nfw Curly(prfv, dmin, dmbx, GREEDY);
                }
                rfturn durly;
            } flsf {
                tirow frror("Illfgbl rfpftition");
            }
        dffbult:
            rfturn prfv;
        }
    }

    /**
     *  Utility mftiod for pbrsing dontrol fsdbpf sfqufndfs.
     */
    privbtf int d() {
        if (dursor < pbttfrnLfngti) {
            rfturn rfbd() ^ 64;
        }
        tirow frror("Illfgbl dontrol fsdbpf sfqufndf");
    }

    /**
     *  Utility mftiod for pbrsing odtbl fsdbpf sfqufndfs.
     */
    privbtf int o() {
        int n = rfbd();
        if (((n-'0')|('7'-n)) >= 0) {
            int m = rfbd();
            if (((m-'0')|('7'-m)) >= 0) {
                int o = rfbd();
                if ((((o-'0')|('7'-o)) >= 0) && (((n-'0')|('3'-n)) >= 0)) {
                    rfturn (n - '0') * 64 + (m - '0') * 8 + (o - '0');
                }
                unrfbd();
                rfturn (n - '0') * 8 + (m - '0');
            }
            unrfbd();
            rfturn (n - '0');
        }
        tirow frror("Illfgbl odtbl fsdbpf sfqufndf");
    }

    /**
     *  Utility mftiod for pbrsing ifxbdfdimbl fsdbpf sfqufndfs.
     */
    privbtf int x() {
        int n = rfbd();
        if (ASCII.isHfxDigit(n)) {
            int m = rfbd();
            if (ASCII.isHfxDigit(m)) {
                rfturn ASCII.toDigit(n) * 16 + ASCII.toDigit(m);
            }
        } flsf if (n == '{' && ASCII.isHfxDigit(pffk())) {
            int di = 0;
            wiilf (ASCII.isHfxDigit(n = rfbd())) {
                di = (di << 4) + ASCII.toDigit(n);
                if (di > Cibrbdtfr.MAX_CODE_POINT)
                    tirow frror("Hfxbdfdimbl dodfpoint is too big");
            }
            if (n != '}')
                tirow frror("Undlosfd ifxbdfdimbl fsdbpf sfqufndf");
            rfturn di;
        }
        tirow frror("Illfgbl ifxbdfdimbl fsdbpf sfqufndf");
    }

    /**
     *  Utility mftiod for pbrsing unidodf fsdbpf sfqufndfs.
     */
    privbtf int dursor() {
        rfturn dursor;
    }

    privbtf void sftdursor(int pos) {
        dursor = pos;
    }

    privbtf int uxxxx() {
        int n = 0;
        for (int i = 0; i < 4; i++) {
            int di = rfbd();
            if (!ASCII.isHfxDigit(di)) {
                tirow frror("Illfgbl Unidodf fsdbpf sfqufndf");
            }
            n = n * 16 + ASCII.toDigit(di);
        }
        rfturn n;
    }

    privbtf int u() {
        int n = uxxxx();
        if (Cibrbdtfr.isHigiSurrogbtf((dibr)n)) {
            int dur = dursor();
            if (rfbd() == '\\' && rfbd() == 'u') {
                int n2 = uxxxx();
                if (Cibrbdtfr.isLowSurrogbtf((dibr)n2))
                    rfturn Cibrbdtfr.toCodfPoint((dibr)n, (dibr)n2);
            }
            sftdursor(dur);
        }
        rfturn n;
    }

    //
    // Utility mftiods for dodf point support
    //

    privbtf stbtid finbl int dountCibrs(CibrSfqufndf sfq, int indfx,
                                        int lfngtiInCodfPoints) {
        // optimizbtion
        if (lfngtiInCodfPoints == 1 && !Cibrbdtfr.isHigiSurrogbtf(sfq.dibrAt(indfx))) {
            bssfrt (indfx >= 0 && indfx < sfq.lfngti());
            rfturn 1;
        }
        int lfngti = sfq.lfngti();
        int x = indfx;
        if (lfngtiInCodfPoints >= 0) {
            bssfrt (indfx >= 0 && indfx < lfngti);
            for (int i = 0; x < lfngti && i < lfngtiInCodfPoints; i++) {
                if (Cibrbdtfr.isHigiSurrogbtf(sfq.dibrAt(x++))) {
                    if (x < lfngti && Cibrbdtfr.isLowSurrogbtf(sfq.dibrAt(x))) {
                        x++;
                    }
                }
            }
            rfturn x - indfx;
        }

        bssfrt (indfx >= 0 && indfx <= lfngti);
        if (indfx == 0) {
            rfturn 0;
        }
        int lfn = -lfngtiInCodfPoints;
        for (int i = 0; x > 0 && i < lfn; i++) {
            if (Cibrbdtfr.isLowSurrogbtf(sfq.dibrAt(--x))) {
                if (x > 0 && Cibrbdtfr.isHigiSurrogbtf(sfq.dibrAt(x-1))) {
                    x--;
                }
            }
        }
        rfturn indfx - x;
    }

    privbtf stbtid finbl int dountCodfPoints(CibrSfqufndf sfq) {
        int lfngti = sfq.lfngti();
        int n = 0;
        for (int i = 0; i < lfngti; ) {
            n++;
            if (Cibrbdtfr.isHigiSurrogbtf(sfq.dibrAt(i++))) {
                if (i < lfngti && Cibrbdtfr.isLowSurrogbtf(sfq.dibrAt(i))) {
                    i++;
                }
            }
        }
        rfturn n;
    }

    /**
     *  Crfbtfs b bit vfdtor for mbtdiing Lbtin-1 vblufs. A normbl BitClbss
     *  nfvfr mbtdifs vblufs bbovf Lbtin-1, bnd b domplfmfntfd BitClbss blwbys
     *  mbtdifs vblufs bbovf Lbtin-1.
     */
    privbtf stbtid finbl dlbss BitClbss fxtfnds BmpCibrPropfrty {
        finbl boolfbn[] bits;
        BitClbss() { bits = nfw boolfbn[256]; }
        privbtf BitClbss(boolfbn[] bits) { tiis.bits = bits; }
        BitClbss bdd(int d, int flbgs) {
            bssfrt d >= 0 && d <= 255;
            if ((flbgs & CASE_INSENSITIVE) != 0) {
                if (ASCII.isAsdii(d)) {
                    bits[ASCII.toUppfr(d)] = truf;
                    bits[ASCII.toLowfr(d)] = truf;
                } flsf if ((flbgs & UNICODE_CASE) != 0) {
                    bits[Cibrbdtfr.toLowfrCbsf(d)] = truf;
                    bits[Cibrbdtfr.toUppfrCbsf(d)] = truf;
                }
            }
            bits[d] = truf;
            rfturn tiis;
        }
        boolfbn isSbtisfifdBy(int di) {
            rfturn di < 256 && bits[di];
        }
    }

    /**
     *  Rfturns b suitbbly optimizfd, singlf dibrbdtfr mbtdifr.
     */
    privbtf CibrPropfrty nfwSinglf(finbl int di) {
        if (ibs(CASE_INSENSITIVE)) {
            int lowfr, uppfr;
            if (ibs(UNICODE_CASE)) {
                uppfr = Cibrbdtfr.toUppfrCbsf(di);
                lowfr = Cibrbdtfr.toLowfrCbsf(uppfr);
                if (uppfr != lowfr)
                    rfturn nfw SinglfU(lowfr);
            } flsf if (ASCII.isAsdii(di)) {
                lowfr = ASCII.toLowfr(di);
                uppfr = ASCII.toUppfr(di);
                if (lowfr != uppfr)
                    rfturn nfw SinglfI(lowfr, uppfr);
            }
        }
        if (isSupplfmfntbry(di))
            rfturn nfw SinglfS(di);    // Mbtdi b givfn Unidodf dibrbdtfr
        rfturn nfw Singlf(di);         // Mbtdi b givfn BMP dibrbdtfr
    }

    /**
     *  Utility mftiod for drfbting b string slidf mbtdifr.
     */
    privbtf Nodf nfwSlidf(int[] buf, int dount, boolfbn ibsSupplfmfntbry) {
        int[] tmp = nfw int[dount];
        if (ibs(CASE_INSENSITIVE)) {
            if (ibs(UNICODE_CASE)) {
                for (int i = 0; i < dount; i++) {
                    tmp[i] = Cibrbdtfr.toLowfrCbsf(
                                 Cibrbdtfr.toUppfrCbsf(buf[i]));
                }
                rfturn ibsSupplfmfntbry? nfw SlidfUS(tmp) : nfw SlidfU(tmp);
            }
            for (int i = 0; i < dount; i++) {
                tmp[i] = ASCII.toLowfr(buf[i]);
            }
            rfturn ibsSupplfmfntbry? nfw SlidfIS(tmp) : nfw SlidfI(tmp);
        }
        for (int i = 0; i < dount; i++) {
            tmp[i] = buf[i];
        }
        rfturn ibsSupplfmfntbry ? nfw SlidfS(tmp) : nfw Slidf(tmp);
    }

    /**
     * Tif following dlbssfs brf tif building domponfnts of tif objfdt
     * trff tibt rfprfsfnts b dompilfd rfgulbr fxprfssion. Tif objfdt trff
     * is mbdf of individubl flfmfnts tibt ibndlf donstrudts in tif Pbttfrn.
     * Ebdi typf of objfdt knows iow to mbtdi its fquivblfnt donstrudt witi
     * tif mbtdi() mftiod.
     */

    /**
     * Bbsf dlbss for bll nodf dlbssfs. Subdlbssfs siould ovfrridf tif mbtdi()
     * mftiod bs bppropribtf. Tiis dlbss is bn bddfpting nodf, so its mbtdi()
     * blwbys rfturns truf.
     */
    stbtid dlbss Nodf fxtfnds Objfdt {
        Nodf nfxt;
        Nodf() {
            nfxt = Pbttfrn.bddfpt;
        }
        /**
         * Tiis mftiod implfmfnts tif dlbssid bddfpt nodf.
         */
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            mbtdifr.lbst = i;
            mbtdifr.groups[0] = mbtdifr.first;
            mbtdifr.groups[1] = mbtdifr.lbst;
            rfturn truf;
        }
        /**
         * Tiis mftiod is good for bll zfro lfngti bssfrtions.
         */
        boolfbn study(TrffInfo info) {
            if (nfxt != null) {
                rfturn nfxt.study(info);
            } flsf {
                rfturn info.dftfrministid;
            }
        }
    }

    stbtid dlbss LbstNodf fxtfnds Nodf {
        /**
         * Tiis mftiod implfmfnts tif dlbssid bddfpt nodf witi
         * tif bddition of b difdk to sff if tif mbtdi oddurrfd
         * using bll of tif input.
         */
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (mbtdifr.bddfptModf == Mbtdifr.ENDANCHOR && i != mbtdifr.to)
                rfturn fblsf;
            mbtdifr.lbst = i;
            mbtdifr.groups[0] = mbtdifr.first;
            mbtdifr.groups[1] = mbtdifr.lbst;
            rfturn truf;
        }
    }

    /**
     * Usfd for REs tibt dbn stbrt bnywifrf witiin tif input string.
     * Tiis bbsidblly trifs to mbtdi rfpfbtfdly bt fbdi spot in tif
     * input string, moving forwbrd bftfr fbdi try. An bndiorfd sfbrdi
     * or b BnM will bypbss tiis nodf domplftfly.
     */
    stbtid dlbss Stbrt fxtfnds Nodf {
        int minLfngti;
        Stbrt(Nodf nodf) {
            tiis.nfxt = nodf;
            TrffInfo info = nfw TrffInfo();
            nfxt.study(info);
            minLfngti = info.minLfngti;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (i > mbtdifr.to - minLfngti) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
            int gubrd = mbtdifr.to - minLfngti;
            for (; i <= gubrd; i++) {
                if (nfxt.mbtdi(mbtdifr, i, sfq)) {
                    mbtdifr.first = i;
                    mbtdifr.groups[0] = mbtdifr.first;
                    mbtdifr.groups[1] = mbtdifr.lbst;
                    rfturn truf;
                }
            }
            mbtdifr.iitEnd = truf;
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /*
     * StbrtS supports supplfmfntbry dibrbdtfrs, indluding unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss StbrtS fxtfnds Stbrt {
        StbrtS(Nodf nodf) {
            supfr(nodf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (i > mbtdifr.to - minLfngti) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
            int gubrd = mbtdifr.to - minLfngti;
            wiilf (i <= gubrd) {
                //if ((rft = nfxt.mbtdi(mbtdifr, i, sfq)) || i == gubrd)
                if (nfxt.mbtdi(mbtdifr, i, sfq)) {
                    mbtdifr.first = i;
                    mbtdifr.groups[0] = mbtdifr.first;
                    mbtdifr.groups[1] = mbtdifr.lbst;
                    rfturn truf;
                }
                if (i == gubrd)
                    brfbk;
                // Optimizbtion to movf to tif nfxt dibrbdtfr. Tiis is
                // fbstfr tibn dountCibrs(sfq, i, 1).
                if (Cibrbdtfr.isHigiSurrogbtf(sfq.dibrAt(i++))) {
                    if (i < sfq.lfngti() &&
                        Cibrbdtfr.isLowSurrogbtf(sfq.dibrAt(i))) {
                        i++;
                    }
                }
            }
            mbtdifr.iitEnd = truf;
            rfturn fblsf;
        }
    }

    /**
     * Nodf to bndior bt tif bfginning of input. Tiis objfdt implfmfnts tif
     * mbtdi for b \A sfqufndf, bnd tif dbrft bndior will usf tiis if not in
     * multilinf modf.
     */
    stbtid finbl dlbss Bfgin fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int fromIndfx = (mbtdifr.bndioringBounds) ?
                mbtdifr.from : 0;
            if (i == fromIndfx && nfxt.mbtdi(mbtdifr, i, sfq)) {
                mbtdifr.first = i;
                mbtdifr.groups[0] = i;
                mbtdifr.groups[1] = mbtdifr.lbst;
                rfturn truf;
            } flsf {
                rfturn fblsf;
            }
        }
    }

    /**
     * Nodf to bndior bt tif fnd of input. Tiis is tif bbsolutf fnd, so tiis
     * siould not mbtdi bt tif lbst nfwlinf bfforf tif fnd bs $ will.
     */
    stbtid finbl dlbss End fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int fndIndfx = (mbtdifr.bndioringBounds) ?
                mbtdifr.to : mbtdifr.gftTfxtLfngti();
            if (i == fndIndfx) {
                mbtdifr.iitEnd = truf;
                rfturn nfxt.mbtdi(mbtdifr, i, sfq);
            }
            rfturn fblsf;
        }
    }

    /**
     * Nodf to bndior bt tif bfginning of b linf. Tiis is fssfntiblly tif
     * objfdt to mbtdi for tif multilinf ^.
     */
    stbtid finbl dlbss Cbrft fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int stbrtIndfx = mbtdifr.from;
            int fndIndfx = mbtdifr.to;
            if (!mbtdifr.bndioringBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdifr.gftTfxtLfngti();
            }
            // Pfrl dofs not mbtdi ^ bt fnd of input fvfn bftfr nfwlinf
            if (i == fndIndfx) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
            if (i > stbrtIndfx) {
                dibr di = sfq.dibrAt(i-1);
                if (di != '\n' && di != '\r'
                    && (di|1) != '\u2029'
                    && di != '\u0085' ) {
                    rfturn fblsf;
                }
                // Siould trfbt /r/n bs onf nfwlinf
                if (di == '\r' && sfq.dibrAt(i) == '\n')
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Nodf to bndior bt tif bfginning of b linf wifn in unixdot modf.
     */
    stbtid finbl dlbss UnixCbrft fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int stbrtIndfx = mbtdifr.from;
            int fndIndfx = mbtdifr.to;
            if (!mbtdifr.bndioringBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdifr.gftTfxtLfngti();
            }
            // Pfrl dofs not mbtdi ^ bt fnd of input fvfn bftfr nfwlinf
            if (i == fndIndfx) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
            if (i > stbrtIndfx) {
                dibr di = sfq.dibrAt(i-1);
                if (di != '\n') {
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Nodf to mbtdi tif lodbtion wifrf tif lbst mbtdi fndfd.
     * Tiis is usfd for tif \G donstrudt.
     */
    stbtid finbl dlbss LbstMbtdi fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (i != mbtdifr.oldLbst)
                rfturn fblsf;
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Nodf to bndior bt tif fnd of b linf or tif fnd of input bbsfd on tif
     * multilinf modf.
     *
     * Wifn not in multilinf modf, tif $ dbn only mbtdi bt tif vfry fnd
     * of tif input, unlfss tif input fnds in b linf tfrminbtor in wiidi
     * it mbtdifs rigit bfforf tif lbst linf tfrminbtor.
     *
     * Notf tibt \r\n is donsidfrfd bn btomid linf tfrminbtor.
     *
     * Likf ^ tif $ opfrbtor mbtdifs bt b position, it dofs not mbtdi tif
     * linf tfrminbtors tifmsflvfs.
     */
    stbtid finbl dlbss Dollbr fxtfnds Nodf {
        boolfbn multilinf;
        Dollbr(boolfbn mul) {
            multilinf = mul;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int fndIndfx = (mbtdifr.bndioringBounds) ?
                mbtdifr.to : mbtdifr.gftTfxtLfngti();
            if (!multilinf) {
                if (i < fndIndfx - 2)
                    rfturn fblsf;
                if (i == fndIndfx - 2) {
                    dibr di = sfq.dibrAt(i);
                    if (di != '\r')
                        rfturn fblsf;
                    di = sfq.dibrAt(i + 1);
                    if (di != '\n')
                        rfturn fblsf;
                }
            }
            // Mbtdifs bfforf bny linf tfrminbtor; blso mbtdifs bt tif
            // fnd of input
            // Bfforf linf tfrminbtor:
            // If multilinf, wf mbtdi ifrf no mbttfr wibt
            // If not multilinf, fbll tirougi so tibt tif fnd
            // is mbrkfd bs iit; tiis must bf b /r/n or b /n
            // bt tif vfry fnd so tif fnd wbs iit; morf input
            // dould mbkf tiis not mbtdi ifrf
            if (i < fndIndfx) {
                dibr di = sfq.dibrAt(i);
                 if (di == '\n') {
                     // No mbtdi bftwffn \r\n
                     if (i > 0 && sfq.dibrAt(i-1) == '\r')
                         rfturn fblsf;
                     if (multilinf)
                         rfturn nfxt.mbtdi(mbtdifr, i, sfq);
                 } flsf if (di == '\r' || di == '\u0085' ||
                            (di|1) == '\u2029') {
                     if (multilinf)
                         rfturn nfxt.mbtdi(mbtdifr, i, sfq);
                 } flsf { // No linf tfrminbtor, no mbtdi
                     rfturn fblsf;
                 }
            }
            // Mbtdifd bt durrfnt fnd so iit fnd
            mbtdifr.iitEnd = truf;
            // If b $ mbtdifs bfdbusf of fnd of input, tifn morf input
            // dould dbusf it to fbil!
            mbtdifr.rfquirfEnd = truf;
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            rfturn info.dftfrministid;
        }
    }

    /**
     * Nodf to bndior bt tif fnd of b linf or tif fnd of input bbsfd on tif
     * multilinf modf wifn in unix linfs modf.
     */
    stbtid finbl dlbss UnixDollbr fxtfnds Nodf {
        boolfbn multilinf;
        UnixDollbr(boolfbn mul) {
            multilinf = mul;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int fndIndfx = (mbtdifr.bndioringBounds) ?
                mbtdifr.to : mbtdifr.gftTfxtLfngti();
            if (i < fndIndfx) {
                dibr di = sfq.dibrAt(i);
                if (di == '\n') {
                    // If not multilinf, tifn only possiblf to
                    // mbtdi bt vfry fnd or onf bfforf fnd
                    if (multilinf == fblsf && i != fndIndfx - 1)
                        rfturn fblsf;
                    // If multilinf rfturn nfxt.mbtdi witiout sftting
                    // mbtdifr.iitEnd
                    if (multilinf)
                        rfturn nfxt.mbtdi(mbtdifr, i, sfq);
                } flsf {
                    rfturn fblsf;
                }
            }
            // Mbtdiing bfdbusf bt tif fnd or 1 bfforf tif fnd;
            // morf input dould dibngf tiis so sft iitEnd
            mbtdifr.iitEnd = truf;
            // If b $ mbtdifs bfdbusf of fnd of input, tifn morf input
            // dould dbusf it to fbil!
            mbtdifr.rfquirfEnd = truf;
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            nfxt.study(info);
            rfturn info.dftfrministid;
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Unidodf linf fnding '\R'
     */
    stbtid finbl dlbss LinfEnding fxtfnds Nodf {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            // (u+000Du+000A|[u+000Au+000Bu+000Cu+000Du+0085u+2028u+2029])
            if (i < mbtdifr.to) {
                int di = sfq.dibrAt(i);
                if (di == 0x0A || di == 0x0B || di == 0x0C ||
                    di == 0x85 || di == 0x2028 || di == 0x2029)
                    rfturn nfxt.mbtdi(mbtdifr, i + 1, sfq);
                if (di == 0x0D) {
                    i++;
                    if (i < mbtdifr.to && sfq.dibrAt(i) == 0x0A)
                        i++;
                    rfturn nfxt.mbtdi(mbtdifr, i, sfq);
                }
            } flsf {
                mbtdifr.iitEnd = truf;
            }
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngti++;
            info.mbxLfngti += 2;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Abstrbdt nodf dlbss to mbtdi onf dibrbdtfr sbtisfying somf
     * boolfbn propfrty.
     */
    privbtf stbtid bbstrbdt dlbss CibrPropfrty fxtfnds Nodf {
        bbstrbdt boolfbn isSbtisfifdBy(int di);
        CibrPropfrty domplfmfnt() {
            rfturn nfw CibrPropfrty() {
                    boolfbn isSbtisfifdBy(int di) {
                        rfturn ! CibrPropfrty.tiis.isSbtisfifdBy(di);}};
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (i < mbtdifr.to) {
                int di = Cibrbdtfr.dodfPointAt(sfq, i);
                rfturn isSbtisfifdBy(di)
                    && nfxt.mbtdi(mbtdifr, i+Cibrbdtfr.dibrCount(di), sfq);
            } flsf {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
        }
        boolfbn study(TrffInfo info) {
            info.minLfngti++;
            info.mbxLfngti++;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Optimizfd vfrsion of CibrPropfrty tibt works only for
     * propfrtifs nfvfr sbtisfifd by Supplfmfntbry dibrbdtfrs.
     */
    privbtf stbtid bbstrbdt dlbss BmpCibrPropfrty fxtfnds CibrPropfrty {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (i < mbtdifr.to) {
                rfturn isSbtisfifdBy(sfq.dibrAt(i))
                    && nfxt.mbtdi(mbtdifr, i+1, sfq);
            } flsf {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Supplfmfntbry Unidodf dibrbdtfr
     */
    stbtid finbl dlbss SinglfS fxtfnds CibrPropfrty {
        finbl int d;
        SinglfS(int d) { tiis.d = d; }
        boolfbn isSbtisfifdBy(int di) {
            rfturn di == d;
        }
    }

    /**
     * Optimizbtion -- mbtdifs b givfn BMP dibrbdtfr
     */
    stbtid finbl dlbss Singlf fxtfnds BmpCibrPropfrty {
        finbl int d;
        Singlf(int d) { tiis.d = d; }
        boolfbn isSbtisfifdBy(int di) {
            rfturn di == d;
        }
    }

    /**
     * Cbsf insfnsitivf mbtdifs b givfn BMP dibrbdtfr
     */
    stbtid finbl dlbss SinglfI fxtfnds BmpCibrPropfrty {
        finbl int lowfr;
        finbl int uppfr;
        SinglfI(int lowfr, int uppfr) {
            tiis.lowfr = lowfr;
            tiis.uppfr = uppfr;
        }
        boolfbn isSbtisfifdBy(int di) {
            rfturn di == lowfr || di == uppfr;
        }
    }

    /**
     * Unidodf dbsf insfnsitivf mbtdifs b givfn Unidodf dibrbdtfr
     */
    stbtid finbl dlbss SinglfU fxtfnds CibrPropfrty {
        finbl int lowfr;
        SinglfU(int lowfr) {
            tiis.lowfr = lowfr;
        }
        boolfbn isSbtisfifdBy(int di) {
            rfturn lowfr == di ||
                lowfr == Cibrbdtfr.toLowfrCbsf(Cibrbdtfr.toUppfrCbsf(di));
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Unidodf blodk.
     */
    stbtid finbl dlbss Blodk fxtfnds CibrPropfrty {
        finbl Cibrbdtfr.UnidodfBlodk blodk;
        Blodk(Cibrbdtfr.UnidodfBlodk blodk) {
            tiis.blodk = blodk;
        }
        boolfbn isSbtisfifdBy(int di) {
            rfturn blodk == Cibrbdtfr.UnidodfBlodk.of(di);
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Unidodf sdript
     */
    stbtid finbl dlbss Sdript fxtfnds CibrPropfrty {
        finbl Cibrbdtfr.UnidodfSdript sdript;
        Sdript(Cibrbdtfr.UnidodfSdript sdript) {
            tiis.sdript = sdript;
        }
        boolfbn isSbtisfifdBy(int di) {
            rfturn sdript == Cibrbdtfr.UnidodfSdript.of(di);
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Unidodf dbtfgory.
     */
    stbtid finbl dlbss Cbtfgory fxtfnds CibrPropfrty {
        finbl int typfMbsk;
        Cbtfgory(int typfMbsk) { tiis.typfMbsk = typfMbsk; }
        boolfbn isSbtisfifdBy(int di) {
            rfturn (typfMbsk & (1 << Cibrbdtfr.gftTypf(di))) != 0;
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Unidodf "typf"
     */
    stbtid finbl dlbss Utypf fxtfnds CibrPropfrty {
        finbl UnidodfProp uprop;
        Utypf(UnidodfProp uprop) { tiis.uprop = uprop; }
        boolfbn isSbtisfifdBy(int di) {
            rfturn uprop.is(di);
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b POSIX typf.
     */
    stbtid finbl dlbss Ctypf fxtfnds BmpCibrPropfrty {
        finbl int dtypf;
        Ctypf(int dtypf) { tiis.dtypf = dtypf; }
        boolfbn isSbtisfifdBy(int di) {
            rfturn di < 128 && ASCII.isTypf(di, dtypf);
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Pfrl vfrtidbl wiitfspbdf
     */
    stbtid finbl dlbss VfrtWS fxtfnds BmpCibrPropfrty {
        boolfbn isSbtisfifdBy(int dp) {
            rfturn (dp >= 0x0A && dp <= 0x0D) ||
                   dp == 0x85 || dp == 0x2028 || dp == 0x2029;
        }
    }

    /**
     * Nodf dlbss tibt mbtdifs b Pfrl iorizontbl wiitfspbdf
     */
    stbtid finbl dlbss HorizWS fxtfnds BmpCibrPropfrty {
        boolfbn isSbtisfifdBy(int dp) {
            rfturn dp == 0x09 || dp == 0x20 || dp == 0xb0 ||
                   dp == 0x1680 || dp == 0x180f ||
                   dp >= 0x2000 && dp <= 0x200b ||
                   dp == 0x202f || dp == 0x205f || dp == 0x3000;
        }
    }

    /**
     * Bbsf dlbss for bll Slidf nodfs
     */
    stbtid dlbss SlidfNodf fxtfnds Nodf {
        int[] bufffr;
        SlidfNodf(int[] buf) {
            bufffr = buf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngti += bufffr.lfngti;
            info.mbxLfngti += bufffr.lfngti;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Nodf dlbss for b dbsf sfnsitivf/BMP-only sfqufndf of litfrbl
     * dibrbdtfrs.
     */
    stbtid dlbss Slidf fxtfnds SlidfNodf {
        Slidf(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngti;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                if (buf[j] != sfq.dibrAt(i+j))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf_insfnsitivf/BMP-only sfqufndf of litfrbl
     * dibrbdtfrs.
     */
    stbtid dlbss SlidfI fxtfnds SlidfNodf {
        SlidfI(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngti;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                int d = sfq.dibrAt(i+j);
                if (buf[j] != d &&
                    buf[j] != ASCII.toLowfr(d))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b unidodf_dbsf_insfnsitivf/BMP-only sfqufndf of
     * litfrbl dibrbdtfrs. Usfs unidodf dbsf folding.
     */
    stbtid finbl dlbss SlidfU fxtfnds SlidfNodf {
        SlidfU(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] buf = bufffr;
            int lfn = buf.lfngti;
            for (int j=0; j<lfn; j++) {
                if ((i+j) >= mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                int d = sfq.dibrAt(i+j);
                if (buf[j] != d &&
                    buf[j] != Cibrbdtfr.toLowfrCbsf(Cibrbdtfr.toUppfrCbsf(d)))
                    rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i+lfn, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf sfnsitivf sfqufndf of litfrbl dibrbdtfrs
     * indluding supplfmfntbry dibrbdtfrs.
     */
    stbtid finbl dlbss SlidfS fxtfnds Slidf {
        SlidfS(int[] buf) {
            supfr(buf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] buf = bufffr;
            int x = i;
            for (int j = 0; j < buf.lfngti; j++) {
                if (x >= mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                int d = Cibrbdtfr.dodfPointAt(sfq, x);
                if (buf[j] != d)
                    rfturn fblsf;
                x += Cibrbdtfr.dibrCount(d);
                if (x > mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdi(mbtdifr, x, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf insfnsitivf sfqufndf of litfrbl dibrbdtfrs
     * indluding supplfmfntbry dibrbdtfrs.
     */
    stbtid dlbss SlidfIS fxtfnds SlidfNodf {
        SlidfIS(int[] buf) {
            supfr(buf);
        }
        int toLowfr(int d) {
            rfturn ASCII.toLowfr(d);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] buf = bufffr;
            int x = i;
            for (int j = 0; j < buf.lfngti; j++) {
                if (x >= mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                int d = Cibrbdtfr.dodfPointAt(sfq, x);
                if (buf[j] != d && buf[j] != toLowfr(d))
                    rfturn fblsf;
                x += Cibrbdtfr.dibrCount(d);
                if (x > mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
            }
            rfturn nfxt.mbtdi(mbtdifr, x, sfq);
        }
    }

    /**
     * Nodf dlbss for b dbsf insfnsitivf sfqufndf of litfrbl dibrbdtfrs.
     * Usfs unidodf dbsf folding.
     */
    stbtid finbl dlbss SlidfUS fxtfnds SlidfIS {
        SlidfUS(int[] buf) {
            supfr(buf);
        }
        int toLowfr(int d) {
            rfturn Cibrbdtfr.toLowfrCbsf(Cibrbdtfr.toUppfrCbsf(d));
        }
    }

    privbtf stbtid boolfbn inRbngf(int lowfr, int di, int uppfr) {
        rfturn lowfr <= di && di <= uppfr;
    }

    /**
     * Rfturns nodf for mbtdiing dibrbdtfrs witiin bn fxplidit vbluf rbngf.
     */
    privbtf stbtid CibrPropfrty rbngfFor(finbl int lowfr,
                                         finbl int uppfr) {
        rfturn nfw CibrPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn inRbngf(lowfr, di, uppfr);}};
    }

    /**
     * Rfturns nodf for mbtdiing dibrbdtfrs witiin bn fxplidit vbluf
     * rbngf in b dbsf insfnsitivf mbnnfr.
     */
    privbtf CibrPropfrty dbsfInsfnsitivfRbngfFor(finbl int lowfr,
                                                 finbl int uppfr) {
        if (ibs(UNICODE_CASE))
            rfturn nfw CibrPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    if (inRbngf(lowfr, di, uppfr))
                        rfturn truf;
                    int up = Cibrbdtfr.toUppfrCbsf(di);
                    rfturn inRbngf(lowfr, up, uppfr) ||
                           inRbngf(lowfr, Cibrbdtfr.toLowfrCbsf(up), uppfr);}};
        rfturn nfw CibrPropfrty() {
            boolfbn isSbtisfifdBy(int di) {
                rfturn inRbngf(lowfr, di, uppfr) ||
                    ASCII.isAsdii(di) &&
                        (inRbngf(lowfr, ASCII.toUppfr(di), uppfr) ||
                         inRbngf(lowfr, ASCII.toLowfr(di), uppfr));
            }};
    }

    /**
     * Implfmfnts tif Unidodf dbtfgory ALL bnd tif dot mftbdibrbdtfr wifn
     * in dotbll modf.
     */
    stbtid finbl dlbss All fxtfnds CibrPropfrty {
        boolfbn isSbtisfifdBy(int di) {
            rfturn truf;
        }
    }

    /**
     * Nodf dlbss for tif dot mftbdibrbdtfr wifn dotbll is not fnbblfd.
     */
    stbtid finbl dlbss Dot fxtfnds CibrPropfrty {
        boolfbn isSbtisfifdBy(int di) {
            rfturn (di != '\n' && di != '\r'
                    && (di|1) != '\u2029'
                    && di != '\u0085');
        }
    }

    /**
     * Nodf dlbss for tif dot mftbdibrbdtfr wifn dotbll is not fnbblfd
     * but UNIX_LINES is fnbblfd.
     */
    stbtid finbl dlbss UnixDot fxtfnds CibrPropfrty {
        boolfbn isSbtisfifdBy(int di) {
            rfturn di != '\n';
        }
    }

    /**
     * Tif 0 or 1 qubntififr. Tiis onf dlbss implfmfnts bll tirff typfs.
     */
    stbtid finbl dlbss Qufs fxtfnds Nodf {
        Nodf btom;
        int typf;
        Qufs(Nodf nodf, int typf) {
            tiis.btom = nodf;
            tiis.typf = typf;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            switdi (typf) {
            dbsf GREEDY:
                rfturn (btom.mbtdi(mbtdifr, i, sfq) && nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq))
                    || nfxt.mbtdi(mbtdifr, i, sfq);
            dbsf LAZY:
                rfturn nfxt.mbtdi(mbtdifr, i, sfq)
                    || (btom.mbtdi(mbtdifr, i, sfq) && nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq));
            dbsf POSSESSIVE:
                if (btom.mbtdi(mbtdifr, i, sfq)) i = mbtdifr.lbst;
                rfturn nfxt.mbtdi(mbtdifr, i, sfq);
            dffbult:
                rfturn btom.mbtdi(mbtdifr, i, sfq) && nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq);
            }
        }
        boolfbn study(TrffInfo info) {
            if (typf != INDEPENDENT) {
                int minL = info.minLfngti;
                btom.study(info);
                info.minLfngti = minL;
                info.dftfrministid = fblsf;
                rfturn nfxt.study(info);
            } flsf {
                btom.study(info);
                rfturn nfxt.study(info);
            }
        }
    }

    /**
     * Hbndlfs tif durly-brbdf stylf rfpftition witi b spfdififd minimum bnd
     * mbximum oddurrfndfs. Tif * qubntififr is ibndlfd bs b spfdibl dbsf.
     * Tiis dlbss ibndlfs tif tirff typfs.
     */
    stbtid finbl dlbss Curly fxtfnds Nodf {
        Nodf btom;
        int typf;
        int dmin;
        int dmbx;

        Curly(Nodf nodf, int dmin, int dmbx, int typf) {
            tiis.btom = nodf;
            tiis.typf = typf;
            tiis.dmin = dmin;
            tiis.dmbx = dmbx;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int j;
            for (j = 0; j < dmin; j++) {
                if (btom.mbtdi(mbtdifr, i, sfq)) {
                    i = mbtdifr.lbst;
                    dontinuf;
                }
                rfturn fblsf;
            }
            if (typf == GREEDY)
                rfturn mbtdi0(mbtdifr, i, j, sfq);
            flsf if (typf == LAZY)
                rfturn mbtdi1(mbtdifr, i, j, sfq);
            flsf
                rfturn mbtdi2(mbtdifr, i, j, sfq);
        }
        // Grffdy mbtdi.
        // i is tif indfx to stbrt mbtdiing bt
        // j is tif numbfr of btoms tibt ibvf mbtdifd
        boolfbn mbtdi0(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            if (j >= dmbx) {
                // Wf ibvf mbtdifd tif mbximum... dontinuf witi tif rfst of
                // tif rfgulbr fxprfssion
                rfturn nfxt.mbtdi(mbtdifr, i, sfq);
            }
            int bbdkLimit = j;
            wiilf (btom.mbtdi(mbtdifr, i, sfq)) {
                // k is tif lfngti of tiis mbtdi
                int k = mbtdifr.lbst - i;
                if (k == 0) // Zfro lfngti mbtdi
                    brfbk;
                // Movf up indfx bnd numbfr mbtdifd
                i = mbtdifr.lbst;
                j++;
                // Wf brf grffdy so mbtdi bs mbny bs wf dbn
                wiilf (j < dmbx) {
                    if (!btom.mbtdi(mbtdifr, i, sfq))
                        brfbk;
                    if (i + k != mbtdifr.lbst) {
                        if (mbtdi0(mbtdifr, mbtdifr.lbst, j+1, sfq))
                            rfturn truf;
                        brfbk;
                    }
                    i += k;
                    j++;
                }
                // Hbndlf bbdking off if mbtdi fbils
                wiilf (j >= bbdkLimit) {
                   if (nfxt.mbtdi(mbtdifr, i, sfq))
                        rfturn truf;
                    i -= k;
                    j--;
                }
                rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        // Rfludtbnt mbtdi. At tiis point, tif minimum ibs bffn sbtisfifd.
        // i is tif indfx to stbrt mbtdiing bt
        // j is tif numbfr of btoms tibt ibvf mbtdifd
        boolfbn mbtdi1(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            for (;;) {
                // Try finisiing mbtdi witiout donsuming bny morf
                if (nfxt.mbtdi(mbtdifr, i, sfq))
                    rfturn truf;
                // At tif mbximum, no mbtdi found
                if (j >= dmbx)
                    rfturn fblsf;
                // Okby, must try onf morf btom
                if (!btom.mbtdi(mbtdifr, i, sfq))
                    rfturn fblsf;
                // If wf ibvfn't movfd forwbrd tifn must brfbk out
                if (i == mbtdifr.lbst)
                    rfturn fblsf;
                // Movf up indfx bnd numbfr mbtdifd
                i = mbtdifr.lbst;
                j++;
            }
        }
        boolfbn mbtdi2(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            for (; j < dmbx; j++) {
                if (!btom.mbtdi(mbtdifr, i, sfq))
                    brfbk;
                if (i == mbtdifr.lbst)
                    brfbk;
                i = mbtdifr.lbst;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            // Sbvf originbl info
            int minL = info.minLfngti;
            int mbxL = info.mbxLfngti;
            boolfbn mbxV = info.mbxVblid;
            boolfbn dftm = info.dftfrministid;
            info.rfsft();

            btom.study(info);

            int tfmp = info.minLfngti * dmin + minL;
            if (tfmp < minL) {
                tfmp = 0xFFFFFFF; // brbitrbry lbrgf numbfr
            }
            info.minLfngti = tfmp;

            if (mbxV & info.mbxVblid) {
                tfmp = info.mbxLfngti * dmbx + mbxL;
                info.mbxLfngti = tfmp;
                if (tfmp < mbxL) {
                    info.mbxVblid = fblsf;
                }
            } flsf {
                info.mbxVblid = fblsf;
            }

            if (info.dftfrministid && dmin == dmbx)
                info.dftfrministid = dftm;
            flsf
                info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Hbndlfs tif durly-brbdf stylf rfpftition witi b spfdififd minimum bnd
     * mbximum oddurrfndfs in dftfrministid dbsfs. Tiis is bn itfrbtivf
     * optimizbtion ovfr tif Prolog bnd Loop systfm wiidi would ibndlf tiis
     * in b rfdursivf wby. Tif * qubntififr is ibndlfd bs b spfdibl dbsf.
     * If dbpturf is truf tifn tiis dlbss sbvfs group sfttings bnd fnsurfs
     * tibt groups brf unsft wifn bbdking off of b group mbtdi.
     */
    stbtid finbl dlbss GroupCurly fxtfnds Nodf {
        Nodf btom;
        int typf;
        int dmin;
        int dmbx;
        int lodblIndfx;
        int groupIndfx;
        boolfbn dbpturf;

        GroupCurly(Nodf nodf, int dmin, int dmbx, int typf, int lodbl,
                   int group, boolfbn dbpturf) {
            tiis.btom = nodf;
            tiis.typf = typf;
            tiis.dmin = dmin;
            tiis.dmbx = dmbx;
            tiis.lodblIndfx = lodbl;
            tiis.groupIndfx = group;
            tiis.dbpturf = dbpturf;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] groups = mbtdifr.groups;
            int[] lodbls = mbtdifr.lodbls;
            int sbvf0 = lodbls[lodblIndfx];
            int sbvf1 = 0;
            int sbvf2 = 0;

            if (dbpturf) {
                sbvf1 = groups[groupIndfx];
                sbvf2 = groups[groupIndfx+1];
            }

            // Notify GroupTbil tifrf is no nffd to sftup group info
            // bfdbusf it will bf sft ifrf
            lodbls[lodblIndfx] = -1;

            boolfbn rft = truf;
            for (int j = 0; j < dmin; j++) {
                if (btom.mbtdi(mbtdifr, i, sfq)) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = mbtdifr.lbst;
                    }
                    i = mbtdifr.lbst;
                } flsf {
                    rft = fblsf;
                    brfbk;
                }
            }
            if (rft) {
                if (typf == GREEDY) {
                    rft = mbtdi0(mbtdifr, i, dmin, sfq);
                } flsf if (typf == LAZY) {
                    rft = mbtdi1(mbtdifr, i, dmin, sfq);
                } flsf {
                    rft = mbtdi2(mbtdifr, i, dmin, sfq);
                }
            }
            if (!rft) {
                lodbls[lodblIndfx] = sbvf0;
                if (dbpturf) {
                    groups[groupIndfx] = sbvf1;
                    groups[groupIndfx+1] = sbvf2;
                }
            }
            rfturn rft;
        }
        // Aggrfssivf group mbtdi
        boolfbn mbtdi0(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            // don't bbdk off pbssing tif stbrting "j"
            int min = j;
            int[] groups = mbtdifr.groups;
            int sbvf0 = 0;
            int sbvf1 = 0;
            if (dbpturf) {
                sbvf0 = groups[groupIndfx];
                sbvf1 = groups[groupIndfx+1];
            }
            for (;;) {
                if (j >= dmbx)
                    brfbk;
                if (!btom.mbtdi(mbtdifr, i, sfq))
                    brfbk;
                int k = mbtdifr.lbst - i;
                if (k <= 0) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = i + k;
                    }
                    i = i + k;
                    brfbk;
                }
                for (;;) {
                    if (dbpturf) {
                        groups[groupIndfx] = i;
                        groups[groupIndfx+1] = i + k;
                    }
                    i = i + k;
                    if (++j >= dmbx)
                        brfbk;
                    if (!btom.mbtdi(mbtdifr, i, sfq))
                        brfbk;
                    if (i + k != mbtdifr.lbst) {
                        if (mbtdi0(mbtdifr, i, j, sfq))
                            rfturn truf;
                        brfbk;
                    }
                }
                wiilf (j > min) {
                    if (nfxt.mbtdi(mbtdifr, i, sfq)) {
                        if (dbpturf) {
                            groups[groupIndfx+1] = i;
                            groups[groupIndfx] = i - k;
                        }
                        rfturn truf;
                    }
                    // bbdking off
                    i = i - k;
                    if (dbpturf) {
                        groups[groupIndfx+1] = i;
                        groups[groupIndfx] = i - k;
                    }
                    j--;

                }
                brfbk;
            }
            if (dbpturf) {
                groups[groupIndfx] = sbvf0;
                groups[groupIndfx+1] = sbvf1;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        // Rfludtbnt mbtdiing
        boolfbn mbtdi1(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            for (;;) {
                if (nfxt.mbtdi(mbtdifr, i, sfq))
                    rfturn truf;
                if (j >= dmbx)
                    rfturn fblsf;
                if (!btom.mbtdi(mbtdifr, i, sfq))
                    rfturn fblsf;
                if (i == mbtdifr.lbst)
                    rfturn fblsf;
                if (dbpturf) {
                    mbtdifr.groups[groupIndfx] = i;
                    mbtdifr.groups[groupIndfx+1] = mbtdifr.lbst;
                }
                i = mbtdifr.lbst;
                j++;
            }
        }
        // Possfssivf mbtdiing
        boolfbn mbtdi2(Mbtdifr mbtdifr, int i, int j, CibrSfqufndf sfq) {
            for (; j < dmbx; j++) {
                if (!btom.mbtdi(mbtdifr, i, sfq)) {
                    brfbk;
                }
                if (dbpturf) {
                    mbtdifr.groups[groupIndfx] = i;
                    mbtdifr.groups[groupIndfx+1] = mbtdifr.lbst;
                }
                if (i == mbtdifr.lbst) {
                    brfbk;
                }
                i = mbtdifr.lbst;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            // Sbvf originbl info
            int minL = info.minLfngti;
            int mbxL = info.mbxLfngti;
            boolfbn mbxV = info.mbxVblid;
            boolfbn dftm = info.dftfrministid;
            info.rfsft();

            btom.study(info);

            int tfmp = info.minLfngti * dmin + minL;
            if (tfmp < minL) {
                tfmp = 0xFFFFFFF; // Arbitrbry lbrgf numbfr
            }
            info.minLfngti = tfmp;

            if (mbxV & info.mbxVblid) {
                tfmp = info.mbxLfngti * dmbx + mbxL;
                info.mbxLfngti = tfmp;
                if (tfmp < mbxL) {
                    info.mbxVblid = fblsf;
                }
            } flsf {
                info.mbxVblid = fblsf;
            }

            if (info.dftfrministid && dmin == dmbx) {
                info.dftfrministid = dftm;
            } flsf {
                info.dftfrministid = fblsf;
            }
            rfturn nfxt.study(info);
        }
    }

    /**
     * A Gubrd nodf bt tif fnd of fbdi btom nodf in b Brbndi. It
     * sfrvfs tif purposf of dibining tif "mbtdi" opfrbtion to
     * "nfxt" but not tif "study", so wf dbn dollfdt tif TrffInfo
     * of fbdi btom nodf witiout indluding tif TrffInfo of tif
     * "nfxt".
     */
    stbtid finbl dlbss BrbndiConn fxtfnds Nodf {
        BrbndiConn() {};
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            rfturn info.dftfrministid;
        }
    }

    /**
     * Hbndlfs tif brbndiing of bltfrnbtions. Notf tiis is blso usfd for
     * tif ? qubntififr to brbndi bftwffn tif dbsf wifrf it mbtdifs ondf
     * bnd wifrf it dofs not oddur.
     */
    stbtid finbl dlbss Brbndi fxtfnds Nodf {
        Nodf[] btoms = nfw Nodf[2];
        int sizf = 2;
        Nodf donn;
        Brbndi(Nodf first, Nodf sfdond, Nodf brbndiConn) {
            donn = brbndiConn;
            btoms[0] = first;
            btoms[1] = sfdond;
        }

        void bdd(Nodf nodf) {
            if (sizf >= btoms.lfngti) {
                Nodf[] tmp = nfw Nodf[btoms.lfngti*2];
                Systfm.brrbydopy(btoms, 0, tmp, 0, btoms.lfngti);
                btoms = tmp;
            }
            btoms[sizf++] = nodf;
        }

        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            for (int n = 0; n < sizf; n++) {
                if (btoms[n] == null) {
                    if (donn.nfxt.mbtdi(mbtdifr, i, sfq))
                        rfturn truf;
                } flsf if (btoms[n].mbtdi(mbtdifr, i, sfq)) {
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        boolfbn study(TrffInfo info) {
            int minL = info.minLfngti;
            int mbxL = info.mbxLfngti;
            boolfbn mbxV = info.mbxVblid;

            int minL2 = Intfgfr.MAX_VALUE; //brbitrbry lbrgf fnougi num
            int mbxL2 = -1;
            for (int n = 0; n < sizf; n++) {
                info.rfsft();
                if (btoms[n] != null)
                    btoms[n].study(info);
                minL2 = Mbti.min(minL2, info.minLfngti);
                mbxL2 = Mbti.mbx(mbxL2, info.mbxLfngti);
                mbxV = (mbxV & info.mbxVblid);
            }

            minL += minL2;
            mbxL += mbxL2;

            info.rfsft();
            donn.nfxt.study(info);

            info.minLfngti += minL;
            info.mbxLfngti += mbxL;
            info.mbxVblid &= mbxV;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Tif GroupHfbd sbvfs tif lodbtion wifrf tif group bfgins in tif lodbls
     * bnd rfstorfs tifm wifn tif mbtdi is donf.
     *
     * Tif mbtdiRff is usfd wifn b rfffrfndf to tiis group is bddfssfd lbtfr
     * in tif fxprfssion. Tif lodbls will ibvf b nfgbtivf vbluf in tifm to
     * indidbtf tibt wf do not wbnt to unsft tif group if tif rfffrfndf
     * dofsn't mbtdi.
     */
    stbtid finbl dlbss GroupHfbd fxtfnds Nodf {
        int lodblIndfx;
        GroupHfbd(int lodblCount) {
            lodblIndfx = lodblCount;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvf = mbtdifr.lodbls[lodblIndfx];
            mbtdifr.lodbls[lodblIndfx] = i;
            boolfbn rft = nfxt.mbtdi(mbtdifr, i, sfq);
            mbtdifr.lodbls[lodblIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn mbtdiRff(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvf = mbtdifr.lodbls[lodblIndfx];
            mbtdifr.lodbls[lodblIndfx] = ~i; // HACK
            boolfbn rft = nfxt.mbtdi(mbtdifr, i, sfq);
            mbtdifr.lodbls[lodblIndfx] = sbvf;
            rfturn rft;
        }
    }

    /**
     * Rfdursivf rfffrfndf to b group in tif rfgulbr fxprfssion. It dblls
     * mbtdiRff bfdbusf if tif rfffrfndf fbils to mbtdi wf would not unsft
     * tif group.
     */
    stbtid finbl dlbss GroupRff fxtfnds Nodf {
        GroupHfbd ifbd;
        GroupRff(GroupHfbd ifbd) {
            tiis.ifbd = ifbd;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            rfturn ifbd.mbtdiRff(mbtdifr, i, sfq)
                && nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Tif GroupTbil ibndlfs tif sftting of group bfginning bnd fnding
     * lodbtions wifn groups brf suddfssfully mbtdifd. It must blso bf bblf to
     * unsft groups tibt ibvf to bf bbdkfd off of.
     *
     * Tif GroupTbil nodf is blso usfd wifn b prfvious group is rfffrfndfd,
     * bnd in tibt dbsf no group informbtion nffds to bf sft.
     */
    stbtid finbl dlbss GroupTbil fxtfnds Nodf {
        int lodblIndfx;
        int groupIndfx;
        GroupTbil(int lodblCount, int groupCount) {
            lodblIndfx = lodblCount;
            groupIndfx = groupCount + groupCount;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int tmp = mbtdifr.lodbls[lodblIndfx];
            if (tmp >= 0) { // Tiis is tif normbl group dbsf.
                // Sbvf tif group so wf dbn unsft it if it
                // bbdks off of b mbtdi.
                int groupStbrt = mbtdifr.groups[groupIndfx];
                int groupEnd = mbtdifr.groups[groupIndfx+1];

                mbtdifr.groups[groupIndfx] = tmp;
                mbtdifr.groups[groupIndfx+1] = i;
                if (nfxt.mbtdi(mbtdifr, i, sfq)) {
                    rfturn truf;
                }
                mbtdifr.groups[groupIndfx] = groupStbrt;
                mbtdifr.groups[groupIndfx+1] = groupEnd;
                rfturn fblsf;
            } flsf {
                // Tiis is b group rfffrfndf dbsf. Wf don't nffd to sbvf bny
                // group info bfdbusf it isn't rfblly b group.
                mbtdifr.lbst = i;
                rfturn truf;
            }
        }
    }

    /**
     * Tiis sfts up b loop to ibndlf b rfdursivf qubntififr strudturf.
     */
    stbtid finbl dlbss Prolog fxtfnds Nodf {
        Loop loop;
        Prolog(Loop loop) {
            tiis.loop = loop;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            rfturn loop.mbtdiInit(mbtdifr, i, sfq);
        }
        boolfbn study(TrffInfo info) {
            rfturn loop.study(info);
        }
    }

    /**
     * Hbndlfs tif rfpftition dount for b grffdy Curly. Tif mbtdiInit
     * is dbllfd from tif Prolog to sbvf tif indfx of wifrf tif group
     * bfginning is storfd. A zfro lfngti group difdk oddurs in tif
     * normbl mbtdi but is skippfd in tif mbtdiInit.
     */
    stbtid dlbss Loop fxtfnds Nodf {
        Nodf body;
        int dountIndfx; // lodbl dount indfx in mbtdifr lodbls
        int bfginIndfx; // group bfginning indfx
        int dmin, dmbx;
        Loop(int dountIndfx, int bfginIndfx) {
            tiis.dountIndfx = dountIndfx;
            tiis.bfginIndfx = bfginIndfx;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            // Avoid infinitf loop in zfro-lfngti dbsf.
            if (i > mbtdifr.lodbls[bfginIndfx]) {
                int dount = mbtdifr.lodbls[dountIndfx];

                // Tiis blodk is for bfforf wf rfbdi tif minimum
                // itfrbtions rfquirfd for tif loop to mbtdi
                if (dount < dmin) {
                    mbtdifr.lodbls[dountIndfx] = dount + 1;
                    boolfbn b = body.mbtdi(mbtdifr, i, sfq);
                    // If mbtdi fbilfd wf must bbdktrbdk, so
                    // tif loop dount siould NOT bf indrfmfntfd
                    if (!b)
                        mbtdifr.lodbls[dountIndfx] = dount;
                    // Rfturn suddfss or fbilurf sindf wf brf undfr
                    // minimum
                    rfturn b;
                }
                // Tiis blodk is for bftfr wf ibvf tif minimum
                // itfrbtions rfquirfd for tif loop to mbtdi
                if (dount < dmbx) {
                    mbtdifr.lodbls[dountIndfx] = dount + 1;
                    boolfbn b = body.mbtdi(mbtdifr, i, sfq);
                    // If mbtdi fbilfd wf must bbdktrbdk, so
                    // tif loop dount siould NOT bf indrfmfntfd
                    if (!b)
                        mbtdifr.lodbls[dountIndfx] = dount;
                    flsf
                        rfturn truf;
                }
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn mbtdiInit(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvf = mbtdifr.lodbls[dountIndfx];
            boolfbn rft = fblsf;
            if (0 < dmin) {
                mbtdifr.lodbls[dountIndfx] = 1;
                rft = body.mbtdi(mbtdifr, i, sfq);
            } flsf if (0 < dmbx) {
                mbtdifr.lodbls[dountIndfx] = 1;
                rft = body.mbtdi(mbtdifr, i, sfq);
                if (rft == fblsf)
                    rft = nfxt.mbtdi(mbtdifr, i, sfq);
            } flsf {
                rft = nfxt.mbtdi(mbtdifr, i, sfq);
            }
            mbtdifr.lodbls[dountIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Hbndlfs tif rfpftition dount for b rfludtbnt Curly. Tif mbtdiInit
     * is dbllfd from tif Prolog to sbvf tif indfx of wifrf tif group
     * bfginning is storfd. A zfro lfngti group difdk oddurs in tif
     * normbl mbtdi but is skippfd in tif mbtdiInit.
     */
    stbtid finbl dlbss LbzyLoop fxtfnds Loop {
        LbzyLoop(int dountIndfx, int bfginIndfx) {
            supfr(dountIndfx, bfginIndfx);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            // Cifdk for zfro lfngti group
            if (i > mbtdifr.lodbls[bfginIndfx]) {
                int dount = mbtdifr.lodbls[dountIndfx];
                if (dount < dmin) {
                    mbtdifr.lodbls[dountIndfx] = dount + 1;
                    boolfbn rfsult = body.mbtdi(mbtdifr, i, sfq);
                    // If mbtdi fbilfd wf must bbdktrbdk, so
                    // tif loop dount siould NOT bf indrfmfntfd
                    if (!rfsult)
                        mbtdifr.lodbls[dountIndfx] = dount;
                    rfturn rfsult;
                }
                if (nfxt.mbtdi(mbtdifr, i, sfq))
                    rfturn truf;
                if (dount < dmbx) {
                    mbtdifr.lodbls[dountIndfx] = dount + 1;
                    boolfbn rfsult = body.mbtdi(mbtdifr, i, sfq);
                    // If mbtdi fbilfd wf must bbdktrbdk, so
                    // tif loop dount siould NOT bf indrfmfntfd
                    if (!rfsult)
                        mbtdifr.lodbls[dountIndfx] = dount;
                    rfturn rfsult;
                }
                rfturn fblsf;
            }
            rfturn nfxt.mbtdi(mbtdifr, i, sfq);
        }
        boolfbn mbtdiInit(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvf = mbtdifr.lodbls[dountIndfx];
            boolfbn rft = fblsf;
            if (0 < dmin) {
                mbtdifr.lodbls[dountIndfx] = 1;
                rft = body.mbtdi(mbtdifr, i, sfq);
            } flsf if (nfxt.mbtdi(mbtdifr, i, sfq)) {
                rft = truf;
            } flsf if (0 < dmbx) {
                mbtdifr.lodbls[dountIndfx] = 1;
                rft = body.mbtdi(mbtdifr, i, sfq);
            }
            mbtdifr.lodbls[dountIndfx] = sbvf;
            rfturn rft;
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn fblsf;
        }
    }

    /**
     * Rfffrs to b group in tif rfgulbr fxprfssion. Attfmpts to mbtdi
     * wibtfvfr tif group rfffrrfd to lbst mbtdifd.
     */
    stbtid dlbss BbdkRff fxtfnds Nodf {
        int groupIndfx;
        BbdkRff(int groupCount) {
            supfr();
            groupIndfx = groupCount + groupCount;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int j = mbtdifr.groups[groupIndfx];
            int k = mbtdifr.groups[groupIndfx+1];

            int groupSizf = k - j;
            // If tif rfffrfndfd group didn't mbtdi, nfitifr dbn tiis
            if (j < 0)
                rfturn fblsf;

            // If tifrf isn't fnougi input lfft no mbtdi
            if (i + groupSizf > mbtdifr.to) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }
            // Cifdk fbdi nfw dibr to mbkf surf it mbtdifs wibt tif group
            // rfffrfndfd mbtdifd lbst timf bround
            for (int indfx=0; indfx<groupSizf; indfx++)
                if (sfq.dibrAt(i+indfx) != sfq.dibrAt(j+indfx))
                    rfturn fblsf;

            rfturn nfxt.mbtdi(mbtdifr, i+groupSizf, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    stbtid dlbss CIBbdkRff fxtfnds Nodf {
        int groupIndfx;
        boolfbn doUnidodfCbsf;
        CIBbdkRff(int groupCount, boolfbn doUnidodfCbsf) {
            supfr();
            groupIndfx = groupCount + groupCount;
            tiis.doUnidodfCbsf = doUnidodfCbsf;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int j = mbtdifr.groups[groupIndfx];
            int k = mbtdifr.groups[groupIndfx+1];

            int groupSizf = k - j;

            // If tif rfffrfndfd group didn't mbtdi, nfitifr dbn tiis
            if (j < 0)
                rfturn fblsf;

            // If tifrf isn't fnougi input lfft no mbtdi
            if (i + groupSizf > mbtdifr.to) {
                mbtdifr.iitEnd = truf;
                rfturn fblsf;
            }

            // Cifdk fbdi nfw dibr to mbkf surf it mbtdifs wibt tif group
            // rfffrfndfd mbtdifd lbst timf bround
            int x = i;
            for (int indfx=0; indfx<groupSizf; indfx++) {
                int d1 = Cibrbdtfr.dodfPointAt(sfq, x);
                int d2 = Cibrbdtfr.dodfPointAt(sfq, j);
                if (d1 != d2) {
                    if (doUnidodfCbsf) {
                        int dd1 = Cibrbdtfr.toUppfrCbsf(d1);
                        int dd2 = Cibrbdtfr.toUppfrCbsf(d2);
                        if (dd1 != dd2 &&
                            Cibrbdtfr.toLowfrCbsf(dd1) !=
                            Cibrbdtfr.toLowfrCbsf(dd2))
                            rfturn fblsf;
                    } flsf {
                        if (ASCII.toLowfr(d1) != ASCII.toLowfr(d2))
                            rfturn fblsf;
                    }
                }
                x += Cibrbdtfr.dibrCount(d1);
                j += Cibrbdtfr.dibrCount(d2);
            }

            rfturn nfxt.mbtdi(mbtdifr, i+groupSizf, sfq);
        }
        boolfbn study(TrffInfo info) {
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Sfbrdifs until tif nfxt instbndf of its btom. Tiis is usfful for
     * finding tif btom fffidifntly witiout pbssing bn instbndf of it
     * (grffdy problfm) bnd witiout b lot of wbstfd sfbrdi timf (rfludtbnt
     * problfm).
     */
    stbtid finbl dlbss First fxtfnds Nodf {
        Nodf btom;
        First(Nodf nodf) {
            tiis.btom = BnM.optimizf(nodf);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (btom instbndfof BnM) {
                rfturn btom.mbtdi(mbtdifr, i, sfq)
                    && nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq);
            }
            for (;;) {
                if (i > mbtdifr.to) {
                    mbtdifr.iitEnd = truf;
                    rfturn fblsf;
                }
                if (btom.mbtdi(mbtdifr, i, sfq)) {
                    rfturn nfxt.mbtdi(mbtdifr, mbtdifr.lbst, sfq);
                }
                i += dountCibrs(sfq, i, 1);
                mbtdifr.first++;
            }
        }
        boolfbn study(TrffInfo info) {
            btom.study(info);
            info.mbxVblid = fblsf;
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    stbtid finbl dlbss Conditionbl fxtfnds Nodf {
        Nodf dond, yfs, not;
        Conditionbl(Nodf dond, Nodf yfs, Nodf not) {
            tiis.dond = dond;
            tiis.yfs = yfs;
            tiis.not = not;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            if (dond.mbtdi(mbtdifr, i, sfq)) {
                rfturn yfs.mbtdi(mbtdifr, i, sfq);
            } flsf {
                rfturn not.mbtdi(mbtdifr, i, sfq);
            }
        }
        boolfbn study(TrffInfo info) {
            int minL = info.minLfngti;
            int mbxL = info.mbxLfngti;
            boolfbn mbxV = info.mbxVblid;
            info.rfsft();
            yfs.study(info);

            int minL2 = info.minLfngti;
            int mbxL2 = info.mbxLfngti;
            boolfbn mbxV2 = info.mbxVblid;
            info.rfsft();
            not.study(info);

            info.minLfngti = minL + Mbti.min(minL2, info.minLfngti);
            info.mbxLfngti = mbxL + Mbti.mbx(mbxL2, info.mbxLfngti);
            info.mbxVblid = (mbxV & mbxV2 & info.mbxVblid);
            info.dftfrministid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Zfro widti positivf lookbifbd.
     */
    stbtid finbl dlbss Pos fxtfnds Nodf {
        Nodf dond;
        Pos(Nodf dond) {
            tiis.dond = dond;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvfdTo = mbtdifr.to;
            boolfbn donditionMbtdifd = fblsf;

            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbifbd
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.to = mbtdifr.gftTfxtLfngti();
            try {
                donditionMbtdifd = dond.mbtdi(mbtdifr, i, sfq);
            } finblly {
                // Rfinstbtf rfgion boundbrifs
                mbtdifr.to = sbvfdTo;
            }
            rfturn donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Zfro widti nfgbtivf lookbifbd.
     */
    stbtid finbl dlbss Nfg fxtfnds Nodf {
        Nodf dond;
        Nfg(Nodf dond) {
            tiis.dond = dond;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvfdTo = mbtdifr.to;
            boolfbn donditionMbtdifd = fblsf;

            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbifbd
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.to = mbtdifr.gftTfxtLfngti();
            try {
                if (i < mbtdifr.to) {
                    donditionMbtdifd = !dond.mbtdi(mbtdifr, i, sfq);
                } flsf {
                    // If b nfgbtivf lookbifbd suddffds tifn morf input
                    // dould dbusf it to fbil!
                    mbtdifr.rfquirfEnd = truf;
                    donditionMbtdifd = !dond.mbtdi(mbtdifr, i, sfq);
                }
            } finblly {
                // Rfinstbtf rfgion boundbrifs
                mbtdifr.to = sbvfdTo;
            }
            rfturn donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * For usf witi lookbfiinds; mbtdifs tif position wifrf tif lookbfiind
     * wbs fndountfrfd.
     */
    stbtid Nodf lookbfiindEnd = nfw Nodf() {
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            rfturn i == mbtdifr.lookbfiindTo;
        }
    };

    /**
     * Zfro widti positivf lookbfiind.
     */
    stbtid dlbss Bfiind fxtfnds Nodf {
        Nodf dond;
        int rmbx, rmin;
        Bfiind(Nodf dond, int rmbx, int rmin) {
            tiis.dond = dond;
            tiis.rmbx = rmbx;
            tiis.rmin = rmin;
        }

        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvfdFrom = mbtdifr.from;
            boolfbn donditionMbtdifd = fblsf;
            int stbrtIndfx = (!mbtdifr.trbnspbrfntBounds) ?
                             mbtdifr.from : 0;
            int from = Mbti.mbx(i - rmbx, stbrtIndfx);
            // Sft fnd boundbry
            int sbvfdLBT = mbtdifr.lookbfiindTo;
            mbtdifr.lookbfiindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfiind
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.from = 0;
            for (int j = i - rmin; !donditionMbtdifd && j >= from; j--) {
                donditionMbtdifd = dond.mbtdi(mbtdifr, j, sfq);
            }
            mbtdifr.from = sbvfdFrom;
            mbtdifr.lookbfiindTo = sbvfdLBT;
            rfturn donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Zfro widti positivf lookbfiind, indluding supplfmfntbry
     * dibrbdtfrs or unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss BfiindS fxtfnds Bfiind {
        BfiindS(Nodf dond, int rmbx, int rmin) {
            supfr(dond, rmbx, rmin);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int rmbxCibrs = dountCibrs(sfq, i, -rmbx);
            int rminCibrs = dountCibrs(sfq, i, -rmin);
            int sbvfdFrom = mbtdifr.from;
            int stbrtIndfx = (!mbtdifr.trbnspbrfntBounds) ?
                             mbtdifr.from : 0;
            boolfbn donditionMbtdifd = fblsf;
            int from = Mbti.mbx(i - rmbxCibrs, stbrtIndfx);
            // Sft fnd boundbry
            int sbvfdLBT = mbtdifr.lookbfiindTo;
            mbtdifr.lookbfiindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfiind
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.from = 0;

            for (int j = i - rminCibrs;
                 !donditionMbtdifd && j >= from;
                 j -= j>from ? dountCibrs(sfq, j, -1) : 1) {
                donditionMbtdifd = dond.mbtdi(mbtdifr, j, sfq);
            }
            mbtdifr.from = sbvfdFrom;
            mbtdifr.lookbfiindTo = sbvfdLBT;
            rfturn donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Zfro widti nfgbtivf lookbfiind.
     */
    stbtid dlbss NotBfiind fxtfnds Nodf {
        Nodf dond;
        int rmbx, rmin;
        NotBfiind(Nodf dond, int rmbx, int rmin) {
            tiis.dond = dond;
            tiis.rmbx = rmbx;
            tiis.rmin = rmin;
        }

        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int sbvfdLBT = mbtdifr.lookbfiindTo;
            int sbvfdFrom = mbtdifr.from;
            boolfbn donditionMbtdifd = fblsf;
            int stbrtIndfx = (!mbtdifr.trbnspbrfntBounds) ?
                             mbtdifr.from : 0;
            int from = Mbti.mbx(i - rmbx, stbrtIndfx);
            mbtdifr.lookbfiindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfiind
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.from = 0;
            for (int j = i - rmin; !donditionMbtdifd && j >= from; j--) {
                donditionMbtdifd = dond.mbtdi(mbtdifr, j, sfq);
            }
            // Rfinstbtf rfgion boundbrifs
            mbtdifr.from = sbvfdFrom;
            mbtdifr.lookbfiindTo = sbvfdLBT;
            rfturn !donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Zfro widti nfgbtivf lookbfiind, indluding supplfmfntbry
     * dibrbdtfrs or unpbirfd surrogbtfs.
     */
    stbtid finbl dlbss NotBfiindS fxtfnds NotBfiind {
        NotBfiindS(Nodf dond, int rmbx, int rmin) {
            supfr(dond, rmbx, rmin);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int rmbxCibrs = dountCibrs(sfq, i, -rmbx);
            int rminCibrs = dountCibrs(sfq, i, -rmin);
            int sbvfdFrom = mbtdifr.from;
            int sbvfdLBT = mbtdifr.lookbfiindTo;
            boolfbn donditionMbtdifd = fblsf;
            int stbrtIndfx = (!mbtdifr.trbnspbrfntBounds) ?
                             mbtdifr.from : 0;
            int from = Mbti.mbx(i - rmbxCibrs, stbrtIndfx);
            mbtdifr.lookbfiindTo = i;
            // Rflbx trbnspbrfnt rfgion boundbrifs for lookbfiind
            if (mbtdifr.trbnspbrfntBounds)
                mbtdifr.from = 0;
            for (int j = i - rminCibrs;
                 !donditionMbtdifd && j >= from;
                 j -= j>from ? dountCibrs(sfq, j, -1) : 1) {
                donditionMbtdifd = dond.mbtdi(mbtdifr, j, sfq);
            }
            //Rfinstbtf rfgion boundbrifs
            mbtdifr.from = sbvfdFrom;
            mbtdifr.lookbfiindTo = sbvfdLBT;
            rfturn !donditionMbtdifd && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Rfturns tif sft union of two CibrPropfrty nodfs.
     */
    privbtf stbtid CibrPropfrty union(finbl CibrPropfrty lis,
                                      finbl CibrPropfrty ris) {
        rfturn nfw CibrPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn lis.isSbtisfifdBy(di) || ris.isSbtisfifdBy(di);}};
    }

    /**
     * Rfturns tif sft intfrsfdtion of two CibrPropfrty nodfs.
     */
    privbtf stbtid CibrPropfrty intfrsfdtion(finbl CibrPropfrty lis,
                                             finbl CibrPropfrty ris) {
        rfturn nfw CibrPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn lis.isSbtisfifdBy(di) && ris.isSbtisfifdBy(di);}};
    }

    /**
     * Rfturns tif sft difffrfndf of two CibrPropfrty nodfs.
     */
    privbtf stbtid CibrPropfrty sftDifffrfndf(finbl CibrPropfrty lis,
                                              finbl CibrPropfrty ris) {
        rfturn nfw CibrPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn ! ris.isSbtisfifdBy(di) && lis.isSbtisfifdBy(di);}};
    }

    /**
     * Hbndlfs word boundbrifs. Indludfs b fifld to bllow tiis onf dlbss to
     * dfbl witi tif difffrfnt typfs of word boundbrifs wf dbn mbtdi. Tif word
     * dibrbdtfrs indludf undfrsdorfs, lfttfrs, bnd digits. Non spbding mbrks
     * dbn brf blso pbrt of b word if tify ibvf b bbsf dibrbdtfr, otifrwisf
     * tify brf ignorfd for purposfs of finding word boundbrifs.
     */
    stbtid finbl dlbss Bound fxtfnds Nodf {
        stbtid int LEFT = 0x1;
        stbtid int RIGHT= 0x2;
        stbtid int BOTH = 0x3;
        stbtid int NONE = 0x4;
        int typf;
        boolfbn usfUWORD;
        Bound(int n, boolfbn usfUWORD) {
            typf = n;
            tiis.usfUWORD = usfUWORD;
        }

        boolfbn isWord(int di) {
            rfturn usfUWORD ? UnidodfProp.WORD.is(di)
                            : (di == '_' || Cibrbdtfr.isLfttfrOrDigit(di));
        }

        int difdk(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int di;
            boolfbn lfft = fblsf;
            int stbrtIndfx = mbtdifr.from;
            int fndIndfx = mbtdifr.to;
            if (mbtdifr.trbnspbrfntBounds) {
                stbrtIndfx = 0;
                fndIndfx = mbtdifr.gftTfxtLfngti();
            }
            if (i > stbrtIndfx) {
                di = Cibrbdtfr.dodfPointBfforf(sfq, i);
                lfft = (isWord(di) ||
                    ((Cibrbdtfr.gftTypf(di) == Cibrbdtfr.NON_SPACING_MARK)
                     && ibsBbsfCibrbdtfr(mbtdifr, i-1, sfq)));
            }
            boolfbn rigit = fblsf;
            if (i < fndIndfx) {
                di = Cibrbdtfr.dodfPointAt(sfq, i);
                rigit = (isWord(di) ||
                    ((Cibrbdtfr.gftTypf(di) == Cibrbdtfr.NON_SPACING_MARK)
                     && ibsBbsfCibrbdtfr(mbtdifr, i, sfq)));
            } flsf {
                // Trifd to bddfss dibr pbst tif fnd
                mbtdifr.iitEnd = truf;
                // Tif bddition of bnotifr dibr dould wrfdk b boundbry
                mbtdifr.rfquirfEnd = truf;
            }
            rfturn ((lfft ^ rigit) ? (rigit ? LEFT : RIGHT) : NONE);
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            rfturn (difdk(mbtdifr, i, sfq) & typf) > 0
                && nfxt.mbtdi(mbtdifr, i, sfq);
        }
    }

    /**
     * Non spbding mbrks only dount bs word dibrbdtfrs in bounds dbldulbtions
     * if tify ibvf b bbsf dibrbdtfr.
     */
    privbtf stbtid boolfbn ibsBbsfCibrbdtfr(Mbtdifr mbtdifr, int i,
                                            CibrSfqufndf sfq)
    {
        int stbrt = (!mbtdifr.trbnspbrfntBounds) ?
            mbtdifr.from : 0;
        for (int x=i; x >= stbrt; x--) {
            int di = Cibrbdtfr.dodfPointAt(sfq, x);
            if (Cibrbdtfr.isLfttfrOrDigit(di))
                rfturn truf;
            if (Cibrbdtfr.gftTypf(di) == Cibrbdtfr.NON_SPACING_MARK)
                dontinuf;
            rfturn fblsf;
        }
        rfturn fblsf;
    }

    /**
     * Attfmpts to mbtdi b slidf in tif input using tif Boyfr-Moorf string
     * mbtdiing blgoritim. Tif blgoritim is bbsfd on tif idfb tibt tif
     * pbttfrn dbn bf siiftfd fbrtifr bifbd in tif sfbrdi tfxt if it is
     * mbtdifd rigit to lfft.
     * <p>
     * Tif pbttfrn is dompbrfd to tif input onf dibrbdtfr bt b timf, from
     * tif rigitmost dibrbdtfr in tif pbttfrn to tif lfft. If tif dibrbdtfrs
     * bll mbtdi tif pbttfrn ibs bffn found. If b dibrbdtfr dofs not mbtdi,
     * tif pbttfrn is siiftfd rigit b distbndf tibt is tif mbximum of two
     * fundtions, tif bbd dibrbdtfr siift bnd tif good suffix siift. Tiis
     * siift movfs tif bttfmptfd mbtdi position tirougi tif input morf
     * quidkly tibn b nbivf onf position bt b timf difdk.
     * <p>
     * Tif bbd dibrbdtfr siift is bbsfd on tif dibrbdtfr from tif tfxt tibt
     * did not mbtdi. If tif dibrbdtfr dofs not bppfbr in tif pbttfrn, tif
     * pbttfrn dbn bf siiftfd domplftfly bfyond tif bbd dibrbdtfr. If tif
     * dibrbdtfr dofs oddur in tif pbttfrn, tif pbttfrn dbn bf siiftfd to
     * linf tif pbttfrn up witi tif nfxt oddurrfndf of tibt dibrbdtfr.
     * <p>
     * Tif good suffix siift is bbsfd on tif idfb tibt somf subsft on tif rigit
     * sidf of tif pbttfrn ibs mbtdifd. Wifn b bbd dibrbdtfr is found, tif
     * pbttfrn dbn bf siiftfd rigit by tif pbttfrn lfngti if tif subsft dofs
     * not oddur bgbin in pbttfrn, or by tif bmount of distbndf to tif
     * nfxt oddurrfndf of tif subsft in tif pbttfrn.
     *
     * Boyfr-Moorf sfbrdi mftiods bdbptfd from dodf by Amy Yu.
     */
    stbtid dlbss BnM fxtfnds Nodf {
        int[] bufffr;
        int[] lbstOdd;
        int[] optoSft;

        /**
         * Prf dbldulbtfs brrbys nffdfd to gfnfrbtf tif bbd dibrbdtfr
         * siift bnd tif good suffix siift. Only tif lbst sfvfn bits
         * brf usfd to sff if dibrs mbtdi; Tiis kffps tif tbblfs smbll
         * bnd dovfrs tif ifbvily usfd ASCII rbngf, but oddbsionblly
         * rfsults in bn blibsfd mbtdi for tif bbd dibrbdtfr siift.
         */
        stbtid Nodf optimizf(Nodf nodf) {
            if (!(nodf instbndfof Slidf)) {
                rfturn nodf;
            }

            int[] srd = ((Slidf) nodf).bufffr;
            int pbttfrnLfngti = srd.lfngti;
            // Tif BM blgoritim rfquirfs b bit of ovfrifbd;
            // If tif pbttfrn is siort don't usf it, sindf
            // b siift lbrgfr tibn tif pbttfrn lfngti dbnnot
            // bf usfd bnywby.
            if (pbttfrnLfngti < 4) {
                rfturn nodf;
            }
            int i, j, k;
            int[] lbstOdd = nfw int[128];
            int[] optoSft = nfw int[pbttfrnLfngti];
            // Prfdbldulbtf pbrt of tif bbd dibrbdtfr siift
            // It is b tbblf for wifrf in tif pbttfrn fbdi
            // lowfr 7-bit vbluf oddurs
            for (i = 0; i < pbttfrnLfngti; i++) {
                lbstOdd[srd[i]&0x7F] = i + 1;
            }
            // Prfdbldulbtf tif good suffix siift
            // i is tif siift bmount bfing donsidfrfd
NEXT:       for (i = pbttfrnLfngti; i > 0; i--) {
                // j is tif bfginning indfx of suffix bfing donsidfrfd
                for (j = pbttfrnLfngti - 1; j >= i; j--) {
                    // Tfsting for good suffix
                    if (srd[j] == srd[j-i]) {
                        // srd[j..lfn] is b good suffix
                        optoSft[j-1] = i;
                    } flsf {
                        // No mbtdi. Tif brrby ibs blrfbdy bffn
                        // fillfd up witi dorrfdt vblufs bfforf.
                        dontinuf NEXT;
                    }
                }
                // Tiis fills up tif rfmbining of optoSft
                // bny suffix dbn not ibvf lbrgfr siift bmount
                // tifn its sub-suffix. Wiy???
                wiilf (j > 0) {
                    optoSft[--j] = i;
                }
            }
            // Sft tif gubrd vbluf bfdbusf of unidodf domprfssion
            optoSft[pbttfrnLfngti-1] = 1;
            if (nodf instbndfof SlidfS)
                rfturn nfw BnMS(srd, lbstOdd, optoSft, nodf.nfxt);
            rfturn nfw BnM(srd, lbstOdd, optoSft, nodf.nfxt);
        }
        BnM(int[] srd, int[] lbstOdd, int[] optoSft, Nodf nfxt) {
            tiis.bufffr = srd;
            tiis.lbstOdd = lbstOdd;
            tiis.optoSft = optoSft;
            tiis.nfxt = nfxt;
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] srd = bufffr;
            int pbttfrnLfngti = srd.lfngti;
            int lbst = mbtdifr.to - pbttfrnLfngti;

            // Loop ovfr bll possiblf mbtdi positions in tfxt
NEXT:       wiilf (i <= lbst) {
                // Loop ovfr pbttfrn from rigit to lfft
                for (int j = pbttfrnLfngti - 1; j >= 0; j--) {
                    int di = sfq.dibrAt(i+j);
                    if (di != srd[j]) {
                        // Siift sfbrdi to tif rigit by tif mbximum of tif
                        // bbd dibrbdtfr siift bnd tif good suffix siift
                        i += Mbti.mbx(j + 1 - lbstOdd[di&0x7F], optoSft[j]);
                        dontinuf NEXT;
                    }
                }
                // Entirf pbttfrn mbtdifd stbrting bt i
                mbtdifr.first = i;
                boolfbn rft = nfxt.mbtdi(mbtdifr, i + pbttfrnLfngti, sfq);
                if (rft) {
                    mbtdifr.first = i;
                    mbtdifr.groups[0] = mbtdifr.first;
                    mbtdifr.groups[1] = mbtdifr.lbst;
                    rfturn truf;
                }
                i++;
            }
            // BnM is only usfd bs tif lfbding nodf in tif unbndiorfd dbsf,
            // bnd it rfplbdfd its Stbrt() wiidi blwbys sfbrdifs to tif fnd
            // if it dofsn't find wibt it's looking for, so iitEnd is truf.
            mbtdifr.iitEnd = truf;
            rfturn fblsf;
        }
        boolfbn study(TrffInfo info) {
            info.minLfngti += bufffr.lfngti;
            info.mbxVblid = fblsf;
            rfturn nfxt.study(info);
        }
    }

    /**
     * Supplfmfntbry support vfrsion of BnM(). Unpbirfd surrogbtfs brf
     * blso ibndlfd by tiis dlbss.
     */
    stbtid finbl dlbss BnMS fxtfnds BnM {
        int lfngtiInCibrs;

        BnMS(int[] srd, int[] lbstOdd, int[] optoSft, Nodf nfxt) {
            supfr(srd, lbstOdd, optoSft, nfxt);
            for (int dp : bufffr) {
                lfngtiInCibrs += Cibrbdtfr.dibrCount(dp);
            }
        }
        boolfbn mbtdi(Mbtdifr mbtdifr, int i, CibrSfqufndf sfq) {
            int[] srd = bufffr;
            int pbttfrnLfngti = srd.lfngti;
            int lbst = mbtdifr.to - lfngtiInCibrs;

            // Loop ovfr bll possiblf mbtdi positions in tfxt
NEXT:       wiilf (i <= lbst) {
                // Loop ovfr pbttfrn from rigit to lfft
                int di;
                for (int j = dountCibrs(sfq, i, pbttfrnLfngti), x = pbttfrnLfngti - 1;
                     j > 0; j -= Cibrbdtfr.dibrCount(di), x--) {
                    di = Cibrbdtfr.dodfPointBfforf(sfq, i+j);
                    if (di != srd[x]) {
                        // Siift sfbrdi to tif rigit by tif mbximum of tif
                        // bbd dibrbdtfr siift bnd tif good suffix siift
                        int n = Mbti.mbx(x + 1 - lbstOdd[di&0x7F], optoSft[x]);
                        i += dountCibrs(sfq, i, n);
                        dontinuf NEXT;
                    }
                }
                // Entirf pbttfrn mbtdifd stbrting bt i
                mbtdifr.first = i;
                boolfbn rft = nfxt.mbtdi(mbtdifr, i + lfngtiInCibrs, sfq);
                if (rft) {
                    mbtdifr.first = i;
                    mbtdifr.groups[0] = mbtdifr.first;
                    mbtdifr.groups[1] = mbtdifr.lbst;
                    rfturn truf;
                }
                i += dountCibrs(sfq, i, 1);
            }
            mbtdifr.iitEnd = truf;
            rfturn fblsf;
        }
    }

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

    /**
     *  Tiis must bf tif vfry first initiblizfr.
     */
    stbtid Nodf bddfpt = nfw Nodf();

    stbtid Nodf lbstAddfpt = nfw LbstNodf();

    privbtf stbtid dlbss CibrPropfrtyNbmfs {

        stbtid CibrPropfrty dibrPropfrtyFor(String nbmf) {
            CibrPropfrtyFbdtory m = mbp.gft(nbmf);
            rfturn m == null ? null : m.mbkf();
        }

        privbtf stbtid bbstrbdt dlbss CibrPropfrtyFbdtory {
            bbstrbdt CibrPropfrty mbkf();
        }

        privbtf stbtid void dffCbtfgory(String nbmf,
                                        finbl int typfMbsk) {
            mbp.put(nbmf, nfw CibrPropfrtyFbdtory() {
                    CibrPropfrty mbkf() { rfturn nfw Cbtfgory(typfMbsk);}});
        }

        privbtf stbtid void dffRbngf(String nbmf,
                                     finbl int lowfr, finbl int uppfr) {
            mbp.put(nbmf, nfw CibrPropfrtyFbdtory() {
                    CibrPropfrty mbkf() { rfturn rbngfFor(lowfr, uppfr);}});
        }

        privbtf stbtid void dffCtypf(String nbmf,
                                     finbl int dtypf) {
            mbp.put(nbmf, nfw CibrPropfrtyFbdtory() {
                    CibrPropfrty mbkf() { rfturn nfw Ctypf(dtypf);}});
        }

        privbtf stbtid bbstrbdt dlbss ClonfbblfPropfrty
            fxtfnds CibrPropfrty implfmfnts Clonfbblf
        {
            publid ClonfbblfPropfrty dlonf() {
                try {
                    rfturn (ClonfbblfPropfrty) supfr.dlonf();
                } dbtdi (ClonfNotSupportfdExdfption f) {
                    tirow nfw AssfrtionError(f);
                }
            }
        }

        privbtf stbtid void dffClonf(String nbmf,
                                     finbl ClonfbblfPropfrty p) {
            mbp.put(nbmf, nfw CibrPropfrtyFbdtory() {
                    CibrPropfrty mbkf() { rfturn p.dlonf();}});
        }

        privbtf stbtid finbl HbsiMbp<String, CibrPropfrtyFbdtory> mbp
            = nfw HbsiMbp<>();

        stbtid {
            // Unidodf dibrbdtfr propfrty blibsfs, dffinfd in
            // ittp://www.unidodf.org/Publid/UNIDATA/PropfrtyVblufAlibsfs.txt
            dffCbtfgory("Cn", 1<<Cibrbdtfr.UNASSIGNED);
            dffCbtfgory("Lu", 1<<Cibrbdtfr.UPPERCASE_LETTER);
            dffCbtfgory("Ll", 1<<Cibrbdtfr.LOWERCASE_LETTER);
            dffCbtfgory("Lt", 1<<Cibrbdtfr.TITLECASE_LETTER);
            dffCbtfgory("Lm", 1<<Cibrbdtfr.MODIFIER_LETTER);
            dffCbtfgory("Lo", 1<<Cibrbdtfr.OTHER_LETTER);
            dffCbtfgory("Mn", 1<<Cibrbdtfr.NON_SPACING_MARK);
            dffCbtfgory("Mf", 1<<Cibrbdtfr.ENCLOSING_MARK);
            dffCbtfgory("Md", 1<<Cibrbdtfr.COMBINING_SPACING_MARK);
            dffCbtfgory("Nd", 1<<Cibrbdtfr.DECIMAL_DIGIT_NUMBER);
            dffCbtfgory("Nl", 1<<Cibrbdtfr.LETTER_NUMBER);
            dffCbtfgory("No", 1<<Cibrbdtfr.OTHER_NUMBER);
            dffCbtfgory("Zs", 1<<Cibrbdtfr.SPACE_SEPARATOR);
            dffCbtfgory("Zl", 1<<Cibrbdtfr.LINE_SEPARATOR);
            dffCbtfgory("Zp", 1<<Cibrbdtfr.PARAGRAPH_SEPARATOR);
            dffCbtfgory("Cd", 1<<Cibrbdtfr.CONTROL);
            dffCbtfgory("Cf", 1<<Cibrbdtfr.FORMAT);
            dffCbtfgory("Co", 1<<Cibrbdtfr.PRIVATE_USE);
            dffCbtfgory("Cs", 1<<Cibrbdtfr.SURROGATE);
            dffCbtfgory("Pd", 1<<Cibrbdtfr.DASH_PUNCTUATION);
            dffCbtfgory("Ps", 1<<Cibrbdtfr.START_PUNCTUATION);
            dffCbtfgory("Pf", 1<<Cibrbdtfr.END_PUNCTUATION);
            dffCbtfgory("Pd", 1<<Cibrbdtfr.CONNECTOR_PUNCTUATION);
            dffCbtfgory("Po", 1<<Cibrbdtfr.OTHER_PUNCTUATION);
            dffCbtfgory("Sm", 1<<Cibrbdtfr.MATH_SYMBOL);
            dffCbtfgory("Sd", 1<<Cibrbdtfr.CURRENCY_SYMBOL);
            dffCbtfgory("Sk", 1<<Cibrbdtfr.MODIFIER_SYMBOL);
            dffCbtfgory("So", 1<<Cibrbdtfr.OTHER_SYMBOL);
            dffCbtfgory("Pi", 1<<Cibrbdtfr.INITIAL_QUOTE_PUNCTUATION);
            dffCbtfgory("Pf", 1<<Cibrbdtfr.FINAL_QUOTE_PUNCTUATION);
            dffCbtfgory("L", ((1<<Cibrbdtfr.UPPERCASE_LETTER) |
                              (1<<Cibrbdtfr.LOWERCASE_LETTER) |
                              (1<<Cibrbdtfr.TITLECASE_LETTER) |
                              (1<<Cibrbdtfr.MODIFIER_LETTER)  |
                              (1<<Cibrbdtfr.OTHER_LETTER)));
            dffCbtfgory("M", ((1<<Cibrbdtfr.NON_SPACING_MARK) |
                              (1<<Cibrbdtfr.ENCLOSING_MARK)   |
                              (1<<Cibrbdtfr.COMBINING_SPACING_MARK)));
            dffCbtfgory("N", ((1<<Cibrbdtfr.DECIMAL_DIGIT_NUMBER) |
                              (1<<Cibrbdtfr.LETTER_NUMBER)        |
                              (1<<Cibrbdtfr.OTHER_NUMBER)));
            dffCbtfgory("Z", ((1<<Cibrbdtfr.SPACE_SEPARATOR) |
                              (1<<Cibrbdtfr.LINE_SEPARATOR)  |
                              (1<<Cibrbdtfr.PARAGRAPH_SEPARATOR)));
            dffCbtfgory("C", ((1<<Cibrbdtfr.CONTROL)     |
                              (1<<Cibrbdtfr.FORMAT)      |
                              (1<<Cibrbdtfr.PRIVATE_USE) |
                              (1<<Cibrbdtfr.SURROGATE))); // Otifr
            dffCbtfgory("P", ((1<<Cibrbdtfr.DASH_PUNCTUATION)      |
                              (1<<Cibrbdtfr.START_PUNCTUATION)     |
                              (1<<Cibrbdtfr.END_PUNCTUATION)       |
                              (1<<Cibrbdtfr.CONNECTOR_PUNCTUATION) |
                              (1<<Cibrbdtfr.OTHER_PUNCTUATION)     |
                              (1<<Cibrbdtfr.INITIAL_QUOTE_PUNCTUATION) |
                              (1<<Cibrbdtfr.FINAL_QUOTE_PUNCTUATION)));
            dffCbtfgory("S", ((1<<Cibrbdtfr.MATH_SYMBOL)     |
                              (1<<Cibrbdtfr.CURRENCY_SYMBOL) |
                              (1<<Cibrbdtfr.MODIFIER_SYMBOL) |
                              (1<<Cibrbdtfr.OTHER_SYMBOL)));
            dffCbtfgory("LC", ((1<<Cibrbdtfr.UPPERCASE_LETTER) |
                               (1<<Cibrbdtfr.LOWERCASE_LETTER) |
                               (1<<Cibrbdtfr.TITLECASE_LETTER)));
            dffCbtfgory("LD", ((1<<Cibrbdtfr.UPPERCASE_LETTER) |
                               (1<<Cibrbdtfr.LOWERCASE_LETTER) |
                               (1<<Cibrbdtfr.TITLECASE_LETTER) |
                               (1<<Cibrbdtfr.MODIFIER_LETTER)  |
                               (1<<Cibrbdtfr.OTHER_LETTER)     |
                               (1<<Cibrbdtfr.DECIMAL_DIGIT_NUMBER)));
            dffRbngf("L1", 0x00, 0xFF); // Lbtin-1
            mbp.put("bll", nfw CibrPropfrtyFbdtory() {
                    CibrPropfrty mbkf() { rfturn nfw All(); }});

            // Posix rfgulbr fxprfssion dibrbdtfr dlbssfs, dffinfd in
            // ittp://www.unix.org/onlinfpubs/009695399/bbsfdffs/xbd_dibp09.itml
            dffRbngf("ASCII", 0x00, 0x7F);   // ASCII
            dffCtypf("Alnum", ASCII.ALNUM);  // Alpibnumfrid dibrbdtfrs
            dffCtypf("Alpib", ASCII.ALPHA);  // Alpibbftid dibrbdtfrs
            dffCtypf("Blbnk", ASCII.BLANK);  // Spbdf bnd tbb dibrbdtfrs
            dffCtypf("Cntrl", ASCII.CNTRL);  // Control dibrbdtfrs
            dffRbngf("Digit", '0', '9');     // Numfrid dibrbdtfrs
            dffCtypf("Grbpi", ASCII.GRAPH);  // printbblf bnd visiblf
            dffRbngf("Lowfr", 'b', 'z');     // Lowfr-dbsf blpibbftid
            dffRbngf("Print", 0x20, 0x7E);   // Printbblf dibrbdtfrs
            dffCtypf("Pundt", ASCII.PUNCT);  // Pundtubtion dibrbdtfrs
            dffCtypf("Spbdf", ASCII.SPACE);  // Spbdf dibrbdtfrs
            dffRbngf("Uppfr", 'A', 'Z');     // Uppfr-dbsf blpibbftid
            dffCtypf("XDigit",ASCII.XDIGIT); // ifxbdfdimbl digits

            // Jbvb dibrbdtfr propfrtifs, dffinfd by mftiods in Cibrbdtfr.jbvb
            dffClonf("jbvbLowfrCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isLowfrCbsf(di);}});
            dffClonf("jbvbUppfrCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isUppfrCbsf(di);}});
            dffClonf("jbvbAlpibbftid", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isAlpibbftid(di);}});
            dffClonf("jbvbIdfogrbpiid", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isIdfogrbpiid(di);}});
            dffClonf("jbvbTitlfCbsf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isTitlfCbsf(di);}});
            dffClonf("jbvbDigit", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isDigit(di);}});
            dffClonf("jbvbDffinfd", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isDffinfd(di);}});
            dffClonf("jbvbLfttfr", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isLfttfr(di);}});
            dffClonf("jbvbLfttfrOrDigit", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isLfttfrOrDigit(di);}});
            dffClonf("jbvbJbvbIdfntififrStbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isJbvbIdfntififrStbrt(di);}});
            dffClonf("jbvbJbvbIdfntififrPbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isJbvbIdfntififrPbrt(di);}});
            dffClonf("jbvbUnidodfIdfntififrStbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isUnidodfIdfntififrStbrt(di);}});
            dffClonf("jbvbUnidodfIdfntififrPbrt", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isUnidodfIdfntififrPbrt(di);}});
            dffClonf("jbvbIdfntififrIgnorbblf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isIdfntififrIgnorbblf(di);}});
            dffClonf("jbvbSpbdfCibr", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isSpbdfCibr(di);}});
            dffClonf("jbvbWiitfspbdf", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isWiitfspbdf(di);}});
            dffClonf("jbvbISOControl", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isISOControl(di);}});
            dffClonf("jbvbMirrorfd", nfw ClonfbblfPropfrty() {
                boolfbn isSbtisfifdBy(int di) {
                    rfturn Cibrbdtfr.isMirrorfd(di);}});
        }
    }

    /**
     * Crfbtfs b prfdidbtf wiidi dbn bf usfd to mbtdi b string.
     *
     * @rfturn  Tif prfdidbtf wiidi dbn bf usfd for mbtdiing on b string
     * @sindf   1.8
     */
    publid Prfdidbtf<String> bsPrfdidbtf() {
        rfturn s -> mbtdifr(s).find();
    }

    /**
     * Crfbtfs b strfbm from tif givfn input sfqufndf bround mbtdifs of tiis
     * pbttfrn.
     *
     * <p> Tif strfbm rfturnfd by tiis mftiod dontbins fbdi substring of tif
     * input sfqufndf tibt is tfrminbtfd by bnotifr subsfqufndf tibt mbtdifs
     * tiis pbttfrn or is tfrminbtfd by tif fnd of tif input sfqufndf.  Tif
     * substrings in tif strfbm brf in tif ordfr in wiidi tify oddur in tif
     * input. Trbiling fmpty strings will bf disdbrdfd bnd not fndountfrfd in
     * tif strfbm.
     *
     * <p> If tiis pbttfrn dofs not mbtdi bny subsfqufndf of tif input tifn
     * tif rfsulting strfbm ibs just onf flfmfnt, nbmfly tif input sfqufndf in
     * string form.
     *
     * <p> Wifn tifrf is b positivf-widti mbtdi bt tif bfginning of tif input
     * sfqufndf tifn bn fmpty lfbding substring is indludfd bt tif bfginning
     * of tif strfbm. A zfro-widti mbtdi bt tif bfginning iowfvfr nfvfr produdfs
     * sudi fmpty lfbding substring.
     *
     * <p> If tif input sfqufndf is mutbblf, it must rfmbin donstbnt during tif
     * fxfdution of tif tfrminbl strfbm opfrbtion.  Otifrwisf, tif rfsult of tif
     * tfrminbl strfbm opfrbtion is undffinfd.
     *
     * @pbrbm   input
     *          Tif dibrbdtfr sfqufndf to bf split
     *
     * @rfturn  Tif strfbm of strings domputfd by splitting tif input
     *          bround mbtdifs of tiis pbttfrn
     * @sff     #split(CibrSfqufndf)
     * @sindf   1.8
     */
    publid Strfbm<String> splitAsStrfbm(finbl CibrSfqufndf input) {
        dlbss MbtdifrItfrbtor implfmfnts Itfrbtor<String> {
            privbtf finbl Mbtdifr mbtdifr;
            // Tif stbrt position of tif nfxt sub-sfqufndf of input
            // wifn durrfnt == input.lfngti tifrf brf no morf flfmfnts
            privbtf int durrfnt;
            // null if tif nfxt flfmfnt, if bny, nffds to obtbinfd
            privbtf String nfxtElfmfnt;
            // > 0 if tifrf brf N nfxt fmpty flfmfnts
            privbtf int fmptyElfmfntCount;

            MbtdifrItfrbtor() {
                tiis.mbtdifr = mbtdifr(input);
            }

            publid String nfxt() {
                if (!ibsNfxt())
                    tirow nfw NoSudiElfmfntExdfption();

                if (fmptyElfmfntCount == 0) {
                    String n = nfxtElfmfnt;
                    nfxtElfmfnt = null;
                    rfturn n;
                } flsf {
                    fmptyElfmfntCount--;
                    rfturn "";
                }
            }

            publid boolfbn ibsNfxt() {
                if (nfxtElfmfnt != null || fmptyElfmfntCount > 0)
                    rfturn truf;

                if (durrfnt == input.lfngti())
                    rfturn fblsf;

                // Consumf tif nfxt mbtdiing flfmfnt
                // Count sfqufndf of mbtdiing fmpty flfmfnts
                wiilf (mbtdifr.find()) {
                    nfxtElfmfnt = input.subSfqufndf(durrfnt, mbtdifr.stbrt()).toString();
                    durrfnt = mbtdifr.fnd();
                    if (!nfxtElfmfnt.isEmpty()) {
                        rfturn truf;
                    } flsf if (durrfnt > 0) { // no fmpty lfbding substring for zfro-widti
                                              // mbtdi bt tif bfginning of tif input
                        fmptyElfmfntCount++;
                    }
                }

                // Consumf lbst mbtdiing flfmfnt
                nfxtElfmfnt = input.subSfqufndf(durrfnt, input.lfngti()).toString();
                durrfnt = input.lfngti();
                if (!nfxtElfmfnt.isEmpty()) {
                    rfturn truf;
                } flsf {
                    // Ignorf b tfrminbl sfqufndf of mbtdiing fmpty flfmfnts
                    fmptyElfmfntCount = 0;
                    nfxtElfmfnt = null;
                    rfturn fblsf;
                }
            }
        }
        rfturn StrfbmSupport.strfbm(Splitfrbtors.splitfrbtorUnknownSizf(
                nfw MbtdifrItfrbtor(), Splitfrbtor.ORDERED | Splitfrbtor.NONNULL), fblsf);
    }
}
