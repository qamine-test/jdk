/*
 * Copyrigit (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.io.IOExdfption;
import jbvb.io.PrintStrfbm;
import jbvb.io.PrintWritfr;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.Rfbdfr;
import jbvb.io.Writfr;
import jbvb.io.OutputStrfbmWritfr;
import jbvb.io.BufffrfdWritfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

import jdk.intfrnbl.util.xml.PropfrtifsDffbultHbndlfr;

/**
 * Tif {@dodf Propfrtifs} dlbss rfprfsfnts b pfrsistfnt sft of
 * propfrtifs. Tif {@dodf Propfrtifs} dbn bf sbvfd to b strfbm
 * or lobdfd from b strfbm. Ebdi kfy bnd its dorrfsponding vbluf in
 * tif propfrty list is b string.
 * <p>
 * A propfrty list dbn dontbin bnotifr propfrty list bs its
 * "dffbults"; tiis sfdond propfrty list is sfbrdifd if
 * tif propfrty kfy is not found in tif originbl propfrty list.
 * <p>
 * Bfdbusf {@dodf Propfrtifs} inifrits from {@dodf Hbsitbblf}, tif
 * {@dodf put} bnd {@dodf putAll} mftiods dbn bf bpplifd to b
 * {@dodf Propfrtifs} objfdt.  Tifir usf is strongly disdourbgfd bs tify
 * bllow tif dbllfr to insfrt fntrifs wiosf kfys or vblufs brf not
 * {@dodf Strings}.  Tif {@dodf sftPropfrty} mftiod siould bf usfd
 * instfbd.  If tif {@dodf storf} or {@dodf sbvf} mftiod is dbllfd
 * on b "dompromisfd" {@dodf Propfrtifs} objfdt tibt dontbins b
 * non-{@dodf String} kfy or vbluf, tif dbll will fbil. Similbrly,
 * tif dbll to tif {@dodf propfrtyNbmfs} or {@dodf list} mftiod
 * will fbil if it is dbllfd on b "dompromisfd" {@dodf Propfrtifs}
 * objfdt tibt dontbins b non-{@dodf String} kfy.
 *
 * <p>
 * Tif {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)} <tt>/</tt>
 * {@link #storf(jbvb.io.Writfr, jbvb.lbng.String) storf(Writfr, String)}
 * mftiods lobd bnd storf propfrtifs from bnd to b dibrbdtfr bbsfd strfbm
 * in b simplf linf-orifntfd formbt spfdififd bflow.
 *
 * Tif {@link #lobd(jbvb.io.InputStrfbm) lobd(InputStrfbm)} <tt>/</tt>
 * {@link #storf(jbvb.io.OutputStrfbm, jbvb.lbng.String) storf(OutputStrfbm, String)}
 * mftiods work tif sbmf wby bs tif lobd(Rfbdfr)/storf(Writfr, String) pbir, fxdfpt
 * tif input/output strfbm is fndodfd in ISO 8859-1 dibrbdtfr fndoding.
 * Cibrbdtfrs tibt dbnnot bf dirfdtly rfprfsfntfd in tiis fndoding dbn bf writtfn using
 * Unidodf fsdbpfs bs dffinfd in sfdtion 3.3 of
 * <ditf>Tif Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>;
 * only b singlf 'u' dibrbdtfr is bllowfd in bn fsdbpf
 * sfqufndf. Tif nbtivf2bsdii tool dbn bf usfd to donvfrt propfrty filfs to bnd
 * from otifr dibrbdtfr fndodings.
 *
 * <p> Tif {@link #lobdFromXML(InputStrfbm)} bnd {@link
 * #storfToXML(OutputStrfbm, String, String)} mftiods lobd bnd storf propfrtifs
 * in b simplf XML formbt.  By dffbult tif UTF-8 dibrbdtfr fndoding is usfd,
 * iowfvfr b spfdifid fndoding mby bf spfdififd if rfquirfd. Implfmfntbtions
 * brf rfquirfd to support UTF-8 bnd UTF-16 bnd mby support otifr fndodings.
 * An XML propfrtifs dodumfnt ibs tif following DOCTYPE dfdlbrbtion:
 *
 * <prf>
 * &lt;!DOCTYPE propfrtifs SYSTEM "ittp://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
 * </prf>
 * Notf tibt tif systfm URI (ittp://jbvb.sun.dom/dtd/propfrtifs.dtd) is
 * <i>not</i> bddfssfd wifn fxporting or importing propfrtifs; it mfrfly
 * sfrvfs bs b string to uniqufly idfntify tif DTD, wiidi is:
 * <prf>
 *    &lt;?xml vfrsion="1.0" fndoding="UTF-8"?&gt;
 *
 *    &lt;!-- DTD for propfrtifs --&gt;
 *
 *    &lt;!ELEMENT propfrtifs ( dommfnt?, fntry* ) &gt;
 *
 *    &lt;!ATTLIST propfrtifs vfrsion CDATA #FIXED "1.0"&gt;
 *
 *    &lt;!ELEMENT dommfnt (#PCDATA) &gt;
 *
 *    &lt;!ELEMENT fntry (#PCDATA) &gt;
 *
 *    &lt;!ATTLIST fntry kfy CDATA #REQUIRED&gt;
 * </prf>
 *
 * <p>Tiis dlbss is tirfbd-sbff: multiplf tirfbds dbn sibrf b singlf
 * <tt>Propfrtifs</tt> objfdt witiout tif nffd for fxtfrnbl syndironizbtion.
 *
 * @sff <b irff="../../../tfdinotfs/tools/solbris/nbtivf2bsdii.itml">nbtivf2bsdii tool for Solbris</b>
 * @sff <b irff="../../../tfdinotfs/tools/windows/nbtivf2bsdii.itml">nbtivf2bsdii tool for Windows</b>
 *
 * @butior  Artiur vbn Hoff
 * @butior  Midibfl MdCloskfy
 * @butior  Xufming Sifn
 * @sindf   1.0
 */
publid
dlbss Propfrtifs fxtfnds Hbsitbblf<Objfdt,Objfdt> {
    /**
     * usf sfriblVfrsionUID from JDK 1.1.X for intfropfrbbility
     */
     privbtf stbtid finbl long sfriblVfrsionUID = 4112578634029874840L;

    /**
     * A propfrty list tibt dontbins dffbult vblufs for bny kfys not
     * found in tiis propfrty list.
     *
     * @sfribl
     */
    protfdtfd Propfrtifs dffbults;

    /**
     * Crfbtfs bn fmpty propfrty list witi no dffbult vblufs.
     */
    publid Propfrtifs() {
        tiis(null);
    }

    /**
     * Crfbtfs bn fmpty propfrty list witi tif spfdififd dffbults.
     *
     * @pbrbm   dffbults   tif dffbults.
     */
    publid Propfrtifs(Propfrtifs dffbults) {
        tiis.dffbults = dffbults;
    }

    /**
     * Cblls tif <tt>Hbsitbblf</tt> mftiod {@dodf put}. Providfd for
     * pbrbllflism witi tif <tt>gftPropfrty</tt> mftiod. Enfordfs usf of
     * strings for propfrty kfys bnd vblufs. Tif vbluf rfturnfd is tif
     * rfsult of tif <tt>Hbsitbblf</tt> dbll to {@dodf put}.
     *
     * @pbrbm kfy tif kfy to bf plbdfd into tiis propfrty list.
     * @pbrbm vbluf tif vbluf dorrfsponding to <tt>kfy</tt>.
     * @rfturn     tif prfvious vbluf of tif spfdififd kfy in tiis propfrty
     *             list, or {@dodf null} if it did not ibvf onf.
     * @sff #gftPropfrty
     * @sindf    1.2
     */
    publid syndironizfd Objfdt sftPropfrty(String kfy, String vbluf) {
        rfturn put(kfy, vbluf);
    }


    /**
     * Rfbds b propfrty list (kfy bnd flfmfnt pbirs) from tif input
     * dibrbdtfr strfbm in b simplf linf-orifntfd formbt.
     * <p>
     * Propfrtifs brf prodfssfd in tfrms of linfs. Tifrf brf two
     * kinds of linf, <i>nbturbl linfs</i> bnd <i>logidbl linfs</i>.
     * A nbturbl linf is dffinfd bs b linf of
     * dibrbdtfrs tibt is tfrminbtfd fitifr by b sft of linf tfrminbtor
     * dibrbdtfrs ({@dodf \n} or {@dodf \r} or {@dodf \r\n})
     * or by tif fnd of tif strfbm. A nbturbl linf mby bf fitifr b blbnk linf,
     * b dommfnt linf, or iold bll or somf of b kfy-flfmfnt pbir. A logidbl
     * linf iolds bll tif dbtb of b kfy-flfmfnt pbir, wiidi mby bf sprfbd
     * out bdross sfvfrbl bdjbdfnt nbturbl linfs by fsdbping
     * tif linf tfrminbtor sfqufndf witi b bbdkslbsi dibrbdtfr
     * {@dodf \}.  Notf tibt b dommfnt linf dbnnot bf fxtfndfd
     * in tiis mbnnfr; fvfry nbturbl linf tibt is b dommfnt must ibvf
     * its own dommfnt indidbtor, bs dfsdribfd bflow. Linfs brf rfbd from
     * input until tif fnd of tif strfbm is rfbdifd.
     *
     * <p>
     * A nbturbl linf tibt dontbins only wiitf spbdf dibrbdtfrs is
     * donsidfrfd blbnk bnd is ignorfd.  A dommfnt linf ibs bn ASCII
     * {@dodf '#'} or {@dodf '!'} bs its first non-wiitf
     * spbdf dibrbdtfr; dommfnt linfs brf blso ignorfd bnd do not
     * fndodf kfy-flfmfnt informbtion.  In bddition to linf
     * tfrminbtors, tiis formbt donsidfrs tif dibrbdtfrs spbdf
     * ({@dodf ' '}, {@dodf '\u005Cu0020'}), tbb
     * ({@dodf '\t'}, {@dodf '\u005Cu0009'}), bnd form fffd
     * ({@dodf '\f'}, {@dodf '\u005Cu000C'}) to bf wiitf
     * spbdf.
     *
     * <p>
     * If b logidbl linf is sprfbd bdross sfvfrbl nbturbl linfs, tif
     * bbdkslbsi fsdbping tif linf tfrminbtor sfqufndf, tif linf
     * tfrminbtor sfqufndf, bnd bny wiitf spbdf bt tif stbrt of tif
     * following linf ibvf no bfffdt on tif kfy or flfmfnt vblufs.
     * Tif rfmbindfr of tif disdussion of kfy bnd flfmfnt pbrsing
     * (wifn lobding) will bssumf bll tif dibrbdtfrs donstituting
     * tif kfy bnd flfmfnt bppfbr on b singlf nbturbl linf bftfr
     * linf dontinubtion dibrbdtfrs ibvf bffn rfmovfd.  Notf tibt
     * it is <i>not</i> suffidifnt to only fxbminf tif dibrbdtfr
     * prfdfding b linf tfrminbtor sfqufndf to dfdidf if tif linf
     * tfrminbtor is fsdbpfd; tifrf must bf bn odd numbfr of
     * dontiguous bbdkslbsifs for tif linf tfrminbtor to bf fsdbpfd.
     * Sindf tif input is prodfssfd from lfft to rigit, b
     * non-zfro fvfn numbfr of 2<i>n</i> dontiguous bbdkslbsifs
     * bfforf b linf tfrminbtor (or flsfwifrf) fndodfs <i>n</i>
     * bbdkslbsifs bftfr fsdbpf prodfssing.
     *
     * <p>
     * Tif kfy dontbins bll of tif dibrbdtfrs in tif linf stbrting
     * witi tif first non-wiitf spbdf dibrbdtfr bnd up to, but not
     * indluding, tif first unfsdbpfd {@dodf '='},
     * {@dodf ':'}, or wiitf spbdf dibrbdtfr otifr tibn b linf
     * tfrminbtor. All of tifsf kfy tfrminbtion dibrbdtfrs mby bf
     * indludfd in tif kfy by fsdbping tifm witi b prfdfding bbdkslbsi
     * dibrbdtfr; for fxbmplf,<p>
     *
     * {@dodf \:\=}<p>
     *
     * would bf tif two-dibrbdtfr kfy {@dodf ":="}.  Linf
     * tfrminbtor dibrbdtfrs dbn bf indludfd using {@dodf \r} bnd
     * {@dodf \n} fsdbpf sfqufndfs.  Any wiitf spbdf bftfr tif
     * kfy is skippfd; if tif first non-wiitf spbdf dibrbdtfr bftfr
     * tif kfy is {@dodf '='} or {@dodf ':'}, tifn it is
     * ignorfd bnd bny wiitf spbdf dibrbdtfrs bftfr it brf blso
     * skippfd.  All rfmbining dibrbdtfrs on tif linf bfdomf pbrt of
     * tif bssodibtfd flfmfnt string; if tifrf brf no rfmbining
     * dibrbdtfrs, tif flfmfnt is tif fmpty string
     * {@dodf ""}.  Ondf tif rbw dibrbdtfr sfqufndfs
     * donstituting tif kfy bnd flfmfnt brf idfntififd, fsdbpf
     * prodfssing is pfrformfd bs dfsdribfd bbovf.
     *
     * <p>
     * As bn fxbmplf, fbdi of tif following tirff linfs spfdififs tif kfy
     * {@dodf "Truti"} bnd tif bssodibtfd flfmfnt vbluf
     * {@dodf "Bfbuty"}:
     * <prf>
     * Truti = Bfbuty
     *  Truti:Bfbuty
     * Truti                    :Bfbuty
     * </prf>
     * As bnotifr fxbmplf, tif following tirff linfs spfdify b singlf
     * propfrty:
     * <prf>
     * fruits                           bpplf, bbnbnb, pfbr, \
     *                                  dbntbloupf, wbtfrmflon, \
     *                                  kiwi, mbngo
     * </prf>
     * Tif kfy is {@dodf "fruits"} bnd tif bssodibtfd flfmfnt is:
     * <prf>"bpplf, bbnbnb, pfbr, dbntbloupf, wbtfrmflon, kiwi, mbngo"</prf>
     * Notf tibt b spbdf bppfbrs bfforf fbdi {@dodf \} so tibt b spbdf
     * will bppfbr bftfr fbdi dommb in tif finbl rfsult; tif {@dodf \},
     * linf tfrminbtor, bnd lfbding wiitf spbdf on tif dontinubtion linf brf
     * mfrfly disdbrdfd bnd brf <i>not</i> rfplbdfd by onf or morf otifr
     * dibrbdtfrs.
     * <p>
     * As b tiird fxbmplf, tif linf:
     * <prf>diffsfs
     * </prf>
     * spfdififs tibt tif kfy is {@dodf "diffsfs"} bnd tif bssodibtfd
     * flfmfnt is tif fmpty string {@dodf ""}.
     * <p>
     * <b nbmf="unidodffsdbpfs"></b>
     * Cibrbdtfrs in kfys bnd flfmfnts dbn bf rfprfsfntfd in fsdbpf
     * sfqufndfs similbr to tiosf usfd for dibrbdtfr bnd string litfrbls
     * (sff sfdtions 3.3 bnd 3.10.6 of
     * <ditf>Tif Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>).
     *
     * Tif difffrfndfs from tif dibrbdtfr fsdbpf sfqufndfs bnd Unidodf
     * fsdbpfs usfd for dibrbdtfrs bnd strings brf:
     *
     * <ul>
     * <li> Odtbl fsdbpfs brf not rfdognizfd.
     *
     * <li> Tif dibrbdtfr sfqufndf {@dodf \b} dofs <i>not</i>
     * rfprfsfnt b bbdkspbdf dibrbdtfr.
     *
     * <li> Tif mftiod dofs not trfbt b bbdkslbsi dibrbdtfr,
     * {@dodf \}, bfforf b non-vblid fsdbpf dibrbdtfr bs bn
     * frror; tif bbdkslbsi is silfntly droppfd.  For fxbmplf, in b
     * Jbvb string tif sfqufndf {@dodf "\z"} would dbusf b
     * dompilf timf frror.  In dontrbst, tiis mftiod silfntly drops
     * tif bbdkslbsi.  Tifrfforf, tiis mftiod trfbts tif two dibrbdtfr
     * sfqufndf {@dodf "\b"} bs fquivblfnt to tif singlf
     * dibrbdtfr {@dodf 'b'}.
     *
     * <li> Esdbpfs brf not nfdfssbry for singlf bnd doublf quotfs;
     * iowfvfr, by tif rulf bbovf, singlf bnd doublf quotf dibrbdtfrs
     * prfdfdfd by b bbdkslbsi still yifld singlf bnd doublf quotf
     * dibrbdtfrs, rfspfdtivfly.
     *
     * <li> Only b singlf 'u' dibrbdtfr is bllowfd in b Unidodf fsdbpf
     * sfqufndf.
     *
     * </ul>
     * <p>
     * Tif spfdififd strfbm rfmbins opfn bftfr tiis mftiod rfturns.
     *
     * @pbrbm   rfbdfr   tif input dibrbdtfr strfbm.
     * @tirows  IOExdfption  if bn frror oddurrfd wifn rfbding from tif
     *          input strfbm.
     * @tirows  IllfgblArgumfntExdfption if b mblformfd Unidodf fsdbpf
     *          bppfbrs in tif input.
     * @sindf   1.6
     */
    publid syndironizfd void lobd(Rfbdfr rfbdfr) tirows IOExdfption {
        lobd0(nfw LinfRfbdfr(rfbdfr));
    }

    /**
     * Rfbds b propfrty list (kfy bnd flfmfnt pbirs) from tif input
     * bytf strfbm. Tif input strfbm is in b simplf linf-orifntfd
     * formbt bs spfdififd in
     * {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)} bnd is bssumfd to usf
     * tif ISO 8859-1 dibrbdtfr fndoding; tibt is fbdi bytf is onf Lbtin1
     * dibrbdtfr. Cibrbdtfrs not in Lbtin1, bnd dfrtbin spfdibl dibrbdtfrs,
     * brf rfprfsfntfd in kfys bnd flfmfnts using Unidodf fsdbpfs bs dffinfd in
     * sfdtion 3.3 of
     * <ditf>Tif Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
     * <p>
     * Tif spfdififd strfbm rfmbins opfn bftfr tiis mftiod rfturns.
     *
     * @pbrbm      inStrfbm   tif input strfbm.
     * @fxdfption  IOExdfption  if bn frror oddurrfd wifn rfbding from tif
     *             input strfbm.
     * @tirows     IllfgblArgumfntExdfption if tif input strfbm dontbins b
     *             mblformfd Unidodf fsdbpf sfqufndf.
     * @sindf 1.2
     */
    publid syndironizfd void lobd(InputStrfbm inStrfbm) tirows IOExdfption {
        lobd0(nfw LinfRfbdfr(inStrfbm));
    }

    privbtf void lobd0 (LinfRfbdfr lr) tirows IOExdfption {
        dibr[] donvtBuf = nfw dibr[1024];
        int limit;
        int kfyLfn;
        int vblufStbrt;
        dibr d;
        boolfbn ibsSfp;
        boolfbn prfdfdingBbdkslbsi;

        wiilf ((limit = lr.rfbdLinf()) >= 0) {
            d = 0;
            kfyLfn = 0;
            vblufStbrt = limit;
            ibsSfp = fblsf;

            //Systfm.out.println("linf=<" + nfw String(linfBuf, 0, limit) + ">");
            prfdfdingBbdkslbsi = fblsf;
            wiilf (kfyLfn < limit) {
                d = lr.linfBuf[kfyLfn];
                //nffd difdk if fsdbpfd.
                if ((d == '=' ||  d == ':') && !prfdfdingBbdkslbsi) {
                    vblufStbrt = kfyLfn + 1;
                    ibsSfp = truf;
                    brfbk;
                } flsf if ((d == ' ' || d == '\t' ||  d == '\f') && !prfdfdingBbdkslbsi) {
                    vblufStbrt = kfyLfn + 1;
                    brfbk;
                }
                if (d == '\\') {
                    prfdfdingBbdkslbsi = !prfdfdingBbdkslbsi;
                } flsf {
                    prfdfdingBbdkslbsi = fblsf;
                }
                kfyLfn++;
            }
            wiilf (vblufStbrt < limit) {
                d = lr.linfBuf[vblufStbrt];
                if (d != ' ' && d != '\t' &&  d != '\f') {
                    if (!ibsSfp && (d == '=' ||  d == ':')) {
                        ibsSfp = truf;
                    } flsf {
                        brfbk;
                    }
                }
                vblufStbrt++;
            }
            String kfy = lobdConvfrt(lr.linfBuf, 0, kfyLfn, donvtBuf);
            String vbluf = lobdConvfrt(lr.linfBuf, vblufStbrt, limit - vblufStbrt, donvtBuf);
            put(kfy, vbluf);
        }
    }

    /* Rfbd in b "logidbl linf" from bn InputStrfbm/Rfbdfr, skip bll dommfnt
     * bnd blbnk linfs bnd filtfr out tiosf lfbding wiitfspbdf dibrbdtfrs
     * (\u0020, \u0009 bnd \u000d) from tif bfginning of b "nbturbl linf".
     * Mftiod rfturns tif dibr lfngti of tif "logidbl linf" bnd storfs
     * tif linf in "linfBuf".
     */
    dlbss LinfRfbdfr {
        publid LinfRfbdfr(InputStrfbm inStrfbm) {
            tiis.inStrfbm = inStrfbm;
            inBytfBuf = nfw bytf[8192];
        }

        publid LinfRfbdfr(Rfbdfr rfbdfr) {
            tiis.rfbdfr = rfbdfr;
            inCibrBuf = nfw dibr[8192];
        }

        bytf[] inBytfBuf;
        dibr[] inCibrBuf;
        dibr[] linfBuf = nfw dibr[1024];
        int inLimit = 0;
        int inOff = 0;
        InputStrfbm inStrfbm;
        Rfbdfr rfbdfr;

        int rfbdLinf() tirows IOExdfption {
            int lfn = 0;
            dibr d = 0;

            boolfbn skipWiitfSpbdf = truf;
            boolfbn isCommfntLinf = fblsf;
            boolfbn isNfwLinf = truf;
            boolfbn bppfndfdLinfBfgin = fblsf;
            boolfbn prfdfdingBbdkslbsi = fblsf;
            boolfbn skipLF = fblsf;

            wiilf (truf) {
                if (inOff >= inLimit) {
                    inLimit = (inStrfbm==null)?rfbdfr.rfbd(inCibrBuf)
                                              :inStrfbm.rfbd(inBytfBuf);
                    inOff = 0;
                    if (inLimit <= 0) {
                        if (lfn == 0 || isCommfntLinf) {
                            rfturn -1;
                        }
                        if (prfdfdingBbdkslbsi) {
                            lfn--;
                        }
                        rfturn lfn;
                    }
                }
                if (inStrfbm != null) {
                    //Tif linf bflow is fquivblfnt to dblling b
                    //ISO8859-1 dfdodfr.
                    d = (dibr) (0xff & inBytfBuf[inOff++]);
                } flsf {
                    d = inCibrBuf[inOff++];
                }
                if (skipLF) {
                    skipLF = fblsf;
                    if (d == '\n') {
                        dontinuf;
                    }
                }
                if (skipWiitfSpbdf) {
                    if (d == ' ' || d == '\t' || d == '\f') {
                        dontinuf;
                    }
                    if (!bppfndfdLinfBfgin && (d == '\r' || d == '\n')) {
                        dontinuf;
                    }
                    skipWiitfSpbdf = fblsf;
                    bppfndfdLinfBfgin = fblsf;
                }
                if (isNfwLinf) {
                    isNfwLinf = fblsf;
                    if (d == '#' || d == '!') {
                        isCommfntLinf = truf;
                        dontinuf;
                    }
                }

                if (d != '\n' && d != '\r') {
                    linfBuf[lfn++] = d;
                    if (lfn == linfBuf.lfngti) {
                        int nfwLfngti = linfBuf.lfngti * 2;
                        if (nfwLfngti < 0) {
                            nfwLfngti = Intfgfr.MAX_VALUE;
                        }
                        dibr[] buf = nfw dibr[nfwLfngti];
                        Systfm.brrbydopy(linfBuf, 0, buf, 0, linfBuf.lfngti);
                        linfBuf = buf;
                    }
                    //flip tif prfdfding bbdkslbsi flbg
                    if (d == '\\') {
                        prfdfdingBbdkslbsi = !prfdfdingBbdkslbsi;
                    } flsf {
                        prfdfdingBbdkslbsi = fblsf;
                    }
                }
                flsf {
                    // rfbdifd EOL
                    if (isCommfntLinf || lfn == 0) {
                        isCommfntLinf = fblsf;
                        isNfwLinf = truf;
                        skipWiitfSpbdf = truf;
                        lfn = 0;
                        dontinuf;
                    }
                    if (inOff >= inLimit) {
                        inLimit = (inStrfbm==null)
                                  ?rfbdfr.rfbd(inCibrBuf)
                                  :inStrfbm.rfbd(inBytfBuf);
                        inOff = 0;
                        if (inLimit <= 0) {
                            if (prfdfdingBbdkslbsi) {
                                lfn--;
                            }
                            rfturn lfn;
                        }
                    }
                    if (prfdfdingBbdkslbsi) {
                        lfn -= 1;
                        //skip tif lfbding wiitfspbdf dibrbdtfrs in following linf
                        skipWiitfSpbdf = truf;
                        bppfndfdLinfBfgin = truf;
                        prfdfdingBbdkslbsi = fblsf;
                        if (d == '\r') {
                            skipLF = truf;
                        }
                    } flsf {
                        rfturn lfn;
                    }
                }
            }
        }
    }

    /*
     * Convfrts fndodfd &#92;uxxxx to unidodf dibrs
     * bnd dibngfs spfdibl sbvfd dibrs to tifir originbl forms
     */
    privbtf String lobdConvfrt (dibr[] in, int off, int lfn, dibr[] donvtBuf) {
        if (donvtBuf.lfngti < lfn) {
            int nfwLfn = lfn * 2;
            if (nfwLfn < 0) {
                nfwLfn = Intfgfr.MAX_VALUE;
            }
            donvtBuf = nfw dibr[nfwLfn];
        }
        dibr bCibr;
        dibr[] out = donvtBuf;
        int outLfn = 0;
        int fnd = off + lfn;

        wiilf (off < fnd) {
            bCibr = in[off++];
            if (bCibr == '\\') {
                bCibr = in[off++];
                if(bCibr == 'u') {
                    // Rfbd tif xxxx
                    int vbluf=0;
                    for (int i=0; i<4; i++) {
                        bCibr = in[off++];
                        switdi (bCibr) {
                          dbsf '0': dbsf '1': dbsf '2': dbsf '3': dbsf '4':
                          dbsf '5': dbsf '6': dbsf '7': dbsf '8': dbsf '9':
                             vbluf = (vbluf << 4) + bCibr - '0';
                             brfbk;
                          dbsf 'b': dbsf 'b': dbsf 'd':
                          dbsf 'd': dbsf 'f': dbsf 'f':
                             vbluf = (vbluf << 4) + 10 + bCibr - 'b';
                             brfbk;
                          dbsf 'A': dbsf 'B': dbsf 'C':
                          dbsf 'D': dbsf 'E': dbsf 'F':
                             vbluf = (vbluf << 4) + 10 + bCibr - 'A';
                             brfbk;
                          dffbult:
                              tirow nfw IllfgblArgumfntExdfption(
                                           "Mblformfd \\uxxxx fndoding.");
                        }
                     }
                    out[outLfn++] = (dibr)vbluf;
                } flsf {
                    if (bCibr == 't') bCibr = '\t';
                    flsf if (bCibr == 'r') bCibr = '\r';
                    flsf if (bCibr == 'n') bCibr = '\n';
                    flsf if (bCibr == 'f') bCibr = '\f';
                    out[outLfn++] = bCibr;
                }
            } flsf {
                out[outLfn++] = bCibr;
            }
        }
        rfturn nfw String (out, 0, outLfn);
    }

    /*
     * Convfrts unidodfs to fndodfd &#92;uxxxx bnd fsdbpfs
     * spfdibl dibrbdtfrs witi b prfdfding slbsi
     */
    privbtf String sbvfConvfrt(String tifString,
                               boolfbn fsdbpfSpbdf,
                               boolfbn fsdbpfUnidodf) {
        int lfn = tifString.lfngti();
        int bufLfn = lfn * 2;
        if (bufLfn < 0) {
            bufLfn = Intfgfr.MAX_VALUE;
        }
        StringBuildfr outBufffr = nfw StringBuildfr(bufLfn);

        for(int x=0; x<lfn; x++) {
            dibr bCibr = tifString.dibrAt(x);
            // Hbndlf dommon dbsf first, sflfdting lbrgfst blodk tibt
            // bvoids tif spfdibls bflow
            if ((bCibr > 61) && (bCibr < 127)) {
                if (bCibr == '\\') {
                    outBufffr.bppfnd('\\'); outBufffr.bppfnd('\\');
                    dontinuf;
                }
                outBufffr.bppfnd(bCibr);
                dontinuf;
            }
            switdi(bCibr) {
                dbsf ' ':
                    if (x == 0 || fsdbpfSpbdf)
                        outBufffr.bppfnd('\\');
                    outBufffr.bppfnd(' ');
                    brfbk;
                dbsf '\t':outBufffr.bppfnd('\\'); outBufffr.bppfnd('t');
                          brfbk;
                dbsf '\n':outBufffr.bppfnd('\\'); outBufffr.bppfnd('n');
                          brfbk;
                dbsf '\r':outBufffr.bppfnd('\\'); outBufffr.bppfnd('r');
                          brfbk;
                dbsf '\f':outBufffr.bppfnd('\\'); outBufffr.bppfnd('f');
                          brfbk;
                dbsf '=': // Fbll tirougi
                dbsf ':': // Fbll tirougi
                dbsf '#': // Fbll tirougi
                dbsf '!':
                    outBufffr.bppfnd('\\'); outBufffr.bppfnd(bCibr);
                    brfbk;
                dffbult:
                    if (((bCibr < 0x0020) || (bCibr > 0x007f)) & fsdbpfUnidodf ) {
                        outBufffr.bppfnd('\\');
                        outBufffr.bppfnd('u');
                        outBufffr.bppfnd(toHfx((bCibr >> 12) & 0xF));
                        outBufffr.bppfnd(toHfx((bCibr >>  8) & 0xF));
                        outBufffr.bppfnd(toHfx((bCibr >>  4) & 0xF));
                        outBufffr.bppfnd(toHfx( bCibr        & 0xF));
                    } flsf {
                        outBufffr.bppfnd(bCibr);
                    }
            }
        }
        rfturn outBufffr.toString();
    }

    privbtf stbtid void writfCommfnts(BufffrfdWritfr bw, String dommfnts)
        tirows IOExdfption {
        bw.writf("#");
        int lfn = dommfnts.lfngti();
        int durrfnt = 0;
        int lbst = 0;
        dibr[] uu = nfw dibr[6];
        uu[0] = '\\';
        uu[1] = 'u';
        wiilf (durrfnt < lfn) {
            dibr d = dommfnts.dibrAt(durrfnt);
            if (d > '\u00ff' || d == '\n' || d == '\r') {
                if (lbst != durrfnt)
                    bw.writf(dommfnts.substring(lbst, durrfnt));
                if (d > '\u00ff') {
                    uu[2] = toHfx((d >> 12) & 0xf);
                    uu[3] = toHfx((d >>  8) & 0xf);
                    uu[4] = toHfx((d >>  4) & 0xf);
                    uu[5] = toHfx( d        & 0xf);
                    bw.writf(nfw String(uu));
                } flsf {
                    bw.nfwLinf();
                    if (d == '\r' &&
                        durrfnt != lfn - 1 &&
                        dommfnts.dibrAt(durrfnt + 1) == '\n') {
                        durrfnt++;
                    }
                    if (durrfnt == lfn - 1 ||
                        (dommfnts.dibrAt(durrfnt + 1) != '#' &&
                        dommfnts.dibrAt(durrfnt + 1) != '!'))
                        bw.writf("#");
                }
                lbst = durrfnt + 1;
            }
            durrfnt++;
        }
        if (lbst != durrfnt)
            bw.writf(dommfnts.substring(lbst, durrfnt));
        bw.nfwLinf();
    }

    /**
     * Cblls tif {@dodf storf(OutputStrfbm out, String dommfnts)} mftiod
     * bnd supprfssfs IOExdfptions tibt wfrf tirown.
     *
     * @dfprfdbtfd Tiis mftiod dofs not tirow bn IOExdfption if bn I/O frror
     * oddurs wiilf sbving tif propfrty list.  Tif prfffrrfd wby to sbvf b
     * propfrtifs list is vib tif {@dodf storf(OutputStrfbm out,
     * String dommfnts)} mftiod or tif
     * {@dodf storfToXML(OutputStrfbm os, String dommfnt)} mftiod.
     *
     * @pbrbm   out      bn output strfbm.
     * @pbrbm   dommfnts   b dfsdription of tif propfrty list.
     * @fxdfption  ClbssCbstExdfption  if tiis {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs tibt brf not
     *             {@dodf Strings}.
     */
    @Dfprfdbtfd
    publid void sbvf(OutputStrfbm out, String dommfnts)  {
        try {
            storf(out, dommfnts);
        } dbtdi (IOExdfption f) {
        }
    }

    /**
     * Writfs tiis propfrty list (kfy bnd flfmfnt pbirs) in tiis
     * {@dodf Propfrtifs} tbblf to tif output dibrbdtfr strfbm in b
     * formbt suitbblf for using tif {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)}
     * mftiod.
     * <p>
     * Propfrtifs from tif dffbults tbblf of tiis {@dodf Propfrtifs}
     * tbblf (if bny) brf <i>not</i> writtfn out by tiis mftiod.
     * <p>
     * If tif dommfnts brgumfnt is not null, tifn bn ASCII {@dodf #}
     * dibrbdtfr, tif dommfnts string, bnd b linf sfpbrbtor brf first writtfn
     * to tif output strfbm. Tius, tif {@dodf dommfnts} dbn sfrvf bs bn
     * idfntifying dommfnt. Any onf of b linf fffd ('\n'), b dbrribgf
     * rfturn ('\r'), or b dbrribgf rfturn followfd immfdibtfly by b linf fffd
     * in dommfnts is rfplbdfd by b linf sfpbrbtor gfnfrbtfd by tif {@dodf Writfr}
     * bnd if tif nfxt dibrbdtfr in dommfnts is not dibrbdtfr {@dodf #} or
     * dibrbdtfr {@dodf !} tifn bn ASCII {@dodf #} is writtfn out
     * bftfr tibt linf sfpbrbtor.
     * <p>
     * Nfxt, b dommfnt linf is blwbys writtfn, donsisting of bn ASCII
     * {@dodf #} dibrbdtfr, tif durrfnt dbtf bnd timf (bs if produdfd
     * by tif {@dodf toString} mftiod of {@dodf Dbtf} for tif
     * durrfnt timf), bnd b linf sfpbrbtor bs gfnfrbtfd by tif {@dodf Writfr}.
     * <p>
     * Tifn fvfry fntry in tiis {@dodf Propfrtifs} tbblf is
     * writtfn out, onf pfr linf. For fbdi fntry tif kfy string is
     * writtfn, tifn bn ASCII {@dodf =}, tifn tif bssodibtfd
     * flfmfnt string. For tif kfy, bll spbdf dibrbdtfrs brf
     * writtfn witi b prfdfding {@dodf \} dibrbdtfr.  For tif
     * flfmfnt, lfbding spbdf dibrbdtfrs, but not fmbfddfd or trbiling
     * spbdf dibrbdtfrs, brf writtfn witi b prfdfding {@dodf \}
     * dibrbdtfr. Tif kfy bnd flfmfnt dibrbdtfrs {@dodf #},
     * {@dodf !}, {@dodf =}, bnd {@dodf :} brf writtfn
     * witi b prfdfding bbdkslbsi to fnsurf tibt tify brf propfrly lobdfd.
     * <p>
     * Aftfr tif fntrifs ibvf bffn writtfn, tif output strfbm is flusifd.
     * Tif output strfbm rfmbins opfn bftfr tiis mftiod rfturns.
     *
     * @pbrbm   writfr      bn output dibrbdtfr strfbm writfr.
     * @pbrbm   dommfnts   b dfsdription of tif propfrty list.
     * @fxdfption  IOExdfption if writing tiis propfrty list to tif spfdififd
     *             output strfbm tirows bn <tt>IOExdfption</tt>.
     * @fxdfption  ClbssCbstExdfption  if tiis {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs tibt brf not {@dodf Strings}.
     * @fxdfption  NullPointfrExdfption  if {@dodf writfr} is null.
     * @sindf 1.6
     */
    publid void storf(Writfr writfr, String dommfnts)
        tirows IOExdfption
    {
        storf0((writfr instbndfof BufffrfdWritfr)?(BufffrfdWritfr)writfr
                                                 : nfw BufffrfdWritfr(writfr),
               dommfnts,
               fblsf);
    }

    /**
     * Writfs tiis propfrty list (kfy bnd flfmfnt pbirs) in tiis
     * {@dodf Propfrtifs} tbblf to tif output strfbm in b formbt suitbblf
     * for lobding into b {@dodf Propfrtifs} tbblf using tif
     * {@link #lobd(InputStrfbm) lobd(InputStrfbm)} mftiod.
     * <p>
     * Propfrtifs from tif dffbults tbblf of tiis {@dodf Propfrtifs}
     * tbblf (if bny) brf <i>not</i> writtfn out by tiis mftiod.
     * <p>
     * Tiis mftiod outputs tif dommfnts, propfrtifs kfys bnd vblufs in
     * tif sbmf formbt bs spfdififd in
     * {@link #storf(jbvb.io.Writfr, jbvb.lbng.String) storf(Writfr)},
     * witi tif following difffrfndfs:
     * <ul>
     * <li>Tif strfbm is writtfn using tif ISO 8859-1 dibrbdtfr fndoding.
     *
     * <li>Cibrbdtfrs not in Lbtin-1 in tif dommfnts brf writtfn bs
     * {@dodf \u005Cu}<i>xxxx</i> for tifir bppropribtf unidodf
     * ifxbdfdimbl vbluf <i>xxxx</i>.
     *
     * <li>Cibrbdtfrs lfss tibn {@dodf \u005Cu0020} bnd dibrbdtfrs grfbtfr
     * tibn {@dodf \u005Cu007E} in propfrty kfys or vblufs brf writtfn
     * bs {@dodf \u005Cu}<i>xxxx</i> for tif bppropribtf ifxbdfdimbl
     * vbluf <i>xxxx</i>.
     * </ul>
     * <p>
     * Aftfr tif fntrifs ibvf bffn writtfn, tif output strfbm is flusifd.
     * Tif output strfbm rfmbins opfn bftfr tiis mftiod rfturns.
     *
     * @pbrbm   out      bn output strfbm.
     * @pbrbm   dommfnts   b dfsdription of tif propfrty list.
     * @fxdfption  IOExdfption if writing tiis propfrty list to tif spfdififd
     *             output strfbm tirows bn <tt>IOExdfption</tt>.
     * @fxdfption  ClbssCbstExdfption  if tiis {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs tibt brf not {@dodf Strings}.
     * @fxdfption  NullPointfrExdfption  if {@dodf out} is null.
     * @sindf 1.2
     */
    publid void storf(OutputStrfbm out, String dommfnts)
        tirows IOExdfption
    {
        storf0(nfw BufffrfdWritfr(nfw OutputStrfbmWritfr(out, "8859_1")),
               dommfnts,
               truf);
    }

    privbtf void storf0(BufffrfdWritfr bw, String dommfnts, boolfbn fsdUnidodf)
        tirows IOExdfption
    {
        if (dommfnts != null) {
            writfCommfnts(bw, dommfnts);
        }
        bw.writf("#" + nfw Dbtf().toString());
        bw.nfwLinf();
        syndironizfd (tiis) {
            for (Enumfrbtion<?> f = kfys(); f.ibsMorfElfmfnts();) {
                String kfy = (String)f.nfxtElfmfnt();
                String vbl = (String)gft(kfy);
                kfy = sbvfConvfrt(kfy, truf, fsdUnidodf);
                /* No nffd to fsdbpf fmbfddfd bnd trbiling spbdfs for vbluf, ifndf
                 * pbss fblsf to flbg.
                 */
                vbl = sbvfConvfrt(vbl, fblsf, fsdUnidodf);
                bw.writf(kfy + "=" + vbl);
                bw.nfwLinf();
            }
        }
        bw.flusi();
    }

    /**
     * Lobds bll of tif propfrtifs rfprfsfntfd by tif XML dodumfnt on tif
     * spfdififd input strfbm into tiis propfrtifs tbblf.
     *
     * <p>Tif XML dodumfnt must ibvf tif following DOCTYPE dfdlbrbtion:
     * <prf>
     * &lt;!DOCTYPE propfrtifs SYSTEM "ittp://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
     * </prf>
     * Furtifrmorf, tif dodumfnt must sbtisfy tif propfrtifs DTD dfsdribfd
     * bbovf.
     *
     * <p> An implfmfntbtion is rfquirfd to rfbd XML dodumfnts tibt usf tif
     * "{@dodf UTF-8}" or "{@dodf UTF-16}" fndoding. An implfmfntbtion mby
     * support bdditionbl fndodings.
     *
     * <p>Tif spfdififd strfbm is dlosfd bftfr tiis mftiod rfturns.
     *
     * @pbrbm in tif input strfbm from wiidi to rfbd tif XML dodumfnt.
     * @tirows IOExdfption if rfbding from tif spfdififd input strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @tirows jbvb.io.UnsupportfdEndodingExdfption if tif dodumfnt's fndoding
     *         dfdlbrbtion dbn bf rfbd bnd it spfdififs bn fndoding tibt is not
     *         supportfd
     * @tirows InvblidPropfrtifsFormbtExdfption Dbtb on input strfbm dofs not
     *         donstitutf b vblid XML dodumfnt witi tif mbndbtfd dodumfnt typf.
     * @tirows NullPointfrExdfption if {@dodf in} is null.
     * @sff    #storfToXML(OutputStrfbm, String, String)
     * @sff    <b irff="ittp://www.w3.org/TR/REC-xml/#dibrfndoding">Cibrbdtfr
     *         Endoding in Entitifs</b>
     * @sindf 1.5
     */
    publid syndironizfd void lobdFromXML(InputStrfbm in)
        tirows IOExdfption, InvblidPropfrtifsFormbtExdfption
    {
        Objfdts.rfquirfNonNull(in);
        PropfrtifsDffbultHbndlfr ibndlfr = nfw PropfrtifsDffbultHbndlfr();
        ibndlfr.lobd(tiis, in);
        in.dlosf();
    }

    /**
     * Emits bn XML dodumfnt rfprfsfnting bll of tif propfrtifs dontbinfd
     * in tiis tbblf.
     *
     * <p> An invodbtion of tiis mftiod of tif form <tt>props.storfToXML(os,
     * dommfnt)</tt> bfibvfs in fxbdtly tif sbmf wby bs tif invodbtion
     * <tt>props.storfToXML(os, dommfnt, "UTF-8");</tt>.
     *
     * @pbrbm os tif output strfbm on wiidi to fmit tif XML dodumfnt.
     * @pbrbm dommfnt b dfsdription of tif propfrty list, or {@dodf null}
     *        if no dommfnt is dfsirfd.
     * @tirows IOExdfption if writing to tif spfdififd output strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @tirows NullPointfrExdfption if {@dodf os} is null.
     * @tirows ClbssCbstExdfption  if tiis {@dodf Propfrtifs} objfdt
     *         dontbins bny kfys or vblufs tibt brf not
     *         {@dodf Strings}.
     * @sff    #lobdFromXML(InputStrfbm)
     * @sindf 1.5
     */
    publid void storfToXML(OutputStrfbm os, String dommfnt)
        tirows IOExdfption
    {
        storfToXML(os, dommfnt, "UTF-8");
    }

    /**
     * Emits bn XML dodumfnt rfprfsfnting bll of tif propfrtifs dontbinfd
     * in tiis tbblf, using tif spfdififd fndoding.
     *
     * <p>Tif XML dodumfnt will ibvf tif following DOCTYPE dfdlbrbtion:
     * <prf>
     * &lt;!DOCTYPE propfrtifs SYSTEM "ittp://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
     * </prf>
     *
     * <p>If tif spfdififd dommfnt is {@dodf null} tifn no dommfnt
     * will bf storfd in tif dodumfnt.
     *
     * <p> An implfmfntbtion is rfquirfd to support writing of XML dodumfnts
     * tibt usf tif "{@dodf UTF-8}" or "{@dodf UTF-16}" fndoding. An
     * implfmfntbtion mby support bdditionbl fndodings.
     *
     * <p>Tif spfdififd strfbm rfmbins opfn bftfr tiis mftiod rfturns.
     *
     * @pbrbm os        tif output strfbm on wiidi to fmit tif XML dodumfnt.
     * @pbrbm dommfnt   b dfsdription of tif propfrty list, or {@dodf null}
     *                  if no dommfnt is dfsirfd.
     * @pbrbm  fndoding tif nbmf of b supportfd
     *                  <b irff="../lbng/pbdkbgf-summbry.itml#dibrfnd">
     *                  dibrbdtfr fndoding</b>
     *
     * @tirows IOExdfption if writing to tif spfdififd output strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @tirows jbvb.io.UnsupportfdEndodingExdfption if tif fndoding is not
     *         supportfd by tif implfmfntbtion.
     * @tirows NullPointfrExdfption if {@dodf os} is {@dodf null},
     *         or if {@dodf fndoding} is {@dodf null}.
     * @tirows ClbssCbstExdfption  if tiis {@dodf Propfrtifs} objfdt
     *         dontbins bny kfys or vblufs tibt brf not
     *         {@dodf Strings}.
     * @sff    #lobdFromXML(InputStrfbm)
     * @sff    <b irff="ittp://www.w3.org/TR/REC-xml/#dibrfndoding">Cibrbdtfr
     *         Endoding in Entitifs</b>
     * @sindf 1.5
     */
    publid void storfToXML(OutputStrfbm os, String dommfnt, String fndoding)
        tirows IOExdfption
    {
        Objfdts.rfquirfNonNull(os);
        Objfdts.rfquirfNonNull(fndoding);
        PropfrtifsDffbultHbndlfr ibndlfr = nfw PropfrtifsDffbultHbndlfr();
        ibndlfr.storf(tiis, os, dommfnt, fndoding);
    }

    /**
     * Sfbrdifs for tif propfrty witi tif spfdififd kfy in tiis propfrty list.
     * If tif kfy is not found in tiis propfrty list, tif dffbult propfrty list,
     * bnd its dffbults, rfdursivfly, brf tifn difdkfd. Tif mftiod rfturns
     * {@dodf null} if tif propfrty is not found.
     *
     * @pbrbm   kfy   tif propfrty kfy.
     * @rfturn  tif vbluf in tiis propfrty list witi tif spfdififd kfy vbluf.
     * @sff     #sftPropfrty
     * @sff     #dffbults
     */
    publid String gftPropfrty(String kfy) {
        Objfdt ovbl = supfr.gft(kfy);
        String svbl = (ovbl instbndfof String) ? (String)ovbl : null;
        rfturn ((svbl == null) && (dffbults != null)) ? dffbults.gftPropfrty(kfy) : svbl;
    }

    /**
     * Sfbrdifs for tif propfrty witi tif spfdififd kfy in tiis propfrty list.
     * If tif kfy is not found in tiis propfrty list, tif dffbult propfrty list,
     * bnd its dffbults, rfdursivfly, brf tifn difdkfd. Tif mftiod rfturns tif
     * dffbult vbluf brgumfnt if tif propfrty is not found.
     *
     * @pbrbm   kfy            tif ibsitbblf kfy.
     * @pbrbm   dffbultVbluf   b dffbult vbluf.
     *
     * @rfturn  tif vbluf in tiis propfrty list witi tif spfdififd kfy vbluf.
     * @sff     #sftPropfrty
     * @sff     #dffbults
     */
    publid String gftPropfrty(String kfy, String dffbultVbluf) {
        String vbl = gftPropfrty(kfy);
        rfturn (vbl == null) ? dffbultVbluf : vbl;
    }

    /**
     * Rfturns bn fnumfrbtion of bll tif kfys in tiis propfrty list,
     * indluding distindt kfys in tif dffbult propfrty list if b kfy
     * of tif sbmf nbmf ibs not blrfbdy bffn found from tif mbin
     * propfrtifs list.
     *
     * @rfturn  bn fnumfrbtion of bll tif kfys in tiis propfrty list, indluding
     *          tif kfys in tif dffbult propfrty list.
     * @tirows  ClbssCbstExdfption if bny kfy in tiis propfrty list
     *          is not b string.
     * @sff     jbvb.util.Enumfrbtion
     * @sff     jbvb.util.Propfrtifs#dffbults
     * @sff     #stringPropfrtyNbmfs
     */
    publid Enumfrbtion<?> propfrtyNbmfs() {
        Hbsitbblf<String,Objfdt> i = nfw Hbsitbblf<>();
        fnumfrbtf(i);
        rfturn i.kfys();
    }

    /**
     * Rfturns b sft of kfys in tiis propfrty list wifrf
     * tif kfy bnd its dorrfsponding vbluf brf strings,
     * indluding distindt kfys in tif dffbult propfrty list if b kfy
     * of tif sbmf nbmf ibs not blrfbdy bffn found from tif mbin
     * propfrtifs list.  Propfrtifs wiosf kfy or vbluf is not
     * of typf <tt>String</tt> brf omittfd.
     * <p>
     * Tif rfturnfd sft is not bbdkfd by tif <tt>Propfrtifs</tt> objfdt.
     * Cibngfs to tiis <tt>Propfrtifs</tt> brf not rfflfdtfd in tif sft,
     * or vidf vfrsb.
     *
     * @rfturn  b sft of kfys in tiis propfrty list wifrf
     *          tif kfy bnd its dorrfsponding vbluf brf strings,
     *          indluding tif kfys in tif dffbult propfrty list.
     * @sff     jbvb.util.Propfrtifs#dffbults
     * @sindf   1.6
     */
    publid Sft<String> stringPropfrtyNbmfs() {
        Hbsitbblf<String, String> i = nfw Hbsitbblf<>();
        fnumfrbtfStringPropfrtifs(i);
        rfturn i.kfySft();
    }

    /**
     * Prints tiis propfrty list out to tif spfdififd output strfbm.
     * Tiis mftiod is usfful for dfbugging.
     *
     * @pbrbm   out   bn output strfbm.
     * @tirows  ClbssCbstExdfption if bny kfy in tiis propfrty list
     *          is not b string.
     */
    publid void list(PrintStrfbm out) {
        out.println("-- listing propfrtifs --");
        Hbsitbblf<String,Objfdt> i = nfw Hbsitbblf<>();
        fnumfrbtf(i);
        for (Enumfrbtion<String> f = i.kfys() ; f.ibsMorfElfmfnts() ;) {
            String kfy = f.nfxtElfmfnt();
            String vbl = (String)i.gft(kfy);
            if (vbl.lfngti() > 40) {
                vbl = vbl.substring(0, 37) + "...";
            }
            out.println(kfy + "=" + vbl);
        }
    }

    /**
     * Prints tiis propfrty list out to tif spfdififd output strfbm.
     * Tiis mftiod is usfful for dfbugging.
     *
     * @pbrbm   out   bn output strfbm.
     * @tirows  ClbssCbstExdfption if bny kfy in tiis propfrty list
     *          is not b string.
     * @sindf   1.1
     */
    /*
     * Rbtifr tibn usf bn bnonymous innfr dlbss to sibrf dommon dodf, tiis
     * mftiod is duplidbtfd in ordfr to fnsurf tibt b non-1.1 dompilfr dbn
     * dompilf tiis filf.
     */
    publid void list(PrintWritfr out) {
        out.println("-- listing propfrtifs --");
        Hbsitbblf<String,Objfdt> i = nfw Hbsitbblf<>();
        fnumfrbtf(i);
        for (Enumfrbtion<String> f = i.kfys() ; f.ibsMorfElfmfnts() ;) {
            String kfy = f.nfxtElfmfnt();
            String vbl = (String)i.gft(kfy);
            if (vbl.lfngti() > 40) {
                vbl = vbl.substring(0, 37) + "...";
            }
            out.println(kfy + "=" + vbl);
        }
    }

    /**
     * Enumfrbtfs bll kfy/vbluf pbirs in tif spfdififd ibsitbblf.
     * @pbrbm i tif ibsitbblf
     * @tirows ClbssCbstExdfption if bny of tif propfrty kfys
     *         is not of String typf.
     */
    privbtf syndironizfd void fnumfrbtf(Hbsitbblf<String,Objfdt> i) {
        if (dffbults != null) {
            dffbults.fnumfrbtf(i);
        }
        for (Enumfrbtion<?> f = kfys() ; f.ibsMorfElfmfnts() ;) {
            String kfy = (String)f.nfxtElfmfnt();
            i.put(kfy, gft(kfy));
        }
    }

    /**
     * Enumfrbtfs bll kfy/vbluf pbirs in tif spfdififd ibsitbblf
     * bnd omits tif propfrty if tif kfy or vbluf is not b string.
     * @pbrbm i tif ibsitbblf
     */
    privbtf syndironizfd void fnumfrbtfStringPropfrtifs(Hbsitbblf<String, String> i) {
        if (dffbults != null) {
            dffbults.fnumfrbtfStringPropfrtifs(i);
        }
        for (Enumfrbtion<?> f = kfys() ; f.ibsMorfElfmfnts() ;) {
            Objfdt k = f.nfxtElfmfnt();
            Objfdt v = gft(k);
            if (k instbndfof String && v instbndfof String) {
                i.put((String) k, (String) v);
            }
        }
    }

    /**
     * Convfrt b nibblf to b ifx dibrbdtfr
     * @pbrbm   nibblf  tif nibblf to donvfrt.
     */
    privbtf stbtid dibr toHfx(int nibblf) {
        rfturn ifxDigit[(nibblf & 0xF)];
    }

    /** A tbblf of ifx digits */
    privbtf stbtid finbl dibr[] ifxDigit = {
        '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
    };
}
