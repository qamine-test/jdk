/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.util.strfbm;

import jbvb.util.Splitfrbtor;
import jbvb.util.fundtion.IntFundtion;

/**
 * Hflpfr dlbss for fxfduting <b hrff="pbdkbgf-summbry.html#StrfbmOps">
 * strfbm pipflinfs</b>, dbpturing bll of thf informbtion bbout b strfbm
 * pipflinf (output shbpf, intfrmfdibtf opfrbtions, strfbm flbgs, pbrbllflism,
 * ftd) in onf plbdf.
 *
 * <p>
 * A {@dodf PipflinfHflpfr} dfsdribfs thf initibl sfgmfnt of b strfbm pipflinf,
 * indluding its sourdf, intfrmfdibtf opfrbtions, bnd mby bdditionblly
 * indorporbtf informbtion bbout thf tfrminbl (or stbtfful) opfrbtion whidh
 * follows thf lbst intfrmfdibtf opfrbtion dfsdribfd by this
 * {@dodf PipflinfHflpfr}. Thf {@dodf PipflinfHflpfr} is pbssfd to thf
 * {@link TfrminblOp#fvblubtfPbrbllfl(PipflinfHflpfr, jbvb.util.Splitfrbtor)},
 * {@link TfrminblOp#fvblubtfSfqufntibl(PipflinfHflpfr, jbvb.util.Splitfrbtor)},
 * bnd {@link AbstrbdtPipflinf#opEvblubtfPbrbllfl(PipflinfHflpfr, jbvb.util.Splitfrbtor,
 * jbvb.util.fundtion.IntFundtion)}, mfthods, whidh dbn usf thf
 * {@dodf PipflinfHflpfr} to bddfss informbtion bbout thf pipflinf sudh bs
 * hfbd shbpf, strfbm flbgs, bnd sizf, bnd usf thf hflpfr mfthods
 * sudh bs {@link #wrbpAndCopyInto(Sink, Splitfrbtor)},
 * {@link #dopyInto(Sink, Splitfrbtor)}, bnd {@link #wrbpSink(Sink)} to fxfdutf
 * pipflinf opfrbtions.
 *
 * @pbrbm <P_OUT> typf of output flfmfnts from thf pipflinf
 * @sindf 1.8
 */
bbstrbdt dlbss PipflinfHflpfr<P_OUT> {

    /**
     * Gfts thf strfbm shbpf for thf sourdf of thf pipflinf sfgmfnt.
     *
     * @rfturn thf strfbm shbpf for thf sourdf of thf pipflinf sfgmfnt.
     */
    bbstrbdt StrfbmShbpf gftSourdfShbpf();

    /**
     * Gfts thf dombinfd strfbm bnd opfrbtion flbgs for thf output of thf dfsdribfd
     * pipflinf.  This will indorporbtf strfbm flbgs from thf strfbm sourdf, bll
     * thf intfrmfdibtf opfrbtions bnd thf tfrminbl opfrbtion.
     *
     * @rfturn thf dombinfd strfbm bnd opfrbtion flbgs
     * @sff StrfbmOpFlbg
     */
    bbstrbdt int gftStrfbmAndOpFlbgs();

    /**
     * Rfturns thf fxbdt output sizf of thf portion of thf output rfsulting from
     * bpplying thf pipflinf stbgfs dfsdribfd by this {@dodf PipflinfHflpfr} to
     * thf portion of thf input dfsdribfd by thf providfd
     * {@dodf Splitfrbtor}, if known.  If not known or known infinitf, will
     * rfturn {@dodf -1}.
     *
     * @bpiNotf
     * Thf fxbdt output sizf is known if thf {@dodf Splitfrbtor} hbs thf
     * {@dodf SIZED} dhbrbdtfristid, bnd thf opfrbtion flbgs
     * {@link StrfbmOpFlbg#SIZED} is known on thf dombinfd strfbm bnd opfrbtion
     * flbgs.
     *
     * @pbrbm splitfrbtor thf splitfrbtor dfsdribing thf rflfvbnt portion of thf
     *        sourdf dbtb
     * @rfturn thf fxbdt sizf if known, or -1 if infinitf or unknown
     */
    bbstrbdt<P_IN> long fxbdtOutputSizfIfKnown(Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Applifs thf pipflinf stbgfs dfsdribfd by this {@dodf PipflinfHflpfr} to
     * thf providfd {@dodf Splitfrbtor} bnd sfnd thf rfsults to thf providfd
     * {@dodf Sink}.
     *
     * @implSpfd
     * Thf implfmfntbtion bfhbvfs bs if:
     * <prf>{@dodf
     *     intoWrbppfd(wrbpSink(sink), splitfrbtor);
     * }</prf>
     *
     * @pbrbm sink thf {@dodf Sink} to rfdfivf thf rfsults
     * @pbrbm splitfrbtor thf splitfrbtor dfsdribing thf sourdf input to prodfss
     */
    bbstrbdt<P_IN, S fxtfnds Sink<P_OUT>> S wrbpAndCopyInto(S sink, Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Pushfs flfmfnts obtbinfd from thf {@dodf Splitfrbtor} into thf providfd
     * {@dodf Sink}.  If thf strfbm pipflinf is known to hbvf short-dirduiting
     * stbgfs in it (sff {@link StrfbmOpFlbg#SHORT_CIRCUIT}), thf
     * {@link Sink#dbndfllbtionRfqufstfd()} is dhfdkfd bftfr fbdh
     * flfmfnt, stopping if dbndfllbtion is rfqufstfd.
     *
     * @implSpfd
     * This mfthod donforms to thf {@dodf Sink} protodol of dblling
     * {@dodf Sink.bfgin} bfforf pushing flfmfnts, vib {@dodf Sink.bddfpt}, bnd
     * dblling {@dodf Sink.fnd} bftfr bll flfmfnts hbvf bffn pushfd.
     *
     * @pbrbm wrbppfdSink thf dfstinbtion {@dodf Sink}
     * @pbrbm splitfrbtor thf sourdf {@dodf Splitfrbtor}
     */
    bbstrbdt<P_IN> void dopyInto(Sink<P_IN> wrbppfdSink, Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Pushfs flfmfnts obtbinfd from thf {@dodf Splitfrbtor} into thf providfd
     * {@dodf Sink}, dhfdking {@link Sink#dbndfllbtionRfqufstfd()} bftfr fbdh
     * flfmfnt, bnd stopping if dbndfllbtion is rfqufstfd.
     *
     * @implSpfd
     * This mfthod donforms to thf {@dodf Sink} protodol of dblling
     * {@dodf Sink.bfgin} bfforf pushing flfmfnts, vib {@dodf Sink.bddfpt}, bnd
     * dblling {@dodf Sink.fnd} bftfr bll flfmfnts hbvf bffn pushfd or if
     * dbndfllbtion is rfqufstfd.
     *
     * @pbrbm wrbppfdSink thf dfstinbtion {@dodf Sink}
     * @pbrbm splitfrbtor thf sourdf {@dodf Splitfrbtor}
     */
    bbstrbdt <P_IN> void dopyIntoWithCbndfl(Sink<P_IN> wrbppfdSink, Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Tbkfs b {@dodf Sink} thbt bddfpts flfmfnts of thf output typf of thf
     * {@dodf PipflinfHflpfr}, bnd wrbp it with b {@dodf Sink} thbt bddfpts
     * flfmfnts of thf input typf bnd implfmfnts bll thf intfrmfdibtf opfrbtions
     * dfsdribfd by this {@dodf PipflinfHflpfr}, dflivfring thf rfsult into thf
     * providfd {@dodf Sink}.
     *
     * @pbrbm sink thf {@dodf Sink} to rfdfivf thf rfsults
     * @rfturn b {@dodf Sink} thbt implfmfnts thf pipflinf stbgfs bnd sfnds
     *         rfsults to thf providfd {@dodf Sink}
     */
    bbstrbdt<P_IN> Sink<P_IN> wrbpSink(Sink<P_OUT> sink);

    /**
     *
     * @pbrbm splitfrbtor
     * @pbrbm <P_IN>
     * @rfturn
     */
    bbstrbdt<P_IN> Splitfrbtor<P_OUT> wrbpSplitfrbtor(Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Construdts b @{link Nodf.Buildfr} dompbtiblf with thf output shbpf of
     * this {@dodf PipflinfHflpfr}.
     *
     * @pbrbm fxbdtSizfIfKnown if >=0 thfn b buildfr will bf drfbtfd thbt hbs b
     *        fixfd dbpbdity of fxbdtly sizfIfKnown flfmfnts; if < 0 thfn thf
     *        buildfr hbs vbribblf dbpbdity.  A fixfd dbpbdity buildfr will fbil
     *        if bn flfmfnt is bddfd bftfr thf buildfr hbs rfbdhfd dbpbdity.
     * @pbrbm gfnfrbtor b fbdtory fundtion for brrby instbndfs
     * @rfturn b {@dodf Nodf.Buildfr} dompbtiblf with thf output shbpf of this
     *         {@dodf PipflinfHflpfr}
     */
    bbstrbdt Nodf.Buildfr<P_OUT> mbkfNodfBuildfr(long fxbdtSizfIfKnown,
                                                 IntFundtion<P_OUT[]> gfnfrbtor);

    /**
     * Collfdts bll output flfmfnts rfsulting from bpplying thf pipflinf stbgfs
     * to thf sourdf {@dodf Splitfrbtor} into b {@dodf Nodf}.
     *
     * @implNotf
     * If thf pipflinf hbs no intfrmfdibtf opfrbtions bnd thf sourdf is bbdkfd
     * by b {@dodf Nodf} thfn thbt {@dodf Nodf} will bf rfturnfd (or flbttfnfd
     * bnd thfn rfturnfd). This rfdudfs dopying for b pipflinf donsisting of b
     * stbtfful opfrbtion followfd by b tfrminbl opfrbtion thbt rfturns bn
     * brrby, sudh bs:
     * <prf>{@dodf
     *     strfbm.sortfd().toArrby();
     * }</prf>
     *
     * @pbrbm splitfrbtor thf sourdf {@dodf Splitfrbtor}
     * @pbrbm flbttfn if truf bnd thf pipflinf is b pbrbllfl pipflinf thfn thf
     *        {@dodf Nodf} rfturnfd will dontbin no dhildrfn, othfrwisf thf
     *        {@dodf Nodf} mby rfprfsfnt thf root in b trff thbt rfflfdts thf
     *        shbpf of thf domputbtion trff.
     * @pbrbm gfnfrbtor b fbdtory fundtion for brrby instbndfs
     * @rfturn thf {@dodf Nodf} dontbining bll output flfmfnts
     */
    bbstrbdt<P_IN> Nodf<P_OUT> fvblubtf(Splitfrbtor<P_IN> splitfrbtor,
                                        boolfbn flbttfn,
                                        IntFundtion<P_OUT[]> gfnfrbtor);
}
