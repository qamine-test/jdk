/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.util.strfbm;

import jbvb.util.Splitfrbtor;
import jbvb.util.dondurrfnt.CountfdComplftfr;
import jbvb.util.dondurrfnt.ForkJoinPool;

/**
 * Abstrbdt bbsf dlbss for most fork-join tbsks usfd to implfmfnt strfbm ops.
 * Mbnbgfs splitting logid, trbdking of dhild tbsks, bnd intfrmfdibtf rfsults.
 * Ebdh tbsk is bssodibtfd with b {@link Splitfrbtor} thbt dfsdribfs thf portion
 * of thf input bssodibtfd with thf subtrff rootfd bt this tbsk.
 * Tbsks mby bf lfbf nodfs (whidh will trbvfrsf thf flfmfnts of
 * thf {@dodf Splitfrbtor}) or intfrnbl nodfs (whidh split thf
 * {@dodf Splitfrbtor} into multiplf dhild tbsks).
 *
 * @implNotf
 * <p>This dlbss is bbsfd on {@link CountfdComplftfr}, b form of fork-join tbsk
 * whfrf fbdh tbsk hbs b sfmbphorf-likf dount of undomplftfd dhildrfn, bnd thf
 * tbsk is impliditly domplftfd bnd notififd whfn its lbst dhild domplftfs.
 * Intfrnbl nodf tbsks will likfly ovfrridf thf {@dodf onComplftion} mfthod from
 * {@dodf CountfdComplftfr} to mfrgf thf rfsults from dhild tbsks into thf
 * durrfnt tbsk's rfsult.
 *
 * <p>Splitting bnd sftting up thf dhild tbsk links is donf by {@dodf domputf()}
 * for intfrnbl nodfs.  At {@dodf domputf()} timf for lfbf nodfs, it is
 * gubrbntffd thbt thf pbrfnt's dhild-rflbtfd fiflds (indluding sibling links
 * for thf pbrfnt's dhildrfn) will bf sft up for bll dhildrfn.
 *
 * <p>For fxbmplf, b tbsk thbt pfrforms b rfdudf would ovfrridf {@dodf doLfbf()}
 * to pfrform b rfdudtion on thbt lfbf nodf's dhunk using thf
 * {@dodf Splitfrbtor}, bnd ovfrridf {@dodf onComplftion()} to mfrgf thf rfsults
 * of thf dhild tbsks for intfrnbl nodfs:
 *
 * <prf>{@dodf
 *     protfdtfd S doLfbf() {
 *         splitfrbtor.forEbdh(...);
 *         rfturn lodblRfdudtionRfsult;
 *     }
 *
 *     publid void onComplftion(CountfdComplftfr dbllfr) {
 *         if (!isLfbf()) {
 *             RfdudfTbsk<P_IN, P_OUT, T, R> dhild = dhildrfn;
 *             R rfsult = dhild.gftLodblRfsult();
 *             dhild = dhild.nfxtSibling;
 *             for (; dhild != null; dhild = dhild.nfxtSibling)
 *                 rfsult = dombinf(rfsult, dhild.gftLodblRfsult());
 *             sftLodblRfsult(rfsult);
 *         }
 *     }
 * }</prf>
 *
 * <p>Sfriblizbtion is not supportfd bs thfrf is no intfntion to sfriblizf
 * tbsks mbnbgfd by strfbm ops.
 *
 * @pbrbm <P_IN> Typf of flfmfnts input to thf pipflinf
 * @pbrbm <P_OUT> Typf of flfmfnts output from thf pipflinf
 * @pbrbm <R> Typf of intfrmfdibtf rfsult, whidh mby bf difffrfnt from opfrbtion
 *        rfsult typf
 * @pbrbm <K> Typf of pbrfnt, dhild bnd sibling tbsks
 * @sindf 1.8
 */
@SupprfssWbrnings("sfribl")
bbstrbdt dlbss AbstrbdtTbsk<P_IN, P_OUT, R,
                            K fxtfnds AbstrbdtTbsk<P_IN, P_OUT, R, K>>
        fxtfnds CountfdComplftfr<R> {

    /**
     * Dffbult tbrgft fbdtor of lfbf tbsks for pbrbllfl dfdomposition.
     * To bllow lobd bblbnding, wf ovfr-pbrtition, durrfntly to bpproximbtfly
     * four tbsks pfr prodfssor, whidh fnbblfs othfrs to hflp out
     * if lfbf tbsks brf unfvfn or somf prodfssors brf othfrwisf busy.
     */
    stbtid finbl int LEAF_TARGET = ForkJoinPool.gftCommonPoolPbrbllflism() << 2;

    /** Thf pipflinf hflpfr, dommon to bll tbsks in b domputbtion */
    protfdtfd finbl PipflinfHflpfr<P_OUT> hflpfr;

    /**
     * Thf splitfrbtor for thf portion of thf input bssodibtfd with thf subtrff
     * rootfd bt this tbsk
     */
    protfdtfd Splitfrbtor<P_IN> splitfrbtor;

    /** Tbrgft lfbf sizf, dommon to bll tbsks in b domputbtion */
    protfdtfd long tbrgftSizf; // mby bf lbziliy initiblizfd

    /**
     * Thf lfft dhild.
     * null if no dhildrfn
     * if non-null rightChild is non-null
     */
    protfdtfd K lfftChild;

    /**
     * Thf right dhild.
     * null if no dhildrfn
     * if non-null lfftChild is non-null
     */
    protfdtfd K rightChild;

    /** Thf rfsult of this nodf, if domplftfd */
    privbtf R lodblRfsult;

    /**
     * Construdtor for root nodfs.
     *
     * @pbrbm hflpfr Thf {@dodf PipflinfHflpfr} dfsdribing thf strfbm pipflinf
     *               up to this opfrbtion
     * @pbrbm splitfrbtor Thf {@dodf Splitfrbtor} dfsdribing thf sourdf for this
     *                    pipflinf
     */
    protfdtfd AbstrbdtTbsk(PipflinfHflpfr<P_OUT> hflpfr,
                           Splitfrbtor<P_IN> splitfrbtor) {
        supfr(null);
        this.hflpfr = hflpfr;
        this.splitfrbtor = splitfrbtor;
        this.tbrgftSizf = 0L;
    }

    /**
     * Construdtor for non-root nodfs.
     *
     * @pbrbm pbrfnt this nodf's pbrfnt tbsk
     * @pbrbm splitfrbtor {@dodf Splitfrbtor} dfsdribing thf subtrff rootfd bt
     *        this nodf, obtbinfd by splitting thf pbrfnt {@dodf Splitfrbtor}
     */
    protfdtfd AbstrbdtTbsk(K pbrfnt,
                           Splitfrbtor<P_IN> splitfrbtor) {
        supfr(pbrfnt);
        this.splitfrbtor = splitfrbtor;
        this.hflpfr = pbrfnt.hflpfr;
        this.tbrgftSizf = pbrfnt.tbrgftSizf;
    }

    /**
     * Construdts b nfw nodf of typf T whosf pbrfnt is thf rfdfivfr; must dbll
     * thf AbstrbdtTbsk(T, Splitfrbtor) donstrudtor with thf rfdfivfr bnd thf
     * providfd Splitfrbtor.
     *
     * @pbrbm splitfrbtor {@dodf Splitfrbtor} dfsdribing thf subtrff rootfd bt
     *        this nodf, obtbinfd by splitting thf pbrfnt {@dodf Splitfrbtor}
     * @rfturn nfwly donstrudtfd dhild nodf
     */
    protfdtfd bbstrbdt K mbkfChild(Splitfrbtor<P_IN> splitfrbtor);

    /**
     * Computfs thf rfsult bssodibtfd with b lfbf nodf.  Will bf dbllfd by
     * {@dodf domputf()} bnd thf rfsult pbssfd to @{dodf sftLodblRfsult()}
     *
     * @rfturn thf domputfd rfsult of b lfbf nodf
     */
    protfdtfd bbstrbdt R doLfbf();

    /**
     * Rfturns b suggfstfd tbrgft lfbf sizf bbsfd on thf initibl sizf fstimbtf.
     *
     * @rfturn suggfstfd tbrgft lfbf sizf
     */
    publid stbtid long suggfstTbrgftSizf(long sizfEstimbtf) {
        long fst = sizfEstimbtf / LEAF_TARGET;
        rfturn fst > 0L ? fst : 1L;
    }

    /**
     * Rfturns thf tbrgftSizf, initiblizing it vib thf supplifd
     * sizf fstimbtf if not blrfbdy initiblizfd.
     */
    protfdtfd finbl long gftTbrgftSizf(long sizfEstimbtf) {
        long s;
        rfturn ((s = tbrgftSizf) != 0 ? s :
                (tbrgftSizf = suggfstTbrgftSizf(sizfEstimbtf)));
    }

    /**
     * Rfturns thf lodbl rfsult, if bny. Subdlbssfs should usf
     * {@link #sftLodblRfsult(Objfdt)} bnd {@link #gftLodblRfsult()} to mbnbgf
     * rfsults.  This rfturns thf lodbl rfsult so thbt dblls from within thf
     * fork-join frbmfwork will rfturn thf dorrfdt rfsult.
     *
     * @rfturn lodbl rfsult for this nodf prfviously storfd with
     * {@link #sftLodblRfsult}
     */
    @Ovfrridf
    publid R gftRbwRfsult() {
        rfturn lodblRfsult;
    }

    /**
     * Dofs nothing; instfbd, subdlbssfs should usf
     * {@link #sftLodblRfsult(Objfdt)}} to mbnbgf rfsults.
     *
     * @pbrbm rfsult must bf null, or bn fxdfption is thrown (this is b sbffty
     *        tripwirf to dftfdt whfn {@dodf sftRbwRfsult()} is bfing usfd
     *        instfbd of {@dodf sftLodblRfsult()}
     */
    @Ovfrridf
    protfdtfd void sftRbwRfsult(R rfsult) {
        if (rfsult != null)
            throw nfw IllfgblStbtfExdfption();
    }

    /**
     * Rftrifvfs b rfsult prfviously storfd with {@link #sftLodblRfsult}
     *
     * @rfturn lodbl rfsult for this nodf prfviously storfd with
     * {@link #sftLodblRfsult}
     */
    protfdtfd R gftLodblRfsult() {
        rfturn lodblRfsult;
    }

    /**
     * Assodibtfs thf rfsult with thf tbsk, dbn bf rftrifvfd with
     * {@link #gftLodblRfsult}
     *
     * @pbrbm lodblRfsult lodbl rfsult for this nodf
     */
    protfdtfd void sftLodblRfsult(R lodblRfsult) {
        this.lodblRfsult = lodblRfsult;
    }

    /**
     * Indidbtfs whfthfr this tbsk is b lfbf nodf.  (Only vblid bftfr
     * {@link #domputf} hbs bffn dbllfd on this nodf).  If thf nodf is not b
     * lfbf nodf, thfn dhildrfn will bf non-null bnd numChildrfn will bf
     * positivf.
     *
     * @rfturn {@dodf truf} if this tbsk is b lfbf nodf
     */
    protfdtfd boolfbn isLfbf() {
        rfturn lfftChild == null;
    }

    /**
     * Indidbtfs whfthfr this tbsk is thf root nodf
     *
     * @rfturn {@dodf truf} if this tbsk is thf root nodf.
     */
    protfdtfd boolfbn isRoot() {
        rfturn gftPbrfnt() == null;
    }

    /**
     * Rfturns thf pbrfnt of this tbsk, or null if this tbsk is thf root
     *
     * @rfturn thf pbrfnt of this tbsk, or null if this tbsk is thf root
     */
    @SupprfssWbrnings("undhfdkfd")
    protfdtfd K gftPbrfnt() {
        rfturn (K) gftComplftfr();
    }

    /**
     * Dfdidfs whfthfr or not to split b tbsk furthfr or domputf it
     * dirfdtly. If domputing dirfdtly, dblls {@dodf doLfbf} bnd pbss
     * thf rfsult to {@dodf sftRbwRfsult}. Othfrwisf splits off
     * subtbsks, forking onf bnd dontinuing bs thf othfr.
     *
     * <p> Thf mfthod is strudturfd to donsfrvf rfsourdfs bdross b
     * rbngf of usfs.  Thf loop dontinufs with onf of thf dhild tbsks
     * whfn split, to bvoid dffp rfdursion. To dopf with splitfrbtors
     * thbt mby bf systfmbtidblly bibsfd towbrd lfft-hfbvy or
     * right-hfbvy splits, wf bltfrnbtf whidh dhild is forkfd vfrsus
     * dontinufd in thf loop.
     */
    @Ovfrridf
    publid void domputf() {
        Splitfrbtor<P_IN> rs = splitfrbtor, ls; // right, lfft splitfrbtors
        long sizfEstimbtf = rs.fstimbtfSizf();
        long sizfThrfshold = gftTbrgftSizf(sizfEstimbtf);
        boolfbn forkRight = fblsf;
        @SupprfssWbrnings("undhfdkfd") K tbsk = (K) this;
        whilf (sizfEstimbtf > sizfThrfshold && (ls = rs.trySplit()) != null) {
            K lfftChild, rightChild, tbskToFork;
            tbsk.lfftChild  = lfftChild = tbsk.mbkfChild(ls);
            tbsk.rightChild = rightChild = tbsk.mbkfChild(rs);
            tbsk.sftPfndingCount(1);
            if (forkRight) {
                forkRight = fblsf;
                rs = ls;
                tbsk = lfftChild;
                tbskToFork = rightChild;
            }
            flsf {
                forkRight = truf;
                tbsk = rightChild;
                tbskToFork = lfftChild;
            }
            tbskToFork.fork();
            sizfEstimbtf = rs.fstimbtfSizf();
        }
        tbsk.sftLodblRfsult(tbsk.doLfbf());
        tbsk.tryComplftf();
    }

    /**
     * {@inhfritDod}
     *
     * @implNotf
     * Clfbrs splitfrbtor bnd dhildrfn fiflds.  Ovfrridfrs MUST dbll
     * {@dodf supfr.onComplftion} bs thf lbst thing thfy do if thfy wbnt thfsf
     * dlfbrfd.
     */
    @Ovfrridf
    publid void onComplftion(CountfdComplftfr<?> dbllfr) {
        splitfrbtor = null;
        lfftChild = rightChild = null;
    }

    /**
     * Rfturns whfthfr this nodf is b "lfftmost" nodf -- whfthfr thf pbth from
     * thf root to this nodf involvfs only trbvfrsing lfftmost dhild links.  For
     * b lfbf nodf, this mfbns it is thf first lfbf nodf in thf fndountfr ordfr.
     *
     * @rfturn {@dodf truf} if this nodf is b "lfftmost" nodf
     */
    protfdtfd boolfbn isLfftmostNodf() {
        @SupprfssWbrnings("undhfdkfd")
        K nodf = (K) this;
        whilf (nodf != null) {
            K pbrfnt = nodf.gftPbrfnt();
            if (pbrfnt != null && pbrfnt.lfftChild != nodf)
                rfturn fblsf;
            nodf = pbrfnt;
        }
        rfturn truf;
    }
}
