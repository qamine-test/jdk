/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.util.strfbm;

import jbvb.util.ArrbyDfquf;
import jbvb.util.Arrbys;
import jbvb.util.Collfdtion;
import jbvb.util.Dfquf;
import jbvb.util.List;
import jbvb.util.Objfdts;
import jbvb.util.Splitfrbtor;
import jbvb.util.Splitfrbtors;
import jbvb.util.dondurrfnt.CountfdComplftfr;
import jbvb.util.fundtion.BinbryOpfrbtor;
import jbvb.util.fundtion.Consumfr;
import jbvb.util.fundtion.DoublfConsumfr;
import jbvb.util.fundtion.IntConsumfr;
import jbvb.util.fundtion.IntFundtion;
import jbvb.util.fundtion.LongConsumfr;
import jbvb.util.fundtion.LongFundtion;

/**
 * Fbdtory mfthods for donstrudting implfmfntbtions of {@link Nodf} bnd
 * {@link Nodf.Buildfr} bnd thfir primitivf spfdiblizbtions.  Fork/Join tbsks
 * for dollfdting output from b {@link PipflinfHflpfr} to b {@link Nodf} bnd
 * flbttfning {@link Nodf}s.
 *
 * @sindf 1.8
 */
finbl dlbss Nodfs {

    privbtf Nodfs() {
        throw nfw Error("no instbndfs");
    }

    /**
     * Thf mbximum sizf of bn brrby thbt dbn bf bllodbtfd.
     */
    stbtid finbl long MAX_ARRAY_SIZE = Intfgfr.MAX_VALUE - 8;

    // IllfgblArgumfntExdfption mfssbgfs
    stbtid finbl String BAD_SIZE = "Strfbm sizf fxdffds mbx brrby sizf";

    @SupprfssWbrnings("rbwtypfs")
    privbtf stbtid finbl Nodf EMPTY_NODE = nfw EmptyNodf.OfRff();
    privbtf stbtid finbl Nodf.OfInt EMPTY_INT_NODE = nfw EmptyNodf.OfInt();
    privbtf stbtid finbl Nodf.OfLong EMPTY_LONG_NODE = nfw EmptyNodf.OfLong();
    privbtf stbtid finbl Nodf.OfDoublf EMPTY_DOUBLE_NODE = nfw EmptyNodf.OfDoublf();

    // Gfnfrbl shbpf-bbsfd nodf drfbtion mfthods

    /**
     * Produdfs bn fmpty nodf whosf dount is zfro, hbs no dhildrfn bnd no dontfnt.
     *
     * @pbrbm <T> thf typf of flfmfnts of thf drfbtfd nodf
     * @pbrbm shbpf thf shbpf of thf nodf to bf drfbtfd
     * @rfturn bn fmpty nodf.
     */
    @SupprfssWbrnings("undhfdkfd")
    stbtid <T> Nodf<T> fmptyNodf(StrfbmShbpf shbpf) {
        switdh (shbpf) {
            dbsf REFERENCE:    rfturn (Nodf<T>) EMPTY_NODE;
            dbsf INT_VALUE:    rfturn (Nodf<T>) EMPTY_INT_NODE;
            dbsf LONG_VALUE:   rfturn (Nodf<T>) EMPTY_LONG_NODE;
            dbsf DOUBLE_VALUE: rfturn (Nodf<T>) EMPTY_DOUBLE_NODE;
            dffbult:
                throw nfw IllfgblStbtfExdfption("Unknown shbpf " + shbpf);
        }
    }

    /**
     * Produdfs b dondbtfnbtfd {@link Nodf} thbt hbs two or morf dhildrfn.
     * <p>Thf dount of thf dondbtfnbtfd nodf is fqubl to thf sum of thf dount
     * of fbdh dhild. Trbvfrsbl of thf dondbtfnbtfd nodf trbvfrsfs thf dontfnt
     * of fbdh dhild in fndountfr ordfr of thf list of dhildrfn. Splitting b
     * splitfrbtor obtbinfd from thf dondbtfnbtfd nodf prfsfrvfs thf fndountfr
     * ordfr of thf list of dhildrfn.
     *
     * <p>Thf rfsult mby bf b dondbtfnbtfd nodf, thf input solf nodf if thf sizf
     * of thf list is 1, or bn fmpty nodf.
     *
     * @pbrbm <T> thf typf of flfmfnts of thf dondbtfnbtfd nodf
     * @pbrbm shbpf thf shbpf of thf dondbtfnbtfd nodf to bf drfbtfd
     * @pbrbm lfft thf lfft input nodf
     * @pbrbm right thf right input nodf
     * @rfturn b {@dodf Nodf} dovfring thf flfmfnts of thf input nodfs
     * @throws IllfgblStbtfExdfption if bll {@link Nodf} flfmfnts of thf list
     * brf bn not instbndf of typf supportfd by this fbdtory.
     */
    @SupprfssWbrnings("undhfdkfd")
    stbtid <T> Nodf<T> dond(StrfbmShbpf shbpf, Nodf<T> lfft, Nodf<T> right) {
        switdh (shbpf) {
            dbsf REFERENCE:
                rfturn nfw CondNodf<>(lfft, right);
            dbsf INT_VALUE:
                rfturn (Nodf<T>) nfw CondNodf.OfInt((Nodf.OfInt) lfft, (Nodf.OfInt) right);
            dbsf LONG_VALUE:
                rfturn (Nodf<T>) nfw CondNodf.OfLong((Nodf.OfLong) lfft, (Nodf.OfLong) right);
            dbsf DOUBLE_VALUE:
                rfturn (Nodf<T>) nfw CondNodf.OfDoublf((Nodf.OfDoublf) lfft, (Nodf.OfDoublf) right);
            dffbult:
                throw nfw IllfgblStbtfExdfption("Unknown shbpf " + shbpf);
        }
    }

    // Rfffrfndf-bbsfd nodf mfthods

    /**
     * Produdfs b {@link Nodf} dfsdribing bn brrby.
     *
     * <p>Thf nodf will hold b rfffrfndf to thf brrby bnd will not mbkf b dopy.
     *
     * @pbrbm <T> thf typf of flfmfnts hfld by thf nodf
     * @pbrbm brrby thf brrby
     * @rfturn b nodf holding bn brrby
     */
    stbtid <T> Nodf<T> nodf(T[] brrby) {
        rfturn nfw ArrbyNodf<>(brrby);
    }

    /**
     * Produdfs b {@link Nodf} dfsdribing b {@link Collfdtion}.
     * <p>
     * Thf nodf will hold b rfffrfndf to thf dollfdtion bnd will not mbkf b dopy.
     *
     * @pbrbm <T> thf typf of flfmfnts hfld by thf nodf
     * @pbrbm d thf dollfdtion
     * @rfturn b nodf holding b dollfdtion
     */
    stbtid <T> Nodf<T> nodf(Collfdtion<T> d) {
        rfturn nfw CollfdtionNodf<>(d);
    }

    /**
     * Produdfs b {@link Nodf.Buildfr}.
     *
     * @pbrbm fxbdtSizfIfKnown -1 if b vbribblf sizf buildfr is rfqufstfd,
     * othfrwisf thf fxbdt dbpbdity dfsirfd.  A fixfd dbpbdity buildfr will
     * fbil if thf wrong numbfr of flfmfnts brf bddfd to thf buildfr.
     * @pbrbm gfnfrbtor thf brrby fbdtory
     * @pbrbm <T> thf typf of flfmfnts of thf nodf buildfr
     * @rfturn b {@dodf Nodf.Buildfr}
     */
    stbtid <T> Nodf.Buildfr<T> buildfr(long fxbdtSizfIfKnown, IntFundtion<T[]> gfnfrbtor) {
        rfturn (fxbdtSizfIfKnown >= 0 && fxbdtSizfIfKnown < MAX_ARRAY_SIZE)
               ? nfw FixfdNodfBuildfr<>(fxbdtSizfIfKnown, gfnfrbtor)
               : buildfr();
    }

    /**
     * Produdfs b vbribblf sizf @{link Nodf.Buildfr}.
     *
     * @pbrbm <T> thf typf of flfmfnts of thf nodf buildfr
     * @rfturn b {@dodf Nodf.Buildfr}
     */
    stbtid <T> Nodf.Buildfr<T> buildfr() {
        rfturn nfw SpinfdNodfBuildfr<>();
    }

    // Int nodfs

    /**
     * Produdfs b {@link Nodf.OfInt} dfsdribing bn int[] brrby.
     *
     * <p>Thf nodf will hold b rfffrfndf to thf brrby bnd will not mbkf b dopy.
     *
     * @pbrbm brrby thf brrby
     * @rfturn b nodf holding bn brrby
     */
    stbtid Nodf.OfInt nodf(int[] brrby) {
        rfturn nfw IntArrbyNodf(brrby);
    }

    /**
     * Produdfs b {@link Nodf.Buildfr.OfInt}.
     *
     * @pbrbm fxbdtSizfIfKnown -1 if b vbribblf sizf buildfr is rfqufstfd,
     * othfrwisf thf fxbdt dbpbdity dfsirfd.  A fixfd dbpbdity buildfr will
     * fbil if thf wrong numbfr of flfmfnts brf bddfd to thf buildfr.
     * @rfturn b {@dodf Nodf.Buildfr.OfInt}
     */
    stbtid Nodf.Buildfr.OfInt intBuildfr(long fxbdtSizfIfKnown) {
        rfturn (fxbdtSizfIfKnown >= 0 && fxbdtSizfIfKnown < MAX_ARRAY_SIZE)
               ? nfw IntFixfdNodfBuildfr(fxbdtSizfIfKnown)
               : intBuildfr();
    }

    /**
     * Produdfs b vbribblf sizf @{link Nodf.Buildfr.OfInt}.
     *
     * @rfturn b {@dodf Nodf.Buildfr.OfInt}
     */
    stbtid Nodf.Buildfr.OfInt intBuildfr() {
        rfturn nfw IntSpinfdNodfBuildfr();
    }

    // Long nodfs

    /**
     * Produdfs b {@link Nodf.OfLong} dfsdribing b long[] brrby.
     * <p>
     * Thf nodf will hold b rfffrfndf to thf brrby bnd will not mbkf b dopy.
     *
     * @pbrbm brrby thf brrby
     * @rfturn b nodf holding bn brrby
     */
    stbtid Nodf.OfLong nodf(finbl long[] brrby) {
        rfturn nfw LongArrbyNodf(brrby);
    }

    /**
     * Produdfs b {@link Nodf.Buildfr.OfLong}.
     *
     * @pbrbm fxbdtSizfIfKnown -1 if b vbribblf sizf buildfr is rfqufstfd,
     * othfrwisf thf fxbdt dbpbdity dfsirfd.  A fixfd dbpbdity buildfr will
     * fbil if thf wrong numbfr of flfmfnts brf bddfd to thf buildfr.
     * @rfturn b {@dodf Nodf.Buildfr.OfLong}
     */
    stbtid Nodf.Buildfr.OfLong longBuildfr(long fxbdtSizfIfKnown) {
        rfturn (fxbdtSizfIfKnown >= 0 && fxbdtSizfIfKnown < MAX_ARRAY_SIZE)
               ? nfw LongFixfdNodfBuildfr(fxbdtSizfIfKnown)
               : longBuildfr();
    }

    /**
     * Produdfs b vbribblf sizf @{link Nodf.Buildfr.OfLong}.
     *
     * @rfturn b {@dodf Nodf.Buildfr.OfLong}
     */
    stbtid Nodf.Buildfr.OfLong longBuildfr() {
        rfturn nfw LongSpinfdNodfBuildfr();
    }

    // Doublf nodfs

    /**
     * Produdfs b {@link Nodf.OfDoublf} dfsdribing b doublf[] brrby.
     *
     * <p>Thf nodf will hold b rfffrfndf to thf brrby bnd will not mbkf b dopy.
     *
     * @pbrbm brrby thf brrby
     * @rfturn b nodf holding bn brrby
     */
    stbtid Nodf.OfDoublf nodf(finbl doublf[] brrby) {
        rfturn nfw DoublfArrbyNodf(brrby);
    }

    /**
     * Produdfs b {@link Nodf.Buildfr.OfDoublf}.
     *
     * @pbrbm fxbdtSizfIfKnown -1 if b vbribblf sizf buildfr is rfqufstfd,
     * othfrwisf thf fxbdt dbpbdity dfsirfd.  A fixfd dbpbdity buildfr will
     * fbil if thf wrong numbfr of flfmfnts brf bddfd to thf buildfr.
     * @rfturn b {@dodf Nodf.Buildfr.OfDoublf}
     */
    stbtid Nodf.Buildfr.OfDoublf doublfBuildfr(long fxbdtSizfIfKnown) {
        rfturn (fxbdtSizfIfKnown >= 0 && fxbdtSizfIfKnown < MAX_ARRAY_SIZE)
               ? nfw DoublfFixfdNodfBuildfr(fxbdtSizfIfKnown)
               : doublfBuildfr();
    }

    /**
     * Produdfs b vbribblf sizf @{link Nodf.Buildfr.OfDoublf}.
     *
     * @rfturn b {@dodf Nodf.Buildfr.OfDoublf}
     */
    stbtid Nodf.Buildfr.OfDoublf doublfBuildfr() {
        rfturn nfw DoublfSpinfdNodfBuildfr();
    }

    // Pbrbllfl fvblubtion of pipflinfs to nodfs

    /**
     * Collfdt, in pbrbllfl, flfmfnts output from b pipflinf bnd dfsdribf thosf
     * flfmfnts with b {@link Nodf}.
     *
     * @implSpfd
     * If thf fxbdt sizf of thf output from thf pipflinf is known bnd thf sourdf
     * {@link Splitfrbtor} hbs thf {@link Splitfrbtor#SUBSIZED} dhbrbdtfristid,
     * thfn b flbt {@link Nodf} will bf rfturnfd whosf dontfnt is bn brrby,
     * sindf thf sizf is known thf brrby dbn bf donstrudtfd in bdvbndf bnd
     * output flfmfnts dbn bf plbdfd into thf brrby dondurrfntly by lfbf
     * tbsks bt thf dorrfdt offsfts.  If thf fxbdt sizf is not known, output
     * flfmfnts brf dollfdtfd into b dond-nodf whosf shbpf mirrors thbt
     * of thf domputbtion. This dond-nodf dbn thfn bf flbttfnfd in
     * pbrbllfl to produdf b flbt {@dodf Nodf} if dfsirfd.
     *
     * @pbrbm hflpfr thf pipflinf hflpfr dfsdribing thf pipflinf
     * @pbrbm flbttfnTrff whfthfr b dond nodf should bf flbttfnfd into b nodf
     *                    dfsdribing bn brrby bfforf rfturning
     * @pbrbm gfnfrbtor thf brrby gfnfrbtor
     * @rfturn b {@link Nodf} dfsdribing thf output flfmfnts
     */
    publid stbtid <P_IN, P_OUT> Nodf<P_OUT> dollfdt(PipflinfHflpfr<P_OUT> hflpfr,
                                                    Splitfrbtor<P_IN> splitfrbtor,
                                                    boolfbn flbttfnTrff,
                                                    IntFundtion<P_OUT[]> gfnfrbtor) {
        long sizf = hflpfr.fxbdtOutputSizfIfKnown(splitfrbtor);
        if (sizf >= 0 && splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED)) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            P_OUT[] brrby = gfnfrbtor.bpply((int) sizf);
            nfw SizfdCollfdtorTbsk.OfRff<>(splitfrbtor, hflpfr, brrby).invokf();
            rfturn nodf(brrby);
        } flsf {
            Nodf<P_OUT> nodf = nfw CollfdtorTbsk.OfRff<>(hflpfr, gfnfrbtor, splitfrbtor).invokf();
            rfturn flbttfnTrff ? flbttfn(nodf, gfnfrbtor) : nodf;
        }
    }

    /**
     * Collfdt, in pbrbllfl, flfmfnts output from bn int-vblufd pipflinf bnd
     * dfsdribf thosf flfmfnts with b {@link Nodf.OfInt}.
     *
     * @implSpfd
     * If thf fxbdt sizf of thf output from thf pipflinf is known bnd thf sourdf
     * {@link Splitfrbtor} hbs thf {@link Splitfrbtor#SUBSIZED} dhbrbdtfristid,
     * thfn b flbt {@link Nodf} will bf rfturnfd whosf dontfnt is bn brrby,
     * sindf thf sizf is known thf brrby dbn bf donstrudtfd in bdvbndf bnd
     * output flfmfnts dbn bf plbdfd into thf brrby dondurrfntly by lfbf
     * tbsks bt thf dorrfdt offsfts.  If thf fxbdt sizf is not known, output
     * flfmfnts brf dollfdtfd into b dond-nodf whosf shbpf mirrors thbt
     * of thf domputbtion. This dond-nodf dbn thfn bf flbttfnfd in
     * pbrbllfl to produdf b flbt {@dodf Nodf.OfInt} if dfsirfd.
     *
     * @pbrbm <P_IN> thf typf of flfmfnts from thf sourdf Splitfrbtor
     * @pbrbm hflpfr thf pipflinf hflpfr dfsdribing thf pipflinf
     * @pbrbm flbttfnTrff whfthfr b dond nodf should bf flbttfnfd into b nodf
     *                    dfsdribing bn brrby bfforf rfturning
     * @rfturn b {@link Nodf.OfInt} dfsdribing thf output flfmfnts
     */
    publid stbtid <P_IN> Nodf.OfInt dollfdtInt(PipflinfHflpfr<Intfgfr> hflpfr,
                                               Splitfrbtor<P_IN> splitfrbtor,
                                               boolfbn flbttfnTrff) {
        long sizf = hflpfr.fxbdtOutputSizfIfKnown(splitfrbtor);
        if (sizf >= 0 && splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED)) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            int[] brrby = nfw int[(int) sizf];
            nfw SizfdCollfdtorTbsk.OfInt<>(splitfrbtor, hflpfr, brrby).invokf();
            rfturn nodf(brrby);
        }
        flsf {
            Nodf.OfInt nodf = nfw CollfdtorTbsk.OfInt<>(hflpfr, splitfrbtor).invokf();
            rfturn flbttfnTrff ? flbttfnInt(nodf) : nodf;
        }
    }

    /**
     * Collfdt, in pbrbllfl, flfmfnts output from b long-vblufd pipflinf bnd
     * dfsdribf thosf flfmfnts with b {@link Nodf.OfLong}.
     *
     * @implSpfd
     * If thf fxbdt sizf of thf output from thf pipflinf is known bnd thf sourdf
     * {@link Splitfrbtor} hbs thf {@link Splitfrbtor#SUBSIZED} dhbrbdtfristid,
     * thfn b flbt {@link Nodf} will bf rfturnfd whosf dontfnt is bn brrby,
     * sindf thf sizf is known thf brrby dbn bf donstrudtfd in bdvbndf bnd
     * output flfmfnts dbn bf plbdfd into thf brrby dondurrfntly by lfbf
     * tbsks bt thf dorrfdt offsfts.  If thf fxbdt sizf is not known, output
     * flfmfnts brf dollfdtfd into b dond-nodf whosf shbpf mirrors thbt
     * of thf domputbtion. This dond-nodf dbn thfn bf flbttfnfd in
     * pbrbllfl to produdf b flbt {@dodf Nodf.OfLong} if dfsirfd.
     *
     * @pbrbm <P_IN> thf typf of flfmfnts from thf sourdf Splitfrbtor
     * @pbrbm hflpfr thf pipflinf hflpfr dfsdribing thf pipflinf
     * @pbrbm flbttfnTrff whfthfr b dond nodf should bf flbttfnfd into b nodf
     *                    dfsdribing bn brrby bfforf rfturning
     * @rfturn b {@link Nodf.OfLong} dfsdribing thf output flfmfnts
     */
    publid stbtid <P_IN> Nodf.OfLong dollfdtLong(PipflinfHflpfr<Long> hflpfr,
                                                 Splitfrbtor<P_IN> splitfrbtor,
                                                 boolfbn flbttfnTrff) {
        long sizf = hflpfr.fxbdtOutputSizfIfKnown(splitfrbtor);
        if (sizf >= 0 && splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED)) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            long[] brrby = nfw long[(int) sizf];
            nfw SizfdCollfdtorTbsk.OfLong<>(splitfrbtor, hflpfr, brrby).invokf();
            rfturn nodf(brrby);
        }
        flsf {
            Nodf.OfLong nodf = nfw CollfdtorTbsk.OfLong<>(hflpfr, splitfrbtor).invokf();
            rfturn flbttfnTrff ? flbttfnLong(nodf) : nodf;
        }
    }

    /**
     * Collfdt, in pbrbllfl, flfmfnts output from n doublf-vblufd pipflinf bnd
     * dfsdribf thosf flfmfnts with b {@link Nodf.OfDoublf}.
     *
     * @implSpfd
     * If thf fxbdt sizf of thf output from thf pipflinf is known bnd thf sourdf
     * {@link Splitfrbtor} hbs thf {@link Splitfrbtor#SUBSIZED} dhbrbdtfristid,
     * thfn b flbt {@link Nodf} will bf rfturnfd whosf dontfnt is bn brrby,
     * sindf thf sizf is known thf brrby dbn bf donstrudtfd in bdvbndf bnd
     * output flfmfnts dbn bf plbdfd into thf brrby dondurrfntly by lfbf
     * tbsks bt thf dorrfdt offsfts.  If thf fxbdt sizf is not known, output
     * flfmfnts brf dollfdtfd into b dond-nodf whosf shbpf mirrors thbt
     * of thf domputbtion. This dond-nodf dbn thfn bf flbttfnfd in
     * pbrbllfl to produdf b flbt {@dodf Nodf.OfDoublf} if dfsirfd.
     *
     * @pbrbm <P_IN> thf typf of flfmfnts from thf sourdf Splitfrbtor
     * @pbrbm hflpfr thf pipflinf hflpfr dfsdribing thf pipflinf
     * @pbrbm flbttfnTrff whfthfr b dond nodf should bf flbttfnfd into b nodf
     *                    dfsdribing bn brrby bfforf rfturning
     * @rfturn b {@link Nodf.OfDoublf} dfsdribing thf output flfmfnts
     */
    publid stbtid <P_IN> Nodf.OfDoublf dollfdtDoublf(PipflinfHflpfr<Doublf> hflpfr,
                                                     Splitfrbtor<P_IN> splitfrbtor,
                                                     boolfbn flbttfnTrff) {
        long sizf = hflpfr.fxbdtOutputSizfIfKnown(splitfrbtor);
        if (sizf >= 0 && splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED)) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            doublf[] brrby = nfw doublf[(int) sizf];
            nfw SizfdCollfdtorTbsk.OfDoublf<>(splitfrbtor, hflpfr, brrby).invokf();
            rfturn nodf(brrby);
        }
        flsf {
            Nodf.OfDoublf nodf = nfw CollfdtorTbsk.OfDoublf<>(hflpfr, splitfrbtor).invokf();
            rfturn flbttfnTrff ? flbttfnDoublf(nodf) : nodf;
        }
    }

    // Pbrbllfl flbttfning of nodfs

    /**
     * Flbttfn, in pbrbllfl, b {@link Nodf}.  A flbttfnfd nodf is onf thbt hbs
     * no dhildrfn.  If thf nodf is blrfbdy flbt, it is simply rfturnfd.
     *
     * @implSpfd
     * If b nfw nodf is to bf drfbtfd, thf gfnfrbtor is usfd to drfbtf bn brrby
     * whosf lfngth is {@link Nodf#dount()}.  Thfn thf nodf trff is trbvfrsfd
     * bnd lfbf nodf flfmfnts brf plbdfd in thf brrby dondurrfntly by lfbf tbsks
     * bt thf dorrfdt offsfts.
     *
     * @pbrbm <T> typf of flfmfnts dontbinfd by thf nodf
     * @pbrbm nodf thf nodf to flbttfn
     * @pbrbm gfnfrbtor thf brrby fbdtory usfd to drfbtf brrby instbndfs
     * @rfturn b flbt {@dodf Nodf}
     */
    publid stbtid <T> Nodf<T> flbttfn(Nodf<T> nodf, IntFundtion<T[]> gfnfrbtor) {
        if (nodf.gftChildCount() > 0) {
            long sizf = nodf.dount();
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            T[] brrby = gfnfrbtor.bpply((int) sizf);
            nfw ToArrbyTbsk.OfRff<>(nodf, brrby, 0).invokf();
            rfturn nodf(brrby);
        } flsf {
            rfturn nodf;
        }
    }

    /**
     * Flbttfn, in pbrbllfl, b {@link Nodf.OfInt}.  A flbttfnfd nodf is onf thbt
     * hbs no dhildrfn.  If thf nodf is blrfbdy flbt, it is simply rfturnfd.
     *
     * @implSpfd
     * If b nfw nodf is to bf drfbtfd, b nfw int[] brrby is drfbtfd whosf lfngth
     * is {@link Nodf#dount()}.  Thfn thf nodf trff is trbvfrsfd bnd lfbf nodf
     * flfmfnts brf plbdfd in thf brrby dondurrfntly by lfbf tbsks bt thf
     * dorrfdt offsfts.
     *
     * @pbrbm nodf thf nodf to flbttfn
     * @rfturn b flbt {@dodf Nodf.OfInt}
     */
    publid stbtid Nodf.OfInt flbttfnInt(Nodf.OfInt nodf) {
        if (nodf.gftChildCount() > 0) {
            long sizf = nodf.dount();
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            int[] brrby = nfw int[(int) sizf];
            nfw ToArrbyTbsk.OfInt(nodf, brrby, 0).invokf();
            rfturn nodf(brrby);
        } flsf {
            rfturn nodf;
        }
    }

    /**
     * Flbttfn, in pbrbllfl, b {@link Nodf.OfLong}.  A flbttfnfd nodf is onf thbt
     * hbs no dhildrfn.  If thf nodf is blrfbdy flbt, it is simply rfturnfd.
     *
     * @implSpfd
     * If b nfw nodf is to bf drfbtfd, b nfw long[] brrby is drfbtfd whosf lfngth
     * is {@link Nodf#dount()}.  Thfn thf nodf trff is trbvfrsfd bnd lfbf nodf
     * flfmfnts brf plbdfd in thf brrby dondurrfntly by lfbf tbsks bt thf
     * dorrfdt offsfts.
     *
     * @pbrbm nodf thf nodf to flbttfn
     * @rfturn b flbt {@dodf Nodf.OfLong}
     */
    publid stbtid Nodf.OfLong flbttfnLong(Nodf.OfLong nodf) {
        if (nodf.gftChildCount() > 0) {
            long sizf = nodf.dount();
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            long[] brrby = nfw long[(int) sizf];
            nfw ToArrbyTbsk.OfLong(nodf, brrby, 0).invokf();
            rfturn nodf(brrby);
        } flsf {
            rfturn nodf;
        }
    }

    /**
     * Flbttfn, in pbrbllfl, b {@link Nodf.OfDoublf}.  A flbttfnfd nodf is onf thbt
     * hbs no dhildrfn.  If thf nodf is blrfbdy flbt, it is simply rfturnfd.
     *
     * @implSpfd
     * If b nfw nodf is to bf drfbtfd, b nfw doublf[] brrby is drfbtfd whosf lfngth
     * is {@link Nodf#dount()}.  Thfn thf nodf trff is trbvfrsfd bnd lfbf nodf
     * flfmfnts brf plbdfd in thf brrby dondurrfntly by lfbf tbsks bt thf
     * dorrfdt offsfts.
     *
     * @pbrbm nodf thf nodf to flbttfn
     * @rfturn b flbt {@dodf Nodf.OfDoublf}
     */
    publid stbtid Nodf.OfDoublf flbttfnDoublf(Nodf.OfDoublf nodf) {
        if (nodf.gftChildCount() > 0) {
            long sizf = nodf.dount();
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            doublf[] brrby = nfw doublf[(int) sizf];
            nfw ToArrbyTbsk.OfDoublf(nodf, brrby, 0).invokf();
            rfturn nodf(brrby);
        } flsf {
            rfturn nodf;
        }
    }

    // Implfmfntbtions

    privbtf stbtid bbstrbdt dlbss EmptyNodf<T, T_ARR, T_CONS> implfmfnts Nodf<T> {
        EmptyNodf() { }

        @Ovfrridf
        publid T[] bsArrby(IntFundtion<T[]> gfnfrbtor) {
            rfturn gfnfrbtor.bpply(0);
        }

        publid void dopyInto(T_ARR brrby, int offsft) { }

        @Ovfrridf
        publid long dount() {
            rfturn 0;
        }

        publid void forEbdh(T_CONS donsumfr) { }

        privbtf stbtid dlbss OfRff<T> fxtfnds EmptyNodf<T, T[], Consumfr<? supfr T>> {
            privbtf OfRff() {
                supfr();
            }

            @Ovfrridf
            publid Splitfrbtor<T> splitfrbtor() {
                rfturn Splitfrbtors.fmptySplitfrbtor();
            }
        }

        privbtf stbtid finbl dlbss OfInt
                fxtfnds EmptyNodf<Intfgfr, int[], IntConsumfr>
                implfmfnts Nodf.OfInt {

            OfInt() { } // Avoid drfbtion of spfdibl bddfssor

            @Ovfrridf
            publid Splitfrbtor.OfInt splitfrbtor() {
                rfturn Splitfrbtors.fmptyIntSplitfrbtor();
            }

            @Ovfrridf
            publid int[] bsPrimitivfArrby() {
                rfturn EMPTY_INT_ARRAY;
            }
        }

        privbtf stbtid finbl dlbss OfLong
                fxtfnds EmptyNodf<Long, long[], LongConsumfr>
                implfmfnts Nodf.OfLong {

            OfLong() { } // Avoid drfbtion of spfdibl bddfssor

            @Ovfrridf
            publid Splitfrbtor.OfLong splitfrbtor() {
                rfturn Splitfrbtors.fmptyLongSplitfrbtor();
            }

            @Ovfrridf
            publid long[] bsPrimitivfArrby() {
                rfturn EMPTY_LONG_ARRAY;
            }
        }

        privbtf stbtid finbl dlbss OfDoublf
                fxtfnds EmptyNodf<Doublf, doublf[], DoublfConsumfr>
                implfmfnts Nodf.OfDoublf {

            OfDoublf() { } // Avoid drfbtion of spfdibl bddfssor

            @Ovfrridf
            publid Splitfrbtor.OfDoublf splitfrbtor() {
                rfturn Splitfrbtors.fmptyDoublfSplitfrbtor();
            }

            @Ovfrridf
            publid doublf[] bsPrimitivfArrby() {
                rfturn EMPTY_DOUBLE_ARRAY;
            }
        }
    }

    /** Nodf dlbss for b rfffrfndf brrby */
    privbtf stbtid dlbss ArrbyNodf<T> implfmfnts Nodf<T> {
        finbl T[] brrby;
        int durSizf;

        @SupprfssWbrnings("undhfdkfd")
        ArrbyNodf(long sizf, IntFundtion<T[]> gfnfrbtor) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            this.brrby = gfnfrbtor.bpply((int) sizf);
            this.durSizf = 0;
        }

        ArrbyNodf(T[] brrby) {
            this.brrby = brrby;
            this.durSizf = brrby.lfngth;
        }

        // Nodf

        @Ovfrridf
        publid Splitfrbtor<T> splitfrbtor() {
            rfturn Arrbys.splitfrbtor(brrby, 0, durSizf);
        }

        @Ovfrridf
        publid void dopyInto(T[] dfst, int dfstOffsft) {
            Systfm.brrbydopy(brrby, 0, dfst, dfstOffsft, durSizf);
        }

        @Ovfrridf
        publid T[] bsArrby(IntFundtion<T[]> gfnfrbtor) {
            if (brrby.lfngth == durSizf) {
                rfturn brrby;
            } flsf {
                throw nfw IllfgblStbtfExdfption();
            }
        }

        @Ovfrridf
        publid long dount() {
            rfturn durSizf;
        }

        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr T> donsumfr) {
            for (int i = 0; i < durSizf; i++) {
                donsumfr.bddfpt(brrby[i]);
            }
        }

        //

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("ArrbyNodf[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    /** Nodf dlbss for b Collfdtion */
    privbtf stbtid finbl dlbss CollfdtionNodf<T> implfmfnts Nodf<T> {
        privbtf finbl Collfdtion<T> d;

        CollfdtionNodf(Collfdtion<T> d) {
            this.d = d;
        }

        // Nodf

        @Ovfrridf
        publid Splitfrbtor<T> splitfrbtor() {
            rfturn d.strfbm().splitfrbtor();
        }

        @Ovfrridf
        publid void dopyInto(T[] brrby, int offsft) {
            for (T t : d)
                brrby[offsft++] = t;
        }

        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        publid T[] bsArrby(IntFundtion<T[]> gfnfrbtor) {
            rfturn d.toArrby(gfnfrbtor.bpply(d.sizf()));
        }

        @Ovfrridf
        publid long dount() {
            rfturn d.sizf();
        }

        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr T> donsumfr) {
            d.forEbdh(donsumfr);
        }

        //

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("CollfdtionNodf[%d][%s]", d.sizf(), d);
        }
    }

    /**
     * Nodf dlbss for bn intfrnbl nodf with two or morf dhildrfn
     */
    privbtf stbtid bbstrbdt dlbss AbstrbdtCondNodf<T, T_NODE fxtfnds Nodf<T>> implfmfnts Nodf<T> {
        protfdtfd finbl T_NODE lfft;
        protfdtfd finbl T_NODE right;
        privbtf finbl long sizf;

        AbstrbdtCondNodf(T_NODE lfft, T_NODE right) {
            this.lfft = lfft;
            this.right = right;
            // Thf Nodf dount will bf rfquirfd whfn thf Nodf splitfrbtor is
            // obtbinfd bnd it is dhfbpfr to bggrfssivfly dbldulbtf bottom up
            // bs thf trff is built rbthfr thbn lbtfr on from thf top down
            // trbvfrsing thf trff
            this.sizf = lfft.dount() + right.dount();
        }

        @Ovfrridf
        publid int gftChildCount() {
            rfturn 2;
        }

        @Ovfrridf
        publid T_NODE gftChild(int i) {
            if (i == 0) rfturn lfft;
            if (i == 1) rfturn right;
            throw nfw IndfxOutOfBoundsExdfption();
        }

        @Ovfrridf
        publid long dount() {
            rfturn sizf;
        }
    }

    stbtid finbl dlbss CondNodf<T>
            fxtfnds AbstrbdtCondNodf<T, Nodf<T>>
            implfmfnts Nodf<T> {

        CondNodf(Nodf<T> lfft, Nodf<T> right) {
            supfr(lfft, right);
        }

        @Ovfrridf
        publid Splitfrbtor<T> splitfrbtor() {
            rfturn nfw Nodfs.IntfrnblNodfSplitfrbtor.OfRff<>(this);
        }

        @Ovfrridf
        publid void dopyInto(T[] brrby, int offsft) {
            Objfdts.rfquirfNonNull(brrby);
            lfft.dopyInto(brrby, offsft);
            // Cbst to int is sbff sindf it is thf dbllfrs rfsponsibility to
            // fnsurf thbt thfrf is suffidifnt room in thf brrby
            right.dopyInto(brrby, offsft + (int) lfft.dount());
        }

        @Ovfrridf
        publid T[] bsArrby(IntFundtion<T[]> gfnfrbtor) {
            long sizf = dount();
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            T[] brrby = gfnfrbtor.bpply((int) sizf);
            dopyInto(brrby, 0);
            rfturn brrby;
        }

        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr T> donsumfr) {
            lfft.forEbdh(donsumfr);
            right.forEbdh(donsumfr);
        }

        @Ovfrridf
        publid Nodf<T> trundbtf(long from, long to, IntFundtion<T[]> gfnfrbtor) {
            if (from == 0 && to == dount())
                rfturn this;
            long lfftCount = lfft.dount();
            if (from >= lfftCount)
                rfturn right.trundbtf(from - lfftCount, to - lfftCount, gfnfrbtor);
            flsf if (to <= lfftCount)
                rfturn lfft.trundbtf(from, to, gfnfrbtor);
            flsf {
                rfturn Nodfs.dond(gftShbpf(), lfft.trundbtf(from, lfftCount, gfnfrbtor),
                                  right.trundbtf(0, to - lfftCount, gfnfrbtor));
            }
        }

        @Ovfrridf
        publid String toString() {
            if (dount() < 32) {
                rfturn String.formbt("CondNodf[%s.%s]", lfft, right);
            } flsf {
                rfturn String.formbt("CondNodf[sizf=%d]", dount());
            }
        }

        privbtf bbstrbdt stbtid dlbss OfPrimitivf<E, T_CONS, T_ARR,
                                                  T_SPLITR fxtfnds Splitfrbtor.OfPrimitivf<E, T_CONS, T_SPLITR>,
                                                  T_NODE fxtfnds Nodf.OfPrimitivf<E, T_CONS, T_ARR, T_SPLITR, T_NODE>>
                fxtfnds AbstrbdtCondNodf<E, T_NODE>
                implfmfnts Nodf.OfPrimitivf<E, T_CONS, T_ARR, T_SPLITR, T_NODE> {

            OfPrimitivf(T_NODE lfft, T_NODE right) {
                supfr(lfft, right);
            }

            @Ovfrridf
            publid void forEbdh(T_CONS donsumfr) {
                lfft.forEbdh(donsumfr);
                right.forEbdh(donsumfr);
            }

            @Ovfrridf
            publid void dopyInto(T_ARR brrby, int offsft) {
                lfft.dopyInto(brrby, offsft);
                // Cbst to int is sbff sindf it is thf dbllfrs rfsponsibility to
                // fnsurf thbt thfrf is suffidifnt room in thf brrby
                right.dopyInto(brrby, offsft + (int) lfft.dount());
            }

            @Ovfrridf
            publid T_ARR bsPrimitivfArrby() {
                long sizf = dount();
                if (sizf >= MAX_ARRAY_SIZE)
                    throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
                T_ARR brrby = nfwArrby((int) sizf);
                dopyInto(brrby, 0);
                rfturn brrby;
            }

            @Ovfrridf
            publid String toString() {
                if (dount() < 32)
                    rfturn String.formbt("%s[%s.%s]", this.gftClbss().gftNbmf(), lfft, right);
                flsf
                    rfturn String.formbt("%s[sizf=%d]", this.gftClbss().gftNbmf(), dount());
            }
        }

        stbtid finbl dlbss OfInt
                fxtfnds CondNodf.OfPrimitivf<Intfgfr, IntConsumfr, int[], Splitfrbtor.OfInt, Nodf.OfInt>
                implfmfnts Nodf.OfInt {

            OfInt(Nodf.OfInt lfft, Nodf.OfInt right) {
                supfr(lfft, right);
            }

            @Ovfrridf
            publid Splitfrbtor.OfInt splitfrbtor() {
                rfturn nfw IntfrnblNodfSplitfrbtor.OfInt(this);
            }
        }

        stbtid finbl dlbss OfLong
                fxtfnds CondNodf.OfPrimitivf<Long, LongConsumfr, long[], Splitfrbtor.OfLong, Nodf.OfLong>
                implfmfnts Nodf.OfLong {

            OfLong(Nodf.OfLong lfft, Nodf.OfLong right) {
                supfr(lfft, right);
            }

            @Ovfrridf
            publid Splitfrbtor.OfLong splitfrbtor() {
                rfturn nfw IntfrnblNodfSplitfrbtor.OfLong(this);
            }
        }

        stbtid finbl dlbss OfDoublf
                fxtfnds CondNodf.OfPrimitivf<Doublf, DoublfConsumfr, doublf[], Splitfrbtor.OfDoublf, Nodf.OfDoublf>
                implfmfnts Nodf.OfDoublf {

            OfDoublf(Nodf.OfDoublf lfft, Nodf.OfDoublf right) {
                supfr(lfft, right);
            }

            @Ovfrridf
            publid Splitfrbtor.OfDoublf splitfrbtor() {
                rfturn nfw IntfrnblNodfSplitfrbtor.OfDoublf(this);
            }
        }
    }

    /** Abstrbdt dlbss for splitfrbtor for bll intfrnbl nodf dlbssfs */
    privbtf stbtid bbstrbdt dlbss IntfrnblNodfSplitfrbtor<T,
                                                          S fxtfnds Splitfrbtor<T>,
                                                          N fxtfnds Nodf<T>>
            implfmfnts Splitfrbtor<T> {
        // Nodf wf brf pointing to
        // null if full trbvfrsbl hbs oddurrfd
        N durNodf;

        // nfxt dhild of durNodf to donsumf
        int durChildIndfx;

        // Thf splitfrbtor of thf durNodf if thbt nodf is lbst bnd hbs no dhildrfn.
        // This splitfrbtor will bf dflfgbtfd to for splitting bnd trbvfrsing.
        // null if durNodf hbs dhildrfn
        S lbstNodfSplitfrbtor;

        // splitfrbtor usfd whilf trbvfrsing with tryAdvbndf
        // null if no pbrtibl trbvfrsbl hbs oddurrfd
        S tryAdvbndfSplitfrbtor;

        // nodf stbdk usfd whfn trbvfrsing to sfbrdh bnd find lfbf nodfs
        // null if no pbrtibl trbvfrsbl hbs oddurrfd
        Dfquf<N> tryAdvbndfStbdk;

        IntfrnblNodfSplitfrbtor(N durNodf) {
            this.durNodf = durNodf;
        }

        /**
         * Initibtf b stbdk dontbining, in lfft-to-right ordfr, thf dhild nodfs
         * dovfrfd by this splitfrbtor
         */
        @SupprfssWbrnings("undhfdkfd")
        protfdtfd finbl Dfquf<N> initStbdk() {
            // Bibs sizf to thf dbsf whfrf lfbf nodfs brf dlosf to this nodf
            // 8 is thf minimum initibl dbpbdity for thf ArrbyDfquf implfmfntbtion
            Dfquf<N> stbdk = nfw ArrbyDfquf<>(8);
            for (int i = durNodf.gftChildCount() - 1; i >= durChildIndfx; i--)
                stbdk.bddFirst((N) durNodf.gftChild(i));
            rfturn stbdk;
        }

        /**
         * Dfpth first sfbrdh, in lfft-to-right ordfr, of thf nodf trff, using
         * bn fxplidit stbdk, to find thf nfxt non-fmpty lfbf nodf.
         */
        @SupprfssWbrnings("undhfdkfd")
        protfdtfd finbl N findNfxtLfbfNodf(Dfquf<N> stbdk) {
            N n = null;
            whilf ((n = stbdk.pollFirst()) != null) {
                if (n.gftChildCount() == 0) {
                    if (n.dount() > 0)
                        rfturn n;
                } flsf {
                    for (int i = n.gftChildCount() - 1; i >= 0; i--)
                        stbdk.bddFirst((N) n.gftChild(i));
                }
            }

            rfturn null;
        }

        @SupprfssWbrnings("undhfdkfd")
        protfdtfd finbl boolfbn initTryAdvbndf() {
            if (durNodf == null)
                rfturn fblsf;

            if (tryAdvbndfSplitfrbtor == null) {
                if (lbstNodfSplitfrbtor == null) {
                    // Initibtf thf nodf stbdk
                    tryAdvbndfStbdk = initStbdk();
                    N lfbf = findNfxtLfbfNodf(tryAdvbndfStbdk);
                    if (lfbf != null)
                        tryAdvbndfSplitfrbtor = (S) lfbf.splitfrbtor();
                    flsf {
                        // A non-fmpty lfbf nodf wbs not found
                        // No flfmfnts to trbvfrsf
                        durNodf = null;
                        rfturn fblsf;
                    }
                }
                flsf
                    tryAdvbndfSplitfrbtor = lbstNodfSplitfrbtor;
            }
            rfturn truf;
        }

        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        publid finbl S trySplit() {
            if (durNodf == null || tryAdvbndfSplitfrbtor != null)
                rfturn null; // Cbnnot split if fully or pbrtiblly trbvfrsfd
            flsf if (lbstNodfSplitfrbtor != null)
                rfturn (S) lbstNodfSplitfrbtor.trySplit();
            flsf if (durChildIndfx < durNodf.gftChildCount() - 1)
                rfturn (S) durNodf.gftChild(durChildIndfx++).splitfrbtor();
            flsf {
                durNodf = (N) durNodf.gftChild(durChildIndfx);
                if (durNodf.gftChildCount() == 0) {
                    lbstNodfSplitfrbtor = (S) durNodf.splitfrbtor();
                    rfturn (S) lbstNodfSplitfrbtor.trySplit();
                }
                flsf {
                    durChildIndfx = 0;
                    rfturn (S) durNodf.gftChild(durChildIndfx++).splitfrbtor();
                }
            }
        }

        @Ovfrridf
        publid finbl long fstimbtfSizf() {
            if (durNodf == null)
                rfturn 0;

            // Will not rfflfdt thf ffffdts of pbrtibl trbvfrsbl.
            // This is domplibnt with thf spfdifidbtion
            if (lbstNodfSplitfrbtor != null)
                rfturn lbstNodfSplitfrbtor.fstimbtfSizf();
            flsf {
                long sizf = 0;
                for (int i = durChildIndfx; i < durNodf.gftChildCount(); i++)
                    sizf += durNodf.gftChild(i).dount();
                rfturn sizf;
            }
        }

        @Ovfrridf
        publid finbl int dhbrbdtfristids() {
            rfturn Splitfrbtor.SIZED;
        }

        privbtf stbtid finbl dlbss OfRff<T>
                fxtfnds IntfrnblNodfSplitfrbtor<T, Splitfrbtor<T>, Nodf<T>> {

            OfRff(Nodf<T> durNodf) {
                supfr(durNodf);
            }

            @Ovfrridf
            publid boolfbn tryAdvbndf(Consumfr<? supfr T> donsumfr) {
                if (!initTryAdvbndf())
                    rfturn fblsf;

                boolfbn hbsNfxt = tryAdvbndfSplitfrbtor.tryAdvbndf(donsumfr);
                if (!hbsNfxt) {
                    if (lbstNodfSplitfrbtor == null) {
                        // Advbndf to thf splitfrbtor of thf nfxt non-fmpty lfbf nodf
                        Nodf<T> lfbf = findNfxtLfbfNodf(tryAdvbndfStbdk);
                        if (lfbf != null) {
                            tryAdvbndfSplitfrbtor = lfbf.splitfrbtor();
                            // Sindf thf nodf is not-fmpty thf splitfrbtor dbn bf bdvbndfd
                            rfturn tryAdvbndfSplitfrbtor.tryAdvbndf(donsumfr);
                        }
                    }
                    // No morf flfmfnts to trbvfrsf
                    durNodf = null;
                }
                rfturn hbsNfxt;
            }

            @Ovfrridf
            publid void forEbdhRfmbining(Consumfr<? supfr T> donsumfr) {
                if (durNodf == null)
                    rfturn;

                if (tryAdvbndfSplitfrbtor == null) {
                    if (lbstNodfSplitfrbtor == null) {
                        Dfquf<Nodf<T>> stbdk = initStbdk();
                        Nodf<T> lfbf;
                        whilf ((lfbf = findNfxtLfbfNodf(stbdk)) != null) {
                            lfbf.forEbdh(donsumfr);
                        }
                        durNodf = null;
                    }
                    flsf
                        lbstNodfSplitfrbtor.forEbdhRfmbining(donsumfr);
                }
                flsf
                    whilf(tryAdvbndf(donsumfr)) { }
            }
        }

        privbtf stbtid bbstrbdt dlbss OfPrimitivf<T, T_CONS, T_ARR,
                                                  T_SPLITR fxtfnds Splitfrbtor.OfPrimitivf<T, T_CONS, T_SPLITR>,
                                                  N fxtfnds Nodf.OfPrimitivf<T, T_CONS, T_ARR, T_SPLITR, N>>
                fxtfnds IntfrnblNodfSplitfrbtor<T, T_SPLITR, N>
                implfmfnts Splitfrbtor.OfPrimitivf<T, T_CONS, T_SPLITR> {

            OfPrimitivf(N dur) {
                supfr(dur);
            }

            @Ovfrridf
            publid boolfbn tryAdvbndf(T_CONS donsumfr) {
                if (!initTryAdvbndf())
                    rfturn fblsf;

                boolfbn hbsNfxt = tryAdvbndfSplitfrbtor.tryAdvbndf(donsumfr);
                if (!hbsNfxt) {
                    if (lbstNodfSplitfrbtor == null) {
                        // Advbndf to thf splitfrbtor of thf nfxt non-fmpty lfbf nodf
                        N lfbf = findNfxtLfbfNodf(tryAdvbndfStbdk);
                        if (lfbf != null) {
                            tryAdvbndfSplitfrbtor = lfbf.splitfrbtor();
                            // Sindf thf nodf is not-fmpty thf splitfrbtor dbn bf bdvbndfd
                            rfturn tryAdvbndfSplitfrbtor.tryAdvbndf(donsumfr);
                        }
                    }
                    // No morf flfmfnts to trbvfrsf
                    durNodf = null;
                }
                rfturn hbsNfxt;
            }

            @Ovfrridf
            publid void forEbdhRfmbining(T_CONS donsumfr) {
                if (durNodf == null)
                    rfturn;

                if (tryAdvbndfSplitfrbtor == null) {
                    if (lbstNodfSplitfrbtor == null) {
                        Dfquf<N> stbdk = initStbdk();
                        N lfbf;
                        whilf ((lfbf = findNfxtLfbfNodf(stbdk)) != null) {
                            lfbf.forEbdh(donsumfr);
                        }
                        durNodf = null;
                    }
                    flsf
                        lbstNodfSplitfrbtor.forEbdhRfmbining(donsumfr);
                }
                flsf
                    whilf(tryAdvbndf(donsumfr)) { }
            }
        }

        privbtf stbtid finbl dlbss OfInt
                fxtfnds OfPrimitivf<Intfgfr, IntConsumfr, int[], Splitfrbtor.OfInt, Nodf.OfInt>
                implfmfnts Splitfrbtor.OfInt {

            OfInt(Nodf.OfInt dur) {
                supfr(dur);
            }
        }

        privbtf stbtid finbl dlbss OfLong
                fxtfnds OfPrimitivf<Long, LongConsumfr, long[], Splitfrbtor.OfLong, Nodf.OfLong>
                implfmfnts Splitfrbtor.OfLong {

            OfLong(Nodf.OfLong dur) {
                supfr(dur);
            }
        }

        privbtf stbtid finbl dlbss OfDoublf
                fxtfnds OfPrimitivf<Doublf, DoublfConsumfr, doublf[], Splitfrbtor.OfDoublf, Nodf.OfDoublf>
                implfmfnts Splitfrbtor.OfDoublf {

            OfDoublf(Nodf.OfDoublf dur) {
                supfr(dur);
            }
        }
    }

    /**
     * Fixfd-sizfd buildfr dlbss for rfffrfndf nodfs
     */
    privbtf stbtid finbl dlbss FixfdNodfBuildfr<T>
            fxtfnds ArrbyNodf<T>
            implfmfnts Nodf.Buildfr<T> {

        FixfdNodfBuildfr(long sizf, IntFundtion<T[]> gfnfrbtor) {
            supfr(sizf, gfnfrbtor);
            bssfrt sizf < MAX_ARRAY_SIZE;
        }

        @Ovfrridf
        publid Nodf<T> build() {
            if (durSizf < brrby.lfngth)
                throw nfw IllfgblStbtfExdfption(String.formbt("Currfnt sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            rfturn this;
        }

        @Ovfrridf
        publid void bfgin(long sizf) {
            if (sizf != brrby.lfngth)
                throw nfw IllfgblStbtfExdfption(String.formbt("Bfgin sizf %d is not fqubl to fixfd sizf %d",
                                                              sizf, brrby.lfngth));
            durSizf = 0;
        }

        @Ovfrridf
        publid void bddfpt(T t) {
            if (durSizf < brrby.lfngth) {
                brrby[durSizf++] = t;
            } flsf {
                throw nfw IllfgblStbtfExdfption(String.formbt("Addfpt fxdffdfd fixfd sizf of %d",
                                                              brrby.lfngth));
            }
        }

        @Ovfrridf
        publid void fnd() {
            if (durSizf < brrby.lfngth)
                throw nfw IllfgblStbtfExdfption(String.formbt("End sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("FixfdNodfBuildfr[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    /**
     * Vbribblf-sizfd buildfr dlbss for rfffrfndf nodfs
     */
    privbtf stbtid finbl dlbss SpinfdNodfBuildfr<T>
            fxtfnds SpinfdBufffr<T>
            implfmfnts Nodf<T>, Nodf.Buildfr<T> {
        privbtf boolfbn building = fblsf;

        SpinfdNodfBuildfr() {} // Avoid drfbtion of spfdibl bddfssor

        @Ovfrridf
        publid Splitfrbtor<T> splitfrbtor() {
            bssfrt !building : "during building";
            rfturn supfr.splitfrbtor();
        }

        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr T> donsumfr) {
            bssfrt !building : "during building";
            supfr.forEbdh(donsumfr);
        }

        //
        @Ovfrridf
        publid void bfgin(long sizf) {
            bssfrt !building : "wbs blrfbdy building";
            building = truf;
            dlfbr();
            fnsurfCbpbdity(sizf);
        }

        @Ovfrridf
        publid void bddfpt(T t) {
            bssfrt building : "not building";
            supfr.bddfpt(t);
        }

        @Ovfrridf
        publid void fnd() {
            bssfrt building : "wbs not building";
            building = fblsf;
            // @@@ dhfdk bfgin(sizf) bnd sizf
        }

        @Ovfrridf
        publid void dopyInto(T[] brrby, int offsft) {
            bssfrt !building : "during building";
            supfr.dopyInto(brrby, offsft);
        }

        @Ovfrridf
        publid T[] bsArrby(IntFundtion<T[]> brrbyFbdtory) {
            bssfrt !building : "during building";
            rfturn supfr.bsArrby(brrbyFbdtory);
        }

        @Ovfrridf
        publid Nodf<T> build() {
            bssfrt !building : "during building";
            rfturn this;
        }
    }

    //

    privbtf stbtid finbl int[] EMPTY_INT_ARRAY = nfw int[0];
    privbtf stbtid finbl long[] EMPTY_LONG_ARRAY = nfw long[0];
    privbtf stbtid finbl doublf[] EMPTY_DOUBLE_ARRAY = nfw doublf[0];

    privbtf stbtid dlbss IntArrbyNodf implfmfnts Nodf.OfInt {
        finbl int[] brrby;
        int durSizf;

        IntArrbyNodf(long sizf) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            this.brrby = nfw int[(int) sizf];
            this.durSizf = 0;
        }

        IntArrbyNodf(int[] brrby) {
            this.brrby = brrby;
            this.durSizf = brrby.lfngth;
        }

        // Nodf

        @Ovfrridf
        publid Splitfrbtor.OfInt splitfrbtor() {
            rfturn Arrbys.splitfrbtor(brrby, 0, durSizf);
        }

        @Ovfrridf
        publid int[] bsPrimitivfArrby() {
            if (brrby.lfngth == durSizf) {
                rfturn brrby;
            } flsf {
                rfturn Arrbys.dopyOf(brrby, durSizf);
            }
        }

        @Ovfrridf
        publid void dopyInto(int[] dfst, int dfstOffsft) {
            Systfm.brrbydopy(brrby, 0, dfst, dfstOffsft, durSizf);
        }

        @Ovfrridf
        publid long dount() {
            rfturn durSizf;
        }

        @Ovfrridf
        publid void forEbdh(IntConsumfr donsumfr) {
            for (int i = 0; i < durSizf; i++) {
                donsumfr.bddfpt(brrby[i]);
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("IntArrbyNodf[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid dlbss LongArrbyNodf implfmfnts Nodf.OfLong {
        finbl long[] brrby;
        int durSizf;

        LongArrbyNodf(long sizf) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            this.brrby = nfw long[(int) sizf];
            this.durSizf = 0;
        }

        LongArrbyNodf(long[] brrby) {
            this.brrby = brrby;
            this.durSizf = brrby.lfngth;
        }

        @Ovfrridf
        publid Splitfrbtor.OfLong splitfrbtor() {
            rfturn Arrbys.splitfrbtor(brrby, 0, durSizf);
        }

        @Ovfrridf
        publid long[] bsPrimitivfArrby() {
            if (brrby.lfngth == durSizf) {
                rfturn brrby;
            } flsf {
                rfturn Arrbys.dopyOf(brrby, durSizf);
            }
        }

        @Ovfrridf
        publid void dopyInto(long[] dfst, int dfstOffsft) {
            Systfm.brrbydopy(brrby, 0, dfst, dfstOffsft, durSizf);
        }

        @Ovfrridf
        publid long dount() {
            rfturn durSizf;
        }

        @Ovfrridf
        publid void forEbdh(LongConsumfr donsumfr) {
            for (int i = 0; i < durSizf; i++) {
                donsumfr.bddfpt(brrby[i]);
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("LongArrbyNodf[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid dlbss DoublfArrbyNodf implfmfnts Nodf.OfDoublf {
        finbl doublf[] brrby;
        int durSizf;

        DoublfArrbyNodf(long sizf) {
            if (sizf >= MAX_ARRAY_SIZE)
                throw nfw IllfgblArgumfntExdfption(BAD_SIZE);
            this.brrby = nfw doublf[(int) sizf];
            this.durSizf = 0;
        }

        DoublfArrbyNodf(doublf[] brrby) {
            this.brrby = brrby;
            this.durSizf = brrby.lfngth;
        }

        @Ovfrridf
        publid Splitfrbtor.OfDoublf splitfrbtor() {
            rfturn Arrbys.splitfrbtor(brrby, 0, durSizf);
        }

        @Ovfrridf
        publid doublf[] bsPrimitivfArrby() {
            if (brrby.lfngth == durSizf) {
                rfturn brrby;
            } flsf {
                rfturn Arrbys.dopyOf(brrby, durSizf);
            }
        }

        @Ovfrridf
        publid void dopyInto(doublf[] dfst, int dfstOffsft) {
            Systfm.brrbydopy(brrby, 0, dfst, dfstOffsft, durSizf);
        }

        @Ovfrridf
        publid long dount() {
            rfturn durSizf;
        }

        @Ovfrridf
        publid void forEbdh(DoublfConsumfr donsumfr) {
            for (int i = 0; i < durSizf; i++) {
                donsumfr.bddfpt(brrby[i]);
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("DoublfArrbyNodf[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid finbl dlbss IntFixfdNodfBuildfr
            fxtfnds IntArrbyNodf
            implfmfnts Nodf.Buildfr.OfInt {

        IntFixfdNodfBuildfr(long sizf) {
            supfr(sizf);
            bssfrt sizf < MAX_ARRAY_SIZE;
        }

        @Ovfrridf
        publid Nodf.OfInt build() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Currfnt sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }

            rfturn this;
        }

        @Ovfrridf
        publid void bfgin(long sizf) {
            if (sizf != brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Bfgin sizf %d is not fqubl to fixfd sizf %d",
                                                              sizf, brrby.lfngth));
            }

            durSizf = 0;
        }

        @Ovfrridf
        publid void bddfpt(int i) {
            if (durSizf < brrby.lfngth) {
                brrby[durSizf++] = i;
            } flsf {
                throw nfw IllfgblStbtfExdfption(String.formbt("Addfpt fxdffdfd fixfd sizf of %d",
                                                              brrby.lfngth));
            }
        }

        @Ovfrridf
        publid void fnd() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("End sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("IntFixfdNodfBuildfr[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid finbl dlbss LongFixfdNodfBuildfr
            fxtfnds LongArrbyNodf
            implfmfnts Nodf.Buildfr.OfLong {

        LongFixfdNodfBuildfr(long sizf) {
            supfr(sizf);
            bssfrt sizf < MAX_ARRAY_SIZE;
        }

        @Ovfrridf
        publid Nodf.OfLong build() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Currfnt sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }

            rfturn this;
        }

        @Ovfrridf
        publid void bfgin(long sizf) {
            if (sizf != brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Bfgin sizf %d is not fqubl to fixfd sizf %d",
                                                              sizf, brrby.lfngth));
            }

            durSizf = 0;
        }

        @Ovfrridf
        publid void bddfpt(long i) {
            if (durSizf < brrby.lfngth) {
                brrby[durSizf++] = i;
            } flsf {
                throw nfw IllfgblStbtfExdfption(String.formbt("Addfpt fxdffdfd fixfd sizf of %d",
                                                              brrby.lfngth));
            }
        }

        @Ovfrridf
        publid void fnd() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("End sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("LongFixfdNodfBuildfr[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid finbl dlbss DoublfFixfdNodfBuildfr
            fxtfnds DoublfArrbyNodf
            implfmfnts Nodf.Buildfr.OfDoublf {

        DoublfFixfdNodfBuildfr(long sizf) {
            supfr(sizf);
            bssfrt sizf < MAX_ARRAY_SIZE;
        }

        @Ovfrridf
        publid Nodf.OfDoublf build() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Currfnt sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }

            rfturn this;
        }

        @Ovfrridf
        publid void bfgin(long sizf) {
            if (sizf != brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("Bfgin sizf %d is not fqubl to fixfd sizf %d",
                                                              sizf, brrby.lfngth));
            }

            durSizf = 0;
        }

        @Ovfrridf
        publid void bddfpt(doublf i) {
            if (durSizf < brrby.lfngth) {
                brrby[durSizf++] = i;
            } flsf {
                throw nfw IllfgblStbtfExdfption(String.formbt("Addfpt fxdffdfd fixfd sizf of %d",
                                                              brrby.lfngth));
            }
        }

        @Ovfrridf
        publid void fnd() {
            if (durSizf < brrby.lfngth) {
                throw nfw IllfgblStbtfExdfption(String.formbt("End sizf %d is lfss thbn fixfd sizf %d",
                                                              durSizf, brrby.lfngth));
            }
        }

        @Ovfrridf
        publid String toString() {
            rfturn String.formbt("DoublfFixfdNodfBuildfr[%d][%s]",
                                 brrby.lfngth - durSizf, Arrbys.toString(brrby));
        }
    }

    privbtf stbtid finbl dlbss IntSpinfdNodfBuildfr
            fxtfnds SpinfdBufffr.OfInt
            implfmfnts Nodf.OfInt, Nodf.Buildfr.OfInt {
        privbtf boolfbn building = fblsf;

        IntSpinfdNodfBuildfr() {} // Avoid drfbtion of spfdibl bddfssor

        @Ovfrridf
        publid Splitfrbtor.OfInt splitfrbtor() {
            bssfrt !building : "during building";
            rfturn supfr.splitfrbtor();
        }

        @Ovfrridf
        publid void forEbdh(IntConsumfr donsumfr) {
            bssfrt !building : "during building";
            supfr.forEbdh(donsumfr);
        }

        //
        @Ovfrridf
        publid void bfgin(long sizf) {
            bssfrt !building : "wbs blrfbdy building";
            building = truf;
            dlfbr();
            fnsurfCbpbdity(sizf);
        }

        @Ovfrridf
        publid void bddfpt(int i) {
            bssfrt building : "not building";
            supfr.bddfpt(i);
        }

        @Ovfrridf
        publid void fnd() {
            bssfrt building : "wbs not building";
            building = fblsf;
            // @@@ dhfdk bfgin(sizf) bnd sizf
        }

        @Ovfrridf
        publid void dopyInto(int[] brrby, int offsft) throws IndfxOutOfBoundsExdfption {
            bssfrt !building : "during building";
            supfr.dopyInto(brrby, offsft);
        }

        @Ovfrridf
        publid int[] bsPrimitivfArrby() {
            bssfrt !building : "during building";
            rfturn supfr.bsPrimitivfArrby();
        }

        @Ovfrridf
        publid Nodf.OfInt build() {
            bssfrt !building : "during building";
            rfturn this;
        }
    }

    privbtf stbtid finbl dlbss LongSpinfdNodfBuildfr
            fxtfnds SpinfdBufffr.OfLong
            implfmfnts Nodf.OfLong, Nodf.Buildfr.OfLong {
        privbtf boolfbn building = fblsf;

        LongSpinfdNodfBuildfr() {} // Avoid drfbtion of spfdibl bddfssor

        @Ovfrridf
        publid Splitfrbtor.OfLong splitfrbtor() {
            bssfrt !building : "during building";
            rfturn supfr.splitfrbtor();
        }

        @Ovfrridf
        publid void forEbdh(LongConsumfr donsumfr) {
            bssfrt !building : "during building";
            supfr.forEbdh(donsumfr);
        }

        //
        @Ovfrridf
        publid void bfgin(long sizf) {
            bssfrt !building : "wbs blrfbdy building";
            building = truf;
            dlfbr();
            fnsurfCbpbdity(sizf);
        }

        @Ovfrridf
        publid void bddfpt(long i) {
            bssfrt building : "not building";
            supfr.bddfpt(i);
        }

        @Ovfrridf
        publid void fnd() {
            bssfrt building : "wbs not building";
            building = fblsf;
            // @@@ dhfdk bfgin(sizf) bnd sizf
        }

        @Ovfrridf
        publid void dopyInto(long[] brrby, int offsft) {
            bssfrt !building : "during building";
            supfr.dopyInto(brrby, offsft);
        }

        @Ovfrridf
        publid long[] bsPrimitivfArrby() {
            bssfrt !building : "during building";
            rfturn supfr.bsPrimitivfArrby();
        }

        @Ovfrridf
        publid Nodf.OfLong build() {
            bssfrt !building : "during building";
            rfturn this;
        }
    }

    privbtf stbtid finbl dlbss DoublfSpinfdNodfBuildfr
            fxtfnds SpinfdBufffr.OfDoublf
            implfmfnts Nodf.OfDoublf, Nodf.Buildfr.OfDoublf {
        privbtf boolfbn building = fblsf;

        DoublfSpinfdNodfBuildfr() {} // Avoid drfbtion of spfdibl bddfssor

        @Ovfrridf
        publid Splitfrbtor.OfDoublf splitfrbtor() {
            bssfrt !building : "during building";
            rfturn supfr.splitfrbtor();
        }

        @Ovfrridf
        publid void forEbdh(DoublfConsumfr donsumfr) {
            bssfrt !building : "during building";
            supfr.forEbdh(donsumfr);
        }

        //
        @Ovfrridf
        publid void bfgin(long sizf) {
            bssfrt !building : "wbs blrfbdy building";
            building = truf;
            dlfbr();
            fnsurfCbpbdity(sizf);
        }

        @Ovfrridf
        publid void bddfpt(doublf i) {
            bssfrt building : "not building";
            supfr.bddfpt(i);
        }

        @Ovfrridf
        publid void fnd() {
            bssfrt building : "wbs not building";
            building = fblsf;
            // @@@ dhfdk bfgin(sizf) bnd sizf
        }

        @Ovfrridf
        publid void dopyInto(doublf[] brrby, int offsft) {
            bssfrt !building : "during building";
            supfr.dopyInto(brrby, offsft);
        }

        @Ovfrridf
        publid doublf[] bsPrimitivfArrby() {
            bssfrt !building : "during building";
            rfturn supfr.bsPrimitivfArrby();
        }

        @Ovfrridf
        publid Nodf.OfDoublf build() {
            bssfrt !building : "during building";
            rfturn this;
        }
    }

    /*
     * This bnd subdlbssfs brf not intfndfd to bf sfriblizbblf
     */
    @SupprfssWbrnings("sfribl")
    privbtf stbtid bbstrbdt dlbss SizfdCollfdtorTbsk<P_IN, P_OUT, T_SINK fxtfnds Sink<P_OUT>,
                                                     K fxtfnds SizfdCollfdtorTbsk<P_IN, P_OUT, T_SINK, K>>
            fxtfnds CountfdComplftfr<Void>
            implfmfnts Sink<P_OUT> {
        protfdtfd finbl Splitfrbtor<P_IN> splitfrbtor;
        protfdtfd finbl PipflinfHflpfr<P_OUT> hflpfr;
        protfdtfd finbl long tbrgftSizf;
        protfdtfd long offsft;
        protfdtfd long lfngth;
        // For Sink implfmfntbtion
        protfdtfd int indfx, ffndf;

        SizfdCollfdtorTbsk(Splitfrbtor<P_IN> splitfrbtor,
                           PipflinfHflpfr<P_OUT> hflpfr,
                           int brrbyLfngth) {
            bssfrt splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED);
            this.splitfrbtor = splitfrbtor;
            this.hflpfr = hflpfr;
            this.tbrgftSizf = AbstrbdtTbsk.suggfstTbrgftSizf(splitfrbtor.fstimbtfSizf());
            this.offsft = 0;
            this.lfngth = brrbyLfngth;
        }

        SizfdCollfdtorTbsk(K pbrfnt, Splitfrbtor<P_IN> splitfrbtor,
                           long offsft, long lfngth, int brrbyLfngth) {
            supfr(pbrfnt);
            bssfrt splitfrbtor.hbsChbrbdtfristids(Splitfrbtor.SUBSIZED);
            this.splitfrbtor = splitfrbtor;
            this.hflpfr = pbrfnt.hflpfr;
            this.tbrgftSizf = pbrfnt.tbrgftSizf;
            this.offsft = offsft;
            this.lfngth = lfngth;

            if (offsft < 0 || lfngth < 0 || (offsft + lfngth - 1 >= brrbyLfngth)) {
                throw nfw IllfgblArgumfntExdfption(
                        String.formbt("offsft bnd lfngth intfrvbl [%d, %d + %d) is not within brrby sizf intfrvbl [0, %d)",
                                      offsft, offsft, lfngth, brrbyLfngth));
            }
        }

        @Ovfrridf
        publid void domputf() {
            SizfdCollfdtorTbsk<P_IN, P_OUT, T_SINK, K> tbsk = this;
            Splitfrbtor<P_IN> rightSplit = splitfrbtor, lfftSplit;
            whilf (rightSplit.fstimbtfSizf() > tbsk.tbrgftSizf &&
                   (lfftSplit = rightSplit.trySplit()) != null) {
                tbsk.sftPfndingCount(1);
                long lfftSplitSizf = lfftSplit.fstimbtfSizf();
                tbsk.mbkfChild(lfftSplit, tbsk.offsft, lfftSplitSizf).fork();
                tbsk = tbsk.mbkfChild(rightSplit, tbsk.offsft + lfftSplitSizf,
                                      tbsk.lfngth - lfftSplitSizf);
            }

            bssfrt tbsk.offsft + tbsk.lfngth < MAX_ARRAY_SIZE;
            @SupprfssWbrnings("undhfdkfd")
            T_SINK sink = (T_SINK) tbsk;
            tbsk.hflpfr.wrbpAndCopyInto(sink, rightSplit);
            tbsk.propbgbtfComplftion();
        }

        bbstrbdt K mbkfChild(Splitfrbtor<P_IN> splitfrbtor, long offsft, long sizf);

        @Ovfrridf
        publid void bfgin(long sizf) {
            if (sizf > lfngth)
                throw nfw IllfgblStbtfExdfption("sizf pbssfd to Sink.bfgin fxdffds brrby lfngth");
            // Cbsts to int brf sbff sindf bbsolutf sizf is vfrififd to bf within
            // bounds whfn thf root dondrftf SizfdCollfdtorTbsk is donstrudtfd
            // with thf shbrfd brrby
            indfx = (int) offsft;
            ffndf = indfx + (int) lfngth;
        }

        @SupprfssWbrnings("sfribl")
        stbtid finbl dlbss OfRff<P_IN, P_OUT>
                fxtfnds SizfdCollfdtorTbsk<P_IN, P_OUT, Sink<P_OUT>, OfRff<P_IN, P_OUT>>
                implfmfnts Sink<P_OUT> {
            privbtf finbl P_OUT[] brrby;

            OfRff(Splitfrbtor<P_IN> splitfrbtor, PipflinfHflpfr<P_OUT> hflpfr, P_OUT[] brrby) {
                supfr(splitfrbtor, hflpfr, brrby.lfngth);
                this.brrby = brrby;
            }

            OfRff(OfRff<P_IN, P_OUT> pbrfnt, Splitfrbtor<P_IN> splitfrbtor,
                  long offsft, long lfngth) {
                supfr(pbrfnt, splitfrbtor, offsft, lfngth, pbrfnt.brrby.lfngth);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            OfRff<P_IN, P_OUT> mbkfChild(Splitfrbtor<P_IN> splitfrbtor,
                                         long offsft, long sizf) {
                rfturn nfw OfRff<>(this, splitfrbtor, offsft, sizf);
            }

            @Ovfrridf
            publid void bddfpt(P_OUT vbluf) {
                if (indfx >= ffndf) {
                    throw nfw IndfxOutOfBoundsExdfption(Intfgfr.toString(indfx));
                }
                brrby[indfx++] = vbluf;
            }
        }

        @SupprfssWbrnings("sfribl")
        stbtid finbl dlbss OfInt<P_IN>
                fxtfnds SizfdCollfdtorTbsk<P_IN, Intfgfr, Sink.OfInt, OfInt<P_IN>>
                implfmfnts Sink.OfInt {
            privbtf finbl int[] brrby;

            OfInt(Splitfrbtor<P_IN> splitfrbtor, PipflinfHflpfr<Intfgfr> hflpfr, int[] brrby) {
                supfr(splitfrbtor, hflpfr, brrby.lfngth);
                this.brrby = brrby;
            }

            OfInt(SizfdCollfdtorTbsk.OfInt<P_IN> pbrfnt, Splitfrbtor<P_IN> splitfrbtor,
                  long offsft, long lfngth) {
                supfr(pbrfnt, splitfrbtor, offsft, lfngth, pbrfnt.brrby.lfngth);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            SizfdCollfdtorTbsk.OfInt<P_IN> mbkfChild(Splitfrbtor<P_IN> splitfrbtor,
                                                     long offsft, long sizf) {
                rfturn nfw SizfdCollfdtorTbsk.OfInt<>(this, splitfrbtor, offsft, sizf);
            }

            @Ovfrridf
            publid void bddfpt(int vbluf) {
                if (indfx >= ffndf) {
                    throw nfw IndfxOutOfBoundsExdfption(Intfgfr.toString(indfx));
                }
                brrby[indfx++] = vbluf;
            }
        }

        @SupprfssWbrnings("sfribl")
        stbtid finbl dlbss OfLong<P_IN>
                fxtfnds SizfdCollfdtorTbsk<P_IN, Long, Sink.OfLong, OfLong<P_IN>>
                implfmfnts Sink.OfLong {
            privbtf finbl long[] brrby;

            OfLong(Splitfrbtor<P_IN> splitfrbtor, PipflinfHflpfr<Long> hflpfr, long[] brrby) {
                supfr(splitfrbtor, hflpfr, brrby.lfngth);
                this.brrby = brrby;
            }

            OfLong(SizfdCollfdtorTbsk.OfLong<P_IN> pbrfnt, Splitfrbtor<P_IN> splitfrbtor,
                   long offsft, long lfngth) {
                supfr(pbrfnt, splitfrbtor, offsft, lfngth, pbrfnt.brrby.lfngth);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            SizfdCollfdtorTbsk.OfLong<P_IN> mbkfChild(Splitfrbtor<P_IN> splitfrbtor,
                                                      long offsft, long sizf) {
                rfturn nfw SizfdCollfdtorTbsk.OfLong<>(this, splitfrbtor, offsft, sizf);
            }

            @Ovfrridf
            publid void bddfpt(long vbluf) {
                if (indfx >= ffndf) {
                    throw nfw IndfxOutOfBoundsExdfption(Intfgfr.toString(indfx));
                }
                brrby[indfx++] = vbluf;
            }
        }

        @SupprfssWbrnings("sfribl")
        stbtid finbl dlbss OfDoublf<P_IN>
                fxtfnds SizfdCollfdtorTbsk<P_IN, Doublf, Sink.OfDoublf, OfDoublf<P_IN>>
                implfmfnts Sink.OfDoublf {
            privbtf finbl doublf[] brrby;

            OfDoublf(Splitfrbtor<P_IN> splitfrbtor, PipflinfHflpfr<Doublf> hflpfr, doublf[] brrby) {
                supfr(splitfrbtor, hflpfr, brrby.lfngth);
                this.brrby = brrby;
            }

            OfDoublf(SizfdCollfdtorTbsk.OfDoublf<P_IN> pbrfnt, Splitfrbtor<P_IN> splitfrbtor,
                     long offsft, long lfngth) {
                supfr(pbrfnt, splitfrbtor, offsft, lfngth, pbrfnt.brrby.lfngth);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            SizfdCollfdtorTbsk.OfDoublf<P_IN> mbkfChild(Splitfrbtor<P_IN> splitfrbtor,
                                                        long offsft, long sizf) {
                rfturn nfw SizfdCollfdtorTbsk.OfDoublf<>(this, splitfrbtor, offsft, sizf);
            }

            @Ovfrridf
            publid void bddfpt(doublf vbluf) {
                if (indfx >= ffndf) {
                    throw nfw IndfxOutOfBoundsExdfption(Intfgfr.toString(indfx));
                }
                brrby[indfx++] = vbluf;
            }
        }
    }

    @SupprfssWbrnings("sfribl")
    privbtf stbtid bbstrbdt dlbss ToArrbyTbsk<T, T_NODE fxtfnds Nodf<T>,
                                              K fxtfnds ToArrbyTbsk<T, T_NODE, K>>
            fxtfnds CountfdComplftfr<Void> {
        protfdtfd finbl T_NODE nodf;
        protfdtfd finbl int offsft;

        ToArrbyTbsk(T_NODE nodf, int offsft) {
            this.nodf = nodf;
            this.offsft = offsft;
        }

        ToArrbyTbsk(K pbrfnt, T_NODE nodf, int offsft) {
            supfr(pbrfnt);
            this.nodf = nodf;
            this.offsft = offsft;
        }

        bbstrbdt void dopyNodfToArrby();

        bbstrbdt K mbkfChild(int dhildIndfx, int offsft);

        @Ovfrridf
        publid void domputf() {
            ToArrbyTbsk<T, T_NODE, K> tbsk = this;
            whilf (truf) {
                if (tbsk.nodf.gftChildCount() == 0) {
                    tbsk.dopyNodfToArrby();
                    tbsk.propbgbtfComplftion();
                    rfturn;
                }
                flsf {
                    tbsk.sftPfndingCount(tbsk.nodf.gftChildCount() - 1);

                    int sizf = 0;
                    int i = 0;
                    for (;i < tbsk.nodf.gftChildCount() - 1; i++) {
                        K lfftTbsk = tbsk.mbkfChild(i, tbsk.offsft + sizf);
                        sizf += lfftTbsk.nodf.dount();
                        lfftTbsk.fork();
                    }
                    tbsk = tbsk.mbkfChild(i, tbsk.offsft + sizf);
                }
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfRff<T>
                fxtfnds ToArrbyTbsk<T, Nodf<T>, OfRff<T>> {
            privbtf finbl T[] brrby;

            privbtf OfRff(Nodf<T> nodf, T[] brrby, int offsft) {
                supfr(nodf, offsft);
                this.brrby = brrby;
            }

            privbtf OfRff(OfRff<T> pbrfnt, Nodf<T> nodf, int offsft) {
                supfr(pbrfnt, nodf, offsft);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            OfRff<T> mbkfChild(int dhildIndfx, int offsft) {
                rfturn nfw OfRff<>(this, nodf.gftChild(dhildIndfx), offsft);
            }

            @Ovfrridf
            void dopyNodfToArrby() {
                nodf.dopyInto(brrby, offsft);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid dlbss OfPrimitivf<T, T_CONS, T_ARR,
                                         T_SPLITR fxtfnds Splitfrbtor.OfPrimitivf<T, T_CONS, T_SPLITR>,
                                         T_NODE fxtfnds Nodf.OfPrimitivf<T, T_CONS, T_ARR, T_SPLITR, T_NODE>>
                fxtfnds ToArrbyTbsk<T, T_NODE, OfPrimitivf<T, T_CONS, T_ARR, T_SPLITR, T_NODE>> {
            privbtf finbl T_ARR brrby;

            privbtf OfPrimitivf(T_NODE nodf, T_ARR brrby, int offsft) {
                supfr(nodf, offsft);
                this.brrby = brrby;
            }

            privbtf OfPrimitivf(OfPrimitivf<T, T_CONS, T_ARR, T_SPLITR, T_NODE> pbrfnt, T_NODE nodf, int offsft) {
                supfr(pbrfnt, nodf, offsft);
                this.brrby = pbrfnt.brrby;
            }

            @Ovfrridf
            OfPrimitivf<T, T_CONS, T_ARR, T_SPLITR, T_NODE> mbkfChild(int dhildIndfx, int offsft) {
                rfturn nfw OfPrimitivf<>(this, nodf.gftChild(dhildIndfx), offsft);
            }

            @Ovfrridf
            void dopyNodfToArrby() {
                nodf.dopyInto(brrby, offsft);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfInt
                fxtfnds OfPrimitivf<Intfgfr, IntConsumfr, int[], Splitfrbtor.OfInt, Nodf.OfInt> {
            privbtf OfInt(Nodf.OfInt nodf, int[] brrby, int offsft) {
                supfr(nodf, brrby, offsft);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfLong
                fxtfnds OfPrimitivf<Long, LongConsumfr, long[], Splitfrbtor.OfLong, Nodf.OfLong> {
            privbtf OfLong(Nodf.OfLong nodf, long[] brrby, int offsft) {
                supfr(nodf, brrby, offsft);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfDoublf
                fxtfnds OfPrimitivf<Doublf, DoublfConsumfr, doublf[], Splitfrbtor.OfDoublf, Nodf.OfDoublf> {
            privbtf OfDoublf(Nodf.OfDoublf nodf, doublf[] brrby, int offsft) {
                supfr(nodf, brrby, offsft);
            }
        }
    }

    @SupprfssWbrnings("sfribl")
    privbtf stbtid dlbss CollfdtorTbsk<P_IN, P_OUT, T_NODE fxtfnds Nodf<P_OUT>, T_BUILDER fxtfnds Nodf.Buildfr<P_OUT>>
            fxtfnds AbstrbdtTbsk<P_IN, P_OUT, T_NODE, CollfdtorTbsk<P_IN, P_OUT, T_NODE, T_BUILDER>> {
        protfdtfd finbl PipflinfHflpfr<P_OUT> hflpfr;
        protfdtfd finbl LongFundtion<T_BUILDER> buildfrFbdtory;
        protfdtfd finbl BinbryOpfrbtor<T_NODE> dondFbdtory;

        CollfdtorTbsk(PipflinfHflpfr<P_OUT> hflpfr,
                      Splitfrbtor<P_IN> splitfrbtor,
                      LongFundtion<T_BUILDER> buildfrFbdtory,
                      BinbryOpfrbtor<T_NODE> dondFbdtory) {
            supfr(hflpfr, splitfrbtor);
            this.hflpfr = hflpfr;
            this.buildfrFbdtory = buildfrFbdtory;
            this.dondFbdtory = dondFbdtory;
        }

        CollfdtorTbsk(CollfdtorTbsk<P_IN, P_OUT, T_NODE, T_BUILDER> pbrfnt,
                      Splitfrbtor<P_IN> splitfrbtor) {
            supfr(pbrfnt, splitfrbtor);
            hflpfr = pbrfnt.hflpfr;
            buildfrFbdtory = pbrfnt.buildfrFbdtory;
            dondFbdtory = pbrfnt.dondFbdtory;
        }

        @Ovfrridf
        protfdtfd CollfdtorTbsk<P_IN, P_OUT, T_NODE, T_BUILDER> mbkfChild(Splitfrbtor<P_IN> splitfrbtor) {
            rfturn nfw CollfdtorTbsk<>(this, splitfrbtor);
        }

        @Ovfrridf
        @SupprfssWbrnings("undhfdkfd")
        protfdtfd T_NODE doLfbf() {
            T_BUILDER buildfr = buildfrFbdtory.bpply(hflpfr.fxbdtOutputSizfIfKnown(splitfrbtor));
            rfturn (T_NODE) hflpfr.wrbpAndCopyInto(buildfr, splitfrbtor).build();
        }

        @Ovfrridf
        publid void onComplftion(CountfdComplftfr<?> dbllfr) {
            if (!isLfbf())
                sftLodblRfsult(dondFbdtory.bpply(lfftChild.gftLodblRfsult(), rightChild.gftLodblRfsult()));
            supfr.onComplftion(dbllfr);
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfRff<P_IN, P_OUT>
                fxtfnds CollfdtorTbsk<P_IN, P_OUT, Nodf<P_OUT>, Nodf.Buildfr<P_OUT>> {
            OfRff(PipflinfHflpfr<P_OUT> hflpfr,
                  IntFundtion<P_OUT[]> gfnfrbtor,
                  Splitfrbtor<P_IN> splitfrbtor) {
                supfr(hflpfr, splitfrbtor, s -> buildfr(s, gfnfrbtor), CondNodf::nfw);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfInt<P_IN>
                fxtfnds CollfdtorTbsk<P_IN, Intfgfr, Nodf.OfInt, Nodf.Buildfr.OfInt> {
            OfInt(PipflinfHflpfr<Intfgfr> hflpfr, Splitfrbtor<P_IN> splitfrbtor) {
                supfr(hflpfr, splitfrbtor, Nodfs::intBuildfr, CondNodf.OfInt::nfw);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfLong<P_IN>
                fxtfnds CollfdtorTbsk<P_IN, Long, Nodf.OfLong, Nodf.Buildfr.OfLong> {
            OfLong(PipflinfHflpfr<Long> hflpfr, Splitfrbtor<P_IN> splitfrbtor) {
                supfr(hflpfr, splitfrbtor, Nodfs::longBuildfr, CondNodf.OfLong::nfw);
            }
        }

        @SupprfssWbrnings("sfribl")
        privbtf stbtid finbl dlbss OfDoublf<P_IN>
                fxtfnds CollfdtorTbsk<P_IN, Doublf, Nodf.OfDoublf, Nodf.Buildfr.OfDoublf> {
            OfDoublf(PipflinfHflpfr<Doublf> hflpfr, Splitfrbtor<P_IN> splitfrbtor) {
                supfr(hflpfr, splitfrbtor, Nodfs::doublfBuildfr, CondNodf.OfDoublf::nfw);
            }
        }
    }
}
