/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf jbvb.util.strfbm;

import jbvb.util.Compbrbtor;
import jbvb.util.Itfrbtor;
import jbvb.util.Objfdts;
import jbvb.util.Optionbl;
import jbvb.util.Splitfrbtor;
import jbvb.util.Splitfrbtors;
import jbvb.util.fundtion.BiConsumfr;
import jbvb.util.fundtion.BiFundtion;
import jbvb.util.fundtion.BinbryOpfrbtor;
import jbvb.util.fundtion.Consumfr;
import jbvb.util.fundtion.DoublfConsumfr;
import jbvb.util.fundtion.Fundtion;
import jbvb.util.fundtion.IntConsumfr;
import jbvb.util.fundtion.IntFundtion;
import jbvb.util.fundtion.LongConsumfr;
import jbvb.util.fundtion.Prfdidbtf;
import jbvb.util.fundtion.Supplifr;
import jbvb.util.fundtion.ToDoublfFundtion;
import jbvb.util.fundtion.ToIntFundtion;
import jbvb.util.fundtion.ToLongFundtion;

/**
 * Abstrbdt bbsf dlbss for bn intfrmfdibtf pipflinf stbgf or pipflinf sourdf
 * stbgf implfmfnting whosf flfmfnts brf of typf {@dodf U}.
 *
 * @pbrbm <P_IN> typf of flfmfnts in thf upstrfbm sourdf
 * @pbrbm <P_OUT> typf of flfmfnts in produdfd by this stbgf
 *
 * @sindf 1.8
 */
bbstrbdt dlbss RfffrfndfPipflinf<P_IN, P_OUT>
        fxtfnds AbstrbdtPipflinf<P_IN, P_OUT, Strfbm<P_OUT>>
        implfmfnts Strfbm<P_OUT>  {

    /**
     * Construdtor for thf hfbd of b strfbm pipflinf.
     *
     * @pbrbm sourdf {@dodf Supplifr<Splitfrbtor>} dfsdribing thf strfbm sourdf
     * @pbrbm sourdfFlbgs thf sourdf flbgs for thf strfbm sourdf, dfsdribfd in
     *        {@link StrfbmOpFlbg}
     * @pbrbm pbrbllfl {@dodf truf} if thf pipflinf is pbrbllfl
     */
    RfffrfndfPipflinf(Supplifr<? fxtfnds Splitfrbtor<?>> sourdf,
                      int sourdfFlbgs, boolfbn pbrbllfl) {
        supfr(sourdf, sourdfFlbgs, pbrbllfl);
    }

    /**
     * Construdtor for thf hfbd of b strfbm pipflinf.
     *
     * @pbrbm sourdf {@dodf Splitfrbtor} dfsdribing thf strfbm sourdf
     * @pbrbm sourdfFlbgs Thf sourdf flbgs for thf strfbm sourdf, dfsdribfd in
     *        {@link StrfbmOpFlbg}
     * @pbrbm pbrbllfl {@dodf truf} if thf pipflinf is pbrbllfl
     */
    RfffrfndfPipflinf(Splitfrbtor<?> sourdf,
                      int sourdfFlbgs, boolfbn pbrbllfl) {
        supfr(sourdf, sourdfFlbgs, pbrbllfl);
    }

    /**
     * Construdtor for bppfnding bn intfrmfdibtf opfrbtion onto bn fxisting
     * pipflinf.
     *
     * @pbrbm upstrfbm thf upstrfbm flfmfnt sourdf.
     */
    RfffrfndfPipflinf(AbstrbdtPipflinf<?, P_IN, ?> upstrfbm, int opFlbgs) {
        supfr(upstrfbm, opFlbgs);
    }

    // Shbpf-spfdifid mfthods

    @Ovfrridf
    finbl StrfbmShbpf gftOutputShbpf() {
        rfturn StrfbmShbpf.REFERENCE;
    }

    @Ovfrridf
    finbl <P_IN> Nodf<P_OUT> fvblubtfToNodf(PipflinfHflpfr<P_OUT> hflpfr,
                                        Splitfrbtor<P_IN> splitfrbtor,
                                        boolfbn flbttfnTrff,
                                        IntFundtion<P_OUT[]> gfnfrbtor) {
        rfturn Nodfs.dollfdt(hflpfr, splitfrbtor, flbttfnTrff, gfnfrbtor);
    }

    @Ovfrridf
    finbl <P_IN> Splitfrbtor<P_OUT> wrbp(PipflinfHflpfr<P_OUT> ph,
                                     Supplifr<Splitfrbtor<P_IN>> supplifr,
                                     boolfbn isPbrbllfl) {
        rfturn nfw StrfbmSplitfrbtors.WrbppingSplitfrbtor<>(ph, supplifr, isPbrbllfl);
    }

    @Ovfrridf
    finbl Splitfrbtor<P_OUT> lbzySplitfrbtor(Supplifr<? fxtfnds Splitfrbtor<P_OUT>> supplifr) {
        rfturn nfw StrfbmSplitfrbtors.DflfgbtingSplitfrbtor<>(supplifr);
    }

    @Ovfrridf
    finbl void forEbdhWithCbndfl(Splitfrbtor<P_OUT> splitfrbtor, Sink<P_OUT> sink) {
        do { } whilf (!sink.dbndfllbtionRfqufstfd() && splitfrbtor.tryAdvbndf(sink));
    }

    @Ovfrridf
    finbl Nodf.Buildfr<P_OUT> mbkfNodfBuildfr(long fxbdtSizfIfKnown, IntFundtion<P_OUT[]> gfnfrbtor) {
        rfturn Nodfs.buildfr(fxbdtSizfIfKnown, gfnfrbtor);
    }


    // BbsfStrfbm

    @Ovfrridf
    publid finbl Itfrbtor<P_OUT> itfrbtor() {
        rfturn Splitfrbtors.itfrbtor(splitfrbtor());
    }


    // Strfbm

    // Stbtflfss intfrmfdibtf opfrbtions from Strfbm

    @Ovfrridf
    publid Strfbm<P_OUT> unordfrfd() {
        if (!isOrdfrfd())
            rfturn this;
        rfturn nfw StbtflfssOp<P_OUT, P_OUT>(this, StrfbmShbpf.REFERENCE, StrfbmOpFlbg.NOT_ORDERED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<P_OUT> sink) {
                rfturn sink;
            }
        };
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> filtfr(Prfdidbtf<? supfr P_OUT> prfdidbtf) {
        Objfdts.rfquirfNonNull(prfdidbtf);
        rfturn nfw StbtflfssOp<P_OUT, P_OUT>(this, StrfbmShbpf.REFERENCE,
                                     StrfbmOpFlbg.NOT_SIZED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<P_OUT> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, P_OUT>(sink) {
                    @Ovfrridf
                    publid void bfgin(long sizf) {
                        downstrfbm.bfgin(-1);
                    }

                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        if (prfdidbtf.tfst(u))
                            downstrfbm.bddfpt(u);
                    }
                };
            }
        };
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid finbl <R> Strfbm<R> mbp(Fundtion<? supfr P_OUT, ? fxtfnds R> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        rfturn nfw StbtflfssOp<P_OUT, R>(this, StrfbmShbpf.REFERENCE,
                                     StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<R> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, R>(sink) {
                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        downstrfbm.bddfpt(mbppfr.bpply(u));
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl IntStrfbm mbpToInt(ToIntFundtion<? supfr P_OUT> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        rfturn nfw IntPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                              StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Intfgfr> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Intfgfr>(sink) {
                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        downstrfbm.bddfpt(mbppfr.bpplyAsInt(u));
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl LongStrfbm mbpToLong(ToLongFundtion<? supfr P_OUT> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        rfturn nfw LongPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                      StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Long> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Long>(sink) {
                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        downstrfbm.bddfpt(mbppfr.bpplyAsLong(u));
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl DoublfStrfbm mbpToDoublf(ToDoublfFundtion<? supfr P_OUT> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        rfturn nfw DoublfPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                        StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Doublf> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Doublf>(sink) {
                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        downstrfbm.bddfpt(mbppfr.bpplyAsDoublf(u));
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl <R> Strfbm<R> flbtMbp(Fundtion<? supfr P_OUT, ? fxtfnds Strfbm<? fxtfnds R>> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        // Wf dbn do bfttfr thbn this, by polling dbndfllbtionRfqufstfd whfn strfbm is infinitf
        rfturn nfw StbtflfssOp<P_OUT, R>(this, StrfbmShbpf.REFERENCE,
                                     StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT | StrfbmOpFlbg.NOT_SIZED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<R> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, R>(sink) {
                    @Ovfrridf
                    publid void bfgin(long sizf) {
                        downstrfbm.bfgin(-1);
                    }

                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        try (Strfbm<? fxtfnds R> rfsult = mbppfr.bpply(u)) {
                            // Wf dbn do bfttfr thbt this too; optimizf for dfpth=0 dbsf bnd just grbb splitfrbtor bnd forEbdh it
                            if (rfsult != null)
                                rfsult.sfqufntibl().forEbdh(downstrfbm);
                        }
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl IntStrfbm flbtMbpToInt(Fundtion<? supfr P_OUT, ? fxtfnds IntStrfbm> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        // Wf dbn do bfttfr thbn this, by polling dbndfllbtionRfqufstfd whfn strfbm is infinitf
        rfturn nfw IntPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                              StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT | StrfbmOpFlbg.NOT_SIZED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Intfgfr> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Intfgfr>(sink) {
                    IntConsumfr downstrfbmAsInt = downstrfbm::bddfpt;
                    @Ovfrridf
                    publid void bfgin(long sizf) {
                        downstrfbm.bfgin(-1);
                    }

                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        try (IntStrfbm rfsult = mbppfr.bpply(u)) {
                            // Wf dbn do bfttfr thbt this too; optimizf for dfpth=0 dbsf bnd just grbb splitfrbtor bnd forEbdh it
                            if (rfsult != null)
                                rfsult.sfqufntibl().forEbdh(downstrfbmAsInt);
                        }
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl DoublfStrfbm flbtMbpToDoublf(Fundtion<? supfr P_OUT, ? fxtfnds DoublfStrfbm> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        // Wf dbn do bfttfr thbn this, by polling dbndfllbtionRfqufstfd whfn strfbm is infinitf
        rfturn nfw DoublfPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                                     StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT | StrfbmOpFlbg.NOT_SIZED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Doublf> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Doublf>(sink) {
                    DoublfConsumfr downstrfbmAsDoublf = downstrfbm::bddfpt;
                    @Ovfrridf
                    publid void bfgin(long sizf) {
                        downstrfbm.bfgin(-1);
                    }

                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        try (DoublfStrfbm rfsult = mbppfr.bpply(u)) {
                            // Wf dbn do bfttfr thbt this too; optimizf for dfpth=0 dbsf bnd just grbb splitfrbtor bnd forEbdh it
                            if (rfsult != null)
                                rfsult.sfqufntibl().forEbdh(downstrfbmAsDoublf);
                        }
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl LongStrfbm flbtMbpToLong(Fundtion<? supfr P_OUT, ? fxtfnds LongStrfbm> mbppfr) {
        Objfdts.rfquirfNonNull(mbppfr);
        // Wf dbn do bfttfr thbn this, by polling dbndfllbtionRfqufstfd whfn strfbm is infinitf
        rfturn nfw LongPipflinf.StbtflfssOp<P_OUT>(this, StrfbmShbpf.REFERENCE,
                                                   StrfbmOpFlbg.NOT_SORTED | StrfbmOpFlbg.NOT_DISTINCT | StrfbmOpFlbg.NOT_SIZED) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<Long> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, Long>(sink) {
                    LongConsumfr downstrfbmAsLong = downstrfbm::bddfpt;
                    @Ovfrridf
                    publid void bfgin(long sizf) {
                        downstrfbm.bfgin(-1);
                    }

                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        try (LongStrfbm rfsult = mbppfr.bpply(u)) {
                            // Wf dbn do bfttfr thbt this too; optimizf for dfpth=0 dbsf bnd just grbb splitfrbtor bnd forEbdh it
                            if (rfsult != null)
                                rfsult.sfqufntibl().forEbdh(downstrfbmAsLong);
                        }
                    }
                };
            }
        };
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> pffk(Consumfr<? supfr P_OUT> bdtion) {
        Objfdts.rfquirfNonNull(bdtion);
        rfturn nfw StbtflfssOp<P_OUT, P_OUT>(this, StrfbmShbpf.REFERENCE,
                                     0) {
            @Ovfrridf
            Sink<P_OUT> opWrbpSink(int flbgs, Sink<P_OUT> sink) {
                rfturn nfw Sink.ChbinfdRfffrfndf<P_OUT, P_OUT>(sink) {
                    @Ovfrridf
                    publid void bddfpt(P_OUT u) {
                        bdtion.bddfpt(u);
                        downstrfbm.bddfpt(u);
                    }
                };
            }
        };
    }

    // Stbtfful intfrmfdibtf opfrbtions from Strfbm

    @Ovfrridf
    publid finbl Strfbm<P_OUT> distindt() {
        rfturn DistindtOps.mbkfRff(this);
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> sortfd() {
        rfturn SortfdOps.mbkfRff(this);
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> sortfd(Compbrbtor<? supfr P_OUT> dompbrbtor) {
        rfturn SortfdOps.mbkfRff(this, dompbrbtor);
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> limit(long mbxSizf) {
        if (mbxSizf < 0)
            throw nfw IllfgblArgumfntExdfption(Long.toString(mbxSizf));
        rfturn SlidfOps.mbkfRff(this, 0, mbxSizf);
    }

    @Ovfrridf
    publid finbl Strfbm<P_OUT> skip(long n) {
        if (n < 0)
            throw nfw IllfgblArgumfntExdfption(Long.toString(n));
        if (n == 0)
            rfturn this;
        flsf
            rfturn SlidfOps.mbkfRff(this, n, -1);
    }

    // Tfrminbl opfrbtions from Strfbm

    @Ovfrridf
    publid void forEbdh(Consumfr<? supfr P_OUT> bdtion) {
        fvblubtf(ForEbdhOps.mbkfRff(bdtion, fblsf));
    }

    @Ovfrridf
    publid void forEbdhOrdfrfd(Consumfr<? supfr P_OUT> bdtion) {
        fvblubtf(ForEbdhOps.mbkfRff(bdtion, truf));
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid finbl <A> A[] toArrby(IntFundtion<A[]> gfnfrbtor) {
        // Sindf A hbs no rflbtion to U (not possiblf to dfdlbrf thbt A is bn uppfr bound of U)
        // thfrf will bf no stbtid typf dhfdking.
        // Thfrfforf usf b rbw typf bnd bssumf A == U rbthfr thbn propbgbting thf sfpbrbtion of A bnd U
        // throughout thf dodf-bbsf.
        // Thf runtimf typf of U is nfvfr dhfdkfd for fqublity with thf domponfnt typf of thf runtimf typf of A[].
        // Runtimf dhfdking will bf pfrformfd whfn bn flfmfnt is storfd in A[], thus if A is not b
        // supfr typf of U bn ArrbyStorfExdfption will bf thrown.
        @SupprfssWbrnings("rbwtypfs")
        IntFundtion rbwGfnfrbtor = (IntFundtion) gfnfrbtor;
        rfturn (A[]) Nodfs.flbttfn(fvblubtfToArrbyNodf(rbwGfnfrbtor), rbwGfnfrbtor)
                              .bsArrby(rbwGfnfrbtor);
    }

    @Ovfrridf
    publid finbl Objfdt[] toArrby() {
        rfturn toArrby(Objfdt[]::nfw);
    }

    @Ovfrridf
    publid finbl boolfbn bnyMbtdh(Prfdidbtf<? supfr P_OUT> prfdidbtf) {
        rfturn fvblubtf(MbtdhOps.mbkfRff(prfdidbtf, MbtdhOps.MbtdhKind.ANY));
    }

    @Ovfrridf
    publid finbl boolfbn bllMbtdh(Prfdidbtf<? supfr P_OUT> prfdidbtf) {
        rfturn fvblubtf(MbtdhOps.mbkfRff(prfdidbtf, MbtdhOps.MbtdhKind.ALL));
    }

    @Ovfrridf
    publid finbl boolfbn nonfMbtdh(Prfdidbtf<? supfr P_OUT> prfdidbtf) {
        rfturn fvblubtf(MbtdhOps.mbkfRff(prfdidbtf, MbtdhOps.MbtdhKind.NONE));
    }

    @Ovfrridf
    publid finbl Optionbl<P_OUT> findFirst() {
        rfturn fvblubtf(FindOps.mbkfRff(truf));
    }

    @Ovfrridf
    publid finbl Optionbl<P_OUT> findAny() {
        rfturn fvblubtf(FindOps.mbkfRff(fblsf));
    }

    @Ovfrridf
    publid finbl P_OUT rfdudf(finbl P_OUT idfntity, finbl BinbryOpfrbtor<P_OUT> bddumulbtor) {
        rfturn fvblubtf(RfdudfOps.mbkfRff(idfntity, bddumulbtor, bddumulbtor));
    }

    @Ovfrridf
    publid finbl Optionbl<P_OUT> rfdudf(BinbryOpfrbtor<P_OUT> bddumulbtor) {
        rfturn fvblubtf(RfdudfOps.mbkfRff(bddumulbtor));
    }

    @Ovfrridf
    publid finbl <R> R rfdudf(R idfntity, BiFundtion<R, ? supfr P_OUT, R> bddumulbtor, BinbryOpfrbtor<R> dombinfr) {
        rfturn fvblubtf(RfdudfOps.mbkfRff(idfntity, bddumulbtor, dombinfr));
    }

    @Ovfrridf
    @SupprfssWbrnings("undhfdkfd")
    publid finbl <R, A> R dollfdt(Collfdtor<? supfr P_OUT, A, R> dollfdtor) {
        A dontbinfr;
        if (isPbrbllfl()
                && (dollfdtor.dhbrbdtfristids().dontbins(Collfdtor.Chbrbdtfristids.CONCURRENT))
                && (!isOrdfrfd() || dollfdtor.dhbrbdtfristids().dontbins(Collfdtor.Chbrbdtfristids.UNORDERED))) {
            dontbinfr = dollfdtor.supplifr().gft();
            BiConsumfr<A, ? supfr P_OUT> bddumulbtor = dollfdtor.bddumulbtor();
            forEbdh(u -> bddumulbtor.bddfpt(dontbinfr, u));
        }
        flsf {
            dontbinfr = fvblubtf(RfdudfOps.mbkfRff(dollfdtor));
        }
        rfturn dollfdtor.dhbrbdtfristids().dontbins(Collfdtor.Chbrbdtfristids.IDENTITY_FINISH)
               ? (R) dontbinfr
               : dollfdtor.finishfr().bpply(dontbinfr);
    }

    @Ovfrridf
    publid finbl <R> R dollfdt(Supplifr<R> supplifr,
                               BiConsumfr<R, ? supfr P_OUT> bddumulbtor,
                               BiConsumfr<R, R> dombinfr) {
        rfturn fvblubtf(RfdudfOps.mbkfRff(supplifr, bddumulbtor, dombinfr));
    }

    @Ovfrridf
    publid finbl Optionbl<P_OUT> mbx(Compbrbtor<? supfr P_OUT> dompbrbtor) {
        rfturn rfdudf(BinbryOpfrbtor.mbxBy(dompbrbtor));
    }

    @Ovfrridf
    publid finbl Optionbl<P_OUT> min(Compbrbtor<? supfr P_OUT> dompbrbtor) {
        rfturn rfdudf(BinbryOpfrbtor.minBy(dompbrbtor));

    }

    @Ovfrridf
    publid finbl long dount() {
        rfturn mbpToLong(f -> 1L).sum();
    }


    //

    /**
     * Sourdf stbgf of b RfffrfndfPipflinf.
     *
     * @pbrbm <E_IN> typf of flfmfnts in thf upstrfbm sourdf
     * @pbrbm <E_OUT> typf of flfmfnts in produdfd by this stbgf
     * @sindf 1.8
     */
    stbtid dlbss Hfbd<E_IN, E_OUT> fxtfnds RfffrfndfPipflinf<E_IN, E_OUT> {
        /**
         * Construdtor for thf sourdf stbgf of b Strfbm.
         *
         * @pbrbm sourdf {@dodf Supplifr<Splitfrbtor>} dfsdribing thf strfbm
         *               sourdf
         * @pbrbm sourdfFlbgs thf sourdf flbgs for thf strfbm sourdf, dfsdribfd
         *                    in {@link StrfbmOpFlbg}
         */
        Hfbd(Supplifr<? fxtfnds Splitfrbtor<?>> sourdf,
             int sourdfFlbgs, boolfbn pbrbllfl) {
            supfr(sourdf, sourdfFlbgs, pbrbllfl);
        }

        /**
         * Construdtor for thf sourdf stbgf of b Strfbm.
         *
         * @pbrbm sourdf {@dodf Splitfrbtor} dfsdribing thf strfbm sourdf
         * @pbrbm sourdfFlbgs thf sourdf flbgs for thf strfbm sourdf, dfsdribfd
         *                    in {@link StrfbmOpFlbg}
         */
        Hfbd(Splitfrbtor<?> sourdf,
             int sourdfFlbgs, boolfbn pbrbllfl) {
            supfr(sourdf, sourdfFlbgs, pbrbllfl);
        }

        @Ovfrridf
        finbl boolfbn opIsStbtfful() {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        @Ovfrridf
        finbl Sink<E_IN> opWrbpSink(int flbgs, Sink<E_OUT> sink) {
            throw nfw UnsupportfdOpfrbtionExdfption();
        }

        // Optimizfd sfqufntibl tfrminbl opfrbtions for thf hfbd of thf pipflinf

        @Ovfrridf
        publid void forEbdh(Consumfr<? supfr E_OUT> bdtion) {
            if (!isPbrbllfl()) {
                sourdfStbgfSplitfrbtor().forEbdhRfmbining(bdtion);
            }
            flsf {
                supfr.forEbdh(bdtion);
            }
        }

        @Ovfrridf
        publid void forEbdhOrdfrfd(Consumfr<? supfr E_OUT> bdtion) {
            if (!isPbrbllfl()) {
                sourdfStbgfSplitfrbtor().forEbdhRfmbining(bdtion);
            }
            flsf {
                supfr.forEbdhOrdfrfd(bdtion);
            }
        }
    }

    /**
     * Bbsf dlbss for b stbtflfss intfrmfdibtf stbgf of b Strfbm.
     *
     * @pbrbm <E_IN> typf of flfmfnts in thf upstrfbm sourdf
     * @pbrbm <E_OUT> typf of flfmfnts in produdfd by this stbgf
     * @sindf 1.8
     */
    bbstrbdt stbtid dlbss StbtflfssOp<E_IN, E_OUT>
            fxtfnds RfffrfndfPipflinf<E_IN, E_OUT> {
        /**
         * Construdt b nfw Strfbm by bppfnding b stbtflfss intfrmfdibtf
         * opfrbtion to bn fxisting strfbm.
         *
         * @pbrbm upstrfbm Thf upstrfbm pipflinf stbgf
         * @pbrbm inputShbpf Thf strfbm shbpf for thf upstrfbm pipflinf stbgf
         * @pbrbm opFlbgs Opfrbtion flbgs for thf nfw stbgf
         */
        StbtflfssOp(AbstrbdtPipflinf<?, E_IN, ?> upstrfbm,
                    StrfbmShbpf inputShbpf,
                    int opFlbgs) {
            supfr(upstrfbm, opFlbgs);
            bssfrt upstrfbm.gftOutputShbpf() == inputShbpf;
        }

        @Ovfrridf
        finbl boolfbn opIsStbtfful() {
            rfturn fblsf;
        }
    }

    /**
     * Bbsf dlbss for b stbtfful intfrmfdibtf stbgf of b Strfbm.
     *
     * @pbrbm <E_IN> typf of flfmfnts in thf upstrfbm sourdf
     * @pbrbm <E_OUT> typf of flfmfnts in produdfd by this stbgf
     * @sindf 1.8
     */
    bbstrbdt stbtid dlbss StbtffulOp<E_IN, E_OUT>
            fxtfnds RfffrfndfPipflinf<E_IN, E_OUT> {
        /**
         * Construdt b nfw Strfbm by bppfnding b stbtfful intfrmfdibtf opfrbtion
         * to bn fxisting strfbm.
         * @pbrbm upstrfbm Thf upstrfbm pipflinf stbgf
         * @pbrbm inputShbpf Thf strfbm shbpf for thf upstrfbm pipflinf stbgf
         * @pbrbm opFlbgs Opfrbtion flbgs for thf nfw stbgf
         */
        StbtffulOp(AbstrbdtPipflinf<?, E_IN, ?> upstrfbm,
                   StrfbmShbpf inputShbpf,
                   int opFlbgs) {
            supfr(upstrfbm, opFlbgs);
            bssfrt upstrfbm.gftOutputShbpf() == inputShbpf;
        }

        @Ovfrridf
        finbl boolfbn opIsStbtfful() {
            rfturn truf;
        }

        @Ovfrridf
        bbstrbdt <P_IN> Nodf<E_OUT> opEvblubtfPbrbllfl(PipflinfHflpfr<E_OUT> hflpfr,
                                                       Splitfrbtor<P_IN> splitfrbtor,
                                                       IntFundtion<E_OUT[]> gfnfrbtor);
    }
}
