/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.io.IOExdfption;
import jbvb.io.PrintStrfbm;
import jbvb.io.PrintWritfr;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.io.Rfbdfr;
import jbvb.io.Writfr;
import jbvb.io.OutputStrfbmWritfr;
import jbvb.io.BufffrfdWritfr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

import jdk.intfrnbl.util.xml.PropfrtifsDffbultHbndlfr;

/**
 * Thf {@dodf Propfrtifs} dlbss rfprfsfnts b pfrsistfnt sft of
 * propfrtifs. Thf {@dodf Propfrtifs} dbn bf sbvfd to b strfbm
 * or lobdfd from b strfbm. Ebdh kfy bnd its dorrfsponding vbluf in
 * thf propfrty list is b string.
 * <p>
 * A propfrty list dbn dontbin bnothfr propfrty list bs its
 * "dffbults"; this sfdond propfrty list is sfbrdhfd if
 * thf propfrty kfy is not found in thf originbl propfrty list.
 * <p>
 * Bfdbusf {@dodf Propfrtifs} inhfrits from {@dodf Hbshtbblf}, thf
 * {@dodf put} bnd {@dodf putAll} mfthods dbn bf bpplifd to b
 * {@dodf Propfrtifs} objfdt.  Thfir usf is strongly disdourbgfd bs thfy
 * bllow thf dbllfr to insfrt fntrifs whosf kfys or vblufs brf not
 * {@dodf Strings}.  Thf {@dodf sftPropfrty} mfthod should bf usfd
 * instfbd.  If thf {@dodf storf} or {@dodf sbvf} mfthod is dbllfd
 * on b "dompromisfd" {@dodf Propfrtifs} objfdt thbt dontbins b
 * non-{@dodf String} kfy or vbluf, thf dbll will fbil. Similbrly,
 * thf dbll to thf {@dodf propfrtyNbmfs} or {@dodf list} mfthod
 * will fbil if it is dbllfd on b "dompromisfd" {@dodf Propfrtifs}
 * objfdt thbt dontbins b non-{@dodf String} kfy.
 *
 * <p>
 * Thf {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)} <tt>/</tt>
 * {@link #storf(jbvb.io.Writfr, jbvb.lbng.String) storf(Writfr, String)}
 * mfthods lobd bnd storf propfrtifs from bnd to b dhbrbdtfr bbsfd strfbm
 * in b simplf linf-orifntfd formbt spfdififd bflow.
 *
 * Thf {@link #lobd(jbvb.io.InputStrfbm) lobd(InputStrfbm)} <tt>/</tt>
 * {@link #storf(jbvb.io.OutputStrfbm, jbvb.lbng.String) storf(OutputStrfbm, String)}
 * mfthods work thf sbmf wby bs thf lobd(Rfbdfr)/storf(Writfr, String) pbir, fxdfpt
 * thf input/output strfbm is fndodfd in ISO 8859-1 dhbrbdtfr fndoding.
 * Chbrbdtfrs thbt dbnnot bf dirfdtly rfprfsfntfd in this fndoding dbn bf writtfn using
 * Unidodf fsdbpfs bs dffinfd in sfdtion 3.3 of
 * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>;
 * only b singlf 'u' dhbrbdtfr is bllowfd in bn fsdbpf
 * sfqufndf. Thf nbtivf2bsdii tool dbn bf usfd to donvfrt propfrty filfs to bnd
 * from othfr dhbrbdtfr fndodings.
 *
 * <p> Thf {@link #lobdFromXML(InputStrfbm)} bnd {@link
 * #storfToXML(OutputStrfbm, String, String)} mfthods lobd bnd storf propfrtifs
 * in b simplf XML formbt.  By dffbult thf UTF-8 dhbrbdtfr fndoding is usfd,
 * howfvfr b spfdifid fndoding mby bf spfdififd if rfquirfd. Implfmfntbtions
 * brf rfquirfd to support UTF-8 bnd UTF-16 bnd mby support othfr fndodings.
 * An XML propfrtifs dodumfnt hbs thf following DOCTYPE dfdlbrbtion:
 *
 * <prf>
 * &lt;!DOCTYPE propfrtifs SYSTEM "http://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
 * </prf>
 * Notf thbt thf systfm URI (http://jbvb.sun.dom/dtd/propfrtifs.dtd) is
 * <i>not</i> bddfssfd whfn fxporting or importing propfrtifs; it mfrfly
 * sfrvfs bs b string to uniqufly idfntify thf DTD, whidh is:
 * <prf>
 *    &lt;?xml vfrsion="1.0" fndoding="UTF-8"?&gt;
 *
 *    &lt;!-- DTD for propfrtifs --&gt;
 *
 *    &lt;!ELEMENT propfrtifs ( dommfnt?, fntry* ) &gt;
 *
 *    &lt;!ATTLIST propfrtifs vfrsion CDATA #FIXED "1.0"&gt;
 *
 *    &lt;!ELEMENT dommfnt (#PCDATA) &gt;
 *
 *    &lt;!ELEMENT fntry (#PCDATA) &gt;
 *
 *    &lt;!ATTLIST fntry kfy CDATA #REQUIRED&gt;
 * </prf>
 *
 * <p>This dlbss is thrfbd-sbff: multiplf thrfbds dbn shbrf b singlf
 * <tt>Propfrtifs</tt> objfdt without thf nffd for fxtfrnbl syndhronizbtion.
 *
 * @sff <b hrff="../../../tfdhnotfs/tools/solbris/nbtivf2bsdii.html">nbtivf2bsdii tool for Solbris</b>
 * @sff <b hrff="../../../tfdhnotfs/tools/windows/nbtivf2bsdii.html">nbtivf2bsdii tool for Windows</b>
 *
 * @buthor  Arthur vbn Hoff
 * @buthor  Midhbfl MdCloskfy
 * @buthor  Xufming Shfn
 * @sindf   1.0
 */
publid
dlbss Propfrtifs fxtfnds Hbshtbblf<Objfdt,Objfdt> {
    /**
     * usf sfriblVfrsionUID from JDK 1.1.X for intfropfrbbility
     */
     privbtf stbtid finbl long sfriblVfrsionUID = 4112578634029874840L;

    /**
     * A propfrty list thbt dontbins dffbult vblufs for bny kfys not
     * found in this propfrty list.
     *
     * @sfribl
     */
    protfdtfd Propfrtifs dffbults;

    /**
     * Crfbtfs bn fmpty propfrty list with no dffbult vblufs.
     */
    publid Propfrtifs() {
        this(null);
    }

    /**
     * Crfbtfs bn fmpty propfrty list with thf spfdififd dffbults.
     *
     * @pbrbm   dffbults   thf dffbults.
     */
    publid Propfrtifs(Propfrtifs dffbults) {
        this.dffbults = dffbults;
    }

    /**
     * Cblls thf <tt>Hbshtbblf</tt> mfthod {@dodf put}. Providfd for
     * pbrbllflism with thf <tt>gftPropfrty</tt> mfthod. Enfordfs usf of
     * strings for propfrty kfys bnd vblufs. Thf vbluf rfturnfd is thf
     * rfsult of thf <tt>Hbshtbblf</tt> dbll to {@dodf put}.
     *
     * @pbrbm kfy thf kfy to bf plbdfd into this propfrty list.
     * @pbrbm vbluf thf vbluf dorrfsponding to <tt>kfy</tt>.
     * @rfturn     thf prfvious vbluf of thf spfdififd kfy in this propfrty
     *             list, or {@dodf null} if it did not hbvf onf.
     * @sff #gftPropfrty
     * @sindf    1.2
     */
    publid syndhronizfd Objfdt sftPropfrty(String kfy, String vbluf) {
        rfturn put(kfy, vbluf);
    }


    /**
     * Rfbds b propfrty list (kfy bnd flfmfnt pbirs) from thf input
     * dhbrbdtfr strfbm in b simplf linf-orifntfd formbt.
     * <p>
     * Propfrtifs brf prodfssfd in tfrms of linfs. Thfrf brf two
     * kinds of linf, <i>nbturbl linfs</i> bnd <i>logidbl linfs</i>.
     * A nbturbl linf is dffinfd bs b linf of
     * dhbrbdtfrs thbt is tfrminbtfd fithfr by b sft of linf tfrminbtor
     * dhbrbdtfrs ({@dodf \n} or {@dodf \r} or {@dodf \r\n})
     * or by thf fnd of thf strfbm. A nbturbl linf mby bf fithfr b blbnk linf,
     * b dommfnt linf, or hold bll or somf of b kfy-flfmfnt pbir. A logidbl
     * linf holds bll thf dbtb of b kfy-flfmfnt pbir, whidh mby bf sprfbd
     * out bdross sfvfrbl bdjbdfnt nbturbl linfs by fsdbping
     * thf linf tfrminbtor sfqufndf with b bbdkslbsh dhbrbdtfr
     * {@dodf \}.  Notf thbt b dommfnt linf dbnnot bf fxtfndfd
     * in this mbnnfr; fvfry nbturbl linf thbt is b dommfnt must hbvf
     * its own dommfnt indidbtor, bs dfsdribfd bflow. Linfs brf rfbd from
     * input until thf fnd of thf strfbm is rfbdhfd.
     *
     * <p>
     * A nbturbl linf thbt dontbins only whitf spbdf dhbrbdtfrs is
     * donsidfrfd blbnk bnd is ignorfd.  A dommfnt linf hbs bn ASCII
     * {@dodf '#'} or {@dodf '!'} bs its first non-whitf
     * spbdf dhbrbdtfr; dommfnt linfs brf blso ignorfd bnd do not
     * fndodf kfy-flfmfnt informbtion.  In bddition to linf
     * tfrminbtors, this formbt donsidfrs thf dhbrbdtfrs spbdf
     * ({@dodf ' '}, {@dodf '\u005Cu0020'}), tbb
     * ({@dodf '\t'}, {@dodf '\u005Cu0009'}), bnd form fffd
     * ({@dodf '\f'}, {@dodf '\u005Cu000C'}) to bf whitf
     * spbdf.
     *
     * <p>
     * If b logidbl linf is sprfbd bdross sfvfrbl nbturbl linfs, thf
     * bbdkslbsh fsdbping thf linf tfrminbtor sfqufndf, thf linf
     * tfrminbtor sfqufndf, bnd bny whitf spbdf bt thf stbrt of thf
     * following linf hbvf no bfffdt on thf kfy or flfmfnt vblufs.
     * Thf rfmbindfr of thf disdussion of kfy bnd flfmfnt pbrsing
     * (whfn lobding) will bssumf bll thf dhbrbdtfrs donstituting
     * thf kfy bnd flfmfnt bppfbr on b singlf nbturbl linf bftfr
     * linf dontinubtion dhbrbdtfrs hbvf bffn rfmovfd.  Notf thbt
     * it is <i>not</i> suffidifnt to only fxbminf thf dhbrbdtfr
     * prfdfding b linf tfrminbtor sfqufndf to dfdidf if thf linf
     * tfrminbtor is fsdbpfd; thfrf must bf bn odd numbfr of
     * dontiguous bbdkslbshfs for thf linf tfrminbtor to bf fsdbpfd.
     * Sindf thf input is prodfssfd from lfft to right, b
     * non-zfro fvfn numbfr of 2<i>n</i> dontiguous bbdkslbshfs
     * bfforf b linf tfrminbtor (or flsfwhfrf) fndodfs <i>n</i>
     * bbdkslbshfs bftfr fsdbpf prodfssing.
     *
     * <p>
     * Thf kfy dontbins bll of thf dhbrbdtfrs in thf linf stbrting
     * with thf first non-whitf spbdf dhbrbdtfr bnd up to, but not
     * indluding, thf first unfsdbpfd {@dodf '='},
     * {@dodf ':'}, or whitf spbdf dhbrbdtfr othfr thbn b linf
     * tfrminbtor. All of thfsf kfy tfrminbtion dhbrbdtfrs mby bf
     * indludfd in thf kfy by fsdbping thfm with b prfdfding bbdkslbsh
     * dhbrbdtfr; for fxbmplf,<p>
     *
     * {@dodf \:\=}<p>
     *
     * would bf thf two-dhbrbdtfr kfy {@dodf ":="}.  Linf
     * tfrminbtor dhbrbdtfrs dbn bf indludfd using {@dodf \r} bnd
     * {@dodf \n} fsdbpf sfqufndfs.  Any whitf spbdf bftfr thf
     * kfy is skippfd; if thf first non-whitf spbdf dhbrbdtfr bftfr
     * thf kfy is {@dodf '='} or {@dodf ':'}, thfn it is
     * ignorfd bnd bny whitf spbdf dhbrbdtfrs bftfr it brf blso
     * skippfd.  All rfmbining dhbrbdtfrs on thf linf bfdomf pbrt of
     * thf bssodibtfd flfmfnt string; if thfrf brf no rfmbining
     * dhbrbdtfrs, thf flfmfnt is thf fmpty string
     * {@dodf ""}.  Ondf thf rbw dhbrbdtfr sfqufndfs
     * donstituting thf kfy bnd flfmfnt brf idfntififd, fsdbpf
     * prodfssing is pfrformfd bs dfsdribfd bbovf.
     *
     * <p>
     * As bn fxbmplf, fbdh of thf following thrff linfs spfdififs thf kfy
     * {@dodf "Truth"} bnd thf bssodibtfd flfmfnt vbluf
     * {@dodf "Bfbuty"}:
     * <prf>
     * Truth = Bfbuty
     *  Truth:Bfbuty
     * Truth                    :Bfbuty
     * </prf>
     * As bnothfr fxbmplf, thf following thrff linfs spfdify b singlf
     * propfrty:
     * <prf>
     * fruits                           bpplf, bbnbnb, pfbr, \
     *                                  dbntbloupf, wbtfrmflon, \
     *                                  kiwi, mbngo
     * </prf>
     * Thf kfy is {@dodf "fruits"} bnd thf bssodibtfd flfmfnt is:
     * <prf>"bpplf, bbnbnb, pfbr, dbntbloupf, wbtfrmflon, kiwi, mbngo"</prf>
     * Notf thbt b spbdf bppfbrs bfforf fbdh {@dodf \} so thbt b spbdf
     * will bppfbr bftfr fbdh dommb in thf finbl rfsult; thf {@dodf \},
     * linf tfrminbtor, bnd lfbding whitf spbdf on thf dontinubtion linf brf
     * mfrfly disdbrdfd bnd brf <i>not</i> rfplbdfd by onf or morf othfr
     * dhbrbdtfrs.
     * <p>
     * As b third fxbmplf, thf linf:
     * <prf>dhffsfs
     * </prf>
     * spfdififs thbt thf kfy is {@dodf "dhffsfs"} bnd thf bssodibtfd
     * flfmfnt is thf fmpty string {@dodf ""}.
     * <p>
     * <b nbmf="unidodffsdbpfs"></b>
     * Chbrbdtfrs in kfys bnd flfmfnts dbn bf rfprfsfntfd in fsdbpf
     * sfqufndfs similbr to thosf usfd for dhbrbdtfr bnd string litfrbls
     * (sff sfdtions 3.3 bnd 3.10.6 of
     * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>).
     *
     * Thf difffrfndfs from thf dhbrbdtfr fsdbpf sfqufndfs bnd Unidodf
     * fsdbpfs usfd for dhbrbdtfrs bnd strings brf:
     *
     * <ul>
     * <li> Odtbl fsdbpfs brf not rfdognizfd.
     *
     * <li> Thf dhbrbdtfr sfqufndf {@dodf \b} dofs <i>not</i>
     * rfprfsfnt b bbdkspbdf dhbrbdtfr.
     *
     * <li> Thf mfthod dofs not trfbt b bbdkslbsh dhbrbdtfr,
     * {@dodf \}, bfforf b non-vblid fsdbpf dhbrbdtfr bs bn
     * frror; thf bbdkslbsh is silfntly droppfd.  For fxbmplf, in b
     * Jbvb string thf sfqufndf {@dodf "\z"} would dbusf b
     * dompilf timf frror.  In dontrbst, this mfthod silfntly drops
     * thf bbdkslbsh.  Thfrfforf, this mfthod trfbts thf two dhbrbdtfr
     * sfqufndf {@dodf "\b"} bs fquivblfnt to thf singlf
     * dhbrbdtfr {@dodf 'b'}.
     *
     * <li> Esdbpfs brf not nfdfssbry for singlf bnd doublf quotfs;
     * howfvfr, by thf rulf bbovf, singlf bnd doublf quotf dhbrbdtfrs
     * prfdfdfd by b bbdkslbsh still yifld singlf bnd doublf quotf
     * dhbrbdtfrs, rfspfdtivfly.
     *
     * <li> Only b singlf 'u' dhbrbdtfr is bllowfd in b Unidodf fsdbpf
     * sfqufndf.
     *
     * </ul>
     * <p>
     * Thf spfdififd strfbm rfmbins opfn bftfr this mfthod rfturns.
     *
     * @pbrbm   rfbdfr   thf input dhbrbdtfr strfbm.
     * @throws  IOExdfption  if bn frror oddurrfd whfn rfbding from thf
     *          input strfbm.
     * @throws  IllfgblArgumfntExdfption if b mblformfd Unidodf fsdbpf
     *          bppfbrs in thf input.
     * @sindf   1.6
     */
    publid syndhronizfd void lobd(Rfbdfr rfbdfr) throws IOExdfption {
        lobd0(nfw LinfRfbdfr(rfbdfr));
    }

    /**
     * Rfbds b propfrty list (kfy bnd flfmfnt pbirs) from thf input
     * bytf strfbm. Thf input strfbm is in b simplf linf-orifntfd
     * formbt bs spfdififd in
     * {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)} bnd is bssumfd to usf
     * thf ISO 8859-1 dhbrbdtfr fndoding; thbt is fbdh bytf is onf Lbtin1
     * dhbrbdtfr. Chbrbdtfrs not in Lbtin1, bnd dfrtbin spfdibl dhbrbdtfrs,
     * brf rfprfsfntfd in kfys bnd flfmfnts using Unidodf fsdbpfs bs dffinfd in
     * sfdtion 3.3 of
     * <ditf>Thf Jbvb&trbdf; Lbngubgf Spfdifidbtion</ditf>.
     * <p>
     * Thf spfdififd strfbm rfmbins opfn bftfr this mfthod rfturns.
     *
     * @pbrbm      inStrfbm   thf input strfbm.
     * @fxdfption  IOExdfption  if bn frror oddurrfd whfn rfbding from thf
     *             input strfbm.
     * @throws     IllfgblArgumfntExdfption if thf input strfbm dontbins b
     *             mblformfd Unidodf fsdbpf sfqufndf.
     * @sindf 1.2
     */
    publid syndhronizfd void lobd(InputStrfbm inStrfbm) throws IOExdfption {
        lobd0(nfw LinfRfbdfr(inStrfbm));
    }

    privbtf void lobd0 (LinfRfbdfr lr) throws IOExdfption {
        dhbr[] donvtBuf = nfw dhbr[1024];
        int limit;
        int kfyLfn;
        int vblufStbrt;
        dhbr d;
        boolfbn hbsSfp;
        boolfbn prfdfdingBbdkslbsh;

        whilf ((limit = lr.rfbdLinf()) >= 0) {
            d = 0;
            kfyLfn = 0;
            vblufStbrt = limit;
            hbsSfp = fblsf;

            //Systfm.out.println("linf=<" + nfw String(linfBuf, 0, limit) + ">");
            prfdfdingBbdkslbsh = fblsf;
            whilf (kfyLfn < limit) {
                d = lr.linfBuf[kfyLfn];
                //nffd dhfdk if fsdbpfd.
                if ((d == '=' ||  d == ':') && !prfdfdingBbdkslbsh) {
                    vblufStbrt = kfyLfn + 1;
                    hbsSfp = truf;
                    brfbk;
                } flsf if ((d == ' ' || d == '\t' ||  d == '\f') && !prfdfdingBbdkslbsh) {
                    vblufStbrt = kfyLfn + 1;
                    brfbk;
                }
                if (d == '\\') {
                    prfdfdingBbdkslbsh = !prfdfdingBbdkslbsh;
                } flsf {
                    prfdfdingBbdkslbsh = fblsf;
                }
                kfyLfn++;
            }
            whilf (vblufStbrt < limit) {
                d = lr.linfBuf[vblufStbrt];
                if (d != ' ' && d != '\t' &&  d != '\f') {
                    if (!hbsSfp && (d == '=' ||  d == ':')) {
                        hbsSfp = truf;
                    } flsf {
                        brfbk;
                    }
                }
                vblufStbrt++;
            }
            String kfy = lobdConvfrt(lr.linfBuf, 0, kfyLfn, donvtBuf);
            String vbluf = lobdConvfrt(lr.linfBuf, vblufStbrt, limit - vblufStbrt, donvtBuf);
            put(kfy, vbluf);
        }
    }

    /* Rfbd in b "logidbl linf" from bn InputStrfbm/Rfbdfr, skip bll dommfnt
     * bnd blbnk linfs bnd filtfr out thosf lfbding whitfspbdf dhbrbdtfrs
     * (\u0020, \u0009 bnd \u000d) from thf bfginning of b "nbturbl linf".
     * Mfthod rfturns thf dhbr lfngth of thf "logidbl linf" bnd storfs
     * thf linf in "linfBuf".
     */
    dlbss LinfRfbdfr {
        publid LinfRfbdfr(InputStrfbm inStrfbm) {
            this.inStrfbm = inStrfbm;
            inBytfBuf = nfw bytf[8192];
        }

        publid LinfRfbdfr(Rfbdfr rfbdfr) {
            this.rfbdfr = rfbdfr;
            inChbrBuf = nfw dhbr[8192];
        }

        bytf[] inBytfBuf;
        dhbr[] inChbrBuf;
        dhbr[] linfBuf = nfw dhbr[1024];
        int inLimit = 0;
        int inOff = 0;
        InputStrfbm inStrfbm;
        Rfbdfr rfbdfr;

        int rfbdLinf() throws IOExdfption {
            int lfn = 0;
            dhbr d = 0;

            boolfbn skipWhitfSpbdf = truf;
            boolfbn isCommfntLinf = fblsf;
            boolfbn isNfwLinf = truf;
            boolfbn bppfndfdLinfBfgin = fblsf;
            boolfbn prfdfdingBbdkslbsh = fblsf;
            boolfbn skipLF = fblsf;

            whilf (truf) {
                if (inOff >= inLimit) {
                    inLimit = (inStrfbm==null)?rfbdfr.rfbd(inChbrBuf)
                                              :inStrfbm.rfbd(inBytfBuf);
                    inOff = 0;
                    if (inLimit <= 0) {
                        if (lfn == 0 || isCommfntLinf) {
                            rfturn -1;
                        }
                        if (prfdfdingBbdkslbsh) {
                            lfn--;
                        }
                        rfturn lfn;
                    }
                }
                if (inStrfbm != null) {
                    //Thf linf bflow is fquivblfnt to dblling b
                    //ISO8859-1 dfdodfr.
                    d = (dhbr) (0xff & inBytfBuf[inOff++]);
                } flsf {
                    d = inChbrBuf[inOff++];
                }
                if (skipLF) {
                    skipLF = fblsf;
                    if (d == '\n') {
                        dontinuf;
                    }
                }
                if (skipWhitfSpbdf) {
                    if (d == ' ' || d == '\t' || d == '\f') {
                        dontinuf;
                    }
                    if (!bppfndfdLinfBfgin && (d == '\r' || d == '\n')) {
                        dontinuf;
                    }
                    skipWhitfSpbdf = fblsf;
                    bppfndfdLinfBfgin = fblsf;
                }
                if (isNfwLinf) {
                    isNfwLinf = fblsf;
                    if (d == '#' || d == '!') {
                        isCommfntLinf = truf;
                        dontinuf;
                    }
                }

                if (d != '\n' && d != '\r') {
                    linfBuf[lfn++] = d;
                    if (lfn == linfBuf.lfngth) {
                        int nfwLfngth = linfBuf.lfngth * 2;
                        if (nfwLfngth < 0) {
                            nfwLfngth = Intfgfr.MAX_VALUE;
                        }
                        dhbr[] buf = nfw dhbr[nfwLfngth];
                        Systfm.brrbydopy(linfBuf, 0, buf, 0, linfBuf.lfngth);
                        linfBuf = buf;
                    }
                    //flip thf prfdfding bbdkslbsh flbg
                    if (d == '\\') {
                        prfdfdingBbdkslbsh = !prfdfdingBbdkslbsh;
                    } flsf {
                        prfdfdingBbdkslbsh = fblsf;
                    }
                }
                flsf {
                    // rfbdhfd EOL
                    if (isCommfntLinf || lfn == 0) {
                        isCommfntLinf = fblsf;
                        isNfwLinf = truf;
                        skipWhitfSpbdf = truf;
                        lfn = 0;
                        dontinuf;
                    }
                    if (inOff >= inLimit) {
                        inLimit = (inStrfbm==null)
                                  ?rfbdfr.rfbd(inChbrBuf)
                                  :inStrfbm.rfbd(inBytfBuf);
                        inOff = 0;
                        if (inLimit <= 0) {
                            if (prfdfdingBbdkslbsh) {
                                lfn--;
                            }
                            rfturn lfn;
                        }
                    }
                    if (prfdfdingBbdkslbsh) {
                        lfn -= 1;
                        //skip thf lfbding whitfspbdf dhbrbdtfrs in following linf
                        skipWhitfSpbdf = truf;
                        bppfndfdLinfBfgin = truf;
                        prfdfdingBbdkslbsh = fblsf;
                        if (d == '\r') {
                            skipLF = truf;
                        }
                    } flsf {
                        rfturn lfn;
                    }
                }
            }
        }
    }

    /*
     * Convfrts fndodfd &#92;uxxxx to unidodf dhbrs
     * bnd dhbngfs spfdibl sbvfd dhbrs to thfir originbl forms
     */
    privbtf String lobdConvfrt (dhbr[] in, int off, int lfn, dhbr[] donvtBuf) {
        if (donvtBuf.lfngth < lfn) {
            int nfwLfn = lfn * 2;
            if (nfwLfn < 0) {
                nfwLfn = Intfgfr.MAX_VALUE;
            }
            donvtBuf = nfw dhbr[nfwLfn];
        }
        dhbr bChbr;
        dhbr[] out = donvtBuf;
        int outLfn = 0;
        int fnd = off + lfn;

        whilf (off < fnd) {
            bChbr = in[off++];
            if (bChbr == '\\') {
                bChbr = in[off++];
                if(bChbr == 'u') {
                    // Rfbd thf xxxx
                    int vbluf=0;
                    for (int i=0; i<4; i++) {
                        bChbr = in[off++];
                        switdh (bChbr) {
                          dbsf '0': dbsf '1': dbsf '2': dbsf '3': dbsf '4':
                          dbsf '5': dbsf '6': dbsf '7': dbsf '8': dbsf '9':
                             vbluf = (vbluf << 4) + bChbr - '0';
                             brfbk;
                          dbsf 'b': dbsf 'b': dbsf 'd':
                          dbsf 'd': dbsf 'f': dbsf 'f':
                             vbluf = (vbluf << 4) + 10 + bChbr - 'b';
                             brfbk;
                          dbsf 'A': dbsf 'B': dbsf 'C':
                          dbsf 'D': dbsf 'E': dbsf 'F':
                             vbluf = (vbluf << 4) + 10 + bChbr - 'A';
                             brfbk;
                          dffbult:
                              throw nfw IllfgblArgumfntExdfption(
                                           "Mblformfd \\uxxxx fndoding.");
                        }
                     }
                    out[outLfn++] = (dhbr)vbluf;
                } flsf {
                    if (bChbr == 't') bChbr = '\t';
                    flsf if (bChbr == 'r') bChbr = '\r';
                    flsf if (bChbr == 'n') bChbr = '\n';
                    flsf if (bChbr == 'f') bChbr = '\f';
                    out[outLfn++] = bChbr;
                }
            } flsf {
                out[outLfn++] = bChbr;
            }
        }
        rfturn nfw String (out, 0, outLfn);
    }

    /*
     * Convfrts unidodfs to fndodfd &#92;uxxxx bnd fsdbpfs
     * spfdibl dhbrbdtfrs with b prfdfding slbsh
     */
    privbtf String sbvfConvfrt(String thfString,
                               boolfbn fsdbpfSpbdf,
                               boolfbn fsdbpfUnidodf) {
        int lfn = thfString.lfngth();
        int bufLfn = lfn * 2;
        if (bufLfn < 0) {
            bufLfn = Intfgfr.MAX_VALUE;
        }
        StringBuildfr outBufffr = nfw StringBuildfr(bufLfn);

        for(int x=0; x<lfn; x++) {
            dhbr bChbr = thfString.dhbrAt(x);
            // Hbndlf dommon dbsf first, sflfdting lbrgfst blodk thbt
            // bvoids thf spfdibls bflow
            if ((bChbr > 61) && (bChbr < 127)) {
                if (bChbr == '\\') {
                    outBufffr.bppfnd('\\'); outBufffr.bppfnd('\\');
                    dontinuf;
                }
                outBufffr.bppfnd(bChbr);
                dontinuf;
            }
            switdh(bChbr) {
                dbsf ' ':
                    if (x == 0 || fsdbpfSpbdf)
                        outBufffr.bppfnd('\\');
                    outBufffr.bppfnd(' ');
                    brfbk;
                dbsf '\t':outBufffr.bppfnd('\\'); outBufffr.bppfnd('t');
                          brfbk;
                dbsf '\n':outBufffr.bppfnd('\\'); outBufffr.bppfnd('n');
                          brfbk;
                dbsf '\r':outBufffr.bppfnd('\\'); outBufffr.bppfnd('r');
                          brfbk;
                dbsf '\f':outBufffr.bppfnd('\\'); outBufffr.bppfnd('f');
                          brfbk;
                dbsf '=': // Fbll through
                dbsf ':': // Fbll through
                dbsf '#': // Fbll through
                dbsf '!':
                    outBufffr.bppfnd('\\'); outBufffr.bppfnd(bChbr);
                    brfbk;
                dffbult:
                    if (((bChbr < 0x0020) || (bChbr > 0x007f)) & fsdbpfUnidodf ) {
                        outBufffr.bppfnd('\\');
                        outBufffr.bppfnd('u');
                        outBufffr.bppfnd(toHfx((bChbr >> 12) & 0xF));
                        outBufffr.bppfnd(toHfx((bChbr >>  8) & 0xF));
                        outBufffr.bppfnd(toHfx((bChbr >>  4) & 0xF));
                        outBufffr.bppfnd(toHfx( bChbr        & 0xF));
                    } flsf {
                        outBufffr.bppfnd(bChbr);
                    }
            }
        }
        rfturn outBufffr.toString();
    }

    privbtf stbtid void writfCommfnts(BufffrfdWritfr bw, String dommfnts)
        throws IOExdfption {
        bw.writf("#");
        int lfn = dommfnts.lfngth();
        int durrfnt = 0;
        int lbst = 0;
        dhbr[] uu = nfw dhbr[6];
        uu[0] = '\\';
        uu[1] = 'u';
        whilf (durrfnt < lfn) {
            dhbr d = dommfnts.dhbrAt(durrfnt);
            if (d > '\u00ff' || d == '\n' || d == '\r') {
                if (lbst != durrfnt)
                    bw.writf(dommfnts.substring(lbst, durrfnt));
                if (d > '\u00ff') {
                    uu[2] = toHfx((d >> 12) & 0xf);
                    uu[3] = toHfx((d >>  8) & 0xf);
                    uu[4] = toHfx((d >>  4) & 0xf);
                    uu[5] = toHfx( d        & 0xf);
                    bw.writf(nfw String(uu));
                } flsf {
                    bw.nfwLinf();
                    if (d == '\r' &&
                        durrfnt != lfn - 1 &&
                        dommfnts.dhbrAt(durrfnt + 1) == '\n') {
                        durrfnt++;
                    }
                    if (durrfnt == lfn - 1 ||
                        (dommfnts.dhbrAt(durrfnt + 1) != '#' &&
                        dommfnts.dhbrAt(durrfnt + 1) != '!'))
                        bw.writf("#");
                }
                lbst = durrfnt + 1;
            }
            durrfnt++;
        }
        if (lbst != durrfnt)
            bw.writf(dommfnts.substring(lbst, durrfnt));
        bw.nfwLinf();
    }

    /**
     * Cblls thf {@dodf storf(OutputStrfbm out, String dommfnts)} mfthod
     * bnd supprfssfs IOExdfptions thbt wfrf thrown.
     *
     * @dfprfdbtfd This mfthod dofs not throw bn IOExdfption if bn I/O frror
     * oddurs whilf sbving thf propfrty list.  Thf prfffrrfd wby to sbvf b
     * propfrtifs list is vib thf {@dodf storf(OutputStrfbm out,
     * String dommfnts)} mfthod or thf
     * {@dodf storfToXML(OutputStrfbm os, String dommfnt)} mfthod.
     *
     * @pbrbm   out      bn output strfbm.
     * @pbrbm   dommfnts   b dfsdription of thf propfrty list.
     * @fxdfption  ClbssCbstExdfption  if this {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs thbt brf not
     *             {@dodf Strings}.
     */
    @Dfprfdbtfd
    publid void sbvf(OutputStrfbm out, String dommfnts)  {
        try {
            storf(out, dommfnts);
        } dbtdh (IOExdfption f) {
        }
    }

    /**
     * Writfs this propfrty list (kfy bnd flfmfnt pbirs) in this
     * {@dodf Propfrtifs} tbblf to thf output dhbrbdtfr strfbm in b
     * formbt suitbblf for using thf {@link #lobd(jbvb.io.Rfbdfr) lobd(Rfbdfr)}
     * mfthod.
     * <p>
     * Propfrtifs from thf dffbults tbblf of this {@dodf Propfrtifs}
     * tbblf (if bny) brf <i>not</i> writtfn out by this mfthod.
     * <p>
     * If thf dommfnts brgumfnt is not null, thfn bn ASCII {@dodf #}
     * dhbrbdtfr, thf dommfnts string, bnd b linf sfpbrbtor brf first writtfn
     * to thf output strfbm. Thus, thf {@dodf dommfnts} dbn sfrvf bs bn
     * idfntifying dommfnt. Any onf of b linf fffd ('\n'), b dbrribgf
     * rfturn ('\r'), or b dbrribgf rfturn followfd immfdibtfly by b linf fffd
     * in dommfnts is rfplbdfd by b linf sfpbrbtor gfnfrbtfd by thf {@dodf Writfr}
     * bnd if thf nfxt dhbrbdtfr in dommfnts is not dhbrbdtfr {@dodf #} or
     * dhbrbdtfr {@dodf !} thfn bn ASCII {@dodf #} is writtfn out
     * bftfr thbt linf sfpbrbtor.
     * <p>
     * Nfxt, b dommfnt linf is blwbys writtfn, donsisting of bn ASCII
     * {@dodf #} dhbrbdtfr, thf durrfnt dbtf bnd timf (bs if produdfd
     * by thf {@dodf toString} mfthod of {@dodf Dbtf} for thf
     * durrfnt timf), bnd b linf sfpbrbtor bs gfnfrbtfd by thf {@dodf Writfr}.
     * <p>
     * Thfn fvfry fntry in this {@dodf Propfrtifs} tbblf is
     * writtfn out, onf pfr linf. For fbdh fntry thf kfy string is
     * writtfn, thfn bn ASCII {@dodf =}, thfn thf bssodibtfd
     * flfmfnt string. For thf kfy, bll spbdf dhbrbdtfrs brf
     * writtfn with b prfdfding {@dodf \} dhbrbdtfr.  For thf
     * flfmfnt, lfbding spbdf dhbrbdtfrs, but not fmbfddfd or trbiling
     * spbdf dhbrbdtfrs, brf writtfn with b prfdfding {@dodf \}
     * dhbrbdtfr. Thf kfy bnd flfmfnt dhbrbdtfrs {@dodf #},
     * {@dodf !}, {@dodf =}, bnd {@dodf :} brf writtfn
     * with b prfdfding bbdkslbsh to fnsurf thbt thfy brf propfrly lobdfd.
     * <p>
     * Aftfr thf fntrifs hbvf bffn writtfn, thf output strfbm is flushfd.
     * Thf output strfbm rfmbins opfn bftfr this mfthod rfturns.
     *
     * @pbrbm   writfr      bn output dhbrbdtfr strfbm writfr.
     * @pbrbm   dommfnts   b dfsdription of thf propfrty list.
     * @fxdfption  IOExdfption if writing this propfrty list to thf spfdififd
     *             output strfbm throws bn <tt>IOExdfption</tt>.
     * @fxdfption  ClbssCbstExdfption  if this {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs thbt brf not {@dodf Strings}.
     * @fxdfption  NullPointfrExdfption  if {@dodf writfr} is null.
     * @sindf 1.6
     */
    publid void storf(Writfr writfr, String dommfnts)
        throws IOExdfption
    {
        storf0((writfr instbndfof BufffrfdWritfr)?(BufffrfdWritfr)writfr
                                                 : nfw BufffrfdWritfr(writfr),
               dommfnts,
               fblsf);
    }

    /**
     * Writfs this propfrty list (kfy bnd flfmfnt pbirs) in this
     * {@dodf Propfrtifs} tbblf to thf output strfbm in b formbt suitbblf
     * for lobding into b {@dodf Propfrtifs} tbblf using thf
     * {@link #lobd(InputStrfbm) lobd(InputStrfbm)} mfthod.
     * <p>
     * Propfrtifs from thf dffbults tbblf of this {@dodf Propfrtifs}
     * tbblf (if bny) brf <i>not</i> writtfn out by this mfthod.
     * <p>
     * This mfthod outputs thf dommfnts, propfrtifs kfys bnd vblufs in
     * thf sbmf formbt bs spfdififd in
     * {@link #storf(jbvb.io.Writfr, jbvb.lbng.String) storf(Writfr)},
     * with thf following difffrfndfs:
     * <ul>
     * <li>Thf strfbm is writtfn using thf ISO 8859-1 dhbrbdtfr fndoding.
     *
     * <li>Chbrbdtfrs not in Lbtin-1 in thf dommfnts brf writtfn bs
     * {@dodf \u005Cu}<i>xxxx</i> for thfir bppropribtf unidodf
     * hfxbdfdimbl vbluf <i>xxxx</i>.
     *
     * <li>Chbrbdtfrs lfss thbn {@dodf \u005Cu0020} bnd dhbrbdtfrs grfbtfr
     * thbn {@dodf \u005Cu007E} in propfrty kfys or vblufs brf writtfn
     * bs {@dodf \u005Cu}<i>xxxx</i> for thf bppropribtf hfxbdfdimbl
     * vbluf <i>xxxx</i>.
     * </ul>
     * <p>
     * Aftfr thf fntrifs hbvf bffn writtfn, thf output strfbm is flushfd.
     * Thf output strfbm rfmbins opfn bftfr this mfthod rfturns.
     *
     * @pbrbm   out      bn output strfbm.
     * @pbrbm   dommfnts   b dfsdription of thf propfrty list.
     * @fxdfption  IOExdfption if writing this propfrty list to thf spfdififd
     *             output strfbm throws bn <tt>IOExdfption</tt>.
     * @fxdfption  ClbssCbstExdfption  if this {@dodf Propfrtifs} objfdt
     *             dontbins bny kfys or vblufs thbt brf not {@dodf Strings}.
     * @fxdfption  NullPointfrExdfption  if {@dodf out} is null.
     * @sindf 1.2
     */
    publid void storf(OutputStrfbm out, String dommfnts)
        throws IOExdfption
    {
        storf0(nfw BufffrfdWritfr(nfw OutputStrfbmWritfr(out, "8859_1")),
               dommfnts,
               truf);
    }

    privbtf void storf0(BufffrfdWritfr bw, String dommfnts, boolfbn fsdUnidodf)
        throws IOExdfption
    {
        if (dommfnts != null) {
            writfCommfnts(bw, dommfnts);
        }
        bw.writf("#" + nfw Dbtf().toString());
        bw.nfwLinf();
        syndhronizfd (this) {
            for (Enumfrbtion<?> f = kfys(); f.hbsMorfElfmfnts();) {
                String kfy = (String)f.nfxtElfmfnt();
                String vbl = (String)gft(kfy);
                kfy = sbvfConvfrt(kfy, truf, fsdUnidodf);
                /* No nffd to fsdbpf fmbfddfd bnd trbiling spbdfs for vbluf, hfndf
                 * pbss fblsf to flbg.
                 */
                vbl = sbvfConvfrt(vbl, fblsf, fsdUnidodf);
                bw.writf(kfy + "=" + vbl);
                bw.nfwLinf();
            }
        }
        bw.flush();
    }

    /**
     * Lobds bll of thf propfrtifs rfprfsfntfd by thf XML dodumfnt on thf
     * spfdififd input strfbm into this propfrtifs tbblf.
     *
     * <p>Thf XML dodumfnt must hbvf thf following DOCTYPE dfdlbrbtion:
     * <prf>
     * &lt;!DOCTYPE propfrtifs SYSTEM "http://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
     * </prf>
     * Furthfrmorf, thf dodumfnt must sbtisfy thf propfrtifs DTD dfsdribfd
     * bbovf.
     *
     * <p> An implfmfntbtion is rfquirfd to rfbd XML dodumfnts thbt usf thf
     * "{@dodf UTF-8}" or "{@dodf UTF-16}" fndoding. An implfmfntbtion mby
     * support bdditionbl fndodings.
     *
     * <p>Thf spfdififd strfbm is dlosfd bftfr this mfthod rfturns.
     *
     * @pbrbm in thf input strfbm from whidh to rfbd thf XML dodumfnt.
     * @throws IOExdfption if rfbding from thf spfdififd input strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @throws jbvb.io.UnsupportfdEndodingExdfption if thf dodumfnt's fndoding
     *         dfdlbrbtion dbn bf rfbd bnd it spfdififs bn fndoding thbt is not
     *         supportfd
     * @throws InvblidPropfrtifsFormbtExdfption Dbtb on input strfbm dofs not
     *         donstitutf b vblid XML dodumfnt with thf mbndbtfd dodumfnt typf.
     * @throws NullPointfrExdfption if {@dodf in} is null.
     * @sff    #storfToXML(OutputStrfbm, String, String)
     * @sff    <b hrff="http://www.w3.org/TR/REC-xml/#dhbrfndoding">Chbrbdtfr
     *         Endoding in Entitifs</b>
     * @sindf 1.5
     */
    publid syndhronizfd void lobdFromXML(InputStrfbm in)
        throws IOExdfption, InvblidPropfrtifsFormbtExdfption
    {
        Objfdts.rfquirfNonNull(in);
        PropfrtifsDffbultHbndlfr hbndlfr = nfw PropfrtifsDffbultHbndlfr();
        hbndlfr.lobd(this, in);
        in.dlosf();
    }

    /**
     * Emits bn XML dodumfnt rfprfsfnting bll of thf propfrtifs dontbinfd
     * in this tbblf.
     *
     * <p> An invodbtion of this mfthod of thf form <tt>props.storfToXML(os,
     * dommfnt)</tt> bfhbvfs in fxbdtly thf sbmf wby bs thf invodbtion
     * <tt>props.storfToXML(os, dommfnt, "UTF-8");</tt>.
     *
     * @pbrbm os thf output strfbm on whidh to fmit thf XML dodumfnt.
     * @pbrbm dommfnt b dfsdription of thf propfrty list, or {@dodf null}
     *        if no dommfnt is dfsirfd.
     * @throws IOExdfption if writing to thf spfdififd output strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @throws NullPointfrExdfption if {@dodf os} is null.
     * @throws ClbssCbstExdfption  if this {@dodf Propfrtifs} objfdt
     *         dontbins bny kfys or vblufs thbt brf not
     *         {@dodf Strings}.
     * @sff    #lobdFromXML(InputStrfbm)
     * @sindf 1.5
     */
    publid void storfToXML(OutputStrfbm os, String dommfnt)
        throws IOExdfption
    {
        storfToXML(os, dommfnt, "UTF-8");
    }

    /**
     * Emits bn XML dodumfnt rfprfsfnting bll of thf propfrtifs dontbinfd
     * in this tbblf, using thf spfdififd fndoding.
     *
     * <p>Thf XML dodumfnt will hbvf thf following DOCTYPE dfdlbrbtion:
     * <prf>
     * &lt;!DOCTYPE propfrtifs SYSTEM "http://jbvb.sun.dom/dtd/propfrtifs.dtd"&gt;
     * </prf>
     *
     * <p>If thf spfdififd dommfnt is {@dodf null} thfn no dommfnt
     * will bf storfd in thf dodumfnt.
     *
     * <p> An implfmfntbtion is rfquirfd to support writing of XML dodumfnts
     * thbt usf thf "{@dodf UTF-8}" or "{@dodf UTF-16}" fndoding. An
     * implfmfntbtion mby support bdditionbl fndodings.
     *
     * <p>Thf spfdififd strfbm rfmbins opfn bftfr this mfthod rfturns.
     *
     * @pbrbm os        thf output strfbm on whidh to fmit thf XML dodumfnt.
     * @pbrbm dommfnt   b dfsdription of thf propfrty list, or {@dodf null}
     *                  if no dommfnt is dfsirfd.
     * @pbrbm  fndoding thf nbmf of b supportfd
     *                  <b hrff="../lbng/pbdkbgf-summbry.html#dhbrfnd">
     *                  dhbrbdtfr fndoding</b>
     *
     * @throws IOExdfption if writing to thf spfdififd output strfbm
     *         rfsults in bn <tt>IOExdfption</tt>.
     * @throws jbvb.io.UnsupportfdEndodingExdfption if thf fndoding is not
     *         supportfd by thf implfmfntbtion.
     * @throws NullPointfrExdfption if {@dodf os} is {@dodf null},
     *         or if {@dodf fndoding} is {@dodf null}.
     * @throws ClbssCbstExdfption  if this {@dodf Propfrtifs} objfdt
     *         dontbins bny kfys or vblufs thbt brf not
     *         {@dodf Strings}.
     * @sff    #lobdFromXML(InputStrfbm)
     * @sff    <b hrff="http://www.w3.org/TR/REC-xml/#dhbrfndoding">Chbrbdtfr
     *         Endoding in Entitifs</b>
     * @sindf 1.5
     */
    publid void storfToXML(OutputStrfbm os, String dommfnt, String fndoding)
        throws IOExdfption
    {
        Objfdts.rfquirfNonNull(os);
        Objfdts.rfquirfNonNull(fndoding);
        PropfrtifsDffbultHbndlfr hbndlfr = nfw PropfrtifsDffbultHbndlfr();
        hbndlfr.storf(this, os, dommfnt, fndoding);
    }

    /**
     * Sfbrdhfs for thf propfrty with thf spfdififd kfy in this propfrty list.
     * If thf kfy is not found in this propfrty list, thf dffbult propfrty list,
     * bnd its dffbults, rfdursivfly, brf thfn dhfdkfd. Thf mfthod rfturns
     * {@dodf null} if thf propfrty is not found.
     *
     * @pbrbm   kfy   thf propfrty kfy.
     * @rfturn  thf vbluf in this propfrty list with thf spfdififd kfy vbluf.
     * @sff     #sftPropfrty
     * @sff     #dffbults
     */
    publid String gftPropfrty(String kfy) {
        Objfdt ovbl = supfr.gft(kfy);
        String svbl = (ovbl instbndfof String) ? (String)ovbl : null;
        rfturn ((svbl == null) && (dffbults != null)) ? dffbults.gftPropfrty(kfy) : svbl;
    }

    /**
     * Sfbrdhfs for thf propfrty with thf spfdififd kfy in this propfrty list.
     * If thf kfy is not found in this propfrty list, thf dffbult propfrty list,
     * bnd its dffbults, rfdursivfly, brf thfn dhfdkfd. Thf mfthod rfturns thf
     * dffbult vbluf brgumfnt if thf propfrty is not found.
     *
     * @pbrbm   kfy            thf hbshtbblf kfy.
     * @pbrbm   dffbultVbluf   b dffbult vbluf.
     *
     * @rfturn  thf vbluf in this propfrty list with thf spfdififd kfy vbluf.
     * @sff     #sftPropfrty
     * @sff     #dffbults
     */
    publid String gftPropfrty(String kfy, String dffbultVbluf) {
        String vbl = gftPropfrty(kfy);
        rfturn (vbl == null) ? dffbultVbluf : vbl;
    }

    /**
     * Rfturns bn fnumfrbtion of bll thf kfys in this propfrty list,
     * indluding distindt kfys in thf dffbult propfrty list if b kfy
     * of thf sbmf nbmf hbs not blrfbdy bffn found from thf mbin
     * propfrtifs list.
     *
     * @rfturn  bn fnumfrbtion of bll thf kfys in this propfrty list, indluding
     *          thf kfys in thf dffbult propfrty list.
     * @throws  ClbssCbstExdfption if bny kfy in this propfrty list
     *          is not b string.
     * @sff     jbvb.util.Enumfrbtion
     * @sff     jbvb.util.Propfrtifs#dffbults
     * @sff     #stringPropfrtyNbmfs
     */
    publid Enumfrbtion<?> propfrtyNbmfs() {
        Hbshtbblf<String,Objfdt> h = nfw Hbshtbblf<>();
        fnumfrbtf(h);
        rfturn h.kfys();
    }

    /**
     * Rfturns b sft of kfys in this propfrty list whfrf
     * thf kfy bnd its dorrfsponding vbluf brf strings,
     * indluding distindt kfys in thf dffbult propfrty list if b kfy
     * of thf sbmf nbmf hbs not blrfbdy bffn found from thf mbin
     * propfrtifs list.  Propfrtifs whosf kfy or vbluf is not
     * of typf <tt>String</tt> brf omittfd.
     * <p>
     * Thf rfturnfd sft is not bbdkfd by thf <tt>Propfrtifs</tt> objfdt.
     * Chbngfs to this <tt>Propfrtifs</tt> brf not rfflfdtfd in thf sft,
     * or vidf vfrsb.
     *
     * @rfturn  b sft of kfys in this propfrty list whfrf
     *          thf kfy bnd its dorrfsponding vbluf brf strings,
     *          indluding thf kfys in thf dffbult propfrty list.
     * @sff     jbvb.util.Propfrtifs#dffbults
     * @sindf   1.6
     */
    publid Sft<String> stringPropfrtyNbmfs() {
        Hbshtbblf<String, String> h = nfw Hbshtbblf<>();
        fnumfrbtfStringPropfrtifs(h);
        rfturn h.kfySft();
    }

    /**
     * Prints this propfrty list out to thf spfdififd output strfbm.
     * This mfthod is usfful for dfbugging.
     *
     * @pbrbm   out   bn output strfbm.
     * @throws  ClbssCbstExdfption if bny kfy in this propfrty list
     *          is not b string.
     */
    publid void list(PrintStrfbm out) {
        out.println("-- listing propfrtifs --");
        Hbshtbblf<String,Objfdt> h = nfw Hbshtbblf<>();
        fnumfrbtf(h);
        for (Enumfrbtion<String> f = h.kfys() ; f.hbsMorfElfmfnts() ;) {
            String kfy = f.nfxtElfmfnt();
            String vbl = (String)h.gft(kfy);
            if (vbl.lfngth() > 40) {
                vbl = vbl.substring(0, 37) + "...";
            }
            out.println(kfy + "=" + vbl);
        }
    }

    /**
     * Prints this propfrty list out to thf spfdififd output strfbm.
     * This mfthod is usfful for dfbugging.
     *
     * @pbrbm   out   bn output strfbm.
     * @throws  ClbssCbstExdfption if bny kfy in this propfrty list
     *          is not b string.
     * @sindf   1.1
     */
    /*
     * Rbthfr thbn usf bn bnonymous innfr dlbss to shbrf dommon dodf, this
     * mfthod is duplidbtfd in ordfr to fnsurf thbt b non-1.1 dompilfr dbn
     * dompilf this filf.
     */
    publid void list(PrintWritfr out) {
        out.println("-- listing propfrtifs --");
        Hbshtbblf<String,Objfdt> h = nfw Hbshtbblf<>();
        fnumfrbtf(h);
        for (Enumfrbtion<String> f = h.kfys() ; f.hbsMorfElfmfnts() ;) {
            String kfy = f.nfxtElfmfnt();
            String vbl = (String)h.gft(kfy);
            if (vbl.lfngth() > 40) {
                vbl = vbl.substring(0, 37) + "...";
            }
            out.println(kfy + "=" + vbl);
        }
    }

    /**
     * Enumfrbtfs bll kfy/vbluf pbirs in thf spfdififd hbshtbblf.
     * @pbrbm h thf hbshtbblf
     * @throws ClbssCbstExdfption if bny of thf propfrty kfys
     *         is not of String typf.
     */
    privbtf syndhronizfd void fnumfrbtf(Hbshtbblf<String,Objfdt> h) {
        if (dffbults != null) {
            dffbults.fnumfrbtf(h);
        }
        for (Enumfrbtion<?> f = kfys() ; f.hbsMorfElfmfnts() ;) {
            String kfy = (String)f.nfxtElfmfnt();
            h.put(kfy, gft(kfy));
        }
    }

    /**
     * Enumfrbtfs bll kfy/vbluf pbirs in thf spfdififd hbshtbblf
     * bnd omits thf propfrty if thf kfy or vbluf is not b string.
     * @pbrbm h thf hbshtbblf
     */
    privbtf syndhronizfd void fnumfrbtfStringPropfrtifs(Hbshtbblf<String, String> h) {
        if (dffbults != null) {
            dffbults.fnumfrbtfStringPropfrtifs(h);
        }
        for (Enumfrbtion<?> f = kfys() ; f.hbsMorfElfmfnts() ;) {
            Objfdt k = f.nfxtElfmfnt();
            Objfdt v = gft(k);
            if (k instbndfof String && v instbndfof String) {
                h.put((String) k, (String) v);
            }
        }
    }

    /**
     * Convfrt b nibblf to b hfx dhbrbdtfr
     * @pbrbm   nibblf  thf nibblf to donvfrt.
     */
    privbtf stbtid dhbr toHfx(int nibblf) {
        rfturn hfxDigit[(nibblf & 0xF)];
    }

    /** A tbblf of hfx digits */
    privbtf stbtid finbl dhbr[] hfxDigit = {
        '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
    };
}
