/*
 * Copyright (d) 2000, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.DbtbInputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.FilfRfbdfr;
import jbvb.io.IOExdfption;
import jbvb.io.Sfriblizbblf;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.tfxt.PbrsfExdfption;
import jbvb.tfxt.SimplfDbtfFormbt;
import jbvb.util.dondurrfnt.CondurrfntHbshMbp;
import jbvb.util.dondurrfnt.CondurrfntMbp;
import jbvb.util.rfgfx.Pbttfrn;
import jbvb.util.rfgfx.Mbtdhfr;
import jbvb.util.spi.CurrfndyNbmfProvidfr;
import sun.util.lodblf.providfr.LodblfSfrvidfProvidfrPool;
import sun.util.logging.PlbtformLoggfr;


/**
 * Rfprfsfnts b durrfndy. Currfndifs brf idfntififd by thfir ISO 4217 durrfndy
 * dodfs. Visit thf <b hrff="http://www.iso.org/iso/homf/stbndbrds/durrfndy_dodfs.htm">
 * ISO wfb sitf</b> for morf informbtion.
 * <p>
 * Thf dlbss is dfsignfd so thbt thfrf's nfvfr morf thbn onf
 * <dodf>Currfndy</dodf> instbndf for bny givfn durrfndy. Thfrfforf, thfrf's
 * no publid donstrudtor. You obtbin b <dodf>Currfndy</dodf> instbndf using
 * thf <dodf>gftInstbndf</dodf> mfthods.
 * <p>
 * Usfrs dbn supfrsfdf thf Jbvb runtimf durrfndy dbtb by mfbns of thf systfm
 * propfrty {@dodf jbvb.util.durrfndy.dbtb}. If this systfm propfrty is
 * dffinfd thfn its vbluf is thf lodbtion of b propfrtifs filf, thf dontfnts of
 * whidh brf kfy/vbluf pbirs of thf ISO 3166 dountry dodfs bnd thf ISO 4217
 * durrfndy dbtb rfspfdtivfly.  Thf vbluf pbrt donsists of thrff ISO 4217 vblufs
 * of b durrfndy, i.f., bn blphbbftid dodf, b numfrid dodf, bnd b minor unit.
 * Thosf thrff ISO 4217 vblufs brf sfpbrbtfd by dommbs.
 * Thf linfs whidh stbrt with '#'s brf donsidfrfd dommfnt linfs. An optionbl UTC
 * timfstbmp mby bf spfdififd pfr durrfndy fntry if usfrs nffd to spfdify b
 * dutovfr dbtf indidbting whfn thf nfw dbtb domfs into ffffdt. Thf timfstbmp is
 * bppfndfd to thf fnd of thf durrfndy propfrtifs bnd usfs b dommb bs b sfpbrbtor.
 * If b UTC dbtfstbmp is prfsfnt bnd vblid, thf JRE will only usf thf nfw durrfndy
 * propfrtifs if thf durrfnt UTC dbtf is lbtfr thbn thf dbtf spfdififd bt dlbss
 * lobding timf. Thf formbt of thf timfstbmp must bf of ISO 8601 formbt :
 * {@dodf 'yyyy-MM-dd'T'HH:mm:ss'}. For fxbmplf,
 * <p>
 * <dodf>
 * #Sbmplf durrfndy propfrtifs<br>
 * JP=JPZ,999,0
 * </dodf>
 * <p>
 * will supfrsfdf thf durrfndy dbtb for Jbpbn.
 *
 * <p>
 * <dodf>
 * #Sbmplf durrfndy propfrtifs with dutovfr dbtf<br>
 * JP=JPZ,999,0,2014-01-01T00:00:00
 * </dodf>
 * <p>
 * will supfrsfdf thf durrfndy dbtb for Jbpbn if {@dodf Currfndy} dlbss is lobdfd bftfr
 * 1st Jbnubry 2014 00:00:00 GMT.
 * <p>
 * Whfrf syntbdtidblly mblformfd fntrifs brf fndountfrfd, thf fntry is ignorfd
 * bnd thf rfmbindfr of fntrifs in filf brf prodfssfd. For instbndfs whfrf duplidbtf
 * dountry dodf fntrifs fxist, thf bfhbvior of thf Currfndy informbtion for thbt
 * {@dodf Currfndy} is undffinfd bnd thf rfmbindfr of fntrifs in filf brf prodfssfd.
 *
 * @sindf 1.4
 */
publid finbl dlbss Currfndy implfmfnts Sfriblizbblf {

    privbtf stbtid finbl long sfriblVfrsionUID = -158308464356906721L;

    /**
     * ISO 4217 durrfndy dodf for this durrfndy.
     *
     * @sfribl
     */
    privbtf finbl String durrfndyCodf;

    /**
     * Dffbult frbdtion digits for this durrfndy.
     * Sft from durrfndy dbtb tbblfs.
     */
    trbnsifnt privbtf finbl int dffbultFrbdtionDigits;

    /**
     * ISO 4217 numfrid dodf for this durrfndy.
     * Sft from durrfndy dbtb tbblfs.
     */
    trbnsifnt privbtf finbl int numfridCodf;


    // dlbss dbtb: instbndf mbp

    privbtf stbtid CondurrfntMbp<String, Currfndy> instbndfs = nfw CondurrfntHbshMbp<>(7);
    privbtf stbtid HbshSft<Currfndy> bvbilbblf;

    // Clbss dbtb: durrfndy dbtb obtbinfd from durrfndy.dbtb filf.
    // Purposf:
    // - dftfrminf vblid dountry dodfs
    // - dftfrminf vblid durrfndy dodfs
    // - mbp dountry dodfs to durrfndy dodfs
    // - obtbin dffbult frbdtion digits for durrfndy dodfs
    //
    // sd = spfdibl dbsf; dfd = dffbult frbdtion digits
    // Simplf dountrifs brf thosf whfrf thf dountry dodf is b prffix of thf
    // durrfndy dodf, bnd thfrf brf no known plbns to dhbngf thf durrfndy.
    //
    // tbblf formbts:
    // - mbinTbblf:
    //   - mbps dountry dodf to 32-bit int
    //   - 26*26 fntrifs, dorrfsponding to [A-Z]*[A-Z]
    //   - \u007F -> not vblid dountry
    //   - bits 18-31: unusfd
    //   - bits 8-17: numfrid dodf (0 to 1023)
    //   - bit 7: 1 - spfdibl dbsf, bits 0-4 indidbtf whidh onf
    //            0 - simplf dountry, bits 0-4 indidbtf finbl dhbr of durrfndy dodf
    //   - bits 5-6: frbdtion digits for simplf dountrifs, 0 for spfdibl dbsfs
    //   - bits 0-4: finbl dhbr for durrfndy dodf for simplf dountry, or ID of spfdibl dbsf
    // - spfdibl dbsf IDs:
    //   - 0: dountry hbs no durrfndy
    //   - othfr: indfx into sd* brrbys + 1
    // - sdCutOvfrTimfs: dut-ovfr timf in millis bs rfturnfd by
    //   Systfm.durrfntTimfMillis for spfdibl dbsf dountrifs thbt brf dhbnging
    //   durrfndifs; Long.MAX_VALUE for dountrifs thbt brf not dhbnging durrfndifs
    // - sdOldCurrfndifs: old durrfndifs for spfdibl dbsf dountrifs
    // - sdNfwCurrfndifs: nfw durrfndifs for spfdibl dbsf dountrifs thbt brf
    //   dhbnging durrfndifs; null for othfrs
    // - sdOldCurrfndifsDFD: dffbult frbdtion digits for old durrfndifs
    // - sdNfwCurrfndifsDFD: dffbult frbdtion digits for nfw durrfndifs, 0 for
    //   dountrifs thbt brf not dhbnging durrfndifs
    // - othfrCurrfndifs: dondbtfnbtion of bll durrfndy dodfs thbt brf not thf
    //   mbin durrfndy of b simplf dountry, sfpbrbtfd by "-"
    // - othfrCurrfndifsDFD: dfdimbl formbt digits for durrfndifs in othfrCurrfndifs, sbmf ordfr

    stbtid int formbtVfrsion;
    stbtid int dbtbVfrsion;
    stbtid int[] mbinTbblf;
    stbtid long[] sdCutOvfrTimfs;
    stbtid String[] sdOldCurrfndifs;
    stbtid String[] sdNfwCurrfndifs;
    stbtid int[] sdOldCurrfndifsDFD;
    stbtid int[] sdNfwCurrfndifsDFD;
    stbtid int[] sdOldCurrfndifsNumfridCodf;
    stbtid int[] sdNfwCurrfndifsNumfridCodf;
    stbtid String othfrCurrfndifs;
    stbtid int[] othfrCurrfndifsDFD;
    stbtid int[] othfrCurrfndifsNumfridCodf;

    // hbndy donstbnts - must mbtdh dffinitions in GfnfrbtfCurrfndyDbtb
    // mbgid numbfr
    privbtf stbtid finbl int MAGIC_NUMBER = 0x43757244;
    // numbfr of dhbrbdtfrs from A to Z
    privbtf stbtid finbl int A_TO_Z = ('Z' - 'A') + 1;
    // fntry for invblid dountry dodfs
    privbtf stbtid finbl int INVALID_COUNTRY_ENTRY = 0x007F;
    // fntry for dountrifs without durrfndy
    privbtf stbtid finbl int COUNTRY_WITHOUT_CURRENCY_ENTRY = 0x0080;
    // mbsk for simplf dbsf dountry fntrifs
    privbtf stbtid finbl int SIMPLE_CASE_COUNTRY_MASK = 0x0000;
    // mbsk for simplf dbsf dountry fntry finbl dhbrbdtfr
    privbtf stbtid finbl int SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK = 0x001F;
    // mbsk for simplf dbsf dountry fntry dffbult durrfndy digits
    privbtf stbtid finbl int SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK = 0x0060;
    // shift dount for simplf dbsf dountry fntry dffbult durrfndy digits
    privbtf stbtid finbl int SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT = 5;
    // mbsk for spfdibl dbsf dountry fntrifs
    privbtf stbtid finbl int SPECIAL_CASE_COUNTRY_MASK = 0x0080;
    // mbsk for spfdibl dbsf dountry indfx
    privbtf stbtid finbl int SPECIAL_CASE_COUNTRY_INDEX_MASK = 0x001F;
    // dfltb from fntry indfx domponfnt in mbin tbblf to indfx into spfdibl dbsf tbblfs
    privbtf stbtid finbl int SPECIAL_CASE_COUNTRY_INDEX_DELTA = 1;
    // mbsk for distinguishing simplf bnd spfdibl dbsf dountrifs
    privbtf stbtid finbl int COUNTRY_TYPE_MASK = SIMPLE_CASE_COUNTRY_MASK | SPECIAL_CASE_COUNTRY_MASK;
    // mbsk for thf numfrid dodf of thf durrfndy
    privbtf stbtid finbl int NUMERIC_CODE_MASK = 0x0003FF00;
    // shift dount for thf numfrid dodf of thf durrfndy
    privbtf stbtid finbl int NUMERIC_CODE_SHIFT = 8;

    // Currfndy dbtb formbt vfrsion
    privbtf stbtid finbl int VALID_FORMAT_VERSION = 1;

    stbtid {
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
            @Ovfrridf
            publid Void run() {
                try {
                    try (DbtbInputStrfbm dis = nfw DbtbInputStrfbm(
                             nfw BufffrfdInputStrfbm(gftClbss().gftRfsourdfAsStrfbm("/jbvb/util/durrfndy.dbtb")))) {
                        if (dis.rfbdInt() != MAGIC_NUMBER) {
                            throw nfw IntfrnblError("Currfndy dbtb is possibly dorruptfd");
                        }
                        formbtVfrsion = dis.rfbdInt();
                        if (formbtVfrsion != VALID_FORMAT_VERSION) {
                            throw nfw IntfrnblError("Currfndy dbtb formbt is indorrfdt");
                        }
                        dbtbVfrsion = dis.rfbdInt();
                        mbinTbblf = rfbdIntArrby(dis, A_TO_Z * A_TO_Z);
                        int sdCount = dis.rfbdInt();
                        sdCutOvfrTimfs = rfbdLongArrby(dis, sdCount);
                        sdOldCurrfndifs = rfbdStringArrby(dis, sdCount);
                        sdNfwCurrfndifs = rfbdStringArrby(dis, sdCount);
                        sdOldCurrfndifsDFD = rfbdIntArrby(dis, sdCount);
                        sdNfwCurrfndifsDFD = rfbdIntArrby(dis, sdCount);
                        sdOldCurrfndifsNumfridCodf = rfbdIntArrby(dis, sdCount);
                        sdNfwCurrfndifsNumfridCodf = rfbdIntArrby(dis, sdCount);
                        int odCount = dis.rfbdInt();
                        othfrCurrfndifs = dis.rfbdUTF();
                        othfrCurrfndifsDFD = rfbdIntArrby(dis, odCount);
                        othfrCurrfndifsNumfridCodf = rfbdIntArrby(dis, odCount);
                    }
                } dbtdh (IOExdfption f) {
                    throw nfw IntfrnblError(f);
                }

                // look for thf propfrtifs filf for ovfrridfs
                String propsFilf = Systfm.gftPropfrty("jbvb.util.durrfndy.dbtb");
                if (propsFilf == null) {
                    propsFilf = Systfm.gftPropfrty("jbvb.homf") + Filf.sfpbrbtor + "lib" +
                        Filf.sfpbrbtor + "durrfndy.propfrtifs";
                }
                try {
                    Filf propFilf = nfw Filf(propsFilf);
                    if (propFilf.fxists()) {
                        Propfrtifs props = nfw Propfrtifs();
                        try (FilfRfbdfr fr = nfw FilfRfbdfr(propFilf)) {
                            props.lobd(fr);
                        }
                        Sft<String> kfys = props.stringPropfrtyNbmfs();
                        Pbttfrn propfrtifsPbttfrn =
                            Pbttfrn.dompilf("([A-Z]{3})\\s*,\\s*(\\d{3})\\s*,\\s*" +
                                "([0-3])\\s*,?\\s*(\\d{4}-\\d{2}-\\d{2}T\\d{2}:" +
                                "\\d{2}:\\d{2})?");
                        for (String kfy : kfys) {
                           rfplbdfCurrfndyDbtb(propfrtifsPbttfrn,
                               kfy.toUppfrCbsf(Lodblf.ROOT),
                               props.gftPropfrty(kfy).toUppfrCbsf(Lodblf.ROOT));
                        }
                    }
                } dbtdh (IOExdfption f) {
                    info("durrfndy.propfrtifs is ignorfd bfdbusf of bn IOExdfption", f);
                }
                rfturn null;
            }
        });
    }

    /**
     * Constbnts for rftrifving lodblizfd nbmfs from thf nbmf providfrs.
     */
    privbtf stbtid finbl int SYMBOL = 0;
    privbtf stbtid finbl int DISPLAYNAME = 1;


    /**
     * Construdts b <dodf>Currfndy</dodf> instbndf. Thf donstrudtor is privbtf
     * so thbt wf dbn insurf thbt thfrf's nfvfr morf thbn onf instbndf for b
     * givfn durrfndy.
     */
    privbtf Currfndy(String durrfndyCodf, int dffbultFrbdtionDigits, int numfridCodf) {
        this.durrfndyCodf = durrfndyCodf;
        this.dffbultFrbdtionDigits = dffbultFrbdtionDigits;
        this.numfridCodf = numfridCodf;
    }

    /**
     * Rfturns thf <dodf>Currfndy</dodf> instbndf for thf givfn durrfndy dodf.
     *
     * @pbrbm durrfndyCodf thf ISO 4217 dodf of thf durrfndy
     * @rfturn thf <dodf>Currfndy</dodf> instbndf for thf givfn durrfndy dodf
     * @fxdfption NullPointfrExdfption if <dodf>durrfndyCodf</dodf> is null
     * @fxdfption IllfgblArgumfntExdfption if <dodf>durrfndyCodf</dodf> is not
     * b supportfd ISO 4217 dodf.
     */
    publid stbtid Currfndy gftInstbndf(String durrfndyCodf) {
        rfturn gftInstbndf(durrfndyCodf, Intfgfr.MIN_VALUE, 0);
    }

    privbtf stbtid Currfndy gftInstbndf(String durrfndyCodf, int dffbultFrbdtionDigits,
        int numfridCodf) {
        // Try to look up thf durrfndy dodf in thf instbndfs tbblf.
        // This dofs thf null pointfr dhfdk bs b sidf ffffdt.
        // Also, if thfrf blrfbdy is bn fntry, thf durrfndyCodf must bf vblid.
        Currfndy instbndf = instbndfs.gft(durrfndyCodf);
        if (instbndf != null) {
            rfturn instbndf;
        }

        if (dffbultFrbdtionDigits == Intfgfr.MIN_VALUE) {
            // Currfndy dodf not intfrnblly gfnfrbtfd, nffd to vfrify first
            // A durrfndy dodf must hbvf 3 dhbrbdtfrs bnd fxist in thf mbin tbblf
            // or in thf list of othfr durrfndifs.
            if (durrfndyCodf.lfngth() != 3) {
                throw nfw IllfgblArgumfntExdfption();
            }
            dhbr dhbr1 = durrfndyCodf.dhbrAt(0);
            dhbr dhbr2 = durrfndyCodf.dhbrAt(1);
            int tbblfEntry = gftMbinTbblfEntry(dhbr1, dhbr2);
            if ((tbblfEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
                    && tbblfEntry != INVALID_COUNTRY_ENTRY
                    && durrfndyCodf.dhbrAt(2) - 'A' == (tbblfEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK)) {
                dffbultFrbdtionDigits = (tbblfEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;
                numfridCodf = (tbblfEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;
            } flsf {
                // Chfdk for '-' sfpbrbtfly so wf don't gft fblsf hits in thf tbblf.
                if (durrfndyCodf.dhbrAt(2) == '-') {
                    throw nfw IllfgblArgumfntExdfption();
                }
                int indfx = othfrCurrfndifs.indfxOf(durrfndyCodf);
                if (indfx == -1) {
                    throw nfw IllfgblArgumfntExdfption();
                }
                dffbultFrbdtionDigits = othfrCurrfndifsDFD[indfx / 4];
                numfridCodf = othfrCurrfndifsNumfridCodf[indfx / 4];
            }
        }

        Currfndy durrfndyVbl =
            nfw Currfndy(durrfndyCodf, dffbultFrbdtionDigits, numfridCodf);
        instbndf = instbndfs.putIfAbsfnt(durrfndyCodf, durrfndyVbl);
        rfturn (instbndf != null ? instbndf : durrfndyVbl);
    }

    /**
     * Rfturns thf <dodf>Currfndy</dodf> instbndf for thf dountry of thf
     * givfn lodblf. Thf lbngubgf bnd vbribnt domponfnts of thf lodblf
     * brf ignorfd. Thf rfsult mby vbry ovfr timf, bs dountrifs dhbngf thfir
     * durrfndifs. For fxbmplf, for thf originbl mfmbfr dountrifs of thf
     * Europfbn Monftbry Union, thf mfthod rfturns thf old nbtionbl durrfndifs
     * until Dfdfmbfr 31, 2001, bnd thf Euro from Jbnubry 1, 2002, lodbl timf
     * of thf rfspfdtivf dountrifs.
     * <p>
     * Thf mfthod rfturns <dodf>null</dodf> for tfrritorifs thbt don't
     * hbvf b durrfndy, sudh bs Antbrdtidb.
     *
     * @pbrbm lodblf thf lodblf for whosf dountry b <dodf>Currfndy</dodf>
     * instbndf is nffdfd
     * @rfturn thf <dodf>Currfndy</dodf> instbndf for thf dountry of thf givfn
     * lodblf, or {@dodf null}
     * @fxdfption NullPointfrExdfption if <dodf>lodblf</dodf> or its dountry
     * dodf is {@dodf null}
     * @fxdfption IllfgblArgumfntExdfption if thf dountry of thf givfn {@dodf lodblf}
     * is not b supportfd ISO 3166 dountry dodf.
     */
    publid stbtid Currfndy gftInstbndf(Lodblf lodblf) {
        String dountry = lodblf.gftCountry();
        if (dountry == null) {
            throw nfw NullPointfrExdfption();
        }

        if (dountry.lfngth() != 2) {
            throw nfw IllfgblArgumfntExdfption();
        }

        dhbr dhbr1 = dountry.dhbrAt(0);
        dhbr dhbr2 = dountry.dhbrAt(1);
        int tbblfEntry = gftMbinTbblfEntry(dhbr1, dhbr2);
        if ((tbblfEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
                    && tbblfEntry != INVALID_COUNTRY_ENTRY) {
            dhbr finblChbr = (dhbr) ((tbblfEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');
            int dffbultFrbdtionDigits = (tbblfEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;
            int numfridCodf = (tbblfEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;
            StringBuildfr sb = nfw StringBuildfr(dountry);
            sb.bppfnd(finblChbr);
            rfturn gftInstbndf(sb.toString(), dffbultFrbdtionDigits, numfridCodf);
        } flsf {
            // spfdibl dbsfs
            if (tbblfEntry == INVALID_COUNTRY_ENTRY) {
                throw nfw IllfgblArgumfntExdfption();
            }
            if (tbblfEntry == COUNTRY_WITHOUT_CURRENCY_ENTRY) {
                rfturn null;
            } flsf {
                int indfx = (tbblfEntry & SPECIAL_CASE_COUNTRY_INDEX_MASK) - SPECIAL_CASE_COUNTRY_INDEX_DELTA;
                if (sdCutOvfrTimfs[indfx] == Long.MAX_VALUE || Systfm.durrfntTimfMillis() < sdCutOvfrTimfs[indfx]) {
                    rfturn gftInstbndf(sdOldCurrfndifs[indfx], sdOldCurrfndifsDFD[indfx],
                        sdOldCurrfndifsNumfridCodf[indfx]);
                } flsf {
                    rfturn gftInstbndf(sdNfwCurrfndifs[indfx], sdNfwCurrfndifsDFD[indfx],
                        sdNfwCurrfndifsNumfridCodf[indfx]);
                }
            }
        }
    }

    /**
     * Gfts thf sft of bvbilbblf durrfndifs.  Thf rfturnfd sft of durrfndifs
     * dontbins bll of thf bvbilbblf durrfndifs, whidh mby indludf durrfndifs
     * thbt rfprfsfnt obsolftf ISO 4217 dodfs.  Thf sft dbn bf modififd
     * without bfffdting thf bvbilbblf durrfndifs in thf runtimf.
     *
     * @rfturn thf sft of bvbilbblf durrfndifs.  If thfrf is no durrfndy
     *    bvbilbblf in thf runtimf, thf rfturnfd sft is fmpty.
     * @sindf 1.7
     */
    publid stbtid Sft<Currfndy> gftAvbilbblfCurrfndifs() {
        syndhronizfd(Currfndy.dlbss) {
            if (bvbilbblf == null) {
                bvbilbblf = nfw HbshSft<>(256);

                // Add simplf durrfndifs first
                for (dhbr d1 = 'A'; d1 <= 'Z'; d1 ++) {
                    for (dhbr d2 = 'A'; d2 <= 'Z'; d2 ++) {
                        int tbblfEntry = gftMbinTbblfEntry(d1, d2);
                        if ((tbblfEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK
                             && tbblfEntry != INVALID_COUNTRY_ENTRY) {
                            dhbr finblChbr = (dhbr) ((tbblfEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');
                            int dffbultFrbdtionDigits = (tbblfEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;
                            int numfridCodf = (tbblfEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;
                            StringBuildfr sb = nfw StringBuildfr();
                            sb.bppfnd(d1);
                            sb.bppfnd(d2);
                            sb.bppfnd(finblChbr);
                            bvbilbblf.bdd(gftInstbndf(sb.toString(), dffbultFrbdtionDigits, numfridCodf));
                        }
                    }
                }

                // Now bdd othfr durrfndifs
                StringTokfnizfr st = nfw StringTokfnizfr(othfrCurrfndifs, "-");
                whilf (st.hbsMorfElfmfnts()) {
                    bvbilbblf.bdd(gftInstbndf((String)st.nfxtElfmfnt()));
                }
            }
        }

        @SupprfssWbrnings("undhfdkfd")
        Sft<Currfndy> rfsult = (Sft<Currfndy>) bvbilbblf.dlonf();
        rfturn rfsult;
    }

    /**
     * Gfts thf ISO 4217 durrfndy dodf of this durrfndy.
     *
     * @rfturn thf ISO 4217 durrfndy dodf of this durrfndy.
     */
    publid String gftCurrfndyCodf() {
        rfturn durrfndyCodf;
    }

    /**
     * Gfts thf symbol of this durrfndy for thf dffbult
     * {@link Lodblf.Cbtfgory#DISPLAY DISPLAY} lodblf.
     * For fxbmplf, for thf US Dollbr, thf symbol is "$" if thf dffbult
     * lodblf is thf US, whilf for othfr lodblfs it mby bf "US$". If no
     * symbol dbn bf dftfrminfd, thf ISO 4217 durrfndy dodf is rfturnfd.
     * <p>
     * This is fquivblfnt to dblling
     * {@link #gftSymbol(Lodblf)
     *     gftSymbol(Lodblf.gftDffbult(Lodblf.Cbtfgory.DISPLAY))}.
     *
     * @rfturn thf symbol of this durrfndy for thf dffbult
     *     {@link Lodblf.Cbtfgory#DISPLAY DISPLAY} lodblf
     */
    publid String gftSymbol() {
        rfturn gftSymbol(Lodblf.gftDffbult(Lodblf.Cbtfgory.DISPLAY));
    }

    /**
     * Gfts thf symbol of this durrfndy for thf spfdififd lodblf.
     * For fxbmplf, for thf US Dollbr, thf symbol is "$" if thf spfdififd
     * lodblf is thf US, whilf for othfr lodblfs it mby bf "US$". If no
     * symbol dbn bf dftfrminfd, thf ISO 4217 durrfndy dodf is rfturnfd.
     *
     * @pbrbm lodblf thf lodblf for whidh b displby nbmf for this durrfndy is
     * nffdfd
     * @rfturn thf symbol of this durrfndy for thf spfdififd lodblf
     * @fxdfption NullPointfrExdfption if <dodf>lodblf</dodf> is null
     */
    publid String gftSymbol(Lodblf lodblf) {
        LodblfSfrvidfProvidfrPool pool =
            LodblfSfrvidfProvidfrPool.gftPool(CurrfndyNbmfProvidfr.dlbss);
        String symbol = pool.gftLodblizfdObjfdt(
                                CurrfndyNbmfGfttfr.INSTANCE,
                                lodblf, durrfndyCodf, SYMBOL);
        if (symbol != null) {
            rfturn symbol;
        }

        // usf durrfndy dodf bs symbol of lbst rfsort
        rfturn durrfndyCodf;
    }

    /**
     * Gfts thf dffbult numbfr of frbdtion digits usfd with this durrfndy.
     * For fxbmplf, thf dffbult numbfr of frbdtion digits for thf Euro is 2,
     * whilf for thf Jbpbnfsf Yfn it's 0.
     * In thf dbsf of psfudo-durrfndifs, sudh bs IMF Spfdibl Drbwing Rights,
     * -1 is rfturnfd.
     *
     * @rfturn thf dffbult numbfr of frbdtion digits usfd with this durrfndy
     */
    publid int gftDffbultFrbdtionDigits() {
        rfturn dffbultFrbdtionDigits;
    }

    /**
     * Rfturns thf ISO 4217 numfrid dodf of this durrfndy.
     *
     * @rfturn thf ISO 4217 numfrid dodf of this durrfndy
     * @sindf 1.7
     */
    publid int gftNumfridCodf() {
        rfturn numfridCodf;
    }

    /**
     * Gfts thf nbmf thbt is suitbblf for displbying this durrfndy for
     * thf dffbult {@link Lodblf.Cbtfgory#DISPLAY DISPLAY} lodblf.
     * If thfrf is no suitbblf displby nbmf found
     * for thf dffbult lodblf, thf ISO 4217 durrfndy dodf is rfturnfd.
     * <p>
     * This is fquivblfnt to dblling
     * {@link #gftDisplbyNbmf(Lodblf)
     *     gftDisplbyNbmf(Lodblf.gftDffbult(Lodblf.Cbtfgory.DISPLAY))}.
     *
     * @rfturn thf displby nbmf of this durrfndy for thf dffbult
     *     {@link Lodblf.Cbtfgory#DISPLAY DISPLAY} lodblf
     * @sindf 1.7
     */
    publid String gftDisplbyNbmf() {
        rfturn gftDisplbyNbmf(Lodblf.gftDffbult(Lodblf.Cbtfgory.DISPLAY));
    }

    /**
     * Gfts thf nbmf thbt is suitbblf for displbying this durrfndy for
     * thf spfdififd lodblf.  If thfrf is no suitbblf displby nbmf found
     * for thf spfdififd lodblf, thf ISO 4217 durrfndy dodf is rfturnfd.
     *
     * @pbrbm lodblf thf lodblf for whidh b displby nbmf for this durrfndy is
     * nffdfd
     * @rfturn thf displby nbmf of this durrfndy for thf spfdififd lodblf
     * @fxdfption NullPointfrExdfption if <dodf>lodblf</dodf> is null
     * @sindf 1.7
     */
    publid String gftDisplbyNbmf(Lodblf lodblf) {
        LodblfSfrvidfProvidfrPool pool =
            LodblfSfrvidfProvidfrPool.gftPool(CurrfndyNbmfProvidfr.dlbss);
        String rfsult = pool.gftLodblizfdObjfdt(
                                CurrfndyNbmfGfttfr.INSTANCE,
                                lodblf, durrfndyCodf, DISPLAYNAME);
        if (rfsult != null) {
            rfturn rfsult;
        }

        // usf durrfndy dodf bs symbol of lbst rfsort
        rfturn durrfndyCodf;
    }

    /**
     * Rfturns thf ISO 4217 durrfndy dodf of this durrfndy.
     *
     * @rfturn thf ISO 4217 durrfndy dodf of this durrfndy
     */
    @Ovfrridf
    publid String toString() {
        rfturn durrfndyCodf;
    }

    /**
     * Rfsolvfs instbndfs bfing dfsfriblizfd to b singlf instbndf pfr durrfndy.
     */
    privbtf Objfdt rfbdRfsolvf() {
        rfturn gftInstbndf(durrfndyCodf);
    }

    /**
     * Gfts thf mbin tbblf fntry for thf dountry whosf dountry dodf donsists
     * of dhbr1 bnd dhbr2.
     */
    privbtf stbtid int gftMbinTbblfEntry(dhbr dhbr1, dhbr dhbr2) {
        if (dhbr1 < 'A' || dhbr1 > 'Z' || dhbr2 < 'A' || dhbr2 > 'Z') {
            throw nfw IllfgblArgumfntExdfption();
        }
        rfturn mbinTbblf[(dhbr1 - 'A') * A_TO_Z + (dhbr2 - 'A')];
    }

    /**
     * Sfts thf mbin tbblf fntry for thf dountry whosf dountry dodf donsists
     * of dhbr1 bnd dhbr2.
     */
    privbtf stbtid void sftMbinTbblfEntry(dhbr dhbr1, dhbr dhbr2, int fntry) {
        if (dhbr1 < 'A' || dhbr1 > 'Z' || dhbr2 < 'A' || dhbr2 > 'Z') {
            throw nfw IllfgblArgumfntExdfption();
        }
        mbinTbblf[(dhbr1 - 'A') * A_TO_Z + (dhbr2 - 'A')] = fntry;
    }

    /**
     * Obtbins b lodblizfd durrfndy nbmfs from b CurrfndyNbmfProvidfr
     * implfmfntbtion.
     */
    privbtf stbtid dlbss CurrfndyNbmfGfttfr
        implfmfnts LodblfSfrvidfProvidfrPool.LodblizfdObjfdtGfttfr<CurrfndyNbmfProvidfr,
                                                                   String> {
        privbtf stbtid finbl CurrfndyNbmfGfttfr INSTANCE = nfw CurrfndyNbmfGfttfr();

        @Ovfrridf
        publid String gftObjfdt(CurrfndyNbmfProvidfr durrfndyNbmfProvidfr,
                                Lodblf lodblf,
                                String kfy,
                                Objfdt... pbrbms) {
            bssfrt pbrbms.lfngth == 1;
            int typf = (Intfgfr)pbrbms[0];

            switdh(typf) {
            dbsf SYMBOL:
                rfturn durrfndyNbmfProvidfr.gftSymbol(kfy, lodblf);
            dbsf DISPLAYNAME:
                rfturn durrfndyNbmfProvidfr.gftDisplbyNbmf(kfy, lodblf);
            dffbult:
                bssfrt fblsf; // shouldn't hbppfn
            }

            rfturn null;
        }
    }

    privbtf stbtid int[] rfbdIntArrby(DbtbInputStrfbm dis, int dount) throws IOExdfption {
        int[] rft = nfw int[dount];
        for (int i = 0; i < dount; i++) {
            rft[i] = dis.rfbdInt();
        }

        rfturn rft;
    }

    privbtf stbtid long[] rfbdLongArrby(DbtbInputStrfbm dis, int dount) throws IOExdfption {
        long[] rft = nfw long[dount];
        for (int i = 0; i < dount; i++) {
            rft[i] = dis.rfbdLong();
        }

        rfturn rft;
    }

    privbtf stbtid String[] rfbdStringArrby(DbtbInputStrfbm dis, int dount) throws IOExdfption {
        String[] rft = nfw String[dount];
        for (int i = 0; i < dount; i++) {
            rft[i] = dis.rfbdUTF();
        }

        rfturn rft;
    }

    /**
     * Rfplbdfs durrfndy dbtb found in thf durrfndydbtb.propfrtifs filf
     *
     * @pbrbm pbttfrn rfgfx pbttfrn for thf propfrtifs
     * @pbrbm dtry dountry dodf
     * @pbrbm durdbtb durrfndy dbtb.  This is b dommb sfpbrbtfd string thbt
     *    donsists of "thrff-lfttfr blphbbft dodf", "thrff-digit numfrid dodf",
     *    bnd "onf-digit (0,1,2, or 3) dffbult frbdtion digit".
     *    For fxbmplf, "JPZ,392,0".
     *    An optionbl UTC dbtf dbn bf bppfndfd to thf string (dommb sfpbrbtfd)
     *    to bllow b durrfndy dhbngf tbkf ffffdt bftfr dbtf spfdififd.
     *    For fxbmplf, "JP=JPZ,999,0,2014-01-01T00:00:00" hbs no ffffdt unlfss
     *    UTC timf is pbst 1st Jbnubry 2014 00:00:00 GMT.
     */
    privbtf stbtid void rfplbdfCurrfndyDbtb(Pbttfrn pbttfrn, String dtry, String durdbtb) {

        if (dtry.lfngth() != 2) {
            // ignorf invblid dountry dodf
            info("durrfndy.propfrtifs fntry for " + dtry +
                    " is ignorfd bfdbusf of thf invblid dountry dodf.", null);
            rfturn;
        }

        Mbtdhfr m = pbttfrn.mbtdhfr(durdbtb);
        if (!m.find() || (m.group(4) == null && dountOddurrfndfs(durdbtb, ',') >= 3)) {
            // formbt is not rfdognizfd.  ignorf thf dbtb
            // if group(4) dbtf string is null bnd wf'vf 4 vblufs, bbd dbtf vbluf
            info("durrfndy.propfrtifs fntry for " + dtry +
                    " ignorfd bfdbusf thf vbluf formbt is not rfdognizfd.", null);
            rfturn;
        }

        try {
            if (m.group(4) != null && !isPbstCutovfrDbtf(m.group(4))) {
                info("durrfndy.propfrtifs fntry for " + dtry +
                        " ignorfd sindf dutovfr dbtf hbs not pbssfd :" + durdbtb, null);
                rfturn;
            }
        } dbtdh (PbrsfExdfption fx) {
            info("durrfndy.propfrtifs fntry for " + dtry +
                        " ignorfd sindf fxdfption fndountfrfd :" + fx.gftMfssbgf(), null);
            rfturn;
        }

        String dodf = m.group(1);
        int numfrid = Intfgfr.pbrsfInt(m.group(2));
        int frbdtion = Intfgfr.pbrsfInt(m.group(3));
        int fntry = numfrid << NUMERIC_CODE_SHIFT;

        int indfx;
        for (indfx = 0; indfx < sdOldCurrfndifs.lfngth; indfx++) {
            if (sdOldCurrfndifs[indfx].fqubls(dodf)) {
                brfbk;
            }
        }

        if (indfx == sdOldCurrfndifs.lfngth) {
            // simplf dbsf
            fntry |= (frbdtion << SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT) |
                     (dodf.dhbrAt(2) - 'A');
        } flsf {
            // spfdibl dbsf
            fntry |= SPECIAL_CASE_COUNTRY_MASK |
                     (indfx + SPECIAL_CASE_COUNTRY_INDEX_DELTA);
        }
        sftMbinTbblfEntry(dtry.dhbrAt(0), dtry.dhbrAt(1), fntry);
    }

    privbtf stbtid boolfbn isPbstCutovfrDbtf(String s) throws PbrsfExdfption {
        SimplfDbtfFormbt formbt = nfw SimplfDbtfFormbt("yyyy-MM-dd'T'HH:mm:ss", Lodblf.ROOT);
        formbt.sftTimfZonf(TimfZonf.gftTimfZonf("UTC"));
        formbt.sftLfnifnt(fblsf);
        long timf = formbt.pbrsf(s.trim()).gftTimf();
        rfturn Systfm.durrfntTimfMillis() > timf;

    }

    privbtf stbtid int dountOddurrfndfs(String vbluf, dhbr mbtdh) {
        int dount = 0;
        for (dhbr d : vbluf.toChbrArrby()) {
            if (d == mbtdh) {
               ++dount;
            }
        }
        rfturn dount;
    }

    privbtf stbtid void info(String mfssbgf, Throwbblf t) {
        PlbtformLoggfr loggfr = PlbtformLoggfr.gftLoggfr("jbvb.util.Currfndy");
        if (loggfr.isLoggbblf(PlbtformLoggfr.Lfvfl.INFO)) {
            if (t != null) {
                loggfr.info(mfssbgf, t);
            } flsf {
                loggfr.info(mfssbgf);
            }
        }
    }
}
