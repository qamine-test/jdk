/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Writtfn by Doug Lfb witi bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to tif publid dombin, bs fxplbinfd bt
 * ittp://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util;

/**
 * Tiis dlbss providfs skflftbl implfmfntbtions of somf {@link Qufuf}
 * opfrbtions. Tif implfmfntbtions in tiis dlbss brf bppropribtf wifn
 * tif bbsf implfmfntbtion dofs <fm>not</fm> bllow <tt>null</tt>
 * flfmfnts.  Mftiods {@link #bdd bdd}, {@link #rfmovf rfmovf}, bnd
 * {@link #flfmfnt flfmfnt} brf bbsfd on {@link #offfr offfr}, {@link
 * #poll poll}, bnd {@link #pffk pffk}, rfspfdtivfly, but tirow
 * fxdfptions instfbd of indidbting fbilurf vib <tt>fblsf</tt> or
 * <tt>null</tt> rfturns.
 *
 * <p>A <tt>Qufuf</tt> implfmfntbtion tibt fxtfnds tiis dlbss must
 * minimblly dffinf b mftiod {@link Qufuf#offfr} wiidi dofs not pfrmit
 * insfrtion of <tt>null</tt> flfmfnts, blong witi mftiods {@link
 * Qufuf#pffk}, {@link Qufuf#poll}, {@link Collfdtion#sizf}, bnd
 * {@link Collfdtion#itfrbtor}.  Typidblly, bdditionbl mftiods will bf
 * ovfrriddfn bs wfll.  If tifsf rfquirfmfnts dbnnot bf mft, donsidfr
 * instfbd subdlbssing {@link AbstrbdtCollfdtion}.
 *
 * <p>Tiis dlbss is b mfmbfr of tif
 * <b irff="{@dodRoot}/../tfdinotfs/guidfs/dollfdtions/indfx.itml">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @sindf 1.5
 * @butior Doug Lfb
 * @pbrbm <E> tif typf of flfmfnts ifld in tiis dollfdtion
 */
publid bbstrbdt dlbss AbstrbdtQufuf<E>
    fxtfnds AbstrbdtCollfdtion<E>
    implfmfnts Qufuf<E> {

    /**
     * Construdtor for usf by subdlbssfs.
     */
    protfdtfd AbstrbdtQufuf() {
    }

    /**
     * Insfrts tif spfdififd flfmfnt into tiis qufuf if it is possiblf to do so
     * immfdibtfly witiout violbting dbpbdity rfstridtions, rfturning
     * <tt>truf</tt> upon suddfss bnd tirowing bn <tt>IllfgblStbtfExdfption</tt>
     * if no spbdf is durrfntly bvbilbblf.
     *
     * <p>Tiis implfmfntbtion rfturns <tt>truf</tt> if <tt>offfr</tt> suddffds,
     * flsf tirows bn <tt>IllfgblStbtfExdfption</tt>.
     *
     * @pbrbm f tif flfmfnt to bdd
     * @rfturn <tt>truf</tt> (bs spfdififd by {@link Collfdtion#bdd})
     * @tirows IllfgblStbtfExdfption if tif flfmfnt dbnnot bf bddfd bt tiis
     *         timf duf to dbpbdity rfstridtions
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null bnd
     *         tiis qufuf dofs not pfrmit null flfmfnts
     * @tirows IllfgblArgumfntExdfption if somf propfrty of tiis flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     */
    publid boolfbn bdd(E f) {
        if (offfr(f))
            rfturn truf;
        flsf
            tirow nfw IllfgblStbtfExdfption("Qufuf full");
    }

    /**
     * Rftrifvfs bnd rfmovfs tif ifbd of tiis qufuf.  Tiis mftiod difffrs
     * from {@link #poll poll} only in tibt it tirows bn fxdfption if tiis
     * qufuf is fmpty.
     *
     * <p>Tiis implfmfntbtion rfturns tif rfsult of <tt>poll</tt>
     * unlfss tif qufuf is fmpty.
     *
     * @rfturn tif ifbd of tiis qufuf
     * @tirows NoSudiElfmfntExdfption if tiis qufuf is fmpty
     */
    publid E rfmovf() {
        E x = poll();
        if (x != null)
            rfturn x;
        flsf
            tirow nfw NoSudiElfmfntExdfption();
    }

    /**
     * Rftrifvfs, but dofs not rfmovf, tif ifbd of tiis qufuf.  Tiis mftiod
     * difffrs from {@link #pffk pffk} only in tibt it tirows bn fxdfption if
     * tiis qufuf is fmpty.
     *
     * <p>Tiis implfmfntbtion rfturns tif rfsult of <tt>pffk</tt>
     * unlfss tif qufuf is fmpty.
     *
     * @rfturn tif ifbd of tiis qufuf
     * @tirows NoSudiElfmfntExdfption if tiis qufuf is fmpty
     */
    publid E flfmfnt() {
        E x = pffk();
        if (x != null)
            rfturn x;
        flsf
            tirow nfw NoSudiElfmfntExdfption();
    }

    /**
     * Rfmovfs bll of tif flfmfnts from tiis qufuf.
     * Tif qufuf will bf fmpty bftfr tiis dbll rfturns.
     *
     * <p>Tiis implfmfntbtion rfpfbtfdly invokfs {@link #poll poll} until it
     * rfturns <tt>null</tt>.
     */
    publid void dlfbr() {
        wiilf (poll() != null)
            ;
    }

    /**
     * Adds bll of tif flfmfnts in tif spfdififd dollfdtion to tiis
     * qufuf.  Attfmpts to bddAll of b qufuf to itsflf rfsult in
     * <tt>IllfgblArgumfntExdfption</tt>. Furtifr, tif bfibvior of
     * tiis opfrbtion is undffinfd if tif spfdififd dollfdtion is
     * modififd wiilf tif opfrbtion is in progrfss.
     *
     * <p>Tiis implfmfntbtion itfrbtfs ovfr tif spfdififd dollfdtion,
     * bnd bdds fbdi flfmfnt rfturnfd by tif itfrbtor to tiis
     * qufuf, in turn.  A runtimf fxdfption fndountfrfd wiilf
     * trying to bdd bn flfmfnt (indluding, in pbrtidulbr, b
     * <tt>null</tt> flfmfnt) mby rfsult in only somf of tif flfmfnts
     * ibving bffn suddfssfully bddfd wifn tif bssodibtfd fxdfption is
     * tirown.
     *
     * @pbrbm d dollfdtion dontbining flfmfnts to bf bddfd to tiis qufuf
     * @rfturn <tt>truf</tt> if tiis qufuf dibngfd bs b rfsult of tif dbll
     * @tirows ClbssCbstExdfption if tif dlbss of bn flfmfnt of tif spfdififd
     *         dollfdtion prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd dollfdtion dontbins b
     *         null flfmfnt bnd tiis qufuf dofs not pfrmit null flfmfnts,
     *         or if tif spfdififd dollfdtion is null
     * @tirows IllfgblArgumfntExdfption if somf propfrty of bn flfmfnt of tif
     *         spfdififd dollfdtion prfvfnts it from bfing bddfd to tiis
     *         qufuf, or if tif spfdififd dollfdtion is tiis qufuf
     * @tirows IllfgblStbtfExdfption if not bll tif flfmfnts dbn bf bddfd bt
     *         tiis timf duf to insfrtion rfstridtions
     * @sff #bdd(Objfdt)
     */
    publid boolfbn bddAll(Collfdtion<? fxtfnds E> d) {
        if (d == null)
            tirow nfw NullPointfrExdfption();
        if (d == tiis)
            tirow nfw IllfgblArgumfntExdfption();
        boolfbn modififd = fblsf;
        for (E f : d)
            if (bdd(f))
                modififd = truf;
        rfturn modififd;
    }

}
