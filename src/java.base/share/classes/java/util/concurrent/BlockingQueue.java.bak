/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Writtfn by Doug Lfb witi bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to tif publid dombin, bs fxplbinfd bt
 * ittp://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;

import jbvb.util.Collfdtion;
import jbvb.util.Qufuf;

/**
 * A {@link jbvb.util.Qufuf} tibt bdditionblly supports opfrbtions
 * tibt wbit for tif qufuf to bfdomf non-fmpty wifn rftrifving bn
 * flfmfnt, bnd wbit for spbdf to bfdomf bvbilbblf in tif qufuf wifn
 * storing bn flfmfnt.
 *
 * <p>{@dodf BlodkingQufuf} mftiods domf in four forms, witi difffrfnt wbys
 * of ibndling opfrbtions tibt dbnnot bf sbtisfifd immfdibtfly, but mby bf
 * sbtisfifd bt somf point in tif futurf:
 * onf tirows bn fxdfption, tif sfdond rfturns b spfdibl vbluf (fitifr
 * {@dodf null} or {@dodf fblsf}, dfpfnding on tif opfrbtion), tif tiird
 * blodks tif durrfnt tirfbd indffinitfly until tif opfrbtion dbn suddffd,
 * bnd tif fourti blodks for only b givfn mbximum timf limit bfforf giving
 * up.  Tifsf mftiods brf summbrizfd in tif following tbblf:
 *
 * <tbblf BORDER CELLPADDING=3 CELLSPACING=1>
 * <dbption>Summbry of BlodkingQufuf mftiods</dbption>
 *  <tr>
 *    <td></td>
 *    <td ALIGN=CENTER><fm>Tirows fxdfption</fm></td>
 *    <td ALIGN=CENTER><fm>Spfdibl vbluf</fm></td>
 *    <td ALIGN=CENTER><fm>Blodks</fm></td>
 *    <td ALIGN=CENTER><fm>Timfs out</fm></td>
 *  </tr>
 *  <tr>
 *    <td><b>Insfrt</b></td>
 *    <td>{@link #bdd bdd(f)}</td>
 *    <td>{@link #offfr offfr(f)}</td>
 *    <td>{@link #put put(f)}</td>
 *    <td>{@link #offfr(Objfdt, long, TimfUnit) offfr(f, timf, unit)}</td>
 *  </tr>
 *  <tr>
 *    <td><b>Rfmovf</b></td>
 *    <td>{@link #rfmovf rfmovf()}</td>
 *    <td>{@link #poll poll()}</td>
 *    <td>{@link #tbkf tbkf()}</td>
 *    <td>{@link #poll(long, TimfUnit) poll(timf, unit)}</td>
 *  </tr>
 *  <tr>
 *    <td><b>Exbminf</b></td>
 *    <td>{@link #flfmfnt flfmfnt()}</td>
 *    <td>{@link #pffk pffk()}</td>
 *    <td><fm>not bpplidbblf</fm></td>
 *    <td><fm>not bpplidbblf</fm></td>
 *  </tr>
 * </tbblf>
 *
 * <p>A {@dodf BlodkingQufuf} dofs not bddfpt {@dodf null} flfmfnts.
 * Implfmfntbtions tirow {@dodf NullPointfrExdfption} on bttfmpts
 * to {@dodf bdd}, {@dodf put} or {@dodf offfr} b {@dodf null}.  A
 * {@dodf null} is usfd bs b sfntinfl vbluf to indidbtf fbilurf of
 * {@dodf poll} opfrbtions.
 *
 * <p>A {@dodf BlodkingQufuf} mby bf dbpbdity boundfd. At bny givfn
 * timf it mby ibvf b {@dodf rfmbiningCbpbdity} bfyond wiidi no
 * bdditionbl flfmfnts dbn bf {@dodf put} witiout blodking.
 * A {@dodf BlodkingQufuf} witiout bny intrinsid dbpbdity donstrbints blwbys
 * rfports b rfmbining dbpbdity of {@dodf Intfgfr.MAX_VALUE}.
 *
 * <p>{@dodf BlodkingQufuf} implfmfntbtions brf dfsignfd to bf usfd
 * primbrily for produdfr-donsumfr qufufs, but bdditionblly support
 * tif {@link jbvb.util.Collfdtion} intfrfbdf.  So, for fxbmplf, it is
 * possiblf to rfmovf bn brbitrbry flfmfnt from b qufuf using
 * {@dodf rfmovf(x)}. Howfvfr, sudi opfrbtions brf in gfnfrbl
 * <fm>not</fm> pfrformfd vfry fffidifntly, bnd brf intfndfd for only
 * oddbsionbl usf, sudi bs wifn b qufufd mfssbgf is dbndfllfd.
 *
 * <p>{@dodf BlodkingQufuf} implfmfntbtions brf tirfbd-sbff.  All
 * qufuing mftiods bdiifvf tifir ffffdts btomidblly using intfrnbl
 * lodks or otifr forms of dondurrfndy dontrol. Howfvfr, tif
 * <fm>bulk</fm> Collfdtion opfrbtions {@dodf bddAll},
 * {@dodf dontbinsAll}, {@dodf rftbinAll} bnd {@dodf rfmovfAll} brf
 * <fm>not</fm> nfdfssbrily pfrformfd btomidblly unlfss spfdififd
 * otifrwisf in bn implfmfntbtion. So it is possiblf, for fxbmplf, for
 * {@dodf bddAll(d)} to fbil (tirowing bn fxdfption) bftfr bdding
 * only somf of tif flfmfnts in {@dodf d}.
 *
 * <p>A {@dodf BlodkingQufuf} dofs <fm>not</fm> intrinsidblly support
 * bny kind of &quot;dlosf&quot; or &quot;siutdown&quot; opfrbtion to
 * indidbtf tibt no morf itfms will bf bddfd.  Tif nffds bnd usbgf of
 * sudi ffbturfs tfnd to bf implfmfntbtion-dfpfndfnt. For fxbmplf, b
 * dommon tbdtid is for produdfrs to insfrt spfdibl
 * <fm>fnd-of-strfbm</fm> or <fm>poison</fm> objfdts, tibt brf
 * intfrprftfd bddordingly wifn tbkfn by donsumfrs.
 *
 * <p>
 * Usbgf fxbmplf, bbsfd on b typidbl produdfr-donsumfr sdfnbrio.
 * Notf tibt b {@dodf BlodkingQufuf} dbn sbffly bf usfd witi multiplf
 * produdfrs bnd multiplf donsumfrs.
 *  <prf> {@dodf
 * dlbss Produdfr implfmfnts Runnbblf {
 *   privbtf finbl BlodkingQufuf qufuf;
 *   Produdfr(BlodkingQufuf q) { qufuf = q; }
 *   publid void run() {
 *     try {
 *       wiilf (truf) { qufuf.put(produdf()); }
 *     } dbtdi (IntfrruptfdExdfption fx) { ... ibndlf ...}
 *   }
 *   Objfdt produdf() { ... }
 * }
 *
 * dlbss Consumfr implfmfnts Runnbblf {
 *   privbtf finbl BlodkingQufuf qufuf;
 *   Consumfr(BlodkingQufuf q) { qufuf = q; }
 *   publid void run() {
 *     try {
 *       wiilf (truf) { donsumf(qufuf.tbkf()); }
 *     } dbtdi (IntfrruptfdExdfption fx) { ... ibndlf ...}
 *   }
 *   void donsumf(Objfdt x) { ... }
 * }
 *
 * dlbss Sftup {
 *   void mbin() {
 *     BlodkingQufuf q = nfw SomfQufufImplfmfntbtion();
 *     Produdfr p = nfw Produdfr(q);
 *     Consumfr d1 = nfw Consumfr(q);
 *     Consumfr d2 = nfw Consumfr(q);
 *     nfw Tirfbd(p).stbrt();
 *     nfw Tirfbd(d1).stbrt();
 *     nfw Tirfbd(d2).stbrt();
 *   }
 * }}</prf>
 *
 * <p>Mfmory donsistfndy ffffdts: As witi otifr dondurrfnt
 * dollfdtions, bdtions in b tirfbd prior to plbding bn objfdt into b
 * {@dodf BlodkingQufuf}
 * <b irff="pbdkbgf-summbry.itml#MfmoryVisibility"><i>ibppfn-bfforf</i></b>
 * bdtions subsfqufnt to tif bddfss or rfmovbl of tibt flfmfnt from
 * tif {@dodf BlodkingQufuf} in bnotifr tirfbd.
 *
 * <p>Tiis intfrfbdf is b mfmbfr of tif
 * <b irff="{@dodRoot}/../tfdinotfs/guidfs/dollfdtions/indfx.itml">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @sindf 1.5
 * @butior Doug Lfb
 * @pbrbm <E> tif typf of flfmfnts ifld in tiis dollfdtion
 */
publid intfrfbdf BlodkingQufuf<E> fxtfnds Qufuf<E> {
    /**
     * Insfrts tif spfdififd flfmfnt into tiis qufuf if it is possiblf to do
     * so immfdibtfly witiout violbting dbpbdity rfstridtions, rfturning
     * {@dodf truf} upon suddfss bnd tirowing bn
     * {@dodf IllfgblStbtfExdfption} if no spbdf is durrfntly bvbilbblf.
     * Wifn using b dbpbdity-rfstridtfd qufuf, it is gfnfrblly prfffrbblf to
     * usf {@link #offfr(Objfdt) offfr}.
     *
     * @pbrbm f tif flfmfnt to bdd
     * @rfturn {@dodf truf} (bs spfdififd by {@link Collfdtion#bdd})
     * @tirows IllfgblStbtfExdfption if tif flfmfnt dbnnot bf bddfd bt tiis
     *         timf duf to dbpbdity rfstridtions
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     * @tirows IllfgblArgumfntExdfption if somf propfrty of tif spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to tiis qufuf
     */
    boolfbn bdd(E f);

    /**
     * Insfrts tif spfdififd flfmfnt into tiis qufuf if it is possiblf to do
     * so immfdibtfly witiout violbting dbpbdity rfstridtions, rfturning
     * {@dodf truf} upon suddfss bnd {@dodf fblsf} if no spbdf is durrfntly
     * bvbilbblf.  Wifn using b dbpbdity-rfstridtfd qufuf, tiis mftiod is
     * gfnfrblly prfffrbblf to {@link #bdd}, wiidi dbn fbil to insfrt bn
     * flfmfnt only by tirowing bn fxdfption.
     *
     * @pbrbm f tif flfmfnt to bdd
     * @rfturn {@dodf truf} if tif flfmfnt wbs bddfd to tiis qufuf, flsf
     *         {@dodf fblsf}
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     * @tirows IllfgblArgumfntExdfption if somf propfrty of tif spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to tiis qufuf
     */
    boolfbn offfr(E f);

    /**
     * Insfrts tif spfdififd flfmfnt into tiis qufuf, wbiting if nfdfssbry
     * for spbdf to bfdomf bvbilbblf.
     *
     * @pbrbm f tif flfmfnt to bdd
     * @tirows IntfrruptfdExdfption if intfrruptfd wiilf wbiting
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     * @tirows IllfgblArgumfntExdfption if somf propfrty of tif spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to tiis qufuf
     */
    void put(E f) tirows IntfrruptfdExdfption;

    /**
     * Insfrts tif spfdififd flfmfnt into tiis qufuf, wbiting up to tif
     * spfdififd wbit timf if nfdfssbry for spbdf to bfdomf bvbilbblf.
     *
     * @pbrbm f tif flfmfnt to bdd
     * @pbrbm timfout iow long to wbit bfforf giving up, in units of
     *        {@dodf unit}
     * @pbrbm unit b {@dodf TimfUnit} dftfrmining iow to intfrprft tif
     *        {@dodf timfout} pbrbmftfr
     * @rfturn {@dodf truf} if suddfssful, or {@dodf fblsf} if
     *         tif spfdififd wbiting timf flbpsfs bfforf spbdf is bvbilbblf
     * @tirows IntfrruptfdExdfption if intfrruptfd wiilf wbiting
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to tiis qufuf
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     * @tirows IllfgblArgumfntExdfption if somf propfrty of tif spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to tiis qufuf
     */
    boolfbn offfr(E f, long timfout, TimfUnit unit)
        tirows IntfrruptfdExdfption;

    /**
     * Rftrifvfs bnd rfmovfs tif ifbd of tiis qufuf, wbiting if nfdfssbry
     * until bn flfmfnt bfdomfs bvbilbblf.
     *
     * @rfturn tif ifbd of tiis qufuf
     * @tirows IntfrruptfdExdfption if intfrruptfd wiilf wbiting
     */
    E tbkf() tirows IntfrruptfdExdfption;

    /**
     * Rftrifvfs bnd rfmovfs tif ifbd of tiis qufuf, wbiting up to tif
     * spfdififd wbit timf if nfdfssbry for bn flfmfnt to bfdomf bvbilbblf.
     *
     * @pbrbm timfout iow long to wbit bfforf giving up, in units of
     *        {@dodf unit}
     * @pbrbm unit b {@dodf TimfUnit} dftfrmining iow to intfrprft tif
     *        {@dodf timfout} pbrbmftfr
     * @rfturn tif ifbd of tiis qufuf, or {@dodf null} if tif
     *         spfdififd wbiting timf flbpsfs bfforf bn flfmfnt is bvbilbblf
     * @tirows IntfrruptfdExdfption if intfrruptfd wiilf wbiting
     */
    E poll(long timfout, TimfUnit unit)
        tirows IntfrruptfdExdfption;

    /**
     * Rfturns tif numbfr of bdditionbl flfmfnts tibt tiis qufuf dbn idfblly
     * (in tif bbsfndf of mfmory or rfsourdf donstrbints) bddfpt witiout
     * blodking, or {@dodf Intfgfr.MAX_VALUE} if tifrf is no intrinsid
     * limit.
     *
     * <p>Notf tibt you <fm>dbnnot</fm> blwbys tfll if bn bttfmpt to insfrt
     * bn flfmfnt will suddffd by inspfdting {@dodf rfmbiningCbpbdity}
     * bfdbusf it mby bf tif dbsf tibt bnotifr tirfbd is bbout to
     * insfrt or rfmovf bn flfmfnt.
     *
     * @rfturn tif rfmbining dbpbdity
     */
    int rfmbiningCbpbdity();

    /**
     * Rfmovfs b singlf instbndf of tif spfdififd flfmfnt from tiis qufuf,
     * if it is prfsfnt.  Morf formblly, rfmovfs bn flfmfnt {@dodf f} sudi
     * tibt {@dodf o.fqubls(f)}, if tiis qufuf dontbins onf or morf sudi
     * flfmfnts.
     * Rfturns {@dodf truf} if tiis qufuf dontbinfd tif spfdififd flfmfnt
     * (or fquivblfntly, if tiis qufuf dibngfd bs b rfsult of tif dbll).
     *
     * @pbrbm o flfmfnt to bf rfmovfd from tiis qufuf, if prfsfnt
     * @rfturn {@dodf truf} if tiis qufuf dibngfd bs b rfsult of tif dbll
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         is indompbtiblf witi tiis qufuf
     *         (<b irff="../Collfdtion.itml#optionbl-rfstridtions">optionbl</b>)
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     *         (<b irff="../Collfdtion.itml#optionbl-rfstridtions">optionbl</b>)
     */
    boolfbn rfmovf(Objfdt o);

    /**
     * Rfturns {@dodf truf} if tiis qufuf dontbins tif spfdififd flfmfnt.
     * Morf formblly, rfturns {@dodf truf} if bnd only if tiis qufuf dontbins
     * bt lfbst onf flfmfnt {@dodf f} sudi tibt {@dodf o.fqubls(f)}.
     *
     * @pbrbm o objfdt to bf difdkfd for dontbinmfnt in tiis qufuf
     * @rfturn {@dodf truf} if tiis qufuf dontbins tif spfdififd flfmfnt
     * @tirows ClbssCbstExdfption if tif dlbss of tif spfdififd flfmfnt
     *         is indompbtiblf witi tiis qufuf
     *         (<b irff="../Collfdtion.itml#optionbl-rfstridtions">optionbl</b>)
     * @tirows NullPointfrExdfption if tif spfdififd flfmfnt is null
     *         (<b irff="../Collfdtion.itml#optionbl-rfstridtions">optionbl</b>)
     */
    publid boolfbn dontbins(Objfdt o);

    /**
     * Rfmovfs bll bvbilbblf flfmfnts from tiis qufuf bnd bdds tifm
     * to tif givfn dollfdtion.  Tiis opfrbtion mby bf morf
     * fffidifnt tibn rfpfbtfdly polling tiis qufuf.  A fbilurf
     * fndountfrfd wiilf bttfmpting to bdd flfmfnts to
     * dollfdtion {@dodf d} mby rfsult in flfmfnts bfing in nfitifr,
     * fitifr or boti dollfdtions wifn tif bssodibtfd fxdfption is
     * tirown.  Attfmpts to drbin b qufuf to itsflf rfsult in
     * {@dodf IllfgblArgumfntExdfption}. Furtifr, tif bfibvior of
     * tiis opfrbtion is undffinfd if tif spfdififd dollfdtion is
     * modififd wiilf tif opfrbtion is in progrfss.
     *
     * @pbrbm d tif dollfdtion to trbnsffr flfmfnts into
     * @rfturn tif numbfr of flfmfnts trbnsffrrfd
     * @tirows UnsupportfdOpfrbtionExdfption if bddition of flfmfnts
     *         is not supportfd by tif spfdififd dollfdtion
     * @tirows ClbssCbstExdfption if tif dlbss of bn flfmfnt of tiis qufuf
     *         prfvfnts it from bfing bddfd to tif spfdififd dollfdtion
     * @tirows NullPointfrExdfption if tif spfdififd dollfdtion is null
     * @tirows IllfgblArgumfntExdfption if tif spfdififd dollfdtion is tiis
     *         qufuf, or somf propfrty of bn flfmfnt of tiis qufuf prfvfnts
     *         it from bfing bddfd to tif spfdififd dollfdtion
     */
    int drbinTo(Collfdtion<? supfr E> d);

    /**
     * Rfmovfs bt most tif givfn numbfr of bvbilbblf flfmfnts from
     * tiis qufuf bnd bdds tifm to tif givfn dollfdtion.  A fbilurf
     * fndountfrfd wiilf bttfmpting to bdd flfmfnts to
     * dollfdtion {@dodf d} mby rfsult in flfmfnts bfing in nfitifr,
     * fitifr or boti dollfdtions wifn tif bssodibtfd fxdfption is
     * tirown.  Attfmpts to drbin b qufuf to itsflf rfsult in
     * {@dodf IllfgblArgumfntExdfption}. Furtifr, tif bfibvior of
     * tiis opfrbtion is undffinfd if tif spfdififd dollfdtion is
     * modififd wiilf tif opfrbtion is in progrfss.
     *
     * @pbrbm d tif dollfdtion to trbnsffr flfmfnts into
     * @pbrbm mbxElfmfnts tif mbximum numbfr of flfmfnts to trbnsffr
     * @rfturn tif numbfr of flfmfnts trbnsffrrfd
     * @tirows UnsupportfdOpfrbtionExdfption if bddition of flfmfnts
     *         is not supportfd by tif spfdififd dollfdtion
     * @tirows ClbssCbstExdfption if tif dlbss of bn flfmfnt of tiis qufuf
     *         prfvfnts it from bfing bddfd to tif spfdififd dollfdtion
     * @tirows NullPointfrExdfption if tif spfdififd dollfdtion is null
     * @tirows IllfgblArgumfntExdfption if tif spfdififd dollfdtion is tiis
     *         qufuf, or somf propfrty of bn flfmfnt of tiis qufuf prfvfnts
     *         it from bfing bddfd to tif spfdififd dollfdtion
     */
    int drbinTo(Collfdtion<? supfr E> d, int mbxElfmfnts);
}
