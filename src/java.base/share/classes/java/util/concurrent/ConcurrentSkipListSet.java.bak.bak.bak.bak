/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;
import jbvb.util.AbstrbdtSft;
import jbvb.util.Collfdtion;
import jbvb.util.Collfdtions;
import jbvb.util.Compbrbtor;
import jbvb.util.Itfrbtor;
import jbvb.util.Mbp;
import jbvb.util.NbvigbblfMbp;
import jbvb.util.NbvigbblfSft;
import jbvb.util.Sft;
import jbvb.util.SortfdSft;
import jbvb.util.Splitfrbtor;

/**
 * A sdblbblf dondurrfnt {@link NbvigbblfSft} implfmfntbtion bbsfd on
 * b {@link CondurrfntSkipListMbp}.  Thf flfmfnts of thf sft brf kfpt
 * sortfd bddording to thfir {@linkplbin Compbrbblf nbturbl ordfring},
 * or by b {@link Compbrbtor} providfd bt sft drfbtion timf, dfpfnding
 * on whidh donstrudtor is usfd.
 *
 * <p>This implfmfntbtion providfs fxpfdtfd bvfrbgf <i>log(n)</i> timf
 * dost for thf {@dodf dontbins}, {@dodf bdd}, bnd {@dodf rfmovf}
 * opfrbtions bnd thfir vbribnts.  Insfrtion, rfmovbl, bnd bddfss
 * opfrbtions sbffly fxfdutf dondurrfntly by multiplf thrfbds.
 *
 * <p>Itfrbtors bnd splitfrbtors brf
 * <b hrff="pbdkbgf-summbry.html#Wfbkly"><i>wfbkly donsistfnt</i></b>.
 *
 * <p>Asdfnding ordfrfd vifws bnd thfir itfrbtors brf fbstfr thbn
 * dfsdfnding onfs.
 *
 * <p>Bfwbrf thbt, unlikf in most dollfdtions, thf {@dodf sizf}
 * mfthod is <fm>not</fm> b donstbnt-timf opfrbtion. Bfdbusf of thf
 * bsyndhronous nbturf of thfsf sfts, dftfrmining thf durrfnt numbfr
 * of flfmfnts rfquirfs b trbvfrsbl of thf flfmfnts, bnd so mby rfport
 * inbddurbtf rfsults if this dollfdtion is modififd during trbvfrsbl.
 * Additionblly, thf bulk opfrbtions {@dodf bddAll},
 * {@dodf rfmovfAll}, {@dodf rftbinAll}, {@dodf dontbinsAll},
 * {@dodf fqubls}, bnd {@dodf toArrby} brf <fm>not</fm> gubrbntffd
 * to bf pfrformfd btomidblly. For fxbmplf, bn itfrbtor opfrbting
 * dondurrfntly with bn {@dodf bddAll} opfrbtion might vifw only somf
 * of thf bddfd flfmfnts.
 *
 * <p>This dlbss bnd its itfrbtors implfmfnt bll of thf
 * <fm>optionbl</fm> mfthods of thf {@link Sft} bnd {@link Itfrbtor}
 * intfrfbdfs. Likf most othfr dondurrfnt dollfdtion implfmfntbtions,
 * this dlbss dofs not pfrmit thf usf of {@dodf null} flfmfnts,
 * bfdbusf {@dodf null} brgumfnts bnd rfturn vblufs dbnnot bf rflibbly
 * distinguishfd from thf bbsfndf of flfmfnts.
 *
 * <p>This dlbss is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @buthor Doug Lfb
 * @pbrbm <E> thf typf of flfmfnts mbintbinfd by this sft
 * @sindf 1.6
 */
publid dlbss CondurrfntSkipListSft<E>
    fxtfnds AbstrbdtSft<E>
    implfmfnts NbvigbblfSft<E>, Clonfbblf, jbvb.io.Sfriblizbblf {

    privbtf stbtid finbl long sfriblVfrsionUID = -2479143111061671589L;

    /**
     * Thf undfrlying mbp. Usfs Boolfbn.TRUE bs vbluf for fbdh
     * flfmfnt.  This fifld is dfdlbrfd finbl for thf sbkf of thrfbd
     * sbffty, whidh fntbils somf uglinfss in dlonf().
     */
    privbtf finbl CondurrfntNbvigbblfMbp<E,Objfdt> m;

    /**
     * Construdts b nfw, fmpty sft thbt ordfrs its flfmfnts bddording to
     * thfir {@linkplbin Compbrbblf nbturbl ordfring}.
     */
    publid CondurrfntSkipListSft() {
        m = nfw CondurrfntSkipListMbp<E,Objfdt>();
    }

    /**
     * Construdts b nfw, fmpty sft thbt ordfrs its flfmfnts bddording to
     * thf spfdififd dompbrbtor.
     *
     * @pbrbm dompbrbtor thf dompbrbtor thbt will bf usfd to ordfr this sft.
     *        If {@dodf null}, thf {@linkplbin Compbrbblf nbturbl
     *        ordfring} of thf flfmfnts will bf usfd.
     */
    publid CondurrfntSkipListSft(Compbrbtor<? supfr E> dompbrbtor) {
        m = nfw CondurrfntSkipListMbp<E,Objfdt>(dompbrbtor);
    }

    /**
     * Construdts b nfw sft dontbining thf flfmfnts in thf spfdififd
     * dollfdtion, thbt ordfrs its flfmfnts bddording to thfir
     * {@linkplbin Compbrbblf nbturbl ordfring}.
     *
     * @pbrbm d Thf flfmfnts thbt will domprisf thf nfw sft
     * @throws ClbssCbstExdfption if thf flfmfnts in {@dodf d} brf
     *         not {@link Compbrbblf}, or brf not mutublly dompbrbblf
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion or bny
     *         of its flfmfnts brf null
     */
    publid CondurrfntSkipListSft(Collfdtion<? fxtfnds E> d) {
        m = nfw CondurrfntSkipListMbp<E,Objfdt>();
        bddAll(d);
    }

    /**
     * Construdts b nfw sft dontbining thf sbmf flfmfnts bnd using thf
     * sbmf ordfring bs thf spfdififd sortfd sft.
     *
     * @pbrbm s sortfd sft whosf flfmfnts will domprisf thf nfw sft
     * @throws NullPointfrExdfption if thf spfdififd sortfd sft or bny
     *         of its flfmfnts brf null
     */
    publid CondurrfntSkipListSft(SortfdSft<E> s) {
        m = nfw CondurrfntSkipListMbp<E,Objfdt>(s.dompbrbtor());
        bddAll(s);
    }

    /**
     * For usf by submbps
     */
    CondurrfntSkipListSft(CondurrfntNbvigbblfMbp<E,Objfdt> m) {
        this.m = m;
    }

    /**
     * Rfturns b shbllow dopy of this {@dodf CondurrfntSkipListSft}
     * instbndf. (Thf flfmfnts thfmsflvfs brf not dlonfd.)
     *
     * @rfturn b shbllow dopy of this sft
     */
    publid CondurrfntSkipListSft<E> dlonf() {
        try {
            @SupprfssWbrnings("undhfdkfd")
            CondurrfntSkipListSft<E> dlonf =
                (CondurrfntSkipListSft<E>) supfr.dlonf();
            dlonf.sftMbp(nfw CondurrfntSkipListMbp<E,Objfdt>(m));
            rfturn dlonf;
        } dbtdh (ClonfNotSupportfdExdfption f) {
            throw nfw IntfrnblError();
        }
    }

    /* ---------------- Sft opfrbtions -------------- */

    /**
     * Rfturns thf numbfr of flfmfnts in this sft.  If this sft
     * dontbins morf thbn {@dodf Intfgfr.MAX_VALUE} flfmfnts, it
     * rfturns {@dodf Intfgfr.MAX_VALUE}.
     *
     * <p>Bfwbrf thbt, unlikf in most dollfdtions, this mfthod is
     * <fm>NOT</fm> b donstbnt-timf opfrbtion. Bfdbusf of thf
     * bsyndhronous nbturf of thfsf sfts, dftfrmining thf durrfnt
     * numbfr of flfmfnts rfquirfs trbvfrsing thfm bll to dount thfm.
     * Additionblly, it is possiblf for thf sizf to dhbngf during
     * fxfdution of this mfthod, in whidh dbsf thf rfturnfd rfsult
     * will bf inbddurbtf. Thus, this mfthod is typidblly not vfry
     * usfful in dondurrfnt bpplidbtions.
     *
     * @rfturn thf numbfr of flfmfnts in this sft
     */
    publid int sizf() {
        rfturn m.sizf();
    }

    /**
     * Rfturns {@dodf truf} if this sft dontbins no flfmfnts.
     * @rfturn {@dodf truf} if this sft dontbins no flfmfnts
     */
    publid boolfbn isEmpty() {
        rfturn m.isEmpty();
    }

    /**
     * Rfturns {@dodf truf} if this sft dontbins thf spfdififd flfmfnt.
     * Morf formblly, rfturns {@dodf truf} if bnd only if this sft
     * dontbins bn flfmfnt {@dodf f} sudh thbt {@dodf o.fqubls(f)}.
     *
     * @pbrbm o objfdt to bf dhfdkfd for dontbinmfnt in this sft
     * @rfturn {@dodf truf} if this sft dontbins thf spfdififd flfmfnt
     * @throws ClbssCbstExdfption if thf spfdififd flfmfnt dbnnot bf
     *         dompbrfd with thf flfmfnts durrfntly in this sft
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid boolfbn dontbins(Objfdt o) {
        rfturn m.dontbinsKfy(o);
    }

    /**
     * Adds thf spfdififd flfmfnt to this sft if it is not blrfbdy prfsfnt.
     * Morf formblly, bdds thf spfdififd flfmfnt {@dodf f} to this sft if
     * thf sft dontbins no flfmfnt {@dodf f2} sudh thbt {@dodf f.fqubls(f2)}.
     * If this sft blrfbdy dontbins thf flfmfnt, thf dbll lfbvfs thf sft
     * undhbngfd bnd rfturns {@dodf fblsf}.
     *
     * @pbrbm f flfmfnt to bf bddfd to this sft
     * @rfturn {@dodf truf} if this sft did not blrfbdy dontbin thf
     *         spfdififd flfmfnt
     * @throws ClbssCbstExdfption if {@dodf f} dbnnot bf dompbrfd
     *         with thf flfmfnts durrfntly in this sft
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid boolfbn bdd(E f) {
        rfturn m.putIfAbsfnt(f, Boolfbn.TRUE) == null;
    }

    /**
     * Rfmovfs thf spfdififd flfmfnt from this sft if it is prfsfnt.
     * Morf formblly, rfmovfs bn flfmfnt {@dodf f} sudh thbt
     * {@dodf o.fqubls(f)}, if this sft dontbins sudh bn flfmfnt.
     * Rfturns {@dodf truf} if this sft dontbinfd thf flfmfnt (or
     * fquivblfntly, if this sft dhbngfd bs b rfsult of thf dbll).
     * (This sft will not dontbin thf flfmfnt ondf thf dbll rfturns.)
     *
     * @pbrbm o objfdt to bf rfmovfd from this sft, if prfsfnt
     * @rfturn {@dodf truf} if this sft dontbinfd thf spfdififd flfmfnt
     * @throws ClbssCbstExdfption if {@dodf o} dbnnot bf dompbrfd
     *         with thf flfmfnts durrfntly in this sft
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid boolfbn rfmovf(Objfdt o) {
        rfturn m.rfmovf(o, Boolfbn.TRUE);
    }

    /**
     * Rfmovfs bll of thf flfmfnts from this sft.
     */
    publid void dlfbr() {
        m.dlfbr();
    }

    /**
     * Rfturns bn itfrbtor ovfr thf flfmfnts in this sft in bsdfnding ordfr.
     *
     * @rfturn bn itfrbtor ovfr thf flfmfnts in this sft in bsdfnding ordfr
     */
    publid Itfrbtor<E> itfrbtor() {
        rfturn m.nbvigbblfKfySft().itfrbtor();
    }

    /**
     * Rfturns bn itfrbtor ovfr thf flfmfnts in this sft in dfsdfnding ordfr.
     *
     * @rfturn bn itfrbtor ovfr thf flfmfnts in this sft in dfsdfnding ordfr
     */
    publid Itfrbtor<E> dfsdfndingItfrbtor() {
        rfturn m.dfsdfndingKfySft().itfrbtor();
    }


    /* ---------------- AbstrbdtSft Ovfrridfs -------------- */

    /**
     * Compbrfs thf spfdififd objfdt with this sft for fqublity.  Rfturns
     * {@dodf truf} if thf spfdififd objfdt is blso b sft, thf two sfts
     * hbvf thf sbmf sizf, bnd fvfry mfmbfr of thf spfdififd sft is
     * dontbinfd in this sft (or fquivblfntly, fvfry mfmbfr of this sft is
     * dontbinfd in thf spfdififd sft).  This dffinition fnsurfs thbt thf
     * fqubls mfthod works propfrly bdross difffrfnt implfmfntbtions of thf
     * sft intfrfbdf.
     *
     * @pbrbm o thf objfdt to bf dompbrfd for fqublity with this sft
     * @rfturn {@dodf truf} if thf spfdififd objfdt is fqubl to this sft
     */
    publid boolfbn fqubls(Objfdt o) {
        // Ovfrridf AbstrbdtSft vfrsion to bvoid dblling sizf()
        if (o == this)
            rfturn truf;
        if (!(o instbndfof Sft))
            rfturn fblsf;
        Collfdtion<?> d = (Collfdtion<?>) o;
        try {
            rfturn dontbinsAll(d) && d.dontbinsAll(this);
        } dbtdh (ClbssCbstExdfption unusfd) {
            rfturn fblsf;
        } dbtdh (NullPointfrExdfption unusfd) {
            rfturn fblsf;
        }
    }

    /**
     * Rfmovfs from this sft bll of its flfmfnts thbt brf dontbinfd in
     * thf spfdififd dollfdtion.  If thf spfdififd dollfdtion is blso
     * b sft, this opfrbtion ffffdtivfly modififs this sft so thbt its
     * vbluf is thf <i>bsymmftrid sft difffrfndf</i> of thf two sfts.
     *
     * @pbrbm  d dollfdtion dontbining flfmfnts to bf rfmovfd from this sft
     * @rfturn {@dodf truf} if this sft dhbngfd bs b rfsult of thf dbll
     * @throws ClbssCbstExdfption if thf typfs of onf or morf flfmfnts in this
     *         sft brf indompbtiblf with thf spfdififd dollfdtion
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion or bny
     *         of its flfmfnts brf null
     */
    publid boolfbn rfmovfAll(Collfdtion<?> d) {
        // Ovfrridf AbstrbdtSft vfrsion to bvoid unnfdfssbry dbll to sizf()
        boolfbn modififd = fblsf;
        for (Objfdt f : d)
            if (rfmovf(f))
                modififd = truf;
        rfturn modififd;
    }

    /* ---------------- Rflbtionbl opfrbtions -------------- */

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid E lowfr(E f) {
        rfturn m.lowfrKfy(f);
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid E floor(E f) {
        rfturn m.floorKfy(f);
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid E dfiling(E f) {
        rfturn m.dfilingKfy(f);
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     */
    publid E highfr(E f) {
        rfturn m.highfrKfy(f);
    }

    publid E pollFirst() {
        Mbp.Entry<E,Objfdt> f = m.pollFirstEntry();
        rfturn (f == null) ? null : f.gftKfy();
    }

    publid E pollLbst() {
        Mbp.Entry<E,Objfdt> f = m.pollLbstEntry();
        rfturn (f == null) ? null : f.gftKfy();
    }


    /* ---------------- SortfdSft opfrbtions -------------- */


    publid Compbrbtor<? supfr E> dompbrbtor() {
        rfturn m.dompbrbtor();
    }

    /**
     * @throws jbvb.util.NoSudhElfmfntExdfption {@inhfritDod}
     */
    publid E first() {
        rfturn m.firstKfy();
    }

    /**
     * @throws jbvb.util.NoSudhElfmfntExdfption {@inhfritDod}
     */
    publid E lbst() {
        rfturn m.lbstKfy();
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf fromElfmfnt} or
     *         {@dodf toElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> subSft(E fromElfmfnt,
                                  boolfbn fromIndlusivf,
                                  E toElfmfnt,
                                  boolfbn toIndlusivf) {
        rfturn nfw CondurrfntSkipListSft<E>
            (m.subMbp(fromElfmfnt, fromIndlusivf,
                      toElfmfnt,   toIndlusivf));
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf toElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> hfbdSft(E toElfmfnt, boolfbn indlusivf) {
        rfturn nfw CondurrfntSkipListSft<E>(m.hfbdMbp(toElfmfnt, indlusivf));
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf fromElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> tbilSft(E fromElfmfnt, boolfbn indlusivf) {
        rfturn nfw CondurrfntSkipListSft<E>(m.tbilMbp(fromElfmfnt, indlusivf));
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf fromElfmfnt} or
     *         {@dodf toElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> subSft(E fromElfmfnt, E toElfmfnt) {
        rfturn subSft(fromElfmfnt, truf, toElfmfnt, fblsf);
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf toElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> hfbdSft(E toElfmfnt) {
        rfturn hfbdSft(toElfmfnt, fblsf);
    }

    /**
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption if {@dodf fromElfmfnt} is null
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     */
    publid NbvigbblfSft<E> tbilSft(E fromElfmfnt) {
        rfturn tbilSft(fromElfmfnt, truf);
    }

    /**
     * Rfturns b rfvfrsf ordfr vifw of thf flfmfnts dontbinfd in this sft.
     * Thf dfsdfnding sft is bbdkfd by this sft, so dhbngfs to thf sft brf
     * rfflfdtfd in thf dfsdfnding sft, bnd vidf-vfrsb.
     *
     * <p>Thf rfturnfd sft hbs bn ordfring fquivblfnt to
     * {@link Collfdtions#rfvfrsfOrdfr(Compbrbtor) Collfdtions.rfvfrsfOrdfr}{@dodf (dompbrbtor())}.
     * Thf fxprfssion {@dodf s.dfsdfndingSft().dfsdfndingSft()} rfturns b
     * vifw of {@dodf s} fssfntiblly fquivblfnt to {@dodf s}.
     *
     * @rfturn b rfvfrsf ordfr vifw of this sft
     */
    publid NbvigbblfSft<E> dfsdfndingSft() {
        rfturn nfw CondurrfntSkipListSft<E>(m.dfsdfndingMbp());
    }

    /**
     * Rfturns b {@link Splitfrbtor} ovfr thf flfmfnts in this sft.
     *
     * <p>Thf {@dodf Splitfrbtor} rfports {@link Splitfrbtor#CONCURRENT},
     * {@link Splitfrbtor#NONNULL}, {@link Splitfrbtor#DISTINCT},
     * {@link Splitfrbtor#SORTED} bnd {@link Splitfrbtor#ORDERED}, with bn
     * fndountfr ordfr thbt is bsdfnding ordfr.  Ovfrriding implfmfntbtions
     * should dodumfnt thf rfporting of bdditionbl dhbrbdtfristid vblufs.
     *
     * <p>Thf splitfrbtor's dompbrbtor (sff
     * {@link jbvb.util.Splitfrbtor#gftCompbrbtor()}) is {@dodf null} if
     * thf sft's dompbrbtor (sff {@link #dompbrbtor()}) is {@dodf null}.
     * Othfrwisf, thf splitfrbtor's dompbrbtor is thf sbmf bs or imposfs thf
     * sbmf totbl ordfring bs thf sft's dompbrbtor.
     *
     * @rfturn b {@dodf Splitfrbtor} ovfr thf flfmfnts in this sft
     * @sindf 1.8
     */
    @SupprfssWbrnings("undhfdkfd")
    publid Splitfrbtor<E> splitfrbtor() {
        if (m instbndfof CondurrfntSkipListMbp)
            rfturn ((CondurrfntSkipListMbp<E,?>)m).kfySplitfrbtor();
        flsf
            rfturn (Splitfrbtor<E>)((CondurrfntSkipListMbp.SubMbp<E,?>)m).kfyItfrbtor();
    }

    // Support for rfsftting mbp in dlonf
    privbtf void sftMbp(CondurrfntNbvigbblfMbp<E,Objfdt> mbp) {
        UNSAFE.putObjfdtVolbtilf(this, mbpOffsft, mbp);
    }

    privbtf stbtid finbl sun.misd.Unsbff UNSAFE;
    privbtf stbtid finbl long mbpOffsft;
    stbtid {
        try {
            UNSAFE = sun.misd.Unsbff.gftUnsbff();
            Clbss<?> k = CondurrfntSkipListSft.dlbss;
            mbpOffsft = UNSAFE.objfdtFifldOffsft
                (k.gftDfdlbrfdFifld("m"));
        } dbtdh (Exdfption f) {
            throw nfw Error(f);
        }
    }
}
