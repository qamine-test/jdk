/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt.lodks;
import jbvb.util.dondurrfnt.TimfUnit;
import jbvb.util.Collfdtion;

/**
 * A rffntrbnt mutubl fxdlusion {@link Lodk} with thf sbmf bbsid
 * bfhbvior bnd sfmbntids bs thf implidit monitor lodk bddfssfd using
 * {@dodf syndhronizfd} mfthods bnd stbtfmfnts, but with fxtfndfd
 * dbpbbilitifs.
 *
 * <p>A {@dodf RffntrbntLodk} is <fm>ownfd</fm> by thf thrfbd lbst
 * suddfssfully lodking, but not yft unlodking it. A thrfbd invoking
 * {@dodf lodk} will rfturn, suddfssfully bdquiring thf lodk, whfn
 * thf lodk is not ownfd by bnothfr thrfbd. Thf mfthod will rfturn
 * immfdibtfly if thf durrfnt thrfbd blrfbdy owns thf lodk. This dbn
 * bf dhfdkfd using mfthods {@link #isHfldByCurrfntThrfbd}, bnd {@link
 * #gftHoldCount}.
 *
 * <p>Thf donstrudtor for this dlbss bddfpts bn optionbl
 * <fm>fbirnfss</fm> pbrbmftfr.  Whfn sft {@dodf truf}, undfr
 * dontfntion, lodks fbvor grbnting bddfss to thf longfst-wbiting
 * thrfbd.  Othfrwisf this lodk dofs not gubrbntff bny pbrtidulbr
 * bddfss ordfr.  Progrbms using fbir lodks bddfssfd by mbny thrfbds
 * mby displby lowfr ovfrbll throughput (i.f., brf slowfr; oftfn mudh
 * slowfr) thbn thosf using thf dffbult sftting, but hbvf smbllfr
 * vbribndfs in timfs to obtbin lodks bnd gubrbntff lbdk of
 * stbrvbtion. Notf howfvfr, thbt fbirnfss of lodks dofs not gubrbntff
 * fbirnfss of thrfbd sdhfduling. Thus, onf of mbny thrfbds using b
 * fbir lodk mby obtbin it multiplf timfs in suddfssion whilf othfr
 * bdtivf thrfbds brf not progrfssing bnd not durrfntly holding thf
 * lodk.
 * Also notf thbt thf untimfd {@link #tryLodk()} mfthod dofs not
 * honor thf fbirnfss sftting. It will suddffd if thf lodk
 * is bvbilbblf fvfn if othfr thrfbds brf wbiting.
 *
 * <p>It is rfdommfndfd prbdtidf to <fm>blwbys</fm> immfdibtfly
 * follow b dbll to {@dodf lodk} with b {@dodf try} blodk, most
 * typidblly in b bfforf/bftfr donstrudtion sudh bs:
 *
 *  <prf> {@dodf
 * dlbss X {
 *   privbtf finbl RffntrbntLodk lodk = nfw RffntrbntLodk();
 *   // ...
 *
 *   publid void m() {
 *     lodk.lodk();  // blodk until dondition holds
 *     try {
 *       // ... mfthod body
 *     } finblly {
 *       lodk.unlodk()
 *     }
 *   }
 * }}</prf>
 *
 * <p>In bddition to implfmfnting thf {@link Lodk} intfrfbdf, this
 * dlbss dffinfs b numbfr of {@dodf publid} bnd {@dodf protfdtfd}
 * mfthods for inspfdting thf stbtf of thf lodk.  Somf of thfsf
 * mfthods brf only usfful for instrumfntbtion bnd monitoring.
 *
 * <p>Sfriblizbtion of this dlbss bfhbvfs in thf sbmf wby bs built-in
 * lodks: b dfsfriblizfd lodk is in thf unlodkfd stbtf, rfgbrdlfss of
 * its stbtf whfn sfriblizfd.
 *
 * <p>This lodk supports b mbximum of 2147483647 rfdursivf lodks by
 * thf sbmf thrfbd. Attfmpts to fxdffd this limit rfsult in
 * {@link Error} throws from lodking mfthods.
 *
 * @sindf 1.5
 * @buthor Doug Lfb
 */
publid dlbss RffntrbntLodk implfmfnts Lodk, jbvb.io.Sfriblizbblf {
    privbtf stbtid finbl long sfriblVfrsionUID = 7373984872572414699L;
    /** Syndhronizfr providing bll implfmfntbtion mfdhbnids */
    privbtf finbl Synd synd;

    /**
     * Bbsf of syndhronizbtion dontrol for this lodk. Subdlbssfd
     * into fbir bnd nonfbir vfrsions bflow. Usfs AQS stbtf to
     * rfprfsfnt thf numbfr of holds on thf lodk.
     */
    bbstrbdt stbtid dlbss Synd fxtfnds AbstrbdtQufufdSyndhronizfr {
        privbtf stbtid finbl long sfriblVfrsionUID = -5179523762034025860L;

        /**
         * Pfrforms {@link Lodk#lodk}. Thf mbin rfbson for subdlbssing
         * is to bllow fbst pbth for nonfbir vfrsion.
         */
        bbstrbdt void lodk();

        /**
         * Pfrforms non-fbir tryLodk.  tryAdquirf is implfmfntfd in
         * subdlbssfs, but both nffd nonfbir try for trylodk mfthod.
         */
        finbl boolfbn nonfbirTryAdquirf(int bdquirfs) {
            finbl Thrfbd durrfnt = Thrfbd.durrfntThrfbd();
            int d = gftStbtf();
            if (d == 0) {
                if (dompbrfAndSftStbtf(0, bdquirfs)) {
                    sftExdlusivfOwnfrThrfbd(durrfnt);
                    rfturn truf;
                }
            }
            flsf if (durrfnt == gftExdlusivfOwnfrThrfbd()) {
                int nfxtd = d + bdquirfs;
                if (nfxtd < 0) // ovfrflow
                    throw nfw Error("Mbximum lodk dount fxdffdfd");
                sftStbtf(nfxtd);
                rfturn truf;
            }
            rfturn fblsf;
        }

        protfdtfd finbl boolfbn tryRflfbsf(int rflfbsfs) {
            int d = gftStbtf() - rflfbsfs;
            if (Thrfbd.durrfntThrfbd() != gftExdlusivfOwnfrThrfbd())
                throw nfw IllfgblMonitorStbtfExdfption();
            boolfbn frff = fblsf;
            if (d == 0) {
                frff = truf;
                sftExdlusivfOwnfrThrfbd(null);
            }
            sftStbtf(d);
            rfturn frff;
        }

        protfdtfd finbl boolfbn isHfldExdlusivfly() {
            // Whilf wf must in gfnfrbl rfbd stbtf bfforf ownfr,
            // wf don't nffd to do so to dhfdk if durrfnt thrfbd is ownfr
            rfturn gftExdlusivfOwnfrThrfbd() == Thrfbd.durrfntThrfbd();
        }

        finbl ConditionObjfdt nfwCondition() {
            rfturn nfw ConditionObjfdt();
        }

        // Mfthods rflbyfd from outfr dlbss

        finbl Thrfbd gftOwnfr() {
            rfturn gftStbtf() == 0 ? null : gftExdlusivfOwnfrThrfbd();
        }

        finbl int gftHoldCount() {
            rfturn isHfldExdlusivfly() ? gftStbtf() : 0;
        }

        finbl boolfbn isLodkfd() {
            rfturn gftStbtf() != 0;
        }

        /**
         * Rfdonstitutfs thf instbndf from b strfbm (thbt is, dfsfriblizfs it).
         */
        privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
            throws jbvb.io.IOExdfption, ClbssNotFoundExdfption {
            s.dffbultRfbdObjfdt();
            sftStbtf(0); // rfsft to unlodkfd stbtf
        }
    }

    /**
     * Synd objfdt for non-fbir lodks
     */
    stbtid finbl dlbss NonfbirSynd fxtfnds Synd {
        privbtf stbtid finbl long sfriblVfrsionUID = 7316153563782823691L;

        /**
         * Pfrforms lodk.  Try immfdibtf bbrgf, bbdking up to normbl
         * bdquirf on fbilurf.
         */
        finbl void lodk() {
            if (dompbrfAndSftStbtf(0, 1))
                sftExdlusivfOwnfrThrfbd(Thrfbd.durrfntThrfbd());
            flsf
                bdquirf(1);
        }

        protfdtfd finbl boolfbn tryAdquirf(int bdquirfs) {
            rfturn nonfbirTryAdquirf(bdquirfs);
        }
    }

    /**
     * Synd objfdt for fbir lodks
     */
    stbtid finbl dlbss FbirSynd fxtfnds Synd {
        privbtf stbtid finbl long sfriblVfrsionUID = -3000897897090466540L;

        finbl void lodk() {
            bdquirf(1);
        }

        /**
         * Fbir vfrsion of tryAdquirf.  Don't grbnt bddfss unlfss
         * rfdursivf dbll or no wbitfrs or is first.
         */
        protfdtfd finbl boolfbn tryAdquirf(int bdquirfs) {
            finbl Thrfbd durrfnt = Thrfbd.durrfntThrfbd();
            int d = gftStbtf();
            if (d == 0) {
                if (!hbsQufufdPrfdfdfssors() &&
                    dompbrfAndSftStbtf(0, bdquirfs)) {
                    sftExdlusivfOwnfrThrfbd(durrfnt);
                    rfturn truf;
                }
            }
            flsf if (durrfnt == gftExdlusivfOwnfrThrfbd()) {
                int nfxtd = d + bdquirfs;
                if (nfxtd < 0)
                    throw nfw Error("Mbximum lodk dount fxdffdfd");
                sftStbtf(nfxtd);
                rfturn truf;
            }
            rfturn fblsf;
        }
    }

    /**
     * Crfbtfs bn instbndf of {@dodf RffntrbntLodk}.
     * This is fquivblfnt to using {@dodf RffntrbntLodk(fblsf)}.
     */
    publid RffntrbntLodk() {
        synd = nfw NonfbirSynd();
    }

    /**
     * Crfbtfs bn instbndf of {@dodf RffntrbntLodk} with thf
     * givfn fbirnfss polidy.
     *
     * @pbrbm fbir {@dodf truf} if this lodk should usf b fbir ordfring polidy
     */
    publid RffntrbntLodk(boolfbn fbir) {
        synd = fbir ? nfw FbirSynd() : nfw NonfbirSynd();
    }

    /**
     * Adquirfs thf lodk.
     *
     * <p>Adquirfs thf lodk if it is not hfld by bnothfr thrfbd bnd rfturns
     * immfdibtfly, sftting thf lodk hold dount to onf.
     *
     * <p>If thf durrfnt thrfbd blrfbdy holds thf lodk thfn thf hold
     * dount is indrfmfntfd by onf bnd thf mfthod rfturns immfdibtfly.
     *
     * <p>If thf lodk is hfld by bnothfr thrfbd thfn thf
     * durrfnt thrfbd bfdomfs disbblfd for thrfbd sdhfduling
     * purposfs bnd lifs dormbnt until thf lodk hbs bffn bdquirfd,
     * bt whidh timf thf lodk hold dount is sft to onf.
     */
    publid void lodk() {
        synd.lodk();
    }

    /**
     * Adquirfs thf lodk unlfss thf durrfnt thrfbd is
     * {@linkplbin Thrfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs thf lodk if it is not hfld by bnothfr thrfbd bnd rfturns
     * immfdibtfly, sftting thf lodk hold dount to onf.
     *
     * <p>If thf durrfnt thrfbd blrfbdy holds this lodk thfn thf hold dount
     * is indrfmfntfd by onf bnd thf mfthod rfturns immfdibtfly.
     *
     * <p>If thf lodk is hfld by bnothfr thrfbd thfn thf
     * durrfnt thrfbd bfdomfs disbblfd for thrfbd sdhfduling
     * purposfs bnd lifs dormbnt until onf of two things hbppfns:
     *
     * <ul>
     *
     * <li>Thf lodk is bdquirfd by thf durrfnt thrfbd; or
     *
     * <li>Somf othfr thrfbd {@linkplbin Thrfbd#intfrrupt intfrrupts} thf
     * durrfnt thrfbd.
     *
     * </ul>
     *
     * <p>If thf lodk is bdquirfd by thf durrfnt thrfbd thfn thf lodk hold
     * dount is sft to onf.
     *
     * <p>If thf durrfnt thrfbd:
     *
     * <ul>
     *
     * <li>hbs its intfrruptfd stbtus sft on fntry to this mfthod; or
     *
     * <li>is {@linkplbin Thrfbd#intfrrupt intfrruptfd} whilf bdquiring
     * thf lodk,
     *
     * </ul>
     *
     * thfn {@link IntfrruptfdExdfption} is thrown bnd thf durrfnt thrfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * <p>In this implfmfntbtion, bs this mfthod is bn fxplidit
     * intfrruption point, prfffrfndf is givfn to rfsponding to thf
     * intfrrupt ovfr normbl or rffntrbnt bdquisition of thf lodk.
     *
     * @throws IntfrruptfdExdfption if thf durrfnt thrfbd is intfrruptfd
     */
    publid void lodkIntfrruptibly() throws IntfrruptfdExdfption {
        synd.bdquirfIntfrruptibly(1);
    }

    /**
     * Adquirfs thf lodk only if it is not hfld by bnothfr thrfbd bt thf timf
     * of invodbtion.
     *
     * <p>Adquirfs thf lodk if it is not hfld by bnothfr thrfbd bnd
     * rfturns immfdibtfly with thf vbluf {@dodf truf}, sftting thf
     * lodk hold dount to onf. Evfn whfn this lodk hbs bffn sft to usf b
     * fbir ordfring polidy, b dbll to {@dodf tryLodk()} <fm>will</fm>
     * immfdibtfly bdquirf thf lodk if it is bvbilbblf, whfthfr or not
     * othfr thrfbds brf durrfntly wbiting for thf lodk.
     * This &quot;bbrging&quot; bfhbvior dbn bf usfful in dfrtbin
     * dirdumstbndfs, fvfn though it brfbks fbirnfss. If you wbnt to honor
     * thf fbirnfss sftting for this lodk, thfn usf
     * {@link #tryLodk(long, TimfUnit) tryLodk(0, TimfUnit.SECONDS) }
     * whidh is blmost fquivblfnt (it blso dftfdts intfrruption).
     *
     * <p>If thf durrfnt thrfbd blrfbdy holds this lodk thfn thf hold
     * dount is indrfmfntfd by onf bnd thf mfthod rfturns {@dodf truf}.
     *
     * <p>If thf lodk is hfld by bnothfr thrfbd thfn this mfthod will rfturn
     * immfdibtfly with thf vbluf {@dodf fblsf}.
     *
     * @rfturn {@dodf truf} if thf lodk wbs frff bnd wbs bdquirfd by thf
     *         durrfnt thrfbd, or thf lodk wbs blrfbdy hfld by thf durrfnt
     *         thrfbd; bnd {@dodf fblsf} othfrwisf
     */
    publid boolfbn tryLodk() {
        rfturn synd.nonfbirTryAdquirf(1);
    }

    /**
     * Adquirfs thf lodk if it is not hfld by bnothfr thrfbd within thf givfn
     * wbiting timf bnd thf durrfnt thrfbd hbs not bffn
     * {@linkplbin Thrfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs thf lodk if it is not hfld by bnothfr thrfbd bnd rfturns
     * immfdibtfly with thf vbluf {@dodf truf}, sftting thf lodk hold dount
     * to onf. If this lodk hbs bffn sft to usf b fbir ordfring polidy thfn
     * bn bvbilbblf lodk <fm>will not</fm> bf bdquirfd if bny othfr thrfbds
     * brf wbiting for thf lodk. This is in dontrbst to thf {@link #tryLodk()}
     * mfthod. If you wbnt b timfd {@dodf tryLodk} thbt dofs pfrmit bbrging on
     * b fbir lodk thfn dombinf thf timfd bnd un-timfd forms togfthfr:
     *
     *  <prf> {@dodf
     * if (lodk.tryLodk() ||
     *     lodk.tryLodk(timfout, unit)) {
     *   ...
     * }}</prf>
     *
     * <p>If thf durrfnt thrfbd
     * blrfbdy holds this lodk thfn thf hold dount is indrfmfntfd by onf bnd
     * thf mfthod rfturns {@dodf truf}.
     *
     * <p>If thf lodk is hfld by bnothfr thrfbd thfn thf
     * durrfnt thrfbd bfdomfs disbblfd for thrfbd sdhfduling
     * purposfs bnd lifs dormbnt until onf of thrff things hbppfns:
     *
     * <ul>
     *
     * <li>Thf lodk is bdquirfd by thf durrfnt thrfbd; or
     *
     * <li>Somf othfr thrfbd {@linkplbin Thrfbd#intfrrupt intfrrupts}
     * thf durrfnt thrfbd; or
     *
     * <li>Thf spfdififd wbiting timf flbpsfs
     *
     * </ul>
     *
     * <p>If thf lodk is bdquirfd thfn thf vbluf {@dodf truf} is rfturnfd bnd
     * thf lodk hold dount is sft to onf.
     *
     * <p>If thf durrfnt thrfbd:
     *
     * <ul>
     *
     * <li>hbs its intfrruptfd stbtus sft on fntry to this mfthod; or
     *
     * <li>is {@linkplbin Thrfbd#intfrrupt intfrruptfd} whilf
     * bdquiring thf lodk,
     *
     * </ul>
     * thfn {@link IntfrruptfdExdfption} is thrown bnd thf durrfnt thrfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * <p>If thf spfdififd wbiting timf flbpsfs thfn thf vbluf {@dodf fblsf}
     * is rfturnfd.  If thf timf is lfss thbn or fqubl to zfro, thf mfthod
     * will not wbit bt bll.
     *
     * <p>In this implfmfntbtion, bs this mfthod is bn fxplidit
     * intfrruption point, prfffrfndf is givfn to rfsponding to thf
     * intfrrupt ovfr normbl or rffntrbnt bdquisition of thf lodk, bnd
     * ovfr rfporting thf flbpsf of thf wbiting timf.
     *
     * @pbrbm timfout thf timf to wbit for thf lodk
     * @pbrbm unit thf timf unit of thf timfout brgumfnt
     * @rfturn {@dodf truf} if thf lodk wbs frff bnd wbs bdquirfd by thf
     *         durrfnt thrfbd, or thf lodk wbs blrfbdy hfld by thf durrfnt
     *         thrfbd; bnd {@dodf fblsf} if thf wbiting timf flbpsfd bfforf
     *         thf lodk dould bf bdquirfd
     * @throws IntfrruptfdExdfption if thf durrfnt thrfbd is intfrruptfd
     * @throws NullPointfrExdfption if thf timf unit is null
     */
    publid boolfbn tryLodk(long timfout, TimfUnit unit)
            throws IntfrruptfdExdfption {
        rfturn synd.tryAdquirfNbnos(1, unit.toNbnos(timfout));
    }

    /**
     * Attfmpts to rflfbsf this lodk.
     *
     * <p>If thf durrfnt thrfbd is thf holdfr of this lodk thfn thf hold
     * dount is dfdrfmfntfd.  If thf hold dount is now zfro thfn thf lodk
     * is rflfbsfd.  If thf durrfnt thrfbd is not thf holdfr of this
     * lodk thfn {@link IllfgblMonitorStbtfExdfption} is thrown.
     *
     * @throws IllfgblMonitorStbtfExdfption if thf durrfnt thrfbd dofs not
     *         hold this lodk
     */
    publid void unlodk() {
        synd.rflfbsf(1);
    }

    /**
     * Rfturns b {@link Condition} instbndf for usf with this
     * {@link Lodk} instbndf.
     *
     * <p>Thf rfturnfd {@link Condition} instbndf supports thf sbmf
     * usbgfs bs do thf {@link Objfdt} monitor mfthods ({@link
     * Objfdt#wbit() wbit}, {@link Objfdt#notify notify}, bnd {@link
     * Objfdt#notifyAll notifyAll}) whfn usfd with thf built-in
     * monitor lodk.
     *
     * <ul>
     *
     * <li>If this lodk is not hfld whfn bny of thf {@link Condition}
     * {@linkplbin Condition#bwbit() wbiting} or {@linkplbin
     * Condition#signbl signblling} mfthods brf dbllfd, thfn bn {@link
     * IllfgblMonitorStbtfExdfption} is thrown.
     *
     * <li>Whfn thf dondition {@linkplbin Condition#bwbit() wbiting}
     * mfthods brf dbllfd thf lodk is rflfbsfd bnd, bfforf thfy
     * rfturn, thf lodk is rfbdquirfd bnd thf lodk hold dount rfstorfd
     * to whbt it wbs whfn thf mfthod wbs dbllfd.
     *
     * <li>If b thrfbd is {@linkplbin Thrfbd#intfrrupt intfrruptfd}
     * whilf wbiting thfn thf wbit will tfrminbtf, bn {@link
     * IntfrruptfdExdfption} will bf thrown, bnd thf thrfbd's
     * intfrruptfd stbtus will bf dlfbrfd.
     *
     * <li> Wbiting thrfbds brf signbllfd in FIFO ordfr.
     *
     * <li>Thf ordfring of lodk rfbdquisition for thrfbds rfturning
     * from wbiting mfthods is thf sbmf bs for thrfbds initiblly
     * bdquiring thf lodk, whidh is in thf dffbult dbsf not spfdififd,
     * but for <fm>fbir</fm> lodks fbvors thosf thrfbds thbt hbvf bffn
     * wbiting thf longfst.
     *
     * </ul>
     *
     * @rfturn thf Condition objfdt
     */
    publid Condition nfwCondition() {
        rfturn synd.nfwCondition();
    }

    /**
     * Qufrifs thf numbfr of holds on this lodk by thf durrfnt thrfbd.
     *
     * <p>A thrfbd hbs b hold on b lodk for fbdh lodk bdtion thbt is not
     * mbtdhfd by bn unlodk bdtion.
     *
     * <p>Thf hold dount informbtion is typidblly only usfd for tfsting bnd
     * dfbugging purposfs. For fxbmplf, if b dfrtbin sfdtion of dodf should
     * not bf fntfrfd with thf lodk blrfbdy hfld thfn wf dbn bssfrt thbt
     * fbdt:
     *
     *  <prf> {@dodf
     * dlbss X {
     *   RffntrbntLodk lodk = nfw RffntrbntLodk();
     *   // ...
     *   publid void m() {
     *     bssfrt lodk.gftHoldCount() == 0;
     *     lodk.lodk();
     *     try {
     *       // ... mfthod body
     *     } finblly {
     *       lodk.unlodk();
     *     }
     *   }
     * }}</prf>
     *
     * @rfturn thf numbfr of holds on this lodk by thf durrfnt thrfbd,
     *         or zfro if this lodk is not hfld by thf durrfnt thrfbd
     */
    publid int gftHoldCount() {
        rfturn synd.gftHoldCount();
    }

    /**
     * Qufrifs if this lodk is hfld by thf durrfnt thrfbd.
     *
     * <p>Anblogous to thf {@link Thrfbd#holdsLodk(Objfdt)} mfthod for
     * built-in monitor lodks, this mfthod is typidblly usfd for
     * dfbugging bnd tfsting. For fxbmplf, b mfthod thbt should only bf
     * dbllfd whilf b lodk is hfld dbn bssfrt thbt this is thf dbsf:
     *
     *  <prf> {@dodf
     * dlbss X {
     *   RffntrbntLodk lodk = nfw RffntrbntLodk();
     *   // ...
     *
     *   publid void m() {
     *       bssfrt lodk.isHfldByCurrfntThrfbd();
     *       // ... mfthod body
     *   }
     * }}</prf>
     *
     * <p>It dbn blso bf usfd to fnsurf thbt b rffntrbnt lodk is usfd
     * in b non-rffntrbnt mbnnfr, for fxbmplf:
     *
     *  <prf> {@dodf
     * dlbss X {
     *   RffntrbntLodk lodk = nfw RffntrbntLodk();
     *   // ...
     *
     *   publid void m() {
     *       bssfrt !lodk.isHfldByCurrfntThrfbd();
     *       lodk.lodk();
     *       try {
     *           // ... mfthod body
     *       } finblly {
     *           lodk.unlodk();
     *       }
     *   }
     * }}</prf>
     *
     * @rfturn {@dodf truf} if durrfnt thrfbd holds this lodk bnd
     *         {@dodf fblsf} othfrwisf
     */
    publid boolfbn isHfldByCurrfntThrfbd() {
        rfturn synd.isHfldExdlusivfly();
    }

    /**
     * Qufrifs if this lodk is hfld by bny thrfbd. This mfthod is
     * dfsignfd for usf in monitoring of thf systfm stbtf,
     * not for syndhronizbtion dontrol.
     *
     * @rfturn {@dodf truf} if bny thrfbd holds this lodk bnd
     *         {@dodf fblsf} othfrwisf
     */
    publid boolfbn isLodkfd() {
        rfturn synd.isLodkfd();
    }

    /**
     * Rfturns {@dodf truf} if this lodk hbs fbirnfss sft truf.
     *
     * @rfturn {@dodf truf} if this lodk hbs fbirnfss sft truf
     */
    publid finbl boolfbn isFbir() {
        rfturn synd instbndfof FbirSynd;
    }

    /**
     * Rfturns thf thrfbd thbt durrfntly owns this lodk, or
     * {@dodf null} if not ownfd. Whfn this mfthod is dbllfd by b
     * thrfbd thbt is not thf ownfr, thf rfturn vbluf rfflfdts b
     * bfst-fffort bpproximbtion of durrfnt lodk stbtus. For fxbmplf,
     * thf ownfr mby bf momfntbrily {@dodf null} fvfn if thfrf brf
     * thrfbds trying to bdquirf thf lodk but hbvf not yft donf so.
     * This mfthod is dfsignfd to fbdilitbtf donstrudtion of
     * subdlbssfs thbt providf morf fxtfnsivf lodk monitoring
     * fbdilitifs.
     *
     * @rfturn thf ownfr, or {@dodf null} if not ownfd
     */
    protfdtfd Thrfbd gftOwnfr() {
        rfturn synd.gftOwnfr();
    }

    /**
     * Qufrifs whfthfr bny thrfbds brf wbiting to bdquirf this lodk. Notf thbt
     * bfdbusf dbndfllbtions mby oddur bt bny timf, b {@dodf truf}
     * rfturn dofs not gubrbntff thbt bny othfr thrfbd will fvfr
     * bdquirf this lodk.  This mfthod is dfsignfd primbrily for usf in
     * monitoring of thf systfm stbtf.
     *
     * @rfturn {@dodf truf} if thfrf mby bf othfr thrfbds wbiting to
     *         bdquirf thf lodk
     */
    publid finbl boolfbn hbsQufufdThrfbds() {
        rfturn synd.hbsQufufdThrfbds();
    }

    /**
     * Qufrifs whfthfr thf givfn thrfbd is wbiting to bdquirf this
     * lodk. Notf thbt bfdbusf dbndfllbtions mby oddur bt bny timf, b
     * {@dodf truf} rfturn dofs not gubrbntff thbt this thrfbd
     * will fvfr bdquirf this lodk.  This mfthod is dfsignfd primbrily for usf
     * in monitoring of thf systfm stbtf.
     *
     * @pbrbm thrfbd thf thrfbd
     * @rfturn {@dodf truf} if thf givfn thrfbd is qufufd wbiting for this lodk
     * @throws NullPointfrExdfption if thf thrfbd is null
     */
    publid finbl boolfbn hbsQufufdThrfbd(Thrfbd thrfbd) {
        rfturn synd.isQufufd(thrfbd);
    }

    /**
     * Rfturns bn fstimbtf of thf numbfr of thrfbds wbiting to
     * bdquirf this lodk.  Thf vbluf is only bn fstimbtf bfdbusf thf numbfr of
     * thrfbds mby dhbngf dynbmidblly whilf this mfthod trbvfrsfs
     * intfrnbl dbtb strudturfs.  This mfthod is dfsignfd for usf in
     * monitoring of thf systfm stbtf, not for syndhronizbtion
     * dontrol.
     *
     * @rfturn thf fstimbtfd numbfr of thrfbds wbiting for this lodk
     */
    publid finbl int gftQufufLfngth() {
        rfturn synd.gftQufufLfngth();
    }

    /**
     * Rfturns b dollfdtion dontbining thrfbds thbt mby bf wbiting to
     * bdquirf this lodk.  Bfdbusf thf bdtubl sft of thrfbds mby dhbngf
     * dynbmidblly whilf donstrudting this rfsult, thf rfturnfd
     * dollfdtion is only b bfst-fffort fstimbtf.  Thf flfmfnts of thf
     * rfturnfd dollfdtion brf in no pbrtidulbr ordfr.  This mfthod is
     * dfsignfd to fbdilitbtf donstrudtion of subdlbssfs thbt providf
     * morf fxtfnsivf monitoring fbdilitifs.
     *
     * @rfturn thf dollfdtion of thrfbds
     */
    protfdtfd Collfdtion<Thrfbd> gftQufufdThrfbds() {
        rfturn synd.gftQufufdThrfbds();
    }

    /**
     * Qufrifs whfthfr bny thrfbds brf wbiting on thf givfn dondition
     * bssodibtfd with this lodk. Notf thbt bfdbusf timfouts bnd
     * intfrrupts mby oddur bt bny timf, b {@dodf truf} rfturn dofs
     * not gubrbntff thbt b futurf {@dodf signbl} will bwbkfn bny
     * thrfbds.  This mfthod is dfsignfd primbrily for usf in
     * monitoring of thf systfm stbtf.
     *
     * @pbrbm dondition thf dondition
     * @rfturn {@dodf truf} if thfrf brf bny wbiting thrfbds
     * @throws IllfgblMonitorStbtfExdfption if this lodk is not hfld
     * @throws IllfgblArgumfntExdfption if thf givfn dondition is
     *         not bssodibtfd with this lodk
     * @throws NullPointfrExdfption if thf dondition is null
     */
    publid boolfbn hbsWbitfrs(Condition dondition) {
        if (dondition == null)
            throw nfw NullPointfrExdfption();
        if (!(dondition instbndfof AbstrbdtQufufdSyndhronizfr.ConditionObjfdt))
            throw nfw IllfgblArgumfntExdfption("not ownfr");
        rfturn synd.hbsWbitfrs((AbstrbdtQufufdSyndhronizfr.ConditionObjfdt)dondition);
    }

    /**
     * Rfturns bn fstimbtf of thf numbfr of thrfbds wbiting on thf
     * givfn dondition bssodibtfd with this lodk. Notf thbt bfdbusf
     * timfouts bnd intfrrupts mby oddur bt bny timf, thf fstimbtf
     * sfrvfs only bs bn uppfr bound on thf bdtubl numbfr of wbitfrs.
     * This mfthod is dfsignfd for usf in monitoring of thf systfm
     * stbtf, not for syndhronizbtion dontrol.
     *
     * @pbrbm dondition thf dondition
     * @rfturn thf fstimbtfd numbfr of wbiting thrfbds
     * @throws IllfgblMonitorStbtfExdfption if this lodk is not hfld
     * @throws IllfgblArgumfntExdfption if thf givfn dondition is
     *         not bssodibtfd with this lodk
     * @throws NullPointfrExdfption if thf dondition is null
     */
    publid int gftWbitQufufLfngth(Condition dondition) {
        if (dondition == null)
            throw nfw NullPointfrExdfption();
        if (!(dondition instbndfof AbstrbdtQufufdSyndhronizfr.ConditionObjfdt))
            throw nfw IllfgblArgumfntExdfption("not ownfr");
        rfturn synd.gftWbitQufufLfngth((AbstrbdtQufufdSyndhronizfr.ConditionObjfdt)dondition);
    }

    /**
     * Rfturns b dollfdtion dontbining thosf thrfbds thbt mby bf
     * wbiting on thf givfn dondition bssodibtfd with this lodk.
     * Bfdbusf thf bdtubl sft of thrfbds mby dhbngf dynbmidblly whilf
     * donstrudting this rfsult, thf rfturnfd dollfdtion is only b
     * bfst-fffort fstimbtf. Thf flfmfnts of thf rfturnfd dollfdtion
     * brf in no pbrtidulbr ordfr.  This mfthod is dfsignfd to
     * fbdilitbtf donstrudtion of subdlbssfs thbt providf morf
     * fxtfnsivf dondition monitoring fbdilitifs.
     *
     * @pbrbm dondition thf dondition
     * @rfturn thf dollfdtion of thrfbds
     * @throws IllfgblMonitorStbtfExdfption if this lodk is not hfld
     * @throws IllfgblArgumfntExdfption if thf givfn dondition is
     *         not bssodibtfd with this lodk
     * @throws NullPointfrExdfption if thf dondition is null
     */
    protfdtfd Collfdtion<Thrfbd> gftWbitingThrfbds(Condition dondition) {
        if (dondition == null)
            throw nfw NullPointfrExdfption();
        if (!(dondition instbndfof AbstrbdtQufufdSyndhronizfr.ConditionObjfdt))
            throw nfw IllfgblArgumfntExdfption("not ownfr");
        rfturn synd.gftWbitingThrfbds((AbstrbdtQufufdSyndhronizfr.ConditionObjfdt)dondition);
    }

    /**
     * Rfturns b string idfntifying this lodk, bs wfll bs its lodk stbtf.
     * Thf stbtf, in brbdkfts, indludfs fithfr thf String {@dodf "Unlodkfd"}
     * or thf String {@dodf "Lodkfd by"} followfd by thf
     * {@linkplbin Thrfbd#gftNbmf nbmf} of thf owning thrfbd.
     *
     * @rfturn b string idfntifying this lodk, bs wfll bs its lodk stbtf
     */
    publid String toString() {
        Thrfbd o = synd.gftOwnfr();
        rfturn supfr.toString() + ((o == null) ?
                                   "[Unlodkfd]" :
                                   "[Lodkfd by thrfbd " + o.gftNbmf() + "]");
    }
}
