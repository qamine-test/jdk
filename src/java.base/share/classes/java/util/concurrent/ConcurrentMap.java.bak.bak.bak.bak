/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;
import jbvb.util.Mbp;
import jbvb.util.Objfdts;
import jbvb.util.fundtion.BiConsumfr;
import jbvb.util.fundtion.BiFundtion;
import jbvb.util.fundtion.Fundtion;

/**
 * A {@link jbvb.util.Mbp} providing thrfbd sbffty bnd btomidity
 * gubrbntffs.
 *
 * <p>Mfmory donsistfndy ffffdts: As with othfr dondurrfnt
 * dollfdtions, bdtions in b thrfbd prior to plbding bn objfdt into b
 * {@dodf CondurrfntMbp} bs b kfy or vbluf
 * <b hrff="pbdkbgf-summbry.html#MfmoryVisibility"><i>hbppfn-bfforf</i></b>
 * bdtions subsfqufnt to thf bddfss or rfmovbl of thbt objfdt from
 * thf {@dodf CondurrfntMbp} in bnothfr thrfbd.
 *
 * <p>This intfrfbdf is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @sindf 1.5
 * @buthor Doug Lfb
 * @pbrbm <K> thf typf of kfys mbintbinfd by this mbp
 * @pbrbm <V> thf typf of mbppfd vblufs
 */
publid intfrfbdf CondurrfntMbp<K, V> fxtfnds Mbp<K, V> {

    /**
     * {@inhfritDod}
     *
     * @implNotf This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot
     * dontbin null vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns
     * thf kfy is bbsfnt. Implfmfntbtions whidh support null vblufs
     * <strong>must</strong> ovfrridf this dffbult implfmfntbtion.
     *
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult V gftOrDffbult(Objfdt kfy, V dffbultVbluf) {
        V v;
        rfturn ((v = gft(kfy)) != null) ? v : dffbultVbluf;
    }

   /**
     * {@inhfritDod}
     *
     * @implSpfd Thf dffbult implfmfntbtion is fquivblfnt to, for this
     * {@dodf mbp}:
     * <prf> {@dodf
     * for ((Mbp.Entry<K, V> fntry : mbp.fntrySft())
     *     bdtion.bddfpt(fntry.gftKfy(), fntry.gftVbluf());
     * }</prf>
     *
     * @implNotf Thf dffbult implfmfntbtion bssumfs thbt
     * {@dodf IllfgblStbtfExdfption} thrown by {@dodf gftKfy()} or
     * {@dodf gftVbluf()} indidbtfs thbt thf fntry hbs bffn rfmovfd bnd dbnnot
     * bf prodfssfd. Opfrbtion dontinufs for subsfqufnt fntrifs.
     *
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult void forEbdh(BiConsumfr<? supfr K, ? supfr V> bdtion) {
        Objfdts.rfquirfNonNull(bdtion);
        for (Mbp.Entry<K, V> fntry : fntrySft()) {
            K k;
            V v;
            try {
                k = fntry.gftKfy();
                v = fntry.gftVbluf();
            } dbtdh(IllfgblStbtfExdfption isf) {
                // this usublly mfbns thf fntry is no longfr in thf mbp.
                dontinuf;
            }
            bdtion.bddfpt(k, v);
        }
    }

    /**
     * If thf spfdififd kfy is not blrfbdy bssodibtfd
     * with b vbluf, bssodibtf it with thf givfn vbluf.
     * This is fquivblfnt to
     *  <prf> {@dodf
     * if (!mbp.dontbinsKfy(kfy))
     *   rfturn mbp.put(kfy, vbluf);
     * flsf
     *   rfturn mbp.gft(kfy);
     * }</prf>
     *
     * fxdfpt thbt thf bdtion is pfrformfd btomidblly.
     *
     * @implNotf This implfmfntbtion intfntionblly rf-bbstrbdts thf
     * inbppropribtf dffbult providfd in {@dodf Mbp}.
     *
     * @pbrbm kfy kfy with whidh thf spfdififd vbluf is to bf bssodibtfd
     * @pbrbm vbluf vbluf to bf bssodibtfd with thf spfdififd kfy
     * @rfturn thf prfvious vbluf bssodibtfd with thf spfdififd kfy, or
     *         {@dodf null} if thfrf wbs no mbpping for thf kfy.
     *         (A {@dodf null} rfturn dbn blso indidbtf thbt thf mbp
     *         prfviously bssodibtfd {@dodf null} with thf kfy,
     *         if thf implfmfntbtion supports null vblufs.)
     * @throws UnsupportfdOpfrbtionExdfption if thf {@dodf put} opfrbtion
     *         is not supportfd by this mbp
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd kfy or vbluf
     *         prfvfnts it from bfing storfd in this mbp
     * @throws NullPointfrExdfption if thf spfdififd kfy or vbluf is null,
     *         bnd this mbp dofs not pfrmit null kfys or vblufs
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd kfy
     *         or vbluf prfvfnts it from bfing storfd in this mbp
     */
     V putIfAbsfnt(K kfy, V vbluf);

    /**
     * Rfmovfs thf fntry for b kfy only if durrfntly mbppfd to b givfn vbluf.
     * This is fquivblfnt to
     *  <prf> {@dodf
     * if (mbp.dontbinsKfy(kfy) && Objfdts.fqubls(mbp.gft(kfy), vbluf)) {
     *   mbp.rfmovf(kfy);
     *   rfturn truf;
     * } flsf
     *   rfturn fblsf;
     * }</prf>
     *
     * fxdfpt thbt thf bdtion is pfrformfd btomidblly.
     *
     * @implNotf This implfmfntbtion intfntionblly rf-bbstrbdts thf
     * inbppropribtf dffbult providfd in {@dodf Mbp}.
     *
     * @pbrbm kfy kfy with whidh thf spfdififd vbluf is bssodibtfd
     * @pbrbm vbluf vbluf fxpfdtfd to bf bssodibtfd with thf spfdififd kfy
     * @rfturn {@dodf truf} if thf vbluf wbs rfmovfd
     * @throws UnsupportfdOpfrbtionExdfption if thf {@dodf rfmovf} opfrbtion
     *         is not supportfd by this mbp
     * @throws ClbssCbstExdfption if thf kfy or vbluf is of bn inbppropribtf
     *         typf for this mbp
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @throws NullPointfrExdfption if thf spfdififd kfy or vbluf is null,
     *         bnd this mbp dofs not pfrmit null kfys or vblufs
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     */
    boolfbn rfmovf(Objfdt kfy, Objfdt vbluf);

    /**
     * Rfplbdfs thf fntry for b kfy only if durrfntly mbppfd to b givfn vbluf.
     * This is fquivblfnt to
     *  <prf> {@dodf
     * if (mbp.dontbinsKfy(kfy) && Objfdts.fqubls(mbp.gft(kfy), oldVbluf)) {
     *   mbp.put(kfy, nfwVbluf);
     *   rfturn truf;
     * } flsf
     *   rfturn fblsf;
     * }</prf>
     *
     * fxdfpt thbt thf bdtion is pfrformfd btomidblly.
     *
     * @implNotf This implfmfntbtion intfntionblly rf-bbstrbdts thf
     * inbppropribtf dffbult providfd in {@dodf Mbp}.
     *
     * @pbrbm kfy kfy with whidh thf spfdififd vbluf is bssodibtfd
     * @pbrbm oldVbluf vbluf fxpfdtfd to bf bssodibtfd with thf spfdififd kfy
     * @pbrbm nfwVbluf vbluf to bf bssodibtfd with thf spfdififd kfy
     * @rfturn {@dodf truf} if thf vbluf wbs rfplbdfd
     * @throws UnsupportfdOpfrbtionExdfption if thf {@dodf put} opfrbtion
     *         is not supportfd by this mbp
     * @throws ClbssCbstExdfption if thf dlbss of b spfdififd kfy or vbluf
     *         prfvfnts it from bfing storfd in this mbp
     * @throws NullPointfrExdfption if b spfdififd kfy or vbluf is null,
     *         bnd this mbp dofs not pfrmit null kfys or vblufs
     * @throws IllfgblArgumfntExdfption if somf propfrty of b spfdififd kfy
     *         or vbluf prfvfnts it from bfing storfd in this mbp
     */
    boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf);

    /**
     * Rfplbdfs thf fntry for b kfy only if durrfntly mbppfd to somf vbluf.
     * This is fquivblfnt to
     *  <prf> {@dodf
     * if (mbp.dontbinsKfy(kfy)) {
     *   rfturn mbp.put(kfy, vbluf);
     * } flsf
     *   rfturn null;
     * }</prf>
     *
     * fxdfpt thbt thf bdtion is pfrformfd btomidblly.
     *
     * @implNotf This implfmfntbtion intfntionblly rf-bbstrbdts thf
     * inbppropribtf dffbult providfd in {@dodf Mbp}.
     *
     * @pbrbm kfy kfy with whidh thf spfdififd vbluf is bssodibtfd
     * @pbrbm vbluf vbluf to bf bssodibtfd with thf spfdififd kfy
     * @rfturn thf prfvious vbluf bssodibtfd with thf spfdififd kfy, or
     *         {@dodf null} if thfrf wbs no mbpping for thf kfy.
     *         (A {@dodf null} rfturn dbn blso indidbtf thbt thf mbp
     *         prfviously bssodibtfd {@dodf null} with thf kfy,
     *         if thf implfmfntbtion supports null vblufs.)
     * @throws UnsupportfdOpfrbtionExdfption if thf {@dodf put} opfrbtion
     *         is not supportfd by this mbp
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd kfy or vbluf
     *         prfvfnts it from bfing storfd in this mbp
     * @throws NullPointfrExdfption if thf spfdififd kfy or vbluf is null,
     *         bnd this mbp dofs not pfrmit null kfys or vblufs
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd kfy
     *         or vbluf prfvfnts it from bfing storfd in this mbp
     */
    V rfplbdf(K kfy, V vbluf);

    /**
     * {@inhfritDod}
     *
     * @implSpfd
     * <p>Thf dffbult implfmfntbtion is fquivblfnt to, for this {@dodf mbp}:
     * <prf> {@dodf
     * for ((Mbp.Entry<K, V> fntry : mbp.fntrySft())
     *     do {
     *        K k = fntry.gftKfy();
     *        V v = fntry.gftVbluf();
     *     } whilf(!rfplbdf(k, v, fundtion.bpply(k, v)));
     * }</prf>
     *
     * Thf dffbult implfmfntbtion mby rftry thfsf stfps whfn multiplf
     * thrfbds bttfmpt updbtfs indluding potfntiblly dblling thf fundtion
     * rfpfbtfdly for b givfn kfy.
     *
     * <p>This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot dontbin null
     * vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns thf kfy is
     * bbsfnt. Implfmfntbtions whidh support null vblufs <strong>must</strong>
     * ovfrridf this dffbult implfmfntbtion.
     *
     * @throws UnsupportfdOpfrbtionExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws IllfgblArgumfntExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
        Objfdts.rfquirfNonNull(fundtion);
        forEbdh((k,v) -> {
            whilf(!rfplbdf(k, v, fundtion.bpply(k, v))) {
                // v dhbngfd or k is gonf
                if ( (v = gft(k)) == null) {
                    // k is no longfr in thf mbp.
                    brfbk;
                }
            }
        });
    }

    /**
     * {@inhfritDod}
     *
     * @implSpfd
     * Thf dffbult implfmfntbtion is fquivblfnt to thf following stfps for this
     * {@dodf mbp}, thfn rfturning thf durrfnt vbluf or {@dodf null} if now
     * bbsfnt:
     *
     * <prf> {@dodf
     * if (mbp.gft(kfy) == null) {
     *     V nfwVbluf = mbppingFundtion.bpply(kfy);
     *     if (nfwVbluf != null)
     *         rfturn mbp.putIfAbsfnt(kfy, nfwVbluf);
     * }
     * }</prf>
     *
     * Thf dffbult implfmfntbtion mby rftry thfsf stfps whfn multiplf
     * thrfbds bttfmpt updbtfs indluding potfntiblly dblling thf mbpping
     * fundtion multiplf timfs.
     *
     * <p>This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot dontbin null
     * vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns thf kfy is
     * bbsfnt. Implfmfntbtions whidh support null vblufs <strong>must</strong>
     * ovfrridf this dffbult implfmfntbtion.
     *
     * @throws UnsupportfdOpfrbtionExdfption {@inhfritDod}
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult V domputfIfAbsfnt(K kfy,
            Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
        Objfdts.rfquirfNonNull(mbppingFundtion);
        V v, nfwVbluf;
        rfturn ((v = gft(kfy)) == null &&
                (nfwVbluf = mbppingFundtion.bpply(kfy)) != null &&
                (v = putIfAbsfnt(kfy, nfwVbluf)) == null) ? nfwVbluf : v;
    }

    /**
     * {@inhfritDod}
     *
     * @implSpfd
     * Thf dffbult implfmfntbtion is fquivblfnt to pfrforming thf following
     * stfps for this {@dodf mbp}, thfn rfturning thf durrfnt vbluf or
     * {@dodf null} if now bbsfnt. :
     *
     * <prf> {@dodf
     * if (mbp.gft(kfy) != null) {
     *     V oldVbluf = mbp.gft(kfy);
     *     V nfwVbluf = rfmbppingFundtion.bpply(kfy, oldVbluf);
     *     if (nfwVbluf != null)
     *         mbp.rfplbdf(kfy, oldVbluf, nfwVbluf);
     *     flsf
     *         mbp.rfmovf(kfy, oldVbluf);
     * }
     * }</prf>
     *
     * Thf dffbult implfmfntbtion mby rftry thfsf stfps whfn multiplf thrfbds
     * bttfmpt updbtfs indluding potfntiblly dblling thf rfmbpping fundtion
     * multiplf timfs.
     *
     * <p>This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot dontbin null
     * vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns thf kfy is
     * bbsfnt. Implfmfntbtions whidh support null vblufs <strong>must</strong>
     * ovfrridf this dffbult implfmfntbtion.
     *
     * @throws UnsupportfdOpfrbtionExdfption {@inhfritDod}
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult V domputfIfPrfsfnt(K kfy,
            BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);
        V oldVbluf;
        whilf((oldVbluf = gft(kfy)) != null) {
            V nfwVbluf = rfmbppingFundtion.bpply(kfy, oldVbluf);
            if (nfwVbluf != null) {
                if (rfplbdf(kfy, oldVbluf, nfwVbluf))
                    rfturn nfwVbluf;
            } flsf if (rfmovf(kfy, oldVbluf))
               rfturn null;
        }
        rfturn oldVbluf;
    }

    /**
     * {@inhfritDod}
     *
     * @implSpfd
     * Thf dffbult implfmfntbtion is fquivblfnt to pfrforming thf following
     * stfps for this {@dodf mbp}, thfn rfturning thf durrfnt vbluf or
     * {@dodf null} if bbsfnt:
     *
     * <prf> {@dodf
     * V oldVbluf = mbp.gft(kfy);
     * V nfwVbluf = rfmbppingFundtion.bpply(kfy, oldVbluf);
     * if (oldVbluf != null ) {
     *    if (nfwVbluf != null)
     *       mbp.rfplbdf(kfy, oldVbluf, nfwVbluf);
     *    flsf
     *       mbp.rfmovf(kfy, oldVbluf);
     * } flsf {
     *    if (nfwVbluf != null)
     *       mbp.putIfAbsfnt(kfy, nfwVbluf);
     *    flsf
     *       rfturn null;
     * }
     * }</prf>
     *
     * Thf dffbult implfmfntbtion mby rftry thfsf stfps whfn multiplf
     * thrfbds bttfmpt updbtfs indluding potfntiblly dblling thf rfmbpping
     * fundtion multiplf timfs.
     *
     * <p>This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot dontbin null
     * vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns thf kfy is
     * bbsfnt. Implfmfntbtions whidh support null vblufs <strong>must</strong>
     * ovfrridf this dffbult implfmfntbtion.
     *
     * @throws UnsupportfdOpfrbtionExdfption {@inhfritDod}
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult V domputf(K kfy,
            BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);
        V oldVbluf = gft(kfy);
        for(;;) {
            V nfwVbluf = rfmbppingFundtion.bpply(kfy, oldVbluf);
            if (nfwVbluf == null) {
                // dflftf mbpping
                if (oldVbluf != null || dontbinsKfy(kfy)) {
                    // somfthing to rfmovf
                    if (rfmovf(kfy, oldVbluf)) {
                        // rfmovfd thf old vbluf bs fxpfdtfd
                        rfturn null;
                    }

                    // somf othfr vbluf rfplbdfd old vbluf. try bgbin.
                    oldVbluf = gft(kfy);
                } flsf {
                    // nothing to do. Lfbvf things bs thfy wfrf.
                    rfturn null;
                }
            } flsf {
                // bdd or rfplbdf old mbpping
                if (oldVbluf != null) {
                    // rfplbdf
                    if (rfplbdf(kfy, oldVbluf, nfwVbluf)) {
                        // rfplbdfd bs fxpfdtfd.
                        rfturn nfwVbluf;
                    }

                    // somf othfr vbluf rfplbdfd old vbluf. try bgbin.
                    oldVbluf = gft(kfy);
                } flsf {
                    // bdd (rfplbdf if oldVbluf wbs null)
                    if ((oldVbluf = putIfAbsfnt(kfy, nfwVbluf)) == null) {
                        // rfplbdfd
                        rfturn nfwVbluf;
                    }

                    // somf othfr vbluf rfplbdfd old vbluf. try bgbin.
                }
            }
        }
    }


    /**
     * {@inhfritDod}
     *
     * @implSpfd
     * Thf dffbult implfmfntbtion is fquivblfnt to pfrforming thf following
     * stfps for this {@dodf mbp}, thfn rfturning thf durrfnt vbluf or
     * {@dodf null} if bbsfnt:
     *
     * <prf> {@dodf
     * V oldVbluf = mbp.gft(kfy);
     * V nfwVbluf = (oldVbluf == null) ? vbluf :
     *              rfmbppingFundtion.bpply(oldVbluf, vbluf);
     * if (nfwVbluf == null)
     *     mbp.rfmovf(kfy);
     * flsf
     *     mbp.put(kfy, nfwVbluf);
     * }</prf>
     *
     * <p>Thf dffbult implfmfntbtion mby rftry thfsf stfps whfn multiplf
     * thrfbds bttfmpt updbtfs indluding potfntiblly dblling thf rfmbpping
     * fundtion multiplf timfs.
     *
     * <p>This implfmfntbtion bssumfs thbt thf CondurrfntMbp dbnnot dontbin null
     * vblufs bnd {@dodf gft()} rfturning null unbmbiguously mfbns thf kfy is
     * bbsfnt. Implfmfntbtions whidh support null vblufs <strong>must</strong>
     * ovfrridf this dffbult implfmfntbtion.
     *
     * @throws UnsupportfdOpfrbtionExdfption {@inhfritDod}
     * @throws ClbssCbstExdfption {@inhfritDod}
     * @throws NullPointfrExdfption {@inhfritDod}
     * @sindf 1.8
     */
    @Ovfrridf
    dffbult V mfrgf(K kfy, V vbluf,
            BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);
        Objfdts.rfquirfNonNull(vbluf);
        V oldVbluf = gft(kfy);
        for (;;) {
            if (oldVbluf != null) {
                V nfwVbluf = rfmbppingFundtion.bpply(oldVbluf, vbluf);
                if (nfwVbluf != null) {
                    if (rfplbdf(kfy, oldVbluf, nfwVbluf))
                        rfturn nfwVbluf;
                } flsf if (rfmovf(kfy, oldVbluf)) {
                    rfturn null;
                }
                oldVbluf = gft(kfy);
            } flsf {
                if ((oldVbluf = putIfAbsfnt(kfy, vbluf)) == null) {
                    rfturn vbluf;
                }
            }
        }
    }
}
