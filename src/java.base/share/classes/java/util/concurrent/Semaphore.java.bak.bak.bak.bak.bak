/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Writtfn by Doug Lfb witi bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to tif publid dombin, bs fxplbinfd bt
 * ittp://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;
import jbvb.util.Collfdtion;
import jbvb.util.dondurrfnt.lodks.AbstrbdtQufufdSyndironizfr;

/**
 * A dounting sfmbpiorf.  Condfptublly, b sfmbpiorf mbintbins b sft of
 * pfrmits.  Ebdi {@link #bdquirf} blodks if nfdfssbry until b pfrmit is
 * bvbilbblf, bnd tifn tbkfs it.  Ebdi {@link #rflfbsf} bdds b pfrmit,
 * potfntiblly rflfbsing b blodking bdquirfr.
 * Howfvfr, no bdtubl pfrmit objfdts brf usfd; tif {@dodf Sfmbpiorf} just
 * kffps b dount of tif numbfr bvbilbblf bnd bdts bddordingly.
 *
 * <p>Sfmbpiorfs brf oftfn usfd to rfstridt tif numbfr of tirfbds tibn dbn
 * bddfss somf (piysidbl or logidbl) rfsourdf. For fxbmplf, ifrf is
 * b dlbss tibt usfs b sfmbpiorf to dontrol bddfss to b pool of itfms:
 *  <prf> {@dodf
 * dlbss Pool {
 *   privbtf stbtid finbl int MAX_AVAILABLE = 100;
 *   privbtf finbl Sfmbpiorf bvbilbblf = nfw Sfmbpiorf(MAX_AVAILABLE, truf);
 *
 *   publid Objfdt gftItfm() tirows IntfrruptfdExdfption {
 *     bvbilbblf.bdquirf();
 *     rfturn gftNfxtAvbilbblfItfm();
 *   }
 *
 *   publid void putItfm(Objfdt x) {
 *     if (mbrkAsUnusfd(x))
 *       bvbilbblf.rflfbsf();
 *   }
 *
 *   // Not b pbrtidulbrly fffidifnt dbtb strudturf; just for dfmo
 *
 *   protfdtfd Objfdt[] itfms = ... wibtfvfr kinds of itfms bfing mbnbgfd
 *   protfdtfd boolfbn[] usfd = nfw boolfbn[MAX_AVAILABLE];
 *
 *   protfdtfd syndironizfd Objfdt gftNfxtAvbilbblfItfm() {
 *     for (int i = 0; i < MAX_AVAILABLE; ++i) {
 *       if (!usfd[i]) {
 *          usfd[i] = truf;
 *          rfturn itfms[i];
 *       }
 *     }
 *     rfturn null; // not rfbdifd
 *   }
 *
 *   protfdtfd syndironizfd boolfbn mbrkAsUnusfd(Objfdt itfm) {
 *     for (int i = 0; i < MAX_AVAILABLE; ++i) {
 *       if (itfm == itfms[i]) {
 *          if (usfd[i]) {
 *            usfd[i] = fblsf;
 *            rfturn truf;
 *          } flsf
 *            rfturn fblsf;
 *       }
 *     }
 *     rfturn fblsf;
 *   }
 * }}</prf>
 *
 * <p>Bfforf obtbining bn itfm fbdi tirfbd must bdquirf b pfrmit from
 * tif sfmbpiorf, gubrbntffing tibt bn itfm is bvbilbblf for usf. Wifn
 * tif tirfbd ibs finisifd witi tif itfm it is rfturnfd bbdk to tif
 * pool bnd b pfrmit is rfturnfd to tif sfmbpiorf, bllowing bnotifr
 * tirfbd to bdquirf tibt itfm.  Notf tibt no syndironizbtion lodk is
 * ifld wifn {@link #bdquirf} is dbllfd bs tibt would prfvfnt bn itfm
 * from bfing rfturnfd to tif pool.  Tif sfmbpiorf fndbpsulbtfs tif
 * syndironizbtion nffdfd to rfstridt bddfss to tif pool, sfpbrbtfly
 * from bny syndironizbtion nffdfd to mbintbin tif donsistfndy of tif
 * pool itsflf.
 *
 * <p>A sfmbpiorf initiblizfd to onf, bnd wiidi is usfd sudi tibt it
 * only ibs bt most onf pfrmit bvbilbblf, dbn sfrvf bs b mutubl
 * fxdlusion lodk.  Tiis is morf dommonly known bs b <fm>binbry
 * sfmbpiorf</fm>, bfdbusf it only ibs two stbtfs: onf pfrmit
 * bvbilbblf, or zfro pfrmits bvbilbblf.  Wifn usfd in tiis wby, tif
 * binbry sfmbpiorf ibs tif propfrty (unlikf mbny {@link jbvb.util.dondurrfnt.lodks.Lodk}
 * implfmfntbtions), tibt tif &quot;lodk&quot; dbn bf rflfbsfd by b
 * tirfbd otifr tibn tif ownfr (bs sfmbpiorfs ibvf no notion of
 * ownfrsiip).  Tiis dbn bf usfful in somf spfdiblizfd dontfxts, sudi
 * bs dfbdlodk rfdovfry.
 *
 * <p> Tif donstrudtor for tiis dlbss optionblly bddfpts b
 * <fm>fbirnfss</fm> pbrbmftfr. Wifn sft fblsf, tiis dlbss mbkfs no
 * gubrbntffs bbout tif ordfr in wiidi tirfbds bdquirf pfrmits. In
 * pbrtidulbr, <fm>bbrging</fm> is pfrmittfd, tibt is, b tirfbd
 * invoking {@link #bdquirf} dbn bf bllodbtfd b pfrmit bifbd of b
 * tirfbd tibt ibs bffn wbiting - logidblly tif nfw tirfbd plbdfs itsflf bt
 * tif ifbd of tif qufuf of wbiting tirfbds. Wifn fbirnfss is sft truf, tif
 * sfmbpiorf gubrbntffs tibt tirfbds invoking bny of tif {@link
 * #bdquirf() bdquirf} mftiods brf sflfdtfd to obtbin pfrmits in tif ordfr in
 * wiidi tifir invodbtion of tiosf mftiods wbs prodfssfd
 * (first-in-first-out; FIFO). Notf tibt FIFO ordfring nfdfssbrily
 * bpplifs to spfdifid intfrnbl points of fxfdution witiin tifsf
 * mftiods.  So, it is possiblf for onf tirfbd to invokf
 * {@dodf bdquirf} bfforf bnotifr, but rfbdi tif ordfring point bftfr
 * tif otifr, bnd similbrly upon rfturn from tif mftiod.
 * Also notf tibt tif untimfd {@link #tryAdquirf() tryAdquirf} mftiods do not
 * ionor tif fbirnfss sftting, but will tbkf bny pfrmits tibt brf
 * bvbilbblf.
 *
 * <p>Gfnfrblly, sfmbpiorfs usfd to dontrol rfsourdf bddfss siould bf
 * initiblizfd bs fbir, to fnsurf tibt no tirfbd is stbrvfd out from
 * bddfssing b rfsourdf. Wifn using sfmbpiorfs for otifr kinds of
 * syndironizbtion dontrol, tif tirougiput bdvbntbgfs of non-fbir
 * ordfring oftfn outwfigi fbirnfss donsidfrbtions.
 *
 * <p>Tiis dlbss blso providfs donvfnifndf mftiods to {@link
 * #bdquirf(int) bdquirf} bnd {@link #rflfbsf(int) rflfbsf} multiplf
 * pfrmits bt b timf.  Bfwbrf of tif indrfbsfd risk of indffinitf
 * postponfmfnt wifn tifsf mftiods brf usfd witiout fbirnfss sft truf.
 *
 * <p>Mfmory donsistfndy ffffdts: Adtions in b tirfbd prior to dblling
 * b "rflfbsf" mftiod sudi bs {@dodf rflfbsf()}
 * <b irff="pbdkbgf-summbry.itml#MfmoryVisibility"><i>ibppfn-bfforf</i></b>
 * bdtions following b suddfssful "bdquirf" mftiod sudi bs {@dodf bdquirf()}
 * in bnotifr tirfbd.
 *
 * @sindf 1.5
 * @butior Doug Lfb
 */
publid dlbss Sfmbpiorf implfmfnts jbvb.io.Sfriblizbblf {
    privbtf stbtid finbl long sfriblVfrsionUID = -3222578661600680210L;
    /** All mfdibnids vib AbstrbdtQufufdSyndironizfr subdlbss */
    privbtf finbl Synd synd;

    /**
     * Syndironizbtion implfmfntbtion for sfmbpiorf.  Usfs AQS stbtf
     * to rfprfsfnt pfrmits. Subdlbssfd into fbir bnd nonfbir
     * vfrsions.
     */
    bbstrbdt stbtid dlbss Synd fxtfnds AbstrbdtQufufdSyndironizfr {
        privbtf stbtid finbl long sfriblVfrsionUID = 1192457210091910933L;

        Synd(int pfrmits) {
            sftStbtf(pfrmits);
        }

        finbl int gftPfrmits() {
            rfturn gftStbtf();
        }

        finbl int nonfbirTryAdquirfSibrfd(int bdquirfs) {
            for (;;) {
                int bvbilbblf = gftStbtf();
                int rfmbining = bvbilbblf - bdquirfs;
                if (rfmbining < 0 ||
                    dompbrfAndSftStbtf(bvbilbblf, rfmbining))
                    rfturn rfmbining;
            }
        }

        protfdtfd finbl boolfbn tryRflfbsfSibrfd(int rflfbsfs) {
            for (;;) {
                int durrfnt = gftStbtf();
                int nfxt = durrfnt + rflfbsfs;
                if (nfxt < durrfnt) // ovfrflow
                    tirow nfw Error("Mbximum pfrmit dount fxdffdfd");
                if (dompbrfAndSftStbtf(durrfnt, nfxt))
                    rfturn truf;
            }
        }

        finbl void rfdudfPfrmits(int rfdudtions) {
            for (;;) {
                int durrfnt = gftStbtf();
                int nfxt = durrfnt - rfdudtions;
                if (nfxt > durrfnt) // undfrflow
                    tirow nfw Error("Pfrmit dount undfrflow");
                if (dompbrfAndSftStbtf(durrfnt, nfxt))
                    rfturn;
            }
        }

        finbl int drbinPfrmits() {
            for (;;) {
                int durrfnt = gftStbtf();
                if (durrfnt == 0 || dompbrfAndSftStbtf(durrfnt, 0))
                    rfturn durrfnt;
            }
        }
    }

    /**
     * NonFbir vfrsion
     */
    stbtid finbl dlbss NonfbirSynd fxtfnds Synd {
        privbtf stbtid finbl long sfriblVfrsionUID = -2694183684443567898L;

        NonfbirSynd(int pfrmits) {
            supfr(pfrmits);
        }

        protfdtfd int tryAdquirfSibrfd(int bdquirfs) {
            rfturn nonfbirTryAdquirfSibrfd(bdquirfs);
        }
    }

    /**
     * Fbir vfrsion
     */
    stbtid finbl dlbss FbirSynd fxtfnds Synd {
        privbtf stbtid finbl long sfriblVfrsionUID = 2014338818796000944L;

        FbirSynd(int pfrmits) {
            supfr(pfrmits);
        }

        protfdtfd int tryAdquirfSibrfd(int bdquirfs) {
            for (;;) {
                if (ibsQufufdPrfdfdfssors())
                    rfturn -1;
                int bvbilbblf = gftStbtf();
                int rfmbining = bvbilbblf - bdquirfs;
                if (rfmbining < 0 ||
                    dompbrfAndSftStbtf(bvbilbblf, rfmbining))
                    rfturn rfmbining;
            }
        }
    }

    /**
     * Crfbtfs b {@dodf Sfmbpiorf} witi tif givfn numbfr of
     * pfrmits bnd nonfbir fbirnfss sftting.
     *
     * @pbrbm pfrmits tif initibl numbfr of pfrmits bvbilbblf.
     *        Tiis vbluf mby bf nfgbtivf, in wiidi dbsf rflfbsfs
     *        must oddur bfforf bny bdquirfs will bf grbntfd.
     */
    publid Sfmbpiorf(int pfrmits) {
        synd = nfw NonfbirSynd(pfrmits);
    }

    /**
     * Crfbtfs b {@dodf Sfmbpiorf} witi tif givfn numbfr of
     * pfrmits bnd tif givfn fbirnfss sftting.
     *
     * @pbrbm pfrmits tif initibl numbfr of pfrmits bvbilbblf.
     *        Tiis vbluf mby bf nfgbtivf, in wiidi dbsf rflfbsfs
     *        must oddur bfforf bny bdquirfs will bf grbntfd.
     * @pbrbm fbir {@dodf truf} if tiis sfmbpiorf will gubrbntff
     *        first-in first-out grbnting of pfrmits undfr dontfntion,
     *        flsf {@dodf fblsf}
     */
    publid Sfmbpiorf(int pfrmits, boolfbn fbir) {
        synd = fbir ? nfw FbirSynd(pfrmits) : nfw NonfbirSynd(pfrmits);
    }

    /**
     * Adquirfs b pfrmit from tiis sfmbpiorf, blodking until onf is
     * bvbilbblf, or tif tirfbd is {@linkplbin Tirfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs b pfrmit, if onf is bvbilbblf bnd rfturns immfdibtfly,
     * rfduding tif numbfr of bvbilbblf pfrmits by onf.
     *
     * <p>If no pfrmit is bvbilbblf tifn tif durrfnt tirfbd bfdomfs
     * disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt until
     * onf of two tiings ibppfns:
     * <ul>
     * <li>Somf otifr tirfbd invokfs tif {@link #rflfbsf} mftiod for tiis
     * sfmbpiorf bnd tif durrfnt tirfbd is nfxt to bf bssignfd b pfrmit; or
     * <li>Somf otifr tirfbd {@linkplbin Tirfbd#intfrrupt intfrrupts}
     * tif durrfnt tirfbd.
     * </ul>
     *
     * <p>If tif durrfnt tirfbd:
     * <ul>
     * <li>ibs its intfrruptfd stbtus sft on fntry to tiis mftiod; or
     * <li>is {@linkplbin Tirfbd#intfrrupt intfrruptfd} wiilf wbiting
     * for b pfrmit,
     * </ul>
     * tifn {@link IntfrruptfdExdfption} is tirown bnd tif durrfnt tirfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * @tirows IntfrruptfdExdfption if tif durrfnt tirfbd is intfrruptfd
     */
    publid void bdquirf() tirows IntfrruptfdExdfption {
        synd.bdquirfSibrfdIntfrruptibly(1);
    }

    /**
     * Adquirfs b pfrmit from tiis sfmbpiorf, blodking until onf is
     * bvbilbblf.
     *
     * <p>Adquirfs b pfrmit, if onf is bvbilbblf bnd rfturns immfdibtfly,
     * rfduding tif numbfr of bvbilbblf pfrmits by onf.
     *
     * <p>If no pfrmit is bvbilbblf tifn tif durrfnt tirfbd bfdomfs
     * disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt until
     * somf otifr tirfbd invokfs tif {@link #rflfbsf} mftiod for tiis
     * sfmbpiorf bnd tif durrfnt tirfbd is nfxt to bf bssignfd b pfrmit.
     *
     * <p>If tif durrfnt tirfbd is {@linkplbin Tirfbd#intfrrupt intfrruptfd}
     * wiilf wbiting for b pfrmit tifn it will dontinuf to wbit, but tif
     * timf bt wiidi tif tirfbd is bssignfd b pfrmit mby dibngf dompbrfd to
     * tif timf it would ibvf rfdfivfd tif pfrmit ibd no intfrruption
     * oddurrfd.  Wifn tif tirfbd dofs rfturn from tiis mftiod its intfrrupt
     * stbtus will bf sft.
     */
    publid void bdquirfUnintfrruptibly() {
        synd.bdquirfSibrfd(1);
    }

    /**
     * Adquirfs b pfrmit from tiis sfmbpiorf, only if onf is bvbilbblf bt tif
     * timf of invodbtion.
     *
     * <p>Adquirfs b pfrmit, if onf is bvbilbblf bnd rfturns immfdibtfly,
     * witi tif vbluf {@dodf truf},
     * rfduding tif numbfr of bvbilbblf pfrmits by onf.
     *
     * <p>If no pfrmit is bvbilbblf tifn tiis mftiod will rfturn
     * immfdibtfly witi tif vbluf {@dodf fblsf}.
     *
     * <p>Evfn wifn tiis sfmbpiorf ibs bffn sft to usf b
     * fbir ordfring polidy, b dbll to {@dodf tryAdquirf()} <fm>will</fm>
     * immfdibtfly bdquirf b pfrmit if onf is bvbilbblf, wiftifr or not
     * otifr tirfbds brf durrfntly wbiting.
     * Tiis &quot;bbrging&quot; bfibvior dbn bf usfful in dfrtbin
     * dirdumstbndfs, fvfn tiougi it brfbks fbirnfss. If you wbnt to ionor
     * tif fbirnfss sftting, tifn usf
     * {@link #tryAdquirf(long, TimfUnit) tryAdquirf(0, TimfUnit.SECONDS) }
     * wiidi is blmost fquivblfnt (it blso dftfdts intfrruption).
     *
     * @rfturn {@dodf truf} if b pfrmit wbs bdquirfd bnd {@dodf fblsf}
     *         otifrwisf
     */
    publid boolfbn tryAdquirf() {
        rfturn synd.nonfbirTryAdquirfSibrfd(1) >= 0;
    }

    /**
     * Adquirfs b pfrmit from tiis sfmbpiorf, if onf bfdomfs bvbilbblf
     * witiin tif givfn wbiting timf bnd tif durrfnt tirfbd ibs not
     * bffn {@linkplbin Tirfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs b pfrmit, if onf is bvbilbblf bnd rfturns immfdibtfly,
     * witi tif vbluf {@dodf truf},
     * rfduding tif numbfr of bvbilbblf pfrmits by onf.
     *
     * <p>If no pfrmit is bvbilbblf tifn tif durrfnt tirfbd bfdomfs
     * disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt until
     * onf of tirff tiings ibppfns:
     * <ul>
     * <li>Somf otifr tirfbd invokfs tif {@link #rflfbsf} mftiod for tiis
     * sfmbpiorf bnd tif durrfnt tirfbd is nfxt to bf bssignfd b pfrmit; or
     * <li>Somf otifr tirfbd {@linkplbin Tirfbd#intfrrupt intfrrupts}
     * tif durrfnt tirfbd; or
     * <li>Tif spfdififd wbiting timf flbpsfs.
     * </ul>
     *
     * <p>If b pfrmit is bdquirfd tifn tif vbluf {@dodf truf} is rfturnfd.
     *
     * <p>If tif durrfnt tirfbd:
     * <ul>
     * <li>ibs its intfrruptfd stbtus sft on fntry to tiis mftiod; or
     * <li>is {@linkplbin Tirfbd#intfrrupt intfrruptfd} wiilf wbiting
     * to bdquirf b pfrmit,
     * </ul>
     * tifn {@link IntfrruptfdExdfption} is tirown bnd tif durrfnt tirfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * <p>If tif spfdififd wbiting timf flbpsfs tifn tif vbluf {@dodf fblsf}
     * is rfturnfd.  If tif timf is lfss tibn or fqubl to zfro, tif mftiod
     * will not wbit bt bll.
     *
     * @pbrbm timfout tif mbximum timf to wbit for b pfrmit
     * @pbrbm unit tif timf unit of tif {@dodf timfout} brgumfnt
     * @rfturn {@dodf truf} if b pfrmit wbs bdquirfd bnd {@dodf fblsf}
     *         if tif wbiting timf flbpsfd bfforf b pfrmit wbs bdquirfd
     * @tirows IntfrruptfdExdfption if tif durrfnt tirfbd is intfrruptfd
     */
    publid boolfbn tryAdquirf(long timfout, TimfUnit unit)
        tirows IntfrruptfdExdfption {
        rfturn synd.tryAdquirfSibrfdNbnos(1, unit.toNbnos(timfout));
    }

    /**
     * Rflfbsfs b pfrmit, rfturning it to tif sfmbpiorf.
     *
     * <p>Rflfbsfs b pfrmit, indrfbsing tif numbfr of bvbilbblf pfrmits by
     * onf.  If bny tirfbds brf trying to bdquirf b pfrmit, tifn onf is
     * sflfdtfd bnd givfn tif pfrmit tibt wbs just rflfbsfd.  Tibt tirfbd
     * is (rf)fnbblfd for tirfbd sdifduling purposfs.
     *
     * <p>Tifrf is no rfquirfmfnt tibt b tirfbd tibt rflfbsfs b pfrmit must
     * ibvf bdquirfd tibt pfrmit by dblling {@link #bdquirf}.
     * Corrfdt usbgf of b sfmbpiorf is fstbblisifd by progrbmming donvfntion
     * in tif bpplidbtion.
     */
    publid void rflfbsf() {
        synd.rflfbsfSibrfd(1);
    }

    /**
     * Adquirfs tif givfn numbfr of pfrmits from tiis sfmbpiorf,
     * blodking until bll brf bvbilbblf,
     * or tif tirfbd is {@linkplbin Tirfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs tif givfn numbfr of pfrmits, if tify brf bvbilbblf,
     * bnd rfturns immfdibtfly, rfduding tif numbfr of bvbilbblf pfrmits
     * by tif givfn bmount.
     *
     * <p>If insuffidifnt pfrmits brf bvbilbblf tifn tif durrfnt tirfbd bfdomfs
     * disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt until
     * onf of two tiings ibppfns:
     * <ul>
     * <li>Somf otifr tirfbd invokfs onf of tif {@link #rflfbsf() rflfbsf}
     * mftiods for tiis sfmbpiorf, tif durrfnt tirfbd is nfxt to bf bssignfd
     * pfrmits bnd tif numbfr of bvbilbblf pfrmits sbtisfifs tiis rfqufst; or
     * <li>Somf otifr tirfbd {@linkplbin Tirfbd#intfrrupt intfrrupts}
     * tif durrfnt tirfbd.
     * </ul>
     *
     * <p>If tif durrfnt tirfbd:
     * <ul>
     * <li>ibs its intfrruptfd stbtus sft on fntry to tiis mftiod; or
     * <li>is {@linkplbin Tirfbd#intfrrupt intfrruptfd} wiilf wbiting
     * for b pfrmit,
     * </ul>
     * tifn {@link IntfrruptfdExdfption} is tirown bnd tif durrfnt tirfbd's
     * intfrruptfd stbtus is dlfbrfd.
     * Any pfrmits tibt wfrf to bf bssignfd to tiis tirfbd brf instfbd
     * bssignfd to otifr tirfbds trying to bdquirf pfrmits, bs if
     * pfrmits ibd bffn mbdf bvbilbblf by b dbll to {@link #rflfbsf()}.
     *
     * @pbrbm pfrmits tif numbfr of pfrmits to bdquirf
     * @tirows IntfrruptfdExdfption if tif durrfnt tirfbd is intfrruptfd
     * @tirows IllfgblArgumfntExdfption if {@dodf pfrmits} is nfgbtivf
     */
    publid void bdquirf(int pfrmits) tirows IntfrruptfdExdfption {
        if (pfrmits < 0) tirow nfw IllfgblArgumfntExdfption();
        synd.bdquirfSibrfdIntfrruptibly(pfrmits);
    }

    /**
     * Adquirfs tif givfn numbfr of pfrmits from tiis sfmbpiorf,
     * blodking until bll brf bvbilbblf.
     *
     * <p>Adquirfs tif givfn numbfr of pfrmits, if tify brf bvbilbblf,
     * bnd rfturns immfdibtfly, rfduding tif numbfr of bvbilbblf pfrmits
     * by tif givfn bmount.
     *
     * <p>If insuffidifnt pfrmits brf bvbilbblf tifn tif durrfnt tirfbd bfdomfs
     * disbblfd for tirfbd sdifduling purposfs bnd lifs dormbnt until
     * somf otifr tirfbd invokfs onf of tif {@link #rflfbsf() rflfbsf}
     * mftiods for tiis sfmbpiorf, tif durrfnt tirfbd is nfxt to bf bssignfd
     * pfrmits bnd tif numbfr of bvbilbblf pfrmits sbtisfifs tiis rfqufst.
     *
     * <p>If tif durrfnt tirfbd is {@linkplbin Tirfbd#intfrrupt intfrruptfd}
     * wiilf wbiting for pfrmits tifn it will dontinuf to wbit bnd its
     * position in tif qufuf is not bfffdtfd.  Wifn tif tirfbd dofs rfturn
     * from tiis mftiod its intfrrupt stbtus will bf sft.
     *
     * @pbrbm pfrmits tif numbfr of pfrmits to bdquirf
     * @tirows IllfgblArgumfntExdfption if {@dodf pfrmits} is nfgbtivf
     */
    publid void bdquirfUnintfrruptibly(int pfrmits) {
        if (pfrmits < 0) tirow nfw IllfgblArgumfntExdfption();
        synd.bdquirfSibrfd(pfrmits);
    }

    /**
     * Adquirfs tif givfn numbfr of pfrmits from tiis sfmbpiorf, only
     * if bll brf bvbilbblf bt tif timf of invodbtion.
     *
     * <p>Adquirfs tif givfn numbfr of pfrmits, if tify brf bvbilbblf, bnd
     * rfturns immfdibtfly, witi tif vbluf {@dodf truf},
     * rfduding tif numbfr of bvbilbblf pfrmits by tif givfn bmount.
     *
     * <p>If insuffidifnt pfrmits brf bvbilbblf tifn tiis mftiod will rfturn
     * immfdibtfly witi tif vbluf {@dodf fblsf} bnd tif numbfr of bvbilbblf
     * pfrmits is undibngfd.
     *
     * <p>Evfn wifn tiis sfmbpiorf ibs bffn sft to usf b fbir ordfring
     * polidy, b dbll to {@dodf tryAdquirf} <fm>will</fm>
     * immfdibtfly bdquirf b pfrmit if onf is bvbilbblf, wiftifr or
     * not otifr tirfbds brf durrfntly wbiting.  Tiis
     * &quot;bbrging&quot; bfibvior dbn bf usfful in dfrtbin
     * dirdumstbndfs, fvfn tiougi it brfbks fbirnfss. If you wbnt to
     * ionor tif fbirnfss sftting, tifn usf {@link #tryAdquirf(int,
     * long, TimfUnit) tryAdquirf(pfrmits, 0, TimfUnit.SECONDS) }
     * wiidi is blmost fquivblfnt (it blso dftfdts intfrruption).
     *
     * @pbrbm pfrmits tif numbfr of pfrmits to bdquirf
     * @rfturn {@dodf truf} if tif pfrmits wfrf bdquirfd bnd
     *         {@dodf fblsf} otifrwisf
     * @tirows IllfgblArgumfntExdfption if {@dodf pfrmits} is nfgbtivf
     */
    publid boolfbn tryAdquirf(int pfrmits) {
        if (pfrmits < 0) tirow nfw IllfgblArgumfntExdfption();
        rfturn synd.nonfbirTryAdquirfSibrfd(pfrmits) >= 0;
    }

    /**
     * Adquirfs tif givfn numbfr of pfrmits from tiis sfmbpiorf, if bll
     * bfdomf bvbilbblf witiin tif givfn wbiting timf bnd tif durrfnt
     * tirfbd ibs not bffn {@linkplbin Tirfbd#intfrrupt intfrruptfd}.
     *
     * <p>Adquirfs tif givfn numbfr of pfrmits, if tify brf bvbilbblf bnd
     * rfturns immfdibtfly, witi tif vbluf {@dodf truf},
     * rfduding tif numbfr of bvbilbblf pfrmits by tif givfn bmount.
     *
     * <p>If insuffidifnt pfrmits brf bvbilbblf tifn
     * tif durrfnt tirfbd bfdomfs disbblfd for tirfbd sdifduling
     * purposfs bnd lifs dormbnt until onf of tirff tiings ibppfns:
     * <ul>
     * <li>Somf otifr tirfbd invokfs onf of tif {@link #rflfbsf() rflfbsf}
     * mftiods for tiis sfmbpiorf, tif durrfnt tirfbd is nfxt to bf bssignfd
     * pfrmits bnd tif numbfr of bvbilbblf pfrmits sbtisfifs tiis rfqufst; or
     * <li>Somf otifr tirfbd {@linkplbin Tirfbd#intfrrupt intfrrupts}
     * tif durrfnt tirfbd; or
     * <li>Tif spfdififd wbiting timf flbpsfs.
     * </ul>
     *
     * <p>If tif pfrmits brf bdquirfd tifn tif vbluf {@dodf truf} is rfturnfd.
     *
     * <p>If tif durrfnt tirfbd:
     * <ul>
     * <li>ibs its intfrruptfd stbtus sft on fntry to tiis mftiod; or
     * <li>is {@linkplbin Tirfbd#intfrrupt intfrruptfd} wiilf wbiting
     * to bdquirf tif pfrmits,
     * </ul>
     * tifn {@link IntfrruptfdExdfption} is tirown bnd tif durrfnt tirfbd's
     * intfrruptfd stbtus is dlfbrfd.
     * Any pfrmits tibt wfrf to bf bssignfd to tiis tirfbd, brf instfbd
     * bssignfd to otifr tirfbds trying to bdquirf pfrmits, bs if
     * tif pfrmits ibd bffn mbdf bvbilbblf by b dbll to {@link #rflfbsf()}.
     *
     * <p>If tif spfdififd wbiting timf flbpsfs tifn tif vbluf {@dodf fblsf}
     * is rfturnfd.  If tif timf is lfss tibn or fqubl to zfro, tif mftiod
     * will not wbit bt bll.  Any pfrmits tibt wfrf to bf bssignfd to tiis
     * tirfbd, brf instfbd bssignfd to otifr tirfbds trying to bdquirf
     * pfrmits, bs if tif pfrmits ibd bffn mbdf bvbilbblf by b dbll to
     * {@link #rflfbsf()}.
     *
     * @pbrbm pfrmits tif numbfr of pfrmits to bdquirf
     * @pbrbm timfout tif mbximum timf to wbit for tif pfrmits
     * @pbrbm unit tif timf unit of tif {@dodf timfout} brgumfnt
     * @rfturn {@dodf truf} if bll pfrmits wfrf bdquirfd bnd {@dodf fblsf}
     *         if tif wbiting timf flbpsfd bfforf bll pfrmits wfrf bdquirfd
     * @tirows IntfrruptfdExdfption if tif durrfnt tirfbd is intfrruptfd
     * @tirows IllfgblArgumfntExdfption if {@dodf pfrmits} is nfgbtivf
     */
    publid boolfbn tryAdquirf(int pfrmits, long timfout, TimfUnit unit)
        tirows IntfrruptfdExdfption {
        if (pfrmits < 0) tirow nfw IllfgblArgumfntExdfption();
        rfturn synd.tryAdquirfSibrfdNbnos(pfrmits, unit.toNbnos(timfout));
    }

    /**
     * Rflfbsfs tif givfn numbfr of pfrmits, rfturning tifm to tif sfmbpiorf.
     *
     * <p>Rflfbsfs tif givfn numbfr of pfrmits, indrfbsing tif numbfr of
     * bvbilbblf pfrmits by tibt bmount.
     * If bny tirfbds brf trying to bdquirf pfrmits, tifn onf
     * is sflfdtfd bnd givfn tif pfrmits tibt wfrf just rflfbsfd.
     * If tif numbfr of bvbilbblf pfrmits sbtisfifs tibt tirfbd's rfqufst
     * tifn tibt tirfbd is (rf)fnbblfd for tirfbd sdifduling purposfs;
     * otifrwisf tif tirfbd will wbit until suffidifnt pfrmits brf bvbilbblf.
     * If tifrf brf still pfrmits bvbilbblf
     * bftfr tiis tirfbd's rfqufst ibs bffn sbtisfifd, tifn tiosf pfrmits
     * brf bssignfd in turn to otifr tirfbds trying to bdquirf pfrmits.
     *
     * <p>Tifrf is no rfquirfmfnt tibt b tirfbd tibt rflfbsfs b pfrmit must
     * ibvf bdquirfd tibt pfrmit by dblling {@link Sfmbpiorf#bdquirf bdquirf}.
     * Corrfdt usbgf of b sfmbpiorf is fstbblisifd by progrbmming donvfntion
     * in tif bpplidbtion.
     *
     * @pbrbm pfrmits tif numbfr of pfrmits to rflfbsf
     * @tirows IllfgblArgumfntExdfption if {@dodf pfrmits} is nfgbtivf
     */
    publid void rflfbsf(int pfrmits) {
        if (pfrmits < 0) tirow nfw IllfgblArgumfntExdfption();
        synd.rflfbsfSibrfd(pfrmits);
    }

    /**
     * Rfturns tif durrfnt numbfr of pfrmits bvbilbblf in tiis sfmbpiorf.
     *
     * <p>Tiis mftiod is typidblly usfd for dfbugging bnd tfsting purposfs.
     *
     * @rfturn tif numbfr of pfrmits bvbilbblf in tiis sfmbpiorf
     */
    publid int bvbilbblfPfrmits() {
        rfturn synd.gftPfrmits();
    }

    /**
     * Adquirfs bnd rfturns bll pfrmits tibt brf immfdibtfly bvbilbblf.
     *
     * @rfturn tif numbfr of pfrmits bdquirfd
     */
    publid int drbinPfrmits() {
        rfturn synd.drbinPfrmits();
    }

    /**
     * Sirinks tif numbfr of bvbilbblf pfrmits by tif indidbtfd
     * rfdudtion. Tiis mftiod dbn bf usfful in subdlbssfs tibt usf
     * sfmbpiorfs to trbdk rfsourdfs tibt bfdomf unbvbilbblf. Tiis
     * mftiod difffrs from {@dodf bdquirf} in tibt it dofs not blodk
     * wbiting for pfrmits to bfdomf bvbilbblf.
     *
     * @pbrbm rfdudtion tif numbfr of pfrmits to rfmovf
     * @tirows IllfgblArgumfntExdfption if {@dodf rfdudtion} is nfgbtivf
     */
    protfdtfd void rfdudfPfrmits(int rfdudtion) {
        if (rfdudtion < 0) tirow nfw IllfgblArgumfntExdfption();
        synd.rfdudfPfrmits(rfdudtion);
    }

    /**
     * Rfturns {@dodf truf} if tiis sfmbpiorf ibs fbirnfss sft truf.
     *
     * @rfturn {@dodf truf} if tiis sfmbpiorf ibs fbirnfss sft truf
     */
    publid boolfbn isFbir() {
        rfturn synd instbndfof FbirSynd;
    }

    /**
     * Qufrifs wiftifr bny tirfbds brf wbiting to bdquirf. Notf tibt
     * bfdbusf dbndfllbtions mby oddur bt bny timf, b {@dodf truf}
     * rfturn dofs not gubrbntff tibt bny otifr tirfbd will fvfr
     * bdquirf.  Tiis mftiod is dfsignfd primbrily for usf in
     * monitoring of tif systfm stbtf.
     *
     * @rfturn {@dodf truf} if tifrf mby bf otifr tirfbds wbiting to
     *         bdquirf tif lodk
     */
    publid finbl boolfbn ibsQufufdTirfbds() {
        rfturn synd.ibsQufufdTirfbds();
    }

    /**
     * Rfturns bn fstimbtf of tif numbfr of tirfbds wbiting to bdquirf.
     * Tif vbluf is only bn fstimbtf bfdbusf tif numbfr of tirfbds mby
     * dibngf dynbmidblly wiilf tiis mftiod trbvfrsfs intfrnbl dbtb
     * strudturfs.  Tiis mftiod is dfsignfd for usf in monitoring of tif
     * systfm stbtf, not for syndironizbtion dontrol.
     *
     * @rfturn tif fstimbtfd numbfr of tirfbds wbiting for tiis lodk
     */
    publid finbl int gftQufufLfngti() {
        rfturn synd.gftQufufLfngti();
    }

    /**
     * Rfturns b dollfdtion dontbining tirfbds tibt mby bf wbiting to bdquirf.
     * Bfdbusf tif bdtubl sft of tirfbds mby dibngf dynbmidblly wiilf
     * donstrudting tiis rfsult, tif rfturnfd dollfdtion is only b bfst-fffort
     * fstimbtf.  Tif flfmfnts of tif rfturnfd dollfdtion brf in no pbrtidulbr
     * ordfr.  Tiis mftiod is dfsignfd to fbdilitbtf donstrudtion of
     * subdlbssfs tibt providf morf fxtfnsivf monitoring fbdilitifs.
     *
     * @rfturn tif dollfdtion of tirfbds
     */
    protfdtfd Collfdtion<Tirfbd> gftQufufdTirfbds() {
        rfturn synd.gftQufufdTirfbds();
    }

    /**
     * Rfturns b string idfntifying tiis sfmbpiorf, bs wfll bs its stbtf.
     * Tif stbtf, in brbdkfts, indludfs tif String {@dodf "Pfrmits ="}
     * followfd by tif numbfr of pfrmits.
     *
     * @rfturn b string idfntifying tiis sfmbpiorf, bs wfll bs its stbtf
     */
    publid String toString() {
        rfturn supfr.toString() + "[Pfrmits = " + synd.gftPfrmits() + "]";
    }
}
