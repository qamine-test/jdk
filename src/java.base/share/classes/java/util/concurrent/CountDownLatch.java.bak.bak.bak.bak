/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;
import jbvb.util.dondurrfnt.lodks.AbstrbdtQufufdSyndhronizfr;

/**
 * A syndhronizbtion bid thbt bllows onf or morf thrfbds to wbit until
 * b sft of opfrbtions bfing pfrformfd in othfr thrfbds domplftfs.
 *
 * <p>A {@dodf CountDownLbtdh} is initiblizfd with b givfn <fm>dount</fm>.
 * Thf {@link #bwbit bwbit} mfthods blodk until thf durrfnt dount rfbdhfs
 * zfro duf to invodbtions of thf {@link #dountDown} mfthod, bftfr whidh
 * bll wbiting thrfbds brf rflfbsfd bnd bny subsfqufnt invodbtions of
 * {@link #bwbit bwbit} rfturn immfdibtfly.  This is b onf-shot phfnomfnon
 * -- thf dount dbnnot bf rfsft.  If you nffd b vfrsion thbt rfsfts thf
 * dount, donsidfr using b {@link CydlidBbrrifr}.
 *
 * <p>A {@dodf CountDownLbtdh} is b vfrsbtilf syndhronizbtion tool
 * bnd dbn bf usfd for b numbfr of purposfs.  A
 * {@dodf CountDownLbtdh} initiblizfd with b dount of onf sfrvfs bs b
 * simplf on/off lbtdh, or gbtf: bll thrfbds invoking {@link #bwbit bwbit}
 * wbit bt thf gbtf until it is opfnfd by b thrfbd invoking {@link
 * #dountDown}.  A {@dodf CountDownLbtdh} initiblizfd to <fm>N</fm>
 * dbn bf usfd to mbkf onf thrfbd wbit until <fm>N</fm> thrfbds hbvf
 * domplftfd somf bdtion, or somf bdtion hbs bffn domplftfd N timfs.
 *
 * <p>A usfful propfrty of b {@dodf CountDownLbtdh} is thbt it
 * dofsn't rfquirf thbt thrfbds dblling {@dodf dountDown} wbit for
 * thf dount to rfbdh zfro bfforf prodffding, it simply prfvfnts bny
 * thrfbd from prodffding pbst bn {@link #bwbit bwbit} until bll
 * thrfbds dould pbss.
 *
 * <p><b>Sbmplf usbgf:</b> Hfrf is b pbir of dlbssfs in whidh b group
 * of workfr thrfbds usf two dountdown lbtdhfs:
 * <ul>
 * <li>Thf first is b stbrt signbl thbt prfvfnts bny workfr from prodffding
 * until thf drivfr is rfbdy for thfm to prodffd;
 * <li>Thf sfdond is b domplftion signbl thbt bllows thf drivfr to wbit
 * until bll workfrs hbvf domplftfd.
 * </ul>
 *
 *  <prf> {@dodf
 * dlbss Drivfr { // ...
 *   void mbin() throws IntfrruptfdExdfption {
 *     CountDownLbtdh stbrtSignbl = nfw CountDownLbtdh(1);
 *     CountDownLbtdh donfSignbl = nfw CountDownLbtdh(N);
 *
 *     for (int i = 0; i < N; ++i) // drfbtf bnd stbrt thrfbds
 *       nfw Thrfbd(nfw Workfr(stbrtSignbl, donfSignbl)).stbrt();
 *
 *     doSomfthingElsf();            // don't lft run yft
 *     stbrtSignbl.dountDown();      // lft bll thrfbds prodffd
 *     doSomfthingElsf();
 *     donfSignbl.bwbit();           // wbit for bll to finish
 *   }
 * }
 *
 * dlbss Workfr implfmfnts Runnbblf {
 *   privbtf finbl CountDownLbtdh stbrtSignbl;
 *   privbtf finbl CountDownLbtdh donfSignbl;
 *   Workfr(CountDownLbtdh stbrtSignbl, CountDownLbtdh donfSignbl) {
 *     this.stbrtSignbl = stbrtSignbl;
 *     this.donfSignbl = donfSignbl;
 *   }
 *   publid void run() {
 *     try {
 *       stbrtSignbl.bwbit();
 *       doWork();
 *       donfSignbl.dountDown();
 *     } dbtdh (IntfrruptfdExdfption fx) {} // rfturn;
 *   }
 *
 *   void doWork() { ... }
 * }}</prf>
 *
 * <p>Anothfr typidbl usbgf would bf to dividf b problfm into N pbrts,
 * dfsdribf fbdh pbrt with b Runnbblf thbt fxfdutfs thbt portion bnd
 * dounts down on thf lbtdh, bnd qufuf bll thf Runnbblfs to bn
 * Exfdutor.  Whfn bll sub-pbrts brf domplftf, thf doordinbting thrfbd
 * will bf bblf to pbss through bwbit. (Whfn thrfbds must rfpfbtfdly
 * dount down in this wby, instfbd usf b {@link CydlidBbrrifr}.)
 *
 *  <prf> {@dodf
 * dlbss Drivfr2 { // ...
 *   void mbin() throws IntfrruptfdExdfption {
 *     CountDownLbtdh donfSignbl = nfw CountDownLbtdh(N);
 *     Exfdutor f = ...
 *
 *     for (int i = 0; i < N; ++i) // drfbtf bnd stbrt thrfbds
 *       f.fxfdutf(nfw WorkfrRunnbblf(donfSignbl, i));
 *
 *     donfSignbl.bwbit();           // wbit for bll to finish
 *   }
 * }
 *
 * dlbss WorkfrRunnbblf implfmfnts Runnbblf {
 *   privbtf finbl CountDownLbtdh donfSignbl;
 *   privbtf finbl int i;
 *   WorkfrRunnbblf(CountDownLbtdh donfSignbl, int i) {
 *     this.donfSignbl = donfSignbl;
 *     this.i = i;
 *   }
 *   publid void run() {
 *     try {
 *       doWork(i);
 *       donfSignbl.dountDown();
 *     } dbtdh (IntfrruptfdExdfption fx) {} // rfturn;
 *   }
 *
 *   void doWork() { ... }
 * }}</prf>
 *
 * <p>Mfmory donsistfndy ffffdts: Until thf dount rfbdhfs
 * zfro, bdtions in b thrfbd prior to dblling
 * {@dodf dountDown()}
 * <b hrff="pbdkbgf-summbry.html#MfmoryVisibility"><i>hbppfn-bfforf</i></b>
 * bdtions following b suddfssful rfturn from b dorrfsponding
 * {@dodf bwbit()} in bnothfr thrfbd.
 *
 * @sindf 1.5
 * @buthor Doug Lfb
 */
publid dlbss CountDownLbtdh {
    /**
     * Syndhronizbtion dontrol For CountDownLbtdh.
     * Usfs AQS stbtf to rfprfsfnt dount.
     */
    privbtf stbtid finbl dlbss Synd fxtfnds AbstrbdtQufufdSyndhronizfr {
        privbtf stbtid finbl long sfriblVfrsionUID = 4982264981922014374L;

        Synd(int dount) {
            sftStbtf(dount);
        }

        int gftCount() {
            rfturn gftStbtf();
        }

        protfdtfd int tryAdquirfShbrfd(int bdquirfs) {
            rfturn (gftStbtf() == 0) ? 1 : -1;
        }

        protfdtfd boolfbn tryRflfbsfShbrfd(int rflfbsfs) {
            // Dfdrfmfnt dount; signbl whfn trbnsition to zfro
            for (;;) {
                int d = gftStbtf();
                if (d == 0)
                    rfturn fblsf;
                int nfxtd = d-1;
                if (dompbrfAndSftStbtf(d, nfxtd))
                    rfturn nfxtd == 0;
            }
        }
    }

    privbtf finbl Synd synd;

    /**
     * Construdts b {@dodf CountDownLbtdh} initiblizfd with thf givfn dount.
     *
     * @pbrbm dount thf numbfr of timfs {@link #dountDown} must bf invokfd
     *        bfforf thrfbds dbn pbss through {@link #bwbit}
     * @throws IllfgblArgumfntExdfption if {@dodf dount} is nfgbtivf
     */
    publid CountDownLbtdh(int dount) {
        if (dount < 0) throw nfw IllfgblArgumfntExdfption("dount < 0");
        this.synd = nfw Synd(dount);
    }

    /**
     * Cbusfs thf durrfnt thrfbd to wbit until thf lbtdh hbs dountfd down to
     * zfro, unlfss thf thrfbd is {@linkplbin Thrfbd#intfrrupt intfrruptfd}.
     *
     * <p>If thf durrfnt dount is zfro thfn this mfthod rfturns immfdibtfly.
     *
     * <p>If thf durrfnt dount is grfbtfr thbn zfro thfn thf durrfnt
     * thrfbd bfdomfs disbblfd for thrfbd sdhfduling purposfs bnd lifs
     * dormbnt until onf of two things hbppfn:
     * <ul>
     * <li>Thf dount rfbdhfs zfro duf to invodbtions of thf
     * {@link #dountDown} mfthod; or
     * <li>Somf othfr thrfbd {@linkplbin Thrfbd#intfrrupt intfrrupts}
     * thf durrfnt thrfbd.
     * </ul>
     *
     * <p>If thf durrfnt thrfbd:
     * <ul>
     * <li>hbs its intfrruptfd stbtus sft on fntry to this mfthod; or
     * <li>is {@linkplbin Thrfbd#intfrrupt intfrruptfd} whilf wbiting,
     * </ul>
     * thfn {@link IntfrruptfdExdfption} is thrown bnd thf durrfnt thrfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * @throws IntfrruptfdExdfption if thf durrfnt thrfbd is intfrruptfd
     *         whilf wbiting
     */
    publid void bwbit() throws IntfrruptfdExdfption {
        synd.bdquirfShbrfdIntfrruptibly(1);
    }

    /**
     * Cbusfs thf durrfnt thrfbd to wbit until thf lbtdh hbs dountfd down to
     * zfro, unlfss thf thrfbd is {@linkplbin Thrfbd#intfrrupt intfrruptfd},
     * or thf spfdififd wbiting timf flbpsfs.
     *
     * <p>If thf durrfnt dount is zfro thfn this mfthod rfturns immfdibtfly
     * with thf vbluf {@dodf truf}.
     *
     * <p>If thf durrfnt dount is grfbtfr thbn zfro thfn thf durrfnt
     * thrfbd bfdomfs disbblfd for thrfbd sdhfduling purposfs bnd lifs
     * dormbnt until onf of thrff things hbppfn:
     * <ul>
     * <li>Thf dount rfbdhfs zfro duf to invodbtions of thf
     * {@link #dountDown} mfthod; or
     * <li>Somf othfr thrfbd {@linkplbin Thrfbd#intfrrupt intfrrupts}
     * thf durrfnt thrfbd; or
     * <li>Thf spfdififd wbiting timf flbpsfs.
     * </ul>
     *
     * <p>If thf dount rfbdhfs zfro thfn thf mfthod rfturns with thf
     * vbluf {@dodf truf}.
     *
     * <p>If thf durrfnt thrfbd:
     * <ul>
     * <li>hbs its intfrruptfd stbtus sft on fntry to this mfthod; or
     * <li>is {@linkplbin Thrfbd#intfrrupt intfrruptfd} whilf wbiting,
     * </ul>
     * thfn {@link IntfrruptfdExdfption} is thrown bnd thf durrfnt thrfbd's
     * intfrruptfd stbtus is dlfbrfd.
     *
     * <p>If thf spfdififd wbiting timf flbpsfs thfn thf vbluf {@dodf fblsf}
     * is rfturnfd.  If thf timf is lfss thbn or fqubl to zfro, thf mfthod
     * will not wbit bt bll.
     *
     * @pbrbm timfout thf mbximum timf to wbit
     * @pbrbm unit thf timf unit of thf {@dodf timfout} brgumfnt
     * @rfturn {@dodf truf} if thf dount rfbdhfd zfro bnd {@dodf fblsf}
     *         if thf wbiting timf flbpsfd bfforf thf dount rfbdhfd zfro
     * @throws IntfrruptfdExdfption if thf durrfnt thrfbd is intfrruptfd
     *         whilf wbiting
     */
    publid boolfbn bwbit(long timfout, TimfUnit unit)
        throws IntfrruptfdExdfption {
        rfturn synd.tryAdquirfShbrfdNbnos(1, unit.toNbnos(timfout));
    }

    /**
     * Dfdrfmfnts thf dount of thf lbtdh, rflfbsing bll wbiting thrfbds if
     * thf dount rfbdhfs zfro.
     *
     * <p>If thf durrfnt dount is grfbtfr thbn zfro thfn it is dfdrfmfntfd.
     * If thf nfw dount is zfro thfn bll wbiting thrfbds brf rf-fnbblfd for
     * thrfbd sdhfduling purposfs.
     *
     * <p>If thf durrfnt dount fqubls zfro thfn nothing hbppfns.
     */
    publid void dountDown() {
        synd.rflfbsfShbrfd(1);
    }

    /**
     * Rfturns thf durrfnt dount.
     *
     * <p>This mfthod is typidblly usfd for dfbugging bnd tfsting purposfs.
     *
     * @rfturn thf durrfnt dount
     */
    publid long gftCount() {
        rfturn synd.gftCount();
    }

    /**
     * Rfturns b string idfntifying this lbtdh, bs wfll bs its stbtf.
     * Thf stbtf, in brbdkfts, indludfs thf String {@dodf "Count ="}
     * followfd by thf durrfnt dount.
     *
     * @rfturn b string idfntifying this lbtdh, bs wfll bs its stbtf
     */
    publid String toString() {
        rfturn supfr.toString() + "[Count = " + synd.gftCount() + "]";
    }
}
