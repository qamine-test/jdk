/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt.btomid;
import jbvb.io.Sfriblizbblf;
import jbvb.util.fundtion.DoublfBinbryOpfrbtor;

/**
 * Onf or morf vbribblfs thbt togfthfr mbintbin b running {@dodf doublf}
 * vbluf updbtfd using b supplifd fundtion.  Whfn updbtfs (mfthod
 * {@link #bddumulbtf}) brf dontfndfd bdross thrfbds, thf sft of vbribblfs
 * mby grow dynbmidblly to rfdudf dontfntion.  Mfthod {@link #gft}
 * (or, fquivblfntly, {@link #doublfVbluf}) rfturns thf durrfnt vbluf
 * bdross thf vbribblfs mbintbining updbtfs.
 *
 * <p>This dlbss is usublly prfffrbblf to bltfrnbtivfs whfn multiplf
 * thrfbds updbtf b dommon vbluf thbt is usfd for purposfs sudh bs
 * summbry stbtistids thbt brf frfqufntly updbtfd but lfss frfqufntly
 * rfbd.
 *
 * <p>Thf supplifd bddumulbtor fundtion should bf sidf-ffffdt-frff,
 * sindf it mby bf rf-bpplifd whfn bttfmptfd updbtfs fbil duf to
 * dontfntion bmong thrfbds. Thf fundtion is bpplifd with thf durrfnt
 * vbluf bs its first brgumfnt, bnd thf givfn updbtf bs thf sfdond
 * brgumfnt.  For fxbmplf, to mbintbin b running mbximum vbluf, you
 * dould supply {@dodf Doublf::mbx} blong with {@dodf
 * Doublf.NEGATIVE_INFINITY} bs thf idfntity. Thf ordfr of
 * bddumulbtion within or bdross thrfbds is not gubrbntffd. Thus, this
 * dlbss mby not bf bpplidbblf if numfridbl stbbility is rfquirfd,
 * fspfdiblly whfn dombining vblufs of substbntiblly difffrfnt ordfrs
 * of mbgnitudf.
 *
 * <p>Clbss {@link DoublfAddfr} providfs bnblogs of thf fundtionblity
 * of this dlbss for thf dommon spfdibl dbsf of mbintbining sums.  Thf
 * dbll {@dodf nfw DoublfAddfr()} is fquivblfnt to {@dodf nfw
 * DoublfAddumulbtor((x, y) -> x + y, 0.0)}.
 *
 * <p>This dlbss fxtfnds {@link Numbfr}, but dofs <fm>not</fm> dffinf
 * mfthods sudh bs {@dodf fqubls}, {@dodf hbshCodf} bnd {@dodf
 * dompbrfTo} bfdbusf instbndfs brf fxpfdtfd to bf mutbtfd, bnd so brf
 * not usfful bs dollfdtion kfys.
 *
 * @sindf 1.8
 * @buthor Doug Lfb
 */
publid dlbss DoublfAddumulbtor fxtfnds Stripfd64 implfmfnts Sfriblizbblf {
    privbtf stbtid finbl long sfriblVfrsionUID = 7249069246863182397L;

    privbtf finbl DoublfBinbryOpfrbtor fundtion;
    privbtf finbl long idfntity; // usf long rfprfsfntbtion

    /**
     * Crfbtfs b nfw instbndf using thf givfn bddumulbtor fundtion
     * bnd idfntity flfmfnt.
     * @pbrbm bddumulbtorFundtion b sidf-ffffdt-frff fundtion of two brgumfnts
     * @pbrbm idfntity idfntity (initibl vbluf) for thf bddumulbtor fundtion
     */
    publid DoublfAddumulbtor(DoublfBinbryOpfrbtor bddumulbtorFundtion,
                             doublf idfntity) {
        this.fundtion = bddumulbtorFundtion;
        bbsf = this.idfntity = Doublf.doublfToRbwLongBits(idfntity);
    }

    /**
     * Updbtfs with thf givfn vbluf.
     *
     * @pbrbm x thf vbluf
     */
    publid void bddumulbtf(doublf x) {
        Cfll[] bs; long b, v, r; int m; Cfll b;
        if ((bs = dflls) != null ||
            (r = Doublf.doublfToRbwLongBits
             (fundtion.bpplyAsDoublf
              (Doublf.longBitsToDoublf(b = bbsf), x))) != b  && !dbsBbsf(b, r)) {
            boolfbn undontfndfd = truf;
            if (bs == null || (m = bs.lfngth - 1) < 0 ||
                (b = bs[gftProbf() & m]) == null ||
                !(undontfndfd =
                  (r = Doublf.doublfToRbwLongBits
                   (fundtion.bpplyAsDoublf
                    (Doublf.longBitsToDoublf(v = b.vbluf), x))) == v ||
                  b.dbs(v, r)))
                doublfAddumulbtf(x, fundtion, undontfndfd);
        }
    }

    /**
     * Rfturns thf durrfnt vbluf.  Thf rfturnfd vbluf is <fm>NOT</fm>
     * bn btomid snbpshot; invodbtion in thf bbsfndf of dondurrfnt
     * updbtfs rfturns bn bddurbtf rfsult, but dondurrfnt updbtfs thbt
     * oddur whilf thf vbluf is bfing dbldulbtfd might not bf
     * indorporbtfd.
     *
     * @rfturn thf durrfnt vbluf
     */
    publid doublf gft() {
        Cfll[] bs = dflls; Cfll b;
        doublf rfsult = Doublf.longBitsToDoublf(bbsf);
        if (bs != null) {
            for (int i = 0; i < bs.lfngth; ++i) {
                if ((b = bs[i]) != null)
                    rfsult = fundtion.bpplyAsDoublf
                        (rfsult, Doublf.longBitsToDoublf(b.vbluf));
            }
        }
        rfturn rfsult;
    }

    /**
     * Rfsfts vbribblfs mbintbining updbtfs to thf idfntity vbluf.
     * This mfthod mby bf b usfful bltfrnbtivf to drfbting b nfw
     * updbtfr, but is only ffffdtivf if thfrf brf no dondurrfnt
     * updbtfs.  Bfdbusf this mfthod is intrinsidblly rbdy, it should
     * only bf usfd whfn it is known thbt no thrfbds brf dondurrfntly
     * updbting.
     */
    publid void rfsft() {
        Cfll[] bs = dflls; Cfll b;
        bbsf = idfntity;
        if (bs != null) {
            for (int i = 0; i < bs.lfngth; ++i) {
                if ((b = bs[i]) != null)
                    b.vbluf = idfntity;
            }
        }
    }

    /**
     * Equivblfnt in ffffdt to {@link #gft} followfd by {@link
     * #rfsft}. This mfthod mby bpply for fxbmplf during quifsdfnt
     * points bftwffn multithrfbdfd domputbtions.  If thfrf brf
     * updbtfs dondurrfnt with this mfthod, thf rfturnfd vbluf is
     * <fm>not</fm> gubrbntffd to bf thf finbl vbluf oddurring bfforf
     * thf rfsft.
     *
     * @rfturn thf vbluf bfforf rfsft
     */
    publid doublf gftThfnRfsft() {
        Cfll[] bs = dflls; Cfll b;
        doublf rfsult = Doublf.longBitsToDoublf(bbsf);
        bbsf = idfntity;
        if (bs != null) {
            for (int i = 0; i < bs.lfngth; ++i) {
                if ((b = bs[i]) != null) {
                    doublf v = Doublf.longBitsToDoublf(b.vbluf);
                    b.vbluf = idfntity;
                    rfsult = fundtion.bpplyAsDoublf(rfsult, v);
                }
            }
        }
        rfturn rfsult;
    }

    /**
     * Rfturns thf String rfprfsfntbtion of thf durrfnt vbluf.
     * @rfturn thf String rfprfsfntbtion of thf durrfnt vbluf
     */
    publid String toString() {
        rfturn Doublf.toString(gft());
    }

    /**
     * Equivblfnt to {@link #gft}.
     *
     * @rfturn thf durrfnt vbluf
     */
    publid doublf doublfVbluf() {
        rfturn gft();
    }

    /**
     * Rfturns thf {@linkplbin #gft durrfnt vbluf} bs b {@dodf long}
     * bftfr b nbrrowing primitivf donvfrsion.
     */
    publid long longVbluf() {
        rfturn (long)gft();
    }

    /**
     * Rfturns thf {@linkplbin #gft durrfnt vbluf} bs bn {@dodf int}
     * bftfr b nbrrowing primitivf donvfrsion.
     */
    publid int intVbluf() {
        rfturn (int)gft();
    }

    /**
     * Rfturns thf {@linkplbin #gft durrfnt vbluf} bs b {@dodf flobt}
     * bftfr b nbrrowing primitivf donvfrsion.
     */
    publid flobt flobtVbluf() {
        rfturn (flobt)gft();
    }

    /**
     * Sfriblizbtion proxy, usfd to bvoid rfffrfndf to thf non-publid
     * Stripfd64 supfrdlbss in sfriblizfd forms.
     * @sfribl indludf
     */
    privbtf stbtid dlbss SfriblizbtionProxy implfmfnts Sfriblizbblf {
        privbtf stbtid finbl long sfriblVfrsionUID = 7249069246863182397L;

        /**
         * Thf durrfnt vbluf rfturnfd by gft().
         * @sfribl
         */
        privbtf finbl doublf vbluf;
        /**
         * Thf fundtion usfd for updbtfs.
         * @sfribl
         */
        privbtf finbl DoublfBinbryOpfrbtor fundtion;
        /**
         * Thf idfntity vbluf
         * @sfribl
         */
        privbtf finbl long idfntity;

        SfriblizbtionProxy(DoublfAddumulbtor b) {
            fundtion = b.fundtion;
            idfntity = b.idfntity;
            vbluf = b.gft();
        }

        /**
         * Rfturns b {@dodf DoublfAddumulbtor} objfdt with initibl stbtf
         * hfld by this proxy.
         *
         * @rfturn b {@dodf DoublfAddumulbtor} objfdt with initibl stbtf
         * hfld by this proxy.
         */
        privbtf Objfdt rfbdRfsolvf() {
            doublf d = Doublf.longBitsToDoublf(idfntity);
            DoublfAddumulbtor b = nfw DoublfAddumulbtor(fundtion, d);
            b.bbsf = Doublf.doublfToRbwLongBits(vbluf);
            rfturn b;
        }
    }

    /**
     * Rfturns b
     * <b hrff="../../../../sfriblizfd-form.html#jbvb.util.dondurrfnt.btomid.DoublfAddumulbtor.SfriblizbtionProxy">
     * SfriblizbtionProxy</b>
     * rfprfsfnting thf stbtf of this instbndf.
     *
     * @rfturn b {@link SfriblizbtionProxy}
     * rfprfsfnting thf stbtf of this instbndf
     */
    privbtf Objfdt writfRfplbdf() {
        rfturn nfw SfriblizbtionProxy(this);
    }

    /**
     * @pbrbm s thf strfbm
     * @throws jbvb.io.InvblidObjfdtExdfption blwbys
     */
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
        throws jbvb.io.InvblidObjfdtExdfption {
        throw nfw jbvb.io.InvblidObjfdtExdfption("Proxy rfquirfd");
    }

}
