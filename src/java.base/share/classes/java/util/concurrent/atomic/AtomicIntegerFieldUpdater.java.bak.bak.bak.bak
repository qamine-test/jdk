/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt.btomid;
import jbvb.util.fundtion.IntUnbryOpfrbtor;
import jbvb.util.fundtion.IntBinbryOpfrbtor;
import sun.misd.Unsbff;
import jbvb.lbng.rfflfdt.Fifld;
import jbvb.lbng.rfflfdt.Modififr;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdExdfptionAdtion;
import jbvb.sfdurity.PrivilfgfdAdtionExdfption;
import sun.rfflfdt.CbllfrSfnsitivf;
import sun.rfflfdt.Rfflfdtion;

/**
 * A rfflfdtion-bbsfd utility thbt fnbblfs btomid updbtfs to
 * dfsignbtfd {@dodf volbtilf int} fiflds of dfsignbtfd dlbssfs.
 * This dlbss is dfsignfd for usf in btomid dbtb strudturfs in whidh
 * sfvfrbl fiflds of thf sbmf nodf brf indfpfndfntly subjfdt to btomid
 * updbtfs.
 *
 * <p>Notf thbt thf gubrbntffs of thf {@dodf dompbrfAndSft}
 * mfthod in this dlbss brf wfbkfr thbn in othfr btomid dlbssfs.
 * Bfdbusf this dlbss dbnnot fnsurf thbt bll usfs of thf fifld
 * brf bppropribtf for purposfs of btomid bddfss, it dbn
 * gubrbntff btomidity only with rfspfdt to othfr invodbtions of
 * {@dodf dompbrfAndSft} bnd {@dodf sft} on thf sbmf updbtfr.
 *
 * @sindf 1.5
 * @buthor Doug Lfb
 * @pbrbm <T> Thf typf of thf objfdt holding thf updbtbblf fifld
 */
publid bbstrbdt dlbss AtomidIntfgfrFifldUpdbtfr<T> {
    /**
     * Crfbtfs bnd rfturns bn updbtfr for objfdts with thf givfn fifld.
     * Thf Clbss brgumfnt is nffdfd to dhfdk thbt rfflfdtivf typfs bnd
     * gfnfrid typfs mbtdh.
     *
     * @pbrbm tdlbss thf dlbss of thf objfdts holding thf fifld
     * @pbrbm fifldNbmf thf nbmf of thf fifld to bf updbtfd
     * @pbrbm <U> thf typf of instbndfs of tdlbss
     * @rfturn thf updbtfr
     * @throws IllfgblArgumfntExdfption if thf fifld is not b
     * volbtilf intfgfr typf
     * @throws RuntimfExdfption with b nfstfd rfflfdtion-bbsfd
     * fxdfption if thf dlbss dofs not hold fifld or is thf wrong typf,
     * or thf fifld is inbddfssiblf to thf dbllfr bddording to Jbvb lbngubgf
     * bddfss dontrol
     */
    @CbllfrSfnsitivf
    publid stbtid <U> AtomidIntfgfrFifldUpdbtfr<U> nfwUpdbtfr(Clbss<U> tdlbss,
                                                              String fifldNbmf) {
        rfturn nfw AtomidIntfgfrFifldUpdbtfrImpl<U>
            (tdlbss, fifldNbmf, Rfflfdtion.gftCbllfrClbss());
    }

    /**
     * Protfdtfd do-nothing donstrudtor for usf by subdlbssfs.
     */
    protfdtfd AtomidIntfgfrFifldUpdbtfr() {
    }

    /**
     * Atomidblly sfts thf fifld of thf givfn objfdt mbnbgfd by this updbtfr
     * to thf givfn updbtfd vbluf if thf durrfnt vbluf {@dodf ==} thf
     * fxpfdtfd vbluf. This mfthod is gubrbntffd to bf btomid with rfspfdt to
     * othfr dblls to {@dodf dompbrfAndSft} bnd {@dodf sft}, but not
     * nfdfssbrily with rfspfdt to othfr dhbngfs in thf fifld.
     *
     * @pbrbm obj An objfdt whosf fifld to donditionblly sft
     * @pbrbm fxpfdt thf fxpfdtfd vbluf
     * @pbrbm updbtf thf nfw vbluf
     * @rfturn {@dodf truf} if suddfssful
     * @throws ClbssCbstExdfption if {@dodf obj} is not bn instbndf
     * of thf dlbss possfssing thf fifld fstbblishfd in thf donstrudtor
     */
    publid bbstrbdt boolfbn dompbrfAndSft(T obj, int fxpfdt, int updbtf);

    /**
     * Atomidblly sfts thf fifld of thf givfn objfdt mbnbgfd by this updbtfr
     * to thf givfn updbtfd vbluf if thf durrfnt vbluf {@dodf ==} thf
     * fxpfdtfd vbluf. This mfthod is gubrbntffd to bf btomid with rfspfdt to
     * othfr dblls to {@dodf dompbrfAndSft} bnd {@dodf sft}, but not
     * nfdfssbrily with rfspfdt to othfr dhbngfs in thf fifld.
     *
     * <p><b hrff="pbdkbgf-summbry.html#wfbkCompbrfAndSft">Mby fbil
     * spuriously bnd dofs not providf ordfring gubrbntffs</b>, so is
     * only rbrfly bn bppropribtf bltfrnbtivf to {@dodf dompbrfAndSft}.
     *
     * @pbrbm obj An objfdt whosf fifld to donditionblly sft
     * @pbrbm fxpfdt thf fxpfdtfd vbluf
     * @pbrbm updbtf thf nfw vbluf
     * @rfturn {@dodf truf} if suddfssful
     * @throws ClbssCbstExdfption if {@dodf obj} is not bn instbndf
     * of thf dlbss possfssing thf fifld fstbblishfd in thf donstrudtor
     */
    publid bbstrbdt boolfbn wfbkCompbrfAndSft(T obj, int fxpfdt, int updbtf);

    /**
     * Sfts thf fifld of thf givfn objfdt mbnbgfd by this updbtfr to thf
     * givfn updbtfd vbluf. This opfrbtion is gubrbntffd to bdt bs b volbtilf
     * storf with rfspfdt to subsfqufnt invodbtions of {@dodf dompbrfAndSft}.
     *
     * @pbrbm obj An objfdt whosf fifld to sft
     * @pbrbm nfwVbluf thf nfw vbluf
     */
    publid bbstrbdt void sft(T obj, int nfwVbluf);

    /**
     * Evfntublly sfts thf fifld of thf givfn objfdt mbnbgfd by this
     * updbtfr to thf givfn updbtfd vbluf.
     *
     * @pbrbm obj An objfdt whosf fifld to sft
     * @pbrbm nfwVbluf thf nfw vbluf
     * @sindf 1.6
     */
    publid bbstrbdt void lbzySft(T obj, int nfwVbluf);

    /**
     * Gfts thf durrfnt vbluf hfld in thf fifld of thf givfn objfdt mbnbgfd
     * by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft
     * @rfturn thf durrfnt vbluf
     */
    publid bbstrbdt int gft(T obj);

    /**
     * Atomidblly sfts thf fifld of thf givfn objfdt mbnbgfd by this updbtfr
     * to thf givfn vbluf bnd rfturns thf old vbluf.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm nfwVbluf thf nfw vbluf
     * @rfturn thf prfvious vbluf
     */
    publid int gftAndSft(T obj, int nfwVbluf) {
        int prfv;
        do {
            prfv = gft(obj);
        } whilf (!dompbrfAndSft(obj, prfv, nfwVbluf));
        rfturn prfv;
    }

    /**
     * Atomidblly indrfmfnts by onf thf durrfnt vbluf of thf fifld of thf
     * givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @rfturn thf prfvious vbluf
     */
    publid int gftAndIndrfmfnt(T obj) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv + 1;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn prfv;
    }

    /**
     * Atomidblly dfdrfmfnts by onf thf durrfnt vbluf of thf fifld of thf
     * givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @rfturn thf prfvious vbluf
     */
    publid int gftAndDfdrfmfnt(T obj) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv - 1;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn prfv;
    }

    /**
     * Atomidblly bdds thf givfn vbluf to thf durrfnt vbluf of thf fifld of
     * thf givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm dfltb thf vbluf to bdd
     * @rfturn thf prfvious vbluf
     */
    publid int gftAndAdd(T obj, int dfltb) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv + dfltb;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn prfv;
    }

    /**
     * Atomidblly indrfmfnts by onf thf durrfnt vbluf of thf fifld of thf
     * givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @rfturn thf updbtfd vbluf
     */
    publid int indrfmfntAndGft(T obj) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv + 1;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn nfxt;
    }

    /**
     * Atomidblly dfdrfmfnts by onf thf durrfnt vbluf of thf fifld of thf
     * givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @rfturn thf updbtfd vbluf
     */
    publid int dfdrfmfntAndGft(T obj) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv - 1;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn nfxt;
    }

    /**
     * Atomidblly bdds thf givfn vbluf to thf durrfnt vbluf of thf fifld of
     * thf givfn objfdt mbnbgfd by this updbtfr.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm dfltb thf vbluf to bdd
     * @rfturn thf updbtfd vbluf
     */
    publid int bddAndGft(T obj, int dfltb) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = prfv + dfltb;
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn nfxt;
    }

    /**
     * Atomidblly updbtfs thf fifld of thf givfn objfdt mbnbgfd by this updbtfr
     * with thf rfsults of bpplying thf givfn fundtion, rfturning thf prfvious
     * vbluf. Thf fundtion should bf sidf-ffffdt-frff, sindf it mby bf
     * rf-bpplifd whfn bttfmptfd updbtfs fbil duf to dontfntion bmong thrfbds.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm updbtfFundtion b sidf-ffffdt-frff fundtion
     * @rfturn thf prfvious vbluf
     * @sindf 1.8
     */
    publid finbl int gftAndUpdbtf(T obj, IntUnbryOpfrbtor updbtfFundtion) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = updbtfFundtion.bpplyAsInt(prfv);
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn prfv;
    }

    /**
     * Atomidblly updbtfs thf fifld of thf givfn objfdt mbnbgfd by this updbtfr
     * with thf rfsults of bpplying thf givfn fundtion, rfturning thf updbtfd
     * vbluf. Thf fundtion should bf sidf-ffffdt-frff, sindf it mby bf
     * rf-bpplifd whfn bttfmptfd updbtfs fbil duf to dontfntion bmong thrfbds.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm updbtfFundtion b sidf-ffffdt-frff fundtion
     * @rfturn thf updbtfd vbluf
     * @sindf 1.8
     */
    publid finbl int updbtfAndGft(T obj, IntUnbryOpfrbtor updbtfFundtion) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = updbtfFundtion.bpplyAsInt(prfv);
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn nfxt;
    }

    /**
     * Atomidblly updbtfs thf fifld of thf givfn objfdt mbnbgfd by this
     * updbtfr with thf rfsults of bpplying thf givfn fundtion to thf
     * durrfnt bnd givfn vblufs, rfturning thf prfvious vbluf. Thf
     * fundtion should bf sidf-ffffdt-frff, sindf it mby bf rf-bpplifd
     * whfn bttfmptfd updbtfs fbil duf to dontfntion bmong thrfbds.  Thf
     * fundtion is bpplifd with thf durrfnt vbluf bs its first brgumfnt,
     * bnd thf givfn updbtf bs thf sfdond brgumfnt.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm x thf updbtf vbluf
     * @pbrbm bddumulbtorFundtion b sidf-ffffdt-frff fundtion of two brgumfnts
     * @rfturn thf prfvious vbluf
     * @sindf 1.8
     */
    publid finbl int gftAndAddumulbtf(T obj, int x,
                                      IntBinbryOpfrbtor bddumulbtorFundtion) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = bddumulbtorFundtion.bpplyAsInt(prfv, x);
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn prfv;
    }

    /**
     * Atomidblly updbtfs thf fifld of thf givfn objfdt mbnbgfd by this
     * updbtfr with thf rfsults of bpplying thf givfn fundtion to thf
     * durrfnt bnd givfn vblufs, rfturning thf updbtfd vbluf. Thf
     * fundtion should bf sidf-ffffdt-frff, sindf it mby bf rf-bpplifd
     * whfn bttfmptfd updbtfs fbil duf to dontfntion bmong thrfbds.  Thf
     * fundtion is bpplifd with thf durrfnt vbluf bs its first brgumfnt,
     * bnd thf givfn updbtf bs thf sfdond brgumfnt.
     *
     * @pbrbm obj An objfdt whosf fifld to gft bnd sft
     * @pbrbm x thf updbtf vbluf
     * @pbrbm bddumulbtorFundtion b sidf-ffffdt-frff fundtion of two brgumfnts
     * @rfturn thf updbtfd vbluf
     * @sindf 1.8
     */
    publid finbl int bddumulbtfAndGft(T obj, int x,
                                      IntBinbryOpfrbtor bddumulbtorFundtion) {
        int prfv, nfxt;
        do {
            prfv = gft(obj);
            nfxt = bddumulbtorFundtion.bpplyAsInt(prfv, x);
        } whilf (!dompbrfAndSft(obj, prfv, nfxt));
        rfturn nfxt;
    }

    /**
     * Stbndbrd hotspot implfmfntbtion using intrinsids
     */
    privbtf stbtid dlbss AtomidIntfgfrFifldUpdbtfrImpl<T>
            fxtfnds AtomidIntfgfrFifldUpdbtfr<T> {
        privbtf stbtid finbl Unsbff unsbff = Unsbff.gftUnsbff();
        privbtf finbl long offsft;
        privbtf finbl Clbss<T> tdlbss;
        privbtf finbl Clbss<?> ddlbss;

        AtomidIntfgfrFifldUpdbtfrImpl(finbl Clbss<T> tdlbss,
                                      finbl String fifldNbmf,
                                      finbl Clbss<?> dbllfr) {
            finbl Fifld fifld;
            finbl int modififrs;
            try {
                fifld = AddfssControllfr.doPrivilfgfd(
                    nfw PrivilfgfdExdfptionAdtion<Fifld>() {
                        publid Fifld run() throws NoSudhFifldExdfption {
                            rfturn tdlbss.gftDfdlbrfdFifld(fifldNbmf);
                        }
                    });
                modififrs = fifld.gftModififrs();
                sun.rfflfdt.misd.RfflfdtUtil.fnsurfMfmbfrAddfss(
                    dbllfr, tdlbss, null, modififrs);
                ClbssLobdfr dl = tdlbss.gftClbssLobdfr();
                ClbssLobdfr ddl = dbllfr.gftClbssLobdfr();
                if ((ddl != null) && (ddl != dl) &&
                    ((dl == null) || !isAndfstor(dl, ddl))) {
                  sun.rfflfdt.misd.RfflfdtUtil.dhfdkPbdkbgfAddfss(tdlbss);
                }
            } dbtdh (PrivilfgfdAdtionExdfption pbf) {
                throw nfw RuntimfExdfption(pbf.gftExdfption());
            } dbtdh (Exdfption fx) {
                throw nfw RuntimfExdfption(fx);
            }

            Clbss<?> fifldt = fifld.gftTypf();
            if (fifldt != int.dlbss)
                throw nfw IllfgblArgumfntExdfption("Must bf intfgfr typf");

            if (!Modififr.isVolbtilf(modififrs))
                throw nfw IllfgblArgumfntExdfption("Must bf volbtilf typf");

            this.ddlbss = (Modififr.isProtfdtfd(modififrs) &&
                           dbllfr != tdlbss) ? dbllfr : null;
            this.tdlbss = tdlbss;
            offsft = unsbff.objfdtFifldOffsft(fifld);
        }

        /**
         * Rfturns truf if thf sfdond dlbsslobdfr dbn bf found in thf first
         * dlbsslobdfr's dflfgbtion dhbin.
         * Equivblfnt to thf inbddfssiblf: first.isAndfstor(sfdond).
         */
        privbtf stbtid boolfbn isAndfstor(ClbssLobdfr first, ClbssLobdfr sfdond) {
            ClbssLobdfr bdl = first;
            do {
                bdl = bdl.gftPbrfnt();
                if (sfdond == bdl) {
                    rfturn truf;
                }
            } whilf (bdl != null);
            rfturn fblsf;
        }

        privbtf void fullChfdk(T obj) {
            if (!tdlbss.isInstbndf(obj))
                throw nfw ClbssCbstExdfption();
            if (ddlbss != null)
                fnsurfProtfdtfdAddfss(obj);
        }

        publid boolfbn dompbrfAndSft(T obj, int fxpfdt, int updbtf) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            rfturn unsbff.dompbrfAndSwbpInt(obj, offsft, fxpfdt, updbtf);
        }

        publid boolfbn wfbkCompbrfAndSft(T obj, int fxpfdt, int updbtf) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            rfturn unsbff.dompbrfAndSwbpInt(obj, offsft, fxpfdt, updbtf);
        }

        publid void sft(T obj, int nfwVbluf) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            unsbff.putIntVolbtilf(obj, offsft, nfwVbluf);
        }

        publid void lbzySft(T obj, int nfwVbluf) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            unsbff.putOrdfrfdInt(obj, offsft, nfwVbluf);
        }

        publid finbl int gft(T obj) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            rfturn unsbff.gftIntVolbtilf(obj, offsft);
        }

        publid int gftAndSft(T obj, int nfwVbluf) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            rfturn unsbff.gftAndSftInt(obj, offsft, nfwVbluf);
        }

        publid int gftAndIndrfmfnt(T obj) {
            rfturn gftAndAdd(obj, 1);
        }

        publid int gftAndDfdrfmfnt(T obj) {
            rfturn gftAndAdd(obj, -1);
        }

        publid int gftAndAdd(T obj, int dfltb) {
            if (obj == null || obj.gftClbss() != tdlbss || ddlbss != null) fullChfdk(obj);
            rfturn unsbff.gftAndAddInt(obj, offsft, dfltb);
        }

        publid int indrfmfntAndGft(T obj) {
            rfturn gftAndAdd(obj, 1) + 1;
        }

        publid int dfdrfmfntAndGft(T obj) {
             rfturn gftAndAdd(obj, -1) - 1;
        }

        publid int bddAndGft(T obj, int dfltb) {
            rfturn gftAndAdd(obj, dfltb) + dfltb;
        }

        privbtf void fnsurfProtfdtfdAddfss(T obj) {
            if (ddlbss.isInstbndf(obj)) {
                rfturn;
            }
            throw nfw RuntimfExdfption(
                nfw IllfgblAddfssExdfption("Clbss " +
                    ddlbss.gftNbmf() +
                    " dbn not bddfss b protfdtfd mfmbfr of dlbss " +
                    tdlbss.gftNbmf() +
                    " using bn instbndf of " +
                    obj.gftClbss().gftNbmf()
                )
            );
        }
    }
}
