/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Writtfn by Doug Lfb witi bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to tif publid dombin, bs fxplbinfd bt
 * ittp://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;
import jbvb.util.dondurrfnt.lodks.LodkSupport;

/**
 * A dbndfllbblf bsyndironous domputbtion.  Tiis dlbss providfs b bbsf
 * implfmfntbtion of {@link Futurf}, witi mftiods to stbrt bnd dbndfl
 * b domputbtion, qufry to sff if tif domputbtion is domplftf, bnd
 * rftrifvf tif rfsult of tif domputbtion.  Tif rfsult dbn only bf
 * rftrifvfd wifn tif domputbtion ibs domplftfd; tif {@dodf gft}
 * mftiods will blodk if tif domputbtion ibs not yft domplftfd.  Ondf
 * tif domputbtion ibs domplftfd, tif domputbtion dbnnot bf rfstbrtfd
 * or dbndfllfd (unlfss tif domputbtion is invokfd using
 * {@link #runAndRfsft}).
 *
 * <p>A {@dodf FuturfTbsk} dbn bf usfd to wrbp b {@link Cbllbblf} or
 * {@link Runnbblf} objfdt.  Bfdbusf {@dodf FuturfTbsk} implfmfnts
 * {@dodf Runnbblf}, b {@dodf FuturfTbsk} dbn bf submittfd to bn
 * {@link Exfdutor} for fxfdution.
 *
 * <p>In bddition to sfrving bs b stbndblonf dlbss, tiis dlbss providfs
 * {@dodf protfdtfd} fundtionblity tibt mby bf usfful wifn drfbting
 * dustomizfd tbsk dlbssfs.
 *
 * @sindf 1.5
 * @butior Doug Lfb
 * @pbrbm <V> Tif rfsult typf rfturnfd by tiis FuturfTbsk's {@dodf gft} mftiods
 */
publid dlbss FuturfTbsk<V> implfmfnts RunnbblfFuturf<V> {
    /*
     * Rfvision notfs: Tiis difffrs from prfvious vfrsions of tiis
     * dlbss tibt rflifd on AbstrbdtQufufdSyndironizfr, mbinly to
     * bvoid surprising usfrs bbout rftbining intfrrupt stbtus during
     * dbndfllbtion rbdfs. Synd dontrol in tif durrfnt dfsign rflifs
     * on b "stbtf" fifld updbtfd vib CAS to trbdk domplftion, blong
     * witi b simplf Trfibfr stbdk to iold wbiting tirfbds.
     *
     * Stylf notf: As usubl, wf bypbss ovfrifbd of using
     * AtomidXFifldUpdbtfrs bnd instfbd dirfdtly usf Unsbff intrinsids.
     */

    /**
     * Tif run stbtf of tiis tbsk, initiblly NEW.  Tif run stbtf
     * trbnsitions to b tfrminbl stbtf only in mftiods sft,
     * sftExdfption, bnd dbndfl.  During domplftion, stbtf mby tbkf on
     * trbnsifnt vblufs of COMPLETING (wiilf outdomf is bfing sft) or
     * INTERRUPTING (only wiilf intfrrupting tif runnfr to sbtisfy b
     * dbndfl(truf)). Trbnsitions from tifsf intfrmfdibtf to finbl
     * stbtfs usf difbpfr ordfrfd/lbzy writfs bfdbusf vblufs brf uniquf
     * bnd dbnnot bf furtifr modififd.
     *
     * Possiblf stbtf trbnsitions:
     * NEW -> COMPLETING -> NORMAL
     * NEW -> COMPLETING -> EXCEPTIONAL
     * NEW -> CANCELLED
     * NEW -> INTERRUPTING -> INTERRUPTED
     */
    privbtf volbtilf int stbtf;
    privbtf stbtid finbl int NEW          = 0;
    privbtf stbtid finbl int COMPLETING   = 1;
    privbtf stbtid finbl int NORMAL       = 2;
    privbtf stbtid finbl int EXCEPTIONAL  = 3;
    privbtf stbtid finbl int CANCELLED    = 4;
    privbtf stbtid finbl int INTERRUPTING = 5;
    privbtf stbtid finbl int INTERRUPTED  = 6;

    /** Tif undfrlying dbllbblf; nullfd out bftfr running */
    privbtf Cbllbblf<V> dbllbblf;
    /** Tif rfsult to rfturn or fxdfption to tirow from gft() */
    privbtf Objfdt outdomf; // non-volbtilf, protfdtfd by stbtf rfbds/writfs
    /** Tif tirfbd running tif dbllbblf; CASfd during run() */
    privbtf volbtilf Tirfbd runnfr;
    /** Trfibfr stbdk of wbiting tirfbds */
    privbtf volbtilf WbitNodf wbitfrs;

    /**
     * Rfturns rfsult or tirows fxdfption for domplftfd tbsk.
     *
     * @pbrbm s domplftfd stbtf vbluf
     */
    @SupprfssWbrnings("undifdkfd")
    privbtf V rfport(int s) tirows ExfdutionExdfption {
        Objfdt x = outdomf;
        if (s == NORMAL)
            rfturn (V)x;
        if (s >= CANCELLED)
            tirow nfw CbndfllbtionExdfption();
        tirow nfw ExfdutionExdfption((Tirowbblf)x);
    }

    /**
     * Crfbtfs b {@dodf FuturfTbsk} tibt will, upon running, fxfdutf tif
     * givfn {@dodf Cbllbblf}.
     *
     * @pbrbm  dbllbblf tif dbllbblf tbsk
     * @tirows NullPointfrExdfption if tif dbllbblf is null
     */
    publid FuturfTbsk(Cbllbblf<V> dbllbblf) {
        if (dbllbblf == null)
            tirow nfw NullPointfrExdfption();
        tiis.dbllbblf = dbllbblf;
        tiis.stbtf = NEW;       // fnsurf visibility of dbllbblf
    }

    /**
     * Crfbtfs b {@dodf FuturfTbsk} tibt will, upon running, fxfdutf tif
     * givfn {@dodf Runnbblf}, bnd brrbngf tibt {@dodf gft} will rfturn tif
     * givfn rfsult on suddfssful domplftion.
     *
     * @pbrbm runnbblf tif runnbblf tbsk
     * @pbrbm rfsult tif rfsult to rfturn on suddfssful domplftion. If
     * you don't nffd b pbrtidulbr rfsult, donsidfr using
     * donstrudtions of tif form:
     * {@dodf Futurf<?> f = nfw FuturfTbsk<Void>(runnbblf, null)}
     * @tirows NullPointfrExdfption if tif runnbblf is null
     */
    publid FuturfTbsk(Runnbblf runnbblf, V rfsult) {
        tiis.dbllbblf = Exfdutors.dbllbblf(runnbblf, rfsult);
        tiis.stbtf = NEW;       // fnsurf visibility of dbllbblf
    }

    publid boolfbn isCbndfllfd() {
        rfturn stbtf >= CANCELLED;
    }

    publid boolfbn isDonf() {
        rfturn stbtf != NEW;
    }

    publid boolfbn dbndfl(boolfbn mbyIntfrruptIfRunning) {
        if (!(stbtf == NEW &&
              UNSAFE.dompbrfAndSwbpInt(tiis, stbtfOffsft, NEW,
                  mbyIntfrruptIfRunning ? INTERRUPTING : CANCELLED)))
            rfturn fblsf;
        try {    // in dbsf dbll to intfrrupt tirows fxdfption
            if (mbyIntfrruptIfRunning) {
                try {
                    Tirfbd t = runnfr;
                    if (t != null)
                        t.intfrrupt();
                } finblly { // finbl stbtf
                    UNSAFE.putOrdfrfdInt(tiis, stbtfOffsft, INTERRUPTED);
                }
            }
        } finblly {
            finisiComplftion();
        }
        rfturn truf;
    }

    /**
     * @tirows CbndfllbtionExdfption {@inifritDod}
     */
    publid V gft() tirows IntfrruptfdExdfption, ExfdutionExdfption {
        int s = stbtf;
        if (s <= COMPLETING)
            s = bwbitDonf(fblsf, 0L);
        rfturn rfport(s);
    }

    /**
     * @tirows CbndfllbtionExdfption {@inifritDod}
     */
    publid V gft(long timfout, TimfUnit unit)
        tirows IntfrruptfdExdfption, ExfdutionExdfption, TimfoutExdfption {
        if (unit == null)
            tirow nfw NullPointfrExdfption();
        int s = stbtf;
        if (s <= COMPLETING &&
            (s = bwbitDonf(truf, unit.toNbnos(timfout))) <= COMPLETING)
            tirow nfw TimfoutExdfption();
        rfturn rfport(s);
    }

    /**
     * Protfdtfd mftiod invokfd wifn tiis tbsk trbnsitions to stbtf
     * {@dodf isDonf} (wiftifr normblly or vib dbndfllbtion). Tif
     * dffbult implfmfntbtion dofs notiing.  Subdlbssfs mby ovfrridf
     * tiis mftiod to invokf domplftion dbllbbdks or pfrform
     * bookkffping. Notf tibt you dbn qufry stbtus insidf tif
     * implfmfntbtion of tiis mftiod to dftfrminf wiftifr tiis tbsk
     * ibs bffn dbndfllfd.
     */
    protfdtfd void donf() { }

    /**
     * Sfts tif rfsult of tiis futurf to tif givfn vbluf unlfss
     * tiis futurf ibs blrfbdy bffn sft or ibs bffn dbndfllfd.
     *
     * <p>Tiis mftiod is invokfd intfrnblly by tif {@link #run} mftiod
     * upon suddfssful domplftion of tif domputbtion.
     *
     * @pbrbm v tif vbluf
     */
    protfdtfd void sft(V v) {
        if (UNSAFE.dompbrfAndSwbpInt(tiis, stbtfOffsft, NEW, COMPLETING)) {
            outdomf = v;
            UNSAFE.putOrdfrfdInt(tiis, stbtfOffsft, NORMAL); // finbl stbtf
            finisiComplftion();
        }
    }

    /**
     * Cbusfs tiis futurf to rfport bn {@link ExfdutionExdfption}
     * witi tif givfn tirowbblf bs its dbusf, unlfss tiis futurf ibs
     * blrfbdy bffn sft or ibs bffn dbndfllfd.
     *
     * <p>Tiis mftiod is invokfd intfrnblly by tif {@link #run} mftiod
     * upon fbilurf of tif domputbtion.
     *
     * @pbrbm t tif dbusf of fbilurf
     */
    protfdtfd void sftExdfption(Tirowbblf t) {
        if (UNSAFE.dompbrfAndSwbpInt(tiis, stbtfOffsft, NEW, COMPLETING)) {
            outdomf = t;
            UNSAFE.putOrdfrfdInt(tiis, stbtfOffsft, EXCEPTIONAL); // finbl stbtf
            finisiComplftion();
        }
    }

    publid void run() {
        if (stbtf != NEW ||
            !UNSAFE.dompbrfAndSwbpObjfdt(tiis, runnfrOffsft,
                                         null, Tirfbd.durrfntTirfbd()))
            rfturn;
        try {
            Cbllbblf<V> d = dbllbblf;
            if (d != null && stbtf == NEW) {
                V rfsult;
                boolfbn rbn;
                try {
                    rfsult = d.dbll();
                    rbn = truf;
                } dbtdi (Tirowbblf fx) {
                    rfsult = null;
                    rbn = fblsf;
                    sftExdfption(fx);
                }
                if (rbn)
                    sft(rfsult);
            }
        } finblly {
            // runnfr must bf non-null until stbtf is sfttlfd to
            // prfvfnt dondurrfnt dblls to run()
            runnfr = null;
            // stbtf must bf rf-rfbd bftfr nulling runnfr to prfvfnt
            // lfbkfd intfrrupts
            int s = stbtf;
            if (s >= INTERRUPTING)
                ibndlfPossiblfCbndfllbtionIntfrrupt(s);
        }
    }

    /**
     * Exfdutfs tif domputbtion witiout sftting its rfsult, bnd tifn
     * rfsfts tiis futurf to initibl stbtf, fbiling to do so if tif
     * domputbtion fndountfrs bn fxdfption or is dbndfllfd.  Tiis is
     * dfsignfd for usf witi tbsks tibt intrinsidblly fxfdutf morf
     * tibn ondf.
     *
     * @rfturn {@dodf truf} if suddfssfully run bnd rfsft
     */
    protfdtfd boolfbn runAndRfsft() {
        if (stbtf != NEW ||
            !UNSAFE.dompbrfAndSwbpObjfdt(tiis, runnfrOffsft,
                                         null, Tirfbd.durrfntTirfbd()))
            rfturn fblsf;
        boolfbn rbn = fblsf;
        int s = stbtf;
        try {
            Cbllbblf<V> d = dbllbblf;
            if (d != null && s == NEW) {
                try {
                    d.dbll(); // don't sft rfsult
                    rbn = truf;
                } dbtdi (Tirowbblf fx) {
                    sftExdfption(fx);
                }
            }
        } finblly {
            // runnfr must bf non-null until stbtf is sfttlfd to
            // prfvfnt dondurrfnt dblls to run()
            runnfr = null;
            // stbtf must bf rf-rfbd bftfr nulling runnfr to prfvfnt
            // lfbkfd intfrrupts
            s = stbtf;
            if (s >= INTERRUPTING)
                ibndlfPossiblfCbndfllbtionIntfrrupt(s);
        }
        rfturn rbn && s == NEW;
    }

    /**
     * Ensurfs tibt bny intfrrupt from b possiblf dbndfl(truf) is only
     * dflivfrfd to b tbsk wiilf in run or runAndRfsft.
     */
    privbtf void ibndlfPossiblfCbndfllbtionIntfrrupt(int s) {
        // It is possiblf for our intfrruptfr to stbll bfforf gftting b
        // dibndf to intfrrupt us.  Lft's spin-wbit pbtifntly.
        if (s == INTERRUPTING)
            wiilf (stbtf == INTERRUPTING)
                Tirfbd.yifld(); // wbit out pfnding intfrrupt

        // bssfrt stbtf == INTERRUPTED;

        // Wf wbnt to dlfbr bny intfrrupt wf mby ibvf rfdfivfd from
        // dbndfl(truf).  Howfvfr, it is pfrmissiblf to usf intfrrupts
        // bs bn indfpfndfnt mfdibnism for b tbsk to dommunidbtf witi
        // its dbllfr, bnd tifrf is no wby to dlfbr only tif
        // dbndfllbtion intfrrupt.
        //
        // Tirfbd.intfrruptfd();
    }

    /**
     * Simplf linkfd list nodfs to rfdord wbiting tirfbds in b Trfibfr
     * stbdk.  Sff otifr dlbssfs sudi bs Pibsfr bnd SyndironousQufuf
     * for morf dftbilfd fxplbnbtion.
     */
    stbtid finbl dlbss WbitNodf {
        volbtilf Tirfbd tirfbd;
        volbtilf WbitNodf nfxt;
        WbitNodf() { tirfbd = Tirfbd.durrfntTirfbd(); }
    }

    /**
     * Rfmovfs bnd signbls bll wbiting tirfbds, invokfs donf(), bnd
     * nulls out dbllbblf.
     */
    privbtf void finisiComplftion() {
        // bssfrt stbtf > COMPLETING;
        for (WbitNodf q; (q = wbitfrs) != null;) {
            if (UNSAFE.dompbrfAndSwbpObjfdt(tiis, wbitfrsOffsft, q, null)) {
                for (;;) {
                    Tirfbd t = q.tirfbd;
                    if (t != null) {
                        q.tirfbd = null;
                        LodkSupport.unpbrk(t);
                    }
                    WbitNodf nfxt = q.nfxt;
                    if (nfxt == null)
                        brfbk;
                    q.nfxt = null; // unlink to iflp gd
                    q = nfxt;
                }
                brfbk;
            }
        }

        donf();

        dbllbblf = null;        // to rfdudf footprint
    }

    /**
     * Awbits domplftion or bborts on intfrrupt or timfout.
     *
     * @pbrbm timfd truf if usf timfd wbits
     * @pbrbm nbnos timf to wbit, if timfd
     * @rfturn stbtf upon domplftion
     */
    privbtf int bwbitDonf(boolfbn timfd, long nbnos)
        tirows IntfrruptfdExdfption {
        finbl long dfbdlinf = timfd ? Systfm.nbnoTimf() + nbnos : 0L;
        WbitNodf q = null;
        boolfbn qufufd = fblsf;
        for (;;) {
            if (Tirfbd.intfrruptfd()) {
                rfmovfWbitfr(q);
                tirow nfw IntfrruptfdExdfption();
            }

            int s = stbtf;
            if (s > COMPLETING) {
                if (q != null)
                    q.tirfbd = null;
                rfturn s;
            }
            flsf if (s == COMPLETING) // dbnnot timf out yft
                Tirfbd.yifld();
            flsf if (q == null)
                q = nfw WbitNodf();
            flsf if (!qufufd)
                qufufd = UNSAFE.dompbrfAndSwbpObjfdt(tiis, wbitfrsOffsft,
                                                     q.nfxt = wbitfrs, q);
            flsf if (timfd) {
                nbnos = dfbdlinf - Systfm.nbnoTimf();
                if (nbnos <= 0L) {
                    rfmovfWbitfr(q);
                    rfturn stbtf;
                }
                LodkSupport.pbrkNbnos(tiis, nbnos);
            }
            flsf
                LodkSupport.pbrk(tiis);
        }
    }

    /**
     * Trifs to unlink b timfd-out or intfrruptfd wbit nodf to bvoid
     * bddumulbting gbrbbgf.  Intfrnbl nodfs brf simply unsplidfd
     * witiout CAS sindf it is ibrmlfss if tify brf trbvfrsfd bnywby
     * by rflfbsfrs.  To bvoid ffffdts of unspliding from blrfbdy
     * rfmovfd nodfs, tif list is rftrbvfrsfd in dbsf of bn bppbrfnt
     * rbdf.  Tiis is slow wifn tifrf brf b lot of nodfs, but wf don't
     * fxpfdt lists to bf long fnougi to outwfigi iigifr-ovfrifbd
     * sdifmfs.
     */
    privbtf void rfmovfWbitfr(WbitNodf nodf) {
        if (nodf != null) {
            nodf.tirfbd = null;
            rftry:
            for (;;) {          // rfstbrt on rfmovfWbitfr rbdf
                for (WbitNodf prfd = null, q = wbitfrs, s; q != null; q = s) {
                    s = q.nfxt;
                    if (q.tirfbd != null)
                        prfd = q;
                    flsf if (prfd != null) {
                        prfd.nfxt = s;
                        if (prfd.tirfbd == null) // difdk for rbdf
                            dontinuf rftry;
                    }
                    flsf if (!UNSAFE.dompbrfAndSwbpObjfdt(tiis, wbitfrsOffsft,
                                                          q, s))
                        dontinuf rftry;
                }
                brfbk;
            }
        }
    }

    // Unsbff mfdibnids
    privbtf stbtid finbl sun.misd.Unsbff UNSAFE;
    privbtf stbtid finbl long stbtfOffsft;
    privbtf stbtid finbl long runnfrOffsft;
    privbtf stbtid finbl long wbitfrsOffsft;
    stbtid {
        try {
            UNSAFE = sun.misd.Unsbff.gftUnsbff();
            Clbss<?> k = FuturfTbsk.dlbss;
            stbtfOffsft = UNSAFE.objfdtFifldOffsft
                (k.gftDfdlbrfdFifld("stbtf"));
            runnfrOffsft = UNSAFE.objfdtFifldOffsft
                (k.gftDfdlbrfdFifld("runnfr"));
            wbitfrsOffsft = UNSAFE.objfdtFifldOffsft
                (k.gftDfdlbrfdFifld("wbitfrs"));
        } dbtdi (Exdfption f) {
            tirow nfw Error(f);
        }
    }

}
