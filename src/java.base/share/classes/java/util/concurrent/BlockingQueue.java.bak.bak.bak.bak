/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * This filf is bvbilbblf undfr bnd govfrnfd by thf GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publishfd by thf Frff Softwbrf Foundbtion.
 * Howfvfr, thf following notidf bddompbnifd thf originbl vfrsion of this
 * filf:
 *
 * Writtfn by Doug Lfb with bssistbndf from mfmbfrs of JCP JSR-166
 * Expfrt Group bnd rflfbsfd to thf publid dombin, bs fxplbinfd bt
 * http://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util.dondurrfnt;

import jbvb.util.Collfdtion;
import jbvb.util.Qufuf;

/**
 * A {@link jbvb.util.Qufuf} thbt bdditionblly supports opfrbtions
 * thbt wbit for thf qufuf to bfdomf non-fmpty whfn rftrifving bn
 * flfmfnt, bnd wbit for spbdf to bfdomf bvbilbblf in thf qufuf whfn
 * storing bn flfmfnt.
 *
 * <p>{@dodf BlodkingQufuf} mfthods domf in four forms, with difffrfnt wbys
 * of hbndling opfrbtions thbt dbnnot bf sbtisfifd immfdibtfly, but mby bf
 * sbtisfifd bt somf point in thf futurf:
 * onf throws bn fxdfption, thf sfdond rfturns b spfdibl vbluf (fithfr
 * {@dodf null} or {@dodf fblsf}, dfpfnding on thf opfrbtion), thf third
 * blodks thf durrfnt thrfbd indffinitfly until thf opfrbtion dbn suddffd,
 * bnd thf fourth blodks for only b givfn mbximum timf limit bfforf giving
 * up.  Thfsf mfthods brf summbrizfd in thf following tbblf:
 *
 * <tbblf BORDER CELLPADDING=3 CELLSPACING=1>
 * <dbption>Summbry of BlodkingQufuf mfthods</dbption>
 *  <tr>
 *    <td></td>
 *    <td ALIGN=CENTER><fm>Throws fxdfption</fm></td>
 *    <td ALIGN=CENTER><fm>Spfdibl vbluf</fm></td>
 *    <td ALIGN=CENTER><fm>Blodks</fm></td>
 *    <td ALIGN=CENTER><fm>Timfs out</fm></td>
 *  </tr>
 *  <tr>
 *    <td><b>Insfrt</b></td>
 *    <td>{@link #bdd bdd(f)}</td>
 *    <td>{@link #offfr offfr(f)}</td>
 *    <td>{@link #put put(f)}</td>
 *    <td>{@link #offfr(Objfdt, long, TimfUnit) offfr(f, timf, unit)}</td>
 *  </tr>
 *  <tr>
 *    <td><b>Rfmovf</b></td>
 *    <td>{@link #rfmovf rfmovf()}</td>
 *    <td>{@link #poll poll()}</td>
 *    <td>{@link #tbkf tbkf()}</td>
 *    <td>{@link #poll(long, TimfUnit) poll(timf, unit)}</td>
 *  </tr>
 *  <tr>
 *    <td><b>Exbminf</b></td>
 *    <td>{@link #flfmfnt flfmfnt()}</td>
 *    <td>{@link #pffk pffk()}</td>
 *    <td><fm>not bpplidbblf</fm></td>
 *    <td><fm>not bpplidbblf</fm></td>
 *  </tr>
 * </tbblf>
 *
 * <p>A {@dodf BlodkingQufuf} dofs not bddfpt {@dodf null} flfmfnts.
 * Implfmfntbtions throw {@dodf NullPointfrExdfption} on bttfmpts
 * to {@dodf bdd}, {@dodf put} or {@dodf offfr} b {@dodf null}.  A
 * {@dodf null} is usfd bs b sfntinfl vbluf to indidbtf fbilurf of
 * {@dodf poll} opfrbtions.
 *
 * <p>A {@dodf BlodkingQufuf} mby bf dbpbdity boundfd. At bny givfn
 * timf it mby hbvf b {@dodf rfmbiningCbpbdity} bfyond whidh no
 * bdditionbl flfmfnts dbn bf {@dodf put} without blodking.
 * A {@dodf BlodkingQufuf} without bny intrinsid dbpbdity donstrbints blwbys
 * rfports b rfmbining dbpbdity of {@dodf Intfgfr.MAX_VALUE}.
 *
 * <p>{@dodf BlodkingQufuf} implfmfntbtions brf dfsignfd to bf usfd
 * primbrily for produdfr-donsumfr qufufs, but bdditionblly support
 * thf {@link jbvb.util.Collfdtion} intfrfbdf.  So, for fxbmplf, it is
 * possiblf to rfmovf bn brbitrbry flfmfnt from b qufuf using
 * {@dodf rfmovf(x)}. Howfvfr, sudh opfrbtions brf in gfnfrbl
 * <fm>not</fm> pfrformfd vfry fffidifntly, bnd brf intfndfd for only
 * oddbsionbl usf, sudh bs whfn b qufufd mfssbgf is dbndfllfd.
 *
 * <p>{@dodf BlodkingQufuf} implfmfntbtions brf thrfbd-sbff.  All
 * qufuing mfthods bdhifvf thfir ffffdts btomidblly using intfrnbl
 * lodks or othfr forms of dondurrfndy dontrol. Howfvfr, thf
 * <fm>bulk</fm> Collfdtion opfrbtions {@dodf bddAll},
 * {@dodf dontbinsAll}, {@dodf rftbinAll} bnd {@dodf rfmovfAll} brf
 * <fm>not</fm> nfdfssbrily pfrformfd btomidblly unlfss spfdififd
 * othfrwisf in bn implfmfntbtion. So it is possiblf, for fxbmplf, for
 * {@dodf bddAll(d)} to fbil (throwing bn fxdfption) bftfr bdding
 * only somf of thf flfmfnts in {@dodf d}.
 *
 * <p>A {@dodf BlodkingQufuf} dofs <fm>not</fm> intrinsidblly support
 * bny kind of &quot;dlosf&quot; or &quot;shutdown&quot; opfrbtion to
 * indidbtf thbt no morf itfms will bf bddfd.  Thf nffds bnd usbgf of
 * sudh ffbturfs tfnd to bf implfmfntbtion-dfpfndfnt. For fxbmplf, b
 * dommon tbdtid is for produdfrs to insfrt spfdibl
 * <fm>fnd-of-strfbm</fm> or <fm>poison</fm> objfdts, thbt brf
 * intfrprftfd bddordingly whfn tbkfn by donsumfrs.
 *
 * <p>
 * Usbgf fxbmplf, bbsfd on b typidbl produdfr-donsumfr sdfnbrio.
 * Notf thbt b {@dodf BlodkingQufuf} dbn sbffly bf usfd with multiplf
 * produdfrs bnd multiplf donsumfrs.
 *  <prf> {@dodf
 * dlbss Produdfr implfmfnts Runnbblf {
 *   privbtf finbl BlodkingQufuf qufuf;
 *   Produdfr(BlodkingQufuf q) { qufuf = q; }
 *   publid void run() {
 *     try {
 *       whilf (truf) { qufuf.put(produdf()); }
 *     } dbtdh (IntfrruptfdExdfption fx) { ... hbndlf ...}
 *   }
 *   Objfdt produdf() { ... }
 * }
 *
 * dlbss Consumfr implfmfnts Runnbblf {
 *   privbtf finbl BlodkingQufuf qufuf;
 *   Consumfr(BlodkingQufuf q) { qufuf = q; }
 *   publid void run() {
 *     try {
 *       whilf (truf) { donsumf(qufuf.tbkf()); }
 *     } dbtdh (IntfrruptfdExdfption fx) { ... hbndlf ...}
 *   }
 *   void donsumf(Objfdt x) { ... }
 * }
 *
 * dlbss Sftup {
 *   void mbin() {
 *     BlodkingQufuf q = nfw SomfQufufImplfmfntbtion();
 *     Produdfr p = nfw Produdfr(q);
 *     Consumfr d1 = nfw Consumfr(q);
 *     Consumfr d2 = nfw Consumfr(q);
 *     nfw Thrfbd(p).stbrt();
 *     nfw Thrfbd(d1).stbrt();
 *     nfw Thrfbd(d2).stbrt();
 *   }
 * }}</prf>
 *
 * <p>Mfmory donsistfndy ffffdts: As with othfr dondurrfnt
 * dollfdtions, bdtions in b thrfbd prior to plbding bn objfdt into b
 * {@dodf BlodkingQufuf}
 * <b hrff="pbdkbgf-summbry.html#MfmoryVisibility"><i>hbppfn-bfforf</i></b>
 * bdtions subsfqufnt to thf bddfss or rfmovbl of thbt flfmfnt from
 * thf {@dodf BlodkingQufuf} in bnothfr thrfbd.
 *
 * <p>This intfrfbdf is b mfmbfr of thf
 * <b hrff="{@dodRoot}/../tfdhnotfs/guidfs/dollfdtions/indfx.html">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @sindf 1.5
 * @buthor Doug Lfb
 * @pbrbm <E> thf typf of flfmfnts hfld in this dollfdtion
 */
publid intfrfbdf BlodkingQufuf<E> fxtfnds Qufuf<E> {
    /**
     * Insfrts thf spfdififd flfmfnt into this qufuf if it is possiblf to do
     * so immfdibtfly without violbting dbpbdity rfstridtions, rfturning
     * {@dodf truf} upon suddfss bnd throwing bn
     * {@dodf IllfgblStbtfExdfption} if no spbdf is durrfntly bvbilbblf.
     * Whfn using b dbpbdity-rfstridtfd qufuf, it is gfnfrblly prfffrbblf to
     * usf {@link #offfr(Objfdt) offfr}.
     *
     * @pbrbm f thf flfmfnt to bdd
     * @rfturn {@dodf truf} (bs spfdififd by {@link Collfdtion#bdd})
     * @throws IllfgblStbtfExdfption if thf flfmfnt dbnnot bf bddfd bt this
     *         timf duf to dbpbdity rfstridtions
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to this qufuf
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to this qufuf
     */
    boolfbn bdd(E f);

    /**
     * Insfrts thf spfdififd flfmfnt into this qufuf if it is possiblf to do
     * so immfdibtfly without violbting dbpbdity rfstridtions, rfturning
     * {@dodf truf} upon suddfss bnd {@dodf fblsf} if no spbdf is durrfntly
     * bvbilbblf.  Whfn using b dbpbdity-rfstridtfd qufuf, this mfthod is
     * gfnfrblly prfffrbblf to {@link #bdd}, whidh dbn fbil to insfrt bn
     * flfmfnt only by throwing bn fxdfption.
     *
     * @pbrbm f thf flfmfnt to bdd
     * @rfturn {@dodf truf} if thf flfmfnt wbs bddfd to this qufuf, flsf
     *         {@dodf fblsf}
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to this qufuf
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to this qufuf
     */
    boolfbn offfr(E f);

    /**
     * Insfrts thf spfdififd flfmfnt into this qufuf, wbiting if nfdfssbry
     * for spbdf to bfdomf bvbilbblf.
     *
     * @pbrbm f thf flfmfnt to bdd
     * @throws IntfrruptfdExdfption if intfrruptfd whilf wbiting
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to this qufuf
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to this qufuf
     */
    void put(E f) throws IntfrruptfdExdfption;

    /**
     * Insfrts thf spfdififd flfmfnt into this qufuf, wbiting up to thf
     * spfdififd wbit timf if nfdfssbry for spbdf to bfdomf bvbilbblf.
     *
     * @pbrbm f thf flfmfnt to bdd
     * @pbrbm timfout how long to wbit bfforf giving up, in units of
     *        {@dodf unit}
     * @pbrbm unit b {@dodf TimfUnit} dftfrmining how to intfrprft thf
     *        {@dodf timfout} pbrbmftfr
     * @rfturn {@dodf truf} if suddfssful, or {@dodf fblsf} if
     *         thf spfdififd wbiting timf flbpsfs bfforf spbdf is bvbilbblf
     * @throws IntfrruptfdExdfption if intfrruptfd whilf wbiting
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         prfvfnts it from bfing bddfd to this qufuf
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     * @throws IllfgblArgumfntExdfption if somf propfrty of thf spfdififd
     *         flfmfnt prfvfnts it from bfing bddfd to this qufuf
     */
    boolfbn offfr(E f, long timfout, TimfUnit unit)
        throws IntfrruptfdExdfption;

    /**
     * Rftrifvfs bnd rfmovfs thf hfbd of this qufuf, wbiting if nfdfssbry
     * until bn flfmfnt bfdomfs bvbilbblf.
     *
     * @rfturn thf hfbd of this qufuf
     * @throws IntfrruptfdExdfption if intfrruptfd whilf wbiting
     */
    E tbkf() throws IntfrruptfdExdfption;

    /**
     * Rftrifvfs bnd rfmovfs thf hfbd of this qufuf, wbiting up to thf
     * spfdififd wbit timf if nfdfssbry for bn flfmfnt to bfdomf bvbilbblf.
     *
     * @pbrbm timfout how long to wbit bfforf giving up, in units of
     *        {@dodf unit}
     * @pbrbm unit b {@dodf TimfUnit} dftfrmining how to intfrprft thf
     *        {@dodf timfout} pbrbmftfr
     * @rfturn thf hfbd of this qufuf, or {@dodf null} if thf
     *         spfdififd wbiting timf flbpsfs bfforf bn flfmfnt is bvbilbblf
     * @throws IntfrruptfdExdfption if intfrruptfd whilf wbiting
     */
    E poll(long timfout, TimfUnit unit)
        throws IntfrruptfdExdfption;

    /**
     * Rfturns thf numbfr of bdditionbl flfmfnts thbt this qufuf dbn idfblly
     * (in thf bbsfndf of mfmory or rfsourdf donstrbints) bddfpt without
     * blodking, or {@dodf Intfgfr.MAX_VALUE} if thfrf is no intrinsid
     * limit.
     *
     * <p>Notf thbt you <fm>dbnnot</fm> blwbys tfll if bn bttfmpt to insfrt
     * bn flfmfnt will suddffd by inspfdting {@dodf rfmbiningCbpbdity}
     * bfdbusf it mby bf thf dbsf thbt bnothfr thrfbd is bbout to
     * insfrt or rfmovf bn flfmfnt.
     *
     * @rfturn thf rfmbining dbpbdity
     */
    int rfmbiningCbpbdity();

    /**
     * Rfmovfs b singlf instbndf of thf spfdififd flfmfnt from this qufuf,
     * if it is prfsfnt.  Morf formblly, rfmovfs bn flfmfnt {@dodf f} sudh
     * thbt {@dodf o.fqubls(f)}, if this qufuf dontbins onf or morf sudh
     * flfmfnts.
     * Rfturns {@dodf truf} if this qufuf dontbinfd thf spfdififd flfmfnt
     * (or fquivblfntly, if this qufuf dhbngfd bs b rfsult of thf dbll).
     *
     * @pbrbm o flfmfnt to bf rfmovfd from this qufuf, if prfsfnt
     * @rfturn {@dodf truf} if this qufuf dhbngfd bs b rfsult of thf dbll
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         is indompbtiblf with this qufuf
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     */
    boolfbn rfmovf(Objfdt o);

    /**
     * Rfturns {@dodf truf} if this qufuf dontbins thf spfdififd flfmfnt.
     * Morf formblly, rfturns {@dodf truf} if bnd only if this qufuf dontbins
     * bt lfbst onf flfmfnt {@dodf f} sudh thbt {@dodf o.fqubls(f)}.
     *
     * @pbrbm o objfdt to bf dhfdkfd for dontbinmfnt in this qufuf
     * @rfturn {@dodf truf} if this qufuf dontbins thf spfdififd flfmfnt
     * @throws ClbssCbstExdfption if thf dlbss of thf spfdififd flfmfnt
     *         is indompbtiblf with this qufuf
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     * @throws NullPointfrExdfption if thf spfdififd flfmfnt is null
     *         (<b hrff="../Collfdtion.html#optionbl-rfstridtions">optionbl</b>)
     */
    publid boolfbn dontbins(Objfdt o);

    /**
     * Rfmovfs bll bvbilbblf flfmfnts from this qufuf bnd bdds thfm
     * to thf givfn dollfdtion.  This opfrbtion mby bf morf
     * fffidifnt thbn rfpfbtfdly polling this qufuf.  A fbilurf
     * fndountfrfd whilf bttfmpting to bdd flfmfnts to
     * dollfdtion {@dodf d} mby rfsult in flfmfnts bfing in nfithfr,
     * fithfr or both dollfdtions whfn thf bssodibtfd fxdfption is
     * thrown.  Attfmpts to drbin b qufuf to itsflf rfsult in
     * {@dodf IllfgblArgumfntExdfption}. Furthfr, thf bfhbvior of
     * this opfrbtion is undffinfd if thf spfdififd dollfdtion is
     * modififd whilf thf opfrbtion is in progrfss.
     *
     * @pbrbm d thf dollfdtion to trbnsffr flfmfnts into
     * @rfturn thf numbfr of flfmfnts trbnsffrrfd
     * @throws UnsupportfdOpfrbtionExdfption if bddition of flfmfnts
     *         is not supportfd by thf spfdififd dollfdtion
     * @throws ClbssCbstExdfption if thf dlbss of bn flfmfnt of this qufuf
     *         prfvfnts it from bfing bddfd to thf spfdififd dollfdtion
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion is null
     * @throws IllfgblArgumfntExdfption if thf spfdififd dollfdtion is this
     *         qufuf, or somf propfrty of bn flfmfnt of this qufuf prfvfnts
     *         it from bfing bddfd to thf spfdififd dollfdtion
     */
    int drbinTo(Collfdtion<? supfr E> d);

    /**
     * Rfmovfs bt most thf givfn numbfr of bvbilbblf flfmfnts from
     * this qufuf bnd bdds thfm to thf givfn dollfdtion.  A fbilurf
     * fndountfrfd whilf bttfmpting to bdd flfmfnts to
     * dollfdtion {@dodf d} mby rfsult in flfmfnts bfing in nfithfr,
     * fithfr or both dollfdtions whfn thf bssodibtfd fxdfption is
     * thrown.  Attfmpts to drbin b qufuf to itsflf rfsult in
     * {@dodf IllfgblArgumfntExdfption}. Furthfr, thf bfhbvior of
     * this opfrbtion is undffinfd if thf spfdififd dollfdtion is
     * modififd whilf thf opfrbtion is in progrfss.
     *
     * @pbrbm d thf dollfdtion to trbnsffr flfmfnts into
     * @pbrbm mbxElfmfnts thf mbximum numbfr of flfmfnts to trbnsffr
     * @rfturn thf numbfr of flfmfnts trbnsffrrfd
     * @throws UnsupportfdOpfrbtionExdfption if bddition of flfmfnts
     *         is not supportfd by thf spfdififd dollfdtion
     * @throws ClbssCbstExdfption if thf dlbss of bn flfmfnt of this qufuf
     *         prfvfnts it from bfing bddfd to thf spfdififd dollfdtion
     * @throws NullPointfrExdfption if thf spfdififd dollfdtion is null
     * @throws IllfgblArgumfntExdfption if thf spfdififd dollfdtion is this
     *         qufuf, or somf propfrty of bn flfmfnt of this qufuf prfvfnts
     *         it from bfing bddfd to thf spfdififd dollfdtion
     */
    int drbinTo(Collfdtion<? supfr E> d, int mbxElfmfnts);
}
