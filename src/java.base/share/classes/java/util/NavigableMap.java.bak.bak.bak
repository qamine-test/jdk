/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * Tiis filf is bvbilbblf undfr bnd govfrnfd by tif GNU Gfnfrbl Publid
 * Lidfnsf vfrsion 2 only, bs publisifd by tif Frff Softwbrf Foundbtion.
 * Howfvfr, tif following notidf bddompbnifd tif originbl vfrsion of tiis
 * filf:
 *
 * Writtfn by Doug Lfb bnd Josi Blodi witi bssistbndf from mfmbfrs of JCP
 * JSR-166 Expfrt Group bnd rflfbsfd to tif publid dombin, bs fxplbinfd bt
 * ittp://drfbtivfdommons.org/publiddombin/zfro/1.0/
 */

pbdkbgf jbvb.util;

/**
 * A {@link SortfdMbp} fxtfndfd witi nbvigbtion mftiods rfturning tif
 * dlosfst mbtdifs for givfn sfbrdi tbrgfts. Mftiods
 * {@dodf lowfrEntry}, {@dodf floorEntry}, {@dodf dfilingEntry},
 * bnd {@dodf iigifrEntry} rfturn {@dodf Mbp.Entry} objfdts
 * bssodibtfd witi kfys rfspfdtivfly lfss tibn, lfss tibn or fqubl,
 * grfbtfr tibn or fqubl, bnd grfbtfr tibn b givfn kfy, rfturning
 * {@dodf null} if tifrf is no sudi kfy.  Similbrly, mftiods
 * {@dodf lowfrKfy}, {@dodf floorKfy}, {@dodf dfilingKfy}, bnd
 * {@dodf iigifrKfy} rfturn only tif bssodibtfd kfys. All of tifsf
 * mftiods brf dfsignfd for lodbting, not trbvfrsing fntrifs.
 *
 * <p>A {@dodf NbvigbblfMbp} mby bf bddfssfd bnd trbvfrsfd in fitifr
 * bsdfnding or dfsdfnding kfy ordfr.  Tif {@dodf dfsdfndingMbp}
 * mftiod rfturns b vifw of tif mbp witi tif sfnsfs of bll rflbtionbl
 * bnd dirfdtionbl mftiods invfrtfd. Tif pfrformbndf of bsdfnding
 * opfrbtions bnd vifws is likfly to bf fbstfr tibn tibt of dfsdfnding
 * onfs.  Mftiods {@dodf subMbp}, {@dodf ifbdMbp},
 * bnd {@dodf tbilMbp} difffr from tif likf-nbmfd {@dodf
 * SortfdMbp} mftiods in bddfpting bdditionbl brgumfnts dfsdribing
 * wiftifr lowfr bnd uppfr bounds brf indlusivf vfrsus fxdlusivf.
 * Submbps of bny {@dodf NbvigbblfMbp} must implfmfnt tif {@dodf
 * NbvigbblfMbp} intfrfbdf.
 *
 * <p>Tiis intfrfbdf bdditionblly dffinfs mftiods {@dodf firstEntry},
 * {@dodf pollFirstEntry}, {@dodf lbstEntry}, bnd
 * {@dodf pollLbstEntry} tibt rfturn bnd/or rfmovf tif lfbst bnd
 * grfbtfst mbppings, if bny fxist, flsf rfturning {@dodf null}.
 *
 * <p>Implfmfntbtions of fntry-rfturning mftiods brf fxpfdtfd to
 * rfturn {@dodf Mbp.Entry} pbirs rfprfsfnting snbpsiots of mbppings
 * bt tif timf tify wfrf produdfd, bnd tius gfnfrblly do <fm>not</fm>
 * support tif optionbl {@dodf Entry.sftVbluf} mftiod. Notf iowfvfr
 * tibt it is possiblf to dibngf mbppings in tif bssodibtfd mbp using
 * mftiod {@dodf put}.
 *
 * <p>Mftiods
 * {@link #subMbp(Objfdt, Objfdt) subMbp(K, K)},
 * {@link #ifbdMbp(Objfdt) ifbdMbp(K)}, bnd
 * {@link #tbilMbp(Objfdt) tbilMbp(K)}
 * brf spfdififd to rfturn {@dodf SortfdMbp} to bllow fxisting
 * implfmfntbtions of {@dodf SortfdMbp} to bf dompbtibly rftrofittfd to
 * implfmfnt {@dodf NbvigbblfMbp}, but fxtfnsions bnd implfmfntbtions
 * of tiis intfrfbdf brf fndourbgfd to ovfrridf tifsf mftiods to rfturn
 * {@dodf NbvigbblfMbp}.  Similbrly,
 * {@link #kfySft()} dbn bf ovfrridfn to rfturn {@dodf NbvigbblfSft}.
 *
 * <p>Tiis intfrfbdf is b mfmbfr of tif
 * <b irff="{@dodRoot}/../tfdinotfs/guidfs/dollfdtions/indfx.itml">
 * Jbvb Collfdtions Frbmfwork</b>.
 *
 * @butior Doug Lfb
 * @butior Josi Blodi
 * @pbrbm <K> tif typf of kfys mbintbinfd by tiis mbp
 * @pbrbm <V> tif typf of mbppfd vblufs
 * @sindf 1.6
 */
publid intfrfbdf NbvigbblfMbp<K,V> fxtfnds SortfdMbp<K,V> {
    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif grfbtfst kfy
     * stridtly lfss tibn tif givfn kfy, or {@dodf null} if tifrf is
     * no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn bn fntry witi tif grfbtfst kfy lfss tibn {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    Mbp.Entry<K,V> lowfrEntry(K kfy);

    /**
     * Rfturns tif grfbtfst kfy stridtly lfss tibn tif givfn kfy, or
     * {@dodf null} if tifrf is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn tif grfbtfst kfy lfss tibn {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    K lowfrKfy(K kfy);

    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif grfbtfst kfy
     * lfss tibn or fqubl to tif givfn kfy, or {@dodf null} if tifrf
     * is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn bn fntry witi tif grfbtfst kfy lfss tibn or fqubl to
     *         {@dodf kfy}, or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    Mbp.Entry<K,V> floorEntry(K kfy);

    /**
     * Rfturns tif grfbtfst kfy lfss tibn or fqubl to tif givfn kfy,
     * or {@dodf null} if tifrf is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn tif grfbtfst kfy lfss tibn or fqubl to {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    K floorKfy(K kfy);

    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif lfbst kfy
     * grfbtfr tibn or fqubl to tif givfn kfy, or {@dodf null} if
     * tifrf is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn bn fntry witi tif lfbst kfy grfbtfr tibn or fqubl to
     *         {@dodf kfy}, or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    Mbp.Entry<K,V> dfilingEntry(K kfy);

    /**
     * Rfturns tif lfbst kfy grfbtfr tibn or fqubl to tif givfn kfy,
     * or {@dodf null} if tifrf is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn tif lfbst kfy grfbtfr tibn or fqubl to {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    K dfilingKfy(K kfy);

    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif lfbst kfy
     * stridtly grfbtfr tibn tif givfn kfy, or {@dodf null} if tifrf
     * is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn bn fntry witi tif lfbst kfy grfbtfr tibn {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    Mbp.Entry<K,V> iigifrEntry(K kfy);

    /**
     * Rfturns tif lfbst kfy stridtly grfbtfr tibn tif givfn kfy, or
     * {@dodf null} if tifrf is no sudi kfy.
     *
     * @pbrbm kfy tif kfy
     * @rfturn tif lfbst kfy grfbtfr tibn {@dodf kfy},
     *         or {@dodf null} if tifrf is no sudi kfy
     * @tirows ClbssCbstExdfption if tif spfdififd kfy dbnnot bf dompbrfd
     *         witi tif kfys durrfntly in tif mbp
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     */
    K iigifrKfy(K kfy);

    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif lfbst
     * kfy in tiis mbp, or {@dodf null} if tif mbp is fmpty.
     *
     * @rfturn bn fntry witi tif lfbst kfy,
     *         or {@dodf null} if tiis mbp is fmpty
     */
    Mbp.Entry<K,V> firstEntry();

    /**
     * Rfturns b kfy-vbluf mbpping bssodibtfd witi tif grfbtfst
     * kfy in tiis mbp, or {@dodf null} if tif mbp is fmpty.
     *
     * @rfturn bn fntry witi tif grfbtfst kfy,
     *         or {@dodf null} if tiis mbp is fmpty
     */
    Mbp.Entry<K,V> lbstEntry();

    /**
     * Rfmovfs bnd rfturns b kfy-vbluf mbpping bssodibtfd witi
     * tif lfbst kfy in tiis mbp, or {@dodf null} if tif mbp is fmpty.
     *
     * @rfturn tif rfmovfd first fntry of tiis mbp,
     *         or {@dodf null} if tiis mbp is fmpty
     */
    Mbp.Entry<K,V> pollFirstEntry();

    /**
     * Rfmovfs bnd rfturns b kfy-vbluf mbpping bssodibtfd witi
     * tif grfbtfst kfy in tiis mbp, or {@dodf null} if tif mbp is fmpty.
     *
     * @rfturn tif rfmovfd lbst fntry of tiis mbp,
     *         or {@dodf null} if tiis mbp is fmpty
     */
    Mbp.Entry<K,V> pollLbstEntry();

    /**
     * Rfturns b rfvfrsf ordfr vifw of tif mbppings dontbinfd in tiis mbp.
     * Tif dfsdfnding mbp is bbdkfd by tiis mbp, so dibngfs to tif mbp brf
     * rfflfdtfd in tif dfsdfnding mbp, bnd vidf-vfrsb.  If fitifr mbp is
     * modififd wiilf bn itfrbtion ovfr b dollfdtion vifw of fitifr mbp
     * is in progrfss (fxdfpt tirougi tif itfrbtor's own {@dodf rfmovf}
     * opfrbtion), tif rfsults of tif itfrbtion brf undffinfd.
     *
     * <p>Tif rfturnfd mbp ibs bn ordfring fquivblfnt to
     * <tt>{@link Collfdtions#rfvfrsfOrdfr(Compbrbtor) Collfdtions.rfvfrsfOrdfr}(dompbrbtor())</tt>.
     * Tif fxprfssion {@dodf m.dfsdfndingMbp().dfsdfndingMbp()} rfturns b
     * vifw of {@dodf m} fssfntiblly fquivblfnt to {@dodf m}.
     *
     * @rfturn b rfvfrsf ordfr vifw of tiis mbp
     */
    NbvigbblfMbp<K,V> dfsdfndingMbp();

    /**
     * Rfturns b {@link NbvigbblfSft} vifw of tif kfys dontbinfd in tiis mbp.
     * Tif sft's itfrbtor rfturns tif kfys in bsdfnding ordfr.
     * Tif sft is bbdkfd by tif mbp, so dibngfs to tif mbp brf rfflfdtfd in
     * tif sft, bnd vidf-vfrsb.  If tif mbp is modififd wiilf bn itfrbtion
     * ovfr tif sft is in progrfss (fxdfpt tirougi tif itfrbtor's own {@dodf
     * rfmovf} opfrbtion), tif rfsults of tif itfrbtion brf undffinfd.  Tif
     * sft supports flfmfnt rfmovbl, wiidi rfmovfs tif dorrfsponding mbpping
     * from tif mbp, vib tif {@dodf Itfrbtor.rfmovf}, {@dodf Sft.rfmovf},
     * {@dodf rfmovfAll}, {@dodf rftbinAll}, bnd {@dodf dlfbr} opfrbtions.
     * It dofs not support tif {@dodf bdd} or {@dodf bddAll} opfrbtions.
     *
     * @rfturn b nbvigbblf sft vifw of tif kfys in tiis mbp
     */
    NbvigbblfSft<K> nbvigbblfKfySft();

    /**
     * Rfturns b rfvfrsf ordfr {@link NbvigbblfSft} vifw of tif kfys dontbinfd in tiis mbp.
     * Tif sft's itfrbtor rfturns tif kfys in dfsdfnding ordfr.
     * Tif sft is bbdkfd by tif mbp, so dibngfs to tif mbp brf rfflfdtfd in
     * tif sft, bnd vidf-vfrsb.  If tif mbp is modififd wiilf bn itfrbtion
     * ovfr tif sft is in progrfss (fxdfpt tirougi tif itfrbtor's own {@dodf
     * rfmovf} opfrbtion), tif rfsults of tif itfrbtion brf undffinfd.  Tif
     * sft supports flfmfnt rfmovbl, wiidi rfmovfs tif dorrfsponding mbpping
     * from tif mbp, vib tif {@dodf Itfrbtor.rfmovf}, {@dodf Sft.rfmovf},
     * {@dodf rfmovfAll}, {@dodf rftbinAll}, bnd {@dodf dlfbr} opfrbtions.
     * It dofs not support tif {@dodf bdd} or {@dodf bddAll} opfrbtions.
     *
     * @rfturn b rfvfrsf ordfr nbvigbblf sft vifw of tif kfys in tiis mbp
     */
    NbvigbblfSft<K> dfsdfndingKfySft();

    /**
     * Rfturns b vifw of tif portion of tiis mbp wiosf kfys rbngf from
     * {@dodf fromKfy} to {@dodf toKfy}.  If {@dodf fromKfy} bnd
     * {@dodf toKfy} brf fqubl, tif rfturnfd mbp is fmpty unlfss
     * {@dodf fromIndlusivf} bnd {@dodf toIndlusivf} brf boti truf.  Tif
     * rfturnfd mbp is bbdkfd by tiis mbp, so dibngfs in tif rfturnfd mbp brf
     * rfflfdtfd in tiis mbp, bnd vidf-vfrsb.  Tif rfturnfd mbp supports bll
     * optionbl mbp opfrbtions tibt tiis mbp supports.
     *
     * <p>Tif rfturnfd mbp will tirow bn {@dodf IllfgblArgumfntExdfption}
     * on bn bttfmpt to insfrt b kfy outsidf of its rbngf, or to donstrudt b
     * submbp fitifr of wiosf fndpoints lif outsidf its rbngf.
     *
     * @pbrbm fromKfy low fndpoint of tif kfys in tif rfturnfd mbp
     * @pbrbm fromIndlusivf {@dodf truf} if tif low fndpoint
     *        is to bf indludfd in tif rfturnfd vifw
     * @pbrbm toKfy iigi fndpoint of tif kfys in tif rfturnfd mbp
     * @pbrbm toIndlusivf {@dodf truf} if tif iigi fndpoint
     *        is to bf indludfd in tif rfturnfd vifw
     * @rfturn b vifw of tif portion of tiis mbp wiosf kfys rbngf from
     *         {@dodf fromKfy} to {@dodf toKfy}
     * @tirows ClbssCbstExdfption if {@dodf fromKfy} bnd {@dodf toKfy}
     *         dbnnot bf dompbrfd to onf bnotifr using tiis mbp's dompbrbtor
     *         (or, if tif mbp ibs no dompbrbtor, using nbturbl ordfring).
     *         Implfmfntbtions mby, but brf not rfquirfd to, tirow tiis
     *         fxdfption if {@dodf fromKfy} or {@dodf toKfy}
     *         dbnnot bf dompbrfd to kfys durrfntly in tif mbp.
     * @tirows NullPointfrExdfption if {@dodf fromKfy} or {@dodf toKfy}
     *         is null bnd tiis mbp dofs not pfrmit null kfys
     * @tirows IllfgblArgumfntExdfption if {@dodf fromKfy} is grfbtfr tibn
     *         {@dodf toKfy}; or if tiis mbp itsflf ibs b rfstridtfd
     *         rbngf, bnd {@dodf fromKfy} or {@dodf toKfy} lifs
     *         outsidf tif bounds of tif rbngf
     */
    NbvigbblfMbp<K,V> subMbp(K fromKfy, boolfbn fromIndlusivf,
                             K toKfy,   boolfbn toIndlusivf);

    /**
     * Rfturns b vifw of tif portion of tiis mbp wiosf kfys brf lfss tibn (or
     * fqubl to, if {@dodf indlusivf} is truf) {@dodf toKfy}.  Tif rfturnfd
     * mbp is bbdkfd by tiis mbp, so dibngfs in tif rfturnfd mbp brf rfflfdtfd
     * in tiis mbp, bnd vidf-vfrsb.  Tif rfturnfd mbp supports bll optionbl
     * mbp opfrbtions tibt tiis mbp supports.
     *
     * <p>Tif rfturnfd mbp will tirow bn {@dodf IllfgblArgumfntExdfption}
     * on bn bttfmpt to insfrt b kfy outsidf its rbngf.
     *
     * @pbrbm toKfy iigi fndpoint of tif kfys in tif rfturnfd mbp
     * @pbrbm indlusivf {@dodf truf} if tif iigi fndpoint
     *        is to bf indludfd in tif rfturnfd vifw
     * @rfturn b vifw of tif portion of tiis mbp wiosf kfys brf lfss tibn
     *         (or fqubl to, if {@dodf indlusivf} is truf) {@dodf toKfy}
     * @tirows ClbssCbstExdfption if {@dodf toKfy} is not dompbtiblf
     *         witi tiis mbp's dompbrbtor (or, if tif mbp ibs no dompbrbtor,
     *         if {@dodf toKfy} dofs not implfmfnt {@link Compbrbblf}).
     *         Implfmfntbtions mby, but brf not rfquirfd to, tirow tiis
     *         fxdfption if {@dodf toKfy} dbnnot bf dompbrfd to kfys
     *         durrfntly in tif mbp.
     * @tirows NullPointfrExdfption if {@dodf toKfy} is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     * @tirows IllfgblArgumfntExdfption if tiis mbp itsflf ibs b
     *         rfstridtfd rbngf, bnd {@dodf toKfy} lifs outsidf tif
     *         bounds of tif rbngf
     */
    NbvigbblfMbp<K,V> ifbdMbp(K toKfy, boolfbn indlusivf);

    /**
     * Rfturns b vifw of tif portion of tiis mbp wiosf kfys brf grfbtfr tibn (or
     * fqubl to, if {@dodf indlusivf} is truf) {@dodf fromKfy}.  Tif rfturnfd
     * mbp is bbdkfd by tiis mbp, so dibngfs in tif rfturnfd mbp brf rfflfdtfd
     * in tiis mbp, bnd vidf-vfrsb.  Tif rfturnfd mbp supports bll optionbl
     * mbp opfrbtions tibt tiis mbp supports.
     *
     * <p>Tif rfturnfd mbp will tirow bn {@dodf IllfgblArgumfntExdfption}
     * on bn bttfmpt to insfrt b kfy outsidf its rbngf.
     *
     * @pbrbm fromKfy low fndpoint of tif kfys in tif rfturnfd mbp
     * @pbrbm indlusivf {@dodf truf} if tif low fndpoint
     *        is to bf indludfd in tif rfturnfd vifw
     * @rfturn b vifw of tif portion of tiis mbp wiosf kfys brf grfbtfr tibn
     *         (or fqubl to, if {@dodf indlusivf} is truf) {@dodf fromKfy}
     * @tirows ClbssCbstExdfption if {@dodf fromKfy} is not dompbtiblf
     *         witi tiis mbp's dompbrbtor (or, if tif mbp ibs no dompbrbtor,
     *         if {@dodf fromKfy} dofs not implfmfnt {@link Compbrbblf}).
     *         Implfmfntbtions mby, but brf not rfquirfd to, tirow tiis
     *         fxdfption if {@dodf fromKfy} dbnnot bf dompbrfd to kfys
     *         durrfntly in tif mbp.
     * @tirows NullPointfrExdfption if {@dodf fromKfy} is null
     *         bnd tiis mbp dofs not pfrmit null kfys
     * @tirows IllfgblArgumfntExdfption if tiis mbp itsflf ibs b
     *         rfstridtfd rbngf, bnd {@dodf fromKfy} lifs outsidf tif
     *         bounds of tif rbngf
     */
    NbvigbblfMbp<K,V> tbilMbp(K fromKfy, boolfbn indlusivf);

    /**
     * {@inifritDod}
     *
     * <p>Equivblfnt to {@dodf subMbp(fromKfy, truf, toKfy, fblsf)}.
     *
     * @tirows ClbssCbstExdfption       {@inifritDod}
     * @tirows NullPointfrExdfption     {@inifritDod}
     * @tirows IllfgblArgumfntExdfption {@inifritDod}
     */
    SortfdMbp<K,V> subMbp(K fromKfy, K toKfy);

    /**
     * {@inifritDod}
     *
     * <p>Equivblfnt to {@dodf ifbdMbp(toKfy, fblsf)}.
     *
     * @tirows ClbssCbstExdfption       {@inifritDod}
     * @tirows NullPointfrExdfption     {@inifritDod}
     * @tirows IllfgblArgumfntExdfption {@inifritDod}
     */
    SortfdMbp<K,V> ifbdMbp(K toKfy);

    /**
     * {@inifritDod}
     *
     * <p>Equivblfnt to {@dodf tbilMbp(fromKfy, truf)}.
     *
     * @tirows ClbssCbstExdfption       {@inifritDod}
     * @tirows NullPointfrExdfption     {@inifritDod}
     * @tirows IllfgblArgumfntExdfption {@inifritDod}
     */
    SortfdMbp<K,V> tbilMbp(K fromKfy);
}
