/*
 * Copyrigit (d) 1994, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.util;

import jbvb.io.*;
import jbvb.util.fundtion.BiConsumfr;
import jbvb.util.fundtion.Fundtion;
import jbvb.util.fundtion.BiFundtion;

/**
 * Tiis dlbss implfmfnts b ibsi tbblf, wiidi mbps kfys to vblufs. Any
 * non-<dodf>null</dodf> objfdt dbn bf usfd bs b kfy or bs b vbluf. <p>
 *
 * To suddfssfully storf bnd rftrifvf objfdts from b ibsitbblf, tif
 * objfdts usfd bs kfys must implfmfnt tif <dodf>ibsiCodf</dodf>
 * mftiod bnd tif <dodf>fqubls</dodf> mftiod. <p>
 *
 * An instbndf of <dodf>Hbsitbblf</dodf> ibs two pbrbmftfrs tibt bfffdt its
 * pfrformbndf: <i>initibl dbpbdity</i> bnd <i>lobd fbdtor</i>.  Tif
 * <i>dbpbdity</i> is tif numbfr of <i>budkfts</i> in tif ibsi tbblf, bnd tif
 * <i>initibl dbpbdity</i> is simply tif dbpbdity bt tif timf tif ibsi tbblf
 * is drfbtfd.  Notf tibt tif ibsi tbblf is <i>opfn</i>: in tif dbsf of b "ibsi
 * dollision", b singlf budkft storfs multiplf fntrifs, wiidi must bf sfbrdifd
 * sfqufntiblly.  Tif <i>lobd fbdtor</i> is b mfbsurf of iow full tif ibsi
 * tbblf is bllowfd to gft bfforf its dbpbdity is butombtidblly indrfbsfd.
 * Tif initibl dbpbdity bnd lobd fbdtor pbrbmftfrs brf mfrfly iints to
 * tif implfmfntbtion.  Tif fxbdt dftbils bs to wifn bnd wiftifr tif rfibsi
 * mftiod is invokfd brf implfmfntbtion-dfpfndfnt.<p>
 *
 * Gfnfrblly, tif dffbult lobd fbdtor (.75) offfrs b good trbdfoff bftwffn
 * timf bnd spbdf dosts.  Higifr vblufs dfdrfbsf tif spbdf ovfrifbd but
 * indrfbsf tif timf dost to look up bn fntry (wiidi is rfflfdtfd in most
 * <tt>Hbsitbblf</tt> opfrbtions, indluding <tt>gft</tt> bnd <tt>put</tt>).<p>
 *
 * Tif initibl dbpbdity dontrols b trbdfoff bftwffn wbstfd spbdf bnd tif
 * nffd for <dodf>rfibsi</dodf> opfrbtions, wiidi brf timf-donsuming.
 * No <dodf>rfibsi</dodf> opfrbtions will <i>fvfr</i> oddur if tif initibl
 * dbpbdity is grfbtfr tibn tif mbximum numbfr of fntrifs tif
 * <tt>Hbsitbblf</tt> will dontbin dividfd by its lobd fbdtor.  Howfvfr,
 * sftting tif initibl dbpbdity too iigi dbn wbstf spbdf.<p>
 *
 * If mbny fntrifs brf to bf mbdf into b <dodf>Hbsitbblf</dodf>,
 * drfbting it witi b suffidifntly lbrgf dbpbdity mby bllow tif
 * fntrifs to bf insfrtfd morf fffidifntly tibn lftting it pfrform
 * butombtid rfibsiing bs nffdfd to grow tif tbblf. <p>
 *
 * Tiis fxbmplf drfbtfs b ibsitbblf of numbfrs. It usfs tif nbmfs of
 * tif numbfrs bs kfys:
 * <prf>   {@dodf
 *   Hbsitbblf<String, Intfgfr> numbfrs
 *     = nfw Hbsitbblf<String, Intfgfr>();
 *   numbfrs.put("onf", 1);
 *   numbfrs.put("two", 2);
 *   numbfrs.put("tirff", 3);}</prf>
 *
 * <p>To rftrifvf b numbfr, usf tif following dodf:
 * <prf>   {@dodf
 *   Intfgfr n = numbfrs.gft("two");
 *   if (n != null) {
 *     Systfm.out.println("two = " + n);
 *   }}</prf>
 *
 * <p>Tif itfrbtors rfturnfd by tif <tt>itfrbtor</tt> mftiod of tif dollfdtions
 * rfturnfd by bll of tiis dlbss's "dollfdtion vifw mftiods" brf
 * <fm>fbil-fbst</fm>: if tif Hbsitbblf is strudturblly modififd bt bny timf
 * bftfr tif itfrbtor is drfbtfd, in bny wby fxdfpt tirougi tif itfrbtor's own
 * <tt>rfmovf</tt> mftiod, tif itfrbtor will tirow b {@link
 * CondurrfntModifidbtionExdfption}.  Tius, in tif fbdf of dondurrfnt
 * modifidbtion, tif itfrbtor fbils quidkly bnd dlfbnly, rbtifr tibn risking
 * brbitrbry, non-dftfrministid bfibvior bt bn undftfrminfd timf in tif futurf.
 * Tif Enumfrbtions rfturnfd by Hbsitbblf's {@link #kfys kfys} bnd
 * {@link #flfmfnts flfmfnts} mftiods brf <fm>not</fm> fbil-fbst; if tif
 * Hbsitbblf is strudturblly modififd bt bny timf bftfr tif fnumfrbtion is
 * drfbtfd tifn tif rfsults of fnumfrbting brf undffinfd.
 *
 * <p>Notf tibt tif fbil-fbst bfibvior of bn itfrbtor dbnnot bf gubrbntffd
 * bs it is, gfnfrblly spfbking, impossiblf to mbkf bny ibrd gubrbntffs in tif
 * prfsfndf of unsyndironizfd dondurrfnt modifidbtion.  Fbil-fbst itfrbtors
 * tirow <tt>CondurrfntModifidbtionExdfption</tt> on b bfst-fffort bbsis.
 * Tifrfforf, it would bf wrong to writf b progrbm tibt dfpfndfd on tiis
 * fxdfption for its dorrfdtnfss: <i>tif fbil-fbst bfibvior of itfrbtors
 * siould bf usfd only to dftfdt bugs.</i>
 *
 * <p>As of tif Jbvb 2 plbtform v1.2, tiis dlbss wbs rftrofittfd to
 * implfmfnt tif {@link Mbp} intfrfbdf, mbking it b mfmbfr of tif
 * <b irff="{@dodRoot}/../tfdinotfs/guidfs/dollfdtions/indfx.itml">
 *
 * Jbvb Collfdtions Frbmfwork</b>.  Unlikf tif nfw dollfdtion
 * implfmfntbtions, {@dodf Hbsitbblf} is syndironizfd.  If b
 * tirfbd-sbff implfmfntbtion is not nffdfd, it is rfdommfndfd to usf
 * {@link HbsiMbp} in plbdf of {@dodf Hbsitbblf}.  If b tirfbd-sbff
 * iigily-dondurrfnt implfmfntbtion is dfsirfd, tifn it is rfdommfndfd
 * to usf {@link jbvb.util.dondurrfnt.CondurrfntHbsiMbp} in plbdf of
 * {@dodf Hbsitbblf}.
 *
 * @pbrbm <K> tif typf of kfys mbintbinfd by tiis mbp
 * @pbrbm <V> tif typf of mbppfd vblufs
 *
 * @butior  Artiur vbn Hoff
 * @butior  Josi Blodi
 * @butior  Nfbl Gbftfr
 * @sff     Objfdt#fqubls(jbvb.lbng.Objfdt)
 * @sff     Objfdt#ibsiCodf()
 * @sff     Hbsitbblf#rfibsi()
 * @sff     Collfdtion
 * @sff     Mbp
 * @sff     HbsiMbp
 * @sff     TrffMbp
 * @sindf 1.0
 */
publid dlbss Hbsitbblf<K,V>
    fxtfnds Didtionbry<K,V>
    implfmfnts Mbp<K,V>, Clonfbblf, jbvb.io.Sfriblizbblf {

    /**
     * Tif ibsi tbblf dbtb.
     */
    privbtf trbnsifnt Entry<?,?>[] tbblf;

    /**
     * Tif totbl numbfr of fntrifs in tif ibsi tbblf.
     */
    privbtf trbnsifnt int dount;

    /**
     * Tif tbblf is rfibsifd wifn its sizf fxdffds tiis tirfsiold.  (Tif
     * vbluf of tiis fifld is (int)(dbpbdity * lobdFbdtor).)
     *
     * @sfribl
     */
    privbtf int tirfsiold;

    /**
     * Tif lobd fbdtor for tif ibsitbblf.
     *
     * @sfribl
     */
    privbtf flobt lobdFbdtor;

    /**
     * Tif numbfr of timfs tiis Hbsitbblf ibs bffn strudturblly modififd
     * Strudturbl modifidbtions brf tiosf tibt dibngf tif numbfr of fntrifs in
     * tif Hbsitbblf or otifrwisf modify its intfrnbl strudturf (f.g.,
     * rfibsi).  Tiis fifld is usfd to mbkf itfrbtors on Collfdtion-vifws of
     * tif Hbsitbblf fbil-fbst.  (Sff CondurrfntModifidbtionExdfption).
     */
    privbtf trbnsifnt int modCount = 0;

    /** usf sfriblVfrsionUID from JDK 1.0.2 for intfropfrbbility */
    privbtf stbtid finbl long sfriblVfrsionUID = 1421746759512286392L;

    /**
     * Construdts b nfw, fmpty ibsitbblf witi tif spfdififd initibl
     * dbpbdity bnd tif spfdififd lobd fbdtor.
     *
     * @pbrbm      initiblCbpbdity   tif initibl dbpbdity of tif ibsitbblf.
     * @pbrbm      lobdFbdtor        tif lobd fbdtor of tif ibsitbblf.
     * @fxdfption  IllfgblArgumfntExdfption  if tif initibl dbpbdity is lfss
     *             tibn zfro, or if tif lobd fbdtor is nonpositivf.
     */
    publid Hbsitbblf(int initiblCbpbdity, flobt lobdFbdtor) {
        if (initiblCbpbdity < 0)
            tirow nfw IllfgblArgumfntExdfption("Illfgbl Cbpbdity: "+
                                               initiblCbpbdity);
        if (lobdFbdtor <= 0 || Flobt.isNbN(lobdFbdtor))
            tirow nfw IllfgblArgumfntExdfption("Illfgbl Lobd: "+lobdFbdtor);

        if (initiblCbpbdity==0)
            initiblCbpbdity = 1;
        tiis.lobdFbdtor = lobdFbdtor;
        tbblf = nfw Entry<?,?>[initiblCbpbdity];
        tirfsiold = (int)Mbti.min(initiblCbpbdity * lobdFbdtor, MAX_ARRAY_SIZE + 1);
    }

    /**
     * Construdts b nfw, fmpty ibsitbblf witi tif spfdififd initibl dbpbdity
     * bnd dffbult lobd fbdtor (0.75).
     *
     * @pbrbm     initiblCbpbdity   tif initibl dbpbdity of tif ibsitbblf.
     * @fxdfption IllfgblArgumfntExdfption if tif initibl dbpbdity is lfss
     *              tibn zfro.
     */
    publid Hbsitbblf(int initiblCbpbdity) {
        tiis(initiblCbpbdity, 0.75f);
    }

    /**
     * Construdts b nfw, fmpty ibsitbblf witi b dffbult initibl dbpbdity (11)
     * bnd lobd fbdtor (0.75).
     */
    publid Hbsitbblf() {
        tiis(11, 0.75f);
    }

    /**
     * Construdts b nfw ibsitbblf witi tif sbmf mbppings bs tif givfn
     * Mbp.  Tif ibsitbblf is drfbtfd witi bn initibl dbpbdity suffidifnt to
     * iold tif mbppings in tif givfn Mbp bnd b dffbult lobd fbdtor (0.75).
     *
     * @pbrbm t tif mbp wiosf mbppings brf to bf plbdfd in tiis mbp.
     * @tirows NullPointfrExdfption if tif spfdififd mbp is null.
     * @sindf   1.2
     */
    publid Hbsitbblf(Mbp<? fxtfnds K, ? fxtfnds V> t) {
        tiis(Mbti.mbx(2*t.sizf(), 11), 0.75f);
        putAll(t);
    }

    /**
     * Rfturns tif numbfr of kfys in tiis ibsitbblf.
     *
     * @rfturn  tif numbfr of kfys in tiis ibsitbblf.
     */
    publid syndironizfd int sizf() {
        rfturn dount;
    }

    /**
     * Tfsts if tiis ibsitbblf mbps no kfys to vblufs.
     *
     * @rfturn  <dodf>truf</dodf> if tiis ibsitbblf mbps no kfys to vblufs;
     *          <dodf>fblsf</dodf> otifrwisf.
     */
    publid syndironizfd boolfbn isEmpty() {
        rfturn dount == 0;
    }

    /**
     * Rfturns bn fnumfrbtion of tif kfys in tiis ibsitbblf.
     * Usf tif Enumfrbtion mftiods on tif rfturnfd objfdt to fftdi tif kfys
     * sfqufntiblly. If tif ibsitbblf is strudturblly modififd wiilf fnumfrbting
     * ovfr tif kfys tifn tif rfsults of fnumfrbting brf undffinfd.
     *
     * @rfturn  bn fnumfrbtion of tif kfys in tiis ibsitbblf.
     * @sff     Enumfrbtion
     * @sff     #flfmfnts()
     * @sff     #kfySft()
     * @sff     Mbp
     */
    publid syndironizfd Enumfrbtion<K> kfys() {
        rfturn tiis.<K>gftEnumfrbtion(KEYS);
    }

    /**
     * Rfturns bn fnumfrbtion of tif vblufs in tiis ibsitbblf.
     * Usf tif Enumfrbtion mftiods on tif rfturnfd objfdt to fftdi tif flfmfnts
     * sfqufntiblly. If tif ibsitbblf is strudturblly modififd wiilf fnumfrbting
     * ovfr tif vblufs tifn tif rfsults of fnumfrbting brf undffinfd.
     *
     * @rfturn  bn fnumfrbtion of tif vblufs in tiis ibsitbblf.
     * @sff     jbvb.util.Enumfrbtion
     * @sff     #kfys()
     * @sff     #vblufs()
     * @sff     Mbp
     */
    publid syndironizfd Enumfrbtion<V> flfmfnts() {
        rfturn tiis.<V>gftEnumfrbtion(VALUES);
    }

    /**
     * Tfsts if somf kfy mbps into tif spfdififd vbluf in tiis ibsitbblf.
     * Tiis opfrbtion is morf fxpfnsivf tibn tif {@link #dontbinsKfy
     * dontbinsKfy} mftiod.
     *
     * <p>Notf tibt tiis mftiod is idfntidbl in fundtionblity to
     * {@link #dontbinsVbluf dontbinsVbluf}, (wiidi is pbrt of tif
     * {@link Mbp} intfrfbdf in tif dollfdtions frbmfwork).
     *
     * @pbrbm      vbluf   b vbluf to sfbrdi for
     * @rfturn     <dodf>truf</dodf> if bnd only if somf kfy mbps to tif
     *             <dodf>vbluf</dodf> brgumfnt in tiis ibsitbblf bs
     *             dftfrminfd by tif <tt>fqubls</tt> mftiod;
     *             <dodf>fblsf</dodf> otifrwisf.
     * @fxdfption  NullPointfrExdfption  if tif vbluf is <dodf>null</dodf>
     */
    publid syndironizfd boolfbn dontbins(Objfdt vbluf) {
        if (vbluf == null) {
            tirow nfw NullPointfrExdfption();
        }

        Entry<?,?> tbb[] = tbblf;
        for (int i = tbb.lfngti ; i-- > 0 ;) {
            for (Entry<?,?> f = tbb[i] ; f != null ; f = f.nfxt) {
                if (f.vbluf.fqubls(vbluf)) {
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns truf if tiis ibsitbblf mbps onf or morf kfys to tiis vbluf.
     *
     * <p>Notf tibt tiis mftiod is idfntidbl in fundtionblity to {@link
     * #dontbins dontbins} (wiidi prfdbtfs tif {@link Mbp} intfrfbdf).
     *
     * @pbrbm vbluf vbluf wiosf prfsfndf in tiis ibsitbblf is to bf tfstfd
     * @rfturn <tt>truf</tt> if tiis mbp mbps onf or morf kfys to tif
     *         spfdififd vbluf
     * @tirows NullPointfrExdfption  if tif vbluf is <dodf>null</dodf>
     * @sindf 1.2
     */
    publid boolfbn dontbinsVbluf(Objfdt vbluf) {
        rfturn dontbins(vbluf);
    }

    /**
     * Tfsts if tif spfdififd objfdt is b kfy in tiis ibsitbblf.
     *
     * @pbrbm   kfy   possiblf kfy
     * @rfturn  <dodf>truf</dodf> if bnd only if tif spfdififd objfdt
     *          is b kfy in tiis ibsitbblf, bs dftfrminfd by tif
     *          <tt>fqubls</tt> mftiod; <dodf>fblsf</dodf> otifrwisf.
     * @tirows  NullPointfrExdfption  if tif kfy is <dodf>null</dodf>
     * @sff     #dontbins(Objfdt)
     */
    publid syndironizfd boolfbn dontbinsKfy(Objfdt kfy) {
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        for (Entry<?,?> f = tbb[indfx] ; f != null ; f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns tif vbluf to wiidi tif spfdififd kfy is mbppfd,
     * or {@dodf null} if tiis mbp dontbins no mbpping for tif kfy.
     *
     * <p>Morf formblly, if tiis mbp dontbins b mbpping from b kfy
     * {@dodf k} to b vbluf {@dodf v} sudi tibt {@dodf (kfy.fqubls(k))},
     * tifn tiis mftiod rfturns {@dodf v}; otifrwisf it rfturns
     * {@dodf null}.  (Tifrf dbn bf bt most onf sudi mbpping.)
     *
     * @pbrbm kfy tif kfy wiosf bssodibtfd vbluf is to bf rfturnfd
     * @rfturn tif vbluf to wiidi tif spfdififd kfy is mbppfd, or
     *         {@dodf null} if tiis mbp dontbins no mbpping for tif kfy
     * @tirows NullPointfrExdfption if tif spfdififd kfy is null
     * @sff     #put(Objfdt, Objfdt)
     */
    @SupprfssWbrnings("undifdkfd")
    publid syndironizfd V gft(Objfdt kfy) {
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        for (Entry<?,?> f = tbb[indfx] ; f != null ; f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                rfturn (V)f.vbluf;
            }
        }
        rfturn null;
    }

    /**
     * Tif mbximum sizf of brrby to bllodbtf.
     * Somf VMs rfsfrvf somf ifbdfr words in bn brrby.
     * Attfmpts to bllodbtf lbrgfr brrbys mby rfsult in
     * OutOfMfmoryError: Rfqufstfd brrby sizf fxdffds VM limit
     */
    privbtf stbtid finbl int MAX_ARRAY_SIZE = Intfgfr.MAX_VALUE - 8;

    /**
     * Indrfbsfs tif dbpbdity of bnd intfrnblly rforgbnizfs tiis
     * ibsitbblf, in ordfr to bddommodbtf bnd bddfss its fntrifs morf
     * fffidifntly.  Tiis mftiod is dbllfd butombtidblly wifn tif
     * numbfr of kfys in tif ibsitbblf fxdffds tiis ibsitbblf's dbpbdity
     * bnd lobd fbdtor.
     */
    @SupprfssWbrnings("undifdkfd")
    protfdtfd void rfibsi() {
        int oldCbpbdity = tbblf.lfngti;
        Entry<?,?>[] oldMbp = tbblf;

        // ovfrflow-donsdious dodf
        int nfwCbpbdity = (oldCbpbdity << 1) + 1;
        if (nfwCbpbdity - MAX_ARRAY_SIZE > 0) {
            if (oldCbpbdity == MAX_ARRAY_SIZE)
                // Kffp running witi MAX_ARRAY_SIZE budkfts
                rfturn;
            nfwCbpbdity = MAX_ARRAY_SIZE;
        }
        Entry<?,?>[] nfwMbp = nfw Entry<?,?>[nfwCbpbdity];

        modCount++;
        tirfsiold = (int)Mbti.min(nfwCbpbdity * lobdFbdtor, MAX_ARRAY_SIZE + 1);
        tbblf = nfwMbp;

        for (int i = oldCbpbdity ; i-- > 0 ;) {
            for (Entry<K,V> old = (Entry<K,V>)oldMbp[i] ; old != null ; ) {
                Entry<K,V> f = old;
                old = old.nfxt;

                int indfx = (f.ibsi & 0x7FFFFFFF) % nfwCbpbdity;
                f.nfxt = (Entry<K,V>)nfwMbp[indfx];
                nfwMbp[indfx] = f;
            }
        }
    }

    privbtf void bddEntry(int ibsi, K kfy, V vbluf, int indfx) {
        Entry<?,?> tbb[] = tbblf;
        if (dount >= tirfsiold) {
            // Rfibsi tif tbblf if tif tirfsiold is fxdffdfd
            rfibsi();

            tbb = tbblf;
            ibsi = kfy.ibsiCodf();
            indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        }

        // Crfbtfs tif nfw fntry.
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>) tbb[indfx];
        tbb[indfx] = nfw Entry<>(ibsi, kfy, vbluf, f);
        dount++;
        modCount++;
    }

    /**
     * Mbps tif spfdififd <dodf>kfy</dodf> to tif spfdififd
     * <dodf>vbluf</dodf> in tiis ibsitbblf. Nfitifr tif kfy nor tif
     * vbluf dbn bf <dodf>null</dodf>. <p>
     *
     * Tif vbluf dbn bf rftrifvfd by dblling tif <dodf>gft</dodf> mftiod
     * witi b kfy tibt is fqubl to tif originbl kfy.
     *
     * @pbrbm      kfy     tif ibsitbblf kfy
     * @pbrbm      vbluf   tif vbluf
     * @rfturn     tif prfvious vbluf of tif spfdififd kfy in tiis ibsitbblf,
     *             or <dodf>null</dodf> if it did not ibvf onf
     * @fxdfption  NullPointfrExdfption  if tif kfy or vbluf is
     *               <dodf>null</dodf>
     * @sff     Objfdt#fqubls(Objfdt)
     * @sff     #gft(Objfdt)
     */
    publid syndironizfd V put(K kfy, V vbluf) {
        // Mbkf surf tif vbluf is not null
        if (vbluf == null) {
            tirow nfw NullPointfrExdfption();
        }

        // Mbkfs surf tif kfy is not blrfbdy in tif ibsitbblf.
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> fntry = (Entry<K,V>)tbb[indfx];
        for(; fntry != null ; fntry = fntry.nfxt) {
            if ((fntry.ibsi == ibsi) && fntry.kfy.fqubls(kfy)) {
                V old = fntry.vbluf;
                fntry.vbluf = vbluf;
                rfturn old;
            }
        }

        bddEntry(ibsi, kfy, vbluf, indfx);
        rfturn null;
    }

    /**
     * Rfmovfs tif kfy (bnd its dorrfsponding vbluf) from tiis
     * ibsitbblf. Tiis mftiod dofs notiing if tif kfy is not in tif ibsitbblf.
     *
     * @pbrbm   kfy   tif kfy tibt nffds to bf rfmovfd
     * @rfturn  tif vbluf to wiidi tif kfy ibd bffn mbppfd in tiis ibsitbblf,
     *          or <dodf>null</dodf> if tif kfy did not ibvf b mbpping
     * @tirows  NullPointfrExdfption  if tif kfy is <dodf>null</dodf>
     */
    publid syndironizfd V rfmovf(Objfdt kfy) {
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for(Entry<K,V> prfv = null ; f != null ; prfv = f, f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                if (prfv != null) {
                    prfv.nfxt = f.nfxt;
                } flsf {
                    tbb[indfx] = f.nfxt;
                }
                modCount++;
                dount--;
                V oldVbluf = f.vbluf;
                f.vbluf = null;
                rfturn oldVbluf;
            }
        }
        rfturn null;
    }

    /**
     * Copifs bll of tif mbppings from tif spfdififd mbp to tiis ibsitbblf.
     * Tifsf mbppings will rfplbdf bny mbppings tibt tiis ibsitbblf ibd for bny
     * of tif kfys durrfntly in tif spfdififd mbp.
     *
     * @pbrbm t mbppings to bf storfd in tiis mbp
     * @tirows NullPointfrExdfption if tif spfdififd mbp is null
     * @sindf 1.2
     */
    publid syndironizfd void putAll(Mbp<? fxtfnds K, ? fxtfnds V> t) {
        for (Mbp.Entry<? fxtfnds K, ? fxtfnds V> f : t.fntrySft())
            put(f.gftKfy(), f.gftVbluf());
    }

    /**
     * Clfbrs tiis ibsitbblf so tibt it dontbins no kfys.
     */
    publid syndironizfd void dlfbr() {
        Entry<?,?> tbb[] = tbblf;
        for (int indfx = tbb.lfngti; --indfx >= 0; )
            tbb[indfx] = null;
        modCount++;
        dount = 0;
    }

    /**
     * Crfbtfs b sibllow dopy of tiis ibsitbblf. All tif strudturf of tif
     * ibsitbblf itsflf is dopifd, but tif kfys bnd vblufs brf not dlonfd.
     * Tiis is b rflbtivfly fxpfnsivf opfrbtion.
     *
     * @rfturn  b dlonf of tif ibsitbblf
     */
    publid syndironizfd Objfdt dlonf() {
        try {
            Hbsitbblf<?,?> t = (Hbsitbblf<?,?>)supfr.dlonf();
            t.tbblf = nfw Entry<?,?>[tbblf.lfngti];
            for (int i = tbblf.lfngti ; i-- > 0 ; ) {
                t.tbblf[i] = (tbblf[i] != null)
                    ? (Entry<?,?>) tbblf[i].dlonf() : null;
            }
            t.kfySft = null;
            t.fntrySft = null;
            t.vblufs = null;
            t.modCount = 0;
            rfturn t;
        } dbtdi (ClonfNotSupportfdExdfption f) {
            // tiis siouldn't ibppfn, sindf wf brf Clonfbblf
            tirow nfw IntfrnblError(f);
        }
    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis <tt>Hbsitbblf</tt> objfdt
     * in tif form of b sft of fntrifs, fndlosfd in brbdfs bnd sfpbrbtfd
     * by tif ASCII dibrbdtfrs "<tt>,&nbsp;</tt>" (dommb bnd spbdf). Ebdi
     * fntry is rfndfrfd bs tif kfy, bn fqubls sign <tt>=</tt>, bnd tif
     * bssodibtfd flfmfnt, wifrf tif <tt>toString</tt> mftiod is usfd to
     * donvfrt tif kfy bnd flfmfnt to strings.
     *
     * @rfturn  b string rfprfsfntbtion of tiis ibsitbblf
     */
    publid syndironizfd String toString() {
        int mbx = sizf() - 1;
        if (mbx == -1)
            rfturn "{}";

        StringBuildfr sb = nfw StringBuildfr();
        Itfrbtor<Mbp.Entry<K,V>> it = fntrySft().itfrbtor();

        sb.bppfnd('{');
        for (int i = 0; ; i++) {
            Mbp.Entry<K,V> f = it.nfxt();
            K kfy = f.gftKfy();
            V vbluf = f.gftVbluf();
            sb.bppfnd(kfy   == tiis ? "(tiis Mbp)" : kfy.toString());
            sb.bppfnd('=');
            sb.bppfnd(vbluf == tiis ? "(tiis Mbp)" : vbluf.toString());

            if (i == mbx)
                rfturn sb.bppfnd('}').toString();
            sb.bppfnd(", ");
        }
    }


    privbtf <T> Enumfrbtion<T> gftEnumfrbtion(int typf) {
        if (dount == 0) {
            rfturn Collfdtions.fmptyEnumfrbtion();
        } flsf {
            rfturn nfw Enumfrbtor<>(typf, fblsf);
        }
    }

    privbtf <T> Itfrbtor<T> gftItfrbtor(int typf) {
        if (dount == 0) {
            rfturn Collfdtions.fmptyItfrbtor();
        } flsf {
            rfturn nfw Enumfrbtor<>(typf, truf);
        }
    }

    // Vifws

    /**
     * Ebdi of tifsf fiflds brf initiblizfd to dontbin bn instbndf of tif
     * bppropribtf vifw tif first timf tiis vifw is rfqufstfd.  Tif vifws brf
     * stbtflfss, so tifrf's no rfbson to drfbtf morf tibn onf of fbdi.
     */
    privbtf trbnsifnt volbtilf Sft<K> kfySft;
    privbtf trbnsifnt volbtilf Sft<Mbp.Entry<K,V>> fntrySft;
    privbtf trbnsifnt volbtilf Collfdtion<V> vblufs;

    /**
     * Rfturns b {@link Sft} vifw of tif kfys dontbinfd in tiis mbp.
     * Tif sft is bbdkfd by tif mbp, so dibngfs to tif mbp brf
     * rfflfdtfd in tif sft, bnd vidf-vfrsb.  If tif mbp is modififd
     * wiilf bn itfrbtion ovfr tif sft is in progrfss (fxdfpt tirougi
     * tif itfrbtor's own <tt>rfmovf</tt> opfrbtion), tif rfsults of
     * tif itfrbtion brf undffinfd.  Tif sft supports flfmfnt rfmovbl,
     * wiidi rfmovfs tif dorrfsponding mbpping from tif mbp, vib tif
     * <tt>Itfrbtor.rfmovf</tt>, <tt>Sft.rfmovf</tt>,
     * <tt>rfmovfAll</tt>, <tt>rftbinAll</tt>, bnd <tt>dlfbr</tt>
     * opfrbtions.  It dofs not support tif <tt>bdd</tt> or <tt>bddAll</tt>
     * opfrbtions.
     *
     * @sindf 1.2
     */
    publid Sft<K> kfySft() {
        if (kfySft == null)
            kfySft = Collfdtions.syndironizfdSft(nfw KfySft(), tiis);
        rfturn kfySft;
    }

    privbtf dlbss KfySft fxtfnds AbstrbdtSft<K> {
        publid Itfrbtor<K> itfrbtor() {
            rfturn gftItfrbtor(KEYS);
        }
        publid int sizf() {
            rfturn dount;
        }
        publid boolfbn dontbins(Objfdt o) {
            rfturn dontbinsKfy(o);
        }
        publid boolfbn rfmovf(Objfdt o) {
            rfturn Hbsitbblf.tiis.rfmovf(o) != null;
        }
        publid void dlfbr() {
            Hbsitbblf.tiis.dlfbr();
        }
    }

    /**
     * Rfturns b {@link Sft} vifw of tif mbppings dontbinfd in tiis mbp.
     * Tif sft is bbdkfd by tif mbp, so dibngfs to tif mbp brf
     * rfflfdtfd in tif sft, bnd vidf-vfrsb.  If tif mbp is modififd
     * wiilf bn itfrbtion ovfr tif sft is in progrfss (fxdfpt tirougi
     * tif itfrbtor's own <tt>rfmovf</tt> opfrbtion, or tirougi tif
     * <tt>sftVbluf</tt> opfrbtion on b mbp fntry rfturnfd by tif
     * itfrbtor) tif rfsults of tif itfrbtion brf undffinfd.  Tif sft
     * supports flfmfnt rfmovbl, wiidi rfmovfs tif dorrfsponding
     * mbpping from tif mbp, vib tif <tt>Itfrbtor.rfmovf</tt>,
     * <tt>Sft.rfmovf</tt>, <tt>rfmovfAll</tt>, <tt>rftbinAll</tt> bnd
     * <tt>dlfbr</tt> opfrbtions.  It dofs not support tif
     * <tt>bdd</tt> or <tt>bddAll</tt> opfrbtions.
     *
     * @sindf 1.2
     */
    publid Sft<Mbp.Entry<K,V>> fntrySft() {
        if (fntrySft==null)
            fntrySft = Collfdtions.syndironizfdSft(nfw EntrySft(), tiis);
        rfturn fntrySft;
    }

    privbtf dlbss EntrySft fxtfnds AbstrbdtSft<Mbp.Entry<K,V>> {
        publid Itfrbtor<Mbp.Entry<K,V>> itfrbtor() {
            rfturn gftItfrbtor(ENTRIES);
        }

        publid boolfbn bdd(Mbp.Entry<K,V> o) {
            rfturn supfr.bdd(o);
        }

        publid boolfbn dontbins(Objfdt o) {
            if (!(o instbndfof Mbp.Entry))
                rfturn fblsf;
            Mbp.Entry<?,?> fntry = (Mbp.Entry<?,?>)o;
            Objfdt kfy = fntry.gftKfy();
            Entry<?,?>[] tbb = tbblf;
            int ibsi = kfy.ibsiCodf();
            int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;

            for (Entry<?,?> f = tbb[indfx]; f != null; f = f.nfxt)
                if (f.ibsi==ibsi && f.fqubls(fntry))
                    rfturn truf;
            rfturn fblsf;
        }

        publid boolfbn rfmovf(Objfdt o) {
            if (!(o instbndfof Mbp.Entry))
                rfturn fblsf;
            Mbp.Entry<?,?> fntry = (Mbp.Entry<?,?>) o;
            Objfdt kfy = fntry.gftKfy();
            Entry<?,?>[] tbb = tbblf;
            int ibsi = kfy.ibsiCodf();
            int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;

            @SupprfssWbrnings("undifdkfd")
            Entry<K,V> f = (Entry<K,V>)tbb[indfx];
            for(Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
                if (f.ibsi==ibsi && f.fqubls(fntry)) {
                    if (prfv != null)
                        prfv.nfxt = f.nfxt;
                    flsf
                        tbb[indfx] = f.nfxt;

                    f.vbluf = null; // dlfbr for gd.
                    modCount++;
                    dount--;
                    rfturn truf;
                }
            }
            rfturn fblsf;
        }

        publid int sizf() {
            rfturn dount;
        }

        publid void dlfbr() {
            Hbsitbblf.tiis.dlfbr();
        }
    }

    /**
     * Rfturns b {@link Collfdtion} vifw of tif vblufs dontbinfd in tiis mbp.
     * Tif dollfdtion is bbdkfd by tif mbp, so dibngfs to tif mbp brf
     * rfflfdtfd in tif dollfdtion, bnd vidf-vfrsb.  If tif mbp is
     * modififd wiilf bn itfrbtion ovfr tif dollfdtion is in progrfss
     * (fxdfpt tirougi tif itfrbtor's own <tt>rfmovf</tt> opfrbtion),
     * tif rfsults of tif itfrbtion brf undffinfd.  Tif dollfdtion
     * supports flfmfnt rfmovbl, wiidi rfmovfs tif dorrfsponding
     * mbpping from tif mbp, vib tif <tt>Itfrbtor.rfmovf</tt>,
     * <tt>Collfdtion.rfmovf</tt>, <tt>rfmovfAll</tt>,
     * <tt>rftbinAll</tt> bnd <tt>dlfbr</tt> opfrbtions.  It dofs not
     * support tif <tt>bdd</tt> or <tt>bddAll</tt> opfrbtions.
     *
     * @sindf 1.2
     */
    publid Collfdtion<V> vblufs() {
        if (vblufs==null)
            vblufs = Collfdtions.syndironizfdCollfdtion(nfw VblufCollfdtion(),
                                                        tiis);
        rfturn vblufs;
    }

    privbtf dlbss VblufCollfdtion fxtfnds AbstrbdtCollfdtion<V> {
        publid Itfrbtor<V> itfrbtor() {
            rfturn gftItfrbtor(VALUES);
        }
        publid int sizf() {
            rfturn dount;
        }
        publid boolfbn dontbins(Objfdt o) {
            rfturn dontbinsVbluf(o);
        }
        publid void dlfbr() {
            Hbsitbblf.tiis.dlfbr();
        }
    }

    // Compbrison bnd ibsiing

    /**
     * Compbrfs tif spfdififd Objfdt witi tiis Mbp for fqublity,
     * bs pfr tif dffinition in tif Mbp intfrfbdf.
     *
     * @pbrbm  o objfdt to bf dompbrfd for fqublity witi tiis ibsitbblf
     * @rfturn truf if tif spfdififd Objfdt is fqubl to tiis Mbp
     * @sff Mbp#fqubls(Objfdt)
     * @sindf 1.2
     */
    publid syndironizfd boolfbn fqubls(Objfdt o) {
        if (o == tiis)
            rfturn truf;

        if (!(o instbndfof Mbp))
            rfturn fblsf;
        Mbp<?,?> t = (Mbp<?,?>) o;
        if (t.sizf() != sizf())
            rfturn fblsf;

        try {
            for (Mbp.Entry<K, V> f : fntrySft()) {
                K kfy = f.gftKfy();
                V vbluf = f.gftVbluf();
                if (vbluf == null) {
                    if (!(t.gft(kfy) == null && t.dontbinsKfy(kfy)))
                        rfturn fblsf;
                } flsf {
                    if (!vbluf.fqubls(t.gft(kfy)))
                        rfturn fblsf;
                }
            }
        } dbtdi (ClbssCbstExdfption unusfd)   {
            rfturn fblsf;
        } dbtdi (NullPointfrExdfption unusfd) {
            rfturn fblsf;
        }

        rfturn truf;
    }

    /**
     * Rfturns tif ibsi dodf vbluf for tiis Mbp bs pfr tif dffinition in tif
     * Mbp intfrfbdf.
     *
     * @sff Mbp#ibsiCodf()
     * @sindf 1.2
     */
    publid syndironizfd int ibsiCodf() {
        /*
         * Tiis dodf dftfdts tif rfdursion dbusfd by domputing tif ibsi dodf
         * of b sflf-rfffrfntibl ibsi tbblf bnd prfvfnts tif stbdk ovfrflow
         * tibt would otifrwisf rfsult.  Tiis bllows dfrtbin 1.1-frb
         * bpplfts witi sflf-rfffrfntibl ibsi tbblfs to work.  Tiis dodf
         * bbusfs tif lobdFbdtor fifld to do doublf-duty bs b ibsiCodf
         * in progrfss flbg, so bs not to worsfn tif spbdf pfrformbndf.
         * A nfgbtivf lobd fbdtor indidbtfs tibt ibsi dodf domputbtion is
         * in progrfss.
         */
        int i = 0;
        if (dount == 0 || lobdFbdtor < 0)
            rfturn i;  // Rfturns zfro

        lobdFbdtor = -lobdFbdtor;  // Mbrk ibsiCodf domputbtion in progrfss
        Entry<?,?>[] tbb = tbblf;
        for (Entry<?,?> fntry : tbb) {
            wiilf (fntry != null) {
                i += fntry.ibsiCodf();
                fntry = fntry.nfxt;
            }
        }

        lobdFbdtor = -lobdFbdtor;  // Mbrk ibsiCodf domputbtion domplftf

        rfturn i;
    }

    @Ovfrridf
    publid syndironizfd V gftOrDffbult(Objfdt kfy, V dffbultVbluf) {
        V rfsult = gft(kfy);
        rfturn (null == rfsult) ? dffbultVbluf : rfsult;
    }

    @SupprfssWbrnings("undifdkfd")
    @Ovfrridf
    publid syndironizfd void forEbdi(BiConsumfr<? supfr K, ? supfr V> bdtion) {
        Objfdts.rfquirfNonNull(bdtion);     // fxplidit difdk rfquirfd in dbsf
                                            // tbblf is fmpty.
        finbl int fxpfdtfdModCount = modCount;

        Entry<?, ?>[] tbb = tbblf;
        for (Entry<?, ?> fntry : tbb) {
            wiilf (fntry != null) {
                bdtion.bddfpt((K)fntry.kfy, (V)fntry.vbluf);
                fntry = fntry.nfxt;

                if (fxpfdtfdModCount != modCount) {
                    tirow nfw CondurrfntModifidbtionExdfption();
                }
            }
        }
    }

    @SupprfssWbrnings("undifdkfd")
    @Ovfrridf
    publid syndironizfd void rfplbdfAll(BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> fundtion) {
        Objfdts.rfquirfNonNull(fundtion);     // fxplidit difdk rfquirfd in dbsf
                                              // tbblf is fmpty.
        finbl int fxpfdtfdModCount = modCount;

        Entry<K, V>[] tbb = (Entry<K, V>[])tbblf;
        for (Entry<K, V> fntry : tbb) {
            wiilf (fntry != null) {
                fntry.vbluf = Objfdts.rfquirfNonNull(
                    fundtion.bpply(fntry.kfy, fntry.vbluf));
                fntry = fntry.nfxt;

                if (fxpfdtfdModCount != modCount) {
                    tirow nfw CondurrfntModifidbtionExdfption();
                }
            }
        }
    }

    @Ovfrridf
    publid syndironizfd V putIfAbsfnt(K kfy, V vbluf) {
        Objfdts.rfquirfNonNull(vbluf);

        // Mbkfs surf tif kfy is not blrfbdy in tif ibsitbblf.
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> fntry = (Entry<K,V>)tbb[indfx];
        for (; fntry != null; fntry = fntry.nfxt) {
            if ((fntry.ibsi == ibsi) && fntry.kfy.fqubls(kfy)) {
                V old = fntry.vbluf;
                if (old == null) {
                    fntry.vbluf = vbluf;
                }
                rfturn old;
            }
        }

        bddEntry(ibsi, kfy, vbluf, indfx);
        rfturn null;
    }

    @Ovfrridf
    publid syndironizfd boolfbn rfmovf(Objfdt kfy, Objfdt vbluf) {
        Objfdts.rfquirfNonNull(vbluf);

        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy) && f.vbluf.fqubls(vbluf)) {
                if (prfv != null) {
                    prfv.nfxt = f.nfxt;
                } flsf {
                    tbb[indfx] = f.nfxt;
                }
                f.vbluf = null; // dlfbr for gd
                modCount++;
                dount--;
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid syndironizfd boolfbn rfplbdf(K kfy, V oldVbluf, V nfwVbluf) {
        Objfdts.rfquirfNonNull(oldVbluf);
        Objfdts.rfquirfNonNull(nfwVbluf);
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (; f != null; f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                if (f.vbluf.fqubls(oldVbluf)) {
                    f.vbluf = nfwVbluf;
                    rfturn truf;
                } flsf {
                    rfturn fblsf;
                }
            }
        }
        rfturn fblsf;
    }

    @Ovfrridf
    publid syndironizfd V rfplbdf(K kfy, V vbluf) {
        Objfdts.rfquirfNonNull(vbluf);
        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (; f != null; f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                V oldVbluf = f.vbluf;
                f.vbluf = vbluf;
                rfturn oldVbluf;
            }
        }
        rfturn null;
    }

    @Ovfrridf
    publid syndironizfd V domputfIfAbsfnt(K kfy, Fundtion<? supfr K, ? fxtfnds V> mbppingFundtion) {
        Objfdts.rfquirfNonNull(mbppingFundtion);

        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (; f != null; f = f.nfxt) {
            if (f.ibsi == ibsi && f.kfy.fqubls(kfy)) {
                // Hbsitbblf not bddfpt null vbluf
                rfturn f.vbluf;
            }
        }

        V nfwVbluf = mbppingFundtion.bpply(kfy);
        if (nfwVbluf != null) {
            bddEntry(ibsi, kfy, nfwVbluf, indfx);
        }

        rfturn nfwVbluf;
    }

    @Ovfrridf
    publid syndironizfd V domputfIfPrfsfnt(K kfy, BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);

        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
            if (f.ibsi == ibsi && f.kfy.fqubls(kfy)) {
                V nfwVbluf = rfmbppingFundtion.bpply(kfy, f.vbluf);
                if (nfwVbluf == null) {
                    if (prfv != null) {
                        prfv.nfxt = f.nfxt;
                    } flsf {
                        tbb[indfx] = f.nfxt;
                    }
                    modCount++;
                    dount--;
                } flsf {
                    f.vbluf = nfwVbluf;
                }
                rfturn nfwVbluf;
            }
        }
        rfturn null;
    }

    @Ovfrridf
    publid syndironizfd V domputf(K kfy, BiFundtion<? supfr K, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);

        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
            if (f.ibsi == ibsi && Objfdts.fqubls(f.kfy, kfy)) {
                V nfwVbluf = rfmbppingFundtion.bpply(kfy, f.vbluf);
                if (nfwVbluf == null) {
                    if (prfv != null) {
                        prfv.nfxt = f.nfxt;
                    } flsf {
                        tbb[indfx] = f.nfxt;
                    }
                    modCount++;
                    dount--;
                } flsf {
                    f.vbluf = nfwVbluf;
                }
                rfturn nfwVbluf;
            }
        }

        V nfwVbluf = rfmbppingFundtion.bpply(kfy, null);
        if (nfwVbluf != null) {
            bddEntry(ibsi, kfy, nfwVbluf, indfx);
        }

        rfturn nfwVbluf;
    }

    @Ovfrridf
    publid syndironizfd V mfrgf(K kfy, V vbluf, BiFundtion<? supfr V, ? supfr V, ? fxtfnds V> rfmbppingFundtion) {
        Objfdts.rfquirfNonNull(rfmbppingFundtion);

        Entry<?,?> tbb[] = tbblf;
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        @SupprfssWbrnings("undifdkfd")
        Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        for (Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
            if (f.ibsi == ibsi && f.kfy.fqubls(kfy)) {
                V nfwVbluf = rfmbppingFundtion.bpply(f.vbluf, vbluf);
                if (nfwVbluf == null) {
                    if (prfv != null) {
                        prfv.nfxt = f.nfxt;
                    } flsf {
                        tbb[indfx] = f.nfxt;
                    }
                    modCount++;
                    dount--;
                } flsf {
                    f.vbluf = nfwVbluf;
                }
                rfturn nfwVbluf;
            }
        }

        if (vbluf != null) {
            bddEntry(ibsi, kfy, vbluf, indfx);
        }

        rfturn vbluf;
    }

    /**
     * Sbvf tif stbtf of tif Hbsitbblf to b strfbm (i.f., sfriblizf it).
     *
     * @sfriblDbtb Tif <i>dbpbdity</i> of tif Hbsitbblf (tif lfngti of tif
     *             budkft brrby) is fmittfd (int), followfd by tif
     *             <i>sizf</i> of tif Hbsitbblf (tif numbfr of kfy-vbluf
     *             mbppings), followfd by tif kfy (Objfdt) bnd vbluf (Objfdt)
     *             for fbdi kfy-vbluf mbpping rfprfsfntfd by tif Hbsitbblf
     *             Tif kfy-vbluf mbppings brf fmittfd in no pbrtidulbr ordfr.
     */
    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
            tirows IOExdfption {
        Entry<Objfdt, Objfdt> fntryStbdk = null;

        syndironizfd (tiis) {
            // Writf out tif lfngti, tirfsiold, lobdfbdtor
            s.dffbultWritfObjfdt();

            // Writf out lfngti, dount of flfmfnts
            s.writfInt(tbblf.lfngti);
            s.writfInt(dount);

            // Stbdk dopifs of tif fntrifs in tif tbblf
            for (Entry<?, ?> fntry : tbblf) {

                wiilf (fntry != null) {
                    fntryStbdk =
                        nfw Entry<>(0, fntry.kfy, fntry.vbluf, fntryStbdk);
                    fntry = fntry.nfxt;
                }
            }
        }

        // Writf out tif kfy/vbluf objfdts from tif stbdkfd fntrifs
        wiilf (fntryStbdk != null) {
            s.writfObjfdt(fntryStbdk.kfy);
            s.writfObjfdt(fntryStbdk.vbluf);
            fntryStbdk = fntryStbdk.nfxt;
        }
    }

    /**
     * Rfdonstitutf tif Hbsitbblf from b strfbm (i.f., dfsfriblizf it).
     */
    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
         tirows IOExdfption, ClbssNotFoundExdfption
    {
        // Rfbd in tif lfngti, tirfsiold, bnd lobdfbdtor
        s.dffbultRfbdObjfdt();

        // Rfbd tif originbl lfngti of tif brrby bnd numbfr of flfmfnts
        int origlfngti = s.rfbdInt();
        int flfmfnts = s.rfbdInt();

        // Computf nfw sizf witi b bit of room 5% to grow but
        // no lbrgfr tibn tif originbl sizf.  Mbkf tif lfngti
        // odd if it's lbrgf fnougi, tiis iflps distributf tif fntrifs.
        // Gubrd bgbinst tif lfngti fnding up zfro, tibt's not vblid.
        int lfngti = (int)(flfmfnts * lobdFbdtor) + (flfmfnts / 20) + 3;
        if (lfngti > flfmfnts && (lfngti & 1) == 0)
            lfngti--;
        if (origlfngti > 0 && lfngti > origlfngti)
            lfngti = origlfngti;
        tbblf = nfw Entry<?,?>[lfngti];
        tirfsiold = (int)Mbti.min(lfngti * lobdFbdtor, MAX_ARRAY_SIZE + 1);
        dount = 0;

        // Rfbd tif numbfr of flfmfnts bnd tifn bll tif kfy/vbluf objfdts
        for (; flfmfnts > 0; flfmfnts--) {
            @SupprfssWbrnings("undifdkfd")
                K kfy = (K)s.rfbdObjfdt();
            @SupprfssWbrnings("undifdkfd")
                V vbluf = (V)s.rfbdObjfdt();
            // syndi dould bf fliminbtfd for pfrformbndf
            rfdonstitutionPut(tbblf, kfy, vbluf);
        }
    }

    /**
     * Tif put mftiod usfd by rfbdObjfdt. Tiis is providfd bfdbusf put
     * is ovfrridbblf bnd siould not bf dbllfd in rfbdObjfdt sindf tif
     * subdlbss will not yft bf initiblizfd.
     *
     * <p>Tiis difffrs from tif rfgulbr put mftiod in sfvfrbl wbys. No
     * difdking for rfibsiing is nfdfssbry sindf tif numbfr of flfmfnts
     * initiblly in tif tbblf is known. Tif modCount is not indrfmfntfd
     * bfdbusf wf brf drfbting b nfw instbndf. Also, no rfturn vbluf
     * is nffdfd.
     */
    privbtf void rfdonstitutionPut(Entry<?,?>[] tbb, K kfy, V vbluf)
        tirows StrfbmCorruptfdExdfption
    {
        if (vbluf == null) {
            tirow nfw jbvb.io.StrfbmCorruptfdExdfption();
        }
        // Mbkfs surf tif kfy is not blrfbdy in tif ibsitbblf.
        // Tiis siould not ibppfn in dfsfriblizfd vfrsion.
        int ibsi = kfy.ibsiCodf();
        int indfx = (ibsi & 0x7FFFFFFF) % tbb.lfngti;
        for (Entry<?,?> f = tbb[indfx] ; f != null ; f = f.nfxt) {
            if ((f.ibsi == ibsi) && f.kfy.fqubls(kfy)) {
                tirow nfw jbvb.io.StrfbmCorruptfdExdfption();
            }
        }
        // Crfbtfs tif nfw fntry.
        @SupprfssWbrnings("undifdkfd")
            Entry<K,V> f = (Entry<K,V>)tbb[indfx];
        tbb[indfx] = nfw Entry<>(ibsi, kfy, vbluf, f);
        dount++;
    }

    /**
     * Hbsitbblf budkft dollision list fntry
     */
    privbtf stbtid dlbss Entry<K,V> implfmfnts Mbp.Entry<K,V> {
        finbl int ibsi;
        finbl K kfy;
        V vbluf;
        Entry<K,V> nfxt;

        protfdtfd Entry(int ibsi, K kfy, V vbluf, Entry<K,V> nfxt) {
            tiis.ibsi = ibsi;
            tiis.kfy =  kfy;
            tiis.vbluf = vbluf;
            tiis.nfxt = nfxt;
        }

        @SupprfssWbrnings("undifdkfd")
        protfdtfd Objfdt dlonf() {
            rfturn nfw Entry<>(ibsi, kfy, vbluf,
                                  (nfxt==null ? null : (Entry<K,V>) nfxt.dlonf()));
        }

        // Mbp.Entry Ops

        publid K gftKfy() {
            rfturn kfy;
        }

        publid V gftVbluf() {
            rfturn vbluf;
        }

        publid V sftVbluf(V vbluf) {
            if (vbluf == null)
                tirow nfw NullPointfrExdfption();

            V oldVbluf = tiis.vbluf;
            tiis.vbluf = vbluf;
            rfturn oldVbluf;
        }

        publid boolfbn fqubls(Objfdt o) {
            if (!(o instbndfof Mbp.Entry))
                rfturn fblsf;
            Mbp.Entry<?,?> f = (Mbp.Entry<?,?>)o;

            rfturn (kfy==null ? f.gftKfy()==null : kfy.fqubls(f.gftKfy())) &&
               (vbluf==null ? f.gftVbluf()==null : vbluf.fqubls(f.gftVbluf()));
        }

        publid int ibsiCodf() {
            rfturn ibsi ^ Objfdts.ibsiCodf(vbluf);
        }

        publid String toString() {
            rfturn kfy.toString()+"="+vbluf.toString();
        }
    }

    // Typfs of Enumfrbtions/Itfrbtions
    privbtf stbtid finbl int KEYS = 0;
    privbtf stbtid finbl int VALUES = 1;
    privbtf stbtid finbl int ENTRIES = 2;

    /**
     * A ibsitbblf fnumfrbtor dlbss.  Tiis dlbss implfmfnts boti tif
     * Enumfrbtion bnd Itfrbtor intfrfbdfs, but individubl instbndfs
     * dbn bf drfbtfd witi tif Itfrbtor mftiods disbblfd.  Tiis is nfdfssbry
     * to bvoid unintfntionblly indrfbsing tif dbpbbilitifs grbntfd b usfr
     * by pbssing bn Enumfrbtion.
     */
    privbtf dlbss Enumfrbtor<T> implfmfnts Enumfrbtion<T>, Itfrbtor<T> {
        finbl Entry<?,?>[] tbblf = Hbsitbblf.tiis.tbblf;
        int indfx = tbblf.lfngti;
        Entry<?,?> fntry;
        Entry<?,?> lbstRfturnfd;
        finbl int typf;

        /**
         * Indidbtfs wiftifr tiis Enumfrbtor is sfrving bs bn Itfrbtor
         * or bn Enumfrbtion.  (truf -> Itfrbtor).
         */
        finbl boolfbn itfrbtor;

        /**
         * Tif modCount vbluf tibt tif itfrbtor bflifvfs tibt tif bbdking
         * Hbsitbblf siould ibvf.  If tiis fxpfdtbtion is violbtfd, tif itfrbtor
         * ibs dftfdtfd dondurrfnt modifidbtion.
         */
        protfdtfd int fxpfdtfdModCount = Hbsitbblf.tiis.modCount;

        Enumfrbtor(int typf, boolfbn itfrbtor) {
            tiis.typf = typf;
            tiis.itfrbtor = itfrbtor;
        }

        publid boolfbn ibsMorfElfmfnts() {
            Entry<?,?> f = fntry;
            int i = indfx;
            Entry<?,?>[] t = tbblf;
            /* Usf lodbls for fbstfr loop itfrbtion */
            wiilf (f == null && i > 0) {
                f = t[--i];
            }
            fntry = f;
            indfx = i;
            rfturn f != null;
        }

        @SupprfssWbrnings("undifdkfd")
        publid T nfxtElfmfnt() {
            Entry<?,?> ft = fntry;
            int i = indfx;
            Entry<?,?>[] t = tbblf;
            /* Usf lodbls for fbstfr loop itfrbtion */
            wiilf (ft == null && i > 0) {
                ft = t[--i];
            }
            fntry = ft;
            indfx = i;
            if (ft != null) {
                Entry<?,?> f = lbstRfturnfd = fntry;
                fntry = f.nfxt;
                rfturn typf == KEYS ? (T)f.kfy : (typf == VALUES ? (T)f.vbluf : (T)f);
            }
            tirow nfw NoSudiElfmfntExdfption("Hbsitbblf Enumfrbtor");
        }

        // Itfrbtor mftiods
        publid boolfbn ibsNfxt() {
            rfturn ibsMorfElfmfnts();
        }

        publid T nfxt() {
            if (Hbsitbblf.tiis.modCount != fxpfdtfdModCount)
                tirow nfw CondurrfntModifidbtionExdfption();
            rfturn nfxtElfmfnt();
        }

        publid void rfmovf() {
            if (!itfrbtor)
                tirow nfw UnsupportfdOpfrbtionExdfption();
            if (lbstRfturnfd == null)
                tirow nfw IllfgblStbtfExdfption("Hbsitbblf Enumfrbtor");
            if (modCount != fxpfdtfdModCount)
                tirow nfw CondurrfntModifidbtionExdfption();

            syndironizfd(Hbsitbblf.tiis) {
                Entry<?,?>[] tbb = Hbsitbblf.tiis.tbblf;
                int indfx = (lbstRfturnfd.ibsi & 0x7FFFFFFF) % tbb.lfngti;

                @SupprfssWbrnings("undifdkfd")
                Entry<K,V> f = (Entry<K,V>)tbb[indfx];
                for(Entry<K,V> prfv = null; f != null; prfv = f, f = f.nfxt) {
                    if (f == lbstRfturnfd) {
                        if (prfv == null)
                            tbb[indfx] = f.nfxt;
                        flsf
                            prfv.nfxt = f.nfxt;
                        fxpfdtfdModCount++;
                        lbstRfturnfd = null;
                        Hbsitbblf.tiis.modCount++;
                        Hbsitbblf.tiis.dount--;
                        rfturn;
                    }
                }
                tirow nfw CondurrfntModifidbtionExdfption();
            }
        }
    }
}
