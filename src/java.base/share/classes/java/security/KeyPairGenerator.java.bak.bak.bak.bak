/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity;

import jbvb.util.*;

import jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd;

import jbvb.sfdurity.Providfr.Sfrvidf;

import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * Thf KfyPbirGfnfrbtor dlbss is usfd to gfnfrbtf pbirs of
 * publid bnd privbtf kfys. Kfy pbir gfnfrbtors brf donstrudtfd using thf
 * {@dodf gftInstbndf} fbdtory mfthods (stbtid mfthods thbt
 * rfturn instbndfs of b givfn dlbss).
 *
 * <p>A Kfy pbir gfnfrbtor for b pbrtidulbr blgorithm drfbtfs b publid/privbtf
 * kfy pbir thbt dbn bf usfd with this blgorithm. It blso bssodibtfs
 * blgorithm-spfdifid pbrbmftfrs with fbdh of thf gfnfrbtfd kfys.
 *
 * <p>Thfrf brf two wbys to gfnfrbtf b kfy pbir: in bn blgorithm-indfpfndfnt
 * mbnnfr, bnd in bn blgorithm-spfdifid mbnnfr.
 * Thf only difffrfndf bftwffn thf two is thf initiblizbtion of thf objfdt:
 *
 * <ul>
 * <li><b>Algorithm-Indfpfndfnt Initiblizbtion</b>
 * <p>All kfy pbir gfnfrbtors shbrf thf dondfpts of b kfysizf bnd b
 * sourdf of rbndomnfss. Thf kfysizf is intfrprftfd difffrfntly for difffrfnt
 * blgorithms (f.g., in thf dbsf of thf <i>DSA</i> blgorithm, thf kfysizf
 * dorrfsponds to thf lfngth of thf modulus).
 * Thfrf is bn
 * {@link #initiblizf(int, jbvb.sfdurity.SfdurfRbndom) initiblizf}
 * mfthod in this KfyPbirGfnfrbtor dlbss thbt tbkfs thfsf two univfrsblly
 * shbrfd typfs of brgumfnts. Thfrf is blso onf thbt tbkfs just b
 * {@dodf kfysizf} brgumfnt, bnd usfs thf {@dodf SfdurfRbndom}
 * implfmfntbtion of thf highfst-priority instbllfd providfr bs thf sourdf
 * of rbndomnfss. (If nonf of thf instbllfd providfrs supply bn implfmfntbtion
 * of {@dodf SfdurfRbndom}, b systfm-providfd sourdf of rbndomnfss is
 * usfd.)
 *
 * <p>Sindf no othfr pbrbmftfrs brf spfdififd whfn you dbll thf bbovf
 * blgorithm-indfpfndfnt {@dodf initiblizf} mfthods, it is up to thf
 * providfr whbt to do bbout thf blgorithm-spfdifid pbrbmftfrs (if bny) to bf
 * bssodibtfd with fbdh of thf kfys.
 *
 * <p>If thf blgorithm is thf <i>DSA</i> blgorithm, bnd thf kfysizf (modulus
 * sizf) is 512, 768, or 1024, thfn thf <i>Sun</i> providfr usfs b sft of
 * prfdomputfd vblufs for thf {@dodf p}, {@dodf q}, bnd
 * {@dodf g} pbrbmftfrs. If thf modulus sizf is not onf of thf bbovf
 * vblufs, thf <i>Sun</i> providfr drfbtfs b nfw sft of pbrbmftfrs. Othfr
 * providfrs might hbvf prfdomputfd pbrbmftfr sfts for morf thbn just thf
 * thrff modulus sizfs mfntionfd bbovf. Still othfrs might not hbvf b list of
 * prfdomputfd pbrbmftfrs bt bll bnd instfbd blwbys drfbtf nfw pbrbmftfr sfts.
 *
 * <li><b>Algorithm-Spfdifid Initiblizbtion</b>
 * <p>For situbtions whfrf b sft of blgorithm-spfdifid pbrbmftfrs blrfbdy
 * fxists (f.g., so-dbllfd <i>dommunity pbrbmftfrs</i> in DSA), thfrf brf two
 * {@link #initiblizf(jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd)
 * initiblizf} mfthods thbt hbvf bn {@dodf AlgorithmPbrbmftfrSpfd}
 * brgumfnt. Onf blso hbs b {@dodf SfdurfRbndom} brgumfnt, whilf thf
 * thf othfr usfs thf {@dodf SfdurfRbndom}
 * implfmfntbtion of thf highfst-priority instbllfd providfr bs thf sourdf
 * of rbndomnfss. (If nonf of thf instbllfd providfrs supply bn implfmfntbtion
 * of {@dodf SfdurfRbndom}, b systfm-providfd sourdf of rbndomnfss is
 * usfd.)
 * </ul>
 *
 * <p>In dbsf thf dlifnt dofs not fxpliditly initiblizf thf KfyPbirGfnfrbtor
 * (vib b dbll to bn {@dodf initiblizf} mfthod), fbdh providfr must
 * supply (bnd dodumfnt) b dffbult initiblizbtion.
 * For fxbmplf, thf <i>Sun</i> providfr usfs b dffbult modulus sizf (kfysizf)
 * of 1024 bits.
 *
 * <p>Notf thbt this dlbss is bbstrbdt bnd fxtfnds from
 * {@dodf KfyPbirGfnfrbtorSpi} for historidbl rfbsons.
 * Applidbtion dfvflopfrs should only tbkf notidf of thf mfthods dffinfd in
 * this {@dodf KfyPbirGfnfrbtor} dlbss; bll thf mfthods in
 * thf supfrdlbss brf intfndfd for dryptogrbphid sfrvidf providfrs who wish to
 * supply thfir own implfmfntbtions of kfy pbir gfnfrbtors.
 *
 * <p> Evfry implfmfntbtion of thf Jbvb plbtform is rfquirfd to support thf
 * following stbndbrd {@dodf KfyPbirGfnfrbtor} blgorithms bnd kfysizfs in
 * pbrfnthfsfs:
 * <ul>
 * <li>{@dodf DiffifHfllmbn} (1024)</li>
 * <li>{@dodf DSA} (1024)</li>
 * <li>{@dodf RSA} (1024, 2048)</li>
 * </ul>
 * Thfsf blgorithms brf dfsdribfd in thf <b hrff=
 * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
 * KfyPbirGfnfrbtor sfdtion</b> of thf
 * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion.
 * Consult thf rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * othfr blgorithms brf supportfd.
 *
 * @buthor Bfnjbmin Rfnbud
 *
 * @sff jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd
 */

publid bbstrbdt dlbss KfyPbirGfnfrbtor fxtfnds KfyPbirGfnfrbtorSpi {

    privbtf finbl String blgorithm;

    // Thf providfr
    Providfr providfr;

    /**
     * Crfbtfs b KfyPbirGfnfrbtor objfdt for thf spfdififd blgorithm.
     *
     * @pbrbm blgorithm thf stbndbrd string nbmf of thf blgorithm.
     * Sff thf KfyPbirGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     */
    protfdtfd KfyPbirGfnfrbtor(String blgorithm) {
        this.blgorithm = blgorithm;
    }

    /**
     * Rfturns thf stbndbrd nbmf of thf blgorithm for this kfy pbir gfnfrbtor.
     * Sff thf KfyPbirGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf stbndbrd string nbmf of thf blgorithm.
     */
    publid String gftAlgorithm() {
        rfturn this.blgorithm;
    }

    privbtf stbtid KfyPbirGfnfrbtor gftInstbndf(Instbndf instbndf,
            String blgorithm) {
        KfyPbirGfnfrbtor kpg;
        if (instbndf.impl instbndfof KfyPbirGfnfrbtor) {
            kpg = (KfyPbirGfnfrbtor)instbndf.impl;
        } flsf {
            KfyPbirGfnfrbtorSpi spi = (KfyPbirGfnfrbtorSpi)instbndf.impl;
            kpg = nfw Dflfgbtf(spi, blgorithm);
        }
        kpg.providfr = instbndf.providfr;
        rfturn kpg;
    }

    /**
     * Rfturns b KfyPbirGfnfrbtor objfdt thbt gfnfrbtfs publid/privbtf
     * kfy pbirs for thf spfdififd blgorithm.
     *
     * <p> This mfthod trbvfrsfs thf list of rfgistfrfd sfdurity Providfrs,
     * stbrting with thf most prfffrrfd Providfr.
     * A nfw KfyPbirGfnfrbtor objfdt fndbpsulbting thf
     * KfyPbirGfnfrbtorSpi implfmfntbtion from thf first
     * Providfr thbt supports thf spfdififd blgorithm is rfturnfd.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd string nbmf of thf blgorithm.
     * Sff thf KfyPbirGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @rfturn thf nfw KfyPbirGfnfrbtor objfdt.
     *
     * @fxdfption NoSudhAlgorithmExdfption if no Providfr supports b
     *          KfyPbirGfnfrbtorSpi implfmfntbtion for thf
     *          spfdififd blgorithm.
     *
     * @sff Providfr
     */
    publid stbtid KfyPbirGfnfrbtor gftInstbndf(String blgorithm)
            throws NoSudhAlgorithmExdfption {
        List<Sfrvidf> list =
                GftInstbndf.gftSfrvidfs("KfyPbirGfnfrbtor", blgorithm);
        Itfrbtor<Sfrvidf> t = list.itfrbtor();
        if (t.hbsNfxt() == fblsf) {
            throw nfw NoSudhAlgorithmExdfption
                (blgorithm + " KfyPbirGfnfrbtor not bvbilbblf");
        }
        // find b working Spi or KfyPbirGfnfrbtor subdlbss
        NoSudhAlgorithmExdfption fbilurf = null;
        do {
            Sfrvidf s = t.nfxt();
            try {
                Instbndf instbndf =
                    GftInstbndf.gftInstbndf(s, KfyPbirGfnfrbtorSpi.dlbss);
                if (instbndf.impl instbndfof KfyPbirGfnfrbtor) {
                    rfturn gftInstbndf(instbndf, blgorithm);
                } flsf {
                    rfturn nfw Dflfgbtf(instbndf, t, blgorithm);
                }
            } dbtdh (NoSudhAlgorithmExdfption f) {
                if (fbilurf == null) {
                    fbilurf = f;
                }
            }
        } whilf (t.hbsNfxt());
        throw fbilurf;
    }

    /**
     * Rfturns b KfyPbirGfnfrbtor objfdt thbt gfnfrbtfs publid/privbtf
     * kfy pbirs for thf spfdififd blgorithm.
     *
     * <p> A nfw KfyPbirGfnfrbtor objfdt fndbpsulbting thf
     * KfyPbirGfnfrbtorSpi implfmfntbtion from thf spfdififd providfr
     * is rfturnfd.  Thf spfdififd providfr must bf rfgistfrfd
     * in thf sfdurity providfr list.
     *
     * <p> Notf thbt thf list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * thf {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mfthod.
     *
     * @pbrbm blgorithm thf stbndbrd string nbmf of thf blgorithm.
     * Sff thf KfyPbirGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf string nbmf of thf providfr.
     *
     * @rfturn thf nfw KfyPbirGfnfrbtor objfdt.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyPbirGfnfrbtorSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not
     *          bvbilbblf from thf spfdififd providfr.
     *
     * @fxdfption NoSudhProvidfrExdfption if thf spfdififd providfr is not
     *          rfgistfrfd in thf sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf providfr nbmf is null
     *          or fmpty.
     *
     * @sff Providfr
     */
    publid stbtid KfyPbirGfnfrbtor gftInstbndf(String blgorithm,
            String providfr)
            throws NoSudhAlgorithmExdfption, NoSudhProvidfrExdfption {
        Instbndf instbndf = GftInstbndf.gftInstbndf("KfyPbirGfnfrbtor",
                KfyPbirGfnfrbtorSpi.dlbss, blgorithm, providfr);
        rfturn gftInstbndf(instbndf, blgorithm);
    }

    /**
     * Rfturns b KfyPbirGfnfrbtor objfdt thbt gfnfrbtfs publid/privbtf
     * kfy pbirs for thf spfdififd blgorithm.
     *
     * <p> A nfw KfyPbirGfnfrbtor objfdt fndbpsulbting thf
     * KfyPbirGfnfrbtorSpi implfmfntbtion from thf spfdififd Providfr
     * objfdt is rfturnfd.  Notf thbt thf spfdififd Providfr objfdt
     * dofs not hbvf to bf rfgistfrfd in thf providfr list.
     *
     * @pbrbm blgorithm thf stbndbrd string nbmf of thf blgorithm.
     * Sff thf KfyPbirGfnfrbtor sfdtion in thf <b hrff=
     * "{@dodRoot}/../tfdhnotfs/guidfs/sfdurity/StbndbrdNbmfs.html#KfyPbirGfnfrbtor">
     * Jbvb Cryptogrbphy Ardhitfdturf Stbndbrd Algorithm Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgorithm nbmfs.
     *
     * @pbrbm providfr thf providfr.
     *
     * @rfturn thf nfw KfyPbirGfnfrbtor objfdt.
     *
     * @fxdfption NoSudhAlgorithmExdfption if b KfyPbirGfnfrbtorSpi
     *          implfmfntbtion for thf spfdififd blgorithm is not bvbilbblf
     *          from thf spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if thf spfdififd providfr is null.
     *
     * @sff Providfr
     *
     * @sindf 1.4
     */
    publid stbtid KfyPbirGfnfrbtor gftInstbndf(String blgorithm,
            Providfr providfr) throws NoSudhAlgorithmExdfption {
        Instbndf instbndf = GftInstbndf.gftInstbndf("KfyPbirGfnfrbtor",
                KfyPbirGfnfrbtorSpi.dlbss, blgorithm, providfr);
        rfturn gftInstbndf(instbndf, blgorithm);
    }

    /**
     * Rfturns thf providfr of this kfy pbir gfnfrbtor objfdt.
     *
     * @rfturn thf providfr of this kfy pbir gfnfrbtor objfdt
     */
    publid finbl Providfr gftProvidfr() {
        disbblfFbilovfr();
        rfturn this.providfr;
    }

    void disbblfFbilovfr() {
        // fmpty, ovfrriddfn in Dflfgbtf
    }

    /**
     * Initiblizfs thf kfy pbir gfnfrbtor for b dfrtbin kfysizf using
     * b dffbult pbrbmftfr sft bnd thf {@dodf SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority instbllfd providfr bs thf sourdf
     * of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * {@dodf SfdurfRbndom}, b systfm-providfd sourdf of rbndomnfss is
     * usfd.)
     *
     * @pbrbm kfysizf thf kfysizf. This is bn
     * blgorithm-spfdifid mftrid, sudh bs modulus lfngth, spfdififd in
     * numbfr of bits.
     *
     * @fxdfption InvblidPbrbmftfrExdfption if thf {@dodf kfysizf} is not
     * supportfd by this KfyPbirGfnfrbtor objfdt.
     */
    publid void initiblizf(int kfysizf) {
        initiblizf(kfysizf, JCAUtil.gftSfdurfRbndom());
    }

    /**
     * Initiblizfs thf kfy pbir gfnfrbtor for b dfrtbin kfysizf with
     * thf givfn sourdf of rbndomnfss (bnd b dffbult pbrbmftfr sft).
     *
     * @pbrbm kfysizf thf kfysizf. This is bn
     * blgorithm-spfdifid mftrid, sudh bs modulus lfngth, spfdififd in
     * numbfr of bits.
     * @pbrbm rbndom thf sourdf of rbndomnfss.
     *
     * @fxdfption InvblidPbrbmftfrExdfption if thf {@dodf kfysizf} is not
     * supportfd by this KfyPbirGfnfrbtor objfdt.
     *
     * @sindf 1.2
     */
    publid void initiblizf(int kfysizf, SfdurfRbndom rbndom) {
        // This dofs nothing, bfdbusf fithfr
        // 1. thf implfmfntbtion objfdt rfturnfd by gftInstbndf() is bn
        //    instbndf of KfyPbirGfnfrbtor whidh hbs its own
        //    initiblizf(kfysizf, rbndom) mfthod, so thf bpplidbtion would
        //    bf dblling thbt mfthod dirfdtly, or
        // 2. thf implfmfntbtion rfturnfd by gftInstbndf() is bn instbndf
        //    of Dflfgbtf, in whidh dbsf initiblizf(kfysizf, rbndom) is
        //    ovfrriddfn to dbll thf dorrfsponding SPI mfthod.
        // (This is b spfdibl dbsf, bfdbusf thf API bnd SPI mfthod hbvf thf
        // sbmf nbmf.)
    }

    /**
     * Initiblizfs thf kfy pbir gfnfrbtor using thf spfdififd pbrbmftfr
     * sft bnd thf {@dodf SfdurfRbndom}
     * implfmfntbtion of thf highfst-priority instbllfd providfr bs thf sourdf
     * of rbndomnfss.
     * (If nonf of thf instbllfd providfrs supply bn implfmfntbtion of
     * {@dodf SfdurfRbndom}, b systfm-providfd sourdf of rbndomnfss is
     * usfd.).
     *
     * <p>This dondrftf mfthod hbs bffn bddfd to this prfviously-dffinfd
     * bbstrbdt dlbss.
     * This mfthod dblls thf KfyPbirGfnfrbtorSpi
     * {@link KfyPbirGfnfrbtorSpi#initiblizf(
     * jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd,
     * jbvb.sfdurity.SfdurfRbndom) initiblizf} mfthod,
     * pbssing it {@dodf pbrbms} bnd b sourdf of rbndomnfss (obtbinfd
     * from thf highfst-priority instbllfd providfr or systfm-providfd if nonf
     * of thf instbllfd providfrs supply onf).
     * Thbt {@dodf initiblizf} mfthod blwbys throws bn
     * UnsupportfdOpfrbtionExdfption if it is not ovfrriddfn by thf providfr.
     *
     * @pbrbm pbrbms thf pbrbmftfr sft usfd to gfnfrbtf thf kfys.
     *
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn pbrbmftfrs
     * brf inbppropribtf for this kfy pbir gfnfrbtor.
     *
     * @sindf 1.2
     */
    publid void initiblizf(AlgorithmPbrbmftfrSpfd pbrbms)
            throws InvblidAlgorithmPbrbmftfrExdfption {
        initiblizf(pbrbms, JCAUtil.gftSfdurfRbndom());
    }

    /**
     * Initiblizfs thf kfy pbir gfnfrbtor with thf givfn pbrbmftfr
     * sft bnd sourdf of rbndomnfss.
     *
     * <p>This dondrftf mfthod hbs bffn bddfd to this prfviously-dffinfd
     * bbstrbdt dlbss.
     * This mfthod dblls thf KfyPbirGfnfrbtorSpi {@link
     * KfyPbirGfnfrbtorSpi#initiblizf(
     * jbvb.sfdurity.spfd.AlgorithmPbrbmftfrSpfd,
     * jbvb.sfdurity.SfdurfRbndom) initiblizf} mfthod,
     * pbssing it {@dodf pbrbms} bnd {@dodf rbndom}.
     * Thbt {@dodf initiblizf}
     * mfthod blwbys throws bn
     * UnsupportfdOpfrbtionExdfption if it is not ovfrriddfn by thf providfr.
     *
     * @pbrbm pbrbms thf pbrbmftfr sft usfd to gfnfrbtf thf kfys.
     * @pbrbm rbndom thf sourdf of rbndomnfss.
     *
     * @fxdfption InvblidAlgorithmPbrbmftfrExdfption if thf givfn pbrbmftfrs
     * brf inbppropribtf for this kfy pbir gfnfrbtor.
     *
     * @sindf 1.2
     */
    publid void initiblizf(AlgorithmPbrbmftfrSpfd pbrbms,
                           SfdurfRbndom rbndom)
        throws InvblidAlgorithmPbrbmftfrExdfption
    {
        // This dofs nothing, bfdbusf fithfr
        // 1. thf implfmfntbtion objfdt rfturnfd by gftInstbndf() is bn
        //    instbndf of KfyPbirGfnfrbtor whidh hbs its own
        //    initiblizf(pbrbms, rbndom) mfthod, so thf bpplidbtion would
        //    bf dblling thbt mfthod dirfdtly, or
        // 2. thf implfmfntbtion rfturnfd by gftInstbndf() is bn instbndf
        //    of Dflfgbtf, in whidh dbsf initiblizf(pbrbms, rbndom) is
        //    ovfrriddfn to dbll thf dorrfsponding SPI mfthod.
        // (This is b spfdibl dbsf, bfdbusf thf API bnd SPI mfthod hbvf thf
        // sbmf nbmf.)
    }

    /**
     * Gfnfrbtfs b kfy pbir.
     *
     * <p>If this KfyPbirGfnfrbtor hbs not bffn initiblizfd fxpliditly,
     * providfr-spfdifid dffbults will bf usfd for thf sizf bnd othfr
     * (blgorithm-spfdifid) vblufs of thf gfnfrbtfd kfys.
     *
     * <p>This will gfnfrbtf b nfw kfy pbir fvfry timf it is dbllfd.
     *
     * <p>This mfthod is fundtionblly fquivblfnt to
     * {@link #gfnfrbtfKfyPbir() gfnfrbtfKfyPbir}.
     *
     * @rfturn thf gfnfrbtfd kfy pbir
     *
     * @sindf 1.2
     */
    publid finbl KfyPbir gfnKfyPbir() {
        rfturn gfnfrbtfKfyPbir();
    }

    /**
     * Gfnfrbtfs b kfy pbir.
     *
     * <p>If this KfyPbirGfnfrbtor hbs not bffn initiblizfd fxpliditly,
     * providfr-spfdifid dffbults will bf usfd for thf sizf bnd othfr
     * (blgorithm-spfdifid) vblufs of thf gfnfrbtfd kfys.
     *
     * <p>This will gfnfrbtf b nfw kfy pbir fvfry timf it is dbllfd.
     *
     * <p>This mfthod is fundtionblly fquivblfnt to
     * {@link #gfnKfyPbir() gfnKfyPbir}.
     *
     * @rfturn thf gfnfrbtfd kfy pbir
     */
    publid KfyPbir gfnfrbtfKfyPbir() {
        // This dofs nothing (fxdfpt rfturning null), bfdbusf fithfr:
        //
        // 1. thf implfmfntbtion objfdt rfturnfd by gftInstbndf() is bn
        //    instbndf of KfyPbirGfnfrbtor whidh hbs its own implfmfntbtion
        //    of gfnfrbtfKfyPbir (ovfrriding this onf), so thf bpplidbtion
        //    would bf dblling thbt mfthod dirfdtly, or
        //
        // 2. thf implfmfntbtion rfturnfd by gftInstbndf() is bn instbndf
        //    of Dflfgbtf, in whidh dbsf gfnfrbtfKfyPbir is
        //    ovfrriddfn to invokf thf dorrfsponding SPI mfthod.
        //
        // (This is b spfdibl dbsf, bfdbusf in JDK 1.1.x thf gfnfrbtfKfyPbir
        // mfthod wbs usfd both bs bn API bnd b SPI mfthod.)
        rfturn null;
    }


    /*
     * Thf following dlbss bllows providfrs to fxtfnd from KfyPbirGfnfrbtorSpi
     * rbthfr thbn from KfyPbirGfnfrbtor. It rfprfsfnts b KfyPbirGfnfrbtor
     * with bn fndbpsulbtfd, providfr-supplifd SPI objfdt (of typf
     * KfyPbirGfnfrbtorSpi).
     * If thf providfr implfmfntbtion is bn instbndf of KfyPbirGfnfrbtorSpi,
     * thf gftInstbndf() mfthods bbovf rfturn bn instbndf of this dlbss, with
     * thf SPI objfdt fndbpsulbtfd.
     *
     * Notf: All SPI mfthods from thf originbl KfyPbirGfnfrbtor dlbss hbvf bffn
     * movfd up thf hifrbrdhy into b nfw dlbss (KfyPbirGfnfrbtorSpi), whidh hbs
     * bffn intfrposfd in thf hifrbrdhy bftwffn thf API (KfyPbirGfnfrbtor)
     * bnd its originbl pbrfnt (Objfdt).
     */

    //
    // frror fbilovfr notfs:
    //
    //  . wf fbilovfr if thf implfmfntbtion throws bn frror during init
    //    by rftrying thf init on othfr providfrs
    //
    //  . wf blso fbilovfr if thf init suddffdfd but thf subsfqufnt dbll
    //    to gfnfrbtfKfyPbir() fbils. In ordfr for this to work, wf nffd
    //    to rfmfmbfr thf pbrbmftfrs to thf lbst suddfssful dbll to init
    //    bnd initiblizf() thf nfxt spi using thfm.
    //
    //  . blthough not spfdififd, KfyPbirGfnfrbtors dould bf thrfbd sbff,
    //    so wf mbkf surf wf do not intfrffrf with thbt
    //
    //  . fbilovfr is not bvbilbblf, if:
    //    . gftInstbndf(blgorithm, providfr) wbs usfd
    //    . b providfr fxtfnds KfyPbirGfnfrbtor rbthfr thbn
    //      KfyPbirGfnfrbtorSpi (JDK 1.1 stylf)
    //    . ondf gftProvidfr() is dbllfd
    //

    privbtf stbtid finbl dlbss Dflfgbtf fxtfnds KfyPbirGfnfrbtor {

        // Thf providfr implfmfntbtion (dflfgbtf)
        privbtf volbtilf KfyPbirGfnfrbtorSpi spi;

        privbtf finbl Objfdt lodk = nfw Objfdt();

        privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

        privbtf finbl stbtid int I_NONE   = 1;
        privbtf finbl stbtid int I_SIZE   = 2;
        privbtf finbl stbtid int I_PARAMS = 3;

        privbtf int initTypf;
        privbtf int initKfySizf;
        privbtf AlgorithmPbrbmftfrSpfd initPbrbms;
        privbtf SfdurfRbndom initRbndom;

        // donstrudtor
        Dflfgbtf(KfyPbirGfnfrbtorSpi spi, String blgorithm) {
            supfr(blgorithm);
            this.spi = spi;
        }

        Dflfgbtf(Instbndf instbndf, Itfrbtor<Sfrvidf> sfrvidfItfrbtor,
                String blgorithm) {
            supfr(blgorithm);
            spi = (KfyPbirGfnfrbtorSpi)instbndf.impl;
            providfr = instbndf.providfr;
            this.sfrvidfItfrbtor = sfrvidfItfrbtor;
            initTypf = I_NONE;
        }

        /**
         * Updbtf thf bdtivf spi of this dlbss bnd rfturn thf nfxt
         * implfmfntbtion for fbilovfr. If no morf implfmfnbtions brf
         * bvbilbblf, this mfthod rfturns null. Howfvfr, thf bdtivf spi of
         * this dlbss is nfvfr sft to null.
         */
        privbtf KfyPbirGfnfrbtorSpi nfxtSpi(KfyPbirGfnfrbtorSpi oldSpi,
                boolfbn rfinit) {
            syndhronizfd (lodk) {
                // somfbody flsf did b fbilovfr dondurrfntly
                // try thbt spi now
                if ((oldSpi != null) && (oldSpi != spi)) {
                    rfturn spi;
                }
                if (sfrvidfItfrbtor == null) {
                    rfturn null;
                }
                whilf (sfrvidfItfrbtor.hbsNfxt()) {
                    Sfrvidf s = sfrvidfItfrbtor.nfxt();
                    try {
                        Objfdt inst = s.nfwInstbndf(null);
                        // ignorf non-spis
                        if (inst instbndfof KfyPbirGfnfrbtorSpi == fblsf) {
                            dontinuf;
                        }
                        if (inst instbndfof KfyPbirGfnfrbtor) {
                            dontinuf;
                        }
                        KfyPbirGfnfrbtorSpi spi = (KfyPbirGfnfrbtorSpi)inst;
                        if (rfinit) {
                            if (initTypf == I_SIZE) {
                                spi.initiblizf(initKfySizf, initRbndom);
                            } flsf if (initTypf == I_PARAMS) {
                                spi.initiblizf(initPbrbms, initRbndom);
                            } flsf if (initTypf != I_NONE) {
                                throw nfw AssfrtionError
                                    ("KfyPbirGfnfrbtor initTypf: " + initTypf);
                            }
                        }
                        providfr = s.gftProvidfr();
                        this.spi = spi;
                        rfturn spi;
                    } dbtdh (Exdfption f) {
                        // ignorf
                    }
                }
                disbblfFbilovfr();
                rfturn null;
            }
        }

        void disbblfFbilovfr() {
            sfrvidfItfrbtor = null;
            initTypf = 0;
            initPbrbms = null;
            initRbndom = null;
        }

        // fnginf mfthod
        publid void initiblizf(int kfysizf, SfdurfRbndom rbndom) {
            if (sfrvidfItfrbtor == null) {
                spi.initiblizf(kfysizf, rbndom);
                rfturn;
            }
            RuntimfExdfption fbilurf = null;
            KfyPbirGfnfrbtorSpi mySpi = spi;
            do {
                try {
                    mySpi.initiblizf(kfysizf, rbndom);
                    initTypf = I_SIZE;
                    initKfySizf = kfysizf;
                    initPbrbms = null;
                    initRbndom = rbndom;
                    rfturn;
                } dbtdh (RuntimfExdfption f) {
                    if (fbilurf == null) {
                        fbilurf = f;
                    }
                    mySpi = nfxtSpi(mySpi, fblsf);
                }
            } whilf (mySpi != null);
            throw fbilurf;
        }

        // fnginf mfthod
        publid void initiblizf(AlgorithmPbrbmftfrSpfd pbrbms,
                SfdurfRbndom rbndom) throws InvblidAlgorithmPbrbmftfrExdfption {
            if (sfrvidfItfrbtor == null) {
                spi.initiblizf(pbrbms, rbndom);
                rfturn;
            }
            Exdfption fbilurf = null;
            KfyPbirGfnfrbtorSpi mySpi = spi;
            do {
                try {
                    mySpi.initiblizf(pbrbms, rbndom);
                    initTypf = I_PARAMS;
                    initKfySizf = 0;
                    initPbrbms = pbrbms;
                    initRbndom = rbndom;
                    rfturn;
                } dbtdh (Exdfption f) {
                    if (fbilurf == null) {
                        fbilurf = f;
                    }
                    mySpi = nfxtSpi(mySpi, fblsf);
                }
            } whilf (mySpi != null);
            if (fbilurf instbndfof RuntimfExdfption) {
                throw (RuntimfExdfption)fbilurf;
            }
            // must bf bn InvblidAlgorithmPbrbmftfrExdfption
            throw (InvblidAlgorithmPbrbmftfrExdfption)fbilurf;
        }

        // fnginf mfthod
        publid KfyPbir gfnfrbtfKfyPbir() {
            if (sfrvidfItfrbtor == null) {
                rfturn spi.gfnfrbtfKfyPbir();
            }
            RuntimfExdfption fbilurf = null;
            KfyPbirGfnfrbtorSpi mySpi = spi;
            do {
                try {
                    rfturn mySpi.gfnfrbtfKfyPbir();
                } dbtdh (RuntimfExdfption f) {
                    if (fbilurf == null) {
                        fbilurf = f;
                    }
                    mySpi = nfxtSpi(mySpi, truf);
                }
            } whilf (mySpi != null);
            throw fbilurf;
        }
    }

}
