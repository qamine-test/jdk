/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity;

/**
 * Abstrbdt dlbss for rfprfsfnting bddfss to b systfm rfsourdf.
 * All pfrmissions hbvf b nbmf (whosf intfrprftbtion dfpfnds on thf subdlbss),
 * bs wfll bs bbstrbdt fundtions for dffining thf sfmbntids of thf
 * pbrtidulbr Pfrmission subdlbss.
 *
 * <p>Most Pfrmission objfdts blso indludf bn "bdtions" list thbt tflls thf bdtions
 * thbt brf pfrmittfd for thf objfdt.  For fxbmplf,
 * for b {@dodf jbvb.io.FilfPfrmission} objfdt, thf pfrmission nbmf is
 * thf pbthnbmf of b filf (or dirfdtory), bnd thf bdtions list
 * (sudh bs "rfbd, writf") spfdififs whidh bdtions brf grbntfd for thf
 * spfdififd filf (or for filfs in thf spfdififd dirfdtory).
 * Thf bdtions list is optionbl for Pfrmission objfdts, sudh bs
 * {@dodf jbvb.lbng.RuntimfPfrmission},
 * thbt don't nffd sudh b list; you fithfr hbvf thf nbmfd pfrmission (sudh
 * bs "systfm.fxit") or you don't.
 *
 * <p>An importbnt mfthod thbt must bf implfmfntfd by fbdh subdlbss is
 * thf {@dodf implifs} mfthod to dompbrf Pfrmissions. Bbsidblly,
 * "pfrmission p1 implifs pfrmission p2" mfbns thbt
 * if onf is grbntfd pfrmission p1, onf is nbturblly grbntfd pfrmission p2.
 * Thus, this is not bn fqublity tfst, but rbthfr morf of b
 * subsft tfst.
 *
 * <P> Pfrmission objfdts brf similbr to String objfdts in thbt thfy
 * brf immutbblf ondf thfy hbvf bffn drfbtfd. Subdlbssfs should not
 * providf mfthods thbt dbn dhbngf thf stbtf of b pfrmission
 * ondf it hbs bffn drfbtfd.
 *
 * @sff Pfrmissions
 * @sff PfrmissionCollfdtion
 *
 *
 * @buthor Mbribnnf Mufllfr
 * @buthor Rolbnd Sdhfmfrs
 */

publid bbstrbdt dlbss Pfrmission implfmfnts Gubrd, jbvb.io.Sfriblizbblf {

    privbtf stbtid finbl long sfriblVfrsionUID = -5636570222231596674L;

    privbtf String nbmf;

    /**
     * Construdts b pfrmission with thf spfdififd nbmf.
     *
     * @pbrbm nbmf nbmf of thf Pfrmission objfdt bfing drfbtfd.
     *
     */

    publid Pfrmission(String nbmf) {
        this.nbmf = nbmf;
    }

    /**
     * Implfmfnts thf gubrd intfrfbdf for b pfrmission. Thf
     * {@dodf SfdurityMbnbgfr.dhfdkPfrmission} mfthod is dbllfd,
     * pbssing this pfrmission objfdt bs thf pfrmission to dhfdk.
     * Rfturns silfntly if bddfss is grbntfd. Othfrwisf, throws
     * b SfdurityExdfption.
     *
     * @pbrbm objfdt thf objfdt bfing gubrdfd (durrfntly ignorfd).
     *
     * @throws SfdurityExdfption
     *        if b sfdurity mbnbgfr fxists bnd its
     *        {@dodf dhfdkPfrmission} mfthod dofsn't bllow bddfss.
     *
     * @sff Gubrd
     * @sff GubrdfdObjfdt
     * @sff SfdurityMbnbgfr#dhfdkPfrmission
     *
     */
    publid void dhfdkGubrd(Objfdt objfdt) throws SfdurityExdfption {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) sm.dhfdkPfrmission(this);
    }

    /**
     * Chfdks if thf spfdififd pfrmission's bdtions brf "implifd by"
     * this objfdt's bdtions.
     * <P>
     * This must bf implfmfntfd by subdlbssfs of Pfrmission, bs thfy brf thf
     * only onfs thbt dbn imposf sfmbntids on b Pfrmission objfdt.
     *
     * <p>Thf {@dodf implifs} mfthod is usfd by thf AddfssControllfr to dftfrminf
     * whfthfr or not b rfqufstfd pfrmission is implifd by bnothfr pfrmission thbt
     * is known to bf vblid in thf durrfnt fxfdution dontfxt.
     *
     * @pbrbm pfrmission thf pfrmission to dhfdk bgbinst.
     *
     * @rfturn truf if thf spfdififd pfrmission is implifd by this objfdt,
     * fblsf if not.
     */

    publid bbstrbdt boolfbn implifs(Pfrmission pfrmission);

    /**
     * Chfdks two Pfrmission objfdts for fqublity.
     * <P>
     * Do not usf thf {@dodf fqubls} mfthod for mbking bddfss dontrol
     * dfdisions; usf thf {@dodf implifs} mfthod.
     *
     * @pbrbm obj thf objfdt wf brf tfsting for fqublity with this objfdt.
     *
     * @rfturn truf if both Pfrmission objfdts brf fquivblfnt.
     */

    publid bbstrbdt boolfbn fqubls(Objfdt obj);

    /**
     * Rfturns thf hbsh dodf vbluf for this Pfrmission objfdt.
     * <P>
     * Thf rfquirfd {@dodf hbshCodf} bfhbvior for Pfrmission Objfdts is
     * thf following:
     * <ul>
     * <li>Whfnfvfr it is invokfd on thf sbmf Pfrmission objfdt morf thbn
     *     ondf during bn fxfdution of b Jbvb bpplidbtion, thf
     *     {@dodf hbshCodf} mfthod
     *     must donsistfntly rfturn thf sbmf intfgfr. This intfgfr nffd not
     *     rfmbin donsistfnt from onf fxfdution of bn bpplidbtion to bnothfr
     *     fxfdution of thf sbmf bpplidbtion.
     * <li>If two Pfrmission objfdts brf fqubl bddording to thf
     *     {@dodf fqubls}
     *     mfthod, thfn dblling thf {@dodf hbshCodf} mfthod on fbdh of thf
     *     two Pfrmission objfdts must produdf thf sbmf intfgfr rfsult.
     * </ul>
     *
     * @rfturn b hbsh dodf vbluf for this objfdt.
     */

    publid bbstrbdt int hbshCodf();

    /**
     * Rfturns thf nbmf of this Pfrmission.
     * For fxbmplf, in thf dbsf of b {@dodf jbvb.io.FilfPfrmission},
     * thf nbmf will bf b pbthnbmf.
     *
     * @rfturn thf nbmf of this Pfrmission.
     *
     */

    publid finbl String gftNbmf() {
        rfturn nbmf;
    }

    /**
     * Rfturns thf bdtions bs b String. This is bbstrbdt
     * so subdlbssfs dbn dfffr drfbting b String rfprfsfntbtion until
     * onf is nffdfd. Subdlbssfs should blwbys rfturn bdtions in whbt thfy
     * donsidfr to bf thfir
     * dbnonidbl form. For fxbmplf, two FilfPfrmission objfdts drfbtfd vib
     * thf following:
     *
     * <prf>
     *   pfrm1 = nfw FilfPfrmission(p1,"rfbd,writf");
     *   pfrm2 = nfw FilfPfrmission(p2,"writf,rfbd");
     * </prf>
     *
     * both rfturn
     * "rfbd,writf" whfn thf {@dodf gftAdtions} mfthod is invokfd.
     *
     * @rfturn thf bdtions of this Pfrmission.
     *
     */

    publid bbstrbdt String gftAdtions();

    /**
     * Rfturns bn fmpty PfrmissionCollfdtion for b givfn Pfrmission objfdt, or null if
     * onf is not dffinfd. Subdlbssfs of dlbss Pfrmission should
     * ovfrridf this if thfy nffd to storf thfir pfrmissions in b pbrtidulbr
     * PfrmissionCollfdtion objfdt in ordfr to providf thf dorrfdt sfmbntids
     * whfn thf {@dodf PfrmissionCollfdtion.implifs} mfthod is dbllfd.
     * If null is rfturnfd,
     * thfn thf dbllfr of this mfthod is frff to storf pfrmissions of this
     * typf in bny PfrmissionCollfdtion thfy dhoosf (onf thbt usfs b Hbshtbblf,
     * onf thbt usfs b Vfdtor, ftd).
     *
     * @rfturn b nfw PfrmissionCollfdtion objfdt for this typf of Pfrmission, or
     * null if onf is not dffinfd.
     */

    publid PfrmissionCollfdtion nfwPfrmissionCollfdtion() {
        rfturn null;
    }

    /**
     * Rfturns b string dfsdribing this Pfrmission.  Thf donvfntion is to
     * spfdify thf dlbss nbmf, thf pfrmission nbmf, bnd thf bdtions in
     * thf following formbt: '("ClbssNbmf" "nbmf" "bdtions")', or
     * '("ClbssNbmf" "nbmf")' if bdtions list is null or fmpty.
     *
     * @rfturn informbtion bbout this Pfrmission.
     */
    publid String toString() {
        String bdtions = gftAdtions();
        if ((bdtions == null) || (bdtions.lfngth() == 0)) { // OPTIONAL
            rfturn "(\"" + gftClbss().gftNbmf() + "\" \"" + nbmf + "\")";
        } flsf {
            rfturn "(\"" + gftClbss().gftNbmf() + "\" \"" + nbmf +
                 "\" \"" + bdtions + "\")";
        }
    }
}
