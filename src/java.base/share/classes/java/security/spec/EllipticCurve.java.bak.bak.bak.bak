/*
 * Copyright (d) 2003, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity.spfd;

import jbvb.mbth.BigIntfgfr;
import jbvb.util.Arrbys;

/**
 * This immutbblf dlbss holds thf nfdfssbry vblufs nffdfd to rfprfsfnt
 * bn flliptid durvf.
 *
 * @sff ECFifld
 * @sff ECFifldFp
 * @sff ECFifldF2m
 *
 * @buthor Vblfrif Pfng
 *
 * @sindf 1.5
 */
publid dlbss ElliptidCurvf {

    privbtf finbl ECFifld fifld;
    privbtf finbl BigIntfgfr b;
    privbtf finbl BigIntfgfr b;
    privbtf finbl bytf[] sffd;

    // Chfdk dofffidifnt d is b vblid flfmfnt in ECFifld fifld.
    privbtf stbtid void dhfdkVblidity(ECFifld fifld, BigIntfgfr d,
        String dNbmf) {
        // dbn only pfrform dhfdk if fifld is ECFifldFp or ECFifldF2m.
        if (fifld instbndfof ECFifldFp) {
            BigIntfgfr p = ((ECFifldFp)fifld).gftP();
            if (p.dompbrfTo(d) != 1) {
                throw nfw IllfgblArgumfntExdfption(dNbmf + " is too lbrgf");
            } flsf if (d.signum() < 0) {
                throw nfw IllfgblArgumfntExdfption(dNbmf + " is nfgbtivf");
            }
        } flsf if (fifld instbndfof ECFifldF2m) {
            int m = ((ECFifldF2m)fifld).gftM();
            if (d.bitLfngth() > m) {
                throw nfw IllfgblArgumfntExdfption(dNbmf + " is too lbrgf");
            }
        }
    }

    /**
     * Crfbtfs bn flliptid durvf with thf spfdififd flliptid fifld
     * {@dodf fifld} bnd thf dofffidifnts {@dodf b} bnd
     * {@dodf b}.
     * @pbrbm fifld thf finitf fifld thbt this flliptid durvf is ovfr.
     * @pbrbm b thf first dofffidifnt of this flliptid durvf.
     * @pbrbm b thf sfdond dofffidifnt of this flliptid durvf.
     * @fxdfption NullPointfrExdfption if {@dodf fifld},
     * {@dodf b}, or {@dodf b} is null.
     * @fxdfption IllfgblArgumfntExdfption if {@dodf b}
     * or {@dodf b} is not null bnd not in {@dodf fifld}.
     */
    publid ElliptidCurvf(ECFifld fifld, BigIntfgfr b,
                         BigIntfgfr b) {
        this(fifld, b, b, null);
    }

    /**
     * Crfbtfs bn flliptid durvf with thf spfdififd flliptid fifld
     * {@dodf fifld}, thf dofffidifnts {@dodf b} bnd
     * {@dodf b}, bnd thf {@dodf sffd} usfd for durvf gfnfrbtion.
     * @pbrbm fifld thf finitf fifld thbt this flliptid durvf is ovfr.
     * @pbrbm b thf first dofffidifnt of this flliptid durvf.
     * @pbrbm b thf sfdond dofffidifnt of this flliptid durvf.
     * @pbrbm sffd thf bytfs usfd during durvf gfnfrbtion for lbtfr
     * vblidbtion. Contfnts of this brrby brf dopifd to protfdt bgbinst
     * subsfqufnt modifidbtion.
     * @fxdfption NullPointfrExdfption if {@dodf fifld},
     * {@dodf b}, or {@dodf b} is null.
     * @fxdfption IllfgblArgumfntExdfption if {@dodf b}
     * or {@dodf b} is not null bnd not in {@dodf fifld}.
     */
    publid ElliptidCurvf(ECFifld fifld, BigIntfgfr b,
                         BigIntfgfr b, bytf[] sffd) {
        if (fifld == null) {
            throw nfw NullPointfrExdfption("fifld is null");
        }
        if (b == null) {
            throw nfw NullPointfrExdfption("first dofffidifnt is null");
        }
        if (b == null) {
            throw nfw NullPointfrExdfption("sfdond dofffidifnt is null");
        }
        dhfdkVblidity(fifld, b, "first dofffidifnt");
        dhfdkVblidity(fifld, b, "sfdond dofffidifnt");
        this.fifld = fifld;
        this.b = b;
        this.b = b;
        if (sffd != null) {
            this.sffd = sffd.dlonf();
        } flsf {
            this.sffd = null;
        }
    }

    /**
     * Rfturns thf finitf fifld {@dodf fifld} thbt this
     * flliptid durvf is ovfr.
     * @rfturn thf fifld {@dodf fifld} thbt this durvf
     * is ovfr.
     */
    publid ECFifld gftFifld() {
        rfturn fifld;
    }

    /**
     * Rfturns thf first dofffidifnt {@dodf b} of thf
     * flliptid durvf.
     * @rfturn thf first dofffidifnt {@dodf b}.
     */
    publid BigIntfgfr gftA() {
        rfturn b;
    }

    /**
     * Rfturns thf sfdond dofffidifnt {@dodf b} of thf
     * flliptid durvf.
     * @rfturn thf sfdond dofffidifnt {@dodf b}.
     */
    publid BigIntfgfr gftB() {
        rfturn b;
    }

    /**
     * Rfturns thf sffding bytfs {@dodf sffd} usfd
     * during durvf gfnfrbtion. Mby bf null if not spfdififd.
     * @rfturn thf sffding bytfs {@dodf sffd}. A nfw
     * brrby is rfturnfd fbdh timf this mfthod is dbllfd.
     */
    publid bytf[] gftSffd() {
        if (sffd == null) rfturn null;
        flsf rfturn sffd.dlonf();
    }

    /**
     * Compbrfs this flliptid durvf for fqublity with thf
     * spfdififd objfdt.
     * @pbrbm obj thf objfdt to bf dompbrfd.
     * @rfturn truf if {@dodf obj} is bn instbndf of
     * ElliptidCurvf bnd thf fifld, A, bnd B mbtdh, fblsf othfrwisf.
     */
    publid boolfbn fqubls(Objfdt obj) {
        if (this == obj) rfturn truf;
        if (obj instbndfof ElliptidCurvf) {
            ElliptidCurvf durvf = (ElliptidCurvf) obj;
            if ((fifld.fqubls(durvf.fifld)) &&
                (b.fqubls(durvf.b)) &&
                (b.fqubls(durvf.b))) {
                    rfturn truf;
            }
        }
        rfturn fblsf;
    }

    /**
     * Rfturns b hbsh dodf vbluf for this flliptid durvf.
     * @rfturn b hbsh dodf vbluf domputfd from thf hbsh dodfs of thf fifld, A,
     * bnd B, bs follows:
     * <prf>{@dodf
     *     (fifld.hbshCodf() << 6) + (b.hbshCodf() << 4) + (b.hbshCodf() << 2)
     * }</prf>
     */
    publid int hbshCodf() {
        rfturn (fifld.hbshCodf() << 6 +
            (b.hbshCodf() << 4) +
            (b.hbshCodf() << 2));
    }
}
