/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity.spfd;

import jbvb.mbth.BigIntfgfr;

/**
 * This dlbss rfprfsfnts thf triplft (primf, fxponfnt, bnd dofffidifnt)
 * insidf RSA's OthfrPrimfInfo strudturf, bs dffinfd in thf PKCS#1 v2.1.
 * Thf ASN.1 syntbx of RSA's OthfrPrimfInfo is bs follows:
 *
 * <prf>
 * OthfrPrimfInfo ::= SEQUENCE {
 *   primf INTEGER,
 *   fxponfnt INTEGER,
 *   dofffidifnt INTEGER
 *   }
 *
 * </prf>
 *
 * @buthor Vblfrif Pfng
 *
 *
 * @sff RSAPrivbtfCrtKfySpfd
 * @sff jbvb.sfdurity.intfrfbdfs.RSAMultiPrimfPrivbtfCrtKfy
 *
 * @sindf 1.4
 */

publid dlbss RSAOthfrPrimfInfo {

    privbtf BigIntfgfr primf;
    privbtf BigIntfgfr primfExponfnt;
    privbtf BigIntfgfr drtCofffidifnt;


   /**
    * Crfbtfs b nfw {@dodf RSAOthfrPrimfInfo}
    * givfn thf primf, primfExponfnt, bnd
    * drtCofffidifnt bs dffinfd in PKCS#1.
    *
    * @pbrbm primf thf primf fbdtor of n.
    * @pbrbm primfExponfnt thf fxponfnt.
    * @pbrbm drtCofffidifnt thf Chinfsf Rfmbindfr Thforfm
    * dofffidifnt.
    * @fxdfption NullPointfrExdfption if bny of thf pbrbmftfrs, i.f.
    * {@dodf primf}, {@dodf primfExponfnt},
    * {@dodf drtCofffidifnt}, is null.
    *
    */
    publid RSAOthfrPrimfInfo(BigIntfgfr primf,
                          BigIntfgfr primfExponfnt,
                          BigIntfgfr drtCofffidifnt) {
        if (primf == null) {
            throw nfw NullPointfrExdfption("thf primf pbrbmftfr must bf " +
                                            "non-null");
        }
        if (primfExponfnt == null) {
            throw nfw NullPointfrExdfption("thf primfExponfnt pbrbmftfr " +
                                            "must bf non-null");
        }
        if (drtCofffidifnt == null) {
            throw nfw NullPointfrExdfption("thf drtCofffidifnt pbrbmftfr " +
                                            "must bf non-null");
        }
        this.primf = primf;
        this.primfExponfnt = primfExponfnt;
        this.drtCofffidifnt = drtCofffidifnt;
    }

    /**
     * Rfturns thf primf.
     *
     * @rfturn thf primf.
     */
    publid finbl BigIntfgfr gftPrimf() {
        rfturn this.primf;
    }

    /**
     * Rfturns thf primf's fxponfnt.
     *
     * @rfturn thf primfExponfnt.
     */
    publid finbl BigIntfgfr gftExponfnt() {
        rfturn this.primfExponfnt;
    }

    /**
     * Rfturns thf primf's drtCofffidifnt.
     *
     * @rfturn thf drtCofffidifnt.
     */
    publid finbl BigIntfgfr gftCrtCofffidifnt() {
        rfturn this.drtCofffidifnt;
    }
}
