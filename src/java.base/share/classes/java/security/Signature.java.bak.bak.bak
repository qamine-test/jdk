/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity;

import jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd;
import jbvb.util.*;
import jbvb.util.dondurrfnt.CondurrfntHbsiMbp;
import jbvb.io.*;
import jbvb.sfdurity.dfrt.Cfrtifidbtf;
import jbvb.sfdurity.dfrt.X509Cfrtifidbtf;

import jbvb.nio.BytfBufffr;

import jbvb.sfdurity.Providfr.Sfrvidf;

import jbvbx.drypto.Cipifr;
import jbvbx.drypto.CipifrSpi;
import jbvbx.drypto.IllfgblBlodkSizfExdfption;
import jbvbx.drypto.BbdPbddingExdfption;
import jbvbx.drypto.NoSudiPbddingExdfption;

import sun.sfdurity.util.Dfbug;
import sun.sfdurity.jdb.*;
import sun.sfdurity.jdb.GftInstbndf.Instbndf;

/**
 * Tif Signbturf dlbss is usfd to providf bpplidbtions tif fundtionblity
 * of b digitbl signbturf blgoritim. Digitbl signbturfs brf usfd for
 * butifntidbtion bnd intfgrity bssurbndf of digitbl dbtb.
 *
 * <p> Tif signbturf blgoritim dbn bf, bmong otifrs, tif NIST stbndbrd
 * DSA, using DSA bnd SHA-1. Tif DSA blgoritim using tif
 * SHA-1 mfssbgf digfst blgoritim dbn bf spfdififd bs {@dodf SHA1witiDSA}.
 * In tif dbsf of RSA, tifrf brf multiplf dioidfs for tif mfssbgf digfst
 * blgoritim, so tif signing blgoritim dould bf spfdififd bs, for fxbmplf,
 * {@dodf MD2witiRSA}, {@dodf MD5witiRSA}, or {@dodf SHA1witiRSA}.
 * Tif blgoritim nbmf must bf spfdififd, bs tifrf is no dffbult.
 *
 * <p> A Signbturf objfdt dbn bf usfd to gfnfrbtf bnd vfrify digitbl
 * signbturfs.
 *
 * <p> Tifrf brf tirff pibsfs to tif usf of b Signbturf objfdt for
 * fitifr signing dbtb or vfrifying b signbturf:<ol>
 *
 * <li>Initiblizbtion, witi fitifr
 *
 *     <ul>
 *
 *     <li>b publid kfy, wiidi initiblizfs tif signbturf for
 *     vfrifidbtion (sff {@link #initVfrify(PublidKfy) initVfrify}), or
 *
 *     <li>b privbtf kfy (bnd optionblly b Sfdurf Rbndom Numbfr Gfnfrbtor),
 *     wiidi initiblizfs tif signbturf for signing
 *     (sff {@link #initSign(PrivbtfKfy)}
 *     bnd {@link #initSign(PrivbtfKfy, SfdurfRbndom)}).
 *
 *     </ul>
 *
 * <li>Updbting
 *
 * <p>Dfpfnding on tif typf of initiblizbtion, tiis will updbtf tif
 * bytfs to bf signfd or vfrififd. Sff tif
 * {@link #updbtf(bytf) updbtf} mftiods.
 *
 * <li>Signing or Vfrifying b signbturf on bll updbtfd bytfs. Sff tif
 * {@link #sign() sign} mftiods bnd tif {@link #vfrify(bytf[]) vfrify}
 * mftiod.
 *
 * </ol>
 *
 * <p>Notf tibt tiis dlbss is bbstrbdt bnd fxtfnds from
 * {@dodf SignbturfSpi} for iistoridbl rfbsons.
 * Applidbtion dfvflopfrs siould only tbkf notidf of tif mftiods dffinfd in
 * tiis {@dodf Signbturf} dlbss; bll tif mftiods in
 * tif supfrdlbss brf intfndfd for dryptogrbpiid sfrvidf providfrs wio wisi to
 * supply tifir own implfmfntbtions of digitbl signbturf blgoritims.
 *
 * <p> Evfry implfmfntbtion of tif Jbvb plbtform is rfquirfd to support tif
 * following stbndbrd {@dodf Signbturf} blgoritims:
 * <ul>
 * <li>{@dodf SHA1witiDSA}</li>
 * <li>{@dodf SHA1witiRSA}</li>
 * <li>{@dodf SHA256witiRSA}</li>
 * </ul>
 * Tifsf blgoritims brf dfsdribfd in tif <b irff=
 * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#Signbturf">
 * Signbturf sfdtion</b> of tif
 * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion.
 * Consult tif rflfbsf dodumfntbtion for your implfmfntbtion to sff if bny
 * otifr blgoritims brf supportfd.
 *
 * @butior Bfnjbmin Rfnbud
 *
 */

publid bbstrbdt dlbss Signbturf fxtfnds SignbturfSpi {

    privbtf stbtid finbl Dfbug dfbug =
                        Dfbug.gftInstbndf("jdb", "Signbturf");

    /*
     * Tif blgoritim for tiis signbturf objfdt.
     * Tiis vbluf is usfd to mbp bn OID to tif pbrtidulbr blgoritim.
     * Tif mbpping is donf in AlgoritimObjfdt.blgOID(String blgoritim)
     */
    privbtf String blgoritim;

    // Tif providfr
    Providfr providfr;

    /**
     * Possiblf {@link #stbtf} vbluf, signifying tibt
     * tiis signbturf objfdt ibs not yft bffn initiblizfd.
     */
    protfdtfd finbl stbtid int UNINITIALIZED = 0;

    /**
     * Possiblf {@link #stbtf} vbluf, signifying tibt
     * tiis signbturf objfdt ibs bffn initiblizfd for signing.
     */
    protfdtfd finbl stbtid int SIGN = 2;

    /**
     * Possiblf {@link #stbtf} vbluf, signifying tibt
     * tiis signbturf objfdt ibs bffn initiblizfd for vfrifidbtion.
     */
    protfdtfd finbl stbtid int VERIFY = 3;

    /**
     * Currfnt stbtf of tiis signbturf objfdt.
     */
    protfdtfd int stbtf = UNINITIALIZED;

    /**
     * Crfbtfs b Signbturf objfdt for tif spfdififd blgoritim.
     *
     * @pbrbm blgoritim tif stbndbrd string nbmf of tif blgoritim.
     * Sff tif Signbturf sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#Signbturf">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     */
    protfdtfd Signbturf(String blgoritim) {
        tiis.blgoritim = blgoritim;
    }

    // nbmf of tif spfdibl signbturf blg
    privbtf finbl stbtid String RSA_SIGNATURE = "NONEwitiRSA";

    // nbmf of tif fquivblfnt dipifr blg
    privbtf finbl stbtid String RSA_CIPHER = "RSA/ECB/PKCS1Pbdding";

    // bll tif sfrvidfs wf nffd to lookup for dompbtibility witi Cipifr
    privbtf finbl stbtid List<SfrvidfId> rsbIds = Arrbys.bsList(
        nfw SfrvidfId[] {
            nfw SfrvidfId("Signbturf", "NONEwitiRSA"),
            nfw SfrvidfId("Cipifr", "RSA/ECB/PKCS1Pbdding"),
            nfw SfrvidfId("Cipifr", "RSA/ECB"),
            nfw SfrvidfId("Cipifr", "RSA//PKCS1Pbdding"),
            nfw SfrvidfId("Cipifr", "RSA"),
        }
    );

    /**
     * Rfturns b Signbturf objfdt tibt implfmfnts tif spfdififd signbturf
     * blgoritim.
     *
     * <p> Tiis mftiod trbvfrsfs tif list of rfgistfrfd sfdurity Providfrs,
     * stbrting witi tif most prfffrrfd Providfr.
     * A nfw Signbturf objfdt fndbpsulbting tif
     * SignbturfSpi implfmfntbtion from tif first
     * Providfr tibt supports tif spfdififd blgoritim is rfturnfd.
     *
     * <p> Notf tibt tif list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * tif {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mftiod.
     *
     * @pbrbm blgoritim tif stbndbrd nbmf of tif blgoritim rfqufstfd.
     * Sff tif Signbturf sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#Signbturf">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @rfturn tif nfw Signbturf objfdt.
     *
     * @fxdfption NoSudiAlgoritimExdfption if no Providfr supports b
     *          Signbturf implfmfntbtion for tif
     *          spfdififd blgoritim.
     *
     * @sff Providfr
     */
    publid stbtid Signbturf gftInstbndf(String blgoritim)
            tirows NoSudiAlgoritimExdfption {
        List<Sfrvidf> list;
        if (blgoritim.fqublsIgnorfCbsf(RSA_SIGNATURE)) {
            list = GftInstbndf.gftSfrvidfs(rsbIds);
        } flsf {
            list = GftInstbndf.gftSfrvidfs("Signbturf", blgoritim);
        }
        Itfrbtor<Sfrvidf> t = list.itfrbtor();
        if (t.ibsNfxt() == fblsf) {
            tirow nfw NoSudiAlgoritimExdfption
                (blgoritim + " Signbturf not bvbilbblf");
        }
        // try sfrvidfs until wf find bn Spi or b working Signbturf subdlbss
        NoSudiAlgoritimExdfption fbilurf;
        do {
            Sfrvidf s = t.nfxt();
            if (isSpi(s)) {
                rfturn nfw Dflfgbtf(s, t, blgoritim);
            } flsf {
                // must bf b subdlbss of Signbturf, disbblf dynbmid sflfdtion
                try {
                    Instbndf instbndf =
                        GftInstbndf.gftInstbndf(s, SignbturfSpi.dlbss);
                    rfturn gftInstbndf(instbndf, blgoritim);
                } dbtdi (NoSudiAlgoritimExdfption f) {
                    fbilurf = f;
                }
            }
        } wiilf (t.ibsNfxt());
        tirow fbilurf;
    }

    privbtf stbtid Signbturf gftInstbndf(Instbndf instbndf, String blgoritim) {
        Signbturf sig;
        if (instbndf.impl instbndfof Signbturf) {
            sig = (Signbturf)instbndf.impl;
            sig.blgoritim = blgoritim;
        } flsf {
            SignbturfSpi spi = (SignbturfSpi)instbndf.impl;
            sig = nfw Dflfgbtf(spi, blgoritim);
        }
        sig.providfr = instbndf.providfr;
        rfturn sig;
    }

    privbtf finbl stbtid Mbp<String,Boolfbn> signbturfInfo;

    stbtid {
        signbturfInfo = nfw CondurrfntHbsiMbp<String,Boolfbn>();
        Boolfbn TRUE = Boolfbn.TRUE;
        // prf-initiblizf witi vblufs for our SignbturfSpi implfmfntbtions
        signbturfInfo.put("sun.sfdurity.providfr.DSA$RbwDSA", TRUE);
        signbturfInfo.put("sun.sfdurity.providfr.DSA$SHA1witiDSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$MD2witiRSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$MD5witiRSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$SHA1witiRSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$SHA256witiRSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$SHA384witiRSA", TRUE);
        signbturfInfo.put("sun.sfdurity.rsb.RSASignbturf$SHA512witiRSA", TRUE);
        signbturfInfo.put("dom.sun.nft.ssl.intfrnbl.ssl.RSASignbturf", TRUE);
        signbturfInfo.put("sun.sfdurity.pkds11.P11Signbturf", TRUE);
    }

    privbtf stbtid boolfbn isSpi(Sfrvidf s) {
        if (s.gftTypf().fqubls("Cipifr")) {
            // must bf b CipifrSpi, wiidi wf dbn wrbp witi tif CipifrAdbptfr
            rfturn truf;
        }
        String dlbssNbmf = s.gftClbssNbmf();
        Boolfbn rfsult = signbturfInfo.gft(dlbssNbmf);
        if (rfsult == null) {
            try {
                Objfdt instbndf = s.nfwInstbndf(null);
                // Signbturf fxtfnds SignbturfSpi
                // so it is b "rfbl" Spi if it is bn
                // instbndf of SignbturfSpi but not Signbturf
                boolfbn r = (instbndf instbndfof SignbturfSpi)
                                && (instbndf instbndfof Signbturf == fblsf);
                if ((dfbug != null) && (r == fblsf)) {
                    dfbug.println("Not b SignbturfSpi " + dlbssNbmf);
                    dfbug.println("Dflbyfd providfr sflfdtion mby not bf "
                        + "bvbilbblf for blgoritim " + s.gftAlgoritim());
                }
                rfsult = Boolfbn.vblufOf(r);
                signbturfInfo.put(dlbssNbmf, rfsult);
            } dbtdi (Exdfption f) {
                // somftiing is wrong, bssumf not bn SPI
                rfturn fblsf;
            }
        }
        rfturn rfsult.boolfbnVbluf();
    }

    /**
     * Rfturns b Signbturf objfdt tibt implfmfnts tif spfdififd signbturf
     * blgoritim.
     *
     * <p> A nfw Signbturf objfdt fndbpsulbting tif
     * SignbturfSpi implfmfntbtion from tif spfdififd providfr
     * is rfturnfd.  Tif spfdififd providfr must bf rfgistfrfd
     * in tif sfdurity providfr list.
     *
     * <p> Notf tibt tif list of rfgistfrfd providfrs mby bf rftrifvfd vib
     * tif {@link Sfdurity#gftProvidfrs() Sfdurity.gftProvidfrs()} mftiod.
     *
     * @pbrbm blgoritim tif nbmf of tif blgoritim rfqufstfd.
     * Sff tif Signbturf sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#Signbturf">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @pbrbm providfr tif nbmf of tif providfr.
     *
     * @rfturn tif nfw Signbturf objfdt.
     *
     * @fxdfption NoSudiAlgoritimExdfption if b SignbturfSpi
     *          implfmfntbtion for tif spfdififd blgoritim is not
     *          bvbilbblf from tif spfdififd providfr.
     *
     * @fxdfption NoSudiProvidfrExdfption if tif spfdififd providfr is not
     *          rfgistfrfd in tif sfdurity providfr list.
     *
     * @fxdfption IllfgblArgumfntExdfption if tif providfr nbmf is null
     *          or fmpty.
     *
     * @sff Providfr
     */
    publid stbtid Signbturf gftInstbndf(String blgoritim, String providfr)
            tirows NoSudiAlgoritimExdfption, NoSudiProvidfrExdfption {
        if (blgoritim.fqublsIgnorfCbsf(RSA_SIGNATURE)) {
            // fxdfption dompbtibility witi fxisting dodf
            if ((providfr == null) || (providfr.lfngti() == 0)) {
                tirow nfw IllfgblArgumfntExdfption("missing providfr");
            }
            Providfr p = Sfdurity.gftProvidfr(providfr);
            if (p == null) {
                tirow nfw NoSudiProvidfrExdfption
                    ("no sudi providfr: " + providfr);
            }
            rfturn gftInstbndfRSA(p);
        }
        Instbndf instbndf = GftInstbndf.gftInstbndf
                ("Signbturf", SignbturfSpi.dlbss, blgoritim, providfr);
        rfturn gftInstbndf(instbndf, blgoritim);
    }

    /**
     * Rfturns b Signbturf objfdt tibt implfmfnts tif spfdififd
     * signbturf blgoritim.
     *
     * <p> A nfw Signbturf objfdt fndbpsulbting tif
     * SignbturfSpi implfmfntbtion from tif spfdififd Providfr
     * objfdt is rfturnfd.  Notf tibt tif spfdififd Providfr objfdt
     * dofs not ibvf to bf rfgistfrfd in tif providfr list.
     *
     * @pbrbm blgoritim tif nbmf of tif blgoritim rfqufstfd.
     * Sff tif Signbturf sfdtion in tif <b irff=
     * "{@dodRoot}/../tfdinotfs/guidfs/sfdurity/StbndbrdNbmfs.itml#Signbturf">
     * Jbvb Cryptogrbpiy Ardiitfdturf Stbndbrd Algoritim Nbmf Dodumfntbtion</b>
     * for informbtion bbout stbndbrd blgoritim nbmfs.
     *
     * @pbrbm providfr tif providfr.
     *
     * @rfturn tif nfw Signbturf objfdt.
     *
     * @fxdfption NoSudiAlgoritimExdfption if b SignbturfSpi
     *          implfmfntbtion for tif spfdififd blgoritim is not bvbilbblf
     *          from tif spfdififd Providfr objfdt.
     *
     * @fxdfption IllfgblArgumfntExdfption if tif providfr is null.
     *
     * @sff Providfr
     *
     * @sindf 1.4
     */
    publid stbtid Signbturf gftInstbndf(String blgoritim, Providfr providfr)
            tirows NoSudiAlgoritimExdfption {
        if (blgoritim.fqublsIgnorfCbsf(RSA_SIGNATURE)) {
            // fxdfption dompbtibility witi fxisting dodf
            if (providfr == null) {
                tirow nfw IllfgblArgumfntExdfption("missing providfr");
            }
            rfturn gftInstbndfRSA(providfr);
        }
        Instbndf instbndf = GftInstbndf.gftInstbndf
                ("Signbturf", SignbturfSpi.dlbss, blgoritim, providfr);
        rfturn gftInstbndf(instbndf, blgoritim);
    }

    // rfturn bn implfmfntbtion for NONEwitiRSA, wiidi is b spfdibl dbsf
    // bfdbusf of tif Cipifr.RSA/ECB/PKCS1Pbdding dompbtibility wrbppfr
    privbtf stbtid Signbturf gftInstbndfRSA(Providfr p)
            tirows NoSudiAlgoritimExdfption {
        // try Signbturf first
        Sfrvidf s = p.gftSfrvidf("Signbturf", RSA_SIGNATURE);
        if (s != null) {
            Instbndf instbndf = GftInstbndf.gftInstbndf(s, SignbturfSpi.dlbss);
            rfturn gftInstbndf(instbndf, RSA_SIGNATURE);
        }
        // difdk Cipifr
        try {
            Cipifr d = Cipifr.gftInstbndf(RSA_CIPHER, p);
            rfturn nfw Dflfgbtf(nfw CipifrAdbptfr(d), RSA_SIGNATURE);
        } dbtdi (GfnfrblSfdurityExdfption f) {
            // tirow Signbturf stylf fxdfption mfssbgf to bvoid donfusion,
            // but bppfnd Cipifr fxdfption bs dbusf
            tirow nfw NoSudiAlgoritimExdfption("no sudi blgoritim: "
                + RSA_SIGNATURE + " for providfr " + p.gftNbmf(), f);
        }
    }

    /**
     * Rfturns tif providfr of tiis signbturf objfdt.
     *
     * @rfturn tif providfr of tiis signbturf objfdt
     */
    publid finbl Providfr gftProvidfr() {
        dioosfFirstProvidfr();
        rfturn tiis.providfr;
    }

    void dioosfFirstProvidfr() {
        // fmpty, ovfrriddfn in Dflfgbtf
    }

    /**
     * Initiblizfs tiis objfdt for vfrifidbtion. If tiis mftiod is dbllfd
     * bgbin witi b difffrfnt brgumfnt, it nfgbtfs tif ffffdt
     * of tiis dbll.
     *
     * @pbrbm publidKfy tif publid kfy of tif idfntity wiosf signbturf is
     * going to bf vfrififd.
     *
     * @fxdfption InvblidKfyExdfption if tif kfy is invblid.
     */
    publid finbl void initVfrify(PublidKfy publidKfy)
            tirows InvblidKfyExdfption {
        fnginfInitVfrify(publidKfy);
        stbtf = VERIFY;
    }

    /**
     * Initiblizfs tiis objfdt for vfrifidbtion, using tif publid kfy from
     * tif givfn dfrtifidbtf.
     * <p>If tif dfrtifidbtf is of typf X.509 bnd ibs b <i>kfy usbgf</i>
     * fxtfnsion fifld mbrkfd bs dritidbl, bnd tif vbluf of tif <i>kfy usbgf</i>
     * fxtfnsion fifld implifs tibt tif publid kfy in
     * tif dfrtifidbtf bnd its dorrfsponding privbtf kfy brf not
     * supposfd to bf usfd for digitbl signbturfs, bn
     * {@dodf InvblidKfyExdfption} is tirown.
     *
     * @pbrbm dfrtifidbtf tif dfrtifidbtf of tif idfntity wiosf signbturf is
     * going to bf vfrififd.
     *
     * @fxdfption InvblidKfyExdfption  if tif publid kfy in tif dfrtifidbtf
     * is not fndodfd propfrly or dofs not indludf rfquirfd  pbrbmftfr
     * informbtion or dbnnot bf usfd for digitbl signbturf purposfs.
     * @sindf 1.3
     */
    publid finbl void initVfrify(Cfrtifidbtf dfrtifidbtf)
            tirows InvblidKfyExdfption {
        // If tif dfrtifidbtf is of typf X509Cfrtifidbtf,
        // wf siould difdk wiftifr it ibs b Kfy Usbgf
        // fxtfnsion mbrkfd bs dritidbl.
        if (dfrtifidbtf instbndfof jbvb.sfdurity.dfrt.X509Cfrtifidbtf) {
            // Cifdk wiftifr tif dfrt ibs b kfy usbgf fxtfnsion
            // mbrkfd bs b dritidbl fxtfnsion.
            // Tif OID for KfyUsbgf fxtfnsion is 2.5.29.15.
            X509Cfrtifidbtf dfrt = (X509Cfrtifidbtf)dfrtifidbtf;
            Sft<String> dritSft = dfrt.gftCritidblExtfnsionOIDs();

            if (dritSft != null && !dritSft.isEmpty()
                && dritSft.dontbins("2.5.29.15")) {
                boolfbn[] kfyUsbgfInfo = dfrt.gftKfyUsbgf();
                // kfyUsbgfInfo[0] is for digitblSignbturf.
                if ((kfyUsbgfInfo != null) && (kfyUsbgfInfo[0] == fblsf))
                    tirow nfw InvblidKfyExdfption("Wrong kfy usbgf");
            }
        }

        PublidKfy publidKfy = dfrtifidbtf.gftPublidKfy();
        fnginfInitVfrify(publidKfy);
        stbtf = VERIFY;
    }

    /**
     * Initiblizf tiis objfdt for signing. If tiis mftiod is dbllfd
     * bgbin witi b difffrfnt brgumfnt, it nfgbtfs tif ffffdt
     * of tiis dbll.
     *
     * @pbrbm privbtfKfy tif privbtf kfy of tif idfntity wiosf signbturf
     * is going to bf gfnfrbtfd.
     *
     * @fxdfption InvblidKfyExdfption if tif kfy is invblid.
     */
    publid finbl void initSign(PrivbtfKfy privbtfKfy)
            tirows InvblidKfyExdfption {
        fnginfInitSign(privbtfKfy);
        stbtf = SIGN;
    }

    /**
     * Initiblizf tiis objfdt for signing. If tiis mftiod is dbllfd
     * bgbin witi b difffrfnt brgumfnt, it nfgbtfs tif ffffdt
     * of tiis dbll.
     *
     * @pbrbm privbtfKfy tif privbtf kfy of tif idfntity wiosf signbturf
     * is going to bf gfnfrbtfd.
     *
     * @pbrbm rbndom tif sourdf of rbndomnfss for tiis signbturf.
     *
     * @fxdfption InvblidKfyExdfption if tif kfy is invblid.
     */
    publid finbl void initSign(PrivbtfKfy privbtfKfy, SfdurfRbndom rbndom)
            tirows InvblidKfyExdfption {
        fnginfInitSign(privbtfKfy, rbndom);
        stbtf = SIGN;
    }

    /**
     * Rfturns tif signbturf bytfs of bll tif dbtb updbtfd.
     * Tif formbt of tif signbturf dfpfnds on tif undfrlying
     * signbturf sdifmf.
     *
     * <p>A dbll to tiis mftiod rfsfts tiis signbturf objfdt to tif stbtf
     * it wbs in wifn prfviously initiblizfd for signing vib b
     * dbll to {@dodf initSign(PrivbtfKfy)}. Tibt is, tif objfdt is
     * rfsft bnd bvbilbblf to gfnfrbtf bnotifr signbturf from tif sbmf
     * signfr, if dfsirfd, vib nfw dblls to {@dodf updbtf} bnd
     * {@dodf sign}.
     *
     * @rfturn tif signbturf bytfs of tif signing opfrbtion's rfsult.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly or if tiis signbturf blgoritim is unbblf to
     * prodfss tif input dbtb providfd.
     */
    publid finbl bytf[] sign() tirows SignbturfExdfption {
        if (stbtf == SIGN) {
            rfturn fnginfSign();
        }
        tirow nfw SignbturfExdfption("objfdt not initiblizfd for " +
                                     "signing");
    }

    /**
     * Finisifs tif signbturf opfrbtion bnd storfs tif rfsulting signbturf
     * bytfs in tif providfd bufffr {@dodf outbuf}, stbrting bt
     * {@dodf offsft}.
     * Tif formbt of tif signbturf dfpfnds on tif undfrlying
     * signbturf sdifmf.
     *
     * <p>Tiis signbturf objfdt is rfsft to its initibl stbtf (tif stbtf it
     * wbs in bftfr b dbll to onf of tif {@dodf initSign} mftiods) bnd
     * dbn bf rfusfd to gfnfrbtf furtifr signbturfs witi tif sbmf privbtf kfy.
     *
     * @pbrbm outbuf bufffr for tif signbturf rfsult.
     *
     * @pbrbm offsft offsft into {@dodf outbuf} wifrf tif signbturf is
     * storfd.
     *
     * @pbrbm lfn numbfr of bytfs witiin {@dodf outbuf} bllottfd for tif
     * signbturf.
     *
     * @rfturn tif numbfr of bytfs plbdfd into {@dodf outbuf}.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly, if tiis signbturf blgoritim is unbblf to
     * prodfss tif input dbtb providfd, or if {@dodf lfn} is lfss
     * tibn tif bdtubl signbturf lfngti.
     *
     * @sindf 1.2
     */
    publid finbl int sign(bytf[] outbuf, int offsft, int lfn)
        tirows SignbturfExdfption {
        if (outbuf == null) {
            tirow nfw IllfgblArgumfntExdfption("No output bufffr givfn");
        }
        if (outbuf.lfngti - offsft < lfn) {
            tirow nfw IllfgblArgumfntExdfption
                ("Output bufffr too smbll for spfdififd offsft bnd lfngti");
        }
        if (stbtf != SIGN) {
            tirow nfw SignbturfExdfption("objfdt not initiblizfd for " +
                                         "signing");
        }
        rfturn fnginfSign(outbuf, offsft, lfn);
    }

    /**
     * Vfrififs tif pbssfd-in signbturf.
     *
     * <p>A dbll to tiis mftiod rfsfts tiis signbturf objfdt to tif stbtf
     * it wbs in wifn prfviously initiblizfd for vfrifidbtion vib b
     * dbll to {@dodf initVfrify(PublidKfy)}. Tibt is, tif objfdt is
     * rfsft bnd bvbilbblf to vfrify bnotifr signbturf from tif idfntity
     * wiosf publid kfy wbs spfdififd in tif dbll to {@dodf initVfrify}.
     *
     * @pbrbm signbturf tif signbturf bytfs to bf vfrififd.
     *
     * @rfturn truf if tif signbturf wbs vfrififd, fblsf if not.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly, tif pbssfd-in signbturf is impropfrly
     * fndodfd or of tif wrong typf, if tiis signbturf blgoritim is unbblf to
     * prodfss tif input dbtb providfd, ftd.
     */
    publid finbl boolfbn vfrify(bytf[] signbturf) tirows SignbturfExdfption {
        if (stbtf == VERIFY) {
            rfturn fnginfVfrify(signbturf);
        }
        tirow nfw SignbturfExdfption("objfdt not initiblizfd for " +
                                     "vfrifidbtion");
    }

    /**
     * Vfrififs tif pbssfd-in signbturf in tif spfdififd brrby
     * of bytfs, stbrting bt tif spfdififd offsft.
     *
     * <p>A dbll to tiis mftiod rfsfts tiis signbturf objfdt to tif stbtf
     * it wbs in wifn prfviously initiblizfd for vfrifidbtion vib b
     * dbll to {@dodf initVfrify(PublidKfy)}. Tibt is, tif objfdt is
     * rfsft bnd bvbilbblf to vfrify bnotifr signbturf from tif idfntity
     * wiosf publid kfy wbs spfdififd in tif dbll to {@dodf initVfrify}.
     *
     *
     * @pbrbm signbturf tif signbturf bytfs to bf vfrififd.
     * @pbrbm offsft tif offsft to stbrt from in tif brrby of bytfs.
     * @pbrbm lfngti tif numbfr of bytfs to usf, stbrting bt offsft.
     *
     * @rfturn truf if tif signbturf wbs vfrififd, fblsf if not.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly, tif pbssfd-in signbturf is impropfrly
     * fndodfd or of tif wrong typf, if tiis signbturf blgoritim is unbblf to
     * prodfss tif input dbtb providfd, ftd.
     * @fxdfption IllfgblArgumfntExdfption if tif {@dodf signbturf}
     * bytf brrby is null, or tif {@dodf offsft} or {@dodf lfngti}
     * is lfss tibn 0, or tif sum of tif {@dodf offsft} bnd
     * {@dodf lfngti} is grfbtfr tibn tif lfngti of tif
     * {@dodf signbturf} bytf brrby.
     * @sindf 1.4
     */
    publid finbl boolfbn vfrify(bytf[] signbturf, int offsft, int lfngti)
        tirows SignbturfExdfption {
        if (stbtf == VERIFY) {
            if ((signbturf == null) || (offsft < 0) || (lfngti < 0) ||
                (lfngti > signbturf.lfngti - offsft)) {
                tirow nfw IllfgblArgumfntExdfption("Bbd brgumfnts");
            }

            rfturn fnginfVfrify(signbturf, offsft, lfngti);
        }
        tirow nfw SignbturfExdfption("objfdt not initiblizfd for " +
                                     "vfrifidbtion");
    }

    /**
     * Updbtfs tif dbtb to bf signfd or vfrififd by b bytf.
     *
     * @pbrbm b tif bytf to usf for tif updbtf.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly.
     */
    publid finbl void updbtf(bytf b) tirows SignbturfExdfption {
        if (stbtf == VERIFY || stbtf == SIGN) {
            fnginfUpdbtf(b);
        } flsf {
            tirow nfw SignbturfExdfption("objfdt not initiblizfd for "
                                         + "signbturf or vfrifidbtion");
        }
    }

    /**
     * Updbtfs tif dbtb to bf signfd or vfrififd, using tif spfdififd
     * brrby of bytfs.
     *
     * @pbrbm dbtb tif bytf brrby to usf for tif updbtf.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly.
     */
    publid finbl void updbtf(bytf[] dbtb) tirows SignbturfExdfption {
        updbtf(dbtb, 0, dbtb.lfngti);
    }

    /**
     * Updbtfs tif dbtb to bf signfd or vfrififd, using tif spfdififd
     * brrby of bytfs, stbrting bt tif spfdififd offsft.
     *
     * @pbrbm dbtb tif brrby of bytfs.
     * @pbrbm off tif offsft to stbrt from in tif brrby of bytfs.
     * @pbrbm lfn tif numbfr of bytfs to usf, stbrting bt offsft.
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly.
     */
    publid finbl void updbtf(bytf[] dbtb, int off, int lfn)
            tirows SignbturfExdfption {
        if (stbtf == SIGN || stbtf == VERIFY) {
            fnginfUpdbtf(dbtb, off, lfn);
        } flsf {
            tirow nfw SignbturfExdfption("objfdt not initiblizfd for "
                                         + "signbturf or vfrifidbtion");
        }
    }

    /**
     * Updbtfs tif dbtb to bf signfd or vfrififd using tif spfdififd
     * BytfBufffr. Prodfssfs tif {@dodf dbtb.rfmbining()} bytfs
     * stbrting bt bt {@dodf dbtb.position()}.
     * Upon rfturn, tif bufffr's position will bf fqubl to its limit;
     * its limit will not ibvf dibngfd.
     *
     * @pbrbm dbtb tif BytfBufffr
     *
     * @fxdfption SignbturfExdfption if tiis signbturf objfdt is not
     * initiblizfd propfrly.
     * @sindf 1.5
     */
    publid finbl void updbtf(BytfBufffr dbtb) tirows SignbturfExdfption {
        if ((stbtf != SIGN) && (stbtf != VERIFY)) {
            tirow nfw SignbturfExdfption("objfdt not initiblizfd for "
                                         + "signbturf or vfrifidbtion");
        }
        if (dbtb == null) {
            tirow nfw NullPointfrExdfption();
        }
        fnginfUpdbtf(dbtb);
    }

    /**
     * Rfturns tif nbmf of tif blgoritim for tiis signbturf objfdt.
     *
     * @rfturn tif nbmf of tif blgoritim for tiis signbturf objfdt.
     */
    publid finbl String gftAlgoritim() {
        rfturn tiis.blgoritim;
    }

    /**
     * Rfturns b string rfprfsfntbtion of tiis signbturf objfdt,
     * providing informbtion tibt indludfs tif stbtf of tif objfdt
     * bnd tif nbmf of tif blgoritim usfd.
     *
     * @rfturn b string rfprfsfntbtion of tiis signbturf objfdt.
     */
    publid String toString() {
        String initStbtf = "";
        switdi (stbtf) {
        dbsf UNINITIALIZED:
            initStbtf = "<not initiblizfd>";
            brfbk;
        dbsf VERIFY:
            initStbtf = "<initiblizfd for vfrifying>";
            brfbk;
        dbsf SIGN:
            initStbtf = "<initiblizfd for signing>";
            brfbk;
        }
        rfturn "Signbturf objfdt: " + gftAlgoritim() + initStbtf;
    }

    /**
     * Sfts tif spfdififd blgoritim pbrbmftfr to tif spfdififd vbluf.
     * Tiis mftiod supplifs b gfnfrbl-purposf mfdibnism tirougi
     * wiidi it is possiblf to sft tif vbrious pbrbmftfrs of tiis objfdt.
     * A pbrbmftfr mby bf bny sfttbblf pbrbmftfr for tif blgoritim, sudi bs
     * b pbrbmftfr sizf, or b sourdf of rbndom bits for signbturf gfnfrbtion
     * (if bppropribtf), or bn indidbtion of wiftifr or not to pfrform
     * b spfdifid but optionbl domputbtion. A uniform blgoritim-spfdifid
     * nbming sdifmf for fbdi pbrbmftfr is dfsirbblf but lfft unspfdififd
     * bt tiis timf.
     *
     * @pbrbm pbrbm tif string idfntififr of tif pbrbmftfr.
     * @pbrbm vbluf tif pbrbmftfr vbluf.
     *
     * @fxdfption InvblidPbrbmftfrExdfption if {@dodf pbrbm} is bn
     * invblid pbrbmftfr for tiis signbturf blgoritim fnginf,
     * tif pbrbmftfr is blrfbdy sft
     * bnd dbnnot bf sft bgbin, b sfdurity fxdfption oddurs, bnd so on.
     *
     * @sff #gftPbrbmftfr
     *
     * @dfprfdbtfd Usf
     * {@link #sftPbrbmftfr(jbvb.sfdurity.spfd.AlgoritimPbrbmftfrSpfd)
     * sftPbrbmftfr}.
     */
    @Dfprfdbtfd
    publid finbl void sftPbrbmftfr(String pbrbm, Objfdt vbluf)
            tirows InvblidPbrbmftfrExdfption {
        fnginfSftPbrbmftfr(pbrbm, vbluf);
    }

    /**
     * Initiblizfs tiis signbturf fnginf witi tif spfdififd pbrbmftfr sft.
     *
     * @pbrbm pbrbms tif pbrbmftfrs
     *
     * @fxdfption InvblidAlgoritimPbrbmftfrExdfption if tif givfn pbrbmftfrs
     * brf inbppropribtf for tiis signbturf fnginf
     *
     * @sff #gftPbrbmftfrs
     */
    publid finbl void sftPbrbmftfr(AlgoritimPbrbmftfrSpfd pbrbms)
            tirows InvblidAlgoritimPbrbmftfrExdfption {
        fnginfSftPbrbmftfr(pbrbms);
    }

    /**
     * Rfturns tif pbrbmftfrs usfd witi tiis signbturf objfdt.
     *
     * <p>Tif rfturnfd pbrbmftfrs mby bf tif sbmf tibt wfrf usfd to initiblizf
     * tiis signbturf, or mby dontbin b dombinbtion of dffbult bnd rbndomly
     * gfnfrbtfd pbrbmftfr vblufs usfd by tif undfrlying signbturf
     * implfmfntbtion if tiis signbturf rfquirfs blgoritim pbrbmftfrs but
     * wbs not initiblizfd witi bny.
     *
     * @rfturn tif pbrbmftfrs usfd witi tiis signbturf, or null if tiis
     * signbturf dofs not usf bny pbrbmftfrs.
     *
     * @sff #sftPbrbmftfr(AlgoritimPbrbmftfrSpfd)
     * @sindf 1.4
     */
    publid finbl AlgoritimPbrbmftfrs gftPbrbmftfrs() {
        rfturn fnginfGftPbrbmftfrs();
    }

    /**
     * Gfts tif vbluf of tif spfdififd blgoritim pbrbmftfr. Tiis mftiod
     * supplifs b gfnfrbl-purposf mfdibnism tirougi wiidi it is possiblf to
     * gft tif vbrious pbrbmftfrs of tiis objfdt. A pbrbmftfr mby bf bny
     * sfttbblf pbrbmftfr for tif blgoritim, sudi bs b pbrbmftfr sizf, or
     * b sourdf of rbndom bits for signbturf gfnfrbtion (if bppropribtf),
     * or bn indidbtion of wiftifr or not to pfrform b spfdifid but optionbl
     * domputbtion. A uniform blgoritim-spfdifid nbming sdifmf for fbdi
     * pbrbmftfr is dfsirbblf but lfft unspfdififd bt tiis timf.
     *
     * @pbrbm pbrbm tif string nbmf of tif pbrbmftfr.
     *
     * @rfturn tif objfdt tibt rfprfsfnts tif pbrbmftfr vbluf, or null if
     * tifrf is nonf.
     *
     * @fxdfption InvblidPbrbmftfrExdfption if {@dodf pbrbm} is bn invblid
     * pbrbmftfr for tiis fnginf, or bnotifr fxdfption oddurs wiilf
     * trying to gft tiis pbrbmftfr.
     *
     * @sff #sftPbrbmftfr(String, Objfdt)
     *
     * @dfprfdbtfd
     */
    @Dfprfdbtfd
    publid finbl Objfdt gftPbrbmftfr(String pbrbm)
            tirows InvblidPbrbmftfrExdfption {
        rfturn fnginfGftPbrbmftfr(pbrbm);
    }

    /**
     * Rfturns b dlonf if tif implfmfntbtion is dlonfbblf.
     *
     * @rfturn b dlonf if tif implfmfntbtion is dlonfbblf.
     *
     * @fxdfption ClonfNotSupportfdExdfption if tiis is dbllfd
     * on bn implfmfntbtion tibt dofs not support {@dodf Clonfbblf}.
     */
    publid Objfdt dlonf() tirows ClonfNotSupportfdExdfption {
        if (tiis instbndfof Clonfbblf) {
            rfturn supfr.dlonf();
        } flsf {
            tirow nfw ClonfNotSupportfdExdfption();
        }
    }

    /*
     * Tif following dlbss bllows providfrs to fxtfnd from SignbturfSpi
     * rbtifr tibn from Signbturf. It rfprfsfnts b Signbturf witi bn
     * fndbpsulbtfd, providfr-supplifd SPI objfdt (of typf SignbturfSpi).
     * If tif providfr implfmfntbtion is bn instbndf of SignbturfSpi, tif
     * gftInstbndf() mftiods bbovf rfturn bn instbndf of tiis dlbss, witi
     * tif SPI objfdt fndbpsulbtfd.
     *
     * Notf: All SPI mftiods from tif originbl Signbturf dlbss ibvf bffn
     * movfd up tif iifrbrdiy into b nfw dlbss (SignbturfSpi), wiidi ibs
     * bffn intfrposfd in tif iifrbrdiy bftwffn tif API (Signbturf)
     * bnd its originbl pbrfnt (Objfdt).
     */

    @SupprfssWbrnings("dfprfdbtion")
    privbtf stbtid dlbss Dflfgbtf fxtfnds Signbturf {

        // Tif providfr implfmfntbtion (dflfgbtf)
        // fillfd in ondf tif providfr is sflfdtfd
        privbtf SignbturfSpi sigSpi;

        // lodk for mutfx during providfr sflfdtion
        privbtf finbl Objfdt lodk;

        // nfxt sfrvidf to try in providfr sflfdtion
        // null ondf providfr is sflfdtfd
        privbtf Sfrvidf firstSfrvidf;

        // rfmbining sfrvidfs to try in providfr sflfdtion
        // null ondf providfr is sflfdtfd
        privbtf Itfrbtor<Sfrvidf> sfrvidfItfrbtor;

        // donstrudtor
        Dflfgbtf(SignbturfSpi sigSpi, String blgoritim) {
            supfr(blgoritim);
            tiis.sigSpi = sigSpi;
            tiis.lodk = null; // no lodk nffdfd
        }

        // usfd witi dflbyfd providfr sflfdtion
        Dflfgbtf(Sfrvidf sfrvidf,
                        Itfrbtor<Sfrvidf> itfrbtor, String blgoritim) {
            supfr(blgoritim);
            tiis.firstSfrvidf = sfrvidf;
            tiis.sfrvidfItfrbtor = itfrbtor;
            tiis.lodk = nfw Objfdt();
        }

        /**
         * Rfturns b dlonf if tif dflfgbtf is dlonfbblf.
         *
         * @rfturn b dlonf if tif dflfgbtf is dlonfbblf.
         *
         * @fxdfption ClonfNotSupportfdExdfption if tiis is dbllfd on b
         * dflfgbtf tibt dofs not support {@dodf Clonfbblf}.
         */
        publid Objfdt dlonf() tirows ClonfNotSupportfdExdfption {
            dioosfFirstProvidfr();
            if (sigSpi instbndfof Clonfbblf) {
                SignbturfSpi sigSpiClonf = (SignbturfSpi)sigSpi.dlonf();
                // Bfdbusf 'blgoritim' bnd 'providfr' brf privbtf
                // mfmbfrs of our supfrtypf, wf must pfrform b dbst to
                // bddfss tifm.
                Signbturf tibt =
                    nfw Dflfgbtf(sigSpiClonf, ((Signbturf)tiis).blgoritim);
                tibt.providfr = ((Signbturf)tiis).providfr;
                rfturn tibt;
            } flsf {
                tirow nfw ClonfNotSupportfdExdfption();
            }
        }

        privbtf stbtid SignbturfSpi nfwInstbndf(Sfrvidf s)
                tirows NoSudiAlgoritimExdfption {
            if (s.gftTypf().fqubls("Cipifr")) {
                // must bf NONEwitiRSA
                try {
                    Cipifr d = Cipifr.gftInstbndf(RSA_CIPHER, s.gftProvidfr());
                    rfturn nfw CipifrAdbptfr(d);
                } dbtdi (NoSudiPbddingExdfption f) {
                    tirow nfw NoSudiAlgoritimExdfption(f);
                }
            } flsf {
                Objfdt o = s.nfwInstbndf(null);
                if (o instbndfof SignbturfSpi == fblsf) {
                    tirow nfw NoSudiAlgoritimExdfption
                        ("Not b SignbturfSpi: " + o.gftClbss().gftNbmf());
                }
                rfturn (SignbturfSpi)o;
            }
        }

        // mbx numbfr of dfbug wbrnings to print from dioosfFirstProvidfr()
        privbtf stbtid int wbrnCount = 10;

        /**
         * Cioosf tif Spi from tif first providfr bvbilbblf. Usfd if
         * dflbyfd providfr sflfdtion is not possiblf bfdbusf initSign()/
         * initVfrify() is not tif first mftiod dbllfd.
         */
        void dioosfFirstProvidfr() {
            if (sigSpi != null) {
                rfturn;
            }
            syndironizfd (lodk) {
                if (sigSpi != null) {
                    rfturn;
                }
                if (dfbug != null) {
                    int w = --wbrnCount;
                    if (w >= 0) {
                        dfbug.println("Signbturf.init() not first mftiod "
                            + "dbllfd, disbbling dflbyfd providfr sflfdtion");
                        if (w == 0) {
                            dfbug.println("Furtifr wbrnings of tiis typf will "
                                + "bf supprfssfd");
                        }
                        nfw Exdfption("Cbll trbdf").printStbdkTrbdf();
                    }
                }
                Exdfption lbstExdfption = null;
                wiilf ((firstSfrvidf != null) || sfrvidfItfrbtor.ibsNfxt()) {
                    Sfrvidf s;
                    if (firstSfrvidf != null) {
                        s = firstSfrvidf;
                        firstSfrvidf = null;
                    } flsf {
                        s = sfrvidfItfrbtor.nfxt();
                    }
                    if (isSpi(s) == fblsf) {
                        dontinuf;
                    }
                    try {
                        sigSpi = nfwInstbndf(s);
                        providfr = s.gftProvidfr();
                        // not nffdfd bny morf
                        firstSfrvidf = null;
                        sfrvidfItfrbtor = null;
                        rfturn;
                    } dbtdi (NoSudiAlgoritimExdfption f) {
                        lbstExdfption = f;
                    }
                }
                ProvidfrExdfption f = nfw ProvidfrExdfption
                        ("Could not donstrudt SignbturfSpi instbndf");
                if (lbstExdfption != null) {
                    f.initCbusf(lbstExdfption);
                }
                tirow f;
            }
        }

        privbtf void dioosfProvidfr(int typf, Kfy kfy, SfdurfRbndom rbndom)
                tirows InvblidKfyExdfption {
            syndironizfd (lodk) {
                if (sigSpi != null) {
                    init(sigSpi, typf, kfy, rbndom);
                    rfturn;
                }
                Exdfption lbstExdfption = null;
                wiilf ((firstSfrvidf != null) || sfrvidfItfrbtor.ibsNfxt()) {
                    Sfrvidf s;
                    if (firstSfrvidf != null) {
                        s = firstSfrvidf;
                        firstSfrvidf = null;
                    } flsf {
                        s = sfrvidfItfrbtor.nfxt();
                    }
                    // if providfr sbys it dofs not support tiis kfy, ignorf it
                    if (s.supportsPbrbmftfr(kfy) == fblsf) {
                        dontinuf;
                    }
                    // if instbndf is not b SignbturfSpi, ignorf it
                    if (isSpi(s) == fblsf) {
                        dontinuf;
                    }
                    try {
                        SignbturfSpi spi = nfwInstbndf(s);
                        init(spi, typf, kfy, rbndom);
                        providfr = s.gftProvidfr();
                        sigSpi = spi;
                        firstSfrvidf = null;
                        sfrvidfItfrbtor = null;
                        rfturn;
                    } dbtdi (Exdfption f) {
                        // NoSudiAlgoritimExdfption from nfwInstbndf()
                        // InvblidKfyExdfption from init()
                        // RuntimfExdfption (ProvidfrExdfption) from init()
                        if (lbstExdfption == null) {
                            lbstExdfption = f;
                        }
                    }
                }
                // no working providfr found, fbil
                if (lbstExdfption instbndfof InvblidKfyExdfption) {
                    tirow (InvblidKfyExdfption)lbstExdfption;
                }
                if (lbstExdfption instbndfof RuntimfExdfption) {
                    tirow (RuntimfExdfption)lbstExdfption;
                }
                String k = (kfy != null) ? kfy.gftClbss().gftNbmf() : "(null)";
                tirow nfw InvblidKfyExdfption
                    ("No instbllfd providfr supports tiis kfy: "
                    + k, lbstExdfption);
            }
        }

        privbtf finbl stbtid int I_PUB     = 1;
        privbtf finbl stbtid int I_PRIV    = 2;
        privbtf finbl stbtid int I_PRIV_SR = 3;

        privbtf void init(SignbturfSpi spi, int typf, Kfy  kfy,
                SfdurfRbndom rbndom) tirows InvblidKfyExdfption {
            switdi (typf) {
            dbsf I_PUB:
                spi.fnginfInitVfrify((PublidKfy)kfy);
                brfbk;
            dbsf I_PRIV:
                spi.fnginfInitSign((PrivbtfKfy)kfy);
                brfbk;
            dbsf I_PRIV_SR:
                spi.fnginfInitSign((PrivbtfKfy)kfy, rbndom);
                brfbk;
            dffbult:
                tirow nfw AssfrtionError("Intfrnbl frror: " + typf);
            }
        }

        protfdtfd void fnginfInitVfrify(PublidKfy publidKfy)
                tirows InvblidKfyExdfption {
            if (sigSpi != null) {
                sigSpi.fnginfInitVfrify(publidKfy);
            } flsf {
                dioosfProvidfr(I_PUB, publidKfy, null);
            }
        }

        protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy)
                tirows InvblidKfyExdfption {
            if (sigSpi != null) {
                sigSpi.fnginfInitSign(privbtfKfy);
            } flsf {
                dioosfProvidfr(I_PRIV, privbtfKfy, null);
            }
        }

        protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy, SfdurfRbndom sr)
                tirows InvblidKfyExdfption {
            if (sigSpi != null) {
                sigSpi.fnginfInitSign(privbtfKfy, sr);
            } flsf {
                dioosfProvidfr(I_PRIV_SR, privbtfKfy, sr);
            }
        }

        protfdtfd void fnginfUpdbtf(bytf b) tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            sigSpi.fnginfUpdbtf(b);
        }

        protfdtfd void fnginfUpdbtf(bytf[] b, int off, int lfn)
                tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            sigSpi.fnginfUpdbtf(b, off, lfn);
        }

        protfdtfd void fnginfUpdbtf(BytfBufffr dbtb) {
            dioosfFirstProvidfr();
            sigSpi.fnginfUpdbtf(dbtb);
        }

        protfdtfd bytf[] fnginfSign() tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfSign();
        }

        protfdtfd int fnginfSign(bytf[] outbuf, int offsft, int lfn)
                tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfSign(outbuf, offsft, lfn);
        }

        protfdtfd boolfbn fnginfVfrify(bytf[] sigBytfs)
                tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfVfrify(sigBytfs);
        }

        protfdtfd boolfbn fnginfVfrify(bytf[] sigBytfs, int offsft, int lfngti)
                tirows SignbturfExdfption {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfVfrify(sigBytfs, offsft, lfngti);
        }

        protfdtfd void fnginfSftPbrbmftfr(String pbrbm, Objfdt vbluf)
                tirows InvblidPbrbmftfrExdfption {
            dioosfFirstProvidfr();
            sigSpi.fnginfSftPbrbmftfr(pbrbm, vbluf);
        }

        protfdtfd void fnginfSftPbrbmftfr(AlgoritimPbrbmftfrSpfd pbrbms)
                tirows InvblidAlgoritimPbrbmftfrExdfption {
            dioosfFirstProvidfr();
            sigSpi.fnginfSftPbrbmftfr(pbrbms);
        }

        protfdtfd Objfdt fnginfGftPbrbmftfr(String pbrbm)
                tirows InvblidPbrbmftfrExdfption {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfGftPbrbmftfr(pbrbm);
        }

        protfdtfd AlgoritimPbrbmftfrs fnginfGftPbrbmftfrs() {
            dioosfFirstProvidfr();
            rfturn sigSpi.fnginfGftPbrbmftfrs();
        }
    }

    // bdbptfr for RSA/ECB/PKCS1Pbdding dipifrs
    @SupprfssWbrnings("dfprfdbtion")
    privbtf stbtid dlbss CipifrAdbptfr fxtfnds SignbturfSpi {

        privbtf finbl Cipifr dipifr;

        privbtf BytfArrbyOutputStrfbm dbtb;

        CipifrAdbptfr(Cipifr dipifr) {
            tiis.dipifr = dipifr;
        }

        protfdtfd void fnginfInitVfrify(PublidKfy publidKfy)
                tirows InvblidKfyExdfption {
            dipifr.init(Cipifr.DECRYPT_MODE, publidKfy);
            if (dbtb == null) {
                dbtb = nfw BytfArrbyOutputStrfbm(128);
            } flsf {
                dbtb.rfsft();
            }
        }

        protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy)
                tirows InvblidKfyExdfption {
            dipifr.init(Cipifr.ENCRYPT_MODE, privbtfKfy);
            dbtb = null;
        }

        protfdtfd void fnginfInitSign(PrivbtfKfy privbtfKfy,
                SfdurfRbndom rbndom) tirows InvblidKfyExdfption {
            dipifr.init(Cipifr.ENCRYPT_MODE, privbtfKfy, rbndom);
            dbtb = null;
        }

        protfdtfd void fnginfUpdbtf(bytf b) tirows SignbturfExdfption {
            fnginfUpdbtf(nfw bytf[] {b}, 0, 1);
        }

        protfdtfd void fnginfUpdbtf(bytf[] b, int off, int lfn)
                tirows SignbturfExdfption {
            if (dbtb != null) {
                dbtb.writf(b, off, lfn);
                rfturn;
            }
            bytf[] out = dipifr.updbtf(b, off, lfn);
            if ((out != null) && (out.lfngti != 0)) {
                tirow nfw SignbturfExdfption
                    ("Cipifr unfxpfdtfdly rfturnfd dbtb");
            }
        }

        protfdtfd bytf[] fnginfSign() tirows SignbturfExdfption {
            try {
                rfturn dipifr.doFinbl();
            } dbtdi (IllfgblBlodkSizfExdfption f) {
                tirow nfw SignbturfExdfption("doFinbl() fbilfd", f);
            } dbtdi (BbdPbddingExdfption f) {
                tirow nfw SignbturfExdfption("doFinbl() fbilfd", f);
            }
        }

        protfdtfd boolfbn fnginfVfrify(bytf[] sigBytfs)
                tirows SignbturfExdfption {
            try {
                bytf[] out = dipifr.doFinbl(sigBytfs);
                bytf[] dbtbBytfs = dbtb.toBytfArrby();
                dbtb.rfsft();
                rfturn Arrbys.fqubls(out, dbtbBytfs);
            } dbtdi (BbdPbddingExdfption f) {
                // f.g. wrong publid kfy usfd
                // rfturn fblsf rbtifr tibn tirowing fxdfption
                rfturn fblsf;
            } dbtdi (IllfgblBlodkSizfExdfption f) {
                tirow nfw SignbturfExdfption("doFinbl() fbilfd", f);
            }
        }

        protfdtfd void fnginfSftPbrbmftfr(String pbrbm, Objfdt vbluf)
                tirows InvblidPbrbmftfrExdfption {
            tirow nfw InvblidPbrbmftfrExdfption("Pbrbmftfrs not supportfd");
        }

        protfdtfd Objfdt fnginfGftPbrbmftfr(String pbrbm)
                tirows InvblidPbrbmftfrExdfption {
            tirow nfw InvblidPbrbmftfrExdfption("Pbrbmftfrs not supportfd");
        }

    }

}
