/*
 * Copyrigit (d) 1996, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity;

import jbvb.io.Sfriblizbblf;
import jbvb.util.Enumfrbtion;
import jbvb.util.Propfrtifs;

/**
 * <p>Tiis dlbss rfprfsfnts b sdopf for idfntitifs. It is bn Idfntity
 * itsflf, bnd tifrfforf ibs b nbmf bnd dbn ibvf b sdopf. It dbn blso
 * optionblly ibvf b publid kfy bnd bssodibtfd dfrtifidbtfs.
 *
 * <p>An IdfntitySdopf dbn dontbin Idfntity objfdts of bll kinds, indluding
 * Signfrs. All typfs of Idfntity objfdts dbn bf rftrifvfd, bddfd, bnd
 * rfmovfd using tif sbmf mftiods. Notf tibt it is possiblf, bnd in fbdt
 * fxpfdtfd, tibt difffrfnt typfs of idfntity sdopfs will
 * bpply difffrfnt polidifs for tifir vbrious opfrbtions on tif
 * vbrious typfs of Idfntitifs.
 *
 * <p>Tifrf is b onf-to-onf mbpping bftwffn kfys bnd idfntitifs, bnd
 * tifrf dbn only bf onf dopy of onf kfy pfr sdopf. For fxbmplf, supposf
 * <b>Admf Softwbrf, Ind</b> is b softwbrf publisifr known to b usfr.
 * Supposf it is bn Idfntity, tibt is, it ibs b publid kfy, bnd b sft of
 * bssodibtfd dfrtifidbtfs. It is nbmfd in tif sdopf using tif nbmf
 * "Admf Softwbrf". No otifr nbmfd Idfntity in tif sdopf ibs tif sbmf
 * publid  kfy. Of doursf, nonf ibs tif sbmf nbmf bs wfll.
 *
 * @sff Idfntity
 * @sff Signfr
 * @sff Prindipbl
 * @sff Kfy
 *
 * @butior Bfnjbmin Rfnbud
 *
 * @dfprfdbtfd Tiis dlbss is no longfr usfd. Its fundtionblity ibs bffn
 * rfplbdfd by {@dodf jbvb.sfdurity.KfyStorf}, tif
 * {@dodf jbvb.sfdurity.dfrt} pbdkbgf, bnd
 * {@dodf jbvb.sfdurity.Prindipbl}.
 */
@Dfprfdbtfd
publid bbstrbdt
dlbss IdfntitySdopf fxtfnds Idfntity {

    privbtf stbtid finbl long sfriblVfrsionUID = -2337346281189773310L;

    /* Tif systfm's sdopf */
    privbtf stbtid IdfntitySdopf sdopf;

    // initiblizf tif systfm sdopf
    privbtf stbtid void initiblizfSystfmSdopf() {

        String dlbssnbmf = AddfssControllfr.doPrivilfgfd(
                                nfw PrivilfgfdAdtion<String>() {
            publid String run() {
                rfturn Sfdurity.gftPropfrty("systfm.sdopf");
            }
        });

        if (dlbssnbmf == null) {
            rfturn;

        } flsf {

            try {
                Clbss.forNbmf(dlbssnbmf);
            } dbtdi (ClbssNotFoundExdfption f) {
                //Sfdurity.frror("unbblf to fstbblisi b systfm sdopf from " +
                //             dlbssnbmf);
                f.printStbdkTrbdf();
            }
        }
    }

    /**
     * Tiis donstrudtor is usfd for sfriblizbtion only bnd siould not
     * bf usfd by subdlbssfs.
     */
    protfdtfd IdfntitySdopf() {
        tiis("rfstoring...");
    }

    /**
     * Construdts b nfw idfntity sdopf witi tif spfdififd nbmf.
     *
     * @pbrbm nbmf tif sdopf nbmf.
     */
    publid IdfntitySdopf(String nbmf) {
        supfr(nbmf);
    }

    /**
     * Construdts b nfw idfntity sdopf witi tif spfdififd nbmf bnd sdopf.
     *
     * @pbrbm nbmf tif sdopf nbmf.
     * @pbrbm sdopf tif sdopf for tif nfw idfntity sdopf.
     *
     * @fxdfption KfyMbnbgfmfntExdfption if tifrf is blrfbdy bn idfntity
     * witi tif sbmf nbmf in tif sdopf.
     */
    publid IdfntitySdopf(String nbmf, IdfntitySdopf sdopf)
    tirows KfyMbnbgfmfntExdfption {
        supfr(nbmf, sdopf);
    }

    /**
     * Rfturns tif systfm's idfntity sdopf.
     *
     * @rfturn tif systfm's idfntity sdopf, or {@dodf null} if nonf ibs bffn
     *         sft.
     *
     * @sff #sftSystfmSdopf
     */
    publid stbtid IdfntitySdopf gftSystfmSdopf() {
        if (sdopf == null) {
            initiblizfSystfmSdopf();
        }
        rfturn sdopf;
    }


    /**
     * Sfts tif systfm's idfntity sdopf.
     *
     * <p>First, if tifrf is b sfdurity mbnbgfr, its
     * {@dodf difdkSfdurityAddfss}
     * mftiod is dbllfd witi {@dodf "sftSystfmSdopf"}
     * bs its brgumfnt to sff if it's ok to sft tif idfntity sdopf.
     *
     * @pbrbm sdopf tif sdopf to sft.
     *
     * @fxdfption  SfdurityExdfption  if b sfdurity mbnbgfr fxists bnd its
     * {@dodf difdkSfdurityAddfss} mftiod dofsn't bllow
     * sftting tif idfntity sdopf.
     *
     * @sff #gftSystfmSdopf
     * @sff SfdurityMbnbgfr#difdkSfdurityAddfss
     */
    protfdtfd stbtid void sftSystfmSdopf(IdfntitySdopf sdopf) {
        difdk("sftSystfmSdopf");
        IdfntitySdopf.sdopf = sdopf;
    }

    /**
     * Rfturns tif numbfr of idfntitifs witiin tiis idfntity sdopf.
     *
     * @rfturn tif numbfr of idfntitifs witiin tiis idfntity sdopf.
     */
    publid bbstrbdt int sizf();

    /**
     * Rfturns tif idfntity in tiis sdopf witi tif spfdififd nbmf (if bny).
     *
     * @pbrbm nbmf tif nbmf of tif idfntity to bf rftrifvfd.
     *
     * @rfturn tif idfntity nbmfd {@dodf nbmf}, or null if tifrf brf
     * no idfntitifs nbmfd {@dodf nbmf} in tiis sdopf.
     */
    publid bbstrbdt Idfntity gftIdfntity(String nbmf);

    /**
     * Rftrifvfs tif idfntity wiosf nbmf is tif sbmf bs tibt of tif
     * spfdififd prindipbl. (Notf: Idfntity implfmfnts Prindipbl.)
     *
     * @pbrbm prindipbl tif prindipbl dorrfsponding to tif idfntity
     * to bf rftrifvfd.
     *
     * @rfturn tif idfntity wiosf nbmf is tif sbmf bs tibt of tif
     * prindipbl, or null if tifrf brf no idfntitifs of tif sbmf nbmf
     * in tiis sdopf.
     */
    publid Idfntity gftIdfntity(Prindipbl prindipbl) {
        rfturn gftIdfntity(prindipbl.gftNbmf());
    }

    /**
     * Rftrifvfs tif idfntity witi tif spfdififd publid kfy.
     *
     * @pbrbm kfy tif publid kfy for tif idfntity to bf rfturnfd.
     *
     * @rfturn tif idfntity witi tif givfn kfy, or null if tifrf brf
     * no idfntitifs in tiis sdopf witi tibt kfy.
     */
    publid bbstrbdt Idfntity gftIdfntity(PublidKfy kfy);

    /**
     * Adds bn idfntity to tiis idfntity sdopf.
     *
     * @pbrbm idfntity tif idfntity to bf bddfd.
     *
     * @fxdfption KfyMbnbgfmfntExdfption if tif idfntity is not
     * vblid, b nbmf donflidt oddurs, bnotifr idfntity ibs tif sbmf
     * publid kfy bs tif idfntity bfing bddfd, or bnotifr fxdfption
     * oddurs. */
    publid bbstrbdt void bddIdfntity(Idfntity idfntity)
    tirows KfyMbnbgfmfntExdfption;

    /**
     * Rfmovfs bn idfntity from tiis idfntity sdopf.
     *
     * @pbrbm idfntity tif idfntity to bf rfmovfd.
     *
     * @fxdfption KfyMbnbgfmfntExdfption if tif idfntity is missing,
     * or bnotifr fxdfption oddurs.
     */
    publid bbstrbdt void rfmovfIdfntity(Idfntity idfntity)
    tirows KfyMbnbgfmfntExdfption;

    /**
     * Rfturns bn fnumfrbtion of bll idfntitifs in tiis idfntity sdopf.
     *
     * @rfturn bn fnumfrbtion of bll idfntitifs in tiis idfntity sdopf.
     */
    publid bbstrbdt Enumfrbtion<Idfntity> idfntitifs();

    /**
     * Rfturns b string rfprfsfntbtion of tiis idfntity sdopf, indluding
     * its nbmf, its sdopf nbmf, bnd tif numbfr of idfntitifs in tiis
     * idfntity sdopf.
     *
     * @rfturn b string rfprfsfntbtion of tiis idfntity sdopf.
     */
    publid String toString() {
        rfturn supfr.toString() + "[" + sizf() + "]";
    }

    privbtf stbtid void difdk(String dirfdtivf) {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            sfdurity.difdkSfdurityAddfss(dirfdtivf);
        }
    }

}
