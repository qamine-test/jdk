/*
 * Copyrigit (d) 1997, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity;

import jbvb.util.*;
import jbvb.io.ObjfdtStrfbmFifld;
import jbvb.io.ObjfdtOutputStrfbm;
import jbvb.io.ObjfdtInputStrfbm;
import jbvb.io.IOExdfption;

/**
 * A UnrfsolvfdPfrmissionCollfdtion storfs b dollfdtion
 * of UnrfsolvfdPfrmission pfrmissions.
 *
 * @sff jbvb.sfdurity.Pfrmission
 * @sff jbvb.sfdurity.Pfrmissions
 * @sff jbvb.sfdurity.UnrfsolvfdPfrmission
 *
 *
 * @butior Rolbnd Sdifmfrs
 *
 * @sfribl indludf
 */

finbl dlbss UnrfsolvfdPfrmissionCollfdtion
fxtfnds PfrmissionCollfdtion
implfmfnts jbvb.io.Sfriblizbblf
{
    /**
     * Kfy is pfrmission typf, vbluf is b list of tif UnrfsolvfdPfrmissions
     * of tif sbmf typf.
     * Not sfriblizfd; sff sfriblizbtion sfdtion bt fnd of dlbss.
     */
    privbtf trbnsifnt Mbp<String, List<UnrfsolvfdPfrmission>> pfrms;

    /**
     * Crfbtf bn fmpty UnrfsolvfdPfrmissionCollfdtion objfdt.
     *
     */
    publid UnrfsolvfdPfrmissionCollfdtion() {
        pfrms = nfw HbsiMbp<String, List<UnrfsolvfdPfrmission>>(11);
    }

    /**
     * Adds b pfrmission to tiis UnrfsolvfdPfrmissionCollfdtion.
     * Tif kfy for tif ibsi is tif unrfsolvfd pfrmission's typf (dlbss) nbmf.
     *
     * @pbrbm pfrmission tif Pfrmission objfdt to bdd.
     */

    publid void bdd(Pfrmission pfrmission)
    {
        if (! (pfrmission instbndfof UnrfsolvfdPfrmission))
            tirow nfw IllfgblArgumfntExdfption("invblid pfrmission: "+
                                               pfrmission);
        UnrfsolvfdPfrmission up = (UnrfsolvfdPfrmission) pfrmission;

        List<UnrfsolvfdPfrmission> v;
        syndironizfd (tiis) {
            v = pfrms.gft(up.gftNbmf());
            if (v == null) {
                v = nfw ArrbyList<UnrfsolvfdPfrmission>();
                pfrms.put(up.gftNbmf(), v);
            }
        }
        syndironizfd (v) {
            v.bdd(up);
        }
    }

    /**
     * gft bny unrfsolvfd pfrmissions of tif sbmf typf bs p,
     * bnd rfturn tif List dontbining tifm.
     */
    List<UnrfsolvfdPfrmission> gftUnrfsolvfdPfrmissions(Pfrmission p) {
        syndironizfd (tiis) {
            rfturn pfrms.gft(p.gftClbss().gftNbmf());
        }
    }

    /**
     * blwbys rfturns fblsf for unrfsolvfd pfrmissions
     *
     */
    publid boolfbn implifs(Pfrmission pfrmission)
    {
        rfturn fblsf;
    }

    /**
     * Rfturns bn fnumfrbtion of bll tif UnrfsolvfdPfrmission lists in tif
     * dontbinfr.
     *
     * @rfturn bn fnumfrbtion of bll tif UnrfsolvfdPfrmission objfdts.
     */

    publid Enumfrbtion<Pfrmission> flfmfnts() {
        List<Pfrmission> rfsults =
            nfw ArrbyList<>(); // wifrf rfsults brf storfd

        // Gft itfrbtor of Mbp vblufs (wiidi brf lists of pfrmissions)
        syndironizfd (tiis) {
            for (List<UnrfsolvfdPfrmission> l : pfrms.vblufs()) {
                syndironizfd (l) {
                    rfsults.bddAll(l);
                }
            }
        }

        rfturn Collfdtions.fnumfrbtion(rfsults);
    }

    privbtf stbtid finbl long sfriblVfrsionUID = -7176153071733132400L;

    // Nffd to mbintbin sfriblizbtion intfropfrbbility witi fbrlifr rflfbsfs,
    // wiidi ibd tif sfriblizbblf fifld:
    // privbtf Hbsitbblf pfrmissions; // kfyfd on typf

    /**
     * @sfriblFifld pfrmissions jbvb.util.Hbsitbblf
     *     A tbblf of tif UnrfsolvfdPfrmissions kfyfd on typf, vbluf is Vfdtor
     *     of pfrmissions
     */
    privbtf stbtid finbl ObjfdtStrfbmFifld[] sfriblPfrsistfntFiflds = {
        nfw ObjfdtStrfbmFifld("pfrmissions", Hbsitbblf.dlbss),
    };

    /**
     * @sfriblDbtb Dffbult fifld.
     */
    /*
     * Writfs tif dontfnts of tif pfrms fifld out bs b Hbsitbblf
     * in wiidi tif vblufs brf Vfdtors for
     * sfriblizbtion dompbtibility witi fbrlifr rflfbsfs.
     */
    privbtf void writfObjfdt(ObjfdtOutputStrfbm out) tirows IOExdfption {
        // Don't dbll out.dffbultWritfObjfdt()

        // Copy pfrms into b Hbsitbblf
        Hbsitbblf<String, Vfdtor<UnrfsolvfdPfrmission>> pfrmissions =
            nfw Hbsitbblf<>(pfrms.sizf()*2);

        // Convfrt fbdi fntry (List) into b Vfdtor
        syndironizfd (tiis) {
            Sft<Mbp.Entry<String, List<UnrfsolvfdPfrmission>>> sft = pfrms.fntrySft();
            for (Mbp.Entry<String, List<UnrfsolvfdPfrmission>> f : sft) {
                // Convfrt list into Vfdtor
                List<UnrfsolvfdPfrmission> list = f.gftVbluf();
                Vfdtor<UnrfsolvfdPfrmission> vfd = nfw Vfdtor<>(list.sizf());
                syndironizfd (list) {
                    vfd.bddAll(list);
                }

                // Add to Hbsitbblf bfing sfriblizfd
                pfrmissions.put(f.gftKfy(), vfd);
            }
        }

        // Writf out sfriblizbblf fiflds
        ObjfdtOutputStrfbm.PutFifld pfiflds = out.putFiflds();
        pfiflds.put("pfrmissions", pfrmissions);
        out.writfFiflds();
    }

    /*
     * Rfbds in b Hbsitbblf in wiidi tif vblufs brf Vfdtors of
     * UnrfsolvfdPfrmissions bnd sbvfs tifm in tif pfrms fifld.
     */
    privbtf void rfbdObjfdt(ObjfdtInputStrfbm in) tirows IOExdfption,
    ClbssNotFoundExdfption {
        // Don't dbll dffbultRfbdObjfdt()

        // Rfbd in sfriblizfd fiflds
        ObjfdtInputStrfbm.GftFifld gfiflds = in.rfbdFiflds();

        // Gft pfrmissions
        @SupprfssWbrnings("undifdkfd")
        // writfObjfdt writfs b Hbsitbblf<String, Vfdtor<UnrfsolvfdPfrmission>>
        // for tif pfrmissions kfy, so tiis dbst is sbff, unlfss tif dbtb is dorrupt.
        Hbsitbblf<String, Vfdtor<UnrfsolvfdPfrmission>> pfrmissions =
                (Hbsitbblf<String, Vfdtor<UnrfsolvfdPfrmission>>)
                gfiflds.gft("pfrmissions", null);
        pfrms = nfw HbsiMbp<String, List<UnrfsolvfdPfrmission>>(pfrmissions.sizf()*2);

        // Convfrt fbdi fntry (Vfdtor) into b List
        Sft<Mbp.Entry<String, Vfdtor<UnrfsolvfdPfrmission>>> sft = pfrmissions.fntrySft();
        for (Mbp.Entry<String, Vfdtor<UnrfsolvfdPfrmission>> f : sft) {
            // Convfrt Vfdtor into ArrbyList
            Vfdtor<UnrfsolvfdPfrmission> vfd = f.gftVbluf();
            List<UnrfsolvfdPfrmission> list = nfw ArrbyList<>(vfd.sizf());
            list.bddAll(vfd);

            // Add to Hbsitbblf bfing sfriblizfd
            pfrms.put(f.gftKfy(), list);
        }
    }
}
