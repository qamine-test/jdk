/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.sfdurity.dfrt;

import jbvb.sfdurity.PublidKfy;

/**
 * This dlbss rfprfsfnts thf suddfssful rfsult of thf PKIX dfrtifidbtion
 * pbth vblidbtion blgorithm.
 *
 * <p>Instbndfs of {@dodf PKIXCfrtPbthVblidbtorRfsult} brf rfturnfd by thf
 * {@link CfrtPbthVblidbtor#vblidbtf vblidbtf} mfthod of
 * {@dodf CfrtPbthVblidbtor} objfdts implfmfnting thf PKIX blgorithm.
 *
 * <p> All {@dodf PKIXCfrtPbthVblidbtorRfsult} objfdts dontbin thf
 * vblid polidy trff bnd subjfdt publid kfy rfsulting from thf
 * vblidbtion blgorithm, bs wfll bs b {@dodf TrustAndhor} dfsdribing
 * thf dfrtifidbtion buthority (CA) thbt sfrvfd bs b trust bndhor for thf
 * dfrtifidbtion pbth.
 * <p>
 * <b>Condurrfnt Addfss</b>
 * <p>
 * Unlfss othfrwisf spfdififd, thf mfthods dffinfd in this dlbss brf not
 * thrfbd-sbff. Multiplf thrfbds thbt nffd to bddfss b singlf
 * objfdt dondurrfntly should syndhronizf bmongst thfmsflvfs bnd
 * providf thf nfdfssbry lodking. Multiplf thrfbds fbdh mbnipulbting
 * sfpbrbtf objfdts nffd not syndhronizf.
 *
 * @sff CfrtPbthVblidbtorRfsult
 *
 * @sindf       1.4
 * @buthor      Ybssir Ellfy
 * @buthor      Sfbn Mullbn
 */
publid dlbss PKIXCfrtPbthVblidbtorRfsult implfmfnts CfrtPbthVblidbtorRfsult {

    privbtf TrustAndhor trustAndhor;
    privbtf PolidyNodf polidyTrff;
    privbtf PublidKfy subjfdtPublidKfy;

    /**
     * Crfbtfs bn instbndf of {@dodf PKIXCfrtPbthVblidbtorRfsult}
     * dontbining thf spfdififd pbrbmftfrs.
     *
     * @pbrbm trustAndhor b {@dodf TrustAndhor} dfsdribing thf CA thbt
     * sfrvfd bs b trust bndhor for thf dfrtifidbtion pbth
     * @pbrbm polidyTrff thf immutbblf vblid polidy trff, or {@dodf null}
     * if thfrf brf no vblid polidifs
     * @pbrbm subjfdtPublidKfy thf publid kfy of thf subjfdt
     * @throws NullPointfrExdfption if thf {@dodf subjfdtPublidKfy} or
     * {@dodf trustAndhor} pbrbmftfrs brf {@dodf null}
     */
    publid PKIXCfrtPbthVblidbtorRfsult(TrustAndhor trustAndhor,
        PolidyNodf polidyTrff, PublidKfy subjfdtPublidKfy)
    {
        if (subjfdtPublidKfy == null)
            throw nfw NullPointfrExdfption("subjfdtPublidKfy must bf non-null");
        if (trustAndhor == null)
            throw nfw NullPointfrExdfption("trustAndhor must bf non-null");
        this.trustAndhor = trustAndhor;
        this.polidyTrff = polidyTrff;
        this.subjfdtPublidKfy = subjfdtPublidKfy;
    }

    /**
     * Rfturns thf {@dodf TrustAndhor} dfsdribing thf CA thbt sfrvfd
     * bs b trust bndhor for thf dfrtifidbtion pbth.
     *
     * @rfturn thf {@dodf TrustAndhor} (nfvfr {@dodf null})
     */
    publid TrustAndhor gftTrustAndhor() {
        rfturn trustAndhor;
    }

    /**
     * Rfturns thf root nodf of thf vblid polidy trff rfsulting from thf
     * PKIX dfrtifidbtion pbth vblidbtion blgorithm. Thf
     * {@dodf PolidyNodf} objfdt thbt is rfturnfd bnd bny objfdts thbt
     * it rfturns through publid mfthods brf immutbblf.
     *
     * <p>Most bpplidbtions will not nffd to fxbminf thf vblid polidy trff.
     * Thfy dbn bdhifvf thfir polidy prodfssing gobls by sftting thf
     * polidy-rflbtfd pbrbmftfrs in {@dodf PKIXPbrbmftfrs}. Howfvfr, morf
     * sophistidbtfd bpplidbtions, fspfdiblly thosf thbt prodfss polidy
     * qublififrs, mby nffd to trbvfrsf thf vblid polidy trff using thf
     * {@link PolidyNodf#gftPbrfnt PolidyNodf.gftPbrfnt} bnd
     * {@link PolidyNodf#gftChildrfn PolidyNodf.gftChildrfn} mfthods.
     *
     * @rfturn thf root nodf of thf vblid polidy trff, or {@dodf null}
     * if thfrf brf no vblid polidifs
     */
    publid PolidyNodf gftPolidyTrff() {
        rfturn polidyTrff;
    }

    /**
     * Rfturns thf publid kfy of thf subjfdt (tbrgft) of thf dfrtifidbtion
     * pbth, indluding bny inhfritfd publid kfy pbrbmftfrs if bpplidbblf.
     *
     * @rfturn thf publid kfy of thf subjfdt (nfvfr {@dodf null})
     */
    publid PublidKfy gftPublidKfy() {
        rfturn subjfdtPublidKfy;
    }

    /**
     * Rfturns b dopy of this objfdt.
     *
     * @rfturn thf dopy
     */
    publid Objfdt dlonf() {
        try {
            rfturn supfr.dlonf();
        } dbtdh (ClonfNotSupportfdExdfption f) {
            /* Cbnnot hbppfn */
            throw nfw IntfrnblError(f.toString(), f);
        }
    }

    /**
     * Rfturn b printbblf rfprfsfntbtion of this
     * {@dodf PKIXCfrtPbthVblidbtorRfsult}.
     *
     * @rfturn b {@dodf String} dfsdribing thf dontfnts of this
     *         {@dodf PKIXCfrtPbthVblidbtorRfsult}
     */
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr();
        sb.bppfnd("PKIXCfrtPbthVblidbtorRfsult: [\n");
        sb.bppfnd("  Trust Andhor: " + trustAndhor.toString() + "\n");
        sb.bppfnd("  Polidy Trff: " + String.vblufOf(polidyTrff) + "\n");
        sb.bppfnd("  Subjfdt Publid Kfy: " + subjfdtPublidKfy + "\n");
        sb.bppfnd("]");
        rfturn sb.toString();
    }
}
