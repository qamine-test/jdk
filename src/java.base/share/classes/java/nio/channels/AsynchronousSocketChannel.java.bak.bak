/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.dibnnfls;

import jbvb.nio.dibnnfls.spi.*;
import jbvb.util.dondurrfnt.TimfUnit;
import jbvb.util.dondurrfnt.Futurf;
import jbvb.io.IOExdfption;
import jbvb.nft.SodkftOption;
import jbvb.nft.SodkftAddrfss;
import jbvb.nio.BytfBufffr;

/**
 * An bsyndironous dibnnfl for strfbm-orifntfd donnfdting sodkfts.
 *
 * <p> Asyndironous sodkft dibnnfls brf drfbtfd in onf of two wbys. A nfwly-drfbtfd
 * {@dodf AsyndironousSodkftCibnnfl} is drfbtfd by invoking onf of tif {@link
 * #opfn opfn} mftiods dffinfd by tiis dlbss. A nfwly-drfbtfd dibnnfl is opfn but
 * not yft donnfdtfd. A donnfdtfd {@dodf AsyndironousSodkftCibnnfl} is drfbtfd
 * wifn b donnfdtion is mbdf to tif sodkft of bn {@link AsyndironousSfrvfrSodkftCibnnfl}.
 * It is not possiblf to drfbtf bn bsyndironous sodkft dibnnfl for bn brbitrbry,
 * prf-fxisting {@link jbvb.nft.Sodkft sodkft}.
 *
 * <p> A nfwly-drfbtfd dibnnfl is donnfdtfd by invoking its {@link #donnfdt donnfdt}
 * mftiod; ondf donnfdtfd, b dibnnfl rfmbins donnfdtfd until it is dlosfd.  Wiftifr
 * or not b sodkft dibnnfl is donnfdtfd mby bf dftfrminfd by invoking its {@link
 * #gftRfmotfAddrfss gftRfmotfAddrfss} mftiod. An bttfmpt to invokf bn I/O
 * opfrbtion upon bn undonnfdtfd dibnnfl will dbusf b {@link NotYftConnfdtfdExdfption}
 * to bf tirown.
 *
 * <p> Cibnnfls of tiis typf brf sbff for usf by multiplf dondurrfnt tirfbds.
 * Tify support dondurrfnt rfbding bnd writing, tiougi bt most onf rfbd opfrbtion
 * bnd onf writf opfrbtion dbn bf outstbnding bt bny timf.
 * If b tirfbd initibtfs b rfbd opfrbtion bfforf b prfvious rfbd opfrbtion ibs
 * domplftfd tifn b {@link RfbdPfndingExdfption} will bf tirown. Similbrly, bn
 * bttfmpt to initibtf b writf opfrbtion bfforf b prfvious writf ibs domplftfd
 * will tirow b {@link WritfPfndingExdfption}.
 *
 * <p> Sodkft options brf donfigurfd using tif {@link #sftOption(SodkftOption,Objfdt)
 * sftOption} mftiod. Asyndironous sodkft dibnnfls support tif following options:
 * <blodkquotf>
 * <tbblf bordfr summbry="Sodkft options">
 *   <tr>
 *     <ti>Option Nbmf</ti>
 *     <ti>Dfsdription</ti>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_SNDBUF SO_SNDBUF} </td>
 *     <td> Tif sizf of tif sodkft sfnd bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_RCVBUF SO_RCVBUF} </td>
 *     <td> Tif sizf of tif sodkft rfdfivf bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_KEEPALIVE SO_KEEPALIVE} </td>
 *     <td> Kffp donnfdtion blivf </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_REUSEADDR SO_REUSEADDR} </td>
 *     <td> Rf-usf bddrfss </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#TCP_NODELAY TCP_NODELAY} </td>
 *     <td> Disbblf tif Nbglf blgoritim </td>
 *   </tr>
 * </tbblf>
 * </blodkquotf>
 * Additionbl (implfmfntbtion spfdifid) options mby blso bf supportfd.
 *
 * <i2>Timfouts</i2>
 *
 * <p> Tif {@link #rfbd(BytfBufffr,long,TimfUnit,Objfdt,ComplftionHbndlfr) rfbd}
 * bnd {@link #writf(BytfBufffr,long,TimfUnit,Objfdt,ComplftionHbndlfr) writf}
 * mftiods dffinfd by tiis dlbss bllow b timfout to bf spfdififd wifn initibting
 * b rfbd or writf opfrbtion. If tif timfout flbpsfs bfforf bn opfrbtion domplftfs
 * tifn tif opfrbtion domplftfs witi tif fxdfption {@link
 * IntfrruptfdByTimfoutExdfption}. A timfout mby lfbvf tif dibnnfl, or tif
 * undfrlying donnfdtion, in bn indonsistfnt stbtf. Wifrf tif implfmfntbtion
 * dbnnot gubrbntff tibt bytfs ibvf not bffn rfbd from tif dibnnfl tifn it puts
 * tif dibnnfl into bn implfmfntbtion spfdifid <fm>frror stbtf</fm>. A subsfqufnt
 * bttfmpt to initibtf b {@dodf rfbd} opfrbtion dbusfs bn unspfdififd runtimf
 * fxdfption to bf tirown. Similbrly if b {@dodf writf} opfrbtion timfs out bnd
 * tif implfmfntbtion dbnnot gubrbntff bytfs ibvf not bffn writtfn to tif
 * dibnnfl tifn furtifr bttfmpts to {@dodf writf} to tif dibnnfl dbusf bn
 * unspfdififd runtimf fxdfption to bf tirown. Wifn b timfout flbpsfs tifn tif
 * stbtf of tif {@link BytfBufffr}, or tif sfqufndf of bufffrs, for tif I/O
 * opfrbtion is not dffinfd. Bufffrs siould bf disdbrdfd or bt lfbst dbrf must
 * bf tbkfn to fnsurf tibt tif bufffrs brf not bddfssfd wiilf tif dibnnfl rfmbins
 * opfn. All mftiods tibt bddfpt timfout pbrbmftfrs trfbt vblufs lfss tibn or
 * fqubl to zfro to mfbn tibt tif I/O opfrbtion dofs not timfout.
 *
 * @sindf 1.7
 */

publid bbstrbdt dlbss AsyndironousSodkftCibnnfl
    implfmfnts AsyndironousBytfCibnnfl, NftworkCibnnfl
{
    privbtf finbl AsyndironousCibnnflProvidfr providfr;

    /**
     * Initiblizfs b nfw instbndf of tiis dlbss.
     *
     * @pbrbm  providfr
     *         Tif providfr tibt drfbtfd tiis dibnnfl
     */
    protfdtfd AsyndironousSodkftCibnnfl(AsyndironousCibnnflProvidfr providfr) {
        tiis.providfr = providfr;
    }

    /**
     * Rfturns tif providfr tibt drfbtfd tiis dibnnfl.
     *
     * @rfturn  Tif providfr tibt drfbtfd tiis dibnnfl
     */
    publid finbl AsyndironousCibnnflProvidfr providfr() {
        rfturn providfr;
    }

    /**
     * Opfns bn bsyndironous sodkft dibnnfl.
     *
     * <p> Tif nfw dibnnfl is drfbtfd by invoking tif {@link
     * AsyndironousCibnnflProvidfr#opfnAsyndironousSodkftCibnnfl
     * opfnAsyndironousSodkftCibnnfl} mftiod on tif {@link
     * AsyndironousCibnnflProvidfr} tibt drfbtfd tif group. If tif group pbrbmftfr
     * is {@dodf null} tifn tif rfsulting dibnnfl is drfbtfd by tif systfm-widf
     * dffbult providfr, bnd bound to tif <fm>dffbult group</fm>.
     *
     * @pbrbm   group
     *          Tif group to wiidi tif nfwly donstrudtfd dibnnfl siould bf bound,
     *          or {@dodf null} for tif dffbult group
     *
     * @rfturn  A nfw bsyndironous sodkft dibnnfl
     *
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group is siutdown
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid stbtid AsyndironousSodkftCibnnfl opfn(AsyndironousCibnnflGroup group)
        tirows IOExdfption
    {
        AsyndironousCibnnflProvidfr providfr = (group == null) ?
            AsyndironousCibnnflProvidfr.providfr() : group.providfr();
        rfturn providfr.opfnAsyndironousSodkftCibnnfl(group);
    }

    /**
     * Opfns bn bsyndironous sodkft dibnnfl.
     *
     * <p> Tiis mftiod rfturns bn bsyndironous sodkft dibnnfl tibt is bound to
     * tif <fm>dffbult group</fm>.Tiis mftiod is fquivblfnt to fvblubting tif
     * fxprfssion:
     * <blodkquotf><prf>
     * opfn((AsyndironousCibnnflGroup)null);
     * </prf></blodkquotf>
     *
     * @rfturn  A nfw bsyndironous sodkft dibnnfl
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid stbtid AsyndironousSodkftCibnnfl opfn()
        tirows IOExdfption
    {
        rfturn opfn(null);
    }


    // -- sodkft options bnd rflbtfd --

    /**
     * @tirows  ConnfdtionPfndingExdfption
     *          If b donnfdtion opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  AlrfbdyBoundExdfption               {@inifritDod}
     * @tirows  UnsupportfdAddrfssTypfExdfption     {@inifritDod}
     * @tirows  ClosfdCibnnflExdfption              {@inifritDod}
     * @tirows  IOExdfption                         {@inifritDod}
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd bnd its
     *          {@link SfdurityMbnbgfr#difdkListfn difdkListfn} mftiod dfnifs
     *          tif opfrbtion
     */
    @Ovfrridf
    publid bbstrbdt AsyndironousSodkftCibnnfl bind(SodkftAddrfss lodbl)
        tirows IOExdfption;

    /**
     * @tirows  IllfgblArgumfntExdfption                {@inifritDod}
     * @tirows  ClosfdCibnnflExdfption                  {@inifritDod}
     * @tirows  IOExdfption                             {@inifritDod}
     */
    @Ovfrridf
    publid bbstrbdt <T> AsyndironousSodkftCibnnfl sftOption(SodkftOption<T> nbmf, T vbluf)
        tirows IOExdfption;

    /**
     * Siutdown tif donnfdtion for rfbding witiout dlosing tif dibnnfl.
     *
     * <p> Ondf siutdown for rfbding tifn furtifr rfbds on tif dibnnfl will
     * rfturn {@dodf -1}, tif fnd-of-strfbm indidbtion. If tif input sidf of tif
     * donnfdtion is blrfbdy siutdown tifn invoking tiis mftiod ibs no ffffdt.
     * Tif ffffdt on bn outstbnding rfbd opfrbtion is systfm dfpfndfnt bnd
     * tifrfforf not spfdififd. Tif ffffdt, if bny, wifn tifrf is dbtb in tif
     * sodkft rfdfivf bufffr tibt ibs not bffn rfbd, or dbtb brrivfs subsfqufntly,
     * is blso systfm dfpfndfnt.
     *
     * @rfturn  Tif dibnnfl
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt AsyndironousSodkftCibnnfl siutdownInput() tirows IOExdfption;

    /**
     * Siutdown tif donnfdtion for writing witiout dlosing tif dibnnfl.
     *
     * <p> Ondf siutdown for writing tifn furtifr bttfmpts to writf to tif
     * dibnnfl will tirow {@link ClosfdCibnnflExdfption}. If tif output sidf of
     * tif donnfdtion is blrfbdy siutdown tifn invoking tiis mftiod ibs no
     * ffffdt. Tif ffffdt on bn outstbnding writf opfrbtion is systfm dfpfndfnt
     * bnd tifrfforf not spfdififd.
     *
     * @rfturn  Tif dibnnfl
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt AsyndironousSodkftCibnnfl siutdownOutput() tirows IOExdfption;

    // -- stbtf --

    /**
     * Rfturns tif rfmotf bddrfss to wiidi tiis dibnnfl's sodkft is donnfdtfd.
     *
     * <p> Wifrf tif dibnnfl is bound bnd donnfdtfd to bn Intfrnft Protodol
     * sodkft bddrfss tifn tif rfturn vbluf from tiis mftiod is of typf {@link
     * jbvb.nft.InftSodkftAddrfss}.
     *
     * @rfturn  Tif rfmotf bddrfss; {@dodf null} if tif dibnnfl's sodkft is not
     *          donnfdtfd
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tif dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid bbstrbdt SodkftAddrfss gftRfmotfAddrfss() tirows IOExdfption;

    // -- bsyndironous opfrbtions --

    /**
     * Connfdts tiis dibnnfl.
     *
     * <p> Tiis mftiod initibtfs bn opfrbtion to donnfdt tiis dibnnfl. Tif
     * {@dodf ibndlfr} pbrbmftfr is b domplftion ibndlfr tibt is invokfd wifn
     * tif donnfdtion is suddfssfully fstbblisifd or donnfdtion dbnnot bf
     * fstbblisifd. If tif donnfdtion dbnnot bf fstbblisifd tifn tif dibnnfl is
     * dlosfd.
     *
     * <p> Tiis mftiod pfrforms fxbdtly tif sbmf sfdurity difdks bs tif {@link
     * jbvb.nft.Sodkft} dlbss.  Tibt is, if b sfdurity mbnbgfr ibs bffn
     * instbllfd tifn tiis mftiod vfrififs tibt its {@link
     * jbvb.lbng.SfdurityMbnbgfr#difdkConnfdt difdkConnfdt} mftiod pfrmits
     * donnfdting to tif bddrfss bnd port numbfr of tif givfn rfmotf fndpoint.
     *
     * @pbrbm   <A>
     *          Tif typf of tif bttbdimfnt
     * @pbrbm   rfmotf
     *          Tif rfmotf bddrfss to wiidi tiis dibnnfl is to bf donnfdtfd
     * @pbrbm   bttbdimfnt
     *          Tif objfdt to bttbdi to tif I/O opfrbtion; dbn bf {@dodf null}
     * @pbrbm   ibndlfr
     *          Tif ibndlfr for donsuming tif rfsult
     *
     * @tirows  UnrfsolvfdAddrfssExdfption
     *          If tif givfn rfmotf bddrfss is not fully rfsolvfd
     * @tirows  UnsupportfdAddrfssTypfExdfption
     *          If tif typf of tif givfn rfmotf bddrfss is not supportfd
     * @tirows  AlrfbdyConnfdtfdExdfption
     *          If tiis dibnnfl is blrfbdy donnfdtfd
     * @tirows  ConnfdtionPfndingExdfption
     *          If b donnfdtion opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd
     *          bnd it dofs not pfrmit bddfss to tif givfn rfmotf fndpoint
     *
     * @sff #gftRfmotfAddrfss
     */
    publid bbstrbdt <A> void donnfdt(SodkftAddrfss rfmotf,
                                     A bttbdimfnt,
                                     ComplftionHbndlfr<Void,? supfr A> ibndlfr);

    /**
     * Connfdts tiis dibnnfl.
     *
     * <p> Tiis mftiod initibtfs bn opfrbtion to donnfdt tiis dibnnfl. Tiis
     * mftiod bfibvfs in fxbdtly tif sbmf mbnnfr bs tif {@link
     * #donnfdt(SodkftAddrfss, Objfdt, ComplftionHbndlfr)} mftiod fxdfpt tibt
     * instfbd of spfdifying b domplftion ibndlfr, tiis mftiod rfturns b {@dodf
     * Futurf} rfprfsfnting tif pfnding rfsult. Tif {@dodf Futurf}'s {@link
     * Futurf#gft() gft} mftiod rfturns {@dodf null} on suddfssful domplftion.
     *
     * @pbrbm   rfmotf
     *          Tif rfmotf bddrfss to wiidi tiis dibnnfl is to bf donnfdtfd
     *
     * @rfturn  A {@dodf Futurf} objfdt rfprfsfnting tif pfnding rfsult
     *
     * @tirows  UnrfsolvfdAddrfssExdfption
     *          If tif givfn rfmotf bddrfss is not fully rfsolvfd
     * @tirows  UnsupportfdAddrfssTypfExdfption
     *          If tif typf of tif givfn rfmotf bddrfss is not supportfd
     * @tirows  AlrfbdyConnfdtfdExdfption
     *          If tiis dibnnfl is blrfbdy donnfdtfd
     * @tirows  ConnfdtionPfndingExdfption
     *          If b donnfdtion opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd
     *          bnd it dofs not pfrmit bddfss to tif givfn rfmotf fndpoint
     */
    publid bbstrbdt Futurf<Void> donnfdt(SodkftAddrfss rfmotf);

    /**
     * Rfbds b sfqufndf of bytfs from tiis dibnnfl into tif givfn bufffr.
     *
     * <p> Tiis mftiod initibtfs bn bsyndironous rfbd opfrbtion to rfbd b
     * sfqufndf of bytfs from tiis dibnnfl into tif givfn bufffr. Tif {@dodf
     * ibndlfr} pbrbmftfr is b domplftion ibndlfr tibt is invokfd wifn tif rfbd
     * opfrbtion domplftfs (or fbils). Tif rfsult pbssfd to tif domplftion
     * ibndlfr is tif numbfr of bytfs rfbd or {@dodf -1} if no bytfs dould bf
     * rfbd bfdbusf tif dibnnfl ibs rfbdifd fnd-of-strfbm.
     *
     * <p> If b timfout is spfdififd bnd tif timfout flbpsfs bfforf tif opfrbtion
     * domplftfs tifn tif opfrbtion domplftfs witi tif fxdfption {@link
     * IntfrruptfdByTimfoutExdfption}. Wifrf b timfout oddurs, bnd tif
     * implfmfntbtion dbnnot gubrbntff tibt bytfs ibvf not bffn rfbd, or will not
     * bf rfbd from tif dibnnfl into tif givfn bufffr, tifn furtifr bttfmpts to
     * rfbd from tif dibnnfl will dbusf bn unspfdifid runtimf fxdfption to bf
     * tirown.
     *
     * <p> Otifrwisf tiis mftiod works in tif sbmf mbnnfr bs tif {@link
     * AsyndironousBytfCibnnfl#rfbd(BytfBufffr,Objfdt,ComplftionHbndlfr)}
     * mftiod.
     *
     * @pbrbm   <A>
     *          Tif typf of tif bttbdimfnt
     * @pbrbm   dst
     *          Tif bufffr into wiidi bytfs brf to bf trbnsffrrfd
     * @pbrbm   timfout
     *          Tif mbximum timf for tif I/O opfrbtion to domplftf
     * @pbrbm   unit
     *          Tif timf unit of tif {@dodf timfout} brgumfnt
     * @pbrbm   bttbdimfnt
     *          Tif objfdt to bttbdi to tif I/O opfrbtion; dbn bf {@dodf null}
     * @pbrbm   ibndlfr
     *          Tif ibndlfr for donsuming tif rfsult
     *
     * @tirows  IllfgblArgumfntExdfption
     *          If tif bufffr is rfbd-only
     * @tirows  RfbdPfndingExdfption
     *          If b rfbd opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    publid bbstrbdt <A> void rfbd(BytfBufffr dst,
                                  long timfout,
                                  TimfUnit unit,
                                  A bttbdimfnt,
                                  ComplftionHbndlfr<Intfgfr,? supfr A> ibndlfr);

    /**
     * @tirows  IllfgblArgumfntExdfption        {@inifritDod}
     * @tirows  RfbdPfndingExdfption            {@inifritDod}
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    @Ovfrridf
    publid finbl <A> void rfbd(BytfBufffr dst,
                               A bttbdimfnt,
                               ComplftionHbndlfr<Intfgfr,? supfr A> ibndlfr)
    {
        rfbd(dst, 0L, TimfUnit.MILLISECONDS, bttbdimfnt, ibndlfr);
    }

    /**
     * @tirows  IllfgblArgumfntExdfption        {@inifritDod}
     * @tirows  RfbdPfndingExdfption            {@inifritDod}
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     */
    @Ovfrridf
    publid bbstrbdt Futurf<Intfgfr> rfbd(BytfBufffr dst);

    /**
     * Rfbds b sfqufndf of bytfs from tiis dibnnfl into b subsfqufndf of tif
     * givfn bufffrs. Tiis opfrbtion, somftimfs dbllfd b <fm>sdbttfring rfbd</fm>,
     * is oftfn usfful wifn implfmfnting nftwork protodols tibt group dbtb into
     * sfgmfnts donsisting of onf or morf fixfd-lfngti ifbdfrs followfd by b
     * vbribblf-lfngti body. Tif {@dodf ibndlfr} pbrbmftfr is b domplftion
     * ibndlfr tibt is invokfd wifn tif rfbd opfrbtion domplftfs (or fbils). Tif
     * rfsult pbssfd to tif domplftion ibndlfr is tif numbfr of bytfs rfbd or
     * {@dodf -1} if no bytfs dould bf rfbd bfdbusf tif dibnnfl ibs rfbdifd
     * fnd-of-strfbm.
     *
     * <p> Tiis mftiod initibtfs b rfbd of up to <i>r</i> bytfs from tiis dibnnfl,
     * wifrf <i>r</i> is tif totbl numbfr of bytfs rfmbining in tif spfdififd
     * subsfqufndf of tif givfn bufffr brrby, tibt is,
     *
     * <blodkquotf><prf>
     * dsts[offsft].rfmbining()
     *     + dsts[offsft+1].rfmbining()
     *     + ... + dsts[offsft+lfngti-1].rfmbining()</prf></blodkquotf>
     *
     * bt tif momfnt tibt tif rfbd is bttfmptfd.
     *
     * <p> Supposf tibt b bytf sfqufndf of lfngti <i>n</i> is rfbd, wifrf
     * <tt>0</tt>&nbsp;<tt>&lt;</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
     * Up to tif first <tt>dsts[offsft].rfmbining()</tt> bytfs of tiis sfqufndf
     * brf trbnsffrrfd into bufffr <tt>dsts[offsft]</tt>, up to tif nfxt
     * <tt>dsts[offsft+1].rfmbining()</tt> bytfs brf trbnsffrrfd into bufffr
     * <tt>dsts[offsft+1]</tt>, bnd so forti, until tif fntirf bytf sfqufndf
     * is trbnsffrrfd into tif givfn bufffrs.  As mbny bytfs bs possiblf brf
     * trbnsffrrfd into fbdi bufffr, ifndf tif finbl position of fbdi updbtfd
     * bufffr, fxdfpt tif lbst updbtfd bufffr, is gubrbntffd to bf fqubl to
     * tibt bufffr's limit. Tif undfrlying opfrbting systfm mby imposf b limit
     * on tif numbfr of bufffrs tibt mby bf usfd in bn I/O opfrbtion. Wifrf tif
     * numbfr of bufffrs (witi bytfs rfmbining), fxdffds tiis limit, tifn tif
     * I/O opfrbtion is pfrformfd witi tif mbximum numbfr of bufffrs bllowfd by
     * tif opfrbting systfm.
     *
     * <p> If b timfout is spfdififd bnd tif timfout flbpsfs bfforf tif opfrbtion
     * domplftfs tifn it domplftfs witi tif fxdfption {@link
     * IntfrruptfdByTimfoutExdfption}. Wifrf b timfout oddurs, bnd tif
     * implfmfntbtion dbnnot gubrbntff tibt bytfs ibvf not bffn rfbd, or will not
     * bf rfbd from tif dibnnfl into tif givfn bufffrs, tifn furtifr bttfmpts to
     * rfbd from tif dibnnfl will dbusf bn unspfdifid runtimf fxdfption to bf
     * tirown.
     *
     * @pbrbm   <A>
     *          Tif typf of tif bttbdimfnt
     * @pbrbm   dsts
     *          Tif bufffrs into wiidi bytfs brf to bf trbnsffrrfd
     * @pbrbm   offsft
     *          Tif offsft witiin tif bufffr brrby of tif first bufffr into wiidi
     *          bytfs brf to bf trbnsffrrfd; must bf non-nfgbtivf bnd no lbrgfr tibn
     *          {@dodf dsts.lfngti}
     * @pbrbm   lfngti
     *          Tif mbximum numbfr of bufffrs to bf bddfssfd; must bf non-nfgbtivf
     *          bnd no lbrgfr tibn {@dodf dsts.lfngti - offsft}
     * @pbrbm   timfout
     *          Tif mbximum timf for tif I/O opfrbtion to domplftf
     * @pbrbm   unit
     *          Tif timf unit of tif {@dodf timfout} brgumfnt
     * @pbrbm   bttbdimfnt
     *          Tif objfdt to bttbdi to tif I/O opfrbtion; dbn bf {@dodf null}
     * @pbrbm   ibndlfr
     *          Tif ibndlfr for donsuming tif rfsult
     *
     * @tirows  IndfxOutOfBoundsExdfption
     *          If tif prf-donditions for tif {@dodf offsft}  bnd {@dodf lfngti}
     *          pbrbmftfr brfn't mft
     * @tirows  IllfgblArgumfntExdfption
     *          If tif bufffr is rfbd-only
     * @tirows  RfbdPfndingExdfption
     *          If b rfbd opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    publid bbstrbdt <A> void rfbd(BytfBufffr[] dsts,
                                  int offsft,
                                  int lfngti,
                                  long timfout,
                                  TimfUnit unit,
                                  A bttbdimfnt,
                                  ComplftionHbndlfr<Long,? supfr A> ibndlfr);

    /**
     * Writfs b sfqufndf of bytfs to tiis dibnnfl from tif givfn bufffr.
     *
     * <p> Tiis mftiod initibtfs bn bsyndironous writf opfrbtion to writf b
     * sfqufndf of bytfs to tiis dibnnfl from tif givfn bufffr. Tif {@dodf
     * ibndlfr} pbrbmftfr is b domplftion ibndlfr tibt is invokfd wifn tif writf
     * opfrbtion domplftfs (or fbils). Tif rfsult pbssfd to tif domplftion
     * ibndlfr is tif numbfr of bytfs writtfn.
     *
     * <p> If b timfout is spfdififd bnd tif timfout flbpsfs bfforf tif opfrbtion
     * domplftfs tifn it domplftfs witi tif fxdfption {@link
     * IntfrruptfdByTimfoutExdfption}. Wifrf b timfout oddurs, bnd tif
     * implfmfntbtion dbnnot gubrbntff tibt bytfs ibvf not bffn writtfn, or will
     * not bf writtfn to tif dibnnfl from tif givfn bufffr, tifn furtifr bttfmpts
     * to writf to tif dibnnfl will dbusf bn unspfdifid runtimf fxdfption to bf
     * tirown.
     *
     * <p> Otifrwisf tiis mftiod works in tif sbmf mbnnfr bs tif {@link
     * AsyndironousBytfCibnnfl#writf(BytfBufffr,Objfdt,ComplftionHbndlfr)}
     * mftiod.
     *
     * @pbrbm   <A>
     *          Tif typf of tif bttbdimfnt
     * @pbrbm   srd
     *          Tif bufffr from wiidi bytfs brf to bf rftrifvfd
     * @pbrbm   timfout
     *          Tif mbximum timf for tif I/O opfrbtion to domplftf
     * @pbrbm   unit
     *          Tif timf unit of tif {@dodf timfout} brgumfnt
     * @pbrbm   bttbdimfnt
     *          Tif objfdt to bttbdi to tif I/O opfrbtion; dbn bf {@dodf null}
     * @pbrbm   ibndlfr
     *          Tif ibndlfr for donsuming tif rfsult
     *
     * @tirows  WritfPfndingExdfption
     *          If b writf opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    publid bbstrbdt <A> void writf(BytfBufffr srd,
                                   long timfout,
                                   TimfUnit unit,
                                   A bttbdimfnt,
                                   ComplftionHbndlfr<Intfgfr,? supfr A> ibndlfr);

    /**
     * @tirows  WritfPfndingExdfption          {@inifritDod}
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    @Ovfrridf
    publid finbl <A> void writf(BytfBufffr srd,
                                A bttbdimfnt,
                                ComplftionHbndlfr<Intfgfr,? supfr A> ibndlfr)

    {
        writf(srd, 0L, TimfUnit.MILLISECONDS, bttbdimfnt, ibndlfr);
    }

    /**
     * @tirows  WritfPfndingExdfption       {@inifritDod}
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     */
    @Ovfrridf
    publid bbstrbdt Futurf<Intfgfr> writf(BytfBufffr srd);

    /**
     * Writfs b sfqufndf of bytfs to tiis dibnnfl from b subsfqufndf of tif givfn
     * bufffrs. Tiis opfrbtion, somftimfs dbllfd b <fm>gbtifring writf</fm>, is
     * oftfn usfful wifn implfmfnting nftwork protodols tibt group dbtb into
     * sfgmfnts donsisting of onf or morf fixfd-lfngti ifbdfrs followfd by b
     * vbribblf-lfngti body. Tif {@dodf ibndlfr} pbrbmftfr is b domplftion
     * ibndlfr tibt is invokfd wifn tif writf opfrbtion domplftfs (or fbils).
     * Tif rfsult pbssfd to tif domplftion ibndlfr is tif numbfr of bytfs writtfn.
     *
     * <p> Tiis mftiod initibtfs b writf of up to <i>r</i> bytfs to tiis dibnnfl,
     * wifrf <i>r</i> is tif totbl numbfr of bytfs rfmbining in tif spfdififd
     * subsfqufndf of tif givfn bufffr brrby, tibt is,
     *
     * <blodkquotf><prf>
     * srds[offsft].rfmbining()
     *     + srds[offsft+1].rfmbining()
     *     + ... + srds[offsft+lfngti-1].rfmbining()</prf></blodkquotf>
     *
     * bt tif momfnt tibt tif writf is bttfmptfd.
     *
     * <p> Supposf tibt b bytf sfqufndf of lfngti <i>n</i> is writtfn, wifrf
     * <tt>0</tt>&nbsp;<tt>&lt;</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
     * Up to tif first <tt>srds[offsft].rfmbining()</tt> bytfs of tiis sfqufndf
     * brf writtfn from bufffr <tt>srds[offsft]</tt>, up to tif nfxt
     * <tt>srds[offsft+1].rfmbining()</tt> bytfs brf writtfn from bufffr
     * <tt>srds[offsft+1]</tt>, bnd so forti, until tif fntirf bytf sfqufndf is
     * writtfn.  As mbny bytfs bs possiblf brf writtfn from fbdi bufffr, ifndf
     * tif finbl position of fbdi updbtfd bufffr, fxdfpt tif lbst updbtfd
     * bufffr, is gubrbntffd to bf fqubl to tibt bufffr's limit. Tif undfrlying
     * opfrbting systfm mby imposf b limit on tif numbfr of bufffrs tibt mby bf
     * usfd in bn I/O opfrbtion. Wifrf tif numbfr of bufffrs (witi bytfs
     * rfmbining), fxdffds tiis limit, tifn tif I/O opfrbtion is pfrformfd witi
     * tif mbximum numbfr of bufffrs bllowfd by tif opfrbting systfm.
     *
     * <p> If b timfout is spfdififd bnd tif timfout flbpsfs bfforf tif opfrbtion
     * domplftfs tifn it domplftfs witi tif fxdfption {@link
     * IntfrruptfdByTimfoutExdfption}. Wifrf b timfout oddurs, bnd tif
     * implfmfntbtion dbnnot gubrbntff tibt bytfs ibvf not bffn writtfn, or will
     * not bf writtfn to tif dibnnfl from tif givfn bufffrs, tifn furtifr bttfmpts
     * to writf to tif dibnnfl will dbusf bn unspfdifid runtimf fxdfption to bf
     * tirown.
     *
     * @pbrbm   <A>
     *          Tif typf of tif bttbdimfnt
     * @pbrbm   srds
     *          Tif bufffrs from wiidi bytfs brf to bf rftrifvfd
     * @pbrbm   offsft
     *          Tif offsft witiin tif bufffr brrby of tif first bufffr from wiidi
     *          bytfs brf to bf rftrifvfd; must bf non-nfgbtivf bnd no lbrgfr
     *          tibn {@dodf srds.lfngti}
     * @pbrbm   lfngti
     *          Tif mbximum numbfr of bufffrs to bf bddfssfd; must bf non-nfgbtivf
     *          bnd no lbrgfr tibn {@dodf srds.lfngti - offsft}
     * @pbrbm   timfout
     *          Tif mbximum timf for tif I/O opfrbtion to domplftf
     * @pbrbm   unit
     *          Tif timf unit of tif {@dodf timfout} brgumfnt
     * @pbrbm   bttbdimfnt
     *          Tif objfdt to bttbdi to tif I/O opfrbtion; dbn bf {@dodf null}
     * @pbrbm   ibndlfr
     *          Tif ibndlfr for donsuming tif rfsult
     *
     * @tirows  IndfxOutOfBoundsExdfption
     *          If tif prf-donditions for tif {@dodf offsft}  bnd {@dodf lfngti}
     *          pbrbmftfr brfn't mft
     * @tirows  WritfPfndingExdfption
     *          If b writf opfrbtion is blrfbdy in progrfss on tiis dibnnfl
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl is not yft donnfdtfd
     * @tirows  SiutdownCibnnflGroupExdfption
     *          If tif dibnnfl group ibs tfrminbtfd
     */
    publid bbstrbdt <A> void writf(BytfBufffr[] srds,
                                   int offsft,
                                   int lfngti,
                                   long timfout,
                                   TimfUnit unit,
                                   A bttbdimfnt,
                                   ComplftionHbndlfr<Long,? supfr A> ibndlfr);

    /**
     * {@inifritDod}
     * <p>
     * If tifrf is b sfdurity mbnbgfr sft, its {@dodf difdkConnfdt} mftiod is
     * dbllfd witi tif lodbl bddrfss bnd {@dodf -1} bs its brgumfnts to sff
     * if tif opfrbtion is bllowfd. If tif opfrbtion is not bllowfd,
     * b {@dodf SodkftAddrfss} rfprfsfnting tif
     * {@link jbvb.nft.InftAddrfss#gftLoopbbdkAddrfss loopbbdk} bddrfss bnd tif
     * lodbl port of tif dibnnfl's sodkft is rfturnfd.
     *
     * @rfturn  Tif {@dodf SodkftAddrfss} tibt tif sodkft is bound to, or tif
     *          {@dodf SodkftAddrfss} rfprfsfnting tif loopbbdk bddrfss if
     *          dfnifd by tif sfdurity mbnbgfr, or {@dodf null} if tif
     *          dibnnfl's sodkft is not bound
     *
     * @tirows  ClosfdCibnnflExdfption     {@inifritDod}
     * @tirows  IOExdfption                {@inifritDod}
     */
    publid bbstrbdt SodkftAddrfss gftLodblAddrfss() tirows IOExdfption;
}
