/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.dhbnnfls;

import jbvb.io.IOExdfption;
import jbvb.nft.ProtodolFbmily;
import jbvb.nft.DbtbgrbmSodkft;
import jbvb.nft.SodkftOption;
import jbvb.nft.SodkftAddrfss;
import jbvb.nio.BytfBufffr;
import jbvb.nio.dhbnnfls.spi.AbstrbdtSflfdtbblfChbnnfl;
import jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr;

/**
 * A sflfdtbblf dhbnnfl for dbtbgrbm-orifntfd sodkfts.
 *
 * <p> A dbtbgrbm dhbnnfl is drfbtfd by invoking onf of thf {@link #opfn opfn} mfthods
 * of this dlbss. It is not possiblf to drfbtf b dhbnnfl for bn brbitrbry,
 * prf-fxisting dbtbgrbm sodkft. A nfwly-drfbtfd dbtbgrbm dhbnnfl is opfn but not
 * donnfdtfd. A dbtbgrbm dhbnnfl nffd not bf donnfdtfd in ordfr for thf {@link #sfnd
 * sfnd} bnd {@link #rfdfivf rfdfivf} mfthods to bf usfd.  A dbtbgrbm dhbnnfl mby bf
 * donnfdtfd, by invoking its {@link #donnfdt donnfdt} mfthod, in ordfr to
 * bvoid thf ovfrhfbd of thf sfdurity dhfdks brf othfrwisf pfrformfd bs pbrt of
 * fvfry sfnd bnd rfdfivf opfrbtion.  A dbtbgrbm dhbnnfl must bf donnfdtfd in
 * ordfr to usf thf {@link #rfbd(jbvb.nio.BytfBufffr) rfbd} bnd {@link
 * #writf(jbvb.nio.BytfBufffr) writf} mfthods, sindf thosf mfthods do not
 * bddfpt or rfturn sodkft bddrfssfs.
 *
 * <p> Ondf donnfdtfd, b dbtbgrbm dhbnnfl rfmbins donnfdtfd until it is
 * disdonnfdtfd or dlosfd.  Whfthfr or not b dbtbgrbm dhbnnfl is donnfdtfd mby
 * bf dftfrminfd by invoking its {@link #isConnfdtfd isConnfdtfd} mfthod.
 *
 * <p> Sodkft options brf donfigurfd using thf {@link #sftOption(SodkftOption,Objfdt)
 * sftOption} mfthod. A dbtbgrbm dhbnnfl to bn Intfrnft Protodol sodkft supports
 * thf following options:
 * <blodkquotf>
 * <tbblf bordfr summbry="Sodkft options">
 *   <tr>
 *     <th>Option Nbmf</th>
 *     <th>Dfsdription</th>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_SNDBUF SO_SNDBUF} </td>
 *     <td> Thf sizf of thf sodkft sfnd bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_RCVBUF SO_RCVBUF} </td>
 *     <td> Thf sizf of thf sodkft rfdfivf bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_REUSEADDR SO_REUSEADDR} </td>
 *     <td> Rf-usf bddrfss </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_BROADCAST SO_BROADCAST} </td>
 *     <td> Allow trbnsmission of brobddbst dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_TOS IP_TOS} </td>
 *     <td> Thf Typf of Sfrvidf (ToS) odtft in thf Intfrnft Protodol (IP) hfbdfr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_IF IP_MULTICAST_IF} </td>
 *     <td> Thf nftwork intfrfbdf for Intfrnft Protodol (IP) multidbst dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_TTL
 *       IP_MULTICAST_TTL} </td>
 *     <td> Thf <fm>timf-to-livf</fm> for Intfrnft Protodol (IP) multidbst
 *       dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_LOOP
 *       IP_MULTICAST_LOOP} </td>
 *     <td> Loopbbdk for Intfrnft Protodol (IP) multidbst dbtbgrbms </td>
 *   </tr>
 * </tbblf>
 * </blodkquotf>
 * Additionbl (implfmfntbtion spfdifid) options mby blso bf supportfd.
 *
 * <p> Dbtbgrbm dhbnnfls brf sbff for usf by multiplf dondurrfnt thrfbds.  Thfy
 * support dondurrfnt rfbding bnd writing, though bt most onf thrfbd mby bf
 * rfbding bnd bt most onf thrfbd mby bf writing bt bny givfn timf.  </p>
 *
 * @buthor Mbrk Rfinhold
 * @buthor JSR-51 Expfrt Group
 * @sindf 1.4
 */

publid bbstrbdt dlbss DbtbgrbmChbnnfl
    fxtfnds AbstrbdtSflfdtbblfChbnnfl
    implfmfnts BytfChbnnfl, SdbttfringBytfChbnnfl, GbthfringBytfChbnnfl, MultidbstChbnnfl
{

    /**
     * Initiblizfs b nfw instbndf of this dlbss.
     *
     * @pbrbm  providfr
     *         Thf providfr thbt drfbtfd this dhbnnfl
     */
    protfdtfd DbtbgrbmChbnnfl(SflfdtorProvidfr providfr) {
        supfr(providfr);
    }

    /**
     * Opfns b dbtbgrbm dhbnnfl.
     *
     * <p> Thf nfw dhbnnfl is drfbtfd by invoking thf {@link
     * jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr#opfnDbtbgrbmChbnnfl()
     * opfnDbtbgrbmChbnnfl} mfthod of thf systfm-widf dffbult {@link
     * jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr} objfdt.  Thf dhbnnfl will not bf
     * donnfdtfd.
     *
     * <p> Thf {@link ProtodolFbmily ProtodolFbmily} of thf dhbnnfl's sodkft
     * is plbtform (bnd possibly donfigurbtion) dfpfndfnt bnd thfrfforf unspfdififd.
     * Thf {@link #opfn(ProtodolFbmily) opfn} bllows thf protodol fbmily to bf
     * sflfdtfd whfn opfning b dbtbgrbm dhbnnfl, bnd should bf usfd to opfn
     * dbtbgrbm dhbnnfls thbt brf intfndfd for Intfrnft Protodol multidbsting.
     *
     * @rfturn  A nfw dbtbgrbm dhbnnfl
     *
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid stbtid DbtbgrbmChbnnfl opfn() throws IOExdfption {
        rfturn SflfdtorProvidfr.providfr().opfnDbtbgrbmChbnnfl();
    }

    /**
     * Opfns b dbtbgrbm dhbnnfl.
     *
     * <p> Thf {@dodf fbmily} pbrbmftfr is usfd to spfdify thf {@link
     * ProtodolFbmily}. If thf dbtbgrbm dhbnnfl is to bf usfd for IP multidbsting
     * thfn this should dorrfspond to thf bddrfss typf of thf multidbst groups
     * thbt this dhbnnfl will join.
     *
     * <p> Thf nfw dhbnnfl is drfbtfd by invoking thf {@link
     * jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr#opfnDbtbgrbmChbnnfl(ProtodolFbmily)
     * opfnDbtbgrbmChbnnfl} mfthod of thf systfm-widf dffbult {@link
     * jbvb.nio.dhbnnfls.spi.SflfdtorProvidfr} objfdt.  Thf dhbnnfl will not bf
     * donnfdtfd.
     *
     * @pbrbm   fbmily
     *          Thf protodol fbmily
     *
     * @rfturn  A nfw dbtbgrbm dhbnnfl
     *
     * @throws  UnsupportfdOpfrbtionExdfption
     *          If thf spfdififd protodol fbmily is not supportfd. For fxbmplf,
     *          supposf thf pbrbmftfr is spfdififd bs {@link
     *          jbvb.nft.StbndbrdProtodolFbmily#INET6 StbndbrdProtodolFbmily.INET6}
     *          but IPv6 is not fnbblfd on thf plbtform.
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf   1.7
     */
    publid stbtid DbtbgrbmChbnnfl opfn(ProtodolFbmily fbmily) throws IOExdfption {
        rfturn SflfdtorProvidfr.providfr().opfnDbtbgrbmChbnnfl(fbmily);
    }

    /**
     * Rfturns bn opfrbtion sft idfntifying this dhbnnfl's supportfd
     * opfrbtions.
     *
     * <p> Dbtbgrbm dhbnnfls support rfbding bnd writing, so this mfthod
     * rfturns <tt>(</tt>{@link SflfdtionKfy#OP_READ} <tt>|</tt>&nbsp;{@link
     * SflfdtionKfy#OP_WRITE}<tt>)</tt>.  </p>
     *
     * @rfturn  Thf vblid-opfrbtion sft
     */
    publid finbl int vblidOps() {
        rfturn (SflfdtionKfy.OP_READ
                | SflfdtionKfy.OP_WRITE);
    }


    // -- Sodkft-spfdifid opfrbtions --

    /**
     * @throws  AlrfbdyBoundExdfption               {@inhfritDod}
     * @throws  UnsupportfdAddrfssTypfExdfption     {@inhfritDod}
     * @throws  ClosfdChbnnflExdfption              {@inhfritDod}
     * @throws  IOExdfption                         {@inhfritDod}
     * @throws  SfdurityExdfption
     *          If b sfdurity mbnbgfr hbs bffn instbllfd bnd its {@link
     *          SfdurityMbnbgfr#dhfdkListfn dhfdkListfn} mfthod dfnifs thf
     *          opfrbtion
     *
     * @sindf 1.7
     */
    publid bbstrbdt DbtbgrbmChbnnfl bind(SodkftAddrfss lodbl)
        throws IOExdfption;

    /**
     * @throws  UnsupportfdOpfrbtionExdfption           {@inhfritDod}
     * @throws  IllfgblArgumfntExdfption                {@inhfritDod}
     * @throws  ClosfdChbnnflExdfption                  {@inhfritDod}
     * @throws  IOExdfption                             {@inhfritDod}
     *
     * @sindf 1.7
     */
    publid bbstrbdt <T> DbtbgrbmChbnnfl sftOption(SodkftOption<T> nbmf, T vbluf)
        throws IOExdfption;

    /**
     * Rftrifvfs b dbtbgrbm sodkft bssodibtfd with this dhbnnfl.
     *
     * <p> Thf rfturnfd objfdt will not dfdlbrf bny publid mfthods thbt brf not
     * dfdlbrfd in thf {@link jbvb.nft.DbtbgrbmSodkft} dlbss.  </p>
     *
     * @rfturn  A dbtbgrbm sodkft bssodibtfd with this dhbnnfl
     */
    publid bbstrbdt DbtbgrbmSodkft sodkft();

    /**
     * Tflls whfthfr or not this dhbnnfl's sodkft is donnfdtfd.
     *
     * @rfturn  {@dodf truf} if, bnd only if, this dhbnnfl's sodkft
     *          is {@link #isOpfn opfn} bnd donnfdtfd
     */
    publid bbstrbdt boolfbn isConnfdtfd();

    /**
     * Connfdts this dhbnnfl's sodkft.
     *
     * <p> Thf dhbnnfl's sodkft is donfigurfd so thbt it only rfdfivfs
     * dbtbgrbms from, bnd sfnds dbtbgrbms to, thf givfn rfmotf <i>pffr</i>
     * bddrfss.  Ondf donnfdtfd, dbtbgrbms mby not bf rfdfivfd from or sfnt to
     * bny othfr bddrfss.  A dbtbgrbm sodkft rfmbins donnfdtfd until it is
     * fxpliditly disdonnfdtfd or until it is dlosfd.
     *
     * <p> This mfthod pfrforms fxbdtly thf sbmf sfdurity dhfdks bs thf {@link
     * jbvb.nft.DbtbgrbmSodkft#donnfdt donnfdt} mfthod of thf {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Thbt is, if b sfdurity mbnbgfr hbs bffn
     * instbllfd thfn this mfthod vfrififs thbt its {@link
     * jbvb.lbng.SfdurityMbnbgfr#dhfdkAddfpt dhfdkAddfpt} bnd {@link
     * jbvb.lbng.SfdurityMbnbgfr#dhfdkConnfdt dhfdkConnfdt} mfthods pfrmit
     * dbtbgrbms to bf rfdfivfd from bnd sfnt to, rfspfdtivfly, thf givfn
     * rfmotf bddrfss.
     *
     * <p> This mfthod mby bf invokfd bt bny timf.  It will not hbvf bny ffffdt
     * on rfbd or writf opfrbtions thbt brf blrfbdy in progrfss bt thf momfnt
     * thbt it is invokfd. If this dhbnnfl's sodkft is not bound thfn this mfthod
     * will first dbusf thf sodkft to bf bound to bn bddrfss thbt is bssignfd
     * butombtidblly, bs if invoking thf {@link #bind bind} mfthod with b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  rfmotf
     *         Thf rfmotf bddrfss to whidh this dhbnnfl is to bf donnfdtfd
     *
     * @rfturn  This dbtbgrbm dhbnnfl
     *
     * @throws  ClosfdChbnnflExdfption
     *          If this dhbnnfl is dlosfd
     *
     * @throws  AsyndhronousClosfExdfption
     *          If bnothfr thrfbd dlosfs this dhbnnfl
     *          whilf thf donnfdt opfrbtion is in progrfss
     *
     * @throws  ClosfdByIntfrruptExdfption
     *          If bnothfr thrfbd intfrrupts thf durrfnt thrfbd
     *          whilf thf donnfdt opfrbtion is in progrfss, thfrfby
     *          dlosing thf dhbnnfl bnd sftting thf durrfnt thrfbd's
     *          intfrrupt stbtus
     *
     * @throws  SfdurityExdfption
     *          If b sfdurity mbnbgfr hbs bffn instbllfd
     *          bnd it dofs not pfrmit bddfss to thf givfn rfmotf bddrfss
     *
     * @throws  IOExdfption
     *          If somf othfr I/O frror oddurs
     */
    publid bbstrbdt DbtbgrbmChbnnfl donnfdt(SodkftAddrfss rfmotf)
        throws IOExdfption;

    /**
     * Disdonnfdts this dhbnnfl's sodkft.
     *
     * <p> Thf dhbnnfl's sodkft is donfigurfd so thbt it dbn rfdfivf dbtbgrbms
     * from, bnd sfnds dbtbgrbms to, bny rfmotf bddrfss so long bs thf sfdurity
     * mbnbgfr, if instbllfd, pfrmits it.
     *
     * <p> This mfthod mby bf invokfd bt bny timf.  It will not hbvf bny ffffdt
     * on rfbd or writf opfrbtions thbt brf blrfbdy in progrfss bt thf momfnt
     * thbt it is invokfd.
     *
     * <p> If this dhbnnfl's sodkft is not donnfdtfd, or if thf dhbnnfl is
     * dlosfd, thfn invoking this mfthod hbs no ffffdt.  </p>
     *
     * @rfturn  This dbtbgrbm dhbnnfl
     *
     * @throws  IOExdfption
     *          If somf othfr I/O frror oddurs
     */
    publid bbstrbdt DbtbgrbmChbnnfl disdonnfdt() throws IOExdfption;

    /**
     * Rfturns thf rfmotf bddrfss to whidh this dhbnnfl's sodkft is donnfdtfd.
     *
     * @rfturn  Thf rfmotf bddrfss; {@dodf null} if thf dhbnnfl's sodkft is not
     *          donnfdtfd
     *
     * @throws  ClosfdChbnnflExdfption
     *          If thf dhbnnfl is dlosfd
     * @throws  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf 1.7
     */
    publid bbstrbdt SodkftAddrfss gftRfmotfAddrfss() throws IOExdfption;

    /**
     * Rfdfivfs b dbtbgrbm vib this dhbnnfl.
     *
     * <p> If b dbtbgrbm is immfdibtfly bvbilbblf, or if this dhbnnfl is in
     * blodking modf bnd onf fvfntublly bfdomfs bvbilbblf, thfn thf dbtbgrbm is
     * dopifd into thf givfn bytf bufffr bnd its sourdf bddrfss is rfturnfd.
     * If this dhbnnfl is in non-blodking modf bnd b dbtbgrbm is not
     * immfdibtfly bvbilbblf thfn this mfthod immfdibtfly rfturns
     * <tt>null</tt>.
     *
     * <p> Thf dbtbgrbm is trbnsffrrfd into thf givfn bytf bufffr stbrting bt
     * its durrfnt position, bs if by b rfgulbr {@link
     * RfbdbblfBytfChbnnfl#rfbd(jbvb.nio.BytfBufffr) rfbd} opfrbtion.  If thfrf
     * brf ffwfr bytfs rfmbining in thf bufffr thbn brf rfquirfd to hold thf
     * dbtbgrbm thfn thf rfmbindfr of thf dbtbgrbm is silfntly disdbrdfd.
     *
     * <p> This mfthod pfrforms fxbdtly thf sbmf sfdurity dhfdks bs thf {@link
     * jbvb.nft.DbtbgrbmSodkft#rfdfivf rfdfivf} mfthod of thf {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Thbt is, if thf sodkft is not donnfdtfd
     * to b spfdifid rfmotf bddrfss bnd b sfdurity mbnbgfr hbs bffn instbllfd
     * thfn for fbdh dbtbgrbm rfdfivfd this mfthod vfrififs thbt thf sourdf's
     * bddrfss bnd port numbfr brf pfrmittfd by thf sfdurity mbnbgfr's {@link
     * jbvb.lbng.SfdurityMbnbgfr#dhfdkAddfpt dhfdkAddfpt} mfthod.  Thf ovfrhfbd
     * of this sfdurity dhfdk dbn bf bvoidfd by first donnfdting thf sodkft vib
     * thf {@link #donnfdt donnfdt} mfthod.
     *
     * <p> This mfthod mby bf invokfd bt bny timf.  If bnothfr thrfbd hbs
     * blrfbdy initibtfd b rfbd opfrbtion upon this dhbnnfl, howfvfr, thfn bn
     * invodbtion of this mfthod will blodk until thf first opfrbtion is
     * domplftf. If this dhbnnfl's sodkft is not bound thfn this mfthod will
     * first dbusf thf sodkft to bf bound to bn bddrfss thbt is bssignfd
     * butombtidblly, bs if invoking thf {@link #bind bind} mfthod with b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  dst
     *         Thf bufffr into whidh thf dbtbgrbm is to bf trbnsffrrfd
     *
     * @rfturn  Thf dbtbgrbm's sourdf bddrfss,
     *          or <tt>null</tt> if this dhbnnfl is in non-blodking modf
     *          bnd no dbtbgrbm wbs immfdibtfly bvbilbblf
     *
     * @throws  ClosfdChbnnflExdfption
     *          If this dhbnnfl is dlosfd
     *
     * @throws  AsyndhronousClosfExdfption
     *          If bnothfr thrfbd dlosfs this dhbnnfl
     *          whilf thf rfbd opfrbtion is in progrfss
     *
     * @throws  ClosfdByIntfrruptExdfption
     *          If bnothfr thrfbd intfrrupts thf durrfnt thrfbd
     *          whilf thf rfbd opfrbtion is in progrfss, thfrfby
     *          dlosing thf dhbnnfl bnd sftting thf durrfnt thrfbd's
     *          intfrrupt stbtus
     *
     * @throws  SfdurityExdfption
     *          If b sfdurity mbnbgfr hbs bffn instbllfd
     *          bnd it dofs not pfrmit dbtbgrbms to bf bddfptfd
     *          from thf dbtbgrbm's sfndfr
     *
     * @throws  IOExdfption
     *          If somf othfr I/O frror oddurs
     */
    publid bbstrbdt SodkftAddrfss rfdfivf(BytfBufffr dst) throws IOExdfption;

    /**
     * Sfnds b dbtbgrbm vib this dhbnnfl.
     *
     * <p> If this dhbnnfl is in non-blodking modf bnd thfrf is suffidifnt room
     * in thf undfrlying output bufffr, or if this dhbnnfl is in blodking modf
     * bnd suffidifnt room bfdomfs bvbilbblf, thfn thf rfmbining bytfs in thf
     * givfn bufffr brf trbnsmittfd bs b singlf dbtbgrbm to thf givfn tbrgft
     * bddrfss.
     *
     * <p> Thf dbtbgrbm is trbnsffrrfd from thf bytf bufffr bs if by b rfgulbr
     * {@link WritbblfBytfChbnnfl#writf(jbvb.nio.BytfBufffr) writf} opfrbtion.
     *
     * <p> This mfthod pfrforms fxbdtly thf sbmf sfdurity dhfdks bs thf {@link
     * jbvb.nft.DbtbgrbmSodkft#sfnd sfnd} mfthod of thf {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Thbt is, if thf sodkft is not donnfdtfd
     * to b spfdifid rfmotf bddrfss bnd b sfdurity mbnbgfr hbs bffn instbllfd
     * thfn for fbdh dbtbgrbm sfnt this mfthod vfrififs thbt thf tbrgft bddrfss
     * bnd port numbfr brf pfrmittfd by thf sfdurity mbnbgfr's {@link
     * jbvb.lbng.SfdurityMbnbgfr#dhfdkConnfdt dhfdkConnfdt} mfthod.  Thf
     * ovfrhfbd of this sfdurity dhfdk dbn bf bvoidfd by first donnfdting thf
     * sodkft vib thf {@link #donnfdt donnfdt} mfthod.
     *
     * <p> This mfthod mby bf invokfd bt bny timf.  If bnothfr thrfbd hbs
     * blrfbdy initibtfd b writf opfrbtion upon this dhbnnfl, howfvfr, thfn bn
     * invodbtion of this mfthod will blodk until thf first opfrbtion is
     * domplftf. If this dhbnnfl's sodkft is not bound thfn this mfthod will
     * first dbusf thf sodkft to bf bound to bn bddrfss thbt is bssignfd
     * butombtidblly, bs if by invoking thf {@link #bind bind} mfthod with b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  srd
     *         Thf bufffr dontbining thf dbtbgrbm to bf sfnt
     *
     * @pbrbm  tbrgft
     *         Thf bddrfss to whidh thf dbtbgrbm is to bf sfnt
     *
     * @rfturn   Thf numbfr of bytfs sfnt, whidh will bf fithfr thf numbfr
     *           of bytfs thbt wfrf rfmbining in thf sourdf bufffr whfn this
     *           mfthod wbs invokfd or, if this dhbnnfl is non-blodking, mby bf
     *           zfro if thfrf wbs insuffidifnt room for thf dbtbgrbm in thf
     *           undfrlying output bufffr
     *
     * @throws  ClosfdChbnnflExdfption
     *          If this dhbnnfl is dlosfd
     *
     * @throws  AsyndhronousClosfExdfption
     *          If bnothfr thrfbd dlosfs this dhbnnfl
     *          whilf thf rfbd opfrbtion is in progrfss
     *
     * @throws  ClosfdByIntfrruptExdfption
     *          If bnothfr thrfbd intfrrupts thf durrfnt thrfbd
     *          whilf thf rfbd opfrbtion is in progrfss, thfrfby
     *          dlosing thf dhbnnfl bnd sftting thf durrfnt thrfbd's
     *          intfrrupt stbtus
     *
     * @throws  SfdurityExdfption
     *          If b sfdurity mbnbgfr hbs bffn instbllfd
     *          bnd it dofs not pfrmit dbtbgrbms to bf sfnt
     *          to thf givfn bddrfss
     *
     * @throws  IOExdfption
     *          If somf othfr I/O frror oddurs
     */
    publid bbstrbdt int sfnd(BytfBufffr srd, SodkftAddrfss tbrgft)
        throws IOExdfption;


    // -- BytfChbnnfl opfrbtions --

    /**
     * Rfbds b dbtbgrbm from this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from thf sodkft's pffr.  If
     * thfrf brf morf bytfs in thf dbtbgrbm thbn rfmbin in thf givfn bufffr
     * thfn thf rfmbindfr of thf dbtbgrbm is silfntly disdbrdfd.  Othfrwisf
     * this mfthod bfhbvfs fxbdtly bs spfdififd in thf {@link
     * RfbdbblfBytfChbnnfl} intfrfbdf.  </p>
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt int rfbd(BytfBufffr dst) throws IOExdfption;

    /**
     * Rfbds b dbtbgrbm from this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from thf sodkft's pffr.  If
     * thfrf brf morf bytfs in thf dbtbgrbm thbn rfmbin in thf givfn bufffrs
     * thfn thf rfmbindfr of thf dbtbgrbm is silfntly disdbrdfd.  Othfrwisf
     * this mfthod bfhbvfs fxbdtly bs spfdififd in thf {@link
     * SdbttfringBytfChbnnfl} intfrfbdf.  </p>
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt long rfbd(BytfBufffr[] dsts, int offsft, int lfngth)
        throws IOExdfption;

    /**
     * Rfbds b dbtbgrbm from this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from thf sodkft's pffr.  If
     * thfrf brf morf bytfs in thf dbtbgrbm thbn rfmbin in thf givfn bufffrs
     * thfn thf rfmbindfr of thf dbtbgrbm is silfntly disdbrdfd.  Othfrwisf
     * this mfthod bfhbvfs fxbdtly bs spfdififd in thf {@link
     * SdbttfringBytfChbnnfl} intfrfbdf.  </p>
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid finbl long rfbd(BytfBufffr[] dsts) throws IOExdfption {
        rfturn rfbd(dsts, 0, dsts.lfngth);
    }

    /**
     * Writfs b dbtbgrbm to this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, in whidh dbsf it sfnds dbtbgrbms dirfdtly to thf sodkft's
     * pffr.  Othfrwisf it bfhbvfs fxbdtly bs spfdififd in thf {@link
     * WritbblfBytfChbnnfl} intfrfbdf.  </p>
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt int writf(BytfBufffr srd) throws IOExdfption;

    /**
     * Writfs b dbtbgrbm to this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, in whidh dbsf it sfnds dbtbgrbms dirfdtly to thf sodkft's
     * pffr.  Othfrwisf it bfhbvfs fxbdtly bs spfdififd in thf {@link
     * GbthfringBytfChbnnfl} intfrfbdf.  </p>
     *
     * @rfturn   Thf numbfr of bytfs sfnt, whidh will bf fithfr thf numbfr
     *           of bytfs thbt wfrf rfmbining in thf sourdf bufffr whfn this
     *           mfthod wbs invokfd or, if this dhbnnfl is non-blodking, mby bf
     *           zfro if thfrf wbs insuffidifnt room for thf dbtbgrbm in thf
     *           undfrlying output bufffr
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt long writf(BytfBufffr[] srds, int offsft, int lfngth)
        throws IOExdfption;

    /**
     * Writfs b dbtbgrbm to this dhbnnfl.
     *
     * <p> This mfthod mby only bf invokfd if this dhbnnfl's sodkft is
     * donnfdtfd, in whidh dbsf it sfnds dbtbgrbms dirfdtly to thf sodkft's
     * pffr.  Othfrwisf it bfhbvfs fxbdtly bs spfdififd in thf {@link
     * GbthfringBytfChbnnfl} intfrfbdf.  </p>
     *
     * @rfturn   Thf numbfr of bytfs sfnt, whidh will bf fithfr thf numbfr
     *           of bytfs thbt wfrf rfmbining in thf sourdf bufffr whfn this
     *           mfthod wbs invokfd or, if this dhbnnfl is non-blodking, mby bf
     *           zfro if thfrf wbs insuffidifnt room for thf dbtbgrbm in thf
     *           undfrlying output bufffr
     *
     * @throws  NotYftConnfdtfdExdfption
     *          If this dhbnnfl's sodkft is not donnfdtfd
     */
    publid finbl long writf(BytfBufffr[] srds) throws IOExdfption {
        rfturn writf(srds, 0, srds.lfngth);
    }

    /**
     * {@inhfritDod}
     * <p>
     * If thfrf is b sfdurity mbnbgfr sft, its {@dodf dhfdkConnfdt} mfthod is
     * dbllfd with thf lodbl bddrfss bnd {@dodf -1} bs its brgumfnts to sff
     * if thf opfrbtion is bllowfd. If thf opfrbtion is not bllowfd,
     * b {@dodf SodkftAddrfss} rfprfsfnting thf
     * {@link jbvb.nft.InftAddrfss#gftLoopbbdkAddrfss loopbbdk} bddrfss bnd thf
     * lodbl port of thf dhbnnfl's sodkft is rfturnfd.
     *
     * @rfturn  Thf {@dodf SodkftAddrfss} thbt thf sodkft is bound to, or thf
     *          {@dodf SodkftAddrfss} rfprfsfnting thf loopbbdk bddrfss if
     *          dfnifd by thf sfdurity mbnbgfr, or {@dodf null} if thf
     *          dhbnnfl's sodkft is not bound
     *
     * @throws  ClosfdChbnnflExdfption     {@inhfritDod}
     * @throws  IOExdfption                {@inhfritDod}
     */
    @Ovfrridf
    publid bbstrbdt SodkftAddrfss gftLodblAddrfss() throws IOExdfption;

}
