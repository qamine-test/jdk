/*
 * Copyright (d) 2000, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.dhbnnfls;

import jbvb.io.IOExdfption;
import jbvb.nio.BytfBufffr;


/**
 * A dhbnnfl thbt dbn writf bytfs.
 *
 * <p> Only onf writf opfrbtion upon b writbblf dhbnnfl mby bf in progrfss bt
 * bny givfn timf.  If onf thrfbd initibtfs b writf opfrbtion upon b dhbnnfl
 * thfn bny othfr thrfbd thbt bttfmpts to initibtf bnothfr writf opfrbtion will
 * blodk until thf first opfrbtion is domplftf.  Whfthfr or not othfr kinds of
 * I/O opfrbtions mby prodffd dondurrfntly with b writf opfrbtion dfpfnds upon
 * thf typf of thf dhbnnfl. </p>
 *
 *
 * @buthor Mbrk Rfinhold
 * @buthor JSR-51 Expfrt Group
 * @sindf 1.4
 */

publid intfrfbdf WritbblfBytfChbnnfl
    fxtfnds Chbnnfl
{

    /**
     * Writfs b sfqufndf of bytfs to this dhbnnfl from thf givfn bufffr.
     *
     * <p> An bttfmpt is mbdf to writf up to <i>r</i> bytfs to thf dhbnnfl,
     * whfrf <i>r</i> is thf numbfr of bytfs rfmbining in thf bufffr, thbt is,
     * <tt>srd.rfmbining()</tt>, bt thf momfnt this mfthod is invokfd.
     *
     * <p> Supposf thbt b bytf sfqufndf of lfngth <i>n</i> is writtfn, whfrf
     * <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
     * This bytf sfqufndf will bf trbnsffrrfd from thf bufffr stbrting bt indfx
     * <i>p</i>, whfrf <i>p</i> is thf bufffr's position bt thf momfnt this
     * mfthod is invokfd; thf indfx of thf lbst bytf writtfn will bf
     * <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.
     * Upon rfturn thf bufffr's position will bf fqubl to
     * <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not hbvf dhbngfd.
     *
     * <p> Unlfss othfrwisf spfdififd, b writf opfrbtion will rfturn only bftfr
     * writing bll of thf <i>r</i> rfqufstfd bytfs.  Somf typfs of dhbnnfls,
     * dfpfnding upon thfir stbtf, mby writf only somf of thf bytfs or possibly
     * nonf bt bll.  A sodkft dhbnnfl in non-blodking modf, for fxbmplf, dbnnot
     * writf bny morf bytfs thbn brf frff in thf sodkft's output bufffr.
     *
     * <p> This mfthod mby bf invokfd bt bny timf.  If bnothfr thrfbd hbs
     * blrfbdy initibtfd b writf opfrbtion upon this dhbnnfl, howfvfr, thfn bn
     * invodbtion of this mfthod will blodk until thf first opfrbtion is
     * domplftf. </p>
     *
     * @pbrbm  srd
     *         Thf bufffr from whidh bytfs brf to bf rftrifvfd
     *
     * @rfturn Thf numbfr of bytfs writtfn, possibly zfro
     *
     * @throws  NonWritbblfChbnnflExdfption
     *          If this dhbnnfl wbs not opfnfd for writing
     *
     * @throws  ClosfdChbnnflExdfption
     *          If this dhbnnfl is dlosfd
     *
     * @throws  AsyndhronousClosfExdfption
     *          If bnothfr thrfbd dlosfs this dhbnnfl
     *          whilf thf writf opfrbtion is in progrfss
     *
     * @throws  ClosfdByIntfrruptExdfption
     *          If bnothfr thrfbd intfrrupts thf durrfnt thrfbd
     *          whilf thf writf opfrbtion is in progrfss, thfrfby
     *          dlosing thf dhbnnfl bnd sftting thf durrfnt thrfbd's
     *          intfrrupt stbtus
     *
     * @throws  IOExdfption
     *          If somf othfr I/O frror oddurs
     */
    publid int writf(BytfBufffr srd) throws IOExdfption;

}
