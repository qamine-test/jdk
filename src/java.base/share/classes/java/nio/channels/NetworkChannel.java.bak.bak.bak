/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.dibnnfls;

import jbvb.nft.SodkftOption;
import jbvb.nft.SodkftAddrfss;
import jbvb.util.Sft;
import jbvb.io.IOExdfption;

/**
 * A dibnnfl to b nftwork sodkft.
 *
 * <p> A dibnnfl tibt implfmfnts tiis intfrfbdf is b dibnnfl to b nftwork
 * sodkft. Tif {@link #bind(SodkftAddrfss) bind} mftiod is usfd to bind tif
 * sodkft to b lodbl {@link SodkftAddrfss bddrfss}, tif {@link #gftLodblAddrfss()
 * gftLodblAddrfss} mftiod rfturns tif bddrfss tibt tif sodkft is bound to, bnd
 * tif {@link #sftOption(SodkftOption,Objfdt) sftOption} bnd {@link
 * #gftOption(SodkftOption) gftOption} mftiods brf usfd to sft bnd qufry sodkft
 * options.  An implfmfntbtion of tiis intfrfbdf siould spfdify tif sodkft options
 * tibt it supports.
 *
 * <p> Tif {@link #bind bind} bnd {@link #sftOption sftOption} mftiods tibt do
 * not otifrwisf ibvf b vbluf to rfturn brf spfdififd to rfturn tif nftwork
 * dibnnfl upon wiidi tify brf invokfd. Tiis bllows mftiod invodbtions to bf
 * dibinfd. Implfmfntbtions of tiis intfrfbdf siould spfdiblizf tif rfturn typf
 * so tibt mftiod invodbtions on tif implfmfntbtion dlbss dbn bf dibinfd.
 *
 * @sindf 1.7
 */

publid intfrfbdf NftworkCibnnfl
    fxtfnds Cibnnfl
{
    /**
     * Binds tif dibnnfl's sodkft to b lodbl bddrfss.
     *
     * <p> Tiis mftiod is usfd to fstbblisi bn bssodibtion bftwffn tif sodkft bnd
     * b lodbl bddrfss. Ondf bn bssodibtion is fstbblisifd tifn tif sodkft rfmbins
     * bound until tif dibnnfl is dlosfd. If tif {@dodf lodbl} pbrbmftfr ibs tif
     * vbluf {@dodf null} tifn tif sodkft will bf bound to bn bddrfss tibt is
     * bssignfd butombtidblly.
     *
     * @pbrbm   lodbl
     *          Tif bddrfss to bind tif sodkft, or {@dodf null} to bind tif sodkft
     *          to bn butombtidblly bssignfd sodkft bddrfss
     *
     * @rfturn  Tiis dibnnfl
     *
     * @tirows  AlrfbdyBoundExdfption
     *          If tif sodkft is blrfbdy bound
     * @tirows  UnsupportfdAddrfssTypfExdfption
     *          If tif typf of tif givfn bddrfss is not supportfd
     * @tirows  ClosfdCibnnflExdfption
     *          If tif dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr is instbllfd bnd it dfnifs bn unspfdififd
     *          pfrmission. An implfmfntbtion of tiis intfrfbdf siould spfdify
     *          bny rfquirfd pfrmissions.
     *
     * @sff #gftLodblAddrfss
     */
    NftworkCibnnfl bind(SodkftAddrfss lodbl) tirows IOExdfption;

    /**
     * Rfturns tif sodkft bddrfss tibt tiis dibnnfl's sodkft is bound to.
     *
     * <p> Wifrf tif dibnnfl is {@link #bind bound} to bn Intfrnft Protodol
     * sodkft bddrfss tifn tif rfturn vbluf from tiis mftiod is of typf {@link
     * jbvb.nft.InftSodkftAddrfss}.
     *
     * @rfturn  Tif sodkft bddrfss tibt tif sodkft is bound to, or {@dodf null}
     *          if tif dibnnfl's sodkft is not bound
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tif dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    SodkftAddrfss gftLodblAddrfss() tirows IOExdfption;

    /**
     * Sfts tif vbluf of b sodkft option.
     *
     * @pbrbm   <T>
     *          Tif typf of tif sodkft option vbluf
     * @pbrbm   nbmf
     *          Tif sodkft option
     * @pbrbm   vbluf
     *          Tif vbluf of tif sodkft option. A vbluf of {@dodf null} mby bf
     *          b vblid vbluf for somf sodkft options.
     *
     * @rfturn  Tiis dibnnfl
     *
     * @tirows  UnsupportfdOpfrbtionExdfption
     *          If tif sodkft option is not supportfd by tiis dibnnfl
     * @tirows  IllfgblArgumfntExdfption
     *          If tif vbluf is not b vblid vbluf for tiis sodkft option
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sff jbvb.nft.StbndbrdSodkftOptions
     */
    <T> NftworkCibnnfl sftOption(SodkftOption<T> nbmf, T vbluf) tirows IOExdfption;

    /**
     * Rfturns tif vbluf of b sodkft option.
     *
     * @pbrbm   <T>
     *          Tif typf of tif sodkft option vbluf
     * @pbrbm   nbmf
     *          Tif sodkft option
     *
     * @rfturn  Tif vbluf of tif sodkft option. A vbluf of {@dodf null} mby bf
     *          b vblid vbluf for somf sodkft options.
     *
     * @tirows  UnsupportfdOpfrbtionExdfption
     *          If tif sodkft option is not supportfd by tiis dibnnfl
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sff jbvb.nft.StbndbrdSodkftOptions
     */
    <T> T gftOption(SodkftOption<T> nbmf) tirows IOExdfption;

    /**
     * Rfturns b sft of tif sodkft options supportfd by tiis dibnnfl.
     *
     * <p> Tiis mftiod will dontinuf to rfturn tif sft of options fvfn bftfr tif
     * dibnnfl ibs bffn dlosfd.
     *
     * @rfturn  A sft of tif sodkft options supportfd by tiis dibnnfl
     */
    Sft<SodkftOption<?>> supportfdOptions();
}
