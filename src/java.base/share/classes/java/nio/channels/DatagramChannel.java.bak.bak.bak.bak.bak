/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.dibnnfls;

import jbvb.io.IOExdfption;
import jbvb.nft.ProtodolFbmily;
import jbvb.nft.DbtbgrbmSodkft;
import jbvb.nft.SodkftOption;
import jbvb.nft.SodkftAddrfss;
import jbvb.nio.BytfBufffr;
import jbvb.nio.dibnnfls.spi.AbstrbdtSflfdtbblfCibnnfl;
import jbvb.nio.dibnnfls.spi.SflfdtorProvidfr;

/**
 * A sflfdtbblf dibnnfl for dbtbgrbm-orifntfd sodkfts.
 *
 * <p> A dbtbgrbm dibnnfl is drfbtfd by invoking onf of tif {@link #opfn opfn} mftiods
 * of tiis dlbss. It is not possiblf to drfbtf b dibnnfl for bn brbitrbry,
 * prf-fxisting dbtbgrbm sodkft. A nfwly-drfbtfd dbtbgrbm dibnnfl is opfn but not
 * donnfdtfd. A dbtbgrbm dibnnfl nffd not bf donnfdtfd in ordfr for tif {@link #sfnd
 * sfnd} bnd {@link #rfdfivf rfdfivf} mftiods to bf usfd.  A dbtbgrbm dibnnfl mby bf
 * donnfdtfd, by invoking its {@link #donnfdt donnfdt} mftiod, in ordfr to
 * bvoid tif ovfrifbd of tif sfdurity difdks brf otifrwisf pfrformfd bs pbrt of
 * fvfry sfnd bnd rfdfivf opfrbtion.  A dbtbgrbm dibnnfl must bf donnfdtfd in
 * ordfr to usf tif {@link #rfbd(jbvb.nio.BytfBufffr) rfbd} bnd {@link
 * #writf(jbvb.nio.BytfBufffr) writf} mftiods, sindf tiosf mftiods do not
 * bddfpt or rfturn sodkft bddrfssfs.
 *
 * <p> Ondf donnfdtfd, b dbtbgrbm dibnnfl rfmbins donnfdtfd until it is
 * disdonnfdtfd or dlosfd.  Wiftifr or not b dbtbgrbm dibnnfl is donnfdtfd mby
 * bf dftfrminfd by invoking its {@link #isConnfdtfd isConnfdtfd} mftiod.
 *
 * <p> Sodkft options brf donfigurfd using tif {@link #sftOption(SodkftOption,Objfdt)
 * sftOption} mftiod. A dbtbgrbm dibnnfl to bn Intfrnft Protodol sodkft supports
 * tif following options:
 * <blodkquotf>
 * <tbblf bordfr summbry="Sodkft options">
 *   <tr>
 *     <ti>Option Nbmf</ti>
 *     <ti>Dfsdription</ti>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_SNDBUF SO_SNDBUF} </td>
 *     <td> Tif sizf of tif sodkft sfnd bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_RCVBUF SO_RCVBUF} </td>
 *     <td> Tif sizf of tif sodkft rfdfivf bufffr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_REUSEADDR SO_REUSEADDR} </td>
 *     <td> Rf-usf bddrfss </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#SO_BROADCAST SO_BROADCAST} </td>
 *     <td> Allow trbnsmission of brobddbst dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_TOS IP_TOS} </td>
 *     <td> Tif Typf of Sfrvidf (ToS) odtft in tif Intfrnft Protodol (IP) ifbdfr </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_IF IP_MULTICAST_IF} </td>
 *     <td> Tif nftwork intfrfbdf for Intfrnft Protodol (IP) multidbst dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_TTL
 *       IP_MULTICAST_TTL} </td>
 *     <td> Tif <fm>timf-to-livf</fm> for Intfrnft Protodol (IP) multidbst
 *       dbtbgrbms </td>
 *   </tr>
 *   <tr>
 *     <td> {@link jbvb.nft.StbndbrdSodkftOptions#IP_MULTICAST_LOOP
 *       IP_MULTICAST_LOOP} </td>
 *     <td> Loopbbdk for Intfrnft Protodol (IP) multidbst dbtbgrbms </td>
 *   </tr>
 * </tbblf>
 * </blodkquotf>
 * Additionbl (implfmfntbtion spfdifid) options mby blso bf supportfd.
 *
 * <p> Dbtbgrbm dibnnfls brf sbff for usf by multiplf dondurrfnt tirfbds.  Tify
 * support dondurrfnt rfbding bnd writing, tiougi bt most onf tirfbd mby bf
 * rfbding bnd bt most onf tirfbd mby bf writing bt bny givfn timf.  </p>
 *
 * @butior Mbrk Rfiniold
 * @butior JSR-51 Expfrt Group
 * @sindf 1.4
 */

publid bbstrbdt dlbss DbtbgrbmCibnnfl
    fxtfnds AbstrbdtSflfdtbblfCibnnfl
    implfmfnts BytfCibnnfl, SdbttfringBytfCibnnfl, GbtifringBytfCibnnfl, MultidbstCibnnfl
{

    /**
     * Initiblizfs b nfw instbndf of tiis dlbss.
     *
     * @pbrbm  providfr
     *         Tif providfr tibt drfbtfd tiis dibnnfl
     */
    protfdtfd DbtbgrbmCibnnfl(SflfdtorProvidfr providfr) {
        supfr(providfr);
    }

    /**
     * Opfns b dbtbgrbm dibnnfl.
     *
     * <p> Tif nfw dibnnfl is drfbtfd by invoking tif {@link
     * jbvb.nio.dibnnfls.spi.SflfdtorProvidfr#opfnDbtbgrbmCibnnfl()
     * opfnDbtbgrbmCibnnfl} mftiod of tif systfm-widf dffbult {@link
     * jbvb.nio.dibnnfls.spi.SflfdtorProvidfr} objfdt.  Tif dibnnfl will not bf
     * donnfdtfd.
     *
     * <p> Tif {@link ProtodolFbmily ProtodolFbmily} of tif dibnnfl's sodkft
     * is plbtform (bnd possibly donfigurbtion) dfpfndfnt bnd tifrfforf unspfdififd.
     * Tif {@link #opfn(ProtodolFbmily) opfn} bllows tif protodol fbmily to bf
     * sflfdtfd wifn opfning b dbtbgrbm dibnnfl, bnd siould bf usfd to opfn
     * dbtbgrbm dibnnfls tibt brf intfndfd for Intfrnft Protodol multidbsting.
     *
     * @rfturn  A nfw dbtbgrbm dibnnfl
     *
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     */
    publid stbtid DbtbgrbmCibnnfl opfn() tirows IOExdfption {
        rfturn SflfdtorProvidfr.providfr().opfnDbtbgrbmCibnnfl();
    }

    /**
     * Opfns b dbtbgrbm dibnnfl.
     *
     * <p> Tif {@dodf fbmily} pbrbmftfr is usfd to spfdify tif {@link
     * ProtodolFbmily}. If tif dbtbgrbm dibnnfl is to bf usfd for IP multidbsting
     * tifn tiis siould dorrfspond to tif bddrfss typf of tif multidbst groups
     * tibt tiis dibnnfl will join.
     *
     * <p> Tif nfw dibnnfl is drfbtfd by invoking tif {@link
     * jbvb.nio.dibnnfls.spi.SflfdtorProvidfr#opfnDbtbgrbmCibnnfl(ProtodolFbmily)
     * opfnDbtbgrbmCibnnfl} mftiod of tif systfm-widf dffbult {@link
     * jbvb.nio.dibnnfls.spi.SflfdtorProvidfr} objfdt.  Tif dibnnfl will not bf
     * donnfdtfd.
     *
     * @pbrbm   fbmily
     *          Tif protodol fbmily
     *
     * @rfturn  A nfw dbtbgrbm dibnnfl
     *
     * @tirows  UnsupportfdOpfrbtionExdfption
     *          If tif spfdififd protodol fbmily is not supportfd. For fxbmplf,
     *          supposf tif pbrbmftfr is spfdififd bs {@link
     *          jbvb.nft.StbndbrdProtodolFbmily#INET6 StbndbrdProtodolFbmily.INET6}
     *          but IPv6 is not fnbblfd on tif plbtform.
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf   1.7
     */
    publid stbtid DbtbgrbmCibnnfl opfn(ProtodolFbmily fbmily) tirows IOExdfption {
        rfturn SflfdtorProvidfr.providfr().opfnDbtbgrbmCibnnfl(fbmily);
    }

    /**
     * Rfturns bn opfrbtion sft idfntifying tiis dibnnfl's supportfd
     * opfrbtions.
     *
     * <p> Dbtbgrbm dibnnfls support rfbding bnd writing, so tiis mftiod
     * rfturns <tt>(</tt>{@link SflfdtionKfy#OP_READ} <tt>|</tt>&nbsp;{@link
     * SflfdtionKfy#OP_WRITE}<tt>)</tt>.  </p>
     *
     * @rfturn  Tif vblid-opfrbtion sft
     */
    publid finbl int vblidOps() {
        rfturn (SflfdtionKfy.OP_READ
                | SflfdtionKfy.OP_WRITE);
    }


    // -- Sodkft-spfdifid opfrbtions --

    /**
     * @tirows  AlrfbdyBoundExdfption               {@inifritDod}
     * @tirows  UnsupportfdAddrfssTypfExdfption     {@inifritDod}
     * @tirows  ClosfdCibnnflExdfption              {@inifritDod}
     * @tirows  IOExdfption                         {@inifritDod}
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd bnd its {@link
     *          SfdurityMbnbgfr#difdkListfn difdkListfn} mftiod dfnifs tif
     *          opfrbtion
     *
     * @sindf 1.7
     */
    publid bbstrbdt DbtbgrbmCibnnfl bind(SodkftAddrfss lodbl)
        tirows IOExdfption;

    /**
     * @tirows  UnsupportfdOpfrbtionExdfption           {@inifritDod}
     * @tirows  IllfgblArgumfntExdfption                {@inifritDod}
     * @tirows  ClosfdCibnnflExdfption                  {@inifritDod}
     * @tirows  IOExdfption                             {@inifritDod}
     *
     * @sindf 1.7
     */
    publid bbstrbdt <T> DbtbgrbmCibnnfl sftOption(SodkftOption<T> nbmf, T vbluf)
        tirows IOExdfption;

    /**
     * Rftrifvfs b dbtbgrbm sodkft bssodibtfd witi tiis dibnnfl.
     *
     * <p> Tif rfturnfd objfdt will not dfdlbrf bny publid mftiods tibt brf not
     * dfdlbrfd in tif {@link jbvb.nft.DbtbgrbmSodkft} dlbss.  </p>
     *
     * @rfturn  A dbtbgrbm sodkft bssodibtfd witi tiis dibnnfl
     */
    publid bbstrbdt DbtbgrbmSodkft sodkft();

    /**
     * Tflls wiftifr or not tiis dibnnfl's sodkft is donnfdtfd.
     *
     * @rfturn  {@dodf truf} if, bnd only if, tiis dibnnfl's sodkft
     *          is {@link #isOpfn opfn} bnd donnfdtfd
     */
    publid bbstrbdt boolfbn isConnfdtfd();

    /**
     * Connfdts tiis dibnnfl's sodkft.
     *
     * <p> Tif dibnnfl's sodkft is donfigurfd so tibt it only rfdfivfs
     * dbtbgrbms from, bnd sfnds dbtbgrbms to, tif givfn rfmotf <i>pffr</i>
     * bddrfss.  Ondf donnfdtfd, dbtbgrbms mby not bf rfdfivfd from or sfnt to
     * bny otifr bddrfss.  A dbtbgrbm sodkft rfmbins donnfdtfd until it is
     * fxpliditly disdonnfdtfd or until it is dlosfd.
     *
     * <p> Tiis mftiod pfrforms fxbdtly tif sbmf sfdurity difdks bs tif {@link
     * jbvb.nft.DbtbgrbmSodkft#donnfdt donnfdt} mftiod of tif {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Tibt is, if b sfdurity mbnbgfr ibs bffn
     * instbllfd tifn tiis mftiod vfrififs tibt its {@link
     * jbvb.lbng.SfdurityMbnbgfr#difdkAddfpt difdkAddfpt} bnd {@link
     * jbvb.lbng.SfdurityMbnbgfr#difdkConnfdt difdkConnfdt} mftiods pfrmit
     * dbtbgrbms to bf rfdfivfd from bnd sfnt to, rfspfdtivfly, tif givfn
     * rfmotf bddrfss.
     *
     * <p> Tiis mftiod mby bf invokfd bt bny timf.  It will not ibvf bny ffffdt
     * on rfbd or writf opfrbtions tibt brf blrfbdy in progrfss bt tif momfnt
     * tibt it is invokfd. If tiis dibnnfl's sodkft is not bound tifn tiis mftiod
     * will first dbusf tif sodkft to bf bound to bn bddrfss tibt is bssignfd
     * butombtidblly, bs if invoking tif {@link #bind bind} mftiod witi b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  rfmotf
     *         Tif rfmotf bddrfss to wiidi tiis dibnnfl is to bf donnfdtfd
     *
     * @rfturn  Tiis dbtbgrbm dibnnfl
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     *
     * @tirows  AsyndironousClosfExdfption
     *          If bnotifr tirfbd dlosfs tiis dibnnfl
     *          wiilf tif donnfdt opfrbtion is in progrfss
     *
     * @tirows  ClosfdByIntfrruptExdfption
     *          If bnotifr tirfbd intfrrupts tif durrfnt tirfbd
     *          wiilf tif donnfdt opfrbtion is in progrfss, tifrfby
     *          dlosing tif dibnnfl bnd sftting tif durrfnt tirfbd's
     *          intfrrupt stbtus
     *
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd
     *          bnd it dofs not pfrmit bddfss to tif givfn rfmotf bddrfss
     *
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt DbtbgrbmCibnnfl donnfdt(SodkftAddrfss rfmotf)
        tirows IOExdfption;

    /**
     * Disdonnfdts tiis dibnnfl's sodkft.
     *
     * <p> Tif dibnnfl's sodkft is donfigurfd so tibt it dbn rfdfivf dbtbgrbms
     * from, bnd sfnds dbtbgrbms to, bny rfmotf bddrfss so long bs tif sfdurity
     * mbnbgfr, if instbllfd, pfrmits it.
     *
     * <p> Tiis mftiod mby bf invokfd bt bny timf.  It will not ibvf bny ffffdt
     * on rfbd or writf opfrbtions tibt brf blrfbdy in progrfss bt tif momfnt
     * tibt it is invokfd.
     *
     * <p> If tiis dibnnfl's sodkft is not donnfdtfd, or if tif dibnnfl is
     * dlosfd, tifn invoking tiis mftiod ibs no ffffdt.  </p>
     *
     * @rfturn  Tiis dbtbgrbm dibnnfl
     *
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt DbtbgrbmCibnnfl disdonnfdt() tirows IOExdfption;

    /**
     * Rfturns tif rfmotf bddrfss to wiidi tiis dibnnfl's sodkft is donnfdtfd.
     *
     * @rfturn  Tif rfmotf bddrfss; {@dodf null} if tif dibnnfl's sodkft is not
     *          donnfdtfd
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tif dibnnfl is dlosfd
     * @tirows  IOExdfption
     *          If bn I/O frror oddurs
     *
     * @sindf 1.7
     */
    publid bbstrbdt SodkftAddrfss gftRfmotfAddrfss() tirows IOExdfption;

    /**
     * Rfdfivfs b dbtbgrbm vib tiis dibnnfl.
     *
     * <p> If b dbtbgrbm is immfdibtfly bvbilbblf, or if tiis dibnnfl is in
     * blodking modf bnd onf fvfntublly bfdomfs bvbilbblf, tifn tif dbtbgrbm is
     * dopifd into tif givfn bytf bufffr bnd its sourdf bddrfss is rfturnfd.
     * If tiis dibnnfl is in non-blodking modf bnd b dbtbgrbm is not
     * immfdibtfly bvbilbblf tifn tiis mftiod immfdibtfly rfturns
     * <tt>null</tt>.
     *
     * <p> Tif dbtbgrbm is trbnsffrrfd into tif givfn bytf bufffr stbrting bt
     * its durrfnt position, bs if by b rfgulbr {@link
     * RfbdbblfBytfCibnnfl#rfbd(jbvb.nio.BytfBufffr) rfbd} opfrbtion.  If tifrf
     * brf ffwfr bytfs rfmbining in tif bufffr tibn brf rfquirfd to iold tif
     * dbtbgrbm tifn tif rfmbindfr of tif dbtbgrbm is silfntly disdbrdfd.
     *
     * <p> Tiis mftiod pfrforms fxbdtly tif sbmf sfdurity difdks bs tif {@link
     * jbvb.nft.DbtbgrbmSodkft#rfdfivf rfdfivf} mftiod of tif {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Tibt is, if tif sodkft is not donnfdtfd
     * to b spfdifid rfmotf bddrfss bnd b sfdurity mbnbgfr ibs bffn instbllfd
     * tifn for fbdi dbtbgrbm rfdfivfd tiis mftiod vfrififs tibt tif sourdf's
     * bddrfss bnd port numbfr brf pfrmittfd by tif sfdurity mbnbgfr's {@link
     * jbvb.lbng.SfdurityMbnbgfr#difdkAddfpt difdkAddfpt} mftiod.  Tif ovfrifbd
     * of tiis sfdurity difdk dbn bf bvoidfd by first donnfdting tif sodkft vib
     * tif {@link #donnfdt donnfdt} mftiod.
     *
     * <p> Tiis mftiod mby bf invokfd bt bny timf.  If bnotifr tirfbd ibs
     * blrfbdy initibtfd b rfbd opfrbtion upon tiis dibnnfl, iowfvfr, tifn bn
     * invodbtion of tiis mftiod will blodk until tif first opfrbtion is
     * domplftf. If tiis dibnnfl's sodkft is not bound tifn tiis mftiod will
     * first dbusf tif sodkft to bf bound to bn bddrfss tibt is bssignfd
     * butombtidblly, bs if invoking tif {@link #bind bind} mftiod witi b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  dst
     *         Tif bufffr into wiidi tif dbtbgrbm is to bf trbnsffrrfd
     *
     * @rfturn  Tif dbtbgrbm's sourdf bddrfss,
     *          or <tt>null</tt> if tiis dibnnfl is in non-blodking modf
     *          bnd no dbtbgrbm wbs immfdibtfly bvbilbblf
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     *
     * @tirows  AsyndironousClosfExdfption
     *          If bnotifr tirfbd dlosfs tiis dibnnfl
     *          wiilf tif rfbd opfrbtion is in progrfss
     *
     * @tirows  ClosfdByIntfrruptExdfption
     *          If bnotifr tirfbd intfrrupts tif durrfnt tirfbd
     *          wiilf tif rfbd opfrbtion is in progrfss, tifrfby
     *          dlosing tif dibnnfl bnd sftting tif durrfnt tirfbd's
     *          intfrrupt stbtus
     *
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd
     *          bnd it dofs not pfrmit dbtbgrbms to bf bddfptfd
     *          from tif dbtbgrbm's sfndfr
     *
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt SodkftAddrfss rfdfivf(BytfBufffr dst) tirows IOExdfption;

    /**
     * Sfnds b dbtbgrbm vib tiis dibnnfl.
     *
     * <p> If tiis dibnnfl is in non-blodking modf bnd tifrf is suffidifnt room
     * in tif undfrlying output bufffr, or if tiis dibnnfl is in blodking modf
     * bnd suffidifnt room bfdomfs bvbilbblf, tifn tif rfmbining bytfs in tif
     * givfn bufffr brf trbnsmittfd bs b singlf dbtbgrbm to tif givfn tbrgft
     * bddrfss.
     *
     * <p> Tif dbtbgrbm is trbnsffrrfd from tif bytf bufffr bs if by b rfgulbr
     * {@link WritbblfBytfCibnnfl#writf(jbvb.nio.BytfBufffr) writf} opfrbtion.
     *
     * <p> Tiis mftiod pfrforms fxbdtly tif sbmf sfdurity difdks bs tif {@link
     * jbvb.nft.DbtbgrbmSodkft#sfnd sfnd} mftiod of tif {@link
     * jbvb.nft.DbtbgrbmSodkft} dlbss.  Tibt is, if tif sodkft is not donnfdtfd
     * to b spfdifid rfmotf bddrfss bnd b sfdurity mbnbgfr ibs bffn instbllfd
     * tifn for fbdi dbtbgrbm sfnt tiis mftiod vfrififs tibt tif tbrgft bddrfss
     * bnd port numbfr brf pfrmittfd by tif sfdurity mbnbgfr's {@link
     * jbvb.lbng.SfdurityMbnbgfr#difdkConnfdt difdkConnfdt} mftiod.  Tif
     * ovfrifbd of tiis sfdurity difdk dbn bf bvoidfd by first donnfdting tif
     * sodkft vib tif {@link #donnfdt donnfdt} mftiod.
     *
     * <p> Tiis mftiod mby bf invokfd bt bny timf.  If bnotifr tirfbd ibs
     * blrfbdy initibtfd b writf opfrbtion upon tiis dibnnfl, iowfvfr, tifn bn
     * invodbtion of tiis mftiod will blodk until tif first opfrbtion is
     * domplftf. If tiis dibnnfl's sodkft is not bound tifn tiis mftiod will
     * first dbusf tif sodkft to bf bound to bn bddrfss tibt is bssignfd
     * butombtidblly, bs if by invoking tif {@link #bind bind} mftiod witi b
     * pbrbmftfr of {@dodf null}. </p>
     *
     * @pbrbm  srd
     *         Tif bufffr dontbining tif dbtbgrbm to bf sfnt
     *
     * @pbrbm  tbrgft
     *         Tif bddrfss to wiidi tif dbtbgrbm is to bf sfnt
     *
     * @rfturn   Tif numbfr of bytfs sfnt, wiidi will bf fitifr tif numbfr
     *           of bytfs tibt wfrf rfmbining in tif sourdf bufffr wifn tiis
     *           mftiod wbs invokfd or, if tiis dibnnfl is non-blodking, mby bf
     *           zfro if tifrf wbs insuffidifnt room for tif dbtbgrbm in tif
     *           undfrlying output bufffr
     *
     * @tirows  ClosfdCibnnflExdfption
     *          If tiis dibnnfl is dlosfd
     *
     * @tirows  AsyndironousClosfExdfption
     *          If bnotifr tirfbd dlosfs tiis dibnnfl
     *          wiilf tif rfbd opfrbtion is in progrfss
     *
     * @tirows  ClosfdByIntfrruptExdfption
     *          If bnotifr tirfbd intfrrupts tif durrfnt tirfbd
     *          wiilf tif rfbd opfrbtion is in progrfss, tifrfby
     *          dlosing tif dibnnfl bnd sftting tif durrfnt tirfbd's
     *          intfrrupt stbtus
     *
     * @tirows  SfdurityExdfption
     *          If b sfdurity mbnbgfr ibs bffn instbllfd
     *          bnd it dofs not pfrmit dbtbgrbms to bf sfnt
     *          to tif givfn bddrfss
     *
     * @tirows  IOExdfption
     *          If somf otifr I/O frror oddurs
     */
    publid bbstrbdt int sfnd(BytfBufffr srd, SodkftAddrfss tbrgft)
        tirows IOExdfption;


    // -- BytfCibnnfl opfrbtions --

    /**
     * Rfbds b dbtbgrbm from tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from tif sodkft's pffr.  If
     * tifrf brf morf bytfs in tif dbtbgrbm tibn rfmbin in tif givfn bufffr
     * tifn tif rfmbindfr of tif dbtbgrbm is silfntly disdbrdfd.  Otifrwisf
     * tiis mftiod bfibvfs fxbdtly bs spfdififd in tif {@link
     * RfbdbblfBytfCibnnfl} intfrfbdf.  </p>
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt int rfbd(BytfBufffr dst) tirows IOExdfption;

    /**
     * Rfbds b dbtbgrbm from tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from tif sodkft's pffr.  If
     * tifrf brf morf bytfs in tif dbtbgrbm tibn rfmbin in tif givfn bufffrs
     * tifn tif rfmbindfr of tif dbtbgrbm is silfntly disdbrdfd.  Otifrwisf
     * tiis mftiod bfibvfs fxbdtly bs spfdififd in tif {@link
     * SdbttfringBytfCibnnfl} intfrfbdf.  </p>
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt long rfbd(BytfBufffr[] dsts, int offsft, int lfngti)
        tirows IOExdfption;

    /**
     * Rfbds b dbtbgrbm from tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, bnd it only bddfpts dbtbgrbms from tif sodkft's pffr.  If
     * tifrf brf morf bytfs in tif dbtbgrbm tibn rfmbin in tif givfn bufffrs
     * tifn tif rfmbindfr of tif dbtbgrbm is silfntly disdbrdfd.  Otifrwisf
     * tiis mftiod bfibvfs fxbdtly bs spfdififd in tif {@link
     * SdbttfringBytfCibnnfl} intfrfbdf.  </p>
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid finbl long rfbd(BytfBufffr[] dsts) tirows IOExdfption {
        rfturn rfbd(dsts, 0, dsts.lfngti);
    }

    /**
     * Writfs b dbtbgrbm to tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, in wiidi dbsf it sfnds dbtbgrbms dirfdtly to tif sodkft's
     * pffr.  Otifrwisf it bfibvfs fxbdtly bs spfdififd in tif {@link
     * WritbblfBytfCibnnfl} intfrfbdf.  </p>
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt int writf(BytfBufffr srd) tirows IOExdfption;

    /**
     * Writfs b dbtbgrbm to tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, in wiidi dbsf it sfnds dbtbgrbms dirfdtly to tif sodkft's
     * pffr.  Otifrwisf it bfibvfs fxbdtly bs spfdififd in tif {@link
     * GbtifringBytfCibnnfl} intfrfbdf.  </p>
     *
     * @rfturn   Tif numbfr of bytfs sfnt, wiidi will bf fitifr tif numbfr
     *           of bytfs tibt wfrf rfmbining in tif sourdf bufffr wifn tiis
     *           mftiod wbs invokfd or, if tiis dibnnfl is non-blodking, mby bf
     *           zfro if tifrf wbs insuffidifnt room for tif dbtbgrbm in tif
     *           undfrlying output bufffr
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid bbstrbdt long writf(BytfBufffr[] srds, int offsft, int lfngti)
        tirows IOExdfption;

    /**
     * Writfs b dbtbgrbm to tiis dibnnfl.
     *
     * <p> Tiis mftiod mby only bf invokfd if tiis dibnnfl's sodkft is
     * donnfdtfd, in wiidi dbsf it sfnds dbtbgrbms dirfdtly to tif sodkft's
     * pffr.  Otifrwisf it bfibvfs fxbdtly bs spfdififd in tif {@link
     * GbtifringBytfCibnnfl} intfrfbdf.  </p>
     *
     * @rfturn   Tif numbfr of bytfs sfnt, wiidi will bf fitifr tif numbfr
     *           of bytfs tibt wfrf rfmbining in tif sourdf bufffr wifn tiis
     *           mftiod wbs invokfd or, if tiis dibnnfl is non-blodking, mby bf
     *           zfro if tifrf wbs insuffidifnt room for tif dbtbgrbm in tif
     *           undfrlying output bufffr
     *
     * @tirows  NotYftConnfdtfdExdfption
     *          If tiis dibnnfl's sodkft is not donnfdtfd
     */
    publid finbl long writf(BytfBufffr[] srds) tirows IOExdfption {
        rfturn writf(srds, 0, srds.lfngti);
    }

    /**
     * {@inifritDod}
     * <p>
     * If tifrf is b sfdurity mbnbgfr sft, its {@dodf difdkConnfdt} mftiod is
     * dbllfd witi tif lodbl bddrfss bnd {@dodf -1} bs its brgumfnts to sff
     * if tif opfrbtion is bllowfd. If tif opfrbtion is not bllowfd,
     * b {@dodf SodkftAddrfss} rfprfsfnting tif
     * {@link jbvb.nft.InftAddrfss#gftLoopbbdkAddrfss loopbbdk} bddrfss bnd tif
     * lodbl port of tif dibnnfl's sodkft is rfturnfd.
     *
     * @rfturn  Tif {@dodf SodkftAddrfss} tibt tif sodkft is bound to, or tif
     *          {@dodf SodkftAddrfss} rfprfsfnting tif loopbbdk bddrfss if
     *          dfnifd by tif sfdurity mbnbgfr, or {@dodf null} if tif
     *          dibnnfl's sodkft is not bound
     *
     * @tirows  ClosfdCibnnflExdfption     {@inifritDod}
     * @tirows  IOExdfption                {@inifritDod}
     */
    @Ovfrridf
    publid bbstrbdt SodkftAddrfss gftLodblAddrfss() tirows IOExdfption;

}
