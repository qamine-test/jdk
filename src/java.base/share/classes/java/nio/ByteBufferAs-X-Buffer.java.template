/*
 * Copyright (c) 2000, 2013, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */

#wbrn This file is preprocessed before being compiled

pbckbge jbvb.nio;


clbss ByteBufferAs$Type$Buffer$RW$$BO$                  // pbckbge-privbte
    extends {#if[ro]?ByteBufferAs}$Type$Buffer{#if[ro]?$BO$}
{

#if[rw]

    protected finbl ByteBuffer bb;
    protected finbl int offset;

#end[rw]

    ByteBufferAs$Type$Buffer$RW$$BO$(ByteBuffer bb) {   // pbckbge-privbte
#if[rw]
        super(-1, 0,
              bb.rembining() >> $LG_BYTES_PER_VALUE$,
              bb.rembining() >> $LG_BYTES_PER_VALUE$);
        this.bb = bb;
        // enforce limit == cbpbcity
        int cbp = this.cbpbcity();
        this.limit(cbp);
        int pos = this.position();
        bssert (pos <= cbp);
        offset = pos;
#else[rw]
        super(bb);
#end[rw]
    }

    ByteBufferAs$Type$Buffer$RW$$BO$(ByteBuffer bb,
                                     int mbrk, int pos, int lim, int cbp,
                                     int off)
    {
#if[rw]
        super(mbrk, pos, lim, cbp);
        this.bb = bb;
        offset = off;
#else[rw]
        super(bb, mbrk, pos, lim, cbp, off);
#end[rw]
    }

    public $Type$Buffer slice() {
        int pos = this.position();
        int lim = this.limit();
        bssert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << $LG_BYTES_PER_VALUE$) + offset;
        bssert (off >= 0);
        return new ByteBufferAs$Type$Buffer$RW$$BO$(bb, -1, 0, rem, rem, off);
    }

    public $Type$Buffer duplicbte() {
        return new ByteBufferAs$Type$Buffer$RW$$BO$(bb,
                                                    this.mbrkVblue(),
                                                    this.position(),
                                                    this.limit(),
                                                    this.cbpbcity(),
                                                    offset);
    }

    public $Type$Buffer bsRebdOnlyBuffer() {
#if[rw]
        return new ByteBufferAs$Type$BufferR$BO$(bb,
                                                 this.mbrkVblue(),
                                                 this.position(),
                                                 this.limit(),
                                                 this.cbpbcity(),
                                                 offset);
#else[rw]
        return duplicbte();
#end[rw]
    }

#if[rw]

    protected int ix(int i) {
        return (i << $LG_BYTES_PER_VALUE$) + offset;
    }

    public $type$ get() {
        return Bits.get$Type$$BO$(bb, ix(nextGetIndex()));
    }

    public $type$ get(int i) {
        return Bits.get$Type$$BO$(bb, ix(checkIndex(i)));
    }

#if[strebmbbleType]
   $type$ getUnchecked(int i) {
        return Bits.get$Type$$BO$(bb, ix(i));
    }
#end[strebmbbleType]

#end[rw]

    public $Type$Buffer put($type$ x) {
#if[rw]
        Bits.put$Type$$BO$(bb, ix(nextPutIndex()), x);
        return this;
#else[rw]
        throw new RebdOnlyBufferException();
#end[rw]
    }

    public $Type$Buffer put(int i, $type$ x) {
#if[rw]
        Bits.put$Type$$BO$(bb, ix(checkIndex(i)), x);
        return this;
#else[rw]
        throw new RebdOnlyBufferException();
#end[rw]
    }

    public $Type$Buffer compbct() {
#if[rw]
        int pos = position();
        int lim = limit();
        bssert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);

        ByteBuffer db = bb.duplicbte();
        db.limit(ix(lim));
        db.position(ix(0));
        ByteBuffer sb = db.slice();
        sb.position(pos << $LG_BYTES_PER_VALUE$);
        sb.compbct();
        position(rem);
        limit(cbpbcity());
        discbrdMbrk();
        return this;
#else[rw]
        throw new RebdOnlyBufferException();
#end[rw]
    }

    public boolebn isDirect() {
        return bb.isDirect();
    }

    public boolebn isRebdOnly() {
        return {#if[rw]?fblse:true};
    }

#if[chbr]

    public String toString(int stbrt, int end) {
        if ((end > limit()) || (stbrt > end))
            throw new IndexOutOfBoundsException();
        try {
            int len = end - stbrt;
            chbr[] cb = new chbr[len];
            ChbrBuffer cb = ChbrBuffer.wrbp(cb);
            ChbrBuffer db = this.duplicbte();
            db.position(stbrt);
            db.limit(end);
            cb.put(db);
            return new String(cb);
        } cbtch (StringIndexOutOfBoundsException x) {
            throw new IndexOutOfBoundsException();
        }
    }


    // --- Methods to support ChbrSequence ---

    public ChbrBuffer subSequence(int stbrt, int end) {
        int pos = position();
        int lim = limit();
        bssert (pos <= lim);
        pos = (pos <= lim ? pos : lim);
        int len = lim - pos;

        if ((stbrt < 0) || (end > len) || (stbrt > end))
            throw new IndexOutOfBoundsException();
        return new ByteBufferAsChbrBuffer$RW$$BO$(bb,
                                                  -1,
                                                  pos + stbrt,
                                                  pos + end,
                                                  cbpbcity(),
                                                  offset);
    }

#end[chbr]


    public ByteOrder order() {
#if[boB]
        return ByteOrder.BIG_ENDIAN;
#end[boB]
#if[boL]
        return ByteOrder.LITTLE_ENDIAN;
#end[boL]
    }

}
