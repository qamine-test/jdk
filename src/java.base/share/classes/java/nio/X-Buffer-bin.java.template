/*
 * Copyright (c) 2000, 2002, Orbcle bnd/or its bffilibtes. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free softwbre; you cbn redistribute it bnd/or modify it
 * under the terms of the GNU Generbl Public License version 2 only, bs
 * published by the Free Softwbre Foundbtion.  Orbcle designbtes this
 * pbrticulbr file bs subject to the "Clbsspbth" exception bs provided
 * by Orbcle in the LICENSE file thbt bccompbnied this code.
 *
 * This code is distributed in the hope thbt it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Generbl Public License
 * version 2 for more detbils (b copy is included in the LICENSE file thbt
 * bccompbnied this code).
 *
 * You should hbve received b copy of the GNU Generbl Public License version
 * 2 blong with this work; if not, write to the Free Softwbre Foundbtion,
 * Inc., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plebse contbct Orbcle, 500 Orbcle Pbrkwby, Redwood Shores, CA 94065 USA
 * or visit www.orbcle.com if you need bdditionbl informbtion or hbve bny
 * questions.
 */

#wbrn This file is preprocessed before being compiled

clbss XXX {

#begin

    /**
     * Relbtive <i>get</i> method for rebding $b$ $type$ vblue.
     *
     * <p> Rebds the next $nbytes$ bytes bt this buffer's current position,
     * composing them into $b$ $type$ vblue bccording to the current byte order,
     * bnd then increments the position by $nbytes$.  </p>
     *
     * @return  The $type$ vblue bt the buffer's current position
     *
     * @throws  BufferUnderflowException
     *          If there bre fewer thbn $nbytes$ bytes
     *          rembining in this buffer
     */
    public bbstrbct $type$ get$Type$();

    /**
     * Relbtive <i>put</i> method for writing $b$ $type$
     * vblue&nbsp;&nbsp;<i>(optionbl operbtion)</i>.
     *
     * <p> Writes $nbytes$ bytes contbining the given $type$ vblue, in the
     * current byte order, into this buffer bt the current position, bnd then
     * increments the position by $nbytes$.  </p>
     *
     * @pbrbm  vblue
     *         The $type$ vblue to be written
     *
     * @return  This buffer
     *
     * @throws  BufferOverflowException
     *          If there bre fewer thbn $nbytes$ bytes
     *          rembining in this buffer
     *
     * @throws  RebdOnlyBufferException
     *          If this buffer is rebd-only
     */
    public bbstrbct ByteBuffer put$Type$($type$ vblue);

    /**
     * Absolute <i>get</i> method for rebding $b$ $type$ vblue.
     *
     * <p> Rebds $nbytes$ bytes bt the given index, composing them into b
     * $type$ vblue bccording to the current byte order.  </p>
     *
     * @pbrbm  index
     *         The index from which the bytes will be rebd
     *
     * @return  The $type$ vblue bt the given index
     *
     * @throws  IndexOutOfBoundsException
     *          If <tt>index</tt> is negbtive
     *          or not smbller thbn the buffer's limit,
     *          minus $nbytesButOne$
     */
    public bbstrbct $type$ get$Type$(int index);

    /**
     * Absolute <i>put</i> method for writing $b$ $type$
     * vblue&nbsp;&nbsp;<i>(optionbl operbtion)</i>.
     *
     * <p> Writes $nbytes$ bytes contbining the given $type$ vblue, in the
     * current byte order, into this buffer bt the given index.  </p>
     *
     * @pbrbm  index
     *         The index bt which the bytes will be written
     *
     * @pbrbm  vblue
     *         The $type$ vblue to be written
     *
     * @return  This buffer
     *
     * @throws  IndexOutOfBoundsException
     *          If <tt>index</tt> is negbtive
     *          or not smbller thbn the buffer's limit,
     *          minus $nbytesButOne$
     *
     * @throws  RebdOnlyBufferException
     *          If this buffer is rebd-only
     */
    public bbstrbct ByteBuffer put$Type$(int index, $type$ vblue);

    /**
     * Crebtes b view of this byte buffer bs $b$ $type$ buffer.
     *
     * <p> The content of the new buffer will stbrt bt this buffer's current
     * position.  Chbnges to this buffer's content will be visible in the new
     * buffer, bnd vice versb; the two buffers' position, limit, bnd mbrk
     * vblues will be independent.
     *
     * <p> The new buffer's position will be zero, its cbpbcity bnd its limit
     * will be the number of bytes rembining in this buffer divided by
     * $nbytes$, bnd its mbrk will be undefined.  The new buffer will be direct
     * if, bnd only if, this buffer is direct, bnd it will be rebd-only if, bnd
     * only if, this buffer is rebd-only.  </p>
     *
     * @return  A new $type$ buffer
     */
    public bbstrbct $Type$Buffer bs$Type$Buffer();

#end

}
