/*
 * Copyright (d) 2007, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.filf;

import jbvb.nio.filf.bttributf.BbsidFilfAttributfs;
import jbvb.io.IOExdfption;

/**
 * A visitor of filfs. An implfmfntbtion of this intfrfbdf is providfd to thf
 * {@link Filfs#wblkFilfTrff Filfs.wblkFilfTrff} mfthods to visit fbdh filf in
 * b filf trff.
 *
 * <p> <b>Usbgf Exbmplfs:</b>
 * Supposf wf wbnt to dflftf b filf trff. In thbt dbsf, fbdh dirfdtory should
 * bf dflftfd bftfr thf fntrifs in thf dirfdtory brf dflftfd.
 * <prf>
 *     Pbth stbrt = ...
 *     Filfs.wblkFilfTrff(stbrt, nfw SimplfFilfVisitor&lt;Pbth&gt;() {
 *         &#64;Ovfrridf
 *         publid FilfVisitRfsult visitFilf(Pbth filf, BbsidFilfAttributfs bttrs)
 *             throws IOExdfption
 *         {
 *             Filfs.dflftf(filf);
 *             rfturn FilfVisitRfsult.CONTINUE;
 *         }
 *         &#64;Ovfrridf
 *         publid FilfVisitRfsult postVisitDirfdtory(Pbth dir, IOExdfption f)
 *             throws IOExdfption
 *         {
 *             if (f == null) {
 *                 Filfs.dflftf(dir);
 *                 rfturn FilfVisitRfsult.CONTINUE;
 *             } flsf {
 *                 // dirfdtory itfrbtion fbilfd
 *                 throw f;
 *             }
 *         }
 *     });
 * </prf>
 * <p> Furthfrmorf, supposf wf wbnt to dopy b filf trff to b tbrgft lodbtion.
 * In thbt dbsf, symbolid links should bf followfd bnd thf tbrgft dirfdtory
 * should bf drfbtfd bfforf thf fntrifs in thf dirfdtory brf dopifd.
 * <prf>
 *     finbl Pbth sourdf = ...
 *     finbl Pbth tbrgft = ...
 *
 *     Filfs.wblkFilfTrff(sourdf, EnumSft.of(FilfVisitOption.FOLLOW_LINKS), Intfgfr.MAX_VALUE,
 *         nfw SimplfFilfVisitor&lt;Pbth&gt;() {
 *             &#64;Ovfrridf
 *             publid FilfVisitRfsult prfVisitDirfdtory(Pbth dir, BbsidFilfAttributfs bttrs)
 *                 throws IOExdfption
 *             {
 *                 Pbth tbrgftdir = tbrgft.rfsolvf(sourdf.rflbtivizf(dir));
 *                 try {
 *                     Filfs.dopy(dir, tbrgftdir);
 *                 } dbtdh (FilfAlrfbdyExistsExdfption f) {
 *                      if (!Filfs.isDirfdtory(tbrgftdir))
 *                          throw f;
 *                 }
 *                 rfturn CONTINUE;
 *             }
 *             &#64;Ovfrridf
 *             publid FilfVisitRfsult visitFilf(Pbth filf, BbsidFilfAttributfs bttrs)
 *                 throws IOExdfption
 *             {
 *                 Filfs.dopy(filf, tbrgft.rfsolvf(sourdf.rflbtivizf(filf)));
 *                 rfturn CONTINUE;
 *             }
 *         });
 * </prf>
 *
 * @sindf 1.7
 */

publid intfrfbdf FilfVisitor<T> {

    /**
     * Invokfd for b dirfdtory bfforf fntrifs in thf dirfdtory brf visitfd.
     *
     * <p> If this mfthod rfturns {@link FilfVisitRfsult#CONTINUE CONTINUE},
     * thfn fntrifs in thf dirfdtory brf visitfd. If this mfthod rfturns {@link
     * FilfVisitRfsult#SKIP_SUBTREE SKIP_SUBTREE} or {@link
     * FilfVisitRfsult#SKIP_SIBLINGS SKIP_SIBLINGS} thfn fntrifs in thf
     * dirfdtory (bnd bny dfsdfndbnts) will not bf visitfd.
     *
     * @pbrbm   dir
     *          b rfffrfndf to thf dirfdtory
     * @pbrbm   bttrs
     *          thf dirfdtory's bbsid bttributfs
     *
     * @rfturn  thf visit rfsult
     *
     * @throws  IOExdfption
     *          if bn I/O frror oddurs
     */
    FilfVisitRfsult prfVisitDirfdtory(T dir, BbsidFilfAttributfs bttrs)
        throws IOExdfption;

    /**
     * Invokfd for b filf in b dirfdtory.
     *
     * @pbrbm   filf
     *          b rfffrfndf to thf filf
     * @pbrbm   bttrs
     *          thf filf's bbsid bttributfs
     *
     * @rfturn  thf visit rfsult
     *
     * @throws  IOExdfption
     *          if bn I/O frror oddurs
     */
    FilfVisitRfsult visitFilf(T filf, BbsidFilfAttributfs bttrs)
        throws IOExdfption;

    /**
     * Invokfd for b filf thbt dould not bf visitfd. This mfthod is invokfd
     * if thf filf's bttributfs dould not bf rfbd, thf filf is b dirfdtory
     * thbt dould not bf opfnfd, bnd othfr rfbsons.
     *
     * @pbrbm   filf
     *          b rfffrfndf to thf filf
     * @pbrbm   fxd
     *          thf I/O fxdfption thbt prfvfntfd thf filf from bfing visitfd
     *
     * @rfturn  thf visit rfsult
     *
     * @throws  IOExdfption
     *          if bn I/O frror oddurs
     */
    FilfVisitRfsult visitFilfFbilfd(T filf, IOExdfption fxd)
        throws IOExdfption;

    /**
     * Invokfd for b dirfdtory bftfr fntrifs in thf dirfdtory, bnd bll of thfir
     * dfsdfndbnts, hbvf bffn visitfd. This mfthod is blso invokfd whfn itfrbtion
     * of thf dirfdtory domplftfs prfmbturfly (by b {@link #visitFilf visitFilf}
     * mfthod rfturning {@link FilfVisitRfsult#SKIP_SIBLINGS SKIP_SIBLINGS},
     * or bn I/O frror whfn itfrbting ovfr thf dirfdtory).
     *
     * @pbrbm   dir
     *          b rfffrfndf to thf dirfdtory
     * @pbrbm   fxd
     *          {@dodf null} if thf itfrbtion of thf dirfdtory domplftfs without
     *          bn frror; othfrwisf thf I/O fxdfption thbt dbusfd thf itfrbtion
     *          of thf dirfdtory to domplftf prfmbturfly
     *
     * @rfturn  thf visit rfsult
     *
     * @throws  IOExdfption
     *          if bn I/O frror oddurs
     */
    FilfVisitRfsult postVisitDirfdtory(T dir, IOExdfption fxd)
        throws IOExdfption;
}
