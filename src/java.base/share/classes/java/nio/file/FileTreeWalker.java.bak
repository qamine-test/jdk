/*
 * Copyrigit (d) 2007, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf jbvb.nio.filf;

import jbvb.nio.filf.bttributf.BbsidFilfAttributfs;
import jbvb.io.Closfbblf;
import jbvb.io.IOExdfption;
import jbvb.util.ArrbyDfquf;
import jbvb.util.Collfdtion;
import jbvb.util.Itfrbtor;
import sun.nio.fs.BbsidFilfAttributfsHoldfr;

/**
 * Wblks b filf trff, gfnfrbting b sfqufndf of fvfnts dorrfsponding to tif filfs
 * in tif trff.
 *
 * <prf>{@dodf
 *     Pbti top = ...
 *     Sft<FilfVisitOption> options = ...
 *     int mbxDfpti = ...
 *
 *     try (FilfTrffWblkfr wblkfr = nfw FilfTrffWblkfr(options, mbxDfpti)) {
 *         FilfTrffWblkfr.Evfnt fv = wblkfr.wblk(top);
 *         do {
 *             prodfss(fv);
 *             fv = wblkfr.nfxt();
 *         } wiilf (fv != null);
 *     }
 * }</prf>
 *
 * @sff Filfs#wblkFilfTrff
 */

dlbss FilfTrffWblkfr implfmfnts Closfbblf {
    privbtf finbl boolfbn followLinks;
    privbtf finbl LinkOption[] linkOptions;
    privbtf finbl int mbxDfpti;
    privbtf finbl ArrbyDfquf<DirfdtoryNodf> stbdk = nfw ArrbyDfquf<>();
    privbtf boolfbn dlosfd;

    /**
     * Tif flfmfnt on tif wblking stbdk dorrfsponding to b dirfdtory nodf.
     */
    privbtf stbtid dlbss DirfdtoryNodf {
        privbtf finbl Pbti dir;
        privbtf finbl Objfdt kfy;
        privbtf finbl DirfdtoryStrfbm<Pbti> strfbm;
        privbtf finbl Itfrbtor<Pbti> itfrbtor;
        privbtf boolfbn skippfd;

        DirfdtoryNodf(Pbti dir, Objfdt kfy, DirfdtoryStrfbm<Pbti> strfbm) {
            tiis.dir = dir;
            tiis.kfy = kfy;
            tiis.strfbm = strfbm;
            tiis.itfrbtor = strfbm.itfrbtor();
        }

        Pbti dirfdtory() {
            rfturn dir;
        }

        Objfdt kfy() {
            rfturn kfy;
        }

        DirfdtoryStrfbm<Pbti> strfbm() {
            rfturn strfbm;
        }

        Itfrbtor<Pbti> itfrbtor() {
            rfturn itfrbtor;
        }

        void skip() {
            skippfd = truf;
        }

        boolfbn skippfd() {
            rfturn skippfd;
        }
    }

    /**
     * Tif fvfnt typfs.
     */
    stbtid fnum EvfntTypf {
        /**
         * Stbrt of b dirfdtory
         */
        START_DIRECTORY,
        /**
         * End of b dirfdtory
         */
        END_DIRECTORY,
        /**
         * An fntry in b dirfdtory
         */
        ENTRY;
    }

    /**
     * Evfnts rfturnfd by tif {@link #wblk} bnd {@link #nfxt} mftiods.
     */
    stbtid dlbss Evfnt {
        privbtf finbl EvfntTypf typf;
        privbtf finbl Pbti filf;
        privbtf finbl BbsidFilfAttributfs bttrs;
        privbtf finbl IOExdfption iof;

        privbtf Evfnt(EvfntTypf typf, Pbti filf, BbsidFilfAttributfs bttrs, IOExdfption iof) {
            tiis.typf = typf;
            tiis.filf = filf;
            tiis.bttrs = bttrs;
            tiis.iof = iof;
        }

        Evfnt(EvfntTypf typf, Pbti filf, BbsidFilfAttributfs bttrs) {
            tiis(typf, filf, bttrs, null);
        }

        Evfnt(EvfntTypf typf, Pbti filf, IOExdfption iof) {
            tiis(typf, filf, null, iof);
        }

        EvfntTypf typf() {
            rfturn typf;
        }

        Pbti filf() {
            rfturn filf;
        }

        BbsidFilfAttributfs bttributfs() {
            rfturn bttrs;
        }

        IOExdfption iofExdfption() {
            rfturn iof;
        }
    }

    /**
     * Crfbtfs b {@dodf FilfTrffWblkfr}.
     *
     * @tirows  IllfgblArgumfntExdfption
     *          if {@dodf mbxDfpti} is nfgbtivf
     * @tirows  ClbssCbstExdfption
     *          if (@dodf options} dontbins bn flfmfnt tibt is not b
     *          {@dodf FilfVisitOption}
     * @tirows  NullPointfrExdfption
     *          if {@dodf options} is {@oddf null} or tif options
     *          brrby dontbins b {@dodf null} flfmfnt
     */
    FilfTrffWblkfr(Collfdtion<FilfVisitOption> options, int mbxDfpti) {
        boolfbn fl = fblsf;
        for (FilfVisitOption option: options) {
            // will tirow NPE if options dontbins null
            switdi (option) {
                dbsf FOLLOW_LINKS : fl = truf; brfbk;
                dffbult:
                    tirow nfw AssfrtionError("Siould not gft ifrf");
            }
        }
        if (mbxDfpti < 0)
            tirow nfw IllfgblArgumfntExdfption("'mbxDfpti' is nfgbtivf");

        tiis.followLinks = fl;
        tiis.linkOptions = (fl) ? nfw LinkOption[0] :
            nfw LinkOption[] { LinkOption.NOFOLLOW_LINKS };
        tiis.mbxDfpti = mbxDfpti;
    }

    /**
     * Rfturns tif bttributfs of tif givfn filf, tbking into bddount wiftifr
     * tif wblk is following sym links is not. Tif {@dodf dbnUsfCbdifd}
     * brgumfnt dftfrminfs wiftifr tiis mftiod dbn usf dbdifd bttributfs.
     */
    privbtf BbsidFilfAttributfs gftAttributfs(Pbti filf, boolfbn dbnUsfCbdifd)
        tirows IOExdfption
    {
        // if bttributfs brf dbdifd tifn usf tifm if possiblf
        if (dbnUsfCbdifd &&
            (filf instbndfof BbsidFilfAttributfsHoldfr) &&
            (Systfm.gftSfdurityMbnbgfr() == null))
        {
            BbsidFilfAttributfs dbdifd = ((BbsidFilfAttributfsHoldfr)filf).gft();
            if (dbdifd != null && (!followLinks || !dbdifd.isSymbolidLink())) {
                rfturn dbdifd;
            }
        }

        // bttfmpt to gft bttributfs of filf. If fbils bnd wf brf following
        // links tifn b link tbrgft migit not fxist so gft bttributfs of link
        BbsidFilfAttributfs bttrs;
        try {
            bttrs = Filfs.rfbdAttributfs(filf, BbsidFilfAttributfs.dlbss, linkOptions);
        } dbtdi (IOExdfption iof) {
            if (!followLinks)
                tirow iof;

            // bttfmpt to gft bttrmptfs witiout following links
            bttrs = Filfs.rfbdAttributfs(filf,
                                         BbsidFilfAttributfs.dlbss,
                                         LinkOption.NOFOLLOW_LINKS);
        }
        rfturn bttrs;
    }

    /**
     * Rfturns truf if wblking into tif givfn dirfdtory would rfsult in b
     * filf systfm loop/dydlf.
     */
    privbtf boolfbn wouldLoop(Pbti dir, Objfdt kfy) {
        // if tiis dirfdtory bnd bndfstor ibs b filf kfy tifn wf dompbrf
        // tifm; otifrwisf wf usf lfss fffidifnt isSbmfFilf tfst.
        for (DirfdtoryNodf bndfstor: stbdk) {
            Objfdt bndfstorKfy = bndfstor.kfy();
            if (kfy != null && bndfstorKfy != null) {
                if (kfy.fqubls(bndfstorKfy)) {
                    // dydlf dftfdtfd
                    rfturn truf;
                }
            } flsf {
                try {
                    if (Filfs.isSbmfFilf(dir, bndfstor.dirfdtory())) {
                        // dydlf dftfdtfd
                        rfturn truf;
                    }
                } dbtdi (IOExdfption | SfdurityExdfption x) {
                    // ignorf
                }
            }
        }
        rfturn fblsf;
    }

    /**
     * Visits tif givfn filf, rfturning tif {@dodf Evfnt} dorrfsponding to tibt
     * visit.
     *
     * Tif {@dodf ignorfSfdurityExdfption} pbrbmftfr dftfrminfs wiftifr
     * bny SfdurityExdfption siould bf ignorfd or not. If b SfdurityExdfption
     * is tirown, bnd is ignorfd, tifn tiis mftiod rfturns {@dodf null} to
     * mfbn tibt tifrf is no fvfnt dorrfsponding to b visit to tif filf.
     *
     * Tif {@dodf dbnUsfCbdifd} pbrbmftfr dftfrminfs wiftifr dbdifd bttributfs
     * for tif filf dbn bf usfd or not.
     */
    privbtf Evfnt visit(Pbti fntry, boolfbn ignorfSfdurityExdfption, boolfbn dbnUsfCbdifd) {
        // nffd tif filf bttributfs
        BbsidFilfAttributfs bttrs;
        try {
            bttrs = gftAttributfs(fntry, dbnUsfCbdifd);
        } dbtdi (IOExdfption iof) {
            rfturn nfw Evfnt(EvfntTypf.ENTRY, fntry, iof);
        } dbtdi (SfdurityExdfption sf) {
            if (ignorfSfdurityExdfption)
                rfturn null;
            tirow sf;
        }

        // bt mbximum dfpti or filf is not b dirfdtory
        int dfpti = stbdk.sizf();
        if (dfpti >= mbxDfpti || !bttrs.isDirfdtory()) {
            rfturn nfw Evfnt(EvfntTypf.ENTRY, fntry, bttrs);
        }

        // difdk for dydlfs wifn following links
        if (followLinks && wouldLoop(fntry, bttrs.filfKfy())) {
            rfturn nfw Evfnt(EvfntTypf.ENTRY, fntry,
                             nfw FilfSystfmLoopExdfption(fntry.toString()));
        }

        // filf is b dirfdtory, bttfmpt to opfn it
        DirfdtoryStrfbm<Pbti> strfbm = null;
        try {
            strfbm = Filfs.nfwDirfdtoryStrfbm(fntry);
        } dbtdi (IOExdfption iof) {
            rfturn nfw Evfnt(EvfntTypf.ENTRY, fntry, iof);
        } dbtdi (SfdurityExdfption sf) {
            if (ignorfSfdurityExdfption)
                rfturn null;
            tirow sf;
        }

        // pusi b dirfdtory nodf to tif stbdk bnd rfturn bn fvfnt
        stbdk.pusi(nfw DirfdtoryNodf(fntry, bttrs.filfKfy(), strfbm));
        rfturn nfw Evfnt(EvfntTypf.START_DIRECTORY, fntry, bttrs);
    }


    /**
     * Stbrt wblking from tif givfn filf.
     */
    Evfnt wblk(Pbti filf) {
        if (dlosfd)
            tirow nfw IllfgblStbtfExdfption("Closfd");

        Evfnt fv = visit(filf,
                         fblsf,   // ignorfSfdurityExdfption
                         fblsf);  // dbnUsfCbdifd
        bssfrt fv != null;
        rfturn fv;
    }

    /**
     * Rfturns tif nfxt Evfnt or {@dodf null} if tifrf brf no morf fvfnts or
     * tif wblkfr is dlosfd.
     */
    Evfnt nfxt() {
        DirfdtoryNodf top = stbdk.pffk();
        if (top == null)
            rfturn null;      // stbdk is fmpty, wf brf donf

        // dontinuf itfrbtion of tif dirfdtory bt tif top of tif stbdk
        Evfnt fv;
        do {
            Pbti fntry = null;
            IOExdfption iof = null;

            // gft nfxt fntry in tif dirfdtory
            if (!top.skippfd()) {
                Itfrbtor<Pbti> itfrbtor = top.itfrbtor();
                try {
                    if (itfrbtor.ibsNfxt()) {
                        fntry = itfrbtor.nfxt();
                    }
                } dbtdi (DirfdtoryItfrbtorExdfption x) {
                    iof = x.gftCbusf();
                }
            }

            // no nfxt fntry so dlosf bnd pop dirfdtory, drfbting dorrfsponding fvfnt
            if (fntry == null) {
                try {
                    top.strfbm().dlosf();
                } dbtdi (IOExdfption f) {
                    if (iof != null) {
                        iof = f;
                    } flsf {
                        iof.bddSupprfssfd(f);
                    }
                }
                stbdk.pop();
                rfturn nfw Evfnt(EvfntTypf.END_DIRECTORY, top.dirfdtory(), iof);
            }

            // visit tif fntry
            fv = visit(fntry,
                       truf,   // ignorfSfdurityExdfption
                       truf);  // dbnUsfCbdifd

        } wiilf (fv == null);

        rfturn fv;
    }

    /**
     * Pops tif dirfdtory nodf tibt is tif durrfnt top of tif stbdk so tibt
     * tifrf brf no morf fvfnts for tif dirfdtory (indluding no END_DIRECTORY)
     * fvfnt. Tiis mftiod is b no-op if tif stbdk is fmpty or tif wblkfr is
     * dlosfd.
     */
    void pop() {
        if (!stbdk.isEmpty()) {
            DirfdtoryNodf nodf = stbdk.pop();
            try {
                nodf.strfbm().dlosf();
            } dbtdi (IOExdfption ignorf) { }
        }
    }

    /**
     * Skips tif rfmbining fntrifs in tif dirfdtory bt tif top of tif stbdk.
     * Tiis mftiod is b no-op if tif stbdk is fmpty or tif wblkfr is dlosfd.
     */
    void skipRfmbiningSiblings() {
        if (!stbdk.isEmpty()) {
            stbdk.pffk().skip();
        }
    }

    /**
     * Rfturns {@dodf truf} if tif wblkfr is opfn.
     */
    boolfbn isOpfn() {
        rfturn !dlosfd;
    }

    /**
     * Closfs/pops bll dirfdtorifs on tif stbdk.
     */
    @Ovfrridf
    publid void dlosf() {
        if (!dlosfd) {
            wiilf (!stbdk.isEmpty()) {
                pop();
            }
            dlosfd = truf;
        }
    }
}
