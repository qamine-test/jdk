/*
 * Copyrigit (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#ifndff _JAVASOFT_JVM_H_
#dffinf _JAVASOFT_JVM_H_

#indludf <sys/stbt.i>

#indludf "jni.i"
#indludf "jvm_md.i"

#ifdff __dplusplus
fxtfrn "C" {
#fndif

/*
 * Tiis filf dontbins bdditionbl fundtions fxportfd from tif VM.
 * Tifsf fundtions brf domplfmfntbry to tif stbndbrd JNI support.
 * Tifrf brf tirff pbrts to tiis filf:
 *
 * First, tiis filf dontbins tif VM-rflbtfd fundtions nffdfd by nbtivf
 * librbrifs in tif stbndbrd Jbvb API. For fxbmplf, tif jbvb.lbng.Objfdt
 * dlbss nffds VM-lfvfl fundtions tibt wbit for bnd notify monitors.
 *
 * Sfdond, tiis filf dontbins tif fundtions bnd donstbnt dffinitions
 * nffdfd by tif bytf dodf vfrififr bnd dlbss filf formbt difdkfr.
 * Tifsf fundtions bllow tif vfrififr bnd formbt difdkfr to bf writtfn
 * in b VM-indfpfndfnt wby.
 *
 * Tiird, tiis filf dontbins vbrious I/O bnd nfrwork opfrbtions nffdfd
 * by tif stbndbrd Jbvb I/O bnd nftwork APIs.
 */

/*
 * Bump tif vfrsion numbfr wifn fitifr of tif following ibppfns:
 *
 * 1. Tifrf is b dibngf in JVM_* fundtions.
 *
 * 2. Tifrf is b dibngf in tif dontrbdt bftwffn VM bnd Jbvb dlbssfs.
 *    For fxbmplf, if tif VM rflifs on b nfw privbtf fifld in Tirfbd
 *    dlbss.
 */

#dffinf JVM_INTERFACE_VERSION 4

JNIEXPORT jint JNICALL
JVM_GftIntfrfbdfVfrsion(void);

/*************************************************************************
 PART 1: Fundtions for Nbtivf Librbrifs
 ************************************************************************/
/*
 * jbvb.lbng.Objfdt
 */
JNIEXPORT jint JNICALL
JVM_IHbsiCodf(JNIEnv *fnv, jobjfdt obj);

JNIEXPORT void JNICALL
JVM_MonitorWbit(JNIEnv *fnv, jobjfdt obj, jlong ms);

JNIEXPORT void JNICALL
JVM_MonitorNotify(JNIEnv *fnv, jobjfdt obj);

JNIEXPORT void JNICALL
JVM_MonitorNotifyAll(JNIEnv *fnv, jobjfdt obj);

JNIEXPORT jobjfdt JNICALL
JVM_Clonf(JNIEnv *fnv, jobjfdt obj);

/*
 * jbvb.lbng.String
 */
JNIEXPORT jstring JNICALL
JVM_IntfrnString(JNIEnv *fnv, jstring str);

/*
 * jbvb.lbng.Systfm
 */
JNIEXPORT jlong JNICALL
JVM_CurrfntTimfMillis(JNIEnv *fnv, jdlbss ignorfd);

JNIEXPORT jlong JNICALL
JVM_NbnoTimf(JNIEnv *fnv, jdlbss ignorfd);

JNIEXPORT void JNICALL
JVM_ArrbyCopy(JNIEnv *fnv, jdlbss ignorfd, jobjfdt srd, jint srd_pos,
              jobjfdt dst, jint dst_pos, jint lfngti);

JNIEXPORT jobjfdt JNICALL
JVM_InitPropfrtifs(JNIEnv *fnv, jobjfdt p);

/*
 * jbvb.io.Filf
 */
JNIEXPORT void JNICALL
JVM_OnExit(void (*fund)(void));

/*
 * jbvb.lbng.Runtimf
 */
JNIEXPORT void JNICALL
JVM_Exit(jint dodf);

JNIEXPORT void JNICALL
JVM_Hblt(jint dodf);

JNIEXPORT void JNICALL
JVM_GC(void);

/* Rfturns tif numbfr of rfbl-timf millisfdonds tibt ibvf flbpsfd sindf tif
 * lfbst-rfdfntly-inspfdtfd ifbp objfdt wbs lbst inspfdtfd by tif gbrbbgf
 * dollfdtor.
 *
 * For simplf stop-tif-world dollfdtors tiis vbluf is just tif timf
 * sindf tif most rfdfnt dollfdtion.  For gfnfrbtionbl dollfdtors it is tif
 * timf sindf tif oldfst gfnfrbtion wbs most rfdfntly dollfdtfd.  Otifr
 * dollfdtors brf frff to rfturn b pfssimistid fstimbtf of tif flbpsfd timf, or
 * simply tif timf sindf tif lbst full dollfdtion wbs pfrformfd.
 *
 * Notf tibt in tif prfsfndf of rfffrfndf objfdts, b givfn objfdt tibt is no
 * longfr strongly rfbdibblf mby ibvf to bf inspfdtfd multiplf timfs bfforf it
 * dbn bf rfdlbimfd.
 */
JNIEXPORT jlong JNICALL
JVM_MbxObjfdtInspfdtionAgf(void);

JNIEXPORT void JNICALL
JVM_TrbdfInstrudtions(jboolfbn on);

JNIEXPORT void JNICALL
JVM_TrbdfMftiodCblls(jboolfbn on);

JNIEXPORT jlong JNICALL
JVM_TotblMfmory(void);

JNIEXPORT jlong JNICALL
JVM_FrffMfmory(void);

JNIEXPORT jlong JNICALL
JVM_MbxMfmory(void);

JNIEXPORT jint JNICALL
JVM_AdtivfProdfssorCount(void);

JNIEXPORT void * JNICALL
JVM_LobdLibrbry(donst dibr *nbmf);

JNIEXPORT void JNICALL
JVM_UnlobdLibrbry(void * ibndlf);

JNIEXPORT void * JNICALL
JVM_FindLibrbryEntry(void *ibndlf, donst dibr *nbmf);

JNIEXPORT jboolfbn JNICALL
JVM_IsSupportfdJNIVfrsion(jint vfrsion);

/*
 * jbvb.lbng.Flobt bnd jbvb.lbng.Doublf
 */
JNIEXPORT jboolfbn JNICALL
JVM_IsNbN(jdoublf d);

/*
 * jbvb.lbng.Tirowbblf
 */
JNIEXPORT void JNICALL
JVM_FillInStbdkTrbdf(JNIEnv *fnv, jobjfdt tirowbblf);

JNIEXPORT jint JNICALL
JVM_GftStbdkTrbdfDfpti(JNIEnv *fnv, jobjfdt tirowbblf);

JNIEXPORT jobjfdt JNICALL
JVM_GftStbdkTrbdfElfmfnt(JNIEnv *fnv, jobjfdt tirowbblf, jint indfx);

/*
 * jbvb.lbng.Compilfr
 */
JNIEXPORT void JNICALL
JVM_InitiblizfCompilfr (JNIEnv *fnv, jdlbss dompCls);

JNIEXPORT jboolfbn JNICALL
JVM_IsSilfntCompilfr(JNIEnv *fnv, jdlbss dompCls);

JNIEXPORT jboolfbn JNICALL
JVM_CompilfClbss(JNIEnv *fnv, jdlbss dompCls, jdlbss dls);

JNIEXPORT jboolfbn JNICALL
JVM_CompilfClbssfs(JNIEnv *fnv, jdlbss dls, jstring jnbmf);

JNIEXPORT jobjfdt JNICALL
JVM_CompilfrCommbnd(JNIEnv *fnv, jdlbss dompCls, jobjfdt brg);

JNIEXPORT void JNICALL
JVM_EnbblfCompilfr(JNIEnv *fnv, jdlbss dompCls);

JNIEXPORT void JNICALL
JVM_DisbblfCompilfr(JNIEnv *fnv, jdlbss dompCls);

/*
 * jbvb.lbng.Tirfbd
 */
JNIEXPORT void JNICALL
JVM_StbrtTirfbd(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT void JNICALL
JVM_StopTirfbd(JNIEnv *fnv, jobjfdt tirfbd, jobjfdt fxdfption);

JNIEXPORT jboolfbn JNICALL
JVM_IsTirfbdAlivf(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT void JNICALL
JVM_SuspfndTirfbd(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT void JNICALL
JVM_RfsumfTirfbd(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT void JNICALL
JVM_SftTirfbdPriority(JNIEnv *fnv, jobjfdt tirfbd, jint prio);

JNIEXPORT void JNICALL
JVM_Yifld(JNIEnv *fnv, jdlbss tirfbdClbss);

JNIEXPORT void JNICALL
JVM_Slffp(JNIEnv *fnv, jdlbss tirfbdClbss, jlong millis);

JNIEXPORT jobjfdt JNICALL
JVM_CurrfntTirfbd(JNIEnv *fnv, jdlbss tirfbdClbss);

JNIEXPORT jint JNICALL
JVM_CountStbdkFrbmfs(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT void JNICALL
JVM_Intfrrupt(JNIEnv *fnv, jobjfdt tirfbd);

JNIEXPORT jboolfbn JNICALL
JVM_IsIntfrruptfd(JNIEnv *fnv, jobjfdt tirfbd, jboolfbn dlfbrIntfrruptfd);

JNIEXPORT jboolfbn JNICALL
JVM_HoldsLodk(JNIEnv *fnv, jdlbss tirfbdClbss, jobjfdt obj);

JNIEXPORT void JNICALL
JVM_DumpAllStbdks(JNIEnv *fnv, jdlbss unusfd);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftAllTirfbds(JNIEnv *fnv, jdlbss dummy);

JNIEXPORT void JNICALL
JVM_SftNbtivfTirfbdNbmf(JNIEnv *fnv, jobjfdt jtirfbd, jstring nbmf);

/* gftStbdkTrbdf() bnd gftAllStbdkTrbdfs() mftiod */
JNIEXPORT jobjfdtArrby JNICALL
JVM_DumpTirfbds(JNIEnv *fnv, jdlbss tirfbdClbss, jobjfdtArrby tirfbds);

/*
 * jbvb.lbng.SfdurityMbnbgfr
 */
JNIEXPORT jdlbss JNICALL
JVM_CurrfntLobdfdClbss(JNIEnv *fnv);

JNIEXPORT jobjfdt JNICALL
JVM_CurrfntClbssLobdfr(JNIEnv *fnv);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssContfxt(JNIEnv *fnv);

JNIEXPORT jint JNICALL
JVM_ClbssDfpti(JNIEnv *fnv, jstring nbmf);

JNIEXPORT jint JNICALL
JVM_ClbssLobdfrDfpti(JNIEnv *fnv);

/*
 * jbvb.lbng.Pbdkbgf
 */
JNIEXPORT jstring JNICALL
JVM_GftSystfmPbdkbgf(JNIEnv *fnv, jstring nbmf);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftSystfmPbdkbgfs(JNIEnv *fnv);

/*
 * jbvb.io.ObjfdtInputStrfbm
 */
JNIEXPORT jobjfdt JNICALL
JVM_AllodbtfNfwObjfdt(JNIEnv *fnv, jobjfdt obj, jdlbss durrClbss,
                      jdlbss initClbss);

JNIEXPORT jobjfdt JNICALL
JVM_AllodbtfNfwArrby(JNIEnv *fnv, jobjfdt obj, jdlbss durrClbss,
                     jint lfngti);

JNIEXPORT jobjfdt JNICALL
JVM_LbtfstUsfrDffinfdLobdfr(JNIEnv *fnv);

/*
 * Tiis fundtion ibs bffn dfprfdbtfd bnd siould not bf donsidfrfd
 * pbrt of tif spfdififd JVM intfrfbdf.
 */
JNIEXPORT jdlbss JNICALL
JVM_LobdClbss0(JNIEnv *fnv, jobjfdt obj, jdlbss durrClbss,
               jstring durrClbssNbmf);

/*
 * jbvb.lbng.rfflfdt.Arrby
 */
JNIEXPORT jint JNICALL
JVM_GftArrbyLfngti(JNIEnv *fnv, jobjfdt brr);

JNIEXPORT jobjfdt JNICALL
JVM_GftArrbyElfmfnt(JNIEnv *fnv, jobjfdt brr, jint indfx);

JNIEXPORT jvbluf JNICALL
JVM_GftPrimitivfArrbyElfmfnt(JNIEnv *fnv, jobjfdt brr, jint indfx, jint wCodf);

JNIEXPORT void JNICALL
JVM_SftArrbyElfmfnt(JNIEnv *fnv, jobjfdt brr, jint indfx, jobjfdt vbl);

JNIEXPORT void JNICALL
JVM_SftPrimitivfArrbyElfmfnt(JNIEnv *fnv, jobjfdt brr, jint indfx, jvbluf v,
                             unsignfd dibr vCodf);

JNIEXPORT jobjfdt JNICALL
JVM_NfwArrby(JNIEnv *fnv, jdlbss fltClbss, jint lfngti);

JNIEXPORT jobjfdt JNICALL
JVM_NfwMultiArrby(JNIEnv *fnv, jdlbss fltClbss, jintArrby dim);

/*
 * jbvb.lbng.Clbss bnd jbvb.lbng.ClbssLobdfr
 */

#dffinf JVM_CALLER_DEPTH -1

/*
 * Rfturns tif immfdibtf dbllfr dlbss of tif nbtivf mftiod invoking
 * JVM_GftCbllfrClbss.  Tif Mftiod.invokf bnd otifr frbmfs duf to
 * rfflfdtion mbdiinfry brf skippfd.
 *
 * Tif dfpti pbrbmftfr must bf -1 (JVM_DEPTH). Tif dbllfr is fxpfdtfd
 * to bf mbrkfd witi sun.rfflfdt.CbllfrSfnsitivf.  Tif JVM will tirow
 * bn frror if it is not mbrkfd propfrtly.
 */
JNIEXPORT jdlbss JNICALL
JVM_GftCbllfrClbss(JNIEnv *fnv, int dfpti);


/*
 * Find primitivf dlbssfs
 * utf: dlbss nbmf
 */
JNIEXPORT jdlbss JNICALL
JVM_FindPrimitivfClbss(JNIEnv *fnv, donst dibr *utf);

/*
 * Link tif dlbss
 */
JNIEXPORT void JNICALL
JVM_RfsolvfClbss(JNIEnv *fnv, jdlbss dls);

/*
 * Find b dlbss from b boot dlbss lobdfr. Rfturns NULL if dlbss not found.
 */
JNIEXPORT jdlbss JNICALL
JVM_FindClbssFromBootLobdfr(JNIEnv *fnv, donst dibr *nbmf);

/*
 * Find b dlbss from b givfn dlbss lobdfr. Tirow ClbssNotFoundExdfption
 * or NoClbssDffFoundError dfpfnding on tif vbluf of tif lbst
 * brgumfnt.
 */
JNIEXPORT jdlbss JNICALL
JVM_FindClbssFromClbssLobdfr(JNIEnv *fnv, donst dibr *nbmf, jboolfbn init,
                             jobjfdt lobdfr, jboolfbn tirowError);

/*
 * Find b dlbss from b givfn dlbss.
 */
JNIEXPORT jdlbss JNICALL
JVM_FindClbssFromClbss(JNIEnv *fnv, donst dibr *nbmf, jboolfbn init,
                             jdlbss from);

/* Find b lobdfd dlbss dbdifd by tif VM */
JNIEXPORT jdlbss JNICALL
JVM_FindLobdfdClbss(JNIEnv *fnv, jobjfdt lobdfr, jstring nbmf);

/* Dffinf b dlbss */
JNIEXPORT jdlbss JNICALL
JVM_DffinfClbss(JNIEnv *fnv, donst dibr *nbmf, jobjfdt lobdfr, donst jbytf *buf,
                jsizf lfn, jobjfdt pd);

/* Dffinf b dlbss witi b sourdf (bddfd in JDK1.5) */
JNIEXPORT jdlbss JNICALL
JVM_DffinfClbssWitiSourdf(JNIEnv *fnv, donst dibr *nbmf, jobjfdt lobdfr,
                          donst jbytf *buf, jsizf lfn, jobjfdt pd,
                          donst dibr *sourdf);

/*
 * Rfflfdtion support fundtions
 */

JNIEXPORT jstring JNICALL
JVM_GftClbssNbmf(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssIntfrfbdfs(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jboolfbn JNICALL
JVM_IsIntfrfbdf(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssSignfrs(JNIEnv *fnv, jdlbss dls);

JNIEXPORT void JNICALL
JVM_SftClbssSignfrs(JNIEnv *fnv, jdlbss dls, jobjfdtArrby signfrs);

JNIEXPORT jobjfdt JNICALL
JVM_GftProtfdtionDombin(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jboolfbn JNICALL
JVM_IsArrbyClbss(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jboolfbn JNICALL
JVM_IsPrimitivfClbss(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jint JNICALL
JVM_GftClbssModififrs(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftDfdlbrfdClbssfs(JNIEnv *fnv, jdlbss ofClbss);

JNIEXPORT jdlbss JNICALL
JVM_GftDfdlbringClbss(JNIEnv *fnv, jdlbss ofClbss);

/* Gfnfrids support (JDK 1.5) */
JNIEXPORT jstring JNICALL
JVM_GftClbssSignbturf(JNIEnv *fnv, jdlbss dls);

/* Annotbtions support (JDK 1.5) */
JNIEXPORT jbytfArrby JNICALL
JVM_GftClbssAnnotbtions(JNIEnv *fnv, jdlbss dls);

/* Typf usf bnnotbtions support (JDK 1.8) */

JNIEXPORT jbytfArrby JNICALL
JVM_GftClbssTypfAnnotbtions(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jbytfArrby JNICALL
JVM_GftFifldTypfAnnotbtions(JNIEnv *fnv, jobjfdt fifld);

JNIEXPORT jbytfArrby JNICALL
JVM_GftMftiodTypfAnnotbtions(JNIEnv *fnv, jobjfdt mftiod);

/*
 * Nfw (JDK 1.4) rfflfdtion implfmfntbtion
 */

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssDfdlbrfdMftiods(JNIEnv *fnv, jdlbss ofClbss, jboolfbn publidOnly);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssDfdlbrfdFiflds(JNIEnv *fnv, jdlbss ofClbss, jboolfbn publidOnly);

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftClbssDfdlbrfdConstrudtors(JNIEnv *fnv, jdlbss ofClbss, jboolfbn publidOnly);

/* Difffrs from JVM_GftClbssModififrs in trfbtmfnt of innfr dlbssfs.
   Tiis rfturns tif bddfss flbgs for tif dlbss bs spfdififd in tif
   dlbss filf rbtifr tibn sfbrdiing tif InnfrClbssfs bttributf (if
   prfsfnt) to find tif sourdf-lfvfl bddfss flbgs. Only tif vblufs of
   tif low 13 bits (i.f., b mbsk of 0x1FFF) brf gubrbntffd to bf
   vblid. */
JNIEXPORT jint JNICALL
JVM_GftClbssAddfssFlbgs(JNIEnv *fnv, jdlbss dls);

/* Tif following two rfflfdtion routinfs brf still nffdfd duf to stbrtup timf issufs */
/*
 * jbvb.lbng.rfflfdt.Mftiod
 */
JNIEXPORT jobjfdt JNICALL
JVM_InvokfMftiod(JNIEnv *fnv, jobjfdt mftiod, jobjfdt obj, jobjfdtArrby brgs0);

/*
 * jbvb.lbng.rfflfdt.Construdtor
 */
JNIEXPORT jobjfdt JNICALL
JVM_NfwInstbndfFromConstrudtor(JNIEnv *fnv, jobjfdt d, jobjfdtArrby brgs0);

/*
 * Constbnt pool bddfss; durrfntly usfd to implfmfnt rfflfdtivf bddfss to bnnotbtions (JDK 1.5)
 */

JNIEXPORT jobjfdt JNICALL
JVM_GftClbssConstbntPool(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jint JNICALL JVM_ConstbntPoolGftSizf
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool);

JNIEXPORT jdlbss JNICALL JVM_ConstbntPoolGftClbssAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jdlbss JNICALL JVM_ConstbntPoolGftClbssAtIfLobdfd
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jobjfdt JNICALL JVM_ConstbntPoolGftMftiodAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jobjfdt JNICALL JVM_ConstbntPoolGftMftiodAtIfLobdfd
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jobjfdt JNICALL JVM_ConstbntPoolGftFifldAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jobjfdt JNICALL JVM_ConstbntPoolGftFifldAtIfLobdfd
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jobjfdtArrby JNICALL JVM_ConstbntPoolGftMfmbfrRffInfoAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jint JNICALL JVM_ConstbntPoolGftIntAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jlong JNICALL JVM_ConstbntPoolGftLongAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jflobt JNICALL JVM_ConstbntPoolGftFlobtAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jdoublf JNICALL JVM_ConstbntPoolGftDoublfAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jstring JNICALL JVM_ConstbntPoolGftStringAt
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

JNIEXPORT jstring JNICALL JVM_ConstbntPoolGftUTF8At
(JNIEnv *fnv, jobjfdt unusfd, jobjfdt jdpool, jint indfx);

/*
 * Pbrbmftfr rfflfdtion
 */

JNIEXPORT jobjfdtArrby JNICALL
JVM_GftMftiodPbrbmftfrs(JNIEnv *fnv, jobjfdt mftiod);

/*
 * jbvb.sfdurity.*
 */

JNIEXPORT jobjfdt JNICALL
JVM_DoPrivilfgfd(JNIEnv *fnv, jdlbss dls,
                 jobjfdt bdtion, jobjfdt dontfxt, jboolfbn wrbpExdfption);

JNIEXPORT jobjfdt JNICALL
JVM_GftInifritfdAddfssControlContfxt(JNIEnv *fnv, jdlbss dls);

JNIEXPORT jobjfdt JNICALL
JVM_GftStbdkAddfssControlContfxt(JNIEnv *fnv, jdlbss dls);

/*
 * Signbl support, usfd to implfmfnt tif siutdown sfqufndf.  Evfry VM must
 * support JVM_SIGINT bnd JVM_SIGTERM, rbising tif formfr for usfr intfrrupts
 * (^C) bnd tif lbttfr for fxtfrnbl tfrminbtion (kill, systfm siutdown, ftd.).
 * Otifr plbtform-dfpfndfnt signbl vblufs mby blso bf supportfd.
 */

JNIEXPORT void * JNICALL
JVM_RfgistfrSignbl(jint sig, void *ibndlfr);

JNIEXPORT jboolfbn JNICALL
JVM_RbisfSignbl(jint sig);

JNIEXPORT jint JNICALL
JVM_FindSignbl(donst dibr *nbmf);

/*
 * Rftrifvf tif bssfrtion dirfdtivfs for tif spfdififd dlbss.
 */
JNIEXPORT jboolfbn JNICALL
JVM_DfsirfdAssfrtionStbtus(JNIEnv *fnv, jdlbss unusfd, jdlbss dls);

/*
 * Rftrifvf tif bssfrtion dirfdtivfs from tif VM.
 */
JNIEXPORT jobjfdt JNICALL
JVM_AssfrtionStbtusDirfdtivfs(JNIEnv *fnv, jdlbss unusfd);

/*
 * jbvb.util.dondurrfnt.btomid.AtomidLong
 */
JNIEXPORT jboolfbn JNICALL
JVM_SupportsCX8(void);

/*
 * dom.sun.dtrbdf.jsdt support
 */

#dffinf JVM_TRACING_DTRACE_VERSION 1

/*
 * Strudturf to pbss onf probf dfsdription to JVM
 */
typfdff strudt {
    jmftiodID mftiod;
    jstring   fundtion;
    jstring   nbmf;
    void*            rfsfrvfd[4];     // for futurf usf
} JVM_DTrbdfProbf;

/**
 * Endbpsulbtfs tif stbbility rbtings for b DTrbdf providfr fifld
 */
typfdff strudt {
    jint nbmfStbbility;
    jint dbtbStbbility;
    jint dfpfndfndyClbss;
} JVM_DTrbdfIntfrfbdfAttributfs;

/*
 * Strudturf to pbss onf providfr dfsdription to JVM
 */
typfdff strudt {
    jstring                       nbmf;
    JVM_DTrbdfProbf*              probfs;
    jint                          probf_dount;
    JVM_DTrbdfIntfrfbdfAttributfs providfrAttributfs;
    JVM_DTrbdfIntfrfbdfAttributfs modulfAttributfs;
    JVM_DTrbdfIntfrfbdfAttributfs fundtionAttributfs;
    JVM_DTrbdfIntfrfbdfAttributfs nbmfAttributfs;
    JVM_DTrbdfIntfrfbdfAttributfs brgsAttributfs;
    void*                         rfsfrvfd[4]; // for futurf usf
} JVM_DTrbdfProvidfr;

/*
 * Gft tif vfrsion numbfr tif JVM wbs built witi
 */
JNIEXPORT jint JNICALL
JVM_DTrbdfGftVfrsion(JNIEnv* fnv);

/*
 * Rfgistfr nfw probf witi givfn signbturf, rfturn globbl ibndlf
 *
 * Tif vfrsion pbssfd in is tif vfrsion tibt tif librbry dodf wbs
 * built witi.
 */
JNIEXPORT jlong JNICALL
JVM_DTrbdfAdtivbtf(JNIEnv* fnv, jint vfrsion, jstring modulf_nbmf,
  jint providfrs_dount, JVM_DTrbdfProvidfr* providfrs);

/*
 * Cifdk JSDT probf
 */
JNIEXPORT jboolfbn JNICALL
JVM_DTrbdfIsProbfEnbblfd(JNIEnv* fnv, jmftiodID mftiod);

/*
 * Dfstroy dustom DOF
 */
JNIEXPORT void JNICALL
JVM_DTrbdfDisposf(JNIEnv* fnv, jlong bdtivbtion_ibndlf);

/*
 * Cifdk to sff if DTrbdf is supportfd by OS
 */
JNIEXPORT jboolfbn JNICALL
JVM_DTrbdfIsSupportfd(JNIEnv* fnv);

/*************************************************************************
 PART 2: Support for tif Vfrififr bnd Clbss Filf Formbt Cifdkfr
 ************************************************************************/
/*
 * Rfturn tif dlbss nbmf in UTF formbt. Tif rfsult is vblid
 * until JVM_RflfbsfUTf is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftClbssNbmfUTF(JNIEnv *fnv, jdlbss db);

/*
 * Rfturns tif donstbnt pool typfs in tif bufffr providfd by "typfs."
 */
JNIEXPORT void JNICALL
JVM_GftClbssCPTypfs(JNIEnv *fnv, jdlbss db, unsignfd dibr *typfs);

/*
 * Rfturns tif numbfr of Constbnt Pool fntrifs.
 */
JNIEXPORT jint JNICALL
JVM_GftClbssCPEntrifsCount(JNIEnv *fnv, jdlbss db);

/*
 * Rfturns tif numbfr of *dfdlbrfd* fiflds or mftiods.
 */
JNIEXPORT jint JNICALL
JVM_GftClbssFifldsCount(JNIEnv *fnv, jdlbss db);

JNIEXPORT jint JNICALL
JVM_GftClbssMftiodsCount(JNIEnv *fnv, jdlbss db);

/*
 * Rfturns tif CP indfxfs of fxdfptions rbisfd by b givfn mftiod.
 * Plbdfs tif rfsult in tif givfn bufffr.
 *
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT void JNICALL
JVM_GftMftiodIxExdfptionIndfxfs(JNIEnv *fnv, jdlbss db, jint mftiod_indfx,
                                unsignfd siort *fxdfptions);
/*
 * Rfturns tif numbfr of fxdfptions rbisfd by b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxExdfptionsCount(JNIEnv *fnv, jdlbss db, jint mftiod_indfx);

/*
 * Rfturns tif bytf dodf sfqufndf of b givfn mftiod.
 * Plbdfs tif rfsult in tif givfn bufffr.
 *
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT void JNICALL
JVM_GftMftiodIxBytfCodf(JNIEnv *fnv, jdlbss db, jint mftiod_indfx,
                        unsignfd dibr *dodf);

/*
 * Rfturns tif lfngti of tif bytf dodf sfqufndf of b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxBytfCodfLfngti(JNIEnv *fnv, jdlbss db, jint mftiod_indfx);

/*
 * A strudturf usfd to b dbpturf fxdfption tbblf fntry in b Jbvb mftiod.
 */
typfdff strudt {
    jint stbrt_pd;
    jint fnd_pd;
    jint ibndlfr_pd;
    jint dbtdiTypf;
} JVM_ExdfptionTbblfEntryTypf;

/*
 * Rfturns tif fxdfption tbblf fntry bt fntry_indfx of b givfn mftiod.
 * Plbdfs tif rfsult in tif givfn bufffr.
 *
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT void JNICALL
JVM_GftMftiodIxExdfptionTbblfEntry(JNIEnv *fnv, jdlbss db, jint mftiod_indfx,
                                   jint fntry_indfx,
                                   JVM_ExdfptionTbblfEntryTypf *fntry);

/*
 * Rfturns tif lfngti of tif fxdfption tbblf of b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxExdfptionTbblfLfngti(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif modififrs of b givfn fifld.
 * Tif fifld is idfntififd by fifld_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftFifldIxModififrs(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif modififrs of b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxModififrs(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif numbfr of lodbl vbribblfs of b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxLodblsCount(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif numbfr of brgumfnts (indluding tiis pointfr) of b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxArgsSizf(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif mbximum bmount of stbdk (in words) usfd by b givfn mftiod.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jint JNICALL
JVM_GftMftiodIxMbxStbdk(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Is b givfn mftiod b donstrudtor.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jboolfbn JNICALL
JVM_IsConstrudtorIx(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Is tif givfn mftiod gfnfrbtfd by tif VM.
 * Tif mftiod is idfntififd by mftiod_indfx.
 */
JNIEXPORT jboolfbn JNICALL
JVM_IsVMGfnfrbtfdMftiodIx(JNIEnv *fnv, jdlbss db, int indfx);

/*
 * Rfturns tif nbmf of b givfn mftiod in UTF formbt.
 * Tif rfsult rfmbins vblid until JVM_RflfbsfUTF is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftMftiodIxNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif signbturf of b givfn mftiod in UTF formbt.
 * Tif rfsult rfmbins vblid until JVM_RflfbsfUTF is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftMftiodIxSignbturfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif nbmf of tif fifld rfffrrfd to bt b givfn donstbnt pool
 * indfx.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPFifldNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif nbmf of tif mftiod rfffrrfd to bt b givfn donstbnt pool
 * indfx.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPMftiodNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif signbturf of tif mftiod rfffrrfd to bt b givfn donstbnt pool
 * indfx.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPMftiodSignbturfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif signbturf of tif fifld rfffrrfd to bt b givfn donstbnt pool
 * indfx.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPFifldSignbturfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif dlbss nbmf rfffrrfd to bt b givfn donstbnt pool indfx.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPClbssNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif dlbss nbmf rfffrrfd to bt b givfn donstbnt pool indfx.
 *
 * Tif donstbnt pool fntry must rfffr to b CONSTANT_Fifldrff.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPFifldClbssNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif dlbss nbmf rfffrrfd to bt b givfn donstbnt pool indfx.
 *
 * Tif donstbnt pool fntry must rfffr to CONSTANT_Mftiodrff or
 * CONSTANT_IntfrfbdfMftiodrff.
 *
 * Tif rfsult is in UTF formbt bnd rfmbins vblid until JVM_RflfbsfUTF
 * is dbllfd.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 */
JNIEXPORT donst dibr * JNICALL
JVM_GftCPMftiodClbssNbmfUTF(JNIEnv *fnv, jdlbss db, jint indfx);

/*
 * Rfturns tif modififrs of b fifld in dbllfdClbss. Tif fifld is
 * rfffrrfd to in dlbss db bt donstbnt pool fntry indfx.
 *
 * Tif dbllfr must trfbt tif string bs b donstbnt bnd not modify it
 * in bny wby.
 *
 * Rfturns -1 if tif fifld dofs not fxist in dbllfdClbss.
 */
JNIEXPORT jint JNICALL
JVM_GftCPFifldModififrs(JNIEnv *fnv, jdlbss db, int indfx, jdlbss dbllfdClbss);

/*
 * Rfturns tif modififrs of b mftiod in dbllfdClbss. Tif mftiod is
 * rfffrrfd to in dlbss db bt donstbnt pool fntry indfx.
 *
 * Rfturns -1 if tif mftiod dofs not fxist in dbllfdClbss.
 */
JNIEXPORT jint JNICALL
JVM_GftCPMftiodModififrs(JNIEnv *fnv, jdlbss db, int indfx, jdlbss dbllfdClbss);

/*
 * Rflfbsfs tif UTF string obtbinfd from tif VM.
 */
JNIEXPORT void JNICALL
JVM_RflfbsfUTF(donst dibr *utf);

/*
 * Compbrf if two dlbssfs brf in tif sbmf pbdkbgf.
 */
JNIEXPORT jboolfbn JNICALL
JVM_IsSbmfClbssPbdkbgf(JNIEnv *fnv, jdlbss dlbss1, jdlbss dlbss2);

/* Gft dlbssfilf donstbnts */
#indludf "dlbssfilf_donstbnts.i"

/*
 * A fundtion dffinfd by tif bytf-dodf vfrififr bnd dbllfd by tif VM.
 * Tiis is not b fundtion implfmfntfd in tif VM.
 *
 * Rfturns JNI_FALSE if vfrifidbtion fbils. A dftbilfd frror mfssbgf
 * will bf plbdfs in msg_buf, wiosf lfngti is spfdififd by buf_lfn.
 */
typfdff jboolfbn (*vfrififr_fn_t)(JNIEnv *fnv,
                                  jdlbss db,
                                  dibr * msg_buf,
                                  jint buf_lfn);


/*
 * Support for b VM-indfpfndfnt dlbss formbt difdkfr.
 */
typfdff strudt {
    unsignfd long dodf;    /* bytf dodf */
    unsignfd long fxds;    /* fxdfptions */
    unsignfd long ftbb;    /* dbtdi tbblf */
    unsignfd long lnum;    /* linf numbfr */
    unsignfd long lvbr;    /* lodbl vbrs */
} mftiod_sizf_info;

typfdff strudt {
    unsignfd int donstbnts;    /* donstbnt pool */
    unsignfd int fiflds;
    unsignfd int mftiods;
    unsignfd int intfrfbdfs;
    unsignfd int fiflds2;      /* numbfr of stbtid 2-word fiflds */
    unsignfd int innfrdlbssfs; /* # of rfdords in InnfrClbssfs bttr */

    mftiod_sizf_info dlinit;   /* mfmory usfd in dlinit */
    mftiod_sizf_info mbin;     /* usfd fvfrywifrf flsf */
} dlbss_sizf_info;

/*
 * Fundtions dffinfd in libjbvb.so to pfrform string donvfrsions.
 *
 */

typfdff jstring (*to_jbvb_string_fn_t)(JNIEnv *fnv, dibr *str);

typfdff dibr *(*to_d_string_fn_t)(JNIEnv *fnv, jstring s, jboolfbn *b);

/* Tiis is tif fundtion dffinfd in libjbvb.so tibt pfrforms dlbss
 * formbt difdks. Tiis fundtions fills in sizf informbtion bbout
 * tif dlbss filf bnd rfturns:
 *
 *   0: good
 *  -1: out of mfmory
 *  -2: bbd formbt
 *  -3: unsupportfd vfrsion
 *  -4: bbd dlbss nbmf
 */

typfdff jint (*difdk_formbt_fn_t)(dibr *dlbss_nbmf,
                                  unsignfd dibr *dbtb,
                                  unsignfd int dbtb_sizf,
                                  dlbss_sizf_info *dlbss_sizf,
                                  dibr *mfssbgf_bufffr,
                                  jint bufffr_lfngti,
                                  jboolfbn mfbsurf_only,
                                  jboolfbn difdk_rflbxfd);

#dffinf JVM_RECOGNIZED_CLASS_MODIFIERS (JVM_ACC_PUBLIC | \
                                        JVM_ACC_FINAL | \
                                        JVM_ACC_SUPER | \
                                        JVM_ACC_INTERFACE | \
                                        JVM_ACC_ABSTRACT | \
                                        JVM_ACC_ANNOTATION | \
                                        JVM_ACC_ENUM | \
                                        JVM_ACC_SYNTHETIC)

#dffinf JVM_RECOGNIZED_FIELD_MODIFIERS (JVM_ACC_PUBLIC | \
                                        JVM_ACC_PRIVATE | \
                                        JVM_ACC_PROTECTED | \
                                        JVM_ACC_STATIC | \
                                        JVM_ACC_FINAL | \
                                        JVM_ACC_VOLATILE | \
                                        JVM_ACC_TRANSIENT | \
                                        JVM_ACC_ENUM | \
                                        JVM_ACC_SYNTHETIC)

#dffinf JVM_RECOGNIZED_METHOD_MODIFIERS (JVM_ACC_PUBLIC | \
                                         JVM_ACC_PRIVATE | \
                                         JVM_ACC_PROTECTED | \
                                         JVM_ACC_STATIC | \
                                         JVM_ACC_FINAL | \
                                         JVM_ACC_SYNCHRONIZED | \
                                         JVM_ACC_BRIDGE | \
                                         JVM_ACC_VARARGS | \
                                         JVM_ACC_NATIVE | \
                                         JVM_ACC_ABSTRACT | \
                                         JVM_ACC_STRICT | \
                                         JVM_ACC_SYNTHETIC)

/*
 * Tiis is tif fundtion dffinfd in libjbvb.so to pfrform pbti
 * dbnonidblizbtion. VM dbll tiis fundtion bfforf opfning jbr filfs
 * to lobd systfm dlbssfs.
 *
 */

typfdff int (*dbnonidblizf_fn_t)(JNIEnv *fnv, dibr *orig, dibr *out, int lfn);

/*************************************************************************
 PART 3: I/O bnd Nftwork Support
 ************************************************************************/

/* Notf tibt tif JVM IO fundtions brf fxpfdtfd to rfturn JVM_IO_ERR
 * wifn tifrf is bny kind of frror. Tif dbllfr dbn tifn usf tif
 * plbtform spfdifid support (f.g., frrno) to gft tif dftbilfd
 * frror info.  Tif JVM_GftLbstErrorString prodfdurf mby blso bf usfd
 * to obtbin b dfsdriptivf frror string.
 */
#dffinf JVM_IO_ERR  (-1)

/* For intfrruptiblf IO. Rfturning JVM_IO_INTR indidbtfs tibt bn IO
 * opfrbtion ibs bffn disruptfd by Tirfbd.intfrrupt. Tifrf brf b
 * numbfr of tfdinidbl diffidultifs rflbtfd to intfrruptiblf IO tibt
 * nffd to bf solvfd. For fxbmplf, most fxisting progrbms do not ibndlf
 * IntfrruptfdIOExdfptions spfdiblly, tify simply trfbt tiosf bs bny
 * IOExdfptions, wiidi typidblly indidbtf fbtbl frrors.
 *
 * Tifrf brf blso two modfs of opfrbtion for intfrruptiblf IO. In tif
 * rfsumption modf, bn intfrruptfd IO opfrbtion is gubrbntffd not to
 * ibvf bny sidf-ffffdts, bnd dbn bf rfstbrtfd. In tif tfrminbtion modf,
 * bn intfrruptfd IO opfrbtion dorrupts tif undfrlying IO strfbm, so
 * tibt tif only rfbsonbblf opfrbtion on bn intfrruptfd strfbm is to
 * dlosf tibt strfbm. Tif rfsumption modf sffms to bf impossiblf to
 * implfmfnt on Win32 bnd Solbris. Implfmfnting tif tfrminbtion modf is
 * fbsifr, but it's not dlfbr tibt's tif rigit sfmbntids.
 *
 * Intfrruptiblf IO is not supportfd on Win32.It dbn bf fnbblfd/disbblfd
 * using b dompilf-timf flbg on Solbris. Tiird-pbrty JVM ports do not
 * nffd to implfmfnt intfrruptiblf IO.
 */
#dffinf JVM_IO_INTR (-2)

/* Writf b string into tif givfn bufffr, in tif plbtform's lodbl fndoding,
 * tibt dfsdribfs tif most rfdfnt systfm-lfvfl frror to oddur in tiis tirfbd.
 * Rfturn tif lfngti of tif string or zfro if no frror oddurrfd.
 */
JNIEXPORT jint JNICALL
JVM_GftLbstErrorString(dibr *buf, int lfn);

/*
 * Convfrt b pbtinbmf into nbtivf formbt.  Tiis fundtion dofs syntbdtid
 * dlfbnup, sudi bs rfmoving rfdundbnt sfpbrbtor dibrbdtfrs.  It modififs
 * tif givfn pbtinbmf string in plbdf.
 */
JNIEXPORT dibr * JNICALL
JVM_NbtivfPbti(dibr *);

/*
 * JVM I/O frror dodfs
 */
#dffinf JVM_EEXIST       -100

/*
 * Opfn b filf dfsdriptor. Tiis fundtion rfturns b nfgbtivf frror dodf
 * on frror, bnd b non-nfgbtivf intfgfr tibt is tif filf dfsdriptor on
 * suddfss.
 */
JNIEXPORT jint JNICALL
JVM_Opfn(donst dibr *fnbmf, jint flbgs, jint modf);

/*
 * Closf b filf dfsdriptor. Tiis fundtion rfturns -1 on frror, bnd 0
 * on suddfss.
 *
 * fd        tif filf dfsdriptor to dlosf.
 */
JNIEXPORT jint JNICALL
JVM_Closf(jint fd);

/*
 * Rfbd dbtb from b filf dfdriptor into b dibr brrby.
 *
 * fd        tif filf dfsdriptor to rfbd from.
 * buf       tif bufffr wifrf to put tif rfbd dbtb.
 * nbytfs    tif numbfr of bytfs to rfbd.
 *
 * Tiis fundtion rfturns -1 on frror, bnd 0 on suddfss.
 */
JNIEXPORT jint JNICALL
JVM_Rfbd(jint fd, dibr *buf, jint nbytfs);

/*
 * Writf dbtb from b dibr brrby to b filf dfdriptor.
 *
 * fd        tif filf dfsdriptor to rfbd from.
 * buf       tif bufffr from wiidi to fftdi tif dbtb.
 * nbytfs    tif numbfr of bytfs to writf.
 *
 * Tiis fundtion rfturns -1 on frror, bnd 0 on suddfss.
 */
JNIEXPORT jint JNICALL
JVM_Writf(jint fd, dibr *buf, jint nbytfs);

/*
 * Rfturns tif numbfr of bytfs bvbilbblf for rfbding from b givfn filf
 * dfsdriptor
 */
JNIEXPORT jint JNICALL
JVM_Avbilbblf(jint fd, jlong *pbytfs);

/*
 * Movf tif filf dfsdriptor pointfr from wifndf by offsft.
 *
 * fd        tif filf dfsdriptor to movf.
 * offsft    tif numbfr of bytfs to movf it by.
 * wifndf    tif stbrt from wifrf to movf it.
 *
 * Tiis fundtion rfturns tif rfsulting pointfr lodbtion.
 */
JNIEXPORT jlong JNICALL
JVM_Lsffk(jint fd, jlong offsft, jint wifndf);

/*
 * Sft tif lfngti of tif filf bssodibtfd witi tif givfn dfsdriptor to tif givfn
 * lfngti.  If tif nfw lfngti is longfr tibn tif durrfnt lfngti tifn tif filf
 * is fxtfndfd; tif dontfnts of tif fxtfndfd portion brf not dffinfd.  Tif
 * vbluf of tif filf pointfr is undffinfd bftfr tiis prodfdurf rfturns.
 */
JNIEXPORT jint JNICALL
JVM_SftLfngti(jint fd, jlong lfngti);

/*
 * Syndironizf tif filf dfsdriptor's in mfmory stbtf witi tibt of tif
 * piysidbl dfvidf.  Rfturn of -1 is bn frror, 0 is OK.
 */
JNIEXPORT jint JNICALL
JVM_Synd(jint fd);

/*
 * Nftworking librbry support
 */

JNIEXPORT jint JNICALL
JVM_InitiblizfSodkftLibrbry(void);

strudt sodkbddr;

JNIEXPORT jint JNICALL
JVM_Sodkft(jint dombin, jint typf, jint protodol);

JNIEXPORT jint JNICALL
JVM_SodkftClosf(jint fd);

JNIEXPORT jint JNICALL
JVM_SodkftSiutdown(jint fd, jint iowto);

JNIEXPORT jint JNICALL
JVM_Rfdv(jint fd, dibr *buf, jint nBytfs, jint flbgs);

JNIEXPORT jint JNICALL
JVM_Sfnd(jint fd, dibr *buf, jint nBytfs, jint flbgs);

JNIEXPORT jint JNICALL
JVM_Timfout(int fd, long timfout);

JNIEXPORT jint JNICALL
JVM_Listfn(jint fd, jint dount);

JNIEXPORT jint JNICALL
JVM_Connfdt(jint fd, strudt sodkbddr *iim, jint lfn);

JNIEXPORT jint JNICALL
JVM_Bind(jint fd, strudt sodkbddr *iim, jint lfn);

JNIEXPORT jint JNICALL
JVM_Addfpt(jint fd, strudt sodkbddr *iim, jint *lfn);

JNIEXPORT jint JNICALL
JVM_RfdvFrom(jint fd, dibr *buf, int nBytfs,
                  int flbgs, strudt sodkbddr *from, int *fromlfn);

JNIEXPORT jint JNICALL
JVM_SfndTo(jint fd, dibr *buf, int lfn,
                int flbgs, strudt sodkbddr *to, int tolfn);

JNIEXPORT jint JNICALL
JVM_SodkftAvbilbblf(jint fd, jint *rfsult);


JNIEXPORT jint JNICALL
JVM_GftSodkNbmf(jint fd, strudt sodkbddr *iim, int *lfn);

JNIEXPORT jint JNICALL
JVM_GftSodkOpt(jint fd, int lfvfl, int optnbmf, dibr *optvbl, int *optlfn);

JNIEXPORT jint JNICALL
JVM_SftSodkOpt(jint fd, int lfvfl, int optnbmf, donst dibr *optvbl, int optlfn);

JNIEXPORT int JNICALL
JVM_GftHostNbmf(dibr* nbmf, int nbmflfn);

/*
 * Tif stbndbrd printing fundtions supportfd by tif Jbvb VM. (Siould tify
 * bf rfnbmfd to JVM_* in tif futurf?
 */

/*
 * BE CAREFUL! Tif following fundtions do not implfmfnt tif
 * full ffbturf sft of stbndbrd C printf formbts.
 */
int
jio_vsnprintf(dibr *str, sizf_t dount, donst dibr *fmt, vb_list brgs);

int
jio_snprintf(dibr *str, sizf_t dount, donst dibr *fmt, ...);

int
jio_fprintf(FILE *, donst dibr *fmt, ...);

int
jio_vfprintf(FILE *, donst dibr *fmt, vb_list brgs);


JNIEXPORT void * JNICALL
JVM_RbwMonitorCrfbtf(void);

JNIEXPORT void JNICALL
JVM_RbwMonitorDfstroy(void *mon);

JNIEXPORT jint JNICALL
JVM_RbwMonitorEntfr(void *mon);

JNIEXPORT void JNICALL
JVM_RbwMonitorExit(void *mon);

/*
 * jbvb.lbng.mbnbgfmfnt support
 */
JNIEXPORT void* JNICALL
JVM_GftMbnbgfmfnt(jint vfrsion);

/*
 * dom.sun.tools.bttbdi.VirtublMbdiinf support
 *
 * Initiblizf tif bgfnt propfrtifs witi tif propfrtifs mbintbinfd in tif VM.
 */
JNIEXPORT jobjfdt JNICALL
JVM_InitAgfntPropfrtifs(JNIEnv *fnv, jobjfdt bgfnt_props);

JNIEXPORT jstring JNICALL
JVM_GftTfmporbryDirfdtory(JNIEnv *fnv);

/* Gfnfrids rfflfdtion support.
 *
 * Rfturns informbtion bbout tif givfn dlbss's EndlosingMftiod
 * bttributf, if prfsfnt, or null if tif dlbss ibd no fndlosing
 * mftiod.
 *
 * If non-null, tif rfturnfd brrby dontbins tirff flfmfnts. Elfmfnt 0
 * is tif jbvb.lbng.Clbss of wiidi tif fndlosing mftiod is b mfmbfr,
 * bnd flfmfnts 1 bnd 2 brf tif jbvb.lbng.Strings for tif fndlosing
 * mftiod's nbmf bnd dfsdriptor, rfspfdtivfly.
 */
JNIEXPORT jobjfdtArrby JNICALL
JVM_GftEndlosingMftiodInfo(JNIEnv* fnv, jdlbss ofClbss);

/*
 * Jbvb tirfbd stbtf support
 */
fnum {
    JAVA_THREAD_STATE_NEW           = 0,
    JAVA_THREAD_STATE_RUNNABLE      = 1,
    JAVA_THREAD_STATE_BLOCKED       = 2,
    JAVA_THREAD_STATE_WAITING       = 3,
    JAVA_THREAD_STATE_TIMED_WAITING = 4,
    JAVA_THREAD_STATE_TERMINATED    = 5,
    JAVA_THREAD_STATE_COUNT         = 6
};

/*
 * Rfturns bn brrby of tif tirfbdStbtus vblufs rfprfsfnting tif
 * givfn Jbvb tirfbd stbtf.  Rfturns NULL if tif VM vfrsion is
 * indompbtiblf witi tif JDK or dofsn't support tif givfn
 * Jbvb tirfbd stbtf.
 */
JNIEXPORT jintArrby JNICALL
JVM_GftTirfbdStbtfVblufs(JNIEnv* fnv, jint jbvbTirfbdStbtf);

/*
 * Rfturns bn brrby of tif substbtf nbmfs rfprfsfnting tif
 * givfn Jbvb tirfbd stbtf.  Rfturns NULL if tif VM vfrsion is
 * indompbtiblf witi tif JDK or tif VM dofsn't support
 * tif givfn Jbvb tirfbd stbtf.
 * vblufs must bf tif jintArrby rfturnfd from JVM_GftTirfbdStbtfVblufs
 * bnd jbvbTirfbdStbtf.
 */
JNIEXPORT jobjfdtArrby JNICALL
JVM_GftTirfbdStbtfNbmfs(JNIEnv* fnv, jint jbvbTirfbdStbtf, jintArrby vblufs);

/* =========================================================================
 * Tif following dffinfs b privbtf JVM intfrfbdf tibt tif JDK dbn qufry
 * for tif JVM vfrsion bnd dbpbbilitifs.  sun.misd.Vfrsion dffinfs
 * tif mftiods for gftting tif VM vfrsion bnd its dbpbbilitifs.
 *
 * Wifn b nfw bit is bddfd, tif following siould bf updbtfd to providf
 * bddfss to tif nfw dbpbbility:
 *    HS:   JVM_GftVfrsionInfo bnd Abstrbdt_VM_Vfrsion dlbss
 *    SDK:  Vfrsion dlbss
 *
 * Similbry, b privbtf JDK intfrfbdf JDK_GftVfrsionInfo0 is dffinfd for
 * JVM to qufry for tif JDK vfrsion bnd dbpbbilitifs.
 *
 * Wifn b nfw bit is bddfd, tif following siould bf updbtfd to providf
 * bddfss to tif nfw dbpbbility:
 *    HS:   JDK_Vfrsion dlbss
 *    SDK:  JDK_GftVfrsionInfo0
 *
 * ==========================================================================
 */
typfdff strudt {
    /* Nbming donvfntion of RE build vfrsion string: n.n.n[_uu[d]][-<idfntififr>]-bxx */
    unsignfd int jvm_vfrsion;   /* Consists of mbjor, minor, midro (n.n.n) */
                                /* bnd build numbfr (xx) */
    unsignfd int updbtf_vfrsion : 8;         /* Updbtf rflfbsf vfrsion (uu) */
    unsignfd int spfdibl_updbtf_vfrsion : 8; /* Spfdibl updbtf rflfbsf vfrsion (d)*/
    unsignfd int rfsfrvfd1 : 16;
    unsignfd int rfsfrvfd2;

    /* Tif following bits rfprfsfnts JVM supports tibt JDK ibs dfpfndfndy on.
     * JDK dbn usf tifsf bits to dftfrminf wiidi JVM vfrsion
     * bnd support it ibs to mbintbin runtimf dompbtibility.
     *
     * Wifn b nfw bit is bddfd in b minor or updbtf rflfbsf, mbkf surf
     * tif nfw bit is blso bddfd in tif mbin/bbsflinf.
     */
    unsignfd int is_bttbdi_supportfd : 1;
    unsignfd int : 31;
    unsignfd int : 32;
    unsignfd int : 32;
} jvm_vfrsion_info;

#dffinf JVM_VERSION_MAJOR(vfrsion) ((vfrsion & 0xFF000000) >> 24)
#dffinf JVM_VERSION_MINOR(vfrsion) ((vfrsion & 0x00FF0000) >> 16)
#dffinf JVM_VERSION_MICRO(vfrsion) ((vfrsion & 0x0000FF00) >> 8)

/* Build numbfr is bvbilbblf only for RE builds.
 * It will bf zfro for intfrnbl builds.
 */
#dffinf JVM_VERSION_BUILD(vfrsion) ((vfrsion & 0x000000FF))

JNIEXPORT void JNICALL
JVM_GftVfrsionInfo(JNIEnv* fnv, jvm_vfrsion_info* info, sizf_t info_sizf);

typfdff strudt {
    // Nbming donvfntion of RE build vfrsion string: n.n.n[_uu[d]][-<idfntififr>]-bxx
    unsignfd int jdk_vfrsion;   /* Consists of mbjor, minor, midro (n.n.n) */
                                /* bnd build numbfr (xx) */
    unsignfd int updbtf_vfrsion : 8;         /* Updbtf rflfbsf vfrsion (uu) */
    unsignfd int spfdibl_updbtf_vfrsion : 8; /* Spfdibl updbtf rflfbsf vfrsion (d)*/
    unsignfd int rfsfrvfd1 : 16;
    unsignfd int rfsfrvfd2;

    /* Tif following bits rfprfsfnts nfw JDK supports tibt VM ibs dfpfndfndy on.
     * VM implfmfntbtion dbn usf tifsf bits to dftfrminf wiidi JDK vfrsion
     * bnd support it ibs to mbintbin runtimf dompbtibility.
     *
     * Wifn b nfw bit is bddfd in b minor or updbtf rflfbsf, mbkf surf
     * tif nfw bit is blso bddfd in tif mbin/bbsflinf.
     */
    unsignfd int tirfbd_pbrk_blodkfr : 1;
    unsignfd int post_vm_init_iook_fnbblfd : 1;
    unsignfd int pfnding_list_usfs_disdovfrfd_fifld : 1;
    unsignfd int : 29;
    unsignfd int : 32;
    unsignfd int : 32;
} jdk_vfrsion_info;

#dffinf JDK_VERSION_MAJOR(vfrsion) ((vfrsion & 0xFF000000) >> 24)
#dffinf JDK_VERSION_MINOR(vfrsion) ((vfrsion & 0x00FF0000) >> 16)
#dffinf JDK_VERSION_MICRO(vfrsion) ((vfrsion & 0x0000FF00) >> 8)

/* Build numbfr is bvbilbblf only for RE build (i.f. JDK_BUILD_NUMBER is sft to bNN)
 * It will bf zfro for intfrnbl builds.
 */
#dffinf JDK_VERSION_BUILD(vfrsion) ((vfrsion & 0x000000FF))

/*
 * Tiis is tif fundtion JDK_GftVfrsionInfo0 dffinfd in libjbvb.so
 * tibt is dynbmidblly lookfd up by JVM.
 */
typfdff void (*jdk_vfrsion_info_fn_t)(jdk_vfrsion_info* info, sizf_t info_sizf);

/*
 * Tiis strudturf is usfd by tif lbundifr to gft tif dffbult tirfbd
 * stbdk sizf from tif VM using JNI_GftDffbultJbvbVMInitArgs() witi b
 * vfrsion of 1.1.  As it is not supportfd otifrwisf, it ibs bffn rfmovfd
 * from jni.i
 */
typfdff strudt JDK1_1InitArgs {
    jint vfrsion;

    dibr **propfrtifs;
    jint difdkSourdf;
    jint nbtivfStbdkSizf;
    jint jbvbStbdkSizf;
    jint minHfbpSizf;
    jint mbxHfbpSizf;
    jint vfrifyModf;
    dibr *dlbsspbti;

    jint (JNICALL *vfprintf)(FILE *fp, donst dibr *formbt, vb_list brgs);
    void (JNICALL *fxit)(jint dodf);
    void (JNICALL *bbort)(void);

    jint fnbblfClbssGC;
    jint fnbblfVfrbosfGC;
    jint disbblfAsyndGC;
    jint vfrbosf;
    jboolfbn dfbugging;
    jint dfbugPort;
} JDK1_1InitArgs;


#ifdff __dplusplus
} /* fxtfrn "C" */

#fndif /* __dplusplus */

#fndif /* !_JAVASOFT_JVM_H_ */
