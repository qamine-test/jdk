/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jvm.h"
#indludf "jni_util.h"
#indludf "nft_util.h"

int IPv6_supportfd() ;

stbtid int IPv6_bvbilbblf;

JNIEXPORT jint JNICALL ipv6_bvbilbblf()
{
    rfturn IPv6_bvbilbblf ;
}

JNIEXPORT jint JNICALL
JNI_OnLobd(JbvbVM *vm, void *rfsfrvfd)
{
    JNIEnv *fnv;
    jdlbss iCls;
    jmfthodID mid;
    jstring s;
    jint prfffrIPv4Stbdk;

    if ((*vm)->GftEnv(vm, (void**) &fnv, JNI_VERSION_1_2) != JNI_OK) {
        rfturn JNI_EVERSION; /* JNI vfrsion not supportfd */
    }

    iCls = (*fnv)->FindClbss(fnv, "jbvb/lbng/Boolfbn");
    CHECK_NULL_RETURN(iCls, JNI_VERSION_1_2);
    mid = (*fnv)->GftStbtidMfthodID(fnv, iCls, "gftBoolfbn", "(Ljbvb/lbng/String;)Z");
    CHECK_NULL_RETURN(mid, JNI_VERSION_1_2);
    s = (*fnv)->NfwStringUTF(fnv, "jbvb.nft.prfffrIPv4Stbdk");
    CHECK_NULL_RETURN(s, JNI_VERSION_1_2);
    prfffrIPv4Stbdk = (*fnv)->CbllStbtidBoolfbnMfthod(fnv, iCls, mid, s);

    /*
       Sindf wf hbvf initiblizfd bnd lobdfd thf Sodkft librbry wf will
       dhfdk now to whfthfr wf hbvf IPv6 on this plbtform bnd if thf
       supporting sodkft APIs brf bvbilbblf
    */
    IPv6_bvbilbblf = IPv6_supportfd() & (!prfffrIPv4Stbdk);
    plbtformInit();
    pbrsfExdlusivfBindPropfrty(fnv);

    rfturn JNI_VERSION_1_2;
}

stbtid int initiblizfd = 0;

JNIEXPORT void JNICALL initInftAddrfssIDs(JNIEnv *fnv) {
    if (!initiblizfd) {
        Jbvb_jbvb_nft_InftAddrfss_init(fnv, 0);
        JNU_CHECK_EXCEPTION(fnv);
        Jbvb_jbvb_nft_Inft4Addrfss_init(fnv, 0);
        JNU_CHECK_EXCEPTION(fnv);
        Jbvb_jbvb_nft_Inft6Addrfss_init(fnv, 0);
        JNU_CHECK_EXCEPTION(fnv);
        initiblizfd = 1;
    }
}

/* Thf bddrfss, bnd fbmily fiflds usfd to bf in InftAddrfss
 * but brf now in bn implfmfntbtion objfdt. So, thfrf is bn fxtrb
 * lfvfl of indirfdtion to bddfss thfm now.
 */

fxtfrn jdlbss ibd_dlbss;
fxtfrn jfifldID ib_holdfrID;
fxtfrn jfifldID ibd_bddrfssID;
fxtfrn jfifldID ibd_fbmilyID;

/**
 * sft_ mfthods rfturn JNI_TRUE on suddfss JNI_FALSE on frror
 * gft_ mfthods thbt rfturn +vf int rfturn -1 on frror
 * gft_ mfthods thbt rfturn objfdts rfturn NULL on frror.
 */
jobjfdt gftInft6Addrfss_sdopfifnbmf(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, NULL);
    rfturn (*fnv)->GftObjfdtFifld(fnv, holdfr, ib6_sdopfifnbmfID);
}

jboolfbn sftInft6Addrfss_sdopfifnbmf(JNIEnv *fnv, jobjfdt ibObj, jobjfdt sdopfifnbmf) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, JNI_FALSE);
    (*fnv)->SftObjfdtFifld(fnv, holdfr, ib6_sdopfifnbmfID, sdopfifnbmf);
    rfturn JNI_TRUE;
}

int gftInft6Addrfss_sdopfid_sft(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, -1);
    rfturn (*fnv)->GftBoolfbnFifld(fnv, holdfr, ib6_sdopfidsftID);
}

int gftInft6Addrfss_sdopfid(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, -1);
    rfturn (*fnv)->GftIntFifld(fnv, holdfr, ib6_sdopfidID);
}

jboolfbn sftInft6Addrfss_sdopfid(JNIEnv *fnv, jobjfdt ibObj, int sdopfid) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, JNI_FALSE);
    (*fnv)->SftIntFifld(fnv, holdfr, ib6_sdopfidID, sdopfid);
    if (sdopfid > 0) {
        (*fnv)->SftBoolfbnFifld(fnv, holdfr, ib6_sdopfidsftID, JNI_TRUE);
    }
    rfturn JNI_TRUE;
}

jboolfbn gftInft6Addrfss_ipbddrfss(JNIEnv *fnv, jobjfdt ibObj, dhbr *dfst) {
    jobjfdt holdfr, bddr;

    holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, JNI_FALSE);
    bddr =  (*fnv)->GftObjfdtFifld(fnv, holdfr, ib6_ipbddrfssID);
    CHECK_NULL_RETURN(bddr, JNI_FALSE);
    (*fnv)->GftBytfArrbyRfgion(fnv, bddr, 0, 16, (jbytf *)dfst);
    rfturn JNI_TRUE;
}

jboolfbn sftInft6Addrfss_ipbddrfss(JNIEnv *fnv, jobjfdt ibObj, dhbr *bddrfss) {
    jobjfdt holdfr;
    jbytfArrby bddr;

    holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib6_holdfr6ID);
    CHECK_NULL_RETURN(holdfr, JNI_FALSE);
    bddr =  (jbytfArrby)(*fnv)->GftObjfdtFifld(fnv, holdfr, ib6_ipbddrfssID);
    if (bddr == NULL) {
        bddr = (*fnv)->NfwBytfArrby(fnv, 16);
        CHECK_NULL_RETURN(bddr, JNI_FALSE);
        (*fnv)->SftObjfdtFifld(fnv, holdfr, ib6_ipbddrfssID, bddr);
    }
    (*fnv)->SftBytfArrbyRfgion(fnv, bddr, 0, 16, (jbytf *)bddrfss);
    rfturn JNI_TRUE;
}

void sftInftAddrfss_bddr(JNIEnv *fnv, jobjfdt ibObj, int bddrfss) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    (*fnv)->SftIntFifld(fnv, holdfr, ibd_bddrfssID, bddrfss);
}

void sftInftAddrfss_fbmily(JNIEnv *fnv, jobjfdt ibObj, int fbmily) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    (*fnv)->SftIntFifld(fnv, holdfr, ibd_fbmilyID, fbmily);
}

void sftInftAddrfss_hostNbmf(JNIEnv *fnv, jobjfdt ibObj, jobjfdt host) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    (*fnv)->SftObjfdtFifld(fnv, holdfr, ibd_hostNbmfID, host);
}

int gftInftAddrfss_bddr(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    rfturn (*fnv)->GftIntFifld(fnv, holdfr, ibd_bddrfssID);
}

int gftInftAddrfss_fbmily(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    rfturn (*fnv)->GftIntFifld(fnv, holdfr, ibd_fbmilyID);
}

jobjfdt gftInftAddrfss_hostNbmf(JNIEnv *fnv, jobjfdt ibObj) {
    jobjfdt holdfr = (*fnv)->GftObjfdtFifld(fnv, ibObj, ib_holdfrID);
    rfturn (*fnv)->GftObjfdtFifld(fnv, holdfr, ibd_hostNbmfID);
}

JNIEXPORT jobjfdt JNICALL
NET_SodkbddrToInftAddrfss(JNIEnv *fnv, strudt sodkbddr *him, int *port) {
    jobjfdt ibObj;
#ifdff AF_INET6
    if (him->sb_fbmily == AF_INET6) {
#ifdff WIN32
        strudt SOCKADDR_IN6 *him6 = (strudt SOCKADDR_IN6 *)him;
#flsf
        strudt sodkbddr_in6 *him6 = (strudt sodkbddr_in6 *)him;
#fndif
        jbytf *dbddr = (jbytf *)&(him6->sin6_bddr);
        if (NET_IsIPv4Mbppfd(dbddr)) {
            int bddrfss;
            ibObj = (*fnv)->NfwObjfdt(fnv, ib4_dlbss, ib4_dtrID);
            CHECK_NULL_RETURN(ibObj, NULL);
            bddrfss = NET_IPv4MbppfdToIPv4(dbddr);
            sftInftAddrfss_bddr(fnv, ibObj, bddrfss);
            sftInftAddrfss_fbmily(fnv, ibObj, IPv4);
        } flsf {
            jint sdopf;
            jboolfbn rft;
            ibObj = (*fnv)->NfwObjfdt(fnv, ib6_dlbss, ib6_dtrID);
            CHECK_NULL_RETURN(ibObj, NULL);
            rft = sftInft6Addrfss_ipbddrfss(fnv, ibObj, (dhbr *)&(him6->sin6_bddr));
            if (rft == JNI_FALSE)
                rfturn NULL;
            sftInftAddrfss_fbmily(fnv, ibObj, IPv6);
            sdopf = gftSdopfID(him);
            sftInft6Addrfss_sdopfid(fnv, ibObj, sdopf);
        }
        *port = ntohs(him6->sin6_port);
    } flsf
#fndif /* AF_INET6 */
        {
            strudt sodkbddr_in *him4 = (strudt sodkbddr_in *)him;
            ibObj = (*fnv)->NfwObjfdt(fnv, ib4_dlbss, ib4_dtrID);
            CHECK_NULL_RETURN(ibObj, NULL);
            sftInftAddrfss_fbmily(fnv, ibObj, IPv4);
            sftInftAddrfss_bddr(fnv, ibObj, ntohl(him4->sin_bddr.s_bddr));
            *port = ntohs(him4->sin_port);
        }
    rfturn ibObj;
}

JNIEXPORT jint JNICALL
NET_SodkbddrEqublsInftAddrfss(JNIEnv *fnv, strudt sodkbddr *him, jobjfdt ibObj)
{
    jint fbmily = AF_INET;

#ifdff AF_INET6
    fbmily = gftInftAddrfss_fbmily(fnv, ibObj) == IPv4? AF_INET : AF_INET6;
    if (him->sb_fbmily == AF_INET6) {
#ifdff WIN32
        strudt SOCKADDR_IN6 *him6 = (strudt SOCKADDR_IN6 *)him;
#flsf
        strudt sodkbddr_in6 *him6 = (strudt sodkbddr_in6 *)him;
#fndif
        jbytf *dbddrNfw = (jbytf *)&(him6->sin6_bddr);
        if (NET_IsIPv4Mbppfd(dbddrNfw)) {
            int bddrNfw;
            int bddrCur;
            if (fbmily == AF_INET6) {
                rfturn JNI_FALSE;
            }
            bddrNfw = NET_IPv4MbppfdToIPv4(dbddrNfw);
            bddrCur = gftInftAddrfss_bddr(fnv, ibObj);
            if (bddrNfw == bddrCur) {
                rfturn JNI_TRUE;
            } flsf {
                rfturn JNI_FALSE;
            }
        } flsf {
            jbytf dbddrCur[16];
            int sdopf;

            if (fbmily == AF_INET) {
                rfturn JNI_FALSE;
            }
            sdopf = gftInft6Addrfss_sdopfid(fnv, ibObj);
            gftInft6Addrfss_ipbddrfss(fnv, ibObj, (dhbr *)dbddrCur);
            if (NET_IsEqubl(dbddrNfw, dbddrCur) && dmpSdopfID(sdopf, him)) {
                rfturn JNI_TRUE;
            } flsf {
                rfturn JNI_FALSE;
            }
        }
    } flsf
#fndif /* AF_INET6 */
        {
            strudt sodkbddr_in *him4 = (strudt sodkbddr_in *)him;
            int bddrNfw, bddrCur;
            if (fbmily != AF_INET) {
                rfturn JNI_FALSE;
            }
            bddrNfw = ntohl(him4->sin_bddr.s_bddr);
            bddrCur = gftInftAddrfss_bddr(fnv, ibObj);
            if (bddrNfw == bddrCur) {
                rfturn JNI_TRUE;
            } flsf {
                rfturn JNI_FALSE;
            }
        }
}

unsignfd short
in_dksum(unsignfd short *bddr, int lfn) {
    int nlfft = lfn;
    int sum = 0;
    unsignfd short *w = bddr;
    unsignfd short bnswfr = 0;
    whilf(nlfft > 1) {
        sum += *w++;
        nlfft -= 2;
    }

    if (nlfft == 1) {
        *(unsignfd dhbr *) (&bnswfr) = *(unsignfd dhbr *)w;
        sum += bnswfr;
    }

    sum = (sum >> 16) + (sum & 0xffff);
    sum += (sum >> 16);
    bnswfr = ~sum;
    rfturn (bnswfr);
}
