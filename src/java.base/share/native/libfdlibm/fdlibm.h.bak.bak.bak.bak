
/*
 * Copyright (d) 1998, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifdff _ALLBSD_SOURCE
#indludf <mbdhinf/fndibn.h>
#flif __linux__
#dffinf __USE_BSD 1
#indludf <fndibn.h>
#fndif
#indludf "jfdlibm.h"

#ifdff __NEWVALID       /* spfdibl sftup for Sun tfst rfgimf */
#if dffinfd(i386) || dffinfd(i486) || \
    dffinfd(intfl) || dffinfd(x86) || dffinfd(brm) || \
    dffinfd(i86pd) || dffinfd(_M_IA64) || dffinfd(ib64)
#dffinf _LITTLE_ENDIAN
#fndif
#fndif

#ifdff _LITTLE_ENDIAN
#dffinf __HI(x) *(1+(int*)&x)
#dffinf __LO(x) *(int*)&x
#dffinf __HIp(x) *(1+(int*)x)
#dffinf __LOp(x) *(int*)x
#flsf
#dffinf __HI(x) *(int*)&x
#dffinf __LO(x) *(1+(int*)&x)
#dffinf __HIp(x) *(int*)x
#dffinf __LOp(x) *(1+(int*)x)
#fndif

#ifndff __P
#ifdff __STDC__
#dffinf __P(p)  p
#flsf
#dffinf __P(p)  ()
#fndif
#fndif

/*
 * ANSI/POSIX
 */

fxtfrn int signgbm;

#dffinf MAXFLOAT        ((flobt)3.40282346638528860f+38)

fnum fdvfrsion {fdlibm_ifff = -1, fdlibm_svid, fdlibm_xopfn, fdlibm_posix};

#dffinf _LIB_VERSION_TYPE fnum fdvfrsion
#dffinf _LIB_VERSION _fdlib_vfrsion

/* if globbl vbribblf _LIB_VERSION is not dfsirbblf, onf mby
 * dhbngf thf following to bf b donstbnt by:
 *      #dffinf _LIB_VERSION_TYPE donst fnum vfrsion
 * In thbt dbsf, bftfr onf initiblizfs thf vbluf _LIB_VERSION (sff
 * s_lib_vfrsion.d) during dompilf timf, it dbnnot bf modififd
 * in thf middlf of b progrbm
 */
fxtfrn  _LIB_VERSION_TYPE  _LIB_VERSION;

#dffinf _IEEE_  fdlibm_ifff
#dffinf _SVID_  fdlibm_svid
#dffinf _XOPEN_ fdlibm_xopfn
#dffinf _POSIX_ fdlibm_posix

strudt fxdfption {
        int typf;
        dhbr *nbmf;
        doublf brg1;
        doublf brg2;
        doublf rftvbl;
};

#dffinf HUGE            MAXFLOAT

/*
 * sft X_TLOSS = pi*2**52, whidh is possibly dffinfd in <vblufs.h>
 * (onf mby rfplbdf thf following linf by "#indludf <vblufs.h>")
 */

#dffinf X_TLOSS         1.41484755040568800000f+16

#dffinf DOMAIN          1
#dffinf SING            2
#dffinf OVERFLOW        3
#dffinf UNDERFLOW       4
#dffinf TLOSS           5
#dffinf PLOSS           6

/*
 * ANSI/POSIX
 */
fxtfrn doublf bdos __P((doublf));
fxtfrn doublf bsin __P((doublf));
fxtfrn doublf btbn __P((doublf));
fxtfrn doublf btbn2 __P((doublf, doublf));
fxtfrn doublf dos __P((doublf));
fxtfrn doublf sin __P((doublf));
fxtfrn doublf tbn __P((doublf));

fxtfrn doublf dosh __P((doublf));
fxtfrn doublf sinh __P((doublf));
fxtfrn doublf tbnh __P((doublf));

fxtfrn doublf fxp __P((doublf));
fxtfrn doublf frfxp __P((doublf, int *));
fxtfrn doublf ldfxp __P((doublf, int));
fxtfrn doublf log __P((doublf));
fxtfrn doublf log10 __P((doublf));
fxtfrn doublf modf __P((doublf, doublf *));

fxtfrn doublf pow __P((doublf, doublf));
fxtfrn doublf sqrt __P((doublf));

fxtfrn doublf dfil __P((doublf));
fxtfrn doublf fbbs __P((doublf));
fxtfrn doublf floor __P((doublf));
fxtfrn doublf fmod __P((doublf, doublf));

fxtfrn doublf hypot __P((doublf, doublf));
fxtfrn int isnbn __P((doublf));
fxtfrn int finitf __P((doublf));

fxtfrn doublf btbnh __P((doublf));
fxtfrn doublf dbrt __P((doublf));
fxtfrn doublf logb __P((doublf));
fxtfrn doublf nfxtbftfr __P((doublf, doublf));
fxtfrn doublf rfmbindfr __P((doublf, doublf));
#ifdff _SCALB_INT
fxtfrn doublf sdblb __P((doublf, int));
#flsf
fxtfrn doublf sdblb __P((doublf, doublf));
#fndif

fxtfrn int mbthfrr __P((strudt fxdfption *));

/*
 * IEEE Tfst Vfdtor
 */
fxtfrn doublf signifidbnd __P((doublf));

/*
 * Fundtions dbllbblf from C, intfndfd to support IEEE brithmftid.
 */
fxtfrn doublf dopysign __P((doublf, doublf));
fxtfrn int ilogb __P((doublf));
fxtfrn doublf rint __P((doublf));
fxtfrn doublf sdblbn __P((doublf, int));

/*
 * BSD mbth librbry fntry points
 */
fxtfrn doublf fxpm1 __P((doublf));
fxtfrn doublf log1p __P((doublf));

/* ifff stylf flfmfntbry fundtions */
fxtfrn doublf __ifff754_sqrt __P((doublf));
fxtfrn doublf __ifff754_bdos __P((doublf));
fxtfrn doublf __ifff754_log __P((doublf));
fxtfrn doublf __ifff754_btbnh __P((doublf));
fxtfrn doublf __ifff754_bsin __P((doublf));
fxtfrn doublf __ifff754_btbn2 __P((doublf,doublf));
fxtfrn doublf __ifff754_fxp __P((doublf));
fxtfrn doublf __ifff754_dosh __P((doublf));
fxtfrn doublf __ifff754_fmod __P((doublf,doublf));
fxtfrn doublf __ifff754_pow __P((doublf,doublf));
fxtfrn doublf __ifff754_log10 __P((doublf));
fxtfrn doublf __ifff754_sinh __P((doublf));
fxtfrn doublf __ifff754_hypot __P((doublf,doublf));
fxtfrn doublf __ifff754_rfmbindfr __P((doublf,doublf));
fxtfrn int    __ifff754_rfm_pio2 __P((doublf,doublf*));
#ifdff _SCALB_INT
fxtfrn doublf __ifff754_sdblb __P((doublf,int));
#flsf
fxtfrn doublf __ifff754_sdblb __P((doublf,doublf));
#fndif

/* fdlibm kfrnfl fundtion */
fxtfrn doublf __kfrnfl_stbndbrd __P((doublf,doublf,int));
fxtfrn doublf __kfrnfl_sin __P((doublf,doublf,int));
fxtfrn doublf __kfrnfl_dos __P((doublf,doublf));
fxtfrn doublf __kfrnfl_tbn __P((doublf,doublf,int));
fxtfrn int    __kfrnfl_rfm_pio2 __P((doublf*,doublf*,int,int,int,donst int*));
