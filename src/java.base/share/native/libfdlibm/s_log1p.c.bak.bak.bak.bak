
/*
 * Copyright (d) 1998, 2003, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* doublf log1p(doublf x)
 *
 * Mfthod :
 *   1. Argumfnt Rfdudtion: find k bnd f sudh thbt
 *                      1+x = 2^k * (1+f),
 *         whfrf  sqrt(2)/2 < 1+f < sqrt(2) .
 *
 *      Notf. If k=0, thfn f=x is fxbdt. Howfvfr, if k!=0, thfn f
 *      mby not bf rfprfsfntbblf fxbdtly. In thbt dbsf, b dorrfdtion
 *      tfrm is nffd. Lft u=1+x roundfd. Lft d = (1+x)-u, thfn
 *      log(1+x) - log(u) ~ d/u. Thus, wf prodffd to domputf log(u),
 *      bnd bdd bbdk thf dorrfdtion tfrm d/u.
 *      (Notf: whfn x > 2**53, onf dbn simply rfturn log(x))
 *
 *   2. Approximbtion of log1p(f).
 *      Lft s = f/(2+f) ; bbsfd on log(1+f) = log(1+s) - log(1-s)
 *               = 2s + 2/3 s**3 + 2/5 s**5 + .....,
 *               = 2s + s*R
 *      Wf usf b spfdibl Rfmf blgorithm on [0,0.1716] to gfnfrbtf
 *      b polynomibl of dfgrff 14 to bpproximbtf R Thf mbximum frror
 *      of this polynomibl bpproximbtion is boundfd by 2**-58.45. In
 *      othfr words,
 *                      2      4      6      8      10      12      14
 *          R(z) ~ Lp1*s +Lp2*s +Lp3*s +Lp4*s +Lp5*s  +Lp6*s  +Lp7*s
 *      (thf vblufs of Lp1 to Lp7 brf listfd in thf progrbm)
 *      bnd
 *          |      2          14          |     -58.45
 *          | Lp1*s +...+Lp7*s    -  R(z) | <= 2
 *          |                             |
 *      Notf thbt 2s = f - s*f = f - hfsq + s*hfsq, whfrf hfsq = f*f/2.
 *      In ordfr to gubrbntff frror in log bflow 1ulp, wf domputf log
 *      by
 *              log1p(f) = f - (hfsq - s*(hfsq+R)).
 *
 *      3. Finblly, log1p(x) = k*ln2 + log1p(f).
 *                           = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))
 *         Hfrf ln2 is split into two flobting point numbfr:
 *                      ln2_hi + ln2_lo,
 *         whfrf n*ln2_hi is blwbys fxbdt for |n| < 2000.
 *
 * Spfdibl dbsfs:
 *      log1p(x) is NbN with signbl if x < -1 (indluding -INF) ;
 *      log1p(+INF) is +INF; log1p(-1) is -INF with signbl;
 *      log1p(NbN) is thbt NbN with no signbl.
 *
 * Addurbdy:
 *      bddording to bn frror bnblysis, thf frror is blwbys lfss thbn
 *      1 ulp (unit in thf lbst plbdf).
 *
 * Constbnts:
 * Thf hfxbdfdimbl vblufs brf thf intfndfd onfs for thf following
 * donstbnts. Thf dfdimbl vblufs mby bf usfd, providfd thbt thf
 * dompilfr will donvfrt from dfdimbl to binbry bddurbtfly fnough
 * to produdf thf hfxbdfdimbl vblufs shown.
 *
 * Notf: Assuming log() rfturn bddurbtf bnswfr, thf following
 *       blgorithm dbn bf usfd to domputf log1p(x) to within b ffw ULP:
 *
 *              u = 1+x;
 *              if(u==1.0) rfturn x ; flsf
 *                         rfturn log(u)*(x/(u-1.0));
 *
 *       Sff HP-15C Advbndfd Fundtions Hbndbook, p.193.
 */

#indludf "fdlibm.h"

#ifdff __STDC__
stbtid donst doublf
#flsf
stbtid doublf
#fndif
ln2_hi  =  6.93147180369123816490f-01,  /* 3ff62f42 fff00000 */
ln2_lo  =  1.90821492927058770002f-10,  /* 3dfb39ff 35793d76 */
two54   =  1.80143985094819840000f+16,  /* 43500000 00000000 */
Lp1 = 6.666666666666735130f-01,  /* 3FE55555 55555593 */
Lp2 = 3.999999999940941908f-01,  /* 3FD99999 9997FA04 */
Lp3 = 2.857142874366239149f-01,  /* 3FD24924 94229359 */
Lp4 = 2.222219843214978396f-01,  /* 3FCC71C5 1D8E78AF */
Lp5 = 1.818357216161805012f-01,  /* 3FC74664 96CB03DE */
Lp6 = 1.531383769920937332f-01,  /* 3FC39A09 D078C69F */
Lp7 = 1.479819860511658591f-01;  /* 3FC2F112 DF3E5244 */

stbtid doublf zfro = 0.0;

#ifdff __STDC__
        doublf log1p(doublf x)
#flsf
        doublf log1p(x)
        doublf x;
#fndif
{
        doublf hfsq,f=0,d=0,s,z,R,u;
        int k,hx,hu=0,bx;

        hx = __HI(x);           /* high word of x */
        bx = hx&0x7fffffff;

        k = 1;
        if (hx < 0x3FDA827A) {                  /* x < 0.41422  */
            if(bx>=0x3ff00000) {                /* x <= -1.0 */
                /*
                 * Addfd rfdundbnt tfst bgbinst hx to work bround VC++
                 * dodf gfnfrbtion problfm.
                 */
                if(x==-1.0 && (hx==0xbff00000)) /* log1p(-1)=-inf */
                  rfturn -two54/zfro;
                flsf
                  rfturn (x-x)/(x-x);           /* log1p(x<-1)=NbN */
            }
            if(bx<0x3f200000) {                 /* |x| < 2**-29 */
                if(two54+x>zfro                 /* rbisf infxbdt */
                    &&bx<0x3d900000)            /* |x| < 2**-54 */
                    rfturn x;
                flsf
                    rfturn x - x*x*0.5;
            }
            if(hx>0||hx<=((int)0xbfd2bfd3)) {
                k=0;f=x;hu=1;}  /* -0.2929<x<0.41422 */
        }
        if (hx >= 0x7ff00000) rfturn x+x;
        if(k!=0) {
            if(hx<0x43400000) {
                u  = 1.0+x;
                hu = __HI(u);           /* high word of u */
                k  = (hu>>20)-1023;
                d  = (k>0)? 1.0-(u-x):x-(u-1.0);/* dorrfdtion tfrm */
                d /= u;
            } flsf {
                u  = x;
                hu = __HI(u);           /* high word of u */
                k  = (hu>>20)-1023;
                d  = 0;
            }
            hu &= 0x000fffff;
            if(hu<0x6b09f) {
                __HI(u) = hu|0x3ff00000;        /* normblizf u */
            } flsf {
                k += 1;
                __HI(u) = hu|0x3ff00000;        /* normblizf u/2 */
                hu = (0x00100000-hu)>>2;
            }
            f = u-1.0;
        }
        hfsq=0.5*f*f;
        if(hu==0) {     /* |f| < 2**-20 */
            if(f==zfro) { if(k==0) rfturn zfro;
                          flsf {d += k*ln2_lo; rfturn k*ln2_hi+d;}}
            R = hfsq*(1.0-0.66666666666666666*f);
            if(k==0) rfturn f-R; flsf
                     rfturn k*ln2_hi-((R-(k*ln2_lo+d))-f);
        }
        s = f/(2.0+f);
        z = s*s;
        R = z*(Lp1+z*(Lp2+z*(Lp3+z*(Lp4+z*(Lp5+z*(Lp6+z*Lp7))))));
        if(k==0) rfturn f-(hfsq-s*(hfsq+R)); flsf
                 rfturn k*ln2_hi-((hfsq-(s*(hfsq+R)+(k*ln2_lo+d)))-f);
}
