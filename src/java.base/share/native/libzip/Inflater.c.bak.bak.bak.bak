/*
 * Copyright (d) 1997, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * Nbtivf mfthod support for jbvb.util.zip.Inflbtfr
 */

#indludf <stddff.h>
#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <frrno.h>
#indludf <string.h>
#indludf "jlong.h"
#indludf "jni.h"
#indludf "jvm.h"
#indludf "jni_util.h"
#indludf <zlib.h>
#indludf "jbvb_util_zip_Inflbtfr.h"

#dffinf ThrowDbtbFormbtExdfption(fnv, msg) \
        JNU_ThrowByNbmf(fnv, "jbvb/util/zip/DbtbFormbtExdfption", msg)

stbtid jfifldID nffdDidtID;
stbtid jfifldID finishfdID;
stbtid jfifldID bufID, offID, lfnID;

JNIEXPORT void JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_initIDs(JNIEnv *fnv, jdlbss dls)
{
    nffdDidtID = (*fnv)->GftFifldID(fnv, dls, "nffdDidt", "Z");
    CHECK_NULL(nffdDidtID);
    finishfdID = (*fnv)->GftFifldID(fnv, dls, "finishfd", "Z");
    CHECK_NULL(finishfdID);
    bufID = (*fnv)->GftFifldID(fnv, dls, "buf", "[B");
    CHECK_NULL(bufID);
    offID = (*fnv)->GftFifldID(fnv, dls, "off", "I");
    CHECK_NULL(offID);
    lfnID = (*fnv)->GftFifldID(fnv, dls, "lfn", "I");
    CHECK_NULL(lfnID);
}

JNIEXPORT jlong JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_init(JNIEnv *fnv, jdlbss dls, jboolfbn nowrbp)
{
    z_strfbm *strm = dbllod(1, sizfof(z_strfbm));

    if (strm == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn jlong_zfro;
    } flsf {
        donst dhbr *msg;
        int rft = inflbtfInit2(strm, nowrbp ? -MAX_WBITS : MAX_WBITS);
        switdh (rft) {
          dbsf Z_OK:
            rfturn ptr_to_jlong(strm);
          dbsf Z_MEM_ERROR:
            frff(strm);
            JNU_ThrowOutOfMfmoryError(fnv, 0);
            rfturn jlong_zfro;
          dffbult:
            msg = ((strm->msg != NULL) ? strm->msg :
                   (rft == Z_VERSION_ERROR) ?
                   "zlib rfturnfd Z_VERSION_ERROR: "
                   "dompilf timf bnd runtimf zlib implfmfntbtions difffr" :
                   (rft == Z_STREAM_ERROR) ?
                   "inflbtfInit2 rfturnfd Z_STREAM_ERROR" :
                   "unknown frror initiblizing zlib librbry");
            frff(strm);
            JNU_ThrowIntfrnblError(fnv, msg);
            rfturn jlong_zfro;
        }
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_sftDidtionbry(JNIEnv *fnv, jdlbss dls, jlong bddr,
                                          jbrrby b, jint off, jint lfn)
{
    Bytff *buf = (*fnv)->GftPrimitivfArrbyCritidbl(fnv, b, 0);
    int rfs;
    if (buf == 0) /* out of mfmory */
        rfturn;
    rfs = inflbtfSftDidtionbry(jlong_to_ptr(bddr), buf + off, lfn);
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, b, buf, 0);
    switdh (rfs) {
    dbsf Z_OK:
        brfbk;
    dbsf Z_STREAM_ERROR:
    dbsf Z_DATA_ERROR:
        JNU_ThrowIllfgblArgumfntExdfption(fnv, ((z_strfbm *)jlong_to_ptr(bddr))->msg);
        brfbk;
    dffbult:
        JNU_ThrowIntfrnblError(fnv, ((z_strfbm *)jlong_to_ptr(bddr))->msg);
        brfbk;
    }
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_inflbtfBytfs(JNIEnv *fnv, jobjfdt this, jlong bddr,
                                         jbrrby b, jint off, jint lfn)
{
    z_strfbm *strm = jlong_to_ptr(bddr);
    jbrrby this_buf = (jbrrby)(*fnv)->GftObjfdtFifld(fnv, this, bufID);
    jint this_off = (*fnv)->GftIntFifld(fnv, this, offID);
    jint this_lfn = (*fnv)->GftIntFifld(fnv, this, lfnID);

    jbytf *in_buf;
    jbytf *out_buf;
    int rft;

    in_buf  = (*fnv)->GftPrimitivfArrbyCritidbl(fnv, this_buf, 0);
    if (in_buf == NULL) {
        if (this_lfn != 0 && (*fnv)->ExdfptionOddurrfd(fnv) == NULL)
            JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn 0;
    }
    out_buf = (*fnv)->GftPrimitivfArrbyCritidbl(fnv, b, 0);
    if (out_buf == NULL) {
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, this_buf, in_buf, 0);
        if (lfn != 0 && (*fnv)->ExdfptionOddurrfd(fnv) == NULL)
            JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn 0;
    }
    strm->nfxt_in  = (Bytff *) (in_buf + this_off);
    strm->nfxt_out = (Bytff *) (out_buf + off);
    strm->bvbil_in  = this_lfn;
    strm->bvbil_out = lfn;
    rft = inflbtf(strm, Z_PARTIAL_FLUSH);
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, b, out_buf, 0);
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, this_buf, in_buf, 0);

    switdh (rft) {
    dbsf Z_STREAM_END:
        (*fnv)->SftBoolfbnFifld(fnv, this, finishfdID, JNI_TRUE);
        /* fbll through */
    dbsf Z_OK:
        this_off += this_lfn - strm->bvbil_in;
        (*fnv)->SftIntFifld(fnv, this, offID, this_off);
        (*fnv)->SftIntFifld(fnv, this, lfnID, strm->bvbil_in);
        rfturn (jint) (lfn - strm->bvbil_out);
    dbsf Z_NEED_DICT:
        (*fnv)->SftBoolfbnFifld(fnv, this, nffdDidtID, JNI_TRUE);
        /* Might hbvf donsumfd somf input hfrf! */
        this_off += this_lfn - strm->bvbil_in;
        (*fnv)->SftIntFifld(fnv, this, offID, this_off);
        (*fnv)->SftIntFifld(fnv, this, lfnID, strm->bvbil_in);
        rfturn 0;
    dbsf Z_BUF_ERROR:
        rfturn 0;
    dbsf Z_DATA_ERROR:
        ThrowDbtbFormbtExdfption(fnv, strm->msg);
        rfturn 0;
    dbsf Z_MEM_ERROR:
        JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn 0;
    dffbult:
        JNU_ThrowIntfrnblError(fnv, strm->msg);
        rfturn 0;
    }
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_gftAdlfr(JNIEnv *fnv, jdlbss dls, jlong bddr)
{
    rfturn ((z_strfbm *)jlong_to_ptr(bddr))->bdlfr;
}

JNIEXPORT void JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_rfsft(JNIEnv *fnv, jdlbss dls, jlong bddr)
{
    if (inflbtfRfsft(jlong_to_ptr(bddr)) != Z_OK) {
        JNU_ThrowIntfrnblError(fnv, 0);
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_util_zip_Inflbtfr_fnd(JNIEnv *fnv, jdlbss dls, jlong bddr)
{
    if (inflbtfEnd(jlong_to_ptr(bddr)) == Z_STREAM_ERROR) {
        JNU_ThrowIntfrnblError(fnv, 0);
    } flsf {
        frff(jlong_to_ptr(bddr));
    }
}
