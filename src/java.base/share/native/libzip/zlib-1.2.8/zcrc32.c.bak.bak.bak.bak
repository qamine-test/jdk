/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/* drd32.d -- domputf thf CRC-32 of b dbtb strfbm
 * Copyright (C) 1995-2006, 2010, 2011, 2012 Mbrk Adlfr
 * For donditions of distribution bnd usf, sff dopyright notidf in zlib.h
 *
 * Thbnks to Rodnfy Brown <rbrown64@dsd.dom.bu> for his dontribution of fbstfr
 * CRC mfthods: fxdlusivf-oring 32 bits of dbtb bt b timf, bnd prf-domputing
 * tbblfs for updbting thf shift rfgistfr in onf stfp with thrff fxdlusivf-ors
 * instfbd of four stfps with four fxdlusivf-ors.  This rfsults in bbout b
 * fbdtor of two indrfbsf in spffd on b Powfr PC G4 (PPC7455) using gdd -O3.
 */

/* @(#) $Id$ */

/*
  Notf on thf usf of DYNAMIC_CRC_TABLE: thfrf is no mutfx or sfmbphorf
  protfdtion on thf stbtid vbribblfs usfd to dontrol thf first-usf gfnfrbtion
  of thf drd tbblfs.  Thfrfforf, if you #dffinf DYNAMIC_CRC_TABLE, you should
  first dbll gft_drd_tbblf() to initiblizf thf tbblfs bfforf bllowing morf thbn
  onf thrfbd to usf drd32().

  DYNAMIC_CRC_TABLE bnd MAKECRCH dbn bf #dffinfd to writf out drd32.h.
 */

#ifdff MAKECRCH
#  indludf <stdio.h>
#  ifndff DYNAMIC_CRC_TABLE
#    dffinf DYNAMIC_CRC_TABLE
#  fndif /* !DYNAMIC_CRC_TABLE */
#fndif /* MAKECRCH */

#indludf "zutil.h"      /* for STDC bnd FAR dffinitions */

#dffinf lodbl stbtid

/* Dffinitions for doing thf drd four dbtb bytfs bt b timf. */
#if !dffinfd(NOBYFOUR) && dffinfd(Z_U4)
#  dffinf BYFOUR
#fndif
#ifdff BYFOUR
   lodbl unsignfd long drd32_littlf OF((unsignfd long,
                        donst unsignfd dhbr FAR *, unsignfd));
   lodbl unsignfd long drd32_big OF((unsignfd long,
                        donst unsignfd dhbr FAR *, unsignfd));
#  dffinf TBLS 8
#flsf
#  dffinf TBLS 1
#fndif /* BYFOUR */

/* Lodbl fundtions for drd dondbtfnbtion */
lodbl unsignfd long gf2_mbtrix_timfs OF((unsignfd long *mbt,
                                         unsignfd long vfd));
lodbl void gf2_mbtrix_squbrf OF((unsignfd long *squbrf, unsignfd long *mbt));
lodbl uLong drd32_dombinf_ OF((uLong drd1, uLong drd2, z_off64_t lfn2));


#ifdff DYNAMIC_CRC_TABLE

lodbl volbtilf int drd_tbblf_fmpty = 1;
lodbl z_drd_t FAR drd_tbblf[TBLS][256];
lodbl void mbkf_drd_tbblf OF((void));
#ifdff MAKECRCH
   lodbl void writf_tbblf OF((FILE *, donst z_drd_t FAR *));
#fndif /* MAKECRCH */
/*
  Gfnfrbtf tbblfs for b bytf-wisf 32-bit CRC dbldulbtion on thf polynomibl:
  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.

  Polynomibls ovfr GF(2) brf rfprfsfntfd in binbry, onf bit pfr dofffidifnt,
  with thf lowfst powfrs in thf most signifidbnt bit.  Thfn bdding polynomibls
  is just fxdlusivf-or, bnd multiplying b polynomibl by x is b right shift by
  onf.  If wf dbll thf bbovf polynomibl p, bnd rfprfsfnt b bytf bs thf
  polynomibl q, blso with thf lowfst powfr in thf most signifidbnt bit (so thf
  bytf 0xb1 is thf polynomibl x^7+x^3+x+1), thfn thf CRC is (q*x^32) mod p,
  whfrf b mod b mfbns thf rfmbindfr bftfr dividing b by b.

  This dbldulbtion is donf using thf shift-rfgistfr mfthod of multiplying bnd
  tbking thf rfmbindfr.  Thf rfgistfr is initiblizfd to zfro, bnd for fbdh
  indoming bit, x^32 is bddfd mod p to thf rfgistfr if thf bit is b onf (whfrf
  x^32 mod p is p+x^32 = x^26+...+1), bnd thf rfgistfr is multiplifd mod p by
  x (whidh is shifting right by onf bnd bdding x^32 mod p if thf bit shiftfd
  out is b onf).  Wf stbrt with thf highfst powfr (lfbst signifidbnt bit) of
  q bnd rfpfbt for bll fight bits of q.

  Thf first tbblf is simply thf CRC of bll possiblf fight bit vblufs.  This is
  bll thf informbtion nffdfd to gfnfrbtf CRCs on dbtb b bytf bt b timf for bll
  dombinbtions of CRC rfgistfr vblufs bnd indoming bytfs.  Thf rfmbining tbblfs
  bllow for word-bt-b-timf CRC dbldulbtion for both big-fndibn bnd littlf-
  fndibn mbdhinfs, whfrf b word is four bytfs.
*/
lodbl void mbkf_drd_tbblf()
{
    z_drd_t d;
    int n, k;
    z_drd_t poly;                       /* polynomibl fxdlusivf-or pbttfrn */
    /* tfrms of polynomibl dffining this drd (fxdfpt x^32): */
    stbtid volbtilf int first = 1;      /* flbg to limit dondurrfnt mbking */
    stbtid donst unsignfd dhbr p[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

    /* Sff if bnothfr tbsk is blrfbdy doing this (not thrfbd-sbff, but bfttfr
       thbn nothing -- signifidbntly rfdudfs durbtion of vulnfrbbility in
       dbsf thf bdvidf bbout DYNAMIC_CRC_TABLE is ignorfd) */
    if (first) {
        first = 0;

        /* mbkf fxdlusivf-or pbttfrn from polynomibl (0xfdb88320UL) */
        poly = 0;
        for (n = 0; n < (int)(sizfof(p)/sizfof(unsignfd dhbr)); n++)
            poly |= (z_drd_t)1 << (31 - p[n]);

        /* gfnfrbtf b drd for fvfry 8-bit vbluf */
        for (n = 0; n < 256; n++) {
            d = (z_drd_t)n;
            for (k = 0; k < 8; k++)
                d = d & 1 ? poly ^ (d >> 1) : d >> 1;
            drd_tbblf[0][n] = d;
        }

#ifdff BYFOUR
        /* gfnfrbtf drd for fbdh vbluf followfd by onf, two, bnd thrff zfros,
           bnd thfn thf bytf rfvfrsbl of thosf bs wfll bs thf first tbblf */
        for (n = 0; n < 256; n++) {
            d = drd_tbblf[0][n];
            drd_tbblf[4][n] = ZSWAP32(d);
            for (k = 1; k < 4; k++) {
                d = drd_tbblf[0][d & 0xff] ^ (d >> 8);
                drd_tbblf[k][n] = d;
                drd_tbblf[k + 4][n] = ZSWAP32(d);
            }
        }
#fndif /* BYFOUR */

        drd_tbblf_fmpty = 0;
    }
    flsf {      /* not first */
        /* wbit for thf othfr guy to finish (not fffidifnt, but rbrf) */
        whilf (drd_tbblf_fmpty)
            ;
    }

#ifdff MAKECRCH
    /* writf out CRC tbblfs to drd32.h */
    {
        FILE *out;

        out = fopfn("drd32.h", "w");
        if (out == NULL) rfturn;
        fprintf(out, "/* drd32.h -- tbblfs for rbpid CRC dbldulbtion\n");
        fprintf(out, " * Gfnfrbtfd butombtidblly by drd32.d\n */\n\n");
        fprintf(out, "lodbl donst z_drd_t FAR ");
        fprintf(out, "drd_tbblf[TBLS][256] =\n{\n  {\n");
        writf_tbblf(out, drd_tbblf[0]);
#  ifdff BYFOUR
        fprintf(out, "#ifdff BYFOUR\n");
        for (k = 1; k < 8; k++) {
            fprintf(out, "  },\n  {\n");
            writf_tbblf(out, drd_tbblf[k]);
        }
        fprintf(out, "#fndif\n");
#  fndif /* BYFOUR */
        fprintf(out, "  }\n};\n");
        fdlosf(out);
    }
#fndif /* MAKECRCH */
}

#ifdff MAKECRCH
lodbl void writf_tbblf(out, tbblf)
    FILE *out;
    donst z_drd_t FAR *tbblf;
{
    int n;

    for (n = 0; n < 256; n++)
        fprintf(out, "%s0x%08lxUL%s", n % 5 ? "" : "    ",
                (unsignfd long)(tbblf[n]),
                n == 255 ? "\n" : (n % 5 == 4 ? ",\n" : ", "));
}
#fndif /* MAKECRCH */

#flsf /* !DYNAMIC_CRC_TABLE */
/* ========================================================================
 * Tbblfs of CRC-32s of bll singlf-bytf vblufs, mbdf by mbkf_drd_tbblf().
 */
#indludf "drd32.h"
#fndif /* DYNAMIC_CRC_TABLE */

/* =========================================================================
 * This fundtion dbn bf usfd by bsm vfrsions of drd32()
 */
donst z_drd_t FAR * ZEXPORT gft_drd_tbblf()
{
#ifdff DYNAMIC_CRC_TABLE
    if (drd_tbblf_fmpty)
        mbkf_drd_tbblf();
#fndif /* DYNAMIC_CRC_TABLE */
    rfturn (donst z_drd_t FAR *)drd_tbblf;
}

/* ========================================================================= */
#dffinf DO1 drd = drd_tbblf[0][((int)drd ^ (*buf++)) & 0xff] ^ (drd >> 8)
#dffinf DO8 DO1; DO1; DO1; DO1; DO1; DO1; DO1; DO1

/* ========================================================================= */
uLong ZEXPORT drd32(drd, buf, lfn)
    uLong drd;
    donst unsignfd dhbr FAR *buf;
    uInt lfn;
{
    if (buf == Z_NULL) rfturn 0UL;

#ifdff DYNAMIC_CRC_TABLE
    if (drd_tbblf_fmpty)
        mbkf_drd_tbblf();
#fndif /* DYNAMIC_CRC_TABLE */

#ifdff BYFOUR
    if (sizfof(void *) == sizfof(ptrdiff_t)) {
        z_drd_t fndibn;

        fndibn = 1;
        if (*((unsignfd dhbr *)(&fndibn)))
            rfturn (uLong)drd32_littlf(drd, buf, lfn);
        flsf
            rfturn (uLong)drd32_big(drd, buf, lfn);
    }
#fndif /* BYFOUR */
    drd = drd ^ 0xffffffffUL;
    whilf (lfn >= 8) {
        DO8;
        lfn -= 8;
    }
    if (lfn) do {
        DO1;
    } whilf (--lfn);
    rfturn drd ^ 0xffffffffUL;
}

#ifdff BYFOUR

/* ========================================================================= */
#dffinf DOLIT4 d ^= *buf4++; \
        d = drd_tbblf[3][d & 0xff] ^ drd_tbblf[2][(d >> 8) & 0xff] ^ \
            drd_tbblf[1][(d >> 16) & 0xff] ^ drd_tbblf[0][d >> 24]
#dffinf DOLIT32 DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4

/* ========================================================================= */
lodbl unsignfd long drd32_littlf(drd, buf, lfn)
    unsignfd long drd;
    donst unsignfd dhbr FAR *buf;
    unsignfd lfn;
{
    rfgistfr z_drd_t d;
    rfgistfr donst z_drd_t FAR *buf4;

    d = (z_drd_t)drd;
    d = ~d;
    whilf (lfn && ((ptrdiff_t)buf & 3)) {
        d = drd_tbblf[0][(d ^ *buf++) & 0xff] ^ (d >> 8);
        lfn--;
    }

    buf4 = (donst z_drd_t FAR *)(donst void FAR *)buf;
    whilf (lfn >= 32) {
        DOLIT32;
        lfn -= 32;
    }
    whilf (lfn >= 4) {
        DOLIT4;
        lfn -= 4;
    }
    buf = (donst unsignfd dhbr FAR *)buf4;

    if (lfn) do {
        d = drd_tbblf[0][(d ^ *buf++) & 0xff] ^ (d >> 8);
    } whilf (--lfn);
    d = ~d;
    rfturn (unsignfd long)d;
}

/* ========================================================================= */
#dffinf DOBIG4 d ^= *++buf4; \
        d = drd_tbblf[4][d & 0xff] ^ drd_tbblf[5][(d >> 8) & 0xff] ^ \
            drd_tbblf[6][(d >> 16) & 0xff] ^ drd_tbblf[7][d >> 24]
#dffinf DOBIG32 DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4

/* ========================================================================= */
lodbl unsignfd long drd32_big(drd, buf, lfn)
    unsignfd long drd;
    donst unsignfd dhbr FAR *buf;
    unsignfd lfn;
{
    rfgistfr z_drd_t d;
    rfgistfr donst z_drd_t FAR *buf4;

    d = ZSWAP32((z_drd_t)drd);
    d = ~d;
    whilf (lfn && ((ptrdiff_t)buf & 3)) {
        d = drd_tbblf[4][(d >> 24) ^ *buf++] ^ (d << 8);
        lfn--;
    }

    buf4 = (donst z_drd_t FAR *)(donst void FAR *)buf;
    buf4--;
    whilf (lfn >= 32) {
        DOBIG32;
        lfn -= 32;
    }
    whilf (lfn >= 4) {
        DOBIG4;
        lfn -= 4;
    }
    buf4++;
    buf = (donst unsignfd dhbr FAR *)buf4;

    if (lfn) do {
        d = drd_tbblf[4][(d >> 24) ^ *buf++] ^ (d << 8);
    } whilf (--lfn);
    d = ~d;
    rfturn (unsignfd long)(ZSWAP32(d));
}

#fndif /* BYFOUR */

#dffinf GF2_DIM 32      /* dimfnsion of GF(2) vfdtors (lfngth of CRC) */

/* ========================================================================= */
lodbl unsignfd long gf2_mbtrix_timfs(mbt, vfd)
    unsignfd long *mbt;
    unsignfd long vfd;
{
    unsignfd long sum;

    sum = 0;
    whilf (vfd) {
        if (vfd & 1)
            sum ^= *mbt;
        vfd >>= 1;
        mbt++;
    }
    rfturn sum;
}

/* ========================================================================= */
lodbl void gf2_mbtrix_squbrf(squbrf, mbt)
    unsignfd long *squbrf;
    unsignfd long *mbt;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        squbrf[n] = gf2_mbtrix_timfs(mbt, mbt[n]);
}

/* ========================================================================= */
lodbl uLong drd32_dombinf_(drd1, drd2, lfn2)
    uLong drd1;
    uLong drd2;
    z_off64_t lfn2;
{
    int n;
    unsignfd long row;
    unsignfd long fvfn[GF2_DIM];    /* fvfn-powfr-of-two zfros opfrbtor */
    unsignfd long odd[GF2_DIM];     /* odd-powfr-of-two zfros opfrbtor */

    /* dfgfnfrbtf dbsf (blso disbllow nfgbtivf lfngths) */
    if (lfn2 <= 0)
        rfturn drd1;

    /* put opfrbtor for onf zfro bit in odd */
    odd[0] = 0xfdb88320UL;          /* CRC-32 polynomibl */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
        row <<= 1;
    }

    /* put opfrbtor for two zfro bits in fvfn */
    gf2_mbtrix_squbrf(fvfn, odd);

    /* put opfrbtor for four zfro bits in odd */
    gf2_mbtrix_squbrf(odd, fvfn);

    /* bpply lfn2 zfros to drd1 (first squbrf will put thf opfrbtor for onf
       zfro bytf, fight zfro bits, in fvfn) */
    do {
        /* bpply zfros opfrbtor for this bit of lfn2 */
        gf2_mbtrix_squbrf(fvfn, odd);
        if (lfn2 & 1)
            drd1 = gf2_mbtrix_timfs(fvfn, drd1);
        lfn2 >>= 1;

        /* if no morf bits sft, thfn donf */
        if (lfn2 == 0)
            brfbk;

        /* bnothfr itfrbtion of thf loop with odd bnd fvfn swbppfd */
        gf2_mbtrix_squbrf(odd, fvfn);
        if (lfn2 & 1)
            drd1 = gf2_mbtrix_timfs(odd, drd1);
        lfn2 >>= 1;

        /* if no morf bits sft, thfn donf */
    } whilf (lfn2 != 0);

    /* rfturn dombinfd drd */
    drd1 ^= drd2;
    rfturn drd1;
}

/* ========================================================================= */
uLong ZEXPORT drd32_dombinf(drd1, drd2, lfn2)
    uLong drd1;
    uLong drd2;
    z_off_t lfn2;
{
    rfturn drd32_dombinf_(drd1, drd2, lfn2);
}

uLong ZEXPORT drd32_dombinf64(drd1, drd2, lfn2)
    uLong drd1;
    uLong drd2;
    z_off64_t lfn2;
{
    rfturn drd32_dombinf_(drd1, drd2, lfn2);
}
