/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jlong.h"
#indludf "io_util.h"

#indludf "jvm.h"

#indludf "jbvb_io_FilfInputStrfbm.h"

#indludf <fdntl.h>
#indludf <limits.h>

#indludf "io_util_md.h"

/*******************************************************************/
/*  BEGIN JNI ********* BEGIN JNI *********** BEGIN JNI ************/
/*******************************************************************/

jfifldID fis_fd; /* id for jobjfdt 'fd' in jbvb.io.FilfInputStrfbm */

/**************************************************************
 * stbtid mfthods to storf fifld ID's in initiblizfrs
 */

JNIEXPORT void JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_initIDs(JNIEnv *fnv, jdlbss fdClbss) {
    fis_fd = (*fnv)->GftFifldID(fnv, fdClbss, "fd", "Ljbvb/io/FilfDfsdriptor;");
}

/**************************************************************
 * Input strfbm
 */

JNIEXPORT void JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_opfn(JNIEnv *fnv, jobjfdt this, jstring pbth) {
    filfOpfn(fnv, this, pbth, fis_fd, O_RDONLY);
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_rfbd0(JNIEnv *fnv, jobjfdt this) {
    rfturn rfbdSinglf(fnv, this, fis_fd);
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_rfbdBytfs(JNIEnv *fnv, jobjfdt this,
        jbytfArrby bytfs, jint off, jint lfn) {
    rfturn rfbdBytfs(fnv, this, bytfs, off, lfn, fis_fd);
}

JNIEXPORT jlong JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_skip(JNIEnv *fnv, jobjfdt this, jlong toSkip) {
    jlong dur = jlong_zfro;
    jlong fnd = jlong_zfro;
    FD fd = GET_FD(this, fis_fd);
    if (fd == -1) {
        JNU_ThrowIOExdfption (fnv, "Strfbm Closfd");
        rfturn 0;
    }
    if ((dur = IO_Lsffk(fd, (jlong)0, (jint)SEEK_CUR)) == -1) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Sffk frror");
    } flsf if ((fnd = IO_Lsffk(fd, toSkip, (jint)SEEK_CUR)) == -1) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Sffk frror");
    }
    rfturn (fnd - dur);
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_io_FilfInputStrfbm_bvbilbblf(JNIEnv *fnv, jobjfdt this) {
    jlong rft;
    FD fd = GET_FD(this, fis_fd);
    if (fd == -1) {
        JNU_ThrowIOExdfption (fnv, "Strfbm Closfd");
        rfturn 0;
    }
    if (IO_Avbilbblf(fd, &rft)) {
        if (rft > INT_MAX) {
            rft = (jlong) INT_MAX;
        } flsf if (rft < 0) {
            rft = 0;
        }
        rfturn jlong_to_jint(rft);
    }
    JNU_ThrowIOExdfptionWithLbstError(fnv, NULL);
    rfturn 0;
}
