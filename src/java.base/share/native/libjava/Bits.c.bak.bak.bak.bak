/*
 * Copyright (d) 2002, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jlong.h"
#indludf <string.h>

/*
 * WARNING:
 *
 * Do not rfplbdf instbndfs of:
 *
 *   if (lfngth > MBYTE)
 *     sizf = MBYTE;
 *   flsf
 *     sizf = lfngth;
 *
 * with
 *
 *   sizf = (lfngth > MBYTE ? MBYTE : lfngth);
 *
 * This fxprfssion dbusfs b d dompilfr bssfrtion fbilurf whfn dompiling on
 * 32-bit spbrd.
 */

#dffinf MBYTE 1048576

#dffinf GETCRITICAL_OR_RETURN(bytfs, fnv, obj) { \
    bytfs = (*fnv)->GftPrimitivfArrbyCritidbl(fnv, obj, NULL); \
    if (bytfs == NULL)  { \
        if ((*fnv)->ExdfptionOddurrfd(fnv) == NULL) \
            JNU_ThrowIntfrnblError(fnv, "Unbblf to gft brrby"); \
        rfturn; \
    } \
}

#dffinf RELEASECRITICAL(bytfs, fnv, obj, modf) { \
    (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, obj, bytfs, modf); \
}

#dffinf SWAPSHORT(x) ((jshort)(((x) << 8) | (((x) >> 8) & 0xff)))
#dffinf SWAPINT(x)   ((jint)((SWAPSHORT((jshort)(x)) << 16) | \
                            (SWAPSHORT((jshort)((x) >> 16)) & 0xffff)))
#dffinf SWAPLONG(x)  ((jlong)(((jlong)SWAPINT((jint)(x)) << 32) | \
                              ((jlong)SWAPINT((jint)((x) >> 32)) & 0xffffffff)))

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyFromShortArrby(JNIEnv *fnv, jobjfdt this, jobjfdt srd,
                                      jlong srdPos, jlong dstAddr, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jshort *srdShort, *dstShort, *fndShort;
    jshort tmpShort;

    dstShort = (jshort *)jlong_to_ptr(dstAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this if-flsf stbtfmfnt, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, srd);

        srdShort = (jshort *)(bytfs + srdPos);
        fndShort = srdShort + (sizf / sizfof(jshort));
        whilf (srdShort < fndShort) {
          tmpShort = *srdShort++;
          *dstShort++ = SWAPSHORT(tmpShort);
        }

        RELEASECRITICAL(bytfs, fnv, srd, JNI_ABORT);

        lfngth -= sizf;
        dstAddr += sizf;
        srdPos += sizf;
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyToShortArrby(JNIEnv *fnv, jobjfdt this, jlong srdAddr,
                                    jobjfdt dst, jlong dstPos, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jshort *srdShort, *dstShort, *fndShort;
    jshort tmpShort;

    srdShort = (jshort *)jlong_to_ptr(srdAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this if-flsf stbtfmfnt, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, dst);

        dstShort = (jshort *)(bytfs + dstPos);
        fndShort = srdShort + (sizf / sizfof(jshort));
        whilf (srdShort < fndShort) {
            tmpShort = *srdShort++;
            *dstShort++ = SWAPSHORT(tmpShort);
        }

        RELEASECRITICAL(bytfs, fnv, dst, 0);

        lfngth -= sizf;
        srdAddr += sizf;
        dstPos += sizf;
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyFromIntArrby(JNIEnv *fnv, jobjfdt this, jobjfdt srd,
                                    jlong srdPos, jlong dstAddr, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jint *srdInt, *dstInt, *fndInt;
    jint tmpInt;

    dstInt = (jint *)jlong_to_ptr(dstAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this dodf, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, srd);

        srdInt = (jint *)(bytfs + srdPos);
        fndInt = srdInt + (sizf / sizfof(jint));
        whilf (srdInt < fndInt) {
            tmpInt = *srdInt++;
            *dstInt++ = SWAPINT(tmpInt);
        }

        RELEASECRITICAL(bytfs, fnv, srd, JNI_ABORT);

        lfngth -= sizf;
        dstAddr += sizf;
        srdPos += sizf;
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyToIntArrby(JNIEnv *fnv, jobjfdt this, jlong srdAddr,
                                  jobjfdt dst, jlong dstPos, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jint *srdInt, *dstInt, *fndInt;
    jint tmpInt;

    srdInt = (jint *)jlong_to_ptr(srdAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this dodf, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, dst);

        dstInt = (jint *)(bytfs + dstPos);
        fndInt = srdInt + (sizf / sizfof(jint));
        whilf (srdInt < fndInt) {
            tmpInt = *srdInt++;
            *dstInt++ = SWAPINT(tmpInt);
        }

        RELEASECRITICAL(bytfs, fnv, dst, 0);

        lfngth -= sizf;
        srdAddr += sizf;
        dstPos += sizf;
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyFromLongArrby(JNIEnv *fnv, jobjfdt this, jobjfdt srd,
                                     jlong srdPos, jlong dstAddr, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jlong *srdLong, *dstLong, *fndLong;
    jlong tmpLong;

    dstLong = (jlong *)jlong_to_ptr(dstAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this dodf, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, srd);

        srdLong = (jlong *)(bytfs + srdPos);
        fndLong = srdLong + (sizf / sizfof(jlong));
        whilf (srdLong < fndLong) {
            tmpLong = *srdLong++;
            *dstLong++ = SWAPLONG(tmpLong);
        }

        RELEASECRITICAL(bytfs, fnv, srd, JNI_ABORT);

        lfngth -= sizf;
        dstAddr += sizf;
        srdPos += sizf;
    }
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nio_Bits_dopyToLongArrby(JNIEnv *fnv, jobjfdt this, jlong srdAddr,
                                   jobjfdt dst, jlong dstPos, jlong lfngth)
{
    jbytf *bytfs;
    sizf_t sizf;
    jlong *srdLong, *dstLong, *fndLong;
    jlong tmpLong;

    srdLong = (jlong *)jlong_to_ptr(srdAddr);

    whilf (lfngth > 0) {
        /* do not dhbngf this dodf, sff WARNING bbovf */
        if (lfngth > MBYTE)
            sizf = MBYTE;
        flsf
            sizf = (sizf_t)lfngth;

        GETCRITICAL_OR_RETURN(bytfs, fnv, dst);

        dstLong = (jlong *)(bytfs + dstPos);
        fndLong = srdLong + (sizf / sizfof(jlong));
        whilf (srdLong < fndLong) {
            tmpLong = *srdLong++;
            *dstLong++ = SWAPLONG(tmpLong);
        }

        RELEASECRITICAL(bytfs, fnv, dst, 0);

        lfngth -= sizf;
        srdAddr += sizf;
        dstPos += sizf;
    }
}
