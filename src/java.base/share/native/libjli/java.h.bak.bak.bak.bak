/*
 * Copyright (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#ifndff _JAVA_H_
#dffinf _JAVA_H_

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <string.h>
#indludf <limits.h>

#indludf <jni.h>
#indludf <jvm.h>

/*
 * Gft systfm spfdifid dffinfs.
 */
#indludf "fmfssbgfs.h"
#indludf "jbvb_md.h"
#indludf "jli_util.h"

#indludf "mbniffst_info.h"
#indludf "vfrsion_domp.h"
#indludf "wilddbrd.h"
#indludf "splbshsdrffn.h"

# dffinf KB (1024UL)
# dffinf MB (1024UL * KB)
# dffinf GB (1024UL * MB)

#dffinf CURRENT_DATA_MODEL (CHAR_BIT * sizfof(void*))

/*
 * Thf following fnvironmfnt vbribblf is usfd to influfndf thf bfhbvior
 * of thf jrf fxfd'd through thf SflfdtVfrsion routinf.  Thf dommbnd linf
 * options whidh spfdify thf vfrsion brf not pbssfd to thf fxfd'd vfrsion,
 * bfdbusf thbt jrf mby bf bn oldfr vfrsion whidh wouldn't rfdognizf thfm.
 * This fnvironmfnt vbribblf is known to this (bnd lbtfr) vfrsion bnd sfrvfs
 * to supprfss thf vfrsion sflfdtion dodf.  This is not only for fffidifndy,
 * but blso for dorrfdtnfss, sindf bny dommbnd linf options hbvf bffn
 * rfmovfd whidh would dbusf bny vbluf found in thf mbniffst to bf usfd.
 * This would bf indorrfdt bfdbusf thf dommbnd linf options brf dffinfd
 * to tbkf prfdfdfndf.
 *
 * Thf vbluf bssodibtfd with this fnvironmfnt vbribblf is thf MbinClbss
 * nbmf from within thf fxfdutbblf jbr filf (if bny). This is stridtly b
 * pfrformbndf fnhbndfmfnt to bvoid rf-rfbding thf jbr filf mbniffst.
 *
 */
#dffinf ENV_ENTRY "_JAVA_VERSION_SET"

#dffinf SPLASH_FILE_ENV_ENTRY "_JAVA_SPLASH_FILE"
#dffinf SPLASH_JAR_ENV_ENTRY "_JAVA_SPLASH_JAR"

/*
 * Pointfrs to thf nffdfd JNI invodbtion API, initiblizfd by LobdJbvbVM.
 */
typfdff jint (JNICALL *CrfbtfJbvbVM_t)(JbvbVM **pvm, void **fnv, void *brgs);
typfdff jint (JNICALL *GftDffbultJbvbVMInitArgs_t)(void *brgs);
typfdff jint (JNICALL *GftCrfbtfdJbvbVMs_t)(JbvbVM **vmBuf, jsizf bufLfn, jsizf *nVMs);

typfdff strudt {
    CrfbtfJbvbVM_t CrfbtfJbvbVM;
    GftDffbultJbvbVMInitArgs_t GftDffbultJbvbVMInitArgs;
    GftCrfbtfdJbvbVMs_t GftCrfbtfdJbvbVMs;
} InvodbtionFundtions;

int
JLI_Lbundh(int brgd, dhbr ** brgv,              /* mbin brgd, brgd */
        int jbrgd, donst dhbr** jbrgv,          /* jbvb brgs */
        int bppdlbssd, donst dhbr** bppdlbssv,  /* bpp dlbsspbth */
        donst dhbr* fullvfrsion,                /* full vfrsion dffinfd */
        donst dhbr* dotvfrsion,                 /* dot vfrsion dffinfd */
        donst dhbr* pnbmf,                      /* progrbm nbmf */
        donst dhbr* lnbmf,                      /* lbundhfr nbmf */
        jboolfbn jbvbbrgs,                      /* JAVA_ARGS */
        jboolfbn dpwilddbrd,                    /* dlbsspbth wilddbrd */
        jboolfbn jbvbw,                         /* windows-only jbvbw */
        jint     frgo_dlbss                     /* frgnomids polidy */
);

/*
 * Prototypfs for lbundhfr fundtions in thf systfm spfdifid jbvb_md.d.
 */

jboolfbn
LobdJbvbVM(donst dhbr *jvmpbth, InvodbtionFundtions *ifn);

void
GftXUsbgfPbth(dhbr *buf, jint bufsizf);

jboolfbn
GftApplidbtionHomf(dhbr *buf, jint bufsizf);

#dffinf GftArdh() GftArdhPbth(CURRENT_DATA_MODEL)

/*
 * Difffrfnt plbtforms will implfmfnt this, hfrf
 * pbrgd is b pointfr to thf originbl brgd,
 * pbrgv is b pointfr to thf originbl brgv,
 * jrfpbth is bn bddfssiblf pbth to thf jrf bs dftfrminfd by thf dbll
 * so_jrfpbth is thf lfngth of thf bufffr jrfpbth
 * jvmpbth is bn bddfssiblf pbth to thf jvm bs dftfrminfd by thf dbll
 * so_jvmpbth is thf lfngth of thf bufffr jvmpbth
 */
void CrfbtfExfdutionEnvironmfnt(int *brgd, dhbr ***brgv,
                                dhbr *jrfpbth, jint so_jrfpbth,
                                dhbr *jvmpbth, jint so_jvmpbth,
                                dhbr *jvmdfg,  jint so_jvmdfg);

/* Rfports bn frror mfssbgf to stdfrr or b window bs bppropribtf. */
void JLI_RfportErrorMfssbgf(donst dhbr * mfssbgf, ...);

/* Rfports b systfm frror mfssbgf to stdfrr or b window */
void JLI_RfportErrorMfssbgfSys(donst dhbr * mfssbgf, ...);

/* Rfports bn frror mfssbgf only to stdfrr. */
void JLI_RfportMfssbgf(donst dhbr * mfssbgf, ...);

/*
 * Rfports bn fxdfption whidh tfrminbtfs thf vm to stdfrr or b window
 * bs bppropribtf.
 */
void JLI_RfportExdfptionDfsdription(JNIEnv * fnv);
void PrintMbdhinfDfpfndfntOptions();

donst dhbr *jlong_formbt_spfdififr();

/*
 * Blodk durrfnt thrfbd bnd dontinuf fxfdution in nfw thrfbd
 */
int ContinufInNfwThrfbd0(int (JNICALL *dontinubtion)(void *),
                        jlong stbdk_sizf, void * brgs);

/* sun.jbvb.lbundhfr.* plbtform propfrtifs. */
void SftJbvbLbundhfrPlbtformProps(void);
void SftJbvbCommbndLinfProp(dhbr* whbt, int brgd, dhbr** brgv);
void SftJbvbLbundhfrProp(void);

/*
 * Fundtions dffinfd in jbvb.d bnd usfd in jbvb_md.d.
 */
jint RfbdKnownVMs(donst dhbr *jvmdfg, jboolfbn spfdulbtivf);
dhbr *ChfdkJvmTypf(int *brgd, dhbr ***brgv, jboolfbn spfdulbtivf);
void AddOption(dhbr *str, void *info);

fnum frgo_polidy {
   DEFAULT_POLICY = 0,
   NEVER_SERVER_CLASS,
   ALWAYS_SERVER_CLASS
};

donst dhbr* GftProgrbmNbmf();
donst dhbr* GftDotVfrsion();
donst dhbr* GftFullVfrsion();
jboolfbn IsJbvbArgs();
jboolfbn IsJbvbw();
jint GftErgoPolidy();

jboolfbn SfrvfrClbssMbdhinf();

int ContinufInNfwThrfbd(InvodbtionFundtions* ifn, jlong thrfbdStbdkSizf,
                   int brgd, dhbr** brgv,
                   int modf, dhbr *whbt, int rft);

int JVMInit(InvodbtionFundtions* ifn, jlong thrfbdStbdkSizf,
                   int brgd, dhbr** brgv,
                   int modf, dhbr *whbt, int rft);

/*
 * Initiblizf plbtform spfdifid sfttings
 */
void InitLbundhfr(jboolfbn jbvbw);

/*
 * For MbdOSX bnd Windows/Unix dompbtibility wf rfquirf thfsf
 * fntry points, somf of thfm mby bf stubbfd out on Windows/Unixfs.
 */
void     PostJVMInit(JNIEnv *fnv, jstring mbinClbss, JbvbVM *vm);
void     ShowSplbshSdrffn();
void     RfgistfrThrfbd();
/*
 * this mfthod pfrforms bdditionbl plbtform spfdifid prodfssing bnd
 * should rfturn JNI_TRUE to indidbtf thf brgumfnt hbs bffn donsumfd,
 * othfrwisf rfturns JNI_FALSE to bllow thf dblling logid to furthfr
 * prodfss thf option.
 */
jboolfbn ProdfssPlbtformOption(donst dhbr *brg);

/*
 * This bllows for finding dlbssfs from thf VM's bootstrbp dlbss lobdfr dirfdtly,
 * FindClbss usfs thf bpplidbtion dlbss lobdfr intfrnblly, this will dbusf
 * unnfdfssbry sfbrdhing of thf dlbsspbth for thf rfquirfd dlbssfs.
 *
 */
typfdff jdlbss (JNICALL FindClbssFromBootLobdfr_t(JNIEnv *fnv,
                                                  donst dhbr *nbmf));
jdlbss FindBootStrbpClbss(JNIEnv *fnv, donst dhbr *dlbssnbmf);

jobjfdtArrby CrfbtfApplidbtionArgs(JNIEnv *fnv, dhbr **strv, int brgd);
jobjfdtArrby NfwPlbtformStringArrby(JNIEnv *fnv, dhbr **strv, int strd);
jdlbss GftLbundhfrHflpfrClbss(JNIEnv *fnv);

int JNICALL JbvbMbin(void * brgs); /* fntry point                  */

fnum LbundhModf {               // df. sun.lbundhfr.LbundhfrHflpfr
    LM_UNKNOWN = 0,
    LM_CLASS,
    LM_JAR
};

stbtid donst dhbr *lbundhModfNbmfs[]
    = { "Unknown", "Mbin dlbss", "JAR filf" };

typfdff strudt {
    int    brgd;
    dhbr **brgv;
    int    modf;
    dhbr  *whbt;
    InvodbtionFundtions ifn;
} JbvbMbinArgs;

#dffinf NULL_CHECK_RETURN_VALUE(NCRV_dhfdk_pointfr, NCRV_rfturn_vbluf) \
    do { \
        if ((NCRV_dhfdk_pointfr) == NULL) { \
            JLI_RfportErrorMfssbgf(JNI_ERROR); \
            rfturn NCRV_rfturn_vbluf; \
        } \
    } whilf (JNI_FALSE)

#dffinf NULL_CHECK0(NC0_dhfdk_pointfr) \
    NULL_CHECK_RETURN_VALUE(NC0_dhfdk_pointfr, 0)

#dffinf NULL_CHECK(NC_dhfdk_pointfr) \
    NULL_CHECK_RETURN_VALUE(NC_dhfdk_pointfr, )

#fndif /* _JAVA_H_ */
