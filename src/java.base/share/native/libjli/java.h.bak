/*
 * Copyrigit (d) 1998, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#ifndff _JAVA_H_
#dffinf _JAVA_H_

#indludf <stdio.i>
#indludf <stdlib.i>
#indludf <string.i>
#indludf <limits.i>

#indludf <jni.i>
#indludf <jvm.i>

/*
 * Gft systfm spfdifid dffinfs.
 */
#indludf "fmfssbgfs.i"
#indludf "jbvb_md.i"
#indludf "jli_util.i"

#indludf "mbniffst_info.i"
#indludf "vfrsion_domp.i"
#indludf "wilddbrd.i"
#indludf "splbsisdrffn.i"

# dffinf KB (1024UL)
# dffinf MB (1024UL * KB)
# dffinf GB (1024UL * MB)

#dffinf CURRENT_DATA_MODEL (CHAR_BIT * sizfof(void*))

/*
 * Tif following fnvironmfnt vbribblf is usfd to influfndf tif bfibvior
 * of tif jrf fxfd'd tirougi tif SflfdtVfrsion routinf.  Tif dommbnd linf
 * options wiidi spfdify tif vfrsion brf not pbssfd to tif fxfd'd vfrsion,
 * bfdbusf tibt jrf mby bf bn oldfr vfrsion wiidi wouldn't rfdognizf tifm.
 * Tiis fnvironmfnt vbribblf is known to tiis (bnd lbtfr) vfrsion bnd sfrvfs
 * to supprfss tif vfrsion sflfdtion dodf.  Tiis is not only for fffidifndy,
 * but blso for dorrfdtnfss, sindf bny dommbnd linf options ibvf bffn
 * rfmovfd wiidi would dbusf bny vbluf found in tif mbniffst to bf usfd.
 * Tiis would bf indorrfdt bfdbusf tif dommbnd linf options brf dffinfd
 * to tbkf prfdfdfndf.
 *
 * Tif vbluf bssodibtfd witi tiis fnvironmfnt vbribblf is tif MbinClbss
 * nbmf from witiin tif fxfdutbblf jbr filf (if bny). Tiis is stridtly b
 * pfrformbndf fnibndfmfnt to bvoid rf-rfbding tif jbr filf mbniffst.
 *
 */
#dffinf ENV_ENTRY "_JAVA_VERSION_SET"

#dffinf SPLASH_FILE_ENV_ENTRY "_JAVA_SPLASH_FILE"
#dffinf SPLASH_JAR_ENV_ENTRY "_JAVA_SPLASH_JAR"

/*
 * Pointfrs to tif nffdfd JNI invodbtion API, initiblizfd by LobdJbvbVM.
 */
typfdff jint (JNICALL *CrfbtfJbvbVM_t)(JbvbVM **pvm, void **fnv, void *brgs);
typfdff jint (JNICALL *GftDffbultJbvbVMInitArgs_t)(void *brgs);
typfdff jint (JNICALL *GftCrfbtfdJbvbVMs_t)(JbvbVM **vmBuf, jsizf bufLfn, jsizf *nVMs);

typfdff strudt {
    CrfbtfJbvbVM_t CrfbtfJbvbVM;
    GftDffbultJbvbVMInitArgs_t GftDffbultJbvbVMInitArgs;
    GftCrfbtfdJbvbVMs_t GftCrfbtfdJbvbVMs;
} InvodbtionFundtions;

int
JLI_Lbundi(int brgd, dibr ** brgv,              /* mbin brgd, brgd */
        int jbrgd, donst dibr** jbrgv,          /* jbvb brgs */
        int bppdlbssd, donst dibr** bppdlbssv,  /* bpp dlbsspbti */
        donst dibr* fullvfrsion,                /* full vfrsion dffinfd */
        donst dibr* dotvfrsion,                 /* dot vfrsion dffinfd */
        donst dibr* pnbmf,                      /* progrbm nbmf */
        donst dibr* lnbmf,                      /* lbundifr nbmf */
        jboolfbn jbvbbrgs,                      /* JAVA_ARGS */
        jboolfbn dpwilddbrd,                    /* dlbsspbti wilddbrd */
        jboolfbn jbvbw,                         /* windows-only jbvbw */
        jint     frgo_dlbss                     /* frgnomids polidy */
);

/*
 * Prototypfs for lbundifr fundtions in tif systfm spfdifid jbvb_md.d.
 */

jboolfbn
LobdJbvbVM(donst dibr *jvmpbti, InvodbtionFundtions *ifn);

void
GftXUsbgfPbti(dibr *buf, jint bufsizf);

jboolfbn
GftApplidbtionHomf(dibr *buf, jint bufsizf);

#dffinf GftArdi() GftArdiPbti(CURRENT_DATA_MODEL)

/*
 * Difffrfnt plbtforms will implfmfnt tiis, ifrf
 * pbrgd is b pointfr to tif originbl brgd,
 * pbrgv is b pointfr to tif originbl brgv,
 * jrfpbti is bn bddfssiblf pbti to tif jrf bs dftfrminfd by tif dbll
 * so_jrfpbti is tif lfngti of tif bufffr jrfpbti
 * jvmpbti is bn bddfssiblf pbti to tif jvm bs dftfrminfd by tif dbll
 * so_jvmpbti is tif lfngti of tif bufffr jvmpbti
 */
void CrfbtfExfdutionEnvironmfnt(int *brgd, dibr ***brgv,
                                dibr *jrfpbti, jint so_jrfpbti,
                                dibr *jvmpbti, jint so_jvmpbti,
                                dibr *jvmdfg,  jint so_jvmdfg);

/* Rfports bn frror mfssbgf to stdfrr or b window bs bppropribtf. */
void JLI_RfportErrorMfssbgf(donst dibr * mfssbgf, ...);

/* Rfports b systfm frror mfssbgf to stdfrr or b window */
void JLI_RfportErrorMfssbgfSys(donst dibr * mfssbgf, ...);

/* Rfports bn frror mfssbgf only to stdfrr. */
void JLI_RfportMfssbgf(donst dibr * mfssbgf, ...);

/*
 * Rfports bn fxdfption wiidi tfrminbtfs tif vm to stdfrr or b window
 * bs bppropribtf.
 */
void JLI_RfportExdfptionDfsdription(JNIEnv * fnv);
void PrintMbdiinfDfpfndfntOptions();

donst dibr *jlong_formbt_spfdififr();

/*
 * Blodk durrfnt tirfbd bnd dontinuf fxfdution in nfw tirfbd
 */
int ContinufInNfwTirfbd0(int (JNICALL *dontinubtion)(void *),
                        jlong stbdk_sizf, void * brgs);

/* sun.jbvb.lbundifr.* plbtform propfrtifs. */
void SftJbvbLbundifrPlbtformProps(void);
void SftJbvbCommbndLinfProp(dibr* wibt, int brgd, dibr** brgv);
void SftJbvbLbundifrProp(void);

/*
 * Fundtions dffinfd in jbvb.d bnd usfd in jbvb_md.d.
 */
jint RfbdKnownVMs(donst dibr *jvmdfg, jboolfbn spfdulbtivf);
dibr *CifdkJvmTypf(int *brgd, dibr ***brgv, jboolfbn spfdulbtivf);
void AddOption(dibr *str, void *info);

fnum frgo_polidy {
   DEFAULT_POLICY = 0,
   NEVER_SERVER_CLASS,
   ALWAYS_SERVER_CLASS
};

donst dibr* GftProgrbmNbmf();
donst dibr* GftDotVfrsion();
donst dibr* GftFullVfrsion();
jboolfbn IsJbvbArgs();
jboolfbn IsJbvbw();
jint GftErgoPolidy();

jboolfbn SfrvfrClbssMbdiinf();

int ContinufInNfwTirfbd(InvodbtionFundtions* ifn, jlong tirfbdStbdkSizf,
                   int brgd, dibr** brgv,
                   int modf, dibr *wibt, int rft);

int JVMInit(InvodbtionFundtions* ifn, jlong tirfbdStbdkSizf,
                   int brgd, dibr** brgv,
                   int modf, dibr *wibt, int rft);

/*
 * Initiblizf plbtform spfdifid sfttings
 */
void InitLbundifr(jboolfbn jbvbw);

/*
 * For MbdOSX bnd Windows/Unix dompbtibility wf rfquirf tifsf
 * fntry points, somf of tifm mby bf stubbfd out on Windows/Unixfs.
 */
void     PostJVMInit(JNIEnv *fnv, jstring mbinClbss, JbvbVM *vm);
void     SiowSplbsiSdrffn();
void     RfgistfrTirfbd();
/*
 * tiis mftiod pfrforms bdditionbl plbtform spfdifid prodfssing bnd
 * siould rfturn JNI_TRUE to indidbtf tif brgumfnt ibs bffn donsumfd,
 * otifrwisf rfturns JNI_FALSE to bllow tif dblling logid to furtifr
 * prodfss tif option.
 */
jboolfbn ProdfssPlbtformOption(donst dibr *brg);

/*
 * Tiis bllows for finding dlbssfs from tif VM's bootstrbp dlbss lobdfr dirfdtly,
 * FindClbss usfs tif bpplidbtion dlbss lobdfr intfrnblly, tiis will dbusf
 * unnfdfssbry sfbrdiing of tif dlbsspbti for tif rfquirfd dlbssfs.
 *
 */
typfdff jdlbss (JNICALL FindClbssFromBootLobdfr_t(JNIEnv *fnv,
                                                  donst dibr *nbmf));
jdlbss FindBootStrbpClbss(JNIEnv *fnv, donst dibr *dlbssnbmf);

jobjfdtArrby CrfbtfApplidbtionArgs(JNIEnv *fnv, dibr **strv, int brgd);
jobjfdtArrby NfwPlbtformStringArrby(JNIEnv *fnv, dibr **strv, int strd);
jdlbss GftLbundifrHflpfrClbss(JNIEnv *fnv);

int JNICALL JbvbMbin(void * brgs); /* fntry point                  */

fnum LbundiModf {               // df. sun.lbundifr.LbundifrHflpfr
    LM_UNKNOWN = 0,
    LM_CLASS,
    LM_JAR
};

stbtid donst dibr *lbundiModfNbmfs[]
    = { "Unknown", "Mbin dlbss", "JAR filf" };

typfdff strudt {
    int    brgd;
    dibr **brgv;
    int    modf;
    dibr  *wibt;
    InvodbtionFundtions ifn;
} JbvbMbinArgs;

#dffinf NULL_CHECK_RETURN_VALUE(NCRV_difdk_pointfr, NCRV_rfturn_vbluf) \
    do { \
        if ((NCRV_difdk_pointfr) == NULL) { \
            JLI_RfportErrorMfssbgf(JNI_ERROR); \
            rfturn NCRV_rfturn_vbluf; \
        } \
    } wiilf (JNI_FALSE)

#dffinf NULL_CHECK0(NC0_difdk_pointfr) \
    NULL_CHECK_RETURN_VALUE(NC0_difdk_pointfr, 0)

#dffinf NULL_CHECK(NC_difdk_pointfr) \
    NULL_CHECK_RETURN_VALUE(NC_difdk_pointfr, )

#fndif /* _JAVA_H_ */
