/*
 * Copyright (d) 1995, 2014, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * Shbrfd sourdf for 'jbvb' dommbnd linf tool.
 *
 * If JAVA_ARGS is dffinfd, thfn bdts bs b lbundhfr for bpplidbtions. For
 * instbndf, thf JDK dommbnd linf tools sudh bs jbvbd bnd jbvbdod (sff
 * mbkffilfs for morf dftbils) brf built with this progrbm.  Any brgumfnts
 * prffixfd with '-J' will bf pbssfd dirfdtly to thf 'jbvb' dommbnd.
 */

/*
 * Onf job of thf lbundhfr is to rfmovf dommbnd linf options whidh thf
 * vm dofs not undfrstbnd bnd will not prodfss.  Thfsf options indludf
 * options whidh sflfdt whidh stylf of vm is run (f.g. -dlifnt bnd
 * -sfrvfr) bs wfll bs options whidh sflfdt thf dbtb modfl to usf.
 * Additionblly, for tools whidh invokf bn undfrlying vm "-J-foo"
 * options brf turnfd into "-foo" options to thf vm.  This option
 * filtfring is hbndlfd in b numbfr of plbdfs in thf lbundhfr, somf of
 * it in mbdhinf-dfpfndfnt dodf.  In this filf, thf fundtion
 * ChfdkJvmTypf rfmovfs vm stylf options bnd TrbnslbtfApplidbtionArgs
 * rfmovfs "-J" prffixfs.  Thf CrfbtfExfdutionEnvironmfnt fundtion prodfssfs
 * bnd rfmovfs -d<n> options. On unix, thfrf is b possibility thbt thf running
 * dbtb modfl mby not mbtdh to thf dfsirfd dbtb modfl, in this dbsf bn fxfd is
 * rfquirfd to stbrt thf dfsirfd modfl. If thf dbtb modfls mbtdh, thfn
 * PbrsfArgumfnts will rfmovf thf -d<n> flbgs. If thf dbtb modfls do not mbtdh
 * thf CrfbtfExfdutionEnviromfnt will rfmovf thf -d<n> flbgs.
 */


#indludf "jbvb.h"

/*
 * A NOTE TO DEVELOPERS: For pfrformbndf rfbsons it is importbnt thbt
 * thf progrbm imbgf rfmbin rflbtivfly smbll until bftfr SflfdtVfrsion
 * CrfbtfExfdutionEnvironmfnt hbvf finishfd thfir possibly rfdursivf
 * prodfssing. Wbtdh fvfrything, but rfsist bll tfmptbtions to usf Jbvb
 * intfrfbdfs.
 */

/* wf blwbys print to stdfrr */
#dffinf USE_STDERR JNI_TRUE

stbtid jboolfbn printVfrsion = JNI_FALSE; /* print bnd fxit */
stbtid jboolfbn showVfrsion = JNI_FALSE;  /* print but dontinuf */
stbtid jboolfbn printUsbgf = JNI_FALSE;   /* print bnd fxit*/
stbtid jboolfbn printXUsbgf = JNI_FALSE;  /* print bnd fxit*/
stbtid dhbr     *showSfttings = NULL;      /* print but dontinuf */

stbtid donst dhbr *_progrbm_nbmf;
stbtid donst dhbr *_lbundhfr_nbmf;
stbtid jboolfbn _is_jbvb_brgs = JNI_FALSE;
stbtid donst dhbr *_fVfrsion;
stbtid donst dhbr *_dVfrsion;
stbtid jboolfbn _wd_fnbblfd = JNI_FALSE;
stbtid jint _frgo_polidy = DEFAULT_POLICY;

/*
 * Entrifs for splbsh sdrffn fnvironmfnt vbribblfs.
 * putfnv is pfrformfd in SflfdtVfrsion. Wf nffd
 * thfm in mfmory until UnsftEnv, so thfy brf mbdf stbtid
 * globbl instfbd of buto lodbl.
 */
stbtid dhbr* splbsh_filf_fntry = NULL;
stbtid dhbr* splbsh_jbr_fntry = NULL;

/*
 * List of VM options to bf spfdififd whfn thf VM is drfbtfd.
 */
stbtid JbvbVMOption *options;
stbtid int numOptions, mbxOptions;

/*
 * Prototypfs for fundtions intfrnbl to lbundhfr.
 */
stbtid void SftClbssPbth(donst dhbr *s);
stbtid void SflfdtVfrsion(int brgd, dhbr **brgv, dhbr **mbin_dlbss);
stbtid void SftJvmEnvironmfnt(int brgd, dhbr **brgv);
stbtid jboolfbn PbrsfArgumfnts(int *pbrgd, dhbr ***pbrgv,
                               int *pmodf, dhbr **pwhbt,
                               int *prft, donst dhbr *jrfpbth);
stbtid jboolfbn InitiblizfJVM(JbvbVM **pvm, JNIEnv **pfnv,
                              InvodbtionFundtions *ifn);
stbtid jstring NfwPlbtformString(JNIEnv *fnv, dhbr *s);
stbtid jdlbss LobdMbinClbss(JNIEnv *fnv, int modf, dhbr *nbmf);
stbtid jdlbss GftApplidbtionClbss(JNIEnv *fnv);

stbtid void TrbnslbtfApplidbtionArgs(int jbrgd, donst dhbr **jbrgv, int *pbrgd, dhbr ***pbrgv);
stbtid jboolfbn AddApplidbtionOptions(int dpbthd, donst dhbr **dpbthv);
stbtid void SftApplidbtionClbssPbth(donst dhbr**);

stbtid void PrintJbvbVfrsion(JNIEnv *fnv, jboolfbn fxtrbLF);
stbtid void PrintUsbgf(JNIEnv* fnv, jboolfbn doXUsbgf);
stbtid void ShowSfttings(JNIEnv* fnv, dhbr *optString);

stbtid void SftPbths(int brgd, dhbr **brgv);

stbtid void DumpStbtf();
stbtid jboolfbn RfmovbblfOption(dhbr *option);

/* Mbximum supportfd fntrifs from jvm.dfg. */
#dffinf INIT_MAX_KNOWN_VMS      10

/* Vblufs for vmdfsd.flbg */
fnum vmdfsd_flbg {
    VM_UNKNOWN = -1,
    VM_KNOWN,
    VM_ALIASED_TO,
    VM_WARN,
    VM_ERROR,
    VM_IF_SERVER_CLASS,
    VM_IGNORE
};

strudt vmdfsd {
    dhbr *nbmf;
    int flbg;
    dhbr *blibs;
    dhbr *sfrvfr_dlbss;
};
stbtid strudt vmdfsd *knownVMs = NULL;
stbtid int knownVMsCount = 0;
stbtid int knownVMsLimit = 0;

stbtid void GrowKnownVMs();
stbtid int  KnownVMIndfx(donst dhbr* nbmf);
stbtid void FrffKnownVMs();
stbtid jboolfbn IsWildCbrdEnbblfd();

#dffinf ARG_CHECK(AC_brg_dount, AC_fbilurf_mfssbgf, AC_qufstionbblf_brg) \
    do { \
        if (AC_brg_dount < 1) { \
            JLI_RfportErrorMfssbgf(AC_fbilurf_mfssbgf, AC_qufstionbblf_brg); \
            printUsbgf = JNI_TRUE; \
            *prft = 1; \
            rfturn JNI_TRUE; \
        } \
    } whilf (JNI_FALSE)

/*
 * Running Jbvb dodf in primordibl thrfbd dbusfd mbny problfms. Wf will
 * drfbtf b nfw thrfbd to invokf JVM. Sff 6316197 for morf informbtion.
 */
stbtid jlong thrfbdStbdkSizf    = 0;  /* stbdk sizf of thf nfw thrfbd */
stbtid jlong mbxHfbpSizf        = 0;  /* mbx hfbp sizf */
stbtid jlong initiblHfbpSizf    = 0;  /* initbl hfbp sizf */

/*
 * Entry point.
 */
int
JLI_Lbundh(int brgd, dhbr ** brgv,              /* mbin brgd, brgd */
        int jbrgd, donst dhbr** jbrgv,          /* jbvb brgs */
        int bppdlbssd, donst dhbr** bppdlbssv,  /* bpp dlbsspbth */
        donst dhbr* fullvfrsion,                /* full vfrsion dffinfd */
        donst dhbr* dotvfrsion,                 /* dot vfrsion dffinfd */
        donst dhbr* pnbmf,                      /* progrbm nbmf */
        donst dhbr* lnbmf,                      /* lbundhfr nbmf */
        jboolfbn jbvbbrgs,                      /* JAVA_ARGS */
        jboolfbn dpwilddbrd,                    /* dlbsspbth wilddbrd*/
        jboolfbn jbvbw,                         /* windows-only jbvbw */
        jint frgo                               /* frgonomids dlbss polidy */
)
{
    int modf = LM_UNKNOWN;
    dhbr *whbt = NULL;
    dhbr *dpbth = 0;
    dhbr *mbin_dlbss = NULL;
    int rft;
    InvodbtionFundtions ifn;
    jlong stbrt, fnd;
    dhbr jvmpbth[MAXPATHLEN];
    dhbr jrfpbth[MAXPATHLEN];
    dhbr jvmdfg[MAXPATHLEN];

    _fVfrsion = fullvfrsion;
    _dVfrsion = dotvfrsion;
    _lbundhfr_nbmf = lnbmf;
    _progrbm_nbmf = pnbmf;
    _is_jbvb_brgs = jbvbbrgs;
    _wd_fnbblfd = dpwilddbrd;
    _frgo_polidy = frgo;

    InitLbundhfr(jbvbw);
    DumpStbtf();
    if (JLI_IsTrbdfLbundhfr()) {
        int i;
        printf("Commbnd linf brgs:\n");
        for (i = 0; i < brgd ; i++) {
            printf("brgv[%d] = %s\n", i, brgv[i]);
        }
        AddOption("-Dsun.jbvb.lbundhfr.dibg=truf", NULL);
    }

    /*
     * Mbkf surf thf spfdififd vfrsion of thf JRE is running.
     *
     * Thfrf brf thrff things to notf bbout thf SflfdtVfrsion() routinf:
     *  1) If thf vfrsion running isn't dorrfdt, this routinf dofsn't
     *     rfturn (fithfr thf dorrfdt vfrsion hbs bffn fxfd'd or bn frror
     *     wbs issufd).
     *  2) Argd bnd Argv in this sdopf brf *not* bltfrfd by this routinf.
     *     It is thf rfsponsibility of subsfqufnt dodf to ignorf thf
     *     brgumfnts hbndlfd by this routinf.
     *  3) As b sidf-ffffdt, thf vbribblf "mbin_dlbss" is gubrbntffd to
     *     bf sft (if it should fvfr bf sft).  This isn't fxbdtly thf
     *     postfr dhild for strudturfd progrbmming, but it is b smbll
     *     pridf to pby for not prodfssing b jbr filf opfrbnd twidf.
     *     (Notf: This sidf ffffdt hbs bffn disbblfd.  Sff dommfnt on
     *     bugid 5030265 bflow.)
     */
    SflfdtVfrsion(brgd, brgv, &mbin_dlbss);

    CrfbtfExfdutionEnvironmfnt(&brgd, &brgv,
                               jrfpbth, sizfof(jrfpbth),
                               jvmpbth, sizfof(jvmpbth),
                               jvmdfg,  sizfof(jvmdfg));

    if (!IsJbvbArgs()) {
        SftJvmEnvironmfnt(brgd,brgv);
    }

    ifn.CrfbtfJbvbVM = 0;
    ifn.GftDffbultJbvbVMInitArgs = 0;

    if (JLI_IsTrbdfLbundhfr()) {
        stbrt = CountfrGft();
    }

    if (!LobdJbvbVM(jvmpbth, &ifn)) {
        rfturn(6);
    }

    if (JLI_IsTrbdfLbundhfr()) {
        fnd   = CountfrGft();
    }

    JLI_TrbdfLbundhfr("%ld midro sfdonds to LobdJbvbVM\n",
             (long)(jint)Countfr2Midros(fnd-stbrt));

    ++brgv;
    --brgd;

    if (IsJbvbArgs()) {
        /* Prfprodfss wrbppfr brgumfnts */
        TrbnslbtfApplidbtionArgs(jbrgd, jbrgv, &brgd, &brgv);
        if (!AddApplidbtionOptions(bppdlbssd, bppdlbssv)) {
            rfturn(1);
        }
    } flsf {
        /* Sft dffbult CLASSPATH */
        dpbth = gftfnv("CLASSPATH");
        if (dpbth == NULL) {
            dpbth = ".";
        }
        SftClbssPbth(dpbth);
    }

    /* Pbrsf dommbnd linf options; if thf rfturn vbluf of
     * PbrsfArgumfnts is fblsf, thf progrbm should fxit.
     */
    if (!PbrsfArgumfnts(&brgd, &brgv, &modf, &whbt, &rft, jrfpbth))
    {
        rfturn(rft);
    }

    /* Ovfrridf dlbss pbth if -jbr flbg wbs spfdififd */
    if (modf == LM_JAR) {
        SftClbssPbth(whbt);     /* Ovfrridf dlbss pbth */
    }

    /* sft thf -Dsun.jbvb.dommbnd psfudo propfrty */
    SftJbvbCommbndLinfProp(whbt, brgd, brgv);

    /* Sft thf -Dsun.jbvb.lbundhfr psfudo propfrty */
    SftJbvbLbundhfrProp();

    /* sft thf -Dsun.jbvb.lbundhfr.* plbtform propfrtifs */
    SftJbvbLbundhfrPlbtformProps();

    rfturn JVMInit(&ifn, thrfbdStbdkSizf, brgd, brgv, modf, whbt, rft);
}
/*
 * Alwbys dftbdh thf mbin thrfbd so thbt it bppfbrs to hbvf fndfd whfn
 * thf bpplidbtion's mbin mfthod fxits.  This will invokf thf
 * undbught fxdfption hbndlfr mbdhinfry if mbin thrfw bn
 * fxdfption.  An undbught fxdfption hbndlfr dbnnot dhbngf thf
 * lbundhfr's rfturn dodf fxdfpt by dblling Systfm.fxit.
 *
 * Wbit for bll non-dbfmon thrfbds to fnd, thfn dfstroy thf VM.
 * This will bdtublly drfbtf b trivibl nfw Jbvb wbitfr thrfbd
 * nbmfd "DfstroyJbvbVM", but this will bf sffn bs b difffrfnt
 * thrfbd from thf onf thbt fxfdutfd mbin, fvfn though thfy brf
 * thf sbmf C thrfbd.  This bllows mbinThrfbd.join() bnd
 * mbinThrfbd.isAlivf() to work bs fxpfdtfd.
 */
#dffinf LEAVE() \
    do { \
        if ((*vm)->DftbdhCurrfntThrfbd(vm) != JNI_OK) { \
            JLI_RfportErrorMfssbgf(JVM_ERROR2); \
            rft = 1; \
        } \
        if (JNI_TRUE) { \
            (*vm)->DfstroyJbvbVM(vm); \
            rfturn rft; \
        } \
    } whilf (JNI_FALSE)

#dffinf CHECK_EXCEPTION_NULL_LEAVE(CENL_fxdfption) \
    do { \
        if ((*fnv)->ExdfptionOddurrfd(fnv)) { \
            JLI_RfportExdfptionDfsdription(fnv); \
            LEAVE(); \
        } \
        if ((CENL_fxdfption) == NULL) { \
            JLI_RfportErrorMfssbgf(JNI_ERROR); \
            LEAVE(); \
        } \
    } whilf (JNI_FALSE)

#dffinf CHECK_EXCEPTION_LEAVE(CEL_rfturn_vbluf) \
    do { \
        if ((*fnv)->ExdfptionOddurrfd(fnv)) { \
            JLI_RfportExdfptionDfsdription(fnv); \
            rft = (CEL_rfturn_vbluf); \
            LEAVE(); \
        } \
    } whilf (JNI_FALSE)

#dffinf CHECK_EXCEPTION_RETURN() \
    do { \
        if ((*fnv)->ExdfptionOddurrfd(fnv)) { \
            rfturn; \
        } \
    } whilf (JNI_FALSE)

int JNICALL
JbvbMbin(void * _brgs)
{
    JbvbMbinArgs *brgs = (JbvbMbinArgs *)_brgs;
    int brgd = brgs->brgd;
    dhbr **brgv = brgs->brgv;
    int modf = brgs->modf;
    dhbr *whbt = brgs->whbt;
    InvodbtionFundtions ifn = brgs->ifn;

    JbvbVM *vm = 0;
    JNIEnv *fnv = 0;
    jdlbss mbinClbss = NULL;
    jdlbss bppClbss = NULL; // bdtubl bpplidbtion dlbss bfing lbundhfd
    jmfthodID mbinID;
    jobjfdtArrby mbinArgs;
    int rft = 0;
    jlong stbrt, fnd;

    RfgistfrThrfbd();

    /* Initiblizf thf virtubl mbdhinf */
    stbrt = CountfrGft();
    if (!InitiblizfJVM(&vm, &fnv, &ifn)) {
        JLI_RfportErrorMfssbgf(JVM_ERROR1);
        fxit(1);
    }

    if (showSfttings != NULL) {
        ShowSfttings(fnv, showSfttings);
        CHECK_EXCEPTION_LEAVE(1);
    }

    if (printVfrsion || showVfrsion) {
        PrintJbvbVfrsion(fnv, showVfrsion);
        CHECK_EXCEPTION_LEAVE(0);
        if (printVfrsion) {
            LEAVE();
        }
    }

    /* If thf usfr spfdififd nfithfr b dlbss nbmf nor b JAR filf */
    if (printXUsbgf || printUsbgf || whbt == 0 || modf == LM_UNKNOWN) {
        PrintUsbgf(fnv, printXUsbgf);
        CHECK_EXCEPTION_LEAVE(1);
        LEAVE();
    }

    FrffKnownVMs();  /* bftfr lbst possiblf PrintUsbgf() */

    if (JLI_IsTrbdfLbundhfr()) {
        fnd = CountfrGft();
        JLI_TrbdfLbundhfr("%ld midro sfdonds to InitiblizfJVM\n",
               (long)(jint)Countfr2Midros(fnd-stbrt));
    }

    /* At this stbgf, brgd/brgv hbvf thf bpplidbtion's brgumfnts */
    if (JLI_IsTrbdfLbundhfr()){
        int i;
        printf("%s is '%s'\n", lbundhModfNbmfs[modf], whbt);
        printf("App's brgd is %d\n", brgd);
        for (i=0; i < brgd; i++) {
            printf("    brgv[%2d] = '%s'\n", i, brgv[i]);
        }
    }

    rft = 1;

    /*
     * Gft thf bpplidbtion's mbin dlbss.
     *
     * Sff bugid 5030265.  Thf Mbin-Clbss nbmf hbs blrfbdy bffn pbrsfd
     * from thf mbniffst, but not pbrsfd propfrly for UTF-8 support.
     * Hfndf thf dodf hfrf ignorfs thf vbluf prfviously fxtrbdtfd bnd
     * usfs thf prf-fxisting dodf to rffxtrbdt thf vbluf.  This is
     * possibly bn fnd of rflfbsf dydlf fxpfdifnt.  Howfvfr, it hbs
     * blso bffn disdovfrfd thbt pbssing somf dhbrbdtfr sfts through
     * thf fnvironmfnt hbs "strbngf" bfhbvior on somf vbribnts of
     * Windows.  Hfndf, mbybf thf mbniffst pbrsing dodf lodbl to thf
     * lbundhfr should nfvfr bf fnhbndfd.
     *
     * Hfndf, futurf work should fithfr:
     *     1)   Corrfdt thf lodbl pbrsing dodf bnd vfrify thbt thf
     *          Mbin-Clbss bttributf gfts propfrly pbssfd through
     *          bll fnvironmfnts,
     *     2)   Rfmovf thf vfstbgfs of mbintbining mbin_dlbss through
     *          thf fnvironmfnt (bnd rfmovf thfsf dommfnts).
     *
     * This mfthod blso dorrfdtly hbndlfs lbundhing fxisting JbvbFX
     * bpplidbtions thbt mby or mby not hbvf b Mbin-Clbss mbniffst fntry.
     */
    mbinClbss = LobdMbinClbss(fnv, modf, whbt);
    CHECK_EXCEPTION_NULL_LEAVE(mbinClbss);
    /*
     * In somf dbsfs whfn lbundhing bn bpplidbtion thbt nffds b hflpfr, f.g., b
     * JbvbFX bpplidbtion with no mbin mfthod, thf mbinClbss will not bf thf
     * bpplidbtions own mbin dlbss but rbthfr b hflpfr dlbss. To kffp things
     * donsistfnt in thf UI wf nffd to trbdk bnd rfport thf bpplidbtion mbin dlbss.
     */
    bppClbss = GftApplidbtionClbss(fnv);
    NULL_CHECK_RETURN_VALUE(bppClbss, -1);
    /*
     * PostJVMInit usfs thf dlbss nbmf bs thf bpplidbtion nbmf for GUI purposfs,
     * for fxbmplf, on OSX this sfts thf bpplidbtion nbmf in thf mfnu bbr for
     * both SWT bnd JbvbFX. So wf'll pbss thf bdtubl bpplidbtion dlbss hfrf
     * instfbd of mbinClbss bs thbt mby bf b lbundhfr or hflpfr dlbss instfbd
     * of thf bpplidbtion dlbss.
     */
    PostJVMInit(fnv, bppClbss, vm);
    /*
     * Thf LobdMbinClbss not only lobds thf mbin dlbss, it will blso fnsurf
     * thbt thf mbin mfthod's signbturf is dorrfdt, thfrfforf furthfr dhfdking
     * is not rfquirfd. Thf mbin mfthod is invokfd hfrf so thbt fxtrbnfous jbvb
     * stbdks brf not in thf bpplidbtion stbdk trbdf.
     */
    mbinID = (*fnv)->GftStbtidMfthodID(fnv, mbinClbss, "mbin",
                                       "([Ljbvb/lbng/String;)V");
    CHECK_EXCEPTION_NULL_LEAVE(mbinID);

    /* Build plbtform spfdifid brgumfnt brrby */
    mbinArgs = CrfbtfApplidbtionArgs(fnv, brgv, brgd);
    CHECK_EXCEPTION_NULL_LEAVE(mbinArgs);

    /* Invokf mbin mfthod. */
    (*fnv)->CbllStbtidVoidMfthod(fnv, mbinClbss, mbinID, mbinArgs);

    /*
     * Thf lbundhfr's fxit dodf (in thf bbsfndf of dblls to
     * Systfm.fxit) will bf non-zfro if mbin thrfw bn fxdfption.
     */
    rft = (*fnv)->ExdfptionOddurrfd(fnv) == NULL ? 0 : 1;
    LEAVE();
}

/*
 * Chfdks thf dommbnd linf options to find whidh JVM typf wbs
 * spfdififd.  If no dommbnd linf option wbs givfn for thf JVM typf,
 * thf dffbult typf is usfd.  Thf fnvironmfnt vbribblf
 * JDK_ALTERNATE_VM bnd thf dommbnd linf option -XXbltjvm= brf blso
 * dhfdkfd bs wbys of spfdifying whidh JVM typf to invokf.
 */
dhbr *
ChfdkJvmTypf(int *pbrgd, dhbr ***brgv, jboolfbn spfdulbtivf) {
    int i, brgi;
    int brgd;
    dhbr **nfwArgv;
    int nfwArgvIdx = 0;
    int isVMTypf;
    int jvmidx = -1;
    dhbr *jvmtypf = gftfnv("JDK_ALTERNATE_VM");

    brgd = *pbrgd;

    /* To mbkf things simplfr wf blwbys dopy thf brgv brrby */
    nfwArgv = JLI_MfmAllod((brgd + 1) * sizfof(dhbr *));

    /* Thf progrbm nbmf is blwbys prfsfnt */
    nfwArgv[nfwArgvIdx++] = (*brgv)[0];

    for (brgi = 1; brgi < brgd; brgi++) {
        dhbr *brg = (*brgv)[brgi];
        isVMTypf = 0;

        if (IsJbvbArgs()) {
            if (brg[0] != '-') {
                nfwArgv[nfwArgvIdx++] = brg;
                dontinuf;
            }
        } flsf {
            if (JLI_StrCmp(brg, "-dlbsspbth") == 0 ||
                JLI_StrCmp(brg, "-dp") == 0) {
                nfwArgv[nfwArgvIdx++] = brg;
                brgi++;
                if (brgi < brgd) {
                    nfwArgv[nfwArgvIdx++] = (*brgv)[brgi];
                }
                dontinuf;
            }
            if (brg[0] != '-') brfbk;
        }

        /* Did thf usfr pbss bn fxplidit VM typf? */
        i = KnownVMIndfx(brg);
        if (i >= 0) {
            jvmtypf = knownVMs[jvmidx = i].nbmf + 1; /* skip thf - */
            isVMTypf = 1;
            *pbrgd = *pbrgd - 1;
        }

        /* Did thf usfr spfdify bn "bltfrnbtf" VM? */
        flsf if (JLI_StrCCmp(brg, "-XXbltjvm=") == 0 || JLI_StrCCmp(brg, "-J-XXbltjvm=") == 0) {
            isVMTypf = 1;
            jvmtypf = brg+((brg[1]=='X')? 10 : 12);
            jvmidx = -1;
        }

        if (!isVMTypf) {
            nfwArgv[nfwArgvIdx++] = brg;
        }
    }

    /*
     * Finish dopying thf brgumfnts if wf bbortfd thf bbovf loop.
     * NOTE thbt if wf bbortfd vib "brfbk" thfn wf did NOT dopy thf
     * lbst brgumfnt bbovf, bnd in bddition brgi will bf lfss thbn
     * brgd.
     */
    whilf (brgi < brgd) {
        nfwArgv[nfwArgvIdx++] = (*brgv)[brgi];
        brgi++;
    }

    /* brgv is null-tfrminbtfd */
    nfwArgv[nfwArgvIdx] = 0;

    /* Copy bbdk brgv */
    *brgv = nfwArgv;
    *pbrgd = nfwArgvIdx;

    /* usf thf dffbult VM typf if not spfdififd (no blibs prodfssing) */
    if (jvmtypf == NULL) {
      dhbr* rfsult = knownVMs[0].nbmf+1;
      /* Usf b difffrfnt VM typf if wf brf on b sfrvfr dlbss mbdhinf? */
      if ((knownVMs[0].flbg == VM_IF_SERVER_CLASS) &&
          (SfrvfrClbssMbdhinf() == JNI_TRUE)) {
        rfsult = knownVMs[0].sfrvfr_dlbss+1;
      }
      JLI_TrbdfLbundhfr("Dffbult VM: %s\n", rfsult);
      rfturn rfsult;
    }

    /* if using bn bltfrnbtf VM, no blibs prodfssing */
    if (jvmidx < 0)
      rfturn jvmtypf;

    /* Rfsolvf blibsfs first */
    {
      int loopCount = 0;
      whilf (knownVMs[jvmidx].flbg == VM_ALIASED_TO) {
        int nfxtIdx = KnownVMIndfx(knownVMs[jvmidx].blibs);

        if (loopCount > knownVMsCount) {
          if (!spfdulbtivf) {
            JLI_RfportErrorMfssbgf(CFG_ERROR1);
            fxit(1);
          } flsf {
            rfturn "ERROR";
            /* brfbk; */
          }
        }

        if (nfxtIdx < 0) {
          if (!spfdulbtivf) {
            JLI_RfportErrorMfssbgf(CFG_ERROR2, knownVMs[jvmidx].blibs);
            fxit(1);
          } flsf {
            rfturn "ERROR";
          }
        }
        jvmidx = nfxtIdx;
        jvmtypf = knownVMs[jvmidx].nbmf+1;
        loopCount++;
      }
    }

    switdh (knownVMs[jvmidx].flbg) {
    dbsf VM_WARN:
        if (!spfdulbtivf) {
            JLI_RfportErrorMfssbgf(CFG_WARN1, jvmtypf, knownVMs[0].nbmf + 1);
        }
        /* fbll through */
    dbsf VM_IGNORE:
        jvmtypf = knownVMs[jvmidx=0].nbmf + 1;
        /* fbll through */
    dbsf VM_KNOWN:
        brfbk;
    dbsf VM_ERROR:
        if (!spfdulbtivf) {
            JLI_RfportErrorMfssbgf(CFG_ERROR3, jvmtypf);
            fxit(1);
        } flsf {
            rfturn "ERROR";
        }
    }

    rfturn jvmtypf;
}

/*
 * stbtid void SftJvmEnvironmfnt(int brgd, dhbr **brgv);
 *   Is dbllfd just bfforf thf JVM is lobdfd.  Wf dbn sft fnv vbribblfs
 *   thbt brf donsumfd by thf JVM.  This fundtion is non-dfstrudtivf,
 *   lfbving thf brg list intbdt.  Thf first usf is for thf JVM flbg
 *   -XX:NbtivfMfmoryTrbdking=vbluf.
 */
stbtid void
SftJvmEnvironmfnt(int brgd, dhbr **brgv) {

    stbtid donst dhbr*  NMT_Env_Nbmf    = "NMT_LEVEL_";

    int i;
    for (i = 0; i < brgd; i++) {
        /*
         * Thf following dbsf dhfdks for "-XX:NbtivfMfmoryTrbdking=vbluf".
         * If vbluf is non null, bn fnvironmfntbl vbribblf sft to this vbluf
         * will bf drfbtfd to bf usfd by thf JVM.
         * Thf brgumfnt is pbssfd to thf JVM, whidh will dhfdk vblidity.
         * Thf JVM is rfsponsiblf for rfmoving thf fnv vbribblf.
         */
        dhbr *brg = brgv[i];
        if (JLI_StrCCmp(brg, "-XX:NbtivfMfmoryTrbdking=") == 0) {
            int rftvbl;
            // gft whbt follows this pbrbmftfr, indludf "="
            sizf_t pnlfn = JLI_StrLfn("-XX:NbtivfMfmoryTrbdking=");
            if (JLI_StrLfn(brg) > pnlfn) {
                dhbr* vbluf = brg + pnlfn;
                sizf_t pbuflfn = pnlfn + JLI_StrLfn(vbluf) + 10; // 10 mbx pid digits

                /*
                 * fnsurfs thbt mbllod suddfssful
                 * DONT JLI_MfmFrff() pbuf.  JLI_PutEnv() usfs systfm dbll
                 *   thbt dould storf thf bddrfss.
                 */
                dhbr * pbuf = (dhbr*)JLI_MfmAllod(pbuflfn);

                JLI_Snprintf(pbuf, pbuflfn, "%s%d=%s", NMT_Env_Nbmf, JLI_GftPid(), vbluf);
                rftvbl = JLI_PutEnv(pbuf);
                if (JLI_IsTrbdfLbundhfr()) {
                    dhbr* fnvNbmf;
                    dhbr* fnvBuf;

                    // fnsurfs thbt mbllod suddfssful
                    fnvNbmf = (dhbr*)JLI_MfmAllod(pbuflfn);
                    JLI_Snprintf(fnvNbmf, pbuflfn, "%s%d", NMT_Env_Nbmf, JLI_GftPid());

                    printf("TRACER_MARKER: NbtivfMfmoryTrbdking: fnv vbr is %s\n",fnvNbmf);
                    printf("TRACER_MARKER: NbtivfMfmoryTrbdking: putfnv brg %s\n",pbuf);
                    fnvBuf = gftfnv(fnvNbmf);
                    printf("TRACER_MARKER: NbtivfMfmoryTrbdking: got vbluf %s\n",fnvBuf);
                    frff(fnvNbmf);
                }

            }

        }

    }
}

/* dopifd from HotSpot fundtion "btomll()" */
stbtid int
pbrsf_sizf(donst dhbr *s, jlong *rfsult) {
  jlong n = 0;
  int brgs_rfbd = ssdbnf(s, jlong_formbt_spfdififr(), &n);
  if (brgs_rfbd != 1) {
    rfturn 0;
  }
  whilf (*s != '\0' && *s >= '0' && *s <= '9') {
    s++;
  }
  // 4705540: illfgbl if morf dhbrbdtfrs brf found bftfr thf first non-digit
  if (JLI_StrLfn(s) > 1) {
    rfturn 0;
  }
  switdh (*s) {
    dbsf 'T': dbsf 't':
      *rfsult = n * GB * KB;
      rfturn 1;
    dbsf 'G': dbsf 'g':
      *rfsult = n * GB;
      rfturn 1;
    dbsf 'M': dbsf 'm':
      *rfsult = n * MB;
      rfturn 1;
    dbsf 'K': dbsf 'k':
      *rfsult = n * KB;
      rfturn 1;
    dbsf '\0':
      *rfsult = n;
      rfturn 1;
    dffbult:
      /* Crfbtf JVM with dffbult stbdk bnd lft VM hbndlf mblformfd -Xss string*/
      rfturn 0;
  }
}

/*
 * Adds b nfw VM option with thf givfn givfn nbmf bnd vbluf.
 */
void
AddOption(dhbr *str, void *info)
{
    /*
     * Expbnd options brrby if nffdfd to bddommodbtf bt lfbst onf morf
     * VM option.
     */
    if (numOptions >= mbxOptions) {
        if (options == 0) {
            mbxOptions = 4;
            options = JLI_MfmAllod(mbxOptions * sizfof(JbvbVMOption));
        } flsf {
            JbvbVMOption *tmp;
            mbxOptions *= 2;
            tmp = JLI_MfmAllod(mbxOptions * sizfof(JbvbVMOption));
            mfmdpy(tmp, options, numOptions * sizfof(JbvbVMOption));
            JLI_MfmFrff(options);
            options = tmp;
        }
    }
    options[numOptions].optionString = str;
    options[numOptions++].fxtrbInfo = info;

    if (JLI_StrCCmp(str, "-Xss") == 0) {
        jlong tmp;
        if (pbrsf_sizf(str + 4, &tmp)) {
            thrfbdStbdkSizf = tmp;
        }
    }

    if (JLI_StrCCmp(str, "-Xmx") == 0) {
        jlong tmp;
        if (pbrsf_sizf(str + 4, &tmp)) {
            mbxHfbpSizf = tmp;
        }
    }

    if (JLI_StrCCmp(str, "-Xms") == 0) {
        jlong tmp;
        if (pbrsf_sizf(str + 4, &tmp)) {
           initiblHfbpSizf = tmp;
        }
    }
}

stbtid void
SftClbssPbth(donst dhbr *s)
{
    dhbr *dff;
    donst dhbr *orig = s;
    stbtid donst dhbr formbt[] = "-Djbvb.dlbss.pbth=%s";
    /*
     * usublly wf should not gft b null pointfr, but thfrf brf dbsfs whfrf
     * wf might just gft onf, in whidh dbsf wf simply ignorf it, bnd lft thf
     * dbllfr dfbl with it
     */
    if (s == NULL)
        rfturn;
    s = JLI_WilddbrdExpbndClbsspbth(s);
    if (sizfof(formbt) - 2 + JLI_StrLfn(s) < JLI_StrLfn(s))
        // s is bfdbmf dorruptfd bftfr fxpbnding wilddbrds
        rfturn;
    dff = JLI_MfmAllod(sizfof(formbt)
                       - 2 /* strlfn("%s") */
                       + JLI_StrLfn(s));
    sprintf(dff, formbt, s);
    AddOption(dff, NULL);
    if (s != orig)
        JLI_MfmFrff((dhbr *) s);
}

/*
 * Thf SflfdtVfrsion() routinf fnsurfs thbt bn bppropribtf vfrsion of
 * thf JRE is running.  Thf spfdifidbtion for thf bppropribtf vfrsion
 * is obtbinfd from fithfr thf mbniffst of b jbr filf (prfffrrfd) or
 * from dommbnd linf options.
 * Thf routinf blso pbrsfs splbsh sdrffn dommbnd linf options bnd
 * pbssfs on thfir vblufs in privbtf fnvironmfnt vbribblfs.
 */
stbtid void
SflfdtVfrsion(int brgd, dhbr **brgv, dhbr **mbin_dlbss)
{
    dhbr    *brg;
    dhbr    **nfw_brgv;
    dhbr    **nfw_brgp;
    dhbr    *opfrbnd;
    dhbr    *vfrsion = NULL;
    dhbr    *jrf = NULL;
    int     jbrflbg = 0;
    int     hfbdlfssflbg = 0;
    int     rfstridt_sfbrdh = -1;               /* -1 implifs not known */
    mbniffst_info info;
    dhbr    fnv_fntry[MAXNAMELEN + 24] = ENV_ENTRY "=";
    dhbr    *splbsh_filf_nbmf = NULL;
    dhbr    *splbsh_jbr_nbmf = NULL;
    dhbr    *fnv_in;
    int     rfs;

    /*
     * If thf vfrsion hbs blrfbdy bffn sflfdtfd, sft *mbin_dlbss
     * with thf vbluf pbssfd through thf fnvironmfnt (if bny) bnd
     * simply rfturn.
     */
    if ((fnv_in = gftfnv(ENV_ENTRY)) != NULL) {
        if (*fnv_in != '\0')
            *mbin_dlbss = JLI_StringDup(fnv_in);
        rfturn;
    }

    /*
     * Sdbn through thf brgumfnts for options rflfvbnt to multiplf JRE
     * support.  For rfffrfndf, thf dommbnd linf syntbx is dffinfd bs:
     *
     * SYNOPSIS
     *      jbvb [options] dlbss [brgumfnt...]
     *
     *      jbvb [options] -jbr filf.jbr [brgumfnt...]
     *
     * As thf sdbn is pfrformfd, mbkf b dopy of thf brgumfnt list with
     * thf vfrsion spfdifidbtion options (nfw to 1.5) rfmovfd, so thbt
     * b vfrsion lfss thbn 1.5 dbn bf fxfd'd.
     *
     * Notf thbt duf to thf syntbx of thf nbtivf Windows intfrfbdf
     * CrfbtfProdfss(), prodfssing similbr to thf following fxists in
     * thf Windows plbtform spfdifid routinf ExfdJRE (in jbvb_md.d).
     * Chbngfs hfrf should bf rfprodudfd thfrf.
     */
    nfw_brgv = JLI_MfmAllod((brgd + 1) * sizfof(dhbr*));
    nfw_brgv[0] = brgv[0];
    nfw_brgp = &nfw_brgv[1];
    brgd--;
    brgv++;
    whilf ((brg = *brgv) != 0 && *brg == '-') {
        if (JLI_StrCCmp(brg, "-vfrsion:") == 0) {
            vfrsion = brg + 9;
        } flsf if (JLI_StrCmp(brg, "-jrf-rfstridt-sfbrdh") == 0) {
            rfstridt_sfbrdh = 1;
        } flsf if (JLI_StrCmp(brg, "-no-jrf-rfstridt-sfbrdh") == 0) {
            rfstridt_sfbrdh = 0;
        } flsf {
            if (JLI_StrCmp(brg, "-jbr") == 0)
                jbrflbg = 1;
            /* dfbl with "unfortunbtf" dlbsspbth syntbx */
            if ((JLI_StrCmp(brg, "-dlbsspbth") == 0 || JLI_StrCmp(brg, "-dp") == 0) &&
              (brgd >= 2)) {
                *nfw_brgp++ = brg;
                brgd--;
                brgv++;
                brg = *brgv;
            }

            /*
             * Chfdking for hfbdlfss toolkit option in thf somf wby bs AWT dofs:
             * "truf" mfbns truf bnd bny othfr vbluf mfbns fblsf
             */
            if (JLI_StrCmp(brg, "-Djbvb.bwt.hfbdlfss=truf") == 0) {
                hfbdlfssflbg = 1;
            } flsf if (JLI_StrCCmp(brg, "-Djbvb.bwt.hfbdlfss=") == 0) {
                hfbdlfssflbg = 0;
            } flsf if (JLI_StrCCmp(brg, "-splbsh:") == 0) {
                splbsh_filf_nbmf = brg+8;
            }
            *nfw_brgp++ = brg;
        }
        brgd--;
        brgv++;
    }
    if (brgd <= 0) {    /* No opfrbnd? Possibly lfgit with -[full]vfrsion */
        opfrbnd = NULL;
    } flsf {
        brgd--;
        *nfw_brgp++ = opfrbnd = *brgv++;
    }
    whilf (brgd-- > 0)  /* Copy ovfr [brgumfnt...] */
        *nfw_brgp++ = *brgv++;
    *nfw_brgp = NULL;

    /*
     * If thfrf is b jbr filf, rfbd thf mbniffst. If thf jbrfilf dbn't bf
     * rfbd, thf mbniffst dbn't bf rfbd from thf jbr filf, or thf mbniffst
     * is dorrupt, issuf thf bppropribtf frror mfssbgfs bnd fxit.
     *
     * Evfn if thfrf isn't b jbr filf, donstrudt b mbniffst_info strudturf
     * dontbining thf dommbnd linf informbtion.  It's b donvfnifnt wby to dbrry
     * this dbtb bround.
     */
    if (jbrflbg && opfrbnd) {
        if ((rfs = JLI_PbrsfMbniffst(opfrbnd, &info)) != 0) {
            if (rfs == -1)
                JLI_RfportErrorMfssbgf(JAR_ERROR2, opfrbnd);
            flsf
                JLI_RfportErrorMfssbgf(JAR_ERROR3, opfrbnd);
            fxit(1);
        }

        /*
         * Commbnd linf splbsh sdrffn option should hbvf prfdfdfndf
         * ovfr thf mbniffst, so thf mbniffst dbtb is usfd only if
         * splbsh_filf_nbmf hbs not bffn initiblizfd bbovf during dommbnd
         * linf pbrsing
         */
        if (!hfbdlfssflbg && !splbsh_filf_nbmf && info.splbshsdrffn_imbgf_filf_nbmf) {
            splbsh_filf_nbmf = info.splbshsdrffn_imbgf_filf_nbmf;
            splbsh_jbr_nbmf = opfrbnd;
        }
    } flsf {
        info.mbniffst_vfrsion = NULL;
        info.mbin_dlbss = NULL;
        info.jrf_vfrsion = NULL;
        info.jrf_rfstridt_sfbrdh = 0;
    }

    /*
     * Pbssing on splbsh sdrffn info in fnvironmfnt vbribblfs
     */
    if (splbsh_filf_nbmf && !hfbdlfssflbg) {
        dhbr* splbsh_filf_fntry = JLI_MfmAllod(JLI_StrLfn(SPLASH_FILE_ENV_ENTRY "=")+JLI_StrLfn(splbsh_filf_nbmf)+1);
        JLI_StrCpy(splbsh_filf_fntry, SPLASH_FILE_ENV_ENTRY "=");
        JLI_StrCbt(splbsh_filf_fntry, splbsh_filf_nbmf);
        putfnv(splbsh_filf_fntry);
    }
    if (splbsh_jbr_nbmf && !hfbdlfssflbg) {
        dhbr* splbsh_jbr_fntry = JLI_MfmAllod(JLI_StrLfn(SPLASH_JAR_ENV_ENTRY "=")+JLI_StrLfn(splbsh_jbr_nbmf)+1);
        JLI_StrCpy(splbsh_jbr_fntry, SPLASH_JAR_ENV_ENTRY "=");
        JLI_StrCbt(splbsh_jbr_fntry, splbsh_jbr_nbmf);
        putfnv(splbsh_jbr_fntry);
    }

    /*
     * Thf JRE-Vfrsion bnd JRE-Rfstridt-Sfbrdh vblufs (if bny) from thf
     * mbniffst brf ovfrwrittfn by bny spfdififd on thf dommbnd linf.
     */
    if (vfrsion != NULL)
        info.jrf_vfrsion = vfrsion;
    if (rfstridt_sfbrdh != -1)
        info.jrf_rfstridt_sfbrdh = rfstridt_sfbrdh;

    /*
     * "Vblid" rfturns (othfr thbn unrfdovfrbblf frrors) follow.  Sft
     * mbin_dlbss bs b sidf-ffffdt of this routinf.
     */
    if (info.mbin_dlbss != NULL)
        *mbin_dlbss = JLI_StringDup(info.mbin_dlbss);

    /*
     * If no vfrsion sflfdtion informbtion is found fithfr on thf dommbnd
     * linf or in thf mbniffst, simply rfturn.
     */
    if (info.jrf_vfrsion == NULL) {
        JLI_FrffMbniffst();
        JLI_MfmFrff(nfw_brgv);
        rfturn;
    }

    /*
     * Chfdk for dorrfdt syntbx of thf vfrsion spfdifidbtion (JSR 56).
     */
    if (!JLI_VblidVfrsionString(info.jrf_vfrsion)) {
        JLI_RfportErrorMfssbgf(SPC_ERROR1, info.jrf_vfrsion);
        fxit(1);
    }

    /*
     * Find thf bppropribtf JVM on thf systfm. Just to bf bs forgiving bs
     * possiblf, if thf stbndbrd blgorithms don't lodbtf bn bppropribtf
     * jrf, dhfdk to sff if thf onf running will sbtisfy thf rfquirfmfnts.
     * This dbn hbppfn on systfms whidh hbvfn't bffn sft-up for multiplf
     * JRE support.
     */
    jrf = LodbtfJRE(&info);
    JLI_TrbdfLbundhfr("JRE-Vfrsion = %s, JRE-Rfstridt-Sfbrdh = %s Sflfdtfd = %s\n",
        (info.jrf_vfrsion?info.jrf_vfrsion:"null"),
        (info.jrf_rfstridt_sfbrdh?"truf":"fblsf"), (jrf?jrf:"null"));

    if (jrf == NULL) {
        if (JLI_AddfptbblfRflfbsf(GftFullVfrsion(), info.jrf_vfrsion)) {
            JLI_FrffMbniffst();
            JLI_MfmFrff(nfw_brgv);
            rfturn;
        } flsf {
            JLI_RfportErrorMfssbgf(CFG_ERROR4, info.jrf_vfrsion);
            fxit(1);
        }
    }

    /*
     * If I'm not thf dhosfn onf, fxfd thf dhosfn onf.  Rfturning from
     * ExfdJRE indidbtfs thbt I bm indffd thf dhosfn onf.
     *
     * Thf privbtf fnvironmfnt vbribblf _JAVA_VERSION_SET is usfd to
     * prfvfnt thf dhosfn onf from rf-rfbding thf mbniffst filf bnd
     * using thf vblufs found within to ovfrridf thf (potfntibl) dommbnd
     * linf flbgs strippfd from brgv (bfdbusf thf tbrgft mby not
     * undfrstbnd thfm).  Pbssing thf MbinClbss vbluf is bn optimizbtion
     * to bvoid lodbting, fxpbnding bnd pbrsing thf mbniffst fxtrb
     * timfs.
     */
    if (info.mbin_dlbss != NULL) {
        if (JLI_StrLfn(info.mbin_dlbss) <= MAXNAMELEN) {
            (void)JLI_StrCbt(fnv_fntry, info.mbin_dlbss);
        } flsf {
            JLI_RfportErrorMfssbgf(CLS_ERROR5, MAXNAMELEN);
            fxit(1);
        }
    }
    (void)putfnv(fnv_fntry);
    ExfdJRE(jrf, nfw_brgv);
    JLI_FrffMbniffst();
    JLI_MfmFrff(nfw_brgv);
    rfturn;
}

/*
 * Pbrsfs dommbnd linf brgumfnts.  Rfturns JNI_FALSE if lbundhfr
 * should fxit without stbrting vm, rfturns JNI_TRUE if vm nffds
 * to bf stbrtfd to prodfss givfn options.  *prft (thf lbundhfr
 * prodfss rfturn vbluf) is sft to 0 for b normbl fxit.
 */
stbtid jboolfbn
PbrsfArgumfnts(int *pbrgd, dhbr ***pbrgv,
               int *pmodf, dhbr **pwhbt,
               int *prft, donst dhbr *jrfpbth)
{
    int brgd = *pbrgd;
    dhbr **brgv = *pbrgv;
    int modf = LM_UNKNOWN;
    dhbr *brg;

    *prft = 0;

    whilf ((brg = *brgv) != 0 && *brg == '-') {
        brgv++; --brgd;
        if (JLI_StrCmp(brg, "-dlbsspbth") == 0 || JLI_StrCmp(brg, "-dp") == 0) {
            ARG_CHECK (brgd, ARG_ERROR1, brg);
            SftClbssPbth(*brgv);
            modf = LM_CLASS;
            brgv++; --brgd;
        } flsf if (JLI_StrCmp(brg, "-jbr") == 0) {
            ARG_CHECK (brgd, ARG_ERROR2, brg);
            modf = LM_JAR;
        } flsf if (JLI_StrCmp(brg, "-hflp") == 0 ||
                   JLI_StrCmp(brg, "-h") == 0 ||
                   JLI_StrCmp(brg, "-?") == 0) {
            printUsbgf = JNI_TRUE;
            rfturn JNI_TRUE;
        } flsf if (JLI_StrCmp(brg, "-vfrsion") == 0) {
            printVfrsion = JNI_TRUE;
            rfturn JNI_TRUE;
        } flsf if (JLI_StrCmp(brg, "-showvfrsion") == 0) {
            showVfrsion = JNI_TRUE;
        } flsf if (JLI_StrCmp(brg, "-X") == 0) {
            printXUsbgf = JNI_TRUE;
            rfturn JNI_TRUE;
/*
 * Thf following dbsf dhfdks for -XshowSfttings OR -XshowSftting:SUBOPT.
 * In thf lbttfr dbsf, bny SUBOPT vbluf not rfdognizfd will dffbult to "bll"
 */
        } flsf if (JLI_StrCmp(brg, "-XshowSfttings") == 0 ||
                JLI_StrCCmp(brg, "-XshowSfttings:") == 0) {
            showSfttings = brg;
        } flsf if (JLI_StrCmp(brg, "-Xdibg") == 0) {
            AddOption("-Dsun.jbvb.lbundhfr.dibg=truf", NULL);
/*
 * Thf following dbsf providf bbdkwbrd dompbtibility with old-stylf
 * dommbnd linf options.
 */
        } flsf if (JLI_StrCmp(brg, "-fullvfrsion") == 0) {
            JLI_RfportMfssbgf("%s full vfrsion \"%s\"", _lbundhfr_nbmf, GftFullVfrsion());
            rfturn JNI_FALSE;
        } flsf if (JLI_StrCmp(brg, "-vfrbosfgd") == 0) {
            AddOption("-vfrbosf:gd", NULL);
        } flsf if (JLI_StrCmp(brg, "-t") == 0) {
            AddOption("-Xt", NULL);
        } flsf if (JLI_StrCmp(brg, "-tm") == 0) {
            AddOption("-Xtm", NULL);
        } flsf if (JLI_StrCmp(brg, "-dfbug") == 0) {
            AddOption("-Xdfbug", NULL);
        } flsf if (JLI_StrCmp(brg, "-nodlbssgd") == 0) {
            AddOption("-Xnodlbssgd", NULL);
        } flsf if (JLI_StrCmp(brg, "-Xfuturf") == 0) {
            AddOption("-Xvfrify:bll", NULL);
        } flsf if (JLI_StrCmp(brg, "-vfrify") == 0) {
            AddOption("-Xvfrify:bll", NULL);
        } flsf if (JLI_StrCmp(brg, "-vfrifyrfmotf") == 0) {
            AddOption("-Xvfrify:rfmotf", NULL);
        } flsf if (JLI_StrCmp(brg, "-novfrify") == 0) {
            AddOption("-Xvfrify:nonf", NULL);
        } flsf if (JLI_StrCCmp(brg, "-prof") == 0) {
            dhbr *p = brg + 5;
            dhbr *tmp = JLI_MfmAllod(JLI_StrLfn(brg) + 50);
            if (*p) {
                sprintf(tmp, "-Xrunhprof:dpu=old,filf=%s", p + 1);
            } flsf {
                sprintf(tmp, "-Xrunhprof:dpu=old,filf=jbvb.prof");
            }
            AddOption(tmp, NULL);
        } flsf if (JLI_StrCCmp(brg, "-ss") == 0 ||
                   JLI_StrCCmp(brg, "-oss") == 0 ||
                   JLI_StrCCmp(brg, "-ms") == 0 ||
                   JLI_StrCCmp(brg, "-mx") == 0) {
            dhbr *tmp = JLI_MfmAllod(JLI_StrLfn(brg) + 6);
            sprintf(tmp, "-X%s", brg + 1); /* skip '-' */
            AddOption(tmp, NULL);
        } flsf if (JLI_StrCmp(brg, "-dhfdksourdf") == 0 ||
                   JLI_StrCmp(brg, "-ds") == 0 ||
                   JLI_StrCmp(brg, "-nobsyndgd") == 0) {
            /* No longfr supportfd */
            JLI_RfportErrorMfssbgf(ARG_WARN, brg);
        } flsf if (JLI_StrCCmp(brg, "-vfrsion:") == 0 ||
                   JLI_StrCmp(brg, "-no-jrf-rfstridt-sfbrdh") == 0 ||
                   JLI_StrCmp(brg, "-jrf-rfstridt-sfbrdh") == 0 ||
                   JLI_StrCCmp(brg, "-splbsh:") == 0) {
            ; /* Ignorf mbdhinf indfpfndfnt options blrfbdy hbndlfd */
        } flsf if (ProdfssPlbtformOption(brg)) {
            ; /* Prodfssing of plbtform dfpfndfnt options */
        } flsf if (RfmovbblfOption(brg)) {
            ; /* Do not pbss option to vm. */
        } flsf {
            AddOption(brg, NULL);
        }
    }

    if (--brgd >= 0) {
        *pwhbt = *brgv++;
    }

    if (*pwhbt == NULL) {
        *prft = 1;
    } flsf if (modf == LM_UNKNOWN) {
        /* dffbult to LM_CLASS if -jbr bnd -dp option brf
         * not spfdififd */
        modf = LM_CLASS;
    }

    if (brgd >= 0) {
        *pbrgd = brgd;
        *pbrgv = brgv;
    }

    *pmodf = modf;

    rfturn JNI_TRUE;
}

/*
 * Initiblizfs thf Jbvb Virtubl Mbdhinf. Also frffs options brrby whfn
 * finishfd.
 */
stbtid jboolfbn
InitiblizfJVM(JbvbVM **pvm, JNIEnv **pfnv, InvodbtionFundtions *ifn)
{
    JbvbVMInitArgs brgs;
    jint r;

    mfmsft(&brgs, 0, sizfof(brgs));
    brgs.vfrsion  = JNI_VERSION_1_2;
    brgs.nOptions = numOptions;
    brgs.options  = options;
    brgs.ignorfUnrfdognizfd = JNI_FALSE;

    if (JLI_IsTrbdfLbundhfr()) {
        int i = 0;
        printf("JbvbVM brgs:\n    ");
        printf("vfrsion 0x%08lx, ", (long)brgs.vfrsion);
        printf("ignorfUnrfdognizfd is %s, ",
               brgs.ignorfUnrfdognizfd ? "JNI_TRUE" : "JNI_FALSE");
        printf("nOptions is %ld\n", (long)brgs.nOptions);
        for (i = 0; i < numOptions; i++)
            printf("    option[%2d] = '%s'\n",
                   i, brgs.options[i].optionString);
    }

    r = ifn->CrfbtfJbvbVM(pvm, (void **)pfnv, &brgs);
    JLI_MfmFrff(options);
    rfturn r == JNI_OK;
}

stbtid jdlbss hflpfrClbss = NULL;

jdlbss
GftLbundhfrHflpfrClbss(JNIEnv *fnv)
{
    if (hflpfrClbss == NULL) {
        NULL_CHECK0(hflpfrClbss = FindBootStrbpClbss(fnv,
                "sun/lbundhfr/LbundhfrHflpfr"));
    }
    rfturn hflpfrClbss;
}

stbtid jmfthodID mbkfPlbtformStringMID = NULL;
/*
 * Rfturns b nfw Jbvb string objfdt for thf spfdififd plbtform string.
 */
stbtid jstring
NfwPlbtformString(JNIEnv *fnv, dhbr *s)
{
    int lfn = (int)JLI_StrLfn(s);
    jbytfArrby bry;
    jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
    NULL_CHECK0(dls);
    if (s == NULL)
        rfturn 0;

    bry = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bry != 0) {
        jstring str = 0;
        (*fnv)->SftBytfArrbyRfgion(fnv, bry, 0, lfn, (jbytf *)s);
        if (!(*fnv)->ExdfptionOddurrfd(fnv)) {
            if (mbkfPlbtformStringMID == NULL) {
                NULL_CHECK0(mbkfPlbtformStringMID = (*fnv)->GftStbtidMfthodID(fnv,
                        dls, "mbkfPlbtformString", "(Z[B)Ljbvb/lbng/String;"));
            }
            str = (*fnv)->CbllStbtidObjfdtMfthod(fnv, dls,
                    mbkfPlbtformStringMID, USE_STDERR, bry);
            (*fnv)->DflftfLodblRff(fnv, bry);
            rfturn str;
        }
    }
    rfturn 0;
}

/*
 * Rfturns b nfw brrby of Jbvb string objfdts for thf spfdififd
 * brrby of plbtform strings.
 */
jobjfdtArrby
NfwPlbtformStringArrby(JNIEnv *fnv, dhbr **strv, int strd)
{
    jbrrby dls;
    jbrrby bry;
    int i;

    NULL_CHECK0(dls = FindBootStrbpClbss(fnv, "jbvb/lbng/String"));
    NULL_CHECK0(bry = (*fnv)->NfwObjfdtArrby(fnv, strd, dls, 0));
    for (i = 0; i < strd; i++) {
        jstring str = NfwPlbtformString(fnv, *strv++);
        NULL_CHECK0(str);
        (*fnv)->SftObjfdtArrbyElfmfnt(fnv, bry, i, str);
        (*fnv)->DflftfLodblRff(fnv, str);
    }
    rfturn bry;
}

/*
 * Lobds b dlbss bnd vfrififs thbt thf mbin dlbss is prfsfnt bnd it is ok to
 * dbll it for morf dftbils rfffr to thf jbvb implfmfntbtion.
 */
stbtid jdlbss
LobdMbinClbss(JNIEnv *fnv, int modf, dhbr *nbmf)
{
    jmfthodID mid;
    jstring str;
    jobjfdt rfsult;
    jlong stbrt, fnd;
    jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
    NULL_CHECK0(dls);
    if (JLI_IsTrbdfLbundhfr()) {
        stbrt = CountfrGft();
    }
    NULL_CHECK0(mid = (*fnv)->GftStbtidMfthodID(fnv, dls,
                "dhfdkAndLobdMbin",
                "(ZILjbvb/lbng/String;)Ljbvb/lbng/Clbss;"));

    NULL_CHECK0(str = NfwPlbtformString(fnv, nbmf));
    NULL_CHECK0(rfsult = (*fnv)->CbllStbtidObjfdtMfthod(fnv, dls, mid,
                                                        USE_STDERR, modf, str));

    if (JLI_IsTrbdfLbundhfr()) {
        fnd   = CountfrGft();
        printf("%ld midro sfdonds to lobd mbin dlbss\n",
               (long)(jint)Countfr2Midros(fnd-stbrt));
        printf("----%s----\n", JLDEBUG_ENV_ENTRY);
    }

    rfturn (jdlbss)rfsult;
}

stbtid jdlbss
GftApplidbtionClbss(JNIEnv *fnv)
{
    jmfthodID mid;
    jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
    NULL_CHECK0(dls);
    NULL_CHECK0(mid = (*fnv)->GftStbtidMfthodID(fnv, dls,
                "gftApplidbtionClbss",
                "()Ljbvb/lbng/Clbss;"));

    rfturn (*fnv)->CbllStbtidObjfdtMfthod(fnv, dls, mid);
}

/*
 * For tools, donvfrt dommbnd linf brgs thus:
 *   jbvbd -dp foo:foo/"*" -J-ms32m ...
 *   jbvb -ms32m -dp JLI_WilddbrdExpbndClbsspbth(foo:foo/"*") ...
 *
 * Tbkfs 4 pbrbmftfrs, bnd rfturns thf populbtfd brgumfnts
 */
stbtid void
TrbnslbtfApplidbtionArgs(int jbrgd, donst dhbr **jbrgv, int *pbrgd, dhbr ***pbrgv)
{
    int brgd = *pbrgd;
    dhbr **brgv = *pbrgv;
    int nbrgd = brgd + jbrgd;
    dhbr **nbrgv = JLI_MfmAllod((nbrgd + 1) * sizfof(dhbr *));
    int i;

    *pbrgd = nbrgd;
    *pbrgv = nbrgv;

    /* Copy thf VM brgumfnts (i.f. prffixfd with -J) */
    for (i = 0; i < jbrgd; i++) {
        donst dhbr *brg = jbrgv[i];
        if (brg[0] == '-' && brg[1] == 'J') {
            *nbrgv++ = ((brg + 2) == NULL) ? NULL : JLI_StringDup(brg + 2);
        }
    }

    for (i = 0; i < brgd; i++) {
        dhbr *brg = brgv[i];
        if (brg[0] == '-' && brg[1] == 'J') {
            if (brg[2] == '\0') {
                JLI_RfportErrorMfssbgf(ARG_ERROR3);
                fxit(1);
            }
            *nbrgv++ = brg + 2;
        }
    }

    /* Copy thf rfst of thf brgumfnts */
    for (i = 0; i < jbrgd ; i++) {
        donst dhbr *brg = jbrgv[i];
        if (brg[0] != '-' || brg[1] != 'J') {
            *nbrgv++ = (brg == NULL) ? NULL : JLI_StringDup(brg);
        }
    }
    for (i = 0; i < brgd; i++) {
        dhbr *brg = brgv[i];
        if (brg[0] == '-') {
            if (brg[1] == 'J')
                dontinuf;
            if (IsWildCbrdEnbblfd() && brg[1] == 'd'
                && (JLI_StrCmp(brg, "-dp") == 0 ||
                    JLI_StrCmp(brg, "-dlbsspbth") == 0)
                && i < brgd - 1) {
                *nbrgv++ = brg;
                *nbrgv++ = (dhbr *) JLI_WilddbrdExpbndClbsspbth(brgv[i+1]);
                i++;
                dontinuf;
            }
        }
        *nbrgv++ = brg;
    }
    *nbrgv = 0;
}

/*
 * For our tools, wf try to bdd 3 VM options:
 *      -Dfnv.dlbss.pbth=<fnvdp>
 *      -Dbpplidbtion.homf=<bpphomf>
 *      -Djbvb.dlbss.pbth=<bppdp>
 * <fnvdp>   is thf usfr's sftting of CLASSPATH -- for instbndf thf usfr
 *           tflls jbvbd whfrf to find binbry dlbssfs through this fnvironmfnt
 *           vbribblf.  Notidf thbt usfrs will bf bblf to dompilf bgbinst our
 *           tools dlbssfs (sun.tools.jbvbd.Mbin) only if thfy fxpliditly bdd
 *           tools.jbr to CLASSPATH.
 * <bpphomf> is thf dirfdtory whfrf thf bpplidbtion is instbllfd.
 * <bppdp>   is thf dlbsspbth to whfrf our bpps' dlbssfilfs brf.
 */
stbtid jboolfbn
AddApplidbtionOptions(int dpbthd, donst dhbr **dpbthv)
{
    dhbr *fnvdp, *bppdp, *bpphomf;
    dhbr homf[MAXPATHLEN]; /* bpplidbtion homf */
    dhbr sfpbrbtor[] = { PATH_SEPARATOR, '\0' };
    int sizf, i;

    {
        donst dhbr *s = gftfnv("CLASSPATH");
        if (s) {
            s = (dhbr *) JLI_WilddbrdExpbndClbsspbth(s);
            /* 40 for -Dfnv.dlbss.pbth= */
            if (JLI_StrLfn(s) + 40 > JLI_StrLfn(s)) { // Sbffgubrd from ovfrflow
                fnvdp = (dhbr *)JLI_MfmAllod(JLI_StrLfn(s) + 40);
                sprintf(fnvdp, "-Dfnv.dlbss.pbth=%s", s);
                AddOption(fnvdp, NULL);
            }
        }
    }

    if (!GftApplidbtionHomf(homf, sizfof(homf))) {
        JLI_RfportErrorMfssbgf(CFG_ERROR5);
        rfturn JNI_FALSE;
    }

    /* 40 for '-Dbpplidbtion.homf=' */
    bpphomf = (dhbr *)JLI_MfmAllod(JLI_StrLfn(homf) + 40);
    sprintf(bpphomf, "-Dbpplidbtion.homf=%s", homf);
    AddOption(bpphomf, NULL);

    /* How big is thf bpplidbtion's dlbsspbth? */
    sizf = 40;                                 /* 40: "-Djbvb.dlbss.pbth=" */
    for (i = 0; i < dpbthd; i++) {
        sizf += (int)JLI_StrLfn(homf) + (int)JLI_StrLfn(dpbthv[i]) + 1; /* 1: sfpbrbtor */
    }
    bppdp = (dhbr *)JLI_MfmAllod(sizf + 1);
    JLI_StrCpy(bppdp, "-Djbvb.dlbss.pbth=");
    for (i = 0; i < dpbthd; i++) {
        JLI_StrCbt(bppdp, homf);                        /* d:\progrbm filfs\mybpp */
        JLI_StrCbt(bppdp, dpbthv[i]);           /* \lib\mybpp.jbr         */
        JLI_StrCbt(bppdp, sfpbrbtor);           /* ;                      */
    }
    bppdp[JLI_StrLfn(bppdp)-1] = '\0';  /* rfmovf trbiling pbth sfpbrbtor */
    AddOption(bppdp, NULL);
    rfturn JNI_TRUE;
}

/*
 * injfdt thf -Dsun.jbvb.dommbnd psfudo propfrty into thf brgs strudturf
 * this psfudo propfrty is usfd in thf HotSpot VM to fxposf thf
 * Jbvb dlbss nbmf bnd brgumfnts to thf mbin mfthod to thf VM. Thf
 * HotSpot VM usfs this psfudo propfrty to storf thf Jbvb dlbss nbmf
 * (or jbr filf nbmf) bnd thf brgumfnts to thf dlbss's mbin mfthod
 * to thf instrumfntbtion mfmory rfgion. Thf sun.jbvb.dommbnd psfudo
 * propfrty is not fxportfd by HotSpot to thf Jbvb lbyfr.
 */
void
SftJbvbCommbndLinfProp(dhbr *whbt, int brgd, dhbr **brgv)
{

    int i = 0;
    sizf_t lfn = 0;
    dhbr* jbvbCommbnd = NULL;
    dhbr* dbshDstr = "-Dsun.jbvb.dommbnd=";

    if (whbt == NULL) {
        /* unfxpfdtfd, onf of thfsf should bf sft. just rfturn without
         * sftting thf propfrty
         */
        rfturn;
    }

    /* dftfrminf thf bmount of mfmory to bllodbtf bssuming
     * thf individubl domponfnts will bf spbdf sfpbrbtfd
     */
    lfn = JLI_StrLfn(whbt);
    for (i = 0; i < brgd; i++) {
        lfn += JLI_StrLfn(brgv[i]) + 1;
    }

    /* bllodbtf thf mfmory */
    jbvbCommbnd = (dhbr*) JLI_MfmAllod(lfn + JLI_StrLfn(dbshDstr) + 1);

    /* build thf -D string */
    *jbvbCommbnd = '\0';
    JLI_StrCbt(jbvbCommbnd, dbshDstr);
    JLI_StrCbt(jbvbCommbnd, whbt);

    for (i = 0; i < brgd; i++) {
        /* thf domponfnts of thf string brf spbdf sfpbrbtfd. In
         * thf dbsf of fmbfddfd whitf spbdf, thf rflbtionship of
         * thf whitf spbdf sfpbrbtfd domponfnts to thfir truf
         * positionbl brgumfnts will bf bmbiguous. This issuf mby
         * bf bddrfssfd in b futurf rflfbsf.
         */
        JLI_StrCbt(jbvbCommbnd, " ");
        JLI_StrCbt(jbvbCommbnd, brgv[i]);
    }

    AddOption(jbvbCommbnd, NULL);
}

/*
 * JVM would likf to know if it's drfbtfd by b stbndbrd Sun lbundhfr, or by
 * usfr nbtivf bpplidbtion, thf following propfrty indidbtfs thf formfr.
 */
void
SftJbvbLbundhfrProp() {
  AddOption("-Dsun.jbvb.lbundhfr=SUN_STANDARD", NULL);
}

/*
 * Prints thf vfrsion informbtion from thf jbvb.vfrsion bnd othfr propfrtifs.
 */
stbtid void
PrintJbvbVfrsion(JNIEnv *fnv, jboolfbn fxtrbLF)
{
    jdlbss vfr;
    jmfthodID print;

    NULL_CHECK(vfr = FindBootStrbpClbss(fnv, "sun/misd/Vfrsion"));
    NULL_CHECK(print = (*fnv)->GftStbtidMfthodID(fnv,
                                                 vfr,
                                                 (fxtrbLF == JNI_TRUE) ? "println" : "print",
                                                 "()V"
                                                 )
              );

    (*fnv)->CbllStbtidVoidMfthod(fnv, vfr, print);
}

/*
 * Prints bll thf Jbvb sfttings, sff thf jbvb implfmfntbtion for morf dftbils.
 */
stbtid void
ShowSfttings(JNIEnv *fnv, dhbr *optString)
{
    jmfthodID showSfttingsID;
    jstring joptString;
    jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
    NULL_CHECK(dls);
    NULL_CHECK(showSfttingsID = (*fnv)->GftStbtidMfthodID(fnv, dls,
            "showSfttings", "(ZLjbvb/lbng/String;JJJZ)V"));
    NULL_CHECK(joptString = (*fnv)->NfwStringUTF(fnv, optString));
    (*fnv)->CbllStbtidVoidMfthod(fnv, dls, showSfttingsID,
                                 USE_STDERR,
                                 joptString,
                                 (jlong)initiblHfbpSizf,
                                 (jlong)mbxHfbpSizf,
                                 (jlong)thrfbdStbdkSizf,
                                 SfrvfrClbssMbdhinf());
}

/*
 * Prints dffbult usbgf or thf Xusbgf mfssbgf, sff sun.lbundhfr.LbundhfrHflpfr.jbvb
 */
stbtid void
PrintUsbgf(JNIEnv* fnv, jboolfbn doXUsbgf)
{
  jmfthodID initHflp, vmSflfdt, vmSynonym, vmErgo, printHflp, printXUsbgfMfssbgf;
  jstring jprognbmf, vm1, vm2;
  int i;
  jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
  NULL_CHECK(dls);
  if (doXUsbgf) {
    NULL_CHECK(printXUsbgfMfssbgf = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                        "printXUsbgfMfssbgf", "(Z)V"));
    (*fnv)->CbllStbtidVoidMfthod(fnv, dls, printXUsbgfMfssbgf, USE_STDERR);
  } flsf {
    NULL_CHECK(initHflp = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                        "initHflpMfssbgf", "(Ljbvb/lbng/String;)V"));

    NULL_CHECK(vmSflfdt = (*fnv)->GftStbtidMfthodID(fnv, dls, "bppfndVmSflfdtMfssbgf",
                                        "(Ljbvb/lbng/String;Ljbvb/lbng/String;)V"));

    NULL_CHECK(vmSynonym = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                        "bppfndVmSynonymMfssbgf",
                                        "(Ljbvb/lbng/String;Ljbvb/lbng/String;)V"));
    NULL_CHECK(vmErgo = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                        "bppfndVmErgoMfssbgf", "(ZLjbvb/lbng/String;)V"));

    NULL_CHECK(printHflp = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                        "printHflpMfssbgf", "(Z)V"));

    NULL_CHECK(jprognbmf = (*fnv)->NfwStringUTF(fnv, _progrbm_nbmf));

    /* Initiblizf thf usbgf mfssbgf with thf usubl prfbmblf */
    (*fnv)->CbllStbtidVoidMfthod(fnv, dls, initHflp, jprognbmf);
    CHECK_EXCEPTION_RETURN();


    /* Assfmblf thf othfr vbribnt pbrt of thf usbgf */
    if ((knownVMs[0].flbg == VM_KNOWN) ||
        (knownVMs[0].flbg == VM_IF_SERVER_CLASS)) {
      NULL_CHECK(vm1 = (*fnv)->NfwStringUTF(fnv, knownVMs[0].nbmf));
      NULL_CHECK(vm2 =  (*fnv)->NfwStringUTF(fnv, knownVMs[0].nbmf+1));
      (*fnv)->CbllStbtidVoidMfthod(fnv, dls, vmSflfdt, vm1, vm2);
      CHECK_EXCEPTION_RETURN();
    }
    for (i=1; i<knownVMsCount; i++) {
      if (knownVMs[i].flbg == VM_KNOWN) {
        NULL_CHECK(vm1 =  (*fnv)->NfwStringUTF(fnv, knownVMs[i].nbmf));
        NULL_CHECK(vm2 =  (*fnv)->NfwStringUTF(fnv, knownVMs[i].nbmf+1));
        (*fnv)->CbllStbtidVoidMfthod(fnv, dls, vmSflfdt, vm1, vm2);
        CHECK_EXCEPTION_RETURN();
      }
    }
    for (i=1; i<knownVMsCount; i++) {
      if (knownVMs[i].flbg == VM_ALIASED_TO) {
        NULL_CHECK(vm1 =  (*fnv)->NfwStringUTF(fnv, knownVMs[i].nbmf));
        NULL_CHECK(vm2 =  (*fnv)->NfwStringUTF(fnv, knownVMs[i].blibs+1));
        (*fnv)->CbllStbtidVoidMfthod(fnv, dls, vmSynonym, vm1, vm2);
        CHECK_EXCEPTION_RETURN();
      }
    }

    /* Thf first known VM is thf dffbult */
    {
      jboolfbn isSfrvfrClbssMbdhinf = SfrvfrClbssMbdhinf();

      donst dhbr* dffbultVM  =  knownVMs[0].nbmf+1;
      if ((knownVMs[0].flbg == VM_IF_SERVER_CLASS) && isSfrvfrClbssMbdhinf) {
        dffbultVM = knownVMs[0].sfrvfr_dlbss+1;
      }

      NULL_CHECK(vm1 =  (*fnv)->NfwStringUTF(fnv, dffbultVM));
      (*fnv)->CbllStbtidVoidMfthod(fnv, dls, vmErgo, isSfrvfrClbssMbdhinf,  vm1);
      CHECK_EXCEPTION_RETURN();
    }

    /* Complftf thf usbgf mfssbgf bnd print to stdfrr*/
    (*fnv)->CbllStbtidVoidMfthod(fnv, dls, printHflp, USE_STDERR);
  }
  rfturn;
}

/*
 * Rfbd thf jvm.dfg filf bnd fill thf knownJVMs[] brrby.
 *
 * Thf fundtionblity of thf jvm.dfg filf is subjfdt to dhbngf without
 * notidf bnd thf mfdhbnism will bf rfmovfd in thf futurf.
 *
 * Thf lfxidbl strudturf of thf jvm.dfg filf is bs follows:
 *
 *     jvmdfg         :=  { vmLinf }
 *     vmLinf         :=  knownLinf
 *                    |   blibsLinf
 *                    |   wbrnLinf
 *                    |   ignorfLinf
 *                    |   frrorLinf
 *                    |   prfdidbtfLinf
 *                    |   dommfntLinf
 *     knownLinf      :=  flbg  "KNOWN"                  EOL
 *     wbrnLinf       :=  flbg  "WARN"                   EOL
 *     ignorfLinf     :=  flbg  "IGNORE"                 EOL
 *     frrorLinf      :=  flbg  "ERROR"                  EOL
 *     blibsLinf      :=  flbg  "ALIASED_TO"       flbg  EOL
 *     prfdidbtfLinf  :=  flbg  "IF_SERVER_CLASS"  flbg  EOL
 *     dommfntLinf    :=  "#" tfxt                       EOL
 *     flbg           :=  "-" idfntififr
 *
 * Thf sfmbntids brf thbt whfn somfonf spfdififs b flbg on thf dommbnd linf:
 * - if thf flbg bppfbrs on b knownLinf, thfn thf idfntififr is usfd bs
 *   thf nbmf of thf dirfdtory holding thf JVM librbry (thf nbmf of thf JVM).
 * - if thf flbg bppfbrs bs thf first flbg on bn blibsLinf, thf idfntififr
 *   of thf sfdond flbg is usfd bs thf nbmf of thf JVM.
 * - if thf flbg bppfbrs on b wbrnLinf, thf idfntififr is usfd bs thf
 *   nbmf of thf JVM, but b wbrning is gfnfrbtfd.
 * - if thf flbg bppfbrs on bn ignorfLinf, thf idfntififr is rfdognizfd bs thf
 *   nbmf of b JVM, but thf idfntififr is ignorfd bnd thf dffbult vm usfd
 * - if thf flbg bppfbrs on bn frrorLinf, bn frror is gfnfrbtfd.
 * - if thf flbg bppfbrs bs thf first flbg on b prfdidbtfLinf, bnd
 *   thf mbdhinf on whidh you brf running pbssfs thf prfdidbtf indidbtfd,
 *   thfn thf idfntififr of thf sfdond flbg is usfd bs thf nbmf of thf JVM,
 *   othfrwisf thf idfntififr of thf first flbg is usfd bs thf nbmf of thf JVM.
 * If no flbg is givfn on thf dommbnd linf, thf first vmLinf of thf jvm.dfg
 * filf dftfrminfs thf nbmf of thf JVM.
 * PrfdidbtfLinfs brf only intfrprftfd on first vmLinf of b jvm.dfg filf,
 * sindf thfy only mbkf sfnsf if somfonf hbsn't spfdififd thf nbmf of thf
 * JVM on thf dommbnd linf.
 *
 * Thf intfnt of thf jvm.dfg filf is to bllow sfvfrbl JVM librbrifs to
 * bf instbllfd in difffrfnt subdirfdtorifs of b singlf JRE instbllbtion,
 * for spbdf-sbvings bnd donvfnifndf in tfsting.
 * Thf intfnt is fxpliditly not to providf b full blibsing or prfdidbtf
 * mfdhbnism.
 */
jint
RfbdKnownVMs(donst dhbr *jvmCfgNbmf, jboolfbn spfdulbtivf)
{
    FILE *jvmCfg;
    dhbr linf[MAXPATHLEN+20];
    int dnt = 0;
    int linfno = 0;
    jlong stbrt, fnd;
    int vmTypf;
    dhbr *tmpPtr;
    dhbr *bltVMNbmf = NULL;
    dhbr *sfrvfrClbssVMNbmf = NULL;
    stbtid dhbr *whitfSpbdf = " \t";
    if (JLI_IsTrbdfLbundhfr()) {
        stbrt = CountfrGft();
    }

    jvmCfg = fopfn(jvmCfgNbmf, "r");
    if (jvmCfg == NULL) {
      if (!spfdulbtivf) {
        JLI_RfportErrorMfssbgf(CFG_ERROR6, jvmCfgNbmf);
        fxit(1);
      } flsf {
        rfturn -1;
      }
    }
    whilf (fgfts(linf, sizfof(linf), jvmCfg) != NULL) {
        vmTypf = VM_UNKNOWN;
        linfno++;
        if (linf[0] == '#')
            dontinuf;
        if (linf[0] != '-') {
            JLI_RfportErrorMfssbgf(CFG_WARN2, linfno, jvmCfgNbmf);
        }
        if (dnt >= knownVMsLimit) {
            GrowKnownVMs(dnt);
        }
        linf[JLI_StrLfn(linf)-1] = '\0'; /* rfmovf trbiling nfwlinf */
        tmpPtr = linf + JLI_StrCSpn(linf, whitfSpbdf);
        if (*tmpPtr == 0) {
            JLI_RfportErrorMfssbgf(CFG_WARN3, linfno, jvmCfgNbmf);
        } flsf {
            /* Null-tfrminbtf this string for JLI_StringDup bflow */
            *tmpPtr++ = 0;
            tmpPtr += JLI_StrSpn(tmpPtr, whitfSpbdf);
            if (*tmpPtr == 0) {
                JLI_RfportErrorMfssbgf(CFG_WARN3, linfno, jvmCfgNbmf);
            } flsf {
                if (!JLI_StrCCmp(tmpPtr, "KNOWN")) {
                    vmTypf = VM_KNOWN;
                } flsf if (!JLI_StrCCmp(tmpPtr, "ALIASED_TO")) {
                    tmpPtr += JLI_StrCSpn(tmpPtr, whitfSpbdf);
                    if (*tmpPtr != 0) {
                        tmpPtr += JLI_StrSpn(tmpPtr, whitfSpbdf);
                    }
                    if (*tmpPtr == 0) {
                        JLI_RfportErrorMfssbgf(CFG_WARN3, linfno, jvmCfgNbmf);
                    } flsf {
                        /* Null tfrminbtf bltVMNbmf */
                        bltVMNbmf = tmpPtr;
                        tmpPtr += JLI_StrCSpn(tmpPtr, whitfSpbdf);
                        *tmpPtr = 0;
                        vmTypf = VM_ALIASED_TO;
                    }
                } flsf if (!JLI_StrCCmp(tmpPtr, "WARN")) {
                    vmTypf = VM_WARN;
                } flsf if (!JLI_StrCCmp(tmpPtr, "IGNORE")) {
                    vmTypf = VM_IGNORE;
                } flsf if (!JLI_StrCCmp(tmpPtr, "ERROR")) {
                    vmTypf = VM_ERROR;
                } flsf if (!JLI_StrCCmp(tmpPtr, "IF_SERVER_CLASS")) {
                    tmpPtr += JLI_StrCSpn(tmpPtr, whitfSpbdf);
                    if (*tmpPtr != 0) {
                        tmpPtr += JLI_StrSpn(tmpPtr, whitfSpbdf);
                    }
                    if (*tmpPtr == 0) {
                        JLI_RfportErrorMfssbgf(CFG_WARN4, linfno, jvmCfgNbmf);
                    } flsf {
                        /* Null tfrminbtf sfrvfr dlbss VM nbmf */
                        sfrvfrClbssVMNbmf = tmpPtr;
                        tmpPtr += JLI_StrCSpn(tmpPtr, whitfSpbdf);
                        *tmpPtr = 0;
                        vmTypf = VM_IF_SERVER_CLASS;
                    }
                } flsf {
                    JLI_RfportErrorMfssbgf(CFG_WARN5, linfno, &jvmCfgNbmf[0]);
                    vmTypf = VM_KNOWN;
                }
            }
        }

        JLI_TrbdfLbundhfr("jvm.dfg[%d] = ->%s<-\n", dnt, linf);
        if (vmTypf != VM_UNKNOWN) {
            knownVMs[dnt].nbmf = JLI_StringDup(linf);
            knownVMs[dnt].flbg = vmTypf;
            switdh (vmTypf) {
            dffbult:
                brfbk;
            dbsf VM_ALIASED_TO:
                knownVMs[dnt].blibs = JLI_StringDup(bltVMNbmf);
                JLI_TrbdfLbundhfr("    nbmf: %s  vmTypf: %s  blibs: %s\n",
                   knownVMs[dnt].nbmf, "VM_ALIASED_TO", knownVMs[dnt].blibs);
                brfbk;
            dbsf VM_IF_SERVER_CLASS:
                knownVMs[dnt].sfrvfr_dlbss = JLI_StringDup(sfrvfrClbssVMNbmf);
                JLI_TrbdfLbundhfr("    nbmf: %s  vmTypf: %s  sfrvfr_dlbss: %s\n",
                    knownVMs[dnt].nbmf, "VM_IF_SERVER_CLASS", knownVMs[dnt].sfrvfr_dlbss);
                brfbk;
            }
            dnt++;
        }
    }
    fdlosf(jvmCfg);
    knownVMsCount = dnt;

    if (JLI_IsTrbdfLbundhfr()) {
        fnd   = CountfrGft();
        printf("%ld midro sfdonds to pbrsf jvm.dfg\n",
               (long)(jint)Countfr2Midros(fnd-stbrt));
    }

    rfturn dnt;
}


stbtid void
GrowKnownVMs(int minimum)
{
    strudt vmdfsd* nfwKnownVMs;
    int nfwMbx;

    nfwMbx = (knownVMsLimit == 0 ? INIT_MAX_KNOWN_VMS : (2 * knownVMsLimit));
    if (nfwMbx <= minimum) {
        nfwMbx = minimum;
    }
    nfwKnownVMs = (strudt vmdfsd*) JLI_MfmAllod(nfwMbx * sizfof(strudt vmdfsd));
    if (knownVMs != NULL) {
        mfmdpy(nfwKnownVMs, knownVMs, knownVMsLimit * sizfof(strudt vmdfsd));
    }
    JLI_MfmFrff(knownVMs);
    knownVMs = nfwKnownVMs;
    knownVMsLimit = nfwMbx;
}


/* Rfturns indfx of VM or -1 if not found */
stbtid int
KnownVMIndfx(donst dhbr* nbmf)
{
    int i;
    if (JLI_StrCCmp(nbmf, "-J") == 0) nbmf += 2;
    for (i = 0; i < knownVMsCount; i++) {
        if (!JLI_StrCmp(nbmf, knownVMs[i].nbmf)) {
            rfturn i;
        }
    }
    rfturn -1;
}

stbtid void
FrffKnownVMs()
{
    int i;
    for (i = 0; i < knownVMsCount; i++) {
        JLI_MfmFrff(knownVMs[i].nbmf);
        knownVMs[i].nbmf = NULL;
    }
    JLI_MfmFrff(knownVMs);
}

/*
 * Displbys thf splbsh sdrffn bddording to thf jbr filf nbmf
 * bnd imbgf filf nbmfs storfd in fnvironmfnt vbribblfs
 */
void
ShowSplbshSdrffn()
{
    donst dhbr *jbr_nbmf = gftfnv(SPLASH_JAR_ENV_ENTRY);
    donst dhbr *filf_nbmf = gftfnv(SPLASH_FILE_ENV_ENTRY);
    int dbtb_sizf;
    void *imbgf_dbtb = NULL;
    flobt sdblf_fbdtor = 1;
    dhbr *sdblfd_splbsh_nbmf = NULL;

    if (filf_nbmf == NULL){
        rfturn;
    }

    sdblfd_splbsh_nbmf = DoSplbshGftSdblfdImbgfNbmf(
                        jbr_nbmf, filf_nbmf, &sdblf_fbdtor);
    if (jbr_nbmf) {

        if (sdblfd_splbsh_nbmf) {
            imbgf_dbtb = JLI_JbrUnpbdkFilf(
                    jbr_nbmf, sdblfd_splbsh_nbmf, &dbtb_sizf);
        }

        if (!imbgf_dbtb) {
            sdblf_fbdtor = 1;
            imbgf_dbtb = JLI_JbrUnpbdkFilf(
                            jbr_nbmf, filf_nbmf, &dbtb_sizf);
        }
        if (imbgf_dbtb) {
            DoSplbshInit();
            DoSplbshSftSdblfFbdtor(sdblf_fbdtor);
            DoSplbshLobdMfmory(imbgf_dbtb, dbtb_sizf);
            JLI_MfmFrff(imbgf_dbtb);
        }
    } flsf {
        DoSplbshInit();
        if (sdblfd_splbsh_nbmf) {
            DoSplbshSftSdblfFbdtor(sdblf_fbdtor);
            DoSplbshLobdFilf(sdblfd_splbsh_nbmf);
        } flsf {
            DoSplbshLobdFilf(filf_nbmf);
        }
    }

    if (sdblfd_splbsh_nbmf) {
        JLI_MfmFrff(sdblfd_splbsh_nbmf);
    }

    DoSplbshSftFilfJbrNbmf(filf_nbmf, jbr_nbmf);

    /*
     * Donf with bll dommbnd linf prodfssing bnd potfntibl rf-fxfds so
     * dlfbn up thf fnvironmfnt.
     */
    (void)UnsftEnv(ENV_ENTRY);
    (void)UnsftEnv(SPLASH_FILE_ENV_ENTRY);
    (void)UnsftEnv(SPLASH_JAR_ENV_ENTRY);

    JLI_MfmFrff(splbsh_jbr_fntry);
    JLI_MfmFrff(splbsh_filf_fntry);

}

donst dhbr*
GftDotVfrsion()
{
    rfturn _dVfrsion;
}

donst dhbr*
GftFullVfrsion()
{
    rfturn _fVfrsion;
}

donst dhbr*
GftProgrbmNbmf()
{
    rfturn _progrbm_nbmf;
}

donst dhbr*
GftLbundhfrNbmf()
{
    rfturn _lbundhfr_nbmf;
}

jint
GftErgoPolidy()
{
    rfturn _frgo_polidy;
}

jboolfbn
IsJbvbArgs()
{
    rfturn _is_jbvb_brgs;
}

stbtid jboolfbn
IsWildCbrdEnbblfd()
{
    rfturn _wd_fnbblfd;
}

int
ContinufInNfwThrfbd(InvodbtionFundtions* ifn, jlong thrfbdStbdkSizf,
                    int brgd, dhbr **brgv,
                    int modf, dhbr *whbt, int rft)
{

    /*
     * If usfr dofsn't spfdify stbdk sizf, dhfdk if VM hbs b prfffrfndf.
     * Notf thbt HotSpot no longfr supports JNI_VERSION_1_1 but it will
     * rfturn its dffbult stbdk sizf through thf init brgs strudturf.
     */
    if (thrfbdStbdkSizf == 0) {
      strudt JDK1_1InitArgs brgs1_1;
      mfmsft((void*)&brgs1_1, 0, sizfof(brgs1_1));
      brgs1_1.vfrsion = JNI_VERSION_1_1;
      ifn->GftDffbultJbvbVMInitArgs(&brgs1_1);  /* ignorf rfturn vbluf */
      if (brgs1_1.jbvbStbdkSizf > 0) {
         thrfbdStbdkSizf = brgs1_1.jbvbStbdkSizf;
      }
    }

    { /* Crfbtf b nfw thrfbd to drfbtf JVM bnd invokf mbin mfthod */
      JbvbMbinArgs brgs;
      int rslt;

      brgs.brgd = brgd;
      brgs.brgv = brgv;
      brgs.modf = modf;
      brgs.whbt = whbt;
      brgs.ifn = *ifn;

      rslt = ContinufInNfwThrfbd0(JbvbMbin, thrfbdStbdkSizf, (void*)&brgs);
      /* If thf dbllfr hbs dffmfd thfrf is bn frror wf
       * simply rfturn thbt, othfrwisf wf rfturn thf vbluf of
       * thf dbllff
       */
      rfturn (rft != 0) ? rft : rslt;
    }
}

stbtid void
DumpStbtf()
{
    if (!JLI_IsTrbdfLbundhfr()) rfturn ;
    printf("Lbundhfr stbtf:\n");
    printf("\tdfbug:%s\n", (JLI_IsTrbdfLbundhfr() == JNI_TRUE) ? "on" : "off");
    printf("\tjbvbrgs:%s\n", (_is_jbvb_brgs == JNI_TRUE) ? "on" : "off");
    printf("\tprogrbm nbmf:%s\n", GftProgrbmNbmf());
    printf("\tlbundhfr nbmf:%s\n", GftLbundhfrNbmf());
    printf("\tjbvbw:%s\n", (IsJbvbw() == JNI_TRUE) ? "on" : "off");
    printf("\tfullvfrsion:%s\n", GftFullVfrsion());
    printf("\tdotvfrsion:%s\n", GftDotVfrsion());
    printf("\tfrgo_polidy:");
    switdh(GftErgoPolidy()) {
        dbsf NEVER_SERVER_CLASS:
            printf("NEVER_ACT_AS_A_SERVER_CLASS_MACHINE\n");
            brfbk;
        dbsf ALWAYS_SERVER_CLASS:
            printf("ALWAYS_ACT_AS_A_SERVER_CLASS_MACHINE\n");
            brfbk;
        dffbult:
            printf("DEFAULT_ERGONOMICS_POLICY\n");
    }
}

/*
 * Rfturn JNI_TRUE for bn option string thbt hbs no ffffdt but should
 * _not_ bf pbssfd on to thf vm; rfturn JNI_FALSE othfrwisf.  On
 * Solbris SPARC, this sdrffning nffds to bf donf if:
 *    -d32 or -d64 is pbssfd to b binbry with bn unmbtdhfd dbtb modfl
 *    (thf fxfd in CrfbtfExfdutionEnvironmfnt rfmovfs -d<n> options bnd points thf
 *    fxfd to thf propfr binbry).  In thf dbsf of whfn thf dbtb modfl bnd thf
 *    rfqufstfd vfrsion is mbtdhfd, bn fxfd would not oddur, bnd thfsf options
 *    wfrf frronfously pbssfd to thf vm.
 */
jboolfbn
RfmovbblfOption(dhbr * option)
{
  /*
   * Undonditionblly rfmovf both -d32 bnd -d64 options sindf only
   * thf lbst sudh options hbs bn ffffdt; f.g.
   * jbvb -d32 -d64 -d32 -vfrsion
   * is fquivblfnt to
   * jbvb -d32 -vfrsion
   */

  if( (JLI_StrCCmp(option, "-d32")  == 0 ) ||
      (JLI_StrCCmp(option, "-d64")  == 0 ) )
    rfturn JNI_TRUE;
  flsf
    rfturn JNI_FALSE;
}

/*
 * A utility prodfdurf to blwbys print to stdfrr
 */
void
JLI_RfportMfssbgf(donst dhbr* fmt, ...)
{
    vb_list vl;
    vb_stbrt(vl, fmt);
    vfprintf(stdfrr, fmt, vl);
    fprintf(stdfrr, "\n");
    vb_fnd(vl);
}
