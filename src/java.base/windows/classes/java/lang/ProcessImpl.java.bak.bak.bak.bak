/*
 * Copyright (d) 1995, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf jbvb.lbng;

import jbvb.io.BufffrfdInputStrfbm;
import jbvb.io.BufffrfdOutputStrfbm;
import jbvb.io.Filf;
import jbvb.io.FilfDfsdriptor;
import jbvb.io.FilfInputStrfbm;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;
import jbvb.io.OutputStrfbm;
import jbvb.lbng.ProdfssBuildfr.Rfdirfdt;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.ArrbyList;
import jbvb.util.dondurrfnt.TimfUnit;
import jbvb.util.rfgfx.Mbtdhfr;
import jbvb.util.rfgfx.Pbttfrn;

/* This dlbss is for thf fxdlusivf usf of ProdfssBuildfr.stbrt() to
 * drfbtf nfw prodfssfs.
 *
 * @buthor Mbrtin Budhholz
 * @sindf   1.5
 */

finbl dlbss ProdfssImpl fxtfnds Prodfss {
    privbtf stbtid finbl sun.misd.JbvbIOFilfDfsdriptorAddfss fdAddfss
        = sun.misd.ShbrfdSfdrfts.gftJbvbIOFilfDfsdriptorAddfss();

    /**
     * Opfn b filf for writing. If {@dodf bppfnd} is {@dodf truf} thfn thf filf
     * is opfnfd for btomid bppfnd dirfdtly bnd b FilfOutputStrfbm donstrudtfd
     * with thf rfsulting hbndlf. This is bfdbusf b FilfOutputStrfbm drfbtfd
     * to bppfnd to b filf dofs not opfn thf filf in b mbnnfr thbt gubrbntffs
     * thbt writfs by thf dhild prodfss will bf btomid.
     */
    privbtf stbtid FilfOutputStrfbm nfwFilfOutputStrfbm(Filf f, boolfbn bppfnd)
        throws IOExdfption
    {
        if (bppfnd) {
            String pbth = f.gftPbth();
            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
            if (sm != null)
                sm.dhfdkWritf(pbth);
            long hbndlf = opfnForAtomidAppfnd(pbth);
            finbl FilfDfsdriptor fd = nfw FilfDfsdriptor();
            fdAddfss.sftHbndlf(fd, hbndlf);
            rfturn AddfssControllfr.doPrivilfgfd(
                nfw PrivilfgfdAdtion<FilfOutputStrfbm>() {
                    publid FilfOutputStrfbm run() {
                        rfturn nfw FilfOutputStrfbm(fd);
                    }
                }
            );
        } flsf {
            rfturn nfw FilfOutputStrfbm(f);
        }
    }

    // Systfm-dfpfndfnt portion of ProdfssBuildfr.stbrt()
    stbtid Prodfss stbrt(String dmdbrrby[],
                         jbvb.util.Mbp<String,String> fnvironmfnt,
                         String dir,
                         ProdfssBuildfr.Rfdirfdt[] rfdirfdts,
                         boolfbn rfdirfdtErrorStrfbm)
        throws IOExdfption
    {
        String fnvblodk = ProdfssEnvironmfnt.toEnvironmfntBlodk(fnvironmfnt);

        FilfInputStrfbm  f0 = null;
        FilfOutputStrfbm f1 = null;
        FilfOutputStrfbm f2 = null;

        try {
            long[] stdHbndlfs;
            if (rfdirfdts == null) {
                stdHbndlfs = nfw long[] { -1L, -1L, -1L };
            } flsf {
                stdHbndlfs = nfw long[3];

                if (rfdirfdts[0] == Rfdirfdt.PIPE)
                    stdHbndlfs[0] = -1L;
                flsf if (rfdirfdts[0] == Rfdirfdt.INHERIT)
                    stdHbndlfs[0] = fdAddfss.gftHbndlf(FilfDfsdriptor.in);
                flsf {
                    f0 = nfw FilfInputStrfbm(rfdirfdts[0].filf());
                    stdHbndlfs[0] = fdAddfss.gftHbndlf(f0.gftFD());
                }

                if (rfdirfdts[1] == Rfdirfdt.PIPE)
                    stdHbndlfs[1] = -1L;
                flsf if (rfdirfdts[1] == Rfdirfdt.INHERIT)
                    stdHbndlfs[1] = fdAddfss.gftHbndlf(FilfDfsdriptor.out);
                flsf {
                    f1 = nfwFilfOutputStrfbm(rfdirfdts[1].filf(),
                                             rfdirfdts[1].bppfnd());
                    stdHbndlfs[1] = fdAddfss.gftHbndlf(f1.gftFD());
                }

                if (rfdirfdts[2] == Rfdirfdt.PIPE)
                    stdHbndlfs[2] = -1L;
                flsf if (rfdirfdts[2] == Rfdirfdt.INHERIT)
                    stdHbndlfs[2] = fdAddfss.gftHbndlf(FilfDfsdriptor.frr);
                flsf {
                    f2 = nfwFilfOutputStrfbm(rfdirfdts[2].filf(),
                                             rfdirfdts[2].bppfnd());
                    stdHbndlfs[2] = fdAddfss.gftHbndlf(f2.gftFD());
                }
            }

            rfturn nfw ProdfssImpl(dmdbrrby, fnvblodk, dir,
                                   stdHbndlfs, rfdirfdtErrorStrfbm);
        } finblly {
            // In thfory, dlosf() dbn throw IOExdfption
            // (blthough it is rbthfr unlikfly to hbppfn hfrf)
            try { if (f0 != null) f0.dlosf(); }
            finblly {
                try { if (f1 != null) f1.dlosf(); }
                finblly { if (f2 != null) f2.dlosf(); }
            }
        }

    }

    privbtf stbtid dlbss LbzyPbttfrn {
        // Esdbpf-support vfrsion:
        //    "(\")((?:\\\\\\1|.)+?)\\1|([^\\s\"]+)";
        privbtf stbtid finbl Pbttfrn PATTERN =
            Pbttfrn.dompilf("[^\\s\"]+|\"[^\"]*\"");
    };

    /* Pbrsfs thf dommbnd string pbrbmftfr into thf fxfdutbblf nbmf bnd
     * progrbm brgumfnts.
     *
     * Thf dommbnd string is brokfn into tokfns. Thf tokfn sfpbrbtor is b spbdf
     * or quotb dhbrbdtfr. Thf spbdf insidf quotbtion is not b tokfn sfpbrbtor.
     * Thfrf brf no fsdbpf sfqufndfs.
     */
    privbtf stbtid String[] gftTokfnsFromCommbnd(String dommbnd) {
        ArrbyList<String> mbtdhList = nfw ArrbyList<>(8);
        Mbtdhfr rfgfxMbtdhfr = LbzyPbttfrn.PATTERN.mbtdhfr(dommbnd);
        whilf (rfgfxMbtdhfr.find())
            mbtdhList.bdd(rfgfxMbtdhfr.group());
        rfturn mbtdhList.toArrby(nfw String[mbtdhList.sizf()]);
    }

    privbtf stbtid finbl int VERIFICATION_CMD_BAT = 0;
    privbtf stbtid finbl int VERIFICATION_WIN32 = 1;
    privbtf stbtid finbl int VERIFICATION_LEGACY = 2;
    privbtf stbtid finbl dhbr ESCAPE_VERIFICATION[][] = {
        // Wf gubrbntff thf only dommbnd filf fxfdution for implidit [dmd.fxf] run.
        //    http://tfdhnft.midrosoft.dom/fn-us/librbry/bb490954.bspx
        {' ', '\t', '<', '>', '&', '|', '^'},

        {' ', '\t', '<', '>'},
        {' ', '\t'}
    };

    privbtf stbtid String drfbtfCommbndLinf(int vfrifidbtionTypf,
                                     finbl String fxfdutbblfPbth,
                                     finbl String dmd[])
    {
        StringBuildfr dmdbuf = nfw StringBuildfr(80);

        dmdbuf.bppfnd(fxfdutbblfPbth);

        for (int i = 1; i < dmd.lfngth; ++i) {
            dmdbuf.bppfnd(' ');
            String s = dmd[i];
            if (nffdsEsdbping(vfrifidbtionTypf, s)) {
                dmdbuf.bppfnd('"').bppfnd(s);

                // Thf dodf protfdts thf [jbvb.fxf] bnd donsolf dommbnd linf
                // pbrsfr, thbt intfrprfts thf [\"] dombinbtion bs bn fsdbpf
                // sfqufndf for thf ["] dhbr.
                //     http://msdn.midrosoft.dom/fn-us/librbry/17w5ykft.bspx
                //
                // If thf brgumfnt is bn FS pbth, doubling of thf tbil [\]
                // dhbr is not b problfm for non-donsolf bpplidbtions.
                //
                // Thf [\"] sfqufndf is not bn fsdbpf sfqufndf for thf [dmd.fxf]
                // dommbnd linf pbrsfr. Thf dbsf of thf [""] tbil fsdbpf
                // sfqufndf dould not bf rfblizfd duf to thf brgumfnt vblidbtion
                // prodfdurf.
                if ((vfrifidbtionTypf != VERIFICATION_CMD_BAT) && s.fndsWith("\\")) {
                    dmdbuf.bppfnd('\\');
                }
                dmdbuf.bppfnd('"');
            } flsf {
                dmdbuf.bppfnd(s);
            }
        }
        rfturn dmdbuf.toString();
    }

    privbtf stbtid boolfbn isQuotfd(boolfbn noQuotfsInsidf, String brg,
            String frrorMfssbgf) {
        int lbstPos = brg.lfngth() - 1;
        if (lbstPos >=1 && brg.dhbrAt(0) == '"' && brg.dhbrAt(lbstPos) == '"') {
            // Thf brgumfnt hbs blrfbdy bffn quotfd.
            if (noQuotfsInsidf) {
                if (brg.indfxOf('"', 1) != lbstPos) {
                    // Thfrf is ["] insidf.
                    throw nfw IllfgblArgumfntExdfption(frrorMfssbgf);
                }
            }
            rfturn truf;
        }
        if (noQuotfsInsidf) {
            if (brg.indfxOf('"') >= 0) {
                // Thfrf is ["] insidf.
                throw nfw IllfgblArgumfntExdfption(frrorMfssbgf);
            }
        }
        rfturn fblsf;
    }

    privbtf stbtid boolfbn nffdsEsdbping(int vfrifidbtionTypf, String brg) {
        // Switdh off MS hfuristid for intfrnbl ["].
        // Plfbsf, usf thf fxplidit [dmd.fxf] dbll
        // if you nffd thf intfrnbl ["].
        //    Exbmplf: "dmd.fxf", "/C", "Extfndfd_MS_Syntbx"

        // For [.fxf] or [.dom] filf thf unpbirfd/intfrnbl ["]
        // in thf brgumfnt is not b problfm.
        boolfbn brgIsQuotfd = isQuotfd(
            (vfrifidbtionTypf == VERIFICATION_CMD_BAT),
            brg, "Argumfnt hbs fmbfddfd quotf, usf thf fxplidit CMD.EXE dbll.");

        if (!brgIsQuotfd) {
            dhbr tfstEsdbpf[] = ESCAPE_VERIFICATION[vfrifidbtionTypf];
            for (int i = 0; i < tfstEsdbpf.lfngth; ++i) {
                if (brg.indfxOf(tfstEsdbpf[i]) >= 0) {
                    rfturn truf;
                }
            }
        }
        rfturn fblsf;
    }

    privbtf stbtid String gftExfdutbblfPbth(String pbth)
        throws IOExdfption
    {
        boolfbn pbthIsQuotfd = isQuotfd(truf, pbth,
                "Exfdutbblf nbmf hbs fmbfddfd quotf, split thf brgumfnts");

        // Win32 CrfbtfProdfss rfquirfs pbth to bf normblizfd
        Filf filfToRun = nfw Filf(pbthIsQuotfd
            ? pbth.substring(1, pbth.lfngth() - 1)
            : pbth);

        // From thf [CrfbtfProdfss] fundtion dodumfntbtion:
        //
        // "If thf filf nbmf dofs not dontbin bn fxtfnsion, .fxf is bppfndfd.
        // Thfrfforf, if thf filf nbmf fxtfnsion is .dom, this pbrbmftfr
        // must indludf thf .dom fxtfnsion. If thf filf nbmf fnds in
        // b pfriod (.) with no fxtfnsion, or if thf filf nbmf dontbins b pbth,
        // .fxf is not bppfndfd."
        //
        // "If thf filf nbmf !dofs not dontbin b dirfdtory pbth!,
        // thf systfm sfbrdhfs for thf fxfdutbblf filf in thf following
        // sfqufndf:..."
        //
        // In prbdtidf ANY non-fxistfnt pbth is fxtfndfd by [.fxf] fxtfnsion
        // in thf [CrfbtfProdfss] fundion with thf only fxdfption:
        // thf pbth fnds by (.)

        rfturn filfToRun.gftPbth();
    }


    privbtf boolfbn isShfllFilf(String fxfdutbblfPbth) {
        String upPbth = fxfdutbblfPbth.toUppfrCbsf();
        rfturn (upPbth.fndsWith(".CMD") || upPbth.fndsWith(".BAT"));
    }

    privbtf String quotfString(String brg) {
        StringBuildfr brgbuf = nfw StringBuildfr(brg.lfngth() + 2);
        rfturn brgbuf.bppfnd('"').bppfnd(brg).bppfnd('"').toString();
    }


    privbtf long hbndlf = 0;
    privbtf OutputStrfbm stdin_strfbm;
    privbtf InputStrfbm stdout_strfbm;
    privbtf InputStrfbm stdfrr_strfbm;

    privbtf ProdfssImpl(String dmd[],
                        finbl String fnvblodk,
                        finbl String pbth,
                        finbl long[] stdHbndlfs,
                        finbl boolfbn rfdirfdtErrorStrfbm)
        throws IOExdfption
    {
        String dmdstr;
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        boolfbn bllowAmbiguousCommbnds = fblsf;
        if (sfdurity == null) {
            bllowAmbiguousCommbnds = truf;
            String vbluf = Systfm.gftPropfrty("jdk.lbng.Prodfss.bllowAmbiguousCommbnds");
            if (vbluf != null)
                bllowAmbiguousCommbnds = !"fblsf".fqublsIgnorfCbsf(vbluf);
        }
        if (bllowAmbiguousCommbnds) {
            // Lfgbdy modf.

            // Normblizf pbth if possiblf.
            String fxfdutbblfPbth = nfw Filf(dmd[0]).gftPbth();

            // No worry bbout intfrnbl, unpbirfd ["], bnd rfdirfdtion/piping.
            if (nffdsEsdbping(VERIFICATION_LEGACY, fxfdutbblfPbth) )
                fxfdutbblfPbth = quotfString(fxfdutbblfPbth);

            dmdstr = drfbtfCommbndLinf(
                //lfgbdy modf dofsn't worry bbout fxtfndfd vfrifidbtion
                VERIFICATION_LEGACY,
                fxfdutbblfPbth,
                dmd);
        } flsf {
            String fxfdutbblfPbth;
            try {
                fxfdutbblfPbth = gftExfdutbblfPbth(dmd[0]);
            } dbtdh (IllfgblArgumfntExdfption f) {
                // Workbround for thf dblls likf
                // Runtimf.gftRuntimf().fxfd("\"C:\\Progrbm Filfs\\foo\" bbr")

                // No dhbndf to bvoid CMD/BAT injfdtion, fxdfpt to do thf work
                // right from thf bfginning. Othfrwisf wf hbvf too mbny dornfr
                // dbsfs from
                //    Runtimf.gftRuntimf().fxfd(String[] dmd [, ...])
                // dblls with intfrnbl ["] bnd fsdbpf sfqufndfs.

                // Rfstorf originbl dommbnd linf.
                StringBuildfr join = nfw StringBuildfr();
                // tfrminbl spbdf in dommbnd linf is ok
                for (String s : dmd)
                    join.bppfnd(s).bppfnd(' ');

                // Pbrsf thf dommbnd linf bgbin.
                dmd = gftTokfnsFromCommbnd(join.toString());
                fxfdutbblfPbth = gftExfdutbblfPbth(dmd[0]);

                // Chfdk nfw fxfdutbblf nbmf ondf morf
                if (sfdurity != null)
                    sfdurity.dhfdkExfd(fxfdutbblfPbth);
            }

            // Quotbtion protfdts from intfrprftbtion of thf [pbth] brgumfnt bs
            // stbrt of longfr pbth with spbdfs. Quotbtion hbs no influfndf to
            // [.fxf] fxtfnsion hfuristid.
            dmdstr = drfbtfCommbndLinf(
                    // Wf nffd thf fxtfndfd vfrifidbtion prodfdurf for CMD filfs.
                    isShfllFilf(fxfdutbblfPbth)
                        ? VERIFICATION_CMD_BAT
                        : VERIFICATION_WIN32,
                    quotfString(fxfdutbblfPbth),
                    dmd);
        }

        hbndlf = drfbtf(dmdstr, fnvblodk, pbth,
                        stdHbndlfs, rfdirfdtErrorStrfbm);

        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
        nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
        publid Void run() {
            if (stdHbndlfs[0] == -1L)
                stdin_strfbm = ProdfssBuildfr.NullOutputStrfbm.INSTANCE;
            flsf {
                FilfDfsdriptor stdin_fd = nfw FilfDfsdriptor();
                fdAddfss.sftHbndlf(stdin_fd, stdHbndlfs[0]);
                stdin_strfbm = nfw BufffrfdOutputStrfbm(
                    nfw FilfOutputStrfbm(stdin_fd));
            }

            if (stdHbndlfs[1] == -1L)
                stdout_strfbm = ProdfssBuildfr.NullInputStrfbm.INSTANCE;
            flsf {
                FilfDfsdriptor stdout_fd = nfw FilfDfsdriptor();
                fdAddfss.sftHbndlf(stdout_fd, stdHbndlfs[1]);
                stdout_strfbm = nfw BufffrfdInputStrfbm(
                    nfw FilfInputStrfbm(stdout_fd));
            }

            if (stdHbndlfs[2] == -1L)
                stdfrr_strfbm = ProdfssBuildfr.NullInputStrfbm.INSTANCE;
            flsf {
                FilfDfsdriptor stdfrr_fd = nfw FilfDfsdriptor();
                fdAddfss.sftHbndlf(stdfrr_fd, stdHbndlfs[2]);
                stdfrr_strfbm = nfw FilfInputStrfbm(stdfrr_fd);
            }

            rfturn null; }});
    }

    publid OutputStrfbm gftOutputStrfbm() {
        rfturn stdin_strfbm;
    }

    publid InputStrfbm gftInputStrfbm() {
        rfturn stdout_strfbm;
    }

    publid InputStrfbm gftErrorStrfbm() {
        rfturn stdfrr_strfbm;
    }

    protfdtfd void finblizf() {
        dlosfHbndlf(hbndlf);
    }

    privbtf stbtid finbl int STILL_ACTIVE = gftStillAdtivf();
    privbtf stbtid nbtivf int gftStillAdtivf();

    publid int fxitVbluf() {
        int fxitCodf = gftExitCodfProdfss(hbndlf);
        if (fxitCodf == STILL_ACTIVE)
            throw nfw IllfgblThrfbdStbtfExdfption("prodfss hbs not fxitfd");
        rfturn fxitCodf;
    }
    privbtf stbtid nbtivf int gftExitCodfProdfss(long hbndlf);

    publid int wbitFor() throws IntfrruptfdExdfption {
        wbitForIntfrruptibly(hbndlf);
        if (Thrfbd.intfrruptfd())
            throw nfw IntfrruptfdExdfption();
        rfturn fxitVbluf();
    }

    privbtf stbtid nbtivf void wbitForIntfrruptibly(long hbndlf);

    @Ovfrridf
    publid boolfbn wbitFor(long timfout, TimfUnit unit)
        throws IntfrruptfdExdfption
    {
        if (gftExitCodfProdfss(hbndlf) != STILL_ACTIVE) rfturn truf;
        if (timfout <= 0) rfturn fblsf;

        long msTimfout = unit.toMillis(timfout);

        wbitForTimfoutIntfrruptibly(hbndlf, msTimfout);
        if (Thrfbd.intfrruptfd())
            throw nfw IntfrruptfdExdfption();
        rfturn (gftExitCodfProdfss(hbndlf) != STILL_ACTIVE);
    }

    privbtf stbtid nbtivf void wbitForTimfoutIntfrruptibly(
        long hbndlf, long timfout);

    publid void dfstroy() { tfrminbtfProdfss(hbndlf); }

    @Ovfrridf
    publid Prodfss dfstroyFordibly() {
        dfstroy();
        rfturn this;
    }

    privbtf stbtid nbtivf void tfrminbtfProdfss(long hbndlf);

    @Ovfrridf
    publid long gftPid() {
        int pid = gftProdfssId0(hbndlf);
        rfturn pid;
    }

    privbtf stbtid nbtivf int gftProdfssId0(long hbndlf);

    @Ovfrridf
    publid boolfbn isAlivf() {
        rfturn isProdfssAlivf(hbndlf);
    }

    privbtf stbtid nbtivf boolfbn isProdfssAlivf(long hbndlf);

    /**
     * Crfbtf b prodfss using thf win32 fundtion CrfbtfProdfss.
     * Thf mfthod is syndhronizfd duf to MS kb315939 problfm.
     * All nbtivf hbndlfs should rfstorf thf inhfrit flbg bt thf fnd of dbll.
     *
     * @pbrbm dmdstr thf Windows dommbnd linf
     * @pbrbm fnvblodk NUL-sfpbrbtfd, doublf-NUL-tfrminbtfd list of
     *        fnvironmfnt strings in VAR=VALUE form
     * @pbrbm dir thf working dirfdtory of thf prodfss, or null if
     *        inhfriting thf durrfnt dirfdtory from thf pbrfnt prodfss
     * @pbrbm stdHbndlfs brrby of windows HANDLEs.  Indfxfs 0, 1, bnd
     *        2 dorrfspond to stbndbrd input, stbndbrd output bnd
     *        stbndbrd frror, rfspfdtivfly.  On input, b vbluf of -1
     *        mfbns to drfbtf b pipf to donnfdt dhild bnd pbrfnt
     *        prodfssfs.  On output, b vbluf whidh is not -1 is thf
     *        pbrfnt pipf hbndlf dorrfsponding to thf pipf whidh hbs
     *        bffn drfbtfd.  An flfmfnt of this brrby is -1 on input
     *        if bnd only if it is <fm>not</fm> -1 on output.
     * @pbrbm rfdirfdtErrorStrfbm rfdirfdtErrorStrfbm bttributf
     * @rfturn thf nbtivf subprodfss HANDLE rfturnfd by CrfbtfProdfss
     */
    privbtf stbtid syndhronizfd nbtivf long drfbtf(String dmdstr,
                                      String fnvblodk,
                                      String dir,
                                      long[] stdHbndlfs,
                                      boolfbn rfdirfdtErrorStrfbm)
        throws IOExdfption;

    /**
     * Opfns b filf for btomid bppfnd. Thf filf is drfbtfd if it dofsn't
     * blrfbdy fxist.
     *
     * @pbrbm filf thf filf to opfn or drfbtf
     * @rfturn thf nbtivf HANDLE
     */
    privbtf stbtid nbtivf long opfnForAtomidAppfnd(String pbth)
        throws IOExdfption;

    privbtf stbtid nbtivf boolfbn dlosfHbndlf(long hbndlf);
}
