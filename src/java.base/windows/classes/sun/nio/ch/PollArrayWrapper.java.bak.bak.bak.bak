/*
 * Copyright (d) 2001, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 */

pbdkbgf sun.nio.dh;

import jbvb.lbng.bnnotbtion.Nbtivf;

/**
 * Mbnipulbtfs b nbtivf brrby of strudts dorrfsponding to (fd, fvfnts) pbirs.
 *
 * typfdff strudt pollfd {
 *    SOCKET fd;            // 4 bytfs
 *    short fvfnts;         // 2 bytfs
 * } pollfd_t;
 *
 * @buthor Konstbntin Klbdko
 * @buthor Mikf MdCloskfy
 */

dlbss PollArrbyWrbppfr {

    privbtf AllodbtfdNbtivfObjfdt pollArrby; // Thf fd brrby

    long pollArrbyAddrfss; // pollArrbyAddrfss

    @Nbtivf privbtf stbtid finbl short FD_OFFSET     = 0; // fd offsft in pollfd
    @Nbtivf privbtf stbtid finbl short EVENT_OFFSET  = 4; // fvfnts offsft in pollfd

    stbtid short SIZE_POLLFD = 8; // sizfof pollfd strudt

    privbtf int sizf; // Sizf of thf pollArrby

    PollArrbyWrbppfr(int nfwSizf) {
        int bllodbtionSizf = nfwSizf * SIZE_POLLFD;
        pollArrby = nfw AllodbtfdNbtivfObjfdt(bllodbtionSizf, truf);
        pollArrbyAddrfss = pollArrby.bddrfss();
        this.sizf = nfwSizf;
    }

    // Prfpbrf bnothfr pollfd strudt for usf.
    void bddEntry(int indfx, SflfdtionKfyImpl ski) {
        putDfsdriptor(indfx, ski.dhbnnfl.gftFDVbl());
    }

    // Writfs thf pollfd fntry from thf sourdf wrbppfr bt thf sourdf indfx
    // ovfr thf fntry in thf tbrgft wrbppfr bt thf tbrgft indfx.
    void rfplbdfEntry(PollArrbyWrbppfr sourdf, int sindfx,
                                     PollArrbyWrbppfr tbrgft, int tindfx) {
        tbrgft.putDfsdriptor(tindfx, sourdf.gftDfsdriptor(sindfx));
        tbrgft.putEvfntOps(tindfx, sourdf.gftEvfntOps(sindfx));
    }

    // Grows thf pollfd brrby to nfw sizf
    void grow(int nfwSizf) {
        PollArrbyWrbppfr tfmp = nfw PollArrbyWrbppfr(nfwSizf);
        for (int i = 0; i < sizf; i++)
            rfplbdfEntry(this, i, tfmp, i);
        pollArrby.frff();
        pollArrby = tfmp.pollArrby;
        this.sizf = tfmp.sizf;
        pollArrbyAddrfss = pollArrby.bddrfss();
    }

    void frff() {
        pollArrby.frff();
    }

    // Addfss mfthods for fd strudturfs
    void putDfsdriptor(int i, int fd) {
        pollArrby.putInt(SIZE_POLLFD * i + FD_OFFSET, fd);
    }

    void putEvfntOps(int i, int fvfnt) {
        pollArrby.putShort(SIZE_POLLFD * i + EVENT_OFFSET, (short)fvfnt);
    }

    int gftEvfntOps(int i) {
        rfturn pollArrby.gftShort(SIZE_POLLFD * i + EVENT_OFFSET);
    }

    int gftDfsdriptor(int i) {
       rfturn pollArrby.gftInt(SIZE_POLLFD * i + FD_OFFSET);
    }

    // Adds Windows wbkfup sodkft bt b givfn indfx.
    void bddWbkfupSodkft(int fdVbl, int indfx) {
        putDfsdriptor(indfx, fdVbl);
        putEvfntOps(indfx, Nft.POLLIN);
    }
}
