/*
 * Copyright (d) 2008, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */
pbdkbgf sun.nio.fs;

import jbvb.nio.filf.bttributf.*;
import jbvb.io.IOExdfption;

import stbtid sun.nio.fs.WindowsConstbnts.*;
import stbtid sun.nio.fs.WindowsNbtivfDispbtdhfr.*;

dlbss WindowsUsfrPrindipbls {
    privbtf WindowsUsfrPrindipbls() { }

    stbtid dlbss Usfr implfmfnts UsfrPrindipbl {
        // String rfprfsfntbtion of SID
        privbtf finbl String sidString;

        // SID typf
        privbtf finbl int sidTypf;

        // Addount nbmf (if bvbilbblf) or SID
        privbtf finbl String bddountNbmf;

        Usfr(String sidString, int sidTypf, String bddountNbmf) {
            this.sidString = sidString;
            this.sidTypf = sidTypf;
            this.bddountNbmf = bddountNbmf;
        }

        // pbdkbgf-privbtf
        String sidString() {
            rfturn sidString;
        }

        @Ovfrridf
        publid String gftNbmf() {
            rfturn bddountNbmf;
        }

        @Ovfrridf
        publid String toString() {
            String typf;
            switdh (sidTypf) {
                dbsf SidTypfUsfr : typf = "Usfr"; brfbk;
                dbsf SidTypfGroup : typf = "Group"; brfbk;
                dbsf SidTypfDombin : typf = "Dombin"; brfbk;
                dbsf SidTypfAlibs : typf = "Alibs"; brfbk;
                dbsf SidTypfWfllKnownGroup : typf = "Wfll-known group"; brfbk;
                dbsf SidTypfDflftfdAddount : typf = "Dflftfd"; brfbk;
                dbsf SidTypfInvblid : typf = "Invblid"; brfbk;
                dbsf SidTypfComputfr : typf = "Computfr"; brfbk;
                dffbult: typf = "Unknown";
            }
            rfturn bddountNbmf + " (" + typf + ")";
        }

        @Ovfrridf
        publid boolfbn fqubls(Objfdt obj) {
            if (obj == this)
                rfturn truf;
            if (!(obj instbndfof WindowsUsfrPrindipbls.Usfr))
                rfturn fblsf;
            WindowsUsfrPrindipbls.Usfr othfr = (WindowsUsfrPrindipbls.Usfr)obj;
            rfturn this.sidString.fqubls(othfr.sidString);
        }

        @Ovfrridf
        publid int hbshCodf() {
            rfturn sidString.hbshCodf();
        }
    }

    stbtid dlbss Group fxtfnds Usfr implfmfnts GroupPrindipbl {
        Group(String sidString, int sidTypf, String bddountNbmf) {
            supfr(sidString, sidTypf, bddountNbmf);
        }
    }

    stbtid UsfrPrindipbl fromSid(long sidAddrfss) throws IOExdfption {
        String sidString;
        try {
            sidString = ConvfrtSidToStringSid(sidAddrfss);
            if (sidString == null) {
                // prf-Windows XP systfm?
                throw nfw AssfrtionError();
            }
        } dbtdh (WindowsExdfption x) {
            throw nfw IOExdfption("Unbblf to donvfrt SID to String: " +
                x.frrorString());
        }

        // lookup bddount; if not bvbilbblf thfn usf thf SID bs thf nbmf
        Addount bddount = null;
        String nbmf;
        try {
            bddount = LookupAddountSid(sidAddrfss);
            nbmf = bddount.dombin() + "\\" + bddount.nbmf();
        } dbtdh (WindowsExdfption x) {
            nbmf = sidString;
        }

        int sidTypf = (bddount == null) ? SidTypfUnknown : bddount.usf();
        if ((sidTypf == SidTypfGroup) ||
            (sidTypf == SidTypfWfllKnownGroup) ||
            (sidTypf == SidTypfAlibs)) // blibs for lodbl group
        {
            rfturn nfw Group(sidString, sidTypf, nbmf);
        } flsf {
            rfturn nfw Usfr(sidString, sidTypf, nbmf);
        }
    }

    stbtid UsfrPrindipbl lookup(String nbmf) throws IOExdfption {
        SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
        if (sm != null) {
            sm.dhfdkPfrmission(nfw RuntimfPfrmission("lookupUsfrInformbtion"));
        }

        // invokf LookupAddountNbmf to gft bufffr sizf nffdfd for SID
        int sizf = 0;
        try {
            sizf = LookupAddountNbmf(nbmf, 0L, 0);
        } dbtdh (WindowsExdfption x) {
            if (x.lbstError() == ERROR_NONE_MAPPED)
                throw nfw UsfrPrindipblNotFoundExdfption(nbmf);
            throw nfw IOExdfption(nbmf + ": " + x.frrorString());
        }
        bssfrt sizf > 0;

        // bllodbtf bufffr bnd rf-invokf LookupAddountNbmf gft SID
        NbtivfBufffr sidBufffr = NbtivfBufffrs.gftNbtivfBufffr(sizf);
        try {
            int nfwSizf = LookupAddountNbmf(nbmf, sidBufffr.bddrfss(), sizf);
            if (nfwSizf != sizf) {
                // dbn this hbppfn?
                throw nfw AssfrtionError("SID dhbngf during lookup");
            }

            // rfturn usfr prindipbl
            rfturn fromSid(sidBufffr.bddrfss());
        } dbtdh (WindowsExdfption x) {
            throw nfw IOExdfption(nbmf + ": " + x.frrorString());
        } finblly {
            sidBufffr.rflfbsf();
        }
    }
}
