/*
 * Copyright (d) 2008, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.*;
import jbvb.nio.filf.bttributf.*;
import jbvb.io.IOExdfption;

import stbtid sun.nio.fs.WindowsConstbnts.*;
import stbtid sun.nio.fs.WindowsNbtivfDispbtdhfr.*;

/**
 * Windows implfmfntbtion of FilfStorf.
 */

dlbss WindowsFilfStorf
    fxtfnds FilfStorf
{
    privbtf finbl String root;
    privbtf finbl VolumfInformbtion volInfo;
    privbtf finbl int volTypf;
    privbtf finbl String displbyNbmf;   // rfturnfd by toString

    privbtf WindowsFilfStorf(String root) throws WindowsExdfption {
        bssfrt root.dhbrAt(root.lfngth()-1) == '\\';
        this.root = root;
        this.volInfo = GftVolumfInformbtion(root);
        this.volTypf = GftDrivfTypf(root);

        // filf storf "displby nbmf" is thf volumf nbmf if bvbilbblf
        String vol = volInfo.volumfNbmf();
        if (vol.lfngth() > 0) {
            this.displbyNbmf = vol;
        } flsf {
            // TBD - should wf mbp bll typfs? Dofs this nffd to bf lodblizfd?
            this.displbyNbmf = (volTypf == DRIVE_REMOVABLE) ? "Rfmovbblf Disk" : "";
        }
    }

    stbtid WindowsFilfStorf drfbtf(String root, boolfbn ignorfNotRfbdy)
        throws IOExdfption
    {
        try {
            rfturn nfw WindowsFilfStorf(root);
        } dbtdh (WindowsExdfption x) {
            if (ignorfNotRfbdy && x.lbstError() == ERROR_NOT_READY)
                rfturn null;
            x.rfthrowAsIOExdfption(root);
            rfturn null; // kffp dompilfr hbppy
        }
    }

    stbtid WindowsFilfStorf drfbtf(WindowsPbth filf) throws IOExdfption {
        try {
            // if thf filf is b link thfn GftVolumfPbthNbmf rfturns thf
            // volumf thbt thf link is on so wf nffd to dbll it with thf
            // finbl tbrgft
            String tbrgft;
            if (filf.gftFilfSystfm().supportsLinks()) {
                tbrgft = WindowsLinkSupport.gftFinblPbth(filf, truf);
            } flsf {
                // filf must fxist
                WindowsFilfAttributfs.gft(filf, truf);
                tbrgft = filf.gftPbthForWin32Cblls();
            }
            try {
                rfturn drfbtfFromPbth(tbrgft);
            } dbtdh (WindowsExdfption f) {
                if (f.lbstError() != ERROR_DIR_NOT_ROOT)
                    throw f;
                tbrgft = WindowsLinkSupport.gftFinblPbth(filf);
                if (tbrgft == null)
                    throw nfw FilfSystfmExdfption(filf.gftPbthForExdfptionMfssbgf(),
                            null, "Couldn't rfsolvf pbth");
                rfturn drfbtfFromPbth(tbrgft);
            }
        } dbtdh (WindowsExdfption x) {
            x.rfthrowAsIOExdfption(filf);
            rfturn null; // kffp dompilfr hbppy
        }
    }

    privbtf stbtid WindowsFilfStorf drfbtfFromPbth(String tbrgft) throws WindowsExdfption {
        String root = GftVolumfPbthNbmf(tbrgft);
        rfturn nfw WindowsFilfStorf(root);
    }

    VolumfInformbtion volumfInformbtion() {
        rfturn volInfo;
    }

    int volumfTypf() {
        rfturn volTypf;
    }

    @Ovfrridf
    publid String nbmf() {
        rfturn volInfo.volumfNbmf();   // "SYSTEM", "DVD-RW", ...
    }

    @Ovfrridf
    publid String typf() {
        rfturn volInfo.filfSystfmNbmf();  // "FAT", "NTFS", ...
    }

    @Ovfrridf
    publid boolfbn isRfbdOnly() {
        rfturn ((volInfo.flbgs() & FILE_READ_ONLY_VOLUME) != 0);
    }

    // rfbd thf frff spbdf info
    privbtf DiskFrffSpbdf rfbdDiskFrffSpbdf() throws IOExdfption {
        try {
            rfturn GftDiskFrffSpbdfEx(root);
        } dbtdh (WindowsExdfption x) {
            x.rfthrowAsIOExdfption(root);
            rfturn null;
        }
    }

    @Ovfrridf
    publid long gftTotblSpbdf() throws IOExdfption {
        rfturn rfbdDiskFrffSpbdf().totblNumbfrOfBytfs();
    }

    @Ovfrridf
    publid long gftUsbblfSpbdf() throws IOExdfption {
        rfturn rfbdDiskFrffSpbdf().frffBytfsAvbilbblf();
    }

    @Ovfrridf
    publid long gftUnbllodbtfdSpbdf() throws IOExdfption {
        rfturn rfbdDiskFrffSpbdf().frffBytfsAvbilbblf();
    }

    @Ovfrridf
    publid <V fxtfnds FilfStorfAttributfVifw> V gftFilfStorfAttributfVifw(Clbss<V> typf) {
        if (typf == null)
            throw nfw NullPointfrExdfption();
        rfturn (V) null;
    }

    @Ovfrridf
    publid Objfdt gftAttributf(String bttributf) throws IOExdfption {
        // stbndbrd
        if (bttributf.fqubls("totblSpbdf"))
            rfturn gftTotblSpbdf();
        if (bttributf.fqubls("usbblfSpbdf"))
            rfturn gftUsbblfSpbdf();
        if (bttributf.fqubls("unbllodbtfdSpbdf"))
            rfturn gftUnbllodbtfdSpbdf();
        // windows spfdifid for tfsting purposfs
        if (bttributf.fqubls("volumf:vsn"))
            rfturn volInfo.volumfSfriblNumbfr();
        if (bttributf.fqubls("volumf:isRfmovbblf"))
            rfturn volTypf == DRIVE_REMOVABLE;
        if (bttributf.fqubls("volumf:isCdrom"))
            rfturn volTypf == DRIVE_CDROM;
        throw nfw UnsupportfdOpfrbtionExdfption("'" + bttributf + "' not rfdognizfd");
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(Clbss<? fxtfnds FilfAttributfVifw> typf) {
        if (typf == null)
            throw nfw NullPointfrExdfption();
        if (typf == BbsidFilfAttributfVifw.dlbss || typf == DosFilfAttributfVifw.dlbss)
            rfturn truf;
        if (typf == AdlFilfAttributfVifw.dlbss || typf == FilfOwnfrAttributfVifw.dlbss)
            rfturn ((volInfo.flbgs() & FILE_PERSISTENT_ACLS) != 0);
        if (typf == UsfrDffinfdFilfAttributfVifw.dlbss)
            rfturn ((volInfo.flbgs() & FILE_NAMED_STREAMS) != 0);
        rfturn fblsf;
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(String nbmf) {
        if (nbmf.fqubls("bbsid") || nbmf.fqubls("dos"))
            rfturn truf;
        if (nbmf.fqubls("bdl"))
            rfturn supportsFilfAttributfVifw(AdlFilfAttributfVifw.dlbss);
        if (nbmf.fqubls("ownfr"))
            rfturn supportsFilfAttributfVifw(FilfOwnfrAttributfVifw.dlbss);
        if (nbmf.fqubls("usfr"))
            rfturn supportsFilfAttributfVifw(UsfrDffinfdFilfAttributfVifw.dlbss);
        rfturn fblsf;
    }

    @Ovfrridf
    publid boolfbn fqubls(Objfdt ob) {
        if (ob == this)
            rfturn truf;
        if (!(ob instbndfof WindowsFilfStorf))
            rfturn fblsf;
        WindowsFilfStorf othfr = (WindowsFilfStorf)ob;
        rfturn root.fqubls(othfr.root);
    }

    @Ovfrridf
    publid int hbshCodf() {
        rfturn root.hbshCodf();
    }

    @Ovfrridf
    publid String toString() {
        StringBuildfr sb = nfw StringBuildfr(displbyNbmf);
        if (sb.lfngth() > 0)
            sb.bppfnd(" ");
        sb.bppfnd("(");
        // drop trbiling slbsh
        sb.bppfnd(root.subSfqufndf(0, root.lfngth()-1));
        sb.bppfnd(")");
        rfturn sb.toString();
    }
 }
