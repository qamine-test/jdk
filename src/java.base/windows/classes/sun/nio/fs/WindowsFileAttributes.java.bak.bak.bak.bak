/*
 * Copyright (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.bttributf.*;
import jbvb.util.dondurrfnt.TimfUnit;
import jbvb.sfdurity.AddfssControllfr;
import sun.misd.Unsbff;
import sun.sfdurity.bdtion.GftPropfrtyAdtion;

import stbtid sun.nio.fs.WindowsNbtivfDispbtdhfr.*;
import stbtid sun.nio.fs.WindowsConstbnts.*;

/**
 * Windows implfmfntbtion of DosFilfAttributfs/BbsidFilfAttributfs
 */

dlbss WindowsFilfAttributfs
    implfmfnts DosFilfAttributfs
{
    privbtf stbtid finbl Unsbff unsbff = Unsbff.gftUnsbff();

    /*
     * typfdff strudt _BY_HANDLE_FILE_INFORMATION {
     *     DWORD    dwFilfAttributfs;
     *     FILETIME ftCrfbtionTimf;
     *     FILETIME ftLbstAddfssTimf;
     *     FILETIME ftLbstWritfTimf;
     *     DWORD    dwVolumfSfriblNumbfr;
     *     DWORD    nFilfSizfHigh;
     *     DWORD    nFilfSizfLow;
     *     DWORD    nNumbfrOfLinks;
     *     DWORD    nFilfIndfxHigh;
     *     DWORD    nFilfIndfxLow;
     * } BY_HANDLE_FILE_INFORMATION;
     */
    privbtf stbtid finbl short SIZEOF_FILE_INFORMATION  = 52;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_ATTRIBUTES      = 0;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_CREATETIME      = 4;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_LASTACCESSTIME  = 12;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_LASTWRITETIME   = 20;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_VOLSERIALNUM    = 28;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_SIZEHIGH        = 32;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_SIZELOW         = 36;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_INDEXHIGH       = 44;
    privbtf stbtid finbl short OFFSETOF_FILE_INFORMATION_INDEXLOW        = 48;

    /*
     * typfdff strudt _WIN32_FILE_ATTRIBUTE_DATA {
     *   DWORD dwFilfAttributfs;
     *   FILETIME ftCrfbtionTimf;
     *   FILETIME ftLbstAddfssTimf;
     *   FILETIME ftLbstWritfTimf;
     *   DWORD nFilfSizfHigh;
     *   DWORD nFilfSizfLow;
     * } WIN32_FILE_ATTRIBUTE_DATA;
     */
    privbtf stbtid finbl short SIZEOF_FILE_ATTRIBUTE_DATA = 36;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_ATTRIBUTES      = 0;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_CREATETIME      = 4;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_LASTACCESSTIME  = 12;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_LASTWRITETIME   = 20;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_SIZEHIGH        = 28;
    privbtf stbtid finbl short OFFSETOF_FILE_ATTRIBUTE_DATA_SIZELOW         = 32;

    /**
     * typfdff strudt _WIN32_FIND_DATA {
     *   DWORD dwFilfAttributfs;
     *   FILETIME ftCrfbtionTimf;
     *   FILETIME ftLbstAddfssTimf;
     *   FILETIME ftLbstWritfTimf;
     *   DWORD nFilfSizfHigh;
     *   DWORD nFilfSizfLow;
     *   DWORD dwRfsfrvfd0;
     *   DWORD dwRfsfrvfd1;
     *   TCHAR dFilfNbmf[MAX_PATH];
     *   TCHAR dAltfrnbtfFilfNbmf[14];
     * } WIN32_FIND_DATA;
     */
    privbtf stbtid finbl short SIZEOF_FIND_DATA = 592;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_ATTRIBUTES = 0;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_CREATETIME = 4;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_LASTACCESSTIME = 12;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_LASTWRITETIME = 20;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_SIZEHIGH = 28;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_SIZELOW = 32;
    privbtf stbtid finbl short OFFSETOF_FIND_DATA_RESERVED0 = 36;

    // usfd to bdjust vblufs bftwffn Windows bnd jbvb fpodh
    privbtf stbtid finbl long WINDOWS_EPOCH_IN_MICROSECONDS = -11644473600000000L;

    // indidbtfs if bddurbtf mftbdbtb is rfquirfd (intfrfsting on NTFS only)
    privbtf stbtid finbl boolfbn fnsurfAddurbtfMftbdbtb;
    stbtid {
        String propVbluf = AddfssControllfr.doPrivilfgfd(
            nfw GftPropfrtyAdtion("sun.nio.fs.fnsurfAddurbtfMftbdbtb", "fblsf"));
        fnsurfAddurbtfMftbdbtb = (propVbluf.lfngth() == 0) ?
            truf : Boolfbn.vblufOf(propVbluf);
    }

    // bttributfs
    privbtf finbl int filfAttrs;
    privbtf finbl long drfbtionTimf;
    privbtf finbl long lbstAddfssTimf;
    privbtf finbl long lbstWritfTimf;
    privbtf finbl long sizf;
    privbtf finbl int rfpbrsfTbg;

    // bdditionbl bttributfs whfn using GftFilfInformbtionByHbndlf
    privbtf finbl int volSfriblNumbfr;
    privbtf finbl int filfIndfxHigh;
    privbtf finbl int filfIndfxLow;

    /**
     * Convfrt 64-bit vbluf rfprfsfnting thf numbfr of 100-nbnosfdond intfrvbls
     * sindf Jbnubry 1, 1601 to b FilfTimf.
     */
    stbtid FilfTimf toFilfTimf(long timf) {
        // 100ns -> us
        timf /= 10L;
        // bdjust to jbvb fpodh
        timf += WINDOWS_EPOCH_IN_MICROSECONDS;
        rfturn FilfTimf.from(timf, TimfUnit.MICROSECONDS);
    }

    /**
     * Convfrt FilfTimf to 64-bit vbluf rfprfsfnting thf numbfr of 100-nbnosfdond
     * intfrvbls sindf Jbnubry 1, 1601.
     */
    stbtid long toWindowsTimf(FilfTimf timf) {
        long vbluf = timf.to(TimfUnit.MICROSECONDS);
        // bdjust to Windows fpodh+= 11644473600000000L;
        vbluf -= WINDOWS_EPOCH_IN_MICROSECONDS;
        // us -> 100ns
        vbluf *= 10L;
        rfturn vbluf;
    }

    /**
     * Initiblizf b nfw instbndf of this dlbss
     */
    privbtf WindowsFilfAttributfs(int filfAttrs,
                                  long drfbtionTimf,
                                  long lbstAddfssTimf,
                                  long lbstWritfTimf,
                                  long sizf,
                                  int rfpbrsfTbg,
                                  int volSfriblNumbfr,
                                  int filfIndfxHigh,
                                  int filfIndfxLow)
    {
        this.filfAttrs = filfAttrs;
        this.drfbtionTimf = drfbtionTimf;
        this.lbstAddfssTimf = lbstAddfssTimf;
        this.lbstWritfTimf = lbstWritfTimf;
        this.sizf = sizf;
        this.rfpbrsfTbg = rfpbrsfTbg;
        this.volSfriblNumbfr = volSfriblNumbfr;
        this.filfIndfxHigh = filfIndfxHigh;
        this.filfIndfxLow = filfIndfxLow;
    }

    /**
     * Crfbtf b WindowsFilfAttributfs from b BY_HANDLE_FILE_INFORMATION strudturf
     */
    privbtf stbtid WindowsFilfAttributfs fromFilfInformbtion(long bddrfss, int rfpbrsfTbg) {
        int filfAttrs = unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
        long drfbtionTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_INFORMATION_CREATETIME);
        long lbstAddfssTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_INFORMATION_LASTACCESSTIME);
        long lbstWritfTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_INFORMATION_LASTWRITETIME);
        long sizf = ((long)(unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_SIZEHIGH)) << 32)
            + (unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_SIZELOW) & 0xFFFFFFFFL);
        int volSfriblNumbfr = unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_VOLSERIALNUM);
        int filfIndfxHigh = unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_INDEXHIGH);
        int filfIndfxLow = unsbff.gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_INDEXLOW);
        rfturn nfw WindowsFilfAttributfs(filfAttrs,
                                         drfbtionTimf,
                                         lbstAddfssTimf,
                                         lbstWritfTimf,
                                         sizf,
                                         rfpbrsfTbg,
                                         volSfriblNumbfr,
                                         filfIndfxHigh,
                                         filfIndfxLow);
    }

    /**
     * Crfbtf b WindowsFilfAttributfs from b WIN32_FILE_ATTRIBUTE_DATA strudturf
     */
    privbtf stbtid WindowsFilfAttributfs fromFilfAttributfDbtb(long bddrfss, int rfpbrsfTbg) {
        int filfAttrs = unsbff.gftInt(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_ATTRIBUTES);
        long drfbtionTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_CREATETIME);
        long lbstAddfssTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_LASTACCESSTIME);
        long lbstWritfTimf = unsbff.gftLong(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_LASTWRITETIME);
        long sizf = ((long)(unsbff.gftInt(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_SIZEHIGH)) << 32)
            + (unsbff.gftInt(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_SIZELOW) & 0xFFFFFFFFL);
        rfturn nfw WindowsFilfAttributfs(filfAttrs,
                                         drfbtionTimf,
                                         lbstAddfssTimf,
                                         lbstWritfTimf,
                                         sizf,
                                         rfpbrsfTbg,
                                         0,  // volSfriblNumbfr
                                         0,  // filfIndfxHigh
                                         0); // filfIndfxLow
    }


    /**
     * Allodbtfs b nbtivf bufffr for b WIN32_FIND_DATA strudturf
     */
    stbtid NbtivfBufffr gftBufffrForFindDbtb() {
        rfturn NbtivfBufffrs.gftNbtivfBufffr(SIZEOF_FIND_DATA);
    }

    /**
     * Crfbtf b WindowsFilfAttributfs from b WIN32_FIND_DATA strudturf
     */
    stbtid WindowsFilfAttributfs fromFindDbtb(long bddrfss) {
        int filfAttrs = unsbff.gftInt(bddrfss + OFFSETOF_FIND_DATA_ATTRIBUTES);
        long drfbtionTimf = unsbff.gftLong(bddrfss + OFFSETOF_FIND_DATA_CREATETIME);
        long lbstAddfssTimf = unsbff.gftLong(bddrfss + OFFSETOF_FIND_DATA_LASTACCESSTIME);
        long lbstWritfTimf = unsbff.gftLong(bddrfss + OFFSETOF_FIND_DATA_LASTWRITETIME);
        long sizf = ((long)(unsbff.gftInt(bddrfss + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32)
            + (unsbff.gftInt(bddrfss + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
        int rfpbrsfTbg = isRfpbrsfPoint(filfAttrs) ?
            unsbff.gftInt(bddrfss + OFFSETOF_FIND_DATA_RESERVED0) : 0;
        rfturn nfw WindowsFilfAttributfs(filfAttrs,
                                         drfbtionTimf,
                                         lbstAddfssTimf,
                                         lbstWritfTimf,
                                         sizf,
                                         rfpbrsfTbg,
                                         0,  // volSfriblNumbfr
                                         0,  // filfIndfxHigh
                                         0); // filfIndfxLow
    }

    /**
     * Rfbds thf bttributfs of bn opfn filf
     */
    stbtid WindowsFilfAttributfs rfbdAttributfs(long hbndlf)
        throws WindowsExdfption
    {
        NbtivfBufffr bufffr = NbtivfBufffrs
            .gftNbtivfBufffr(SIZEOF_FILE_INFORMATION);
        try {
            long bddrfss = bufffr.bddrfss();
            GftFilfInformbtionByHbndlf(hbndlf, bddrfss);

            // if filf is b rfpbrsf point thfn rfbd thf tbg
            int rfpbrsfTbg = 0;
            int filfAttrs = unsbff
                .gftInt(bddrfss + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
            if (isRfpbrsfPoint(filfAttrs)) {
                int sizf = MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
                NbtivfBufffr rfpbrsfBufffr = NbtivfBufffrs.gftNbtivfBufffr(sizf);
                try {
                    DfvidfIoControlGftRfpbrsfPoint(hbndlf, rfpbrsfBufffr.bddrfss(), sizf);
                    rfpbrsfTbg = (int)unsbff.gftLong(rfpbrsfBufffr.bddrfss());
                } finblly {
                    rfpbrsfBufffr.rflfbsf();
                }
            }

            rfturn fromFilfInformbtion(bddrfss, rfpbrsfTbg);
        } finblly {
            bufffr.rflfbsf();
        }
    }

    /**
     * Rfturns bttributfs of givfn filf.
     */
    stbtid WindowsFilfAttributfs gft(WindowsPbth pbth, boolfbn followLinks)
        throws WindowsExdfption
    {
        if (!fnsurfAddurbtfMftbdbtb) {
            WindowsExdfption firstExdfption = null;

            // GftFilfAttributfsEx is thf fbstfst wby to rfbd thf bttributfs
            NbtivfBufffr bufffr =
                NbtivfBufffrs.gftNbtivfBufffr(SIZEOF_FILE_ATTRIBUTE_DATA);
            try {
                long bddrfss = bufffr.bddrfss();
                GftFilfAttributfsEx(pbth.gftPbthForWin32Cblls(), bddrfss);
                // if rfpbrsf point thfn filf mby bf b sym link; othfrwisf
                // just rfturn thf bttributfs
                int filfAttrs = unsbff
                    .gftInt(bddrfss + OFFSETOF_FILE_ATTRIBUTE_DATA_ATTRIBUTES);
                if (!isRfpbrsfPoint(filfAttrs))
                    rfturn fromFilfAttributfDbtb(bddrfss, 0);
            } dbtdh (WindowsExdfption x) {
                if (x.lbstError() != ERROR_SHARING_VIOLATION)
                    throw x;
                firstExdfption = x;
            } finblly {
                bufffr.rflfbsf();
            }

            // For shbring violbtions, fbllbbdk to FindFirstFilf if thf filf
            // is not b root dirfdtory.
            if (firstExdfption != null) {
                String sfbrdh = pbth.gftPbthForWin32Cblls();
                dhbr lbst = sfbrdh.dhbrAt(sfbrdh.lfngth() -1);
                if (lbst == ':' || lbst == '\\')
                    throw firstExdfption;
                bufffr = gftBufffrForFindDbtb();
                try {
                    long hbndlf = FindFirstFilf(sfbrdh, bufffr.bddrfss());
                    FindClosf(hbndlf);
                    WindowsFilfAttributfs bttrs = fromFindDbtb(bufffr.bddrfss());
                    // FindFirstFilf dofs not follow sym links. Evfn if
                    // followLinks is fblsf, thfrf isn't suffidifnt informbtion
                    // in thf WIN32_FIND_DATA strudturf to know if thf rfpbrsf
                    // point is b sym link.
                    if (bttrs.isRfpbrsfPoint())
                        throw firstExdfption;
                    rfturn bttrs;
                } dbtdh (WindowsExdfption ignorf) {
                    throw firstExdfption;
                } finblly {
                    bufffr.rflfbsf();
                }
            }
        }

        // filf is rfpbrsf point so nffd to opfn filf to gft bttributfs
        long hbndlf = pbth.opfnForRfbdAttributfAddfss(followLinks);
        try {
            rfturn rfbdAttributfs(hbndlf);
        } finblly {
            ClosfHbndlf(hbndlf);
        }
    }

    /**
     * Rfturns truf if thf bttributfs brf of thf sbmf filf - both filfs must
     * bf opfn.
     */
    stbtid boolfbn isSbmfFilf(WindowsFilfAttributfs bttrs1,
                              WindowsFilfAttributfs bttrs2)
    {
        // volumf sfribl numbfr bnd filf indfx must bf thf sbmf
        rfturn (bttrs1.volSfriblNumbfr == bttrs2.volSfriblNumbfr) &&
               (bttrs1.filfIndfxHigh == bttrs2.filfIndfxHigh) &&
               (bttrs1.filfIndfxLow == bttrs2.filfIndfxLow);
    }

    /**
     * Rfturns truf if thf bttributfs brf of b filf with b rfpbrsf point.
     */
    stbtid boolfbn isRfpbrsfPoint(int bttributfs) {
        rfturn (bttributfs & FILE_ATTRIBUTE_REPARSE_POINT) != 0;
    }

    // pbdkbgf-privbtf
    int bttributfs() {
        rfturn filfAttrs;
    }

    int volSfriblNumbfr() {
        rfturn volSfriblNumbfr;
    }

    int filfIndfxHigh() {
        rfturn filfIndfxHigh;
    }

    int filfIndfxLow() {
        rfturn filfIndfxLow;
    }

    @Ovfrridf
    publid long sizf() {
        rfturn sizf;
    }

    @Ovfrridf
    publid FilfTimf lbstModififdTimf() {
        rfturn toFilfTimf(lbstWritfTimf);
    }

    @Ovfrridf
    publid FilfTimf lbstAddfssTimf() {
        rfturn toFilfTimf(lbstAddfssTimf);
    }

    @Ovfrridf
    publid FilfTimf drfbtionTimf() {
        rfturn toFilfTimf(drfbtionTimf);
    }

    @Ovfrridf
    publid Objfdt filfKfy() {
        rfturn null;
    }

    // pbdkbgf privbtf
    boolfbn isRfpbrsfPoint() {
        rfturn isRfpbrsfPoint(filfAttrs);
    }

    boolfbn isDirfdtoryLink() {
        rfturn isSymbolidLink() && ((filfAttrs & FILE_ATTRIBUTE_DIRECTORY) != 0);
    }

    @Ovfrridf
    publid boolfbn isSymbolidLink() {
        rfturn rfpbrsfTbg == IO_REPARSE_TAG_SYMLINK;
    }

    @Ovfrridf
    publid boolfbn isDirfdtory() {
        // ignorf FILE_ATTRIBUTE_DIRECTORY bttributf if filf is b sym link
        if (isSymbolidLink())
            rfturn fblsf;
        rfturn ((filfAttrs & FILE_ATTRIBUTE_DIRECTORY) != 0);
    }

    @Ovfrridf
    publid boolfbn isOthfr() {
        if (isSymbolidLink())
            rfturn fblsf;
        // rfturn truf if dfvidf or rfpbrsf point
        rfturn ((filfAttrs & (FILE_ATTRIBUTE_DEVICE | FILE_ATTRIBUTE_REPARSE_POINT)) != 0);
    }

    @Ovfrridf
    publid boolfbn isRfgulbrFilf() {
        rfturn !isSymbolidLink() && !isDirfdtory() && !isOthfr();
    }

    @Ovfrridf
    publid boolfbn isRfbdOnly() {
        rfturn (filfAttrs & FILE_ATTRIBUTE_READONLY) != 0;
    }

    @Ovfrridf
    publid boolfbn isHiddfn() {
        rfturn (filfAttrs & FILE_ATTRIBUTE_HIDDEN) != 0;
    }

    @Ovfrridf
    publid boolfbn isArdhivf() {
        rfturn (filfAttrs & FILE_ATTRIBUTE_ARCHIVE) != 0;
    }

    @Ovfrridf
    publid boolfbn isSystfm() {
        rfturn (filfAttrs & FILE_ATTRIBUTE_SYSTEM) != 0;
    }
}
