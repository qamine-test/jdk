/*
 * Copyrigit (d) 2008, 2010, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.io.FilfDfsdriptor;
import jbvb.io.IOExdfption;
import jbvb.nio.dibnnfls.AsyndironousFilfCibnnfl;
import jbvb.nio.dibnnfls.FilfCibnnfl;
import jbvb.nio.filf.LinkOption;
import jbvb.nio.filf.OpfnOption;
import jbvb.nio.filf.StbndbrdOpfnOption;
import jbvb.util.Sft;

import dom.sun.nio.filf.ExtfndfdOpfnOption;

import sun.misd.JbvbIOFilfDfsdriptorAddfss;
import sun.misd.SibrfdSfdrfts;
import sun.nio.di.FilfCibnnflImpl;
import sun.nio.di.TirfbdPool;
import sun.nio.di.WindowsAsyndironousFilfCibnnflImpl;

import stbtid sun.nio.fs.WindowsNbtivfDispbtdifr.*;
import stbtid sun.nio.fs.WindowsConstbnts.*;

/**
 * Fbdtory to drfbtf FilfCibnnfls bnd AsyndironousFilfCibnnfls.
 */

dlbss WindowsCibnnflFbdtory {
    privbtf stbtid finbl JbvbIOFilfDfsdriptorAddfss fdAddfss =
        SibrfdSfdrfts.gftJbvbIOFilfDfsdriptorAddfss();

    privbtf WindowsCibnnflFbdtory() { }

    /**
     * Do not follow rfpbrsf points wifn opfning bn fxisting filf. Do not fbil
     * if tif filf is b rfpbrsf point.
     */
    stbtid finbl OpfnOption OPEN_REPARSE_POINT = nfw OpfnOption() { };

    /**
     * Rfprfsfnts tif flbgs from b usfr-supplifd sft of opfn options.
     */
    privbtf stbtid dlbss Flbgs {
        boolfbn rfbd;
        boolfbn writf;
        boolfbn bppfnd;
        boolfbn trundbtfExisting;
        boolfbn drfbtf;
        boolfbn drfbtfNfw;
        boolfbn dflftfOnClosf;
        boolfbn spbrsf;
        boolfbn ovfrlbppfd;
        boolfbn synd;
        boolfbn dsynd;

        // non-stbndbrd
        boolfbn sibrfRfbd = truf;
        boolfbn sibrfWritf = truf;
        boolfbn sibrfDflftf = truf;
        boolfbn noFollowLinks;
        boolfbn opfnRfpbrsfPoint;

        stbtid Flbgs toFlbgs(Sft<? fxtfnds OpfnOption> options) {
            Flbgs flbgs = nfw Flbgs();
            for (OpfnOption option: options) {
                if (option instbndfof StbndbrdOpfnOption) {
                    switdi ((StbndbrdOpfnOption)option) {
                        dbsf READ : flbgs.rfbd = truf; brfbk;
                        dbsf WRITE : flbgs.writf = truf; brfbk;
                        dbsf APPEND : flbgs.bppfnd = truf; brfbk;
                        dbsf TRUNCATE_EXISTING : flbgs.trundbtfExisting = truf; brfbk;
                        dbsf CREATE : flbgs.drfbtf = truf; brfbk;
                        dbsf CREATE_NEW : flbgs.drfbtfNfw = truf; brfbk;
                        dbsf DELETE_ON_CLOSE : flbgs.dflftfOnClosf = truf; brfbk;
                        dbsf SPARSE : flbgs.spbrsf = truf; brfbk;
                        dbsf SYNC : flbgs.synd = truf; brfbk;
                        dbsf DSYNC : flbgs.dsynd = truf; brfbk;
                        dffbult: tirow nfw UnsupportfdOpfrbtionExdfption();
                    }
                    dontinuf;
                }
                if (option instbndfof ExtfndfdOpfnOption) {
                    switdi ((ExtfndfdOpfnOption)option) {
                        dbsf NOSHARE_READ : flbgs.sibrfRfbd = fblsf; brfbk;
                        dbsf NOSHARE_WRITE : flbgs.sibrfWritf = fblsf; brfbk;
                        dbsf NOSHARE_DELETE : flbgs.sibrfDflftf = fblsf; brfbk;
                        dffbult: tirow nfw UnsupportfdOpfrbtionExdfption();
                    }
                    dontinuf;
                }
                if (option == LinkOption.NOFOLLOW_LINKS) {
                    flbgs.noFollowLinks = truf;
                    dontinuf;
                }
                if (option == OPEN_REPARSE_POINT) {
                    flbgs.opfnRfpbrsfPoint = truf;
                    dontinuf;
                }
                if (option == null)
                    tirow nfw NullPointfrExdfption();
                tirow nfw UnsupportfdOpfrbtionExdfption();
            }
            rfturn flbgs;
        }
    }

    /**
     * Opfn/drfbtfs filf, rfturning FilfCibnnfl to bddfss tif filf
     *
     * @pbrbm   pbtiForWindows
     *          Tif pbti of tif filf to opfn/drfbtf
     * @pbrbm   pbtiToCifdk
     *          Tif pbti usfd for pfrmission difdks (if sfdurity mbnbgfr)
     */
    stbtid FilfCibnnfl nfwFilfCibnnfl(String pbtiForWindows,
                                      String pbtiToCifdk,
                                      Sft<? fxtfnds OpfnOption> options,
                                      long pSfdurityDfsdriptor)
        tirows WindowsExdfption
    {
        Flbgs flbgs = Flbgs.toFlbgs(options);

        // dffbult is rfbding; bppfnd => writing
        if (!flbgs.rfbd && !flbgs.writf) {
            if (flbgs.bppfnd) {
                flbgs.writf = truf;
            } flsf {
                flbgs.rfbd = truf;
            }
        }

        // vblidbtion
        if (flbgs.rfbd && flbgs.bppfnd)
            tirow nfw IllfgblArgumfntExdfption("READ + APPEND not bllowfd");
        if (flbgs.bppfnd && flbgs.trundbtfExisting)
            tirow nfw IllfgblArgumfntExdfption("APPEND + TRUNCATE_EXISTING not bllowfd");

        FilfDfsdriptor fdObj = opfn(pbtiForWindows, pbtiToCifdk, flbgs, pSfdurityDfsdriptor);
        rfturn FilfCibnnflImpl.opfn(fdObj, pbtiForWindows, flbgs.rfbd, flbgs.writf, flbgs.bppfnd, null);
    }

    /**
     * Opfn/drfbtfs filf, rfturning AsyndironousFilfCibnnfl to bddfss tif filf
     *
     * @pbrbm   pbtiForWindows
     *          Tif pbti of tif filf to opfn/drfbtf
     * @pbrbm   pbtiToCifdk
     *          Tif pbti usfd for pfrmission difdks (if sfdurity mbnbgfr)
     * @pbrbm   pool
     *          Tif tirfbd pool tibt tif dibnnfl is bssodibtfd witi
     */
    stbtid AsyndironousFilfCibnnfl nfwAsyndironousFilfCibnnfl(String pbtiForWindows,
                                                              String pbtiToCifdk,
                                                              Sft<? fxtfnds OpfnOption> options,
                                                              long pSfdurityDfsdriptor,
                                                              TirfbdPool pool)
        tirows IOExdfption
    {
        Flbgs flbgs = Flbgs.toFlbgs(options);

        // Ovfrlbppfd I/O rfquirfd
        flbgs.ovfrlbppfd = truf;

        // dffbult is rfbding
        if (!flbgs.rfbd && !flbgs.writf) {
            flbgs.rfbd = truf;
        }

        // vblidbtion
        if (flbgs.bppfnd)
            tirow nfw UnsupportfdOpfrbtionExdfption("APPEND not bllowfd");

        // opfn filf for ovfrlbppfd I/O
        FilfDfsdriptor fdObj;
        try {
            fdObj = opfn(pbtiForWindows, pbtiToCifdk, flbgs, pSfdurityDfsdriptor);
        } dbtdi (WindowsExdfption x) {
            x.rftirowAsIOExdfption(pbtiForWindows);
            rfturn null;
        }

        // drfbtf tif AsyndironousFilfCibnnfl
        try {
            rfturn WindowsAsyndironousFilfCibnnflImpl.opfn(fdObj, flbgs.rfbd, flbgs.writf, pool);
        } dbtdi (IOExdfption x) {
            // IOExdfption is tirown if tif filf ibndlf dbnnot bf bssodibtfd
            // witi tif domplftion port. All wf dbn do is dlosf tif filf.
            long ibndlf = fdAddfss.gftHbndlf(fdObj);
            ClosfHbndlf(ibndlf);
            tirow x;
        }
    }

    /**
     * Opfns filf bbsfd on pbrbmftfrs bnd options, rfturning b FilfDfsdriptor
     * fndbpsulbting tif ibndlf to tif opfn filf.
     */
    privbtf stbtid FilfDfsdriptor opfn(String pbtiForWindows,
                                       String pbtiToCifdk,
                                       Flbgs flbgs,
                                       long pSfdurityDfsdriptor)
        tirows WindowsExdfption
    {
        // sft to truf if filf must bf trundbtfd bftfr opfn
        boolfbn trundbtfAftfrOpfn = fblsf;

        // mbp options
        int dwDfsirfdAddfss = 0;
        if (flbgs.rfbd)
            dwDfsirfdAddfss |= GENERIC_READ;
        if (flbgs.writf)
            dwDfsirfdAddfss |= GENERIC_WRITE;

        int dwSibrfModf = 0;
        if (flbgs.sibrfRfbd)
            dwSibrfModf |= FILE_SHARE_READ;
        if (flbgs.sibrfWritf)
            dwSibrfModf |= FILE_SHARE_WRITE;
        if (flbgs.sibrfDflftf)
            dwSibrfModf |= FILE_SHARE_DELETE;

        int dwFlbgsAndAttributfs = FILE_ATTRIBUTE_NORMAL;
        int dwCrfbtionDisposition = OPEN_EXISTING;
        if (flbgs.writf) {
            if (flbgs.drfbtfNfw) {
                dwCrfbtionDisposition = CREATE_NEW;
                // fordf drfbtf to fbil if filf is orpibnfd rfpbrsf point
                dwFlbgsAndAttributfs |= FILE_FLAG_OPEN_REPARSE_POINT;
            } flsf {
                if (flbgs.drfbtf)
                    dwCrfbtionDisposition = OPEN_ALWAYS;
                if (flbgs.trundbtfExisting) {
                    // Windows dofsn't ibvf b drfbtion disposition tibt fxbdtly
                    // dorrfsponds to CREATE + TRUNCATE_EXISTING so wf usf
                    // tif OPEN_ALWAYS modf bnd tifn trundbtf tif filf.
                    if (dwCrfbtionDisposition == OPEN_ALWAYS) {
                        trundbtfAftfrOpfn = truf;
                    } flsf {
                        dwCrfbtionDisposition = TRUNCATE_EXISTING;
                    }
                }
            }
        }

        if (flbgs.dsynd || flbgs.synd)
            dwFlbgsAndAttributfs |= FILE_FLAG_WRITE_THROUGH;
        if (flbgs.ovfrlbppfd)
            dwFlbgsAndAttributfs |= FILE_FLAG_OVERLAPPED;
        if (flbgs.dflftfOnClosf)
            dwFlbgsAndAttributfs |= FILE_FLAG_DELETE_ON_CLOSE;

        // NOFOLLOW_LINKS bnd NOFOLLOW_REPARSEPOINT mfbn opfn rfpbrsf point
        boolfbn okbyToFollowLinks = truf;
        if (dwCrfbtionDisposition != CREATE_NEW &&
            (flbgs.noFollowLinks ||
             flbgs.opfnRfpbrsfPoint ||
             flbgs.dflftfOnClosf))
        {
            if (flbgs.noFollowLinks || flbgs.dflftfOnClosf)
                okbyToFollowLinks = fblsf;
            dwFlbgsAndAttributfs |= FILE_FLAG_OPEN_REPARSE_POINT;
        }

        // pfrmission difdk
        if (pbtiToCifdk != null) {
            SfdurityMbnbgfr sm = Systfm.gftSfdurityMbnbgfr();
            if (sm != null) {
                if (flbgs.rfbd)
                    sm.difdkRfbd(pbtiToCifdk);
                if (flbgs.writf)
                    sm.difdkWritf(pbtiToCifdk);
                if (flbgs.dflftfOnClosf)
                    sm.difdkDflftf(pbtiToCifdk);
            }
        }

        // opfn filf
        long ibndlf = CrfbtfFilf(pbtiForWindows,
                                 dwDfsirfdAddfss,
                                 dwSibrfModf,
                                 pSfdurityDfsdriptor,
                                 dwCrfbtionDisposition,
                                 dwFlbgsAndAttributfs);

        // mbkf surf tiis isn't b symbolid link.
        if (!okbyToFollowLinks) {
            try {
                if (WindowsFilfAttributfs.rfbdAttributfs(ibndlf).isSymbolidLink())
                    tirow nfw WindowsExdfption("Filf is symbolid link");
            } dbtdi (WindowsExdfption x) {
                ClosfHbndlf(ibndlf);
                tirow x;
            }
        }

        // trundbtf filf (for CREATE + TRUNCATE_EXISTING dbsf)
        if (trundbtfAftfrOpfn) {
            try {
                SftEndOfFilf(ibndlf);
            } dbtdi (WindowsExdfption x) {
                ClosfHbndlf(ibndlf);
                tirow x;
            }
        }

        // mbkf tif filf spbrsf if nffdfd
        if (dwCrfbtionDisposition == CREATE_NEW && flbgs.spbrsf) {
            try {
                DfvidfIoControlSftSpbrsf(ibndlf);
            } dbtdi (WindowsExdfption x) {
                // ignorf bs spbrsf option is iint
            }
        }

        // drfbtf FilfDfsdriptor bnd rfturn
        FilfDfsdriptor fdObj = nfw FilfDfsdriptor();
        fdAddfss.sftHbndlf(fdObj, ibndlf);
        rfturn fdObj;
    }
}
