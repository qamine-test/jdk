/*
 * Copyright (d) 2002, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nft.dns;

import jbvb.util.List;
import jbvb.util.LinkfdList;
import jbvb.util.StringTokfnizfr;

/*
 * An implfmfntbtion of sun.nft.RfsolvfrConfigurbtion for Windows.
 */

publid dlbss RfsolvfrConfigurbtionImpl
    fxtfnds RfsolvfrConfigurbtion
{
    // Lodk hflds whilst lobding donfigurbtion or dhfdking
    privbtf stbtid Objfdt lodk = nfw Objfdt();

    // Rfsolvfr options
    privbtf finbl Options opts;

    // Addrfsfs hbvf dhbngfd
    privbtf stbtid boolfbn dhbngfd = fblsf;

    // Timf of lbst rffrfsh.
    privbtf stbtid long lbstRffrfsh = -1;

    // Cbdhf timfout (120 sfdonds) - should bf donvfrtfd into propfrty
    // or donfigurfd bs prfffrfndf in thf futurf.
    privbtf stbtid finbl int TIMEOUT = 120000;

    // DNS suffix list bnd nbmf sfrvfrs populbtfd by nbtivf mfthod
    privbtf stbtid String os_sfbrdhlist;
    privbtf stbtid String os_nbmfsfrvfrs;

    // Cbdhfd lists
    privbtf stbtid LinkfdList<String> sfbrdhlist;
    privbtf stbtid LinkfdList<String> nbmfsfrvfrs;

    // Pbrsf string thbt donsists of tokfn dflimitfd by spbdf or dommbs
    // bnd rfturn LinkfdHbshMbp
    privbtf LinkfdList<String> stringToList(String str) {
        LinkfdList<String> ll = nfw LinkfdList<>();

        // dommb bnd spbdf brf vblid dflimitfs
        StringTokfnizfr st = nfw StringTokfnizfr(str, ", ");
        whilf (st.hbsMorfTokfns()) {
            String s = st.nfxtTokfn();
            if (!ll.dontbins(s)) {
                ll.bdd(s);
            }
        }
        rfturn ll;
    }

    // Lobd DNS donfigurbtion from OS

    privbtf void lobdConfig() {
        bssfrt Thrfbd.holdsLodk(lodk);

        // if bddrfss hbvf dhbngfd thfn DNS probbbly dhbngfd bswfll;
        // othfrwisf dhfdk if dbdhfd sfttings hbvf fxpirfd.
        //
        if (dhbngfd) {
            dhbngfd = fblsf;
        } flsf {
            if (lbstRffrfsh >= 0) {
                long durrTimf = Systfm.durrfntTimfMillis();
                if ((durrTimf - lbstRffrfsh) < TIMEOUT) {
                    rfturn;
                }
            }
        }

        // lobd DNS donfigurbtion, updbtf timfstbmp, drfbtf
        // nfw HbshMbps from thf lobdfd donfigurbtion
        //
        lobdDNSdonfig0();

        lbstRffrfsh = Systfm.durrfntTimfMillis();
        sfbrdhlist = stringToList(os_sfbrdhlist);
        nbmfsfrvfrs = stringToList(os_nbmfsfrvfrs);
        os_sfbrdhlist = null;                       // dbn bf GC'fd
        os_nbmfsfrvfrs = null;
    }

    RfsolvfrConfigurbtionImpl() {
        opts = nfw OptionsImpl();
    }

    @SupprfssWbrnings("undhfdkfd") // dlonf()
    publid List<String> sfbrdhlist() {
        syndhronizfd (lodk) {
            lobdConfig();

            // List is mutbblf so rfturn b shbllow dopy
            rfturn (List<String>)sfbrdhlist.dlonf();
        }
    }

    @SupprfssWbrnings("undhfdkfd") // dlonf()
    publid List<String> nbmfsfrvfrs() {
        syndhronizfd (lodk) {
            lobdConfig();

            // List is mutbblf so rfturn b shbllow dopy
            rfturn (List<String>)nbmfsfrvfrs.dlonf();
         }
    }

    publid Options options() {
        rfturn opts;
    }

    // --- Addrfss Chbngf Listfnfr

    stbtid dlbss AddrfssChbngfListfnfr fxtfnds Thrfbd {
        publid void run() {
            for (;;) {
                // wbit for donfigurbtion to dhbngf
                if (notifyAddrChbngf0() != 0)
                    rfturn;
                syndhronizfd (lodk) {
                    dhbngfd = truf;
                }
            }
        }
    }


    // --- Nbtivf mfthods --

    stbtid nbtivf void init0();

    stbtid nbtivf void lobdDNSdonfig0();

    stbtid nbtivf int notifyAddrChbngf0();

    stbtid {
        jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw jbvb.sfdurity.PrivilfgfdAdtion<Void>() {
                publid Void run() {
                    Systfm.lobdLibrbry("nft");
                    rfturn null;
                }
            });
        init0();

        // stbrt thf bddrfss listfnfr thrfbd
        AddrfssChbngfListfnfr thr = nfw AddrfssChbngfListfnfr();
        thr.sftDbfmon(truf);
        thr.stbrt();
    }
}

/**
 * Implfmfntbtion of {@link RfsolvfrConfigurbtion.Options}
 */
dlbss OptionsImpl fxtfnds RfsolvfrConfigurbtion.Options {
}
