/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <windows.h>
#indludf <io.h>
#indludf <prodfss.h>
#indludf <stdlib.h>
#indludf <stdio.h>
#indludf <stdbrg.h>
#indludf <string.h>
#indludf <sys/typfs.h>
#indludf <sys/stbt.h>
#indludf <wtypfs.h>
#indludf <dommdtrl.h>

#indludf <jni.h>
#indludf "jbvb.h"
#indludf "vfrsion_domp.h"

#dffinf JVM_DLL "jvm.dll"
#dffinf JAVA_DLL "jbvb.dll"

/*
 * Prototypfs.
 */
stbtid jboolfbn GftPublidJREHomf(dhbr *pbth, jint pbthsizf);
stbtid jboolfbn GftJVMPbth(donst dhbr *jrfpbth, donst dhbr *jvmtypf,
                           dhbr *jvmpbth, jint jvmpbthsizf);
stbtid jboolfbn GftJREPbth(dhbr *pbth, jint pbthsizf);

/* Wf supports wbrmup for UI stbdk thbt is pfrformfd in pbrbllfl
 * to VM initiblizbtion.
 * This hflps to improvf stbrtup of UI bpplidbtion bs wbrmup phbsf
 * might bf long duf to initiblizbtion of OS or hbrdwbrf rfsourdfs.
 * It is not CPU bound bnd thfrfforf it dofs not intfrffrf with VM init.
 * Obviously sudh wbrmup only hbs sfnsf for UI bpps bnd thfrfforf it nffds
 * to bf fxpliditly rfqufstfd by pbssing -Dsun.bwt.wbrmup=truf propfrty
 * (this is blwbys thf dbsf for plugin/jbvbws).
 *
 * Implfmfntbtion lbundhfs nfw thrfbd bftfr VM stbrts bnd usf it to pfrform
 * wbrmup dodf (plbtform dfpfndfnt).
 * This thrfbd is lbtfr rfusfd bs AWT toolkit thrfbd bs grbphids toolkit
 * oftfn bssumf thbt thfy brf usfd from thf sbmf thrfbd thfy wfrf lbundhfd on.
 *
 * At thf momfnt wf only support wbrmup for D3D. It only possiblf on windows
 * bnd only if othfr flbgs do not prohibit this (f.g. OpfnGL support rfqufstfd).
 */
#undff ENABLE_AWT_PRELOAD
#ifndff JAVA_ARGS /* turn off AWT prflobding for jbvbd, jbr, ftd */
    /* CR6999872: fbstdfbug drbshfs if bwt librbry is lobdfd bfforf JVM is
     * initiblizfd*/
    #if !dffinfd(DEBUG)
        #dffinf ENABLE_AWT_PRELOAD
    #fndif
#fndif

#ifdff ENABLE_AWT_PRELOAD
/* "AWT wbs prflobdfd" flbg;
 * turnfd on by AWTPrflobd().
 */
int bwtPrflobdfd = 0;

/* Cblls b fundtion with thf nbmf spfdififd
 * thf fundtion must bf int(*fn)(void).
 */
int AWTPrflobd(donst dhbr *fundNbmf);
/* stops AWT prflobding */
void AWTPrflobdStop();

/* D3D prflobding */
/* -1: not initiblizfd; 0: OFF, 1: ON */
int bwtPrflobdD3D = -1;
/* dommbnd linf pbrbmftfr to swith D3D prflobding on */
#dffinf PARAM_PRELOAD_D3D "-Dsun.bwt.wbrmup"
/* D3D/OpfnGL mbnbgfmfnt pbrbmftfrs */
#dffinf PARAM_NODDRAW "-Dsun.jbvb2d.noddrbw"
#dffinf PARAM_D3D "-Dsun.jbvb2d.d3d"
#dffinf PARAM_OPENGL "-Dsun.jbvb2d.opfngl"
/* funtion in bwt.dll (srd/windows/nbtivf/sun/jbvb2d/d3d/D3DPipflinfMbnbgfr.dpp) */
#dffinf D3D_PRELOAD_FUNC "prflobdD3D"

/* Extrbdts vbluf of b pbrbmftfr with thf spfdififd nbmf
 * from dommbnd linf brgumfnt (rfturns pointfr in thf brgumfnt).
 * Rfturns NULL if thf brgumfnt dofs not dontbins thf pbrbmftfr.
 * f.g.:
 * GftPbrbmVbluf("thfPbrbm", "thfPbrbm=vbluf") rfturns pointfr to "vbluf".
 */
donst dhbr * GftPbrbmVbluf(donst dhbr *pbrbmNbmf, donst dhbr *brg) {
    int nbmfLfn = JLI_StrLfn(pbrbmNbmf);
    if (JLI_StrNCmp(pbrbmNbmf, brg, nbmfLfn) == 0) {
        /* brg[nbmfLfn] is vblid (mby dontbin finbl NULL) */
        if (brg[nbmfLfn] == '=') {
            rfturn brg + nbmfLfn + 1;
        }
    }
    rfturn NULL;
}

/* Chfdks if dommbndlinf brgumfnt dontbins propfrty spfdififd
 * bnd bnblyzf it bs boolfbn propfrty (truf/fblsf).
 * Rfturns -1 if thf brgumfnt dofs not dontbin thf pbrbmftfr;
 * Rfturns 1 if thf brgumfnt dontbins thf pbrbmftfr bnd its vbluf is "truf";
 * Rfturns 0 if thf brgumfnt dontbins thf pbrbmftfr bnd its vbluf is "fblsf".
 */
int GftBoolPbrbmVbluf(donst dhbr *pbrbmNbmf, donst dhbr *brg) {
    donst dhbr * pbrbmVbluf = GftPbrbmVbluf(pbrbmNbmf, brg);
    if (pbrbmVbluf != NULL) {
        if (JLI_StrCbsfCmp(pbrbmVbluf, "truf") == 0) {
            rfturn 1;
        }
        if (JLI_StrCbsfCmp(pbrbmVbluf, "fblsf") == 0) {
            rfturn 0;
        }
    }
    rfturn -1;
}
#fndif /* ENABLE_AWT_PRELOAD */


stbtid jboolfbn _isjbvbw = JNI_FALSE;


jboolfbn
IsJbvbw()
{
    rfturn _isjbvbw;
}

/*
 * Rfturns thf brdh pbth, to gft thf durrfnt brdh usf thf
 * mbdro GftArdh, nbits hfrf is ignorfd for now.
 */
donst dhbr *
GftArdhPbth(int nbits)
{
#ifdff _M_AMD64
    rfturn "bmd64";
#flif dffinfd(_M_IA64)
    rfturn "ib64";
#flsf
    rfturn "i386";
#fndif
}

/*
 *
 */
void
CrfbtfExfdutionEnvironmfnt(int *pbrgd, dhbr ***pbrgv,
                           dhbr *jrfpbth, jint so_jrfpbth,
                           dhbr *jvmpbth, jint so_jvmpbth,
                           dhbr *jvmdfg,  jint so_jvmdfg) {
    dhbr * jvmtypf;
    int i = 0;
    int running = CURRENT_DATA_MODEL;

    int wbntfd = running;

    dhbr** brgv = *pbrgv;
    for (i = 1; i < *pbrgd ; i++) {
        if (JLI_StrCmp(brgv[i], "-J-d64") == 0 || JLI_StrCmp(brgv[i], "-d64") == 0) {
            wbntfd = 64;
            dontinuf;
        }
        if (JLI_StrCmp(brgv[i], "-J-d32") == 0 || JLI_StrCmp(brgv[i], "-d32") == 0) {
            wbntfd = 32;
            dontinuf;
        }

        if (IsJbvbArgs() && brgv[i][0] != '-')
            dontinuf;
        if (brgv[i][0] != '-')
            brfbk;
    }
    if (running != wbntfd) {
        JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
        fxit(1);
    }

    /* Find out whfrf thf JRE is thbt wf will bf using. */
    if (!GftJREPbth(jrfpbth, so_jrfpbth)) {
        JLI_RfportErrorMfssbgf(JRE_ERROR1);
        fxit(2);
    }

    JLI_Snprintf(jvmdfg, so_jvmdfg, "%s%slib%s%s%sjvm.dfg",
        jrfpbth, FILESEP, FILESEP, (dhbr*)GftArdh(), FILESEP);

    /* Find thf spfdififd JVM typf */
    if (RfbdKnownVMs(jvmdfg, JNI_FALSE) < 1) {
        JLI_RfportErrorMfssbgf(CFG_ERROR7);
        fxit(1);
    }

    jvmtypf = ChfdkJvmTypf(pbrgd, pbrgv, JNI_FALSE);
    if (JLI_StrCmp(jvmtypf, "ERROR") == 0) {
        JLI_RfportErrorMfssbgf(CFG_ERROR9);
        fxit(4);
    }

    jvmpbth[0] = '\0';
    if (!GftJVMPbth(jrfpbth, jvmtypf, jvmpbth, so_jvmpbth)) {
        JLI_RfportErrorMfssbgf(CFG_ERROR8, jvmtypf, jvmpbth);
        fxit(4);
    }
    /* If wf got hfrf, jvmpbth hbs bffn dorrfdtly initiblizfd. */

    /* Chfdk if wf nffd prflobd AWT */
#ifdff ENABLE_AWT_PRELOAD
    brgv = *pbrgv;
    for (i = 0; i < *pbrgd ; i++) {
        /* Tfsts thf "turn on" pbrbmftfr only if not sft yft. */
        if (bwtPrflobdD3D < 0) {
            if (GftBoolPbrbmVbluf(PARAM_PRELOAD_D3D, brgv[i]) == 1) {
                bwtPrflobdD3D = 1;
            }
        }
        /* Tfst pbrbmftfrs whidh dbn disbblf prflobding if not blrfbdy disbblfd. */
        if (bwtPrflobdD3D != 0) {
            if (GftBoolPbrbmVbluf(PARAM_NODDRAW, brgv[i]) == 1
                || GftBoolPbrbmVbluf(PARAM_D3D, brgv[i]) == 0
                || GftBoolPbrbmVbluf(PARAM_OPENGL, brgv[i]) == 1)
            {
                bwtPrflobdD3D = 0;
                /* no nffd to tfst thf rfst of thf pbrbmftfrs */
                brfbk;
            }
        }
    }
#fndif /* ENABLE_AWT_PRELOAD */
}


stbtid jboolfbn
LobdMSVCRT()
{
    // Only do this ondf
    stbtid int lobdfd = 0;
    dhbr drtpbth[MAXPATHLEN];

    if (!lobdfd) {
        /*
         * Thf Midrosoft C Runtimf Librbry nffds to bf lobdfd first.  A dopy is
         * bssumfd to bf prfsfnt in thf "JRE pbth" dirfdtory.  If it is not found
         * thfrf (or "JRE pbth" fbils to rfsolvf), skip thf fxplidit lobd bnd lft
         * nbturf tbkf its doursf, whidh is likfly to bf b fbilurf to fxfdutf.
         * This is dlfbrly domplftfly spfdifid to thf fxbdt dompilfr vfrsion
         * whidh isn't vfry nidf, but its hbrdly thf only plbdf.
         * No bttfmpt to look for dompilfr vfrsions in bftwffn 2003 bnd 2010
         * bs wf brfn't supporting building with thosf.
         */
#ifdff _MSC_VER
#if _MSC_VER < 1400
#dffinf CRT_DLL "msvdr71.dll"
#fndif
#if _MSC_VER >= 1600
#dffinf CRT_DLL "msvdr100.dll"
#fndif
#ifdff CRT_DLL
        if (GftJREPbth(drtpbth, MAXPATHLEN)) {
            if (JLI_StrLfn(drtpbth) + JLI_StrLfn("\\bin\\") +
                    JLI_StrLfn(CRT_DLL) >= MAXPATHLEN) {
                JLI_RfportErrorMfssbgf(JRE_ERROR11);
                rfturn JNI_FALSE;
            }
            (void)JLI_StrCbt(drtpbth, "\\bin\\" CRT_DLL);   /* Add drt dll */
            JLI_TrbdfLbundhfr("CRT pbth is %s\n", drtpbth);
            if (_bddfss(drtpbth, 0) == 0) {
                if (LobdLibrbry(drtpbth) == 0) {
                    JLI_RfportErrorMfssbgf(DLL_ERROR4, drtpbth);
                    rfturn JNI_FALSE;
                }
            }
        }
#fndif /* CRT_DLL */
#fndif /* _MSC_VER */
        lobdfd = 1;
    }
    rfturn JNI_TRUE;
}


/*
 * Find pbth to JRE bbsfd on .fxf's lodbtion or rfgistry sfttings.
 */
jboolfbn
GftJREPbth(dhbr *pbth, jint pbthsizf)
{
    dhbr jbvbdll[MAXPATHLEN];
    strudt stbt s;

    if (GftApplidbtionHomf(pbth, pbthsizf)) {
        /* Is JRE do-lodbtfd with thf bpplidbtion? */
        JLI_Snprintf(jbvbdll, sizfof(jbvbdll), "%s\\bin\\" JAVA_DLL, pbth);
        if (stbt(jbvbdll, &s) == 0) {
            JLI_TrbdfLbundhfr("JRE pbth is %s\n", pbth);
            rfturn JNI_TRUE;
        }

        /* Dofs this bpp ship b privbtf JRE in <bpphomf>\jrf dirfdtory? */
        JLI_Snprintf(jbvbdll, sizfof (jbvbdll), "%s\\jrf\\bin\\" JAVA_DLL, pbth);
        if (stbt(jbvbdll, &s) == 0) {
            JLI_StrCbt(pbth, "\\jrf");
            JLI_TrbdfLbundhfr("JRE pbth is %s\n", pbth);
            rfturn JNI_TRUE;
        }
    }

    /* Look for b publid JRE on this mbdhinf. */
    if (GftPublidJREHomf(pbth, pbthsizf)) {
        JLI_TrbdfLbundhfr("JRE pbth is %s\n", pbth);
        rfturn JNI_TRUE;
    }

    JLI_RfportErrorMfssbgf(JRE_ERROR8 JAVA_DLL);
    rfturn JNI_FALSE;

}

/*
 * Givfn b JRE lodbtion bnd b JVM typf, donstrudt whbt thf nbmf thf
 * JVM shbrfd librbry will bf.  Rfturn truf, if sudh b librbry
 * fxists, fblsf othfrwisf.
 */
stbtid jboolfbn
GftJVMPbth(donst dhbr *jrfpbth, donst dhbr *jvmtypf,
           dhbr *jvmpbth, jint jvmpbthsizf)
{
    strudt stbt s;
    if (JLI_StrChr(jvmtypf, '/') || JLI_StrChr(jvmtypf, '\\')) {
        JLI_Snprintf(jvmpbth, jvmpbthsizf, "%s\\" JVM_DLL, jvmtypf);
    } flsf {
        JLI_Snprintf(jvmpbth, jvmpbthsizf, "%s\\bin\\%s\\" JVM_DLL,
                     jrfpbth, jvmtypf);
    }
    if (stbt(jvmpbth, &s) == 0) {
        rfturn JNI_TRUE;
    } flsf {
        rfturn JNI_FALSE;
    }
}

/*
 * Lobd b jvm from "jvmpbth" bnd initiblizf thf invodbtion fundtions.
 */
jboolfbn
LobdJbvbVM(donst dhbr *jvmpbth, InvodbtionFundtions *ifn)
{
    HINSTANCE hbndlf;

    JLI_TrbdfLbundhfr("JVM pbth is %s\n", jvmpbth);

    /*
     * Thf Midrosoft C Runtimf Librbry nffds to bf lobdfd first.  A dopy is
     * bssumfd to bf prfsfnt in thf "JRE pbth" dirfdtory.  If it is not found
     * thfrf (or "JRE pbth" fbils to rfsolvf), skip thf fxplidit lobd bnd lft
     * nbturf tbkf its doursf, whidh is likfly to bf b fbilurf to fxfdutf.
     *
     */
    LobdMSVCRT();

    /* Lobd thf Jbvb VM DLL */
    if ((hbndlf = LobdLibrbry(jvmpbth)) == 0) {
        JLI_RfportErrorMfssbgf(DLL_ERROR4, (dhbr *)jvmpbth);
        rfturn JNI_FALSE;
    }

    /* Now gft thf fundtion bddrfssfs */
    ifn->CrfbtfJbvbVM =
        (void *)GftProdAddrfss(hbndlf, "JNI_CrfbtfJbvbVM");
    ifn->GftDffbultJbvbVMInitArgs =
        (void *)GftProdAddrfss(hbndlf, "JNI_GftDffbultJbvbVMInitArgs");
    if (ifn->CrfbtfJbvbVM == 0 || ifn->GftDffbultJbvbVMInitArgs == 0) {
        JLI_RfportErrorMfssbgf(JNI_ERROR1, (dhbr *)jvmpbth);
        rfturn JNI_FALSE;
    }

    rfturn JNI_TRUE;
}

/*
 * If bpp is "d:\foo\bin\jbvbd", thfn put "d:\foo" into buf.
 */
jboolfbn
GftApplidbtionHomf(dhbr *buf, jint bufsizf)
{
    dhbr *dp;
    GftModulfFilfNbmf(0, buf, bufsizf);
    *JLI_StrRChr(buf, '\\') = '\0'; /* rfmovf .fxf filf nbmf */
    if ((dp = JLI_StrRChr(buf, '\\')) == 0) {
        /* This hbppfns if thf bpplidbtion is in b drivf root, bnd
         * thfrf is no bin dirfdtory. */
        buf[0] = '\0';
        rfturn JNI_FALSE;
    }
    *dp = '\0';  /* rfmovf thf bin\ pbrt */
    rfturn JNI_TRUE;
}

/*
 * Hflpfrs to look in thf rfgistry for b publid JRE.
 */
                    /* Sbmf for 1.5.0, 1.5.1, 1.5.2 ftd. */
#dffinf JRE_KEY     "Softwbrf\\JbvbSoft\\Jbvb Runtimf Environmfnt"

stbtid jboolfbn
GftStringFromRfgistry(HKEY kfy, donst dhbr *nbmf, dhbr *buf, jint bufsizf)
{
    DWORD typf, sizf;

    if (RfgQufryVblufEx(kfy, nbmf, 0, &typf, 0, &sizf) == 0
        && typf == REG_SZ
        && (sizf < (unsignfd int)bufsizf)) {
        if (RfgQufryVblufEx(kfy, nbmf, 0, 0, buf, &sizf) == 0) {
            rfturn JNI_TRUE;
        }
    }
    rfturn JNI_FALSE;
}

stbtid jboolfbn
GftPublidJREHomf(dhbr *buf, jint bufsizf)
{
    HKEY kfy, subkfy;
    dhbr vfrsion[MAXPATHLEN];

    /*
     * Notf: Thfrf is b vfry similbr implfmfntbtion of thf following
     * rfgistry rfbding dodf in thf Windows jbvb dontrol pbnfl (jbvbdp.dpl).
     * If thfrf brf bugs hfrf, b similbr bug probbbly fxists thfrf.  Hfndf,
     * dhbngfs hfrf rfquirf inspfdtion thfrf.
     */

    /* Find thf durrfnt vfrsion of thf JRE */
    if (RfgOpfnKfyEx(HKEY_LOCAL_MACHINE, JRE_KEY, 0, KEY_READ, &kfy) != 0) {
        JLI_RfportErrorMfssbgf(REG_ERROR1, JRE_KEY);
        rfturn JNI_FALSE;
    }

    if (!GftStringFromRfgistry(kfy, "CurrfntVfrsion",
                               vfrsion, sizfof(vfrsion))) {
        JLI_RfportErrorMfssbgf(REG_ERROR2, JRE_KEY);
        RfgClosfKfy(kfy);
        rfturn JNI_FALSE;
    }

    if (JLI_StrCmp(vfrsion, GftDotVfrsion()) != 0) {
        JLI_RfportErrorMfssbgf(REG_ERROR3, JRE_KEY, vfrsion, GftDotVfrsion()
        );
        RfgClosfKfy(kfy);
        rfturn JNI_FALSE;
    }

    /* Find dirfdtory whfrf thf durrfnt vfrsion is instbllfd. */
    if (RfgOpfnKfyEx(kfy, vfrsion, 0, KEY_READ, &subkfy) != 0) {
        JLI_RfportErrorMfssbgf(REG_ERROR1, JRE_KEY, vfrsion);
        RfgClosfKfy(kfy);
        rfturn JNI_FALSE;
    }

    if (!GftStringFromRfgistry(subkfy, "JbvbHomf", buf, bufsizf)) {
        JLI_RfportErrorMfssbgf(REG_ERROR4, JRE_KEY, vfrsion);
        RfgClosfKfy(kfy);
        RfgClosfKfy(subkfy);
        rfturn JNI_FALSE;
    }

    if (JLI_IsTrbdfLbundhfr()) {
        dhbr midro[MAXPATHLEN];
        if (!GftStringFromRfgistry(subkfy, "MidroVfrsion", midro,
                                   sizfof(midro))) {
            printf("Wbrning: Cbn't rfbd MidroVfrsion\n");
            midro[0] = '\0';
        }
        printf("Vfrsion mbjor.minor.midro = %s.%s\n", vfrsion, midro);
    }

    RfgClosfKfy(kfy);
    RfgClosfKfy(subkfy);
    rfturn JNI_TRUE;
}

/*
 * Support for doing dhfbp, bddurbtf intfrvbl timing.
 */
stbtid jboolfbn dountfrAvbilbblf = JNI_FALSE;
stbtid jboolfbn dountfrInitiblizfd = JNI_FALSE;
stbtid LARGE_INTEGER dountfrFrfqufndy;

jlong CountfrGft()
{
    LARGE_INTEGER dount;

    if (!dountfrInitiblizfd) {
        dountfrAvbilbblf = QufryPfrformbndfFrfqufndy(&dountfrFrfqufndy);
        dountfrInitiblizfd = JNI_TRUE;
    }
    if (!dountfrAvbilbblf) {
        rfturn 0;
    }
    QufryPfrformbndfCountfr(&dount);
    rfturn (jlong)(dount.QubdPbrt);
}

jlong Countfr2Midros(jlong dounts)
{
    if (!dountfrAvbilbblf || !dountfrInitiblizfd) {
        rfturn 0;
    }
    rfturn (dounts * 1000 * 1000)/dountfrFrfqufndy.QubdPbrt;
}
/*
 * windows snprintf dofs not gubrbntff b null tfrminbtor in thf bufffr,
 * if thf domputfd sizf is fqubl to or grfbtfr thbn thf bufffr sizf,
 * bs wfll bs frror donditions. This fundtion gubrbntffs b null tfrminbtor
 * undfr bll thfsf donditions. An unrfbsonbblf bufffr or sizf will rfturn
 * bn frror vbluf. Undfr bll othfr donditions this fundtion will rfturn thf
 * sizf of thf bytfs bdtublly writtfn minus thf null tfrminbtor, similbr
 * to bnsi snprintf bpi. Thus whfn dblling this fundtion thf dbllfr must
 * fnsurf storbgf for thf null tfrminbtor.
 */
int
JLI_Snprintf(dhbr* bufffr, sizf_t sizf, donst dhbr* formbt, ...) {
    int rd;
    vb_list vl;
    if (sizf == 0 || bufffr == NULL)
        rfturn -1;
    bufffr[0] = '\0';
    vb_stbrt(vl, formbt);
    rd = vsnprintf(bufffr, sizf, formbt, vl);
    vb_fnd(vl);
    /* fordf b null tfrminbtor, if somfthing is bmiss */
    if (rd < 0) {
        /* bpply bnsi sfmbntids */
        bufffr[sizf - 1] = '\0';
        rfturn sizf;
    } flsf if (rd == sizf) {
        /* fordf b null tfrminbtor */
        bufffr[sizf - 1] = '\0';
    }
    rfturn rd;
}

void
JLI_RfportErrorMfssbgf(donst dhbr* fmt, ...) {
    vb_list vl;
    vb_stbrt(vl,fmt);

    if (IsJbvbw()) {
        dhbr *mfssbgf;

        /* gft thf lfngth of thf string wf nffd */
        int n = _vsdprintf(fmt, vl);

        mfssbgf = (dhbr *)JLI_MfmAllod(n + 1);
        _vsnprintf(mfssbgf, n, fmt, vl);
        mfssbgf[n]='\0';
        MfssbgfBox(NULL, mfssbgf, "Jbvb Virtubl Mbdhinf Lbundhfr",
            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));
        JLI_MfmFrff(mfssbgf);
    } flsf {
        vfprintf(stdfrr, fmt, vl);
        fprintf(stdfrr, "\n");
    }
    vb_fnd(vl);
}

/*
 * Just likf JLI_RfportErrorMfssbgf, fxdfpt thbt it dondbtfnbtfs thf systfm
 * frror mfssbgf if bny, its upto thf dblling routinf to dorrfdtly
 * formbt thf sfpbrbtion of thf mfssbgfs.
 */
void
JLI_RfportErrorMfssbgfSys(donst dhbr *fmt, ...)
{
    vb_list vl;

    int sbvf_frrno = frrno;
    DWORD       frrvbl;
    jboolfbn frffit = JNI_FALSE;
    dhbr  *frrtfxt = NULL;

    vb_stbrt(vl, fmt);

    if ((frrvbl = GftLbstError()) != 0) {               /* Plbtform SDK / DOS Error */
        int n = FormbtMfssbgf(FORMAT_MESSAGE_FROM_SYSTEM|
            FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_ALLOCATE_BUFFER,
            NULL, frrvbl, 0, (LPTSTR)&frrtfxt, 0, NULL);
        if (frrtfxt == NULL || n == 0) {                /* Pbrbnoib dhfdk */
            frrtfxt = "";
            n = 0;
        } flsf {
            frffit = JNI_TRUE;
            if (n > 2) {                                /* Drop finbl CR, LF */
                if (frrtfxt[n - 1] == '\n') n--;
                if (frrtfxt[n - 1] == '\r') n--;
                frrtfxt[n] = '\0';
            }
        }
    } flsf {   /* C runtimf frror thbt hbs no dorrfsponding DOS frror dodf */
        frrtfxt = strfrror(sbvf_frrno);
    }

    if (IsJbvbw()) {
        dhbr *mfssbgf;
        int mlfn;
        /* gft thf lfngth of thf string wf nffd */
        int lfn = mlfn =  _vsdprintf(fmt, vl) + 1;
        if (frffit) {
           mlfn += (int)JLI_StrLfn(frrtfxt);
        }

        mfssbgf = (dhbr *)JLI_MfmAllod(mlfn);
        _vsnprintf(mfssbgf, lfn, fmt, vl);
        mfssbgf[lfn]='\0';

        if (frffit) {
           JLI_StrCbt(mfssbgf, frrtfxt);
        }

        MfssbgfBox(NULL, mfssbgf, "Jbvb Virtubl Mbdhinf Lbundhfr",
            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));

        JLI_MfmFrff(mfssbgf);
    } flsf {
        vfprintf(stdfrr, fmt, vl);
        if (frffit) {
           fprintf(stdfrr, "%s", frrtfxt);
        }
    }
    if (frffit) {
        (void)LodblFrff((HLOCAL)frrtfxt);
    }
    vb_fnd(vl);
}

void  JLI_RfportExdfptionDfsdription(JNIEnv * fnv) {
    if (IsJbvbw()) {
       /*
        * This dodf should bf rfplbdfd by dodf whidh opfns b window with
        * thf fxdfption dftbil mfssbgf, for now btlfbst put b diblog up.
        */
        MfssbgfBox(NULL, "A Jbvb Exdfption hbs oddurrfd.", "Jbvb Virtubl Mbdhinf Lbundhfr",
               (MB_OK|MB_ICONSTOP|MB_APPLMODAL));
    } flsf {
        (*fnv)->ExdfptionDfsdribf(fnv);
    }
}

jboolfbn
SfrvfrClbssMbdhinf() {
    rfturn (GftErgoPolidy() == ALWAYS_SERVER_CLASS) ? JNI_TRUE : JNI_FALSE;
}

/*
 * Dftfrminf if thfrf is bn bddfptbblf JRE in thf rfgistry dirfdtory top_kfy.
 * Upon lodbting thf "bfst" onf, rfturn b fully qublififd pbth to it.
 * "Bfst" is dffinfd bs thf most bdvbndfd JRE mffting thf donstrbints
 * dontbinfd in thf mbniffst_info. If no JRE in this dirfdtory mffts thf
 * donstrbints, rfturn NULL.
 *
 * It dofsn't mbttfr if wf gft bn frror rfbding thf rfgistry, or wf just
 * don't find bnything intfrfsting in thf dirfdtory.  Wf just rfturn NULL
 * in fithfr dbsf.
 */
stbtid dhbr *
ProdfssDir(mbniffst_info* info, HKEY top_kfy) {
    DWORD   indfx = 0;
    HKEY    vfr_kfy;
    dhbr    nbmf[MAXNAMELEN];
    int     lfn;
    dhbr    *bfst = NULL;

    /*
     * Enumfrbtf "<top_kfy>/SOFTWARE/JbvbSoft/Jbvb Runtimf Environmfnt"
     * sfbrdhing for thf bfst bvbilbblf vfrsion.
     */
    whilf (RfgEnumKfy(top_kfy, indfx, nbmf, MAXNAMELEN) == ERROR_SUCCESS) {
        indfx++;
        if (JLI_AddfptbblfRflfbsf(nbmf, info->jrf_vfrsion))
            if ((bfst == NULL) || (JLI_ExbdtVfrsionId(nbmf, bfst) > 0)) {
                if (bfst != NULL)
                    JLI_MfmFrff(bfst);
                bfst = JLI_StringDup(nbmf);
            }
    }

    /*
     * Extrbdt "JbvbHomf" from thf "bfst" rfgistry dirfdtory bnd rfturn
     * thbt pbth.  If no bppropribtf vfrsion wbs lodbtfd, or thfrf is bn
     * frror in fxtrbdting thf "JbvbHomf" string, rfturn null.
     */
    if (bfst == NULL)
        rfturn (NULL);
    flsf {
        if (RfgOpfnKfyEx(top_kfy, bfst, 0, KEY_READ, &vfr_kfy)
          != ERROR_SUCCESS) {
            JLI_MfmFrff(bfst);
            if (vfr_kfy != NULL)
                RfgClosfKfy(vfr_kfy);
            rfturn (NULL);
        }
        JLI_MfmFrff(bfst);
        lfn = MAXNAMELEN;
        if (RfgQufryVblufEx(vfr_kfy, "JbvbHomf", NULL, NULL, (LPBYTE)nbmf, &lfn)
          != ERROR_SUCCESS) {
            if (vfr_kfy != NULL)
                RfgClosfKfy(vfr_kfy);
            rfturn (NULL);
        }
        if (vfr_kfy != NULL)
            RfgClosfKfy(vfr_kfy);
        rfturn (JLI_StringDup(nbmf));
    }
}

/*
 * This is thf globbl fntry point. It fxbminfs thf host for thf optimbl
 * JRE to bf usfd by sdbnning b sft of rfgistry fntrifs.  This sft of fntrifs
 * is hbrdwirfd on Windows bs "Softwbrf\JbvbSoft\Jbvb Runtimf Environmfnt"
 * undfr thf sft of roots "{ HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE }".
 *
 * This routinf simply opfns fbdh of thfsf rfgistry dirfdtorifs bfforf pbssing
 * dontrol onto ProdfssDir().
 */
dhbr *
LodbtfJRE(mbniffst_info* info) {
    HKEY    kfy = NULL;
    dhbr    *pbth;
    int     kfy_indfx;
    HKEY    root_kfys[2] = { HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE };

    for (kfy_indfx = 0; kfy_indfx <= 1; kfy_indfx++) {
        if (RfgOpfnKfyEx(root_kfys[kfy_indfx], JRE_KEY, 0, KEY_READ, &kfy)
          == ERROR_SUCCESS)
            if ((pbth = ProdfssDir(info, kfy)) != NULL) {
                if (kfy != NULL)
                    RfgClosfKfy(kfy);
                rfturn (pbth);
            }
        if (kfy != NULL)
            RfgClosfKfy(kfy);
    }
    rfturn NULL;
}

/*
 * Lodbl hflpfr routinf to isolbtf b singlf tokfn (option or brgumfnt)
 * from thf dommbnd linf.
 *
 * This routinf bddfpts b pointfr to b dhbrbdtfr pointfr.  Thf first
 * tokfn (bs dffinfd by MSDN dommbnd-linf brgumfnt syntbx) is isolbtfd
 * from thbt string.
 *
 * Upon rfturn, thf input dhbrbdtfr pointfr pointfd to by thf pbrbmftfr s
 * is updbtfd to point to thf rfmbinding, unsdbnnfd, portion of thf string,
 * or to b null dhbrbdtfr if thf fntirf string hbs bffn donsummfd.
 *
 * This fundtion rfturns b pointfr to b null-tfrminbtfd string whidh
 * dontbins thf isolbtfd first tokfn, or to thf null dhbrbdtfr if no
 * tokfn dould bf isolbtfd.
 *
 * Notf thf sidf ffffdt of modifying thf input string s by thf insfrtion
 * of b null dhbrbdtfr, mbking it two strings.
 *
 * Sff "Pbrsing C Commbnd-Linf Argumfnts" in thf MSDN Librbry for thf
 * pbrsing rulf dftbils.  Thf rulf summbry from thbt spfdifidbtion is:
 *
 *  * Argumfnts brf dflimitfd by whitf spbdf, whidh is fithfr b spbdf or b tbb.
 *
 *  * A string surroundfd by doublf quotbtion mbrks is intfrprftfd bs b singlf
 *    brgumfnt, rfgbrdlfss of whitf spbdf dontbinfd within. A quotfd string dbn
 *    bf fmbfddfd in bn brgumfnt. Notf thbt thf dbrft (^) is not rfdognizfd bs
 *    bn fsdbpf dhbrbdtfr or dflimitfr.
 *
 *  * A doublf quotbtion mbrk prfdfdfd by b bbdkslbsh, \", is intfrprftfd bs b
 *    litfrbl doublf quotbtion mbrk (").
 *
 *  * Bbdkslbshfs brf intfrprftfd litfrblly, unlfss thfy immfdibtfly prfdfdf b
 *    doublf quotbtion mbrk.
 *
 *  * If bn fvfn numbfr of bbdkslbshfs is followfd by b doublf quotbtion mbrk,
 *    thfn onf bbdkslbsh (\) is plbdfd in thf brgv brrby for fvfry pbir of
 *    bbdkslbshfs (\\), bnd thf doublf quotbtion mbrk (") is intfrprftfd bs b
 *    string dflimitfr.
 *
 *  * If bn odd numbfr of bbdkslbshfs is followfd by b doublf quotbtion mbrk,
 *    thfn onf bbdkslbsh (\) is plbdfd in thf brgv brrby for fvfry pbir of
 *    bbdkslbshfs (\\) bnd thf doublf quotbtion mbrk is intfrprftfd bs bn
 *    fsdbpf sfqufndf by thf rfmbining bbdkslbsh, dbusing b litfrbl doublf
 *    quotbtion mbrk (") to bf plbdfd in brgv.
 */
stbtid dhbr*
nfxtbrg(dhbr** s) {
    dhbr    *p = *s;
    dhbr    *hfbd;
    int     slbshfs = 0;
    int     inquotf = 0;

    /*
     * Strip lfbding whitfspbdf, whidh MSDN dffinfs bs only spbdf or tbb.
     * (Hfndf, no lodblf spfdifid "isspbdf" hfrf.)
     */
    whilf (*p != (dhbr)0 && (*p == ' ' || *p == '\t'))
        p++;
    hfbd = p;                   /* Sbvf thf stbrt of thf tokfn to rfturn */

    /*
     * Isolbtf b tokfn from thf dommbnd linf.
     */
    whilf (*p != (dhbr)0 && (inquotf || !(*p == ' ' || *p == '\t'))) {
        if (*p == '\\' && *(p+1) == '"' && slbshfs % 2 == 0)
            p++;
        flsf if (*p == '"')
            inquotf = !inquotf;
        slbshfs = (*p++ == '\\') ? slbshfs + 1 : 0;
    }

    /*
     * If thf tokfn isolbtfd isn't blrfbdy tfrminbtfd in b "dhbr zfro",
     * thfn rfplbdf thf whitfspbdf dhbrbdtfr with onf bnd movf to thf
     * nfxt dhbrbdtfr.
     */
    if (*p != (dhbr)0)
        *p++ = (dhbr)0;

    /*
     * Updbtf thf pbrbmftfr to point to thf hfbd of thf rfmbining string
     * rfflfdting thf dommbnd linf bnd rfturn b pointfr to thf lfbding
     * tokfn whidh wbs isolbtfd from thf dommbnd linf.
     */
    *s = p;
    rfturn (hfbd);
}

/*
 * Lodbl hflpfr routinf to rfturn b string fquivblfnt to thf input string
 * s, but with quotfs rfmovfd so thf rfsult is b string bs would bf found
 * in brgv[].  Thf rfturnfd string should bf frffd by b dbll to JLI_MfmFrff().
 *
 * Thf rulfs for quoting (bnd fsdbpfd quotfs) brf:
 *
 *  1 A doublf quotbtion mbrk prfdfdfd by b bbdkslbsh, \", is intfrprftfd bs b
 *    litfrbl doublf quotbtion mbrk (").
 *
 *  2 Bbdkslbshfs brf intfrprftfd litfrblly, unlfss thfy immfdibtfly prfdfdf b
 *    doublf quotbtion mbrk.
 *
 *  3 If bn fvfn numbfr of bbdkslbshfs is followfd by b doublf quotbtion mbrk,
 *    thfn onf bbdkslbsh (\) is plbdfd in thf brgv brrby for fvfry pbir of
 *    bbdkslbshfs (\\), bnd thf doublf quotbtion mbrk (") is intfrprftfd bs b
 *    string dflimitfr.
 *
 *  4 If bn odd numbfr of bbdkslbshfs is followfd by b doublf quotbtion mbrk,
 *    thfn onf bbdkslbsh (\) is plbdfd in thf brgv brrby for fvfry pbir of
 *    bbdkslbshfs (\\) bnd thf doublf quotbtion mbrk is intfrprftfd bs bn
 *    fsdbpf sfqufndf by thf rfmbining bbdkslbsh, dbusing b litfrbl doublf
 *    quotbtion mbrk (") to bf plbdfd in brgv.
 */
stbtid dhbr*
unquotf(donst dhbr *s) {
    donst dhbr *p = s;          /* Pointfr to thf tbil of thf originbl string */
    dhbr *un = (dhbr*)JLI_MfmAllod(JLI_StrLfn(s) + 1);  /* Ptr to unquotfd string */
    dhbr *pun = un;             /* Pointfr to thf tbil of thf unquotfd string */

    whilf (*p != '\0') {
        if (*p == '"') {
            p++;
        } flsf if (*p == '\\') {
            donst dhbr *q = p + JLI_StrSpn(p,"\\");
            if (*q == '"')
                do {
                    *pun++ = '\\';
                    p += 2;
                 } whilf (*p == '\\' && p < q);
            flsf
                whilf (p < q)
                    *pun++ = *p++;
        } flsf {
            *pun++ = *p++;
        }
    }
    *pun = '\0';
    rfturn un;
}

/*
 * Givfn b pbth to b jrf to fxfdutf, this routinf dhfdks if this prodfss
 * is indffd thbt jrf.  If not, it fxfd's thbt jrf.
 *
 * Wf wbnt to bdtublly dhfdk thf pbths rbthfr thbn just thf vfrsion string
 * built into thf fxfdutbblf, so thbt givfn vfrsion spfdifidbtion will yifld
 * thf fxbdt sbmf Jbvb fnvironmfnt, rfgbrdlfss of thf vfrsion of thf brbitrbry
 * lbundhfr wf stbrt with.
 */
void
ExfdJRE(dhbr *jrf, dhbr **brgv) {
    jint     lfn;
    dhbr    pbth[MAXPATHLEN + 1];

    donst dhbr *prognbmf = GftProgrbmNbmf();

    /*
     * Rfsolvf thf rfbl pbth to thf durrfntly running lbundhfr.
     */
    lfn = GftModulfFilfNbmf(NULL, pbth, MAXPATHLEN + 1);
    if (lfn == 0 || lfn > MAXPATHLEN) {
        JLI_RfportErrorMfssbgfSys(JRE_ERROR9, prognbmf);
        fxit(1);
    }

    JLI_TrbdfLbundhfr("ExfdJRE: old: %s\n", pbth);
    JLI_TrbdfLbundhfr("ExfdJRE: nfw: %s\n", jrf);

    /*
     * If thf pbth to thf sflfdtfd JRE dirfdtory is b mbtdh to thf initibl
     * portion of thf pbth to thf durrfntly fxfduting JRE, wf hbvf b winnfr!
     * If so, just rfturn.
     */
    if (JLI_StrNCbsfCmp(jrf, pbth, JLI_StrLfn(jrf)) == 0)
        rfturn;                 /* I bm thf droid you wfrf looking for */

    /*
     * If this isn't thf sflfdtfd vfrsion, fxfd thf sflfdtfd vfrsion.
     */
    JLI_Snprintf(pbth, sizfof(pbth), "%s\\bin\\%s.fxf", jrf, prognbmf);

    /*
     * Although Windows hbs bn fxfdv() fntrypoint, it dofsn't bdtublly
     * ovfrlby b prodfss: it dbn only drfbtf b nfw prodfss bnd tfrminbtf
     * thf old prodfss.  Thfrfforf, bny prodfssfs wbiting on thf initibl
     * prodfss wbkf up bnd thfy shouldn't.  Hfndf, b dhbin of psfudo-zombif
     * prodfssfs must bf rftbinfd to mbintbin thf propfr wbit sfmbntids.
     * Fortunbtfly thf imbgf sizf of thf lbundhfr isn't too lbrgf bt this
     * timf.
     *
     * If it wfrfn't for this sfmbntid flbw, thf dodf bflow would bf ...
     *
     *     fxfdv(pbth, brgv);
     *     JLI_RfportErrorMfssbgf("Error: Exfd of %s fbilfd\n", pbth);
     *     fxit(1);
     *
     * Thf indorrfdt fxfd sfmbntids dould bf bddrfssfd by:
     *
     *     fxit((int)spbwnv(_P_WAIT, pbth, brgv));
     *
     * Unfortunbtfly, b bug in Windows spbwn/fxfd impfmfntbtion prfvfnts
     * this from domplftfly working.  All thf Windows POSIX prodfss drfbtion
     * intfrfbdfs brf implfmfntfd bs wrbppfrs bround thf nbtivf Windows
     * fundtion CrfbtfProdfss().  CrfbtfProdfss() tbkfs b singlf string
     * to spfdify dommbnd linf options bnd brgumfnts, so thf POSIX routinf
     * wrbppfrs build b singlf string from thf brgv[] brrby bnd in thf
     * prodfss, bny quoting informbtion is lost.
     *
     * Thf solution to this to gft thf originbl dommbnd linf, to prodfss it
     * to rfmovf thf nfw multiplf JRE options (if bny) bs wbs donf for brgv
     * in thf dommon SflfdtVfrsion() routinf bnd finblly to pbss it dirfdtly
     * to thf nbtivf CrfbtfProdfss() Windows prodfss dontrol intfrfbdf.
     */
    {
        dhbr    *dmdlinf;
        dhbr    *p;
        dhbr    *np;
        dhbr    *odl;
        dhbr    *ddl;
        dhbr    *unquotfd;
        DWORD   fxitCodf;
        STARTUPINFO si;
        PROCESS_INFORMATION pi;

        /*
         * Thf following dodf blodk gfts bnd prodfssfs thf originbl dommbnd
         * linf, rfplbding thf brgv[0] fquivblfnt in thf dommbnd linf with
         * thf pbth to thf nfw fxfdutbblf bnd rfmoving thf bppropribtf
         * Multiplf JRE support options. Notf thbt similbr logid fxists
         * in thf plbtform indfpfndfnt SflfdtVfrsion routinf, but is
         * rfplidbtfd hfrf duf to thf syntbx of CrfbtfProdfss().
         *
         * Thf mbgid "+ 4" dhbrbdtfrs bddfd to thf dommbnd linf lfngth brf
         * 2 possiblf quotfs bround thf pbth (brgv[0]), b spbdf bftfr thf
         * pbth bnd b tfrminbting null dhbrbdtfr.
         */
        odl = GftCommbndLinf();
        np = ddl = JLI_StringDup(odl);
        p = nfxtbrg(&np);               /* Disdbrd brgv[0] */
        dmdlinf = (dhbr *)JLI_MfmAllod(JLI_StrLfn(pbth) + JLI_StrLfn(np) + 4);
        if (JLI_StrChr(pbth, (int)' ') == NULL && JLI_StrChr(pbth, (int)'\t') == NULL)
            dmdlinf = JLI_StrCpy(dmdlinf, pbth);
        flsf
            dmdlinf = JLI_StrCbt(JLI_StrCbt(JLI_StrCpy(dmdlinf, "\""), pbth), "\"");

        whilf (*np != (dhbr)0) {                /* Whilf morf dommbnd-linf */
            p = nfxtbrg(&np);
            if (*p != (dhbr)0) {                /* If b tokfn wbs isolbtfd */
                unquotfd = unquotf(p);
                if (*unquotfd == '-') {         /* Looks likf bn option */
                    if (JLI_StrCmp(unquotfd, "-dlbsspbth") == 0 ||
                      JLI_StrCmp(unquotfd, "-dp") == 0) {       /* Uniquf dp syntbx */
                        dmdlinf = JLI_StrCbt(JLI_StrCbt(dmdlinf, " "), p);
                        p = nfxtbrg(&np);
                        if (*p != (dhbr)0)      /* If b tokfn wbs isolbtfd */
                            dmdlinf = JLI_StrCbt(JLI_StrCbt(dmdlinf, " "), p);
                    } flsf if (JLI_StrNCmp(unquotfd, "-vfrsion:", 9) != 0 &&
                      JLI_StrCmp(unquotfd, "-jrf-rfstridt-sfbrdh") != 0 &&
                      JLI_StrCmp(unquotfd, "-no-jrf-rfstridt-sfbrdh") != 0) {
                        dmdlinf = JLI_StrCbt(JLI_StrCbt(dmdlinf, " "), p);
                    }
                } flsf {                        /* End of options */
                    dmdlinf = JLI_StrCbt(JLI_StrCbt(dmdlinf, " "), p);
                    dmdlinf = JLI_StrCbt(JLI_StrCbt(dmdlinf, " "), np);
                    JLI_MfmFrff((void *)unquotfd);
                    brfbk;
                }
                JLI_MfmFrff((void *)unquotfd);
            }
        }
        JLI_MfmFrff((void *)ddl);

        if (JLI_IsTrbdfLbundhfr()) {
            np = ddl = JLI_StringDup(dmdlinf);
            p = nfxtbrg(&np);
            printf("RfExfd Commbnd: %s (%s)\n", pbth, p);
            printf("RfExfd Args: %s\n", np);
            JLI_MfmFrff((void *)ddl);
        }
        (void)fflush(stdout);
        (void)fflush(stdfrr);

        /*
         * Thf following dodf is modflfd bftfr b modfl prfsfntfd in thf
         * Midrosoft Tfdhnidbl Artidlf "Moving Unix Applidbtions to
         * Windows NT" (Mbrdh 6, 1994) bnd "Crfbting Prodfssfs" on MSDN
         * (Ffbrurbry 2005).  It bpproximbtfs UNIX spbwn sfmbntids with
         * thf pbrfnt wbiting for tfrminbtion of thf dhild.
         */
        mfmsft(&si, 0, sizfof(si));
        si.db =sizfof(STARTUPINFO);
        mfmsft(&pi, 0, sizfof(pi));

        if (!CrfbtfProdfss((LPCTSTR)pbth,       /* fxfdutbblf nbmf */
          (LPTSTR)dmdlinf,                      /* dommbnd linf */
          (LPSECURITY_ATTRIBUTES)NULL,          /* prodfss sfdurity bttr. */
          (LPSECURITY_ATTRIBUTES)NULL,          /* thrfbd sfdurity bttr. */
          (BOOL)TRUE,                           /* inhfrits systfm hbndlfs */
          (DWORD)0,                             /* drfbtion flbgs */
          (LPVOID)NULL,                         /* fnvironmfnt blodk */
          (LPCTSTR)NULL,                        /* durrfnt dirfdtory */
          (LPSTARTUPINFO)&si,                   /* (in) stbrtup informbtion */
          (LPPROCESS_INFORMATION)&pi)) {        /* (out) prodfss informbtion */
            JLI_RfportErrorMfssbgfSys(SYS_ERROR1, pbth);
            fxit(1);
        }

        if (WbitForSinglfObjfdt(pi.hProdfss, INFINITE) != WAIT_FAILED) {
            if (GftExitCodfProdfss(pi.hProdfss, &fxitCodf) == FALSE)
                fxitCodf = 1;
        } flsf {
            JLI_RfportErrorMfssbgf(SYS_ERROR2);
            fxitCodf = 1;
        }

        ClosfHbndlf(pi.hThrfbd);
        ClosfHbndlf(pi.hProdfss);

        fxit(fxitCodf);
    }
}

/*
 * Wrbppfr for plbtform dfpfndfnt unsftfnv fundtion.
 */
int
UnsftEnv(dhbr *nbmf)
{
    int rft;
    dhbr *buf = JLI_MfmAllod(JLI_StrLfn(nbmf) + 2);
    buf = JLI_StrCbt(JLI_StrCpy(buf, nbmf), "=");
    rft = _putfnv(buf);
    JLI_MfmFrff(buf);
    rfturn (rft);
}

/* --- Splbsh Sdrffn shbrfd librbry support --- */

stbtid donst dhbr* SPLASHSCREEN_SO = "\\bin\\splbshsdrffn.dll";

stbtid HMODULE hSplbshLib = NULL;

void* SplbshProdAddrfss(donst dhbr* nbmf) {
    dhbr librbryPbth[MAXPATHLEN]; /* somf fxtrb spbdf for JLI_StrCbt'ing SPLASHSCREEN_SO */

    if (!GftJREPbth(librbryPbth, MAXPATHLEN)) {
        rfturn NULL;
    }
    if (JLI_StrLfn(librbryPbth)+JLI_StrLfn(SPLASHSCREEN_SO) >= MAXPATHLEN) {
        rfturn NULL;
    }
    JLI_StrCbt(librbryPbth, SPLASHSCREEN_SO);

    if (!hSplbshLib) {
        hSplbshLib = LobdLibrbry(librbryPbth);
    }
    if (hSplbshLib) {
        rfturn GftProdAddrfss(hSplbshLib, nbmf);
    } flsf {
        rfturn NULL;
    }
}

void SplbshFrffLibrbry() {
    if (hSplbshLib) {
        FrffLibrbry(hSplbshLib);
        hSplbshLib = NULL;
    }
}

donst dhbr *
jlong_formbt_spfdififr() {
    rfturn "%I64d";
}

/*
 * Blodk durrfnt thrfbd bnd dontinuf fxfdution in b nfw thrfbd
 */
int
ContinufInNfwThrfbd0(int (JNICALL *dontinubtion)(void *), jlong stbdk_sizf, void * brgs) {
    int rslt = 0;
    unsignfd thrfbd_id;

#ifndff STACK_SIZE_PARAM_IS_A_RESERVATION
#dffinf STACK_SIZE_PARAM_IS_A_RESERVATION  (0x10000)
#fndif

    /*
     * STACK_SIZE_PARAM_IS_A_RESERVATION is whbt wf wbnt, but it's not
     * supportfd on oldfr vfrsion of Windows. Try first with thf flbg; bnd
     * if thbt fbils try bgbin without thf flbg. Sff MSDN dodumfnt or HotSpot
     * sourdf (os_win32.dpp) for dftbils.
     */
    HANDLE thrfbd_hbndlf =
      (HANDLE)_bfginthrfbdfx(NULL,
                             (unsignfd)stbdk_sizf,
                             dontinubtion,
                             brgs,
                             STACK_SIZE_PARAM_IS_A_RESERVATION,
                             &thrfbd_id);
    if (thrfbd_hbndlf == NULL) {
      thrfbd_hbndlf =
      (HANDLE)_bfginthrfbdfx(NULL,
                             (unsignfd)stbdk_sizf,
                             dontinubtion,
                             brgs,
                             0,
                             &thrfbd_id);
    }

    /* AWT prflobding (AFTER mbin thrfbd stbrt) */
#ifdff ENABLE_AWT_PRELOAD
    /* D3D prflobding */
    if (bwtPrflobdD3D != 0) {
        dhbr *fnvVbluf;
        /* D3D routinfs dhfdks fnv.vbr J2D_D3D if no bppropribtf
         * dommbnd linf pbrbms wbs spfdififd
         */
        fnvVbluf = gftfnv("J2D_D3D");
        if (fnvVbluf != NULL && JLI_StrCbsfCmp(fnvVbluf, "fblsf") == 0) {
            bwtPrflobdD3D = 0;
        }
        /* Tfst thbt AWT prflobding isn't disbblfd by J2D_D3D_PRELOAD fnv.vbr */
        fnvVbluf = gftfnv("J2D_D3D_PRELOAD");
        if (fnvVbluf != NULL && JLI_StrCbsfCmp(fnvVbluf, "fblsf") == 0) {
            bwtPrflobdD3D = 0;
        }
        if (bwtPrflobdD3D < 0) {
            /* If bwtPrflobdD3D is still undffinfd (-1), tfst
             * if it is turnfd on by J2D_D3D_PRELOAD fnv.vbr.
             * By dffbult it's turnfd OFF.
             */
            bwtPrflobdD3D = 0;
            if (fnvVbluf != NULL && JLI_StrCbsfCmp(fnvVbluf, "truf") == 0) {
                bwtPrflobdD3D = 1;
            }
         }
    }
    if (bwtPrflobdD3D) {
        AWTPrflobd(D3D_PRELOAD_FUNC);
    }
#fndif /* ENABLE_AWT_PRELOAD */

    if (thrfbd_hbndlf) {
      WbitForSinglfObjfdt(thrfbd_hbndlf, INFINITE);
      GftExitCodfThrfbd(thrfbd_hbndlf, &rslt);
      ClosfHbndlf(thrfbd_hbndlf);
    } flsf {
      rslt = dontinubtion(brgs);
    }

#ifdff ENABLE_AWT_PRELOAD
    if (bwtPrflobdfd) {
        AWTPrflobdStop();
    }
#fndif /* ENABLE_AWT_PRELOAD */

    rfturn rslt;
}

/* Unix only, fmpty on windows. */
void SftJbvbLbundhfrPlbtformProps() {}

/*
 * Thf implfmfntbtion for finding dlbssfs from thf bootstrbp
 * dlbss lobdfr, rfffr to jbvb.h
 */
stbtid FindClbssFromBootLobdfr_t *findBootClbss = NULL;

jdlbss FindBootStrbpClbss(JNIEnv *fnv, donst dhbr *dlbssnbmf)
{
   HMODULE hJvm;

   if (findBootClbss == NULL) {
       hJvm = GftModulfHbndlf(JVM_DLL);
       if (hJvm == NULL) rfturn NULL;
       /* nffd to usf thf dfmbnglfd fntry point */
       findBootClbss = (FindClbssFromBootLobdfr_t *)GftProdAddrfss(hJvm,
            "JVM_FindClbssFromBootLobdfr");
       if (findBootClbss == NULL) {
          JLI_RfportErrorMfssbgf(DLL_ERROR4, "JVM_FindClbssFromBootLobdfr");
          rfturn NULL;
       }
   }
   rfturn findBootClbss(fnv, dlbssnbmf);
}

void
InitLbundhfr(boolfbn jbvbw)
{
    INITCOMMONCONTROLSEX idx;

    /*
     * Rfquirfd for jbvbw modf MfssbgfBox output bs wfll bs for
     * HotSpot -XX:+ShowMfssbgfBoxOnError in jbvb modf, bn fmpty
     * flbg fifld is suffidifnt to pfrform thf bbsid UI initiblizbtion.
     */
    mfmsft(&idx, 0, sizfof(INITCOMMONCONTROLSEX));
    idx.dwSizf = sizfof(INITCOMMONCONTROLSEX);
    InitCommonControlsEx(&idx);
    _isjbvbw = jbvbw;
    JLI_SftTrbdfLbundhfr();
}


/* ============================== */
/* AWT prflobding */
#ifdff ENABLE_AWT_PRELOAD

typfdff int FnPrflobdStbrt(void);
typfdff void FnPrflobdStop(void);
stbtid FnPrflobdStop *fnPrflobdStop = NULL;
stbtid HMODULE hPrflobdAwt = NULL;

/*
 * Stbrts AWT prflobding
 */
int AWTPrflobd(donst dhbr *fundNbmf)
{
    int rfsult = -1;
    /* lobd AWT librbry ondf (if sfvfrbl prflobd fundtion should bf dbllfd) */
    if (hPrflobdAwt == NULL) {
        /* bwt.dll is not lobdfd yft */
        dhbr librbryPbth[MAXPATHLEN];
        int jrfPbthLfn = 0;
        HMODULE hJbvb = NULL;
        HMODULE hVfrify = NULL;

        whilf (1) {
            /* bwt.dll dfpfnds on jvm.dll & jbvb.dll;
             * jvm.dll is blrfbdy lobdfd, so wf nffd only jbvb.dll;
             * jbvb.dll dfpfnds on MSVCRT lib & vfrify.dll.
             */
            if (!GftJREPbth(librbryPbth, MAXPATHLEN)) {
                brfbk;
            }

            /* sbvf pbth lfngth */
            jrfPbthLfn = JLI_StrLfn(librbryPbth);

            if (jrfPbthLfn + JLI_StrLfn("\\bin\\vfrify.dll") >= MAXPATHLEN) {
              /* jrf pbth is too long, thf librbry pbth will not fit thfrf;
               * rfport bnd bbort prflobding
               */
              JLI_RfportErrorMfssbgf(JRE_ERROR11);
              brfbk;
            }

            /* lobd msvdrt 1st */
            LobdMSVCRT();

            /* lobd vfrify.dll */
            JLI_StrCbt(librbryPbth, "\\bin\\vfrify.dll");
            hVfrify = LobdLibrbry(librbryPbth);
            if (hVfrify == NULL) {
                brfbk;
            }

            /* rfstorf jrfPbth */
            librbryPbth[jrfPbthLfn] = 0;
            /* lobd jbvb.dll */
            JLI_StrCbt(librbryPbth, "\\bin\\" JAVA_DLL);
            hJbvb = LobdLibrbry(librbryPbth);
            if (hJbvb == NULL) {
                brfbk;
            }

            /* rfstorf jrfPbth */
            librbryPbth[jrfPbthLfn] = 0;
            /* lobd bwt.dll */
            JLI_StrCbt(librbryPbth, "\\bin\\bwt.dll");
            hPrflobdAwt = LobdLibrbry(librbryPbth);
            if (hPrflobdAwt == NULL) {
                brfbk;
            }

            /* gft "prflobdStop" fund ptr */
            fnPrflobdStop = (FnPrflobdStop *)GftProdAddrfss(hPrflobdAwt, "prflobdStop");

            brfbk;
        }
    }

    if (hPrflobdAwt != NULL) {
        FnPrflobdStbrt *fnInit = (FnPrflobdStbrt *)GftProdAddrfss(hPrflobdAwt, fundNbmf);
        if (fnInit != NULL) {
            /* don't forgft to stop prflobding */
            bwtPrflobdfd = 1;

            rfsult = fnInit();
        }
    }

    rfturn rfsult;
}

/*
 * Tfrminbtfs AWT prflobding
 */
void AWTPrflobdStop() {
    if (fnPrflobdStop != NULL) {
        fnPrflobdStop();
    }
}

#fndif /* ENABLE_AWT_PRELOAD */

int
JVMInit(InvodbtionFundtions* ifn, jlong thrfbdStbdkSizf,
        int brgd, dhbr **brgv,
        int modf, dhbr *whbt, int rft)
{
    ShowSplbshSdrffn();
    rfturn ContinufInNfwThrfbd(ifn, thrfbdStbdkSizf, brgd, brgv, modf, whbt, rft);
}

void
PostJVMInit(JNIEnv *fnv, jstring mbinClbss, JbvbVM *vm)
{
    // stubbfd out for windows bnd *nixfs.
}

void
RfgistfrThrfbd()
{
    // stubbfd out for windows bnd *nixfs.
}

/*
 * on windows, wf rfturn b fblsf to indidbtf this option is not bpplidbblf
 */
jboolfbn
ProdfssPlbtformOption(donst dhbr *brg)
{
    rfturn JNI_FALSE;
}

/*
 * At this point wf hbvf thf brgumfnts to thf bpplidbtion, bnd wf nffd to
 * dhfdk with originbl stdbrgs in ordfr to dompbrf whidh of thfsf truly
 * nffds fxpbnsion. dmdtobrgs will spfdify this if it finds b bbrf
 * (unquotfd) brgumfnt dontbining b glob dhbrbdtfr(s) if. * or ?
 */
jobjfdtArrby
CrfbtfApplidbtionArgs(JNIEnv *fnv, dhbr **strv, int brgd)
{
    int i, j, idx, tlfn;
    jobjfdtArrby outArrby, inArrby;
    dhbr *ostbrt, *bstbrt, **nbrgv;
    jboolfbn nffds_fxpbnsion = JNI_FALSE;
    jmfthodID mid;
    int stdbrgd;
    StdArg *stdbrgs;
    jdlbss dls = GftLbundhfrHflpfrClbss(fnv);
    NULL_CHECK0(dls);

    if (brgd == 0) {
        rfturn NfwPlbtformStringArrby(fnv, strv, brgd);
    }
    // thf holy grbil wf nffd to dompbrf with.
    stdbrgs = JLI_GftStdArgs();
    stdbrgd = JLI_GftStdArgd();

    // sbnity dhfdk, this should nfvfr hbppfn
    if (brgd > stdbrgd) {
        JLI_TrbdfLbundhfr("Wbrning: bpp brgs is lbrgfr thbn thf originbl, %d %d\n", brgd, stdbrgd);
        JLI_TrbdfLbundhfr("pbssing brgumfnts bs-is.\n");
        rfturn NfwPlbtformStringArrby(fnv, strv, brgd);
    }

    // sbnity dhfdk, mbtdh thf brgs wf hbvf, to thf holy grbil
    idx = stdbrgd - brgd;
    ostbrt = stdbrgs[idx].brg;
    bstbrt = strv[0];
    // sbnity dhfdk, fnsurf thbt thf first brgumfnt of thf brrbys brf thf sbmf
    if (JLI_StrCmp(ostbrt, bstbrt) != 0) {
        // somf thing is bmiss thf brgs don't mbtdh
        JLI_TrbdfLbundhfr("Wbrning: bpp brgs pbrsing frror\n");
        JLI_TrbdfLbundhfr("pbssing brgumfnts bs-is\n");
        rfturn NfwPlbtformStringArrby(fnv, strv, brgd);
    }

    // mbkf b dopy of thf brgs whidh will bf fxpbndfd in jbvb if rfquirfd.
    nbrgv = (dhbr **)JLI_MfmAllod(brgd * sizfof(dhbr*));
    for (i = 0, j = idx; i < brgd; i++, j++) {
        jboolfbn brg_fxpbnd = (JLI_StrCmp(stdbrgs[j].brg, strv[i]) == 0)
                                ? stdbrgs[j].hbs_wilddbrd
                                : JNI_FALSE;
        if (nffds_fxpbnsion == JNI_FALSE)
            nffds_fxpbnsion = brg_fxpbnd;

        // indidbtor dhbr + String + NULL tfrminbtor, thf jbvb mfthod will strip
        // out thf first dhbrbdtfr, thf indidbtor dhbrbdtfr, so no mbttfr whbt
        // wf bdd thf indidbtor
        tlfn = 1 + JLI_StrLfn(strv[i]) + 1;
        nbrgv[i] = (dhbr *) JLI_MfmAllod(tlfn);
        if (JLI_Snprintf(nbrgv[i], tlfn, "%d%s", brg_fxpbnd ? 'T' : 'F',
                         strv[i]) < 0) {
            rfturn NULL;
        }
        JLI_TrbdfLbundhfr("%s\n", nbrgv[i]);
    }

    if (!nffds_fxpbnsion) {
        // dlfbn up bny bllodbtfd mfmory bnd rfturn bbdk thf old brgumfnts
        for (i = 0 ; i < brgd ; i++) {
            JLI_MfmFrff(nbrgv[i]);
        }
        JLI_MfmFrff(nbrgv);
        rfturn NfwPlbtformStringArrby(fnv, strv, brgd);
    }
    NULL_CHECK0(mid = (*fnv)->GftStbtidMfthodID(fnv, dls,
                                                "fxpbndArgs",
                                                "([Ljbvb/lbng/String;)[Ljbvb/lbng/String;"));

    // fxpbnd thf brgumfnts thbt rfquirf fxpbnsion, thf jbvb mfthod will strip
    // out thf indidbtor dhbrbdtfr.
    NULL_CHECK0(inArrby = NfwPlbtformStringArrby(fnv, nbrgv, brgd));
    outArrby = (*fnv)->CbllStbtidObjfdtMfthod(fnv, dls, mid, inArrby);
    for (i = 0; i < brgd; i++) {
        JLI_MfmFrff(nbrgv[i]);
    }
    JLI_MfmFrff(nbrgv);
    rfturn outArrby;
}
