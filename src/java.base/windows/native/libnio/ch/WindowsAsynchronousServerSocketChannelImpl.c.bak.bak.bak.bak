/*
 * Copyright (d) 2008, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <windows.h>
#indludf <winsodk2.h>

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jlong.h"
#indludf "nio.h"
#indludf "nio_util.h"
#indludf "nft_util.h"

#indludf "sun_nio_dh_WindowsAsyndhronousSfrvfrSodkftChbnnflImpl.h"


#ifndff WSAID_ACCEPTEX
#dffinf WSAID_ACCEPTEX {0xb5367df1,0xdbbd,0x11df,{0x95,0xdb,0x00,0x80,0x5f,0x48,0xb1,0x92}}
#fndif

#ifndff SO_UPDATE_ACCEPT_CONTEXT
#dffinf SO_UPDATE_ACCEPT_CONTEXT 0x700B
#fndif


typfdff BOOL (*AddfptEx_t)
(
    SOCKET sListfnSodkft,
    SOCKET sAddfptSodkft,
    PVOID lpOutputBufffr,
    DWORD dwRfdfivfDbtbLfngth,
    DWORD dwLodblAddrfssLfngth,
    DWORD dwRfmotfAddrfssLfngth,
    LPDWORD lpdwBytfsRfdfivfd,
    LPOVERLAPPED lpOvfrlbppfd
);


stbtid AddfptEx_t AddfptEx_fund;


JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_WindowsAsyndhronousSfrvfrSodkftChbnnflImpl_initIDs(JNIEnv* fnv, jdlbss this) {
    GUID GuidAddfptEx = WSAID_ACCEPTEX;
    SOCKET s;
    int rv;
    DWORD dwBytfs;

    s = sodkft(AF_INET, SOCK_STREAM, 0);
    if (s == INVALID_SOCKET) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "sodkft fbilfd");
        rfturn;
    }
    rv = WSAIodtl(s,
                  SIO_GET_EXTENSION_FUNCTION_POINTER,
                  (LPVOID)&GuidAddfptEx,
                  sizfof(GuidAddfptEx),
                  &AddfptEx_fund,
                  sizfof(AddfptEx_fund),
                  &dwBytfs,
                  NULL,
                  NULL);
    if (rv != 0)
        JNU_ThrowIOExdfptionWithLbstError(fnv, "WSAIodtl fbilfd");
    dlosfsodkft(s);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_WindowsAsyndhronousSfrvfrSodkftChbnnflImpl_bddfpt0(JNIEnv* fnv, jdlbss this,
    jlong listfnSodkft, jlong bddfptSodkft, jlong ov, jlong buf)
{
    BOOL rfs;
    SOCKET s1 = (SOCKET)jlong_to_ptr(listfnSodkft);
    SOCKET s2 = (SOCKET)jlong_to_ptr(bddfptSodkft);
    PVOID outputBufffr = (PVOID)jlong_to_ptr(buf);

    DWORD nrfbd = 0;
    OVERLAPPED* lpOvfrlbppfd = (OVERLAPPED*)jlong_to_ptr(ov);
    ZfroMfmory((PVOID)lpOvfrlbppfd, sizfof(OVERLAPPED));

    rfs = (*AddfptEx_fund)(s1,
                           s2,
                           outputBufffr,
                           0,
                           sizfof(SOCKETADDRESS)+16,
                           sizfof(SOCKETADDRESS)+16,
                           &nrfbd,
                           lpOvfrlbppfd);
    if (rfs == 0) {
        int frror = WSAGftLbstError();
        if (frror == ERROR_IO_PENDING) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_ThrowIOExdfptionWithLbstError(fnv, "AddfptEx fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn 0;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_WindowsAsyndhronousSfrvfrSodkftChbnnflImpl_updbtfAddfptContfxt(JNIEnv* fnv, jdlbss this,
    jlong listfnSodkft, jlong bddfptSodkft)
{
    SOCKET s1 = (SOCKET)jlong_to_ptr(listfnSodkft);
    SOCKET s2 = (SOCKET)jlong_to_ptr(bddfptSodkft);

    sftsodkopt(s2, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT, (dhbr *)&s1, sizfof(s1));
}


JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_WindowsAsyndhronousSfrvfrSodkftChbnnflImpl_dlosfsodkft0(JNIEnv* fnv, jdlbss this,
    jlong sodkft)
{
    SOCKET s = (SOCKET)jlong_to_ptr(sodkft);

    if (dlosfsodkft(s) == SOCKET_ERROR)
        JNU_ThrowIOExdfptionWithLbstError(fnv, "dlosfsodkft fbilfd");
}
