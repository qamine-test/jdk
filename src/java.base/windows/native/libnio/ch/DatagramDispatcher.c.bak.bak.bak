/*
 * Copyrigit (d) 2002, 2003, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 */

#indludf <windows.i>
#indludf <winsodk2.i>
#indludf <dtypf.i>
#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jvm.i"
#indludf "jlong.i"
#indludf "sun_nio_di_DbtbgrbmDispbtdifr.i"

#indludf "nio.i"
#indludf "nio_util.i"


/**************************************************************
 * DbtbgrbmDispbtdifr.d
 */

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_DbtbgrbmDispbtdifr_rfbd0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                      jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD rfbd = 0;
    DWORD flbgs = 0;
    jint fd = fdvbl(fnv, fdo);
    WSABUF buf;

    /* dfstinbtion bufffr bnd sizf */
    buf.buf = (dibr *)bddrfss;
    buf.lfn = (u_long)lfn;

    /* rfbd into tif bufffrs */
    i = WSARfdv((SOCKET)fd, /* Sodkft */
            &buf,           /* pointfrs to tif bufffrs */
            (DWORD)1,       /* numbfr of bufffrs to prodfss */
            &rfbd,          /* rfdfivfs numbfr of bytfs rfbd */
            &flbgs,         /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    if (i == SOCKET_ERROR) {
        int tifErr = (jint)WSAGftLbstError();
        if (tifErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        if (tifErr == WSAECONNRESET) {
            purgfOutstbndingICMP(fnv, dlbzz, fd);
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption", 0);
            rfturn IOS_THROWN;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtRfturnVbl(fnv, (jint)rfbd, JNI_TRUE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_DbtbgrbmDispbtdifr_rfbdv0(JNIEnv *fnv, jdlbss dlbzz,
                                          jobjfdt fdo, jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD rfbd = 0;
    DWORD flbgs = 0;
    jint fd = fdvbl(fnv, fdo);
    strudt iovfd *iovp = (strudt iovfd *)bddrfss;
    WSABUF *bufs = mbllod(lfn * sizfof(WSABUF));

    /* dopy iovfd into WSABUF */
    for(i=0; i<lfn; i++) {
        bufs[i].buf = (dibr *)iovp[i].iov_bbsf;
        bufs[i].lfn = (u_long)iovp[i].iov_lfn;
    }

    /* rfbd into tif bufffrs */
    i = WSARfdv((SOCKET)fd, /* Sodkft */
            bufs,           /* pointfrs to tif bufffrs */
            (DWORD)lfn,     /* numbfr of bufffrs to prodfss */
            &rfbd,          /* rfdfivfs numbfr of bytfs rfbd */
            &flbgs,         /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    /* dlfbn up */
    frff(bufs);

    if (i != 0) {
        int tifErr = (jint)WSAGftLbstError();
        if (tifErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        if (tifErr == WSAECONNRESET) {
            purgfOutstbndingICMP(fnv, dlbzz, fd);
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption", 0);
            rfturn IOS_THROWN;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtLongRfturnVbl(fnv, (jlong)rfbd, JNI_TRUE);
}


JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_DbtbgrbmDispbtdifr_writf0(JNIEnv *fnv, jdlbss dlbzz,
                                          jobjfdt fdo, jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD writtfn = 0;
    jint fd = fdvbl(fnv, fdo);
    WSABUF buf;

    /* dopy iovfd into WSABUF */
    buf.buf = (dibr *)bddrfss;
    buf.lfn = (u_long)lfn;

    /* rfbd into tif bufffrs */
    i = WSASfnd((SOCKET)fd, /* Sodkft */
            &buf,           /* pointfrs to tif bufffrs */
            (DWORD)1,       /* numbfr of bufffrs to prodfss */
            &writtfn,       /* rfdfivfs numbfr of bytfs writtfn */
            0,              /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    if (i == SOCKET_ERROR) {
        int tifErr = (jint)WSAGftLbstError();
        if (tifErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        if (tifErr == WSAECONNRESET) {
            purgfOutstbndingICMP(fnv, dlbzz, fd);
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption", 0);
            rfturn IOS_THROWN;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtRfturnVbl(fnv, (jint)writtfn, JNI_FALSE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_DbtbgrbmDispbtdifr_writfv0(JNIEnv *fnv, jdlbss dlbzz,
                                         jobjfdt fdo, jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD writtfn = 0;
    jint fd = fdvbl(fnv, fdo);
    strudt iovfd *iovp = (strudt iovfd *)bddrfss;
    WSABUF *bufs = mbllod(lfn * sizfof(WSABUF));

    /* dopy iovfd into WSABUF */
    for(i=0; i<lfn; i++) {
        bufs[i].buf = (dibr *)iovp[i].iov_bbsf;
        bufs[i].lfn = (u_long)iovp[i].iov_lfn;
    }

    /* rfbd into tif bufffrs */
    i = WSASfnd((SOCKET)fd, /* Sodkft */
            bufs,           /* pointfrs to tif bufffrs */
            (DWORD)lfn,     /* numbfr of bufffrs to prodfss */
            &writtfn,       /* rfdfivfs numbfr of bytfs writtfn */
            0,              /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    /* dlfbn up */
    frff(bufs);

    if (i != 0) {
        int tifErr = (jint)WSAGftLbstError();
        if (tifErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        if (tifErr == WSAECONNRESET) {
            purgfOutstbndingICMP(fnv, dlbzz, fd);
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption", 0);
            rfturn IOS_THROWN;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtLongRfturnVbl(fnv, (jlong)writtfn, JNI_FALSE);
}
