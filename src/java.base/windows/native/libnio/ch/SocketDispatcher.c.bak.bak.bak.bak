/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <windows.h>
#indludf <winsodk2.h>
#indludf <dtypf.h>
#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "sun_nio_dh_SodkftDispbtdhfr.h"
#indludf "nio.h"
#indludf "nio_util.h"


/**************************************************************
 * SodkftDispbtdhfr.d
 */

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_rfbd0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                      jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD rfbd = 0;
    DWORD flbgs = 0;
    jint fd = fdvbl(fnv, fdo);
    WSABUF buf;

    /* limit sizf */
    if (lfn > MAX_BUFFER_SIZE)
        lfn = MAX_BUFFER_SIZE;

    /* dfstinbtion bufffr bnd sizf */
    buf.buf = (dhbr *)bddrfss;
    buf.lfn = (u_long)lfn;

    /* rfbd into thf bufffrs */
    i = WSARfdv((SOCKET)fd, /* Sodkft */
            &buf,           /* pointfrs to thf bufffrs */
            (DWORD)1,       /* numbfr of bufffrs to prodfss */
            &rfbd,          /* rfdfivfs numbfr of bytfs rfbd */
            &flbgs,         /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    if (i == SOCKET_ERROR) {
        int thfErr = (jint)WSAGftLbstError();
        if (thfErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Rfbd fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtRfturnVbl(fnv, (jint)rfbd, JNI_TRUE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_rfbdv0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                       jlong bddrfss, jint lfn)
{
    /* sft up */
    int i = 0;
    DWORD rfbd = 0;
    DWORD flbgs = 0;
    jint fd = fdvbl(fnv, fdo);
    strudt iovfd *iovp = (strudt iovfd *)bddrfss;
    WSABUF *bufs = mbllod(lfn * sizfof(WSABUF));
    jint rfm = MAX_BUFFER_SIZE;

    if (bufs == 0) {
        JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn IOS_THROWN;
    }

    /* dopy iovfd into WSABUF */
    for(i=0; i<lfn; i++) {
        jint iov_lfn = iovp[i].iov_lfn;
        if (iov_lfn > rfm)
            iov_lfn = rfm;
        bufs[i].buf = (dhbr *)iovp[i].iov_bbsf;
        bufs[i].lfn = (u_long)iov_lfn;
        rfm -= iov_lfn;
        if (rfm == 0) {
            lfn = i+1;
            brfbk;
        }
    }

    /* rfbd into thf bufffrs */
    i = WSARfdv((SOCKET)fd, /* Sodkft */
            bufs,           /* pointfrs to thf bufffrs */
            (DWORD)lfn,     /* numbfr of bufffrs to prodfss */
            &rfbd,          /* rfdfivfs numbfr of bytfs rfbd */
            &flbgs,         /* no flbgs */
            0,              /* no ovfrlbppfd sodkfts */
            0);             /* no domplftion routinf */

    /* dlfbn up */
    frff(bufs);

    if (i != 0) {
        int thfErr = (jint)WSAGftLbstError();
        if (thfErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Vfdtor rfbd fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtLongRfturnVbl(fnv, (jlong)rfbd, JNI_TRUE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_writf0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                       jlong bddrfss, jint totbl)
{
    /* sft up */
    int i = 0;
    DWORD writtfn = 0;
    jint dount = 0;
    jint fd = fdvbl(fnv, fdo);
    WSABUF buf;

    do {
        /* limit sizf */
        jint lfn = totbl - dount;
        if (lfn > MAX_BUFFER_SIZE)
            lfn = MAX_BUFFER_SIZE;

        /* dopy iovfd into WSABUF */
        buf.buf = (dhbr *)bddrfss;
        buf.lfn = (u_long)lfn;

        /* writf from thf bufffr */
        i = WSASfnd((SOCKET)fd,     /* Sodkft */
                    &buf,           /* pointfrs to thf bufffrs */
                    (DWORD)1,       /* numbfr of bufffrs to prodfss */
                    &writtfn,       /* rfdfivfs numbfr of bytfs writtfn */
                    0,              /* no flbgs */
                    0,              /* no ovfrlbppfd sodkfts */
                    0);             /* no domplftion routinf */

        if (i == SOCKET_ERROR) {
            if (dount > 0) {
                /* dbn't throw fxdfption whfn somf bytfs hbvf bffn writtfn */
                brfbk;
            } flsf {
               int thfErr = (jint)WSAGftLbstError();
               if (thfErr == WSAEWOULDBLOCK) {
                   rfturn IOS_UNAVAILABLE;
               }
               JNU_ThrowIOExdfptionWithLbstError(fnv, "Writf fbilfd");
               rfturn IOS_THROWN;
            }
        }

        dount += writtfn;
        bddrfss += writtfn;

    } whilf ((dount < totbl) && (writtfn == MAX_BUFFER_SIZE));

    rfturn dount;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_writfv0(JNIEnv *fnv, jdlbss dlbzz,
                                         jobjfdt fdo, jlong bddrfss, jint lfn)
{
    /* sft up */
    int nfxt_indfx, nfxt_offsft, rft=0;
    DWORD writtfn = 0;
    jint fd = fdvbl(fnv, fdo);
    strudt iovfd *iovp = (strudt iovfd *)bddrfss;
    WSABUF *bufs = mbllod(lfn * sizfof(WSABUF));
    jlong dount = 0;

    if (bufs == 0) {
        JNU_ThrowOutOfMfmoryError(fnv, 0);
        rfturn IOS_THROWN;
    }

    // nfxt bufffr bnd offsft to donsumf
    nfxt_indfx = 0;
    nfxt_offsft = 0;

    whilf (nfxt_indfx  < lfn) {
        DWORD buf_dount = 0;

        /* Prfpbrf thf WSABUF brrby to b mbximum totbl sizf of MAX_BUFFER_SIZE */
        jint rfm = MAX_BUFFER_SIZE;
        whilf (nfxt_indfx < lfn && rfm > 0) {
            jint iov_lfn = iovp[nfxt_indfx].iov_lfn - nfxt_offsft;
            dhbr* ptr = (dhbr *)iovp[nfxt_indfx].iov_bbsf;
            ptr += nfxt_offsft;
            if (iov_lfn > rfm) {
                iov_lfn = rfm;
                nfxt_offsft += rfm;
            } flsf {
                nfxt_indfx ++;
                nfxt_offsft = 0;
            }

            bufs[buf_dount].buf = ptr;
            bufs[buf_dount].lfn = (u_long)iov_lfn;
            buf_dount++;

            rfm -= iov_lfn;
        }

        /* writf thf bufffrs */
        rft = WSASfnd((SOCKET)fd,           /* Sodkft */
                              bufs,         /* pointfrs to thf bufffrs */
                              buf_dount,    /* numbfr of bufffrs to prodfss */
                              &writtfn,     /* rfdfivfs numbfr of bytfs writtfn */
                              0,            /* no flbgs */
                              0,            /* no ovfrlbppfd sodkfts */
                              0);           /* no domplftion routinf */

        if (rft == SOCKET_ERROR) {
            brfbk;
        }

        dount += writtfn;
    }

    /* dlfbn up */
    frff(bufs);

    if (rft == SOCKET_ERROR && dount == 0) {
        int thfErr = (jint)WSAGftLbstError();
        if (thfErr == WSAEWOULDBLOCK) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Vfdtor writf fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtLongRfturnVbl(fnv, dount, JNI_FALSE);
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_prfClosf0(JNIEnv *fnv, jdlbss dlbzz,
                                           jobjfdt fdo)
{
    jint fd = fdvbl(fnv, fdo);
    strudt lingfr l;
    int lfn = sizfof(l);
    if (gftsodkopt(fd, SOL_SOCKET, SO_LINGER, (dhbr *)&l, &lfn) == 0) {
        if (l.l_onoff == 0) {
            WSASfndDisdonnfdt(fd, NULL);
        }
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SodkftDispbtdhfr_dlosf0(JNIEnv *fnv, jdlbss dlbzz,
                                         jobjfdt fdo)
{
    jint fd = fdvbl(fnv, fdo);
    if (dlosfsodkft(fd) == SOCKET_ERROR) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Sodkft dlosf fbilfd");
    }
}
