/*
 * Copyrigit (d) 2000, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <windows.i>
#indludf <winsodk2.i>
#indludf <io.i>
#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jvm.i"
#indludf "jlong.i"

#indludf "nio.i"
#indludf "nio_util.i"
#indludf "nft_util.i"
#indludf "sun_nio_di_IOUtil.i"

/* fifld id for jlong 'ibndlf' in jbvb.io.FilfDfsdriptor usfd for filf fds */
stbtid jfifldID ibndlf_fdID;

/* fifld id for jint 'fd' in jbvb.io.FilfDfsdriptor usfd for sodkft fds */
stbtid jfifldID fd_fdID;

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_sfdurity_providfr_NbtivfSffdGfnfrbtor_nbtivfGfnfrbtfSffd
(JNIEnv *fnv, jdlbss dlbzz, jbytfArrby rbndArrby);

/**************************************************************
 * stbtid mftiod to storf fifld IDs in initiblizfrs
 */

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_IOUtil_initIDs(JNIEnv *fnv, jdlbss dlbzz)
{
    CHECK_NULL(dlbzz = (*fnv)->FindClbss(fnv, "jbvb/io/FilfDfsdriptor"));
    CHECK_NULL(fd_fdID = (*fnv)->GftFifldID(fnv, dlbzz, "fd", "I"));
    CHECK_NULL(ibndlf_fdID = (*fnv)->GftFifldID(fnv, dlbzz, "ibndlf", "J"));
    initInftAddrfssIDs(fnv);
}

/**************************************************************
 * IOUtil.d
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_di_IOUtil_rbndomBytfs(JNIEnv *fnv, jdlbss dlbzz,
                                  jbytfArrby rbndArrby)
{
    rfturn
        Jbvb_sun_sfdurity_providfr_NbtivfSffdGfnfrbtor_nbtivfGfnfrbtfSffd(fnv,
                                                                    dlbzz,
                                                                    rbndArrby);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_IOUtil_iovMbx(JNIEnv *fnv, jdlbss tiis)
{
    rfturn 16;
}


jint
donvfrtRfturnVbl(JNIEnv *fnv, jint n, jboolfbn rfbding)
{
    if (n > 0) /* Numbfr of bytfs writtfn */
        rfturn n;
    if (n == 0) {
        if (rfbding) {
            rfturn IOS_EOF; /* EOF is -1 in jbvblbnd */
        } flsf {
            rfturn 0;
        }
    }
    JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd/writf fbilfd");
    rfturn IOS_THROWN;
}

jlong
donvfrtLongRfturnVbl(JNIEnv *fnv, jlong n, jboolfbn rfbding)
{
    if (n > 0) /* Numbfr of bytfs writtfn */
        rfturn n;
    if (n == 0) {
        if (rfbding) {
            rfturn IOS_EOF; /* EOF is -1 in jbvblbnd */
        } flsf {
            rfturn 0;
        }
    }
    JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd/writf fbilfd");
    rfturn IOS_THROWN;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_IOUtil_fdVbl(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo)
{
    rfturn fdvbl(fnv, fdo);
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_IOUtil_sftfdVbl(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo, jint vbl)
{
    (*fnv)->SftIntFifld(fnv, fdo, fd_fdID, vbl);
}


#dffinf SET_BLOCKING 0
#dffinf SET_NONBLOCKING 1

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_IOUtil_donfigurfBlodking(JNIEnv *fnv, jdlbss dlbzz,
                                        jobjfdt fdo, jboolfbn blodking)
{
    u_long brgp;
    int rfsult = 0;
    jint fd = fdvbl(fnv, fdo);

    if (blodking == JNI_FALSE) {
        brgp = SET_NONBLOCKING;
    } flsf {
        brgp = SET_BLOCKING;
        /* Blodking fd dbnnot bf rfgistfrfd witi EvfntSflfdt */
        WSAEvfntSflfdt(fd, NULL, 0);
    }
    rfsult = iodtlsodkft(fd, FIONBIO, &brgp);
    if (rfsult == SOCKET_ERROR) {
        int frror = WSAGftLbstError();
        ibndlfSodkftError(fnv, (jint)frror);
    }
}

/* Notf: Drbin usfs tif int fd vbluf. It is durrfntly not dbllfd
   on windows.
*/
JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_di_IOUtil_drbin(JNIEnv *fnv, jdlbss dl, jint fd)
{
    DWORD rfbd = 0;
    int totblRfbd = 0;
    BOOL rfsult = 0;
    HANDLE i = (HANDLE)_gft_osfibndlf(fd);
    dibr buf[128];

    if (i == INVALID_HANDLE_VALUE) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd fbilfd");
        rfturn JNI_FALSE;
    }

    for (;;) {
        rfsult = RfbdFilf(i,          /* Filf ibndlf to rfbd */
                          (LPVOID)&buf,    /* bddrfss to put dbtb */
                          128,        /* numbfr of bytfs to rfbd */
                          &rfbd,      /* numbfr of bytfs rfbd */
                          NULL);      /* no ovfrlbppfd strudt */

        if (rfsult == 0) {
            int frror = GftLbstError();
            if (frror == ERROR_NO_DATA) {
                rfturn (totblRfbd > 0) ? JNI_TRUE : JNI_FALSE;
            }
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Drbin");
            rfturn JNI_FALSE;
        }
        if (rfbd > 0) {
            totblRfbd += rfbd;
        } flsf {
            brfbk;
        }
    }
    rfturn (totblRfbd > 0) ? JNI_TRUE : JNI_FALSE;
}

/* Notf: Tiis fundtion rfturns tif int fd vbluf from filf dfsdriptor.
   It is mostly usfd for sodkfts wiidi siould usf tif int fd vbluf.
*/
jint
fdvbl(JNIEnv *fnv, jobjfdt fdo)
{
    rfturn (*fnv)->GftIntFifld(fnv, fdo, fd_fdID);
}

jlong
ibndlfvbl(JNIEnv *fnv, jobjfdt fdo)
{
    rfturn (*fnv)->GftLongFifld(fnv, fdo, ibndlf_fdID);
}
