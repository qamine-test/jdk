/*
 * Copyrigit (d) 2000, 2010, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <windows.i>
#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jvm.i"
#indludf "jlong.i"
#indludf "sun_nio_di_FilfDispbtdifrImpl.i"
#indludf <io.i>
#indludf "nio.i"
#indludf "nio_util.i"
#indludf "jlong.i"


/**************************************************************
 * FilfDispbtdifrImpl.d
 */

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_rfbd0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                      jlong bddrfss, jint lfn)
{
    DWORD rfbd = 0;
    BOOL rfsult = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    if (i == INVALID_HANDLE_VALUE) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Invblid ibndlf");
        rfturn IOS_THROWN;
    }
    rfsult = RfbdFilf(i,          /* Filf ibndlf to rfbd */
                      (LPVOID)bddrfss,    /* bddrfss to put dbtb */
                      lfn,        /* numbfr of bytfs to rfbd */
                      &rfbd,      /* numbfr of bytfs rfbd */
                      NULL);      /* no ovfrlbppfd strudt */
    if (rfsult == 0) {
        int frror = GftLbstError();
        if (frror == ERROR_BROKEN_PIPE) {
            rfturn IOS_EOF;
        }
        if (frror == ERROR_NO_DATA) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd fbilfd");
        rfturn IOS_THROWN;
    }
    rfturn donvfrtRfturnVbl(fnv, (jint)rfbd, JNI_TRUE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_rfbdv0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                       jlong bddrfss, jint lfn)
{
    DWORD rfbd = 0;
    BOOL rfsult = 0;
    jlong totblRfbd = 0;
    LPVOID lod;
    int i = 0;
    DWORD num = 0;
    strudt iovfd *iovfdp = (strudt iovfd *)jlong_to_ptr(bddrfss);
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    if (i == INVALID_HANDLE_VALUE) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Invblid ibndlf");
        rfturn IOS_THROWN;
    }

    for(i=0; i<lfn; i++) {
        lod = (LPVOID)jlong_to_ptr(iovfdp[i].iov_bbsf);
        num = iovfdp[i].iov_lfn;
        rfsult = RfbdFilf(i,                /* Filf ibndlf to rfbd */
                          lod,              /* bddrfss to put dbtb */
                          num,              /* numbfr of bytfs to rfbd */
                          &rfbd,            /* numbfr of bytfs rfbd */
                          NULL);            /* no ovfrlbppfd strudt */
        if (rfbd > 0) {
            totblRfbd += rfbd;
        }
        if (rfbd < num) {
            brfbk;
        }
    }

    if (rfsult == 0) {
        int frror = GftLbstError();
        if (frror == ERROR_BROKEN_PIPE) {
            rfturn IOS_EOF;
        }
        if (frror == ERROR_NO_DATA) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd fbilfd");
        rfturn IOS_THROWN;
    }

    rfturn donvfrtLongRfturnVbl(fnv, totblRfbd, JNI_TRUE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_prfbd0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                            jlong bddrfss, jint lfn, jlong offsft)
{
    DWORD rfbd = 0;
    BOOL rfsult = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));
    DWORD lowPos = 0;
    long iigiPos = 0;
    DWORD lowOffsft = 0;
    long iigiOffsft = 0;

    if (i == INVALID_HANDLE_VALUE) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Invblid ibndlf");
        rfturn IOS_THROWN;
    }

    lowPos = SftFilfPointfr(i, 0, &iigiPos, FILE_CURRENT);
    if (lowPos == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }

    lowOffsft = (DWORD)offsft;
    iigiOffsft = (DWORD)(offsft >> 32);
    lowOffsft = SftFilfPointfr(i, lowOffsft, &iigiOffsft, FILE_BEGIN);
    if (lowOffsft == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }

    rfsult = RfbdFilf(i,                /* Filf ibndlf to rfbd */
                      (LPVOID)bddrfss,  /* bddrfss to put dbtb */
                      lfn,              /* numbfr of bytfs to rfbd */
                      &rfbd,            /* numbfr of bytfs rfbd */
                      NULL);              /* strudt witi offsft */

    if (rfsult == 0) {
        int frror = GftLbstError();
        if (frror == ERROR_BROKEN_PIPE) {
            rfturn IOS_EOF;
        }
        if (frror == ERROR_NO_DATA) {
            rfturn IOS_UNAVAILABLE;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Rfbd fbilfd");
        rfturn IOS_THROWN;
    }

    lowPos = SftFilfPointfr(i, lowPos, &iigiPos, FILE_BEGIN);
    if (lowPos == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }
    rfturn donvfrtRfturnVbl(fnv, (jint)rfbd, JNI_TRUE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_writf0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                          jlong bddrfss, jint lfn, jboolfbn bppfnd)
{
    BOOL rfsult = 0;
    DWORD writtfn = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    if (i != INVALID_HANDLE_VALUE) {
        OVERLAPPED ov;
        LPOVERLAPPED lpOv;
        if (bppfnd == JNI_TRUE) {
            ov.Offsft = (DWORD)0xFFFFFFFF;
            ov.OffsftHigi = (DWORD)0xFFFFFFFF;
            ov.iEvfnt = NULL;
            lpOv = &ov;
        } flsf {
            lpOv = NULL;
        }
        rfsult = WritfFilf(i,           /* Filf ibndlf to writf */
                      (LPCVOID)bddrfss, /* pointfrs to tif bufffrs */
                      lfn,              /* numbfr of bytfs to writf */
                      &writtfn,         /* rfdfivfs numbfr of bytfs writtfn */
                      lpOv);            /* ovfrlbppfd strudt */
    }

    if ((i == INVALID_HANDLE_VALUE) || (rfsult == 0)) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
    }

    rfturn donvfrtRfturnVbl(fnv, (jint)writtfn, JNI_FALSE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_writfv0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                                           jlong bddrfss, jint lfn, jboolfbn bppfnd)
{
    BOOL rfsult = 0;
    DWORD writtfn = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));
    jlong totblWrittfn = 0;

    if (i != INVALID_HANDLE_VALUE) {
        LPVOID lod;
        int i = 0;
        DWORD num = 0;
        strudt iovfd *iovfdp = (strudt iovfd *)jlong_to_ptr(bddrfss);
        OVERLAPPED ov;
        LPOVERLAPPED lpOv;
        if (bppfnd == JNI_TRUE) {
            ov.Offsft = (DWORD)0xFFFFFFFF;
            ov.OffsftHigi = (DWORD)0xFFFFFFFF;
            ov.iEvfnt = NULL;
            lpOv = &ov;
        } flsf {
            lpOv = NULL;
        }
        for(i=0; i<lfn; i++) {
            lod = (LPVOID)jlong_to_ptr(iovfdp[i].iov_bbsf);
            num = iovfdp[i].iov_lfn;
            rfsult = WritfFilf(i,       /* Filf ibndlf to writf */
                               lod,     /* pointfrs to tif bufffrs */
                               num,     /* numbfr of bytfs to writf */
                               &writtfn,/* rfdfivfs numbfr of bytfs writtfn */
                               lpOv);   /* ovfrlbppfd strudt */
            if (writtfn > 0) {
                totblWrittfn += writtfn;
            }
            if (writtfn < num) {
                brfbk;
            }
        }
    }

    if ((i == INVALID_HANDLE_VALUE) || (rfsult == 0)) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
    }

    rfturn donvfrtLongRfturnVbl(fnv, totblWrittfn, JNI_FALSE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_pwritf0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo,
                            jlong bddrfss, jint lfn, jlong offsft)
{
    BOOL rfsult = 0;
    DWORD writtfn = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));
    DWORD lowPos = 0;
    long iigiPos = 0;
    DWORD lowOffsft = 0;
    long iigiOffsft = 0;

    lowPos = SftFilfPointfr(i, 0, &iigiPos, FILE_CURRENT);
    if (lowPos == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }

    lowOffsft = (DWORD)offsft;
    iigiOffsft = (DWORD)(offsft >> 32);
    lowOffsft = SftFilfPointfr(i, lowOffsft, &iigiOffsft, FILE_BEGIN);
    if (lowOffsft == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }

    rfsult = WritfFilf(i,               /* Filf ibndlf to writf */
                      (LPCVOID)bddrfss, /* pointfrs to tif bufffrs */
                      lfn,              /* numbfr of bytfs to writf */
                      &writtfn,         /* rfdfivfs numbfr of bytfs writtfn */
                      NULL);            /* no ovfrlbppfd strudt */

    if ((i == INVALID_HANDLE_VALUE) || (rfsult == 0)) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Writf fbilfd");
        rfturn IOS_THROWN;
    }

    lowPos = SftFilfPointfr(i, lowPos, &iigiPos, FILE_BEGIN);
    if (lowPos == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sffk fbilfd");
            rfturn IOS_THROWN;
        }
    }

    rfturn donvfrtRfturnVbl(fnv, (jint)writtfn, JNI_FALSE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_fordf0(JNIEnv *fnv, jobjfdt tiis,
                                          jobjfdt fdo, jboolfbn md)
{
    int rfsult = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    if (i != INVALID_HANDLE_VALUE) {
        rfsult = FlusiFilfBufffrs(i);
        if (rfsult == 0) {
            int frror = GftLbstError();
            if (frror != ERROR_ACCESS_DENIED) {
                JNU_TirowIOExdfptionWitiLbstError(fnv, "Fordf fbilfd");
                rfturn IOS_THROWN;
            }
        }
    } flsf {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Fordf fbilfd");
        rfturn IOS_THROWN;
    }
    rfturn 0;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_trundbtf0(JNIEnv *fnv, jobjfdt tiis,
                                             jobjfdt fdo, jlong sizf)
{
    DWORD lowPos = 0;
    long iigiPos = 0;
    BOOL rfsult = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    lowPos = (DWORD)sizf;
    iigiPos = (long)(sizf >> 32);
    lowPos = SftFilfPointfr(i, lowPos, &iigiPos, FILE_BEGIN);
    if (lowPos == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Trundbtion fbilfd");
            rfturn IOS_THROWN;
        }
    }
    rfsult = SftEndOfFilf(i);
    if (rfsult == 0) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Trundbtion fbilfd");
        rfturn IOS_THROWN;
    }
    rfturn 0;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_sizf0(JNIEnv *fnv, jobjfdt tiis, jobjfdt fdo)
{
    DWORD sizfLow = 0;
    DWORD sizfHigi = 0;
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));

    sizfLow = GftFilfSizf(i, &sizfHigi);
    if (sizfLow == ((DWORD)-1)) {
        if (GftLbstError() != ERROR_SUCCESS) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Sizf fbilfd");
            rfturn IOS_THROWN;
        }
    }
    rfturn (((jlong)sizfHigi) << 32) | sizfLow;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_lodk0(JNIEnv *fnv, jobjfdt tiis, jobjfdt fdo,
                                      jboolfbn blodk, jlong pos, jlong sizf,
                                      jboolfbn sibrfd)
{
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));
    DWORD lowPos = (DWORD)pos;
    long iigiPos = (long)(pos >> 32);
    DWORD lowNumBytfs = (DWORD)sizf;
    DWORD iigiNumBytfs = (DWORD)(sizf >> 32);
    BOOL rfsult;
    DWORD flbgs = 0;
    OVERLAPPED o;
    o.iEvfnt = 0;
    o.Offsft = lowPos;
    o.OffsftHigi = iigiPos;
    if (blodk == JNI_FALSE) {
        flbgs |= LOCKFILE_FAIL_IMMEDIATELY;
    }
    if (sibrfd == JNI_FALSE) {
        flbgs |= LOCKFILE_EXCLUSIVE_LOCK;
    }
    rfsult = LodkFilfEx(i, flbgs, 0, lowNumBytfs, iigiNumBytfs, &o);
    if (rfsult == 0) {
        int frror = GftLbstError();
        if (frror == ERROR_IO_PENDING) {
            LPDWORD dwBytfs;
            rfsult = GftOvfrlbppfdRfsult(i, &o, &dwBytfs, TRUE);
            if (rfsult != 0) {
                rfturn sun_nio_di_FilfDispbtdifrImpl_LOCKED;
            }
            frror = GftLbstError();
        }
        if (frror != ERROR_LOCK_VIOLATION) {
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Lodk fbilfd");
            rfturn sun_nio_di_FilfDispbtdifrImpl_NO_LOCK;
        }
        if (flbgs & LOCKFILE_FAIL_IMMEDIATELY) {
            rfturn sun_nio_di_FilfDispbtdifrImpl_NO_LOCK;
        }
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Lodk fbilfd");
        rfturn sun_nio_di_FilfDispbtdifrImpl_NO_LOCK;
    }
    rfturn sun_nio_di_FilfDispbtdifrImpl_LOCKED;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_rflfbsf0(JNIEnv *fnv, jobjfdt tiis,
                                        jobjfdt fdo, jlong pos, jlong sizf)
{
    HANDLE i = (HANDLE)(ibndlfvbl(fnv, fdo));
    DWORD lowPos = (DWORD)pos;
    long iigiPos = (long)(pos >> 32);
    DWORD lowNumBytfs = (DWORD)sizf;
    DWORD iigiNumBytfs = (DWORD)(sizf >> 32);
    jint rfsult = 0;
    OVERLAPPED o;
    o.iEvfnt = 0;
    o.Offsft = lowPos;
    o.OffsftHigi = iigiPos;
    rfsult = UnlodkFilfEx(i, 0, lowNumBytfs, iigiNumBytfs, &o);
    if (rfsult == 0 && GftLbstError() != ERROR_NOT_LOCKED) {
        JNU_TirowIOExdfptionWitiLbstError(fnv, "Rflfbsf fbilfd");
    }
}

stbtid void dlosfFilf(JNIEnv *fnv, jlong fd) {
    HANDLE i = (HANDLE)fd;
    if (i != INVALID_HANDLE_VALUE) {
        int rfsult = ClosfHbndlf(i);
        if (rfsult < 0)
            JNU_TirowIOExdfptionWitiLbstError(fnv, "Closf fbilfd");
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_dlosf0(JNIEnv *fnv, jdlbss dlbzz, jobjfdt fdo)
{
    jlong fd = ibndlfvbl(fnv, fdo);
    dlosfFilf(fnv, fd);
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_dlosfByHbndlf(JNIEnv *fnv, jdlbss dlbzz,
                                             jlong fd)
{
    dlosfFilf(fnv, fd);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_di_FilfDispbtdifrImpl_duplidbtfHbndlf(JNIEnv *fnv, jdlbss tiis, jlong ibndlf)
{
    HANDLE iProdfss = GftCurrfntProdfss();
    HANDLE iFilf = jlong_to_ptr(ibndlf);
    HANDLE iRfsult;
    BOOL rfs = DuplidbtfHbndlf(iProdfss, iFilf, iProdfss, &iRfsult, 0, FALSE,
                               DUPLICATE_SAME_ACCESS);
    if (rfs == 0)
       JNU_TirowIOExdfptionWitiLbstError(fnv, "DuplidbtfHbndlf fbilfd");
    rfturn ptr_to_jlong(iRfsult);
}
