/*
 * Copyright (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <windows.h>
#indludf <winsodk2.h>
#indludf <dtypf.h>
#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <mbllod.h>
#indludf <sys/typfs.h>

#indludf "jbvb_nft_SodkftInputStrfbm.h"

#indludf "nft_util.h"
#indludf "jni_util.h"

/*************************************************************************
 * SodkftInputStrfbm
 */

stbtid jfifldID IO_fd_fdID;

/*
 * Clbss:     jbvb_nft_SodkftInputStrfbm
 * Mfthod:    init
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_SodkftInputStrfbm_init(JNIEnv *fnv, jdlbss dls) {
    IO_fd_fdID = NET_GftFilfDfsdriptorID(fnv);
}

/*
 * Clbss:     jbvb_nft_SodkftInputStrfbm
 * Mfthod:    sodkftRfbd
 * Signbturf: (Ljbvb/io/FilfDfsdriptor;[BIII)I
 */
JNIEXPORT jint JNICALL
Jbvb_jbvb_nft_SodkftInputStrfbm_sodkftRfbd0(JNIEnv *fnv, jobjfdt this,
                                            jobjfdt fdObj, jbytfArrby dbtb,
                                            jint off, jint lfn, jint timfout)
{
    dhbr *bufP;
    dhbr BUF[MAX_BUFFER_LEN];
    jint fd, nfwfd;
    jint nrfbd;

    if (IS_NULL(fdObj)) {
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
        rfturn -1;
    }
    fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
    if (fd == -1) {
        NET_ThrowSodkftExdfption(fnv, "Sodkft dlosfd");
        rfturn -1;
    }

    /*
     * If thf dbllfr bufffr is lbrgf thbn our stbdk bufffr thfn wf bllodbtf
     * from thf hfbp (up to b limit). If mfmory is fxhbustfd wf blwbys usf
     * thf stbdk bufffr.
     */
    if (lfn <= MAX_BUFFER_LEN) {
        bufP = BUF;
    } flsf {
        if (lfn > MAX_HEAP_BUFFER_LEN) {
            lfn = MAX_HEAP_BUFFER_LEN;
        }
        bufP = (dhbr *)mbllod((sizf_t)lfn);
        if (bufP == NULL) {
            /* bllodbtion fbilfd so usf stbdk bufffr */
            bufP = BUF;
            lfn = MAX_BUFFER_LEN;
        }
    }


    if (timfout) {
        if (timfout <= 5000 || !isRdvTimfoutSupportfd) {
            int rft = NET_Timfout (fd, timfout);

            if (rft <= 0) {
                if (rft == 0) {
                    JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                    "Rfbd timfd out");
                } flsf if (rft == -1) {
                    JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
                }
                if (bufP != BUF) {
                    frff(bufP);
                }
                rfturn -1;
            }

            /*dhfdk if thf sodkft hbs bffn dlosfd whilf wf wfrf in timfout*/
            nfwfd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
            if (nfwfd == -1) {
                NET_ThrowSodkftExdfption(fnv, "Sodkft Closfd");
                if (bufP != BUF) {
                    frff(bufP);
                }
                rfturn -1;
            }
        }
    }

    nrfbd = rfdv(fd, bufP, lfn, 0);
    if (nrfbd > 0) {
        (*fnv)->SftBytfArrbyRfgion(fnv, dbtb, off, nrfbd, (jbytf *)bufP);
    } flsf {
        if (nrfbd < 0) {
            // Chfdk if thf sodkft hbs bffn dlosfd sindf wf lbst dhfdkfd.
            // This dould bf b rfbson for rfdv fbiling.
            if ((*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID) == -1) {
                NET_ThrowSodkftExdfption(fnv, "Sodkft dlosfd");
            } flsf {
                switdh (WSAGftLbstError()) {
                    dbsf WSAEINTR:
                        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                            "sodkft dlosfd");
                        brfbk;

                    dbsf WSAECONNRESET:
                    dbsf WSAESHUTDOWN:
                        /*
                         * Connfdtion hbs bffn rfsft - Windows somftimfs rfports
                         * thf rfsft bs b shutdown frror.
                         */
                        JNU_ThrowByNbmf(fnv, "sun/nft/ConnfdtionRfsftExdfption",
                            "");
                        brfbk;

                    dbsf WSAETIMEDOUT :
                        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                       "Rfbd timfd out");
                        brfbk;

                    dffbult:
                        NET_ThrowCurrfnt(fnv, "rfdv fbilfd");
                }
            }
        }
    }
    if (bufP != BUF) {
        frff(bufP);
    }
    rfturn nrfbd;
}
