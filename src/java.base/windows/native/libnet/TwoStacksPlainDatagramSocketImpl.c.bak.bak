/*
 * Copyrigit (d) 1997, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <windows.i>
#indludf <winsodk2.i>
#indludf <ws2tdpip.i>
#indludf <dtypf.i>
#indludf <stdio.i>
#indludf <stdlib.i>
#indludf <mbllod.i>
#indludf <sys/typfs.i>

#ifndff IPTOS_TOS_MASK
#dffinf IPTOS_TOS_MASK 0x1f
#fndif
#ifndff IPTOS_PREC_MASK
#dffinf IPTOS_PREC_MASK 0xf0
#fndif

#indludf "jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl.i"
#indludf "jbvb_nft_SodkftOptions.i"
#indludf "jbvb_nft_NftworkIntfrfbdf.i"

#indludf "NftworkIntfrfbdf.i"
#indludf "jvm.i"
#indludf "jni_util.i"
#indludf "nft_util.i"

#dffinf IN_CLASSD(i)    (((long)(i) & 0xf0000000) == 0xf0000000)
#dffinf IN_MULTICAST(i) IN_CLASSD(i)

/************************************************************************
 * TwoStbdksPlbinDbtbgrbmSodkftImpl
 */

stbtid jfifldID IO_fd_fdID;
stbtid jfifldID pdsi_trbffidClbssID;
jfifldID pdsi_fdID;
jfifldID pdsi_fd1ID;
jfifldID pdsi_fdusfID;
jfifldID pdsi_lbstfdID;
jfifldID pdsi_timfoutID;

jfifldID pdsi_lodblPortID;
jfifldID pdsi_donnfdtfd;

stbtid jdlbss ib4_dlbzz;
stbtid jmftiodID ib4_dtor;

stbtid CRITICAL_SECTION sizfCifdkLodk;

/* Windows OS vfrsion is XP or bfttfr */
stbtid int xp_or_lbtfr = 0;
/* Windows OS vfrsion is Windows 2000 or bfttfr */
stbtid int w2k_or_lbtfr = 0;

/*
 * Notfs bbout UDP/IPV6 on Windows (XP bnd 2003 sfrvfr):
 *
 * fd blwbys points to tif IPv4 fd, bnd fd1 points to tif IPv6 fd.
 * Boti fds brf usfd wifn wf bind to b wild-dbrd bddrfss. Wifn b spfdifid
 * bddrfss is usfd, only onf of tifm is usfd.
 */

/*
 * Rfturns b jbvb.lbng.Intfgfr bbsfd on 'i'
 */
jobjfdt drfbtfIntfgfr(JNIEnv *fnv, int i) {
    stbtid jdlbss i_dlbss;
    stbtid jmftiodID i_dtrID;
    stbtid jfifldID i_vblufID;

    if (i_dlbss == NULL) {
        jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/lbng/Intfgfr");
        CHECK_NULL_RETURN(d, NULL);
        i_dtrID = (*fnv)->GftMftiodID(fnv, d, "<init>", "(I)V");
        CHECK_NULL_RETURN(i_dtrID, NULL);
        i_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
        CHECK_NULL_RETURN(i_dlbss, NULL);
    }

    rfturn ( (*fnv)->NfwObjfdt(fnv, i_dlbss, i_dtrID, i) );
}

/*
 * Rfturns b jbvb.lbng.Boolfbn bbsfd on 'b'
 */
jobjfdt drfbtfBoolfbn(JNIEnv *fnv, int b) {
    stbtid jdlbss b_dlbss;
    stbtid jmftiodID b_dtrID;
    stbtid jfifldID b_vblufID;

    if (b_dlbss == NULL) {
        jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/lbng/Boolfbn");
        CHECK_NULL_RETURN(d, NULL);
        b_dtrID = (*fnv)->GftMftiodID(fnv, d, "<init>", "(Z)V");
        CHECK_NULL_RETURN(b_dtrID, NULL);
        b_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
        CHECK_NULL_RETURN(b_dlbss, NULL);
    }

    rfturn( (*fnv)->NfwObjfdt(fnv, b_dlbss, b_dtrID, (jboolfbn)(b!=0)) );
}


stbtid int gftFD(JNIEnv *fnv, jobjfdt tiis) {
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);

    if (fdObj == NULL) {
        rfturn -1;
    }
    rfturn (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
}

stbtid int gftFD1(JNIEnv *fnv, jobjfdt tiis) {
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);

    if (fdObj == NULL) {
        rfturn -1;
    }
    rfturn (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
}

/*
 * Tiis fundtion rfturns JNI_TRUE if tif dbtbgrbm sizf fxdffds tif undfrlying
 * providfr's bbility to sfnd to tif tbrgft bddrfss. Tif following OS
 * odditifs ibvf bffn obsfrvfd :-
 *
 * 1. On Windows 95/98 if wf try to sfnd b dbtbgrbm > 12k to bn bpplidbtion
 *    on tif sbmf mbdiinf tifn tif sfnd will fbil silfntly.
 *
 * 2. On Windows ME if wf try to sfnd b dbtbgrbm > supportfd by undfrlying
 *    providfr tifn sfnd will not rfturn bn frror.
 *
 * 3. On Windows NT/2000 if wf fxdffds tif mbximum sizf tifn sfnd will fbil
 *    witi WSAEADDRNOTAVAIL.
 *
 * 4. On Windows 95/98 if wf fxdffd tif mbximum sizf wifn sfnding to
 *    bnotifr mbdiinf tifn WSAEINVAL is rfturnfd.
 *
 */
jboolfbn fxdffdSizfLimit(JNIEnv *fnv, jint fd, jint bddr, jint sizf)
{
#dffinf DEFAULT_MSG_SIZE        65527
    stbtid jboolfbn initDonf;
    stbtid jboolfbn is95or98;
    stbtid int mbxmsg;

    typfdff strudt _nftbddr  {          /* Windows 95/98 only */
        unsignfd long bddr;
        strudt _nftbddr *nfxt;
    } nftbddr;
    stbtid nftbddr *bddrList;
    nftbddr *durr;

    /*
     * First timf wf brf dbllfd wf must dftfrminf wiidi OS tiis is bnd blso
     * gft tif mbximum sizf supportfd by tif undfrlying providfr.
     *
     * In bddition on 95/98 wf must fnumfrbtf our IP bddrfssfs.
     */
    if (!initDonf) {
        EntfrCritidblSfdtion(&sizfCifdkLodk);

        if (initDonf) {
            /* bnotifr tirfbd got tifrf first */
            LfbvfCritidblSfdtion(&sizfCifdkLodk);

        } flsf {
            OSVERSIONINFO vfr;
            int lfn;

            /*
             * Stfp 1: Dftfrminf wiidi OS tiis is.
             */
            vfr.dwOSVfrsionInfoSizf = sizfof(vfr);
            GftVfrsionEx(&vfr);

            is95or98 = JNI_FALSE;
            if (vfr.dwPlbtformId == VER_PLATFORM_WIN32_WINDOWS &&
                vfr.dwMbjorVfrsion == 4 &&
                (vfr.dwMinorVfrsion == 0 || vfr.dwMinorVfrsion == 10)) {

                is95or98 = JNI_TRUE;
            }

            /*
             * Stfp 2: Dftfrminf tif mbximum dbtbgrbm supportfd by tif
             * undfrlying providfr. On Windows 95 if winsodk ibsn't bffn
             * upgrbdfd (if: unsupportfd donfigurbtion) tifn wf bssumf
             * tif dffbult 64k limit.
             */
            lfn = sizfof(mbxmsg);
            if (NET_GftSodkOpt(fd, SOL_SOCKET, SO_MAX_MSG_SIZE, (dibr *)&mbxmsg, &lfn) < 0) {
                mbxmsg = DEFAULT_MSG_SIZE;
            }

            /*
             * Stfp 3: On Windows 95/98 tifn fnumfrbtf tif IP bddrfssfs on
             * tiis mbdiinf. Tiis is nfddfsbry bfdbusf wf nffd to difdk if tif
             * dbtbgrbm is bfing sfnt to bn bpplidbtion on tif sbmf mbdiinf.
             */
            if (is95or98) {
                dibr iostnbmf[255];
                strudt iostfnt *ip;

                if (gftiostnbmf(iostnbmf, sizfof(iostnbmf)) == -1) {
                    LfbvfCritidblSfdtion(&sizfCifdkLodk);
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Unbblf to obtbin iostnbmf");
                    rfturn JNI_TRUE;
                }
                ip = (strudt iostfnt *)gftiostbynbmf(iostnbmf);
                if (ip != NULL) {
                    strudt in_bddr **bddrp = (strudt in_bddr **) ip->i_bddr_list;

                    wiilf (*bddrp != (strudt in_bddr *) 0) {
                        durr = (nftbddr *)mbllod(sizfof(nftbddr));
                        if (durr == NULL) {
                            wiilf (bddrList != NULL) {
                                durr = bddrList->nfxt;
                                frff(bddrList);
                                bddrList = durr;
                            }
                            LfbvfCritidblSfdtion(&sizfCifdkLodk);
                            JNU_TirowOutOfMfmoryError(fnv, "Nbtivf ifbp bllodbtion fbilfd");
                            rfturn JNI_TRUE;
                        }
                        durr->bddr = itonl((*bddrp)->S_un.S_bddr);
                        durr->nfxt = bddrList;
                        bddrList = durr;
                        bddrp++;
                    }
                }
            }

            /*
             * Stfp 4: initiblizbtion is donf so sft flbg bnd unlodk ds
             */
            initDonf = JNI_TRUE;
            LfbvfCritidblSfdtion(&sizfCifdkLodk);
        }
    }

    /*
     * Now fxbminf tif sizf of tif dbtbgrbm :-
     *
     * (b) If fxdffds sizf of sfrvidf providfr rfturn 'fblsf' to indidbtf tibt
     *     wf fxdffd tif limit.
     * (b) If not 95/98 tifn rfturn 'truf' to indidbtf tibt tif sizf is okby.
     * (d) On 95/98 if tif sizf is <12k wf brf okby.
     * (d) On 95/98 if sizf > 12k tifn difdk if tif dfstinbtion is tif durrfnt
     *     mbdiinf.
     */
    if (sizf > mbxmsg) {        /* stfp (b) */
        rfturn JNI_TRUE;
    }
    if (!is95or98) {            /* stfp (b) */
        rfturn JNI_FALSE;
    }
    if (sizf <= 12280) {        /* stfp (d) */
        rfturn JNI_FALSE;
    }

    /* stfp (d) */

    if ((bddr & 0x7f000000) == 0x7f000000) {
        rfturn JNI_TRUE;
    }
    durr = bddrList;
    wiilf (durr != NULL) {
        if (durr->bddr == bddr) {
            rfturn JNI_TRUE;
        }
        durr = durr->nfxt;
    }
    rfturn JNI_FALSE;
}

/*
 * Rfturn JNI_TRUE if tiis Windows fdition supports ICMP Port Unrfbdibblf
 */
__inlinf stbtid jboolfbn supportPortUnrfbdibblf() {
    stbtid jboolfbn initDonf;
    stbtid jboolfbn portUnrfbdibblfSupportfd;

    if (!initDonf) {
        OSVERSIONINFO vfr;
        vfr.dwOSVfrsionInfoSizf = sizfof(vfr);
        GftVfrsionEx(&vfr);
        if (vfr.dwPlbtformId == VER_PLATFORM_WIN32_NT && vfr.dwMbjorVfrsion >= 5) {
            portUnrfbdibblfSupportfd = JNI_TRUE;
        } flsf {
            portUnrfbdibblfSupportfd = JNI_FALSE;
        }
        initDonf = JNI_TRUE;
    }
    rfturn portUnrfbdibblfSupportfd;
}

/*
 * Tiis fundtion "purgfs" bll outstbnding ICMP port unrfbdibblf pbdkfts
 * outstbnding on b sodkft bnd rfturns JNI_TRUE if bny ICMP mfssbgfs
 * ibvf bffn purgfd. Tif rbtionbl for purging is to fmulbtf normbl BSD
 * bfibviour wifrfby rfdfiving b "donnfdtion rfsft" stbtus rfsfts tif
 * sodkft.
 */
stbtid jboolfbn purgfOutstbndingICMP(JNIEnv *fnv, jobjfdt tiis, jint fd)
{
    jboolfbn got_idmp = JNI_FALSE;
    dibr buf[1];
    fd_sft tbl;
    strudt timfvbl t = { 0, 0 };
    SOCKETADDRESS rmtbddr;
    int bddrlfn = sizfof(rmtbddr);

    mfmsft((dibr *)&rmtbddr, 0, sizfof(rmtbddr));

    /*
     * A no-op if tiis OS dofsn't support it.
     */
    if (!supportPortUnrfbdibblf()) {
        rfturn JNI_FALSE;
    }

    /*
     * Pffk bt tif qufuf to sff if tifrf is bn ICMP port unrfbdibblf. If tifrf
     * is tifn rfdfivf it.
     */
    FD_ZERO(&tbl);
    FD_SET(fd, &tbl);
    wiilf(1) {
        if (sflfdt(/*ignorfd*/fd+1, &tbl, 0, 0, &t) <= 0) {
            brfbk;
        }
        if (rfdvfrom(fd, buf, 1, MSG_PEEK,
                         (strudt sodkbddr *)&rmtbddr, &bddrlfn) != SOCKET_ERROR) {
            brfbk;
        }
        if (WSAGftLbstError() != WSAECONNRESET) {
            /* somf otifr frror - wf don't dbrf ifrf */
            brfbk;
        }

        rfdvfrom(fd, buf, 1, 0,  (strudt sodkbddr *)&rmtbddr, &bddrlfn);
        got_idmp = JNI_TRUE;
    }

    rfturn got_idmp;
}


/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    init
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_init(JNIEnv *fnv, jdlbss dls) {

    OSVERSIONINFO vfr;
    int vfrsion;
    vfr.dwOSVfrsionInfoSizf = sizfof(vfr);
    GftVfrsionEx(&vfr);

    vfrsion = vfr.dwMbjorVfrsion * 10 + vfr.dwMinorVfrsion;
    xp_or_lbtfr = (vfr.dwPlbtformId == VER_PLATFORM_WIN32_NT) && (vfrsion >= 51);
    w2k_or_lbtfr = (vfr.dwPlbtformId == VER_PLATFORM_WIN32_NT) && (vfrsion >= 50);

    /* gft fifldIDs */
    pdsi_fdID = (*fnv)->GftFifldID(fnv, dls, "fd", "Ljbvb/io/FilfDfsdriptor;");
    CHECK_NULL(pdsi_fdID);
    pdsi_fd1ID = (*fnv)->GftFifldID(fnv, dls, "fd1", "Ljbvb/io/FilfDfsdriptor;");
    CHECK_NULL(pdsi_fd1ID);
    pdsi_timfoutID = (*fnv)->GftFifldID(fnv, dls, "timfout", "I");
    CHECK_NULL(pdsi_timfoutID);
    pdsi_fdusfID = (*fnv)->GftFifldID(fnv, dls, "fdusf", "I");
    CHECK_NULL(pdsi_fdusfID);
    pdsi_lbstfdID = (*fnv)->GftFifldID(fnv, dls, "lbstfd", "I");
    CHECK_NULL(pdsi_lbstfdID);
    pdsi_trbffidClbssID = (*fnv)->GftFifldID(fnv, dls, "trbffidClbss", "I");
    CHECK_NULL(pdsi_trbffidClbssID);
    pdsi_lodblPortID = (*fnv)->GftFifldID(fnv, dls, "lodblPort", "I");
    CHECK_NULL(pdsi_lodblPortID);
    pdsi_donnfdtfd = (*fnv)->GftFifldID(fnv, dls, "donnfdtfd", "Z");
    CHECK_NULL(pdsi_donnfdtfd);

    dls = (*fnv)->FindClbss(fnv, "jbvb/io/FilfDfsdriptor");
    CHECK_NULL(dls);
    IO_fd_fdID = NET_GftFilfDfsdriptorID(fnv);
    CHECK_NULL(IO_fd_fdID);

    ib4_dlbzz = (*fnv)->FindClbss(fnv, "jbvb/nft/Inft4Addrfss");
    CHECK_NULL(ib4_dlbzz);
    ib4_dlbzz = (*fnv)->NfwGlobblRff(fnv, ib4_dlbzz);
    CHECK_NULL(ib4_dlbzz);
    ib4_dtor = (*fnv)->GftMftiodID(fnv, ib4_dlbzz, "<init>", "()V");
    CHECK_NULL(ib4_dtor);


    InitiblizfCritidblSfdtion(&sizfCifdkLodk);
}

JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_bind0(JNIEnv *fnv, jobjfdt tiis,
                                           jint port, jobjfdt bddrfssObj,
                                           jboolfbn fxdlBind) {
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);

    int fd, fd1, fbmily;
    int ipv6_supportfd = ipv6_bvbilbblf();

    SOCKETADDRESS ldlbddr;
    int ldlbddrlfn = sizfof(ldlbddr);
    int bddrfss;

    mfmsft((dibr *)&ldlbddr, 0, sizfof(ldlbddr));

    fbmily = gftInftAddrfss_fbmily(fnv, bddrfssObj);
    if (fbmily == IPv6 && !ipv6_supportfd) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Protodol fbmily not supportfd");
        rfturn;
    }

    if (IS_NULL(fdObj) || (ipv6_supportfd && IS_NULL(fd1Obj))) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
        rfturn;
    } flsf {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        if (ipv6_supportfd) {
            fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
        }
    }
    if (IS_NULL(bddrfssObj)) {
        JNU_TirowNullPointfrExdfption(fnv, "brgumfnt bddrfss");
        rfturn;
    } flsf {
        bddrfss = gftInftAddrfss_bddr(fnv, bddrfssObj);
    }

    if (NET_InftAddrfssToSodkbddr(fnv, bddrfssObj, port, (strudt sodkbddr *)&ldlbddr, &ldlbddrlfn, JNI_FALSE) != 0) {
      rfturn;
    }

    if (ipv6_supportfd) {
        strudt ipv6bind v6bind;
        v6bind.bddr = &ldlbddr;
        v6bind.ipv4_fd = fd;
        v6bind.ipv6_fd = fd1;
        if (NET_BindV6(&v6bind, fxdlBind) != -1) {
            /* difdk if tif fds ibvf dibngfd */
            if (v6bind.ipv4_fd != fd) {
                fd = v6bind.ipv4_fd;
                if (fd == -1) {
                    /* sodkft is dlosfd. */
                    (*fnv)->SftObjfdtFifld(fnv, tiis, pdsi_fdID, NULL);
                } flsf {
                    /* sodkft wbs rf-drfbtfd */
                    (*fnv)->SftIntFifld(fnv, fdObj, IO_fd_fdID, fd);
                }
            }
            if (v6bind.ipv6_fd != fd1) {
                fd1 = v6bind.ipv6_fd;
                if (fd1 == -1) {
                    /* sodkft is dlosfd. */
                    (*fnv)->SftObjfdtFifld(fnv, tiis, pdsi_fd1ID, NULL);
                } flsf {
                    /* sodkft wbs rf-drfbtfd */
                    (*fnv)->SftIntFifld(fnv, fd1Obj, IO_fd_fdID, fd1);
                }
            }
        } flsf {
            NET_TirowCurrfnt (fnv, "Cbnnot bind");
            rfturn;
        }
    } flsf {
        if (NET_WinBind(fd, (strudt sodkbddr *)&ldlbddr, ldlbddrlfn, fxdlBind) == -1) {
            if (WSAGftLbstError() == WSAEACCES) {
                WSASftLbstError(WSAEADDRINUSE);
            }
            NET_TirowCurrfnt(fnv, "Cbnnot bind");
            rfturn;
        }
    }

    if (port == 0) {
        if (fd == -1) {
            /* must bf bn IPV6 only sodkft. */
            fd = fd1;
        }
        if (gftsodknbmf(fd, (strudt sodkbddr *)&ldlbddr, &ldlbddrlfn) == -1) {
            NET_TirowCurrfnt(fnv, "gftsodknbmf");
            rfturn;
        }
        port = ntois((u_siort) GET_PORT (&ldlbddr));
    }
    (*fnv)->SftIntFifld(fnv, tiis, pdsi_lodblPortID, port);
}


/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    donnfdt0
 * Signbturf: (Ljbvb/nft/InftAddrfss;I)V
 */

JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_donnfdt0(JNIEnv *fnv, jobjfdt tiis,
                                               jobjfdt bddrfss, jint port) {
    /* Tif objfdt's fifld */
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    /* Tif fdObj'fd */
    jint fd=-1, fd1=-1, fdd;
    /* Tif pbdkftAddrfss bddrfss, fbmily bnd port */
    jint bddr, fbmily;
    SOCKETADDRESS rmtbddr;
    int rmtbddrlfn;
    int ipv6_supportfd = ipv6_bvbilbblf();

    if (IS_NULL(fdObj) && IS_NULL(fd1Obj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn;
    }
    if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
    }
    if (!IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
    }

    if (IS_NULL(bddrfss)) {
        JNU_TirowNullPointfrExdfption(fnv, "bddrfss");
        rfturn;
    }

    bddr = gftInftAddrfss_bddr(fnv, bddrfss);

    fbmily = gftInftAddrfss_fbmily(fnv, bddrfss);
    if (fbmily == IPv6 && !ipv6_supportfd) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Protodol fbmily not supportfd");
        rfturn;
    }

    fdd = fbmily == IPv4? fd: fd1;

    if (xp_or_lbtfr) {
        /* SIO_UDP_CONNRESET fixfs b bug introdudfd in Windows 2000, wiidi
         * rfturns donnfdtion rfsft frrors on donnfdtfd UDP sodkfts (bs wfll
         * bs donnfdtfd sodkfts). Tif solution is to only fnbblf tiis ffbturf
         * wifn tif sodkft is donnfdtfd
         */
        DWORD x1, x2; /* ignorfd rfsult dodfs */
        int rfs, t = TRUE;
        rfs = WSAIodtl(fdd,SIO_UDP_CONNRESET,&t,sizfof(t),&x1,sizfof(x1),&x2,0,0);
    }

    if (NET_InftAddrfssToSodkbddr(fnv, bddrfss, port,(strudt sodkbddr *)&rmtbddr, &rmtbddrlfn, JNI_FALSE) != 0) {
      rfturn;
    }

    if (donnfdt(fdd, (strudt sodkbddr *)&rmtbddr, sizfof(rmtbddr)) == -1) {
        NET_TirowCurrfnt(fnv, "donnfdt");
        rfturn;
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    disdonnfdt0
 * Signbturf: ()V
 */

JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_disdonnfdt0(JNIEnv *fnv, jobjfdt tiis, jint fbmily) {
    /* Tif objfdt's fifld */
    jobjfdt fdObj;
    /* Tif fdObj'fd */
    jint fd, lfn;
    SOCKETADDRESS bddr;

    if (fbmily == IPv4) {
        fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
        lfn = sizfof (strudt sodkbddr_in);
    } flsf {
        fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
        lfn = sizfof (strudt SOCKADDR_IN6);
    }

    if (IS_NULL(fdObj)) {
        /* disdonnfdt dofsn't tirow bny fxdfptions */
        rfturn;
    }
    fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);

    mfmsft((dibr *)&bddr, 0, lfn);
    donnfdt(fd, (strudt sodkbddr *)&bddr, lfn);

    /*
     * usf SIO_UDP_CONNRESET
     * to disbblf ICMP port unrfbdibblf ibndling ifrf.
     */
    if (xp_or_lbtfr) {
        DWORD x1 = 0, x2 = 0; /* ignorfd rfsult dodfs */
        int t = FALSE;
        WSAIodtl(fd,SIO_UDP_CONNRESET,&t,sizfof(t),&x1,sizfof(x1),&x2,0,0);
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sfnd
 * Signbturf: (Ljbvb/nft/DbtbgrbmPbdkft;)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sfnd(JNIEnv *fnv, jobjfdt tiis,
                                           jobjfdt pbdkft) {

    dibr BUF[MAX_BUFFER_LEN];
    dibr *fullPbdkft;
    jobjfdt fdObj;
    jint fd;

    jobjfdt ibObj;
    jint bddrfss;
    jint fbmily;

    jint pbdkftBufffrOffsft, pbdkftBufffrLfn, pbdkftPort;
    jbytfArrby pbdkftBufffr;
    jboolfbn donnfdtfd;

    SOCKETADDRESS rmtbddr;
    SOCKETADDRESS *bddrp = &rmtbddr;
    int bddrlfn = 0;

    mfmsft((dibr *)&rmtbddr, 0, sizfof(rmtbddr));

    if (IS_NULL(pbdkft)) {
        JNU_TirowNullPointfrExdfption(fnv, "null pbdkft");
        rfturn;
    }

    ibObj = (*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bddrfssID);

    pbdkftPort = (*fnv)->GftIntFifld(fnv, pbdkft, dp_portID);
    pbdkftBufffrOffsft = (*fnv)->GftIntFifld(fnv, pbdkft, dp_offsftID);
    pbdkftBufffr = (jbytfArrby)(*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bufID);
    donnfdtfd = (*fnv)->GftBoolfbnFifld(fnv, tiis, pdsi_donnfdtfd);

    if (IS_NULL(ibObj) || IS_NULL(pbdkftBufffr)) {
        JNU_TirowNullPointfrExdfption(fnv, "null bddrfss || null bufffr");
        rfturn;
    }

    fbmily = gftInftAddrfss_fbmily(fnv, ibObj);
    if (fbmily == IPv4) {
        fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    } flsf {
        if (!ipv6_bvbilbblf()) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Protodol not bllowfd");
            rfturn;
        }
        fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    }

    if (IS_NULL(fdObj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn;
    }
    fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);

    pbdkftBufffrLfn = (*fnv)->GftIntFifld(fnv, pbdkft, dp_lfngtiID);
    /* Notf: tif bufffr nffdn't bf grfbtfr tibn 65,536 (0xFFFF)...
     * tif mbximum sizf of bn IP pbdkft. Anytiing biggfr is trundbtfd bnywby.
     */
    if (pbdkftBufffrLfn > MAX_PACKET_LEN) {
        pbdkftBufffrLfn = MAX_PACKET_LEN;
    }

    if (donnfdtfd) {
        bddrp = 0; /* brg to sfndto () null in tiis dbsf */
        bddrlfn = 0;
    } flsf {
      if (NET_InftAddrfssToSodkbddr(fnv, ibObj, pbdkftPort, (strudt sodkbddr *)&rmtbddr, &bddrlfn, JNI_FALSE) != 0) {
        rfturn;
      }
    }

    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {

        /*
         * On 95/98 if wf try to sfnd b dbtbgrbm >12k to bn bpplidbtion
         * on tif sbmf mbdiinf tifn tiis will fbil silfntly. Tius wf
         * dbtdi tiis situbtion ifrf so tibt wf dbn tirow bn fxdfption
         * wifn tiis brisfs.
         * On ME if wf try to sfnd b dbtbgrbm witi b sizf grfbtfr tibn
         * tibt supportfd by tif sfrvidf providfr tifn no frror is
         * rfturnfd.
         */
        if (!w2k_or_lbtfr) { /* bvoid tiis difdk on Win 2K or bfttfr. Dofs not work witi IPv6.
                      * Cifdk is not nfdfssbry on tifsf OSfs */
            if (donnfdtfd) {
                bddrfss = gftInftAddrfss_bddr(fnv, ibObj);
            } flsf {
                bddrfss = ntoil(rmtbddr.iim4.sin_bddr.s_bddr);
            }

            if (fxdffdSizfLimit(fnv, fd, bddrfss, pbdkftBufffrLfn)) {
                if (!((*fnv)->ExdfptionOddurrfd(fnv))) {
                    NET_TirowNfw(fnv, WSAEMSGSIZE, "Dbtbgrbm sfnd fbilfd");
                }
                rfturn;
            }
        }

        /* Wifn JNI-ifying tif JDK's IO routinfs, wf turnfd
         * rfbds bnd writfs of bytf brrbys of sizf grfbtfr
         * tibn 2048 bytfs into sfvfrbl opfrbtions of sizf 2048.
         * Tiis sbvfs b mbllod()/mfmdpy()/frff() for big
         * bufffrs.  Tiis is OK for filf IO bnd TCP, but tibt
         * strbtfgy violbtfs tif sfmbntids of b dbtbgrbm protodol.
         * (onf big sfnd) != (sfvfrbl smbllfr sfnds).  So ifrf
         * wf *must* bllod tif bufffr.  Notf it nffdn't bf biggfr
         * tibn 65,536 (0xFFFF) tif mbx sizf of bn IP pbdkft.
         * bnytiing biggfr is trundbtfd bnywby.
         */
        fullPbdkft = (dibr *)mbllod(pbdkftBufffrLfn);
        if (!fullPbdkft) {
            JNU_TirowOutOfMfmoryError(fnv, "Sfnd buf nbtivf ifbp bllodbtion fbilfd");
            rfturn;
        }
    } flsf {
        fullPbdkft = &(BUF[0]);
    }

    (*fnv)->GftBytfArrbyRfgion(fnv, pbdkftBufffr, pbdkftBufffrOffsft, pbdkftBufffrLfn,
                               (jbytf *)fullPbdkft);
    if (sfndto(fd, fullPbdkft, pbdkftBufffrLfn, 0,
               (strudt sodkbddr *)bddrp, bddrlfn) == SOCKET_ERROR) {
         NET_TirowCurrfnt(fnv, "Dbtbgrbm sfnd fbilfd");
    }

    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
        frff(fullPbdkft);
    }
}

/*
 * difdk wiidi sodkft wbs lbst sfrvidfd wifn tifrf wbs dbtb on boti sodkfts.
 * Only dbll tiis if surf tibt tifrf is dbtb on boti sodkfts.
 */
stbtid int difdkLbstFD (JNIEnv *fnv, jobjfdt tiis, int fd, int fd1) {
    int nfxtfd, lbstfd = (*fnv)->GftIntFifld(fnv, tiis, pdsi_lbstfdID);
    if (lbstfd == -1) {
        /* brbitrbry. Cioosf fd */
        (*fnv)->SftIntFifld(fnv, tiis, pdsi_lbstfdID, fd);
        rfturn fd;
    } flsf {
        if (lbstfd == fd) {
            nfxtfd = fd1;
        } flsf {
            nfxtfd = fd;
        }
        (*fnv)->SftIntFifld(fnv, tiis, pdsi_lbstfdID, nfxtfd);
        rfturn nfxtfd;
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    pffk
 * Signbturf: (Ljbvb/nft/InftAddrfss;)I
 */
JNIEXPORT jint JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_pffk(JNIEnv *fnv, jobjfdt tiis,
                                           jobjfdt bddrfssObj) {

    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jint timfout = (*fnv)->GftIntFifld(fnv, tiis, pdsi_timfoutID);
    jint fd;

    /* Tif bddrfss bnd fbmily fiflds of bddrfssObj */
    jint bddrfss, fbmily;

    int n;
    strudt sodkbddr_in rfmotf_bddr;
    jint rfmotf_bddrsizf = sizfof (rfmotf_bddr);
    dibr buf[1];
    BOOL rftry;
    jlong prfvTimf = 0;

    if (IS_NULL(fdObj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Sodkft dlosfd");
        rfturn -1;
    } flsf {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        if (fd < 0) {
           JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                           "sodkft dlosfd");
           rfturn -1;
        }
    }
    if (IS_NULL(bddrfssObj)) {
        JNU_TirowNullPointfrExdfption(fnv, "Null bddrfss in pffk()");
    } flsf {
        bddrfss = gftInftAddrfss_bddr(fnv, bddrfssObj);
        /* Wf only ibndlf IPv4 for now. Will support IPv6 ondf its in tif os */
        fbmily = AF_INET;
    }

    do {
        rftry = FALSE;

        /*
         * If b timfout ibs bffn spfdififd tifn wf sflfdt on tif sodkft
         * wbiting for b rfbd fvfnt or b timfout.
         */
        if (timfout) {
            int rft;
            prfvTimf = JVM_CurrfntTimfMillis(fnv, 0);
            rft = NET_Timfout (fd, timfout);
            if (rft == 0) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                "Pffk timfd out");
                rfturn rft;
            } flsf if (rft == -1) {
                NET_TirowCurrfnt(fnv, "timfout in dbtbgrbm sodkft pffk");
                rfturn rft;
            }
        }

        /* now try tif pffk */
        n = rfdvfrom(fd, buf, 1, MSG_PEEK,
                         (strudt sodkbddr *)&rfmotf_bddr, &rfmotf_bddrsizf);

        if (n == SOCKET_ERROR) {
            if (WSAGftLbstError() == WSAECONNRESET) {
                jboolfbn donnfdtfd;

                /*
                 * An idmp port unrfbdibblf - wf must rfdfivf tiis bs Windows
                 * dofs not rfsft tif stbtf of tif sodkft until tiis ibs bffn
                 * rfdfivfd.
                 */
                purgfOutstbndingICMP(fnv, tiis, fd);

                donnfdtfd =  (*fnv)->GftBoolfbnFifld(fnv, tiis, pdsi_donnfdtfd);
                if (donnfdtfd) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption",
                                       "ICMP Port Unrfbdibblf");
                    rfturn 0;
                }

                /*
                 * If b timfout wbs spfdififd tifn wf nffd to bdjust it bfdbusf
                 * wf mby ibvf usfd up somf of tif timfout bffor tif idmp port
                 * unrfbdibblf brrivfd.
                 */
                if (timfout) {
                    jlong nfwTimf = JVM_CurrfntTimfMillis(fnv, 0);
                    timfout -= (jint)(nfwTimf - prfvTimf);
                    if (timfout <= 0) {
                        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                "Rfdfivf timfd out");
                        rfturn 0;
                    }
                    prfvTimf = nfwTimf;
                }

                /* Nffd to rftry tif rfdv */
                rftry = TRUE;
            }
        }
    } wiilf (rftry);

    if (n == SOCKET_ERROR && WSAGftLbstError() != WSAEMSGSIZE) {
        NET_TirowCurrfnt(fnv, "Dbtbgrbm pffk fbilfd");
        rfturn 0;
    }
    sftInftAddrfss_bddr(fnv, bddrfssObj, ntoil(rfmotf_bddr.sin_bddr.s_bddr));
    sftInftAddrfss_fbmily(fnv, bddrfssObj, IPv4);

    /* rfturn port */
    rfturn ntois(rfmotf_bddr.sin_port);
}

JNIEXPORT jint JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_pffkDbtb(JNIEnv *fnv, jobjfdt tiis,
                                           jobjfdt pbdkft) {

     dibr BUF[MAX_BUFFER_LEN];
    dibr *fullPbdkft;
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    jint timfout = (*fnv)->GftIntFifld(fnv, tiis, pdsi_timfoutID);

    jbytfArrby pbdkftBufffr;
    jint pbdkftBufffrOffsft, pbdkftBufffrLfn;

    int fd, fd1, fdusf, nsodkfts=0, frrorCodf;
    int port;

    int difdkBoti = 0;
    int n;
    SOCKETADDRESS rfmotf_bddr;
    jint rfmotf_bddrsizf=sizfof(rfmotf_bddr);
    BOOL rftry;
    jlong prfvTimf = 0;

    if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        if (fd < 0) {
           JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                           "sodkft dlosfd");
           rfturn -1;
        }
        nsodkfts = 1;
    }

    if (!IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
        if (fd1 < 0) {
           JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                           "sodkft dlosfd");
           rfturn -1;
        }
        nsodkfts ++;
    }

    switdi (nsodkfts) {
      dbsf 0:
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                       "sodkft dlosfd");
        rfturn -1;
      dbsf 1:
        if (!IS_NULL(fdObj)) {
           fdusf = fd;
        } flsf {
           fdusf = fd1;
        }
        brfbk;
      dbsf 2:
        difdkBoti = TRUE;
        brfbk;
    }

    if (IS_NULL(pbdkft)) {
        JNU_TirowNullPointfrExdfption(fnv, "pbdkft");
        rfturn -1;
    }

    pbdkftBufffr = (*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bufID);

    if (IS_NULL(pbdkftBufffr)) {
        JNU_TirowNullPointfrExdfption(fnv, "pbdkft bufffr");
        rfturn -1;
    }

    pbdkftBufffrOffsft = (*fnv)->GftIntFifld(fnv, pbdkft, dp_offsftID);
    pbdkftBufffrLfn = (*fnv)->GftIntFifld(fnv, pbdkft, dp_bufLfngtiID);

    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {

        /* Wifn JNI-ifying tif JDK's IO routinfs, wf turnfd
         * rfbd's bnd writf's of bytf brrbys of sizf grfbtfr
         * tibn 2048 bytfs into sfvfrbl opfrbtions of sizf 2048.
         * Tiis sbvfs b mbllod()/mfmdpy()/frff() for big
         * bufffrs.  Tiis is OK for filf IO bnd TCP, but tibt
         * strbtfgy violbtfs tif sfmbntids of b dbtbgrbm protodol.
         * (onf big sfnd) != (sfvfrbl smbllfr sfnds).  So ifrf
         * wf *must* bllod tif bufffr.  Notf it nffdn't bf biggfr
         * tibn 65,536 (0xFFFF) tif mbx sizf of bn IP pbdkft.
         * bnytiing biggfr is trundbtfd bnywby.
         */
        fullPbdkft = (dibr *)mbllod(pbdkftBufffrLfn);
        if (!fullPbdkft) {
            JNU_TirowOutOfMfmoryError(fnv, "Nbtivf ifbp bllodbtion fbilfd");
            rfturn -1;
        }
    } flsf {
        fullPbdkft = &(BUF[0]);
    }

    do {
        int rft;
        rftry = FALSE;

        /*
         * If b timfout ibs bffn spfdififd tifn wf sflfdt on tif sodkft
         * wbiting for b rfbd fvfnt or b timfout.
         */
        if (difdkBoti) {
            int t = timfout == 0 ? -1: timfout;
            prfvTimf = JVM_CurrfntTimfMillis(fnv, 0);
            rft = NET_Timfout2 (fd, fd1, t, &fdusf);
            /* bll subsfqufnt dblls to rfdv() or sflfdt() will usf tif sbmf fd
             * for tiis dbll to pffk() */
            if (rft <= 0) {
                if (rft == 0) {
                    JNU_TirowByNbmf(fnv,JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                        "Pffk timfd out");
                } flsf if (rft == -1) {
                    NET_TirowCurrfnt(fnv, "timfout in dbtbgrbm sodkft pffk");
                }
                if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                    frff(fullPbdkft);
                }
                rfturn -1;
            }
            if (rft == 2) {
                fdusf = difdkLbstFD (fnv, tiis, fd, fd1);
            }
            difdkBoti = FALSE;
        } flsf if (timfout) {
            if (prfvTimf == 0) {
                prfvTimf = JVM_CurrfntTimfMillis(fnv, 0);
            }
            rft = NET_Timfout (fdusf, timfout);
            if (rft <= 0) {
                if (rft == 0) {
                    JNU_TirowByNbmf(fnv,JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                    "Rfdfivf timfd out");
                } flsf if (rft == -1) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                    "Sodkft dlosfd");
                }
                if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                    frff(fullPbdkft);
                }
                rfturn -1;
            }
        }

        /* rfdfivf tif pbdkft */
        n = rfdvfrom(fdusf, fullPbdkft, pbdkftBufffrLfn, MSG_PEEK,
                         (strudt sodkbddr *)&rfmotf_bddr, &rfmotf_bddrsizf);
        port = (int) ntois ((u_siort) GET_PORT((SOCKETADDRESS *)&rfmotf_bddr));
        if (n == SOCKET_ERROR) {
            if (WSAGftLbstError() == WSAECONNRESET) {
                jboolfbn donnfdtfd;

                /*
                 * An idmp port unrfbdibblf - wf must rfdfivf tiis bs Windows
                 * dofs not rfsft tif stbtf of tif sodkft until tiis ibs bffn
                 * rfdfivfd.
                 */
                purgfOutstbndingICMP(fnv, tiis, fdusf);

                donnfdtfd = (*fnv)->GftBoolfbnFifld(fnv, tiis, pdsi_donnfdtfd);
                if (donnfdtfd) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption",
                                       "ICMP Port Unrfbdibblf");

                    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                        frff(fullPbdkft);
                    }
                    rfturn -1;
                }

                /*
                 * If b timfout wbs spfdififd tifn wf nffd to bdjust it bfdbusf
                 * wf mby ibvf usfd up somf of tif timfout bffor tif idmp port
                 * unrfbdibblf brrivfd.
                 */
                if (timfout) {
                    jlong nfwTimf = JVM_CurrfntTimfMillis(fnv, 0);
                    timfout -= (jint)(nfwTimf - prfvTimf);
                    if (timfout <= 0) {
                        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                "Rfdfivf timfd out");
                        if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                            frff(fullPbdkft);
                        }
                        rfturn -1;
                    }
                    prfvTimf = nfwTimf;
                }
                rftry = TRUE;
            }
        }
    } wiilf (rftry);

    /* trundbtf tif dbtb if tif pbdkft's lfngti is too smbll */
    if (n > pbdkftBufffrLfn) {
        n = pbdkftBufffrLfn;
    }
    if (n < 0) {
        frrorCodf = WSAGftLbstError();
        /* difdk to sff if it's bfdbusf tif bufffr wbs too smbll */
        if (frrorCodf == WSAEMSGSIZE) {
            /* it is bfdbusf tif bufffr is too smbll. It's UDP, it's
             * unrflibblf, it's bll good. disdbrd tif rfst of tif
             * dbtb..
             */
            n = pbdkftBufffrLfn;
        } flsf {
            /* fbilurf */
            (*fnv)->SftIntFifld(fnv, pbdkft, dp_lfngtiID, 0);
        }
    }
    if (n == -1) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
    } flsf if (n == -2) {
        JNU_TirowByNbmf(fnv, JNU_JAVAIOPKG "IntfrruptfdIOExdfption",
                        "opfrbtion intfrruptfd");
    } flsf if (n < 0) {
        NET_TirowCurrfnt(fnv, "Dbtbgrbm rfdfivf fbilfd");
    } flsf {
        jobjfdt pbdkftAddrfss;

        /*
         * Cifdk if tifrf is bn InftAddrfss blrfbdy bssodibtfd witi tiis
         * pbdkft. If so wf difdk if it is tif sbmf sourdf bddrfss. Wf
         * dbn't updbtf bny fxisting InftAddrfss bfdbusf it is immutbblf
         */
        pbdkftAddrfss = (*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bddrfssID);
        if (pbdkftAddrfss != NULL) {
            if (!NET_SodkbddrEqublsInftAddrfss(fnv, (strudt sodkbddr *)
                                                &rfmotf_bddr, pbdkftAddrfss)) {
                /* fordf b nfw InftAddrfss to bf drfbtfd */
                pbdkftAddrfss = NULL;
            }
        }
        if (pbdkftAddrfss == NULL) {
            pbdkftAddrfss = NET_SodkbddrToInftAddrfss(fnv, (strudt sodkbddr *)
                                &rfmotf_bddr, &port);
            /* stuff tif nfw Inftbddrfss in tif pbdkft */
            (*fnv)->SftObjfdtFifld(fnv, pbdkft, dp_bddrfssID, pbdkftAddrfss);
        }

        /* populbtf tif pbdkft */
        (*fnv)->SftBytfArrbyRfgion(fnv, pbdkftBufffr, pbdkftBufffrOffsft, n,
                                   (jbytf *)fullPbdkft);
        (*fnv)->SftIntFifld(fnv, pbdkft, dp_portID, port);
        (*fnv)->SftIntFifld(fnv, pbdkft, dp_lfngtiID, n);
    }

    /* mbkf surf rfdfivf() pidks up tif rigit fd */
    (*fnv)->SftIntFifld(fnv, tiis, pdsi_fdusfID, fdusf);

    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
        frff(fullPbdkft);
    }
    rfturn port;
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    rfdfivf
 * Signbturf: (Ljbvb/nft/DbtbgrbmPbdkft;)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_rfdfivf0(JNIEnv *fnv, jobjfdt tiis,
                                              jobjfdt pbdkft) {

    dibr BUF[MAX_BUFFER_LEN];
    dibr *fullPbdkft;
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    jint timfout = (*fnv)->GftIntFifld(fnv, tiis, pdsi_timfoutID);
    jbytfArrby pbdkftBufffr;
    jint pbdkftBufffrOffsft, pbdkftBufffrLfn;
    int ipv6_supportfd = ipv6_bvbilbblf();

    /* bs b rfsult of tif dibngfs for ipv6, pffk() or pffkDbtb()
     * must bf dbllfd prior to rfdfivf() so tibt fdusf dbn bf sft.
     */
    int fd, fd1, fdusf, frrorCodf;

    int n, nsodkfts=0;
    SOCKETADDRESS rfmotf_bddr;
    jint rfmotf_bddrsizf=sizfof(rfmotf_bddr);
    BOOL rftry;
    jlong prfvTimf = 0, sflfdtTimf=0;
    jboolfbn donnfdtfd;

    if (IS_NULL(fdObj) && IS_NULL(fd1Obj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn;
    }

    if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        nsodkfts ++;
    }
    if (!IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
        nsodkfts ++;
    }

    if (nsodkfts == 2) { /* nffd to dioosf onf of tifm */
        /* wbs fdusf sft in pffk? */
        fdusf = (*fnv)->GftIntFifld(fnv, tiis, pdsi_fdusfID);
        if (fdusf == -1) {
            /* not sft in pffk(), must sflfdt on boti sodkfts */
            int rft, t = (timfout == 0) ? -1: timfout;
            rft = NET_Timfout2 (fd, fd1, t, &fdusf);
            if (rft == 2) {
                fdusf = difdkLbstFD (fnv, tiis, fd, fd1);
            } flsf if (rft <= 0) {
                if (rft == 0) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                    "Rfdfivf timfd out");
                } flsf if (rft == -1) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                    "Sodkft dlosfd");
                }
                rfturn;
            }
        }
    } flsf if (!ipv6_supportfd) {
        fdusf = fd;
    } flsf if (IS_NULL(fdObj)) {
        /* ipv6 supportfd: bnd tiis sodkft bound to bn IPV6 only bddrfss */
        fdusf = fd1;
    } flsf {
        /* ipv6 supportfd: bnd tiis sodkft bound to bn IPV4 only bddrfss */
        fdusf = fd;
    }

    if (IS_NULL(pbdkft)) {
        JNU_TirowNullPointfrExdfption(fnv, "pbdkft");
        rfturn;
    }

    pbdkftBufffr = (*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bufID);

    if (IS_NULL(pbdkftBufffr)) {
        JNU_TirowNullPointfrExdfption(fnv, "pbdkft bufffr");
        rfturn;
    }

    pbdkftBufffrOffsft = (*fnv)->GftIntFifld(fnv, pbdkft, dp_offsftID);
    pbdkftBufffrLfn = (*fnv)->GftIntFifld(fnv, pbdkft, dp_bufLfngtiID);

    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {

        /* Wifn JNI-ifying tif JDK's IO routinfs, wf turnfd
         * rfbd's bnd writf's of bytf brrbys of sizf grfbtfr
         * tibn 2048 bytfs into sfvfrbl opfrbtions of sizf 2048.
         * Tiis sbvfs b mbllod()/mfmdpy()/frff() for big
         * bufffrs.  Tiis is OK for filf IO bnd TCP, but tibt
         * strbtfgy violbtfs tif sfmbntids of b dbtbgrbm protodol.
         * (onf big sfnd) != (sfvfrbl smbllfr sfnds).  So ifrf
         * wf *must* bllod tif bufffr.  Notf it nffdn't bf biggfr
         * tibn 65,536 (0xFFFF) tif mbx sizf of bn IP pbdkft.
         * bnytiing biggfr is trundbtfd bnywby.
         */
        fullPbdkft = (dibr *)mbllod(pbdkftBufffrLfn);
        if (!fullPbdkft) {
            JNU_TirowOutOfMfmoryError(fnv, "Rfdfivf buf nbtivf ifbp bllodbtion fbilfd");
            rfturn;
        }
    } flsf {
        fullPbdkft = &(BUF[0]);
    }



    /*
     * If tiis Windows fdition supports ICMP port unrfbdibblf bnd if wf
     * brf not donnfdtfd tifn wf nffd to know if b timfout ibs bffn spfdififd
     * bnd if so wf nffd to pidk up tif durrfnt timf. Tifsf brf rfquirfd in
     * ordfr to implfmfnt tif sfmbntids of timfout, viz :-
     * timfout sft to t1 but ICMP port unrfbdibblf brrivfs in t2 wifrf
     * t2 < t1. In tiis dbsf wf must disdbrd tif ICMP pbdkfts bnd tifn
     * wbit for tif nfxt pbdkft up to b mbximum of t1 minus t2.
     */
    donnfdtfd = (*fnv)->GftBoolfbnFifld(fnv, tiis, pdsi_donnfdtfd);
    if (supportPortUnrfbdibblf() && !donnfdtfd && timfout &&!ipv6_supportfd) {
        prfvTimf = JVM_CurrfntTimfMillis(fnv, 0);
    }

    if (timfout && nsodkfts == 1) {
        int rft;
        rft = NET_Timfout(fdusf, timfout);
        if (rft <= 0) {
            if (rft == 0) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                "Rfdfivf timfd out");
            } flsf if (rft == -1) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                "Sodkft dlosfd");
            }
            if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                frff(fullPbdkft);
            }
            rfturn;
        }
    }

    /*
     * Loop only if wf disdbrding ICMP port unrfbdibblf pbdkfts
     */
    do {
        rftry = FALSE;

        /* rfdfivf tif pbdkft */
        n = rfdvfrom(fdusf, fullPbdkft, pbdkftBufffrLfn, 0,
                         (strudt sodkbddr *)&rfmotf_bddr, &rfmotf_bddrsizf);

        if (n == SOCKET_ERROR) {
            if (WSAGftLbstError() == WSAECONNRESET) {
                /*
                 * An idmp port unrfbdibblf ibs bffn rfdfivfd - donsumf bny otifr
                 * outstbnding pbdkfts.
                 */
                purgfOutstbndingICMP(fnv, tiis, fdusf);

                /*
                 * If donnfdtfd tirow b PortUnrfbdibblfExdfption
                 */

                if (donnfdtfd) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdibblfExdfption",
                                       "ICMP Port Unrfbdibblf");

                    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                        frff(fullPbdkft);
                    }

                    rfturn;
                }

                /*
                 * If b timfout wbs spfdififd tifn wf nffd to bdjust it bfdbusf
                 * wf mby ibvf usfd up somf of tif timfout bfforf tif idmp port
                 * unrfbdibblf brrivfd.
                 */
                if (timfout) {
                    int rft;
                    jlong nfwTimf = JVM_CurrfntTimfMillis(fnv, 0);
                    timfout -= (jint)(nfwTimf - prfvTimf);
                    prfvTimf = nfwTimf;

                    if (timfout <= 0) {
                        rft = 0;
                    } flsf {
                        rft = NET_Timfout(fdusf, timfout);
                    }

                    if (rft <= 0) {
                        if (rft == 0) {
                            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                                            "Rfdfivf timfd out");
                        } flsf if (rft == -1) {
                            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                            "Sodkft dlosfd");
                        }
                        if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
                            frff(fullPbdkft);
                        }
                        rfturn;
                    }
                }

                /*
                 * An ICMP port unrfbdibblf wbs rfdfivfd but wf brf
                 * not donnfdtfd so ignorf it.
                 */
                rftry = TRUE;
            }
        }
    } wiilf (rftry);

    /* trundbtf tif dbtb if tif pbdkft's lfngti is too smbll */
    if (n > pbdkftBufffrLfn) {
        n = pbdkftBufffrLfn;
    }
    if (n < 0) {
        frrorCodf = WSAGftLbstError();
        /* difdk to sff if it's bfdbusf tif bufffr wbs too smbll */
        if (frrorCodf == WSAEMSGSIZE) {
            /* it is bfdbusf tif bufffr is too smbll. It's UDP, it's
             * unrflibblf, it's bll good. disdbrd tif rfst of tif
             * dbtb..
             */
            n = pbdkftBufffrLfn;
        } flsf {
            /* fbilurf */
            (*fnv)->SftIntFifld(fnv, pbdkft, dp_lfngtiID, 0);
        }
    }
    if (n == -1) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
    } flsf if (n == -2) {
        JNU_TirowByNbmf(fnv, JNU_JAVAIOPKG "IntfrruptfdIOExdfption",
                        "opfrbtion intfrruptfd");
    } flsf if (n < 0) {
        NET_TirowCurrfnt(fnv, "Dbtbgrbm rfdfivf fbilfd");
    } flsf {
        int port = 0;
        jobjfdt pbdkftAddrfss;

        /*
         * Cifdk if tifrf is bn InftAddrfss blrfbdy bssodibtfd witi tiis
         * pbdkft. If so wf difdk if it is tif sbmf sourdf bddrfss. Wf
         * dbn't updbtf bny fxisting InftAddrfss bfdbusf it is immutbblf
         */
        pbdkftAddrfss = (*fnv)->GftObjfdtFifld(fnv, pbdkft, dp_bddrfssID);

        if (pbdkftAddrfss != NULL) {
            if (!NET_SodkbddrEqublsInftAddrfss(fnv, (strudt sodkbddr *)&rfmotf_bddr, pbdkftAddrfss)) {
                /* fordf b nfw InftAddrfss to bf drfbtfd */
                pbdkftAddrfss = NULL;
            }
        }
        if (pbdkftAddrfss == NULL) {
            pbdkftAddrfss = NET_SodkbddrToInftAddrfss(fnv, (strudt sodkbddr *)&rfmotf_bddr, &port);
            /* stuff tif nfw Inftbddrfss in tif pbdkft */
            (*fnv)->SftObjfdtFifld(fnv, pbdkft, dp_bddrfssID, pbdkftAddrfss);
        } flsf {
            /* only gft tif nfw port numbfr */
            port = NET_GftPortFromSodkbddr((strudt sodkbddr *)&rfmotf_bddr);
        }
        /* populbtf tif pbdkft */
        (*fnv)->SftBytfArrbyRfgion(fnv, pbdkftBufffr, pbdkftBufffrOffsft, n,
                                   (jbytf *)fullPbdkft);
        (*fnv)->SftIntFifld(fnv, pbdkft, dp_portID, port);
        (*fnv)->SftIntFifld(fnv, pbdkft, dp_lfngtiID, n);
    }
    if (pbdkftBufffrLfn > MAX_BUFFER_LEN) {
        frff(fullPbdkft);
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    dbtbgrbmSodkftCrfbtf
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_dbtbgrbmSodkftCrfbtf(JNIEnv *fnv,
                                                           jobjfdt tiis) {
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);

    int fd, fd1;
    int t = TRUE;
    DWORD x1, x2; /* ignorfd rfsult dodfs */
    int ipv6_supportfd = ipv6_bvbilbblf();

    int brg = -1;

    if (IS_NULL(fdObj) || (ipv6_supportfd && IS_NULL(fd1Obj))) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Sodkft dlosfd");
        rfturn;
    } flsf {
        fd =  (int) sodkft (AF_INET, SOCK_DGRAM, 0);
    }
    if (fd == SOCKET_ERROR) {
        NET_TirowCurrfnt(fnv, "Sodkft drfbtion fbilfd");
        rfturn;
    }
    SftHbndlfInformbtion((HANDLE)(UINT_PTR)fd, HANDLE_FLAG_INHERIT, FALSE);
    (*fnv)->SftIntFifld(fnv, fdObj, IO_fd_fdID, fd);
    NET_SftSodkOpt(fd, SOL_SOCKET, SO_BROADCAST, (dibr*)&t, sizfof(BOOL));

    if (ipv6_supportfd) {
        /* SIO_UDP_CONNRESET fixfs b bug introdudfd in Windows 2000, wiidi
         * rfturns donnfdtion rfsft frrors un donnfdtfd UDP sodkfts (bs wfll
         * bs donnfdtfd sodkfts. Tif solution is to only fnbblf tiis ffbturf
         * wifn tif sodkft is donnfdtfd
         */
        t = FALSE;
        WSAIodtl(fd,SIO_UDP_CONNRESET,&t,sizfof(t),&x1,sizfof(x1),&x2,0,0);
        t = TRUE;
        fd1 = sodkft (AF_INET6, SOCK_DGRAM, 0);
        if (fd1 == SOCKET_ERROR) {
            NET_TirowCurrfnt(fnv, "Sodkft drfbtion fbilfd");
            rfturn;
        }
        NET_SftSodkOpt(fd1, SOL_SOCKET, SO_BROADCAST, (dibr*)&t, sizfof(BOOL));
        t = FALSE;
        WSAIodtl(fd1,SIO_UDP_CONNRESET,&t,sizfof(t),&x1,sizfof(x1),&x2,0,0);
        (*fnv)->SftIntFifld(fnv, fd1Obj, IO_fd_fdID, fd1);
        SftHbndlfInformbtion((HANDLE)(UINT_PTR)fd1, HANDLE_FLAG_INHERIT, FALSE);
    } flsf {
        /* drop tif sfdond fd */
        (*fnv)->SftObjfdtFifld(fnv, tiis, pdsi_fd1ID, NULL);
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    dbtbgrbmSodkftClosf
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_dbtbgrbmSodkftClosf(JNIEnv *fnv,
                                                          jobjfdt tiis) {
    /*
     * REMIND: PUT A LOCK AROUND THIS CODE
     */
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    int ipv6_supportfd = ipv6_bvbilbblf();
    int fd=-1, fd1=-1;

    if (IS_NULL(fdObj) && (!ipv6_supportfd || IS_NULL(fd1Obj))) {
        rfturn;
    }

    if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        if (fd != -1) {
            (*fnv)->SftIntFifld(fnv, fdObj, IO_fd_fdID, -1);
            NET_SodkftClosf(fd);
        }
    }

    if (ipv6_supportfd && fd1Obj != NULL) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
        if (fd1 == -1) {
            rfturn;
        }
        (*fnv)->SftIntFifld(fnv, fd1Obj, IO_fd_fdID, -1);
        NET_SodkftClosf(fd1);
    }
}

/*
 * difdk tif bddrfssfs bttbdifd to tif NftworkIntfrfbdf objfdt
 * bnd rfturn tif first onf (of tif rfqufstfd fbmily Ipv4 or Ipv6)
 * in *ibddr
 */

stbtid int gftInftAddrFromIf (JNIEnv *fnv, int fbmily, jobjfdt nif, jobjfdt *ibddr)
{
    jobjfdtArrby bddrArrby;
    stbtid jfifldID ni_bddrsID=0;
    jsizf lfn;
    jobjfdt bddr;
    int i;

    if (ni_bddrsID == NULL ) {
        jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
        CHECK_NULL_RETURN (d, -1);
        ni_bddrsID = (*fnv)->GftFifldID(fnv, d, "bddrs",
                                        "[Ljbvb/nft/InftAddrfss;");
        CHECK_NULL_RETURN (ni_bddrsID, -1);
    }

    bddrArrby = (*fnv)->GftObjfdtFifld(fnv, nif, ni_bddrsID);
    lfn = (*fnv)->GftArrbyLfngti(fnv, bddrArrby);

    /*
     * Cifdk tibt tifrf is bt lfbst onf bddrfss bound to tiis
     * intfrfbdf.
     */
    if (lfn < 1) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
            "bbd brgumfnt for IP_MULTICAST_IF2: No IP bddrfssfs bound to intfrfbdf");
        rfturn -1;
    }
    for (i=0; i<lfn; i++) {
        int fbm;
        bddr = (*fnv)->GftObjfdtArrbyElfmfnt(fnv, bddrArrby, i);
        fbm = gftInftAddrfss_fbmily(fnv, bddr);
        if (fbm == fbmily) {
            *ibddr = bddr;
            rfturn 0;
        }
    }
    rfturn -1;
}

stbtid int gftInft4AddrFromIf (JNIEnv *fnv, jobjfdt nif, strudt in_bddr *ibddr)
{
    jobjfdt bddr;

    int rft = gftInftAddrFromIf (fnv, IPv4, nif, &bddr);
    if (rft == -1) {
        rfturn -1;
    }

    ibddr->s_bddr = itonl(gftInftAddrfss_bddr(fnv, bddr));
    rfturn 0;
}

/* Gft tif multidbsting indfx from tif intfrfbdf */

stbtid int gftIndfxFromIf (JNIEnv *fnv, jobjfdt nif) {
    stbtid jfifldID ni_indfxID;

    if (ni_indfxID == NULL) {
        jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
        CHECK_NULL_RETURN(d, -1);
        ni_indfxID = (*fnv)->GftFifldID(fnv, d, "indfx", "I");
        CHECK_NULL_RETURN(ni_indfxID, -1);
    }

    rfturn (*fnv)->GftIntFifld(fnv, nif, ni_indfxID);
}

stbtid int isAdbptfrIpv6Enbblfd(JNIEnv *fnv, int indfx) {
  fxtfrn int gftAllIntfrfbdfsAndAddrfssfs (JNIEnv *fnv, nftif **nftifPP);
  nftif *ifList, *durr;
  int ipv6Enbblfd = 0;
  if (gftAllIntfrfbdfsAndAddrfssfs (fnv, &ifList) < 0) {
      rfturn ipv6Enbblfd;
  }

  /* sfbrdi by indfx */
  durr = ifList;
  wiilf (durr != NULL) {
      if (indfx == durr->indfx) {
          brfbk;
      }
      durr = durr->nfxt;
  }

  /* if found ipv6Indfx != 0 tifn intfrfbdf is donfigurfd witi IPV6 */
  if ((durr != NULL) && (durr->ipv6Indfx !=0)) {
      ipv6Enbblfd = 1;
  }

  /* rflfbsf tif intfrfbdf list */
  frff_nftif(ifList);

  rfturn ipv6Enbblfd;
}

/*
 * Sfts tif multidbst intfrfbdf.
 *
 * SodkftOptions.IP_MULTICAST_IF (brgumfnt is bn InftAddrfss) :-
 *      IPv4:   sft outgoing multidbst intfrfbdf using
 *              IPPROTO_IP/IP_MULTICAST_IF
 *
 *      IPv6:   Gft tif intfrfbdf to wiidi tif
 *              InftAddrfss is bound
 *              bnd do sbmf bs SodkOptions.IF_MULTICAST_IF2
 *
 * SodkOptions.IF_MULTICAST_IF2 (brgumfnt is b NftworkIntfrfbdf ) :-
 *      For fbdi stbdk:
 *      IPv4:   Obtbin IP bddrfss bound to nftwork intfrfbdf
 *              (NftworkIntfrfbdf.bddrfs[0])
 *              sft outgoing multidbst intfrfbdf using
 *              IPPROTO_IP/IP_MULTICAST_IF
 *
 *      IPv6:   Obtbin NftworkIntfrfbdf.indfx
 *              Sft outgoing multidbst intfrfbdf using
 *              IPPROTO_IPV6/IPV6_MULTICAST_IF
 *
 */
stbtid void sftMultidbstIntfrfbdf(JNIEnv *fnv, jobjfdt tiis, int fd, int fd1,
                                  jint opt, jobjfdt vbluf)
{
    int ipv6_supportfd = ipv6_bvbilbblf();

    if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF) {
        /*
         * vbluf is bn InftAddrfss.
         * On IPv4 systfm usf IP_MULTICAST_IF sodkft option
         * On IPv6 systfm gft tif NftworkIntfrfbdf tibt tiis IP
         * bddrfss is bound to bnd usf tif IPV6_MULTICAST_IF
         * option instfbd of IP_MULTICAST_IF
         */
        if (ipv6_supportfd) {
            stbtid jdlbss ni_dlbss;
            if (ni_dlbss == NULL) {
                jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
                CHECK_NULL(d);
                ni_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
                CHECK_NULL(ni_dlbss);
            }

            vbluf = Jbvb_jbvb_nft_NftworkIntfrfbdf_gftByInftAddrfss0(fnv, ni_dlbss, vbluf);
            if (vbluf == NULL) {
                if (!(*fnv)->ExdfptionOddurrfd(fnv)) {
                    JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                         "bbd brgumfnt for IP_MULTICAST_IF"
                         ": bddrfss not bound to bny intfrfbdf");
                }
                rfturn;
            }
            opt = jbvb_nft_SodkftOptions_IP_MULTICAST_IF2;
        } flsf {
            strudt in_bddr in;

            in.s_bddr = itonl(gftInftAddrfss_bddr(fnv, vbluf));
            if (sftsodkopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
                               (donst dibr*)&in, sizfof(in)) < 0) {
                NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                 "Error sftting sodkft option");
            }
            rfturn;
        }
    }

    if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF2) {
        /*
         * vbluf is b NftworkIntfrfbdf.
         * On IPv6 systfm gft tif indfx of tif intfrfbdf bnd usf tif
         * IPV6_MULTICAST_IF sodkft option
         * On IPv4 systfm fxtrbdt bddr[0] bnd usf tif IP_MULTICAST_IF
         * option. For IPv6 boti must bf donf.
         */
        if (ipv6_supportfd) {
            stbtid jfifldID ni_indfxID;
            strudt in_bddr in;
            int indfx;

            if (ni_indfxID == NULL) {
                jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
                CHECK_NULL(d);
                ni_indfxID = (*fnv)->GftFifldID(fnv, d, "indfx", "I");
                CHECK_NULL(ni_indfxID);
            }
            indfx = (*fnv)->GftIntFifld(fnv, vbluf, ni_indfxID);

            if ( isAdbptfrIpv6Enbblfd(fnv, indfx) != 0 ) {
                if (sftsodkopt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_IF,
                               (donst dibr*)&indfx, sizfof(indfx)) < 0) {
                    if (frrno == EINVAL && indfx > 0) {
                        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                            "IPV6_MULTICAST_IF fbilfd (intfrfbdf ibs IPv4 "
                            "bddrfss only?)");
                    } flsf {
                        NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                   "Error sftting sodkft option");
                    }
                    rfturn;
                }
            }
            /* If tifrf brf bny IPv4 bddrfssfs on tiis intfrfbdf tifn
             * rfpfbt tif opfrbtion on tif IPv4 fd */

            if (gftInft4AddrFromIf (fnv, vbluf, &in) < 0) {
                rfturn;
            }
            if (sftsodkopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
                               (donst dibr*)&in, sizfof(in)) < 0) {
                NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                 "Error sftting sodkft option");
            }
            rfturn;
        } flsf {
            strudt in_bddr in;

            if (gftInft4AddrFromIf (fnv, vbluf, &in) < 0) {
                if ((*fnv)->ExdfptionOddurrfd(fnv)) {
                    rfturn;
                }
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "no InftAddrfss instbndfs of rfqufstfd typf");
                rfturn;
            }

            if (sftsodkopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
                               (donst dibr*)&in, sizfof(in)) < 0) {
                NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                               "Error sftting sodkft option");
            }
            rfturn;
        }
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sodkftNbtivfSftOption
 * Signbturf: (ILjbvb/lbng/Objfdt;)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sodkftNbtivfSftOption(JNIEnv *fnv,jobjfdt tiis,
                                                      jint opt,jobjfdt vbluf) {

    int fd=-1, fd1=-1;
    int lfvflv4 = 0, lfvflv6 = 0, optnbmfv4 = 0, optnbmfv6 = 0, optlfn = 0;
    union {
        int i;
        dibr d;
    } optvbl = { 0 };
    int ipv6_supportfd = ipv6_bvbilbblf();
    fd = gftFD(fnv, tiis);

    if (ipv6_supportfd) {
        fd1 = gftFD1(fnv, tiis);
    }
    if (fd < 0 && fd1 < 0) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "sodkft dlosfd");
        rfturn;
    }

    if ((opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF) ||
        (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF2)) {

        sftMultidbstIntfrfbdf(fnv, tiis, fd, fd1, opt, vbluf);
        rfturn;
    }

    /*
     * Mbp tif Jbvb lfvfl sodkft option to tif plbtform spfdifid
     * lfvfl(s) bnd option nbmf(s).
     */
    if (fd1 != -1) {
        if (NET_MbpSodkftOptionV6(opt, &lfvflv6, &optnbmfv6)) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Invblid option");
            rfturn;
        }
    }
    if (fd != -1) {
        if (NET_MbpSodkftOption(opt, &lfvflv4, &optnbmfv4)) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Invblid option");
            rfturn;
        }
    }

    switdi (opt) {
        dbsf jbvb_nft_SodkftOptions_SO_SNDBUF :
        dbsf jbvb_nft_SodkftOptions_SO_RCVBUF :
        dbsf jbvb_nft_SodkftOptions_IP_TOS :
            {
                jdlbss dls;
                jfifldID fid;

                dls = (*fnv)->FindClbss(fnv, "jbvb/lbng/Intfgfr");
                CHECK_NULL(dls);
                fid =  (*fnv)->GftFifldID(fnv, dls, "vbluf", "I");
                CHECK_NULL(fid);

                optvbl.i = (*fnv)->GftIntFifld(fnv, vbluf, fid);
                optlfn = sizfof(optvbl.i);
            }
            brfbk;

        dbsf jbvb_nft_SodkftOptions_SO_REUSEADDR:
        dbsf jbvb_nft_SodkftOptions_SO_BROADCAST:
        dbsf jbvb_nft_SodkftOptions_IP_MULTICAST_LOOP:
            {
                jdlbss dls;
                jfifldID fid;
                jboolfbn on;

                dls = (*fnv)->FindClbss(fnv, "jbvb/lbng/Boolfbn");
                CHECK_NULL(dls);
                fid =  (*fnv)->GftFifldID(fnv, dls, "vbluf", "Z");
                CHECK_NULL(fid);

                on = (*fnv)->GftBoolfbnFifld(fnv, vbluf, fid);
                optvbl.i = (on ? 1 : 0);
                /*
                 * sftLoopbbdkModf (truf) disbblfs IP_MULTICAST_LOOP rbtifr
                 * tibn fnbbling it.
                 */
                if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_LOOP) {
                    optvbl.i = !optvbl.i;
                }
                optlfn = sizfof(optvbl.i);
            }
            brfbk;

        dffbult :
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                "Sodkft option not supportfd by PlbinDbtbgrbmSodkftImp");
            brfbk;

    }

    if (fd1 != -1) {
        if (NET_SftSodkOpt(fd1, lfvflv6, optnbmfv6, (void *)&optvbl, optlfn) < 0) {
            NET_TirowCurrfnt(fnv, "sftsodkopt IPv6");
            rfturn;
        }
    }
    if (fd != -1) {
        if (NET_SftSodkOpt(fd, lfvflv4, optnbmfv4, (void *)&optvbl, optlfn) < 0) {
            NET_TirowCurrfnt(fnv, "sftsodkopt");
            rfturn;
        }
    }
}

/*
 *
 * dbllfd by gftMultidbstIntfrfbdf to rftrifvf b NftworkIntfrfbdf
 * donfigurfd for IPv4.
 * Tif ipv4Modf pbrbmftfr, is b dlosft boolfbn, wiidi bllows for b NULL rfturn,
 * or fordfs tif drfbtion of b NftworkIntfrfbdf objfdt witi null dbtb.
 * It rflbtfs to its dblling dontfxt in gftMultidbstIntfrfbdf.
 * ipv4Modf == 1, tif dontfxt is IPV4 prodfssing only.
 * ipv4Modf == 0, tif dontfxt is IPV6 prodfssing
 *
 */
stbtid jobjfdt gftIPv4NftworkIntfrfbdf (JNIEnv *fnv, jobjfdt tiis, int fd, jint opt, int ipv4Modf) {
        stbtid jdlbss inft4_dlbss;
        stbtid jmftiodID inft4_dtrID;

        stbtid jdlbss ni_dlbss; stbtid jmftiodID ni_dtrID;
        stbtid jfifldID ni_indfxID;
        stbtid jfifldID ni_bddrsID;

        jobjfdtArrby bddrArrby;
        jobjfdt bddr;
        jobjfdt ni;

        strudt in_bddr in;
        strudt in_bddr *inP = &in;
        int lfn = sizfof(strudt in_bddr);
        if (gftsodkopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
                           (dibr *)inP, &lfn) < 0) {
            NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                             "Error gftting sodkft option");
            rfturn NULL;
        }

        /*
         * Construdt bnd populbtf bn Inft4Addrfss
         */
        if (inft4_dlbss == NULL) {
            jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/Inft4Addrfss");
            CHECK_NULL_RETURN(d, NULL);
            inft4_dtrID = (*fnv)->GftMftiodID(fnv, d, "<init>", "()V");
            CHECK_NULL_RETURN(inft4_dtrID, NULL);
            inft4_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
            CHECK_NULL_RETURN(inft4_dlbss, NULL);
        }
        bddr = (*fnv)->NfwObjfdt(fnv, inft4_dlbss, inft4_dtrID, 0);
        CHECK_NULL_RETURN(bddr, NULL);

        sftInftAddrfss_bddr(fnv, bddr, ntoil(in.s_bddr));

        /*
         * For IP_MULTICAST_IF rfturn InftAddrfss
         */
        if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF) {
            rfturn bddr;
        }

        /*
         * For IP_MULTICAST_IF2 wf gft tif NftworkIntfrfbdf for
         * tiis bddrfss bnd rfturn it
         */
        if (ni_dlbss == NULL) {
            jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
            CHECK_NULL_RETURN(d, NULL);
            ni_dtrID = (*fnv)->GftMftiodID(fnv, d, "<init>", "()V");
            CHECK_NULL_RETURN(ni_dtrID, NULL);
            ni_indfxID = (*fnv)->GftFifldID(fnv, d, "indfx", "I");
            CHECK_NULL_RETURN(ni_indfxID, NULL);
            ni_bddrsID = (*fnv)->GftFifldID(fnv, d, "bddrs",
                                            "[Ljbvb/nft/InftAddrfss;");
            CHECK_NULL_RETURN(ni_bddrsID, NULL);
            ni_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
            CHECK_NULL_RETURN(ni_dlbss, NULL);
        }
        ni = Jbvb_jbvb_nft_NftworkIntfrfbdf_gftByInftAddrfss0(fnv, ni_dlbss, bddr);
        if (ni) {
            rfturn ni;
        }
        if (ipv4Modf) {
            ni = (*fnv)->NfwObjfdt(fnv, ni_dlbss, ni_dtrID, 0);
            CHECK_NULL_RETURN(ni, NULL);

            (*fnv)->SftIntFifld(fnv, ni, ni_indfxID, -1);
            bddrArrby = (*fnv)->NfwObjfdtArrby(fnv, 1, inft4_dlbss, NULL);
            CHECK_NULL_RETURN(bddrArrby, NULL);
            (*fnv)->SftObjfdtArrbyElfmfnt(fnv, bddrArrby, 0, bddr);
            (*fnv)->SftObjfdtFifld(fnv, ni, ni_bddrsID, bddrArrby);
        } flsf {
            ni = NULL;
        }
        rfturn ni;
}

/*
 * Rfturn tif multidbst intfrfbdf:
 *
 * SodkftOptions.IP_MULTICAST_IF
 *      IPv4:   Qufry IPPROTO_IP/IP_MULTICAST_IF
 *              Crfbtf InftAddrfss
 *              IP_MULTICAST_IF rfturns strudt ip_mrfqn on 2.2
 *              kfrnfl but strudt in_bddr on 2.4 kfrnfl
 *      IPv6:   Qufry IPPROTO_IPV6 / IPV6_MULTICAST_IF or
 *              obtbin from impl is Linux 2.2 kfrnfl
 *              If indfx == 0 rfturn InftAddrfss rfprfsfnting
 *              bnyLodblAddrfss.
 *              If indfx > 0 qufry NftworkIntfrfbdf by indfx
 *              bnd rfturns bddrs[0]
 *
 * SodkftOptions.IP_MULTICAST_IF2
 *      IPv4:   Qufry IPPROTO_IP/IP_MULTICAST_IF
 *              Qufry NftworkIntfrfbdf by IP bddrfss bnd
 *              rfturn tif NftworkIntfrfbdf tibt tif bddrfss
 *              is bound too.
 *      IPv6:   Qufry IPPROTO_IPV6 / IPV6_MULTICAST_IF
 *              (fxdfpt Linux .2 kfrnfl)
 *              Qufry NftworkIntfrfbdf by indfx bnd
 *              rfturn NftworkIntfrfbdf.
 */
jobjfdt gftMultidbstIntfrfbdf(JNIEnv *fnv, jobjfdt tiis, int fd, int fd1, jint opt) {
    jboolfbn isIPV4 = !ipv6_bvbilbblf() || fd1 == -1;

    /*
     * IPv4 implfmfntbtion
     */
    if (isIPV4) {
        jobjfdt nftObjfdt = NULL; // rfturn is fitifr bn bddr or b nftif
        nftObjfdt = gftIPv4NftworkIntfrfbdf(fnv, tiis, fd, opt, 1);
        rfturn nftObjfdt;
    }

    /*
     * IPv6 implfmfntbtion
     */
    if ((opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF) ||
        (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF2)) {

        stbtid jdlbss ni_dlbss;
        stbtid jmftiodID ni_dtrID;
        stbtid jfifldID ni_indfxID;
        stbtid jfifldID ni_bddrsID;
        stbtid jdlbss ib_dlbss;
        stbtid jmftiodID ib_bnyLodblAddrfssID;

        int indfx;
        int lfn = sizfof(indfx);

        jobjfdtArrby bddrArrby;
        jobjfdt bddr;
        jobjfdt ni;

        {
            if (gftsodkopt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_IF,
                               (dibr*)&indfx, &lfn) < 0) {
                NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                               "Error gftting sodkft option");
                rfturn NULL;
            }
        }

        if (ni_dlbss == NULL) {
            jdlbss d = (*fnv)->FindClbss(fnv, "jbvb/nft/NftworkIntfrfbdf");
            CHECK_NULL_RETURN(d, NULL);
            ni_dtrID = (*fnv)->GftMftiodID(fnv, d, "<init>", "()V");
            CHECK_NULL_RETURN(ni_dtrID, NULL);
            ni_indfxID = (*fnv)->GftFifldID(fnv, d, "indfx", "I");
            CHECK_NULL_RETURN(ni_indfxID, NULL);
            ni_bddrsID = (*fnv)->GftFifldID(fnv, d, "bddrs",
                                            "[Ljbvb/nft/InftAddrfss;");
            CHECK_NULL_RETURN(ni_bddrsID, NULL);

            ib_dlbss = (*fnv)->FindClbss(fnv, "jbvb/nft/InftAddrfss");
            CHECK_NULL_RETURN(ib_dlbss, NULL);
            ib_dlbss = (*fnv)->NfwGlobblRff(fnv, ib_dlbss);
            CHECK_NULL_RETURN(ib_dlbss, NULL);
            ib_bnyLodblAddrfssID = (*fnv)->GftStbtidMftiodID(fnv,
                                                             ib_dlbss,
                                                             "bnyLodblAddrfss",
                                                             "()Ljbvb/nft/InftAddrfss;");
            CHECK_NULL_RETURN(ib_bnyLodblAddrfssID, NULL);
            ni_dlbss = (*fnv)->NfwGlobblRff(fnv, d);
            CHECK_NULL_RETURN(ni_dlbss, NULL);
        }

        /*
         * If multidbst to b spfdifid intfrfbdf tifn rfturn tif
         * intfrfbdf (for IF2) or tif bny bddrfss on tibt intfrfbdf
         * (for IF).
         */
        if (indfx > 0) {
            ni = Jbvb_jbvb_nft_NftworkIntfrfbdf_gftByIndfx0(fnv, ni_dlbss,
                                                                   indfx);
            if (ni == NULL) {
                dibr frrmsg[255];
                sprintf(frrmsg,
                        "IPV6_MULTICAST_IF rfturnfd indfx to unrfdognizfd intfrfbdf: %d",
                        indfx);
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", frrmsg);
                rfturn NULL;
            }

            /*
             * For IP_MULTICAST_IF2 rfturn tif NftworkIntfrfbdf
             */
            if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF2) {
                rfturn ni;
            }

            /*
             * For IP_MULTICAST_IF rfturn bddrs[0]
             */
            bddrArrby = (*fnv)->GftObjfdtFifld(fnv, ni, ni_bddrsID);
            if ((*fnv)->GftArrbyLfngti(fnv, bddrArrby) < 1) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                    "IPV6_MULTICAST_IF rfturnfd intfrfbdf witiout IP bindings");
                rfturn NULL;
            }

            bddr = (*fnv)->GftObjfdtArrbyElfmfnt(fnv, bddrArrby, 0);
            rfturn bddr;
        } flsf if (indfx == 0) { // indfx == 0 typidblly mfbns IPv6 not donfigurfd on tif intfrfbdfs
            // fblling bbdk to trfbt intfrfbdf bs donfigurfd for IPv4
            jobjfdt nftObjfdt = NULL;
            nftObjfdt = gftIPv4NftworkIntfrfbdf(fnv, tiis, fd, opt, 0);
            if (nftObjfdt != NULL) {
                rfturn nftObjfdt;
            }
        }

        /*
         * Multidbst to bny bddrfss - rfturn bnyLodblAddrfss
         * or b NftworkIntfrfbdf witi bddrs[0] sft to bnyLodblAddrfss
         */

        bddr = (*fnv)->CbllStbtidObjfdtMftiod(fnv, ib_dlbss, ib_bnyLodblAddrfssID,
                                              NULL);
        if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF) {
            rfturn bddr;
        }

        ni = (*fnv)->NfwObjfdt(fnv, ni_dlbss, ni_dtrID, 0);
        CHECK_NULL_RETURN(ni, NULL);
        (*fnv)->SftIntFifld(fnv, ni, ni_indfxID, -1);
        bddrArrby = (*fnv)->NfwObjfdtArrby(fnv, 1, ib_dlbss, NULL);
        CHECK_NULL_RETURN(bddrArrby, NULL);
        (*fnv)->SftObjfdtArrbyElfmfnt(fnv, bddrArrby, 0, bddr);
        (*fnv)->SftObjfdtFifld(fnv, ni, ni_bddrsID, bddrArrby);
        rfturn ni;
    }
    rfturn NULL;
}


/*
 * Rfturns rflfvbnt info bs b jint.
 *
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sodkftGftOption
 * Signbturf: (I)Ljbvb/lbng/Objfdt;
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sodkftGftOption(JNIEnv *fnv, jobjfdt tiis,
                                                      jint opt) {

    int fd=-1, fd1=-1;
    int lfvfl, optnbmf, optlfn;
    union {
        int i;
    } optvbl = {0};
    int ipv6_supportfd = ipv6_bvbilbblf();

    fd = gftFD(fnv, tiis);
    if (ipv6_supportfd) {
        fd1 = gftFD1(fnv, tiis);
    }

    if (fd < 0 && fd1 < 0) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn NULL;
    }

    /*
     * Hbndlf IP_MULTICAST_IF sfpbrbtfly
     */
    if (opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF ||
        opt == jbvb_nft_SodkftOptions_IP_MULTICAST_IF2) {
        rfturn gftMultidbstIntfrfbdf(fnv, tiis, fd, fd1, opt);
    }

    /*
     * Mbp tif Jbvb lfvfl sodkft option to tif plbtform spfdifid
     * lfvfl bnd option nbmf.
     */
    if (NET_MbpSodkftOption(opt, &lfvfl, &optnbmf)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Invblid option");
        rfturn NULL;
    }

    if (fd == -1) {
        if (NET_MbpSodkftOptionV6(opt, &lfvfl, &optnbmf)) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Invblid option");
            rfturn NULL;
        }
        fd = fd1; /* must bf IPv6 only */
    }

    optlfn = sizfof(optvbl.i);
    if (NET_GftSodkOpt(fd, lfvfl, optnbmf, (void *)&optvbl, &optlfn) < 0) {
        dibr frrmsg[255];
        sprintf(frrmsg, "frror gftting sodkft option: %s\n", strfrror(frrno));
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", frrmsg);
        rfturn NULL;
    }

    switdi (opt) {
        dbsf jbvb_nft_SodkftOptions_SO_BROADCAST:
        dbsf jbvb_nft_SodkftOptions_SO_REUSEADDR:
            rfturn drfbtfBoolfbn(fnv, optvbl.i);

        dbsf jbvb_nft_SodkftOptions_IP_MULTICAST_LOOP:
            /* gftLoopbbdkModf() rfturns truf if IP_MULTICAST_LOOP is disbblfd */
            rfturn drfbtfBoolfbn(fnv, !optvbl.i);

        dbsf jbvb_nft_SodkftOptions_SO_SNDBUF:
        dbsf jbvb_nft_SodkftOptions_SO_RCVBUF:
        dbsf jbvb_nft_SodkftOptions_IP_TOS:
            rfturn drfbtfIntfgfr(fnv, optvbl.i);

        dffbult :
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                "Sodkft option not supportfd by TwoStbdksPlbinDbtbgrbmSodkftImpl");
            rfturn NULL;

    }
}

/*
 * Rfturns lodbl bddrfss of tif sodkft.
 *
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sodkftLodblAddrfss
 * Signbturf: (I)Ljbvb/lbng/Objfdt;
 */
JNIEXPORT jobjfdt JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sodkftLodblAddrfss(JNIEnv *fnv, jobjfdt tiis,
                                                      jint fbmily) {

    int fd=-1, fd1=-1;
    SOCKETADDRESS iim;
    int lfn = 0;
    int port;
    jobjfdt ibObj;
    int ipv6_supportfd = ipv6_bvbilbblf();

    fd = gftFD(fnv, tiis);
    if (ipv6_supportfd) {
        fd1 = gftFD1(fnv, tiis);
    }

    if (fd < 0 && fd1 < 0) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn NULL;
    }

    /* find out lodbl IP bddrfss */

    lfn = sizfof (strudt sodkbddr_in);

    /* fbmily==-1 wifn sodkft is not donnfdtfd */
    if ((fbmily == IPv6) || (fbmily == -1 && fd == -1)) {
        fd = fd1; /* must bf IPv6 only */
        lfn = sizfof (strudt SOCKADDR_IN6);
    }

    if (fd == -1) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn NULL;
    }

    if (gftsodknbmf(fd, (strudt sodkbddr *)&iim, &lfn) == -1) {
        NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                       "Error gftting sodkft nbmf");
        rfturn NULL;
    }
    ibObj = NET_SodkbddrToInftAddrfss(fnv, (strudt sodkbddr *)&iim, &port);

    rfturn ibObj;
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sftTimfToLivf
 * Signbturf: (I)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sftTimfToLivf(JNIEnv *fnv, jobjfdt tiis,
                                                    jint ttl) {

    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    int fd = -1, fd1 = -1;
    int ittl = (int)ttl;

    if (IS_NULL(fdObj) && IS_NULL(fd1Obj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn;
    } flsf {
      if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
      }
      if (!IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
      }
    }

    /* sftsodkopt to bf dorrfdt ttl */
    if (fd >= 0) {
      if (NET_SftSodkOpt(fd, IPPROTO_IP, IP_MULTICAST_TTL, (dibr*)&ittl,
                         sizfof (ittl)) < 0) {
        NET_TirowCurrfnt(fnv, "sft IP_MULTICAST_TTL fbilfd");
      }
    }

    if (fd1 >= 0) {
      if (NET_SftSodkOpt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, (dibr *)&ittl,
                         sizfof(ittl)) <0) {
        NET_TirowCurrfnt(fnv, "sft IPV6_MULTICAST_HOPS fbilfd");
      }
    }
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    sftTTL
 * Signbturf: (B)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sftTTL(JNIEnv *fnv, jobjfdt tiis,
                                             jbytf ttl) {
    Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_sftTimfToLivf(fnv, tiis,
                                                        (jint)ttl & 0xFF);
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    gftTimfToLivf
 * Signbturf: ()I
 */
JNIEXPORT jint JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_gftTimfToLivf(JNIEnv *fnv, jobjfdt tiis) {
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    int fd = -1, fd1 = -1;
    int ttl = 0;
    int lfn = sizfof(ttl);

    if (IS_NULL(fdObj) && IS_NULL(fd1Obj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn -1;
    } flsf {
      if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
      }
      if (!IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
      }
    }

    /* gftsodkopt of ttl */
    if (fd >= 0) {
      if (NET_GftSodkOpt(fd, IPPROTO_IP, IP_MULTICAST_TTL, (dibr*)&ttl, &lfn) < 0) {
        NET_TirowCurrfnt(fnv, "gft IP_MULTICAST_TTL fbilfd");
        rfturn -1;
      }
      rfturn (jint)ttl;
    }
    if (fd1 >= 0) {
      if (NET_GftSodkOpt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, (dibr*)&ttl, &lfn) < 0) {
        NET_TirowCurrfnt(fnv, "gft IP_MULTICAST_TTL fbilfd");
        rfturn -1;
      }
      rfturn (jint)ttl;
    }
    rfturn -1;
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    gftTTL
 * Signbturf: ()B
 */
JNIEXPORT jbytf JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_gftTTL(JNIEnv *fnv, jobjfdt tiis) {
    int rfsult = Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_gftTimfToLivf(fnv, tiis);

    rfturn (jbytf)rfsult;
}

/* join/lfbvf tif nbmfd group on tif nbmfd intfrfbdf, or if no intfrfbdf spfdififd
 * tifn tif intfrfbdf sft witi sftIntfrfbd(), or tif dffbult intfrfbdf otifrwisf */

stbtid void mdbst_join_lfbvf(JNIEnv *fnv, jobjfdt tiis,
                             jobjfdt ibObj, jobjfdt niObj,
                             jboolfbn join)
{
    jobjfdt fdObj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fdID);
    jobjfdt fd1Obj = (*fnv)->GftObjfdtFifld(fnv, tiis, pdsi_fd1ID);
    jint fd = -1, fd1 = -1;

    SOCKETADDRESS nbmf;
    strudt ip_mrfq mnbmf;
    strudt ipv6_mrfq mnbmf6;

    strudt in_bddr in;
    DWORD ifindfx = 0;

    int lfn, fbmily;
    int ipv6_supportfd = ipv6_bvbilbblf();
    int dmd ;

    mfmsft((dibr *)&in, 0, sizfof(in));
    mfmsft((dibr *)&nbmf, 0, sizfof(nbmf));

    if (IS_NULL(fdObj) && IS_NULL(fd1Obj)) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn;
    }
    if (!IS_NULL(fdObj)) {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
    }
    if (ipv6_supportfd && !IS_NULL(fd1Obj)) {
        fd1 = (*fnv)->GftIntFifld(fnv, fd1Obj, IO_fd_fdID);
    }

    if (IS_NULL(ibObj)) {
        JNU_TirowNullPointfrExdfption(fnv, "bddrfss");
        rfturn;
    }

    if (NET_InftAddrfssToSodkbddr(fnv, ibObj, 0, (strudt sodkbddr *)&nbmf, &lfn, JNI_FALSE) != 0) {
      rfturn;
    }

    /* Sft tif multidbst group bddrfss in tif ip_mrfq fifld
     * fvfntublly tiis difdk siould bf donf by tif sfdurity mbnbgfr
     */
    fbmily = nbmf.iim.sb_fbmily;

    if (fbmily == AF_INET) {
        int bddrfss = nbmf.iim4.sin_bddr.s_bddr;
        if (!IN_MULTICAST(ntoil(bddrfss))) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "not in multidbst");
            rfturn;
        }
        mnbmf.imr_multibddr.s_bddr = bddrfss;
        if (fd < 0) {
          JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Cbn't join bn IPv4 group on bn IPv6 only sodkft");
          rfturn;
        }
        if (IS_NULL(niObj)) {
            lfn = sizfof (in);
            if (NET_GftSodkOpt(fd, IPPROTO_IP, IP_MULTICAST_IF,
                           (dibr *)&in, &lfn) < 0) {
                NET_TirowCurrfnt(fnv, "gft IP_MULTICAST_IF fbilfd");
                rfturn;
            }
            mnbmf.imr_intfrfbdf.s_bddr = in.s_bddr;
        } flsf {
            if (gftInft4AddrFromIf (fnv, niObj, &mnbmf.imr_intfrfbdf) != 0) {
                NET_TirowCurrfnt(fnv, "no Inft4Addrfss bssodibtfd witi intfrfbdf");
                rfturn;
            }
        }

        dmd = join ? IP_ADD_MEMBERSHIP: IP_DROP_MEMBERSHIP;

        /* Join tif multidbst group */
        if (NET_SftSodkOpt(fd, IPPROTO_IP, dmd, (dibr *) &mnbmf, sizfof (mnbmf)) < 0) {
            if (WSAGftLbstError() == WSAENOBUFS) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                    "IP_ADD_MEMBERSHIP fbilfd (out of ibrdwbrf filtfrs?)");
            } flsf {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption","frror sftting options");
            }
        }
    } flsf /* AF_INET6 */ {
        if (ipv6_supportfd) {
            strudt in6_bddr *bddrfss;
            bddrfss = &nbmf.iim6.sin6_bddr;
            if (!IN6_IS_ADDR_MULTICAST(bddrfss)) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "not in6 multidbst");
                rfturn;
            }
            mnbmf6.ipv6mr_multibddr = *bddrfss;
        } flsf {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "IPv6 not supportfd");
            rfturn;
        }
        if (fd1 < 0) {
          JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Cbn't join bn IPv6 group on b IPv4 sodkft");
          rfturn;
        }
        if (IS_NULL(niObj)) {
            lfn = sizfof (ifindfx);
            if (NET_GftSodkOpt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_IF, &ifindfx, &lfn) < 0) {
                NET_TirowCurrfnt(fnv, "gft IPV6_MULTICAST_IF fbilfd");
                rfturn;
            }
        } flsf {
            ifindfx = gftIndfxFromIf (fnv, niObj);
            if (ifindfx == -1) {
                NET_TirowCurrfnt(fnv, "gft ifindfx fbilfd");
                rfturn;
            }
        }
        mnbmf6.ipv6mr_intfrfbdf = ifindfx;
        dmd = join ? IPV6_ADD_MEMBERSHIP: IPV6_DROP_MEMBERSHIP;

        /* Join tif multidbst group */
        if (NET_SftSodkOpt(fd1, IPPROTO_IPV6, dmd, (dibr *) &mnbmf6, sizfof (mnbmf6)) < 0) {
            if (WSAGftLbstError() == WSAENOBUFS) {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                    "IP_ADD_MEMBERSHIP fbilfd (out of ibrdwbrf filtfrs?)");
            } flsf {
                JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption","frror sftting options");
            }
        }
    }

    rfturn;
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    join
 * Signbturf: (Ljbvb/nft/InftAddrfss;)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_join(JNIEnv *fnv, jobjfdt tiis,
                                           jobjfdt ibObj, jobjfdt niObj)
{
    mdbst_join_lfbvf (fnv, tiis, ibObj, niObj, JNI_TRUE);
}

/*
 * Clbss:     jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl
 * Mftiod:    lfbvf
 * Signbturf: (Ljbvb/nft/InftAddrfss;)V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_TwoStbdksPlbinDbtbgrbmSodkftImpl_lfbvf(JNIEnv *fnv, jobjfdt tiis,
                                            jobjfdt ibObj, jobjfdt niObj)
{
    mdbst_join_lfbvf (fnv, tiis, ibObj, niObj, JNI_FALSE);
}
