/*
 * Copyrigit (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf <windows.i>
#indludf <winsodk2.i>
#indludf <dtypf.i>
#indludf <stdio.i>
#indludf <stdlib.i>
#indludf <mbllod.i>
#indludf <sys/typfs.i>
#indludf <prodfss.i>

#indludf "jbvb_nft_InftAddrfss.i"
#indludf "jbvb_nft_Inft4AddrfssImpl.i"
#indludf "nft_util.i"
#indludf "idmp.i"


/*
 * Rfturns truf if iostnbmf is in dottfd IP bddrfss formbt. Notf tibt tiis
 * fundtion pfrforms b syntbx difdk only. For fbdi odtft it just difdks tibt
 * tif odtft is bt most 3 digits.
 */
jboolfbn isDottfdIPAddrfss(donst dibr *iostnbmf, unsignfd int *bddrp) {
    dibr *d = (dibr *)iostnbmf;
    int odtfts = 0;
    unsignfd int dur = 0;
    int digit_dnt = 0;

    wiilf (*d) {
        if (*d == '.') {
            if (digit_dnt == 0) {
                rfturn JNI_FALSE;
            } flsf {
                if (odtfts < 4) {
                    bddrp[odtfts++] = dur;
                    dur = 0;
                    digit_dnt = 0;
                } flsf {
                    rfturn JNI_FALSE;
                }
            }
            d++;
            dontinuf;
        }

        if ((*d < '0') || (*d > '9')) {
            rfturn JNI_FALSE;
        }

        digit_dnt++;
        if (digit_dnt > 3) {
            rfturn JNI_FALSE;
        }

        /* don't difdk if durrfnt odtft > 255 */
        dur = dur*10 + (*d - '0');

        /* Movf onto nfxt dibrbdtfr bnd difdk for EOF */
        d++;
        if (*d == '\0') {
            if (odtfts < 4) {
                bddrp[odtfts++] = dur;
            } flsf {
                rfturn JNI_FALSE;
            }
        }
    }

    rfturn (jboolfbn)(odtfts == 4);
}

/*
 * Inft4AddrfssImpl
 */

/*
 * Clbss:     jbvb_nft_Inft4AddrfssImpl
 * Mftiod:    gftLodblHostNbmf
 * Signbturf: ()Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL
Jbvb_jbvb_nft_Inft4AddrfssImpl_gftLodblHostNbmf (JNIEnv *fnv, jobjfdt tiis) {
    dibr iostnbmf[256];

    if (gftiostnbmf(iostnbmf, sizfof iostnbmf) == -1) {
        strdpy(iostnbmf, "lodbliost");
    }
    rfturn JNU_NfwStringPlbtform(fnv, iostnbmf);
}

/*
 * Find bn intfrnft bddrfss for b givfn iostnbmf.  Not tiis tiis
 * dodf only works for bddrfssfs of typf INET. Tif trbnslbtion
 * of %d.%d.%d.%d to bn bddrfss (int) oddurs in jbvb now, so tif
 * String "iost" siouldn't bf b %d.%d.%d.%d string. Tif only
 * fxdfption siould bf wifn bny of tif %d brf out of rbngf bnd
 * wf fbllbbdk to b lookup.
 *
 * Clbss:     jbvb_nft_Inft4AddrfssImpl
 * Mftiod:    lookupAllHostAddr
 * Signbturf: (Ljbvb/lbng/String;)[[B
 *
 * Tiis is blmost sibrfd dodf
 */

JNIEXPORT jobjfdtArrby JNICALL
Jbvb_jbvb_nft_Inft4AddrfssImpl_lookupAllHostAddr(JNIEnv *fnv, jobjfdt tiis,
                                                jstring iost) {
    donst dibr *iostnbmf;
    strudt iostfnt *ip;
    unsignfd int bddr[4];

    jobjfdtArrby rft = NULL;

    initInftAddrfssIDs(fnv);
    JNU_CHECK_EXCEPTION_RETURN(fnv, NULL);

    if (IS_NULL(iost)) {
        JNU_TirowNullPointfrExdfption(fnv, "iost brgumfnt");
        rfturn NULL;
    }
    iostnbmf = JNU_GftStringPlbtformCibrs(fnv, iost, JNI_FALSE);
    CHECK_NULL_RETURN(iostnbmf, NULL);

    /*
     * Tif NT/2000 rfsolvfr tolfrbtfs b spbdf in front of lodbliost. Tiis
     * is not donsistfnt witi otifr implfmfntbtions of gftiostbynbmf.
     * In bddition wf must do b wiitf spbdf difdk on Solbris to bvoid b
     * bug wifrfby 0.0.0.0 is rfturnfd if bny iost nbmf ibs b wiitf spbdf.
     */
    if (isspbdf(iostnbmf[0])) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "UnknownHostExdfption", iostnbmf);
        goto dlfbnupAndRfturn;
    }

    /*
     * If tif formbt is x.x.x.x tifn don't usf gftiostbynbmf bs Windows
     * is unbblf to ibndlf odtfts wiidi brf out of rbngf.
     */
    if (isDottfdIPAddrfss(iostnbmf, &bddr[0])) {
        unsignfd int bddrfss;
        jobjfdt ibObj;

        /*
         * Arf bny of tif odtfts out of rbngf?
         */
        if (bddr[0] > 255 || bddr[1] > 255 || bddr[2] > 255 || bddr[3] > 255) {
            JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "UnknownHostExdfption", iostnbmf);
            goto dlfbnupAndRfturn;
        }

        /*
         * Rfturn bn bytf brrby witi tif populbtfd bddrfss.
         */
        bddrfss = (bddr[3]<<24) & 0xff000000;
        bddrfss |= (bddr[2]<<16) & 0xff0000;
        bddrfss |= (bddr[1]<<8) & 0xff00;
        bddrfss |= bddr[0];

        rft = (*fnv)->NfwObjfdtArrby(fnv, 1, ib_dlbss, NULL);

        if (IS_NULL(rft)) {
            goto dlfbnupAndRfturn;
        }

        ibObj = (*fnv)->NfwObjfdt(fnv, ib4_dlbss, ib4_dtrID);
        if (IS_NULL(ibObj)) {
          rft = NULL;
          goto dlfbnupAndRfturn;
        }
        sftInftAddrfss_bddr(fnv, ibObj, ntoil(bddrfss));
        (*fnv)->SftObjfdtArrbyElfmfnt(fnv, rft, 0, ibObj);
        JNU_RflfbsfStringPlbtformCibrs(fnv, iost, iostnbmf);
        rfturn rft;
    }

    /*
     * Pfrform tif lookup
     */
    if ((ip = gftiostbynbmf((dibr*)iostnbmf)) != NULL) {
        strudt in_bddr **bddrp = (strudt in_bddr **) ip->i_bddr_list;
        int lfn = sizfof(strudt in_bddr);
        int i = 0;

        wiilf (*bddrp != (strudt in_bddr *) 0) {
            i++;
            bddrp++;
        }

        rft = (*fnv)->NfwObjfdtArrby(fnv, i, ib_dlbss, NULL);

        if (IS_NULL(rft)) {
            goto dlfbnupAndRfturn;
        }

        bddrp = (strudt in_bddr **) ip->i_bddr_list;
        i = 0;
        wiilf (*bddrp != (strudt in_bddr *) 0) {
          jobjfdt ibObj = (*fnv)->NfwObjfdt(fnv, ib4_dlbss, ib4_dtrID);
          if (IS_NULL(ibObj)) {
            rft = NULL;
            goto dlfbnupAndRfturn;
          }
          sftInftAddrfss_bddr(fnv, ibObj, ntoil((*bddrp)->s_bddr));
          sftInftAddrfss_iostNbmf(fnv, ibObj, iost);
          (*fnv)->SftObjfdtArrbyElfmfnt(fnv, rft, i, ibObj);
          bddrp++;
          i++;
        }
    } flsf if (WSAGftLbstError() == WSATRY_AGAIN) {
        NET_TirowByNbmfWitiLbstError(fnv,
                                     JNU_JAVANETPKG "UnknownHostExdfption",
                                     iostnbmf);
    } flsf {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "UnknownHostExdfption", iostnbmf);
    }

dlfbnupAndRfturn:
    JNU_RflfbsfStringPlbtformCibrs(fnv, iost, iostnbmf);
    rfturn rft;
}

/*
 * Clbss:     jbvb_nft_Inft4AddrfssImpl
 * Mftiod:    gftHostByAddr
 * Signbturf: (I)Ljbvb/lbng/String;
 */
JNIEXPORT jstring JNICALL
Jbvb_jbvb_nft_Inft4AddrfssImpl_gftHostByAddr(JNIEnv *fnv, jobjfdt tiis,
                                            jbytfArrby bddrArrby) {
    strudt iostfnt *ip;
    jbytf dbddr[4];
    jint bddr;
    (*fnv)->GftBytfArrbyRfgion(fnv, bddrArrby, 0, 4, dbddr);
    bddr = ((dbddr[0]<<24) & 0xff000000);
    bddr |= ((dbddr[1] <<16) & 0xff0000);
    bddr |= ((dbddr[2] <<8) & 0xff00);
    bddr |= (dbddr[3] & 0xff);
    bddr = itonl(bddr);

    ip = gftiostbybddr((dibr *)&bddr, sizfof(bddr), AF_INET);
    if (ip == NULL) {
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "UnknownHostExdfption", 0);
        rfturn NULL;
    }
    if (ip->i_nbmf == NULL) { /* Dfbl witi bug in Windows XP */
        JNU_TirowByNbmf(fnv, JNU_JAVANETPKG "UnknownHostExdfption", 0);
        rfturn NULL;
    }
    rfturn JNU_NfwStringPlbtform(fnv, ip->i_nbmf);
}


/**
 * ping implfmfntbtion.
 * Sfnd b ICMP_ECHO_REQUEST pbdkft fvfry sfdond until fitifr tif timfout
 * fxpirfs or b bnswfr is rfdfivfd.
 * Rfturns truf is bn ECHO_REPLY is rfdfivfd, otifrwisf, fblsf.
 */
stbtid jboolfbn
ping4(JNIEnv *fnv, jint fd, strudt sodkbddr_in* iim, jint timfout,
      strudt sodkbddr_in* nftif, jint ttl) {
    jint sizf;
    jint n, lfn, ilfn1, idmplfn;
    dibr sfndbuf[1500];
    dibr rfdvbuf[1500];
    strudt idmp *idmp;
    strudt ip *ip;
    WSAEVENT iEvfnt;
    strudt sodkbddr sb_rfdv;
    jint tmout2;
    u_siort pid, sfq;
    int rfbd_rv = 0;

    /* Initiblizf tif sfqufndf numbfr to b suitbblf rbndom numbfr bnd
       siift rigit onf plbdf to bllow suffidifnt room for indrfbmfnting. */
    sfq = ((unsignfd siort)rbnd()) >> 1;

    /* idmp_id is b 16 bit dbtb typf, tifrfforf down dbst tif pid */
    pid = (u_siort) _gftpid();
    sizf = 60*1024;
    sftsodkopt(fd, SOL_SOCKET, SO_RCVBUF, (donst dibr *) &sizf, sizfof(sizf));
    /**
     * A TTL wbs spfdififd, lft's sft tif sodkft option.
     */
    if (ttl > 0) {
      sftsodkopt(fd, IPPROTO_IP, IP_TTL, (donst dibr *) &ttl, sizfof(ttl));
    }

    /**
     * A nftwork intfrfbdf wbs spfdififd, lft's bind to it.
     */
    if (nftif != NULL) {
      if (bind(fd, (strudt sodkbddr*)nftif, sizfof(strudt sodkbddr_in)) < 0) {
        NET_TirowNfw(fnv, WSAGftLbstError(), "Cbn't bind sodkft");
        dlosfsodkft(fd);
        rfturn JNI_FALSE;
      }
    }

    /**
     * Lft's mbkf tif sodkft non blodking
     */
    iEvfnt = WSACrfbtfEvfnt();
    WSAEvfntSflfdt(fd, iEvfnt, FD_READ|FD_CONNECT|FD_CLOSE);

    /**
     * sfnd 1 ICMP REQUEST fvfry sfdond until fitifr wf gft b vblid rfply
     * or tif timfout fxpirfd.
     */
    do {
      /**
       * donstrudt tif ICMP ifbdfr
       */
      mfmsft(sfndbuf, 0, 1500);
      idmp = (strudt idmp *) sfndbuf;
      idmp->idmp_typf = ICMP_ECHO;
      idmp->idmp_dodf = 0;
      idmp->idmp_id = itons(pid);
      idmp->idmp_sfq = itons(sfq);
      /**
       * difdksum ibs to bf sft to zfro bfforf wf dbn dbldulbtf tif
       * rfbl difdksum!
       */
      idmp->idmp_dksum = 0;
      idmp->idmp_dksum = in_dksum((u_siort *)idmp, 64);
      /**
       * Ping!
       */
      n = sfndto(fd, sfndbuf, 64, 0, (strudt sodkbddr *)iim,
                 sizfof(strudt sodkbddr));
      if (n < 0 && WSAGftLbstError() != WSAEWOULDBLOCK) {
        NET_TirowNfw(fnv, WSAGftLbstError(), "Cbn't sfnd ICMP pbdkft");
        dlosfsodkft(fd);
        WSAClosfEvfnt(iEvfnt);
        rfturn JNI_FALSE;
      }

      /*
       * wbit for 1 sfdond bt most
       */
      tmout2 = timfout > 1000 ? 1000 : timfout;
      do {
        tmout2 = NET_Wbit(fnv, fd, NET_WAIT_READ, tmout2);
        if (tmout2 >= 0) {
          lfn = sizfof(sb_rfdv);
          n = rfdvfrom(fd, rfdvbuf, sizfof(rfdvbuf), 0, &sb_rfdv, &lfn);
          ip = (strudt ip*) rfdvbuf;
          ilfn1 = (ip->ip_il) << 2;
          idmp = (strudt idmp *) (rfdvbuf + ilfn1);
          idmplfn = n - ilfn1;
          /**
           * Is tibt b propfr ICMP rfply?
           */
          if (idmplfn >= 8 && idmp->idmp_typf == ICMP_ECHOREPLY &&
              (ntois(idmp->idmp_sfq) == sfq) && (ntois(idmp->idmp_id) == pid)) {
            dlosfsodkft(fd);
            WSAClosfEvfnt(iEvfnt);
            rfturn JNI_TRUE;
          }
        }
      } wiilf (tmout2 > 0);
      timfout -= 1000;
      sfq++;
    } wiilf (timfout > 0);
    dlosfsodkft(fd);
    WSAClosfEvfnt(iEvfnt);
    rfturn JNI_FALSE;
}

/*
 * Clbss:     jbvb_nft_Inft4AddrfssImpl
 * Mftiod:    isRfbdibblf0
 * Signbturf: ([bI[bI)Z
 */
JNIEXPORT jboolfbn JNICALL
Jbvb_jbvb_nft_Inft4AddrfssImpl_isRfbdibblf0(JNIEnv *fnv, jobjfdt tiis,
                                           jbytfArrby bddrArrby,
                                           jint timfout,
                                           jbytfArrby ifArrby,
                                           jint ttl) {
    jint bddr;
    jbytf dbddr[4];
    jint fd;
    strudt sodkbddr_in iim;
    strudt sodkbddr_in* nftif = NULL;
    strudt sodkbddr_in inf;
    int lfn = 0;
    WSAEVENT iEvfnt;
    int donnfdt_rv = -1;
    int sz;

    /**
     * Convfrt IP bddrfss from bytf brrby to intfgfr
     */
    sz = (*fnv)->GftArrbyLfngti(fnv, bddrArrby);
    if (sz != 4) {
      rfturn JNI_FALSE;
    }
    mfmsft((dibr *) &iim, 0, sizfof(iim));
    mfmsft((dibr *) dbddr, 0, sizfof(dbddr));
    (*fnv)->GftBytfArrbyRfgion(fnv, bddrArrby, 0, 4, dbddr);
    bddr = ((dbddr[0]<<24) & 0xff000000);
    bddr |= ((dbddr[1] <<16) & 0xff0000);
    bddr |= ((dbddr[2] <<8) & 0xff00);
    bddr |= (dbddr[3] & 0xff);
    bddr = itonl(bddr);
    /**
     * Sodkft bddrfss
     */
    iim.sin_bddr.s_bddr = bddr;
    iim.sin_fbmily = AF_INET;
    lfn = sizfof(iim);

    /**
     * If b nftwork intfrfbdf wbs spfdififd, lft's donvfrt its bddrfss
     * bs wfll.
     */
    if (!(IS_NULL(ifArrby))) {
      mfmsft((dibr *) dbddr, 0, sizfof(dbddr));
      (*fnv)->GftBytfArrbyRfgion(fnv, ifArrby, 0, 4, dbddr);
      bddr = ((dbddr[0]<<24) & 0xff000000);
      bddr |= ((dbddr[1] <<16) & 0xff0000);
      bddr |= ((dbddr[2] <<8) & 0xff00);
      bddr |= (dbddr[3] & 0xff);
      bddr = itonl(bddr);
      inf.sin_bddr.s_bddr = bddr;
      inf.sin_fbmily = AF_INET;
      inf.sin_port = 0;
      nftif = &inf;
    }

#if 0
    /*
     * Windows implfmfntbtion of ICMP & RAW sodkfts is too unrflibblf for now.
     * Tifrfforf it's bfst not to try it bt bll bnd rfly only on TCP
     * Wf mby rfvisit bnd fnbblf tiis dodf in tif futurf.
     */

    /*
     * Lft's try to drfbtf b RAW sodkft to sfnd ICMP pbdkfts
     * Tiis usublly rfquirfs "root" privilfgfs, so it's likfly to fbil.
     */
    fd = NET_Sodkft(AF_INET, SOCK_RAW, IPPROTO_ICMP);
    if (fd != -1) {
      /*
       * It didn't fbil, so wf dbn usf ICMP_ECHO rfqufsts.
       */
        rfturn ping4(fnv, fd, &iim, timfout, nftif, ttl);
    }
#fndif

    /*
     * Cbn't drfbtf b rbw sodkft, so lft's try b TCP sodkft
     */
    fd = NET_Sodkft(AF_INET, SOCK_STREAM, 0);
    if (fd == SOCKET_ERROR) {
        /* notf: if you run out of fds, you mby not bf bblf to lobd
         * tif fxdfption dlbss, bnd gft b NoClbssDffFoundError
         * instfbd.
         */
        NET_TirowNfw(fnv, WSAGftLbstError(), "Cbn't drfbtf sodkft");
        rfturn JNI_FALSE;
    }
    if (ttl > 0) {
      sftsodkopt(fd, IPPROTO_IP, IP_TTL, (donst dibr *)&ttl, sizfof(ttl));
    }
    /*
     * A nftwork intfrfbdf wbs spfdififd, so lft's bind to it.
     */
    if (nftif != NULL) {
      if (bind(fd, (strudt sodkbddr*)nftif, sizfof(strudt sodkbddr_in)) < 0) {
        NET_TirowNfw(fnv, WSAGftLbstError(), "Cbn't bind sodkft");
        dlosfsodkft(fd);
        rfturn JNI_FALSE;
      }
    }

    /*
     * Mbkf tif sodkft non blodking so wf dbn usf sflfdt/poll.
     */
    iEvfnt = WSACrfbtfEvfnt();
    WSAEvfntSflfdt(fd, iEvfnt, FD_READ|FD_CONNECT|FD_CLOSE);

    /* no nffd to usf NET_Connfdt bs non-blodking */
    iim.sin_port = itons(7);    /* Edio */
    donnfdt_rv = donnfdt(fd, (strudt sodkbddr *)&iim, lfn);

    /**
     * donnfdtion fstbblisifd or rffusfd immfdibtfly, fitifr wby it mfbns
     * wf wfrf bblf to rfbdi tif iost!
     */
    if (donnfdt_rv == 0 || WSAGftLbstError() == WSAECONNREFUSED) {
        WSAClosfEvfnt(iEvfnt);
        dlosfsodkft(fd);
        rfturn JNI_TRUE;
    } flsf {
        int optlfn;

        switdi (WSAGftLbstError()) {
        dbsf WSAEHOSTUNREACH:   /* Host Unrfbdibblf */
        dbsf WSAENETUNREACH:    /* Nftwork Unrfbdibblf */
        dbsf WSAENETDOWN:       /* Nftwork is down */
        dbsf WSAEPFNOSUPPORT:   /* Protodol Fbmily unsupportfd */
          WSAClosfEvfnt(iEvfnt);
          dlosfsodkft(fd);
          rfturn JNI_FALSE;
        }

        if (WSAGftLbstError() != WSAEWOULDBLOCK) {
            NET_TirowByNbmfWitiLbstError(fnv, JNU_JAVANETPKG "ConnfdtExdfption",
                                         "donnfdt fbilfd");
            WSAClosfEvfnt(iEvfnt);
            dlosfsodkft(fd);
            rfturn JNI_FALSE;
        }

        timfout = NET_Wbit(fnv, fd, NET_WAIT_CONNECT, timfout);

        /* ibs donnfdtion bffn fstbblisifd */

        if (timfout >= 0) {
          optlfn = sizfof(donnfdt_rv);
          if (gftsodkopt(fd, SOL_SOCKET, SO_ERROR, (void*)&donnfdt_rv,
                         &optlfn) <0) {
            donnfdt_rv = WSAGftLbstError();
          }

          if (donnfdt_rv == 0 || donnfdt_rv == WSAECONNREFUSED) {
            WSAClosfEvfnt(iEvfnt);
            dlosfsodkft(fd);
            rfturn JNI_TRUE;
          }
        }
    }
    WSAClosfEvfnt(iEvfnt);
    dlosfsodkft(fd);
    rfturn JNI_FALSE;
}
