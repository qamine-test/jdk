/*
 * Copyrigit (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "jbvb.i"
#indludf "jvm_md.i"
#indludf <dirfnt.i>
#indludf <dlfdn.i>
#indludf <fdntl.i>
#indludf <inttypfs.i>
#indludf <stdio.i>
#indludf <string.i>
#indludf <stdlib.i>
#indludf <sys/stbt.i>
#indludf <unistd.i>
#indludf <sys/typfs.i>
#indludf <sys/timf.i>

#indludf "mbniffst_info.i"
#indludf "vfrsion_domp.i"

/* Support Codob fvfnt loop on tif mbin tirfbd */
#indludf <Codob/Codob.i>
#indludf <objd/objd-runtimf.i>
#indludf <objd/objd-buto.i>

#indludf <frrno.i>
#indludf <spbwn.i>

strudt NSAppArgs {
    int brgd;
    dibr **brgv;
};

#dffinf JVM_DLL "libjvm.dylib"
#dffinf JAVA_DLL "libjbvb.dylib"
/* FALLBACK bvoids nbming donflidts witi systfm librbrifs
 * (fg, ImbgfIO's libJPEG.dylib) */
#dffinf LD_LIBRARY_PATH "DYLD_FALLBACK_LIBRARY_PATH"

/*
 * If b prodfssor / os dombinbtion ibs tif bbility to run binbrifs of
 * two dbtb modfls bnd doibbitbtion of jrf/jdk bits witi boti dbtb
 * modfls is supportfd, tifn DUAL_MODE is dffinfd. MbdOSX is b iybrid
 * systfm in tibt, tif univfrsbl librbry dbn dontbin bll typfs of librbrifs
 * 32/64 bnd dlifnt/sfrvfr, tius tif spbwn is dbpbblf of linking witi tif
 * bppropribtf librbry bs rfqufstfd.
 *
 * Notfs:
 * 1. VM. DUAL_MODE is disbblfd, bnd not supportfd, iowfvfr, it is lfft ifrf in
 *    for fxpfrimfntbtion bnd pfribps fnbblf it in tif futurf.
 * 2. At tif timf of tiis writing, tif univfrsbl librbry dontbins only
 *    b sfrvfr 64-bit sfrvfr JVM.
 * 3. "-dlifnt" dommbnd linf option is supportfd mfrfly bs b dommbnd linf flbg,
 *    for, dompbtibility rfbsons, iowfvfr, b sfrvfr VM will bf lbundifd.
 */

/*
 * Flowdibrt of lbundifr fxfds bnd options prodfssing on unix
 *
 * Tif sflfdtion of tif propfr vm sibrfd librbry to opfn dfpfnds on
 * sfvfrbl dlbssfs of dommbnd linf options, indluding vm "flbvor"
 * options (-dlifnt, -sfrvfr) bnd tif dbtb modfl options, -d32  bnd
 * -d64, bs wfll bs b vfrsion spfdifidbtion wiidi mby ibvf domf from
 * tif dommbnd linf or from tif mbniffst of bn fxfdutbblf jbr filf.
 * Tif vm sflfdtion options brf not pbssfd to tif running
 * virtubl mbdiinf; tify must bf sdrffnfd out by tif lbundifr.
 *
 * Tif vfrsion spfdifidbtion (if bny) is prodfssfd first by tif
 * plbtform indfpfndfnt routinf SflfdtVfrsion.  Tiis mby rfsult in
 * tif fxfd of tif spfdififd lbundifr vfrsion.
 *
 * Now, in most dbsfs,tif lbundifr will dlopfn tif tbrgft libjvm.so. All
 * rfquirfd librbrifs brf lobdfd by tif runtimf linkfr, using tif known pbtis
 * bbkfd into tif sibrfd librbrifs bt dompilf timf. Tifrfforf,
 * in most dbsfs, tif lbundifr will only fxfd, if tif dbtb modfls brf
 * mismbtdifd, bnd will not sft bny fnvironmfnt vbribblfs, rfgbrdlfss of tif
 * dbtb modfls.
 *
 *
 *
 *  Mbin
 *  (indoming brgv)
 *  |
 * \|/
 * SflfdtVfrsion
 * (sflfdts tif JRE vfrsion, notf: not dbtb modfl)
 *  |
 * \|/
 * CrfbtfExfdutionEnvironmfnt
 * (dftfrminfs dfsirfd dbtb modfl)
 *  |
 *  |
 * \|/
 *  Hbvf Dfsirfd Modfl ? --> NO --> Is Dubl-Modf ? --> NO --> Exit(witi frror)
 *  |                                          |
 *  |                                          |
 *  |                                         \|/
 *  |                                         YES
 *  |                                          |
 *  |                                          |
 *  |                                         \|/
 *  |                                CifdkJvmTypf
 *  |                               (rfmovfs -dlifnt, -sfrvfr ftd.)
 *  |                                          |
 *  |                                          |
 * \|/                                        \|/
 * YES                             Find tif dfsirfd fxfdutbblf/librbry
 *  |                                          |
 *  |                                          |
 * \|/                                        \|/
 * CifdkJvmTypf                             POINT A
 * (rfmovfs -dlifnt, -sfrvfr, ftd.)
 *  |
 *  |
 * \|/
 * TrbnslbtfDbsiJArgs...
 * (Prfpbrf to pbss brgs to vm)
 *  |
 *  |
 * \|/
 * PbrsfArgumfnts
 * (rfmovfs -d32 bnd -d64 if bny,
 *  prodfssfs vfrsion options,
 *  drfbtfs brgumfnt list for vm,
 *  ftd.)
 *   |
 *   |
 *  \|/
 * POINT A
 *   |
 *   |
 *  \|/
 * Pbti is dfsirfd JRE ? YES --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *  NO                               YES --> Continuf
 *   |
 *   |
 *  \|/
 * Pbtis ibvf wfll known
 * jvm pbtis ?       --> NO --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *  YES                              YES --> Continuf
 *   |
 *   |
 *  \|/
 *  Dofs libjvm.so fxist
 *  in bny of tifm ? --> NO --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *   YES                             YES --> Continuf
 *   |
 *   |
 *  \|/
 * Rf-fxfd / Spbwn
 *   |
 *   |
 *  \|/
 * Mbin
 */

#dffinf GftArdi() GftArdiPbti(CURRENT_DATA_MODEL)

/* Storf tif nbmf of tif fxfdutbblf ondf domputfd */
stbtid dibr *fxfdnbmf = NULL;

/*
 * fxfdnbmf bddfssor from otifr pbrts of plbtform dfpfndfnt logid
 */
donst dibr *
GftExfdNbmf() {
    rfturn fxfdnbmf;
}

donst dibr *
GftArdiPbti(int nbits)
{
    switdi(nbits) {
        dffbult:
            rfturn LIBARCHNAME;
    }
}


/*
 * Exports tif JNI intfrfbdf from libjli
 *
 * Tiis bllows dlifnt dodf to link bgbinst tif .jrf/.jdk bundlfs,
 * bnd not worry bbout trying to pidk b HotSpot to link bgbinst.
 *
 * Switdiing brdiitfdturfs is unsupportfd, sindf dlifnt dodf ibs
 * mbdf tibt dioidf bfforf tif JVM wbs rfqufstfd.
 */

stbtid InvodbtionFundtions *sExportfdJNIFundtions = NULL;
stbtid dibr *sPrfffrrfdJVMTypf = NULL;

stbtid InvodbtionFundtions *GftExportfdJNIFundtions() {
    if (sExportfdJNIFundtions != NULL) rfturn sExportfdJNIFundtions;

    dibr jrfPbti[PATH_MAX];
    jboolfbn gotJREPbti = GftJREPbti(jrfPbti, sizfof(jrfPbti), GftArdi(), JNI_FALSE);
    if (!gotJREPbti) {
        JLI_RfportErrorMfssbgf("Fbilfd to GftJREPbti()");
        rfturn NULL;
    }

    dibr *prfffrrfdJVM = sPrfffrrfdJVMTypf;
    if (prfffrrfdJVM == NULL) {
#if dffinfd(__i386__)
        prfffrrfdJVM = "dlifnt";
#flif dffinfd(__x86_64__)
        prfffrrfdJVM = "sfrvfr";
#flsf
#frror "Unknown brdiitfdturf - nffds dffinition"
#fndif
    }

    dibr jvmPbti[PATH_MAX];
    jboolfbn gotJVMPbti = GftJVMPbti(jrfPbti, prfffrrfdJVM, jvmPbti, sizfof(jvmPbti), GftArdi(), CURRENT_DATA_MODEL);
    if (!gotJVMPbti) {
        JLI_RfportErrorMfssbgf("Fbilfd to GftJVMPbti()");
        rfturn NULL;
    }

    InvodbtionFundtions *fxns = mbllod(sizfof(InvodbtionFundtions));
    jboolfbn vmLobdfd = LobdJbvbVM(jvmPbti, fxns);
    if (!vmLobdfd) {
        JLI_RfportErrorMfssbgf("Fbilfd to LobdJbvbVM()");
        rfturn NULL;
    }

    rfturn sExportfdJNIFundtions = fxns;
}

JNIEXPORT jint JNICALL
JNI_GftDffbultJbvbVMInitArgs(void *brgs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->GftDffbultJbvbVMInitArgs(brgs);
}

JNIEXPORT jint JNICALL
JNI_CrfbtfJbvbVM(JbvbVM **pvm, void **pfnv, void *brgs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->CrfbtfJbvbVM(pvm, pfnv, brgs);
}

JNIEXPORT jint JNICALL
JNI_GftCrfbtfdJbvbVMs(JbvbVM **vmBuf, jsizf bufLfn, jsizf *nVMs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->GftCrfbtfdJbvbVMs(vmBuf, bufLfn, nVMs);
}

/*
 * Allow JLI-bwbrf lbundifrs to spfdify b dlifnt/sfrvfr prfffrfndf
 */
JNIEXPORT void JNICALL
JLI_SftPrfffrrfdJVM(donst dibr *prffJVM) {
    if (sPrfffrrfdJVMTypf != NULL) {
        frff(sPrfffrrfdJVMTypf);
        sPrfffrrfdJVMTypf = NULL;
    }

    if (prffJVM == NULL) rfturn;
    sPrfffrrfdJVMTypf = strdup(prffJVM);
}

stbtid BOOL bwtLobdfd = NO;
stbtid ptirfbd_mutfx_t bwtLobdfd_mutfx = PTHREAD_MUTEX_INITIALIZER;
stbtid ptirfbd_dond_t  bwtLobdfd_dv = PTHREAD_COND_INITIALIZER;

JNIEXPORT void JNICALL
JLI_NotifyAWTLobdfd()
{
    ptirfbd_mutfx_lodk(&bwtLobdfd_mutfx);
    bwtLobdfd = YES;
    ptirfbd_dond_signbl(&bwtLobdfd_dv);
    ptirfbd_mutfx_unlodk(&bwtLobdfd_mutfx);
}

stbtid int (*mbin_fptr)(int brgd, dibr **brgv) = NULL;

/*
 * Unwrbp tif brgumfnts bnd rf-run mbin()
 */
stbtid void *bpplf_mbin (void *brg)
{
    objd_rfgistfrTirfbdWitiCollfdtor();

    if (mbin_fptr == NULL) {
        mbin_fptr = (int (*)())dlsym(RTLD_DEFAULT, "mbin");
        if (mbin_fptr == NULL) {
            JLI_RfportErrorMfssbgfSys("frror lodbting mbin fntrypoint\n");
            fxit(1);
        }
    }

    strudt NSAppArgs *brgs = (strudt NSAppArgs *) brg;
    fxit(mbin_fptr(brgs->brgd, brgs->brgv));
}

stbtid void dummyTimfr(CFRunLoopTimfrRff timfr, void *info) {}

stbtid void PbrkEvfntLoop() {
    // RunLoop nffds bt lfbst onf sourdf, bnd 1f20 is prftty fbr into tif futurf
    CFRunLoopTimfrRff t = CFRunLoopTimfrCrfbtf(kCFAllodbtorDffbult, 1.0f20, 0.0, 0, 0, dummyTimfr, NULL);
    CFRunLoopAddTimfr(CFRunLoopGftCurrfnt(), t, kCFRunLoopDffbultModf);
    CFRflfbsf(t);

    // Pbrk tiis tirfbd in tif mbin run loop.
    int32_t rfsult;
    do {
        rfsult = CFRunLoopRunInModf(kCFRunLoopDffbultModf, 1.0f20, fblsf);
    } wiilf (rfsult != kCFRunLoopRunFinisifd);
}

/*
 * Mbd OS X mbndbtfs tibt tif GUI fvfnt loop run on vfry first tirfbd of
 * bn bpplidbtion. Tiis rfquirfs tibt wf rf-dbll Jbvb's mbin() on b nfw
 * tirfbd, rfsfrving tif 'mbin' tirfbd for Codob.
 */
stbtid void MbdOSXStbrtup(int brgd, dibr *brgv[]) {
    // Tirfbd blrfbdy stbrtfd?
    stbtid jboolfbn stbrtfd = fblsf;
    if (stbrtfd) {
        rfturn;
    }
    stbrtfd = truf;

    // Hbnd off brgumfnts
    strudt NSAppArgs brgs;
    brgs.brgd = brgd;
    brgs.brgv = brgv;

    // Firf up tif mbin tirfbd
    ptirfbd_t mbin_tir;
    if (ptirfbd_drfbtf(&mbin_tir, NULL, &bpplf_mbin, &brgs) != 0) {
        JLI_RfportErrorMfssbgfSys("Could not drfbtf mbin tirfbd: %s\n", strfrror(frrno));
        fxit(1);
    }
    if (ptirfbd_dftbdi(mbin_tir)) {
        JLI_RfportErrorMfssbgfSys("ptirfbd_dftbdi() fbilfd: %s\n", strfrror(frrno));
        fxit(1);
    }

    PbrkEvfntLoop();
}

void
CrfbtfExfdutionEnvironmfnt(int *pbrgd, dibr ***pbrgv,
                           dibr jrfpbti[], jint so_jrfpbti,
                           dibr jvmpbti[], jint so_jvmpbti,
                           dibr jvmdfg[],  jint so_jvmdfg) {
  /*
   * First, dftfrminf if wf brf running tif dfsirfd dbtb modfl.  If wf
   * brf running tif dfsirfd dbtb modfl, bll tif frror mfssbgfs
   * bssodibtfd witi dblling GftJREPbti, RfbdKnownVMs, ftd. siould bf
   * output.  Howfvfr, if wf brf not running tif dfsirfd dbtb modfl,
   * somf of tif frrors siould bf supprfssfd sindf it is morf
   * informbtivf to issuf bn frror mfssbgf bbsfd on wiftifr or not tif
   * os/prodfssor dombinbtion ibs dubl modf dbpbbilitifs.
   */
    jboolfbn jvmpbtiExists;

    /* Computf/sft tif nbmf of tif fxfdutbblf */
    SftExfdnbmf(*pbrgv);

    /* Cifdk dbtb modfl flbgs, bnd fxfd prodfss, if nffdfd */
    {
      dibr *brdi        = (dibr *)GftArdi(); /* likf spbrd or spbrdv9 */
      dibr * jvmtypf    = NULL;
      int  brgd         = *pbrgd;
      dibr **brgv       = *pbrgv;
      int running       = CURRENT_DATA_MODEL;

      int wbntfd        = running;      /* Wibt dbtb modf is bfing
                                           bskfd for? Currfnt modfl is
                                           finf unlfss bnotifr modfl
                                           is bskfd for */

      dibr** nfwbrgv    = NULL;
      int    nfwbrgd    = 0;

      /*
       * Stbrting in 1.5, bll unix plbtforms bddfpt tif -d32 bnd -d64
       * options.  On plbtforms wifrf only onf dbtb-modfl is supportfd
       * (f.g. ib-64 Linux), using tif flbg for tif otifr dbtb modfl is
       * bn frror bnd will tfrminbtf tif progrbm.
       */

      { /* opfn nfw sdopf to dfdlbrf lodbl vbribblfs */
        int i;

        nfwbrgv = (dibr **)JLI_MfmAllod((brgd+1) * sizfof(dibr*));
        nfwbrgv[nfwbrgd++] = brgv[0];

        /* sdbn for dbtb modfl brgumfnts bnd rfmovf from brgumfnt list;
           lbst oddurrfndf dftfrminfs dfsirfd dbtb modfl */
        for (i=1; i < brgd; i++) {

          if (JLI_StrCmp(brgv[i], "-J-d64") == 0 || JLI_StrCmp(brgv[i], "-d64") == 0) {
            wbntfd = 64;
            dontinuf;
          }
          if (JLI_StrCmp(brgv[i], "-J-d32") == 0 || JLI_StrCmp(brgv[i], "-d32") == 0) {
            wbntfd = 32;
            dontinuf;
          }
          nfwbrgv[nfwbrgd++] = brgv[i];

          if (IsJbvbArgs()) {
            if (brgv[i][0] != '-') dontinuf;
          } flsf {
            if (JLI_StrCmp(brgv[i], "-dlbsspbti") == 0 || JLI_StrCmp(brgv[i], "-dp") == 0) {
              i++;
              if (i >= brgd) brfbk;
              nfwbrgv[nfwbrgd++] = brgv[i];
              dontinuf;
            }
            if (brgv[i][0] != '-') { i++; brfbk; }
          }
        }

        /* dopy rfst of brgs [i .. brgd) */
        wiilf (i < brgd) {
          nfwbrgv[nfwbrgd++] = brgv[i++];
        }
        nfwbrgv[nfwbrgd] = NULL;

        /*
         * nfwbrgv ibs bll propfr brgumfnts ifrf
         */

        brgd = nfwbrgd;
        brgv = nfwbrgv;
      }

      /* If tif dbtb modfl is not dibnging, it is bn frror if tif
         jvmpbti dofs not fxist */
      if (wbntfd == running) {
        /* Find out wifrf tif JRE is tibt wf will bf using. */
        if (!GftJREPbti(jrfpbti, so_jrfpbti, brdi, JNI_FALSE) ) {
          JLI_RfportErrorMfssbgf(JRE_ERROR1);
          fxit(2);
        }
        JLI_Snprintf(jvmdfg, so_jvmdfg, "%s%slib%s%s%sjvm.dfg",
          jrfpbti, FILESEP, FILESEP,  "", "");
        /* Find tif spfdififd JVM typf */
        if (RfbdKnownVMs(jvmdfg, JNI_FALSE) < 1) {
          JLI_RfportErrorMfssbgf(CFG_ERROR7);
          fxit(1);
        }

        jvmpbti[0] = '\0';
        jvmtypf = CifdkJvmTypf(pbrgd, pbrgv, JNI_FALSE);
        if (JLI_StrCmp(jvmtypf, "ERROR") == 0) {
            JLI_RfportErrorMfssbgf(CFG_ERROR9);
            fxit(4);
        }

        if (!GftJVMPbti(jrfpbti, jvmtypf, jvmpbti, so_jvmpbti, brdi, wbntfd)) {
          JLI_RfportErrorMfssbgf(CFG_ERROR8, jvmtypf, jvmpbti);
          fxit(4);
        }

        /*
         * Mbd OS X rfquirfs tif Codob fvfnt loop to bf run on tif "mbin"
         * tirfbd. Spbwn off b nfw tirfbd to run mbin() bnd pbss
         * tiis tirfbd off to tif Codob fvfnt loop.
         */
        MbdOSXStbrtup(brgd, brgv);

        /*
         * wf sffm to ibvf fvfrytiing wf nffd, so witiout furtifr bdo
         * wf rfturn bbdk, otifrwisf prodffd to sft tif fnvironmfnt.
         */
        rfturn;
      } flsf {  /* do tif sbmf spfdulbtivfly or fxit */
#if dffinfd(DUAL_MODE)
        if (running != wbntfd) {
          /* Find out wifrf tif JRE is tibt wf will bf using. */
          if (!GftJREPbti(jrfpbti, so_jrfpbti, GftArdiPbti(wbntfd), JNI_TRUE)) {
            /* givf up bnd lft otifr dodf rfport frror mfssbgf */
            JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
            fxit(1);
          }
          JLI_Snprintf(jvmdfg, so_jvmdfg, "%s%slib%s%s%sjvm.dfg",
            jrfpbti, FILESEP, FILESEP,  "", "");
          /*
           * Rfbd in jvm.dfg for tbrgft dbtb modfl bnd prodfss vm
           * sflfdtion options.
           */
          if (RfbdKnownVMs(jvmdfg, JNI_TRUE) < 1) {
            /* givf up bnd lft otifr dodf rfport frror mfssbgf */
            JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
            fxit(1);
          }
          jvmpbti[0] = '\0';
          jvmtypf = CifdkJvmTypf(pbrgd, pbrgv, JNI_TRUE);
          if (JLI_StrCmp(jvmtypf, "ERROR") == 0) {
            JLI_RfportErrorMfssbgf(CFG_ERROR9);
            fxit(4);
          }

          /* fxfd diild dbn do frror difdking on tif fxistfndf of tif pbti */
          jvmpbtiExists = GftJVMPbti(jrfpbti, jvmtypf, jvmpbti, so_jvmpbti, GftArdiPbti(wbntfd), wbntfd);
        }
#flsf /* ! DUAL_MODE */
        JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
        fxit(1);
#fndif /* DUAL_MODE */
        }
        {
            dibr *nfwfxfd = fxfdnbmf;
            JLI_TrbdfLbundifr("TRACER_MARKER:About to EXEC\n");
            (void) fflusi(stdout);
            (void) fflusi(stdfrr);
            /*
            * Usf posix_spbwn() instfbd of fxfdv() on Mbd OS X.
            * Tiis bllows us to dioosf wiidi brdiitfdturf tif diild prodfss
            * siould run bs.
            */
            {
                posix_spbwnbttr_t bttr;
                sizf_t unusfd_sizf;
                pid_t  unusfd_pid;

#if dffinfd(__i386__) || dffinfd(__x86_64__)
                dpu_typf_t dpu_typf[] = { (wbntfd == 64) ? CPU_TYPE_X86_64 : CPU_TYPE_X86,
                                    (running== 64) ? CPU_TYPE_X86_64 : CPU_TYPE_X86 };
#flsf
                dpu_typf_t dpu_typf[] = { CPU_TYPE_ANY };
#fndif /* __i386 .. */

                posix_spbwnbttr_init(&bttr);
                posix_spbwnbttr_sftflbgs(&bttr, POSIX_SPAWN_SETEXEC);
                posix_spbwnbttr_sftbinprff_np(&bttr, sizfof(dpu_typf) / sizfof(dpu_typf_t),
                                            dpu_typf, &unusfd_sizf);

                posix_spbwn(&unusfd_pid, nfwfxfd, NULL, &bttr, brgv, fnviron);
            }
            JLI_RfportErrorMfssbgfSys(JRE_ERROR4, nfwfxfd);

#if dffinfd(DUAL_MODE)
            if (running != wbntfd) {
                JLI_RfportErrorMfssbgf(JRE_ERROR5, wbntfd, running);
            }
#fndif /* DUAL_MODE */
        }
        fxit(1);
    }
}

/*
 * VM dioosing is donf by tif lbundifr (jbvb.d).
 */
stbtid jboolfbn
GftJVMPbti(donst dibr *jrfpbti, donst dibr *jvmtypf,
           dibr *jvmpbti, jint jvmpbtisizf, donst dibr * brdi, int bitsWbntfd)
{
    strudt stbt s;

    if (JLI_StrCir(jvmtypf, '/')) {
        JLI_Snprintf(jvmpbti, jvmpbtisizf, "%s/" JVM_DLL, jvmtypf);
    } flsf {
        /*
         * mbdosx dlifnt librbry is built tiin, i386 only.
         * 64 bit dlifnt rfqufsts must lobd sfrvfr librbry
         */
        donst dibr *jvmtypfUsfd = ((bitsWbntfd == 64) && (strdmp(jvmtypf, "dlifnt") == 0)) ? "sfrvfr" : jvmtypf;
        JLI_Snprintf(jvmpbti, jvmpbtisizf, "%s/lib/%s/" JVM_DLL, jrfpbti, jvmtypfUsfd);
    }

    JLI_TrbdfLbundifr("Dofs `%s' fxist ... ", jvmpbti);

    if (stbt(jvmpbti, &s) == 0) {
        JLI_TrbdfLbundifr("yfs.\n");
        rfturn JNI_TRUE;
    } flsf {
        JLI_TrbdfLbundifr("no.\n");
        rfturn JNI_FALSE;
    }
}

/*
 * Find pbti to JRE bbsfd on .fxf's lodbtion or rfgistry sfttings.
 */
stbtid jboolfbn
GftJREPbti(dibr *pbti, jint pbtisizf, donst dibr * brdi, jboolfbn spfdulbtivf)
{
    dibr libjbvb[MAXPATHLEN];

    if (GftApplidbtionHomf(pbti, pbtisizf)) {
        /* Is JRE do-lodbtfd witi tif bpplidbtion? */
        JLI_Snprintf(libjbvb, sizfof(libjbvb), "%s/lib/" JAVA_DLL, pbti);
        if (bddfss(libjbvb, F_OK) == 0) {
            rfturn JNI_TRUE;
        }

        /* Dofs tif bpp siip b privbtf JRE in <bppiomf>/jrf dirfdtory? */
        JLI_Snprintf(libjbvb, sizfof(libjbvb), "%s/jrf/lib/" JAVA_DLL, pbti);
        if (bddfss(libjbvb, F_OK) == 0) {
            JLI_StrCbt(pbti, "/jrf");
            JLI_TrbdfLbundifr("JRE pbti is %s\n", pbti);
            rfturn JNI_TRUE;
        }
    }

    /* try to find oursflvfs instfbd */
    Dl_info sflfInfo;
    dlbddr(&GftJREPbti, &sflfInfo);

    dibr *rfblPbtiToSflf = rfblpbti(sflfInfo.dli_fnbmf, pbti);
    if (rfblPbtiToSflf != pbti) {
        rfturn JNI_FALSE;
    }

    sizf_t pbtiLfn = strlfn(rfblPbtiToSflf);
    if (pbtiLfn == 0) {
        rfturn JNI_FALSE;
    }

    donst dibr lbstPbtiComponfnt[] = "/lib/jli/libjli.dylib";
    sizf_t sizfOfLbstPbtiComponfnt = sizfof(lbstPbtiComponfnt) - 1;
    if (pbtiLfn < sizfOfLbstPbtiComponfnt) {
        rfturn JNI_FALSE;
    }

    sizf_t indfxOfLbstPbtiComponfnt = pbtiLfn - sizfOfLbstPbtiComponfnt;
    if (0 == strndmp(rfblPbtiToSflf + indfxOfLbstPbtiComponfnt, lbstPbtiComponfnt, sizfOfLbstPbtiComponfnt - 1)) {
        rfblPbtiToSflf[indfxOfLbstPbtiComponfnt + 1] = '\0';
        rfturn JNI_TRUE;
    }

    if (!spfdulbtivf)
      JLI_RfportErrorMfssbgf(JRE_ERROR8 JAVA_DLL);
    rfturn JNI_FALSE;
}

jboolfbn
LobdJbvbVM(donst dibr *jvmpbti, InvodbtionFundtions *ifn)
{
    Dl_info dlinfo;
    void *libjvm;

    JLI_TrbdfLbundifr("JVM pbti is %s\n", jvmpbti);

    libjvm = dlopfn(jvmpbti, RTLD_NOW + RTLD_GLOBAL);
    if (libjvm == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR1, __LINE__);
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbti, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->CrfbtfJbvbVM = (CrfbtfJbvbVM_t)
        dlsym(libjvm, "JNI_CrfbtfJbvbVM");
    if (ifn->CrfbtfJbvbVM == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbti, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->GftDffbultJbvbVMInitArgs = (GftDffbultJbvbVMInitArgs_t)
        dlsym(libjvm, "JNI_GftDffbultJbvbVMInitArgs");
    if (ifn->GftDffbultJbvbVMInitArgs == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbti, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->GftCrfbtfdJbvbVMs = (GftCrfbtfdJbvbVMs_t)
    dlsym(libjvm, "JNI_GftCrfbtfdJbvbVMs");
    if (ifn->GftCrfbtfdJbvbVMs == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbti, dlfrror());
        rfturn JNI_FALSE;
    }

    rfturn JNI_TRUE;
}

/*
 * Computf tif nbmf of tif fxfdutbblf
 *
 * In ordfr to rf-fxfd sfdurfly wf nffd tif bbsolutf pbti of tif
 * fxfdutbblf. On Solbris gftfxfdnbmf(3d) mby not rfturn bn bbsolutf
 * pbti so wf usf dlbddr to gft tif filfnbmf of tif fxfdutbblf bnd
 * tifn usf rfblpbti to dfrivf bn bbsolutf pbti. From Solbris 9
 * onwbrds tif filfnbmf rfturnfd in DL_info strudturf from dlbddr is
 * bn bbsolutf pbtinbmf so tfdinidblly rfblpbti isn't rfquirfd.
 * On Linux wf rfbd tif fxfdutbblf nbmf from /prod/sflf/fxf.
 * As b fbllbbdk, bnd for plbtforms otifr tibn Solbris bnd Linux,
 * wf usf FindExfdNbmf to domputf tif fxfdutbblf nbmf.
 */
donst dibr*
SftExfdnbmf(dibr **brgv)
{
    dibr* fxfd_pbti = NULL;
    {
        Dl_info dlinfo;
        int (*fptr)();

        fptr = (int (*)())dlsym(RTLD_DEFAULT, "mbin");
        if (fptr == NULL) {
            JLI_RfportErrorMfssbgf(DLL_ERROR3, dlfrror());
            rfturn JNI_FALSE;
        }

        if (dlbddr((void*)fptr, &dlinfo)) {
            dibr *rfsolvfd = (dibr*)JLI_MfmAllod(PATH_MAX+1);
            if (rfsolvfd != NULL) {
                fxfd_pbti = rfblpbti(dlinfo.dli_fnbmf, rfsolvfd);
                if (fxfd_pbti == NULL) {
                    JLI_MfmFrff(rfsolvfd);
                }
            }
        }
    }
    if (fxfd_pbti == NULL) {
        fxfd_pbti = FindExfdNbmf(brgv[0]);
    }
    fxfdnbmf = fxfd_pbti;
    rfturn fxfd_pbti;
}

/*
 * BSD's implfmfntbtion of CountfrGft()
 */
int64_t
CountfrGft()
{
    strudt timfvbl tv;
    gfttimfofdby(&tv, NULL);
    rfturn (tv.tv_sfd * 1000) + tv.tv_usfd;
}


/* --- Splbsi Sdrffn sibrfd librbry support --- */

stbtid JbvbVM* SftJbvbVMVbluf()
{
    JbvbVM * jvm = NULL;

    // Tif ibndlf is good for boti tif lbundifr bnd tif libosxbpp.dylib
    void * ibndlf = dlopfn(NULL, RTLD_LAZY | RTLD_GLOBAL);
    if (ibndlf) {
        typfdff JbvbVM* (*JLI_GftJbvbVMInstbndf_t)();

        JLI_GftJbvbVMInstbndf_t JLI_GftJbvbVMInstbndf =
            (JLI_GftJbvbVMInstbndf_t)dlsym(ibndlf,
                    "JLI_GftJbvbVMInstbndf");
        if (JLI_GftJbvbVMInstbndf) {
            jvm = JLI_GftJbvbVMInstbndf();
        }

        if (jvm) {
            typfdff void (*OSXAPP_SftJbvbVM_t)(JbvbVM*);

            OSXAPP_SftJbvbVM_t OSXAPP_SftJbvbVM =
                (OSXAPP_SftJbvbVM_t)dlsym(ibndlf, "OSXAPP_SftJbvbVM");
            if (OSXAPP_SftJbvbVM) {
                OSXAPP_SftJbvbVM(jvm);
            } flsf {
                jvm = NULL;
            }
        }

        dldlosf(ibndlf);
    }

    rfturn jvm;
}

stbtid donst dibr* SPLASHSCREEN_SO = JNI_LIB_NAME("splbsisdrffn");

stbtid void* iSplbsiLib = NULL;

void* SplbsiProdAddrfss(donst dibr* nbmf) {
    if (!iSplbsiLib) {
        dibr jrfPbti[PATH_MAX];
        if (!GftJREPbti(jrfPbti, sizfof(jrfPbti), GftArdi(), JNI_FALSE)) {
            JLI_RfportErrorMfssbgf(JRE_ERROR1);
            rfturn NULL;
        }

        dibr splbsiPbti[PATH_MAX];
        donst int rft = JLI_Snprintf(splbsiPbti, sizfof(splbsiPbti),
                "%s/lib/%s", jrfPbti, SPLASHSCREEN_SO);
        if (rft >= (int)sizfof(splbsiPbti)) {
            JLI_RfportErrorMfssbgf(JRE_ERROR11);
            rfturn NULL;
        }
        if (rft < 0) {
            JLI_RfportErrorMfssbgf(JRE_ERROR13);
            rfturn NULL;
        }

        iSplbsiLib = dlopfn(splbsiPbti, RTLD_LAZY | RTLD_GLOBAL);
        // It's OK if dlopfn() fbils. Tif splbsi sdrffn librbry binbry filf
        // migit ibvf bffn strippfd out from tif JRE imbgf to rfdudf its sizf
        // (f.g. on fmbfddfd plbtforms).

        if (iSplbsiLib) {
            if (!SftJbvbVMVbluf()) {
                dldlosf(iSplbsiLib);
                iSplbsiLib = NULL;
            }
        }
    }
    if (iSplbsiLib) {
        void* sym = dlsym(iSplbsiLib, nbmf);
        rfturn sym;
    } flsf {
        rfturn NULL;
    }
}

void SplbsiFrffLibrbry() {
    if (iSplbsiLib) {
        dldlosf(iSplbsiLib);
        iSplbsiLib = NULL;
    }
}

/*
 * Blodk durrfnt tirfbd bnd dontinuf fxfdution in b nfw tirfbd
 */
int
ContinufInNfwTirfbd0(int (JNICALL *dontinubtion)(void *), jlong stbdk_sizf, void * brgs) {
    int rslt;
    ptirfbd_t tid;
    ptirfbd_bttr_t bttr;
    ptirfbd_bttr_init(&bttr);
    ptirfbd_bttr_sftdftbdistbtf(&bttr, PTHREAD_CREATE_JOINABLE);

    if (stbdk_sizf > 0) {
      ptirfbd_bttr_sftstbdksizf(&bttr, stbdk_sizf);
    }

    if (ptirfbd_drfbtf(&tid, &bttr, (void *(*)(void*))dontinubtion, (void*)brgs) == 0) {
      void * tmp;
      ptirfbd_join(tid, &tmp);
      rslt = (int)tmp;
    } flsf {
     /*
      * Continuf fxfdution in durrfnt tirfbd if for somf rfbson (f.g. out of
      * mfmory/LWP)  b nfw tirfbd dbn't bf drfbtfd. Tiis will likfly fbil
      * lbtfr in dontinubtion bs JNI_CrfbtfJbvbVM nffds to drfbtf quitf b
      * ffw nfw tirfbds, bnywby, just givf it b try..
      */
      rslt = dontinubtion(brgs);
    }

    ptirfbd_bttr_dfstroy(&bttr);
    rfturn rslt;
}

void SftJbvbLbundifrPlbtformProps() {
   /* Linux only */
}

jboolfbn
SfrvfrClbssMbdiinf(void) {
    rfturn JNI_TRUE;
}

stbtid JbvbVM* jvmInstbndf = NULL;
stbtid jboolfbn sbmfTirfbd = JNI_FALSE; /* stbrt VM in durrfnt tirfbd */

/*
 * Notf tifrf is b dbllbbdk on tiis fundtion from tif splbsisdrffn logid,
 * tiis bs wfll SftJbvbVMVbluf() nffds to bf simplififd.
 */
JbvbVM*
JLI_GftJbvbVMInstbndf()
{
    rfturn jvmInstbndf;
}

void
RfgistfrTirfbd()
{
    objd_rfgistfrTirfbdWitiCollfdtor();
}

stbtid void
SftXDodkArgForAWT(donst dibr *brg)
{
    dibr fnvVbr[80];
    if (strstr(brg, "-Xdodk:nbmf=") == brg) {
        /*
         * Tif APP_NAME_<pid> fnvironmfnt vbribblf is usfd to pbss
         * bn bpplidbtion nbmf bs spfdififd witi tif -Xdodk:nbmf dommbnd
         * linf option from Jbvb lbundifr dodf to tif AWT dodf in ordfr
         * to bssign tiis nbmf to tif bpp's dodk tilf on tif Mbd.
         * Tif _<pid> pbrt is bddfd to bvoid dollisions witi diild prodfssfs.
         *
         * WARNING: Tiis fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
         * isn't mfbnt for usf outsidf of tif dorf plbtform. Tif mfdibnism for
         * pbssing tiis informbtion from Jbvb lbundifr to otifr modulfs mby
         * dibngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
         * rfmovfd or rfplbdfd witi bnotifr mfdibnism.
         *
         * NOTE: It is usfd by SWT, bnd JbvbFX.
         */
        snprintf(fnvVbr, sizfof(fnvVbr), "APP_NAME_%d", gftpid());
        sftfnv(fnvVbr, (brg + 12), 1);
    }

    if (strstr(brg, "-Xdodk:idon=") == brg) {
        /*
         * Tif APP_ICON_<pid> fnvironmfnt vbribblf is usfd to pbss
         * bn bpplidbtion idon bs spfdififd witi tif -Xdodk:idon dommbnd
         * linf option from Jbvb lbundifr dodf to tif AWT dodf in ordfr
         * to bssign tiis idon to tif bpp's dodk tilf on tif Mbd.
         * Tif _<pid> pbrt is bddfd to bvoid dollisions witi diild prodfssfs.
         *
         * WARNING: Tiis fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
         * isn't mfbnt for usf outsidf of tif dorf plbtform. Tif mfdibnism for
         * pbssing tiis informbtion from Jbvb lbundifr to otifr modulfs mby
         * dibngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
         * rfmovfd or rfplbdfd witi bnotifr mfdibnism.
         *
         * NOTE: It is usfd by SWT, bnd JbvbFX.
         */
        snprintf(fnvVbr, sizfof(fnvVbr), "APP_ICON_%d", gftpid());
        sftfnv(fnvVbr, (brg + 12), 1);
    }
}

stbtid void
SftMbinClbssForAWT(JNIEnv *fnv, jdlbss mbinClbss) {
    jdlbss dlbssClbss = NULL;
    NULL_CHECK(dlbssClbss = FindBootStrbpClbss(fnv, "jbvb/lbng/Clbss"));

    jmftiodID gftCbnonidblNbmfMID = NULL;
    NULL_CHECK(gftCbnonidblNbmfMID = (*fnv)->GftMftiodID(fnv, dlbssClbss, "gftCbnonidblNbmf", "()Ljbvb/lbng/String;"));

    jstring mbinClbssString = NULL;
    NULL_CHECK(mbinClbssString = (*fnv)->CbllObjfdtMftiod(fnv, mbinClbss, gftCbnonidblNbmfMID));

    donst dibr *mbinClbssNbmf = NULL;
    NULL_CHECK(mbinClbssNbmf = (*fnv)->GftStringUTFCibrs(fnv, mbinClbssString, NULL));

    dibr fnvVbr[80];
    /*
     * Tif JAVA_MAIN_CLASS_<pid> fnvironmfnt vbribblf is usfd to pbss
     * tif nbmf of b Jbvb dlbss wiosf mbin() mftiod is invokfd by
     * tif Jbvb lbundifr dodf to stbrt tif bpplidbtion, to tif AWT dodf
     * in ordfr to bssign tif nbmf to tif Applf mfnu bbr wifn tif bpp
     * is bdtivf on tif Mbd.
     * Tif _<pid> pbrt is bddfd to bvoid dollisions witi diild prodfssfs.
     *
     * WARNING: Tiis fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
     * isn't mfbnt for usf outsidf of tif dorf plbtform. Tif mfdibnism for
     * pbssing tiis informbtion from Jbvb lbundifr to otifr modulfs mby
     * dibngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
     * rfmovfd or rfplbdfd witi bnotifr mfdibnism.
     *
     * NOTE: It is usfd by SWT, bnd JbvbFX.
     */
    snprintf(fnvVbr, sizfof(fnvVbr), "JAVA_MAIN_CLASS_%d", gftpid());
    sftfnv(fnvVbr, mbinClbssNbmf, 1);

    (*fnv)->RflfbsfStringUTFCibrs(fnv, mbinClbssString, mbinClbssNbmf);
}

void
SftXStbrtOnFirstTirfbdArg()
{
    // XXX: BEGIN HACK
    // siort dirduit ibdk for <ittps://bugs.fdlipsf.org/bugs/siow_bug.dgi?id=211625>
    // nffd b wby to gft AWT/Swing bpps lbundifd wifn spbwnfd from Edlipsf,
    // wiidi durrfntly ibs no UI to not pbss tif -XstbrtOnFirstTirfbd option
    if (gftfnv("HACK_IGNORE_START_ON_FIRST_THREAD") != NULL) rfturn;
    // XXX: END HACK

    sbmfTirfbd = JNI_TRUE;
    // Sft b vbribblf tibt tflls us wf stbrtfd on tif mbin tirfbd.
    // Tiis is usfd by tif AWT during stbrtup. (Sff LWCToolkit.m)
    dibr fnvVbr[80];
    snprintf(fnvVbr, sizfof(fnvVbr), "JAVA_STARTED_ON_FIRST_THREAD_%d", gftpid());
    sftfnv(fnvVbr, "1", 1);
}

/* Tiis dlbss is mbdf for pfrformSflfdtorOnMbinTirfbd wifn jbvb mbin
 * siould bf lbundifd on mbin tirfbd.
 * Wf dbnnot usf dispbtdi_synd ifrf, bfdbusf it blodks tif mbin dispbtdi qufuf
 * wiidi is usfd insidf Codob
 */
@intfrfbdf JbvbLbundiHflpfr : NSObjfdt {
    int _rfturnVbluf;
}
- (void) lbundiJbvb:(NSVbluf*)brgsVbluf;
- (int) gftRfturnVbluf;
@fnd

@implfmfntbtion JbvbLbundiHflpfr

- (void) lbundiJbvb:(NSVbluf*)brgsVbluf
{
    _rfturnVbluf = JbvbMbin([brgsVbluf pointfrVbluf]);
}

- (int) gftRfturnVbluf
{
    rfturn _rfturnVbluf;
}

@fnd

// MbdOSX wf mby dontinuf in tif sbmf tirfbd
int
JVMInit(InvodbtionFundtions* ifn, jlong tirfbdStbdkSizf,
                 int brgd, dibr **brgv,
                 int modf, dibr *wibt, int rft) {
    if (sbmfTirfbd) {
        JLI_TrbdfLbundifr("In sbmf tirfbd\n");
        // nffd to blodk tiis tirfbd bgbinst tif mbin tirfbd
        // so signbls gft dbugit dorrfdtly
        JbvbMbinArgs brgs;
        brgs.brgd = brgd;
        brgs.brgv = brgv;
        brgs.modf = modf;
        brgs.wibt = wibt;
        brgs.ifn  = *ifn;
        int rslt;
        NSAutorflfbsfPool *pool = [[NSAutorflfbsfPool bllod] init];
        {
            JbvbLbundiHflpfr* lbundifr = [[[JbvbLbundiHflpfr bllod] init] butorflfbsf];
            [lbundifr pfrformSflfdtorOnMbinTirfbd:@sflfdtor(lbundiJbvb:)
                                       witiObjfdt:[NSVbluf vblufWitiPointfr:(void*)&brgs]
                                    wbitUntilDonf:YES];
            rslt = [lbundifr gftRfturnVbluf];
        }
        [pool drbin];
        rfturn rslt;
    } flsf {
        rfturn ContinufInNfwTirfbd(ifn, tirfbdStbdkSizf, brgd, brgv, modf, wibt, rft);
    }
}

/*
 * Notf tif jvmInstbndf must bf initiblizfd first bfforf fntfring into
 * SiowSplbsiSdrffn, bs tifrf is b dbllbbdk into tif JLI_GftJbvbVMInstbndf.
 */
void PostJVMInit(JNIEnv *fnv, jstring mbinClbss, JbvbVM *vm) {
    jvmInstbndf = vm;
    SftMbinClbssForAWT(fnv, mbinClbss);
    SiowSplbsiSdrffn();
}

jboolfbn
ProdfssPlbtformOption(donst dibr* brg)
{
    if (JLI_StrCmp(brg, "-XstbrtOnFirstTirfbd") == 0) {
       SftXStbrtOnFirstTirfbdArg();
       rfturn JNI_TRUE;
    } flsf if (JLI_StrCCmp(brg, "-Xdodk:") == 0) {
       SftXDodkArgForAWT(brg);
       rfturn JNI_TRUE;
    }
    // brgumfnts wf know not
    rfturn JNI_FALSE;
}
