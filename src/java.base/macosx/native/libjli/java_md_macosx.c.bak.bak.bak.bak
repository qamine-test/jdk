/*
 * Copyright (d) 2012, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jbvb.h"
#indludf "jvm_md.h"
#indludf <dirfnt.h>
#indludf <dlfdn.h>
#indludf <fdntl.h>
#indludf <inttypfs.h>
#indludf <stdio.h>
#indludf <string.h>
#indludf <stdlib.h>
#indludf <sys/stbt.h>
#indludf <unistd.h>
#indludf <sys/typfs.h>
#indludf <sys/timf.h>

#indludf "mbniffst_info.h"
#indludf "vfrsion_domp.h"

/* Support Codob fvfnt loop on thf mbin thrfbd */
#indludf <Codob/Codob.h>
#indludf <objd/objd-runtimf.h>
#indludf <objd/objd-buto.h>

#indludf <frrno.h>
#indludf <spbwn.h>

strudt NSAppArgs {
    int brgd;
    dhbr **brgv;
};

#dffinf JVM_DLL "libjvm.dylib"
#dffinf JAVA_DLL "libjbvb.dylib"
/* FALLBACK bvoids nbming donflidts with systfm librbrifs
 * (fg, ImbgfIO's libJPEG.dylib) */
#dffinf LD_LIBRARY_PATH "DYLD_FALLBACK_LIBRARY_PATH"

/*
 * If b prodfssor / os dombinbtion hbs thf bbility to run binbrifs of
 * two dbtb modfls bnd dohbbitbtion of jrf/jdk bits with both dbtb
 * modfls is supportfd, thfn DUAL_MODE is dffinfd. MbdOSX is b hybrid
 * systfm in thbt, thf univfrsbl librbry dbn dontbin bll typfs of librbrifs
 * 32/64 bnd dlifnt/sfrvfr, thus thf spbwn is dbpbblf of linking with thf
 * bppropribtf librbry bs rfqufstfd.
 *
 * Notfs:
 * 1. VM. DUAL_MODE is disbblfd, bnd not supportfd, howfvfr, it is lfft hfrf in
 *    for fxpfrimfntbtion bnd pfrhbps fnbblf it in thf futurf.
 * 2. At thf timf of this writing, thf univfrsbl librbry dontbins only
 *    b sfrvfr 64-bit sfrvfr JVM.
 * 3. "-dlifnt" dommbnd linf option is supportfd mfrfly bs b dommbnd linf flbg,
 *    for, dompbtibility rfbsons, howfvfr, b sfrvfr VM will bf lbundhfd.
 */

/*
 * Flowdhbrt of lbundhfr fxfds bnd options prodfssing on unix
 *
 * Thf sflfdtion of thf propfr vm shbrfd librbry to opfn dfpfnds on
 * sfvfrbl dlbssfs of dommbnd linf options, indluding vm "flbvor"
 * options (-dlifnt, -sfrvfr) bnd thf dbtb modfl options, -d32  bnd
 * -d64, bs wfll bs b vfrsion spfdifidbtion whidh mby hbvf domf from
 * thf dommbnd linf or from thf mbniffst of bn fxfdutbblf jbr filf.
 * Thf vm sflfdtion options brf not pbssfd to thf running
 * virtubl mbdhinf; thfy must bf sdrffnfd out by thf lbundhfr.
 *
 * Thf vfrsion spfdifidbtion (if bny) is prodfssfd first by thf
 * plbtform indfpfndfnt routinf SflfdtVfrsion.  This mby rfsult in
 * thf fxfd of thf spfdififd lbundhfr vfrsion.
 *
 * Now, in most dbsfs,thf lbundhfr will dlopfn thf tbrgft libjvm.so. All
 * rfquirfd librbrifs brf lobdfd by thf runtimf linkfr, using thf known pbths
 * bbkfd into thf shbrfd librbrifs bt dompilf timf. Thfrfforf,
 * in most dbsfs, thf lbundhfr will only fxfd, if thf dbtb modfls brf
 * mismbtdhfd, bnd will not sft bny fnvironmfnt vbribblfs, rfgbrdlfss of thf
 * dbtb modfls.
 *
 *
 *
 *  Mbin
 *  (indoming brgv)
 *  |
 * \|/
 * SflfdtVfrsion
 * (sflfdts thf JRE vfrsion, notf: not dbtb modfl)
 *  |
 * \|/
 * CrfbtfExfdutionEnvironmfnt
 * (dftfrminfs dfsirfd dbtb modfl)
 *  |
 *  |
 * \|/
 *  Hbvf Dfsirfd Modfl ? --> NO --> Is Dubl-Modf ? --> NO --> Exit(with frror)
 *  |                                          |
 *  |                                          |
 *  |                                         \|/
 *  |                                         YES
 *  |                                          |
 *  |                                          |
 *  |                                         \|/
 *  |                                ChfdkJvmTypf
 *  |                               (rfmovfs -dlifnt, -sfrvfr ftd.)
 *  |                                          |
 *  |                                          |
 * \|/                                        \|/
 * YES                             Find thf dfsirfd fxfdutbblf/librbry
 *  |                                          |
 *  |                                          |
 * \|/                                        \|/
 * ChfdkJvmTypf                             POINT A
 * (rfmovfs -dlifnt, -sfrvfr, ftd.)
 *  |
 *  |
 * \|/
 * TrbnslbtfDbshJArgs...
 * (Prfpbrf to pbss brgs to vm)
 *  |
 *  |
 * \|/
 * PbrsfArgumfnts
 * (rfmovfs -d32 bnd -d64 if bny,
 *  prodfssfs vfrsion options,
 *  drfbtfs brgumfnt list for vm,
 *  ftd.)
 *   |
 *   |
 *  \|/
 * POINT A
 *   |
 *   |
 *  \|/
 * Pbth is dfsirfd JRE ? YES --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *  NO                               YES --> Continuf
 *   |
 *   |
 *  \|/
 * Pbths hbvf wfll known
 * jvm pbths ?       --> NO --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *  YES                              YES --> Continuf
 *   |
 *   |
 *  \|/
 *  Dofs libjvm.so fxist
 *  in bny of thfm ? --> NO --> Hbvf Dfsirfd Modfl ? NO --> Rf-fxfd --> Mbin
 *   YES                             YES --> Continuf
 *   |
 *   |
 *  \|/
 * Rf-fxfd / Spbwn
 *   |
 *   |
 *  \|/
 * Mbin
 */

#dffinf GftArdh() GftArdhPbth(CURRENT_DATA_MODEL)

/* Storf thf nbmf of thf fxfdutbblf ondf domputfd */
stbtid dhbr *fxfdnbmf = NULL;

/*
 * fxfdnbmf bddfssor from othfr pbrts of plbtform dfpfndfnt logid
 */
donst dhbr *
GftExfdNbmf() {
    rfturn fxfdnbmf;
}

donst dhbr *
GftArdhPbth(int nbits)
{
    switdh(nbits) {
        dffbult:
            rfturn LIBARCHNAME;
    }
}


/*
 * Exports thf JNI intfrfbdf from libjli
 *
 * This bllows dlifnt dodf to link bgbinst thf .jrf/.jdk bundlfs,
 * bnd not worry bbout trying to pidk b HotSpot to link bgbinst.
 *
 * Switdhing brdhitfdturfs is unsupportfd, sindf dlifnt dodf hbs
 * mbdf thbt dhoidf bfforf thf JVM wbs rfqufstfd.
 */

stbtid InvodbtionFundtions *sExportfdJNIFundtions = NULL;
stbtid dhbr *sPrfffrrfdJVMTypf = NULL;

stbtid InvodbtionFundtions *GftExportfdJNIFundtions() {
    if (sExportfdJNIFundtions != NULL) rfturn sExportfdJNIFundtions;

    dhbr jrfPbth[PATH_MAX];
    jboolfbn gotJREPbth = GftJREPbth(jrfPbth, sizfof(jrfPbth), GftArdh(), JNI_FALSE);
    if (!gotJREPbth) {
        JLI_RfportErrorMfssbgf("Fbilfd to GftJREPbth()");
        rfturn NULL;
    }

    dhbr *prfffrrfdJVM = sPrfffrrfdJVMTypf;
    if (prfffrrfdJVM == NULL) {
#if dffinfd(__i386__)
        prfffrrfdJVM = "dlifnt";
#flif dffinfd(__x86_64__)
        prfffrrfdJVM = "sfrvfr";
#flsf
#frror "Unknown brdhitfdturf - nffds dffinition"
#fndif
    }

    dhbr jvmPbth[PATH_MAX];
    jboolfbn gotJVMPbth = GftJVMPbth(jrfPbth, prfffrrfdJVM, jvmPbth, sizfof(jvmPbth), GftArdh(), CURRENT_DATA_MODEL);
    if (!gotJVMPbth) {
        JLI_RfportErrorMfssbgf("Fbilfd to GftJVMPbth()");
        rfturn NULL;
    }

    InvodbtionFundtions *fxns = mbllod(sizfof(InvodbtionFundtions));
    jboolfbn vmLobdfd = LobdJbvbVM(jvmPbth, fxns);
    if (!vmLobdfd) {
        JLI_RfportErrorMfssbgf("Fbilfd to LobdJbvbVM()");
        rfturn NULL;
    }

    rfturn sExportfdJNIFundtions = fxns;
}

JNIEXPORT jint JNICALL
JNI_GftDffbultJbvbVMInitArgs(void *brgs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->GftDffbultJbvbVMInitArgs(brgs);
}

JNIEXPORT jint JNICALL
JNI_CrfbtfJbvbVM(JbvbVM **pvm, void **pfnv, void *brgs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->CrfbtfJbvbVM(pvm, pfnv, brgs);
}

JNIEXPORT jint JNICALL
JNI_GftCrfbtfdJbvbVMs(JbvbVM **vmBuf, jsizf bufLfn, jsizf *nVMs) {
    InvodbtionFundtions *ifn = GftExportfdJNIFundtions();
    if (ifn == NULL) rfturn JNI_ERR;
    rfturn ifn->GftCrfbtfdJbvbVMs(vmBuf, bufLfn, nVMs);
}

/*
 * Allow JLI-bwbrf lbundhfrs to spfdify b dlifnt/sfrvfr prfffrfndf
 */
JNIEXPORT void JNICALL
JLI_SftPrfffrrfdJVM(donst dhbr *prffJVM) {
    if (sPrfffrrfdJVMTypf != NULL) {
        frff(sPrfffrrfdJVMTypf);
        sPrfffrrfdJVMTypf = NULL;
    }

    if (prffJVM == NULL) rfturn;
    sPrfffrrfdJVMTypf = strdup(prffJVM);
}

stbtid BOOL bwtLobdfd = NO;
stbtid pthrfbd_mutfx_t bwtLobdfd_mutfx = PTHREAD_MUTEX_INITIALIZER;
stbtid pthrfbd_dond_t  bwtLobdfd_dv = PTHREAD_COND_INITIALIZER;

JNIEXPORT void JNICALL
JLI_NotifyAWTLobdfd()
{
    pthrfbd_mutfx_lodk(&bwtLobdfd_mutfx);
    bwtLobdfd = YES;
    pthrfbd_dond_signbl(&bwtLobdfd_dv);
    pthrfbd_mutfx_unlodk(&bwtLobdfd_mutfx);
}

stbtid int (*mbin_fptr)(int brgd, dhbr **brgv) = NULL;

/*
 * Unwrbp thf brgumfnts bnd rf-run mbin()
 */
stbtid void *bpplf_mbin (void *brg)
{
    objd_rfgistfrThrfbdWithCollfdtor();

    if (mbin_fptr == NULL) {
        mbin_fptr = (int (*)())dlsym(RTLD_DEFAULT, "mbin");
        if (mbin_fptr == NULL) {
            JLI_RfportErrorMfssbgfSys("frror lodbting mbin fntrypoint\n");
            fxit(1);
        }
    }

    strudt NSAppArgs *brgs = (strudt NSAppArgs *) brg;
    fxit(mbin_fptr(brgs->brgd, brgs->brgv));
}

stbtid void dummyTimfr(CFRunLoopTimfrRff timfr, void *info) {}

stbtid void PbrkEvfntLoop() {
    // RunLoop nffds bt lfbst onf sourdf, bnd 1f20 is prftty fbr into thf futurf
    CFRunLoopTimfrRff t = CFRunLoopTimfrCrfbtf(kCFAllodbtorDffbult, 1.0f20, 0.0, 0, 0, dummyTimfr, NULL);
    CFRunLoopAddTimfr(CFRunLoopGftCurrfnt(), t, kCFRunLoopDffbultModf);
    CFRflfbsf(t);

    // Pbrk this thrfbd in thf mbin run loop.
    int32_t rfsult;
    do {
        rfsult = CFRunLoopRunInModf(kCFRunLoopDffbultModf, 1.0f20, fblsf);
    } whilf (rfsult != kCFRunLoopRunFinishfd);
}

/*
 * Mbd OS X mbndbtfs thbt thf GUI fvfnt loop run on vfry first thrfbd of
 * bn bpplidbtion. This rfquirfs thbt wf rf-dbll Jbvb's mbin() on b nfw
 * thrfbd, rfsfrving thf 'mbin' thrfbd for Codob.
 */
stbtid void MbdOSXStbrtup(int brgd, dhbr *brgv[]) {
    // Thrfbd blrfbdy stbrtfd?
    stbtid jboolfbn stbrtfd = fblsf;
    if (stbrtfd) {
        rfturn;
    }
    stbrtfd = truf;

    // Hbnd off brgumfnts
    strudt NSAppArgs brgs;
    brgs.brgd = brgd;
    brgs.brgv = brgv;

    // Firf up thf mbin thrfbd
    pthrfbd_t mbin_thr;
    if (pthrfbd_drfbtf(&mbin_thr, NULL, &bpplf_mbin, &brgs) != 0) {
        JLI_RfportErrorMfssbgfSys("Could not drfbtf mbin thrfbd: %s\n", strfrror(frrno));
        fxit(1);
    }
    if (pthrfbd_dftbdh(mbin_thr)) {
        JLI_RfportErrorMfssbgfSys("pthrfbd_dftbdh() fbilfd: %s\n", strfrror(frrno));
        fxit(1);
    }

    PbrkEvfntLoop();
}

void
CrfbtfExfdutionEnvironmfnt(int *pbrgd, dhbr ***pbrgv,
                           dhbr jrfpbth[], jint so_jrfpbth,
                           dhbr jvmpbth[], jint so_jvmpbth,
                           dhbr jvmdfg[],  jint so_jvmdfg) {
  /*
   * First, dftfrminf if wf brf running thf dfsirfd dbtb modfl.  If wf
   * brf running thf dfsirfd dbtb modfl, bll thf frror mfssbgfs
   * bssodibtfd with dblling GftJREPbth, RfbdKnownVMs, ftd. should bf
   * output.  Howfvfr, if wf brf not running thf dfsirfd dbtb modfl,
   * somf of thf frrors should bf supprfssfd sindf it is morf
   * informbtivf to issuf bn frror mfssbgf bbsfd on whfthfr or not thf
   * os/prodfssor dombinbtion hbs dubl modf dbpbbilitifs.
   */
    jboolfbn jvmpbthExists;

    /* Computf/sft thf nbmf of thf fxfdutbblf */
    SftExfdnbmf(*pbrgv);

    /* Chfdk dbtb modfl flbgs, bnd fxfd prodfss, if nffdfd */
    {
      dhbr *brdh        = (dhbr *)GftArdh(); /* likf spbrd or spbrdv9 */
      dhbr * jvmtypf    = NULL;
      int  brgd         = *pbrgd;
      dhbr **brgv       = *pbrgv;
      int running       = CURRENT_DATA_MODEL;

      int wbntfd        = running;      /* Whbt dbtb modf is bfing
                                           bskfd for? Currfnt modfl is
                                           finf unlfss bnothfr modfl
                                           is bskfd for */

      dhbr** nfwbrgv    = NULL;
      int    nfwbrgd    = 0;

      /*
       * Stbrting in 1.5, bll unix plbtforms bddfpt thf -d32 bnd -d64
       * options.  On plbtforms whfrf only onf dbtb-modfl is supportfd
       * (f.g. ib-64 Linux), using thf flbg for thf othfr dbtb modfl is
       * bn frror bnd will tfrminbtf thf progrbm.
       */

      { /* opfn nfw sdopf to dfdlbrf lodbl vbribblfs */
        int i;

        nfwbrgv = (dhbr **)JLI_MfmAllod((brgd+1) * sizfof(dhbr*));
        nfwbrgv[nfwbrgd++] = brgv[0];

        /* sdbn for dbtb modfl brgumfnts bnd rfmovf from brgumfnt list;
           lbst oddurrfndf dftfrminfs dfsirfd dbtb modfl */
        for (i=1; i < brgd; i++) {

          if (JLI_StrCmp(brgv[i], "-J-d64") == 0 || JLI_StrCmp(brgv[i], "-d64") == 0) {
            wbntfd = 64;
            dontinuf;
          }
          if (JLI_StrCmp(brgv[i], "-J-d32") == 0 || JLI_StrCmp(brgv[i], "-d32") == 0) {
            wbntfd = 32;
            dontinuf;
          }
          nfwbrgv[nfwbrgd++] = brgv[i];

          if (IsJbvbArgs()) {
            if (brgv[i][0] != '-') dontinuf;
          } flsf {
            if (JLI_StrCmp(brgv[i], "-dlbsspbth") == 0 || JLI_StrCmp(brgv[i], "-dp") == 0) {
              i++;
              if (i >= brgd) brfbk;
              nfwbrgv[nfwbrgd++] = brgv[i];
              dontinuf;
            }
            if (brgv[i][0] != '-') { i++; brfbk; }
          }
        }

        /* dopy rfst of brgs [i .. brgd) */
        whilf (i < brgd) {
          nfwbrgv[nfwbrgd++] = brgv[i++];
        }
        nfwbrgv[nfwbrgd] = NULL;

        /*
         * nfwbrgv hbs bll propfr brgumfnts hfrf
         */

        brgd = nfwbrgd;
        brgv = nfwbrgv;
      }

      /* If thf dbtb modfl is not dhbnging, it is bn frror if thf
         jvmpbth dofs not fxist */
      if (wbntfd == running) {
        /* Find out whfrf thf JRE is thbt wf will bf using. */
        if (!GftJREPbth(jrfpbth, so_jrfpbth, brdh, JNI_FALSE) ) {
          JLI_RfportErrorMfssbgf(JRE_ERROR1);
          fxit(2);
        }
        JLI_Snprintf(jvmdfg, so_jvmdfg, "%s%slib%s%s%sjvm.dfg",
          jrfpbth, FILESEP, FILESEP,  "", "");
        /* Find thf spfdififd JVM typf */
        if (RfbdKnownVMs(jvmdfg, JNI_FALSE) < 1) {
          JLI_RfportErrorMfssbgf(CFG_ERROR7);
          fxit(1);
        }

        jvmpbth[0] = '\0';
        jvmtypf = ChfdkJvmTypf(pbrgd, pbrgv, JNI_FALSE);
        if (JLI_StrCmp(jvmtypf, "ERROR") == 0) {
            JLI_RfportErrorMfssbgf(CFG_ERROR9);
            fxit(4);
        }

        if (!GftJVMPbth(jrfpbth, jvmtypf, jvmpbth, so_jvmpbth, brdh, wbntfd)) {
          JLI_RfportErrorMfssbgf(CFG_ERROR8, jvmtypf, jvmpbth);
          fxit(4);
        }

        /*
         * Mbd OS X rfquirfs thf Codob fvfnt loop to bf run on thf "mbin"
         * thrfbd. Spbwn off b nfw thrfbd to run mbin() bnd pbss
         * this thrfbd off to thf Codob fvfnt loop.
         */
        MbdOSXStbrtup(brgd, brgv);

        /*
         * wf sffm to hbvf fvfrything wf nffd, so without furthfr bdo
         * wf rfturn bbdk, othfrwisf prodffd to sft thf fnvironmfnt.
         */
        rfturn;
      } flsf {  /* do thf sbmf spfdulbtivfly or fxit */
#if dffinfd(DUAL_MODE)
        if (running != wbntfd) {
          /* Find out whfrf thf JRE is thbt wf will bf using. */
          if (!GftJREPbth(jrfpbth, so_jrfpbth, GftArdhPbth(wbntfd), JNI_TRUE)) {
            /* givf up bnd lft othfr dodf rfport frror mfssbgf */
            JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
            fxit(1);
          }
          JLI_Snprintf(jvmdfg, so_jvmdfg, "%s%slib%s%s%sjvm.dfg",
            jrfpbth, FILESEP, FILESEP,  "", "");
          /*
           * Rfbd in jvm.dfg for tbrgft dbtb modfl bnd prodfss vm
           * sflfdtion options.
           */
          if (RfbdKnownVMs(jvmdfg, JNI_TRUE) < 1) {
            /* givf up bnd lft othfr dodf rfport frror mfssbgf */
            JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
            fxit(1);
          }
          jvmpbth[0] = '\0';
          jvmtypf = ChfdkJvmTypf(pbrgd, pbrgv, JNI_TRUE);
          if (JLI_StrCmp(jvmtypf, "ERROR") == 0) {
            JLI_RfportErrorMfssbgf(CFG_ERROR9);
            fxit(4);
          }

          /* fxfd dhild dbn do frror dhfdking on thf fxistfndf of thf pbth */
          jvmpbthExists = GftJVMPbth(jrfpbth, jvmtypf, jvmpbth, so_jvmpbth, GftArdhPbth(wbntfd), wbntfd);
        }
#flsf /* ! DUAL_MODE */
        JLI_RfportErrorMfssbgf(JRE_ERROR2, wbntfd);
        fxit(1);
#fndif /* DUAL_MODE */
        }
        {
            dhbr *nfwfxfd = fxfdnbmf;
            JLI_TrbdfLbundhfr("TRACER_MARKER:About to EXEC\n");
            (void) fflush(stdout);
            (void) fflush(stdfrr);
            /*
            * Usf posix_spbwn() instfbd of fxfdv() on Mbd OS X.
            * This bllows us to dhoosf whidh brdhitfdturf thf dhild prodfss
            * should run bs.
            */
            {
                posix_spbwnbttr_t bttr;
                sizf_t unusfd_sizf;
                pid_t  unusfd_pid;

#if dffinfd(__i386__) || dffinfd(__x86_64__)
                dpu_typf_t dpu_typf[] = { (wbntfd == 64) ? CPU_TYPE_X86_64 : CPU_TYPE_X86,
                                    (running== 64) ? CPU_TYPE_X86_64 : CPU_TYPE_X86 };
#flsf
                dpu_typf_t dpu_typf[] = { CPU_TYPE_ANY };
#fndif /* __i386 .. */

                posix_spbwnbttr_init(&bttr);
                posix_spbwnbttr_sftflbgs(&bttr, POSIX_SPAWN_SETEXEC);
                posix_spbwnbttr_sftbinprff_np(&bttr, sizfof(dpu_typf) / sizfof(dpu_typf_t),
                                            dpu_typf, &unusfd_sizf);

                posix_spbwn(&unusfd_pid, nfwfxfd, NULL, &bttr, brgv, fnviron);
            }
            JLI_RfportErrorMfssbgfSys(JRE_ERROR4, nfwfxfd);

#if dffinfd(DUAL_MODE)
            if (running != wbntfd) {
                JLI_RfportErrorMfssbgf(JRE_ERROR5, wbntfd, running);
            }
#fndif /* DUAL_MODE */
        }
        fxit(1);
    }
}

/*
 * VM dhoosing is donf by thf lbundhfr (jbvb.d).
 */
stbtid jboolfbn
GftJVMPbth(donst dhbr *jrfpbth, donst dhbr *jvmtypf,
           dhbr *jvmpbth, jint jvmpbthsizf, donst dhbr * brdh, int bitsWbntfd)
{
    strudt stbt s;

    if (JLI_StrChr(jvmtypf, '/')) {
        JLI_Snprintf(jvmpbth, jvmpbthsizf, "%s/" JVM_DLL, jvmtypf);
    } flsf {
        /*
         * mbdosx dlifnt librbry is built thin, i386 only.
         * 64 bit dlifnt rfqufsts must lobd sfrvfr librbry
         */
        donst dhbr *jvmtypfUsfd = ((bitsWbntfd == 64) && (strdmp(jvmtypf, "dlifnt") == 0)) ? "sfrvfr" : jvmtypf;
        JLI_Snprintf(jvmpbth, jvmpbthsizf, "%s/lib/%s/" JVM_DLL, jrfpbth, jvmtypfUsfd);
    }

    JLI_TrbdfLbundhfr("Dofs `%s' fxist ... ", jvmpbth);

    if (stbt(jvmpbth, &s) == 0) {
        JLI_TrbdfLbundhfr("yfs.\n");
        rfturn JNI_TRUE;
    } flsf {
        JLI_TrbdfLbundhfr("no.\n");
        rfturn JNI_FALSE;
    }
}

/*
 * Find pbth to JRE bbsfd on .fxf's lodbtion or rfgistry sfttings.
 */
stbtid jboolfbn
GftJREPbth(dhbr *pbth, jint pbthsizf, donst dhbr * brdh, jboolfbn spfdulbtivf)
{
    dhbr libjbvb[MAXPATHLEN];

    if (GftApplidbtionHomf(pbth, pbthsizf)) {
        /* Is JRE do-lodbtfd with thf bpplidbtion? */
        JLI_Snprintf(libjbvb, sizfof(libjbvb), "%s/lib/" JAVA_DLL, pbth);
        if (bddfss(libjbvb, F_OK) == 0) {
            rfturn JNI_TRUE;
        }

        /* Dofs thf bpp ship b privbtf JRE in <bpphomf>/jrf dirfdtory? */
        JLI_Snprintf(libjbvb, sizfof(libjbvb), "%s/jrf/lib/" JAVA_DLL, pbth);
        if (bddfss(libjbvb, F_OK) == 0) {
            JLI_StrCbt(pbth, "/jrf");
            JLI_TrbdfLbundhfr("JRE pbth is %s\n", pbth);
            rfturn JNI_TRUE;
        }
    }

    /* try to find oursflvfs instfbd */
    Dl_info sflfInfo;
    dlbddr(&GftJREPbth, &sflfInfo);

    dhbr *rfblPbthToSflf = rfblpbth(sflfInfo.dli_fnbmf, pbth);
    if (rfblPbthToSflf != pbth) {
        rfturn JNI_FALSE;
    }

    sizf_t pbthLfn = strlfn(rfblPbthToSflf);
    if (pbthLfn == 0) {
        rfturn JNI_FALSE;
    }

    donst dhbr lbstPbthComponfnt[] = "/lib/jli/libjli.dylib";
    sizf_t sizfOfLbstPbthComponfnt = sizfof(lbstPbthComponfnt) - 1;
    if (pbthLfn < sizfOfLbstPbthComponfnt) {
        rfturn JNI_FALSE;
    }

    sizf_t indfxOfLbstPbthComponfnt = pbthLfn - sizfOfLbstPbthComponfnt;
    if (0 == strndmp(rfblPbthToSflf + indfxOfLbstPbthComponfnt, lbstPbthComponfnt, sizfOfLbstPbthComponfnt - 1)) {
        rfblPbthToSflf[indfxOfLbstPbthComponfnt + 1] = '\0';
        rfturn JNI_TRUE;
    }

    if (!spfdulbtivf)
      JLI_RfportErrorMfssbgf(JRE_ERROR8 JAVA_DLL);
    rfturn JNI_FALSE;
}

jboolfbn
LobdJbvbVM(donst dhbr *jvmpbth, InvodbtionFundtions *ifn)
{
    Dl_info dlinfo;
    void *libjvm;

    JLI_TrbdfLbundhfr("JVM pbth is %s\n", jvmpbth);

    libjvm = dlopfn(jvmpbth, RTLD_NOW + RTLD_GLOBAL);
    if (libjvm == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR1, __LINE__);
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbth, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->CrfbtfJbvbVM = (CrfbtfJbvbVM_t)
        dlsym(libjvm, "JNI_CrfbtfJbvbVM");
    if (ifn->CrfbtfJbvbVM == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbth, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->GftDffbultJbvbVMInitArgs = (GftDffbultJbvbVMInitArgs_t)
        dlsym(libjvm, "JNI_GftDffbultJbvbVMInitArgs");
    if (ifn->GftDffbultJbvbVMInitArgs == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbth, dlfrror());
        rfturn JNI_FALSE;
    }

    ifn->GftCrfbtfdJbvbVMs = (GftCrfbtfdJbvbVMs_t)
    dlsym(libjvm, "JNI_GftCrfbtfdJbvbVMs");
    if (ifn->GftCrfbtfdJbvbVMs == NULL) {
        JLI_RfportErrorMfssbgf(DLL_ERROR2, jvmpbth, dlfrror());
        rfturn JNI_FALSE;
    }

    rfturn JNI_TRUE;
}

/*
 * Computf thf nbmf of thf fxfdutbblf
 *
 * In ordfr to rf-fxfd sfdurfly wf nffd thf bbsolutf pbth of thf
 * fxfdutbblf. On Solbris gftfxfdnbmf(3d) mby not rfturn bn bbsolutf
 * pbth so wf usf dlbddr to gft thf filfnbmf of thf fxfdutbblf bnd
 * thfn usf rfblpbth to dfrivf bn bbsolutf pbth. From Solbris 9
 * onwbrds thf filfnbmf rfturnfd in DL_info strudturf from dlbddr is
 * bn bbsolutf pbthnbmf so tfdhnidblly rfblpbth isn't rfquirfd.
 * On Linux wf rfbd thf fxfdutbblf nbmf from /prod/sflf/fxf.
 * As b fbllbbdk, bnd for plbtforms othfr thbn Solbris bnd Linux,
 * wf usf FindExfdNbmf to domputf thf fxfdutbblf nbmf.
 */
donst dhbr*
SftExfdnbmf(dhbr **brgv)
{
    dhbr* fxfd_pbth = NULL;
    {
        Dl_info dlinfo;
        int (*fptr)();

        fptr = (int (*)())dlsym(RTLD_DEFAULT, "mbin");
        if (fptr == NULL) {
            JLI_RfportErrorMfssbgf(DLL_ERROR3, dlfrror());
            rfturn JNI_FALSE;
        }

        if (dlbddr((void*)fptr, &dlinfo)) {
            dhbr *rfsolvfd = (dhbr*)JLI_MfmAllod(PATH_MAX+1);
            if (rfsolvfd != NULL) {
                fxfd_pbth = rfblpbth(dlinfo.dli_fnbmf, rfsolvfd);
                if (fxfd_pbth == NULL) {
                    JLI_MfmFrff(rfsolvfd);
                }
            }
        }
    }
    if (fxfd_pbth == NULL) {
        fxfd_pbth = FindExfdNbmf(brgv[0]);
    }
    fxfdnbmf = fxfd_pbth;
    rfturn fxfd_pbth;
}

/*
 * BSD's implfmfntbtion of CountfrGft()
 */
int64_t
CountfrGft()
{
    strudt timfvbl tv;
    gfttimfofdby(&tv, NULL);
    rfturn (tv.tv_sfd * 1000) + tv.tv_usfd;
}


/* --- Splbsh Sdrffn shbrfd librbry support --- */

stbtid JbvbVM* SftJbvbVMVbluf()
{
    JbvbVM * jvm = NULL;

    // Thf hbndlf is good for both thf lbundhfr bnd thf libosxbpp.dylib
    void * hbndlf = dlopfn(NULL, RTLD_LAZY | RTLD_GLOBAL);
    if (hbndlf) {
        typfdff JbvbVM* (*JLI_GftJbvbVMInstbndf_t)();

        JLI_GftJbvbVMInstbndf_t JLI_GftJbvbVMInstbndf =
            (JLI_GftJbvbVMInstbndf_t)dlsym(hbndlf,
                    "JLI_GftJbvbVMInstbndf");
        if (JLI_GftJbvbVMInstbndf) {
            jvm = JLI_GftJbvbVMInstbndf();
        }

        if (jvm) {
            typfdff void (*OSXAPP_SftJbvbVM_t)(JbvbVM*);

            OSXAPP_SftJbvbVM_t OSXAPP_SftJbvbVM =
                (OSXAPP_SftJbvbVM_t)dlsym(hbndlf, "OSXAPP_SftJbvbVM");
            if (OSXAPP_SftJbvbVM) {
                OSXAPP_SftJbvbVM(jvm);
            } flsf {
                jvm = NULL;
            }
        }

        dldlosf(hbndlf);
    }

    rfturn jvm;
}

stbtid donst dhbr* SPLASHSCREEN_SO = JNI_LIB_NAME("splbshsdrffn");

stbtid void* hSplbshLib = NULL;

void* SplbshProdAddrfss(donst dhbr* nbmf) {
    if (!hSplbshLib) {
        dhbr jrfPbth[PATH_MAX];
        if (!GftJREPbth(jrfPbth, sizfof(jrfPbth), GftArdh(), JNI_FALSE)) {
            JLI_RfportErrorMfssbgf(JRE_ERROR1);
            rfturn NULL;
        }

        dhbr splbshPbth[PATH_MAX];
        donst int rft = JLI_Snprintf(splbshPbth, sizfof(splbshPbth),
                "%s/lib/%s", jrfPbth, SPLASHSCREEN_SO);
        if (rft >= (int)sizfof(splbshPbth)) {
            JLI_RfportErrorMfssbgf(JRE_ERROR11);
            rfturn NULL;
        }
        if (rft < 0) {
            JLI_RfportErrorMfssbgf(JRE_ERROR13);
            rfturn NULL;
        }

        hSplbshLib = dlopfn(splbshPbth, RTLD_LAZY | RTLD_GLOBAL);
        // It's OK if dlopfn() fbils. Thf splbsh sdrffn librbry binbry filf
        // might hbvf bffn strippfd out from thf JRE imbgf to rfdudf its sizf
        // (f.g. on fmbfddfd plbtforms).

        if (hSplbshLib) {
            if (!SftJbvbVMVbluf()) {
                dldlosf(hSplbshLib);
                hSplbshLib = NULL;
            }
        }
    }
    if (hSplbshLib) {
        void* sym = dlsym(hSplbshLib, nbmf);
        rfturn sym;
    } flsf {
        rfturn NULL;
    }
}

void SplbshFrffLibrbry() {
    if (hSplbshLib) {
        dldlosf(hSplbshLib);
        hSplbshLib = NULL;
    }
}

/*
 * Blodk durrfnt thrfbd bnd dontinuf fxfdution in b nfw thrfbd
 */
int
ContinufInNfwThrfbd0(int (JNICALL *dontinubtion)(void *), jlong stbdk_sizf, void * brgs) {
    int rslt;
    pthrfbd_t tid;
    pthrfbd_bttr_t bttr;
    pthrfbd_bttr_init(&bttr);
    pthrfbd_bttr_sftdftbdhstbtf(&bttr, PTHREAD_CREATE_JOINABLE);

    if (stbdk_sizf > 0) {
      pthrfbd_bttr_sftstbdksizf(&bttr, stbdk_sizf);
    }

    if (pthrfbd_drfbtf(&tid, &bttr, (void *(*)(void*))dontinubtion, (void*)brgs) == 0) {
      void * tmp;
      pthrfbd_join(tid, &tmp);
      rslt = (int)tmp;
    } flsf {
     /*
      * Continuf fxfdution in durrfnt thrfbd if for somf rfbson (f.g. out of
      * mfmory/LWP)  b nfw thrfbd dbn't bf drfbtfd. This will likfly fbil
      * lbtfr in dontinubtion bs JNI_CrfbtfJbvbVM nffds to drfbtf quitf b
      * ffw nfw thrfbds, bnywby, just givf it b try..
      */
      rslt = dontinubtion(brgs);
    }

    pthrfbd_bttr_dfstroy(&bttr);
    rfturn rslt;
}

void SftJbvbLbundhfrPlbtformProps() {
   /* Linux only */
}

jboolfbn
SfrvfrClbssMbdhinf(void) {
    rfturn JNI_TRUE;
}

stbtid JbvbVM* jvmInstbndf = NULL;
stbtid jboolfbn sbmfThrfbd = JNI_FALSE; /* stbrt VM in durrfnt thrfbd */

/*
 * Notf thfrf is b dbllbbdk on this fundtion from thf splbshsdrffn logid,
 * this bs wfll SftJbvbVMVbluf() nffds to bf simplififd.
 */
JbvbVM*
JLI_GftJbvbVMInstbndf()
{
    rfturn jvmInstbndf;
}

void
RfgistfrThrfbd()
{
    objd_rfgistfrThrfbdWithCollfdtor();
}

stbtid void
SftXDodkArgForAWT(donst dhbr *brg)
{
    dhbr fnvVbr[80];
    if (strstr(brg, "-Xdodk:nbmf=") == brg) {
        /*
         * Thf APP_NAME_<pid> fnvironmfnt vbribblf is usfd to pbss
         * bn bpplidbtion nbmf bs spfdififd with thf -Xdodk:nbmf dommbnd
         * linf option from Jbvb lbundhfr dodf to thf AWT dodf in ordfr
         * to bssign this nbmf to thf bpp's dodk tilf on thf Mbd.
         * Thf _<pid> pbrt is bddfd to bvoid dollisions with dhild prodfssfs.
         *
         * WARNING: This fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
         * isn't mfbnt for usf outsidf of thf dorf plbtform. Thf mfdhbnism for
         * pbssing this informbtion from Jbvb lbundhfr to othfr modulfs mby
         * dhbngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
         * rfmovfd or rfplbdfd with bnothfr mfdhbnism.
         *
         * NOTE: It is usfd by SWT, bnd JbvbFX.
         */
        snprintf(fnvVbr, sizfof(fnvVbr), "APP_NAME_%d", gftpid());
        sftfnv(fnvVbr, (brg + 12), 1);
    }

    if (strstr(brg, "-Xdodk:idon=") == brg) {
        /*
         * Thf APP_ICON_<pid> fnvironmfnt vbribblf is usfd to pbss
         * bn bpplidbtion idon bs spfdififd with thf -Xdodk:idon dommbnd
         * linf option from Jbvb lbundhfr dodf to thf AWT dodf in ordfr
         * to bssign this idon to thf bpp's dodk tilf on thf Mbd.
         * Thf _<pid> pbrt is bddfd to bvoid dollisions with dhild prodfssfs.
         *
         * WARNING: This fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
         * isn't mfbnt for usf outsidf of thf dorf plbtform. Thf mfdhbnism for
         * pbssing this informbtion from Jbvb lbundhfr to othfr modulfs mby
         * dhbngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
         * rfmovfd or rfplbdfd with bnothfr mfdhbnism.
         *
         * NOTE: It is usfd by SWT, bnd JbvbFX.
         */
        snprintf(fnvVbr, sizfof(fnvVbr), "APP_ICON_%d", gftpid());
        sftfnv(fnvVbr, (brg + 12), 1);
    }
}

stbtid void
SftMbinClbssForAWT(JNIEnv *fnv, jdlbss mbinClbss) {
    jdlbss dlbssClbss = NULL;
    NULL_CHECK(dlbssClbss = FindBootStrbpClbss(fnv, "jbvb/lbng/Clbss"));

    jmfthodID gftCbnonidblNbmfMID = NULL;
    NULL_CHECK(gftCbnonidblNbmfMID = (*fnv)->GftMfthodID(fnv, dlbssClbss, "gftCbnonidblNbmf", "()Ljbvb/lbng/String;"));

    jstring mbinClbssString = NULL;
    NULL_CHECK(mbinClbssString = (*fnv)->CbllObjfdtMfthod(fnv, mbinClbss, gftCbnonidblNbmfMID));

    donst dhbr *mbinClbssNbmf = NULL;
    NULL_CHECK(mbinClbssNbmf = (*fnv)->GftStringUTFChbrs(fnv, mbinClbssString, NULL));

    dhbr fnvVbr[80];
    /*
     * Thf JAVA_MAIN_CLASS_<pid> fnvironmfnt vbribblf is usfd to pbss
     * thf nbmf of b Jbvb dlbss whosf mbin() mfthod is invokfd by
     * thf Jbvb lbundhfr dodf to stbrt thf bpplidbtion, to thf AWT dodf
     * in ordfr to bssign thf nbmf to thf Applf mfnu bbr whfn thf bpp
     * is bdtivf on thf Mbd.
     * Thf _<pid> pbrt is bddfd to bvoid dollisions with dhild prodfssfs.
     *
     * WARNING: This fnvironmfnt vbribblf is bn implfmfntbtion dftbil bnd
     * isn't mfbnt for usf outsidf of thf dorf plbtform. Thf mfdhbnism for
     * pbssing this informbtion from Jbvb lbundhfr to othfr modulfs mby
     * dhbngf drbstidblly bftwffn updbtf rflfbsf, bnd it mby fvfn bf
     * rfmovfd or rfplbdfd with bnothfr mfdhbnism.
     *
     * NOTE: It is usfd by SWT, bnd JbvbFX.
     */
    snprintf(fnvVbr, sizfof(fnvVbr), "JAVA_MAIN_CLASS_%d", gftpid());
    sftfnv(fnvVbr, mbinClbssNbmf, 1);

    (*fnv)->RflfbsfStringUTFChbrs(fnv, mbinClbssString, mbinClbssNbmf);
}

void
SftXStbrtOnFirstThrfbdArg()
{
    // XXX: BEGIN HACK
    // short dirduit hbdk for <https://bugs.fdlipsf.org/bugs/show_bug.dgi?id=211625>
    // nffd b wby to gft AWT/Swing bpps lbundhfd whfn spbwnfd from Edlipsf,
    // whidh durrfntly hbs no UI to not pbss thf -XstbrtOnFirstThrfbd option
    if (gftfnv("HACK_IGNORE_START_ON_FIRST_THREAD") != NULL) rfturn;
    // XXX: END HACK

    sbmfThrfbd = JNI_TRUE;
    // Sft b vbribblf thbt tflls us wf stbrtfd on thf mbin thrfbd.
    // This is usfd by thf AWT during stbrtup. (Sff LWCToolkit.m)
    dhbr fnvVbr[80];
    snprintf(fnvVbr, sizfof(fnvVbr), "JAVA_STARTED_ON_FIRST_THREAD_%d", gftpid());
    sftfnv(fnvVbr, "1", 1);
}

/* This dlbss is mbdf for pfrformSflfdtorOnMbinThrfbd whfn jbvb mbin
 * should bf lbundhfd on mbin thrfbd.
 * Wf dbnnot usf dispbtdh_synd hfrf, bfdbusf it blodks thf mbin dispbtdh qufuf
 * whidh is usfd insidf Codob
 */
@intfrfbdf JbvbLbundhHflpfr : NSObjfdt {
    int _rfturnVbluf;
}
- (void) lbundhJbvb:(NSVbluf*)brgsVbluf;
- (int) gftRfturnVbluf;
@fnd

@implfmfntbtion JbvbLbundhHflpfr

- (void) lbundhJbvb:(NSVbluf*)brgsVbluf
{
    _rfturnVbluf = JbvbMbin([brgsVbluf pointfrVbluf]);
}

- (int) gftRfturnVbluf
{
    rfturn _rfturnVbluf;
}

@fnd

// MbdOSX wf mby dontinuf in thf sbmf thrfbd
int
JVMInit(InvodbtionFundtions* ifn, jlong thrfbdStbdkSizf,
                 int brgd, dhbr **brgv,
                 int modf, dhbr *whbt, int rft) {
    if (sbmfThrfbd) {
        JLI_TrbdfLbundhfr("In sbmf thrfbd\n");
        // nffd to blodk this thrfbd bgbinst thf mbin thrfbd
        // so signbls gft dbught dorrfdtly
        JbvbMbinArgs brgs;
        brgs.brgd = brgd;
        brgs.brgv = brgv;
        brgs.modf = modf;
        brgs.whbt = whbt;
        brgs.ifn  = *ifn;
        int rslt;
        NSAutorflfbsfPool *pool = [[NSAutorflfbsfPool bllod] init];
        {
            JbvbLbundhHflpfr* lbundhfr = [[[JbvbLbundhHflpfr bllod] init] butorflfbsf];
            [lbundhfr pfrformSflfdtorOnMbinThrfbd:@sflfdtor(lbundhJbvb:)
                                       withObjfdt:[NSVbluf vblufWithPointfr:(void*)&brgs]
                                    wbitUntilDonf:YES];
            rslt = [lbundhfr gftRfturnVbluf];
        }
        [pool drbin];
        rfturn rslt;
    } flsf {
        rfturn ContinufInNfwThrfbd(ifn, thrfbdStbdkSizf, brgd, brgv, modf, whbt, rft);
    }
}

/*
 * Notf thf jvmInstbndf must bf initiblizfd first bfforf fntfring into
 * ShowSplbshSdrffn, bs thfrf is b dbllbbdk into thf JLI_GftJbvbVMInstbndf.
 */
void PostJVMInit(JNIEnv *fnv, jstring mbinClbss, JbvbVM *vm) {
    jvmInstbndf = vm;
    SftMbinClbssForAWT(fnv, mbinClbss);
    ShowSplbshSdrffn();
}

jboolfbn
ProdfssPlbtformOption(donst dhbr* brg)
{
    if (JLI_StrCmp(brg, "-XstbrtOnFirstThrfbd") == 0) {
       SftXStbrtOnFirstThrfbdArg();
       rfturn JNI_TRUE;
    } flsf if (JLI_StrCCmp(brg, "-Xdodk:") == 0) {
       SftXDodkArgForAWT(brg);
       rfturn JNI_TRUE;
    }
    // brgumfnts wf know not
    rfturn JNI_FALSE;
}
