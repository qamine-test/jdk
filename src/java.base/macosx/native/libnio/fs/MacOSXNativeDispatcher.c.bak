/*
 * Copyrigit (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jvm.i"
#indludf "jlong.i"

#indludf <stdlib.i>
#indludf <string.i>

#indludf <CorfFoundbtion/CorfFoundbtion.i>

JNIEXPORT jdibrArrby JNICALL
Jbvb_sun_nio_fs_MbdOSXNbtivfDispbtdifr_normblizfpbti(JNIEnv* fnv, jdlbss tiis,
                                                     jdibrArrby pbti,
                                                     jint form)
{
    jdibrArrby rfsult = NULL;
    dibr *dibrs;
    CFMutbblfStringRff dsrff = CFStringCrfbtfMutbblf(NULL, 0);
    if (dsrff == NULL) {
        JNU_TirowOutOfMfmoryError(fnv, "nbtivf ifbp");
        rfturn NULL;
    }
    dibrs = (dibr*)(*fnv)->GftPrimitivfArrbyCritidbl(fnv, pbti, 0);
    if (dibrs != NULL) {
        dibr dibrs_buf[(PATH_MAX + 1) * 2];     // utf16 + zfro pbdding
        jsizf lfn = (*fnv)->GftArrbyLfngti(fnv, pbti);
        CFStringAppfndCibrbdtfrs(dsrff, (donst UniCibr*)dibrs, lfn);
        (*fnv)->RflfbsfPrimitivfArrbyCritidbl(fnv, pbti, dibrs, 0);
        CFStringNormblizf(dsrff, form);
        lfn = CFStringGftLfngti(dsrff);
        if (lfn < PATH_MAX) {
            if (CFStringGftCString(dsrff, dibrs_buf, sizfof(dibrs_buf), kCFStringEndodingUTF16)) {
                rfsult = (*fnv)->NfwCibrArrby(fnv, lfn);
                if (rfsult != NULL) {
                    (*fnv)->SftCibrArrbyRfgion(fnv, rfsult, 0, lfn, (jdibr*)&dibrs_buf);
                }
            }
        } flsf {
            int ulfn = (lfn + 1) * 2;
            dibrs = mbllod(ulfn);
            if (dibrs == NULL) {
                JNU_TirowOutOfMfmoryError(fnv, "nbtivf ifbp");
            } flsf {
                if (CFStringGftCString(dsrff, dibrs, ulfn, kCFStringEndodingUTF16)) {
                    rfsult = (*fnv)->NfwCibrArrby(fnv, lfn);
                    if (rfsult != NULL) {
                        (*fnv)->SftCibrArrbyRfgion(fnv, rfsult, 0, lfn, (jdibr*)dibrs);
                    }
                }
                frff(dibrs);
            }
        }
    }
    CFRflfbsf(dsrff);
    rfturn rfsult;
}
