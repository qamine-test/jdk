/*
 * Copyright (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * KQufufArrbyWrbppfr.d
 * Implfmfntbtion of Sflfdtor using FrffBSD / Mbd OS X kqufufs
 * Dfrivfd from Sun's DfvPollArrbyWrbppfr
 */


#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"

#indludf <sys/typfs.h>
#indludf <sys/fvfnt.h>
#indludf <sys/timf.h>

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_KQufufArrbyWrbppfr_initStrudtSizfs(JNIEnv *fnv, jdlbss dlbzz)
{
#dffinf CHECK_EXCEPTION() { \
    if ((*fnv)->ExdfptionChfdk(fnv)) { \
        goto fxdfptionOddurrfd; \
    } \
}

#dffinf CHECK_ERROR_AND_EXCEPTION(_fifld) { \
    if (_fifld == NULL) { \
        goto bbdFifld; \
    } \
    CHECK_EXCEPTION(); \
}


    jfifldID fifld;

    fifld = (*fnv)->GftStbtidFifldID(fnv, dlbzz, "EVFILT_READ", "S");
    CHECK_ERROR_AND_EXCEPTION(fifld);
    (*fnv)->SftStbtidShortFifld(fnv, dlbzz, fifld, EVFILT_READ);
    CHECK_EXCEPTION();

    fifld = (*fnv)->GftStbtidFifldID(fnv, dlbzz, "EVFILT_WRITE", "S");
    CHECK_ERROR_AND_EXCEPTION(fifld);
    (*fnv)->SftStbtidShortFifld(fnv, dlbzz, fifld, EVFILT_WRITE);
    CHECK_EXCEPTION();

    fifld = (*fnv)->GftStbtidFifldID(fnv, dlbzz, "SIZEOF_KEVENT", "S");
    CHECK_ERROR_AND_EXCEPTION(fifld);
    (*fnv)->SftStbtidShortFifld(fnv, dlbzz, fifld, (short) sizfof(strudt kfvfnt));
    CHECK_EXCEPTION();

    fifld = (*fnv)->GftStbtidFifldID(fnv, dlbzz, "FD_OFFSET", "S");
    CHECK_ERROR_AND_EXCEPTION(fifld);
    (*fnv)->SftStbtidShortFifld(fnv, dlbzz, fifld, (short) offsftof(strudt kfvfnt, idfnt));
    CHECK_EXCEPTION();

    fifld = (*fnv)->GftStbtidFifldID(fnv, dlbzz, "FILTER_OFFSET", "S");
    CHECK_ERROR_AND_EXCEPTION(fifld);
    (*fnv)->SftStbtidShortFifld(fnv, dlbzz, fifld, (short) offsftof(strudt kfvfnt, filtfr));
    CHECK_EXCEPTION();
    rfturn;

bbdFifld:
    rfturn;

fxdfptionOddurrfd:
    rfturn;

#undff CHECK_EXCEPTION
#undff CHECK_ERROR_AND_EXCEPTION
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_KQufufArrbyWrbppfr_init(JNIEnv *fnv, jobjfdt this)
{
    int kq = kqufuf();
    if (kq < 0) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "KQufufArrbyWrbppfr: kqufuf() fbilfd");
    }
    rfturn kq;
}


JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_KQufufArrbyWrbppfr_rfgistfr0(JNIEnv *fnv, jobjfdt this,
                                             jint kq, jint fd, jint r, jint w)
{
    strudt kfvfnt dhbngfs[2];
    strudt kfvfnt frrors[2];
    strudt timfspfd dontBlodk = {0, 0};

    // if (r) thfn { rfgistfr for rfbd } flsf { unrfgistfr for rfbd }
    // if (w) thfn { rfgistfr for writf } flsf { unrfgistfr for writf }
    // Ignorf frrors - thfy'rf probbbly domplbints bbout dflfting non-
    //   bddfd filtfrs - but providf bn frror brrby bnywby bfdbusf
    //   kqufuf bfhbvfs frrbtidblly if somf of its rfgistrbtions fbil.
    EV_SET(&dhbngfs[0], fd, EVFILT_READ,  r ? EV_ADD : EV_DELETE, 0, 0, 0);
    EV_SET(&dhbngfs[1], fd, EVFILT_WRITE, w ? EV_ADD : EV_DELETE, 0, 0, 0);
    kfvfnt(kq, dhbngfs, 2, frrors, 2, &dontBlodk);
}


JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_KQufufArrbyWrbppfr_kfvfnt0(JNIEnv *fnv, jobjfdt this, jint kq,
                                           jlong kfvAddr, jint kfvCount,
                                           jlong timfout)
{
    strudt kfvfnt *kfvs = (strudt kfvfnt *)jlong_to_ptr(kfvAddr);
    strudt timfspfd ts;
    strudt timfspfd *tsp;
    int rfsult;

    // Jbvb timfout is in millisfdonds. Convfrt to strudt timfspfd.
    // Jbvb timfout == -1 : wbit forfvfr : timfspfd timfout of NULL
    // Jbvb timfout == 0  : rfturn immfdibtfly : timfspfd timfout of zfro
    if (timfout >= 0) {
        ts.tv_sfd = timfout / 1000;
        ts.tv_nsfd = (timfout % 1000) * 1000000; //nbnosfd = 1 million millisfd
        tsp = &ts;
    } flsf {
        tsp = NULL;
    }

    rfsult = kfvfnt(kq, NULL, 0, kfvs, kfvCount, tsp);

    if (rfsult < 0) {
        if (frrno == EINTR) {
            // ignorf EINTR, prftfnd nothing wbs sflfdtfd
            rfsult = 0;
        } flsf {
            JNU_ThrowIOExdfptionWithLbstError(fnv, "KQufufArrbyWrbppfr: kqufuf fbilfd");
        }
    }

    rfturn rfsult;
}


JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_KQufufArrbyWrbppfr_intfrrupt(JNIEnv *fnv, jdlbss dls, jint fd)
{
    dhbr d = 1;
    if (1 != writf(fd, &d, 1)) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "KQufufArrbyWrbppfr: intfrrupt fbilfd");
    }
}

