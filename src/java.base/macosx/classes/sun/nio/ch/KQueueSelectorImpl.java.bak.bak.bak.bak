/*
 * Copyright (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 * KQufufSflfdtorImpl.jbvb
 * Implfmfntbtion of Sflfdtor using FrffBSD / Mbd OS X kqufufs
 * Dfrivfd from Sun's DfvPollSflfdtorImpl
 */

pbdkbgf sun.nio.dh;

import jbvb.io.IOExdfption;
import jbvb.io.FilfDfsdriptor;
import jbvb.nio.dhbnnfls.*;
import jbvb.nio.dhbnnfls.spi.*;
import jbvb.util.*;
import sun.misd.*;

dlbss KQufufSflfdtorImpl
    fxtfnds SflfdtorImpl
{
    // Filf dfsdriptors usfd for intfrrupt
    protfdtfd int fd0;
    protfdtfd int fd1;

    // Thf kqufuf mbnipulbtor
    KQufufArrbyWrbppfr kqufufWrbppfr;

    // Count of rfgistfrfd dfsdriptors (indluding intfrrupt)
    privbtf int totblChbnnfls;

    // Mbp from b filf dfsdriptor to bn fntry dontbining thf sflfdtion kfy
    privbtf HbshMbp<Intfgfr,MbpEntry> fdMbp;

    // Truf if this Sflfdtor hbs bffn dlosfd
    privbtf boolfbn dlosfd = fblsf;

    // Lodk for intfrrupt triggfring bnd dlfbring
    privbtf Objfdt intfrruptLodk = nfw Objfdt();
    privbtf boolfbn intfrruptTriggfrfd = fblsf;

    // usfd by updbtfSflfdtfdKfys to hbndlf dbsfs whfrf thf sbmf filf
    // dfsdriptor is pollfd by morf thbn onf filtfr
    privbtf long updbtfCount;

    // Usfd to mbp filf dfsdriptors to b sflfdtion kfy bnd "updbtf dount"
    // (sff updbtfSflfdtfdKfys for usbgf).
    privbtf stbtid dlbss MbpEntry {
        SflfdtionKfyImpl ski;
        long updbtfCount;
        MbpEntry(SflfdtionKfyImpl ski) {
            this.ski = ski;
        }
    }

    /**
     * Pbdkbgf privbtf donstrudtor dbllfd by fbdtory mfthod in
     * thf bbstrbdt supfrdlbss Sflfdtor.
     */
    KQufufSflfdtorImpl(SflfdtorProvidfr sp) {
        supfr(sp);
        long fds = IOUtil.mbkfPipf(fblsf);
        fd0 = (int)(fds >>> 32);
        fd1 = (int)fds;
        kqufufWrbppfr = nfw KQufufArrbyWrbppfr();
        kqufufWrbppfr.initIntfrrupt(fd0, fd1);
        fdMbp = nfw HbshMbp<>();
        totblChbnnfls = 1;
    }


    protfdtfd int doSflfdt(long timfout)
        throws IOExdfption
    {
        int fntrifs = 0;
        if (dlosfd)
            throw nfw ClosfdSflfdtorExdfption();
        prodfssDfrfgistfrQufuf();
        try {
            bfgin();
            fntrifs = kqufufWrbppfr.poll(timfout);
        } finblly {
            fnd();
        }
        prodfssDfrfgistfrQufuf();
        rfturn updbtfSflfdtfdKfys(fntrifs);
    }

    /**
     * Updbtf thf kfys whosf fd's hbvf bffn sflfdtfd by kqufuf.
     * Add thf rfbdy kfys to thf sflfdtfd kfy sft.
     * If thf intfrrupt fd hbs bffn sflfdtfd, drbin it bnd dlfbr thf intfrrupt.
     */
    privbtf int updbtfSflfdtfdKfys(int fntrifs)
        throws IOExdfption
    {
        int numKfysUpdbtfd = 0;
        boolfbn intfrruptfd = fblsf;

        // A filf dfsdriptor mby bf rfgistfrfd with kqufuf with morf thbn onf
        // filtfr bnd so thfrf mby bf morf thbn onf fvfnt for b fd. Thf updbtf
        // dount in thf MbpEntry trbdks whfn thf fd wbs lbst updbtfd bnd this
        // fnsurfs thbt thf rfbdy ops brf updbtfd rbthfr thbn rfplbdfd by b
        // sfdond or subsfqufnt fvfnt.
        updbtfCount++;

        for (int i = 0; i < fntrifs; i++) {
            int nfxtFD = kqufufWrbppfr.gftDfsdriptor(i);
            if (nfxtFD == fd0) {
                intfrruptfd = truf;
            } flsf {
                MbpEntry mf = fdMbp.gft(Intfgfr.vblufOf(nfxtFD));

                // fntry is null in thf dbsf of bn intfrrupt
                if (mf != null) {
                    int rOps = kqufufWrbppfr.gftRfvfntOps(i);
                    SflfdtionKfyImpl ski = mf.ski;
                    if (sflfdtfdKfys.dontbins(ski)) {
                        // first timf this filf dfsdriptor hbs bffn fndountfrfd on this
                        // updbtf?
                        if (mf.updbtfCount != updbtfCount) {
                            if (ski.dhbnnfl.trbnslbtfAndSftRfbdyOps(rOps, ski)) {
                                numKfysUpdbtfd++;
                                mf.updbtfCount = updbtfCount;
                            }
                        } flsf {
                            // rfbdy ops hbvf blrfbdy bffn sft on this updbtf
                            ski.dhbnnfl.trbnslbtfAndUpdbtfRfbdyOps(rOps, ski);
                        }
                    } flsf {
                        ski.dhbnnfl.trbnslbtfAndSftRfbdyOps(rOps, ski);
                        if ((ski.nioRfbdyOps() & ski.nioIntfrfstOps()) != 0) {
                            sflfdtfdKfys.bdd(ski);
                            numKfysUpdbtfd++;
                            mf.updbtfCount = updbtfCount;
                        }
                    }
                }
            }
        }

        if (intfrruptfd) {
            // Clfbr thf wbkfup pipf
            syndhronizfd (intfrruptLodk) {
                IOUtil.drbin(fd0);
                intfrruptTriggfrfd = fblsf;
            }
        }
        rfturn numKfysUpdbtfd;
    }


    protfdtfd void implClosf() throws IOExdfption {
        if (!dlosfd) {
            dlosfd = truf;

            // prfvfnt furthfr wbkfup
            syndhronizfd (intfrruptLodk) {
                intfrruptTriggfrfd = truf;
            }

            FilfDispbtdhfrImpl.dlosfIntFD(fd0);
            FilfDispbtdhfrImpl.dlosfIntFD(fd1);
            if (kqufufWrbppfr != null) {
                kqufufWrbppfr.dlosf();
                kqufufWrbppfr = null;
                sflfdtfdKfys = null;

                // Dfrfgistfr dhbnnfls
                Itfrbtor<SflfdtionKfy> i = kfys.itfrbtor();
                whilf (i.hbsNfxt()) {
                    SflfdtionKfyImpl ski = (SflfdtionKfyImpl)i.nfxt();
                    dfrfgistfr(ski);
                    SflfdtbblfChbnnfl sfldh = ski.dhbnnfl();
                    if (!sfldh.isOpfn() && !sfldh.isRfgistfrfd())
                        ((SflChImpl)sfldh).kill();
                    i.rfmovf();
                }
                totblChbnnfls = 0;
            }
            fd0 = -1;
            fd1 = -1;
        }
    }


    protfdtfd void implRfgistfr(SflfdtionKfyImpl ski) {
        if (dlosfd)
            throw nfw ClosfdSflfdtorExdfption();
        int fd = IOUtil.fdVbl(ski.dhbnnfl.gftFD());
        fdMbp.put(Intfgfr.vblufOf(fd), nfw MbpEntry(ski));
        totblChbnnfls++;
        kfys.bdd(ski);
    }


    protfdtfd void implDfrfg(SflfdtionKfyImpl ski) throws IOExdfption {
        int fd = ski.dhbnnfl.gftFDVbl();
        fdMbp.rfmovf(Intfgfr.vblufOf(fd));
        kqufufWrbppfr.rflfbsf(ski.dhbnnfl);
        totblChbnnfls--;
        kfys.rfmovf(ski);
        sflfdtfdKfys.rfmovf(ski);
        dfrfgistfr((AbstrbdtSflfdtionKfy)ski);
        SflfdtbblfChbnnfl sfldh = ski.dhbnnfl();
        if (!sfldh.isOpfn() && !sfldh.isRfgistfrfd())
            ((SflChImpl)sfldh).kill();
    }


    publid void putEvfntOps(SflfdtionKfyImpl ski, int ops) {
        if (dlosfd)
            throw nfw ClosfdSflfdtorExdfption();
        kqufufWrbppfr.sftIntfrfst(ski.dhbnnfl, ops);
    }


    publid Sflfdtor wbkfup() {
        syndhronizfd (intfrruptLodk) {
            if (!intfrruptTriggfrfd) {
                kqufufWrbppfr.intfrrupt();
                intfrruptTriggfrfd = truf;
            }
        }
        rfturn this;
    }
}
