/*
 * Copyrigit (d) 2011, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/*
 * KQufufArrbyWrbppfr.jbvb
 * Implfmfntbtion of Sflfdtor using FrffBSD / Mbd OS X kqufufs
 * Dfrivfd from Sun's DfvPollArrbyWrbppfr
 */

pbdkbgf sun.nio.di;

import sun.misd.*;
import jbvb.io.IOExdfption;
import jbvb.io.FilfDfsdriptor;
import jbvb.util.Itfrbtor;
import jbvb.util.LinkfdList;

/*
 * strudt kfvfnt {           // 32-bit    64-bit
 *     uintptr_t idfnt;      //   4         8
 *     siort     filtfr;     //   2         2
 *     u_siort   flbgs;      //   2         2
 *     u_int     fflbgs;     //   4         4
 *     intptr_t  dbtb;       //   4         8
 *     void      *udbtb;     //   4         8
 * }                  // Totbl:  20        32
 *
 * Tif implfmfntbtion works in 32-bit bnd 64-bit world. Wf do tiis by dblling b
 * nbtivf fundtion tibt bdtublly sfts tif sizfs bnd offsfts of tif fiflds bbsfd
 * on wiidi modf wf'rf in.
 */

dlbss KQufufArrbyWrbppfr {
    // kfvfnt filtfrs
    stbtid siort EVFILT_READ;
    stbtid siort EVFILT_WRITE;

    // kfvfnt strudt
    // Tifsf fiflds brf now sft by initStrudtSizfs in tif stbtid initiblizfr.
    stbtid siort SIZEOF_KEVENT;
    stbtid siort FD_OFFSET;
    stbtid siort FILTER_OFFSET;

    // kfvfnt brrby sizf
    stbtid finbl int NUM_KEVENTS = 128;

    // Arf wf in b 64-bit VM?
    stbtid boolfbn is64bit = fblsf;

    // Tif kfvfnt brrby (usfd for outdoming fvfnts only)
    privbtf AllodbtfdNbtivfObjfdt kfvfntArrby = null;
    privbtf long kfvfntArrbyAddrfss;

    // Tif kqufuf fd
    privbtf int kq = -1;

    // Tif fd of tif intfrrupt linf going out
    privbtf int outgoingIntfrruptFD;

    // Tif fd of tif intfrrupt linf doming in
    privbtf int indomingIntfrruptFD;

    stbtid {
        IOUtil.lobd();
        initStrudtSizfs();
        String dbtbmodfl = jbvb.sfdurity.AddfssControllfr.doPrivilfgfd(
            nfw sun.sfdurity.bdtion.GftPropfrtyAdtion("sun.brdi.dbtb.modfl")
        );
        is64bit = dbtbmodfl.fqubls("64");
    }

    KQufufArrbyWrbppfr() {
        int bllodbtionSizf = SIZEOF_KEVENT * NUM_KEVENTS;
        kfvfntArrby = nfw AllodbtfdNbtivfObjfdt(bllodbtionSizf, truf);
        kfvfntArrbyAddrfss = kfvfntArrby.bddrfss();
        kq = init();
    }

    // Usfd to updbtf filf dfsdription rfgistrbtions
    privbtf stbtid dlbss Updbtf {
        SflCiImpl dibnnfl;
        int fvfnts;
        Updbtf(SflCiImpl dibnnfl, int fvfnts) {
            tiis.dibnnfl = dibnnfl;
            tiis.fvfnts = fvfnts;
        }
    }

    privbtf LinkfdList<Updbtf> updbtfList = nfw LinkfdList<Updbtf>();

    void initIntfrrupt(int fd0, int fd1) {
        outgoingIntfrruptFD = fd1;
        indomingIntfrruptFD = fd0;
        rfgistfr0(kq, fd0, 1, 0);
    }

    int gftRfvfntOps(int indfx) {
        int rfsult = 0;
        int offsft = SIZEOF_KEVENT*indfx + FILTER_OFFSET;
        siort filtfr = kfvfntArrby.gftSiort(offsft);

        // Tiis is bll tibt's nfdfssbry bbsfd on inspfdtion of usbgf:
        //   SinkCibnnflImpl, SourdfCibnnflImpl, DbtbgrbmCibnnflImpl,
        //   SfrvfrSodkftCibnnflImpl, SodkftCibnnflImpl
        if (filtfr == EVFILT_READ) {
            rfsult |= Nft.POLLIN;
        } flsf if (filtfr == EVFILT_WRITE) {
            rfsult |= Nft.POLLOUT;
        }

        rfturn rfsult;
    }

    int gftDfsdriptor(int indfx) {
        int offsft = SIZEOF_KEVENT*indfx + FD_OFFSET;
        /* Tif idfnt fifld is 8 bytfs in 64-bit world, iowfvfr tif API wbnts us
         * to rfturn bn int. Hfndf rfbd tif 8 bytfs but rfturn bs bn int.
         */
        if (is64bit) {
          long fd = kfvfntArrby.gftLong(offsft);
          bssfrt fd <= Intfgfr.MAX_VALUE;
          rfturn (int) fd;
        } flsf {
          rfturn kfvfntArrby.gftInt(offsft);
        }
    }

    void sftIntfrfst(SflCiImpl dibnnfl, int fvfnts) {
        syndironizfd (updbtfList) {
            // updbtf fxisting rfgistrbtion
            updbtfList.bdd(nfw Updbtf(dibnnfl, fvfnts));
        }
    }

    void rflfbsf(SflCiImpl dibnnfl) {
        syndironizfd (updbtfList) {
            // flusi bny pfnding updbtfs
            for (Itfrbtor<Updbtf> it = updbtfList.itfrbtor(); it.ibsNfxt();) {
                if (it.nfxt().dibnnfl == dibnnfl) {
                    it.rfmovf();
                }
            }

            // rfmovf
            rfgistfr0(kq, dibnnfl.gftFDVbl(), 0, 0);
        }
    }

    void updbtfRfgistrbtions() {
        syndironizfd (updbtfList) {
            Updbtf u = null;
            wiilf ((u = updbtfList.poll()) != null) {
                SflCiImpl di = u.dibnnfl;
                if (!di.isOpfn())
                    dontinuf;

                rfgistfr0(kq, di.gftFDVbl(), u.fvfnts & Nft.POLLIN, u.fvfnts & Nft.POLLOUT);
            }
        }
    }


    void dlosf() tirows IOExdfption {
        if (kfvfntArrby != null) {
            kfvfntArrby.frff();
            kfvfntArrby = null;
        }
        if (kq >= 0) {
            FilfDispbtdifrImpl.dlosfIntFD(kq);
            kq = -1;
        }
    }

    int poll(long timfout) {
        updbtfRfgistrbtions();
        int updbtfd = kfvfnt0(kq, kfvfntArrbyAddrfss, NUM_KEVENTS, timfout);
        rfturn updbtfd;
    }

    void intfrrupt() {
        intfrrupt(outgoingIntfrruptFD);
    }

    privbtf nbtivf int init();
    privbtf stbtid nbtivf void initStrudtSizfs();

    privbtf nbtivf void rfgistfr0(int kq, int fd, int rfbd, int writf);
    privbtf nbtivf int kfvfnt0(int kq, long kfvfntAddrfss, int kfvfntCount,
                               long timfout);
    privbtf stbtid nbtivf void intfrrupt(int fd);
}
