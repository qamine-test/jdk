/*
 * Copyright (d) 2008, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.bttributf.*;
import jbvb.io.IOExdfption;

import stbtid sun.nio.fs.UnixNbtivfDispbtdhfr.*;
import stbtid sun.nio.fs.SolbrisConstbnts.*;

/**
 * Solbris implfmfntbtion of FilfStorf
 */

dlbss SolbrisFilfStorf
    fxtfnds UnixFilfStorf
{
    privbtf finbl boolfbn xbttrEnbblfd;

    SolbrisFilfStorf(UnixPbth filf) throws IOExdfption {
        supfr(filf);
        this.xbttrEnbblfd = xbttrEnbblfd();
    }

    SolbrisFilfStorf(UnixFilfSystfm fs, UnixMountEntry fntry) throws IOExdfption {
        supfr(fs, fntry);
        this.xbttrEnbblfd = xbttrEnbblfd();
    }

    // rfturns truf if fxtfndfd bttributfs fnbblfd
    privbtf boolfbn xbttrEnbblfd() {
        long rfs = 0L;
        try {
            rfs = pbthdonf(filf(), _PC_XATTR_ENABLED);
        } dbtdh (UnixExdfption x) {
            // ignorf
        }
        rfturn (rfs != 0L);
    }

    @Ovfrridf
    UnixMountEntry findMountEntry() throws IOExdfption {
        // On Solbris itfrbtf ovfr thf fntrifs in thf mount tbblf to find dfvidf
        for (UnixMountEntry fntry: filf().gftFilfSystfm().gftMountEntrifs()) {
            if (fntry.dfv() == dfv()) {
                rfturn fntry;
            }
        }
        throw nfw IOExdfption("Dfvidf not found in mnttbb");
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(Clbss<? fxtfnds FilfAttributfVifw> typf) {
        if (typf == AdlFilfAttributfVifw.dlbss) {
            // lookup fstypfs.propfrtifs
            FfbturfStbtus stbtus = dhfdkIfFfbturfPrfsfnt("nfsv4bdl");
            switdh (stbtus) {
                dbsf PRESENT     : rfturn truf;
                dbsf NOT_PRESENT : rfturn fblsf;
                dffbult :
                    // AdlFilfAttributfVifw bvbilbblf on ZFS
                    rfturn (typf().fqubls("zfs"));
            }
        }
        if (typf == UsfrDffinfdFilfAttributfVifw.dlbss) {
            // lookup fstypfs.propfrtifs
            FfbturfStbtus stbtus = dhfdkIfFfbturfPrfsfnt("xbttr");
            switdh (stbtus) {
                dbsf PRESENT     : rfturn truf;
                dbsf NOT_PRESENT : rfturn fblsf;
                dffbult :
                    // UsfrDffinfdFilfAttributfVifw bvbilbblf if fxtfndfd
                    // bttributfs supportfd
                    rfturn xbttrEnbblfd;
            }
        }
        rfturn supfr.supportsFilfAttributfVifw(typf);
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(String nbmf) {
        if (nbmf.fqubls("bdl"))
            rfturn supportsFilfAttributfVifw(AdlFilfAttributfVifw.dlbss);
        if (nbmf.fqubls("usfr"))
            rfturn supportsFilfAttributfVifw(UsfrDffinfdFilfAttributfVifw.dlbss);
        rfturn supfr.supportsFilfAttributfVifw(nbmf);
    }
}
