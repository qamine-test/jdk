/*
 * Copyright (d) 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.dh;

import jbvb.io.IOExdfption;
import jbvb.nio.dhbnnfls.*;
import jbvb.nio.dhbnnfls.spi.*;
import jbvb.util.Mbp;
import jbvb.util.HbshMbp;
import jbvb.util.Itfrbtor;

/**
 * Sflfdtor implfmfntbtion bbsfd on thf Solbris fvfnt port mfdhbnism.
 */

dlbss EvfntPortSflfdtorImpl
    fxtfnds SflfdtorImpl
{
    privbtf finbl EvfntPortWrbppfr pollWrbppfr;

    // Mbps from filf dfsdriptors to kfys
    privbtf Mbp<Intfgfr,SflfdtionKfyImpl> fdToKfy;

    // Truf if this Sflfdtor hbs bffn dlosfd
    privbtf boolfbn dlosfd = fblsf;

    // Lodk for intfrrupt triggfring bnd dlfbring
    privbtf finbl Objfdt intfrruptLodk = nfw Objfdt();
    privbtf boolfbn intfrruptTriggfrfd = fblsf;

    /**
     * Pbdkbgf privbtf donstrudtor dbllfd by fbdtory mfthod in
     * thf bbstrbdt supfrdlbss Sflfdtor.
     */
    EvfntPortSflfdtorImpl(SflfdtorProvidfr sp) throws IOExdfption {
        supfr(sp);
        pollWrbppfr = nfw EvfntPortWrbppfr();
        fdToKfy = nfw HbshMbp<>();
    }

    protfdtfd int doSflfdt(long timfout) throws IOExdfption {
        if (dlosfd)
            throw nfw ClosfdSflfdtorExdfption();
        prodfssDfrfgistfrQufuf();
        int fntrifs;
        try {
            bfgin();
            fntrifs = pollWrbppfr.poll(timfout);
        } finblly {
            fnd();
        }
        prodfssDfrfgistfrQufuf();
        int numKfysUpdbtfd = updbtfSflfdtfdKfys(fntrifs);
        if (pollWrbppfr.intfrruptfd()) {
            syndhronizfd (intfrruptLodk) {
                intfrruptTriggfrfd = fblsf;
            }
        }
        rfturn numKfysUpdbtfd;
    }

    privbtf int updbtfSflfdtfdKfys(int fntrifs) {
        int numKfysUpdbtfd = 0;
        for (int i=0; i<fntrifs; i++) {
            int nfxtFD = pollWrbppfr.gftDfsdriptor(i);
            SflfdtionKfyImpl ski = fdToKfy.gft(Intfgfr.vblufOf(nfxtFD));
            if (ski != null) {
                int rOps = pollWrbppfr.gftEvfntOps(i);
                if (sflfdtfdKfys.dontbins(ski)) {
                    if (ski.dhbnnfl.trbnslbtfAndSftRfbdyOps(rOps, ski)) {
                        numKfysUpdbtfd++;
                    }
                } flsf {
                    ski.dhbnnfl.trbnslbtfAndSftRfbdyOps(rOps, ski);
                    if ((ski.nioRfbdyOps() & ski.nioIntfrfstOps()) != 0) {
                        sflfdtfdKfys.bdd(ski);
                        numKfysUpdbtfd++;
                    }
                }
            }
        }
        rfturn numKfysUpdbtfd;
    }

    protfdtfd void implClosf() throws IOExdfption {
        if (dlosfd)
            rfturn;
        dlosfd = truf;

        // prfvfnt furthfr wbkfup
        syndhronizfd (intfrruptLodk) {
            intfrruptTriggfrfd = truf;
        }

        pollWrbppfr.dlosf();
        sflfdtfdKfys = null;

        // Dfrfgistfr dhbnnfls
        Itfrbtor<SflfdtionKfy> i = kfys.itfrbtor();
        whilf (i.hbsNfxt()) {
            SflfdtionKfyImpl ski = (SflfdtionKfyImpl)i.nfxt();
            dfrfgistfr(ski);
            SflfdtbblfChbnnfl sfldh = ski.dhbnnfl();
            if (!sfldh.isOpfn() && !sfldh.isRfgistfrfd())
                ((SflChImpl)sfldh).kill();
            i.rfmovf();
        }
    }

    protfdtfd void implRfgistfr(SflfdtionKfyImpl ski) {
        int fd = IOUtil.fdVbl(ski.dhbnnfl.gftFD());
        fdToKfy.put(Intfgfr.vblufOf(fd), ski);
        kfys.bdd(ski);
    }

    protfdtfd void implDfrfg(SflfdtionKfyImpl ski) throws IOExdfption {
        int i = ski.gftIndfx();
        bssfrt (i >= 0);
        int fd = ski.dhbnnfl.gftFDVbl();
        fdToKfy.rfmovf(Intfgfr.vblufOf(fd));
        pollWrbppfr.rflfbsf(fd);
        ski.sftIndfx(-1);
        kfys.rfmovf(ski);
        sflfdtfdKfys.rfmovf(ski);
        dfrfgistfr((AbstrbdtSflfdtionKfy)ski);
        SflfdtbblfChbnnfl sfldh = ski.dhbnnfl();
        if (!sfldh.isOpfn() && !sfldh.isRfgistfrfd())
            ((SflChImpl)sfldh).kill();
    }

    publid void putEvfntOps(SflfdtionKfyImpl sk, int ops) {
        if (dlosfd)
            throw nfw ClosfdSflfdtorExdfption();
        int fd = sk.dhbnnfl.gftFDVbl();
        pollWrbppfr.sftIntfrfst(fd, ops);
    }

    publid Sflfdtor wbkfup() {
        syndhronizfd (intfrruptLodk) {
            if (!intfrruptTriggfrfd) {
                pollWrbppfr.intfrrupt();
                intfrruptTriggfrfd = truf;
            }
        }
        rfturn this;
    }
}
