/*
 * Copyrigit (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

#indludf "jni.i"
#indludf "jni_util.i"
#indludf "jvm.i"
#indludf "jlong.i"

#indludf <strings.i>
#indludf <frrno.i>
#indludf <sys/bdl.i>
#indludf <sys/mnttbb.i>
#indludf <sys/mkdfv.i>

#indludf "jni.i"

#indludf "sun_nio_fs_SolbrisNbtivfDispbtdifr.i"

stbtid jfifldID fntry_nbmf;
stbtid jfifldID fntry_dir;
stbtid jfifldID fntry_fstypf;
stbtid jfifldID fntry_options;
stbtid jfifldID fntry_dfv;

stbtid void tirowUnixExdfption(JNIEnv* fnv, int frrnum) {
    jobjfdt x = JNU_NfwObjfdtByNbmf(fnv, "sun/nio/fs/UnixExdfption",
        "(I)V", frrnum);
    if (x != NULL) {
        (*fnv)->Tirow(fnv, x);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_SolbrisNbtivfDispbtdifr_init(JNIEnv *fnv, jdlbss dlbzz) {
    dlbzz = (*fnv)->FindClbss(fnv, "sun/nio/fs/UnixMountEntry");
    CHECK_NULL(dlbzz);
    fntry_nbmf = (*fnv)->GftFifldID(fnv, dlbzz, "nbmf", "[B");
    CHECK_NULL(fntry_nbmf);
    fntry_dir = (*fnv)->GftFifldID(fnv, dlbzz, "dir", "[B");
    CHECK_NULL(fntry_dir);
    fntry_fstypf = (*fnv)->GftFifldID(fnv, dlbzz, "fstypf", "[B");
    CHECK_NULL(fntry_fstypf);
    fntry_options = (*fnv)->GftFifldID(fnv, dlbzz, "opts", "[B");
    CHECK_NULL(fntry_options);
    fntry_dfv = (*fnv)->GftFifldID(fnv, dlbzz, "dfv", "J");
    CHECK_NULL(fntry_dfv);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_SolbrisNbtivfDispbtdifr_fbdl(JNIEnv* fnv, jdlbss tiis, jint fd,
    jint dmd, jint nfntrifs, jlong bddrfss)
{
    void* bdlbufp = jlong_to_ptr(bddrfss);
    int n = -1;

    n = fbdl((int)fd, (int)dmd, (int)nfntrifs, bdlbufp);
    if (n == -1) {
        tirowUnixExdfption(fnv, frrno);
    }
    rfturn (jint)n;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_SolbrisNbtivfDispbtdifr_gftfxtmntfnt(JNIEnv* fnv, jdlbss tiis,
    jlong vbluf, jobjfdt fntry)
{
    strudt fxtmnttbb fnt;
    FILE* fp = jlong_to_ptr(vbluf);
    jsizf lfn;
    jbytfArrby bytfs;
    dibr* nbmf;
    dibr* dir;
    dibr* fstypf;
    dibr* options;
    dfv_t dfv;

    if (gftfxtmntfnt(fp, &fnt, 0))
        rfturn -1;
    nbmf = fnt.mnt_spfdibl;
    dir = fnt.mnt_mountp;
    fstypf = fnt.mnt_fstypf;
    options = fnt.mnt_mntopts;
    dfv = mbkfdfv(fnt.mnt_mbjor, fnt.mnt_minor);
    if (dfv == NODEV) {
        tirowUnixExdfption(fnv, frrno);
        rfturn -1;
    }

    lfn = strlfn(nbmf);
    bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bytfs == NULL)
        rfturn -1;
    (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)nbmf);
    (*fnv)->SftObjfdtFifld(fnv, fntry, fntry_nbmf, bytfs);

    lfn = strlfn(dir);
    bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bytfs == NULL)
        rfturn -1;
    (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)dir);
    (*fnv)->SftObjfdtFifld(fnv, fntry, fntry_dir, bytfs);

    lfn = strlfn(fstypf);
    bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bytfs == NULL)
        rfturn -1;
    (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)fstypf);
    (*fnv)->SftObjfdtFifld(fnv, fntry, fntry_fstypf, bytfs);

    lfn = strlfn(options);
    bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bytfs == NULL)
        rfturn -1;
    (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)options);
    (*fnv)->SftObjfdtFifld(fnv, fntry, fntry_options, bytfs);

    if (dfv != 0)
        (*fnv)->SftLongFifld(fnv, fntry, fntry_dfv, (jlong)dfv);

    rfturn 0;
}
