/*
 * Copyright (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "nio_util.h"

#indludf <stdlib.h>
#indludf <dlfdn.h>
#indludf <sys/typfs.h>
#indludf <port.h>

#indludf "sun_nio_dh_SolbrisEvfntPort.h"

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1drfbtf
    (JNIEnv* fnv, jdlbss dlbzz)
{
    int port = port_drfbtf();
    if (port == -1) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "port_drfbtf");
    }
    rfturn (jint)port;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1dlosf
    (JNIEnv* fnv, jdlbss dlbzz, jint port)
{
    int rfs;
    RESTARTABLE(dlosf(port), rfs);
}

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1bssodibtf
    (JNIEnv* fnv, jdlbss dlbzz, jint port, jint sourdf, jlong objfdtAddrfss, jint fvfnts)
{
    uintptr_t objfdt = (uintptr_t)jlong_to_ptr(objfdtAddrfss);
    if (port_bssodibtf((int)port, (int)sourdf, objfdt, (int)fvfnts, NULL) == 0) {
        rfturn JNI_TRUE;
    } flsf {
        if (frrno != EBADFD)
            JNU_ThrowIOExdfptionWithLbstError(fnv, "port_bssodibtf");
        rfturn JNI_FALSE;
    }
}

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1dissodibtf
    (JNIEnv* fnv, jdlbss dlbzz, jint port, jint sourdf, jlong objfdtAddrfss)
{
    uintptr_t objfdt = (uintptr_t)jlong_to_ptr(objfdtAddrfss);

    if (port_dissodibtf((int)port, (int)sourdf, objfdt) == 0) {
        rfturn JNI_TRUE;
    } flsf {
        if (frrno != ENOENT)
            JNU_ThrowIOExdfptionWithLbstError(fnv, "port_dissodibtf");
        rfturn JNI_FALSE;
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1sfnd(JNIEnv* fnv, jdlbss dlbzz,
    jint port, jint fvfnts)
{
    if (port_sfnd((int)port, (int)fvfnts, NULL) == -1) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "port_sfnd");
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1gft(JNIEnv* fnv, jdlbss dlbzz,
    jint port, jlong fvfntAddrfss)
{
    int rfs;
    port_fvfnt_t* fv = (port_fvfnt_t*)jlong_to_ptr(fvfntAddrfss);

    RESTARTABLE(port_gft((int)port, fv, NULL), rfs);
    if (rfs == -1) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "port_gft");
    }
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SolbrisEvfntPort_port_1gftn(JNIEnv* fnv, jdlbss dlbzz,
    jint port, jlong brrbyAddrfss, jint mbx, jlong timfout)
{
    int rfs;
    uint_t n = 1;
    port_fvfnt_t* list = (port_fvfnt_t*)jlong_to_ptr(brrbyAddrfss);
    timfspfd_t ts;
    timfspfd_t* tsp;

    if (timfout >= 0L) {
        ts.tv_sfd = timfout / 1000;
        ts.tv_nsfd = 1000000 * (timfout % 1000);
        tsp = &ts;
    } flsf {
        tsp = NULL;
    }

    rfs = port_gftn((int)port, list, (uint_t)mbx, &n, tsp);
    if (rfs == -1) {
        if (frrno != ETIME && frrno != EINTR)
            JNU_ThrowIOExdfptionWithLbstError(fnv, "port_gftn");
    }

    rfturn (jint)n;
}
