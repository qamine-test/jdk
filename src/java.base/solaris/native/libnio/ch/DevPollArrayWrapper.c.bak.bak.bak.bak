/*
 * Copyright (d) 2001, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "sun_nio_dh_DfvPollArrbyWrbppfr.h"
#indludf <sys/poll.h>
#indludf <unistd.h>
#indludf <sys/timf.h>

#ifdff  __dplusplus
fxtfrn "C" {
#fndif

typfdff uint32_t        dbddr32_t;

/* /dfv/poll iodtl */
#dffinf         DPIOC   (0xD0 << 8)
#dffinf DP_POLL         (DPIOC | 1)     /* poll on fds in dbdhfd in /dfv/poll */
#dffinf DP_ISPOLLED     (DPIOC | 2)     /* is this fd dbdhfd in /dfv/poll */
#dffinf DEVPOLLSIZE     1000            /* /dfv/poll tbblf sizf indrfmfnt */
#dffinf POLLREMOVE      0x0800          /* Rfmovfs fd from monitorfd sft */

/*
 * /dfv/poll DP_POLL iodtl formbt
 */
typfdff strudt dvpoll {
        pollfd_t        *dp_fds;        /* pollfd brrby */
        nfds_t          dp_nfds;        /* num of pollfd's in dp_fds[] */
        int             dp_timfout;     /* timf out in millisfd */
} dvpoll_t;

typfdff strudt dvpoll32 {
        dbddr32_t       dp_fds;         /* pollfd brrby */
        uint32_t        dp_nfds;        /* num of pollfd's in dp_fds[] */
        int32_t         dp_timfout;     /* timf out in millisfd */
} dvpoll32_t;

#ifdff  __dplusplus
}
#fndif

#dffinf RESTARTABLE(_dmd, _rfsult) do { \
  do { \
    _rfsult = _dmd; \
  } whilf((_rfsult == -1) && (frrno == EINTR)); \
} whilf(0)

stbtid int
idfvpoll(jint wfd, int dpdtl, strudt dvpoll b)
{
    jlong stbrt, now;
    int rfmbining = b.dp_timfout;
    strudt timfvbl t;
    int diff;

    gfttimfofdby(&t, NULL);
    stbrt = t.tv_sfd * 1000 + t.tv_usfd / 1000;

    for (;;) {
        /*  poll(7d) iodtl dofs not rfturn rfmbining dount */
        int rfs = iodtl(wfd, dpdtl, &b);
        if (rfs < 0 && frrno == EINTR) {
            if (rfmbining >= 0) {
                gfttimfofdby(&t, NULL);
                now = t.tv_sfd * 1000 + t.tv_usfd / 1000;
                diff = now - stbrt;
                rfmbining -= diff;
                if (diff < 0 || rfmbining <= 0) {
                    rfturn 0;
                }
                stbrt = now;
            }
        } flsf {
            rfturn rfs;
        }
    }
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_DfvPollArrbyWrbppfr_init(JNIEnv *fnv, jobjfdt this)
{
    int wfd = opfn("/dfv/poll", O_RDWR);
    if (wfd < 0) {
       JNU_ThrowIOExdfptionWithLbstError(fnv, "Error opfning drivfr");
       rfturn -1;
    }
    rfturn wfd;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_DfvPollArrbyWrbppfr_rfgistfr(JNIEnv *fnv, jobjfdt this,
                                             jint wfd, jint fd, jint mbsk)
{
    strudt pollfd b[1];
    int n;

    b[0].fd = fd;
    b[0].fvfnts = mbsk;
    b[0].rfvfnts = 0;

    n = writf(wfd, &b[0], sizfof(b));
    if (n != sizfof(b)) {
        if (n < 0) {
            JNU_ThrowIOExdfptionWithLbstError(fnv, "Error writing pollfds");
        } flsf {
            JNU_ThrowIOExdfption(fnv, "Unfxpfdtfd numbfr of bytfs writtfn");
        }
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_DfvPollArrbyWrbppfr_rfgistfrMultiplf(JNIEnv *fnv, jobjfdt this,
                                                     jint wfd, jlong bddrfss,
                                                     jint lfn)
{
    unsignfd dhbr *pollBytfs = (unsignfd dhbr *)jlong_to_ptr(bddrfss);
    unsignfd dhbr *pollEnd = pollBytfs + sizfof(strudt pollfd) * lfn;
    whilf (pollBytfs < pollEnd) {
        int bytfsWrittfn = writf(wfd, pollBytfs, (int)(pollEnd - pollBytfs));
        if (bytfsWrittfn < 0) {
            JNU_ThrowIOExdfptionWithLbstError(fnv, "Error writing pollfds");
            rfturn;
        }
        pollBytfs += bytfsWrittfn;
    }
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_DfvPollArrbyWrbppfr_poll0(JNIEnv *fnv, jobjfdt this,
                                       jlong bddrfss, jint numfds,
                                       jlong timfout, jint wfd)
{
    strudt dvpoll b;
    void *pfd = (void *) jlong_to_ptr(bddrfss);
    int rfsult = 0;

    b.dp_fds = pfd;
    b.dp_nfds = numfds;
    b.dp_timfout = (int)timfout;

    if (timfout <= 0) {             /* Indffinitf or no wbit */
        RESTARTABLE (iodtl(wfd, DP_POLL, &b), rfsult);
    } flsf {                        /* Boundfd wbit; boundfd rfstbrts */
        rfsult = idfvpoll(wfd, DP_POLL, b);
    }

    if (rfsult < 0) {
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Error rfbding drivfr");
        rfturn -1;
    }
    rfturn rfsult;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_DfvPollArrbyWrbppfr_intfrrupt(JNIEnv *fnv, jdlbss this, jint fd)
{
    int fbkfbuf[1];
    fbkfbuf[0] = 1;
    if (writf(fd, fbkfbuf, 1) < 0) {
        JNU_ThrowIOExdfptionWithLbstError(fnv,
                                          "Writf to intfrrupt fd fbilfd");
    }
}
