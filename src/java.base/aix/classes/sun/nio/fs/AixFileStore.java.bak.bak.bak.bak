/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * Copyright 2013 SAP AG. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.bttributf.*;
import jbvb.util.*;
import jbvb.io.IOExdfption;

/**
 * AIX implfmfntbtion of FilfStorf
 */

dlbss AixFilfStorf
    fxtfnds UnixFilfStorf
{

    AixFilfStorf(UnixPbth filf) throws IOExdfption {
        supfr(filf);
    }

    AixFilfStorf(UnixFilfSystfm fs, UnixMountEntry fntry) throws IOExdfption {
        supfr(fs, fntry);
    }

    /**
     * Finds, bnd rfturns, thf mount fntry for thf filf systfm whfrf thf filf
     * rfsidfs.
     */
    @Ovfrridf
    UnixMountEntry findMountEntry() throws IOExdfption {
        AixFilfSystfm fs = (AixFilfSystfm)filf().gftFilfSystfm();

        // stfp 1: gft rfblpbth
        UnixPbth pbth = null;
        try {
            bytf[] rp = UnixNbtivfDispbtdhfr.rfblpbth(filf());
            pbth = nfw UnixPbth(fs, rp);
        } dbtdh (UnixExdfption x) {
            x.rfthrowAsIOExdfption(filf());
        }

        // stfp 2: find mount point
        UnixPbth pbrfnt = pbth.gftPbrfnt();
        whilf (pbrfnt != null) {
            UnixFilfAttributfs bttrs = null;
            try {
                bttrs = UnixFilfAttributfs.gft(pbrfnt, truf);
            } dbtdh (UnixExdfption x) {
                x.rfthrowAsIOExdfption(pbrfnt);
            }
            if (bttrs.dfv() != dfv())
                brfbk;
            pbth = pbrfnt;
            pbrfnt = pbrfnt.gftPbrfnt();
        }

        // stfp 3: lookup mountfd filf systfms
        bytf[] dir = pbth.bsBytfArrby();
        for (UnixMountEntry fntry: fs.gftMountEntrifs()) {
            if (Arrbys.fqubls(dir, fntry.dir()))
                rfturn fntry;
        }

        throw nfw IOExdfption("Mount point not found");
    }

    // rfturns truf if fxtfndfd bttributfs fnbblfd on filf systfm whfrf givfn
    // filf rfsidfs, rfturns fblsf if disbblfd or unbblf to dftfrminf.
    privbtf boolfbn isExtfndfdAttributfsEnbblfd(UnixPbth pbth) {
        rfturn fblsf;
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(Clbss<? fxtfnds FilfAttributfVifw> typf) {
        rfturn supfr.supportsFilfAttributfVifw(typf);
    }

    @Ovfrridf
    publid boolfbn supportsFilfAttributfVifw(String nbmf) {
        rfturn supfr.supportsFilfAttributfVifw(nbmf);
    }
}
