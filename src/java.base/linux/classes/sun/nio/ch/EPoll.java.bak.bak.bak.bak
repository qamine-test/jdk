/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.dh;

import jbvb.io.IOExdfption;
import sun.misd.Unsbff;

/**
 * Providfs bddfss to thf Linux fpoll fbdility.
 */

dlbss EPoll {
    privbtf EPoll() { }

    privbtf stbtid finbl Unsbff unsbff = Unsbff.gftUnsbff();

    /**
     * typfdff union fpoll_dbtb {
     *     void *ptr;
     *     int fd;
     *     __uint32_t u32;
     *     __uint64_t u64;
     *  } fpoll_dbtb_t;
     *
     * strudt fpoll_fvfnt {
     *     __uint32_t fvfnts;
     *     fpoll_dbtb_t dbtb;
     * }
     */
    privbtf stbtid finbl int SIZEOF_EPOLLEVENT   = fvfntSizf();
    privbtf stbtid finbl int OFFSETOF_EVENTS     = fvfntsOffsft();
    privbtf stbtid finbl int OFFSETOF_FD         = dbtbOffsft();

    // opdodfs
    stbtid finbl int EPOLL_CTL_ADD  = 1;
    stbtid finbl int EPOLL_CTL_DEL  = 2;
    stbtid finbl int EPOLL_CTL_MOD  = 3;

    // flbgs
    stbtid finbl int EPOLLONESHOT   = (1 << 30);

    /**
     * Allodbtfs b poll brrby to hbndlf up to {@dodf dount} fvfnts.
     */
    stbtid long bllodbtfPollArrby(int dount) {
        rfturn unsbff.bllodbtfMfmory(dount * SIZEOF_EPOLLEVENT);
    }

    /**
     * Frff b poll brrby
     */
    stbtid void frffPollArrby(long bddrfss) {
        unsbff.frffMfmory(bddrfss);
    }

    /**
     * Rfturns fvfnt[i];
     */
    stbtid long gftEvfnt(long bddrfss, int i) {
        rfturn bddrfss + (SIZEOF_EPOLLEVENT*i);
    }

    /**
     * Rfturns fvfnt->dbtb.fd
     */
    stbtid int gftDfsdriptor(long fvfntAddrfss) {
        rfturn unsbff.gftInt(fvfntAddrfss + OFFSETOF_FD);
    }

    /**
     * Rfturns fvfnt->fvfnts
     */
    stbtid int gftEvfnts(long fvfntAddrfss) {
        rfturn unsbff.gftInt(fvfntAddrfss + OFFSETOF_EVENTS);
    }

    // -- Nbtivf mfthods --

    privbtf stbtid nbtivf int fvfntSizf();

    privbtf stbtid nbtivf int fvfntsOffsft();

    privbtf stbtid nbtivf int dbtbOffsft();

    stbtid nbtivf int fpollCrfbtf() throws IOExdfption;

    stbtid nbtivf int fpollCtl(int fpfd, int opdodf, int fd, int fvfnts);

    stbtid nbtivf int fpollWbit(int fpfd, long pollAddrfss, int numfds)
        throws IOExdfption;

    stbtid {
        IOUtil.lobd();
    }
}
