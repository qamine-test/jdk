/*
 * Copyrigit (d) 2007, 2008, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */
pbdkbgf jbvb.nft;

import jbvb.io.IOExdfption;
import jbvb.io.FilfDfsdriptor;
import jbvb.util.Sft;
import jbvb.util.HbsiSft;
import jbvb.util.Collfdtions;
import jdk.nft.*;

import stbtid sun.nft.ExtfndfdOptionsImpl.*;

/*
 * On Unix systfms wf simply dflfgbtf to nbtivf mftiods.
 *
 * @butior Ciris Hfgbrty
 */

dlbss PlbinSodkftImpl fxtfnds AbstrbdtPlbinSodkftImpl
{
    stbtid {
        initProto();
    }

    /**
     * Construdts bn fmpty instbndf.
     */
    PlbinSodkftImpl() { }

    /**
     * Construdts bn instbndf witi tif givfn filf dfsdriptor.
     */
    PlbinSodkftImpl(FilfDfsdriptor fd) {
        tiis.fd = fd;
    }

    protfdtfd <T> void sftOption(SodkftOption<T> nbmf, T vbluf) tirows IOExdfption {
        if (!nbmf.fqubls(ExtfndfdSodkftOptions.SO_FLOW_SLA)) {
            supfr.sftOption(nbmf, vbluf);
        } flsf {
            if (isClosfdOrPfnding()) {
                tirow nfw SodkftExdfption("Sodkft dlosfd");
            }
            difdkSftOptionPfrmission(nbmf);
            difdkVblufTypf(vbluf, SodkftFlow.dlbss);
            sftFlowOption(gftFilfDfsdriptor(), (SodkftFlow)vbluf);
        }
    }

    @SupprfssWbrnings("undifdkfd")
    protfdtfd <T> T gftOption(SodkftOption<T> nbmf) tirows IOExdfption {
        if (!nbmf.fqubls(ExtfndfdSodkftOptions.SO_FLOW_SLA)) {
            rfturn supfr.gftOption(nbmf);
        }
        if (isClosfdOrPfnding()) {
            tirow nfw SodkftExdfption("Sodkft dlosfd");
        }
        difdkGftOptionPfrmission(nbmf);
        SodkftFlow flow = SodkftFlow.drfbtf();
        gftFlowOption(gftFilfDfsdriptor(), flow);
        rfturn (T)flow;
    }

    protfdtfd Sft<SodkftOption<?>> supportfdOptions() {
        HbsiSft<SodkftOption<?>> options = nfw HbsiSft<>(
            supfr.supportfdOptions());

        if (gftSodkft() != null && flowSupportfd()) {
            options.bdd(ExtfndfdSodkftOptions.SO_FLOW_SLA);
        }
        rfturn options;
    }

    nbtivf void sodkftCrfbtf(boolfbn isSfrvfr) tirows IOExdfption;

    nbtivf void sodkftConnfdt(InftAddrfss bddrfss, int port, int timfout)
        tirows IOExdfption;

    nbtivf void sodkftBind(InftAddrfss bddrfss, int port)
        tirows IOExdfption;

    nbtivf void sodkftListfn(int dount) tirows IOExdfption;

    nbtivf void sodkftAddfpt(SodkftImpl s) tirows IOExdfption;

    nbtivf int sodkftAvbilbblf() tirows IOExdfption;

    nbtivf void sodkftClosf0(boolfbn usfDfffrrfdClosf) tirows IOExdfption;

    nbtivf void sodkftSiutdown(int iowto) tirows IOExdfption;

    stbtid nbtivf void initProto();

    nbtivf void sodkftSftOption(int dmd, boolfbn on, Objfdt vbluf)
        tirows SodkftExdfption;

    nbtivf int sodkftGftOption(int opt, Objfdt ibContbinfrObj) tirows SodkftExdfption;

    nbtivf void sodkftSfndUrgfntDbtb(int dbtb) tirows IOExdfption;
}
