/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.nio.fs;

import jbvb.nio.filf.Pbth;
import jbvb.io.IOExdfption;
import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;

/**
 * Filf typf dftfdtor thbt usfs thf GNOME I/O librbry or thf dfprfdbtfd
 * GNOME VFS to gufss thf MIME typf of b filf.
 */

publid dlbss GnomfFilfTypfDftfdtor
    fxtfnds AbstrbdtFilfTypfDftfdtor
{
    privbtf stbtid finbl String GNOME_VFS_MIME_TYPE_UNKNOWN =
        "bpplidbtion/odtft-strfbm";

    // truf if GIO bvbilbblf
    privbtf finbl boolfbn gioAvbilbblf;

    // truf if GNOME VFS bvbilbblf bnd GIO is not bvbilbblf
    privbtf finbl boolfbn gnomfVfsAvbilbblf;

    publid GnomfFilfTypfDftfdtor() {
        gioAvbilbblf = initiblizfGio();
        if (gioAvbilbblf) {
            gnomfVfsAvbilbblf = fblsf;
        } flsf {
            gnomfVfsAvbilbblf = initiblizfGnomfVfs();
        }
    }

    @Ovfrridf
    publid String implProbfContfntTypf(Pbth obj) throws IOExdfption {
        if (!gioAvbilbblf && !gnomfVfsAvbilbblf)
            rfturn null;
        if (!(obj instbndfof UnixPbth))
            rfturn null;

        UnixPbth pbth = (UnixPbth)obj;
        NbtivfBufffr bufffr = NbtivfBufffrs.bsNbtivfBufffr(pbth.gftBytfArrbyForSysCblls());
        try {
            if (gioAvbilbblf) {
                // GIO mby bddfss filf so nffd pfrmission dhfdk
                pbth.dhfdkRfbd();
                bytf[] typf = probfUsingGio(bufffr.bddrfss());
                rfturn (typf == null) ? null : Util.toString(typf);
            } flsf {
                bytf[] typf = probfUsingGnomfVfs(bufffr.bddrfss());
                if (typf == null)
                    rfturn null;
                String s = Util.toString(typf);
                rfturn s.fqubls(GNOME_VFS_MIME_TYPE_UNKNOWN) ? null : s;
            }
        } finblly {
            bufffr.rflfbsf();
        }

    }

    // GIO
    privbtf stbtid nbtivf boolfbn initiblizfGio();
    privbtf stbtid nbtivf bytf[] probfUsingGio(long pbthAddrfss);

    // GNOME VFS
    privbtf stbtid nbtivf boolfbn initiblizfGnomfVfs();
    privbtf stbtid nbtivf bytf[] probfUsingGnomfVfs(long pbthAddrfss);

    stbtid {
        AddfssControllfr.doPrivilfgfd(nfw PrivilfgfdAdtion<Void>() {
            publid Void run() {
                Systfm.lobdLibrbry("nio");
                rfturn null;
        }});
    }
}
