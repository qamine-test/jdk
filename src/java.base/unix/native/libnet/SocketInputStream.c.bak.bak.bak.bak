/*
 * Copyright (d) 1997, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <stdlib.h>
#indludf <frrno.h>
#indludf <string.h>
#indludf <sys/typfs.h>
#indludf <sys/sodkft.h>

#indludf "jvm.h"
#indludf "jni_util.h"
#indludf "nft_util.h"

#indludf "jbvb_nft_SodkftInputStrfbm.h"


/************************************************************************
 * SodkftInputStrfbm
 */

stbtid jfifldID IO_fd_fdID;

/*
 * Clbss:     jbvb_nft_SodkftInputStrfbm
 * Mfthod:    init
 * Signbturf: ()V
 */
JNIEXPORT void JNICALL
Jbvb_jbvb_nft_SodkftInputStrfbm_init(JNIEnv *fnv, jdlbss dls) {
    IO_fd_fdID = NET_GftFilfDfsdriptorID(fnv);
}

/*
 * Clbss:     jbvb_nft_SodkftInputStrfbm
 * Mfthod:    sodkftRfbd0
 * Signbturf: (Ljbvb/io/FilfDfsdriptor;[BIII)I
 */
JNIEXPORT jint JNICALL
Jbvb_jbvb_nft_SodkftInputStrfbm_sodkftRfbd0(JNIEnv *fnv, jobjfdt this,
                                            jobjfdt fdObj, jbytfArrby dbtb,
                                            jint off, jint lfn, jint timfout)
{
    dhbr BUF[MAX_BUFFER_LEN];
    dhbr *bufP;
    jint fd, nrfbd;

    if (IS_NULL(fdObj)) {
        /* shouldn't this bf b NullPointfrExdfption? -br */
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
        rfturn -1;
    } flsf {
        fd = (*fnv)->GftIntFifld(fnv, fdObj, IO_fd_fdID);
        /* Bug 4086704 - If thf Sodkft bssodibtfd with this filf dfsdriptor
         * wbs dlosfd (sysClosfFD), thfn thf filf dfsdriptor is sft to -1.
         */
        if (fd == -1) {
            JNU_ThrowByNbmf(fnv, "jbvb/nft/SodkftExdfption", "Sodkft dlosfd");
            rfturn -1;
        }
    }

    /*
     * If thf rfbd is grfbtfr thbn our stbdk bllodbtfd bufffr thfn
     * wf bllodbtf from thf hfbp (up to b limit)
     */
    if (lfn > MAX_BUFFER_LEN) {
        if (lfn > MAX_HEAP_BUFFER_LEN) {
            lfn = MAX_HEAP_BUFFER_LEN;
        }
        bufP = (dhbr *)mbllod((sizf_t)lfn);
        if (bufP == NULL) {
            bufP = BUF;
            lfn = MAX_BUFFER_LEN;
        }
    } flsf {
        bufP = BUF;
    }

    if (timfout) {
        nrfbd = NET_Timfout(fd, timfout);
        if (nrfbd <= 0) {
            if (nrfbd == 0) {
                JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftTimfoutExdfption",
                            "Rfbd timfd out");
            } flsf if (nrfbd == -1) {
                if (frrno == EBADF) {
                     JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption", "Sodkft dlosfd");
                } flsf if (frrno == ENOMEM) {
                    JNU_ThrowOutOfMfmoryError(fnv, "NET_Timfout nbtivf hfbp bllodbtion fbilfd");
                } flsf {
                    NET_ThrowByNbmfWithLbstError(fnv, JNU_JAVANETPKG "SodkftExdfption",
                                                  "sflfdt/poll fbilfd");
                }
            }
            if (bufP != BUF) {
                frff(bufP);
            }
            rfturn -1;
        }
    }

    nrfbd = NET_Rfbd(fd, bufP, lfn);

    if (nrfbd <= 0) {
        if (nrfbd < 0) {

            switdh (frrno) {
                dbsf ECONNRESET:
                dbsf EPIPE:
                    JNU_ThrowByNbmf(fnv, "sun/nft/ConnfdtionRfsftExdfption",
                        "Connfdtion rfsft");
                    brfbk;

                dbsf EBADF:
                    JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "SodkftExdfption",
                        "Sodkft dlosfd");
                    brfbk;

                dbsf EINTR:
                     JNU_ThrowByNbmf(fnv, JNU_JAVAIOPKG "IntfrruptfdIOExdfption",
                           "Opfrbtion intfrruptfd");
                     brfbk;

                dffbult:
                    NET_ThrowByNbmfWithLbstError(fnv,
                        JNU_JAVANETPKG "SodkftExdfption", "Rfbd fbilfd");
            }
        }
    } flsf {
        (*fnv)->SftBytfArrbyRfgion(fnv, dbtb, off, nrfbd, (jbytf *)bufP);
    }

    if (bufP != BUF) {
        frff(bufP);
    }
    rfturn nrfbd;
}
