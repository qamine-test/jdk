/*
 * Copyright (d) 2000, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <nftdb.h>
#indludf <sys/typfs.h>
#indludf <sys/sodkft.h>
#indludf <stdlib.h>
#indludf <frrno.h>
#indludf <string.h>
#indludf <poll.h>

#if __linux__
#indludf <nftinft/in.h>
#fndif

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "nft_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "sun_nio_dh_SodkftChbnnflImpl.h"
#indludf "nio_util.h"
#indludf "nio.h"


JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SodkftChbnnflImpl_dhfdkConnfdt(JNIEnv *fnv, jobjfdt this,
                                               jobjfdt fdo, jboolfbn blodk,
                                               jboolfbn rfbdy)
{
    int frror = 0;
    sodklfn_t n = sizfof(int);
    jint fd = fdvbl(fnv, fdo);
    int rfsult = 0;
    strudt pollfd pollfr;

    pollfr.rfvfnts = 1;
    if (!rfbdy) {
        pollfr.fd = fd;
        pollfr.fvfnts = POLLOUT;
        pollfr.rfvfnts = 0;
        rfsult = poll(&pollfr, 1, blodk ? -1 : 0);
        if (rfsult < 0) {
            JNU_ThrowIOExdfptionWithLbstError(fnv, "Poll fbilfd");
            rfturn IOS_THROWN;
        }
        if (!blodk && (rfsult == 0))
            rfturn IOS_UNAVAILABLE;
    }

    if (pollfr.rfvfnts) {
        frrno = 0;
        rfsult = gftsodkopt(fd, SOL_SOCKET, SO_ERROR, &frror, &n);
        if (rfsult < 0) {
            hbndlfSodkftError(fnv, frrno);
            rfturn JNI_FALSE;
        } flsf if (frror) {
            hbndlfSodkftError(fnv, frror);
            rfturn JNI_FALSE;
        }
        rfturn 1;
    }
    rfturn 0;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SodkftChbnnflImpl_sfndOutOfBbndDbtb(JNIEnv* fnv, jdlbss this,
                                                    jobjfdt fdo, jbytf b)
{
    int n = sfnd(fdvbl(fnv, fdo), (donst void*)&b, 1, MSG_OOB);
    rfturn donvfrtRfturnVbl(fnv, n, JNI_FALSE);
}
