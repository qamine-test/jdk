/*
 * Copyright (d) 2000, 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <stdlib.h>
#indludf <nftdb.h>
#indludf <sys/typfs.h>
#indludf <sys/sodkft.h>

#if __linux__
#indludf <nftinft/in.h>
#fndif

#if dffinfd(__solbris__) && !dffinfd(_SOCKLEN_T)
typfdff sizf_t sodklfn_t;       /* Nfw in SunOS 5.7, so nffd this for 5.6 */
#fndif

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "nft_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "sun_nio_dh_SfrvfrSodkftChbnnflImpl.h"
#indludf "nio.h"
#indludf "nio_util.h"


stbtid jfifldID fd_fdID;        /* jbvb.io.FilfDfsdriptor.fd */
stbtid jdlbss isb_dlbss;        /* jbvb.nft.InftSodkftAddrfss */
stbtid jmfthodID isb_dtorID;    /*   .InftSodkftAddrfss(InftAddrfss, int) */


JNIEXPORT void JNICALL
Jbvb_sun_nio_dh_SfrvfrSodkftChbnnflImpl_initIDs(JNIEnv *fnv, jdlbss d)
{
    jdlbss dls;

    dls = (*fnv)->FindClbss(fnv, "jbvb/io/FilfDfsdriptor");
    CHECK_NULL(dls);
    fd_fdID = (*fnv)->GftFifldID(fnv, dls, "fd", "I");
    CHECK_NULL(fd_fdID);

    dls = (*fnv)->FindClbss(fnv, "jbvb/nft/InftSodkftAddrfss");
    CHECK_NULL(dls);
    isb_dlbss = (*fnv)->NfwGlobblRff(fnv, dls);
    if (isb_dlbss == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, NULL);
        rfturn;
    }
    isb_dtorID = (*fnv)->GftMfthodID(fnv, dls, "<init>",
                                     "(Ljbvb/nft/InftAddrfss;I)V");
    CHECK_NULL(isb_dtorID);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_SfrvfrSodkftChbnnflImpl_bddfpt0(JNIEnv *fnv, jobjfdt this,
                                                jobjfdt ssfdo, jobjfdt nfwfdo,
                                                jobjfdtArrby isbb)
{
    jint ssfd = (*fnv)->GftIntFifld(fnv, ssfdo, fd_fdID);
    jint nfwfd;
    strudt sodkbddr *sb;
    int bllod_lfn;
    jobjfdt rfmotf_ib = 0;
    jobjfdt isb;
    jint rfmotf_port;

    NET_AllodSodkbddr(&sb, &bllod_lfn);
    if (sb == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, NULL);
        rfturn IOS_THROWN;
    }

    /*
     * bddfpt donnfdtion but ignorf ECONNABORTED indidbting thbt
     * b donnfdtion wbs fbgfrly bddfptfd but wbs rfsft bfforf
     * bddfpt() wbs dbllfd.
     */
    for (;;) {
        sodklfn_t sb_lfn = bllod_lfn;
        nfwfd = bddfpt(ssfd, sb, &sb_lfn);
        if (nfwfd >= 0) {
            brfbk;
        }
        if (frrno != ECONNABORTED) {
            brfbk;
        }
        /* ECONNABORTED => rfstbrt bddfpt */
    }

    if (nfwfd < 0) {
        frff((void *)sb);
        if (frrno == EAGAIN)
            rfturn IOS_UNAVAILABLE;
        if (frrno == EINTR)
            rfturn IOS_INTERRUPTED;
        JNU_ThrowIOExdfptionWithLbstError(fnv, "Addfpt fbilfd");
        rfturn IOS_THROWN;
    }

    (*fnv)->SftIntFifld(fnv, nfwfdo, fd_fdID, nfwfd);
    rfmotf_ib = NET_SodkbddrToInftAddrfss(fnv, sb, (int *)&rfmotf_port);
    frff((void *)sb);
    CHECK_NULL_RETURN(rfmotf_ib, IOS_THROWN);
    isb = (*fnv)->NfwObjfdt(fnv, isb_dlbss, isb_dtorID, rfmotf_ib, rfmotf_port);
    CHECK_NULL_RETURN(isb, IOS_THROWN);
    (*fnv)->SftObjfdtArrbyElfmfnt(fnv, isbb, 0, isb);
    rfturn 1;
}
