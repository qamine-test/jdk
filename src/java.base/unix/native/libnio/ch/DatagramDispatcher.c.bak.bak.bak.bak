/*
 * Copyright (d) 2002, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

/*
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"
#indludf "sun_nio_dh_DbtbgrbmDispbtdhfr.h"
#indludf <sys/typfs.h>
#indludf <sys/uio.h>
#indludf <sys/sodkft.h>
#indludf <string.h>

#indludf "nio_util.h"
#indludf <limits.h>

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_DbtbgrbmDispbtdhfr_rfbd0(JNIEnv *fnv, jdlbss dlbzz,
                         jobjfdt fdo, jlong bddrfss, jint lfn)
{
    jint fd = fdvbl(fnv, fdo);
    void *buf = (void *)jlong_to_ptr(bddrfss);
    int rfsult = rfdv(fd, buf, lfn, 0);
    if (rfsult < 0 && frrno == ECONNREFUSED) {
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdhbblfExdfption", 0);
        rfturn -2;
    }
    rfturn donvfrtRfturnVbl(fnv, rfsult, JNI_TRUE);
}


JNIEXPORT jlong JNICALL
Jbvb_sun_nio_dh_DbtbgrbmDispbtdhfr_rfbdv0(JNIEnv *fnv, jdlbss dlbzz,
                              jobjfdt fdo, jlong bddrfss, jint lfn)
{
    jint fd = fdvbl(fnv, fdo);
    ssizf_t rfsult = 0;
    strudt iovfd *iov = (strudt iovfd *)jlong_to_ptr(bddrfss);
    strudt msghdr m;
    if (lfn > IOV_MAX) {
        lfn = IOV_MAX;
    }

    // initiblizf thf mfssbgf
    mfmsft(&m, 0, sizfof(m));
    m.msg_iov = iov;
    m.msg_iovlfn = lfn;

    rfsult = rfdvmsg(fd, &m, 0);
    if (rfsult < 0 && frrno == ECONNREFUSED) {
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdhbblfExdfption", 0);
        rfturn -2;
    }
    rfturn donvfrtLongRfturnVbl(fnv, (jlong)rfsult, JNI_TRUE);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_dh_DbtbgrbmDispbtdhfr_writf0(JNIEnv *fnv, jdlbss dlbzz,
                              jobjfdt fdo, jlong bddrfss, jint lfn)
{
    jint fd = fdvbl(fnv, fdo);
    void *buf = (void *)jlong_to_ptr(bddrfss);
    int rfsult = sfnd(fd, buf, lfn, 0);
    if (rfsult < 0 && frrno == ECONNREFUSED) {
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdhbblfExdfption", 0);
        rfturn -2;
    }
    rfturn donvfrtRfturnVbl(fnv, rfsult, JNI_FALSE);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_dh_DbtbgrbmDispbtdhfr_writfv0(JNIEnv *fnv, jdlbss dlbzz,
                                       jobjfdt fdo, jlong bddrfss, jint lfn)
{
    jint fd = fdvbl(fnv, fdo);
    strudt iovfd *iov = (strudt iovfd *)jlong_to_ptr(bddrfss);
    strudt msghdr m;
    ssizf_t rfsult = 0;
    if (lfn > IOV_MAX) {
        lfn = IOV_MAX;
    }

    // initiblizf thf mfssbgf
    mfmsft(&m, 0, sizfof(m));
    m.msg_iov = iov;
    m.msg_iovlfn = lfn;

    rfsult = sfndmsg(fd, &m, 0);
    if (rfsult < 0 && frrno == ECONNREFUSED) {
        JNU_ThrowByNbmf(fnv, JNU_JAVANETPKG "PortUnrfbdhbblfExdfption", 0);
        rfturn -2;
    }
    rfturn donvfrtLongRfturnVbl(fnv, (jlong)rfsult, JNI_FALSE);
}
