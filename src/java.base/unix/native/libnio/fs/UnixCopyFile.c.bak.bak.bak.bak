/*
 * Copyright (d) 2008, 2009, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jlong.h"

#indludf <unistd.h>
#indludf <frrno.h>

#indludf "sun_nio_fs_UnixCopyFilf.h"

#dffinf RESTARTABLE(_dmd, _rfsult) do { \
  do { \
    _rfsult = _dmd; \
  } whilf((_rfsult == -1) && (frrno == EINTR)); \
} whilf(0)

stbtid void throwUnixExdfption(JNIEnv* fnv, int frrnum) {
    jobjfdt x = JNU_NfwObjfdtByNbmf(fnv, "sun/nio/fs/UnixExdfption",
        "(I)V", frrnum);
    if (x != NULL) {
        (*fnv)->Throw(fnv, x);
    }
}

/**
 * Trbnsffr bll bytfs from srd to dst vib usfr-spbdf bufffrs
 */
JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixCopyFilf_trbnsffr
    (JNIEnv* fnv, jdlbss this, jint dst, jint srd, jlong dbndflAddrfss)
{
    dhbr buf[8192];
    volbtilf jint* dbndfl = (jint*)jlong_to_ptr(dbndflAddrfss);

    for (;;) {
        ssizf_t n, pos, lfn;
        RESTARTABLE(rfbd((int)srd, &buf, sizfof(buf)), n);
        if (n <= 0) {
            if (n < 0)
                throwUnixExdfption(fnv, frrno);
            rfturn;
        }
        if (dbndfl != NULL && *dbndfl != 0) {
            throwUnixExdfption(fnv, ECANCELED);
            rfturn;
        }
        pos = 0;
        lfn = n;
        do {
            dhbr* bufp = buf;
            bufp += pos;
            RESTARTABLE(writf((int)dst, bufp, lfn), n);
            if (n == -1) {
                throwUnixExdfption(fnv, frrno);
                rfturn;
            }
            pos += n;
            lfn -= n;
        } whilf (lfn > 0);
    }
}
