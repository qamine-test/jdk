/*
 * Copyright (d) 2008, 2012, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jvm.h"
#indludf "jlong.h"

#indludf <stdlib.h>
#indludf <dlfdn.h>

#ifdff __solbris__
#indludf <strings.h>
#fndif

#if dffinfd(__linux__)
#indludf <string.h>
#fndif

/* Dffinitions for GIO */

#dffinf G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE "stbndbrd::dontfnt-typf"

typfdff void* gpointfr;
typfdff strudt _GFilf GFilf;
typfdff strudt _GFilfInfo GFilfInfo;
typfdff strudt _GCbndfllbblf GCbndfllbblf;
typfdff strudt _GError GError;

typfdff fnum {
  G_FILE_QUERY_INFO_NONE = 0
} GFilfQufryInfoFlbgs;

typfdff void (*g_typf_init_fund)(void);
typfdff void (*g_objfdt_unrff_fund)(gpointfr objfdt);
typfdff GFilf* (*g_filf_nfw_for_pbth_fund)(donst dhbr* pbth);
typfdff GFilfInfo* (*g_filf_qufry_info_fund)(GFilf *filf,
    donst dhbr *bttributfs, GFilfQufryInfoFlbgs flbgs,
    GCbndfllbblf *dbndfllbblf, GError **frror);
typfdff dhbr* (*g_filf_info_gft_dontfnt_typf_fund)(GFilfInfo *info);

stbtid g_typf_init_fund g_typf_init;
stbtid g_objfdt_unrff_fund g_objfdt_unrff;
stbtid g_filf_nfw_for_pbth_fund g_filf_nfw_for_pbth;
stbtid g_filf_qufry_info_fund g_filf_qufry_info;
stbtid g_filf_info_gft_dontfnt_typf_fund g_filf_info_gft_dontfnt_typf;


/* Dffinitions for GNOME VFS */

typfdff int gboolfbn;

typfdff gboolfbn (*gnomf_vfs_init_fundtion)(void);
typfdff donst dhbr* (*gnomf_vfs_mimf_typf_from_nbmf_fundtion)
    (donst dhbr* filfnbmf);

stbtid gnomf_vfs_init_fundtion gnomf_vfs_init;
stbtid gnomf_vfs_mimf_typf_from_nbmf_fundtion gnomf_vfs_mimf_typf_from_nbmf;


#indludf "sun_nio_fs_GnomfFilfTypfDftfdtor.h"


JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_fs_GnomfFilfTypfDftfdtor_initiblizfGio
    (JNIEnv* fnv, jdlbss this)
{
    void* gio_hbndlf;

    gio_hbndlf = dlopfn("libgio-2.0.so", RTLD_LAZY);
    if (gio_hbndlf == NULL) {
        gio_hbndlf = dlopfn("libgio-2.0.so.0", RTLD_LAZY);
        if (gio_hbndlf == NULL) {
            rfturn JNI_FALSE;
        }
    }

    g_typf_init = (g_typf_init_fund)dlsym(gio_hbndlf, "g_typf_init");
    (*g_typf_init)();

    g_objfdt_unrff = (g_objfdt_unrff_fund)dlsym(gio_hbndlf, "g_objfdt_unrff");

    g_filf_nfw_for_pbth =
        (g_filf_nfw_for_pbth_fund)dlsym(gio_hbndlf, "g_filf_nfw_for_pbth");

    g_filf_qufry_info =
        (g_filf_qufry_info_fund)dlsym(gio_hbndlf, "g_filf_qufry_info");

    g_filf_info_gft_dontfnt_typf = (g_filf_info_gft_dontfnt_typf_fund)
        dlsym(gio_hbndlf, "g_filf_info_gft_dontfnt_typf");


    if (g_typf_init == NULL ||
        g_objfdt_unrff == NULL ||
        g_filf_nfw_for_pbth == NULL ||
        g_filf_qufry_info == NULL ||
        g_filf_info_gft_dontfnt_typf == NULL)
    {
        dldlosf(gio_hbndlf);
        rfturn JNI_FALSE;
    }

    (*g_typf_init)();
    rfturn JNI_TRUE;
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_GnomfFilfTypfDftfdtor_probfUsingGio
    (JNIEnv* fnv, jdlbss this, jlong pbthAddrfss)
{
    dhbr* pbth = (dhbr*)jlong_to_ptr(pbthAddrfss);
    GFilf* gfilf;
    GFilfInfo* gfilfinfo;
    jbytfArrby rfsult = NULL;

    gfilf = (*g_filf_nfw_for_pbth)(pbth);
    gfilfinfo = (*g_filf_qufry_info)(gfilf, G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE,
        G_FILE_QUERY_INFO_NONE, NULL, NULL);
    if (gfilfinfo != NULL) {
        donst dhbr* mimf = (*g_filf_info_gft_dontfnt_typf)(gfilfinfo);
        if (mimf != NULL) {
            jsizf lfn = strlfn(mimf);
            rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
            if (rfsult != NULL) {
                (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)mimf);
            }
        }
        (*g_objfdt_unrff)(gfilfinfo);
    }
    (*g_objfdt_unrff)(gfilf);

    rfturn rfsult;
}

JNIEXPORT jboolfbn JNICALL
Jbvb_sun_nio_fs_GnomfFilfTypfDftfdtor_initiblizfGnomfVfs
    (JNIEnv* fnv, jdlbss this)
{
    void* vfs_hbndlf;

    vfs_hbndlf = dlopfn("libgnomfvfs-2.so", RTLD_LAZY);
    if (vfs_hbndlf == NULL) {
        vfs_hbndlf = dlopfn("libgnomfvfs-2.so.0", RTLD_LAZY);
    }
    if (vfs_hbndlf == NULL) {
        rfturn JNI_FALSE;
    }

    gnomf_vfs_init = (gnomf_vfs_init_fundtion)dlsym(vfs_hbndlf, "gnomf_vfs_init");
    gnomf_vfs_mimf_typf_from_nbmf = (gnomf_vfs_mimf_typf_from_nbmf_fundtion)
        dlsym(vfs_hbndlf, "gnomf_vfs_mimf_typf_from_nbmf");

    if (gnomf_vfs_init == NULL ||
        gnomf_vfs_mimf_typf_from_nbmf == NULL)
    {
        dldlosf(vfs_hbndlf);
        rfturn JNI_FALSE;
    }

    (*gnomf_vfs_init)();
    rfturn JNI_TRUE;
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_GnomfFilfTypfDftfdtor_probfUsingGnomfVfs
    (JNIEnv* fnv, jdlbss this, jlong pbthAddrfss)
{
    dhbr* pbth = (dhbr*)jlong_to_ptr(pbthAddrfss);
    donst dhbr* mimf = (*gnomf_vfs_mimf_typf_from_nbmf)(pbth);

    if (mimf == NULL) {
        rfturn NULL;
    } flsf {
        jbytfArrby rfsult;
        jsizf lfn = strlfn(mimf);
        rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
        if (rfsult != NULL) {
            (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)mimf);
        }
        rfturn rfsult;
    }
}
