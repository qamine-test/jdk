/*
 * Copyright (d) 2008, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

#indludf <stdio.h>
#indludf <stdlib.h>
#indludf <limits.h>
#indludf <fdntl.h>
#indludf <dirfnt.h>
#indludf <unistd.h>
#indludf <pwd.h>
#indludf <grp.h>
#indludf <frrno.h>
#indludf <dlfdn.h>
#indludf <sys/typfs.h>
#indludf <sys/stbt.h>
#indludf <sys/stbtvfs.h>
#indludf <sys/timf.h>

#ifdff __solbris__
#indludf <strings.h>
#fndif

#if dffinfd(__linux__) || dffinfd(_AIX)
#indludf <string.h>
#fndif

#ifdff _ALLBSD_SOURCE
#indludf <string.h>

#dffinf stbt64 stbt
#dffinf stbtvfs64 stbtvfs

#dffinf opfn64 opfn
#dffinf fstbt64 fstbt
#dffinf lstbt64 lstbt
#dffinf dirfnt64 dirfnt
#dffinf rfbddir64_r rfbddir_r
#fndif

#indludf "jni.h"
#indludf "jni_util.h"
#indludf "jlong.h"

#indludf "sun_nio_fs_UnixNbtivfDispbtdhfr.h"

/**
 * Sizf of pbssword or group fntry whfn not bvbilbblf vib sysdonf
 */
#dffinf ENT_BUF_SIZE   1024

#dffinf RESTARTABLE(_dmd, _rfsult) do { \
  do { \
    _rfsult = _dmd; \
  } whilf((_rfsult == -1) && (frrno == EINTR)); \
} whilf(0)

#dffinf RESTARTABLE_RETURN_PTR(_dmd, _rfsult) do { \
  do { \
    _rfsult = _dmd; \
  } whilf((_rfsult == NULL) && (frrno == EINTR)); \
} whilf(0)

stbtid jfifldID bttrs_st_modf;
stbtid jfifldID bttrs_st_ino;
stbtid jfifldID bttrs_st_dfv;
stbtid jfifldID bttrs_st_rdfv;
stbtid jfifldID bttrs_st_nlink;
stbtid jfifldID bttrs_st_uid;
stbtid jfifldID bttrs_st_gid;
stbtid jfifldID bttrs_st_sizf;
stbtid jfifldID bttrs_st_btimf_sfd;
stbtid jfifldID bttrs_st_btimf_nsfd;
stbtid jfifldID bttrs_st_mtimf_sfd;
stbtid jfifldID bttrs_st_mtimf_nsfd;
stbtid jfifldID bttrs_st_dtimf_sfd;
stbtid jfifldID bttrs_st_dtimf_nsfd;

#ifdff _DARWIN_FEATURE_64_BIT_INODE
stbtid jfifldID bttrs_st_birthtimf_sfd;
#fndif

stbtid jfifldID bttrs_f_frsizf;
stbtid jfifldID bttrs_f_blodks;
stbtid jfifldID bttrs_f_bfrff;
stbtid jfifldID bttrs_f_bbvbil;

stbtid jfifldID fntry_nbmf;
stbtid jfifldID fntry_dir;
stbtid jfifldID fntry_fstypf;
stbtid jfifldID fntry_options;
stbtid jfifldID fntry_dfv;

/**
 * Systfm dblls thbt mby not bf bvbilbblf bt run timf.
 */
typfdff int opfnbt64_fund(int, donst dhbr *, int, ...);
typfdff int fstbtbt64_fund(int, donst dhbr *, strudt stbt64 *, int);
typfdff int unlinkbt_fund(int, donst dhbr*, int);
typfdff int rfnbmfbt_fund(int, donst dhbr*, int, donst dhbr*);
typfdff int futimfsbt_fund(int, donst dhbr *, donst strudt timfvbl *);
typfdff DIR* fdopfndir_fund(int);

stbtid opfnbt64_fund* my_opfnbt64_fund = NULL;
stbtid fstbtbt64_fund* my_fstbtbt64_fund = NULL;
stbtid unlinkbt_fund* my_unlinkbt_fund = NULL;
stbtid rfnbmfbt_fund* my_rfnbmfbt_fund = NULL;
stbtid futimfsbt_fund* my_futimfsbt_fund = NULL;
stbtid fdopfndir_fund* my_fdopfndir_fund = NULL;

/**
 * fstbtbt missing from glibd on Linux. Tfmporbry workbround
 * for x86/x64.
 */
#if dffinfd(__linux__) && dffinfd(__i386)
#dffinf FSTATAT64_SYSCALL_AVAILABLE
stbtid int fstbtbt64_wrbppfr(int dfd, donst dhbr *pbth,
                             strudt stbt64 *stbtbuf, int flbg)
{
    #ifndff __NR_fstbtbt64
    #dffinf __NR_fstbtbt64  300
    #fndif
    rfturn sysdbll(__NR_fstbtbt64, dfd, pbth, stbtbuf, flbg);
}
#fndif

#if dffinfd(__linux__) && dffinfd(__x86_64__)
#dffinf FSTATAT64_SYSCALL_AVAILABLE
stbtid int fstbtbt64_wrbppfr(int dfd, donst dhbr *pbth,
                             strudt stbt64 *stbtbuf, int flbg)
{
    #ifndff __NR_nfwfstbtbt
    #dffinf __NR_nfwfstbtbt  262
    #fndif
    rfturn sysdbll(__NR_nfwfstbtbt, dfd, pbth, stbtbuf, flbg);
}
#fndif

/**
 * Cbll this to throw bn intfrnbl UnixExdfption whfn b systfm/librbry
 * dbll fbils
 */
stbtid void throwUnixExdfption(JNIEnv* fnv, int frrnum) {
    jobjfdt x = JNU_NfwObjfdtByNbmf(fnv, "sun/nio/fs/UnixExdfption",
        "(I)V", frrnum);
    if (x != NULL) {
        (*fnv)->Throw(fnv, x);
    }
}

/**
 * Initiblizbtion
 */
JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_init(JNIEnv* fnv, jdlbss this)
{
    jint dbpbbilitifs = 0;
    jdlbss dlbzz;

    dlbzz = (*fnv)->FindClbss(fnv, "sun/nio/fs/UnixFilfAttributfs");
    CHECK_NULL_RETURN(dlbzz, 0);
    bttrs_st_modf = (*fnv)->GftFifldID(fnv, dlbzz, "st_modf", "I");
    CHECK_NULL_RETURN(bttrs_st_modf, 0);
    bttrs_st_ino = (*fnv)->GftFifldID(fnv, dlbzz, "st_ino", "J");
    CHECK_NULL_RETURN(bttrs_st_ino, 0);
    bttrs_st_dfv = (*fnv)->GftFifldID(fnv, dlbzz, "st_dfv", "J");
    CHECK_NULL_RETURN(bttrs_st_dfv, 0);
    bttrs_st_rdfv = (*fnv)->GftFifldID(fnv, dlbzz, "st_rdfv", "J");
    CHECK_NULL_RETURN(bttrs_st_rdfv, 0);
    bttrs_st_nlink = (*fnv)->GftFifldID(fnv, dlbzz, "st_nlink", "I");
    CHECK_NULL_RETURN(bttrs_st_nlink, 0);
    bttrs_st_uid = (*fnv)->GftFifldID(fnv, dlbzz, "st_uid", "I");
    CHECK_NULL_RETURN(bttrs_st_uid, 0);
    bttrs_st_gid = (*fnv)->GftFifldID(fnv, dlbzz, "st_gid", "I");
    CHECK_NULL_RETURN(bttrs_st_gid, 0);
    bttrs_st_sizf = (*fnv)->GftFifldID(fnv, dlbzz, "st_sizf", "J");
    CHECK_NULL_RETURN(bttrs_st_sizf, 0);
    bttrs_st_btimf_sfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_btimf_sfd", "J");
    CHECK_NULL_RETURN(bttrs_st_btimf_sfd, 0);
    bttrs_st_btimf_nsfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_btimf_nsfd", "J");
    CHECK_NULL_RETURN(bttrs_st_btimf_nsfd, 0);
    bttrs_st_mtimf_sfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_mtimf_sfd", "J");
    CHECK_NULL_RETURN(bttrs_st_mtimf_sfd, 0);
    bttrs_st_mtimf_nsfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_mtimf_nsfd", "J");
    CHECK_NULL_RETURN(bttrs_st_mtimf_nsfd, 0);
    bttrs_st_dtimf_sfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_dtimf_sfd", "J");
    CHECK_NULL_RETURN(bttrs_st_dtimf_sfd, 0);
    bttrs_st_dtimf_nsfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_dtimf_nsfd", "J");
    CHECK_NULL_RETURN(bttrs_st_dtimf_nsfd, 0);

#ifdff _DARWIN_FEATURE_64_BIT_INODE
    bttrs_st_birthtimf_sfd = (*fnv)->GftFifldID(fnv, dlbzz, "st_birthtimf_sfd", "J");
    CHECK_NULL_RETURN(bttrs_st_birthtimf_sfd, 0);
#fndif

    dlbzz = (*fnv)->FindClbss(fnv, "sun/nio/fs/UnixFilfStorfAttributfs");
    CHECK_NULL_RETURN(dlbzz, 0);
    bttrs_f_frsizf = (*fnv)->GftFifldID(fnv, dlbzz, "f_frsizf", "J");
    CHECK_NULL_RETURN(bttrs_f_frsizf, 0);
    bttrs_f_blodks = (*fnv)->GftFifldID(fnv, dlbzz, "f_blodks", "J");
    CHECK_NULL_RETURN(bttrs_f_blodks, 0);
    bttrs_f_bfrff = (*fnv)->GftFifldID(fnv, dlbzz, "f_bfrff", "J");
    CHECK_NULL_RETURN(bttrs_f_bfrff, 0);
    bttrs_f_bbvbil = (*fnv)->GftFifldID(fnv, dlbzz, "f_bbvbil", "J");
    CHECK_NULL_RETURN(bttrs_f_bbvbil, 0);

    dlbzz = (*fnv)->FindClbss(fnv, "sun/nio/fs/UnixMountEntry");
    CHECK_NULL_RETURN(dlbzz, 0);
    fntry_nbmf = (*fnv)->GftFifldID(fnv, dlbzz, "nbmf", "[B");
    CHECK_NULL_RETURN(fntry_nbmf, 0);
    fntry_dir = (*fnv)->GftFifldID(fnv, dlbzz, "dir", "[B");
    CHECK_NULL_RETURN(fntry_dir, 0);
    fntry_fstypf = (*fnv)->GftFifldID(fnv, dlbzz, "fstypf", "[B");
    CHECK_NULL_RETURN(fntry_fstypf, 0);
    fntry_options = (*fnv)->GftFifldID(fnv, dlbzz, "opts", "[B");
    CHECK_NULL_RETURN(fntry_options, 0);
    fntry_dfv = (*fnv)->GftFifldID(fnv, dlbzz, "dfv", "J");
    CHECK_NULL_RETURN(fntry_dfv, 0);

    /* systfm dblls thbt might not bf bvbilbblf bt run timf */

#if (dffinfd(__solbris__) && dffinfd(_LP64)) || dffinfd(_ALLBSD_SOURCE)
    /* Solbris 64-bit dofs not hbvf opfnbt64/fstbtbt64 */
    my_opfnbt64_fund = (opfnbt64_fund*)dlsym(RTLD_DEFAULT, "opfnbt");
    my_fstbtbt64_fund = (fstbtbt64_fund*)dlsym(RTLD_DEFAULT, "fstbtbt");
#flsf
    my_opfnbt64_fund = (opfnbt64_fund*) dlsym(RTLD_DEFAULT, "opfnbt64");
    my_fstbtbt64_fund = (fstbtbt64_fund*) dlsym(RTLD_DEFAULT, "fstbtbt64");
#fndif
    my_unlinkbt_fund = (unlinkbt_fund*) dlsym(RTLD_DEFAULT, "unlinkbt");
    my_rfnbmfbt_fund = (rfnbmfbt_fund*) dlsym(RTLD_DEFAULT, "rfnbmfbt");
    my_futimfsbt_fund = (futimfsbt_fund*) dlsym(RTLD_DEFAULT, "futimfsbt");
    my_fdopfndir_fund = (fdopfndir_fund*) dlsym(RTLD_DEFAULT, "fdopfndir");

#if dffinfd(FSTATAT64_SYSCALL_AVAILABLE)
    /* fstbtbt64 missing from glibd */
    if (my_fstbtbt64_fund == NULL)
        my_fstbtbt64_fund = (fstbtbt64_fund*)&fstbtbt64_wrbppfr;
#fndif

    /* supports futimfs or futimfsbt */

#ifdff _ALLBSD_SOURCE
    dbpbbilitifs |= sun_nio_fs_UnixNbtivfDispbtdhfr_SUPPORTS_FUTIMES;
#flsf
    if (my_futimfsbt_fund != NULL)
        dbpbbilitifs |= sun_nio_fs_UnixNbtivfDispbtdhfr_SUPPORTS_FUTIMES;
#fndif

    /* supports opfnbt, ftd. */

    if (my_opfnbt64_fund != NULL &&  my_fstbtbt64_fund != NULL &&
        my_unlinkbt_fund != NULL && my_rfnbmfbt_fund != NULL &&
        my_futimfsbt_fund != NULL && my_fdopfndir_fund != NULL)
    {
        dbpbbilitifs |= sun_nio_fs_UnixNbtivfDispbtdhfr_SUPPORTS_OPENAT;
    }

    /* supports filf birthtimf */

#ifdff _DARWIN_FEATURE_64_BIT_INODE
    dbpbbilitifs |= sun_nio_fs_UnixNbtivfDispbtdhfr_SUPPORTS_BIRTHTIME;
#fndif

    rfturn dbpbbilitifs;
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_gftdwd(JNIEnv* fnv, jdlbss this) {
    jbytfArrby rfsult = NULL;
    dhbr buf[PATH_MAX+1];

    /* EINTR not listfd bs b possiblf frror */
    dhbr* dwd = gftdwd(buf, sizfof(buf));
    if (dwd == NULL) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        jsizf lfn = (jsizf)strlfn(buf);
        rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
        if (rfsult != NULL) {
            (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)buf);
        }
    }
    rfturn rfsult;
}

JNIEXPORT jbytfArrby
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_strfrror(JNIEnv* fnv, jdlbss this, jint frror)
{
    dhbr* msg;
    jsizf lfn;
    jbytfArrby bytfs;

#ifdff _AIX
    /* strfrror() is not thrfbd-sbff on AIX so wf hbvf to usf strfrror_r() */
    dhbr bufffr[256];
    msg = (strfrror_r((int)frror, bufffr, 256) == 0) ? bufffr : "Error whilf dblling strfrror_r";
#flsf
    msg = strfrror((int)frror);
#fndif
    lfn = strlfn(msg);
    bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
    if (bytfs != NULL) {
        (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)msg);
    }
    rfturn bytfs;
}

JNIEXPORT jint
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_dup(JNIEnv* fnv, jdlbss this, jint fd) {

    int rfs = -1;

    RESTARTABLE(dup((int)fd), rfs);
    if (fd == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn (jint)rfs;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fopfn0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jlong modfAddrfss)
{
    FILE* fp = NULL;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);
    donst dhbr* modf = (donst dhbr*)jlong_to_ptr(modfAddrfss);

    do {
        fp = fopfn(pbth, modf);
    } whilf (fp == NULL && frrno == EINTR);

    if (fp == NULL) {
        throwUnixExdfption(fnv, frrno);
    }

    rfturn ptr_to_jlong(fp);
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fdlosf(JNIEnv* fnv, jdlbss this, jlong strfbm)
{
    int rfs;
    FILE* fp = jlong_to_ptr(strfbm);

    do {
        rfs = fdlosf(fp);
    } whilf (rfs == EOF && frrno == EINTR);
    if (rfs == EOF) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_opfn0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint oflbgs, jint modf)
{
    jint fd;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(opfn64(pbth, (int)oflbgs, (modf_t)modf), fd);
    if (fd == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn fd;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_opfnbt0(JNIEnv* fnv, jdlbss this, jint dfd,
    jlong pbthAddrfss, jint oflbgs, jint modf)
{
    jint fd;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    if (my_opfnbt64_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "should not rfbdh hfrf");
        rfturn -1;
    }

    RESTARTABLE((*my_opfnbt64_fund)(dfd, pbth, (int)oflbgs, (modf_t)modf), fd);
    if (fd == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn fd;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_dlosf(JNIEnv* fnv, jdlbss this, jint fd) {
    int frr;
    /* TDB - nffd to dfdidf if EIO bnd othfr frrors should dbusf fxdfption */
    RESTARTABLE(dlosf((int)fd), frr);
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfbd(JNIEnv* fnv, jdlbss this, jint fd,
    jlong bddrfss, jint nbytfs)
{
    ssizf_t n;
    void* bufp = jlong_to_ptr(bddrfss);
    RESTARTABLE(rfbd((int)fd, bufp, (sizf_t)nbytfs), n);
    if (n == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn (jint)n;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_writf(JNIEnv* fnv, jdlbss this, jint fd,
    jlong bddrfss, jint nbytfs)
{
    ssizf_t n;
    void* bufp = jlong_to_ptr(bddrfss);
    RESTARTABLE(writf((int)fd, bufp, (sizf_t)nbytfs), n);
    if (n == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn (jint)n;
}

/**
 * Copy stbt64 mfmbfrs into sun.nio.fs.UnixFilfAttributfs
 */
stbtid void prfpAttributfs(JNIEnv* fnv, strudt stbt64* buf, jobjfdt bttrs) {
    (*fnv)->SftIntFifld(fnv, bttrs, bttrs_st_modf, (jint)buf->st_modf);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_ino, (jlong)buf->st_ino);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_dfv, (jlong)buf->st_dfv);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_rdfv, (jlong)buf->st_rdfv);
    (*fnv)->SftIntFifld(fnv, bttrs, bttrs_st_nlink, (jint)buf->st_nlink);
    (*fnv)->SftIntFifld(fnv, bttrs, bttrs_st_uid, (jint)buf->st_uid);
    (*fnv)->SftIntFifld(fnv, bttrs, bttrs_st_gid, (jint)buf->st_gid);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_sizf, (jlong)buf->st_sizf);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_btimf_sfd, (jlong)buf->st_btimf);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_mtimf_sfd, (jlong)buf->st_mtimf);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_dtimf_sfd, (jlong)buf->st_dtimf);

#ifdff _DARWIN_FEATURE_64_BIT_INODE
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_birthtimf_sfd, (jlong)buf->st_birthtimf);
#fndif

#if (_POSIX_C_SOURCE >= 200809L) || dffinfd(__solbris__)
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_btimf_nsfd, (jlong)buf->st_btim.tv_nsfd);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_mtimf_nsfd, (jlong)buf->st_mtim.tv_nsfd);
    (*fnv)->SftLongFifld(fnv, bttrs, bttrs_st_dtimf_nsfd, (jlong)buf->st_dtim.tv_nsfd);
#fndif
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_stbt0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jobjfdt bttrs)
{
    int frr;
    strudt stbt64 buf;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(stbt64(pbth, &buf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        prfpAttributfs(fnv, &buf, bttrs);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_lstbt0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jobjfdt bttrs)
{
    int frr;
    strudt stbt64 buf;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(lstbt64(pbth, &buf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        prfpAttributfs(fnv, &buf, bttrs);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fstbt(JNIEnv* fnv, jdlbss this, jint fd,
    jobjfdt bttrs)
{
    int frr;
    strudt stbt64 buf;

    RESTARTABLE(fstbt64((int)fd, &buf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        prfpAttributfs(fnv, &buf, bttrs);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fstbtbt0(JNIEnv* fnv, jdlbss this, jint dfd,
    jlong pbthAddrfss, jint flbg, jobjfdt bttrs)
{
    int frr;
    strudt stbt64 buf;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    if (my_fstbtbt64_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "should not rfbdh hfrf");
        rfturn;
    }
    RESTARTABLE((*my_fstbtbt64_fund)((int)dfd, pbth, &buf, (int)flbg), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        prfpAttributfs(fnv, &buf, bttrs);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_dhmod0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint modf)
{
    int frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(dhmod(pbth, (modf_t)modf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fdhmod(JNIEnv* fnv, jdlbss this, jint filfdfs,
    jint modf)
{
    int frr;

    RESTARTABLE(fdhmod((int)filfdfs, (modf_t)modf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}


JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_dhown0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint uid, jint gid)
{
    int frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(dhown(pbth, (uid_t)uid, (gid_t)gid), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_ldhown0(JNIEnv* fnv, jdlbss this, jlong pbthAddrfss, jint uid, jint gid)
{
    int frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(ldhown(pbth, (uid_t)uid, (gid_t)gid), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fdhown(JNIEnv* fnv, jdlbss this, jint filfdfs, jint uid, jint gid)
{
    int frr;

    RESTARTABLE(fdhown(filfdfs, (uid_t)uid, (gid_t)gid), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_utimfs0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jlong bddfssTimf, jlong modifidbtionTimf)
{
    int frr;
    strudt timfvbl timfs[2];
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    timfs[0].tv_sfd = bddfssTimf / 1000000;
    timfs[0].tv_usfd = bddfssTimf % 1000000;

    timfs[1].tv_sfd = modifidbtionTimf / 1000000;
    timfs[1].tv_usfd = modifidbtionTimf % 1000000;

    RESTARTABLE(utimfs(pbth, &timfs[0]), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_futimfs(JNIEnv* fnv, jdlbss this, jint filfdfs,
    jlong bddfssTimf, jlong modifidbtionTimf)
{
    strudt timfvbl timfs[2];
    int frr = 0;

    timfs[0].tv_sfd = bddfssTimf / 1000000;
    timfs[0].tv_usfd = bddfssTimf % 1000000;

    timfs[1].tv_sfd = modifidbtionTimf / 1000000;
    timfs[1].tv_usfd = modifidbtionTimf % 1000000;

#ifdff _ALLBSD_SOURCE
    RESTARTABLE(futimfs(filfdfs, &timfs[0]), frr);
#flsf
    if (my_futimfsbt_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "my_ftimfsbt_fund is NULL");
        rfturn;
    }
    RESTARTABLE((*my_futimfsbt_fund)(filfdfs, NULL, &timfs[0]), frr);
#fndif
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_opfndir0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss)
{
    DIR* dir;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    dir = opfndir(pbth);
    if (dir == NULL) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn ptr_to_jlong(dir);
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fdopfndir(JNIEnv* fnv, jdlbss this, int dfd) {
    DIR* dir;

    if (my_fdopfndir_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "should not rfbdh hfrf");
        rfturn (jlong)-1;
    }

    /* EINTR not listfd bs b possiblf frror */
    dir = (*my_fdopfndir_fund)((int)dfd);
    if (dir == NULL) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn ptr_to_jlong(dir);
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_dlosfdir(JNIEnv* fnv, jdlbss this, jlong dir) {
    int frr;
    DIR* dirp = jlong_to_ptr(dir);

    RESTARTABLE(dlosfdir(dirp), frr);
    if (frrno == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfbddir(JNIEnv* fnv, jdlbss this, jlong vbluf) {
    strudt dirfnt64* rfsult;
    strudt {
        strudt dirfnt64 buf;
        dhbr nbmf_fxtrb[PATH_MAX + 1 - sizfof rfsult->d_nbmf];
    } fntry;
    strudt dirfnt64* ptr = &fntry.buf;
    int rfs;
    DIR* dirp = jlong_to_ptr(vbluf);

    /* EINTR not listfd bs b possiblf frror */
    /* TDB: rffntrbnt vfrsion probbbly not rfquirfd hfrf */
    rfs = rfbddir64_r(dirp, ptr, &rfsult);

#ifdff _AIX
    /* On AIX, rfbddir_r() rfturns EBADF (i.f. '9') bnd sfts 'rfsult' to NULL for thf */
    /* dirfdtory strfbm fnd. Othfrwisf, 'frrno' will dontbin thf frror dodf. */
    if (rfs != 0) {
        rfs = (rfsult == NULL && rfs == EBADF) ? 0 : frrno;
    }
#fndif

    if (rfs != 0) {
        throwUnixExdfption(fnv, rfs);
        rfturn NULL;
    } flsf {
        if (rfsult == NULL) {
            rfturn NULL;
        } flsf {
            jsizf lfn = strlfn(ptr->d_nbmf);
            jbytfArrby bytfs = (*fnv)->NfwBytfArrby(fnv, lfn);
            if (bytfs != NULL) {
                (*fnv)->SftBytfArrbyRfgion(fnv, bytfs, 0, lfn, (jbytf*)(ptr->d_nbmf));
            }
            rfturn bytfs;
        }
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_mkdir0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint modf)
{
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (mkdir(pbth, (modf_t)modf) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rmdir0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss)
{
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (rmdir(pbth) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_link0(JNIEnv* fnv, jdlbss this,
    jlong fxistingAddrfss, jlong nfwAddrfss)
{
    int frr;
    donst dhbr* fxisting = (donst dhbr*)jlong_to_ptr(fxistingAddrfss);
    donst dhbr* nfwnbmf = (donst dhbr*)jlong_to_ptr(nfwAddrfss);

    RESTARTABLE(link(fxisting, nfwnbmf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}


JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_unlink0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss)
{
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (unlink(pbth) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_unlinkbt0(JNIEnv* fnv, jdlbss this, jint dfd,
                                               jlong pbthAddrfss, jint flbgs)
{
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    if (my_unlinkbt_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "should not rfbdh hfrf");
        rfturn;
    }

    /* EINTR not listfd bs b possiblf frror */
    if ((*my_unlinkbt_fund)((int)dfd, pbth, (int)flbgs) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfnbmf0(JNIEnv* fnv, jdlbss this,
    jlong fromAddrfss, jlong toAddrfss)
{
    donst dhbr* from = (donst dhbr*)jlong_to_ptr(fromAddrfss);
    donst dhbr* to = (donst dhbr*)jlong_to_ptr(toAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (rfnbmf(from, to) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfnbmfbt0(JNIEnv* fnv, jdlbss this,
    jint fromfd, jlong fromAddrfss, jint tofd, jlong toAddrfss)
{
    donst dhbr* from = (donst dhbr*)jlong_to_ptr(fromAddrfss);
    donst dhbr* to = (donst dhbr*)jlong_to_ptr(toAddrfss);

    if (my_rfnbmfbt_fund == NULL) {
        JNU_ThrowIntfrnblError(fnv, "should not rfbdh hfrf");
        rfturn;
    }

    /* EINTR not listfd bs b possiblf frror */
    if ((*my_rfnbmfbt_fund)((int)fromfd, from, (int)tofd, to) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_symlink0(JNIEnv* fnv, jdlbss this,
    jlong tbrgftAddrfss, jlong linkAddrfss)
{
    donst dhbr* tbrgft = (donst dhbr*)jlong_to_ptr(tbrgftAddrfss);
    donst dhbr* link = (donst dhbr*)jlong_to_ptr(linkAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (symlink(tbrgft, link) == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfbdlink0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss)
{
    jbytfArrby rfsult = NULL;
    dhbr tbrgft[PATH_MAX+1];
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    int n = rfbdlink(pbth, tbrgft, sizfof(tbrgft));
    if (n == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        jsizf lfn;
        if (n == sizfof(tbrgft)) {
            n--;
        }
        tbrgft[n] = '\0';
        lfn = (jsizf)strlfn(tbrgft);
        rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
        if (rfsult != NULL) {
            (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)tbrgft);
        }
    }
    rfturn rfsult;
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_rfblpbth0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss)
{
    jbytfArrby rfsult = NULL;
    dhbr rfsolvfd[PATH_MAX+1];
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    /* EINTR not listfd bs b possiblf frror */
    if (rfblpbth(pbth, rfsolvfd) == NULL) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
        jsizf lfn = (jsizf)strlfn(rfsolvfd);
        rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
        if (rfsult != NULL) {
            (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)rfsolvfd);
        }
    }
    rfturn rfsult;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_bddfss0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint bmodf)
{
    int frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(bddfss(pbth, (int)bmodf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_stbtvfs0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jobjfdt bttrs)
{
    int frr;
    strudt stbtvfs64 buf;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);


    RESTARTABLE(stbtvfs64(pbth, &buf), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    } flsf {
#ifdff _AIX
        /* AIX rfturns ULONG_MAX in buf.f_blodks for thf /prod filf systfm. */
        /* This is too big for b Jbvb signfd long bnd fools vbrious tfsts.  */
        if (buf.f_blodks == ULONG_MAX) {
            buf.f_blodks = 0;
        }
        /* Thf numbfr of frff or bvbilbblf blodks dbn nfvfr fxdffd thf totbl numbfr of blodks */
        if (buf.f_blodks == 0) {
            buf.f_bfrff = 0;
            buf.f_bbvbil = 0;
        }
#fndif
        (*fnv)->SftLongFifld(fnv, bttrs, bttrs_f_frsizf, long_to_jlong(buf.f_frsizf));
        (*fnv)->SftLongFifld(fnv, bttrs, bttrs_f_blodks, long_to_jlong(buf.f_blodks));
        (*fnv)->SftLongFifld(fnv, bttrs, bttrs_f_bfrff,  long_to_jlong(buf.f_bfrff));
        (*fnv)->SftLongFifld(fnv, bttrs, bttrs_f_bbvbil, long_to_jlong(buf.f_bbvbil));
    }
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_pbthdonf0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint nbmf)
{
    long frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    frr = pbthdonf(pbth, (int)nbmf);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn (jlong)frr;
}

JNIEXPORT jlong JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_fpbthdonf(JNIEnv* fnv, jdlbss this,
    jint fd, jint nbmf)
{
    long frr;

    frr = fpbthdonf((int)fd, (int)nbmf);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
    rfturn (jlong)frr;
}

JNIEXPORT void JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_mknod0(JNIEnv* fnv, jdlbss this,
    jlong pbthAddrfss, jint modf, jlong dfv)
{
    int frr;
    donst dhbr* pbth = (donst dhbr*)jlong_to_ptr(pbthAddrfss);

    RESTARTABLE(mknod(pbth, (modf_t)modf, (dfv_t)dfv), frr);
    if (frr == -1) {
        throwUnixExdfption(fnv, frrno);
    }
}

JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_gftpwuid(JNIEnv* fnv, jdlbss this, jint uid)
{
    jbytfArrby rfsult = NULL;
    int buflfn;
    dhbr* pwbuf;

    /* bllodbtf bufffr for pbssword rfdord */
    buflfn = (int)sysdonf(_SC_GETPW_R_SIZE_MAX);
    if (buflfn == -1)
        buflfn = ENT_BUF_SIZE;
    pwbuf = (dhbr*)mbllod(buflfn);
    if (pwbuf == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "nbtivf hfbp");
    } flsf {
        strudt pbsswd pwfnt;
        strudt pbsswd* p = NULL;
        int rfs = 0;

        frrno = 0;
        #ifdff __solbris__
            RESTARTABLE_RETURN_PTR(gftpwuid_r((uid_t)uid, &pwfnt, pwbuf, (sizf_t)buflfn), p);
        #flsf
            RESTARTABLE(gftpwuid_r((uid_t)uid, &pwfnt, pwbuf, (sizf_t)buflfn, &p), rfs);
        #fndif

        if (rfs != 0 || p == NULL || p->pw_nbmf == NULL || *(p->pw_nbmf) == '\0') {
            /* not found or frror */
            if (frrno == 0)
                frrno = ENOENT;
            throwUnixExdfption(fnv, frrno);
        } flsf {
            jsizf lfn = strlfn(p->pw_nbmf);
            rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
            if (rfsult != NULL) {
                (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)(p->pw_nbmf));
            }
        }
        frff(pwbuf);
    }

    rfturn rfsult;
}


JNIEXPORT jbytfArrby JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_gftgrgid(JNIEnv* fnv, jdlbss this, jint gid)
{
    jbytfArrby rfsult = NULL;
    int buflfn;
    int rftry;

    /* initibl sizf of bufffr for group rfdord */
    buflfn = (int)sysdonf(_SC_GETGR_R_SIZE_MAX);
    if (buflfn == -1)
        buflfn = ENT_BUF_SIZE;

    do {
        strudt group grfnt;
        strudt group* g = NULL;
        int rfs = 0;

        dhbr* grbuf = (dhbr*)mbllod(buflfn);
        if (grbuf == NULL) {
            JNU_ThrowOutOfMfmoryError(fnv, "nbtivf hfbp");
            rfturn NULL;
        }

        frrno = 0;
        #ifdff __solbris__
            RESTARTABLE_RETURN_PTR(gftgrgid_r((gid_t)gid, &grfnt, grbuf, (sizf_t)buflfn), g);
        #flsf
            RESTARTABLE(gftgrgid_r((gid_t)gid, &grfnt, grbuf, (sizf_t)buflfn, &g), rfs);
        #fndif

        rftry = 0;
        if (rfs != 0 || g == NULL || g->gr_nbmf == NULL || *(g->gr_nbmf) == '\0') {
            /* not found or frror */
            if (frrno == ERANGE) {
                /* insuffidifnt bufffr sizf so nffd lbrgfr bufffr */
                buflfn += ENT_BUF_SIZE;
                rftry = 1;
            } flsf {
                if (frrno == 0)
                    frrno = ENOENT;
                throwUnixExdfption(fnv, frrno);
            }
        } flsf {
            jsizf lfn = strlfn(g->gr_nbmf);
            rfsult = (*fnv)->NfwBytfArrby(fnv, lfn);
            if (rfsult != NULL) {
                (*fnv)->SftBytfArrbyRfgion(fnv, rfsult, 0, lfn, (jbytf*)(g->gr_nbmf));
            }
        }

        frff(grbuf);

    } whilf (rftry);

    rfturn rfsult;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_gftpwnbm0(JNIEnv* fnv, jdlbss this,
    jlong nbmfAddrfss)
{
    jint uid = -1;
    int buflfn;
    dhbr* pwbuf;

    /* bllodbtf bufffr for pbssword rfdord */
    buflfn = (int)sysdonf(_SC_GETPW_R_SIZE_MAX);
    if (buflfn == -1)
        buflfn = ENT_BUF_SIZE;
    pwbuf = (dhbr*)mbllod(buflfn);
    if (pwbuf == NULL) {
        JNU_ThrowOutOfMfmoryError(fnv, "nbtivf hfbp");
    } flsf {
        strudt pbsswd pwfnt;
        strudt pbsswd* p = NULL;
        int rfs = 0;
        donst dhbr* nbmf = (donst dhbr*)jlong_to_ptr(nbmfAddrfss);

        frrno = 0;
        #ifdff __solbris__
            RESTARTABLE_RETURN_PTR(gftpwnbm_r(nbmf, &pwfnt, pwbuf, (sizf_t)buflfn), p);
        #flsf
            RESTARTABLE(gftpwnbm_r(nbmf, &pwfnt, pwbuf, (sizf_t)buflfn, &p), rfs);
        #fndif

        if (rfs != 0 || p == NULL || p->pw_nbmf == NULL || *(p->pw_nbmf) == '\0') {
            /* not found or frror */
            if (frrno != 0 && frrno != ENOENT && frrno != ESRCH)
                throwUnixExdfption(fnv, frrno);
        } flsf {
            uid = p->pw_uid;
        }
        frff(pwbuf);
    }

    rfturn uid;
}

JNIEXPORT jint JNICALL
Jbvb_sun_nio_fs_UnixNbtivfDispbtdhfr_gftgrnbm0(JNIEnv* fnv, jdlbss this,
    jlong nbmfAddrfss)
{
    jint gid = -1;
    int buflfn, rftry;

    /* initibl sizf of bufffr for group rfdord */
    buflfn = (int)sysdonf(_SC_GETGR_R_SIZE_MAX);
    if (buflfn == -1)
        buflfn = ENT_BUF_SIZE;

    do {
        strudt group grfnt;
        strudt group* g = NULL;
        int rfs = 0;
        dhbr *grbuf;
        donst dhbr* nbmf = (donst dhbr*)jlong_to_ptr(nbmfAddrfss);

        grbuf = (dhbr*)mbllod(buflfn);
        if (grbuf == NULL) {
            JNU_ThrowOutOfMfmoryError(fnv, "nbtivf hfbp");
            rfturn -1;
        }

        frrno = 0;
        #ifdff __solbris__
            RESTARTABLE_RETURN_PTR(gftgrnbm_r(nbmf, &grfnt, grbuf, (sizf_t)buflfn), g);
        #flsf
            RESTARTABLE(gftgrnbm_r(nbmf, &grfnt, grbuf, (sizf_t)buflfn, &g), rfs);
        #fndif

        rftry = 0;
        if (rfs != 0 || g == NULL || g->gr_nbmf == NULL || *(g->gr_nbmf) == '\0') {
            /* not found or frror */
            if (frrno != 0 && frrno != ENOENT && frrno != ESRCH) {
                if (frrno == ERANGE) {
                    /* insuffidifnt bufffr sizf so nffd lbrgfr bufffr */
                    buflfn += ENT_BUF_SIZE;
                    rftry = 1;
                } flsf {
                    throwUnixExdfption(fnv, frrno);
                }
            }
        } flsf {
            gid = g->gr_gid;
        }

        frff(grbuf);

    } whilf (rftry);

    rfturn gid;
}
