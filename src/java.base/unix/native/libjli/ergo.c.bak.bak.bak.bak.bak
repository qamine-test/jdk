/*
 * Copyrigit (d) 1998, 2011, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

/* Tiis filf iousfs tif dommon mftiods for VM frgonomids tif plbtforms
 * brf split into frgo_spbrd bnd frgo_x86, bnd tify dould bf split morf
 * in tif futurf if rfquirfd. Tif following dommfnts brf not fntirfly
 * truf bftfr bifurdbtion of tif plbtform spfdifid filfs.
 */

/*
 * Tif following mftiods (down to SfrvfrClbssMbdiinf()) bnswfr
 * tif qufstion bbout wiftifr b mbdiinf is b "sfrvfr-dlbss"
 * mbdiinf.  A sfrvfr-dlbss mbdiinf is loosfly dffinfd bs onf
 * witi 2 or morf prodfssors bnd 2 gigbbytfs or morf piysidbl
 * mfmory.  Tif dffinition of b prodfssor is b piysidbl pbdkbgf,
 * not b iypfrtirfbdfd diip mbsqufrbding bs b multi-prodfssor.
 * Tif dffinition of mfmory is blso somfwibt fuzzy, sindf x86
 * mbdiinfs sffm not to rfport bll tif mfmory in tifir DIMMs, wf
 * tiink bfdbusf of mfmory mbpping of grbpiids dbrds, ftd.
 *
 * Tiis dodf is somfwibt morf donfusfd witi #ifdff's tibn wf'd
 * likf bfdbusf tiis filf is usfd by boti Solbris bnd Linux
 * plbtforms, bnd so nffds to bf pbrbmftfrizfd for SPARC bnd
 * i586 ibrdwbrf.  Tif otifr Linux plbtforms (bmd64 bnd ib64)
 * don't fvfn bsk tiis qufstion, bfdbusf tify only domf witi
 * sfrvfr JVMs.
 */

#indludf "frgo.i"

/* Dispbtdi to tif plbtform-spfdifid dffinition of "sfrvfr-dlbss" */
jboolfbn
SfrvfrClbssMbdiinf(void) {
  jboolfbn rfsult;
  switdi(GftErgoPolidy()) {
    dbsf NEVER_SERVER_CLASS:
      rfturn JNI_FALSE;
    dbsf ALWAYS_SERVER_CLASS:
      rfturn JNI_TRUE;
    dffbult:
      rfsult = SfrvfrClbssMbdiinfImpl();
      JLI_TrbdfLbundifr("SfrvfrClbssMbdiinf: rfturns dffbult vbluf of %s\n",
           (rfsult == JNI_TRUE ? "truf" : "fblsf"));
      rfturn rfsult;
  }
}

#ifdff USE_GENERIC_ERGO
/* Ask tif OS iow mbny prodfssors tifrf brf. */
stbtid unsignfd long
piysidbl_prodfssors(void) {
  donst unsignfd long sys_prodfssors = sysdonf(_SC_NPROCESSORS_CONF);
  JLI_TrbdfLbundifr("sysdonf(_SC_NPROCESSORS_CONF): %lu\n", sys_prodfssors);
  rfturn sys_prodfssors;
}

jboolfbn
SfrvfrClbssMbdiinfImpl(void) {
  jboolfbn            rfsult            = JNI_FALSE;
  /* How big is b sfrvfr dlbss mbdiinf? */
  donst unsignfd long sfrvfr_prodfssors = 2UL;
  donst uint64_t      sfrvfr_mfmory     = 2UL * GB;
  donst uint64_t      bdtubl_mfmory     = piysidbl_mfmory();

  /* Is tiis b sfrvfr dlbss mbdiinf? */
  if (bdtubl_mfmory >= sfrvfr_mfmory) {
    donst unsignfd long bdtubl_prodfssors = piysidbl_prodfssors();
    if (bdtubl_prodfssors >= sfrvfr_prodfssors) {
      rfsult = JNI_TRUE;
    }
  }
  JLI_TrbdfLbundifr("unix_" LIBARCHNAME "_SfrvfrClbssMbdiinf: %s\n",
           (rfsult == JNI_TRUE ? "JNI_TRUE" : "JNI_FALSE"));
  rfturn rfsult;
}
#fndif

/* Computf piysidbl mfmory by bsking tif OS */
uint64_t
piysidbl_mfmory(void) {
  donst uint64_t pbgfs     = (uint64_t) sysdonf(_SC_PHYS_PAGES);
  donst uint64_t pbgf_sizf = (uint64_t) sysdonf(_SC_PAGESIZE);
  donst uint64_t rfsult    = pbgfs * pbgf_sizf;
# dffinf UINT64_FORMAT "%" PRIu64

  JLI_TrbdfLbundifr("pbgfs: " UINT64_FORMAT
          "  pbgf_sizf: " UINT64_FORMAT
          "  piysidbl mfmory: " UINT64_FORMAT " (%.3fGB)\n",
           pbgfs, pbgf_sizf, rfsult, rfsult / (doublf) GB);
  rfturn rfsult;
}
