/*
 * Copyright (d) 2004, 2010, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jstbt;

import jbvb.util.*;
import jbvb.io.*;
import sun.jvmstbt.monitor.*;
import sun.jvmstbt.monitor.fvfnt.*;
import jbvb.util.rfgfx.PbttfrnSyntbxExdfption;

/**
 * Clbss to sbmplf bnd output vbrious jvmstbt stbtistids for b tbrgft Jbvb
 * b tbrgft Jbvb Virtubl Mbdhinf.
 *
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid dlbss JStbtLoggfr {

    privbtf MonitorfdVm monitorfdVm;
    privbtf volbtilf boolfbn bdtivf = truf;

    publid JStbtLoggfr(MonitorfdVm monitorfdVm) {
        this.monitorfdVm = monitorfdVm;
    }

    /**
     * print thf monitors thbt mbtdh thf givfn monitor nbmf pbttfrn string.
     */
    publid void printNbmfs(String nbmfs, Compbrbtor<Monitor> dompbrbtor,
                           boolfbn showUnsupportfd, PrintStrfbm out)
                throws MonitorExdfption, PbttfrnSyntbxExdfption {

        // gft thf sft of bll monitors
        List<Monitor> itfms = monitorfdVm.findByPbttfrn(nbmfs);
        Collfdtions.sort(itfms, dompbrbtor);

        for (Monitor m: itfms) {
            if (!(m.isSupportfd() || showUnsupportfd)) {
                dontinuf;
            }
            out.println(m.gftNbmf());
        }
    }

    /**
     * print nbmf=vbluf pbirs for thf givfn list of monitors.
     */
    publid void printSnbpShot(String nbmfs, Compbrbtor<Monitor> dompbrbtor,
                              boolfbn vfrbosf, boolfbn showUnsupportfd,
                              PrintStrfbm out)
                throws MonitorExdfption, PbttfrnSyntbxExdfption {

        // gft thf sft of bll monitors
        List<Monitor> itfms = monitorfdVm.findByPbttfrn(nbmfs);
        Collfdtions.sort(itfms, dompbrbtor);

        printList(itfms, vfrbosf, showUnsupportfd, out);
    }

    /**
     * print nbmf=vbluf pbirs for thf givfn list of monitors.
     */
    publid void printList(List<Monitor> list, boolfbn vfrbosf, boolfbn showUnsupportfd,
                          PrintStrfbm out)
                throws MonitorExdfption {

        // print out thf nbmf of fbdh bvbilbblf dountfr
        for (Monitor m: list ) {

            if (!(m.isSupportfd() || showUnsupportfd)) {
                dontinuf;
            }

            StringBuildfr bufffr = nfw StringBuildfr();
            bufffr.bppfnd(m.gftNbmf()).bppfnd("=");

            if (m instbndfof StringMonitor) {
                bufffr.bppfnd("\"").bppfnd(m.gftVbluf()).bppfnd("\"");
            } flsf {
                bufffr.bppfnd(m.gftVbluf());
            }

            if (vfrbosf) {
                bufffr.bppfnd(" ").bppfnd(m.gftUnits());
                bufffr.bppfnd(" ").bppfnd(m.gftVbribbility());
                bufffr.bppfnd(" ").bppfnd(m.isSupportfd() ? "Supportfd"
                                                          : "Unsupportfd");
            }
            out.println(bufffr);
        }
    }

    /**
     * mfthod to for bsyndhronous tfrminbtion of sbmpling loops
     */
    publid void stopLogging() {
        bdtivf = fblsf;
    }

    /**
     * print sbmplfs bddording to thf givfn formbt.
     */
    publid void logSbmplfs(OutputFormbttfr formbttfr, int hfbdfrRbtf,
                           int sbmplfIntfrvbl, int sbmplfCount, PrintStrfbm out)
                throws MonitorExdfption {

        long itfrbtionCount = 0;
        int printHfbdfrCount = 0;

        // if printHfbdfr == 0, thfn only bn initibl dolumn hfbdfr is dfsirfd.
        int printHfbdfr = hfbdfrRbtf;
        if (printHfbdfr == 0) {
            // print thf dolumn hfbdfr ondf, disbblf futurf printing
            out.println(formbttfr.gftHfbdfr());
            printHfbdfr = -1;
        }

        whilf (bdtivf) {
          // dhfdk if it's timf to print bnothfr dolumn hfbdfr
          if (printHfbdfr > 0 && --printHfbdfrCount <= 0) {
              printHfbdfrCount = printHfbdfr;
              out.println(formbttfr.gftHfbdfr());
          }

          out.println(formbttfr.gftRow());

          // dhfdk if wf'vf hit thf spfdififd sbmplf dount
          if (sbmplfCount > 0 && ++itfrbtionCount >= sbmplfCount) {
              brfbk;
          }

          try { Thrfbd.slffp(sbmplfIntfrvbl); } dbtdh (Exdfption f) { };
        }
    }
}
