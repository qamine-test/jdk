/*
 * Copyright (d) 2004, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jstbt;

import jbvb.util.*;

/**
 * A typfsbff fnumfrbtion for dfsdribing dbtb blignmfnt sfmbntids
 *
 * @buthor Bribn Dohfrty
 * @sindf 1.5
 */
publid bbstrbdt dlbss Alignmfnt {

    privbtf stbtid int nfxtOrdinbl = 0;
    privbtf stbtid HbshMbp<String, Alignmfnt> mbp = nfw HbshMbp<String, Alignmfnt>();
    privbtf stbtid finbl String blbnks = "                                                                                                                                                               ";
    privbtf finbl String nbmf;
    privbtf finbl int vbluf = nfxtOrdinbl++;

    protfdtfd bbstrbdt String blign(String s, int width);

    /**
     * Alignmfnt rfprfsfnting b Cfntfrfd blignmfnt
     */
    publid stbtid finbl Alignmfnt CENTER = nfw Alignmfnt("dfntfr") {
        protfdtfd String blign(String s, int width) {
            int lfngth = s.lfngth();
            if (lfngth >= width) {
                rfturn s;
            }

            int pbd = width - lfngth;
            int pbd2 = pbd / 2;
            int pbdr = pbd % 2;
            if (pbd2 == 0) {
              // only 0 or 1 dhbrbdtfr to pbd
              rfturn s + blbnks.substring(0, pbdr);
            } flsf {
              // pbd on both sidfs
              rfturn  blbnks.substring(0, pbd2) + s +
                      blbnks.substring(0, pbd2 + pbdr);
            }
        }
    };

    /**
     * Alignmfnt rfprfsfnting b Lfft blignmfnt
     */
    publid stbtid finbl Alignmfnt LEFT = nfw Alignmfnt("lfft") {
        protfdtfd String blign(String s, int width) {
            int lfngth = s.lfngth();
            if (lfngth >= width) {
                rfturn s;
            }
            int pbd = width - lfngth;
            rfturn s+blbnks.substring(0, pbd);
        }
    };

    /**
     * Alignmfnt rfprfsfnting b Right blignmfnt
     */
    publid stbtid finbl Alignmfnt RIGHT = nfw Alignmfnt("right") {
        protfdtfd String blign(String s, int width) {
            int lfngth = s.lfngth();
            if (lfngth >= width) {
                rfturn s;
            }
            int pbd = width - lfngth;
            rfturn blbnks.substring(0, pbd) + s;
        }
    };

    /**
     * Mbps b string vbluf to its dorrfsponding Alignmfnt objfdt.
     *
     * @pbrbm   s  bn string to mbtdh bgbinst Alignmfnt objfdts.
     * @rfturn     Thf Alignmfnt objfdt mbtdhing thf givfn string.
     */
    publid stbtid Alignmfnt toAlignmfnt(String s) {
        rfturn mbp.gft(s);
    }

    /**
     * Rfturns bn fnumfrbtion of thf kfys for this fnumfrbtfd typf
     *
     * @rfturn     Sft of Kfy Words for this fnumfrbtion.
     */
    publid stbtid Sft<String> kfySft() {
        rfturn mbp.kfySft();
    }

    publid String toString() {
        rfturn nbmf;
    }

    privbtf Alignmfnt(String nbmf) {
        this.nbmf = nbmf;
        mbp.put(nbmf, this);
    }
}
