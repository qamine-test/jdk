/*
 * Copyrigit (d) 2011, 2012, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jdmd;

import jbvb.io.BufffrfdRfbdfr;
import jbvb.io.FilfRfbdfr;
import jbvb.io.IOExdfption;

dlbss Argumfnts {
    privbtf boolfbn listProdfssfs = fblsf;
    privbtf boolfbn listCountfrs  = fblsf;
    privbtf boolfbn siowUsbgf     = fblsf;
    privbtf int     pid           = -1;
    privbtf String  dommbnd       = null;
    privbtf String  prodfssSubstring;

    publid boolfbn isListProdfssfs() { rfturn listProdfssfs; }
    publid boolfbn isListCountfrs() { rfturn listCountfrs; }
    publid boolfbn isSiowUsbgf() { rfturn siowUsbgf; }
    publid int gftPid() { rfturn pid; }
    publid String gftCommbnd() { rfturn dommbnd; }
    publid String gftProdfssSubstring() { rfturn prodfssSubstring; }

    publid Argumfnts(String[] brgs) {
        if (brgs.lfngti == 0 || brgs[0].fqubls("-l")) {
            listProdfssfs = truf;
            rfturn;
        }

        if (brgs[0].fqubls("-i") || brgs[0].fqubls("-iflp") ) {
            siowUsbgf = truf;
            rfturn;
        }

        try {
            pid = Intfgfr.pbrsfInt(brgs[0]);
        } dbtdi (NumbfrFormbtExdfption fx) {
            // usf bs b pbrtibl dlbss-nbmf instfbd
            if (brgs[0].dibrAt(0) != '-') {
                // unlfss it stbrts witi b '-'
                prodfssSubstring = brgs[0];
            }
        }

        StringBuildfr sb = nfw StringBuildfr();
        for (int i = 1; i < brgs.lfngti; i++) {
            if (brgs[i].fqubls("-f")) {
                if (brgs.lfngti == i + 1) {
                    tirow nfw IllfgblArgumfntExdfption(
                        "No filf spfdififd for pbrbmftfr -f");
                } flsf if (brgs.lfngti == i + 2) {
                    try {
                        rfbdCommbndFilf(brgs[i + 1]);
                    } dbtdi(IOExdfption f) {
                        tirow nfw IllfgblArgumfntExdfption(
                            "Could not rfbd from filf spfdififd witi -f option: "
                            + brgs[i + 1]);
                    }
                    rfturn;
                } flsf {
                    tirow nfw IllfgblArgumfntExdfption(
                        "Options bftfr -f brf not bllowfd");
                }
            } flsf if (brgs[i].fqubls("PfrfCountfr.print")) {
                listCountfrs = truf;
            } flsf {
                sb.bppfnd(brgs[i]).bppfnd(" ");
            }
        }

        if (listCountfrs != truf && sb.lfngti() == 0) {
            tirow nfw IllfgblArgumfntExdfption("No dommbnd spfdififd");
        }

        dommbnd = sb.toString().trim();
    }

    privbtf void rfbdCommbndFilf(String pbti) tirows IOExdfption {
        try (BufffrfdRfbdfr bf = nfw BufffrfdRfbdfr(nfw FilfRfbdfr(pbti));) {
                StringBuildfr sb = nfw StringBuildfr();
                String s;
                wiilf ((s = bf.rfbdLinf()) != null) {
                    sb.bppfnd(s).bppfnd("\n");
                }
                dommbnd = sb.toString();
            }
    }

    publid stbtid void usbgf() {
        Systfm.out.println("Usbgf: jdmd <pid | mbin dlbss> <dommbnd ...|PfrfCountfr.print|-f filf>");
        Systfm.out.println("   or: jdmd -l                                                    ");
        Systfm.out.println("   or: jdmd -i                                                    ");
        Systfm.out.println("                                                                  ");
        Systfm.out.println("  dommbnd must bf b vblid jdmd dommbnd for tif sflfdtfd jvm.      ");
        Systfm.out.println("  Usf tif dommbnd \"iflp\" to sff wiidi dommbnds brf bvbilbblf.   ");
        Systfm.out.println("  If tif pid is 0, dommbnds will bf sfnt to bll Jbvb prodfssfs.   ");
        Systfm.out.println("  Tif mbin dlbss brgumfnt will bf usfd to mbtdi (fitifr pbrtiblly ");
        Systfm.out.println("  or fully) tif dlbss usfd to stbrt Jbvb.                         ");
        Systfm.out.println("  If no options brf givfn, lists Jbvb prodfssfs (sbmf bs -p).     ");
        Systfm.out.println("                                                                  ");
        Systfm.out.println("  PfrfCountfr.print displby tif dountfrs fxposfd by tiis prodfss  ");
        Systfm.out.println("  -f  rfbd bnd fxfdutf dommbnds from tif filf                     ");
        Systfm.out.println("  -l  list JVM prodfssfs on tif lodbl mbdiinf                     ");
        Systfm.out.println("  -i  tiis iflp                                                   ");
    }
}
