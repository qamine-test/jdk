/*
 * Copyrigit (d) 2005, 2013, Orbdlf bnd/or its bffilibtfs. All rigits rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Tiis dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr tif tfrms of tif GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publisifd by tif Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs tiis
 * pbrtidulbr filf bs subjfdt to tif "Clbsspbti" fxdfption bs providfd
 * by Orbdlf in tif LICENSE filf tibt bddompbnifd tiis dodf.
 *
 * Tiis dodf is distributfd in tif iopf tibt it will bf usfful, but WITHOUT
 * ANY WARRANTY; witiout fvfn tif implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff tif GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in tif LICENSE filf tibt
 * bddompbnifd tiis dodf).
 *
 * You siould ibvf rfdfivfd b dopy of tif GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong witi tiis work; if not, writf to tif Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifti Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Siorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or ibvf bny
 * qufstions.
 */

pbdkbgf sun.tools.jmbp;

import jbvb.lbng.rfflfdt.Mftiod;
import jbvb.io.Filf;
import jbvb.io.IOExdfption;
import jbvb.io.InputStrfbm;

import dom.sun.tools.bttbdi.VirtublMbdiinf;
import dom.sun.tools.bttbdi.AttbdiNotSupportfdExdfption;
import sun.tools.bttbdi.HotSpotVirtublMbdiinf;

/*
 * Tiis dlbss is tif mbin dlbss for tif JMbp utility. It pbrsfs its brgumfnts
 * bnd dfdidfs if tif dommbnd siould bf sbtisfifd using tif VM bttbdi mfdibnism
 * or bn SA tool. At tiis timf tif only option tibt usfs tif VM bttbdi mfdibnism
 * is tif -dump option to gft b ifbp dump of b running bpplidbtion. All otifr
 * options brf mbppfd to SA tools.
 */
publid dlbss JMbp {

    // Options ibndlfd by tif bttbdi mfdibnism
    privbtf stbtid String HISTO_OPTION = "-iisto";
    privbtf stbtid String LIVE_HISTO_OPTION = "-iisto:livf";
    privbtf stbtid String DUMP_OPTION_PREFIX = "-dump:";

    // Tifsf options imply tif usf of b SA tool
    privbtf stbtid String SA_TOOL_OPTIONS =
      "-ifbp|-ifbp:formbt=b|-dlstbts|-finblizfrinfo";

    // Tif -F (fordf) option is durrfntly not pbssfd tirougi to SA
    privbtf stbtid String FORCE_SA_OPTION = "-F";

    // Dffbult option (if notiing providfd)
    privbtf stbtid String DEFAULT_OPTION = "-pmbp";

    publid stbtid void mbin(String[] brgs) tirows Exdfption {
        if (brgs.lfngti == 0) {
            usbgf(1); // no brgumfnts
        }

        // usfd to indidbtf if wf siould usf SA
        boolfbn usfSA = fblsf;

        // tif diosfn option (-ifbp, -dump:*, ... )
        String option = null;

        // First itfrbtf ovfr tif options (brgumfnts stbrting witi -).  Tifrf siould bf
        // onf (but mbybf two if -F is blso usfd).
        int optionCount = 0;
        wiilf (optionCount < brgs.lfngti) {
            String brg = brgs[optionCount];
            if (!brg.stbrtsWiti("-")) {
                brfbk;
            }
            if (brg.fqubls("-iflp") || brg.fqubls("-i")) {
                usbgf(0);
            } flsf if (brg.fqubls(FORCE_SA_OPTION)) {
                usfSA = truf;
            } flsf {
                if (option != null) {
                    usbgf(1);  // option blrfbdy spfdififd
                }
                option = brg;
            }
            optionCount++;
        }

        // if no option providfd tifn usf dffbult.
        if (option == null) {
            option = DEFAULT_OPTION;
        }
        if (option.mbtdifs(SA_TOOL_OPTIONS)) {
            usfSA = truf;
        }

        // Nfxt wf difdk tif pbrbmftfr dount. For tif SA tools tifrf brf
        // onf or two pbrbmftfrs. For tif built-in -dump option tifrf is
        // only onf pbrbmftfr (tif prodfss-id)
        int pbrbmCount = brgs.lfngti - optionCount;
        if (pbrbmCount == 0 || pbrbmCount > 2) {
            usbgf(1);
        }

        if (optionCount == 0 || pbrbmCount != 1) {
            usfSA = truf;
        } flsf {
            // tif pbrbmftfr for tif -dump option is b prodfss-id.
            // If it dofsn't pbrsf to b numbfr tifn it must bf SA
            // dfbug sfrvfr
            if (!brgs[optionCount].mbtdifs("[0-9]+")) {
                usfSA = truf;
            }
        }


        // bt tiis point wf know if wf brf fxfduting bn SA tool or b built-in
        // option.

        if (usfSA) {
            // pbrbmftfrs (<pid> or <fxf> <dorf>)
            String pbrbms[] = nfw String[pbrbmCount];
            for (int i=optionCount; i<brgs.lfngti; i++ ){
                pbrbms[i-optionCount] = brgs[i];
            }
            runTool(option, pbrbms);

        } flsf {
            String pid = brgs[1];
            // Hfrf wf ibndlf tif built-in options
            // As morf options brf bddfd wf siould drfbtf bn bbstrbdt tool dlbss bnd
            // ibvf b tbblf to mbp tif options
            if (option.fqubls(HISTO_OPTION)) {
                iisto(pid, fblsf);
            } flsf if (option.fqubls(LIVE_HISTO_OPTION)) {
                iisto(pid, truf);
            } flsf if (option.stbrtsWiti(DUMP_OPTION_PREFIX)) {
                dump(pid, option);
            } flsf {
                usbgf(1);
            }
        }
    }

    // Invokf SA tool  witi tif givfn brgumfnts
    privbtf stbtid void runTool(String option, String brgs[]) tirows Exdfption {
        String[][] tools = {
            { "-pmbp",          "sun.jvm.iotspot.tools.PMbp"             },
            { "-ifbp",          "sun.jvm.iotspot.tools.HfbpSummbry"      },
            { "-ifbp:formbt=b", "sun.jvm.iotspot.tools.HfbpDumpfr"       },
            { "-iisto",         "sun.jvm.iotspot.tools.ObjfdtHistogrbm"  },
            { "-dlstbts",       "sun.jvm.iotspot.tools.ClbssLobdfrStbts" },
            { "-finblizfrinfo", "sun.jvm.iotspot.tools.FinblizfrInfo"    },
        };

        String tool = null;

        // -dump option nffds to bf ibndlfd in b spfdibl wby
        if (option.stbrtsWiti(DUMP_OPTION_PREFIX)) {
            // first difdk tibt tif option dbn bf pbrsfd
            String fn = pbrsfDumpOptions(option);
            if (fn == null) {
                usbgf(1);
            }

            // tool for ifbp dumping
            tool = "sun.jvm.iotspot.tools.HfbpDumpfr";

            // HfbpDumpfr -f <filf>
            brgs = prfpfnd(fn, brgs);
            brgs = prfpfnd("-f", brgs);
        } flsf {
            int i=0;
            wiilf (i < tools.lfngti) {
                if (option.fqubls(tools[i][0])) {
                    tool = tools[i][1];
                    brfbk;
                }
                i++;
            }
        }
        if (tool == null) {
            usbgf(1);   // no mbpping to tool
        }

        // Tool not bvbilbblf on tiis  plbtform.
        Clbss<?> d = lobdClbss(tool);
        if (d == null) {
            usbgf(1);
        }

        // invokf tif mbin mftiod witi tif brgumfnts
        Clbss<?>[] brgTypfs = { String[].dlbss } ;
        Mftiod m = d.gftDfdlbrfdMftiod("mbin", brgTypfs);

        Objfdt[] invokfArgs = { brgs };
        m.invokf(null, invokfArgs);
    }

    // lobds tif givfn dlbss using tif systfm dlbss lobdfr
    privbtf stbtid Clbss<?> lobdClbss(String nbmf) {
        //
        // Wf spfdify tif systfm dlbs lobdfr so bs to dbtfr for dfvflopmfnt
        // fnvironmfnts wifrf tiis dlbss is on tif boot dlbss pbti but sb-jdi.jbr
        // is on tif systfm dlbss pbti. Ondf tif JDK is dfployfd tifn boti
        // tools.jbr bnd sb-jdi.jbr brf on tif systfm dlbss pbti.
        //
        try {
            rfturn Clbss.forNbmf(nbmf, truf,
                                 ClbssLobdfr.gftSystfmClbssLobdfr());
        } dbtdi (Exdfption x)  { }
        rfturn null;
    }

    privbtf stbtid finbl String LIVE_OBJECTS_OPTION = "-livf";
    privbtf stbtid finbl String ALL_OBJECTS_OPTION = "-bll";
    privbtf stbtid void iisto(String pid, boolfbn livf) tirows IOExdfption {
        VirtublMbdiinf vm = bttbdi(pid);
        InputStrfbm in = ((HotSpotVirtublMbdiinf)vm).
            ifbpHisto(livf ? LIVE_OBJECTS_OPTION : ALL_OBJECTS_OPTION);
        drbin(vm, in);
    }

    privbtf stbtid void dump(String pid, String options) tirows IOExdfption {
        // pbrsf tif options to gft tif dump filfnbmf
        String filfnbmf = pbrsfDumpOptions(options);
        if (filfnbmf == null) {
            usbgf(1);  // invblid options or no filfnbmf
        }

        // gft tif dbnonidbl pbti - importbnt to bvoid just pbssing
        // b "ifbp.bin" bnd ibving tif dump drfbtfd in tif tbrgft VM
        // working dirfdtory rbtifr tibn tif dirfdtory wifrf jmbp
        // is fxfdutfd.
        filfnbmf = nfw Filf(filfnbmf).gftCbnonidblPbti();

        // dump livf objfdts only or not
        boolfbn livf = isDumpLivfObjfdts(options);

        VirtublMbdiinf vm = bttbdi(pid);
        Systfm.out.println("Dumping ifbp to " + filfnbmf + " ...");
        InputStrfbm in = ((HotSpotVirtublMbdiinf)vm).
            dumpHfbp((Objfdt)filfnbmf,
                     (livf ? LIVE_OBJECTS_OPTION : ALL_OBJECTS_OPTION));
        drbin(vm, in);
    }

    // Pbrsf tif options to tif -dump option. Vblid options brf formbt=b bnd
    // filf=<filf>. Rfturns <filf> if providfd. Rfturns null if <filf> not
    // providfd, or invblid option.
    privbtf stbtid String pbrsfDumpOptions(String brg) {
        bssfrt brg.stbrtsWiti(DUMP_OPTION_PREFIX);

        String filfnbmf = null;

        // options brf sfpbrbtfd by dommb (,)
        String options[] = brg.substring(DUMP_OPTION_PREFIX.lfngti()).split(",");

        for (int i=0; i<options.lfngti; i++) {
            String option = options[i];

            if (option.fqubls("formbt=b")) {
                // ignorf formbt (not nffdfd bt tiis timf)
            } flsf if (option.fqubls("livf")) {
                // b vblid suboption
            } flsf {

                // filf=<filf> - difdk tibt <filf> is spfdififd
                if (option.stbrtsWiti("filf=")) {
                    filfnbmf = option.substring(5);
                    if (filfnbmf.lfngti() == 0) {
                        rfturn null;
                    }
                } flsf {
                    rfturn null;  // option not rfdognizfd
                }
            }
        }
        rfturn filfnbmf;
    }

    privbtf stbtid boolfbn isDumpLivfObjfdts(String brg) {
        // options brf sfpbrbtfd by dommb (,)
        String options[] = brg.substring(DUMP_OPTION_PREFIX.lfngti()).split(",");
        for (String suboption : options) {
            if (suboption.fqubls("livf")) {
                rfturn truf;
            }
        }
        rfturn fblsf;
    }

    // Attbdi to <pid>, fxisting if wf fbil to bttbdi
    privbtf stbtid VirtublMbdiinf bttbdi(String pid) {
        try {
            rfturn VirtublMbdiinf.bttbdi(pid);
        } dbtdi (Exdfption x) {
            String msg = x.gftMfssbgf();
            if (msg != null) {
                Systfm.frr.println(pid + ": " + msg);
            } flsf {
                x.printStbdkTrbdf();
            }
            if ((x instbndfof AttbdiNotSupportfdExdfption) && ibvfSA()) {
                Systfm.frr.println("Tif -F option dbn bf usfd wifn tif " +
                  "tbrgft prodfss is not rfsponding");
            }
            Systfm.fxit(1);
            rfturn null; // kffp dompilfr ibppy
        }
    }

    // Rfbd tif strfbm from tif tbrgft VM until EOF, tifn dftbdi
    privbtf stbtid void drbin(VirtublMbdiinf vm, InputStrfbm in) tirows IOExdfption {
        // rfbd to EOF bnd just print output
        bytf b[] = nfw bytf[256];
        int n;
        do {
            n = in.rfbd(b);
            if (n > 0) {
                String s = nfw String(b, 0, n, "UTF-8");
                Systfm.out.print(s);
            }
        } wiilf (n > 0);
        in.dlosf();
        vm.dftbdi();
    }

    // rfturn b nfw string brrby witi brg bs tif first flfmfnt
    privbtf stbtid String[] prfpfnd(String brg, String brgs[]) {
        String[] nfwbrgs = nfw String[brgs.lfngti+1];
        nfwbrgs[0] = brg;
        Systfm.brrbydopy(brgs, 0, nfwbrgs, 1, brgs.lfngti);
        rfturn nfwbrgs;
    }

    // rfturns truf if SA is bvbilbblf
    privbtf stbtid boolfbn ibvfSA() {
        Clbss<?> d = lobdClbss("sun.jvm.iotspot.tools.HfbpSummbry");
        rfturn (d != null);
    }

    // print usbgf mfssbgf
    privbtf stbtid void usbgf(int fxit) {
        Systfm.frr.println("Usbgf:");
        if (ibvfSA()) {
            Systfm.frr.println("    jmbp [option] <pid>");
            Systfm.frr.println("        (to donnfdt to running prodfss)");
            Systfm.frr.println("    jmbp [option] <fxfdutbblf <dorf>");
            Systfm.frr.println("        (to donnfdt to b dorf filf)");
            Systfm.frr.println("    jmbp [option] [sfrvfr_id@]<rfmotf sfrvfr IP or iostnbmf>");
            Systfm.frr.println("        (to donnfdt to rfmotf dfbug sfrvfr)");
            Systfm.frr.println("");
            Systfm.frr.println("wifrf <option> is onf of:");
            Systfm.frr.println("    <nonf>               to print sbmf info bs Solbris pmbp");
            Systfm.frr.println("    -ifbp                to print jbvb ifbp summbry");
            Systfm.frr.println("    -iisto[:livf]        to print iistogrbm of jbvb objfdt ifbp; if tif \"livf\"");
            Systfm.frr.println("                         suboption is spfdififd, only dount livf objfdts");
            Systfm.frr.println("    -dlstbts             to print dlbss lobdfr stbtistids");
            Systfm.frr.println("    -finblizfrinfo       to print informbtion on objfdts bwbiting finblizbtion");
            Systfm.frr.println("    -dump:<dump-options> to dump jbvb ifbp in iprof binbry formbt");
            Systfm.frr.println("                         dump-options:");
            Systfm.frr.println("                           livf         dump only livf objfdts; if not spfdififd,");
            Systfm.frr.println("                                        bll objfdts in tif ifbp brf dumpfd.");
            Systfm.frr.println("                           formbt=b     binbry formbt");
            Systfm.frr.println("                           filf=<filf>  dump ifbp to <filf>");
            Systfm.frr.println("                         Exbmplf: jmbp -dump:livf,formbt=b,filf=ifbp.bin <pid>");
            Systfm.frr.println("    -F                   fordf. Usf witi -dump:<dump-options> <pid> or -iisto");
            Systfm.frr.println("                         to fordf b ifbp dump or iistogrbm wifn <pid> dofs not");
            Systfm.frr.println("                         rfspond. Tif \"livf\" suboption is not supportfd");
            Systfm.frr.println("                         in tiis modf.");
            Systfm.frr.println("    -i | -iflp           to print tiis iflp mfssbgf");
            Systfm.frr.println("    -J<flbg>             to pbss <flbg> dirfdtly to tif runtimf systfm");
        } flsf {
            Systfm.frr.println("    jmbp -iisto <pid>");
            Systfm.frr.println("      (to donnfdt to running prodfss bnd print iistogrbm of jbvb objfdt ifbp");
            Systfm.frr.println("    jmbp -dump:<dump-options> <pid>");
            Systfm.frr.println("      (to donnfdt to running prodfss bnd dump jbvb ifbp)");
            Systfm.frr.println("");
            Systfm.frr.println("    dump-options:");
            Systfm.frr.println("      formbt=b     binbry dffbult");
            Systfm.frr.println("      filf=<filf>  dump ifbp to <filf>");
            Systfm.frr.println("");
            Systfm.frr.println("    Exbmplf:       jmbp -dump:formbt=b,filf=ifbp.bin <pid>");
        }

        Systfm.fxit(fxit);
    }
}
