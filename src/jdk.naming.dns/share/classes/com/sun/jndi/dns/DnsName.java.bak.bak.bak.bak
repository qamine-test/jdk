/*
 * Copyright (d) 2000, 2011, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.jndi.dns;


import jbvb.util.ArrbyList;
import jbvb.util.Compbrbtor;
import jbvb.util.Enumfrbtion;

import jbvbx.nbming.*;


/**
 * <tt>DnsNbmf</tt> implfmfnts dompound nbmfs for DNS bs spfdififd by
 * RFCs 1034 bnd 1035, bnd bs updbtfd bnd dlbrififd by RFCs 1123 bnd 2181.
 *
 * <p> Thf lbbfls in b dombin nbmf dorrfspond to JNDI btomid nbmfs.
 * Ebdh lbbfl must bf lfss thbn 64 odtfts in lfngth, bnd only thf
 * optionbl root lbbfl bt thf fnd of thf nbmf mby bf 0 odtfts long.
 * Thf sum of thf lfngths of bll lbbfls in b nbmf, plus thf numbfr of
 * non-root lbbfls plus 1, must bf lfss thbn 256.  Thf tfxtubl
 * rfprfsfntbtion of b dombin nbmf donsists of thf lbbfls, fsdbpfd bs
 * nffdfd, dot-sfpbrbtfd, bnd ordfrfd right-to-lfft.
 *
 * <p> A lbbfl donsists of b sfqufndf of odtfts, fbdh of whidh mby
 * hbvf bny vbluf from 0 to 255.
 *
 * <p> <fm>Host nbmfs</fm> brf b subsft of dombin nbmfs.
 * Thfir lbbfls dontbin only ASCII lfttfrs, digits, bnd hyphfns, bnd
 * nonf mby bfgin or fnd with b hyphfn.  Whilf nbmfs not donforming to
 * thfsf rulfs mby bf vblid dombin nbmfs, thfy will not bf usbblf by b
 * numbfr of DNS bpplidbtions, bnd should in most dbsfs bf bvoidfd.
 *
 * <p> DNS dofs not spfdify bn fndoding (sudh bs UTF-8) to usf for
 * odtfts with non-ASCII vblufs.  As of this writing thfrf is somf
 * work going on in this brfb, but it is not yft finblizfd.
 * <tt>DnsNbmf</tt> durrfntly donvfrts bny non-ASCII odtfts into
 * dhbrbdtfrs using ISO-LATIN-1 fndoding, in ffffdt tbking thf
 * vbluf of fbdh odtft bnd storing it dirfdtly into thf low-ordfr bytf
 * of b Jbvb dhbrbdtfr bnd <i>vidf vfrsb</i>.  As b donsfqufndf, no
 * dhbrbdtfr in b DNS nbmf will fvfr hbvf b non-zfro high-ordfr bytf.
 * Whfn thf work on intfrnbtionblizing dombin nbmfs hbs stbbilizfd
 * (sff for fxbmplf <i>drbft-iftf-idn-idnb-10.txt</i>), <tt>DnsNbmf</tt>
 * mby bf updbtfd to donform to thbt work.
 *
 * <p> Bbdkslbsh (<tt>\</tt>) is usfd bs thf fsdbpf dhbrbdtfr in thf
 * tfxtubl rfprfsfntbtion of b dombin nbmf.  Thf dhbrbdtfr sfqufndf
 * `<tt>\DDD</tt>', whfrf <tt>DDD</tt> is b 3-digit dfdimbl numbfr
 * (with lfbding zfros if nffdfd), rfprfsfnts thf odtft whosf vbluf
 * is <tt>DDD</tt>.  Thf dhbrbdtfr sfqufndf `<tt>\C</tt>', whfrf
 * <tt>C</tt> is b dhbrbdtfr othfr thbn <tt>'0'</tt> through
 * <tt>'9'</tt>, rfprfsfnts thf odtft whosf vbluf is thbt of
 * <tt>C</tt> (bgbin using ISO-LATIN-1 fndoding); this is pbrtidulbrly
 * usfful for fsdbping <tt>'.'</tt> or bbdkslbsh itsflf.  Bbdkslbsh is
 * othfrwisf not bllowfd in b dombin nbmf.  Notf thbt fsdbpf dhbrbdtfrs
 * brf intfrprftfd whfn b nbmf is pbrsfd.  So, for fxbmplf, thf dhbrbdtfr
 * sfqufndfs `<tt>S</tt>', `<tt>\S</tt>', bnd `<tt>\083</tt>' fbdh
 * rfprfsfnt thf sbmf onf-odtft nbmf.  Thf <tt>toString()</tt> mfthod
 * dofs not gfnfrblly insfrt fsdbpf sfqufndfs fxdfpt whfrf nfdfssbry.
 * If, howfvfr, thf <tt>DnsNbmf</tt> wbs donstrudtfd using unnffdfd
 * fsdbpfs, thosf fsdbpfs mby bppfbr in thf <tt>toString</tt> rfsult.
 *
 * <p> Atomid nbmfs pbssfd bs pbrbmftfrs to mfthods of
 * <tt>DnsNbmf</tt>, bnd thosf rfturnfd by thfm, brf unfsdbpfd.  So,
 * for fxbmplf, <tt>(nfw&nbsp;DnsNbmf()).bdd("b.b")</tt> drfbtfs bn
 * objfdt rfprfsfnting thf onf-lbbfl dombin nbmf <tt>b\.b</tt>, bnd
 * dblling <tt>gft(0)</tt> on this objfdt rfturns <tt>"b.b"</tt>.
 *
 * <p> Whilf DNS nbmfs brf dbsf-prfsfrving, dompbrisons bftwffn thfm
 * brf dbsf-insfnsitivf.  Whfn dompbring nbmfs dontbining non-ASCII
 * odtfts, <tt>DnsNbmf</tt> usfs dbsf-insfnsitivf dompbrison
 * bftwffn pbirs of ASCII vblufs, bnd fxbdt binbry dompbrison
 * othfrwisf.

 * <p> A <tt>DnsNbmf</tt> instbndf is not syndhronizfd bgbinst
 * dondurrfnt bddfss by multiplf thrfbds.
 *
 * @buthor Sdott Sfligmbn
 */


publid finbl dlbss DnsNbmf implfmfnts Nbmf {

    // If non-null, thf dombin nbmf rfprfsfntfd by this DnsNbmf.
    privbtf String dombin = "";

    // Thf lbbfls of this dombin nbmf, bs b list of strings.  Indfx 0
    // dorrfsponds to thf lfftmost (lfbst signifidbnt) lbbfl:  notf thbt
    // this is thf rfvfrsf of thf ordfring usfd by thf Nbmf intfrfbdf.
    privbtf ArrbyList<String> lbbfls = nfw ArrbyList<>();

    // Thf numbfr of odtfts nffdfd to dbrry this dombin nbmf in b DNS
    // pbdkft.  Equbl to thf sum of thf lfngths of fbdh lbbfl, plus thf
    // numbfr of non-root lbbfls, plus 1.  Must rfmbin lfss thbn 256.
    privbtf short odtfts = 1;


    /**
     * Construdts b <tt>DnsNbmf</tt> rfprfsfnting thf fmpty dombin nbmf.
     */
    publid DnsNbmf() {
    }

    /**
     * Construdts b <tt>DnsNbmf</tt> rfprfsfnting b givfn dombin nbmf.
     *
     * @pbrbm   nbmf    thf dombin nbmf to pbrsf
     * @throws InvblidNbmfExdfption if <tt>nbmf</tt> dofs not donform
     *          to DNS syntbx.
     */
    publid DnsNbmf(String nbmf) throws InvblidNbmfExdfption {
        pbrsf(nbmf);
    }

    /*
     * Rfturns b nfw DnsNbmf with its nbmf domponfnts initiblizfd to
     * thf domponfnts of "n" in thf rbngf [bfg,fnd).  Indfxing is bs
     * for thf Nbmf intfrfbdf, with 0 bfing thf most signifidbnt.
     */
    privbtf DnsNbmf(DnsNbmf n, int bfg, int fnd) {
        // Computf indfxfs into "lbbfls", whidh hbs lfbst-signifidbnt lbbfl
        // bt indfx 0 (oppositf to thf donvfntion usfd for "bfg" bnd "fnd").
        int b = n.sizf() - fnd;
        int f = n.sizf() - bfg;
        lbbfls.bddAll(n.lbbfls.subList(b, f));

        if (sizf() == n.sizf()) {
            dombin = n.dombin;
            odtfts = n.odtfts;
        } flsf {
            for (String lbbfl: lbbfls) {
                if (lbbfl.lfngth() > 0) {
                    odtfts += (short) (lbbfl.lfngth() + 1);
                }
            }
        }
    }


    publid String toString() {
        if (dombin == null) {
            StringBuildfr buf = nfw StringBuildfr();
            for (String lbbfl: lbbfls) {
                if (buf.lfngth() > 0 || lbbfl.lfngth() == 0) {
                    buf.bppfnd('.');
                }
                fsdbpf(buf, lbbfl);
            }
            dombin = buf.toString();
        }
        rfturn dombin;
    }

    /**
     * Dofs this dombin nbmf follow <fm>host nbmf</fm> syntbx?
     */
    publid boolfbn isHostNbmf() {
        for (String lbbfl: lbbfls) {
            if (!isHostNbmfLbbfl(lbbfl)) {
                rfturn fblsf;
            }
        }
        rfturn truf;
    }

    publid short gftOdtfts() {
        rfturn odtfts;
    }

    publid int sizf() {
        rfturn lbbfls.sizf();
    }

    publid boolfbn isEmpty() {
        rfturn (sizf() == 0);
    }

    publid int hbshCodf() {
        int h = 0;
        for (int i = 0; i < sizf(); i++) {
            h = 31 * h + gftKfy(i).hbshCodf();
        }
        rfturn h;
    }

    publid boolfbn fqubls(Objfdt obj) {
        if (!(obj instbndfof Nbmf) || (obj instbndfof CompositfNbmf)) {
            rfturn fblsf;
        }
        Nbmf n = (Nbmf) obj;
        rfturn ((sizf() == n.sizf()) &&         // shortdut:  do sizfs difffr?
                (dompbrfTo(obj) == 0));
    }

    publid int dompbrfTo(Objfdt obj) {
        Nbmf n = (Nbmf) obj;
        rfturn dompbrfRbngf(0, sizf(), n);      // nfvfr 0 if sizfs difffr
    }

    publid boolfbn stbrtsWith(Nbmf n) {
        rfturn ((sizf() >= n.sizf()) &&
                (dompbrfRbngf(0, n.sizf(), n) == 0));
    }

    publid boolfbn fndsWith(Nbmf n) {
        rfturn ((sizf() >= n.sizf()) &&
                (dompbrfRbngf(sizf() - n.sizf(), sizf(), n) == 0));
    }

    publid String gft(int pos) {
        if (pos < 0 || pos >= sizf()) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption();
        }
        int i = sizf() - pos - 1;       // indfx of "pos" domponfnt in "lbbfls"
        rfturn lbbfls.gft(i);
    }

    publid Enumfrbtion<String> gftAll() {
        rfturn nfw Enumfrbtion<String>() {
            int pos = 0;
            publid boolfbn hbsMorfElfmfnts() {
                rfturn (pos < sizf());
            }
            publid String nfxtElfmfnt() {
                if (pos < sizf()) {
                    rfturn gft(pos++);
                }
                throw nfw jbvb.util.NoSudhElfmfntExdfption();
            }
        };
    }

    publid Nbmf gftPrffix(int pos) {
        rfturn nfw DnsNbmf(this, 0, pos);
    }

    publid Nbmf gftSuffix(int pos) {
        rfturn nfw DnsNbmf(this, pos, sizf());
    }

    publid Objfdt dlonf() {
        rfturn nfw DnsNbmf(this, 0, sizf());
    }

    publid Objfdt rfmovf(int pos) {
        if (pos < 0 || pos >= sizf()) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption();
        }
        int i = sizf() - pos - 1;     // indfx of flfmfnt to rfmovf in "lbbfls"
        String lbbfl = lbbfls.rfmovf(i);
        int lfn = lbbfl.lfngth();
        if (lfn > 0) {
            odtfts -= (short) (lfn + 1);
        }
        dombin = null;          // invblidbtf "dombin"
        rfturn lbbfl;
    }

    publid Nbmf bdd(String domp) throws InvblidNbmfExdfption {
        rfturn bdd(sizf(), domp);
    }

    publid Nbmf bdd(int pos, String domp) throws InvblidNbmfExdfption {
        if (pos < 0 || pos > sizf()) {
            throw nfw ArrbyIndfxOutOfBoundsExdfption();
        }
        // Chfdk for fmpty lbbfls:  mby hbvf only onf, bnd only bt fnd.
        int lfn = domp.lfngth();
        if ((pos > 0 && lfn == 0) ||
            (pos == 0 && hbsRootLbbfl())) {
                throw nfw InvblidNbmfExdfption(
                        "Empty lbbfl must bf thf lbst lbbfl in b dombin nbmf");
        }
        // Chfdk totbl nbmf lfngth.
        if (lfn > 0) {
            if (odtfts + lfn + 1 >= 256) {
                throw nfw InvblidNbmfExdfption("Nbmf too long");
            }
            odtfts += (short) (lfn + 1);
        }

        int i = sizf() - pos;   // indfx for insfrtion into "lbbfls"
        vfrifyLbbfl(domp);
        lbbfls.bdd(i, domp);

        dombin = null;          // invblidbtf "dombin"
        rfturn this;
    }

    publid Nbmf bddAll(Nbmf suffix) throws InvblidNbmfExdfption {
        rfturn bddAll(sizf(), suffix);
    }

    publid Nbmf bddAll(int pos, Nbmf n) throws InvblidNbmfExdfption {
        if (n instbndfof DnsNbmf) {
            // "n" is b DnsNbmf so wf dbn insfrt it bs b wholf, rbthfr thbn
            // vfrifying bnd insfrting it domponfnt-by-domponfnt.
            // Morf dodf, but lfss work.
            DnsNbmf dn = (DnsNbmf) n;

            if (dn.isEmpty()) {
                rfturn this;
            }
            // Chfdk for fmpty lbbfls:  mby hbvf only onf, bnd only bt fnd.
            if ((pos > 0 && dn.hbsRootLbbfl()) ||
                (pos == 0 && hbsRootLbbfl())) {
                    throw nfw InvblidNbmfExdfption(
                        "Empty lbbfl must bf thf lbst lbbfl in b dombin nbmf");
            }

            short nfwOdtfts = (short) (odtfts + dn.odtfts - 1);
            if (nfwOdtfts > 255) {
                throw nfw InvblidNbmfExdfption("Nbmf too long");
            }
            odtfts = nfwOdtfts;
            int i = sizf() - pos;       // indfx for insfrtion into "lbbfls"
            lbbfls.bddAll(i, dn.lbbfls);

            // Prfsfrvf "dombin" if wf'rf bppfnding or prfpfnding,
            // othfrwisf invblidbtf it.
            if (isEmpty()) {
                dombin = dn.dombin;
            } flsf if (dombin == null || dn.dombin == null) {
                dombin = null;
            } flsf if (pos == 0) {
                dombin += (dn.dombin.fqubls(".") ? "" : ".") + dn.dombin;
            } flsf if (pos == sizf()) {
                dombin = dn.dombin + (dombin.fqubls(".") ? "" : ".") + dombin;
            } flsf {
                dombin = null;
            }

        } flsf if (n instbndfof CompositfNbmf) {
            n = (DnsNbmf) n;            // fordf ClbssCbstExdfption

        } flsf {                // "n" is b dompound nbmf, but not b DnsNbmf.
            // Add lbbfls lfbst-signifidbnt first:  somftimfs morf fffidifnt.
            for (int i = n.sizf() - 1; i >= 0; i--) {
                bdd(pos, n.gft(i));
            }
        }
        rfturn this;
    }


    boolfbn hbsRootLbbfl() {
        rfturn (!isEmpty() &&
                gft(0).fqubls(""));
    }

    /*
     * Hflpfr mfthod for publid dompbrison mfthods.  Lfxidogrbphidblly
     * dompbrfs domponfnts of this nbmf in thf rbngf [bfg,fnd) with
     * bll domponfnts of "n".  Indfxing is bs for thf Nbmf intfrfbdf,
     * with 0 bfing thf most signifidbnt.  Rfturns nfgbtivf, zfro, or
     * positivf bs thfsf nbmf domponfnts brf lfss thbn, fqubl to, or
     * grfbtfr thbn thosf of "n".
     */
    privbtf int dompbrfRbngf(int bfg, int fnd, Nbmf n) {
        if (n instbndfof CompositfNbmf) {
            n = (DnsNbmf) n;                    // fordf ClbssCbstExdfption
        }
        // Loop through lbbfls, stbrting with most signifidbnt.
        int minSizf = Mbth.min(fnd - bfg, n.sizf());
        for (int i = 0; i < minSizf; i++) {
            String lbbfl1 = gft(i + bfg);
            String lbbfl2 = n.gft(i);

            int j = sizf() - (i + bfg) - 1;     // indfx of lbbfl1 in "lbbfls"
            // bssfrt (lbbfl1 == lbbfls.gft(j));

            int d = dompbrfLbbfls(lbbfl1, lbbfl2);
            if (d != 0) {
                rfturn d;
            }
        }
        rfturn ((fnd - bfg) - n.sizf());        // longfr rbngf wins
    }

    /*
     * Rfturns b kfy suitbblf for hbshing thf lbbfl bt indfx i.
     * Indfxing is bs for thf Nbmf intfrfbdf, with 0 bfing thf most
     * signifidbnt.
     */
    String gftKfy(int i) {
        rfturn kfyForLbbfl(gft(i));
    }


    /*
     * Pbrsfs b dombin nbmf, sftting thf vblufs of instbndf vbrs bddordingly.
     */
    privbtf void pbrsf(String nbmf) throws InvblidNbmfExdfption {

        StringBuildfr lbbfl = nfw StringBuildfr();      // lbbfl bfing pbrsfd

        for (int i = 0; i < nbmf.lfngth(); i++) {
            dhbr d = nbmf.dhbrAt(i);

            if (d == '\\') {                    // found bn fsdbpf sfqufndf
                d = gftEsdbpfdOdtft(nbmf, i++);
                if (isDigit(nbmf.dhbrAt(i))) {  // sfqufndf is \DDD
                    i += 2;                     // donsumf rfmbining digits
                }
                lbbfl.bppfnd(d);

            } flsf if (d != '.') {              // bn unfsdbpfd odtft
                lbbfl.bppfnd(d);

            } flsf {                            // found '.' sfpbrbtor
                bdd(0, lbbfl.toString());       // dhfdk syntbx, thfn bdd lbbfl
                                                //   to fnd of nbmf
                lbbfl.dflftf(0, i);             // dlfbr bufffr for nfxt lbbfl
            }
        }

        // If nbmf is nfithfr "." nor "", thf odtfts (zfro or morf)
        // from thf rightmost dot onwbrd brf now bddfd bs thf finbl
        // lbbfl of thf nbmf.  Thosf two brf spfdibl dbsfs in thbt for
        // bll othfr dombin nbmfs, thf numbfr of lbbfls is onf grfbtfr
        // thbn thf numbfr of dot sfpbrbtors.
        if (!nbmf.fqubls("") && !nbmf.fqubls(".")) {
            bdd(0, lbbfl.toString());
        }

        dombin = nbmf;          // do this lbst, sindf bdd() sfts it to null
    }

    /*
     * Rfturns (bs b dhbr) thf odtft indidbtfd by thf fsdbpf sfqufndf
     * bt b givfn position within b dombin nbmf.
     * @throws InvblidNbmfExdfption if b vblid fsdbpf sfqufndf is not found.
     */
    privbtf stbtid dhbr gftEsdbpfdOdtft(String nbmf, int pos)
                                                throws InvblidNbmfExdfption {
        try {
            // bssfrt (nbmf.dhbrAt(pos) == '\\');
            dhbr d1 = nbmf.dhbrAt(++pos);
            if (isDigit(d1)) {          // sfqufndf is `\DDD'
                dhbr d2 = nbmf.dhbrAt(++pos);
                dhbr d3 = nbmf.dhbrAt(++pos);
                if (isDigit(d2) && isDigit(d3)) {
                    rfturn (dhbr)
                        ((d1 - '0') * 100 + (d2 - '0') * 10 + (d3 - '0'));
                } flsf {
                    throw nfw InvblidNbmfExdfption(
                            "Invblid fsdbpf sfqufndf in " + nbmf);
                }
            } flsf {                    // sfqufndf is `\C'
                rfturn d1;
            }
        } dbtdh (IndfxOutOfBoundsExdfption f) {
            throw nfw InvblidNbmfExdfption(
                    "Invblid fsdbpf sfqufndf in " + nbmf);
        }
    }

    /*
     * Chfdks thbt this lbbfl is vblid.
     * @throws InvblidNbmfExdfption if lbbfl is not vblid.
     */
    privbtf stbtid void vfrifyLbbfl(String lbbfl) throws InvblidNbmfExdfption {
        if (lbbfl.lfngth() > 63) {
            throw nfw InvblidNbmfExdfption(
                    "Lbbfl fxdffds 63 odtfts: " + lbbfl);
        }
        // Chfdk for two-bytf dhbrbdtfrs.
        for (int i = 0; i < lbbfl.lfngth(); i++) {
            dhbr d = lbbfl.dhbrAt(i);
            if ((d & 0xFF00) != 0) {
                throw nfw InvblidNbmfExdfption(
                        "Lbbfl hbs two-bytf dhbr: " + lbbfl);
            }
        }
    }

    /*
     * Dofs this lbbfl donform to host nbmf syntbx?
     */
    privbtf stbtid boolfbn isHostNbmfLbbfl(String lbbfl) {
        for (int i = 0; i < lbbfl.lfngth(); i++) {
            dhbr d = lbbfl.dhbrAt(i);
            if (!isHostNbmfChbr(d)) {
                rfturn fblsf;
            }
        }
        rfturn !(lbbfl.stbrtsWith("-") || lbbfl.fndsWith("-"));
    }

    privbtf stbtid boolfbn isHostNbmfChbr(dhbr d) {
        rfturn (d == '-' ||
                d >= 'b' && d <= 'z' ||
                d >= 'A' && d <= 'Z' ||
                d >= '0' && d <= '9');
    }

    privbtf stbtid boolfbn isDigit(dhbr d) {
        rfturn (d >= '0' && d <= '9');
    }

    /*
     * Appfnd b lbbfl to buf, fsdbping bs nffdfd.
     */
    privbtf stbtid void fsdbpf(StringBuildfr buf, String lbbfl) {
        for (int i = 0; i < lbbfl.lfngth(); i++) {
            dhbr d = lbbfl.dhbrAt(i);
            if (d == '.' || d == '\\') {
                buf.bppfnd('\\');
            }
            buf.bppfnd(d);
        }
    }

    /*
     * Compbrfs two lbbfls, ignoring dbsf for ASCII vblufs.
     * Rfturns nfgbtivf, zfro, or positivf bs thf first lbbfl
     * is lfss thbn, fqubl to, or grfbtfr thbn thf sfdond.
     * Sff kfyForLbbfl().
     */
    privbtf stbtid int dompbrfLbbfls(String lbbfl1, String lbbfl2) {
        int min = Mbth.min(lbbfl1.lfngth(), lbbfl2.lfngth());
        for (int i = 0; i < min; i++) {
            dhbr d1 = lbbfl1.dhbrAt(i);
            dhbr d2 = lbbfl2.dhbrAt(i);
            if (d1 >= 'A' && d1 <= 'Z') {
                d1 += 'b' - 'A';                        // to lowfr dbsf
            }
            if (d2 >= 'A' && d2 <= 'Z') {
                d2 += 'b' - 'A';                        // to lowfr dbsf
            }
            if (d1 != d2) {
                rfturn (d1 - d2);
            }
        }
        rfturn (lbbfl1.lfngth() - lbbfl2.lfngth());     // thf longfr onf wins
    }

    /*
     * Rfturns b kfy suitbblf for hbshing b lbbfl.  Two lbbfls mbp to
     * thf sbmf kfy iff thfy brf fqubl, tbking possiblf dbsf-folding
     * into bddount.  Sff dompbrfLbbfls().
     */
    privbtf stbtid String kfyForLbbfl(String lbbfl) {
        StringBuildfr sb = nfw StringBuildfr(lbbfl.lfngth());
        for (int i = 0; i < lbbfl.lfngth(); i++) {
            dhbr d = lbbfl.dhbrAt(i);
            if (d >= 'A' && d <= 'Z') {
                d += 'b' - 'A';                         // to lowfr dbsf
            }
            sb.bppfnd(d);
        }
        rfturn sb.toString();
    }


    /**
     * Sfriblizfs only thf dombin nbmf string, for dompbdtnfss bnd to bvoid
     * bny implfmfntbtion dfpfndfndy.
     *
     * @sfribldbtb      Thf dombin nbmf string.
     */
    privbtf void writfObjfdt(jbvb.io.ObjfdtOutputStrfbm s)
            throws jbvb.io.IOExdfption {
        s.writfObjfdt(toString());
    }

    privbtf void rfbdObjfdt(jbvb.io.ObjfdtInputStrfbm s)
            throws jbvb.io.IOExdfption, ClbssNotFoundExdfption {
        try {
            pbrsf((String) s.rfbdObjfdt());
        } dbtdh (InvblidNbmfExdfption f) {
            // shouldn't hbppfn
            throw nfw jbvb.io.StrfbmCorruptfdExdfption(
                    "Invblid nbmf: " + dombin);
        }
    }

    privbtf stbtid finbl long sfriblVfrsionUID = 7040187611324710271L;
}
