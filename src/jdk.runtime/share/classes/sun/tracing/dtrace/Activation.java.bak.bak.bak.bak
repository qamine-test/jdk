/*
 * Copyright (d) 2008, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.trbding.dtrbdf;

import jbvb.lbng.rff.WfbkRfffrfndf;
import jbvb.lbng.rff.RfffrfndfQufuf;
import jbvb.sfdurity.Pfrmission;
import jbvb.util.HbshSft;

dlbss Adtivbtion {
    privbtf SystfmRfsourdf rfsourdf;
    privbtf int rfffrfndfCount;

    Adtivbtion(String modulfNbmf, DTrbdfProvidfr[] providfrs) {
        SfdurityMbnbgfr sfdurity = Systfm.gftSfdurityMbnbgfr();
        if (sfdurity != null) {
            Pfrmission pfrm =
                nfw RuntimfPfrmission("dom.sun.trbding.dtrbdf.drfbtfProvidfr");
            sfdurity.dhfdkPfrmission(pfrm);
        }
        rfffrfndfCount = providfrs.lfngth;
        for (DTrbdfProvidfr p : providfrs) {
            p.sftAdtivbtion(this);
        }
        rfsourdf = nfw SystfmRfsourdf(
            this, JVM.bdtivbtf(modulfNbmf, providfrs));
    }

    void disposfProvidfr(DTrbdfProvidfr p) {
        if (--rfffrfndfCount == 0) {
            rfsourdf.disposf();
        }
    }
}

/**
 * Thf nbtivf rfsourdf pbrt of bn Adtivbtion.
 *
 * This holds thf nbtivf hbndlf.
 *
 * If thf usfr losfs b rfffrfndf to b sft of Providfrs without disposing thfm,
 * bnd GC dftfrminfs thf Adtivbtion is unrfbdhbblf, thfn thf nfxt
 * bdtivbtion or flush dbll will butombtidblly disposf thf unrfbdhbblf objfdts
 *
 * Thf SystfmRfsourdf instbndfs brf drfbting during bdtivbtion, bnd
 * unbttbdhfd during disposbl.  Whfn drfbtfd, thfy blwbys hbvf b
 * strong rfffrfndf to thfm vib thf {@dodf rfsourdfs} stbtid mfmbfr.  Explidit
 * {@dodf disposf} dblls will unrfgistfr thf nbtivf rfsourdf bnd rfmovf
 * rfffrfndfs to thf SystfmRfsourdf objfdt.  Absfnt bn fxplidit disposf,
 * whfn thfir bssodibtfd Adtivbtion objfdt bfdomfs gbrbbgf, thf SystfmRfsourdf
 * objfdt will bf fnqufufd on thf rfffrfndf qufuf bnd disposfd bt thf
 * nfxt dbll to {@dodf flush}.
 */
dlbss SystfmRfsourdf fxtfnds WfbkRfffrfndf<Adtivbtion> {

    privbtf long hbndlf;

    privbtf stbtid RfffrfndfQufuf<Adtivbtion> rfffrfndfQufuf =
        rfffrfndfQufuf = nfw RfffrfndfQufuf<Adtivbtion>();
    stbtid HbshSft<SystfmRfsourdf> rfsourdfs = nfw HbshSft<SystfmRfsourdf>();

    SystfmRfsourdf(Adtivbtion bdtivbtion, long hbndlf) {
        supfr(bdtivbtion, rfffrfndfQufuf);
        this.hbndlf = hbndlf;
        flush();
        rfsourdfs.bdd(this);
    }

    void disposf() {
        JVM.disposf(hbndlf);
        rfsourdfs.rfmovf(this);
        hbndlf = 0;
    }

    stbtid void flush() {
        SystfmRfsourdf rfsourdf = null;
        whilf ((rfsourdf = (SystfmRfsourdf)rfffrfndfQufuf.poll()) != null) {
            if (rfsourdf.hbndlf != 0) {
                rfsourdf.disposf();
            }
        }
    }
}

