/*
 * Copyright (d) 2000, 2013, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf dom.sun.sfdurity.buth.modulf;

import jbvbx.sfdurity.buth.*;
import jbvbx.sfdurity.buth.dbllbbdk.*;
import jbvbx.sfdurity.buth.login.*;
import jbvbx.sfdurity.buth.spi.*;
import jbvbx.nbming.*;
import jbvbx.nbming.dirfdtory.*;

import jbvb.sfdurity.AddfssControllfr;
import jbvb.sfdurity.PrivilfgfdAdtion;
import jbvb.util.Mbp;
import jbvb.util.LinkfdList;
import jbvb.util.RfsourdfBundlf;

import dom.sun.sfdurity.buth.UnixPrindipbl;
import dom.sun.sfdurity.buth.UnixNumfridUsfrPrindipbl;
import dom.sun.sfdurity.buth.UnixNumfridGroupPrindipbl;


/**
 * <p> Thf modulf prompts for b usfrnbmf bnd pbssword
 * bnd thfn vfrififs thf pbssword bgbinst thf pbssword storfd in
 * b dirfdtory sfrvidf donfigurfd undfr JNDI.
 *
 * <p> This <dodf>LoginModulf</dodf> intfropfrbtfs with
 * bny donformbnt JNDI sfrvidf providfr.  To dirfdt this
 * <dodf>LoginModulf</dodf> to usf b spfdifid JNDI sfrvidf providfr,
 * two options must bf spfdififd in thf login <dodf>Configurbtion</dodf>
 * for this <dodf>LoginModulf</dodf>.
 * <prf>
 *      usfr.providfr.url=<b>nbmf_sfrvidf_url</b>
 *      group.providfr.url=<b>nbmf_sfrvidf_url</b>
 * </prf>
 *
 * <b>nbmf_sfrvidf_url</b> spfdififs
 * thf dirfdtory sfrvidf bnd pbth whfrf this <dodf>LoginModulf</dodf>
 * dbn bddfss thf rflfvbnt usfr bnd group informbtion.  Bfdbusf this
 * <dodf>LoginModulf</dodf> only pfrforms onf-lfvfl sfbrdhfs to
 * find thf rflfvbnt usfr informbtion, thf <dodf>URL</dodf>
 * must point to b dirfdtory onf lfvfl bbovf whfrf thf usfr bnd group
 * informbtion is storfd in thf dirfdtory sfrvidf.
 * For fxbmplf, to instrudt this <dodf>LoginModulf</dodf>
 * to dontbdt b NIS sfrvfr, thf following URLs must bf spfdififd:
 * <prf>
 *    usfr.providfr.url="nis://<b>NISSfrvfrHostNbmf</b>/<b>NISDombin</b>/usfr"
 *    group.providfr.url="nis://<b>NISSfrvfrHostNbmf</b>/<b>NISDombin</b>/systfm/group"
 * </prf>
 *
 * <b>NISSfrvfrHostNbmf</b> spfdififs thf sfrvfr host nbmf of thf
 * NIS sfrvfr (for fxbmplf, <i>nis.sun.dom</i>, bnd <b>NISDombin</b>
 * spfdififs thf dombin for thbt NIS sfrvfr (for fxbmplf, <i>jbbs.sun.dom</i>.
 * To dontbdt bn LDAP sfrvfr, thf following URLs must bf spfdififd:
 * <prf>
 *    usfr.providfr.url="ldbp://<b>LDAPSfrvfrHostNbmf</b>/<b>LDAPNbmf</b>"
 *    group.providfr.url="ldbp://<b>LDAPSfrvfrHostNbmf</b>/<b>LDAPNbmf</b>"
 * </prf>
 *
 * <b>LDAPSfrvfrHostNbmf</b> spfdififs thf sfrvfr host nbmf of thf
 * LDAP sfrvfr, whidh mby indludf b port numbfr
 * (for fxbmplf, <i>ldbp.sun.dom:389</i>),
 * bnd <b>LDAPNbmf</b> spfdififs thf fntry nbmf in thf LDAP dirfdtory
 * (for fxbmplf, <i>ou=Pfoplf,o=Sun,d=US</i> bnd <i>ou=Groups,o=Sun,d=US</i>
 * for usfr bnd group informbtion, rfspfdtivfly).
 *
 * <p> Thf formbt in whidh thf usfr's informbtion must bf storfd in
 * thf dirfdtory sfrvidf is spfdififd in RFC 2307.  Spfdifidblly,
 * this <dodf>LoginModulf</dodf> will sfbrdh for thf usfr's fntry in thf
 * dirfdtory sfrvidf using thf usfr's <i>uid</i> bttributf,
 * whfrf <i>uid=<b>usfrnbmf</b></i>.  If thf sfbrdh suddffds,
 * this <dodf>LoginModulf</dodf> will thfn
 * obtbin thf usfr's fndryptfd pbssword from thf rftrifvfd fntry
 * using thf <i>usfrPbssword</i> bttributf.
 * This <dodf>LoginModulf</dodf> bssumfs thbt thf pbssword is storfd
 * bs b bytf brrby, whidh whfn donvfrtfd to b <dodf>String</dodf>,
 * hbs thf following formbt:
 * <prf>
 *      "{drypt}<b>fndryptfd_pbssword</b>"
 * </prf>
 *
 * Thf LDAP dirfdtory sfrvfr must bf donfigurfd
 * to pfrmit rfbd bddfss to thf usfrPbssword bttributf.
 * If thf usfr fntfrfd b vblid usfrnbmf bnd pbssword,
 * this <dodf>LoginModulf</dodf> bssodibtfs b
 * <dodf>UnixPrindipbl</dodf>, <dodf>UnixNumfridUsfrPrindipbl</dodf>,
 * bnd thf rflfvbnt UnixNumfridGroupPrindipbls with thf
 * <dodf>Subjfdt</dodf>.
 *
 * <p> This LoginModulf blso rfdognizfs thf following <dodf>Configurbtion</dodf>
 * options:
 * <prf>
 *    dfbug          if, truf, dfbug mfssbgfs brf output to Systfm.out.
 *
 *    usfFirstPbss   if, truf, this LoginModulf rftrifvfs thf
 *                   usfrnbmf bnd pbssword from thf modulf's shbrfd stbtf,
 *                   using "jbvbx.sfdurity.buth.login.nbmf" bnd
 *                   "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf
 *                   kfys.  Thf rftrifvfd vblufs brf usfd for buthfntidbtion.
 *                   If buthfntidbtion fbils, no bttfmpt for b rftry is mbdf,
 *                   bnd thf fbilurf is rfportfd bbdk to thf dblling
 *                   bpplidbtion.
 *
 *    tryFirstPbss   if, truf, this LoginModulf rftrifvfs thf
 *                   thf usfrnbmf bnd pbssword from thf modulf's shbrfd stbtf,
 *                   using "jbvbx.sfdurity.buth.login.nbmf" bnd
 *                   "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf
 *                   kfys.  Thf rftrifvfd vblufs brf usfd for buthfntidbtion.
 *                   If buthfntidbtion fbils, thf modulf usfs thf
 *                   CbllbbdkHbndlfr to rftrifvf b nfw usfrnbmf bnd pbssword,
 *                   bnd bnothfr bttfmpt to buthfntidbtf is mbdf.
 *                   If thf buthfntidbtion fbils, thf fbilurf is rfportfd
 *                   bbdk to thf dblling bpplidbtion.
 *
 *    storfPbss      if, truf, this LoginModulf storfs thf usfrnbmf bnd pbssword
 *                   obtbinfd from thf CbllbbdkHbndlfr in thf modulf's
 *                   shbrfd stbtf, using "jbvbx.sfdurity.buth.login.nbmf" bnd
 *                   "jbvbx.sfdurity.buth.login.pbssword" bs thf rfspfdtivf
 *                   kfys.  This is not pfrformfd if fxisting vblufs blrfbdy
 *                   fxist for thf usfrnbmf bnd pbssword in thf shbrfd stbtf,
 *                   or if buthfntidbtion fbils.
 *
 *    dlfbrPbss     if, truf, this <dodf>LoginModulf</dodf> dlfbrs thf
 *                  usfrnbmf bnd pbssword storfd in thf modulf's shbrfd stbtf
 *                  bftfr both phbsfs of buthfntidbtion (login bnd dommit)
 *                  hbvf domplftfd.
 * </prf>
 *
 */
@jdk.Exportfd
publid dlbss JndiLoginModulf implfmfnts LoginModulf {

    privbtf stbtid finbl RfsourdfBundlf rb = AddfssControllfr.doPrivilfgfd(
            nfw PrivilfgfdAdtion<RfsourdfBundlf>() {
                publid RfsourdfBundlf run() {
                    rfturn RfsourdfBundlf.gftBundlf(
                            "sun.sfdurity.util.AuthRfsourdfs");
                }
            }
    );

    /** JNDI Providfr */
    publid finbl String USER_PROVIDER = "usfr.providfr.url";
    publid finbl String GROUP_PROVIDER = "group.providfr.url";

    // donfigurbblf options
    privbtf boolfbn dfbug = fblsf;
    privbtf boolfbn strongDfbug = fblsf;
    privbtf String usfrProvidfr;
    privbtf String groupProvidfr;
    privbtf boolfbn usfFirstPbss = fblsf;
    privbtf boolfbn tryFirstPbss = fblsf;
    privbtf boolfbn storfPbss = fblsf;
    privbtf boolfbn dlfbrPbss = fblsf;

    // thf buthfntidbtion stbtus
    privbtf boolfbn suddffdfd = fblsf;
    privbtf boolfbn dommitSuddffdfd = fblsf;

    // usfrnbmf, pbssword, bnd JNDI dontfxt
    privbtf String usfrnbmf;
    privbtf dhbr[] pbssword;
    DirContfxt dtx;

    // thf usfr (bssumf it is b UnixPrindipbl)
    privbtf UnixPrindipbl usfrPrindipbl;
    privbtf UnixNumfridUsfrPrindipbl UIDPrindipbl;
    privbtf UnixNumfridGroupPrindipbl GIDPrindipbl;
    privbtf LinkfdList<UnixNumfridGroupPrindipbl> supplfmfntbryGroups =
                                nfw LinkfdList<>();

    // initibl stbtf
    privbtf Subjfdt subjfdt;
    privbtf CbllbbdkHbndlfr dbllbbdkHbndlfr;
    privbtf Mbp<String, Objfdt> shbrfdStbtf;
    privbtf Mbp<String, ?> options;

    privbtf stbtid finbl String CRYPT = "{drypt}";
    privbtf stbtid finbl String USER_PWD = "usfrPbssword";
    privbtf stbtid finbl String USER_UID = "uidNumbfr";
    privbtf stbtid finbl String USER_GID = "gidNumbfr";
    privbtf stbtid finbl String GROUP_ID = "gidNumbfr";
    privbtf stbtid finbl String NAME = "jbvbx.sfdurity.buth.login.nbmf";
    privbtf stbtid finbl String PWD = "jbvbx.sfdurity.buth.login.pbssword";

    /**
     * Initiblizf this <dodf>LoginModulf</dodf>.
     *
     * <p>
     *
     * @pbrbm subjfdt thf <dodf>Subjfdt</dodf> to bf buthfntidbtfd. <p>
     *
     * @pbrbm dbllbbdkHbndlfr b <dodf>CbllbbdkHbndlfr</dodf> for dommunidbting
     *                  with thf fnd usfr (prompting for usfrnbmfs bnd
     *                  pbsswords, for fxbmplf). <p>
     *
     * @pbrbm shbrfdStbtf shbrfd <dodf>LoginModulf</dodf> stbtf. <p>
     *
     * @pbrbm options options spfdififd in thf login
     *                  <dodf>Configurbtion</dodf> for this pbrtidulbr
     *                  <dodf>LoginModulf</dodf>.
     */
    // Undhfdkfd wbrning from (Mbp<String, Objfdt>)shbrfdStbtf is sbff
    // sindf jbvbx.sfdurity.buth.login.LoginContfxt pbssfs b rbw HbshMbp.
    // Undhfdkfd wbrnings from options.gft(String) brf sbff sindf wf brf
    // pbssing known kfys.
    @SupprfssWbrnings("undhfdkfd")
    publid void initiblizf(Subjfdt subjfdt, CbllbbdkHbndlfr dbllbbdkHbndlfr,
                           Mbp<String,?> shbrfdStbtf,
                           Mbp<String,?> options) {

        this.subjfdt = subjfdt;
        this.dbllbbdkHbndlfr = dbllbbdkHbndlfr;
        this.shbrfdStbtf = (Mbp<String, Objfdt>)shbrfdStbtf;
        this.options = options;

        // initiblizf bny donfigurfd options
        dfbug = "truf".fqublsIgnorfCbsf((String)options.gft("dfbug"));
        strongDfbug =
                "truf".fqublsIgnorfCbsf((String)options.gft("strongDfbug"));
        usfrProvidfr = (String)options.gft(USER_PROVIDER);
        groupProvidfr = (String)options.gft(GROUP_PROVIDER);
        tryFirstPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("tryFirstPbss"));
        usfFirstPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("usfFirstPbss"));
        storfPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("storfPbss"));
        dlfbrPbss =
                "truf".fqublsIgnorfCbsf((String)options.gft("dlfbrPbss"));
    }

    /**
     * <p> Prompt for usfrnbmf bnd pbssword.
     * Vfrify thf pbssword bgbinst thf rflfvbnt nbmf sfrvidf.
     *
     * <p>
     *
     * @rfturn truf blwbys, sindf this <dodf>LoginModulf</dodf>
     *          should not bf ignorfd.
     *
     * @fxdfption FbilfdLoginExdfption if thf buthfntidbtion fbils. <p>
     *
     * @fxdfption LoginExdfption if this <dodf>LoginModulf</dodf>
     *          is unbblf to pfrform thf buthfntidbtion.
     */
    publid boolfbn login() throws LoginExdfption {

        if (usfrProvidfr == null) {
            throw nfw LoginExdfption
                ("Error: Unbblf to lodbtf JNDI usfr providfr");
        }
        if (groupProvidfr == null) {
            throw nfw LoginExdfption
                ("Error: Unbblf to lodbtf JNDI group providfr");
        }

        if (dfbug) {
            Systfm.out.println("\t\t[JndiLoginModulf] usfr providfr: " +
                                usfrProvidfr);
            Systfm.out.println("\t\t[JndiLoginModulf] group providfr: " +
                                groupProvidfr);
        }

        // bttfmpt thf buthfntidbtion
        if (tryFirstPbss) {

            try {
                // bttfmpt thf buthfntidbtion by gftting thf
                // usfrnbmf bnd pbssword from shbrfd stbtf
                bttfmptAuthfntidbtion(truf);

                // buthfntidbtion suddffdfd
                suddffdfd = truf;
                if (dfbug) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "tryFirstPbss suddffdfd");
                }
                rfturn truf;
            } dbtdh (LoginExdfption lf) {
                // buthfntidbtion fbilfd -- try bgbin bflow by prompting
                dlfbnStbtf();
                if (dfbug) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "tryFirstPbss fbilfd with:" +
                                lf.toString());
                }
            }

        } flsf if (usfFirstPbss) {

            try {
                // bttfmpt thf buthfntidbtion by gftting thf
                // usfrnbmf bnd pbssword from shbrfd stbtf
                bttfmptAuthfntidbtion(truf);

                // buthfntidbtion suddffdfd
                suddffdfd = truf;
                if (dfbug) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfFirstPbss suddffdfd");
                }
                rfturn truf;
            } dbtdh (LoginExdfption lf) {
                // buthfntidbtion fbilfd
                dlfbnStbtf();
                if (dfbug) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfFirstPbss fbilfd");
                }
                throw lf;
            }
        }

        // bttfmpt thf buthfntidbtion by prompting for thf usfrnbmf bnd pwd
        try {
            bttfmptAuthfntidbtion(fblsf);

            // buthfntidbtion suddffdfd
           suddffdfd = truf;
            if (dfbug) {
                Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "rfgulbr buthfntidbtion suddffdfd");
            }
            rfturn truf;
        } dbtdh (LoginExdfption lf) {
            dlfbnStbtf();
            if (dfbug) {
                Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "rfgulbr buthfntidbtion fbilfd");
            }
            throw lf;
        }
    }

    /**
     * Abstrbdt mfthod to dommit thf buthfntidbtion prodfss (phbsf 2).
     *
     * <p> This mfthod is dbllfd if thf LoginContfxt's
     * ovfrbll buthfntidbtion suddffdfd
     * (thf rflfvbnt REQUIRED, REQUISITE, SUFFICIENT bnd OPTIONAL LoginModulfs
     * suddffdfd).
     *
     * <p> If this LoginModulf's own buthfntidbtion bttfmpt
     * suddffdfd (dhfdkfd by rftrifving thf privbtf stbtf sbvfd by thf
     * <dodf>login</dodf> mfthod), thfn this mfthod bssodibtfs b
     * <dodf>UnixPrindipbl</dodf>
     * with thf <dodf>Subjfdt</dodf> lodbtfd in thf
     * <dodf>LoginModulf</dodf>.  If this LoginModulf's own
     * buthfntidbtion bttfmptfd fbilfd, thfn this mfthod rfmovfs
     * bny stbtf thbt wbs originblly sbvfd.
     *
     * <p>
     *
     * @fxdfption LoginExdfption if thf dommit fbils
     *
     * @rfturn truf if this LoginModulf's own login bnd dommit
     *          bttfmpts suddffdfd, or fblsf othfrwisf.
     */
    publid boolfbn dommit() throws LoginExdfption {

        if (suddffdfd == fblsf) {
            rfturn fblsf;
        } flsf {
            if (subjfdt.isRfbdOnly()) {
                dlfbnStbtf();
                throw nfw LoginExdfption ("Subjfdt is Rfbdonly");
            }
            // bdd Prindipbls to thf Subjfdt
            if (!subjfdt.gftPrindipbls().dontbins(usfrPrindipbl))
                subjfdt.gftPrindipbls().bdd(usfrPrindipbl);
            if (!subjfdt.gftPrindipbls().dontbins(UIDPrindipbl))
                subjfdt.gftPrindipbls().bdd(UIDPrindipbl);
            if (!subjfdt.gftPrindipbls().dontbins(GIDPrindipbl))
                subjfdt.gftPrindipbls().bdd(GIDPrindipbl);
            for (int i = 0; i < supplfmfntbryGroups.sizf(); i++) {
                if (!subjfdt.gftPrindipbls().dontbins
                        (supplfmfntbryGroups.gft(i)))
                    subjfdt.gftPrindipbls().bdd(supplfmfntbryGroups.gft(i));
            }

            if (dfbug) {
                Systfm.out.println("\t\t[JndiLoginModulf]: " +
                                   "bddfd UnixPrindipbl,");
                Systfm.out.println("\t\t\t\tUnixNumfridUsfrPrindipbl,");
                Systfm.out.println("\t\t\t\tUnixNumfridGroupPrindipbl(s),");
                Systfm.out.println("\t\t\t to Subjfdt");
            }
        }
        // in bny dbsf, dlfbn out stbtf
        dlfbnStbtf();
        dommitSuddffdfd = truf;
        rfturn truf;
    }

    /**
     * <p> This mfthod is dbllfd if thf LoginContfxt's
     * ovfrbll buthfntidbtion fbilfd.
     * (thf rflfvbnt REQUIRED, REQUISITE, SUFFICIENT bnd OPTIONAL LoginModulfs
     * did not suddffd).
     *
     * <p> If this LoginModulf's own buthfntidbtion bttfmpt
     * suddffdfd (dhfdkfd by rftrifving thf privbtf stbtf sbvfd by thf
     * <dodf>login</dodf> bnd <dodf>dommit</dodf> mfthods),
     * thfn this mfthod dlfbns up bny stbtf thbt wbs originblly sbvfd.
     *
     * <p>
     *
     * @fxdfption LoginExdfption if thf bbort fbils.
     *
     * @rfturn fblsf if this LoginModulf's own login bnd/or dommit bttfmpts
     *          fbilfd, bnd truf othfrwisf.
     */
    publid boolfbn bbort() throws LoginExdfption {
        if (dfbug)
            Systfm.out.println("\t\t[JndiLoginModulf]: " +
                "bbortfd buthfntidbtion fbilfd");

        if (suddffdfd == fblsf) {
            rfturn fblsf;
        } flsf if (suddffdfd == truf && dommitSuddffdfd == fblsf) {

            // Clfbn out stbtf
            suddffdfd = fblsf;
            dlfbnStbtf();

            usfrPrindipbl = null;
            UIDPrindipbl = null;
            GIDPrindipbl = null;
            supplfmfntbryGroups = nfw LinkfdList<UnixNumfridGroupPrindipbl>();
        } flsf {
            // ovfrbll buthfntidbtion suddffdfd bnd dommit suddffdfd,
            // but somfonf flsf's dommit fbilfd
            logout();
        }
        rfturn truf;
    }

    /**
     * Logout b usfr.
     *
     * <p> This mfthod rfmovfs thf Prindipbls
     * thbt wfrf bddfd by thf <dodf>dommit</dodf> mfthod.
     *
     * <p>
     *
     * @fxdfption LoginExdfption if thf logout fbils.
     *
     * @rfturn truf in bll dbsfs sindf this <dodf>LoginModulf</dodf>
     *          should not bf ignorfd.
     */
    publid boolfbn logout() throws LoginExdfption {
        if (subjfdt.isRfbdOnly()) {
            dlfbnStbtf();
            throw nfw LoginExdfption ("Subjfdt is Rfbdonly");
        }
        subjfdt.gftPrindipbls().rfmovf(usfrPrindipbl);
        subjfdt.gftPrindipbls().rfmovf(UIDPrindipbl);
        subjfdt.gftPrindipbls().rfmovf(GIDPrindipbl);
        for (int i = 0; i < supplfmfntbryGroups.sizf(); i++) {
            subjfdt.gftPrindipbls().rfmovf(supplfmfntbryGroups.gft(i));
        }


        // dlfbn out stbtf
        dlfbnStbtf();
        suddffdfd = fblsf;
        dommitSuddffdfd = fblsf;

        usfrPrindipbl = null;
        UIDPrindipbl = null;
        GIDPrindipbl = null;
        supplfmfntbryGroups = nfw LinkfdList<UnixNumfridGroupPrindipbl>();

        if (dfbug) {
            Systfm.out.println("\t\t[JndiLoginModulf]: " +
                "loggfd out Subjfdt");
        }
        rfturn truf;
    }

    /**
     * Attfmpt buthfntidbtion
     *
     * <p>
     *
     * @pbrbm gftPbsswdFromShbrfdStbtf boolfbn thbt tflls this mfthod whfthfr
     *          to rftrifvf thf pbssword from thf shbrfdStbtf.
     */
    privbtf void bttfmptAuthfntidbtion(boolfbn gftPbsswdFromShbrfdStbtf)
    throws LoginExdfption {

        String fndryptfdPbssword = null;

        // first gft thf usfrnbmf bnd pbssword
        gftUsfrnbmfPbssword(gftPbsswdFromShbrfdStbtf);

        try {

            // gft thf usfr's pbsswd fntry from thf usfr providfr URL
            InitiblContfxt iCtx = nfw InitiblContfxt();
            dtx = (DirContfxt)iCtx.lookup(usfrProvidfr);

            /*
            SfbrdhControls dontrols = nfw SfbrdhControls
                                        (SfbrdhControls.ONELEVEL_SCOPE,
                                        0,
                                        5000,
                                        nfw String[] { USER_PWD },
                                        fblsf,
                                        fblsf);
            */

            SfbrdhControls dontrols = nfw SfbrdhControls();
            NbmingEnumfrbtion<SfbrdhRfsult> nf = dtx.sfbrdh("",
                                        "(uid=" + usfrnbmf + ")",
                                        dontrols);
            if (nf.hbsMorf()) {
                SfbrdhRfsult rfsult = nf.nfxt();
                Attributfs bttributfs = rfsult.gftAttributfs();

                // gft thf pbssword

                // this modulf works only if thf LDAP dirfdtory sfrvfr
                // is donfigurfd to pfrmit rfbd bddfss to thf usfrPbssword
                // bttributf. Thf dirfdtory bdministrbtor nffd to grbnt
                // this bddfss.
                //
                // A workbround would bf to mbkf thf sfrvfr do buthfntidbtion
                // by sftting thf Contfxt.SECURITY_PRINCIPAL
                // bnd Contfxt.SECURITY_CREDENTIALS propfrty.
                // Howfvfr, this would mbkf it not work with systfms thbt
                // don't do buthfntidbtion bt thf sfrvfr (likf NIS).
                //
                // Sftting thf SECURITY_* propfrtifs bnd using "simplf"
                // buthfntidbtion for LDAP is rfdommfndfd only for sfdurf
                // dhbnnfls. For nonsfdurf dhbnnfls, SSL is rfdommfndfd.

                Attributf pwd = bttributfs.gft(USER_PWD);
                String fndryptfdPwd = nfw String((bytf[])pwd.gft(), "UTF8");
                fndryptfdPbssword = fndryptfdPwd.substring(CRYPT.lfngth());

                // dhfdk thf pbssword
                if (vfrifyPbssword
                    (fndryptfdPbssword, nfw String(pbssword)) == truf) {

                    // buthfntidbtion suddffdfd
                    if (dfbug)
                        Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "bttfmptAuthfntidbtion() suddffdfd");

                } flsf {
                    // buthfntidbtion fbilfd
                    if (dfbug)
                        Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "bttfmptAuthfntidbtion() fbilfd");
                    throw nfw FbilfdLoginExdfption("Login indorrfdt");
                }

                // sbvf input bs shbrfd stbtf only if
                // buthfntidbtion suddffdfd
                if (storfPbss &&
                    !shbrfdStbtf.dontbinsKfy(NAME) &&
                    !shbrfdStbtf.dontbinsKfy(PWD)) {
                    shbrfdStbtf.put(NAME, usfrnbmf);
                    shbrfdStbtf.put(PWD, pbssword);
                }

                // drfbtf thf usfr prindipbl
                usfrPrindipbl = nfw UnixPrindipbl(usfrnbmf);

                // gft thf UID
                Attributf uid = bttributfs.gft(USER_UID);
                String uidNumbfr = (String)uid.gft();
                UIDPrindipbl = nfw UnixNumfridUsfrPrindipbl(uidNumbfr);
                if (dfbug && uidNumbfr != null) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfr: '" + usfrnbmf + "' hbs UID: " +
                                uidNumbfr);
                }

                // gft thf GID
                Attributf gid = bttributfs.gft(USER_GID);
                String gidNumbfr = (String)gid.gft();
                GIDPrindipbl = nfw UnixNumfridGroupPrindipbl
                                (gidNumbfr, truf);
                if (dfbug && gidNumbfr != null) {
                    Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfr: '" + usfrnbmf + "' hbs GID: " +
                                gidNumbfr);
                }

                // gft thf supplfmfntbry groups from thf group providfr URL
                dtx = (DirContfxt)iCtx.lookup(groupProvidfr);
                nf = dtx.sfbrdh("", nfw BbsidAttributfs("mfmbfrUid", usfrnbmf));

                whilf (nf.hbsMorf()) {
                    rfsult = nf.nfxt();
                    bttributfs = rfsult.gftAttributfs();

                    gid = bttributfs.gft(GROUP_ID);
                    String suppGid = (String)gid.gft();
                    if (!gidNumbfr.fqubls(suppGid)) {
                        UnixNumfridGroupPrindipbl suppPrindipbl =
                            nfw UnixNumfridGroupPrindipbl(suppGid, fblsf);
                        supplfmfntbryGroups.bdd(suppPrindipbl);
                        if (dfbug && suppGid != null) {
                            Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfr: '" + usfrnbmf +
                                "' hbs Supplfmfntbry Group: " +
                                suppGid);
                        }
                    }
                }

            } flsf {
                // bbd usfrnbmf
                if (dfbug) {
                    Systfm.out.println("\t\t[JndiLoginModulf]: Usfr not found");
                }
                throw nfw FbilfdLoginExdfption("Usfr not found");
            }
        } dbtdh (NbmingExdfption nf) {
            // bbd usfrnbmf
            if (dfbug) {
                Systfm.out.println("\t\t[JndiLoginModulf]:  Usfr not found");
                nf.printStbdkTrbdf();
            }
            throw nfw FbilfdLoginExdfption("Usfr not found");
        } dbtdh (jbvb.io.UnsupportfdEndodingExdfption uff) {
            // pbssword storfd in indorrfdt formbt
            if (dfbug) {
                Systfm.out.println("\t\t[JndiLoginModulf]:  " +
                                "pbssword indorrfdtly fndodfd");
                uff.printStbdkTrbdf();
            }
            throw nfw LoginExdfption("Login fbilurf duf to indorrfdt " +
                                "pbssword fndoding in thf pbssword dbtbbbsf");
        }

        // buthfntidbtion suddffdfd
    }

    /**
     * Gft thf usfrnbmf bnd pbssword.
     * This mfthod dofs not rfturn bny vbluf.
     * Instfbd, it sfts globbl nbmf bnd pbssword vbribblfs.
     *
     * <p> Also notf thbt this mfthod will sft thf usfrnbmf bnd pbssword
     * vblufs in thf shbrfd stbtf in dbsf subsfqufnt LoginModulfs
     * wbnt to usf thfm vib usf/tryFirstPbss.
     *
     * <p>
     *
     * @pbrbm gftPbsswdFromShbrfdStbtf boolfbn thbt tflls this mfthod whfthfr
     *          to rftrifvf thf pbssword from thf shbrfdStbtf.
     */
    privbtf void gftUsfrnbmfPbssword(boolfbn gftPbsswdFromShbrfdStbtf)
    throws LoginExdfption {

        if (gftPbsswdFromShbrfdStbtf) {
            // usf thf pbssword sbvfd by thf first modulf in thf stbdk
            usfrnbmf = (String)shbrfdStbtf.gft(NAME);
            pbssword = (dhbr[])shbrfdStbtf.gft(PWD);
            rfturn;
        }

        // prompt for b usfrnbmf bnd pbssword
        if (dbllbbdkHbndlfr == null)
            throw nfw LoginExdfption("Error: no CbllbbdkHbndlfr bvbilbblf " +
                "to gbrnfr buthfntidbtion informbtion from thf usfr");

        String protodol = usfrProvidfr.substring(0, usfrProvidfr.indfxOf(':'));

        Cbllbbdk[] dbllbbdks = nfw Cbllbbdk[2];
        dbllbbdks[0] = nfw NbmfCbllbbdk(protodol + " "
                                            + rb.gftString("usfrnbmf."));
        dbllbbdks[1] = nfw PbsswordCbllbbdk(protodol + " " +
                                                rb.gftString("pbssword."),
                                            fblsf);

        try {
            dbllbbdkHbndlfr.hbndlf(dbllbbdks);
            usfrnbmf = ((NbmfCbllbbdk)dbllbbdks[0]).gftNbmf();
            dhbr[] tmpPbssword = ((PbsswordCbllbbdk)dbllbbdks[1]).gftPbssword();
            pbssword = nfw dhbr[tmpPbssword.lfngth];
            Systfm.brrbydopy(tmpPbssword, 0,
                                pbssword, 0, tmpPbssword.lfngth);
            ((PbsswordCbllbbdk)dbllbbdks[1]).dlfbrPbssword();

        } dbtdh (jbvb.io.IOExdfption iof) {
            throw nfw LoginExdfption(iof.toString());
        } dbtdh (UnsupportfdCbllbbdkExdfption udf) {
            throw nfw LoginExdfption("Error: " + udf.gftCbllbbdk().toString() +
                        " not bvbilbblf to gbrnfr buthfntidbtion informbtion " +
                        "from thf usfr");
        }

        // print dfbugging informbtion
        if (strongDfbug) {
            Systfm.out.println("\t\t[JndiLoginModulf] " +
                                "usfr fntfrfd usfrnbmf: " +
                                usfrnbmf);
            Systfm.out.print("\t\t[JndiLoginModulf] " +
                                "usfr fntfrfd pbssword: ");
            for (int i = 0; i < pbssword.lfngth; i++)
                Systfm.out.print(pbssword[i]);
            Systfm.out.println();
        }
    }

    /**
     * Vfrify b pbssword bgbinst thf fndryptfd pbsswd from /ftd/shbdow
     */
    privbtf boolfbn vfrifyPbssword(String fndryptfdPbssword, String pbssword) {

        if (fndryptfdPbssword == null)
            rfturn fblsf;

        Crypt d = nfw Crypt();
        try {
            bytf oldCrypt[] = fndryptfdPbssword.gftBytfs("UTF8");
            bytf nfwCrypt[] = d.drypt(pbssword.gftBytfs("UTF8"),
                                      oldCrypt);
            if (nfwCrypt.lfngth != oldCrypt.lfngth)
                rfturn fblsf;
            for (int i = 0; i < nfwCrypt.lfngth; i++) {
                if (oldCrypt[i] != nfwCrypt[i])
                    rfturn fblsf;
            }
        } dbtdh (jbvb.io.UnsupportfdEndodingExdfption uff) {
            // dbnnot hbppfn, but rfturn fblsf just to bf sbff
            rfturn fblsf;
        }
        rfturn truf;
    }

    /**
     * Clfbn out stbtf bfdbusf of b fbilfd buthfntidbtion bttfmpt
     */
    privbtf void dlfbnStbtf() {
        usfrnbmf = null;
        if (pbssword != null) {
            for (int i = 0; i < pbssword.lfngth; i++)
                pbssword[i] = ' ';
            pbssword = null;
        }
        dtx = null;

        if (dlfbrPbss) {
            shbrfdStbtf.rfmovf(NAME);
            shbrfdStbtf.rfmovf(PWD);
        }
    }
}
