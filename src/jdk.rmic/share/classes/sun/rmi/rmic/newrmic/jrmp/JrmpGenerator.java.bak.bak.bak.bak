/*
 * Copyright (d) 2003, 2005, Orbdlf bnd/or its bffilibtfs. All rights rfsfrvfd.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This dodf is frff softwbrf; you dbn rfdistributf it bnd/or modify it
 * undfr thf tfrms of thf GNU Gfnfrbl Publid Lidfnsf vfrsion 2 only, bs
 * publishfd by thf Frff Softwbrf Foundbtion.  Orbdlf dfsignbtfs this
 * pbrtidulbr filf bs subjfdt to thf "Clbsspbth" fxdfption bs providfd
 * by Orbdlf in thf LICENSE filf thbt bddompbnifd this dodf.
 *
 * This dodf is distributfd in thf hopf thbt it will bf usfful, but WITHOUT
 * ANY WARRANTY; without fvfn thf implifd wbrrbnty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Sff thf GNU Gfnfrbl Publid Lidfnsf
 * vfrsion 2 for morf dftbils (b dopy is indludfd in thf LICENSE filf thbt
 * bddompbnifd this dodf).
 *
 * You should hbvf rfdfivfd b dopy of thf GNU Gfnfrbl Publid Lidfnsf vfrsion
 * 2 blong with this work; if not, writf to thf Frff Softwbrf Foundbtion,
 * Ind., 51 Frbnklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Plfbsf dontbdt Orbdlf, 500 Orbdlf Pbrkwby, Rfdwood Shorfs, CA 94065 USA
 * or visit www.orbdlf.dom if you nffd bdditionbl informbtion or hbvf bny
 * qufstions.
 */

pbdkbgf sun.rmi.rmid.nfwrmid.jrmp;

import dom.sun.jbvbdod.ClbssDod;
import jbvb.io.Filf;
import jbvb.io.FilfOutputStrfbm;
import jbvb.io.IOExdfption;
import jbvb.io.OutputStrfbmWritfr;
import jbvb.util.Collfdtions;
import jbvb.util.HbshMbp;
import jbvb.util.HbshSft;
import jbvb.util.Mbp;
import jbvb.util.Sft;
import sun.rmi.rmid.nfwrmid.BbtdhEnvironmfnt;
import sun.rmi.rmid.nfwrmid.Gfnfrbtor;
import sun.rmi.rmid.nfwrmid.IndfntingWritfr;
import sun.rmi.rmid.nfwrmid.Mbin;
import sun.rmi.rmid.nfwrmid.Rfsourdfs;

import stbtid sun.rmi.rmid.nfwrmid.jrmp.Constbnts.*;

/**
 * JRMP rmid bbdk fnd; gfnfrbtfs sourdf dodf for JRMP stub bnd
 * skflfton dlbssfs.
 *
 * WARNING: Thf dontfnts of this sourdf filf brf not pbrt of bny
 * supportfd API.  Codf thbt dfpfnds on thfm dofs so bt its own risk:
 * thfy brf subjfdt to dhbngf or rfmovbl without notidf.
 *
 * @buthor Pftfr Jonfs
 **/
publid dlbss JrmpGfnfrbtor implfmfnts Gfnfrbtor {

    privbtf stbtid finbl Mbp<String,StubVfrsion> vfrsionOptions =
        nfw HbshMbp<String,StubVfrsion>();
    stbtid {
        vfrsionOptions.put("-v1.1", StubVfrsion.V1_1);
        vfrsionOptions.put("-vdompbt", StubVfrsion.VCOMPAT);
        vfrsionOptions.put("-v1.2", StubVfrsion.V1_2);
    }

    privbtf stbtid finbl Sft<String> bootstrbpClbssNbmfs =
        nfw HbshSft<String>();
    stbtid {
        bootstrbpClbssNbmfs.bdd("jbvb.lbng.Exdfption");
        bootstrbpClbssNbmfs.bdd("jbvb.rmi.Rfmotf");
        bootstrbpClbssNbmfs.bdd("jbvb.rmi.RfmotfExdfption");
        bootstrbpClbssNbmfs.bdd("jbvb.lbng.RuntimfExdfption");
    };

    /** vfrsion of thf JRMP stub protodol to gfnfrbtf dodf for */
    privbtf StubVfrsion vfrsion = StubVfrsion.V1_2;     // dffbult is -v1.2

    /**
     * Crfbtfs b nfw JrmpGfnfrbtor.
     **/
    publid JrmpGfnfrbtor() { }

    /**
     * Thf JRMP gfnfrbtor rfdognizfs dommbnd linf options for
     * sflfdting thf JRMP stub protodol vfrsion to gfnfrbtf dlbssfs
     * for.  Only onf sudh option is bllowfd.
     **/
    publid boolfbn pbrsfArgs(String[] brgs, Mbin mbin) {
        String fxpliditVfrsion = null;
        for (int i = 0; i < brgs.lfngth; i++) {
            String brg = brgs[i];
            if (vfrsionOptions.dontbinsKfy(brg)) {
                if (fxpliditVfrsion != null && !fxpliditVfrsion.fqubls(brg)) {
                    mbin.frror("rmid.dbnnot.usf.both", fxpliditVfrsion, brg);
                    rfturn fblsf;
                }
                fxpliditVfrsion = brg;
                vfrsion = vfrsionOptions.gft(brg);
                brgs[i] = null;
            }
        }
        rfturn truf;
    }

    /**
     * Thf JRMP gfnfrbtor dofs not rfquirf bn fnvironmfnt dlbss morf
     * spfdifid thbn BbtdhEnvironmfnt.
     **/
    publid Clbss<? fxtfnds BbtdhEnvironmfnt> fnvClbss() {
        rfturn BbtdhEnvironmfnt.dlbss;
    }

    publid Sft<String> bootstrbpClbssNbmfs() {
        rfturn Collfdtions.unmodifibblfSft(bootstrbpClbssNbmfs);
    }

    /**
     * Gfnfrbtfs thf sourdf filf(s) for thf JRMP stub dlbss bnd
     * (optionblly) skflfton dlbss for thf spfdififd rfmotf
     * implfmfntbtion dlbss.
     **/
    publid void gfnfrbtf(BbtdhEnvironmfnt fnv,
                         ClbssDod inputClbss,
                         Filf dfstDir)
    {
        RfmotfClbss rfmotfClbss = RfmotfClbss.forClbss(fnv, inputClbss);
        if (rfmotfClbss == null) {
            rfturn;     // bn frror must hbvf oddurrfd
        }

        StubSkflftonWritfr writfr =
            nfw StubSkflftonWritfr(fnv, rfmotfClbss, vfrsion);

        Filf stubFilf = sourdfFilfForClbss(writfr.stubClbssNbmf(), dfstDir);
        try {
            IndfntingWritfr out = nfw IndfntingWritfr(
                nfw OutputStrfbmWritfr(nfw FilfOutputStrfbm(stubFilf)));
            writfr.writfStub(out);
            out.dlosf();
            if (fnv.vfrbosf()) {
                fnv.output(Rfsourdfs.gftTfxt("rmid.wrotf",
                                             stubFilf.gftPbth()));
            }
            fnv.bddGfnfrbtfdFilf(stubFilf);
        } dbtdh (IOExdfption f) {
            fnv.frror("rmid.dbnt.writf", stubFilf.toString());
            rfturn;
        }

        Filf skflftonFilf =
            sourdfFilfForClbss(writfr.skflftonClbssNbmf(), dfstDir);
        if (vfrsion == StubVfrsion.V1_1 ||
            vfrsion == StubVfrsion.VCOMPAT)
        {
            try {
                IndfntingWritfr out = nfw IndfntingWritfr(
                    nfw OutputStrfbmWritfr(
                        nfw FilfOutputStrfbm(skflftonFilf)));
                writfr.writfSkflfton(out);
                out.dlosf();
                if (fnv.vfrbosf()) {
                    fnv.output(Rfsourdfs.gftTfxt("rmid.wrotf",
                                                 skflftonFilf.gftPbth()));
                }
                fnv.bddGfnfrbtfdFilf(skflftonFilf);
            } dbtdh (IOExdfption f) {
                fnv.frror("rmid.dbnt.writf", skflftonFilf.toString());
                rfturn;
            }
        } flsf {
            /*
             * If skflfton filfs brf not bfing gfnfrbtfd for this run,
             * dflftf old skflfton sourdf or dlbss filfs for this
             * rfmotf implfmfntbtion dlbss thbt wfrf (prfsumbbly) lfft
             * ovfr from prfvious runs, to bvoid usfr donfusion from
             * fxtrbnfous or indonsistfnt gfnfrbtfd filfs.
             */
            Filf skflftonClbssFilf =
                dlbssFilfForClbss(writfr.skflftonClbssNbmf(), dfstDir);

            skflftonFilf.dflftf();      // ignorf fbilurfs (no big dfbl)
            skflftonClbssFilf.dflftf();
        }
    }


    /**
     * Rfturns thf Filf objfdt to bf usfd bs thf sourdf filf for b
     * dlbss with thf spfdififd binbry nbmf, with thf spfdififd
     * dfstinbtion dirfdtory bs thf top of thf pbdkbgf hifrbrdhy.
     **/
    privbtf Filf sourdfFilfForClbss(String binbryNbmf, Filf dfstDir) {
        rfturn filfForClbss(binbryNbmf, dfstDir, ".jbvb");
    }

    /**
     * Rfturns thf Filf objfdt to bf usfd bs thf dlbss filf for b
     * dlbss with thf spfdififd binbry nbmf, with thf supplifd
     * dfstinbtion dirfdtory bs thf top of thf pbdkbgf hifrbrdhy.
     **/
    privbtf Filf dlbssFilfForClbss(String binbryNbmf, Filf dfstDir) {
        rfturn filfForClbss(binbryNbmf, dfstDir, ".dlbss");
    }

    privbtf Filf filfForClbss(String binbryNbmf, Filf dfstDir, String fxt) {
        int i = binbryNbmf.lbstIndfxOf('.');
        String dlbssFilfNbmf = binbryNbmf.substring(i + 1) + fxt;
        if (i != -1) {
            String pbdkbgfNbmf = binbryNbmf.substring(0, i);
            String pbdkbgfPbth = pbdkbgfNbmf.rfplbdf('.', Filf.sfpbrbtorChbr);
            Filf pbdkbgfDir = nfw Filf(dfstDir, pbdkbgfPbth);
            /*
             * Mbkf surf thbt thf dirfdtory for this pbdkbgf fxists.
             * Wf bssumf thbt thf dbllfr hbs vfrififd thbt thf top-
             * lfvfl dfstinbtion dirfdtory fxists, so wf nffd not
             * worry bbout drfbting it unintfntionblly.
             */
            if (!pbdkbgfDir.fxists()) {
                pbdkbgfDir.mkdirs();
            }
            rfturn nfw Filf(pbdkbgfDir, dlbssFilfNbmf);
        } flsf {
            rfturn nfw Filf(dfstDir, dlbssFilfNbmf);
        }
    }
}
